
Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  000057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020094  2**0
                  CONTENTS
  3 .bss          00000554  20000094  00005844  00020094  2**2
                  ALLOC
  4 .stack        00002000  200005e8  00005d98  00020094  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033aaa  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000052c9  00000000  00000000  00053bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d6dd  00000000  00000000  00058e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000928  00000000  00000000  00066565  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000db8  00000000  00000000  00066e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002299f  00000000  00000000  00067c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016c94  00000000  00000000  0008a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099030  00000000  00000000  000a1278  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001cb8  00000000  00000000  0013a2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e8 	.word	0x200025e8
       4:	00003ba1 	.word	0x00003ba1
       8:	00003b9d 	.word	0x00003b9d
       c:	00003b9d 	.word	0x00003b9d
	...
      2c:	00003b9d 	.word	0x00003b9d
	...
      38:	00003b9d 	.word	0x00003b9d
      3c:	00003b9d 	.word	0x00003b9d
      40:	00003b9d 	.word	0x00003b9d
      44:	00003b9d 	.word	0x00003b9d
      48:	00003b9d 	.word	0x00003b9d
      4c:	00001ee1 	.word	0x00001ee1
      50:	00003b9d 	.word	0x00003b9d
      54:	00003b9d 	.word	0x00003b9d
      58:	00003b9d 	.word	0x00003b9d
      5c:	00003b9d 	.word	0x00003b9d
      60:	00002519 	.word	0x00002519
      64:	00002529 	.word	0x00002529
      68:	00002539 	.word	0x00002539
      6c:	00002549 	.word	0x00002549
      70:	00002559 	.word	0x00002559
      74:	00002569 	.word	0x00002569
      78:	00003b9d 	.word	0x00003b9d
      7c:	00003b9d 	.word	0x00003b9d
      80:	00003b9d 	.word	0x00003b9d
      84:	000037ad 	.word	0x000037ad
      88:	000037bd 	.word	0x000037bd
	...
      94:	000037cd 	.word	0x000037cd
      98:	00003b9d 	.word	0x00003b9d
      9c:	00003b9d 	.word	0x00003b9d
      a0:	00000000 	.word	0x00000000
      a4:	00003b9d 	.word	0x00003b9d
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	000057b0 	.word	0x000057b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	000057b0 	.word	0x000057b0
     10c:	000057b0 	.word	0x000057b0
     110:	00000000 	.word	0x00000000

00000114 <ButtonPressed>:
*
* Output: Buttons State
*
********************************************************************/
uint8_t ButtonPressed(void)
{
     114:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     116:	4b13      	ldr	r3, [pc, #76]	; (164 <ButtonPressed+0x50>)
     118:	6a1a      	ldr	r2, [r3, #32]
     11a:	2380      	movs	r3, #128	; 0x80
     11c:	055b      	lsls	r3, r3, #21
     11e:	4013      	ands	r3, r2
	MIWI_TICK tickDifference;
	
	PUSH_BUTTON_SW0 = port_pin_get_input_level(BUTTON_0_PIN);
     120:	0019      	movs	r1, r3
     122:	1e4a      	subs	r2, r1, #1
     124:	4191      	sbcs	r1, r2
     126:	4a10      	ldr	r2, [pc, #64]	; (168 <ButtonPressed+0x54>)
     128:	7011      	strb	r1, [r2, #0]

	if(PUSH_BUTTON_SW0 == 0)
     12a:	2b00      	cmp	r3, #0
     12c:	d10d      	bne.n	14a <ButtonPressed+0x36>
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     12e:	4b0f      	ldr	r3, [pc, #60]	; (16c <ButtonPressed+0x58>)
     130:	781b      	ldrb	r3, [r3, #0]
		{
			PUSH_BUTTON_pressed = false;
		}
	}

	return 0;
     132:	2000      	movs	r0, #0
	PUSH_BUTTON_SW0 = port_pin_get_input_level(BUTTON_0_PIN);

	if(PUSH_BUTTON_SW0 == 0)
	{
		//if the button was previously not pressed
		if(PUSH_BUTTON_pressed == false)
     134:	2b00      	cmp	r3, #0
     136:	d113      	bne.n	160 <ButtonPressed+0x4c>
		{
			PUSH_BUTTON_pressed = true;
     138:	2201      	movs	r2, #1
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <ButtonPressed+0x58>)
     13c:	701a      	strb	r2, [r3, #0]
			PUSH_BUTTON_press_time.Val = MiWi_TickGet();
     13e:	4b0c      	ldr	r3, [pc, #48]	; (170 <ButtonPressed+0x5c>)
     140:	4798      	blx	r3
     142:	4b0c      	ldr	r3, [pc, #48]	; (174 <ButtonPressed+0x60>)
     144:	6018      	str	r0, [r3, #0]
			return 1;
     146:	2001      	movs	r0, #1
     148:	e00a      	b.n	160 <ButtonPressed+0x4c>
	}
	else
	{
		//get the current time
		MIWI_TICK t;
		t.Val = MiWi_TickGet();
     14a:	4b09      	ldr	r3, [pc, #36]	; (170 <ButtonPressed+0x5c>)
     14c:	4798      	blx	r3

		//if the button has been released long enough
		tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <ButtonPressed+0x60>)

		//then we can mark it as not pressed
		if(tickDifference.Val > FORTY_MILI_SECOND) // Debounce time of 40 ms  // 30 ms 
     150:	681b      	ldr	r3, [r3, #0]
     152:	1ac3      	subs	r3, r0, r3
		{
			PUSH_BUTTON_pressed = false;
		}
	}

	return 0;
     154:	2000      	movs	r0, #0

		//if the button has been released long enough
		tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);

		//then we can mark it as not pressed
		if(tickDifference.Val > FORTY_MILI_SECOND) // Debounce time of 40 ms  // 30 ms 
     156:	2b04      	cmp	r3, #4
     158:	d902      	bls.n	160 <ButtonPressed+0x4c>
		{
			PUSH_BUTTON_pressed = false;
     15a:	2200      	movs	r2, #0
     15c:	4b03      	ldr	r3, [pc, #12]	; (16c <ButtonPressed+0x58>)
     15e:	701a      	strb	r2, [r3, #0]
		}
	}

	return 0;
	
     160:	bd10      	pop	{r4, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	40002800 	.word	0x40002800
     168:	2000028b 	.word	0x2000028b
     16c:	20000288 	.word	0x20000288
     170:	00001c9d 	.word	0x00001c9d
     174:	20000290 	.word	0x20000290

00000178 <CONSOLE_PutString>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PutString(char* str)
{
     178:	b570      	push	{r4, r5, r6, lr}
	uint8_t c;

	while( (c = *str++) )
     17a:	1c44      	adds	r4, r0, #1
     17c:	7800      	ldrb	r0, [r0, #0]
     17e:	2800      	cmp	r0, #0
     180:	d006      	beq.n	190 <CONSOLE_PutString+0x18>
	sio2host_putchar(c);
     182:	4d04      	ldr	r5, [pc, #16]	; (194 <CONSOLE_PutString+0x1c>)
     184:	47a8      	blx	r5
     186:	3401      	adds	r4, #1
********************************************************************/
void CONSOLE_PutString(char* str)
{
	uint8_t c;

	while( (c = *str++) )
     188:	1e63      	subs	r3, r4, #1
     18a:	7818      	ldrb	r0, [r3, #0]
     18c:	2800      	cmp	r0, #0
     18e:	d1f9      	bne.n	184 <CONSOLE_PutString+0xc>
	sio2host_putchar(c);
}
     190:	bd70      	pop	{r4, r5, r6, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	00003f31 	.word	0x00003f31

00000198 <CONSOLE_PrintHex>:
* Note:             Do not power down the microcontroller until
*                   the transmission is complete or the last
*                   transmission of the string can be corrupted.
********************************************************************/
void CONSOLE_PrintHex(uint8_t toPrint)
{
     198:	b570      	push	{r4, r5, r6, lr}
     19a:	0004      	movs	r4, r0
	uint8_t PRINT_VAR;
	PRINT_VAR = toPrint;
	toPrint = (toPrint>>4)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     19c:	4e04      	ldr	r6, [pc, #16]	; (1b0 <CONSOLE_PrintHex+0x18>)
     19e:	0903      	lsrs	r3, r0, #4
     1a0:	5cf0      	ldrb	r0, [r6, r3]
     1a2:	4d04      	ldr	r5, [pc, #16]	; (1b4 <CONSOLE_PrintHex+0x1c>)
     1a4:	47a8      	blx	r5
	toPrint = (PRINT_VAR)&0x0F;
	sio2host_putchar(CharacterArray[toPrint]);
     1a6:	230f      	movs	r3, #15
     1a8:	401c      	ands	r4, r3
     1aa:	5d30      	ldrb	r0, [r6, r4]
     1ac:	47a8      	blx	r5
	return;
}
     1ae:	bd70      	pop	{r4, r5, r6, pc}
     1b0:	20000000 	.word	0x20000000
     1b4:	00003f31 	.word	0x00003f31

000001b8 <print_rx_message>:
	sio2host_putchar(CharacterArray[(toPrint%100)/10]);
	sio2host_putchar(CharacterArray[toPrint%10]);
}

void print_rx_message(void)
{
     1b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	if( rxMessage.flags.bits.secEn )
     1ba:	4b21      	ldr	r3, [pc, #132]	; (240 <print_rx_message+0x88>)
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	071b      	lsls	r3, r3, #28
     1c0:	d502      	bpl.n	1c8 <print_rx_message+0x10>
	{
	CONSOLE_PutString((char *)"Secured ");
     1c2:	4820      	ldr	r0, [pc, #128]	; (244 <print_rx_message+0x8c>)
     1c4:	4b20      	ldr	r3, [pc, #128]	; (248 <print_rx_message+0x90>)
     1c6:	4798      	blx	r3
	}

	if( rxMessage.flags.bits.broadcast )
     1c8:	4b1d      	ldr	r3, [pc, #116]	; (240 <print_rx_message+0x88>)
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	079b      	lsls	r3, r3, #30
     1ce:	d003      	beq.n	1d8 <print_rx_message+0x20>
	{
	CONSOLE_PutString((char *)"Broadcast Packet ");
     1d0:	481e      	ldr	r0, [pc, #120]	; (24c <print_rx_message+0x94>)
     1d2:	4b1d      	ldr	r3, [pc, #116]	; (248 <print_rx_message+0x90>)
     1d4:	4798      	blx	r3
     1d6:	e002      	b.n	1de <print_rx_message+0x26>
	}
	else
	{
	CONSOLE_PutString((char *)"Unicast Packet ");
     1d8:	481d      	ldr	r0, [pc, #116]	; (250 <print_rx_message+0x98>)
     1da:	4b1b      	ldr	r3, [pc, #108]	; (248 <print_rx_message+0x90>)
     1dc:	4798      	blx	r3
	}
	//CONSOLE_PrintHex(rxMessage.PacketRSSI);
	if( rxMessage.flags.bits.srcPrsnt )
     1de:	4b18      	ldr	r3, [pc, #96]	; (240 <print_rx_message+0x88>)
     1e0:	781b      	ldrb	r3, [r3, #0]
     1e2:	065b      	lsls	r3, r3, #25
     1e4:	d518      	bpl.n	218 <print_rx_message+0x60>
	{
	CONSOLE_PutString((char *)" from ");
     1e6:	481b      	ldr	r0, [pc, #108]	; (254 <print_rx_message+0x9c>)
     1e8:	4b17      	ldr	r3, [pc, #92]	; (248 <print_rx_message+0x90>)
     1ea:	4798      	blx	r3
	if( rxMessage.flags.bits.altSrcAddr )
     1ec:	4b14      	ldr	r3, [pc, #80]	; (240 <print_rx_message+0x88>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	09db      	lsrs	r3, r3, #7
     1f2:	2407      	movs	r4, #7
     1f4:	2b00      	cmp	r3, #0
     1f6:	d008      	beq.n	20a <print_rx_message+0x52>
	{
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
     1f8:	4d11      	ldr	r5, [pc, #68]	; (240 <print_rx_message+0x88>)
     1fa:	686b      	ldr	r3, [r5, #4]
     1fc:	7858      	ldrb	r0, [r3, #1]
     1fe:	4c16      	ldr	r4, [pc, #88]	; (258 <print_rx_message+0xa0>)
     200:	47a0      	blx	r4
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
     202:	686b      	ldr	r3, [r5, #4]
     204:	7818      	ldrb	r0, [r3, #0]
     206:	47a0      	blx	r4
     208:	e006      	b.n	218 <print_rx_message+0x60>
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
     20a:	4e0d      	ldr	r6, [pc, #52]	; (240 <print_rx_message+0x88>)
     20c:	4d12      	ldr	r5, [pc, #72]	; (258 <print_rx_message+0xa0>)
     20e:	6873      	ldr	r3, [r6, #4]
     210:	5d18      	ldrb	r0, [r3, r4]
     212:	47a8      	blx	r5
	CONSOLE_PrintHex( rxMessage.SourceAddress[1]);
	CONSOLE_PrintHex( rxMessage.SourceAddress[0]);
	}
	else
	{
	for(i = 0; i < MY_ADDRESS_LENGTH; i++)
     214:	3c01      	subs	r4, #1
     216:	d2fa      	bcs.n	20e <print_rx_message+0x56>
	{
	CONSOLE_PrintHex(rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
	}
	}
	}
	CONSOLE_PutString((char *)": ");
     218:	4810      	ldr	r0, [pc, #64]	; (25c <print_rx_message+0xa4>)
     21a:	4b0b      	ldr	r3, [pc, #44]	; (248 <print_rx_message+0x90>)
     21c:	4798      	blx	r3

	for(i = 0; i < rxMessage.PayloadSize; i++)
     21e:	4b08      	ldr	r3, [pc, #32]	; (240 <print_rx_message+0x88>)
     220:	7b1b      	ldrb	r3, [r3, #12]
     222:	2b00      	cmp	r3, #0
     224:	d00a      	beq.n	23c <print_rx_message+0x84>
     226:	2400      	movs	r4, #0
	{
		sio2host_putchar(rxMessage.Payload[i]);
     228:	4d05      	ldr	r5, [pc, #20]	; (240 <print_rx_message+0x88>)
     22a:	4e0d      	ldr	r6, [pc, #52]	; (260 <print_rx_message+0xa8>)
     22c:	68ab      	ldr	r3, [r5, #8]
     22e:	5d18      	ldrb	r0, [r3, r4]
     230:	47b0      	blx	r6
	}
	}
	}
	CONSOLE_PutString((char *)": ");

	for(i = 0; i < rxMessage.PayloadSize; i++)
     232:	3401      	adds	r4, #1
     234:	b2e4      	uxtb	r4, r4
     236:	7b2b      	ldrb	r3, [r5, #12]
     238:	42a3      	cmp	r3, r4
     23a:	d8f7      	bhi.n	22c <print_rx_message+0x74>
	{
		sio2host_putchar(rxMessage.Payload[i]);
		
	}
     23c:	bd70      	pop	{r4, r5, r6, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	200004f4 	.word	0x200004f4
     244:	000054f4 	.word	0x000054f4
     248:	00000179 	.word	0x00000179
     24c:	00005500 	.word	0x00005500
     250:	00005514 	.word	0x00005514
     254:	00005524 	.word	0x00005524
     258:	00000199 	.word	0x00000199
     25c:	0000552c 	.word	0x0000552c
     260:	00003f31 	.word	0x00003f31

00000264 <phyTrxSetState>:
}

/*************************************************************************/ /**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
     264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     266:	0004      	movs	r4, r0

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     268:	4f0b      	ldr	r7, [pc, #44]	; (298 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     26a:	4e0c      	ldr	r6, [pc, #48]	; (29c <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     26c:	251f      	movs	r5, #31

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     26e:	2103      	movs	r1, #3
     270:	2002      	movs	r0, #2
     272:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     274:	2001      	movs	r0, #1
     276:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     278:	4028      	ands	r0, r5
     27a:	2808      	cmp	r0, #8
     27c:	d1f7      	bne.n	26e <phyTrxSetState+0xa>

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     27e:	4f06      	ldr	r7, [pc, #24]	; (298 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     280:	4e06      	ldr	r6, [pc, #24]	; (29c <phyTrxSetState+0x38>)
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

    do {
        phyWriteRegister(RG_TRX_STATE,
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     282:	251f      	movs	r5, #31

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     284:	0021      	movs	r1, r4
     286:	2002      	movs	r0, #2
     288:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     28a:	2001      	movs	r0, #1
     28c:	47b0      	blx	r6
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));

    do {
        phyWriteRegister(RG_TRX_STATE,
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     28e:	4028      	ands	r0, r5
     290:	4284      	cmp	r4, r0
     292:	d1f7      	bne.n	284 <phyTrxSetState+0x20>
}
     294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	000041ad 	.word	0x000041ad
     29c:	000040b1 	.word	0x000040b1

000002a0 <phySetRxState>:
}

/*************************************************************************/ /**
*****************************************************************************/
static void phySetRxState(void)
{
     2a0:	b510      	push	{r4, lr}
    phyTrxSetState(TRX_CMD_TRX_OFF);
     2a2:	2008      	movs	r0, #8
     2a4:	4b06      	ldr	r3, [pc, #24]	; (2c0 <phySetRxState+0x20>)
     2a6:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     2a8:	200f      	movs	r0, #15
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <phySetRxState+0x24>)
     2ac:	4798      	blx	r3
{
    phyTrxSetState(TRX_CMD_TRX_OFF);

    phyReadRegister(RG_IRQ_STATUS);

    if (phyRxState) {
     2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <phySetRxState+0x28>)
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d002      	beq.n	2bc <phySetRxState+0x1c>
        phyTrxSetState(TRX_CMD_RX_AACK_ON);
     2b6:	2016      	movs	r0, #22
     2b8:	4b01      	ldr	r3, [pc, #4]	; (2c0 <phySetRxState+0x20>)
     2ba:	4798      	blx	r3
    }
}
     2bc:	bd10      	pop	{r4, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	00000265 	.word	0x00000265
     2c4:	000040b1 	.word	0x000040b1
     2c8:	200000b1 	.word	0x200000b1

000002cc <PHY_DataReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Trigger to Transmit Packet
void PHY_DataReq(uint8_t* data)
{
     2cc:	b510      	push	{r4, lr}
     2ce:	0004      	movs	r4, r0
    phyTrxSetState(TRX_CMD_TX_ARET_ON);
     2d0:	2019      	movs	r0, #25
     2d2:	4b0c      	ldr	r3, [pc, #48]	; (304 <PHY_DataReq+0x38>)
     2d4:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     2d6:	200f      	movs	r0, #15
     2d8:	4b0b      	ldr	r3, [pc, #44]	; (308 <PHY_DataReq+0x3c>)
     2da:	4798      	blx	r3
    phyReadRegister(RG_IRQ_STATUS);

    /* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
    data[1] += 2; // 2
     2dc:	7861      	ldrb	r1, [r4, #1]
     2de:	1c8b      	adds	r3, r1, #2
     2e0:	7063      	strb	r3, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
     2e2:	3101      	adds	r1, #1
     2e4:	b2c9      	uxtb	r1, r1
     2e6:	1c60      	adds	r0, r4, #1
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <PHY_DataReq+0x40>)
     2ea:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
     2ec:	2203      	movs	r2, #3
     2ee:	4b08      	ldr	r3, [pc, #32]	; (310 <PHY_DataReq+0x44>)
     2f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2f2:	4b08      	ldr	r3, [pc, #32]	; (314 <PHY_DataReq+0x48>)
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0352      	lsls	r2, r2, #13
     2f8:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2fe:	615a      	str	r2, [r3, #20]

    TRX_SLP_TR_HIGH();
    TRX_TRIG_DELAY();
    TRX_SLP_TR_LOW();
}
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00000265 	.word	0x00000265
     308:	000040b1 	.word	0x000040b1
     30c:	000043dd 	.word	0x000043dd
     310:	200000b0 	.word	0x200000b0
     314:	40002800 	.word	0x40002800

00000318 <PHY_RandomReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Random Number Generator
uint16_t PHY_RandomReq(void)
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	4647      	mov	r7, r8
     31c:	b480      	push	{r7}
    uint16_t rnd = 0;
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);
     31e:	2006      	movs	r0, #6
     320:	4b0d      	ldr	r3, [pc, #52]	; (358 <PHY_RandomReq+0x40>)
     322:	4798      	blx	r3
     324:	2400      	movs	r4, #0
/*************************************************************************/ /**
*****************************************************************************/
// Random Number Generator
uint16_t PHY_RandomReq(void)
{
    uint16_t rnd = 0;
     326:	2500      	movs	r5, #0
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);

    for (uint8_t i = 0; i < 16; i += 2) {
        delay_cycles_us(1);
     328:	4f0c      	ldr	r7, [pc, #48]	; (35c <PHY_RandomReq+0x44>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     32a:	4e0d      	ldr	r6, [pc, #52]	; (360 <PHY_RandomReq+0x48>)
    phyTrxSetState(TRX_CMD_RX_ON);

    for (uint8_t i = 0; i < 16; i += 2) {
        delay_cycles_us(1);
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
        rnd |= rndValue << i;
     32c:	2303      	movs	r3, #3
     32e:	4698      	mov	r8, r3
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);

    for (uint8_t i = 0; i < 16; i += 2) {
        delay_cycles_us(1);
     330:	2001      	movs	r0, #1
     332:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     334:	2006      	movs	r0, #6
     336:	47b0      	blx	r6
    phyTrxSetState(TRX_CMD_RX_ON);

    for (uint8_t i = 0; i < 16; i += 2) {
        delay_cycles_us(1);
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
        rnd |= rndValue << i;
     338:	0940      	lsrs	r0, r0, #5
     33a:	4643      	mov	r3, r8
     33c:	4018      	ands	r0, r3
     33e:	40a0      	lsls	r0, r4
     340:	4328      	orrs	r0, r5
     342:	b285      	uxth	r5, r0
     344:	3402      	adds	r4, #2
    uint16_t rnd = 0;
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);

    for (uint8_t i = 0; i < 16; i += 2) {
     346:	2c10      	cmp	r4, #16
     348:	d1f2      	bne.n	330 <PHY_RandomReq+0x18>
        delay_cycles_us(1);
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
        rnd |= rndValue << i;
    }
    phySetRxState();
     34a:	4b06      	ldr	r3, [pc, #24]	; (364 <PHY_RandomReq+0x4c>)
     34c:	4798      	blx	r3

    return rnd;
}
     34e:	0028      	movs	r0, r5
     350:	bc04      	pop	{r2}
     352:	4690      	mov	r8, r2
     354:	bdf0      	pop	{r4, r5, r6, r7, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00000265 	.word	0x00000265
     35c:	00001cf1 	.word	0x00001cf1
     360:	000040b1 	.word	0x000040b1
     364:	000002a1 	.word	0x000002a1

00000368 <PHY_Init>:

/*************************************************************************/ /**
*****************************************************************************/
// Radio Initialization
void PHY_Init(void)
{
     368:	b570      	push	{r4, r5, r6, lr}
    trx_spi_init();
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <PHY_Init+0x40>)
     36c:	4798      	blx	r3
    PhyReset();
     36e:	4b0f      	ldr	r3, [pc, #60]	; (3ac <PHY_Init+0x44>)
     370:	4798      	blx	r3
    phyRxState = false;
     372:	2200      	movs	r2, #0
     374:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <PHY_Init+0x48>)
     376:	701a      	strb	r2, [r3, #0]

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     378:	21ff      	movs	r1, #255	; 0xff
     37a:	200e      	movs	r0, #14
     37c:	4b0d      	ldr	r3, [pc, #52]	; (3b4 <PHY_Init+0x4c>)
     37e:	4798      	blx	r3
     380:	4e0c      	ldr	r6, [pc, #48]	; (3b4 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     382:	4d0d      	ldr	r5, [pc, #52]	; (3b8 <PHY_Init+0x50>)
    phyRxState = false;

    phyWriteRegister(RG_IRQ_MASK, 0xFF);
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     384:	241f      	movs	r4, #31

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     386:	2108      	movs	r1, #8
     388:	2002      	movs	r0, #2
     38a:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     38c:	2001      	movs	r0, #1
     38e:	47a8      	blx	r5
    phyRxState = false;

    phyWriteRegister(RG_IRQ_MASK, 0xFF);
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     390:	4020      	ands	r0, r4
     392:	2808      	cmp	r0, #8
     394:	d1f7      	bne.n	386 <PHY_Init+0x1e>

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     396:	212e      	movs	r1, #46	; 0x2e
     398:	3804      	subs	r0, #4
     39a:	4c06      	ldr	r4, [pc, #24]	; (3b4 <PHY_Init+0x4c>)
     39c:	47a0      	blx	r4
     39e:	21a0      	movs	r1, #160	; 0xa0
     3a0:	200c      	movs	r0, #12
     3a2:	47a0      	blx	r4
    phyWriteRegister(RG_TRX_CTRL_1,
        (1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) | (1 << IRQ_MASK_MODE));

    phyWriteRegister(RG_TRX_CTRL_2,
        (1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
     3a4:	bd70      	pop	{r4, r5, r6, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00003f65 	.word	0x00003f65
     3ac:	00004081 	.word	0x00004081
     3b0:	200000b1 	.word	0x200000b1
     3b4:	000041ad 	.word	0x000041ad
     3b8:	000040b1 	.word	0x000040b1

000003bc <PHY_SetChannel>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Channel
void PHY_SetChannel(uint8_t channel)
{
     3bc:	b510      	push	{r4, lr}
     3be:	0004      	movs	r4, r0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
     3c0:	2008      	movs	r0, #8
     3c2:	4b06      	ldr	r3, [pc, #24]	; (3dc <PHY_SetChannel+0x20>)
     3c4:	4798      	blx	r3

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     3c6:	231f      	movs	r3, #31
     3c8:	0001      	movs	r1, r0
     3ca:	4399      	bics	r1, r3
     3cc:	0020      	movs	r0, r4
     3ce:	4308      	orrs	r0, r1
     3d0:	b2c1      	uxtb	r1, r0
     3d2:	2008      	movs	r0, #8
     3d4:	4b02      	ldr	r3, [pc, #8]	; (3e0 <PHY_SetChannel+0x24>)
     3d6:	4798      	blx	r3
{
    uint8_t reg;

    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
     3d8:	bd10      	pop	{r4, pc}
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	000040b1 	.word	0x000040b1
     3e0:	000041ad 	.word	0x000041ad

000003e4 <PHY_SetPanId>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Pan ID
void PHY_SetPanId(uint16_t panId)
{
     3e4:	b530      	push	{r4, r5, lr}
     3e6:	b083      	sub	sp, #12
     3e8:	466b      	mov	r3, sp
     3ea:	1d9d      	adds	r5, r3, #6
     3ec:	80d8      	strh	r0, [r3, #6]

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     3ee:	b2c1      	uxtb	r1, r0
     3f0:	2022      	movs	r0, #34	; 0x22
     3f2:	4c03      	ldr	r4, [pc, #12]	; (400 <PHY_SetPanId+0x1c>)
     3f4:	47a0      	blx	r4
     3f6:	7869      	ldrb	r1, [r5, #1]
     3f8:	2023      	movs	r0, #35	; 0x23
     3fa:	47a0      	blx	r4
void PHY_SetPanId(uint16_t panId)
{
    uint8_t* d = (uint8_t*)&panId;
    phyWriteRegister(RG_PAN_ID_0, d[0]);
    phyWriteRegister(RG_PAN_ID_1, d[1]);
}
     3fc:	b003      	add	sp, #12
     3fe:	bd30      	pop	{r4, r5, pc}
     400:	000041ad 	.word	0x000041ad

00000404 <PHY_SetShortAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Short Address
void PHY_SetShortAddr(uint16_t addr)
{
     404:	b570      	push	{r4, r5, r6, lr}
     406:	b082      	sub	sp, #8
     408:	466b      	mov	r3, sp
     40a:	1d9c      	adds	r4, r3, #6
     40c:	80d8      	strh	r0, [r3, #6]
    uint8_t* d = (uint8_t*)&addr;

    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
     40e:	b2c5      	uxtb	r5, r0

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     410:	0029      	movs	r1, r5
     412:	2020      	movs	r0, #32
     414:	4e05      	ldr	r6, [pc, #20]	; (42c <PHY_SetShortAddr+0x28>)
     416:	47b0      	blx	r6
void PHY_SetShortAddr(uint16_t addr)
{
    uint8_t* d = (uint8_t*)&addr;

    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
    phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
     418:	7864      	ldrb	r4, [r4, #1]

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    trx_reg_write(reg, value);
     41a:	0021      	movs	r1, r4
     41c:	2021      	movs	r0, #33	; 0x21
     41e:	47b0      	blx	r6
     420:	192c      	adds	r4, r5, r4
     422:	b2e1      	uxtb	r1, r4
     424:	202d      	movs	r0, #45	; 0x2d
     426:	47b0      	blx	r6
    uint8_t* d = (uint8_t*)&addr;

    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
    phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
    phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
}
     428:	b002      	add	sp, #8
     42a:	bd70      	pop	{r4, r5, r6, pc}
     42c:	000041ad 	.word	0x000041ad

00000430 <PHY_EncryptReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Encrypt Block
void PHY_EncryptReq(uint8_t* text, uint8_t* key)
{
     430:	b510      	push	{r4, lr}
     432:	0004      	movs	r4, r0
     434:	0008      	movs	r0, r1
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
     436:	2200      	movs	r2, #0
     438:	2100      	movs	r1, #0
     43a:	4b05      	ldr	r3, [pc, #20]	; (450 <PHY_EncryptReq+0x20>)
     43c:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
    sal_aes_wrrd(text, NULL);
     43e:	2100      	movs	r1, #0
     440:	0020      	movs	r0, r4
     442:	4b04      	ldr	r3, [pc, #16]	; (454 <PHY_EncryptReq+0x24>)
     444:	4798      	blx	r3
#else
    sal_aes_exec(text);
#endif
    sal_aes_read(text);
     446:	0020      	movs	r0, r4
     448:	4b03      	ldr	r3, [pc, #12]	; (458 <PHY_EncryptReq+0x28>)
     44a:	4798      	blx	r3
}
     44c:	bd10      	pop	{r4, pc}
     44e:	46c0      	nop			; (mov r8, r8)
     450:	00001ab1 	.word	0x00001ab1
     454:	00001a45 	.word	0x00001a45
     458:	00001be9 	.word	0x00001be9

0000045c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress(uint8_t* Address, uint8_t* PANID)
{
     45c:	b510      	push	{r4, lr}
    myNetworkAddress.v[0] = Address[0];
     45e:	7802      	ldrb	r2, [r0, #0]
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <MiMAC_SetAltAddress+0x28>)
     462:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
     464:	7842      	ldrb	r2, [r0, #1]
     466:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
     468:	780a      	ldrb	r2, [r1, #0]
     46a:	4b07      	ldr	r3, [pc, #28]	; (488 <MiMAC_SetAltAddress+0x2c>)
     46c:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
     46e:	784a      	ldrb	r2, [r1, #1]
     470:	705a      	strb	r2, [r3, #1]
    PHY_SetShortAddr(APP_ADDR);
     472:	2001      	movs	r0, #1
     474:	4b05      	ldr	r3, [pc, #20]	; (48c <MiMAC_SetAltAddress+0x30>)
     476:	4798      	blx	r3
    PHY_SetPanId(MY_PAN_ID);
     478:	4805      	ldr	r0, [pc, #20]	; (490 <MiMAC_SetAltAddress+0x34>)
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <MiMAC_SetAltAddress+0x38>)
     47c:	4798      	blx	r3
    return true;
}
     47e:	2001      	movs	r0, #1
     480:	bd10      	pop	{r4, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	20000298 	.word	0x20000298
     488:	20000390 	.word	0x20000390
     48c:	00000405 	.word	0x00000405
     490:	00001234 	.word	0x00001234
     494:	000003e5 	.word	0x000003e5

00000498 <mic_generator>:

#if defined(ENABLE_SECURITY)
void mic_generator(uint8_t* Payloadinfo, uint8_t len, uint8_t frame_control, API_UINT32_UNION FrameCounter, uint8_t* SourceIEEEAddress)
{
     498:	b5f0      	push	{r4, r5, r6, r7, lr}
     49a:	4647      	mov	r7, r8
     49c:	b480      	push	{r7}
     49e:	b0a6      	sub	sp, #152	; 0x98
     4a0:	0006      	movs	r6, r0
     4a2:	000c      	movs	r4, r1
     4a4:	469c      	mov	ip, r3
     4a6:	992c      	ldr	r1, [sp, #176]	; 0xb0
    uint8_t i, j, iterations, copy_packet[FRAME_BUFFER], cbc_header_with_padding[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = len / AES_BLOCKSIZE;
     4a8:	0925      	lsrs	r5, r4, #4
    if (len % AES_BLOCKSIZE != 0)
     4aa:	0723      	lsls	r3, r4, #28
     4ac:	d000      	beq.n	4b0 <mic_generator+0x18>
        iterations++;
     4ae:	3501      	adds	r5, #1
    InitVect_in[0] = frame_control; //0x49
     4b0:	4b42      	ldr	r3, [pc, #264]	; (5bc <mic_generator+0x124>)
     4b2:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
     4b4:	2300      	movs	r3, #0
     4b6:	a802      	add	r0, sp, #8
     4b8:	7003      	strb	r3, [r0, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
     4ba:	330d      	adds	r3, #13
     4bc:	7043      	strb	r3, [r0, #1]
    cbc_header_with_padding[2] = frame_control; //frame_control;
     4be:	7082      	strb	r2, [r0, #2]
     4c0:	2200      	movs	r2, #0
    for (i = 0; i < 8; i++) {
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     4c2:	4b3e      	ldr	r3, [pc, #248]	; (5bc <mic_generator+0x124>)
     4c4:	5c8f      	ldrb	r7, [r1, r2]
     4c6:	18d0      	adds	r0, r2, r3
     4c8:	7047      	strb	r7, [r0, #1]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     4ca:	0010      	movs	r0, r2
     4cc:	af02      	add	r7, sp, #8
     4ce:	46b8      	mov	r8, r7
     4d0:	4440      	add	r0, r8
     4d2:	5c8f      	ldrb	r7, [r1, r2]
     4d4:	71c7      	strb	r7, [r0, #7]
     4d6:	3201      	adds	r2, #1
        iterations++;
    InitVect_in[0] = frame_control; //0x49
    cbc_header_with_padding[0] = 0x00; // l(a)
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
    cbc_header_with_padding[2] = frame_control; //frame_control;
    for (i = 0; i < 8; i++) {
     4d8:	2a08      	cmp	r2, #8
     4da:	d1f3      	bne.n	4c4 <mic_generator+0x2c>
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
        InitVect_in[i + 9] = FrameCounter.v[i];
     4dc:	4663      	mov	r3, ip
     4de:	466a      	mov	r2, sp
     4e0:	71d3      	strb	r3, [r2, #7]
     4e2:	79d3      	ldrb	r3, [r2, #7]
     4e4:	4835      	ldr	r0, [pc, #212]	; (5bc <mic_generator+0x124>)
     4e6:	7243      	strb	r3, [r0, #9]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
     4e8:	4642      	mov	r2, r8
     4ea:	70d3      	strb	r3, [r2, #3]
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
        InitVect_in[i + 9] = FrameCounter.v[i];
     4ec:	4663      	mov	r3, ip
     4ee:	041b      	lsls	r3, r3, #16
     4f0:	0e1b      	lsrs	r3, r3, #24
     4f2:	7283      	strb	r3, [r0, #10]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
     4f4:	7113      	strb	r3, [r2, #4]
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
        InitVect_in[i + 9] = FrameCounter.v[i];
     4f6:	4663      	mov	r3, ip
     4f8:	021b      	lsls	r3, r3, #8
     4fa:	0e1b      	lsrs	r3, r3, #24
     4fc:	72c3      	strb	r3, [r0, #11]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
     4fe:	7153      	strb	r3, [r2, #5]
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
        InitVect_in[i + 9] = FrameCounter.v[i];
     500:	4663      	mov	r3, ip
     502:	0e1b      	lsrs	r3, r3, #24
     504:	7303      	strb	r3, [r0, #12]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
     506:	7193      	strb	r3, [r2, #6]
    }
    //cbc_header_with_padding[14] = 0x00;  // Padding
    cbc_header_with_padding[15] = 0x00; // Padding
     508:	2300      	movs	r3, #0
     50a:	73d3      	strb	r3, [r2, #15]
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     50c:	2204      	movs	r2, #4
     50e:	7342      	strb	r2, [r0, #13]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
     510:	7383      	strb	r3, [r0, #14]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     512:	73c4      	strb	r4, [r0, #15]
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
     514:	492a      	ldr	r1, [pc, #168]	; (5c0 <mic_generator+0x128>)
     516:	4b2b      	ldr	r3, [pc, #172]	; (5c4 <mic_generator+0x12c>)
     518:	4798      	blx	r3
     51a:	2300      	movs	r3, #0
    for (i = 0; i < AES_BLOCKSIZE; i++) {
        copy_packet[i] = cbc_header_with_padding[i];
     51c:	aa02      	add	r2, sp, #8
     51e:	5c99      	ldrb	r1, [r3, r2]
     520:	aa06      	add	r2, sp, #24
     522:	5499      	strb	r1, [r3, r2]
     524:	3301      	adds	r3, #1
    cbc_header_with_padding[15] = 0x00; // Padding
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    for (i = 0; i < AES_BLOCKSIZE; i++) {
     526:	2b10      	cmp	r3, #16
     528:	d1f8      	bne.n	51c <mic_generator+0x84>
        copy_packet[i] = cbc_header_with_padding[i];
    }
    // Copy the Payload and Do the padding
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     52a:	0027      	movs	r7, r4
     52c:	3710      	adds	r7, #16
     52e:	2f10      	cmp	r7, #16
     530:	dd0a      	ble.n	548 <mic_generator+0xb0>
     532:	2110      	movs	r1, #16
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
     534:	18f2      	adds	r2, r6, r3
     536:	3a10      	subs	r2, #16
     538:	7810      	ldrb	r0, [r2, #0]
     53a:	aa06      	add	r2, sp, #24
     53c:	5450      	strb	r0, [r2, r1]
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    for (i = 0; i < AES_BLOCKSIZE; i++) {
        copy_packet[i] = cbc_header_with_padding[i];
    }
    // Copy the Payload and Do the padding
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
     53e:	3301      	adds	r3, #1
     540:	b2db      	uxtb	r3, r3
     542:	1e19      	subs	r1, r3, #0
     544:	42b9      	cmp	r1, r7
     546:	dbf5      	blt.n	534 <mic_generator+0x9c>
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
     548:	0023      	movs	r3, r4
     54a:	3310      	adds	r3, #16
     54c:	b2db      	uxtb	r3, r3
     54e:	001a      	movs	r2, r3
     550:	3501      	adds	r5, #1
     552:	0128      	lsls	r0, r5, #4
     554:	4283      	cmp	r3, r0
     556:	da07      	bge.n	568 <mic_generator+0xd0>
        copy_packet[i] = 0; // Padding
     558:	2400      	movs	r4, #0
     55a:	a906      	add	r1, sp, #24
     55c:	548c      	strb	r4, [r1, r2]
    }
    // Copy the Payload and Do the padding
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
     55e:	3301      	adds	r3, #1
     560:	b2db      	uxtb	r3, r3
     562:	1e1a      	subs	r2, r3, #0
     564:	4282      	cmp	r2, r0
     566:	dbf8      	blt.n	55a <mic_generator+0xc2>
        copy_packet[i] = 0; // Padding
    }
    for (i = 0; i < iterations + 1; i++) {
     568:	2300      	movs	r3, #0
     56a:	2700      	movs	r7, #0
     56c:	2d00      	cmp	r5, #0
     56e:	dc14      	bgt.n	59a <mic_generator+0x102>
     570:	e017      	b.n	5a2 <mic_generator+0x10a>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     572:	1999      	adds	r1, r3, r6
     574:	aa06      	add	r2, sp, #24
     576:	1912      	adds	r2, r2, r4
     578:	5cd0      	ldrb	r0, [r2, r3]
     57a:	780a      	ldrb	r2, [r1, #0]
     57c:	4042      	eors	r2, r0
     57e:	700a      	strb	r2, [r1, #0]
     580:	3301      	adds	r3, #1
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
        copy_packet[i] = 0; // Padding
    }
    for (i = 0; i < iterations + 1; i++) {
        for (j = 0; j < AES_BLOCKSIZE; j++) {
     582:	2b10      	cmp	r3, #16
     584:	d1f5      	bne.n	572 <mic_generator+0xda>
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
        }
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
     586:	490e      	ldr	r1, [pc, #56]	; (5c0 <mic_generator+0x128>)
     588:	480c      	ldr	r0, [pc, #48]	; (5bc <mic_generator+0x124>)
     58a:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <mic_generator+0x12c>)
     58c:	4798      	blx	r3
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
        copy_packet[i] = 0; // Padding
    }
    for (i = 0; i < iterations + 1; i++) {
     58e:	3701      	adds	r7, #1
     590:	b2ff      	uxtb	r7, r7
     592:	1e3b      	subs	r3, r7, #0
     594:	42ab      	cmp	r3, r5
     596:	db01      	blt.n	59c <mic_generator+0x104>
     598:	e003      	b.n	5a2 <mic_generator+0x10a>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
     59a:	4e08      	ldr	r6, [pc, #32]	; (5bc <mic_generator+0x124>)
     59c:	011c      	lsls	r4, r3, #4
     59e:	2300      	movs	r3, #0
     5a0:	e7e7      	b.n	572 <mic_generator+0xda>
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
        copy_packet[i] = 0; // Padding
    }
    for (i = 0; i < iterations + 1; i++) {
     5a2:	2300      	movs	r3, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
        }
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    }
    for (i = 0; i < AES_BLOCKSIZE; i++) {
        CBC_mic[i] = InitVect_in[i];
     5a4:	4808      	ldr	r0, [pc, #32]	; (5c8 <mic_generator+0x130>)
     5a6:	4905      	ldr	r1, [pc, #20]	; (5bc <mic_generator+0x124>)
     5a8:	5cca      	ldrb	r2, [r1, r3]
     5aa:	54c2      	strb	r2, [r0, r3]
     5ac:	3301      	adds	r3, #1
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
        }
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    }
    for (i = 0; i < AES_BLOCKSIZE; i++) {
     5ae:	2b10      	cmp	r3, #16
     5b0:	d1fa      	bne.n	5a8 <mic_generator+0x110>
        CBC_mic[i] = InitVect_in[i];
    }
}
     5b2:	b026      	add	sp, #152	; 0x98
     5b4:	bc04      	pop	{r2}
     5b6:	4690      	mov	r8, r2
     5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	200002a8 	.word	0x200002a8
     5c0:	20000010 	.word	0x20000010
     5c4:	00000431 	.word	0x00000431
     5c8:	2000037c 	.word	0x2000037c

000005cc <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t* Payloadinfo, uint8_t* Payload_len, API_UINT32_UNION FrameCounter,
    uint8_t FrameControl)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	465f      	mov	r7, fp
     5d0:	4656      	mov	r6, sl
     5d2:	464d      	mov	r5, r9
     5d4:	4644      	mov	r4, r8
     5d6:	b4f0      	push	{r4, r5, r6, r7}
     5d8:	b08b      	sub	sp, #44	; 0x2c
     5da:	0004      	movs	r4, r0
     5dc:	4689      	mov	r9, r1
     5de:	0015      	movs	r5, r2
     5e0:	001a      	movs	r2, r3
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *Payload_len / AES_BLOCKSIZE;
     5e2:	7809      	ldrb	r1, [r1, #0]
     5e4:	090e      	lsrs	r6, r1, #4
    if (*Payload_len % AES_BLOCKSIZE != 0)
     5e6:	070b      	lsls	r3, r1, #28
     5e8:	d000      	beq.n	5ec <DataEncrypt+0x20>
        iterations++;
     5ea:	3601      	adds	r6, #1

    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
     5ec:	4b38      	ldr	r3, [pc, #224]	; (6d0 <DataEncrypt+0x104>)
     5ee:	685b      	ldr	r3, [r3, #4]
     5f0:	9300      	str	r3, [sp, #0]
     5f2:	002b      	movs	r3, r5
     5f4:	0020      	movs	r0, r4
     5f6:	4f37      	ldr	r7, [pc, #220]	; (6d4 <DataEncrypt+0x108>)
     5f8:	47b8      	blx	r7

    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
     5fa:	464b      	mov	r3, r9
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	0037      	movs	r7, r6
     600:	0132      	lsls	r2, r6, #4
     602:	4293      	cmp	r3, r2
     604:	da05      	bge.n	612 <DataEncrypt+0x46>
        Payloadinfo[i] = 0; // Padding
     606:	2100      	movs	r1, #0
     608:	54e1      	strb	r1, [r4, r3]
    if (*Payload_len % AES_BLOCKSIZE != 0)
        iterations++;

    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);

    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
     60a:	3301      	adds	r3, #1
     60c:	b2db      	uxtb	r3, r3
     60e:	4293      	cmp	r3, r2
     610:	dbfa      	blt.n	608 <DataEncrypt+0x3c>
        Payloadinfo[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
     612:	2201      	movs	r2, #1
     614:	ab02      	add	r3, sp, #8
     616:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
     618:	4b2d      	ldr	r3, [pc, #180]	; (6d0 <DataEncrypt+0x104>)
     61a:	6858      	ldr	r0, [r3, #4]
     61c:	2300      	movs	r3, #0
     61e:	aa02      	add	r2, sp, #8
     620:	18d2      	adds	r2, r2, r3
     622:	5cc1      	ldrb	r1, [r0, r3]
     624:	7051      	strb	r1, [r2, #1]
     626:	3301      	adds	r3, #1

    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
        Payloadinfo[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
     628:	2b08      	cmp	r3, #8
     62a:	d1f8      	bne.n	61e <DataEncrypt+0x52>
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if address is less than 8 bytes
        }
    }
    // FrameCounter
    for (i = 0; i < 4; i++) {
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
     62c:	ab02      	add	r3, sp, #8
     62e:	725d      	strb	r5, [r3, #9]
     630:	0a2a      	lsrs	r2, r5, #8
     632:	729a      	strb	r2, [r3, #10]
     634:	0c2a      	lsrs	r2, r5, #16
     636:	72da      	strb	r2, [r3, #11]
     638:	0e2d      	lsrs	r5, r5, #24
     63a:	731d      	strb	r5, [r3, #12]
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     63c:	2204      	movs	r2, #4
     63e:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     640:	2200      	movs	r2, #0
     642:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     644:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
     646:	1c7b      	adds	r3, r7, #1
     648:	4698      	mov	r8, r3
     64a:	2300      	movs	r3, #0
     64c:	469a      	mov	sl, r3
     64e:	469b      	mov	fp, r3
     650:	4643      	mov	r3, r8
     652:	2b00      	cmp	r3, #0
     654:	dc2f      	bgt.n	6b6 <DataEncrypt+0xea>
     656:	e033      	b.n	6c0 <DataEncrypt+0xf4>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
     658:	aa02      	add	r2, sp, #8
     65a:	5c99      	ldrb	r1, [r3, r2]
     65c:	aa06      	add	r2, sp, #24
     65e:	5499      	strb	r1, [r3, r2]
     660:	3301      	adds	r3, #1
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

    for (i = 0; i < iterations + 1; i++) {
        for (j = 0; j < AES_BLOCKSIZE; j++) {
     662:	2b10      	cmp	r3, #16
     664:	d1f8      	bne.n	658 <DataEncrypt+0x8c>
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
     666:	491c      	ldr	r1, [pc, #112]	; (6d8 <DataEncrypt+0x10c>)
     668:	0010      	movs	r0, r2
     66a:	47c8      	blx	r9
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
     66c:	ab02      	add	r3, sp, #8
     66e:	7bd8      	ldrb	r0, [r3, #15]
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
            }
            else {
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
     670:	4653      	mov	r3, sl
     672:	3b01      	subs	r3, #1
     674:	011f      	lsls	r7, r3, #4
     676:	2300      	movs	r3, #0
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     678:	4a18      	ldr	r2, [pc, #96]	; (6dc <DataEncrypt+0x110>)
     67a:	4694      	mov	ip, r2
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
     67c:	2800      	cmp	r0, #0
     67e:	d106      	bne.n	68e <DataEncrypt+0xc2>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     680:	aa06      	add	r2, sp, #24
     682:	5c99      	ldrb	r1, [r3, r2]
     684:	4662      	mov	r2, ip
     686:	5cd2      	ldrb	r2, [r2, r3]
     688:	404a      	eors	r2, r1
     68a:	54f2      	strb	r2, [r6, r3]
     68c:	e005      	b.n	69a <DataEncrypt+0xce>
     68e:	19e1      	adds	r1, r4, r7
            }
            else {
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
     690:	aa06      	add	r2, sp, #24
     692:	5c9a      	ldrb	r2, [r3, r2]
     694:	5ccd      	ldrb	r5, [r1, r3]
     696:	406a      	eors	r2, r5
     698:	54ca      	strb	r2, [r1, r3]
     69a:	3301      	adds	r3, #1
    for (i = 0; i < iterations + 1; i++) {
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
        for (j = 0; j < AES_BLOCKSIZE; j++) {
     69c:	2b10      	cmp	r3, #16
     69e:	d1ed      	bne.n	67c <DataEncrypt+0xb0>
            }
            else {
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     6a0:	3001      	adds	r0, #1
     6a2:	ab02      	add	r3, sp, #8
     6a4:	73d8      	strb	r0, [r3, #15]
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

    for (i = 0; i < iterations + 1; i++) {
     6a6:	465f      	mov	r7, fp
     6a8:	3701      	adds	r7, #1
     6aa:	b2fb      	uxtb	r3, r7
     6ac:	469b      	mov	fp, r3
     6ae:	469a      	mov	sl, r3
     6b0:	4543      	cmp	r3, r8
     6b2:	db03      	blt.n	6bc <DataEncrypt+0xf0>
     6b4:	e004      	b.n	6c0 <DataEncrypt+0xf4>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
     6b6:	4b0a      	ldr	r3, [pc, #40]	; (6e0 <DataEncrypt+0x114>)
     6b8:	4699      	mov	r9, r3
        for (j = 0; j < AES_BLOCKSIZE; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     6ba:	4e0a      	ldr	r6, [pc, #40]	; (6e4 <DataEncrypt+0x118>)
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
        Payloadinfo[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
     6bc:	2300      	movs	r3, #0
     6be:	e7cb      	b.n	658 <DataEncrypt+0x8c>
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    }
    return true;
}
     6c0:	2001      	movs	r0, #1
     6c2:	b00b      	add	sp, #44	; 0x2c
     6c4:	bc3c      	pop	{r2, r3, r4, r5}
     6c6:	4690      	mov	r8, r2
     6c8:	4699      	mov	r9, r3
     6ca:	46a2      	mov	sl, r4
     6cc:	46ab      	mov	fp, r5
     6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d0:	200002a0 	.word	0x200002a0
     6d4:	00000499 	.word	0x00000499
     6d8:	20000010 	.word	0x20000010
     6dc:	2000037c 	.word	0x2000037c
     6e0:	00000431 	.word	0x00000431
     6e4:	200002cc 	.word	0x200002cc

000006e8 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <validate_mic+0x38>)
     6ea:	781a      	ldrb	r2, [r3, #0]
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <validate_mic+0x3c>)
     6ee:	781b      	ldrb	r3, [r3, #0]
        return false;
     6f0:	2000      	movs	r0, #0
    return true;
}
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
     6f2:	429a      	cmp	r2, r3
     6f4:	d113      	bne.n	71e <validate_mic+0x36>
     6f6:	4b0a      	ldr	r3, [pc, #40]	; (720 <validate_mic+0x38>)
     6f8:	785a      	ldrb	r2, [r3, #1]
     6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <validate_mic+0x3c>)
     6fc:	785b      	ldrb	r3, [r3, #1]
     6fe:	429a      	cmp	r2, r3
     700:	d10d      	bne.n	71e <validate_mic+0x36>
     702:	4b07      	ldr	r3, [pc, #28]	; (720 <validate_mic+0x38>)
     704:	789a      	ldrb	r2, [r3, #2]
     706:	4b07      	ldr	r3, [pc, #28]	; (724 <validate_mic+0x3c>)
     708:	789b      	ldrb	r3, [r3, #2]
     70a:	429a      	cmp	r2, r3
     70c:	d107      	bne.n	71e <validate_mic+0x36>
     70e:	4b04      	ldr	r3, [pc, #16]	; (720 <validate_mic+0x38>)
     710:	78db      	ldrb	r3, [r3, #3]
     712:	4a04      	ldr	r2, [pc, #16]	; (724 <validate_mic+0x3c>)
     714:	78d0      	ldrb	r0, [r2, #3]
     716:	1a18      	subs	r0, r3, r0
     718:	4243      	negs	r3, r0
     71a:	4158      	adcs	r0, r3
     71c:	b2c0      	uxtb	r0, r0
        return false;
    }
    else {
        return true;
    }
}
     71e:	4770      	bx	lr
     720:	200002cc 	.word	0x200002cc
     724:	2000038c 	.word	0x2000038c

00000728 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t* Payload, uint8_t* PayloadLen, uint8_t* SourceIEEEAddress,
    API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	465f      	mov	r7, fp
     72c:	4656      	mov	r6, sl
     72e:	464d      	mov	r5, r9
     730:	4644      	mov	r4, r8
     732:	b4f0      	push	{r4, r5, r6, r7}
     734:	b08f      	sub	sp, #60	; 0x3c
     736:	0004      	movs	r4, r0
     738:	9104      	str	r1, [sp, #16]
     73a:	4691      	mov	r9, r2
     73c:	469a      	mov	sl, r3
     73e:	ab18      	add	r3, sp, #96	; 0x60
     740:	781b      	ldrb	r3, [r3, #0]
     742:	9305      	str	r3, [sp, #20]
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *PayloadLen / 16;
     744:	780b      	ldrb	r3, [r1, #0]
     746:	091a      	lsrs	r2, r3, #4
    if (*PayloadLen % AES_BLOCKSIZE != 0)
     748:	0719      	lsls	r1, r3, #28
     74a:	d000      	beq.n	74e <DataDecrypt+0x26>
        iterations++;
     74c:	3201      	adds	r2, #1

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
     74e:	0017      	movs	r7, r2
     750:	0112      	lsls	r2, r2, #4
     752:	4293      	cmp	r3, r2
     754:	da05      	bge.n	762 <DataDecrypt+0x3a>
        Payload[i] = 0; // Padding
     756:	2100      	movs	r1, #0
     758:	54e1      	strb	r1, [r4, r3]
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *PayloadLen / 16;
    if (*PayloadLen % AES_BLOCKSIZE != 0)
        iterations++;

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
     75a:	3301      	adds	r3, #1
     75c:	b2db      	uxtb	r3, r3
     75e:	4293      	cmp	r3, r2
     760:	dbfa      	blt.n	758 <DataDecrypt+0x30>
        Payload[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
     762:	2201      	movs	r2, #1
     764:	ab06      	add	r3, sp, #24
     766:	701a      	strb	r2, [r3, #0]
     768:	2300      	movs	r3, #0
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
        CTR_Nonce_and_Counter[i + 1] = SourceIEEEAddress[i];
     76a:	4648      	mov	r0, r9
     76c:	aa06      	add	r2, sp, #24
     76e:	18d2      	adds	r2, r2, r3
     770:	5cc1      	ldrb	r1, [r0, r3]
     772:	7051      	strb	r1, [r2, #1]
     774:	3301      	adds	r3, #1

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
        Payload[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
     776:	2b08      	cmp	r3, #8
     778:	d1f8      	bne.n	76c <DataDecrypt+0x44>
     77a:	4681      	mov	r9, r0
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if source address is less than 8 bytes
        }
    }
    for (i = 0; i < 4; i++) {
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
     77c:	ab06      	add	r3, sp, #24
     77e:	4652      	mov	r2, sl
     780:	725a      	strb	r2, [r3, #9]
     782:	4652      	mov	r2, sl
     784:	0a12      	lsrs	r2, r2, #8
     786:	729a      	strb	r2, [r3, #10]
     788:	4652      	mov	r2, sl
     78a:	0c12      	lsrs	r2, r2, #16
     78c:	72da      	strb	r2, [r3, #11]
     78e:	4652      	mov	r2, sl
     790:	0e12      	lsrs	r2, r2, #24
     792:	731a      	strb	r2, [r3, #12]
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
     794:	2204      	movs	r2, #4
     796:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
     798:	2200      	movs	r2, #0
     79a:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
     79c:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
     79e:	1c7b      	adds	r3, r7, #1
     7a0:	1e19      	subs	r1, r3, #0
     7a2:	9203      	str	r2, [sp, #12]
     7a4:	dc29      	bgt.n	7fa <DataDecrypt+0xd2>
     7a6:	e02f      	b.n	808 <DataDecrypt+0xe0>
        for (j = 0; j < 16; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
     7a8:	aa06      	add	r2, sp, #24
     7aa:	5c99      	ldrb	r1, [r3, r2]
     7ac:	aa0a      	add	r2, sp, #40	; 0x28
     7ae:	5499      	strb	r1, [r3, r2]
     7b0:	3301      	adds	r3, #1
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

    for (i = 0; i < iterations + 1; i++) {
        for (j = 0; j < 16; j++) {
     7b2:	2b10      	cmp	r3, #16
     7b4:	d1f8      	bne.n	7a8 <DataDecrypt+0x80>
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
     7b6:	4924      	ldr	r1, [pc, #144]	; (848 <DataDecrypt+0x120>)
     7b8:	0010      	movs	r0, r2
     7ba:	47c0      	blx	r8
        for (j = 0; j < 16; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
     7bc:	ab06      	add	r3, sp, #24
     7be:	7bd8      	ldrb	r0, [r3, #15]
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
            }
            else {
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
     7c0:	1e7b      	subs	r3, r7, #1
     7c2:	011f      	lsls	r7, r3, #4
     7c4:	2300      	movs	r3, #0
        for (j = 0; j < 16; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
        for (j = 0; j < 16; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
     7c6:	2800      	cmp	r0, #0
     7c8:	d103      	bne.n	7d2 <DataDecrypt+0xaa>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     7ca:	aa0a      	add	r2, sp, #40	; 0x28
     7cc:	5c9a      	ldrb	r2, [r3, r2]
     7ce:	54ea      	strb	r2, [r5, r3]
     7d0:	e005      	b.n	7de <DataDecrypt+0xb6>
     7d2:	19e2      	adds	r2, r4, r7
            }
            else {
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
     7d4:	a90a      	add	r1, sp, #40	; 0x28
     7d6:	5c5e      	ldrb	r6, [r3, r1]
     7d8:	5cd1      	ldrb	r1, [r2, r3]
     7da:	4071      	eors	r1, r6
     7dc:	54d1      	strb	r1, [r2, r3]
     7de:	3301      	adds	r3, #1
    for (i = 0; i < iterations + 1; i++) {
        for (j = 0; j < 16; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
        for (j = 0; j < 16; j++) {
     7e0:	2b10      	cmp	r3, #16
     7e2:	d1f0      	bne.n	7c6 <DataDecrypt+0x9e>
            }
            else {
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
     7e4:	3001      	adds	r0, #1
     7e6:	ab06      	add	r3, sp, #24
     7e8:	73d8      	strb	r0, [r3, #15]
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1

    for (i = 0; i < iterations + 1; i++) {
     7ea:	9e03      	ldr	r6, [sp, #12]
     7ec:	3601      	adds	r6, #1
     7ee:	b2f3      	uxtb	r3, r6
     7f0:	9303      	str	r3, [sp, #12]
     7f2:	1e1f      	subs	r7, r3, #0
     7f4:	455f      	cmp	r7, fp
     7f6:	db05      	blt.n	804 <DataDecrypt+0xdc>
     7f8:	e006      	b.n	808 <DataDecrypt+0xe0>
        for (j = 0; j < 16; j++) {
            block[j] = CTR_Nonce_and_Counter[j];
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
     7fa:	4b14      	ldr	r3, [pc, #80]	; (84c <DataDecrypt+0x124>)
     7fc:	4698      	mov	r8, r3
        for (j = 0; j < 16; j++) {
            if (CTR_Nonce_and_Counter[15] == 0) {
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
     7fe:	4d14      	ldr	r5, [pc, #80]	; (850 <DataDecrypt+0x128>)
     800:	0017      	movs	r7, r2
     802:	468b      	mov	fp, r1
        iterations++;

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
        Payload[i] = 0; // Padding
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
     804:	2300      	movs	r3, #0
     806:	e7cf      	b.n	7a8 <DataDecrypt+0x80>
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    }
    *PayloadLen = *PayloadLen - 4;
     808:	9b04      	ldr	r3, [sp, #16]
     80a:	7819      	ldrb	r1, [r3, #0]
     80c:	3904      	subs	r1, #4
     80e:	b2c9      	uxtb	r1, r1
     810:	7019      	strb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
     812:	464b      	mov	r3, r9
     814:	9300      	str	r3, [sp, #0]
     816:	4653      	mov	r3, sl
     818:	9a05      	ldr	r2, [sp, #20]
     81a:	0020      	movs	r0, r4
     81c:	4c0d      	ldr	r4, [pc, #52]	; (854 <DataDecrypt+0x12c>)
     81e:	47a0      	blx	r4
     820:	2300      	movs	r3, #0
    for (i = 0; i < 16; i++) {
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
     822:	4d0d      	ldr	r5, [pc, #52]	; (858 <DataDecrypt+0x130>)
     824:	4c0a      	ldr	r4, [pc, #40]	; (850 <DataDecrypt+0x128>)
     826:	480d      	ldr	r0, [pc, #52]	; (85c <DataDecrypt+0x134>)
     828:	5ce1      	ldrb	r1, [r4, r3]
     82a:	5cc2      	ldrb	r2, [r0, r3]
     82c:	404a      	eors	r2, r1
     82e:	54ea      	strb	r2, [r5, r3]
     830:	3301      	adds	r3, #1
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    }
    *PayloadLen = *PayloadLen - 4;
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    for (i = 0; i < 16; i++) {
     832:	2b10      	cmp	r3, #16
     834:	d1f8      	bne.n	828 <DataDecrypt+0x100>
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    }
    return validate_mic();
     836:	4b0a      	ldr	r3, [pc, #40]	; (860 <DataDecrypt+0x138>)
     838:	4798      	blx	r3
}
     83a:	b00f      	add	sp, #60	; 0x3c
     83c:	bc3c      	pop	{r2, r3, r4, r5}
     83e:	4690      	mov	r8, r2
     840:	4699      	mov	r9, r3
     842:	46a2      	mov	sl, r4
     844:	46ab      	mov	fp, r5
     846:	bdf0      	pop	{r4, r5, r6, r7, pc}
     848:	20000010 	.word	0x20000010
     84c:	00000431 	.word	0x00000431
     850:	200002b8 	.word	0x200002b8
     854:	00000499 	.word	0x00000499
     858:	200002cc 	.word	0x200002cc
     85c:	2000037c 	.word	0x2000037c
     860:	000006e9 	.word	0x000006e9

00000864 <MiMAC_SetChannel>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
     864:	b510      	push	{r4, lr}
    if (channel < 11 || channel > 26) {
     866:	0002      	movs	r2, r0
     868:	3a0b      	subs	r2, #11
        return false;
     86a:	2300      	movs	r3, #0
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
    if (channel < 11 || channel > 26) {
     86c:	2a0f      	cmp	r2, #15
     86e:	d804      	bhi.n	87a <MiMAC_SetChannel+0x16>
        return false;
    }
    MACCurrentChannel = channel;
     870:	4b03      	ldr	r3, [pc, #12]	; (880 <MiMAC_SetChannel+0x1c>)
     872:	7018      	strb	r0, [r3, #0]
    PHY_SetChannel(channel);
     874:	4b03      	ldr	r3, [pc, #12]	; (884 <MiMAC_SetChannel+0x20>)
     876:	4798      	blx	r3
    return true;
     878:	2301      	movs	r3, #1
}
     87a:	0018      	movs	r0, r3
     87c:	bd10      	pop	{r4, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	20000392 	.word	0x20000392
     884:	000003bd 	.word	0x000003bd

00000888 <MiMAC_SendPacket>:
 *
 *****************************************************************************************/
bool MiMAC_SendPacket(MAC_TRANS_PARAM transParam,
    uint8_t* MACPayload,
    uint8_t MACPayloadLen)
{
     888:	b5f0      	push	{r4, r5, r6, r7, lr}
     88a:	465f      	mov	r7, fp
     88c:	4656      	mov	r6, sl
     88e:	464d      	mov	r5, r9
     890:	4644      	mov	r4, r8
     892:	b4f0      	push	{r4, r5, r6, r7}
     894:	b0a7      	sub	sp, #156	; 0x9c
     896:	9003      	str	r0, [sp, #12]
     898:	000d      	movs	r5, r1
     89a:	9104      	str	r1, [sp, #16]
     89c:	0016      	movs	r6, r2
     89e:	0a36      	lsrs	r6, r6, #8
     8a0:	9205      	str	r2, [sp, #20]
     8a2:	9302      	str	r3, [sp, #8]
     8a4:	b2c0      	uxtb	r0, r0
     8a6:	0684      	lsls	r4, r0, #26
     8a8:	0fe4      	lsrs	r4, r4, #31
     8aa:	46aa      	mov	sl, r5
     8ac:	b2d3      	uxtb	r3, r2
     8ae:	b2f6      	uxtb	r6, r6
    uint8_t frameControl = 0;
#ifndef TARGET_SMALL
    bool IntraPAN;
#endif

    if (transParam.flags.bits.broadcast) {
     8b0:	0742      	lsls	r2, r0, #29
     8b2:	d500      	bpl.n	8b6 <MiMAC_SendPacket+0x2e>
        transParam.altDestAddr = true;
     8b4:	2301      	movs	r3, #1
    }

    if (transParam.flags.bits.secEn) {
     8b6:	2108      	movs	r1, #8
     8b8:	000a      	movs	r2, r1
     8ba:	4002      	ands	r2, r0
        transParam.altSrcAddr = false;
     8bc:	4251      	negs	r1, r2
     8be:	4151      	adcs	r1, r2
     8c0:	4249      	negs	r1, r1
     8c2:	400e      	ands	r6, r1
        }
    }
#endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
     8c4:	2103      	movs	r1, #3
     8c6:	4001      	ands	r1, r0
     8c8:	2901      	cmp	r1, #1
     8ca:	d004      	beq.n	8d6 <MiMAC_SendPacket+0x4e>
        frameControl = 0x03;
     8cc:	424a      	negs	r2, r1
     8ce:	414a      	adcs	r2, r1
     8d0:	b2d2      	uxtb	r2, r2
     8d2:	4691      	mov	r9, r2
     8d4:	e001      	b.n	8da <MiMAC_SendPacket+0x52>
     8d6:	2203      	movs	r2, #3
     8d8:	4691      	mov	r9, r2
        frameControl = 0x01;
    }

// decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
     8da:	aa03      	add	r2, sp, #12
     8dc:	8952      	ldrh	r2, [r2, #10]
     8de:	4da2      	ldr	r5, [pc, #648]	; (b68 <MiMAC_SendPacket+0x2e0>)
     8e0:	882d      	ldrh	r5, [r5, #0]
     8e2:	4295      	cmp	r5, r2
     8e4:	d10a      	bne.n	8fc <MiMAC_SendPacket+0x74>
     8e6:	4da1      	ldr	r5, [pc, #644]	; (b6c <MiMAC_SendPacket+0x2e4>)
     8e8:	42aa      	cmp	r2, r5
     8ea:	d00b      	beq.n	904 <MiMAC_SendPacket+0x7c>
#endif
    {
        headerLength = 5;
        frameControl |= 0x40;
     8ec:	2240      	movs	r2, #64	; 0x40
     8ee:	464d      	mov	r5, r9
     8f0:	4315      	orrs	r5, r2
     8f2:	46a9      	mov	r9, r5
#ifndef TARGET_SMALL
        IntraPAN = true;
     8f4:	3a3f      	subs	r2, #63	; 0x3f
     8f6:	4693      	mov	fp, r2
// decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
#endif
    {
        headerLength = 5;
     8f8:	3204      	adds	r2, #4
        frameControl |= 0x40;
#ifndef TARGET_SMALL
        IntraPAN = true;
     8fa:	e006      	b.n	90a <MiMAC_SendPacket+0x82>
#endif
    }
#ifndef TARGET_SMALL
    else {
        headerLength = 7;
        IntraPAN = false;
     8fc:	2200      	movs	r2, #0
     8fe:	4693      	mov	fp, r2
        IntraPAN = true;
#endif
    }
#ifndef TARGET_SMALL
    else {
        headerLength = 7;
     900:	3207      	adds	r2, #7
     902:	e002      	b.n	90a <MiMAC_SendPacket+0x82>
        IntraPAN = false;
     904:	2200      	movs	r2, #0
     906:	4693      	mov	fp, r2
        IntraPAN = true;
#endif
    }
#ifndef TARGET_SMALL
    else {
        headerLength = 7;
     908:	3207      	adds	r2, #7
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr) {
     90a:	4698      	mov	r8, r3
        headerLength += 2;
    }
    else {
        headerLength += 8;
     90c:	0017      	movs	r7, r2
     90e:	3708      	adds	r7, #8
        headerLength = 7;
        IntraPAN = false;
    }
#endif

    if (transParam.altDestAddr) {
     910:	2b00      	cmp	r3, #0
     912:	d000      	beq.n	916 <MiMAC_SendPacket+0x8e>
        headerLength += 2;
     914:	1c97      	adds	r7, r2, #2
    }
    else {
        headerLength += 8;
    }

    if (transParam.altSrcAddr) {
     916:	2e00      	cmp	r6, #0
     918:	d003      	beq.n	922 <MiMAC_SendPacket+0x9a>
        headerLength += 2;
     91a:	3702      	adds	r7, #2
     91c:	b2fb      	uxtb	r3, r7
     91e:	9301      	str	r3, [sp, #4]
     920:	e002      	b.n	928 <MiMAC_SendPacket+0xa0>
    }
    else {
        headerLength += 8;
     922:	3708      	adds	r7, #8
     924:	b2fb      	uxtb	r3, r7
     926:	9301      	str	r3, [sp, #4]
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
     928:	2324      	movs	r3, #36	; 0x24
     92a:	4003      	ands	r3, r0
     92c:	2b20      	cmp	r3, #32
     92e:	d102      	bne.n	936 <MiMAC_SendPacket+0xae>
        frameControl |= 0x20;
     930:	464a      	mov	r2, r9
     932:	431a      	orrs	r2, r3
     934:	4691      	mov	r9, r2
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
     936:	2903      	cmp	r1, #3
     938:	d106      	bne.n	948 <MiMAC_SendPacket+0xc0>
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
     93a:	2601      	movs	r6, #1
        transParam.flags.bits.ackReq = false;
     93c:	2400      	movs	r4, #0
    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
        frameControl = 0x00;
        headerLength = 7;
#if !defined(TARGET_SMALL)
        IntraPAN = false;
     93e:	2300      	movs	r3, #0
     940:	469b      	mov	fp, r3
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
        frameControl = 0x00;
     942:	4699      	mov	r9, r3
        headerLength = 7;
     944:	3307      	adds	r3, #7
     946:	9301      	str	r3, [sp, #4]
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
     948:	aa03      	add	r2, sp, #12
     94a:	0163      	lsls	r3, r4, #5
     94c:	7815      	ldrb	r5, [r2, #0]
     94e:	2120      	movs	r1, #32
     950:	438d      	bics	r5, r1
     952:	431d      	orrs	r5, r3
     954:	7015      	strb	r5, [r2, #0]
     956:	072b      	lsls	r3, r5, #28
     958:	d400      	bmi.n	95c <MiMAC_SendPacket+0xd4>
     95a:	e0dd      	b.n	b18 <MiMAC_SendPacket+0x290>
        frameControl |= 0x08;
     95c:	2308      	movs	r3, #8
     95e:	464a      	mov	r2, r9
     960:	431a      	orrs	r2, r3
     962:	4691      	mov	r9, r2
        //DataEncrypt(MACPayload, &MACPayloadLen , 0 , 0 , 0);
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
     964:	4b82      	ldr	r3, [pc, #520]	; (b70 <MiMAC_SendPacket+0x2e8>)
     966:	681a      	ldr	r2, [r3, #0]
     968:	464b      	mov	r3, r9
     96a:	a930      	add	r1, sp, #192	; 0xc0
     96c:	9802      	ldr	r0, [sp, #8]
     96e:	4f81      	ldr	r7, [pc, #516]	; (b74 <MiMAC_SendPacket+0x2ec>)
     970:	47b8      	blx	r7
    }
#endif

    // set header length
    packet[loc++] = headerLength;
     972:	aa06      	add	r2, sp, #24
     974:	9901      	ldr	r1, [sp, #4]
     976:	7011      	strb	r1, [r2, #0]
// set packet length
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
        // 4 byte mic and 5 byte outgoing frame counter
        packet[loc++] = MACPayloadLen + headerLength + 9;
     978:	ab30      	add	r3, sp, #192	; 0xc0
     97a:	781b      	ldrb	r3, [r3, #0]
     97c:	3309      	adds	r3, #9
     97e:	18cf      	adds	r7, r1, r3
     980:	7057      	strb	r7, [r2, #1]
    {
        packet[loc++] = MACPayloadLen + headerLength;
    }

    // set frame control LSB
    packet[loc++] = frameControl;
     982:	ab06      	add	r3, sp, #24
     984:	464a      	mov	r2, r9
     986:	709a      	strb	r2, [r3, #2]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
     988:	43eb      	mvns	r3, r5
     98a:	079b      	lsls	r3, r3, #30
     98c:	d109      	bne.n	9a2 <MiMAC_SendPacket+0x11a>
        packet[loc++] = 0x80;
     98e:	ab06      	add	r3, sp, #24
     990:	2280      	movs	r2, #128	; 0x80
     992:	70da      	strb	r2, [r3, #3]
        // sequence number
        packet[loc++] = IEEESeqNum++;
     994:	4978      	ldr	r1, [pc, #480]	; (b78 <MiMAC_SendPacket+0x2f0>)
     996:	780a      	ldrb	r2, [r1, #0]
     998:	1c50      	adds	r0, r2, #1
     99a:	7008      	strb	r0, [r1, #0]
     99c:	711a      	strb	r2, [r3, #4]
     99e:	2205      	movs	r2, #5
     9a0:	e040      	b.n	a24 <MiMAC_SendPacket+0x19c>
    }
    else {
        if (transParam.altDestAddr && transParam.altSrcAddr) {
     9a2:	4643      	mov	r3, r8
     9a4:	2b00      	cmp	r3, #0
     9a6:	d00b      	beq.n	9c0 <MiMAC_SendPacket+0x138>
     9a8:	2e00      	cmp	r6, #0
     9aa:	d003      	beq.n	9b4 <MiMAC_SendPacket+0x12c>
            packet[loc++] = 0x88;
     9ac:	2288      	movs	r2, #136	; 0x88
     9ae:	ab06      	add	r3, sp, #24
     9b0:	70da      	strb	r2, [r3, #3]
     9b2:	e0b9      	b.n	b28 <MiMAC_SendPacket+0x2a0>
        }
        else if (transParam.altDestAddr && transParam.altSrcAddr == 0) {
     9b4:	2e00      	cmp	r6, #0
     9b6:	d109      	bne.n	9cc <MiMAC_SendPacket+0x144>
            packet[loc++] = 0xC8;
     9b8:	22c8      	movs	r2, #200	; 0xc8
     9ba:	ab06      	add	r3, sp, #24
     9bc:	70da      	strb	r2, [r3, #3]
     9be:	e0b3      	b.n	b28 <MiMAC_SendPacket+0x2a0>
        }
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
     9c0:	2e00      	cmp	r6, #0
     9c2:	d003      	beq.n	9cc <MiMAC_SendPacket+0x144>
            packet[loc++] = 0x8C;
     9c4:	228c      	movs	r2, #140	; 0x8c
     9c6:	ab06      	add	r3, sp, #24
     9c8:	70da      	strb	r2, [r3, #3]
     9ca:	e002      	b.n	9d2 <MiMAC_SendPacket+0x14a>
        }
        else {
            packet[loc++] = 0xCC;
     9cc:	22cc      	movs	r2, #204	; 0xcc
     9ce:	ab06      	add	r3, sp, #24
     9d0:	70da      	strb	r2, [r3, #3]
        }

        // sequence number
        packet[loc++] = IEEESeqNum++;
     9d2:	4b69      	ldr	r3, [pc, #420]	; (b78 <MiMAC_SendPacket+0x2f0>)
     9d4:	781a      	ldrb	r2, [r3, #0]
     9d6:	1c51      	adds	r1, r2, #1
     9d8:	7019      	strb	r1, [r3, #0]
     9da:	ab06      	add	r3, sp, #24
     9dc:	711a      	strb	r2, [r3, #4]

        // destination PANID
        packet[loc++] = transParam.DestPANID.v[0];
     9de:	aa03      	add	r2, sp, #12
     9e0:	7a91      	ldrb	r1, [r2, #10]
     9e2:	7159      	strb	r1, [r3, #5]
        packet[loc++] = transParam.DestPANID.v[1];
     9e4:	7ad2      	ldrb	r2, [r2, #11]
     9e6:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast) {
     9e8:	076b      	lsls	r3, r5, #29
     9ea:	d505      	bpl.n	9f8 <MiMAC_SendPacket+0x170>
            packet[loc++] = 0xFF;
     9ec:	ab06      	add	r3, sp, #24
     9ee:	22ff      	movs	r2, #255	; 0xff
     9f0:	71da      	strb	r2, [r3, #7]
            packet[loc++] = 0xFF;
     9f2:	721a      	strb	r2, [r3, #8]
     9f4:	3af6      	subs	r2, #246	; 0xf6
     9f6:	e015      	b.n	a24 <MiMAC_SendPacket+0x19c>
     9f8:	2300      	movs	r3, #0
        }
        else {
            if (transParam.altDestAddr) {
     9fa:	4642      	mov	r2, r8
     9fc:	4650      	mov	r0, sl
     9fe:	2a00      	cmp	r2, #0
     a00:	d008      	beq.n	a14 <MiMAC_SendPacket+0x18c>
                packet[loc++] = transParam.DestAddress[0];
     a02:	ab06      	add	r3, sp, #24
     a04:	4652      	mov	r2, sl
     a06:	7812      	ldrb	r2, [r2, #0]
     a08:	71da      	strb	r2, [r3, #7]
                packet[loc++] = transParam.DestAddress[1];
     a0a:	4652      	mov	r2, sl
     a0c:	7852      	ldrb	r2, [r2, #1]
     a0e:	721a      	strb	r2, [r3, #8]
     a10:	2209      	movs	r2, #9
     a12:	e007      	b.n	a24 <MiMAC_SendPacket+0x19c>
            }
            else {
                for (i = 0; i < 8; i++) {
                    packet[loc++] = transParam.DestAddress[i];
     a14:	aa06      	add	r2, sp, #24
     a16:	18d2      	adds	r2, r2, r3
     a18:	5cc1      	ldrb	r1, [r0, r3]
     a1a:	71d1      	strb	r1, [r2, #7]
     a1c:	3301      	adds	r3, #1
            if (transParam.altDestAddr) {
                packet[loc++] = transParam.DestAddress[0];
                packet[loc++] = transParam.DestAddress[1];
            }
            else {
                for (i = 0; i < 8; i++) {
     a1e:	2b08      	cmp	r3, #8
     a20:	d1f8      	bne.n	a14 <MiMAC_SendPacket+0x18c>
                    packet[loc++] = transParam.DestAddress[i];
     a22:	220f      	movs	r2, #15
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false) {
     a24:	465b      	mov	r3, fp
     a26:	2b00      	cmp	r3, #0
     a28:	d109      	bne.n	a3e <MiMAC_SendPacket+0x1b6>
        packet[loc++] = MAC_PANID.v[0];
     a2a:	1c53      	adds	r3, r2, #1
     a2c:	b2db      	uxtb	r3, r3
     a2e:	a906      	add	r1, sp, #24
     a30:	484d      	ldr	r0, [pc, #308]	; (b68 <MiMAC_SendPacket+0x2e0>)
     a32:	7805      	ldrb	r5, [r0, #0]
     a34:	548d      	strb	r5, [r1, r2]
        packet[loc++] = MAC_PANID.v[1];
     a36:	3202      	adds	r2, #2
     a38:	b2d2      	uxtb	r2, r2
     a3a:	7840      	ldrb	r0, [r0, #1]
     a3c:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr) {
     a3e:	2e00      	cmp	r6, #0
     a40:	d00a      	beq.n	a58 <MiMAC_SendPacket+0x1d0>
        packet[loc++] = myNetworkAddress.v[0];
     a42:	a906      	add	r1, sp, #24
     a44:	484d      	ldr	r0, [pc, #308]	; (b7c <MiMAC_SendPacket+0x2f4>)
     a46:	7803      	ldrb	r3, [r0, #0]
     a48:	548b      	strb	r3, [r1, r2]
        packet[loc++] = myNetworkAddress.v[1];
     a4a:	1c93      	adds	r3, r2, #2
     a4c:	b2db      	uxtb	r3, r3
     a4e:	3201      	adds	r2, #1
     a50:	b2d2      	uxtb	r2, r2
     a52:	7840      	ldrb	r0, [r0, #1]
     a54:	5488      	strb	r0, [r1, r2]
     a56:	e00c      	b.n	a72 <MiMAC_SendPacket+0x1ea>
    }
    else {
        for (i = 0; i < 8; i++) {
            packet[loc++] = MACInitParams.PAddress[i];
     a58:	4b49      	ldr	r3, [pc, #292]	; (b80 <MiMAC_SendPacket+0x2f8>)
     a5a:	6859      	ldr	r1, [r3, #4]
     a5c:	0013      	movs	r3, r2
     a5e:	3308      	adds	r3, #8
     a60:	b2db      	uxtb	r3, r3
     a62:	1c50      	adds	r0, r2, #1
     a64:	780e      	ldrb	r6, [r1, #0]
     a66:	ad06      	add	r5, sp, #24
     a68:	54ae      	strb	r6, [r5, r2]
     a6a:	3101      	adds	r1, #1
     a6c:	b2c2      	uxtb	r2, r0
    if (transParam.altSrcAddr) {
        packet[loc++] = myNetworkAddress.v[0];
        packet[loc++] = myNetworkAddress.v[1];
    }
    else {
        for (i = 0; i < 8; i++) {
     a6e:	4293      	cmp	r3, r2
     a70:	d1f7      	bne.n	a62 <MiMAC_SendPacket+0x1da>
            packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
     a72:	a903      	add	r1, sp, #12
     a74:	0162      	lsls	r2, r4, #5
     a76:	780c      	ldrb	r4, [r1, #0]
     a78:	2020      	movs	r0, #32
     a7a:	4384      	bics	r4, r0
     a7c:	4314      	orrs	r4, r2
     a7e:	700c      	strb	r4, [r1, #0]
     a80:	0722      	lsls	r2, r4, #28
     a82:	d514      	bpl.n	aae <MiMAC_SendPacket+0x226>
     a84:	0019      	movs	r1, r3
     a86:	2200      	movs	r2, #0
        // fill the additional security aux header
        for (i = 0; i < 4; i++) {
            packet[loc++] = OutgoingFrameCounter.v[i];
     a88:	4f39      	ldr	r7, [pc, #228]	; (b70 <MiMAC_SendPacket+0x2e8>)
     a8a:	1c48      	adds	r0, r1, #1
     a8c:	5cbe      	ldrb	r6, [r7, r2]
     a8e:	ad06      	add	r5, sp, #24
     a90:	546e      	strb	r6, [r5, r1]
     a92:	3201      	adds	r2, #1
     a94:	b2c1      	uxtb	r1, r0
        }
    }
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
        // fill the additional security aux header
        for (i = 0; i < 4; i++) {
     a96:	2a04      	cmp	r2, #4
     a98:	d1f7      	bne.n	a8a <MiMAC_SendPacket+0x202>
     a9a:	1d1a      	adds	r2, r3, #4
     a9c:	b2d2      	uxtb	r2, r2
            packet[loc++] = OutgoingFrameCounter.v[i];
        }
        OutgoingFrameCounter.Val++;
     a9e:	4834      	ldr	r0, [pc, #208]	; (b70 <MiMAC_SendPacket+0x2e8>)
     aa0:	6801      	ldr	r1, [r0, #0]
     aa2:	3101      	adds	r1, #1
     aa4:	6001      	str	r1, [r0, #0]
        if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0)) {
            nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        }
#endif
        //copy myKeySequenceNumber
        packet[loc++] = myKeySequenceNumber;
     aa6:	3305      	adds	r3, #5
     aa8:	b2db      	uxtb	r3, r3
     aaa:	2000      	movs	r0, #0
     aac:	54a8      	strb	r0, [r5, r2]
    for (i = 0; i < MACPayloadLen; i++) {
        packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) {
     aae:	aa30      	add	r2, sp, #192	; 0xc0
     ab0:	7811      	ldrb	r1, [r2, #0]
     ab2:	2900      	cmp	r1, #0
     ab4:	d00b      	beq.n	ace <MiMAC_SendPacket+0x246>
     ab6:	9a02      	ldr	r2, [sp, #8]
     ab8:	18c9      	adds	r1, r1, r3
     aba:	b2c9      	uxtb	r1, r1
        packet[loc++] = MACPayload[i];
     abc:	1c58      	adds	r0, r3, #1
     abe:	7816      	ldrb	r6, [r2, #0]
     ac0:	ad06      	add	r5, sp, #24
     ac2:	54ee      	strb	r6, [r5, r3]
     ac4:	3201      	adds	r2, #1
     ac6:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) {
        packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) {
     ac8:	4299      	cmp	r1, r3
     aca:	d1f7      	bne.n	abc <MiMAC_SendPacket+0x234>
     acc:	e000      	b.n	ad0 <MiMAC_SendPacket+0x248>
     ace:	0019      	movs	r1, r3
        packet[loc++] = MACPayload[i];
    }
    // MIC added
    packet[loc++] = final_mic_value[0];
     ad0:	aa06      	add	r2, sp, #24
     ad2:	4b2c      	ldr	r3, [pc, #176]	; (b84 <MiMAC_SendPacket+0x2fc>)
     ad4:	7818      	ldrb	r0, [r3, #0]
     ad6:	5450      	strb	r0, [r2, r1]
    packet[loc++] = final_mic_value[1];
     ad8:	1c48      	adds	r0, r1, #1
     ada:	b2c0      	uxtb	r0, r0
     adc:	785d      	ldrb	r5, [r3, #1]
     ade:	5415      	strb	r5, [r2, r0]
    packet[loc++] = final_mic_value[2];
     ae0:	1c88      	adds	r0, r1, #2
     ae2:	b2c0      	uxtb	r0, r0
     ae4:	789d      	ldrb	r5, [r3, #2]
     ae6:	5415      	strb	r5, [r2, r0]
    packet[loc++] = final_mic_value[3];
     ae8:	3103      	adds	r1, #3
     aea:	b2c9      	uxtb	r1, r1
     aec:	78db      	ldrb	r3, [r3, #3]
     aee:	5453      	strb	r3, [r2, r1]
#endif

    trx_status.bits.TX_BUSY = 1;
     af0:	4a25      	ldr	r2, [pc, #148]	; (b88 <MiMAC_SendPacket+0x300>)
     af2:	7811      	ldrb	r1, [r2, #0]
     af4:	2301      	movs	r3, #1
     af6:	430b      	orrs	r3, r1
     af8:	7013      	strb	r3, [r2, #0]

    // set the trigger value
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
     afa:	2324      	movs	r3, #36	; 0x24
     afc:	401c      	ands	r4, r3
     afe:	2c20      	cmp	r4, #32
     b00:	d104      	bne.n	b0c <MiMAC_SendPacket+0x284>
        i = 0x05;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 1;
     b02:	7811      	ldrb	r1, [r2, #0]
     b04:	2302      	movs	r3, #2
     b06:	430b      	orrs	r3, r1
     b08:	7013      	strb	r3, [r2, #0]
     b0a:	e01c      	b.n	b46 <MiMAC_SendPacket+0x2be>
#endif
    }
    else {
        i = 0x01;
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
     b0c:	4a1e      	ldr	r2, [pc, #120]	; (b88 <MiMAC_SendPacket+0x300>)
     b0e:	7813      	ldrb	r3, [r2, #0]
     b10:	2102      	movs	r1, #2
     b12:	438b      	bics	r3, r1
     b14:	7013      	strb	r3, [r2, #0]
     b16:	e016      	b.n	b46 <MiMAC_SendPacket+0x2be>
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    }
#endif

    // set header length
    packet[loc++] = headerLength;
     b18:	aa06      	add	r2, sp, #24
     b1a:	9901      	ldr	r1, [sp, #4]
     b1c:	7011      	strb	r1, [r2, #0]
        packet[loc++] = MACPayloadLen + headerLength + 9;
    }
    else
#endif
    {
        packet[loc++] = MACPayloadLen + headerLength;
     b1e:	ab30      	add	r3, sp, #192	; 0xc0
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	18cf      	adds	r7, r1, r3
     b24:	7057      	strb	r7, [r2, #1]
     b26:	e72c      	b.n	982 <MiMAC_SendPacket+0xfa>
        else {
            packet[loc++] = 0xCC;
        }

        // sequence number
        packet[loc++] = IEEESeqNum++;
     b28:	4b13      	ldr	r3, [pc, #76]	; (b78 <MiMAC_SendPacket+0x2f0>)
     b2a:	781a      	ldrb	r2, [r3, #0]
     b2c:	1c51      	adds	r1, r2, #1
     b2e:	7019      	strb	r1, [r3, #0]
     b30:	ab06      	add	r3, sp, #24
     b32:	711a      	strb	r2, [r3, #4]

        // destination PANID
        packet[loc++] = transParam.DestPANID.v[0];
     b34:	aa03      	add	r2, sp, #12
     b36:	7a91      	ldrb	r1, [r2, #10]
     b38:	7159      	strb	r1, [r3, #5]
        packet[loc++] = transParam.DestPANID.v[1];
     b3a:	7ad2      	ldrb	r2, [r2, #11]
     b3c:	719a      	strb	r2, [r3, #6]

        // destination address
        if (transParam.flags.bits.broadcast) {
     b3e:	076b      	lsls	r3, r5, #29
     b40:	d500      	bpl.n	b44 <MiMAC_SendPacket+0x2bc>
     b42:	e753      	b.n	9ec <MiMAC_SendPacket+0x164>
     b44:	e75d      	b.n	a02 <MiMAC_SendPacket+0x17a>
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
#endif
    }
    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
     b46:	a806      	add	r0, sp, #24
     b48:	4b10      	ldr	r3, [pc, #64]	; (b8c <MiMAC_SendPacket+0x304>)
     b4a:	4798      	blx	r3

    return !trx_status.bits.TX_FAIL;
     b4c:	4b0e      	ldr	r3, [pc, #56]	; (b88 <MiMAC_SendPacket+0x300>)
     b4e:	7818      	ldrb	r0, [r3, #0]
     b50:	0740      	lsls	r0, r0, #29
     b52:	0fc0      	lsrs	r0, r0, #31
     b54:	2301      	movs	r3, #1
     b56:	4058      	eors	r0, r3
}
     b58:	b027      	add	sp, #156	; 0x9c
     b5a:	bc3c      	pop	{r2, r3, r4, r5}
     b5c:	4690      	mov	r8, r2
     b5e:	4699      	mov	r9, r3
     b60:	46a2      	mov	sl, r4
     b62:	46ab      	mov	fp, r5
     b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	20000390 	.word	0x20000390
     b6c:	0000ffff 	.word	0x0000ffff
     b70:	20000378 	.word	0x20000378
     b74:	000005cd 	.word	0x000005cd
     b78:	20000294 	.word	0x20000294
     b7c:	20000298 	.word	0x20000298
     b80:	200002a0 	.word	0x200002a0
     b84:	200002cc 	.word	0x200002cc
     b88:	20000394 	.word	0x20000394
     b8c:	000002cd 	.word	0x000002cd

00000b90 <PHY_SetIEEEAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
     b90:	b570      	push	{r4, r5, r6, lr}
     b92:	0005      	movs	r5, r0
     b94:	2424      	movs	r4, #36	; 0x24
    uint8_t* ptr_to_reg = ieee_addr;
    for (uint8_t i = 0; i < 8; i++) {
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
     b96:	4e05      	ldr	r6, [pc, #20]	; (bac <PHY_SetIEEEAddr+0x1c>)
     b98:	7829      	ldrb	r1, [r5, #0]
     b9a:	0020      	movs	r0, r4
     b9c:	47b0      	blx	r6
        ptr_to_reg++;
     b9e:	3501      	adds	r5, #1
     ba0:	3401      	adds	r4, #1
     ba2:	b2e4      	uxtb	r4, r4
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
    uint8_t* ptr_to_reg = ieee_addr;
    for (uint8_t i = 0; i < 8; i++) {
     ba4:	2c2c      	cmp	r4, #44	; 0x2c
     ba6:	d1f7      	bne.n	b98 <PHY_SetIEEEAddr+0x8>
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
        ptr_to_reg++;
    }
}
     ba8:	bd70      	pop	{r4, r5, r6, pc}
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	000041ad 	.word	0x000041ad

00000bb0 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
     bb0:	b530      	push	{r4, r5, lr}
     bb2:	b083      	sub	sp, #12
     bb4:	466c      	mov	r4, sp
     bb6:	9000      	str	r0, [sp, #0]
     bb8:	9101      	str	r1, [sp, #4]
    uint8_t i;

    PHY_Init();
     bba:	4b10      	ldr	r3, [pc, #64]	; (bfc <MiMAC_Init+0x4c>)
     bbc:	4798      	blx	r3
    MACInitParams = initValue;
     bbe:	4b10      	ldr	r3, [pc, #64]	; (c00 <MiMAC_Init+0x50>)
     bc0:	cc06      	ldmia	r4!, {r1, r2}
     bc2:	c306      	stmia	r3!, {r1, r2}
    uint16_t x = PHY_RandomReq();
     bc4:	4b0f      	ldr	r3, [pc, #60]	; (c04 <MiMAC_Init+0x54>)
     bc6:	4798      	blx	r3
     bc8:	0005      	movs	r5, r0
/*************************************************************************/ /**
*****************************************************************************/
// Set Radio to Receive State
void PHY_SetRxState(bool rx)
{
    phyRxState = rx;
     bca:	2401      	movs	r4, #1
     bcc:	4b0e      	ldr	r3, [pc, #56]	; (c08 <MiMAC_Init+0x58>)
     bce:	701c      	strb	r4, [r3, #0]
    phySetRxState();
     bd0:	4b0e      	ldr	r3, [pc, #56]	; (c0c <MiMAC_Init+0x5c>)
     bd2:	4798      	blx	r3
    PHY_Init();
    MACInitParams = initValue;
    uint16_t x = PHY_RandomReq();
    // Set RF mode
    PHY_SetRxState(true);
    IEEESeqNum = x & 0xff;
     bd4:	4b0e      	ldr	r3, [pc, #56]	; (c10 <MiMAC_Init+0x60>)
     bd6:	701d      	strb	r5, [r3, #0]

    MACCurrentChannel = 11;
     bd8:	220b      	movs	r2, #11
     bda:	4b0e      	ldr	r3, [pc, #56]	; (c14 <MiMAC_Init+0x64>)
     bdc:	701a      	strb	r2, [r3, #0]

    // Set Node Address
    PHY_SetIEEEAddr(myLongAddress);
     bde:	480e      	ldr	r0, [pc, #56]	; (c18 <MiMAC_Init+0x68>)
     be0:	4b0e      	ldr	r3, [pc, #56]	; (c1c <MiMAC_Init+0x6c>)
     be2:	4798      	blx	r3

    trx_status.Val = 0;
     be4:	2300      	movs	r3, #0
     be6:	4a0e      	ldr	r2, [pc, #56]	; (c20 <MiMAC_Init+0x70>)
     be8:	7013      	strb	r3, [r2, #0]

    for (i = 0; i < BANK_SIZE; i++) {
        RxBuffer[i].PayloadLen = 0;
     bea:	4a0e      	ldr	r2, [pc, #56]	; (c24 <MiMAC_Init+0x74>)
     bec:	7013      	strb	r3, [r2, #0]
     bee:	214e      	movs	r1, #78	; 0x4e
     bf0:	5453      	strb	r3, [r2, r1]
        OutgoingFrameCounter.Val = 0;
        nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        OutgoingFrameCounter.Val = 1;
    }
#else
    OutgoingFrameCounter.Val = 1;
     bf2:	4b0d      	ldr	r3, [pc, #52]	; (c28 <MiMAC_Init+0x78>)
     bf4:	601c      	str	r4, [r3, #0]
#endif
#endif

    return true;
}
     bf6:	2001      	movs	r0, #1
     bf8:	b003      	add	sp, #12
     bfa:	bd30      	pop	{r4, r5, pc}
     bfc:	00000369 	.word	0x00000369
     c00:	200002a0 	.word	0x200002a0
     c04:	00000319 	.word	0x00000319
     c08:	200000b1 	.word	0x200000b1
     c0c:	000002a1 	.word	0x000002a1
     c10:	20000294 	.word	0x20000294
     c14:	20000392 	.word	0x20000392
     c18:	200004ec 	.word	0x200004ec
     c1c:	00000b91 	.word	0x00000b91
     c20:	20000394 	.word	0x20000394
     c24:	200002dc 	.word	0x200002dc
     c28:	20000378 	.word	0x20000378

00000c2c <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <MiMAC_DiscardPacket+0x14>)
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2b01      	cmp	r3, #1
     c32:	d804      	bhi.n	c3e <MiMAC_DiscardPacket+0x12>
        RxBuffer[BankIndex].PayloadLen = 0;
     c34:	224e      	movs	r2, #78	; 0x4e
     c36:	4353      	muls	r3, r2
     c38:	2100      	movs	r1, #0
     c3a:	4a02      	ldr	r2, [pc, #8]	; (c44 <MiMAC_DiscardPacket+0x18>)
     c3c:	5499      	strb	r1, [r3, r2]
    }
}
     c3e:	4770      	bx	lr
     c40:	20000020 	.word	0x20000020
     c44:	200002dc 	.word	0x200002dc

00000c48 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	4657      	mov	r7, sl
     c4c:	4646      	mov	r6, r8
     c4e:	b4c0      	push	{r6, r7}
     c50:	b083      	sub	sp, #12
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
     c52:	4bd1      	ldr	r3, [pc, #836]	; (f98 <MiMAC_ReceivedPacket+0x350>)
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	07db      	lsls	r3, r3, #31
     c58:	d512      	bpl.n	c80 <MiMAC_ReceivedPacket+0x38>
        if (failureCounter >= FAILURE_COUNTER) {
     c5a:	4bd0      	ldr	r3, [pc, #832]	; (f9c <MiMAC_ReceivedPacket+0x354>)
     c5c:	881b      	ldrh	r3, [r3, #0]
     c5e:	b29b      	uxth	r3, r3
     c60:	2b05      	cmp	r3, #5
     c62:	d908      	bls.n	c76 <MiMAC_ReceivedPacket+0x2e>
            failureCounter = 0;
     c64:	2200      	movs	r2, #0
     c66:	4bcd      	ldr	r3, [pc, #820]	; (f9c <MiMAC_ReceivedPacket+0x354>)
     c68:	801a      	strh	r2, [r3, #0]
            trx_status.bits.TX_BUSY = 0;
     c6a:	4acb      	ldr	r2, [pc, #812]	; (f98 <MiMAC_ReceivedPacket+0x350>)
     c6c:	7813      	ldrb	r3, [r2, #0]
     c6e:	2101      	movs	r1, #1
     c70:	438b      	bics	r3, r1
     c72:	7013      	strb	r3, [r2, #0]
     c74:	e004      	b.n	c80 <MiMAC_ReceivedPacket+0x38>
        }
        else {
            failureCounter++;
     c76:	4ac9      	ldr	r2, [pc, #804]	; (f9c <MiMAC_ReceivedPacket+0x354>)
     c78:	8813      	ldrh	r3, [r2, #0]
     c7a:	3301      	adds	r3, #1
     c7c:	b29b      	uxth	r3, r3
     c7e:	8013      	strh	r3, [r2, #0]
        }
    }

    BankIndex = 0xFF;
     c80:	22ff      	movs	r2, #255	; 0xff
     c82:	4bc7      	ldr	r3, [pc, #796]	; (fa0 <MiMAC_ReceivedPacket+0x358>)
     c84:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
     c86:	4bc7      	ldr	r3, [pc, #796]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d000      	beq.n	c90 <MiMAC_ReceivedPacket+0x48>
     c8e:	e20f      	b.n	10b0 <MiMAC_ReceivedPacket+0x468>
     c90:	334e      	adds	r3, #78	; 0x4e
     c92:	4ac4      	ldr	r2, [pc, #784]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     c94:	5cd3      	ldrb	r3, [r2, r3]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
#endif

        return true;
    }
    return false;
     c96:	2000      	movs	r0, #0
        }
    }

    BankIndex = 0xFF;
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
     c98:	2b00      	cmp	r3, #0
     c9a:	d100      	bne.n	c9e <MiMAC_ReceivedPacket+0x56>
     c9c:	e20d      	b.n	10ba <MiMAC_ReceivedPacket+0x472>
            BankIndex = i;
     c9e:	2201      	movs	r2, #1
     ca0:	4bbf      	ldr	r3, [pc, #764]	; (fa0 <MiMAC_ReceivedPacket+0x358>)
     ca2:	701a      	strb	r2, [r3, #0]
     ca4:	2501      	movs	r5, #1
    if (BankIndex < BANK_SIZE) {
        uint8_t addrMode;
#ifndef TARGET_SMALL
        bool bIntraPAN = true;

        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
     ca6:	0028      	movs	r0, r5
     ca8:	234e      	movs	r3, #78	; 0x4e
     caa:	436b      	muls	r3, r5
     cac:	4abd      	ldr	r2, [pc, #756]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     cae:	18d3      	adds	r3, r2, r3
     cb0:	785a      	ldrb	r2, [r3, #1]
     cb2:	2440      	movs	r4, #64	; 0x40
     cb4:	4014      	ands	r4, r2
            bIntraPAN = false;
        }
#endif
        MACRxPacket.flags.Val = 0;
     cb6:	4abc      	ldr	r2, [pc, #752]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     cb8:	2100      	movs	r1, #0
     cba:	7011      	strb	r1, [r2, #0]
        MACRxPacket.altSourceAddress = false;
     cbc:	73d1      	strb	r1, [r2, #15]

        //Determine the start of the MAC payload
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
        switch (addrMode) {
     cbe:	789b      	ldrb	r3, [r3, #2]
     cc0:	2233      	movs	r2, #51	; 0x33
     cc2:	4393      	bics	r3, r2
     cc4:	b2da      	uxtb	r2, r3
     cc6:	2a88      	cmp	r2, #136	; 0x88
     cc8:	d100      	bne.n	ccc <MiMAC_ReceivedPacket+0x84>
     cca:	e097      	b.n	dfc <MiMAC_ReceivedPacket+0x1b4>
     ccc:	d805      	bhi.n	cda <MiMAC_ReceivedPacket+0x92>
     cce:	2b08      	cmp	r3, #8
     cd0:	d100      	bne.n	cd4 <MiMAC_ReceivedPacket+0x8c>
     cd2:	e106      	b.n	ee2 <MiMAC_ReceivedPacket+0x29a>
     cd4:	2a80      	cmp	r2, #128	; 0x80
     cd6:	d075      	beq.n	dc4 <MiMAC_ReceivedPacket+0x17c>
     cd8:	e120      	b.n	f1c <MiMAC_ReceivedPacket+0x2d4>
     cda:	b2da      	uxtb	r2, r3
     cdc:	2ac8      	cmp	r2, #200	; 0xc8
     cde:	d005      	beq.n	cec <MiMAC_ReceivedPacket+0xa4>
     ce0:	2acc      	cmp	r2, #204	; 0xcc
     ce2:	d042      	beq.n	d6a <MiMAC_ReceivedPacket+0x122>
     ce4:	2a8c      	cmp	r2, #140	; 0x8c
     ce6:	d000      	beq.n	cea <MiMAC_ReceivedPacket+0xa2>
     ce8:	e118      	b.n	f1c <MiMAC_ReceivedPacket+0x2d4>
     cea:	e0ca      	b.n	e82 <MiMAC_ReceivedPacket+0x23a>
        case 0xC8: //short dest, long source
            // for P2P only broadcast allows short destination address
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
     cec:	234e      	movs	r3, #78	; 0x4e
     cee:	436b      	muls	r3, r5
     cf0:	4aac      	ldr	r2, [pc, #688]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     cf2:	18d3      	adds	r3, r2, r3
     cf4:	799b      	ldrb	r3, [r3, #6]
     cf6:	2bff      	cmp	r3, #255	; 0xff
     cf8:	d10a      	bne.n	d10 <MiMAC_ReceivedPacket+0xc8>
     cfa:	3bb1      	subs	r3, #177	; 0xb1
     cfc:	436b      	muls	r3, r5
     cfe:	18d3      	adds	r3, r2, r3
     d00:	79db      	ldrb	r3, [r3, #7]
     d02:	2bff      	cmp	r3, #255	; 0xff
     d04:	d104      	bne.n	d10 <MiMAC_ReceivedPacket+0xc8>
                MACRxPacket.flags.bits.broadcast = 1;
     d06:	4aa8      	ldr	r2, [pc, #672]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     d08:	7811      	ldrb	r1, [r2, #0]
     d0a:	2304      	movs	r3, #4
     d0c:	430b      	orrs	r3, r1
     d0e:	7013      	strb	r3, [r2, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
     d10:	4aa5      	ldr	r2, [pc, #660]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     d12:	7813      	ldrb	r3, [r2, #0]
     d14:	2180      	movs	r1, #128	; 0x80
     d16:	4249      	negs	r1, r1
     d18:	430b      	orrs	r3, r1
     d1a:	7013      	strb	r3, [r2, #0]

#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
     d1c:	2c00      	cmp	r4, #0
     d1e:	d011      	beq.n	d44 <MiMAC_ReceivedPacket+0xfc>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     d20:	49a0      	ldr	r1, [pc, #640]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     d22:	234e      	movs	r3, #78	; 0x4e
     d24:	4358      	muls	r0, r3
     d26:	180b      	adds	r3, r1, r0
     d28:	791c      	ldrb	r4, [r3, #4]
     d2a:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     d2c:	795b      	ldrb	r3, [r3, #5]
     d2e:	7453      	strb	r3, [r2, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
     d30:	180b      	adds	r3, r1, r0
     d32:	3308      	adds	r3, #8
     d34:	6053      	str	r3, [r2, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
     d36:	5c43      	ldrb	r3, [r0, r1]
     d38:	3b13      	subs	r3, #19
     d3a:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
     d3c:	1808      	adds	r0, r1, r0
     d3e:	3010      	adds	r0, #16
     d40:	6090      	str	r0, [r2, #8]
     d42:	e1aa      	b.n	109a <MiMAC_ReceivedPacket+0x452>
            }
#ifndef TARGET_SMALL
            else {
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
     d44:	4a98      	ldr	r2, [pc, #608]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     d46:	4997      	ldr	r1, [pc, #604]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     d48:	234e      	movs	r3, #78	; 0x4e
     d4a:	4358      	muls	r0, r3
     d4c:	180b      	adds	r3, r1, r0
     d4e:	7a1c      	ldrb	r4, [r3, #8]
     d50:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
     d52:	7a5b      	ldrb	r3, [r3, #9]
     d54:	7453      	strb	r3, [r2, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
     d56:	180b      	adds	r3, r1, r0
     d58:	330a      	adds	r3, #10
     d5a:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
     d5c:	5c43      	ldrb	r3, [r0, r1]
     d5e:	3b15      	subs	r3, #21
     d60:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
     d62:	1808      	adds	r0, r1, r0
     d64:	3012      	adds	r0, #18
     d66:	6090      	str	r0, [r2, #8]
     d68:	e197      	b.n	109a <MiMAC_ReceivedPacket+0x452>
#endif

            break;

        case 0xCC: // long dest, long source
            MACRxPacket.flags.bits.sourcePrsnt = 1;
     d6a:	4a8f      	ldr	r2, [pc, #572]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     d6c:	7813      	ldrb	r3, [r2, #0]
     d6e:	2180      	movs	r1, #128	; 0x80
     d70:	4249      	negs	r1, r1
     d72:	430b      	orrs	r3, r1
     d74:	7013      	strb	r3, [r2, #0]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
     d76:	2c00      	cmp	r4, #0
     d78:	d011      	beq.n	d9e <MiMAC_ReceivedPacket+0x156>
#endif
            {
//rxFrame.flags.bits.intraPAN = 1;
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     d7a:	498a      	ldr	r1, [pc, #552]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     d7c:	234e      	movs	r3, #78	; 0x4e
     d7e:	4358      	muls	r0, r3
     d80:	180b      	adds	r3, r1, r0
     d82:	791c      	ldrb	r4, [r3, #4]
     d84:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     d86:	795b      	ldrb	r3, [r3, #5]
     d88:	7453      	strb	r3, [r2, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
     d8a:	180b      	adds	r3, r1, r0
     d8c:	330e      	adds	r3, #14
     d8e:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
     d90:	5c43      	ldrb	r3, [r0, r1]
     d92:	3b19      	subs	r3, #25
     d94:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
     d96:	1808      	adds	r0, r1, r0
     d98:	3016      	adds	r0, #22
     d9a:	6090      	str	r0, [r2, #8]
     d9c:	e17d      	b.n	109a <MiMAC_ReceivedPacket+0x452>
            }
#ifndef TARGET_SMALL
            else {
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
     d9e:	4a82      	ldr	r2, [pc, #520]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     da0:	4980      	ldr	r1, [pc, #512]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     da2:	234e      	movs	r3, #78	; 0x4e
     da4:	4358      	muls	r0, r3
     da6:	180b      	adds	r3, r1, r0
     da8:	7b9c      	ldrb	r4, [r3, #14]
     daa:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
     dac:	7bdb      	ldrb	r3, [r3, #15]
     dae:	7453      	strb	r3, [r2, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
     db0:	180b      	adds	r3, r1, r0
     db2:	3310      	adds	r3, #16
     db4:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
     db6:	5c43      	ldrb	r3, [r0, r1]
     db8:	3b1b      	subs	r3, #27
     dba:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
     dbc:	1808      	adds	r0, r1, r0
     dbe:	3018      	adds	r0, #24
     dc0:	6090      	str	r0, [r2, #8]
     dc2:	e16a      	b.n	109a <MiMAC_ReceivedPacket+0x452>
#endif
            break;

        case 0x80: // short source only. used in beacon
        {
            MACRxPacket.flags.bits.broadcast = 1;
     dc4:	4a78      	ldr	r2, [pc, #480]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     dc6:	7811      	ldrb	r1, [r2, #0]
     dc8:	2304      	movs	r3, #4
     dca:	430b      	orrs	r3, r1
            MACRxPacket.flags.bits.sourcePrsnt = 1;
     dcc:	2180      	movs	r1, #128	; 0x80
     dce:	4249      	negs	r1, r1
     dd0:	430b      	orrs	r3, r1
     dd2:	7013      	strb	r3, [r2, #0]
            MACRxPacket.altSourceAddress = true;
     dd4:	2301      	movs	r3, #1
     dd6:	73d3      	strb	r3, [r2, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     dd8:	4972      	ldr	r1, [pc, #456]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     dda:	334d      	adds	r3, #77	; 0x4d
     ddc:	4358      	muls	r0, r3
     dde:	180b      	adds	r3, r1, r0
     de0:	791c      	ldrb	r4, [r3, #4]
     de2:	7414      	strb	r4, [r2, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     de4:	795b      	ldrb	r3, [r3, #5]
     de6:	7453      	strb	r3, [r2, #17]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
     de8:	180b      	adds	r3, r1, r0
     dea:	3306      	adds	r3, #6
     dec:	6053      	str	r3, [r2, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
     dee:	5c43      	ldrb	r3, [r0, r1]
     df0:	3b0b      	subs	r3, #11
     df2:	7313      	strb	r3, [r2, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
     df4:	1808      	adds	r0, r1, r0
     df6:	3008      	adds	r0, #8
     df8:	6090      	str	r0, [r2, #8]
        } break;
     dfa:	e144      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>

        case 0x88: // short dest, short source
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
     dfc:	234e      	movs	r3, #78	; 0x4e
     dfe:	435d      	muls	r5, r3
     e00:	4b68      	ldr	r3, [pc, #416]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     e02:	195d      	adds	r5, r3, r5
     e04:	79ab      	ldrb	r3, [r5, #6]
     e06:	2bff      	cmp	r3, #255	; 0xff
     e08:	d10b      	bne.n	e22 <MiMAC_ReceivedPacket+0x1da>
     e0a:	3bb1      	subs	r3, #177	; 0xb1
     e0c:	4343      	muls	r3, r0
     e0e:	4a65      	ldr	r2, [pc, #404]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     e10:	18d3      	adds	r3, r2, r3
     e12:	79db      	ldrb	r3, [r3, #7]
     e14:	2bff      	cmp	r3, #255	; 0xff
     e16:	d104      	bne.n	e22 <MiMAC_ReceivedPacket+0x1da>
                MACRxPacket.flags.bits.broadcast = 1;
     e18:	4a63      	ldr	r2, [pc, #396]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     e1a:	7811      	ldrb	r1, [r2, #0]
     e1c:	2304      	movs	r3, #4
     e1e:	430b      	orrs	r3, r1
     e20:	7013      	strb	r3, [r2, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
     e22:	4b61      	ldr	r3, [pc, #388]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     e24:	781a      	ldrb	r2, [r3, #0]
     e26:	2180      	movs	r1, #128	; 0x80
     e28:	4249      	negs	r1, r1
     e2a:	430a      	orrs	r2, r1
     e2c:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
     e2e:	2201      	movs	r2, #1
     e30:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN == false) {
     e32:	2c00      	cmp	r4, #0
     e34:	d112      	bne.n	e5c <MiMAC_ReceivedPacket+0x214>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
     e36:	001a      	movs	r2, r3
     e38:	495a      	ldr	r1, [pc, #360]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     e3a:	234e      	movs	r3, #78	; 0x4e
     e3c:	4358      	muls	r0, r3
     e3e:	180b      	adds	r3, r1, r0
     e40:	7a1c      	ldrb	r4, [r3, #8]
     e42:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
     e44:	7a5b      	ldrb	r3, [r3, #9]
     e46:	7453      	strb	r3, [r2, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
     e48:	180b      	adds	r3, r1, r0
     e4a:	330a      	adds	r3, #10
     e4c:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
     e4e:	5c43      	ldrb	r3, [r0, r1]
     e50:	3b0f      	subs	r3, #15
     e52:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
     e54:	1808      	adds	r0, r1, r0
     e56:	300c      	adds	r0, #12
     e58:	6090      	str	r0, [r2, #8]
     e5a:	e114      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>
            }
            else
#endif
            {
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     e5c:	4a52      	ldr	r2, [pc, #328]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     e5e:	4951      	ldr	r1, [pc, #324]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     e60:	234e      	movs	r3, #78	; 0x4e
     e62:	4358      	muls	r0, r3
     e64:	180b      	adds	r3, r1, r0
     e66:	791c      	ldrb	r4, [r3, #4]
     e68:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     e6a:	795b      	ldrb	r3, [r3, #5]
     e6c:	7453      	strb	r3, [r2, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
     e6e:	180b      	adds	r3, r1, r0
     e70:	3308      	adds	r3, #8
     e72:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
     e74:	5c43      	ldrb	r3, [r0, r1]
     e76:	3b0d      	subs	r3, #13
     e78:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
     e7a:	1808      	adds	r0, r1, r0
     e7c:	300a      	adds	r0, #10
     e7e:	6090      	str	r0, [r2, #8]
     e80:	e101      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>
            }
        } break;

        case 0x8C: // long dest, short source
        {
            MACRxPacket.flags.bits.sourcePrsnt = 1;
     e82:	4b49      	ldr	r3, [pc, #292]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     e84:	781a      	ldrb	r2, [r3, #0]
     e86:	2180      	movs	r1, #128	; 0x80
     e88:	4249      	negs	r1, r1
     e8a:	430a      	orrs	r2, r1
     e8c:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
     e8e:	2201      	movs	r2, #1
     e90:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
     e92:	2c00      	cmp	r4, #0
     e94:	d012      	beq.n	ebc <MiMAC_ReceivedPacket+0x274>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
     e96:	001a      	movs	r2, r3
     e98:	4942      	ldr	r1, [pc, #264]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     e9a:	234e      	movs	r3, #78	; 0x4e
     e9c:	4358      	muls	r0, r3
     e9e:	180b      	adds	r3, r1, r0
     ea0:	791c      	ldrb	r4, [r3, #4]
     ea2:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
     ea4:	795b      	ldrb	r3, [r3, #5]
     ea6:	7453      	strb	r3, [r2, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
     ea8:	180b      	adds	r3, r1, r0
     eaa:	330d      	adds	r3, #13
     eac:	6053      	str	r3, [r2, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
     eae:	5c43      	ldrb	r3, [r0, r1]
     eb0:	3b13      	subs	r3, #19
     eb2:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
     eb4:	1808      	adds	r0, r1, r0
     eb6:	3010      	adds	r0, #16
     eb8:	6090      	str	r0, [r2, #8]
     eba:	e0e4      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>
            }
#ifndef TARGET_SMALL
            else {
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
     ebc:	4a3a      	ldr	r2, [pc, #232]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     ebe:	4939      	ldr	r1, [pc, #228]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     ec0:	234e      	movs	r3, #78	; 0x4e
     ec2:	4358      	muls	r0, r3
     ec4:	180b      	adds	r3, r1, r0
     ec6:	7b5c      	ldrb	r4, [r3, #13]
     ec8:	7414      	strb	r4, [r2, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
     eca:	7b9b      	ldrb	r3, [r3, #14]
     ecc:	7453      	strb	r3, [r2, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
     ece:	180b      	adds	r3, r1, r0
     ed0:	330f      	adds	r3, #15
     ed2:	6053      	str	r3, [r2, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
     ed4:	5c43      	ldrb	r3, [r0, r1]
     ed6:	3b15      	subs	r3, #21
     ed8:	7313      	strb	r3, [r2, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
     eda:	1808      	adds	r0, r1, r0
     edc:	3012      	adds	r0, #18
     ede:	6090      	str	r0, [r2, #8]
     ee0:	e0d1      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>
#endif
        } break;

        case 0x08: //dest-short, source-none
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
     ee2:	234e      	movs	r3, #78	; 0x4e
     ee4:	436b      	muls	r3, r5
     ee6:	4a2f      	ldr	r2, [pc, #188]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     ee8:	18d3      	adds	r3, r2, r3
     eea:	799b      	ldrb	r3, [r3, #6]
     eec:	2bff      	cmp	r3, #255	; 0xff
     eee:	d10a      	bne.n	f06 <MiMAC_ReceivedPacket+0x2be>
     ef0:	3bb1      	subs	r3, #177	; 0xb1
     ef2:	436b      	muls	r3, r5
     ef4:	18d3      	adds	r3, r2, r3
     ef6:	79db      	ldrb	r3, [r3, #7]
     ef8:	2bff      	cmp	r3, #255	; 0xff
     efa:	d104      	bne.n	f06 <MiMAC_ReceivedPacket+0x2be>
                MACRxPacket.flags.bits.broadcast = 1;
     efc:	4a2a      	ldr	r2, [pc, #168]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     efe:	7811      	ldrb	r1, [r2, #0]
     f00:	2304      	movs	r3, #4
     f02:	430b      	orrs	r3, r1
     f04:	7013      	strb	r3, [r2, #0]
            }
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
     f06:	4a28      	ldr	r2, [pc, #160]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     f08:	4926      	ldr	r1, [pc, #152]	; (fa4 <MiMAC_ReceivedPacket+0x35c>)
     f0a:	234e      	movs	r3, #78	; 0x4e
     f0c:	4358      	muls	r0, r3
     f0e:	5c43      	ldrb	r3, [r0, r1]
     f10:	3b0a      	subs	r3, #10
     f12:	7313      	strb	r3, [r2, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
     f14:	1808      	adds	r0, r1, r0
     f16:	3008      	adds	r0, #8
     f18:	6090      	str	r0, [r2, #8]
        } break;
     f1a:	e0b4      	b.n	1086 <MiMAC_ReceivedPacket+0x43e>

        // all other addressing mode will not be supported in P2P
        default:
            // not valid addressing mode or no addressing info
            MiMAC_DiscardPacket();
     f1c:	4b23      	ldr	r3, [pc, #140]	; (fac <MiMAC_ReceivedPacket+0x364>)
     f1e:	4798      	blx	r3
            return false;
     f20:	2000      	movs	r0, #0
     f22:	e0ca      	b.n	10ba <MiMAC_ReceivedPacket+0x472>
#ifdef ENABLE_SECURITY
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
            API_UINT32_UNION FrameCounter;

            if (addrMode < 0xC0) {
                MiMAC_DiscardPacket();
     f24:	4b21      	ldr	r3, [pc, #132]	; (fac <MiMAC_ReceivedPacket+0x364>)
     f26:	4798      	blx	r3
                return false;
     f28:	e07a      	b.n	1020 <MiMAC_ReceivedPacket+0x3d8>
            }

            FrameCounter.v[0] = MACRxPacket.Payload[0];
     f2a:	4b1f      	ldr	r3, [pc, #124]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     f2c:	689b      	ldr	r3, [r3, #8]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
     f2e:	785a      	ldrb	r2, [r3, #1]
     f30:	0212      	lsls	r2, r2, #8
     f32:	7819      	ldrb	r1, [r3, #0]
     f34:	4311      	orrs	r1, r2
     f36:	4688      	mov	r8, r1
            FrameCounter.v[2] = MACRxPacket.Payload[2];
     f38:	789a      	ldrb	r2, [r3, #2]
     f3a:	0412      	lsls	r2, r2, #16
     f3c:	491c      	ldr	r1, [pc, #112]	; (fb0 <MiMAC_ReceivedPacket+0x368>)
     f3e:	4640      	mov	r0, r8
     f40:	4001      	ands	r1, r0
     f42:	4311      	orrs	r1, r2
            FrameCounter.v[3] = MACRxPacket.Payload[3];
     f44:	78db      	ldrb	r3, [r3, #3]
     f46:	061b      	lsls	r3, r3, #24
     f48:	020a      	lsls	r2, r1, #8
     f4a:	0a12      	lsrs	r2, r2, #8
     f4c:	431a      	orrs	r2, r3
     f4e:	4690      	mov	r8, r2
     f50:	4d18      	ldr	r5, [pc, #96]	; (fb4 <MiMAC_ReceivedPacket+0x36c>)
     f52:	2400      	movs	r4, #0

            for (i = 0; i < CONNECTION_SIZE; i++) {
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
     f54:	002f      	movs	r7, r5
     f56:	4b14      	ldr	r3, [pc, #80]	; (fa8 <MiMAC_ReceivedPacket+0x360>)
     f58:	469a      	mov	sl, r3
     f5a:	b2e6      	uxtb	r6, r4
     f5c:	00e3      	lsls	r3, r4, #3
     f5e:	191b      	adds	r3, r3, r4
     f60:	18fb      	adds	r3, r7, r3
     f62:	7a1b      	ldrb	r3, [r3, #8]
     f64:	09db      	lsrs	r3, r3, #7
     f66:	d006      	beq.n	f76 <MiMAC_ReceivedPacket+0x32e>
     f68:	4653      	mov	r3, sl
     f6a:	6859      	ldr	r1, [r3, #4]
     f6c:	0028      	movs	r0, r5
     f6e:	4b12      	ldr	r3, [pc, #72]	; (fb8 <MiMAC_ReceivedPacket+0x370>)
     f70:	4798      	blx	r3
     f72:	2800      	cmp	r0, #0
     f74:	d104      	bne.n	f80 <MiMAC_ReceivedPacket+0x338>
     f76:	3401      	adds	r4, #1
     f78:	3509      	adds	r5, #9
            FrameCounter.v[0] = MACRxPacket.Payload[0];
            FrameCounter.v[1] = MACRxPacket.Payload[1];
            FrameCounter.v[2] = MACRxPacket.Payload[2];
            FrameCounter.v[3] = MACRxPacket.Payload[3];

            for (i = 0; i < CONNECTION_SIZE; i++) {
     f7a:	2c14      	cmp	r4, #20
     f7c:	d1ed      	bne.n	f5a <MiMAC_ReceivedPacket+0x312>
     f7e:	e023      	b.n	fc8 <MiMAC_ReceivedPacket+0x380>
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
                    break;
                }
            }

            if (i < CONNECTION_SIZE) {
     f80:	2e13      	cmp	r6, #19
     f82:	d821      	bhi.n	fc8 <MiMAC_ReceivedPacket+0x380>
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
     f84:	23ff      	movs	r3, #255	; 0xff
     f86:	401c      	ands	r4, r3
     f88:	00a2      	lsls	r2, r4, #2
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <MiMAC_ReceivedPacket+0x374>)
     f8c:	58d3      	ldr	r3, [r2, r3]
     f8e:	4543      	cmp	r3, r8
     f90:	d916      	bls.n	fc0 <MiMAC_ReceivedPacket+0x378>
                    MiMAC_DiscardPacket();
     f92:	4b06      	ldr	r3, [pc, #24]	; (fac <MiMAC_ReceivedPacket+0x364>)
     f94:	4798      	blx	r3
                    return false;
     f96:	e043      	b.n	1020 <MiMAC_ReceivedPacket+0x3d8>
     f98:	20000394 	.word	0x20000394
     f9c:	20000134 	.word	0x20000134
     fa0:	20000020 	.word	0x20000020
     fa4:	200002dc 	.word	0x200002dc
     fa8:	20000450 	.word	0x20000450
     fac:	00000c2d 	.word	0x00000c2d
     fb0:	ff00ffff 	.word	0xff00ffff
     fb4:	2000039c 	.word	0x2000039c
     fb8:	0000130d 	.word	0x0000130d
     fbc:	2000046c 	.word	0x2000046c
                }
                else {
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
     fc0:	00a4      	lsls	r4, r4, #2
     fc2:	4b40      	ldr	r3, [pc, #256]	; (10c4 <MiMAC_ReceivedPacket+0x47c>)
     fc4:	4642      	mov	r2, r8
     fc6:	50e2      	str	r2, [r4, r3]
                }
            }

            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
     fc8:	493f      	ldr	r1, [pc, #252]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
     fca:	7b0b      	ldrb	r3, [r1, #12]
     fcc:	3b05      	subs	r3, #5
     fce:	b2db      	uxtb	r3, r3
     fd0:	730b      	strb	r3, [r1, #12]

            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
     fd2:	6888      	ldr	r0, [r1, #8]
     fd4:	18c3      	adds	r3, r0, r3
     fd6:	785c      	ldrb	r4, [r3, #1]
     fd8:	4a3c      	ldr	r2, [pc, #240]	; (10cc <MiMAC_ReceivedPacket+0x484>)
     fda:	7014      	strb	r4, [r2, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
     fdc:	789c      	ldrb	r4, [r3, #2]
     fde:	7054      	strb	r4, [r2, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
     fe0:	78dc      	ldrb	r4, [r3, #3]
     fe2:	7094      	strb	r4, [r2, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
     fe4:	791b      	ldrb	r3, [r3, #4]
     fe6:	70d3      	strb	r3, [r2, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
     fe8:	684a      	ldr	r2, [r1, #4]
     fea:	310c      	adds	r1, #12
     fec:	3005      	adds	r0, #5
     fee:	4b38      	ldr	r3, [pc, #224]	; (10d0 <MiMAC_ReceivedPacket+0x488>)
     ff0:	781c      	ldrb	r4, [r3, #0]
     ff2:	234e      	movs	r3, #78	; 0x4e
     ff4:	4363      	muls	r3, r4
     ff6:	4c37      	ldr	r4, [pc, #220]	; (10d4 <MiMAC_ReceivedPacket+0x48c>)
     ff8:	18e3      	adds	r3, r4, r3
     ffa:	785b      	ldrb	r3, [r3, #1]
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	4643      	mov	r3, r8
    1000:	4c35      	ldr	r4, [pc, #212]	; (10d8 <MiMAC_ReceivedPacket+0x490>)
    1002:	47a0      	blx	r4
    1004:	2800      	cmp	r0, #0
    1006:	d102      	bne.n	100e <MiMAC_ReceivedPacket+0x3c6>
                MiMAC_DiscardPacket();
    1008:	4b34      	ldr	r3, [pc, #208]	; (10dc <MiMAC_ReceivedPacket+0x494>)
    100a:	4798      	blx	r3
                return false;
    100c:	e008      	b.n	1020 <MiMAC_ReceivedPacket+0x3d8>
            }

            // remove the security header from the payload
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    100e:	4b2e      	ldr	r3, [pc, #184]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
    1010:	689a      	ldr	r2, [r3, #8]
    1012:	3205      	adds	r2, #5
    1014:	609a      	str	r2, [r3, #8]
            MACRxPacket.flags.bits.secEn = 1;
    1016:	7819      	ldrb	r1, [r3, #0]
    1018:	2208      	movs	r2, #8
    101a:	430a      	orrs	r2, r1
    101c:	701a      	strb	r2, [r3, #0]
    101e:	e001      	b.n	1024 <MiMAC_ReceivedPacket+0x3dc>
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
            API_UINT32_UNION FrameCounter;

            if (addrMode < 0xC0) {
                MiMAC_DiscardPacket();
                return false;
    1020:	2000      	movs	r0, #0
    1022:	e04a      	b.n	10ba <MiMAC_ReceivedPacket+0x472>
#endif

        // check the frame type. Only the data and command frame type
        // are supported. Acknowledgement frame type is handled in
        // AT96RF233 transceiver hardware.
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    1024:	4b2a      	ldr	r3, [pc, #168]	; (10d0 <MiMAC_ReceivedPacket+0x488>)
    1026:	781a      	ldrb	r2, [r3, #0]
    1028:	234e      	movs	r3, #78	; 0x4e
    102a:	4353      	muls	r3, r2
    102c:	4a29      	ldr	r2, [pc, #164]	; (10d4 <MiMAC_ReceivedPacket+0x48c>)
    102e:	18d3      	adds	r3, r2, r3
    1030:	785b      	ldrb	r3, [r3, #1]
    1032:	2207      	movs	r2, #7
    1034:	4013      	ands	r3, r2
    1036:	2b01      	cmp	r3, #1
    1038:	d004      	beq.n	1044 <MiMAC_ReceivedPacket+0x3fc>
    103a:	2b00      	cmp	r3, #0
    103c:	d010      	beq.n	1060 <MiMAC_ReceivedPacket+0x418>
    103e:	2b03      	cmp	r3, #3
    1040:	d006      	beq.n	1050 <MiMAC_ReceivedPacket+0x408>
    1042:	e013      	b.n	106c <MiMAC_ReceivedPacket+0x424>
        {
        case 0x01: // data frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    1044:	4a20      	ldr	r2, [pc, #128]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
    1046:	7813      	ldrb	r3, [r2, #0]
    1048:	2103      	movs	r1, #3
    104a:	438b      	bics	r3, r1
    104c:	7013      	strb	r3, [r2, #0]
            break;
    104e:	e011      	b.n	1074 <MiMAC_ReceivedPacket+0x42c>
        case 0x03: // command frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    1050:	491d      	ldr	r1, [pc, #116]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
    1052:	780b      	ldrb	r3, [r1, #0]
    1054:	2203      	movs	r2, #3
    1056:	4393      	bics	r3, r2
    1058:	2201      	movs	r2, #1
    105a:	4313      	orrs	r3, r2
    105c:	700b      	strb	r3, [r1, #0]
            break;
    105e:	e009      	b.n	1074 <MiMAC_ReceivedPacket+0x42c>
        case 0x00:
            // use reserved packet type to represent beacon packet
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    1060:	4a19      	ldr	r2, [pc, #100]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
    1062:	7811      	ldrb	r1, [r2, #0]
    1064:	2303      	movs	r3, #3
    1066:	430b      	orrs	r3, r1
    1068:	7013      	strb	r3, [r2, #0]
            break;
    106a:	e003      	b.n	1074 <MiMAC_ReceivedPacket+0x42c>
        default: // not support frame type
            MiMAC_DiscardPacket();
    106c:	4b1b      	ldr	r3, [pc, #108]	; (10dc <MiMAC_ReceivedPacket+0x494>)
    106e:	4798      	blx	r3
            return false;
    1070:	2000      	movs	r0, #0
    1072:	e022      	b.n	10ba <MiMAC_ReceivedPacket+0x472>
        }
#ifndef TARGET_SMALL
        MACRxPacket.LQIValue = Received_LQI_Val;
    1074:	4b14      	ldr	r3, [pc, #80]	; (10c8 <MiMAC_ReceivedPacket+0x480>)
    1076:	4a1a      	ldr	r2, [pc, #104]	; (10e0 <MiMAC_ReceivedPacket+0x498>)
    1078:	7812      	ldrb	r2, [r2, #0]
    107a:	739a      	strb	r2, [r3, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
    107c:	4a19      	ldr	r2, [pc, #100]	; (10e4 <MiMAC_ReceivedPacket+0x49c>)
    107e:	7812      	ldrb	r2, [r2, #0]
    1080:	735a      	strb	r2, [r3, #13]
#endif

        return true;
    1082:	2001      	movs	r0, #1
    1084:	e019      	b.n	10ba <MiMAC_ReceivedPacket+0x472>
            MiMAC_DiscardPacket();
            return false;
        }

#ifdef ENABLE_SECURITY
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    1086:	4b12      	ldr	r3, [pc, #72]	; (10d0 <MiMAC_ReceivedPacket+0x488>)
    1088:	781a      	ldrb	r2, [r3, #0]
    108a:	234e      	movs	r3, #78	; 0x4e
    108c:	4353      	muls	r3, r2
    108e:	4a11      	ldr	r2, [pc, #68]	; (10d4 <MiMAC_ReceivedPacket+0x48c>)
    1090:	18d3      	adds	r3, r2, r3
    1092:	785b      	ldrb	r3, [r3, #1]
    1094:	071b      	lsls	r3, r3, #28
    1096:	d5c5      	bpl.n	1024 <MiMAC_ReceivedPacket+0x3dc>
    1098:	e744      	b.n	f24 <MiMAC_ReceivedPacket+0x2dc>
    109a:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <MiMAC_ReceivedPacket+0x488>)
    109c:	781a      	ldrb	r2, [r3, #0]
    109e:	234e      	movs	r3, #78	; 0x4e
    10a0:	4353      	muls	r3, r2
    10a2:	4a0c      	ldr	r2, [pc, #48]	; (10d4 <MiMAC_ReceivedPacket+0x48c>)
    10a4:	18d3      	adds	r3, r2, r3
    10a6:	785b      	ldrb	r3, [r3, #1]
    10a8:	071b      	lsls	r3, r3, #28
    10aa:	d500      	bpl.n	10ae <MiMAC_ReceivedPacket+0x466>
    10ac:	e73d      	b.n	f2a <MiMAC_ReceivedPacket+0x2e2>
    10ae:	e7b9      	b.n	1024 <MiMAC_ReceivedPacket+0x3dc>
    }

    BankIndex = 0xFF;
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
            BankIndex = i;
    10b0:	2200      	movs	r2, #0
    10b2:	4b07      	ldr	r3, [pc, #28]	; (10d0 <MiMAC_ReceivedPacket+0x488>)
    10b4:	701a      	strb	r2, [r3, #0]
            failureCounter++;
        }
    }

    BankIndex = 0xFF;
    for (i = 0; i < BANK_SIZE; i++) {
    10b6:	2500      	movs	r5, #0
    10b8:	e5f5      	b.n	ca6 <MiMAC_ReceivedPacket+0x5e>
#endif

        return true;
    }
    return false;
}
    10ba:	b003      	add	sp, #12
    10bc:	bc0c      	pop	{r2, r3}
    10be:	4690      	mov	r8, r2
    10c0:	469a      	mov	sl, r3
    10c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c4:	2000046c 	.word	0x2000046c
    10c8:	20000450 	.word	0x20000450
    10cc:	2000038c 	.word	0x2000038c
    10d0:	20000020 	.word	0x20000020
    10d4:	200002dc 	.word	0x200002dc
    10d8:	00000729 	.word	0x00000729
    10dc:	00000c2d 	.word	0x00000c2d
    10e0:	20000295 	.word	0x20000295
    10e4:	200002c8 	.word	0x200002c8

000010e8 <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    10e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ea:	b083      	sub	sp, #12
    if (PHY_STATE_SLEEP == phyState) {
    10ec:	4b3a      	ldr	r3, [pc, #232]	; (11d8 <PHY_PacketReceieved+0xf0>)
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	2b02      	cmp	r3, #2
    10f2:	d06f      	beq.n	11d4 <PHY_PacketReceieved+0xec>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
    10f4:	200f      	movs	r0, #15
    10f6:	4b39      	ldr	r3, [pc, #228]	; (11dc <PHY_PacketReceieved+0xf4>)
    10f8:	4798      	blx	r3
void PHY_PacketReceieved(void)
{
    if (PHY_STATE_SLEEP == phyState) {
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    10fa:	0703      	lsls	r3, r0, #28
    10fc:	d56a      	bpl.n	11d4 <PHY_PacketReceieved+0xec>
        if (PHY_STATE_IDLE == phyState) {
    10fe:	4b36      	ldr	r3, [pc, #216]	; (11d8 <PHY_PacketReceieved+0xf0>)
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	2b01      	cmp	r3, #1
    1104:	d14a      	bne.n	119c <PHY_PacketReceieved+0xb4>
            uint8_t size, i, RxBank = 0xFF;

            for (i = 0; i < BANK_SIZE; i++) {
                if (RxBuffer[i].PayloadLen == 0) {
    1106:	4b36      	ldr	r3, [pc, #216]	; (11e0 <PHY_PacketReceieved+0xf8>)
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	d007      	beq.n	111e <PHY_PacketReceieved+0x36>
    110e:	234e      	movs	r3, #78	; 0x4e
    1110:	4a33      	ldr	r2, [pc, #204]	; (11e0 <PHY_PacketReceieved+0xf8>)
    1112:	5cd3      	ldrb	r3, [r2, r3]
    1114:	2b00      	cmp	r3, #0
    1116:	d005      	beq.n	1124 <PHY_PacketReceieved+0x3c>
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
        if (PHY_STATE_IDLE == phyState) {
            uint8_t size, i, RxBank = 0xFF;

            for (i = 0; i < BANK_SIZE; i++) {
    1118:	2402      	movs	r4, #2
    if (PHY_STATE_SLEEP == phyState) {
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
        if (PHY_STATE_IDLE == phyState) {
            uint8_t size, i, RxBank = 0xFF;
    111a:	26ff      	movs	r6, #255	; 0xff
    111c:	e004      	b.n	1128 <PHY_PacketReceieved+0x40>

            for (i = 0; i < BANK_SIZE; i++) {
                if (RxBuffer[i].PayloadLen == 0) {
    111e:	2400      	movs	r4, #0
    1120:	2600      	movs	r6, #0
    1122:	e001      	b.n	1128 <PHY_PacketReceieved+0x40>
    1124:	2401      	movs	r4, #1
    1126:	2601      	movs	r6, #1
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
    1128:	2007      	movs	r0, #7
    112a:	4b2c      	ldr	r3, [pc, #176]	; (11dc <PHY_PacketReceieved+0xf4>)
    112c:	4798      	blx	r3
                if (RxBuffer[i].PayloadLen == 0) {
                    RxBank = i;
                    break;
                }
            }
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
    112e:	385b      	subs	r0, #91	; 0x5b
    1130:	4b2c      	ldr	r3, [pc, #176]	; (11e4 <PHY_PacketReceieved+0xfc>)
    1132:	7018      	strb	r0, [r3, #0]

            trx_frame_read(&size, 1);
    1134:	466b      	mov	r3, sp
    1136:	1ddd      	adds	r5, r3, #7
    1138:	2101      	movs	r1, #1
    113a:	0028      	movs	r0, r5
    113c:	4f2a      	ldr	r7, [pc, #168]	; (11e8 <PHY_PacketReceieved+0x100>)
    113e:	47b8      	blx	r7

            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
    1140:	7829      	ldrb	r1, [r5, #0]
    1142:	3105      	adds	r1, #5
    1144:	b2c9      	uxtb	r1, r1
    1146:	4829      	ldr	r0, [pc, #164]	; (11ec <PHY_PacketReceieved+0x104>)
    1148:	47b8      	blx	r7
            RxBuffer[RxBank].PayloadLen = size + 2;
    114a:	7829      	ldrb	r1, [r5, #0]
    114c:	1c8b      	adds	r3, r1, #2
    114e:	b2db      	uxtb	r3, r3
    1150:	204e      	movs	r0, #78	; 0x4e
    1152:	4346      	muls	r6, r0
    1154:	4822      	ldr	r0, [pc, #136]	; (11e0 <PHY_PacketReceieved+0xf8>)
    1156:	5433      	strb	r3, [r6, r0]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
    1158:	2b4c      	cmp	r3, #76	; 0x4c
    115a:	d811      	bhi.n	1180 <PHY_PacketReceieved+0x98>
                //indicate that data is now stored in the buffer
                trx_status.bits.RX_BUFFERED = 1;
    115c:	4824      	ldr	r0, [pc, #144]	; (11f0 <PHY_PacketReceieved+0x108>)
    115e:	7804      	ldrb	r4, [r0, #0]
    1160:	2320      	movs	r3, #32
    1162:	4323      	orrs	r3, r4
    1164:	7003      	strb	r3, [r0, #0]

                //copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
                for (i = 1; i <= size + 2; i++) {
    1166:	3102      	adds	r1, #2
    1168:	2301      	movs	r3, #1
    116a:	2401      	movs	r4, #1
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    116c:	4a1c      	ldr	r2, [pc, #112]	; (11e0 <PHY_PacketReceieved+0xf8>)
    116e:	1990      	adds	r0, r2, r6
    1170:	4d1e      	ldr	r5, [pc, #120]	; (11ec <PHY_PacketReceieved+0x104>)
    1172:	5cea      	ldrb	r2, [r5, r3]
    1174:	54c2      	strb	r2, [r0, r3]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
                //indicate that data is now stored in the buffer
                trx_status.bits.RX_BUFFERED = 1;

                //copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
                for (i = 1; i <= size + 2; i++) {
    1176:	3401      	adds	r4, #1
    1178:	b2e4      	uxtb	r4, r4
    117a:	1e23      	subs	r3, r4, #0
    117c:	428b      	cmp	r3, r1
    117e:	ddf8      	ble.n	1172 <PHY_PacketReceieved+0x8a>
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
                }
            }
            Received_LQI_Val = phyRxBuffer[i - 2];
    1180:	4b1a      	ldr	r3, [pc, #104]	; (11ec <PHY_PacketReceieved+0x104>)
    1182:	191c      	adds	r4, r3, r4
    1184:	3c02      	subs	r4, #2
    1186:	7822      	ldrb	r2, [r4, #0]
    1188:	4b1a      	ldr	r3, [pc, #104]	; (11f4 <PHY_PacketReceieved+0x10c>)
    118a:	701a      	strb	r2, [r3, #0]
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
    118c:	4d13      	ldr	r5, [pc, #76]	; (11dc <PHY_PacketReceieved+0xf4>)

/*************************************************************************/ /**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    118e:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
    1190:	2001      	movs	r0, #1
    1192:	47a8      	blx	r5

/*************************************************************************/ /**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    1194:	4020      	ands	r0, r4
    1196:	2816      	cmp	r0, #22
    1198:	d1fa      	bne.n	1190 <PHY_PacketReceieved+0xa8>
    119a:	e01b      	b.n	11d4 <PHY_PacketReceieved+0xec>
            }
            Received_LQI_Val = phyRxBuffer[i - 2];

            phyWaitState(TRX_STATUS_RX_AACK_ON);
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
    119c:	2b03      	cmp	r3, #3
    119e:	d119      	bne.n	11d4 <PHY_PacketReceieved+0xec>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    uint8_t value;

    value = trx_reg_read(reg);
    11a0:	2002      	movs	r0, #2
    11a2:	4b0e      	ldr	r3, [pc, #56]	; (11dc <PHY_PacketReceieved+0xf4>)
    11a4:	4798      	blx	r3
            phyWaitState(TRX_STATUS_RX_AACK_ON);
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
            uint8_t status
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
            trx_status.bits.TX_FAIL = 0;
    11a6:	4b12      	ldr	r3, [pc, #72]	; (11f0 <PHY_PacketReceieved+0x108>)
    11a8:	781a      	ldrb	r2, [r3, #0]
    11aa:	2104      	movs	r1, #4
    11ac:	438a      	bics	r2, r1
    11ae:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
    11b0:	781a      	ldrb	r2, [r3, #0]
    11b2:	3902      	subs	r1, #2
    11b4:	438a      	bics	r2, r1
    11b6:	701a      	strb	r2, [r3, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    11b8:	0940      	lsrs	r0, r0, #5
    11ba:	b2c0      	uxtb	r0, r0
    11bc:	2805      	cmp	r0, #5
    11be:	d104      	bne.n	11ca <PHY_PacketReceieved+0xe2>
            else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status) {
                status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
            }
            else if (TRAC_STATUS_NO_ACK == status) {
                status = PHY_STATUS_NO_ACK;
                trx_status.bits.TX_FAIL = 1;
    11c0:	001a      	movs	r2, r3
    11c2:	7819      	ldrb	r1, [r3, #0]
    11c4:	2304      	movs	r3, #4
    11c6:	430b      	orrs	r3, r1
    11c8:	7013      	strb	r3, [r2, #0]
            }
            else {
                status = PHY_STATUS_ERROR;
            }

            phySetRxState();
    11ca:	4b0b      	ldr	r3, [pc, #44]	; (11f8 <PHY_PacketReceieved+0x110>)
    11cc:	4798      	blx	r3
            phyState = PHY_STATE_IDLE;
    11ce:	2201      	movs	r2, #1
    11d0:	4b01      	ldr	r3, [pc, #4]	; (11d8 <PHY_PacketReceieved+0xf0>)
    11d2:	701a      	strb	r2, [r3, #0]
        }
    }
    11d4:	b003      	add	sp, #12
    11d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d8:	200000b0 	.word	0x200000b0
    11dc:	000040b1 	.word	0x000040b1
    11e0:	200002dc 	.word	0x200002dc
    11e4:	200002c8 	.word	0x200002c8
    11e8:	000042ad 	.word	0x000042ad
    11ec:	200000b4 	.word	0x200000b4
    11f0:	20000394 	.word	0x20000394
    11f4:	20000295 	.word	0x20000295
    11f8:	000002a1 	.word	0x000002a1

000011fc <Total_Connections>:
/************************ VARIABLES ********************************/
uint8_t myLongAddress[8];

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    11fc:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    11fe:	2000      	movs	r0, #0
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
    1200:	4906      	ldr	r1, [pc, #24]	; (121c <Total_Connections+0x20>)
    1202:	00d3      	lsls	r3, r2, #3
    1204:	189b      	adds	r3, r3, r2
    1206:	18cb      	adds	r3, r1, r3
    1208:	7a1b      	ldrb	r3, [r3, #8]
    120a:	09db      	lsrs	r3, r3, #7
    120c:	d001      	beq.n	1212 <Total_Connections+0x16>
        {
            count++;
    120e:	3001      	adds	r0, #1
    1210:	b2c0      	uxtb	r0, r0
    1212:	3201      	adds	r2, #1

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    uint8_t count=0 , i;
    for (i=0;i<CONNECTION_SIZE;i++)
    1214:	2a14      	cmp	r2, #20
    1216:	d1f4      	bne.n	1202 <Total_Connections+0x6>
            count++;
        }
    #endif      
    }
    return count;
}
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	2000039c 	.word	0x2000039c

00001220 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	464f      	mov	r7, r9
    1224:	4646      	mov	r6, r8
    1226:	b4c0      	push	{r6, r7}
    1228:	b089      	sub	sp, #36	; 0x24
    122a:	9203      	str	r2, [sp, #12]
    122c:	ac10      	add	r4, sp, #64	; 0x40
    122e:	7827      	ldrb	r7, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    1230:	ad05      	add	r5, sp, #20
    1232:	2400      	movs	r4, #0
    1234:	46a0      	mov	r8, r4
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
    1236:	3401      	adds	r4, #1
    1238:	4044      	eors	r4, r0
    123a:	2601      	movs	r6, #1
    123c:	46b1      	mov	r9, r6
    123e:	4034      	ands	r4, r6
    1240:	0162      	lsls	r2, r4, #5
    1242:	3602      	adds	r6, #2
    1244:	401e      	ands	r6, r3
    tParam.flags.bits.broadcast = Broadcast;
    1246:	464b      	mov	r3, r9
    1248:	4003      	ands	r3, r0
    124a:	009b      	lsls	r3, r3, #2
    124c:	4332      	orrs	r2, r6
    tParam.flags.bits.secEn = SecurityEnabled;
    124e:	464e      	mov	r6, r9
    1250:	4037      	ands	r7, r6
    1252:	00ff      	lsls	r7, r7, #3
    1254:	4313      	orrs	r3, r2
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    1256:	4646      	mov	r6, r8
    1258:	726e      	strb	r6, [r5, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    125a:	7228      	strb	r0, [r5, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    125c:	01a0      	lsls	r0, r4, #6
    125e:	433b      	orrs	r3, r7
    1260:	001c      	movs	r4, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    1262:	4304      	orrs	r4, r0
    1264:	2380      	movs	r3, #128	; 0x80
    1266:	425b      	negs	r3, r3
    1268:	431c      	orrs	r4, r3
    126a:	702c      	strb	r4, [r5, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    126c:	8169      	strh	r1, [r5, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    126e:	4c07      	ldr	r4, [pc, #28]	; (128c <SendPacket+0x6c>)
    1270:	7823      	ldrb	r3, [r4, #0]
    1272:	9300      	str	r3, [sp, #0]
    1274:	4b06      	ldr	r3, [pc, #24]	; (1290 <SendPacket+0x70>)
    1276:	9805      	ldr	r0, [sp, #20]
    1278:	9903      	ldr	r1, [sp, #12]
    127a:	9a07      	ldr	r2, [sp, #28]
    127c:	4d05      	ldr	r5, [pc, #20]	; (1294 <SendPacket+0x74>)
    127e:	47a8      	blx	r5
    TxData = 0;
    1280:	7026      	strb	r6, [r4, #0]
    
    return status;
}
    1282:	b009      	add	sp, #36	; 0x24
    1284:	bc0c      	pop	{r2, r3}
    1286:	4690      	mov	r8, r2
    1288:	4699      	mov	r9, r3
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    128c:	200004c1 	.word	0x200004c1
    1290:	200004c4 	.word	0x200004c4
    1294:	00000889 	.word	0x00000889

00001298 <MiApp_BroadcastPacket>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
bool MiApp_BroadcastPacket( INPUT bool SecEn )
{
    1298:	b510      	push	{r4, lr}
    129a:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(true, myPANID, NULL, false, SecEn);
    129c:	4b04      	ldr	r3, [pc, #16]	; (12b0 <MiApp_BroadcastPacket+0x18>)
    129e:	8819      	ldrh	r1, [r3, #0]
    12a0:	9000      	str	r0, [sp, #0]
    12a2:	2300      	movs	r3, #0
    12a4:	2200      	movs	r2, #0
    12a6:	2001      	movs	r0, #1
    12a8:	4c02      	ldr	r4, [pc, #8]	; (12b4 <MiApp_BroadcastPacket+0x1c>)
    12aa:	47a0      	blx	r4
    #else
        return SendPacket(true, NULL, false, SecEn);
    #endif
}
    12ac:	b002      	add	sp, #8
    12ae:	bd10      	pop	{r4, pc}
    12b0:	20000468 	.word	0x20000468
    12b4:	00001221 	.word	0x00001221

000012b8 <MiApp_UnicastAddress>:
 *
 *****************************************************************************************/    
bool MiApp_UnicastAddress(INPUT uint8_t *DestinationAddress,
                    INPUT bool PermanentAddr,
                    INPUT bool SecEn)
{
    12b8:	b510      	push	{r4, lr}
    12ba:	b082      	sub	sp, #8
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(false, myPANID, DestinationAddress, false, SecEn);
    12bc:	4b04      	ldr	r3, [pc, #16]	; (12d0 <MiApp_UnicastAddress+0x18>)
    12be:	8819      	ldrh	r1, [r3, #0]
    12c0:	9200      	str	r2, [sp, #0]
    12c2:	2300      	movs	r3, #0
    12c4:	0002      	movs	r2, r0
    12c6:	2000      	movs	r0, #0
    12c8:	4c02      	ldr	r4, [pc, #8]	; (12d4 <MiApp_UnicastAddress+0x1c>)
    12ca:	47a0      	blx	r4
    #else
        return SendPacket(false, DestinationAddress, false, SecEn);
    #endif
}
    12cc:	b002      	add	sp, #8
    12ce:	bd10      	pop	{r4, pc}
    12d0:	20000468 	.word	0x20000468
    12d4:	00001221 	.word	0x00001221

000012d8 <MiApp_UnicastConnection>:
 *      None
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    12d8:	b510      	push	{r4, lr}
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    12da:	00c3      	lsls	r3, r0, #3
    12dc:	181b      	adds	r3, r3, r0
    12de:	4a09      	ldr	r2, [pc, #36]	; (1304 <MiApp_UnicastConnection+0x2c>)
    12e0:	18d3      	adds	r3, r2, r3
    12e2:	7a1b      	ldrb	r3, [r3, #8]
    12e4:	09db      	lsrs	r3, r3, #7
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    }
    return false;
    12e6:	2200      	movs	r2, #0
 *
 *****************************************************************************************/  
bool MiApp_UnicastConnection( INPUT uint8_t ConnectionIndex,
                        INPUT bool SecEn)
{
    if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    12e8:	2b00      	cmp	r3, #0
    12ea:	d008      	beq.n	12fe <MiApp_UnicastConnection+0x26>
                P2PStatus.bits.Enhanced_DR_SecEn = SecEn;
                return true;
            }    
        #endif
        
        return MiApp_UnicastAddress(ConnectionTable[ConnectionIndex].Address, true, SecEn);
    12ec:	00c3      	lsls	r3, r0, #3
    12ee:	1818      	adds	r0, r3, r0
    12f0:	4b04      	ldr	r3, [pc, #16]	; (1304 <MiApp_UnicastConnection+0x2c>)
    12f2:	18c0      	adds	r0, r0, r3
    12f4:	000a      	movs	r2, r1
    12f6:	2101      	movs	r1, #1
    12f8:	4b03      	ldr	r3, [pc, #12]	; (1308 <MiApp_UnicastConnection+0x30>)
    12fa:	4798      	blx	r3
    12fc:	0002      	movs	r2, r0
    }
    return false;
}
    12fe:	0010      	movs	r0, r2
    1300:	bd10      	pop	{r4, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	2000039c 	.word	0x2000039c
    1308:	000012b9 	.word	0x000012b9

0000130c <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    130c:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    130e:	7802      	ldrb	r2, [r0, #0]
    1310:	780b      	ldrb	r3, [r1, #0]
    1312:	429a      	cmp	r2, r3
    1314:	d10c      	bne.n	1330 <isSameAddress+0x24>
    1316:	1c43      	adds	r3, r0, #1
    1318:	3101      	adds	r1, #1
    131a:	3008      	adds	r0, #8
    131c:	781c      	ldrb	r4, [r3, #0]
    131e:	780a      	ldrb	r2, [r1, #0]
    1320:	4294      	cmp	r4, r2
    1322:	d107      	bne.n	1334 <isSameAddress+0x28>
    1324:	3301      	adds	r3, #1
    1326:	3101      	adds	r1, #1
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    1328:	4283      	cmp	r3, r0
    132a:	d1f7      	bne.n	131c <isSameAddress+0x10>
        if( Address1[i] != Address2[i] )
        {
            return false;
        }
    }
    return true;
    132c:	2001      	movs	r0, #1
    132e:	e002      	b.n	1336 <isSameAddress+0x2a>
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
        {
            return false;
    1330:	2000      	movs	r0, #0
    1332:	e000      	b.n	1336 <isSameAddress+0x2a>
    1334:	2000      	movs	r0, #0
        }
    }
    return true;
}
    1336:	bd10      	pop	{r4, pc}

00001338 <MiApp_StartConnection>:

#if defined(ENABLE_HAND_SHAKE)
     
    bool MiApp_StartConnection(uint8_t Mode, uint8_t ScanDuration, uint32_t ChannelMap)
    {
    1338:	b500      	push	{lr}
    133a:	b083      	sub	sp, #12
		#if defined(PROTOCOL_STAR)
			role = PanCoordinator;
		#endif
        switch(Mode)
    133c:	2800      	cmp	r0, #0
    133e:	d10b      	bne.n	1358 <MiApp_StartConnection+0x20>
                #if defined(IEEE_802_15_4)
                    #if MY_PAN_ID == 0xFFFF
                        myPANID.v[0] = get_timer_counter_value();
                        myPANID.v[1] = myPANID.v[0]+0x51;
                    #else
                        myPANID.Val = MY_PAN_ID;
    1340:	4907      	ldr	r1, [pc, #28]	; (1360 <MiApp_StartConnection+0x28>)
    1342:	4b08      	ldr	r3, [pc, #32]	; (1364 <MiApp_StartConnection+0x2c>)
    1344:	800b      	strh	r3, [r1, #0]
                    #endif
                    {
                        uint16_t tmp = 0xFFFF;
    1346:	466b      	mov	r3, sp
    1348:	1d98      	adds	r0, r3, #6
    134a:	2301      	movs	r3, #1
    134c:	425b      	negs	r3, r3
    134e:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    1350:	4b05      	ldr	r3, [pc, #20]	; (1368 <MiApp_StartConnection+0x30>)
    1352:	4798      	blx	r3
                #endif
            #if defined(PROTOCOL_STAR)
                tick1.Val = MiWi_TickGet();
                tick4.Val = MiWi_TickGet();
            #endif
                return true;
    1354:	2001      	movs	r0, #1
    1356:	e000      	b.n	135a <MiApp_StartConnection+0x22>
                        TimeSyncTick.Val = MiWi_TickGet();
                    #endif
                    return true;
                }
                #else
                    return false;
    1358:	2000      	movs	r0, #0
            
            default:
                break;
        }    
        return false;
    }
    135a:	b003      	add	sp, #12
    135c:	bd00      	pop	{pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	20000468 	.word	0x20000468
    1364:	00001234 	.word	0x00001234
    1368:	0000045d 	.word	0x0000045d

0000136c <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
    136c:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    136e:	4a04      	ldr	r2, [pc, #16]	; (1380 <MiApp_DiscardMessage+0x14>)
    1370:	7813      	ldrb	r3, [r2, #0]
    1372:	2108      	movs	r1, #8
    1374:	438b      	bics	r3, r1
    1376:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    1378:	4b02      	ldr	r3, [pc, #8]	; (1384 <MiApp_DiscardMessage+0x18>)
    137a:	4798      	blx	r3
}
    137c:	bd10      	pop	{r4, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	200004c0 	.word	0x200004c0
    1384:	00000c2d 	.word	0x00000c2d

00001388 <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
    1388:	b510      	push	{r4, lr}
    138a:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    138c:	2100      	movs	r1, #0
    138e:	4b03      	ldr	r3, [pc, #12]	; (139c <MiApp_SetChannel+0x14>)
    1390:	4798      	blx	r3
    1392:	2800      	cmp	r0, #0
    1394:	d001      	beq.n	139a <MiApp_SetChannel+0x12>
    {
        currentChannel = channel;
    1396:	4b02      	ldr	r3, [pc, #8]	; (13a0 <MiApp_SetChannel+0x18>)
    1398:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    139a:	bd10      	pop	{r4, pc}
    139c:	00000865 	.word	0x00000865
    13a0:	20000136 	.word	0x20000136

000013a4 <MiApp_ProtocolInit>:
}

uint32_t addr1 =  0x0080A00C;

bool MiApp_ProtocolInit(bool bNetworkFreezer)
{
    13a4:	b570      	push	{r4, r5, r6, lr}
    13a6:	b084      	sub	sp, #16
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
    13a8:	2200      	movs	r2, #0
    13aa:	4b38      	ldr	r3, [pc, #224]	; (148c <MiApp_ProtocolInit+0xe8>)
    13ac:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (uint32_t *)0x0080A00C;
	val_1 = *ptr1;
    13ae:	4b38      	ldr	r3, [pc, #224]	; (1490 <MiApp_ProtocolInit+0xec>)
    13b0:	681d      	ldr	r5, [r3, #0]
	uint32_t *ptr = (uint32_t *)0x0080A040;
	val_2 = *ptr;
    13b2:	4b38      	ldr	r3, [pc, #224]	; (1494 <MiApp_ProtocolInit+0xf0>)
    13b4:	681c      	ldr	r4, [r3, #0]
	ptr++;
	val_3 = *ptr;
    13b6:	4b38      	ldr	r3, [pc, #224]	; (1498 <MiApp_ProtocolInit+0xf4>)
    13b8:	6819      	ldr	r1, [r3, #0]
	ptr++;
	val_4 = *ptr;
    13ba:	4b38      	ldr	r3, [pc, #224]	; (149c <MiApp_ProtocolInit+0xf8>)
    13bc:	681a      	ldr	r2, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    13be:	4b38      	ldr	r3, [pc, #224]	; (14a0 <MiApp_ProtocolInit+0xfc>)
    13c0:	0a2e      	lsrs	r6, r5, #8
    13c2:	1976      	adds	r6, r6, r5
    13c4:	701e      	strb	r6, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    13c6:	0c2e      	lsrs	r6, r5, #16
    13c8:	0e2d      	lsrs	r5, r5, #24
    13ca:	1975      	adds	r5, r6, r5
    13cc:	705d      	strb	r5, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    13ce:	0a25      	lsrs	r5, r4, #8
    13d0:	192d      	adds	r5, r5, r4
    13d2:	709d      	strb	r5, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    13d4:	0c25      	lsrs	r5, r4, #16
    13d6:	0e24      	lsrs	r4, r4, #24
    13d8:	192c      	adds	r4, r5, r4
    13da:	70dc      	strb	r4, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    13dc:	0a0c      	lsrs	r4, r1, #8
    13de:	1864      	adds	r4, r4, r1
    13e0:	711c      	strb	r4, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    13e2:	0c0c      	lsrs	r4, r1, #16
    13e4:	0e09      	lsrs	r1, r1, #24
    13e6:	1861      	adds	r1, r4, r1
    13e8:	7159      	strb	r1, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    13ea:	0a11      	lsrs	r1, r2, #8
    13ec:	1889      	adds	r1, r1, r2
    13ee:	7199      	strb	r1, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    13f0:	0c11      	lsrs	r1, r2, #16
    13f2:	0e12      	lsrs	r2, r2, #24
    13f4:	188a      	adds	r2, r1, r2
    13f6:	71da      	strb	r2, [r3, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
    13f8:	2800      	cmp	r0, #0
    13fa:	d10a      	bne.n	1412 <MiApp_ProtocolInit+0x6e>
    13fc:	4b29      	ldr	r3, [pc, #164]	; (14a4 <MiApp_ProtocolInit+0x100>)
    13fe:	0019      	movs	r1, r3
    1400:	31b4      	adds	r1, #180	; 0xb4
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    1402:	2200      	movs	r2, #0
    1404:	721a      	strb	r2, [r3, #8]
			ConnectionTable[i].Address[0] = 0x00;
    1406:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[1] = 0x00;
    1408:	705a      	strb	r2, [r3, #1]
			ConnectionTable[i].Address[2] = 0x00;
    140a:	709a      	strb	r2, [r3, #2]
    140c:	3309      	adds	r3, #9
	#endif

	
	if (!bNetworkFreezer)
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
    140e:	428b      	cmp	r3, r1
    1410:	d1f8      	bne.n	1404 <MiApp_ProtocolInit+0x60>
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
    1412:	2200      	movs	r2, #0
    1414:	4b24      	ldr	r3, [pc, #144]	; (14a8 <MiApp_ProtocolInit+0x104>)
    1416:	701a      	strb	r2, [r3, #0]
    1418:	4b24      	ldr	r3, [pc, #144]	; (14ac <MiApp_ProtocolInit+0x108>)
    141a:	0019      	movs	r1, r3
    141c:	3150      	adds	r1, #80	; 0x50
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
	{
		IncomingFrameCounter[i].Val = 0;
    141e:	c304      	stmia	r3!, {r2}
		indirectMessages[i].flags.Val = 0;
	}
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
    1420:	4299      	cmp	r1, r3
    1422:	d1fc      	bne.n	141e <MiApp_ProtocolInit+0x7a>
	}
	#endif
	

	#if defined(IEEE_802_15_4)
	myPANID.Val = MY_PAN_ID;
    1424:	4c22      	ldr	r4, [pc, #136]	; (14b0 <MiApp_ProtocolInit+0x10c>)
    1426:	4b23      	ldr	r3, [pc, #140]	; (14b4 <MiApp_ProtocolInit+0x110>)
    1428:	8023      	strh	r3, [r4, #0]
	#endif

	
	initValue.PAddress = myLongAddress;
    142a:	aa02      	add	r2, sp, #8
	initValue.actionFlags.bits.CCAEnable = 1;
    142c:	7815      	ldrb	r5, [r2, #0]
    142e:	2302      	movs	r3, #2
    1430:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    1432:	2387      	movs	r3, #135	; 0x87
    1434:	401d      	ands	r5, r3
    1436:	2340      	movs	r3, #64	; 0x40
    1438:	431d      	orrs	r5, r3
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    143a:	2301      	movs	r3, #1
    143c:	4018      	ands	r0, r3
    143e:	0083      	lsls	r3, r0, #2
    1440:	21c3      	movs	r1, #195	; 0xc3
    1442:	0028      	movs	r0, r5
    1444:	4008      	ands	r0, r1
	initValue.actionFlags.bits.RepeaterMode = 0;
    1446:	4318      	orrs	r0, r3
    1448:	2301      	movs	r3, #1
    144a:	4398      	bics	r0, r3
    144c:	7010      	strb	r0, [r2, #0]

	MiMAC_Init(initValue);
    144e:	9802      	ldr	r0, [sp, #8]
    1450:	4913      	ldr	r1, [pc, #76]	; (14a0 <MiApp_ProtocolInit+0xfc>)
    1452:	4b19      	ldr	r3, [pc, #100]	; (14b8 <MiApp_ProtocolInit+0x114>)
    1454:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
    1456:	466b      	mov	r3, sp
    1458:	1d98      	adds	r0, r3, #6
    145a:	2301      	movs	r3, #1
    145c:	425b      	negs	r3, r3
    145e:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    1460:	0021      	movs	r1, r4
    1462:	4b16      	ldr	r3, [pc, #88]	; (14bc <MiApp_ProtocolInit+0x118>)
    1464:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
    1466:	4b16      	ldr	r3, [pc, #88]	; (14c0 <MiApp_ProtocolInit+0x11c>)
    1468:	7818      	ldrb	r0, [r3, #0]
    146a:	4b16      	ldr	r3, [pc, #88]	; (14c4 <MiApp_ProtocolInit+0x120>)
    146c:	4798      	blx	r3
	P2PCapacityInfo |= 0x01;
	#endif
	#if defined(ENABLE_SECURITY)
	P2PCapacityInfo |= 0x08;
	#endif
	P2PCapacityInfo |= (ConnMode << 4);
    146e:	4b16      	ldr	r3, [pc, #88]	; (14c8 <MiApp_ProtocolInit+0x124>)
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	011b      	lsls	r3, r3, #4
    1474:	2209      	movs	r2, #9
    1476:	4313      	orrs	r3, r2
    1478:	4a14      	ldr	r2, [pc, #80]	; (14cc <MiApp_ProtocolInit+0x128>)
    147a:	7013      	strb	r3, [r2, #0]
	ENABLE_TRX_IRQ();
    147c:	2100      	movs	r1, #0
    147e:	2000      	movs	r0, #0
    1480:	4b13      	ldr	r3, [pc, #76]	; (14d0 <MiApp_ProtocolInit+0x12c>)
    1482:	4798      	blx	r3
	return true;
}
    1484:	2001      	movs	r0, #1
    1486:	b004      	add	sp, #16
    1488:	bd70      	pop	{r4, r5, r6, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	200004c0 	.word	0x200004c0
    1490:	0080a00c 	.word	0x0080a00c
    1494:	0080a040 	.word	0x0080a040
    1498:	0080a044 	.word	0x0080a044
    149c:	0080a048 	.word	0x0080a048
    14a0:	200004ec 	.word	0x200004ec
    14a4:	2000039c 	.word	0x2000039c
    14a8:	200004c1 	.word	0x200004c1
    14ac:	2000046c 	.word	0x2000046c
    14b0:	20000468 	.word	0x20000468
    14b4:	00001234 	.word	0x00001234
    14b8:	00000bb1 	.word	0x00000bb1
    14bc:	0000045d 	.word	0x0000045d
    14c0:	20000136 	.word	0x20000136
    14c4:	00001389 	.word	0x00001389
    14c8:	20000021 	.word	0x20000021
    14cc:	20000464 	.word	0x20000464
    14d0:	00001ea1 	.word	0x00001ea1

000014d4 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	4657      	mov	r7, sl
    14d8:	464e      	mov	r6, r9
    14da:	b4c0      	push	{r6, r7}
    14dc:	b083      	sub	sp, #12
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    14de:	4b2f      	ldr	r3, [pc, #188]	; (159c <AddConnection+0xc8>)
    14e0:	685b      	ldr	r3, [r3, #4]
    14e2:	9301      	str	r3, [sp, #4]
    14e4:	4d2e      	ldr	r5, [pc, #184]	; (15a0 <AddConnection+0xcc>)
    14e6:	2400      	movs	r4, #0
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
        uint8_t connectionSlot = 0xFF;
    14e8:	26ff      	movs	r6, #255	; 0xff
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    14ea:	46a9      	mov	r9, r5
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    14ec:	4b2d      	ldr	r3, [pc, #180]	; (15a4 <AddConnection+0xd0>)
    14ee:	469a      	mov	sl, r3
    14f0:	b2e7      	uxtb	r7, r4
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
    14f2:	00e3      	lsls	r3, r4, #3
    14f4:	191b      	adds	r3, r3, r4
    14f6:	444b      	add	r3, r9
    14f8:	7a1b      	ldrb	r3, [r3, #8]
    14fa:	09db      	lsrs	r3, r3, #7
    14fc:	d005      	beq.n	150a <AddConnection+0x36>
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    14fe:	0029      	movs	r1, r5
    1500:	9801      	ldr	r0, [sp, #4]
    1502:	47d0      	blx	sl
    1504:	2800      	cmp	r0, #0
    1506:	d003      	beq.n	1510 <AddConnection+0x3c>
    1508:	e008      	b.n	151c <AddConnection+0x48>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    150a:	2eff      	cmp	r6, #255	; 0xff
    150c:	d100      	bne.n	1510 <AddConnection+0x3c>
    150e:	003e      	movs	r6, r7
    1510:	3401      	adds	r4, #1
    1512:	3509      	adds	r5, #9
                return STATUS_ACTIVE_SCAN;
            }
        #endif
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
    1514:	2c14      	cmp	r4, #20
    1516:	d1eb      	bne.n	14f0 <AddConnection+0x1c>
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
    1518:	2400      	movs	r4, #0
    151a:	e001      	b.n	1520 <AddConnection+0x4c>
    151c:	003e      	movs	r6, r7
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
                {
                    connectionSlot = i;
                    status = STATUS_EXISTS;
    151e:	2401      	movs	r4, #1
            }  
        }
            
        if( connectionSlot == 0xFF )
        {
            return STATUS_NOT_ENOUGH_SPACE;
    1520:	20f1      	movs	r0, #241	; 0xf1
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    1522:	2eff      	cmp	r6, #255	; 0xff
    1524:	d034      	beq.n	1590 <AddConnection+0xbc>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    1526:	4b20      	ldr	r3, [pc, #128]	; (15a8 <AddConnection+0xd4>)
    1528:	781b      	ldrb	r3, [r3, #0]
            {
                return status;
    152a:	0020      	movs	r0, r4
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    152c:	2b00      	cmp	r3, #0
    152e:	d12f      	bne.n	1590 <AddConnection+0xbc>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    1530:	4b1e      	ldr	r3, [pc, #120]	; (15ac <AddConnection+0xd8>)
    1532:	701e      	strb	r6, [r3, #0]
    1534:	00f0      	lsls	r0, r6, #3
    1536:	1980      	adds	r0, r0, r6
    1538:	4b19      	ldr	r3, [pc, #100]	; (15a0 <AddConnection+0xcc>)
    153a:	18c0      	adds	r0, r0, r3
    153c:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    153e:	9a01      	ldr	r2, [sp, #4]
    1540:	5cd2      	ldrb	r2, [r2, r3]
    1542:	54c2      	strb	r2, [r0, r3]
    1544:	3301      	adds	r3, #1
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
            // store the source address
            for(i = 0; i < 8; i++)
    1546:	2b08      	cmp	r3, #8
    1548:	d1f9      	bne.n	153e <AddConnection+0x6a>
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    154a:	00f3      	lsls	r3, r6, #3
    154c:	199b      	adds	r3, r3, r6
    154e:	4a14      	ldr	r2, [pc, #80]	; (15a0 <AddConnection+0xcc>)
    1550:	18d3      	adds	r3, r2, r3
    1552:	7a1a      	ldrb	r2, [r3, #8]
    1554:	2080      	movs	r0, #128	; 0x80
    1556:	4240      	negs	r0, r0
    1558:	4302      	orrs	r2, r0
    155a:	721a      	strb	r2, [r3, #8]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    155c:	4a0f      	ldr	r2, [pc, #60]	; (159c <AddConnection+0xc8>)
    155e:	6892      	ldr	r2, [r2, #8]
    1560:	7892      	ldrb	r2, [r2, #2]
    1562:	3081      	adds	r0, #129	; 0x81
    1564:	4010      	ands	r0, r2
    1566:	7a1a      	ldrb	r2, [r3, #8]
    1568:	2501      	movs	r5, #1
    156a:	43aa      	bics	r2, r5
    156c:	4302      	orrs	r2, r0
    156e:	721a      	strb	r2, [r3, #8]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    1570:	00b1      	lsls	r1, r6, #2
    1572:	2200      	movs	r2, #0
    1574:	4b0e      	ldr	r3, [pc, #56]	; (15b0 <AddConnection+0xdc>)
    1576:	50ca      	str	r2, [r1, r3]
            #endif
            LatestConnection = connectionSlot;
    1578:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <AddConnection+0xe0>)
    157a:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    157c:	4a0e      	ldr	r2, [pc, #56]	; (15b8 <AddConnection+0xe4>)
    157e:	7813      	ldrb	r3, [r2, #0]
    1580:	2110      	movs	r1, #16
    1582:	438b      	bics	r3, r1
    1584:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    1586:	4b0d      	ldr	r3, [pc, #52]	; (15bc <AddConnection+0xe8>)
    1588:	4798      	blx	r3
    158a:	4b0d      	ldr	r3, [pc, #52]	; (15c0 <AddConnection+0xec>)
    158c:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    158e:	0020      	movs	r0, r4
    }
    1590:	b003      	add	sp, #12
    1592:	bc0c      	pop	{r2, r3}
    1594:	4691      	mov	r9, r2
    1596:	469a      	mov	sl, r3
    1598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	200004f4 	.word	0x200004f4
    15a0:	2000039c 	.word	0x2000039c
    15a4:	0000130d 	.word	0x0000130d
    15a8:	20000021 	.word	0x20000021
    15ac:	200004bc 	.word	0x200004bc
    15b0:	2000046c 	.word	0x2000046c
    15b4:	20000398 	.word	0x20000398
    15b8:	200004c0 	.word	0x200004c0
    15bc:	000011fd 	.word	0x000011fd
    15c0:	2000046b 	.word	0x2000046b

000015c4 <P2PTasks>:
 * Side Effects:    The stack receives, handles, buffers, and transmits 
 *                  packets.  It also handles all of the joining 
 * 
 ********************************************************************/
void P2PTasks(void)
{
    15c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c6:	4647      	mov	r7, r8
    15c8:	b480      	push	{r7}
    15ca:	b086      	sub	sp, #24
            TimeSyncSlot = 0;
        }    
    #endif

  // Check if transceiver receive any message.
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    15cc:	4bbc      	ldr	r3, [pc, #752]	; (18c0 <P2PTasks+0x2fc>)
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	071b      	lsls	r3, r3, #28
    15d2:	d500      	bpl.n	15d6 <P2PTasks+0x12>
    15d4:	e170      	b.n	18b8 <P2PTasks+0x2f4>
    15d6:	4bbb      	ldr	r3, [pc, #748]	; (18c4 <P2PTasks+0x300>)
    15d8:	4798      	blx	r3
    15da:	2800      	cmp	r0, #0
    15dc:	d100      	bne.n	15e0 <P2PTasks+0x1c>
    15de:	e16b      	b.n	18b8 <P2PTasks+0x2f4>
    {
        rxMessage.flags.Val = 0;
        //rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
        
            temp_bit = MACRxPacket.flags.bits.broadcast;
    15e0:	4bb9      	ldr	r3, [pc, #740]	; (18c8 <P2PTasks+0x304>)
    15e2:	7819      	ldrb	r1, [r3, #0]
    15e4:	074a      	lsls	r2, r1, #29
    15e6:	0fd2      	lsrs	r2, r2, #31
    15e8:	4bb8      	ldr	r3, [pc, #736]	; (18cc <P2PTasks+0x308>)
    15ea:	701a      	strb	r2, [r3, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    15ec:	2303      	movs	r3, #3

        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    15ee:	08cc      	lsrs	r4, r1, #3
    15f0:	2501      	movs	r5, #1
    15f2:	402c      	ands	r4, r5
    15f4:	00e4      	lsls	r4, r4, #3
    15f6:	0010      	movs	r0, r2
    15f8:	4018      	ands	r0, r3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    15fa:	400b      	ands	r3, r1
    15fc:	001a      	movs	r2, r3
    15fe:	3a01      	subs	r2, #1
    1600:	4253      	negs	r3, r2
    1602:	415a      	adcs	r2, r3
    1604:	402a      	ands	r2, r5
    1606:	0152      	lsls	r2, r2, #5
    1608:	0003      	movs	r3, r0
    160a:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    160c:	09c8      	lsrs	r0, r1, #7
    160e:	4028      	ands	r0, r5
    1610:	0180      	lsls	r0, r0, #6
    1612:	4313      	orrs	r3, r2
    1614:	4303      	orrs	r3, r0
    1616:	4aae      	ldr	r2, [pc, #696]	; (18d0 <P2PTasks+0x30c>)
    1618:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    161a:	09c9      	lsrs	r1, r1, #7
    161c:	d003      	beq.n	1626 <P2PTasks+0x62>
        {
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    161e:	4baa      	ldr	r3, [pc, #680]	; (18c8 <P2PTasks+0x304>)
    1620:	685a      	ldr	r2, [r3, #4]
    1622:	4bab      	ldr	r3, [pc, #684]	; (18d0 <P2PTasks+0x30c>)
    1624:	605a      	str	r2, [r3, #4]
        }
        #if defined(IEEE_802_15_4) && !defined(TARGET_SMALL)
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    1626:	4aa8      	ldr	r2, [pc, #672]	; (18c8 <P2PTasks+0x304>)
    1628:	8a10      	ldrh	r0, [r2, #16]
    162a:	4ba9      	ldr	r3, [pc, #676]	; (18d0 <P2PTasks+0x30c>)
    162c:	8058      	strh	r0, [r3, #2]
        #endif

        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    162e:	7b14      	ldrb	r4, [r2, #12]
    1630:	731c      	strb	r4, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    1632:	6891      	ldr	r1, [r2, #8]
    1634:	6099      	str	r1, [r3, #8]
               
        
        /************************/
      
        #ifndef TARGET_SMALL
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    1636:	7b95      	ldrb	r5, [r2, #14]
    1638:	739d      	strb	r5, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    163a:	7b52      	ldrb	r2, [r2, #13]
    163c:	735a      	strb	r2, [r3, #13]
        #endif

        if( rxMessage.flags.bits.command )
    163e:	781b      	ldrb	r3, [r3, #0]
    1640:	069b      	lsls	r3, r3, #26
    1642:	d400      	bmi.n	1646 <P2PTasks+0x82>
    1644:	e10a      	b.n	185c <P2PTasks+0x298>
        {
            // if comes here, we know it is a command frame
            switch( rxMessage.Payload[0] )
    1646:	780b      	ldrb	r3, [r1, #0]
    1648:	337f      	adds	r3, #127	; 0x7f
    164a:	b2da      	uxtb	r2, r3
    164c:	2a16      	cmp	r2, #22
    164e:	d900      	bls.n	1652 <P2PTasks+0x8e>
    1650:	e0fe      	b.n	1850 <P2PTasks+0x28c>
    1652:	0093      	lsls	r3, r2, #2
    1654:	4a9f      	ldr	r2, [pc, #636]	; (18d4 <P2PTasks+0x310>)
    1656:	58d3      	ldr	r3, [r2, r3]
    1658:	469f      	mov	pc, r3
                                
                                uint8_t status = STATUS_SUCCESS;
                                
                                // if channel does not math, it may be a 
                                // sub-harmonics signal, ignore the request
                                if( currentChannel != rxMessage.Payload[1] )
    165a:	784a      	ldrb	r2, [r1, #1]
    165c:	4b9e      	ldr	r3, [pc, #632]	; (18d8 <P2PTasks+0x314>)
    165e:	781b      	ldrb	r3, [r3, #0]
    1660:	429a      	cmp	r2, r3
    1662:	d002      	beq.n	166a <P2PTasks+0xa6>
                                {
                                    MiMAC_DiscardPacket();
    1664:	4b9d      	ldr	r3, [pc, #628]	; (18dc <P2PTasks+0x318>)
    1666:	4798      	blx	r3
                                    break;
    1668:	e0fd      	b.n	1866 <P2PTasks+0x2a2>
                                }
                                
                                // if new connection is not allowed, ignore 
                                // the request
                                if( ConnMode == DISABLE_ALL_CONN )
    166a:	4b9d      	ldr	r3, [pc, #628]	; (18e0 <P2PTasks+0x31c>)
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	2b03      	cmp	r3, #3
    1670:	d102      	bne.n	1678 <P2PTasks+0xb4>
                                { 
                                    MiMAC_DiscardPacket();
    1672:	4b9a      	ldr	r3, [pc, #616]	; (18dc <P2PTasks+0x318>)
    1674:	4798      	blx	r3
                                    break;
    1676:	e0f6      	b.n	1866 <P2PTasks+0x2a2>
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    1678:	4b9a      	ldr	r3, [pc, #616]	; (18e4 <P2PTasks+0x320>)
    167a:	4298      	cmp	r0, r3
    167c:	d006      	beq.n	168c <P2PTasks+0xc8>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    167e:	4b9a      	ldr	r3, [pc, #616]	; (18e8 <P2PTasks+0x324>)
                                    break;
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    1680:	881b      	ldrh	r3, [r3, #0]
    1682:	4283      	cmp	r3, r0
    1684:	d002      	beq.n	168c <P2PTasks+0xc8>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    1686:	2c02      	cmp	r4, #2
    1688:	d900      	bls.n	168c <P2PTasks+0xc8>
    168a:	e10c      	b.n	18a6 <P2PTasks+0x2e2>
                                    else
                                #endif
                                {
                                    // request accepted, try to add the requesting
                                    // device into P2P Connection Entry
                                    status = AddConnection();
    168c:	4b97      	ldr	r3, [pc, #604]	; (18ec <P2PTasks+0x328>)
    168e:	4798      	blx	r3
    1690:	0002      	movs	r2, r0
                                            }

                                        }
                                    }
                                #endif
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    1692:	4b93      	ldr	r3, [pc, #588]	; (18e0 <P2PTasks+0x31c>)
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b01      	cmp	r3, #1
    1698:	d104      	bne.n	16a4 <P2PTasks+0xe0>
    169a:	3801      	subs	r0, #1
    169c:	b2c0      	uxtb	r0, r0
    169e:	2801      	cmp	r0, #1
    16a0:	d900      	bls.n	16a4 <P2PTasks+0xe0>
    16a2:	e0f4      	b.n	188e <P2PTasks+0x2ca>
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    16a4:	4b92      	ldr	r3, [pc, #584]	; (18f0 <P2PTasks+0x32c>)
    16a6:	2191      	movs	r1, #145	; 0x91
    16a8:	7019      	strb	r1, [r3, #0]
                                MiApp_WriteData(status);
    16aa:	705a      	strb	r2, [r3, #1]
                                MiApp_WriteData(MyindexinPC);
    16ac:	2003      	movs	r0, #3
    16ae:	4991      	ldr	r1, [pc, #580]	; (18f4 <P2PTasks+0x330>)
    16b0:	7008      	strb	r0, [r1, #0]
    16b2:	4991      	ldr	r1, [pc, #580]	; (18f8 <P2PTasks+0x334>)
    16b4:	7809      	ldrb	r1, [r1, #0]
    16b6:	7099      	strb	r1, [r3, #2]
                                if( status == STATUS_SUCCESS ||
    16b8:	2a01      	cmp	r2, #1
    16ba:	d806      	bhi.n	16ca <P2PTasks+0x106>
                                    status == STATUS_EXISTS )
                                {
                                    MiApp_WriteData(P2PCapacityInfo);
    16bc:	2204      	movs	r2, #4
    16be:	4b8d      	ldr	r3, [pc, #564]	; (18f4 <P2PTasks+0x330>)
    16c0:	701a      	strb	r2, [r3, #0]
    16c2:	4b8e      	ldr	r3, [pc, #568]	; (18fc <P2PTasks+0x338>)
    16c4:	781a      	ldrb	r2, [r3, #0]
    16c6:	4b8a      	ldr	r3, [pc, #552]	; (18f0 <P2PTasks+0x32c>)
    16c8:	70da      	strb	r2, [r3, #3]
                                            MiApp_WriteData(AdditionalNodeID[i]);
                                        }
                                    #endif
                                }
                                
                                MiMAC_DiscardPacket();
    16ca:	4b84      	ldr	r3, [pc, #528]	; (18dc <P2PTasks+0x318>)
    16cc:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                    #endif
                                #else
                                        
                                    #if defined(IEEE_802_15_4)
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    16ce:	4b80      	ldr	r3, [pc, #512]	; (18d0 <P2PTasks+0x30c>)
    16d0:	685a      	ldr	r2, [r3, #4]
    16d2:	8859      	ldrh	r1, [r3, #2]
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	071b      	lsls	r3, r3, #28
    16d8:	0fdb      	lsrs	r3, r3, #31
    16da:	9300      	str	r3, [sp, #0]
    16dc:	2301      	movs	r3, #1
    16de:	2000      	movs	r0, #0
    16e0:	4c87      	ldr	r4, [pc, #540]	; (1900 <P2PTasks+0x33c>)
    16e2:	47a0      	blx	r4
                                  MiMAC_DiscardPacket();
                              }
							#endif
                              
                        }
                        break; 
    16e4:	e0bf      	b.n	1866 <P2PTasks+0x2a2>
               
                    case CMD_P2P_ACTIVE_SCAN_REQUEST:
                        {
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    16e6:	4b7e      	ldr	r3, [pc, #504]	; (18e0 <P2PTasks+0x31c>)
    16e8:	781b      	ldrb	r3, [r3, #0]
    16ea:	2b02      	cmp	r3, #2
    16ec:	d902      	bls.n	16f4 <P2PTasks+0x130>
                            {
                                MiMAC_DiscardPacket();
    16ee:	4b7b      	ldr	r3, [pc, #492]	; (18dc <P2PTasks+0x318>)
    16f0:	4798      	blx	r3
                                break;
    16f2:	e0b8      	b.n	1866 <P2PTasks+0x2a2>
                            }
                            if( currentChannel != rxMessage.Payload[1] )
    16f4:	784a      	ldrb	r2, [r1, #1]
    16f6:	4b78      	ldr	r3, [pc, #480]	; (18d8 <P2PTasks+0x314>)
    16f8:	781b      	ldrb	r3, [r3, #0]
    16fa:	429a      	cmp	r2, r3
    16fc:	d002      	beq.n	1704 <P2PTasks+0x140>
                            {
                                MiMAC_DiscardPacket();
    16fe:	4b77      	ldr	r3, [pc, #476]	; (18dc <P2PTasks+0x318>)
    1700:	4798      	blx	r3
                                break;
    1702:	e0b0      	b.n	1866 <P2PTasks+0x2a2>
                            }
                            
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    1704:	4b7a      	ldr	r3, [pc, #488]	; (18f0 <P2PTasks+0x32c>)
    1706:	2297      	movs	r2, #151	; 0x97
    1708:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    170a:	2102      	movs	r1, #2
    170c:	4a79      	ldr	r2, [pc, #484]	; (18f4 <P2PTasks+0x330>)
    170e:	7011      	strb	r1, [r2, #0]
    1710:	4a7a      	ldr	r2, [pc, #488]	; (18fc <P2PTasks+0x338>)
    1712:	7812      	ldrb	r2, [r2, #0]
    1714:	705a      	strb	r2, [r3, #1]
                                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                                {
                                    MiApp_WriteData(AdditionalNodeID[i]);
                                }
                            #endif
                            MiMAC_DiscardPacket();
    1716:	4b71      	ldr	r3, [pc, #452]	; (18dc <P2PTasks+0x318>)
    1718:	4798      	blx	r3
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    171a:	4b6d      	ldr	r3, [pc, #436]	; (18d0 <P2PTasks+0x30c>)
    171c:	685a      	ldr	r2, [r3, #4]
    171e:	8859      	ldrh	r1, [r3, #2]
    1720:	781b      	ldrb	r3, [r3, #0]
    1722:	071b      	lsls	r3, r3, #28
    1724:	0fdb      	lsrs	r3, r3, #31
    1726:	9300      	str	r3, [sp, #0]
    1728:	2301      	movs	r3, #1
    172a:	2000      	movs	r0, #0
    172c:	4c74      	ldr	r4, [pc, #464]	; (1900 <P2PTasks+0x33c>)
    172e:	47a0      	blx	r4
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif
                        }
                        break;
    1730:	e099      	b.n	1866 <P2PTasks+0x2a2>
                    
                    #ifndef TARGET_SMALL    
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    1732:	2201      	movs	r2, #1
    1734:	4b6f      	ldr	r3, [pc, #444]	; (18f4 <P2PTasks+0x330>)
    1736:	701a      	strb	r2, [r3, #0]
    1738:	3291      	adds	r2, #145	; 0x91
    173a:	4b6d      	ldr	r3, [pc, #436]	; (18f0 <P2PTasks+0x32c>)
    173c:	701a      	strb	r2, [r3, #0]
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    173e:	4b64      	ldr	r3, [pc, #400]	; (18d0 <P2PTasks+0x30c>)
    1740:	685b      	ldr	r3, [r3, #4]
    1742:	9303      	str	r3, [sp, #12]
    1744:	4e6f      	ldr	r6, [pc, #444]	; (1904 <P2PTasks+0x340>)
    1746:	2400      	movs	r4, #0
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    1748:	2700      	movs	r7, #0
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    174a:	0035      	movs	r5, r6
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    174c:	4b6e      	ldr	r3, [pc, #440]	; (1908 <P2PTasks+0x344>)
    174e:	4698      	mov	r8, r3
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
    1750:	9402      	str	r4, [sp, #8]
    1752:	00e3      	lsls	r3, r4, #3
    1754:	191b      	adds	r3, r3, r4
    1756:	18eb      	adds	r3, r5, r3
    1758:	7a1b      	ldrb	r3, [r3, #8]
    175a:	09db      	lsrs	r3, r3, #7
    175c:	d015      	beq.n	178a <P2PTasks+0x1c6>
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    175e:	0031      	movs	r1, r6
    1760:	9803      	ldr	r0, [sp, #12]
    1762:	47c0      	blx	r8
    1764:	2800      	cmp	r0, #0
    1766:	d010      	beq.n	178a <P2PTasks+0x1c6>
                                    {
                                        // find the record. disable the record and
                                        // set status to be SUCCESS
                                        ConnectionTable[i].status.Val = 0;
    1768:	9a02      	ldr	r2, [sp, #8]
    176a:	00d3      	lsls	r3, r2, #3
    176c:	189d      	adds	r5, r3, r2
    176e:	4b65      	ldr	r3, [pc, #404]	; (1904 <P2PTasks+0x340>)
    1770:	195d      	adds	r5, r3, r5
    1772:	2300      	movs	r3, #0
    1774:	722b      	strb	r3, [r5, #8]
                                        #if defined(ENABLE_NETWORK_FREEZER)
                                            nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                        #endif
                                        MiApp_WriteData(STATUS_SUCCESS);
    1776:	2102      	movs	r1, #2
    1778:	4a5e      	ldr	r2, [pc, #376]	; (18f4 <P2PTasks+0x330>)
    177a:	7011      	strb	r1, [r2, #0]
    177c:	4a5c      	ldr	r2, [pc, #368]	; (18f0 <P2PTasks+0x32c>)
    177e:	7053      	strb	r3, [r2, #1]
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    1780:	4b56      	ldr	r3, [pc, #344]	; (18dc <P2PTasks+0x318>)
    1782:	4798      	blx	r3

                            if( i == CONNECTION_SIZE ) 
    1784:	2f14      	cmp	r7, #20
    1786:	d10e      	bne.n	17a6 <P2PTasks+0x1e2>
    1788:	e006      	b.n	1798 <P2PTasks+0x1d4>
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);

                            for(i = 0; i < CONNECTION_SIZE; i++)
    178a:	3701      	adds	r7, #1
    178c:	b2ff      	uxtb	r7, r7
    178e:	3401      	adds	r4, #1
    1790:	3609      	adds	r6, #9
    1792:	2f14      	cmp	r7, #20
    1794:	d1dc      	bne.n	1750 <P2PTasks+0x18c>
    1796:	e08c      	b.n	18b2 <P2PTasks+0x2ee>
                            MiMAC_DiscardPacket();

                            if( i == CONNECTION_SIZE ) 
                            {
                                // not found, the requesting device is not my peer
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    1798:	4a56      	ldr	r2, [pc, #344]	; (18f4 <P2PTasks+0x330>)
    179a:	7813      	ldrb	r3, [r2, #0]
    179c:	1c59      	adds	r1, r3, #1
    179e:	7011      	strb	r1, [r2, #0]
    17a0:	21f0      	movs	r1, #240	; 0xf0
    17a2:	4a53      	ldr	r2, [pc, #332]	; (18f0 <P2PTasks+0x32c>)
    17a4:	54d1      	strb	r1, [r2, r3]
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    17a6:	4b4a      	ldr	r3, [pc, #296]	; (18d0 <P2PTasks+0x30c>)
    17a8:	685a      	ldr	r2, [r3, #4]
    17aa:	8859      	ldrh	r1, [r3, #2]
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	071b      	lsls	r3, r3, #28
    17b0:	0fdb      	lsrs	r3, r3, #31
    17b2:	9300      	str	r3, [sp, #0]
    17b4:	2301      	movs	r3, #1
    17b6:	2000      	movs	r0, #0
    17b8:	4c51      	ldr	r4, [pc, #324]	; (1900 <P2PTasks+0x33c>)
    17ba:	47a0      	blx	r4
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif

                        }
                            break;
    17bc:	e053      	b.n	1866 <P2PTasks+0x2a2>
                    #endif
                    
                    case CMD_P2P_CONNECTION_RESPONSE:
                        {
                            switch( rxMessage.Payload[1] )
    17be:	784b      	ldrb	r3, [r1, #1]
    17c0:	2b01      	cmp	r3, #1
    17c2:	d811      	bhi.n	17e8 <P2PTasks+0x224>
                            {              
                                case STATUS_SUCCESS:
                                case STATUS_EXISTS:
                                    #if defined(IEEE_802_15_4)
                                        if( myPANID.Val == 0xFFFF )
    17c4:	4b48      	ldr	r3, [pc, #288]	; (18e8 <P2PTasks+0x324>)
    17c6:	881a      	ldrh	r2, [r3, #0]
    17c8:	4b46      	ldr	r3, [pc, #280]	; (18e4 <P2PTasks+0x320>)
    17ca:	429a      	cmp	r2, r3
    17cc:	d10a      	bne.n	17e4 <P2PTasks+0x220>
                                        {
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    17ce:	4946      	ldr	r1, [pc, #280]	; (18e8 <P2PTasks+0x324>)
    17d0:	8008      	strh	r0, [r1, #0]
                                            {
                                                uint16_t tmp = 0xFFFF;
    17d2:	200e      	movs	r0, #14
    17d4:	ab02      	add	r3, sp, #8
    17d6:	469c      	mov	ip, r3
    17d8:	4460      	add	r0, ip
    17da:	2301      	movs	r3, #1
    17dc:	425b      	negs	r3, r3
    17de:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    17e0:	4b4a      	ldr	r3, [pc, #296]	; (190c <P2PTasks+0x348>)
    17e2:	4798      	blx	r3
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutMyPANID(myPANID.v);
                                            #endif
                                        }
                                    #endif
                                    AddConnection();
    17e4:	4b41      	ldr	r3, [pc, #260]	; (18ec <P2PTasks+0x328>)
    17e6:	4798      	blx	r3
                                    break;
                                default:
                                    break;
                            }                        
                        }
                        MiMAC_DiscardPacket();
    17e8:	4b3c      	ldr	r3, [pc, #240]	; (18dc <P2PTasks+0x318>)
    17ea:	4798      	blx	r3
                        break; 
    17ec:	e03b      	b.n	1866 <P2PTasks+0x2a2>
                    
                    
                    case CMD_P2P_ACTIVE_SCAN_RESPONSE:
                        {
                            if( P2PStatus.bits.Resync )
    17ee:	4b34      	ldr	r3, [pc, #208]	; (18c0 <P2PTasks+0x2fc>)
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	069b      	lsls	r3, r3, #26
    17f4:	d504      	bpl.n	1800 <P2PTasks+0x23c>
                            {
                                P2PStatus.bits.Resync = 0;   
    17f6:	4a32      	ldr	r2, [pc, #200]	; (18c0 <P2PTasks+0x2fc>)
    17f8:	7813      	ldrb	r3, [r2, #0]
    17fa:	2120      	movs	r1, #32
    17fc:	438b      	bics	r3, r1
    17fe:	7013      	strb	r3, [r2, #0]
                                        ActiveScanResultIndex++;
                                    }
                                }
                            #endif

                            MiMAC_DiscardPacket(); 
    1800:	4b36      	ldr	r3, [pc, #216]	; (18dc <P2PTasks+0x318>)
    1802:	4798      	blx	r3
                        }
                        break;                
    1804:	e02f      	b.n	1866 <P2PTasks+0x2a2>
                    
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    1806:	784b      	ldrb	r3, [r1, #1]
    1808:	2b00      	cmp	r3, #0
    180a:	d11e      	bne.n	184a <P2PTasks+0x286>
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    180c:	4b30      	ldr	r3, [pc, #192]	; (18d0 <P2PTasks+0x30c>)
    180e:	685b      	ldr	r3, [r3, #4]
    1810:	9303      	str	r3, [sp, #12]
    1812:	4f3c      	ldr	r7, [pc, #240]	; (1904 <P2PTasks+0x340>)
    1814:	2600      	movs	r6, #0
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    1816:	003c      	movs	r4, r7
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1818:	4d3b      	ldr	r5, [pc, #236]	; (1908 <P2PTasks+0x344>)
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
    181a:	9602      	str	r6, [sp, #8]
    181c:	00f3      	lsls	r3, r6, #3
    181e:	199b      	adds	r3, r3, r6
    1820:	18e3      	adds	r3, r4, r3
    1822:	7a1b      	ldrb	r3, [r3, #8]
    1824:	09db      	lsrs	r3, r3, #7
    1826:	d00c      	beq.n	1842 <P2PTasks+0x27e>
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    1828:	0039      	movs	r1, r7
    182a:	9803      	ldr	r0, [sp, #12]
    182c:	47a8      	blx	r5
    182e:	2800      	cmp	r0, #0
    1830:	d007      	beq.n	1842 <P2PTasks+0x27e>
                                        {
                                            // invalidate the record
                                            ConnectionTable[i].status.Val = 0;
    1832:	9a02      	ldr	r2, [sp, #8]
    1834:	00d3      	lsls	r3, r2, #3
    1836:	189c      	adds	r4, r3, r2
    1838:	4b32      	ldr	r3, [pc, #200]	; (1904 <P2PTasks+0x340>)
    183a:	191c      	adds	r4, r3, r4
    183c:	2300      	movs	r3, #0
    183e:	7223      	strb	r3, [r4, #8]
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                            #endif
                                            break;
    1840:	e003      	b.n	184a <P2PTasks+0x286>
    1842:	3601      	adds	r6, #1
    1844:	3709      	adds	r7, #9
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
    1846:	2e14      	cmp	r6, #20
    1848:	d1e7      	bne.n	181a <P2PTasks+0x256>
                                        }
                                    } 
                                }
                            }
                        }
                        MiMAC_DiscardPacket();
    184a:	4b24      	ldr	r3, [pc, #144]	; (18dc <P2PTasks+0x318>)
    184c:	4798      	blx	r3
                        break;
    184e:	e00a      	b.n	1866 <P2PTasks+0x2a2>
                #endif
                
                        
                default:
                    // let upper application layer to handle undefined command frame
                    P2PStatus.bits.RxHasUserData = 1;
    1850:	4a1b      	ldr	r2, [pc, #108]	; (18c0 <P2PTasks+0x2fc>)
    1852:	7811      	ldrb	r1, [r2, #0]
    1854:	2308      	movs	r3, #8
    1856:	430b      	orrs	r3, r1
    1858:	7013      	strb	r3, [r2, #0]
                    break;
    185a:	e004      	b.n	1866 <P2PTasks+0x2a2>
            }
        }
        else
        {
            P2PStatus.bits.RxHasUserData = 1;
    185c:	4a18      	ldr	r2, [pc, #96]	; (18c0 <P2PTasks+0x2fc>)
    185e:	7811      	ldrb	r1, [r2, #0]
    1860:	2308      	movs	r3, #8
    1862:	430b      	orrs	r3, r1
    1864:	7013      	strb	r3, [r2, #0]
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
            {
                P2PStatus.bits.DataRequesting = 0;
            }
        #endif       
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    1866:	4b1a      	ldr	r3, [pc, #104]	; (18d0 <P2PTasks+0x30c>)
    1868:	7b1b      	ldrb	r3, [r3, #12]
    186a:	2b00      	cmp	r3, #0
    186c:	d007      	beq.n	187e <P2PTasks+0x2ba>
    186e:	4b14      	ldr	r3, [pc, #80]	; (18c0 <P2PTasks+0x2fc>)
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	06db      	lsls	r3, r3, #27
    1874:	d403      	bmi.n	187e <P2PTasks+0x2ba>
    1876:	4b12      	ldr	r3, [pc, #72]	; (18c0 <P2PTasks+0x2fc>)
    1878:	781b      	ldrb	r3, [r3, #0]
    187a:	069b      	lsls	r3, r3, #26
    187c:	d51c      	bpl.n	18b8 <P2PTasks+0x2f4>
        {
            P2PStatus.bits.RxHasUserData = 0;
    187e:	4a10      	ldr	r2, [pc, #64]	; (18c0 <P2PTasks+0x2fc>)
    1880:	7813      	ldrb	r3, [r2, #0]
    1882:	2108      	movs	r1, #8
    1884:	438b      	bics	r3, r1
    1886:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    1888:	4b14      	ldr	r3, [pc, #80]	; (18dc <P2PTasks+0x318>)
    188a:	4798      	blx	r3
        }   
            
    }   
}
    188c:	e014      	b.n	18b8 <P2PTasks+0x2f4>
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    188e:	4b18      	ldr	r3, [pc, #96]	; (18f0 <P2PTasks+0x32c>)
    1890:	2291      	movs	r2, #145	; 0x91
    1892:	701a      	strb	r2, [r3, #0]
                                MiApp_WriteData(status);
    1894:	3262      	adds	r2, #98	; 0x62
    1896:	705a      	strb	r2, [r3, #1]
                                MiApp_WriteData(MyindexinPC);
    1898:	2103      	movs	r1, #3
    189a:	4a16      	ldr	r2, [pc, #88]	; (18f4 <P2PTasks+0x330>)
    189c:	7011      	strb	r1, [r2, #0]
    189e:	4a16      	ldr	r2, [pc, #88]	; (18f8 <P2PTasks+0x334>)
    18a0:	7812      	ldrb	r2, [r2, #0]
    18a2:	709a      	strb	r2, [r3, #2]
    18a4:	e711      	b.n	16ca <P2PTasks+0x106>
                                            }

                                        }
                                    }
                                #endif
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    18a6:	4b0e      	ldr	r3, [pc, #56]	; (18e0 <P2PTasks+0x31c>)
    18a8:	781b      	ldrb	r3, [r3, #0]
    18aa:	2b01      	cmp	r3, #1
    18ac:	d0ef      	beq.n	188e <P2PTasks+0x2ca>
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
                                        rxMessage.PayloadSize > 2)
                                    {
                                        status = STATUS_NOT_SAME_PAN;
    18ae:	22f2      	movs	r2, #242	; 0xf2
    18b0:	e6f8      	b.n	16a4 <P2PTasks+0xe0>
                                        break;
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <P2PTasks+0x318>)
    18b4:	4798      	blx	r3
    18b6:	e76f      	b.n	1798 <P2PTasks+0x1d4>
            P2PStatus.bits.RxHasUserData = 0;
            MiMAC_DiscardPacket();
        }   
            
    }   
}
    18b8:	b006      	add	sp, #24
    18ba:	bc04      	pop	{r2}
    18bc:	4690      	mov	r8, r2
    18be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18c0:	200004c0 	.word	0x200004c0
    18c4:	00000c49 	.word	0x00000c49
    18c8:	20000450 	.word	0x20000450
    18cc:	2000046a 	.word	0x2000046a
    18d0:	200004f4 	.word	0x200004f4
    18d4:	00005530 	.word	0x00005530
    18d8:	20000136 	.word	0x20000136
    18dc:	00000c2d 	.word	0x00000c2d
    18e0:	20000021 	.word	0x20000021
    18e4:	0000ffff 	.word	0x0000ffff
    18e8:	20000468 	.word	0x20000468
    18ec:	000014d5 	.word	0x000014d5
    18f0:	200004c4 	.word	0x200004c4
    18f4:	200004c1 	.word	0x200004c1
    18f8:	200004bc 	.word	0x200004bc
    18fc:	20000464 	.word	0x20000464
    1900:	00001221 	.word	0x00001221
    1904:	2000039c 	.word	0x2000039c
    1908:	0000130d 	.word	0x0000130d
    190c:	0000045d 	.word	0x0000045d

00001910 <MiApp_MessageAvailable>:
    return false;
}


bool MiApp_MessageAvailable(void)
{ 
    1910:	b510      	push	{r4, lr}
    P2PTasks(); 
    1912:	4b03      	ldr	r3, [pc, #12]	; (1920 <MiApp_MessageAvailable+0x10>)
    1914:	4798      	blx	r3
    
    return P2PStatus.bits.RxHasUserData;
    1916:	4b03      	ldr	r3, [pc, #12]	; (1924 <MiApp_MessageAvailable+0x14>)
    1918:	7818      	ldrb	r0, [r3, #0]
    191a:	0700      	lsls	r0, r0, #28
    191c:	0fc0      	lsrs	r0, r0, #31
}
    191e:	bd10      	pop	{r4, pc}
    1920:	000015c5 	.word	0x000015c5
    1924:	200004c0 	.word	0x200004c0

00001928 <MiApp_EstablishConnection>:
     *      If more than one connections have been established through this function call, the
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	465f      	mov	r7, fp
    192c:	4656      	mov	r6, sl
    192e:	464d      	mov	r5, r9
    1930:	4644      	mov	r4, r8
    1932:	b4f0      	push	{r4, r5, r6, r7}
    1934:	b083      	sub	sp, #12
        #if defined(PROTOCOL_STAR)
            tick1.Val = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
        {
            return 0xFF;
    1936:	20ff      	movs	r0, #255	; 0xff
        uint8_t    connectionInterval = 0;
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1.Val = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
    1938:	2901      	cmp	r1, #1
    193a:	d053      	beq.n	19e4 <MiApp_EstablishConnection+0xbc>
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
    193c:	4c2d      	ldr	r4, [pc, #180]	; (19f4 <MiApp_EstablishConnection+0xcc>)
    193e:	7823      	ldrb	r3, [r4, #0]
    1940:	469b      	mov	fp, r3
        if( Mode == CONN_MODE_INDIRECT )
        {
            return 0xFF;
        }
       
        t1.Val = MiWi_TickGet();
    1942:	4b2d      	ldr	r3, [pc, #180]	; (19f8 <MiApp_EstablishConnection+0xd0>)
    1944:	4798      	blx	r3

        t1.Val -= (ONE_SECOND);
    1946:	387c      	subs	r0, #124	; 0x7c
    1948:	0006      	movs	r6, r0
        ConnMode = ENABLE_ALL_CONN;
    194a:	2300      	movs	r3, #0
    194c:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    194e:	4a2b      	ldr	r2, [pc, #172]	; (19fc <MiApp_EstablishConnection+0xd4>)
    1950:	7811      	ldrb	r1, [r2, #0]
    1952:	2310      	movs	r3, #16
    1954:	430b      	orrs	r3, r1
    1956:	7013      	strb	r3, [r2, #0]
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
        uint8_t    connectionInterval = 0;
    1958:	2500      	movs	r5, #0
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
        uint8_t    tmpConnectionMode = ConnMode;
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    195a:	2703      	movs	r7, #3
        t1.Val = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    195c:	4690      	mov	r8, r2
        {
            t2.Val = MiWi_TickGet();
    195e:	4b26      	ldr	r3, [pc, #152]	; (19f8 <MiApp_EstablishConnection+0xd0>)
    1960:	4699      	mov	r9, r3
}


bool MiApp_MessageAvailable(void)
{ 
    P2PTasks(); 
    1962:	4b27      	ldr	r3, [pc, #156]	; (1a00 <MiApp_EstablishConnection+0xd8>)
    1964:	469a      	mov	sl, r3
        t1.Val = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    1966:	e034      	b.n	19d2 <MiApp_EstablishConnection+0xaa>
        {
            t2.Val = MiWi_TickGet();
    1968:	47c8      	blx	r9
    196a:	0004      	movs	r4, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    196c:	1b83      	subs	r3, r0, r6
    196e:	2b7c      	cmp	r3, #124	; 0x7c
    1970:	d928      	bls.n	19c4 <MiApp_EstablishConnection+0x9c>
            {   
                t1.Val = t2.Val;

                if( connectionInterval-- > 0 )
    1972:	2d00      	cmp	r5, #0
    1974:	d003      	beq.n	197e <MiApp_EstablishConnection+0x56>
    1976:	3d01      	subs	r5, #1
    1978:	b2ed      	uxtb	r5, r5
        while( P2PStatus.bits.SearchConnection )
        {
            t2.Val = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    197a:	0006      	movs	r6, r0
    197c:	e029      	b.n	19d2 <MiApp_EstablishConnection+0xaa>
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    197e:	1e7d      	subs	r5, r7, #1
    1980:	b2ed      	uxtb	r5, r5
    1982:	2f00      	cmp	r7, #0
    1984:	d106      	bne.n	1994 <MiApp_EstablishConnection+0x6c>
                {

                    P2PStatus.bits.SearchConnection = 0;
    1986:	4a1d      	ldr	r2, [pc, #116]	; (19fc <MiApp_EstablishConnection+0xd4>)
    1988:	7813      	ldrb	r3, [r2, #0]
    198a:	2110      	movs	r1, #16
    198c:	438b      	bics	r3, r1
    198e:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    1990:	20ff      	movs	r0, #255	; 0xff
    1992:	e027      	b.n	19e4 <MiApp_EstablishConnection+0xbc>
                }
                MiApp_FlushTx();
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    1994:	4b1b      	ldr	r3, [pc, #108]	; (1a04 <MiApp_EstablishConnection+0xdc>)
    1996:	2281      	movs	r2, #129	; 0x81
    1998:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    199a:	4a1b      	ldr	r2, [pc, #108]	; (1a08 <MiApp_EstablishConnection+0xe0>)
    199c:	7812      	ldrb	r2, [r2, #0]
    199e:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    19a0:	2103      	movs	r1, #3
    19a2:	4a1a      	ldr	r2, [pc, #104]	; (1a0c <MiApp_EstablishConnection+0xe4>)
    19a4:	7011      	strb	r1, [r2, #0]
    19a6:	4a1a      	ldr	r2, [pc, #104]	; (1a10 <MiApp_EstablishConnection+0xe8>)
    19a8:	7812      	ldrb	r2, [r2, #0]
    19aa:	709a      	strb	r2, [r3, #2]
                        {
                            MiApp_SetChannel( ActiveScanResults[ActiveScanIndex].Channel );
                            SendPacket(false, ActiveScanResults[ActiveScanIndex].PANID, ActiveScanResults[ActiveScanIndex].Address, true, false);
                        }
                    #else
                        SendPacket(true, myPANID, NULL, true, false);
    19ac:	4b19      	ldr	r3, [pc, #100]	; (1a14 <MiApp_EstablishConnection+0xec>)
    19ae:	8819      	ldrh	r1, [r3, #0]
    19b0:	2300      	movs	r3, #0
    19b2:	9300      	str	r3, [sp, #0]
    19b4:	3301      	adds	r3, #1
    19b6:	2200      	movs	r2, #0
    19b8:	2001      	movs	r0, #1
    19ba:	4e17      	ldr	r6, [pc, #92]	; (1a18 <MiApp_EstablishConnection+0xf0>)
    19bc:	47b0      	blx	r6
        while( P2PStatus.bits.SearchConnection )
        {
            t2.Val = MiWi_TickGet();
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
            {   
                t1.Val = t2.Val;
    19be:	0026      	movs	r6, r4
                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
                if( retry-- == 0 )
    19c0:	002f      	movs	r7, r5

                if( connectionInterval-- > 0 )
                {
                    continue;
                }
                connectionInterval = CONNECTION_INTERVAL-1;
    19c2:	2501      	movs	r5, #1
}


bool MiApp_MessageAvailable(void)
{ 
    P2PTasks(); 
    19c4:	47d0      	blx	sl
    
    return P2PStatus.bits.RxHasUserData;
    19c6:	4b0d      	ldr	r3, [pc, #52]	; (19fc <MiApp_EstablishConnection+0xd4>)
    19c8:	781b      	ldrb	r3, [r3, #0]
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
    19ca:	071b      	lsls	r3, r3, #28
    19cc:	d501      	bpl.n	19d2 <MiApp_EstablishConnection+0xaa>
            {
                MiApp_DiscardMessage();
    19ce:	4b13      	ldr	r3, [pc, #76]	; (1a1c <MiApp_EstablishConnection+0xf4>)
    19d0:	4798      	blx	r3
        t1.Val = MiWi_TickGet();

        t1.Val -= (ONE_SECOND);
        ConnMode = ENABLE_ALL_CONN;
        P2PStatus.bits.SearchConnection = 1;
        while( P2PStatus.bits.SearchConnection )
    19d2:	4643      	mov	r3, r8
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	06db      	lsls	r3, r3, #27
    19d8:	d4c6      	bmi.n	1968 <MiApp_EstablishConnection+0x40>
                MiApp_DiscardMessage();
            }     
            //P2PTasks();
        }
      
        ConnMode = tmpConnectionMode;
    19da:	4b06      	ldr	r3, [pc, #24]	; (19f4 <MiApp_EstablishConnection+0xcc>)
    19dc:	465a      	mov	r2, fp
    19de:	701a      	strb	r2, [r3, #0]
			 else
			 {
				 role = EndDevice;
			 }
		#endif
        return LatestConnection;
    19e0:	4b0f      	ldr	r3, [pc, #60]	; (1a20 <MiApp_EstablishConnection+0xf8>)
    19e2:	7818      	ldrb	r0, [r3, #0]
        
    }
    19e4:	b003      	add	sp, #12
    19e6:	bc3c      	pop	{r2, r3, r4, r5}
    19e8:	4690      	mov	r8, r2
    19ea:	4699      	mov	r9, r3
    19ec:	46a2      	mov	sl, r4
    19ee:	46ab      	mov	fp, r5
    19f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	20000021 	.word	0x20000021
    19f8:	00001c9d 	.word	0x00001c9d
    19fc:	200004c0 	.word	0x200004c0
    1a00:	000015c5 	.word	0x000015c5
    1a04:	200004c4 	.word	0x200004c4
    1a08:	20000136 	.word	0x20000136
    1a0c:	200004c1 	.word	0x200004c1
    1a10:	20000464 	.word	0x20000464
    1a14:	20000468 	.word	0x20000468
    1a18:	00001221 	.word	0x00001221
    1a1c:	0000136d 	.word	0x0000136d
    1a20:	20000398 	.word	0x20000398

00001a24 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    1a24:	2803      	cmp	r0, #3
    1a26:	d808      	bhi.n	1a3a <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <MiApp_ConnectionMode+0x18>)
    1a2a:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    1a2c:	4a04      	ldr	r2, [pc, #16]	; (1a40 <MiApp_ConnectionMode+0x1c>)
    1a2e:	7813      	ldrb	r3, [r2, #0]
    1a30:	210f      	movs	r1, #15
    1a32:	400b      	ands	r3, r1
    1a34:	0100      	lsls	r0, r0, #4
    1a36:	4318      	orrs	r0, r3
    1a38:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    1a3a:	4770      	bx	lr
    1a3c:	20000021 	.word	0x20000021
    1a40:	20000464 	.word	0x20000464

00001a44 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	0003      	movs	r3, r0
    1a48:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    1a4a:	4c14      	ldr	r4, [pc, #80]	; (1a9c <sal_aes_wrrd+0x58>)
    1a4c:	1c60      	adds	r0, r4, #1
    1a4e:	2210      	movs	r2, #16
    1a50:	0019      	movs	r1, r3
    1a52:	4b13      	ldr	r3, [pc, #76]	; (1aa0 <sal_aes_wrrd+0x5c>)
    1a54:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    1a56:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    1a58:	4b12      	ldr	r3, [pc, #72]	; (1aa4 <sal_aes_wrrd+0x60>)
    1a5a:	781b      	ldrb	r3, [r3, #0]
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d008      	beq.n	1a72 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    1a60:	2212      	movs	r2, #18
    1a62:	490e      	ldr	r1, [pc, #56]	; (1a9c <sal_aes_wrrd+0x58>)
    1a64:	2083      	movs	r0, #131	; 0x83
    1a66:	4b10      	ldr	r3, [pc, #64]	; (1aa8 <sal_aes_wrrd+0x64>)
    1a68:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    1a6a:	2200      	movs	r2, #0
    1a6c:	4b0d      	ldr	r3, [pc, #52]	; (1aa4 <sal_aes_wrrd+0x60>)
    1a6e:	701a      	strb	r2, [r3, #0]
    1a70:	e005      	b.n	1a7e <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    1a72:	2211      	movs	r2, #17
    1a74:	4909      	ldr	r1, [pc, #36]	; (1a9c <sal_aes_wrrd+0x58>)
    1a76:	3101      	adds	r1, #1
    1a78:	2084      	movs	r0, #132	; 0x84
    1a7a:	4b0b      	ldr	r3, [pc, #44]	; (1aa8 <sal_aes_wrrd+0x64>)
    1a7c:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    1a7e:	2d00      	cmp	r5, #0
    1a80:	d005      	beq.n	1a8e <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    1a82:	2210      	movs	r2, #16
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <sal_aes_wrrd+0x58>)
    1a86:	3101      	adds	r1, #1
    1a88:	0028      	movs	r0, r5
    1a8a:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <sal_aes_wrrd+0x5c>)
    1a8c:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    1a8e:	4b03      	ldr	r3, [pc, #12]	; (1a9c <sal_aes_wrrd+0x58>)
    1a90:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    1a92:	2018      	movs	r0, #24
    1a94:	4b05      	ldr	r3, [pc, #20]	; (1aac <sal_aes_wrrd+0x68>)
    1a96:	4798      	blx	r3
}
    1a98:	bd70      	pop	{r4, r5, r6, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	20000158 	.word	0x20000158
    1aa0:	00004d3d 	.word	0x00004d3d
    1aa4:	2000016a 	.word	0x2000016a
    1aa8:	000047e9 	.word	0x000047e9
    1aac:	00001cf1 	.word	0x00001cf1

00001ab0 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    1ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab2:	4647      	mov	r7, r8
    1ab4:	b480      	push	{r7}
    1ab6:	b084      	sub	sp, #16
    1ab8:	0006      	movs	r6, r0
    1aba:	000d      	movs	r5, r1
    1abc:	0014      	movs	r4, r2
	if (key != NULL) {
    1abe:	2800      	cmp	r0, #0
    1ac0:	d017      	beq.n	1af2 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    1ac2:	2200      	movs	r2, #0
    1ac4:	4b3e      	ldr	r3, [pc, #248]	; (1bc0 <sal_aes_setup+0x110>)
    1ac6:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    1ac8:	3202      	adds	r2, #2
    1aca:	4b3e      	ldr	r3, [pc, #248]	; (1bc4 <sal_aes_setup+0x114>)
    1acc:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    1ace:	320e      	adds	r2, #14
    1ad0:	0001      	movs	r1, r0
    1ad2:	483d      	ldr	r0, [pc, #244]	; (1bc8 <sal_aes_setup+0x118>)
    1ad4:	4b3d      	ldr	r3, [pc, #244]	; (1bcc <sal_aes_setup+0x11c>)
    1ad6:	4698      	mov	r8, r3
    1ad8:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    1ada:	4f3d      	ldr	r7, [pc, #244]	; (1bd0 <sal_aes_setup+0x120>)
    1adc:	2310      	movs	r3, #16
    1ade:	703b      	strb	r3, [r7, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    1ae0:	1c78      	adds	r0, r7, #1
    1ae2:	2210      	movs	r2, #16
    1ae4:	0031      	movs	r1, r6
    1ae6:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    1ae8:	2211      	movs	r2, #17
    1aea:	0039      	movs	r1, r7
    1aec:	2083      	movs	r0, #131	; 0x83
    1aee:	4b39      	ldr	r3, [pc, #228]	; (1bd4 <sal_aes_setup+0x124>)
    1af0:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    1af2:	2c00      	cmp	r4, #0
    1af4:	d002      	beq.n	1afc <sal_aes_setup+0x4c>
    1af6:	2c01      	cmp	r4, #1
    1af8:	d012      	beq.n	1b20 <sal_aes_setup+0x70>
    1afa:	e05a      	b.n	1bb2 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    1afc:	4b31      	ldr	r3, [pc, #196]	; (1bc4 <sal_aes_setup+0x114>)
    1afe:	781b      	ldrb	r3, [r3, #0]
    1b00:	2b01      	cmp	r3, #1
    1b02:	d13d      	bne.n	1b80 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    1b04:	4e32      	ldr	r6, [pc, #200]	; (1bd0 <sal_aes_setup+0x120>)
    1b06:	330f      	adds	r3, #15
    1b08:	7033      	strb	r3, [r6, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    1b0a:	1c70      	adds	r0, r6, #1
    1b0c:	2210      	movs	r2, #16
    1b0e:	492e      	ldr	r1, [pc, #184]	; (1bc8 <sal_aes_setup+0x118>)
    1b10:	4b2e      	ldr	r3, [pc, #184]	; (1bcc <sal_aes_setup+0x11c>)
    1b12:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    1b14:	2211      	movs	r2, #17
    1b16:	0031      	movs	r1, r6
    1b18:	2083      	movs	r0, #131	; 0x83
    1b1a:	4b2e      	ldr	r3, [pc, #184]	; (1bd4 <sal_aes_setup+0x124>)
    1b1c:	4798      	blx	r3
    1b1e:	e02f      	b.n	1b80 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    1b20:	4b28      	ldr	r3, [pc, #160]	; (1bc4 <sal_aes_setup+0x114>)
    1b22:	781b      	ldrb	r3, [r3, #0]
    1b24:	2b01      	cmp	r3, #1
    1b26:	d02b      	beq.n	1b80 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    1b28:	2210      	movs	r2, #16
    1b2a:	4b29      	ldr	r3, [pc, #164]	; (1bd0 <sal_aes_setup+0x120>)
    1b2c:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    1b2e:	4b24      	ldr	r3, [pc, #144]	; (1bc0 <sal_aes_setup+0x110>)
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d116      	bne.n	1b64 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    1b36:	4e26      	ldr	r6, [pc, #152]	; (1bd0 <sal_aes_setup+0x120>)
    1b38:	7033      	strb	r3, [r6, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    1b3a:	3380      	adds	r3, #128	; 0x80
    1b3c:	7473      	strb	r3, [r6, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    1b3e:	3a0f      	subs	r2, #15
    1b40:	4b25      	ldr	r3, [pc, #148]	; (1bd8 <sal_aes_setup+0x128>)
    1b42:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    1b44:	2100      	movs	r1, #0
    1b46:	4668      	mov	r0, sp
    1b48:	4b24      	ldr	r3, [pc, #144]	; (1bdc <sal_aes_setup+0x12c>)
    1b4a:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    1b4c:	2310      	movs	r3, #16
    1b4e:	7033      	strb	r3, [r6, #0]
				trx_sram_write(
    1b50:	2201      	movs	r2, #1
    1b52:	0031      	movs	r1, r6
    1b54:	2083      	movs	r0, #131	; 0x83
    1b56:	4b1f      	ldr	r3, [pc, #124]	; (1bd4 <sal_aes_setup+0x124>)
    1b58:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    1b5a:	2210      	movs	r2, #16
    1b5c:	4920      	ldr	r1, [pc, #128]	; (1be0 <sal_aes_setup+0x130>)
    1b5e:	2084      	movs	r0, #132	; 0x84
    1b60:	4b20      	ldr	r3, [pc, #128]	; (1be4 <sal_aes_setup+0x134>)
    1b62:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    1b64:	4e1a      	ldr	r6, [pc, #104]	; (1bd0 <sal_aes_setup+0x120>)
    1b66:	1c70      	adds	r0, r6, #1
    1b68:	2210      	movs	r2, #16
    1b6a:	491d      	ldr	r1, [pc, #116]	; (1be0 <sal_aes_setup+0x130>)
    1b6c:	4b17      	ldr	r3, [pc, #92]	; (1bcc <sal_aes_setup+0x11c>)
    1b6e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    1b70:	2211      	movs	r2, #17
    1b72:	0031      	movs	r1, r6
    1b74:	2083      	movs	r0, #131	; 0x83
    1b76:	4b17      	ldr	r3, [pc, #92]	; (1bd4 <sal_aes_setup+0x124>)
    1b78:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    1b7a:	4b11      	ldr	r3, [pc, #68]	; (1bc0 <sal_aes_setup+0x110>)
    1b7c:	2201      	movs	r2, #1
    1b7e:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    1b80:	4b10      	ldr	r3, [pc, #64]	; (1bc4 <sal_aes_setup+0x114>)
    1b82:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    1b84:	2d00      	cmp	r5, #0
    1b86:	d002      	beq.n	1b8e <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    1b88:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    1b8a:	2d02      	cmp	r5, #2
    1b8c:	d113      	bne.n	1bb6 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    1b8e:	012d      	lsls	r5, r5, #4
    1b90:	2370      	movs	r3, #112	; 0x70
    1b92:	401d      	ands	r5, r3
    1b94:	00e3      	lsls	r3, r4, #3
    1b96:	2408      	movs	r4, #8
    1b98:	401c      	ands	r4, r3
    1b9a:	432c      	orrs	r4, r5
    1b9c:	4b0c      	ldr	r3, [pc, #48]	; (1bd0 <sal_aes_setup+0x120>)
    1b9e:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    1ba0:	2280      	movs	r2, #128	; 0x80
    1ba2:	4252      	negs	r2, r2
    1ba4:	4314      	orrs	r4, r2
    1ba6:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    1ba8:	3281      	adds	r2, #129	; 0x81
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <sal_aes_setup+0x128>)
    1bac:	701a      	strb	r2, [r3, #0]

	return (true);
    1bae:	2001      	movs	r0, #1
    1bb0:	e001      	b.n	1bb6 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    1bb2:	2000      	movs	r0, #0
    1bb4:	e7ff      	b.n	1bb6 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    1bb6:	b004      	add	sp, #16
    1bb8:	bc04      	pop	{r2}
    1bba:	4690      	mov	r8, r2
    1bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	20000137 	.word	0x20000137
    1bc4:	20000022 	.word	0x20000022
    1bc8:	20000148 	.word	0x20000148
    1bcc:	00004d3d 	.word	0x00004d3d
    1bd0:	20000158 	.word	0x20000158
    1bd4:	000044f9 	.word	0x000044f9
    1bd8:	2000016a 	.word	0x2000016a
    1bdc:	00001a45 	.word	0x00001a45
    1be0:	20000138 	.word	0x20000138
    1be4:	00004661 	.word	0x00004661

00001be8 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    1be8:	b510      	push	{r4, lr}
    1bea:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    1bec:	2210      	movs	r2, #16
    1bee:	2084      	movs	r0, #132	; 0x84
    1bf0:	4b01      	ldr	r3, [pc, #4]	; (1bf8 <sal_aes_read+0x10>)
    1bf2:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    1bf4:	bd10      	pop	{r4, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	00004661 	.word	0x00004661

00001bfc <configure_tc>:
struct tc_module tc_instance;


//! [setup]
void configure_tc(void)
{
    1bfc:	b510      	push	{r4, lr}
    1bfe:	b08e      	sub	sp, #56	; 0x38
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
    1c00:	4c21      	ldr	r4, [pc, #132]	; (1c88 <configure_tc+0x8c>)
    1c02:	0020      	movs	r0, r4
    1c04:	4b21      	ldr	r3, [pc, #132]	; (1c8c <configure_tc+0x90>)
    1c06:	4798      	blx	r3

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1c08:	2300      	movs	r3, #0
    1c0a:	466a      	mov	r2, sp
    1c0c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1c0e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    1c10:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    1c12:	7093      	strb	r3, [r2, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1c14:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1c16:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1c18:	7293      	strb	r3, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1c1a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1c1c:	7313      	strb	r3, [r2, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1c1e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1c20:	7353      	strb	r3, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1c22:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1c24:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1c26:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1c28:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1c2a:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1c2c:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1c2e:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1c30:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1c32:	8593      	strh	r3, [r2, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    1c34:	3334      	adds	r3, #52	; 0x34
    1c36:	2200      	movs	r2, #0
    1c38:	4669      	mov	r1, sp
    1c3a:	54ca      	strb	r2, [r1, r3]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    1c3c:	3b2c      	subs	r3, #44	; 0x2c
    1c3e:	466a      	mov	r2, sp
    1c40:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
    1c42:	3b07      	subs	r3, #7
    1c44:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    1c46:	23c0      	movs	r3, #192	; 0xc0
    1c48:	00db      	lsls	r3, r3, #3
    1c4a:	808b      	strh	r3, [r1, #4]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    1c4c:	4910      	ldr	r1, [pc, #64]	; (1c90 <configure_tc+0x94>)
    1c4e:	0020      	movs	r0, r4
    1c50:	4b10      	ldr	r3, [pc, #64]	; (1c94 <configure_tc+0x98>)
    1c52:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c54:	6822      	ldr	r2, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    1c56:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d1fc      	bne.n	1c56 <configure_tc+0x5a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1c5c:	6811      	ldr	r1, [r2, #0]
    1c5e:	3302      	adds	r3, #2
    1c60:	430b      	orrs	r3, r1
    1c62:	6013      	str	r3, [r2, #0]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
    1c64:	4c08      	ldr	r4, [pc, #32]	; (1c88 <configure_tc+0x8c>)
    1c66:	2100      	movs	r1, #0
    1c68:	0020      	movs	r0, r4
    1c6a:	4b0b      	ldr	r3, [pc, #44]	; (1c98 <configure_tc+0x9c>)
    1c6c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c6e:	6823      	ldr	r3, [r4, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    1c70:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1c72:	2a00      	cmp	r2, #0
    1c74:	d1fc      	bne.n	1c70 <configure_tc+0x74>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    1c76:	711a      	strb	r2, [r3, #4]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    1c78:	691a      	ldr	r2, [r3, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    1c7a:	2a00      	cmp	r2, #0
    1c7c:	d1fc      	bne.n	1c78 <configure_tc+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    1c7e:	3220      	adds	r2, #32
    1c80:	715a      	strb	r2, [r3, #5]
		
	/* Start timer */
	tc_start_counter(&tc_instance);
}
    1c82:	b00e      	add	sp, #56	; 0x38
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	20000504 	.word	0x20000504
    1c8c:	00003b61 	.word	0x00003b61
    1c90:	43000800 	.word	0x43000800
    1c94:	00003815 	.word	0x00003815
    1c98:	00003aed 	.word	0x00003aed

00001c9c <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

uint32_t MiWi_TickGet(void)
{
    1c9c:	b510      	push	{r4, lr}
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
    1c9e:	4802      	ldr	r0, [pc, #8]	; (1ca8 <MiWi_TickGet+0xc>)
    1ca0:	4b02      	ldr	r3, [pc, #8]	; (1cac <MiWi_TickGet+0x10>)
    1ca2:	4798      	blx	r3
	return count.Val;
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	20000504 	.word	0x20000504
    1cac:	00003b21 	.word	0x00003b21

00001cb0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1cb0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1cb2:	2000      	movs	r0, #0
    1cb4:	4b08      	ldr	r3, [pc, #32]	; (1cd8 <delay_init+0x28>)
    1cb6:	4798      	blx	r3
    1cb8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1cba:	4c08      	ldr	r4, [pc, #32]	; (1cdc <delay_init+0x2c>)
    1cbc:	21fa      	movs	r1, #250	; 0xfa
    1cbe:	0089      	lsls	r1, r1, #2
    1cc0:	47a0      	blx	r4
    1cc2:	4b07      	ldr	r3, [pc, #28]	; (1ce0 <delay_init+0x30>)
    1cc4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1cc6:	4907      	ldr	r1, [pc, #28]	; (1ce4 <delay_init+0x34>)
    1cc8:	0028      	movs	r0, r5
    1cca:	47a0      	blx	r4
    1ccc:	4b06      	ldr	r3, [pc, #24]	; (1ce8 <delay_init+0x38>)
    1cce:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1cd0:	2205      	movs	r2, #5
    1cd2:	4b06      	ldr	r3, [pc, #24]	; (1cec <delay_init+0x3c>)
    1cd4:	601a      	str	r2, [r3, #0]
}
    1cd6:	bd70      	pop	{r4, r5, r6, pc}
    1cd8:	00003519 	.word	0x00003519
    1cdc:	00004b81 	.word	0x00004b81
    1ce0:	20000028 	.word	0x20000028
    1ce4:	000f4240 	.word	0x000f4240
    1ce8:	20000024 	.word	0x20000024
    1cec:	e000e010 	.word	0xe000e010

00001cf0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1cf0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1cf2:	4b08      	ldr	r3, [pc, #32]	; (1d14 <delay_cycles_us+0x24>)
    1cf4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1cf6:	4a08      	ldr	r2, [pc, #32]	; (1d18 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1cf8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1cfa:	2180      	movs	r1, #128	; 0x80
    1cfc:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    1cfe:	e006      	b.n	1d0e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1d00:	2c00      	cmp	r4, #0
    1d02:	d004      	beq.n	1d0e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    1d04:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1d06:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1d08:	6813      	ldr	r3, [r2, #0]
    1d0a:	420b      	tst	r3, r1
    1d0c:	d0fc      	beq.n	1d08 <delay_cycles_us+0x18>
    1d0e:	3801      	subs	r0, #1
    1d10:	d2f6      	bcs.n	1d00 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    1d12:	bd30      	pop	{r4, r5, pc}
    1d14:	20000024 	.word	0x20000024
    1d18:	e000e010 	.word	0xe000e010

00001d1c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1d1c:	4b0c      	ldr	r3, [pc, #48]	; (1d50 <cpu_irq_enter_critical+0x34>)
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d110      	bne.n	1d46 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d24:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d109      	bne.n	1d40 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1d2c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1d2e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d32:	2200      	movs	r2, #0
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <cpu_irq_enter_critical+0x38>)
    1d36:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1d38:	3201      	adds	r2, #1
    1d3a:	4b07      	ldr	r3, [pc, #28]	; (1d58 <cpu_irq_enter_critical+0x3c>)
    1d3c:	701a      	strb	r2, [r3, #0]
    1d3e:	e002      	b.n	1d46 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1d40:	2200      	movs	r2, #0
    1d42:	4b05      	ldr	r3, [pc, #20]	; (1d58 <cpu_irq_enter_critical+0x3c>)
    1d44:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1d46:	4a02      	ldr	r2, [pc, #8]	; (1d50 <cpu_irq_enter_critical+0x34>)
    1d48:	6813      	ldr	r3, [r2, #0]
    1d4a:	3301      	adds	r3, #1
    1d4c:	6013      	str	r3, [r2, #0]
}
    1d4e:	4770      	bx	lr
    1d50:	2000016c 	.word	0x2000016c
    1d54:	2000002c 	.word	0x2000002c
    1d58:	20000170 	.word	0x20000170

00001d5c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d5c:	4b08      	ldr	r3, [pc, #32]	; (1d80 <cpu_irq_leave_critical+0x24>)
    1d5e:	681a      	ldr	r2, [r3, #0]
    1d60:	3a01      	subs	r2, #1
    1d62:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d109      	bne.n	1d7e <cpu_irq_leave_critical+0x22>
    1d6a:	4b06      	ldr	r3, [pc, #24]	; (1d84 <cpu_irq_leave_critical+0x28>)
    1d6c:	781b      	ldrb	r3, [r3, #0]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d005      	beq.n	1d7e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d72:	2201      	movs	r2, #1
    1d74:	4b04      	ldr	r3, [pc, #16]	; (1d88 <cpu_irq_leave_critical+0x2c>)
    1d76:	701a      	strb	r2, [r3, #0]
    1d78:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d7c:	b662      	cpsie	i
	}
}
    1d7e:	4770      	bx	lr
    1d80:	2000016c 	.word	0x2000016c
    1d84:	20000170 	.word	0x20000170
    1d88:	2000002c 	.word	0x2000002c

00001d8c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8e:	464f      	mov	r7, r9
    1d90:	4646      	mov	r6, r8
    1d92:	b4c0      	push	{r6, r7}
    1d94:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1d96:	ac01      	add	r4, sp, #4
    1d98:	2601      	movs	r6, #1
    1d9a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1d9c:	2700      	movs	r7, #0
    1d9e:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1da0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1da2:	0021      	movs	r1, r4
    1da4:	2013      	movs	r0, #19
    1da6:	4d2d      	ldr	r5, [pc, #180]	; (1e5c <system_board_init+0xd0>)
    1da8:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1daa:	4b2d      	ldr	r3, [pc, #180]	; (1e60 <system_board_init+0xd4>)
    1dac:	4698      	mov	r8, r3
    1dae:	2380      	movs	r3, #128	; 0x80
    1db0:	031b      	lsls	r3, r3, #12
    1db2:	4642      	mov	r2, r8
    1db4:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1db6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    1db8:	0021      	movs	r1, r4
    1dba:	2012      	movs	r0, #18
    1dbc:	47a8      	blx	r5
    1dbe:	2380      	movs	r3, #128	; 0x80
    1dc0:	02db      	lsls	r3, r3, #11
    1dc2:	4699      	mov	r9, r3
    1dc4:	4643      	mov	r3, r8
    1dc6:	464a      	mov	r2, r9
    1dc8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1dca:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1dcc:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1dce:	0021      	movs	r1, r4
    1dd0:	201c      	movs	r0, #28
    1dd2:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1dd4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1dd6:	70a7      	strb	r7, [r4, #2]

	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1dd8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    1dda:	0021      	movs	r1, r4
    1ddc:	2052      	movs	r0, #82	; 0x52
    1dde:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    1de0:	0021      	movs	r1, r4
    1de2:	203e      	movs	r0, #62	; 0x3e
    1de4:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    1de6:	0021      	movs	r1, r4
    1de8:	203f      	movs	r0, #63	; 0x3f
    1dea:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    1dec:	0021      	movs	r1, r4
    1dee:	202f      	movs	r0, #47	; 0x2f
    1df0:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    1df2:	0021      	movs	r1, r4
    1df4:	2014      	movs	r0, #20
    1df6:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1df8:	4b1a      	ldr	r3, [pc, #104]	; (1e64 <system_board_init+0xd8>)
    1dfa:	464a      	mov	r2, r9
    1dfc:	619a      	str	r2, [r3, #24]
    1dfe:	3b80      	subs	r3, #128	; 0x80
    1e00:	2280      	movs	r2, #128	; 0x80
    1e02:	05d2      	lsls	r2, r2, #23
    1e04:	619a      	str	r2, [r3, #24]
    1e06:	2280      	movs	r2, #128	; 0x80
    1e08:	0612      	lsls	r2, r2, #24
    1e0a:	619a      	str	r2, [r3, #24]
    1e0c:	2280      	movs	r2, #128	; 0x80
    1e0e:	0212      	lsls	r2, r2, #8
    1e10:	4691      	mov	r9, r2
    1e12:	619a      	str	r2, [r3, #24]
    1e14:	2380      	movs	r3, #128	; 0x80
    1e16:	035b      	lsls	r3, r3, #13
    1e18:	4642      	mov	r2, r8
    1e1a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1e1c:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    1e1e:	0021      	movs	r1, r4
    1e20:	2053      	movs	r0, #83	; 0x53
    1e22:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    1e24:	4a10      	ldr	r2, [pc, #64]	; (1e68 <system_board_init+0xdc>)
    1e26:	69d3      	ldr	r3, [r2, #28]
    1e28:	4649      	mov	r1, r9
    1e2a:	430b      	orrs	r3, r1
    1e2c:	61d3      	str	r3, [r2, #28]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR30 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    1e2e:	2204      	movs	r2, #4
    1e30:	4b0e      	ldr	r3, [pc, #56]	; (1e6c <system_board_init+0xe0>)
    1e32:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1e34:	466b      	mov	r3, sp
    1e36:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    1e38:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    1e3a:	2305      	movs	r3, #5
    1e3c:	466a      	mov	r2, sp
    1e3e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    1e40:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    1e42:	4669      	mov	r1, sp
    1e44:	2009      	movs	r0, #9
    1e46:	4c0a      	ldr	r4, [pc, #40]	; (1e70 <system_board_init+0xe4>)
    1e48:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    1e4a:	4669      	mov	r1, sp
    1e4c:	200c      	movs	r0, #12
    1e4e:	47a0      	blx	r4
#endif	
}
    1e50:	b003      	add	sp, #12
    1e52:	bc0c      	pop	{r2, r3}
    1e54:	4690      	mov	r8, r2
    1e56:	4699      	mov	r9, r3
    1e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	0000208d 	.word	0x0000208d
    1e60:	40002800 	.word	0x40002800
    1e64:	40002900 	.word	0x40002900
    1e68:	40000400 	.word	0x40000400
    1e6c:	42003c00 	.word	0x42003c00
    1e70:	000036f1 	.word	0x000036f1

00001e74 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e74:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1e76:	2a00      	cmp	r2, #0
    1e78:	d10d      	bne.n	1e96 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1e7a:	008b      	lsls	r3, r1, #2
    1e7c:	4a07      	ldr	r2, [pc, #28]	; (1e9c <extint_register_callback+0x28>)
    1e7e:	589b      	ldr	r3, [r3, r2]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d103      	bne.n	1e8c <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    1e84:	0089      	lsls	r1, r1, #2
    1e86:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1e88:	2300      	movs	r3, #0
    1e8a:	e004      	b.n	1e96 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1e8c:	4283      	cmp	r3, r0
    1e8e:	d001      	beq.n	1e94 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1e90:	231d      	movs	r3, #29
    1e92:	e000      	b.n	1e96 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1e94:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1e96:	0018      	movs	r0, r3
    1e98:	4770      	bx	lr
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	20000524 	.word	0x20000524

00001ea0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ea0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1ea2:	2900      	cmp	r1, #0
    1ea4:	d107      	bne.n	1eb6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1ea6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1ea8:	281f      	cmp	r0, #31
    1eaa:	d800      	bhi.n	1eae <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1eac:	4a03      	ldr	r2, [pc, #12]	; (1ebc <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1eae:	2301      	movs	r3, #1
    1eb0:	4083      	lsls	r3, r0
    1eb2:	6113      	str	r3, [r2, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1eb4:	2300      	movs	r3, #0
}
    1eb6:	0018      	movs	r0, r3
    1eb8:	4770      	bx	lr
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	40002400 	.word	0x40002400

00001ec0 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ec0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1ec2:	2900      	cmp	r1, #0
    1ec4:	d107      	bne.n	1ed6 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    1ec6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1ec8:	281f      	cmp	r0, #31
    1eca:	d800      	bhi.n	1ece <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1ecc:	4a03      	ldr	r2, [pc, #12]	; (1edc <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    1ece:	2301      	movs	r3, #1
    1ed0:	4083      	lsls	r3, r0
    1ed2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ed4:	2300      	movs	r3, #0
}
    1ed6:	0018      	movs	r0, r3
    1ed8:	4770      	bx	lr
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	40002400 	.word	0x40002400

00001ee0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1ee0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1ee2:	2200      	movs	r2, #0
    1ee4:	4b15      	ldr	r3, [pc, #84]	; (1f3c <EIC_Handler+0x5c>)
    1ee6:	701a      	strb	r2, [r3, #0]
    1ee8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1eea:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1eec:	4e14      	ldr	r6, [pc, #80]	; (1f40 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1eee:	4c13      	ldr	r4, [pc, #76]	; (1f3c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1ef0:	2b1f      	cmp	r3, #31
    1ef2:	d919      	bls.n	1f28 <EIC_Handler+0x48>
    1ef4:	e00f      	b.n	1f16 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1ef6:	2100      	movs	r1, #0
    1ef8:	e000      	b.n	1efc <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1efa:	4912      	ldr	r1, [pc, #72]	; (1f44 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1efc:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1efe:	009b      	lsls	r3, r3, #2
    1f00:	599b      	ldr	r3, [r3, r6]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d000      	beq.n	1f08 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1f06:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1f08:	7823      	ldrb	r3, [r4, #0]
    1f0a:	3301      	adds	r3, #1
    1f0c:	b2db      	uxtb	r3, r3
    1f0e:	7023      	strb	r3, [r4, #0]
    1f10:	2b0f      	cmp	r3, #15
    1f12:	d9ed      	bls.n	1ef0 <EIC_Handler+0x10>
    1f14:	e011      	b.n	1f3a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1f16:	0029      	movs	r1, r5
    1f18:	4019      	ands	r1, r3
    1f1a:	2201      	movs	r2, #1
    1f1c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1f1e:	2100      	movs	r1, #0
    1f20:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    1f22:	4211      	tst	r1, r2
    1f24:	d1e7      	bne.n	1ef6 <EIC_Handler+0x16>
    1f26:	e7ef      	b.n	1f08 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1f28:	0029      	movs	r1, r5
    1f2a:	4019      	ands	r1, r3
    1f2c:	2201      	movs	r2, #1
    1f2e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1f30:	4904      	ldr	r1, [pc, #16]	; (1f44 <EIC_Handler+0x64>)
    1f32:	6949      	ldr	r1, [r1, #20]
    1f34:	4211      	tst	r1, r2
    1f36:	d1e0      	bne.n	1efa <EIC_Handler+0x1a>
    1f38:	e7e6      	b.n	1f08 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1f3a:	bd70      	pop	{r4, r5, r6, pc}
    1f3c:	20000520 	.word	0x20000520
    1f40:	20000524 	.word	0x20000524
    1f44:	40002400 	.word	0x40002400

00001f48 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1f48:	4a06      	ldr	r2, [pc, #24]	; (1f64 <_extint_enable+0x1c>)
    1f4a:	7811      	ldrb	r1, [r2, #0]
    1f4c:	2302      	movs	r3, #2
    1f4e:	430b      	orrs	r3, r1
    1f50:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1f52:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1f54:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1f56:	6853      	ldr	r3, [r2, #4]
    1f58:	4219      	tst	r1, r3
    1f5a:	d1fc      	bne.n	1f56 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1f5c:	6853      	ldr	r3, [r2, #4]
    1f5e:	4218      	tst	r0, r3
    1f60:	d1f9      	bne.n	1f56 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1f62:	4770      	bx	lr
    1f64:	40002400 	.word	0x40002400

00001f68 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1f68:	4a06      	ldr	r2, [pc, #24]	; (1f84 <_extint_disable+0x1c>)
    1f6a:	7813      	ldrb	r3, [r2, #0]
    1f6c:	2102      	movs	r1, #2
    1f6e:	438b      	bics	r3, r1
    1f70:	7013      	strb	r3, [r2, #0]
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1f72:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1f74:	6853      	ldr	r3, [r2, #4]
    1f76:	4219      	tst	r1, r3
    1f78:	d1fc      	bne.n	1f74 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1f7a:	6853      	ldr	r3, [r2, #4]
    1f7c:	4218      	tst	r0, r3
    1f7e:	d1f9      	bne.n	1f74 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1f80:	4770      	bx	lr
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	40002400 	.word	0x40002400

00001f88 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1f88:	b510      	push	{r4, lr}
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1f8a:	4a14      	ldr	r2, [pc, #80]	; (1fdc <_system_extint_init+0x54>)
    1f8c:	6953      	ldr	r3, [r2, #20]
    1f8e:	2180      	movs	r1, #128	; 0x80
    1f90:	0089      	lsls	r1, r1, #2
    1f92:	430b      	orrs	r3, r1
    1f94:	6153      	str	r3, [r2, #20]
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    1f96:	4a12      	ldr	r2, [pc, #72]	; (1fe0 <_system_extint_init+0x58>)
    1f98:	7811      	ldrb	r1, [r2, #0]
    1f9a:	2301      	movs	r3, #1
    1f9c:	430b      	orrs	r3, r1
    1f9e:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1fa0:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1fa2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1fa4:	6853      	ldr	r3, [r2, #4]
    1fa6:	4219      	tst	r1, r3
    1fa8:	d1fc      	bne.n	1fa4 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1faa:	6853      	ldr	r3, [r2, #4]
    1fac:	4218      	tst	r0, r3
    1fae:	d009      	beq.n	1fc4 <_system_extint_init+0x3c>
    1fb0:	e7f8      	b.n	1fa4 <_system_extint_init+0x1c>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1fb2:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1fb4:	428b      	cmp	r3, r1
    1fb6:	d1fc      	bne.n	1fb2 <_system_extint_init+0x2a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1fb8:	2208      	movs	r2, #8
    1fba:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <_system_extint_init+0x5c>)
    1fbc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1fbe:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <_system_extint_init+0x60>)
    1fc0:	4798      	blx	r3
}
    1fc2:	e009      	b.n	1fd8 <_system_extint_init+0x50>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    1fc4:	4a06      	ldr	r2, [pc, #24]	; (1fe0 <_system_extint_init+0x58>)
    1fc6:	7811      	ldrb	r1, [r2, #0]
    1fc8:	2310      	movs	r3, #16
    1fca:	430b      	orrs	r3, r1
    1fcc:	7013      	strb	r3, [r2, #0]
    1fce:	4b07      	ldr	r3, [pc, #28]	; (1fec <_system_extint_init+0x64>)
    1fd0:	0019      	movs	r1, r3
    1fd2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1fd4:	2200      	movs	r2, #0
    1fd6:	e7ec      	b.n	1fb2 <_system_extint_init+0x2a>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    1fd8:	bd10      	pop	{r4, pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	40000400 	.word	0x40000400
    1fe0:	40002400 	.word	0x40002400
    1fe4:	e000e100 	.word	0xe000e100
    1fe8:	00001f49 	.word	0x00001f49
    1fec:	20000524 	.word	0x20000524

00001ff0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1ff0:	2300      	movs	r3, #0
    1ff2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1ff4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ff6:	2201      	movs	r2, #1
    1ff8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    1ffa:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1ffc:	3201      	adds	r2, #1
    1ffe:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    2000:	7243      	strb	r3, [r0, #9]
}
    2002:	4770      	bx	lr

00002004 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2004:	b5f0      	push	{r4, r5, r6, r7, lr}
    2006:	b083      	sub	sp, #12
    2008:	0005      	movs	r5, r0
    200a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    200c:	4b1b      	ldr	r3, [pc, #108]	; (207c <extint_chan_set_config+0x78>)
    200e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2010:	a901      	add	r1, sp, #4
    2012:	2300      	movs	r3, #0
    2014:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2016:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2018:	7923      	ldrb	r3, [r4, #4]
    201a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    201c:	7a23      	ldrb	r3, [r4, #8]
    201e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2020:	7820      	ldrb	r0, [r4, #0]
    2022:	4b17      	ldr	r3, [pc, #92]	; (2080 <extint_chan_set_config+0x7c>)
    2024:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2026:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2028:	2d1f      	cmp	r5, #31
    202a:	d800      	bhi.n	202e <extint_chan_set_config+0x2a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    202c:	4815      	ldr	r0, [pc, #84]	; (2084 <extint_chan_set_config+0x80>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    202e:	2107      	movs	r1, #7
    2030:	4029      	ands	r1, r5
    2032:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2034:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2036:	7aa3      	ldrb	r3, [r4, #10]
    2038:	2b00      	cmp	r3, #0
    203a:	d001      	beq.n	2040 <extint_chan_set_config+0x3c>
		new_config |= EIC_CONFIG_FILTEN0;
    203c:	2308      	movs	r3, #8
    203e:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    2040:	08eb      	lsrs	r3, r5, #3
    2042:	009b      	lsls	r3, r3, #2
    2044:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    2046:	69de      	ldr	r6, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2048:	270f      	movs	r7, #15
    204a:	408f      	lsls	r7, r1
    204c:	43be      	bics	r6, r7
    204e:	408a      	lsls	r2, r1
    2050:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2052:	61da      	str	r2, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    2054:	7a63      	ldrb	r3, [r4, #9]
    2056:	2b00      	cmp	r3, #0
    2058:	d005      	beq.n	2066 <extint_chan_set_config+0x62>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    205a:	6982      	ldr	r2, [r0, #24]
    205c:	2301      	movs	r3, #1
    205e:	40ab      	lsls	r3, r5
    2060:	4313      	orrs	r3, r2
    2062:	6183      	str	r3, [r0, #24]
    2064:	e006      	b.n	2074 <extint_chan_set_config+0x70>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    2066:	6983      	ldr	r3, [r0, #24]
    2068:	2201      	movs	r2, #1
    206a:	40aa      	lsls	r2, r5
    206c:	041b      	lsls	r3, r3, #16
    206e:	0c1b      	lsrs	r3, r3, #16
    2070:	4393      	bics	r3, r2
    2072:	6183      	str	r3, [r0, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    2074:	4b04      	ldr	r3, [pc, #16]	; (2088 <extint_chan_set_config+0x84>)
    2076:	4798      	blx	r3
}
    2078:	b003      	add	sp, #12
    207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    207c:	00001f69 	.word	0x00001f69
    2080:	000036f1 	.word	0x000036f1
    2084:	40002400 	.word	0x40002400
    2088:	00001f49 	.word	0x00001f49

0000208c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    208c:	b500      	push	{lr}
    208e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2090:	ab01      	add	r3, sp, #4
    2092:	2280      	movs	r2, #128	; 0x80
    2094:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2096:	780a      	ldrb	r2, [r1, #0]
    2098:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    209a:	784a      	ldrb	r2, [r1, #1]
    209c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    209e:	788a      	ldrb	r2, [r1, #2]
    20a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    20a2:	0019      	movs	r1, r3
    20a4:	4b01      	ldr	r3, [pc, #4]	; (20ac <port_pin_set_config+0x20>)
    20a6:	4798      	blx	r3
}
    20a8:	b003      	add	sp, #12
    20aa:	bd00      	pop	{pc}
    20ac:	000036f1 	.word	0x000036f1

000020b0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    20b0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    20b2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20b4:	2340      	movs	r3, #64	; 0x40
    20b6:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    20b8:	4281      	cmp	r1, r0
    20ba:	d201      	bcs.n	20c0 <_sercom_get_sync_baud_val+0x10>
    20bc:	e00a      	b.n	20d4 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    20be:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    20c0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    20c2:	1c63      	adds	r3, r4, #1
    20c4:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    20c6:	4288      	cmp	r0, r1
    20c8:	d9f9      	bls.n	20be <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20ca:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    20cc:	2cff      	cmp	r4, #255	; 0xff
    20ce:	d801      	bhi.n	20d4 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    20d0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    20d2:	2300      	movs	r3, #0
	}
}
    20d4:	0018      	movs	r0, r3
    20d6:	bd10      	pop	{r4, pc}

000020d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20da:	465f      	mov	r7, fp
    20dc:	4656      	mov	r6, sl
    20de:	464d      	mov	r5, r9
    20e0:	4644      	mov	r4, r8
    20e2:	b4f0      	push	{r4, r5, r6, r7}
    20e4:	b089      	sub	sp, #36	; 0x24
    20e6:	000c      	movs	r4, r1
    20e8:	9205      	str	r2, [sp, #20]
    20ea:	aa12      	add	r2, sp, #72	; 0x48
    20ec:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    20ee:	0002      	movs	r2, r0
    20f0:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20f2:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    20f4:	42a2      	cmp	r2, r4
    20f6:	d900      	bls.n	20fa <_sercom_get_async_baud_val+0x22>
    20f8:	e0c6      	b.n	2288 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    20fa:	2b00      	cmp	r3, #0
    20fc:	d151      	bne.n	21a2 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    20fe:	0002      	movs	r2, r0
    2100:	0008      	movs	r0, r1
    2102:	2100      	movs	r1, #0
    2104:	4d64      	ldr	r5, [pc, #400]	; (2298 <_sercom_get_async_baud_val+0x1c0>)
    2106:	47a8      	blx	r5
    2108:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    210a:	0026      	movs	r6, r4
    210c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    210e:	2300      	movs	r3, #0
    2110:	2400      	movs	r4, #0
    2112:	9300      	str	r3, [sp, #0]
    2114:	9401      	str	r4, [sp, #4]
    2116:	2200      	movs	r2, #0
    2118:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    211a:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    211c:	2120      	movs	r1, #32
    211e:	468c      	mov	ip, r1
    2120:	391f      	subs	r1, #31
    2122:	9602      	str	r6, [sp, #8]
    2124:	9703      	str	r7, [sp, #12]
    2126:	2420      	movs	r4, #32
    2128:	4264      	negs	r4, r4
    212a:	1904      	adds	r4, r0, r4
    212c:	d403      	bmi.n	2136 <_sercom_get_async_baud_val+0x5e>
    212e:	000d      	movs	r5, r1
    2130:	40a5      	lsls	r5, r4
    2132:	46a8      	mov	r8, r5
    2134:	e004      	b.n	2140 <_sercom_get_async_baud_val+0x68>
    2136:	4664      	mov	r4, ip
    2138:	1a24      	subs	r4, r4, r0
    213a:	000d      	movs	r5, r1
    213c:	40e5      	lsrs	r5, r4
    213e:	46a8      	mov	r8, r5
    2140:	000c      	movs	r4, r1
    2142:	4084      	lsls	r4, r0
    2144:	46a1      	mov	r9, r4

		r = r << 1;
    2146:	0014      	movs	r4, r2
    2148:	001d      	movs	r5, r3
    214a:	18a4      	adds	r4, r4, r2
    214c:	415d      	adcs	r5, r3
    214e:	0022      	movs	r2, r4
    2150:	002b      	movs	r3, r5

		if (n & bit_shift) {
    2152:	4646      	mov	r6, r8
    2154:	465f      	mov	r7, fp
    2156:	423e      	tst	r6, r7
    2158:	d003      	beq.n	2162 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    215a:	000e      	movs	r6, r1
    215c:	4326      	orrs	r6, r4
    215e:	0032      	movs	r2, r6
    2160:	002b      	movs	r3, r5
		}

		if (r >= d) {
    2162:	9c02      	ldr	r4, [sp, #8]
    2164:	9d03      	ldr	r5, [sp, #12]
    2166:	429d      	cmp	r5, r3
    2168:	d80f      	bhi.n	218a <_sercom_get_async_baud_val+0xb2>
    216a:	d101      	bne.n	2170 <_sercom_get_async_baud_val+0x98>
    216c:	4294      	cmp	r4, r2
    216e:	d80c      	bhi.n	218a <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    2170:	9c02      	ldr	r4, [sp, #8]
    2172:	9d03      	ldr	r5, [sp, #12]
    2174:	1b12      	subs	r2, r2, r4
    2176:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2178:	464d      	mov	r5, r9
    217a:	9e00      	ldr	r6, [sp, #0]
    217c:	9f01      	ldr	r7, [sp, #4]
    217e:	4335      	orrs	r5, r6
    2180:	003c      	movs	r4, r7
    2182:	4646      	mov	r6, r8
    2184:	4334      	orrs	r4, r6
    2186:	9500      	str	r5, [sp, #0]
    2188:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    218a:	3801      	subs	r0, #1
    218c:	d2cb      	bcs.n	2126 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    218e:	2200      	movs	r2, #0
    2190:	2301      	movs	r3, #1
    2192:	9800      	ldr	r0, [sp, #0]
    2194:	9901      	ldr	r1, [sp, #4]
    2196:	1a12      	subs	r2, r2, r0
    2198:	418b      	sbcs	r3, r1
    219a:	0c12      	lsrs	r2, r2, #16
    219c:	041b      	lsls	r3, r3, #16
    219e:	431a      	orrs	r2, r3
    21a0:	e06f      	b.n	2282 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    21a2:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    21a4:	2b01      	cmp	r3, #1
    21a6:	d16c      	bne.n	2282 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    21a8:	0f63      	lsrs	r3, r4, #29
    21aa:	9304      	str	r3, [sp, #16]
    21ac:	00e3      	lsls	r3, r4, #3
    21ae:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    21b0:	000a      	movs	r2, r1
    21b2:	2300      	movs	r3, #0
    21b4:	2100      	movs	r1, #0
    21b6:	4c38      	ldr	r4, [pc, #224]	; (2298 <_sercom_get_async_baud_val+0x1c0>)
    21b8:	47a0      	blx	r4
    21ba:	0004      	movs	r4, r0
    21bc:	000d      	movs	r5, r1
    21be:	2300      	movs	r3, #0
    21c0:	469c      	mov	ip, r3
    21c2:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    21c4:	3320      	adds	r3, #32
    21c6:	469b      	mov	fp, r3
    21c8:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    21ca:	4663      	mov	r3, ip
    21cc:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    21ce:	2300      	movs	r3, #0
    21d0:	9302      	str	r3, [sp, #8]
    21d2:	2200      	movs	r2, #0
    21d4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    21d6:	213f      	movs	r1, #63	; 0x3f
    21d8:	9400      	str	r4, [sp, #0]
    21da:	9501      	str	r5, [sp, #4]
    21dc:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    21de:	2120      	movs	r1, #32
    21e0:	4249      	negs	r1, r1
    21e2:	1879      	adds	r1, r7, r1
    21e4:	d403      	bmi.n	21ee <_sercom_get_async_baud_val+0x116>
    21e6:	0030      	movs	r0, r6
    21e8:	4088      	lsls	r0, r1
    21ea:	4684      	mov	ip, r0
    21ec:	e004      	b.n	21f8 <_sercom_get_async_baud_val+0x120>
    21ee:	4659      	mov	r1, fp
    21f0:	1bc9      	subs	r1, r1, r7
    21f2:	0030      	movs	r0, r6
    21f4:	40c8      	lsrs	r0, r1
    21f6:	4684      	mov	ip, r0
    21f8:	0031      	movs	r1, r6
    21fa:	40b9      	lsls	r1, r7
    21fc:	4689      	mov	r9, r1

		r = r << 1;
    21fe:	0010      	movs	r0, r2
    2200:	0019      	movs	r1, r3
    2202:	1880      	adds	r0, r0, r2
    2204:	4159      	adcs	r1, r3
    2206:	0002      	movs	r2, r0
    2208:	000b      	movs	r3, r1

		if (n & bit_shift) {
    220a:	4644      	mov	r4, r8
    220c:	464d      	mov	r5, r9
    220e:	402c      	ands	r4, r5
    2210:	46a2      	mov	sl, r4
    2212:	4664      	mov	r4, ip
    2214:	9d04      	ldr	r5, [sp, #16]
    2216:	402c      	ands	r4, r5
    2218:	46a4      	mov	ip, r4
    221a:	4654      	mov	r4, sl
    221c:	4665      	mov	r5, ip
    221e:	432c      	orrs	r4, r5
    2220:	d003      	beq.n	222a <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    2222:	0034      	movs	r4, r6
    2224:	4304      	orrs	r4, r0
    2226:	0022      	movs	r2, r4
    2228:	000b      	movs	r3, r1
		}

		if (r >= d) {
    222a:	9800      	ldr	r0, [sp, #0]
    222c:	9901      	ldr	r1, [sp, #4]
    222e:	4299      	cmp	r1, r3
    2230:	d80a      	bhi.n	2248 <_sercom_get_async_baud_val+0x170>
    2232:	d101      	bne.n	2238 <_sercom_get_async_baud_val+0x160>
    2234:	4290      	cmp	r0, r2
    2236:	d807      	bhi.n	2248 <_sercom_get_async_baud_val+0x170>
			r = r - d;
    2238:	9800      	ldr	r0, [sp, #0]
    223a:	9901      	ldr	r1, [sp, #4]
    223c:	1a12      	subs	r2, r2, r0
    223e:	418b      	sbcs	r3, r1
			q |= bit_shift;
    2240:	9902      	ldr	r1, [sp, #8]
    2242:	4648      	mov	r0, r9
    2244:	4301      	orrs	r1, r0
    2246:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2248:	3f01      	subs	r7, #1
    224a:	d2c8      	bcs.n	21de <_sercom_get_async_baud_val+0x106>
    224c:	9c00      	ldr	r4, [sp, #0]
    224e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    2250:	9902      	ldr	r1, [sp, #8]
    2252:	9a07      	ldr	r2, [sp, #28]
    2254:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    2256:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    2258:	4910      	ldr	r1, [pc, #64]	; (229c <_sercom_get_async_baud_val+0x1c4>)
    225a:	428b      	cmp	r3, r1
    225c:	d90b      	bls.n	2276 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    225e:	9b06      	ldr	r3, [sp, #24]
    2260:	3301      	adds	r3, #1
    2262:	b2db      	uxtb	r3, r3
    2264:	0019      	movs	r1, r3
    2266:	9306      	str	r3, [sp, #24]
    2268:	0013      	movs	r3, r2
    226a:	3301      	adds	r3, #1
    226c:	9307      	str	r3, [sp, #28]
    226e:	2908      	cmp	r1, #8
    2270:	d1ad      	bne.n	21ce <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2272:	2540      	movs	r5, #64	; 0x40
    2274:	e008      	b.n	2288 <_sercom_get_async_baud_val+0x1b0>
    2276:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    2278:	9a06      	ldr	r2, [sp, #24]
    227a:	2a08      	cmp	r2, #8
    227c:	d004      	beq.n	2288 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    227e:	0352      	lsls	r2, r2, #13
    2280:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    2282:	9b05      	ldr	r3, [sp, #20]
    2284:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    2286:	2500      	movs	r5, #0
}
    2288:	0028      	movs	r0, r5
    228a:	b009      	add	sp, #36	; 0x24
    228c:	bc3c      	pop	{r2, r3, r4, r5}
    228e:	4690      	mov	r8, r2
    2290:	4699      	mov	r9, r3
    2292:	46a2      	mov	sl, r4
    2294:	46ab      	mov	fp, r5
    2296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2298:	00004c99 	.word	0x00004c99
    229c:	00001fff 	.word	0x00001fff

000022a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    22a0:	b510      	push	{r4, lr}
    22a2:	b082      	sub	sp, #8
    22a4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    22a6:	4b0e      	ldr	r3, [pc, #56]	; (22e0 <sercom_set_gclk_generator+0x40>)
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d001      	beq.n	22b2 <sercom_set_gclk_generator+0x12>
    22ae:	2900      	cmp	r1, #0
    22b0:	d00d      	beq.n	22ce <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    22b2:	a901      	add	r1, sp, #4
    22b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    22b6:	2011      	movs	r0, #17
    22b8:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <sercom_set_gclk_generator+0x44>)
    22ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    22bc:	2011      	movs	r0, #17
    22be:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <sercom_set_gclk_generator+0x48>)
    22c0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    22c2:	4b07      	ldr	r3, [pc, #28]	; (22e0 <sercom_set_gclk_generator+0x40>)
    22c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    22c6:	2201      	movs	r2, #1
    22c8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    22ca:	2000      	movs	r0, #0
    22cc:	e006      	b.n	22dc <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    22ce:	4b04      	ldr	r3, [pc, #16]	; (22e0 <sercom_set_gclk_generator+0x40>)
    22d0:	785b      	ldrb	r3, [r3, #1]
    22d2:	4283      	cmp	r3, r0
    22d4:	d001      	beq.n	22da <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    22d6:	201d      	movs	r0, #29
    22d8:	e000      	b.n	22dc <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    22da:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    22dc:	b002      	add	sp, #8
    22de:	bd10      	pop	{r4, pc}
    22e0:	20000174 	.word	0x20000174
    22e4:	000035f5 	.word	0x000035f5
    22e8:	00003585 	.word	0x00003585

000022ec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    22ec:	4b44      	ldr	r3, [pc, #272]	; (2400 <_sercom_get_default_pad+0x114>)
    22ee:	4298      	cmp	r0, r3
    22f0:	d034      	beq.n	235c <_sercom_get_default_pad+0x70>
    22f2:	d807      	bhi.n	2304 <_sercom_get_default_pad+0x18>
    22f4:	2384      	movs	r3, #132	; 0x84
    22f6:	05db      	lsls	r3, r3, #23
    22f8:	4298      	cmp	r0, r3
    22fa:	d00d      	beq.n	2318 <_sercom_get_default_pad+0x2c>
    22fc:	4b41      	ldr	r3, [pc, #260]	; (2404 <_sercom_get_default_pad+0x118>)
    22fe:	4298      	cmp	r0, r3
    2300:	d01b      	beq.n	233a <_sercom_get_default_pad+0x4e>
    2302:	e06f      	b.n	23e4 <_sercom_get_default_pad+0xf8>
    2304:	4b40      	ldr	r3, [pc, #256]	; (2408 <_sercom_get_default_pad+0x11c>)
    2306:	4298      	cmp	r0, r3
    2308:	d04a      	beq.n	23a0 <_sercom_get_default_pad+0xb4>
    230a:	4b40      	ldr	r3, [pc, #256]	; (240c <_sercom_get_default_pad+0x120>)
    230c:	4298      	cmp	r0, r3
    230e:	d058      	beq.n	23c2 <_sercom_get_default_pad+0xd6>
    2310:	4b3f      	ldr	r3, [pc, #252]	; (2410 <_sercom_get_default_pad+0x124>)
    2312:	4298      	cmp	r0, r3
    2314:	d166      	bne.n	23e4 <_sercom_get_default_pad+0xf8>
    2316:	e032      	b.n	237e <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2318:	2901      	cmp	r1, #1
    231a:	d006      	beq.n	232a <_sercom_get_default_pad+0x3e>
    231c:	2900      	cmp	r1, #0
    231e:	d063      	beq.n	23e8 <_sercom_get_default_pad+0xfc>
    2320:	2902      	cmp	r1, #2
    2322:	d006      	beq.n	2332 <_sercom_get_default_pad+0x46>
    2324:	2903      	cmp	r1, #3
    2326:	d006      	beq.n	2336 <_sercom_get_default_pad+0x4a>
    2328:	e001      	b.n	232e <_sercom_get_default_pad+0x42>
    232a:	483a      	ldr	r0, [pc, #232]	; (2414 <_sercom_get_default_pad+0x128>)
    232c:	e067      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    232e:	2000      	movs	r0, #0
    2330:	e065      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2332:	4839      	ldr	r0, [pc, #228]	; (2418 <_sercom_get_default_pad+0x12c>)
    2334:	e063      	b.n	23fe <_sercom_get_default_pad+0x112>
    2336:	4839      	ldr	r0, [pc, #228]	; (241c <_sercom_get_default_pad+0x130>)
    2338:	e061      	b.n	23fe <_sercom_get_default_pad+0x112>
    233a:	2901      	cmp	r1, #1
    233c:	d006      	beq.n	234c <_sercom_get_default_pad+0x60>
    233e:	2900      	cmp	r1, #0
    2340:	d054      	beq.n	23ec <_sercom_get_default_pad+0x100>
    2342:	2902      	cmp	r1, #2
    2344:	d006      	beq.n	2354 <_sercom_get_default_pad+0x68>
    2346:	2903      	cmp	r1, #3
    2348:	d006      	beq.n	2358 <_sercom_get_default_pad+0x6c>
    234a:	e001      	b.n	2350 <_sercom_get_default_pad+0x64>
    234c:	4834      	ldr	r0, [pc, #208]	; (2420 <_sercom_get_default_pad+0x134>)
    234e:	e056      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2350:	2000      	movs	r0, #0
    2352:	e054      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2354:	4833      	ldr	r0, [pc, #204]	; (2424 <_sercom_get_default_pad+0x138>)
    2356:	e052      	b.n	23fe <_sercom_get_default_pad+0x112>
    2358:	4833      	ldr	r0, [pc, #204]	; (2428 <_sercom_get_default_pad+0x13c>)
    235a:	e050      	b.n	23fe <_sercom_get_default_pad+0x112>
    235c:	2901      	cmp	r1, #1
    235e:	d006      	beq.n	236e <_sercom_get_default_pad+0x82>
    2360:	2900      	cmp	r1, #0
    2362:	d045      	beq.n	23f0 <_sercom_get_default_pad+0x104>
    2364:	2902      	cmp	r1, #2
    2366:	d006      	beq.n	2376 <_sercom_get_default_pad+0x8a>
    2368:	2903      	cmp	r1, #3
    236a:	d006      	beq.n	237a <_sercom_get_default_pad+0x8e>
    236c:	e001      	b.n	2372 <_sercom_get_default_pad+0x86>
    236e:	482f      	ldr	r0, [pc, #188]	; (242c <_sercom_get_default_pad+0x140>)
    2370:	e045      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2372:	2000      	movs	r0, #0
    2374:	e043      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2376:	482e      	ldr	r0, [pc, #184]	; (2430 <_sercom_get_default_pad+0x144>)
    2378:	e041      	b.n	23fe <_sercom_get_default_pad+0x112>
    237a:	482e      	ldr	r0, [pc, #184]	; (2434 <_sercom_get_default_pad+0x148>)
    237c:	e03f      	b.n	23fe <_sercom_get_default_pad+0x112>
    237e:	2901      	cmp	r1, #1
    2380:	d006      	beq.n	2390 <_sercom_get_default_pad+0xa4>
    2382:	2900      	cmp	r1, #0
    2384:	d036      	beq.n	23f4 <_sercom_get_default_pad+0x108>
    2386:	2902      	cmp	r1, #2
    2388:	d006      	beq.n	2398 <_sercom_get_default_pad+0xac>
    238a:	2903      	cmp	r1, #3
    238c:	d006      	beq.n	239c <_sercom_get_default_pad+0xb0>
    238e:	e001      	b.n	2394 <_sercom_get_default_pad+0xa8>
    2390:	4829      	ldr	r0, [pc, #164]	; (2438 <_sercom_get_default_pad+0x14c>)
    2392:	e034      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    2394:	2000      	movs	r0, #0
    2396:	e032      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2398:	4828      	ldr	r0, [pc, #160]	; (243c <_sercom_get_default_pad+0x150>)
    239a:	e030      	b.n	23fe <_sercom_get_default_pad+0x112>
    239c:	4828      	ldr	r0, [pc, #160]	; (2440 <_sercom_get_default_pad+0x154>)
    239e:	e02e      	b.n	23fe <_sercom_get_default_pad+0x112>
    23a0:	2901      	cmp	r1, #1
    23a2:	d006      	beq.n	23b2 <_sercom_get_default_pad+0xc6>
    23a4:	2900      	cmp	r1, #0
    23a6:	d027      	beq.n	23f8 <_sercom_get_default_pad+0x10c>
    23a8:	2902      	cmp	r1, #2
    23aa:	d006      	beq.n	23ba <_sercom_get_default_pad+0xce>
    23ac:	2903      	cmp	r1, #3
    23ae:	d006      	beq.n	23be <_sercom_get_default_pad+0xd2>
    23b0:	e001      	b.n	23b6 <_sercom_get_default_pad+0xca>
    23b2:	4824      	ldr	r0, [pc, #144]	; (2444 <_sercom_get_default_pad+0x158>)
    23b4:	e023      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    23b6:	2000      	movs	r0, #0
    23b8:	e021      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23ba:	4823      	ldr	r0, [pc, #140]	; (2448 <_sercom_get_default_pad+0x15c>)
    23bc:	e01f      	b.n	23fe <_sercom_get_default_pad+0x112>
    23be:	4823      	ldr	r0, [pc, #140]	; (244c <_sercom_get_default_pad+0x160>)
    23c0:	e01d      	b.n	23fe <_sercom_get_default_pad+0x112>
    23c2:	2901      	cmp	r1, #1
    23c4:	d006      	beq.n	23d4 <_sercom_get_default_pad+0xe8>
    23c6:	2900      	cmp	r1, #0
    23c8:	d018      	beq.n	23fc <_sercom_get_default_pad+0x110>
    23ca:	2902      	cmp	r1, #2
    23cc:	d006      	beq.n	23dc <_sercom_get_default_pad+0xf0>
    23ce:	2903      	cmp	r1, #3
    23d0:	d006      	beq.n	23e0 <_sercom_get_default_pad+0xf4>
    23d2:	e001      	b.n	23d8 <_sercom_get_default_pad+0xec>
    23d4:	481e      	ldr	r0, [pc, #120]	; (2450 <_sercom_get_default_pad+0x164>)
    23d6:	e012      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    23d8:	2000      	movs	r0, #0
    23da:	e010      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23dc:	481d      	ldr	r0, [pc, #116]	; (2454 <_sercom_get_default_pad+0x168>)
    23de:	e00e      	b.n	23fe <_sercom_get_default_pad+0x112>
    23e0:	481d      	ldr	r0, [pc, #116]	; (2458 <_sercom_get_default_pad+0x16c>)
    23e2:	e00c      	b.n	23fe <_sercom_get_default_pad+0x112>
	}

	Assert(false);
	return 0;
    23e4:	2000      	movs	r0, #0
    23e6:	e00a      	b.n	23fe <_sercom_get_default_pad+0x112>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23e8:	481c      	ldr	r0, [pc, #112]	; (245c <_sercom_get_default_pad+0x170>)
    23ea:	e008      	b.n	23fe <_sercom_get_default_pad+0x112>
    23ec:	2003      	movs	r0, #3
    23ee:	e006      	b.n	23fe <_sercom_get_default_pad+0x112>
    23f0:	481b      	ldr	r0, [pc, #108]	; (2460 <_sercom_get_default_pad+0x174>)
    23f2:	e004      	b.n	23fe <_sercom_get_default_pad+0x112>
    23f4:	481b      	ldr	r0, [pc, #108]	; (2464 <_sercom_get_default_pad+0x178>)
    23f6:	e002      	b.n	23fe <_sercom_get_default_pad+0x112>
    23f8:	481b      	ldr	r0, [pc, #108]	; (2468 <_sercom_get_default_pad+0x17c>)
    23fa:	e000      	b.n	23fe <_sercom_get_default_pad+0x112>
    23fc:	481b      	ldr	r0, [pc, #108]	; (246c <_sercom_get_default_pad+0x180>)
	}

	Assert(false);
	return 0;
}
    23fe:	4770      	bx	lr
    2400:	42000800 	.word	0x42000800
    2404:	42000400 	.word	0x42000400
    2408:	42001000 	.word	0x42001000
    240c:	43000400 	.word	0x43000400
    2410:	42000c00 	.word	0x42000c00
    2414:	00050003 	.word	0x00050003
    2418:	00060003 	.word	0x00060003
    241c:	00070003 	.word	0x00070003
    2420:	00010003 	.word	0x00010003
    2424:	001e0003 	.word	0x001e0003
    2428:	001f0003 	.word	0x001f0003
    242c:	00090003 	.word	0x00090003
    2430:	000a0003 	.word	0x000a0003
    2434:	000b0003 	.word	0x000b0003
    2438:	00110003 	.word	0x00110003
    243c:	00120003 	.word	0x00120003
    2440:	00130003 	.word	0x00130003
    2444:	000d0003 	.word	0x000d0003
    2448:	000e0003 	.word	0x000e0003
    244c:	000f0003 	.word	0x000f0003
    2450:	00170003 	.word	0x00170003
    2454:	00180003 	.word	0x00180003
    2458:	00190003 	.word	0x00190003
    245c:	00040003 	.word	0x00040003
    2460:	00080003 	.word	0x00080003
    2464:	00100003 	.word	0x00100003
    2468:	000c0003 	.word	0x000c0003
    246c:	00160003 	.word	0x00160003

00002470 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2470:	b530      	push	{r4, r5, lr}
    2472:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2474:	4b0c      	ldr	r3, [pc, #48]	; (24a8 <_sercom_get_sercom_inst_index+0x38>)
    2476:	466a      	mov	r2, sp
    2478:	cb32      	ldmia	r3!, {r1, r4, r5}
    247a:	c232      	stmia	r2!, {r1, r4, r5}
    247c:	cb32      	ldmia	r3!, {r1, r4, r5}
    247e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2480:	9b00      	ldr	r3, [sp, #0]
    2482:	4283      	cmp	r3, r0
    2484:	d006      	beq.n	2494 <_sercom_get_sercom_inst_index+0x24>
    2486:	2301      	movs	r3, #1
    2488:	009a      	lsls	r2, r3, #2
    248a:	4669      	mov	r1, sp
    248c:	5852      	ldr	r2, [r2, r1]
    248e:	4282      	cmp	r2, r0
    2490:	d103      	bne.n	249a <_sercom_get_sercom_inst_index+0x2a>
    2492:	e000      	b.n	2496 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2494:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    2496:	b2d8      	uxtb	r0, r3
    2498:	e003      	b.n	24a2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    249a:	3301      	adds	r3, #1
    249c:	2b06      	cmp	r3, #6
    249e:	d1f3      	bne.n	2488 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    24a0:	2000      	movs	r0, #0
}
    24a2:	b007      	add	sp, #28
    24a4:	bd30      	pop	{r4, r5, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	0000558c 	.word	0x0000558c

000024ac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    24ac:	4770      	bx	lr
    24ae:	46c0      	nop			; (mov r8, r8)

000024b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    24b2:	4b0a      	ldr	r3, [pc, #40]	; (24dc <_sercom_set_handler+0x2c>)
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	2b00      	cmp	r3, #0
    24b8:	d10c      	bne.n	24d4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    24ba:	4f09      	ldr	r7, [pc, #36]	; (24e0 <_sercom_set_handler+0x30>)
    24bc:	4e09      	ldr	r6, [pc, #36]	; (24e4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    24be:	4d0a      	ldr	r5, [pc, #40]	; (24e8 <_sercom_set_handler+0x38>)
    24c0:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    24c2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    24c4:	195a      	adds	r2, r3, r5
    24c6:	6014      	str	r4, [r2, #0]
    24c8:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    24ca:	2b18      	cmp	r3, #24
    24cc:	d1f9      	bne.n	24c2 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    24ce:	2201      	movs	r2, #1
    24d0:	4b02      	ldr	r3, [pc, #8]	; (24dc <_sercom_set_handler+0x2c>)
    24d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    24d4:	0080      	lsls	r0, r0, #2
    24d6:	4b02      	ldr	r3, [pc, #8]	; (24e0 <_sercom_set_handler+0x30>)
    24d8:	50c1      	str	r1, [r0, r3]
}
    24da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24dc:	20000176 	.word	0x20000176
    24e0:	20000178 	.word	0x20000178
    24e4:	000024ad 	.word	0x000024ad
    24e8:	20000564 	.word	0x20000564

000024ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    24ec:	b510      	push	{r4, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    24f2:	2206      	movs	r2, #6
    24f4:	4905      	ldr	r1, [pc, #20]	; (250c <_sercom_get_interrupt_vector+0x20>)
    24f6:	4668      	mov	r0, sp
    24f8:	4b05      	ldr	r3, [pc, #20]	; (2510 <_sercom_get_interrupt_vector+0x24>)
    24fa:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    24fc:	0020      	movs	r0, r4
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <_sercom_get_interrupt_vector+0x28>)
    2500:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2502:	466b      	mov	r3, sp
    2504:	5618      	ldrsb	r0, [r3, r0]
}
    2506:	b002      	add	sp, #8
    2508:	bd10      	pop	{r4, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	000055a4 	.word	0x000055a4
    2510:	00004d3d 	.word	0x00004d3d
    2514:	00002471 	.word	0x00002471

00002518 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2518:	b510      	push	{r4, lr}
    251a:	4b02      	ldr	r3, [pc, #8]	; (2524 <SERCOM0_Handler+0xc>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	2000      	movs	r0, #0
    2520:	4798      	blx	r3
    2522:	bd10      	pop	{r4, pc}
    2524:	20000178 	.word	0x20000178

00002528 <SERCOM1_Handler>:
    2528:	b510      	push	{r4, lr}
    252a:	4b02      	ldr	r3, [pc, #8]	; (2534 <SERCOM1_Handler+0xc>)
    252c:	685b      	ldr	r3, [r3, #4]
    252e:	2001      	movs	r0, #1
    2530:	4798      	blx	r3
    2532:	bd10      	pop	{r4, pc}
    2534:	20000178 	.word	0x20000178

00002538 <SERCOM2_Handler>:
    2538:	b510      	push	{r4, lr}
    253a:	4b02      	ldr	r3, [pc, #8]	; (2544 <SERCOM2_Handler+0xc>)
    253c:	689b      	ldr	r3, [r3, #8]
    253e:	2002      	movs	r0, #2
    2540:	4798      	blx	r3
    2542:	bd10      	pop	{r4, pc}
    2544:	20000178 	.word	0x20000178

00002548 <SERCOM3_Handler>:
    2548:	b510      	push	{r4, lr}
    254a:	4b02      	ldr	r3, [pc, #8]	; (2554 <SERCOM3_Handler+0xc>)
    254c:	68db      	ldr	r3, [r3, #12]
    254e:	2003      	movs	r0, #3
    2550:	4798      	blx	r3
    2552:	bd10      	pop	{r4, pc}
    2554:	20000178 	.word	0x20000178

00002558 <SERCOM4_Handler>:
    2558:	b510      	push	{r4, lr}
    255a:	4b02      	ldr	r3, [pc, #8]	; (2564 <SERCOM4_Handler+0xc>)
    255c:	691b      	ldr	r3, [r3, #16]
    255e:	2004      	movs	r0, #4
    2560:	4798      	blx	r3
    2562:	bd10      	pop	{r4, pc}
    2564:	20000178 	.word	0x20000178

00002568 <SERCOM5_Handler>:
    2568:	b510      	push	{r4, lr}
    256a:	4b02      	ldr	r3, [pc, #8]	; (2574 <SERCOM5_Handler+0xc>)
    256c:	695b      	ldr	r3, [r3, #20]
    256e:	2005      	movs	r0, #5
    2570:	4798      	blx	r3
    2572:	bd10      	pop	{r4, pc}
    2574:	20000178 	.word	0x20000178

00002578 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
    257a:	4657      	mov	r7, sl
    257c:	464e      	mov	r6, r9
    257e:	4645      	mov	r5, r8
    2580:	b4e0      	push	{r5, r6, r7}
    2582:	b088      	sub	sp, #32
    2584:	4680      	mov	r8, r0
    2586:	000e      	movs	r6, r1
    2588:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    258a:	0003      	movs	r3, r0
    258c:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    258e:	680b      	ldr	r3, [r1, #0]
    2590:	079b      	lsls	r3, r3, #30
    2592:	d400      	bmi.n	2596 <spi_init+0x1e>
    2594:	e08c      	b.n	26b0 <spi_init+0x138>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    2596:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2598:	9303      	str	r3, [sp, #12]
    259a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    259c:	9304      	str	r3, [sp, #16]
    259e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    25a0:	9305      	str	r3, [sp, #20]
    25a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    25a4:	9306      	str	r3, [sp, #24]
    25a6:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    25a8:	231f      	movs	r3, #31
    25aa:	4699      	mov	r9, r3
    25ac:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25ae:	00bb      	lsls	r3, r7, #2
    25b0:	aa03      	add	r2, sp, #12
    25b2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    25b4:	2800      	cmp	r0, #0
    25b6:	d102      	bne.n	25be <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    25b8:	0030      	movs	r0, r6
    25ba:	4b96      	ldr	r3, [pc, #600]	; (2814 <spi_init+0x29c>)
    25bc:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    25be:	1c43      	adds	r3, r0, #1
    25c0:	d027      	beq.n	2612 <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    25c2:	0402      	lsls	r2, r0, #16
    25c4:	0c13      	lsrs	r3, r2, #16
    25c6:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    25c8:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    25ca:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    25cc:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    25ce:	0603      	lsls	r3, r0, #24
    25d0:	d403      	bmi.n	25da <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
    25d2:	094b      	lsrs	r3, r1, #5
    25d4:	01db      	lsls	r3, r3, #7
    25d6:	4a90      	ldr	r2, [pc, #576]	; (2818 <spi_init+0x2a0>)
    25d8:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    25da:	464b      	mov	r3, r9
    25dc:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    25de:	18e8      	adds	r0, r5, r3
    25e0:	3040      	adds	r0, #64	; 0x40
    25e2:	7800      	ldrb	r0, [r0, #0]
    25e4:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    25e6:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    25e8:	4652      	mov	r2, sl
    25ea:	07d2      	lsls	r2, r2, #31
    25ec:	d50a      	bpl.n	2604 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    25ee:	085b      	lsrs	r3, r3, #1
    25f0:	18eb      	adds	r3, r5, r3
    25f2:	3330      	adds	r3, #48	; 0x30
    25f4:	7818      	ldrb	r0, [r3, #0]
    25f6:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    25f8:	07cb      	lsls	r3, r1, #31
    25fa:	d501      	bpl.n	2600 <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    25fc:	0900      	lsrs	r0, r0, #4
    25fe:	e001      	b.n	2604 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2600:	230f      	movs	r3, #15
    2602:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2604:	4584      	cmp	ip, r0
    2606:	d004      	beq.n	2612 <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    2608:	2300      	movs	r3, #0
    260a:	4642      	mov	r2, r8
    260c:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    260e:	201c      	movs	r0, #28
    2610:	e0f9      	b.n	2806 <spi_init+0x28e>
    2612:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2614:	2f04      	cmp	r7, #4
    2616:	d1c9      	bne.n	25ac <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2618:	2011      	movs	r0, #17
    261a:	4b80      	ldr	r3, [pc, #512]	; (281c <spi_init+0x2a4>)
    261c:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    261e:	7822      	ldrb	r2, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    2620:	2500      	movs	r5, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2622:	2a01      	cmp	r2, #1
    2624:	d112      	bne.n	264c <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2626:	aa02      	add	r2, sp, #8
    2628:	0001      	movs	r1, r0
    262a:	69a0      	ldr	r0, [r4, #24]
    262c:	4b7c      	ldr	r3, [pc, #496]	; (2820 <spi_init+0x2a8>)
    262e:	4798      	blx	r3
    2630:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2632:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    2634:	2b00      	cmp	r3, #0
    2636:	d000      	beq.n	263a <spi_init+0xc2>
    2638:	e0e5      	b.n	2806 <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    263a:	7b33      	ldrb	r3, [r6, #12]
    263c:	b2db      	uxtb	r3, r3
    263e:	aa02      	add	r2, sp, #8
    2640:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    2642:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2644:	429a      	cmp	r2, r3
    2646:	d000      	beq.n	264a <spi_init+0xd2>
    2648:	e0dd      	b.n	2806 <spi_init+0x28e>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    264a:	350c      	adds	r5, #12

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    264c:	6863      	ldr	r3, [r4, #4]
    264e:	68a2      	ldr	r2, [r4, #8]
    2650:	4313      	orrs	r3, r2
    2652:	68e2      	ldr	r2, [r4, #12]
    2654:	4313      	orrs	r3, r2
    2656:	432b      	orrs	r3, r5

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2658:	7c21      	ldrb	r1, [r4, #16]

	if (config->run_in_standby) {
    265a:	7c62      	ldrb	r2, [r4, #17]
    265c:	2a00      	cmp	r2, #0
    265e:	d001      	beq.n	2664 <spi_init+0xec>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2660:	2280      	movs	r2, #128	; 0x80
    2662:	4313      	orrs	r3, r2
	}

	if (config->receiver_enable) {
    2664:	7ca2      	ldrb	r2, [r4, #18]
    2666:	2a00      	cmp	r2, #0
    2668:	d002      	beq.n	2670 <spi_init+0xf8>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    266a:	2280      	movs	r2, #128	; 0x80
    266c:	0292      	lsls	r2, r2, #10
    266e:	4311      	orrs	r1, r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2670:	7ce2      	ldrb	r2, [r4, #19]
    2672:	2a00      	cmp	r2, #0
    2674:	d002      	beq.n	267c <spi_init+0x104>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2676:	2280      	movs	r2, #128	; 0x80
    2678:	0092      	lsls	r2, r2, #2
    267a:	4311      	orrs	r1, r2
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    267c:	7d22      	ldrb	r2, [r4, #20]
    267e:	2a00      	cmp	r2, #0
    2680:	d002      	beq.n	2688 <spi_init+0x110>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2682:	2280      	movs	r2, #128	; 0x80
    2684:	0192      	lsls	r2, r2, #6
    2686:	4311      	orrs	r1, r2
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2688:	6830      	ldr	r0, [r6, #0]
    268a:	2202      	movs	r2, #2
    268c:	4313      	orrs	r3, r2
    268e:	4283      	cmp	r3, r0
    2690:	d109      	bne.n	26a6 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
    2692:	6873      	ldr	r3, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2694:	428b      	cmp	r3, r1
    2696:	d106      	bne.n	26a6 <spi_init+0x12e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    2698:	7823      	ldrb	r3, [r4, #0]
    269a:	4642      	mov	r2, r8
    269c:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    269e:	7c23      	ldrb	r3, [r4, #16]
    26a0:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    26a2:	2000      	movs	r0, #0
    26a4:	e0af      	b.n	2806 <spi_init+0x28e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    26a6:	2300      	movs	r3, #0
    26a8:	4642      	mov	r2, r8
    26aa:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    26ac:	201c      	movs	r0, #28
    26ae:	e0aa      	b.n	2806 <spi_init+0x28e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    26b0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    26b2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    26b4:	07db      	lsls	r3, r3, #31
    26b6:	d500      	bpl.n	26ba <spi_init+0x142>
    26b8:	e0a5      	b.n	2806 <spi_init+0x28e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26ba:	0008      	movs	r0, r1
    26bc:	4b59      	ldr	r3, [pc, #356]	; (2824 <spi_init+0x2ac>)
    26be:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    26c0:	2805      	cmp	r0, #5
    26c2:	d100      	bne.n	26c6 <spi_init+0x14e>
    26c4:	e098      	b.n	27f8 <spi_init+0x280>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26c6:	0003      	movs	r3, r0
    26c8:	3312      	adds	r3, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    26ca:	4d57      	ldr	r5, [pc, #348]	; (2828 <spi_init+0x2b0>)
    26cc:	69e9      	ldr	r1, [r5, #28]
    26ce:	2201      	movs	r2, #1
    26d0:	4082      	lsls	r2, r0
    26d2:	430a      	orrs	r2, r1
    26d4:	61ea      	str	r2, [r5, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    26d6:	a907      	add	r1, sp, #28
    26d8:	2724      	movs	r7, #36	; 0x24
    26da:	5de2      	ldrb	r2, [r4, r7]
    26dc:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    26de:	b2dd      	uxtb	r5, r3
    26e0:	0028      	movs	r0, r5
    26e2:	4b52      	ldr	r3, [pc, #328]	; (282c <spi_init+0x2b4>)
    26e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    26e6:	0028      	movs	r0, r5
    26e8:	4b51      	ldr	r3, [pc, #324]	; (2830 <spi_init+0x2b8>)
    26ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    26ec:	5de0      	ldrb	r0, [r4, r7]
    26ee:	2100      	movs	r1, #0
    26f0:	4b50      	ldr	r3, [pc, #320]	; (2834 <spi_init+0x2bc>)
    26f2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    26f4:	7823      	ldrb	r3, [r4, #0]
    26f6:	2b01      	cmp	r3, #1
    26f8:	d103      	bne.n	2702 <spi_init+0x18a>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    26fa:	6832      	ldr	r2, [r6, #0]
    26fc:	330b      	adds	r3, #11
    26fe:	4313      	orrs	r3, r2
    2700:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2702:	4643      	mov	r3, r8
    2704:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2706:	ab02      	add	r3, sp, #8
    2708:	2280      	movs	r2, #128	; 0x80
    270a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    270c:	2200      	movs	r2, #0
    270e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2710:	2101      	movs	r1, #1
    2712:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2714:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    2716:	7823      	ldrb	r3, [r4, #0]
    2718:	2b00      	cmp	r3, #0
    271a:	d101      	bne.n	2720 <spi_init+0x1a8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    271c:	ab02      	add	r3, sp, #8
    271e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    2720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2722:	9303      	str	r3, [sp, #12]
    2724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2726:	9304      	str	r3, [sp, #16]
    2728:	6b23      	ldr	r3, [r4, #48]	; 0x30
    272a:	9305      	str	r3, [sp, #20]
    272c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    272e:	9306      	str	r3, [sp, #24]
    2730:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2732:	ad02      	add	r5, sp, #8
    2734:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2736:	00bb      	lsls	r3, r7, #2
    2738:	aa03      	add	r2, sp, #12
    273a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    273c:	2800      	cmp	r0, #0
    273e:	d102      	bne.n	2746 <spi_init+0x1ce>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2740:	0030      	movs	r0, r6
    2742:	4b34      	ldr	r3, [pc, #208]	; (2814 <spi_init+0x29c>)
    2744:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2746:	1c43      	adds	r3, r0, #1
    2748:	d005      	beq.n	2756 <spi_init+0x1de>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    274a:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    274c:	0c00      	lsrs	r0, r0, #16
    274e:	b2c0      	uxtb	r0, r0
    2750:	0029      	movs	r1, r5
    2752:	4b39      	ldr	r3, [pc, #228]	; (2838 <spi_init+0x2c0>)
    2754:	4798      	blx	r3
    2756:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2758:	2f04      	cmp	r7, #4
    275a:	d1eb      	bne.n	2734 <spi_init+0x1bc>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    275c:	7823      	ldrb	r3, [r4, #0]
    275e:	4642      	mov	r2, r8
    2760:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    2762:	7c23      	ldrb	r3, [r4, #16]
    2764:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    2766:	7ca3      	ldrb	r3, [r4, #18]
    2768:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    276a:	7d23      	ldrb	r3, [r4, #20]
    276c:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    276e:	2200      	movs	r2, #0
    2770:	466b      	mov	r3, sp
    2772:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    2774:	7823      	ldrb	r3, [r4, #0]
    2776:	2b01      	cmp	r3, #1
    2778:	d115      	bne.n	27a6 <spi_init+0x22e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    277a:	4643      	mov	r3, r8
    277c:	6818      	ldr	r0, [r3, #0]
    277e:	4b29      	ldr	r3, [pc, #164]	; (2824 <spi_init+0x2ac>)
    2780:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2782:	3012      	adds	r0, #18
    2784:	b2c0      	uxtb	r0, r0
    2786:	4b25      	ldr	r3, [pc, #148]	; (281c <spi_init+0x2a4>)
    2788:	4798      	blx	r3
    278a:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    278c:	466b      	mov	r3, sp
    278e:	1d9a      	adds	r2, r3, #6
    2790:	69a0      	ldr	r0, [r4, #24]
    2792:	4b23      	ldr	r3, [pc, #140]	; (2820 <spi_init+0x2a8>)
    2794:	4798      	blx	r3
    2796:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2798:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    279a:	2b00      	cmp	r3, #0
    279c:	d133      	bne.n	2806 <spi_init+0x28e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    279e:	466b      	mov	r3, sp
    27a0:	3306      	adds	r3, #6
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    27a6:	6863      	ldr	r3, [r4, #4]
    27a8:	68a2      	ldr	r2, [r4, #8]
    27aa:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    27ac:	68e2      	ldr	r2, [r4, #12]
    27ae:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    27b0:	7c22      	ldrb	r2, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    27b2:	7c61      	ldrb	r1, [r4, #17]
    27b4:	2900      	cmp	r1, #0
    27b6:	d103      	bne.n	27c0 <spi_init+0x248>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    27b8:	4920      	ldr	r1, [pc, #128]	; (283c <spi_init+0x2c4>)
    27ba:	7889      	ldrb	r1, [r1, #2]
    27bc:	0789      	lsls	r1, r1, #30
    27be:	d501      	bpl.n	27c4 <spi_init+0x24c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    27c0:	2180      	movs	r1, #128	; 0x80
    27c2:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    27c4:	7ca1      	ldrb	r1, [r4, #18]
    27c6:	2900      	cmp	r1, #0
    27c8:	d002      	beq.n	27d0 <spi_init+0x258>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    27ca:	2180      	movs	r1, #128	; 0x80
    27cc:	0289      	lsls	r1, r1, #10
    27ce:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    27d0:	7ce1      	ldrb	r1, [r4, #19]
    27d2:	2900      	cmp	r1, #0
    27d4:	d002      	beq.n	27dc <spi_init+0x264>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    27d6:	2180      	movs	r1, #128	; 0x80
    27d8:	0089      	lsls	r1, r1, #2
    27da:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    27dc:	7d21      	ldrb	r1, [r4, #20]
    27de:	2900      	cmp	r1, #0
    27e0:	d002      	beq.n	27e8 <spi_init+0x270>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    27e2:	2180      	movs	r1, #128	; 0x80
    27e4:	0189      	lsls	r1, r1, #6
    27e6:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    27e8:	6831      	ldr	r1, [r6, #0]
    27ea:	430b      	orrs	r3, r1
    27ec:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    27ee:	6873      	ldr	r3, [r6, #4]
    27f0:	4313      	orrs	r3, r2
    27f2:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    27f4:	2000      	movs	r0, #0
    27f6:	e006      	b.n	2806 <spi_init+0x28e>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    27f8:	4a0b      	ldr	r2, [pc, #44]	; (2828 <spi_init+0x2b0>)
    27fa:	6a11      	ldr	r1, [r2, #32]
    27fc:	2302      	movs	r3, #2
    27fe:	430b      	orrs	r3, r1
    2800:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    2802:	2318      	movs	r3, #24
    2804:	e767      	b.n	26d6 <spi_init+0x15e>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2806:	b008      	add	sp, #32
    2808:	bc1c      	pop	{r2, r3, r4}
    280a:	4690      	mov	r8, r2
    280c:	4699      	mov	r9, r3
    280e:	46a2      	mov	sl, r4
    2810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	000022ed 	.word	0x000022ed
    2818:	40002800 	.word	0x40002800
    281c:	00003619 	.word	0x00003619
    2820:	000020b1 	.word	0x000020b1
    2824:	00002471 	.word	0x00002471
    2828:	40000400 	.word	0x40000400
    282c:	000035f5 	.word	0x000035f5
    2830:	00003585 	.word	0x00003585
    2834:	000022a1 	.word	0x000022a1
    2838:	000036f1 	.word	0x000036f1
    283c:	41002000 	.word	0x41002000

00002840 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2840:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2842:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2844:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2846:	2c01      	cmp	r4, #1
    2848:	d16e      	bne.n	2928 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    284a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    284c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    284e:	2c00      	cmp	r4, #0
    2850:	d16a      	bne.n	2928 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    2852:	2a00      	cmp	r2, #0
    2854:	d058      	beq.n	2908 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    2856:	784b      	ldrb	r3, [r1, #1]
    2858:	2b00      	cmp	r3, #0
    285a:	d044      	beq.n	28e6 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    285c:	6803      	ldr	r3, [r0, #0]
    285e:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    2860:	07db      	lsls	r3, r3, #31
    2862:	d410      	bmi.n	2886 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    2864:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2866:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2868:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    286a:	2900      	cmp	r1, #0
    286c:	d104      	bne.n	2878 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    286e:	095a      	lsrs	r2, r3, #5
    2870:	01d2      	lsls	r2, r2, #7
    2872:	492e      	ldr	r1, [pc, #184]	; (292c <spi_select_slave+0xec>)
    2874:	468c      	mov	ip, r1
    2876:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2878:	211f      	movs	r1, #31
    287a:	400b      	ands	r3, r1
    287c:	391e      	subs	r1, #30
    287e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2880:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    2882:	2305      	movs	r3, #5
    2884:	e050      	b.n	2928 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2886:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2888:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    288a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    288c:	2c00      	cmp	r4, #0
    288e:	d104      	bne.n	289a <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    2890:	095a      	lsrs	r2, r3, #5
    2892:	01d2      	lsls	r2, r2, #7
    2894:	4c25      	ldr	r4, [pc, #148]	; (292c <spi_select_slave+0xec>)
    2896:	46a4      	mov	ip, r4
    2898:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    289a:	241f      	movs	r4, #31
    289c:	4023      	ands	r3, r4
    289e:	3c1e      	subs	r4, #30
    28a0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    28a2:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28a4:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    28a6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    28a8:	07d2      	lsls	r2, r2, #31
    28aa:	d501      	bpl.n	28b0 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    28ac:	788a      	ldrb	r2, [r1, #2]
    28ae:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    28b0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    28b2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    28b4:	2a00      	cmp	r2, #0
    28b6:	d137      	bne.n	2928 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28b8:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    28ba:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    28bc:	7e13      	ldrb	r3, [r2, #24]
    28be:	420b      	tst	r3, r1
    28c0:	d0fc      	beq.n	28bc <spi_select_slave+0x7c>
    28c2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    28c4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    28c6:	0749      	lsls	r1, r1, #29
    28c8:	d52e      	bpl.n	2928 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    28ca:	8b53      	ldrh	r3, [r2, #26]
    28cc:	075b      	lsls	r3, r3, #29
    28ce:	d501      	bpl.n	28d4 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    28d0:	2304      	movs	r3, #4
    28d2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    28d4:	7983      	ldrb	r3, [r0, #6]
    28d6:	2b01      	cmp	r3, #1
    28d8:	d102      	bne.n	28e0 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    28da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    28dc:	2300      	movs	r3, #0
    28de:	e023      	b.n	2928 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    28e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    28e2:	2300      	movs	r3, #0
    28e4:	e020      	b.n	2928 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    28e6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28e8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    28ea:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28ec:	2900      	cmp	r1, #0
    28ee:	d104      	bne.n	28fa <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    28f0:	095a      	lsrs	r2, r3, #5
    28f2:	01d2      	lsls	r2, r2, #7
    28f4:	490d      	ldr	r1, [pc, #52]	; (292c <spi_select_slave+0xec>)
    28f6:	468c      	mov	ip, r1
    28f8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    28fa:	211f      	movs	r1, #31
    28fc:	400b      	ands	r3, r1
    28fe:	391e      	subs	r1, #30
    2900:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2902:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    2904:	2300      	movs	r3, #0
    2906:	e00f      	b.n	2928 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    2908:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    290a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    290c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    290e:	2900      	cmp	r1, #0
    2910:	d104      	bne.n	291c <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    2912:	095a      	lsrs	r2, r3, #5
    2914:	01d2      	lsls	r2, r2, #7
    2916:	4905      	ldr	r1, [pc, #20]	; (292c <spi_select_slave+0xec>)
    2918:	468c      	mov	ip, r1
    291a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    291c:	211f      	movs	r1, #31
    291e:	400b      	ands	r3, r1
    2920:	391e      	subs	r1, #30
    2922:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2924:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    2926:	2300      	movs	r3, #0
}
    2928:	0018      	movs	r0, r3
    292a:	bd10      	pop	{r4, pc}
    292c:	40002800 	.word	0x40002800

00002930 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2930:	b5f0      	push	{r4, r5, r6, r7, lr}
    2932:	465f      	mov	r7, fp
    2934:	4656      	mov	r6, sl
    2936:	464d      	mov	r5, r9
    2938:	4644      	mov	r4, r8
    293a:	b4f0      	push	{r4, r5, r6, r7}
    293c:	b091      	sub	sp, #68	; 0x44
    293e:	0005      	movs	r5, r0
    2940:	000c      	movs	r4, r1
    2942:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2944:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2946:	0008      	movs	r0, r1
    2948:	4bc4      	ldr	r3, [pc, #784]	; (2c5c <usart_init+0x32c>)
    294a:	4798      	blx	r3
    294c:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    294e:	2a05      	cmp	r2, #5
    2950:	d003      	beq.n	295a <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2952:	0007      	movs	r7, r0
    2954:	3712      	adds	r7, #18
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2956:	0003      	movs	r3, r0
    2958:	e001      	b.n	295e <usart_init+0x2e>
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    295a:	2718      	movs	r7, #24
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    295c:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    295e:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2960:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2962:	07c9      	lsls	r1, r1, #31
    2964:	d500      	bpl.n	2968 <usart_init+0x38>
    2966:	e171      	b.n	2c4c <usart_init+0x31c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2968:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    296a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    296c:	0789      	lsls	r1, r1, #30
    296e:	d500      	bpl.n	2972 <usart_init+0x42>
    2970:	e16c      	b.n	2c4c <usart_init+0x31c>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    2972:	2a05      	cmp	r2, #5
    2974:	d107      	bne.n	2986 <usart_init+0x56>
    2976:	48ba      	ldr	r0, [pc, #744]	; (2c60 <usart_init+0x330>)
    2978:	6a02      	ldr	r2, [r0, #32]
    297a:	2101      	movs	r1, #1
    297c:	4099      	lsls	r1, r3
    297e:	000b      	movs	r3, r1
    2980:	4313      	orrs	r3, r2
    2982:	6203      	str	r3, [r0, #32]
    2984:	e006      	b.n	2994 <usart_init+0x64>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2986:	48b6      	ldr	r0, [pc, #728]	; (2c60 <usart_init+0x330>)
    2988:	69c2      	ldr	r2, [r0, #28]
    298a:	2101      	movs	r1, #1
    298c:	4099      	lsls	r1, r3
    298e:	000b      	movs	r3, r1
    2990:	4313      	orrs	r3, r2
    2992:	61c3      	str	r3, [r0, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2994:	a90f      	add	r1, sp, #60	; 0x3c
    2996:	232d      	movs	r3, #45	; 0x2d
    2998:	4698      	mov	r8, r3
    299a:	5cf3      	ldrb	r3, [r6, r3]
    299c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    299e:	b2ff      	uxtb	r7, r7
    29a0:	0038      	movs	r0, r7
    29a2:	4bb0      	ldr	r3, [pc, #704]	; (2c64 <usart_init+0x334>)
    29a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    29a6:	0038      	movs	r0, r7
    29a8:	4baf      	ldr	r3, [pc, #700]	; (2c68 <usart_init+0x338>)
    29aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    29ac:	4643      	mov	r3, r8
    29ae:	5cf0      	ldrb	r0, [r6, r3]
    29b0:	2100      	movs	r1, #0
    29b2:	4bae      	ldr	r3, [pc, #696]	; (2c6c <usart_init+0x33c>)
    29b4:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    29b6:	7af3      	ldrb	r3, [r6, #11]
    29b8:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    29ba:	2324      	movs	r3, #36	; 0x24
    29bc:	5cf3      	ldrb	r3, [r6, r3]
    29be:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    29c0:	2325      	movs	r3, #37	; 0x25
    29c2:	5cf3      	ldrb	r3, [r6, r3]
    29c4:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    29c6:	7ef3      	ldrb	r3, [r6, #27]
    29c8:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    29ca:	7f33      	ldrb	r3, [r6, #28]
    29cc:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29ce:	682b      	ldr	r3, [r5, #0]
    29d0:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29d2:	0018      	movs	r0, r3
    29d4:	4ba1      	ldr	r3, [pc, #644]	; (2c5c <usart_init+0x32c>)
    29d6:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    29d8:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    29da:	2200      	movs	r2, #0
    29dc:	230e      	movs	r3, #14
    29de:	a906      	add	r1, sp, #24
    29e0:	468c      	mov	ip, r1
    29e2:	4463      	add	r3, ip
    29e4:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    29e6:	8a32      	ldrh	r2, [r6, #16]
    29e8:	9202      	str	r2, [sp, #8]
    29ea:	2380      	movs	r3, #128	; 0x80
    29ec:	01db      	lsls	r3, r3, #7
    29ee:	429a      	cmp	r2, r3
    29f0:	d01a      	beq.n	2a28 <usart_init+0xf8>
    29f2:	d804      	bhi.n	29fe <usart_init+0xce>
    29f4:	2380      	movs	r3, #128	; 0x80
    29f6:	019b      	lsls	r3, r3, #6
    29f8:	429a      	cmp	r2, r3
    29fa:	d00b      	beq.n	2a14 <usart_init+0xe4>
    29fc:	e107      	b.n	2c0e <usart_init+0x2de>
    29fe:	23c0      	movs	r3, #192	; 0xc0
    2a00:	01db      	lsls	r3, r3, #7
    2a02:	9a02      	ldr	r2, [sp, #8]
    2a04:	429a      	cmp	r2, r3
    2a06:	d00a      	beq.n	2a1e <usart_init+0xee>
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	021b      	lsls	r3, r3, #8
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d100      	bne.n	2a12 <usart_init+0xe2>
    2a10:	e102      	b.n	2c18 <usart_init+0x2e8>
    2a12:	e0fc      	b.n	2c0e <usart_init+0x2de>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2a14:	2310      	movs	r3, #16
    2a16:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2a18:	3b0f      	subs	r3, #15
    2a1a:	9307      	str	r3, [sp, #28]
    2a1c:	e100      	b.n	2c20 <usart_init+0x2f0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a1e:	2308      	movs	r3, #8
    2a20:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2a22:	3b07      	subs	r3, #7
    2a24:	9307      	str	r3, [sp, #28]
    2a26:	e0fb      	b.n	2c20 <usart_init+0x2f0>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2a28:	6833      	ldr	r3, [r6, #0]
    2a2a:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    2a2c:	68f3      	ldr	r3, [r6, #12]
    2a2e:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2a30:	6973      	ldr	r3, [r6, #20]
    2a32:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a34:	7e33      	ldrb	r3, [r6, #24]
    2a36:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a38:	2326      	movs	r3, #38	; 0x26
    2a3a:	5cf3      	ldrb	r3, [r6, r3]
    2a3c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2a3e:	6873      	ldr	r3, [r6, #4]
    2a40:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2a42:	2b00      	cmp	r3, #0
    2a44:	d016      	beq.n	2a74 <usart_init+0x144>
    2a46:	2380      	movs	r3, #128	; 0x80
    2a48:	055b      	lsls	r3, r3, #21
    2a4a:	459a      	cmp	sl, r3
    2a4c:	d139      	bne.n	2ac2 <usart_init+0x192>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2a4e:	2327      	movs	r3, #39	; 0x27
    2a50:	5cf3      	ldrb	r3, [r6, r3]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d139      	bne.n	2aca <usart_init+0x19a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2a56:	6a33      	ldr	r3, [r6, #32]
    2a58:	001f      	movs	r7, r3
    2a5a:	b2c0      	uxtb	r0, r0
    2a5c:	4b84      	ldr	r3, [pc, #528]	; (2c70 <usart_init+0x340>)
    2a5e:	4798      	blx	r3
    2a60:	0001      	movs	r1, r0
    2a62:	220e      	movs	r2, #14
    2a64:	ab06      	add	r3, sp, #24
    2a66:	469c      	mov	ip, r3
    2a68:	4462      	add	r2, ip
    2a6a:	0038      	movs	r0, r7
    2a6c:	4b81      	ldr	r3, [pc, #516]	; (2c74 <usart_init+0x344>)
    2a6e:	4798      	blx	r3
    2a70:	0003      	movs	r3, r0
    2a72:	e027      	b.n	2ac4 <usart_init+0x194>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a74:	2308      	movs	r3, #8
    2a76:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a78:	2300      	movs	r3, #0
    2a7a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2a7c:	2327      	movs	r3, #39	; 0x27
    2a7e:	5cf3      	ldrb	r3, [r6, r3]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d00c      	beq.n	2a9e <usart_init+0x16e>
				status_code =
    2a84:	9b06      	ldr	r3, [sp, #24]
    2a86:	9300      	str	r3, [sp, #0]
    2a88:	9b07      	ldr	r3, [sp, #28]
    2a8a:	220e      	movs	r2, #14
    2a8c:	a906      	add	r1, sp, #24
    2a8e:	468c      	mov	ip, r1
    2a90:	4462      	add	r2, ip
    2a92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a94:	6a30      	ldr	r0, [r6, #32]
    2a96:	4f78      	ldr	r7, [pc, #480]	; (2c78 <usart_init+0x348>)
    2a98:	47b8      	blx	r7
    2a9a:	0003      	movs	r3, r0
    2a9c:	e012      	b.n	2ac4 <usart_init+0x194>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2a9e:	6a33      	ldr	r3, [r6, #32]
    2aa0:	001f      	movs	r7, r3
    2aa2:	b2c0      	uxtb	r0, r0
    2aa4:	4b72      	ldr	r3, [pc, #456]	; (2c70 <usart_init+0x340>)
    2aa6:	4798      	blx	r3
    2aa8:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2aaa:	9b06      	ldr	r3, [sp, #24]
    2aac:	9300      	str	r3, [sp, #0]
    2aae:	9b07      	ldr	r3, [sp, #28]
    2ab0:	220e      	movs	r2, #14
    2ab2:	a806      	add	r0, sp, #24
    2ab4:	4684      	mov	ip, r0
    2ab6:	4462      	add	r2, ip
    2ab8:	0038      	movs	r0, r7
    2aba:	4f6f      	ldr	r7, [pc, #444]	; (2c78 <usart_init+0x348>)
    2abc:	47b8      	blx	r7
    2abe:	0003      	movs	r3, r0
    2ac0:	e000      	b.n	2ac4 <usart_init+0x194>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2ac2:	2300      	movs	r3, #0
    2ac4:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2ac6:	d000      	beq.n	2aca <usart_init+0x19a>
    2ac8:	e0c0      	b.n	2c4c <usart_init+0x31c>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2aca:	7e73      	ldrb	r3, [r6, #25]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d002      	beq.n	2ad6 <usart_init+0x1a6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2ad0:	7eb3      	ldrb	r3, [r6, #26]
    2ad2:	464a      	mov	r2, r9
    2ad4:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2ad6:	682a      	ldr	r2, [r5, #0]
    2ad8:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ada:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2adc:	2b00      	cmp	r3, #0
    2ade:	d1fc      	bne.n	2ada <usart_init+0x1aa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2ae0:	330e      	adds	r3, #14
    2ae2:	aa06      	add	r2, sp, #24
    2ae4:	4694      	mov	ip, r2
    2ae6:	4463      	add	r3, ip
    2ae8:	881b      	ldrh	r3, [r3, #0]
    2aea:	464a      	mov	r2, r9
    2aec:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2aee:	9b04      	ldr	r3, [sp, #16]
    2af0:	465a      	mov	r2, fp
    2af2:	4313      	orrs	r3, r2
    2af4:	9a03      	ldr	r2, [sp, #12]
    2af6:	4313      	orrs	r3, r2
    2af8:	4652      	mov	r2, sl
    2afa:	4313      	orrs	r3, r2
    2afc:	433b      	orrs	r3, r7
    2afe:	4642      	mov	r2, r8
    2b00:	0212      	lsls	r2, r2, #8
    2b02:	4313      	orrs	r3, r2
    2b04:	9a05      	ldr	r2, [sp, #20]
    2b06:	0757      	lsls	r7, r2, #29
    2b08:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    2b0a:	2327      	movs	r3, #39	; 0x27
    2b0c:	5cf3      	ldrb	r3, [r6, r3]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d101      	bne.n	2b16 <usart_init+0x1e6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2b12:	3304      	adds	r3, #4
    2b14:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    2b16:	7e71      	ldrb	r1, [r6, #25]
    2b18:	0289      	lsls	r1, r1, #10
    2b1a:	7f33      	ldrb	r3, [r6, #28]
    2b1c:	025b      	lsls	r3, r3, #9
    2b1e:	4319      	orrs	r1, r3
    2b20:	7f73      	ldrb	r3, [r6, #29]
    2b22:	021b      	lsls	r3, r3, #8
    2b24:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2b26:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    2b28:	5cf3      	ldrb	r3, [r6, r3]
    2b2a:	045b      	lsls	r3, r3, #17
    2b2c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2b2e:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    2b30:	5cf2      	ldrb	r2, [r6, r3]
    2b32:	0412      	lsls	r2, r2, #16
    2b34:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    2b36:	7af3      	ldrb	r3, [r6, #11]
    2b38:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2b3a:	8933      	ldrh	r3, [r6, #8]
    2b3c:	2bff      	cmp	r3, #255	; 0xff
    2b3e:	d004      	beq.n	2b4a <usart_init+0x21a>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2b40:	2280      	movs	r2, #128	; 0x80
    2b42:	0452      	lsls	r2, r2, #17
    2b44:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2b46:	4319      	orrs	r1, r3
    2b48:	e005      	b.n	2b56 <usart_init+0x226>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2b4a:	7ef3      	ldrb	r3, [r6, #27]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d002      	beq.n	2b56 <usart_init+0x226>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2b50:	2380      	movs	r3, #128	; 0x80
    2b52:	04db      	lsls	r3, r3, #19
    2b54:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2b56:	232c      	movs	r3, #44	; 0x2c
    2b58:	5cf3      	ldrb	r3, [r6, r3]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d103      	bne.n	2b66 <usart_init+0x236>
    2b5e:	4b47      	ldr	r3, [pc, #284]	; (2c7c <usart_init+0x34c>)
    2b60:	789b      	ldrb	r3, [r3, #2]
    2b62:	079b      	lsls	r3, r3, #30
    2b64:	d501      	bpl.n	2b6a <usart_init+0x23a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2b66:	2380      	movs	r3, #128	; 0x80
    2b68:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2b6a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2b6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d1fc      	bne.n	2b6c <usart_init+0x23c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2b72:	464b      	mov	r3, r9
    2b74:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2b76:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2b78:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d1fc      	bne.n	2b78 <usart_init+0x248>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2b7e:	464b      	mov	r3, r9
    2b80:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b82:	ab0e      	add	r3, sp, #56	; 0x38
    2b84:	2280      	movs	r2, #128	; 0x80
    2b86:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b88:	2200      	movs	r2, #0
    2b8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2b8c:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b8e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    2b90:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2b92:	930a      	str	r3, [sp, #40]	; 0x28
    2b94:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2b96:	930b      	str	r3, [sp, #44]	; 0x2c
    2b98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2b9a:	930c      	str	r3, [sp, #48]	; 0x30
    2b9c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2b9e:	9302      	str	r3, [sp, #8]
    2ba0:	930d      	str	r3, [sp, #52]	; 0x34
    2ba2:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2ba4:	ae0e      	add	r6, sp, #56	; 0x38
    2ba6:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ba8:	00bb      	lsls	r3, r7, #2
    2baa:	aa0a      	add	r2, sp, #40	; 0x28
    2bac:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2bae:	2800      	cmp	r0, #0
    2bb0:	d102      	bne.n	2bb8 <usart_init+0x288>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2bb2:	0020      	movs	r0, r4
    2bb4:	4b32      	ldr	r3, [pc, #200]	; (2c80 <usart_init+0x350>)
    2bb6:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2bb8:	1c43      	adds	r3, r0, #1
    2bba:	d005      	beq.n	2bc8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2bbc:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2bbe:	0c00      	lsrs	r0, r0, #16
    2bc0:	b2c0      	uxtb	r0, r0
    2bc2:	0031      	movs	r1, r6
    2bc4:	4b2f      	ldr	r3, [pc, #188]	; (2c84 <usart_init+0x354>)
    2bc6:	4798      	blx	r3
    2bc8:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2bca:	2f04      	cmp	r7, #4
    2bcc:	d1eb      	bne.n	2ba6 <usart_init+0x276>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2bce:	2300      	movs	r3, #0
    2bd0:	60eb      	str	r3, [r5, #12]
    2bd2:	612b      	str	r3, [r5, #16]
    2bd4:	616b      	str	r3, [r5, #20]
    2bd6:	61ab      	str	r3, [r5, #24]
    2bd8:	61eb      	str	r3, [r5, #28]
    2bda:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    2bdc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2bde:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2be0:	2200      	movs	r2, #0
    2be2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2be4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2be6:	3330      	adds	r3, #48	; 0x30
    2be8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2bea:	3301      	adds	r3, #1
    2bec:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2bee:	3301      	adds	r3, #1
    2bf0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2bf2:	3301      	adds	r3, #1
    2bf4:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2bf6:	6828      	ldr	r0, [r5, #0]
    2bf8:	4b18      	ldr	r3, [pc, #96]	; (2c5c <usart_init+0x32c>)
    2bfa:	4798      	blx	r3
    2bfc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2bfe:	4922      	ldr	r1, [pc, #136]	; (2c88 <usart_init+0x358>)
    2c00:	4b22      	ldr	r3, [pc, #136]	; (2c8c <usart_init+0x35c>)
    2c02:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2c04:	00a4      	lsls	r4, r4, #2
    2c06:	4b22      	ldr	r3, [pc, #136]	; (2c90 <usart_init+0x360>)
    2c08:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    2c0a:	2000      	movs	r0, #0
    2c0c:	e01e      	b.n	2c4c <usart_init+0x31c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2c0e:	2310      	movs	r3, #16
    2c10:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c12:	2300      	movs	r3, #0
    2c14:	9307      	str	r3, [sp, #28]
    2c16:	e003      	b.n	2c20 <usart_init+0x2f0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2c18:	2303      	movs	r3, #3
    2c1a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c1c:	2300      	movs	r3, #0
    2c1e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2c20:	6833      	ldr	r3, [r6, #0]
    2c22:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    2c24:	68f3      	ldr	r3, [r6, #12]
    2c26:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2c28:	6973      	ldr	r3, [r6, #20]
    2c2a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c2c:	7e33      	ldrb	r3, [r6, #24]
    2c2e:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c30:	2326      	movs	r3, #38	; 0x26
    2c32:	5cf3      	ldrb	r3, [r6, r3]
    2c34:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2c36:	6873      	ldr	r3, [r6, #4]
    2c38:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d100      	bne.n	2c40 <usart_init+0x310>
    2c3e:	e71d      	b.n	2a7c <usart_init+0x14c>
    2c40:	2380      	movs	r3, #128	; 0x80
    2c42:	055b      	lsls	r3, r3, #21
    2c44:	459a      	cmp	sl, r3
    2c46:	d100      	bne.n	2c4a <usart_init+0x31a>
    2c48:	e701      	b.n	2a4e <usart_init+0x11e>
    2c4a:	e73e      	b.n	2aca <usart_init+0x19a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2c4c:	b011      	add	sp, #68	; 0x44
    2c4e:	bc3c      	pop	{r2, r3, r4, r5}
    2c50:	4690      	mov	r8, r2
    2c52:	4699      	mov	r9, r3
    2c54:	46a2      	mov	sl, r4
    2c56:	46ab      	mov	fp, r5
    2c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00002471 	.word	0x00002471
    2c60:	40000400 	.word	0x40000400
    2c64:	000035f5 	.word	0x000035f5
    2c68:	00003585 	.word	0x00003585
    2c6c:	000022a1 	.word	0x000022a1
    2c70:	00003619 	.word	0x00003619
    2c74:	000020b1 	.word	0x000020b1
    2c78:	000020d9 	.word	0x000020d9
    2c7c:	41002000 	.word	0x41002000
    2c80:	000022ed 	.word	0x000022ed
    2c84:	000036f1 	.word	0x000036f1
    2c88:	00002e7d 	.word	0x00002e7d
    2c8c:	000024b1 	.word	0x000024b1
    2c90:	20000564 	.word	0x20000564

00002c94 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2c94:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2c96:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2c98:	2a00      	cmp	r2, #0
    2c9a:	d00e      	beq.n	2cba <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2c9c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2c9e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2ca0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2ca2:	2a00      	cmp	r2, #0
    2ca4:	d109      	bne.n	2cba <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ca6:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ca8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2caa:	2a00      	cmp	r2, #0
    2cac:	d1fc      	bne.n	2ca8 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2cae:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2cb0:	2102      	movs	r1, #2
    2cb2:	7e1a      	ldrb	r2, [r3, #24]
    2cb4:	420a      	tst	r2, r1
    2cb6:	d0fc      	beq.n	2cb2 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2cb8:	2300      	movs	r3, #0
}
    2cba:	0018      	movs	r0, r3
    2cbc:	4770      	bx	lr
    2cbe:	46c0      	nop			; (mov r8, r8)

00002cc0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2cc0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2cc2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2cc4:	2a00      	cmp	r2, #0
    2cc6:	d030      	beq.n	2d2a <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2cc8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2cca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2ccc:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2cce:	2a00      	cmp	r2, #0
    2cd0:	d12b      	bne.n	2d2a <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2cd2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2cd4:	7e10      	ldrb	r0, [r2, #24]
    2cd6:	0740      	lsls	r0, r0, #29
    2cd8:	d527      	bpl.n	2d2a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2cda:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d1fc      	bne.n	2cda <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ce0:	8b53      	ldrh	r3, [r2, #26]
    2ce2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2ce4:	0698      	lsls	r0, r3, #26
    2ce6:	d01d      	beq.n	2d24 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2ce8:	0798      	lsls	r0, r3, #30
    2cea:	d503      	bpl.n	2cf4 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2cec:	2302      	movs	r3, #2
    2cee:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    2cf0:	3318      	adds	r3, #24
    2cf2:	e01a      	b.n	2d2a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2cf4:	0758      	lsls	r0, r3, #29
    2cf6:	d503      	bpl.n	2d00 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2cf8:	2304      	movs	r3, #4
    2cfa:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    2cfc:	331a      	adds	r3, #26
    2cfe:	e014      	b.n	2d2a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2d00:	07d8      	lsls	r0, r3, #31
    2d02:	d503      	bpl.n	2d0c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2d04:	2301      	movs	r3, #1
    2d06:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    2d08:	3312      	adds	r3, #18
    2d0a:	e00e      	b.n	2d2a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2d0c:	06d8      	lsls	r0, r3, #27
    2d0e:	d503      	bpl.n	2d18 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2d10:	2310      	movs	r3, #16
    2d12:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    2d14:	3332      	adds	r3, #50	; 0x32
    2d16:	e008      	b.n	2d2a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2d18:	069b      	lsls	r3, r3, #26
    2d1a:	d503      	bpl.n	2d24 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2d1c:	2320      	movs	r3, #32
    2d1e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2d20:	3321      	adds	r3, #33	; 0x21
    2d22:	e002      	b.n	2d2a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2d24:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2d26:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    2d28:	2300      	movs	r3, #0
}
    2d2a:	0018      	movs	r0, r3
    2d2c:	4770      	bx	lr
    2d2e:	46c0      	nop			; (mov r8, r8)

00002d30 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d32:	464f      	mov	r7, r9
    2d34:	b480      	push	{r7}
    2d36:	b082      	sub	sp, #8
    2d38:	0004      	movs	r4, r0
    2d3a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2d3c:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2d3e:	2a00      	cmp	r2, #0
    2d40:	d049      	beq.n	2dd6 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d42:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    2d44:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d46:	2b00      	cmp	r3, #0
    2d48:	d045      	beq.n	2dd6 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d4a:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2d4c:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d1fc      	bne.n	2d4c <usart_write_buffer_wait+0x1c>
    2d52:	4691      	mov	r9, r2
    2d54:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2d56:	2601      	movs	r6, #1
    2d58:	e020      	b.n	2d9c <usart_write_buffer_wait+0x6c>
    2d5a:	7e3a      	ldrb	r2, [r7, #24]
    2d5c:	4232      	tst	r2, r6
    2d5e:	d104      	bne.n	2d6a <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    2d60:	2b01      	cmp	r3, #1
    2d62:	d02a      	beq.n	2dba <usart_write_buffer_wait+0x8a>
    2d64:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2d66:	2b00      	cmp	r3, #0
    2d68:	d1f7      	bne.n	2d5a <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2d6a:	1c6a      	adds	r2, r5, #1
    2d6c:	b292      	uxth	r2, r2
    2d6e:	9b01      	ldr	r3, [sp, #4]
    2d70:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d72:	7961      	ldrb	r1, [r4, #5]
    2d74:	2901      	cmp	r1, #1
    2d76:	d002      	beq.n	2d7e <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2d78:	b299      	uxth	r1, r3
    2d7a:	0015      	movs	r5, r2
    2d7c:	e005      	b.n	2d8a <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    2d7e:	1ca9      	adds	r1, r5, #2
    2d80:	b28d      	uxth	r5, r1
    2d82:	9901      	ldr	r1, [sp, #4]
    2d84:	5c89      	ldrb	r1, [r1, r2]
    2d86:	0209      	lsls	r1, r1, #8
    2d88:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    2d8a:	0020      	movs	r0, r4
    2d8c:	4b14      	ldr	r3, [pc, #80]	; (2de0 <usart_write_buffer_wait+0xb0>)
    2d8e:	4798      	blx	r3
    2d90:	464a      	mov	r2, r9
    2d92:	3a01      	subs	r2, #1
    2d94:	b293      	uxth	r3, r2
    2d96:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d016      	beq.n	2dca <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2d9c:	7e3b      	ldrb	r3, [r7, #24]
    2d9e:	4233      	tst	r3, r6
    2da0:	d1e3      	bne.n	2d6a <usart_write_buffer_wait+0x3a>
    2da2:	4b10      	ldr	r3, [pc, #64]	; (2de4 <usart_write_buffer_wait+0xb4>)
    2da4:	e7d9      	b.n	2d5a <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2da6:	7e3a      	ldrb	r2, [r7, #24]
    2da8:	420a      	tst	r2, r1
    2daa:	d108      	bne.n	2dbe <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    2dac:	2b01      	cmp	r3, #1
    2dae:	d008      	beq.n	2dc2 <usart_write_buffer_wait+0x92>
    2db0:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2db2:	2b00      	cmp	r3, #0
    2db4:	d1f7      	bne.n	2da6 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    2db6:	2000      	movs	r0, #0
    2db8:	e00d      	b.n	2dd6 <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    2dba:	2012      	movs	r0, #18
    2dbc:	e00b      	b.n	2dd6 <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    2dbe:	2000      	movs	r0, #0
    2dc0:	e009      	b.n	2dd6 <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    2dc2:	2012      	movs	r0, #18
    2dc4:	e007      	b.n	2dd6 <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    2dc6:	2000      	movs	r0, #0
    2dc8:	e005      	b.n	2dd6 <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2dca:	7e3b      	ldrb	r3, [r7, #24]
    2dcc:	079b      	lsls	r3, r3, #30
    2dce:	d4fa      	bmi.n	2dc6 <usart_write_buffer_wait+0x96>
    2dd0:	4b04      	ldr	r3, [pc, #16]	; (2de4 <usart_write_buffer_wait+0xb4>)
    2dd2:	2102      	movs	r1, #2
    2dd4:	e7e7      	b.n	2da6 <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    2dd6:	b002      	add	sp, #8
    2dd8:	bc04      	pop	{r2}
    2dda:	4691      	mov	r9, r2
    2ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00002c95 	.word	0x00002c95
    2de4:	0000ffff 	.word	0x0000ffff

00002de8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dea:	4657      	mov	r7, sl
    2dec:	b480      	push	{r7}
    2dee:	b084      	sub	sp, #16
    2df0:	0004      	movs	r4, r0
    2df2:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2df4:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2df6:	2a00      	cmp	r2, #0
    2df8:	d038      	beq.n	2e6c <usart_read_buffer_wait+0x84>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2dfa:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    2dfc:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d034      	beq.n	2e6c <usart_read_buffer_wait+0x84>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e02:	6826      	ldr	r6, [r4, #0]
    2e04:	4692      	mov	sl, r2
    2e06:	2500      	movs	r5, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2e08:	2704      	movs	r7, #4
    2e0a:	e02a      	b.n	2e62 <usart_read_buffer_wait+0x7a>
    2e0c:	7e32      	ldrb	r2, [r6, #24]
    2e0e:	423a      	tst	r2, r7
    2e10:	d104      	bne.n	2e1c <usart_read_buffer_wait+0x34>
				break;
			} else if (i == USART_TIMEOUT) {
    2e12:	2b01      	cmp	r3, #1
    2e14:	d023      	beq.n	2e5e <usart_read_buffer_wait+0x76>
    2e16:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d1f7      	bne.n	2e0c <usart_read_buffer_wait+0x24>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    2e1c:	2300      	movs	r3, #0
    2e1e:	aa02      	add	r2, sp, #8
    2e20:	80d3      	strh	r3, [r2, #6]

		retval = usart_read_wait(module, &received_data);
    2e22:	1d91      	adds	r1, r2, #6
    2e24:	0020      	movs	r0, r4
    2e26:	4b13      	ldr	r3, [pc, #76]	; (2e74 <usart_read_buffer_wait+0x8c>)
    2e28:	4798      	blx	r3

		if (retval != STATUS_OK) {
    2e2a:	2800      	cmp	r0, #0
    2e2c:	d11e      	bne.n	2e6c <usart_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2e2e:	1c6b      	adds	r3, r5, #1
    2e30:	b29b      	uxth	r3, r3
    2e32:	aa02      	add	r2, sp, #8
    2e34:	88d2      	ldrh	r2, [r2, #6]
    2e36:	9901      	ldr	r1, [sp, #4]
    2e38:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2e3a:	7961      	ldrb	r1, [r4, #5]
    2e3c:	2901      	cmp	r1, #1
    2e3e:	d105      	bne.n	2e4c <usart_read_buffer_wait+0x64>
			rx_data[rx_pos++] = (received_data >> 8);
    2e40:	1ca9      	adds	r1, r5, #2
    2e42:	b28d      	uxth	r5, r1
    2e44:	0a12      	lsrs	r2, r2, #8
    2e46:	9901      	ldr	r1, [sp, #4]
    2e48:	54ca      	strb	r2, [r1, r3]
    2e4a:	e000      	b.n	2e4e <usart_read_buffer_wait+0x66>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2e4c:	001d      	movs	r5, r3
    2e4e:	4652      	mov	r2, sl
    2e50:	3a01      	subs	r2, #1
    2e52:	b293      	uxth	r3, r2
    2e54:	469a      	mov	sl, r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    2e56:	2b00      	cmp	r3, #0
    2e58:	d103      	bne.n	2e62 <usart_read_buffer_wait+0x7a>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e006      	b.n	2e6c <usart_read_buffer_wait+0x84>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    2e5e:	2012      	movs	r0, #18
    2e60:	e004      	b.n	2e6c <usart_read_buffer_wait+0x84>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2e62:	7e33      	ldrb	r3, [r6, #24]
    2e64:	423b      	tst	r3, r7
    2e66:	d1d9      	bne.n	2e1c <usart_read_buffer_wait+0x34>
    2e68:	4b03      	ldr	r3, [pc, #12]	; (2e78 <usart_read_buffer_wait+0x90>)
    2e6a:	e7cf      	b.n	2e0c <usart_read_buffer_wait+0x24>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2e6c:	b004      	add	sp, #16
    2e6e:	bc04      	pop	{r2}
    2e70:	4692      	mov	sl, r2
    2e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e74:	00002cc1 	.word	0x00002cc1
    2e78:	0000ffff 	.word	0x0000ffff

00002e7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2e7e:	0080      	lsls	r0, r0, #2
    2e80:	4b60      	ldr	r3, [pc, #384]	; (3004 <_usart_interrupt_handler+0x188>)
    2e82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2e84:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2e86:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d1fc      	bne.n	2e86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2e8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2e8e:	7da6      	ldrb	r6, [r4, #22]
    2e90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2e92:	2330      	movs	r3, #48	; 0x30
    2e94:	5ceb      	ldrb	r3, [r5, r3]
    2e96:	2231      	movs	r2, #49	; 0x31
    2e98:	5caf      	ldrb	r7, [r5, r2]
    2e9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2e9c:	07f3      	lsls	r3, r6, #31
    2e9e:	d522      	bpl.n	2ee6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ea0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ea2:	b29b      	uxth	r3, r3
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d01c      	beq.n	2ee2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ea8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2eaa:	7813      	ldrb	r3, [r2, #0]
    2eac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2eae:	1c51      	adds	r1, r2, #1
    2eb0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2eb2:	7969      	ldrb	r1, [r5, #5]
    2eb4:	2901      	cmp	r1, #1
    2eb6:	d001      	beq.n	2ebc <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2eb8:	b29b      	uxth	r3, r3
    2eba:	e004      	b.n	2ec6 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ebc:	7851      	ldrb	r1, [r2, #1]
    2ebe:	0209      	lsls	r1, r1, #8
    2ec0:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2ec2:	3202      	adds	r2, #2
    2ec4:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2ec6:	05db      	lsls	r3, r3, #23
    2ec8:	0ddb      	lsrs	r3, r3, #23
    2eca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ecc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ece:	3b01      	subs	r3, #1
    2ed0:	b29b      	uxth	r3, r3
    2ed2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d106      	bne.n	2ee6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ed8:	3301      	adds	r3, #1
    2eda:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2edc:	3301      	adds	r3, #1
    2ede:	75a3      	strb	r3, [r4, #22]
    2ee0:	e001      	b.n	2ee6 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ee2:	2301      	movs	r3, #1
    2ee4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2ee6:	07b3      	lsls	r3, r6, #30
    2ee8:	d509      	bpl.n	2efe <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2eea:	2302      	movs	r3, #2
    2eec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2eee:	2200      	movs	r2, #0
    2ef0:	3331      	adds	r3, #49	; 0x31
    2ef2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2ef4:	07fb      	lsls	r3, r7, #31
    2ef6:	d502      	bpl.n	2efe <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2ef8:	0028      	movs	r0, r5
    2efa:	68eb      	ldr	r3, [r5, #12]
    2efc:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2efe:	0773      	lsls	r3, r6, #29
    2f00:	d560      	bpl.n	2fc4 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    2f02:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2f04:	b29b      	uxth	r3, r3
    2f06:	2b00      	cmp	r3, #0
    2f08:	d05a      	beq.n	2fc0 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f0a:	8b63      	ldrh	r3, [r4, #26]
    2f0c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2f0e:	071a      	lsls	r2, r3, #28
    2f10:	d402      	bmi.n	2f18 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f12:	223f      	movs	r2, #63	; 0x3f
    2f14:	4013      	ands	r3, r2
    2f16:	e001      	b.n	2f1c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2f18:	2237      	movs	r2, #55	; 0x37
    2f1a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d02d      	beq.n	2f7c <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2f20:	079a      	lsls	r2, r3, #30
    2f22:	d505      	bpl.n	2f30 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2f24:	221a      	movs	r2, #26
    2f26:	2332      	movs	r3, #50	; 0x32
    2f28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f2a:	3b30      	subs	r3, #48	; 0x30
    2f2c:	8363      	strh	r3, [r4, #26]
    2f2e:	e01f      	b.n	2f70 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f30:	075a      	lsls	r2, r3, #29
    2f32:	d505      	bpl.n	2f40 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2f34:	221e      	movs	r2, #30
    2f36:	2332      	movs	r3, #50	; 0x32
    2f38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f3a:	3b2e      	subs	r3, #46	; 0x2e
    2f3c:	8363      	strh	r3, [r4, #26]
    2f3e:	e017      	b.n	2f70 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f40:	07da      	lsls	r2, r3, #31
    2f42:	d505      	bpl.n	2f50 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f44:	2213      	movs	r2, #19
    2f46:	2332      	movs	r3, #50	; 0x32
    2f48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f4a:	3b31      	subs	r3, #49	; 0x31
    2f4c:	8363      	strh	r3, [r4, #26]
    2f4e:	e00f      	b.n	2f70 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f50:	06da      	lsls	r2, r3, #27
    2f52:	d505      	bpl.n	2f60 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2f54:	2242      	movs	r2, #66	; 0x42
    2f56:	2332      	movs	r3, #50	; 0x32
    2f58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2f5a:	3b22      	subs	r3, #34	; 0x22
    2f5c:	8363      	strh	r3, [r4, #26]
    2f5e:	e007      	b.n	2f70 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f60:	2220      	movs	r2, #32
    2f62:	421a      	tst	r2, r3
    2f64:	d004      	beq.n	2f70 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2f66:	3221      	adds	r2, #33	; 0x21
    2f68:	2332      	movs	r3, #50	; 0x32
    2f6a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2f6c:	3b12      	subs	r3, #18
    2f6e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f70:	077b      	lsls	r3, r7, #29
    2f72:	d527      	bpl.n	2fc4 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f74:	0028      	movs	r0, r5
    2f76:	696b      	ldr	r3, [r5, #20]
    2f78:	4798      	blx	r3
    2f7a:	e023      	b.n	2fc4 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2f7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f7e:	05db      	lsls	r3, r3, #23
    2f80:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2f82:	b2da      	uxtb	r2, r3
    2f84:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2f86:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2f88:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f8a:	1c51      	adds	r1, r2, #1
    2f8c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f8e:	7969      	ldrb	r1, [r5, #5]
    2f90:	2901      	cmp	r1, #1
    2f92:	d104      	bne.n	2f9e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2f94:	0a1b      	lsrs	r3, r3, #8
    2f96:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2f98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2f9a:	3301      	adds	r3, #1
    2f9c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2f9e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2fa0:	3b01      	subs	r3, #1
    2fa2:	b29b      	uxth	r3, r3
    2fa4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d10c      	bne.n	2fc4 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2faa:	3304      	adds	r3, #4
    2fac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2fae:	2200      	movs	r2, #0
    2fb0:	332e      	adds	r3, #46	; 0x2e
    2fb2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2fb4:	07bb      	lsls	r3, r7, #30
    2fb6:	d505      	bpl.n	2fc4 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2fb8:	0028      	movs	r0, r5
    2fba:	692b      	ldr	r3, [r5, #16]
    2fbc:	4798      	blx	r3
    2fbe:	e001      	b.n	2fc4 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fc0:	2304      	movs	r3, #4
    2fc2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2fc4:	06f3      	lsls	r3, r6, #27
    2fc6:	d507      	bpl.n	2fd8 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2fc8:	2310      	movs	r3, #16
    2fca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2fcc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2fce:	06fb      	lsls	r3, r7, #27
    2fd0:	d502      	bpl.n	2fd8 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2fd2:	0028      	movs	r0, r5
    2fd4:	69eb      	ldr	r3, [r5, #28]
    2fd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2fd8:	06b3      	lsls	r3, r6, #26
    2fda:	d507      	bpl.n	2fec <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2fdc:	2320      	movs	r3, #32
    2fde:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2fe0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2fe2:	073b      	lsls	r3, r7, #28
    2fe4:	d502      	bpl.n	2fec <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2fe6:	0028      	movs	r0, r5
    2fe8:	69ab      	ldr	r3, [r5, #24]
    2fea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2fec:	0733      	lsls	r3, r6, #28
    2fee:	d507      	bpl.n	3000 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2ff0:	2308      	movs	r3, #8
    2ff2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2ff4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2ff6:	06bb      	lsls	r3, r7, #26
    2ff8:	d502      	bpl.n	3000 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2ffa:	6a2b      	ldr	r3, [r5, #32]
    2ffc:	0028      	movs	r0, r5
    2ffe:	4798      	blx	r3
		}
	}
#endif
}
    3000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	20000564 	.word	0x20000564

00003008 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3008:	b510      	push	{r4, lr}
	switch (clock_source) {
    300a:	2808      	cmp	r0, #8
    300c:	d803      	bhi.n	3016 <system_clock_source_get_hz+0xe>
    300e:	0080      	lsls	r0, r0, #2
    3010:	4b1c      	ldr	r3, [pc, #112]	; (3084 <system_clock_source_get_hz+0x7c>)
    3012:	581b      	ldr	r3, [r3, r0]
    3014:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    3016:	2000      	movs	r0, #0
    3018:	e032      	b.n	3080 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    301a:	4b1b      	ldr	r3, [pc, #108]	; (3088 <system_clock_source_get_hz+0x80>)
    301c:	6918      	ldr	r0, [r3, #16]
    301e:	e02f      	b.n	3080 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    3020:	4b1a      	ldr	r3, [pc, #104]	; (308c <system_clock_source_get_hz+0x84>)
    3022:	7d18      	ldrb	r0, [r3, #20]
    3024:	0700      	lsls	r0, r0, #28
    3026:	0f80      	lsrs	r0, r0, #30
    3028:	3001      	adds	r0, #1
    302a:	4b19      	ldr	r3, [pc, #100]	; (3090 <system_clock_source_get_hz+0x88>)
    302c:	4358      	muls	r0, r3
    302e:	e027      	b.n	3080 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3030:	4b15      	ldr	r3, [pc, #84]	; (3088 <system_clock_source_get_hz+0x80>)
    3032:	6958      	ldr	r0, [r3, #20]
    3034:	e024      	b.n	3080 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    3036:	4b14      	ldr	r3, [pc, #80]	; (3088 <system_clock_source_get_hz+0x80>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	2002      	movs	r0, #2
    303c:	4018      	ands	r0, r3
    303e:	d01f      	beq.n	3080 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3040:	4912      	ldr	r1, [pc, #72]	; (308c <system_clock_source_get_hz+0x84>)
    3042:	2280      	movs	r2, #128	; 0x80
    3044:	0052      	lsls	r2, r2, #1
    3046:	68cb      	ldr	r3, [r1, #12]
    3048:	4213      	tst	r3, r2
    304a:	d0fc      	beq.n	3046 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    304c:	4b0e      	ldr	r3, [pc, #56]	; (3088 <system_clock_source_get_hz+0x80>)
    304e:	681b      	ldr	r3, [r3, #0]
    3050:	075b      	lsls	r3, r3, #29
    3052:	d514      	bpl.n	307e <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3054:	2000      	movs	r0, #0
    3056:	4b0f      	ldr	r3, [pc, #60]	; (3094 <system_clock_source_get_hz+0x8c>)
    3058:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    305a:	4b0b      	ldr	r3, [pc, #44]	; (3088 <system_clock_source_get_hz+0x80>)
    305c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    305e:	041b      	lsls	r3, r3, #16
    3060:	0c1b      	lsrs	r3, r3, #16
    3062:	4358      	muls	r0, r3
    3064:	e00c      	b.n	3080 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3066:	2328      	movs	r3, #40	; 0x28
    3068:	4a08      	ldr	r2, [pc, #32]	; (308c <system_clock_source_get_hz+0x84>)
    306a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    306c:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    306e:	079b      	lsls	r3, r3, #30
    3070:	d506      	bpl.n	3080 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3072:	4b05      	ldr	r3, [pc, #20]	; (3088 <system_clock_source_get_hz+0x80>)
    3074:	68d8      	ldr	r0, [r3, #12]
    3076:	e003      	b.n	3080 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3078:	2080      	movs	r0, #128	; 0x80
    307a:	0200      	lsls	r0, r0, #8
    307c:	e000      	b.n	3080 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    307e:	4806      	ldr	r0, [pc, #24]	; (3098 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3080:	bd10      	pop	{r4, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	000055ac 	.word	0x000055ac
    3088:	20000190 	.word	0x20000190
    308c:	40000c00 	.word	0x40000c00
    3090:	003d0900 	.word	0x003d0900
    3094:	00003619 	.word	0x00003619
    3098:	02dc6c00 	.word	0x02dc6c00

0000309c <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    309c:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    309e:	4c0c      	ldr	r4, [pc, #48]	; (30d0 <system_clock_source_osc16m_set_config+0x34>)
    30a0:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    30a2:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    30a4:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    30a6:	7800      	ldrb	r0, [r0, #0]
    30a8:	2203      	movs	r2, #3
    30aa:	4010      	ands	r0, r2
    30ac:	0080      	lsls	r0, r0, #2
    30ae:	3209      	adds	r2, #9
    30b0:	4393      	bics	r3, r2
    30b2:	4303      	orrs	r3, r0
    30b4:	3a0b      	subs	r2, #11
    30b6:	4011      	ands	r1, r2
    30b8:	0189      	lsls	r1, r1, #6
    30ba:	323f      	adds	r2, #63	; 0x3f
    30bc:	4393      	bics	r3, r2
    30be:	430b      	orrs	r3, r1
    30c0:	001a      	movs	r2, r3
    30c2:	01e9      	lsls	r1, r5, #7
    30c4:	237f      	movs	r3, #127	; 0x7f
    30c6:	4013      	ands	r3, r2
    30c8:	430b      	orrs	r3, r1
    30ca:	7523      	strb	r3, [r4, #20]
}
    30cc:	bd30      	pop	{r4, r5, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	40000c00 	.word	0x40000c00

000030d4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    30d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30d6:	4657      	mov	r7, sl
    30d8:	464e      	mov	r6, r9
    30da:	4645      	mov	r5, r8
    30dc:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    30de:	4e1c      	ldr	r6, [pc, #112]	; (3150 <system_clock_source_osc32k_set_config+0x7c>)
    30e0:	69b3      	ldr	r3, [r6, #24]
    30e2:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    30e4:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    30e6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    30e8:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    30ea:	78c3      	ldrb	r3, [r0, #3]
    30ec:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    30ee:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    30f0:	7883      	ldrb	r3, [r0, #2]
    30f2:	2001      	movs	r0, #1
    30f4:	4003      	ands	r3, r0
    30f6:	009b      	lsls	r3, r3, #2
    30f8:	469a      	mov	sl, r3
    30fa:	2204      	movs	r2, #4
    30fc:	4690      	mov	r8, r2
    30fe:	4662      	mov	r2, ip
    3100:	4643      	mov	r3, r8
    3102:	439a      	bics	r2, r3
    3104:	0013      	movs	r3, r2
    3106:	4652      	mov	r2, sl
    3108:	431a      	orrs	r2, r3
    310a:	0013      	movs	r3, r2
    310c:	4001      	ands	r1, r0
    310e:	00c9      	lsls	r1, r1, #3
    3110:	2208      	movs	r2, #8
    3112:	4393      	bics	r3, r2
    3114:	430b      	orrs	r3, r1
    3116:	464a      	mov	r2, r9
    3118:	4002      	ands	r2, r0
    311a:	0192      	lsls	r2, r2, #6
    311c:	2140      	movs	r1, #64	; 0x40
    311e:	438b      	bics	r3, r1
    3120:	4313      	orrs	r3, r2
    3122:	4007      	ands	r7, r0
    3124:	01ff      	lsls	r7, r7, #7
    3126:	2280      	movs	r2, #128	; 0x80
    3128:	4393      	bics	r3, r2
    312a:	433b      	orrs	r3, r7
    312c:	3a79      	subs	r2, #121	; 0x79
    312e:	4015      	ands	r5, r2
    3130:	022d      	lsls	r5, r5, #8
    3132:	4f08      	ldr	r7, [pc, #32]	; (3154 <system_clock_source_osc32k_set_config+0x80>)
    3134:	403b      	ands	r3, r7
    3136:	432b      	orrs	r3, r5
    3138:	4004      	ands	r4, r0
    313a:	0320      	lsls	r0, r4, #12
    313c:	4c06      	ldr	r4, [pc, #24]	; (3158 <system_clock_source_osc32k_set_config+0x84>)
    313e:	401c      	ands	r4, r3
    3140:	4304      	orrs	r4, r0
    3142:	61b4      	str	r4, [r6, #24]
}
    3144:	bc1c      	pop	{r2, r3, r4}
    3146:	4690      	mov	r8, r2
    3148:	4699      	mov	r9, r3
    314a:	46a2      	mov	sl, r4
    314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	40001000 	.word	0x40001000
    3154:	fffff8ff 	.word	0xfffff8ff
    3158:	ffffefff 	.word	0xffffefff

0000315c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    315c:	2808      	cmp	r0, #8
    315e:	d803      	bhi.n	3168 <system_clock_source_enable+0xc>
    3160:	0080      	lsls	r0, r0, #2
    3162:	4b29      	ldr	r3, [pc, #164]	; (3208 <system_clock_source_enable+0xac>)
    3164:	581b      	ldr	r3, [r3, r0]
    3166:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3168:	2017      	movs	r0, #23
    316a:	e04b      	b.n	3204 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    316c:	4a27      	ldr	r2, [pc, #156]	; (320c <system_clock_source_enable+0xb0>)
    316e:	7d11      	ldrb	r1, [r2, #20]
    3170:	2302      	movs	r3, #2
    3172:	430b      	orrs	r3, r1
    3174:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    3176:	2000      	movs	r0, #0
    3178:	e044      	b.n	3204 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    317a:	4a25      	ldr	r2, [pc, #148]	; (3210 <system_clock_source_enable+0xb4>)
    317c:	6991      	ldr	r1, [r2, #24]
    317e:	2302      	movs	r3, #2
    3180:	430b      	orrs	r3, r1
    3182:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3184:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    3186:	e03d      	b.n	3204 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3188:	4a20      	ldr	r2, [pc, #128]	; (320c <system_clock_source_enable+0xb0>)
    318a:	8a11      	ldrh	r1, [r2, #16]
    318c:	2302      	movs	r3, #2
    318e:	430b      	orrs	r3, r1
    3190:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3192:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3194:	e036      	b.n	3204 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3196:	4a1e      	ldr	r2, [pc, #120]	; (3210 <system_clock_source_enable+0xb4>)
    3198:	6951      	ldr	r1, [r2, #20]
    319a:	2302      	movs	r3, #2
    319c:	430b      	orrs	r3, r1
    319e:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    31a0:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    31a2:	e02f      	b.n	3204 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    31a4:	491b      	ldr	r1, [pc, #108]	; (3214 <system_clock_source_enable+0xb8>)
    31a6:	680b      	ldr	r3, [r1, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4313      	orrs	r3, r2
    31ac:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    31ae:	4b17      	ldr	r3, [pc, #92]	; (320c <system_clock_source_enable+0xb0>)
    31b0:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    31b2:	0019      	movs	r1, r3
    31b4:	32fe      	adds	r2, #254	; 0xfe
    31b6:	68cb      	ldr	r3, [r1, #12]
    31b8:	4213      	tst	r3, r2
    31ba:	d0fc      	beq.n	31b6 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    31bc:	4a15      	ldr	r2, [pc, #84]	; (3214 <system_clock_source_enable+0xb8>)
    31be:	6891      	ldr	r1, [r2, #8]
    31c0:	4b12      	ldr	r3, [pc, #72]	; (320c <system_clock_source_enable+0xb0>)
    31c2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    31c4:	6852      	ldr	r2, [r2, #4]
    31c6:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    31c8:	2200      	movs	r2, #0
    31ca:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    31cc:	0019      	movs	r1, r3
    31ce:	3201      	adds	r2, #1
    31d0:	32ff      	adds	r2, #255	; 0xff
    31d2:	68cb      	ldr	r3, [r1, #12]
    31d4:	4213      	tst	r3, r2
    31d6:	d0fc      	beq.n	31d2 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    31d8:	4b0e      	ldr	r3, [pc, #56]	; (3214 <system_clock_source_enable+0xb8>)
    31da:	681b      	ldr	r3, [r3, #0]
    31dc:	b29b      	uxth	r3, r3
    31de:	4a0b      	ldr	r2, [pc, #44]	; (320c <system_clock_source_enable+0xb0>)
    31e0:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    31e2:	2000      	movs	r0, #0
    31e4:	e00e      	b.n	3204 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    31e6:	4909      	ldr	r1, [pc, #36]	; (320c <system_clock_source_enable+0xb0>)
    31e8:	2228      	movs	r2, #40	; 0x28
    31ea:	5c88      	ldrb	r0, [r1, r2]
    31ec:	2302      	movs	r3, #2
    31ee:	4303      	orrs	r3, r0
    31f0:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    31f2:	0008      	movs	r0, r1
    31f4:	2138      	movs	r1, #56	; 0x38
    31f6:	3a26      	subs	r2, #38	; 0x26
    31f8:	5c43      	ldrb	r3, [r0, r1]
    31fa:	4213      	tst	r3, r2
    31fc:	d1fc      	bne.n	31f8 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    31fe:	2000      	movs	r0, #0
    3200:	e000      	b.n	3204 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3202:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3204:	4770      	bx	lr
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	000055d0 	.word	0x000055d0
    320c:	40000c00 	.word	0x40000c00
    3210:	40001000 	.word	0x40001000
    3214:	20000190 	.word	0x20000190

00003218 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3218:	2808      	cmp	r0, #8
    321a:	d832      	bhi.n	3282 <system_clock_source_disable+0x6a>
    321c:	0080      	lsls	r0, r0, #2
    321e:	4b1a      	ldr	r3, [pc, #104]	; (3288 <system_clock_source_disable+0x70>)
    3220:	581b      	ldr	r3, [r3, r0]
    3222:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    3224:	4a19      	ldr	r2, [pc, #100]	; (328c <system_clock_source_disable+0x74>)
    3226:	7d13      	ldrb	r3, [r2, #20]
    3228:	2102      	movs	r1, #2
    322a:	438b      	bics	r3, r1
    322c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    322e:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    3230:	e028      	b.n	3284 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    3232:	4a17      	ldr	r2, [pc, #92]	; (3290 <system_clock_source_disable+0x78>)
    3234:	6993      	ldr	r3, [r2, #24]
    3236:	2102      	movs	r1, #2
    3238:	438b      	bics	r3, r1
    323a:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    323c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    323e:	e021      	b.n	3284 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    3240:	4a12      	ldr	r2, [pc, #72]	; (328c <system_clock_source_disable+0x74>)
    3242:	8a13      	ldrh	r3, [r2, #16]
    3244:	2102      	movs	r1, #2
    3246:	438b      	bics	r3, r1
    3248:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    324a:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    324c:	e01a      	b.n	3284 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    324e:	4a10      	ldr	r2, [pc, #64]	; (3290 <system_clock_source_disable+0x78>)
    3250:	6953      	ldr	r3, [r2, #20]
    3252:	2102      	movs	r1, #2
    3254:	438b      	bics	r3, r1
    3256:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3258:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    325a:	e013      	b.n	3284 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    325c:	4b0d      	ldr	r3, [pc, #52]	; (3294 <system_clock_source_disable+0x7c>)
    325e:	681a      	ldr	r2, [r3, #0]
    3260:	2102      	movs	r1, #2
    3262:	438a      	bics	r2, r1
    3264:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	b29b      	uxth	r3, r3
    326a:	4a08      	ldr	r2, [pc, #32]	; (328c <system_clock_source_disable+0x74>)
    326c:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    326e:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    3270:	e008      	b.n	3284 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    3272:	4906      	ldr	r1, [pc, #24]	; (328c <system_clock_source_disable+0x74>)
    3274:	2228      	movs	r2, #40	; 0x28
    3276:	5c8b      	ldrb	r3, [r1, r2]
    3278:	2002      	movs	r0, #2
    327a:	4383      	bics	r3, r0
    327c:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    327e:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    3280:	e000      	b.n	3284 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3282:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    3284:	4770      	bx	lr
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	000055f4 	.word	0x000055f4
    328c:	40000c00 	.word	0x40000c00
    3290:	40001000 	.word	0x40001000
    3294:	20000190 	.word	0x20000190

00003298 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
    329a:	4657      	mov	r7, sl
    329c:	464e      	mov	r6, r9
    329e:	4645      	mov	r5, r8
    32a0:	b4e0      	push	{r5, r6, r7}
    32a2:	b086      	sub	sp, #24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    32a4:	2280      	movs	r2, #128	; 0x80
    32a6:	0052      	lsls	r2, r2, #1
    32a8:	4b49      	ldr	r3, [pc, #292]	; (33d0 <system_clock_init+0x138>)
    32aa:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    32ac:	3afd      	subs	r2, #253	; 0xfd
    32ae:	4b49      	ldr	r3, [pc, #292]	; (33d4 <system_clock_init+0x13c>)
    32b0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    32b2:	4a49      	ldr	r2, [pc, #292]	; (33d8 <system_clock_init+0x140>)
    32b4:	6853      	ldr	r3, [r2, #4]
    32b6:	211e      	movs	r1, #30
    32b8:	438b      	bics	r3, r1
    32ba:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    32bc:	2380      	movs	r3, #128	; 0x80
    32be:	05db      	lsls	r3, r3, #23
    32c0:	789b      	ldrb	r3, [r3, #2]
    32c2:	2b02      	cmp	r3, #2
    32c4:	d009      	beq.n	32da <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    32c6:	2380      	movs	r3, #128	; 0x80
    32c8:	05db      	lsls	r3, r3, #23
    32ca:	2201      	movs	r2, #1
    32cc:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    32ce:	3201      	adds	r2, #1
    32d0:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    32d2:	001a      	movs	r2, r3
    32d4:	7993      	ldrb	r3, [r2, #6]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d0fc      	beq.n	32d4 <system_clock_init+0x3c>
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    32da:	a804      	add	r0, sp, #16
    32dc:	2501      	movs	r5, #1
    32de:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    32e0:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    32e2:	2400      	movs	r4, #0
    32e4:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    32e6:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    32e8:	2307      	movs	r3, #7
    32ea:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    32ec:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    32ee:	4b3b      	ldr	r3, [pc, #236]	; (33dc <system_clock_init+0x144>)
    32f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    32f2:	2004      	movs	r0, #4
    32f4:	4e3a      	ldr	r6, [pc, #232]	; (33e0 <system_clock_init+0x148>)
    32f6:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    32f8:	a901      	add	r1, sp, #4
    32fa:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    32fc:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    32fe:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    3300:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    3302:	2303      	movs	r3, #3
    3304:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3306:	2000      	movs	r0, #0
    3308:	4b36      	ldr	r3, [pc, #216]	; (33e4 <system_clock_init+0x14c>)
    330a:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    330c:	2006      	movs	r0, #6
    330e:	4b36      	ldr	r3, [pc, #216]	; (33e8 <system_clock_init+0x150>)
    3310:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    3312:	466b      	mov	r3, sp
    3314:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    3316:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    3318:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    331a:	4668      	mov	r0, sp
    331c:	4b33      	ldr	r3, [pc, #204]	; (33ec <system_clock_init+0x154>)
    331e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    3320:	2006      	movs	r0, #6
    3322:	47b0      	blx	r6
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3324:	492a      	ldr	r1, [pc, #168]	; (33d0 <system_clock_init+0x138>)
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    3326:	2210      	movs	r2, #16
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3328:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    332a:	421a      	tst	r2, r3
    332c:	d0fc      	beq.n	3328 <system_clock_init+0x90>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    332e:	ac01      	add	r4, sp, #4
    3330:	2601      	movs	r6, #1
    3332:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3334:	2500      	movs	r5, #0
    3336:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3338:	2306      	movs	r3, #6
    333a:	4699      	mov	r9, r3
    333c:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    333e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3340:	7265      	strb	r5, [r4, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3342:	0021      	movs	r1, r4
    3344:	2000      	movs	r0, #0
    3346:	4b27      	ldr	r3, [pc, #156]	; (33e4 <system_clock_init+0x14c>)
    3348:	4698      	mov	r8, r3
    334a:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    334c:	4a20      	ldr	r2, [pc, #128]	; (33d0 <system_clock_init+0x138>)
    334e:	7d11      	ldrb	r1, [r2, #20]
    3350:	2380      	movs	r3, #128	; 0x80
    3352:	430b      	orrs	r3, r1
    3354:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3356:	4b26      	ldr	r3, [pc, #152]	; (33f0 <system_clock_init+0x158>)
    3358:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    335a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    335c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    335e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3360:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3362:	2304      	movs	r3, #4
    3364:	7023      	strb	r3, [r4, #0]
    3366:	0021      	movs	r1, r4
    3368:	2001      	movs	r0, #1
    336a:	47c0      	blx	r8
    336c:	2001      	movs	r0, #1
    336e:	4b21      	ldr	r3, [pc, #132]	; (33f4 <system_clock_init+0x15c>)
    3370:	469a      	mov	sl, r3
    3372:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    3374:	4f20      	ldr	r7, [pc, #128]	; (33f8 <system_clock_init+0x160>)
    3376:	71be      	strb	r6, [r7, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    3378:	717e      	strb	r6, [r7, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    337a:	713e      	strb	r6, [r7, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    337c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    337e:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3380:	464b      	mov	r3, r9
    3382:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3384:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3386:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3388:	0021      	movs	r1, r4
    338a:	2000      	movs	r0, #0
    338c:	47c0      	blx	r8
    338e:	2000      	movs	r0, #0
    3390:	47d0      	blx	sl
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    3392:	2000      	movs	r0, #0
    3394:	4b19      	ldr	r3, [pc, #100]	; (33fc <system_clock_init+0x164>)
    3396:	4798      	blx	r3
    3398:	7939      	ldrb	r1, [r7, #4]
    339a:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    339c:	4b18      	ldr	r3, [pc, #96]	; (3400 <system_clock_init+0x168>)
    339e:	4798      	blx	r3
    33a0:	4b18      	ldr	r3, [pc, #96]	; (3404 <system_clock_init+0x16c>)
    33a2:	4298      	cmp	r0, r3
    33a4:	d80e      	bhi.n	33c4 <system_clock_init+0x12c>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    33a6:	2380      	movs	r3, #128	; 0x80
    33a8:	05db      	lsls	r3, r3, #23
    33aa:	789b      	ldrb	r3, [r3, #2]
    33ac:	2b00      	cmp	r3, #0
    33ae:	d009      	beq.n	33c4 <system_clock_init+0x12c>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	05db      	lsls	r3, r3, #23
    33b4:	2201      	movs	r2, #1
    33b6:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    33b8:	2200      	movs	r2, #0
    33ba:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    33bc:	001a      	movs	r2, r3
    33be:	7993      	ldrb	r3, [r2, #6]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d0fc      	beq.n	33be <system_clock_init+0x126>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    33c4:	b006      	add	sp, #24
    33c6:	bc1c      	pop	{r2, r3, r4}
    33c8:	4690      	mov	r8, r2
    33ca:	4699      	mov	r9, r3
    33cc:	46a2      	mov	sl, r4
    33ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d0:	40000c00 	.word	0x40000c00
    33d4:	40001400 	.word	0x40001400
    33d8:	41004000 	.word	0x41004000
    33dc:	000030d5 	.word	0x000030d5
    33e0:	0000315d 	.word	0x0000315d
    33e4:	0000342d 	.word	0x0000342d
    33e8:	00003219 	.word	0x00003219
    33ec:	0000309d 	.word	0x0000309d
    33f0:	00003409 	.word	0x00003409
    33f4:	000034d9 	.word	0x000034d9
    33f8:	40000400 	.word	0x40000400
    33fc:	00003519 	.word	0x00003519
    3400:	00004b81 	.word	0x00004b81
    3404:	00b71b00 	.word	0x00b71b00

00003408 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3408:	4a06      	ldr	r2, [pc, #24]	; (3424 <system_gclk_init+0x1c>)
    340a:	6951      	ldr	r1, [r2, #20]
    340c:	2340      	movs	r3, #64	; 0x40
    340e:	430b      	orrs	r3, r1
    3410:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3412:	2201      	movs	r2, #1
    3414:	4b04      	ldr	r3, [pc, #16]	; (3428 <system_gclk_init+0x20>)
    3416:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3418:	0019      	movs	r1, r3
    341a:	780b      	ldrb	r3, [r1, #0]
    341c:	4213      	tst	r3, r2
    341e:	d1fc      	bne.n	341a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3420:	4770      	bx	lr
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	40000400 	.word	0x40000400
    3428:	40001800 	.word	0x40001800

0000342c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    342c:	b570      	push	{r4, r5, r6, lr}
    342e:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3430:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3432:	784b      	ldrb	r3, [r1, #1]
    3434:	2b00      	cmp	r3, #0
    3436:	d002      	beq.n	343e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3438:	2380      	movs	r3, #128	; 0x80
    343a:	00db      	lsls	r3, r3, #3
    343c:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    343e:	7a4b      	ldrb	r3, [r1, #9]
    3440:	2b00      	cmp	r3, #0
    3442:	d002      	beq.n	344a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3444:	2380      	movs	r3, #128	; 0x80
    3446:	011b      	lsls	r3, r3, #4
    3448:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    344a:	684a      	ldr	r2, [r1, #4]
    344c:	2a01      	cmp	r2, #1
    344e:	d917      	bls.n	3480 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3450:	1e53      	subs	r3, r2, #1
    3452:	421a      	tst	r2, r3
    3454:	d10f      	bne.n	3476 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3456:	2a02      	cmp	r2, #2
    3458:	d906      	bls.n	3468 <system_gclk_gen_set_config+0x3c>
    345a:	2302      	movs	r3, #2
    345c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    345e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3460:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3462:	429a      	cmp	r2, r3
    3464:	d8fb      	bhi.n	345e <system_gclk_gen_set_config+0x32>
    3466:	e000      	b.n	346a <system_gclk_gen_set_config+0x3e>
    3468:	2000      	movs	r0, #0
    346a:	2380      	movs	r3, #128	; 0x80
    346c:	015b      	lsls	r3, r3, #5
    346e:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3470:	0400      	lsls	r0, r0, #16
    3472:	4304      	orrs	r4, r0
    3474:	e004      	b.n	3480 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3476:	0412      	lsls	r2, r2, #16
    3478:	2380      	movs	r3, #128	; 0x80
    347a:	009b      	lsls	r3, r3, #2
    347c:	431a      	orrs	r2, r3
    347e:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3480:	7a0b      	ldrb	r3, [r1, #8]
    3482:	2b00      	cmp	r3, #0
    3484:	d002      	beq.n	348c <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3486:	2380      	movs	r3, #128	; 0x80
    3488:	019b      	lsls	r3, r3, #6
    348a:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    348c:	2604      	movs	r6, #4
    348e:	40ae      	lsls	r6, r5
    3490:	490d      	ldr	r1, [pc, #52]	; (34c8 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3492:	4a0e      	ldr	r2, [pc, #56]	; (34cc <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3494:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3496:	4013      	ands	r3, r2
    3498:	421e      	tst	r6, r3
    349a:	d1fb      	bne.n	3494 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    349c:	4b0c      	ldr	r3, [pc, #48]	; (34d0 <system_gclk_gen_set_config+0xa4>)
    349e:	4798      	blx	r3
    34a0:	00ad      	lsls	r5, r5, #2
    34a2:	4b09      	ldr	r3, [pc, #36]	; (34c8 <system_gclk_gen_set_config+0x9c>)
    34a4:	469c      	mov	ip, r3
    34a6:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    34a8:	6a28      	ldr	r0, [r5, #32]
    34aa:	2380      	movs	r3, #128	; 0x80
    34ac:	005b      	lsls	r3, r3, #1
    34ae:	4018      	ands	r0, r3
    34b0:	4320      	orrs	r0, r4
    34b2:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    34b4:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    34b6:	4a05      	ldr	r2, [pc, #20]	; (34cc <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    34b8:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    34ba:	4013      	ands	r3, r2
    34bc:	421e      	tst	r6, r3
    34be:	d1fb      	bne.n	34b8 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    34c0:	4b04      	ldr	r3, [pc, #16]	; (34d4 <system_gclk_gen_set_config+0xa8>)
    34c2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    34c4:	bd70      	pop	{r4, r5, r6, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	40001800 	.word	0x40001800
    34cc:	000007fc 	.word	0x000007fc
    34d0:	00001d1d 	.word	0x00001d1d
    34d4:	00001d5d 	.word	0x00001d5d

000034d8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    34d8:	b510      	push	{r4, lr}
    34da:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    34dc:	2204      	movs	r2, #4
    34de:	4082      	lsls	r2, r0
    34e0:	4809      	ldr	r0, [pc, #36]	; (3508 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    34e2:	490a      	ldr	r1, [pc, #40]	; (350c <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    34e4:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    34e6:	400b      	ands	r3, r1
    34e8:	421a      	tst	r2, r3
    34ea:	d1fb      	bne.n	34e4 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    34ec:	4b08      	ldr	r3, [pc, #32]	; (3510 <system_gclk_gen_enable+0x38>)
    34ee:	4798      	blx	r3
    34f0:	00a4      	lsls	r4, r4, #2
    34f2:	4b05      	ldr	r3, [pc, #20]	; (3508 <system_gclk_gen_enable+0x30>)
    34f4:	469c      	mov	ip, r3
    34f6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    34f8:	6a23      	ldr	r3, [r4, #32]
    34fa:	2280      	movs	r2, #128	; 0x80
    34fc:	0052      	lsls	r2, r2, #1
    34fe:	4313      	orrs	r3, r2
    3500:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3502:	4b04      	ldr	r3, [pc, #16]	; (3514 <system_gclk_gen_enable+0x3c>)
    3504:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3506:	bd10      	pop	{r4, pc}
    3508:	40001800 	.word	0x40001800
    350c:	000007fc 	.word	0x000007fc
    3510:	00001d1d 	.word	0x00001d1d
    3514:	00001d5d 	.word	0x00001d5d

00003518 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351a:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    351c:	2204      	movs	r2, #4
    351e:	4082      	lsls	r2, r0
    3520:	4812      	ldr	r0, [pc, #72]	; (356c <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3522:	4913      	ldr	r1, [pc, #76]	; (3570 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3524:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3526:	400b      	ands	r3, r1
    3528:	421a      	tst	r2, r3
    352a:	d1fb      	bne.n	3524 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    352c:	4b11      	ldr	r3, [pc, #68]	; (3574 <system_gclk_gen_get_hz+0x5c>)
    352e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3530:	4f0e      	ldr	r7, [pc, #56]	; (356c <system_gclk_gen_get_hz+0x54>)
    3532:	3408      	adds	r4, #8
    3534:	00a4      	lsls	r4, r4, #2
    3536:	59e0      	ldr	r0, [r4, r7]
    3538:	0700      	lsls	r0, r0, #28
    353a:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    353c:	4b0e      	ldr	r3, [pc, #56]	; (3578 <system_gclk_gen_get_hz+0x60>)
    353e:	4798      	blx	r3
    3540:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3542:	59e5      	ldr	r5, [r4, r7]
    3544:	04ed      	lsls	r5, r5, #19
    3546:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3548:	59e4      	ldr	r4, [r4, r7]
    354a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    354c:	4b0b      	ldr	r3, [pc, #44]	; (357c <system_gclk_gen_get_hz+0x64>)
    354e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3550:	2d00      	cmp	r5, #0
    3552:	d107      	bne.n	3564 <system_gclk_gen_get_hz+0x4c>
    3554:	2c01      	cmp	r4, #1
    3556:	d907      	bls.n	3568 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3558:	0021      	movs	r1, r4
    355a:	0030      	movs	r0, r6
    355c:	4b08      	ldr	r3, [pc, #32]	; (3580 <system_gclk_gen_get_hz+0x68>)
    355e:	4798      	blx	r3
    3560:	0006      	movs	r6, r0
    3562:	e001      	b.n	3568 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3564:	3401      	adds	r4, #1
    3566:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3568:	0030      	movs	r0, r6
    356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    356c:	40001800 	.word	0x40001800
    3570:	000007fc 	.word	0x000007fc
    3574:	00001d1d 	.word	0x00001d1d
    3578:	00003009 	.word	0x00003009
    357c:	00001d5d 	.word	0x00001d5d
    3580:	00004b81 	.word	0x00004b81

00003584 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3584:	b510      	push	{r4, lr}
    3586:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3588:	4b09      	ldr	r3, [pc, #36]	; (35b0 <system_gclk_chan_enable+0x2c>)
    358a:	4798      	blx	r3
    358c:	00a0      	lsls	r0, r4, #2
    358e:	4b09      	ldr	r3, [pc, #36]	; (35b4 <system_gclk_chan_enable+0x30>)
    3590:	469c      	mov	ip, r3
    3592:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3594:	2280      	movs	r2, #128	; 0x80
    3596:	5881      	ldr	r1, [r0, r2]
    3598:	2340      	movs	r3, #64	; 0x40
    359a:	430b      	orrs	r3, r1
    359c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    359e:	2180      	movs	r1, #128	; 0x80
    35a0:	3a40      	subs	r2, #64	; 0x40
    35a2:	5843      	ldr	r3, [r0, r1]
    35a4:	421a      	tst	r2, r3
    35a6:	d0fc      	beq.n	35a2 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    35a8:	4b03      	ldr	r3, [pc, #12]	; (35b8 <system_gclk_chan_enable+0x34>)
    35aa:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    35ac:	bd10      	pop	{r4, pc}
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	00001d1d 	.word	0x00001d1d
    35b4:	40001800 	.word	0x40001800
    35b8:	00001d5d 	.word	0x00001d5d

000035bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    35bc:	b510      	push	{r4, lr}
    35be:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    35c0:	4b09      	ldr	r3, [pc, #36]	; (35e8 <system_gclk_chan_disable+0x2c>)
    35c2:	4798      	blx	r3
    35c4:	00a0      	lsls	r0, r4, #2
    35c6:	4b09      	ldr	r3, [pc, #36]	; (35ec <system_gclk_chan_disable+0x30>)
    35c8:	469c      	mov	ip, r3
    35ca:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    35cc:	2280      	movs	r2, #128	; 0x80
    35ce:	5883      	ldr	r3, [r0, r2]
    35d0:	2140      	movs	r1, #64	; 0x40
    35d2:	438b      	bics	r3, r1
    35d4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    35d6:	3140      	adds	r1, #64	; 0x40
    35d8:	3a40      	subs	r2, #64	; 0x40
    35da:	5843      	ldr	r3, [r0, r1]
    35dc:	421a      	tst	r2, r3
    35de:	d1fc      	bne.n	35da <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    35e0:	4b03      	ldr	r3, [pc, #12]	; (35f0 <system_gclk_chan_disable+0x34>)
    35e2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    35e4:	bd10      	pop	{r4, pc}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	00001d1d 	.word	0x00001d1d
    35ec:	40001800 	.word	0x40001800
    35f0:	00001d5d 	.word	0x00001d5d

000035f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	0004      	movs	r4, r0
    35f8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    35fa:	4b05      	ldr	r3, [pc, #20]	; (3610 <system_gclk_chan_set_config+0x1c>)
    35fc:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    35fe:	782b      	ldrb	r3, [r5, #0]
    3600:	220f      	movs	r2, #15
    3602:	4013      	ands	r3, r2
    3604:	3420      	adds	r4, #32
    3606:	00a4      	lsls	r4, r4, #2
    3608:	4a02      	ldr	r2, [pc, #8]	; (3614 <system_gclk_chan_set_config+0x20>)
    360a:	50a3      	str	r3, [r4, r2]


}
    360c:	bd70      	pop	{r4, r5, r6, pc}
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	000035bd 	.word	0x000035bd
    3614:	40001800 	.word	0x40001800

00003618 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3618:	b510      	push	{r4, lr}
    361a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    361c:	4b06      	ldr	r3, [pc, #24]	; (3638 <system_gclk_chan_get_hz+0x20>)
    361e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3620:	3420      	adds	r4, #32
    3622:	00a4      	lsls	r4, r4, #2
    3624:	4b05      	ldr	r3, [pc, #20]	; (363c <system_gclk_chan_get_hz+0x24>)
    3626:	58e4      	ldr	r4, [r4, r3]
    3628:	0724      	lsls	r4, r4, #28
    362a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    362c:	4b04      	ldr	r3, [pc, #16]	; (3640 <system_gclk_chan_get_hz+0x28>)
    362e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3630:	0020      	movs	r0, r4
    3632:	4b04      	ldr	r3, [pc, #16]	; (3644 <system_gclk_chan_get_hz+0x2c>)
    3634:	4798      	blx	r3
}
    3636:	bd10      	pop	{r4, pc}
    3638:	00001d1d 	.word	0x00001d1d
    363c:	40001800 	.word	0x40001800
    3640:	00001d5d 	.word	0x00001d5d
    3644:	00003519 	.word	0x00003519

00003648 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3648:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    364a:	78d3      	ldrb	r3, [r2, #3]
    364c:	2b00      	cmp	r3, #0
    364e:	d11e      	bne.n	368e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3650:	7813      	ldrb	r3, [r2, #0]
    3652:	2b80      	cmp	r3, #128	; 0x80
    3654:	d004      	beq.n	3660 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3656:	061b      	lsls	r3, r3, #24
    3658:	2480      	movs	r4, #128	; 0x80
    365a:	0264      	lsls	r4, r4, #9
    365c:	4323      	orrs	r3, r4
    365e:	e000      	b.n	3662 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3660:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3662:	7854      	ldrb	r4, [r2, #1]
    3664:	2502      	movs	r5, #2
    3666:	43ac      	bics	r4, r5
    3668:	d10a      	bne.n	3680 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    366a:	7894      	ldrb	r4, [r2, #2]
    366c:	2c00      	cmp	r4, #0
    366e:	d103      	bne.n	3678 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3670:	2480      	movs	r4, #128	; 0x80
    3672:	02a4      	lsls	r4, r4, #10
    3674:	4323      	orrs	r3, r4
    3676:	e002      	b.n	367e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3678:	24c0      	movs	r4, #192	; 0xc0
    367a:	02e4      	lsls	r4, r4, #11
    367c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    367e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3680:	7854      	ldrb	r4, [r2, #1]
    3682:	3c01      	subs	r4, #1
    3684:	2c01      	cmp	r4, #1
    3686:	d812      	bhi.n	36ae <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3688:	4c18      	ldr	r4, [pc, #96]	; (36ec <_system_pinmux_config+0xa4>)
    368a:	4023      	ands	r3, r4
    368c:	e00f      	b.n	36ae <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    368e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3690:	040b      	lsls	r3, r1, #16
    3692:	0c1b      	lsrs	r3, r3, #16
    3694:	24a0      	movs	r4, #160	; 0xa0
    3696:	05e4      	lsls	r4, r4, #23
    3698:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    369a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    369c:	0c0b      	lsrs	r3, r1, #16
    369e:	24d0      	movs	r4, #208	; 0xd0
    36a0:	0624      	lsls	r4, r4, #24
    36a2:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36a4:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    36a6:	78d3      	ldrb	r3, [r2, #3]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d018      	beq.n	36de <_system_pinmux_config+0x96>
    36ac:	e01c      	b.n	36e8 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    36ae:	040c      	lsls	r4, r1, #16
    36b0:	0c24      	lsrs	r4, r4, #16
    36b2:	25a0      	movs	r5, #160	; 0xa0
    36b4:	05ed      	lsls	r5, r5, #23
    36b6:	432c      	orrs	r4, r5
    36b8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36ba:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    36bc:	0c0c      	lsrs	r4, r1, #16
    36be:	25d0      	movs	r5, #208	; 0xd0
    36c0:	062d      	lsls	r5, r5, #24
    36c2:	432c      	orrs	r4, r5
    36c4:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36c6:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    36c8:	78d4      	ldrb	r4, [r2, #3]
    36ca:	2c00      	cmp	r4, #0
    36cc:	d10c      	bne.n	36e8 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    36ce:	035b      	lsls	r3, r3, #13
    36d0:	d505      	bpl.n	36de <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    36d2:	7893      	ldrb	r3, [r2, #2]
    36d4:	2b01      	cmp	r3, #1
    36d6:	d101      	bne.n	36dc <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    36d8:	6181      	str	r1, [r0, #24]
    36da:	e000      	b.n	36de <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    36dc:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    36de:	7853      	ldrb	r3, [r2, #1]
    36e0:	3b01      	subs	r3, #1
    36e2:	2b01      	cmp	r3, #1
    36e4:	d800      	bhi.n	36e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    36e6:	6081      	str	r1, [r0, #8]
		}
	}
}
    36e8:	bd30      	pop	{r4, r5, pc}
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	fffbffff 	.word	0xfffbffff

000036f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    36f0:	b510      	push	{r4, lr}
    36f2:	0003      	movs	r3, r0
    36f4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    36f6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    36f8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    36fa:	2900      	cmp	r1, #0
    36fc:	d104      	bne.n	3708 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    36fe:	0958      	lsrs	r0, r3, #5
    3700:	01c0      	lsls	r0, r0, #7
    3702:	4905      	ldr	r1, [pc, #20]	; (3718 <system_pinmux_pin_set_config+0x28>)
    3704:	468c      	mov	ip, r1
    3706:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    3708:	211f      	movs	r1, #31
    370a:	400b      	ands	r3, r1
    370c:	391e      	subs	r1, #30
    370e:	4099      	lsls	r1, r3
    3710:	4b02      	ldr	r3, [pc, #8]	; (371c <system_pinmux_pin_set_config+0x2c>)
    3712:	4798      	blx	r3
}
    3714:	bd10      	pop	{r4, pc}
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	40002800 	.word	0x40002800
    371c:	00003649 	.word	0x00003649

00003720 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3720:	4770      	bx	lr
    3722:	46c0      	nop			; (mov r8, r8)

00003724 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3724:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3726:	4b05      	ldr	r3, [pc, #20]	; (373c <system_init+0x18>)
    3728:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    372a:	4b05      	ldr	r3, [pc, #20]	; (3740 <system_init+0x1c>)
    372c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    372e:	4b05      	ldr	r3, [pc, #20]	; (3744 <system_init+0x20>)
    3730:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3732:	4b05      	ldr	r3, [pc, #20]	; (3748 <system_init+0x24>)
    3734:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3736:	4b05      	ldr	r3, [pc, #20]	; (374c <system_init+0x28>)
    3738:	4798      	blx	r3
}
    373a:	bd10      	pop	{r4, pc}
    373c:	00003299 	.word	0x00003299
    3740:	00001d8d 	.word	0x00001d8d
    3744:	00003721 	.word	0x00003721
    3748:	00001f89 	.word	0x00001f89
    374c:	00003721 	.word	0x00003721

00003750 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3750:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3752:	0080      	lsls	r0, r0, #2
    3754:	4b14      	ldr	r3, [pc, #80]	; (37a8 <_tc_interrupt_handler+0x58>)
    3756:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3758:	682b      	ldr	r3, [r5, #0]
    375a:	7a9c      	ldrb	r4, [r3, #10]
    375c:	7e2b      	ldrb	r3, [r5, #24]
    375e:	401c      	ands	r4, r3
    3760:	7e6b      	ldrb	r3, [r5, #25]
    3762:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3764:	07e3      	lsls	r3, r4, #31
    3766:	d505      	bpl.n	3774 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3768:	0028      	movs	r0, r5
    376a:	68ab      	ldr	r3, [r5, #8]
    376c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    376e:	2301      	movs	r3, #1
    3770:	682a      	ldr	r2, [r5, #0]
    3772:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3774:	07a3      	lsls	r3, r4, #30
    3776:	d505      	bpl.n	3784 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    3778:	0028      	movs	r0, r5
    377a:	68eb      	ldr	r3, [r5, #12]
    377c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    377e:	2302      	movs	r3, #2
    3780:	682a      	ldr	r2, [r5, #0]
    3782:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3784:	06e3      	lsls	r3, r4, #27
    3786:	d505      	bpl.n	3794 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3788:	0028      	movs	r0, r5
    378a:	692b      	ldr	r3, [r5, #16]
    378c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    378e:	2310      	movs	r3, #16
    3790:	682a      	ldr	r2, [r5, #0]
    3792:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3794:	06a3      	lsls	r3, r4, #26
    3796:	d505      	bpl.n	37a4 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3798:	0028      	movs	r0, r5
    379a:	696b      	ldr	r3, [r5, #20]
    379c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    379e:	682b      	ldr	r3, [r5, #0]
    37a0:	2220      	movs	r2, #32
    37a2:	729a      	strb	r2, [r3, #10]
	}
}
    37a4:	bd70      	pop	{r4, r5, r6, pc}
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	2000057c 	.word	0x2000057c

000037ac <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
    37ac:	b510      	push	{r4, lr}
    37ae:	2000      	movs	r0, #0
    37b0:	4b01      	ldr	r3, [pc, #4]	; (37b8 <TC0_Handler+0xc>)
    37b2:	4798      	blx	r3
    37b4:	bd10      	pop	{r4, pc}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	00003751 	.word	0x00003751

000037bc <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    37bc:	b510      	push	{r4, lr}
    37be:	2001      	movs	r0, #1
    37c0:	4b01      	ldr	r3, [pc, #4]	; (37c8 <TC1_Handler+0xc>)
    37c2:	4798      	blx	r3
    37c4:	bd10      	pop	{r4, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	00003751 	.word	0x00003751

000037cc <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    37cc:	b510      	push	{r4, lr}
    37ce:	2002      	movs	r0, #2
    37d0:	4b01      	ldr	r3, [pc, #4]	; (37d8 <TC4_Handler+0xc>)
    37d2:	4798      	blx	r3
    37d4:	bd10      	pop	{r4, pc}
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	00003751 	.word	0x00003751

000037dc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    37dc:	b530      	push	{r4, r5, lr}
    37de:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    37e0:	aa01      	add	r2, sp, #4
    37e2:	4b0b      	ldr	r3, [pc, #44]	; (3810 <_tc_get_inst_index+0x34>)
    37e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    37e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    37e8:	9b01      	ldr	r3, [sp, #4]
    37ea:	4298      	cmp	r0, r3
    37ec:	d00a      	beq.n	3804 <_tc_get_inst_index+0x28>
    37ee:	9b02      	ldr	r3, [sp, #8]
    37f0:	4298      	cmp	r0, r3
    37f2:	d005      	beq.n	3800 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    37f4:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    37f6:	9a03      	ldr	r2, [sp, #12]
    37f8:	4282      	cmp	r2, r0
    37fa:	d105      	bne.n	3808 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    37fc:	3302      	adds	r3, #2
    37fe:	e002      	b.n	3806 <_tc_get_inst_index+0x2a>
    3800:	2301      	movs	r3, #1
    3802:	e000      	b.n	3806 <_tc_get_inst_index+0x2a>
    3804:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    3806:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    3808:	0018      	movs	r0, r3
    380a:	b005      	add	sp, #20
    380c:	bd30      	pop	{r4, r5, pc}
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	00005640 	.word	0x00005640

00003814 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3814:	b5f0      	push	{r4, r5, r6, r7, lr}
    3816:	4647      	mov	r7, r8
    3818:	b480      	push	{r7}
    381a:	b08a      	sub	sp, #40	; 0x28
    381c:	0005      	movs	r5, r0
    381e:	000e      	movs	r6, r1
    3820:	0017      	movs	r7, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    3822:	0008      	movs	r0, r1
    3824:	4ba7      	ldr	r3, [pc, #668]	; (3ac4 <tc_init+0x2b0>)
    3826:	4798      	blx	r3
    3828:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    382a:	4ca7      	ldr	r4, [pc, #668]	; (3ac8 <tc_init+0x2b4>)
    382c:	0021      	movs	r1, r4
    382e:	310c      	adds	r1, #12
    3830:	2203      	movs	r2, #3
    3832:	a809      	add	r0, sp, #36	; 0x24
    3834:	4ba5      	ldr	r3, [pc, #660]	; (3acc <tc_init+0x2b8>)
    3836:	4798      	blx	r3
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    3838:	a903      	add	r1, sp, #12
    383a:	0023      	movs	r3, r4
    383c:	3310      	adds	r3, #16
    383e:	000a      	movs	r2, r1
    3840:	cb13      	ldmia	r3!, {r0, r1, r4}
    3842:	c213      	stmia	r2!, {r0, r1, r4}
    3844:	cb13      	ldmia	r3!, {r0, r1, r4}
    3846:	c213      	stmia	r2!, {r0, r1, r4}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    3848:	2300      	movs	r3, #0
    384a:	60ab      	str	r3, [r5, #8]
    384c:	60eb      	str	r3, [r5, #12]
    384e:	612b      	str	r3, [r5, #16]
    3850:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    3852:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    3854:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    3856:	4643      	mov	r3, r8
    3858:	009a      	lsls	r2, r3, #2
    385a:	4b9d      	ldr	r3, [pc, #628]	; (3ad0 <tc_init+0x2bc>)
    385c:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    385e:	602e      	str	r6, [r5, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    3860:	2334      	movs	r3, #52	; 0x34
    3862:	5cfb      	ldrb	r3, [r7, r3]
    3864:	76ab      	strb	r3, [r5, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3866:	78fb      	ldrb	r3, [r7, #3]
    3868:	2b08      	cmp	r3, #8
    386a:	d104      	bne.n	3876 <tc_init+0x62>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    386c:	2017      	movs	r0, #23

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    386e:	4642      	mov	r2, r8
    3870:	07d2      	lsls	r2, r2, #31
    3872:	d500      	bpl.n	3876 <tc_init+0x62>
    3874:	e122      	b.n	3abc <tc_init+0x2a8>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3876:	712b      	strb	r3, [r5, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3878:	6833      	ldr	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    387a:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    387c:	07db      	lsls	r3, r3, #31
    387e:	d500      	bpl.n	3882 <tc_init+0x6e>
    3880:	e11c      	b.n	3abc <tc_init+0x2a8>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3882:	7af3      	ldrb	r3, [r6, #11]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    3884:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3886:	079b      	lsls	r3, r3, #30
    3888:	d500      	bpl.n	388c <tc_init+0x78>
    388a:	e117      	b.n	3abc <tc_init+0x2a8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    388c:	6833      	ldr	r3, [r6, #0]
    388e:	079b      	lsls	r3, r3, #30
    3890:	d500      	bpl.n	3894 <tc_init+0x80>
    3892:	e113      	b.n	3abc <tc_init+0x2a8>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    3894:	7c3b      	ldrb	r3, [r7, #16]
    3896:	2b00      	cmp	r3, #0
    3898:	d00a      	beq.n	38b0 <tc_init+0x9c>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    389a:	a902      	add	r1, sp, #8
    389c:	2301      	movs	r3, #1
    389e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    38a0:	2200      	movs	r2, #0
    38a2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    38a4:	7e3a      	ldrb	r2, [r7, #24]
    38a6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    38a8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    38aa:	7d38      	ldrb	r0, [r7, #20]
    38ac:	4b89      	ldr	r3, [pc, #548]	; (3ad4 <tc_init+0x2c0>)
    38ae:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    38b0:	7f3b      	ldrb	r3, [r7, #28]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d00b      	beq.n	38ce <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    38b6:	a902      	add	r1, sp, #8
    38b8:	2301      	movs	r3, #1
    38ba:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    38bc:	2200      	movs	r2, #0
    38be:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    38c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38c2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    38c4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    38c6:	6a3b      	ldr	r3, [r7, #32]
    38c8:	b2d8      	uxtb	r0, r3
    38ca:	4b82      	ldr	r3, [pc, #520]	; (3ad4 <tc_init+0x2c0>)
    38cc:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    38ce:	4643      	mov	r3, r8
    38d0:	005a      	lsls	r2, r3, #1
    38d2:	a903      	add	r1, sp, #12
    38d4:	1c53      	adds	r3, r2, #1
    38d6:	009b      	lsls	r3, r3, #2
    38d8:	5858      	ldr	r0, [r3, r1]
    38da:	4643      	mov	r3, r8
    38dc:	00db      	lsls	r3, r3, #3
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    38de:	585b      	ldr	r3, [r3, r1]
    38e0:	b2d9      	uxtb	r1, r3
    38e2:	2904      	cmp	r1, #4
    38e4:	d81b      	bhi.n	391e <tc_init+0x10a>
    38e6:	008b      	lsls	r3, r1, #2
    38e8:	497b      	ldr	r1, [pc, #492]	; (3ad8 <tc_init+0x2c4>)
    38ea:	58cb      	ldr	r3, [r1, r3]
    38ec:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    38ee:	497b      	ldr	r1, [pc, #492]	; (3adc <tc_init+0x2c8>)
    38f0:	694b      	ldr	r3, [r1, #20]
    38f2:	4318      	orrs	r0, r3
    38f4:	6148      	str	r0, [r1, #20]
    38f6:	e012      	b.n	391e <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    38f8:	4978      	ldr	r1, [pc, #480]	; (3adc <tc_init+0x2c8>)
    38fa:	698b      	ldr	r3, [r1, #24]
    38fc:	4318      	orrs	r0, r3
    38fe:	6188      	str	r0, [r1, #24]
    3900:	e00d      	b.n	391e <tc_init+0x10a>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    3902:	4976      	ldr	r1, [pc, #472]	; (3adc <tc_init+0x2c8>)
    3904:	69cb      	ldr	r3, [r1, #28]
    3906:	4318      	orrs	r0, r3
    3908:	61c8      	str	r0, [r1, #28]
    390a:	e008      	b.n	391e <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    390c:	4973      	ldr	r1, [pc, #460]	; (3adc <tc_init+0x2c8>)
    390e:	6a0b      	ldr	r3, [r1, #32]
    3910:	4318      	orrs	r0, r3
    3912:	6208      	str	r0, [r1, #32]
    3914:	e003      	b.n	391e <tc_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    3916:	4971      	ldr	r1, [pc, #452]	; (3adc <tc_init+0x2c8>)
    3918:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    391a:	4318      	orrs	r0, r3
    391c:	6248      	str	r0, [r1, #36]	; 0x24
			inst_mclk_apbmask[2*instance+1]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    391e:	78fb      	ldrb	r3, [r7, #3]
    3920:	2b08      	cmp	r3, #8
    3922:	d129      	bne.n	3978 <tc_init+0x164>
    3924:	4643      	mov	r3, r8
    3926:	3301      	adds	r3, #1
    3928:	2b02      	cmp	r3, #2
    392a:	dc25      	bgt.n	3978 <tc_init+0x164>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    392c:	a903      	add	r1, sp, #12
    392e:	1cd3      	adds	r3, r2, #3
    3930:	009b      	lsls	r3, r3, #2
    3932:	5858      	ldr	r0, [r3, r1]
    3934:	1c93      	adds	r3, r2, #2
    3936:	009b      	lsls	r3, r3, #2
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
    3938:	585b      	ldr	r3, [r3, r1]
    393a:	b2da      	uxtb	r2, r3
    393c:	2a04      	cmp	r2, #4
    393e:	d81b      	bhi.n	3978 <tc_init+0x164>
    3940:	0093      	lsls	r3, r2, #2
    3942:	4a67      	ldr	r2, [pc, #412]	; (3ae0 <tc_init+0x2cc>)
    3944:	58d3      	ldr	r3, [r2, r3]
    3946:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3948:	4a64      	ldr	r2, [pc, #400]	; (3adc <tc_init+0x2c8>)
    394a:	6953      	ldr	r3, [r2, #20]
    394c:	4318      	orrs	r0, r3
    394e:	6150      	str	r0, [r2, #20]
    3950:	e012      	b.n	3978 <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    3952:	4a62      	ldr	r2, [pc, #392]	; (3adc <tc_init+0x2c8>)
    3954:	6993      	ldr	r3, [r2, #24]
    3956:	4318      	orrs	r0, r3
    3958:	6190      	str	r0, [r2, #24]
    395a:	e00d      	b.n	3978 <tc_init+0x164>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    395c:	4a5f      	ldr	r2, [pc, #380]	; (3adc <tc_init+0x2c8>)
    395e:	69d3      	ldr	r3, [r2, #28]
    3960:	4318      	orrs	r0, r3
    3962:	61d0      	str	r0, [r2, #28]
    3964:	e008      	b.n	3978 <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    3966:	4a5d      	ldr	r2, [pc, #372]	; (3adc <tc_init+0x2c8>)
    3968:	6a13      	ldr	r3, [r2, #32]
    396a:	4318      	orrs	r0, r3
    396c:	6210      	str	r0, [r2, #32]
    396e:	e003      	b.n	3978 <tc_init+0x164>
			break;
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    3970:	4a5a      	ldr	r2, [pc, #360]	; (3adc <tc_init+0x2c8>)
    3972:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3974:	4318      	orrs	r0, r3
    3976:	6250      	str	r0, [r2, #36]	; 0x24
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    3978:	a901      	add	r1, sp, #4
    397a:	783b      	ldrb	r3, [r7, #0]
    397c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    397e:	ab09      	add	r3, sp, #36	; 0x24
    3980:	4642      	mov	r2, r8
    3982:	5c9c      	ldrb	r4, [r3, r2]
    3984:	0020      	movs	r0, r4
    3986:	4b57      	ldr	r3, [pc, #348]	; (3ae4 <tc_init+0x2d0>)
    3988:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    398a:	0020      	movs	r0, r4
    398c:	4b56      	ldr	r3, [pc, #344]	; (3ae8 <tc_init+0x2d4>)
    398e:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    3990:	78fa      	ldrb	r2, [r7, #3]
    3992:	79fb      	ldrb	r3, [r7, #7]
    3994:	4313      	orrs	r3, r2
    3996:	88ba      	ldrh	r2, [r7, #4]
    3998:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    399a:	7a7a      	ldrb	r2, [r7, #9]
    399c:	2a00      	cmp	r2, #0
    399e:	d002      	beq.n	39a6 <tc_init+0x192>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    39a0:	2280      	movs	r2, #128	; 0x80
    39a2:	0252      	lsls	r2, r2, #9
    39a4:	4313      	orrs	r3, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    39a6:	7aba      	ldrb	r2, [r7, #10]
    39a8:	2a00      	cmp	r2, #0
    39aa:	d002      	beq.n	39b2 <tc_init+0x19e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    39ac:	2280      	movs	r2, #128	; 0x80
    39ae:	0292      	lsls	r2, r2, #10
    39b0:	4313      	orrs	r3, r2
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    39b2:	7afa      	ldrb	r2, [r7, #11]
    39b4:	2a00      	cmp	r2, #0
    39b6:	d002      	beq.n	39be <tc_init+0x1aa>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    39b8:	2280      	movs	r2, #128	; 0x80
    39ba:	0352      	lsls	r2, r2, #13
    39bc:	4313      	orrs	r3, r2
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_IO[i] == true) {
    39be:	7b3a      	ldrb	r2, [r7, #12]
    39c0:	2a00      	cmp	r2, #0
    39c2:	d002      	beq.n	39ca <tc_init+0x1b6>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    39c4:	2280      	movs	r2, #128	; 0x80
    39c6:	0392      	lsls	r2, r2, #14
    39c8:	4313      	orrs	r3, r2
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    39ca:	7879      	ldrb	r1, [r7, #1]
    39cc:	0189      	lsls	r1, r1, #6
    39ce:	78ba      	ldrb	r2, [r7, #2]
    39d0:	01d2      	lsls	r2, r2, #7
    39d2:	4311      	orrs	r1, r2
    39d4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    39d6:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    39d8:	6913      	ldr	r3, [r2, #16]
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    39da:	2b00      	cmp	r3, #0
    39dc:	d1fc      	bne.n	39d8 <tc_init+0x1c4>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    39de:	6031      	str	r1, [r6, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    39e0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    39e2:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    39e4:	2b00      	cmp	r3, #0
    39e6:	d1fc      	bne.n	39e2 <tc_init+0x1ce>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    39e8:	79bb      	ldrb	r3, [r7, #6]
    39ea:	7333      	strb	r3, [r6, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    39ec:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    39ee:	1e4b      	subs	r3, r1, #1
    39f0:	4199      	sbcs	r1, r3
    39f2:	0089      	lsls	r1, r1, #2
	}

	if (config->count_direction) {
    39f4:	7bbb      	ldrb	r3, [r7, #14]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d001      	beq.n	39fe <tc_init+0x1ea>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    39fa:	2301      	movs	r3, #1
    39fc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    39fe:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a00:	6913      	ldr	r3, [r2, #16]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    3a02:	2b00      	cmp	r3, #0
    3a04:	d1fc      	bne.n	3a00 <tc_init+0x1ec>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3a06:	33ff      	adds	r3, #255	; 0xff
    3a08:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3a0a:	2900      	cmp	r1, #0
    3a0c:	d004      	beq.n	3a18 <tc_init+0x204>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a0e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a10:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    3a12:	2b00      	cmp	r3, #0
    3a14:	d1fc      	bne.n	3a10 <tc_init+0x1fc>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3a16:	7171      	strb	r1, [r6, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    3a18:	7a3b      	ldrb	r3, [r7, #8]
    3a1a:	7373      	strb	r3, [r6, #13]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a1c:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a1e:	6913      	ldr	r3, [r2, #16]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3a20:	2b00      	cmp	r3, #0
    3a22:	d1fc      	bne.n	3a1e <tc_init+0x20a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3a24:	792b      	ldrb	r3, [r5, #4]
    3a26:	2b04      	cmp	r3, #4
    3a28:	d005      	beq.n	3a36 <tc_init+0x222>
    3a2a:	2b08      	cmp	r3, #8
    3a2c:	d033      	beq.n	3a96 <tc_init+0x282>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    3a2e:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3a30:	2b00      	cmp	r3, #0
    3a32:	d143      	bne.n	3abc <tc_init+0x2a8>
    3a34:	e01c      	b.n	3a70 <tc_init+0x25c>
    3a36:	6913      	ldr	r3, [r2, #16]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d1fc      	bne.n	3a36 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3a3c:	3328      	adds	r3, #40	; 0x28
    3a3e:	5cfb      	ldrb	r3, [r7, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3a40:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a42:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a44:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    3a46:	2b00      	cmp	r3, #0
    3a48:	d1fc      	bne.n	3a44 <tc_init+0x230>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    3a4a:	3329      	adds	r3, #41	; 0x29
    3a4c:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3a4e:	76f3      	strb	r3, [r6, #27]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a50:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a52:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3a54:	2b00      	cmp	r3, #0
    3a56:	d1fc      	bne.n	3a52 <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3a58:	332a      	adds	r3, #42	; 0x2a
    3a5a:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3a5c:	7733      	strb	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a5e:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a60:	6913      	ldr	r3, [r2, #16]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3a62:	2b00      	cmp	r3, #0
    3a64:	d1fc      	bne.n	3a60 <tc_init+0x24c>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3a66:	332b      	adds	r3, #43	; 0x2b
    3a68:	5cfb      	ldrb	r3, [r7, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3a6a:	7773      	strb	r3, [r6, #29]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    3a6c:	2000      	movs	r0, #0
    3a6e:	e025      	b.n	3abc <tc_init+0x2a8>
    3a70:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    3a72:	2b00      	cmp	r3, #0
    3a74:	d1fc      	bne.n	3a70 <tc_init+0x25c>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    3a76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    3a78:	82b3      	strh	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a7a:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a7c:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d1fc      	bne.n	3a7c <tc_init+0x268>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    3a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    3a84:	83b3      	strh	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3a86:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3a88:	6913      	ldr	r3, [r2, #16]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d1fc      	bne.n	3a88 <tc_init+0x274>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    3a8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    3a90:	83f3      	strh	r3, [r6, #30]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    3a92:	2000      	movs	r0, #0
    3a94:	e012      	b.n	3abc <tc_init+0x2a8>
    3a96:	6913      	ldr	r3, [r2, #16]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d1fc      	bne.n	3a96 <tc_init+0x282>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    3a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a9e:	6173      	str	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3aa0:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3aa2:	6913      	ldr	r3, [r2, #16]

			while (tc_is_syncing(module_inst)) {
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d1fc      	bne.n	3aa2 <tc_init+0x28e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    3aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3aaa:	61f3      	str	r3, [r6, #28]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3aac:	682a      	ldr	r2, [r5, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3aae:	6913      	ldr	r3, [r2, #16]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d1fc      	bne.n	3aae <tc_init+0x29a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    3ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    3ab6:	6233      	str	r3, [r6, #32]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    3ab8:	2000      	movs	r0, #0
    3aba:	e7ff      	b.n	3abc <tc_init+0x2a8>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    3abc:	b00a      	add	sp, #40	; 0x28
    3abe:	bc04      	pop	{r2}
    3ac0:	4690      	mov	r8, r2
    3ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ac4:	000037dd 	.word	0x000037dd
    3ac8:	00005640 	.word	0x00005640
    3acc:	00004d3d 	.word	0x00004d3d
    3ad0:	2000057c 	.word	0x2000057c
    3ad4:	000036f1 	.word	0x000036f1
    3ad8:	00005618 	.word	0x00005618
    3adc:	40000400 	.word	0x40000400
    3ae0:	0000562c 	.word	0x0000562c
    3ae4:	000035f5 	.word	0x000035f5
    3ae8:	00003585 	.word	0x00003585

00003aec <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    3aec:	6802      	ldr	r2, [r0, #0]
    3aee:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3af0:	2b00      	cmp	r3, #0
    3af2:	d1fc      	bne.n	3aee <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3af4:	7903      	ldrb	r3, [r0, #4]
    3af6:	2b04      	cmp	r3, #4
    3af8:	d005      	beq.n	3b06 <tc_set_count_value+0x1a>
    3afa:	2b08      	cmp	r3, #8
    3afc:	d00b      	beq.n	3b16 <tc_set_count_value+0x2a>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    3afe:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3b00:	2b00      	cmp	r3, #0
    3b02:	d10b      	bne.n	3b1c <tc_set_count_value+0x30>
    3b04:	e003      	b.n	3b0e <tc_set_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    3b06:	b2c9      	uxtb	r1, r1
    3b08:	7511      	strb	r1, [r2, #20]
			return STATUS_OK;
    3b0a:	2000      	movs	r0, #0
    3b0c:	e006      	b.n	3b1c <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    3b0e:	b289      	uxth	r1, r1
    3b10:	8291      	strh	r1, [r2, #20]
			return STATUS_OK;
    3b12:	2000      	movs	r0, #0
    3b14:	e002      	b.n	3b1c <tc_set_count_value+0x30>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    3b16:	6151      	str	r1, [r2, #20]
			return STATUS_OK;
    3b18:	2000      	movs	r0, #0
    3b1a:	e7ff      	b.n	3b1c <tc_set_count_value+0x30>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    3b1c:	4770      	bx	lr
    3b1e:	46c0      	nop			; (mov r8, r8)

00003b20 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b20:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3b22:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b24:	2b00      	cmp	r3, #0
    3b26:	d1fc      	bne.n	3b22 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3b28:	7113      	strb	r3, [r2, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b2a:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3b2c:	690b      	ldr	r3, [r1, #16]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d1fc      	bne.n	3b2c <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    3b32:	3380      	adds	r3, #128	; 0x80
    3b34:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3b36:	6802      	ldr	r2, [r0, #0]

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3b38:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d1fc      	bne.n	3b38 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3b3e:	7901      	ldrb	r1, [r0, #4]
    3b40:	2904      	cmp	r1, #4
    3b42:	d004      	beq.n	3b4e <tc_get_count_value+0x2e>
    3b44:	2908      	cmp	r1, #8
    3b46:	d008      	beq.n	3b5a <tc_get_count_value+0x3a>
    3b48:	2900      	cmp	r1, #0
    3b4a:	d107      	bne.n	3b5c <tc_get_count_value+0x3c>
    3b4c:	e002      	b.n	3b54 <tc_get_count_value+0x34>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3b4e:	7d13      	ldrb	r3, [r2, #20]
    3b50:	b2db      	uxtb	r3, r3
    3b52:	e003      	b.n	3b5c <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    3b54:	8a93      	ldrh	r3, [r2, #20]
    3b56:	b29b      	uxth	r3, r3
    3b58:	e000      	b.n	3b5c <tc_get_count_value+0x3c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    3b5a:	6953      	ldr	r3, [r2, #20]
	}

	Assert(false);
	return 0;
}
    3b5c:	0018      	movs	r0, r3
    3b5e:	4770      	bx	lr

00003b60 <tc_reset>:
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b60:	6803      	ldr	r3, [r0, #0]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    3b62:	7ad9      	ldrb	r1, [r3, #11]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3b64:	2215      	movs	r2, #21
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    3b66:	0789      	lsls	r1, r1, #30
    3b68:	d415      	bmi.n	3b96 <tc_reset+0x36>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    3b6a:	681a      	ldr	r2, [r3, #0]
    3b6c:	0792      	lsls	r2, r2, #30
    3b6e:	d50d      	bpl.n	3b8c <tc_reset+0x2c>
    3b70:	691a      	ldr	r2, [r3, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3b72:	2a00      	cmp	r2, #0
    3b74:	d1fc      	bne.n	3b70 <tc_reset+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    3b76:	3233      	adds	r2, #51	; 0x33
    3b78:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    3b7a:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    3b7c:	681a      	ldr	r2, [r3, #0]
    3b7e:	2102      	movs	r1, #2
    3b80:	438a      	bics	r2, r1
    3b82:	601a      	str	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b84:	6801      	ldr	r1, [r0, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    3b86:	690a      	ldr	r2, [r1, #16]
		tc_disable(module_inst);
		while (tc_is_syncing(module_inst)) {
    3b88:	2a00      	cmp	r2, #0
    3b8a:	d1fc      	bne.n	3b86 <tc_reset+0x26>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    3b8c:	6819      	ldr	r1, [r3, #0]
    3b8e:	2201      	movs	r2, #1
    3b90:	430a      	orrs	r2, r1
    3b92:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    3b94:	2200      	movs	r2, #0
}
    3b96:	0010      	movs	r0, r2
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)

00003b9c <Dummy_Handler>:
void Dummy_Handler(void)
{
	//while(1) {
		//phantomISR = __get_IPSR();
	//}
}
    3b9c:	4770      	bx	lr
    3b9e:	46c0      	nop			; (mov r8, r8)

00003ba0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3ba0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3ba2:	4b1d      	ldr	r3, [pc, #116]	; (3c18 <Reset_Handler+0x78>)
    3ba4:	4a1d      	ldr	r2, [pc, #116]	; (3c1c <Reset_Handler+0x7c>)
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d003      	beq.n	3bb2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    3baa:	4b1d      	ldr	r3, [pc, #116]	; (3c20 <Reset_Handler+0x80>)
    3bac:	4a1a      	ldr	r2, [pc, #104]	; (3c18 <Reset_Handler+0x78>)
    3bae:	429a      	cmp	r2, r3
    3bb0:	d304      	bcc.n	3bbc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3bb2:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <Reset_Handler+0x84>)
    3bb4:	4a1c      	ldr	r2, [pc, #112]	; (3c28 <Reset_Handler+0x88>)
    3bb6:	429a      	cmp	r2, r3
    3bb8:	d310      	bcc.n	3bdc <Reset_Handler+0x3c>
    3bba:	e01e      	b.n	3bfa <Reset_Handler+0x5a>
    3bbc:	4a1b      	ldr	r2, [pc, #108]	; (3c2c <Reset_Handler+0x8c>)
    3bbe:	4b18      	ldr	r3, [pc, #96]	; (3c20 <Reset_Handler+0x80>)
    3bc0:	3303      	adds	r3, #3
    3bc2:	1a9b      	subs	r3, r3, r2
    3bc4:	089b      	lsrs	r3, r3, #2
    3bc6:	3301      	adds	r3, #1
    3bc8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3bca:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3bcc:	4812      	ldr	r0, [pc, #72]	; (3c18 <Reset_Handler+0x78>)
    3bce:	4913      	ldr	r1, [pc, #76]	; (3c1c <Reset_Handler+0x7c>)
    3bd0:	588c      	ldr	r4, [r1, r2]
    3bd2:	5084      	str	r4, [r0, r2]
    3bd4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3bd6:	429a      	cmp	r2, r3
    3bd8:	d1fa      	bne.n	3bd0 <Reset_Handler+0x30>
    3bda:	e7ea      	b.n	3bb2 <Reset_Handler+0x12>
    3bdc:	4a14      	ldr	r2, [pc, #80]	; (3c30 <Reset_Handler+0x90>)
    3bde:	4b11      	ldr	r3, [pc, #68]	; (3c24 <Reset_Handler+0x84>)
    3be0:	3303      	adds	r3, #3
    3be2:	1a9b      	subs	r3, r3, r2
    3be4:	089b      	lsrs	r3, r3, #2
    3be6:	3301      	adds	r3, #1
    3be8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3bea:	2200      	movs	r2, #0
                *pDest++ = 0;
    3bec:	480e      	ldr	r0, [pc, #56]	; (3c28 <Reset_Handler+0x88>)
    3bee:	2100      	movs	r1, #0
    3bf0:	1814      	adds	r4, r2, r0
    3bf2:	6021      	str	r1, [r4, #0]
    3bf4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3bf6:	429a      	cmp	r2, r3
    3bf8:	d1fa      	bne.n	3bf0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3bfa:	4a0e      	ldr	r2, [pc, #56]	; (3c34 <Reset_Handler+0x94>)
    3bfc:	21ff      	movs	r1, #255	; 0xff
    3bfe:	4b0e      	ldr	r3, [pc, #56]	; (3c38 <Reset_Handler+0x98>)
    3c00:	438b      	bics	r3, r1
    3c02:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3c04:	4a0d      	ldr	r2, [pc, #52]	; (3c3c <Reset_Handler+0x9c>)
    3c06:	6851      	ldr	r1, [r2, #4]
    3c08:	2380      	movs	r3, #128	; 0x80
    3c0a:	430b      	orrs	r3, r1
    3c0c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3c0e:	4b0c      	ldr	r3, [pc, #48]	; (3c40 <Reset_Handler+0xa0>)
    3c10:	4798      	blx	r3

        /* Branch to main function */
        main();
    3c12:	4b0c      	ldr	r3, [pc, #48]	; (3c44 <Reset_Handler+0xa4>)
    3c14:	4798      	blx	r3
    3c16:	e7fe      	b.n	3c16 <Reset_Handler+0x76>
    3c18:	20000000 	.word	0x20000000
    3c1c:	000057b0 	.word	0x000057b0
    3c20:	20000094 	.word	0x20000094
    3c24:	200005e8 	.word	0x200005e8
    3c28:	20000094 	.word	0x20000094
    3c2c:	20000004 	.word	0x20000004
    3c30:	20000098 	.word	0x20000098
    3c34:	e000ed00 	.word	0xe000ed00
    3c38:	00000000 	.word	0x00000000
    3c3c:	41004000 	.word	0x41004000
    3c40:	00004cf1 	.word	0x00004cf1
    3c44:	000049f1 	.word	0x000049f1

00003c48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	4647      	mov	r7, r8
    3c4c:	b480      	push	{r7}
    3c4e:	000c      	movs	r4, r1
    3c50:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3c52:	2800      	cmp	r0, #0
    3c54:	d10d      	bne.n	3c72 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    3c56:	2a00      	cmp	r2, #0
    3c58:	dd0e      	ble.n	3c78 <_read+0x30>
    3c5a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3c5c:	4e08      	ldr	r6, [pc, #32]	; (3c80 <_read+0x38>)
    3c5e:	4d09      	ldr	r5, [pc, #36]	; (3c84 <_read+0x3c>)
    3c60:	6830      	ldr	r0, [r6, #0]
    3c62:	0021      	movs	r1, r4
    3c64:	682b      	ldr	r3, [r5, #0]
    3c66:	4798      	blx	r3
		ptr++;
    3c68:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    3c6a:	42a7      	cmp	r7, r4
    3c6c:	d1f8      	bne.n	3c60 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    3c6e:	4640      	mov	r0, r8
    3c70:	e003      	b.n	3c7a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    3c72:	2001      	movs	r0, #1
    3c74:	4240      	negs	r0, r0
    3c76:	e000      	b.n	3c7a <_read+0x32>
	}

	for (; len > 0; --len) {
    3c78:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    3c7a:	bc04      	pop	{r2}
    3c7c:	4690      	mov	r8, r2
    3c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c80:	20000590 	.word	0x20000590
    3c84:	20000588 	.word	0x20000588

00003c88 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c8a:	4647      	mov	r7, r8
    3c8c:	b480      	push	{r7}
    3c8e:	000e      	movs	r6, r1
    3c90:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3c92:	3801      	subs	r0, #1
    3c94:	2802      	cmp	r0, #2
    3c96:	d811      	bhi.n	3cbc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    3c98:	2a00      	cmp	r2, #0
    3c9a:	d012      	beq.n	3cc2 <_write+0x3a>
    3c9c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3c9e:	4b0c      	ldr	r3, [pc, #48]	; (3cd0 <_write+0x48>)
    3ca0:	4698      	mov	r8, r3
    3ca2:	4f0c      	ldr	r7, [pc, #48]	; (3cd4 <_write+0x4c>)
    3ca4:	4643      	mov	r3, r8
    3ca6:	6818      	ldr	r0, [r3, #0]
    3ca8:	5d31      	ldrb	r1, [r6, r4]
    3caa:	683b      	ldr	r3, [r7, #0]
    3cac:	4798      	blx	r3
    3cae:	2800      	cmp	r0, #0
    3cb0:	db09      	blt.n	3cc6 <_write+0x3e>
			return -1;
		}
		++nChars;
    3cb2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    3cb4:	42a5      	cmp	r5, r4
    3cb6:	d1f5      	bne.n	3ca4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    3cb8:	0020      	movs	r0, r4
    3cba:	e006      	b.n	3cca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    3cbc:	2001      	movs	r0, #1
    3cbe:	4240      	negs	r0, r0
    3cc0:	e003      	b.n	3cca <_write+0x42>
	}

	for (; len != 0; --len) {
    3cc2:	2000      	movs	r0, #0
    3cc4:	e001      	b.n	3cca <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    3cc6:	2001      	movs	r0, #1
    3cc8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    3cca:	bc04      	pop	{r2}
    3ccc:	4690      	mov	r8, r2
    3cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cd0:	20000590 	.word	0x20000590
    3cd4:	2000058c 	.word	0x2000058c

00003cd8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3cd8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3cda:	4a06      	ldr	r2, [pc, #24]	; (3cf4 <_sbrk+0x1c>)
    3cdc:	6812      	ldr	r2, [r2, #0]
    3cde:	2a00      	cmp	r2, #0
    3ce0:	d102      	bne.n	3ce8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    3ce2:	4905      	ldr	r1, [pc, #20]	; (3cf8 <_sbrk+0x20>)
    3ce4:	4a03      	ldr	r2, [pc, #12]	; (3cf4 <_sbrk+0x1c>)
    3ce6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    3ce8:	4a02      	ldr	r2, [pc, #8]	; (3cf4 <_sbrk+0x1c>)
    3cea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3cec:	18c3      	adds	r3, r0, r3
    3cee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3cf0:	4770      	bx	lr
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	200001a8 	.word	0x200001a8
    3cf8:	200025e8 	.word	0x200025e8

00003cfc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3cfc:	2001      	movs	r0, #1
    3cfe:	4240      	negs	r0, r0
    3d00:	4770      	bx	lr
    3d02:	46c0      	nop			; (mov r8, r8)

00003d04 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3d04:	2380      	movs	r3, #128	; 0x80
    3d06:	019b      	lsls	r3, r3, #6
    3d08:	604b      	str	r3, [r1, #4]

	return 0;
}
    3d0a:	2000      	movs	r0, #0
    3d0c:	4770      	bx	lr
    3d0e:	46c0      	nop			; (mov r8, r8)

00003d10 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3d10:	2000      	movs	r0, #0
    3d12:	4770      	bx	lr

00003d14 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3d14:	b570      	push	{r4, r5, r6, lr}
    3d16:	b082      	sub	sp, #8
    3d18:	0005      	movs	r5, r0
    3d1a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3d1c:	2200      	movs	r2, #0
    3d1e:	466b      	mov	r3, sp
    3d20:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3d22:	4c06      	ldr	r4, [pc, #24]	; (3d3c <usart_serial_getchar+0x28>)
    3d24:	466b      	mov	r3, sp
    3d26:	1d99      	adds	r1, r3, #6
    3d28:	0028      	movs	r0, r5
    3d2a:	47a0      	blx	r4
    3d2c:	2800      	cmp	r0, #0
    3d2e:	d1f9      	bne.n	3d24 <usart_serial_getchar+0x10>

	*c = temp;
    3d30:	466b      	mov	r3, sp
    3d32:	3306      	adds	r3, #6
    3d34:	881b      	ldrh	r3, [r3, #0]
    3d36:	7033      	strb	r3, [r6, #0]
}
    3d38:	b002      	add	sp, #8
    3d3a:	bd70      	pop	{r4, r5, r6, pc}
    3d3c:	00002cc1 	.word	0x00002cc1

00003d40 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3d40:	b570      	push	{r4, r5, r6, lr}
    3d42:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3d44:	b28c      	uxth	r4, r1
    3d46:	4e03      	ldr	r6, [pc, #12]	; (3d54 <usart_serial_putchar+0x14>)
    3d48:	0021      	movs	r1, r4
    3d4a:	0028      	movs	r0, r5
    3d4c:	47b0      	blx	r6
    3d4e:	2800      	cmp	r0, #0
    3d50:	d1fa      	bne.n	3d48 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	00002c95 	.word	0x00002c95

00003d58 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3d58:	b510      	push	{r4, lr}
    3d5a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3d5c:	466b      	mov	r3, sp
    3d5e:	1ddc      	adds	r4, r3, #7
    3d60:	2201      	movs	r2, #1
    3d62:	0021      	movs	r1, r4
    3d64:	480f      	ldr	r0, [pc, #60]	; (3da4 <USART_HOST_ISR_VECT+0x4c>)
    3d66:	4b10      	ldr	r3, [pc, #64]	; (3da8 <USART_HOST_ISR_VECT+0x50>)
    3d68:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3d6a:	b672      	cpsid	i
    3d6c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3d70:	2200      	movs	r2, #0
    3d72:	4b0e      	ldr	r3, [pc, #56]	; (3dac <USART_HOST_ISR_VECT+0x54>)
    3d74:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3d76:	4b0e      	ldr	r3, [pc, #56]	; (3db0 <USART_HOST_ISR_VECT+0x58>)
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	7821      	ldrb	r1, [r4, #0]
    3d7c:	4a0d      	ldr	r2, [pc, #52]	; (3db4 <USART_HOST_ISR_VECT+0x5c>)
    3d7e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3d80:	2b9b      	cmp	r3, #155	; 0x9b
    3d82:	d103      	bne.n	3d8c <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    3d84:	2200      	movs	r2, #0
    3d86:	4b0a      	ldr	r3, [pc, #40]	; (3db0 <USART_HOST_ISR_VECT+0x58>)
    3d88:	701a      	strb	r2, [r3, #0]
    3d8a:	e002      	b.n	3d92 <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
    3d8c:	3301      	adds	r3, #1
    3d8e:	4a08      	ldr	r2, [pc, #32]	; (3db0 <USART_HOST_ISR_VECT+0x58>)
    3d90:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3d92:	2201      	movs	r2, #1
    3d94:	4b05      	ldr	r3, [pc, #20]	; (3dac <USART_HOST_ISR_VECT+0x54>)
    3d96:	701a      	strb	r2, [r3, #0]
    3d98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3d9c:	b662      	cpsie	i
}
    3d9e:	b002      	add	sp, #8
    3da0:	bd10      	pop	{r4, pc}
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	20000248 	.word	0x20000248
    3da8:	00002de9 	.word	0x00002de9
    3dac:	2000002c 	.word	0x2000002c
    3db0:	2000027c 	.word	0x2000027c
    3db4:	200001ac 	.word	0x200001ac

00003db8 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    3db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dba:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3dbc:	2380      	movs	r3, #128	; 0x80
    3dbe:	05db      	lsls	r3, r3, #23
    3dc0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3dc2:	2300      	movs	r3, #0
    3dc4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3dc6:	22ff      	movs	r2, #255	; 0xff
    3dc8:	4669      	mov	r1, sp
    3dca:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3dcc:	2200      	movs	r2, #0
    3dce:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3dd0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3dd2:	2196      	movs	r1, #150	; 0x96
    3dd4:	0189      	lsls	r1, r1, #6
    3dd6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3dd8:	2401      	movs	r4, #1
    3dda:	2124      	movs	r1, #36	; 0x24
    3ddc:	4668      	mov	r0, sp
    3dde:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3de0:	3101      	adds	r1, #1
    3de2:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3de4:	3101      	adds	r1, #1
    3de6:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3de8:	3101      	adds	r1, #1
    3dea:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3dec:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3dee:	3105      	adds	r1, #5
    3df0:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3df2:	3101      	adds	r1, #1
    3df4:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3df6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3df8:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3dfa:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3dfc:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3dfe:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3e00:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3e02:	2313      	movs	r3, #19
    3e04:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3e06:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21 || SAMR30
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3e08:	2380      	movs	r3, #128	; 0x80
    3e0a:	035b      	lsls	r3, r3, #13
    3e0c:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3e0e:	4b2e      	ldr	r3, [pc, #184]	; (3ec8 <sio2host_init+0x110>)
    3e10:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3e12:	4b2e      	ldr	r3, [pc, #184]	; (3ecc <sio2host_init+0x114>)
    3e14:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3e16:	2301      	movs	r3, #1
    3e18:	425b      	negs	r3, r3
    3e1a:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3e1c:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3e1e:	4d2c      	ldr	r5, [pc, #176]	; (3ed0 <sio2host_init+0x118>)
    3e20:	4b2c      	ldr	r3, [pc, #176]	; (3ed4 <sio2host_init+0x11c>)
    3e22:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3e24:	4a2c      	ldr	r2, [pc, #176]	; (3ed8 <sio2host_init+0x120>)
    3e26:	4b2d      	ldr	r3, [pc, #180]	; (3edc <sio2host_init+0x124>)
    3e28:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3e2a:	4a2d      	ldr	r2, [pc, #180]	; (3ee0 <sio2host_init+0x128>)
    3e2c:	4b2d      	ldr	r3, [pc, #180]	; (3ee4 <sio2host_init+0x12c>)
    3e2e:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3e30:	466a      	mov	r2, sp
    3e32:	2184      	movs	r1, #132	; 0x84
    3e34:	05c9      	lsls	r1, r1, #23
    3e36:	0028      	movs	r0, r5
    3e38:	4b2b      	ldr	r3, [pc, #172]	; (3ee8 <sio2host_init+0x130>)
    3e3a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3e3c:	4f2b      	ldr	r7, [pc, #172]	; (3eec <sio2host_init+0x134>)
    3e3e:	683b      	ldr	r3, [r7, #0]
    3e40:	6898      	ldr	r0, [r3, #8]
    3e42:	2100      	movs	r1, #0
    3e44:	4e2a      	ldr	r6, [pc, #168]	; (3ef0 <sio2host_init+0x138>)
    3e46:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3e48:	683b      	ldr	r3, [r7, #0]
    3e4a:	6858      	ldr	r0, [r3, #4]
    3e4c:	2100      	movs	r1, #0
    3e4e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e50:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e52:	0030      	movs	r0, r6
    3e54:	4b27      	ldr	r3, [pc, #156]	; (3ef4 <sio2host_init+0x13c>)
    3e56:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e58:	231f      	movs	r3, #31
    3e5a:	4018      	ands	r0, r3
    3e5c:	4084      	lsls	r4, r0
    3e5e:	4b26      	ldr	r3, [pc, #152]	; (3ef8 <sio2host_init+0x140>)
    3e60:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3e62:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e64:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e66:	2b00      	cmp	r3, #0
    3e68:	d1fc      	bne.n	3e64 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3e6a:	6832      	ldr	r2, [r6, #0]
    3e6c:	3302      	adds	r3, #2
    3e6e:	4313      	orrs	r3, r2
    3e70:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e72:	4b17      	ldr	r3, [pc, #92]	; (3ed0 <sio2host_init+0x118>)
    3e74:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e76:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e78:	2a00      	cmp	r2, #0
    3e7a:	d1fc      	bne.n	3e76 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3e7c:	685a      	ldr	r2, [r3, #4]
    3e7e:	2180      	movs	r1, #128	; 0x80
    3e80:	0249      	lsls	r1, r1, #9
    3e82:	430a      	orrs	r2, r1
    3e84:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3e86:	2101      	movs	r1, #1
    3e88:	4a11      	ldr	r2, [pc, #68]	; (3ed0 <sio2host_init+0x118>)
    3e8a:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e8c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e8e:	2a00      	cmp	r2, #0
    3e90:	d1fc      	bne.n	3e8c <sio2host_init+0xd4>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3e92:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3e94:	2a00      	cmp	r2, #0
    3e96:	d1fc      	bne.n	3e92 <sio2host_init+0xda>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3e98:	685a      	ldr	r2, [r3, #4]
    3e9a:	2180      	movs	r1, #128	; 0x80
    3e9c:	0289      	lsls	r1, r1, #10
    3e9e:	430a      	orrs	r2, r1
    3ea0:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3ea2:	2101      	movs	r1, #1
    3ea4:	4a0a      	ldr	r2, [pc, #40]	; (3ed0 <sio2host_init+0x118>)
    3ea6:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ea8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3eaa:	2a00      	cmp	r2, #0
    3eac:	d1fc      	bne.n	3ea8 <sio2host_init+0xf0>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    3eae:	4913      	ldr	r1, [pc, #76]	; (3efc <sio2host_init+0x144>)
    3eb0:	2000      	movs	r0, #0
    3eb2:	4b13      	ldr	r3, [pc, #76]	; (3f00 <sio2host_init+0x148>)
    3eb4:	4798      	blx	r3
    3eb6:	2204      	movs	r2, #4
    3eb8:	2384      	movs	r3, #132	; 0x84
    3eba:	05db      	lsls	r3, r3, #23
    3ebc:	759a      	strb	r2, [r3, #22]
    3ebe:	32fc      	adds	r2, #252	; 0xfc
    3ec0:	4b0d      	ldr	r3, [pc, #52]	; (3ef8 <sio2host_init+0x140>)
    3ec2:	601a      	str	r2, [r3, #0]
}
    3ec4:	b011      	add	sp, #68	; 0x44
    3ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ec8:	00040003 	.word	0x00040003
    3ecc:	00050003 	.word	0x00050003
    3ed0:	20000248 	.word	0x20000248
    3ed4:	20000590 	.word	0x20000590
    3ed8:	00003d41 	.word	0x00003d41
    3edc:	2000058c 	.word	0x2000058c
    3ee0:	00003d15 	.word	0x00003d15
    3ee4:	20000588 	.word	0x20000588
    3ee8:	00002931 	.word	0x00002931
    3eec:	20000090 	.word	0x20000090
    3ef0:	00004d5f 	.word	0x00004d5f
    3ef4:	000024ed 	.word	0x000024ed
    3ef8:	e000e100 	.word	0xe000e100
    3efc:	00003d59 	.word	0x00003d59
    3f00:	000024b1 	.word	0x000024b1

00003f04 <sio2host_tx>:

uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    3f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f06:	b083      	sub	sp, #12
    3f08:	0006      	movs	r6, r0
    3f0a:	9101      	str	r1, [sp, #4]
static inline enum status_code usart_serial_write_packet(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
	return usart_write_buffer_wait(module, tx_data, length);
    3f0c:	466b      	mov	r3, sp
    3f0e:	889d      	ldrh	r5, [r3, #4]
    3f10:	4c05      	ldr	r4, [pc, #20]	; (3f28 <sio2host_tx+0x24>)
    3f12:	4f06      	ldr	r7, [pc, #24]	; (3f2c <sio2host_tx+0x28>)
    3f14:	002a      	movs	r2, r5
    3f16:	0031      	movs	r1, r6
    3f18:	0020      	movs	r0, r4
    3f1a:	47b8      	blx	r7
#else
	    status = usart_serial_write_packet(USART_HOST,
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    3f1c:	2800      	cmp	r0, #0
    3f1e:	d1f9      	bne.n	3f14 <sio2host_tx+0x10>
	return length;
}
    3f20:	9801      	ldr	r0, [sp, #4]
    3f22:	b003      	add	sp, #12
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	20000248 	.word	0x20000248
    3f2c:	00002d31 	.word	0x00002d31

00003f30 <sio2host_putchar>:
	}
	return c;
}

void sio2host_putchar(uint8_t ch)
{
    3f30:	b500      	push	{lr}
    3f32:	b083      	sub	sp, #12
    3f34:	466b      	mov	r3, sp
    3f36:	71d8      	strb	r0, [r3, #7]
    3f38:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    3f3a:	2101      	movs	r1, #1
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b02      	ldr	r3, [pc, #8]	; (3f48 <sio2host_putchar+0x18>)
    3f40:	4798      	blx	r3
}
    3f42:	b003      	add	sp, #12
    3f44:	bd00      	pop	{pc}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	00003f05 	.word	0x00003f05

00003f4c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3f4c:	b510      	push	{r4, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3f4e:	2201      	movs	r2, #1
    3f50:	4b02      	ldr	r3, [pc, #8]	; (3f5c <AT86RFX_ISR+0x10>)
    3f52:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    3f54:	4b02      	ldr	r3, [pc, #8]	; (3f60 <AT86RFX_ISR+0x14>)
    3f56:	4798      	blx	r3

}
    3f58:	bd10      	pop	{r4, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	40002400 	.word	0x40002400
    3f60:	000010e9 	.word	0x000010e9

00003f64 <trx_spi_init>:

void trx_spi_init(void)
{
    3f64:	b530      	push	{r4, r5, lr}
    3f66:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    3f68:	4a34      	ldr	r2, [pc, #208]	; (403c <trx_spi_init+0xd8>)
    3f6a:	2300      	movs	r3, #0
    3f6c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3f6e:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3f70:	213f      	movs	r1, #63	; 0x3f
    3f72:	7011      	strb	r1, [r2, #0]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3f74:	4c32      	ldr	r4, [pc, #200]	; (4040 <trx_spi_init+0xdc>)
    3f76:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3f78:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3f7a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3f7c:	2201      	movs	r2, #1
    3f7e:	4669      	mov	r1, sp
    3f80:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3f82:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3f84:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3f86:	203f      	movs	r0, #63	; 0x3f
    3f88:	4b2e      	ldr	r3, [pc, #184]	; (4044 <trx_spi_init+0xe0>)
    3f8a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3f8c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3f8e:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3f90:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3f92:	2a00      	cmp	r2, #0
    3f94:	d104      	bne.n	3fa0 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3f96:	0959      	lsrs	r1, r3, #5
    3f98:	01c9      	lsls	r1, r1, #7
    3f9a:	4a2b      	ldr	r2, [pc, #172]	; (4048 <trx_spi_init+0xe4>)
    3f9c:	4694      	mov	ip, r2
    3f9e:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3fa0:	221f      	movs	r2, #31
    3fa2:	4013      	ands	r3, r2
    3fa4:	3a1e      	subs	r2, #30
    3fa6:	0010      	movs	r0, r2
    3fa8:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3faa:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3fac:	4c27      	ldr	r4, [pc, #156]	; (404c <trx_spi_init+0xe8>)
    3fae:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3fb0:	2300      	movs	r3, #0
    3fb2:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3fb4:	60a3      	str	r3, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3fb6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3fb8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3fba:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3fbc:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3fbe:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3fc0:	3223      	adds	r2, #35	; 0x23
    3fc2:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3fc4:	0020      	movs	r0, r4
    3fc6:	3018      	adds	r0, #24
    3fc8:	3a18      	subs	r2, #24
    3fca:	2100      	movs	r1, #0
    3fcc:	4b20      	ldr	r3, [pc, #128]	; (4050 <trx_spi_init+0xec>)
    3fce:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3fd0:	2380      	movs	r3, #128	; 0x80
    3fd2:	025b      	lsls	r3, r3, #9
    3fd4:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3fd6:	4b1f      	ldr	r3, [pc, #124]	; (4054 <trx_spi_init+0xf0>)
    3fd8:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3fda:	4b1f      	ldr	r3, [pc, #124]	; (4058 <trx_spi_init+0xf4>)
    3fdc:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3fde:	2301      	movs	r3, #1
    3fe0:	425b      	negs	r3, r3
    3fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3fe4:	4b1d      	ldr	r3, [pc, #116]	; (405c <trx_spi_init+0xf8>)
    3fe6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3fe8:	4b1d      	ldr	r3, [pc, #116]	; (4060 <trx_spi_init+0xfc>)
    3fea:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3fec:	4d1d      	ldr	r5, [pc, #116]	; (4064 <trx_spi_init+0x100>)
    3fee:	0022      	movs	r2, r4
    3ff0:	491d      	ldr	r1, [pc, #116]	; (4068 <trx_spi_init+0x104>)
    3ff2:	0028      	movs	r0, r5
    3ff4:	4b1d      	ldr	r3, [pc, #116]	; (406c <trx_spi_init+0x108>)
    3ff6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ff8:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3ffa:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d1fc      	bne.n	3ffa <trx_spi_init+0x96>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4000:	6813      	ldr	r3, [r2, #0]
    4002:	2502      	movs	r5, #2
    4004:	432b      	orrs	r3, r5
    4006:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4008:	ac01      	add	r4, sp, #4
    400a:	0020      	movs	r0, r4
    400c:	4b18      	ldr	r3, [pc, #96]	; (4070 <trx_spi_init+0x10c>)
    400e:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4010:	2320      	movs	r3, #32
    4012:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4014:	2380      	movs	r3, #128	; 0x80
    4016:	039b      	lsls	r3, r3, #14
    4018:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    401a:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    401c:	2300      	movs	r3, #0
    401e:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    4020:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4022:	3301      	adds	r3, #1
    4024:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    4026:	0021      	movs	r1, r4
    4028:	2000      	movs	r0, #0
    402a:	4b12      	ldr	r3, [pc, #72]	; (4074 <trx_spi_init+0x110>)
    402c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    402e:	2200      	movs	r2, #0
    4030:	2100      	movs	r1, #0
    4032:	4811      	ldr	r0, [pc, #68]	; (4078 <trx_spi_init+0x114>)
    4034:	4b11      	ldr	r3, [pc, #68]	; (407c <trx_spi_init+0x118>)
    4036:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    4038:	b005      	add	sp, #20
    403a:	bd30      	pop	{r4, r5, pc}
    403c:	20000598 	.word	0x20000598
    4040:	2000059c 	.word	0x2000059c
    4044:	0000208d 	.word	0x0000208d
    4048:	40002800 	.word	0x40002800
    404c:	200005a0 	.word	0x200005a0
    4050:	00004d4f 	.word	0x00004d4f
    4054:	003d0900 	.word	0x003d0900
    4058:	00530005 	.word	0x00530005
    405c:	003e0005 	.word	0x003e0005
    4060:	00520005 	.word	0x00520005
    4064:	200005d8 	.word	0x200005d8
    4068:	42001000 	.word	0x42001000
    406c:	00002579 	.word	0x00002579
    4070:	00001ff1 	.word	0x00001ff1
    4074:	00002005 	.word	0x00002005
    4078:	00003f4d 	.word	0x00003f4d
    407c:	00001e75 	.word	0x00001e75

00004080 <PhyReset>:

void PhyReset(void)
{
    4080:	b570      	push	{r4, r5, r6, lr}
    4082:	4b09      	ldr	r3, [pc, #36]	; (40a8 <PhyReset+0x28>)
    4084:	001c      	movs	r4, r3
    4086:	3480      	adds	r4, #128	; 0x80
    4088:	2580      	movs	r5, #128	; 0x80
    408a:	022d      	lsls	r5, r5, #8
    408c:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    408e:	2280      	movs	r2, #128	; 0x80
    4090:	0352      	lsls	r2, r2, #13
    4092:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4094:	20a5      	movs	r0, #165	; 0xa5
    4096:	0040      	lsls	r0, r0, #1
    4098:	4e04      	ldr	r6, [pc, #16]	; (40ac <PhyReset+0x2c>)
    409a:	47b0      	blx	r6
    409c:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    409e:	200a      	movs	r0, #10
    40a0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    40a2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    40a4:	bd70      	pop	{r4, r5, r6, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	40002800 	.word	0x40002800
    40ac:	00001cf1 	.word	0x00001cf1

000040b0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    40b0:	b570      	push	{r4, r5, r6, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	0005      	movs	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40b6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    40ba:	425a      	negs	r2, r3
    40bc:	4153      	adcs	r3, r2
    40be:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40c0:	b672      	cpsid	i
    40c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    40c6:	2200      	movs	r2, #0
    40c8:	4b33      	ldr	r3, [pc, #204]	; (4198 <trx_reg_read+0xe8>)
    40ca:	701a      	strb	r2, [r3, #0]
	return flags;
    40cc:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    40ce:	4e33      	ldr	r6, [pc, #204]	; (419c <trx_reg_read+0xec>)
    40d0:	3201      	adds	r2, #1
    40d2:	4933      	ldr	r1, [pc, #204]	; (41a0 <trx_reg_read+0xf0>)
    40d4:	0030      	movs	r0, r6
    40d6:	4b33      	ldr	r3, [pc, #204]	; (41a4 <trx_reg_read+0xf4>)
    40d8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40da:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    40dc:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40de:	7e1a      	ldrb	r2, [r3, #24]
    40e0:	420a      	tst	r2, r1
    40e2:	d0fc      	beq.n	40de <trx_reg_read+0x2e>
    40e4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40e6:	07d2      	lsls	r2, r2, #31
    40e8:	d502      	bpl.n	40f0 <trx_reg_read+0x40>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40ea:	2280      	movs	r2, #128	; 0x80
    40ec:	4315      	orrs	r5, r2
    40ee:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    40f0:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40f2:	7e1a      	ldrb	r2, [r3, #24]
    40f4:	420a      	tst	r2, r1
    40f6:	d0fc      	beq.n	40f2 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40f8:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40fa:	7e1a      	ldrb	r2, [r3, #24]
    40fc:	420a      	tst	r2, r1
    40fe:	d0fc      	beq.n	40fa <trx_reg_read+0x4a>
    4100:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4102:	0752      	lsls	r2, r2, #29
    4104:	d512      	bpl.n	412c <trx_reg_read+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4106:	8b5a      	ldrh	r2, [r3, #26]
    4108:	0752      	lsls	r2, r2, #29
    410a:	d501      	bpl.n	4110 <trx_reg_read+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    410c:	2204      	movs	r2, #4
    410e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4110:	4a22      	ldr	r2, [pc, #136]	; (419c <trx_reg_read+0xec>)
    4112:	7992      	ldrb	r2, [r2, #6]
    4114:	2a01      	cmp	r2, #1
    4116:	d105      	bne.n	4124 <trx_reg_read+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    411a:	05d2      	lsls	r2, r2, #23
    411c:	0dd2      	lsrs	r2, r2, #23
    411e:	4922      	ldr	r1, [pc, #136]	; (41a8 <trx_reg_read+0xf8>)
    4120:	800a      	strh	r2, [r1, #0]
    4122:	e003      	b.n	412c <trx_reg_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4126:	b2d2      	uxtb	r2, r2
    4128:	491f      	ldr	r1, [pc, #124]	; (41a8 <trx_reg_read+0xf8>)
    412a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    412c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    412e:	7e1a      	ldrb	r2, [r3, #24]
    4130:	420a      	tst	r2, r1
    4132:	d0fc      	beq.n	412e <trx_reg_read+0x7e>
    4134:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4136:	07d2      	lsls	r2, r2, #31
    4138:	d501      	bpl.n	413e <trx_reg_read+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    413a:	2200      	movs	r2, #0
    413c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    413e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4140:	7e1a      	ldrb	r2, [r3, #24]
    4142:	420a      	tst	r2, r1
    4144:	d0fc      	beq.n	4140 <trx_reg_read+0x90>
	}
	while (!spi_is_ready_to_read(&master)) {
    4146:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4148:	7e1a      	ldrb	r2, [r3, #24]
    414a:	420a      	tst	r2, r1
    414c:	d0fc      	beq.n	4148 <trx_reg_read+0x98>
    414e:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    4150:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4152:	0752      	lsls	r2, r2, #29
    4154:	d50e      	bpl.n	4174 <trx_reg_read+0xc4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4156:	8b5a      	ldrh	r2, [r3, #26]
    4158:	0752      	lsls	r2, r2, #29
    415a:	d501      	bpl.n	4160 <trx_reg_read+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    415c:	2204      	movs	r2, #4
    415e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4160:	4a0e      	ldr	r2, [pc, #56]	; (419c <trx_reg_read+0xec>)
    4162:	7992      	ldrb	r2, [r2, #6]
    4164:	2a01      	cmp	r2, #1
    4166:	d103      	bne.n	4170 <trx_reg_read+0xc0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4168:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    416a:	05ed      	lsls	r5, r5, #23
    416c:	0ded      	lsrs	r5, r5, #23
    416e:	e001      	b.n	4174 <trx_reg_read+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4170:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4172:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4174:	2200      	movs	r2, #0
    4176:	490a      	ldr	r1, [pc, #40]	; (41a0 <trx_reg_read+0xf0>)
    4178:	4808      	ldr	r0, [pc, #32]	; (419c <trx_reg_read+0xec>)
    417a:	4b0a      	ldr	r3, [pc, #40]	; (41a4 <trx_reg_read+0xf4>)
    417c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    417e:	23ff      	movs	r3, #255	; 0xff
    4180:	4223      	tst	r3, r4
    4182:	d005      	beq.n	4190 <trx_reg_read+0xe0>
		cpu_irq_enable();
    4184:	2201      	movs	r2, #1
    4186:	4b04      	ldr	r3, [pc, #16]	; (4198 <trx_reg_read+0xe8>)
    4188:	701a      	strb	r2, [r3, #0]
    418a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    418e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4190:	b2e8      	uxtb	r0, r5
}
    4192:	b002      	add	sp, #8
    4194:	bd70      	pop	{r4, r5, r6, pc}
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	2000002c 	.word	0x2000002c
    419c:	200005d8 	.word	0x200005d8
    41a0:	2000059c 	.word	0x2000059c
    41a4:	00002841 	.word	0x00002841
    41a8:	20000594 	.word	0x20000594

000041ac <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ae:	b083      	sub	sp, #12
    41b0:	0006      	movs	r6, r0
    41b2:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41b4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    41b8:	425a      	negs	r2, r3
    41ba:	4153      	adcs	r3, r2
    41bc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    41be:	b672      	cpsid	i
    41c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41c4:	2200      	movs	r2, #0
    41c6:	4b34      	ldr	r3, [pc, #208]	; (4298 <trx_reg_write+0xec>)
    41c8:	701a      	strb	r2, [r3, #0]
	return flags;
    41ca:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    41cc:	4f33      	ldr	r7, [pc, #204]	; (429c <trx_reg_write+0xf0>)
    41ce:	3201      	adds	r2, #1
    41d0:	4933      	ldr	r1, [pc, #204]	; (42a0 <trx_reg_write+0xf4>)
    41d2:	0038      	movs	r0, r7
    41d4:	4b33      	ldr	r3, [pc, #204]	; (42a4 <trx_reg_write+0xf8>)
    41d6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41d8:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    41da:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41dc:	7e1a      	ldrb	r2, [r3, #24]
    41de:	420a      	tst	r2, r1
    41e0:	d0fc      	beq.n	41dc <trx_reg_write+0x30>
    41e2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41e4:	07d2      	lsls	r2, r2, #31
    41e6:	d502      	bpl.n	41ee <trx_reg_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41e8:	22c0      	movs	r2, #192	; 0xc0
    41ea:	4316      	orrs	r6, r2
    41ec:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    41ee:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41f0:	7e1a      	ldrb	r2, [r3, #24]
    41f2:	420a      	tst	r2, r1
    41f4:	d0fc      	beq.n	41f0 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    41f6:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41f8:	7e1a      	ldrb	r2, [r3, #24]
    41fa:	420a      	tst	r2, r1
    41fc:	d0fc      	beq.n	41f8 <trx_reg_write+0x4c>
    41fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4200:	0752      	lsls	r2, r2, #29
    4202:	d512      	bpl.n	422a <trx_reg_write+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4204:	8b5a      	ldrh	r2, [r3, #26]
    4206:	0752      	lsls	r2, r2, #29
    4208:	d501      	bpl.n	420e <trx_reg_write+0x62>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    420a:	2204      	movs	r2, #4
    420c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    420e:	4a23      	ldr	r2, [pc, #140]	; (429c <trx_reg_write+0xf0>)
    4210:	7992      	ldrb	r2, [r2, #6]
    4212:	2a01      	cmp	r2, #1
    4214:	d105      	bne.n	4222 <trx_reg_write+0x76>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4218:	05d2      	lsls	r2, r2, #23
    421a:	0dd2      	lsrs	r2, r2, #23
    421c:	4922      	ldr	r1, [pc, #136]	; (42a8 <trx_reg_write+0xfc>)
    421e:	800a      	strh	r2, [r1, #0]
    4220:	e003      	b.n	422a <trx_reg_write+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4224:	b2d2      	uxtb	r2, r2
    4226:	4920      	ldr	r1, [pc, #128]	; (42a8 <trx_reg_write+0xfc>)
    4228:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    422a:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    422c:	7e1a      	ldrb	r2, [r3, #24]
    422e:	420a      	tst	r2, r1
    4230:	d0fc      	beq.n	422c <trx_reg_write+0x80>
    4232:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4234:	07d2      	lsls	r2, r2, #31
    4236:	d500      	bpl.n	423a <trx_reg_write+0x8e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4238:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    423a:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    423c:	7e1a      	ldrb	r2, [r3, #24]
    423e:	420a      	tst	r2, r1
    4240:	d0fc      	beq.n	423c <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4242:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4244:	7e1a      	ldrb	r2, [r3, #24]
    4246:	420a      	tst	r2, r1
    4248:	d0fc      	beq.n	4244 <trx_reg_write+0x98>
    424a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    424c:	0752      	lsls	r2, r2, #29
    424e:	d512      	bpl.n	4276 <trx_reg_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4250:	8b5a      	ldrh	r2, [r3, #26]
    4252:	0752      	lsls	r2, r2, #29
    4254:	d501      	bpl.n	425a <trx_reg_write+0xae>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4256:	2204      	movs	r2, #4
    4258:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    425a:	4a10      	ldr	r2, [pc, #64]	; (429c <trx_reg_write+0xf0>)
    425c:	7992      	ldrb	r2, [r2, #6]
    425e:	2a01      	cmp	r2, #1
    4260:	d105      	bne.n	426e <trx_reg_write+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4264:	05db      	lsls	r3, r3, #23
    4266:	0ddb      	lsrs	r3, r3, #23
    4268:	4a0f      	ldr	r2, [pc, #60]	; (42a8 <trx_reg_write+0xfc>)
    426a:	8013      	strh	r3, [r2, #0]
    426c:	e003      	b.n	4276 <trx_reg_write+0xca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4270:	b2db      	uxtb	r3, r3
    4272:	4a0d      	ldr	r2, [pc, #52]	; (42a8 <trx_reg_write+0xfc>)
    4274:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4276:	2200      	movs	r2, #0
    4278:	4909      	ldr	r1, [pc, #36]	; (42a0 <trx_reg_write+0xf4>)
    427a:	4808      	ldr	r0, [pc, #32]	; (429c <trx_reg_write+0xf0>)
    427c:	4b09      	ldr	r3, [pc, #36]	; (42a4 <trx_reg_write+0xf8>)
    427e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4280:	23ff      	movs	r3, #255	; 0xff
    4282:	422b      	tst	r3, r5
    4284:	d005      	beq.n	4292 <trx_reg_write+0xe6>
		cpu_irq_enable();
    4286:	2201      	movs	r2, #1
    4288:	4b03      	ldr	r3, [pc, #12]	; (4298 <trx_reg_write+0xec>)
    428a:	701a      	strb	r2, [r3, #0]
    428c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4290:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4292:	b003      	add	sp, #12
    4294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	2000002c 	.word	0x2000002c
    429c:	200005d8 	.word	0x200005d8
    42a0:	2000059c 	.word	0x2000059c
    42a4:	00002841 	.word	0x00002841
    42a8:	20000594 	.word	0x20000594

000042ac <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ae:	4657      	mov	r7, sl
    42b0:	464e      	mov	r6, r9
    42b2:	4645      	mov	r5, r8
    42b4:	b4e0      	push	{r5, r6, r7}
    42b6:	b082      	sub	sp, #8
    42b8:	0005      	movs	r5, r0
    42ba:	000c      	movs	r4, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42bc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    42c0:	425a      	negs	r2, r3
    42c2:	4153      	adcs	r3, r2
    42c4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    42c6:	b672      	cpsid	i
    42c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    42cc:	2200      	movs	r2, #0
    42ce:	4b3e      	ldr	r3, [pc, #248]	; (43c8 <trx_frame_read+0x11c>)
    42d0:	701a      	strb	r2, [r3, #0]
	return flags;
    42d2:	9b01      	ldr	r3, [sp, #4]
    42d4:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    42d6:	4f3d      	ldr	r7, [pc, #244]	; (43cc <trx_frame_read+0x120>)
    42d8:	3201      	adds	r2, #1
    42da:	493d      	ldr	r1, [pc, #244]	; (43d0 <trx_frame_read+0x124>)
    42dc:	0038      	movs	r0, r7
    42de:	4b3d      	ldr	r3, [pc, #244]	; (43d4 <trx_frame_read+0x128>)
    42e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42e2:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    42e4:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42e6:	7e1a      	ldrb	r2, [r3, #24]
    42e8:	420a      	tst	r2, r1
    42ea:	d0fc      	beq.n	42e6 <trx_frame_read+0x3a>
    42ec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42ee:	07d2      	lsls	r2, r2, #31
    42f0:	d501      	bpl.n	42f6 <trx_frame_read+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42f2:	2220      	movs	r2, #32
    42f4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    42f6:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42f8:	7e1a      	ldrb	r2, [r3, #24]
    42fa:	420a      	tst	r2, r1
    42fc:	d0fc      	beq.n	42f8 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42fe:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4300:	7e1a      	ldrb	r2, [r3, #24]
    4302:	420a      	tst	r2, r1
    4304:	d0fc      	beq.n	4300 <trx_frame_read+0x54>
    4306:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4308:	0752      	lsls	r2, r2, #29
    430a:	d512      	bpl.n	4332 <trx_frame_read+0x86>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    430c:	8b5a      	ldrh	r2, [r3, #26]
    430e:	0752      	lsls	r2, r2, #29
    4310:	d501      	bpl.n	4316 <trx_frame_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4312:	2204      	movs	r2, #4
    4314:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4316:	4a2d      	ldr	r2, [pc, #180]	; (43cc <trx_frame_read+0x120>)
    4318:	7992      	ldrb	r2, [r2, #6]
    431a:	2a01      	cmp	r2, #1
    431c:	d105      	bne.n	432a <trx_frame_read+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4320:	05db      	lsls	r3, r3, #23
    4322:	0ddb      	lsrs	r3, r3, #23
    4324:	4a2c      	ldr	r2, [pc, #176]	; (43d8 <trx_frame_read+0x12c>)
    4326:	8013      	strh	r3, [r2, #0]
    4328:	e003      	b.n	4332 <trx_frame_read+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    432c:	b2db      	uxtb	r3, r3
    432e:	4a2a      	ldr	r2, [pc, #168]	; (43d8 <trx_frame_read+0x12c>)
    4330:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4332:	1e63      	subs	r3, r4, #1
    4334:	b2db      	uxtb	r3, r3
    4336:	2c00      	cmp	r4, #0
    4338:	d030      	beq.n	439c <trx_frame_read+0xf0>
    433a:	3301      	adds	r3, #1
    433c:	469c      	mov	ip, r3
    433e:	44ac      	add	ip, r5
    4340:	2720      	movs	r7, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4342:	4e22      	ldr	r6, [pc, #136]	; (43cc <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    4344:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4346:	2300      	movs	r3, #0
    4348:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    434a:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    434c:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    434e:	46b1      	mov	r9, r6
    4350:	e022      	b.n	4398 <trx_frame_read+0xec>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4352:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4354:	4202      	tst	r2, r0
    4356:	d0fc      	beq.n	4352 <trx_frame_read+0xa6>
    4358:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    435a:	4202      	tst	r2, r0
    435c:	d001      	beq.n	4362 <trx_frame_read+0xb6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    435e:	4652      	mov	r2, sl
    4360:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4362:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4364:	4222      	tst	r2, r4
    4366:	d0fc      	beq.n	4362 <trx_frame_read+0xb6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4368:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    436a:	420a      	tst	r2, r1
    436c:	d0fc      	beq.n	4368 <trx_frame_read+0xbc>
    436e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4370:	420a      	tst	r2, r1
    4372:	d00d      	beq.n	4390 <trx_frame_read+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4374:	8b5a      	ldrh	r2, [r3, #26]
    4376:	420a      	tst	r2, r1
    4378:	d000      	beq.n	437c <trx_frame_read+0xd0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    437a:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    437c:	464a      	mov	r2, r9
    437e:	7992      	ldrb	r2, [r2, #6]
    4380:	2a01      	cmp	r2, #1
    4382:	d103      	bne.n	438c <trx_frame_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4384:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4386:	05ff      	lsls	r7, r7, #23
    4388:	0dff      	lsrs	r7, r7, #23
    438a:	e001      	b.n	4390 <trx_frame_read+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    438c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    438e:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4390:	702f      	strb	r7, [r5, #0]
		data++;
    4392:	3501      	adds	r5, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4394:	45ac      	cmp	ip, r5
    4396:	d001      	beq.n	439c <trx_frame_read+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4398:	6833      	ldr	r3, [r6, #0]
    439a:	e7da      	b.n	4352 <trx_frame_read+0xa6>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    439c:	2200      	movs	r2, #0
    439e:	490c      	ldr	r1, [pc, #48]	; (43d0 <trx_frame_read+0x124>)
    43a0:	480a      	ldr	r0, [pc, #40]	; (43cc <trx_frame_read+0x120>)
    43a2:	4b0c      	ldr	r3, [pc, #48]	; (43d4 <trx_frame_read+0x128>)
    43a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    43a6:	23ff      	movs	r3, #255	; 0xff
    43a8:	4642      	mov	r2, r8
    43aa:	4213      	tst	r3, r2
    43ac:	d005      	beq.n	43ba <trx_frame_read+0x10e>
		cpu_irq_enable();
    43ae:	2201      	movs	r2, #1
    43b0:	4b05      	ldr	r3, [pc, #20]	; (43c8 <trx_frame_read+0x11c>)
    43b2:	701a      	strb	r2, [r3, #0]
    43b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    43b8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    43ba:	b002      	add	sp, #8
    43bc:	bc1c      	pop	{r2, r3, r4}
    43be:	4690      	mov	r8, r2
    43c0:	4699      	mov	r9, r3
    43c2:	46a2      	mov	sl, r4
    43c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	2000002c 	.word	0x2000002c
    43cc:	200005d8 	.word	0x200005d8
    43d0:	2000059c 	.word	0x2000059c
    43d4:	00002841 	.word	0x00002841
    43d8:	20000594 	.word	0x20000594

000043dc <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43de:	4647      	mov	r7, r8
    43e0:	b480      	push	{r7}
    43e2:	b082      	sub	sp, #8
    43e4:	0004      	movs	r4, r0
    43e6:	000d      	movs	r5, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43e8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    43ec:	425a      	negs	r2, r3
    43ee:	4153      	adcs	r3, r2
    43f0:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    43f2:	b672      	cpsid	i
    43f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    43f8:	2200      	movs	r2, #0
    43fa:	4b3a      	ldr	r3, [pc, #232]	; (44e4 <trx_frame_write+0x108>)
    43fc:	701a      	strb	r2, [r3, #0]
	return flags;
    43fe:	9b01      	ldr	r3, [sp, #4]
    4400:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4402:	4f39      	ldr	r7, [pc, #228]	; (44e8 <trx_frame_write+0x10c>)
    4404:	3201      	adds	r2, #1
    4406:	4939      	ldr	r1, [pc, #228]	; (44ec <trx_frame_write+0x110>)
    4408:	0038      	movs	r0, r7
    440a:	4b39      	ldr	r3, [pc, #228]	; (44f0 <trx_frame_write+0x114>)
    440c:	4798      	blx	r3
    440e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4410:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4412:	7e1a      	ldrb	r2, [r3, #24]
    4414:	420a      	tst	r2, r1
    4416:	d0fc      	beq.n	4412 <trx_frame_write+0x36>
    4418:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    441a:	07d2      	lsls	r2, r2, #31
    441c:	d501      	bpl.n	4422 <trx_frame_write+0x46>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    441e:	2260      	movs	r2, #96	; 0x60
    4420:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4422:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4424:	7e1a      	ldrb	r2, [r3, #24]
    4426:	420a      	tst	r2, r1
    4428:	d0fc      	beq.n	4424 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    442a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    442c:	7e1a      	ldrb	r2, [r3, #24]
    442e:	420a      	tst	r2, r1
    4430:	d0fc      	beq.n	442c <trx_frame_write+0x50>
    4432:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4434:	0752      	lsls	r2, r2, #29
    4436:	d512      	bpl.n	445e <trx_frame_write+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4438:	8b5a      	ldrh	r2, [r3, #26]
    443a:	0752      	lsls	r2, r2, #29
    443c:	d501      	bpl.n	4442 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    443e:	2204      	movs	r2, #4
    4440:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4442:	4a29      	ldr	r2, [pc, #164]	; (44e8 <trx_frame_write+0x10c>)
    4444:	7992      	ldrb	r2, [r2, #6]
    4446:	2a01      	cmp	r2, #1
    4448:	d105      	bne.n	4456 <trx_frame_write+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    444a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    444c:	05d2      	lsls	r2, r2, #23
    444e:	0dd2      	lsrs	r2, r2, #23
    4450:	4928      	ldr	r1, [pc, #160]	; (44f4 <trx_frame_write+0x118>)
    4452:	800a      	strh	r2, [r1, #0]
    4454:	e003      	b.n	445e <trx_frame_write+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4458:	b2d2      	uxtb	r2, r2
    445a:	4926      	ldr	r1, [pc, #152]	; (44f4 <trx_frame_write+0x118>)
    445c:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    445e:	4a22      	ldr	r2, [pc, #136]	; (44e8 <trx_frame_write+0x10c>)
    4460:	7992      	ldrb	r2, [r2, #6]
    4462:	4694      	mov	ip, r2
    4464:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4466:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4468:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    446a:	2404      	movs	r4, #4
    446c:	e022      	b.n	44b4 <trx_frame_write+0xd8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    446e:	7e1a      	ldrb	r2, [r3, #24]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4470:	423a      	tst	r2, r7
    4472:	d0fc      	beq.n	446e <trx_frame_write+0x92>
    4474:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4476:	423a      	tst	r2, r7
    4478:	d001      	beq.n	447e <trx_frame_write+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    447a:	780a      	ldrb	r2, [r1, #0]
    447c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    447e:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4480:	4202      	tst	r2, r0
    4482:	d0fc      	beq.n	447e <trx_frame_write+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4484:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4486:	4222      	tst	r2, r4
    4488:	d0fc      	beq.n	4484 <trx_frame_write+0xa8>
    448a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    448c:	4222      	tst	r2, r4
    448e:	d010      	beq.n	44b2 <trx_frame_write+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4490:	8b5a      	ldrh	r2, [r3, #26]
    4492:	4222      	tst	r2, r4
    4494:	d000      	beq.n	4498 <trx_frame_write+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4496:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4498:	4662      	mov	r2, ip
    449a:	2a01      	cmp	r2, #1
    449c:	d105      	bne.n	44aa <trx_frame_write+0xce>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    449e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44a0:	05d2      	lsls	r2, r2, #23
    44a2:	0dd2      	lsrs	r2, r2, #23
    44a4:	4e13      	ldr	r6, [pc, #76]	; (44f4 <trx_frame_write+0x118>)
    44a6:	8032      	strh	r2, [r6, #0]
    44a8:	e003      	b.n	44b2 <trx_frame_write+0xd6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44ac:	b2d2      	uxtb	r2, r2
    44ae:	4e11      	ldr	r6, [pc, #68]	; (44f4 <trx_frame_write+0x118>)
    44b0:	8032      	strh	r2, [r6, #0]
    44b2:	3101      	adds	r1, #1
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    44b4:	3d01      	subs	r5, #1
    44b6:	b2ed      	uxtb	r5, r5
    44b8:	2dff      	cmp	r5, #255	; 0xff
    44ba:	d1d8      	bne.n	446e <trx_frame_write+0x92>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    44bc:	2200      	movs	r2, #0
    44be:	490b      	ldr	r1, [pc, #44]	; (44ec <trx_frame_write+0x110>)
    44c0:	4809      	ldr	r0, [pc, #36]	; (44e8 <trx_frame_write+0x10c>)
    44c2:	4b0b      	ldr	r3, [pc, #44]	; (44f0 <trx_frame_write+0x114>)
    44c4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    44c6:	23ff      	movs	r3, #255	; 0xff
    44c8:	4642      	mov	r2, r8
    44ca:	4213      	tst	r3, r2
    44cc:	d005      	beq.n	44da <trx_frame_write+0xfe>
		cpu_irq_enable();
    44ce:	2201      	movs	r2, #1
    44d0:	4b04      	ldr	r3, [pc, #16]	; (44e4 <trx_frame_write+0x108>)
    44d2:	701a      	strb	r2, [r3, #0]
    44d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    44d8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    44da:	b002      	add	sp, #8
    44dc:	bc04      	pop	{r2}
    44de:	4690      	mov	r8, r2
    44e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	2000002c 	.word	0x2000002c
    44e8:	200005d8 	.word	0x200005d8
    44ec:	2000059c 	.word	0x2000059c
    44f0:	00002841 	.word	0x00002841
    44f4:	20000594 	.word	0x20000594

000044f8 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    44f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44fa:	4647      	mov	r7, r8
    44fc:	b480      	push	{r7}
    44fe:	b082      	sub	sp, #8
    4500:	0006      	movs	r6, r0
    4502:	000d      	movs	r5, r1
    4504:	0014      	movs	r4, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4506:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    450a:	425a      	negs	r2, r3
    450c:	4153      	adcs	r3, r2
    450e:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4510:	b672      	cpsid	i
    4512:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4516:	2200      	movs	r2, #0
    4518:	4b4c      	ldr	r3, [pc, #304]	; (464c <trx_sram_write+0x154>)
    451a:	701a      	strb	r2, [r3, #0]
	return flags;
    451c:	9b01      	ldr	r3, [sp, #4]
    451e:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4520:	4f4b      	ldr	r7, [pc, #300]	; (4650 <trx_sram_write+0x158>)
    4522:	3201      	adds	r2, #1
    4524:	494b      	ldr	r1, [pc, #300]	; (4654 <trx_sram_write+0x15c>)
    4526:	0038      	movs	r0, r7
    4528:	4b4b      	ldr	r3, [pc, #300]	; (4658 <trx_sram_write+0x160>)
    452a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    452c:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    452e:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4530:	7e1a      	ldrb	r2, [r3, #24]
    4532:	420a      	tst	r2, r1
    4534:	d0fc      	beq.n	4530 <trx_sram_write+0x38>
    4536:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4538:	07d2      	lsls	r2, r2, #31
    453a:	d501      	bpl.n	4540 <trx_sram_write+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    453c:	2240      	movs	r2, #64	; 0x40
    453e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4540:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4542:	7e1a      	ldrb	r2, [r3, #24]
    4544:	420a      	tst	r2, r1
    4546:	d0fc      	beq.n	4542 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4548:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    454a:	7e1a      	ldrb	r2, [r3, #24]
    454c:	420a      	tst	r2, r1
    454e:	d0fc      	beq.n	454a <trx_sram_write+0x52>
    4550:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4552:	0752      	lsls	r2, r2, #29
    4554:	d512      	bpl.n	457c <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4556:	8b5a      	ldrh	r2, [r3, #26]
    4558:	0752      	lsls	r2, r2, #29
    455a:	d501      	bpl.n	4560 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    455c:	2204      	movs	r2, #4
    455e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4560:	4a3b      	ldr	r2, [pc, #236]	; (4650 <trx_sram_write+0x158>)
    4562:	7992      	ldrb	r2, [r2, #6]
    4564:	2a01      	cmp	r2, #1
    4566:	d105      	bne.n	4574 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    456a:	05d2      	lsls	r2, r2, #23
    456c:	0dd2      	lsrs	r2, r2, #23
    456e:	493b      	ldr	r1, [pc, #236]	; (465c <trx_sram_write+0x164>)
    4570:	800a      	strh	r2, [r1, #0]
    4572:	e003      	b.n	457c <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4576:	b2d2      	uxtb	r2, r2
    4578:	4938      	ldr	r1, [pc, #224]	; (465c <trx_sram_write+0x164>)
    457a:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    457c:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    457e:	7e1a      	ldrb	r2, [r3, #24]
    4580:	420a      	tst	r2, r1
    4582:	d0fc      	beq.n	457e <trx_sram_write+0x86>
    4584:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4586:	07d2      	lsls	r2, r2, #31
    4588:	d500      	bpl.n	458c <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    458a:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    458c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    458e:	7e1a      	ldrb	r2, [r3, #24]
    4590:	420a      	tst	r2, r1
    4592:	d0fc      	beq.n	458e <trx_sram_write+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4594:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4596:	7e1a      	ldrb	r2, [r3, #24]
    4598:	420a      	tst	r2, r1
    459a:	d0fc      	beq.n	4596 <trx_sram_write+0x9e>
    459c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    459e:	0752      	lsls	r2, r2, #29
    45a0:	d512      	bpl.n	45c8 <trx_sram_write+0xd0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45a2:	8b5a      	ldrh	r2, [r3, #26]
    45a4:	0752      	lsls	r2, r2, #29
    45a6:	d501      	bpl.n	45ac <trx_sram_write+0xb4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    45a8:	2204      	movs	r2, #4
    45aa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45ac:	4a28      	ldr	r2, [pc, #160]	; (4650 <trx_sram_write+0x158>)
    45ae:	7992      	ldrb	r2, [r2, #6]
    45b0:	2a01      	cmp	r2, #1
    45b2:	d105      	bne.n	45c0 <trx_sram_write+0xc8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    45b6:	05d2      	lsls	r2, r2, #23
    45b8:	0dd2      	lsrs	r2, r2, #23
    45ba:	4928      	ldr	r1, [pc, #160]	; (465c <trx_sram_write+0x164>)
    45bc:	800a      	strh	r2, [r1, #0]
    45be:	e003      	b.n	45c8 <trx_sram_write+0xd0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    45c2:	b2d2      	uxtb	r2, r2
    45c4:	4925      	ldr	r1, [pc, #148]	; (465c <trx_sram_write+0x164>)
    45c6:	800a      	strh	r2, [r1, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45c8:	4a21      	ldr	r2, [pc, #132]	; (4650 <trx_sram_write+0x158>)
    45ca:	7992      	ldrb	r2, [r2, #6]
    45cc:	4694      	mov	ip, r2
    45ce:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    45d0:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    45d2:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    45d4:	2104      	movs	r1, #4
    45d6:	e022      	b.n	461e <trx_sram_write+0x126>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45d8:	7e1a      	ldrb	r2, [r3, #24]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    45da:	4232      	tst	r2, r6
    45dc:	d0fc      	beq.n	45d8 <trx_sram_write+0xe0>
    45de:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    45e0:	4232      	tst	r2, r6
    45e2:	d001      	beq.n	45e8 <trx_sram_write+0xf0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45e4:	7802      	ldrb	r2, [r0, #0]
    45e6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45e8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    45ea:	422a      	tst	r2, r5
    45ec:	d0fc      	beq.n	45e8 <trx_sram_write+0xf0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45ee:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    45f0:	420a      	tst	r2, r1
    45f2:	d0fc      	beq.n	45ee <trx_sram_write+0xf6>
    45f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45f6:	420a      	tst	r2, r1
    45f8:	d010      	beq.n	461c <trx_sram_write+0x124>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45fa:	8b5a      	ldrh	r2, [r3, #26]
    45fc:	420a      	tst	r2, r1
    45fe:	d000      	beq.n	4602 <trx_sram_write+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4600:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4602:	4662      	mov	r2, ip
    4604:	2a01      	cmp	r2, #1
    4606:	d105      	bne.n	4614 <trx_sram_write+0x11c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    460a:	05d2      	lsls	r2, r2, #23
    460c:	0dd2      	lsrs	r2, r2, #23
    460e:	4f13      	ldr	r7, [pc, #76]	; (465c <trx_sram_write+0x164>)
    4610:	803a      	strh	r2, [r7, #0]
    4612:	e003      	b.n	461c <trx_sram_write+0x124>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4616:	b2d2      	uxtb	r2, r2
    4618:	4f10      	ldr	r7, [pc, #64]	; (465c <trx_sram_write+0x164>)
    461a:	803a      	strh	r2, [r7, #0]
    461c:	3001      	adds	r0, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    461e:	3c01      	subs	r4, #1
    4620:	b2e4      	uxtb	r4, r4
    4622:	2cff      	cmp	r4, #255	; 0xff
    4624:	d1d8      	bne.n	45d8 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4626:	2200      	movs	r2, #0
    4628:	490a      	ldr	r1, [pc, #40]	; (4654 <trx_sram_write+0x15c>)
    462a:	4809      	ldr	r0, [pc, #36]	; (4650 <trx_sram_write+0x158>)
    462c:	4b0a      	ldr	r3, [pc, #40]	; (4658 <trx_sram_write+0x160>)
    462e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4630:	23ff      	movs	r3, #255	; 0xff
    4632:	4642      	mov	r2, r8
    4634:	4213      	tst	r3, r2
    4636:	d005      	beq.n	4644 <trx_sram_write+0x14c>
		cpu_irq_enable();
    4638:	2201      	movs	r2, #1
    463a:	4b04      	ldr	r3, [pc, #16]	; (464c <trx_sram_write+0x154>)
    463c:	701a      	strb	r2, [r3, #0]
    463e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4642:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4644:	b002      	add	sp, #8
    4646:	bc04      	pop	{r2}
    4648:	4690      	mov	r8, r2
    464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    464c:	2000002c 	.word	0x2000002c
    4650:	200005d8 	.word	0x200005d8
    4654:	2000059c 	.word	0x2000059c
    4658:	00002841 	.word	0x00002841
    465c:	20000594 	.word	0x20000594

00004660 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    4662:	4657      	mov	r7, sl
    4664:	464e      	mov	r6, r9
    4666:	4645      	mov	r5, r8
    4668:	b4e0      	push	{r5, r6, r7}
    466a:	b082      	sub	sp, #8
    466c:	0004      	movs	r4, r0
    466e:	000d      	movs	r5, r1
    4670:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    4672:	2001      	movs	r0, #1
    4674:	4b56      	ldr	r3, [pc, #344]	; (47d0 <trx_sram_read+0x170>)
    4676:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4678:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    467c:	425a      	negs	r2, r3
    467e:	4153      	adcs	r3, r2
    4680:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4682:	b672      	cpsid	i
    4684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4688:	2200      	movs	r2, #0
    468a:	4b52      	ldr	r3, [pc, #328]	; (47d4 <trx_sram_read+0x174>)
    468c:	701a      	strb	r2, [r3, #0]
	return flags;
    468e:	9b01      	ldr	r3, [sp, #4]
    4690:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4692:	4e51      	ldr	r6, [pc, #324]	; (47d8 <trx_sram_read+0x178>)
    4694:	3201      	adds	r2, #1
    4696:	4951      	ldr	r1, [pc, #324]	; (47dc <trx_sram_read+0x17c>)
    4698:	0030      	movs	r0, r6
    469a:	4b51      	ldr	r3, [pc, #324]	; (47e0 <trx_sram_read+0x180>)
    469c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    469e:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    46a0:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46a2:	7e1a      	ldrb	r2, [r3, #24]
    46a4:	420a      	tst	r2, r1
    46a6:	d0fc      	beq.n	46a2 <trx_sram_read+0x42>
    46a8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46aa:	07d2      	lsls	r2, r2, #31
    46ac:	d501      	bpl.n	46b2 <trx_sram_read+0x52>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46ae:	2200      	movs	r2, #0
    46b0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    46b2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46b4:	7e1a      	ldrb	r2, [r3, #24]
    46b6:	420a      	tst	r2, r1
    46b8:	d0fc      	beq.n	46b4 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    46ba:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46bc:	7e1a      	ldrb	r2, [r3, #24]
    46be:	420a      	tst	r2, r1
    46c0:	d0fc      	beq.n	46bc <trx_sram_read+0x5c>
    46c2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46c4:	0752      	lsls	r2, r2, #29
    46c6:	d512      	bpl.n	46ee <trx_sram_read+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46c8:	8b5a      	ldrh	r2, [r3, #26]
    46ca:	0752      	lsls	r2, r2, #29
    46cc:	d501      	bpl.n	46d2 <trx_sram_read+0x72>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    46ce:	2204      	movs	r2, #4
    46d0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46d2:	4a41      	ldr	r2, [pc, #260]	; (47d8 <trx_sram_read+0x178>)
    46d4:	7992      	ldrb	r2, [r2, #6]
    46d6:	2a01      	cmp	r2, #1
    46d8:	d105      	bne.n	46e6 <trx_sram_read+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46dc:	05d2      	lsls	r2, r2, #23
    46de:	0dd2      	lsrs	r2, r2, #23
    46e0:	4940      	ldr	r1, [pc, #256]	; (47e4 <trx_sram_read+0x184>)
    46e2:	800a      	strh	r2, [r1, #0]
    46e4:	e003      	b.n	46ee <trx_sram_read+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46e8:	b2d2      	uxtb	r2, r2
    46ea:	493e      	ldr	r1, [pc, #248]	; (47e4 <trx_sram_read+0x184>)
    46ec:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    46ee:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46f0:	7e1a      	ldrb	r2, [r3, #24]
    46f2:	420a      	tst	r2, r1
    46f4:	d0fc      	beq.n	46f0 <trx_sram_read+0x90>
    46f6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46f8:	07d2      	lsls	r2, r2, #31
    46fa:	d500      	bpl.n	46fe <trx_sram_read+0x9e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46fc:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    46fe:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4700:	7e1a      	ldrb	r2, [r3, #24]
    4702:	420a      	tst	r2, r1
    4704:	d0fc      	beq.n	4700 <trx_sram_read+0xa0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4706:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4708:	7e1a      	ldrb	r2, [r3, #24]
    470a:	420a      	tst	r2, r1
    470c:	d0fc      	beq.n	4708 <trx_sram_read+0xa8>
    470e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4710:	0752      	lsls	r2, r2, #29
    4712:	d512      	bpl.n	473a <trx_sram_read+0xda>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4714:	8b5a      	ldrh	r2, [r3, #26]
    4716:	0752      	lsls	r2, r2, #29
    4718:	d501      	bpl.n	471e <trx_sram_read+0xbe>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    471a:	2204      	movs	r2, #4
    471c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    471e:	4a2e      	ldr	r2, [pc, #184]	; (47d8 <trx_sram_read+0x178>)
    4720:	7992      	ldrb	r2, [r2, #6]
    4722:	2a01      	cmp	r2, #1
    4724:	d105      	bne.n	4732 <trx_sram_read+0xd2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4728:	05db      	lsls	r3, r3, #23
    472a:	0ddb      	lsrs	r3, r3, #23
    472c:	4a2d      	ldr	r2, [pc, #180]	; (47e4 <trx_sram_read+0x184>)
    472e:	8013      	strh	r3, [r2, #0]
    4730:	e003      	b.n	473a <trx_sram_read+0xda>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4734:	b2db      	uxtb	r3, r3
    4736:	4a2b      	ldr	r2, [pc, #172]	; (47e4 <trx_sram_read+0x184>)
    4738:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    473a:	1e7b      	subs	r3, r7, #1
    473c:	b2db      	uxtb	r3, r3
    473e:	2f00      	cmp	r7, #0
    4740:	d030      	beq.n	47a4 <trx_sram_read+0x144>
    4742:	3301      	adds	r3, #1
    4744:	469c      	mov	ip, r3
    4746:	44ac      	add	ip, r5
    4748:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    474a:	4e23      	ldr	r6, [pc, #140]	; (47d8 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    474c:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    474e:	2300      	movs	r3, #0
    4750:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4752:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4754:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4756:	46b1      	mov	r9, r6
    4758:	e022      	b.n	47a0 <trx_sram_read+0x140>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    475a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    475c:	4202      	tst	r2, r0
    475e:	d0fc      	beq.n	475a <trx_sram_read+0xfa>
    4760:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4762:	4202      	tst	r2, r0
    4764:	d001      	beq.n	476a <trx_sram_read+0x10a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4766:	4652      	mov	r2, sl
    4768:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    476a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    476c:	4222      	tst	r2, r4
    476e:	d0fc      	beq.n	476a <trx_sram_read+0x10a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4770:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4772:	420a      	tst	r2, r1
    4774:	d0fc      	beq.n	4770 <trx_sram_read+0x110>
    4776:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4778:	420a      	tst	r2, r1
    477a:	d00d      	beq.n	4798 <trx_sram_read+0x138>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    477c:	8b5a      	ldrh	r2, [r3, #26]
    477e:	420a      	tst	r2, r1
    4780:	d000      	beq.n	4784 <trx_sram_read+0x124>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4782:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4784:	464a      	mov	r2, r9
    4786:	7992      	ldrb	r2, [r2, #6]
    4788:	2a01      	cmp	r2, #1
    478a:	d103      	bne.n	4794 <trx_sram_read+0x134>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    478c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    478e:	05ff      	lsls	r7, r7, #23
    4790:	0dff      	lsrs	r7, r7, #23
    4792:	e001      	b.n	4798 <trx_sram_read+0x138>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4794:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4796:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4798:	702f      	strb	r7, [r5, #0]
		data++;
    479a:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    479c:	45ac      	cmp	ip, r5
    479e:	d001      	beq.n	47a4 <trx_sram_read+0x144>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    47a0:	6833      	ldr	r3, [r6, #0]
    47a2:	e7da      	b.n	475a <trx_sram_read+0xfa>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    47a4:	2200      	movs	r2, #0
    47a6:	490d      	ldr	r1, [pc, #52]	; (47dc <trx_sram_read+0x17c>)
    47a8:	480b      	ldr	r0, [pc, #44]	; (47d8 <trx_sram_read+0x178>)
    47aa:	4b0d      	ldr	r3, [pc, #52]	; (47e0 <trx_sram_read+0x180>)
    47ac:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    47ae:	23ff      	movs	r3, #255	; 0xff
    47b0:	4642      	mov	r2, r8
    47b2:	4213      	tst	r3, r2
    47b4:	d005      	beq.n	47c2 <trx_sram_read+0x162>
		cpu_irq_enable();
    47b6:	2201      	movs	r2, #1
    47b8:	4b06      	ldr	r3, [pc, #24]	; (47d4 <trx_sram_read+0x174>)
    47ba:	701a      	strb	r2, [r3, #0]
    47bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    47c0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    47c2:	b002      	add	sp, #8
    47c4:	bc1c      	pop	{r2, r3, r4}
    47c6:	4690      	mov	r8, r2
    47c8:	4699      	mov	r9, r3
    47ca:	46a2      	mov	sl, r4
    47cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	00001cf1 	.word	0x00001cf1
    47d4:	2000002c 	.word	0x2000002c
    47d8:	200005d8 	.word	0x200005d8
    47dc:	2000059c 	.word	0x2000059c
    47e0:	00002841 	.word	0x00002841
    47e4:	20000594 	.word	0x20000594

000047e8 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    47e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ea:	4657      	mov	r7, sl
    47ec:	464e      	mov	r6, r9
    47ee:	4645      	mov	r5, r8
    47f0:	b4e0      	push	{r5, r6, r7}
    47f2:	0006      	movs	r6, r0
    47f4:	468a      	mov	sl, r1
    47f6:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    47f8:	2001      	movs	r0, #1
    47fa:	4b76      	ldr	r3, [pc, #472]	; (49d4 <trx_aes_wrrd+0x1ec>)
    47fc:	4798      	blx	r3

	ENTER_TRX_REGION();
    47fe:	2100      	movs	r1, #0
    4800:	2000      	movs	r0, #0
    4802:	4b75      	ldr	r3, [pc, #468]	; (49d8 <trx_aes_wrrd+0x1f0>)
    4804:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4806:	4f75      	ldr	r7, [pc, #468]	; (49dc <trx_aes_wrrd+0x1f4>)
    4808:	2201      	movs	r2, #1
    480a:	4975      	ldr	r1, [pc, #468]	; (49e0 <trx_aes_wrrd+0x1f8>)
    480c:	0038      	movs	r0, r7
    480e:	4b75      	ldr	r3, [pc, #468]	; (49e4 <trx_aes_wrrd+0x1fc>)
    4810:	4798      	blx	r3
    4812:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4814:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4816:	7e1a      	ldrb	r2, [r3, #24]
    4818:	420a      	tst	r2, r1
    481a:	d0fc      	beq.n	4816 <trx_aes_wrrd+0x2e>
    481c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    481e:	07d2      	lsls	r2, r2, #31
    4820:	d501      	bpl.n	4826 <trx_aes_wrrd+0x3e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4822:	2240      	movs	r2, #64	; 0x40
    4824:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4826:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4828:	7e1a      	ldrb	r2, [r3, #24]
    482a:	420a      	tst	r2, r1
    482c:	d0fc      	beq.n	4828 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    482e:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4830:	7e1a      	ldrb	r2, [r3, #24]
    4832:	420a      	tst	r2, r1
    4834:	d0fc      	beq.n	4830 <trx_aes_wrrd+0x48>
    4836:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4838:	0752      	lsls	r2, r2, #29
    483a:	d512      	bpl.n	4862 <trx_aes_wrrd+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    483c:	8b5a      	ldrh	r2, [r3, #26]
    483e:	0752      	lsls	r2, r2, #29
    4840:	d501      	bpl.n	4846 <trx_aes_wrrd+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4842:	2204      	movs	r2, #4
    4844:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4846:	4a65      	ldr	r2, [pc, #404]	; (49dc <trx_aes_wrrd+0x1f4>)
    4848:	7992      	ldrb	r2, [r2, #6]
    484a:	2a01      	cmp	r2, #1
    484c:	d105      	bne.n	485a <trx_aes_wrrd+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    484e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4850:	05d2      	lsls	r2, r2, #23
    4852:	0dd2      	lsrs	r2, r2, #23
    4854:	4964      	ldr	r1, [pc, #400]	; (49e8 <trx_aes_wrrd+0x200>)
    4856:	800a      	strh	r2, [r1, #0]
    4858:	e003      	b.n	4862 <trx_aes_wrrd+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    485a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    485c:	b2d2      	uxtb	r2, r2
    485e:	4962      	ldr	r1, [pc, #392]	; (49e8 <trx_aes_wrrd+0x200>)
    4860:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4862:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4864:	7e1a      	ldrb	r2, [r3, #24]
    4866:	420a      	tst	r2, r1
    4868:	d0fc      	beq.n	4864 <trx_aes_wrrd+0x7c>
    486a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    486c:	07d2      	lsls	r2, r2, #31
    486e:	d500      	bpl.n	4872 <trx_aes_wrrd+0x8a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4870:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4872:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4874:	7e1a      	ldrb	r2, [r3, #24]
    4876:	420a      	tst	r2, r1
    4878:	d0fc      	beq.n	4874 <trx_aes_wrrd+0x8c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    487a:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    487c:	7e1a      	ldrb	r2, [r3, #24]
    487e:	420a      	tst	r2, r1
    4880:	d0fc      	beq.n	487c <trx_aes_wrrd+0x94>
    4882:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4884:	0752      	lsls	r2, r2, #29
    4886:	d512      	bpl.n	48ae <trx_aes_wrrd+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4888:	8b5a      	ldrh	r2, [r3, #26]
    488a:	0752      	lsls	r2, r2, #29
    488c:	d501      	bpl.n	4892 <trx_aes_wrrd+0xaa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    488e:	2204      	movs	r2, #4
    4890:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4892:	4a52      	ldr	r2, [pc, #328]	; (49dc <trx_aes_wrrd+0x1f4>)
    4894:	7992      	ldrb	r2, [r2, #6]
    4896:	2a01      	cmp	r2, #1
    4898:	d105      	bne.n	48a6 <trx_aes_wrrd+0xbe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    489a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    489c:	05d2      	lsls	r2, r2, #23
    489e:	0dd2      	lsrs	r2, r2, #23
    48a0:	4951      	ldr	r1, [pc, #324]	; (49e8 <trx_aes_wrrd+0x200>)
    48a2:	800a      	strh	r2, [r1, #0]
    48a4:	e003      	b.n	48ae <trx_aes_wrrd+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    48a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48a8:	b2d2      	uxtb	r2, r2
    48aa:	494f      	ldr	r1, [pc, #316]	; (49e8 <trx_aes_wrrd+0x200>)
    48ac:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    48ae:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48b0:	7e1a      	ldrb	r2, [r3, #24]
    48b2:	420a      	tst	r2, r1
    48b4:	d0fc      	beq.n	48b0 <trx_aes_wrrd+0xc8>
    48b6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    48b8:	07d2      	lsls	r2, r2, #31
    48ba:	d502      	bpl.n	48c2 <trx_aes_wrrd+0xda>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48bc:	4652      	mov	r2, sl
    48be:	7812      	ldrb	r2, [r2, #0]
    48c0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    48c2:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48c4:	7e1a      	ldrb	r2, [r3, #24]
    48c6:	420a      	tst	r2, r1
    48c8:	d0fc      	beq.n	48c4 <trx_aes_wrrd+0xdc>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    48ca:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48cc:	7e1a      	ldrb	r2, [r3, #24]
    48ce:	420a      	tst	r2, r1
    48d0:	d0fc      	beq.n	48cc <trx_aes_wrrd+0xe4>
    48d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    48d4:	0752      	lsls	r2, r2, #29
    48d6:	d512      	bpl.n	48fe <trx_aes_wrrd+0x116>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    48d8:	8b5a      	ldrh	r2, [r3, #26]
    48da:	0752      	lsls	r2, r2, #29
    48dc:	d501      	bpl.n	48e2 <trx_aes_wrrd+0xfa>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    48de:	2204      	movs	r2, #4
    48e0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48e2:	4a3e      	ldr	r2, [pc, #248]	; (49dc <trx_aes_wrrd+0x1f4>)
    48e4:	7992      	ldrb	r2, [r2, #6]
    48e6:	2a01      	cmp	r2, #1
    48e8:	d105      	bne.n	48f6 <trx_aes_wrrd+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    48ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ec:	05db      	lsls	r3, r3, #23
    48ee:	0ddb      	lsrs	r3, r3, #23
    48f0:	4a3d      	ldr	r2, [pc, #244]	; (49e8 <trx_aes_wrrd+0x200>)
    48f2:	8013      	strh	r3, [r2, #0]
    48f4:	e003      	b.n	48fe <trx_aes_wrrd+0x116>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    48f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48f8:	b2db      	uxtb	r3, r3
    48fa:	4a3b      	ldr	r2, [pc, #236]	; (49e8 <trx_aes_wrrd+0x200>)
    48fc:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    48fe:	2c00      	cmp	r4, #0
    4900:	d031      	beq.n	4966 <trx_aes_wrrd+0x17e>
    4902:	4656      	mov	r6, sl
    4904:	3c01      	subs	r4, #1
    4906:	b2e4      	uxtb	r4, r4
    4908:	3401      	adds	r4, #1
    490a:	44a2      	add	sl, r4
    490c:	46d0      	mov	r8, sl
    490e:	2700      	movs	r7, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4910:	4d32      	ldr	r5, [pc, #200]	; (49dc <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    4912:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    4914:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    4916:	2104      	movs	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4918:	46a9      	mov	r9, r5
    491a:	e022      	b.n	4962 <trx_aes_wrrd+0x17a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    491c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
		while (!spi_is_ready_to_write(&master)) {
    491e:	4202      	tst	r2, r0
    4920:	d0fc      	beq.n	491c <trx_aes_wrrd+0x134>
    4922:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4924:	4202      	tst	r2, r0
    4926:	d001      	beq.n	492c <trx_aes_wrrd+0x144>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4928:	7872      	ldrb	r2, [r6, #1]
    492a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    492c:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    492e:	4222      	tst	r2, r4
    4930:	d0fc      	beq.n	492c <trx_aes_wrrd+0x144>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4932:	7e1a      	ldrb	r2, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4934:	420a      	tst	r2, r1
    4936:	d0fc      	beq.n	4932 <trx_aes_wrrd+0x14a>
    4938:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    493a:	420a      	tst	r2, r1
    493c:	d00d      	beq.n	495a <trx_aes_wrrd+0x172>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    493e:	8b5a      	ldrh	r2, [r3, #26]
    4940:	420a      	tst	r2, r1
    4942:	d000      	beq.n	4946 <trx_aes_wrrd+0x15e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4944:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4946:	464a      	mov	r2, r9
    4948:	7992      	ldrb	r2, [r2, #6]
    494a:	2a01      	cmp	r2, #1
    494c:	d103      	bne.n	4956 <trx_aes_wrrd+0x16e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    494e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4950:	05ff      	lsls	r7, r7, #23
    4952:	0dff      	lsrs	r7, r7, #23
    4954:	e001      	b.n	495a <trx_aes_wrrd+0x172>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4956:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4958:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    495a:	7037      	strb	r7, [r6, #0]
    495c:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    495e:	4546      	cmp	r6, r8
    4960:	d002      	beq.n	4968 <trx_aes_wrrd+0x180>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4962:	682b      	ldr	r3, [r5, #0]
    4964:	e7da      	b.n	491c <trx_aes_wrrd+0x134>
    4966:	2700      	movs	r7, #0
    4968:	4b1c      	ldr	r3, [pc, #112]	; (49dc <trx_aes_wrrd+0x1f4>)
    496a:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    496c:	2101      	movs	r1, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    496e:	7e1a      	ldrb	r2, [r3, #24]
    4970:	420a      	tst	r2, r1
    4972:	d0fc      	beq.n	496e <trx_aes_wrrd+0x186>
    4974:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4976:	07d2      	lsls	r2, r2, #31
    4978:	d501      	bpl.n	497e <trx_aes_wrrd+0x196>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    497a:	2200      	movs	r2, #0
    497c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    497e:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4980:	7e1a      	ldrb	r2, [r3, #24]
    4982:	420a      	tst	r2, r1
    4984:	d0fc      	beq.n	4980 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    4986:	2104      	movs	r1, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4988:	7e1a      	ldrb	r2, [r3, #24]
    498a:	420a      	tst	r2, r1
    498c:	d0fc      	beq.n	4988 <trx_aes_wrrd+0x1a0>
    498e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4990:	0752      	lsls	r2, r2, #29
    4992:	d50e      	bpl.n	49b2 <trx_aes_wrrd+0x1ca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4994:	8b5a      	ldrh	r2, [r3, #26]
    4996:	0752      	lsls	r2, r2, #29
    4998:	d501      	bpl.n	499e <trx_aes_wrrd+0x1b6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    499a:	2204      	movs	r2, #4
    499c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    499e:	4a0f      	ldr	r2, [pc, #60]	; (49dc <trx_aes_wrrd+0x1f4>)
    49a0:	7992      	ldrb	r2, [r2, #6]
    49a2:	2a01      	cmp	r2, #1
    49a4:	d103      	bne.n	49ae <trx_aes_wrrd+0x1c6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49a6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    49a8:	05ff      	lsls	r7, r7, #23
    49aa:	0dff      	lsrs	r7, r7, #23
    49ac:	e001      	b.n	49b2 <trx_aes_wrrd+0x1ca>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    49b0:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    49b2:	4653      	mov	r3, sl
    49b4:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    49b6:	2200      	movs	r2, #0
    49b8:	4909      	ldr	r1, [pc, #36]	; (49e0 <trx_aes_wrrd+0x1f8>)
    49ba:	4808      	ldr	r0, [pc, #32]	; (49dc <trx_aes_wrrd+0x1f4>)
    49bc:	4b09      	ldr	r3, [pc, #36]	; (49e4 <trx_aes_wrrd+0x1fc>)
    49be:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    49c0:	2100      	movs	r1, #0
    49c2:	2000      	movs	r0, #0
    49c4:	4b09      	ldr	r3, [pc, #36]	; (49ec <trx_aes_wrrd+0x204>)
    49c6:	4798      	blx	r3
}
    49c8:	bc1c      	pop	{r2, r3, r4}
    49ca:	4690      	mov	r8, r2
    49cc:	4699      	mov	r9, r3
    49ce:	46a2      	mov	sl, r4
    49d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	00001cf1 	.word	0x00001cf1
    49d8:	00001ec1 	.word	0x00001ec1
    49dc:	200005d8 	.word	0x200005d8
    49e0:	2000059c 	.word	0x2000059c
    49e4:	00002841 	.word	0x00002841
    49e8:	20000594 	.word	0x20000594
    49ec:	00001ea1 	.word	0x00001ea1

000049f0 <main>:
	{0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0D,0x0A}
};


int main(void)
{	
    49f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f2:	4657      	mov	r7, sl
    49f4:	464e      	mov	r6, r9
    49f6:	4645      	mov	r5, r8
    49f8:	b4e0      	push	{r5, r6, r7}
	uint8_t i , TxCount = 0 , button_press;
	uint8_t connection_index , TxSynCount2 = 0;
	MIWI_TICK t1 , t2;
	// Hardware Init
	system_init();
    49fa:	4b49      	ldr	r3, [pc, #292]	; (4b20 <main+0x130>)
    49fc:	4798      	blx	r3
	delay_init();
    49fe:	4b49      	ldr	r3, [pc, #292]	; (4b24 <main+0x134>)
    4a00:	4798      	blx	r3
	sio2host_init();
    4a02:	4b49      	ldr	r3, [pc, #292]	; (4b28 <main+0x138>)
    4a04:	4798      	blx	r3
	configure_tc();
    4a06:	4b49      	ldr	r3, [pc, #292]	; (4b2c <main+0x13c>)
    4a08:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    4a0a:	2000      	movs	r0, #0
    4a0c:	4b48      	ldr	r3, [pc, #288]	; (4b30 <main+0x140>)
    4a0e:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    4a10:	2019      	movs	r0, #25
    4a12:	4b48      	ldr	r3, [pc, #288]	; (4b34 <main+0x144>)
    4a14:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    4a16:	2000      	movs	r0, #0
    4a18:	4b47      	ldr	r3, [pc, #284]	; (4b38 <main+0x148>)
    4a1a:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    4a1c:	2100      	movs	r1, #0
    4a1e:	2000      	movs	r0, #0
    4a20:	4b46      	ldr	r3, [pc, #280]	; (4b3c <main+0x14c>)
    4a22:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    4a24:	2201      	movs	r2, #1
    4a26:	4b46      	ldr	r3, [pc, #280]	; (4b40 <main+0x150>)
    4a28:	701a      	strb	r2, [r3, #0]
    4a2a:	f3bf 8f5f 	dmb	sy
    4a2e:	b662      	cpsie	i
	connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    4a30:	2100      	movs	r1, #0
    4a32:	20ff      	movs	r0, #255	; 0xff
    4a34:	4b43      	ldr	r3, [pc, #268]	; (4b44 <main+0x154>)
    4a36:	4798      	blx	r3

	/*******************************************************************/
	// Display current opertion on LCD of demo board, if applicable
	/*******************************************************************/
	if( connection_index  != 0xFF )
    4a38:	28ff      	cmp	r0, #255	; 0xff
    4a3a:	d004      	beq.n	4a46 <main+0x56>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4a3c:	2280      	movs	r2, #128	; 0x80
    4a3e:	0312      	lsls	r2, r2, #12
    4a40:	4b41      	ldr	r3, [pc, #260]	; (4b48 <main+0x158>)
    4a42:	615a      	str	r2, [r3, #20]
    4a44:	e008      	b.n	4a58 <main+0x68>
		//     channel 26. As the result, the bit map is 0x07FFF800. Stack
		//     will filter out all invalid channels, so the application
		//     only needs to pay attention to the channels that are not
		//     preferred.
		/*******************************************************************/
		MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
    4a46:	2200      	movs	r2, #0
    4a48:	210a      	movs	r1, #10
    4a4a:	2000      	movs	r0, #0
    4a4c:	4b3f      	ldr	r3, [pc, #252]	; (4b4c <main+0x15c>)
    4a4e:	4798      	blx	r3
    4a50:	2280      	movs	r2, #128	; 0x80
    4a52:	02d2      	lsls	r2, r2, #11
    4a54:	4b3c      	ldr	r3, [pc, #240]	; (4b48 <main+0x158>)
    4a56:	615a      	str	r2, [r3, #20]
		LED_On(LED1);
	}
	t1.Val = MiWi_TickGet();
    4a58:	4b3d      	ldr	r3, [pc, #244]	; (4b50 <main+0x160>)
    4a5a:	4798      	blx	r3
    4a5c:	4682      	mov	sl, r0


int main(void)
{	
	uint8_t i , TxCount = 0 , button_press;
	uint8_t connection_index , TxSynCount2 = 0;
    4a5e:	2600      	movs	r6, #0
};


int main(void)
{	
	uint8_t i , TxCount = 0 , button_press;
    4a60:	2400      	movs	r4, #0
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available
		
		if (MiApp_MessageAvailable())
    4a62:	4f3c      	ldr	r7, [pc, #240]	; (4b54 <main+0x164>)
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			// UART_Display_Received_Message
			print_rx_message();
    4a64:	4b3c      	ldr	r3, [pc, #240]	; (4b58 <main+0x168>)
    4a66:	4699      	mov	r9, r3
			// Function MiApp_DiscardMessage is used to release the current
			//  received packet.
			// After calling this function, the stack can start to process the
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();
    4a68:	4b3c      	ldr	r3, [pc, #240]	; (4b5c <main+0x16c>)
    4a6a:	4698      	mov	r8, r3
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	while (1) {
		// Data Packet Available
		
		if (MiApp_MessageAvailable())
    4a6c:	47b8      	blx	r7
    4a6e:	2800      	cmp	r0, #0
    4a70:	d005      	beq.n	4a7e <main+0x8e>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4a72:	2280      	movs	r2, #128	; 0x80
    4a74:	02d2      	lsls	r2, r2, #11
    4a76:	4b34      	ldr	r3, [pc, #208]	; (4b48 <main+0x158>)
    4a78:	61da      	str	r2, [r3, #28]
		{
			// if received a data packet toggle led
			LED_Toggle(LED1);
			// UART_Display_Received_Message
			print_rx_message();
    4a7a:	47c8      	blx	r9
			// Function MiApp_DiscardMessage is used to release the current
			//  received packet.
			// After calling this function, the stack can start to process the
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();
    4a7c:	47c0      	blx	r8

		}
		t2.Val = MiWi_TickGet();
    4a7e:	4b34      	ldr	r3, [pc, #208]	; (4b50 <main+0x160>)
    4a80:	4798      	blx	r3
    4a82:	0005      	movs	r5, r0
		button_press = ButtonPressed();
    4a84:	4b36      	ldr	r3, [pc, #216]	; (4b60 <main+0x170>)
    4a86:	4798      	blx	r3
		if (button_press)
    4a88:	2800      	cmp	r0, #0
    4a8a:	d020      	beq.n	4ace <main+0xde>
    4a8c:	2280      	movs	r2, #128	; 0x80
    4a8e:	0312      	lsls	r2, r2, #12
    4a90:	4b2d      	ldr	r3, [pc, #180]	; (4b48 <main+0x158>)
    4a92:	61da      	str	r2, [r3, #28]
			MiApp_FlushTx();
			LED_Toggle(LED0);
			for(i = 0; i < 11; i++)
			{
				// Tx Buffer User Data
				MiApp_WriteData(DE[(TxSynCount2%6)][i]);
    4a94:	2106      	movs	r1, #6
    4a96:	0030      	movs	r0, r6
    4a98:	4b32      	ldr	r3, [pc, #200]	; (4b64 <main+0x174>)
    4a9a:	4798      	blx	r3
    4a9c:	b2cb      	uxtb	r3, r1
    4a9e:	0099      	lsls	r1, r3, #2
    4aa0:	18c9      	adds	r1, r1, r3
    4aa2:	0049      	lsls	r1, r1, #1
    4aa4:	18cb      	adds	r3, r1, r3
    4aa6:	4930      	ldr	r1, [pc, #192]	; (4b68 <main+0x178>)
    4aa8:	18c9      	adds	r1, r1, r3
    4aaa:	2300      	movs	r3, #0
    4aac:	482f      	ldr	r0, [pc, #188]	; (4b6c <main+0x17c>)
    4aae:	780a      	ldrb	r2, [r1, #0]
    4ab0:	54c2      	strb	r2, [r0, r3]
    4ab2:	3301      	adds	r3, #1
    4ab4:	b2db      	uxtb	r3, r3
    4ab6:	3101      	adds	r1, #1
		button_press = ButtonPressed();
		if (button_press)
		{
			MiApp_FlushTx();
			LED_Toggle(LED0);
			for(i = 0; i < 11; i++)
    4ab8:	2b0b      	cmp	r3, #11
    4aba:	d1f8      	bne.n	4aae <main+0xbe>
    4abc:	220b      	movs	r2, #11
    4abe:	4b2c      	ldr	r3, [pc, #176]	; (4b70 <main+0x180>)
    4ac0:	701a      	strb	r2, [r3, #0]
			{
				// Tx Buffer User Data
				MiApp_WriteData(DE[(TxSynCount2%6)][i]);
			}
			TxSynCount2++;
    4ac2:	3601      	adds	r6, #1
    4ac4:	b2f6      	uxtb	r6, r6
			//This function unicasts a message in the TxBuffer to the first connected peer device
			// indexed at 0 in connection table
			MiApp_UnicastConnection(0,true);
    4ac6:	2101      	movs	r1, #1
    4ac8:	2000      	movs	r0, #0
    4aca:	4b2a      	ldr	r3, [pc, #168]	; (4b74 <main+0x184>)
    4acc:	4798      	blx	r3
		}
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
    4ace:	4653      	mov	r3, sl
    4ad0:	1aeb      	subs	r3, r5, r3
    4ad2:	229b      	movs	r2, #155	; 0x9b
    4ad4:	0092      	lsls	r2, r2, #2
    4ad6:	4293      	cmp	r3, r2
    4ad8:	d9c8      	bls.n	4a6c <main+0x7c>
    4ada:	2280      	movs	r2, #128	; 0x80
    4adc:	0312      	lsls	r2, r2, #12
    4ade:	4b1a      	ldr	r3, [pc, #104]	; (4b48 <main+0x158>)
    4ae0:	61da      	str	r2, [r3, #28]
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
    4ae2:	2106      	movs	r1, #6
    4ae4:	0020      	movs	r0, r4
    4ae6:	4b1f      	ldr	r3, [pc, #124]	; (4b64 <main+0x174>)
    4ae8:	4798      	blx	r3
    4aea:	b2c9      	uxtb	r1, r1
    4aec:	004a      	lsls	r2, r1, #1
    4aee:	1852      	adds	r2, r2, r1
    4af0:	00d0      	lsls	r0, r2, #3
    4af2:	1a83      	subs	r3, r0, r2
    4af4:	4a20      	ldr	r2, [pc, #128]	; (4b78 <main+0x188>)
    4af6:	18d2      	adds	r2, r2, r3
    4af8:	2300      	movs	r3, #0
    4afa:	481c      	ldr	r0, [pc, #112]	; (4b6c <main+0x17c>)
    4afc:	7811      	ldrb	r1, [r2, #0]
    4afe:	54c1      	strb	r1, [r0, r3]
    4b00:	3301      	adds	r3, #1
    4b02:	b2db      	uxtb	r3, r3
    4b04:	3201      	adds	r2, #1
			// the buffer one byte by one byte by calling function
			// MiApp_WriteData
			/*******************************************************************/
			MiApp_FlushTx();
			
			for (i = 0 ; i < 21 ; i++)
    4b06:	2b15      	cmp	r3, #21
    4b08:	d1f8      	bne.n	4afc <main+0x10c>
    4b0a:	2215      	movs	r2, #21
    4b0c:	4b18      	ldr	r3, [pc, #96]	; (4b70 <main+0x180>)
    4b0e:	701a      	strb	r2, [r3, #0]
			{	//Tx_Buffer User Data
				MiApp_WriteData(MiWi_Data[(TxCount%6)][i]);
			}
			TxCount++;
    4b10:	3401      	adds	r4, #1
    4b12:	b2e4      	uxtb	r4, r4
			//This function broadcast a message in the TxBuffer.
			MiApp_BroadcastPacket(true);
    4b14:	2001      	movs	r0, #1
    4b16:	4b19      	ldr	r3, [pc, #100]	; (4b7c <main+0x18c>)
    4b18:	4798      	blx	r3
			MiApp_UnicastConnection(0,true);
		}
		if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND * 5) )
		{
			// Reset the value of t1
			t1 = t2;
    4b1a:	46aa      	mov	sl, r5
    4b1c:	e7a6      	b.n	4a6c <main+0x7c>
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	00003725 	.word	0x00003725
    4b24:	00001cb1 	.word	0x00001cb1
    4b28:	00003db9 	.word	0x00003db9
    4b2c:	00001bfd 	.word	0x00001bfd
    4b30:	000013a5 	.word	0x000013a5
    4b34:	00001389 	.word	0x00001389
    4b38:	00001a25 	.word	0x00001a25
    4b3c:	00001ea1 	.word	0x00001ea1
    4b40:	2000002c 	.word	0x2000002c
    4b44:	00001929 	.word	0x00001929
    4b48:	40002800 	.word	0x40002800
    4b4c:	00001339 	.word	0x00001339
    4b50:	00001c9d 	.word	0x00001c9d
    4b54:	00001911 	.word	0x00001911
    4b58:	000001b9 	.word	0x000001b9
    4b5c:	0000136d 	.word	0x0000136d
    4b60:	00000115 	.word	0x00000115
    4b64:	00004c8d 	.word	0x00004c8d
    4b68:	00005668 	.word	0x00005668
    4b6c:	200004c4 	.word	0x200004c4
    4b70:	200004c1 	.word	0x200004c1
    4b74:	000012d9 	.word	0x000012d9
    4b78:	000056ac 	.word	0x000056ac
    4b7c:	00001299 	.word	0x00001299

00004b80 <__aeabi_uidiv>:
    4b80:	2200      	movs	r2, #0
    4b82:	0843      	lsrs	r3, r0, #1
    4b84:	428b      	cmp	r3, r1
    4b86:	d374      	bcc.n	4c72 <__aeabi_uidiv+0xf2>
    4b88:	0903      	lsrs	r3, r0, #4
    4b8a:	428b      	cmp	r3, r1
    4b8c:	d35f      	bcc.n	4c4e <__aeabi_uidiv+0xce>
    4b8e:	0a03      	lsrs	r3, r0, #8
    4b90:	428b      	cmp	r3, r1
    4b92:	d344      	bcc.n	4c1e <__aeabi_uidiv+0x9e>
    4b94:	0b03      	lsrs	r3, r0, #12
    4b96:	428b      	cmp	r3, r1
    4b98:	d328      	bcc.n	4bec <__aeabi_uidiv+0x6c>
    4b9a:	0c03      	lsrs	r3, r0, #16
    4b9c:	428b      	cmp	r3, r1
    4b9e:	d30d      	bcc.n	4bbc <__aeabi_uidiv+0x3c>
    4ba0:	22ff      	movs	r2, #255	; 0xff
    4ba2:	0209      	lsls	r1, r1, #8
    4ba4:	ba12      	rev	r2, r2
    4ba6:	0c03      	lsrs	r3, r0, #16
    4ba8:	428b      	cmp	r3, r1
    4baa:	d302      	bcc.n	4bb2 <__aeabi_uidiv+0x32>
    4bac:	1212      	asrs	r2, r2, #8
    4bae:	0209      	lsls	r1, r1, #8
    4bb0:	d065      	beq.n	4c7e <__aeabi_uidiv+0xfe>
    4bb2:	0b03      	lsrs	r3, r0, #12
    4bb4:	428b      	cmp	r3, r1
    4bb6:	d319      	bcc.n	4bec <__aeabi_uidiv+0x6c>
    4bb8:	e000      	b.n	4bbc <__aeabi_uidiv+0x3c>
    4bba:	0a09      	lsrs	r1, r1, #8
    4bbc:	0bc3      	lsrs	r3, r0, #15
    4bbe:	428b      	cmp	r3, r1
    4bc0:	d301      	bcc.n	4bc6 <__aeabi_uidiv+0x46>
    4bc2:	03cb      	lsls	r3, r1, #15
    4bc4:	1ac0      	subs	r0, r0, r3
    4bc6:	4152      	adcs	r2, r2
    4bc8:	0b83      	lsrs	r3, r0, #14
    4bca:	428b      	cmp	r3, r1
    4bcc:	d301      	bcc.n	4bd2 <__aeabi_uidiv+0x52>
    4bce:	038b      	lsls	r3, r1, #14
    4bd0:	1ac0      	subs	r0, r0, r3
    4bd2:	4152      	adcs	r2, r2
    4bd4:	0b43      	lsrs	r3, r0, #13
    4bd6:	428b      	cmp	r3, r1
    4bd8:	d301      	bcc.n	4bde <__aeabi_uidiv+0x5e>
    4bda:	034b      	lsls	r3, r1, #13
    4bdc:	1ac0      	subs	r0, r0, r3
    4bde:	4152      	adcs	r2, r2
    4be0:	0b03      	lsrs	r3, r0, #12
    4be2:	428b      	cmp	r3, r1
    4be4:	d301      	bcc.n	4bea <__aeabi_uidiv+0x6a>
    4be6:	030b      	lsls	r3, r1, #12
    4be8:	1ac0      	subs	r0, r0, r3
    4bea:	4152      	adcs	r2, r2
    4bec:	0ac3      	lsrs	r3, r0, #11
    4bee:	428b      	cmp	r3, r1
    4bf0:	d301      	bcc.n	4bf6 <__aeabi_uidiv+0x76>
    4bf2:	02cb      	lsls	r3, r1, #11
    4bf4:	1ac0      	subs	r0, r0, r3
    4bf6:	4152      	adcs	r2, r2
    4bf8:	0a83      	lsrs	r3, r0, #10
    4bfa:	428b      	cmp	r3, r1
    4bfc:	d301      	bcc.n	4c02 <__aeabi_uidiv+0x82>
    4bfe:	028b      	lsls	r3, r1, #10
    4c00:	1ac0      	subs	r0, r0, r3
    4c02:	4152      	adcs	r2, r2
    4c04:	0a43      	lsrs	r3, r0, #9
    4c06:	428b      	cmp	r3, r1
    4c08:	d301      	bcc.n	4c0e <__aeabi_uidiv+0x8e>
    4c0a:	024b      	lsls	r3, r1, #9
    4c0c:	1ac0      	subs	r0, r0, r3
    4c0e:	4152      	adcs	r2, r2
    4c10:	0a03      	lsrs	r3, r0, #8
    4c12:	428b      	cmp	r3, r1
    4c14:	d301      	bcc.n	4c1a <__aeabi_uidiv+0x9a>
    4c16:	020b      	lsls	r3, r1, #8
    4c18:	1ac0      	subs	r0, r0, r3
    4c1a:	4152      	adcs	r2, r2
    4c1c:	d2cd      	bcs.n	4bba <__aeabi_uidiv+0x3a>
    4c1e:	09c3      	lsrs	r3, r0, #7
    4c20:	428b      	cmp	r3, r1
    4c22:	d301      	bcc.n	4c28 <__aeabi_uidiv+0xa8>
    4c24:	01cb      	lsls	r3, r1, #7
    4c26:	1ac0      	subs	r0, r0, r3
    4c28:	4152      	adcs	r2, r2
    4c2a:	0983      	lsrs	r3, r0, #6
    4c2c:	428b      	cmp	r3, r1
    4c2e:	d301      	bcc.n	4c34 <__aeabi_uidiv+0xb4>
    4c30:	018b      	lsls	r3, r1, #6
    4c32:	1ac0      	subs	r0, r0, r3
    4c34:	4152      	adcs	r2, r2
    4c36:	0943      	lsrs	r3, r0, #5
    4c38:	428b      	cmp	r3, r1
    4c3a:	d301      	bcc.n	4c40 <__aeabi_uidiv+0xc0>
    4c3c:	014b      	lsls	r3, r1, #5
    4c3e:	1ac0      	subs	r0, r0, r3
    4c40:	4152      	adcs	r2, r2
    4c42:	0903      	lsrs	r3, r0, #4
    4c44:	428b      	cmp	r3, r1
    4c46:	d301      	bcc.n	4c4c <__aeabi_uidiv+0xcc>
    4c48:	010b      	lsls	r3, r1, #4
    4c4a:	1ac0      	subs	r0, r0, r3
    4c4c:	4152      	adcs	r2, r2
    4c4e:	08c3      	lsrs	r3, r0, #3
    4c50:	428b      	cmp	r3, r1
    4c52:	d301      	bcc.n	4c58 <__aeabi_uidiv+0xd8>
    4c54:	00cb      	lsls	r3, r1, #3
    4c56:	1ac0      	subs	r0, r0, r3
    4c58:	4152      	adcs	r2, r2
    4c5a:	0883      	lsrs	r3, r0, #2
    4c5c:	428b      	cmp	r3, r1
    4c5e:	d301      	bcc.n	4c64 <__aeabi_uidiv+0xe4>
    4c60:	008b      	lsls	r3, r1, #2
    4c62:	1ac0      	subs	r0, r0, r3
    4c64:	4152      	adcs	r2, r2
    4c66:	0843      	lsrs	r3, r0, #1
    4c68:	428b      	cmp	r3, r1
    4c6a:	d301      	bcc.n	4c70 <__aeabi_uidiv+0xf0>
    4c6c:	004b      	lsls	r3, r1, #1
    4c6e:	1ac0      	subs	r0, r0, r3
    4c70:	4152      	adcs	r2, r2
    4c72:	1a41      	subs	r1, r0, r1
    4c74:	d200      	bcs.n	4c78 <__aeabi_uidiv+0xf8>
    4c76:	4601      	mov	r1, r0
    4c78:	4152      	adcs	r2, r2
    4c7a:	4610      	mov	r0, r2
    4c7c:	4770      	bx	lr
    4c7e:	e7ff      	b.n	4c80 <__aeabi_uidiv+0x100>
    4c80:	b501      	push	{r0, lr}
    4c82:	2000      	movs	r0, #0
    4c84:	f000 f806 	bl	4c94 <__aeabi_idiv0>
    4c88:	bd02      	pop	{r1, pc}
    4c8a:	46c0      	nop			; (mov r8, r8)

00004c8c <__aeabi_uidivmod>:
    4c8c:	2900      	cmp	r1, #0
    4c8e:	d0f7      	beq.n	4c80 <__aeabi_uidiv+0x100>
    4c90:	e776      	b.n	4b80 <__aeabi_uidiv>
    4c92:	4770      	bx	lr

00004c94 <__aeabi_idiv0>:
    4c94:	4770      	bx	lr
    4c96:	46c0      	nop			; (mov r8, r8)

00004c98 <__aeabi_lmul>:
    4c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9a:	464f      	mov	r7, r9
    4c9c:	4646      	mov	r6, r8
    4c9e:	b4c0      	push	{r6, r7}
    4ca0:	0416      	lsls	r6, r2, #16
    4ca2:	0c36      	lsrs	r6, r6, #16
    4ca4:	4699      	mov	r9, r3
    4ca6:	0033      	movs	r3, r6
    4ca8:	0405      	lsls	r5, r0, #16
    4caa:	0c2c      	lsrs	r4, r5, #16
    4cac:	0c07      	lsrs	r7, r0, #16
    4cae:	0c15      	lsrs	r5, r2, #16
    4cb0:	4363      	muls	r3, r4
    4cb2:	437e      	muls	r6, r7
    4cb4:	436f      	muls	r7, r5
    4cb6:	4365      	muls	r5, r4
    4cb8:	0c1c      	lsrs	r4, r3, #16
    4cba:	19ad      	adds	r5, r5, r6
    4cbc:	1964      	adds	r4, r4, r5
    4cbe:	469c      	mov	ip, r3
    4cc0:	42a6      	cmp	r6, r4
    4cc2:	d903      	bls.n	4ccc <__aeabi_lmul+0x34>
    4cc4:	2380      	movs	r3, #128	; 0x80
    4cc6:	025b      	lsls	r3, r3, #9
    4cc8:	4698      	mov	r8, r3
    4cca:	4447      	add	r7, r8
    4ccc:	4663      	mov	r3, ip
    4cce:	0c25      	lsrs	r5, r4, #16
    4cd0:	19ef      	adds	r7, r5, r7
    4cd2:	041d      	lsls	r5, r3, #16
    4cd4:	464b      	mov	r3, r9
    4cd6:	434a      	muls	r2, r1
    4cd8:	4343      	muls	r3, r0
    4cda:	0c2d      	lsrs	r5, r5, #16
    4cdc:	0424      	lsls	r4, r4, #16
    4cde:	1964      	adds	r4, r4, r5
    4ce0:	1899      	adds	r1, r3, r2
    4ce2:	19c9      	adds	r1, r1, r7
    4ce4:	0020      	movs	r0, r4
    4ce6:	bc0c      	pop	{r2, r3}
    4ce8:	4690      	mov	r8, r2
    4cea:	4699      	mov	r9, r3
    4cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cee:	46c0      	nop			; (mov r8, r8)

00004cf0 <__libc_init_array>:
    4cf0:	4b0e      	ldr	r3, [pc, #56]	; (4d2c <__libc_init_array+0x3c>)
    4cf2:	b570      	push	{r4, r5, r6, lr}
    4cf4:	2500      	movs	r5, #0
    4cf6:	001e      	movs	r6, r3
    4cf8:	4c0d      	ldr	r4, [pc, #52]	; (4d30 <__libc_init_array+0x40>)
    4cfa:	1ae4      	subs	r4, r4, r3
    4cfc:	10a4      	asrs	r4, r4, #2
    4cfe:	42a5      	cmp	r5, r4
    4d00:	d004      	beq.n	4d0c <__libc_init_array+0x1c>
    4d02:	00ab      	lsls	r3, r5, #2
    4d04:	58f3      	ldr	r3, [r6, r3]
    4d06:	4798      	blx	r3
    4d08:	3501      	adds	r5, #1
    4d0a:	e7f8      	b.n	4cfe <__libc_init_array+0xe>
    4d0c:	f000 fd40 	bl	5790 <_init>
    4d10:	4b08      	ldr	r3, [pc, #32]	; (4d34 <__libc_init_array+0x44>)
    4d12:	2500      	movs	r5, #0
    4d14:	001e      	movs	r6, r3
    4d16:	4c08      	ldr	r4, [pc, #32]	; (4d38 <__libc_init_array+0x48>)
    4d18:	1ae4      	subs	r4, r4, r3
    4d1a:	10a4      	asrs	r4, r4, #2
    4d1c:	42a5      	cmp	r5, r4
    4d1e:	d004      	beq.n	4d2a <__libc_init_array+0x3a>
    4d20:	00ab      	lsls	r3, r5, #2
    4d22:	58f3      	ldr	r3, [r6, r3]
    4d24:	4798      	blx	r3
    4d26:	3501      	adds	r5, #1
    4d28:	e7f8      	b.n	4d1c <__libc_init_array+0x2c>
    4d2a:	bd70      	pop	{r4, r5, r6, pc}
    4d2c:	0000579c 	.word	0x0000579c
    4d30:	0000579c 	.word	0x0000579c
    4d34:	0000579c 	.word	0x0000579c
    4d38:	000057a0 	.word	0x000057a0

00004d3c <memcpy>:
    4d3c:	2300      	movs	r3, #0
    4d3e:	b510      	push	{r4, lr}
    4d40:	429a      	cmp	r2, r3
    4d42:	d003      	beq.n	4d4c <memcpy+0x10>
    4d44:	5ccc      	ldrb	r4, [r1, r3]
    4d46:	54c4      	strb	r4, [r0, r3]
    4d48:	3301      	adds	r3, #1
    4d4a:	e7f9      	b.n	4d40 <memcpy+0x4>
    4d4c:	bd10      	pop	{r4, pc}

00004d4e <memset>:
    4d4e:	0003      	movs	r3, r0
    4d50:	1882      	adds	r2, r0, r2
    4d52:	4293      	cmp	r3, r2
    4d54:	d002      	beq.n	4d5c <memset+0xe>
    4d56:	7019      	strb	r1, [r3, #0]
    4d58:	3301      	adds	r3, #1
    4d5a:	e7fa      	b.n	4d52 <memset+0x4>
    4d5c:	4770      	bx	lr

00004d5e <setbuf>:
    4d5e:	424a      	negs	r2, r1
    4d60:	414a      	adcs	r2, r1
    4d62:	2380      	movs	r3, #128	; 0x80
    4d64:	b510      	push	{r4, lr}
    4d66:	0052      	lsls	r2, r2, #1
    4d68:	00db      	lsls	r3, r3, #3
    4d6a:	f000 f801 	bl	4d70 <setvbuf>
    4d6e:	bd10      	pop	{r4, pc}

00004d70 <setvbuf>:
    4d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d72:	001d      	movs	r5, r3
    4d74:	4b51      	ldr	r3, [pc, #324]	; (4ebc <setvbuf+0x14c>)
    4d76:	b085      	sub	sp, #20
    4d78:	681e      	ldr	r6, [r3, #0]
    4d7a:	0004      	movs	r4, r0
    4d7c:	000f      	movs	r7, r1
    4d7e:	9200      	str	r2, [sp, #0]
    4d80:	2e00      	cmp	r6, #0
    4d82:	d005      	beq.n	4d90 <setvbuf+0x20>
    4d84:	69b3      	ldr	r3, [r6, #24]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d102      	bne.n	4d90 <setvbuf+0x20>
    4d8a:	0030      	movs	r0, r6
    4d8c:	f000 f994 	bl	50b8 <__sinit>
    4d90:	4b4b      	ldr	r3, [pc, #300]	; (4ec0 <setvbuf+0x150>)
    4d92:	429c      	cmp	r4, r3
    4d94:	d101      	bne.n	4d9a <setvbuf+0x2a>
    4d96:	6874      	ldr	r4, [r6, #4]
    4d98:	e008      	b.n	4dac <setvbuf+0x3c>
    4d9a:	4b4a      	ldr	r3, [pc, #296]	; (4ec4 <setvbuf+0x154>)
    4d9c:	429c      	cmp	r4, r3
    4d9e:	d101      	bne.n	4da4 <setvbuf+0x34>
    4da0:	68b4      	ldr	r4, [r6, #8]
    4da2:	e003      	b.n	4dac <setvbuf+0x3c>
    4da4:	4b48      	ldr	r3, [pc, #288]	; (4ec8 <setvbuf+0x158>)
    4da6:	429c      	cmp	r4, r3
    4da8:	d100      	bne.n	4dac <setvbuf+0x3c>
    4daa:	68f4      	ldr	r4, [r6, #12]
    4dac:	9b00      	ldr	r3, [sp, #0]
    4dae:	2b02      	cmp	r3, #2
    4db0:	d005      	beq.n	4dbe <setvbuf+0x4e>
    4db2:	2b01      	cmp	r3, #1
    4db4:	d900      	bls.n	4db8 <setvbuf+0x48>
    4db6:	e07c      	b.n	4eb2 <setvbuf+0x142>
    4db8:	2d00      	cmp	r5, #0
    4dba:	da00      	bge.n	4dbe <setvbuf+0x4e>
    4dbc:	e079      	b.n	4eb2 <setvbuf+0x142>
    4dbe:	0021      	movs	r1, r4
    4dc0:	0030      	movs	r0, r6
    4dc2:	f000 f90b 	bl	4fdc <_fflush_r>
    4dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4dc8:	2900      	cmp	r1, #0
    4dca:	d008      	beq.n	4dde <setvbuf+0x6e>
    4dcc:	0023      	movs	r3, r4
    4dce:	3344      	adds	r3, #68	; 0x44
    4dd0:	4299      	cmp	r1, r3
    4dd2:	d002      	beq.n	4dda <setvbuf+0x6a>
    4dd4:	0030      	movs	r0, r6
    4dd6:	f000 fa33 	bl	5240 <_free_r>
    4dda:	2300      	movs	r3, #0
    4ddc:	6363      	str	r3, [r4, #52]	; 0x34
    4dde:	2300      	movs	r3, #0
    4de0:	61a3      	str	r3, [r4, #24]
    4de2:	6063      	str	r3, [r4, #4]
    4de4:	89a3      	ldrh	r3, [r4, #12]
    4de6:	061b      	lsls	r3, r3, #24
    4de8:	d503      	bpl.n	4df2 <setvbuf+0x82>
    4dea:	6921      	ldr	r1, [r4, #16]
    4dec:	0030      	movs	r0, r6
    4dee:	f000 fa27 	bl	5240 <_free_r>
    4df2:	89a2      	ldrh	r2, [r4, #12]
    4df4:	4b35      	ldr	r3, [pc, #212]	; (4ecc <setvbuf+0x15c>)
    4df6:	4013      	ands	r3, r2
    4df8:	81a3      	strh	r3, [r4, #12]
    4dfa:	9b00      	ldr	r3, [sp, #0]
    4dfc:	2b02      	cmp	r3, #2
    4dfe:	d021      	beq.n	4e44 <setvbuf+0xd4>
    4e00:	ab03      	add	r3, sp, #12
    4e02:	aa02      	add	r2, sp, #8
    4e04:	0021      	movs	r1, r4
    4e06:	0030      	movs	r0, r6
    4e08:	f000 f9ea 	bl	51e0 <__swhatbuf_r>
    4e0c:	89a3      	ldrh	r3, [r4, #12]
    4e0e:	4318      	orrs	r0, r3
    4e10:	81a0      	strh	r0, [r4, #12]
    4e12:	2d00      	cmp	r5, #0
    4e14:	d101      	bne.n	4e1a <setvbuf+0xaa>
    4e16:	9d02      	ldr	r5, [sp, #8]
    4e18:	e001      	b.n	4e1e <setvbuf+0xae>
    4e1a:	2f00      	cmp	r7, #0
    4e1c:	d125      	bne.n	4e6a <setvbuf+0xfa>
    4e1e:	0028      	movs	r0, r5
    4e20:	f000 fa04 	bl	522c <malloc>
    4e24:	9501      	str	r5, [sp, #4]
    4e26:	1e07      	subs	r7, r0, #0
    4e28:	d11a      	bne.n	4e60 <setvbuf+0xf0>
    4e2a:	9b02      	ldr	r3, [sp, #8]
    4e2c:	9301      	str	r3, [sp, #4]
    4e2e:	42ab      	cmp	r3, r5
    4e30:	d102      	bne.n	4e38 <setvbuf+0xc8>
    4e32:	2001      	movs	r0, #1
    4e34:	4240      	negs	r0, r0
    4e36:	e006      	b.n	4e46 <setvbuf+0xd6>
    4e38:	9801      	ldr	r0, [sp, #4]
    4e3a:	f000 f9f7 	bl	522c <malloc>
    4e3e:	1e07      	subs	r7, r0, #0
    4e40:	d10e      	bne.n	4e60 <setvbuf+0xf0>
    4e42:	e7f6      	b.n	4e32 <setvbuf+0xc2>
    4e44:	2000      	movs	r0, #0
    4e46:	2202      	movs	r2, #2
    4e48:	89a3      	ldrh	r3, [r4, #12]
    4e4a:	4313      	orrs	r3, r2
    4e4c:	81a3      	strh	r3, [r4, #12]
    4e4e:	2300      	movs	r3, #0
    4e50:	60a3      	str	r3, [r4, #8]
    4e52:	0023      	movs	r3, r4
    4e54:	3347      	adds	r3, #71	; 0x47
    4e56:	6023      	str	r3, [r4, #0]
    4e58:	6123      	str	r3, [r4, #16]
    4e5a:	2301      	movs	r3, #1
    4e5c:	6163      	str	r3, [r4, #20]
    4e5e:	e02a      	b.n	4eb6 <setvbuf+0x146>
    4e60:	2280      	movs	r2, #128	; 0x80
    4e62:	89a3      	ldrh	r3, [r4, #12]
    4e64:	9d01      	ldr	r5, [sp, #4]
    4e66:	4313      	orrs	r3, r2
    4e68:	81a3      	strh	r3, [r4, #12]
    4e6a:	69b3      	ldr	r3, [r6, #24]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d102      	bne.n	4e76 <setvbuf+0x106>
    4e70:	0030      	movs	r0, r6
    4e72:	f000 f921 	bl	50b8 <__sinit>
    4e76:	9b00      	ldr	r3, [sp, #0]
    4e78:	2b01      	cmp	r3, #1
    4e7a:	d103      	bne.n	4e84 <setvbuf+0x114>
    4e7c:	89a3      	ldrh	r3, [r4, #12]
    4e7e:	9a00      	ldr	r2, [sp, #0]
    4e80:	431a      	orrs	r2, r3
    4e82:	81a2      	strh	r2, [r4, #12]
    4e84:	2308      	movs	r3, #8
    4e86:	89a2      	ldrh	r2, [r4, #12]
    4e88:	6027      	str	r7, [r4, #0]
    4e8a:	4013      	ands	r3, r2
    4e8c:	6127      	str	r7, [r4, #16]
    4e8e:	6165      	str	r5, [r4, #20]
    4e90:	1e18      	subs	r0, r3, #0
    4e92:	d00c      	beq.n	4eae <setvbuf+0x13e>
    4e94:	2301      	movs	r3, #1
    4e96:	401a      	ands	r2, r3
    4e98:	2300      	movs	r3, #0
    4e9a:	1e10      	subs	r0, r2, #0
    4e9c:	4298      	cmp	r0, r3
    4e9e:	d004      	beq.n	4eaa <setvbuf+0x13a>
    4ea0:	426d      	negs	r5, r5
    4ea2:	60a3      	str	r3, [r4, #8]
    4ea4:	61a5      	str	r5, [r4, #24]
    4ea6:	0018      	movs	r0, r3
    4ea8:	e005      	b.n	4eb6 <setvbuf+0x146>
    4eaa:	60a5      	str	r5, [r4, #8]
    4eac:	e003      	b.n	4eb6 <setvbuf+0x146>
    4eae:	60a3      	str	r3, [r4, #8]
    4eb0:	e001      	b.n	4eb6 <setvbuf+0x146>
    4eb2:	2001      	movs	r0, #1
    4eb4:	4240      	negs	r0, r0
    4eb6:	b005      	add	sp, #20
    4eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eba:	46c0      	nop			; (mov r8, r8)
    4ebc:	20000090 	.word	0x20000090
    4ec0:	00005730 	.word	0x00005730
    4ec4:	00005750 	.word	0x00005750
    4ec8:	00005770 	.word	0x00005770
    4ecc:	fffff35c 	.word	0xfffff35c

00004ed0 <__sflush_r>:
    4ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ed2:	898a      	ldrh	r2, [r1, #12]
    4ed4:	0005      	movs	r5, r0
    4ed6:	000c      	movs	r4, r1
    4ed8:	0713      	lsls	r3, r2, #28
    4eda:	d45a      	bmi.n	4f92 <__sflush_r+0xc2>
    4edc:	684b      	ldr	r3, [r1, #4]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	dc02      	bgt.n	4ee8 <__sflush_r+0x18>
    4ee2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	dd19      	ble.n	4f1c <__sflush_r+0x4c>
    4ee8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4eea:	2f00      	cmp	r7, #0
    4eec:	d016      	beq.n	4f1c <__sflush_r+0x4c>
    4eee:	2300      	movs	r3, #0
    4ef0:	682e      	ldr	r6, [r5, #0]
    4ef2:	602b      	str	r3, [r5, #0]
    4ef4:	2380      	movs	r3, #128	; 0x80
    4ef6:	015b      	lsls	r3, r3, #5
    4ef8:	401a      	ands	r2, r3
    4efa:	d001      	beq.n	4f00 <__sflush_r+0x30>
    4efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4efe:	e014      	b.n	4f2a <__sflush_r+0x5a>
    4f00:	2301      	movs	r3, #1
    4f02:	6a21      	ldr	r1, [r4, #32]
    4f04:	0028      	movs	r0, r5
    4f06:	47b8      	blx	r7
    4f08:	1c43      	adds	r3, r0, #1
    4f0a:	d10e      	bne.n	4f2a <__sflush_r+0x5a>
    4f0c:	682b      	ldr	r3, [r5, #0]
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d00b      	beq.n	4f2a <__sflush_r+0x5a>
    4f12:	2b1d      	cmp	r3, #29
    4f14:	d001      	beq.n	4f1a <__sflush_r+0x4a>
    4f16:	2b16      	cmp	r3, #22
    4f18:	d102      	bne.n	4f20 <__sflush_r+0x50>
    4f1a:	602e      	str	r6, [r5, #0]
    4f1c:	2000      	movs	r0, #0
    4f1e:	e05a      	b.n	4fd6 <__sflush_r+0x106>
    4f20:	2240      	movs	r2, #64	; 0x40
    4f22:	89a3      	ldrh	r3, [r4, #12]
    4f24:	4313      	orrs	r3, r2
    4f26:	81a3      	strh	r3, [r4, #12]
    4f28:	e055      	b.n	4fd6 <__sflush_r+0x106>
    4f2a:	89a3      	ldrh	r3, [r4, #12]
    4f2c:	075b      	lsls	r3, r3, #29
    4f2e:	d506      	bpl.n	4f3e <__sflush_r+0x6e>
    4f30:	6863      	ldr	r3, [r4, #4]
    4f32:	1ac0      	subs	r0, r0, r3
    4f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4f36:	2b00      	cmp	r3, #0
    4f38:	d001      	beq.n	4f3e <__sflush_r+0x6e>
    4f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4f3c:	1ac0      	subs	r0, r0, r3
    4f3e:	2300      	movs	r3, #0
    4f40:	0002      	movs	r2, r0
    4f42:	6a21      	ldr	r1, [r4, #32]
    4f44:	0028      	movs	r0, r5
    4f46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4f48:	47b8      	blx	r7
    4f4a:	89a3      	ldrh	r3, [r4, #12]
    4f4c:	1c42      	adds	r2, r0, #1
    4f4e:	d106      	bne.n	4f5e <__sflush_r+0x8e>
    4f50:	6829      	ldr	r1, [r5, #0]
    4f52:	291d      	cmp	r1, #29
    4f54:	d83a      	bhi.n	4fcc <__sflush_r+0xfc>
    4f56:	4a20      	ldr	r2, [pc, #128]	; (4fd8 <__sflush_r+0x108>)
    4f58:	40ca      	lsrs	r2, r1
    4f5a:	07d2      	lsls	r2, r2, #31
    4f5c:	d536      	bpl.n	4fcc <__sflush_r+0xfc>
    4f5e:	2200      	movs	r2, #0
    4f60:	6062      	str	r2, [r4, #4]
    4f62:	6922      	ldr	r2, [r4, #16]
    4f64:	6022      	str	r2, [r4, #0]
    4f66:	04db      	lsls	r3, r3, #19
    4f68:	d505      	bpl.n	4f76 <__sflush_r+0xa6>
    4f6a:	1c43      	adds	r3, r0, #1
    4f6c:	d102      	bne.n	4f74 <__sflush_r+0xa4>
    4f6e:	682b      	ldr	r3, [r5, #0]
    4f70:	2b00      	cmp	r3, #0
    4f72:	d100      	bne.n	4f76 <__sflush_r+0xa6>
    4f74:	6560      	str	r0, [r4, #84]	; 0x54
    4f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f78:	602e      	str	r6, [r5, #0]
    4f7a:	2900      	cmp	r1, #0
    4f7c:	d0ce      	beq.n	4f1c <__sflush_r+0x4c>
    4f7e:	0023      	movs	r3, r4
    4f80:	3344      	adds	r3, #68	; 0x44
    4f82:	4299      	cmp	r1, r3
    4f84:	d002      	beq.n	4f8c <__sflush_r+0xbc>
    4f86:	0028      	movs	r0, r5
    4f88:	f000 f95a 	bl	5240 <_free_r>
    4f8c:	2000      	movs	r0, #0
    4f8e:	6360      	str	r0, [r4, #52]	; 0x34
    4f90:	e021      	b.n	4fd6 <__sflush_r+0x106>
    4f92:	690f      	ldr	r7, [r1, #16]
    4f94:	2f00      	cmp	r7, #0
    4f96:	d0c1      	beq.n	4f1c <__sflush_r+0x4c>
    4f98:	680b      	ldr	r3, [r1, #0]
    4f9a:	600f      	str	r7, [r1, #0]
    4f9c:	1bdb      	subs	r3, r3, r7
    4f9e:	9301      	str	r3, [sp, #4]
    4fa0:	2300      	movs	r3, #0
    4fa2:	0792      	lsls	r2, r2, #30
    4fa4:	d100      	bne.n	4fa8 <__sflush_r+0xd8>
    4fa6:	694b      	ldr	r3, [r1, #20]
    4fa8:	60a3      	str	r3, [r4, #8]
    4faa:	e003      	b.n	4fb4 <__sflush_r+0xe4>
    4fac:	9b01      	ldr	r3, [sp, #4]
    4fae:	183f      	adds	r7, r7, r0
    4fb0:	1a1b      	subs	r3, r3, r0
    4fb2:	9301      	str	r3, [sp, #4]
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	ddb0      	ble.n	4f1c <__sflush_r+0x4c>
    4fba:	9b01      	ldr	r3, [sp, #4]
    4fbc:	003a      	movs	r2, r7
    4fbe:	6a21      	ldr	r1, [r4, #32]
    4fc0:	0028      	movs	r0, r5
    4fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4fc4:	47b0      	blx	r6
    4fc6:	2800      	cmp	r0, #0
    4fc8:	dcf0      	bgt.n	4fac <__sflush_r+0xdc>
    4fca:	89a3      	ldrh	r3, [r4, #12]
    4fcc:	2240      	movs	r2, #64	; 0x40
    4fce:	2001      	movs	r0, #1
    4fd0:	4313      	orrs	r3, r2
    4fd2:	81a3      	strh	r3, [r4, #12]
    4fd4:	4240      	negs	r0, r0
    4fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fd8:	20400001 	.word	0x20400001

00004fdc <_fflush_r>:
    4fdc:	690b      	ldr	r3, [r1, #16]
    4fde:	b570      	push	{r4, r5, r6, lr}
    4fe0:	0005      	movs	r5, r0
    4fe2:	000c      	movs	r4, r1
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d101      	bne.n	4fec <_fflush_r+0x10>
    4fe8:	2000      	movs	r0, #0
    4fea:	e01c      	b.n	5026 <_fflush_r+0x4a>
    4fec:	2800      	cmp	r0, #0
    4fee:	d004      	beq.n	4ffa <_fflush_r+0x1e>
    4ff0:	6983      	ldr	r3, [r0, #24]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d101      	bne.n	4ffa <_fflush_r+0x1e>
    4ff6:	f000 f85f 	bl	50b8 <__sinit>
    4ffa:	4b0b      	ldr	r3, [pc, #44]	; (5028 <_fflush_r+0x4c>)
    4ffc:	429c      	cmp	r4, r3
    4ffe:	d101      	bne.n	5004 <_fflush_r+0x28>
    5000:	686c      	ldr	r4, [r5, #4]
    5002:	e008      	b.n	5016 <_fflush_r+0x3a>
    5004:	4b09      	ldr	r3, [pc, #36]	; (502c <_fflush_r+0x50>)
    5006:	429c      	cmp	r4, r3
    5008:	d101      	bne.n	500e <_fflush_r+0x32>
    500a:	68ac      	ldr	r4, [r5, #8]
    500c:	e003      	b.n	5016 <_fflush_r+0x3a>
    500e:	4b08      	ldr	r3, [pc, #32]	; (5030 <_fflush_r+0x54>)
    5010:	429c      	cmp	r4, r3
    5012:	d100      	bne.n	5016 <_fflush_r+0x3a>
    5014:	68ec      	ldr	r4, [r5, #12]
    5016:	220c      	movs	r2, #12
    5018:	5ea3      	ldrsh	r3, [r4, r2]
    501a:	2b00      	cmp	r3, #0
    501c:	d0e4      	beq.n	4fe8 <_fflush_r+0xc>
    501e:	0021      	movs	r1, r4
    5020:	0028      	movs	r0, r5
    5022:	f7ff ff55 	bl	4ed0 <__sflush_r>
    5026:	bd70      	pop	{r4, r5, r6, pc}
    5028:	00005730 	.word	0x00005730
    502c:	00005750 	.word	0x00005750
    5030:	00005770 	.word	0x00005770

00005034 <_cleanup_r>:
    5034:	b510      	push	{r4, lr}
    5036:	4902      	ldr	r1, [pc, #8]	; (5040 <_cleanup_r+0xc>)
    5038:	f000 f8b0 	bl	519c <_fwalk_reent>
    503c:	bd10      	pop	{r4, pc}
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	00004fdd 	.word	0x00004fdd

00005044 <std.isra.0>:
    5044:	2300      	movs	r3, #0
    5046:	b510      	push	{r4, lr}
    5048:	0004      	movs	r4, r0
    504a:	6003      	str	r3, [r0, #0]
    504c:	6043      	str	r3, [r0, #4]
    504e:	6083      	str	r3, [r0, #8]
    5050:	8181      	strh	r1, [r0, #12]
    5052:	6643      	str	r3, [r0, #100]	; 0x64
    5054:	81c2      	strh	r2, [r0, #14]
    5056:	6103      	str	r3, [r0, #16]
    5058:	6143      	str	r3, [r0, #20]
    505a:	6183      	str	r3, [r0, #24]
    505c:	0019      	movs	r1, r3
    505e:	2208      	movs	r2, #8
    5060:	305c      	adds	r0, #92	; 0x5c
    5062:	f7ff fe74 	bl	4d4e <memset>
    5066:	4b05      	ldr	r3, [pc, #20]	; (507c <std.isra.0+0x38>)
    5068:	6224      	str	r4, [r4, #32]
    506a:	6263      	str	r3, [r4, #36]	; 0x24
    506c:	4b04      	ldr	r3, [pc, #16]	; (5080 <std.isra.0+0x3c>)
    506e:	62a3      	str	r3, [r4, #40]	; 0x28
    5070:	4b04      	ldr	r3, [pc, #16]	; (5084 <std.isra.0+0x40>)
    5072:	62e3      	str	r3, [r4, #44]	; 0x2c
    5074:	4b04      	ldr	r3, [pc, #16]	; (5088 <std.isra.0+0x44>)
    5076:	6323      	str	r3, [r4, #48]	; 0x30
    5078:	bd10      	pop	{r4, pc}
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	0000539d 	.word	0x0000539d
    5080:	000053c5 	.word	0x000053c5
    5084:	000053fd 	.word	0x000053fd
    5088:	00005429 	.word	0x00005429

0000508c <__sfmoreglue>:
    508c:	b570      	push	{r4, r5, r6, lr}
    508e:	2568      	movs	r5, #104	; 0x68
    5090:	1e4b      	subs	r3, r1, #1
    5092:	435d      	muls	r5, r3
    5094:	000e      	movs	r6, r1
    5096:	0029      	movs	r1, r5
    5098:	3174      	adds	r1, #116	; 0x74
    509a:	f000 f917 	bl	52cc <_malloc_r>
    509e:	1e04      	subs	r4, r0, #0
    50a0:	d008      	beq.n	50b4 <__sfmoreglue+0x28>
    50a2:	2100      	movs	r1, #0
    50a4:	002a      	movs	r2, r5
    50a6:	6001      	str	r1, [r0, #0]
    50a8:	6046      	str	r6, [r0, #4]
    50aa:	300c      	adds	r0, #12
    50ac:	60a0      	str	r0, [r4, #8]
    50ae:	3268      	adds	r2, #104	; 0x68
    50b0:	f7ff fe4d 	bl	4d4e <memset>
    50b4:	0020      	movs	r0, r4
    50b6:	bd70      	pop	{r4, r5, r6, pc}

000050b8 <__sinit>:
    50b8:	6983      	ldr	r3, [r0, #24]
    50ba:	b513      	push	{r0, r1, r4, lr}
    50bc:	0004      	movs	r4, r0
    50be:	2b00      	cmp	r3, #0
    50c0:	d128      	bne.n	5114 <__sinit+0x5c>
    50c2:	6483      	str	r3, [r0, #72]	; 0x48
    50c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    50c6:	6503      	str	r3, [r0, #80]	; 0x50
    50c8:	4b13      	ldr	r3, [pc, #76]	; (5118 <__sinit+0x60>)
    50ca:	4a14      	ldr	r2, [pc, #80]	; (511c <__sinit+0x64>)
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	6282      	str	r2, [r0, #40]	; 0x28
    50d0:	9301      	str	r3, [sp, #4]
    50d2:	4298      	cmp	r0, r3
    50d4:	d101      	bne.n	50da <__sinit+0x22>
    50d6:	2301      	movs	r3, #1
    50d8:	6183      	str	r3, [r0, #24]
    50da:	0020      	movs	r0, r4
    50dc:	f000 f820 	bl	5120 <__sfp>
    50e0:	6060      	str	r0, [r4, #4]
    50e2:	0020      	movs	r0, r4
    50e4:	f000 f81c 	bl	5120 <__sfp>
    50e8:	60a0      	str	r0, [r4, #8]
    50ea:	0020      	movs	r0, r4
    50ec:	f000 f818 	bl	5120 <__sfp>
    50f0:	2200      	movs	r2, #0
    50f2:	60e0      	str	r0, [r4, #12]
    50f4:	2104      	movs	r1, #4
    50f6:	6860      	ldr	r0, [r4, #4]
    50f8:	f7ff ffa4 	bl	5044 <std.isra.0>
    50fc:	2201      	movs	r2, #1
    50fe:	2109      	movs	r1, #9
    5100:	68a0      	ldr	r0, [r4, #8]
    5102:	f7ff ff9f 	bl	5044 <std.isra.0>
    5106:	2202      	movs	r2, #2
    5108:	2112      	movs	r1, #18
    510a:	68e0      	ldr	r0, [r4, #12]
    510c:	f7ff ff9a 	bl	5044 <std.isra.0>
    5110:	2301      	movs	r3, #1
    5112:	61a3      	str	r3, [r4, #24]
    5114:	bd13      	pop	{r0, r1, r4, pc}
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	0000572c 	.word	0x0000572c
    511c:	00005035 	.word	0x00005035

00005120 <__sfp>:
    5120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5122:	4b1d      	ldr	r3, [pc, #116]	; (5198 <__sfp+0x78>)
    5124:	0006      	movs	r6, r0
    5126:	681d      	ldr	r5, [r3, #0]
    5128:	69ab      	ldr	r3, [r5, #24]
    512a:	2b00      	cmp	r3, #0
    512c:	d102      	bne.n	5134 <__sfp+0x14>
    512e:	0028      	movs	r0, r5
    5130:	f7ff ffc2 	bl	50b8 <__sinit>
    5134:	3548      	adds	r5, #72	; 0x48
    5136:	68ac      	ldr	r4, [r5, #8]
    5138:	686b      	ldr	r3, [r5, #4]
    513a:	3b01      	subs	r3, #1
    513c:	d405      	bmi.n	514a <__sfp+0x2a>
    513e:	220c      	movs	r2, #12
    5140:	5ea7      	ldrsh	r7, [r4, r2]
    5142:	2f00      	cmp	r7, #0
    5144:	d010      	beq.n	5168 <__sfp+0x48>
    5146:	3468      	adds	r4, #104	; 0x68
    5148:	e7f7      	b.n	513a <__sfp+0x1a>
    514a:	682b      	ldr	r3, [r5, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d001      	beq.n	5154 <__sfp+0x34>
    5150:	682d      	ldr	r5, [r5, #0]
    5152:	e7f0      	b.n	5136 <__sfp+0x16>
    5154:	2104      	movs	r1, #4
    5156:	0030      	movs	r0, r6
    5158:	f7ff ff98 	bl	508c <__sfmoreglue>
    515c:	6028      	str	r0, [r5, #0]
    515e:	2800      	cmp	r0, #0
    5160:	d1f6      	bne.n	5150 <__sfp+0x30>
    5162:	230c      	movs	r3, #12
    5164:	6033      	str	r3, [r6, #0]
    5166:	e016      	b.n	5196 <__sfp+0x76>
    5168:	2301      	movs	r3, #1
    516a:	0020      	movs	r0, r4
    516c:	425b      	negs	r3, r3
    516e:	81e3      	strh	r3, [r4, #14]
    5170:	3302      	adds	r3, #2
    5172:	81a3      	strh	r3, [r4, #12]
    5174:	6667      	str	r7, [r4, #100]	; 0x64
    5176:	6027      	str	r7, [r4, #0]
    5178:	60a7      	str	r7, [r4, #8]
    517a:	6067      	str	r7, [r4, #4]
    517c:	6127      	str	r7, [r4, #16]
    517e:	6167      	str	r7, [r4, #20]
    5180:	61a7      	str	r7, [r4, #24]
    5182:	305c      	adds	r0, #92	; 0x5c
    5184:	2208      	movs	r2, #8
    5186:	0039      	movs	r1, r7
    5188:	f7ff fde1 	bl	4d4e <memset>
    518c:	0020      	movs	r0, r4
    518e:	6367      	str	r7, [r4, #52]	; 0x34
    5190:	63a7      	str	r7, [r4, #56]	; 0x38
    5192:	64a7      	str	r7, [r4, #72]	; 0x48
    5194:	64e7      	str	r7, [r4, #76]	; 0x4c
    5196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5198:	0000572c 	.word	0x0000572c

0000519c <_fwalk_reent>:
    519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    519e:	0004      	movs	r4, r0
    51a0:	0007      	movs	r7, r0
    51a2:	2600      	movs	r6, #0
    51a4:	9101      	str	r1, [sp, #4]
    51a6:	3448      	adds	r4, #72	; 0x48
    51a8:	2c00      	cmp	r4, #0
    51aa:	d016      	beq.n	51da <_fwalk_reent+0x3e>
    51ac:	6863      	ldr	r3, [r4, #4]
    51ae:	68a5      	ldr	r5, [r4, #8]
    51b0:	9300      	str	r3, [sp, #0]
    51b2:	9b00      	ldr	r3, [sp, #0]
    51b4:	3b01      	subs	r3, #1
    51b6:	9300      	str	r3, [sp, #0]
    51b8:	d40d      	bmi.n	51d6 <_fwalk_reent+0x3a>
    51ba:	89ab      	ldrh	r3, [r5, #12]
    51bc:	2b01      	cmp	r3, #1
    51be:	d908      	bls.n	51d2 <_fwalk_reent+0x36>
    51c0:	220e      	movs	r2, #14
    51c2:	5eab      	ldrsh	r3, [r5, r2]
    51c4:	3301      	adds	r3, #1
    51c6:	d004      	beq.n	51d2 <_fwalk_reent+0x36>
    51c8:	0029      	movs	r1, r5
    51ca:	0038      	movs	r0, r7
    51cc:	9b01      	ldr	r3, [sp, #4]
    51ce:	4798      	blx	r3
    51d0:	4306      	orrs	r6, r0
    51d2:	3568      	adds	r5, #104	; 0x68
    51d4:	e7ed      	b.n	51b2 <_fwalk_reent+0x16>
    51d6:	6824      	ldr	r4, [r4, #0]
    51d8:	e7e6      	b.n	51a8 <_fwalk_reent+0xc>
    51da:	0030      	movs	r0, r6
    51dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000051e0 <__swhatbuf_r>:
    51e0:	b570      	push	{r4, r5, r6, lr}
    51e2:	000e      	movs	r6, r1
    51e4:	001d      	movs	r5, r3
    51e6:	230e      	movs	r3, #14
    51e8:	5ec9      	ldrsh	r1, [r1, r3]
    51ea:	b090      	sub	sp, #64	; 0x40
    51ec:	0014      	movs	r4, r2
    51ee:	2900      	cmp	r1, #0
    51f0:	da06      	bge.n	5200 <__swhatbuf_r+0x20>
    51f2:	2300      	movs	r3, #0
    51f4:	602b      	str	r3, [r5, #0]
    51f6:	89b3      	ldrh	r3, [r6, #12]
    51f8:	061b      	lsls	r3, r3, #24
    51fa:	d50f      	bpl.n	521c <__swhatbuf_r+0x3c>
    51fc:	2340      	movs	r3, #64	; 0x40
    51fe:	e00f      	b.n	5220 <__swhatbuf_r+0x40>
    5200:	aa01      	add	r2, sp, #4
    5202:	f000 f93d 	bl	5480 <_fstat_r>
    5206:	2800      	cmp	r0, #0
    5208:	dbf3      	blt.n	51f2 <__swhatbuf_r+0x12>
    520a:	23f0      	movs	r3, #240	; 0xf0
    520c:	9a02      	ldr	r2, [sp, #8]
    520e:	021b      	lsls	r3, r3, #8
    5210:	4013      	ands	r3, r2
    5212:	4a05      	ldr	r2, [pc, #20]	; (5228 <__swhatbuf_r+0x48>)
    5214:	189b      	adds	r3, r3, r2
    5216:	425a      	negs	r2, r3
    5218:	4153      	adcs	r3, r2
    521a:	602b      	str	r3, [r5, #0]
    521c:	2380      	movs	r3, #128	; 0x80
    521e:	00db      	lsls	r3, r3, #3
    5220:	2000      	movs	r0, #0
    5222:	6023      	str	r3, [r4, #0]
    5224:	b010      	add	sp, #64	; 0x40
    5226:	bd70      	pop	{r4, r5, r6, pc}
    5228:	ffffe000 	.word	0xffffe000

0000522c <malloc>:
    522c:	b510      	push	{r4, lr}
    522e:	4b03      	ldr	r3, [pc, #12]	; (523c <malloc+0x10>)
    5230:	0001      	movs	r1, r0
    5232:	6818      	ldr	r0, [r3, #0]
    5234:	f000 f84a 	bl	52cc <_malloc_r>
    5238:	bd10      	pop	{r4, pc}
    523a:	46c0      	nop			; (mov r8, r8)
    523c:	20000090 	.word	0x20000090

00005240 <_free_r>:
    5240:	b530      	push	{r4, r5, lr}
    5242:	2900      	cmp	r1, #0
    5244:	d03e      	beq.n	52c4 <_free_r+0x84>
    5246:	3904      	subs	r1, #4
    5248:	680b      	ldr	r3, [r1, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	da00      	bge.n	5250 <_free_r+0x10>
    524e:	18c9      	adds	r1, r1, r3
    5250:	4a1d      	ldr	r2, [pc, #116]	; (52c8 <_free_r+0x88>)
    5252:	6813      	ldr	r3, [r2, #0]
    5254:	0014      	movs	r4, r2
    5256:	2b00      	cmp	r3, #0
    5258:	d102      	bne.n	5260 <_free_r+0x20>
    525a:	604b      	str	r3, [r1, #4]
    525c:	6011      	str	r1, [r2, #0]
    525e:	e031      	b.n	52c4 <_free_r+0x84>
    5260:	428b      	cmp	r3, r1
    5262:	d90d      	bls.n	5280 <_free_r+0x40>
    5264:	680a      	ldr	r2, [r1, #0]
    5266:	1888      	adds	r0, r1, r2
    5268:	4283      	cmp	r3, r0
    526a:	d103      	bne.n	5274 <_free_r+0x34>
    526c:	6818      	ldr	r0, [r3, #0]
    526e:	685b      	ldr	r3, [r3, #4]
    5270:	1882      	adds	r2, r0, r2
    5272:	600a      	str	r2, [r1, #0]
    5274:	604b      	str	r3, [r1, #4]
    5276:	6021      	str	r1, [r4, #0]
    5278:	e024      	b.n	52c4 <_free_r+0x84>
    527a:	428a      	cmp	r2, r1
    527c:	d803      	bhi.n	5286 <_free_r+0x46>
    527e:	0013      	movs	r3, r2
    5280:	685a      	ldr	r2, [r3, #4]
    5282:	2a00      	cmp	r2, #0
    5284:	d1f9      	bne.n	527a <_free_r+0x3a>
    5286:	681d      	ldr	r5, [r3, #0]
    5288:	195c      	adds	r4, r3, r5
    528a:	428c      	cmp	r4, r1
    528c:	d10b      	bne.n	52a6 <_free_r+0x66>
    528e:	6809      	ldr	r1, [r1, #0]
    5290:	1869      	adds	r1, r5, r1
    5292:	1858      	adds	r0, r3, r1
    5294:	6019      	str	r1, [r3, #0]
    5296:	4282      	cmp	r2, r0
    5298:	d114      	bne.n	52c4 <_free_r+0x84>
    529a:	6810      	ldr	r0, [r2, #0]
    529c:	6852      	ldr	r2, [r2, #4]
    529e:	1841      	adds	r1, r0, r1
    52a0:	6019      	str	r1, [r3, #0]
    52a2:	605a      	str	r2, [r3, #4]
    52a4:	e00e      	b.n	52c4 <_free_r+0x84>
    52a6:	428c      	cmp	r4, r1
    52a8:	d902      	bls.n	52b0 <_free_r+0x70>
    52aa:	230c      	movs	r3, #12
    52ac:	6003      	str	r3, [r0, #0]
    52ae:	e009      	b.n	52c4 <_free_r+0x84>
    52b0:	6808      	ldr	r0, [r1, #0]
    52b2:	180c      	adds	r4, r1, r0
    52b4:	42a2      	cmp	r2, r4
    52b6:	d103      	bne.n	52c0 <_free_r+0x80>
    52b8:	6814      	ldr	r4, [r2, #0]
    52ba:	6852      	ldr	r2, [r2, #4]
    52bc:	1820      	adds	r0, r4, r0
    52be:	6008      	str	r0, [r1, #0]
    52c0:	604a      	str	r2, [r1, #4]
    52c2:	6059      	str	r1, [r3, #4]
    52c4:	bd30      	pop	{r4, r5, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	20000284 	.word	0x20000284

000052cc <_malloc_r>:
    52cc:	2303      	movs	r3, #3
    52ce:	b570      	push	{r4, r5, r6, lr}
    52d0:	1ccd      	adds	r5, r1, #3
    52d2:	439d      	bics	r5, r3
    52d4:	3508      	adds	r5, #8
    52d6:	0006      	movs	r6, r0
    52d8:	2d0c      	cmp	r5, #12
    52da:	d201      	bcs.n	52e0 <_malloc_r+0x14>
    52dc:	250c      	movs	r5, #12
    52de:	e005      	b.n	52ec <_malloc_r+0x20>
    52e0:	2d00      	cmp	r5, #0
    52e2:	da03      	bge.n	52ec <_malloc_r+0x20>
    52e4:	230c      	movs	r3, #12
    52e6:	2000      	movs	r0, #0
    52e8:	6033      	str	r3, [r6, #0]
    52ea:	e040      	b.n	536e <_malloc_r+0xa2>
    52ec:	42a9      	cmp	r1, r5
    52ee:	d8f9      	bhi.n	52e4 <_malloc_r+0x18>
    52f0:	4b1f      	ldr	r3, [pc, #124]	; (5370 <_malloc_r+0xa4>)
    52f2:	681c      	ldr	r4, [r3, #0]
    52f4:	001a      	movs	r2, r3
    52f6:	0021      	movs	r1, r4
    52f8:	2900      	cmp	r1, #0
    52fa:	d013      	beq.n	5324 <_malloc_r+0x58>
    52fc:	680b      	ldr	r3, [r1, #0]
    52fe:	1b5b      	subs	r3, r3, r5
    5300:	d40d      	bmi.n	531e <_malloc_r+0x52>
    5302:	2b0b      	cmp	r3, #11
    5304:	d902      	bls.n	530c <_malloc_r+0x40>
    5306:	600b      	str	r3, [r1, #0]
    5308:	18cc      	adds	r4, r1, r3
    530a:	e01e      	b.n	534a <_malloc_r+0x7e>
    530c:	428c      	cmp	r4, r1
    530e:	d102      	bne.n	5316 <_malloc_r+0x4a>
    5310:	6863      	ldr	r3, [r4, #4]
    5312:	6013      	str	r3, [r2, #0]
    5314:	e01a      	b.n	534c <_malloc_r+0x80>
    5316:	684b      	ldr	r3, [r1, #4]
    5318:	6063      	str	r3, [r4, #4]
    531a:	000c      	movs	r4, r1
    531c:	e016      	b.n	534c <_malloc_r+0x80>
    531e:	000c      	movs	r4, r1
    5320:	6849      	ldr	r1, [r1, #4]
    5322:	e7e9      	b.n	52f8 <_malloc_r+0x2c>
    5324:	4c13      	ldr	r4, [pc, #76]	; (5374 <_malloc_r+0xa8>)
    5326:	6823      	ldr	r3, [r4, #0]
    5328:	2b00      	cmp	r3, #0
    532a:	d103      	bne.n	5334 <_malloc_r+0x68>
    532c:	0030      	movs	r0, r6
    532e:	f000 f823 	bl	5378 <_sbrk_r>
    5332:	6020      	str	r0, [r4, #0]
    5334:	0029      	movs	r1, r5
    5336:	0030      	movs	r0, r6
    5338:	f000 f81e 	bl	5378 <_sbrk_r>
    533c:	1c43      	adds	r3, r0, #1
    533e:	d0d1      	beq.n	52e4 <_malloc_r+0x18>
    5340:	2303      	movs	r3, #3
    5342:	1cc4      	adds	r4, r0, #3
    5344:	439c      	bics	r4, r3
    5346:	42a0      	cmp	r0, r4
    5348:	d10a      	bne.n	5360 <_malloc_r+0x94>
    534a:	6025      	str	r5, [r4, #0]
    534c:	0020      	movs	r0, r4
    534e:	2207      	movs	r2, #7
    5350:	300b      	adds	r0, #11
    5352:	1d23      	adds	r3, r4, #4
    5354:	4390      	bics	r0, r2
    5356:	1ac3      	subs	r3, r0, r3
    5358:	d009      	beq.n	536e <_malloc_r+0xa2>
    535a:	425a      	negs	r2, r3
    535c:	50e2      	str	r2, [r4, r3]
    535e:	e006      	b.n	536e <_malloc_r+0xa2>
    5360:	1a21      	subs	r1, r4, r0
    5362:	0030      	movs	r0, r6
    5364:	f000 f808 	bl	5378 <_sbrk_r>
    5368:	1c43      	adds	r3, r0, #1
    536a:	d1ee      	bne.n	534a <_malloc_r+0x7e>
    536c:	e7ba      	b.n	52e4 <_malloc_r+0x18>
    536e:	bd70      	pop	{r4, r5, r6, pc}
    5370:	20000284 	.word	0x20000284
    5374:	20000280 	.word	0x20000280

00005378 <_sbrk_r>:
    5378:	2300      	movs	r3, #0
    537a:	b570      	push	{r4, r5, r6, lr}
    537c:	4c06      	ldr	r4, [pc, #24]	; (5398 <_sbrk_r+0x20>)
    537e:	0005      	movs	r5, r0
    5380:	0008      	movs	r0, r1
    5382:	6023      	str	r3, [r4, #0]
    5384:	f7fe fca8 	bl	3cd8 <_sbrk>
    5388:	1c43      	adds	r3, r0, #1
    538a:	d103      	bne.n	5394 <_sbrk_r+0x1c>
    538c:	6823      	ldr	r3, [r4, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d000      	beq.n	5394 <_sbrk_r+0x1c>
    5392:	602b      	str	r3, [r5, #0]
    5394:	bd70      	pop	{r4, r5, r6, pc}
    5396:	46c0      	nop			; (mov r8, r8)
    5398:	200005e4 	.word	0x200005e4

0000539c <__sread>:
    539c:	b570      	push	{r4, r5, r6, lr}
    539e:	000c      	movs	r4, r1
    53a0:	250e      	movs	r5, #14
    53a2:	5f49      	ldrsh	r1, [r1, r5]
    53a4:	f000 f892 	bl	54cc <_read_r>
    53a8:	2800      	cmp	r0, #0
    53aa:	db03      	blt.n	53b4 <__sread+0x18>
    53ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    53ae:	181b      	adds	r3, r3, r0
    53b0:	6563      	str	r3, [r4, #84]	; 0x54
    53b2:	e003      	b.n	53bc <__sread+0x20>
    53b4:	89a2      	ldrh	r2, [r4, #12]
    53b6:	4b02      	ldr	r3, [pc, #8]	; (53c0 <__sread+0x24>)
    53b8:	4013      	ands	r3, r2
    53ba:	81a3      	strh	r3, [r4, #12]
    53bc:	bd70      	pop	{r4, r5, r6, pc}
    53be:	46c0      	nop			; (mov r8, r8)
    53c0:	ffffefff 	.word	0xffffefff

000053c4 <__swrite>:
    53c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53c6:	001f      	movs	r7, r3
    53c8:	898b      	ldrh	r3, [r1, #12]
    53ca:	0005      	movs	r5, r0
    53cc:	000c      	movs	r4, r1
    53ce:	0016      	movs	r6, r2
    53d0:	05db      	lsls	r3, r3, #23
    53d2:	d505      	bpl.n	53e0 <__swrite+0x1c>
    53d4:	230e      	movs	r3, #14
    53d6:	5ec9      	ldrsh	r1, [r1, r3]
    53d8:	2200      	movs	r2, #0
    53da:	2302      	movs	r3, #2
    53dc:	f000 f862 	bl	54a4 <_lseek_r>
    53e0:	89a2      	ldrh	r2, [r4, #12]
    53e2:	4b05      	ldr	r3, [pc, #20]	; (53f8 <__swrite+0x34>)
    53e4:	0028      	movs	r0, r5
    53e6:	4013      	ands	r3, r2
    53e8:	81a3      	strh	r3, [r4, #12]
    53ea:	0032      	movs	r2, r6
    53ec:	230e      	movs	r3, #14
    53ee:	5ee1      	ldrsh	r1, [r4, r3]
    53f0:	003b      	movs	r3, r7
    53f2:	f000 f81f 	bl	5434 <_write_r>
    53f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f8:	ffffefff 	.word	0xffffefff

000053fc <__sseek>:
    53fc:	b570      	push	{r4, r5, r6, lr}
    53fe:	000c      	movs	r4, r1
    5400:	250e      	movs	r5, #14
    5402:	5f49      	ldrsh	r1, [r1, r5]
    5404:	f000 f84e 	bl	54a4 <_lseek_r>
    5408:	89a3      	ldrh	r3, [r4, #12]
    540a:	1c42      	adds	r2, r0, #1
    540c:	d103      	bne.n	5416 <__sseek+0x1a>
    540e:	4a05      	ldr	r2, [pc, #20]	; (5424 <__sseek+0x28>)
    5410:	4013      	ands	r3, r2
    5412:	81a3      	strh	r3, [r4, #12]
    5414:	e004      	b.n	5420 <__sseek+0x24>
    5416:	2280      	movs	r2, #128	; 0x80
    5418:	0152      	lsls	r2, r2, #5
    541a:	4313      	orrs	r3, r2
    541c:	81a3      	strh	r3, [r4, #12]
    541e:	6560      	str	r0, [r4, #84]	; 0x54
    5420:	bd70      	pop	{r4, r5, r6, pc}
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	ffffefff 	.word	0xffffefff

00005428 <__sclose>:
    5428:	b510      	push	{r4, lr}
    542a:	230e      	movs	r3, #14
    542c:	5ec9      	ldrsh	r1, [r1, r3]
    542e:	f000 f815 	bl	545c <_close_r>
    5432:	bd10      	pop	{r4, pc}

00005434 <_write_r>:
    5434:	b570      	push	{r4, r5, r6, lr}
    5436:	0005      	movs	r5, r0
    5438:	0008      	movs	r0, r1
    543a:	0011      	movs	r1, r2
    543c:	2200      	movs	r2, #0
    543e:	4c06      	ldr	r4, [pc, #24]	; (5458 <_write_r+0x24>)
    5440:	6022      	str	r2, [r4, #0]
    5442:	001a      	movs	r2, r3
    5444:	f7fe fc20 	bl	3c88 <_write>
    5448:	1c43      	adds	r3, r0, #1
    544a:	d103      	bne.n	5454 <_write_r+0x20>
    544c:	6823      	ldr	r3, [r4, #0]
    544e:	2b00      	cmp	r3, #0
    5450:	d000      	beq.n	5454 <_write_r+0x20>
    5452:	602b      	str	r3, [r5, #0]
    5454:	bd70      	pop	{r4, r5, r6, pc}
    5456:	46c0      	nop			; (mov r8, r8)
    5458:	200005e4 	.word	0x200005e4

0000545c <_close_r>:
    545c:	2300      	movs	r3, #0
    545e:	b570      	push	{r4, r5, r6, lr}
    5460:	4c06      	ldr	r4, [pc, #24]	; (547c <_close_r+0x20>)
    5462:	0005      	movs	r5, r0
    5464:	0008      	movs	r0, r1
    5466:	6023      	str	r3, [r4, #0]
    5468:	f7fe fc48 	bl	3cfc <_close>
    546c:	1c43      	adds	r3, r0, #1
    546e:	d103      	bne.n	5478 <_close_r+0x1c>
    5470:	6823      	ldr	r3, [r4, #0]
    5472:	2b00      	cmp	r3, #0
    5474:	d000      	beq.n	5478 <_close_r+0x1c>
    5476:	602b      	str	r3, [r5, #0]
    5478:	bd70      	pop	{r4, r5, r6, pc}
    547a:	46c0      	nop			; (mov r8, r8)
    547c:	200005e4 	.word	0x200005e4

00005480 <_fstat_r>:
    5480:	2300      	movs	r3, #0
    5482:	b570      	push	{r4, r5, r6, lr}
    5484:	4c06      	ldr	r4, [pc, #24]	; (54a0 <_fstat_r+0x20>)
    5486:	0005      	movs	r5, r0
    5488:	0008      	movs	r0, r1
    548a:	0011      	movs	r1, r2
    548c:	6023      	str	r3, [r4, #0]
    548e:	f7fe fc39 	bl	3d04 <_fstat>
    5492:	1c43      	adds	r3, r0, #1
    5494:	d103      	bne.n	549e <_fstat_r+0x1e>
    5496:	6823      	ldr	r3, [r4, #0]
    5498:	2b00      	cmp	r3, #0
    549a:	d000      	beq.n	549e <_fstat_r+0x1e>
    549c:	602b      	str	r3, [r5, #0]
    549e:	bd70      	pop	{r4, r5, r6, pc}
    54a0:	200005e4 	.word	0x200005e4

000054a4 <_lseek_r>:
    54a4:	b570      	push	{r4, r5, r6, lr}
    54a6:	0005      	movs	r5, r0
    54a8:	0008      	movs	r0, r1
    54aa:	0011      	movs	r1, r2
    54ac:	2200      	movs	r2, #0
    54ae:	4c06      	ldr	r4, [pc, #24]	; (54c8 <_lseek_r+0x24>)
    54b0:	6022      	str	r2, [r4, #0]
    54b2:	001a      	movs	r2, r3
    54b4:	f7fe fc2c 	bl	3d10 <_lseek>
    54b8:	1c43      	adds	r3, r0, #1
    54ba:	d103      	bne.n	54c4 <_lseek_r+0x20>
    54bc:	6823      	ldr	r3, [r4, #0]
    54be:	2b00      	cmp	r3, #0
    54c0:	d000      	beq.n	54c4 <_lseek_r+0x20>
    54c2:	602b      	str	r3, [r5, #0]
    54c4:	bd70      	pop	{r4, r5, r6, pc}
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	200005e4 	.word	0x200005e4

000054cc <_read_r>:
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	0005      	movs	r5, r0
    54d0:	0008      	movs	r0, r1
    54d2:	0011      	movs	r1, r2
    54d4:	2200      	movs	r2, #0
    54d6:	4c06      	ldr	r4, [pc, #24]	; (54f0 <_read_r+0x24>)
    54d8:	6022      	str	r2, [r4, #0]
    54da:	001a      	movs	r2, r3
    54dc:	f7fe fbb4 	bl	3c48 <_read>
    54e0:	1c43      	adds	r3, r0, #1
    54e2:	d103      	bne.n	54ec <_read_r+0x20>
    54e4:	6823      	ldr	r3, [r4, #0]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d000      	beq.n	54ec <_read_r+0x20>
    54ea:	602b      	str	r3, [r5, #0]
    54ec:	bd70      	pop	{r4, r5, r6, pc}
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	200005e4 	.word	0x200005e4
    54f4:	75636553 	.word	0x75636553
    54f8:	20646572 	.word	0x20646572
    54fc:	00000000 	.word	0x00000000
    5500:	616f7242 	.word	0x616f7242
    5504:	73616364 	.word	0x73616364
    5508:	61502074 	.word	0x61502074
    550c:	74656b63 	.word	0x74656b63
    5510:	00000020 	.word	0x00000020
    5514:	63696e55 	.word	0x63696e55
    5518:	20747361 	.word	0x20747361
    551c:	6b636150 	.word	0x6b636150
    5520:	00207465 	.word	0x00207465
    5524:	6f726620 	.word	0x6f726620
    5528:	0000206d 	.word	0x0000206d
    552c:	0000203a 	.word	0x0000203a
    5530:	0000165a 	.word	0x0000165a
    5534:	00001732 	.word	0x00001732
    5538:	00001850 	.word	0x00001850
    553c:	00001850 	.word	0x00001850
    5540:	00001850 	.word	0x00001850
    5544:	00001850 	.word	0x00001850
    5548:	000016e6 	.word	0x000016e6
    554c:	00001850 	.word	0x00001850
    5550:	00001850 	.word	0x00001850
    5554:	00001850 	.word	0x00001850
    5558:	00001850 	.word	0x00001850
    555c:	00001850 	.word	0x00001850
    5560:	00001850 	.word	0x00001850
    5564:	00001850 	.word	0x00001850
    5568:	00001850 	.word	0x00001850
    556c:	00001850 	.word	0x00001850
    5570:	000017be 	.word	0x000017be
    5574:	00001806 	.word	0x00001806
    5578:	00001850 	.word	0x00001850
    557c:	00001850 	.word	0x00001850
    5580:	00001850 	.word	0x00001850
    5584:	00001850 	.word	0x00001850
    5588:	000017ee 	.word	0x000017ee
    558c:	42000000 	.word	0x42000000
    5590:	42000400 	.word	0x42000400
    5594:	42000800 	.word	0x42000800
    5598:	42000c00 	.word	0x42000c00
    559c:	42001000 	.word	0x42001000
    55a0:	43000400 	.word	0x43000400
    55a4:	0b0a0908 	.word	0x0b0a0908
    55a8:	00000d0c 	.word	0x00000d0c
    55ac:	0000301a 	.word	0x0000301a
    55b0:	00003016 	.word	0x00003016
    55b4:	00003016 	.word	0x00003016
    55b8:	00003078 	.word	0x00003078
    55bc:	00003078 	.word	0x00003078
    55c0:	00003030 	.word	0x00003030
    55c4:	00003020 	.word	0x00003020
    55c8:	00003036 	.word	0x00003036
    55cc:	00003066 	.word	0x00003066
    55d0:	00003188 	.word	0x00003188
    55d4:	00003168 	.word	0x00003168
    55d8:	00003168 	.word	0x00003168
    55dc:	00003202 	.word	0x00003202
    55e0:	0000317a 	.word	0x0000317a
    55e4:	00003196 	.word	0x00003196
    55e8:	0000316c 	.word	0x0000316c
    55ec:	000031a4 	.word	0x000031a4
    55f0:	000031e6 	.word	0x000031e6
    55f4:	00003240 	.word	0x00003240
    55f8:	00003282 	.word	0x00003282
    55fc:	00003282 	.word	0x00003282
    5600:	00003282 	.word	0x00003282
    5604:	00003232 	.word	0x00003232
    5608:	0000324e 	.word	0x0000324e
    560c:	00003224 	.word	0x00003224
    5610:	0000325c 	.word	0x0000325c
    5614:	00003272 	.word	0x00003272
    5618:	000038ee 	.word	0x000038ee
    561c:	000038f8 	.word	0x000038f8
    5620:	00003902 	.word	0x00003902
    5624:	0000390c 	.word	0x0000390c
    5628:	00003916 	.word	0x00003916
    562c:	00003948 	.word	0x00003948
    5630:	00003952 	.word	0x00003952
    5634:	0000395c 	.word	0x0000395c
    5638:	00003966 	.word	0x00003966
    563c:	00003970 	.word	0x00003970
    5640:	42002000 	.word	0x42002000
    5644:	42002400 	.word	0x42002400
    5648:	43000800 	.word	0x43000800
    564c:	001d1b1b 	.word	0x001d1b1b
    5650:	00000002 	.word	0x00000002
    5654:	00000100 	.word	0x00000100
    5658:	00000002 	.word	0x00000002
    565c:	00000200 	.word	0x00000200
    5660:	00000003 	.word	0x00000003
    5664:	00000004 	.word	0x00000004

00005668 <DE>:
    5668:	20b2b2b2 b2b2b220 b20a0db2 20b22020     ...  .......  . 
    5678:	202020b2 20b20a0d b220b220 0db2b2b2     .   ...  . .....
    5688:	2020b20a 20b220b2 0a0d2020 20b2b2b2     ..  . .   ..... 
    5698:	b2b2b220 200a0db2 20202020 20202020      ......         
    56a8:	00000a0d                                ....

000056ac <MiWi_Data>:
    56ac:	2020b220 2020b220 20b220b2 20202020      .   .  . .     
    56bc:	0db220b2 b220b20a b220b220 b2202020     . .... . . .   .
    56cc:	20b22020 2020b220 20b20a0d 2020b220       .  .  ...  .  
    56dc:	20b220b2 b22020b2 20b22020 b20a0db2     . . .  .  . ....
    56ec:	20b22020 b220b220 20b22020 20b220b2       .  . .  . . . 
    56fc:	0a0db220 b22020b2 20b22020 202020b2      ....  .  . .   
    570c:	20b220b2 0db22020 2020200a 20202020     . .   ...       
    571c:	20202020 20202020 20202020 00430a0d                 ..C.

0000572c <_global_impure_ptr>:
    572c:	20000030                                0.. 

00005730 <__sf_fake_stdin>:
	...

00005750 <__sf_fake_stdout>:
	...

00005770 <__sf_fake_stderr>:
	...

00005790 <_init>:
    5790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5796:	bc08      	pop	{r3}
    5798:	469e      	mov	lr, r3
    579a:	4770      	bx	lr

0000579c <__init_array_start>:
    579c:	000000dd 	.word	0x000000dd

000057a0 <_fini>:
    57a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57a6:	bc08      	pop	{r3}
    57a8:	469e      	mov	lr, r3
    57aa:	4770      	bx	lr

000057ac <__fini_array_start>:
    57ac:	000000b5 	.word	0x000000b5
