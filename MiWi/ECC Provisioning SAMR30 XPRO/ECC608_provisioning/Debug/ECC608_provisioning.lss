
ECC608_provisioning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b644  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000108  20000000  0000b644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020108  2**0
                  CONTENTS
  3 .bss          000002b0  20000108  0000b74c  00020108  2**2
                  ALLOC
  4 .stack        00002000  200003b8  0000b9fc  00020108  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004acfe  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006495  00000000  00000000  0006ae87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005f14  00000000  00000000  0007131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001160  00000000  00000000  00077230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ef8  00000000  00000000  00078390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020ef5  00000000  00000000  00079288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018458  00000000  00000000  0009a17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009afcb  00000000  00000000  000b25d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004348  00000000  00000000  0014d5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 23 00 20 05 07 00 00 99 07 00 00 99 07 00 00     .#. ............
	...
      2c:	99 07 00 00 00 00 00 00 00 00 00 00 99 07 00 00     ................
      3c:	99 07 00 00 99 07 00 00 99 07 00 00 99 07 00 00     ................
      4c:	71 04 00 00 99 07 00 00 99 07 00 00 99 07 00 00     q...............
      5c:	99 07 00 00 a9 69 00 00 c1 69 00 00 d9 69 00 00     .....i...i...i..
      6c:	f1 69 00 00 09 6a 00 00 21 6a 00 00 f9 56 00 00     .i...j..!j...V..
      7c:	0d 57 00 00 21 57 00 00 99 07 00 00 99 07 00 00     .W..!W..........
	...
      94:	99 07 00 00 99 07 00 00 99 07 00 00 00 00 00 00     ................
      a4:	99 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000108 	.word	0x20000108
      d4:	00000000 	.word	0x00000000
      d8:	0000b644 	.word	0x0000b644

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000010c 	.word	0x2000010c
     108:	0000b644 	.word	0x0000b644
     10c:	0000b644 	.word	0x0000b644
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b04      	cmp	r3, #4
     140:	d827      	bhi.n	192 <system_apb_clock_set_mask+0x66>
     142:	009a      	lsls	r2, r3, #2
     144:	4b16      	ldr	r3, [pc, #88]	; (1a0 <system_apb_clock_set_mask+0x74>)
     146:	18d3      	adds	r3, r2, r3
     148:	681b      	ldr	r3, [r3, #0]
     14a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     14c:	4b15      	ldr	r3, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     150:	6951      	ldr	r1, [r2, #20]
     152:	683a      	ldr	r2, [r7, #0]
     154:	430a      	orrs	r2, r1
     156:	615a      	str	r2, [r3, #20]
			break;
     158:	e01d      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15c:	4a11      	ldr	r2, [pc, #68]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15e:	6991      	ldr	r1, [r2, #24]
     160:	683a      	ldr	r2, [r7, #0]
     162:	430a      	orrs	r2, r1
     164:	619a      	str	r2, [r3, #24]
			break;
     166:	e016      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     168:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16a:	4a0e      	ldr	r2, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16c:	69d1      	ldr	r1, [r2, #28]
     16e:	683a      	ldr	r2, [r7, #0]
     170:	430a      	orrs	r2, r1
     172:	61da      	str	r2, [r3, #28]
			break;
     174:	e00f      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     176:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <system_apb_clock_set_mask+0x78>)
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <system_apb_clock_set_mask+0x78>)
     17a:	6a11      	ldr	r1, [r2, #32]
     17c:	683a      	ldr	r2, [r7, #0]
     17e:	430a      	orrs	r2, r1
     180:	621a      	str	r2, [r3, #32]
			break;
     182:	e008      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     184:	4b07      	ldr	r3, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     186:	4a07      	ldr	r2, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     188:	6a51      	ldr	r1, [r2, #36]	; 0x24
     18a:	683a      	ldr	r2, [r7, #0]
     18c:	430a      	orrs	r2, r1
     18e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     190:	e001      	b.n	196 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     192:	2317      	movs	r3, #23
     194:	e000      	b.n	198 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     196:	2300      	movs	r3, #0
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}
     1a0:	0000ade0 	.word	0x0000ade0
     1a4:	40000400 	.word	0x40000400

000001a8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <system_interrupt_enable+0x28>)
     1b6:	1dfa      	adds	r2, r7, #7
     1b8:	7812      	ldrb	r2, [r2, #0]
     1ba:	0011      	movs	r1, r2
     1bc:	221f      	movs	r2, #31
     1be:	400a      	ands	r2, r1
     1c0:	2101      	movs	r1, #1
     1c2:	4091      	lsls	r1, r2
     1c4:	000a      	movs	r2, r1
     1c6:	601a      	str	r2, [r3, #0]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}
     1d0:	e000e100 	.word	0xe000e100

000001d4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1da:	4b15      	ldr	r3, [pc, #84]	; (230 <extint_is_syncing+0x5c>)
     1dc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1de:	2300      	movs	r3, #0
     1e0:	607b      	str	r3, [r7, #4]
     1e2:	e01c      	b.n	21e <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	009b      	lsls	r3, r3, #2
     1e8:	2208      	movs	r2, #8
     1ea:	4694      	mov	ip, r2
     1ec:	44bc      	add	ip, r7
     1ee:	4463      	add	r3, ip
     1f0:	3b08      	subs	r3, #8
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	685b      	ldr	r3, [r3, #4]
     1f6:	2202      	movs	r2, #2
     1f8:	4013      	ands	r3, r2
     1fa:	d10b      	bne.n	214 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	009b      	lsls	r3, r3, #2
     200:	2208      	movs	r2, #8
     202:	4694      	mov	ip, r2
     204:	44bc      	add	ip, r7
     206:	4463      	add	r3, ip
     208:	3b08      	subs	r3, #8
     20a:	681b      	ldr	r3, [r3, #0]
     20c:	685b      	ldr	r3, [r3, #4]
     20e:	2201      	movs	r2, #1
     210:	4013      	ands	r3, r2
     212:	d001      	beq.n	218 <extint_is_syncing+0x44>
			return true;
     214:	2301      	movs	r3, #1
     216:	e006      	b.n	226 <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     218:	687b      	ldr	r3, [r7, #4]
     21a:	3301      	adds	r3, #1
     21c:	607b      	str	r3, [r7, #4]
     21e:	687b      	ldr	r3, [r7, #4]
     220:	2b00      	cmp	r3, #0
     222:	d0df      	beq.n	1e4 <extint_is_syncing+0x10>
		}
	}
	return false;
     224:	2300      	movs	r3, #0
}
     226:	0018      	movs	r0, r3
     228:	46bd      	mov	sp, r7
     22a:	b002      	add	sp, #8
     22c:	bd80      	pop	{r7, pc}
     22e:	46c0      	nop			; (mov r8, r8)
     230:	40002400 	.word	0x40002400

00000234 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     234:	b580      	push	{r7, lr}
     236:	b086      	sub	sp, #24
     238:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     23a:	4b38      	ldr	r3, [pc, #224]	; (31c <_system_extint_init+0xe8>)
     23c:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
     23e:	2380      	movs	r3, #128	; 0x80
     240:	009b      	lsls	r3, r3, #2
     242:	0019      	movs	r1, r3
     244:	2000      	movs	r0, #0
     246:	4b36      	ldr	r3, [pc, #216]	; (320 <_system_extint_init+0xec>)
     248:	4798      	blx	r3

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     24a:	1d3b      	adds	r3, r7, #4
     24c:	0018      	movs	r0, r3
     24e:	4b35      	ldr	r3, [pc, #212]	; (324 <_system_extint_init+0xf0>)
     250:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     252:	1d3b      	adds	r3, r7, #4
     254:	2200      	movs	r2, #0
     256:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     258:	1d3b      	adds	r3, r7, #4
     25a:	0019      	movs	r1, r3
     25c:	2003      	movs	r0, #3
     25e:	4b32      	ldr	r3, [pc, #200]	; (328 <_system_extint_init+0xf4>)
     260:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     262:	2003      	movs	r0, #3
     264:	4b31      	ldr	r3, [pc, #196]	; (32c <_system_extint_init+0xf8>)
     266:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     268:	2300      	movs	r3, #0
     26a:	617b      	str	r3, [r7, #20]
     26c:	e018      	b.n	2a0 <_system_extint_init+0x6c>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     26e:	697b      	ldr	r3, [r7, #20]
     270:	009b      	lsls	r3, r3, #2
     272:	2218      	movs	r2, #24
     274:	4694      	mov	ip, r2
     276:	44bc      	add	ip, r7
     278:	4463      	add	r3, ip
     27a:	3b10      	subs	r3, #16
     27c:	681a      	ldr	r2, [r3, #0]
     27e:	697b      	ldr	r3, [r7, #20]
     280:	009b      	lsls	r3, r3, #2
     282:	2118      	movs	r1, #24
     284:	468c      	mov	ip, r1
     286:	44bc      	add	ip, r7
     288:	4463      	add	r3, ip
     28a:	3b10      	subs	r3, #16
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	b2db      	uxtb	r3, r3
     292:	2101      	movs	r1, #1
     294:	430b      	orrs	r3, r1
     296:	b2db      	uxtb	r3, r3
     298:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     29a:	697b      	ldr	r3, [r7, #20]
     29c:	3301      	adds	r3, #1
     29e:	617b      	str	r3, [r7, #20]
     2a0:	697b      	ldr	r3, [r7, #20]
     2a2:	2b00      	cmp	r3, #0
     2a4:	d0e3      	beq.n	26e <_system_extint_init+0x3a>
	}

	while (extint_is_syncing()) {
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	4b21      	ldr	r3, [pc, #132]	; (330 <_system_extint_init+0xfc>)
     2aa:	4798      	blx	r3
     2ac:	1e03      	subs	r3, r0, #0
     2ae:	d1fb      	bne.n	2a8 <_system_extint_init+0x74>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2b0:	2300      	movs	r3, #0
     2b2:	613b      	str	r3, [r7, #16]
     2b4:	e00e      	b.n	2d4 <_system_extint_init+0xa0>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     2b6:	693b      	ldr	r3, [r7, #16]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2218      	movs	r2, #24
     2bc:	4694      	mov	ip, r2
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b10      	subs	r3, #16
     2c4:	681a      	ldr	r2, [r3, #0]
     2c6:	7813      	ldrb	r3, [r2, #0]
     2c8:	2110      	movs	r1, #16
     2ca:	438b      	bics	r3, r1
     2cc:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2ce:	693b      	ldr	r3, [r7, #16]
     2d0:	3301      	adds	r3, #1
     2d2:	613b      	str	r3, [r7, #16]
     2d4:	693b      	ldr	r3, [r7, #16]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d0ed      	beq.n	2b6 <_system_extint_init+0x82>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2da:	230f      	movs	r3, #15
     2dc:	18fb      	adds	r3, r7, r3
     2de:	2200      	movs	r2, #0
     2e0:	701a      	strb	r2, [r3, #0]
     2e2:	e00d      	b.n	300 <_system_extint_init+0xcc>
		_extint_dev.callbacks[j] = NULL;
     2e4:	230f      	movs	r3, #15
     2e6:	18fb      	adds	r3, r7, r3
     2e8:	781a      	ldrb	r2, [r3, #0]
     2ea:	4b12      	ldr	r3, [pc, #72]	; (334 <_system_extint_init+0x100>)
     2ec:	0092      	lsls	r2, r2, #2
     2ee:	2100      	movs	r1, #0
     2f0:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2f2:	230f      	movs	r3, #15
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	230f      	movs	r3, #15
     2fa:	18fb      	adds	r3, r7, r3
     2fc:	3201      	adds	r2, #1
     2fe:	701a      	strb	r2, [r3, #0]
     300:	230f      	movs	r3, #15
     302:	18fb      	adds	r3, r7, r3
     304:	781b      	ldrb	r3, [r3, #0]
     306:	2b0f      	cmp	r3, #15
     308:	d9ec      	bls.n	2e4 <_system_extint_init+0xb0>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     30a:	2003      	movs	r0, #3
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <_system_extint_init+0x104>)
     30e:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     310:	4b0a      	ldr	r3, [pc, #40]	; (33c <_system_extint_init+0x108>)
     312:	4798      	blx	r3
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b006      	add	sp, #24
     31a:	bd80      	pop	{r7, pc}
     31c:	40002400 	.word	0x40002400
     320:	0000012d 	.word	0x0000012d
     324:	00000115 	.word	0x00000115
     328:	00007a09 	.word	0x00007a09
     32c:	00007a49 	.word	0x00007a49
     330:	000001d5 	.word	0x000001d5
     334:	200002e8 	.word	0x200002e8
     338:	000001a9 	.word	0x000001a9
     33c:	00000341 	.word	0x00000341

00000340 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     346:	4b15      	ldr	r3, [pc, #84]	; (39c <_extint_enable+0x5c>)
     348:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34a:	2300      	movs	r3, #0
     34c:	607b      	str	r3, [r7, #4]
     34e:	e018      	b.n	382 <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     350:	687b      	ldr	r3, [r7, #4]
     352:	009b      	lsls	r3, r3, #2
     354:	2208      	movs	r2, #8
     356:	4694      	mov	ip, r2
     358:	44bc      	add	ip, r7
     35a:	4463      	add	r3, ip
     35c:	3b08      	subs	r3, #8
     35e:	681a      	ldr	r2, [r3, #0]
     360:	687b      	ldr	r3, [r7, #4]
     362:	009b      	lsls	r3, r3, #2
     364:	2108      	movs	r1, #8
     366:	468c      	mov	ip, r1
     368:	44bc      	add	ip, r7
     36a:	4463      	add	r3, ip
     36c:	3b08      	subs	r3, #8
     36e:	681b      	ldr	r3, [r3, #0]
     370:	781b      	ldrb	r3, [r3, #0]
     372:	b2db      	uxtb	r3, r3
     374:	2102      	movs	r1, #2
     376:	430b      	orrs	r3, r1
     378:	b2db      	uxtb	r3, r3
     37a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	3301      	adds	r3, #1
     380:	607b      	str	r3, [r7, #4]
     382:	687b      	ldr	r3, [r7, #4]
     384:	2b00      	cmp	r3, #0
     386:	d0e3      	beq.n	350 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     388:	46c0      	nop			; (mov r8, r8)
     38a:	4b05      	ldr	r3, [pc, #20]	; (3a0 <_extint_enable+0x60>)
     38c:	4798      	blx	r3
     38e:	1e03      	subs	r3, r0, #0
     390:	d1fb      	bne.n	38a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     392:	46c0      	nop			; (mov r8, r8)
     394:	46bd      	mov	sp, r7
     396:	b002      	add	sp, #8
     398:	bd80      	pop	{r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	40002400 	.word	0x40002400
     3a0:	000001d5 	.word	0x000001d5

000003a4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	b084      	sub	sp, #16
     3a8:	af00      	add	r7, sp, #0
     3aa:	0002      	movs	r2, r0
     3ac:	1dfb      	adds	r3, r7, #7
     3ae:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     3b0:	230f      	movs	r3, #15
     3b2:	18fb      	adds	r3, r7, r3
     3b4:	1dfa      	adds	r2, r7, #7
     3b6:	7812      	ldrb	r2, [r2, #0]
     3b8:	0952      	lsrs	r2, r2, #5
     3ba:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     3bc:	230f      	movs	r3, #15
     3be:	18fb      	adds	r3, r7, r3
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d10c      	bne.n	3e0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3c6:	4b09      	ldr	r3, [pc, #36]	; (3ec <_extint_get_eic_from_channel+0x48>)
     3c8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     3ca:	230f      	movs	r3, #15
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	009b      	lsls	r3, r3, #2
     3d2:	2210      	movs	r2, #16
     3d4:	4694      	mov	ip, r2
     3d6:	44bc      	add	ip, r7
     3d8:	4463      	add	r3, ip
     3da:	3b08      	subs	r3, #8
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	e000      	b.n	3e2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     3e0:	2300      	movs	r3, #0
	}
}
     3e2:	0018      	movs	r0, r3
     3e4:	46bd      	mov	sp, r7
     3e6:	b004      	add	sp, #16
     3e8:	bd80      	pop	{r7, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	40002400 	.word	0x40002400

000003f0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b084      	sub	sp, #16
     3f4:	af00      	add	r7, sp, #0
     3f6:	0002      	movs	r2, r0
     3f8:	1dfb      	adds	r3, r7, #7
     3fa:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     3fc:	1dfb      	adds	r3, r7, #7
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	0018      	movs	r0, r3
     402:	4b0b      	ldr	r3, [pc, #44]	; (430 <extint_chan_is_detected+0x40>)
     404:	4798      	blx	r3
     406:	0003      	movs	r3, r0
     408:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     40a:	1dfb      	adds	r3, r7, #7
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	221f      	movs	r2, #31
     410:	4013      	ands	r3, r2
     412:	2201      	movs	r2, #1
     414:	409a      	lsls	r2, r3
     416:	0013      	movs	r3, r2
     418:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     41a:	68fb      	ldr	r3, [r7, #12]
     41c:	695b      	ldr	r3, [r3, #20]
     41e:	68ba      	ldr	r2, [r7, #8]
     420:	4013      	ands	r3, r2
     422:	1e5a      	subs	r2, r3, #1
     424:	4193      	sbcs	r3, r2
     426:	b2db      	uxtb	r3, r3
}
     428:	0018      	movs	r0, r3
     42a:	46bd      	mov	sp, r7
     42c:	b004      	add	sp, #16
     42e:	bd80      	pop	{r7, pc}
     430:	000003a5 	.word	0x000003a5

00000434 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     434:	b580      	push	{r7, lr}
     436:	b084      	sub	sp, #16
     438:	af00      	add	r7, sp, #0
     43a:	0002      	movs	r2, r0
     43c:	1dfb      	adds	r3, r7, #7
     43e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     440:	1dfb      	adds	r3, r7, #7
     442:	781b      	ldrb	r3, [r3, #0]
     444:	0018      	movs	r0, r3
     446:	4b09      	ldr	r3, [pc, #36]	; (46c <extint_chan_clear_detected+0x38>)
     448:	4798      	blx	r3
     44a:	0003      	movs	r3, r0
     44c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     44e:	1dfb      	adds	r3, r7, #7
     450:	781b      	ldrb	r3, [r3, #0]
     452:	221f      	movs	r2, #31
     454:	4013      	ands	r3, r2
     456:	2201      	movs	r2, #1
     458:	409a      	lsls	r2, r3
     45a:	0013      	movs	r3, r2
     45c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	68ba      	ldr	r2, [r7, #8]
     462:	615a      	str	r2, [r3, #20]
}
     464:	46c0      	nop			; (mov r8, r8)
     466:	46bd      	mov	sp, r7
     468:	b004      	add	sp, #16
     46a:	bd80      	pop	{r7, pc}
     46c:	000003a5 	.word	0x000003a5

00000470 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     470:	b580      	push	{r7, lr}
     472:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     474:	4b15      	ldr	r3, [pc, #84]	; (4cc <EIC_Handler+0x5c>)
     476:	2200      	movs	r2, #0
     478:	701a      	strb	r2, [r3, #0]
     47a:	e020      	b.n	4be <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     47c:	4b13      	ldr	r3, [pc, #76]	; (4cc <EIC_Handler+0x5c>)
     47e:	781b      	ldrb	r3, [r3, #0]
     480:	0018      	movs	r0, r3
     482:	4b13      	ldr	r3, [pc, #76]	; (4d0 <EIC_Handler+0x60>)
     484:	4798      	blx	r3
     486:	1e03      	subs	r3, r0, #0
     488:	d013      	beq.n	4b2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     48a:	4b10      	ldr	r3, [pc, #64]	; (4cc <EIC_Handler+0x5c>)
     48c:	781b      	ldrb	r3, [r3, #0]
     48e:	0018      	movs	r0, r3
     490:	4b10      	ldr	r3, [pc, #64]	; (4d4 <EIC_Handler+0x64>)
     492:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     494:	4b0d      	ldr	r3, [pc, #52]	; (4cc <EIC_Handler+0x5c>)
     496:	781b      	ldrb	r3, [r3, #0]
     498:	001a      	movs	r2, r3
     49a:	4b0f      	ldr	r3, [pc, #60]	; (4d8 <EIC_Handler+0x68>)
     49c:	0092      	lsls	r2, r2, #2
     49e:	58d3      	ldr	r3, [r2, r3]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d006      	beq.n	4b2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     4a4:	4b09      	ldr	r3, [pc, #36]	; (4cc <EIC_Handler+0x5c>)
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	001a      	movs	r2, r3
     4aa:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <EIC_Handler+0x68>)
     4ac:	0092      	lsls	r2, r2, #2
     4ae:	58d3      	ldr	r3, [r2, r3]
     4b0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4b2:	4b06      	ldr	r3, [pc, #24]	; (4cc <EIC_Handler+0x5c>)
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	3301      	adds	r3, #1
     4b8:	b2da      	uxtb	r2, r3
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <EIC_Handler+0x5c>)
     4bc:	701a      	strb	r2, [r3, #0]
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <EIC_Handler+0x5c>)
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b0f      	cmp	r3, #15
     4c4:	d9da      	bls.n	47c <EIC_Handler+0xc>
			}
		}
	}
}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	46bd      	mov	sp, r7
     4ca:	bd80      	pop	{r7, pc}
     4cc:	20000328 	.word	0x20000328
     4d0:	000003f1 	.word	0x000003f1
     4d4:	00000435 	.word	0x00000435
     4d8:	200002e8 	.word	0x200002e8

000004dc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b084      	sub	sp, #16
     4e0:	af00      	add	r7, sp, #0
     4e2:	0002      	movs	r2, r0
     4e4:	1dfb      	adds	r3, r7, #7
     4e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4e8:	230f      	movs	r3, #15
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	1dfa      	adds	r2, r7, #7
     4ee:	7812      	ldrb	r2, [r2, #0]
     4f0:	09d2      	lsrs	r2, r2, #7
     4f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4f4:	230e      	movs	r3, #14
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	1dfa      	adds	r2, r7, #7
     4fa:	7812      	ldrb	r2, [r2, #0]
     4fc:	0952      	lsrs	r2, r2, #5
     4fe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     502:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     504:	230f      	movs	r3, #15
     506:	18fb      	adds	r3, r7, r3
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d10f      	bne.n	52e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     50e:	230f      	movs	r3, #15
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	009b      	lsls	r3, r3, #2
     516:	2210      	movs	r2, #16
     518:	4694      	mov	ip, r2
     51a:	44bc      	add	ip, r7
     51c:	4463      	add	r3, ip
     51e:	3b08      	subs	r3, #8
     520:	681a      	ldr	r2, [r3, #0]
     522:	230e      	movs	r3, #14
     524:	18fb      	adds	r3, r7, r3
     526:	781b      	ldrb	r3, [r3, #0]
     528:	01db      	lsls	r3, r3, #7
     52a:	18d3      	adds	r3, r2, r3
     52c:	e000      	b.n	530 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     52e:	2300      	movs	r3, #0
	}
}
     530:	0018      	movs	r0, r3
     532:	46bd      	mov	sp, r7
     534:	b004      	add	sp, #16
     536:	bd80      	pop	{r7, pc}
     538:	40002800 	.word	0x40002800

0000053c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     53c:	b580      	push	{r7, lr}
     53e:	b082      	sub	sp, #8
     540:	af00      	add	r7, sp, #0
     542:	0002      	movs	r2, r0
     544:	1dfb      	adds	r3, r7, #7
     546:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     548:	1dfb      	adds	r3, r7, #7
     54a:	781b      	ldrb	r3, [r3, #0]
     54c:	0018      	movs	r0, r3
     54e:	4b03      	ldr	r3, [pc, #12]	; (55c <port_get_group_from_gpio_pin+0x20>)
     550:	4798      	blx	r3
     552:	0003      	movs	r3, r0
}
     554:	0018      	movs	r0, r3
     556:	46bd      	mov	sp, r7
     558:	b002      	add	sp, #8
     55a:	bd80      	pop	{r7, pc}
     55c:	000004dd 	.word	0x000004dd

00000560 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     560:	b580      	push	{r7, lr}
     562:	b082      	sub	sp, #8
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     568:	687b      	ldr	r3, [r7, #4]
     56a:	2200      	movs	r2, #0
     56c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     56e:	687b      	ldr	r3, [r7, #4]
     570:	2201      	movs	r2, #1
     572:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     574:	687b      	ldr	r3, [r7, #4]
     576:	2200      	movs	r2, #0
     578:	709a      	strb	r2, [r3, #2]
}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	46bd      	mov	sp, r7
     57e:	b002      	add	sp, #8
     580:	bd80      	pop	{r7, pc}
	...

00000584 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     584:	b580      	push	{r7, lr}
     586:	b084      	sub	sp, #16
     588:	af00      	add	r7, sp, #0
     58a:	0002      	movs	r2, r0
     58c:	1dfb      	adds	r3, r7, #7
     58e:	701a      	strb	r2, [r3, #0]
     590:	1dbb      	adds	r3, r7, #6
     592:	1c0a      	adds	r2, r1, #0
     594:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     596:	1dfb      	adds	r3, r7, #7
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	0018      	movs	r0, r3
     59c:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <port_pin_set_output_level+0x50>)
     59e:	4798      	blx	r3
     5a0:	0003      	movs	r3, r0
     5a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5a4:	1dfb      	adds	r3, r7, #7
     5a6:	781b      	ldrb	r3, [r3, #0]
     5a8:	221f      	movs	r2, #31
     5aa:	4013      	ands	r3, r2
     5ac:	2201      	movs	r2, #1
     5ae:	409a      	lsls	r2, r3
     5b0:	0013      	movs	r3, r2
     5b2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     5b4:	1dbb      	adds	r3, r7, #6
     5b6:	781b      	ldrb	r3, [r3, #0]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d003      	beq.n	5c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5bc:	68fb      	ldr	r3, [r7, #12]
     5be:	68ba      	ldr	r2, [r7, #8]
     5c0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     5c2:	e002      	b.n	5ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	68ba      	ldr	r2, [r7, #8]
     5c8:	615a      	str	r2, [r3, #20]
}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	0000053d 	.word	0x0000053d

000005d8 <system_interrupt_enable_global>:
{
     5d8:	b580      	push	{r7, lr}
     5da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <system_interrupt_enable_global+0x18>)
     5de:	2201      	movs	r2, #1
     5e0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     5e6:	b662      	cpsie	i
}
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	46bd      	mov	sp, r7
     5ec:	bd80      	pop	{r7, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	200000a2 	.word	0x200000a2

000005f4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     5f4:	b580      	push	{r7, lr}
     5f6:	b082      	sub	sp, #8
     5f8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     5fa:	1d3b      	adds	r3, r7, #4
     5fc:	0018      	movs	r0, r3
     5fe:	4b10      	ldr	r3, [pc, #64]	; (640 <init_chip_pins+0x4c>)
     600:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     602:	1d3b      	adds	r3, r7, #4
     604:	2201      	movs	r2, #1
     606:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     608:	1d3b      	adds	r3, r7, #4
     60a:	0019      	movs	r1, r3
     60c:	200d      	movs	r0, #13
     60e:	4b0d      	ldr	r3, [pc, #52]	; (644 <init_chip_pins+0x50>)
     610:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     612:	1d3b      	adds	r3, r7, #4
     614:	0019      	movs	r1, r3
     616:	2017      	movs	r0, #23
     618:	4b0a      	ldr	r3, [pc, #40]	; (644 <init_chip_pins+0x50>)
     61a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     61c:	1d3b      	adds	r3, r7, #4
     61e:	0019      	movs	r1, r3
     620:	201c      	movs	r0, #28
     622:	4b08      	ldr	r3, [pc, #32]	; (644 <init_chip_pins+0x50>)
     624:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     626:	2100      	movs	r1, #0
     628:	2017      	movs	r0, #23
     62a:	4b07      	ldr	r3, [pc, #28]	; (648 <init_chip_pins+0x54>)
     62c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     62e:	2100      	movs	r1, #0
     630:	200d      	movs	r0, #13
     632:	4b05      	ldr	r3, [pc, #20]	; (648 <init_chip_pins+0x54>)
     634:	4798      	blx	r3
}
     636:	46c0      	nop			; (mov r8, r8)
     638:	46bd      	mov	sp, r7
     63a:	b002      	add	sp, #8
     63c:	bd80      	pop	{r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	00000561 	.word	0x00000561
     644:	00006a61 	.word	0x00006a61
     648:	00000585 	.word	0x00000585

0000064c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     64c:	b580      	push	{r7, lr}
     64e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     650:	4b0c      	ldr	r3, [pc, #48]	; (684 <nm_bsp_init+0x38>)
     652:	2200      	movs	r2, #0
     654:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     656:	4b0c      	ldr	r3, [pc, #48]	; (688 <nm_bsp_init+0x3c>)
     658:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     65a:	4b0c      	ldr	r3, [pc, #48]	; (68c <nm_bsp_init+0x40>)
     65c:	681b      	ldr	r3, [r3, #0]
     65e:	2201      	movs	r2, #1
     660:	4013      	ands	r3, r2
     662:	d004      	beq.n	66e <nm_bsp_init+0x22>
     664:	4b09      	ldr	r3, [pc, #36]	; (68c <nm_bsp_init+0x40>)
     666:	681b      	ldr	r3, [r3, #0]
     668:	2202      	movs	r2, #2
     66a:	4013      	ands	r3, r2
     66c:	d101      	bne.n	672 <nm_bsp_init+0x26>
	    delay_init();
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <nm_bsp_init+0x44>)
     670:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     672:	4b08      	ldr	r3, [pc, #32]	; (694 <nm_bsp_init+0x48>)
     674:	4798      	blx	r3

	system_interrupt_enable_global();
     676:	4b08      	ldr	r3, [pc, #32]	; (698 <nm_bsp_init+0x4c>)
     678:	4798      	blx	r3

	return M2M_SUCCESS;
     67a:	2300      	movs	r3, #0
}
     67c:	0018      	movs	r0, r3
     67e:	46bd      	mov	sp, r7
     680:	bd80      	pop	{r7, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	20000124 	.word	0x20000124
     688:	000005f5 	.word	0x000005f5
     68c:	e000e010 	.word	0xe000e010
     690:	00000b71 	.word	0x00000b71
     694:	0000069d 	.word	0x0000069d
     698:	000005d9 	.word	0x000005d9

0000069c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     69c:	b580      	push	{r7, lr}
     69e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     6a0:	2100      	movs	r1, #0
     6a2:	2017      	movs	r0, #23
     6a4:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <nm_bsp_reset+0x38>)
     6a6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     6a8:	2100      	movs	r1, #0
     6aa:	200d      	movs	r0, #13
     6ac:	4b09      	ldr	r3, [pc, #36]	; (6d4 <nm_bsp_reset+0x38>)
     6ae:	4798      	blx	r3
	nm_bsp_sleep(1);
     6b0:	2001      	movs	r0, #1
     6b2:	4b09      	ldr	r3, [pc, #36]	; (6d8 <nm_bsp_reset+0x3c>)
     6b4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     6b6:	2101      	movs	r1, #1
     6b8:	2017      	movs	r0, #23
     6ba:	4b06      	ldr	r3, [pc, #24]	; (6d4 <nm_bsp_reset+0x38>)
     6bc:	4798      	blx	r3
	nm_bsp_sleep(10);
     6be:	200a      	movs	r0, #10
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <nm_bsp_reset+0x3c>)
     6c2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     6c4:	2101      	movs	r1, #1
     6c6:	200d      	movs	r0, #13
     6c8:	4b02      	ldr	r3, [pc, #8]	; (6d4 <nm_bsp_reset+0x38>)
     6ca:	4798      	blx	r3
}
     6cc:	46c0      	nop			; (mov r8, r8)
     6ce:	46bd      	mov	sp, r7
     6d0:	bd80      	pop	{r7, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000585 	.word	0x00000585
     6d8:	000006dd 	.word	0x000006dd

000006dc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     6e4:	e002      	b.n	6ec <nm_bsp_sleep+0x10>
		delay_ms(1);
     6e6:	2001      	movs	r0, #1
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <nm_bsp_sleep+0x24>)
     6ea:	4798      	blx	r3
	while (u32TimeMsec--) {
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	1e5a      	subs	r2, r3, #1
     6f0:	607a      	str	r2, [r7, #4]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d1f7      	bne.n	6e6 <nm_bsp_sleep+0xa>
	}
}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	46bd      	mov	sp, r7
     6fa:	b002      	add	sp, #8
     6fc:	bd80      	pop	{r7, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	00000bf9 	.word	0x00000bf9

00000704 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     704:	b580      	push	{r7, lr}
     706:	b082      	sub	sp, #8
     708:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     70a:	4b19      	ldr	r3, [pc, #100]	; (770 <Reset_Handler+0x6c>)
     70c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     70e:	4b19      	ldr	r3, [pc, #100]	; (774 <Reset_Handler+0x70>)
     710:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     712:	687a      	ldr	r2, [r7, #4]
     714:	683b      	ldr	r3, [r7, #0]
     716:	429a      	cmp	r2, r3
     718:	d00c      	beq.n	734 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     71a:	e007      	b.n	72c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     71c:	683b      	ldr	r3, [r7, #0]
     71e:	1d1a      	adds	r2, r3, #4
     720:	603a      	str	r2, [r7, #0]
     722:	687a      	ldr	r2, [r7, #4]
     724:	1d11      	adds	r1, r2, #4
     726:	6079      	str	r1, [r7, #4]
     728:	6812      	ldr	r2, [r2, #0]
     72a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     72c:	683a      	ldr	r2, [r7, #0]
     72e:	4b12      	ldr	r3, [pc, #72]	; (778 <Reset_Handler+0x74>)
     730:	429a      	cmp	r2, r3
     732:	d3f3      	bcc.n	71c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     734:	4b11      	ldr	r3, [pc, #68]	; (77c <Reset_Handler+0x78>)
     736:	603b      	str	r3, [r7, #0]
     738:	e004      	b.n	744 <Reset_Handler+0x40>
                *pDest++ = 0;
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	1d1a      	adds	r2, r3, #4
     73e:	603a      	str	r2, [r7, #0]
     740:	2200      	movs	r2, #0
     742:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     744:	683a      	ldr	r2, [r7, #0]
     746:	4b0e      	ldr	r3, [pc, #56]	; (780 <Reset_Handler+0x7c>)
     748:	429a      	cmp	r2, r3
     74a:	d3f6      	bcc.n	73a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     74c:	4b0d      	ldr	r3, [pc, #52]	; (784 <Reset_Handler+0x80>)
     74e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     750:	4b0d      	ldr	r3, [pc, #52]	; (788 <Reset_Handler+0x84>)
     752:	687a      	ldr	r2, [r7, #4]
     754:	21ff      	movs	r1, #255	; 0xff
     756:	438a      	bics	r2, r1
     758:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     75a:	4a0c      	ldr	r2, [pc, #48]	; (78c <Reset_Handler+0x88>)
     75c:	6853      	ldr	r3, [r2, #4]
     75e:	2180      	movs	r1, #128	; 0x80
     760:	430b      	orrs	r3, r1
     762:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <Reset_Handler+0x8c>)
     766:	4798      	blx	r3

        /* Branch to main function */
        main();
     768:	4b0a      	ldr	r3, [pc, #40]	; (794 <Reset_Handler+0x90>)
     76a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     76c:	e7fe      	b.n	76c <Reset_Handler+0x68>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	0000b644 	.word	0x0000b644
     774:	20000000 	.word	0x20000000
     778:	20000108 	.word	0x20000108
     77c:	20000108 	.word	0x20000108
     780:	200003b8 	.word	0x200003b8
     784:	00000000 	.word	0x00000000
     788:	e000ed00 	.word	0xe000ed00
     78c:	41004000 	.word	0x41004000
     790:	00009c8d 	.word	0x00009c8d
     794:	00008179 	.word	0x00008179

00000798 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     798:	b580      	push	{r7, lr}
     79a:	af00      	add	r7, sp, #0
        while (1) {
     79c:	e7fe      	b.n	79c <Dummy_Handler+0x4>
	...

000007a0 <bin2hex>:


uint8_t public_key[ATCA_PUB_KEY_SIZE];

static const char* bin2hex(const void* data, size_t data_size)
{
     7a0:	b580      	push	{r7, lr}
     7a2:	b084      	sub	sp, #16
     7a4:	af00      	add	r7, sp, #0
     7a6:	6078      	str	r0, [r7, #4]
     7a8:	6039      	str	r1, [r7, #0]
	static char buf[256];
	static char hex[] = "0123456789abcdef";
	const uint8_t* data8 = data;
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	60fb      	str	r3, [r7, #12]
	
	if (data_size*2 > sizeof(buf)-1)
     7ae:	683b      	ldr	r3, [r7, #0]
     7b0:	005b      	lsls	r3, r3, #1
     7b2:	2bff      	cmp	r3, #255	; 0xff
     7b4:	d901      	bls.n	7ba <bin2hex+0x1a>
	return "[buf too small]";
     7b6:	4b18      	ldr	r3, [pc, #96]	; (818 <bin2hex+0x78>)
     7b8:	e029      	b.n	80e <bin2hex+0x6e>
	
	for (size_t i = 0; i < data_size; i++)
     7ba:	2300      	movs	r3, #0
     7bc:	60bb      	str	r3, [r7, #8]
     7be:	e01c      	b.n	7fa <bin2hex+0x5a>
	{
		buf[i*2 + 0] = hex[(*data8) >> 4];
     7c0:	68bb      	ldr	r3, [r7, #8]
     7c2:	005b      	lsls	r3, r3, #1
     7c4:	68fa      	ldr	r2, [r7, #12]
     7c6:	7812      	ldrb	r2, [r2, #0]
     7c8:	0912      	lsrs	r2, r2, #4
     7ca:	b2d2      	uxtb	r2, r2
     7cc:	0011      	movs	r1, r2
     7ce:	4a13      	ldr	r2, [pc, #76]	; (81c <bin2hex+0x7c>)
     7d0:	5c51      	ldrb	r1, [r2, r1]
     7d2:	4a13      	ldr	r2, [pc, #76]	; (820 <bin2hex+0x80>)
     7d4:	54d1      	strb	r1, [r2, r3]
		buf[i*2 + 1] = hex[(*data8) & 0xF];
     7d6:	68bb      	ldr	r3, [r7, #8]
     7d8:	005b      	lsls	r3, r3, #1
     7da:	3301      	adds	r3, #1
     7dc:	68fa      	ldr	r2, [r7, #12]
     7de:	7812      	ldrb	r2, [r2, #0]
     7e0:	0011      	movs	r1, r2
     7e2:	220f      	movs	r2, #15
     7e4:	400a      	ands	r2, r1
     7e6:	490d      	ldr	r1, [pc, #52]	; (81c <bin2hex+0x7c>)
     7e8:	5c89      	ldrb	r1, [r1, r2]
     7ea:	4a0d      	ldr	r2, [pc, #52]	; (820 <bin2hex+0x80>)
     7ec:	54d1      	strb	r1, [r2, r3]
		data8++;
     7ee:	68fb      	ldr	r3, [r7, #12]
     7f0:	3301      	adds	r3, #1
     7f2:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < data_size; i++)
     7f4:	68bb      	ldr	r3, [r7, #8]
     7f6:	3301      	adds	r3, #1
     7f8:	60bb      	str	r3, [r7, #8]
     7fa:	68ba      	ldr	r2, [r7, #8]
     7fc:	683b      	ldr	r3, [r7, #0]
     7fe:	429a      	cmp	r2, r3
     800:	d3de      	bcc.n	7c0 <bin2hex+0x20>
	}
	buf[data_size*2] = 0;
     802:	683b      	ldr	r3, [r7, #0]
     804:	005b      	lsls	r3, r3, #1
     806:	4a06      	ldr	r2, [pc, #24]	; (820 <bin2hex+0x80>)
     808:	2100      	movs	r1, #0
     80a:	54d1      	strb	r1, [r2, r3]
	
	return buf;
     80c:	4b04      	ldr	r3, [pc, #16]	; (820 <bin2hex+0x80>)
}
     80e:	0018      	movs	r0, r3
     810:	46bd      	mov	sp, r7
     812:	b004      	add	sp, #16
     814:	bd80      	pop	{r7, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	0000af40 	.word	0x0000af40
     81c:	20000000 	.word	0x20000000
     820:	20000128 	.word	0x20000128

00000824 <eccPrintInfo>:

static int eccPrintInfo(void)
{
     824:	b590      	push	{r4, r7, lr}
     826:	b085      	sub	sp, #20
     828:	af00      	add	r7, sp, #0
	ATCA_STATUS atca_status;
	uint8_t sn[9];
	uint8_t dev_rev[4];

	atca_status = atcab_read_serial_number(sn);
     82a:	230f      	movs	r3, #15
     82c:	18fc      	adds	r4, r7, r3
     82e:	1d3b      	adds	r3, r7, #4
     830:	0018      	movs	r0, r3
     832:	4b26      	ldr	r3, [pc, #152]	; (8cc <eccPrintInfo+0xa8>)
     834:	4798      	blx	r3
     836:	0003      	movs	r3, r0
     838:	7023      	strb	r3, [r4, #0]
	if (atca_status)
     83a:	230f      	movs	r3, #15
     83c:	18fb      	adds	r3, r7, r3
     83e:	781b      	ldrb	r3, [r3, #0]
     840:	2b00      	cmp	r3, #0
     842:	d00b      	beq.n	85c <eccPrintInfo+0x38>
	{
		printf("atcab_read_serial_number() failed with ret=0x%08X\r\n", atca_status);
     844:	230f      	movs	r3, #15
     846:	18fb      	adds	r3, r7, r3
     848:	781a      	ldrb	r2, [r3, #0]
     84a:	4b21      	ldr	r3, [pc, #132]	; (8d0 <eccPrintInfo+0xac>)
     84c:	0011      	movs	r1, r2
     84e:	0018      	movs	r0, r3
     850:	4b20      	ldr	r3, [pc, #128]	; (8d4 <eccPrintInfo+0xb0>)
     852:	4798      	blx	r3
		return atca_status;
     854:	230f      	movs	r3, #15
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	e033      	b.n	8c4 <eccPrintInfo+0xa0>
	}
	
	atca_status = atcab_info(dev_rev);
     85c:	230f      	movs	r3, #15
     85e:	18fc      	adds	r4, r7, r3
     860:	003b      	movs	r3, r7
     862:	0018      	movs	r0, r3
     864:	4b1c      	ldr	r3, [pc, #112]	; (8d8 <eccPrintInfo+0xb4>)
     866:	4798      	blx	r3
     868:	0003      	movs	r3, r0
     86a:	7023      	strb	r3, [r4, #0]
	if (atca_status)
     86c:	230f      	movs	r3, #15
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
     872:	2b00      	cmp	r3, #0
     874:	d00b      	beq.n	88e <eccPrintInfo+0x6a>
	{
		printf("atcab_info() failed with ret=0x%08X\r\n", atca_status);
     876:	230f      	movs	r3, #15
     878:	18fb      	adds	r3, r7, r3
     87a:	781a      	ldrb	r2, [r3, #0]
     87c:	4b17      	ldr	r3, [pc, #92]	; (8dc <eccPrintInfo+0xb8>)
     87e:	0011      	movs	r1, r2
     880:	0018      	movs	r0, r3
     882:	4b14      	ldr	r3, [pc, #80]	; (8d4 <eccPrintInfo+0xb0>)
     884:	4798      	blx	r3
		return atca_status;
     886:	230f      	movs	r3, #15
     888:	18fb      	adds	r3, r7, r3
     88a:	781b      	ldrb	r3, [r3, #0]
     88c:	e01a      	b.n	8c4 <eccPrintInfo+0xa0>
	}

	printf("Crypto Device:\r\n");
     88e:	4b14      	ldr	r3, [pc, #80]	; (8e0 <eccPrintInfo+0xbc>)
     890:	0018      	movs	r0, r3
     892:	4b14      	ldr	r3, [pc, #80]	; (8e4 <eccPrintInfo+0xc0>)
     894:	4798      	blx	r3
	printf("  SN:          %s\r\n", bin2hex(sn, sizeof(sn)));
     896:	1d3b      	adds	r3, r7, #4
     898:	2109      	movs	r1, #9
     89a:	0018      	movs	r0, r3
     89c:	4b12      	ldr	r3, [pc, #72]	; (8e8 <eccPrintInfo+0xc4>)
     89e:	4798      	blx	r3
     8a0:	0002      	movs	r2, r0
     8a2:	4b12      	ldr	r3, [pc, #72]	; (8ec <eccPrintInfo+0xc8>)
     8a4:	0011      	movs	r1, r2
     8a6:	0018      	movs	r0, r3
     8a8:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <eccPrintInfo+0xb0>)
     8aa:	4798      	blx	r3
	printf("  DevRev:      %s\r\n", bin2hex(dev_rev, sizeof(dev_rev)));
     8ac:	003b      	movs	r3, r7
     8ae:	2104      	movs	r1, #4
     8b0:	0018      	movs	r0, r3
     8b2:	4b0d      	ldr	r3, [pc, #52]	; (8e8 <eccPrintInfo+0xc4>)
     8b4:	4798      	blx	r3
     8b6:	0002      	movs	r2, r0
     8b8:	4b0d      	ldr	r3, [pc, #52]	; (8f0 <eccPrintInfo+0xcc>)
     8ba:	0011      	movs	r1, r2
     8bc:	0018      	movs	r0, r3
     8be:	4b05      	ldr	r3, [pc, #20]	; (8d4 <eccPrintInfo+0xb0>)
     8c0:	4798      	blx	r3

	return 0;
     8c2:	2300      	movs	r3, #0
}
     8c4:	0018      	movs	r0, r3
     8c6:	46bd      	mov	sp, r7
     8c8:	b005      	add	sp, #20
     8ca:	bd90      	pop	{r4, r7, pc}
     8cc:	00003a59 	.word	0x00003a59
     8d0:	0000af50 	.word	0x0000af50
     8d4:	00009e8d 	.word	0x00009e8d
     8d8:	00003371 	.word	0x00003371
     8dc:	0000af84 	.word	0x0000af84
     8e0:	0000afac 	.word	0x0000afac
     8e4:	00009f81 	.word	0x00009f81
     8e8:	000007a1 	.word	0x000007a1
     8ec:	0000afbc 	.word	0x0000afbc
     8f0:	0000afd0 	.word	0x0000afd0

000008f4 <cryptoauthlib_init>:
 *
 * \return  The status of the CryptoAuthLib initialization
 *            ATCA_SUCCESS - Returned on a successful CryptoAuthLib initialization
 */
ATCA_STATUS cryptoauthlib_init(void)
{
     8f4:	b590      	push	{r4, r7, lr}
     8f6:	b083      	sub	sp, #12
     8f8:	af00      	add	r7, sp, #0
    ATCA_STATUS status = ATCA_NO_DEVICES;
     8fa:	1dfb      	adds	r3, r7, #7
     8fc:	22f9      	movs	r2, #249	; 0xf9
     8fe:	701a      	strb	r2, [r3, #0]
    bool device_locked = false;
     900:	1dbb      	adds	r3, r7, #6
     902:	2200      	movs	r2, #0
     904:	701a      	strb	r2, [r3, #0]
    uint8_t revision[INFO_SIZE];
    
    // Initialize the CryptoAuthLib library
    cfg_ateccx08a_i2c_default.atcai2c.slave_address = AWS_ECC508A_I2C_ADDRESS;
     906:	4b1f      	ldr	r3, [pc, #124]	; (984 <cryptoauthlib_init+0x90>)
     908:	22b0      	movs	r2, #176	; 0xb0
     90a:	711a      	strb	r2, [r3, #4]
    
    do 
    {
        status = atcab_init(&cfg_ateccx08a_i2c_default);
     90c:	1dfc      	adds	r4, r7, #7
     90e:	4b1d      	ldr	r3, [pc, #116]	; (984 <cryptoauthlib_init+0x90>)
     910:	0018      	movs	r0, r3
     912:	4b1d      	ldr	r3, [pc, #116]	; (988 <cryptoauthlib_init+0x94>)
     914:	4798      	blx	r3
     916:	0003      	movs	r3, r0
     918:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
     91a:	1dfb      	adds	r3, r7, #7
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b00      	cmp	r3, #0
     920:	d004      	beq.n	92c <cryptoauthlib_init+0x38>
        {
            printf("The CryptoAuthLib library failed to initialize.");
     922:	4b1a      	ldr	r3, [pc, #104]	; (98c <cryptoauthlib_init+0x98>)
     924:	0018      	movs	r0, r3
     926:	4b1a      	ldr	r3, [pc, #104]	; (990 <cryptoauthlib_init+0x9c>)
     928:	4798      	blx	r3
            
            // Break the do/while loop
            break;
     92a:	e025      	b.n	978 <cryptoauthlib_init+0x84>
        }

        // Force the ATECC508A to sleep
        atcab_wakeup();
     92c:	4b19      	ldr	r3, [pc, #100]	; (994 <cryptoauthlib_init+0xa0>)
     92e:	4798      	blx	r3
        atcab_sleep();
     930:	4b19      	ldr	r3, [pc, #100]	; (998 <cryptoauthlib_init+0xa4>)
     932:	4798      	blx	r3
        
        // Check to make sure the ATECC508A Config zone is locked    
	    status = atcab_is_locked(LOCK_ZONE_CONFIG, &device_locked);
     934:	1dfc      	adds	r4, r7, #7
     936:	1dbb      	adds	r3, r7, #6
     938:	0019      	movs	r1, r3
     93a:	2000      	movs	r0, #0
     93c:	4b17      	ldr	r3, [pc, #92]	; (99c <cryptoauthlib_init+0xa8>)
     93e:	4798      	blx	r3
     940:	0003      	movs	r3, r0
     942:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
     944:	1dfb      	adds	r3, r7, #7
     946:	781b      	ldrb	r3, [r3, #0]
     948:	2b00      	cmp	r3, #0
     94a:	d004      	beq.n	956 <cryptoauthlib_init+0x62>
        {
            printf("The ATECC508A device is not configured correctly.");
     94c:	4b14      	ldr	r3, [pc, #80]	; (9a0 <cryptoauthlib_init+0xac>)
     94e:	0018      	movs	r0, r3
     950:	4b0f      	ldr	r3, [pc, #60]	; (990 <cryptoauthlib_init+0x9c>)
     952:	4798      	blx	r3
            
            // Break the do/while loop
            break;
     954:	e010      	b.n	978 <cryptoauthlib_init+0x84>
        }
		
		if(!device_locked)
     956:	1dbb      	adds	r3, r7, #6
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	2201      	movs	r2, #1
     95c:	4053      	eors	r3, r2
     95e:	b2db      	uxtb	r3, r3
     960:	2b00      	cmp	r3, #0
     962:	d004      	beq.n	96e <cryptoauthlib_init+0x7a>
        {
	        printf("The ATECC508A device data zone is no configured. \r\n");
     964:	4b0f      	ldr	r3, [pc, #60]	; (9a4 <cryptoauthlib_init+0xb0>)
     966:	0018      	movs	r0, r3
     968:	4b0f      	ldr	r3, [pc, #60]	; (9a8 <cryptoauthlib_init+0xb4>)
     96a:	4798      	blx	r3
	        // Break the do/while loop
	        break;
     96c:	e004      	b.n	978 <cryptoauthlib_init+0x84>
        }

		eccPrintInfo();
     96e:	4b0f      	ldr	r3, [pc, #60]	; (9ac <cryptoauthlib_init+0xb8>)
     970:	4798      	blx	r3
		
        status = ATCA_SUCCESS;
     972:	1dfb      	adds	r3, r7, #7
     974:	2200      	movs	r2, #0
     976:	701a      	strb	r2, [r3, #0]
    } while (false);    
    
    return status;
     978:	1dfb      	adds	r3, r7, #7
     97a:	781b      	ldrb	r3, [r3, #0]
}
     97c:	0018      	movs	r0, r3
     97e:	46bd      	mov	sp, r7
     980:	b003      	add	sp, #12
     982:	bd90      	pop	{r4, r7, pc}
     984:	2000001c 	.word	0x2000001c
     988:	00003229 	.word	0x00003229
     98c:	0000aff4 	.word	0x0000aff4
     990:	00009e8d 	.word	0x00009e8d
     994:	000032cd 	.word	0x000032cd
     998:	0000332d 	.word	0x0000332d
     99c:	00003bc9 	.word	0x00003bc9
     9a0:	0000b024 	.word	0x0000b024
     9a4:	0000b058 	.word	0x0000b058
     9a8:	00009f81 	.word	0x00009f81
     9ac:	00000825 	.word	0x00000825

000009b0 <genKeyPair>:
    return atca_status;	
}


ATCA_STATUS genKeyPair(void)
{
     9b0:	b590      	push	{r4, r7, lr}
     9b2:	b083      	sub	sp, #12
     9b4:	af00      	add	r7, sp, #0
    ATCA_STATUS atca_status = ATCA_STATUS_UNKNOWN;
     9b6:	1cfb      	adds	r3, r7, #3
     9b8:	22d5      	movs	r2, #213	; 0xd5
     9ba:	701a      	strb	r2, [r3, #0]
	
    // Generate a new ATECC508A Device ECC-p256 key pair
    memset(&public_key[0], 0, sizeof(public_key));
     9bc:	4b1b      	ldr	r3, [pc, #108]	; (a2c <genKeyPair+0x7c>)
     9be:	2240      	movs	r2, #64	; 0x40
     9c0:	2100      	movs	r1, #0
     9c2:	0018      	movs	r0, r3
     9c4:	4b1a      	ldr	r3, [pc, #104]	; (a30 <genKeyPair+0x80>)
     9c6:	4798      	blx	r3
    atca_status = atcab_genkey(DEVICE_KEY_SLOT, public_key);
     9c8:	1cfc      	adds	r4, r7, #3
     9ca:	4b18      	ldr	r3, [pc, #96]	; (a2c <genKeyPair+0x7c>)
     9cc:	0019      	movs	r1, r3
     9ce:	2000      	movs	r0, #0
     9d0:	4b18      	ldr	r3, [pc, #96]	; (a34 <genKeyPair+0x84>)
     9d2:	4798      	blx	r3
     9d4:	0003      	movs	r3, r0
     9d6:	7023      	strb	r3, [r4, #0]
    if (atca_status == ATCA_SUCCESS)
     9d8:	1cfb      	adds	r3, r7, #3
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	2b00      	cmp	r3, #0
     9de:	d11b      	bne.n	a18 <genKeyPair+0x68>
    {
		printf("\r\npublic_key: Begin\r\n");
     9e0:	4b15      	ldr	r3, [pc, #84]	; (a38 <genKeyPair+0x88>)
     9e2:	0018      	movs	r0, r3
     9e4:	4b15      	ldr	r3, [pc, #84]	; (a3c <genKeyPair+0x8c>)
     9e6:	4798      	blx	r3
		for(int i =0; i<ATCA_PUB_KEY_SIZE;i++)
     9e8:	2300      	movs	r3, #0
     9ea:	607b      	str	r3, [r7, #4]
     9ec:	e00c      	b.n	a08 <genKeyPair+0x58>
			printf("%x",public_key[i]);
     9ee:	4a0f      	ldr	r2, [pc, #60]	; (a2c <genKeyPair+0x7c>)
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	18d3      	adds	r3, r2, r3
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	001a      	movs	r2, r3
     9f8:	4b11      	ldr	r3, [pc, #68]	; (a40 <genKeyPair+0x90>)
     9fa:	0011      	movs	r1, r2
     9fc:	0018      	movs	r0, r3
     9fe:	4b11      	ldr	r3, [pc, #68]	; (a44 <genKeyPair+0x94>)
     a00:	4798      	blx	r3
		for(int i =0; i<ATCA_PUB_KEY_SIZE;i++)
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	3301      	adds	r3, #1
     a06:	607b      	str	r3, [r7, #4]
     a08:	687b      	ldr	r3, [r7, #4]
     a0a:	2b3f      	cmp	r3, #63	; 0x3f
     a0c:	ddef      	ble.n	9ee <genKeyPair+0x3e>
		
		printf("\r\npublic_key: end\r\n");
     a0e:	4b0e      	ldr	r3, [pc, #56]	; (a48 <genKeyPair+0x98>)
     a10:	0018      	movs	r0, r3
     a12:	4b0a      	ldr	r3, [pc, #40]	; (a3c <genKeyPair+0x8c>)
     a14:	4798      	blx	r3
     a16:	e003      	b.n	a20 <genKeyPair+0x70>
	}
	else
		printf("failed to generate key pair\r\n");
     a18:	4b0c      	ldr	r3, [pc, #48]	; (a4c <genKeyPair+0x9c>)
     a1a:	0018      	movs	r0, r3
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <genKeyPair+0x8c>)
     a1e:	4798      	blx	r3
}
     a20:	46c0      	nop			; (mov r8, r8)
     a22:	0018      	movs	r0, r3
     a24:	46bd      	mov	sp, r7
     a26:	b003      	add	sp, #12
     a28:	bd90      	pop	{r4, r7, pc}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	2000032c 	.word	0x2000032c
     a30:	00009d2d 	.word	0x00009d2d
     a34:	000038ad 	.word	0x000038ad
     a38:	0000b08c 	.word	0x0000b08c
     a3c:	00009f81 	.word	0x00009f81
     a40:	0000b0a4 	.word	0x0000b0a4
     a44:	00009e8d 	.word	0x00009e8d
     a48:	0000b0a8 	.word	0x0000b0a8
     a4c:	0000b0d8 	.word	0x0000b0d8

00000a50 <genDeviceCSR>:

ATCA_STATUS genDeviceCSR(void)
{
     a50:	b580      	push	{r7, lr}
     a52:	4f2e      	ldr	r7, [pc, #184]	; (b0c <genDeviceCSR+0xbc>)
     a54:	44bd      	add	sp, r7
     a56:	af00      	add	r7, sp, #0
    ATCA_STATUS atca_status = ATCA_STATUS_UNKNOWN;
     a58:	4b2d      	ldr	r3, [pc, #180]	; (b10 <genDeviceCSR+0xc0>)
     a5a:	18fb      	adds	r3, r7, r3
     a5c:	22d5      	movs	r2, #213	; 0xd5
     a5e:	701a      	strb	r2, [r3, #0]
    uint8_t csr_buffer[1500];
    size_t csr_buffer_length = 0;
     a60:	2300      	movs	r3, #0
     a62:	603b      	str	r3, [r7, #0]
        
	// Generate the AWS IoT device CSR
    csr_buffer_length = sizeof(csr_buffer);
     a64:	4b2b      	ldr	r3, [pc, #172]	; (b14 <genDeviceCSR+0xc4>)
     a66:	603b      	str	r3, [r7, #0]
    atca_status = atcacert_create_csr(&g_csr_def_3_device, csr_buffer, &csr_buffer_length);
     a68:	003a      	movs	r2, r7
     a6a:	1d39      	adds	r1, r7, #4
     a6c:	4b2a      	ldr	r3, [pc, #168]	; (b18 <genDeviceCSR+0xc8>)
     a6e:	0018      	movs	r0, r3
     a70:	4b2a      	ldr	r3, [pc, #168]	; (b1c <genDeviceCSR+0xcc>)
     a72:	4798      	blx	r3
     a74:	0002      	movs	r2, r0
     a76:	4b26      	ldr	r3, [pc, #152]	; (b10 <genDeviceCSR+0xc0>)
     a78:	18fb      	adds	r3, r7, r3
     a7a:	701a      	strb	r2, [r3, #0]
        
    if (atca_status == ATCA_SUCCESS)
     a7c:	4b24      	ldr	r3, [pc, #144]	; (b10 <genDeviceCSR+0xc0>)
     a7e:	18fb      	adds	r3, r7, r3
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d135      	bne.n	af2 <genDeviceCSR+0xa2>
    {
		printf("\r\ncsr: Begin, length = %d\r\n",csr_buffer_length);
     a86:	683a      	ldr	r2, [r7, #0]
     a88:	4b25      	ldr	r3, [pc, #148]	; (b20 <genDeviceCSR+0xd0>)
     a8a:	0011      	movs	r1, r2
     a8c:	0018      	movs	r0, r3
     a8e:	4b25      	ldr	r3, [pc, #148]	; (b24 <genDeviceCSR+0xd4>)
     a90:	4798      	blx	r3
	    for(int i =0; i<csr_buffer_length;i++)
     a92:	2300      	movs	r3, #0
     a94:	22bc      	movs	r2, #188	; 0xbc
     a96:	00d2      	lsls	r2, r2, #3
     a98:	18ba      	adds	r2, r7, r2
     a9a:	6013      	str	r3, [r2, #0]
     a9c:	e019      	b.n	ad2 <genDeviceCSR+0x82>
			printf("%02x",csr_buffer[i]);
     a9e:	4b22      	ldr	r3, [pc, #136]	; (b28 <genDeviceCSR+0xd8>)
     aa0:	22bd      	movs	r2, #189	; 0xbd
     aa2:	00d2      	lsls	r2, r2, #3
     aa4:	18ba      	adds	r2, r7, r2
     aa6:	18d2      	adds	r2, r2, r3
     aa8:	23bc      	movs	r3, #188	; 0xbc
     aaa:	00db      	lsls	r3, r3, #3
     aac:	18fb      	adds	r3, r7, r3
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	18d3      	adds	r3, r2, r3
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	001a      	movs	r2, r3
     ab6:	4b1d      	ldr	r3, [pc, #116]	; (b2c <genDeviceCSR+0xdc>)
     ab8:	0011      	movs	r1, r2
     aba:	0018      	movs	r0, r3
     abc:	4b19      	ldr	r3, [pc, #100]	; (b24 <genDeviceCSR+0xd4>)
     abe:	4798      	blx	r3
	    for(int i =0; i<csr_buffer_length;i++)
     ac0:	23bc      	movs	r3, #188	; 0xbc
     ac2:	00db      	lsls	r3, r3, #3
     ac4:	18fb      	adds	r3, r7, r3
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	3301      	adds	r3, #1
     aca:	22bc      	movs	r2, #188	; 0xbc
     acc:	00d2      	lsls	r2, r2, #3
     ace:	18ba      	adds	r2, r7, r2
     ad0:	6013      	str	r3, [r2, #0]
     ad2:	23bc      	movs	r3, #188	; 0xbc
     ad4:	00db      	lsls	r3, r3, #3
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	681a      	ldr	r2, [r3, #0]
     ada:	683b      	ldr	r3, [r7, #0]
     adc:	429a      	cmp	r2, r3
     ade:	d3de      	bcc.n	a9e <genDeviceCSR+0x4e>
		
		printf("\r\ncsr: end\r\n");
     ae0:	4b13      	ldr	r3, [pc, #76]	; (b30 <genDeviceCSR+0xe0>)
     ae2:	0018      	movs	r0, r3
     ae4:	4b13      	ldr	r3, [pc, #76]	; (b34 <genDeviceCSR+0xe4>)
     ae6:	4798      	blx	r3
		
		atca_status = ATCA_SUCCESS;
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <genDeviceCSR+0xc0>)
     aea:	18fb      	adds	r3, r7, r3
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
     af0:	e003      	b.n	afa <genDeviceCSR+0xaa>
    }
    else
		printf("failed to generate device CSR\r\n");
     af2:	4b11      	ldr	r3, [pc, #68]	; (b38 <genDeviceCSR+0xe8>)
     af4:	0018      	movs	r0, r3
     af6:	4b0f      	ldr	r3, [pc, #60]	; (b34 <genDeviceCSR+0xe4>)
     af8:	4798      	blx	r3
		
	return atca_status;
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <genDeviceCSR+0xc0>)
     afc:	18fb      	adds	r3, r7, r3
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	0018      	movs	r0, r3
     b02:	46bd      	mov	sp, r7
     b04:	23bd      	movs	r3, #189	; 0xbd
     b06:	00db      	lsls	r3, r3, #3
     b08:	449d      	add	sp, r3
     b0a:	bd80      	pop	{r7, pc}
     b0c:	fffffa18 	.word	0xfffffa18
     b10:	000005e7 	.word	0x000005e7
     b14:	000005dc 	.word	0x000005dc
     b18:	0000aef4 	.word	0x0000aef4
     b1c:	00001eed 	.word	0x00001eed
     b20:	0000b0f8 	.word	0x0000b0f8
     b24:	00009e8d 	.word	0x00009e8d
     b28:	fffffa1c 	.word	0xfffffa1c
     b2c:	0000b114 	.word	0x0000b114
     b30:	0000b11c 	.word	0x0000b11c
     b34:	00009f81 	.word	0x00009f81
     b38:	0000b128 	.word	0x0000b128

00000b3c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	b082      	sub	sp, #8
     b40:	af00      	add	r7, sp, #0
     b42:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	2b00      	cmp	r3, #0
     b48:	d00c      	beq.n	b64 <delay_cycles+0x28>
		SysTick->LOAD = n;
     b4a:	4b08      	ldr	r3, [pc, #32]	; (b6c <delay_cycles+0x30>)
     b4c:	687a      	ldr	r2, [r7, #4]
     b4e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     b50:	4b06      	ldr	r3, [pc, #24]	; (b6c <delay_cycles+0x30>)
     b52:	2200      	movs	r2, #0
     b54:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <delay_cycles+0x30>)
     b5a:	681a      	ldr	r2, [r3, #0]
     b5c:	2380      	movs	r3, #128	; 0x80
     b5e:	025b      	lsls	r3, r3, #9
     b60:	4013      	ands	r3, r2
     b62:	d0f9      	beq.n	b58 <delay_cycles+0x1c>
		};
	}
}
     b64:	46c0      	nop			; (mov r8, r8)
     b66:	46bd      	mov	sp, r7
     b68:	b002      	add	sp, #8
     b6a:	bd80      	pop	{r7, pc}
     b6c:	e000e010 	.word	0xe000e010

00000b70 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b70:	b580      	push	{r7, lr}
     b72:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b74:	2000      	movs	r0, #0
     b76:	4b0f      	ldr	r3, [pc, #60]	; (bb4 <delay_init+0x44>)
     b78:	4798      	blx	r3
     b7a:	0002      	movs	r2, r0
     b7c:	4b0e      	ldr	r3, [pc, #56]	; (bb8 <delay_init+0x48>)
     b7e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     b80:	4b0d      	ldr	r3, [pc, #52]	; (bb8 <delay_init+0x48>)
     b82:	6818      	ldr	r0, [r3, #0]
     b84:	4b0d      	ldr	r3, [pc, #52]	; (bbc <delay_init+0x4c>)
     b86:	22fa      	movs	r2, #250	; 0xfa
     b88:	0091      	lsls	r1, r2, #2
     b8a:	4798      	blx	r3
     b8c:	0003      	movs	r3, r0
     b8e:	001a      	movs	r2, r3
     b90:	4b09      	ldr	r3, [pc, #36]	; (bb8 <delay_init+0x48>)
     b92:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     b94:	4b08      	ldr	r3, [pc, #32]	; (bb8 <delay_init+0x48>)
     b96:	6818      	ldr	r0, [r3, #0]
     b98:	4b08      	ldr	r3, [pc, #32]	; (bbc <delay_init+0x4c>)
     b9a:	22fa      	movs	r2, #250	; 0xfa
     b9c:	0091      	lsls	r1, r2, #2
     b9e:	4798      	blx	r3
     ba0:	0003      	movs	r3, r0
     ba2:	001a      	movs	r2, r3
     ba4:	4b06      	ldr	r3, [pc, #24]	; (bc0 <delay_init+0x50>)
     ba6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <delay_init+0x54>)
     baa:	2205      	movs	r2, #5
     bac:	601a      	str	r2, [r3, #0]
}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	46bd      	mov	sp, r7
     bb2:	bd80      	pop	{r7, pc}
     bb4:	00007949 	.word	0x00007949
     bb8:	20000014 	.word	0x20000014
     bbc:	00008259 	.word	0x00008259
     bc0:	20000018 	.word	0x20000018
     bc4:	e000e010 	.word	0xe000e010

00000bc8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     bc8:	b580      	push	{r7, lr}
     bca:	b082      	sub	sp, #8
     bcc:	af00      	add	r7, sp, #0
     bce:	6078      	str	r0, [r7, #4]
	while (n--) {
     bd0:	e004      	b.n	bdc <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <delay_cycles_us+0x28>)
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	0018      	movs	r0, r3
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <delay_cycles_us+0x2c>)
     bda:	4798      	blx	r3
	while (n--) {
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	1e5a      	subs	r2, r3, #1
     be0:	607a      	str	r2, [r7, #4]
     be2:	2b00      	cmp	r3, #0
     be4:	d1f5      	bne.n	bd2 <delay_cycles_us+0xa>
	}
}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	46bd      	mov	sp, r7
     bea:	b002      	add	sp, #8
     bec:	bd80      	pop	{r7, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	20000018 	.word	0x20000018
     bf4:	00000b3d 	.word	0x00000b3d

00000bf8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	b082      	sub	sp, #8
     bfc:	af00      	add	r7, sp, #0
     bfe:	6078      	str	r0, [r7, #4]
	while (n--) {
     c00:	e004      	b.n	c0c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c02:	4b07      	ldr	r3, [pc, #28]	; (c20 <delay_cycles_ms+0x28>)
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	0018      	movs	r0, r3
     c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <delay_cycles_ms+0x2c>)
     c0a:	4798      	blx	r3
	while (n--) {
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	1e5a      	subs	r2, r3, #1
     c10:	607a      	str	r2, [r7, #4]
     c12:	2b00      	cmp	r3, #0
     c14:	d1f5      	bne.n	c02 <delay_cycles_ms+0xa>
	}
}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	46bd      	mov	sp, r7
     c1a:	b002      	add	sp, #8
     c1c:	bd80      	pop	{r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	20000014 	.word	0x20000014
     c24:	00000b3d 	.word	0x00000b3d

00000c28 <system_gclk_chan_get_config_defaults>:
{
     c28:	b580      	push	{r7, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	af00      	add	r7, sp, #0
     c2e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	2200      	movs	r2, #0
     c34:	701a      	strb	r2, [r3, #0]
}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	46bd      	mov	sp, r7
     c3a:	b002      	add	sp, #8
     c3c:	bd80      	pop	{r7, pc}
	...

00000c40 <system_apb_clock_set_mask>:
{
     c40:	b580      	push	{r7, lr}
     c42:	b082      	sub	sp, #8
     c44:	af00      	add	r7, sp, #0
     c46:	0002      	movs	r2, r0
     c48:	6039      	str	r1, [r7, #0]
     c4a:	1dfb      	adds	r3, r7, #7
     c4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     c4e:	1dfb      	adds	r3, r7, #7
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b04      	cmp	r3, #4
     c54:	d827      	bhi.n	ca6 <system_apb_clock_set_mask+0x66>
     c56:	009a      	lsls	r2, r3, #2
     c58:	4b16      	ldr	r3, [pc, #88]	; (cb4 <system_apb_clock_set_mask+0x74>)
     c5a:	18d3      	adds	r3, r2, r3
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     c60:	4b15      	ldr	r3, [pc, #84]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c62:	4a15      	ldr	r2, [pc, #84]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c64:	6951      	ldr	r1, [r2, #20]
     c66:	683a      	ldr	r2, [r7, #0]
     c68:	430a      	orrs	r2, r1
     c6a:	615a      	str	r2, [r3, #20]
			break;
     c6c:	e01d      	b.n	caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     c6e:	4b12      	ldr	r3, [pc, #72]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c70:	4a11      	ldr	r2, [pc, #68]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c72:	6991      	ldr	r1, [r2, #24]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	430a      	orrs	r2, r1
     c78:	619a      	str	r2, [r3, #24]
			break;
     c7a:	e016      	b.n	caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     c7c:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c7e:	4a0e      	ldr	r2, [pc, #56]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c80:	69d1      	ldr	r1, [r2, #28]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	430a      	orrs	r2, r1
     c86:	61da      	str	r2, [r3, #28]
			break;
     c88:	e00f      	b.n	caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     c8a:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c8c:	4a0a      	ldr	r2, [pc, #40]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c8e:	6a11      	ldr	r1, [r2, #32]
     c90:	683a      	ldr	r2, [r7, #0]
     c92:	430a      	orrs	r2, r1
     c94:	621a      	str	r2, [r3, #32]
			break;
     c96:	e008      	b.n	caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     c98:	4b07      	ldr	r3, [pc, #28]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c9a:	4a07      	ldr	r2, [pc, #28]	; (cb8 <system_apb_clock_set_mask+0x78>)
     c9c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     c9e:	683a      	ldr	r2, [r7, #0]
     ca0:	430a      	orrs	r2, r1
     ca2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     ca4:	e001      	b.n	caa <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     ca6:	2317      	movs	r3, #23
     ca8:	e000      	b.n	cac <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     caa:	2300      	movs	r3, #0
}
     cac:	0018      	movs	r0, r3
     cae:	46bd      	mov	sp, r7
     cb0:	b002      	add	sp, #8
     cb2:	bd80      	pop	{r7, pc}
     cb4:	0000b148 	.word	0x0000b148
     cb8:	40000400 	.word	0x40000400

00000cbc <system_pinmux_get_config_defaults>:
{
     cbc:	b580      	push	{r7, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	af00      	add	r7, sp, #0
     cc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	2280      	movs	r2, #128	; 0x80
     cc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	2200      	movs	r2, #0
     cce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	2201      	movs	r2, #1
     cd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	2200      	movs	r2, #0
     cda:	70da      	strb	r2, [r3, #3]
}
     cdc:	46c0      	nop			; (mov r8, r8)
     cde:	46bd      	mov	sp, r7
     ce0:	b002      	add	sp, #8
     ce2:	bd80      	pop	{r7, pc}

00000ce4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ce8:	4b05      	ldr	r3, [pc, #20]	; (d00 <system_is_debugger_present+0x1c>)
     cea:	789b      	ldrb	r3, [r3, #2]
     cec:	b2db      	uxtb	r3, r3
     cee:	001a      	movs	r2, r3
     cf0:	2302      	movs	r3, #2
     cf2:	4013      	ands	r3, r2
     cf4:	1e5a      	subs	r2, r3, #1
     cf6:	4193      	sbcs	r3, r2
     cf8:	b2db      	uxtb	r3, r3
}
     cfa:	0018      	movs	r0, r3
     cfc:	46bd      	mov	sp, r7
     cfe:	bd80      	pop	{r7, pc}
     d00:	41002000 	.word	0x41002000

00000d04 <system_interrupt_enter_critical_section>:
{
     d04:	b580      	push	{r7, lr}
     d06:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <system_interrupt_enter_critical_section+0x10>)
     d0a:	4798      	blx	r3
}
     d0c:	46c0      	nop			; (mov r8, r8)
     d0e:	46bd      	mov	sp, r7
     d10:	bd80      	pop	{r7, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	00006acd 	.word	0x00006acd

00000d18 <system_interrupt_leave_critical_section>:
{
     d18:	b580      	push	{r7, lr}
     d1a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     d1c:	4b02      	ldr	r3, [pc, #8]	; (d28 <system_interrupt_leave_critical_section+0x10>)
     d1e:	4798      	blx	r3
}
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	46bd      	mov	sp, r7
     d24:	bd80      	pop	{r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00006b21 	.word	0x00006b21

00000d2c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
     d32:	0002      	movs	r2, r0
     d34:	1dfb      	adds	r3, r7, #7
     d36:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d38:	4a07      	ldr	r2, [pc, #28]	; (d58 <system_interrupt_disable+0x2c>)
     d3a:	1dfb      	adds	r3, r7, #7
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	0019      	movs	r1, r3
     d40:	231f      	movs	r3, #31
     d42:	400b      	ands	r3, r1
     d44:	2101      	movs	r1, #1
     d46:	4099      	lsls	r1, r3
     d48:	000b      	movs	r3, r1
     d4a:	0019      	movs	r1, r3
     d4c:	2380      	movs	r3, #128	; 0x80
     d4e:	50d1      	str	r1, [r2, r3]
}
     d50:	46c0      	nop			; (mov r8, r8)
     d52:	46bd      	mov	sp, r7
     d54:	b002      	add	sp, #8
     d56:	bd80      	pop	{r7, pc}
     d58:	e000e100 	.word	0xe000e100

00000d5c <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	69db      	ldr	r3, [r3, #28]
     d6e:	2207      	movs	r2, #7
     d70:	4013      	ands	r3, r2
     d72:	1e5a      	subs	r2, r3, #1
     d74:	4193      	sbcs	r3, r2
     d76:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     d78:	0018      	movs	r0, r3
     d7a:	46bd      	mov	sp, r7
     d7c:	b004      	add	sp, #16
     d7e:	bd80      	pop	{r7, pc}

00000d80 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     d80:	b580      	push	{r7, lr}
     d82:	b082      	sub	sp, #8
     d84:	af00      	add	r7, sp, #0
     d86:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     d88:	46c0      	nop			; (mov r8, r8)
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	0018      	movs	r0, r3
     d8e:	4b04      	ldr	r3, [pc, #16]	; (da0 <_i2c_master_wait_for_sync+0x20>)
     d90:	4798      	blx	r3
     d92:	1e03      	subs	r3, r0, #0
     d94:	d1f9      	bne.n	d8a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	46bd      	mov	sp, r7
     d9a:	b002      	add	sp, #8
     d9c:	bd80      	pop	{r7, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00000d5d 	.word	0x00000d5d

00000da4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
     da4:	b580      	push	{r7, lr}
     da6:	b084      	sub	sp, #16
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	0018      	movs	r0, r3
     db8:	4b0d      	ldr	r3, [pc, #52]	; (df0 <i2c_master_disable+0x4c>)
     dba:	4798      	blx	r3
     dbc:	0003      	movs	r3, r0
     dbe:	0018      	movs	r0, r3
     dc0:	4b0c      	ldr	r3, [pc, #48]	; (df4 <i2c_master_disable+0x50>)
     dc2:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	0018      	movs	r0, r3
     dc8:	4b0b      	ldr	r3, [pc, #44]	; (df8 <i2c_master_disable+0x54>)
     dca:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	2283      	movs	r2, #131	; 0x83
     dd0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	2283      	movs	r2, #131	; 0x83
     dd6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     dd8:	68fb      	ldr	r3, [r7, #12]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2202      	movs	r2, #2
     dde:	4393      	bics	r3, r2
     de0:	001a      	movs	r2, r3
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	601a      	str	r2, [r3, #0]

}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	46bd      	mov	sp, r7
     dea:	b004      	add	sp, #16
     dec:	bd80      	pop	{r7, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00006965 	.word	0x00006965
     df4:	00000d2d 	.word	0x00000d2d
     df8:	00000d81 	.word	0x00000d81

00000dfc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfe:	b097      	sub	sp, #92	; 0x5c
     e00:	af00      	add	r7, sp, #0
     e02:	6178      	str	r0, [r7, #20]
     e04:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     e06:	2300      	movs	r3, #0
     e08:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     e0a:	2300      	movs	r3, #0
     e0c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     e0e:	2300      	movs	r3, #0
     e10:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     e12:	233b      	movs	r3, #59	; 0x3b
     e14:	2210      	movs	r2, #16
     e16:	4694      	mov	ip, r2
     e18:	44bc      	add	ip, r7
     e1a:	4463      	add	r3, ip
     e1c:	2200      	movs	r2, #0
     e1e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e20:	697b      	ldr	r3, [r7, #20]
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     e26:	697b      	ldr	r3, [r7, #20]
     e28:	681b      	ldr	r3, [r3, #0]
     e2a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e2c:	2323      	movs	r3, #35	; 0x23
     e2e:	2210      	movs	r2, #16
     e30:	18ba      	adds	r2, r7, r2
     e32:	18d4      	adds	r4, r2, r3
     e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e36:	0018      	movs	r0, r3
     e38:	4bc0      	ldr	r3, [pc, #768]	; (113c <_i2c_master_set_config+0x340>)
     e3a:	4798      	blx	r3
     e3c:	0003      	movs	r3, r0
     e3e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e40:	230c      	movs	r3, #12
     e42:	2210      	movs	r2, #16
     e44:	4694      	mov	ip, r2
     e46:	44bc      	add	ip, r7
     e48:	4463      	add	r3, ip
     e4a:	0018      	movs	r0, r3
     e4c:	4bbc      	ldr	r3, [pc, #752]	; (1140 <_i2c_master_set_config+0x344>)
     e4e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     e50:	693b      	ldr	r3, [r7, #16]
     e52:	69db      	ldr	r3, [r3, #28]
     e54:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     e56:	693b      	ldr	r3, [r7, #16]
     e58:	6a1b      	ldr	r3, [r3, #32]
     e5a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e5e:	2b00      	cmp	r3, #0
     e60:	d106      	bne.n	e70 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e64:	2100      	movs	r1, #0
     e66:	0018      	movs	r0, r3
     e68:	4bb6      	ldr	r3, [pc, #728]	; (1144 <_i2c_master_set_config+0x348>)
     e6a:	4798      	blx	r3
     e6c:	0003      	movs	r3, r0
     e6e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e72:	b2da      	uxtb	r2, r3
     e74:	230c      	movs	r3, #12
     e76:	2110      	movs	r1, #16
     e78:	468c      	mov	ip, r1
     e7a:	44bc      	add	ip, r7
     e7c:	4463      	add	r3, ip
     e7e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e80:	230c      	movs	r3, #12
     e82:	2210      	movs	r2, #16
     e84:	4694      	mov	ip, r2
     e86:	44bc      	add	ip, r7
     e88:	4463      	add	r3, ip
     e8a:	2202      	movs	r2, #2
     e8c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e90:	0c1b      	lsrs	r3, r3, #16
     e92:	b2db      	uxtb	r3, r3
     e94:	220c      	movs	r2, #12
     e96:	2110      	movs	r1, #16
     e98:	468c      	mov	ip, r1
     e9a:	44bc      	add	ip, r7
     e9c:	4462      	add	r2, ip
     e9e:	0011      	movs	r1, r2
     ea0:	0018      	movs	r0, r3
     ea2:	4ba9      	ldr	r3, [pc, #676]	; (1148 <_i2c_master_set_config+0x34c>)
     ea4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ea8:	2b00      	cmp	r3, #0
     eaa:	d106      	bne.n	eba <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eae:	2101      	movs	r1, #1
     eb0:	0018      	movs	r0, r3
     eb2:	4ba4      	ldr	r3, [pc, #656]	; (1144 <_i2c_master_set_config+0x348>)
     eb4:	4798      	blx	r3
     eb6:	0003      	movs	r3, r0
     eb8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ebc:	b2da      	uxtb	r2, r3
     ebe:	230c      	movs	r3, #12
     ec0:	2110      	movs	r1, #16
     ec2:	468c      	mov	ip, r1
     ec4:	44bc      	add	ip, r7
     ec6:	4463      	add	r3, ip
     ec8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     eca:	230c      	movs	r3, #12
     ecc:	2210      	movs	r2, #16
     ece:	4694      	mov	ip, r2
     ed0:	44bc      	add	ip, r7
     ed2:	4463      	add	r3, ip
     ed4:	2202      	movs	r2, #2
     ed6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     eda:	0c1b      	lsrs	r3, r3, #16
     edc:	b2db      	uxtb	r3, r3
     ede:	220c      	movs	r2, #12
     ee0:	2110      	movs	r1, #16
     ee2:	468c      	mov	ip, r1
     ee4:	44bc      	add	ip, r7
     ee6:	4462      	add	r2, ip
     ee8:	0011      	movs	r1, r2
     eea:	0018      	movs	r0, r3
     eec:	4b96      	ldr	r3, [pc, #600]	; (1148 <_i2c_master_set_config+0x34c>)
     eee:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     ef0:	693b      	ldr	r3, [r7, #16]
     ef2:	8a9a      	ldrh	r2, [r3, #20]
     ef4:	697b      	ldr	r3, [r7, #20]
     ef6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     ef8:	693b      	ldr	r3, [r7, #16]
     efa:	8ada      	ldrh	r2, [r3, #22]
     efc:	697b      	ldr	r3, [r7, #20]
     efe:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f00:	693b      	ldr	r3, [r7, #16]
     f02:	7e1b      	ldrb	r3, [r3, #24]
     f04:	2b00      	cmp	r3, #0
     f06:	d103      	bne.n	f10 <_i2c_master_set_config+0x114>
     f08:	4b90      	ldr	r3, [pc, #576]	; (114c <_i2c_master_set_config+0x350>)
     f0a:	4798      	blx	r3
     f0c:	1e03      	subs	r3, r0, #0
     f0e:	d002      	beq.n	f16 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f10:	2380      	movs	r3, #128	; 0x80
     f12:	657b      	str	r3, [r7, #84]	; 0x54
     f14:	e001      	b.n	f1a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     f16:	2300      	movs	r3, #0
     f18:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     f1a:	693b      	ldr	r3, [r7, #16]
     f1c:	691b      	ldr	r3, [r3, #16]
     f1e:	2b00      	cmp	r3, #0
     f20:	d004      	beq.n	f2c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f22:	693b      	ldr	r3, [r7, #16]
     f24:	691b      	ldr	r3, [r3, #16]
     f26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f28:	4313      	orrs	r3, r2
     f2a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f2c:	693b      	ldr	r3, [r7, #16]
     f2e:	689b      	ldr	r3, [r3, #8]
     f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f32:	4313      	orrs	r3, r2
     f34:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f36:	693b      	ldr	r3, [r7, #16]
     f38:	2224      	movs	r2, #36	; 0x24
     f3a:	5c9b      	ldrb	r3, [r3, r2]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d004      	beq.n	f4a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f42:	2280      	movs	r2, #128	; 0x80
     f44:	05d2      	lsls	r2, r2, #23
     f46:	4313      	orrs	r3, r2
     f48:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f4a:	693b      	ldr	r3, [r7, #16]
     f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f4e:	2b00      	cmp	r3, #0
     f50:	d004      	beq.n	f5c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     f52:	693b      	ldr	r3, [r7, #16]
     f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f58:	4313      	orrs	r3, r2
     f5a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     f5c:	693b      	ldr	r3, [r7, #16]
     f5e:	222c      	movs	r2, #44	; 0x2c
     f60:	5c9b      	ldrb	r3, [r3, r2]
     f62:	2b00      	cmp	r3, #0
     f64:	d105      	bne.n	f72 <_i2c_master_set_config+0x176>
     f66:	693b      	ldr	r3, [r7, #16]
     f68:	689a      	ldr	r2, [r3, #8]
     f6a:	2380      	movs	r3, #128	; 0x80
     f6c:	049b      	lsls	r3, r3, #18
     f6e:	429a      	cmp	r2, r3
     f70:	d104      	bne.n	f7c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f74:	2280      	movs	r2, #128	; 0x80
     f76:	0512      	lsls	r2, r2, #20
     f78:	4313      	orrs	r3, r2
     f7a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     f7c:	693b      	ldr	r3, [r7, #16]
     f7e:	222d      	movs	r2, #45	; 0x2d
     f80:	5c9b      	ldrb	r3, [r3, r2]
     f82:	2b00      	cmp	r3, #0
     f84:	d004      	beq.n	f90 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f88:	2280      	movs	r2, #128	; 0x80
     f8a:	0412      	lsls	r2, r2, #16
     f8c:	4313      	orrs	r3, r2
     f8e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     f90:	693b      	ldr	r3, [r7, #16]
     f92:	222e      	movs	r2, #46	; 0x2e
     f94:	5c9b      	ldrb	r3, [r3, r2]
     f96:	2b00      	cmp	r3, #0
     f98:	d004      	beq.n	fa4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f9c:	2280      	movs	r2, #128	; 0x80
     f9e:	03d2      	lsls	r2, r2, #15
     fa0:	4313      	orrs	r3, r2
     fa2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     faa:	431a      	orrs	r2, r3
     fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fae:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb2:	2280      	movs	r2, #128	; 0x80
     fb4:	0052      	lsls	r2, r2, #1
     fb6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     fb8:	2323      	movs	r3, #35	; 0x23
     fba:	2210      	movs	r2, #16
     fbc:	4694      	mov	ip, r2
     fbe:	44bc      	add	ip, r7
     fc0:	4463      	add	r3, ip
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	3312      	adds	r3, #18
     fc6:	b2db      	uxtb	r3, r3
     fc8:	0018      	movs	r0, r3
     fca:	4b61      	ldr	r3, [pc, #388]	; (1150 <_i2c_master_set_config+0x354>)
     fcc:	4798      	blx	r3
     fce:	0003      	movs	r3, r0
     fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     fd2:	693b      	ldr	r3, [r7, #16]
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	22fa      	movs	r2, #250	; 0xfa
     fd8:	0092      	lsls	r2, r2, #2
     fda:	4353      	muls	r3, r2
     fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     fde:	693b      	ldr	r3, [r7, #16]
     fe0:	685b      	ldr	r3, [r3, #4]
     fe2:	22fa      	movs	r2, #250	; 0xfa
     fe4:	0092      	lsls	r2, r2, #2
     fe6:	4353      	muls	r3, r2
     fe8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
     fea:	693b      	ldr	r3, [r7, #16]
     fec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     fee:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
     ff0:	4b58      	ldr	r3, [pc, #352]	; (1154 <_i2c_master_set_config+0x358>)
     ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     ff4:	4798      	blx	r3
     ff6:	0005      	movs	r5, r0
     ff8:	000e      	movs	r6, r1
     ffa:	4b56      	ldr	r3, [pc, #344]	; (1154 <_i2c_master_set_config+0x358>)
     ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     ffe:	4798      	blx	r3
    1000:	60b8      	str	r0, [r7, #8]
    1002:	60f9      	str	r1, [r7, #12]
    1004:	4b53      	ldr	r3, [pc, #332]	; (1154 <_i2c_master_set_config+0x358>)
    1006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1008:	4798      	blx	r3
    100a:	4c53      	ldr	r4, [pc, #332]	; (1158 <_i2c_master_set_config+0x35c>)
    100c:	4a53      	ldr	r2, [pc, #332]	; (115c <_i2c_master_set_config+0x360>)
    100e:	4b54      	ldr	r3, [pc, #336]	; (1160 <_i2c_master_set_config+0x364>)
    1010:	47a0      	blx	r4
    1012:	0003      	movs	r3, r0
    1014:	000c      	movs	r4, r1
    1016:	603b      	str	r3, [r7, #0]
    1018:	607c      	str	r4, [r7, #4]
    101a:	4b4e      	ldr	r3, [pc, #312]	; (1154 <_i2c_master_set_config+0x358>)
    101c:	6a38      	ldr	r0, [r7, #32]
    101e:	4798      	blx	r3
    1020:	0002      	movs	r2, r0
    1022:	000b      	movs	r3, r1
    1024:	4c4c      	ldr	r4, [pc, #304]	; (1158 <_i2c_master_set_config+0x35c>)
    1026:	6838      	ldr	r0, [r7, #0]
    1028:	6879      	ldr	r1, [r7, #4]
    102a:	47a0      	blx	r4
    102c:	0003      	movs	r3, r0
    102e:	000c      	movs	r4, r1
    1030:	0018      	movs	r0, r3
    1032:	0021      	movs	r1, r4
    1034:	4c4b      	ldr	r4, [pc, #300]	; (1164 <_i2c_master_set_config+0x368>)
    1036:	2200      	movs	r2, #0
    1038:	4b4b      	ldr	r3, [pc, #300]	; (1168 <_i2c_master_set_config+0x36c>)
    103a:	47a0      	blx	r4
    103c:	0003      	movs	r3, r0
    103e:	000c      	movs	r4, r1
    1040:	001a      	movs	r2, r3
    1042:	0023      	movs	r3, r4
    1044:	4c44      	ldr	r4, [pc, #272]	; (1158 <_i2c_master_set_config+0x35c>)
    1046:	68b8      	ldr	r0, [r7, #8]
    1048:	68f9      	ldr	r1, [r7, #12]
    104a:	47a0      	blx	r4
    104c:	0003      	movs	r3, r0
    104e:	000c      	movs	r4, r1
    1050:	001a      	movs	r2, r3
    1052:	0023      	movs	r3, r4
    1054:	4c45      	ldr	r4, [pc, #276]	; (116c <_i2c_master_set_config+0x370>)
    1056:	0028      	movs	r0, r5
    1058:	0031      	movs	r1, r6
    105a:	47a0      	blx	r4
    105c:	0003      	movs	r3, r0
    105e:	000c      	movs	r4, r1
    1060:	001d      	movs	r5, r3
    1062:	0026      	movs	r6, r4
    1064:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1066:	005a      	lsls	r2, r3, #1
    1068:	4b3a      	ldr	r3, [pc, #232]	; (1154 <_i2c_master_set_config+0x358>)
    106a:	0010      	movs	r0, r2
    106c:	4798      	blx	r3
    106e:	0002      	movs	r2, r0
    1070:	000b      	movs	r3, r1
    1072:	4c3c      	ldr	r4, [pc, #240]	; (1164 <_i2c_master_set_config+0x368>)
    1074:	0028      	movs	r0, r5
    1076:	0031      	movs	r1, r6
    1078:	47a0      	blx	r4
    107a:	0003      	movs	r3, r0
    107c:	000c      	movs	r4, r1
    107e:	0018      	movs	r0, r3
    1080:	0021      	movs	r1, r4
    1082:	4c3a      	ldr	r4, [pc, #232]	; (116c <_i2c_master_set_config+0x370>)
    1084:	2200      	movs	r2, #0
    1086:	4b3a      	ldr	r3, [pc, #232]	; (1170 <_i2c_master_set_config+0x374>)
    1088:	47a0      	blx	r4
    108a:	0003      	movs	r3, r0
    108c:	000c      	movs	r4, r1
    108e:	001d      	movs	r5, r3
    1090:	0026      	movs	r6, r4
    1092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1094:	005a      	lsls	r2, r3, #1
    1096:	4b2f      	ldr	r3, [pc, #188]	; (1154 <_i2c_master_set_config+0x358>)
    1098:	0010      	movs	r0, r2
    109a:	4798      	blx	r3
    109c:	0002      	movs	r2, r0
    109e:	000b      	movs	r3, r1
    10a0:	4c34      	ldr	r4, [pc, #208]	; (1174 <_i2c_master_set_config+0x378>)
    10a2:	0028      	movs	r0, r5
    10a4:	0031      	movs	r1, r6
    10a6:	47a0      	blx	r4
    10a8:	0003      	movs	r3, r0
    10aa:	000c      	movs	r4, r1
    10ac:	0019      	movs	r1, r3
    10ae:	0022      	movs	r2, r4
    10b0:	4b31      	ldr	r3, [pc, #196]	; (1178 <_i2c_master_set_config+0x37c>)
    10b2:	0008      	movs	r0, r1
    10b4:	0011      	movs	r1, r2
    10b6:	4798      	blx	r3
    10b8:	0003      	movs	r3, r0
    10ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10bc:	693b      	ldr	r3, [r7, #16]
    10be:	689a      	ldr	r2, [r3, #8]
    10c0:	2380      	movs	r3, #128	; 0x80
    10c2:	049b      	lsls	r3, r3, #18
    10c4:	429a      	cmp	r2, r3
    10c6:	d16a      	bne.n	119e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    10c8:	4b22      	ldr	r3, [pc, #136]	; (1154 <_i2c_master_set_config+0x358>)
    10ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    10cc:	4798      	blx	r3
    10ce:	4c25      	ldr	r4, [pc, #148]	; (1164 <_i2c_master_set_config+0x368>)
    10d0:	0002      	movs	r2, r0
    10d2:	000b      	movs	r3, r1
    10d4:	47a0      	blx	r4
    10d6:	0003      	movs	r3, r0
    10d8:	000c      	movs	r4, r1
    10da:	001d      	movs	r5, r3
    10dc:	0026      	movs	r6, r4
    10de:	4b1d      	ldr	r3, [pc, #116]	; (1154 <_i2c_master_set_config+0x358>)
    10e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    10e2:	4798      	blx	r3
    10e4:	4c1c      	ldr	r4, [pc, #112]	; (1158 <_i2c_master_set_config+0x35c>)
    10e6:	2200      	movs	r2, #0
    10e8:	4b24      	ldr	r3, [pc, #144]	; (117c <_i2c_master_set_config+0x380>)
    10ea:	47a0      	blx	r4
    10ec:	0003      	movs	r3, r0
    10ee:	000c      	movs	r4, r1
    10f0:	001a      	movs	r2, r3
    10f2:	0023      	movs	r3, r4
    10f4:	4c1f      	ldr	r4, [pc, #124]	; (1174 <_i2c_master_set_config+0x378>)
    10f6:	0028      	movs	r0, r5
    10f8:	0031      	movs	r1, r6
    10fa:	47a0      	blx	r4
    10fc:	0003      	movs	r3, r0
    10fe:	000c      	movs	r4, r1
    1100:	0018      	movs	r0, r3
    1102:	0021      	movs	r1, r4
    1104:	4c19      	ldr	r4, [pc, #100]	; (116c <_i2c_master_set_config+0x370>)
    1106:	2200      	movs	r2, #0
    1108:	4b19      	ldr	r3, [pc, #100]	; (1170 <_i2c_master_set_config+0x374>)
    110a:	47a0      	blx	r4
    110c:	0003      	movs	r3, r0
    110e:	000c      	movs	r4, r1
    1110:	0019      	movs	r1, r3
    1112:	0022      	movs	r2, r4
    1114:	4b18      	ldr	r3, [pc, #96]	; (1178 <_i2c_master_set_config+0x37c>)
    1116:	0008      	movs	r0, r1
    1118:	0011      	movs	r1, r2
    111a:	4798      	blx	r3
    111c:	0003      	movs	r3, r0
    111e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1122:	2b00      	cmp	r3, #0
    1124:	d02e      	beq.n	1184 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1126:	4b16      	ldr	r3, [pc, #88]	; (1180 <_i2c_master_set_config+0x384>)
    1128:	6a79      	ldr	r1, [r7, #36]	; 0x24
    112a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    112c:	4798      	blx	r3
    112e:	0003      	movs	r3, r0
    1130:	1e9a      	subs	r2, r3, #2
    1132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1134:	1ad3      	subs	r3, r2, r3
    1136:	653b      	str	r3, [r7, #80]	; 0x50
    1138:	e031      	b.n	119e <_i2c_master_set_config+0x3a2>
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00006895 	.word	0x00006895
    1140:	00000cbd 	.word	0x00000cbd
    1144:	000066d9 	.word	0x000066d9
    1148:	00007d31 	.word	0x00007d31
    114c:	00000ce5 	.word	0x00000ce5
    1150:	00007af9 	.word	0x00007af9
    1154:	00009be1 	.word	0x00009be1
    1158:	0000904d 	.word	0x0000904d
    115c:	e826d695 	.word	0xe826d695
    1160:	3e112e0b 	.word	0x3e112e0b
    1164:	000083c5 	.word	0x000083c5
    1168:	40240000 	.word	0x40240000
    116c:	0000954d 	.word	0x0000954d
    1170:	3ff00000 	.word	0x3ff00000
    1174:	000089e5 	.word	0x000089e5
    1178:	00009b79 	.word	0x00009b79
    117c:	40080000 	.word	0x40080000
    1180:	00008259 	.word	0x00008259
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1186:	005a      	lsls	r2, r3, #1
    1188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    118a:	18d3      	adds	r3, r2, r3
    118c:	1e5a      	subs	r2, r3, #1
    118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1190:	0059      	lsls	r1, r3, #1
    1192:	4b1d      	ldr	r3, [pc, #116]	; (1208 <_i2c_master_set_config+0x40c>)
    1194:	0010      	movs	r0, r2
    1196:	4798      	blx	r3
    1198:	0003      	movs	r3, r0
    119a:	3b01      	subs	r3, #1
    119c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11a0:	2bff      	cmp	r3, #255	; 0xff
    11a2:	dc08      	bgt.n	11b6 <_i2c_master_set_config+0x3ba>
    11a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11a6:	2b00      	cmp	r3, #0
    11a8:	db05      	blt.n	11b6 <_i2c_master_set_config+0x3ba>
    11aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    11ac:	2bff      	cmp	r3, #255	; 0xff
    11ae:	dc02      	bgt.n	11b6 <_i2c_master_set_config+0x3ba>
    11b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    11b2:	2b00      	cmp	r3, #0
    11b4:	da06      	bge.n	11c4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11b6:	233b      	movs	r3, #59	; 0x3b
    11b8:	2210      	movs	r2, #16
    11ba:	4694      	mov	ip, r2
    11bc:	44bc      	add	ip, r7
    11be:	4463      	add	r3, ip
    11c0:	2240      	movs	r2, #64	; 0x40
    11c2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11c4:	233b      	movs	r3, #59	; 0x3b
    11c6:	2210      	movs	r2, #16
    11c8:	4694      	mov	ip, r2
    11ca:	44bc      	add	ip, r7
    11cc:	4463      	add	r3, ip
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	2b40      	cmp	r3, #64	; 0x40
    11d2:	d00e      	beq.n	11f2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11d6:	22ff      	movs	r2, #255	; 0xff
    11d8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    11dc:	041b      	lsls	r3, r3, #16
    11de:	0019      	movs	r1, r3
    11e0:	23ff      	movs	r3, #255	; 0xff
    11e2:	041b      	lsls	r3, r3, #16
    11e4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11e6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    11e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    11ea:	0612      	lsls	r2, r2, #24
    11ec:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11f0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    11f2:	233b      	movs	r3, #59	; 0x3b
    11f4:	2210      	movs	r2, #16
    11f6:	4694      	mov	ip, r2
    11f8:	44bc      	add	ip, r7
    11fa:	4463      	add	r3, ip
    11fc:	781b      	ldrb	r3, [r3, #0]
}
    11fe:	0018      	movs	r0, r3
    1200:	46bd      	mov	sp, r7
    1202:	b017      	add	sp, #92	; 0x5c
    1204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	00008259 	.word	0x00008259

0000120c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    120c:	b590      	push	{r4, r7, lr}
    120e:	b08b      	sub	sp, #44	; 0x2c
    1210:	af00      	add	r7, sp, #0
    1212:	60f8      	str	r0, [r7, #12]
    1214:	60b9      	str	r1, [r7, #8]
    1216:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1218:	68fb      	ldr	r3, [r7, #12]
    121a:	68ba      	ldr	r2, [r7, #8]
    121c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    121e:	68fb      	ldr	r3, [r7, #12]
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	0018      	movs	r0, r3
    122a:	4b44      	ldr	r3, [pc, #272]	; (133c <i2c_master_init+0x130>)
    122c:	4798      	blx	r3
    122e:	0003      	movs	r3, r0
    1230:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b05      	cmp	r3, #5
    1236:	d104      	bne.n	1242 <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1238:	2301      	movs	r3, #1
    123a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    123c:	2318      	movs	r3, #24
    123e:	623b      	str	r3, [r7, #32]
    1240:	e004      	b.n	124c <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1242:	69bb      	ldr	r3, [r7, #24]
    1244:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1246:	69bb      	ldr	r3, [r7, #24]
    1248:	3312      	adds	r3, #18
    124a:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    124c:	69bb      	ldr	r3, [r7, #24]
    124e:	2b05      	cmp	r3, #5
    1250:	d108      	bne.n	1264 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1252:	2201      	movs	r2, #1
    1254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1256:	409a      	lsls	r2, r3
    1258:	0013      	movs	r3, r2
    125a:	0019      	movs	r1, r3
    125c:	2003      	movs	r0, #3
    125e:	4b38      	ldr	r3, [pc, #224]	; (1340 <i2c_master_init+0x134>)
    1260:	4798      	blx	r3
    1262:	e007      	b.n	1274 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1264:	2201      	movs	r2, #1
    1266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1268:	409a      	lsls	r2, r3
    126a:	0013      	movs	r3, r2
    126c:	0019      	movs	r1, r3
    126e:	2002      	movs	r0, #2
    1270:	4b33      	ldr	r3, [pc, #204]	; (1340 <i2c_master_init+0x134>)
    1272:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1274:	2314      	movs	r3, #20
    1276:	18fb      	adds	r3, r7, r3
    1278:	0018      	movs	r0, r3
    127a:	4b32      	ldr	r3, [pc, #200]	; (1344 <i2c_master_init+0x138>)
    127c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    127e:	687b      	ldr	r3, [r7, #4]
    1280:	7b1a      	ldrb	r2, [r3, #12]
    1282:	2314      	movs	r3, #20
    1284:	18fb      	adds	r3, r7, r3
    1286:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1288:	6a3b      	ldr	r3, [r7, #32]
    128a:	b2db      	uxtb	r3, r3
    128c:	2214      	movs	r2, #20
    128e:	18ba      	adds	r2, r7, r2
    1290:	0011      	movs	r1, r2
    1292:	0018      	movs	r0, r3
    1294:	4b2c      	ldr	r3, [pc, #176]	; (1348 <i2c_master_init+0x13c>)
    1296:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1298:	6a3b      	ldr	r3, [r7, #32]
    129a:	b2db      	uxtb	r3, r3
    129c:	0018      	movs	r0, r3
    129e:	4b2b      	ldr	r3, [pc, #172]	; (134c <i2c_master_init+0x140>)
    12a0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	7b1b      	ldrb	r3, [r3, #12]
    12a6:	2100      	movs	r1, #0
    12a8:	0018      	movs	r0, r3
    12aa:	4b29      	ldr	r3, [pc, #164]	; (1350 <i2c_master_init+0x144>)
    12ac:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12ae:	69fb      	ldr	r3, [r7, #28]
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	2202      	movs	r2, #2
    12b4:	4013      	ands	r3, r2
    12b6:	d001      	beq.n	12bc <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    12b8:	231c      	movs	r3, #28
    12ba:	e03b      	b.n	1334 <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12bc:	69fb      	ldr	r3, [r7, #28]
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	2201      	movs	r2, #1
    12c2:	4013      	ands	r3, r2
    12c4:	d001      	beq.n	12ca <i2c_master_init+0xbe>
		return STATUS_BUSY;
    12c6:	2305      	movs	r3, #5
    12c8:	e034      	b.n	1334 <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	2217      	movs	r2, #23
    12d0:	18bc      	adds	r4, r7, r2
    12d2:	0018      	movs	r0, r3
    12d4:	4b19      	ldr	r3, [pc, #100]	; (133c <i2c_master_init+0x130>)
    12d6:	4798      	blx	r3
    12d8:	0003      	movs	r3, r0
    12da:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    12dc:	4a1d      	ldr	r2, [pc, #116]	; (1354 <i2c_master_init+0x148>)
    12de:	2317      	movs	r3, #23
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	0011      	movs	r1, r2
    12e6:	0018      	movs	r0, r3
    12e8:	4b1b      	ldr	r3, [pc, #108]	; (1358 <i2c_master_init+0x14c>)
    12ea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12ec:	2317      	movs	r3, #23
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	781a      	ldrb	r2, [r3, #0]
    12f2:	4b1a      	ldr	r3, [pc, #104]	; (135c <i2c_master_init+0x150>)
    12f4:	0092      	lsls	r2, r2, #2
    12f6:	68f9      	ldr	r1, [r7, #12]
    12f8:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	2200      	movs	r2, #0
    12fe:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	2200      	movs	r2, #0
    1304:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	2200      	movs	r2, #0
    130a:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	2200      	movs	r2, #0
    1310:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	2225      	movs	r2, #37	; 0x25
    1316:	2100      	movs	r1, #0
    1318:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    131a:	68fb      	ldr	r3, [r7, #12]
    131c:	2200      	movs	r2, #0
    131e:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1320:	69fb      	ldr	r3, [r7, #28]
    1322:	2214      	movs	r2, #20
    1324:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1326:	687a      	ldr	r2, [r7, #4]
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	0011      	movs	r1, r2
    132c:	0018      	movs	r0, r3
    132e:	4b0c      	ldr	r3, [pc, #48]	; (1360 <i2c_master_init+0x154>)
    1330:	4798      	blx	r3
    1332:	0003      	movs	r3, r0
}
    1334:	0018      	movs	r0, r3
    1336:	46bd      	mov	sp, r7
    1338:	b00b      	add	sp, #44	; 0x2c
    133a:	bd90      	pop	{r4, r7, pc}
    133c:	00006895 	.word	0x00006895
    1340:	00000c41 	.word	0x00000c41
    1344:	00000c29 	.word	0x00000c29
    1348:	00007a09 	.word	0x00007a09
    134c:	00007a49 	.word	0x00007a49
    1350:	0000664d 	.word	0x0000664d
    1354:	00001bb9 	.word	0x00001bb9
    1358:	000068f9 	.word	0x000068f9
    135c:	2000039c 	.word	0x2000039c
    1360:	00000dfd 	.word	0x00000dfd

00001364 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    1364:	b580      	push	{r7, lr}
    1366:	b084      	sub	sp, #16
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	0018      	movs	r0, r3
    1376:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <i2c_master_reset+0x50>)
    1378:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	0018      	movs	r0, r3
    137e:	4b0e      	ldr	r3, [pc, #56]	; (13b8 <i2c_master_reset+0x54>)
    1380:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    1382:	4b0e      	ldr	r3, [pc, #56]	; (13bc <i2c_master_reset+0x58>)
    1384:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	681b      	ldr	r3, [r3, #0]
    138a:	0018      	movs	r0, r3
    138c:	4b0c      	ldr	r3, [pc, #48]	; (13c0 <i2c_master_reset+0x5c>)
    138e:	4798      	blx	r3
    1390:	0003      	movs	r3, r0
    1392:	0018      	movs	r0, r3
    1394:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <i2c_master_reset+0x60>)
    1396:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    1398:	4b0b      	ldr	r3, [pc, #44]	; (13c8 <i2c_master_reset+0x64>)
    139a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	0018      	movs	r0, r3
    13a0:	4b04      	ldr	r3, [pc, #16]	; (13b4 <i2c_master_reset+0x50>)
    13a2:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	2201      	movs	r2, #1
    13a8:	601a      	str	r2, [r3, #0]
}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	46bd      	mov	sp, r7
    13ae:	b004      	add	sp, #16
    13b0:	bd80      	pop	{r7, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	00000d81 	.word	0x00000d81
    13b8:	00000da5 	.word	0x00000da5
    13bc:	00000d05 	.word	0x00000d05
    13c0:	00006965 	.word	0x00006965
    13c4:	00007b4d 	.word	0x00007b4d
    13c8:	00000d19 	.word	0x00000d19

000013cc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b084      	sub	sp, #16
    13d0:	af00      	add	r7, sp, #0
    13d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    13da:	68fb      	ldr	r3, [r7, #12]
    13dc:	7e1b      	ldrb	r3, [r3, #24]
    13de:	b2db      	uxtb	r3, r3
    13e0:	001a      	movs	r2, r3
    13e2:	2302      	movs	r3, #2
    13e4:	4013      	ands	r3, r2
    13e6:	d00b      	beq.n	1400 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	2202      	movs	r2, #2
    13ec:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	8b5b      	ldrh	r3, [r3, #26]
    13f2:	b29b      	uxth	r3, r3
    13f4:	001a      	movs	r2, r3
    13f6:	2302      	movs	r3, #2
    13f8:	4013      	ands	r3, r2
    13fa:	d011      	beq.n	1420 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    13fc:	2341      	movs	r3, #65	; 0x41
    13fe:	e010      	b.n	1422 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	8b5b      	ldrh	r3, [r3, #26]
    1404:	b29b      	uxth	r3, r3
    1406:	001a      	movs	r2, r3
    1408:	2304      	movs	r3, #4
    140a:	4013      	ands	r3, r2
    140c:	d008      	beq.n	1420 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	685b      	ldr	r3, [r3, #4]
    1412:	22c0      	movs	r2, #192	; 0xc0
    1414:	0292      	lsls	r2, r2, #10
    1416:	431a      	orrs	r2, r3
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    141c:	2318      	movs	r3, #24
    141e:	e000      	b.n	1422 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1420:	2300      	movs	r3, #0
}
    1422:	0018      	movs	r0, r3
    1424:	46bd      	mov	sp, r7
    1426:	b004      	add	sp, #16
    1428:	bd80      	pop	{r7, pc}

0000142a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    142a:	b580      	push	{r7, lr}
    142c:	b084      	sub	sp, #16
    142e:	af00      	add	r7, sp, #0
    1430:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1438:	230e      	movs	r3, #14
    143a:	18fb      	adds	r3, r7, r3
    143c:	2200      	movs	r2, #0
    143e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1440:	e00f      	b.n	1462 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1442:	230e      	movs	r3, #14
    1444:	18fb      	adds	r3, r7, r3
    1446:	220e      	movs	r2, #14
    1448:	18ba      	adds	r2, r7, r2
    144a:	8812      	ldrh	r2, [r2, #0]
    144c:	3201      	adds	r2, #1
    144e:	801a      	strh	r2, [r3, #0]
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	891b      	ldrh	r3, [r3, #8]
    1454:	220e      	movs	r2, #14
    1456:	18ba      	adds	r2, r7, r2
    1458:	8812      	ldrh	r2, [r2, #0]
    145a:	429a      	cmp	r2, r3
    145c:	d301      	bcc.n	1462 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    145e:	2312      	movs	r3, #18
    1460:	e00e      	b.n	1480 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1462:	68bb      	ldr	r3, [r7, #8]
    1464:	7e1b      	ldrb	r3, [r3, #24]
    1466:	b2db      	uxtb	r3, r3
    1468:	001a      	movs	r2, r3
    146a:	2301      	movs	r3, #1
    146c:	4013      	ands	r3, r2
    146e:	d106      	bne.n	147e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1470:	68bb      	ldr	r3, [r7, #8]
    1472:	7e1b      	ldrb	r3, [r3, #24]
    1474:	b2db      	uxtb	r3, r3
    1476:	001a      	movs	r2, r3
    1478:	2302      	movs	r3, #2
    147a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    147c:	d0e1      	beq.n	1442 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    147e:	2300      	movs	r3, #0
}
    1480:	0018      	movs	r0, r3
    1482:	46bd      	mov	sp, r7
    1484:	b004      	add	sp, #16
    1486:	bd80      	pop	{r7, pc}

00001488 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1488:	b590      	push	{r4, r7, lr}
    148a:	b085      	sub	sp, #20
    148c:	af00      	add	r7, sp, #0
    148e:	6078      	str	r0, [r7, #4]
    1490:	000a      	movs	r2, r1
    1492:	1cfb      	adds	r3, r7, #3
    1494:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	685b      	ldr	r3, [r3, #4]
    14a0:	2280      	movs	r2, #128	; 0x80
    14a2:	02d2      	lsls	r2, r2, #11
    14a4:	431a      	orrs	r2, r3
    14a6:	68fb      	ldr	r3, [r7, #12]
    14a8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    14aa:	1cfb      	adds	r3, r7, #3
    14ac:	781a      	ldrb	r2, [r3, #0]
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    14b2:	230b      	movs	r3, #11
    14b4:	18fc      	adds	r4, r7, r3
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	0018      	movs	r0, r3
    14ba:	4b07      	ldr	r3, [pc, #28]	; (14d8 <_i2c_master_send_hs_master_code+0x50>)
    14bc:	4798      	blx	r3
    14be:	0003      	movs	r3, r0
    14c0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	2201      	movs	r2, #1
    14c6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    14c8:	230b      	movs	r3, #11
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	781b      	ldrb	r3, [r3, #0]
}
    14ce:	0018      	movs	r0, r3
    14d0:	46bd      	mov	sp, r7
    14d2:	b005      	add	sp, #20
    14d4:	bd90      	pop	{r4, r7, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	0000142b 	.word	0x0000142b

000014dc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14dc:	b590      	push	{r4, r7, lr}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    14ec:	2314      	movs	r3, #20
    14ee:	18fb      	adds	r3, r7, r3
    14f0:	683a      	ldr	r2, [r7, #0]
    14f2:	8852      	ldrh	r2, [r2, #2]
    14f4:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    14f6:	2312      	movs	r3, #18
    14f8:	18fb      	adds	r3, r7, r3
    14fa:	2200      	movs	r2, #0
    14fc:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	011b      	lsls	r3, r3, #4
    1504:	0fdb      	lsrs	r3, r3, #31
    1506:	b2db      	uxtb	r3, r3
    1508:	001a      	movs	r2, r3
    150a:	230b      	movs	r3, #11
    150c:	18fb      	adds	r3, r7, r3
    150e:	1e51      	subs	r1, r2, #1
    1510:	418a      	sbcs	r2, r1
    1512:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1514:	683b      	ldr	r3, [r7, #0]
    1516:	7a5b      	ldrb	r3, [r3, #9]
    1518:	2b00      	cmp	r3, #0
    151a:	d006      	beq.n	152a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    151c:	683b      	ldr	r3, [r7, #0]
    151e:	7a9a      	ldrb	r2, [r3, #10]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	0011      	movs	r1, r2
    1524:	0018      	movs	r0, r3
    1526:	4b85      	ldr	r3, [pc, #532]	; (173c <_i2c_master_read_packet+0x260>)
    1528:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	685b      	ldr	r3, [r3, #4]
    152e:	4a84      	ldr	r2, [pc, #528]	; (1740 <_i2c_master_read_packet+0x264>)
    1530:	401a      	ands	r2, r3
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1536:	683b      	ldr	r3, [r7, #0]
    1538:	7a1b      	ldrb	r3, [r3, #8]
    153a:	2b00      	cmp	r3, #0
    153c:	d042      	beq.n	15c4 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    153e:	683b      	ldr	r3, [r7, #0]
    1540:	881b      	ldrh	r3, [r3, #0]
    1542:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1544:	683b      	ldr	r3, [r7, #0]
    1546:	7a5b      	ldrb	r3, [r3, #9]
    1548:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    154a:	4313      	orrs	r3, r2
    154c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    154e:	2380      	movs	r3, #128	; 0x80
    1550:	021b      	lsls	r3, r3, #8
    1552:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1558:	2317      	movs	r3, #23
    155a:	18fc      	adds	r4, r7, r3
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	0018      	movs	r0, r3
    1560:	4b78      	ldr	r3, [pc, #480]	; (1744 <_i2c_master_read_packet+0x268>)
    1562:	4798      	blx	r3
    1564:	0003      	movs	r3, r0
    1566:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	685b      	ldr	r3, [r3, #4]
    156c:	4a74      	ldr	r2, [pc, #464]	; (1740 <_i2c_master_read_packet+0x264>)
    156e:	401a      	ands	r2, r3
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1574:	2317      	movs	r3, #23
    1576:	18fb      	adds	r3, r7, r3
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	2b00      	cmp	r3, #0
    157c:	d107      	bne.n	158e <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    157e:	2317      	movs	r3, #23
    1580:	18fc      	adds	r4, r7, r3
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	0018      	movs	r0, r3
    1586:	4b70      	ldr	r3, [pc, #448]	; (1748 <_i2c_master_read_packet+0x26c>)
    1588:	4798      	blx	r3
    158a:	0003      	movs	r3, r0
    158c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    158e:	2317      	movs	r3, #23
    1590:	18fb      	adds	r3, r7, r3
    1592:	781b      	ldrb	r3, [r3, #0]
    1594:	2b00      	cmp	r3, #0
    1596:	d111      	bne.n	15bc <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1598:	683b      	ldr	r3, [r7, #0]
    159a:	881b      	ldrh	r3, [r3, #0]
    159c:	0a1b      	lsrs	r3, r3, #8
    159e:	b29b      	uxth	r3, r3
    15a0:	2278      	movs	r2, #120	; 0x78
    15a2:	4313      	orrs	r3, r2
    15a4:	b29b      	uxth	r3, r3
    15a6:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    15a8:	683b      	ldr	r3, [r7, #0]
    15aa:	7a5b      	ldrb	r3, [r3, #9]
    15ac:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    15ae:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    15b0:	2201      	movs	r2, #1
    15b2:	4313      	orrs	r3, r2
    15b4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	625a      	str	r2, [r3, #36]	; 0x24
    15ba:	e00f      	b.n	15dc <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    15bc:	2317      	movs	r3, #23
    15be:	18fb      	adds	r3, r7, r3
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	e0b6      	b.n	1732 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    15c4:	683b      	ldr	r3, [r7, #0]
    15c6:	881b      	ldrh	r3, [r3, #0]
    15c8:	005b      	lsls	r3, r3, #1
    15ca:	2201      	movs	r2, #1
    15cc:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    15ce:	683b      	ldr	r3, [r7, #0]
    15d0:	7a5b      	ldrb	r3, [r3, #9]
    15d2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    15d4:	4313      	orrs	r3, r2
    15d6:	001a      	movs	r2, r3
    15d8:	68fb      	ldr	r3, [r7, #12]
    15da:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    15dc:	2317      	movs	r3, #23
    15de:	18fc      	adds	r4, r7, r3
    15e0:	687b      	ldr	r3, [r7, #4]
    15e2:	0018      	movs	r0, r3
    15e4:	4b57      	ldr	r3, [pc, #348]	; (1744 <_i2c_master_read_packet+0x268>)
    15e6:	4798      	blx	r3
    15e8:	0003      	movs	r3, r0
    15ea:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    15ec:	230b      	movs	r3, #11
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d00b      	beq.n	160e <_i2c_master_read_packet+0x132>
    15f6:	683b      	ldr	r3, [r7, #0]
    15f8:	885b      	ldrh	r3, [r3, #2]
    15fa:	2b01      	cmp	r3, #1
    15fc:	d107      	bne.n	160e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15fe:	68fb      	ldr	r3, [r7, #12]
    1600:	685b      	ldr	r3, [r3, #4]
    1602:	2280      	movs	r2, #128	; 0x80
    1604:	02d2      	lsls	r2, r2, #11
    1606:	431a      	orrs	r2, r3
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	605a      	str	r2, [r3, #4]
    160c:	e005      	b.n	161a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	685b      	ldr	r3, [r3, #4]
    1612:	4a4b      	ldr	r2, [pc, #300]	; (1740 <_i2c_master_read_packet+0x264>)
    1614:	401a      	ands	r2, r3
    1616:	68fb      	ldr	r3, [r7, #12]
    1618:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    161a:	2317      	movs	r3, #23
    161c:	18fb      	adds	r3, r7, r3
    161e:	781b      	ldrb	r3, [r3, #0]
    1620:	2b00      	cmp	r3, #0
    1622:	d107      	bne.n	1634 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1624:	2317      	movs	r3, #23
    1626:	18fc      	adds	r4, r7, r3
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	0018      	movs	r0, r3
    162c:	4b46      	ldr	r3, [pc, #280]	; (1748 <_i2c_master_read_packet+0x26c>)
    162e:	4798      	blx	r3
    1630:	0003      	movs	r3, r0
    1632:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1634:	2317      	movs	r3, #23
    1636:	18fb      	adds	r3, r7, r3
    1638:	781b      	ldrb	r3, [r3, #0]
    163a:	2b00      	cmp	r3, #0
    163c:	d000      	beq.n	1640 <_i2c_master_read_packet+0x164>
    163e:	e075      	b.n	172c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1640:	e04b      	b.n	16da <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1642:	68fb      	ldr	r3, [r7, #12]
    1644:	8b5b      	ldrh	r3, [r3, #26]
    1646:	b29b      	uxth	r3, r3
    1648:	001a      	movs	r2, r3
    164a:	2320      	movs	r3, #32
    164c:	4013      	ands	r3, r2
    164e:	d101      	bne.n	1654 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1650:	2341      	movs	r3, #65	; 0x41
    1652:	e06e      	b.n	1732 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	7adb      	ldrb	r3, [r3, #11]
    1658:	2b00      	cmp	r3, #0
    165a:	d01e      	beq.n	169a <_i2c_master_read_packet+0x1be>
    165c:	230b      	movs	r3, #11
    165e:	18fb      	adds	r3, r7, r3
    1660:	781b      	ldrb	r3, [r3, #0]
    1662:	2201      	movs	r2, #1
    1664:	4053      	eors	r3, r2
    1666:	b2db      	uxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	d004      	beq.n	1676 <_i2c_master_read_packet+0x19a>
    166c:	2314      	movs	r3, #20
    166e:	18fb      	adds	r3, r7, r3
    1670:	881b      	ldrh	r3, [r3, #0]
    1672:	2b00      	cmp	r3, #0
    1674:	d009      	beq.n	168a <_i2c_master_read_packet+0x1ae>
    1676:	230b      	movs	r3, #11
    1678:	18fb      	adds	r3, r7, r3
    167a:	781b      	ldrb	r3, [r3, #0]
    167c:	2b00      	cmp	r3, #0
    167e:	d00c      	beq.n	169a <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1680:	2314      	movs	r3, #20
    1682:	18fb      	adds	r3, r7, r3
    1684:	881b      	ldrh	r3, [r3, #0]
    1686:	2b01      	cmp	r3, #1
    1688:	d107      	bne.n	169a <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    168a:	68fb      	ldr	r3, [r7, #12]
    168c:	685b      	ldr	r3, [r3, #4]
    168e:	2280      	movs	r2, #128	; 0x80
    1690:	02d2      	lsls	r2, r2, #11
    1692:	431a      	orrs	r2, r3
    1694:	68fb      	ldr	r3, [r7, #12]
    1696:	605a      	str	r2, [r3, #4]
    1698:	e01a      	b.n	16d0 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	0018      	movs	r0, r3
    169e:	4b2b      	ldr	r3, [pc, #172]	; (174c <_i2c_master_read_packet+0x270>)
    16a0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    16a2:	683b      	ldr	r3, [r7, #0]
    16a4:	685a      	ldr	r2, [r3, #4]
    16a6:	2312      	movs	r3, #18
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	881b      	ldrh	r3, [r3, #0]
    16ac:	2112      	movs	r1, #18
    16ae:	1879      	adds	r1, r7, r1
    16b0:	1c58      	adds	r0, r3, #1
    16b2:	8008      	strh	r0, [r1, #0]
    16b4:	18d3      	adds	r3, r2, r3
    16b6:	68fa      	ldr	r2, [r7, #12]
    16b8:	2128      	movs	r1, #40	; 0x28
    16ba:	5c52      	ldrb	r2, [r2, r1]
    16bc:	b2d2      	uxtb	r2, r2
    16be:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    16c0:	2317      	movs	r3, #23
    16c2:	18fc      	adds	r4, r7, r3
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	0018      	movs	r0, r3
    16c8:	4b1e      	ldr	r3, [pc, #120]	; (1744 <_i2c_master_read_packet+0x268>)
    16ca:	4798      	blx	r3
    16cc:	0003      	movs	r3, r0
    16ce:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    16d0:	2317      	movs	r3, #23
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d109      	bne.n	16ee <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    16da:	2314      	movs	r3, #20
    16dc:	18fb      	adds	r3, r7, r3
    16de:	881b      	ldrh	r3, [r3, #0]
    16e0:	2214      	movs	r2, #20
    16e2:	18ba      	adds	r2, r7, r2
    16e4:	1e59      	subs	r1, r3, #1
    16e6:	8011      	strh	r1, [r2, #0]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d1aa      	bne.n	1642 <_i2c_master_read_packet+0x166>
    16ec:	e000      	b.n	16f0 <_i2c_master_read_packet+0x214>
				break;
    16ee:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	7a9b      	ldrb	r3, [r3, #10]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d00a      	beq.n	170e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	0018      	movs	r0, r3
    16fc:	4b13      	ldr	r3, [pc, #76]	; (174c <_i2c_master_read_packet+0x270>)
    16fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	685b      	ldr	r3, [r3, #4]
    1704:	22c0      	movs	r2, #192	; 0xc0
    1706:	0292      	lsls	r2, r2, #10
    1708:	431a      	orrs	r2, r3
    170a:	68fb      	ldr	r3, [r7, #12]
    170c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	0018      	movs	r0, r3
    1712:	4b0e      	ldr	r3, [pc, #56]	; (174c <_i2c_master_read_packet+0x270>)
    1714:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1716:	683b      	ldr	r3, [r7, #0]
    1718:	685a      	ldr	r2, [r3, #4]
    171a:	2312      	movs	r3, #18
    171c:	18fb      	adds	r3, r7, r3
    171e:	881b      	ldrh	r3, [r3, #0]
    1720:	18d3      	adds	r3, r2, r3
    1722:	68fa      	ldr	r2, [r7, #12]
    1724:	2128      	movs	r1, #40	; 0x28
    1726:	5c52      	ldrb	r2, [r2, r1]
    1728:	b2d2      	uxtb	r2, r2
    172a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    172c:	2317      	movs	r3, #23
    172e:	18fb      	adds	r3, r7, r3
    1730:	781b      	ldrb	r3, [r3, #0]
}
    1732:	0018      	movs	r0, r3
    1734:	46bd      	mov	sp, r7
    1736:	b007      	add	sp, #28
    1738:	bd90      	pop	{r4, r7, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00001489 	.word	0x00001489
    1740:	fffbffff 	.word	0xfffbffff
    1744:	0000142b 	.word	0x0000142b
    1748:	000013cd 	.word	0x000013cd
    174c:	00000d81 	.word	0x00000d81

00001750 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1750:	b580      	push	{r7, lr}
    1752:	b082      	sub	sp, #8
    1754:	af00      	add	r7, sp, #0
    1756:	6078      	str	r0, [r7, #4]
    1758:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8b9b      	ldrh	r3, [r3, #28]
    175e:	b29b      	uxth	r3, r3
    1760:	2b00      	cmp	r3, #0
    1762:	d001      	beq.n	1768 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1764:	2305      	movs	r3, #5
    1766:	e00c      	b.n	1782 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	2201      	movs	r2, #1
    176c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	2201      	movs	r2, #1
    1772:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1774:	683a      	ldr	r2, [r7, #0]
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	0011      	movs	r1, r2
    177a:	0018      	movs	r0, r3
    177c:	4b03      	ldr	r3, [pc, #12]	; (178c <i2c_master_read_packet_wait+0x3c>)
    177e:	4798      	blx	r3
    1780:	0003      	movs	r3, r0
}
    1782:	0018      	movs	r0, r3
    1784:	46bd      	mov	sp, r7
    1786:	b002      	add	sp, #8
    1788:	bd80      	pop	{r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	000014dd 	.word	0x000014dd

00001790 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1790:	b590      	push	{r4, r7, lr}
    1792:	b087      	sub	sp, #28
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
    1798:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    17a0:	2314      	movs	r3, #20
    17a2:	18fb      	adds	r3, r7, r3
    17a4:	683a      	ldr	r2, [r7, #0]
    17a6:	8852      	ldrh	r2, [r2, #2]
    17a8:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	0018      	movs	r0, r3
    17ae:	4b51      	ldr	r3, [pc, #324]	; (18f4 <_i2c_master_write_packet+0x164>)
    17b0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	7a5b      	ldrb	r3, [r3, #9]
    17b6:	2b00      	cmp	r3, #0
    17b8:	d006      	beq.n	17c8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    17ba:	683b      	ldr	r3, [r7, #0]
    17bc:	7a9a      	ldrb	r2, [r3, #10]
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	0011      	movs	r1, r2
    17c2:	0018      	movs	r0, r3
    17c4:	4b4c      	ldr	r3, [pc, #304]	; (18f8 <_i2c_master_write_packet+0x168>)
    17c6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17c8:	68fb      	ldr	r3, [r7, #12]
    17ca:	685b      	ldr	r3, [r3, #4]
    17cc:	4a4b      	ldr	r2, [pc, #300]	; (18fc <_i2c_master_write_packet+0x16c>)
    17ce:	401a      	ands	r2, r3
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    17d4:	683b      	ldr	r3, [r7, #0]
    17d6:	7a1b      	ldrb	r3, [r3, #8]
    17d8:	2b00      	cmp	r3, #0
    17da:	d00d      	beq.n	17f8 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17dc:	683b      	ldr	r3, [r7, #0]
    17de:	881b      	ldrh	r3, [r3, #0]
    17e0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17e2:	683b      	ldr	r3, [r7, #0]
    17e4:	7a5b      	ldrb	r3, [r3, #9]
    17e6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17e8:	4313      	orrs	r3, r2
    17ea:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17ec:	2380      	movs	r3, #128	; 0x80
    17ee:	021b      	lsls	r3, r3, #8
    17f0:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	625a      	str	r2, [r3, #36]	; 0x24
    17f6:	e009      	b.n	180c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17f8:	683b      	ldr	r3, [r7, #0]
    17fa:	881b      	ldrh	r3, [r3, #0]
    17fc:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    17fe:	683b      	ldr	r3, [r7, #0]
    1800:	7a5b      	ldrb	r3, [r3, #9]
    1802:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1804:	4313      	orrs	r3, r2
    1806:	001a      	movs	r2, r3
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    180c:	2317      	movs	r3, #23
    180e:	18fc      	adds	r4, r7, r3
    1810:	687b      	ldr	r3, [r7, #4]
    1812:	0018      	movs	r0, r3
    1814:	4b3a      	ldr	r3, [pc, #232]	; (1900 <_i2c_master_write_packet+0x170>)
    1816:	4798      	blx	r3
    1818:	0003      	movs	r3, r0
    181a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    181c:	2317      	movs	r3, #23
    181e:	18fb      	adds	r3, r7, r3
    1820:	781b      	ldrb	r3, [r3, #0]
    1822:	2b00      	cmp	r3, #0
    1824:	d107      	bne.n	1836 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1826:	2317      	movs	r3, #23
    1828:	18fc      	adds	r4, r7, r3
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	0018      	movs	r0, r3
    182e:	4b35      	ldr	r3, [pc, #212]	; (1904 <_i2c_master_write_packet+0x174>)
    1830:	4798      	blx	r3
    1832:	0003      	movs	r3, r0
    1834:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1836:	2317      	movs	r3, #23
    1838:	18fb      	adds	r3, r7, r3
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	2b00      	cmp	r3, #0
    183e:	d152      	bne.n	18e6 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1840:	2312      	movs	r3, #18
    1842:	18fb      	adds	r3, r7, r3
    1844:	2200      	movs	r2, #0
    1846:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1848:	e033      	b.n	18b2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	8b5b      	ldrh	r3, [r3, #26]
    184e:	b29b      	uxth	r3, r3
    1850:	001a      	movs	r2, r3
    1852:	2320      	movs	r3, #32
    1854:	4013      	ands	r3, r2
    1856:	d101      	bne.n	185c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1858:	2341      	movs	r3, #65	; 0x41
    185a:	e047      	b.n	18ec <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	0018      	movs	r0, r3
    1860:	4b24      	ldr	r3, [pc, #144]	; (18f4 <_i2c_master_write_packet+0x164>)
    1862:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1864:	683b      	ldr	r3, [r7, #0]
    1866:	685a      	ldr	r2, [r3, #4]
    1868:	2312      	movs	r3, #18
    186a:	18fb      	adds	r3, r7, r3
    186c:	881b      	ldrh	r3, [r3, #0]
    186e:	2112      	movs	r1, #18
    1870:	1879      	adds	r1, r7, r1
    1872:	1c58      	adds	r0, r3, #1
    1874:	8008      	strh	r0, [r1, #0]
    1876:	18d3      	adds	r3, r2, r3
    1878:	7819      	ldrb	r1, [r3, #0]
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	2228      	movs	r2, #40	; 0x28
    187e:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1880:	2317      	movs	r3, #23
    1882:	18fc      	adds	r4, r7, r3
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	0018      	movs	r0, r3
    1888:	4b1d      	ldr	r3, [pc, #116]	; (1900 <_i2c_master_write_packet+0x170>)
    188a:	4798      	blx	r3
    188c:	0003      	movs	r3, r0
    188e:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1890:	2317      	movs	r3, #23
    1892:	18fb      	adds	r3, r7, r3
    1894:	781b      	ldrb	r3, [r3, #0]
    1896:	2b00      	cmp	r3, #0
    1898:	d115      	bne.n	18c6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	8b5b      	ldrh	r3, [r3, #26]
    189e:	b29b      	uxth	r3, r3
    18a0:	001a      	movs	r2, r3
    18a2:	2304      	movs	r3, #4
    18a4:	4013      	ands	r3, r2
    18a6:	d004      	beq.n	18b2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    18a8:	2317      	movs	r3, #23
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	221e      	movs	r2, #30
    18ae:	701a      	strb	r2, [r3, #0]
				break;
    18b0:	e00a      	b.n	18c8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    18b2:	2314      	movs	r3, #20
    18b4:	18fb      	adds	r3, r7, r3
    18b6:	881b      	ldrh	r3, [r3, #0]
    18b8:	2214      	movs	r2, #20
    18ba:	18ba      	adds	r2, r7, r2
    18bc:	1e59      	subs	r1, r3, #1
    18be:	8011      	strh	r1, [r2, #0]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d1c2      	bne.n	184a <_i2c_master_write_packet+0xba>
    18c4:	e000      	b.n	18c8 <_i2c_master_write_packet+0x138>
				break;
    18c6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	7a9b      	ldrb	r3, [r3, #10]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d00a      	beq.n	18e6 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	0018      	movs	r0, r3
    18d4:	4b07      	ldr	r3, [pc, #28]	; (18f4 <_i2c_master_write_packet+0x164>)
    18d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    18d8:	68fb      	ldr	r3, [r7, #12]
    18da:	685b      	ldr	r3, [r3, #4]
    18dc:	22c0      	movs	r2, #192	; 0xc0
    18de:	0292      	lsls	r2, r2, #10
    18e0:	431a      	orrs	r2, r3
    18e2:	68fb      	ldr	r3, [r7, #12]
    18e4:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    18e6:	2317      	movs	r3, #23
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	781b      	ldrb	r3, [r3, #0]
}
    18ec:	0018      	movs	r0, r3
    18ee:	46bd      	mov	sp, r7
    18f0:	b007      	add	sp, #28
    18f2:	bd90      	pop	{r4, r7, pc}
    18f4:	00000d81 	.word	0x00000d81
    18f8:	00001489 	.word	0x00001489
    18fc:	fffbffff 	.word	0xfffbffff
    1900:	0000142b 	.word	0x0000142b
    1904:	000013cd 	.word	0x000013cd

00001908 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1908:	b580      	push	{r7, lr}
    190a:	b082      	sub	sp, #8
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
    1910:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	8b9b      	ldrh	r3, [r3, #28]
    1916:	b29b      	uxth	r3, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d001      	beq.n	1920 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    191c:	2305      	movs	r3, #5
    191e:	e00c      	b.n	193a <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	2201      	movs	r2, #1
    1924:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	2201      	movs	r2, #1
    192a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    192c:	683a      	ldr	r2, [r7, #0]
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	0011      	movs	r1, r2
    1932:	0018      	movs	r0, r3
    1934:	4b03      	ldr	r3, [pc, #12]	; (1944 <i2c_master_write_packet_wait+0x3c>)
    1936:	4798      	blx	r3
    1938:	0003      	movs	r3, r0
}
    193a:	0018      	movs	r0, r3
    193c:	46bd      	mov	sp, r7
    193e:	b002      	add	sp, #8
    1940:	bd80      	pop	{r7, pc}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	00001791 	.word	0x00001791

00001948 <i2c_master_is_syncing>:
{
    1948:	b580      	push	{r7, lr}
    194a:	b084      	sub	sp, #16
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	69db      	ldr	r3, [r3, #28]
    195a:	2207      	movs	r2, #7
    195c:	4013      	ands	r3, r2
    195e:	1e5a      	subs	r2, r3, #1
    1960:	4193      	sbcs	r3, r2
    1962:	b2db      	uxtb	r3, r3
}
    1964:	0018      	movs	r0, r3
    1966:	46bd      	mov	sp, r7
    1968:	b004      	add	sp, #16
    196a:	bd80      	pop	{r7, pc}

0000196c <_i2c_master_wait_for_sync>:
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1974:	46c0      	nop			; (mov r8, r8)
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	0018      	movs	r0, r3
    197a:	4b04      	ldr	r3, [pc, #16]	; (198c <_i2c_master_wait_for_sync+0x20>)
    197c:	4798      	blx	r3
    197e:	1e03      	subs	r3, r0, #0
    1980:	d1f9      	bne.n	1976 <_i2c_master_wait_for_sync+0xa>
}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	46bd      	mov	sp, r7
    1986:	b002      	add	sp, #8
    1988:	bd80      	pop	{r7, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	00001949 	.word	0x00001949

00001990 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1990:	b580      	push	{r7, lr}
    1992:	b084      	sub	sp, #16
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	011b      	lsls	r3, r3, #4
    19a4:	0fdb      	lsrs	r3, r3, #31
    19a6:	b2db      	uxtb	r3, r3
    19a8:	001a      	movs	r2, r3
    19aa:	230b      	movs	r3, #11
    19ac:	18fb      	adds	r3, r7, r3
    19ae:	1e51      	subs	r1, r2, #1
    19b0:	418a      	sbcs	r2, r1
    19b2:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    19b4:	2308      	movs	r3, #8
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	687a      	ldr	r2, [r7, #4]
    19ba:	8b52      	ldrh	r2, [r2, #26]
    19bc:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	8b9b      	ldrh	r3, [r3, #28]
    19c2:	b29a      	uxth	r2, r3
    19c4:	2308      	movs	r3, #8
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	2108      	movs	r1, #8
    19ca:	1879      	adds	r1, r7, r1
    19cc:	8809      	ldrh	r1, [r1, #0]
    19ce:	1a8a      	subs	r2, r1, r2
    19d0:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	8b9b      	ldrh	r3, [r3, #28]
    19d6:	b29b      	uxth	r3, r3
    19d8:	3b01      	subs	r3, #1
    19da:	b29a      	uxth	r2, r3
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    19e0:	230b      	movs	r3, #11
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d010      	beq.n	1a0c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	7adb      	ldrb	r3, [r3, #11]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d01c      	beq.n	1a2c <_i2c_master_read+0x9c>
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	8b9b      	ldrh	r3, [r3, #28]
    19f6:	b29b      	uxth	r3, r3
    19f8:	2b01      	cmp	r3, #1
    19fa:	d117      	bne.n	1a2c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19fc:	68fb      	ldr	r3, [r7, #12]
    19fe:	685b      	ldr	r3, [r3, #4]
    1a00:	2280      	movs	r2, #128	; 0x80
    1a02:	02d2      	lsls	r2, r2, #11
    1a04:	431a      	orrs	r2, r3
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	605a      	str	r2, [r3, #4]
    1a0a:	e00f      	b.n	1a2c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	7adb      	ldrb	r3, [r3, #11]
    1a10:	2b00      	cmp	r3, #0
    1a12:	d00b      	beq.n	1a2c <_i2c_master_read+0x9c>
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	8b9b      	ldrh	r3, [r3, #28]
    1a18:	b29b      	uxth	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d106      	bne.n	1a2c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	2280      	movs	r2, #128	; 0x80
    1a24:	02d2      	lsls	r2, r2, #11
    1a26:	431a      	orrs	r2, r3
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	8b9b      	ldrh	r3, [r3, #28]
    1a30:	b29b      	uxth	r3, r3
    1a32:	2b00      	cmp	r3, #0
    1a34:	d10e      	bne.n	1a54 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	7a9b      	ldrb	r3, [r3, #10]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d00a      	beq.n	1a54 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	0018      	movs	r0, r3
    1a42:	4b0e      	ldr	r3, [pc, #56]	; (1a7c <_i2c_master_read+0xec>)
    1a44:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	685b      	ldr	r3, [r3, #4]
    1a4a:	22c0      	movs	r2, #192	; 0xc0
    1a4c:	0292      	lsls	r2, r2, #10
    1a4e:	431a      	orrs	r2, r3
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	0018      	movs	r0, r3
    1a58:	4b08      	ldr	r3, [pc, #32]	; (1a7c <_i2c_master_read+0xec>)
    1a5a:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	6a1a      	ldr	r2, [r3, #32]
    1a60:	2308      	movs	r3, #8
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	881b      	ldrh	r3, [r3, #0]
    1a66:	18d3      	adds	r3, r2, r3
    1a68:	68fa      	ldr	r2, [r7, #12]
    1a6a:	2128      	movs	r1, #40	; 0x28
    1a6c:	5c52      	ldrb	r2, [r2, r1]
    1a6e:	b2d2      	uxtb	r2, r2
    1a70:	701a      	strb	r2, [r3, #0]
}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	46bd      	mov	sp, r7
    1a76:	b004      	add	sp, #16
    1a78:	bd80      	pop	{r7, pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	0000196d 	.word	0x0000196d

00001a80 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b084      	sub	sp, #16
    1a84:	af00      	add	r7, sp, #0
    1a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	8b5b      	ldrh	r3, [r3, #26]
    1a92:	b29b      	uxth	r3, r3
    1a94:	001a      	movs	r2, r3
    1a96:	2304      	movs	r3, #4
    1a98:	4013      	ands	r3, r2
    1a9a:	d004      	beq.n	1aa6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	2225      	movs	r2, #37	; 0x25
    1aa0:	211e      	movs	r1, #30
    1aa2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1aa4:	e024      	b.n	1af0 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1aa6:	230a      	movs	r3, #10
    1aa8:	18fb      	adds	r3, r7, r3
    1aaa:	687a      	ldr	r2, [r7, #4]
    1aac:	8b52      	ldrh	r2, [r2, #26]
    1aae:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	8b9b      	ldrh	r3, [r3, #28]
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	230a      	movs	r3, #10
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	210a      	movs	r1, #10
    1abc:	1879      	adds	r1, r7, r1
    1abe:	8809      	ldrh	r1, [r1, #0]
    1ac0:	1a8a      	subs	r2, r1, r2
    1ac2:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	8b9b      	ldrh	r3, [r3, #28]
    1ac8:	b29b      	uxth	r3, r3
    1aca:	3b01      	subs	r3, #1
    1acc:	b29a      	uxth	r2, r3
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	0018      	movs	r0, r3
    1ad6:	4b08      	ldr	r3, [pc, #32]	; (1af8 <_i2c_master_write+0x78>)
    1ad8:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	6a1a      	ldr	r2, [r3, #32]
    1ade:	230a      	movs	r3, #10
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	881b      	ldrh	r3, [r3, #0]
    1ae4:	18d3      	adds	r3, r2, r3
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	b2d9      	uxtb	r1, r3
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	2228      	movs	r2, #40	; 0x28
    1aee:	5499      	strb	r1, [r3, r2]
}
    1af0:	46bd      	mov	sp, r7
    1af2:	b004      	add	sp, #16
    1af4:	bd80      	pop	{r7, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	0000196d 	.word	0x0000196d

00001afc <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b084      	sub	sp, #16
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	7e1b      	ldrb	r3, [r3, #24]
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	001a      	movs	r2, r3
    1b12:	2301      	movs	r3, #1
    1b14:	4013      	ands	r3, r2
    1b16:	d02b      	beq.n	1b70 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b18:	68fb      	ldr	r3, [r7, #12]
    1b1a:	2201      	movs	r2, #1
    1b1c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1b1e:	68fb      	ldr	r3, [r7, #12]
    1b20:	8b5b      	ldrh	r3, [r3, #26]
    1b22:	b29b      	uxth	r3, r3
    1b24:	001a      	movs	r2, r3
    1b26:	2302      	movs	r3, #2
    1b28:	4013      	ands	r3, r2
    1b2a:	d004      	beq.n	1b36 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	2225      	movs	r2, #37	; 0x25
    1b30:	2141      	movs	r1, #65	; 0x41
    1b32:	5499      	strb	r1, [r3, r2]
    1b34:	e01c      	b.n	1b70 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1b36:	68fb      	ldr	r3, [r7, #12]
    1b38:	8b5b      	ldrh	r3, [r3, #26]
    1b3a:	b29b      	uxth	r3, r3
    1b3c:	001a      	movs	r2, r3
    1b3e:	2304      	movs	r3, #4
    1b40:	4013      	ands	r3, r2
    1b42:	d015      	beq.n	1b70 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1b44:	687b      	ldr	r3, [r7, #4]
    1b46:	2225      	movs	r2, #37	; 0x25
    1b48:	2118      	movs	r1, #24
    1b4a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	2200      	movs	r2, #0
    1b50:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	7a9b      	ldrb	r3, [r3, #10]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d00a      	beq.n	1b70 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	0018      	movs	r0, r3
    1b5e:	4b13      	ldr	r3, [pc, #76]	; (1bac <_i2c_master_async_address_response+0xb0>)
    1b60:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b62:	68fb      	ldr	r3, [r7, #12]
    1b64:	685b      	ldr	r3, [r3, #4]
    1b66:	22c0      	movs	r2, #192	; 0xc0
    1b68:	0292      	lsls	r2, r2, #10
    1b6a:	431a      	orrs	r2, r3
    1b6c:	68fb      	ldr	r3, [r7, #12]
    1b6e:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	8b9b      	ldrh	r3, [r3, #28]
    1b74:	b29a      	uxth	r2, r3
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	2225      	movs	r2, #37	; 0x25
    1b7e:	5c9b      	ldrb	r3, [r3, r2]
    1b80:	b2db      	uxtb	r3, r3
    1b82:	2b05      	cmp	r3, #5
    1b84:	d10e      	bne.n	1ba4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	2224      	movs	r2, #36	; 0x24
    1b8a:	5c9b      	ldrb	r3, [r3, r2]
    1b8c:	b2db      	uxtb	r3, r3
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d104      	bne.n	1b9c <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	0018      	movs	r0, r3
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <_i2c_master_async_address_response+0xb4>)
    1b98:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1b9a:	e003      	b.n	1ba4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	0018      	movs	r0, r3
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <_i2c_master_async_address_response+0xb8>)
    1ba2:	4798      	blx	r3
}
    1ba4:	46c0      	nop			; (mov r8, r8)
    1ba6:	46bd      	mov	sp, r7
    1ba8:	b004      	add	sp, #16
    1baa:	bd80      	pop	{r7, pc}
    1bac:	0000196d 	.word	0x0000196d
    1bb0:	00001a81 	.word	0x00001a81
    1bb4:	00001991 	.word	0x00001991

00001bb8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b086      	sub	sp, #24
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	0002      	movs	r2, r0
    1bc0:	1dfb      	adds	r3, r7, #7
    1bc2:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1bc4:	1dfb      	adds	r3, r7, #7
    1bc6:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1bc8:	4b93      	ldr	r3, [pc, #588]	; (1e18 <_i2c_master_interrupt_handler+0x260>)
    1bca:	0092      	lsls	r2, r2, #2
    1bcc:	58d3      	ldr	r3, [r2, r3]
    1bce:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1bd0:	697b      	ldr	r3, [r7, #20]
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1bd6:	693b      	ldr	r3, [r7, #16]
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	011b      	lsls	r3, r3, #4
    1bdc:	0fdb      	lsrs	r3, r3, #31
    1bde:	b2db      	uxtb	r3, r3
    1be0:	001a      	movs	r2, r3
    1be2:	230f      	movs	r3, #15
    1be4:	18fb      	adds	r3, r7, r3
    1be6:	1e51      	subs	r1, r2, #1
    1be8:	418a      	sbcs	r2, r1
    1bea:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1bec:	230e      	movs	r3, #14
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	697a      	ldr	r2, [r7, #20]
    1bf2:	7e52      	ldrb	r2, [r2, #25]
    1bf4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1bf6:	697b      	ldr	r3, [r7, #20]
    1bf8:	7e1b      	ldrb	r3, [r3, #24]
    1bfa:	b2da      	uxtb	r2, r3
    1bfc:	230e      	movs	r3, #14
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	210e      	movs	r1, #14
    1c02:	1879      	adds	r1, r7, r1
    1c04:	7809      	ldrb	r1, [r1, #0]
    1c06:	400a      	ands	r2, r1
    1c08:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1c0a:	697b      	ldr	r3, [r7, #20]
    1c0c:	8b5b      	ldrh	r3, [r3, #26]
    1c0e:	b29b      	uxth	r3, r3
    1c10:	2b00      	cmp	r3, #0
    1c12:	d109      	bne.n	1c28 <_i2c_master_interrupt_handler+0x70>
    1c14:	697b      	ldr	r3, [r7, #20]
    1c16:	8b9b      	ldrh	r3, [r3, #28]
    1c18:	b29b      	uxth	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d004      	beq.n	1c28 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1c1e:	697b      	ldr	r3, [r7, #20]
    1c20:	0018      	movs	r0, r3
    1c22:	4b7e      	ldr	r3, [pc, #504]	; (1e1c <_i2c_master_interrupt_handler+0x264>)
    1c24:	4798      	blx	r3
    1c26:	e070      	b.n	1d0a <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c28:	697b      	ldr	r3, [r7, #20]
    1c2a:	8b5b      	ldrh	r3, [r3, #26]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d039      	beq.n	1ca6 <_i2c_master_interrupt_handler+0xee>
    1c32:	697b      	ldr	r3, [r7, #20]
    1c34:	8b9b      	ldrh	r3, [r3, #28]
    1c36:	b29b      	uxth	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d134      	bne.n	1ca6 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1c3c:	697b      	ldr	r3, [r7, #20]
    1c3e:	2225      	movs	r2, #37	; 0x25
    1c40:	5c9b      	ldrb	r3, [r3, r2]
    1c42:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c44:	2b05      	cmp	r3, #5
    1c46:	d12e      	bne.n	1ca6 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	2224      	movs	r2, #36	; 0x24
    1c4c:	5c9b      	ldrb	r3, [r3, r2]
    1c4e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1c50:	2b00      	cmp	r3, #0
    1c52:	d128      	bne.n	1ca6 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1c54:	693b      	ldr	r3, [r7, #16]
    1c56:	2203      	movs	r2, #3
    1c58:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1c5a:	697b      	ldr	r3, [r7, #20]
    1c5c:	2200      	movs	r2, #0
    1c5e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1c60:	697b      	ldr	r3, [r7, #20]
    1c62:	2225      	movs	r2, #37	; 0x25
    1c64:	2100      	movs	r1, #0
    1c66:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1c68:	697b      	ldr	r3, [r7, #20]
    1c6a:	7a9b      	ldrb	r3, [r3, #10]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d00b      	beq.n	1c88 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1c70:	697b      	ldr	r3, [r7, #20]
    1c72:	0018      	movs	r0, r3
    1c74:	4b6a      	ldr	r3, [pc, #424]	; (1e20 <_i2c_master_interrupt_handler+0x268>)
    1c76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c78:	693b      	ldr	r3, [r7, #16]
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	22c0      	movs	r2, #192	; 0xc0
    1c7e:	0292      	lsls	r2, r2, #10
    1c80:	431a      	orrs	r2, r3
    1c82:	693b      	ldr	r3, [r7, #16]
    1c84:	605a      	str	r2, [r3, #4]
    1c86:	e002      	b.n	1c8e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c88:	693b      	ldr	r3, [r7, #16]
    1c8a:	2201      	movs	r2, #1
    1c8c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c8e:	230e      	movs	r3, #14
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	2201      	movs	r2, #1
    1c96:	4013      	ands	r3, r2
    1c98:	d037      	beq.n	1d0a <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c9a:	697b      	ldr	r3, [r7, #20]
    1c9c:	68db      	ldr	r3, [r3, #12]
    1c9e:	697a      	ldr	r2, [r7, #20]
    1ca0:	0010      	movs	r0, r2
    1ca2:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1ca4:	e031      	b.n	1d0a <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1ca6:	697b      	ldr	r3, [r7, #20]
    1ca8:	8b5b      	ldrh	r3, [r3, #26]
    1caa:	b29b      	uxth	r3, r3
    1cac:	2b00      	cmp	r3, #0
    1cae:	d02c      	beq.n	1d0a <_i2c_master_interrupt_handler+0x152>
    1cb0:	697b      	ldr	r3, [r7, #20]
    1cb2:	8b9b      	ldrh	r3, [r3, #28]
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d027      	beq.n	1d0a <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1cba:	693b      	ldr	r3, [r7, #16]
    1cbc:	8b5b      	ldrh	r3, [r3, #26]
    1cbe:	b29b      	uxth	r3, r3
    1cc0:	001a      	movs	r2, r3
    1cc2:	2320      	movs	r3, #32
    1cc4:	4013      	ands	r3, r2
    1cc6:	d111      	bne.n	1cec <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cc8:	230f      	movs	r3, #15
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2201      	movs	r2, #1
    1cd0:	4053      	eors	r3, r2
    1cd2:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d104      	bne.n	1ce2 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cd8:	697b      	ldr	r3, [r7, #20]
    1cda:	8b9b      	ldrh	r3, [r3, #28]
    1cdc:	b29b      	uxth	r3, r3
    1cde:	2b01      	cmp	r3, #1
    1ce0:	d004      	beq.n	1cec <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1ce2:	697b      	ldr	r3, [r7, #20]
    1ce4:	2225      	movs	r2, #37	; 0x25
    1ce6:	2141      	movs	r1, #65	; 0x41
    1ce8:	5499      	strb	r1, [r3, r2]
    1cea:	e00e      	b.n	1d0a <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1cec:	697b      	ldr	r3, [r7, #20]
    1cee:	2224      	movs	r2, #36	; 0x24
    1cf0:	5c9b      	ldrb	r3, [r3, r2]
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d104      	bne.n	1d02 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1cf8:	697b      	ldr	r3, [r7, #20]
    1cfa:	0018      	movs	r0, r3
    1cfc:	4b49      	ldr	r3, [pc, #292]	; (1e24 <_i2c_master_interrupt_handler+0x26c>)
    1cfe:	4798      	blx	r3
    1d00:	e003      	b.n	1d0a <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1d02:	697b      	ldr	r3, [r7, #20]
    1d04:	0018      	movs	r0, r3
    1d06:	4b48      	ldr	r3, [pc, #288]	; (1e28 <_i2c_master_interrupt_handler+0x270>)
    1d08:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1d0a:	697b      	ldr	r3, [r7, #20]
    1d0c:	8b5b      	ldrh	r3, [r3, #26]
    1d0e:	b29b      	uxth	r3, r3
    1d10:	2b00      	cmp	r3, #0
    1d12:	d047      	beq.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
    1d14:	697b      	ldr	r3, [r7, #20]
    1d16:	8b9b      	ldrh	r3, [r3, #28]
    1d18:	b29b      	uxth	r3, r3
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d142      	bne.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1d1e:	697b      	ldr	r3, [r7, #20]
    1d20:	2225      	movs	r2, #37	; 0x25
    1d22:	5c9b      	ldrb	r3, [r3, r2]
    1d24:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1d26:	2b05      	cmp	r3, #5
    1d28:	d13c      	bne.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1d2a:	697b      	ldr	r3, [r7, #20]
    1d2c:	2224      	movs	r2, #36	; 0x24
    1d2e:	5c9b      	ldrb	r3, [r3, r2]
    1d30:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1d32:	2b01      	cmp	r3, #1
    1d34:	d136      	bne.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1d36:	693b      	ldr	r3, [r7, #16]
    1d38:	7e1b      	ldrb	r3, [r3, #24]
    1d3a:	b2db      	uxtb	r3, r3
    1d3c:	001a      	movs	r2, r3
    1d3e:	2302      	movs	r3, #2
    1d40:	4013      	ands	r3, r2
    1d42:	d002      	beq.n	1d4a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d44:	693b      	ldr	r3, [r7, #16]
    1d46:	2202      	movs	r2, #2
    1d48:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1d4a:	693b      	ldr	r3, [r7, #16]
    1d4c:	2203      	movs	r2, #3
    1d4e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1d50:	697b      	ldr	r3, [r7, #20]
    1d52:	2200      	movs	r2, #0
    1d54:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1d56:	697b      	ldr	r3, [r7, #20]
    1d58:	2225      	movs	r2, #37	; 0x25
    1d5a:	2100      	movs	r1, #0
    1d5c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1d5e:	230e      	movs	r3, #14
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	2202      	movs	r2, #2
    1d66:	4013      	ands	r3, r2
    1d68:	d00b      	beq.n	1d82 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1d6a:	697b      	ldr	r3, [r7, #20]
    1d6c:	2224      	movs	r2, #36	; 0x24
    1d6e:	5c9b      	ldrb	r3, [r3, r2]
    1d70:	b2db      	uxtb	r3, r3
    1d72:	2b01      	cmp	r3, #1
    1d74:	d105      	bne.n	1d82 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1d76:	697b      	ldr	r3, [r7, #20]
    1d78:	691b      	ldr	r3, [r3, #16]
    1d7a:	697a      	ldr	r2, [r7, #20]
    1d7c:	0010      	movs	r0, r2
    1d7e:	4798      	blx	r3
    1d80:	e010      	b.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1d82:	230e      	movs	r3, #14
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	2201      	movs	r2, #1
    1d8a:	4013      	ands	r3, r2
    1d8c:	d00a      	beq.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1d8e:	697b      	ldr	r3, [r7, #20]
    1d90:	2224      	movs	r2, #36	; 0x24
    1d92:	5c9b      	ldrb	r3, [r3, r2]
    1d94:	b2db      	uxtb	r3, r3
    1d96:	2b00      	cmp	r3, #0
    1d98:	d104      	bne.n	1da4 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1d9a:	697b      	ldr	r3, [r7, #20]
    1d9c:	68db      	ldr	r3, [r3, #12]
    1d9e:	697a      	ldr	r2, [r7, #20]
    1da0:	0010      	movs	r0, r2
    1da2:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1da4:	697b      	ldr	r3, [r7, #20]
    1da6:	2225      	movs	r2, #37	; 0x25
    1da8:	5c9b      	ldrb	r3, [r3, r2]
    1daa:	b2db      	uxtb	r3, r3
    1dac:	2b05      	cmp	r3, #5
    1dae:	d02e      	beq.n	1e0e <_i2c_master_interrupt_handler+0x256>
    1db0:	697b      	ldr	r3, [r7, #20]
    1db2:	2225      	movs	r2, #37	; 0x25
    1db4:	5c9b      	ldrb	r3, [r3, r2]
    1db6:	b2db      	uxtb	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d028      	beq.n	1e0e <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1dbc:	693b      	ldr	r3, [r7, #16]
    1dbe:	2203      	movs	r2, #3
    1dc0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1dc2:	697b      	ldr	r3, [r7, #20]
    1dc4:	2200      	movs	r2, #0
    1dc6:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1dc8:	697b      	ldr	r3, [r7, #20]
    1dca:	2200      	movs	r2, #0
    1dcc:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1dce:	697b      	ldr	r3, [r7, #20]
    1dd0:	2225      	movs	r2, #37	; 0x25
    1dd2:	5c9b      	ldrb	r3, [r3, r2]
    1dd4:	b2db      	uxtb	r3, r3
    1dd6:	2b41      	cmp	r3, #65	; 0x41
    1dd8:	d00e      	beq.n	1df8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1dda:	697b      	ldr	r3, [r7, #20]
    1ddc:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1dde:	2b00      	cmp	r3, #0
    1de0:	d00a      	beq.n	1df8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1de2:	697b      	ldr	r3, [r7, #20]
    1de4:	0018      	movs	r0, r3
    1de6:	4b0e      	ldr	r3, [pc, #56]	; (1e20 <_i2c_master_interrupt_handler+0x268>)
    1de8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1dea:	693b      	ldr	r3, [r7, #16]
    1dec:	685b      	ldr	r3, [r3, #4]
    1dee:	22e0      	movs	r2, #224	; 0xe0
    1df0:	02d2      	lsls	r2, r2, #11
    1df2:	431a      	orrs	r2, r3
    1df4:	693b      	ldr	r3, [r7, #16]
    1df6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1df8:	230e      	movs	r3, #14
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	2204      	movs	r2, #4
    1e00:	4013      	ands	r3, r2
    1e02:	d004      	beq.n	1e0e <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1e04:	697b      	ldr	r3, [r7, #20]
    1e06:	695b      	ldr	r3, [r3, #20]
    1e08:	697a      	ldr	r2, [r7, #20]
    1e0a:	0010      	movs	r0, r2
    1e0c:	4798      	blx	r3
		}
	}
}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	46bd      	mov	sp, r7
    1e12:	b006      	add	sp, #24
    1e14:	bd80      	pop	{r7, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	2000039c 	.word	0x2000039c
    1e1c:	00001afd 	.word	0x00001afd
    1e20:	0000196d 	.word	0x0000196d
    1e24:	00001a81 	.word	0x00001a81
    1e28:	00001991 	.word	0x00001991

00001e2c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b086      	sub	sp, #24
    1e30:	af00      	add	r7, sp, #0
    1e32:	60f8      	str	r0, [r7, #12]
    1e34:	60b9      	str	r1, [r7, #8]
    1e36:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1e38:	2300      	movs	r3, #0
    1e3a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1e3c:	68fb      	ldr	r3, [r7, #12]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d012      	beq.n	1e68 <_read+0x3c>
		return -1;
    1e42:	2301      	movs	r3, #1
    1e44:	425b      	negs	r3, r3
    1e46:	e013      	b.n	1e70 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <_read+0x4c>)
    1e4a:	681a      	ldr	r2, [r3, #0]
    1e4c:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <_read+0x50>)
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	68b9      	ldr	r1, [r7, #8]
    1e52:	0018      	movs	r0, r3
    1e54:	4790      	blx	r2
		ptr++;
    1e56:	68bb      	ldr	r3, [r7, #8]
    1e58:	3301      	adds	r3, #1
    1e5a:	60bb      	str	r3, [r7, #8]
		nChars++;
    1e5c:	697b      	ldr	r3, [r7, #20]
    1e5e:	3301      	adds	r3, #1
    1e60:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	3b01      	subs	r3, #1
    1e66:	607b      	str	r3, [r7, #4]
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	dcec      	bgt.n	1e48 <_read+0x1c>
	}
	return nChars;
    1e6e:	697b      	ldr	r3, [r7, #20]
}
    1e70:	0018      	movs	r0, r3
    1e72:	46bd      	mov	sp, r7
    1e74:	b006      	add	sp, #24
    1e76:	bd80      	pop	{r7, pc}
    1e78:	2000036c 	.word	0x2000036c
    1e7c:	20000374 	.word	0x20000374

00001e80 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b086      	sub	sp, #24
    1e84:	af00      	add	r7, sp, #0
    1e86:	60f8      	str	r0, [r7, #12]
    1e88:	60b9      	str	r1, [r7, #8]
    1e8a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1e8c:	2300      	movs	r3, #0
    1e8e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	2b01      	cmp	r3, #1
    1e94:	d01d      	beq.n	1ed2 <_write+0x52>
    1e96:	68fb      	ldr	r3, [r7, #12]
    1e98:	2b02      	cmp	r3, #2
    1e9a:	d01a      	beq.n	1ed2 <_write+0x52>
    1e9c:	68fb      	ldr	r3, [r7, #12]
    1e9e:	2b03      	cmp	r3, #3
    1ea0:	d017      	beq.n	1ed2 <_write+0x52>
		return -1;
    1ea2:	2301      	movs	r3, #1
    1ea4:	425b      	negs	r3, r3
    1ea6:	e018      	b.n	1eda <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1ea8:	4b0e      	ldr	r3, [pc, #56]	; (1ee4 <_write+0x64>)
    1eaa:	681a      	ldr	r2, [r3, #0]
    1eac:	4b0e      	ldr	r3, [pc, #56]	; (1ee8 <_write+0x68>)
    1eae:	6818      	ldr	r0, [r3, #0]
    1eb0:	68bb      	ldr	r3, [r7, #8]
    1eb2:	1c59      	adds	r1, r3, #1
    1eb4:	60b9      	str	r1, [r7, #8]
    1eb6:	781b      	ldrb	r3, [r3, #0]
    1eb8:	0019      	movs	r1, r3
    1eba:	4790      	blx	r2
    1ebc:	1e03      	subs	r3, r0, #0
    1ebe:	da02      	bge.n	1ec6 <_write+0x46>
			return -1;
    1ec0:	2301      	movs	r3, #1
    1ec2:	425b      	negs	r3, r3
    1ec4:	e009      	b.n	1eda <_write+0x5a>
		}
		++nChars;
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	3301      	adds	r3, #1
    1eca:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	3b01      	subs	r3, #1
    1ed0:	607b      	str	r3, [r7, #4]
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d1e7      	bne.n	1ea8 <_write+0x28>
	}
	return nChars;
    1ed8:	697b      	ldr	r3, [r7, #20]
}
    1eda:	0018      	movs	r0, r3
    1edc:	46bd      	mov	sp, r7
    1ede:	b006      	add	sp, #24
    1ee0:	bd80      	pop	{r7, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	20000370 	.word	0x20000370
    1ee8:	20000374 	.word	0x20000374

00001eec <atcacert_create_csr>:
    return status;
}


int atcacert_create_csr(const atcacert_def_t* csr_def, uint8_t* csr, size_t* csr_size)
{
    1eec:	b590      	push	{r4, r7, lr}
    1eee:	b0b5      	sub	sp, #212	; 0xd4
    1ef0:	af02      	add	r7, sp, #8
    1ef2:	60f8      	str	r0, [r7, #12]
    1ef4:	60b9      	str	r1, [r7, #8]
    1ef6:	607a      	str	r2, [r7, #4]
    ATCA_STATUS status = ATCA_SUCCESS;
    1ef8:	23c7      	movs	r3, #199	; 0xc7
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	2200      	movs	r2, #0
    1efe:	701a      	strb	r2, [r3, #0]
    uint8_t pubkey[ATCA_PUB_KEY_SIZE] = { 0 };
    1f00:	2374      	movs	r3, #116	; 0x74
    1f02:	18fb      	adds	r3, r7, r3
    1f04:	0018      	movs	r0, r3
    1f06:	2340      	movs	r3, #64	; 0x40
    1f08:	001a      	movs	r2, r3
    1f0a:	2100      	movs	r1, #0
    1f0c:	4b8a      	ldr	r3, [pc, #552]	; (2138 <STACK_SIZE+0x138>)
    1f0e:	4798      	blx	r3
    uint8_t sig[ATCA_SIG_SIZE] = { 0 };
    1f10:	2334      	movs	r3, #52	; 0x34
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	0018      	movs	r0, r3
    1f16:	2340      	movs	r3, #64	; 0x40
    1f18:	001a      	movs	r2, r3
    1f1a:	2100      	movs	r1, #0
    1f1c:	4b86      	ldr	r3, [pc, #536]	; (2138 <STACK_SIZE+0x138>)
    1f1e:	4798      	blx	r3
    const atcacert_device_loc_t* pubDevLoc = NULL;
    1f20:	2300      	movs	r3, #0
    1f22:	22c0      	movs	r2, #192	; 0xc0
    1f24:	18ba      	adds	r2, r7, r2
    1f26:	6013      	str	r3, [r2, #0]
    const atcacert_cert_loc_t* pubLoc = NULL;
    1f28:	2300      	movs	r3, #0
    1f2a:	22bc      	movs	r2, #188	; 0xbc
    1f2c:	18ba      	adds	r2, r7, r2
    1f2e:	6013      	str	r3, [r2, #0]
    uint8_t keySlot = 0;
    1f30:	23bb      	movs	r3, #187	; 0xbb
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	2200      	movs	r2, #0
    1f36:	701a      	strb	r2, [r3, #0]
    uint8_t privKeySlot = 0;
    1f38:	23ba      	movs	r3, #186	; 0xba
    1f3a:	18fb      	adds	r3, r7, r3
    1f3c:	2200      	movs	r2, #0
    1f3e:	701a      	strb	r2, [r3, #0]
    uint8_t tbsDigest[ATCA_BLOCK_SIZE] = { 0 };
    1f40:	2314      	movs	r3, #20
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	0018      	movs	r0, r3
    1f46:	2320      	movs	r3, #32
    1f48:	001a      	movs	r2, r3
    1f4a:	2100      	movs	r1, #0
    1f4c:	4b7a      	ldr	r3, [pc, #488]	; (2138 <STACK_SIZE+0x138>)
    1f4e:	4798      	blx	r3
    size_t csr_max_size = 0;
    1f50:	2300      	movs	r3, #0
    1f52:	22b4      	movs	r2, #180	; 0xb4
    1f54:	18ba      	adds	r2, r7, r2
    1f56:	6013      	str	r3, [r2, #0]

    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
    1f58:	68fb      	ldr	r3, [r7, #12]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d008      	beq.n	1f70 <atcacert_create_csr+0x84>
    1f5e:	68bb      	ldr	r3, [r7, #8]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d005      	beq.n	1f70 <atcacert_create_csr+0x84>
    1f64:	68bb      	ldr	r3, [r7, #8]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d002      	beq.n	1f70 <atcacert_create_csr+0x84>
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d104      	bne.n	1f7a <atcacert_create_csr+0x8e>
        {
            status = ATCACERT_E_BAD_PARAMS;
    1f70:	23c7      	movs	r3, #199	; 0xc7
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	2202      	movs	r2, #2
    1f76:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Null input parameter");
    1f78:	e0d6      	b.n	2128 <STACK_SIZE+0x128>
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	681a      	ldr	r2, [r3, #0]
    1f7e:	68fb      	ldr	r3, [r7, #12]
    1f80:	214a      	movs	r1, #74	; 0x4a
    1f82:	5c59      	ldrb	r1, [r3, r1]
    1f84:	204b      	movs	r0, #75	; 0x4b
    1f86:	5c1b      	ldrb	r3, [r3, r0]
    1f88:	021b      	lsls	r3, r3, #8
    1f8a:	430b      	orrs	r3, r1
    1f8c:	b29b      	uxth	r3, r3
    1f8e:	429a      	cmp	r2, r3
    1f90:	d204      	bcs.n	1f9c <atcacert_create_csr+0xb0>
        {
            status = ATCACERT_E_BAD_PARAMS;
    1f92:	23c7      	movs	r3, #199	; 0xc7
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	2202      	movs	r2, #2
    1f98:	701a      	strb	r2, [r3, #0]
            BREAK(status, "CSR buffer size too small");
    1f9a:	e0c5      	b.n	2128 <STACK_SIZE+0x128>
        }
        // Copy the CSR template into the CSR that will be returned
        memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	2246      	movs	r2, #70	; 0x46
    1fa0:	5c9a      	ldrb	r2, [r3, r2]
    1fa2:	2147      	movs	r1, #71	; 0x47
    1fa4:	5c59      	ldrb	r1, [r3, r1]
    1fa6:	0209      	lsls	r1, r1, #8
    1fa8:	430a      	orrs	r2, r1
    1faa:	2148      	movs	r1, #72	; 0x48
    1fac:	5c59      	ldrb	r1, [r3, r1]
    1fae:	0409      	lsls	r1, r1, #16
    1fb0:	430a      	orrs	r2, r1
    1fb2:	2149      	movs	r1, #73	; 0x49
    1fb4:	5c5b      	ldrb	r3, [r3, r1]
    1fb6:	061b      	lsls	r3, r3, #24
    1fb8:	4313      	orrs	r3, r2
    1fba:	0018      	movs	r0, r3
    1fbc:	68fb      	ldr	r3, [r7, #12]
    1fbe:	224a      	movs	r2, #74	; 0x4a
    1fc0:	5c9a      	ldrb	r2, [r3, r2]
    1fc2:	214b      	movs	r1, #75	; 0x4b
    1fc4:	5c5b      	ldrb	r3, [r3, r1]
    1fc6:	021b      	lsls	r3, r3, #8
    1fc8:	4313      	orrs	r3, r2
    1fca:	b29b      	uxth	r3, r3
    1fcc:	001a      	movs	r2, r3
    1fce:	68bb      	ldr	r3, [r7, #8]
    1fd0:	0001      	movs	r1, r0
    1fd2:	0018      	movs	r0, r3
    1fd4:	4b59      	ldr	r3, [pc, #356]	; (213c <STACK_SIZE+0x13c>)
    1fd6:	4798      	blx	r3
        csr_max_size = *csr_size;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	22b4      	movs	r2, #180	; 0xb4
    1fde:	18ba      	adds	r2, r7, r2
    1fe0:	6013      	str	r3, [r2, #0]
        *csr_size = csr_def->cert_template_size;
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	224a      	movs	r2, #74	; 0x4a
    1fe6:	5c9a      	ldrb	r2, [r3, r2]
    1fe8:	214b      	movs	r1, #75	; 0x4b
    1fea:	5c5b      	ldrb	r3, [r3, r1]
    1fec:	021b      	lsls	r3, r3, #8
    1fee:	4313      	orrs	r3, r2
    1ff0:	b29b      	uxth	r3, r3
    1ff2:	001a      	movs	r2, r3
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	601a      	str	r2, [r3, #0]

        // Get a few elements from the csr_def structure
        pubLoc = &(csr_def->std_cert_elements[STDCERT_PUBLIC_KEY]);
    1ff8:	68fb      	ldr	r3, [r7, #12]
    1ffa:	3321      	adds	r3, #33	; 0x21
    1ffc:	22bc      	movs	r2, #188	; 0xbc
    1ffe:	18ba      	adds	r2, r7, r2
    2000:	6013      	str	r3, [r2, #0]
        pubDevLoc = &(csr_def->public_key_dev_loc);
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	3313      	adds	r3, #19
    2006:	22c0      	movs	r2, #192	; 0xc0
    2008:	18ba      	adds	r2, r7, r2
    200a:	6013      	str	r3, [r2, #0]
        keySlot = pubDevLoc->slot;
    200c:	23bb      	movs	r3, #187	; 0xbb
    200e:	18fb      	adds	r3, r7, r3
    2010:	22c0      	movs	r2, #192	; 0xc0
    2012:	18ba      	adds	r2, r7, r2
    2014:	6812      	ldr	r2, [r2, #0]
    2016:	7852      	ldrb	r2, [r2, #1]
    2018:	701a      	strb	r2, [r3, #0]
        privKeySlot = csr_def->private_key_slot;
    201a:	23ba      	movs	r3, #186	; 0xba
    201c:	18fb      	adds	r3, r7, r3
    201e:	68fa      	ldr	r2, [r7, #12]
    2020:	78d2      	ldrb	r2, [r2, #3]
    2022:	701a      	strb	r2, [r3, #0]

        // Get the public key from the device
        if (pubDevLoc->is_genkey)
    2024:	23c0      	movs	r3, #192	; 0xc0
    2026:	18fb      	adds	r3, r7, r3
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	789b      	ldrb	r3, [r3, #2]
    202c:	2b00      	cmp	r3, #0
    202e:	d013      	beq.n	2058 <STACK_SIZE+0x58>
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(keySlot, pubkey);
    2030:	23bb      	movs	r3, #187	; 0xbb
    2032:	18fb      	adds	r3, r7, r3
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	b29b      	uxth	r3, r3
    2038:	22c7      	movs	r2, #199	; 0xc7
    203a:	18bc      	adds	r4, r7, r2
    203c:	2274      	movs	r2, #116	; 0x74
    203e:	18ba      	adds	r2, r7, r2
    2040:	0011      	movs	r1, r2
    2042:	0018      	movs	r0, r3
    2044:	4b3e      	ldr	r3, [pc, #248]	; (2140 <STACK_SIZE+0x140>)
    2046:	4798      	blx	r3
    2048:	0003      	movs	r3, r0
    204a:	7023      	strb	r3, [r4, #0]
            if (status != ATCA_SUCCESS)
    204c:	23c7      	movs	r3, #199	; 0xc7
    204e:	18fb      	adds	r3, r7, r3
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d013      	beq.n	207e <STACK_SIZE+0x7e>
                BREAK(status, "Could not generate public key");
    2056:	e067      	b.n	2128 <STACK_SIZE+0x128>
        }
        else
        {
            // Read the public key from a slot
            status = atcab_read_pubkey(keySlot, pubkey);
    2058:	23bb      	movs	r3, #187	; 0xbb
    205a:	18fb      	adds	r3, r7, r3
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	b29b      	uxth	r3, r3
    2060:	22c7      	movs	r2, #199	; 0xc7
    2062:	18bc      	adds	r4, r7, r2
    2064:	2274      	movs	r2, #116	; 0x74
    2066:	18ba      	adds	r2, r7, r2
    2068:	0011      	movs	r1, r2
    206a:	0018      	movs	r0, r3
    206c:	4b35      	ldr	r3, [pc, #212]	; (2144 <STACK_SIZE+0x144>)
    206e:	4798      	blx	r3
    2070:	0003      	movs	r3, r0
    2072:	7023      	strb	r3, [r4, #0]
            if (status != ATCA_SUCCESS)
    2074:	23c7      	movs	r3, #199	; 0xc7
    2076:	18fb      	adds	r3, r7, r3
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	2b00      	cmp	r3, #0
    207c:	d14d      	bne.n	211a <STACK_SIZE+0x11a>
                BREAK(status, "Could not read public key");
        }
        // Insert the public key into the CSR template
        status = atcacert_set_cert_element(csr_def, pubLoc, csr, *csr_size, pubkey, ATCA_PUB_KEY_SIZE);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	681c      	ldr	r4, [r3, #0]
    2082:	68ba      	ldr	r2, [r7, #8]
    2084:	23bc      	movs	r3, #188	; 0xbc
    2086:	18fb      	adds	r3, r7, r3
    2088:	6819      	ldr	r1, [r3, #0]
    208a:	68f8      	ldr	r0, [r7, #12]
    208c:	2340      	movs	r3, #64	; 0x40
    208e:	9301      	str	r3, [sp, #4]
    2090:	2374      	movs	r3, #116	; 0x74
    2092:	18fb      	adds	r3, r7, r3
    2094:	9300      	str	r3, [sp, #0]
    2096:	0023      	movs	r3, r4
    2098:	4c2b      	ldr	r4, [pc, #172]	; (2148 <STACK_SIZE+0x148>)
    209a:	47a0      	blx	r4
    209c:	0002      	movs	r2, r0
    209e:	23c7      	movs	r3, #199	; 0xc7
    20a0:	18fb      	adds	r3, r7, r3
    20a2:	701a      	strb	r2, [r3, #0]
        if (status != ATCA_SUCCESS)
    20a4:	23c7      	movs	r3, #199	; 0xc7
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d137      	bne.n	211e <STACK_SIZE+0x11e>
            BREAK(status, "Setting CSR public key failed");

        // Get the CSR TBS digest
        status = atcacert_get_tbs_digest(csr_def, csr, *csr_size, tbsDigest);
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	681a      	ldr	r2, [r3, #0]
    20b2:	2314      	movs	r3, #20
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	68b9      	ldr	r1, [r7, #8]
    20b8:	68f8      	ldr	r0, [r7, #12]
    20ba:	4c24      	ldr	r4, [pc, #144]	; (214c <STACK_SIZE+0x14c>)
    20bc:	47a0      	blx	r4
    20be:	0002      	movs	r2, r0
    20c0:	23c7      	movs	r3, #199	; 0xc7
    20c2:	18fb      	adds	r3, r7, r3
    20c4:	701a      	strb	r2, [r3, #0]
        if (status != ATCA_SUCCESS)
    20c6:	23c7      	movs	r3, #199	; 0xc7
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	781b      	ldrb	r3, [r3, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d128      	bne.n	2122 <STACK_SIZE+0x122>
            BREAK(status, "Get TBS digest failed");

        // Sign the TBS digest
        status = atcab_sign(privKeySlot, tbsDigest, sig);
    20d0:	23ba      	movs	r3, #186	; 0xba
    20d2:	18fb      	adds	r3, r7, r3
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	b29b      	uxth	r3, r3
    20d8:	22c7      	movs	r2, #199	; 0xc7
    20da:	18bc      	adds	r4, r7, r2
    20dc:	2234      	movs	r2, #52	; 0x34
    20de:	18ba      	adds	r2, r7, r2
    20e0:	2114      	movs	r1, #20
    20e2:	1879      	adds	r1, r7, r1
    20e4:	0018      	movs	r0, r3
    20e6:	4b1a      	ldr	r3, [pc, #104]	; (2150 <STACK_SIZE+0x150>)
    20e8:	4798      	blx	r3
    20ea:	0003      	movs	r3, r0
    20ec:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    20ee:	23c7      	movs	r3, #199	; 0xc7
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d116      	bne.n	2126 <STACK_SIZE+0x126>
            BREAK(status, "Signing CSR failed");

        // Insert the signature into the CSR template
        status = atcacert_set_signature(csr_def, csr, csr_size, csr_max_size, sig);
    20f8:	23b4      	movs	r3, #180	; 0xb4
    20fa:	18fb      	adds	r3, r7, r3
    20fc:	681c      	ldr	r4, [r3, #0]
    20fe:	687a      	ldr	r2, [r7, #4]
    2100:	68b9      	ldr	r1, [r7, #8]
    2102:	68f8      	ldr	r0, [r7, #12]
    2104:	2334      	movs	r3, #52	; 0x34
    2106:	18fb      	adds	r3, r7, r3
    2108:	9300      	str	r3, [sp, #0]
    210a:	0023      	movs	r3, r4
    210c:	4c11      	ldr	r4, [pc, #68]	; (2154 <STACK_SIZE+0x154>)
    210e:	47a0      	blx	r4
    2110:	0002      	movs	r2, r0
    2112:	23c7      	movs	r3, #199	; 0xc7
    2114:	18fb      	adds	r3, r7, r3
    2116:	701a      	strb	r2, [r3, #0]
    2118:	e006      	b.n	2128 <STACK_SIZE+0x128>
                BREAK(status, "Could not read public key");
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	e004      	b.n	2128 <STACK_SIZE+0x128>
            BREAK(status, "Setting CSR public key failed");
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	e002      	b.n	2128 <STACK_SIZE+0x128>
            BREAK(status, "Get TBS digest failed");
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	e000      	b.n	2128 <STACK_SIZE+0x128>
            BREAK(status, "Signing CSR failed");
    2126:	46c0      	nop			; (mov r8, r8)
        // it is returned in the csr_size parameter.  (*csr_size = *csr_size;)

    }
    while (false);

    return status;
    2128:	23c7      	movs	r3, #199	; 0xc7
    212a:	18fb      	adds	r3, r7, r3
    212c:	781b      	ldrb	r3, [r3, #0]
}
    212e:	0018      	movs	r0, r3
    2130:	46bd      	mov	sp, r7
    2132:	b033      	add	sp, #204	; 0xcc
    2134:	bd90      	pop	{r4, r7, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00009d2d 	.word	0x00009d2d
    213c:	00009d1b 	.word	0x00009d1b
    2140:	000040c9 	.word	0x000040c9
    2144:	000040f5 	.word	0x000040f5
    2148:	0000247d 	.word	0x0000247d
    214c:	000023fd 	.word	0x000023fd
    2150:	00004041 	.word	0x00004041
    2154:	000021d5 	.word	0x000021d5

00002158 <get_effective_offset>:
    // device_loc_dest is encompassed by device_loc_src, return a pointer to the data for device_loc_dest
    return src_data + (device_loc_dest->offset - device_loc_src->offset);
}

static int get_effective_offset(const atcacert_def_t* cert_def, const uint8_t* cert, size_t ref_offset)
{
    2158:	b580      	push	{r7, lr}
    215a:	b086      	sub	sp, #24
    215c:	af00      	add	r7, sp, #0
    215e:	60f8      	str	r0, [r7, #12]
    2160:	60b9      	str	r1, [r7, #8]
    2162:	607a      	str	r2, [r7, #4]
    size_t sn_offset = 0;
    2164:	2300      	movs	r3, #0
    2166:	617b      	str	r3, [r7, #20]

    if (cert_def->type != CERTTYPE_X509 || cert_def->sn_source != SNSRC_STORED_DYNAMIC)
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	781b      	ldrb	r3, [r3, #0]
    216c:	2b00      	cmp	r3, #0
    216e:	d103      	bne.n	2178 <get_effective_offset+0x20>
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	791b      	ldrb	r3, [r3, #4]
    2174:	2b07      	cmp	r3, #7
    2176:	d001      	beq.n	217c <get_effective_offset+0x24>
        return 0;
    2178:	2300      	movs	r3, #0
    217a:	e027      	b.n	21cc <get_effective_offset+0x74>

    sn_offset = cert_def->std_cert_elements[STDCERT_CERT_SN].offset;
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	2235      	movs	r2, #53	; 0x35
    2180:	5c9a      	ldrb	r2, [r3, r2]
    2182:	2136      	movs	r1, #54	; 0x36
    2184:	5c5b      	ldrb	r3, [r3, r1]
    2186:	021b      	lsls	r3, r3, #8
    2188:	4313      	orrs	r3, r2
    218a:	b29b      	uxth	r3, r3
    218c:	617b      	str	r3, [r7, #20]
    if (ref_offset <= sn_offset)
    218e:	687a      	ldr	r2, [r7, #4]
    2190:	697b      	ldr	r3, [r7, #20]
    2192:	429a      	cmp	r2, r3
    2194:	d801      	bhi.n	219a <get_effective_offset+0x42>
        return 0;
    2196:	2300      	movs	r3, #0
    2198:	e018      	b.n	21cc <get_effective_offset+0x74>

    return (int)cert[sn_offset] - (int)cert_def->cert_template[sn_offset];
    219a:	68ba      	ldr	r2, [r7, #8]
    219c:	697b      	ldr	r3, [r7, #20]
    219e:	18d3      	adds	r3, r2, r3
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	0018      	movs	r0, r3
    21a4:	68fb      	ldr	r3, [r7, #12]
    21a6:	2246      	movs	r2, #70	; 0x46
    21a8:	5c9a      	ldrb	r2, [r3, r2]
    21aa:	2147      	movs	r1, #71	; 0x47
    21ac:	5c59      	ldrb	r1, [r3, r1]
    21ae:	0209      	lsls	r1, r1, #8
    21b0:	430a      	orrs	r2, r1
    21b2:	2148      	movs	r1, #72	; 0x48
    21b4:	5c59      	ldrb	r1, [r3, r1]
    21b6:	0409      	lsls	r1, r1, #16
    21b8:	430a      	orrs	r2, r1
    21ba:	2149      	movs	r1, #73	; 0x49
    21bc:	5c5b      	ldrb	r3, [r3, r1]
    21be:	061b      	lsls	r3, r3, #24
    21c0:	4313      	orrs	r3, r2
    21c2:	001a      	movs	r2, r3
    21c4:	697b      	ldr	r3, [r7, #20]
    21c6:	18d3      	adds	r3, r2, r3
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	1ac3      	subs	r3, r0, r3
}
    21cc:	0018      	movs	r0, r3
    21ce:	46bd      	mov	sp, r7
    21d0:	b006      	add	sp, #24
    21d2:	bd80      	pop	{r7, pc}

000021d4 <atcacert_set_signature>:
int atcacert_set_signature(const atcacert_def_t* cert_def,
                           uint8_t*              cert,
                           size_t*               cert_size,
                           size_t                max_cert_size,
                           const uint8_t         signature[64])
{
    21d4:	b590      	push	{r4, r7, lr}
    21d6:	b08d      	sub	sp, #52	; 0x34
    21d8:	af02      	add	r7, sp, #8
    21da:	60f8      	str	r0, [r7, #12]
    21dc:	60b9      	str	r1, [r7, #8]
    21de:	607a      	str	r2, [r7, #4]
    21e0:	603b      	str	r3, [r7, #0]
    int ret = 0;
    21e2:	2300      	movs	r3, #0
    21e4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t cur_der_sig_size;
    size_t new_der_sig_size;
    size_t old_cert_der_length_size;
    uint32_t new_cert_length;

    if (cert_def == NULL || cert == NULL || cert_size == NULL || signature == NULL)
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d008      	beq.n	21fe <atcacert_set_signature+0x2a>
    21ec:	68bb      	ldr	r3, [r7, #8]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d005      	beq.n	21fe <atcacert_set_signature+0x2a>
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d002      	beq.n	21fe <atcacert_set_signature+0x2a>
    21f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21fa:	2b00      	cmp	r3, #0
    21fc:	d101      	bne.n	2202 <atcacert_set_signature+0x2e>
        return ATCACERT_E_BAD_PARAMS;
    21fe:	2302      	movs	r3, #2
    2200:	e08d      	b.n	231e <atcacert_set_signature+0x14a>

    sig_offset = cert_def->std_cert_elements[STDCERT_SIGNATURE].offset;
    2202:	2322      	movs	r3, #34	; 0x22
    2204:	18fa      	adds	r2, r7, r3
    2206:	68fb      	ldr	r3, [r7, #12]
    2208:	2125      	movs	r1, #37	; 0x25
    220a:	5c59      	ldrb	r1, [r3, r1]
    220c:	2026      	movs	r0, #38	; 0x26
    220e:	5c1b      	ldrb	r3, [r3, r0]
    2210:	021b      	lsls	r3, r3, #8
    2212:	430b      	orrs	r3, r1
    2214:	8013      	strh	r3, [r2, #0]
    sig_offset += get_effective_offset(cert_def, cert, sig_offset);
    2216:	2322      	movs	r3, #34	; 0x22
    2218:	18fb      	adds	r3, r7, r3
    221a:	881a      	ldrh	r2, [r3, #0]
    221c:	68b9      	ldr	r1, [r7, #8]
    221e:	68fb      	ldr	r3, [r7, #12]
    2220:	0018      	movs	r0, r3
    2222:	4b41      	ldr	r3, [pc, #260]	; (2328 <atcacert_set_signature+0x154>)
    2224:	4798      	blx	r3
    2226:	0003      	movs	r3, r0
    2228:	b299      	uxth	r1, r3
    222a:	2322      	movs	r3, #34	; 0x22
    222c:	18fb      	adds	r3, r7, r3
    222e:	2222      	movs	r2, #34	; 0x22
    2230:	18ba      	adds	r2, r7, r2
    2232:	8812      	ldrh	r2, [r2, #0]
    2234:	188a      	adds	r2, r1, r2
    2236:	801a      	strh	r2, [r3, #0]

    // Non X.509 signatures are treated like normal certificate elements
    if (cert_def->type != CERTTYPE_X509)
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	2b00      	cmp	r3, #0
    223e:	d00f      	beq.n	2260 <atcacert_set_signature+0x8c>
        return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNATURE], cert, *cert_size, signature, 64);
    2240:	68fb      	ldr	r3, [r7, #12]
    2242:	3325      	adds	r3, #37	; 0x25
    2244:	0019      	movs	r1, r3
    2246:	687b      	ldr	r3, [r7, #4]
    2248:	681c      	ldr	r4, [r3, #0]
    224a:	68ba      	ldr	r2, [r7, #8]
    224c:	68f8      	ldr	r0, [r7, #12]
    224e:	2340      	movs	r3, #64	; 0x40
    2250:	9301      	str	r3, [sp, #4]
    2252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2254:	9300      	str	r3, [sp, #0]
    2256:	0023      	movs	r3, r4
    2258:	4c34      	ldr	r4, [pc, #208]	; (232c <atcacert_set_signature+0x158>)
    225a:	47a0      	blx	r4
    225c:	0003      	movs	r3, r0
    225e:	e05e      	b.n	231e <atcacert_set_signature+0x14a>

    if (sig_offset >= *cert_size)
    2260:	2322      	movs	r3, #34	; 0x22
    2262:	18fb      	adds	r3, r7, r3
    2264:	881a      	ldrh	r2, [r3, #0]
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	681b      	ldr	r3, [r3, #0]
    226a:	429a      	cmp	r2, r3
    226c:	d301      	bcc.n	2272 <atcacert_set_signature+0x9e>
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;  // Signature element is shown as past the end of the certificate
    226e:	2309      	movs	r3, #9
    2270:	e055      	b.n	231e <atcacert_set_signature+0x14a>

    // Current size of the signature is from its offset to the end of the cert
    cur_der_sig_size = *cert_size - sig_offset;
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	681a      	ldr	r2, [r3, #0]
    2276:	2322      	movs	r3, #34	; 0x22
    2278:	18fb      	adds	r3, r7, r3
    227a:	881b      	ldrh	r3, [r3, #0]
    227c:	1ad3      	subs	r3, r2, r3
    227e:	61fb      	str	r3, [r7, #28]

    // Find the size of buffer available for the new DER signature
    new_der_sig_size = max_cert_size - sig_offset;
    2280:	2322      	movs	r3, #34	; 0x22
    2282:	18fb      	adds	r3, r7, r3
    2284:	881b      	ldrh	r3, [r3, #0]
    2286:	683a      	ldr	r2, [r7, #0]
    2288:	1ad3      	subs	r3, r2, r3
    228a:	61bb      	str	r3, [r7, #24]

    // Set the new signature
    ret = atcacert_der_enc_ecdsa_sig_value(signature, &cert[sig_offset], &new_der_sig_size);
    228c:	2322      	movs	r3, #34	; 0x22
    228e:	18fb      	adds	r3, r7, r3
    2290:	881b      	ldrh	r3, [r3, #0]
    2292:	68ba      	ldr	r2, [r7, #8]
    2294:	18d1      	adds	r1, r2, r3
    2296:	2318      	movs	r3, #24
    2298:	18fa      	adds	r2, r7, r3
    229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    229c:	0018      	movs	r0, r3
    229e:	4b24      	ldr	r3, [pc, #144]	; (2330 <atcacert_set_signature+0x15c>)
    22a0:	4798      	blx	r3
    22a2:	0003      	movs	r3, r0
    22a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    22a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22a8:	2b00      	cmp	r3, #0
    22aa:	d00d      	beq.n	22c8 <atcacert_set_signature+0xf4>
    {
        if (ret == ATCACERT_E_BUFFER_TOO_SMALL)
    22ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22ae:	2b03      	cmp	r3, #3
    22b0:	d108      	bne.n	22c4 <atcacert_set_signature+0xf0>
            *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;  // Report the size needed
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	69ba      	ldr	r2, [r7, #24]
    22b8:	0011      	movs	r1, r2
    22ba:	69fa      	ldr	r2, [r7, #28]
    22bc:	1a8a      	subs	r2, r1, r2
    22be:	189a      	adds	r2, r3, r2
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	601a      	str	r2, [r3, #0]
        return ret;
    22c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22c6:	e02a      	b.n	231e <atcacert_set_signature+0x14a>
    }

    *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	69ba      	ldr	r2, [r7, #24]
    22ce:	0011      	movs	r1, r2
    22d0:	69fa      	ldr	r2, [r7, #28]
    22d2:	1a8a      	subs	r2, r1, r2
    22d4:	189a      	adds	r2, r3, r2
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	601a      	str	r2, [r3, #0]

    old_cert_der_length_size = *cert_size - 1;
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	681b      	ldr	r3, [r3, #0]
    22de:	3b01      	subs	r3, #1
    22e0:	617b      	str	r3, [r7, #20]
    ret = atcacert_der_adjust_length(
    22e2:	68bb      	ldr	r3, [r7, #8]
    22e4:	1c58      	adds	r0, r3, #1
        &cert[1],
        &old_cert_der_length_size,
        (int)new_der_sig_size - (int)cur_der_sig_size,
    22e6:	69bb      	ldr	r3, [r7, #24]
    22e8:	001a      	movs	r2, r3
    22ea:	69fb      	ldr	r3, [r7, #28]
    ret = atcacert_der_adjust_length(
    22ec:	1ad2      	subs	r2, r2, r3
    22ee:	2310      	movs	r3, #16
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	2114      	movs	r1, #20
    22f4:	1879      	adds	r1, r7, r1
    22f6:	4c0f      	ldr	r4, [pc, #60]	; (2334 <atcacert_set_signature+0x160>)
    22f8:	47a0      	blx	r4
    22fa:	0003      	movs	r3, r0
    22fc:	627b      	str	r3, [r7, #36]	; 0x24
        &new_cert_length);
    if (ret != ATCACERT_E_SUCCESS)
    22fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2300:	2b00      	cmp	r3, #0
    2302:	d001      	beq.n	2308 <atcacert_set_signature+0x134>
        return ret;
    2304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2306:	e00a      	b.n	231e <atcacert_set_signature+0x14a>

    // Tag, length, value
    if (1 + old_cert_der_length_size + new_cert_length != *cert_size)
    2308:	697a      	ldr	r2, [r7, #20]
    230a:	693b      	ldr	r3, [r7, #16]
    230c:	18d3      	adds	r3, r2, r3
    230e:	1c5a      	adds	r2, r3, #1
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	681b      	ldr	r3, [r3, #0]
    2314:	429a      	cmp	r2, r3
    2316:	d001      	beq.n	231c <atcacert_set_signature+0x148>
        return ATCACERT_E_BAD_CERT;
    2318:	230a      	movs	r3, #10
    231a:	e000      	b.n	231e <atcacert_set_signature+0x14a>

    return ATCACERT_E_SUCCESS;
    231c:	2300      	movs	r3, #0
}
    231e:	0018      	movs	r0, r3
    2320:	46bd      	mov	sp, r7
    2322:	b00b      	add	sp, #44	; 0x2c
    2324:	bd90      	pop	{r4, r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	00002159 	.word	0x00002159
    232c:	0000247d 	.word	0x0000247d
    2330:	00002915 	.word	0x00002915
    2334:	00002705 	.word	0x00002705

00002338 <atcacert_get_tbs>:
int atcacert_get_tbs(const atcacert_def_t* cert_def,
                     const uint8_t*        cert,
                     size_t                cert_size,
                     const uint8_t**       tbs,
                     size_t*               tbs_size)
{
    2338:	b580      	push	{r7, lr}
    233a:	b086      	sub	sp, #24
    233c:	af00      	add	r7, sp, #0
    233e:	60f8      	str	r0, [r7, #12]
    2340:	60b9      	str	r1, [r7, #8]
    2342:	607a      	str	r2, [r7, #4]
    2344:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
    2346:	2300      	movs	r3, #0
    2348:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs == NULL || tbs_size == NULL)
    234a:	68fb      	ldr	r3, [r7, #12]
    234c:	2b00      	cmp	r3, #0
    234e:	d008      	beq.n	2362 <atcacert_get_tbs+0x2a>
    2350:	68bb      	ldr	r3, [r7, #8]
    2352:	2b00      	cmp	r3, #0
    2354:	d005      	beq.n	2362 <atcacert_get_tbs+0x2a>
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	2b00      	cmp	r3, #0
    235a:	d002      	beq.n	2362 <atcacert_get_tbs+0x2a>
    235c:	6a3b      	ldr	r3, [r7, #32]
    235e:	2b00      	cmp	r3, #0
    2360:	d101      	bne.n	2366 <atcacert_get_tbs+0x2e>
        return ATCACERT_E_BAD_PARAMS;
    2362:	2302      	movs	r3, #2
    2364:	e043      	b.n	23ee <atcacert_get_tbs+0xb6>

    eff_offset = get_effective_offset(cert_def, cert, cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count);
    2366:	68fb      	ldr	r3, [r7, #12]
    2368:	7b9a      	ldrb	r2, [r3, #14]
    236a:	7bdb      	ldrb	r3, [r3, #15]
    236c:	021b      	lsls	r3, r3, #8
    236e:	4313      	orrs	r3, r2
    2370:	b29b      	uxth	r3, r3
    2372:	0019      	movs	r1, r3
    2374:	68fb      	ldr	r3, [r7, #12]
    2376:	7c1a      	ldrb	r2, [r3, #16]
    2378:	7c5b      	ldrb	r3, [r3, #17]
    237a:	021b      	lsls	r3, r3, #8
    237c:	4313      	orrs	r3, r2
    237e:	b29b      	uxth	r3, r3
    2380:	18cb      	adds	r3, r1, r3
    2382:	001a      	movs	r2, r3
    2384:	68b9      	ldr	r1, [r7, #8]
    2386:	68fb      	ldr	r3, [r7, #12]
    2388:	0018      	movs	r0, r3
    238a:	4b1b      	ldr	r3, [pc, #108]	; (23f8 <atcacert_get_tbs+0xc0>)
    238c:	4798      	blx	r3
    238e:	0003      	movs	r3, r0
    2390:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count + eff_offset) > cert_size)
    2392:	68fb      	ldr	r3, [r7, #12]
    2394:	7b9a      	ldrb	r2, [r3, #14]
    2396:	7bdb      	ldrb	r3, [r3, #15]
    2398:	021b      	lsls	r3, r3, #8
    239a:	4313      	orrs	r3, r2
    239c:	b29b      	uxth	r3, r3
    239e:	0019      	movs	r1, r3
    23a0:	68fb      	ldr	r3, [r7, #12]
    23a2:	7c1a      	ldrb	r2, [r3, #16]
    23a4:	7c5b      	ldrb	r3, [r3, #17]
    23a6:	021b      	lsls	r3, r3, #8
    23a8:	4313      	orrs	r3, r2
    23aa:	b29b      	uxth	r3, r3
    23ac:	18ca      	adds	r2, r1, r3
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	18d3      	adds	r3, r2, r3
    23b2:	001a      	movs	r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	429a      	cmp	r2, r3
    23b8:	d901      	bls.n	23be <atcacert_get_tbs+0x86>
        return ATCACERT_E_BAD_CERT;
    23ba:	230a      	movs	r3, #10
    23bc:	e017      	b.n	23ee <atcacert_get_tbs+0xb6>

    *tbs      = &cert[cert_def->tbs_cert_loc.offset];
    23be:	68fb      	ldr	r3, [r7, #12]
    23c0:	7b9a      	ldrb	r2, [r3, #14]
    23c2:	7bdb      	ldrb	r3, [r3, #15]
    23c4:	021b      	lsls	r3, r3, #8
    23c6:	4313      	orrs	r3, r2
    23c8:	b29b      	uxth	r3, r3
    23ca:	001a      	movs	r2, r3
    23cc:	68bb      	ldr	r3, [r7, #8]
    23ce:	189a      	adds	r2, r3, r2
    23d0:	683b      	ldr	r3, [r7, #0]
    23d2:	601a      	str	r2, [r3, #0]
    *tbs_size = cert_def->tbs_cert_loc.count + eff_offset;
    23d4:	68fb      	ldr	r3, [r7, #12]
    23d6:	7c1a      	ldrb	r2, [r3, #16]
    23d8:	7c5b      	ldrb	r3, [r3, #17]
    23da:	021b      	lsls	r3, r3, #8
    23dc:	4313      	orrs	r3, r2
    23de:	b29b      	uxth	r3, r3
    23e0:	001a      	movs	r2, r3
    23e2:	697b      	ldr	r3, [r7, #20]
    23e4:	18d3      	adds	r3, r2, r3
    23e6:	001a      	movs	r2, r3
    23e8:	6a3b      	ldr	r3, [r7, #32]
    23ea:	601a      	str	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
    23ec:	2300      	movs	r3, #0
}
    23ee:	0018      	movs	r0, r3
    23f0:	46bd      	mov	sp, r7
    23f2:	b006      	add	sp, #24
    23f4:	bd80      	pop	{r7, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	00002159 	.word	0x00002159

000023fc <atcacert_get_tbs_digest>:

int atcacert_get_tbs_digest(const atcacert_def_t* cert_def,
                            const uint8_t*        cert,
                            size_t                cert_size,
                            uint8_t               tbs_digest[32])
{
    23fc:	b590      	push	{r4, r7, lr}
    23fe:	b08b      	sub	sp, #44	; 0x2c
    2400:	af02      	add	r7, sp, #8
    2402:	60f8      	str	r0, [r7, #12]
    2404:	60b9      	str	r1, [r7, #8]
    2406:	607a      	str	r2, [r7, #4]
    2408:	603b      	str	r3, [r7, #0]
    int ret = ATCACERT_E_SUCCESS;
    240a:	2300      	movs	r3, #0
    240c:	61fb      	str	r3, [r7, #28]
    const uint8_t* tbs = NULL;
    240e:	2300      	movs	r3, #0
    2410:	61bb      	str	r3, [r7, #24]
    size_t tbs_size = 0;
    2412:	2300      	movs	r3, #0
    2414:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs_digest == NULL)
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	2b00      	cmp	r3, #0
    241a:	d005      	beq.n	2428 <atcacert_get_tbs_digest+0x2c>
    241c:	68bb      	ldr	r3, [r7, #8]
    241e:	2b00      	cmp	r3, #0
    2420:	d002      	beq.n	2428 <atcacert_get_tbs_digest+0x2c>
    2422:	683b      	ldr	r3, [r7, #0]
    2424:	2b00      	cmp	r3, #0
    2426:	d101      	bne.n	242c <atcacert_get_tbs_digest+0x30>
        return ATCACERT_E_BAD_PARAMS;
    2428:	2302      	movs	r3, #2
    242a:	e01f      	b.n	246c <atcacert_get_tbs_digest+0x70>

    ret = atcacert_get_tbs(cert_def, cert, cert_size, &tbs, &tbs_size);
    242c:	2318      	movs	r3, #24
    242e:	18fc      	adds	r4, r7, r3
    2430:	687a      	ldr	r2, [r7, #4]
    2432:	68b9      	ldr	r1, [r7, #8]
    2434:	68f8      	ldr	r0, [r7, #12]
    2436:	2314      	movs	r3, #20
    2438:	18fb      	adds	r3, r7, r3
    243a:	9300      	str	r3, [sp, #0]
    243c:	0023      	movs	r3, r4
    243e:	4c0d      	ldr	r4, [pc, #52]	; (2474 <atcacert_get_tbs_digest+0x78>)
    2440:	47a0      	blx	r4
    2442:	0003      	movs	r3, r0
    2444:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2446:	69fb      	ldr	r3, [r7, #28]
    2448:	2b00      	cmp	r3, #0
    244a:	d001      	beq.n	2450 <atcacert_get_tbs_digest+0x54>
        return ret;
    244c:	69fb      	ldr	r3, [r7, #28]
    244e:	e00d      	b.n	246c <atcacert_get_tbs_digest+0x70>

    ret = atcac_sw_sha2_256(tbs, tbs_size, tbs_digest);
    2450:	69bb      	ldr	r3, [r7, #24]
    2452:	6979      	ldr	r1, [r7, #20]
    2454:	683a      	ldr	r2, [r7, #0]
    2456:	0018      	movs	r0, r3
    2458:	4b07      	ldr	r3, [pc, #28]	; (2478 <atcacert_get_tbs_digest+0x7c>)
    245a:	4798      	blx	r3
    245c:	0003      	movs	r3, r0
    245e:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2460:	69fb      	ldr	r3, [r7, #28]
    2462:	2b00      	cmp	r3, #0
    2464:	d001      	beq.n	246a <atcacert_get_tbs_digest+0x6e>
        return ret;
    2466:	69fb      	ldr	r3, [r7, #28]
    2468:	e000      	b.n	246c <atcacert_get_tbs_digest+0x70>

    return ret;
    246a:	69fb      	ldr	r3, [r7, #28]
}
    246c:	0018      	movs	r0, r3
    246e:	46bd      	mov	sp, r7
    2470:	b009      	add	sp, #36	; 0x24
    2472:	bd90      	pop	{r4, r7, pc}
    2474:	00002339 	.word	0x00002339
    2478:	000043a5 	.word	0x000043a5

0000247c <atcacert_set_cert_element>:
                              const atcacert_cert_loc_t* cert_loc,
                              uint8_t*                   cert,
                              size_t                     cert_size,
                              const uint8_t*             data,
                              size_t                     data_size)
{
    247c:	b580      	push	{r7, lr}
    247e:	b086      	sub	sp, #24
    2480:	af00      	add	r7, sp, #0
    2482:	60f8      	str	r0, [r7, #12]
    2484:	60b9      	str	r1, [r7, #8]
    2486:	607a      	str	r2, [r7, #4]
    2488:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
    248a:	2300      	movs	r3, #0
    248c:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert_loc == NULL || cert == NULL)
    248e:	68fb      	ldr	r3, [r7, #12]
    2490:	2b00      	cmp	r3, #0
    2492:	d005      	beq.n	24a0 <atcacert_set_cert_element+0x24>
    2494:	68bb      	ldr	r3, [r7, #8]
    2496:	2b00      	cmp	r3, #0
    2498:	d002      	beq.n	24a0 <atcacert_set_cert_element+0x24>
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	2b00      	cmp	r3, #0
    249e:	d101      	bne.n	24a4 <atcacert_set_cert_element+0x28>
        return ATCACERT_E_BAD_PARAMS;
    24a0:	2302      	movs	r3, #2
    24a2:	e062      	b.n	256a <atcacert_set_cert_element+0xee>

    if (cert_loc->count == 0)
    24a4:	68bb      	ldr	r3, [r7, #8]
    24a6:	789a      	ldrb	r2, [r3, #2]
    24a8:	78db      	ldrb	r3, [r3, #3]
    24aa:	021b      	lsls	r3, r3, #8
    24ac:	4313      	orrs	r3, r2
    24ae:	b29b      	uxth	r3, r3
    24b0:	2b00      	cmp	r3, #0
    24b2:	d101      	bne.n	24b8 <atcacert_set_cert_element+0x3c>
        return ATCACERT_E_SUCCESS;  // This element doesn't exist in the cert, but we treat this as a success
    24b4:	2300      	movs	r3, #0
    24b6:	e058      	b.n	256a <atcacert_set_cert_element+0xee>

    if (data == NULL)
    24b8:	6a3b      	ldr	r3, [r7, #32]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d101      	bne.n	24c2 <atcacert_set_cert_element+0x46>
        return ATCACERT_E_BAD_PARAMS;
    24be:	2302      	movs	r3, #2
    24c0:	e053      	b.n	256a <atcacert_set_cert_element+0xee>

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
    24c2:	68fb      	ldr	r3, [r7, #12]
    24c4:	781b      	ldrb	r3, [r3, #0]
    24c6:	2b00      	cmp	r3, #0
    24c8:	d113      	bne.n	24f2 <atcacert_set_cert_element+0x76>
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
    24ca:	68fb      	ldr	r3, [r7, #12]
    24cc:	791b      	ldrb	r3, [r3, #4]
    if (!(cert_def->type == CERTTYPE_X509 &&
    24ce:	2b07      	cmp	r3, #7
    24d0:	d10f      	bne.n	24f2 <atcacert_set_cert_element+0x76>
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
    24d2:	68bb      	ldr	r3, [r7, #8]
    24d4:	781a      	ldrb	r2, [r3, #0]
    24d6:	785b      	ldrb	r3, [r3, #1]
    24d8:	021b      	lsls	r3, r3, #8
    24da:	4313      	orrs	r3, r2
    24dc:	b29a      	uxth	r2, r3
    24de:	68fb      	ldr	r3, [r7, #12]
    24e0:	2135      	movs	r1, #53	; 0x35
    24e2:	5c59      	ldrb	r1, [r3, r1]
    24e4:	2036      	movs	r0, #54	; 0x36
    24e6:	5c1b      	ldrb	r3, [r3, r0]
    24e8:	021b      	lsls	r3, r3, #8
    24ea:	430b      	orrs	r3, r1
    24ec:	b29b      	uxth	r3, r3
    if (!(cert_def->type == CERTTYPE_X509 &&
    24ee:	429a      	cmp	r2, r3
    24f0:	d00b      	beq.n	250a <atcacert_set_cert_element+0x8e>
        data_size != cert_loc->count)
    24f2:	68bb      	ldr	r3, [r7, #8]
    24f4:	789a      	ldrb	r2, [r3, #2]
    24f6:	78db      	ldrb	r3, [r3, #3]
    24f8:	021b      	lsls	r3, r3, #8
    24fa:	4313      	orrs	r3, r2
    24fc:	b29b      	uxth	r3, r3
    24fe:	001a      	movs	r2, r3
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
    2500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2502:	429a      	cmp	r2, r3
    2504:	d001      	beq.n	250a <atcacert_set_cert_element+0x8e>
        return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
    2506:	2307      	movs	r3, #7
    2508:	e02f      	b.n	256a <atcacert_set_cert_element+0xee>

    eff_offset = get_effective_offset(cert_def, cert, cert_loc->offset);
    250a:	68bb      	ldr	r3, [r7, #8]
    250c:	781a      	ldrb	r2, [r3, #0]
    250e:	785b      	ldrb	r3, [r3, #1]
    2510:	021b      	lsls	r3, r3, #8
    2512:	4313      	orrs	r3, r2
    2514:	b29b      	uxth	r3, r3
    2516:	001a      	movs	r2, r3
    2518:	6879      	ldr	r1, [r7, #4]
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	0018      	movs	r0, r3
    251e:	4b15      	ldr	r3, [pc, #84]	; (2574 <atcacert_set_cert_element+0xf8>)
    2520:	4798      	blx	r3
    2522:	0003      	movs	r3, r0
    2524:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_loc->offset + data_size + eff_offset) > cert_size)
    2526:	68bb      	ldr	r3, [r7, #8]
    2528:	781a      	ldrb	r2, [r3, #0]
    252a:	785b      	ldrb	r3, [r3, #1]
    252c:	021b      	lsls	r3, r3, #8
    252e:	4313      	orrs	r3, r2
    2530:	b29b      	uxth	r3, r3
    2532:	001a      	movs	r2, r3
    2534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2536:	18d2      	adds	r2, r2, r3
    2538:	697b      	ldr	r3, [r7, #20]
    253a:	18d2      	adds	r2, r2, r3
    253c:	683b      	ldr	r3, [r7, #0]
    253e:	429a      	cmp	r2, r3
    2540:	d901      	bls.n	2546 <atcacert_set_cert_element+0xca>
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;
    2542:	2309      	movs	r3, #9
    2544:	e011      	b.n	256a <atcacert_set_cert_element+0xee>

    memcpy(&cert[cert_loc->offset + eff_offset], data, data_size);
    2546:	68bb      	ldr	r3, [r7, #8]
    2548:	781a      	ldrb	r2, [r3, #0]
    254a:	785b      	ldrb	r3, [r3, #1]
    254c:	021b      	lsls	r3, r3, #8
    254e:	4313      	orrs	r3, r2
    2550:	b29b      	uxth	r3, r3
    2552:	001a      	movs	r2, r3
    2554:	697b      	ldr	r3, [r7, #20]
    2556:	18d3      	adds	r3, r2, r3
    2558:	001a      	movs	r2, r3
    255a:	687b      	ldr	r3, [r7, #4]
    255c:	189b      	adds	r3, r3, r2
    255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2560:	6a39      	ldr	r1, [r7, #32]
    2562:	0018      	movs	r0, r3
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <atcacert_set_cert_element+0xfc>)
    2566:	4798      	blx	r3

    return ATCACERT_E_SUCCESS;
    2568:	2300      	movs	r3, #0
}
    256a:	0018      	movs	r0, r3
    256c:	46bd      	mov	sp, r7
    256e:	b006      	add	sp, #24
    2570:	bd80      	pop	{r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	00002159 	.word	0x00002159
    2578:	00009d1b 	.word	0x00009d1b

0000257c <atcacert_der_enc_length>:

#include "atcacert_der.h"
#include <string.h>

int atcacert_der_enc_length(uint32_t length, uint8_t* der_length, size_t* der_length_size)
{
    257c:	b580      	push	{r7, lr}
    257e:	b086      	sub	sp, #24
    2580:	af00      	add	r7, sp, #0
    2582:	60f8      	str	r0, [r7, #12]
    2584:	60b9      	str	r1, [r7, #8]
    2586:	607a      	str	r2, [r7, #4]
    size_t der_length_size_calc = 0;
    2588:	2300      	movs	r3, #0
    258a:	617b      	str	r3, [r7, #20]
    int exp = sizeof(length) - 1;
    258c:	2303      	movs	r3, #3
    258e:	613b      	str	r3, [r7, #16]

    if (der_length_size == NULL)
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	2b00      	cmp	r3, #0
    2594:	d101      	bne.n	259a <atcacert_der_enc_length+0x1e>
        return ATCACERT_E_BAD_PARAMS;
    2596:	2302      	movs	r3, #2
    2598:	e049      	b.n	262e <atcacert_der_enc_length+0xb2>

    if (length < 0x80)
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	2b7f      	cmp	r3, #127	; 0x7f
    259e:	d807      	bhi.n	25b0 <atcacert_der_enc_length+0x34>
    {
        // The length can take the short form with only one byte
        der_length_size_calc = 1;
    25a0:	2301      	movs	r3, #1
    25a2:	617b      	str	r3, [r7, #20]
        exp = 0;
    25a4:	2300      	movs	r3, #0
    25a6:	613b      	str	r3, [r7, #16]
    25a8:	e00b      	b.n	25c2 <atcacert_der_enc_length+0x46>
    {
        // Length is long-form, encoded as a multi-byte big-endian unsigned integer

        // Find first non-zero octet
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
            exp--;
    25aa:	693b      	ldr	r3, [r7, #16]
    25ac:	3b01      	subs	r3, #1
    25ae:	613b      	str	r3, [r7, #16]
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
    25b0:	693b      	ldr	r3, [r7, #16]
    25b2:	00db      	lsls	r3, r3, #3
    25b4:	68fa      	ldr	r2, [r7, #12]
    25b6:	40da      	lsrs	r2, r3
    25b8:	1e13      	subs	r3, r2, #0
    25ba:	d0f6      	beq.n	25aa <atcacert_der_enc_length+0x2e>

        der_length_size_calc = 2 + exp;
    25bc:	693b      	ldr	r3, [r7, #16]
    25be:	3302      	adds	r3, #2
    25c0:	617b      	str	r3, [r7, #20]
    }

    if (der_length != NULL && *der_length_size < der_length_size_calc)
    25c2:	68bb      	ldr	r3, [r7, #8]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d009      	beq.n	25dc <atcacert_der_enc_length+0x60>
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	681a      	ldr	r2, [r3, #0]
    25cc:	697b      	ldr	r3, [r7, #20]
    25ce:	429a      	cmp	r2, r3
    25d0:	d204      	bcs.n	25dc <atcacert_der_enc_length+0x60>
    {
        *der_length_size = der_length_size_calc;
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	697a      	ldr	r2, [r7, #20]
    25d6:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    25d8:	2303      	movs	r3, #3
    25da:	e028      	b.n	262e <atcacert_der_enc_length+0xb2>
    }

    *der_length_size = der_length_size_calc;
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	697a      	ldr	r2, [r7, #20]
    25e0:	601a      	str	r2, [r3, #0]

    if (der_length == NULL)
    25e2:	68bb      	ldr	r3, [r7, #8]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d111      	bne.n	260c <atcacert_der_enc_length+0x90>
        return ATCACERT_E_SUCCESS;  // Caller is only requesting the size
    25e8:	2300      	movs	r3, #0
    25ea:	e020      	b.n	262e <atcacert_der_enc_length+0xb2>

    // Encode length in big-endian format
    for (; exp >= 0; exp--)
        der_length[der_length_size_calc - 1 - exp] = (uint8_t)((length >> (exp * 8)) & 0xFF);
    25ec:	693b      	ldr	r3, [r7, #16]
    25ee:	697a      	ldr	r2, [r7, #20]
    25f0:	1ad3      	subs	r3, r2, r3
    25f2:	3b01      	subs	r3, #1
    25f4:	68ba      	ldr	r2, [r7, #8]
    25f6:	18d3      	adds	r3, r2, r3
    25f8:	693a      	ldr	r2, [r7, #16]
    25fa:	00d2      	lsls	r2, r2, #3
    25fc:	68f9      	ldr	r1, [r7, #12]
    25fe:	40d1      	lsrs	r1, r2
    2600:	000a      	movs	r2, r1
    2602:	b2d2      	uxtb	r2, r2
    2604:	701a      	strb	r2, [r3, #0]
    for (; exp >= 0; exp--)
    2606:	693b      	ldr	r3, [r7, #16]
    2608:	3b01      	subs	r3, #1
    260a:	613b      	str	r3, [r7, #16]
    260c:	693b      	ldr	r3, [r7, #16]
    260e:	2b00      	cmp	r3, #0
    2610:	daec      	bge.n	25ec <atcacert_der_enc_length+0x70>

    if (der_length_size_calc > 1)
    2612:	697b      	ldr	r3, [r7, #20]
    2614:	2b01      	cmp	r3, #1
    2616:	d909      	bls.n	262c <atcacert_der_enc_length+0xb0>
        der_length[0] = 0x80 | (uint8_t)(der_length_size_calc - 1);  // Set number of bytes octet with long-form flag
    2618:	697b      	ldr	r3, [r7, #20]
    261a:	b2db      	uxtb	r3, r3
    261c:	3b01      	subs	r3, #1
    261e:	b2db      	uxtb	r3, r3
    2620:	2280      	movs	r2, #128	; 0x80
    2622:	4252      	negs	r2, r2
    2624:	4313      	orrs	r3, r2
    2626:	b2da      	uxtb	r2, r3
    2628:	68bb      	ldr	r3, [r7, #8]
    262a:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
    262c:	2300      	movs	r3, #0
}
    262e:	0018      	movs	r0, r3
    2630:	46bd      	mov	sp, r7
    2632:	b006      	add	sp, #24
    2634:	bd80      	pop	{r7, pc}

00002636 <atcacert_der_dec_length>:

int atcacert_der_dec_length(const uint8_t* der_length, size_t* der_length_size, uint32_t* length)
{
    2636:	b580      	push	{r7, lr}
    2638:	b086      	sub	sp, #24
    263a:	af00      	add	r7, sp, #0
    263c:	60f8      	str	r0, [r7, #12]
    263e:	60b9      	str	r1, [r7, #8]
    2640:	607a      	str	r2, [r7, #4]
    if (der_length == NULL || der_length_size == NULL)
    2642:	68fb      	ldr	r3, [r7, #12]
    2644:	2b00      	cmp	r3, #0
    2646:	d002      	beq.n	264e <atcacert_der_dec_length+0x18>
    2648:	68bb      	ldr	r3, [r7, #8]
    264a:	2b00      	cmp	r3, #0
    264c:	d101      	bne.n	2652 <atcacert_der_dec_length+0x1c>
        return ATCACERT_E_BAD_PARAMS;
    264e:	2302      	movs	r3, #2
    2650:	e053      	b.n	26fa <atcacert_der_dec_length+0xc4>

    if (*der_length_size < 1)
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	2b00      	cmp	r3, #0
    2658:	d101      	bne.n	265e <atcacert_der_dec_length+0x28>
        return ATCACERT_E_DECODING_ERROR;
    265a:	2304      	movs	r3, #4
    265c:	e04d      	b.n	26fa <atcacert_der_dec_length+0xc4>

    if (der_length[0] & 0x80)
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	b25b      	sxtb	r3, r3
    2664:	2b00      	cmp	r3, #0
    2666:	da3c      	bge.n	26e2 <atcacert_der_dec_length+0xac>
    {
        // Long form
        size_t num_bytes = der_length[0] & 0x7F;
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	001a      	movs	r2, r3
    266e:	237f      	movs	r3, #127	; 0x7f
    2670:	4013      	ands	r3, r2
    2672:	613b      	str	r3, [r7, #16]
        size_t i;
        if (*der_length_size < num_bytes + 1)
    2674:	68bb      	ldr	r3, [r7, #8]
    2676:	681a      	ldr	r2, [r3, #0]
    2678:	693b      	ldr	r3, [r7, #16]
    267a:	3301      	adds	r3, #1
    267c:	429a      	cmp	r2, r3
    267e:	d201      	bcs.n	2684 <atcacert_der_dec_length+0x4e>
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, not enough data.
    2680:	2304      	movs	r3, #4
    2682:	e03a      	b.n	26fa <atcacert_der_dec_length+0xc4>
        if (num_bytes == 0)
    2684:	693b      	ldr	r3, [r7, #16]
    2686:	2b00      	cmp	r3, #0
    2688:	d101      	bne.n	268e <atcacert_der_dec_length+0x58>
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, indefinite length not supported.
    268a:	2304      	movs	r3, #4
    268c:	e035      	b.n	26fa <atcacert_der_dec_length+0xc4>
        if (num_bytes > sizeof(*length))
    268e:	693b      	ldr	r3, [r7, #16]
    2690:	2b04      	cmp	r3, #4
    2692:	d901      	bls.n	2698 <atcacert_der_dec_length+0x62>
            return ATCACERT_E_DECODING_ERROR;   //  Can't parse DER length format, larger than length.
    2694:	2304      	movs	r3, #4
    2696:	e030      	b.n	26fa <atcacert_der_dec_length+0xc4>

        if (length != NULL)
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	2b00      	cmp	r3, #0
    269c:	d01c      	beq.n	26d8 <atcacert_der_dec_length+0xa2>
        {
            // Decode integer in big-endian format
            *length = 0;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	2200      	movs	r2, #0
    26a2:	601a      	str	r2, [r3, #0]
            for (i = 1; i <= num_bytes; i++)
    26a4:	2301      	movs	r3, #1
    26a6:	617b      	str	r3, [r7, #20]
    26a8:	e012      	b.n	26d0 <atcacert_der_dec_length+0x9a>
                *length += der_length[i] * ((uint32_t)1 << (8 * (num_bytes - i)));
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	681a      	ldr	r2, [r3, #0]
    26ae:	68f9      	ldr	r1, [r7, #12]
    26b0:	697b      	ldr	r3, [r7, #20]
    26b2:	18cb      	adds	r3, r1, r3
    26b4:	781b      	ldrb	r3, [r3, #0]
    26b6:	0018      	movs	r0, r3
    26b8:	6939      	ldr	r1, [r7, #16]
    26ba:	697b      	ldr	r3, [r7, #20]
    26bc:	1acb      	subs	r3, r1, r3
    26be:	00db      	lsls	r3, r3, #3
    26c0:	4098      	lsls	r0, r3
    26c2:	0003      	movs	r3, r0
    26c4:	18d2      	adds	r2, r2, r3
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	601a      	str	r2, [r3, #0]
            for (i = 1; i <= num_bytes; i++)
    26ca:	697b      	ldr	r3, [r7, #20]
    26cc:	3301      	adds	r3, #1
    26ce:	617b      	str	r3, [r7, #20]
    26d0:	697a      	ldr	r2, [r7, #20]
    26d2:	693b      	ldr	r3, [r7, #16]
    26d4:	429a      	cmp	r2, r3
    26d6:	d9e8      	bls.n	26aa <atcacert_der_dec_length+0x74>
        }
        *der_length_size = num_bytes + 1; // Return the actual number of bytes the DER length encoding used.
    26d8:	693b      	ldr	r3, [r7, #16]
    26da:	1c5a      	adds	r2, r3, #1
    26dc:	68bb      	ldr	r3, [r7, #8]
    26de:	601a      	str	r2, [r3, #0]
    26e0:	e00a      	b.n	26f8 <atcacert_der_dec_length+0xc2>
    }
    else
    {
        if (length != NULL)
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d004      	beq.n	26f2 <atcacert_der_dec_length+0xbc>
            *length = der_length[0];
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	001a      	movs	r2, r3
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	601a      	str	r2, [r3, #0]
        *der_length_size = 1; // Return the actual number of bytes the DER length encoding used.
    26f2:	68bb      	ldr	r3, [r7, #8]
    26f4:	2201      	movs	r2, #1
    26f6:	601a      	str	r2, [r3, #0]
    }

    return ATCACERT_E_SUCCESS;
    26f8:	2300      	movs	r3, #0
}
    26fa:	0018      	movs	r0, r3
    26fc:	46bd      	mov	sp, r7
    26fe:	b006      	add	sp, #24
    2700:	bd80      	pop	{r7, pc}
	...

00002704 <atcacert_der_adjust_length>:

int atcacert_der_adjust_length(uint8_t* der_length, size_t* der_length_size, int delta_length, uint32_t* new_length)
{
    2704:	b580      	push	{r7, lr}
    2706:	b08a      	sub	sp, #40	; 0x28
    2708:	af00      	add	r7, sp, #0
    270a:	60f8      	str	r0, [r7, #12]
    270c:	60b9      	str	r1, [r7, #8]
    270e:	607a      	str	r2, [r7, #4]
    2710:	603b      	str	r3, [r7, #0]
    int ret = 0;
    2712:	2300      	movs	r3, #0
    2714:	627b      	str	r3, [r7, #36]	; 0x24
    size_t new_der_len_size = 0;
    2716:	2300      	movs	r3, #0
    2718:	61fb      	str	r3, [r7, #28]
    uint32_t old_len = 0;
    271a:	2300      	movs	r3, #0
    271c:	61bb      	str	r3, [r7, #24]
    uint32_t new_len = 0;
    271e:	2300      	movs	r3, #0
    2720:	623b      	str	r3, [r7, #32]
    uint8_t new_der_length[5];

    ret = atcacert_der_dec_length(der_length, der_length_size, &old_len);
    2722:	2318      	movs	r3, #24
    2724:	18fa      	adds	r2, r7, r3
    2726:	68b9      	ldr	r1, [r7, #8]
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	0018      	movs	r0, r3
    272c:	4b20      	ldr	r3, [pc, #128]	; (27b0 <atcacert_der_adjust_length+0xac>)
    272e:	4798      	blx	r3
    2730:	0003      	movs	r3, r0
    2732:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    2734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2736:	2b00      	cmp	r3, #0
    2738:	d001      	beq.n	273e <atcacert_der_adjust_length+0x3a>
        return ret;
    273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    273c:	e034      	b.n	27a8 <atcacert_der_adjust_length+0xa4>

    if (delta_length < 0 && (size_t)(-delta_length) > old_len)
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	2b00      	cmp	r3, #0
    2742:	da07      	bge.n	2754 <atcacert_der_adjust_length+0x50>
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	425b      	negs	r3, r3
    2748:	001a      	movs	r2, r3
    274a:	69bb      	ldr	r3, [r7, #24]
    274c:	429a      	cmp	r2, r3
    274e:	d901      	bls.n	2754 <atcacert_der_adjust_length+0x50>
        return ATCACERT_E_ERROR;
    2750:	2301      	movs	r3, #1
    2752:	e029      	b.n	27a8 <atcacert_der_adjust_length+0xa4>
    new_len = old_len + delta_length;
    2754:	69ba      	ldr	r2, [r7, #24]
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	18d3      	adds	r3, r2, r3
    275a:	623b      	str	r3, [r7, #32]

    if (new_length != NULL)
    275c:	683b      	ldr	r3, [r7, #0]
    275e:	2b00      	cmp	r3, #0
    2760:	d002      	beq.n	2768 <atcacert_der_adjust_length+0x64>
        *new_length = new_len;
    2762:	683b      	ldr	r3, [r7, #0]
    2764:	6a3a      	ldr	r2, [r7, #32]
    2766:	601a      	str	r2, [r3, #0]

    new_der_len_size = sizeof(new_der_length);
    2768:	2305      	movs	r3, #5
    276a:	61fb      	str	r3, [r7, #28]
    ret = atcacert_der_enc_length(new_len, new_der_length, &new_der_len_size);
    276c:	231c      	movs	r3, #28
    276e:	18fa      	adds	r2, r7, r3
    2770:	2310      	movs	r3, #16
    2772:	18f9      	adds	r1, r7, r3
    2774:	6a3b      	ldr	r3, [r7, #32]
    2776:	0018      	movs	r0, r3
    2778:	4b0e      	ldr	r3, [pc, #56]	; (27b4 <atcacert_der_adjust_length+0xb0>)
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    2780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2782:	2b00      	cmp	r3, #0
    2784:	d001      	beq.n	278a <atcacert_der_adjust_length+0x86>
        return ret;
    2786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2788:	e00e      	b.n	27a8 <atcacert_der_adjust_length+0xa4>

    if (*der_length_size != new_der_len_size)
    278a:	68bb      	ldr	r3, [r7, #8]
    278c:	681a      	ldr	r2, [r3, #0]
    278e:	69fb      	ldr	r3, [r7, #28]
    2790:	429a      	cmp	r2, r3
    2792:	d001      	beq.n	2798 <atcacert_der_adjust_length+0x94>
        return ATCACERT_E_BAD_CERT;
    2794:	230a      	movs	r3, #10
    2796:	e007      	b.n	27a8 <atcacert_der_adjust_length+0xa4>

    memcpy(der_length, new_der_length, new_der_len_size);
    2798:	69fa      	ldr	r2, [r7, #28]
    279a:	2310      	movs	r3, #16
    279c:	18f9      	adds	r1, r7, r3
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	0018      	movs	r0, r3
    27a2:	4b05      	ldr	r3, [pc, #20]	; (27b8 <atcacert_der_adjust_length+0xb4>)
    27a4:	4798      	blx	r3

    return 0;
    27a6:	2300      	movs	r3, #0
}
    27a8:	0018      	movs	r0, r3
    27aa:	46bd      	mov	sp, r7
    27ac:	b00a      	add	sp, #40	; 0x28
    27ae:	bd80      	pop	{r7, pc}
    27b0:	00002637 	.word	0x00002637
    27b4:	0000257d 	.word	0x0000257d
    27b8:	00009d1b 	.word	0x00009d1b

000027bc <atcacert_der_enc_integer>:
int atcacert_der_enc_integer(const uint8_t* int_data,
                             size_t         int_data_size,
                             uint8_t        is_unsigned,
                             uint8_t*       der_int,
                             size_t*        der_int_size)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b08c      	sub	sp, #48	; 0x30
    27c0:	af00      	add	r7, sp, #0
    27c2:	60f8      	str	r0, [r7, #12]
    27c4:	60b9      	str	r1, [r7, #8]
    27c6:	603b      	str	r3, [r7, #0]
    27c8:	1dfb      	adds	r3, r7, #7
    27ca:	701a      	strb	r2, [r3, #0]
    uint8_t der_length[5];
    size_t der_length_size = sizeof(der_length);
    27cc:	2305      	movs	r3, #5
    27ce:	617b      	str	r3, [r7, #20]
    size_t der_int_size_calc = 0;
    27d0:	2300      	movs	r3, #0
    27d2:	627b      	str	r3, [r7, #36]	; 0x24
    size_t trim = 0;
    27d4:	2300      	movs	r3, #0
    27d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t pad = 0;
    27d8:	2300      	movs	r3, #0
    27da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (int_data == NULL || der_int_size == NULL || int_data_size <= 0)
    27dc:	68fb      	ldr	r3, [r7, #12]
    27de:	2b00      	cmp	r3, #0
    27e0:	d005      	beq.n	27ee <atcacert_der_enc_integer+0x32>
    27e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    27e4:	2b00      	cmp	r3, #0
    27e6:	d002      	beq.n	27ee <atcacert_der_enc_integer+0x32>
    27e8:	68bb      	ldr	r3, [r7, #8]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d101      	bne.n	27f2 <atcacert_der_enc_integer+0x36>
        return ATCACERT_E_BAD_PARAMS;
    27ee:	2302      	movs	r3, #2
    27f0:	e087      	b.n	2902 <atcacert_der_enc_integer+0x146>

    if (!(is_unsigned && (int_data[0] & 0x80)))
    27f2:	1dfb      	adds	r3, r7, #7
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d008      	beq.n	280c <atcacert_der_enc_integer+0x50>
    27fa:	68fb      	ldr	r3, [r7, #12]
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	b25b      	sxtb	r3, r3
    2800:	2b00      	cmp	r3, #0
    2802:	db25      	blt.n	2850 <atcacert_der_enc_integer+0x94>
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
    2804:	e002      	b.n	280c <atcacert_der_enc_integer+0x50>
            (int_data_size - trim >= 2) && (
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
            trim++;
    2806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2808:	3301      	adds	r3, #1
    280a:	62fb      	str	r3, [r7, #44]	; 0x2c
            (int_data_size - trim >= 2) && (
    280c:	68ba      	ldr	r2, [r7, #8]
    280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2810:	1ad3      	subs	r3, r2, r3
        while (
    2812:	2b01      	cmp	r3, #1
    2814:	d91f      	bls.n	2856 <atcacert_der_enc_integer+0x9a>
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    2816:	68fa      	ldr	r2, [r7, #12]
    2818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    281a:	18d3      	adds	r3, r2, r3
    281c:	781b      	ldrb	r3, [r3, #0]
            (int_data_size - trim >= 2) && (
    281e:	2b00      	cmp	r3, #0
    2820:	d107      	bne.n	2832 <atcacert_der_enc_integer+0x76>
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    2822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2824:	3301      	adds	r3, #1
    2826:	68fa      	ldr	r2, [r7, #12]
    2828:	18d3      	adds	r3, r2, r3
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	b25b      	sxtb	r3, r3
    282e:	2b00      	cmp	r3, #0
    2830:	dae9      	bge.n	2806 <atcacert_der_enc_integer+0x4a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
    2832:	68fa      	ldr	r2, [r7, #12]
    2834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2836:	18d3      	adds	r3, r2, r3
    2838:	781b      	ldrb	r3, [r3, #0]
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    283a:	2bff      	cmp	r3, #255	; 0xff
    283c:	d10b      	bne.n	2856 <atcacert_der_enc_integer+0x9a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
    283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2840:	3301      	adds	r3, #1
    2842:	68fa      	ldr	r2, [r7, #12]
    2844:	18d3      	adds	r3, r2, r3
    2846:	781b      	ldrb	r3, [r3, #0]
    2848:	b25b      	sxtb	r3, r3
    284a:	2b00      	cmp	r3, #0
    284c:	dbdb      	blt.n	2806 <atcacert_der_enc_integer+0x4a>
    if (!(is_unsigned && (int_data[0] & 0x80)))
    284e:	e002      	b.n	2856 <atcacert_der_enc_integer+0x9a>
    }
    else
    {
        // Will be adding extra byte for unsigned padding so it's not interpreted as negative
        pad = 1;
    2850:	2301      	movs	r3, #1
    2852:	62bb      	str	r3, [r7, #40]	; 0x28
    2854:	e000      	b.n	2858 <atcacert_der_enc_integer+0x9c>
    if (!(is_unsigned && (int_data[0] & 0x80)))
    2856:	46c0      	nop			; (mov r8, r8)
    }

    int ret = atcacert_der_enc_length(int_data_size + pad - trim, der_length, &der_length_size);
    2858:	68ba      	ldr	r2, [r7, #8]
    285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    285c:	18d2      	adds	r2, r2, r3
    285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2860:	1ad3      	subs	r3, r2, r3
    2862:	2214      	movs	r2, #20
    2864:	18ba      	adds	r2, r7, r2
    2866:	2118      	movs	r1, #24
    2868:	1879      	adds	r1, r7, r1
    286a:	0018      	movs	r0, r3
    286c:	4b27      	ldr	r3, [pc, #156]	; (290c <atcacert_der_enc_integer+0x150>)
    286e:	4798      	blx	r3
    2870:	0003      	movs	r3, r0
    2872:	623b      	str	r3, [r7, #32]
    if (ret != ATCACERT_E_SUCCESS)
    2874:	6a3b      	ldr	r3, [r7, #32]
    2876:	2b00      	cmp	r3, #0
    2878:	d001      	beq.n	287e <atcacert_der_enc_integer+0xc2>
        return ret;
    287a:	6a3b      	ldr	r3, [r7, #32]
    287c:	e041      	b.n	2902 <atcacert_der_enc_integer+0x146>

    der_int_size_calc = 1 + der_length_size + int_data_size + pad - trim;
    287e:	697a      	ldr	r2, [r7, #20]
    2880:	68bb      	ldr	r3, [r7, #8]
    2882:	18d2      	adds	r2, r2, r3
    2884:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2886:	18d2      	adds	r2, r2, r3
    2888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    288a:	1ad3      	subs	r3, r2, r3
    288c:	3301      	adds	r3, #1
    288e:	627b      	str	r3, [r7, #36]	; 0x24

    if (der_int != NULL && der_int_size_calc > *der_int_size)
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d009      	beq.n	28aa <atcacert_der_enc_integer+0xee>
    2896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2898:	681a      	ldr	r2, [r3, #0]
    289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    289c:	429a      	cmp	r2, r3
    289e:	d204      	bcs.n	28aa <atcacert_der_enc_integer+0xee>
    {
        *der_int_size = der_int_size_calc;
    28a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    28a4:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    28a6:	2303      	movs	r3, #3
    28a8:	e02b      	b.n	2902 <atcacert_der_enc_integer+0x146>
    }

    *der_int_size = der_int_size_calc;
    28aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    28ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    28ae:	601a      	str	r2, [r3, #0]

    if (der_int == NULL)
    28b0:	683b      	ldr	r3, [r7, #0]
    28b2:	2b00      	cmp	r3, #0
    28b4:	d101      	bne.n	28ba <atcacert_der_enc_integer+0xfe>
        return ATCACERT_E_SUCCESS;                                                      // Caller just wanted the size of the encoded integer
    28b6:	2300      	movs	r3, #0
    28b8:	e023      	b.n	2902 <atcacert_der_enc_integer+0x146>

    der_int[0] = 0x02;                                                                  // Integer tag
    28ba:	683b      	ldr	r3, [r7, #0]
    28bc:	2202      	movs	r2, #2
    28be:	701a      	strb	r2, [r3, #0]
    memcpy(&der_int[1], der_length, der_length_size);                                   // Integer length
    28c0:	683b      	ldr	r3, [r7, #0]
    28c2:	3301      	adds	r3, #1
    28c4:	697a      	ldr	r2, [r7, #20]
    28c6:	2118      	movs	r1, #24
    28c8:	1879      	adds	r1, r7, r1
    28ca:	0018      	movs	r0, r3
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <atcacert_der_enc_integer+0x154>)
    28ce:	4798      	blx	r3
    if (pad)
    28d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    28d2:	2b00      	cmp	r3, #0
    28d4:	d005      	beq.n	28e2 <atcacert_der_enc_integer+0x126>
        der_int[der_length_size + 1] = 0;                                               // Unsigned integer value requires padding byte so it's not interpreted as negative
    28d6:	697b      	ldr	r3, [r7, #20]
    28d8:	3301      	adds	r3, #1
    28da:	683a      	ldr	r2, [r7, #0]
    28dc:	18d3      	adds	r3, r2, r3
    28de:	2200      	movs	r2, #0
    28e0:	701a      	strb	r2, [r3, #0]
    memcpy(&der_int[der_length_size + 1 + pad], &int_data[trim], int_data_size - trim); // Integer value
    28e2:	697a      	ldr	r2, [r7, #20]
    28e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    28e6:	18d3      	adds	r3, r2, r3
    28e8:	3301      	adds	r3, #1
    28ea:	683a      	ldr	r2, [r7, #0]
    28ec:	18d0      	adds	r0, r2, r3
    28ee:	68fa      	ldr	r2, [r7, #12]
    28f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28f2:	18d1      	adds	r1, r2, r3
    28f4:	68ba      	ldr	r2, [r7, #8]
    28f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    28f8:	1ad3      	subs	r3, r2, r3
    28fa:	001a      	movs	r2, r3
    28fc:	4b04      	ldr	r3, [pc, #16]	; (2910 <atcacert_der_enc_integer+0x154>)
    28fe:	4798      	blx	r3

    return ATCACERT_E_SUCCESS;
    2900:	2300      	movs	r3, #0
}
    2902:	0018      	movs	r0, r3
    2904:	46bd      	mov	sp, r7
    2906:	b00c      	add	sp, #48	; 0x30
    2908:	bd80      	pop	{r7, pc}
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	0000257d 	.word	0x0000257d
    2910:	00009d1b 	.word	0x00009d1b

00002914 <atcacert_der_enc_ecdsa_sig_value>:
}

int atcacert_der_enc_ecdsa_sig_value(const uint8_t raw_sig[64],
                                     uint8_t*      der_sig,
                                     size_t*       der_sig_size)
{
    2914:	b590      	push	{r4, r7, lr}
    2916:	b08b      	sub	sp, #44	; 0x2c
    2918:	af02      	add	r7, sp, #8
    291a:	60f8      	str	r0, [r7, #12]
    291c:	60b9      	str	r1, [r7, #8]
    291e:	607a      	str	r2, [r7, #4]
    int ret = 0;
    2920:	2300      	movs	r3, #0
    2922:	61fb      	str	r3, [r7, #28]
    size_t r_size = 0;
    2924:	2300      	movs	r3, #0
    2926:	617b      	str	r3, [r7, #20]
    size_t s_size = 0;
    2928:	2300      	movs	r3, #0
    292a:	613b      	str	r3, [r7, #16]
    size_t der_sig_size_calc = 0;
    292c:	2300      	movs	r3, #0
    292e:	61bb      	str	r3, [r7, #24]

    if (raw_sig == NULL || der_sig_size == NULL)
    2930:	68fb      	ldr	r3, [r7, #12]
    2932:	2b00      	cmp	r3, #0
    2934:	d002      	beq.n	293c <atcacert_der_enc_ecdsa_sig_value+0x28>
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2b00      	cmp	r3, #0
    293a:	d101      	bne.n	2940 <atcacert_der_enc_ecdsa_sig_value+0x2c>
        return ATCACERT_E_BAD_PARAMS;
    293c:	2302      	movs	r3, #2
    293e:	e07d      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Find size of the DER encoded R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, NULL, &r_size);
    2940:	68f8      	ldr	r0, [r7, #12]
    2942:	2314      	movs	r3, #20
    2944:	18fb      	adds	r3, r7, r3
    2946:	9300      	str	r3, [sp, #0]
    2948:	2300      	movs	r3, #0
    294a:	2201      	movs	r2, #1
    294c:	2120      	movs	r1, #32
    294e:	4c3d      	ldr	r4, [pc, #244]	; (2a44 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2950:	47a0      	blx	r4
    2952:	0003      	movs	r3, r0
    2954:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2956:	69fb      	ldr	r3, [r7, #28]
    2958:	2b00      	cmp	r3, #0
    295a:	d001      	beq.n	2960 <atcacert_der_enc_ecdsa_sig_value+0x4c>
        return ret;
    295c:	69fb      	ldr	r3, [r7, #28]
    295e:	e06d      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Find size of the DER encoded S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, NULL, &s_size);
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	3320      	adds	r3, #32
    2964:	0018      	movs	r0, r3
    2966:	2310      	movs	r3, #16
    2968:	18fb      	adds	r3, r7, r3
    296a:	9300      	str	r3, [sp, #0]
    296c:	2300      	movs	r3, #0
    296e:	2201      	movs	r2, #1
    2970:	2120      	movs	r1, #32
    2972:	4c34      	ldr	r4, [pc, #208]	; (2a44 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2974:	47a0      	blx	r4
    2976:	0003      	movs	r3, r0
    2978:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	2b00      	cmp	r3, #0
    297e:	d001      	beq.n	2984 <atcacert_der_enc_ecdsa_sig_value+0x70>
        return ret;
    2980:	69fb      	ldr	r3, [r7, #28]
    2982:	e05b      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // This calculation assumes all DER lengths are a single byte, which is fine for 32 byte
    // R and S integers.
    der_sig_size_calc = 5 + r_size + s_size;
    2984:	697a      	ldr	r2, [r7, #20]
    2986:	693b      	ldr	r3, [r7, #16]
    2988:	18d3      	adds	r3, r2, r3
    298a:	3305      	adds	r3, #5
    298c:	61bb      	str	r3, [r7, #24]

    if (der_sig != NULL && *der_sig_size < der_sig_size_calc)
    298e:	68bb      	ldr	r3, [r7, #8]
    2990:	2b00      	cmp	r3, #0
    2992:	d009      	beq.n	29a8 <atcacert_der_enc_ecdsa_sig_value+0x94>
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	681a      	ldr	r2, [r3, #0]
    2998:	69bb      	ldr	r3, [r7, #24]
    299a:	429a      	cmp	r2, r3
    299c:	d204      	bcs.n	29a8 <atcacert_der_enc_ecdsa_sig_value+0x94>
    {
        *der_sig_size = der_sig_size_calc;
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	69ba      	ldr	r2, [r7, #24]
    29a2:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    29a4:	2303      	movs	r3, #3
    29a6:	e049      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    *der_sig_size = der_sig_size_calc;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	69ba      	ldr	r2, [r7, #24]
    29ac:	601a      	str	r2, [r3, #0]

    if (der_sig == NULL)
    29ae:	68bb      	ldr	r3, [r7, #8]
    29b0:	2b00      	cmp	r3, #0
    29b2:	d101      	bne.n	29b8 <atcacert_der_enc_ecdsa_sig_value+0xa4>
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size
    29b4:	2300      	movs	r3, #0
    29b6:	e041      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    der_sig[0] = 0x03;                              // signatureValue bit string tag
    29b8:	68bb      	ldr	r3, [r7, #8]
    29ba:	2203      	movs	r2, #3
    29bc:	701a      	strb	r2, [r3, #0]
    der_sig[1] = (uint8_t)(der_sig_size_calc - 2);  // signatureValue bit string length
    29be:	68bb      	ldr	r3, [r7, #8]
    29c0:	3301      	adds	r3, #1
    29c2:	69ba      	ldr	r2, [r7, #24]
    29c4:	b2d2      	uxtb	r2, r2
    29c6:	3a02      	subs	r2, #2
    29c8:	b2d2      	uxtb	r2, r2
    29ca:	701a      	strb	r2, [r3, #0]
    der_sig[2] = 0x00;                              // signatureValue bit string spare bits
    29cc:	68bb      	ldr	r3, [r7, #8]
    29ce:	3302      	adds	r3, #2
    29d0:	2200      	movs	r2, #0
    29d2:	701a      	strb	r2, [r3, #0]

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value
    der_sig[3] = 0x30;                              // sequence tag
    29d4:	68bb      	ldr	r3, [r7, #8]
    29d6:	3303      	adds	r3, #3
    29d8:	2230      	movs	r2, #48	; 0x30
    29da:	701a      	strb	r2, [r3, #0]
    der_sig[4] = (uint8_t)(der_sig_size_calc - 5);  // sequence length
    29dc:	68bb      	ldr	r3, [r7, #8]
    29de:	3304      	adds	r3, #4
    29e0:	69ba      	ldr	r2, [r7, #24]
    29e2:	b2d2      	uxtb	r2, r2
    29e4:	3a05      	subs	r2, #5
    29e6:	b2d2      	uxtb	r2, r2
    29e8:	701a      	strb	r2, [r3, #0]

    // Add R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, &der_sig[5], &r_size);
    29ea:	68bb      	ldr	r3, [r7, #8]
    29ec:	1d5a      	adds	r2, r3, #5
    29ee:	68f8      	ldr	r0, [r7, #12]
    29f0:	2314      	movs	r3, #20
    29f2:	18fb      	adds	r3, r7, r3
    29f4:	9300      	str	r3, [sp, #0]
    29f6:	0013      	movs	r3, r2
    29f8:	2201      	movs	r2, #1
    29fa:	2120      	movs	r1, #32
    29fc:	4c11      	ldr	r4, [pc, #68]	; (2a44 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    29fe:	47a0      	blx	r4
    2a00:	0003      	movs	r3, r0
    2a02:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2a04:	69fb      	ldr	r3, [r7, #28]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d001      	beq.n	2a0e <atcacert_der_enc_ecdsa_sig_value+0xfa>
        return ret;
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	e016      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Add S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, &der_sig[5 + r_size], &s_size);
    2a0e:	68fb      	ldr	r3, [r7, #12]
    2a10:	3320      	adds	r3, #32
    2a12:	0018      	movs	r0, r3
    2a14:	697b      	ldr	r3, [r7, #20]
    2a16:	3305      	adds	r3, #5
    2a18:	68ba      	ldr	r2, [r7, #8]
    2a1a:	18d2      	adds	r2, r2, r3
    2a1c:	2310      	movs	r3, #16
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	9300      	str	r3, [sp, #0]
    2a22:	0013      	movs	r3, r2
    2a24:	2201      	movs	r2, #1
    2a26:	2120      	movs	r1, #32
    2a28:	4c06      	ldr	r4, [pc, #24]	; (2a44 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2a2a:	47a0      	blx	r4
    2a2c:	0003      	movs	r3, r0
    2a2e:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2a30:	69fb      	ldr	r3, [r7, #28]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d001      	beq.n	2a3a <atcacert_der_enc_ecdsa_sig_value+0x126>
        return ret;
    2a36:	69fb      	ldr	r3, [r7, #28]
    2a38:	e000      	b.n	2a3c <atcacert_der_enc_ecdsa_sig_value+0x128>

    return ATCACERT_E_SUCCESS;
    2a3a:	2300      	movs	r3, #0
}
    2a3c:	0018      	movs	r0, r3
    2a3e:	46bd      	mov	sp, r7
    2a40:	b009      	add	sp, #36	; 0x24
    2a42:	bd90      	pop	{r4, r7, pc}
    2a44:	000027bd 	.word	0x000027bd

00002a48 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    2a48:	b590      	push	{r4, r7, lr}
    2a4a:	b085      	sub	sp, #20
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	0002      	movs	r2, r0
    2a50:	1dfb      	adds	r3, r7, #7
    2a52:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2a54:	230b      	movs	r3, #11
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	2200      	movs	r2, #0
    2a5a:	701a      	strb	r2, [r3, #0]
    ATCACommand cacmd = (ATCACommand)malloc(sizeof(struct atca_command));
    2a5c:	2008      	movs	r0, #8
    2a5e:	4b11      	ldr	r3, [pc, #68]	; (2aa4 <newATCACommand+0x5c>)
    2a60:	4798      	blx	r3
    2a62:	0003      	movs	r3, r0
    2a64:	60fb      	str	r3, [r7, #12]

    cacmd->dt = device_type;
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	1dfa      	adds	r2, r7, #7
    2a6a:	7812      	ldrb	r2, [r2, #0]
    2a6c:	701a      	strb	r2, [r3, #0]
    status = atInitExecTimes(cacmd, device_type);  // setup typical execution times for this device type
    2a6e:	230b      	movs	r3, #11
    2a70:	18fc      	adds	r4, r7, r3
    2a72:	1dfb      	adds	r3, r7, #7
    2a74:	781a      	ldrb	r2, [r3, #0]
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	0011      	movs	r1, r2
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b0a      	ldr	r3, [pc, #40]	; (2aa8 <newATCACommand+0x60>)
    2a7e:	4798      	blx	r3
    2a80:	0003      	movs	r3, r0
    2a82:	7023      	strb	r3, [r4, #0]

    if (status != ATCA_SUCCESS)
    2a84:	230b      	movs	r3, #11
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d005      	beq.n	2a9a <newATCACommand+0x52>
    {
        free(cacmd);
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	0018      	movs	r0, r3
    2a92:	4b06      	ldr	r3, [pc, #24]	; (2aac <newATCACommand+0x64>)
    2a94:	4798      	blx	r3
        cacmd = NULL;
    2a96:	2300      	movs	r3, #0
    2a98:	60fb      	str	r3, [r7, #12]
    }

    return cacmd;
    2a9a:	68fb      	ldr	r3, [r7, #12]
}
    2a9c:	0018      	movs	r0, r3
    2a9e:	46bd      	mov	sp, r7
    2aa0:	b005      	add	sp, #20
    2aa2:	bd90      	pop	{r4, r7, pc}
    2aa4:	00009cd5 	.word	0x00009cd5
    2aa8:	00002c79 	.word	0x00002c79
    2aac:	00009ce9 	.word	0x00009ce9

00002ab0 <atGenKey>:
 * \param[in] cacmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atGenKey(ATCACommand cacmd, ATCAPacket *packet)
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	6078      	str	r0, [r7, #4]
    2ab8:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    2aba:	683b      	ldr	r3, [r7, #0]
    2abc:	2240      	movs	r2, #64	; 0x40
    2abe:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    2ac0:	683b      	ldr	r3, [r7, #0]
    2ac2:	78db      	ldrb	r3, [r3, #3]
    2ac4:	001a      	movs	r2, r3
    2ac6:	2310      	movs	r3, #16
    2ac8:	4013      	ands	r3, r2
    2aca:	d007      	beq.n	2adc <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    2acc:	683b      	ldr	r3, [r7, #0]
    2ace:	220a      	movs	r2, #10
    2ad0:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    2ad2:	683b      	ldr	r3, [r7, #0]
    2ad4:	228a      	movs	r2, #138	; 0x8a
    2ad6:	2104      	movs	r1, #4
    2ad8:	5299      	strh	r1, [r3, r2]
    2ada:	e006      	b.n	2aea <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	2207      	movs	r2, #7
    2ae0:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    2ae2:	683b      	ldr	r3, [r7, #0]
    2ae4:	228a      	movs	r2, #138	; 0x8a
    2ae6:	214b      	movs	r1, #75	; 0x4b
    2ae8:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    2aea:	683b      	ldr	r3, [r7, #0]
    2aec:	0018      	movs	r0, r3
    2aee:	4b03      	ldr	r3, [pc, #12]	; (2afc <atGenKey+0x4c>)
    2af0:	4798      	blx	r3
    return ATCA_SUCCESS;
    2af2:	2300      	movs	r3, #0
}
    2af4:	0018      	movs	r0, r3
    2af6:	46bd      	mov	sp, r7
    2af8:	b002      	add	sp, #8
    2afa:	bd80      	pop	{r7, pc}
    2afc:	00002dbd 	.word	0x00002dbd

00002b00 <atInfo>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atInfo(ATCACommand cacmd, ATCAPacket *packet)
{
    2b00:	b580      	push	{r7, lr}
    2b02:	b082      	sub	sp, #8
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
    2b08:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    2b0a:	683b      	ldr	r3, [r7, #0]
    2b0c:	2230      	movs	r2, #48	; 0x30
    2b0e:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    2b10:	683b      	ldr	r3, [r7, #0]
    2b12:	2207      	movs	r2, #7
    2b14:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    2b16:	683b      	ldr	r3, [r7, #0]
    2b18:	228a      	movs	r2, #138	; 0x8a
    2b1a:	2107      	movs	r1, #7
    2b1c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2b1e:	683b      	ldr	r3, [r7, #0]
    2b20:	0018      	movs	r0, r3
    2b22:	4b03      	ldr	r3, [pc, #12]	; (2b30 <atInfo+0x30>)
    2b24:	4798      	blx	r3
    return ATCA_SUCCESS;
    2b26:	2300      	movs	r3, #0
}
    2b28:	0018      	movs	r0, r3
    2b2a:	46bd      	mov	sp, r7
    2b2c:	b002      	add	sp, #8
    2b2e:	bd80      	pop	{r7, pc}
    2b30:	00002dbd 	.word	0x00002dbd

00002b34 <atNonce>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atNonce(ATCACommand cacmd, ATCAPacket *packet)
{
    2b34:	b580      	push	{r7, lr}
    2b36:	b084      	sub	sp, #16
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
    2b3c:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    int mode = packet->param1 & 0x03;
    2b3e:	683b      	ldr	r3, [r7, #0]
    2b40:	78db      	ldrb	r3, [r3, #3]
    2b42:	001a      	movs	r2, r3
    2b44:	2303      	movs	r3, #3
    2b46:	4013      	ands	r3, r2
    2b48:	60fb      	str	r3, [r7, #12]

    packet->opcode = ATCA_NONCE;
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	2216      	movs	r2, #22
    2b4e:	709a      	strb	r2, [r3, #2]

    if ( (mode == 0 || mode == 1) )         // mode[0:1] == 0 | 1 then NumIn is 20 bytes
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d002      	beq.n	2b5c <atNonce+0x28>
    2b56:	68fb      	ldr	r3, [r7, #12]
    2b58:	2b01      	cmp	r3, #1
    2b5a:	d107      	bne.n	2b6c <atNonce+0x38>
    {
        packet->txsize = NONCE_COUNT_SHORT; // 20 byte challenge
    2b5c:	683b      	ldr	r3, [r7, #0]
    2b5e:	221b      	movs	r2, #27
    2b60:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG;
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	228a      	movs	r2, #138	; 0x8a
    2b66:	2123      	movs	r1, #35	; 0x23
    2b68:	5299      	strh	r1, [r3, r2]
    2b6a:	e00c      	b.n	2b86 <atNonce+0x52>
    }
    else if (mode == 0x03)                  // NumIn is 32 bytes
    2b6c:	68fb      	ldr	r3, [r7, #12]
    2b6e:	2b03      	cmp	r3, #3
    2b70:	d107      	bne.n	2b82 <atNonce+0x4e>
    {
        packet->txsize = NONCE_COUNT_LONG;  // 32 byte challenge
    2b72:	683b      	ldr	r3, [r7, #0]
    2b74:	2227      	movs	r2, #39	; 0x27
    2b76:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT;
    2b78:	683b      	ldr	r3, [r7, #0]
    2b7a:	228a      	movs	r2, #138	; 0x8a
    2b7c:	2104      	movs	r1, #4
    2b7e:	5299      	strh	r1, [r3, r2]
    2b80:	e001      	b.n	2b86 <atNonce+0x52>
    }
    else
    {
        return ATCA_BAD_PARAM;
    2b82:	23e2      	movs	r3, #226	; 0xe2
    2b84:	e004      	b.n	2b90 <atNonce+0x5c>
    }

    atCalcCrc(packet);
    2b86:	683b      	ldr	r3, [r7, #0]
    2b88:	0018      	movs	r0, r3
    2b8a:	4b03      	ldr	r3, [pc, #12]	; (2b98 <atNonce+0x64>)
    2b8c:	4798      	blx	r3
    return ATCA_SUCCESS;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	0018      	movs	r0, r3
    2b92:	46bd      	mov	sp, r7
    2b94:	b004      	add	sp, #16
    2b96:	bd80      	pop	{r7, pc}
    2b98:	00002dbd 	.word	0x00002dbd

00002b9c <atRandom>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRandom(ATCACommand cacmd, ATCAPacket *packet)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b082      	sub	sp, #8
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    2ba4:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	221b      	movs	r2, #27
    2baa:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    2bac:	683b      	ldr	r3, [r7, #0]
    2bae:	2207      	movs	r2, #7
    2bb0:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    2bb2:	683b      	ldr	r3, [r7, #0]
    2bb4:	228a      	movs	r2, #138	; 0x8a
    2bb6:	2123      	movs	r1, #35	; 0x23
    2bb8:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2bba:	683b      	ldr	r3, [r7, #0]
    2bbc:	0018      	movs	r0, r3
    2bbe:	4b03      	ldr	r3, [pc, #12]	; (2bcc <atRandom+0x30>)
    2bc0:	4798      	blx	r3
    return ATCA_SUCCESS;
    2bc2:	2300      	movs	r3, #0
}
    2bc4:	0018      	movs	r0, r3
    2bc6:	46bd      	mov	sp, r7
    2bc8:	b002      	add	sp, #8
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	00002dbd 	.word	0x00002dbd

00002bd0 <atRead>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRead(ATCACommand cacmd, ATCAPacket *packet)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b082      	sub	sp, #8
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	6078      	str	r0, [r7, #4]
    2bd8:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	2202      	movs	r2, #2
    2bde:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	2207      	movs	r2, #7
    2be4:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	78db      	ldrb	r3, [r3, #3]
    2bea:	b25b      	sxtb	r3, r3
    2bec:	2b00      	cmp	r3, #0
    2bee:	db04      	blt.n	2bfa <atRead+0x2a>
        packet->rxsize = READ_4_RSP_SIZE;
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	228a      	movs	r2, #138	; 0x8a
    2bf4:	2107      	movs	r1, #7
    2bf6:	5299      	strh	r1, [r3, r2]
    2bf8:	e003      	b.n	2c02 <atRead+0x32>
    else
        packet->rxsize = READ_32_RSP_SIZE;
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	228a      	movs	r2, #138	; 0x8a
    2bfe:	2123      	movs	r1, #35	; 0x23
    2c00:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2c02:	683b      	ldr	r3, [r7, #0]
    2c04:	0018      	movs	r0, r3
    2c06:	4b03      	ldr	r3, [pc, #12]	; (2c14 <atRead+0x44>)
    2c08:	4798      	blx	r3
    return ATCA_SUCCESS;
    2c0a:	2300      	movs	r3, #0
}
    2c0c:	0018      	movs	r0, r3
    2c0e:	46bd      	mov	sp, r7
    2c10:	b002      	add	sp, #8
    2c12:	bd80      	pop	{r7, pc}
    2c14:	00002dbd 	.word	0x00002dbd

00002c18 <atSign>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atSign(ATCACommand cacmd, ATCAPacket *packet)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b082      	sub	sp, #8
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	6078      	str	r0, [r7, #4]
    2c20:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    2c22:	683b      	ldr	r3, [r7, #0]
    2c24:	2241      	movs	r2, #65	; 0x41
    2c26:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    2c28:	683b      	ldr	r3, [r7, #0]
    2c2a:	2207      	movs	r2, #7
    2c2c:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    2c2e:	683b      	ldr	r3, [r7, #0]
    2c30:	228a      	movs	r2, #138	; 0x8a
    2c32:	2143      	movs	r1, #67	; 0x43
    2c34:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2c36:	683b      	ldr	r3, [r7, #0]
    2c38:	0018      	movs	r0, r3
    2c3a:	4b03      	ldr	r3, [pc, #12]	; (2c48 <atSign+0x30>)
    2c3c:	4798      	blx	r3
    return ATCA_SUCCESS;
    2c3e:	2300      	movs	r3, #0
}
    2c40:	0018      	movs	r0, r3
    2c42:	46bd      	mov	sp, r7
    2c44:	b002      	add	sp, #8
    2c46:	bd80      	pop	{r7, pc}
    2c48:	00002dbd 	.word	0x00002dbd

00002c4c <deleteATCACommand>:
/** \brief ATCACommand destructor
 * \param[in] cacmd instance of a command object
 */

void deleteATCACommand(ATCACommand *cacmd)    // destructor
{
    2c4c:	b580      	push	{r7, lr}
    2c4e:	b082      	sub	sp, #8
    2c50:	af00      	add	r7, sp, #0
    2c52:	6078      	str	r0, [r7, #4]
    if (*cacmd)
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d004      	beq.n	2c66 <deleteATCACommand+0x1a>
        free((void*)*cacmd);
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	681b      	ldr	r3, [r3, #0]
    2c60:	0018      	movs	r0, r3
    2c62:	4b04      	ldr	r3, [pc, #16]	; (2c74 <deleteATCACommand+0x28>)
    2c64:	4798      	blx	r3

    *cacmd = NULL;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	2200      	movs	r2, #0
    2c6a:	601a      	str	r2, [r3, #0]
}
    2c6c:	46c0      	nop			; (mov r8, r8)
    2c6e:	46bd      	mov	sp, r7
    2c70:	b002      	add	sp, #8
    2c72:	bd80      	pop	{r7, pc}
    2c74:	00009ce9 	.word	0x00009ce9

00002c78 <atInitExecTimes>:
 * \param[in] device_type - the device type - execution times vary by device type
 * \return ATCA_STATUS
 */

ATCA_STATUS atInitExecTimes(ATCACommand cacmd, ATCADeviceType device_type)
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b082      	sub	sp, #8
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	6078      	str	r0, [r7, #4]
    2c80:	000a      	movs	r2, r1
    2c82:	1cfb      	adds	r3, r7, #3
    2c84:	701a      	strb	r2, [r3, #0]
    switch (device_type)
    2c86:	1cfb      	adds	r3, r7, #3
    2c88:	781b      	ldrb	r3, [r3, #0]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d006      	beq.n	2c9c <atInitExecTimes+0x24>
    2c8e:	db09      	blt.n	2ca4 <atInitExecTimes+0x2c>
    2c90:	2b02      	cmp	r3, #2
    2c92:	dc07      	bgt.n	2ca4 <atInitExecTimes+0x2c>
    {
    case ATECC108A:
    case ATECC508A:
        cacmd->execution_times = exectimes_x08a;
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	4a07      	ldr	r2, [pc, #28]	; (2cb4 <atInitExecTimes+0x3c>)
    2c98:	605a      	str	r2, [r3, #4]
        break;
    2c9a:	e005      	b.n	2ca8 <atInitExecTimes+0x30>
    case ATSHA204A:
        cacmd->execution_times = exectimes_204a;
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	4a06      	ldr	r2, [pc, #24]	; (2cb8 <atInitExecTimes+0x40>)
    2ca0:	605a      	str	r2, [r3, #4]
        break;
    2ca2:	e001      	b.n	2ca8 <atInitExecTimes+0x30>
    default:
        return ATCA_BAD_PARAM;
    2ca4:	23e2      	movs	r3, #226	; 0xe2
    2ca6:	e000      	b.n	2caa <atInitExecTimes+0x32>
        break;
    }

    return ATCA_SUCCESS;
    2ca8:	2300      	movs	r3, #0
}
    2caa:	0018      	movs	r0, r3
    2cac:	46bd      	mov	sp, r7
    2cae:	b002      	add	sp, #8
    2cb0:	bd80      	pop	{r7, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	2000004c 	.word	0x2000004c
    2cb8:	20000078 	.word	0x20000078

00002cbc <atGetExecTime>:
 * \param[in] cmd - the specific command for which to lookup the execution time
 * \return typical execution time in milleseconds for the given command
 */

uint16_t atGetExecTime(ATCACommand cacmd, ATCA_CmdMap cmd)
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	b082      	sub	sp, #8
    2cc0:	af00      	add	r7, sp, #0
    2cc2:	6078      	str	r0, [r7, #4]
    2cc4:	000a      	movs	r2, r1
    2cc6:	1cfb      	adds	r3, r7, #3
    2cc8:	701a      	strb	r2, [r3, #0]
    return cacmd->execution_times[cmd];
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	685a      	ldr	r2, [r3, #4]
    2cce:	1cfb      	adds	r3, r7, #3
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	005b      	lsls	r3, r3, #1
    2cd4:	18d3      	adds	r3, r2, r3
    2cd6:	881b      	ldrh	r3, [r3, #0]
}
    2cd8:	0018      	movs	r0, r3
    2cda:	46bd      	mov	sp, r7
    2cdc:	b002      	add	sp, #8
    2cde:	bd80      	pop	{r7, pc}

00002ce0 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b088      	sub	sp, #32
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	60f8      	str	r0, [r7, #12]
    2ce8:	60b9      	str	r1, [r7, #8]
    2cea:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    2cec:	231a      	movs	r3, #26
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	2200      	movs	r2, #0
    2cf2:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    2cf4:	2316      	movs	r3, #22
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	4a2f      	ldr	r2, [pc, #188]	; (2db8 <atCRC+0xd8>)
    2cfa:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    2cfc:	2300      	movs	r3, #0
    2cfe:	61fb      	str	r3, [r7, #28]
    2d00:	e043      	b.n	2d8a <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    2d02:	2319      	movs	r3, #25
    2d04:	18fb      	adds	r3, r7, r3
    2d06:	2201      	movs	r2, #1
    2d08:	701a      	strb	r2, [r3, #0]
    2d0a:	e036      	b.n	2d7a <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    2d0c:	68ba      	ldr	r2, [r7, #8]
    2d0e:	69fb      	ldr	r3, [r7, #28]
    2d10:	18d3      	adds	r3, r2, r3
    2d12:	781b      	ldrb	r3, [r3, #0]
    2d14:	2219      	movs	r2, #25
    2d16:	18ba      	adds	r2, r7, r2
    2d18:	7812      	ldrb	r2, [r2, #0]
    2d1a:	4013      	ands	r3, r2
    2d1c:	b2db      	uxtb	r3, r3
    2d1e:	1e5a      	subs	r2, r3, #1
    2d20:	4193      	sbcs	r3, r2
    2d22:	b2da      	uxtb	r2, r3
    2d24:	2315      	movs	r3, #21
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    2d2a:	231a      	movs	r3, #26
    2d2c:	18fb      	adds	r3, r7, r3
    2d2e:	881b      	ldrh	r3, [r3, #0]
    2d30:	0bdb      	lsrs	r3, r3, #15
    2d32:	b29a      	uxth	r2, r3
    2d34:	2314      	movs	r3, #20
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    2d3a:	231a      	movs	r3, #26
    2d3c:	18fa      	adds	r2, r7, r3
    2d3e:	231a      	movs	r3, #26
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	881b      	ldrh	r3, [r3, #0]
    2d44:	18db      	adds	r3, r3, r3
    2d46:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    2d48:	2315      	movs	r3, #21
    2d4a:	18fa      	adds	r2, r7, r3
    2d4c:	2314      	movs	r3, #20
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	7812      	ldrb	r2, [r2, #0]
    2d52:	781b      	ldrb	r3, [r3, #0]
    2d54:	429a      	cmp	r2, r3
    2d56:	d009      	beq.n	2d6c <atCRC+0x8c>
                crc_register ^= polynom;
    2d58:	231a      	movs	r3, #26
    2d5a:	18fb      	adds	r3, r7, r3
    2d5c:	221a      	movs	r2, #26
    2d5e:	18b9      	adds	r1, r7, r2
    2d60:	2216      	movs	r2, #22
    2d62:	18ba      	adds	r2, r7, r2
    2d64:	8809      	ldrh	r1, [r1, #0]
    2d66:	8812      	ldrh	r2, [r2, #0]
    2d68:	404a      	eors	r2, r1
    2d6a:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    2d6c:	2319      	movs	r3, #25
    2d6e:	18fa      	adds	r2, r7, r3
    2d70:	2319      	movs	r3, #25
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	781b      	ldrb	r3, [r3, #0]
    2d76:	18db      	adds	r3, r3, r3
    2d78:	7013      	strb	r3, [r2, #0]
    2d7a:	2319      	movs	r3, #25
    2d7c:	18fb      	adds	r3, r7, r3
    2d7e:	781b      	ldrb	r3, [r3, #0]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d1c3      	bne.n	2d0c <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    2d84:	69fb      	ldr	r3, [r7, #28]
    2d86:	3301      	adds	r3, #1
    2d88:	61fb      	str	r3, [r7, #28]
    2d8a:	69fa      	ldr	r2, [r7, #28]
    2d8c:	68fb      	ldr	r3, [r7, #12]
    2d8e:	429a      	cmp	r2, r3
    2d90:	d3b7      	bcc.n	2d02 <atCRC+0x22>
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    2d92:	231a      	movs	r3, #26
    2d94:	18fb      	adds	r3, r7, r3
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	b2da      	uxtb	r2, r3
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	3301      	adds	r3, #1
    2da2:	221a      	movs	r2, #26
    2da4:	18ba      	adds	r2, r7, r2
    2da6:	8812      	ldrh	r2, [r2, #0]
    2da8:	0a12      	lsrs	r2, r2, #8
    2daa:	b292      	uxth	r2, r2
    2dac:	b2d2      	uxtb	r2, r2
    2dae:	701a      	strb	r2, [r3, #0]
}
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46bd      	mov	sp, r7
    2db4:	b008      	add	sp, #32
    2db6:	bd80      	pop	{r7, pc}
    2db8:	ffff8005 	.word	0xffff8005

00002dbc <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	b084      	sub	sp, #16
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	785a      	ldrb	r2, [r3, #1]
    2dc8:	230f      	movs	r3, #15
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	3a02      	subs	r2, #2
    2dce:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	1c5a      	adds	r2, r3, #1
    2dd4:	230f      	movs	r3, #15
    2dd6:	18fb      	adds	r3, r7, r3
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	18d3      	adds	r3, r2, r3
    2ddc:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    2dde:	230f      	movs	r3, #15
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	7818      	ldrb	r0, [r3, #0]
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	3301      	adds	r3, #1
    2de8:	68ba      	ldr	r2, [r7, #8]
    2dea:	0019      	movs	r1, r3
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <atCalcCrc+0x3c>)
    2dee:	4798      	blx	r3
}
    2df0:	46c0      	nop			; (mov r8, r8)
    2df2:	46bd      	mov	sp, r7
    2df4:	b004      	add	sp, #16
    2df6:	bd80      	pop	{r7, pc}
    2df8:	00002ce1 	.word	0x00002ce1

00002dfc <atCheckCrc>:
 * \param[in] response pointer to response
 * \return status of the consistency check
 */

uint8_t atCheckCrc(const uint8_t *response)
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b084      	sub	sp, #16
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    2e04:	230f      	movs	r3, #15
    2e06:	18fb      	adds	r3, r7, r3
    2e08:	687a      	ldr	r2, [r7, #4]
    2e0a:	7812      	ldrb	r2, [r2, #0]
    2e0c:	701a      	strb	r2, [r3, #0]

    if (count < ATCA_CRC_SIZE)
    2e0e:	230f      	movs	r3, #15
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d801      	bhi.n	2e1c <atCheckCrc+0x20>
        return ATCA_BAD_PARAM;
    2e18:	23e2      	movs	r3, #226	; 0xe2
    2e1a:	e029      	b.n	2e70 <atCheckCrc+0x74>

    count -= ATCA_CRC_SIZE;
    2e1c:	230f      	movs	r3, #15
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	220f      	movs	r2, #15
    2e22:	18ba      	adds	r2, r7, r2
    2e24:	7812      	ldrb	r2, [r2, #0]
    2e26:	3a02      	subs	r2, #2
    2e28:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    2e2a:	230f      	movs	r3, #15
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	781b      	ldrb	r3, [r3, #0]
    2e30:	220c      	movs	r2, #12
    2e32:	18ba      	adds	r2, r7, r2
    2e34:	6879      	ldr	r1, [r7, #4]
    2e36:	0018      	movs	r0, r3
    2e38:	4b0f      	ldr	r3, [pc, #60]	; (2e78 <atCheckCrc+0x7c>)
    2e3a:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_BAD_CRC;
    2e3c:	230c      	movs	r3, #12
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	781a      	ldrb	r2, [r3, #0]
    2e42:	230f      	movs	r3, #15
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	781b      	ldrb	r3, [r3, #0]
    2e48:	6879      	ldr	r1, [r7, #4]
    2e4a:	18cb      	adds	r3, r1, r3
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d10d      	bne.n	2e6e <atCheckCrc+0x72>
    2e52:	230c      	movs	r3, #12
    2e54:	18fb      	adds	r3, r7, r3
    2e56:	785a      	ldrb	r2, [r3, #1]
    2e58:	230f      	movs	r3, #15
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	3301      	adds	r3, #1
    2e60:	6879      	ldr	r1, [r7, #4]
    2e62:	18cb      	adds	r3, r1, r3
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	429a      	cmp	r2, r3
    2e68:	d101      	bne.n	2e6e <atCheckCrc+0x72>
    2e6a:	2300      	movs	r3, #0
    2e6c:	e000      	b.n	2e70 <atCheckCrc+0x74>
    2e6e:	23e5      	movs	r3, #229	; 0xe5
}
    2e70:	0018      	movs	r0, r3
    2e72:	46bd      	mov	sp, r7
    2e74:	b004      	add	sp, #16
    2e76:	bd80      	pop	{r7, pc}
    2e78:	00002ce1 	.word	0x00002ce1

00002e7c <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_STATUS indicating type of error or no error
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b084      	sub	sp, #16
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    2e84:	230c      	movs	r3, #12
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	4a19      	ldr	r2, [pc, #100]	; (2ef0 <isATCAError+0x74>)
    2e8a:	6812      	ldr	r2, [r2, #0]
    2e8c:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    2e8e:	230c      	movs	r3, #12
    2e90:	18f9      	adds	r1, r7, r3
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	2204      	movs	r2, #4
    2e96:	0018      	movs	r0, r3
    2e98:	4b16      	ldr	r3, [pc, #88]	; (2ef4 <isATCAError+0x78>)
    2e9a:	4798      	blx	r3
    2e9c:	1e03      	subs	r3, r0, #0
    2e9e:	d101      	bne.n	2ea4 <isATCAError+0x28>
        return ATCA_SUCCESS;
    2ea0:	2300      	movs	r3, #0
    2ea2:	e020      	b.n	2ee6 <isATCAError+0x6a>

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	2b04      	cmp	r3, #4
    2eaa:	d11b      	bne.n	2ee4 <isATCAError+0x68>
    {
        switch (data[1])
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	3301      	adds	r3, #1
    2eb0:	781b      	ldrb	r3, [r3, #0]
    2eb2:	2b0f      	cmp	r3, #15
    2eb4:	d00e      	beq.n	2ed4 <isATCAError+0x58>
    2eb6:	dc04      	bgt.n	2ec2 <isATCAError+0x46>
    2eb8:	2b01      	cmp	r3, #1
    2eba:	d007      	beq.n	2ecc <isATCAError+0x50>
    2ebc:	2b03      	cmp	r3, #3
    2ebe:	d007      	beq.n	2ed0 <isATCAError+0x54>
    2ec0:	e00e      	b.n	2ee0 <isATCAError+0x64>
    2ec2:	2b11      	cmp	r3, #17
    2ec4:	d008      	beq.n	2ed8 <isATCAError+0x5c>
    2ec6:	2bff      	cmp	r3, #255	; 0xff
    2ec8:	d008      	beq.n	2edc <isATCAError+0x60>
    2eca:	e009      	b.n	2ee0 <isATCAError+0x64>
        {
        case 0x01:              // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    2ecc:	23d1      	movs	r3, #209	; 0xd1
    2ece:	e00a      	b.n	2ee6 <isATCAError+0x6a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    2ed0:	23d2      	movs	r3, #210	; 0xd2
    2ed2:	e008      	b.n	2ee6 <isATCAError+0x6a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    2ed4:	23f4      	movs	r3, #244	; 0xf4
    2ed6:	e006      	b.n	2ee6 <isATCAError+0x6a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    2ed8:	23f3      	movs	r3, #243	; 0xf3
    2eda:	e004      	b.n	2ee6 <isATCAError+0x6a>
            break;
        case 0xff: // bad crc found or other comm error
            return ATCA_STATUS_CRC;
    2edc:	23d4      	movs	r3, #212	; 0xd4
    2ede:	e002      	b.n	2ee6 <isATCAError+0x6a>
            break;
        default:
            return ATCA_GEN_FAIL;
    2ee0:	23e1      	movs	r3, #225	; 0xe1
    2ee2:	e000      	b.n	2ee6 <isATCAError+0x6a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    2ee4:	2300      	movs	r3, #0
    }
}
    2ee6:	0018      	movs	r0, r3
    2ee8:	46bd      	mov	sp, r7
    2eea:	b004      	add	sp, #16
    2eec:	bd80      	pop	{r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	0000b15c 	.word	0x0000b15c
    2ef4:	00009cfd 	.word	0x00009cfd

00002ef8 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b084      	sub	sp, #16
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    ATCADevice cadev = NULL;
    2f00:	2300      	movs	r3, #0
    2f02:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d101      	bne.n	2f0e <newATCADevice+0x16>
        return NULL;
    2f0a:	2300      	movs	r3, #0
    2f0c:	e022      	b.n	2f54 <newATCADevice+0x5c>

    cadev = (ATCADevice)malloc(sizeof(struct atca_device));
    2f0e:	2008      	movs	r0, #8
    2f10:	4b12      	ldr	r3, [pc, #72]	; (2f5c <newATCADevice+0x64>)
    2f12:	4798      	blx	r3
    2f14:	0003      	movs	r3, r0
    2f16:	60fb      	str	r3, [r7, #12]
    cadev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	785b      	ldrb	r3, [r3, #1]
    2f1c:	0018      	movs	r0, r3
    2f1e:	4b10      	ldr	r3, [pc, #64]	; (2f60 <newATCADevice+0x68>)
    2f20:	4798      	blx	r3
    2f22:	0002      	movs	r2, r0
    2f24:	68fb      	ldr	r3, [r7, #12]
    2f26:	601a      	str	r2, [r3, #0]
    cadev->mIface    = (ATCAIface)newATCAIface(cfg);
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	0018      	movs	r0, r3
    2f2c:	4b0d      	ldr	r3, [pc, #52]	; (2f64 <newATCADevice+0x6c>)
    2f2e:	4798      	blx	r3
    2f30:	0002      	movs	r2, r0
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	605a      	str	r2, [r3, #4]

    if (cadev->mCommands == NULL || cadev->mIface == NULL)
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d003      	beq.n	2f46 <newATCADevice+0x4e>
    2f3e:	68fb      	ldr	r3, [r7, #12]
    2f40:	685b      	ldr	r3, [r3, #4]
    2f42:	2b00      	cmp	r3, #0
    2f44:	d105      	bne.n	2f52 <newATCADevice+0x5a>
    {
        free(cadev);
    2f46:	68fb      	ldr	r3, [r7, #12]
    2f48:	0018      	movs	r0, r3
    2f4a:	4b07      	ldr	r3, [pc, #28]	; (2f68 <newATCADevice+0x70>)
    2f4c:	4798      	blx	r3
        cadev = NULL;
    2f4e:	2300      	movs	r3, #0
    2f50:	60fb      	str	r3, [r7, #12]
    }

    return cadev;
    2f52:	68fb      	ldr	r3, [r7, #12]
}
    2f54:	0018      	movs	r0, r3
    2f56:	46bd      	mov	sp, r7
    2f58:	b004      	add	sp, #16
    2f5a:	bd80      	pop	{r7, pc}
    2f5c:	00009cd5 	.word	0x00009cd5
    2f60:	00002a49 	.word	0x00002a49
    2f64:	00002fe1 	.word	0x00002fe1
    2f68:	00009ce9 	.word	0x00009ce9

00002f6c <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	681b      	ldr	r3, [r3, #0]
}
    2f78:	0018      	movs	r0, r3
    2f7a:	46bd      	mov	sp, r7
    2f7c:	b002      	add	sp, #8
    2f7e:	bd80      	pop	{r7, pc}

00002f80 <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	685b      	ldr	r3, [r3, #4]
}
    2f8c:	0018      	movs	r0, r3
    2f8e:	46bd      	mov	sp, r7
    2f90:	b002      	add	sp, #8
    2f92:	bd80      	pop	{r7, pc}

00002f94 <deleteATCADevice>:
 * \param[in] cadev  pointer to a reference to a device
 *
 */

void deleteATCADevice(ATCADevice *cadev)   // destructor
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b084      	sub	sp, #16
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *cadev;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	681b      	ldr	r3, [r3, #0]
    2fa0:	60fb      	str	r3, [r7, #12]

    if (*cadev)
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d00d      	beq.n	2fc6 <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    2faa:	68fb      	ldr	r3, [r7, #12]
    2fac:	0018      	movs	r0, r3
    2fae:	4b09      	ldr	r3, [pc, #36]	; (2fd4 <deleteATCADevice+0x40>)
    2fb0:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    2fb2:	68fb      	ldr	r3, [r7, #12]
    2fb4:	3304      	adds	r3, #4
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b07      	ldr	r3, [pc, #28]	; (2fd8 <deleteATCADevice+0x44>)
    2fba:	4798      	blx	r3
        free((void*)*cadev);
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	681b      	ldr	r3, [r3, #0]
    2fc0:	0018      	movs	r0, r3
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <deleteATCADevice+0x48>)
    2fc4:	4798      	blx	r3
    }

    *cadev = NULL;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	2200      	movs	r2, #0
    2fca:	601a      	str	r2, [r3, #0]
}
    2fcc:	46c0      	nop			; (mov r8, r8)
    2fce:	46bd      	mov	sp, r7
    2fd0:	b004      	add	sp, #16
    2fd2:	bd80      	pop	{r7, pc}
    2fd4:	00002c4d 	.word	0x00002c4d
    2fd8:	0000317d 	.word	0x0000317d
    2fdc:	00009ce9 	.word	0x00009ce9

00002fe0 <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b084      	sub	sp, #16
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    ATCAIface caiface = (ATCAIface)malloc(sizeof(struct atca_iface));
    2fe8:	2028      	movs	r0, #40	; 0x28
    2fea:	4b0e      	ldr	r3, [pc, #56]	; (3024 <newATCAIface+0x44>)
    2fec:	4798      	blx	r3
    2fee:	0003      	movs	r3, r0
    2ff0:	60fb      	str	r3, [r7, #12]

    caiface->mType = cfg->iface_type;
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	781a      	ldrb	r2, [r3, #0]
    2ff6:	68fb      	ldr	r3, [r7, #12]
    2ff8:	701a      	strb	r2, [r3, #0]
    caiface->mIfaceCFG = cfg;
    2ffa:	68fb      	ldr	r3, [r7, #12]
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	605a      	str	r2, [r3, #4]

    if (atinit(caiface) != ATCA_SUCCESS)
    3000:	68fb      	ldr	r3, [r7, #12]
    3002:	0018      	movs	r0, r3
    3004:	4b08      	ldr	r3, [pc, #32]	; (3028 <newATCAIface+0x48>)
    3006:	4798      	blx	r3
    3008:	1e03      	subs	r3, r0, #0
    300a:	d005      	beq.n	3018 <newATCAIface+0x38>
    {
        free(caiface);
    300c:	68fb      	ldr	r3, [r7, #12]
    300e:	0018      	movs	r0, r3
    3010:	4b06      	ldr	r3, [pc, #24]	; (302c <newATCAIface+0x4c>)
    3012:	4798      	blx	r3
        caiface = NULL;
    3014:	2300      	movs	r3, #0
    3016:	60fb      	str	r3, [r7, #12]
    }

    return caiface;
    3018:	68fb      	ldr	r3, [r7, #12]
}
    301a:	0018      	movs	r0, r3
    301c:	46bd      	mov	sp, r7
    301e:	b004      	add	sp, #16
    3020:	bd80      	pop	{r7, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	00009cd5 	.word	0x00009cd5
    3028:	00003031 	.word	0x00003031
    302c:	00009ce9 	.word	0x00009ce9

00003030 <atinit>:

// public ATCAIface methods

ATCA_STATUS atinit(ATCAIface caiface)
{
    3030:	b590      	push	{r4, r7, lr}
    3032:	b08d      	sub	sp, #52	; 0x34
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    3038:	232f      	movs	r3, #47	; 0x2f
    303a:	18fb      	adds	r3, r7, r3
    303c:	22f0      	movs	r2, #240	; 0xf0
    303e:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(caiface, &hal);
    3040:	2308      	movs	r3, #8
    3042:	18fa      	adds	r2, r7, r3
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	0011      	movs	r1, r2
    3048:	0018      	movs	r0, r3
    304a:	4b14      	ldr	r3, [pc, #80]	; (309c <atinit+0x6c>)
    304c:	4798      	blx	r3

    status = caiface->atinit(&hal, caiface->mIfaceCFG);
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	689a      	ldr	r2, [r3, #8]
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	6859      	ldr	r1, [r3, #4]
    3056:	232f      	movs	r3, #47	; 0x2f
    3058:	18fc      	adds	r4, r7, r3
    305a:	2308      	movs	r3, #8
    305c:	18fb      	adds	r3, r7, r3
    305e:	0018      	movs	r0, r3
    3060:	4790      	blx	r2
    3062:	0003      	movs	r3, r0
    3064:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    3066:	232f      	movs	r3, #47	; 0x2f
    3068:	18fb      	adds	r3, r7, r3
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	2b00      	cmp	r3, #0
    306e:	d10d      	bne.n	308c <atinit+0x5c>
    {
        caiface->hal_data = hal.hal_data;
    3070:	2308      	movs	r3, #8
    3072:	18fb      	adds	r3, r7, r3
    3074:	6a1a      	ldr	r2, [r3, #32]
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = caiface->atpostinit(caiface);
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	68db      	ldr	r3, [r3, #12]
    307e:	222f      	movs	r2, #47	; 0x2f
    3080:	18bc      	adds	r4, r7, r2
    3082:	687a      	ldr	r2, [r7, #4]
    3084:	0010      	movs	r0, r2
    3086:	4798      	blx	r3
    3088:	0003      	movs	r3, r0
    308a:	7023      	strb	r3, [r4, #0]
    }

    return status;
    308c:	232f      	movs	r3, #47	; 0x2f
    308e:	18fb      	adds	r3, r7, r3
    3090:	781b      	ldrb	r3, [r3, #0]
}
    3092:	0018      	movs	r0, r3
    3094:	46bd      	mov	sp, r7
    3096:	b00d      	add	sp, #52	; 0x34
    3098:	bd90      	pop	{r4, r7, pc}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	000031c1 	.word	0x000031c1

000030a0 <atsend>:

ATCA_STATUS atsend(ATCAIface caiface, uint8_t *txdata, int txlength)
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b084      	sub	sp, #16
    30a4:	af00      	add	r7, sp, #0
    30a6:	60f8      	str	r0, [r7, #12]
    30a8:	60b9      	str	r1, [r7, #8]
    30aa:	607a      	str	r2, [r7, #4]
    return caiface->atsend(caiface, txdata, txlength);
    30ac:	68fb      	ldr	r3, [r7, #12]
    30ae:	691b      	ldr	r3, [r3, #16]
    30b0:	687a      	ldr	r2, [r7, #4]
    30b2:	68b9      	ldr	r1, [r7, #8]
    30b4:	68f8      	ldr	r0, [r7, #12]
    30b6:	4798      	blx	r3
    30b8:	0003      	movs	r3, r0
}
    30ba:	0018      	movs	r0, r3
    30bc:	46bd      	mov	sp, r7
    30be:	b004      	add	sp, #16
    30c0:	bd80      	pop	{r7, pc}

000030c2 <atreceive>:

ATCA_STATUS atreceive(ATCAIface caiface, uint8_t *rxdata, uint16_t *rxlength)
{
    30c2:	b580      	push	{r7, lr}
    30c4:	b084      	sub	sp, #16
    30c6:	af00      	add	r7, sp, #0
    30c8:	60f8      	str	r0, [r7, #12]
    30ca:	60b9      	str	r1, [r7, #8]
    30cc:	607a      	str	r2, [r7, #4]
    return caiface->atreceive(caiface, rxdata, rxlength);
    30ce:	68fb      	ldr	r3, [r7, #12]
    30d0:	695b      	ldr	r3, [r3, #20]
    30d2:	687a      	ldr	r2, [r7, #4]
    30d4:	68b9      	ldr	r1, [r7, #8]
    30d6:	68f8      	ldr	r0, [r7, #12]
    30d8:	4798      	blx	r3
    30da:	0003      	movs	r3, r0
}
    30dc:	0018      	movs	r0, r3
    30de:	46bd      	mov	sp, r7
    30e0:	b004      	add	sp, #16
    30e2:	bd80      	pop	{r7, pc}

000030e4 <atwake>:

ATCA_STATUS atwake(ATCAIface caiface)
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b082      	sub	sp, #8
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
    return caiface->atwake(caiface);
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	699b      	ldr	r3, [r3, #24]
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	0010      	movs	r0, r2
    30f4:	4798      	blx	r3
    30f6:	0003      	movs	r3, r0
}
    30f8:	0018      	movs	r0, r3
    30fa:	46bd      	mov	sp, r7
    30fc:	b002      	add	sp, #8
    30fe:	bd80      	pop	{r7, pc}

00003100 <atidle>:

ATCA_STATUS atidle(ATCAIface caiface)
{
    3100:	b590      	push	{r4, r7, lr}
    3102:	b085      	sub	sp, #20
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atidle(caiface);
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	69db      	ldr	r3, [r3, #28]
    310c:	220f      	movs	r2, #15
    310e:	18bc      	adds	r4, r7, r2
    3110:	687a      	ldr	r2, [r7, #4]
    3112:	0010      	movs	r0, r2
    3114:	4798      	blx	r3
    3116:	0003      	movs	r3, r0
    3118:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    311a:	2001      	movs	r0, #1
    311c:	4b04      	ldr	r3, [pc, #16]	; (3130 <atidle+0x30>)
    311e:	4798      	blx	r3
    return status;
    3120:	230f      	movs	r3, #15
    3122:	18fb      	adds	r3, r7, r3
    3124:	781b      	ldrb	r3, [r3, #0]
}
    3126:	0018      	movs	r0, r3
    3128:	46bd      	mov	sp, r7
    312a:	b005      	add	sp, #20
    312c:	bd90      	pop	{r4, r7, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	000056c9 	.word	0x000056c9

00003134 <atsleep>:

ATCA_STATUS atsleep(ATCAIface caiface)
{
    3134:	b590      	push	{r4, r7, lr}
    3136:	b085      	sub	sp, #20
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atsleep(caiface);
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	6a1b      	ldr	r3, [r3, #32]
    3140:	220f      	movs	r2, #15
    3142:	18bc      	adds	r4, r7, r2
    3144:	687a      	ldr	r2, [r7, #4]
    3146:	0010      	movs	r0, r2
    3148:	4798      	blx	r3
    314a:	0003      	movs	r3, r0
    314c:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    314e:	2001      	movs	r0, #1
    3150:	4b04      	ldr	r3, [pc, #16]	; (3164 <atsleep+0x30>)
    3152:	4798      	blx	r3
    return status;
    3154:	230f      	movs	r3, #15
    3156:	18fb      	adds	r3, r7, r3
    3158:	781b      	ldrb	r3, [r3, #0]
}
    315a:	0018      	movs	r0, r3
    315c:	46bd      	mov	sp, r7
    315e:	b005      	add	sp, #20
    3160:	bd90      	pop	{r4, r7, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	000056c9 	.word	0x000056c9

00003168 <atgetifacecfg>:

ATCAIfaceCfg * atgetifacecfg(ATCAIface caiface)
{
    3168:	b580      	push	{r7, lr}
    316a:	b082      	sub	sp, #8
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    return caiface->mIfaceCFG;
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	685b      	ldr	r3, [r3, #4]
}
    3174:	0018      	movs	r0, r3
    3176:	46bd      	mov	sp, r7
    3178:	b002      	add	sp, #8
    317a:	bd80      	pop	{r7, pc}

0000317c <deleteATCAIface>:
{
    return caiface->hal_data;
}

void deleteATCAIface(ATCAIface *caiface) // destructor
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
    if (*caiface)
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d00e      	beq.n	31aa <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*caiface)->mType, (*caiface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	781a      	ldrb	r2, [r3, #0]
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	681b      	ldr	r3, [r3, #0]
    3196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3198:	0019      	movs	r1, r3
    319a:	0010      	movs	r0, r2
    319c:	4b06      	ldr	r3, [pc, #24]	; (31b8 <deleteATCAIface+0x3c>)
    319e:	4798      	blx	r3
        free((void*)*caiface);
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	0018      	movs	r0, r3
    31a6:	4b05      	ldr	r3, [pc, #20]	; (31bc <deleteATCAIface+0x40>)
    31a8:	4798      	blx	r3
    }

    *caiface = NULL;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2200      	movs	r2, #0
    31ae:	601a      	str	r2, [r3, #0]
}
    31b0:	46c0      	nop			; (mov r8, r8)
    31b2:	46bd      	mov	sp, r7
    31b4:	b002      	add	sp, #8
    31b6:	bd80      	pop	{r7, pc}
    31b8:	00004d2d 	.word	0x00004d2d
    31bc:	00009ce9 	.word	0x00009ce9

000031c0 <_atinit>:

ATCA_STATUS _atinit(ATCAIface caiface, ATCAHAL_t *hal)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b082      	sub	sp, #8
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    31c8:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(caiface->mIfaceCFG, hal);
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	685b      	ldr	r3, [r3, #4]
    31ce:	683a      	ldr	r2, [r7, #0]
    31d0:	0011      	movs	r1, r2
    31d2:	0018      	movs	r0, r3
    31d4:	4b13      	ldr	r3, [pc, #76]	; (3224 <_atinit+0x64>)
    31d6:	4798      	blx	r3
    caiface->atinit     = hal->halinit;
    31d8:	683b      	ldr	r3, [r7, #0]
    31da:	681a      	ldr	r2, [r3, #0]
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	609a      	str	r2, [r3, #8]
    caiface->atpostinit = hal->halpostinit;
    31e0:	683b      	ldr	r3, [r7, #0]
    31e2:	685a      	ldr	r2, [r3, #4]
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	60da      	str	r2, [r3, #12]
    caiface->atsend     = hal->halsend;
    31e8:	683b      	ldr	r3, [r7, #0]
    31ea:	689a      	ldr	r2, [r3, #8]
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	611a      	str	r2, [r3, #16]
    caiface->atreceive  = hal->halreceive;
    31f0:	683b      	ldr	r3, [r7, #0]
    31f2:	68da      	ldr	r2, [r3, #12]
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	615a      	str	r2, [r3, #20]
    caiface->atwake     = hal->halwake;
    31f8:	683b      	ldr	r3, [r7, #0]
    31fa:	691a      	ldr	r2, [r3, #16]
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	619a      	str	r2, [r3, #24]
    caiface->atsleep    = hal->halsleep;
    3200:	683b      	ldr	r3, [r7, #0]
    3202:	699a      	ldr	r2, [r3, #24]
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	621a      	str	r2, [r3, #32]
    caiface->atidle     = hal->halidle;
    3208:	683b      	ldr	r3, [r7, #0]
    320a:	695a      	ldr	r2, [r3, #20]
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	61da      	str	r2, [r3, #28]
    caiface->hal_data   = hal->hal_data;
    3210:	683b      	ldr	r3, [r7, #0]
    3212:	6a1a      	ldr	r2, [r3, #32]
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    3218:	2300      	movs	r3, #0
}
    321a:	0018      	movs	r0, r3
    321c:	46bd      	mov	sp, r7
    321e:	b002      	add	sp, #8
    3220:	bd80      	pop	{r7, pc}
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	00004c91 	.word	0x00004c91

00003228 <atcab_init>:
 *  \param[in] cfg is a pointer to an interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return ATCA_STATUS
 *  \see atcab_init_device()
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    3228:	b580      	push	{r7, lr}
    322a:	b082      	sub	sp, #8
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
    if (_gDevice)       // if there's already a device created, release it
    3230:	4b18      	ldr	r3, [pc, #96]	; (3294 <atcab_init+0x6c>)
    3232:	681b      	ldr	r3, [r3, #0]
    3234:	2b00      	cmp	r3, #0
    3236:	d001      	beq.n	323c <atcab_init+0x14>
        atcab_release();
    3238:	4b17      	ldr	r3, [pc, #92]	; (3298 <atcab_init+0x70>)
    323a:	4798      	blx	r3

    _gDevice = newATCADevice(cfg);
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	0018      	movs	r0, r3
    3240:	4b16      	ldr	r3, [pc, #88]	; (329c <atcab_init+0x74>)
    3242:	4798      	blx	r3
    3244:	0002      	movs	r2, r0
    3246:	4b13      	ldr	r3, [pc, #76]	; (3294 <atcab_init+0x6c>)
    3248:	601a      	str	r2, [r3, #0]
    if (_gDevice == NULL)
    324a:	4b12      	ldr	r3, [pc, #72]	; (3294 <atcab_init+0x6c>)
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d101      	bne.n	3256 <atcab_init+0x2e>
        return ATCA_GEN_FAIL;  // Device creation failed
    3252:	23e1      	movs	r3, #225	; 0xe1
    3254:	e01a      	b.n	328c <atcab_init+0x64>

    _gCommandObj = atGetCommands(_gDevice);
    3256:	4b0f      	ldr	r3, [pc, #60]	; (3294 <atcab_init+0x6c>)
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	0018      	movs	r0, r3
    325c:	4b10      	ldr	r3, [pc, #64]	; (32a0 <atcab_init+0x78>)
    325e:	4798      	blx	r3
    3260:	0002      	movs	r2, r0
    3262:	4b10      	ldr	r3, [pc, #64]	; (32a4 <atcab_init+0x7c>)
    3264:	601a      	str	r2, [r3, #0]
    _gIface = atGetIFace(_gDevice);
    3266:	4b0b      	ldr	r3, [pc, #44]	; (3294 <atcab_init+0x6c>)
    3268:	681b      	ldr	r3, [r3, #0]
    326a:	0018      	movs	r0, r3
    326c:	4b0e      	ldr	r3, [pc, #56]	; (32a8 <atcab_init+0x80>)
    326e:	4798      	blx	r3
    3270:	0002      	movs	r2, r0
    3272:	4b0e      	ldr	r3, [pc, #56]	; (32ac <atcab_init+0x84>)
    3274:	601a      	str	r2, [r3, #0]

    if (_gCommandObj == NULL || _gIface == NULL)
    3276:	4b0b      	ldr	r3, [pc, #44]	; (32a4 <atcab_init+0x7c>)
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	2b00      	cmp	r3, #0
    327c:	d003      	beq.n	3286 <atcab_init+0x5e>
    327e:	4b0b      	ldr	r3, [pc, #44]	; (32ac <atcab_init+0x84>)
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	2b00      	cmp	r3, #0
    3284:	d101      	bne.n	328a <atcab_init+0x62>
        return ATCA_GEN_FAIL;  // More of an assert to make everything was constructed properly
    3286:	23e1      	movs	r3, #225	; 0xe1
    3288:	e000      	b.n	328c <atcab_init+0x64>

    return ATCA_SUCCESS;
    328a:	2300      	movs	r3, #0
}
    328c:	0018      	movs	r0, r3
    328e:	46bd      	mov	sp, r7
    3290:	b002      	add	sp, #8
    3292:	bd80      	pop	{r7, pc}
    3294:	20000228 	.word	0x20000228
    3298:	000032b1 	.word	0x000032b1
    329c:	00002ef9 	.word	0x00002ef9
    32a0:	00002f6d 	.word	0x00002f6d
    32a4:	2000022c 	.word	0x2000022c
    32a8:	00002f81 	.word	0x00002f81
    32ac:	20000230 	.word	0x20000230

000032b0 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_release(void)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    32b4:	4b03      	ldr	r3, [pc, #12]	; (32c4 <atcab_release+0x14>)
    32b6:	0018      	movs	r0, r3
    32b8:	4b03      	ldr	r3, [pc, #12]	; (32c8 <atcab_release+0x18>)
    32ba:	4798      	blx	r3
    return ATCA_SUCCESS;
    32bc:	2300      	movs	r3, #0
}
    32be:	0018      	movs	r0, r3
    32c0:	46bd      	mov	sp, r7
    32c2:	bd80      	pop	{r7, pc}
    32c4:	20000228 	.word	0x20000228
    32c8:	00002f95 	.word	0x00002f95

000032cc <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_wakeup(void)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    32d0:	4b07      	ldr	r3, [pc, #28]	; (32f0 <atcab_wakeup+0x24>)
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	2b00      	cmp	r3, #0
    32d6:	d101      	bne.n	32dc <atcab_wakeup+0x10>
        return ATCA_GEN_FAIL;
    32d8:	23e1      	movs	r3, #225	; 0xe1
    32da:	e005      	b.n	32e8 <atcab_wakeup+0x1c>

    return atwake(_gIface);
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <atcab_wakeup+0x28>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	0018      	movs	r0, r3
    32e2:	4b05      	ldr	r3, [pc, #20]	; (32f8 <atcab_wakeup+0x2c>)
    32e4:	4798      	blx	r3
    32e6:	0003      	movs	r3, r0
}
    32e8:	0018      	movs	r0, r3
    32ea:	46bd      	mov	sp, r7
    32ec:	bd80      	pop	{r7, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	20000228 	.word	0x20000228
    32f4:	20000230 	.word	0x20000230
    32f8:	000030e5 	.word	0x000030e5

000032fc <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_idle(void)
{
    32fc:	b580      	push	{r7, lr}
    32fe:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    3300:	4b07      	ldr	r3, [pc, #28]	; (3320 <atcab_idle+0x24>)
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	2b00      	cmp	r3, #0
    3306:	d101      	bne.n	330c <atcab_idle+0x10>
        return ATCA_GEN_FAIL;
    3308:	23e1      	movs	r3, #225	; 0xe1
    330a:	e005      	b.n	3318 <atcab_idle+0x1c>

    return atidle(_gIface);
    330c:	4b05      	ldr	r3, [pc, #20]	; (3324 <atcab_idle+0x28>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	0018      	movs	r0, r3
    3312:	4b05      	ldr	r3, [pc, #20]	; (3328 <atcab_idle+0x2c>)
    3314:	4798      	blx	r3
    3316:	0003      	movs	r3, r0
}
    3318:	0018      	movs	r0, r3
    331a:	46bd      	mov	sp, r7
    331c:	bd80      	pop	{r7, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	20000228 	.word	0x20000228
    3324:	20000230 	.word	0x20000230
    3328:	00003101 	.word	0x00003101

0000332c <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_sleep(void)
{
    332c:	b580      	push	{r7, lr}
    332e:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    3330:	4b07      	ldr	r3, [pc, #28]	; (3350 <atcab_sleep+0x24>)
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	2b00      	cmp	r3, #0
    3336:	d101      	bne.n	333c <atcab_sleep+0x10>
        return ATCA_GEN_FAIL;
    3338:	23e1      	movs	r3, #225	; 0xe1
    333a:	e005      	b.n	3348 <atcab_sleep+0x1c>

    return atsleep(_gIface);
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <atcab_sleep+0x28>)
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	0018      	movs	r0, r3
    3342:	4b05      	ldr	r3, [pc, #20]	; (3358 <atcab_sleep+0x2c>)
    3344:	4798      	blx	r3
    3346:	0003      	movs	r3, r0
}
    3348:	0018      	movs	r0, r3
    334a:	46bd      	mov	sp, r7
    334c:	bd80      	pop	{r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	20000228 	.word	0x20000228
    3354:	20000230 	.word	0x20000230
    3358:	00003135 	.word	0x00003135

0000335c <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_STATUS
 */
static ATCA_STATUS _atcab_exit(void)
{
    335c:	b580      	push	{r7, lr}
    335e:	af00      	add	r7, sp, #0
    return atcab_idle();
    3360:	4b02      	ldr	r3, [pc, #8]	; (336c <_atcab_exit+0x10>)
    3362:	4798      	blx	r3
    3364:	0003      	movs	r3, r0
}
    3366:	0018      	movs	r0, r3
    3368:	46bd      	mov	sp, r7
    336a:	bd80      	pop	{r7, pc}
    336c:	000032fd 	.word	0x000032fd

00003370 <atcab_info>:
 *  \param[out] revision - 4-byte storage for receiving the revision number from the device
 *  \return ATCA_STATUS
 */

ATCA_STATUS atcab_info(uint8_t *revision)
{
    3370:	b590      	push	{r4, r7, lr}
    3372:	b0a9      	sub	sp, #164	; 0xa4
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3378:	239f      	movs	r3, #159	; 0x9f
    337a:	18fb      	adds	r3, r7, r3
    337c:	22e1      	movs	r2, #225	; 0xe1
    337e:	701a      	strb	r2, [r3, #0]
    uint32_t execution_time;

    if (!_gDevice)
    3380:	4b58      	ldr	r3, [pc, #352]	; (34e4 <atcab_info+0x174>)
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	2b00      	cmp	r3, #0
    3386:	d101      	bne.n	338c <atcab_info+0x1c>
        return ATCA_GEN_FAIL;
    3388:	23e1      	movs	r3, #225	; 0xe1
    338a:	e0a6      	b.n	34da <atcab_info+0x16a>

    // build an info command
    packet.param1 = INFO_MODE_REVISION;
    338c:	230c      	movs	r3, #12
    338e:	18fb      	adds	r3, r7, r3
    3390:	2200      	movs	r2, #0
    3392:	70da      	strb	r2, [r3, #3]
    packet.param2 = 0;
    3394:	230c      	movs	r3, #12
    3396:	18fb      	adds	r3, r7, r3
    3398:	2200      	movs	r2, #0
    339a:	809a      	strh	r2, [r3, #4]

    do
    {
        // Check the inputs
        if (revision == NULL)
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	2b00      	cmp	r3, #0
    33a0:	d104      	bne.n	33ac <atcab_info+0x3c>
        {
            status = ATCA_BAD_PARAM;
    33a2:	239f      	movs	r3, #159	; 0x9f
    33a4:	18fb      	adds	r3, r7, r3
    33a6:	22e2      	movs	r2, #226	; 0xe2
    33a8:	701a      	strb	r2, [r3, #0]
            BREAK(status, "atcab_info: Null inputs");
    33aa:	e08c      	b.n	34c6 <atcab_info+0x156>
        }
        if ( (status = atInfo(_gCommandObj, &packet)) != ATCA_SUCCESS)
    33ac:	4b4e      	ldr	r3, [pc, #312]	; (34e8 <atcab_info+0x178>)
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	229f      	movs	r2, #159	; 0x9f
    33b2:	18bc      	adds	r4, r7, r2
    33b4:	220c      	movs	r2, #12
    33b6:	18ba      	adds	r2, r7, r2
    33b8:	0011      	movs	r1, r2
    33ba:	0018      	movs	r0, r3
    33bc:	4b4b      	ldr	r3, [pc, #300]	; (34ec <atcab_info+0x17c>)
    33be:	4798      	blx	r3
    33c0:	0003      	movs	r3, r0
    33c2:	7023      	strb	r3, [r4, #0]
    33c4:	239f      	movs	r3, #159	; 0x9f
    33c6:	18fb      	adds	r3, r7, r3
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d000      	beq.n	33d0 <atcab_info+0x60>
    33ce:	e071      	b.n	34b4 <atcab_info+0x144>
            BREAK(status, "Failed to construct Info command");

        execution_time = atGetExecTime(_gCommandObj, CMD_INFO);
    33d0:	4b45      	ldr	r3, [pc, #276]	; (34e8 <atcab_info+0x178>)
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	2108      	movs	r1, #8
    33d6:	0018      	movs	r0, r3
    33d8:	4b45      	ldr	r3, [pc, #276]	; (34f0 <atcab_info+0x180>)
    33da:	4798      	blx	r3
    33dc:	0003      	movs	r3, r0
    33de:	2298      	movs	r2, #152	; 0x98
    33e0:	18ba      	adds	r2, r7, r2
    33e2:	6013      	str	r3, [r2, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    33e4:	239f      	movs	r3, #159	; 0x9f
    33e6:	18fc      	adds	r4, r7, r3
    33e8:	4b42      	ldr	r3, [pc, #264]	; (34f4 <atcab_info+0x184>)
    33ea:	4798      	blx	r3
    33ec:	0003      	movs	r3, r0
    33ee:	7023      	strb	r3, [r4, #0]
    33f0:	239f      	movs	r3, #159	; 0x9f
    33f2:	18fb      	adds	r3, r7, r3
    33f4:	781b      	ldrb	r3, [r3, #0]
    33f6:	2b00      	cmp	r3, #0
    33f8:	d15e      	bne.n	34b8 <atcab_info+0x148>
            BREAK(status, "Failed to wakeup");

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    33fa:	4b3f      	ldr	r3, [pc, #252]	; (34f8 <atcab_info+0x188>)
    33fc:	6818      	ldr	r0, [r3, #0]
    33fe:	230c      	movs	r3, #12
    3400:	18fb      	adds	r3, r7, r3
    3402:	785b      	ldrb	r3, [r3, #1]
    3404:	001a      	movs	r2, r3
    3406:	239f      	movs	r3, #159	; 0x9f
    3408:	18fc      	adds	r4, r7, r3
    340a:	230c      	movs	r3, #12
    340c:	18fb      	adds	r3, r7, r3
    340e:	0019      	movs	r1, r3
    3410:	4b3a      	ldr	r3, [pc, #232]	; (34fc <atcab_info+0x18c>)
    3412:	4798      	blx	r3
    3414:	0003      	movs	r3, r0
    3416:	7023      	strb	r3, [r4, #0]
    3418:	239f      	movs	r3, #159	; 0x9f
    341a:	18fb      	adds	r3, r7, r3
    341c:	781b      	ldrb	r3, [r3, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d14c      	bne.n	34bc <atcab_info+0x14c>
            BREAK(status, "Failed to send Info command");

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3422:	2398      	movs	r3, #152	; 0x98
    3424:	18fb      	adds	r3, r7, r3
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	0018      	movs	r0, r3
    342a:	4b35      	ldr	r3, [pc, #212]	; (3500 <atcab_info+0x190>)
    342c:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, &(packet.data[0]), &(packet.rxsize) )) != ATCA_SUCCESS)
    342e:	4b32      	ldr	r3, [pc, #200]	; (34f8 <atcab_info+0x188>)
    3430:	6818      	ldr	r0, [r3, #0]
    3432:	239f      	movs	r3, #159	; 0x9f
    3434:	18fc      	adds	r4, r7, r3
    3436:	230c      	movs	r3, #12
    3438:	18fb      	adds	r3, r7, r3
    343a:	338a      	adds	r3, #138	; 0x8a
    343c:	001a      	movs	r2, r3
    343e:	230c      	movs	r3, #12
    3440:	18fb      	adds	r3, r7, r3
    3442:	3306      	adds	r3, #6
    3444:	0019      	movs	r1, r3
    3446:	4b2f      	ldr	r3, [pc, #188]	; (3504 <atcab_info+0x194>)
    3448:	4798      	blx	r3
    344a:	0003      	movs	r3, r0
    344c:	7023      	strb	r3, [r4, #0]
    344e:	239f      	movs	r3, #159	; 0x9f
    3450:	18fb      	adds	r3, r7, r3
    3452:	781b      	ldrb	r3, [r3, #0]
    3454:	2b00      	cmp	r3, #0
    3456:	d133      	bne.n	34c0 <atcab_info+0x150>
            BREAK(status, "Failed to receive Info command");

        // Check response size
        if (packet.rxsize < 4)
    3458:	230c      	movs	r3, #12
    345a:	18fb      	adds	r3, r7, r3
    345c:	228a      	movs	r2, #138	; 0x8a
    345e:	5a9b      	ldrh	r3, [r3, r2]
    3460:	2b03      	cmp	r3, #3
    3462:	d80f      	bhi.n	3484 <atcab_info+0x114>
        {
            if (packet.rxsize > 0)
    3464:	230c      	movs	r3, #12
    3466:	18fb      	adds	r3, r7, r3
    3468:	228a      	movs	r2, #138	; 0x8a
    346a:	5a9b      	ldrh	r3, [r3, r2]
    346c:	2b00      	cmp	r3, #0
    346e:	d004      	beq.n	347a <atcab_info+0x10a>
                status = ATCA_RX_FAIL;
    3470:	239f      	movs	r3, #159	; 0x9f
    3472:	18fb      	adds	r3, r7, r3
    3474:	22e6      	movs	r2, #230	; 0xe6
    3476:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            BREAK(status, "Info command returned error code or no resonse");
    3478:	e025      	b.n	34c6 <atcab_info+0x156>
                status = ATCA_RX_NO_RESPONSE;
    347a:	239f      	movs	r3, #159	; 0x9f
    347c:	18fb      	adds	r3, r7, r3
    347e:	22e7      	movs	r2, #231	; 0xe7
    3480:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Info command returned error code or no resonse");
    3482:	e020      	b.n	34c6 <atcab_info+0x156>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3484:	239f      	movs	r3, #159	; 0x9f
    3486:	18fc      	adds	r4, r7, r3
    3488:	230c      	movs	r3, #12
    348a:	18fb      	adds	r3, r7, r3
    348c:	3306      	adds	r3, #6
    348e:	0018      	movs	r0, r3
    3490:	4b1d      	ldr	r3, [pc, #116]	; (3508 <atcab_info+0x198>)
    3492:	4798      	blx	r3
    3494:	0003      	movs	r3, r0
    3496:	7023      	strb	r3, [r4, #0]
    3498:	239f      	movs	r3, #159	; 0x9f
    349a:	18fb      	adds	r3, r7, r3
    349c:	781b      	ldrb	r3, [r3, #0]
    349e:	2b00      	cmp	r3, #0
    34a0:	d110      	bne.n	34c4 <atcab_info+0x154>
            BREAK(status, "Failed to construct Info command");

        memcpy(revision, &packet.data[1], 4);    // don't include the receive length, only payload
    34a2:	230c      	movs	r3, #12
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	1dd9      	adds	r1, r3, #7
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	2204      	movs	r2, #4
    34ac:	0018      	movs	r0, r3
    34ae:	4b17      	ldr	r3, [pc, #92]	; (350c <atcab_info+0x19c>)
    34b0:	4798      	blx	r3
    34b2:	e008      	b.n	34c6 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    34b4:	46c0      	nop			; (mov r8, r8)
    34b6:	e006      	b.n	34c6 <atcab_info+0x156>
            BREAK(status, "Failed to wakeup");
    34b8:	46c0      	nop			; (mov r8, r8)
    34ba:	e004      	b.n	34c6 <atcab_info+0x156>
            BREAK(status, "Failed to send Info command");
    34bc:	46c0      	nop			; (mov r8, r8)
    34be:	e002      	b.n	34c6 <atcab_info+0x156>
            BREAK(status, "Failed to receive Info command");
    34c0:	46c0      	nop			; (mov r8, r8)
    34c2:	e000      	b.n	34c6 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    34c4:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    if (status != ATCA_COMM_FAIL)     // don't keep shoving more stuff at the chip if there's something wrong with comm
    34c6:	239f      	movs	r3, #159	; 0x9f
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	2bf0      	cmp	r3, #240	; 0xf0
    34ce:	d001      	beq.n	34d4 <atcab_info+0x164>
        _atcab_exit();
    34d0:	4b0f      	ldr	r3, [pc, #60]	; (3510 <atcab_info+0x1a0>)
    34d2:	4798      	blx	r3

    return status;
    34d4:	239f      	movs	r3, #159	; 0x9f
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	781b      	ldrb	r3, [r3, #0]
}
    34da:	0018      	movs	r0, r3
    34dc:	46bd      	mov	sp, r7
    34de:	b029      	add	sp, #164	; 0xa4
    34e0:	bd90      	pop	{r4, r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	20000228 	.word	0x20000228
    34e8:	2000022c 	.word	0x2000022c
    34ec:	00002b01 	.word	0x00002b01
    34f0:	00002cbd 	.word	0x00002cbd
    34f4:	000032cd 	.word	0x000032cd
    34f8:	20000230 	.word	0x20000230
    34fc:	000030a1 	.word	0x000030a1
    3500:	000056c9 	.word	0x000056c9
    3504:	000030c3 	.word	0x000030c3
    3508:	00002e7d 	.word	0x00002e7d
    350c:	00009d1b 	.word	0x00009d1b
    3510:	0000335d 	.word	0x0000335d

00003514 <atcab_random>:
/** \brief Get a 32 byte random number from the CryptoAuth device
 *	\param[out] rand_out ptr to 32 bytes of storage for random number
 *	\return status of the operation
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    3514:	b590      	push	{r4, r7, lr}
    3516:	b0a7      	sub	sp, #156	; 0x9c
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    351c:	2397      	movs	r3, #151	; 0x97
    351e:	18fb      	adds	r3, r7, r3
    3520:	22e1      	movs	r2, #225	; 0xe1
    3522:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    3524:	2394      	movs	r3, #148	; 0x94
    3526:	18fb      	adds	r3, r7, r3
    3528:	2200      	movs	r2, #0
    352a:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    352c:	4b5d      	ldr	r3, [pc, #372]	; (36a4 <atcab_random+0x190>)
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	2b00      	cmp	r3, #0
    3532:	d101      	bne.n	3538 <atcab_random+0x24>
        return ATCA_GEN_FAIL;
    3534:	23e1      	movs	r3, #225	; 0xe1
    3536:	e0b1      	b.n	369c <atcab_random+0x188>

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    3538:	2308      	movs	r3, #8
    353a:	18fb      	adds	r3, r7, r3
    353c:	2200      	movs	r2, #0
    353e:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    3540:	2308      	movs	r3, #8
    3542:	18fb      	adds	r3, r7, r3
    3544:	2200      	movs	r2, #0
    3546:	809a      	strh	r2, [r3, #4]
        if ( (status = atRandom(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3548:	4b57      	ldr	r3, [pc, #348]	; (36a8 <atcab_random+0x194>)
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	2297      	movs	r2, #151	; 0x97
    354e:	18bc      	adds	r4, r7, r2
    3550:	2208      	movs	r2, #8
    3552:	18ba      	adds	r2, r7, r2
    3554:	0011      	movs	r1, r2
    3556:	0018      	movs	r0, r3
    3558:	4b54      	ldr	r3, [pc, #336]	; (36ac <atcab_random+0x198>)
    355a:	4798      	blx	r3
    355c:	0003      	movs	r3, r0
    355e:	7023      	strb	r3, [r4, #0]
    3560:	2397      	movs	r3, #151	; 0x97
    3562:	18fb      	adds	r3, r7, r3
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	d000      	beq.n	356c <atcab_random+0x58>
    356a:	e089      	b.n	3680 <atcab_random+0x16c>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_RANDOM);
    356c:	4b4e      	ldr	r3, [pc, #312]	; (36a8 <atcab_random+0x194>)
    356e:	681b      	ldr	r3, [r3, #0]
    3570:	2294      	movs	r2, #148	; 0x94
    3572:	18bc      	adds	r4, r7, r2
    3574:	210e      	movs	r1, #14
    3576:	0018      	movs	r0, r3
    3578:	4b4d      	ldr	r3, [pc, #308]	; (36b0 <atcab_random+0x19c>)
    357a:	4798      	blx	r3
    357c:	0003      	movs	r3, r0
    357e:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    3580:	2397      	movs	r3, #151	; 0x97
    3582:	18fc      	adds	r4, r7, r3
    3584:	4b4b      	ldr	r3, [pc, #300]	; (36b4 <atcab_random+0x1a0>)
    3586:	4798      	blx	r3
    3588:	0003      	movs	r3, r0
    358a:	7023      	strb	r3, [r4, #0]
    358c:	2397      	movs	r3, #151	; 0x97
    358e:	18fb      	adds	r3, r7, r3
    3590:	781b      	ldrb	r3, [r3, #0]
    3592:	2b00      	cmp	r3, #0
    3594:	d000      	beq.n	3598 <atcab_random+0x84>
    3596:	e075      	b.n	3684 <atcab_random+0x170>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3598:	4b47      	ldr	r3, [pc, #284]	; (36b8 <atcab_random+0x1a4>)
    359a:	6818      	ldr	r0, [r3, #0]
    359c:	2308      	movs	r3, #8
    359e:	18fb      	adds	r3, r7, r3
    35a0:	785b      	ldrb	r3, [r3, #1]
    35a2:	001a      	movs	r2, r3
    35a4:	2397      	movs	r3, #151	; 0x97
    35a6:	18fc      	adds	r4, r7, r3
    35a8:	2308      	movs	r3, #8
    35aa:	18fb      	adds	r3, r7, r3
    35ac:	0019      	movs	r1, r3
    35ae:	4b43      	ldr	r3, [pc, #268]	; (36bc <atcab_random+0x1a8>)
    35b0:	4798      	blx	r3
    35b2:	0003      	movs	r3, r0
    35b4:	7023      	strb	r3, [r4, #0]
    35b6:	2397      	movs	r3, #151	; 0x97
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	2b00      	cmp	r3, #0
    35be:	d163      	bne.n	3688 <atcab_random+0x174>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    35c0:	2394      	movs	r3, #148	; 0x94
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	881b      	ldrh	r3, [r3, #0]
    35c6:	0018      	movs	r0, r3
    35c8:	4b3d      	ldr	r3, [pc, #244]	; (36c0 <atcab_random+0x1ac>)
    35ca:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    35cc:	4b3a      	ldr	r3, [pc, #232]	; (36b8 <atcab_random+0x1a4>)
    35ce:	6818      	ldr	r0, [r3, #0]
    35d0:	2397      	movs	r3, #151	; 0x97
    35d2:	18fc      	adds	r4, r7, r3
    35d4:	2308      	movs	r3, #8
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	338a      	adds	r3, #138	; 0x8a
    35da:	001a      	movs	r2, r3
    35dc:	2308      	movs	r3, #8
    35de:	18fb      	adds	r3, r7, r3
    35e0:	3306      	adds	r3, #6
    35e2:	0019      	movs	r1, r3
    35e4:	4b37      	ldr	r3, [pc, #220]	; (36c4 <atcab_random+0x1b0>)
    35e6:	4798      	blx	r3
    35e8:	0003      	movs	r3, r0
    35ea:	7023      	strb	r3, [r4, #0]
    35ec:	2397      	movs	r3, #151	; 0x97
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d14a      	bne.n	368c <atcab_random+0x178>
            break;

        // Check response size
        if (packet.rxsize < 4)
    35f6:	2308      	movs	r3, #8
    35f8:	18fb      	adds	r3, r7, r3
    35fa:	228a      	movs	r2, #138	; 0x8a
    35fc:	5a9b      	ldrh	r3, [r3, r2]
    35fe:	2b03      	cmp	r3, #3
    3600:	d80f      	bhi.n	3622 <atcab_random+0x10e>
        {
            if (packet.rxsize > 0)
    3602:	2308      	movs	r3, #8
    3604:	18fb      	adds	r3, r7, r3
    3606:	228a      	movs	r2, #138	; 0x8a
    3608:	5a9b      	ldrh	r3, [r3, r2]
    360a:	2b00      	cmp	r3, #0
    360c:	d004      	beq.n	3618 <atcab_random+0x104>
                status = ATCA_RX_FAIL;
    360e:	2397      	movs	r3, #151	; 0x97
    3610:	18fb      	adds	r3, r7, r3
    3612:	22e6      	movs	r2, #230	; 0xe6
    3614:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3616:	e03c      	b.n	3692 <atcab_random+0x17e>
                status = ATCA_RX_NO_RESPONSE;
    3618:	2397      	movs	r3, #151	; 0x97
    361a:	18fb      	adds	r3, r7, r3
    361c:	22e7      	movs	r2, #231	; 0xe7
    361e:	701a      	strb	r2, [r3, #0]
            break;
    3620:	e037      	b.n	3692 <atcab_random+0x17e>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3622:	2397      	movs	r3, #151	; 0x97
    3624:	18fc      	adds	r4, r7, r3
    3626:	2308      	movs	r3, #8
    3628:	18fb      	adds	r3, r7, r3
    362a:	3306      	adds	r3, #6
    362c:	0018      	movs	r0, r3
    362e:	4b26      	ldr	r3, [pc, #152]	; (36c8 <atcab_random+0x1b4>)
    3630:	4798      	blx	r3
    3632:	0003      	movs	r3, r0
    3634:	7023      	strb	r3, [r4, #0]
    3636:	2397      	movs	r3, #151	; 0x97
    3638:	18fb      	adds	r3, r7, r3
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	2b00      	cmp	r3, #0
    363e:	d127      	bne.n	3690 <atcab_random+0x17c>
            break;

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    3640:	2308      	movs	r3, #8
    3642:	18fb      	adds	r3, r7, r3
    3644:	228a      	movs	r2, #138	; 0x8a
    3646:	5a9a      	ldrh	r2, [r3, r2]
    3648:	2308      	movs	r3, #8
    364a:	18fb      	adds	r3, r7, r3
    364c:	799b      	ldrb	r3, [r3, #6]
    364e:	b29b      	uxth	r3, r3
    3650:	429a      	cmp	r2, r3
    3652:	d304      	bcc.n	365e <atcab_random+0x14a>
    3654:	2308      	movs	r3, #8
    3656:	18fb      	adds	r3, r7, r3
    3658:	799b      	ldrb	r3, [r3, #6]
    365a:	2b23      	cmp	r3, #35	; 0x23
    365c:	d004      	beq.n	3668 <atcab_random+0x154>
        {
            status = ATCA_RX_FAIL;
    365e:	2397      	movs	r3, #151	; 0x97
    3660:	18fb      	adds	r3, r7, r3
    3662:	22e6      	movs	r2, #230	; 0xe6
    3664:	701a      	strb	r2, [r3, #0]
            break;
    3666:	e014      	b.n	3692 <atcab_random+0x17e>
        }

        if (rand_out)
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	2b00      	cmp	r3, #0
    366c:	d011      	beq.n	3692 <atcab_random+0x17e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    366e:	2308      	movs	r3, #8
    3670:	18fb      	adds	r3, r7, r3
    3672:	1dd9      	adds	r1, r3, #7
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	2220      	movs	r2, #32
    3678:	0018      	movs	r0, r3
    367a:	4b14      	ldr	r3, [pc, #80]	; (36cc <atcab_random+0x1b8>)
    367c:	4798      	blx	r3
    367e:	e008      	b.n	3692 <atcab_random+0x17e>
            break;
    3680:	46c0      	nop			; (mov r8, r8)
    3682:	e006      	b.n	3692 <atcab_random+0x17e>
            break;
    3684:	46c0      	nop			; (mov r8, r8)
    3686:	e004      	b.n	3692 <atcab_random+0x17e>
            break;
    3688:	46c0      	nop			; (mov r8, r8)
    368a:	e002      	b.n	3692 <atcab_random+0x17e>
            break;
    368c:	46c0      	nop			; (mov r8, r8)
    368e:	e000      	b.n	3692 <atcab_random+0x17e>
            break;
    3690:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    3692:	4b0f      	ldr	r3, [pc, #60]	; (36d0 <atcab_random+0x1bc>)
    3694:	4798      	blx	r3
    return status;
    3696:	2397      	movs	r3, #151	; 0x97
    3698:	18fb      	adds	r3, r7, r3
    369a:	781b      	ldrb	r3, [r3, #0]
}
    369c:	0018      	movs	r0, r3
    369e:	46bd      	mov	sp, r7
    36a0:	b027      	add	sp, #156	; 0x9c
    36a2:	bd90      	pop	{r4, r7, pc}
    36a4:	20000228 	.word	0x20000228
    36a8:	2000022c 	.word	0x2000022c
    36ac:	00002b9d 	.word	0x00002b9d
    36b0:	00002cbd 	.word	0x00002cbd
    36b4:	000032cd 	.word	0x000032cd
    36b8:	20000230 	.word	0x20000230
    36bc:	000030a1 	.word	0x000030a1
    36c0:	000056c9 	.word	0x000056c9
    36c4:	000030c3 	.word	0x000030c3
    36c8:	00002e7d 	.word	0x00002e7d
    36cc:	00009d1b 	.word	0x00009d1b
    36d0:	0000335d 	.word	0x0000335d

000036d4 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    36d4:	b590      	push	{r4, r7, lr}
    36d6:	b0a9      	sub	sp, #164	; 0xa4
    36d8:	af00      	add	r7, sp, #0
    36da:	60ba      	str	r2, [r7, #8]
    36dc:	607b      	str	r3, [r7, #4]
    36de:	230f      	movs	r3, #15
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	1c02      	adds	r2, r0, #0
    36e4:	701a      	strb	r2, [r3, #0]
    36e6:	230c      	movs	r3, #12
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	1c0a      	adds	r2, r1, #0
    36ec:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    36ee:	239c      	movs	r3, #156	; 0x9c
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	2200      	movs	r2, #0
    36f4:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    36f6:	239f      	movs	r3, #159	; 0x9f
    36f8:	18fb      	adds	r3, r7, r3
    36fa:	22e1      	movs	r2, #225	; 0xe1
    36fc:	701a      	strb	r2, [r3, #0]

    if (!_gDevice)
    36fe:	4b5f      	ldr	r3, [pc, #380]	; (387c <atcab_genkey_base+0x1a8>)
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d101      	bne.n	370a <atcab_genkey_base+0x36>
        return ATCA_GEN_FAIL;
    3706:	23e1      	movs	r3, #225	; 0xe1
    3708:	e0b4      	b.n	3874 <atcab_genkey_base+0x1a0>

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    370a:	2310      	movs	r3, #16
    370c:	18fb      	adds	r3, r7, r3
    370e:	220f      	movs	r2, #15
    3710:	18ba      	adds	r2, r7, r2
    3712:	7812      	ldrb	r2, [r2, #0]
    3714:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    3716:	2310      	movs	r3, #16
    3718:	18fb      	adds	r3, r7, r3
    371a:	220c      	movs	r2, #12
    371c:	18ba      	adds	r2, r7, r2
    371e:	8812      	ldrh	r2, [r2, #0]
    3720:	809a      	strh	r2, [r3, #4]
        if (other_data)
    3722:	68bb      	ldr	r3, [r7, #8]
    3724:	2b00      	cmp	r3, #0
    3726:	d007      	beq.n	3738 <atcab_genkey_base+0x64>
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    3728:	68b9      	ldr	r1, [r7, #8]
    372a:	2310      	movs	r3, #16
    372c:	18fb      	adds	r3, r7, r3
    372e:	3306      	adds	r3, #6
    3730:	2203      	movs	r2, #3
    3732:	0018      	movs	r0, r3
    3734:	4b52      	ldr	r3, [pc, #328]	; (3880 <atcab_genkey_base+0x1ac>)
    3736:	4798      	blx	r3
        if ((status = atGenKey(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3738:	4b52      	ldr	r3, [pc, #328]	; (3884 <atcab_genkey_base+0x1b0>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	229f      	movs	r2, #159	; 0x9f
    373e:	18bc      	adds	r4, r7, r2
    3740:	2210      	movs	r2, #16
    3742:	18ba      	adds	r2, r7, r2
    3744:	0011      	movs	r1, r2
    3746:	0018      	movs	r0, r3
    3748:	4b4f      	ldr	r3, [pc, #316]	; (3888 <atcab_genkey_base+0x1b4>)
    374a:	4798      	blx	r3
    374c:	0003      	movs	r3, r0
    374e:	7023      	strb	r3, [r4, #0]
    3750:	239f      	movs	r3, #159	; 0x9f
    3752:	18fb      	adds	r3, r7, r3
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b00      	cmp	r3, #0
    3758:	d000      	beq.n	375c <atcab_genkey_base+0x88>
    375a:	e07d      	b.n	3858 <atcab_genkey_base+0x184>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_GENKEY);
    375c:	4b49      	ldr	r3, [pc, #292]	; (3884 <atcab_genkey_base+0x1b0>)
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	229c      	movs	r2, #156	; 0x9c
    3762:	18bc      	adds	r4, r7, r2
    3764:	2106      	movs	r1, #6
    3766:	0018      	movs	r0, r3
    3768:	4b48      	ldr	r3, [pc, #288]	; (388c <atcab_genkey_base+0x1b8>)
    376a:	4798      	blx	r3
    376c:	0003      	movs	r3, r0
    376e:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    3770:	239f      	movs	r3, #159	; 0x9f
    3772:	18fc      	adds	r4, r7, r3
    3774:	4b46      	ldr	r3, [pc, #280]	; (3890 <atcab_genkey_base+0x1bc>)
    3776:	4798      	blx	r3
    3778:	0003      	movs	r3, r0
    377a:	7023      	strb	r3, [r4, #0]
    377c:	239f      	movs	r3, #159	; 0x9f
    377e:	18fb      	adds	r3, r7, r3
    3780:	781b      	ldrb	r3, [r3, #0]
    3782:	2b00      	cmp	r3, #0
    3784:	d16a      	bne.n	385c <atcab_genkey_base+0x188>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3786:	4b43      	ldr	r3, [pc, #268]	; (3894 <atcab_genkey_base+0x1c0>)
    3788:	6818      	ldr	r0, [r3, #0]
    378a:	2310      	movs	r3, #16
    378c:	18fb      	adds	r3, r7, r3
    378e:	785b      	ldrb	r3, [r3, #1]
    3790:	001a      	movs	r2, r3
    3792:	239f      	movs	r3, #159	; 0x9f
    3794:	18fc      	adds	r4, r7, r3
    3796:	2310      	movs	r3, #16
    3798:	18fb      	adds	r3, r7, r3
    379a:	0019      	movs	r1, r3
    379c:	4b3e      	ldr	r3, [pc, #248]	; (3898 <atcab_genkey_base+0x1c4>)
    379e:	4798      	blx	r3
    37a0:	0003      	movs	r3, r0
    37a2:	7023      	strb	r3, [r4, #0]
    37a4:	239f      	movs	r3, #159	; 0x9f
    37a6:	18fb      	adds	r3, r7, r3
    37a8:	781b      	ldrb	r3, [r3, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d158      	bne.n	3860 <atcab_genkey_base+0x18c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    37ae:	239c      	movs	r3, #156	; 0x9c
    37b0:	18fb      	adds	r3, r7, r3
    37b2:	881b      	ldrh	r3, [r3, #0]
    37b4:	0018      	movs	r0, r3
    37b6:	4b39      	ldr	r3, [pc, #228]	; (389c <atcab_genkey_base+0x1c8>)
    37b8:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    37ba:	4b36      	ldr	r3, [pc, #216]	; (3894 <atcab_genkey_base+0x1c0>)
    37bc:	6818      	ldr	r0, [r3, #0]
    37be:	239f      	movs	r3, #159	; 0x9f
    37c0:	18fc      	adds	r4, r7, r3
    37c2:	2310      	movs	r3, #16
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	338a      	adds	r3, #138	; 0x8a
    37c8:	001a      	movs	r2, r3
    37ca:	2310      	movs	r3, #16
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	3306      	adds	r3, #6
    37d0:	0019      	movs	r1, r3
    37d2:	4b33      	ldr	r3, [pc, #204]	; (38a0 <atcab_genkey_base+0x1cc>)
    37d4:	4798      	blx	r3
    37d6:	0003      	movs	r3, r0
    37d8:	7023      	strb	r3, [r4, #0]
    37da:	239f      	movs	r3, #159	; 0x9f
    37dc:	18fb      	adds	r3, r7, r3
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d13f      	bne.n	3864 <atcab_genkey_base+0x190>
            break;

        // Check response size
        if (packet.rxsize < 4)
    37e4:	2310      	movs	r3, #16
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	228a      	movs	r2, #138	; 0x8a
    37ea:	5a9b      	ldrh	r3, [r3, r2]
    37ec:	2b03      	cmp	r3, #3
    37ee:	d80f      	bhi.n	3810 <atcab_genkey_base+0x13c>
        {
            if (packet.rxsize > 0)
    37f0:	2310      	movs	r3, #16
    37f2:	18fb      	adds	r3, r7, r3
    37f4:	228a      	movs	r2, #138	; 0x8a
    37f6:	5a9b      	ldrh	r3, [r3, r2]
    37f8:	2b00      	cmp	r3, #0
    37fa:	d004      	beq.n	3806 <atcab_genkey_base+0x132>
                status = ATCA_RX_FAIL;
    37fc:	239f      	movs	r3, #159	; 0x9f
    37fe:	18fb      	adds	r3, r7, r3
    3800:	22e6      	movs	r2, #230	; 0xe6
    3802:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3804:	e031      	b.n	386a <atcab_genkey_base+0x196>
                status = ATCA_RX_NO_RESPONSE;
    3806:	239f      	movs	r3, #159	; 0x9f
    3808:	18fb      	adds	r3, r7, r3
    380a:	22e7      	movs	r2, #231	; 0xe7
    380c:	701a      	strb	r2, [r3, #0]
            break;
    380e:	e02c      	b.n	386a <atcab_genkey_base+0x196>
        }

        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3810:	239f      	movs	r3, #159	; 0x9f
    3812:	18fc      	adds	r4, r7, r3
    3814:	2310      	movs	r3, #16
    3816:	18fb      	adds	r3, r7, r3
    3818:	3306      	adds	r3, #6
    381a:	0018      	movs	r0, r3
    381c:	4b21      	ldr	r3, [pc, #132]	; (38a4 <atcab_genkey_base+0x1d0>)
    381e:	4798      	blx	r3
    3820:	0003      	movs	r3, r0
    3822:	7023      	strb	r3, [r4, #0]
    3824:	239f      	movs	r3, #159	; 0x9f
    3826:	18fb      	adds	r3, r7, r3
    3828:	781b      	ldrb	r3, [r3, #0]
    382a:	2b00      	cmp	r3, #0
    382c:	d11c      	bne.n	3868 <atcab_genkey_base+0x194>
            break;

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	2b00      	cmp	r3, #0
    3832:	d01a      	beq.n	386a <atcab_genkey_base+0x196>
    3834:	2310      	movs	r3, #16
    3836:	18fb      	adds	r3, r7, r3
    3838:	799b      	ldrb	r3, [r3, #6]
    383a:	2b04      	cmp	r3, #4
    383c:	d915      	bls.n	386a <atcab_genkey_base+0x196>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    383e:	2310      	movs	r3, #16
    3840:	18fb      	adds	r3, r7, r3
    3842:	799b      	ldrb	r3, [r3, #6]
    3844:	3b03      	subs	r3, #3
    3846:	001a      	movs	r2, r3
    3848:	2310      	movs	r3, #16
    384a:	18fb      	adds	r3, r7, r3
    384c:	1dd9      	adds	r1, r3, #7
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	0018      	movs	r0, r3
    3852:	4b0b      	ldr	r3, [pc, #44]	; (3880 <atcab_genkey_base+0x1ac>)
    3854:	4798      	blx	r3
    3856:	e008      	b.n	386a <atcab_genkey_base+0x196>
            break;
    3858:	46c0      	nop			; (mov r8, r8)
    385a:	e006      	b.n	386a <atcab_genkey_base+0x196>
            break;
    385c:	46c0      	nop			; (mov r8, r8)
    385e:	e004      	b.n	386a <atcab_genkey_base+0x196>
            break;
    3860:	46c0      	nop			; (mov r8, r8)
    3862:	e002      	b.n	386a <atcab_genkey_base+0x196>
            break;
    3864:	46c0      	nop			; (mov r8, r8)
    3866:	e000      	b.n	386a <atcab_genkey_base+0x196>
            break;
    3868:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    386a:	4b0f      	ldr	r3, [pc, #60]	; (38a8 <atcab_genkey_base+0x1d4>)
    386c:	4798      	blx	r3
    return status;
    386e:	239f      	movs	r3, #159	; 0x9f
    3870:	18fb      	adds	r3, r7, r3
    3872:	781b      	ldrb	r3, [r3, #0]
}
    3874:	0018      	movs	r0, r3
    3876:	46bd      	mov	sp, r7
    3878:	b029      	add	sp, #164	; 0xa4
    387a:	bd90      	pop	{r4, r7, pc}
    387c:	20000228 	.word	0x20000228
    3880:	00009d1b 	.word	0x00009d1b
    3884:	2000022c 	.word	0x2000022c
    3888:	00002ab1 	.word	0x00002ab1
    388c:	00002cbd 	.word	0x00002cbd
    3890:	000032cd 	.word	0x000032cd
    3894:	20000230 	.word	0x20000230
    3898:	000030a1 	.word	0x000030a1
    389c:	000056c9 	.word	0x000056c9
    38a0:	000030c3 	.word	0x000030c3
    38a4:	00002e7d 	.word	0x00002e7d
    38a8:	0000335d 	.word	0x0000335d

000038ac <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    38ac:	b590      	push	{r4, r7, lr}
    38ae:	b083      	sub	sp, #12
    38b0:	af00      	add	r7, sp, #0
    38b2:	0002      	movs	r2, r0
    38b4:	6039      	str	r1, [r7, #0]
    38b6:	1dbb      	adds	r3, r7, #6
    38b8:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    38ba:	683a      	ldr	r2, [r7, #0]
    38bc:	1dbb      	adds	r3, r7, #6
    38be:	8819      	ldrh	r1, [r3, #0]
    38c0:	0013      	movs	r3, r2
    38c2:	2200      	movs	r2, #0
    38c4:	2004      	movs	r0, #4
    38c6:	4c03      	ldr	r4, [pc, #12]	; (38d4 <atcab_genkey+0x28>)
    38c8:	47a0      	blx	r4
    38ca:	0003      	movs	r3, r0
}
    38cc:	0018      	movs	r0, r3
    38ce:	46bd      	mov	sp, r7
    38d0:	b003      	add	sp, #12
    38d2:	bd90      	pop	{r4, r7, pc}
    38d4:	000036d5 	.word	0x000036d5

000038d8 <atcab_challenge>:
/** \brief send a challenge to the device (a pass-through nonce)
 *  \param[in] challenge - pointer to 32 bytes of data which will be sent as the challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_challenge(const uint8_t *challenge)
{
    38d8:	b590      	push	{r4, r7, lr}
    38da:	b0a7      	sub	sp, #156	; 0x9c
    38dc:	af00      	add	r7, sp, #0
    38de:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    38e0:	2397      	movs	r3, #151	; 0x97
    38e2:	18fb      	adds	r3, r7, r3
    38e4:	22e1      	movs	r2, #225	; 0xe1
    38e6:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    38e8:	2394      	movs	r3, #148	; 0x94
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	2200      	movs	r2, #0
    38ee:	801a      	strh	r2, [r3, #0]

    do
    {
        // Verify the inputs
        if (challenge == NULL)
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d104      	bne.n	3900 <atcab_challenge+0x28>
        {
            status = ATCA_BAD_PARAM;
    38f6:	2397      	movs	r3, #151	; 0x97
    38f8:	18fb      	adds	r3, r7, r3
    38fa:	22e2      	movs	r2, #226	; 0xe2
    38fc:	701a      	strb	r2, [r3, #0]
            break;
    38fe:	e08c      	b.n	3a1a <atcab_challenge+0x142>
        }

        // build a nonce command (pass through mode)
        packet.param1 = NONCE_MODE_PASSTHROUGH;
    3900:	2308      	movs	r3, #8
    3902:	18fb      	adds	r3, r7, r3
    3904:	2203      	movs	r2, #3
    3906:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    3908:	2308      	movs	r3, #8
    390a:	18fb      	adds	r3, r7, r3
    390c:	2200      	movs	r2, #0
    390e:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, challenge, 32);
    3910:	6879      	ldr	r1, [r7, #4]
    3912:	2308      	movs	r3, #8
    3914:	18fb      	adds	r3, r7, r3
    3916:	3306      	adds	r3, #6
    3918:	2220      	movs	r2, #32
    391a:	0018      	movs	r0, r3
    391c:	4b43      	ldr	r3, [pc, #268]	; (3a2c <atcab_challenge+0x154>)
    391e:	4798      	blx	r3

        if ((status = atNonce(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3920:	4b43      	ldr	r3, [pc, #268]	; (3a30 <atcab_challenge+0x158>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2297      	movs	r2, #151	; 0x97
    3926:	18bc      	adds	r4, r7, r2
    3928:	2208      	movs	r2, #8
    392a:	18ba      	adds	r2, r7, r2
    392c:	0011      	movs	r1, r2
    392e:	0018      	movs	r0, r3
    3930:	4b40      	ldr	r3, [pc, #256]	; (3a34 <atcab_challenge+0x15c>)
    3932:	4798      	blx	r3
    3934:	0003      	movs	r3, r0
    3936:	7023      	strb	r3, [r4, #0]
    3938:	2397      	movs	r3, #151	; 0x97
    393a:	18fb      	adds	r3, r7, r3
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	2b00      	cmp	r3, #0
    3940:	d164      	bne.n	3a0c <atcab_challenge+0x134>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_NONCE);
    3942:	4b3b      	ldr	r3, [pc, #236]	; (3a30 <atcab_challenge+0x158>)
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	2294      	movs	r2, #148	; 0x94
    3948:	18bc      	adds	r4, r7, r2
    394a:	210b      	movs	r1, #11
    394c:	0018      	movs	r0, r3
    394e:	4b3a      	ldr	r3, [pc, #232]	; (3a38 <atcab_challenge+0x160>)
    3950:	4798      	blx	r3
    3952:	0003      	movs	r3, r0
    3954:	8023      	strh	r3, [r4, #0]

        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    3956:	2397      	movs	r3, #151	; 0x97
    3958:	18fc      	adds	r4, r7, r3
    395a:	4b38      	ldr	r3, [pc, #224]	; (3a3c <atcab_challenge+0x164>)
    395c:	4798      	blx	r3
    395e:	0003      	movs	r3, r0
    3960:	7023      	strb	r3, [r4, #0]
    3962:	2397      	movs	r3, #151	; 0x97
    3964:	18fb      	adds	r3, r7, r3
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	2b00      	cmp	r3, #0
    396a:	d151      	bne.n	3a10 <atcab_challenge+0x138>
            break;

        // send the command
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    396c:	4b34      	ldr	r3, [pc, #208]	; (3a40 <atcab_challenge+0x168>)
    396e:	6818      	ldr	r0, [r3, #0]
    3970:	2308      	movs	r3, #8
    3972:	18fb      	adds	r3, r7, r3
    3974:	785b      	ldrb	r3, [r3, #1]
    3976:	001a      	movs	r2, r3
    3978:	2397      	movs	r3, #151	; 0x97
    397a:	18fc      	adds	r4, r7, r3
    397c:	2308      	movs	r3, #8
    397e:	18fb      	adds	r3, r7, r3
    3980:	0019      	movs	r1, r3
    3982:	4b30      	ldr	r3, [pc, #192]	; (3a44 <atcab_challenge+0x16c>)
    3984:	4798      	blx	r3
    3986:	0003      	movs	r3, r0
    3988:	7023      	strb	r3, [r4, #0]
    398a:	2397      	movs	r3, #151	; 0x97
    398c:	18fb      	adds	r3, r7, r3
    398e:	781b      	ldrb	r3, [r3, #0]
    3990:	2b00      	cmp	r3, #0
    3992:	d13f      	bne.n	3a14 <atcab_challenge+0x13c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3994:	2394      	movs	r3, #148	; 0x94
    3996:	18fb      	adds	r3, r7, r3
    3998:	881b      	ldrh	r3, [r3, #0]
    399a:	0018      	movs	r0, r3
    399c:	4b2a      	ldr	r3, [pc, #168]	; (3a48 <atcab_challenge+0x170>)
    399e:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    39a0:	4b27      	ldr	r3, [pc, #156]	; (3a40 <atcab_challenge+0x168>)
    39a2:	6818      	ldr	r0, [r3, #0]
    39a4:	2397      	movs	r3, #151	; 0x97
    39a6:	18fc      	adds	r4, r7, r3
    39a8:	2308      	movs	r3, #8
    39aa:	18fb      	adds	r3, r7, r3
    39ac:	338a      	adds	r3, #138	; 0x8a
    39ae:	001a      	movs	r2, r3
    39b0:	2308      	movs	r3, #8
    39b2:	18fb      	adds	r3, r7, r3
    39b4:	3306      	adds	r3, #6
    39b6:	0019      	movs	r1, r3
    39b8:	4b24      	ldr	r3, [pc, #144]	; (3a4c <atcab_challenge+0x174>)
    39ba:	4798      	blx	r3
    39bc:	0003      	movs	r3, r0
    39be:	7023      	strb	r3, [r4, #0]
    39c0:	2397      	movs	r3, #151	; 0x97
    39c2:	18fb      	adds	r3, r7, r3
    39c4:	781b      	ldrb	r3, [r3, #0]
    39c6:	2b00      	cmp	r3, #0
    39c8:	d126      	bne.n	3a18 <atcab_challenge+0x140>
            break;

        // Check response size
        if (packet.rxsize < 4)
    39ca:	2308      	movs	r3, #8
    39cc:	18fb      	adds	r3, r7, r3
    39ce:	228a      	movs	r2, #138	; 0x8a
    39d0:	5a9b      	ldrh	r3, [r3, r2]
    39d2:	2b03      	cmp	r3, #3
    39d4:	d80f      	bhi.n	39f6 <atcab_challenge+0x11e>
        {
            if (packet.rxsize > 0)
    39d6:	2308      	movs	r3, #8
    39d8:	18fb      	adds	r3, r7, r3
    39da:	228a      	movs	r2, #138	; 0x8a
    39dc:	5a9b      	ldrh	r3, [r3, r2]
    39de:	2b00      	cmp	r3, #0
    39e0:	d004      	beq.n	39ec <atcab_challenge+0x114>
                status = ATCA_RX_FAIL;
    39e2:	2397      	movs	r3, #151	; 0x97
    39e4:	18fb      	adds	r3, r7, r3
    39e6:	22e6      	movs	r2, #230	; 0xe6
    39e8:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    39ea:	e016      	b.n	3a1a <atcab_challenge+0x142>
                status = ATCA_RX_NO_RESPONSE;
    39ec:	2397      	movs	r3, #151	; 0x97
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	22e7      	movs	r2, #231	; 0xe7
    39f2:	701a      	strb	r2, [r3, #0]
            break;
    39f4:	e011      	b.n	3a1a <atcab_challenge+0x142>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    39f6:	2397      	movs	r3, #151	; 0x97
    39f8:	18fc      	adds	r4, r7, r3
    39fa:	2308      	movs	r3, #8
    39fc:	18fb      	adds	r3, r7, r3
    39fe:	3306      	adds	r3, #6
    3a00:	0018      	movs	r0, r3
    3a02:	4b13      	ldr	r3, [pc, #76]	; (3a50 <atcab_challenge+0x178>)
    3a04:	4798      	blx	r3
    3a06:	0003      	movs	r3, r0
    3a08:	7023      	strb	r3, [r4, #0]
    3a0a:	e006      	b.n	3a1a <atcab_challenge+0x142>
            break;
    3a0c:	46c0      	nop			; (mov r8, r8)
    3a0e:	e004      	b.n	3a1a <atcab_challenge+0x142>
            break;
    3a10:	46c0      	nop			; (mov r8, r8)
    3a12:	e002      	b.n	3a1a <atcab_challenge+0x142>
            break;
    3a14:	46c0      	nop			; (mov r8, r8)
    3a16:	e000      	b.n	3a1a <atcab_challenge+0x142>
            break;
    3a18:	46c0      	nop			; (mov r8, r8)
            break;

    }
    while (0);

    _atcab_exit();
    3a1a:	4b0e      	ldr	r3, [pc, #56]	; (3a54 <atcab_challenge+0x17c>)
    3a1c:	4798      	blx	r3
    return status;
    3a1e:	2397      	movs	r3, #151	; 0x97
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	781b      	ldrb	r3, [r3, #0]
}
    3a24:	0018      	movs	r0, r3
    3a26:	46bd      	mov	sp, r7
    3a28:	b027      	add	sp, #156	; 0x9c
    3a2a:	bd90      	pop	{r4, r7, pc}
    3a2c:	00009d1b 	.word	0x00009d1b
    3a30:	2000022c 	.word	0x2000022c
    3a34:	00002b35 	.word	0x00002b35
    3a38:	00002cbd 	.word	0x00002cbd
    3a3c:	000032cd 	.word	0x000032cd
    3a40:	20000230 	.word	0x20000230
    3a44:	000030a1 	.word	0x000030a1
    3a48:	000056c9 	.word	0x000056c9
    3a4c:	000030c3 	.word	0x000030c3
    3a50:	00002e7d 	.word	0x00002e7d
    3a54:	0000335d 	.word	0x0000335d

00003a58 <atcab_read_serial_number>:
/** \brief read the serial number of the device
 *  \param[out] serial_number  pointer to space to receive serial number. This space should be 9 bytes long
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
    3a58:	b5b0      	push	{r4, r5, r7, lr}
    3a5a:	b08e      	sub	sp, #56	; 0x38
    3a5c:	af02      	add	r7, sp, #8
    3a5e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3a60:	232f      	movs	r3, #47	; 0x2f
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	22e1      	movs	r2, #225	; 0xe1
    3a66:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    3a68:	687b      	ldr	r3, [r7, #4]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d101      	bne.n	3a72 <atcab_read_serial_number+0x1a>
        return ATCA_BAD_PARAM;
    3a6e:	23e2      	movs	r3, #226	; 0xe2
    3a70:	e028      	b.n	3ac4 <atcab_read_serial_number+0x6c>

    do
    {
        if ( (status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    3a72:	232f      	movs	r3, #47	; 0x2f
    3a74:	18fc      	adds	r4, r7, r3
    3a76:	2320      	movs	r3, #32
    3a78:	9301      	str	r3, [sp, #4]
    3a7a:	230c      	movs	r3, #12
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	9300      	str	r3, [sp, #0]
    3a80:	2300      	movs	r3, #0
    3a82:	2200      	movs	r2, #0
    3a84:	2100      	movs	r1, #0
    3a86:	2000      	movs	r0, #0
    3a88:	4d10      	ldr	r5, [pc, #64]	; (3acc <atcab_read_serial_number+0x74>)
    3a8a:	47a8      	blx	r5
    3a8c:	0003      	movs	r3, r0
    3a8e:	7023      	strb	r3, [r4, #0]
    3a90:	232f      	movs	r3, #47	; 0x2f
    3a92:	18fb      	adds	r3, r7, r3
    3a94:	781b      	ldrb	r3, [r3, #0]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d110      	bne.n	3abc <atcab_read_serial_number+0x64>
            break;
        memcpy(&serial_number[0], &read_buf[0], 4);
    3a9a:	230c      	movs	r3, #12
    3a9c:	18f9      	adds	r1, r7, r3
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	2204      	movs	r2, #4
    3aa2:	0018      	movs	r0, r3
    3aa4:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <atcab_read_serial_number+0x78>)
    3aa6:	4798      	blx	r3
        memcpy(&serial_number[4], &read_buf[8], 5);
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	1d18      	adds	r0, r3, #4
    3aac:	230c      	movs	r3, #12
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	3308      	adds	r3, #8
    3ab2:	2205      	movs	r2, #5
    3ab4:	0019      	movs	r1, r3
    3ab6:	4b06      	ldr	r3, [pc, #24]	; (3ad0 <atcab_read_serial_number+0x78>)
    3ab8:	4798      	blx	r3
    3aba:	e000      	b.n	3abe <atcab_read_serial_number+0x66>
            break;
    3abc:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
    3abe:	232f      	movs	r3, #47	; 0x2f
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	781b      	ldrb	r3, [r3, #0]
}
    3ac4:	0018      	movs	r0, r3
    3ac6:	46bd      	mov	sp, r7
    3ac8:	b00c      	add	sp, #48	; 0x30
    3aca:	bdb0      	pop	{r4, r5, r7, pc}
    3acc:	00003c65 	.word	0x00003c65
    3ad0:	00009d1b 	.word	0x00009d1b

00003ad4 <atcab_get_addr>:
 *  \param[in] offset
 *  \param[in] addr
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    3ad4:	b5b0      	push	{r4, r5, r7, lr}
    3ad6:	b084      	sub	sp, #16
    3ad8:	af00      	add	r7, sp, #0
    3ada:	0005      	movs	r5, r0
    3adc:	000c      	movs	r4, r1
    3ade:	0010      	movs	r0, r2
    3ae0:	0019      	movs	r1, r3
    3ae2:	1dfb      	adds	r3, r7, #7
    3ae4:	1c2a      	adds	r2, r5, #0
    3ae6:	701a      	strb	r2, [r3, #0]
    3ae8:	1d3b      	adds	r3, r7, #4
    3aea:	1c22      	adds	r2, r4, #0
    3aec:	801a      	strh	r2, [r3, #0]
    3aee:	1dbb      	adds	r3, r7, #6
    3af0:	1c02      	adds	r2, r0, #0
    3af2:	701a      	strb	r2, [r3, #0]
    3af4:	1cfb      	adds	r3, r7, #3
    3af6:	1c0a      	adds	r2, r1, #0
    3af8:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    3afa:	230f      	movs	r3, #15
    3afc:	18fb      	adds	r3, r7, r3
    3afe:	2200      	movs	r2, #0
    3b00:	701a      	strb	r2, [r3, #0]
    uint8_t memzone = zone & 0x03;
    3b02:	230e      	movs	r3, #14
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	1dfa      	adds	r2, r7, #7
    3b08:	7812      	ldrb	r2, [r2, #0]
    3b0a:	2103      	movs	r1, #3
    3b0c:	400a      	ands	r2, r1
    3b0e:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
    3b10:	6a3b      	ldr	r3, [r7, #32]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d101      	bne.n	3b1a <atcab_get_addr+0x46>
        return ATCA_BAD_PARAM;
    3b16:	23e2      	movs	r3, #226	; 0xe2
    3b18:	e052      	b.n	3bc0 <atcab_get_addr+0xec>
    if ((memzone != ATCA_ZONE_CONFIG) && (memzone != ATCA_ZONE_DATA) && (memzone != ATCA_ZONE_OTP))
    3b1a:	230e      	movs	r3, #14
    3b1c:	18fb      	adds	r3, r7, r3
    3b1e:	781b      	ldrb	r3, [r3, #0]
    3b20:	2b00      	cmp	r3, #0
    3b22:	d00b      	beq.n	3b3c <atcab_get_addr+0x68>
    3b24:	230e      	movs	r3, #14
    3b26:	18fb      	adds	r3, r7, r3
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	2b02      	cmp	r3, #2
    3b2c:	d006      	beq.n	3b3c <atcab_get_addr+0x68>
    3b2e:	230e      	movs	r3, #14
    3b30:	18fb      	adds	r3, r7, r3
    3b32:	781b      	ldrb	r3, [r3, #0]
    3b34:	2b01      	cmp	r3, #1
    3b36:	d001      	beq.n	3b3c <atcab_get_addr+0x68>
        return ATCA_BAD_PARAM;
    3b38:	23e2      	movs	r3, #226	; 0xe2
    3b3a:	e041      	b.n	3bc0 <atcab_get_addr+0xec>
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    3b3c:	6a3b      	ldr	r3, [r7, #32]
    3b3e:	2200      	movs	r2, #0
    3b40:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    3b42:	1cfb      	adds	r3, r7, #3
    3b44:	1cfa      	adds	r2, r7, #3
    3b46:	7812      	ldrb	r2, [r2, #0]
    3b48:	2107      	movs	r1, #7
    3b4a:	400a      	ands	r2, r1
    3b4c:	701a      	strb	r2, [r3, #0]
        if ((memzone == ATCA_ZONE_CONFIG) || (memzone == ATCA_ZONE_OTP))
    3b4e:	230e      	movs	r3, #14
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d004      	beq.n	3b62 <atcab_get_addr+0x8e>
    3b58:	230e      	movs	r3, #14
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2b01      	cmp	r3, #1
    3b60:	d110      	bne.n	3b84 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
    3b62:	1dbb      	adds	r3, r7, #6
    3b64:	781b      	ldrb	r3, [r3, #0]
    3b66:	b29b      	uxth	r3, r3
    3b68:	00db      	lsls	r3, r3, #3
    3b6a:	b29a      	uxth	r2, r3
    3b6c:	6a3b      	ldr	r3, [r7, #32]
    3b6e:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
    3b70:	6a3b      	ldr	r3, [r7, #32]
    3b72:	881a      	ldrh	r2, [r3, #0]
    3b74:	1cfb      	adds	r3, r7, #3
    3b76:	781b      	ldrb	r3, [r3, #0]
    3b78:	b29b      	uxth	r3, r3
    3b7a:	4313      	orrs	r3, r2
    3b7c:	b29a      	uxth	r2, r3
    3b7e:	6a3b      	ldr	r3, [r7, #32]
    3b80:	801a      	strh	r2, [r3, #0]
    3b82:	e01a      	b.n	3bba <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
    3b84:	1d3b      	adds	r3, r7, #4
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	00db      	lsls	r3, r3, #3
    3b8a:	b29a      	uxth	r2, r3
    3b8c:	6a3b      	ldr	r3, [r7, #32]
    3b8e:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
    3b90:	6a3b      	ldr	r3, [r7, #32]
    3b92:	881a      	ldrh	r2, [r3, #0]
    3b94:	1cfb      	adds	r3, r7, #3
    3b96:	781b      	ldrb	r3, [r3, #0]
    3b98:	b29b      	uxth	r3, r3
    3b9a:	4313      	orrs	r3, r2
    3b9c:	b29a      	uxth	r2, r3
    3b9e:	6a3b      	ldr	r3, [r7, #32]
    3ba0:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
    3ba2:	6a3b      	ldr	r3, [r7, #32]
    3ba4:	881b      	ldrh	r3, [r3, #0]
    3ba6:	b21a      	sxth	r2, r3
    3ba8:	1dbb      	adds	r3, r7, #6
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	021b      	lsls	r3, r3, #8
    3bae:	b21b      	sxth	r3, r3
    3bb0:	4313      	orrs	r3, r2
    3bb2:	b21b      	sxth	r3, r3
    3bb4:	b29a      	uxth	r2, r3
    3bb6:	6a3b      	ldr	r3, [r7, #32]
    3bb8:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
    3bba:	230f      	movs	r3, #15
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	781b      	ldrb	r3, [r3, #0]
}
    3bc0:	0018      	movs	r0, r3
    3bc2:	46bd      	mov	sp, r7
    3bc4:	b004      	add	sp, #16
    3bc6:	bdb0      	pop	{r4, r5, r7, pc}

00003bc8 <atcab_is_locked>:
 *  \param[in]  zone      The zone to query for locked (use LOCK_ZONE_CONFIG or LOCK_ZONE_DATA)
 *  \param[out] is_locked  true if the specified zone is locked
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
    3bc8:	b5b0      	push	{r4, r5, r7, lr}
    3bca:	b086      	sub	sp, #24
    3bcc:	af02      	add	r7, sp, #8
    3bce:	0002      	movs	r2, r0
    3bd0:	6039      	str	r1, [r7, #0]
    3bd2:	1dfb      	adds	r3, r7, #7
    3bd4:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    3bd6:	230f      	movs	r3, #15
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	22e1      	movs	r2, #225	; 0xe1
    3bdc:	701a      	strb	r2, [r3, #0]
    uint8_t data[ATCA_WORD_SIZE];

    do
    {
        if (is_locked == NULL)
    3bde:	683b      	ldr	r3, [r7, #0]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d101      	bne.n	3be8 <atcab_is_locked+0x20>
            return ATCA_BAD_PARAM;
    3be4:	23e2      	movs	r3, #226	; 0xe2
    3be6:	e037      	b.n	3c58 <atcab_is_locked+0x90>

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ( (ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
    3be8:	230f      	movs	r3, #15
    3bea:	18fc      	adds	r4, r7, r3
    3bec:	2304      	movs	r3, #4
    3bee:	9301      	str	r3, [sp, #4]
    3bf0:	2308      	movs	r3, #8
    3bf2:	18fb      	adds	r3, r7, r3
    3bf4:	9300      	str	r3, [sp, #0]
    3bf6:	2305      	movs	r3, #5
    3bf8:	2202      	movs	r2, #2
    3bfa:	2100      	movs	r1, #0
    3bfc:	2000      	movs	r0, #0
    3bfe:	4d18      	ldr	r5, [pc, #96]	; (3c60 <atcab_is_locked+0x98>)
    3c00:	47a8      	blx	r5
    3c02:	0003      	movs	r3, r0
    3c04:	7023      	strb	r3, [r4, #0]
    3c06:	230f      	movs	r3, #15
    3c08:	18fb      	adds	r3, r7, r3
    3c0a:	781b      	ldrb	r3, [r3, #0]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d11f      	bne.n	3c50 <atcab_is_locked+0x88>
            break;

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
    3c10:	1dfb      	adds	r3, r7, #7
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d002      	beq.n	3c1e <atcab_is_locked+0x56>
    3c18:	2b01      	cmp	r3, #1
    3c1a:	d00a      	beq.n	3c32 <atcab_is_locked+0x6a>
    3c1c:	e013      	b.n	3c46 <atcab_is_locked+0x7e>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
    3c1e:	2308      	movs	r3, #8
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	78db      	ldrb	r3, [r3, #3]
    3c24:	3b55      	subs	r3, #85	; 0x55
    3c26:	1e5a      	subs	r2, r3, #1
    3c28:	4193      	sbcs	r3, r2
    3c2a:	b2da      	uxtb	r2, r3
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	701a      	strb	r2, [r3, #0]
    3c30:	e00f      	b.n	3c52 <atcab_is_locked+0x8a>
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
    3c32:	2308      	movs	r3, #8
    3c34:	18fb      	adds	r3, r7, r3
    3c36:	789b      	ldrb	r3, [r3, #2]
    3c38:	3b55      	subs	r3, #85	; 0x55
    3c3a:	1e5a      	subs	r2, r3, #1
    3c3c:	4193      	sbcs	r3, r2
    3c3e:	b2da      	uxtb	r2, r3
    3c40:	683b      	ldr	r3, [r7, #0]
    3c42:	701a      	strb	r2, [r3, #0]
    3c44:	e005      	b.n	3c52 <atcab_is_locked+0x8a>
        default: ret = ATCA_BAD_PARAM; break;
    3c46:	230f      	movs	r3, #15
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	22e2      	movs	r2, #226	; 0xe2
    3c4c:	701a      	strb	r2, [r3, #0]
    3c4e:	e000      	b.n	3c52 <atcab_is_locked+0x8a>
            break;
    3c50:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return ret;
    3c52:	230f      	movs	r3, #15
    3c54:	18fb      	adds	r3, r7, r3
    3c56:	781b      	ldrb	r3, [r3, #0]
}
    3c58:	0018      	movs	r0, r3
    3c5a:	46bd      	mov	sp, r7
    3c5c:	b004      	add	sp, #16
    3c5e:	bdb0      	pop	{r4, r5, r7, pc}
    3c60:	00003c65 	.word	0x00003c65

00003c64 <atcab_read_zone>:
 *  \param[in] data
 *  \param[in] len  Must be either 4 or 32
 *  returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    3c64:	b5b0      	push	{r4, r5, r7, lr}
    3c66:	b0aa      	sub	sp, #168	; 0xa8
    3c68:	af02      	add	r7, sp, #8
    3c6a:	0005      	movs	r5, r0
    3c6c:	000c      	movs	r4, r1
    3c6e:	0010      	movs	r0, r2
    3c70:	0019      	movs	r1, r3
    3c72:	1dfb      	adds	r3, r7, #7
    3c74:	1c2a      	adds	r2, r5, #0
    3c76:	701a      	strb	r2, [r3, #0]
    3c78:	1d3b      	adds	r3, r7, #4
    3c7a:	1c22      	adds	r2, r4, #0
    3c7c:	801a      	strh	r2, [r3, #0]
    3c7e:	1dbb      	adds	r3, r7, #6
    3c80:	1c02      	adds	r2, r0, #0
    3c82:	701a      	strb	r2, [r3, #0]
    3c84:	1cfb      	adds	r3, r7, #3
    3c86:	1c0a      	adds	r2, r1, #0
    3c88:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    3c8a:	239f      	movs	r3, #159	; 0x9f
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	2200      	movs	r2, #0
    3c90:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t addr;
    uint16_t execution_time = 0;
    3c92:	239c      	movs	r3, #156	; 0x9c
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	2200      	movs	r2, #0
    3c98:	801a      	strh	r2, [r3, #0]

    do
    {
        // Check the input parameters
        if (data == NULL)
    3c9a:	23b0      	movs	r3, #176	; 0xb0
    3c9c:	18fb      	adds	r3, r7, r3
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d101      	bne.n	3ca8 <atcab_read_zone+0x44>
            return ATCA_BAD_PARAM;
    3ca4:	23e2      	movs	r3, #226	; 0xe2
    3ca6:	e0d2      	b.n	3e4e <atcab_read_zone+0x1ea>

        if (len != 4 && len != 32)
    3ca8:	23b4      	movs	r3, #180	; 0xb4
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	2b04      	cmp	r3, #4
    3cb0:	d006      	beq.n	3cc0 <atcab_read_zone+0x5c>
    3cb2:	23b4      	movs	r3, #180	; 0xb4
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	2b20      	cmp	r3, #32
    3cba:	d001      	beq.n	3cc0 <atcab_read_zone+0x5c>
            return ATCA_BAD_PARAM;
    3cbc:	23e2      	movs	r3, #226	; 0xe2
    3cbe:	e0c6      	b.n	3e4e <atcab_read_zone+0x1ea>

        // The get address function checks the remaining variables
        if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    3cc0:	239f      	movs	r3, #159	; 0x9f
    3cc2:	18fc      	adds	r4, r7, r3
    3cc4:	1cfb      	adds	r3, r7, #3
    3cc6:	781d      	ldrb	r5, [r3, #0]
    3cc8:	1dbb      	adds	r3, r7, #6
    3cca:	781a      	ldrb	r2, [r3, #0]
    3ccc:	1d3b      	adds	r3, r7, #4
    3cce:	8819      	ldrh	r1, [r3, #0]
    3cd0:	1dfb      	adds	r3, r7, #7
    3cd2:	7818      	ldrb	r0, [r3, #0]
    3cd4:	230e      	movs	r3, #14
    3cd6:	18fb      	adds	r3, r7, r3
    3cd8:	9300      	str	r3, [sp, #0]
    3cda:	002b      	movs	r3, r5
    3cdc:	4d5e      	ldr	r5, [pc, #376]	; (3e58 <atcab_read_zone+0x1f4>)
    3cde:	47a8      	blx	r5
    3ce0:	0003      	movs	r3, r0
    3ce2:	7023      	strb	r3, [r4, #0]
    3ce4:	239f      	movs	r3, #159	; 0x9f
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d000      	beq.n	3cf0 <atcab_read_zone+0x8c>
    3cee:	e09e      	b.n	3e2e <atcab_read_zone+0x1ca>
            break;

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
    3cf0:	23b4      	movs	r3, #180	; 0xb4
    3cf2:	18fb      	adds	r3, r7, r3
    3cf4:	781b      	ldrb	r3, [r3, #0]
    3cf6:	2b20      	cmp	r3, #32
    3cf8:	d106      	bne.n	3d08 <atcab_read_zone+0xa4>
            zone = zone | ATCA_ZONE_READWRITE_32;
    3cfa:	1dfb      	adds	r3, r7, #7
    3cfc:	1dfa      	adds	r2, r7, #7
    3cfe:	7812      	ldrb	r2, [r2, #0]
    3d00:	2180      	movs	r1, #128	; 0x80
    3d02:	4249      	negs	r1, r1
    3d04:	430a      	orrs	r2, r1
    3d06:	701a      	strb	r2, [r3, #0]

        // build a read command
        packet.param1 = zone;
    3d08:	2310      	movs	r3, #16
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	1dfa      	adds	r2, r7, #7
    3d0e:	7812      	ldrb	r2, [r2, #0]
    3d10:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
    3d12:	230e      	movs	r3, #14
    3d14:	18fb      	adds	r3, r7, r3
    3d16:	881a      	ldrh	r2, [r3, #0]
    3d18:	2310      	movs	r3, #16
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	809a      	strh	r2, [r3, #4]

        if ( (status = atRead(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3d1e:	4b4f      	ldr	r3, [pc, #316]	; (3e5c <atcab_read_zone+0x1f8>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	229f      	movs	r2, #159	; 0x9f
    3d24:	18bc      	adds	r4, r7, r2
    3d26:	2210      	movs	r2, #16
    3d28:	18ba      	adds	r2, r7, r2
    3d2a:	0011      	movs	r1, r2
    3d2c:	0018      	movs	r0, r3
    3d2e:	4b4c      	ldr	r3, [pc, #304]	; (3e60 <atcab_read_zone+0x1fc>)
    3d30:	4798      	blx	r3
    3d32:	0003      	movs	r3, r0
    3d34:	7023      	strb	r3, [r4, #0]
    3d36:	239f      	movs	r3, #159	; 0x9f
    3d38:	18fb      	adds	r3, r7, r3
    3d3a:	781b      	ldrb	r3, [r3, #0]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d000      	beq.n	3d42 <atcab_read_zone+0xde>
    3d40:	e077      	b.n	3e32 <atcab_read_zone+0x1ce>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_READMEM);
    3d42:	4b46      	ldr	r3, [pc, #280]	; (3e5c <atcab_read_zone+0x1f8>)
    3d44:	681b      	ldr	r3, [r3, #0]
    3d46:	229c      	movs	r2, #156	; 0x9c
    3d48:	18bc      	adds	r4, r7, r2
    3d4a:	210f      	movs	r1, #15
    3d4c:	0018      	movs	r0, r3
    3d4e:	4b45      	ldr	r3, [pc, #276]	; (3e64 <atcab_read_zone+0x200>)
    3d50:	4798      	blx	r3
    3d52:	0003      	movs	r3, r0
    3d54:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    3d56:	239f      	movs	r3, #159	; 0x9f
    3d58:	18fc      	adds	r4, r7, r3
    3d5a:	4b43      	ldr	r3, [pc, #268]	; (3e68 <atcab_read_zone+0x204>)
    3d5c:	4798      	blx	r3
    3d5e:	0003      	movs	r3, r0
    3d60:	7023      	strb	r3, [r4, #0]
    3d62:	239f      	movs	r3, #159	; 0x9f
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d164      	bne.n	3e36 <atcab_read_zone+0x1d2>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3d6c:	4b3f      	ldr	r3, [pc, #252]	; (3e6c <atcab_read_zone+0x208>)
    3d6e:	6818      	ldr	r0, [r3, #0]
    3d70:	2310      	movs	r3, #16
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	785b      	ldrb	r3, [r3, #1]
    3d76:	001a      	movs	r2, r3
    3d78:	239f      	movs	r3, #159	; 0x9f
    3d7a:	18fc      	adds	r4, r7, r3
    3d7c:	2310      	movs	r3, #16
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	0019      	movs	r1, r3
    3d82:	4b3b      	ldr	r3, [pc, #236]	; (3e70 <atcab_read_zone+0x20c>)
    3d84:	4798      	blx	r3
    3d86:	0003      	movs	r3, r0
    3d88:	7023      	strb	r3, [r4, #0]
    3d8a:	239f      	movs	r3, #159	; 0x9f
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	781b      	ldrb	r3, [r3, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d152      	bne.n	3e3a <atcab_read_zone+0x1d6>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3d94:	239c      	movs	r3, #156	; 0x9c
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	881b      	ldrh	r3, [r3, #0]
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b35      	ldr	r3, [pc, #212]	; (3e74 <atcab_read_zone+0x210>)
    3d9e:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    3da0:	4b32      	ldr	r3, [pc, #200]	; (3e6c <atcab_read_zone+0x208>)
    3da2:	6818      	ldr	r0, [r3, #0]
    3da4:	239f      	movs	r3, #159	; 0x9f
    3da6:	18fc      	adds	r4, r7, r3
    3da8:	2310      	movs	r3, #16
    3daa:	18fb      	adds	r3, r7, r3
    3dac:	338a      	adds	r3, #138	; 0x8a
    3dae:	001a      	movs	r2, r3
    3db0:	2310      	movs	r3, #16
    3db2:	18fb      	adds	r3, r7, r3
    3db4:	3306      	adds	r3, #6
    3db6:	0019      	movs	r1, r3
    3db8:	4b2f      	ldr	r3, [pc, #188]	; (3e78 <atcab_read_zone+0x214>)
    3dba:	4798      	blx	r3
    3dbc:	0003      	movs	r3, r0
    3dbe:	7023      	strb	r3, [r4, #0]
    3dc0:	239f      	movs	r3, #159	; 0x9f
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d139      	bne.n	3e3e <atcab_read_zone+0x1da>
            break;

        // Check response size
        if (packet.rxsize < 4)
    3dca:	2310      	movs	r3, #16
    3dcc:	18fb      	adds	r3, r7, r3
    3dce:	228a      	movs	r2, #138	; 0x8a
    3dd0:	5a9b      	ldrh	r3, [r3, r2]
    3dd2:	2b03      	cmp	r3, #3
    3dd4:	d80f      	bhi.n	3df6 <atcab_read_zone+0x192>
        {
            if (packet.rxsize > 0)
    3dd6:	2310      	movs	r3, #16
    3dd8:	18fb      	adds	r3, r7, r3
    3dda:	228a      	movs	r2, #138	; 0x8a
    3ddc:	5a9b      	ldrh	r3, [r3, r2]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d004      	beq.n	3dec <atcab_read_zone+0x188>
                status = ATCA_RX_FAIL;
    3de2:	239f      	movs	r3, #159	; 0x9f
    3de4:	18fb      	adds	r3, r7, r3
    3de6:	22e6      	movs	r2, #230	; 0xe6
    3de8:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3dea:	e02b      	b.n	3e44 <atcab_read_zone+0x1e0>
                status = ATCA_RX_NO_RESPONSE;
    3dec:	239f      	movs	r3, #159	; 0x9f
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	22e7      	movs	r2, #231	; 0xe7
    3df2:	701a      	strb	r2, [r3, #0]
            break;
    3df4:	e026      	b.n	3e44 <atcab_read_zone+0x1e0>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3df6:	239f      	movs	r3, #159	; 0x9f
    3df8:	18fc      	adds	r4, r7, r3
    3dfa:	2310      	movs	r3, #16
    3dfc:	18fb      	adds	r3, r7, r3
    3dfe:	3306      	adds	r3, #6
    3e00:	0018      	movs	r0, r3
    3e02:	4b1e      	ldr	r3, [pc, #120]	; (3e7c <atcab_read_zone+0x218>)
    3e04:	4798      	blx	r3
    3e06:	0003      	movs	r3, r0
    3e08:	7023      	strb	r3, [r4, #0]
    3e0a:	239f      	movs	r3, #159	; 0x9f
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d116      	bne.n	3e42 <atcab_read_zone+0x1de>
            break;

        memcpy(data, &packet.data[1], len);
    3e14:	23b4      	movs	r3, #180	; 0xb4
    3e16:	18fb      	adds	r3, r7, r3
    3e18:	781a      	ldrb	r2, [r3, #0]
    3e1a:	2310      	movs	r3, #16
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	1dd9      	adds	r1, r3, #7
    3e20:	23b0      	movs	r3, #176	; 0xb0
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	0018      	movs	r0, r3
    3e28:	4b15      	ldr	r3, [pc, #84]	; (3e80 <atcab_read_zone+0x21c>)
    3e2a:	4798      	blx	r3
    3e2c:	e00a      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	e008      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	e006      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	e004      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	e002      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	e000      	b.n	3e44 <atcab_read_zone+0x1e0>
            break;
    3e42:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    3e44:	4b0f      	ldr	r3, [pc, #60]	; (3e84 <atcab_read_zone+0x220>)
    3e46:	4798      	blx	r3
    return status;
    3e48:	239f      	movs	r3, #159	; 0x9f
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
}
    3e4e:	0018      	movs	r0, r3
    3e50:	46bd      	mov	sp, r7
    3e52:	b028      	add	sp, #160	; 0xa0
    3e54:	bdb0      	pop	{r4, r5, r7, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	00003ad5 	.word	0x00003ad5
    3e5c:	2000022c 	.word	0x2000022c
    3e60:	00002bd1 	.word	0x00002bd1
    3e64:	00002cbd 	.word	0x00002cbd
    3e68:	000032cd 	.word	0x000032cd
    3e6c:	20000230 	.word	0x20000230
    3e70:	000030a1 	.word	0x000030a1
    3e74:	000056c9 	.word	0x000056c9
    3e78:	000030c3 	.word	0x000030c3
    3e7c:	00002e7d 	.word	0x00002e7d
    3e80:	00009d1b 	.word	0x00009d1b
    3e84:	0000335d 	.word	0x0000335d

00003e88 <atcab_sign_base>:
 *                          curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    3e88:	b590      	push	{r4, r7, lr}
    3e8a:	b0a7      	sub	sp, #156	; 0x9c
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	603a      	str	r2, [r7, #0]
    3e90:	1dfb      	adds	r3, r7, #7
    3e92:	1c02      	adds	r2, r0, #0
    3e94:	701a      	strb	r2, [r3, #0]
    3e96:	1d3b      	adds	r3, r7, #4
    3e98:	1c0a      	adds	r2, r1, #0
    3e9a:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3e9c:	2397      	movs	r3, #151	; 0x97
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	22e1      	movs	r2, #225	; 0xe1
    3ea2:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    3ea4:	2394      	movs	r3, #148	; 0x94
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	2200      	movs	r2, #0
    3eaa:	801a      	strh	r2, [r3, #0]

    if (signature == NULL)
    3eac:	683b      	ldr	r3, [r7, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d101      	bne.n	3eb6 <atcab_sign_base+0x2e>
        return ATCA_BAD_PARAM;
    3eb2:	23e2      	movs	r3, #226	; 0xe2
    3eb4:	e0a8      	b.n	4008 <atcab_sign_base+0x180>

    if (!_gDevice)
    3eb6:	4b56      	ldr	r3, [pc, #344]	; (4010 <atcab_sign_base+0x188>)
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d101      	bne.n	3ec2 <atcab_sign_base+0x3a>
        return ATCA_GEN_FAIL;
    3ebe:	23e1      	movs	r3, #225	; 0xe1
    3ec0:	e0a2      	b.n	4008 <atcab_sign_base+0x180>

    do
    {
        // Build sign command
        packet.param1 = mode;
    3ec2:	2308      	movs	r3, #8
    3ec4:	18fb      	adds	r3, r7, r3
    3ec6:	1dfa      	adds	r2, r7, #7
    3ec8:	7812      	ldrb	r2, [r2, #0]
    3eca:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    3ecc:	2308      	movs	r3, #8
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	1d3a      	adds	r2, r7, #4
    3ed2:	8812      	ldrh	r2, [r2, #0]
    3ed4:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3ed6:	4b4f      	ldr	r3, [pc, #316]	; (4014 <atcab_sign_base+0x18c>)
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	2297      	movs	r2, #151	; 0x97
    3edc:	18bc      	adds	r4, r7, r2
    3ede:	2208      	movs	r2, #8
    3ee0:	18ba      	adds	r2, r7, r2
    3ee2:	0011      	movs	r1, r2
    3ee4:	0018      	movs	r0, r3
    3ee6:	4b4c      	ldr	r3, [pc, #304]	; (4018 <atcab_sign_base+0x190>)
    3ee8:	4798      	blx	r3
    3eea:	0003      	movs	r3, r0
    3eec:	7023      	strb	r3, [r4, #0]
    3eee:	2397      	movs	r3, #151	; 0x97
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d000      	beq.n	3efa <atcab_sign_base+0x72>
    3ef8:	e078      	b.n	3fec <atcab_sign_base+0x164>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_SIGN);
    3efa:	4b46      	ldr	r3, [pc, #280]	; (4014 <atcab_sign_base+0x18c>)
    3efc:	681b      	ldr	r3, [r3, #0]
    3efe:	2294      	movs	r2, #148	; 0x94
    3f00:	18bc      	adds	r4, r7, r2
    3f02:	2111      	movs	r1, #17
    3f04:	0018      	movs	r0, r3
    3f06:	4b45      	ldr	r3, [pc, #276]	; (401c <atcab_sign_base+0x194>)
    3f08:	4798      	blx	r3
    3f0a:	0003      	movs	r3, r0
    3f0c:	8023      	strh	r3, [r4, #0]

        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    3f0e:	4b44      	ldr	r3, [pc, #272]	; (4020 <atcab_sign_base+0x198>)
    3f10:	4798      	blx	r3
    3f12:	0003      	movs	r3, r0
    3f14:	001a      	movs	r2, r3
    3f16:	2397      	movs	r3, #151	; 0x97
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	781b      	ldrb	r3, [r3, #0]
    3f1c:	4293      	cmp	r3, r2
    3f1e:	d167      	bne.n	3ff0 <atcab_sign_base+0x168>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3f20:	4b40      	ldr	r3, [pc, #256]	; (4024 <atcab_sign_base+0x19c>)
    3f22:	6818      	ldr	r0, [r3, #0]
    3f24:	2308      	movs	r3, #8
    3f26:	18fb      	adds	r3, r7, r3
    3f28:	785b      	ldrb	r3, [r3, #1]
    3f2a:	001a      	movs	r2, r3
    3f2c:	2397      	movs	r3, #151	; 0x97
    3f2e:	18fc      	adds	r4, r7, r3
    3f30:	2308      	movs	r3, #8
    3f32:	18fb      	adds	r3, r7, r3
    3f34:	0019      	movs	r1, r3
    3f36:	4b3c      	ldr	r3, [pc, #240]	; (4028 <atcab_sign_base+0x1a0>)
    3f38:	4798      	blx	r3
    3f3a:	0003      	movs	r3, r0
    3f3c:	7023      	strb	r3, [r4, #0]
    3f3e:	2397      	movs	r3, #151	; 0x97
    3f40:	18fb      	adds	r3, r7, r3
    3f42:	781b      	ldrb	r3, [r3, #0]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d155      	bne.n	3ff4 <atcab_sign_base+0x16c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3f48:	2394      	movs	r3, #148	; 0x94
    3f4a:	18fb      	adds	r3, r7, r3
    3f4c:	881b      	ldrh	r3, [r3, #0]
    3f4e:	0018      	movs	r0, r3
    3f50:	4b36      	ldr	r3, [pc, #216]	; (402c <atcab_sign_base+0x1a4>)
    3f52:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    3f54:	4b33      	ldr	r3, [pc, #204]	; (4024 <atcab_sign_base+0x19c>)
    3f56:	6818      	ldr	r0, [r3, #0]
    3f58:	2397      	movs	r3, #151	; 0x97
    3f5a:	18fc      	adds	r4, r7, r3
    3f5c:	2308      	movs	r3, #8
    3f5e:	18fb      	adds	r3, r7, r3
    3f60:	338a      	adds	r3, #138	; 0x8a
    3f62:	001a      	movs	r2, r3
    3f64:	2308      	movs	r3, #8
    3f66:	18fb      	adds	r3, r7, r3
    3f68:	3306      	adds	r3, #6
    3f6a:	0019      	movs	r1, r3
    3f6c:	4b30      	ldr	r3, [pc, #192]	; (4030 <atcab_sign_base+0x1a8>)
    3f6e:	4798      	blx	r3
    3f70:	0003      	movs	r3, r0
    3f72:	7023      	strb	r3, [r4, #0]
    3f74:	2397      	movs	r3, #151	; 0x97
    3f76:	18fb      	adds	r3, r7, r3
    3f78:	781b      	ldrb	r3, [r3, #0]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d13c      	bne.n	3ff8 <atcab_sign_base+0x170>
            break;

        // Check response size
        if (packet.rxsize < 4)
    3f7e:	2308      	movs	r3, #8
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	228a      	movs	r2, #138	; 0x8a
    3f84:	5a9b      	ldrh	r3, [r3, r2]
    3f86:	2b03      	cmp	r3, #3
    3f88:	d80f      	bhi.n	3faa <atcab_sign_base+0x122>
        {
            if (packet.rxsize > 0)
    3f8a:	2308      	movs	r3, #8
    3f8c:	18fb      	adds	r3, r7, r3
    3f8e:	228a      	movs	r2, #138	; 0x8a
    3f90:	5a9b      	ldrh	r3, [r3, r2]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d004      	beq.n	3fa0 <atcab_sign_base+0x118>
                status = ATCA_RX_FAIL;
    3f96:	2397      	movs	r3, #151	; 0x97
    3f98:	18fb      	adds	r3, r7, r3
    3f9a:	22e6      	movs	r2, #230	; 0xe6
    3f9c:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3f9e:	e02e      	b.n	3ffe <atcab_sign_base+0x176>
                status = ATCA_RX_NO_RESPONSE;
    3fa0:	2397      	movs	r3, #151	; 0x97
    3fa2:	18fb      	adds	r3, r7, r3
    3fa4:	22e7      	movs	r2, #231	; 0xe7
    3fa6:	701a      	strb	r2, [r3, #0]
            break;
    3fa8:	e029      	b.n	3ffe <atcab_sign_base+0x176>
        }

        // check for response
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3faa:	2397      	movs	r3, #151	; 0x97
    3fac:	18fc      	adds	r4, r7, r3
    3fae:	2308      	movs	r3, #8
    3fb0:	18fb      	adds	r3, r7, r3
    3fb2:	3306      	adds	r3, #6
    3fb4:	0018      	movs	r0, r3
    3fb6:	4b1f      	ldr	r3, [pc, #124]	; (4034 <atcab_sign_base+0x1ac>)
    3fb8:	4798      	blx	r3
    3fba:	0003      	movs	r3, r0
    3fbc:	7023      	strb	r3, [r4, #0]
    3fbe:	2397      	movs	r3, #151	; 0x97
    3fc0:	18fb      	adds	r3, r7, r3
    3fc2:	781b      	ldrb	r3, [r3, #0]
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d119      	bne.n	3ffc <atcab_sign_base+0x174>
            break;

        if (packet.data[ATCA_COUNT_IDX] > 4)
    3fc8:	2308      	movs	r3, #8
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	799b      	ldrb	r3, [r3, #6]
    3fce:	2b04      	cmp	r3, #4
    3fd0:	d915      	bls.n	3ffe <atcab_sign_base+0x176>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    3fd2:	2308      	movs	r3, #8
    3fd4:	18fb      	adds	r3, r7, r3
    3fd6:	799b      	ldrb	r3, [r3, #6]
    3fd8:	3b03      	subs	r3, #3
    3fda:	001a      	movs	r2, r3
    3fdc:	2308      	movs	r3, #8
    3fde:	18fb      	adds	r3, r7, r3
    3fe0:	1dd9      	adds	r1, r3, #7
    3fe2:	683b      	ldr	r3, [r7, #0]
    3fe4:	0018      	movs	r0, r3
    3fe6:	4b14      	ldr	r3, [pc, #80]	; (4038 <atcab_sign_base+0x1b0>)
    3fe8:	4798      	blx	r3
    3fea:	e008      	b.n	3ffe <atcab_sign_base+0x176>
            break;
    3fec:	46c0      	nop			; (mov r8, r8)
    3fee:	e006      	b.n	3ffe <atcab_sign_base+0x176>
            break;
    3ff0:	46c0      	nop			; (mov r8, r8)
    3ff2:	e004      	b.n	3ffe <atcab_sign_base+0x176>
            break;
    3ff4:	46c0      	nop			; (mov r8, r8)
    3ff6:	e002      	b.n	3ffe <atcab_sign_base+0x176>
            break;
    3ff8:	46c0      	nop			; (mov r8, r8)
    3ffa:	e000      	b.n	3ffe <atcab_sign_base+0x176>
            break;
    3ffc:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    3ffe:	4b0f      	ldr	r3, [pc, #60]	; (403c <atcab_sign_base+0x1b4>)
    4000:	4798      	blx	r3
    return status;
    4002:	2397      	movs	r3, #151	; 0x97
    4004:	18fb      	adds	r3, r7, r3
    4006:	781b      	ldrb	r3, [r3, #0]
}
    4008:	0018      	movs	r0, r3
    400a:	46bd      	mov	sp, r7
    400c:	b027      	add	sp, #156	; 0x9c
    400e:	bd90      	pop	{r4, r7, pc}
    4010:	20000228 	.word	0x20000228
    4014:	2000022c 	.word	0x2000022c
    4018:	00002c19 	.word	0x00002c19
    401c:	00002cbd 	.word	0x00002cbd
    4020:	000032cd 	.word	0x000032cd
    4024:	20000230 	.word	0x20000230
    4028:	000030a1 	.word	0x000030a1
    402c:	000056c9 	.word	0x000056c9
    4030:	000030c3 	.word	0x000030c3
    4034:	00002e7d 	.word	0x00002e7d
    4038:	00009d1b 	.word	0x00009d1b
    403c:	0000335d 	.word	0x0000335d

00004040 <atcab_sign>:
 *                           curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    4040:	b590      	push	{r4, r7, lr}
    4042:	b087      	sub	sp, #28
    4044:	af00      	add	r7, sp, #0
    4046:	60b9      	str	r1, [r7, #8]
    4048:	607a      	str	r2, [r7, #4]
    404a:	230e      	movs	r3, #14
    404c:	18fb      	adds	r3, r7, r3
    404e:	1c02      	adds	r2, r0, #0
    4050:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4052:	2317      	movs	r3, #23
    4054:	18fb      	adds	r3, r7, r3
    4056:	22e1      	movs	r2, #225	; 0xe1
    4058:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ( (status = atcab_random(NULL)) != ATCA_SUCCESS)
    405a:	2317      	movs	r3, #23
    405c:	18fc      	adds	r4, r7, r3
    405e:	2000      	movs	r0, #0
    4060:	4b16      	ldr	r3, [pc, #88]	; (40bc <atcab_sign+0x7c>)
    4062:	4798      	blx	r3
    4064:	0003      	movs	r3, r0
    4066:	7023      	strb	r3, [r4, #0]
    4068:	2317      	movs	r3, #23
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d119      	bne.n	40a6 <atcab_sign+0x66>
            break;
        // Load message into TempKey
        if ( (status = atcab_challenge(msg)) != ATCA_SUCCESS)
    4072:	2317      	movs	r3, #23
    4074:	18fc      	adds	r4, r7, r3
    4076:	68bb      	ldr	r3, [r7, #8]
    4078:	0018      	movs	r0, r3
    407a:	4b11      	ldr	r3, [pc, #68]	; (40c0 <atcab_sign+0x80>)
    407c:	4798      	blx	r3
    407e:	0003      	movs	r3, r0
    4080:	7023      	strb	r3, [r4, #0]
    4082:	2317      	movs	r3, #23
    4084:	18fb      	adds	r3, r7, r3
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	2b00      	cmp	r3, #0
    408a:	d10e      	bne.n	40aa <atcab_sign+0x6a>
            break;
        // Sign the message
        if ( (status = atcab_sign_base(SIGN_MODE_EXTERNAL, key_id, signature)) != ATCA_SUCCESS)
    408c:	2317      	movs	r3, #23
    408e:	18fc      	adds	r4, r7, r3
    4090:	687a      	ldr	r2, [r7, #4]
    4092:	230e      	movs	r3, #14
    4094:	18fb      	adds	r3, r7, r3
    4096:	881b      	ldrh	r3, [r3, #0]
    4098:	0019      	movs	r1, r3
    409a:	2080      	movs	r0, #128	; 0x80
    409c:	4b09      	ldr	r3, [pc, #36]	; (40c4 <atcab_sign+0x84>)
    409e:	4798      	blx	r3
    40a0:	0003      	movs	r3, r0
    40a2:	7023      	strb	r3, [r4, #0]
    40a4:	e002      	b.n	40ac <atcab_sign+0x6c>
            break;
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	e000      	b.n	40ac <atcab_sign+0x6c>
            break;
    40aa:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    return status;
    40ac:	2317      	movs	r3, #23
    40ae:	18fb      	adds	r3, r7, r3
    40b0:	781b      	ldrb	r3, [r3, #0]
}
    40b2:	0018      	movs	r0, r3
    40b4:	46bd      	mov	sp, r7
    40b6:	b007      	add	sp, #28
    40b8:	bd90      	pop	{r4, r7, pc}
    40ba:	46c0      	nop			; (mov r8, r8)
    40bc:	00003515 	.word	0x00003515
    40c0:	000038d9 	.word	0x000038d9
    40c4:	00003e89 	.word	0x00003e89

000040c8 <atcab_get_pubkey>:
 *  \param[in] key_id ID of the private key slot
 *  \param[out] public_key - pointer to space receiving the contents of the public key that was generated
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
    40c8:	b590      	push	{r4, r7, lr}
    40ca:	b083      	sub	sp, #12
    40cc:	af00      	add	r7, sp, #0
    40ce:	0002      	movs	r2, r0
    40d0:	6039      	str	r1, [r7, #0]
    40d2:	1dbb      	adds	r3, r7, #6
    40d4:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
    40d6:	683a      	ldr	r2, [r7, #0]
    40d8:	1dbb      	adds	r3, r7, #6
    40da:	8819      	ldrh	r1, [r3, #0]
    40dc:	0013      	movs	r3, r2
    40de:	2200      	movs	r2, #0
    40e0:	2000      	movs	r0, #0
    40e2:	4c03      	ldr	r4, [pc, #12]	; (40f0 <atcab_get_pubkey+0x28>)
    40e4:	47a0      	blx	r4
    40e6:	0003      	movs	r3, r0
}
    40e8:	0018      	movs	r0, r3
    40ea:	46bd      	mov	sp, r7
    40ec:	b003      	add	sp, #12
    40ee:	bd90      	pop	{r4, r7, pc}
    40f0:	000036d5 	.word	0x000036d5

000040f4 <atcab_read_pubkey>:
 *  \param[in] slot8toF - slot number to read, expected value is 0x8 through 0xF
 *  \param[out] pubkey - space to receive read pubkey
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_pubkey(uint16_t slot8toF, uint8_t *pubkey)
{
    40f4:	b5b0      	push	{r4, r5, r7, lr}
    40f6:	b08e      	sub	sp, #56	; 0x38
    40f8:	af02      	add	r7, sp, #8
    40fa:	0002      	movs	r2, r0
    40fc:	6039      	str	r1, [r7, #0]
    40fe:	1dbb      	adds	r3, r7, #6
    4100:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    4102:	232f      	movs	r3, #47	; 0x2f
    4104:	18fb      	adds	r3, r7, r3
    4106:	22e1      	movs	r2, #225	; 0xe1
    4108:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];
    uint8_t block = 0;
    410a:	232e      	movs	r3, #46	; 0x2e
    410c:	18fb      	adds	r3, r7, r3
    410e:	2200      	movs	r2, #0
    4110:	701a      	strb	r2, [r3, #0]
    uint8_t offset = 0;
    4112:	232d      	movs	r3, #45	; 0x2d
    4114:	18fb      	adds	r3, r7, r3
    4116:	2200      	movs	r2, #0
    4118:	701a      	strb	r2, [r3, #0]
    uint8_t cpyIndex = 0;
    411a:	232c      	movs	r3, #44	; 0x2c
    411c:	18fb      	adds	r3, r7, r3
    411e:	2200      	movs	r2, #0
    4120:	701a      	strb	r2, [r3, #0]
    uint8_t cpySize = 0;
    4122:	232b      	movs	r3, #43	; 0x2b
    4124:	18fb      	adds	r3, r7, r3
    4126:	2200      	movs	r2, #0
    4128:	701a      	strb	r2, [r3, #0]
    uint8_t readIndex = 0;
    412a:	232a      	movs	r3, #42	; 0x2a
    412c:	18fb      	adds	r3, r7, r3
    412e:	2200      	movs	r2, #0
    4130:	701a      	strb	r2, [r3, #0]

    // Check the pointers
    if (pubkey == NULL)
    4132:	683b      	ldr	r3, [r7, #0]
    4134:	2b00      	cmp	r3, #0
    4136:	d101      	bne.n	413c <atcab_read_pubkey+0x48>
        return ATCA_BAD_PARAM;
    4138:	23e2      	movs	r3, #226	; 0xe2
    413a:	e0f4      	b.n	4326 <atcab_read_pubkey+0x232>
    // Check the value of the slot
    if (slot8toF < 8 || slot8toF > 0xF)
    413c:	1dbb      	adds	r3, r7, #6
    413e:	881b      	ldrh	r3, [r3, #0]
    4140:	2b07      	cmp	r3, #7
    4142:	d903      	bls.n	414c <atcab_read_pubkey+0x58>
    4144:	1dbb      	adds	r3, r7, #6
    4146:	881b      	ldrh	r3, [r3, #0]
    4148:	2b0f      	cmp	r3, #15
    414a:	d901      	bls.n	4150 <atcab_read_pubkey+0x5c>
        return ATCA_BAD_PARAM;
    414c:	23e2      	movs	r3, #226	; 0xe2
    414e:	e0ea      	b.n	4326 <atcab_read_pubkey+0x232>
        // The 64 byte P256 public key gets written to a 72 byte slot in the following pattern
        // | Block 1                     | Block 2                                      | Block 3       |
        // | Pad: 4 Bytes | PubKey[0:27] | PubKey[28:31] | Pad: 4 Bytes | PubKey[32:55] | PubKey[56:63] |

        // Read the block
        block = 0;
    4150:	232e      	movs	r3, #46	; 0x2e
    4152:	18fb      	adds	r3, r7, r3
    4154:	2200      	movs	r2, #0
    4156:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    4158:	232f      	movs	r3, #47	; 0x2f
    415a:	18fc      	adds	r4, r7, r3
    415c:	232d      	movs	r3, #45	; 0x2d
    415e:	18fb      	adds	r3, r7, r3
    4160:	7818      	ldrb	r0, [r3, #0]
    4162:	232e      	movs	r3, #46	; 0x2e
    4164:	18fb      	adds	r3, r7, r3
    4166:	781a      	ldrb	r2, [r3, #0]
    4168:	1dbb      	adds	r3, r7, #6
    416a:	8819      	ldrh	r1, [r3, #0]
    416c:	2320      	movs	r3, #32
    416e:	9301      	str	r3, [sp, #4]
    4170:	2308      	movs	r3, #8
    4172:	18fb      	adds	r3, r7, r3
    4174:	9300      	str	r3, [sp, #0]
    4176:	0003      	movs	r3, r0
    4178:	2002      	movs	r0, #2
    417a:	4d6d      	ldr	r5, [pc, #436]	; (4330 <atcab_read_pubkey+0x23c>)
    417c:	47a8      	blx	r5
    417e:	0003      	movs	r3, r0
    4180:	7023      	strb	r3, [r4, #0]
    4182:	232f      	movs	r3, #47	; 0x2f
    4184:	18fb      	adds	r3, r7, r3
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	2b00      	cmp	r3, #0
    418a:	d000      	beq.n	418e <atcab_read_pubkey+0x9a>
    418c:	e0c3      	b.n	4316 <atcab_read_pubkey+0x222>
            break;

        // Copy.  Account for 4 byte pad
        cpySize = ATCA_BLOCK_SIZE - ATCA_PUB_KEY_PAD;
    418e:	232b      	movs	r3, #43	; 0x2b
    4190:	18fb      	adds	r3, r7, r3
    4192:	221c      	movs	r2, #28
    4194:	701a      	strb	r2, [r3, #0]
        readIndex = ATCA_PUB_KEY_PAD;
    4196:	232a      	movs	r3, #42	; 0x2a
    4198:	18fb      	adds	r3, r7, r3
    419a:	2204      	movs	r2, #4
    419c:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    419e:	232c      	movs	r3, #44	; 0x2c
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	781b      	ldrb	r3, [r3, #0]
    41a4:	683a      	ldr	r2, [r7, #0]
    41a6:	18d0      	adds	r0, r2, r3
    41a8:	232a      	movs	r3, #42	; 0x2a
    41aa:	18fb      	adds	r3, r7, r3
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2208      	movs	r2, #8
    41b0:	18ba      	adds	r2, r7, r2
    41b2:	18d1      	adds	r1, r2, r3
    41b4:	232b      	movs	r3, #43	; 0x2b
    41b6:	18fb      	adds	r3, r7, r3
    41b8:	781b      	ldrb	r3, [r3, #0]
    41ba:	001a      	movs	r2, r3
    41bc:	4b5d      	ldr	r3, [pc, #372]	; (4334 <atcab_read_pubkey+0x240>)
    41be:	4798      	blx	r3
        cpyIndex += cpySize;
    41c0:	232c      	movs	r3, #44	; 0x2c
    41c2:	18fb      	adds	r3, r7, r3
    41c4:	222c      	movs	r2, #44	; 0x2c
    41c6:	18b9      	adds	r1, r7, r2
    41c8:	222b      	movs	r2, #43	; 0x2b
    41ca:	18ba      	adds	r2, r7, r2
    41cc:	7809      	ldrb	r1, [r1, #0]
    41ce:	7812      	ldrb	r2, [r2, #0]
    41d0:	188a      	adds	r2, r1, r2
    41d2:	701a      	strb	r2, [r3, #0]

        // Read the next block
        block = 1;
    41d4:	232e      	movs	r3, #46	; 0x2e
    41d6:	18fb      	adds	r3, r7, r3
    41d8:	2201      	movs	r2, #1
    41da:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    41dc:	232f      	movs	r3, #47	; 0x2f
    41de:	18fc      	adds	r4, r7, r3
    41e0:	232d      	movs	r3, #45	; 0x2d
    41e2:	18fb      	adds	r3, r7, r3
    41e4:	7818      	ldrb	r0, [r3, #0]
    41e6:	232e      	movs	r3, #46	; 0x2e
    41e8:	18fb      	adds	r3, r7, r3
    41ea:	781a      	ldrb	r2, [r3, #0]
    41ec:	1dbb      	adds	r3, r7, #6
    41ee:	8819      	ldrh	r1, [r3, #0]
    41f0:	2320      	movs	r3, #32
    41f2:	9301      	str	r3, [sp, #4]
    41f4:	2308      	movs	r3, #8
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	9300      	str	r3, [sp, #0]
    41fa:	0003      	movs	r3, r0
    41fc:	2002      	movs	r0, #2
    41fe:	4d4c      	ldr	r5, [pc, #304]	; (4330 <atcab_read_pubkey+0x23c>)
    4200:	47a8      	blx	r5
    4202:	0003      	movs	r3, r0
    4204:	7023      	strb	r3, [r4, #0]
    4206:	232f      	movs	r3, #47	; 0x2f
    4208:	18fb      	adds	r3, r7, r3
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	2b00      	cmp	r3, #0
    420e:	d000      	beq.n	4212 <atcab_read_pubkey+0x11e>
    4210:	e083      	b.n	431a <atcab_read_pubkey+0x226>
            break;

        // Copy.  First four bytes
        cpySize = ATCA_PUB_KEY_PAD;
    4212:	232b      	movs	r3, #43	; 0x2b
    4214:	18fb      	adds	r3, r7, r3
    4216:	2204      	movs	r2, #4
    4218:	701a      	strb	r2, [r3, #0]
        readIndex = 0;
    421a:	232a      	movs	r3, #42	; 0x2a
    421c:	18fb      	adds	r3, r7, r3
    421e:	2200      	movs	r2, #0
    4220:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4222:	232c      	movs	r3, #44	; 0x2c
    4224:	18fb      	adds	r3, r7, r3
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	683a      	ldr	r2, [r7, #0]
    422a:	18d0      	adds	r0, r2, r3
    422c:	232a      	movs	r3, #42	; 0x2a
    422e:	18fb      	adds	r3, r7, r3
    4230:	781b      	ldrb	r3, [r3, #0]
    4232:	2208      	movs	r2, #8
    4234:	18ba      	adds	r2, r7, r2
    4236:	18d1      	adds	r1, r2, r3
    4238:	232b      	movs	r3, #43	; 0x2b
    423a:	18fb      	adds	r3, r7, r3
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	001a      	movs	r2, r3
    4240:	4b3c      	ldr	r3, [pc, #240]	; (4334 <atcab_read_pubkey+0x240>)
    4242:	4798      	blx	r3
        cpyIndex += cpySize;
    4244:	232c      	movs	r3, #44	; 0x2c
    4246:	18fb      	adds	r3, r7, r3
    4248:	222c      	movs	r2, #44	; 0x2c
    424a:	18b9      	adds	r1, r7, r2
    424c:	222b      	movs	r2, #43	; 0x2b
    424e:	18ba      	adds	r2, r7, r2
    4250:	7809      	ldrb	r1, [r1, #0]
    4252:	7812      	ldrb	r2, [r2, #0]
    4254:	188a      	adds	r2, r1, r2
    4256:	701a      	strb	r2, [r3, #0]
        // Copy.  Skip four bytes
        readIndex = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
    4258:	232a      	movs	r3, #42	; 0x2a
    425a:	18fb      	adds	r3, r7, r3
    425c:	2208      	movs	r2, #8
    425e:	701a      	strb	r2, [r3, #0]
        cpySize = ATCA_BLOCK_SIZE - readIndex;
    4260:	232b      	movs	r3, #43	; 0x2b
    4262:	18fb      	adds	r3, r7, r3
    4264:	222a      	movs	r2, #42	; 0x2a
    4266:	18ba      	adds	r2, r7, r2
    4268:	7812      	ldrb	r2, [r2, #0]
    426a:	2120      	movs	r1, #32
    426c:	1a8a      	subs	r2, r1, r2
    426e:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4270:	232c      	movs	r3, #44	; 0x2c
    4272:	18fb      	adds	r3, r7, r3
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	683a      	ldr	r2, [r7, #0]
    4278:	18d0      	adds	r0, r2, r3
    427a:	232a      	movs	r3, #42	; 0x2a
    427c:	18fb      	adds	r3, r7, r3
    427e:	781b      	ldrb	r3, [r3, #0]
    4280:	2208      	movs	r2, #8
    4282:	18ba      	adds	r2, r7, r2
    4284:	18d1      	adds	r1, r2, r3
    4286:	232b      	movs	r3, #43	; 0x2b
    4288:	18fb      	adds	r3, r7, r3
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	001a      	movs	r2, r3
    428e:	4b29      	ldr	r3, [pc, #164]	; (4334 <atcab_read_pubkey+0x240>)
    4290:	4798      	blx	r3
        cpyIndex += cpySize;
    4292:	232c      	movs	r3, #44	; 0x2c
    4294:	18fb      	adds	r3, r7, r3
    4296:	222c      	movs	r2, #44	; 0x2c
    4298:	18b9      	adds	r1, r7, r2
    429a:	222b      	movs	r2, #43	; 0x2b
    429c:	18ba      	adds	r2, r7, r2
    429e:	7809      	ldrb	r1, [r1, #0]
    42a0:	7812      	ldrb	r2, [r2, #0]
    42a2:	188a      	adds	r2, r1, r2
    42a4:	701a      	strb	r2, [r3, #0]

        // Read the next block
        block = 2;
    42a6:	232e      	movs	r3, #46	; 0x2e
    42a8:	18fb      	adds	r3, r7, r3
    42aa:	2202      	movs	r2, #2
    42ac:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    42ae:	232f      	movs	r3, #47	; 0x2f
    42b0:	18fc      	adds	r4, r7, r3
    42b2:	232d      	movs	r3, #45	; 0x2d
    42b4:	18fb      	adds	r3, r7, r3
    42b6:	7818      	ldrb	r0, [r3, #0]
    42b8:	232e      	movs	r3, #46	; 0x2e
    42ba:	18fb      	adds	r3, r7, r3
    42bc:	781a      	ldrb	r2, [r3, #0]
    42be:	1dbb      	adds	r3, r7, #6
    42c0:	8819      	ldrh	r1, [r3, #0]
    42c2:	2320      	movs	r3, #32
    42c4:	9301      	str	r3, [sp, #4]
    42c6:	2308      	movs	r3, #8
    42c8:	18fb      	adds	r3, r7, r3
    42ca:	9300      	str	r3, [sp, #0]
    42cc:	0003      	movs	r3, r0
    42ce:	2002      	movs	r0, #2
    42d0:	4d17      	ldr	r5, [pc, #92]	; (4330 <atcab_read_pubkey+0x23c>)
    42d2:	47a8      	blx	r5
    42d4:	0003      	movs	r3, r0
    42d6:	7023      	strb	r3, [r4, #0]
    42d8:	232f      	movs	r3, #47	; 0x2f
    42da:	18fb      	adds	r3, r7, r3
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d11d      	bne.n	431e <atcab_read_pubkey+0x22a>
            break;

        // Copy.  The remaining 8 bytes
        cpySize = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
    42e2:	232b      	movs	r3, #43	; 0x2b
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	2208      	movs	r2, #8
    42e8:	701a      	strb	r2, [r3, #0]
        readIndex = 0;
    42ea:	232a      	movs	r3, #42	; 0x2a
    42ec:	18fb      	adds	r3, r7, r3
    42ee:	2200      	movs	r2, #0
    42f0:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    42f2:	232c      	movs	r3, #44	; 0x2c
    42f4:	18fb      	adds	r3, r7, r3
    42f6:	781b      	ldrb	r3, [r3, #0]
    42f8:	683a      	ldr	r2, [r7, #0]
    42fa:	18d0      	adds	r0, r2, r3
    42fc:	232a      	movs	r3, #42	; 0x2a
    42fe:	18fb      	adds	r3, r7, r3
    4300:	781b      	ldrb	r3, [r3, #0]
    4302:	2208      	movs	r2, #8
    4304:	18ba      	adds	r2, r7, r2
    4306:	18d1      	adds	r1, r2, r3
    4308:	232b      	movs	r3, #43	; 0x2b
    430a:	18fb      	adds	r3, r7, r3
    430c:	781b      	ldrb	r3, [r3, #0]
    430e:	001a      	movs	r2, r3
    4310:	4b08      	ldr	r3, [pc, #32]	; (4334 <atcab_read_pubkey+0x240>)
    4312:	4798      	blx	r3
    4314:	e004      	b.n	4320 <atcab_read_pubkey+0x22c>
            break;
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	e002      	b.n	4320 <atcab_read_pubkey+0x22c>
            break;
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	e000      	b.n	4320 <atcab_read_pubkey+0x22c>
            break;
    431e:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    return ret;
    4320:	232f      	movs	r3, #47	; 0x2f
    4322:	18fb      	adds	r3, r7, r3
    4324:	781b      	ldrb	r3, [r3, #0]
}
    4326:	0018      	movs	r0, r3
    4328:	46bd      	mov	sp, r7
    432a:	b00c      	add	sp, #48	; 0x30
    432c:	bdb0      	pop	{r4, r5, r7, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	00003c65 	.word	0x00003c65
    4334:	00009d1b 	.word	0x00009d1b

00004338 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_STATUS value
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
    4338:	b580      	push	{r7, lr}
    433a:	b082      	sub	sp, #8
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    sw_sha256_init((sw_sha256_ctx*)ctx);
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	0018      	movs	r0, r3
    4344:	4b03      	ldr	r3, [pc, #12]	; (4354 <atcac_sw_sha2_256_init+0x1c>)
    4346:	4798      	blx	r3

    return ATCA_SUCCESS;
    4348:	2300      	movs	r3, #0
}
    434a:	0018      	movs	r0, r3
    434c:	46bd      	mov	sp, r7
    434e:	b002      	add	sp, #8
    4350:	bd80      	pop	{r7, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	00004a49 	.word	0x00004a49

00004358 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_STATUS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
    4358:	b580      	push	{r7, lr}
    435a:	b084      	sub	sp, #16
    435c:	af00      	add	r7, sp, #0
    435e:	60f8      	str	r0, [r7, #12]
    4360:	60b9      	str	r1, [r7, #8]
    4362:	607a      	str	r2, [r7, #4]
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    4364:	687a      	ldr	r2, [r7, #4]
    4366:	68b9      	ldr	r1, [r7, #8]
    4368:	68fb      	ldr	r3, [r7, #12]
    436a:	0018      	movs	r0, r3
    436c:	4b03      	ldr	r3, [pc, #12]	; (437c <atcac_sw_sha2_256_update+0x24>)
    436e:	4798      	blx	r3

    return ATCA_SUCCESS;
    4370:	2300      	movs	r3, #0
}
    4372:	0018      	movs	r0, r3
    4374:	46bd      	mov	sp, r7
    4376:	b004      	add	sp, #16
    4378:	bd80      	pop	{r7, pc}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	00004a91 	.word	0x00004a91

00004380 <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256 has
 * \return ATCA_STATUS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    4380:	b580      	push	{r7, lr}
    4382:	b082      	sub	sp, #8
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
    4388:	6039      	str	r1, [r7, #0]
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    438a:	683a      	ldr	r2, [r7, #0]
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	0011      	movs	r1, r2
    4390:	0018      	movs	r0, r3
    4392:	4b03      	ldr	r3, [pc, #12]	; (43a0 <atcac_sw_sha2_256_finish+0x20>)
    4394:	4798      	blx	r3

    return ATCA_SUCCESS;
    4396:	2300      	movs	r3, #0
}
    4398:	0018      	movs	r0, r3
    439a:	46bd      	mov	sp, r7
    439c:	b002      	add	sp, #8
    439e:	bd80      	pop	{r7, pc}
    43a0:	00004b55 	.word	0x00004b55

000043a4 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_STATUS
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b0b6      	sub	sp, #216	; 0xd8
    43a8:	af00      	add	r7, sp, #0
    43aa:	60f8      	str	r0, [r7, #12]
    43ac:	60b9      	str	r1, [r7, #8]
    43ae:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha2_256_ctx ctx;

    ret = atcac_sw_sha2_256_init(&ctx);
    43b0:	2314      	movs	r3, #20
    43b2:	18fb      	adds	r3, r7, r3
    43b4:	0018      	movs	r0, r3
    43b6:	4b1e      	ldr	r3, [pc, #120]	; (4430 <atcac_sw_sha2_256+0x8c>)
    43b8:	4798      	blx	r3
    43ba:	0003      	movs	r3, r0
    43bc:	22d4      	movs	r2, #212	; 0xd4
    43be:	18ba      	adds	r2, r7, r2
    43c0:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    43c2:	23d4      	movs	r3, #212	; 0xd4
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d003      	beq.n	43d4 <atcac_sw_sha2_256+0x30>
        return ret;
    43cc:	23d4      	movs	r3, #212	; 0xd4
    43ce:	18fb      	adds	r3, r7, r3
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	e028      	b.n	4426 <atcac_sw_sha2_256+0x82>

    ret = atcac_sw_sha2_256_update(&ctx, data, data_size);
    43d4:	68ba      	ldr	r2, [r7, #8]
    43d6:	68f9      	ldr	r1, [r7, #12]
    43d8:	2314      	movs	r3, #20
    43da:	18fb      	adds	r3, r7, r3
    43dc:	0018      	movs	r0, r3
    43de:	4b15      	ldr	r3, [pc, #84]	; (4434 <atcac_sw_sha2_256+0x90>)
    43e0:	4798      	blx	r3
    43e2:	0003      	movs	r3, r0
    43e4:	22d4      	movs	r2, #212	; 0xd4
    43e6:	18ba      	adds	r2, r7, r2
    43e8:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    43ea:	23d4      	movs	r3, #212	; 0xd4
    43ec:	18fb      	adds	r3, r7, r3
    43ee:	681b      	ldr	r3, [r3, #0]
    43f0:	2b00      	cmp	r3, #0
    43f2:	d003      	beq.n	43fc <atcac_sw_sha2_256+0x58>
        return ret;
    43f4:	23d4      	movs	r3, #212	; 0xd4
    43f6:	18fb      	adds	r3, r7, r3
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	e014      	b.n	4426 <atcac_sw_sha2_256+0x82>

    ret = atcac_sw_sha2_256_finish(&ctx, digest);
    43fc:	687a      	ldr	r2, [r7, #4]
    43fe:	2314      	movs	r3, #20
    4400:	18fb      	adds	r3, r7, r3
    4402:	0011      	movs	r1, r2
    4404:	0018      	movs	r0, r3
    4406:	4b0c      	ldr	r3, [pc, #48]	; (4438 <atcac_sw_sha2_256+0x94>)
    4408:	4798      	blx	r3
    440a:	0003      	movs	r3, r0
    440c:	22d4      	movs	r2, #212	; 0xd4
    440e:	18ba      	adds	r2, r7, r2
    4410:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    4412:	23d4      	movs	r3, #212	; 0xd4
    4414:	18fb      	adds	r3, r7, r3
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	2b00      	cmp	r3, #0
    441a:	d003      	beq.n	4424 <atcac_sw_sha2_256+0x80>
        return ret;
    441c:	23d4      	movs	r3, #212	; 0xd4
    441e:	18fb      	adds	r3, r7, r3
    4420:	681b      	ldr	r3, [r3, #0]
    4422:	e000      	b.n	4426 <atcac_sw_sha2_256+0x82>

    return ATCA_SUCCESS;
    4424:	2300      	movs	r3, #0
    4426:	0018      	movs	r0, r3
    4428:	46bd      	mov	sp, r7
    442a:	b036      	add	sp, #216	; 0xd8
    442c:	bd80      	pop	{r7, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	00004339 	.word	0x00004339
    4434:	00004359 	.word	0x00004359
    4438:	00004381 	.word	0x00004381

0000443c <sw_sha256_process>:
 * \param[in] ctx          SAH256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    443c:	b580      	push	{r7, lr}
    443e:	b0d8      	sub	sp, #352	; 0x160
    4440:	af00      	add	r7, sp, #0
    4442:	60f8      	str	r0, [r7, #12]
    4444:	60b9      	str	r1, [r7, #8]
    4446:	607a      	str	r2, [r7, #4]
    int i = 0;
    4448:	2300      	movs	r3, #0
    444a:	22ae      	movs	r2, #174	; 0xae
    444c:	0052      	lsls	r2, r2, #1
    444e:	18ba      	adds	r2, r7, r2
    4450:	6013      	str	r3, [r2, #0]
    uint32_t block = 0;
    4452:	2300      	movs	r3, #0
    4454:	22ac      	movs	r2, #172	; 0xac
    4456:	0052      	lsls	r2, r2, #1
    4458:	18ba      	adds	r2, r7, r2
    445a:	6013      	str	r3, [r2, #0]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    445c:	2300      	movs	r3, #0
    445e:	22ac      	movs	r2, #172	; 0xac
    4460:	0052      	lsls	r2, r2, #1
    4462:	18ba      	adds	r2, r7, r2
    4464:	6013      	str	r3, [r2, #0]
    4466:	e2dd      	b.n	4a24 <sw_sha256_process+0x5e8>
        uint32_t word_value;
        uint32_t s0, s1;
        uint32_t t1, t2;
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];
    4468:	23ac      	movs	r3, #172	; 0xac
    446a:	005b      	lsls	r3, r3, #1
    446c:	18fb      	adds	r3, r7, r3
    446e:	681b      	ldr	r3, [r3, #0]
    4470:	019b      	lsls	r3, r3, #6
    4472:	68ba      	ldr	r2, [r7, #8]
    4474:	18d3      	adds	r3, r2, r3
    4476:	22a8      	movs	r2, #168	; 0xa8
    4478:	0052      	lsls	r2, r2, #1
    447a:	18ba      	adds	r2, r7, r2
    447c:	6013      	str	r3, [r2, #0]

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    447e:	2300      	movs	r3, #0
    4480:	22ae      	movs	r2, #174	; 0xae
    4482:	0052      	lsls	r2, r2, #1
    4484:	18ba      	adds	r2, r7, r2
    4486:	6013      	str	r3, [r2, #0]
    4488:	e063      	b.n	4552 <sw_sha256_process+0x116>
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    448a:	23ae      	movs	r3, #174	; 0xae
    448c:	005b      	lsls	r3, r3, #1
    448e:	18fb      	adds	r3, r7, r3
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	3303      	adds	r3, #3
    4494:	22ae      	movs	r2, #174	; 0xae
    4496:	0052      	lsls	r2, r2, #1
    4498:	18ba      	adds	r2, r7, r2
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	21a8      	movs	r1, #168	; 0xa8
    449e:	0049      	lsls	r1, r1, #1
    44a0:	1879      	adds	r1, r7, r1
    44a2:	6809      	ldr	r1, [r1, #0]
    44a4:	188a      	adds	r2, r1, r2
    44a6:	7811      	ldrb	r1, [r2, #0]
    44a8:	4a92      	ldr	r2, [pc, #584]	; (46f4 <sw_sha256_process+0x2b8>)
    44aa:	20b0      	movs	r0, #176	; 0xb0
    44ac:	0040      	lsls	r0, r0, #1
    44ae:	4684      	mov	ip, r0
    44b0:	44bc      	add	ip, r7
    44b2:	4462      	add	r2, ip
    44b4:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    44b6:	23ae      	movs	r3, #174	; 0xae
    44b8:	005b      	lsls	r3, r3, #1
    44ba:	18fb      	adds	r3, r7, r3
    44bc:	681b      	ldr	r3, [r3, #0]
    44be:	3302      	adds	r3, #2
    44c0:	22ae      	movs	r2, #174	; 0xae
    44c2:	0052      	lsls	r2, r2, #1
    44c4:	18ba      	adds	r2, r7, r2
    44c6:	6812      	ldr	r2, [r2, #0]
    44c8:	3201      	adds	r2, #1
    44ca:	21a8      	movs	r1, #168	; 0xa8
    44cc:	0049      	lsls	r1, r1, #1
    44ce:	1879      	adds	r1, r7, r1
    44d0:	6809      	ldr	r1, [r1, #0]
    44d2:	188a      	adds	r2, r1, r2
    44d4:	7811      	ldrb	r1, [r2, #0]
    44d6:	4a87      	ldr	r2, [pc, #540]	; (46f4 <sw_sha256_process+0x2b8>)
    44d8:	20b0      	movs	r0, #176	; 0xb0
    44da:	0040      	lsls	r0, r0, #1
    44dc:	4684      	mov	ip, r0
    44de:	44bc      	add	ip, r7
    44e0:	4462      	add	r2, ip
    44e2:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    44e4:	23ae      	movs	r3, #174	; 0xae
    44e6:	005b      	lsls	r3, r3, #1
    44e8:	18fb      	adds	r3, r7, r3
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	3301      	adds	r3, #1
    44ee:	22ae      	movs	r2, #174	; 0xae
    44f0:	0052      	lsls	r2, r2, #1
    44f2:	18ba      	adds	r2, r7, r2
    44f4:	6812      	ldr	r2, [r2, #0]
    44f6:	3202      	adds	r2, #2
    44f8:	21a8      	movs	r1, #168	; 0xa8
    44fa:	0049      	lsls	r1, r1, #1
    44fc:	1879      	adds	r1, r7, r1
    44fe:	6809      	ldr	r1, [r1, #0]
    4500:	188a      	adds	r2, r1, r2
    4502:	7811      	ldrb	r1, [r2, #0]
    4504:	4a7b      	ldr	r2, [pc, #492]	; (46f4 <sw_sha256_process+0x2b8>)
    4506:	20b0      	movs	r0, #176	; 0xb0
    4508:	0040      	lsls	r0, r0, #1
    450a:	4684      	mov	ip, r0
    450c:	44bc      	add	ip, r7
    450e:	4462      	add	r2, ip
    4510:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    4512:	23ae      	movs	r3, #174	; 0xae
    4514:	005b      	lsls	r3, r3, #1
    4516:	18fb      	adds	r3, r7, r3
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	3303      	adds	r3, #3
    451c:	22a8      	movs	r2, #168	; 0xa8
    451e:	0052      	lsls	r2, r2, #1
    4520:	18ba      	adds	r2, r7, r2
    4522:	6812      	ldr	r2, [r2, #0]
    4524:	18d3      	adds	r3, r2, r3
    4526:	7819      	ldrb	r1, [r3, #0]
    4528:	4b72      	ldr	r3, [pc, #456]	; (46f4 <sw_sha256_process+0x2b8>)
    452a:	22b0      	movs	r2, #176	; 0xb0
    452c:	0052      	lsls	r2, r2, #1
    452e:	18ba      	adds	r2, r7, r2
    4530:	18d2      	adds	r2, r2, r3
    4532:	23ae      	movs	r3, #174	; 0xae
    4534:	005b      	lsls	r3, r3, #1
    4536:	18fb      	adds	r3, r7, r3
    4538:	681b      	ldr	r3, [r3, #0]
    453a:	18d3      	adds	r3, r2, r3
    453c:	1c0a      	adds	r2, r1, #0
    453e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    4540:	23ae      	movs	r3, #174	; 0xae
    4542:	005b      	lsls	r3, r3, #1
    4544:	18fb      	adds	r3, r7, r3
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	3304      	adds	r3, #4
    454a:	22ae      	movs	r2, #174	; 0xae
    454c:	0052      	lsls	r2, r2, #1
    454e:	18ba      	adds	r2, r7, r2
    4550:	6013      	str	r3, [r2, #0]
    4552:	23ae      	movs	r3, #174	; 0xae
    4554:	005b      	lsls	r3, r3, #1
    4556:	18fb      	adds	r3, r7, r3
    4558:	681b      	ldr	r3, [r3, #0]
    455a:	2b3f      	cmp	r3, #63	; 0x3f
    455c:	dd95      	ble.n	448a <sw_sha256_process+0x4e>
        }

        w_index = 16;
    455e:	2310      	movs	r3, #16
    4560:	22aa      	movs	r2, #170	; 0xaa
    4562:	0052      	lsls	r2, r2, #1
    4564:	18ba      	adds	r2, r7, r2
    4566:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
    4568:	e08d      	b.n	4686 <sw_sha256_process+0x24a>
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
    456a:	23aa      	movs	r3, #170	; 0xaa
    456c:	005b      	lsls	r3, r3, #1
    456e:	18fb      	adds	r3, r7, r3
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	3b0f      	subs	r3, #15
    4574:	001a      	movs	r2, r3
    4576:	4b5f      	ldr	r3, [pc, #380]	; (46f4 <sw_sha256_process+0x2b8>)
    4578:	21b0      	movs	r1, #176	; 0xb0
    457a:	0049      	lsls	r1, r1, #1
    457c:	468c      	mov	ip, r1
    457e:	44bc      	add	ip, r7
    4580:	4463      	add	r3, ip
    4582:	0092      	lsls	r2, r2, #2
    4584:	58d3      	ldr	r3, [r2, r3]
    4586:	22a6      	movs	r2, #166	; 0xa6
    4588:	0052      	lsls	r2, r2, #1
    458a:	18ba      	adds	r2, r7, r2
    458c:	6013      	str	r3, [r2, #0]
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    458e:	23a6      	movs	r3, #166	; 0xa6
    4590:	005b      	lsls	r3, r3, #1
    4592:	18fb      	adds	r3, r7, r3
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	2207      	movs	r2, #7
    4598:	41d3      	rors	r3, r2
    459a:	001a      	movs	r2, r3
    459c:	23a6      	movs	r3, #166	; 0xa6
    459e:	005b      	lsls	r3, r3, #1
    45a0:	18fb      	adds	r3, r7, r3
    45a2:	681b      	ldr	r3, [r3, #0]
    45a4:	2112      	movs	r1, #18
    45a6:	41cb      	rors	r3, r1
    45a8:	405a      	eors	r2, r3
    45aa:	23a6      	movs	r3, #166	; 0xa6
    45ac:	005b      	lsls	r3, r3, #1
    45ae:	18fb      	adds	r3, r7, r3
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	08db      	lsrs	r3, r3, #3
    45b4:	4053      	eors	r3, r2
    45b6:	22a4      	movs	r2, #164	; 0xa4
    45b8:	0052      	lsls	r2, r2, #1
    45ba:	18ba      	adds	r2, r7, r2
    45bc:	6013      	str	r3, [r2, #0]

            word_value = w_union.w_word[w_index - 2];
    45be:	23aa      	movs	r3, #170	; 0xaa
    45c0:	005b      	lsls	r3, r3, #1
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	1e9a      	subs	r2, r3, #2
    45c8:	4b4a      	ldr	r3, [pc, #296]	; (46f4 <sw_sha256_process+0x2b8>)
    45ca:	21b0      	movs	r1, #176	; 0xb0
    45cc:	0049      	lsls	r1, r1, #1
    45ce:	468c      	mov	ip, r1
    45d0:	44bc      	add	ip, r7
    45d2:	4463      	add	r3, ip
    45d4:	0092      	lsls	r2, r2, #2
    45d6:	58d3      	ldr	r3, [r2, r3]
    45d8:	22a6      	movs	r2, #166	; 0xa6
    45da:	0052      	lsls	r2, r2, #1
    45dc:	18ba      	adds	r2, r7, r2
    45de:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    45e0:	23a6      	movs	r3, #166	; 0xa6
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	18fb      	adds	r3, r7, r3
    45e6:	681b      	ldr	r3, [r3, #0]
    45e8:	2211      	movs	r2, #17
    45ea:	41d3      	rors	r3, r2
    45ec:	001a      	movs	r2, r3
    45ee:	23a6      	movs	r3, #166	; 0xa6
    45f0:	005b      	lsls	r3, r3, #1
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	681b      	ldr	r3, [r3, #0]
    45f6:	2113      	movs	r1, #19
    45f8:	41cb      	rors	r3, r1
    45fa:	405a      	eors	r2, r3
    45fc:	23a6      	movs	r3, #166	; 0xa6
    45fe:	005b      	lsls	r3, r3, #1
    4600:	18fb      	adds	r3, r7, r3
    4602:	681b      	ldr	r3, [r3, #0]
    4604:	0a9b      	lsrs	r3, r3, #10
    4606:	4053      	eors	r3, r2
    4608:	22a2      	movs	r2, #162	; 0xa2
    460a:	0052      	lsls	r2, r2, #1
    460c:	18ba      	adds	r2, r7, r2
    460e:	6013      	str	r3, [r2, #0]

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    4610:	23aa      	movs	r3, #170	; 0xaa
    4612:	005b      	lsls	r3, r3, #1
    4614:	18fb      	adds	r3, r7, r3
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	3b10      	subs	r3, #16
    461a:	001a      	movs	r2, r3
    461c:	4b35      	ldr	r3, [pc, #212]	; (46f4 <sw_sha256_process+0x2b8>)
    461e:	21b0      	movs	r1, #176	; 0xb0
    4620:	0049      	lsls	r1, r1, #1
    4622:	468c      	mov	ip, r1
    4624:	44bc      	add	ip, r7
    4626:	4463      	add	r3, ip
    4628:	0092      	lsls	r2, r2, #2
    462a:	58d2      	ldr	r2, [r2, r3]
    462c:	23a4      	movs	r3, #164	; 0xa4
    462e:	005b      	lsls	r3, r3, #1
    4630:	18fb      	adds	r3, r7, r3
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	18d2      	adds	r2, r2, r3
    4636:	23aa      	movs	r3, #170	; 0xaa
    4638:	005b      	lsls	r3, r3, #1
    463a:	18fb      	adds	r3, r7, r3
    463c:	681b      	ldr	r3, [r3, #0]
    463e:	1fd9      	subs	r1, r3, #7
    4640:	4b2c      	ldr	r3, [pc, #176]	; (46f4 <sw_sha256_process+0x2b8>)
    4642:	20b0      	movs	r0, #176	; 0xb0
    4644:	0040      	lsls	r0, r0, #1
    4646:	4684      	mov	ip, r0
    4648:	44bc      	add	ip, r7
    464a:	4463      	add	r3, ip
    464c:	0089      	lsls	r1, r1, #2
    464e:	58cb      	ldr	r3, [r1, r3]
    4650:	18d2      	adds	r2, r2, r3
    4652:	23a2      	movs	r3, #162	; 0xa2
    4654:	005b      	lsls	r3, r3, #1
    4656:	18fb      	adds	r3, r7, r3
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	18d1      	adds	r1, r2, r3
    465c:	4b25      	ldr	r3, [pc, #148]	; (46f4 <sw_sha256_process+0x2b8>)
    465e:	22b0      	movs	r2, #176	; 0xb0
    4660:	0052      	lsls	r2, r2, #1
    4662:	4694      	mov	ip, r2
    4664:	44bc      	add	ip, r7
    4666:	4463      	add	r3, ip
    4668:	22aa      	movs	r2, #170	; 0xaa
    466a:	0052      	lsls	r2, r2, #1
    466c:	18ba      	adds	r2, r7, r2
    466e:	6812      	ldr	r2, [r2, #0]
    4670:	0092      	lsls	r2, r2, #2
    4672:	50d1      	str	r1, [r2, r3]

            w_index++;
    4674:	23aa      	movs	r3, #170	; 0xaa
    4676:	005b      	lsls	r3, r3, #1
    4678:	18fb      	adds	r3, r7, r3
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	3301      	adds	r3, #1
    467e:	22aa      	movs	r2, #170	; 0xaa
    4680:	0052      	lsls	r2, r2, #1
    4682:	18ba      	adds	r2, r7, r2
    4684:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
    4686:	23aa      	movs	r3, #170	; 0xaa
    4688:	005b      	lsls	r3, r3, #1
    468a:	18fb      	adds	r3, r7, r3
    468c:	681b      	ldr	r3, [r3, #0]
    468e:	2b3f      	cmp	r3, #63	; 0x3f
    4690:	d800      	bhi.n	4694 <sw_sha256_process+0x258>
    4692:	e76a      	b.n	456a <sw_sha256_process+0x12e>
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
    4694:	2300      	movs	r3, #0
    4696:	22ae      	movs	r2, #174	; 0xae
    4698:	0052      	lsls	r2, r2, #1
    469a:	18ba      	adds	r2, r7, r2
    469c:	6013      	str	r3, [r2, #0]
    469e:	e01c      	b.n	46da <sw_sha256_process+0x29e>
            rotate_register[i] = ctx->hash[i];
    46a0:	68fb      	ldr	r3, [r7, #12]
    46a2:	22ae      	movs	r2, #174	; 0xae
    46a4:	0052      	lsls	r2, r2, #1
    46a6:	18ba      	adds	r2, r7, r2
    46a8:	6812      	ldr	r2, [r2, #0]
    46aa:	3222      	adds	r2, #34	; 0x22
    46ac:	0092      	lsls	r2, r2, #2
    46ae:	58d1      	ldr	r1, [r2, r3]
    46b0:	4b11      	ldr	r3, [pc, #68]	; (46f8 <sw_sha256_process+0x2bc>)
    46b2:	22b0      	movs	r2, #176	; 0xb0
    46b4:	0052      	lsls	r2, r2, #1
    46b6:	4694      	mov	ip, r2
    46b8:	44bc      	add	ip, r7
    46ba:	4463      	add	r3, ip
    46bc:	22ae      	movs	r2, #174	; 0xae
    46be:	0052      	lsls	r2, r2, #1
    46c0:	18ba      	adds	r2, r7, r2
    46c2:	6812      	ldr	r2, [r2, #0]
    46c4:	0092      	lsls	r2, r2, #2
    46c6:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
    46c8:	23ae      	movs	r3, #174	; 0xae
    46ca:	005b      	lsls	r3, r3, #1
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	3301      	adds	r3, #1
    46d2:	22ae      	movs	r2, #174	; 0xae
    46d4:	0052      	lsls	r2, r2, #1
    46d6:	18ba      	adds	r2, r7, r2
    46d8:	6013      	str	r3, [r2, #0]
    46da:	23ae      	movs	r3, #174	; 0xae
    46dc:	005b      	lsls	r3, r3, #1
    46de:	18fb      	adds	r3, r7, r3
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	2b07      	cmp	r3, #7
    46e4:	dddc      	ble.n	46a0 <sw_sha256_process+0x264>

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    46e6:	2300      	movs	r3, #0
    46e8:	22ae      	movs	r2, #174	; 0xae
    46ea:	0052      	lsls	r2, r2, #1
    46ec:	18ba      	adds	r2, r7, r2
    46ee:	6013      	str	r3, [r2, #0]
    46f0:	e156      	b.n	49a0 <sw_sha256_process+0x564>
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	fffffed4 	.word	0xfffffed4
    46f8:	fffffeb4 	.word	0xfffffeb4
        {
            s0 = rotate_right(rotate_register[0], 2)
    46fc:	4bcf      	ldr	r3, [pc, #828]	; (4a3c <sw_sha256_process+0x600>)
    46fe:	22b0      	movs	r2, #176	; 0xb0
    4700:	0052      	lsls	r2, r2, #1
    4702:	4694      	mov	ip, r2
    4704:	44bc      	add	ip, r7
    4706:	4463      	add	r3, ip
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	2202      	movs	r2, #2
    470c:	41d3      	rors	r3, r2
    470e:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[0], 13)
    4710:	4bca      	ldr	r3, [pc, #808]	; (4a3c <sw_sha256_process+0x600>)
    4712:	21b0      	movs	r1, #176	; 0xb0
    4714:	0049      	lsls	r1, r1, #1
    4716:	468c      	mov	ip, r1
    4718:	44bc      	add	ip, r7
    471a:	4463      	add	r3, ip
    471c:	681b      	ldr	r3, [r3, #0]
    471e:	210d      	movs	r1, #13
    4720:	41cb      	rors	r3, r1
    4722:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[0], 22);
    4724:	4bc5      	ldr	r3, [pc, #788]	; (4a3c <sw_sha256_process+0x600>)
    4726:	21b0      	movs	r1, #176	; 0xb0
    4728:	0049      	lsls	r1, r1, #1
    472a:	468c      	mov	ip, r1
    472c:	44bc      	add	ip, r7
    472e:	4463      	add	r3, ip
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	2116      	movs	r1, #22
    4734:	41cb      	rors	r3, r1
            s0 = rotate_right(rotate_register[0], 2)
    4736:	4053      	eors	r3, r2
    4738:	22a4      	movs	r2, #164	; 0xa4
    473a:	0052      	lsls	r2, r2, #1
    473c:	18ba      	adds	r2, r7, r2
    473e:	6013      	str	r3, [r2, #0]
            maj = (rotate_register[0] & rotate_register[1])
    4740:	4bbe      	ldr	r3, [pc, #760]	; (4a3c <sw_sha256_process+0x600>)
    4742:	22b0      	movs	r2, #176	; 0xb0
    4744:	0052      	lsls	r2, r2, #1
    4746:	4694      	mov	ip, r2
    4748:	44bc      	add	ip, r7
    474a:	4463      	add	r3, ip
    474c:	681a      	ldr	r2, [r3, #0]
    474e:	4bbb      	ldr	r3, [pc, #748]	; (4a3c <sw_sha256_process+0x600>)
    4750:	21b0      	movs	r1, #176	; 0xb0
    4752:	0049      	lsls	r1, r1, #1
    4754:	468c      	mov	ip, r1
    4756:	44bc      	add	ip, r7
    4758:	4463      	add	r3, ip
    475a:	685b      	ldr	r3, [r3, #4]
    475c:	401a      	ands	r2, r3
                  ^ (rotate_register[0] & rotate_register[2])
    475e:	4bb7      	ldr	r3, [pc, #732]	; (4a3c <sw_sha256_process+0x600>)
    4760:	21b0      	movs	r1, #176	; 0xb0
    4762:	0049      	lsls	r1, r1, #1
    4764:	468c      	mov	ip, r1
    4766:	44bc      	add	ip, r7
    4768:	4463      	add	r3, ip
    476a:	6819      	ldr	r1, [r3, #0]
    476c:	4bb3      	ldr	r3, [pc, #716]	; (4a3c <sw_sha256_process+0x600>)
    476e:	20b0      	movs	r0, #176	; 0xb0
    4770:	0040      	lsls	r0, r0, #1
    4772:	4684      	mov	ip, r0
    4774:	44bc      	add	ip, r7
    4776:	4463      	add	r3, ip
    4778:	689b      	ldr	r3, [r3, #8]
    477a:	400b      	ands	r3, r1
    477c:	405a      	eors	r2, r3
                  ^ (rotate_register[1] & rotate_register[2]);
    477e:	4baf      	ldr	r3, [pc, #700]	; (4a3c <sw_sha256_process+0x600>)
    4780:	21b0      	movs	r1, #176	; 0xb0
    4782:	0049      	lsls	r1, r1, #1
    4784:	468c      	mov	ip, r1
    4786:	44bc      	add	ip, r7
    4788:	4463      	add	r3, ip
    478a:	6859      	ldr	r1, [r3, #4]
    478c:	4bab      	ldr	r3, [pc, #684]	; (4a3c <sw_sha256_process+0x600>)
    478e:	20b0      	movs	r0, #176	; 0xb0
    4790:	0040      	lsls	r0, r0, #1
    4792:	4684      	mov	ip, r0
    4794:	44bc      	add	ip, r7
    4796:	4463      	add	r3, ip
    4798:	689b      	ldr	r3, [r3, #8]
    479a:	400b      	ands	r3, r1
            maj = (rotate_register[0] & rotate_register[1])
    479c:	4053      	eors	r3, r2
    479e:	22a0      	movs	r2, #160	; 0xa0
    47a0:	0052      	lsls	r2, r2, #1
    47a2:	18ba      	adds	r2, r7, r2
    47a4:	6013      	str	r3, [r2, #0]
            t2 = s0 + maj;
    47a6:	23a4      	movs	r3, #164	; 0xa4
    47a8:	005b      	lsls	r3, r3, #1
    47aa:	18fb      	adds	r3, r7, r3
    47ac:	681a      	ldr	r2, [r3, #0]
    47ae:	23a0      	movs	r3, #160	; 0xa0
    47b0:	005b      	lsls	r3, r3, #1
    47b2:	18fb      	adds	r3, r7, r3
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	18d3      	adds	r3, r2, r3
    47b8:	229e      	movs	r2, #158	; 0x9e
    47ba:	0052      	lsls	r2, r2, #1
    47bc:	18ba      	adds	r2, r7, r2
    47be:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(rotate_register[4], 6)
    47c0:	4b9e      	ldr	r3, [pc, #632]	; (4a3c <sw_sha256_process+0x600>)
    47c2:	22b0      	movs	r2, #176	; 0xb0
    47c4:	0052      	lsls	r2, r2, #1
    47c6:	4694      	mov	ip, r2
    47c8:	44bc      	add	ip, r7
    47ca:	4463      	add	r3, ip
    47cc:	691b      	ldr	r3, [r3, #16]
    47ce:	2206      	movs	r2, #6
    47d0:	41d3      	rors	r3, r2
    47d2:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[4], 11)
    47d4:	4b99      	ldr	r3, [pc, #612]	; (4a3c <sw_sha256_process+0x600>)
    47d6:	21b0      	movs	r1, #176	; 0xb0
    47d8:	0049      	lsls	r1, r1, #1
    47da:	468c      	mov	ip, r1
    47dc:	44bc      	add	ip, r7
    47de:	4463      	add	r3, ip
    47e0:	691b      	ldr	r3, [r3, #16]
    47e2:	210b      	movs	r1, #11
    47e4:	41cb      	rors	r3, r1
    47e6:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[4], 25);
    47e8:	4b94      	ldr	r3, [pc, #592]	; (4a3c <sw_sha256_process+0x600>)
    47ea:	21b0      	movs	r1, #176	; 0xb0
    47ec:	0049      	lsls	r1, r1, #1
    47ee:	468c      	mov	ip, r1
    47f0:	44bc      	add	ip, r7
    47f2:	4463      	add	r3, ip
    47f4:	691b      	ldr	r3, [r3, #16]
    47f6:	2119      	movs	r1, #25
    47f8:	41cb      	rors	r3, r1
            s1 = rotate_right(rotate_register[4], 6)
    47fa:	4053      	eors	r3, r2
    47fc:	22a2      	movs	r2, #162	; 0xa2
    47fe:	0052      	lsls	r2, r2, #1
    4800:	18ba      	adds	r2, r7, r2
    4802:	6013      	str	r3, [r2, #0]
            ch = (rotate_register[4] & rotate_register[5])
    4804:	4b8d      	ldr	r3, [pc, #564]	; (4a3c <sw_sha256_process+0x600>)
    4806:	22b0      	movs	r2, #176	; 0xb0
    4808:	0052      	lsls	r2, r2, #1
    480a:	4694      	mov	ip, r2
    480c:	44bc      	add	ip, r7
    480e:	4463      	add	r3, ip
    4810:	691a      	ldr	r2, [r3, #16]
    4812:	4b8a      	ldr	r3, [pc, #552]	; (4a3c <sw_sha256_process+0x600>)
    4814:	21b0      	movs	r1, #176	; 0xb0
    4816:	0049      	lsls	r1, r1, #1
    4818:	468c      	mov	ip, r1
    481a:	44bc      	add	ip, r7
    481c:	4463      	add	r3, ip
    481e:	695b      	ldr	r3, [r3, #20]
    4820:	401a      	ands	r2, r3
                 ^ (~rotate_register[4] & rotate_register[6]);
    4822:	4b86      	ldr	r3, [pc, #536]	; (4a3c <sw_sha256_process+0x600>)
    4824:	21b0      	movs	r1, #176	; 0xb0
    4826:	0049      	lsls	r1, r1, #1
    4828:	468c      	mov	ip, r1
    482a:	44bc      	add	ip, r7
    482c:	4463      	add	r3, ip
    482e:	691b      	ldr	r3, [r3, #16]
    4830:	43d9      	mvns	r1, r3
    4832:	4b82      	ldr	r3, [pc, #520]	; (4a3c <sw_sha256_process+0x600>)
    4834:	20b0      	movs	r0, #176	; 0xb0
    4836:	0040      	lsls	r0, r0, #1
    4838:	4684      	mov	ip, r0
    483a:	44bc      	add	ip, r7
    483c:	4463      	add	r3, ip
    483e:	699b      	ldr	r3, [r3, #24]
    4840:	400b      	ands	r3, r1
            ch = (rotate_register[4] & rotate_register[5])
    4842:	4053      	eors	r3, r2
    4844:	229c      	movs	r2, #156	; 0x9c
    4846:	0052      	lsls	r2, r2, #1
    4848:	18ba      	adds	r2, r7, r2
    484a:	6013      	str	r3, [r2, #0]
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    484c:	4b7b      	ldr	r3, [pc, #492]	; (4a3c <sw_sha256_process+0x600>)
    484e:	22b0      	movs	r2, #176	; 0xb0
    4850:	0052      	lsls	r2, r2, #1
    4852:	4694      	mov	ip, r2
    4854:	44bc      	add	ip, r7
    4856:	4463      	add	r3, ip
    4858:	69da      	ldr	r2, [r3, #28]
    485a:	23a2      	movs	r3, #162	; 0xa2
    485c:	005b      	lsls	r3, r3, #1
    485e:	18fb      	adds	r3, r7, r3
    4860:	681b      	ldr	r3, [r3, #0]
    4862:	18d2      	adds	r2, r2, r3
    4864:	239c      	movs	r3, #156	; 0x9c
    4866:	005b      	lsls	r3, r3, #1
    4868:	18fb      	adds	r3, r7, r3
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	18d2      	adds	r2, r2, r3
    486e:	4b74      	ldr	r3, [pc, #464]	; (4a40 <sw_sha256_process+0x604>)
    4870:	21ae      	movs	r1, #174	; 0xae
    4872:	0049      	lsls	r1, r1, #1
    4874:	1879      	adds	r1, r7, r1
    4876:	6809      	ldr	r1, [r1, #0]
    4878:	0089      	lsls	r1, r1, #2
    487a:	58cb      	ldr	r3, [r1, r3]
    487c:	18d2      	adds	r2, r2, r3
    487e:	4b71      	ldr	r3, [pc, #452]	; (4a44 <sw_sha256_process+0x608>)
    4880:	21b0      	movs	r1, #176	; 0xb0
    4882:	0049      	lsls	r1, r1, #1
    4884:	468c      	mov	ip, r1
    4886:	44bc      	add	ip, r7
    4888:	4463      	add	r3, ip
    488a:	21ae      	movs	r1, #174	; 0xae
    488c:	0049      	lsls	r1, r1, #1
    488e:	1879      	adds	r1, r7, r1
    4890:	6809      	ldr	r1, [r1, #0]
    4892:	0089      	lsls	r1, r1, #2
    4894:	58cb      	ldr	r3, [r1, r3]
    4896:	18d3      	adds	r3, r2, r3
    4898:	229a      	movs	r2, #154	; 0x9a
    489a:	0052      	lsls	r2, r2, #1
    489c:	18ba      	adds	r2, r7, r2
    489e:	6013      	str	r3, [r2, #0]

            rotate_register[7] = rotate_register[6];
    48a0:	4b66      	ldr	r3, [pc, #408]	; (4a3c <sw_sha256_process+0x600>)
    48a2:	22b0      	movs	r2, #176	; 0xb0
    48a4:	0052      	lsls	r2, r2, #1
    48a6:	4694      	mov	ip, r2
    48a8:	44bc      	add	ip, r7
    48aa:	4463      	add	r3, ip
    48ac:	699a      	ldr	r2, [r3, #24]
    48ae:	4b63      	ldr	r3, [pc, #396]	; (4a3c <sw_sha256_process+0x600>)
    48b0:	21b0      	movs	r1, #176	; 0xb0
    48b2:	0049      	lsls	r1, r1, #1
    48b4:	468c      	mov	ip, r1
    48b6:	44bc      	add	ip, r7
    48b8:	4463      	add	r3, ip
    48ba:	61da      	str	r2, [r3, #28]
            rotate_register[6] = rotate_register[5];
    48bc:	4b5f      	ldr	r3, [pc, #380]	; (4a3c <sw_sha256_process+0x600>)
    48be:	22b0      	movs	r2, #176	; 0xb0
    48c0:	0052      	lsls	r2, r2, #1
    48c2:	4694      	mov	ip, r2
    48c4:	44bc      	add	ip, r7
    48c6:	4463      	add	r3, ip
    48c8:	695a      	ldr	r2, [r3, #20]
    48ca:	4b5c      	ldr	r3, [pc, #368]	; (4a3c <sw_sha256_process+0x600>)
    48cc:	21b0      	movs	r1, #176	; 0xb0
    48ce:	0049      	lsls	r1, r1, #1
    48d0:	468c      	mov	ip, r1
    48d2:	44bc      	add	ip, r7
    48d4:	4463      	add	r3, ip
    48d6:	619a      	str	r2, [r3, #24]
            rotate_register[5] = rotate_register[4];
    48d8:	4b58      	ldr	r3, [pc, #352]	; (4a3c <sw_sha256_process+0x600>)
    48da:	22b0      	movs	r2, #176	; 0xb0
    48dc:	0052      	lsls	r2, r2, #1
    48de:	4694      	mov	ip, r2
    48e0:	44bc      	add	ip, r7
    48e2:	4463      	add	r3, ip
    48e4:	691a      	ldr	r2, [r3, #16]
    48e6:	4b55      	ldr	r3, [pc, #340]	; (4a3c <sw_sha256_process+0x600>)
    48e8:	21b0      	movs	r1, #176	; 0xb0
    48ea:	0049      	lsls	r1, r1, #1
    48ec:	468c      	mov	ip, r1
    48ee:	44bc      	add	ip, r7
    48f0:	4463      	add	r3, ip
    48f2:	615a      	str	r2, [r3, #20]
            rotate_register[4] = rotate_register[3] + t1;
    48f4:	4b51      	ldr	r3, [pc, #324]	; (4a3c <sw_sha256_process+0x600>)
    48f6:	22b0      	movs	r2, #176	; 0xb0
    48f8:	0052      	lsls	r2, r2, #1
    48fa:	4694      	mov	ip, r2
    48fc:	44bc      	add	ip, r7
    48fe:	4463      	add	r3, ip
    4900:	68da      	ldr	r2, [r3, #12]
    4902:	239a      	movs	r3, #154	; 0x9a
    4904:	005b      	lsls	r3, r3, #1
    4906:	18fb      	adds	r3, r7, r3
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	18d2      	adds	r2, r2, r3
    490c:	4b4b      	ldr	r3, [pc, #300]	; (4a3c <sw_sha256_process+0x600>)
    490e:	21b0      	movs	r1, #176	; 0xb0
    4910:	0049      	lsls	r1, r1, #1
    4912:	468c      	mov	ip, r1
    4914:	44bc      	add	ip, r7
    4916:	4463      	add	r3, ip
    4918:	611a      	str	r2, [r3, #16]
            rotate_register[3] = rotate_register[2];
    491a:	4b48      	ldr	r3, [pc, #288]	; (4a3c <sw_sha256_process+0x600>)
    491c:	22b0      	movs	r2, #176	; 0xb0
    491e:	0052      	lsls	r2, r2, #1
    4920:	4694      	mov	ip, r2
    4922:	44bc      	add	ip, r7
    4924:	4463      	add	r3, ip
    4926:	689a      	ldr	r2, [r3, #8]
    4928:	4b44      	ldr	r3, [pc, #272]	; (4a3c <sw_sha256_process+0x600>)
    492a:	21b0      	movs	r1, #176	; 0xb0
    492c:	0049      	lsls	r1, r1, #1
    492e:	468c      	mov	ip, r1
    4930:	44bc      	add	ip, r7
    4932:	4463      	add	r3, ip
    4934:	60da      	str	r2, [r3, #12]
            rotate_register[2] = rotate_register[1];
    4936:	4b41      	ldr	r3, [pc, #260]	; (4a3c <sw_sha256_process+0x600>)
    4938:	22b0      	movs	r2, #176	; 0xb0
    493a:	0052      	lsls	r2, r2, #1
    493c:	4694      	mov	ip, r2
    493e:	44bc      	add	ip, r7
    4940:	4463      	add	r3, ip
    4942:	685a      	ldr	r2, [r3, #4]
    4944:	4b3d      	ldr	r3, [pc, #244]	; (4a3c <sw_sha256_process+0x600>)
    4946:	21b0      	movs	r1, #176	; 0xb0
    4948:	0049      	lsls	r1, r1, #1
    494a:	468c      	mov	ip, r1
    494c:	44bc      	add	ip, r7
    494e:	4463      	add	r3, ip
    4950:	609a      	str	r2, [r3, #8]
            rotate_register[1] = rotate_register[0];
    4952:	4b3a      	ldr	r3, [pc, #232]	; (4a3c <sw_sha256_process+0x600>)
    4954:	22b0      	movs	r2, #176	; 0xb0
    4956:	0052      	lsls	r2, r2, #1
    4958:	4694      	mov	ip, r2
    495a:	44bc      	add	ip, r7
    495c:	4463      	add	r3, ip
    495e:	681a      	ldr	r2, [r3, #0]
    4960:	4b36      	ldr	r3, [pc, #216]	; (4a3c <sw_sha256_process+0x600>)
    4962:	21b0      	movs	r1, #176	; 0xb0
    4964:	0049      	lsls	r1, r1, #1
    4966:	468c      	mov	ip, r1
    4968:	44bc      	add	ip, r7
    496a:	4463      	add	r3, ip
    496c:	605a      	str	r2, [r3, #4]
            rotate_register[0] = t1 + t2;
    496e:	239a      	movs	r3, #154	; 0x9a
    4970:	005b      	lsls	r3, r3, #1
    4972:	18fb      	adds	r3, r7, r3
    4974:	681a      	ldr	r2, [r3, #0]
    4976:	239e      	movs	r3, #158	; 0x9e
    4978:	005b      	lsls	r3, r3, #1
    497a:	18fb      	adds	r3, r7, r3
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	18d2      	adds	r2, r2, r3
    4980:	4b2e      	ldr	r3, [pc, #184]	; (4a3c <sw_sha256_process+0x600>)
    4982:	21b0      	movs	r1, #176	; 0xb0
    4984:	0049      	lsls	r1, r1, #1
    4986:	468c      	mov	ip, r1
    4988:	44bc      	add	ip, r7
    498a:	4463      	add	r3, ip
    498c:	601a      	str	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    498e:	23ae      	movs	r3, #174	; 0xae
    4990:	005b      	lsls	r3, r3, #1
    4992:	18fb      	adds	r3, r7, r3
    4994:	681b      	ldr	r3, [r3, #0]
    4996:	3301      	adds	r3, #1
    4998:	22ae      	movs	r2, #174	; 0xae
    499a:	0052      	lsls	r2, r2, #1
    499c:	18ba      	adds	r2, r7, r2
    499e:	6013      	str	r3, [r2, #0]
    49a0:	23ae      	movs	r3, #174	; 0xae
    49a2:	005b      	lsls	r3, r3, #1
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	681b      	ldr	r3, [r3, #0]
    49a8:	2b3f      	cmp	r3, #63	; 0x3f
    49aa:	dc00      	bgt.n	49ae <sw_sha256_process+0x572>
    49ac:	e6a6      	b.n	46fc <sw_sha256_process+0x2c0>
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
    49ae:	2300      	movs	r3, #0
    49b0:	22ae      	movs	r2, #174	; 0xae
    49b2:	0052      	lsls	r2, r2, #1
    49b4:	18ba      	adds	r2, r7, r2
    49b6:	6013      	str	r3, [r2, #0]
    49b8:	e025      	b.n	4a06 <sw_sha256_process+0x5ca>
            ctx->hash[i] += rotate_register[i];
    49ba:	68fb      	ldr	r3, [r7, #12]
    49bc:	22ae      	movs	r2, #174	; 0xae
    49be:	0052      	lsls	r2, r2, #1
    49c0:	18ba      	adds	r2, r7, r2
    49c2:	6812      	ldr	r2, [r2, #0]
    49c4:	3222      	adds	r2, #34	; 0x22
    49c6:	0092      	lsls	r2, r2, #2
    49c8:	58d2      	ldr	r2, [r2, r3]
    49ca:	4b1c      	ldr	r3, [pc, #112]	; (4a3c <sw_sha256_process+0x600>)
    49cc:	21b0      	movs	r1, #176	; 0xb0
    49ce:	0049      	lsls	r1, r1, #1
    49d0:	468c      	mov	ip, r1
    49d2:	44bc      	add	ip, r7
    49d4:	4463      	add	r3, ip
    49d6:	21ae      	movs	r1, #174	; 0xae
    49d8:	0049      	lsls	r1, r1, #1
    49da:	1879      	adds	r1, r7, r1
    49dc:	6809      	ldr	r1, [r1, #0]
    49de:	0089      	lsls	r1, r1, #2
    49e0:	58cb      	ldr	r3, [r1, r3]
    49e2:	18d1      	adds	r1, r2, r3
    49e4:	68fb      	ldr	r3, [r7, #12]
    49e6:	22ae      	movs	r2, #174	; 0xae
    49e8:	0052      	lsls	r2, r2, #1
    49ea:	18ba      	adds	r2, r7, r2
    49ec:	6812      	ldr	r2, [r2, #0]
    49ee:	3222      	adds	r2, #34	; 0x22
    49f0:	0092      	lsls	r2, r2, #2
    49f2:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
    49f4:	23ae      	movs	r3, #174	; 0xae
    49f6:	005b      	lsls	r3, r3, #1
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	3301      	adds	r3, #1
    49fe:	22ae      	movs	r2, #174	; 0xae
    4a00:	0052      	lsls	r2, r2, #1
    4a02:	18ba      	adds	r2, r7, r2
    4a04:	6013      	str	r3, [r2, #0]
    4a06:	23ae      	movs	r3, #174	; 0xae
    4a08:	005b      	lsls	r3, r3, #1
    4a0a:	18fb      	adds	r3, r7, r3
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	2b07      	cmp	r3, #7
    4a10:	ddd3      	ble.n	49ba <sw_sha256_process+0x57e>
    for (block = 0; block < block_count; block++)
    4a12:	23ac      	movs	r3, #172	; 0xac
    4a14:	005b      	lsls	r3, r3, #1
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	3301      	adds	r3, #1
    4a1c:	22ac      	movs	r2, #172	; 0xac
    4a1e:	0052      	lsls	r2, r2, #1
    4a20:	18ba      	adds	r2, r7, r2
    4a22:	6013      	str	r3, [r2, #0]
    4a24:	23ac      	movs	r3, #172	; 0xac
    4a26:	005b      	lsls	r3, r3, #1
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	681a      	ldr	r2, [r3, #0]
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	429a      	cmp	r2, r3
    4a30:	d200      	bcs.n	4a34 <sw_sha256_process+0x5f8>
    4a32:	e519      	b.n	4468 <sw_sha256_process+0x2c>
    }
}
    4a34:	46c0      	nop			; (mov r8, r8)
    4a36:	46bd      	mov	sp, r7
    4a38:	b058      	add	sp, #352	; 0x160
    4a3a:	bd80      	pop	{r7, pc}
    4a3c:	fffffeb4 	.word	0xfffffeb4
    4a40:	0000b160 	.word	0x0000b160
    4a44:	fffffed4 	.word	0xfffffed4

00004a48 <sw_sha256_init>:

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b084      	sub	sp, #16
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	6078      	str	r0, [r7, #4]
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    4a50:	687b      	ldr	r3, [r7, #4]
    4a52:	22a8      	movs	r2, #168	; 0xa8
    4a54:	2100      	movs	r1, #0
    4a56:	0018      	movs	r0, r3
    4a58:	4b0b      	ldr	r3, [pc, #44]	; (4a88 <sw_sha256_init+0x40>)
    4a5a:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    4a5c:	2300      	movs	r3, #0
    4a5e:	60fb      	str	r3, [r7, #12]
    4a60:	e00b      	b.n	4a7a <sw_sha256_init+0x32>
        ctx->hash[i] = hash_init[i];
    4a62:	4b0a      	ldr	r3, [pc, #40]	; (4a8c <sw_sha256_init+0x44>)
    4a64:	68fa      	ldr	r2, [r7, #12]
    4a66:	0092      	lsls	r2, r2, #2
    4a68:	58d1      	ldr	r1, [r2, r3]
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	68fa      	ldr	r2, [r7, #12]
    4a6e:	3222      	adds	r2, #34	; 0x22
    4a70:	0092      	lsls	r2, r2, #2
    4a72:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 8; i++)
    4a74:	68fb      	ldr	r3, [r7, #12]
    4a76:	3301      	adds	r3, #1
    4a78:	60fb      	str	r3, [r7, #12]
    4a7a:	68fb      	ldr	r3, [r7, #12]
    4a7c:	2b07      	cmp	r3, #7
    4a7e:	ddf0      	ble.n	4a62 <sw_sha256_init+0x1a>
}
    4a80:	46c0      	nop			; (mov r8, r8)
    4a82:	46bd      	mov	sp, r7
    4a84:	b004      	add	sp, #16
    4a86:	bd80      	pop	{r7, pc}
    4a88:	00009d2d 	.word	0x00009d2d
    4a8c:	0000b260 	.word	0x0000b260

00004a90 <sw_sha256_update>:

void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    4a90:	b580      	push	{r7, lr}
    4a92:	b088      	sub	sp, #32
    4a94:	af00      	add	r7, sp, #0
    4a96:	60f8      	str	r0, [r7, #12]
    4a98:	60b9      	str	r1, [r7, #8]
    4a9a:	607a      	str	r2, [r7, #4]
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	685b      	ldr	r3, [r3, #4]
    4aa0:	2240      	movs	r2, #64	; 0x40
    4aa2:	1ad3      	subs	r3, r2, r3
    4aa4:	61fb      	str	r3, [r7, #28]
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    4aa6:	69fa      	ldr	r2, [r7, #28]
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	4293      	cmp	r3, r2
    4aac:	d900      	bls.n	4ab0 <sw_sha256_update+0x20>
    4aae:	0013      	movs	r3, r2
    4ab0:	61bb      	str	r3, [r7, #24]

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    4ab2:	68fb      	ldr	r3, [r7, #12]
    4ab4:	685b      	ldr	r3, [r3, #4]
    4ab6:	3308      	adds	r3, #8
    4ab8:	68fa      	ldr	r2, [r7, #12]
    4aba:	18d3      	adds	r3, r2, r3
    4abc:	69ba      	ldr	r2, [r7, #24]
    4abe:	68b9      	ldr	r1, [r7, #8]
    4ac0:	0018      	movs	r0, r3
    4ac2:	4b22      	ldr	r3, [pc, #136]	; (4b4c <sw_sha256_update+0xbc>)
    4ac4:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    4ac6:	68fb      	ldr	r3, [r7, #12]
    4ac8:	685a      	ldr	r2, [r3, #4]
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	18d3      	adds	r3, r2, r3
    4ace:	2b3f      	cmp	r3, #63	; 0x3f
    4ad0:	d806      	bhi.n	4ae0 <sw_sha256_update+0x50>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    4ad2:	68fb      	ldr	r3, [r7, #12]
    4ad4:	685a      	ldr	r2, [r3, #4]
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	18d2      	adds	r2, r2, r3
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	605a      	str	r2, [r3, #4]
        return;
    4ade:	e031      	b.n	4b44 <sw_sha256_update+0xb4>
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	3308      	adds	r3, #8
    4ae4:	0019      	movs	r1, r3
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	2201      	movs	r2, #1
    4aea:	0018      	movs	r0, r3
    4aec:	4b18      	ldr	r3, [pc, #96]	; (4b50 <sw_sha256_update+0xc0>)
    4aee:	4798      	blx	r3

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
    4af0:	687a      	ldr	r2, [r7, #4]
    4af2:	69bb      	ldr	r3, [r7, #24]
    4af4:	1ad3      	subs	r3, r2, r3
    4af6:	607b      	str	r3, [r7, #4]
    block_count = msg_size / SHA256_BLOCK_SIZE;
    4af8:	687b      	ldr	r3, [r7, #4]
    4afa:	099b      	lsrs	r3, r3, #6
    4afc:	617b      	str	r3, [r7, #20]
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    4afe:	68ba      	ldr	r2, [r7, #8]
    4b00:	69bb      	ldr	r3, [r7, #24]
    4b02:	18d1      	adds	r1, r2, r3
    4b04:	697a      	ldr	r2, [r7, #20]
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	0018      	movs	r0, r3
    4b0a:	4b11      	ldr	r3, [pc, #68]	; (4b50 <sw_sha256_update+0xc0>)
    4b0c:	4798      	blx	r3

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    4b0e:	68fb      	ldr	r3, [r7, #12]
    4b10:	681a      	ldr	r2, [r3, #0]
    4b12:	697b      	ldr	r3, [r7, #20]
    4b14:	3301      	adds	r3, #1
    4b16:	019b      	lsls	r3, r3, #6
    4b18:	18d2      	adds	r2, r2, r3
    4b1a:	68fb      	ldr	r3, [r7, #12]
    4b1c:	601a      	str	r2, [r3, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	223f      	movs	r2, #63	; 0x3f
    4b22:	401a      	ands	r2, r3
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	605a      	str	r2, [r3, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	3308      	adds	r3, #8
    4b2c:	0018      	movs	r0, r3
    4b2e:	697b      	ldr	r3, [r7, #20]
    4b30:	019a      	lsls	r2, r3, #6
    4b32:	69bb      	ldr	r3, [r7, #24]
    4b34:	18d3      	adds	r3, r2, r3
    4b36:	68ba      	ldr	r2, [r7, #8]
    4b38:	18d1      	adds	r1, r2, r3
    4b3a:	68fb      	ldr	r3, [r7, #12]
    4b3c:	685b      	ldr	r3, [r3, #4]
    4b3e:	001a      	movs	r2, r3
    4b40:	4b02      	ldr	r3, [pc, #8]	; (4b4c <sw_sha256_update+0xbc>)
    4b42:	4798      	blx	r3
}
    4b44:	46bd      	mov	sp, r7
    4b46:	b008      	add	sp, #32
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	00009d1b 	.word	0x00009d1b
    4b50:	0000443d 	.word	0x0000443d

00004b54 <sw_sha256_final>:

void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    4b54:	b580      	push	{r7, lr}
    4b56:	b086      	sub	sp, #24
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
    4b5c:	6039      	str	r1, [r7, #0]
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	681a      	ldr	r2, [r3, #0]
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	685b      	ldr	r3, [r3, #4]
    4b66:	18d2      	adds	r2, r2, r3
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	601a      	str	r2, [r3, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	681b      	ldr	r3, [r3, #0]
    4b70:	00db      	lsls	r3, r3, #3
    4b72:	60fb      	str	r3, [r7, #12]

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	685b      	ldr	r3, [r3, #4]
    4b78:	2209      	movs	r2, #9
    4b7a:	4252      	negs	r2, r2
    4b7c:	1ad3      	subs	r3, r2, r3
    4b7e:	223f      	movs	r2, #63	; 0x3f
    4b80:	4013      	ands	r3, r2
    4b82:	60bb      	str	r3, [r7, #8]

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	685b      	ldr	r3, [r3, #4]
    4b88:	1c59      	adds	r1, r3, #1
    4b8a:	687a      	ldr	r2, [r7, #4]
    4b8c:	6051      	str	r1, [r2, #4]
    4b8e:	687a      	ldr	r2, [r7, #4]
    4b90:	18d3      	adds	r3, r2, r3
    4b92:	2280      	movs	r2, #128	; 0x80
    4b94:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    4b96:	687b      	ldr	r3, [r7, #4]
    4b98:	685b      	ldr	r3, [r3, #4]
    4b9a:	3308      	adds	r3, #8
    4b9c:	687a      	ldr	r2, [r7, #4]
    4b9e:	18d0      	adds	r0, r2, r3
    4ba0:	68bb      	ldr	r3, [r7, #8]
    4ba2:	3304      	adds	r3, #4
    4ba4:	001a      	movs	r2, r3
    4ba6:	2100      	movs	r1, #0
    4ba8:	4b37      	ldr	r3, [pc, #220]	; (4c88 <sw_sha256_final+0x134>)
    4baa:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	685a      	ldr	r2, [r3, #4]
    4bb0:	68bb      	ldr	r3, [r7, #8]
    4bb2:	18d3      	adds	r3, r2, r3
    4bb4:	1d1a      	adds	r2, r3, #4
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	605a      	str	r2, [r3, #4]

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	685b      	ldr	r3, [r3, #4]
    4bbe:	1c59      	adds	r1, r3, #1
    4bc0:	687a      	ldr	r2, [r7, #4]
    4bc2:	6051      	str	r1, [r2, #4]
    4bc4:	68fa      	ldr	r2, [r7, #12]
    4bc6:	0e12      	lsrs	r2, r2, #24
    4bc8:	b2d1      	uxtb	r1, r2
    4bca:	687a      	ldr	r2, [r7, #4]
    4bcc:	18d3      	adds	r3, r2, r3
    4bce:	1c0a      	adds	r2, r1, #0
    4bd0:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	685b      	ldr	r3, [r3, #4]
    4bd6:	1c59      	adds	r1, r3, #1
    4bd8:	687a      	ldr	r2, [r7, #4]
    4bda:	6051      	str	r1, [r2, #4]
    4bdc:	68fa      	ldr	r2, [r7, #12]
    4bde:	0c12      	lsrs	r2, r2, #16
    4be0:	b2d1      	uxtb	r1, r2
    4be2:	687a      	ldr	r2, [r7, #4]
    4be4:	18d3      	adds	r3, r2, r3
    4be6:	1c0a      	adds	r2, r1, #0
    4be8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	685b      	ldr	r3, [r3, #4]
    4bee:	1c59      	adds	r1, r3, #1
    4bf0:	687a      	ldr	r2, [r7, #4]
    4bf2:	6051      	str	r1, [r2, #4]
    4bf4:	68fa      	ldr	r2, [r7, #12]
    4bf6:	0a12      	lsrs	r2, r2, #8
    4bf8:	b2d1      	uxtb	r1, r2
    4bfa:	687a      	ldr	r2, [r7, #4]
    4bfc:	18d3      	adds	r3, r2, r3
    4bfe:	1c0a      	adds	r2, r1, #0
    4c00:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	685b      	ldr	r3, [r3, #4]
    4c06:	1c59      	adds	r1, r3, #1
    4c08:	687a      	ldr	r2, [r7, #4]
    4c0a:	6051      	str	r1, [r2, #4]
    4c0c:	68fa      	ldr	r2, [r7, #12]
    4c0e:	b2d1      	uxtb	r1, r2
    4c10:	687a      	ldr	r2, [r7, #4]
    4c12:	18d3      	adds	r3, r2, r3
    4c14:	1c0a      	adds	r2, r1, #0
    4c16:	721a      	strb	r2, [r3, #8]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	3308      	adds	r3, #8
    4c1c:	0019      	movs	r1, r3
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	685b      	ldr	r3, [r3, #4]
    4c22:	099a      	lsrs	r2, r3, #6
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	0018      	movs	r0, r3
    4c28:	4b18      	ldr	r3, [pc, #96]	; (4c8c <sw_sha256_final+0x138>)
    4c2a:	4798      	blx	r3

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    4c2c:	2300      	movs	r3, #0
    4c2e:	617b      	str	r3, [r7, #20]
    4c30:	e023      	b.n	4c7a <sw_sha256_final+0x126>
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    4c32:	2303      	movs	r3, #3
    4c34:	613b      	str	r3, [r7, #16]
    4c36:	e01a      	b.n	4c6e <sw_sha256_final+0x11a>
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    4c38:	697b      	ldr	r3, [r7, #20]
    4c3a:	009a      	lsls	r2, r3, #2
    4c3c:	693b      	ldr	r3, [r7, #16]
    4c3e:	18d3      	adds	r3, r2, r3
    4c40:	683a      	ldr	r2, [r7, #0]
    4c42:	18d3      	adds	r3, r2, r3
    4c44:	687a      	ldr	r2, [r7, #4]
    4c46:	6979      	ldr	r1, [r7, #20]
    4c48:	3122      	adds	r1, #34	; 0x22
    4c4a:	0089      	lsls	r1, r1, #2
    4c4c:	588a      	ldr	r2, [r1, r2]
    4c4e:	b2d2      	uxtb	r2, r2
    4c50:	701a      	strb	r2, [r3, #0]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    4c52:	693b      	ldr	r3, [r7, #16]
    4c54:	3b01      	subs	r3, #1
    4c56:	613b      	str	r3, [r7, #16]
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	697a      	ldr	r2, [r7, #20]
    4c5c:	3222      	adds	r2, #34	; 0x22
    4c5e:	0092      	lsls	r2, r2, #2
    4c60:	58d3      	ldr	r3, [r2, r3]
    4c62:	0a19      	lsrs	r1, r3, #8
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	697a      	ldr	r2, [r7, #20]
    4c68:	3222      	adds	r2, #34	; 0x22
    4c6a:	0092      	lsls	r2, r2, #2
    4c6c:	50d1      	str	r1, [r2, r3]
    4c6e:	693b      	ldr	r3, [r7, #16]
    4c70:	2b00      	cmp	r3, #0
    4c72:	dae1      	bge.n	4c38 <sw_sha256_final+0xe4>
    for (i = 0; i < 8; i++)
    4c74:	697b      	ldr	r3, [r7, #20]
    4c76:	3301      	adds	r3, #1
    4c78:	617b      	str	r3, [r7, #20]
    4c7a:	697b      	ldr	r3, [r7, #20]
    4c7c:	2b07      	cmp	r3, #7
    4c7e:	ddd8      	ble.n	4c32 <sw_sha256_final+0xde>
}
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	b006      	add	sp, #24
    4c86:	bd80      	pop	{r7, pc}
    4c88:	00009d2d 	.word	0x00009d2d
    4c8c:	0000443d 	.word	0x0000443d

00004c90 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate datastructure
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    4c90:	b580      	push	{r7, lr}
    4c92:	b084      	sub	sp, #16
    4c94:	af00      	add	r7, sp, #0
    4c96:	6078      	str	r0, [r7, #4]
    4c98:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    4c9a:	230f      	movs	r3, #15
    4c9c:	18fb      	adds	r3, r7, r3
    4c9e:	22f0      	movs	r2, #240	; 0xf0
    4ca0:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	781b      	ldrb	r3, [r3, #0]
    4ca6:	2b05      	cmp	r3, #5
    4ca8:	d824      	bhi.n	4cf4 <hal_iface_init+0x64>
    4caa:	009a      	lsls	r2, r3, #2
    4cac:	4b16      	ldr	r3, [pc, #88]	; (4d08 <hal_iface_init+0x78>)
    4cae:	18d3      	adds	r3, r2, r3
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    4cb4:	683b      	ldr	r3, [r7, #0]
    4cb6:	4a15      	ldr	r2, [pc, #84]	; (4d0c <hal_iface_init+0x7c>)
    4cb8:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
    4cba:	683b      	ldr	r3, [r7, #0]
    4cbc:	4a14      	ldr	r2, [pc, #80]	; (4d10 <hal_iface_init+0x80>)
    4cbe:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
    4cc0:	683b      	ldr	r3, [r7, #0]
    4cc2:	4a14      	ldr	r2, [pc, #80]	; (4d14 <hal_iface_init+0x84>)
    4cc4:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
    4cc6:	683b      	ldr	r3, [r7, #0]
    4cc8:	4a13      	ldr	r2, [pc, #76]	; (4d18 <hal_iface_init+0x88>)
    4cca:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
    4ccc:	683b      	ldr	r3, [r7, #0]
    4cce:	4a13      	ldr	r2, [pc, #76]	; (4d1c <hal_iface_init+0x8c>)
    4cd0:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
    4cd2:	683b      	ldr	r3, [r7, #0]
    4cd4:	4a12      	ldr	r2, [pc, #72]	; (4d20 <hal_iface_init+0x90>)
    4cd6:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
    4cd8:	683b      	ldr	r3, [r7, #0]
    4cda:	4a12      	ldr	r2, [pc, #72]	; (4d24 <hal_iface_init+0x94>)
    4cdc:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
    4cde:	683b      	ldr	r3, [r7, #0]
    4ce0:	4a11      	ldr	r2, [pc, #68]	; (4d28 <hal_iface_init+0x98>)
    4ce2:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
    4ce4:	683b      	ldr	r3, [r7, #0]
    4ce6:	2200      	movs	r2, #0
    4ce8:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
    4cea:	230f      	movs	r3, #15
    4cec:	18fb      	adds	r3, r7, r3
    4cee:	2200      	movs	r2, #0
    4cf0:	701a      	strb	r2, [r3, #0]
        #endif
        break;
    4cf2:	e002      	b.n	4cfa <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
    4cf4:	46c0      	nop			; (mov r8, r8)
    4cf6:	e000      	b.n	4cfa <hal_iface_init+0x6a>
        break;
    4cf8:	46c0      	nop			; (mov r8, r8)
    }
    return status;
    4cfa:	230f      	movs	r3, #15
    4cfc:	18fb      	adds	r3, r7, r3
    4cfe:	781b      	ldrb	r3, [r3, #0]
}
    4d00:	0018      	movs	r0, r3
    4d02:	46bd      	mov	sp, r7
    4d04:	b004      	add	sp, #16
    4d06:	bd80      	pop	{r7, pc}
    4d08:	0000b280 	.word	0x0000b280
    4d0c:	00004f79 	.word	0x00004f79
    4d10:	0000513d 	.word	0x0000513d
    4d14:	000051f5 	.word	0x000051f5
    4d18:	00005151 	.word	0x00005151
    4d1c:	000055bd 	.word	0x000055bd
    4d20:	000053e5 	.word	0x000053e5
    4d24:	0000552d 	.word	0x0000552d
    4d28:	0000564d 	.word	0x0000564d

00004d2c <hal_iface_release>:
 * \param[in] ifacetype - the type of physical interface to release
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType ifacetype, void *hal_data)
{
    4d2c:	b590      	push	{r4, r7, lr}
    4d2e:	b085      	sub	sp, #20
    4d30:	af00      	add	r7, sp, #0
    4d32:	0002      	movs	r2, r0
    4d34:	6039      	str	r1, [r7, #0]
    4d36:	1dfb      	adds	r3, r7, #7
    4d38:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4d3a:	230f      	movs	r3, #15
    4d3c:	18fb      	adds	r3, r7, r3
    4d3e:	22e1      	movs	r2, #225	; 0xe1
    4d40:	701a      	strb	r2, [r3, #0]

    switch (ifacetype)
    4d42:	1dfb      	adds	r3, r7, #7
    4d44:	781b      	ldrb	r3, [r3, #0]
    4d46:	2b05      	cmp	r3, #5
    4d48:	d80d      	bhi.n	4d66 <hal_iface_release+0x3a>
    4d4a:	009a      	lsls	r2, r3, #2
    4d4c:	4b0b      	ldr	r3, [pc, #44]	; (4d7c <hal_iface_release+0x50>)
    4d4e:	18d3      	adds	r3, r2, r3
    4d50:	681b      	ldr	r3, [r3, #0]
    4d52:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
            #ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    4d54:	230f      	movs	r3, #15
    4d56:	18fc      	adds	r4, r7, r3
    4d58:	683b      	ldr	r3, [r7, #0]
    4d5a:	0018      	movs	r0, r3
    4d5c:	4b08      	ldr	r3, [pc, #32]	; (4d80 <hal_iface_release+0x54>)
    4d5e:	4798      	blx	r3
    4d60:	0003      	movs	r3, r0
    4d62:	7023      	strb	r3, [r4, #0]
            #endif
        break;
    4d64:	e002      	b.n	4d6c <hal_iface_release+0x40>
#ifdef ATCA_HAL_SIM
        status = hal_sim_release(hal_data);
#endif
        break;
    default:
        break;
    4d66:	46c0      	nop			; (mov r8, r8)
    4d68:	e000      	b.n	4d6c <hal_iface_release+0x40>
        break;
    4d6a:	46c0      	nop			; (mov r8, r8)
    }

    return status;
    4d6c:	230f      	movs	r3, #15
    4d6e:	18fb      	adds	r3, r7, r3
    4d70:	781b      	ldrb	r3, [r3, #0]
}
    4d72:	0018      	movs	r0, r3
    4d74:	46bd      	mov	sp, r7
    4d76:	b005      	add	sp, #20
    4d78:	bd90      	pop	{r4, r7, pc}
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	0000b298 	.word	0x0000b298
    4d80:	0000564d 	.word	0x0000564d

00004d84 <system_interrupt_enable>:
{
    4d84:	b580      	push	{r7, lr}
    4d86:	b082      	sub	sp, #8
    4d88:	af00      	add	r7, sp, #0
    4d8a:	0002      	movs	r2, r0
    4d8c:	1dfb      	adds	r3, r7, #7
    4d8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4d90:	4b06      	ldr	r3, [pc, #24]	; (4dac <system_interrupt_enable+0x28>)
    4d92:	1dfa      	adds	r2, r7, #7
    4d94:	7812      	ldrb	r2, [r2, #0]
    4d96:	0011      	movs	r1, r2
    4d98:	221f      	movs	r2, #31
    4d9a:	400a      	ands	r2, r1
    4d9c:	2101      	movs	r1, #1
    4d9e:	4091      	lsls	r1, r2
    4da0:	000a      	movs	r2, r1
    4da2:	601a      	str	r2, [r3, #0]
}
    4da4:	46c0      	nop			; (mov r8, r8)
    4da6:	46bd      	mov	sp, r7
    4da8:	b002      	add	sp, #8
    4daa:	bd80      	pop	{r7, pc}
    4dac:	e000e100 	.word	0xe000e100

00004db0 <system_interrupt_disable>:
{
    4db0:	b580      	push	{r7, lr}
    4db2:	b082      	sub	sp, #8
    4db4:	af00      	add	r7, sp, #0
    4db6:	0002      	movs	r2, r0
    4db8:	1dfb      	adds	r3, r7, #7
    4dba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4dbc:	4a07      	ldr	r2, [pc, #28]	; (4ddc <system_interrupt_disable+0x2c>)
    4dbe:	1dfb      	adds	r3, r7, #7
    4dc0:	781b      	ldrb	r3, [r3, #0]
    4dc2:	0019      	movs	r1, r3
    4dc4:	231f      	movs	r3, #31
    4dc6:	400b      	ands	r3, r1
    4dc8:	2101      	movs	r1, #1
    4dca:	4099      	lsls	r1, r3
    4dcc:	000b      	movs	r3, r1
    4dce:	0019      	movs	r1, r3
    4dd0:	2380      	movs	r3, #128	; 0x80
    4dd2:	50d1      	str	r1, [r2, r3]
}
    4dd4:	46c0      	nop			; (mov r8, r8)
    4dd6:	46bd      	mov	sp, r7
    4dd8:	b002      	add	sp, #8
    4dda:	bd80      	pop	{r7, pc}
    4ddc:	e000e100 	.word	0xe000e100

00004de0 <i2c_master_is_syncing>:
{
    4de0:	b580      	push	{r7, lr}
    4de2:	b084      	sub	sp, #16
    4de4:	af00      	add	r7, sp, #0
    4de6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	681b      	ldr	r3, [r3, #0]
    4dec:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	69db      	ldr	r3, [r3, #28]
    4df2:	2207      	movs	r2, #7
    4df4:	4013      	ands	r3, r2
    4df6:	1e5a      	subs	r2, r3, #1
    4df8:	4193      	sbcs	r3, r2
    4dfa:	b2db      	uxtb	r3, r3
}
    4dfc:	0018      	movs	r0, r3
    4dfe:	46bd      	mov	sp, r7
    4e00:	b004      	add	sp, #16
    4e02:	bd80      	pop	{r7, pc}

00004e04 <_i2c_master_wait_for_sync>:
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b082      	sub	sp, #8
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    4e0c:	46c0      	nop			; (mov r8, r8)
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	0018      	movs	r0, r3
    4e12:	4b04      	ldr	r3, [pc, #16]	; (4e24 <_i2c_master_wait_for_sync+0x20>)
    4e14:	4798      	blx	r3
    4e16:	1e03      	subs	r3, r0, #0
    4e18:	d1f9      	bne.n	4e0e <_i2c_master_wait_for_sync+0xa>
}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	46bd      	mov	sp, r7
    4e1e:	b002      	add	sp, #8
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	00004de1 	.word	0x00004de1

00004e28 <i2c_master_get_config_defaults>:
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b082      	sub	sp, #8
    4e2c:	af00      	add	r7, sp, #0
    4e2e:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	2264      	movs	r2, #100	; 0x64
    4e34:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	4a1b      	ldr	r2, [pc, #108]	; (4ea8 <i2c_master_get_config_defaults+0x80>)
    4e3a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	2200      	movs	r2, #0
    4e40:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	2200      	movs	r2, #0
    4e46:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	2200      	movs	r2, #0
    4e4c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	2280      	movs	r2, #128	; 0x80
    4e52:	0392      	lsls	r2, r2, #14
    4e54:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	2201      	movs	r2, #1
    4e5a:	4252      	negs	r2, r2
    4e5c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	2201      	movs	r2, #1
    4e62:	4252      	negs	r2, r2
    4e64:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	2200      	movs	r2, #0
    4e6a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2200      	movs	r2, #0
    4e70:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	2224      	movs	r2, #36	; 0x24
    4e76:	2100      	movs	r1, #0
    4e78:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	2200      	movs	r2, #0
    4e7e:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	222c      	movs	r2, #44	; 0x2c
    4e84:	2100      	movs	r1, #0
    4e86:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	222d      	movs	r2, #45	; 0x2d
    4e8c:	2100      	movs	r1, #0
    4e8e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	222e      	movs	r2, #46	; 0x2e
    4e94:	2100      	movs	r1, #0
    4e96:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	22d7      	movs	r2, #215	; 0xd7
    4e9c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	46bd      	mov	sp, r7
    4ea2:	b002      	add	sp, #8
    4ea4:	bd80      	pop	{r7, pc}
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	00000d48 	.word	0x00000d48

00004eac <i2c_master_enable>:
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b084      	sub	sp, #16
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	681b      	ldr	r3, [r3, #0]
    4eb8:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
    4eba:	2300      	movs	r3, #0
    4ebc:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	0018      	movs	r0, r3
    4ec2:	4b14      	ldr	r3, [pc, #80]	; (4f14 <i2c_master_enable+0x68>)
    4ec4:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4ec6:	68bb      	ldr	r3, [r7, #8]
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	2202      	movs	r2, #2
    4ecc:	431a      	orrs	r2, r3
    4ece:	68bb      	ldr	r3, [r7, #8]
    4ed0:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	0018      	movs	r0, r3
    4ed8:	4b0f      	ldr	r3, [pc, #60]	; (4f18 <i2c_master_enable+0x6c>)
    4eda:	4798      	blx	r3
    4edc:	0003      	movs	r3, r0
    4ede:	0018      	movs	r0, r3
    4ee0:	4b0e      	ldr	r3, [pc, #56]	; (4f1c <i2c_master_enable+0x70>)
    4ee2:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4ee4:	e00c      	b.n	4f00 <i2c_master_enable+0x54>
		timeout_counter++;
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	3301      	adds	r3, #1
    4eea:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	88db      	ldrh	r3, [r3, #6]
    4ef0:	001a      	movs	r2, r3
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	429a      	cmp	r2, r3
    4ef6:	d803      	bhi.n	4f00 <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4ef8:	68bb      	ldr	r3, [r7, #8]
    4efa:	2210      	movs	r2, #16
    4efc:	835a      	strh	r2, [r3, #26]
			return;
    4efe:	e006      	b.n	4f0e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4f00:	68bb      	ldr	r3, [r7, #8]
    4f02:	8b5b      	ldrh	r3, [r3, #26]
    4f04:	b29b      	uxth	r3, r3
    4f06:	001a      	movs	r2, r3
    4f08:	2310      	movs	r3, #16
    4f0a:	4013      	ands	r3, r2
    4f0c:	d0eb      	beq.n	4ee6 <i2c_master_enable+0x3a>
}
    4f0e:	46bd      	mov	sp, r7
    4f10:	b004      	add	sp, #16
    4f12:	bd80      	pop	{r7, pc}
    4f14:	00004e05 	.word	0x00004e05
    4f18:	00006965 	.word	0x00006965
    4f1c:	00004d85 	.word	0x00004d85

00004f20 <i2c_master_disable>:
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b084      	sub	sp, #16
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	0018      	movs	r0, r3
    4f34:	4b0d      	ldr	r3, [pc, #52]	; (4f6c <i2c_master_disable+0x4c>)
    4f36:	4798      	blx	r3
    4f38:	0003      	movs	r3, r0
    4f3a:	0018      	movs	r0, r3
    4f3c:	4b0c      	ldr	r3, [pc, #48]	; (4f70 <i2c_master_disable+0x50>)
    4f3e:	4798      	blx	r3
	_i2c_master_wait_for_sync(module);
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	0018      	movs	r0, r3
    4f44:	4b0b      	ldr	r3, [pc, #44]	; (4f74 <i2c_master_disable+0x54>)
    4f46:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    4f48:	68fb      	ldr	r3, [r7, #12]
    4f4a:	2283      	movs	r2, #131	; 0x83
    4f4c:	751a      	strb	r2, [r3, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    4f4e:	68fb      	ldr	r3, [r7, #12]
    4f50:	2283      	movs	r2, #131	; 0x83
    4f52:	761a      	strb	r2, [r3, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    4f54:	68fb      	ldr	r3, [r7, #12]
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	2202      	movs	r2, #2
    4f5a:	4393      	bics	r3, r2
    4f5c:	001a      	movs	r2, r3
    4f5e:	68fb      	ldr	r3, [r7, #12]
    4f60:	601a      	str	r2, [r3, #0]
}
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	46bd      	mov	sp, r7
    4f66:	b004      	add	sp, #16
    4f68:	bd80      	pop	{r7, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	00006965 	.word	0x00006965
    4f70:	00004db1 	.word	0x00004db1
    4f74:	00004e05 	.word	0x00004e05

00004f78 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
    4f80:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    4f82:	683b      	ldr	r3, [r7, #0]
    4f84:	795b      	ldrb	r3, [r3, #5]
    4f86:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    4f8c:	4b5b      	ldr	r3, [pc, #364]	; (50fc <hal_i2c_init+0x184>)
    4f8e:	681b      	ldr	r3, [r3, #0]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d10d      	bne.n	4fb0 <hal_i2c_init+0x38>
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    4f94:	2300      	movs	r3, #0
    4f96:	617b      	str	r3, [r7, #20]
    4f98:	e007      	b.n	4faa <hal_i2c_init+0x32>
            i2c_hal_data[i] = NULL;
    4f9a:	4b59      	ldr	r3, [pc, #356]	; (5100 <hal_i2c_init+0x188>)
    4f9c:	697a      	ldr	r2, [r7, #20]
    4f9e:	0092      	lsls	r2, r2, #2
    4fa0:	2100      	movs	r1, #0
    4fa2:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    4fa4:	697b      	ldr	r3, [r7, #20]
    4fa6:	3301      	adds	r3, #1
    4fa8:	617b      	str	r3, [r7, #20]
    4faa:	697b      	ldr	r3, [r7, #20]
    4fac:	2b05      	cmp	r3, #5
    4fae:	ddf4      	ble.n	4f9a <hal_i2c_init+0x22>

    i2c_bus_ref_ct++;  // total across buses
    4fb0:	4b52      	ldr	r3, [pc, #328]	; (50fc <hal_i2c_init+0x184>)
    4fb2:	681b      	ldr	r3, [r3, #0]
    4fb4:	1c5a      	adds	r2, r3, #1
    4fb6:	4b51      	ldr	r3, [pc, #324]	; (50fc <hal_i2c_init+0x184>)
    4fb8:	601a      	str	r2, [r3, #0]
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    4fba:	693b      	ldr	r3, [r7, #16]
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	da00      	bge.n	4fc2 <hal_i2c_init+0x4a>
    4fc0:	e096      	b.n	50f0 <hal_i2c_init+0x178>
    4fc2:	693b      	ldr	r3, [r7, #16]
    4fc4:	2b05      	cmp	r3, #5
    4fc6:	dd00      	ble.n	4fca <hal_i2c_init+0x52>
    4fc8:	e092      	b.n	50f0 <hal_i2c_init+0x178>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
    4fca:	4b4d      	ldr	r3, [pc, #308]	; (5100 <hal_i2c_init+0x188>)
    4fcc:	693a      	ldr	r2, [r7, #16]
    4fce:	0092      	lsls	r2, r2, #2
    4fd0:	58d3      	ldr	r3, [r2, r3]
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d000      	beq.n	4fd8 <hal_i2c_init+0x60>
    4fd6:	e07c      	b.n	50d2 <hal_i2c_init+0x15a>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    4fd8:	2030      	movs	r0, #48	; 0x30
    4fda:	4b4a      	ldr	r3, [pc, #296]	; (5104 <hal_i2c_init+0x18c>)
    4fdc:	4798      	blx	r3
    4fde:	0003      	movs	r3, r0
    4fe0:	0019      	movs	r1, r3
    4fe2:	4b47      	ldr	r3, [pc, #284]	; (5100 <hal_i2c_init+0x188>)
    4fe4:	693a      	ldr	r2, [r7, #16]
    4fe6:	0092      	lsls	r2, r2, #2
    4fe8:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    4fea:	4b45      	ldr	r3, [pc, #276]	; (5100 <hal_i2c_init+0x188>)
    4fec:	693a      	ldr	r2, [r7, #16]
    4fee:	0092      	lsls	r2, r2, #2
    4ff0:	58d3      	ldr	r3, [r2, r3]
    4ff2:	2201      	movs	r2, #1
    4ff4:	629a      	str	r2, [r3, #40]	; 0x28
            i2c_master_get_config_defaults(&config_i2c_master);
    4ff6:	4b44      	ldr	r3, [pc, #272]	; (5108 <hal_i2c_init+0x190>)
    4ff8:	0018      	movs	r0, r3
    4ffa:	4b44      	ldr	r3, [pc, #272]	; (510c <hal_i2c_init+0x194>)
    4ffc:	4798      	blx	r3
                config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif
#ifdef __SAMR30G18A__
                config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    4ffe:	4b42      	ldr	r3, [pc, #264]	; (5108 <hal_i2c_init+0x190>)
    5000:	4a43      	ldr	r2, [pc, #268]	; (5110 <hal_i2c_init+0x198>)
    5002:	61da      	str	r2, [r3, #28]
                config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    5004:	4b40      	ldr	r3, [pc, #256]	; (5108 <hal_i2c_init+0x190>)
    5006:	4a43      	ldr	r2, [pc, #268]	; (5114 <hal_i2c_init+0x19c>)
    5008:	621a      	str	r2, [r3, #32]
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    500a:	683b      	ldr	r3, [r7, #0]
    500c:	6898      	ldr	r0, [r3, #8]
    500e:	4b42      	ldr	r3, [pc, #264]	; (5118 <hal_i2c_init+0x1a0>)
    5010:	22fa      	movs	r2, #250	; 0xfa
    5012:	0091      	lsls	r1, r2, #2
    5014:	4798      	blx	r3
    5016:	0003      	movs	r3, r0
    5018:	001a      	movs	r2, r3
    501a:	4b3b      	ldr	r3, [pc, #236]	; (5108 <hal_i2c_init+0x190>)
    501c:	601a      	str	r2, [r3, #0]

            switch (bus)
    501e:	693b      	ldr	r3, [r7, #16]
    5020:	2b05      	cmp	r3, #5
    5022:	d848      	bhi.n	50b6 <hal_i2c_init+0x13e>
    5024:	693b      	ldr	r3, [r7, #16]
    5026:	009a      	lsls	r2, r3, #2
    5028:	4b3c      	ldr	r3, [pc, #240]	; (511c <hal_i2c_init+0x1a4>)
    502a:	18d3      	adds	r3, r2, r3
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    5030:	4b33      	ldr	r3, [pc, #204]	; (5100 <hal_i2c_init+0x188>)
    5032:	693a      	ldr	r2, [r7, #16]
    5034:	0092      	lsls	r2, r2, #2
    5036:	58d3      	ldr	r3, [r2, r3]
    5038:	0018      	movs	r0, r3
    503a:	4a33      	ldr	r2, [pc, #204]	; (5108 <hal_i2c_init+0x190>)
    503c:	2384      	movs	r3, #132	; 0x84
    503e:	05db      	lsls	r3, r3, #23
    5040:	0019      	movs	r1, r3
    5042:	4b37      	ldr	r3, [pc, #220]	; (5120 <hal_i2c_init+0x1a8>)
    5044:	4798      	blx	r3
    5046:	e036      	b.n	50b6 <hal_i2c_init+0x13e>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    5048:	4b2d      	ldr	r3, [pc, #180]	; (5100 <hal_i2c_init+0x188>)
    504a:	693a      	ldr	r2, [r7, #16]
    504c:	0092      	lsls	r2, r2, #2
    504e:	58d3      	ldr	r3, [r2, r3]
    5050:	0018      	movs	r0, r3
    5052:	4b2d      	ldr	r3, [pc, #180]	; (5108 <hal_i2c_init+0x190>)
    5054:	4933      	ldr	r1, [pc, #204]	; (5124 <hal_i2c_init+0x1ac>)
    5056:	001a      	movs	r2, r3
    5058:	4b31      	ldr	r3, [pc, #196]	; (5120 <hal_i2c_init+0x1a8>)
    505a:	4798      	blx	r3
    505c:	e02b      	b.n	50b6 <hal_i2c_init+0x13e>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    505e:	4b28      	ldr	r3, [pc, #160]	; (5100 <hal_i2c_init+0x188>)
    5060:	693a      	ldr	r2, [r7, #16]
    5062:	0092      	lsls	r2, r2, #2
    5064:	58d3      	ldr	r3, [r2, r3]
    5066:	0018      	movs	r0, r3
    5068:	4b27      	ldr	r3, [pc, #156]	; (5108 <hal_i2c_init+0x190>)
    506a:	492f      	ldr	r1, [pc, #188]	; (5128 <hal_i2c_init+0x1b0>)
    506c:	001a      	movs	r2, r3
    506e:	4b2c      	ldr	r3, [pc, #176]	; (5120 <hal_i2c_init+0x1a8>)
    5070:	4798      	blx	r3
    5072:	e020      	b.n	50b6 <hal_i2c_init+0x13e>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    5074:	4b22      	ldr	r3, [pc, #136]	; (5100 <hal_i2c_init+0x188>)
    5076:	693a      	ldr	r2, [r7, #16]
    5078:	0092      	lsls	r2, r2, #2
    507a:	58d3      	ldr	r3, [r2, r3]
    507c:	0018      	movs	r0, r3
    507e:	4b22      	ldr	r3, [pc, #136]	; (5108 <hal_i2c_init+0x190>)
    5080:	492a      	ldr	r1, [pc, #168]	; (512c <hal_i2c_init+0x1b4>)
    5082:	001a      	movs	r2, r3
    5084:	4b26      	ldr	r3, [pc, #152]	; (5120 <hal_i2c_init+0x1a8>)
    5086:	4798      	blx	r3
    5088:	e015      	b.n	50b6 <hal_i2c_init+0x13e>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    508a:	4b1d      	ldr	r3, [pc, #116]	; (5100 <hal_i2c_init+0x188>)
    508c:	693a      	ldr	r2, [r7, #16]
    508e:	0092      	lsls	r2, r2, #2
    5090:	58d3      	ldr	r3, [r2, r3]
    5092:	0018      	movs	r0, r3
    5094:	4b1c      	ldr	r3, [pc, #112]	; (5108 <hal_i2c_init+0x190>)
    5096:	4926      	ldr	r1, [pc, #152]	; (5130 <hal_i2c_init+0x1b8>)
    5098:	001a      	movs	r2, r3
    509a:	4b21      	ldr	r3, [pc, #132]	; (5120 <hal_i2c_init+0x1a8>)
    509c:	4798      	blx	r3
    509e:	e00a      	b.n	50b6 <hal_i2c_init+0x13e>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    50a0:	4b17      	ldr	r3, [pc, #92]	; (5100 <hal_i2c_init+0x188>)
    50a2:	693a      	ldr	r2, [r7, #16]
    50a4:	0092      	lsls	r2, r2, #2
    50a6:	58d3      	ldr	r3, [r2, r3]
    50a8:	0018      	movs	r0, r3
    50aa:	4b17      	ldr	r3, [pc, #92]	; (5108 <hal_i2c_init+0x190>)
    50ac:	4921      	ldr	r1, [pc, #132]	; (5134 <hal_i2c_init+0x1bc>)
    50ae:	001a      	movs	r2, r3
    50b0:	4b1b      	ldr	r3, [pc, #108]	; (5120 <hal_i2c_init+0x1a8>)
    50b2:	4798      	blx	r3
    50b4:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
    50b6:	4b12      	ldr	r3, [pc, #72]	; (5100 <hal_i2c_init+0x188>)
    50b8:	693a      	ldr	r2, [r7, #16]
    50ba:	0092      	lsls	r2, r2, #2
    50bc:	58d3      	ldr	r3, [r2, r3]
    50be:	693a      	ldr	r2, [r7, #16]
    50c0:	62da      	str	r2, [r3, #44]	; 0x2c
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    50c2:	4b0f      	ldr	r3, [pc, #60]	; (5100 <hal_i2c_init+0x188>)
    50c4:	693a      	ldr	r2, [r7, #16]
    50c6:	0092      	lsls	r2, r2, #2
    50c8:	58d3      	ldr	r3, [r2, r3]
    50ca:	0018      	movs	r0, r3
    50cc:	4b1a      	ldr	r3, [pc, #104]	; (5138 <hal_i2c_init+0x1c0>)
    50ce:	4798      	blx	r3
    50d0:	e006      	b.n	50e0 <hal_i2c_init+0x168>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
    50d2:	4b0b      	ldr	r3, [pc, #44]	; (5100 <hal_i2c_init+0x188>)
    50d4:	693a      	ldr	r2, [r7, #16]
    50d6:	0092      	lsls	r2, r2, #2
    50d8:	58d3      	ldr	r3, [r2, r3]
    50da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50dc:	3201      	adds	r2, #1
    50de:	629a      	str	r2, [r3, #40]	; 0x28
        }

        phal->hal_data = i2c_hal_data[bus];
    50e0:	4b07      	ldr	r3, [pc, #28]	; (5100 <hal_i2c_init+0x188>)
    50e2:	693a      	ldr	r2, [r7, #16]
    50e4:	0092      	lsls	r2, r2, #2
    50e6:	58d2      	ldr	r2, [r2, r3]
    50e8:	68fb      	ldr	r3, [r7, #12]
    50ea:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
    50ec:	2300      	movs	r3, #0
    50ee:	e000      	b.n	50f2 <hal_i2c_init+0x17a>
    }

    return ATCA_COMM_FAIL;
    50f0:	23f0      	movs	r3, #240	; 0xf0
}
    50f2:	0018      	movs	r0, r3
    50f4:	46bd      	mov	sp, r7
    50f6:	b006      	add	sp, #24
    50f8:	bd80      	pop	{r7, pc}
    50fa:	46c0      	nop			; (mov r8, r8)
    50fc:	20000234 	.word	0x20000234
    5100:	20000378 	.word	0x20000378
    5104:	00009cd5 	.word	0x00009cd5
    5108:	20000238 	.word	0x20000238
    510c:	00004e29 	.word	0x00004e29
    5110:	00100002 	.word	0x00100002
    5114:	00110002 	.word	0x00110002
    5118:	00008259 	.word	0x00008259
    511c:	0000b2f0 	.word	0x0000b2f0
    5120:	0000120d 	.word	0x0000120d
    5124:	42000400 	.word	0x42000400
    5128:	42000800 	.word	0x42000800
    512c:	42000c00 	.word	0x42000c00
    5130:	42001000 	.word	0x42001000
    5134:	43000400 	.word	0x43000400
    5138:	00004ead 	.word	0x00004ead

0000513c <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    513c:	b580      	push	{r7, lr}
    513e:	b082      	sub	sp, #8
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
    5144:	2300      	movs	r3, #0
}
    5146:	0018      	movs	r0, r3
    5148:	46bd      	mov	sp, r7
    514a:	b002      	add	sp, #8
    514c:	bd80      	pop	{r7, pc}
	...

00005150 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    5150:	b580      	push	{r7, lr}
    5152:	b08a      	sub	sp, #40	; 0x28
    5154:	af00      	add	r7, sp, #0
    5156:	60f8      	str	r0, [r7, #12]
    5158:	60b9      	str	r1, [r7, #8]
    515a:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    515c:	68fb      	ldr	r3, [r7, #12]
    515e:	0018      	movs	r0, r3
    5160:	4b21      	ldr	r3, [pc, #132]	; (51e8 <hal_i2c_send+0x98>)
    5162:	4798      	blx	r3
    5164:	0003      	movs	r3, r0
    5166:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    5168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    516a:	795b      	ldrb	r3, [r3, #5]
    516c:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5170:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    5172:	085b      	lsrs	r3, r3, #1
    5174:	b2db      	uxtb	r3, r3
    5176:	b29a      	uxth	r2, r3
    5178:	2314      	movs	r3, #20
    517a:	18fb      	adds	r3, r7, r3
    517c:	801a      	strh	r2, [r3, #0]
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	b29a      	uxth	r2, r3
    5182:	2314      	movs	r3, #20
    5184:	18fb      	adds	r3, r7, r3
    5186:	805a      	strh	r2, [r3, #2]
    5188:	2314      	movs	r3, #20
    518a:	18fb      	adds	r3, r7, r3
    518c:	68ba      	ldr	r2, [r7, #8]
    518e:	605a      	str	r2, [r3, #4]
    5190:	2314      	movs	r3, #20
    5192:	18fb      	adds	r3, r7, r3
    5194:	2200      	movs	r2, #0
    5196:	721a      	strb	r2, [r3, #8]
    5198:	2314      	movs	r3, #20
    519a:	18fb      	adds	r3, r7, r3
    519c:	2200      	movs	r2, #0
    519e:	725a      	strb	r2, [r3, #9]
    51a0:	2314      	movs	r3, #20
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	2200      	movs	r2, #0
    51a6:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    51a8:	68bb      	ldr	r3, [r7, #8]
    51aa:	2203      	movs	r2, #3
    51ac:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	3301      	adds	r3, #1
    51b2:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	b29a      	uxth	r2, r3
    51b8:	2314      	movs	r3, #20
    51ba:	18fb      	adds	r3, r7, r3
    51bc:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    51be:	4b0b      	ldr	r3, [pc, #44]	; (51ec <hal_i2c_send+0x9c>)
    51c0:	6a3a      	ldr	r2, [r7, #32]
    51c2:	0092      	lsls	r2, r2, #2
    51c4:	58d3      	ldr	r3, [r2, r3]
    51c6:	001a      	movs	r2, r3
    51c8:	2314      	movs	r3, #20
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	0019      	movs	r1, r3
    51ce:	0010      	movs	r0, r2
    51d0:	4b07      	ldr	r3, [pc, #28]	; (51f0 <hal_i2c_send+0xa0>)
    51d2:	4798      	blx	r3
    51d4:	1e03      	subs	r3, r0, #0
    51d6:	d001      	beq.n	51dc <hal_i2c_send+0x8c>
        return ATCA_COMM_FAIL;
    51d8:	23f0      	movs	r3, #240	; 0xf0
    51da:	e000      	b.n	51de <hal_i2c_send+0x8e>

    return ATCA_SUCCESS;
    51dc:	2300      	movs	r3, #0
}
    51de:	0018      	movs	r0, r3
    51e0:	46bd      	mov	sp, r7
    51e2:	b00a      	add	sp, #40	; 0x28
    51e4:	bd80      	pop	{r7, pc}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	00003169 	.word	0x00003169
    51ec:	20000378 	.word	0x20000378
    51f0:	00001909 	.word	0x00001909

000051f4 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b08c      	sub	sp, #48	; 0x30
    51f8:	af00      	add	r7, sp, #0
    51fa:	60f8      	str	r0, [r7, #12]
    51fc:	60b9      	str	r1, [r7, #8]
    51fe:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    5200:	68fb      	ldr	r3, [r7, #12]
    5202:	0018      	movs	r0, r3
    5204:	4b29      	ldr	r3, [pc, #164]	; (52ac <hal_i2c_receive+0xb8>)
    5206:	4798      	blx	r3
    5208:	0003      	movs	r3, r0
    520a:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    520e:	795b      	ldrb	r3, [r3, #5]
    5210:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    5212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5216:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
    5218:	2301      	movs	r3, #1
    521a:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    521e:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    5220:	085b      	lsrs	r3, r3, #1
    5222:	b2db      	uxtb	r3, r3
    5224:	b29a      	uxth	r2, r3
    5226:	2314      	movs	r3, #20
    5228:	18fb      	adds	r3, r7, r3
    522a:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
    5230:	2314      	movs	r3, #20
    5232:	18fb      	adds	r3, r7, r3
    5234:	805a      	strh	r2, [r3, #2]
    5236:	2314      	movs	r3, #20
    5238:	18fb      	adds	r3, r7, r3
    523a:	68ba      	ldr	r2, [r7, #8]
    523c:	605a      	str	r2, [r3, #4]
    523e:	2314      	movs	r3, #20
    5240:	18fb      	adds	r3, r7, r3
    5242:	2200      	movs	r2, #0
    5244:	721a      	strb	r2, [r3, #8]
    5246:	2314      	movs	r3, #20
    5248:	18fb      	adds	r3, r7, r3
    524a:	2200      	movs	r2, #0
    524c:	725a      	strb	r2, [r3, #9]
    524e:	2314      	movs	r3, #20
    5250:	18fb      	adds	r3, r7, r3
    5252:	2200      	movs	r2, #0
    5254:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    5256:	e00c      	b.n	5272 <hal_i2c_receive+0x7e>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    5258:	4b15      	ldr	r3, [pc, #84]	; (52b0 <hal_i2c_receive+0xbc>)
    525a:	6a3a      	ldr	r2, [r7, #32]
    525c:	0092      	lsls	r2, r2, #2
    525e:	58d3      	ldr	r3, [r2, r3]
    5260:	001a      	movs	r2, r3
    5262:	2314      	movs	r3, #20
    5264:	18fb      	adds	r3, r7, r3
    5266:	0019      	movs	r1, r3
    5268:	0010      	movs	r0, r2
    526a:	4b12      	ldr	r3, [pc, #72]	; (52b4 <hal_i2c_receive+0xc0>)
    526c:	4798      	blx	r3
    526e:	0003      	movs	r3, r0
    5270:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    5272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5274:	1e5a      	subs	r2, r3, #1
    5276:	62fa      	str	r2, [r7, #44]	; 0x2c
    5278:	2b00      	cmp	r3, #0
    527a:	dd02      	ble.n	5282 <hal_i2c_receive+0x8e>
    527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    527e:	2b00      	cmp	r3, #0
    5280:	d1ea      	bne.n	5258 <hal_i2c_receive+0x64>

    if (status != STATUS_OK)
    5282:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5284:	2b00      	cmp	r3, #0
    5286:	d001      	beq.n	528c <hal_i2c_receive+0x98>
        return ATCA_COMM_FAIL;
    5288:	23f0      	movs	r3, #240	; 0xf0
    528a:	e00a      	b.n	52a2 <hal_i2c_receive+0xae>

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    528c:	2314      	movs	r3, #20
    528e:	18fb      	adds	r3, r7, r3
    5290:	685b      	ldr	r3, [r3, #4]
    5292:	0018      	movs	r0, r3
    5294:	4b08      	ldr	r3, [pc, #32]	; (52b8 <hal_i2c_receive+0xc4>)
    5296:	4798      	blx	r3
    5298:	1e03      	subs	r3, r0, #0
    529a:	d001      	beq.n	52a0 <hal_i2c_receive+0xac>
        return ATCA_COMM_FAIL;
    529c:	23f0      	movs	r3, #240	; 0xf0
    529e:	e000      	b.n	52a2 <hal_i2c_receive+0xae>

    return ATCA_SUCCESS;
    52a0:	2300      	movs	r3, #0
}
    52a2:	0018      	movs	r0, r3
    52a4:	46bd      	mov	sp, r7
    52a6:	b00c      	add	sp, #48	; 0x30
    52a8:	bd80      	pop	{r7, pc}
    52aa:	46c0      	nop			; (mov r8, r8)
    52ac:	00003169 	.word	0x00003169
    52b0:	20000378 	.word	0x20000378
    52b4:	00001751 	.word	0x00001751
    52b8:	00002dfd 	.word	0x00002dfd

000052bc <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    52bc:	b580      	push	{r7, lr}
    52be:	b084      	sub	sp, #16
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
    52c4:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	0018      	movs	r0, r3
    52ca:	4b38      	ldr	r3, [pc, #224]	; (53ac <change_i2c_speed+0xf0>)
    52cc:	4798      	blx	r3
    52ce:	0003      	movs	r3, r0
    52d0:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
    52d2:	68fb      	ldr	r3, [r7, #12]
    52d4:	795b      	ldrb	r3, [r3, #5]
    52d6:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
    52d8:	4b35      	ldr	r3, [pc, #212]	; (53b0 <change_i2c_speed+0xf4>)
    52da:	4a36      	ldr	r2, [pc, #216]	; (53b4 <change_i2c_speed+0xf8>)
    52dc:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
    52de:	6838      	ldr	r0, [r7, #0]
    52e0:	4b35      	ldr	r3, [pc, #212]	; (53b8 <change_i2c_speed+0xfc>)
    52e2:	22fa      	movs	r2, #250	; 0xfa
    52e4:	0091      	lsls	r1, r2, #2
    52e6:	4798      	blx	r3
    52e8:	0003      	movs	r3, r0
    52ea:	001a      	movs	r2, r3
    52ec:	4b30      	ldr	r3, [pc, #192]	; (53b0 <change_i2c_speed+0xf4>)
    52ee:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    52f0:	4b32      	ldr	r3, [pc, #200]	; (53bc <change_i2c_speed+0x100>)
    52f2:	68ba      	ldr	r2, [r7, #8]
    52f4:	0092      	lsls	r2, r2, #2
    52f6:	58d3      	ldr	r3, [r2, r3]
    52f8:	0018      	movs	r0, r3
    52fa:	4b31      	ldr	r3, [pc, #196]	; (53c0 <change_i2c_speed+0x104>)
    52fc:	4798      	blx	r3

    switch (bus)
    52fe:	68bb      	ldr	r3, [r7, #8]
    5300:	2b05      	cmp	r3, #5
    5302:	d848      	bhi.n	5396 <change_i2c_speed+0xda>
    5304:	68bb      	ldr	r3, [r7, #8]
    5306:	009a      	lsls	r2, r3, #2
    5308:	4b2e      	ldr	r3, [pc, #184]	; (53c4 <change_i2c_speed+0x108>)
    530a:	18d3      	adds	r3, r2, r3
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    5310:	4b2a      	ldr	r3, [pc, #168]	; (53bc <change_i2c_speed+0x100>)
    5312:	68ba      	ldr	r2, [r7, #8]
    5314:	0092      	lsls	r2, r2, #2
    5316:	58d3      	ldr	r3, [r2, r3]
    5318:	0018      	movs	r0, r3
    531a:	4a25      	ldr	r2, [pc, #148]	; (53b0 <change_i2c_speed+0xf4>)
    531c:	2384      	movs	r3, #132	; 0x84
    531e:	05db      	lsls	r3, r3, #23
    5320:	0019      	movs	r1, r3
    5322:	4b29      	ldr	r3, [pc, #164]	; (53c8 <change_i2c_speed+0x10c>)
    5324:	4798      	blx	r3
    5326:	e036      	b.n	5396 <change_i2c_speed+0xda>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    5328:	4b24      	ldr	r3, [pc, #144]	; (53bc <change_i2c_speed+0x100>)
    532a:	68ba      	ldr	r2, [r7, #8]
    532c:	0092      	lsls	r2, r2, #2
    532e:	58d3      	ldr	r3, [r2, r3]
    5330:	0018      	movs	r0, r3
    5332:	4b1f      	ldr	r3, [pc, #124]	; (53b0 <change_i2c_speed+0xf4>)
    5334:	4925      	ldr	r1, [pc, #148]	; (53cc <change_i2c_speed+0x110>)
    5336:	001a      	movs	r2, r3
    5338:	4b23      	ldr	r3, [pc, #140]	; (53c8 <change_i2c_speed+0x10c>)
    533a:	4798      	blx	r3
    533c:	e02b      	b.n	5396 <change_i2c_speed+0xda>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    533e:	4b1f      	ldr	r3, [pc, #124]	; (53bc <change_i2c_speed+0x100>)
    5340:	68ba      	ldr	r2, [r7, #8]
    5342:	0092      	lsls	r2, r2, #2
    5344:	58d3      	ldr	r3, [r2, r3]
    5346:	0018      	movs	r0, r3
    5348:	4b19      	ldr	r3, [pc, #100]	; (53b0 <change_i2c_speed+0xf4>)
    534a:	4921      	ldr	r1, [pc, #132]	; (53d0 <change_i2c_speed+0x114>)
    534c:	001a      	movs	r2, r3
    534e:	4b1e      	ldr	r3, [pc, #120]	; (53c8 <change_i2c_speed+0x10c>)
    5350:	4798      	blx	r3
    5352:	e020      	b.n	5396 <change_i2c_speed+0xda>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    5354:	4b19      	ldr	r3, [pc, #100]	; (53bc <change_i2c_speed+0x100>)
    5356:	68ba      	ldr	r2, [r7, #8]
    5358:	0092      	lsls	r2, r2, #2
    535a:	58d3      	ldr	r3, [r2, r3]
    535c:	0018      	movs	r0, r3
    535e:	4b14      	ldr	r3, [pc, #80]	; (53b0 <change_i2c_speed+0xf4>)
    5360:	491c      	ldr	r1, [pc, #112]	; (53d4 <change_i2c_speed+0x118>)
    5362:	001a      	movs	r2, r3
    5364:	4b18      	ldr	r3, [pc, #96]	; (53c8 <change_i2c_speed+0x10c>)
    5366:	4798      	blx	r3
    5368:	e015      	b.n	5396 <change_i2c_speed+0xda>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    536a:	4b14      	ldr	r3, [pc, #80]	; (53bc <change_i2c_speed+0x100>)
    536c:	68ba      	ldr	r2, [r7, #8]
    536e:	0092      	lsls	r2, r2, #2
    5370:	58d3      	ldr	r3, [r2, r3]
    5372:	0018      	movs	r0, r3
    5374:	4b0e      	ldr	r3, [pc, #56]	; (53b0 <change_i2c_speed+0xf4>)
    5376:	4918      	ldr	r1, [pc, #96]	; (53d8 <change_i2c_speed+0x11c>)
    5378:	001a      	movs	r2, r3
    537a:	4b13      	ldr	r3, [pc, #76]	; (53c8 <change_i2c_speed+0x10c>)
    537c:	4798      	blx	r3
    537e:	e00a      	b.n	5396 <change_i2c_speed+0xda>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    5380:	4b0e      	ldr	r3, [pc, #56]	; (53bc <change_i2c_speed+0x100>)
    5382:	68ba      	ldr	r2, [r7, #8]
    5384:	0092      	lsls	r2, r2, #2
    5386:	58d3      	ldr	r3, [r2, r3]
    5388:	0018      	movs	r0, r3
    538a:	4b09      	ldr	r3, [pc, #36]	; (53b0 <change_i2c_speed+0xf4>)
    538c:	4913      	ldr	r1, [pc, #76]	; (53dc <change_i2c_speed+0x120>)
    538e:	001a      	movs	r2, r3
    5390:	4b0d      	ldr	r3, [pc, #52]	; (53c8 <change_i2c_speed+0x10c>)
    5392:	4798      	blx	r3
    5394:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    5396:	4b09      	ldr	r3, [pc, #36]	; (53bc <change_i2c_speed+0x100>)
    5398:	68ba      	ldr	r2, [r7, #8]
    539a:	0092      	lsls	r2, r2, #2
    539c:	58d3      	ldr	r3, [r2, r3]
    539e:	0018      	movs	r0, r3
    53a0:	4b0f      	ldr	r3, [pc, #60]	; (53e0 <change_i2c_speed+0x124>)
    53a2:	4798      	blx	r3
}
    53a4:	46c0      	nop			; (mov r8, r8)
    53a6:	46bd      	mov	sp, r7
    53a8:	b004      	add	sp, #16
    53aa:	bd80      	pop	{r7, pc}
    53ac:	00003169 	.word	0x00003169
    53b0:	20000238 	.word	0x20000238
    53b4:	00002710 	.word	0x00002710
    53b8:	00008259 	.word	0x00008259
    53bc:	20000378 	.word	0x20000378
    53c0:	00004f21 	.word	0x00004f21
    53c4:	0000b308 	.word	0x0000b308
    53c8:	0000120d 	.word	0x0000120d
    53cc:	42000400 	.word	0x42000400
    53d0:	42000800 	.word	0x42000800
    53d4:	42000c00 	.word	0x42000c00
    53d8:	42001000 	.word	0x42001000
    53dc:	43000400 	.word	0x43000400
    53e0:	00004ead 	.word	0x00004ead

000053e4 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b08c      	sub	sp, #48	; 0x30
    53e8:	af00      	add	r7, sp, #0
    53ea:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	0018      	movs	r0, r3
    53f0:	4b45      	ldr	r3, [pc, #276]	; (5508 <hal_i2c_wake+0x124>)
    53f2:	4798      	blx	r3
    53f4:	0003      	movs	r3, r0
    53f6:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    53f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    53fa:	795b      	ldrb	r3, [r3, #5]
    53fc:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    53fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5402:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
    5404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5406:	689b      	ldr	r3, [r3, #8]
    5408:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
    540a:	2301      	movs	r3, #1
    540c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    540e:	2314      	movs	r3, #20
    5410:	18fb      	adds	r3, r7, r3
    5412:	4a3e      	ldr	r2, [pc, #248]	; (550c <hal_i2c_wake+0x128>)
    5414:	6812      	ldr	r2, [r2, #0]
    5416:	601a      	str	r2, [r3, #0]

    if (bdrt != 100000)    // if not already at 100KHz, change it
    5418:	69fb      	ldr	r3, [r7, #28]
    541a:	4a3d      	ldr	r2, [pc, #244]	; (5510 <hal_i2c_wake+0x12c>)
    541c:	4293      	cmp	r3, r2
    541e:	d005      	beq.n	542c <hal_i2c_wake+0x48>
        change_i2c_speed(iface, 100000);
    5420:	4a3b      	ldr	r2, [pc, #236]	; (5510 <hal_i2c_wake+0x12c>)
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	0011      	movs	r1, r2
    5426:	0018      	movs	r0, r3
    5428:	4b3a      	ldr	r3, [pc, #232]	; (5514 <hal_i2c_wake+0x130>)
    542a:	4798      	blx	r3

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    542c:	2308      	movs	r3, #8
    542e:	18fb      	adds	r3, r7, r3
    5430:	2200      	movs	r2, #0
    5432:	801a      	strh	r2, [r3, #0]
    5434:	2308      	movs	r3, #8
    5436:	18fb      	adds	r3, r7, r3
    5438:	2200      	movs	r2, #0
    543a:	805a      	strh	r2, [r3, #2]
    543c:	2308      	movs	r3, #8
    543e:	18fb      	adds	r3, r7, r3
    5440:	2218      	movs	r2, #24
    5442:	18ba      	adds	r2, r7, r2
    5444:	605a      	str	r2, [r3, #4]
    5446:	2308      	movs	r3, #8
    5448:	18fb      	adds	r3, r7, r3
    544a:	2200      	movs	r2, #0
    544c:	721a      	strb	r2, [r3, #8]
    544e:	2308      	movs	r3, #8
    5450:	18fb      	adds	r3, r7, r3
    5452:	2200      	movs	r2, #0
    5454:	725a      	strb	r2, [r3, #9]
    5456:	2308      	movs	r3, #8
    5458:	18fb      	adds	r3, r7, r3
    545a:	2200      	movs	r2, #0
    545c:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    545e:	4b2e      	ldr	r3, [pc, #184]	; (5518 <hal_i2c_wake+0x134>)
    5460:	6a3a      	ldr	r2, [r7, #32]
    5462:	0092      	lsls	r2, r2, #2
    5464:	58d3      	ldr	r3, [r2, r3]
    5466:	001a      	movs	r2, r3
    5468:	2308      	movs	r3, #8
    546a:	18fb      	adds	r3, r7, r3
    546c:	0019      	movs	r1, r3
    546e:	0010      	movs	r0, r2
    5470:	4b2a      	ldr	r3, [pc, #168]	; (551c <hal_i2c_wake+0x138>)
    5472:	4798      	blx	r3

    ///atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
	atca_delay_ms(1);
    5474:	2001      	movs	r0, #1
    5476:	4b2a      	ldr	r3, [pc, #168]	; (5520 <hal_i2c_wake+0x13c>)
    5478:	4798      	blx	r3
    packet.address = cfg->atcai2c.slave_address >> 1;
    547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    547c:	791b      	ldrb	r3, [r3, #4]
    547e:	085b      	lsrs	r3, r3, #1
    5480:	b2db      	uxtb	r3, r3
    5482:	b29a      	uxth	r2, r3
    5484:	2308      	movs	r3, #8
    5486:	18fb      	adds	r3, r7, r3
    5488:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
    548a:	2308      	movs	r3, #8
    548c:	18fb      	adds	r3, r7, r3
    548e:	2204      	movs	r2, #4
    5490:	805a      	strh	r2, [r3, #2]
    packet.data = data;
    5492:	2308      	movs	r3, #8
    5494:	18fb      	adds	r3, r7, r3
    5496:	2218      	movs	r2, #24
    5498:	18ba      	adds	r2, r7, r2
    549a:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
    549c:	e00c      	b.n	54b8 <hal_i2c_wake+0xd4>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    549e:	4b1e      	ldr	r3, [pc, #120]	; (5518 <hal_i2c_wake+0x134>)
    54a0:	6a3a      	ldr	r2, [r7, #32]
    54a2:	0092      	lsls	r2, r2, #2
    54a4:	58d3      	ldr	r3, [r2, r3]
    54a6:	001a      	movs	r2, r3
    54a8:	2308      	movs	r3, #8
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	0019      	movs	r1, r3
    54ae:	0010      	movs	r0, r2
    54b0:	4b1c      	ldr	r3, [pc, #112]	; (5524 <hal_i2c_wake+0x140>)
    54b2:	4798      	blx	r3
    54b4:	0003      	movs	r3, r0
    54b6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    54b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    54ba:	1e5a      	subs	r2, r3, #1
    54bc:	62fa      	str	r2, [r7, #44]	; 0x2c
    54be:	2b00      	cmp	r3, #0
    54c0:	dd02      	ble.n	54c8 <hal_i2c_wake+0xe4>
    54c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54c4:	2b00      	cmp	r3, #0
    54c6:	d1ea      	bne.n	549e <hal_i2c_wake+0xba>

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    54c8:	69fb      	ldr	r3, [r7, #28]
    54ca:	4a11      	ldr	r2, [pc, #68]	; (5510 <hal_i2c_wake+0x12c>)
    54cc:	4293      	cmp	r3, r2
    54ce:	d005      	beq.n	54dc <hal_i2c_wake+0xf8>
        change_i2c_speed(iface, bdrt);
    54d0:	69fa      	ldr	r2, [r7, #28]
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	0011      	movs	r1, r2
    54d6:	0018      	movs	r0, r3
    54d8:	4b0e      	ldr	r3, [pc, #56]	; (5514 <hal_i2c_wake+0x130>)
    54da:	4798      	blx	r3

    if (status != STATUS_OK)
    54dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54de:	2b00      	cmp	r3, #0
    54e0:	d001      	beq.n	54e6 <hal_i2c_wake+0x102>
        return ATCA_COMM_FAIL;
    54e2:	23f0      	movs	r3, #240	; 0xf0
    54e4:	e00c      	b.n	5500 <hal_i2c_wake+0x11c>

    if (memcmp(data, expected, 4) == 0)
    54e6:	2314      	movs	r3, #20
    54e8:	18f9      	adds	r1, r7, r3
    54ea:	2318      	movs	r3, #24
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	2204      	movs	r2, #4
    54f0:	0018      	movs	r0, r3
    54f2:	4b0d      	ldr	r3, [pc, #52]	; (5528 <hal_i2c_wake+0x144>)
    54f4:	4798      	blx	r3
    54f6:	1e03      	subs	r3, r0, #0
    54f8:	d101      	bne.n	54fe <hal_i2c_wake+0x11a>
        return ATCA_SUCCESS;
    54fa:	2300      	movs	r3, #0
    54fc:	e000      	b.n	5500 <hal_i2c_wake+0x11c>

    return ATCA_COMM_FAIL;
    54fe:	23f0      	movs	r3, #240	; 0xf0
}
    5500:	0018      	movs	r0, r3
    5502:	46bd      	mov	sp, r7
    5504:	b00c      	add	sp, #48	; 0x30
    5506:	bd80      	pop	{r7, pc}
    5508:	00003169 	.word	0x00003169
    550c:	0000b2ec 	.word	0x0000b2ec
    5510:	000186a0 	.word	0x000186a0
    5514:	000052bd 	.word	0x000052bd
    5518:	20000378 	.word	0x20000378
    551c:	00001909 	.word	0x00001909
    5520:	000056c9 	.word	0x000056c9
    5524:	00001751 	.word	0x00001751
    5528:	00009cfd 	.word	0x00009cfd

0000552c <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    552c:	b580      	push	{r7, lr}
    552e:	b088      	sub	sp, #32
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	0018      	movs	r0, r3
    5538:	4b1d      	ldr	r3, [pc, #116]	; (55b0 <hal_i2c_idle+0x84>)
    553a:	4798      	blx	r3
    553c:	0003      	movs	r3, r0
    553e:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    5540:	69fb      	ldr	r3, [r7, #28]
    5542:	795b      	ldrb	r3, [r3, #5]
    5544:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    5546:	69fb      	ldr	r3, [r7, #28]
    5548:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    554a:	085b      	lsrs	r3, r3, #1
    554c:	b2db      	uxtb	r3, r3
    554e:	b29a      	uxth	r2, r3
    5550:	2308      	movs	r3, #8
    5552:	18fb      	adds	r3, r7, r3
    5554:	801a      	strh	r2, [r3, #0]
    5556:	2308      	movs	r3, #8
    5558:	18fb      	adds	r3, r7, r3
    555a:	2201      	movs	r2, #1
    555c:	805a      	strh	r2, [r3, #2]
    555e:	2308      	movs	r3, #8
    5560:	18fb      	adds	r3, r7, r3
    5562:	2214      	movs	r2, #20
    5564:	18ba      	adds	r2, r7, r2
    5566:	605a      	str	r2, [r3, #4]
    5568:	2308      	movs	r3, #8
    556a:	18fb      	adds	r3, r7, r3
    556c:	2200      	movs	r2, #0
    556e:	721a      	strb	r2, [r3, #8]
    5570:	2308      	movs	r3, #8
    5572:	18fb      	adds	r3, r7, r3
    5574:	2200      	movs	r2, #0
    5576:	725a      	strb	r2, [r3, #9]
    5578:	2308      	movs	r3, #8
    557a:	18fb      	adds	r3, r7, r3
    557c:	2200      	movs	r2, #0
    557e:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    5580:	2314      	movs	r3, #20
    5582:	18fb      	adds	r3, r7, r3
    5584:	2202      	movs	r2, #2
    5586:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    5588:	4b0a      	ldr	r3, [pc, #40]	; (55b4 <hal_i2c_idle+0x88>)
    558a:	69ba      	ldr	r2, [r7, #24]
    558c:	0092      	lsls	r2, r2, #2
    558e:	58d3      	ldr	r3, [r2, r3]
    5590:	001a      	movs	r2, r3
    5592:	2308      	movs	r3, #8
    5594:	18fb      	adds	r3, r7, r3
    5596:	0019      	movs	r1, r3
    5598:	0010      	movs	r0, r2
    559a:	4b07      	ldr	r3, [pc, #28]	; (55b8 <hal_i2c_idle+0x8c>)
    559c:	4798      	blx	r3
    559e:	1e03      	subs	r3, r0, #0
    55a0:	d001      	beq.n	55a6 <hal_i2c_idle+0x7a>
        return ATCA_COMM_FAIL;
    55a2:	23f0      	movs	r3, #240	; 0xf0
    55a4:	e000      	b.n	55a8 <hal_i2c_idle+0x7c>

    return ATCA_SUCCESS;
    55a6:	2300      	movs	r3, #0

}
    55a8:	0018      	movs	r0, r3
    55aa:	46bd      	mov	sp, r7
    55ac:	b008      	add	sp, #32
    55ae:	bd80      	pop	{r7, pc}
    55b0:	00003169 	.word	0x00003169
    55b4:	20000378 	.word	0x20000378
    55b8:	00001909 	.word	0x00001909

000055bc <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    55bc:	b580      	push	{r7, lr}
    55be:	b088      	sub	sp, #32
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	0018      	movs	r0, r3
    55c8:	4b1d      	ldr	r3, [pc, #116]	; (5640 <hal_i2c_sleep+0x84>)
    55ca:	4798      	blx	r3
    55cc:	0003      	movs	r3, r0
    55ce:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    55d0:	69fb      	ldr	r3, [r7, #28]
    55d2:	795b      	ldrb	r3, [r3, #5]
    55d4:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    55d6:	69fb      	ldr	r3, [r7, #28]
    55d8:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    55da:	085b      	lsrs	r3, r3, #1
    55dc:	b2db      	uxtb	r3, r3
    55de:	b29a      	uxth	r2, r3
    55e0:	2308      	movs	r3, #8
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	801a      	strh	r2, [r3, #0]
    55e6:	2308      	movs	r3, #8
    55e8:	18fb      	adds	r3, r7, r3
    55ea:	2201      	movs	r2, #1
    55ec:	805a      	strh	r2, [r3, #2]
    55ee:	2308      	movs	r3, #8
    55f0:	18fb      	adds	r3, r7, r3
    55f2:	2214      	movs	r2, #20
    55f4:	18ba      	adds	r2, r7, r2
    55f6:	605a      	str	r2, [r3, #4]
    55f8:	2308      	movs	r3, #8
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	2200      	movs	r2, #0
    55fe:	721a      	strb	r2, [r3, #8]
    5600:	2308      	movs	r3, #8
    5602:	18fb      	adds	r3, r7, r3
    5604:	2200      	movs	r2, #0
    5606:	725a      	strb	r2, [r3, #9]
    5608:	2308      	movs	r3, #8
    560a:	18fb      	adds	r3, r7, r3
    560c:	2200      	movs	r2, #0
    560e:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    5610:	2314      	movs	r3, #20
    5612:	18fb      	adds	r3, r7, r3
    5614:	2201      	movs	r2, #1
    5616:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    5618:	4b0a      	ldr	r3, [pc, #40]	; (5644 <hal_i2c_sleep+0x88>)
    561a:	69ba      	ldr	r2, [r7, #24]
    561c:	0092      	lsls	r2, r2, #2
    561e:	58d3      	ldr	r3, [r2, r3]
    5620:	001a      	movs	r2, r3
    5622:	2308      	movs	r3, #8
    5624:	18fb      	adds	r3, r7, r3
    5626:	0019      	movs	r1, r3
    5628:	0010      	movs	r0, r2
    562a:	4b07      	ldr	r3, [pc, #28]	; (5648 <hal_i2c_sleep+0x8c>)
    562c:	4798      	blx	r3
    562e:	1e03      	subs	r3, r0, #0
    5630:	d001      	beq.n	5636 <hal_i2c_sleep+0x7a>
        return ATCA_COMM_FAIL;
    5632:	23f0      	movs	r3, #240	; 0xf0
    5634:	e000      	b.n	5638 <hal_i2c_sleep+0x7c>

    return ATCA_SUCCESS;
    5636:	2300      	movs	r3, #0
}
    5638:	0018      	movs	r0, r3
    563a:	46bd      	mov	sp, r7
    563c:	b008      	add	sp, #32
    563e:	bd80      	pop	{r7, pc}
    5640:	00003169 	.word	0x00003169
    5644:	20000378 	.word	0x20000378
    5648:	00001909 	.word	0x00001909

0000564c <hal_i2c_release>:
/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    564c:	b580      	push	{r7, lr}
    564e:	b084      	sub	sp, #16
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    5658:	4b17      	ldr	r3, [pc, #92]	; (56b8 <hal_i2c_release+0x6c>)
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	1e5a      	subs	r2, r3, #1
    565e:	4b16      	ldr	r3, [pc, #88]	; (56b8 <hal_i2c_release+0x6c>)
    5660:	601a      	str	r2, [r3, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    5662:	68fb      	ldr	r3, [r7, #12]
    5664:	2b00      	cmp	r3, #0
    5666:	d021      	beq.n	56ac <hal_i2c_release+0x60>
    5668:	68fb      	ldr	r3, [r7, #12]
    566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    566c:	1e5a      	subs	r2, r3, #1
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	629a      	str	r2, [r3, #40]	; 0x28
    5672:	68fb      	ldr	r3, [r7, #12]
    5674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5676:	2b00      	cmp	r3, #0
    5678:	dc18      	bgt.n	56ac <hal_i2c_release+0x60>
    567a:	68fb      	ldr	r3, [r7, #12]
    567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    567e:	4b0f      	ldr	r3, [pc, #60]	; (56bc <hal_i2c_release+0x70>)
    5680:	0092      	lsls	r2, r2, #2
    5682:	58d3      	ldr	r3, [r2, r3]
    5684:	2b00      	cmp	r3, #0
    5686:	d011      	beq.n	56ac <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
    5688:	68fb      	ldr	r3, [r7, #12]
    568a:	0018      	movs	r0, r3
    568c:	4b0c      	ldr	r3, [pc, #48]	; (56c0 <hal_i2c_release+0x74>)
    568e:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5694:	4b09      	ldr	r3, [pc, #36]	; (56bc <hal_i2c_release+0x70>)
    5696:	0092      	lsls	r2, r2, #2
    5698:	58d3      	ldr	r3, [r2, r3]
    569a:	0018      	movs	r0, r3
    569c:	4b09      	ldr	r3, [pc, #36]	; (56c4 <hal_i2c_release+0x78>)
    569e:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    56a0:	68fb      	ldr	r3, [r7, #12]
    56a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56a4:	4b05      	ldr	r3, [pc, #20]	; (56bc <hal_i2c_release+0x70>)
    56a6:	0092      	lsls	r2, r2, #2
    56a8:	2100      	movs	r1, #0
    56aa:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
    56ac:	2300      	movs	r3, #0
}
    56ae:	0018      	movs	r0, r3
    56b0:	46bd      	mov	sp, r7
    56b2:	b004      	add	sp, #16
    56b4:	bd80      	pop	{r7, pc}
    56b6:	46c0      	nop			; (mov r8, r8)
    56b8:	20000234 	.word	0x20000234
    56bc:	20000378 	.word	0x20000378
    56c0:	00001365 	.word	0x00001365
    56c4:	00009ce9 	.word	0x00009ce9

000056c8 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    56c8:	b580      	push	{r7, lr}
    56ca:	b082      	sub	sp, #8
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d004      	beq.n	56e0 <atca_delay_ms+0x18>
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	0018      	movs	r0, r3
    56da:	4b05      	ldr	r3, [pc, #20]	; (56f0 <atca_delay_ms+0x28>)
    56dc:	4798      	blx	r3
}
    56de:	e002      	b.n	56e6 <atca_delay_ms+0x1e>
    delay_ms(delay);
    56e0:	2001      	movs	r0, #1
    56e2:	4b04      	ldr	r3, [pc, #16]	; (56f4 <atca_delay_ms+0x2c>)
    56e4:	4798      	blx	r3
}
    56e6:	46c0      	nop			; (mov r8, r8)
    56e8:	46bd      	mov	sp, r7
    56ea:	b002      	add	sp, #8
    56ec:	bd80      	pop	{r7, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	00000bf9 	.word	0x00000bf9
    56f4:	00000bc9 	.word	0x00000bc9

000056f8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    56f8:	b580      	push	{r7, lr}
    56fa:	af00      	add	r7, sp, #0
    56fc:	2000      	movs	r0, #0
    56fe:	4b02      	ldr	r3, [pc, #8]	; (5708 <TCC0_Handler+0x10>)
    5700:	4798      	blx	r3
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	46bd      	mov	sp, r7
    5706:	bd80      	pop	{r7, pc}
    5708:	00005735 	.word	0x00005735

0000570c <TCC1_Handler>:
    570c:	b580      	push	{r7, lr}
    570e:	af00      	add	r7, sp, #0
    5710:	2001      	movs	r0, #1
    5712:	4b02      	ldr	r3, [pc, #8]	; (571c <TCC1_Handler+0x10>)
    5714:	4798      	blx	r3
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	46bd      	mov	sp, r7
    571a:	bd80      	pop	{r7, pc}
    571c:	00005735 	.word	0x00005735

00005720 <TCC2_Handler>:
    5720:	b580      	push	{r7, lr}
    5722:	af00      	add	r7, sp, #0
    5724:	2002      	movs	r0, #2
    5726:	4b02      	ldr	r3, [pc, #8]	; (5730 <TCC2_Handler+0x10>)
    5728:	4798      	blx	r3
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	46bd      	mov	sp, r7
    572e:	bd80      	pop	{r7, pc}
    5730:	00005735 	.word	0x00005735

00005734 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    5734:	b580      	push	{r7, lr}
    5736:	b086      	sub	sp, #24
    5738:	af00      	add	r7, sp, #0
    573a:	0002      	movs	r2, r0
    573c:	1dfb      	adds	r3, r7, #7
    573e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    5740:	1dfb      	adds	r3, r7, #7
    5742:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    5744:	4b18      	ldr	r3, [pc, #96]	; (57a8 <_tcc_interrupt_handler+0x74>)
    5746:	0092      	lsls	r2, r2, #2
    5748:	58d3      	ldr	r3, [r2, r3]
    574a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    574c:	693b      	ldr	r3, [r7, #16]
    574e:	681b      	ldr	r3, [r3, #0]
    5750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    5752:	693b      	ldr	r3, [r7, #16]
    5754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    5756:	401a      	ands	r2, r3
			module->enable_callback_mask);
    5758:	693b      	ldr	r3, [r7, #16]
    575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    575c:	4013      	ands	r3, r2
    575e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5760:	2300      	movs	r3, #0
    5762:	617b      	str	r3, [r7, #20]
    5764:	e019      	b.n	579a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5766:	4b11      	ldr	r3, [pc, #68]	; (57ac <_tcc_interrupt_handler+0x78>)
    5768:	697a      	ldr	r2, [r7, #20]
    576a:	0092      	lsls	r2, r2, #2
    576c:	58d3      	ldr	r3, [r2, r3]
    576e:	68fa      	ldr	r2, [r7, #12]
    5770:	4013      	ands	r3, r2
    5772:	d00f      	beq.n	5794 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5774:	693a      	ldr	r2, [r7, #16]
    5776:	697b      	ldr	r3, [r7, #20]
    5778:	009b      	lsls	r3, r3, #2
    577a:	18d3      	adds	r3, r2, r3
    577c:	3304      	adds	r3, #4
    577e:	681b      	ldr	r3, [r3, #0]
    5780:	693a      	ldr	r2, [r7, #16]
    5782:	0010      	movs	r0, r2
    5784:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5786:	693b      	ldr	r3, [r7, #16]
    5788:	681b      	ldr	r3, [r3, #0]
    578a:	4a08      	ldr	r2, [pc, #32]	; (57ac <_tcc_interrupt_handler+0x78>)
    578c:	6979      	ldr	r1, [r7, #20]
    578e:	0089      	lsls	r1, r1, #2
    5790:	588a      	ldr	r2, [r1, r2]
    5792:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5794:	697b      	ldr	r3, [r7, #20]
    5796:	3301      	adds	r3, #1
    5798:	617b      	str	r3, [r7, #20]
    579a:	697b      	ldr	r3, [r7, #20]
    579c:	2b0b      	cmp	r3, #11
    579e:	dde2      	ble.n	5766 <_tcc_interrupt_handler+0x32>
		}
	}
}
    57a0:	46c0      	nop			; (mov r8, r8)
    57a2:	46bd      	mov	sp, r7
    57a4:	b006      	add	sp, #24
    57a6:	bd80      	pop	{r7, pc}
    57a8:	20000390 	.word	0x20000390
    57ac:	0000b320 	.word	0x0000b320

000057b0 <system_gclk_chan_get_config_defaults>:
{
    57b0:	b580      	push	{r7, lr}
    57b2:	b082      	sub	sp, #8
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	2200      	movs	r2, #0
    57bc:	701a      	strb	r2, [r3, #0]
}
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	46bd      	mov	sp, r7
    57c2:	b002      	add	sp, #8
    57c4:	bd80      	pop	{r7, pc}
	...

000057c8 <system_apb_clock_set_mask>:
{
    57c8:	b580      	push	{r7, lr}
    57ca:	b082      	sub	sp, #8
    57cc:	af00      	add	r7, sp, #0
    57ce:	0002      	movs	r2, r0
    57d0:	6039      	str	r1, [r7, #0]
    57d2:	1dfb      	adds	r3, r7, #7
    57d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    57d6:	1dfb      	adds	r3, r7, #7
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	2b04      	cmp	r3, #4
    57dc:	d827      	bhi.n	582e <system_apb_clock_set_mask+0x66>
    57de:	009a      	lsls	r2, r3, #2
    57e0:	4b16      	ldr	r3, [pc, #88]	; (583c <system_apb_clock_set_mask+0x74>)
    57e2:	18d3      	adds	r3, r2, r3
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    57e8:	4b15      	ldr	r3, [pc, #84]	; (5840 <system_apb_clock_set_mask+0x78>)
    57ea:	4a15      	ldr	r2, [pc, #84]	; (5840 <system_apb_clock_set_mask+0x78>)
    57ec:	6951      	ldr	r1, [r2, #20]
    57ee:	683a      	ldr	r2, [r7, #0]
    57f0:	430a      	orrs	r2, r1
    57f2:	615a      	str	r2, [r3, #20]
			break;
    57f4:	e01d      	b.n	5832 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    57f6:	4b12      	ldr	r3, [pc, #72]	; (5840 <system_apb_clock_set_mask+0x78>)
    57f8:	4a11      	ldr	r2, [pc, #68]	; (5840 <system_apb_clock_set_mask+0x78>)
    57fa:	6991      	ldr	r1, [r2, #24]
    57fc:	683a      	ldr	r2, [r7, #0]
    57fe:	430a      	orrs	r2, r1
    5800:	619a      	str	r2, [r3, #24]
			break;
    5802:	e016      	b.n	5832 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <system_apb_clock_set_mask+0x78>)
    5806:	4a0e      	ldr	r2, [pc, #56]	; (5840 <system_apb_clock_set_mask+0x78>)
    5808:	69d1      	ldr	r1, [r2, #28]
    580a:	683a      	ldr	r2, [r7, #0]
    580c:	430a      	orrs	r2, r1
    580e:	61da      	str	r2, [r3, #28]
			break;
    5810:	e00f      	b.n	5832 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    5812:	4b0b      	ldr	r3, [pc, #44]	; (5840 <system_apb_clock_set_mask+0x78>)
    5814:	4a0a      	ldr	r2, [pc, #40]	; (5840 <system_apb_clock_set_mask+0x78>)
    5816:	6a11      	ldr	r1, [r2, #32]
    5818:	683a      	ldr	r2, [r7, #0]
    581a:	430a      	orrs	r2, r1
    581c:	621a      	str	r2, [r3, #32]
			break;
    581e:	e008      	b.n	5832 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    5820:	4b07      	ldr	r3, [pc, #28]	; (5840 <system_apb_clock_set_mask+0x78>)
    5822:	4a07      	ldr	r2, [pc, #28]	; (5840 <system_apb_clock_set_mask+0x78>)
    5824:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5826:	683a      	ldr	r2, [r7, #0]
    5828:	430a      	orrs	r2, r1
    582a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    582c:	e001      	b.n	5832 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    582e:	2317      	movs	r3, #23
    5830:	e000      	b.n	5834 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    5832:	2300      	movs	r3, #0
}
    5834:	0018      	movs	r0, r3
    5836:	46bd      	mov	sp, r7
    5838:	b002      	add	sp, #8
    583a:	bd80      	pop	{r7, pc}
    583c:	0000b350 	.word	0x0000b350
    5840:	40000400 	.word	0x40000400

00005844 <system_pinmux_get_config_defaults>:
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    584c:	687b      	ldr	r3, [r7, #4]
    584e:	2280      	movs	r2, #128	; 0x80
    5850:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	2200      	movs	r2, #0
    5856:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	2201      	movs	r2, #1
    585c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	2200      	movs	r2, #0
    5862:	70da      	strb	r2, [r3, #3]
}
    5864:	46c0      	nop			; (mov r8, r8)
    5866:	46bd      	mov	sp, r7
    5868:	b002      	add	sp, #8
    586a:	bd80      	pop	{r7, pc}

0000586c <system_is_debugger_present>:
{
    586c:	b580      	push	{r7, lr}
    586e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5870:	4b05      	ldr	r3, [pc, #20]	; (5888 <system_is_debugger_present+0x1c>)
    5872:	789b      	ldrb	r3, [r3, #2]
    5874:	b2db      	uxtb	r3, r3
    5876:	001a      	movs	r2, r3
    5878:	2302      	movs	r3, #2
    587a:	4013      	ands	r3, r2
    587c:	1e5a      	subs	r2, r3, #1
    587e:	4193      	sbcs	r3, r2
    5880:	b2db      	uxtb	r3, r3
}
    5882:	0018      	movs	r0, r3
    5884:	46bd      	mov	sp, r7
    5886:	bd80      	pop	{r7, pc}
    5888:	41002000 	.word	0x41002000

0000588c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    588c:	b580      	push	{r7, lr}
    588e:	b084      	sub	sp, #16
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    589a:	68fb      	ldr	r3, [r7, #12]
    589c:	69db      	ldr	r3, [r3, #28]
    589e:	1e5a      	subs	r2, r3, #1
    58a0:	4193      	sbcs	r3, r2
    58a2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    58a4:	0018      	movs	r0, r3
    58a6:	46bd      	mov	sp, r7
    58a8:	b004      	add	sp, #16
    58aa:	bd80      	pop	{r7, pc}

000058ac <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    58ac:	b580      	push	{r7, lr}
    58ae:	b082      	sub	sp, #8
    58b0:	af00      	add	r7, sp, #0
    58b2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    58b4:	46c0      	nop			; (mov r8, r8)
    58b6:	687b      	ldr	r3, [r7, #4]
    58b8:	0018      	movs	r0, r3
    58ba:	4b04      	ldr	r3, [pc, #16]	; (58cc <_usart_wait_for_sync+0x20>)
    58bc:	4798      	blx	r3
    58be:	1e03      	subs	r3, r0, #0
    58c0:	d1f9      	bne.n	58b6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    58c2:	46c0      	nop			; (mov r8, r8)
    58c4:	46bd      	mov	sp, r7
    58c6:	b002      	add	sp, #8
    58c8:	bd80      	pop	{r7, pc}
    58ca:	46c0      	nop			; (mov r8, r8)
    58cc:	0000588d 	.word	0x0000588d

000058d0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    58d0:	b5b0      	push	{r4, r5, r7, lr}
    58d2:	b08c      	sub	sp, #48	; 0x30
    58d4:	af02      	add	r7, sp, #8
    58d6:	6078      	str	r0, [r7, #4]
    58d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    58e0:	687b      	ldr	r3, [r7, #4]
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	0018      	movs	r0, r3
    58e6:	4bab      	ldr	r3, [pc, #684]	; (5b94 <_usart_set_config+0x2c4>)
    58e8:	4798      	blx	r3
    58ea:	0003      	movs	r3, r0
    58ec:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    58ee:	697b      	ldr	r3, [r7, #20]
    58f0:	3312      	adds	r3, #18
    58f2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    58f4:	2300      	movs	r3, #0
    58f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    58f8:	2300      	movs	r3, #0
    58fa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    58fc:	230a      	movs	r3, #10
    58fe:	18fb      	adds	r3, r7, r3
    5900:	2200      	movs	r2, #0
    5902:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5904:	231f      	movs	r3, #31
    5906:	18fb      	adds	r3, r7, r3
    5908:	2200      	movs	r2, #0
    590a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    590c:	231e      	movs	r3, #30
    590e:	18fb      	adds	r3, r7, r3
    5910:	2210      	movs	r2, #16
    5912:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5914:	683b      	ldr	r3, [r7, #0]
    5916:	8a1b      	ldrh	r3, [r3, #16]
    5918:	2280      	movs	r2, #128	; 0x80
    591a:	01d2      	lsls	r2, r2, #7
    591c:	4293      	cmp	r3, r2
    591e:	d01c      	beq.n	595a <_usart_set_config+0x8a>
    5920:	2280      	movs	r2, #128	; 0x80
    5922:	01d2      	lsls	r2, r2, #7
    5924:	4293      	cmp	r3, r2
    5926:	dc06      	bgt.n	5936 <_usart_set_config+0x66>
    5928:	2b00      	cmp	r3, #0
    592a:	d00d      	beq.n	5948 <_usart_set_config+0x78>
    592c:	2280      	movs	r2, #128	; 0x80
    592e:	0192      	lsls	r2, r2, #6
    5930:	4293      	cmp	r3, r2
    5932:	d024      	beq.n	597e <_usart_set_config+0xae>
    5934:	e035      	b.n	59a2 <_usart_set_config+0xd2>
    5936:	22c0      	movs	r2, #192	; 0xc0
    5938:	01d2      	lsls	r2, r2, #7
    593a:	4293      	cmp	r3, r2
    593c:	d028      	beq.n	5990 <_usart_set_config+0xc0>
    593e:	2280      	movs	r2, #128	; 0x80
    5940:	0212      	lsls	r2, r2, #8
    5942:	4293      	cmp	r3, r2
    5944:	d012      	beq.n	596c <_usart_set_config+0x9c>
    5946:	e02c      	b.n	59a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5948:	231f      	movs	r3, #31
    594a:	18fb      	adds	r3, r7, r3
    594c:	2200      	movs	r2, #0
    594e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5950:	231e      	movs	r3, #30
    5952:	18fb      	adds	r3, r7, r3
    5954:	2210      	movs	r2, #16
    5956:	701a      	strb	r2, [r3, #0]
			break;
    5958:	e023      	b.n	59a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    595a:	231f      	movs	r3, #31
    595c:	18fb      	adds	r3, r7, r3
    595e:	2200      	movs	r2, #0
    5960:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5962:	231e      	movs	r3, #30
    5964:	18fb      	adds	r3, r7, r3
    5966:	2208      	movs	r2, #8
    5968:	701a      	strb	r2, [r3, #0]
			break;
    596a:	e01a      	b.n	59a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    596c:	231f      	movs	r3, #31
    596e:	18fb      	adds	r3, r7, r3
    5970:	2200      	movs	r2, #0
    5972:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5974:	231e      	movs	r3, #30
    5976:	18fb      	adds	r3, r7, r3
    5978:	2203      	movs	r2, #3
    597a:	701a      	strb	r2, [r3, #0]
			break;
    597c:	e011      	b.n	59a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    597e:	231f      	movs	r3, #31
    5980:	18fb      	adds	r3, r7, r3
    5982:	2201      	movs	r2, #1
    5984:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5986:	231e      	movs	r3, #30
    5988:	18fb      	adds	r3, r7, r3
    598a:	2210      	movs	r2, #16
    598c:	701a      	strb	r2, [r3, #0]
			break;
    598e:	e008      	b.n	59a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5990:	231f      	movs	r3, #31
    5992:	18fb      	adds	r3, r7, r3
    5994:	2201      	movs	r2, #1
    5996:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5998:	231e      	movs	r3, #30
    599a:	18fb      	adds	r3, r7, r3
    599c:	2208      	movs	r2, #8
    599e:	701a      	strb	r2, [r3, #0]
			break;
    59a0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    59a2:	683b      	ldr	r3, [r7, #0]
    59a4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    59a6:	683b      	ldr	r3, [r7, #0]
    59a8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    59aa:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    59ac:	683b      	ldr	r3, [r7, #0]
    59ae:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    59b0:	4313      	orrs	r3, r2
		config->sample_rate |
    59b2:	683a      	ldr	r2, [r7, #0]
    59b4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    59b6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    59b8:	683a      	ldr	r2, [r7, #0]
    59ba:	7e12      	ldrb	r2, [r2, #24]
    59bc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    59be:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    59c0:	683a      	ldr	r2, [r7, #0]
    59c2:	2126      	movs	r1, #38	; 0x26
    59c4:	5c52      	ldrb	r2, [r2, r1]
    59c6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    59c8:	4313      	orrs	r3, r2
    59ca:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    59cc:	231d      	movs	r3, #29
    59ce:	18fb      	adds	r3, r7, r3
    59d0:	2200      	movs	r2, #0
    59d2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    59d4:	683b      	ldr	r3, [r7, #0]
    59d6:	685b      	ldr	r3, [r3, #4]
    59d8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	2b00      	cmp	r3, #0
    59de:	d01e      	beq.n	5a1e <_usart_set_config+0x14e>
    59e0:	2280      	movs	r2, #128	; 0x80
    59e2:	0552      	lsls	r2, r2, #21
    59e4:	4293      	cmp	r3, r2
    59e6:	d14f      	bne.n	5a88 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    59e8:	683b      	ldr	r3, [r7, #0]
    59ea:	2227      	movs	r2, #39	; 0x27
    59ec:	5c9b      	ldrb	r3, [r3, r2]
    59ee:	2201      	movs	r2, #1
    59f0:	4053      	eors	r3, r2
    59f2:	b2db      	uxtb	r3, r3
    59f4:	2b00      	cmp	r3, #0
    59f6:	d046      	beq.n	5a86 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    59f8:	683b      	ldr	r3, [r7, #0]
    59fa:	6a1d      	ldr	r5, [r3, #32]
    59fc:	693b      	ldr	r3, [r7, #16]
    59fe:	b2db      	uxtb	r3, r3
    5a00:	0018      	movs	r0, r3
    5a02:	4b65      	ldr	r3, [pc, #404]	; (5b98 <_usart_set_config+0x2c8>)
    5a04:	4798      	blx	r3
    5a06:	0001      	movs	r1, r0
    5a08:	231d      	movs	r3, #29
    5a0a:	18fc      	adds	r4, r7, r3
    5a0c:	230a      	movs	r3, #10
    5a0e:	18fb      	adds	r3, r7, r3
    5a10:	001a      	movs	r2, r3
    5a12:	0028      	movs	r0, r5
    5a14:	4b61      	ldr	r3, [pc, #388]	; (5b9c <_usart_set_config+0x2cc>)
    5a16:	4798      	blx	r3
    5a18:	0003      	movs	r3, r0
    5a1a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5a1c:	e033      	b.n	5a86 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5a1e:	683b      	ldr	r3, [r7, #0]
    5a20:	2227      	movs	r2, #39	; 0x27
    5a22:	5c9b      	ldrb	r3, [r3, r2]
    5a24:	2b00      	cmp	r3, #0
    5a26:	d014      	beq.n	5a52 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	6a18      	ldr	r0, [r3, #32]
    5a2c:	683b      	ldr	r3, [r7, #0]
    5a2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5a30:	231d      	movs	r3, #29
    5a32:	18fc      	adds	r4, r7, r3
    5a34:	231f      	movs	r3, #31
    5a36:	18fb      	adds	r3, r7, r3
    5a38:	781d      	ldrb	r5, [r3, #0]
    5a3a:	230a      	movs	r3, #10
    5a3c:	18fa      	adds	r2, r7, r3
    5a3e:	231e      	movs	r3, #30
    5a40:	18fb      	adds	r3, r7, r3
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	9300      	str	r3, [sp, #0]
    5a46:	002b      	movs	r3, r5
    5a48:	4d55      	ldr	r5, [pc, #340]	; (5ba0 <_usart_set_config+0x2d0>)
    5a4a:	47a8      	blx	r5
    5a4c:	0003      	movs	r3, r0
    5a4e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5a50:	e01a      	b.n	5a88 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5a52:	683b      	ldr	r3, [r7, #0]
    5a54:	6a1d      	ldr	r5, [r3, #32]
    5a56:	693b      	ldr	r3, [r7, #16]
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	0018      	movs	r0, r3
    5a5c:	4b4e      	ldr	r3, [pc, #312]	; (5b98 <_usart_set_config+0x2c8>)
    5a5e:	4798      	blx	r3
				status_code =
    5a60:	231d      	movs	r3, #29
    5a62:	18fc      	adds	r4, r7, r3
    5a64:	231f      	movs	r3, #31
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	7819      	ldrb	r1, [r3, #0]
    5a6a:	230a      	movs	r3, #10
    5a6c:	18fa      	adds	r2, r7, r3
    5a6e:	231e      	movs	r3, #30
    5a70:	18fb      	adds	r3, r7, r3
    5a72:	781b      	ldrb	r3, [r3, #0]
    5a74:	9300      	str	r3, [sp, #0]
    5a76:	000b      	movs	r3, r1
    5a78:	0001      	movs	r1, r0
    5a7a:	0028      	movs	r0, r5
    5a7c:	4d48      	ldr	r5, [pc, #288]	; (5ba0 <_usart_set_config+0x2d0>)
    5a7e:	47a8      	blx	r5
    5a80:	0003      	movs	r3, r0
    5a82:	7023      	strb	r3, [r4, #0]
			break;
    5a84:	e000      	b.n	5a88 <_usart_set_config+0x1b8>
			break;
    5a86:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5a88:	231d      	movs	r3, #29
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d003      	beq.n	5a9a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5a92:	231d      	movs	r3, #29
    5a94:	18fb      	adds	r3, r7, r3
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	e077      	b.n	5b8a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5a9a:	683b      	ldr	r3, [r7, #0]
    5a9c:	7e5b      	ldrb	r3, [r3, #25]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d003      	beq.n	5aaa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	7e9a      	ldrb	r2, [r3, #26]
    5aa6:	69bb      	ldr	r3, [r7, #24]
    5aa8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	0018      	movs	r0, r3
    5aae:	4b3d      	ldr	r3, [pc, #244]	; (5ba4 <_usart_set_config+0x2d4>)
    5ab0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ab2:	230a      	movs	r3, #10
    5ab4:	18fb      	adds	r3, r7, r3
    5ab6:	881a      	ldrh	r2, [r3, #0]
    5ab8:	69bb      	ldr	r3, [r7, #24]
    5aba:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	4313      	orrs	r3, r2
    5ac2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5ac4:	683b      	ldr	r3, [r7, #0]
    5ac6:	2227      	movs	r2, #39	; 0x27
    5ac8:	5c9b      	ldrb	r3, [r3, r2]
    5aca:	2201      	movs	r2, #1
    5acc:	4053      	eors	r3, r2
    5ace:	b2db      	uxtb	r3, r3
    5ad0:	2b00      	cmp	r3, #0
    5ad2:	d003      	beq.n	5adc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ad6:	2204      	movs	r2, #4
    5ad8:	4313      	orrs	r3, r2
    5ada:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5adc:	683b      	ldr	r3, [r7, #0]
    5ade:	7e5b      	ldrb	r3, [r3, #25]
    5ae0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5ae2:	683b      	ldr	r3, [r7, #0]
    5ae4:	7f1b      	ldrb	r3, [r3, #28]
    5ae6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5ae8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	7f5b      	ldrb	r3, [r3, #29]
    5aee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5af0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5af2:	683b      	ldr	r3, [r7, #0]
    5af4:	2124      	movs	r1, #36	; 0x24
    5af6:	5c5b      	ldrb	r3, [r3, r1]
    5af8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5afa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5afc:	683b      	ldr	r3, [r7, #0]
    5afe:	2125      	movs	r1, #37	; 0x25
    5b00:	5c5b      	ldrb	r3, [r3, r1]
    5b02:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5b04:	4313      	orrs	r3, r2
	ctrlb =  
    5b06:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    5b08:	683b      	ldr	r3, [r7, #0]
    5b0a:	7a9b      	ldrb	r3, [r3, #10]
    5b0c:	001a      	movs	r2, r3
    5b0e:	6a3b      	ldr	r3, [r7, #32]
    5b10:	4313      	orrs	r3, r2
    5b12:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5b14:	683b      	ldr	r3, [r7, #0]
    5b16:	7adb      	ldrb	r3, [r3, #11]
    5b18:	001a      	movs	r2, r3
    5b1a:	6a3b      	ldr	r3, [r7, #32]
    5b1c:	4313      	orrs	r3, r2
    5b1e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5b20:	683b      	ldr	r3, [r7, #0]
    5b22:	891b      	ldrh	r3, [r3, #8]
    5b24:	2bff      	cmp	r3, #255	; 0xff
    5b26:	d00b      	beq.n	5b40 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b2a:	2280      	movs	r2, #128	; 0x80
    5b2c:	0452      	lsls	r2, r2, #17
    5b2e:	4313      	orrs	r3, r2
    5b30:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5b32:	683b      	ldr	r3, [r7, #0]
    5b34:	891b      	ldrh	r3, [r3, #8]
    5b36:	001a      	movs	r2, r3
    5b38:	6a3b      	ldr	r3, [r7, #32]
    5b3a:	4313      	orrs	r3, r2
    5b3c:	623b      	str	r3, [r7, #32]
    5b3e:	e008      	b.n	5b52 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5b40:	683b      	ldr	r3, [r7, #0]
    5b42:	7edb      	ldrb	r3, [r3, #27]
    5b44:	2b00      	cmp	r3, #0
    5b46:	d004      	beq.n	5b52 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b4a:	2280      	movs	r2, #128	; 0x80
    5b4c:	04d2      	lsls	r2, r2, #19
    5b4e:	4313      	orrs	r3, r2
    5b50:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5b52:	683b      	ldr	r3, [r7, #0]
    5b54:	222c      	movs	r2, #44	; 0x2c
    5b56:	5c9b      	ldrb	r3, [r3, r2]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d103      	bne.n	5b64 <_usart_set_config+0x294>
    5b5c:	4b12      	ldr	r3, [pc, #72]	; (5ba8 <_usart_set_config+0x2d8>)
    5b5e:	4798      	blx	r3
    5b60:	1e03      	subs	r3, r0, #0
    5b62:	d003      	beq.n	5b6c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b66:	2280      	movs	r2, #128	; 0x80
    5b68:	4313      	orrs	r3, r2
    5b6a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	0018      	movs	r0, r3
    5b70:	4b0c      	ldr	r3, [pc, #48]	; (5ba4 <_usart_set_config+0x2d4>)
    5b72:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5b74:	69bb      	ldr	r3, [r7, #24]
    5b76:	6a3a      	ldr	r2, [r7, #32]
    5b78:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	0018      	movs	r0, r3
    5b7e:	4b09      	ldr	r3, [pc, #36]	; (5ba4 <_usart_set_config+0x2d4>)
    5b80:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5b82:	69bb      	ldr	r3, [r7, #24]
    5b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5b86:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5b88:	2300      	movs	r3, #0
}
    5b8a:	0018      	movs	r0, r3
    5b8c:	46bd      	mov	sp, r7
    5b8e:	b00a      	add	sp, #40	; 0x28
    5b90:	bdb0      	pop	{r4, r5, r7, pc}
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00006895 	.word	0x00006895
    5b98:	00007af9 	.word	0x00007af9
    5b9c:	0000640f 	.word	0x0000640f
    5ba0:	0000648d 	.word	0x0000648d
    5ba4:	000058ad 	.word	0x000058ad
    5ba8:	0000586d 	.word	0x0000586d

00005bac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5bac:	b590      	push	{r4, r7, lr}
    5bae:	b093      	sub	sp, #76	; 0x4c
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	60f8      	str	r0, [r7, #12]
    5bb4:	60b9      	str	r1, [r7, #8]
    5bb6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5bb8:	2333      	movs	r3, #51	; 0x33
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	2200      	movs	r2, #0
    5bbe:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5bc0:	68fb      	ldr	r3, [r7, #12]
    5bc2:	68ba      	ldr	r2, [r7, #8]
    5bc4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5bcc:	68fb      	ldr	r3, [r7, #12]
    5bce:	681b      	ldr	r3, [r3, #0]
    5bd0:	0018      	movs	r0, r3
    5bd2:	4b8f      	ldr	r3, [pc, #572]	; (5e10 <usart_init+0x264>)
    5bd4:	4798      	blx	r3
    5bd6:	0003      	movs	r3, r0
    5bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    5bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5bdc:	2b05      	cmp	r3, #5
    5bde:	d104      	bne.n	5bea <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5be0:	2301      	movs	r3, #1
    5be2:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5be4:	2318      	movs	r3, #24
    5be6:	643b      	str	r3, [r7, #64]	; 0x40
    5be8:	e004      	b.n	5bf4 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5bec:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5bf0:	3312      	adds	r3, #18
    5bf2:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5bf6:	681b      	ldr	r3, [r3, #0]
    5bf8:	2201      	movs	r2, #1
    5bfa:	4013      	ands	r3, r2
    5bfc:	d001      	beq.n	5c02 <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5bfe:	2305      	movs	r3, #5
    5c00:	e102      	b.n	5e08 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	2202      	movs	r2, #2
    5c08:	4013      	ands	r3, r2
    5c0a:	d001      	beq.n	5c10 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5c0c:	231c      	movs	r3, #28
    5c0e:	e0fb      	b.n	5e08 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    5c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5c12:	2b05      	cmp	r3, #5
    5c14:	d108      	bne.n	5c28 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5c16:	2201      	movs	r2, #1
    5c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5c1a:	409a      	lsls	r2, r3
    5c1c:	0013      	movs	r3, r2
    5c1e:	0019      	movs	r1, r3
    5c20:	2003      	movs	r0, #3
    5c22:	4b7c      	ldr	r3, [pc, #496]	; (5e14 <usart_init+0x268>)
    5c24:	4798      	blx	r3
    5c26:	e007      	b.n	5c38 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5c28:	2201      	movs	r2, #1
    5c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5c2c:	409a      	lsls	r2, r3
    5c2e:	0013      	movs	r3, r2
    5c30:	0019      	movs	r1, r3
    5c32:	2002      	movs	r0, #2
    5c34:	4b77      	ldr	r3, [pc, #476]	; (5e14 <usart_init+0x268>)
    5c36:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5c38:	2324      	movs	r3, #36	; 0x24
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	0018      	movs	r0, r3
    5c3e:	4b76      	ldr	r3, [pc, #472]	; (5e18 <usart_init+0x26c>)
    5c40:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	222d      	movs	r2, #45	; 0x2d
    5c46:	5c9a      	ldrb	r2, [r3, r2]
    5c48:	2324      	movs	r3, #36	; 0x24
    5c4a:	18fb      	adds	r3, r7, r3
    5c4c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5c50:	b2db      	uxtb	r3, r3
    5c52:	2224      	movs	r2, #36	; 0x24
    5c54:	18ba      	adds	r2, r7, r2
    5c56:	0011      	movs	r1, r2
    5c58:	0018      	movs	r0, r3
    5c5a:	4b70      	ldr	r3, [pc, #448]	; (5e1c <usart_init+0x270>)
    5c5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5c60:	b2db      	uxtb	r3, r3
    5c62:	0018      	movs	r0, r3
    5c64:	4b6e      	ldr	r3, [pc, #440]	; (5e20 <usart_init+0x274>)
    5c66:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	222d      	movs	r2, #45	; 0x2d
    5c6c:	5c9b      	ldrb	r3, [r3, r2]
    5c6e:	2100      	movs	r1, #0
    5c70:	0018      	movs	r0, r3
    5c72:	4b6c      	ldr	r3, [pc, #432]	; (5e24 <usart_init+0x278>)
    5c74:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	7ada      	ldrb	r2, [r3, #11]
    5c7a:	68fb      	ldr	r3, [r7, #12]
    5c7c:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	2224      	movs	r2, #36	; 0x24
    5c82:	5c9a      	ldrb	r2, [r3, r2]
    5c84:	68fb      	ldr	r3, [r7, #12]
    5c86:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	2225      	movs	r2, #37	; 0x25
    5c8c:	5c9a      	ldrb	r2, [r3, r2]
    5c8e:	68fb      	ldr	r3, [r7, #12]
    5c90:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	7eda      	ldrb	r2, [r3, #27]
    5c96:	68fb      	ldr	r3, [r7, #12]
    5c98:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	7f1a      	ldrb	r2, [r3, #28]
    5c9e:	68fb      	ldr	r3, [r7, #12]
    5ca0:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5ca2:	2333      	movs	r3, #51	; 0x33
    5ca4:	18fc      	adds	r4, r7, r3
    5ca6:	687a      	ldr	r2, [r7, #4]
    5ca8:	68fb      	ldr	r3, [r7, #12]
    5caa:	0011      	movs	r1, r2
    5cac:	0018      	movs	r0, r3
    5cae:	4b5e      	ldr	r3, [pc, #376]	; (5e28 <usart_init+0x27c>)
    5cb0:	4798      	blx	r3
    5cb2:	0003      	movs	r3, r0
    5cb4:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5cb6:	2333      	movs	r3, #51	; 0x33
    5cb8:	18fb      	adds	r3, r7, r3
    5cba:	781b      	ldrb	r3, [r3, #0]
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d003      	beq.n	5cc8 <usart_init+0x11c>
		return status_code;
    5cc0:	2333      	movs	r3, #51	; 0x33
    5cc2:	18fb      	adds	r3, r7, r3
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	e09f      	b.n	5e08 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5cc8:	2320      	movs	r3, #32
    5cca:	18fb      	adds	r3, r7, r3
    5ccc:	0018      	movs	r0, r3
    5cce:	4b57      	ldr	r3, [pc, #348]	; (5e2c <usart_init+0x280>)
    5cd0:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5cd2:	2320      	movs	r3, #32
    5cd4:	18fb      	adds	r3, r7, r3
    5cd6:	2200      	movs	r2, #0
    5cd8:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5cda:	2320      	movs	r3, #32
    5cdc:	18fb      	adds	r3, r7, r3
    5cde:	2200      	movs	r2, #0
    5ce0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5ce6:	2310      	movs	r3, #16
    5ce8:	18fb      	adds	r3, r7, r3
    5cea:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5cec:	687b      	ldr	r3, [r7, #4]
    5cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5cf0:	2310      	movs	r3, #16
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5cfa:	2310      	movs	r3, #16
    5cfc:	18fb      	adds	r3, r7, r3
    5cfe:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5d04:	2310      	movs	r3, #16
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5d0a:	233f      	movs	r3, #63	; 0x3f
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	2200      	movs	r2, #0
    5d10:	701a      	strb	r2, [r3, #0]
    5d12:	e02c      	b.n	5d6e <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5d14:	233f      	movs	r3, #63	; 0x3f
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	781a      	ldrb	r2, [r3, #0]
    5d1a:	2310      	movs	r3, #16
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	0092      	lsls	r2, r2, #2
    5d20:	58d3      	ldr	r3, [r2, r3]
    5d22:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    5d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d26:	2b00      	cmp	r3, #0
    5d28:	d109      	bne.n	5d3e <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5d2a:	233f      	movs	r3, #63	; 0x3f
    5d2c:	18fb      	adds	r3, r7, r3
    5d2e:	781a      	ldrb	r2, [r3, #0]
    5d30:	68bb      	ldr	r3, [r7, #8]
    5d32:	0011      	movs	r1, r2
    5d34:	0018      	movs	r0, r3
    5d36:	4b3e      	ldr	r3, [pc, #248]	; (5e30 <usart_init+0x284>)
    5d38:	4798      	blx	r3
    5d3a:	0003      	movs	r3, r0
    5d3c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d40:	3301      	adds	r3, #1
    5d42:	d00d      	beq.n	5d60 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d46:	b2da      	uxtb	r2, r3
    5d48:	2320      	movs	r3, #32
    5d4a:	18fb      	adds	r3, r7, r3
    5d4c:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5d50:	0c1b      	lsrs	r3, r3, #16
    5d52:	b2db      	uxtb	r3, r3
    5d54:	2220      	movs	r2, #32
    5d56:	18ba      	adds	r2, r7, r2
    5d58:	0011      	movs	r1, r2
    5d5a:	0018      	movs	r0, r3
    5d5c:	4b35      	ldr	r3, [pc, #212]	; (5e34 <usart_init+0x288>)
    5d5e:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    5d60:	233f      	movs	r3, #63	; 0x3f
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	781a      	ldrb	r2, [r3, #0]
    5d66:	233f      	movs	r3, #63	; 0x3f
    5d68:	18fb      	adds	r3, r7, r3
    5d6a:	3201      	adds	r2, #1
    5d6c:	701a      	strb	r2, [r3, #0]
    5d6e:	233f      	movs	r3, #63	; 0x3f
    5d70:	18fb      	adds	r3, r7, r3
    5d72:	781b      	ldrb	r3, [r3, #0]
    5d74:	2b03      	cmp	r3, #3
    5d76:	d9cd      	bls.n	5d14 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5d78:	2300      	movs	r3, #0
    5d7a:	637b      	str	r3, [r7, #52]	; 0x34
    5d7c:	e00a      	b.n	5d94 <usart_init+0x1e8>
		module->callback[i]            = NULL;
    5d7e:	68fa      	ldr	r2, [r7, #12]
    5d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d82:	3302      	adds	r3, #2
    5d84:	009b      	lsls	r3, r3, #2
    5d86:	18d3      	adds	r3, r2, r3
    5d88:	3304      	adds	r3, #4
    5d8a:	2200      	movs	r2, #0
    5d8c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d90:	3301      	adds	r3, #1
    5d92:	637b      	str	r3, [r7, #52]	; 0x34
    5d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d96:	2b05      	cmp	r3, #5
    5d98:	d9f1      	bls.n	5d7e <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
    5d9a:	68fb      	ldr	r3, [r7, #12]
    5d9c:	2200      	movs	r2, #0
    5d9e:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5da0:	68fb      	ldr	r3, [r7, #12]
    5da2:	2200      	movs	r2, #0
    5da4:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5da6:	68fb      	ldr	r3, [r7, #12]
    5da8:	2200      	movs	r2, #0
    5daa:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5dac:	68fb      	ldr	r3, [r7, #12]
    5dae:	2200      	movs	r2, #0
    5db0:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	2230      	movs	r2, #48	; 0x30
    5db6:	2100      	movs	r1, #0
    5db8:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5dba:	68fb      	ldr	r3, [r7, #12]
    5dbc:	2231      	movs	r2, #49	; 0x31
    5dbe:	2100      	movs	r1, #0
    5dc0:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5dc2:	68fb      	ldr	r3, [r7, #12]
    5dc4:	2232      	movs	r2, #50	; 0x32
    5dc6:	2100      	movs	r1, #0
    5dc8:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5dca:	68fb      	ldr	r3, [r7, #12]
    5dcc:	2233      	movs	r2, #51	; 0x33
    5dce:	2100      	movs	r1, #0
    5dd0:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5dd2:	68fb      	ldr	r3, [r7, #12]
    5dd4:	681b      	ldr	r3, [r3, #0]
    5dd6:	2227      	movs	r2, #39	; 0x27
    5dd8:	18bc      	adds	r4, r7, r2
    5dda:	0018      	movs	r0, r3
    5ddc:	4b0c      	ldr	r3, [pc, #48]	; (5e10 <usart_init+0x264>)
    5dde:	4798      	blx	r3
    5de0:	0003      	movs	r3, r0
    5de2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5de4:	4a14      	ldr	r2, [pc, #80]	; (5e38 <usart_init+0x28c>)
    5de6:	2327      	movs	r3, #39	; 0x27
    5de8:	18fb      	adds	r3, r7, r3
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	0011      	movs	r1, r2
    5dee:	0018      	movs	r0, r3
    5df0:	4b12      	ldr	r3, [pc, #72]	; (5e3c <usart_init+0x290>)
    5df2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5df4:	2327      	movs	r3, #39	; 0x27
    5df6:	18fb      	adds	r3, r7, r3
    5df8:	781a      	ldrb	r2, [r3, #0]
    5dfa:	4b11      	ldr	r3, [pc, #68]	; (5e40 <usart_init+0x294>)
    5dfc:	0092      	lsls	r2, r2, #2
    5dfe:	68f9      	ldr	r1, [r7, #12]
    5e00:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5e02:	2333      	movs	r3, #51	; 0x33
    5e04:	18fb      	adds	r3, r7, r3
    5e06:	781b      	ldrb	r3, [r3, #0]
}
    5e08:	0018      	movs	r0, r3
    5e0a:	46bd      	mov	sp, r7
    5e0c:	b013      	add	sp, #76	; 0x4c
    5e0e:	bd90      	pop	{r4, r7, pc}
    5e10:	00006895 	.word	0x00006895
    5e14:	000057c9 	.word	0x000057c9
    5e18:	000057b1 	.word	0x000057b1
    5e1c:	00007a09 	.word	0x00007a09
    5e20:	00007a49 	.word	0x00007a49
    5e24:	0000664d 	.word	0x0000664d
    5e28:	000058d1 	.word	0x000058d1
    5e2c:	00005845 	.word	0x00005845
    5e30:	000066d9 	.word	0x000066d9
    5e34:	00007d31 	.word	0x00007d31
    5e38:	00005fd9 	.word	0x00005fd9
    5e3c:	000068f9 	.word	0x000068f9
    5e40:	2000039c 	.word	0x2000039c

00005e44 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b084      	sub	sp, #16
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	000a      	movs	r2, r1
    5e4e:	1cbb      	adds	r3, r7, #2
    5e50:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	681b      	ldr	r3, [r3, #0]
    5e56:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	79db      	ldrb	r3, [r3, #7]
    5e5c:	2201      	movs	r2, #1
    5e5e:	4053      	eors	r3, r2
    5e60:	b2db      	uxtb	r3, r3
    5e62:	2b00      	cmp	r3, #0
    5e64:	d001      	beq.n	5e6a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5e66:	231c      	movs	r3, #28
    5e68:	e017      	b.n	5e9a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5e6e:	b29b      	uxth	r3, r3
    5e70:	2b00      	cmp	r3, #0
    5e72:	d001      	beq.n	5e78 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5e74:	2305      	movs	r3, #5
    5e76:	e010      	b.n	5e9a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	0018      	movs	r0, r3
    5e7c:	4b09      	ldr	r3, [pc, #36]	; (5ea4 <usart_write_wait+0x60>)
    5e7e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5e80:	68fb      	ldr	r3, [r7, #12]
    5e82:	1cba      	adds	r2, r7, #2
    5e84:	8812      	ldrh	r2, [r2, #0]
    5e86:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5e88:	46c0      	nop			; (mov r8, r8)
    5e8a:	68fb      	ldr	r3, [r7, #12]
    5e8c:	7e1b      	ldrb	r3, [r3, #24]
    5e8e:	b2db      	uxtb	r3, r3
    5e90:	001a      	movs	r2, r3
    5e92:	2302      	movs	r3, #2
    5e94:	4013      	ands	r3, r2
    5e96:	d0f8      	beq.n	5e8a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5e98:	2300      	movs	r3, #0
}
    5e9a:	0018      	movs	r0, r3
    5e9c:	46bd      	mov	sp, r7
    5e9e:	b004      	add	sp, #16
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	000058ad 	.word	0x000058ad

00005ea8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b084      	sub	sp, #16
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	799b      	ldrb	r3, [r3, #6]
    5ebc:	2201      	movs	r2, #1
    5ebe:	4053      	eors	r3, r2
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d001      	beq.n	5eca <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5ec6:	231c      	movs	r3, #28
    5ec8:	e05e      	b.n	5f88 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5ece:	b29b      	uxth	r3, r3
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	d001      	beq.n	5ed8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5ed4:	2305      	movs	r3, #5
    5ed6:	e057      	b.n	5f88 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5ed8:	68fb      	ldr	r3, [r7, #12]
    5eda:	7e1b      	ldrb	r3, [r3, #24]
    5edc:	b2db      	uxtb	r3, r3
    5ede:	001a      	movs	r2, r3
    5ee0:	2304      	movs	r3, #4
    5ee2:	4013      	ands	r3, r2
    5ee4:	d101      	bne.n	5eea <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5ee6:	2305      	movs	r3, #5
    5ee8:	e04e      	b.n	5f88 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	0018      	movs	r0, r3
    5eee:	4b28      	ldr	r3, [pc, #160]	; (5f90 <usart_read_wait+0xe8>)
    5ef0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5ef2:	68fb      	ldr	r3, [r7, #12]
    5ef4:	8b5b      	ldrh	r3, [r3, #26]
    5ef6:	b29b      	uxth	r3, r3
    5ef8:	b2da      	uxtb	r2, r3
    5efa:	230b      	movs	r3, #11
    5efc:	18fb      	adds	r3, r7, r3
    5efe:	213f      	movs	r1, #63	; 0x3f
    5f00:	400a      	ands	r2, r1
    5f02:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5f04:	230b      	movs	r3, #11
    5f06:	18fb      	adds	r3, r7, r3
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d036      	beq.n	5f7c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    5f0e:	230b      	movs	r3, #11
    5f10:	18fb      	adds	r3, r7, r3
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	2202      	movs	r2, #2
    5f16:	4013      	ands	r3, r2
    5f18:	d004      	beq.n	5f24 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	2202      	movs	r2, #2
    5f1e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5f20:	231a      	movs	r3, #26
    5f22:	e031      	b.n	5f88 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5f24:	230b      	movs	r3, #11
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	781b      	ldrb	r3, [r3, #0]
    5f2a:	2204      	movs	r2, #4
    5f2c:	4013      	ands	r3, r2
    5f2e:	d004      	beq.n	5f3a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	2204      	movs	r2, #4
    5f34:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5f36:	231e      	movs	r3, #30
    5f38:	e026      	b.n	5f88 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5f3a:	230b      	movs	r3, #11
    5f3c:	18fb      	adds	r3, r7, r3
    5f3e:	781b      	ldrb	r3, [r3, #0]
    5f40:	2201      	movs	r2, #1
    5f42:	4013      	ands	r3, r2
    5f44:	d004      	beq.n	5f50 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5f46:	68fb      	ldr	r3, [r7, #12]
    5f48:	2201      	movs	r2, #1
    5f4a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    5f4c:	2313      	movs	r3, #19
    5f4e:	e01b      	b.n	5f88 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5f50:	230b      	movs	r3, #11
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	781b      	ldrb	r3, [r3, #0]
    5f56:	2210      	movs	r2, #16
    5f58:	4013      	ands	r3, r2
    5f5a:	d004      	beq.n	5f66 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5f5c:	68fb      	ldr	r3, [r7, #12]
    5f5e:	2210      	movs	r2, #16
    5f60:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5f62:	2342      	movs	r3, #66	; 0x42
    5f64:	e010      	b.n	5f88 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5f66:	230b      	movs	r3, #11
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	781b      	ldrb	r3, [r3, #0]
    5f6c:	2220      	movs	r2, #32
    5f6e:	4013      	ands	r3, r2
    5f70:	d004      	beq.n	5f7c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5f72:	68fb      	ldr	r3, [r7, #12]
    5f74:	2220      	movs	r2, #32
    5f76:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5f78:	2341      	movs	r3, #65	; 0x41
    5f7a:	e005      	b.n	5f88 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5f80:	b29a      	uxth	r2, r3
    5f82:	683b      	ldr	r3, [r7, #0]
    5f84:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5f86:	2300      	movs	r3, #0
}
    5f88:	0018      	movs	r0, r3
    5f8a:	46bd      	mov	sp, r7
    5f8c:	b004      	add	sp, #16
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	000058ad 	.word	0x000058ad

00005f94 <usart_is_syncing>:
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b084      	sub	sp, #16
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	681b      	ldr	r3, [r3, #0]
    5fa0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    5fa2:	68fb      	ldr	r3, [r7, #12]
    5fa4:	69db      	ldr	r3, [r3, #28]
    5fa6:	1e5a      	subs	r2, r3, #1
    5fa8:	4193      	sbcs	r3, r2
    5faa:	b2db      	uxtb	r3, r3
}
    5fac:	0018      	movs	r0, r3
    5fae:	46bd      	mov	sp, r7
    5fb0:	b004      	add	sp, #16
    5fb2:	bd80      	pop	{r7, pc}

00005fb4 <_usart_wait_for_sync>:
{
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b082      	sub	sp, #8
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5fbc:	46c0      	nop			; (mov r8, r8)
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	0018      	movs	r0, r3
    5fc2:	4b04      	ldr	r3, [pc, #16]	; (5fd4 <_usart_wait_for_sync+0x20>)
    5fc4:	4798      	blx	r3
    5fc6:	1e03      	subs	r3, r0, #0
    5fc8:	d1f9      	bne.n	5fbe <_usart_wait_for_sync+0xa>
}
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	46bd      	mov	sp, r7
    5fce:	b002      	add	sp, #8
    5fd0:	bd80      	pop	{r7, pc}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	00005f95 	.word	0x00005f95

00005fd8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b088      	sub	sp, #32
    5fdc:	af00      	add	r7, sp, #0
    5fde:	0002      	movs	r2, r0
    5fe0:	1dfb      	adds	r3, r7, #7
    5fe2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5fe4:	1dfb      	adds	r3, r7, #7
    5fe6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5fe8:	4ba3      	ldr	r3, [pc, #652]	; (6278 <_usart_interrupt_handler+0x2a0>)
    5fea:	0092      	lsls	r2, r2, #2
    5fec:	58d3      	ldr	r3, [r2, r3]
    5fee:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5ff0:	69bb      	ldr	r3, [r7, #24]
    5ff2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5ff4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5ff6:	69bb      	ldr	r3, [r7, #24]
    5ff8:	0018      	movs	r0, r3
    5ffa:	4ba0      	ldr	r3, [pc, #640]	; (627c <_usart_interrupt_handler+0x2a4>)
    5ffc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5ffe:	697b      	ldr	r3, [r7, #20]
    6000:	7e1b      	ldrb	r3, [r3, #24]
    6002:	b2da      	uxtb	r2, r3
    6004:	2312      	movs	r3, #18
    6006:	18fb      	adds	r3, r7, r3
    6008:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    600a:	697b      	ldr	r3, [r7, #20]
    600c:	7d9b      	ldrb	r3, [r3, #22]
    600e:	b2db      	uxtb	r3, r3
    6010:	b29a      	uxth	r2, r3
    6012:	2312      	movs	r3, #18
    6014:	18fb      	adds	r3, r7, r3
    6016:	2112      	movs	r1, #18
    6018:	1879      	adds	r1, r7, r1
    601a:	8809      	ldrh	r1, [r1, #0]
    601c:	400a      	ands	r2, r1
    601e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6020:	69bb      	ldr	r3, [r7, #24]
    6022:	2230      	movs	r2, #48	; 0x30
    6024:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    6026:	69ba      	ldr	r2, [r7, #24]
    6028:	2131      	movs	r1, #49	; 0x31
    602a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    602c:	4013      	ands	r3, r2
    602e:	b2da      	uxtb	r2, r3
    6030:	2310      	movs	r3, #16
    6032:	18fb      	adds	r3, r7, r3
    6034:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6036:	2312      	movs	r3, #18
    6038:	18fb      	adds	r3, r7, r3
    603a:	881b      	ldrh	r3, [r3, #0]
    603c:	2201      	movs	r2, #1
    603e:	4013      	ands	r3, r2
    6040:	d044      	beq.n	60cc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    6042:	69bb      	ldr	r3, [r7, #24]
    6044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6046:	b29b      	uxth	r3, r3
    6048:	2b00      	cmp	r3, #0
    604a:	d03c      	beq.n	60c6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    604c:	69bb      	ldr	r3, [r7, #24]
    604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	b2da      	uxtb	r2, r3
    6054:	231c      	movs	r3, #28
    6056:	18fb      	adds	r3, r7, r3
    6058:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    605a:	69bb      	ldr	r3, [r7, #24]
    605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    605e:	1c5a      	adds	r2, r3, #1
    6060:	69bb      	ldr	r3, [r7, #24]
    6062:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6064:	69bb      	ldr	r3, [r7, #24]
    6066:	795b      	ldrb	r3, [r3, #5]
    6068:	2b01      	cmp	r3, #1
    606a:	d113      	bne.n	6094 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    606c:	69bb      	ldr	r3, [r7, #24]
    606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6070:	781b      	ldrb	r3, [r3, #0]
    6072:	b2db      	uxtb	r3, r3
    6074:	021b      	lsls	r3, r3, #8
    6076:	b21a      	sxth	r2, r3
    6078:	231c      	movs	r3, #28
    607a:	18fb      	adds	r3, r7, r3
    607c:	2100      	movs	r1, #0
    607e:	5e5b      	ldrsh	r3, [r3, r1]
    6080:	4313      	orrs	r3, r2
    6082:	b21a      	sxth	r2, r3
    6084:	231c      	movs	r3, #28
    6086:	18fb      	adds	r3, r7, r3
    6088:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    608a:	69bb      	ldr	r3, [r7, #24]
    608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    608e:	1c5a      	adds	r2, r3, #1
    6090:	69bb      	ldr	r3, [r7, #24]
    6092:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6094:	231c      	movs	r3, #28
    6096:	18fb      	adds	r3, r7, r3
    6098:	881b      	ldrh	r3, [r3, #0]
    609a:	05db      	lsls	r3, r3, #23
    609c:	0ddb      	lsrs	r3, r3, #23
    609e:	b29a      	uxth	r2, r3
    60a0:	697b      	ldr	r3, [r7, #20]
    60a2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    60a4:	69bb      	ldr	r3, [r7, #24]
    60a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    60a8:	b29b      	uxth	r3, r3
    60aa:	3b01      	subs	r3, #1
    60ac:	b29b      	uxth	r3, r3
    60ae:	69ba      	ldr	r2, [r7, #24]
    60b0:	1c19      	adds	r1, r3, #0
    60b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    60b4:	2b00      	cmp	r3, #0
    60b6:	d109      	bne.n	60cc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    60b8:	697b      	ldr	r3, [r7, #20]
    60ba:	2201      	movs	r2, #1
    60bc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    60be:	697b      	ldr	r3, [r7, #20]
    60c0:	2202      	movs	r2, #2
    60c2:	759a      	strb	r2, [r3, #22]
    60c4:	e002      	b.n	60cc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    60c6:	697b      	ldr	r3, [r7, #20]
    60c8:	2201      	movs	r2, #1
    60ca:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    60cc:	2312      	movs	r3, #18
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	881b      	ldrh	r3, [r3, #0]
    60d2:	2202      	movs	r2, #2
    60d4:	4013      	ands	r3, r2
    60d6:	d011      	beq.n	60fc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    60d8:	697b      	ldr	r3, [r7, #20]
    60da:	2202      	movs	r2, #2
    60dc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    60de:	69bb      	ldr	r3, [r7, #24]
    60e0:	2233      	movs	r2, #51	; 0x33
    60e2:	2100      	movs	r1, #0
    60e4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    60e6:	2310      	movs	r3, #16
    60e8:	18fb      	adds	r3, r7, r3
    60ea:	881b      	ldrh	r3, [r3, #0]
    60ec:	2201      	movs	r2, #1
    60ee:	4013      	ands	r3, r2
    60f0:	d004      	beq.n	60fc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    60f2:	69bb      	ldr	r3, [r7, #24]
    60f4:	68db      	ldr	r3, [r3, #12]
    60f6:	69ba      	ldr	r2, [r7, #24]
    60f8:	0010      	movs	r0, r2
    60fa:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    60fc:	2312      	movs	r3, #18
    60fe:	18fb      	adds	r3, r7, r3
    6100:	881b      	ldrh	r3, [r3, #0]
    6102:	2204      	movs	r2, #4
    6104:	4013      	ands	r3, r2
    6106:	d100      	bne.n	610a <_usart_interrupt_handler+0x132>
    6108:	e0bd      	b.n	6286 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    610a:	69bb      	ldr	r3, [r7, #24]
    610c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    610e:	b29b      	uxth	r3, r3
    6110:	2b00      	cmp	r3, #0
    6112:	d100      	bne.n	6116 <_usart_interrupt_handler+0x13e>
    6114:	e0b4      	b.n	6280 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6116:	697b      	ldr	r3, [r7, #20]
    6118:	8b5b      	ldrh	r3, [r3, #26]
    611a:	b29b      	uxth	r3, r3
    611c:	b2da      	uxtb	r2, r3
    611e:	231f      	movs	r3, #31
    6120:	18fb      	adds	r3, r7, r3
    6122:	213f      	movs	r1, #63	; 0x3f
    6124:	400a      	ands	r2, r1
    6126:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6128:	231f      	movs	r3, #31
    612a:	18fb      	adds	r3, r7, r3
    612c:	781b      	ldrb	r3, [r3, #0]
    612e:	2208      	movs	r2, #8
    6130:	4013      	ands	r3, r2
    6132:	d007      	beq.n	6144 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6134:	231f      	movs	r3, #31
    6136:	18fb      	adds	r3, r7, r3
    6138:	221f      	movs	r2, #31
    613a:	18ba      	adds	r2, r7, r2
    613c:	7812      	ldrb	r2, [r2, #0]
    613e:	2108      	movs	r1, #8
    6140:	438a      	bics	r2, r1
    6142:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6144:	231f      	movs	r3, #31
    6146:	18fb      	adds	r3, r7, r3
    6148:	781b      	ldrb	r3, [r3, #0]
    614a:	2b00      	cmp	r3, #0
    614c:	d050      	beq.n	61f0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    614e:	231f      	movs	r3, #31
    6150:	18fb      	adds	r3, r7, r3
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2202      	movs	r2, #2
    6156:	4013      	ands	r3, r2
    6158:	d007      	beq.n	616a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    615a:	69bb      	ldr	r3, [r7, #24]
    615c:	2232      	movs	r2, #50	; 0x32
    615e:	211a      	movs	r1, #26
    6160:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6162:	697b      	ldr	r3, [r7, #20]
    6164:	2202      	movs	r2, #2
    6166:	835a      	strh	r2, [r3, #26]
    6168:	e036      	b.n	61d8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    616a:	231f      	movs	r3, #31
    616c:	18fb      	adds	r3, r7, r3
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	2204      	movs	r2, #4
    6172:	4013      	ands	r3, r2
    6174:	d007      	beq.n	6186 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    6176:	69bb      	ldr	r3, [r7, #24]
    6178:	2232      	movs	r2, #50	; 0x32
    617a:	211e      	movs	r1, #30
    617c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    617e:	697b      	ldr	r3, [r7, #20]
    6180:	2204      	movs	r2, #4
    6182:	835a      	strh	r2, [r3, #26]
    6184:	e028      	b.n	61d8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6186:	231f      	movs	r3, #31
    6188:	18fb      	adds	r3, r7, r3
    618a:	781b      	ldrb	r3, [r3, #0]
    618c:	2201      	movs	r2, #1
    618e:	4013      	ands	r3, r2
    6190:	d007      	beq.n	61a2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6192:	69bb      	ldr	r3, [r7, #24]
    6194:	2232      	movs	r2, #50	; 0x32
    6196:	2113      	movs	r1, #19
    6198:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    619a:	697b      	ldr	r3, [r7, #20]
    619c:	2201      	movs	r2, #1
    619e:	835a      	strh	r2, [r3, #26]
    61a0:	e01a      	b.n	61d8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    61a2:	231f      	movs	r3, #31
    61a4:	18fb      	adds	r3, r7, r3
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	2210      	movs	r2, #16
    61aa:	4013      	ands	r3, r2
    61ac:	d007      	beq.n	61be <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    61ae:	69bb      	ldr	r3, [r7, #24]
    61b0:	2232      	movs	r2, #50	; 0x32
    61b2:	2142      	movs	r1, #66	; 0x42
    61b4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    61b6:	697b      	ldr	r3, [r7, #20]
    61b8:	2210      	movs	r2, #16
    61ba:	835a      	strh	r2, [r3, #26]
    61bc:	e00c      	b.n	61d8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    61be:	231f      	movs	r3, #31
    61c0:	18fb      	adds	r3, r7, r3
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	2220      	movs	r2, #32
    61c6:	4013      	ands	r3, r2
    61c8:	d006      	beq.n	61d8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    61ca:	69bb      	ldr	r3, [r7, #24]
    61cc:	2232      	movs	r2, #50	; 0x32
    61ce:	2141      	movs	r1, #65	; 0x41
    61d0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    61d2:	697b      	ldr	r3, [r7, #20]
    61d4:	2220      	movs	r2, #32
    61d6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    61d8:	2310      	movs	r3, #16
    61da:	18fb      	adds	r3, r7, r3
    61dc:	881b      	ldrh	r3, [r3, #0]
    61de:	2204      	movs	r2, #4
    61e0:	4013      	ands	r3, r2
				if (callback_status
    61e2:	d050      	beq.n	6286 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    61e4:	69bb      	ldr	r3, [r7, #24]
    61e6:	695b      	ldr	r3, [r3, #20]
    61e8:	69ba      	ldr	r2, [r7, #24]
    61ea:	0010      	movs	r0, r2
    61ec:	4798      	blx	r3
    61ee:	e04a      	b.n	6286 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    61f0:	697b      	ldr	r3, [r7, #20]
    61f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    61f4:	b29a      	uxth	r2, r3
    61f6:	230e      	movs	r3, #14
    61f8:	18fb      	adds	r3, r7, r3
    61fa:	05d2      	lsls	r2, r2, #23
    61fc:	0dd2      	lsrs	r2, r2, #23
    61fe:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6200:	69bb      	ldr	r3, [r7, #24]
    6202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6204:	220e      	movs	r2, #14
    6206:	18ba      	adds	r2, r7, r2
    6208:	8812      	ldrh	r2, [r2, #0]
    620a:	b2d2      	uxtb	r2, r2
    620c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    620e:	69bb      	ldr	r3, [r7, #24]
    6210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6212:	1c5a      	adds	r2, r3, #1
    6214:	69bb      	ldr	r3, [r7, #24]
    6216:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6218:	69bb      	ldr	r3, [r7, #24]
    621a:	795b      	ldrb	r3, [r3, #5]
    621c:	2b01      	cmp	r3, #1
    621e:	d10d      	bne.n	623c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6220:	69bb      	ldr	r3, [r7, #24]
    6222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6224:	220e      	movs	r2, #14
    6226:	18ba      	adds	r2, r7, r2
    6228:	8812      	ldrh	r2, [r2, #0]
    622a:	0a12      	lsrs	r2, r2, #8
    622c:	b292      	uxth	r2, r2
    622e:	b2d2      	uxtb	r2, r2
    6230:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    6232:	69bb      	ldr	r3, [r7, #24]
    6234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6236:	1c5a      	adds	r2, r3, #1
    6238:	69bb      	ldr	r3, [r7, #24]
    623a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    623c:	69bb      	ldr	r3, [r7, #24]
    623e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6240:	b29b      	uxth	r3, r3
    6242:	3b01      	subs	r3, #1
    6244:	b29b      	uxth	r3, r3
    6246:	69ba      	ldr	r2, [r7, #24]
    6248:	1c19      	adds	r1, r3, #0
    624a:	8591      	strh	r1, [r2, #44]	; 0x2c
    624c:	2b00      	cmp	r3, #0
    624e:	d11a      	bne.n	6286 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6250:	697b      	ldr	r3, [r7, #20]
    6252:	2204      	movs	r2, #4
    6254:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6256:	69bb      	ldr	r3, [r7, #24]
    6258:	2232      	movs	r2, #50	; 0x32
    625a:	2100      	movs	r1, #0
    625c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    625e:	2310      	movs	r3, #16
    6260:	18fb      	adds	r3, r7, r3
    6262:	881b      	ldrh	r3, [r3, #0]
    6264:	2202      	movs	r2, #2
    6266:	4013      	ands	r3, r2
					if (callback_status
    6268:	d00d      	beq.n	6286 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    626a:	69bb      	ldr	r3, [r7, #24]
    626c:	691b      	ldr	r3, [r3, #16]
    626e:	69ba      	ldr	r2, [r7, #24]
    6270:	0010      	movs	r0, r2
    6272:	4798      	blx	r3
    6274:	e007      	b.n	6286 <_usart_interrupt_handler+0x2ae>
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	2000039c 	.word	0x2000039c
    627c:	00005fb5 	.word	0x00005fb5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6280:	697b      	ldr	r3, [r7, #20]
    6282:	2204      	movs	r2, #4
    6284:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6286:	2312      	movs	r3, #18
    6288:	18fb      	adds	r3, r7, r3
    628a:	881b      	ldrh	r3, [r3, #0]
    628c:	2210      	movs	r2, #16
    628e:	4013      	ands	r3, r2
    6290:	d010      	beq.n	62b4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6292:	697b      	ldr	r3, [r7, #20]
    6294:	2210      	movs	r2, #16
    6296:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6298:	697b      	ldr	r3, [r7, #20]
    629a:	2210      	movs	r2, #16
    629c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    629e:	2310      	movs	r3, #16
    62a0:	18fb      	adds	r3, r7, r3
    62a2:	881b      	ldrh	r3, [r3, #0]
    62a4:	2210      	movs	r2, #16
    62a6:	4013      	ands	r3, r2
    62a8:	d004      	beq.n	62b4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    62aa:	69bb      	ldr	r3, [r7, #24]
    62ac:	69db      	ldr	r3, [r3, #28]
    62ae:	69ba      	ldr	r2, [r7, #24]
    62b0:	0010      	movs	r0, r2
    62b2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    62b4:	2312      	movs	r3, #18
    62b6:	18fb      	adds	r3, r7, r3
    62b8:	881b      	ldrh	r3, [r3, #0]
    62ba:	2220      	movs	r2, #32
    62bc:	4013      	ands	r3, r2
    62be:	d010      	beq.n	62e2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    62c0:	697b      	ldr	r3, [r7, #20]
    62c2:	2220      	movs	r2, #32
    62c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    62c6:	697b      	ldr	r3, [r7, #20]
    62c8:	2220      	movs	r2, #32
    62ca:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    62cc:	2310      	movs	r3, #16
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	881b      	ldrh	r3, [r3, #0]
    62d2:	2208      	movs	r2, #8
    62d4:	4013      	ands	r3, r2
    62d6:	d004      	beq.n	62e2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    62d8:	69bb      	ldr	r3, [r7, #24]
    62da:	699b      	ldr	r3, [r3, #24]
    62dc:	69ba      	ldr	r2, [r7, #24]
    62de:	0010      	movs	r0, r2
    62e0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    62e2:	2312      	movs	r3, #18
    62e4:	18fb      	adds	r3, r7, r3
    62e6:	881b      	ldrh	r3, [r3, #0]
    62e8:	2208      	movs	r2, #8
    62ea:	4013      	ands	r3, r2
    62ec:	d010      	beq.n	6310 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    62ee:	697b      	ldr	r3, [r7, #20]
    62f0:	2208      	movs	r2, #8
    62f2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    62f4:	697b      	ldr	r3, [r7, #20]
    62f6:	2208      	movs	r2, #8
    62f8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    62fa:	2310      	movs	r3, #16
    62fc:	18fb      	adds	r3, r7, r3
    62fe:	881b      	ldrh	r3, [r3, #0]
    6300:	2220      	movs	r2, #32
    6302:	4013      	ands	r3, r2
    6304:	d004      	beq.n	6310 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6306:	69bb      	ldr	r3, [r7, #24]
    6308:	6a1b      	ldr	r3, [r3, #32]
    630a:	69ba      	ldr	r2, [r7, #24]
    630c:	0010      	movs	r0, r2
    630e:	4798      	blx	r3
		}
	}
#endif
}
    6310:	46c0      	nop			; (mov r8, r8)
    6312:	46bd      	mov	sp, r7
    6314:	b008      	add	sp, #32
    6316:	bd80      	pop	{r7, pc}

00006318 <system_gclk_chan_get_config_defaults>:
{
    6318:	b580      	push	{r7, lr}
    631a:	b082      	sub	sp, #8
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	2200      	movs	r2, #0
    6324:	701a      	strb	r2, [r3, #0]
}
    6326:	46c0      	nop			; (mov r8, r8)
    6328:	46bd      	mov	sp, r7
    632a:	b002      	add	sp, #8
    632c:	bd80      	pop	{r7, pc}

0000632e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    632e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6330:	b08d      	sub	sp, #52	; 0x34
    6332:	af00      	add	r7, sp, #0
    6334:	60b8      	str	r0, [r7, #8]
    6336:	60f9      	str	r1, [r7, #12]
    6338:	603a      	str	r2, [r7, #0]
    633a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    633c:	2300      	movs	r3, #0
    633e:	2400      	movs	r4, #0
    6340:	623b      	str	r3, [r7, #32]
    6342:	627c      	str	r4, [r7, #36]	; 0x24
    6344:	2300      	movs	r3, #0
    6346:	2400      	movs	r4, #0
    6348:	61bb      	str	r3, [r7, #24]
    634a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    634c:	233f      	movs	r3, #63	; 0x3f
    634e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6350:	e053      	b.n	63fa <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    6352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6354:	3b20      	subs	r3, #32
    6356:	2b00      	cmp	r3, #0
    6358:	db04      	blt.n	6364 <long_division+0x36>
    635a:	2201      	movs	r2, #1
    635c:	409a      	lsls	r2, r3
    635e:	0013      	movs	r3, r2
    6360:	617b      	str	r3, [r7, #20]
    6362:	e00b      	b.n	637c <long_division+0x4e>
    6364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6366:	2220      	movs	r2, #32
    6368:	1ad3      	subs	r3, r2, r3
    636a:	2201      	movs	r2, #1
    636c:	40da      	lsrs	r2, r3
    636e:	0013      	movs	r3, r2
    6370:	2100      	movs	r1, #0
    6372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6374:	4091      	lsls	r1, r2
    6376:	000a      	movs	r2, r1
    6378:	4313      	orrs	r3, r2
    637a:	617b      	str	r3, [r7, #20]
    637c:	2201      	movs	r2, #1
    637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6380:	409a      	lsls	r2, r3
    6382:	0013      	movs	r3, r2
    6384:	613b      	str	r3, [r7, #16]

		r = r << 1;
    6386:	69bb      	ldr	r3, [r7, #24]
    6388:	69fc      	ldr	r4, [r7, #28]
    638a:	18db      	adds	r3, r3, r3
    638c:	4164      	adcs	r4, r4
    638e:	61bb      	str	r3, [r7, #24]
    6390:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    6392:	68bb      	ldr	r3, [r7, #8]
    6394:	693a      	ldr	r2, [r7, #16]
    6396:	401a      	ands	r2, r3
    6398:	0015      	movs	r5, r2
    639a:	68fb      	ldr	r3, [r7, #12]
    639c:	697a      	ldr	r2, [r7, #20]
    639e:	401a      	ands	r2, r3
    63a0:	0016      	movs	r6, r2
    63a2:	002b      	movs	r3, r5
    63a4:	4333      	orrs	r3, r6
    63a6:	d007      	beq.n	63b8 <long_division+0x8a>
			r |= 0x01;
    63a8:	69bb      	ldr	r3, [r7, #24]
    63aa:	2201      	movs	r2, #1
    63ac:	4313      	orrs	r3, r2
    63ae:	61bb      	str	r3, [r7, #24]
    63b0:	69fb      	ldr	r3, [r7, #28]
    63b2:	2200      	movs	r2, #0
    63b4:	4313      	orrs	r3, r2
    63b6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    63b8:	687a      	ldr	r2, [r7, #4]
    63ba:	69fb      	ldr	r3, [r7, #28]
    63bc:	429a      	cmp	r2, r3
    63be:	d819      	bhi.n	63f4 <long_division+0xc6>
    63c0:	687a      	ldr	r2, [r7, #4]
    63c2:	69fb      	ldr	r3, [r7, #28]
    63c4:	429a      	cmp	r2, r3
    63c6:	d103      	bne.n	63d0 <long_division+0xa2>
    63c8:	683a      	ldr	r2, [r7, #0]
    63ca:	69bb      	ldr	r3, [r7, #24]
    63cc:	429a      	cmp	r2, r3
    63ce:	d811      	bhi.n	63f4 <long_division+0xc6>
			r = r - d;
    63d0:	69b9      	ldr	r1, [r7, #24]
    63d2:	69fa      	ldr	r2, [r7, #28]
    63d4:	683b      	ldr	r3, [r7, #0]
    63d6:	687c      	ldr	r4, [r7, #4]
    63d8:	1ac9      	subs	r1, r1, r3
    63da:	41a2      	sbcs	r2, r4
    63dc:	000b      	movs	r3, r1
    63de:	0014      	movs	r4, r2
    63e0:	61bb      	str	r3, [r7, #24]
    63e2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    63e4:	6a3a      	ldr	r2, [r7, #32]
    63e6:	693b      	ldr	r3, [r7, #16]
    63e8:	4313      	orrs	r3, r2
    63ea:	623b      	str	r3, [r7, #32]
    63ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    63ee:	697b      	ldr	r3, [r7, #20]
    63f0:	4313      	orrs	r3, r2
    63f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    63f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63f6:	3b01      	subs	r3, #1
    63f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    63fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63fc:	2b00      	cmp	r3, #0
    63fe:	daa8      	bge.n	6352 <long_division+0x24>
		}
	}

	return q;
    6400:	6a3b      	ldr	r3, [r7, #32]
    6402:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6404:	0018      	movs	r0, r3
    6406:	0021      	movs	r1, r4
    6408:	46bd      	mov	sp, r7
    640a:	b00d      	add	sp, #52	; 0x34
    640c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000640e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    640e:	b580      	push	{r7, lr}
    6410:	b086      	sub	sp, #24
    6412:	af00      	add	r7, sp, #0
    6414:	60f8      	str	r0, [r7, #12]
    6416:	60b9      	str	r1, [r7, #8]
    6418:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    641a:	2316      	movs	r3, #22
    641c:	18fb      	adds	r3, r7, r3
    641e:	2200      	movs	r2, #0
    6420:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6422:	68bb      	ldr	r3, [r7, #8]
    6424:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6426:	68bb      	ldr	r3, [r7, #8]
    6428:	085a      	lsrs	r2, r3, #1
    642a:	68fb      	ldr	r3, [r7, #12]
    642c:	429a      	cmp	r2, r3
    642e:	d201      	bcs.n	6434 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6430:	2340      	movs	r3, #64	; 0x40
    6432:	e026      	b.n	6482 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6434:	68bb      	ldr	r3, [r7, #8]
    6436:	085b      	lsrs	r3, r3, #1
    6438:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    643a:	e00a      	b.n	6452 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    643c:	693a      	ldr	r2, [r7, #16]
    643e:	68fb      	ldr	r3, [r7, #12]
    6440:	1ad3      	subs	r3, r2, r3
    6442:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    6444:	2316      	movs	r3, #22
    6446:	18fb      	adds	r3, r7, r3
    6448:	881a      	ldrh	r2, [r3, #0]
    644a:	2316      	movs	r3, #22
    644c:	18fb      	adds	r3, r7, r3
    644e:	3201      	adds	r2, #1
    6450:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    6452:	693a      	ldr	r2, [r7, #16]
    6454:	68fb      	ldr	r3, [r7, #12]
    6456:	429a      	cmp	r2, r3
    6458:	d2f0      	bcs.n	643c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    645a:	2316      	movs	r3, #22
    645c:	18fb      	adds	r3, r7, r3
    645e:	2216      	movs	r2, #22
    6460:	18ba      	adds	r2, r7, r2
    6462:	8812      	ldrh	r2, [r2, #0]
    6464:	3a01      	subs	r2, #1
    6466:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    6468:	2316      	movs	r3, #22
    646a:	18fb      	adds	r3, r7, r3
    646c:	881b      	ldrh	r3, [r3, #0]
    646e:	2bff      	cmp	r3, #255	; 0xff
    6470:	d901      	bls.n	6476 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6472:	2340      	movs	r3, #64	; 0x40
    6474:	e005      	b.n	6482 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	2216      	movs	r2, #22
    647a:	18ba      	adds	r2, r7, r2
    647c:	8812      	ldrh	r2, [r2, #0]
    647e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    6480:	2300      	movs	r3, #0
	}
}
    6482:	0018      	movs	r0, r3
    6484:	46bd      	mov	sp, r7
    6486:	b006      	add	sp, #24
    6488:	bd80      	pop	{r7, pc}
	...

0000648c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    648c:	b5f0      	push	{r4, r5, r6, r7, lr}
    648e:	b0a1      	sub	sp, #132	; 0x84
    6490:	af00      	add	r7, sp, #0
    6492:	64f8      	str	r0, [r7, #76]	; 0x4c
    6494:	64b9      	str	r1, [r7, #72]	; 0x48
    6496:	647a      	str	r2, [r7, #68]	; 0x44
    6498:	2243      	movs	r2, #67	; 0x43
    649a:	18ba      	adds	r2, r7, r2
    649c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    649e:	2300      	movs	r3, #0
    64a0:	2400      	movs	r4, #0
    64a2:	673b      	str	r3, [r7, #112]	; 0x70
    64a4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    64a6:	2300      	movs	r3, #0
    64a8:	2400      	movs	r4, #0
    64aa:	66bb      	str	r3, [r7, #104]	; 0x68
    64ac:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    64ae:	2300      	movs	r3, #0
    64b0:	2400      	movs	r4, #0
    64b2:	67bb      	str	r3, [r7, #120]	; 0x78
    64b4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    64b6:	2300      	movs	r3, #0
    64b8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    64ba:	2358      	movs	r3, #88	; 0x58
    64bc:	2240      	movs	r2, #64	; 0x40
    64be:	4694      	mov	ip, r2
    64c0:	44bc      	add	ip, r7
    64c2:	4463      	add	r3, ip
    64c4:	781a      	ldrb	r2, [r3, #0]
    64c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    64c8:	435a      	muls	r2, r3
    64ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    64cc:	429a      	cmp	r2, r3
    64ce:	d901      	bls.n	64d4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    64d0:	2340      	movs	r3, #64	; 0x40
    64d2:	e0b3      	b.n	663c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    64d4:	2343      	movs	r3, #67	; 0x43
    64d6:	18fb      	adds	r3, r7, r3
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	2b00      	cmp	r3, #0
    64dc:	d13d      	bne.n	655a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    64de:	2358      	movs	r3, #88	; 0x58
    64e0:	2240      	movs	r2, #64	; 0x40
    64e2:	4694      	mov	ip, r2
    64e4:	44bc      	add	ip, r7
    64e6:	4463      	add	r3, ip
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	b2db      	uxtb	r3, r3
    64ec:	613b      	str	r3, [r7, #16]
    64ee:	2300      	movs	r3, #0
    64f0:	617b      	str	r3, [r7, #20]
    64f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    64f4:	60bb      	str	r3, [r7, #8]
    64f6:	2300      	movs	r3, #0
    64f8:	60fb      	str	r3, [r7, #12]
    64fa:	4c52      	ldr	r4, [pc, #328]	; (6644 <_sercom_get_async_baud_val+0x1b8>)
    64fc:	68ba      	ldr	r2, [r7, #8]
    64fe:	68fb      	ldr	r3, [r7, #12]
    6500:	6938      	ldr	r0, [r7, #16]
    6502:	6979      	ldr	r1, [r7, #20]
    6504:	47a0      	blx	r4
    6506:	0003      	movs	r3, r0
    6508:	000c      	movs	r4, r1
    650a:	001b      	movs	r3, r3
    650c:	65fb      	str	r3, [r7, #92]	; 0x5c
    650e:	2300      	movs	r3, #0
    6510:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    6512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6514:	603b      	str	r3, [r7, #0]
    6516:	2300      	movs	r3, #0
    6518:	607b      	str	r3, [r7, #4]
    651a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    651c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    651e:	683a      	ldr	r2, [r7, #0]
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	4c49      	ldr	r4, [pc, #292]	; (6648 <_sercom_get_async_baud_val+0x1bc>)
    6524:	47a0      	blx	r4
    6526:	0003      	movs	r3, r0
    6528:	000c      	movs	r4, r1
    652a:	673b      	str	r3, [r7, #112]	; 0x70
    652c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    652e:	2100      	movs	r1, #0
    6530:	2201      	movs	r2, #1
    6532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    6534:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    6536:	1ac9      	subs	r1, r1, r3
    6538:	41a2      	sbcs	r2, r4
    653a:	000b      	movs	r3, r1
    653c:	0014      	movs	r4, r2
    653e:	66bb      	str	r3, [r7, #104]	; 0x68
    6540:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    6542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6544:	0c1b      	lsrs	r3, r3, #16
    6546:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6548:	0416      	lsls	r6, r2, #16
    654a:	431e      	orrs	r6, r3
    654c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    654e:	041d      	lsls	r5, r3, #16
    6550:	0033      	movs	r3, r6
    6552:	67bb      	str	r3, [r7, #120]	; 0x78
    6554:	2300      	movs	r3, #0
    6556:	67fb      	str	r3, [r7, #124]	; 0x7c
    6558:	e06a      	b.n	6630 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    655a:	2343      	movs	r3, #67	; 0x43
    655c:	18fb      	adds	r3, r7, r3
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2b01      	cmp	r3, #1
    6562:	d165      	bne.n	6630 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    6564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6566:	633b      	str	r3, [r7, #48]	; 0x30
    6568:	2300      	movs	r3, #0
    656a:	637b      	str	r3, [r7, #52]	; 0x34
    656c:	2358      	movs	r3, #88	; 0x58
    656e:	2240      	movs	r2, #64	; 0x40
    6570:	4694      	mov	ip, r2
    6572:	44bc      	add	ip, r7
    6574:	4463      	add	r3, ip
    6576:	781b      	ldrb	r3, [r3, #0]
    6578:	b2db      	uxtb	r3, r3
    657a:	62bb      	str	r3, [r7, #40]	; 0x28
    657c:	2300      	movs	r3, #0
    657e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6580:	4c30      	ldr	r4, [pc, #192]	; (6644 <_sercom_get_async_baud_val+0x1b8>)
    6582:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6586:	6b38      	ldr	r0, [r7, #48]	; 0x30
    6588:	6b79      	ldr	r1, [r7, #52]	; 0x34
    658a:	47a0      	blx	r4
    658c:	0003      	movs	r3, r0
    658e:	000c      	movs	r4, r1
    6590:	65bb      	str	r3, [r7, #88]	; 0x58
    6592:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    6594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6596:	623b      	str	r3, [r7, #32]
    6598:	2300      	movs	r3, #0
    659a:	627b      	str	r3, [r7, #36]	; 0x24
    659c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    659e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    65a0:	001a      	movs	r2, r3
    65a2:	0023      	movs	r3, r4
    65a4:	6a38      	ldr	r0, [r7, #32]
    65a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    65a8:	4c27      	ldr	r4, [pc, #156]	; (6648 <_sercom_get_async_baud_val+0x1bc>)
    65aa:	47a0      	blx	r4
    65ac:	0003      	movs	r3, r0
    65ae:	000c      	movs	r4, r1
    65b0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    65b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	019b      	lsls	r3, r3, #6
    65b8:	429a      	cmp	r2, r3
    65ba:	d901      	bls.n	65c0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    65bc:	2340      	movs	r3, #64	; 0x40
    65be:	e03d      	b.n	663c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    65c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65c2:	61bb      	str	r3, [r7, #24]
    65c4:	2300      	movs	r3, #0
    65c6:	61fb      	str	r3, [r7, #28]
    65c8:	69b9      	ldr	r1, [r7, #24]
    65ca:	69fa      	ldr	r2, [r7, #28]
    65cc:	000b      	movs	r3, r1
    65ce:	0f5b      	lsrs	r3, r3, #29
    65d0:	0010      	movs	r0, r2
    65d2:	00c0      	lsls	r0, r0, #3
    65d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    65d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    65d8:	4318      	orrs	r0, r3
    65da:	63f8      	str	r0, [r7, #60]	; 0x3c
    65dc:	000b      	movs	r3, r1
    65de:	00db      	lsls	r3, r3, #3
    65e0:	63bb      	str	r3, [r7, #56]	; 0x38
    65e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    65e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    65e6:	001a      	movs	r2, r3
    65e8:	0023      	movs	r3, r4
    65ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    65ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    65ee:	4c16      	ldr	r4, [pc, #88]	; (6648 <_sercom_get_async_baud_val+0x1bc>)
    65f0:	47a0      	blx	r4
    65f2:	0003      	movs	r3, r0
    65f4:	000c      	movs	r4, r1
    65f6:	65bb      	str	r3, [r7, #88]	; 0x58
    65f8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    65fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    65fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    65fe:	b2d9      	uxtb	r1, r3
    6600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6602:	b2db      	uxtb	r3, r3
    6604:	00db      	lsls	r3, r3, #3
    6606:	b2da      	uxtb	r2, r3
    6608:	2317      	movs	r3, #23
    660a:	2040      	movs	r0, #64	; 0x40
    660c:	4684      	mov	ip, r0
    660e:	44bc      	add	ip, r7
    6610:	4463      	add	r3, ip
    6612:	1a8a      	subs	r2, r1, r2
    6614:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    6616:	2317      	movs	r3, #23
    6618:	2240      	movs	r2, #64	; 0x40
    661a:	4694      	mov	ip, r2
    661c:	44bc      	add	ip, r7
    661e:	4463      	add	r3, ip
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	035b      	lsls	r3, r3, #13
    6624:	001a      	movs	r2, r3
    6626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6628:	4313      	orrs	r3, r2
    662a:	67bb      	str	r3, [r7, #120]	; 0x78
    662c:	2300      	movs	r3, #0
    662e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    6630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6632:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    6634:	b29a      	uxth	r2, r3
    6636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6638:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    663a:	2300      	movs	r3, #0
}
    663c:	0018      	movs	r0, r3
    663e:	46bd      	mov	sp, r7
    6640:	b021      	add	sp, #132	; 0x84
    6642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6644:	00008371 	.word	0x00008371
    6648:	0000632f 	.word	0x0000632f

0000664c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    664c:	b580      	push	{r7, lr}
    664e:	b084      	sub	sp, #16
    6650:	af00      	add	r7, sp, #0
    6652:	0002      	movs	r2, r0
    6654:	1dfb      	adds	r3, r7, #7
    6656:	701a      	strb	r2, [r3, #0]
    6658:	1dbb      	adds	r3, r7, #6
    665a:	1c0a      	adds	r2, r1, #0
    665c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    665e:	4b1a      	ldr	r3, [pc, #104]	; (66c8 <sercom_set_gclk_generator+0x7c>)
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	2201      	movs	r2, #1
    6664:	4053      	eors	r3, r2
    6666:	b2db      	uxtb	r3, r3
    6668:	2b00      	cmp	r3, #0
    666a:	d103      	bne.n	6674 <sercom_set_gclk_generator+0x28>
    666c:	1dbb      	adds	r3, r7, #6
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	2b00      	cmp	r3, #0
    6672:	d01b      	beq.n	66ac <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6674:	230c      	movs	r3, #12
    6676:	18fb      	adds	r3, r7, r3
    6678:	0018      	movs	r0, r3
    667a:	4b14      	ldr	r3, [pc, #80]	; (66cc <sercom_set_gclk_generator+0x80>)
    667c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    667e:	230c      	movs	r3, #12
    6680:	18fb      	adds	r3, r7, r3
    6682:	1dfa      	adds	r2, r7, #7
    6684:	7812      	ldrb	r2, [r2, #0]
    6686:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6688:	230c      	movs	r3, #12
    668a:	18fb      	adds	r3, r7, r3
    668c:	0019      	movs	r1, r3
    668e:	2011      	movs	r0, #17
    6690:	4b0f      	ldr	r3, [pc, #60]	; (66d0 <sercom_set_gclk_generator+0x84>)
    6692:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6694:	2011      	movs	r0, #17
    6696:	4b0f      	ldr	r3, [pc, #60]	; (66d4 <sercom_set_gclk_generator+0x88>)
    6698:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    669a:	4b0b      	ldr	r3, [pc, #44]	; (66c8 <sercom_set_gclk_generator+0x7c>)
    669c:	1dfa      	adds	r2, r7, #7
    669e:	7812      	ldrb	r2, [r2, #0]
    66a0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    66a2:	4b09      	ldr	r3, [pc, #36]	; (66c8 <sercom_set_gclk_generator+0x7c>)
    66a4:	2201      	movs	r2, #1
    66a6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    66a8:	2300      	movs	r3, #0
    66aa:	e008      	b.n	66be <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    66ac:	4b06      	ldr	r3, [pc, #24]	; (66c8 <sercom_set_gclk_generator+0x7c>)
    66ae:	785b      	ldrb	r3, [r3, #1]
    66b0:	1dfa      	adds	r2, r7, #7
    66b2:	7812      	ldrb	r2, [r2, #0]
    66b4:	429a      	cmp	r2, r3
    66b6:	d101      	bne.n	66bc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    66b8:	2300      	movs	r3, #0
    66ba:	e000      	b.n	66be <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    66bc:	231d      	movs	r3, #29
}
    66be:	0018      	movs	r0, r3
    66c0:	46bd      	mov	sp, r7
    66c2:	b004      	add	sp, #16
    66c4:	bd80      	pop	{r7, pc}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	2000026c 	.word	0x2000026c
    66cc:	00006319 	.word	0x00006319
    66d0:	00007a09 	.word	0x00007a09
    66d4:	00007a49 	.word	0x00007a49

000066d8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
    66e0:	000a      	movs	r2, r1
    66e2:	1cfb      	adds	r3, r7, #3
    66e4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    66e6:	687b      	ldr	r3, [r7, #4]
    66e8:	4a4e      	ldr	r2, [pc, #312]	; (6824 <_sercom_get_default_pad+0x14c>)
    66ea:	4293      	cmp	r3, r2
    66ec:	d040      	beq.n	6770 <_sercom_get_default_pad+0x98>
    66ee:	4a4d      	ldr	r2, [pc, #308]	; (6824 <_sercom_get_default_pad+0x14c>)
    66f0:	4293      	cmp	r3, r2
    66f2:	d807      	bhi.n	6704 <_sercom_get_default_pad+0x2c>
    66f4:	2284      	movs	r2, #132	; 0x84
    66f6:	05d2      	lsls	r2, r2, #23
    66f8:	4293      	cmp	r3, r2
    66fa:	d00f      	beq.n	671c <_sercom_get_default_pad+0x44>
    66fc:	4a4a      	ldr	r2, [pc, #296]	; (6828 <_sercom_get_default_pad+0x150>)
    66fe:	4293      	cmp	r3, r2
    6700:	d021      	beq.n	6746 <_sercom_get_default_pad+0x6e>
    6702:	e089      	b.n	6818 <_sercom_get_default_pad+0x140>
    6704:	4a49      	ldr	r2, [pc, #292]	; (682c <_sercom_get_default_pad+0x154>)
    6706:	4293      	cmp	r3, r2
    6708:	d100      	bne.n	670c <_sercom_get_default_pad+0x34>
    670a:	e05b      	b.n	67c4 <_sercom_get_default_pad+0xec>
    670c:	4a48      	ldr	r2, [pc, #288]	; (6830 <_sercom_get_default_pad+0x158>)
    670e:	4293      	cmp	r3, r2
    6710:	d100      	bne.n	6714 <_sercom_get_default_pad+0x3c>
    6712:	e06c      	b.n	67ee <_sercom_get_default_pad+0x116>
    6714:	4a47      	ldr	r2, [pc, #284]	; (6834 <_sercom_get_default_pad+0x15c>)
    6716:	4293      	cmp	r3, r2
    6718:	d03f      	beq.n	679a <_sercom_get_default_pad+0xc2>
    671a:	e07d      	b.n	6818 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    671c:	1cfb      	adds	r3, r7, #3
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	2b01      	cmp	r3, #1
    6722:	d00a      	beq.n	673a <_sercom_get_default_pad+0x62>
    6724:	dc02      	bgt.n	672c <_sercom_get_default_pad+0x54>
    6726:	2b00      	cmp	r3, #0
    6728:	d005      	beq.n	6736 <_sercom_get_default_pad+0x5e>
    672a:	e075      	b.n	6818 <_sercom_get_default_pad+0x140>
    672c:	2b02      	cmp	r3, #2
    672e:	d006      	beq.n	673e <_sercom_get_default_pad+0x66>
    6730:	2b03      	cmp	r3, #3
    6732:	d006      	beq.n	6742 <_sercom_get_default_pad+0x6a>
    6734:	e070      	b.n	6818 <_sercom_get_default_pad+0x140>
    6736:	4b40      	ldr	r3, [pc, #256]	; (6838 <_sercom_get_default_pad+0x160>)
    6738:	e06f      	b.n	681a <_sercom_get_default_pad+0x142>
    673a:	4b40      	ldr	r3, [pc, #256]	; (683c <_sercom_get_default_pad+0x164>)
    673c:	e06d      	b.n	681a <_sercom_get_default_pad+0x142>
    673e:	4b40      	ldr	r3, [pc, #256]	; (6840 <_sercom_get_default_pad+0x168>)
    6740:	e06b      	b.n	681a <_sercom_get_default_pad+0x142>
    6742:	4b40      	ldr	r3, [pc, #256]	; (6844 <_sercom_get_default_pad+0x16c>)
    6744:	e069      	b.n	681a <_sercom_get_default_pad+0x142>
    6746:	1cfb      	adds	r3, r7, #3
    6748:	781b      	ldrb	r3, [r3, #0]
    674a:	2b01      	cmp	r3, #1
    674c:	d00a      	beq.n	6764 <_sercom_get_default_pad+0x8c>
    674e:	dc02      	bgt.n	6756 <_sercom_get_default_pad+0x7e>
    6750:	2b00      	cmp	r3, #0
    6752:	d005      	beq.n	6760 <_sercom_get_default_pad+0x88>
    6754:	e060      	b.n	6818 <_sercom_get_default_pad+0x140>
    6756:	2b02      	cmp	r3, #2
    6758:	d006      	beq.n	6768 <_sercom_get_default_pad+0x90>
    675a:	2b03      	cmp	r3, #3
    675c:	d006      	beq.n	676c <_sercom_get_default_pad+0x94>
    675e:	e05b      	b.n	6818 <_sercom_get_default_pad+0x140>
    6760:	2303      	movs	r3, #3
    6762:	e05a      	b.n	681a <_sercom_get_default_pad+0x142>
    6764:	4b38      	ldr	r3, [pc, #224]	; (6848 <_sercom_get_default_pad+0x170>)
    6766:	e058      	b.n	681a <_sercom_get_default_pad+0x142>
    6768:	4b38      	ldr	r3, [pc, #224]	; (684c <_sercom_get_default_pad+0x174>)
    676a:	e056      	b.n	681a <_sercom_get_default_pad+0x142>
    676c:	4b38      	ldr	r3, [pc, #224]	; (6850 <_sercom_get_default_pad+0x178>)
    676e:	e054      	b.n	681a <_sercom_get_default_pad+0x142>
    6770:	1cfb      	adds	r3, r7, #3
    6772:	781b      	ldrb	r3, [r3, #0]
    6774:	2b01      	cmp	r3, #1
    6776:	d00a      	beq.n	678e <_sercom_get_default_pad+0xb6>
    6778:	dc02      	bgt.n	6780 <_sercom_get_default_pad+0xa8>
    677a:	2b00      	cmp	r3, #0
    677c:	d005      	beq.n	678a <_sercom_get_default_pad+0xb2>
    677e:	e04b      	b.n	6818 <_sercom_get_default_pad+0x140>
    6780:	2b02      	cmp	r3, #2
    6782:	d006      	beq.n	6792 <_sercom_get_default_pad+0xba>
    6784:	2b03      	cmp	r3, #3
    6786:	d006      	beq.n	6796 <_sercom_get_default_pad+0xbe>
    6788:	e046      	b.n	6818 <_sercom_get_default_pad+0x140>
    678a:	4b32      	ldr	r3, [pc, #200]	; (6854 <_sercom_get_default_pad+0x17c>)
    678c:	e045      	b.n	681a <_sercom_get_default_pad+0x142>
    678e:	4b32      	ldr	r3, [pc, #200]	; (6858 <_sercom_get_default_pad+0x180>)
    6790:	e043      	b.n	681a <_sercom_get_default_pad+0x142>
    6792:	4b32      	ldr	r3, [pc, #200]	; (685c <_sercom_get_default_pad+0x184>)
    6794:	e041      	b.n	681a <_sercom_get_default_pad+0x142>
    6796:	4b32      	ldr	r3, [pc, #200]	; (6860 <_sercom_get_default_pad+0x188>)
    6798:	e03f      	b.n	681a <_sercom_get_default_pad+0x142>
    679a:	1cfb      	adds	r3, r7, #3
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	2b01      	cmp	r3, #1
    67a0:	d00a      	beq.n	67b8 <_sercom_get_default_pad+0xe0>
    67a2:	dc02      	bgt.n	67aa <_sercom_get_default_pad+0xd2>
    67a4:	2b00      	cmp	r3, #0
    67a6:	d005      	beq.n	67b4 <_sercom_get_default_pad+0xdc>
    67a8:	e036      	b.n	6818 <_sercom_get_default_pad+0x140>
    67aa:	2b02      	cmp	r3, #2
    67ac:	d006      	beq.n	67bc <_sercom_get_default_pad+0xe4>
    67ae:	2b03      	cmp	r3, #3
    67b0:	d006      	beq.n	67c0 <_sercom_get_default_pad+0xe8>
    67b2:	e031      	b.n	6818 <_sercom_get_default_pad+0x140>
    67b4:	4b2b      	ldr	r3, [pc, #172]	; (6864 <_sercom_get_default_pad+0x18c>)
    67b6:	e030      	b.n	681a <_sercom_get_default_pad+0x142>
    67b8:	4b2b      	ldr	r3, [pc, #172]	; (6868 <_sercom_get_default_pad+0x190>)
    67ba:	e02e      	b.n	681a <_sercom_get_default_pad+0x142>
    67bc:	4b2b      	ldr	r3, [pc, #172]	; (686c <_sercom_get_default_pad+0x194>)
    67be:	e02c      	b.n	681a <_sercom_get_default_pad+0x142>
    67c0:	4b2b      	ldr	r3, [pc, #172]	; (6870 <_sercom_get_default_pad+0x198>)
    67c2:	e02a      	b.n	681a <_sercom_get_default_pad+0x142>
    67c4:	1cfb      	adds	r3, r7, #3
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	2b01      	cmp	r3, #1
    67ca:	d00a      	beq.n	67e2 <_sercom_get_default_pad+0x10a>
    67cc:	dc02      	bgt.n	67d4 <_sercom_get_default_pad+0xfc>
    67ce:	2b00      	cmp	r3, #0
    67d0:	d005      	beq.n	67de <_sercom_get_default_pad+0x106>
    67d2:	e021      	b.n	6818 <_sercom_get_default_pad+0x140>
    67d4:	2b02      	cmp	r3, #2
    67d6:	d006      	beq.n	67e6 <_sercom_get_default_pad+0x10e>
    67d8:	2b03      	cmp	r3, #3
    67da:	d006      	beq.n	67ea <_sercom_get_default_pad+0x112>
    67dc:	e01c      	b.n	6818 <_sercom_get_default_pad+0x140>
    67de:	4b25      	ldr	r3, [pc, #148]	; (6874 <_sercom_get_default_pad+0x19c>)
    67e0:	e01b      	b.n	681a <_sercom_get_default_pad+0x142>
    67e2:	4b25      	ldr	r3, [pc, #148]	; (6878 <_sercom_get_default_pad+0x1a0>)
    67e4:	e019      	b.n	681a <_sercom_get_default_pad+0x142>
    67e6:	4b25      	ldr	r3, [pc, #148]	; (687c <_sercom_get_default_pad+0x1a4>)
    67e8:	e017      	b.n	681a <_sercom_get_default_pad+0x142>
    67ea:	4b25      	ldr	r3, [pc, #148]	; (6880 <_sercom_get_default_pad+0x1a8>)
    67ec:	e015      	b.n	681a <_sercom_get_default_pad+0x142>
    67ee:	1cfb      	adds	r3, r7, #3
    67f0:	781b      	ldrb	r3, [r3, #0]
    67f2:	2b01      	cmp	r3, #1
    67f4:	d00a      	beq.n	680c <_sercom_get_default_pad+0x134>
    67f6:	dc02      	bgt.n	67fe <_sercom_get_default_pad+0x126>
    67f8:	2b00      	cmp	r3, #0
    67fa:	d005      	beq.n	6808 <_sercom_get_default_pad+0x130>
    67fc:	e00c      	b.n	6818 <_sercom_get_default_pad+0x140>
    67fe:	2b02      	cmp	r3, #2
    6800:	d006      	beq.n	6810 <_sercom_get_default_pad+0x138>
    6802:	2b03      	cmp	r3, #3
    6804:	d006      	beq.n	6814 <_sercom_get_default_pad+0x13c>
    6806:	e007      	b.n	6818 <_sercom_get_default_pad+0x140>
    6808:	4b1e      	ldr	r3, [pc, #120]	; (6884 <_sercom_get_default_pad+0x1ac>)
    680a:	e006      	b.n	681a <_sercom_get_default_pad+0x142>
    680c:	4b1e      	ldr	r3, [pc, #120]	; (6888 <_sercom_get_default_pad+0x1b0>)
    680e:	e004      	b.n	681a <_sercom_get_default_pad+0x142>
    6810:	4b1e      	ldr	r3, [pc, #120]	; (688c <_sercom_get_default_pad+0x1b4>)
    6812:	e002      	b.n	681a <_sercom_get_default_pad+0x142>
    6814:	4b1e      	ldr	r3, [pc, #120]	; (6890 <_sercom_get_default_pad+0x1b8>)
    6816:	e000      	b.n	681a <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    6818:	2300      	movs	r3, #0
}
    681a:	0018      	movs	r0, r3
    681c:	46bd      	mov	sp, r7
    681e:	b002      	add	sp, #8
    6820:	bd80      	pop	{r7, pc}
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	42000800 	.word	0x42000800
    6828:	42000400 	.word	0x42000400
    682c:	42001000 	.word	0x42001000
    6830:	43000400 	.word	0x43000400
    6834:	42000c00 	.word	0x42000c00
    6838:	00040003 	.word	0x00040003
    683c:	00050003 	.word	0x00050003
    6840:	00060003 	.word	0x00060003
    6844:	00070003 	.word	0x00070003
    6848:	00010003 	.word	0x00010003
    684c:	001e0003 	.word	0x001e0003
    6850:	001f0003 	.word	0x001f0003
    6854:	00080003 	.word	0x00080003
    6858:	00090003 	.word	0x00090003
    685c:	000a0003 	.word	0x000a0003
    6860:	000b0003 	.word	0x000b0003
    6864:	00100003 	.word	0x00100003
    6868:	00110003 	.word	0x00110003
    686c:	00120003 	.word	0x00120003
    6870:	00130003 	.word	0x00130003
    6874:	000c0003 	.word	0x000c0003
    6878:	000d0003 	.word	0x000d0003
    687c:	000e0003 	.word	0x000e0003
    6880:	000f0003 	.word	0x000f0003
    6884:	00160003 	.word	0x00160003
    6888:	00170003 	.word	0x00170003
    688c:	00180003 	.word	0x00180003
    6890:	00190003 	.word	0x00190003

00006894 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6894:	b590      	push	{r4, r7, lr}
    6896:	b08b      	sub	sp, #44	; 0x2c
    6898:	af00      	add	r7, sp, #0
    689a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    689c:	230c      	movs	r3, #12
    689e:	18fb      	adds	r3, r7, r3
    68a0:	4a0f      	ldr	r2, [pc, #60]	; (68e0 <_sercom_get_sercom_inst_index+0x4c>)
    68a2:	ca13      	ldmia	r2!, {r0, r1, r4}
    68a4:	c313      	stmia	r3!, {r0, r1, r4}
    68a6:	ca13      	ldmia	r2!, {r0, r1, r4}
    68a8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    68aa:	2300      	movs	r3, #0
    68ac:	627b      	str	r3, [r7, #36]	; 0x24
    68ae:	e00e      	b.n	68ce <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    68b0:	230c      	movs	r3, #12
    68b2:	18fb      	adds	r3, r7, r3
    68b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    68b6:	0092      	lsls	r2, r2, #2
    68b8:	58d3      	ldr	r3, [r2, r3]
    68ba:	001a      	movs	r2, r3
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	429a      	cmp	r2, r3
    68c0:	d102      	bne.n	68c8 <_sercom_get_sercom_inst_index+0x34>
			return i;
    68c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68c4:	b2db      	uxtb	r3, r3
    68c6:	e006      	b.n	68d6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    68c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68ca:	3301      	adds	r3, #1
    68cc:	627b      	str	r3, [r7, #36]	; 0x24
    68ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68d0:	2b05      	cmp	r3, #5
    68d2:	d9ed      	bls.n	68b0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    68d4:	2300      	movs	r3, #0
}
    68d6:	0018      	movs	r0, r3
    68d8:	46bd      	mov	sp, r7
    68da:	b00b      	add	sp, #44	; 0x2c
    68dc:	bd90      	pop	{r4, r7, pc}
    68de:	46c0      	nop			; (mov r8, r8)
    68e0:	0000b364 	.word	0x0000b364

000068e4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    68e4:	b580      	push	{r7, lr}
    68e6:	b082      	sub	sp, #8
    68e8:	af00      	add	r7, sp, #0
    68ea:	0002      	movs	r2, r0
    68ec:	1dfb      	adds	r3, r7, #7
    68ee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    68f0:	46c0      	nop			; (mov r8, r8)
    68f2:	46bd      	mov	sp, r7
    68f4:	b002      	add	sp, #8
    68f6:	bd80      	pop	{r7, pc}

000068f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	b084      	sub	sp, #16
    68fc:	af00      	add	r7, sp, #0
    68fe:	0002      	movs	r2, r0
    6900:	6039      	str	r1, [r7, #0]
    6902:	1dfb      	adds	r3, r7, #7
    6904:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6906:	4b13      	ldr	r3, [pc, #76]	; (6954 <_sercom_set_handler+0x5c>)
    6908:	781b      	ldrb	r3, [r3, #0]
    690a:	2201      	movs	r2, #1
    690c:	4053      	eors	r3, r2
    690e:	b2db      	uxtb	r3, r3
    6910:	2b00      	cmp	r3, #0
    6912:	d015      	beq.n	6940 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6914:	2300      	movs	r3, #0
    6916:	60fb      	str	r3, [r7, #12]
    6918:	e00c      	b.n	6934 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    691a:	4b0f      	ldr	r3, [pc, #60]	; (6958 <_sercom_set_handler+0x60>)
    691c:	68fa      	ldr	r2, [r7, #12]
    691e:	0092      	lsls	r2, r2, #2
    6920:	490e      	ldr	r1, [pc, #56]	; (695c <_sercom_set_handler+0x64>)
    6922:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6924:	4b0e      	ldr	r3, [pc, #56]	; (6960 <_sercom_set_handler+0x68>)
    6926:	68fa      	ldr	r2, [r7, #12]
    6928:	0092      	lsls	r2, r2, #2
    692a:	2100      	movs	r1, #0
    692c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    692e:	68fb      	ldr	r3, [r7, #12]
    6930:	3301      	adds	r3, #1
    6932:	60fb      	str	r3, [r7, #12]
    6934:	68fb      	ldr	r3, [r7, #12]
    6936:	2b05      	cmp	r3, #5
    6938:	d9ef      	bls.n	691a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    693a:	4b06      	ldr	r3, [pc, #24]	; (6954 <_sercom_set_handler+0x5c>)
    693c:	2201      	movs	r2, #1
    693e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6940:	1dfb      	adds	r3, r7, #7
    6942:	781a      	ldrb	r2, [r3, #0]
    6944:	4b04      	ldr	r3, [pc, #16]	; (6958 <_sercom_set_handler+0x60>)
    6946:	0092      	lsls	r2, r2, #2
    6948:	6839      	ldr	r1, [r7, #0]
    694a:	50d1      	str	r1, [r2, r3]
}
    694c:	46c0      	nop			; (mov r8, r8)
    694e:	46bd      	mov	sp, r7
    6950:	b004      	add	sp, #16
    6952:	bd80      	pop	{r7, pc}
    6954:	2000026e 	.word	0x2000026e
    6958:	20000270 	.word	0x20000270
    695c:	000068e5 	.word	0x000068e5
    6960:	2000039c 	.word	0x2000039c

00006964 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6964:	b590      	push	{r4, r7, lr}
    6966:	b085      	sub	sp, #20
    6968:	af00      	add	r7, sp, #0
    696a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    696c:	2308      	movs	r3, #8
    696e:	18fb      	adds	r3, r7, r3
    6970:	4a0b      	ldr	r2, [pc, #44]	; (69a0 <_sercom_get_interrupt_vector+0x3c>)
    6972:	6811      	ldr	r1, [r2, #0]
    6974:	6019      	str	r1, [r3, #0]
    6976:	8892      	ldrh	r2, [r2, #4]
    6978:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    697a:	230f      	movs	r3, #15
    697c:	18fc      	adds	r4, r7, r3
    697e:	687b      	ldr	r3, [r7, #4]
    6980:	0018      	movs	r0, r3
    6982:	4b08      	ldr	r3, [pc, #32]	; (69a4 <_sercom_get_interrupt_vector+0x40>)
    6984:	4798      	blx	r3
    6986:	0003      	movs	r3, r0
    6988:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    698a:	230f      	movs	r3, #15
    698c:	18fb      	adds	r3, r7, r3
    698e:	781b      	ldrb	r3, [r3, #0]
    6990:	2208      	movs	r2, #8
    6992:	18ba      	adds	r2, r7, r2
    6994:	5cd3      	ldrb	r3, [r2, r3]
    6996:	b25b      	sxtb	r3, r3
}
    6998:	0018      	movs	r0, r3
    699a:	46bd      	mov	sp, r7
    699c:	b005      	add	sp, #20
    699e:	bd90      	pop	{r4, r7, pc}
    69a0:	0000b37c 	.word	0x0000b37c
    69a4:	00006895 	.word	0x00006895

000069a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    69a8:	b580      	push	{r7, lr}
    69aa:	af00      	add	r7, sp, #0
    69ac:	4b03      	ldr	r3, [pc, #12]	; (69bc <SERCOM0_Handler+0x14>)
    69ae:	681b      	ldr	r3, [r3, #0]
    69b0:	2000      	movs	r0, #0
    69b2:	4798      	blx	r3
    69b4:	46c0      	nop			; (mov r8, r8)
    69b6:	46bd      	mov	sp, r7
    69b8:	bd80      	pop	{r7, pc}
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	20000270 	.word	0x20000270

000069c0 <SERCOM1_Handler>:
    69c0:	b580      	push	{r7, lr}
    69c2:	af00      	add	r7, sp, #0
    69c4:	4b03      	ldr	r3, [pc, #12]	; (69d4 <SERCOM1_Handler+0x14>)
    69c6:	685b      	ldr	r3, [r3, #4]
    69c8:	2001      	movs	r0, #1
    69ca:	4798      	blx	r3
    69cc:	46c0      	nop			; (mov r8, r8)
    69ce:	46bd      	mov	sp, r7
    69d0:	bd80      	pop	{r7, pc}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	20000270 	.word	0x20000270

000069d8 <SERCOM2_Handler>:
    69d8:	b580      	push	{r7, lr}
    69da:	af00      	add	r7, sp, #0
    69dc:	4b03      	ldr	r3, [pc, #12]	; (69ec <SERCOM2_Handler+0x14>)
    69de:	689b      	ldr	r3, [r3, #8]
    69e0:	2002      	movs	r0, #2
    69e2:	4798      	blx	r3
    69e4:	46c0      	nop			; (mov r8, r8)
    69e6:	46bd      	mov	sp, r7
    69e8:	bd80      	pop	{r7, pc}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	20000270 	.word	0x20000270

000069f0 <SERCOM3_Handler>:
    69f0:	b580      	push	{r7, lr}
    69f2:	af00      	add	r7, sp, #0
    69f4:	4b03      	ldr	r3, [pc, #12]	; (6a04 <SERCOM3_Handler+0x14>)
    69f6:	68db      	ldr	r3, [r3, #12]
    69f8:	2003      	movs	r0, #3
    69fa:	4798      	blx	r3
    69fc:	46c0      	nop			; (mov r8, r8)
    69fe:	46bd      	mov	sp, r7
    6a00:	bd80      	pop	{r7, pc}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	20000270 	.word	0x20000270

00006a08 <SERCOM4_Handler>:
    6a08:	b580      	push	{r7, lr}
    6a0a:	af00      	add	r7, sp, #0
    6a0c:	4b03      	ldr	r3, [pc, #12]	; (6a1c <SERCOM4_Handler+0x14>)
    6a0e:	691b      	ldr	r3, [r3, #16]
    6a10:	2004      	movs	r0, #4
    6a12:	4798      	blx	r3
    6a14:	46c0      	nop			; (mov r8, r8)
    6a16:	46bd      	mov	sp, r7
    6a18:	bd80      	pop	{r7, pc}
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	20000270 	.word	0x20000270

00006a20 <SERCOM5_Handler>:
    6a20:	b580      	push	{r7, lr}
    6a22:	af00      	add	r7, sp, #0
    6a24:	4b03      	ldr	r3, [pc, #12]	; (6a34 <SERCOM5_Handler+0x14>)
    6a26:	695b      	ldr	r3, [r3, #20]
    6a28:	2005      	movs	r0, #5
    6a2a:	4798      	blx	r3
    6a2c:	46c0      	nop			; (mov r8, r8)
    6a2e:	46bd      	mov	sp, r7
    6a30:	bd80      	pop	{r7, pc}
    6a32:	46c0      	nop			; (mov r8, r8)
    6a34:	20000270 	.word	0x20000270

00006a38 <system_pinmux_get_config_defaults>:
{
    6a38:	b580      	push	{r7, lr}
    6a3a:	b082      	sub	sp, #8
    6a3c:	af00      	add	r7, sp, #0
    6a3e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	2280      	movs	r2, #128	; 0x80
    6a44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	2200      	movs	r2, #0
    6a4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	2201      	movs	r2, #1
    6a50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	2200      	movs	r2, #0
    6a56:	70da      	strb	r2, [r3, #3]
}
    6a58:	46c0      	nop			; (mov r8, r8)
    6a5a:	46bd      	mov	sp, r7
    6a5c:	b002      	add	sp, #8
    6a5e:	bd80      	pop	{r7, pc}

00006a60 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b084      	sub	sp, #16
    6a64:	af00      	add	r7, sp, #0
    6a66:	0002      	movs	r2, r0
    6a68:	6039      	str	r1, [r7, #0]
    6a6a:	1dfb      	adds	r3, r7, #7
    6a6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6a6e:	230c      	movs	r3, #12
    6a70:	18fb      	adds	r3, r7, r3
    6a72:	0018      	movs	r0, r3
    6a74:	4b10      	ldr	r3, [pc, #64]	; (6ab8 <port_pin_set_config+0x58>)
    6a76:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    6a78:	230c      	movs	r3, #12
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	2280      	movs	r2, #128	; 0x80
    6a7e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6a80:	683b      	ldr	r3, [r7, #0]
    6a82:	781a      	ldrb	r2, [r3, #0]
    6a84:	230c      	movs	r3, #12
    6a86:	18fb      	adds	r3, r7, r3
    6a88:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6a8a:	683b      	ldr	r3, [r7, #0]
    6a8c:	785a      	ldrb	r2, [r3, #1]
    6a8e:	230c      	movs	r3, #12
    6a90:	18fb      	adds	r3, r7, r3
    6a92:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6a94:	683b      	ldr	r3, [r7, #0]
    6a96:	789a      	ldrb	r2, [r3, #2]
    6a98:	230c      	movs	r3, #12
    6a9a:	18fb      	adds	r3, r7, r3
    6a9c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6a9e:	230c      	movs	r3, #12
    6aa0:	18fa      	adds	r2, r7, r3
    6aa2:	1dfb      	adds	r3, r7, #7
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	0011      	movs	r1, r2
    6aa8:	0018      	movs	r0, r3
    6aaa:	4b04      	ldr	r3, [pc, #16]	; (6abc <port_pin_set_config+0x5c>)
    6aac:	4798      	blx	r3
}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	46bd      	mov	sp, r7
    6ab2:	b004      	add	sp, #16
    6ab4:	bd80      	pop	{r7, pc}
    6ab6:	46c0      	nop			; (mov r8, r8)
    6ab8:	00006a39 	.word	0x00006a39
    6abc:	00007d31 	.word	0x00007d31

00006ac0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    6ac4:	46c0      	nop			; (mov r8, r8)
    6ac6:	46bd      	mov	sp, r7
    6ac8:	bd80      	pop	{r7, pc}
	...

00006acc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    6acc:	b580      	push	{r7, lr}
    6ace:	b082      	sub	sp, #8
    6ad0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    6ad2:	4b10      	ldr	r3, [pc, #64]	; (6b14 <cpu_irq_enter_critical+0x48>)
    6ad4:	681b      	ldr	r3, [r3, #0]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d112      	bne.n	6b00 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6ada:	f3ef 8310 	mrs	r3, PRIMASK
    6ade:	607b      	str	r3, [r7, #4]
  return(result);
    6ae0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d109      	bne.n	6afa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    6ae6:	b672      	cpsid	i
    6ae8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6aec:	4b0a      	ldr	r3, [pc, #40]	; (6b18 <cpu_irq_enter_critical+0x4c>)
    6aee:	2200      	movs	r2, #0
    6af0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6af2:	4b0a      	ldr	r3, [pc, #40]	; (6b1c <cpu_irq_enter_critical+0x50>)
    6af4:	2201      	movs	r2, #1
    6af6:	701a      	strb	r2, [r3, #0]
    6af8:	e002      	b.n	6b00 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6afa:	4b08      	ldr	r3, [pc, #32]	; (6b1c <cpu_irq_enter_critical+0x50>)
    6afc:	2200      	movs	r2, #0
    6afe:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6b00:	4b04      	ldr	r3, [pc, #16]	; (6b14 <cpu_irq_enter_critical+0x48>)
    6b02:	681b      	ldr	r3, [r3, #0]
    6b04:	1c5a      	adds	r2, r3, #1
    6b06:	4b03      	ldr	r3, [pc, #12]	; (6b14 <cpu_irq_enter_critical+0x48>)
    6b08:	601a      	str	r2, [r3, #0]
}
    6b0a:	46c0      	nop			; (mov r8, r8)
    6b0c:	46bd      	mov	sp, r7
    6b0e:	b002      	add	sp, #8
    6b10:	bd80      	pop	{r7, pc}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	20000288 	.word	0x20000288
    6b18:	200000a2 	.word	0x200000a2
    6b1c:	2000028c 	.word	0x2000028c

00006b20 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6b24:	4b0b      	ldr	r3, [pc, #44]	; (6b54 <cpu_irq_leave_critical+0x34>)
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	1e5a      	subs	r2, r3, #1
    6b2a:	4b0a      	ldr	r3, [pc, #40]	; (6b54 <cpu_irq_leave_critical+0x34>)
    6b2c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6b2e:	4b09      	ldr	r3, [pc, #36]	; (6b54 <cpu_irq_leave_critical+0x34>)
    6b30:	681b      	ldr	r3, [r3, #0]
    6b32:	2b00      	cmp	r3, #0
    6b34:	d10a      	bne.n	6b4c <cpu_irq_leave_critical+0x2c>
    6b36:	4b08      	ldr	r3, [pc, #32]	; (6b58 <cpu_irq_leave_critical+0x38>)
    6b38:	781b      	ldrb	r3, [r3, #0]
    6b3a:	b2db      	uxtb	r3, r3
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	d005      	beq.n	6b4c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    6b40:	4b06      	ldr	r3, [pc, #24]	; (6b5c <cpu_irq_leave_critical+0x3c>)
    6b42:	2201      	movs	r2, #1
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6b4a:	b662      	cpsie	i
	}
}
    6b4c:	46c0      	nop			; (mov r8, r8)
    6b4e:	46bd      	mov	sp, r7
    6b50:	bd80      	pop	{r7, pc}
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	20000288 	.word	0x20000288
    6b58:	2000028c 	.word	0x2000028c
    6b5c:	200000a2 	.word	0x200000a2

00006b60 <system_gclk_gen_get_config_defaults>:
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b082      	sub	sp, #8
    6b64:	af00      	add	r7, sp, #0
    6b66:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    6b68:	687b      	ldr	r3, [r7, #4]
    6b6a:	2201      	movs	r2, #1
    6b6c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6b6e:	687b      	ldr	r3, [r7, #4]
    6b70:	2200      	movs	r2, #0
    6b72:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	2206      	movs	r2, #6
    6b78:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	2200      	movs	r2, #0
    6b7e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	2200      	movs	r2, #0
    6b84:	725a      	strb	r2, [r3, #9]
}
    6b86:	46c0      	nop			; (mov r8, r8)
    6b88:	46bd      	mov	sp, r7
    6b8a:	b002      	add	sp, #8
    6b8c:	bd80      	pop	{r7, pc}

00006b8e <system_gclk_chan_get_config_defaults>:
{
    6b8e:	b580      	push	{r7, lr}
    6b90:	b082      	sub	sp, #8
    6b92:	af00      	add	r7, sp, #0
    6b94:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6b96:	687b      	ldr	r3, [r7, #4]
    6b98:	2200      	movs	r2, #0
    6b9a:	701a      	strb	r2, [r3, #0]
}
    6b9c:	46c0      	nop			; (mov r8, r8)
    6b9e:	46bd      	mov	sp, r7
    6ba0:	b002      	add	sp, #8
    6ba2:	bd80      	pop	{r7, pc}

00006ba4 <system_clock_source_xosc32k_get_config_defaults>:
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b082      	sub	sp, #8
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	2200      	movs	r2, #0
    6bb0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	2202      	movs	r2, #2
    6bb6:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	2280      	movs	r2, #128	; 0x80
    6bbc:	0212      	lsls	r2, r2, #8
    6bbe:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	2200      	movs	r2, #0
    6bc4:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	2201      	movs	r2, #1
    6bca:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
    6bcc:	687b      	ldr	r3, [r7, #4]
    6bce:	2200      	movs	r2, #0
    6bd0:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	2201      	movs	r2, #1
    6bd6:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	2200      	movs	r2, #0
    6bdc:	729a      	strb	r2, [r3, #10]
}
    6bde:	46c0      	nop			; (mov r8, r8)
    6be0:	46bd      	mov	sp, r7
    6be2:	b002      	add	sp, #8
    6be4:	bd80      	pop	{r7, pc}

00006be6 <system_clock_source_osc16m_get_config_defaults>:
{
    6be6:	b580      	push	{r7, lr}
    6be8:	b082      	sub	sp, #8
    6bea:	af00      	add	r7, sp, #0
    6bec:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	2200      	movs	r2, #0
    6bf2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    6bf4:	687b      	ldr	r3, [r7, #4]
    6bf6:	2200      	movs	r2, #0
    6bf8:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	2201      	movs	r2, #1
    6bfe:	709a      	strb	r2, [r3, #2]
}
    6c00:	46c0      	nop			; (mov r8, r8)
    6c02:	46bd      	mov	sp, r7
    6c04:	b002      	add	sp, #8
    6c06:	bd80      	pop	{r7, pc}

00006c08 <system_clock_source_dfll_get_config_defaults>:
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b082      	sub	sp, #8
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2200      	movs	r2, #0
    6c14:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6c16:	687b      	ldr	r3, [r7, #4]
    6c18:	2200      	movs	r2, #0
    6c1a:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	2200      	movs	r2, #0
    6c20:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	2200      	movs	r2, #0
    6c26:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	2200      	movs	r2, #0
    6c2c:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	2201      	movs	r2, #1
    6c32:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	2200      	movs	r2, #0
    6c38:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	2207      	movs	r2, #7
    6c3e:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	223f      	movs	r2, #63	; 0x3f
    6c44:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	2201      	movs	r2, #1
    6c4a:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	2201      	movs	r2, #1
    6c50:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	220c      	movs	r2, #12
    6c56:	825a      	strh	r2, [r3, #18]
}
    6c58:	46c0      	nop			; (mov r8, r8)
    6c5a:	46bd      	mov	sp, r7
    6c5c:	b002      	add	sp, #8
    6c5e:	bd80      	pop	{r7, pc}

00006c60 <system_main_clock_set_failure_detect>:
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b082      	sub	sp, #8
    6c64:	af00      	add	r7, sp, #0
    6c66:	0002      	movs	r2, r0
    6c68:	1dfb      	adds	r3, r7, #7
    6c6a:	701a      	strb	r2, [r3, #0]
}
    6c6c:	46c0      	nop			; (mov r8, r8)
    6c6e:	46bd      	mov	sp, r7
    6c70:	b002      	add	sp, #8
    6c72:	bd80      	pop	{r7, pc}

00006c74 <system_cpu_clock_set_divider>:
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	0002      	movs	r2, r0
    6c7c:	1dfb      	adds	r3, r7, #7
    6c7e:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6c80:	4a05      	ldr	r2, [pc, #20]	; (6c98 <system_cpu_clock_set_divider+0x24>)
    6c82:	1dfb      	adds	r3, r7, #7
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	2101      	movs	r1, #1
    6c88:	4099      	lsls	r1, r3
    6c8a:	000b      	movs	r3, r1
    6c8c:	b2db      	uxtb	r3, r3
    6c8e:	7113      	strb	r3, [r2, #4]
}
    6c90:	46c0      	nop			; (mov r8, r8)
    6c92:	46bd      	mov	sp, r7
    6c94:	b002      	add	sp, #8
    6c96:	bd80      	pop	{r7, pc}
    6c98:	40000400 	.word	0x40000400

00006c9c <system_low_power_clock_set_divider>:
{
    6c9c:	b580      	push	{r7, lr}
    6c9e:	b082      	sub	sp, #8
    6ca0:	af00      	add	r7, sp, #0
    6ca2:	0002      	movs	r2, r0
    6ca4:	1dfb      	adds	r3, r7, #7
    6ca6:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6ca8:	4a05      	ldr	r2, [pc, #20]	; (6cc0 <system_low_power_clock_set_divider+0x24>)
    6caa:	1dfb      	adds	r3, r7, #7
    6cac:	781b      	ldrb	r3, [r3, #0]
    6cae:	2101      	movs	r1, #1
    6cb0:	4099      	lsls	r1, r3
    6cb2:	000b      	movs	r3, r1
    6cb4:	b2db      	uxtb	r3, r3
    6cb6:	7153      	strb	r3, [r2, #5]
}
    6cb8:	46c0      	nop			; (mov r8, r8)
    6cba:	46bd      	mov	sp, r7
    6cbc:	b002      	add	sp, #8
    6cbe:	bd80      	pop	{r7, pc}
    6cc0:	40000400 	.word	0x40000400

00006cc4 <system_backup_clock_set_divider>:
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b082      	sub	sp, #8
    6cc8:	af00      	add	r7, sp, #0
    6cca:	0002      	movs	r2, r0
    6ccc:	1dfb      	adds	r3, r7, #7
    6cce:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6cd0:	4a05      	ldr	r2, [pc, #20]	; (6ce8 <system_backup_clock_set_divider+0x24>)
    6cd2:	1dfb      	adds	r3, r7, #7
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	2101      	movs	r1, #1
    6cd8:	4099      	lsls	r1, r3
    6cda:	000b      	movs	r3, r1
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	7193      	strb	r3, [r2, #6]
}
    6ce0:	46c0      	nop			; (mov r8, r8)
    6ce2:	46bd      	mov	sp, r7
    6ce4:	b002      	add	sp, #8
    6ce6:	bd80      	pop	{r7, pc}
    6ce8:	40000400 	.word	0x40000400

00006cec <system_cpu_clock_get_hz>:
{
    6cec:	b580      	push	{r7, lr}
    6cee:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6cf0:	2000      	movs	r0, #0
    6cf2:	4b07      	ldr	r3, [pc, #28]	; (6d10 <system_cpu_clock_get_hz+0x24>)
    6cf4:	4798      	blx	r3
    6cf6:	0002      	movs	r2, r0
    6cf8:	4b06      	ldr	r3, [pc, #24]	; (6d14 <system_cpu_clock_get_hz+0x28>)
    6cfa:	791b      	ldrb	r3, [r3, #4]
    6cfc:	b2db      	uxtb	r3, r3
    6cfe:	0019      	movs	r1, r3
    6d00:	4b05      	ldr	r3, [pc, #20]	; (6d18 <system_cpu_clock_get_hz+0x2c>)
    6d02:	0010      	movs	r0, r2
    6d04:	4798      	blx	r3
    6d06:	0003      	movs	r3, r0
}
    6d08:	0018      	movs	r0, r3
    6d0a:	46bd      	mov	sp, r7
    6d0c:	bd80      	pop	{r7, pc}
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	00007949 	.word	0x00007949
    6d14:	40000400 	.word	0x40000400
    6d18:	00008259 	.word	0x00008259

00006d1c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6d1c:	b580      	push	{r7, lr}
    6d1e:	b082      	sub	sp, #8
    6d20:	af00      	add	r7, sp, #0
    6d22:	0002      	movs	r2, r0
    6d24:	1dfb      	adds	r3, r7, #7
    6d26:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6d28:	4a08      	ldr	r2, [pc, #32]	; (6d4c <system_flash_set_waitstates+0x30>)
    6d2a:	1dfb      	adds	r3, r7, #7
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	210f      	movs	r1, #15
    6d30:	400b      	ands	r3, r1
    6d32:	b2d9      	uxtb	r1, r3
    6d34:	6853      	ldr	r3, [r2, #4]
    6d36:	200f      	movs	r0, #15
    6d38:	4001      	ands	r1, r0
    6d3a:	0049      	lsls	r1, r1, #1
    6d3c:	201e      	movs	r0, #30
    6d3e:	4383      	bics	r3, r0
    6d40:	430b      	orrs	r3, r1
    6d42:	6053      	str	r3, [r2, #4]
}
    6d44:	46c0      	nop			; (mov r8, r8)
    6d46:	46bd      	mov	sp, r7
    6d48:	b002      	add	sp, #8
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	41004000 	.word	0x41004000

00006d50 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b082      	sub	sp, #8
    6d54:	af00      	add	r7, sp, #0
    6d56:	0002      	movs	r2, r0
    6d58:	1dfb      	adds	r3, r7, #7
    6d5a:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6d5c:	2380      	movs	r3, #128	; 0x80
    6d5e:	05db      	lsls	r3, r3, #23
    6d60:	789b      	ldrb	r3, [r3, #2]
    6d62:	b2db      	uxtb	r3, r3
    6d64:	1dfa      	adds	r2, r7, #7
    6d66:	7812      	ldrb	r2, [r2, #0]
    6d68:	429a      	cmp	r2, r3
    6d6a:	d101      	bne.n	6d70 <system_switch_performance_level+0x20>
		return STATUS_OK;
    6d6c:	2300      	movs	r3, #0
    6d6e:	e010      	b.n	6d92 <system_switch_performance_level+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6d70:	2380      	movs	r3, #128	; 0x80
    6d72:	05db      	lsls	r3, r3, #23
    6d74:	2201      	movs	r2, #1
    6d76:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6d78:	2380      	movs	r3, #128	; 0x80
    6d7a:	05db      	lsls	r3, r3, #23
    6d7c:	1dfa      	adds	r2, r7, #7
    6d7e:	7812      	ldrb	r2, [r2, #0]
    6d80:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6d82:	46c0      	nop			; (mov r8, r8)
    6d84:	2380      	movs	r3, #128	; 0x80
    6d86:	05db      	lsls	r3, r3, #23
    6d88:	799b      	ldrb	r3, [r3, #6]
    6d8a:	b2db      	uxtb	r3, r3
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d0f9      	beq.n	6d84 <system_switch_performance_level+0x34>
		;
	}
	return STATUS_OK;
    6d90:	2300      	movs	r3, #0
}
    6d92:	0018      	movs	r0, r3
    6d94:	46bd      	mov	sp, r7
    6d96:	b002      	add	sp, #8
    6d98:	bd80      	pop	{r7, pc}
	...

00006d9c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6d9c:	b580      	push	{r7, lr}
    6d9e:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6da0:	46c0      	nop			; (mov r8, r8)
    6da2:	4b04      	ldr	r3, [pc, #16]	; (6db4 <_system_dfll_wait_for_sync+0x18>)
    6da4:	68da      	ldr	r2, [r3, #12]
    6da6:	2380      	movs	r3, #128	; 0x80
    6da8:	005b      	lsls	r3, r3, #1
    6daa:	4013      	ands	r3, r2
    6dac:	d0f9      	beq.n	6da2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	46bd      	mov	sp, r7
    6db2:	bd80      	pop	{r7, pc}
    6db4:	40000c00 	.word	0x40000c00

00006db8 <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b084      	sub	sp, #16
    6dbc:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    6dbe:	1d3b      	adds	r3, r7, #4
    6dc0:	0018      	movs	r0, r3
    6dc2:	4b22      	ldr	r3, [pc, #136]	; (6e4c <_system_clock_source_osc16m_freq_sel+0x94>)
    6dc4:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6dc6:	1d3b      	adds	r3, r7, #4
    6dc8:	2203      	movs	r2, #3
    6dca:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6dcc:	1d3b      	adds	r3, r7, #4
    6dce:	0019      	movs	r1, r3
    6dd0:	2000      	movs	r0, #0
    6dd2:	4b1f      	ldr	r3, [pc, #124]	; (6e50 <_system_clock_source_osc16m_freq_sel+0x98>)
    6dd4:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6dd6:	2006      	movs	r0, #6
    6dd8:	4b1e      	ldr	r3, [pc, #120]	; (6e54 <_system_clock_source_osc16m_freq_sel+0x9c>)
    6dda:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
    6ddc:	003b      	movs	r3, r7
    6dde:	0018      	movs	r0, r3
    6de0:	4b1d      	ldr	r3, [pc, #116]	; (6e58 <_system_clock_source_osc16m_freq_sel+0xa0>)
    6de2:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6de4:	003b      	movs	r3, r7
    6de6:	2203      	movs	r2, #3
    6de8:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
    6dea:	003b      	movs	r3, r7
    6dec:	2200      	movs	r2, #0
    6dee:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    6df0:	003b      	movs	r3, r7
    6df2:	2200      	movs	r2, #0
    6df4:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6df6:	003b      	movs	r3, r7
    6df8:	0018      	movs	r0, r3
    6dfa:	4b18      	ldr	r3, [pc, #96]	; (6e5c <_system_clock_source_osc16m_freq_sel+0xa4>)
    6dfc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6dfe:	2006      	movs	r0, #6
    6e00:	4b17      	ldr	r3, [pc, #92]	; (6e60 <_system_clock_source_osc16m_freq_sel+0xa8>)
    6e02:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6e04:	46c0      	nop			; (mov r8, r8)
    6e06:	2006      	movs	r0, #6
    6e08:	4b16      	ldr	r3, [pc, #88]	; (6e64 <_system_clock_source_osc16m_freq_sel+0xac>)
    6e0a:	4798      	blx	r3
    6e0c:	0003      	movs	r3, r0
    6e0e:	001a      	movs	r2, r3
    6e10:	2301      	movs	r3, #1
    6e12:	4053      	eors	r3, r2
    6e14:	b2db      	uxtb	r3, r3
    6e16:	2b00      	cmp	r3, #0
    6e18:	d1f5      	bne.n	6e06 <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    6e1a:	1d3b      	adds	r3, r7, #4
    6e1c:	0018      	movs	r0, r3
    6e1e:	4b0b      	ldr	r3, [pc, #44]	; (6e4c <_system_clock_source_osc16m_freq_sel+0x94>)
    6e20:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
    6e22:	1d3b      	adds	r3, r7, #4
    6e24:	2206      	movs	r2, #6
    6e26:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6e28:	1d3b      	adds	r3, r7, #4
    6e2a:	0019      	movs	r1, r3
    6e2c:	2000      	movs	r0, #0
    6e2e:	4b08      	ldr	r3, [pc, #32]	; (6e50 <_system_clock_source_osc16m_freq_sel+0x98>)
    6e30:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    6e32:	490d      	ldr	r1, [pc, #52]	; (6e68 <_system_clock_source_osc16m_freq_sel+0xb0>)
    6e34:	4b0c      	ldr	r3, [pc, #48]	; (6e68 <_system_clock_source_osc16m_freq_sel+0xb0>)
    6e36:	7d1b      	ldrb	r3, [r3, #20]
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	4252      	negs	r2, r2
    6e3e:	4313      	orrs	r3, r2
    6e40:	b2db      	uxtb	r3, r3
    6e42:	750b      	strb	r3, [r1, #20]
	}
}
    6e44:	46c0      	nop			; (mov r8, r8)
    6e46:	46bd      	mov	sp, r7
    6e48:	b004      	add	sp, #16
    6e4a:	bd80      	pop	{r7, pc}
    6e4c:	00006b61 	.word	0x00006b61
    6e50:	000077dd 	.word	0x000077dd
    6e54:	00007291 	.word	0x00007291
    6e58:	00006be7 	.word	0x00006be7
    6e5c:	00006f7d 	.word	0x00006f7d
    6e60:	000071d1 	.word	0x000071d1
    6e64:	0000733d 	.word	0x0000733d
    6e68:	40000c00 	.word	0x40000c00

00006e6c <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6e70:	4b0f      	ldr	r3, [pc, #60]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6e72:	2202      	movs	r2, #2
    6e74:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    6e76:	4b0f      	ldr	r3, [pc, #60]	; (6eb4 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    6e78:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6e7a:	4a0d      	ldr	r2, [pc, #52]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6e7c:	4b0e      	ldr	r3, [pc, #56]	; (6eb8 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    6e7e:	689b      	ldr	r3, [r3, #8]
    6e80:	6213      	str	r3, [r2, #32]

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6e82:	4b0b      	ldr	r3, [pc, #44]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6e84:	2202      	movs	r2, #2
    6e86:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    6e88:	4b0a      	ldr	r3, [pc, #40]	; (6eb4 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    6e8a:	4798      	blx	r3

	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6e8c:	4a08      	ldr	r2, [pc, #32]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6e8e:	4b0a      	ldr	r3, [pc, #40]	; (6eb8 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    6e90:	685b      	ldr	r3, [r3, #4]
    6e92:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    6e94:	4b06      	ldr	r3, [pc, #24]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6e96:	2200      	movs	r2, #0
    6e98:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    6e9a:	4b06      	ldr	r3, [pc, #24]	; (6eb4 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    6e9c:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6e9e:	4a04      	ldr	r2, [pc, #16]	; (6eb0 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    6ea0:	4b05      	ldr	r3, [pc, #20]	; (6eb8 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    6ea2:	681b      	ldr	r3, [r3, #0]
    6ea4:	b29b      	uxth	r3, r3
    6ea6:	8313      	strh	r3, [r2, #24]
}
    6ea8:	46c0      	nop			; (mov r8, r8)
    6eaa:	46bd      	mov	sp, r7
    6eac:	bd80      	pop	{r7, pc}
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	40000c00 	.word	0x40000c00
    6eb4:	00006d9d 	.word	0x00006d9d
    6eb8:	20000290 	.word	0x20000290

00006ebc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b082      	sub	sp, #8
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	0002      	movs	r2, r0
    6ec4:	1dfb      	adds	r3, r7, #7
    6ec6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6ec8:	1dfb      	adds	r3, r7, #7
    6eca:	781b      	ldrb	r3, [r3, #0]
    6ecc:	2b08      	cmp	r3, #8
    6ece:	d842      	bhi.n	6f56 <system_clock_source_get_hz+0x9a>
    6ed0:	009a      	lsls	r2, r3, #2
    6ed2:	4b23      	ldr	r3, [pc, #140]	; (6f60 <system_clock_source_get_hz+0xa4>)
    6ed4:	18d3      	adds	r3, r2, r3
    6ed6:	681b      	ldr	r3, [r3, #0]
    6ed8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6eda:	4b22      	ldr	r3, [pc, #136]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6edc:	691b      	ldr	r3, [r3, #16]
    6ede:	e03b      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6ee0:	4b21      	ldr	r3, [pc, #132]	; (6f68 <system_clock_source_get_hz+0xac>)
    6ee2:	7d1b      	ldrb	r3, [r3, #20]
    6ee4:	071b      	lsls	r3, r3, #28
    6ee6:	0f9b      	lsrs	r3, r3, #30
    6ee8:	b2db      	uxtb	r3, r3
    6eea:	3301      	adds	r3, #1
    6eec:	001a      	movs	r2, r3
    6eee:	4b1f      	ldr	r3, [pc, #124]	; (6f6c <system_clock_source_get_hz+0xb0>)
    6ef0:	4353      	muls	r3, r2
    6ef2:	e031      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6ef4:	2380      	movs	r3, #128	; 0x80
    6ef6:	021b      	lsls	r3, r3, #8
    6ef8:	e02e      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6efa:	2380      	movs	r3, #128	; 0x80
    6efc:	021b      	lsls	r3, r3, #8
    6efe:	e02b      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6f00:	4b18      	ldr	r3, [pc, #96]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6f02:	695b      	ldr	r3, [r3, #20]
    6f04:	e028      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6f06:	4b17      	ldr	r3, [pc, #92]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6f08:	681b      	ldr	r3, [r3, #0]
    6f0a:	2202      	movs	r2, #2
    6f0c:	4013      	ands	r3, r2
    6f0e:	d101      	bne.n	6f14 <system_clock_source_get_hz+0x58>
			return 0;
    6f10:	2300      	movs	r3, #0
    6f12:	e021      	b.n	6f58 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6f14:	4b16      	ldr	r3, [pc, #88]	; (6f70 <system_clock_source_get_hz+0xb4>)
    6f16:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    6f18:	4b12      	ldr	r3, [pc, #72]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6f1a:	681b      	ldr	r3, [r3, #0]
    6f1c:	2224      	movs	r2, #36	; 0x24
    6f1e:	4013      	ands	r3, r2
    6f20:	2b04      	cmp	r3, #4
    6f22:	d109      	bne.n	6f38 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6f24:	2000      	movs	r0, #0
    6f26:	4b13      	ldr	r3, [pc, #76]	; (6f74 <system_clock_source_get_hz+0xb8>)
    6f28:	4798      	blx	r3
    6f2a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    6f2c:	4b0d      	ldr	r3, [pc, #52]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6f2e:	689b      	ldr	r3, [r3, #8]
    6f30:	041b      	lsls	r3, r3, #16
    6f32:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6f34:	4353      	muls	r3, r2
    6f36:	e00f      	b.n	6f58 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    6f38:	4b0f      	ldr	r3, [pc, #60]	; (6f78 <system_clock_source_get_hz+0xbc>)
    6f3a:	e00d      	b.n	6f58 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6f3c:	4a0a      	ldr	r2, [pc, #40]	; (6f68 <system_clock_source_get_hz+0xac>)
    6f3e:	2328      	movs	r3, #40	; 0x28
    6f40:	5cd3      	ldrb	r3, [r2, r3]
    6f42:	b2db      	uxtb	r3, r3
    6f44:	001a      	movs	r2, r3
    6f46:	2302      	movs	r3, #2
    6f48:	4013      	ands	r3, r2
    6f4a:	d101      	bne.n	6f50 <system_clock_source_get_hz+0x94>
			return 0;
    6f4c:	2300      	movs	r3, #0
    6f4e:	e003      	b.n	6f58 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    6f50:	4b04      	ldr	r3, [pc, #16]	; (6f64 <system_clock_source_get_hz+0xa8>)
    6f52:	68db      	ldr	r3, [r3, #12]
    6f54:	e000      	b.n	6f58 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    6f56:	2300      	movs	r3, #0
	}
}
    6f58:	0018      	movs	r0, r3
    6f5a:	46bd      	mov	sp, r7
    6f5c:	b002      	add	sp, #8
    6f5e:	bd80      	pop	{r7, pc}
    6f60:	0000b384 	.word	0x0000b384
    6f64:	20000290 	.word	0x20000290
    6f68:	40000c00 	.word	0x40000c00
    6f6c:	003d0900 	.word	0x003d0900
    6f70:	00006d9d 	.word	0x00006d9d
    6f74:	00007af9 	.word	0x00007af9
    6f78:	02dc6c00 	.word	0x02dc6c00

00006f7c <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b084      	sub	sp, #16
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6f84:	4a1c      	ldr	r2, [pc, #112]	; (6ff8 <system_clock_source_osc16m_set_config+0x7c>)
    6f86:	230c      	movs	r3, #12
    6f88:	18fb      	adds	r3, r7, r3
    6f8a:	7d12      	ldrb	r2, [r2, #20]
    6f8c:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
    6f8e:	687b      	ldr	r3, [r7, #4]
    6f90:	781b      	ldrb	r3, [r3, #0]
    6f92:	1c1a      	adds	r2, r3, #0
    6f94:	2303      	movs	r3, #3
    6f96:	4013      	ands	r3, r2
    6f98:	b2da      	uxtb	r2, r3
    6f9a:	230c      	movs	r3, #12
    6f9c:	18fb      	adds	r3, r7, r3
    6f9e:	2103      	movs	r1, #3
    6fa0:	400a      	ands	r2, r1
    6fa2:	0090      	lsls	r0, r2, #2
    6fa4:	781a      	ldrb	r2, [r3, #0]
    6fa6:	210c      	movs	r1, #12
    6fa8:	438a      	bics	r2, r1
    6faa:	1c11      	adds	r1, r2, #0
    6fac:	1c02      	adds	r2, r0, #0
    6fae:	430a      	orrs	r2, r1
    6fb0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	789a      	ldrb	r2, [r3, #2]
    6fb6:	230c      	movs	r3, #12
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	01d0      	lsls	r0, r2, #7
    6fbc:	781a      	ldrb	r2, [r3, #0]
    6fbe:	217f      	movs	r1, #127	; 0x7f
    6fc0:	400a      	ands	r2, r1
    6fc2:	1c11      	adds	r1, r2, #0
    6fc4:	1c02      	adds	r2, r0, #0
    6fc6:	430a      	orrs	r2, r1
    6fc8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	785a      	ldrb	r2, [r3, #1]
    6fce:	230c      	movs	r3, #12
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2101      	movs	r1, #1
    6fd4:	400a      	ands	r2, r1
    6fd6:	0190      	lsls	r0, r2, #6
    6fd8:	781a      	ldrb	r2, [r3, #0]
    6fda:	2140      	movs	r1, #64	; 0x40
    6fdc:	438a      	bics	r2, r1
    6fde:	1c11      	adds	r1, r2, #0
    6fe0:	1c02      	adds	r2, r0, #0
    6fe2:	430a      	orrs	r2, r1
    6fe4:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
    6fe6:	4a04      	ldr	r2, [pc, #16]	; (6ff8 <system_clock_source_osc16m_set_config+0x7c>)
    6fe8:	230c      	movs	r3, #12
    6fea:	18fb      	adds	r3, r7, r3
    6fec:	781b      	ldrb	r3, [r3, #0]
    6fee:	7513      	strb	r3, [r2, #20]
}
    6ff0:	46c0      	nop			; (mov r8, r8)
    6ff2:	46bd      	mov	sp, r7
    6ff4:	b004      	add	sp, #16
    6ff6:	bd80      	pop	{r7, pc}
    6ff8:	40000c00 	.word	0x40000c00

00006ffc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6ffc:	b580      	push	{r7, lr}
    6ffe:	b084      	sub	sp, #16
    7000:	af00      	add	r7, sp, #0
    7002:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    7004:	4b3a      	ldr	r3, [pc, #232]	; (70f0 <system_clock_source_xosc32k_set_config+0xf4>)
    7006:	695b      	ldr	r3, [r3, #20]
    7008:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	785b      	ldrb	r3, [r3, #1]
    700e:	1c1a      	adds	r2, r3, #0
    7010:	2307      	movs	r3, #7
    7012:	4013      	ands	r3, r2
    7014:	b2da      	uxtb	r2, r3
    7016:	230d      	movs	r3, #13
    7018:	18fb      	adds	r3, r7, r3
    701a:	2107      	movs	r1, #7
    701c:	400a      	ands	r2, r1
    701e:	0010      	movs	r0, r2
    7020:	781a      	ldrb	r2, [r3, #0]
    7022:	2107      	movs	r1, #7
    7024:	438a      	bics	r2, r1
    7026:	1c11      	adds	r1, r2, #0
    7028:	1c02      	adds	r2, r0, #0
    702a:	430a      	orrs	r2, r1
    702c:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	2b00      	cmp	r3, #0
    7034:	d106      	bne.n	7044 <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
    7036:	230c      	movs	r3, #12
    7038:	18fb      	adds	r3, r7, r3
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	2104      	movs	r1, #4
    703e:	430a      	orrs	r2, r1
    7040:	701a      	strb	r2, [r3, #0]
    7042:	e005      	b.n	7050 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    7044:	230c      	movs	r3, #12
    7046:	18fb      	adds	r3, r7, r3
    7048:	781a      	ldrb	r2, [r3, #0]
    704a:	2104      	movs	r1, #4
    704c:	438a      	bics	r2, r1
    704e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	789a      	ldrb	r2, [r3, #2]
    7054:	230c      	movs	r3, #12
    7056:	18fb      	adds	r3, r7, r3
    7058:	2101      	movs	r1, #1
    705a:	400a      	ands	r2, r1
    705c:	0110      	lsls	r0, r2, #4
    705e:	781a      	ldrb	r2, [r3, #0]
    7060:	2110      	movs	r1, #16
    7062:	438a      	bics	r2, r1
    7064:	1c11      	adds	r1, r2, #0
    7066:	1c02      	adds	r2, r0, #0
    7068:	430a      	orrs	r2, r1
    706a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	78da      	ldrb	r2, [r3, #3]
    7070:	230c      	movs	r3, #12
    7072:	18fb      	adds	r3, r7, r3
    7074:	2101      	movs	r1, #1
    7076:	400a      	ands	r2, r1
    7078:	00d0      	lsls	r0, r2, #3
    707a:	781a      	ldrb	r2, [r3, #0]
    707c:	2108      	movs	r1, #8
    707e:	438a      	bics	r2, r1
    7080:	1c11      	adds	r1, r2, #0
    7082:	1c02      	adds	r2, r0, #0
    7084:	430a      	orrs	r2, r1
    7086:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	7a5a      	ldrb	r2, [r3, #9]
    708c:	230c      	movs	r3, #12
    708e:	18fb      	adds	r3, r7, r3
    7090:	01d0      	lsls	r0, r2, #7
    7092:	781a      	ldrb	r2, [r3, #0]
    7094:	217f      	movs	r1, #127	; 0x7f
    7096:	400a      	ands	r2, r1
    7098:	1c11      	adds	r1, r2, #0
    709a:	1c02      	adds	r2, r0, #0
    709c:	430a      	orrs	r2, r1
    709e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	7a1a      	ldrb	r2, [r3, #8]
    70a4:	230c      	movs	r3, #12
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	2101      	movs	r1, #1
    70aa:	400a      	ands	r2, r1
    70ac:	0190      	lsls	r0, r2, #6
    70ae:	781a      	ldrb	r2, [r3, #0]
    70b0:	2140      	movs	r1, #64	; 0x40
    70b2:	438a      	bics	r2, r1
    70b4:	1c11      	adds	r1, r2, #0
    70b6:	1c02      	adds	r2, r0, #0
    70b8:	430a      	orrs	r2, r1
    70ba:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	7a9a      	ldrb	r2, [r3, #10]
    70c0:	230d      	movs	r3, #13
    70c2:	18fb      	adds	r3, r7, r3
    70c4:	2101      	movs	r1, #1
    70c6:	400a      	ands	r2, r1
    70c8:	0110      	lsls	r0, r2, #4
    70ca:	781a      	ldrb	r2, [r3, #0]
    70cc:	2110      	movs	r1, #16
    70ce:	438a      	bics	r2, r1
    70d0:	1c11      	adds	r1, r2, #0
    70d2:	1c02      	adds	r2, r0, #0
    70d4:	430a      	orrs	r2, r1
    70d6:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	685a      	ldr	r2, [r3, #4]
    70dc:	4b05      	ldr	r3, [pc, #20]	; (70f4 <system_clock_source_xosc32k_set_config+0xf8>)
    70de:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
    70e0:	4b03      	ldr	r3, [pc, #12]	; (70f0 <system_clock_source_xosc32k_set_config+0xf4>)
    70e2:	68fa      	ldr	r2, [r7, #12]
    70e4:	615a      	str	r2, [r3, #20]
}
    70e6:	46c0      	nop			; (mov r8, r8)
    70e8:	46bd      	mov	sp, r7
    70ea:	b004      	add	sp, #16
    70ec:	bd80      	pop	{r7, pc}
    70ee:	46c0      	nop			; (mov r8, r8)
    70f0:	40001000 	.word	0x40001000
    70f4:	20000290 	.word	0x20000290

000070f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b082      	sub	sp, #8
    70fc:	af00      	add	r7, sp, #0
    70fe:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	7a9b      	ldrb	r3, [r3, #10]
    7104:	029b      	lsls	r3, r3, #10
    7106:	041b      	lsls	r3, r3, #16
    7108:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    710a:	687b      	ldr	r3, [r7, #4]
    710c:	899b      	ldrh	r3, [r3, #12]
    710e:	059b      	lsls	r3, r3, #22
    7110:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7112:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    7114:	4b2c      	ldr	r3, [pc, #176]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    7116:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
    7120:	4313      	orrs	r3, r2
    7122:	b2db      	uxtb	r3, r3
    7124:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
    712a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    712c:	687a      	ldr	r2, [r7, #4]
    712e:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
    7130:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	785b      	ldrb	r3, [r3, #1]
    7136:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    7138:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    713a:	687b      	ldr	r3, [r7, #4]
    713c:	789b      	ldrb	r3, [r3, #2]
    713e:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    7140:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    7142:	4b21      	ldr	r3, [pc, #132]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    7144:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    7146:	687b      	ldr	r3, [r7, #4]
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	2b04      	cmp	r3, #4
    714c:	d116      	bne.n	717c <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	7b9b      	ldrb	r3, [r3, #14]
    7152:	069b      	lsls	r3, r3, #26
    7154:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	8a1b      	ldrh	r3, [r3, #16]
    715a:	041b      	lsls	r3, r3, #16
    715c:	0019      	movs	r1, r3
    715e:	4b1b      	ldr	r3, [pc, #108]	; (71cc <system_clock_source_dfll_set_config+0xd4>)
    7160:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7162:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    7164:	687a      	ldr	r2, [r7, #4]
    7166:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7168:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    716a:	4b17      	ldr	r3, [pc, #92]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    716c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    716e:	4b16      	ldr	r3, [pc, #88]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    7170:	681b      	ldr	r3, [r3, #0]
    7172:	687a      	ldr	r2, [r7, #4]
    7174:	7812      	ldrb	r2, [r2, #0]
    7176:	431a      	orrs	r2, r3
    7178:	4b13      	ldr	r3, [pc, #76]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    717a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	2b20      	cmp	r3, #32
    7182:	d11c      	bne.n	71be <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7184:	687b      	ldr	r3, [r7, #4]
    7186:	7b9b      	ldrb	r3, [r3, #14]
    7188:	069b      	lsls	r3, r3, #26
    718a:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	8a1b      	ldrh	r3, [r3, #16]
    7190:	041b      	lsls	r3, r3, #16
    7192:	0019      	movs	r1, r3
    7194:	4b0d      	ldr	r3, [pc, #52]	; (71cc <system_clock_source_dfll_set_config+0xd4>)
    7196:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7198:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    719a:	687a      	ldr	r2, [r7, #4]
    719c:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    719e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    71a0:	4b09      	ldr	r3, [pc, #36]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    71a2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    71a4:	4b08      	ldr	r3, [pc, #32]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    71a6:	681b      	ldr	r3, [r3, #0]
    71a8:	687a      	ldr	r2, [r7, #4]
    71aa:	7812      	ldrb	r2, [r2, #0]
    71ac:	2104      	movs	r1, #4
    71ae:	430a      	orrs	r2, r1
    71b0:	b2d2      	uxtb	r2, r2
    71b2:	4313      	orrs	r3, r2
    71b4:	2280      	movs	r2, #128	; 0x80
    71b6:	00d2      	lsls	r2, r2, #3
    71b8:	431a      	orrs	r2, r3
    71ba:	4b03      	ldr	r3, [pc, #12]	; (71c8 <system_clock_source_dfll_set_config+0xd0>)
    71bc:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    71be:	46c0      	nop			; (mov r8, r8)
    71c0:	46bd      	mov	sp, r7
    71c2:	b002      	add	sp, #8
    71c4:	bd80      	pop	{r7, pc}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	20000290 	.word	0x20000290
    71cc:	03ff0000 	.word	0x03ff0000

000071d0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	b082      	sub	sp, #8
    71d4:	af00      	add	r7, sp, #0
    71d6:	0002      	movs	r2, r0
    71d8:	1dfb      	adds	r3, r7, #7
    71da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    71dc:	1dfb      	adds	r3, r7, #7
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	2b08      	cmp	r3, #8
    71e2:	d844      	bhi.n	726e <system_clock_source_enable+0x9e>
    71e4:	009a      	lsls	r2, r3, #2
    71e6:	4b25      	ldr	r3, [pc, #148]	; (727c <system_clock_source_enable+0xac>)
    71e8:	18d3      	adds	r3, r2, r3
    71ea:	681b      	ldr	r3, [r3, #0]
    71ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    71ee:	4a24      	ldr	r2, [pc, #144]	; (7280 <system_clock_source_enable+0xb0>)
    71f0:	4b23      	ldr	r3, [pc, #140]	; (7280 <system_clock_source_enable+0xb0>)
    71f2:	7d1b      	ldrb	r3, [r3, #20]
    71f4:	b2db      	uxtb	r3, r3
    71f6:	2102      	movs	r1, #2
    71f8:	430b      	orrs	r3, r1
    71fa:	b2db      	uxtb	r3, r3
    71fc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    71fe:	2300      	movs	r3, #0
    7200:	e038      	b.n	7274 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    7202:	4b20      	ldr	r3, [pc, #128]	; (7284 <system_clock_source_enable+0xb4>)
    7204:	4a1f      	ldr	r2, [pc, #124]	; (7284 <system_clock_source_enable+0xb4>)
    7206:	6992      	ldr	r2, [r2, #24]
    7208:	2102      	movs	r1, #2
    720a:	430a      	orrs	r2, r1
    720c:	619a      	str	r2, [r3, #24]
		break;
    720e:	e030      	b.n	7272 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    7210:	4a1b      	ldr	r2, [pc, #108]	; (7280 <system_clock_source_enable+0xb0>)
    7212:	4b1b      	ldr	r3, [pc, #108]	; (7280 <system_clock_source_enable+0xb0>)
    7214:	8a1b      	ldrh	r3, [r3, #16]
    7216:	b29b      	uxth	r3, r3
    7218:	2102      	movs	r1, #2
    721a:	430b      	orrs	r3, r1
    721c:	b29b      	uxth	r3, r3
    721e:	8213      	strh	r3, [r2, #16]
		break;
    7220:	e027      	b.n	7272 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    7222:	4b18      	ldr	r3, [pc, #96]	; (7284 <system_clock_source_enable+0xb4>)
    7224:	4a17      	ldr	r2, [pc, #92]	; (7284 <system_clock_source_enable+0xb4>)
    7226:	6952      	ldr	r2, [r2, #20]
    7228:	2102      	movs	r1, #2
    722a:	430a      	orrs	r2, r1
    722c:	615a      	str	r2, [r3, #20]
		break;
    722e:	e020      	b.n	7272 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    7230:	4b15      	ldr	r3, [pc, #84]	; (7288 <system_clock_source_enable+0xb8>)
    7232:	681b      	ldr	r3, [r3, #0]
    7234:	2202      	movs	r2, #2
    7236:	431a      	orrs	r2, r3
    7238:	4b13      	ldr	r3, [pc, #76]	; (7288 <system_clock_source_enable+0xb8>)
    723a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    723c:	4b13      	ldr	r3, [pc, #76]	; (728c <system_clock_source_enable+0xbc>)
    723e:	4798      	blx	r3
		break;
    7240:	e017      	b.n	7272 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    7242:	4a0f      	ldr	r2, [pc, #60]	; (7280 <system_clock_source_enable+0xb0>)
    7244:	490e      	ldr	r1, [pc, #56]	; (7280 <system_clock_source_enable+0xb0>)
    7246:	2328      	movs	r3, #40	; 0x28
    7248:	5ccb      	ldrb	r3, [r1, r3]
    724a:	b2db      	uxtb	r3, r3
    724c:	2102      	movs	r1, #2
    724e:	430b      	orrs	r3, r1
    7250:	b2d9      	uxtb	r1, r3
    7252:	2328      	movs	r3, #40	; 0x28
    7254:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    7256:	46c0      	nop			; (mov r8, r8)
    7258:	4a09      	ldr	r2, [pc, #36]	; (7280 <system_clock_source_enable+0xb0>)
    725a:	2338      	movs	r3, #56	; 0x38
    725c:	5cd3      	ldrb	r3, [r2, r3]
    725e:	b2db      	uxtb	r3, r3
    7260:	001a      	movs	r2, r3
    7262:	2302      	movs	r3, #2
    7264:	4013      	ands	r3, r2
    7266:	d1f7      	bne.n	7258 <system_clock_source_enable+0x88>
		}
		break;
    7268:	e003      	b.n	7272 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    726a:	2300      	movs	r3, #0
    726c:	e002      	b.n	7274 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    726e:	2317      	movs	r3, #23
    7270:	e000      	b.n	7274 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
    7272:	2300      	movs	r3, #0
}
    7274:	0018      	movs	r0, r3
    7276:	46bd      	mov	sp, r7
    7278:	b002      	add	sp, #8
    727a:	bd80      	pop	{r7, pc}
    727c:	0000b3a8 	.word	0x0000b3a8
    7280:	40000c00 	.word	0x40000c00
    7284:	40001000 	.word	0x40001000
    7288:	20000290 	.word	0x20000290
    728c:	00006e6d 	.word	0x00006e6d

00007290 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
    7290:	b580      	push	{r7, lr}
    7292:	b082      	sub	sp, #8
    7294:	af00      	add	r7, sp, #0
    7296:	0002      	movs	r2, r0
    7298:	1dfb      	adds	r3, r7, #7
    729a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    729c:	1dfb      	adds	r3, r7, #7
    729e:	781b      	ldrb	r3, [r3, #0]
    72a0:	2b08      	cmp	r3, #8
    72a2:	d83c      	bhi.n	731e <system_clock_source_disable+0x8e>
    72a4:	009a      	lsls	r2, r3, #2
    72a6:	4b21      	ldr	r3, [pc, #132]	; (732c <system_clock_source_disable+0x9c>)
    72a8:	18d3      	adds	r3, r2, r3
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    72ae:	4a20      	ldr	r2, [pc, #128]	; (7330 <system_clock_source_disable+0xa0>)
    72b0:	4b1f      	ldr	r3, [pc, #124]	; (7330 <system_clock_source_disable+0xa0>)
    72b2:	7d1b      	ldrb	r3, [r3, #20]
    72b4:	b2db      	uxtb	r3, r3
    72b6:	2102      	movs	r1, #2
    72b8:	438b      	bics	r3, r1
    72ba:	b2db      	uxtb	r3, r3
    72bc:	7513      	strb	r3, [r2, #20]
		break;
    72be:	e030      	b.n	7322 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    72c0:	4b1c      	ldr	r3, [pc, #112]	; (7334 <system_clock_source_disable+0xa4>)
    72c2:	4a1c      	ldr	r2, [pc, #112]	; (7334 <system_clock_source_disable+0xa4>)
    72c4:	6992      	ldr	r2, [r2, #24]
    72c6:	2102      	movs	r1, #2
    72c8:	438a      	bics	r2, r1
    72ca:	619a      	str	r2, [r3, #24]
		break;
    72cc:	e029      	b.n	7322 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    72ce:	4a18      	ldr	r2, [pc, #96]	; (7330 <system_clock_source_disable+0xa0>)
    72d0:	4b17      	ldr	r3, [pc, #92]	; (7330 <system_clock_source_disable+0xa0>)
    72d2:	8a1b      	ldrh	r3, [r3, #16]
    72d4:	b29b      	uxth	r3, r3
    72d6:	2102      	movs	r1, #2
    72d8:	438b      	bics	r3, r1
    72da:	b29b      	uxth	r3, r3
    72dc:	8213      	strh	r3, [r2, #16]
		break;
    72de:	e020      	b.n	7322 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    72e0:	4b14      	ldr	r3, [pc, #80]	; (7334 <system_clock_source_disable+0xa4>)
    72e2:	4a14      	ldr	r2, [pc, #80]	; (7334 <system_clock_source_disable+0xa4>)
    72e4:	6952      	ldr	r2, [r2, #20]
    72e6:	2102      	movs	r1, #2
    72e8:	438a      	bics	r2, r1
    72ea:	615a      	str	r2, [r3, #20]
		break;
    72ec:	e019      	b.n	7322 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    72ee:	4b12      	ldr	r3, [pc, #72]	; (7338 <system_clock_source_disable+0xa8>)
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	2202      	movs	r2, #2
    72f4:	4393      	bics	r3, r2
    72f6:	001a      	movs	r2, r3
    72f8:	4b0f      	ldr	r3, [pc, #60]	; (7338 <system_clock_source_disable+0xa8>)
    72fa:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    72fc:	4a0c      	ldr	r2, [pc, #48]	; (7330 <system_clock_source_disable+0xa0>)
    72fe:	4b0e      	ldr	r3, [pc, #56]	; (7338 <system_clock_source_disable+0xa8>)
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	b29b      	uxth	r3, r3
    7304:	8313      	strh	r3, [r2, #24]
		break;
    7306:	e00c      	b.n	7322 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    7308:	4a09      	ldr	r2, [pc, #36]	; (7330 <system_clock_source_disable+0xa0>)
    730a:	4909      	ldr	r1, [pc, #36]	; (7330 <system_clock_source_disable+0xa0>)
    730c:	2328      	movs	r3, #40	; 0x28
    730e:	5ccb      	ldrb	r3, [r1, r3]
    7310:	b2db      	uxtb	r3, r3
    7312:	2102      	movs	r1, #2
    7314:	438b      	bics	r3, r1
    7316:	b2d9      	uxtb	r1, r3
    7318:	2328      	movs	r3, #40	; 0x28
    731a:	54d1      	strb	r1, [r2, r3]
		break;
    731c:	e001      	b.n	7322 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    731e:	2317      	movs	r3, #23
    7320:	e000      	b.n	7324 <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
    7322:	2300      	movs	r3, #0
}
    7324:	0018      	movs	r0, r3
    7326:	46bd      	mov	sp, r7
    7328:	b002      	add	sp, #8
    732a:	bd80      	pop	{r7, pc}
    732c:	0000b3cc 	.word	0x0000b3cc
    7330:	40000c00 	.word	0x40000c00
    7334:	40001000 	.word	0x40001000
    7338:	20000290 	.word	0x20000290

0000733c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    733c:	b580      	push	{r7, lr}
    733e:	b084      	sub	sp, #16
    7340:	af00      	add	r7, sp, #0
    7342:	0002      	movs	r2, r0
    7344:	1dfb      	adds	r3, r7, #7
    7346:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    7348:	2300      	movs	r3, #0
    734a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    734c:	1dfb      	adds	r3, r7, #7
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	2b08      	cmp	r3, #8
    7352:	d84f      	bhi.n	73f4 <system_clock_source_is_ready+0xb8>
    7354:	009a      	lsls	r2, r3, #2
    7356:	4b2a      	ldr	r3, [pc, #168]	; (7400 <system_clock_source_is_ready+0xc4>)
    7358:	18d3      	adds	r3, r2, r3
    735a:	681b      	ldr	r3, [r3, #0]
    735c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
    735e:	2310      	movs	r3, #16
    7360:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    7362:	4b28      	ldr	r3, [pc, #160]	; (7404 <system_clock_source_is_ready+0xc8>)
    7364:	68db      	ldr	r3, [r3, #12]
    7366:	68fa      	ldr	r2, [r7, #12]
    7368:	401a      	ands	r2, r3
    736a:	68fb      	ldr	r3, [r7, #12]
    736c:	1ad3      	subs	r3, r2, r3
    736e:	425a      	negs	r2, r3
    7370:	4153      	adcs	r3, r2
    7372:	b2db      	uxtb	r3, r3
    7374:	e03f      	b.n	73f6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
    7376:	2302      	movs	r3, #2
    7378:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    737a:	4b23      	ldr	r3, [pc, #140]	; (7408 <system_clock_source_is_ready+0xcc>)
    737c:	68db      	ldr	r3, [r3, #12]
    737e:	68fa      	ldr	r2, [r7, #12]
    7380:	401a      	ands	r2, r3
    7382:	68fb      	ldr	r3, [r7, #12]
    7384:	1ad3      	subs	r3, r2, r3
    7386:	425a      	negs	r2, r3
    7388:	4153      	adcs	r3, r2
    738a:	b2db      	uxtb	r3, r3
    738c:	e033      	b.n	73f6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
    738e:	2301      	movs	r3, #1
    7390:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    7392:	4b1c      	ldr	r3, [pc, #112]	; (7404 <system_clock_source_is_ready+0xc8>)
    7394:	68db      	ldr	r3, [r3, #12]
    7396:	68fa      	ldr	r2, [r7, #12]
    7398:	401a      	ands	r2, r3
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	1ad3      	subs	r3, r2, r3
    739e:	425a      	negs	r2, r3
    73a0:	4153      	adcs	r3, r2
    73a2:	b2db      	uxtb	r3, r3
    73a4:	e027      	b.n	73f6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
    73a6:	2301      	movs	r3, #1
    73a8:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    73aa:	4b17      	ldr	r3, [pc, #92]	; (7408 <system_clock_source_is_ready+0xcc>)
    73ac:	68db      	ldr	r3, [r3, #12]
    73ae:	68fa      	ldr	r2, [r7, #12]
    73b0:	401a      	ands	r2, r3
    73b2:	68fb      	ldr	r3, [r7, #12]
    73b4:	1ad3      	subs	r3, r2, r3
    73b6:	425a      	negs	r2, r3
    73b8:	4153      	adcs	r3, r2
    73ba:	b2db      	uxtb	r3, r3
    73bc:	e01b      	b.n	73f6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
    73be:	23d0      	movs	r3, #208	; 0xd0
    73c0:	011b      	lsls	r3, r3, #4
    73c2:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    73c4:	4b0f      	ldr	r3, [pc, #60]	; (7404 <system_clock_source_is_ready+0xc8>)
    73c6:	68db      	ldr	r3, [r3, #12]
    73c8:	68fa      	ldr	r2, [r7, #12]
    73ca:	401a      	ands	r2, r3
    73cc:	68fb      	ldr	r3, [r7, #12]
    73ce:	1ad3      	subs	r3, r2, r3
    73d0:	425a      	negs	r2, r3
    73d2:	4153      	adcs	r3, r2
    73d4:	b2db      	uxtb	r3, r3
    73d6:	e00e      	b.n	73f6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    73d8:	4a0a      	ldr	r2, [pc, #40]	; (7404 <system_clock_source_is_ready+0xc8>)
    73da:	233c      	movs	r3, #60	; 0x3c
    73dc:	5cd3      	ldrb	r3, [r2, r3]
    73de:	b2db      	uxtb	r3, r3
    73e0:	001a      	movs	r2, r3
    73e2:	2303      	movs	r3, #3
    73e4:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
    73e6:	3b03      	subs	r3, #3
    73e8:	425a      	negs	r2, r3
    73ea:	4153      	adcs	r3, r2
    73ec:	b2db      	uxtb	r3, r3
    73ee:	e002      	b.n	73f6 <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    73f0:	2301      	movs	r3, #1
    73f2:	e000      	b.n	73f6 <system_clock_source_is_ready+0xba>

	default:
		return false;
    73f4:	2300      	movs	r3, #0
	}
}
    73f6:	0018      	movs	r0, r3
    73f8:	46bd      	mov	sp, r7
    73fa:	b004      	add	sp, #16
    73fc:	bd80      	pop	{r7, pc}
    73fe:	46c0      	nop			; (mov r8, r8)
    7400:	0000b3f0 	.word	0x0000b3f0
    7404:	40000c00 	.word	0x40000c00
    7408:	40001000 	.word	0x40001000

0000740c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    740c:	b580      	push	{r7, lr}
    740e:	b0aa      	sub	sp, #168	; 0xa8
    7410:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    7412:	4b93      	ldr	r3, [pc, #588]	; (7660 <system_clock_init+0x254>)
    7414:	2280      	movs	r2, #128	; 0x80
    7416:	0052      	lsls	r2, r2, #1
    7418:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    741a:	4b92      	ldr	r3, [pc, #584]	; (7664 <system_clock_init+0x258>)
    741c:	2203      	movs	r2, #3
    741e:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    7420:	2002      	movs	r0, #2
    7422:	4b91      	ldr	r3, [pc, #580]	; (7668 <system_clock_init+0x25c>)
    7424:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    7426:	2002      	movs	r0, #2
    7428:	4b90      	ldr	r3, [pc, #576]	; (766c <system_clock_init+0x260>)
    742a:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    742c:	2394      	movs	r3, #148	; 0x94
    742e:	18fb      	adds	r3, r7, r3
    7430:	0018      	movs	r0, r3
    7432:	4b8f      	ldr	r3, [pc, #572]	; (7670 <system_clock_init+0x264>)
    7434:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    7436:	2394      	movs	r3, #148	; 0x94
    7438:	18fb      	adds	r3, r7, r3
    743a:	2280      	movs	r2, #128	; 0x80
    743c:	0212      	lsls	r2, r2, #8
    743e:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    7440:	2394      	movs	r3, #148	; 0x94
    7442:	18fb      	adds	r3, r7, r3
    7444:	2200      	movs	r2, #0
    7446:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    7448:	2394      	movs	r3, #148	; 0x94
    744a:	18fb      	adds	r3, r7, r3
    744c:	2201      	movs	r2, #1
    744e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    7450:	2394      	movs	r3, #148	; 0x94
    7452:	18fb      	adds	r3, r7, r3
    7454:	2200      	movs	r2, #0
    7456:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    7458:	2394      	movs	r3, #148	; 0x94
    745a:	18fb      	adds	r3, r7, r3
    745c:	2201      	movs	r2, #1
    745e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
    7460:	2394      	movs	r3, #148	; 0x94
    7462:	18fb      	adds	r3, r7, r3
    7464:	2200      	movs	r2, #0
    7466:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    7468:	2394      	movs	r3, #148	; 0x94
    746a:	18fb      	adds	r3, r7, r3
    746c:	2201      	movs	r2, #1
    746e:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7470:	2394      	movs	r3, #148	; 0x94
    7472:	18fb      	adds	r3, r7, r3
    7474:	0018      	movs	r0, r3
    7476:	4b7f      	ldr	r3, [pc, #508]	; (7674 <system_clock_init+0x268>)
    7478:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    747a:	2005      	movs	r0, #5
    747c:	4b7e      	ldr	r3, [pc, #504]	; (7678 <system_clock_init+0x26c>)
    747e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    7480:	46c0      	nop			; (mov r8, r8)
    7482:	2005      	movs	r0, #5
    7484:	4b7d      	ldr	r3, [pc, #500]	; (767c <system_clock_init+0x270>)
    7486:	4798      	blx	r3
    7488:	0003      	movs	r3, r0
    748a:	001a      	movs	r2, r3
    748c:	2301      	movs	r3, #1
    748e:	4053      	eors	r3, r2
    7490:	b2db      	uxtb	r3, r3
    7492:	2b00      	cmp	r3, #0
    7494:	d1f5      	bne.n	7482 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    7496:	4a7a      	ldr	r2, [pc, #488]	; (7680 <system_clock_init+0x274>)
    7498:	6953      	ldr	r3, [r2, #20]
    749a:	2180      	movs	r1, #128	; 0x80
    749c:	430b      	orrs	r3, r1
    749e:	6153      	str	r3, [r2, #20]
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
    74a0:	4b78      	ldr	r3, [pc, #480]	; (7684 <system_clock_init+0x278>)
    74a2:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    74a4:	2380      	movs	r3, #128	; 0x80
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	0018      	movs	r0, r3
    74aa:	4b77      	ldr	r3, [pc, #476]	; (7688 <system_clock_init+0x27c>)
    74ac:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    74ae:	2380      	movs	r3, #128	; 0x80
    74b0:	18fb      	adds	r3, r7, r3
    74b2:	2204      	movs	r2, #4
    74b4:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    74b6:	2380      	movs	r3, #128	; 0x80
    74b8:	18fb      	adds	r3, r7, r3
    74ba:	2200      	movs	r2, #0
    74bc:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    74be:	2380      	movs	r3, #128	; 0x80
    74c0:	18fb      	adds	r3, r7, r3
    74c2:	2200      	movs	r2, #0
    74c4:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    74c6:	4b71      	ldr	r3, [pc, #452]	; (768c <system_clock_init+0x280>)
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	0e9b      	lsrs	r3, r3, #26
    74cc:	22a4      	movs	r2, #164	; 0xa4
    74ce:	18ba      	adds	r2, r7, r2
    74d0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    74d2:	23a4      	movs	r3, #164	; 0xa4
    74d4:	18fb      	adds	r3, r7, r3
    74d6:	681b      	ldr	r3, [r3, #0]
    74d8:	2b3f      	cmp	r3, #63	; 0x3f
    74da:	d103      	bne.n	74e4 <system_clock_init+0xd8>
		coarse = 0x1f;
    74dc:	231f      	movs	r3, #31
    74de:	22a4      	movs	r2, #164	; 0xa4
    74e0:	18ba      	adds	r2, r7, r2
    74e2:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
    74e4:	23a4      	movs	r3, #164	; 0xa4
    74e6:	18fb      	adds	r3, r7, r3
    74e8:	681b      	ldr	r3, [r3, #0]
    74ea:	b2da      	uxtb	r2, r3
    74ec:	2380      	movs	r3, #128	; 0x80
    74ee:	18fb      	adds	r3, r7, r3
    74f0:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    74f2:	2380      	movs	r3, #128	; 0x80
    74f4:	18fb      	adds	r3, r7, r3
    74f6:	2200      	movs	r2, #0
    74f8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    74fa:	2380      	movs	r3, #128	; 0x80
    74fc:	18fb      	adds	r3, r7, r3
    74fe:	2200      	movs	r2, #0
    7500:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7502:	2380      	movs	r3, #128	; 0x80
    7504:	18fb      	adds	r3, r7, r3
    7506:	2200      	movs	r2, #0
    7508:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    750a:	2380      	movs	r3, #128	; 0x80
    750c:	18fb      	adds	r3, r7, r3
    750e:	2200      	movs	r2, #0
    7510:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    7512:	2380      	movs	r3, #128	; 0x80
    7514:	18fb      	adds	r3, r7, r3
    7516:	4a5e      	ldr	r2, [pc, #376]	; (7690 <system_clock_init+0x284>)
    7518:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    751a:	2380      	movs	r3, #128	; 0x80
    751c:	18fb      	adds	r3, r7, r3
    751e:	2207      	movs	r2, #7
    7520:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    7522:	2380      	movs	r3, #128	; 0x80
    7524:	18fb      	adds	r3, r7, r3
    7526:	223f      	movs	r2, #63	; 0x3f
    7528:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    752a:	2380      	movs	r3, #128	; 0x80
    752c:	18fb      	adds	r3, r7, r3
    752e:	0018      	movs	r0, r3
    7530:	4b58      	ldr	r3, [pc, #352]	; (7694 <system_clock_init+0x288>)
    7532:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7534:	4b58      	ldr	r3, [pc, #352]	; (7698 <system_clock_init+0x28c>)
    7536:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7538:	2368      	movs	r3, #104	; 0x68
    753a:	18fb      	adds	r3, r7, r3
    753c:	0018      	movs	r0, r3
    753e:	4b57      	ldr	r3, [pc, #348]	; (769c <system_clock_init+0x290>)
    7540:	4798      	blx	r3
    7542:	2368      	movs	r3, #104	; 0x68
    7544:	18fb      	adds	r3, r7, r3
    7546:	2205      	movs	r2, #5
    7548:	701a      	strb	r2, [r3, #0]
    754a:	2368      	movs	r3, #104	; 0x68
    754c:	18fb      	adds	r3, r7, r3
    754e:	2201      	movs	r2, #1
    7550:	605a      	str	r2, [r3, #4]
    7552:	2368      	movs	r3, #104	; 0x68
    7554:	18fb      	adds	r3, r7, r3
    7556:	2200      	movs	r2, #0
    7558:	721a      	strb	r2, [r3, #8]
    755a:	2368      	movs	r3, #104	; 0x68
    755c:	18fb      	adds	r3, r7, r3
    755e:	2200      	movs	r2, #0
    7560:	725a      	strb	r2, [r3, #9]
    7562:	2368      	movs	r3, #104	; 0x68
    7564:	18fb      	adds	r3, r7, r3
    7566:	0019      	movs	r1, r3
    7568:	2001      	movs	r0, #1
    756a:	4b4d      	ldr	r3, [pc, #308]	; (76a0 <system_clock_init+0x294>)
    756c:	4798      	blx	r3
    756e:	2001      	movs	r0, #1
    7570:	4b4c      	ldr	r3, [pc, #304]	; (76a4 <system_clock_init+0x298>)
    7572:	4798      	blx	r3
    7574:	2350      	movs	r3, #80	; 0x50
    7576:	18fb      	adds	r3, r7, r3
    7578:	0018      	movs	r0, r3
    757a:	4b48      	ldr	r3, [pc, #288]	; (769c <system_clock_init+0x290>)
    757c:	4798      	blx	r3
    757e:	2350      	movs	r3, #80	; 0x50
    7580:	18fb      	adds	r3, r7, r3
    7582:	2207      	movs	r2, #7
    7584:	701a      	strb	r2, [r3, #0]
    7586:	2350      	movs	r3, #80	; 0x50
    7588:	18fb      	adds	r3, r7, r3
    758a:	2201      	movs	r2, #1
    758c:	605a      	str	r2, [r3, #4]
    758e:	2350      	movs	r3, #80	; 0x50
    7590:	18fb      	adds	r3, r7, r3
    7592:	2200      	movs	r2, #0
    7594:	721a      	strb	r2, [r3, #8]
    7596:	2350      	movs	r3, #80	; 0x50
    7598:	18fb      	adds	r3, r7, r3
    759a:	2200      	movs	r2, #0
    759c:	725a      	strb	r2, [r3, #9]
    759e:	2350      	movs	r3, #80	; 0x50
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	0019      	movs	r1, r3
    75a4:	2003      	movs	r0, #3
    75a6:	4b3e      	ldr	r3, [pc, #248]	; (76a0 <system_clock_init+0x294>)
    75a8:	4798      	blx	r3
    75aa:	2003      	movs	r0, #3
    75ac:	4b3d      	ldr	r3, [pc, #244]	; (76a4 <system_clock_init+0x298>)
    75ae:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    75b0:	2310      	movs	r3, #16
    75b2:	18fb      	adds	r3, r7, r3
    75b4:	0018      	movs	r0, r3
    75b6:	4b3c      	ldr	r3, [pc, #240]	; (76a8 <system_clock_init+0x29c>)
    75b8:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    75ba:	2310      	movs	r3, #16
    75bc:	18fb      	adds	r3, r7, r3
    75be:	2201      	movs	r2, #1
    75c0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    75c2:	2310      	movs	r3, #16
    75c4:	18fb      	adds	r3, r7, r3
    75c6:	0019      	movs	r1, r3
    75c8:	2000      	movs	r0, #0
    75ca:	4b38      	ldr	r3, [pc, #224]	; (76ac <system_clock_init+0x2a0>)
    75cc:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    75ce:	2000      	movs	r0, #0
    75d0:	4b37      	ldr	r3, [pc, #220]	; (76b0 <system_clock_init+0x2a4>)
    75d2:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    75d4:	2007      	movs	r0, #7
    75d6:	4b28      	ldr	r3, [pc, #160]	; (7678 <system_clock_init+0x26c>)
    75d8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    75da:	46c0      	nop			; (mov r8, r8)
    75dc:	2007      	movs	r0, #7
    75de:	4b27      	ldr	r3, [pc, #156]	; (767c <system_clock_init+0x270>)
    75e0:	4798      	blx	r3
    75e2:	0003      	movs	r3, r0
    75e4:	001a      	movs	r2, r3
    75e6:	2301      	movs	r3, #1
    75e8:	4053      	eors	r3, r2
    75ea:	b2db      	uxtb	r3, r3
    75ec:	2b00      	cmp	r3, #0
    75ee:	d1f5      	bne.n	75dc <system_clock_init+0x1d0>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    75f0:	2000      	movs	r0, #0
    75f2:	4b30      	ldr	r3, [pc, #192]	; (76b4 <system_clock_init+0x2a8>)
    75f4:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    75f6:	2000      	movs	r0, #0
    75f8:	4b2f      	ldr	r3, [pc, #188]	; (76b8 <system_clock_init+0x2ac>)
    75fa:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    75fc:	2000      	movs	r0, #0
    75fe:	4b2f      	ldr	r3, [pc, #188]	; (76bc <system_clock_init+0x2b0>)
    7600:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    7602:	2000      	movs	r0, #0
    7604:	4b2e      	ldr	r3, [pc, #184]	; (76c0 <system_clock_init+0x2b4>)
    7606:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7608:	1d3b      	adds	r3, r7, #4
    760a:	0018      	movs	r0, r3
    760c:	4b23      	ldr	r3, [pc, #140]	; (769c <system_clock_init+0x290>)
    760e:	4798      	blx	r3
    7610:	1d3b      	adds	r3, r7, #4
    7612:	2207      	movs	r2, #7
    7614:	701a      	strb	r2, [r3, #0]
    7616:	1d3b      	adds	r3, r7, #4
    7618:	2201      	movs	r2, #1
    761a:	605a      	str	r2, [r3, #4]
    761c:	1d3b      	adds	r3, r7, #4
    761e:	2200      	movs	r2, #0
    7620:	721a      	strb	r2, [r3, #8]
    7622:	1d3b      	adds	r3, r7, #4
    7624:	2200      	movs	r2, #0
    7626:	725a      	strb	r2, [r3, #9]
    7628:	1d3b      	adds	r3, r7, #4
    762a:	0019      	movs	r1, r3
    762c:	2000      	movs	r0, #0
    762e:	4b1c      	ldr	r3, [pc, #112]	; (76a0 <system_clock_init+0x294>)
    7630:	4798      	blx	r3
    7632:	2000      	movs	r0, #0
    7634:	4b1b      	ldr	r3, [pc, #108]	; (76a4 <system_clock_init+0x298>)
    7636:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    7638:	4b22      	ldr	r3, [pc, #136]	; (76c4 <system_clock_init+0x2b8>)
    763a:	4798      	blx	r3
    763c:	0003      	movs	r3, r0
    763e:	22a0      	movs	r2, #160	; 0xa0
    7640:	18ba      	adds	r2, r7, r2
    7642:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
    7644:	23a0      	movs	r3, #160	; 0xa0
    7646:	18fb      	adds	r3, r7, r3
    7648:	681b      	ldr	r3, [r3, #0]
    764a:	4a1f      	ldr	r2, [pc, #124]	; (76c8 <system_clock_init+0x2bc>)
    764c:	4293      	cmp	r3, r2
    764e:	d802      	bhi.n	7656 <system_clock_init+0x24a>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    7650:	2000      	movs	r0, #0
    7652:	4b06      	ldr	r3, [pc, #24]	; (766c <system_clock_init+0x260>)
    7654:	4798      	blx	r3
	}
}
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	46bd      	mov	sp, r7
    765a:	b02a      	add	sp, #168	; 0xa8
    765c:	bd80      	pop	{r7, pc}
    765e:	46c0      	nop			; (mov r8, r8)
    7660:	40000c00 	.word	0x40000c00
    7664:	40001400 	.word	0x40001400
    7668:	00006d1d 	.word	0x00006d1d
    766c:	00006d51 	.word	0x00006d51
    7670:	00006ba5 	.word	0x00006ba5
    7674:	00006ffd 	.word	0x00006ffd
    7678:	000071d1 	.word	0x000071d1
    767c:	0000733d 	.word	0x0000733d
    7680:	40001000 	.word	0x40001000
    7684:	00006db9 	.word	0x00006db9
    7688:	00006c09 	.word	0x00006c09
    768c:	00806020 	.word	0x00806020
    7690:	000005b9 	.word	0x000005b9
    7694:	000070f9 	.word	0x000070f9
    7698:	000077ad 	.word	0x000077ad
    769c:	00006b61 	.word	0x00006b61
    76a0:	000077dd 	.word	0x000077dd
    76a4:	000078ed 	.word	0x000078ed
    76a8:	00006b8f 	.word	0x00006b8f
    76ac:	00007a09 	.word	0x00007a09
    76b0:	00007a49 	.word	0x00007a49
    76b4:	00006cc5 	.word	0x00006cc5
    76b8:	00006c9d 	.word	0x00006c9d
    76bc:	00006c75 	.word	0x00006c75
    76c0:	00006c61 	.word	0x00006c61
    76c4:	00006ced 	.word	0x00006ced
    76c8:	00b71b00 	.word	0x00b71b00

000076cc <system_apb_clock_set_mask>:
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	af00      	add	r7, sp, #0
    76d2:	0002      	movs	r2, r0
    76d4:	6039      	str	r1, [r7, #0]
    76d6:	1dfb      	adds	r3, r7, #7
    76d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    76da:	1dfb      	adds	r3, r7, #7
    76dc:	781b      	ldrb	r3, [r3, #0]
    76de:	2b04      	cmp	r3, #4
    76e0:	d827      	bhi.n	7732 <system_apb_clock_set_mask+0x66>
    76e2:	009a      	lsls	r2, r3, #2
    76e4:	4b16      	ldr	r3, [pc, #88]	; (7740 <system_apb_clock_set_mask+0x74>)
    76e6:	18d3      	adds	r3, r2, r3
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    76ec:	4b15      	ldr	r3, [pc, #84]	; (7744 <system_apb_clock_set_mask+0x78>)
    76ee:	4a15      	ldr	r2, [pc, #84]	; (7744 <system_apb_clock_set_mask+0x78>)
    76f0:	6951      	ldr	r1, [r2, #20]
    76f2:	683a      	ldr	r2, [r7, #0]
    76f4:	430a      	orrs	r2, r1
    76f6:	615a      	str	r2, [r3, #20]
			break;
    76f8:	e01d      	b.n	7736 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    76fa:	4b12      	ldr	r3, [pc, #72]	; (7744 <system_apb_clock_set_mask+0x78>)
    76fc:	4a11      	ldr	r2, [pc, #68]	; (7744 <system_apb_clock_set_mask+0x78>)
    76fe:	6991      	ldr	r1, [r2, #24]
    7700:	683a      	ldr	r2, [r7, #0]
    7702:	430a      	orrs	r2, r1
    7704:	619a      	str	r2, [r3, #24]
			break;
    7706:	e016      	b.n	7736 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    7708:	4b0e      	ldr	r3, [pc, #56]	; (7744 <system_apb_clock_set_mask+0x78>)
    770a:	4a0e      	ldr	r2, [pc, #56]	; (7744 <system_apb_clock_set_mask+0x78>)
    770c:	69d1      	ldr	r1, [r2, #28]
    770e:	683a      	ldr	r2, [r7, #0]
    7710:	430a      	orrs	r2, r1
    7712:	61da      	str	r2, [r3, #28]
			break;
    7714:	e00f      	b.n	7736 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    7716:	4b0b      	ldr	r3, [pc, #44]	; (7744 <system_apb_clock_set_mask+0x78>)
    7718:	4a0a      	ldr	r2, [pc, #40]	; (7744 <system_apb_clock_set_mask+0x78>)
    771a:	6a11      	ldr	r1, [r2, #32]
    771c:	683a      	ldr	r2, [r7, #0]
    771e:	430a      	orrs	r2, r1
    7720:	621a      	str	r2, [r3, #32]
			break;
    7722:	e008      	b.n	7736 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    7724:	4b07      	ldr	r3, [pc, #28]	; (7744 <system_apb_clock_set_mask+0x78>)
    7726:	4a07      	ldr	r2, [pc, #28]	; (7744 <system_apb_clock_set_mask+0x78>)
    7728:	6a51      	ldr	r1, [r2, #36]	; 0x24
    772a:	683a      	ldr	r2, [r7, #0]
    772c:	430a      	orrs	r2, r1
    772e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    7730:	e001      	b.n	7736 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    7732:	2317      	movs	r3, #23
    7734:	e000      	b.n	7738 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    7736:	2300      	movs	r3, #0
}
    7738:	0018      	movs	r0, r3
    773a:	46bd      	mov	sp, r7
    773c:	b002      	add	sp, #8
    773e:	bd80      	pop	{r7, pc}
    7740:	0000b414 	.word	0x0000b414
    7744:	40000400 	.word	0x40000400

00007748 <system_interrupt_enter_critical_section>:
{
    7748:	b580      	push	{r7, lr}
    774a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    774c:	4b02      	ldr	r3, [pc, #8]	; (7758 <system_interrupt_enter_critical_section+0x10>)
    774e:	4798      	blx	r3
}
    7750:	46c0      	nop			; (mov r8, r8)
    7752:	46bd      	mov	sp, r7
    7754:	bd80      	pop	{r7, pc}
    7756:	46c0      	nop			; (mov r8, r8)
    7758:	00006acd 	.word	0x00006acd

0000775c <system_interrupt_leave_critical_section>:
{
    775c:	b580      	push	{r7, lr}
    775e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7760:	4b02      	ldr	r3, [pc, #8]	; (776c <system_interrupt_leave_critical_section+0x10>)
    7762:	4798      	blx	r3
}
    7764:	46c0      	nop			; (mov r8, r8)
    7766:	46bd      	mov	sp, r7
    7768:	bd80      	pop	{r7, pc}
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	00006b21 	.word	0x00006b21

00007770 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    7770:	b580      	push	{r7, lr}
    7772:	b082      	sub	sp, #8
    7774:	af00      	add	r7, sp, #0
    7776:	0002      	movs	r2, r0
    7778:	1dfb      	adds	r3, r7, #7
    777a:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    777c:	4b09      	ldr	r3, [pc, #36]	; (77a4 <system_gclk_is_syncing+0x34>)
    777e:	685b      	ldr	r3, [r3, #4]
    7780:	1dfa      	adds	r2, r7, #7
    7782:	7812      	ldrb	r2, [r2, #0]
    7784:	2101      	movs	r1, #1
    7786:	4091      	lsls	r1, r2
    7788:	000a      	movs	r2, r1
    778a:	0092      	lsls	r2, r2, #2
    778c:	4013      	ands	r3, r2
    778e:	4a06      	ldr	r2, [pc, #24]	; (77a8 <system_gclk_is_syncing+0x38>)
    7790:	4013      	ands	r3, r2
    7792:	d001      	beq.n	7798 <system_gclk_is_syncing+0x28>
		 return true;
    7794:	2301      	movs	r3, #1
    7796:	e000      	b.n	779a <system_gclk_is_syncing+0x2a>
	}

	 return false;
    7798:	2300      	movs	r3, #0
}
    779a:	0018      	movs	r0, r3
    779c:	46bd      	mov	sp, r7
    779e:	b002      	add	sp, #8
    77a0:	bd80      	pop	{r7, pc}
    77a2:	46c0      	nop			; (mov r8, r8)
    77a4:	40001800 	.word	0x40001800
    77a8:	000007fc 	.word	0x000007fc

000077ac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    77b0:	2140      	movs	r1, #64	; 0x40
    77b2:	2000      	movs	r0, #0
    77b4:	4b07      	ldr	r3, [pc, #28]	; (77d4 <system_gclk_init+0x28>)
    77b6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    77b8:	4b07      	ldr	r3, [pc, #28]	; (77d8 <system_gclk_init+0x2c>)
    77ba:	2201      	movs	r2, #1
    77bc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	4b05      	ldr	r3, [pc, #20]	; (77d8 <system_gclk_init+0x2c>)
    77c2:	781b      	ldrb	r3, [r3, #0]
    77c4:	b2db      	uxtb	r3, r3
    77c6:	001a      	movs	r2, r3
    77c8:	2301      	movs	r3, #1
    77ca:	4013      	ands	r3, r2
    77cc:	d1f8      	bne.n	77c0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	46bd      	mov	sp, r7
    77d2:	bd80      	pop	{r7, pc}
    77d4:	000076cd 	.word	0x000076cd
    77d8:	40001800 	.word	0x40001800

000077dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    77dc:	b580      	push	{r7, lr}
    77de:	b086      	sub	sp, #24
    77e0:	af00      	add	r7, sp, #0
    77e2:	0002      	movs	r2, r0
    77e4:	6039      	str	r1, [r7, #0]
    77e6:	1dfb      	adds	r3, r7, #7
    77e8:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    77ea:	683b      	ldr	r3, [r7, #0]
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    77f0:	683b      	ldr	r3, [r7, #0]
    77f2:	785b      	ldrb	r3, [r3, #1]
    77f4:	2b00      	cmp	r3, #0
    77f6:	d004      	beq.n	7802 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    77f8:	697b      	ldr	r3, [r7, #20]
    77fa:	2280      	movs	r2, #128	; 0x80
    77fc:	00d2      	lsls	r2, r2, #3
    77fe:	4313      	orrs	r3, r2
    7800:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7802:	683b      	ldr	r3, [r7, #0]
    7804:	7a5b      	ldrb	r3, [r3, #9]
    7806:	2b00      	cmp	r3, #0
    7808:	d004      	beq.n	7814 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    780a:	697b      	ldr	r3, [r7, #20]
    780c:	2280      	movs	r2, #128	; 0x80
    780e:	0112      	lsls	r2, r2, #4
    7810:	4313      	orrs	r3, r2
    7812:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7814:	683b      	ldr	r3, [r7, #0]
    7816:	685b      	ldr	r3, [r3, #4]
    7818:	2b01      	cmp	r3, #1
    781a:	d92c      	bls.n	7876 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    781c:	683b      	ldr	r3, [r7, #0]
    781e:	685a      	ldr	r2, [r3, #4]
    7820:	683b      	ldr	r3, [r7, #0]
    7822:	685b      	ldr	r3, [r3, #4]
    7824:	3b01      	subs	r3, #1
    7826:	4013      	ands	r3, r2
    7828:	d11a      	bne.n	7860 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    782a:	2300      	movs	r3, #0
    782c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    782e:	2302      	movs	r3, #2
    7830:	60fb      	str	r3, [r7, #12]
    7832:	e005      	b.n	7840 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    7834:	693b      	ldr	r3, [r7, #16]
    7836:	3301      	adds	r3, #1
    7838:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    783a:	68fb      	ldr	r3, [r7, #12]
    783c:	005b      	lsls	r3, r3, #1
    783e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    7840:	683b      	ldr	r3, [r7, #0]
    7842:	685a      	ldr	r2, [r3, #4]
    7844:	68fb      	ldr	r3, [r7, #12]
    7846:	429a      	cmp	r2, r3
    7848:	d8f4      	bhi.n	7834 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    784a:	693b      	ldr	r3, [r7, #16]
    784c:	041b      	lsls	r3, r3, #16
    784e:	697a      	ldr	r2, [r7, #20]
    7850:	4313      	orrs	r3, r2
    7852:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7854:	697b      	ldr	r3, [r7, #20]
    7856:	2280      	movs	r2, #128	; 0x80
    7858:	0152      	lsls	r2, r2, #5
    785a:	4313      	orrs	r3, r2
    785c:	617b      	str	r3, [r7, #20]
    785e:	e00a      	b.n	7876 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    7860:	683b      	ldr	r3, [r7, #0]
    7862:	685b      	ldr	r3, [r3, #4]
    7864:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    7866:	697a      	ldr	r2, [r7, #20]
    7868:	4313      	orrs	r3, r2
    786a:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    786c:	697b      	ldr	r3, [r7, #20]
    786e:	2280      	movs	r2, #128	; 0x80
    7870:	0092      	lsls	r2, r2, #2
    7872:	4313      	orrs	r3, r2
    7874:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7876:	683b      	ldr	r3, [r7, #0]
    7878:	7a1b      	ldrb	r3, [r3, #8]
    787a:	2b00      	cmp	r3, #0
    787c:	d004      	beq.n	7888 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    787e:	697b      	ldr	r3, [r7, #20]
    7880:	2280      	movs	r2, #128	; 0x80
    7882:	0192      	lsls	r2, r2, #6
    7884:	4313      	orrs	r3, r2
    7886:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    7888:	46c0      	nop			; (mov r8, r8)
    788a:	1dfb      	adds	r3, r7, #7
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	0018      	movs	r0, r3
    7890:	4b12      	ldr	r3, [pc, #72]	; (78dc <system_gclk_gen_set_config+0x100>)
    7892:	4798      	blx	r3
    7894:	1e03      	subs	r3, r0, #0
    7896:	d1f8      	bne.n	788a <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7898:	4b11      	ldr	r3, [pc, #68]	; (78e0 <system_gclk_gen_set_config+0x104>)
    789a:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    789c:	4811      	ldr	r0, [pc, #68]	; (78e4 <system_gclk_gen_set_config+0x108>)
    789e:	1dfb      	adds	r3, r7, #7
    78a0:	781b      	ldrb	r3, [r3, #0]
    78a2:	4910      	ldr	r1, [pc, #64]	; (78e4 <system_gclk_gen_set_config+0x108>)
    78a4:	1dfa      	adds	r2, r7, #7
    78a6:	7812      	ldrb	r2, [r2, #0]
    78a8:	3208      	adds	r2, #8
    78aa:	0092      	lsls	r2, r2, #2
    78ac:	5851      	ldr	r1, [r2, r1]
    78ae:	2280      	movs	r2, #128	; 0x80
    78b0:	0052      	lsls	r2, r2, #1
    78b2:	4011      	ands	r1, r2
    78b4:	697a      	ldr	r2, [r7, #20]
    78b6:	430a      	orrs	r2, r1
    78b8:	3308      	adds	r3, #8
    78ba:	009b      	lsls	r3, r3, #2
    78bc:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    78be:	46c0      	nop			; (mov r8, r8)
    78c0:	1dfb      	adds	r3, r7, #7
    78c2:	781b      	ldrb	r3, [r3, #0]
    78c4:	0018      	movs	r0, r3
    78c6:	4b05      	ldr	r3, [pc, #20]	; (78dc <system_gclk_gen_set_config+0x100>)
    78c8:	4798      	blx	r3
    78ca:	1e03      	subs	r3, r0, #0
    78cc:	d1f8      	bne.n	78c0 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    78ce:	4b06      	ldr	r3, [pc, #24]	; (78e8 <system_gclk_gen_set_config+0x10c>)
    78d0:	4798      	blx	r3
}
    78d2:	46c0      	nop			; (mov r8, r8)
    78d4:	46bd      	mov	sp, r7
    78d6:	b006      	add	sp, #24
    78d8:	bd80      	pop	{r7, pc}
    78da:	46c0      	nop			; (mov r8, r8)
    78dc:	00007771 	.word	0x00007771
    78e0:	00007749 	.word	0x00007749
    78e4:	40001800 	.word	0x40001800
    78e8:	0000775d 	.word	0x0000775d

000078ec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    78ec:	b580      	push	{r7, lr}
    78ee:	b082      	sub	sp, #8
    78f0:	af00      	add	r7, sp, #0
    78f2:	0002      	movs	r2, r0
    78f4:	1dfb      	adds	r3, r7, #7
    78f6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    78f8:	46c0      	nop			; (mov r8, r8)
    78fa:	1dfb      	adds	r3, r7, #7
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	0018      	movs	r0, r3
    7900:	4b0d      	ldr	r3, [pc, #52]	; (7938 <system_gclk_gen_enable+0x4c>)
    7902:	4798      	blx	r3
    7904:	1e03      	subs	r3, r0, #0
    7906:	d1f8      	bne.n	78fa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7908:	4b0c      	ldr	r3, [pc, #48]	; (793c <system_gclk_gen_enable+0x50>)
    790a:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    790c:	480c      	ldr	r0, [pc, #48]	; (7940 <system_gclk_gen_enable+0x54>)
    790e:	1dfb      	adds	r3, r7, #7
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	490b      	ldr	r1, [pc, #44]	; (7940 <system_gclk_gen_enable+0x54>)
    7914:	1dfa      	adds	r2, r7, #7
    7916:	7812      	ldrb	r2, [r2, #0]
    7918:	3208      	adds	r2, #8
    791a:	0092      	lsls	r2, r2, #2
    791c:	5852      	ldr	r2, [r2, r1]
    791e:	2180      	movs	r1, #128	; 0x80
    7920:	0049      	lsls	r1, r1, #1
    7922:	430a      	orrs	r2, r1
    7924:	3308      	adds	r3, #8
    7926:	009b      	lsls	r3, r3, #2
    7928:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    792a:	4b06      	ldr	r3, [pc, #24]	; (7944 <system_gclk_gen_enable+0x58>)
    792c:	4798      	blx	r3
}
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	46bd      	mov	sp, r7
    7932:	b002      	add	sp, #8
    7934:	bd80      	pop	{r7, pc}
    7936:	46c0      	nop			; (mov r8, r8)
    7938:	00007771 	.word	0x00007771
    793c:	00007749 	.word	0x00007749
    7940:	40001800 	.word	0x40001800
    7944:	0000775d 	.word	0x0000775d

00007948 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7948:	b580      	push	{r7, lr}
    794a:	b086      	sub	sp, #24
    794c:	af00      	add	r7, sp, #0
    794e:	0002      	movs	r2, r0
    7950:	1dfb      	adds	r3, r7, #7
    7952:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    7954:	46c0      	nop			; (mov r8, r8)
    7956:	1dfb      	adds	r3, r7, #7
    7958:	781b      	ldrb	r3, [r3, #0]
    795a:	0018      	movs	r0, r3
    795c:	4b24      	ldr	r3, [pc, #144]	; (79f0 <system_gclk_gen_get_hz+0xa8>)
    795e:	4798      	blx	r3
    7960:	1e03      	subs	r3, r0, #0
    7962:	d1f8      	bne.n	7956 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7964:	4b23      	ldr	r3, [pc, #140]	; (79f4 <system_gclk_gen_get_hz+0xac>)
    7966:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    7968:	4a23      	ldr	r2, [pc, #140]	; (79f8 <system_gclk_gen_get_hz+0xb0>)
    796a:	1dfb      	adds	r3, r7, #7
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	3308      	adds	r3, #8
    7970:	009b      	lsls	r3, r3, #2
    7972:	589b      	ldr	r3, [r3, r2]
    7974:	071b      	lsls	r3, r3, #28
    7976:	0f1b      	lsrs	r3, r3, #28
    7978:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    797a:	0018      	movs	r0, r3
    797c:	4b1f      	ldr	r3, [pc, #124]	; (79fc <system_gclk_gen_get_hz+0xb4>)
    797e:	4798      	blx	r3
    7980:	0003      	movs	r3, r0
    7982:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    7984:	4a1c      	ldr	r2, [pc, #112]	; (79f8 <system_gclk_gen_get_hz+0xb0>)
    7986:	1dfb      	adds	r3, r7, #7
    7988:	781b      	ldrb	r3, [r3, #0]
    798a:	3308      	adds	r3, #8
    798c:	009b      	lsls	r3, r3, #2
    798e:	589b      	ldr	r3, [r3, r2]
    7990:	04db      	lsls	r3, r3, #19
    7992:	0fdb      	lsrs	r3, r3, #31
    7994:	b2da      	uxtb	r2, r3
    7996:	2313      	movs	r3, #19
    7998:	18fb      	adds	r3, r7, r3
    799a:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    799c:	4a16      	ldr	r2, [pc, #88]	; (79f8 <system_gclk_gen_get_hz+0xb0>)
    799e:	1dfb      	adds	r3, r7, #7
    79a0:	781b      	ldrb	r3, [r3, #0]
    79a2:	3308      	adds	r3, #8
    79a4:	009b      	lsls	r3, r3, #2
    79a6:	589b      	ldr	r3, [r3, r2]
    79a8:	0c1b      	lsrs	r3, r3, #16
    79aa:	b29b      	uxth	r3, r3
    79ac:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    79ae:	4b14      	ldr	r3, [pc, #80]	; (7a00 <system_gclk_gen_get_hz+0xb8>)
    79b0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    79b2:	2313      	movs	r3, #19
    79b4:	18fb      	adds	r3, r7, r3
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	2b00      	cmp	r3, #0
    79ba:	d109      	bne.n	79d0 <system_gclk_gen_get_hz+0x88>
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	2b01      	cmp	r3, #1
    79c0:	d906      	bls.n	79d0 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    79c2:	4b10      	ldr	r3, [pc, #64]	; (7a04 <system_gclk_gen_get_hz+0xbc>)
    79c4:	68f9      	ldr	r1, [r7, #12]
    79c6:	6978      	ldr	r0, [r7, #20]
    79c8:	4798      	blx	r3
    79ca:	0003      	movs	r3, r0
    79cc:	617b      	str	r3, [r7, #20]
    79ce:	e00a      	b.n	79e6 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    79d0:	2313      	movs	r3, #19
    79d2:	18fb      	adds	r3, r7, r3
    79d4:	781b      	ldrb	r3, [r3, #0]
    79d6:	2b00      	cmp	r3, #0
    79d8:	d005      	beq.n	79e6 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    79da:	68fb      	ldr	r3, [r7, #12]
    79dc:	3301      	adds	r3, #1
    79de:	697a      	ldr	r2, [r7, #20]
    79e0:	40da      	lsrs	r2, r3
    79e2:	0013      	movs	r3, r2
    79e4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    79e6:	697b      	ldr	r3, [r7, #20]
}
    79e8:	0018      	movs	r0, r3
    79ea:	46bd      	mov	sp, r7
    79ec:	b006      	add	sp, #24
    79ee:	bd80      	pop	{r7, pc}
    79f0:	00007771 	.word	0x00007771
    79f4:	00007749 	.word	0x00007749
    79f8:	40001800 	.word	0x40001800
    79fc:	00006ebd 	.word	0x00006ebd
    7a00:	0000775d 	.word	0x0000775d
    7a04:	00008259 	.word	0x00008259

00007a08 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7a08:	b580      	push	{r7, lr}
    7a0a:	b082      	sub	sp, #8
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	0002      	movs	r2, r0
    7a10:	6039      	str	r1, [r7, #0]
    7a12:	1dfb      	adds	r3, r7, #7
    7a14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7a16:	1dfb      	adds	r3, r7, #7
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	0018      	movs	r0, r3
    7a1c:	4b08      	ldr	r3, [pc, #32]	; (7a40 <system_gclk_chan_set_config+0x38>)
    7a1e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    7a20:	4908      	ldr	r1, [pc, #32]	; (7a44 <system_gclk_chan_set_config+0x3c>)
    7a22:	1dfb      	adds	r3, r7, #7
    7a24:	781b      	ldrb	r3, [r3, #0]
    7a26:	683a      	ldr	r2, [r7, #0]
    7a28:	7812      	ldrb	r2, [r2, #0]
    7a2a:	0010      	movs	r0, r2
    7a2c:	220f      	movs	r2, #15
    7a2e:	4002      	ands	r2, r0
    7a30:	3320      	adds	r3, #32
    7a32:	009b      	lsls	r3, r3, #2
    7a34:	505a      	str	r2, [r3, r1]


}
    7a36:	46c0      	nop			; (mov r8, r8)
    7a38:	46bd      	mov	sp, r7
    7a3a:	b002      	add	sp, #8
    7a3c:	bd80      	pop	{r7, pc}
    7a3e:	46c0      	nop			; (mov r8, r8)
    7a40:	00007aa1 	.word	0x00007aa1
    7a44:	40001800 	.word	0x40001800

00007a48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	b082      	sub	sp, #8
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	0002      	movs	r2, r0
    7a50:	1dfb      	adds	r3, r7, #7
    7a52:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7a54:	4b0f      	ldr	r3, [pc, #60]	; (7a94 <system_gclk_chan_enable+0x4c>)
    7a56:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7a58:	490f      	ldr	r1, [pc, #60]	; (7a98 <system_gclk_chan_enable+0x50>)
    7a5a:	1dfb      	adds	r3, r7, #7
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	480e      	ldr	r0, [pc, #56]	; (7a98 <system_gclk_chan_enable+0x50>)
    7a60:	1dfa      	adds	r2, r7, #7
    7a62:	7812      	ldrb	r2, [r2, #0]
    7a64:	3220      	adds	r2, #32
    7a66:	0092      	lsls	r2, r2, #2
    7a68:	5812      	ldr	r2, [r2, r0]
    7a6a:	2040      	movs	r0, #64	; 0x40
    7a6c:	4302      	orrs	r2, r0
    7a6e:	3320      	adds	r3, #32
    7a70:	009b      	lsls	r3, r3, #2
    7a72:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    7a74:	46c0      	nop			; (mov r8, r8)
    7a76:	4a08      	ldr	r2, [pc, #32]	; (7a98 <system_gclk_chan_enable+0x50>)
    7a78:	1dfb      	adds	r3, r7, #7
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	3320      	adds	r3, #32
    7a7e:	009b      	lsls	r3, r3, #2
    7a80:	589b      	ldr	r3, [r3, r2]
    7a82:	2240      	movs	r2, #64	; 0x40
    7a84:	4013      	ands	r3, r2
    7a86:	d0f6      	beq.n	7a76 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    7a88:	4b04      	ldr	r3, [pc, #16]	; (7a9c <system_gclk_chan_enable+0x54>)
    7a8a:	4798      	blx	r3
}
    7a8c:	46c0      	nop			; (mov r8, r8)
    7a8e:	46bd      	mov	sp, r7
    7a90:	b002      	add	sp, #8
    7a92:	bd80      	pop	{r7, pc}
    7a94:	00007749 	.word	0x00007749
    7a98:	40001800 	.word	0x40001800
    7a9c:	0000775d 	.word	0x0000775d

00007aa0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7aa0:	b580      	push	{r7, lr}
    7aa2:	b082      	sub	sp, #8
    7aa4:	af00      	add	r7, sp, #0
    7aa6:	0002      	movs	r2, r0
    7aa8:	1dfb      	adds	r3, r7, #7
    7aaa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7aac:	4b0f      	ldr	r3, [pc, #60]	; (7aec <system_gclk_chan_disable+0x4c>)
    7aae:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7ab0:	490f      	ldr	r1, [pc, #60]	; (7af0 <system_gclk_chan_disable+0x50>)
    7ab2:	1dfb      	adds	r3, r7, #7
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	480e      	ldr	r0, [pc, #56]	; (7af0 <system_gclk_chan_disable+0x50>)
    7ab8:	1dfa      	adds	r2, r7, #7
    7aba:	7812      	ldrb	r2, [r2, #0]
    7abc:	3220      	adds	r2, #32
    7abe:	0092      	lsls	r2, r2, #2
    7ac0:	5812      	ldr	r2, [r2, r0]
    7ac2:	2040      	movs	r0, #64	; 0x40
    7ac4:	4382      	bics	r2, r0
    7ac6:	3320      	adds	r3, #32
    7ac8:	009b      	lsls	r3, r3, #2
    7aca:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7acc:	46c0      	nop			; (mov r8, r8)
    7ace:	4a08      	ldr	r2, [pc, #32]	; (7af0 <system_gclk_chan_disable+0x50>)
    7ad0:	1dfb      	adds	r3, r7, #7
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	3320      	adds	r3, #32
    7ad6:	009b      	lsls	r3, r3, #2
    7ad8:	589b      	ldr	r3, [r3, r2]
    7ada:	2240      	movs	r2, #64	; 0x40
    7adc:	4013      	ands	r3, r2
    7ade:	d1f6      	bne.n	7ace <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    7ae0:	4b04      	ldr	r3, [pc, #16]	; (7af4 <system_gclk_chan_disable+0x54>)
    7ae2:	4798      	blx	r3
}
    7ae4:	46c0      	nop			; (mov r8, r8)
    7ae6:	46bd      	mov	sp, r7
    7ae8:	b002      	add	sp, #8
    7aea:	bd80      	pop	{r7, pc}
    7aec:	00007749 	.word	0x00007749
    7af0:	40001800 	.word	0x40001800
    7af4:	0000775d 	.word	0x0000775d

00007af8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b084      	sub	sp, #16
    7afc:	af00      	add	r7, sp, #0
    7afe:	0002      	movs	r2, r0
    7b00:	1dfb      	adds	r3, r7, #7
    7b02:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7b04:	4b0d      	ldr	r3, [pc, #52]	; (7b3c <system_gclk_chan_get_hz+0x44>)
    7b06:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    7b08:	4a0d      	ldr	r2, [pc, #52]	; (7b40 <system_gclk_chan_get_hz+0x48>)
    7b0a:	1dfb      	adds	r3, r7, #7
    7b0c:	781b      	ldrb	r3, [r3, #0]
    7b0e:	3320      	adds	r3, #32
    7b10:	009b      	lsls	r3, r3, #2
    7b12:	589b      	ldr	r3, [r3, r2]
    7b14:	071b      	lsls	r3, r3, #28
    7b16:	0f1b      	lsrs	r3, r3, #28
    7b18:	b2da      	uxtb	r2, r3
    7b1a:	230f      	movs	r3, #15
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    7b20:	4b08      	ldr	r3, [pc, #32]	; (7b44 <system_gclk_chan_get_hz+0x4c>)
    7b22:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7b24:	230f      	movs	r3, #15
    7b26:	18fb      	adds	r3, r7, r3
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	0018      	movs	r0, r3
    7b2c:	4b06      	ldr	r3, [pc, #24]	; (7b48 <system_gclk_chan_get_hz+0x50>)
    7b2e:	4798      	blx	r3
    7b30:	0003      	movs	r3, r0
}
    7b32:	0018      	movs	r0, r3
    7b34:	46bd      	mov	sp, r7
    7b36:	b004      	add	sp, #16
    7b38:	bd80      	pop	{r7, pc}
    7b3a:	46c0      	nop			; (mov r8, r8)
    7b3c:	00007749 	.word	0x00007749
    7b40:	40001800 	.word	0x40001800
    7b44:	0000775d 	.word	0x0000775d
    7b48:	00007949 	.word	0x00007949

00007b4c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b084      	sub	sp, #16
    7b50:	af00      	add	r7, sp, #0
    7b52:	0002      	movs	r2, r0
    7b54:	1dfb      	adds	r3, r7, #7
    7b56:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
    7b58:	230f      	movs	r3, #15
    7b5a:	18fb      	adds	r3, r7, r3
    7b5c:	2200      	movs	r2, #0
    7b5e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    7b60:	1dfb      	adds	r3, r7, #7
    7b62:	781b      	ldrb	r3, [r3, #0]
    7b64:	2b7f      	cmp	r3, #127	; 0x7f
    7b66:	d80b      	bhi.n	7b80 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
    7b68:	4a13      	ldr	r2, [pc, #76]	; (7bb8 <system_interrupt_clear_pending+0x6c>)
    7b6a:	1dfb      	adds	r3, r7, #7
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	b25b      	sxtb	r3, r3
    7b70:	2101      	movs	r1, #1
    7b72:	4099      	lsls	r1, r3
    7b74:	000b      	movs	r3, r1
    7b76:	0019      	movs	r1, r3
    7b78:	23c0      	movs	r3, #192	; 0xc0
    7b7a:	005b      	lsls	r3, r3, #1
    7b7c:	50d1      	str	r1, [r2, r3]
    7b7e:	e014      	b.n	7baa <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
    7b80:	1dfb      	adds	r3, r7, #7
    7b82:	781b      	ldrb	r3, [r3, #0]
    7b84:	b25b      	sxtb	r3, r3
    7b86:	330e      	adds	r3, #14
    7b88:	d101      	bne.n	7b8e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
    7b8a:	2317      	movs	r3, #23
    7b8c:	e010      	b.n	7bb0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    7b8e:	1dfb      	adds	r3, r7, #7
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	b25b      	sxtb	r3, r3
    7b94:	3301      	adds	r3, #1
    7b96:	d104      	bne.n	7ba2 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    7b98:	4b08      	ldr	r3, [pc, #32]	; (7bbc <system_interrupt_clear_pending+0x70>)
    7b9a:	2280      	movs	r2, #128	; 0x80
    7b9c:	0492      	lsls	r2, r2, #18
    7b9e:	605a      	str	r2, [r3, #4]
    7ba0:	e003      	b.n	7baa <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    7ba2:	230f      	movs	r3, #15
    7ba4:	18fb      	adds	r3, r7, r3
    7ba6:	2217      	movs	r2, #23
    7ba8:	701a      	strb	r2, [r3, #0]
	}

	return status;
    7baa:	230f      	movs	r3, #15
    7bac:	18fb      	adds	r3, r7, r3
    7bae:	781b      	ldrb	r3, [r3, #0]
}
    7bb0:	0018      	movs	r0, r3
    7bb2:	46bd      	mov	sp, r7
    7bb4:	b004      	add	sp, #16
    7bb6:	bd80      	pop	{r7, pc}
    7bb8:	e000e100 	.word	0xe000e100
    7bbc:	e000ed00 	.word	0xe000ed00

00007bc0 <system_pinmux_get_group_from_gpio_pin>:
{
    7bc0:	b580      	push	{r7, lr}
    7bc2:	b084      	sub	sp, #16
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	0002      	movs	r2, r0
    7bc8:	1dfb      	adds	r3, r7, #7
    7bca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7bcc:	230f      	movs	r3, #15
    7bce:	18fb      	adds	r3, r7, r3
    7bd0:	1dfa      	adds	r2, r7, #7
    7bd2:	7812      	ldrb	r2, [r2, #0]
    7bd4:	09d2      	lsrs	r2, r2, #7
    7bd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7bd8:	230e      	movs	r3, #14
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	1dfa      	adds	r2, r7, #7
    7bde:	7812      	ldrb	r2, [r2, #0]
    7be0:	0952      	lsrs	r2, r2, #5
    7be2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7be4:	4b0d      	ldr	r3, [pc, #52]	; (7c1c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7be6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7be8:	230f      	movs	r3, #15
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d10f      	bne.n	7c12 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7bf2:	230f      	movs	r3, #15
    7bf4:	18fb      	adds	r3, r7, r3
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	009b      	lsls	r3, r3, #2
    7bfa:	2210      	movs	r2, #16
    7bfc:	4694      	mov	ip, r2
    7bfe:	44bc      	add	ip, r7
    7c00:	4463      	add	r3, ip
    7c02:	3b08      	subs	r3, #8
    7c04:	681a      	ldr	r2, [r3, #0]
    7c06:	230e      	movs	r3, #14
    7c08:	18fb      	adds	r3, r7, r3
    7c0a:	781b      	ldrb	r3, [r3, #0]
    7c0c:	01db      	lsls	r3, r3, #7
    7c0e:	18d3      	adds	r3, r2, r3
    7c10:	e000      	b.n	7c14 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    7c12:	2300      	movs	r3, #0
}
    7c14:	0018      	movs	r0, r3
    7c16:	46bd      	mov	sp, r7
    7c18:	b004      	add	sp, #16
    7c1a:	bd80      	pop	{r7, pc}
    7c1c:	40002800 	.word	0x40002800

00007c20 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7c20:	b580      	push	{r7, lr}
    7c22:	b088      	sub	sp, #32
    7c24:	af00      	add	r7, sp, #0
    7c26:	60f8      	str	r0, [r7, #12]
    7c28:	60b9      	str	r1, [r7, #8]
    7c2a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7c2c:	2300      	movs	r3, #0
    7c2e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	78db      	ldrb	r3, [r3, #3]
    7c34:	2201      	movs	r2, #1
    7c36:	4053      	eors	r3, r2
    7c38:	b2db      	uxtb	r3, r3
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	d035      	beq.n	7caa <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	781b      	ldrb	r3, [r3, #0]
    7c42:	2b80      	cmp	r3, #128	; 0x80
    7c44:	d00b      	beq.n	7c5e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7c46:	69fb      	ldr	r3, [r7, #28]
    7c48:	2280      	movs	r2, #128	; 0x80
    7c4a:	0252      	lsls	r2, r2, #9
    7c4c:	4313      	orrs	r3, r2
    7c4e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7c50:	687b      	ldr	r3, [r7, #4]
    7c52:	781b      	ldrb	r3, [r3, #0]
    7c54:	061b      	lsls	r3, r3, #24
    7c56:	001a      	movs	r2, r3
    7c58:	69fb      	ldr	r3, [r7, #28]
    7c5a:	4313      	orrs	r3, r2
    7c5c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	785b      	ldrb	r3, [r3, #1]
    7c62:	2b00      	cmp	r3, #0
    7c64:	d003      	beq.n	7c6e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7c66:	687b      	ldr	r3, [r7, #4]
    7c68:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7c6a:	2b02      	cmp	r3, #2
    7c6c:	d110      	bne.n	7c90 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7c6e:	69fb      	ldr	r3, [r7, #28]
    7c70:	2280      	movs	r2, #128	; 0x80
    7c72:	0292      	lsls	r2, r2, #10
    7c74:	4313      	orrs	r3, r2
    7c76:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7c78:	687b      	ldr	r3, [r7, #4]
    7c7a:	789b      	ldrb	r3, [r3, #2]
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	d004      	beq.n	7c8a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7c80:	69fb      	ldr	r3, [r7, #28]
    7c82:	2280      	movs	r2, #128	; 0x80
    7c84:	02d2      	lsls	r2, r2, #11
    7c86:	4313      	orrs	r3, r2
    7c88:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7c8a:	68fb      	ldr	r3, [r7, #12]
    7c8c:	68ba      	ldr	r2, [r7, #8]
    7c8e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	785b      	ldrb	r3, [r3, #1]
    7c94:	2b01      	cmp	r3, #1
    7c96:	d003      	beq.n	7ca0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7c98:	687b      	ldr	r3, [r7, #4]
    7c9a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7c9c:	2b02      	cmp	r3, #2
    7c9e:	d107      	bne.n	7cb0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7ca0:	69fb      	ldr	r3, [r7, #28]
    7ca2:	4a22      	ldr	r2, [pc, #136]	; (7d2c <_system_pinmux_config+0x10c>)
    7ca4:	4013      	ands	r3, r2
    7ca6:	61fb      	str	r3, [r7, #28]
    7ca8:	e002      	b.n	7cb0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7caa:	68fb      	ldr	r3, [r7, #12]
    7cac:	68ba      	ldr	r2, [r7, #8]
    7cae:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7cb0:	68bb      	ldr	r3, [r7, #8]
    7cb2:	041b      	lsls	r3, r3, #16
    7cb4:	0c1b      	lsrs	r3, r3, #16
    7cb6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7cb8:	68bb      	ldr	r3, [r7, #8]
    7cba:	0c1b      	lsrs	r3, r3, #16
    7cbc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7cbe:	69ba      	ldr	r2, [r7, #24]
    7cc0:	69fb      	ldr	r3, [r7, #28]
    7cc2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7cc4:	22a0      	movs	r2, #160	; 0xa0
    7cc6:	05d2      	lsls	r2, r2, #23
    7cc8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7cca:	68fb      	ldr	r3, [r7, #12]
    7ccc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7cce:	697a      	ldr	r2, [r7, #20]
    7cd0:	69fb      	ldr	r3, [r7, #28]
    7cd2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7cd4:	22d0      	movs	r2, #208	; 0xd0
    7cd6:	0612      	lsls	r2, r2, #24
    7cd8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	78db      	ldrb	r3, [r3, #3]
    7ce2:	2201      	movs	r2, #1
    7ce4:	4053      	eors	r3, r2
    7ce6:	b2db      	uxtb	r3, r3
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d01a      	beq.n	7d22 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7cec:	69fa      	ldr	r2, [r7, #28]
    7cee:	2380      	movs	r3, #128	; 0x80
    7cf0:	02db      	lsls	r3, r3, #11
    7cf2:	4013      	ands	r3, r2
    7cf4:	d00a      	beq.n	7d0c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	789b      	ldrb	r3, [r3, #2]
    7cfa:	2b01      	cmp	r3, #1
    7cfc:	d103      	bne.n	7d06 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7cfe:	68fb      	ldr	r3, [r7, #12]
    7d00:	68ba      	ldr	r2, [r7, #8]
    7d02:	619a      	str	r2, [r3, #24]
    7d04:	e002      	b.n	7d0c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7d06:	68fb      	ldr	r3, [r7, #12]
    7d08:	68ba      	ldr	r2, [r7, #8]
    7d0a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	785b      	ldrb	r3, [r3, #1]
    7d10:	2b01      	cmp	r3, #1
    7d12:	d003      	beq.n	7d1c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d18:	2b02      	cmp	r3, #2
    7d1a:	d102      	bne.n	7d22 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7d1c:	68fb      	ldr	r3, [r7, #12]
    7d1e:	68ba      	ldr	r2, [r7, #8]
    7d20:	609a      	str	r2, [r3, #8]
		}
	}
}
    7d22:	46c0      	nop			; (mov r8, r8)
    7d24:	46bd      	mov	sp, r7
    7d26:	b008      	add	sp, #32
    7d28:	bd80      	pop	{r7, pc}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	fffbffff 	.word	0xfffbffff

00007d30 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7d30:	b580      	push	{r7, lr}
    7d32:	b084      	sub	sp, #16
    7d34:	af00      	add	r7, sp, #0
    7d36:	0002      	movs	r2, r0
    7d38:	6039      	str	r1, [r7, #0]
    7d3a:	1dfb      	adds	r3, r7, #7
    7d3c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7d3e:	1dfb      	adds	r3, r7, #7
    7d40:	781b      	ldrb	r3, [r3, #0]
    7d42:	0018      	movs	r0, r3
    7d44:	4b0a      	ldr	r3, [pc, #40]	; (7d70 <system_pinmux_pin_set_config+0x40>)
    7d46:	4798      	blx	r3
    7d48:	0003      	movs	r3, r0
    7d4a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7d4c:	1dfb      	adds	r3, r7, #7
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	221f      	movs	r2, #31
    7d52:	4013      	ands	r3, r2
    7d54:	2201      	movs	r2, #1
    7d56:	409a      	lsls	r2, r3
    7d58:	0013      	movs	r3, r2
    7d5a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7d5c:	683a      	ldr	r2, [r7, #0]
    7d5e:	68b9      	ldr	r1, [r7, #8]
    7d60:	68fb      	ldr	r3, [r7, #12]
    7d62:	0018      	movs	r0, r3
    7d64:	4b03      	ldr	r3, [pc, #12]	; (7d74 <system_pinmux_pin_set_config+0x44>)
    7d66:	4798      	blx	r3
}
    7d68:	46c0      	nop			; (mov r8, r8)
    7d6a:	46bd      	mov	sp, r7
    7d6c:	b004      	add	sp, #16
    7d6e:	bd80      	pop	{r7, pc}
    7d70:	00007bc1 	.word	0x00007bc1
    7d74:	00007c21 	.word	0x00007c21

00007d78 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7d78:	b580      	push	{r7, lr}
    7d7a:	af00      	add	r7, sp, #0
	return;
    7d7c:	46c0      	nop			; (mov r8, r8)
}
    7d7e:	46bd      	mov	sp, r7
    7d80:	bd80      	pop	{r7, pc}
	...

00007d84 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7d84:	b580      	push	{r7, lr}
    7d86:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7d88:	4b06      	ldr	r3, [pc, #24]	; (7da4 <system_init+0x20>)
    7d8a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7d8c:	4b06      	ldr	r3, [pc, #24]	; (7da8 <system_init+0x24>)
    7d8e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7d90:	4b06      	ldr	r3, [pc, #24]	; (7dac <system_init+0x28>)
    7d92:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7d94:	4b06      	ldr	r3, [pc, #24]	; (7db0 <system_init+0x2c>)
    7d96:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7d98:	4b06      	ldr	r3, [pc, #24]	; (7db4 <system_init+0x30>)
    7d9a:	4798      	blx	r3
}
    7d9c:	46c0      	nop			; (mov r8, r8)
    7d9e:	46bd      	mov	sp, r7
    7da0:	bd80      	pop	{r7, pc}
    7da2:	46c0      	nop			; (mov r8, r8)
    7da4:	0000740d 	.word	0x0000740d
    7da8:	00006ac1 	.word	0x00006ac1
    7dac:	00007d79 	.word	0x00007d79
    7db0:	00000235 	.word	0x00000235
    7db4:	00007d79 	.word	0x00007d79

00007db8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7db8:	b580      	push	{r7, lr}
    7dba:	b084      	sub	sp, #16
    7dbc:	af00      	add	r7, sp, #0
    7dbe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7dc0:	4b0a      	ldr	r3, [pc, #40]	; (7dec <_sbrk+0x34>)
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d102      	bne.n	7dce <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    7dc8:	4b08      	ldr	r3, [pc, #32]	; (7dec <_sbrk+0x34>)
    7dca:	4a09      	ldr	r2, [pc, #36]	; (7df0 <_sbrk+0x38>)
    7dcc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    7dce:	4b07      	ldr	r3, [pc, #28]	; (7dec <_sbrk+0x34>)
    7dd0:	681b      	ldr	r3, [r3, #0]
    7dd2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    7dd4:	4b05      	ldr	r3, [pc, #20]	; (7dec <_sbrk+0x34>)
    7dd6:	681a      	ldr	r2, [r3, #0]
    7dd8:	687b      	ldr	r3, [r7, #4]
    7dda:	18d2      	adds	r2, r2, r3
    7ddc:	4b03      	ldr	r3, [pc, #12]	; (7dec <_sbrk+0x34>)
    7dde:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    7de0:	68fb      	ldr	r3, [r7, #12]
}
    7de2:	0018      	movs	r0, r3
    7de4:	46bd      	mov	sp, r7
    7de6:	b004      	add	sp, #16
    7de8:	bd80      	pop	{r7, pc}
    7dea:	46c0      	nop			; (mov r8, r8)
    7dec:	200002a8 	.word	0x200002a8
    7df0:	200023b8 	.word	0x200023b8

00007df4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
	return -1;
    7dfc:	2301      	movs	r3, #1
    7dfe:	425b      	negs	r3, r3
}
    7e00:	0018      	movs	r0, r3
    7e02:	46bd      	mov	sp, r7
    7e04:	b002      	add	sp, #8
    7e06:	bd80      	pop	{r7, pc}

00007e08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b082      	sub	sp, #8
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    7e12:	683b      	ldr	r3, [r7, #0]
    7e14:	2280      	movs	r2, #128	; 0x80
    7e16:	0192      	lsls	r2, r2, #6
    7e18:	605a      	str	r2, [r3, #4]

	return 0;
    7e1a:	2300      	movs	r3, #0
}
    7e1c:	0018      	movs	r0, r3
    7e1e:	46bd      	mov	sp, r7
    7e20:	b002      	add	sp, #8
    7e22:	bd80      	pop	{r7, pc}

00007e24 <_isatty>:

extern int _isatty(int file)
{
    7e24:	b580      	push	{r7, lr}
    7e26:	b082      	sub	sp, #8
    7e28:	af00      	add	r7, sp, #0
    7e2a:	6078      	str	r0, [r7, #4]
	return 1;
    7e2c:	2301      	movs	r3, #1
}
    7e2e:	0018      	movs	r0, r3
    7e30:	46bd      	mov	sp, r7
    7e32:	b002      	add	sp, #8
    7e34:	bd80      	pop	{r7, pc}

00007e36 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    7e36:	b580      	push	{r7, lr}
    7e38:	b084      	sub	sp, #16
    7e3a:	af00      	add	r7, sp, #0
    7e3c:	60f8      	str	r0, [r7, #12]
    7e3e:	60b9      	str	r1, [r7, #8]
    7e40:	607a      	str	r2, [r7, #4]
	return 0;
    7e42:	2300      	movs	r3, #0
}
    7e44:	0018      	movs	r0, r3
    7e46:	46bd      	mov	sp, r7
    7e48:	b004      	add	sp, #16
    7e4a:	bd80      	pop	{r7, pc}

00007e4c <system_cpu_clock_get_hz>:
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    7e50:	2000      	movs	r0, #0
    7e52:	4b07      	ldr	r3, [pc, #28]	; (7e70 <system_cpu_clock_get_hz+0x24>)
    7e54:	4798      	blx	r3
    7e56:	0002      	movs	r2, r0
    7e58:	4b06      	ldr	r3, [pc, #24]	; (7e74 <system_cpu_clock_get_hz+0x28>)
    7e5a:	791b      	ldrb	r3, [r3, #4]
    7e5c:	b2db      	uxtb	r3, r3
    7e5e:	0019      	movs	r1, r3
    7e60:	4b05      	ldr	r3, [pc, #20]	; (7e78 <system_cpu_clock_get_hz+0x2c>)
    7e62:	0010      	movs	r0, r2
    7e64:	4798      	blx	r3
    7e66:	0003      	movs	r3, r0
}
    7e68:	0018      	movs	r0, r3
    7e6a:	46bd      	mov	sp, r7
    7e6c:	bd80      	pop	{r7, pc}
    7e6e:	46c0      	nop			; (mov r8, r8)
    7e70:	00007949 	.word	0x00007949
    7e74:	40000400 	.word	0x40000400
    7e78:	00008259 	.word	0x00008259

00007e7c <system_interrupt_enable>:
{
    7e7c:	b580      	push	{r7, lr}
    7e7e:	b082      	sub	sp, #8
    7e80:	af00      	add	r7, sp, #0
    7e82:	0002      	movs	r2, r0
    7e84:	1dfb      	adds	r3, r7, #7
    7e86:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7e88:	4b06      	ldr	r3, [pc, #24]	; (7ea4 <system_interrupt_enable+0x28>)
    7e8a:	1dfa      	adds	r2, r7, #7
    7e8c:	7812      	ldrb	r2, [r2, #0]
    7e8e:	0011      	movs	r1, r2
    7e90:	221f      	movs	r2, #31
    7e92:	400a      	ands	r2, r1
    7e94:	2101      	movs	r1, #1
    7e96:	4091      	lsls	r1, r2
    7e98:	000a      	movs	r2, r1
    7e9a:	601a      	str	r2, [r3, #0]
}
    7e9c:	46c0      	nop			; (mov r8, r8)
    7e9e:	46bd      	mov	sp, r7
    7ea0:	b002      	add	sp, #8
    7ea2:	bd80      	pop	{r7, pc}
    7ea4:	e000e100 	.word	0xe000e100

00007ea8 <usart_is_syncing>:
{
    7ea8:	b580      	push	{r7, lr}
    7eaa:	b084      	sub	sp, #16
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7eb0:	687b      	ldr	r3, [r7, #4]
    7eb2:	681b      	ldr	r3, [r3, #0]
    7eb4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	69db      	ldr	r3, [r3, #28]
    7eba:	1e5a      	subs	r2, r3, #1
    7ebc:	4193      	sbcs	r3, r2
    7ebe:	b2db      	uxtb	r3, r3
}
    7ec0:	0018      	movs	r0, r3
    7ec2:	46bd      	mov	sp, r7
    7ec4:	b004      	add	sp, #16
    7ec6:	bd80      	pop	{r7, pc}

00007ec8 <_usart_wait_for_sync>:
{
    7ec8:	b580      	push	{r7, lr}
    7eca:	b082      	sub	sp, #8
    7ecc:	af00      	add	r7, sp, #0
    7ece:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    7ed0:	46c0      	nop			; (mov r8, r8)
    7ed2:	687b      	ldr	r3, [r7, #4]
    7ed4:	0018      	movs	r0, r3
    7ed6:	4b04      	ldr	r3, [pc, #16]	; (7ee8 <_usart_wait_for_sync+0x20>)
    7ed8:	4798      	blx	r3
    7eda:	1e03      	subs	r3, r0, #0
    7edc:	d1f9      	bne.n	7ed2 <_usart_wait_for_sync+0xa>
}
    7ede:	46c0      	nop			; (mov r8, r8)
    7ee0:	46bd      	mov	sp, r7
    7ee2:	b002      	add	sp, #8
    7ee4:	bd80      	pop	{r7, pc}
    7ee6:	46c0      	nop			; (mov r8, r8)
    7ee8:	00007ea9 	.word	0x00007ea9

00007eec <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    7eec:	b580      	push	{r7, lr}
    7eee:	b082      	sub	sp, #8
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	2280      	movs	r2, #128	; 0x80
    7ef8:	05d2      	lsls	r2, r2, #23
    7efa:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7efc:	687b      	ldr	r3, [r7, #4]
    7efe:	2200      	movs	r2, #0
    7f00:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	22ff      	movs	r2, #255	; 0xff
    7f06:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	2200      	movs	r2, #0
    7f0c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7f0e:	687b      	ldr	r3, [r7, #4]
    7f10:	2200      	movs	r2, #0
    7f12:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	2296      	movs	r2, #150	; 0x96
    7f18:	0192      	lsls	r2, r2, #6
    7f1a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	2224      	movs	r2, #36	; 0x24
    7f20:	2101      	movs	r1, #1
    7f22:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	2225      	movs	r2, #37	; 0x25
    7f28:	2101      	movs	r1, #1
    7f2a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    7f2c:	687b      	ldr	r3, [r7, #4]
    7f2e:	2226      	movs	r2, #38	; 0x26
    7f30:	2100      	movs	r1, #0
    7f32:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    7f34:	687b      	ldr	r3, [r7, #4]
    7f36:	2227      	movs	r2, #39	; 0x27
    7f38:	2100      	movs	r1, #0
    7f3a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	2200      	movs	r2, #0
    7f40:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	2288      	movs	r2, #136	; 0x88
    7f46:	0352      	lsls	r2, r2, #13
    7f48:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	222c      	movs	r2, #44	; 0x2c
    7f4e:	2100      	movs	r1, #0
    7f50:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    7f52:	687b      	ldr	r3, [r7, #4]
    7f54:	222d      	movs	r2, #45	; 0x2d
    7f56:	2100      	movs	r1, #0
    7f58:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	2200      	movs	r2, #0
    7f5e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	2200      	movs	r2, #0
    7f64:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	2200      	movs	r2, #0
    7f6a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	2200      	movs	r2, #0
    7f70:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	2200      	movs	r2, #0
    7f76:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	2200      	movs	r2, #0
    7f7c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	2200      	movs	r2, #0
    7f82:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	2200      	movs	r2, #0
    7f88:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	2200      	movs	r2, #0
    7f8e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	2200      	movs	r2, #0
    7f94:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    7f96:	687b      	ldr	r3, [r7, #4]
    7f98:	2213      	movs	r2, #19
    7f9a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	2200      	movs	r2, #0
    7fa0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	46bd      	mov	sp, r7
    7fa6:	b002      	add	sp, #8
    7fa8:	bd80      	pop	{r7, pc}
	...

00007fac <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	681b      	ldr	r3, [r3, #0]
    7fb8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	0018      	movs	r0, r3
    7fc0:	4b09      	ldr	r3, [pc, #36]	; (7fe8 <usart_enable+0x3c>)
    7fc2:	4798      	blx	r3
    7fc4:	0003      	movs	r3, r0
    7fc6:	0018      	movs	r0, r3
    7fc8:	4b08      	ldr	r3, [pc, #32]	; (7fec <usart_enable+0x40>)
    7fca:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	0018      	movs	r0, r3
    7fd0:	4b07      	ldr	r3, [pc, #28]	; (7ff0 <usart_enable+0x44>)
    7fd2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7fd4:	68fb      	ldr	r3, [r7, #12]
    7fd6:	681b      	ldr	r3, [r3, #0]
    7fd8:	2202      	movs	r2, #2
    7fda:	431a      	orrs	r2, r3
    7fdc:	68fb      	ldr	r3, [r7, #12]
    7fde:	601a      	str	r2, [r3, #0]
}
    7fe0:	46c0      	nop			; (mov r8, r8)
    7fe2:	46bd      	mov	sp, r7
    7fe4:	b004      	add	sp, #16
    7fe6:	bd80      	pop	{r7, pc}
    7fe8:	00006965 	.word	0x00006965
    7fec:	00007e7d 	.word	0x00007e7d
    7ff0:	00007ec9 	.word	0x00007ec9

00007ff4 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	b084      	sub	sp, #16
    7ff8:	af00      	add	r7, sp, #0
    7ffa:	60f8      	str	r0, [r7, #12]
    7ffc:	60b9      	str	r1, [r7, #8]
    7ffe:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    8000:	687a      	ldr	r2, [r7, #4]
    8002:	68b9      	ldr	r1, [r7, #8]
    8004:	68fb      	ldr	r3, [r7, #12]
    8006:	0018      	movs	r0, r3
    8008:	4b05      	ldr	r3, [pc, #20]	; (8020 <usart_serial_init+0x2c>)
    800a:	4798      	blx	r3
    800c:	1e03      	subs	r3, r0, #0
    800e:	d101      	bne.n	8014 <usart_serial_init+0x20>
		return true;
    8010:	2301      	movs	r3, #1
    8012:	e000      	b.n	8016 <usart_serial_init+0x22>
	}
	else {
		return false;
    8014:	2300      	movs	r3, #0
	}
}
    8016:	0018      	movs	r0, r3
    8018:	46bd      	mov	sp, r7
    801a:	b004      	add	sp, #16
    801c:	bd80      	pop	{r7, pc}
    801e:	46c0      	nop			; (mov r8, r8)
    8020:	00005bad 	.word	0x00005bad

00008024 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    8024:	b580      	push	{r7, lr}
    8026:	b082      	sub	sp, #8
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
    802c:	000a      	movs	r2, r1
    802e:	1cfb      	adds	r3, r7, #3
    8030:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	1cfb      	adds	r3, r7, #3
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	b29a      	uxth	r2, r3
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	0011      	movs	r1, r2
    803e:	0018      	movs	r0, r3
    8040:	4b04      	ldr	r3, [pc, #16]	; (8054 <usart_serial_putchar+0x30>)
    8042:	4798      	blx	r3
    8044:	1e03      	subs	r3, r0, #0
    8046:	d1f5      	bne.n	8034 <usart_serial_putchar+0x10>

	return STATUS_OK;
    8048:	2300      	movs	r3, #0
}
    804a:	0018      	movs	r0, r3
    804c:	46bd      	mov	sp, r7
    804e:	b002      	add	sp, #8
    8050:	bd80      	pop	{r7, pc}
    8052:	46c0      	nop			; (mov r8, r8)
    8054:	00005e45 	.word	0x00005e45

00008058 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    8058:	b580      	push	{r7, lr}
    805a:	b084      	sub	sp, #16
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]
    8060:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    8062:	230e      	movs	r3, #14
    8064:	18fb      	adds	r3, r7, r3
    8066:	2200      	movs	r2, #0
    8068:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    806a:	46c0      	nop			; (mov r8, r8)
    806c:	230e      	movs	r3, #14
    806e:	18fa      	adds	r2, r7, r3
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	0011      	movs	r1, r2
    8074:	0018      	movs	r0, r3
    8076:	4b07      	ldr	r3, [pc, #28]	; (8094 <usart_serial_getchar+0x3c>)
    8078:	4798      	blx	r3
    807a:	1e03      	subs	r3, r0, #0
    807c:	d1f6      	bne.n	806c <usart_serial_getchar+0x14>

	*c = temp;
    807e:	230e      	movs	r3, #14
    8080:	18fb      	adds	r3, r7, r3
    8082:	881b      	ldrh	r3, [r3, #0]
    8084:	b2da      	uxtb	r2, r3
    8086:	683b      	ldr	r3, [r7, #0]
    8088:	701a      	strb	r2, [r3, #0]
}
    808a:	46c0      	nop			; (mov r8, r8)
    808c:	46bd      	mov	sp, r7
    808e:	b004      	add	sp, #16
    8090:	bd80      	pop	{r7, pc}
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	00005ea9 	.word	0x00005ea9

00008098 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    8098:	b580      	push	{r7, lr}
    809a:	b084      	sub	sp, #16
    809c:	af00      	add	r7, sp, #0
    809e:	60f8      	str	r0, [r7, #12]
    80a0:	60b9      	str	r1, [r7, #8]
    80a2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    80a4:	4b10      	ldr	r3, [pc, #64]	; (80e8 <stdio_serial_init+0x50>)
    80a6:	68fa      	ldr	r2, [r7, #12]
    80a8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    80aa:	4b10      	ldr	r3, [pc, #64]	; (80ec <stdio_serial_init+0x54>)
    80ac:	4a10      	ldr	r2, [pc, #64]	; (80f0 <stdio_serial_init+0x58>)
    80ae:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    80b0:	4b10      	ldr	r3, [pc, #64]	; (80f4 <stdio_serial_init+0x5c>)
    80b2:	4a11      	ldr	r2, [pc, #68]	; (80f8 <stdio_serial_init+0x60>)
    80b4:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    80b6:	687a      	ldr	r2, [r7, #4]
    80b8:	68b9      	ldr	r1, [r7, #8]
    80ba:	68fb      	ldr	r3, [r7, #12]
    80bc:	0018      	movs	r0, r3
    80be:	4b0f      	ldr	r3, [pc, #60]	; (80fc <stdio_serial_init+0x64>)
    80c0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    80c2:	4b0f      	ldr	r3, [pc, #60]	; (8100 <stdio_serial_init+0x68>)
    80c4:	681b      	ldr	r3, [r3, #0]
    80c6:	689b      	ldr	r3, [r3, #8]
    80c8:	2100      	movs	r1, #0
    80ca:	0018      	movs	r0, r3
    80cc:	4b0d      	ldr	r3, [pc, #52]	; (8104 <stdio_serial_init+0x6c>)
    80ce:	4798      	blx	r3
	setbuf(stdin, NULL);
    80d0:	4b0b      	ldr	r3, [pc, #44]	; (8100 <stdio_serial_init+0x68>)
    80d2:	681b      	ldr	r3, [r3, #0]
    80d4:	685b      	ldr	r3, [r3, #4]
    80d6:	2100      	movs	r1, #0
    80d8:	0018      	movs	r0, r3
    80da:	4b0a      	ldr	r3, [pc, #40]	; (8104 <stdio_serial_init+0x6c>)
    80dc:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	46bd      	mov	sp, r7
    80e2:	b004      	add	sp, #16
    80e4:	bd80      	pop	{r7, pc}
    80e6:	46c0      	nop			; (mov r8, r8)
    80e8:	20000374 	.word	0x20000374
    80ec:	20000370 	.word	0x20000370
    80f0:	00008025 	.word	0x00008025
    80f4:	2000036c 	.word	0x2000036c
    80f8:	00008059 	.word	0x00008059
    80fc:	00007ff5 	.word	0x00007ff5
    8100:	200000a4 	.word	0x200000a4
    8104:	00009fb9 	.word	0x00009fb9

00008108 <serial_console_init>:

/**
 *  Configure console.
 */
void serial_console_init(void)
{
    8108:	b580      	push	{r7, lr}
    810a:	b090      	sub	sp, #64	; 0x40
    810c:	af00      	add	r7, sp, #0
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    810e:	003b      	movs	r3, r7
    8110:	0018      	movs	r0, r3
    8112:	4b13      	ldr	r3, [pc, #76]	; (8160 <serial_console_init+0x58>)
    8114:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    8116:	003b      	movs	r3, r7
    8118:	2280      	movs	r2, #128	; 0x80
    811a:	0352      	lsls	r2, r2, #13
    811c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    811e:	003b      	movs	r3, r7
    8120:	4a10      	ldr	r2, [pc, #64]	; (8164 <serial_console_init+0x5c>)
    8122:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    8124:	003b      	movs	r3, r7
    8126:	4a10      	ldr	r2, [pc, #64]	; (8168 <serial_console_init+0x60>)
    8128:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    812a:	003b      	movs	r3, r7
    812c:	2201      	movs	r2, #1
    812e:	4252      	negs	r2, r2
    8130:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    8132:	003b      	movs	r3, r7
    8134:	2201      	movs	r2, #1
    8136:	4252      	negs	r2, r2
    8138:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    813a:	003b      	movs	r3, r7
    813c:	22e1      	movs	r2, #225	; 0xe1
    813e:	0252      	lsls	r2, r2, #9
    8140:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
    8142:	003a      	movs	r2, r7
    8144:	2384      	movs	r3, #132	; 0x84
    8146:	05d9      	lsls	r1, r3, #23
    8148:	4b08      	ldr	r3, [pc, #32]	; (816c <serial_console_init+0x64>)
    814a:	0018      	movs	r0, r3
    814c:	4b08      	ldr	r3, [pc, #32]	; (8170 <serial_console_init+0x68>)
    814e:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    8150:	4b06      	ldr	r3, [pc, #24]	; (816c <serial_console_init+0x64>)
    8152:	0018      	movs	r0, r3
    8154:	4b07      	ldr	r3, [pc, #28]	; (8174 <serial_console_init+0x6c>)
    8156:	4798      	blx	r3
}
    8158:	46c0      	nop			; (mov r8, r8)
    815a:	46bd      	mov	sp, r7
    815c:	b010      	add	sp, #64	; 0x40
    815e:	bd80      	pop	{r7, pc}
    8160:	00007eed 	.word	0x00007eed
    8164:	00040003 	.word	0x00040003
    8168:	00050003 	.word	0x00050003
    816c:	200002ac 	.word	0x200002ac
    8170:	00008099 	.word	0x00008099
    8174:	00007fad 	.word	0x00007fad

00008178 <main>:

int main (void)
{
    8178:	b590      	push	{r4, r7, lr}
    817a:	b083      	sub	sp, #12
    817c:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_SUCCESS;
    817e:	1dfb      	adds	r3, r7, #7
    8180:	2200      	movs	r2, #0
    8182:	701a      	strb	r2, [r3, #0]
			
	/* system clock initialization */
	system_init();
    8184:	4b23      	ldr	r3, [pc, #140]	; (8214 <main+0x9c>)
    8186:	4798      	blx	r3

	/* Initialize serial console for debugging */
	serial_console_init();
    8188:	4b23      	ldr	r3, [pc, #140]	; (8218 <main+0xa0>)
    818a:	4798      	blx	r3

	/* delay routine initialization */
	delay_init();
    818c:	4b23      	ldr	r3, [pc, #140]	; (821c <main+0xa4>)
    818e:	4798      	blx	r3
	
	printf("Provision ECC608 crypto device\r\n");
    8190:	4b23      	ldr	r3, [pc, #140]	; (8220 <main+0xa8>)
    8192:	0018      	movs	r0, r3
    8194:	4b23      	ldr	r3, [pc, #140]	; (8224 <main+0xac>)
    8196:	4798      	blx	r3
	printf("cpu_freq=%d\r\n",(int)system_cpu_clock_get_hz());
    8198:	4b23      	ldr	r3, [pc, #140]	; (8228 <main+0xb0>)
    819a:	4798      	blx	r3
    819c:	0003      	movs	r3, r0
    819e:	001a      	movs	r2, r3
    81a0:	4b22      	ldr	r3, [pc, #136]	; (822c <main+0xb4>)
    81a2:	0011      	movs	r1, r2
    81a4:	0018      	movs	r0, r3
    81a6:	4b22      	ldr	r3, [pc, #136]	; (8230 <main+0xb8>)
    81a8:	4798      	blx	r3
		 
		 Enable the code below, it's initializes the library and query basic info.
		 build and check that your device is alive and well configured.
	*/
#if 1
	status = cryptoauthlib_init();
    81aa:	1dfc      	adds	r4, r7, #7
    81ac:	4b21      	ldr	r3, [pc, #132]	; (8234 <main+0xbc>)
    81ae:	4798      	blx	r3
    81b0:	0003      	movs	r3, r0
    81b2:	7023      	strb	r3, [r4, #0]
	if (status == ATCA_SUCCESS)
    81b4:	1dfb      	adds	r3, r7, #7
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	2b00      	cmp	r3, #0
    81ba:	d103      	bne.n	81c4 <main+0x4c>
	{
		printf("The ATECC508A device is configured and locked.\r\n");
    81bc:	4b1e      	ldr	r3, [pc, #120]	; (8238 <main+0xc0>)
    81be:	0018      	movs	r0, r3
    81c0:	4b18      	ldr	r3, [pc, #96]	; (8224 <main+0xac>)
    81c2:	4798      	blx	r3
		3. When the slot is locked, only then you can't change the slot private key.
		4. Enable the code below and the Public Key will be on the terminal. 
		5. The private key will remain secret.
	 */
#if 1
    status = genKeyPair();
    81c4:	1dfc      	adds	r4, r7, #7
    81c6:	4b1d      	ldr	r3, [pc, #116]	; (823c <main+0xc4>)
    81c8:	4798      	blx	r3
    81ca:	0003      	movs	r3, r0
    81cc:	7023      	strb	r3, [r4, #0]
    if (status != ATCA_SUCCESS)
    81ce:	1dfb      	adds	r3, r7, #7
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d003      	beq.n	81de <main+0x66>
    {
	    printf("Failed to get the ECC pub Key.\r\n");
    81d6:	4b1a      	ldr	r3, [pc, #104]	; (8240 <main+0xc8>)
    81d8:	0018      	movs	r0, r3
    81da:	4b12      	ldr	r3, [pc, #72]	; (8224 <main+0xac>)
    81dc:	4798      	blx	r3
			1. Use the key pair from step 2 to generate a Certificate signing request.
			2. The public key and basic company info is added to the CSR and then signed by the private key in slot 0
			3. Enable the code below, The generated CSR (in DER format) will be printed on the console.
	*/
#if 1
	status = genDeviceCSR();
    81de:	1dfc      	adds	r4, r7, #7
    81e0:	4b18      	ldr	r3, [pc, #96]	; (8244 <main+0xcc>)
    81e2:	4798      	blx	r3
    81e4:	0003      	movs	r3, r0
    81e6:	7023      	strb	r3, [r4, #0]
	if (status != ATCA_SUCCESS)
    81e8:	1dfb      	adds	r3, r7, #7
    81ea:	781b      	ldrb	r3, [r3, #0]
    81ec:	2b00      	cmp	r3, #0
    81ee:	d003      	beq.n	81f8 <main+0x80>
	{
		printf("Failed to get the ECC CSR.\r\n");
    81f0:	4b15      	ldr	r3, [pc, #84]	; (8248 <main+0xd0>)
    81f2:	0018      	movs	r0, r3
    81f4:	4b0b      	ldr	r3, [pc, #44]	; (8224 <main+0xac>)
    81f6:	4798      	blx	r3
			2. The public key and basic company info is added to the CSR and then signed by the private key in slot 0
			3. Enable the code below, The generated CSR (in DER format) will be printed on the console.
	*/
#if 1
	/* Initialize BSP and Bus Interface */
	if(0 !=nm_bsp_init())
    81f8:	4b14      	ldr	r3, [pc, #80]	; (824c <main+0xd4>)
    81fa:	4798      	blx	r3
    81fc:	1e03      	subs	r3, r0, #0
    81fe:	d004      	beq.n	820a <main+0x92>
	{
		printf("nm_bsp_init.\r\n");
    8200:	4b13      	ldr	r3, [pc, #76]	; (8250 <main+0xd8>)
    8202:	0018      	movs	r0, r3
    8204:	4b07      	ldr	r3, [pc, #28]	; (8224 <main+0xac>)
    8206:	4798      	blx	r3
		while(1);
    8208:	e7fe      	b.n	8208 <main+0x90>
	}
	
		printf("WINC is in download mode, now go and run the script.\r\n");
    820a:	4b12      	ldr	r3, [pc, #72]	; (8254 <main+0xdc>)
    820c:	0018      	movs	r0, r3
    820e:	4b05      	ldr	r3, [pc, #20]	; (8224 <main+0xac>)
    8210:	4798      	blx	r3
	
	while(1);
    8212:	e7fe      	b.n	8212 <main+0x9a>
    8214:	00007d85 	.word	0x00007d85
    8218:	00008109 	.word	0x00008109
    821c:	00000b71 	.word	0x00000b71
    8220:	0000b428 	.word	0x0000b428
    8224:	00009f81 	.word	0x00009f81
    8228:	00007e4d 	.word	0x00007e4d
    822c:	0000b448 	.word	0x0000b448
    8230:	00009e8d 	.word	0x00009e8d
    8234:	000008f5 	.word	0x000008f5
    8238:	0000b458 	.word	0x0000b458
    823c:	000009b1 	.word	0x000009b1
    8240:	0000b488 	.word	0x0000b488
    8244:	00000a51 	.word	0x00000a51
    8248:	0000b4a8 	.word	0x0000b4a8
    824c:	0000064d 	.word	0x0000064d
    8250:	0000b4c4 	.word	0x0000b4c4
    8254:	0000b4d4 	.word	0x0000b4d4

00008258 <__udivsi3>:
    8258:	2200      	movs	r2, #0
    825a:	0843      	lsrs	r3, r0, #1
    825c:	428b      	cmp	r3, r1
    825e:	d374      	bcc.n	834a <__udivsi3+0xf2>
    8260:	0903      	lsrs	r3, r0, #4
    8262:	428b      	cmp	r3, r1
    8264:	d35f      	bcc.n	8326 <__udivsi3+0xce>
    8266:	0a03      	lsrs	r3, r0, #8
    8268:	428b      	cmp	r3, r1
    826a:	d344      	bcc.n	82f6 <__udivsi3+0x9e>
    826c:	0b03      	lsrs	r3, r0, #12
    826e:	428b      	cmp	r3, r1
    8270:	d328      	bcc.n	82c4 <__udivsi3+0x6c>
    8272:	0c03      	lsrs	r3, r0, #16
    8274:	428b      	cmp	r3, r1
    8276:	d30d      	bcc.n	8294 <__udivsi3+0x3c>
    8278:	22ff      	movs	r2, #255	; 0xff
    827a:	0209      	lsls	r1, r1, #8
    827c:	ba12      	rev	r2, r2
    827e:	0c03      	lsrs	r3, r0, #16
    8280:	428b      	cmp	r3, r1
    8282:	d302      	bcc.n	828a <__udivsi3+0x32>
    8284:	1212      	asrs	r2, r2, #8
    8286:	0209      	lsls	r1, r1, #8
    8288:	d065      	beq.n	8356 <__udivsi3+0xfe>
    828a:	0b03      	lsrs	r3, r0, #12
    828c:	428b      	cmp	r3, r1
    828e:	d319      	bcc.n	82c4 <__udivsi3+0x6c>
    8290:	e000      	b.n	8294 <__udivsi3+0x3c>
    8292:	0a09      	lsrs	r1, r1, #8
    8294:	0bc3      	lsrs	r3, r0, #15
    8296:	428b      	cmp	r3, r1
    8298:	d301      	bcc.n	829e <__udivsi3+0x46>
    829a:	03cb      	lsls	r3, r1, #15
    829c:	1ac0      	subs	r0, r0, r3
    829e:	4152      	adcs	r2, r2
    82a0:	0b83      	lsrs	r3, r0, #14
    82a2:	428b      	cmp	r3, r1
    82a4:	d301      	bcc.n	82aa <__udivsi3+0x52>
    82a6:	038b      	lsls	r3, r1, #14
    82a8:	1ac0      	subs	r0, r0, r3
    82aa:	4152      	adcs	r2, r2
    82ac:	0b43      	lsrs	r3, r0, #13
    82ae:	428b      	cmp	r3, r1
    82b0:	d301      	bcc.n	82b6 <__udivsi3+0x5e>
    82b2:	034b      	lsls	r3, r1, #13
    82b4:	1ac0      	subs	r0, r0, r3
    82b6:	4152      	adcs	r2, r2
    82b8:	0b03      	lsrs	r3, r0, #12
    82ba:	428b      	cmp	r3, r1
    82bc:	d301      	bcc.n	82c2 <__udivsi3+0x6a>
    82be:	030b      	lsls	r3, r1, #12
    82c0:	1ac0      	subs	r0, r0, r3
    82c2:	4152      	adcs	r2, r2
    82c4:	0ac3      	lsrs	r3, r0, #11
    82c6:	428b      	cmp	r3, r1
    82c8:	d301      	bcc.n	82ce <__udivsi3+0x76>
    82ca:	02cb      	lsls	r3, r1, #11
    82cc:	1ac0      	subs	r0, r0, r3
    82ce:	4152      	adcs	r2, r2
    82d0:	0a83      	lsrs	r3, r0, #10
    82d2:	428b      	cmp	r3, r1
    82d4:	d301      	bcc.n	82da <__udivsi3+0x82>
    82d6:	028b      	lsls	r3, r1, #10
    82d8:	1ac0      	subs	r0, r0, r3
    82da:	4152      	adcs	r2, r2
    82dc:	0a43      	lsrs	r3, r0, #9
    82de:	428b      	cmp	r3, r1
    82e0:	d301      	bcc.n	82e6 <__udivsi3+0x8e>
    82e2:	024b      	lsls	r3, r1, #9
    82e4:	1ac0      	subs	r0, r0, r3
    82e6:	4152      	adcs	r2, r2
    82e8:	0a03      	lsrs	r3, r0, #8
    82ea:	428b      	cmp	r3, r1
    82ec:	d301      	bcc.n	82f2 <__udivsi3+0x9a>
    82ee:	020b      	lsls	r3, r1, #8
    82f0:	1ac0      	subs	r0, r0, r3
    82f2:	4152      	adcs	r2, r2
    82f4:	d2cd      	bcs.n	8292 <__udivsi3+0x3a>
    82f6:	09c3      	lsrs	r3, r0, #7
    82f8:	428b      	cmp	r3, r1
    82fa:	d301      	bcc.n	8300 <__udivsi3+0xa8>
    82fc:	01cb      	lsls	r3, r1, #7
    82fe:	1ac0      	subs	r0, r0, r3
    8300:	4152      	adcs	r2, r2
    8302:	0983      	lsrs	r3, r0, #6
    8304:	428b      	cmp	r3, r1
    8306:	d301      	bcc.n	830c <__udivsi3+0xb4>
    8308:	018b      	lsls	r3, r1, #6
    830a:	1ac0      	subs	r0, r0, r3
    830c:	4152      	adcs	r2, r2
    830e:	0943      	lsrs	r3, r0, #5
    8310:	428b      	cmp	r3, r1
    8312:	d301      	bcc.n	8318 <__udivsi3+0xc0>
    8314:	014b      	lsls	r3, r1, #5
    8316:	1ac0      	subs	r0, r0, r3
    8318:	4152      	adcs	r2, r2
    831a:	0903      	lsrs	r3, r0, #4
    831c:	428b      	cmp	r3, r1
    831e:	d301      	bcc.n	8324 <__udivsi3+0xcc>
    8320:	010b      	lsls	r3, r1, #4
    8322:	1ac0      	subs	r0, r0, r3
    8324:	4152      	adcs	r2, r2
    8326:	08c3      	lsrs	r3, r0, #3
    8328:	428b      	cmp	r3, r1
    832a:	d301      	bcc.n	8330 <__udivsi3+0xd8>
    832c:	00cb      	lsls	r3, r1, #3
    832e:	1ac0      	subs	r0, r0, r3
    8330:	4152      	adcs	r2, r2
    8332:	0883      	lsrs	r3, r0, #2
    8334:	428b      	cmp	r3, r1
    8336:	d301      	bcc.n	833c <__udivsi3+0xe4>
    8338:	008b      	lsls	r3, r1, #2
    833a:	1ac0      	subs	r0, r0, r3
    833c:	4152      	adcs	r2, r2
    833e:	0843      	lsrs	r3, r0, #1
    8340:	428b      	cmp	r3, r1
    8342:	d301      	bcc.n	8348 <__udivsi3+0xf0>
    8344:	004b      	lsls	r3, r1, #1
    8346:	1ac0      	subs	r0, r0, r3
    8348:	4152      	adcs	r2, r2
    834a:	1a41      	subs	r1, r0, r1
    834c:	d200      	bcs.n	8350 <__udivsi3+0xf8>
    834e:	4601      	mov	r1, r0
    8350:	4152      	adcs	r2, r2
    8352:	4610      	mov	r0, r2
    8354:	4770      	bx	lr
    8356:	e7ff      	b.n	8358 <__udivsi3+0x100>
    8358:	b501      	push	{r0, lr}
    835a:	2000      	movs	r0, #0
    835c:	f000 f806 	bl	836c <__aeabi_idiv0>
    8360:	bd02      	pop	{r1, pc}
    8362:	46c0      	nop			; (mov r8, r8)

00008364 <__aeabi_uidivmod>:
    8364:	2900      	cmp	r1, #0
    8366:	d0f7      	beq.n	8358 <__udivsi3+0x100>
    8368:	e776      	b.n	8258 <__udivsi3>
    836a:	4770      	bx	lr

0000836c <__aeabi_idiv0>:
    836c:	4770      	bx	lr
    836e:	46c0      	nop			; (mov r8, r8)

00008370 <__aeabi_lmul>:
    8370:	b5f0      	push	{r4, r5, r6, r7, lr}
    8372:	46ce      	mov	lr, r9
    8374:	4647      	mov	r7, r8
    8376:	0415      	lsls	r5, r2, #16
    8378:	0c2d      	lsrs	r5, r5, #16
    837a:	002e      	movs	r6, r5
    837c:	b580      	push	{r7, lr}
    837e:	0407      	lsls	r7, r0, #16
    8380:	0c14      	lsrs	r4, r2, #16
    8382:	0c3f      	lsrs	r7, r7, #16
    8384:	4699      	mov	r9, r3
    8386:	0c03      	lsrs	r3, r0, #16
    8388:	437e      	muls	r6, r7
    838a:	435d      	muls	r5, r3
    838c:	4367      	muls	r7, r4
    838e:	4363      	muls	r3, r4
    8390:	197f      	adds	r7, r7, r5
    8392:	0c34      	lsrs	r4, r6, #16
    8394:	19e4      	adds	r4, r4, r7
    8396:	469c      	mov	ip, r3
    8398:	42a5      	cmp	r5, r4
    839a:	d903      	bls.n	83a4 <__aeabi_lmul+0x34>
    839c:	2380      	movs	r3, #128	; 0x80
    839e:	025b      	lsls	r3, r3, #9
    83a0:	4698      	mov	r8, r3
    83a2:	44c4      	add	ip, r8
    83a4:	464b      	mov	r3, r9
    83a6:	4351      	muls	r1, r2
    83a8:	4343      	muls	r3, r0
    83aa:	0436      	lsls	r6, r6, #16
    83ac:	0c36      	lsrs	r6, r6, #16
    83ae:	0c25      	lsrs	r5, r4, #16
    83b0:	0424      	lsls	r4, r4, #16
    83b2:	4465      	add	r5, ip
    83b4:	19a4      	adds	r4, r4, r6
    83b6:	1859      	adds	r1, r3, r1
    83b8:	1949      	adds	r1, r1, r5
    83ba:	0020      	movs	r0, r4
    83bc:	bc0c      	pop	{r2, r3}
    83be:	4690      	mov	r8, r2
    83c0:	4699      	mov	r9, r3
    83c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000083c4 <__aeabi_dadd>:
    83c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83c6:	4645      	mov	r5, r8
    83c8:	46de      	mov	lr, fp
    83ca:	4657      	mov	r7, sl
    83cc:	464e      	mov	r6, r9
    83ce:	030c      	lsls	r4, r1, #12
    83d0:	b5e0      	push	{r5, r6, r7, lr}
    83d2:	004e      	lsls	r6, r1, #1
    83d4:	0fc9      	lsrs	r1, r1, #31
    83d6:	4688      	mov	r8, r1
    83d8:	000d      	movs	r5, r1
    83da:	0a61      	lsrs	r1, r4, #9
    83dc:	0f44      	lsrs	r4, r0, #29
    83de:	430c      	orrs	r4, r1
    83e0:	00c7      	lsls	r7, r0, #3
    83e2:	0319      	lsls	r1, r3, #12
    83e4:	0058      	lsls	r0, r3, #1
    83e6:	0fdb      	lsrs	r3, r3, #31
    83e8:	469b      	mov	fp, r3
    83ea:	0a4b      	lsrs	r3, r1, #9
    83ec:	0f51      	lsrs	r1, r2, #29
    83ee:	430b      	orrs	r3, r1
    83f0:	0d76      	lsrs	r6, r6, #21
    83f2:	0d40      	lsrs	r0, r0, #21
    83f4:	0019      	movs	r1, r3
    83f6:	00d2      	lsls	r2, r2, #3
    83f8:	45d8      	cmp	r8, fp
    83fa:	d100      	bne.n	83fe <__aeabi_dadd+0x3a>
    83fc:	e0ae      	b.n	855c <__aeabi_dadd+0x198>
    83fe:	1a35      	subs	r5, r6, r0
    8400:	2d00      	cmp	r5, #0
    8402:	dc00      	bgt.n	8406 <__aeabi_dadd+0x42>
    8404:	e0f6      	b.n	85f4 <__aeabi_dadd+0x230>
    8406:	2800      	cmp	r0, #0
    8408:	d10f      	bne.n	842a <__aeabi_dadd+0x66>
    840a:	4313      	orrs	r3, r2
    840c:	d100      	bne.n	8410 <__aeabi_dadd+0x4c>
    840e:	e0db      	b.n	85c8 <__aeabi_dadd+0x204>
    8410:	1e6b      	subs	r3, r5, #1
    8412:	2b00      	cmp	r3, #0
    8414:	d000      	beq.n	8418 <__aeabi_dadd+0x54>
    8416:	e137      	b.n	8688 <__aeabi_dadd+0x2c4>
    8418:	1aba      	subs	r2, r7, r2
    841a:	4297      	cmp	r7, r2
    841c:	41bf      	sbcs	r7, r7
    841e:	1a64      	subs	r4, r4, r1
    8420:	427f      	negs	r7, r7
    8422:	1be4      	subs	r4, r4, r7
    8424:	2601      	movs	r6, #1
    8426:	0017      	movs	r7, r2
    8428:	e024      	b.n	8474 <__aeabi_dadd+0xb0>
    842a:	4bc6      	ldr	r3, [pc, #792]	; (8744 <__aeabi_dadd+0x380>)
    842c:	429e      	cmp	r6, r3
    842e:	d04d      	beq.n	84cc <__aeabi_dadd+0x108>
    8430:	2380      	movs	r3, #128	; 0x80
    8432:	041b      	lsls	r3, r3, #16
    8434:	4319      	orrs	r1, r3
    8436:	2d38      	cmp	r5, #56	; 0x38
    8438:	dd00      	ble.n	843c <__aeabi_dadd+0x78>
    843a:	e107      	b.n	864c <__aeabi_dadd+0x288>
    843c:	2d1f      	cmp	r5, #31
    843e:	dd00      	ble.n	8442 <__aeabi_dadd+0x7e>
    8440:	e138      	b.n	86b4 <__aeabi_dadd+0x2f0>
    8442:	2020      	movs	r0, #32
    8444:	1b43      	subs	r3, r0, r5
    8446:	469a      	mov	sl, r3
    8448:	000b      	movs	r3, r1
    844a:	4650      	mov	r0, sl
    844c:	4083      	lsls	r3, r0
    844e:	4699      	mov	r9, r3
    8450:	0013      	movs	r3, r2
    8452:	4648      	mov	r0, r9
    8454:	40eb      	lsrs	r3, r5
    8456:	4318      	orrs	r0, r3
    8458:	0003      	movs	r3, r0
    845a:	4650      	mov	r0, sl
    845c:	4082      	lsls	r2, r0
    845e:	1e50      	subs	r0, r2, #1
    8460:	4182      	sbcs	r2, r0
    8462:	40e9      	lsrs	r1, r5
    8464:	431a      	orrs	r2, r3
    8466:	1aba      	subs	r2, r7, r2
    8468:	1a61      	subs	r1, r4, r1
    846a:	4297      	cmp	r7, r2
    846c:	41a4      	sbcs	r4, r4
    846e:	0017      	movs	r7, r2
    8470:	4264      	negs	r4, r4
    8472:	1b0c      	subs	r4, r1, r4
    8474:	0223      	lsls	r3, r4, #8
    8476:	d562      	bpl.n	853e <__aeabi_dadd+0x17a>
    8478:	0264      	lsls	r4, r4, #9
    847a:	0a65      	lsrs	r5, r4, #9
    847c:	2d00      	cmp	r5, #0
    847e:	d100      	bne.n	8482 <__aeabi_dadd+0xbe>
    8480:	e0df      	b.n	8642 <__aeabi_dadd+0x27e>
    8482:	0028      	movs	r0, r5
    8484:	f001 fbe4 	bl	9c50 <__clzsi2>
    8488:	0003      	movs	r3, r0
    848a:	3b08      	subs	r3, #8
    848c:	2b1f      	cmp	r3, #31
    848e:	dd00      	ble.n	8492 <__aeabi_dadd+0xce>
    8490:	e0d2      	b.n	8638 <__aeabi_dadd+0x274>
    8492:	2220      	movs	r2, #32
    8494:	003c      	movs	r4, r7
    8496:	1ad2      	subs	r2, r2, r3
    8498:	409d      	lsls	r5, r3
    849a:	40d4      	lsrs	r4, r2
    849c:	409f      	lsls	r7, r3
    849e:	4325      	orrs	r5, r4
    84a0:	429e      	cmp	r6, r3
    84a2:	dd00      	ble.n	84a6 <__aeabi_dadd+0xe2>
    84a4:	e0c4      	b.n	8630 <__aeabi_dadd+0x26c>
    84a6:	1b9e      	subs	r6, r3, r6
    84a8:	1c73      	adds	r3, r6, #1
    84aa:	2b1f      	cmp	r3, #31
    84ac:	dd00      	ble.n	84b0 <__aeabi_dadd+0xec>
    84ae:	e0f1      	b.n	8694 <__aeabi_dadd+0x2d0>
    84b0:	2220      	movs	r2, #32
    84b2:	0038      	movs	r0, r7
    84b4:	0029      	movs	r1, r5
    84b6:	1ad2      	subs	r2, r2, r3
    84b8:	40d8      	lsrs	r0, r3
    84ba:	4091      	lsls	r1, r2
    84bc:	4097      	lsls	r7, r2
    84be:	002c      	movs	r4, r5
    84c0:	4301      	orrs	r1, r0
    84c2:	1e78      	subs	r0, r7, #1
    84c4:	4187      	sbcs	r7, r0
    84c6:	40dc      	lsrs	r4, r3
    84c8:	2600      	movs	r6, #0
    84ca:	430f      	orrs	r7, r1
    84cc:	077b      	lsls	r3, r7, #29
    84ce:	d009      	beq.n	84e4 <__aeabi_dadd+0x120>
    84d0:	230f      	movs	r3, #15
    84d2:	403b      	ands	r3, r7
    84d4:	2b04      	cmp	r3, #4
    84d6:	d005      	beq.n	84e4 <__aeabi_dadd+0x120>
    84d8:	1d3b      	adds	r3, r7, #4
    84da:	42bb      	cmp	r3, r7
    84dc:	41bf      	sbcs	r7, r7
    84de:	427f      	negs	r7, r7
    84e0:	19e4      	adds	r4, r4, r7
    84e2:	001f      	movs	r7, r3
    84e4:	0223      	lsls	r3, r4, #8
    84e6:	d52c      	bpl.n	8542 <__aeabi_dadd+0x17e>
    84e8:	4b96      	ldr	r3, [pc, #600]	; (8744 <__aeabi_dadd+0x380>)
    84ea:	3601      	adds	r6, #1
    84ec:	429e      	cmp	r6, r3
    84ee:	d100      	bne.n	84f2 <__aeabi_dadd+0x12e>
    84f0:	e09a      	b.n	8628 <__aeabi_dadd+0x264>
    84f2:	4645      	mov	r5, r8
    84f4:	4b94      	ldr	r3, [pc, #592]	; (8748 <__aeabi_dadd+0x384>)
    84f6:	08ff      	lsrs	r7, r7, #3
    84f8:	401c      	ands	r4, r3
    84fa:	0760      	lsls	r0, r4, #29
    84fc:	0576      	lsls	r6, r6, #21
    84fe:	0264      	lsls	r4, r4, #9
    8500:	4307      	orrs	r7, r0
    8502:	0b24      	lsrs	r4, r4, #12
    8504:	0d76      	lsrs	r6, r6, #21
    8506:	2100      	movs	r1, #0
    8508:	0324      	lsls	r4, r4, #12
    850a:	0b23      	lsrs	r3, r4, #12
    850c:	0d0c      	lsrs	r4, r1, #20
    850e:	4a8f      	ldr	r2, [pc, #572]	; (874c <__aeabi_dadd+0x388>)
    8510:	0524      	lsls	r4, r4, #20
    8512:	431c      	orrs	r4, r3
    8514:	4014      	ands	r4, r2
    8516:	0533      	lsls	r3, r6, #20
    8518:	4323      	orrs	r3, r4
    851a:	005b      	lsls	r3, r3, #1
    851c:	07ed      	lsls	r5, r5, #31
    851e:	085b      	lsrs	r3, r3, #1
    8520:	432b      	orrs	r3, r5
    8522:	0038      	movs	r0, r7
    8524:	0019      	movs	r1, r3
    8526:	bc3c      	pop	{r2, r3, r4, r5}
    8528:	4690      	mov	r8, r2
    852a:	4699      	mov	r9, r3
    852c:	46a2      	mov	sl, r4
    852e:	46ab      	mov	fp, r5
    8530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8532:	4664      	mov	r4, ip
    8534:	4304      	orrs	r4, r0
    8536:	d100      	bne.n	853a <__aeabi_dadd+0x176>
    8538:	e211      	b.n	895e <__aeabi_dadd+0x59a>
    853a:	0004      	movs	r4, r0
    853c:	4667      	mov	r7, ip
    853e:	077b      	lsls	r3, r7, #29
    8540:	d1c6      	bne.n	84d0 <__aeabi_dadd+0x10c>
    8542:	4645      	mov	r5, r8
    8544:	0760      	lsls	r0, r4, #29
    8546:	08ff      	lsrs	r7, r7, #3
    8548:	4307      	orrs	r7, r0
    854a:	08e4      	lsrs	r4, r4, #3
    854c:	4b7d      	ldr	r3, [pc, #500]	; (8744 <__aeabi_dadd+0x380>)
    854e:	429e      	cmp	r6, r3
    8550:	d030      	beq.n	85b4 <__aeabi_dadd+0x1f0>
    8552:	0324      	lsls	r4, r4, #12
    8554:	0576      	lsls	r6, r6, #21
    8556:	0b24      	lsrs	r4, r4, #12
    8558:	0d76      	lsrs	r6, r6, #21
    855a:	e7d4      	b.n	8506 <__aeabi_dadd+0x142>
    855c:	1a33      	subs	r3, r6, r0
    855e:	469a      	mov	sl, r3
    8560:	2b00      	cmp	r3, #0
    8562:	dd78      	ble.n	8656 <__aeabi_dadd+0x292>
    8564:	2800      	cmp	r0, #0
    8566:	d031      	beq.n	85cc <__aeabi_dadd+0x208>
    8568:	4876      	ldr	r0, [pc, #472]	; (8744 <__aeabi_dadd+0x380>)
    856a:	4286      	cmp	r6, r0
    856c:	d0ae      	beq.n	84cc <__aeabi_dadd+0x108>
    856e:	2080      	movs	r0, #128	; 0x80
    8570:	0400      	lsls	r0, r0, #16
    8572:	4301      	orrs	r1, r0
    8574:	4653      	mov	r3, sl
    8576:	2b38      	cmp	r3, #56	; 0x38
    8578:	dc00      	bgt.n	857c <__aeabi_dadd+0x1b8>
    857a:	e0e9      	b.n	8750 <__aeabi_dadd+0x38c>
    857c:	430a      	orrs	r2, r1
    857e:	1e51      	subs	r1, r2, #1
    8580:	418a      	sbcs	r2, r1
    8582:	2100      	movs	r1, #0
    8584:	19d2      	adds	r2, r2, r7
    8586:	42ba      	cmp	r2, r7
    8588:	41bf      	sbcs	r7, r7
    858a:	1909      	adds	r1, r1, r4
    858c:	427c      	negs	r4, r7
    858e:	0017      	movs	r7, r2
    8590:	190c      	adds	r4, r1, r4
    8592:	0223      	lsls	r3, r4, #8
    8594:	d5d3      	bpl.n	853e <__aeabi_dadd+0x17a>
    8596:	4b6b      	ldr	r3, [pc, #428]	; (8744 <__aeabi_dadd+0x380>)
    8598:	3601      	adds	r6, #1
    859a:	429e      	cmp	r6, r3
    859c:	d100      	bne.n	85a0 <__aeabi_dadd+0x1dc>
    859e:	e13a      	b.n	8816 <__aeabi_dadd+0x452>
    85a0:	2001      	movs	r0, #1
    85a2:	4b69      	ldr	r3, [pc, #420]	; (8748 <__aeabi_dadd+0x384>)
    85a4:	401c      	ands	r4, r3
    85a6:	087b      	lsrs	r3, r7, #1
    85a8:	4007      	ands	r7, r0
    85aa:	431f      	orrs	r7, r3
    85ac:	07e0      	lsls	r0, r4, #31
    85ae:	4307      	orrs	r7, r0
    85b0:	0864      	lsrs	r4, r4, #1
    85b2:	e78b      	b.n	84cc <__aeabi_dadd+0x108>
    85b4:	0023      	movs	r3, r4
    85b6:	433b      	orrs	r3, r7
    85b8:	d100      	bne.n	85bc <__aeabi_dadd+0x1f8>
    85ba:	e1cb      	b.n	8954 <__aeabi_dadd+0x590>
    85bc:	2280      	movs	r2, #128	; 0x80
    85be:	0312      	lsls	r2, r2, #12
    85c0:	4314      	orrs	r4, r2
    85c2:	0324      	lsls	r4, r4, #12
    85c4:	0b24      	lsrs	r4, r4, #12
    85c6:	e79e      	b.n	8506 <__aeabi_dadd+0x142>
    85c8:	002e      	movs	r6, r5
    85ca:	e77f      	b.n	84cc <__aeabi_dadd+0x108>
    85cc:	0008      	movs	r0, r1
    85ce:	4310      	orrs	r0, r2
    85d0:	d100      	bne.n	85d4 <__aeabi_dadd+0x210>
    85d2:	e0b4      	b.n	873e <__aeabi_dadd+0x37a>
    85d4:	1e58      	subs	r0, r3, #1
    85d6:	2800      	cmp	r0, #0
    85d8:	d000      	beq.n	85dc <__aeabi_dadd+0x218>
    85da:	e0de      	b.n	879a <__aeabi_dadd+0x3d6>
    85dc:	18ba      	adds	r2, r7, r2
    85de:	42ba      	cmp	r2, r7
    85e0:	419b      	sbcs	r3, r3
    85e2:	1864      	adds	r4, r4, r1
    85e4:	425b      	negs	r3, r3
    85e6:	18e4      	adds	r4, r4, r3
    85e8:	0017      	movs	r7, r2
    85ea:	2601      	movs	r6, #1
    85ec:	0223      	lsls	r3, r4, #8
    85ee:	d5a6      	bpl.n	853e <__aeabi_dadd+0x17a>
    85f0:	2602      	movs	r6, #2
    85f2:	e7d5      	b.n	85a0 <__aeabi_dadd+0x1dc>
    85f4:	2d00      	cmp	r5, #0
    85f6:	d16e      	bne.n	86d6 <__aeabi_dadd+0x312>
    85f8:	1c70      	adds	r0, r6, #1
    85fa:	0540      	lsls	r0, r0, #21
    85fc:	0d40      	lsrs	r0, r0, #21
    85fe:	2801      	cmp	r0, #1
    8600:	dc00      	bgt.n	8604 <__aeabi_dadd+0x240>
    8602:	e0f9      	b.n	87f8 <__aeabi_dadd+0x434>
    8604:	1ab8      	subs	r0, r7, r2
    8606:	4684      	mov	ip, r0
    8608:	4287      	cmp	r7, r0
    860a:	4180      	sbcs	r0, r0
    860c:	1ae5      	subs	r5, r4, r3
    860e:	4240      	negs	r0, r0
    8610:	1a2d      	subs	r5, r5, r0
    8612:	0228      	lsls	r0, r5, #8
    8614:	d400      	bmi.n	8618 <__aeabi_dadd+0x254>
    8616:	e089      	b.n	872c <__aeabi_dadd+0x368>
    8618:	1bd7      	subs	r7, r2, r7
    861a:	42ba      	cmp	r2, r7
    861c:	4192      	sbcs	r2, r2
    861e:	1b1c      	subs	r4, r3, r4
    8620:	4252      	negs	r2, r2
    8622:	1aa5      	subs	r5, r4, r2
    8624:	46d8      	mov	r8, fp
    8626:	e729      	b.n	847c <__aeabi_dadd+0xb8>
    8628:	4645      	mov	r5, r8
    862a:	2400      	movs	r4, #0
    862c:	2700      	movs	r7, #0
    862e:	e76a      	b.n	8506 <__aeabi_dadd+0x142>
    8630:	4c45      	ldr	r4, [pc, #276]	; (8748 <__aeabi_dadd+0x384>)
    8632:	1af6      	subs	r6, r6, r3
    8634:	402c      	ands	r4, r5
    8636:	e749      	b.n	84cc <__aeabi_dadd+0x108>
    8638:	003d      	movs	r5, r7
    863a:	3828      	subs	r0, #40	; 0x28
    863c:	4085      	lsls	r5, r0
    863e:	2700      	movs	r7, #0
    8640:	e72e      	b.n	84a0 <__aeabi_dadd+0xdc>
    8642:	0038      	movs	r0, r7
    8644:	f001 fb04 	bl	9c50 <__clzsi2>
    8648:	3020      	adds	r0, #32
    864a:	e71d      	b.n	8488 <__aeabi_dadd+0xc4>
    864c:	430a      	orrs	r2, r1
    864e:	1e51      	subs	r1, r2, #1
    8650:	418a      	sbcs	r2, r1
    8652:	2100      	movs	r1, #0
    8654:	e707      	b.n	8466 <__aeabi_dadd+0xa2>
    8656:	2b00      	cmp	r3, #0
    8658:	d000      	beq.n	865c <__aeabi_dadd+0x298>
    865a:	e0f3      	b.n	8844 <__aeabi_dadd+0x480>
    865c:	1c70      	adds	r0, r6, #1
    865e:	0543      	lsls	r3, r0, #21
    8660:	0d5b      	lsrs	r3, r3, #21
    8662:	2b01      	cmp	r3, #1
    8664:	dc00      	bgt.n	8668 <__aeabi_dadd+0x2a4>
    8666:	e0ad      	b.n	87c4 <__aeabi_dadd+0x400>
    8668:	4b36      	ldr	r3, [pc, #216]	; (8744 <__aeabi_dadd+0x380>)
    866a:	4298      	cmp	r0, r3
    866c:	d100      	bne.n	8670 <__aeabi_dadd+0x2ac>
    866e:	e0d1      	b.n	8814 <__aeabi_dadd+0x450>
    8670:	18ba      	adds	r2, r7, r2
    8672:	42ba      	cmp	r2, r7
    8674:	41bf      	sbcs	r7, r7
    8676:	1864      	adds	r4, r4, r1
    8678:	427f      	negs	r7, r7
    867a:	19e4      	adds	r4, r4, r7
    867c:	07e7      	lsls	r7, r4, #31
    867e:	0852      	lsrs	r2, r2, #1
    8680:	4317      	orrs	r7, r2
    8682:	0864      	lsrs	r4, r4, #1
    8684:	0006      	movs	r6, r0
    8686:	e721      	b.n	84cc <__aeabi_dadd+0x108>
    8688:	482e      	ldr	r0, [pc, #184]	; (8744 <__aeabi_dadd+0x380>)
    868a:	4285      	cmp	r5, r0
    868c:	d100      	bne.n	8690 <__aeabi_dadd+0x2cc>
    868e:	e093      	b.n	87b8 <__aeabi_dadd+0x3f4>
    8690:	001d      	movs	r5, r3
    8692:	e6d0      	b.n	8436 <__aeabi_dadd+0x72>
    8694:	0029      	movs	r1, r5
    8696:	3e1f      	subs	r6, #31
    8698:	40f1      	lsrs	r1, r6
    869a:	2b20      	cmp	r3, #32
    869c:	d100      	bne.n	86a0 <__aeabi_dadd+0x2dc>
    869e:	e08d      	b.n	87bc <__aeabi_dadd+0x3f8>
    86a0:	2240      	movs	r2, #64	; 0x40
    86a2:	1ad3      	subs	r3, r2, r3
    86a4:	409d      	lsls	r5, r3
    86a6:	432f      	orrs	r7, r5
    86a8:	1e7d      	subs	r5, r7, #1
    86aa:	41af      	sbcs	r7, r5
    86ac:	2400      	movs	r4, #0
    86ae:	430f      	orrs	r7, r1
    86b0:	2600      	movs	r6, #0
    86b2:	e744      	b.n	853e <__aeabi_dadd+0x17a>
    86b4:	002b      	movs	r3, r5
    86b6:	0008      	movs	r0, r1
    86b8:	3b20      	subs	r3, #32
    86ba:	40d8      	lsrs	r0, r3
    86bc:	0003      	movs	r3, r0
    86be:	2d20      	cmp	r5, #32
    86c0:	d100      	bne.n	86c4 <__aeabi_dadd+0x300>
    86c2:	e07d      	b.n	87c0 <__aeabi_dadd+0x3fc>
    86c4:	2040      	movs	r0, #64	; 0x40
    86c6:	1b45      	subs	r5, r0, r5
    86c8:	40a9      	lsls	r1, r5
    86ca:	430a      	orrs	r2, r1
    86cc:	1e51      	subs	r1, r2, #1
    86ce:	418a      	sbcs	r2, r1
    86d0:	2100      	movs	r1, #0
    86d2:	431a      	orrs	r2, r3
    86d4:	e6c7      	b.n	8466 <__aeabi_dadd+0xa2>
    86d6:	2e00      	cmp	r6, #0
    86d8:	d050      	beq.n	877c <__aeabi_dadd+0x3b8>
    86da:	4e1a      	ldr	r6, [pc, #104]	; (8744 <__aeabi_dadd+0x380>)
    86dc:	42b0      	cmp	r0, r6
    86de:	d057      	beq.n	8790 <__aeabi_dadd+0x3cc>
    86e0:	2680      	movs	r6, #128	; 0x80
    86e2:	426b      	negs	r3, r5
    86e4:	4699      	mov	r9, r3
    86e6:	0436      	lsls	r6, r6, #16
    86e8:	4334      	orrs	r4, r6
    86ea:	464b      	mov	r3, r9
    86ec:	2b38      	cmp	r3, #56	; 0x38
    86ee:	dd00      	ble.n	86f2 <__aeabi_dadd+0x32e>
    86f0:	e0d6      	b.n	88a0 <__aeabi_dadd+0x4dc>
    86f2:	2b1f      	cmp	r3, #31
    86f4:	dd00      	ble.n	86f8 <__aeabi_dadd+0x334>
    86f6:	e135      	b.n	8964 <__aeabi_dadd+0x5a0>
    86f8:	2620      	movs	r6, #32
    86fa:	1af5      	subs	r5, r6, r3
    86fc:	0026      	movs	r6, r4
    86fe:	40ae      	lsls	r6, r5
    8700:	46b2      	mov	sl, r6
    8702:	003e      	movs	r6, r7
    8704:	40de      	lsrs	r6, r3
    8706:	46ac      	mov	ip, r5
    8708:	0035      	movs	r5, r6
    870a:	4656      	mov	r6, sl
    870c:	432e      	orrs	r6, r5
    870e:	4665      	mov	r5, ip
    8710:	40af      	lsls	r7, r5
    8712:	1e7d      	subs	r5, r7, #1
    8714:	41af      	sbcs	r7, r5
    8716:	40dc      	lsrs	r4, r3
    8718:	4337      	orrs	r7, r6
    871a:	1bd7      	subs	r7, r2, r7
    871c:	42ba      	cmp	r2, r7
    871e:	4192      	sbcs	r2, r2
    8720:	1b0c      	subs	r4, r1, r4
    8722:	4252      	negs	r2, r2
    8724:	1aa4      	subs	r4, r4, r2
    8726:	0006      	movs	r6, r0
    8728:	46d8      	mov	r8, fp
    872a:	e6a3      	b.n	8474 <__aeabi_dadd+0xb0>
    872c:	4664      	mov	r4, ip
    872e:	4667      	mov	r7, ip
    8730:	432c      	orrs	r4, r5
    8732:	d000      	beq.n	8736 <__aeabi_dadd+0x372>
    8734:	e6a2      	b.n	847c <__aeabi_dadd+0xb8>
    8736:	2500      	movs	r5, #0
    8738:	2600      	movs	r6, #0
    873a:	2700      	movs	r7, #0
    873c:	e706      	b.n	854c <__aeabi_dadd+0x188>
    873e:	001e      	movs	r6, r3
    8740:	e6c4      	b.n	84cc <__aeabi_dadd+0x108>
    8742:	46c0      	nop			; (mov r8, r8)
    8744:	000007ff 	.word	0x000007ff
    8748:	ff7fffff 	.word	0xff7fffff
    874c:	800fffff 	.word	0x800fffff
    8750:	2b1f      	cmp	r3, #31
    8752:	dc63      	bgt.n	881c <__aeabi_dadd+0x458>
    8754:	2020      	movs	r0, #32
    8756:	1ac3      	subs	r3, r0, r3
    8758:	0008      	movs	r0, r1
    875a:	4098      	lsls	r0, r3
    875c:	469c      	mov	ip, r3
    875e:	4683      	mov	fp, r0
    8760:	4653      	mov	r3, sl
    8762:	0010      	movs	r0, r2
    8764:	40d8      	lsrs	r0, r3
    8766:	0003      	movs	r3, r0
    8768:	4658      	mov	r0, fp
    876a:	4318      	orrs	r0, r3
    876c:	4663      	mov	r3, ip
    876e:	409a      	lsls	r2, r3
    8770:	1e53      	subs	r3, r2, #1
    8772:	419a      	sbcs	r2, r3
    8774:	4653      	mov	r3, sl
    8776:	4302      	orrs	r2, r0
    8778:	40d9      	lsrs	r1, r3
    877a:	e703      	b.n	8584 <__aeabi_dadd+0x1c0>
    877c:	0026      	movs	r6, r4
    877e:	433e      	orrs	r6, r7
    8780:	d006      	beq.n	8790 <__aeabi_dadd+0x3cc>
    8782:	43eb      	mvns	r3, r5
    8784:	4699      	mov	r9, r3
    8786:	2b00      	cmp	r3, #0
    8788:	d0c7      	beq.n	871a <__aeabi_dadd+0x356>
    878a:	4e94      	ldr	r6, [pc, #592]	; (89dc <__aeabi_dadd+0x618>)
    878c:	42b0      	cmp	r0, r6
    878e:	d1ac      	bne.n	86ea <__aeabi_dadd+0x326>
    8790:	000c      	movs	r4, r1
    8792:	0017      	movs	r7, r2
    8794:	0006      	movs	r6, r0
    8796:	46d8      	mov	r8, fp
    8798:	e698      	b.n	84cc <__aeabi_dadd+0x108>
    879a:	4b90      	ldr	r3, [pc, #576]	; (89dc <__aeabi_dadd+0x618>)
    879c:	459a      	cmp	sl, r3
    879e:	d00b      	beq.n	87b8 <__aeabi_dadd+0x3f4>
    87a0:	4682      	mov	sl, r0
    87a2:	e6e7      	b.n	8574 <__aeabi_dadd+0x1b0>
    87a4:	2800      	cmp	r0, #0
    87a6:	d000      	beq.n	87aa <__aeabi_dadd+0x3e6>
    87a8:	e09e      	b.n	88e8 <__aeabi_dadd+0x524>
    87aa:	0018      	movs	r0, r3
    87ac:	4310      	orrs	r0, r2
    87ae:	d100      	bne.n	87b2 <__aeabi_dadd+0x3ee>
    87b0:	e0e9      	b.n	8986 <__aeabi_dadd+0x5c2>
    87b2:	001c      	movs	r4, r3
    87b4:	0017      	movs	r7, r2
    87b6:	46d8      	mov	r8, fp
    87b8:	4e88      	ldr	r6, [pc, #544]	; (89dc <__aeabi_dadd+0x618>)
    87ba:	e687      	b.n	84cc <__aeabi_dadd+0x108>
    87bc:	2500      	movs	r5, #0
    87be:	e772      	b.n	86a6 <__aeabi_dadd+0x2e2>
    87c0:	2100      	movs	r1, #0
    87c2:	e782      	b.n	86ca <__aeabi_dadd+0x306>
    87c4:	0023      	movs	r3, r4
    87c6:	433b      	orrs	r3, r7
    87c8:	2e00      	cmp	r6, #0
    87ca:	d000      	beq.n	87ce <__aeabi_dadd+0x40a>
    87cc:	e0ab      	b.n	8926 <__aeabi_dadd+0x562>
    87ce:	2b00      	cmp	r3, #0
    87d0:	d100      	bne.n	87d4 <__aeabi_dadd+0x410>
    87d2:	e0e7      	b.n	89a4 <__aeabi_dadd+0x5e0>
    87d4:	000b      	movs	r3, r1
    87d6:	4313      	orrs	r3, r2
    87d8:	d100      	bne.n	87dc <__aeabi_dadd+0x418>
    87da:	e677      	b.n	84cc <__aeabi_dadd+0x108>
    87dc:	18ba      	adds	r2, r7, r2
    87de:	42ba      	cmp	r2, r7
    87e0:	41bf      	sbcs	r7, r7
    87e2:	1864      	adds	r4, r4, r1
    87e4:	427f      	negs	r7, r7
    87e6:	19e4      	adds	r4, r4, r7
    87e8:	0223      	lsls	r3, r4, #8
    87ea:	d400      	bmi.n	87ee <__aeabi_dadd+0x42a>
    87ec:	e0f2      	b.n	89d4 <__aeabi_dadd+0x610>
    87ee:	4b7c      	ldr	r3, [pc, #496]	; (89e0 <__aeabi_dadd+0x61c>)
    87f0:	0017      	movs	r7, r2
    87f2:	401c      	ands	r4, r3
    87f4:	0006      	movs	r6, r0
    87f6:	e669      	b.n	84cc <__aeabi_dadd+0x108>
    87f8:	0020      	movs	r0, r4
    87fa:	4338      	orrs	r0, r7
    87fc:	2e00      	cmp	r6, #0
    87fe:	d1d1      	bne.n	87a4 <__aeabi_dadd+0x3e0>
    8800:	2800      	cmp	r0, #0
    8802:	d15b      	bne.n	88bc <__aeabi_dadd+0x4f8>
    8804:	001c      	movs	r4, r3
    8806:	4314      	orrs	r4, r2
    8808:	d100      	bne.n	880c <__aeabi_dadd+0x448>
    880a:	e0a8      	b.n	895e <__aeabi_dadd+0x59a>
    880c:	001c      	movs	r4, r3
    880e:	0017      	movs	r7, r2
    8810:	46d8      	mov	r8, fp
    8812:	e65b      	b.n	84cc <__aeabi_dadd+0x108>
    8814:	0006      	movs	r6, r0
    8816:	2400      	movs	r4, #0
    8818:	2700      	movs	r7, #0
    881a:	e697      	b.n	854c <__aeabi_dadd+0x188>
    881c:	4650      	mov	r0, sl
    881e:	000b      	movs	r3, r1
    8820:	3820      	subs	r0, #32
    8822:	40c3      	lsrs	r3, r0
    8824:	4699      	mov	r9, r3
    8826:	4653      	mov	r3, sl
    8828:	2b20      	cmp	r3, #32
    882a:	d100      	bne.n	882e <__aeabi_dadd+0x46a>
    882c:	e095      	b.n	895a <__aeabi_dadd+0x596>
    882e:	2340      	movs	r3, #64	; 0x40
    8830:	4650      	mov	r0, sl
    8832:	1a1b      	subs	r3, r3, r0
    8834:	4099      	lsls	r1, r3
    8836:	430a      	orrs	r2, r1
    8838:	1e51      	subs	r1, r2, #1
    883a:	418a      	sbcs	r2, r1
    883c:	464b      	mov	r3, r9
    883e:	2100      	movs	r1, #0
    8840:	431a      	orrs	r2, r3
    8842:	e69f      	b.n	8584 <__aeabi_dadd+0x1c0>
    8844:	2e00      	cmp	r6, #0
    8846:	d130      	bne.n	88aa <__aeabi_dadd+0x4e6>
    8848:	0026      	movs	r6, r4
    884a:	433e      	orrs	r6, r7
    884c:	d067      	beq.n	891e <__aeabi_dadd+0x55a>
    884e:	43db      	mvns	r3, r3
    8850:	469a      	mov	sl, r3
    8852:	2b00      	cmp	r3, #0
    8854:	d01c      	beq.n	8890 <__aeabi_dadd+0x4cc>
    8856:	4e61      	ldr	r6, [pc, #388]	; (89dc <__aeabi_dadd+0x618>)
    8858:	42b0      	cmp	r0, r6
    885a:	d060      	beq.n	891e <__aeabi_dadd+0x55a>
    885c:	4653      	mov	r3, sl
    885e:	2b38      	cmp	r3, #56	; 0x38
    8860:	dd00      	ble.n	8864 <__aeabi_dadd+0x4a0>
    8862:	e096      	b.n	8992 <__aeabi_dadd+0x5ce>
    8864:	2b1f      	cmp	r3, #31
    8866:	dd00      	ble.n	886a <__aeabi_dadd+0x4a6>
    8868:	e09f      	b.n	89aa <__aeabi_dadd+0x5e6>
    886a:	2620      	movs	r6, #32
    886c:	1af3      	subs	r3, r6, r3
    886e:	0026      	movs	r6, r4
    8870:	409e      	lsls	r6, r3
    8872:	469c      	mov	ip, r3
    8874:	46b3      	mov	fp, r6
    8876:	4653      	mov	r3, sl
    8878:	003e      	movs	r6, r7
    887a:	40de      	lsrs	r6, r3
    887c:	0033      	movs	r3, r6
    887e:	465e      	mov	r6, fp
    8880:	431e      	orrs	r6, r3
    8882:	4663      	mov	r3, ip
    8884:	409f      	lsls	r7, r3
    8886:	1e7b      	subs	r3, r7, #1
    8888:	419f      	sbcs	r7, r3
    888a:	4653      	mov	r3, sl
    888c:	40dc      	lsrs	r4, r3
    888e:	4337      	orrs	r7, r6
    8890:	18bf      	adds	r7, r7, r2
    8892:	4297      	cmp	r7, r2
    8894:	4192      	sbcs	r2, r2
    8896:	1864      	adds	r4, r4, r1
    8898:	4252      	negs	r2, r2
    889a:	18a4      	adds	r4, r4, r2
    889c:	0006      	movs	r6, r0
    889e:	e678      	b.n	8592 <__aeabi_dadd+0x1ce>
    88a0:	4327      	orrs	r7, r4
    88a2:	1e7c      	subs	r4, r7, #1
    88a4:	41a7      	sbcs	r7, r4
    88a6:	2400      	movs	r4, #0
    88a8:	e737      	b.n	871a <__aeabi_dadd+0x356>
    88aa:	4e4c      	ldr	r6, [pc, #304]	; (89dc <__aeabi_dadd+0x618>)
    88ac:	42b0      	cmp	r0, r6
    88ae:	d036      	beq.n	891e <__aeabi_dadd+0x55a>
    88b0:	2680      	movs	r6, #128	; 0x80
    88b2:	425b      	negs	r3, r3
    88b4:	0436      	lsls	r6, r6, #16
    88b6:	469a      	mov	sl, r3
    88b8:	4334      	orrs	r4, r6
    88ba:	e7cf      	b.n	885c <__aeabi_dadd+0x498>
    88bc:	0018      	movs	r0, r3
    88be:	4310      	orrs	r0, r2
    88c0:	d100      	bne.n	88c4 <__aeabi_dadd+0x500>
    88c2:	e603      	b.n	84cc <__aeabi_dadd+0x108>
    88c4:	1ab8      	subs	r0, r7, r2
    88c6:	4684      	mov	ip, r0
    88c8:	4567      	cmp	r7, ip
    88ca:	41ad      	sbcs	r5, r5
    88cc:	1ae0      	subs	r0, r4, r3
    88ce:	426d      	negs	r5, r5
    88d0:	1b40      	subs	r0, r0, r5
    88d2:	0205      	lsls	r5, r0, #8
    88d4:	d400      	bmi.n	88d8 <__aeabi_dadd+0x514>
    88d6:	e62c      	b.n	8532 <__aeabi_dadd+0x16e>
    88d8:	1bd7      	subs	r7, r2, r7
    88da:	42ba      	cmp	r2, r7
    88dc:	4192      	sbcs	r2, r2
    88de:	1b1c      	subs	r4, r3, r4
    88e0:	4252      	negs	r2, r2
    88e2:	1aa4      	subs	r4, r4, r2
    88e4:	46d8      	mov	r8, fp
    88e6:	e5f1      	b.n	84cc <__aeabi_dadd+0x108>
    88e8:	0018      	movs	r0, r3
    88ea:	4310      	orrs	r0, r2
    88ec:	d100      	bne.n	88f0 <__aeabi_dadd+0x52c>
    88ee:	e763      	b.n	87b8 <__aeabi_dadd+0x3f4>
    88f0:	08f8      	lsrs	r0, r7, #3
    88f2:	0767      	lsls	r7, r4, #29
    88f4:	4307      	orrs	r7, r0
    88f6:	2080      	movs	r0, #128	; 0x80
    88f8:	08e4      	lsrs	r4, r4, #3
    88fa:	0300      	lsls	r0, r0, #12
    88fc:	4204      	tst	r4, r0
    88fe:	d008      	beq.n	8912 <__aeabi_dadd+0x54e>
    8900:	08dd      	lsrs	r5, r3, #3
    8902:	4205      	tst	r5, r0
    8904:	d105      	bne.n	8912 <__aeabi_dadd+0x54e>
    8906:	08d2      	lsrs	r2, r2, #3
    8908:	0759      	lsls	r1, r3, #29
    890a:	4311      	orrs	r1, r2
    890c:	000f      	movs	r7, r1
    890e:	002c      	movs	r4, r5
    8910:	46d8      	mov	r8, fp
    8912:	0f7b      	lsrs	r3, r7, #29
    8914:	00e4      	lsls	r4, r4, #3
    8916:	431c      	orrs	r4, r3
    8918:	00ff      	lsls	r7, r7, #3
    891a:	4e30      	ldr	r6, [pc, #192]	; (89dc <__aeabi_dadd+0x618>)
    891c:	e5d6      	b.n	84cc <__aeabi_dadd+0x108>
    891e:	000c      	movs	r4, r1
    8920:	0017      	movs	r7, r2
    8922:	0006      	movs	r6, r0
    8924:	e5d2      	b.n	84cc <__aeabi_dadd+0x108>
    8926:	2b00      	cmp	r3, #0
    8928:	d038      	beq.n	899c <__aeabi_dadd+0x5d8>
    892a:	000b      	movs	r3, r1
    892c:	4313      	orrs	r3, r2
    892e:	d100      	bne.n	8932 <__aeabi_dadd+0x56e>
    8930:	e742      	b.n	87b8 <__aeabi_dadd+0x3f4>
    8932:	08f8      	lsrs	r0, r7, #3
    8934:	0767      	lsls	r7, r4, #29
    8936:	4307      	orrs	r7, r0
    8938:	2080      	movs	r0, #128	; 0x80
    893a:	08e4      	lsrs	r4, r4, #3
    893c:	0300      	lsls	r0, r0, #12
    893e:	4204      	tst	r4, r0
    8940:	d0e7      	beq.n	8912 <__aeabi_dadd+0x54e>
    8942:	08cb      	lsrs	r3, r1, #3
    8944:	4203      	tst	r3, r0
    8946:	d1e4      	bne.n	8912 <__aeabi_dadd+0x54e>
    8948:	08d2      	lsrs	r2, r2, #3
    894a:	0749      	lsls	r1, r1, #29
    894c:	4311      	orrs	r1, r2
    894e:	000f      	movs	r7, r1
    8950:	001c      	movs	r4, r3
    8952:	e7de      	b.n	8912 <__aeabi_dadd+0x54e>
    8954:	2700      	movs	r7, #0
    8956:	2400      	movs	r4, #0
    8958:	e5d5      	b.n	8506 <__aeabi_dadd+0x142>
    895a:	2100      	movs	r1, #0
    895c:	e76b      	b.n	8836 <__aeabi_dadd+0x472>
    895e:	2500      	movs	r5, #0
    8960:	2700      	movs	r7, #0
    8962:	e5f3      	b.n	854c <__aeabi_dadd+0x188>
    8964:	464e      	mov	r6, r9
    8966:	0025      	movs	r5, r4
    8968:	3e20      	subs	r6, #32
    896a:	40f5      	lsrs	r5, r6
    896c:	464b      	mov	r3, r9
    896e:	002e      	movs	r6, r5
    8970:	2b20      	cmp	r3, #32
    8972:	d02d      	beq.n	89d0 <__aeabi_dadd+0x60c>
    8974:	2540      	movs	r5, #64	; 0x40
    8976:	1aed      	subs	r5, r5, r3
    8978:	40ac      	lsls	r4, r5
    897a:	4327      	orrs	r7, r4
    897c:	1e7c      	subs	r4, r7, #1
    897e:	41a7      	sbcs	r7, r4
    8980:	2400      	movs	r4, #0
    8982:	4337      	orrs	r7, r6
    8984:	e6c9      	b.n	871a <__aeabi_dadd+0x356>
    8986:	2480      	movs	r4, #128	; 0x80
    8988:	2500      	movs	r5, #0
    898a:	0324      	lsls	r4, r4, #12
    898c:	4e13      	ldr	r6, [pc, #76]	; (89dc <__aeabi_dadd+0x618>)
    898e:	2700      	movs	r7, #0
    8990:	e5dc      	b.n	854c <__aeabi_dadd+0x188>
    8992:	4327      	orrs	r7, r4
    8994:	1e7c      	subs	r4, r7, #1
    8996:	41a7      	sbcs	r7, r4
    8998:	2400      	movs	r4, #0
    899a:	e779      	b.n	8890 <__aeabi_dadd+0x4cc>
    899c:	000c      	movs	r4, r1
    899e:	0017      	movs	r7, r2
    89a0:	4e0e      	ldr	r6, [pc, #56]	; (89dc <__aeabi_dadd+0x618>)
    89a2:	e593      	b.n	84cc <__aeabi_dadd+0x108>
    89a4:	000c      	movs	r4, r1
    89a6:	0017      	movs	r7, r2
    89a8:	e590      	b.n	84cc <__aeabi_dadd+0x108>
    89aa:	4656      	mov	r6, sl
    89ac:	0023      	movs	r3, r4
    89ae:	3e20      	subs	r6, #32
    89b0:	40f3      	lsrs	r3, r6
    89b2:	4699      	mov	r9, r3
    89b4:	4653      	mov	r3, sl
    89b6:	2b20      	cmp	r3, #32
    89b8:	d00e      	beq.n	89d8 <__aeabi_dadd+0x614>
    89ba:	2340      	movs	r3, #64	; 0x40
    89bc:	4656      	mov	r6, sl
    89be:	1b9b      	subs	r3, r3, r6
    89c0:	409c      	lsls	r4, r3
    89c2:	4327      	orrs	r7, r4
    89c4:	1e7c      	subs	r4, r7, #1
    89c6:	41a7      	sbcs	r7, r4
    89c8:	464b      	mov	r3, r9
    89ca:	2400      	movs	r4, #0
    89cc:	431f      	orrs	r7, r3
    89ce:	e75f      	b.n	8890 <__aeabi_dadd+0x4cc>
    89d0:	2400      	movs	r4, #0
    89d2:	e7d2      	b.n	897a <__aeabi_dadd+0x5b6>
    89d4:	0017      	movs	r7, r2
    89d6:	e5b2      	b.n	853e <__aeabi_dadd+0x17a>
    89d8:	2400      	movs	r4, #0
    89da:	e7f2      	b.n	89c2 <__aeabi_dadd+0x5fe>
    89dc:	000007ff 	.word	0x000007ff
    89e0:	ff7fffff 	.word	0xff7fffff

000089e4 <__aeabi_ddiv>:
    89e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89e6:	4657      	mov	r7, sl
    89e8:	4645      	mov	r5, r8
    89ea:	46de      	mov	lr, fp
    89ec:	464e      	mov	r6, r9
    89ee:	b5e0      	push	{r5, r6, r7, lr}
    89f0:	004c      	lsls	r4, r1, #1
    89f2:	030e      	lsls	r6, r1, #12
    89f4:	b087      	sub	sp, #28
    89f6:	4683      	mov	fp, r0
    89f8:	4692      	mov	sl, r2
    89fa:	001d      	movs	r5, r3
    89fc:	4680      	mov	r8, r0
    89fe:	0b36      	lsrs	r6, r6, #12
    8a00:	0d64      	lsrs	r4, r4, #21
    8a02:	0fcf      	lsrs	r7, r1, #31
    8a04:	2c00      	cmp	r4, #0
    8a06:	d04f      	beq.n	8aa8 <__aeabi_ddiv+0xc4>
    8a08:	4b6f      	ldr	r3, [pc, #444]	; (8bc8 <__aeabi_ddiv+0x1e4>)
    8a0a:	429c      	cmp	r4, r3
    8a0c:	d035      	beq.n	8a7a <__aeabi_ddiv+0x96>
    8a0e:	2380      	movs	r3, #128	; 0x80
    8a10:	0f42      	lsrs	r2, r0, #29
    8a12:	041b      	lsls	r3, r3, #16
    8a14:	00f6      	lsls	r6, r6, #3
    8a16:	4313      	orrs	r3, r2
    8a18:	4333      	orrs	r3, r6
    8a1a:	4699      	mov	r9, r3
    8a1c:	00c3      	lsls	r3, r0, #3
    8a1e:	4698      	mov	r8, r3
    8a20:	4b6a      	ldr	r3, [pc, #424]	; (8bcc <__aeabi_ddiv+0x1e8>)
    8a22:	2600      	movs	r6, #0
    8a24:	469c      	mov	ip, r3
    8a26:	2300      	movs	r3, #0
    8a28:	4464      	add	r4, ip
    8a2a:	9303      	str	r3, [sp, #12]
    8a2c:	032b      	lsls	r3, r5, #12
    8a2e:	0b1b      	lsrs	r3, r3, #12
    8a30:	469b      	mov	fp, r3
    8a32:	006b      	lsls	r3, r5, #1
    8a34:	0fed      	lsrs	r5, r5, #31
    8a36:	4650      	mov	r0, sl
    8a38:	0d5b      	lsrs	r3, r3, #21
    8a3a:	9501      	str	r5, [sp, #4]
    8a3c:	d05e      	beq.n	8afc <__aeabi_ddiv+0x118>
    8a3e:	4a62      	ldr	r2, [pc, #392]	; (8bc8 <__aeabi_ddiv+0x1e4>)
    8a40:	4293      	cmp	r3, r2
    8a42:	d053      	beq.n	8aec <__aeabi_ddiv+0x108>
    8a44:	465a      	mov	r2, fp
    8a46:	00d1      	lsls	r1, r2, #3
    8a48:	2280      	movs	r2, #128	; 0x80
    8a4a:	0f40      	lsrs	r0, r0, #29
    8a4c:	0412      	lsls	r2, r2, #16
    8a4e:	4302      	orrs	r2, r0
    8a50:	430a      	orrs	r2, r1
    8a52:	4693      	mov	fp, r2
    8a54:	4652      	mov	r2, sl
    8a56:	00d1      	lsls	r1, r2, #3
    8a58:	4a5c      	ldr	r2, [pc, #368]	; (8bcc <__aeabi_ddiv+0x1e8>)
    8a5a:	4694      	mov	ip, r2
    8a5c:	2200      	movs	r2, #0
    8a5e:	4463      	add	r3, ip
    8a60:	0038      	movs	r0, r7
    8a62:	4068      	eors	r0, r5
    8a64:	4684      	mov	ip, r0
    8a66:	9002      	str	r0, [sp, #8]
    8a68:	1ae4      	subs	r4, r4, r3
    8a6a:	4316      	orrs	r6, r2
    8a6c:	2e0f      	cmp	r6, #15
    8a6e:	d900      	bls.n	8a72 <__aeabi_ddiv+0x8e>
    8a70:	e0b4      	b.n	8bdc <__aeabi_ddiv+0x1f8>
    8a72:	4b57      	ldr	r3, [pc, #348]	; (8bd0 <__aeabi_ddiv+0x1ec>)
    8a74:	00b6      	lsls	r6, r6, #2
    8a76:	599b      	ldr	r3, [r3, r6]
    8a78:	469f      	mov	pc, r3
    8a7a:	0003      	movs	r3, r0
    8a7c:	4333      	orrs	r3, r6
    8a7e:	4699      	mov	r9, r3
    8a80:	d16c      	bne.n	8b5c <__aeabi_ddiv+0x178>
    8a82:	2300      	movs	r3, #0
    8a84:	4698      	mov	r8, r3
    8a86:	3302      	adds	r3, #2
    8a88:	2608      	movs	r6, #8
    8a8a:	9303      	str	r3, [sp, #12]
    8a8c:	e7ce      	b.n	8a2c <__aeabi_ddiv+0x48>
    8a8e:	46cb      	mov	fp, r9
    8a90:	4641      	mov	r1, r8
    8a92:	9a03      	ldr	r2, [sp, #12]
    8a94:	9701      	str	r7, [sp, #4]
    8a96:	2a02      	cmp	r2, #2
    8a98:	d165      	bne.n	8b66 <__aeabi_ddiv+0x182>
    8a9a:	9b01      	ldr	r3, [sp, #4]
    8a9c:	4c4a      	ldr	r4, [pc, #296]	; (8bc8 <__aeabi_ddiv+0x1e4>)
    8a9e:	469c      	mov	ip, r3
    8aa0:	2300      	movs	r3, #0
    8aa2:	2200      	movs	r2, #0
    8aa4:	4698      	mov	r8, r3
    8aa6:	e06b      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8aa8:	0003      	movs	r3, r0
    8aaa:	4333      	orrs	r3, r6
    8aac:	4699      	mov	r9, r3
    8aae:	d04e      	beq.n	8b4e <__aeabi_ddiv+0x16a>
    8ab0:	2e00      	cmp	r6, #0
    8ab2:	d100      	bne.n	8ab6 <__aeabi_ddiv+0xd2>
    8ab4:	e1bc      	b.n	8e30 <__aeabi_ddiv+0x44c>
    8ab6:	0030      	movs	r0, r6
    8ab8:	f001 f8ca 	bl	9c50 <__clzsi2>
    8abc:	0003      	movs	r3, r0
    8abe:	3b0b      	subs	r3, #11
    8ac0:	2b1c      	cmp	r3, #28
    8ac2:	dd00      	ble.n	8ac6 <__aeabi_ddiv+0xe2>
    8ac4:	e1ac      	b.n	8e20 <__aeabi_ddiv+0x43c>
    8ac6:	221d      	movs	r2, #29
    8ac8:	1ad3      	subs	r3, r2, r3
    8aca:	465a      	mov	r2, fp
    8acc:	0001      	movs	r1, r0
    8ace:	40da      	lsrs	r2, r3
    8ad0:	3908      	subs	r1, #8
    8ad2:	408e      	lsls	r6, r1
    8ad4:	0013      	movs	r3, r2
    8ad6:	4333      	orrs	r3, r6
    8ad8:	4699      	mov	r9, r3
    8ada:	465b      	mov	r3, fp
    8adc:	408b      	lsls	r3, r1
    8ade:	4698      	mov	r8, r3
    8ae0:	2300      	movs	r3, #0
    8ae2:	4c3c      	ldr	r4, [pc, #240]	; (8bd4 <__aeabi_ddiv+0x1f0>)
    8ae4:	2600      	movs	r6, #0
    8ae6:	1a24      	subs	r4, r4, r0
    8ae8:	9303      	str	r3, [sp, #12]
    8aea:	e79f      	b.n	8a2c <__aeabi_ddiv+0x48>
    8aec:	4651      	mov	r1, sl
    8aee:	465a      	mov	r2, fp
    8af0:	4311      	orrs	r1, r2
    8af2:	d129      	bne.n	8b48 <__aeabi_ddiv+0x164>
    8af4:	2200      	movs	r2, #0
    8af6:	4693      	mov	fp, r2
    8af8:	3202      	adds	r2, #2
    8afa:	e7b1      	b.n	8a60 <__aeabi_ddiv+0x7c>
    8afc:	4659      	mov	r1, fp
    8afe:	4301      	orrs	r1, r0
    8b00:	d01e      	beq.n	8b40 <__aeabi_ddiv+0x15c>
    8b02:	465b      	mov	r3, fp
    8b04:	2b00      	cmp	r3, #0
    8b06:	d100      	bne.n	8b0a <__aeabi_ddiv+0x126>
    8b08:	e19e      	b.n	8e48 <__aeabi_ddiv+0x464>
    8b0a:	4658      	mov	r0, fp
    8b0c:	f001 f8a0 	bl	9c50 <__clzsi2>
    8b10:	0003      	movs	r3, r0
    8b12:	3b0b      	subs	r3, #11
    8b14:	2b1c      	cmp	r3, #28
    8b16:	dd00      	ble.n	8b1a <__aeabi_ddiv+0x136>
    8b18:	e18f      	b.n	8e3a <__aeabi_ddiv+0x456>
    8b1a:	0002      	movs	r2, r0
    8b1c:	4659      	mov	r1, fp
    8b1e:	3a08      	subs	r2, #8
    8b20:	4091      	lsls	r1, r2
    8b22:	468b      	mov	fp, r1
    8b24:	211d      	movs	r1, #29
    8b26:	1acb      	subs	r3, r1, r3
    8b28:	4651      	mov	r1, sl
    8b2a:	40d9      	lsrs	r1, r3
    8b2c:	000b      	movs	r3, r1
    8b2e:	4659      	mov	r1, fp
    8b30:	430b      	orrs	r3, r1
    8b32:	4651      	mov	r1, sl
    8b34:	469b      	mov	fp, r3
    8b36:	4091      	lsls	r1, r2
    8b38:	4b26      	ldr	r3, [pc, #152]	; (8bd4 <__aeabi_ddiv+0x1f0>)
    8b3a:	2200      	movs	r2, #0
    8b3c:	1a1b      	subs	r3, r3, r0
    8b3e:	e78f      	b.n	8a60 <__aeabi_ddiv+0x7c>
    8b40:	2300      	movs	r3, #0
    8b42:	2201      	movs	r2, #1
    8b44:	469b      	mov	fp, r3
    8b46:	e78b      	b.n	8a60 <__aeabi_ddiv+0x7c>
    8b48:	4651      	mov	r1, sl
    8b4a:	2203      	movs	r2, #3
    8b4c:	e788      	b.n	8a60 <__aeabi_ddiv+0x7c>
    8b4e:	2300      	movs	r3, #0
    8b50:	4698      	mov	r8, r3
    8b52:	3301      	adds	r3, #1
    8b54:	2604      	movs	r6, #4
    8b56:	2400      	movs	r4, #0
    8b58:	9303      	str	r3, [sp, #12]
    8b5a:	e767      	b.n	8a2c <__aeabi_ddiv+0x48>
    8b5c:	2303      	movs	r3, #3
    8b5e:	46b1      	mov	r9, r6
    8b60:	9303      	str	r3, [sp, #12]
    8b62:	260c      	movs	r6, #12
    8b64:	e762      	b.n	8a2c <__aeabi_ddiv+0x48>
    8b66:	2a03      	cmp	r2, #3
    8b68:	d100      	bne.n	8b6c <__aeabi_ddiv+0x188>
    8b6a:	e25c      	b.n	9026 <__aeabi_ddiv+0x642>
    8b6c:	9b01      	ldr	r3, [sp, #4]
    8b6e:	2a01      	cmp	r2, #1
    8b70:	d000      	beq.n	8b74 <__aeabi_ddiv+0x190>
    8b72:	e1e4      	b.n	8f3e <__aeabi_ddiv+0x55a>
    8b74:	4013      	ands	r3, r2
    8b76:	469c      	mov	ip, r3
    8b78:	2300      	movs	r3, #0
    8b7a:	2400      	movs	r4, #0
    8b7c:	2200      	movs	r2, #0
    8b7e:	4698      	mov	r8, r3
    8b80:	2100      	movs	r1, #0
    8b82:	0312      	lsls	r2, r2, #12
    8b84:	0b13      	lsrs	r3, r2, #12
    8b86:	0d0a      	lsrs	r2, r1, #20
    8b88:	0512      	lsls	r2, r2, #20
    8b8a:	431a      	orrs	r2, r3
    8b8c:	0523      	lsls	r3, r4, #20
    8b8e:	4c12      	ldr	r4, [pc, #72]	; (8bd8 <__aeabi_ddiv+0x1f4>)
    8b90:	4640      	mov	r0, r8
    8b92:	4022      	ands	r2, r4
    8b94:	4313      	orrs	r3, r2
    8b96:	4662      	mov	r2, ip
    8b98:	005b      	lsls	r3, r3, #1
    8b9a:	07d2      	lsls	r2, r2, #31
    8b9c:	085b      	lsrs	r3, r3, #1
    8b9e:	4313      	orrs	r3, r2
    8ba0:	0019      	movs	r1, r3
    8ba2:	b007      	add	sp, #28
    8ba4:	bc3c      	pop	{r2, r3, r4, r5}
    8ba6:	4690      	mov	r8, r2
    8ba8:	4699      	mov	r9, r3
    8baa:	46a2      	mov	sl, r4
    8bac:	46ab      	mov	fp, r5
    8bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bb0:	2300      	movs	r3, #0
    8bb2:	2280      	movs	r2, #128	; 0x80
    8bb4:	469c      	mov	ip, r3
    8bb6:	0312      	lsls	r2, r2, #12
    8bb8:	4698      	mov	r8, r3
    8bba:	4c03      	ldr	r4, [pc, #12]	; (8bc8 <__aeabi_ddiv+0x1e4>)
    8bbc:	e7e0      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8bbe:	2300      	movs	r3, #0
    8bc0:	4c01      	ldr	r4, [pc, #4]	; (8bc8 <__aeabi_ddiv+0x1e4>)
    8bc2:	2200      	movs	r2, #0
    8bc4:	4698      	mov	r8, r3
    8bc6:	e7db      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8bc8:	000007ff 	.word	0x000007ff
    8bcc:	fffffc01 	.word	0xfffffc01
    8bd0:	0000b50c 	.word	0x0000b50c
    8bd4:	fffffc0d 	.word	0xfffffc0d
    8bd8:	800fffff 	.word	0x800fffff
    8bdc:	45d9      	cmp	r9, fp
    8bde:	d900      	bls.n	8be2 <__aeabi_ddiv+0x1fe>
    8be0:	e139      	b.n	8e56 <__aeabi_ddiv+0x472>
    8be2:	d100      	bne.n	8be6 <__aeabi_ddiv+0x202>
    8be4:	e134      	b.n	8e50 <__aeabi_ddiv+0x46c>
    8be6:	2300      	movs	r3, #0
    8be8:	4646      	mov	r6, r8
    8bea:	464d      	mov	r5, r9
    8bec:	469a      	mov	sl, r3
    8bee:	3c01      	subs	r4, #1
    8bf0:	465b      	mov	r3, fp
    8bf2:	0e0a      	lsrs	r2, r1, #24
    8bf4:	021b      	lsls	r3, r3, #8
    8bf6:	431a      	orrs	r2, r3
    8bf8:	020b      	lsls	r3, r1, #8
    8bfa:	0c17      	lsrs	r7, r2, #16
    8bfc:	9303      	str	r3, [sp, #12]
    8bfe:	0413      	lsls	r3, r2, #16
    8c00:	0c1b      	lsrs	r3, r3, #16
    8c02:	0039      	movs	r1, r7
    8c04:	0028      	movs	r0, r5
    8c06:	4690      	mov	r8, r2
    8c08:	9301      	str	r3, [sp, #4]
    8c0a:	f7ff fb25 	bl	8258 <__udivsi3>
    8c0e:	0002      	movs	r2, r0
    8c10:	9b01      	ldr	r3, [sp, #4]
    8c12:	4683      	mov	fp, r0
    8c14:	435a      	muls	r2, r3
    8c16:	0028      	movs	r0, r5
    8c18:	0039      	movs	r1, r7
    8c1a:	4691      	mov	r9, r2
    8c1c:	f7ff fba2 	bl	8364 <__aeabi_uidivmod>
    8c20:	0c35      	lsrs	r5, r6, #16
    8c22:	0409      	lsls	r1, r1, #16
    8c24:	430d      	orrs	r5, r1
    8c26:	45a9      	cmp	r9, r5
    8c28:	d90d      	bls.n	8c46 <__aeabi_ddiv+0x262>
    8c2a:	465b      	mov	r3, fp
    8c2c:	4445      	add	r5, r8
    8c2e:	3b01      	subs	r3, #1
    8c30:	45a8      	cmp	r8, r5
    8c32:	d900      	bls.n	8c36 <__aeabi_ddiv+0x252>
    8c34:	e13a      	b.n	8eac <__aeabi_ddiv+0x4c8>
    8c36:	45a9      	cmp	r9, r5
    8c38:	d800      	bhi.n	8c3c <__aeabi_ddiv+0x258>
    8c3a:	e137      	b.n	8eac <__aeabi_ddiv+0x4c8>
    8c3c:	2302      	movs	r3, #2
    8c3e:	425b      	negs	r3, r3
    8c40:	469c      	mov	ip, r3
    8c42:	4445      	add	r5, r8
    8c44:	44e3      	add	fp, ip
    8c46:	464b      	mov	r3, r9
    8c48:	1aeb      	subs	r3, r5, r3
    8c4a:	0039      	movs	r1, r7
    8c4c:	0018      	movs	r0, r3
    8c4e:	9304      	str	r3, [sp, #16]
    8c50:	f7ff fb02 	bl	8258 <__udivsi3>
    8c54:	9b01      	ldr	r3, [sp, #4]
    8c56:	0005      	movs	r5, r0
    8c58:	4343      	muls	r3, r0
    8c5a:	0039      	movs	r1, r7
    8c5c:	9804      	ldr	r0, [sp, #16]
    8c5e:	4699      	mov	r9, r3
    8c60:	f7ff fb80 	bl	8364 <__aeabi_uidivmod>
    8c64:	0433      	lsls	r3, r6, #16
    8c66:	0409      	lsls	r1, r1, #16
    8c68:	0c1b      	lsrs	r3, r3, #16
    8c6a:	430b      	orrs	r3, r1
    8c6c:	4599      	cmp	r9, r3
    8c6e:	d909      	bls.n	8c84 <__aeabi_ddiv+0x2a0>
    8c70:	4443      	add	r3, r8
    8c72:	1e6a      	subs	r2, r5, #1
    8c74:	4598      	cmp	r8, r3
    8c76:	d900      	bls.n	8c7a <__aeabi_ddiv+0x296>
    8c78:	e11a      	b.n	8eb0 <__aeabi_ddiv+0x4cc>
    8c7a:	4599      	cmp	r9, r3
    8c7c:	d800      	bhi.n	8c80 <__aeabi_ddiv+0x29c>
    8c7e:	e117      	b.n	8eb0 <__aeabi_ddiv+0x4cc>
    8c80:	3d02      	subs	r5, #2
    8c82:	4443      	add	r3, r8
    8c84:	464a      	mov	r2, r9
    8c86:	1a9b      	subs	r3, r3, r2
    8c88:	465a      	mov	r2, fp
    8c8a:	0412      	lsls	r2, r2, #16
    8c8c:	432a      	orrs	r2, r5
    8c8e:	9903      	ldr	r1, [sp, #12]
    8c90:	4693      	mov	fp, r2
    8c92:	0c10      	lsrs	r0, r2, #16
    8c94:	0c0a      	lsrs	r2, r1, #16
    8c96:	4691      	mov	r9, r2
    8c98:	0409      	lsls	r1, r1, #16
    8c9a:	465a      	mov	r2, fp
    8c9c:	0c09      	lsrs	r1, r1, #16
    8c9e:	464e      	mov	r6, r9
    8ca0:	000d      	movs	r5, r1
    8ca2:	0412      	lsls	r2, r2, #16
    8ca4:	0c12      	lsrs	r2, r2, #16
    8ca6:	4345      	muls	r5, r0
    8ca8:	9105      	str	r1, [sp, #20]
    8caa:	4351      	muls	r1, r2
    8cac:	4372      	muls	r2, r6
    8cae:	4370      	muls	r0, r6
    8cb0:	1952      	adds	r2, r2, r5
    8cb2:	0c0e      	lsrs	r6, r1, #16
    8cb4:	18b2      	adds	r2, r6, r2
    8cb6:	4295      	cmp	r5, r2
    8cb8:	d903      	bls.n	8cc2 <__aeabi_ddiv+0x2de>
    8cba:	2580      	movs	r5, #128	; 0x80
    8cbc:	026d      	lsls	r5, r5, #9
    8cbe:	46ac      	mov	ip, r5
    8cc0:	4460      	add	r0, ip
    8cc2:	0c15      	lsrs	r5, r2, #16
    8cc4:	0409      	lsls	r1, r1, #16
    8cc6:	0412      	lsls	r2, r2, #16
    8cc8:	0c09      	lsrs	r1, r1, #16
    8cca:	1828      	adds	r0, r5, r0
    8ccc:	1852      	adds	r2, r2, r1
    8cce:	4283      	cmp	r3, r0
    8cd0:	d200      	bcs.n	8cd4 <__aeabi_ddiv+0x2f0>
    8cd2:	e0ce      	b.n	8e72 <__aeabi_ddiv+0x48e>
    8cd4:	d100      	bne.n	8cd8 <__aeabi_ddiv+0x2f4>
    8cd6:	e0c8      	b.n	8e6a <__aeabi_ddiv+0x486>
    8cd8:	1a1d      	subs	r5, r3, r0
    8cda:	4653      	mov	r3, sl
    8cdc:	1a9e      	subs	r6, r3, r2
    8cde:	45b2      	cmp	sl, r6
    8ce0:	4192      	sbcs	r2, r2
    8ce2:	4252      	negs	r2, r2
    8ce4:	1aab      	subs	r3, r5, r2
    8ce6:	469a      	mov	sl, r3
    8ce8:	4598      	cmp	r8, r3
    8cea:	d100      	bne.n	8cee <__aeabi_ddiv+0x30a>
    8cec:	e117      	b.n	8f1e <__aeabi_ddiv+0x53a>
    8cee:	0039      	movs	r1, r7
    8cf0:	0018      	movs	r0, r3
    8cf2:	f7ff fab1 	bl	8258 <__udivsi3>
    8cf6:	9b01      	ldr	r3, [sp, #4]
    8cf8:	0005      	movs	r5, r0
    8cfa:	4343      	muls	r3, r0
    8cfc:	0039      	movs	r1, r7
    8cfe:	4650      	mov	r0, sl
    8d00:	9304      	str	r3, [sp, #16]
    8d02:	f7ff fb2f 	bl	8364 <__aeabi_uidivmod>
    8d06:	9804      	ldr	r0, [sp, #16]
    8d08:	040b      	lsls	r3, r1, #16
    8d0a:	0c31      	lsrs	r1, r6, #16
    8d0c:	4319      	orrs	r1, r3
    8d0e:	4288      	cmp	r0, r1
    8d10:	d909      	bls.n	8d26 <__aeabi_ddiv+0x342>
    8d12:	4441      	add	r1, r8
    8d14:	1e6b      	subs	r3, r5, #1
    8d16:	4588      	cmp	r8, r1
    8d18:	d900      	bls.n	8d1c <__aeabi_ddiv+0x338>
    8d1a:	e107      	b.n	8f2c <__aeabi_ddiv+0x548>
    8d1c:	4288      	cmp	r0, r1
    8d1e:	d800      	bhi.n	8d22 <__aeabi_ddiv+0x33e>
    8d20:	e104      	b.n	8f2c <__aeabi_ddiv+0x548>
    8d22:	3d02      	subs	r5, #2
    8d24:	4441      	add	r1, r8
    8d26:	9b04      	ldr	r3, [sp, #16]
    8d28:	1acb      	subs	r3, r1, r3
    8d2a:	0018      	movs	r0, r3
    8d2c:	0039      	movs	r1, r7
    8d2e:	9304      	str	r3, [sp, #16]
    8d30:	f7ff fa92 	bl	8258 <__udivsi3>
    8d34:	9b01      	ldr	r3, [sp, #4]
    8d36:	4682      	mov	sl, r0
    8d38:	4343      	muls	r3, r0
    8d3a:	0039      	movs	r1, r7
    8d3c:	9804      	ldr	r0, [sp, #16]
    8d3e:	9301      	str	r3, [sp, #4]
    8d40:	f7ff fb10 	bl	8364 <__aeabi_uidivmod>
    8d44:	9801      	ldr	r0, [sp, #4]
    8d46:	040b      	lsls	r3, r1, #16
    8d48:	0431      	lsls	r1, r6, #16
    8d4a:	0c09      	lsrs	r1, r1, #16
    8d4c:	4319      	orrs	r1, r3
    8d4e:	4288      	cmp	r0, r1
    8d50:	d90d      	bls.n	8d6e <__aeabi_ddiv+0x38a>
    8d52:	4653      	mov	r3, sl
    8d54:	4441      	add	r1, r8
    8d56:	3b01      	subs	r3, #1
    8d58:	4588      	cmp	r8, r1
    8d5a:	d900      	bls.n	8d5e <__aeabi_ddiv+0x37a>
    8d5c:	e0e8      	b.n	8f30 <__aeabi_ddiv+0x54c>
    8d5e:	4288      	cmp	r0, r1
    8d60:	d800      	bhi.n	8d64 <__aeabi_ddiv+0x380>
    8d62:	e0e5      	b.n	8f30 <__aeabi_ddiv+0x54c>
    8d64:	2302      	movs	r3, #2
    8d66:	425b      	negs	r3, r3
    8d68:	469c      	mov	ip, r3
    8d6a:	4441      	add	r1, r8
    8d6c:	44e2      	add	sl, ip
    8d6e:	9b01      	ldr	r3, [sp, #4]
    8d70:	042d      	lsls	r5, r5, #16
    8d72:	1ace      	subs	r6, r1, r3
    8d74:	4651      	mov	r1, sl
    8d76:	4329      	orrs	r1, r5
    8d78:	9d05      	ldr	r5, [sp, #20]
    8d7a:	464f      	mov	r7, r9
    8d7c:	002a      	movs	r2, r5
    8d7e:	040b      	lsls	r3, r1, #16
    8d80:	0c08      	lsrs	r0, r1, #16
    8d82:	0c1b      	lsrs	r3, r3, #16
    8d84:	435a      	muls	r2, r3
    8d86:	4345      	muls	r5, r0
    8d88:	437b      	muls	r3, r7
    8d8a:	4378      	muls	r0, r7
    8d8c:	195b      	adds	r3, r3, r5
    8d8e:	0c17      	lsrs	r7, r2, #16
    8d90:	18fb      	adds	r3, r7, r3
    8d92:	429d      	cmp	r5, r3
    8d94:	d903      	bls.n	8d9e <__aeabi_ddiv+0x3ba>
    8d96:	2580      	movs	r5, #128	; 0x80
    8d98:	026d      	lsls	r5, r5, #9
    8d9a:	46ac      	mov	ip, r5
    8d9c:	4460      	add	r0, ip
    8d9e:	0c1d      	lsrs	r5, r3, #16
    8da0:	0412      	lsls	r2, r2, #16
    8da2:	041b      	lsls	r3, r3, #16
    8da4:	0c12      	lsrs	r2, r2, #16
    8da6:	1828      	adds	r0, r5, r0
    8da8:	189b      	adds	r3, r3, r2
    8daa:	4286      	cmp	r6, r0
    8dac:	d200      	bcs.n	8db0 <__aeabi_ddiv+0x3cc>
    8dae:	e093      	b.n	8ed8 <__aeabi_ddiv+0x4f4>
    8db0:	d100      	bne.n	8db4 <__aeabi_ddiv+0x3d0>
    8db2:	e08e      	b.n	8ed2 <__aeabi_ddiv+0x4ee>
    8db4:	2301      	movs	r3, #1
    8db6:	4319      	orrs	r1, r3
    8db8:	4ba0      	ldr	r3, [pc, #640]	; (903c <__aeabi_ddiv+0x658>)
    8dba:	18e3      	adds	r3, r4, r3
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	dc00      	bgt.n	8dc2 <__aeabi_ddiv+0x3de>
    8dc0:	e099      	b.n	8ef6 <__aeabi_ddiv+0x512>
    8dc2:	074a      	lsls	r2, r1, #29
    8dc4:	d000      	beq.n	8dc8 <__aeabi_ddiv+0x3e4>
    8dc6:	e09e      	b.n	8f06 <__aeabi_ddiv+0x522>
    8dc8:	465a      	mov	r2, fp
    8dca:	01d2      	lsls	r2, r2, #7
    8dcc:	d506      	bpl.n	8ddc <__aeabi_ddiv+0x3f8>
    8dce:	465a      	mov	r2, fp
    8dd0:	4b9b      	ldr	r3, [pc, #620]	; (9040 <__aeabi_ddiv+0x65c>)
    8dd2:	401a      	ands	r2, r3
    8dd4:	2380      	movs	r3, #128	; 0x80
    8dd6:	4693      	mov	fp, r2
    8dd8:	00db      	lsls	r3, r3, #3
    8dda:	18e3      	adds	r3, r4, r3
    8ddc:	4a99      	ldr	r2, [pc, #612]	; (9044 <__aeabi_ddiv+0x660>)
    8dde:	4293      	cmp	r3, r2
    8de0:	dd68      	ble.n	8eb4 <__aeabi_ddiv+0x4d0>
    8de2:	2301      	movs	r3, #1
    8de4:	9a02      	ldr	r2, [sp, #8]
    8de6:	4c98      	ldr	r4, [pc, #608]	; (9048 <__aeabi_ddiv+0x664>)
    8de8:	401a      	ands	r2, r3
    8dea:	2300      	movs	r3, #0
    8dec:	4694      	mov	ip, r2
    8dee:	4698      	mov	r8, r3
    8df0:	2200      	movs	r2, #0
    8df2:	e6c5      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8df4:	2280      	movs	r2, #128	; 0x80
    8df6:	464b      	mov	r3, r9
    8df8:	0312      	lsls	r2, r2, #12
    8dfa:	4213      	tst	r3, r2
    8dfc:	d00a      	beq.n	8e14 <__aeabi_ddiv+0x430>
    8dfe:	465b      	mov	r3, fp
    8e00:	4213      	tst	r3, r2
    8e02:	d106      	bne.n	8e12 <__aeabi_ddiv+0x42e>
    8e04:	431a      	orrs	r2, r3
    8e06:	0312      	lsls	r2, r2, #12
    8e08:	0b12      	lsrs	r2, r2, #12
    8e0a:	46ac      	mov	ip, r5
    8e0c:	4688      	mov	r8, r1
    8e0e:	4c8e      	ldr	r4, [pc, #568]	; (9048 <__aeabi_ddiv+0x664>)
    8e10:	e6b6      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8e12:	464b      	mov	r3, r9
    8e14:	431a      	orrs	r2, r3
    8e16:	0312      	lsls	r2, r2, #12
    8e18:	0b12      	lsrs	r2, r2, #12
    8e1a:	46bc      	mov	ip, r7
    8e1c:	4c8a      	ldr	r4, [pc, #552]	; (9048 <__aeabi_ddiv+0x664>)
    8e1e:	e6af      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8e20:	0003      	movs	r3, r0
    8e22:	465a      	mov	r2, fp
    8e24:	3b28      	subs	r3, #40	; 0x28
    8e26:	409a      	lsls	r2, r3
    8e28:	2300      	movs	r3, #0
    8e2a:	4691      	mov	r9, r2
    8e2c:	4698      	mov	r8, r3
    8e2e:	e657      	b.n	8ae0 <__aeabi_ddiv+0xfc>
    8e30:	4658      	mov	r0, fp
    8e32:	f000 ff0d 	bl	9c50 <__clzsi2>
    8e36:	3020      	adds	r0, #32
    8e38:	e640      	b.n	8abc <__aeabi_ddiv+0xd8>
    8e3a:	0003      	movs	r3, r0
    8e3c:	4652      	mov	r2, sl
    8e3e:	3b28      	subs	r3, #40	; 0x28
    8e40:	409a      	lsls	r2, r3
    8e42:	2100      	movs	r1, #0
    8e44:	4693      	mov	fp, r2
    8e46:	e677      	b.n	8b38 <__aeabi_ddiv+0x154>
    8e48:	f000 ff02 	bl	9c50 <__clzsi2>
    8e4c:	3020      	adds	r0, #32
    8e4e:	e65f      	b.n	8b10 <__aeabi_ddiv+0x12c>
    8e50:	4588      	cmp	r8, r1
    8e52:	d200      	bcs.n	8e56 <__aeabi_ddiv+0x472>
    8e54:	e6c7      	b.n	8be6 <__aeabi_ddiv+0x202>
    8e56:	464b      	mov	r3, r9
    8e58:	07de      	lsls	r6, r3, #31
    8e5a:	085d      	lsrs	r5, r3, #1
    8e5c:	4643      	mov	r3, r8
    8e5e:	085b      	lsrs	r3, r3, #1
    8e60:	431e      	orrs	r6, r3
    8e62:	4643      	mov	r3, r8
    8e64:	07db      	lsls	r3, r3, #31
    8e66:	469a      	mov	sl, r3
    8e68:	e6c2      	b.n	8bf0 <__aeabi_ddiv+0x20c>
    8e6a:	2500      	movs	r5, #0
    8e6c:	4592      	cmp	sl, r2
    8e6e:	d300      	bcc.n	8e72 <__aeabi_ddiv+0x48e>
    8e70:	e733      	b.n	8cda <__aeabi_ddiv+0x2f6>
    8e72:	9e03      	ldr	r6, [sp, #12]
    8e74:	4659      	mov	r1, fp
    8e76:	46b4      	mov	ip, r6
    8e78:	44e2      	add	sl, ip
    8e7a:	45b2      	cmp	sl, r6
    8e7c:	41ad      	sbcs	r5, r5
    8e7e:	426d      	negs	r5, r5
    8e80:	4445      	add	r5, r8
    8e82:	18eb      	adds	r3, r5, r3
    8e84:	3901      	subs	r1, #1
    8e86:	4598      	cmp	r8, r3
    8e88:	d207      	bcs.n	8e9a <__aeabi_ddiv+0x4b6>
    8e8a:	4298      	cmp	r0, r3
    8e8c:	d900      	bls.n	8e90 <__aeabi_ddiv+0x4ac>
    8e8e:	e07f      	b.n	8f90 <__aeabi_ddiv+0x5ac>
    8e90:	d100      	bne.n	8e94 <__aeabi_ddiv+0x4b0>
    8e92:	e0bc      	b.n	900e <__aeabi_ddiv+0x62a>
    8e94:	1a1d      	subs	r5, r3, r0
    8e96:	468b      	mov	fp, r1
    8e98:	e71f      	b.n	8cda <__aeabi_ddiv+0x2f6>
    8e9a:	4598      	cmp	r8, r3
    8e9c:	d1fa      	bne.n	8e94 <__aeabi_ddiv+0x4b0>
    8e9e:	9d03      	ldr	r5, [sp, #12]
    8ea0:	4555      	cmp	r5, sl
    8ea2:	d9f2      	bls.n	8e8a <__aeabi_ddiv+0x4a6>
    8ea4:	4643      	mov	r3, r8
    8ea6:	468b      	mov	fp, r1
    8ea8:	1a1d      	subs	r5, r3, r0
    8eaa:	e716      	b.n	8cda <__aeabi_ddiv+0x2f6>
    8eac:	469b      	mov	fp, r3
    8eae:	e6ca      	b.n	8c46 <__aeabi_ddiv+0x262>
    8eb0:	0015      	movs	r5, r2
    8eb2:	e6e7      	b.n	8c84 <__aeabi_ddiv+0x2a0>
    8eb4:	465a      	mov	r2, fp
    8eb6:	08c9      	lsrs	r1, r1, #3
    8eb8:	0752      	lsls	r2, r2, #29
    8eba:	430a      	orrs	r2, r1
    8ebc:	055b      	lsls	r3, r3, #21
    8ebe:	4690      	mov	r8, r2
    8ec0:	0d5c      	lsrs	r4, r3, #21
    8ec2:	465a      	mov	r2, fp
    8ec4:	2301      	movs	r3, #1
    8ec6:	9902      	ldr	r1, [sp, #8]
    8ec8:	0252      	lsls	r2, r2, #9
    8eca:	4019      	ands	r1, r3
    8ecc:	0b12      	lsrs	r2, r2, #12
    8ece:	468c      	mov	ip, r1
    8ed0:	e656      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d100      	bne.n	8ed8 <__aeabi_ddiv+0x4f4>
    8ed6:	e76f      	b.n	8db8 <__aeabi_ddiv+0x3d4>
    8ed8:	4446      	add	r6, r8
    8eda:	1e4a      	subs	r2, r1, #1
    8edc:	45b0      	cmp	r8, r6
    8ede:	d929      	bls.n	8f34 <__aeabi_ddiv+0x550>
    8ee0:	0011      	movs	r1, r2
    8ee2:	4286      	cmp	r6, r0
    8ee4:	d000      	beq.n	8ee8 <__aeabi_ddiv+0x504>
    8ee6:	e765      	b.n	8db4 <__aeabi_ddiv+0x3d0>
    8ee8:	9a03      	ldr	r2, [sp, #12]
    8eea:	4293      	cmp	r3, r2
    8eec:	d000      	beq.n	8ef0 <__aeabi_ddiv+0x50c>
    8eee:	e761      	b.n	8db4 <__aeabi_ddiv+0x3d0>
    8ef0:	e762      	b.n	8db8 <__aeabi_ddiv+0x3d4>
    8ef2:	2101      	movs	r1, #1
    8ef4:	4249      	negs	r1, r1
    8ef6:	2001      	movs	r0, #1
    8ef8:	1ac2      	subs	r2, r0, r3
    8efa:	2a38      	cmp	r2, #56	; 0x38
    8efc:	dd21      	ble.n	8f42 <__aeabi_ddiv+0x55e>
    8efe:	9b02      	ldr	r3, [sp, #8]
    8f00:	4003      	ands	r3, r0
    8f02:	469c      	mov	ip, r3
    8f04:	e638      	b.n	8b78 <__aeabi_ddiv+0x194>
    8f06:	220f      	movs	r2, #15
    8f08:	400a      	ands	r2, r1
    8f0a:	2a04      	cmp	r2, #4
    8f0c:	d100      	bne.n	8f10 <__aeabi_ddiv+0x52c>
    8f0e:	e75b      	b.n	8dc8 <__aeabi_ddiv+0x3e4>
    8f10:	000a      	movs	r2, r1
    8f12:	1d11      	adds	r1, r2, #4
    8f14:	4291      	cmp	r1, r2
    8f16:	4192      	sbcs	r2, r2
    8f18:	4252      	negs	r2, r2
    8f1a:	4493      	add	fp, r2
    8f1c:	e754      	b.n	8dc8 <__aeabi_ddiv+0x3e4>
    8f1e:	4b47      	ldr	r3, [pc, #284]	; (903c <__aeabi_ddiv+0x658>)
    8f20:	18e3      	adds	r3, r4, r3
    8f22:	2b00      	cmp	r3, #0
    8f24:	dde5      	ble.n	8ef2 <__aeabi_ddiv+0x50e>
    8f26:	2201      	movs	r2, #1
    8f28:	4252      	negs	r2, r2
    8f2a:	e7f2      	b.n	8f12 <__aeabi_ddiv+0x52e>
    8f2c:	001d      	movs	r5, r3
    8f2e:	e6fa      	b.n	8d26 <__aeabi_ddiv+0x342>
    8f30:	469a      	mov	sl, r3
    8f32:	e71c      	b.n	8d6e <__aeabi_ddiv+0x38a>
    8f34:	42b0      	cmp	r0, r6
    8f36:	d839      	bhi.n	8fac <__aeabi_ddiv+0x5c8>
    8f38:	d06e      	beq.n	9018 <__aeabi_ddiv+0x634>
    8f3a:	0011      	movs	r1, r2
    8f3c:	e73a      	b.n	8db4 <__aeabi_ddiv+0x3d0>
    8f3e:	9302      	str	r3, [sp, #8]
    8f40:	e73a      	b.n	8db8 <__aeabi_ddiv+0x3d4>
    8f42:	2a1f      	cmp	r2, #31
    8f44:	dc3c      	bgt.n	8fc0 <__aeabi_ddiv+0x5dc>
    8f46:	2320      	movs	r3, #32
    8f48:	1a9b      	subs	r3, r3, r2
    8f4a:	000c      	movs	r4, r1
    8f4c:	4658      	mov	r0, fp
    8f4e:	4099      	lsls	r1, r3
    8f50:	4098      	lsls	r0, r3
    8f52:	1e4b      	subs	r3, r1, #1
    8f54:	4199      	sbcs	r1, r3
    8f56:	465b      	mov	r3, fp
    8f58:	40d4      	lsrs	r4, r2
    8f5a:	40d3      	lsrs	r3, r2
    8f5c:	4320      	orrs	r0, r4
    8f5e:	4308      	orrs	r0, r1
    8f60:	001a      	movs	r2, r3
    8f62:	0743      	lsls	r3, r0, #29
    8f64:	d009      	beq.n	8f7a <__aeabi_ddiv+0x596>
    8f66:	230f      	movs	r3, #15
    8f68:	4003      	ands	r3, r0
    8f6a:	2b04      	cmp	r3, #4
    8f6c:	d005      	beq.n	8f7a <__aeabi_ddiv+0x596>
    8f6e:	0001      	movs	r1, r0
    8f70:	1d08      	adds	r0, r1, #4
    8f72:	4288      	cmp	r0, r1
    8f74:	419b      	sbcs	r3, r3
    8f76:	425b      	negs	r3, r3
    8f78:	18d2      	adds	r2, r2, r3
    8f7a:	0213      	lsls	r3, r2, #8
    8f7c:	d53a      	bpl.n	8ff4 <__aeabi_ddiv+0x610>
    8f7e:	2301      	movs	r3, #1
    8f80:	9a02      	ldr	r2, [sp, #8]
    8f82:	2401      	movs	r4, #1
    8f84:	401a      	ands	r2, r3
    8f86:	2300      	movs	r3, #0
    8f88:	4694      	mov	ip, r2
    8f8a:	4698      	mov	r8, r3
    8f8c:	2200      	movs	r2, #0
    8f8e:	e5f7      	b.n	8b80 <__aeabi_ddiv+0x19c>
    8f90:	2102      	movs	r1, #2
    8f92:	4249      	negs	r1, r1
    8f94:	468c      	mov	ip, r1
    8f96:	9d03      	ldr	r5, [sp, #12]
    8f98:	44e3      	add	fp, ip
    8f9a:	46ac      	mov	ip, r5
    8f9c:	44e2      	add	sl, ip
    8f9e:	45aa      	cmp	sl, r5
    8fa0:	41ad      	sbcs	r5, r5
    8fa2:	426d      	negs	r5, r5
    8fa4:	4445      	add	r5, r8
    8fa6:	18ed      	adds	r5, r5, r3
    8fa8:	1a2d      	subs	r5, r5, r0
    8faa:	e696      	b.n	8cda <__aeabi_ddiv+0x2f6>
    8fac:	1e8a      	subs	r2, r1, #2
    8fae:	9903      	ldr	r1, [sp, #12]
    8fb0:	004d      	lsls	r5, r1, #1
    8fb2:	428d      	cmp	r5, r1
    8fb4:	4189      	sbcs	r1, r1
    8fb6:	4249      	negs	r1, r1
    8fb8:	4441      	add	r1, r8
    8fba:	1876      	adds	r6, r6, r1
    8fbc:	9503      	str	r5, [sp, #12]
    8fbe:	e78f      	b.n	8ee0 <__aeabi_ddiv+0x4fc>
    8fc0:	201f      	movs	r0, #31
    8fc2:	4240      	negs	r0, r0
    8fc4:	1ac3      	subs	r3, r0, r3
    8fc6:	4658      	mov	r0, fp
    8fc8:	40d8      	lsrs	r0, r3
    8fca:	0003      	movs	r3, r0
    8fcc:	2a20      	cmp	r2, #32
    8fce:	d028      	beq.n	9022 <__aeabi_ddiv+0x63e>
    8fd0:	2040      	movs	r0, #64	; 0x40
    8fd2:	465d      	mov	r5, fp
    8fd4:	1a82      	subs	r2, r0, r2
    8fd6:	4095      	lsls	r5, r2
    8fd8:	4329      	orrs	r1, r5
    8fda:	1e4a      	subs	r2, r1, #1
    8fdc:	4191      	sbcs	r1, r2
    8fde:	4319      	orrs	r1, r3
    8fe0:	2307      	movs	r3, #7
    8fe2:	2200      	movs	r2, #0
    8fe4:	400b      	ands	r3, r1
    8fe6:	d009      	beq.n	8ffc <__aeabi_ddiv+0x618>
    8fe8:	230f      	movs	r3, #15
    8fea:	2200      	movs	r2, #0
    8fec:	400b      	ands	r3, r1
    8fee:	0008      	movs	r0, r1
    8ff0:	2b04      	cmp	r3, #4
    8ff2:	d1bd      	bne.n	8f70 <__aeabi_ddiv+0x58c>
    8ff4:	0001      	movs	r1, r0
    8ff6:	0753      	lsls	r3, r2, #29
    8ff8:	0252      	lsls	r2, r2, #9
    8ffa:	0b12      	lsrs	r2, r2, #12
    8ffc:	08c9      	lsrs	r1, r1, #3
    8ffe:	4319      	orrs	r1, r3
    9000:	2301      	movs	r3, #1
    9002:	4688      	mov	r8, r1
    9004:	9902      	ldr	r1, [sp, #8]
    9006:	2400      	movs	r4, #0
    9008:	4019      	ands	r1, r3
    900a:	468c      	mov	ip, r1
    900c:	e5b8      	b.n	8b80 <__aeabi_ddiv+0x19c>
    900e:	4552      	cmp	r2, sl
    9010:	d8be      	bhi.n	8f90 <__aeabi_ddiv+0x5ac>
    9012:	468b      	mov	fp, r1
    9014:	2500      	movs	r5, #0
    9016:	e660      	b.n	8cda <__aeabi_ddiv+0x2f6>
    9018:	9d03      	ldr	r5, [sp, #12]
    901a:	429d      	cmp	r5, r3
    901c:	d3c6      	bcc.n	8fac <__aeabi_ddiv+0x5c8>
    901e:	0011      	movs	r1, r2
    9020:	e762      	b.n	8ee8 <__aeabi_ddiv+0x504>
    9022:	2500      	movs	r5, #0
    9024:	e7d8      	b.n	8fd8 <__aeabi_ddiv+0x5f4>
    9026:	2280      	movs	r2, #128	; 0x80
    9028:	465b      	mov	r3, fp
    902a:	0312      	lsls	r2, r2, #12
    902c:	431a      	orrs	r2, r3
    902e:	9b01      	ldr	r3, [sp, #4]
    9030:	0312      	lsls	r2, r2, #12
    9032:	0b12      	lsrs	r2, r2, #12
    9034:	469c      	mov	ip, r3
    9036:	4688      	mov	r8, r1
    9038:	4c03      	ldr	r4, [pc, #12]	; (9048 <__aeabi_ddiv+0x664>)
    903a:	e5a1      	b.n	8b80 <__aeabi_ddiv+0x19c>
    903c:	000003ff 	.word	0x000003ff
    9040:	feffffff 	.word	0xfeffffff
    9044:	000007fe 	.word	0x000007fe
    9048:	000007ff 	.word	0x000007ff

0000904c <__aeabi_dmul>:
    904c:	b5f0      	push	{r4, r5, r6, r7, lr}
    904e:	4657      	mov	r7, sl
    9050:	4645      	mov	r5, r8
    9052:	46de      	mov	lr, fp
    9054:	464e      	mov	r6, r9
    9056:	b5e0      	push	{r5, r6, r7, lr}
    9058:	030c      	lsls	r4, r1, #12
    905a:	4698      	mov	r8, r3
    905c:	004e      	lsls	r6, r1, #1
    905e:	0b23      	lsrs	r3, r4, #12
    9060:	b087      	sub	sp, #28
    9062:	0007      	movs	r7, r0
    9064:	4692      	mov	sl, r2
    9066:	469b      	mov	fp, r3
    9068:	0d76      	lsrs	r6, r6, #21
    906a:	0fcd      	lsrs	r5, r1, #31
    906c:	2e00      	cmp	r6, #0
    906e:	d06b      	beq.n	9148 <__aeabi_dmul+0xfc>
    9070:	4b6d      	ldr	r3, [pc, #436]	; (9228 <__aeabi_dmul+0x1dc>)
    9072:	429e      	cmp	r6, r3
    9074:	d035      	beq.n	90e2 <__aeabi_dmul+0x96>
    9076:	2480      	movs	r4, #128	; 0x80
    9078:	465b      	mov	r3, fp
    907a:	0f42      	lsrs	r2, r0, #29
    907c:	0424      	lsls	r4, r4, #16
    907e:	00db      	lsls	r3, r3, #3
    9080:	4314      	orrs	r4, r2
    9082:	431c      	orrs	r4, r3
    9084:	00c3      	lsls	r3, r0, #3
    9086:	4699      	mov	r9, r3
    9088:	4b68      	ldr	r3, [pc, #416]	; (922c <__aeabi_dmul+0x1e0>)
    908a:	46a3      	mov	fp, r4
    908c:	469c      	mov	ip, r3
    908e:	2300      	movs	r3, #0
    9090:	2700      	movs	r7, #0
    9092:	4466      	add	r6, ip
    9094:	9302      	str	r3, [sp, #8]
    9096:	4643      	mov	r3, r8
    9098:	031c      	lsls	r4, r3, #12
    909a:	005a      	lsls	r2, r3, #1
    909c:	0fdb      	lsrs	r3, r3, #31
    909e:	4650      	mov	r0, sl
    90a0:	0b24      	lsrs	r4, r4, #12
    90a2:	0d52      	lsrs	r2, r2, #21
    90a4:	4698      	mov	r8, r3
    90a6:	d100      	bne.n	90aa <__aeabi_dmul+0x5e>
    90a8:	e076      	b.n	9198 <__aeabi_dmul+0x14c>
    90aa:	4b5f      	ldr	r3, [pc, #380]	; (9228 <__aeabi_dmul+0x1dc>)
    90ac:	429a      	cmp	r2, r3
    90ae:	d06d      	beq.n	918c <__aeabi_dmul+0x140>
    90b0:	2380      	movs	r3, #128	; 0x80
    90b2:	0f41      	lsrs	r1, r0, #29
    90b4:	041b      	lsls	r3, r3, #16
    90b6:	430b      	orrs	r3, r1
    90b8:	495c      	ldr	r1, [pc, #368]	; (922c <__aeabi_dmul+0x1e0>)
    90ba:	00e4      	lsls	r4, r4, #3
    90bc:	468c      	mov	ip, r1
    90be:	431c      	orrs	r4, r3
    90c0:	00c3      	lsls	r3, r0, #3
    90c2:	2000      	movs	r0, #0
    90c4:	4462      	add	r2, ip
    90c6:	4641      	mov	r1, r8
    90c8:	18b6      	adds	r6, r6, r2
    90ca:	4069      	eors	r1, r5
    90cc:	1c72      	adds	r2, r6, #1
    90ce:	9101      	str	r1, [sp, #4]
    90d0:	4694      	mov	ip, r2
    90d2:	4307      	orrs	r7, r0
    90d4:	2f0f      	cmp	r7, #15
    90d6:	d900      	bls.n	90da <__aeabi_dmul+0x8e>
    90d8:	e0b0      	b.n	923c <__aeabi_dmul+0x1f0>
    90da:	4a55      	ldr	r2, [pc, #340]	; (9230 <__aeabi_dmul+0x1e4>)
    90dc:	00bf      	lsls	r7, r7, #2
    90de:	59d2      	ldr	r2, [r2, r7]
    90e0:	4697      	mov	pc, r2
    90e2:	465b      	mov	r3, fp
    90e4:	4303      	orrs	r3, r0
    90e6:	4699      	mov	r9, r3
    90e8:	d000      	beq.n	90ec <__aeabi_dmul+0xa0>
    90ea:	e087      	b.n	91fc <__aeabi_dmul+0x1b0>
    90ec:	2300      	movs	r3, #0
    90ee:	469b      	mov	fp, r3
    90f0:	3302      	adds	r3, #2
    90f2:	2708      	movs	r7, #8
    90f4:	9302      	str	r3, [sp, #8]
    90f6:	e7ce      	b.n	9096 <__aeabi_dmul+0x4a>
    90f8:	4642      	mov	r2, r8
    90fa:	9201      	str	r2, [sp, #4]
    90fc:	2802      	cmp	r0, #2
    90fe:	d067      	beq.n	91d0 <__aeabi_dmul+0x184>
    9100:	2803      	cmp	r0, #3
    9102:	d100      	bne.n	9106 <__aeabi_dmul+0xba>
    9104:	e20e      	b.n	9524 <__aeabi_dmul+0x4d8>
    9106:	2801      	cmp	r0, #1
    9108:	d000      	beq.n	910c <__aeabi_dmul+0xc0>
    910a:	e162      	b.n	93d2 <__aeabi_dmul+0x386>
    910c:	2300      	movs	r3, #0
    910e:	2400      	movs	r4, #0
    9110:	2200      	movs	r2, #0
    9112:	4699      	mov	r9, r3
    9114:	9901      	ldr	r1, [sp, #4]
    9116:	4001      	ands	r1, r0
    9118:	b2cd      	uxtb	r5, r1
    911a:	2100      	movs	r1, #0
    911c:	0312      	lsls	r2, r2, #12
    911e:	0d0b      	lsrs	r3, r1, #20
    9120:	0b12      	lsrs	r2, r2, #12
    9122:	051b      	lsls	r3, r3, #20
    9124:	4313      	orrs	r3, r2
    9126:	4a43      	ldr	r2, [pc, #268]	; (9234 <__aeabi_dmul+0x1e8>)
    9128:	0524      	lsls	r4, r4, #20
    912a:	4013      	ands	r3, r2
    912c:	431c      	orrs	r4, r3
    912e:	0064      	lsls	r4, r4, #1
    9130:	07ed      	lsls	r5, r5, #31
    9132:	0864      	lsrs	r4, r4, #1
    9134:	432c      	orrs	r4, r5
    9136:	4648      	mov	r0, r9
    9138:	0021      	movs	r1, r4
    913a:	b007      	add	sp, #28
    913c:	bc3c      	pop	{r2, r3, r4, r5}
    913e:	4690      	mov	r8, r2
    9140:	4699      	mov	r9, r3
    9142:	46a2      	mov	sl, r4
    9144:	46ab      	mov	fp, r5
    9146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9148:	4303      	orrs	r3, r0
    914a:	4699      	mov	r9, r3
    914c:	d04f      	beq.n	91ee <__aeabi_dmul+0x1a2>
    914e:	465b      	mov	r3, fp
    9150:	2b00      	cmp	r3, #0
    9152:	d100      	bne.n	9156 <__aeabi_dmul+0x10a>
    9154:	e189      	b.n	946a <__aeabi_dmul+0x41e>
    9156:	4658      	mov	r0, fp
    9158:	f000 fd7a 	bl	9c50 <__clzsi2>
    915c:	0003      	movs	r3, r0
    915e:	3b0b      	subs	r3, #11
    9160:	2b1c      	cmp	r3, #28
    9162:	dd00      	ble.n	9166 <__aeabi_dmul+0x11a>
    9164:	e17a      	b.n	945c <__aeabi_dmul+0x410>
    9166:	221d      	movs	r2, #29
    9168:	1ad3      	subs	r3, r2, r3
    916a:	003a      	movs	r2, r7
    916c:	0001      	movs	r1, r0
    916e:	465c      	mov	r4, fp
    9170:	40da      	lsrs	r2, r3
    9172:	3908      	subs	r1, #8
    9174:	408c      	lsls	r4, r1
    9176:	0013      	movs	r3, r2
    9178:	408f      	lsls	r7, r1
    917a:	4323      	orrs	r3, r4
    917c:	469b      	mov	fp, r3
    917e:	46b9      	mov	r9, r7
    9180:	2300      	movs	r3, #0
    9182:	4e2d      	ldr	r6, [pc, #180]	; (9238 <__aeabi_dmul+0x1ec>)
    9184:	2700      	movs	r7, #0
    9186:	1a36      	subs	r6, r6, r0
    9188:	9302      	str	r3, [sp, #8]
    918a:	e784      	b.n	9096 <__aeabi_dmul+0x4a>
    918c:	4653      	mov	r3, sl
    918e:	4323      	orrs	r3, r4
    9190:	d12a      	bne.n	91e8 <__aeabi_dmul+0x19c>
    9192:	2400      	movs	r4, #0
    9194:	2002      	movs	r0, #2
    9196:	e796      	b.n	90c6 <__aeabi_dmul+0x7a>
    9198:	4653      	mov	r3, sl
    919a:	4323      	orrs	r3, r4
    919c:	d020      	beq.n	91e0 <__aeabi_dmul+0x194>
    919e:	2c00      	cmp	r4, #0
    91a0:	d100      	bne.n	91a4 <__aeabi_dmul+0x158>
    91a2:	e157      	b.n	9454 <__aeabi_dmul+0x408>
    91a4:	0020      	movs	r0, r4
    91a6:	f000 fd53 	bl	9c50 <__clzsi2>
    91aa:	0003      	movs	r3, r0
    91ac:	3b0b      	subs	r3, #11
    91ae:	2b1c      	cmp	r3, #28
    91b0:	dd00      	ble.n	91b4 <__aeabi_dmul+0x168>
    91b2:	e149      	b.n	9448 <__aeabi_dmul+0x3fc>
    91b4:	211d      	movs	r1, #29
    91b6:	1acb      	subs	r3, r1, r3
    91b8:	4651      	mov	r1, sl
    91ba:	0002      	movs	r2, r0
    91bc:	40d9      	lsrs	r1, r3
    91be:	4653      	mov	r3, sl
    91c0:	3a08      	subs	r2, #8
    91c2:	4094      	lsls	r4, r2
    91c4:	4093      	lsls	r3, r2
    91c6:	430c      	orrs	r4, r1
    91c8:	4a1b      	ldr	r2, [pc, #108]	; (9238 <__aeabi_dmul+0x1ec>)
    91ca:	1a12      	subs	r2, r2, r0
    91cc:	2000      	movs	r0, #0
    91ce:	e77a      	b.n	90c6 <__aeabi_dmul+0x7a>
    91d0:	2501      	movs	r5, #1
    91d2:	9b01      	ldr	r3, [sp, #4]
    91d4:	4c14      	ldr	r4, [pc, #80]	; (9228 <__aeabi_dmul+0x1dc>)
    91d6:	401d      	ands	r5, r3
    91d8:	2300      	movs	r3, #0
    91da:	2200      	movs	r2, #0
    91dc:	4699      	mov	r9, r3
    91de:	e79c      	b.n	911a <__aeabi_dmul+0xce>
    91e0:	2400      	movs	r4, #0
    91e2:	2200      	movs	r2, #0
    91e4:	2001      	movs	r0, #1
    91e6:	e76e      	b.n	90c6 <__aeabi_dmul+0x7a>
    91e8:	4653      	mov	r3, sl
    91ea:	2003      	movs	r0, #3
    91ec:	e76b      	b.n	90c6 <__aeabi_dmul+0x7a>
    91ee:	2300      	movs	r3, #0
    91f0:	469b      	mov	fp, r3
    91f2:	3301      	adds	r3, #1
    91f4:	2704      	movs	r7, #4
    91f6:	2600      	movs	r6, #0
    91f8:	9302      	str	r3, [sp, #8]
    91fa:	e74c      	b.n	9096 <__aeabi_dmul+0x4a>
    91fc:	2303      	movs	r3, #3
    91fe:	4681      	mov	r9, r0
    9200:	270c      	movs	r7, #12
    9202:	9302      	str	r3, [sp, #8]
    9204:	e747      	b.n	9096 <__aeabi_dmul+0x4a>
    9206:	2280      	movs	r2, #128	; 0x80
    9208:	2300      	movs	r3, #0
    920a:	2500      	movs	r5, #0
    920c:	0312      	lsls	r2, r2, #12
    920e:	4699      	mov	r9, r3
    9210:	4c05      	ldr	r4, [pc, #20]	; (9228 <__aeabi_dmul+0x1dc>)
    9212:	e782      	b.n	911a <__aeabi_dmul+0xce>
    9214:	465c      	mov	r4, fp
    9216:	464b      	mov	r3, r9
    9218:	9802      	ldr	r0, [sp, #8]
    921a:	e76f      	b.n	90fc <__aeabi_dmul+0xb0>
    921c:	465c      	mov	r4, fp
    921e:	464b      	mov	r3, r9
    9220:	9501      	str	r5, [sp, #4]
    9222:	9802      	ldr	r0, [sp, #8]
    9224:	e76a      	b.n	90fc <__aeabi_dmul+0xb0>
    9226:	46c0      	nop			; (mov r8, r8)
    9228:	000007ff 	.word	0x000007ff
    922c:	fffffc01 	.word	0xfffffc01
    9230:	0000b54c 	.word	0x0000b54c
    9234:	800fffff 	.word	0x800fffff
    9238:	fffffc0d 	.word	0xfffffc0d
    923c:	464a      	mov	r2, r9
    923e:	4649      	mov	r1, r9
    9240:	0c17      	lsrs	r7, r2, #16
    9242:	0c1a      	lsrs	r2, r3, #16
    9244:	041b      	lsls	r3, r3, #16
    9246:	0c1b      	lsrs	r3, r3, #16
    9248:	0408      	lsls	r0, r1, #16
    924a:	0019      	movs	r1, r3
    924c:	0c00      	lsrs	r0, r0, #16
    924e:	4341      	muls	r1, r0
    9250:	0015      	movs	r5, r2
    9252:	4688      	mov	r8, r1
    9254:	0019      	movs	r1, r3
    9256:	437d      	muls	r5, r7
    9258:	4379      	muls	r1, r7
    925a:	9503      	str	r5, [sp, #12]
    925c:	4689      	mov	r9, r1
    925e:	0029      	movs	r1, r5
    9260:	0015      	movs	r5, r2
    9262:	4345      	muls	r5, r0
    9264:	444d      	add	r5, r9
    9266:	9502      	str	r5, [sp, #8]
    9268:	4645      	mov	r5, r8
    926a:	0c2d      	lsrs	r5, r5, #16
    926c:	46aa      	mov	sl, r5
    926e:	9d02      	ldr	r5, [sp, #8]
    9270:	4455      	add	r5, sl
    9272:	45a9      	cmp	r9, r5
    9274:	d906      	bls.n	9284 <__aeabi_dmul+0x238>
    9276:	468a      	mov	sl, r1
    9278:	2180      	movs	r1, #128	; 0x80
    927a:	0249      	lsls	r1, r1, #9
    927c:	4689      	mov	r9, r1
    927e:	44ca      	add	sl, r9
    9280:	4651      	mov	r1, sl
    9282:	9103      	str	r1, [sp, #12]
    9284:	0c29      	lsrs	r1, r5, #16
    9286:	9104      	str	r1, [sp, #16]
    9288:	4641      	mov	r1, r8
    928a:	0409      	lsls	r1, r1, #16
    928c:	042d      	lsls	r5, r5, #16
    928e:	0c09      	lsrs	r1, r1, #16
    9290:	4688      	mov	r8, r1
    9292:	0029      	movs	r1, r5
    9294:	0c25      	lsrs	r5, r4, #16
    9296:	0424      	lsls	r4, r4, #16
    9298:	4441      	add	r1, r8
    929a:	0c24      	lsrs	r4, r4, #16
    929c:	9105      	str	r1, [sp, #20]
    929e:	0021      	movs	r1, r4
    92a0:	4341      	muls	r1, r0
    92a2:	4688      	mov	r8, r1
    92a4:	0021      	movs	r1, r4
    92a6:	4379      	muls	r1, r7
    92a8:	468a      	mov	sl, r1
    92aa:	4368      	muls	r0, r5
    92ac:	4641      	mov	r1, r8
    92ae:	4450      	add	r0, sl
    92b0:	4681      	mov	r9, r0
    92b2:	0c08      	lsrs	r0, r1, #16
    92b4:	4448      	add	r0, r9
    92b6:	436f      	muls	r7, r5
    92b8:	4582      	cmp	sl, r0
    92ba:	d903      	bls.n	92c4 <__aeabi_dmul+0x278>
    92bc:	2180      	movs	r1, #128	; 0x80
    92be:	0249      	lsls	r1, r1, #9
    92c0:	4689      	mov	r9, r1
    92c2:	444f      	add	r7, r9
    92c4:	0c01      	lsrs	r1, r0, #16
    92c6:	4689      	mov	r9, r1
    92c8:	0039      	movs	r1, r7
    92ca:	4449      	add	r1, r9
    92cc:	9102      	str	r1, [sp, #8]
    92ce:	4641      	mov	r1, r8
    92d0:	040f      	lsls	r7, r1, #16
    92d2:	9904      	ldr	r1, [sp, #16]
    92d4:	0c3f      	lsrs	r7, r7, #16
    92d6:	4688      	mov	r8, r1
    92d8:	0400      	lsls	r0, r0, #16
    92da:	19c0      	adds	r0, r0, r7
    92dc:	4480      	add	r8, r0
    92de:	4641      	mov	r1, r8
    92e0:	9104      	str	r1, [sp, #16]
    92e2:	4659      	mov	r1, fp
    92e4:	0c0f      	lsrs	r7, r1, #16
    92e6:	0409      	lsls	r1, r1, #16
    92e8:	0c09      	lsrs	r1, r1, #16
    92ea:	4688      	mov	r8, r1
    92ec:	4359      	muls	r1, r3
    92ee:	468a      	mov	sl, r1
    92f0:	0039      	movs	r1, r7
    92f2:	4351      	muls	r1, r2
    92f4:	4689      	mov	r9, r1
    92f6:	4641      	mov	r1, r8
    92f8:	434a      	muls	r2, r1
    92fa:	4651      	mov	r1, sl
    92fc:	0c09      	lsrs	r1, r1, #16
    92fe:	468b      	mov	fp, r1
    9300:	437b      	muls	r3, r7
    9302:	18d2      	adds	r2, r2, r3
    9304:	445a      	add	r2, fp
    9306:	4293      	cmp	r3, r2
    9308:	d903      	bls.n	9312 <__aeabi_dmul+0x2c6>
    930a:	2380      	movs	r3, #128	; 0x80
    930c:	025b      	lsls	r3, r3, #9
    930e:	469b      	mov	fp, r3
    9310:	44d9      	add	r9, fp
    9312:	4651      	mov	r1, sl
    9314:	0409      	lsls	r1, r1, #16
    9316:	0c09      	lsrs	r1, r1, #16
    9318:	468a      	mov	sl, r1
    931a:	4641      	mov	r1, r8
    931c:	4361      	muls	r1, r4
    931e:	437c      	muls	r4, r7
    9320:	0c13      	lsrs	r3, r2, #16
    9322:	0412      	lsls	r2, r2, #16
    9324:	444b      	add	r3, r9
    9326:	4452      	add	r2, sl
    9328:	46a1      	mov	r9, r4
    932a:	468a      	mov	sl, r1
    932c:	003c      	movs	r4, r7
    932e:	4641      	mov	r1, r8
    9330:	436c      	muls	r4, r5
    9332:	434d      	muls	r5, r1
    9334:	4651      	mov	r1, sl
    9336:	444d      	add	r5, r9
    9338:	0c0f      	lsrs	r7, r1, #16
    933a:	197d      	adds	r5, r7, r5
    933c:	45a9      	cmp	r9, r5
    933e:	d903      	bls.n	9348 <__aeabi_dmul+0x2fc>
    9340:	2180      	movs	r1, #128	; 0x80
    9342:	0249      	lsls	r1, r1, #9
    9344:	4688      	mov	r8, r1
    9346:	4444      	add	r4, r8
    9348:	9f04      	ldr	r7, [sp, #16]
    934a:	9903      	ldr	r1, [sp, #12]
    934c:	46b8      	mov	r8, r7
    934e:	4441      	add	r1, r8
    9350:	468b      	mov	fp, r1
    9352:	4583      	cmp	fp, r0
    9354:	4180      	sbcs	r0, r0
    9356:	4241      	negs	r1, r0
    9358:	4688      	mov	r8, r1
    935a:	4651      	mov	r1, sl
    935c:	0408      	lsls	r0, r1, #16
    935e:	042f      	lsls	r7, r5, #16
    9360:	0c00      	lsrs	r0, r0, #16
    9362:	183f      	adds	r7, r7, r0
    9364:	4658      	mov	r0, fp
    9366:	9902      	ldr	r1, [sp, #8]
    9368:	1810      	adds	r0, r2, r0
    936a:	4689      	mov	r9, r1
    936c:	4290      	cmp	r0, r2
    936e:	4192      	sbcs	r2, r2
    9370:	444f      	add	r7, r9
    9372:	46ba      	mov	sl, r7
    9374:	4252      	negs	r2, r2
    9376:	4699      	mov	r9, r3
    9378:	4693      	mov	fp, r2
    937a:	44c2      	add	sl, r8
    937c:	44d1      	add	r9, sl
    937e:	44cb      	add	fp, r9
    9380:	428f      	cmp	r7, r1
    9382:	41bf      	sbcs	r7, r7
    9384:	45c2      	cmp	sl, r8
    9386:	4189      	sbcs	r1, r1
    9388:	4599      	cmp	r9, r3
    938a:	419b      	sbcs	r3, r3
    938c:	4593      	cmp	fp, r2
    938e:	4192      	sbcs	r2, r2
    9390:	427f      	negs	r7, r7
    9392:	4249      	negs	r1, r1
    9394:	0c2d      	lsrs	r5, r5, #16
    9396:	4252      	negs	r2, r2
    9398:	430f      	orrs	r7, r1
    939a:	425b      	negs	r3, r3
    939c:	4313      	orrs	r3, r2
    939e:	197f      	adds	r7, r7, r5
    93a0:	18ff      	adds	r7, r7, r3
    93a2:	465b      	mov	r3, fp
    93a4:	193c      	adds	r4, r7, r4
    93a6:	0ddb      	lsrs	r3, r3, #23
    93a8:	9a05      	ldr	r2, [sp, #20]
    93aa:	0264      	lsls	r4, r4, #9
    93ac:	431c      	orrs	r4, r3
    93ae:	0243      	lsls	r3, r0, #9
    93b0:	4313      	orrs	r3, r2
    93b2:	1e5d      	subs	r5, r3, #1
    93b4:	41ab      	sbcs	r3, r5
    93b6:	465a      	mov	r2, fp
    93b8:	0dc0      	lsrs	r0, r0, #23
    93ba:	4303      	orrs	r3, r0
    93bc:	0252      	lsls	r2, r2, #9
    93be:	4313      	orrs	r3, r2
    93c0:	01e2      	lsls	r2, r4, #7
    93c2:	d556      	bpl.n	9472 <__aeabi_dmul+0x426>
    93c4:	2001      	movs	r0, #1
    93c6:	085a      	lsrs	r2, r3, #1
    93c8:	4003      	ands	r3, r0
    93ca:	4313      	orrs	r3, r2
    93cc:	07e2      	lsls	r2, r4, #31
    93ce:	4313      	orrs	r3, r2
    93d0:	0864      	lsrs	r4, r4, #1
    93d2:	485a      	ldr	r0, [pc, #360]	; (953c <__aeabi_dmul+0x4f0>)
    93d4:	4460      	add	r0, ip
    93d6:	2800      	cmp	r0, #0
    93d8:	dd4d      	ble.n	9476 <__aeabi_dmul+0x42a>
    93da:	075a      	lsls	r2, r3, #29
    93dc:	d009      	beq.n	93f2 <__aeabi_dmul+0x3a6>
    93de:	220f      	movs	r2, #15
    93e0:	401a      	ands	r2, r3
    93e2:	2a04      	cmp	r2, #4
    93e4:	d005      	beq.n	93f2 <__aeabi_dmul+0x3a6>
    93e6:	1d1a      	adds	r2, r3, #4
    93e8:	429a      	cmp	r2, r3
    93ea:	419b      	sbcs	r3, r3
    93ec:	425b      	negs	r3, r3
    93ee:	18e4      	adds	r4, r4, r3
    93f0:	0013      	movs	r3, r2
    93f2:	01e2      	lsls	r2, r4, #7
    93f4:	d504      	bpl.n	9400 <__aeabi_dmul+0x3b4>
    93f6:	2080      	movs	r0, #128	; 0x80
    93f8:	4a51      	ldr	r2, [pc, #324]	; (9540 <__aeabi_dmul+0x4f4>)
    93fa:	00c0      	lsls	r0, r0, #3
    93fc:	4014      	ands	r4, r2
    93fe:	4460      	add	r0, ip
    9400:	4a50      	ldr	r2, [pc, #320]	; (9544 <__aeabi_dmul+0x4f8>)
    9402:	4290      	cmp	r0, r2
    9404:	dd00      	ble.n	9408 <__aeabi_dmul+0x3bc>
    9406:	e6e3      	b.n	91d0 <__aeabi_dmul+0x184>
    9408:	2501      	movs	r5, #1
    940a:	08db      	lsrs	r3, r3, #3
    940c:	0762      	lsls	r2, r4, #29
    940e:	431a      	orrs	r2, r3
    9410:	0264      	lsls	r4, r4, #9
    9412:	9b01      	ldr	r3, [sp, #4]
    9414:	4691      	mov	r9, r2
    9416:	0b22      	lsrs	r2, r4, #12
    9418:	0544      	lsls	r4, r0, #21
    941a:	0d64      	lsrs	r4, r4, #21
    941c:	401d      	ands	r5, r3
    941e:	e67c      	b.n	911a <__aeabi_dmul+0xce>
    9420:	2280      	movs	r2, #128	; 0x80
    9422:	4659      	mov	r1, fp
    9424:	0312      	lsls	r2, r2, #12
    9426:	4211      	tst	r1, r2
    9428:	d008      	beq.n	943c <__aeabi_dmul+0x3f0>
    942a:	4214      	tst	r4, r2
    942c:	d106      	bne.n	943c <__aeabi_dmul+0x3f0>
    942e:	4322      	orrs	r2, r4
    9430:	0312      	lsls	r2, r2, #12
    9432:	0b12      	lsrs	r2, r2, #12
    9434:	4645      	mov	r5, r8
    9436:	4699      	mov	r9, r3
    9438:	4c43      	ldr	r4, [pc, #268]	; (9548 <__aeabi_dmul+0x4fc>)
    943a:	e66e      	b.n	911a <__aeabi_dmul+0xce>
    943c:	465b      	mov	r3, fp
    943e:	431a      	orrs	r2, r3
    9440:	0312      	lsls	r2, r2, #12
    9442:	0b12      	lsrs	r2, r2, #12
    9444:	4c40      	ldr	r4, [pc, #256]	; (9548 <__aeabi_dmul+0x4fc>)
    9446:	e668      	b.n	911a <__aeabi_dmul+0xce>
    9448:	0003      	movs	r3, r0
    944a:	4654      	mov	r4, sl
    944c:	3b28      	subs	r3, #40	; 0x28
    944e:	409c      	lsls	r4, r3
    9450:	2300      	movs	r3, #0
    9452:	e6b9      	b.n	91c8 <__aeabi_dmul+0x17c>
    9454:	f000 fbfc 	bl	9c50 <__clzsi2>
    9458:	3020      	adds	r0, #32
    945a:	e6a6      	b.n	91aa <__aeabi_dmul+0x15e>
    945c:	0003      	movs	r3, r0
    945e:	3b28      	subs	r3, #40	; 0x28
    9460:	409f      	lsls	r7, r3
    9462:	2300      	movs	r3, #0
    9464:	46bb      	mov	fp, r7
    9466:	4699      	mov	r9, r3
    9468:	e68a      	b.n	9180 <__aeabi_dmul+0x134>
    946a:	f000 fbf1 	bl	9c50 <__clzsi2>
    946e:	3020      	adds	r0, #32
    9470:	e674      	b.n	915c <__aeabi_dmul+0x110>
    9472:	46b4      	mov	ip, r6
    9474:	e7ad      	b.n	93d2 <__aeabi_dmul+0x386>
    9476:	2501      	movs	r5, #1
    9478:	1a2a      	subs	r2, r5, r0
    947a:	2a38      	cmp	r2, #56	; 0x38
    947c:	dd06      	ble.n	948c <__aeabi_dmul+0x440>
    947e:	9b01      	ldr	r3, [sp, #4]
    9480:	2400      	movs	r4, #0
    9482:	401d      	ands	r5, r3
    9484:	2300      	movs	r3, #0
    9486:	2200      	movs	r2, #0
    9488:	4699      	mov	r9, r3
    948a:	e646      	b.n	911a <__aeabi_dmul+0xce>
    948c:	2a1f      	cmp	r2, #31
    948e:	dc21      	bgt.n	94d4 <__aeabi_dmul+0x488>
    9490:	2520      	movs	r5, #32
    9492:	0020      	movs	r0, r4
    9494:	1aad      	subs	r5, r5, r2
    9496:	001e      	movs	r6, r3
    9498:	40ab      	lsls	r3, r5
    949a:	40a8      	lsls	r0, r5
    949c:	40d6      	lsrs	r6, r2
    949e:	1e5d      	subs	r5, r3, #1
    94a0:	41ab      	sbcs	r3, r5
    94a2:	4330      	orrs	r0, r6
    94a4:	4318      	orrs	r0, r3
    94a6:	40d4      	lsrs	r4, r2
    94a8:	0743      	lsls	r3, r0, #29
    94aa:	d009      	beq.n	94c0 <__aeabi_dmul+0x474>
    94ac:	230f      	movs	r3, #15
    94ae:	4003      	ands	r3, r0
    94b0:	2b04      	cmp	r3, #4
    94b2:	d005      	beq.n	94c0 <__aeabi_dmul+0x474>
    94b4:	0003      	movs	r3, r0
    94b6:	1d18      	adds	r0, r3, #4
    94b8:	4298      	cmp	r0, r3
    94ba:	419b      	sbcs	r3, r3
    94bc:	425b      	negs	r3, r3
    94be:	18e4      	adds	r4, r4, r3
    94c0:	0223      	lsls	r3, r4, #8
    94c2:	d521      	bpl.n	9508 <__aeabi_dmul+0x4bc>
    94c4:	2501      	movs	r5, #1
    94c6:	9b01      	ldr	r3, [sp, #4]
    94c8:	2401      	movs	r4, #1
    94ca:	401d      	ands	r5, r3
    94cc:	2300      	movs	r3, #0
    94ce:	2200      	movs	r2, #0
    94d0:	4699      	mov	r9, r3
    94d2:	e622      	b.n	911a <__aeabi_dmul+0xce>
    94d4:	251f      	movs	r5, #31
    94d6:	0021      	movs	r1, r4
    94d8:	426d      	negs	r5, r5
    94da:	1a28      	subs	r0, r5, r0
    94dc:	40c1      	lsrs	r1, r0
    94de:	0008      	movs	r0, r1
    94e0:	2a20      	cmp	r2, #32
    94e2:	d01d      	beq.n	9520 <__aeabi_dmul+0x4d4>
    94e4:	355f      	adds	r5, #95	; 0x5f
    94e6:	1aaa      	subs	r2, r5, r2
    94e8:	4094      	lsls	r4, r2
    94ea:	4323      	orrs	r3, r4
    94ec:	1e5c      	subs	r4, r3, #1
    94ee:	41a3      	sbcs	r3, r4
    94f0:	2507      	movs	r5, #7
    94f2:	4303      	orrs	r3, r0
    94f4:	401d      	ands	r5, r3
    94f6:	2200      	movs	r2, #0
    94f8:	2d00      	cmp	r5, #0
    94fa:	d009      	beq.n	9510 <__aeabi_dmul+0x4c4>
    94fc:	220f      	movs	r2, #15
    94fe:	2400      	movs	r4, #0
    9500:	401a      	ands	r2, r3
    9502:	0018      	movs	r0, r3
    9504:	2a04      	cmp	r2, #4
    9506:	d1d6      	bne.n	94b6 <__aeabi_dmul+0x46a>
    9508:	0003      	movs	r3, r0
    950a:	0765      	lsls	r5, r4, #29
    950c:	0264      	lsls	r4, r4, #9
    950e:	0b22      	lsrs	r2, r4, #12
    9510:	08db      	lsrs	r3, r3, #3
    9512:	432b      	orrs	r3, r5
    9514:	2501      	movs	r5, #1
    9516:	4699      	mov	r9, r3
    9518:	9b01      	ldr	r3, [sp, #4]
    951a:	2400      	movs	r4, #0
    951c:	401d      	ands	r5, r3
    951e:	e5fc      	b.n	911a <__aeabi_dmul+0xce>
    9520:	2400      	movs	r4, #0
    9522:	e7e2      	b.n	94ea <__aeabi_dmul+0x49e>
    9524:	2280      	movs	r2, #128	; 0x80
    9526:	2501      	movs	r5, #1
    9528:	0312      	lsls	r2, r2, #12
    952a:	4322      	orrs	r2, r4
    952c:	9901      	ldr	r1, [sp, #4]
    952e:	0312      	lsls	r2, r2, #12
    9530:	0b12      	lsrs	r2, r2, #12
    9532:	400d      	ands	r5, r1
    9534:	4699      	mov	r9, r3
    9536:	4c04      	ldr	r4, [pc, #16]	; (9548 <__aeabi_dmul+0x4fc>)
    9538:	e5ef      	b.n	911a <__aeabi_dmul+0xce>
    953a:	46c0      	nop			; (mov r8, r8)
    953c:	000003ff 	.word	0x000003ff
    9540:	feffffff 	.word	0xfeffffff
    9544:	000007fe 	.word	0x000007fe
    9548:	000007ff 	.word	0x000007ff

0000954c <__aeabi_dsub>:
    954c:	b5f0      	push	{r4, r5, r6, r7, lr}
    954e:	4646      	mov	r6, r8
    9550:	46d6      	mov	lr, sl
    9552:	464f      	mov	r7, r9
    9554:	030c      	lsls	r4, r1, #12
    9556:	b5c0      	push	{r6, r7, lr}
    9558:	0fcd      	lsrs	r5, r1, #31
    955a:	004e      	lsls	r6, r1, #1
    955c:	0a61      	lsrs	r1, r4, #9
    955e:	0f44      	lsrs	r4, r0, #29
    9560:	430c      	orrs	r4, r1
    9562:	00c1      	lsls	r1, r0, #3
    9564:	0058      	lsls	r0, r3, #1
    9566:	0d40      	lsrs	r0, r0, #21
    9568:	4684      	mov	ip, r0
    956a:	468a      	mov	sl, r1
    956c:	000f      	movs	r7, r1
    956e:	0319      	lsls	r1, r3, #12
    9570:	0f50      	lsrs	r0, r2, #29
    9572:	0a49      	lsrs	r1, r1, #9
    9574:	4301      	orrs	r1, r0
    9576:	48c6      	ldr	r0, [pc, #792]	; (9890 <__aeabi_dsub+0x344>)
    9578:	0d76      	lsrs	r6, r6, #21
    957a:	46a8      	mov	r8, r5
    957c:	0fdb      	lsrs	r3, r3, #31
    957e:	00d2      	lsls	r2, r2, #3
    9580:	4584      	cmp	ip, r0
    9582:	d100      	bne.n	9586 <__aeabi_dsub+0x3a>
    9584:	e0d8      	b.n	9738 <__aeabi_dsub+0x1ec>
    9586:	2001      	movs	r0, #1
    9588:	4043      	eors	r3, r0
    958a:	42ab      	cmp	r3, r5
    958c:	d100      	bne.n	9590 <__aeabi_dsub+0x44>
    958e:	e0a6      	b.n	96de <__aeabi_dsub+0x192>
    9590:	4660      	mov	r0, ip
    9592:	1a35      	subs	r5, r6, r0
    9594:	2d00      	cmp	r5, #0
    9596:	dc00      	bgt.n	959a <__aeabi_dsub+0x4e>
    9598:	e105      	b.n	97a6 <__aeabi_dsub+0x25a>
    959a:	2800      	cmp	r0, #0
    959c:	d110      	bne.n	95c0 <__aeabi_dsub+0x74>
    959e:	000b      	movs	r3, r1
    95a0:	4313      	orrs	r3, r2
    95a2:	d100      	bne.n	95a6 <__aeabi_dsub+0x5a>
    95a4:	e0d7      	b.n	9756 <__aeabi_dsub+0x20a>
    95a6:	1e6b      	subs	r3, r5, #1
    95a8:	2b00      	cmp	r3, #0
    95aa:	d000      	beq.n	95ae <__aeabi_dsub+0x62>
    95ac:	e14b      	b.n	9846 <__aeabi_dsub+0x2fa>
    95ae:	4653      	mov	r3, sl
    95b0:	1a9f      	subs	r7, r3, r2
    95b2:	45ba      	cmp	sl, r7
    95b4:	4180      	sbcs	r0, r0
    95b6:	1a64      	subs	r4, r4, r1
    95b8:	4240      	negs	r0, r0
    95ba:	1a24      	subs	r4, r4, r0
    95bc:	2601      	movs	r6, #1
    95be:	e01e      	b.n	95fe <__aeabi_dsub+0xb2>
    95c0:	4bb3      	ldr	r3, [pc, #716]	; (9890 <__aeabi_dsub+0x344>)
    95c2:	429e      	cmp	r6, r3
    95c4:	d048      	beq.n	9658 <__aeabi_dsub+0x10c>
    95c6:	2380      	movs	r3, #128	; 0x80
    95c8:	041b      	lsls	r3, r3, #16
    95ca:	4319      	orrs	r1, r3
    95cc:	2d38      	cmp	r5, #56	; 0x38
    95ce:	dd00      	ble.n	95d2 <__aeabi_dsub+0x86>
    95d0:	e119      	b.n	9806 <__aeabi_dsub+0x2ba>
    95d2:	2d1f      	cmp	r5, #31
    95d4:	dd00      	ble.n	95d8 <__aeabi_dsub+0x8c>
    95d6:	e14c      	b.n	9872 <__aeabi_dsub+0x326>
    95d8:	2320      	movs	r3, #32
    95da:	000f      	movs	r7, r1
    95dc:	1b5b      	subs	r3, r3, r5
    95de:	0010      	movs	r0, r2
    95e0:	409a      	lsls	r2, r3
    95e2:	409f      	lsls	r7, r3
    95e4:	40e8      	lsrs	r0, r5
    95e6:	1e53      	subs	r3, r2, #1
    95e8:	419a      	sbcs	r2, r3
    95ea:	40e9      	lsrs	r1, r5
    95ec:	4307      	orrs	r7, r0
    95ee:	4317      	orrs	r7, r2
    95f0:	4653      	mov	r3, sl
    95f2:	1bdf      	subs	r7, r3, r7
    95f4:	1a61      	subs	r1, r4, r1
    95f6:	45ba      	cmp	sl, r7
    95f8:	41a4      	sbcs	r4, r4
    95fa:	4264      	negs	r4, r4
    95fc:	1b0c      	subs	r4, r1, r4
    95fe:	0223      	lsls	r3, r4, #8
    9600:	d400      	bmi.n	9604 <__aeabi_dsub+0xb8>
    9602:	e0c5      	b.n	9790 <__aeabi_dsub+0x244>
    9604:	0264      	lsls	r4, r4, #9
    9606:	0a65      	lsrs	r5, r4, #9
    9608:	2d00      	cmp	r5, #0
    960a:	d100      	bne.n	960e <__aeabi_dsub+0xc2>
    960c:	e0f6      	b.n	97fc <__aeabi_dsub+0x2b0>
    960e:	0028      	movs	r0, r5
    9610:	f000 fb1e 	bl	9c50 <__clzsi2>
    9614:	0003      	movs	r3, r0
    9616:	3b08      	subs	r3, #8
    9618:	2b1f      	cmp	r3, #31
    961a:	dd00      	ble.n	961e <__aeabi_dsub+0xd2>
    961c:	e0e9      	b.n	97f2 <__aeabi_dsub+0x2a6>
    961e:	2220      	movs	r2, #32
    9620:	003c      	movs	r4, r7
    9622:	1ad2      	subs	r2, r2, r3
    9624:	409d      	lsls	r5, r3
    9626:	40d4      	lsrs	r4, r2
    9628:	409f      	lsls	r7, r3
    962a:	4325      	orrs	r5, r4
    962c:	429e      	cmp	r6, r3
    962e:	dd00      	ble.n	9632 <__aeabi_dsub+0xe6>
    9630:	e0db      	b.n	97ea <__aeabi_dsub+0x29e>
    9632:	1b9e      	subs	r6, r3, r6
    9634:	1c73      	adds	r3, r6, #1
    9636:	2b1f      	cmp	r3, #31
    9638:	dd00      	ble.n	963c <__aeabi_dsub+0xf0>
    963a:	e10a      	b.n	9852 <__aeabi_dsub+0x306>
    963c:	2220      	movs	r2, #32
    963e:	0038      	movs	r0, r7
    9640:	1ad2      	subs	r2, r2, r3
    9642:	0029      	movs	r1, r5
    9644:	4097      	lsls	r7, r2
    9646:	002c      	movs	r4, r5
    9648:	4091      	lsls	r1, r2
    964a:	40d8      	lsrs	r0, r3
    964c:	1e7a      	subs	r2, r7, #1
    964e:	4197      	sbcs	r7, r2
    9650:	40dc      	lsrs	r4, r3
    9652:	2600      	movs	r6, #0
    9654:	4301      	orrs	r1, r0
    9656:	430f      	orrs	r7, r1
    9658:	077b      	lsls	r3, r7, #29
    965a:	d009      	beq.n	9670 <__aeabi_dsub+0x124>
    965c:	230f      	movs	r3, #15
    965e:	403b      	ands	r3, r7
    9660:	2b04      	cmp	r3, #4
    9662:	d005      	beq.n	9670 <__aeabi_dsub+0x124>
    9664:	1d3b      	adds	r3, r7, #4
    9666:	42bb      	cmp	r3, r7
    9668:	41bf      	sbcs	r7, r7
    966a:	427f      	negs	r7, r7
    966c:	19e4      	adds	r4, r4, r7
    966e:	001f      	movs	r7, r3
    9670:	0223      	lsls	r3, r4, #8
    9672:	d525      	bpl.n	96c0 <__aeabi_dsub+0x174>
    9674:	4b86      	ldr	r3, [pc, #536]	; (9890 <__aeabi_dsub+0x344>)
    9676:	3601      	adds	r6, #1
    9678:	429e      	cmp	r6, r3
    967a:	d100      	bne.n	967e <__aeabi_dsub+0x132>
    967c:	e0af      	b.n	97de <__aeabi_dsub+0x292>
    967e:	4b85      	ldr	r3, [pc, #532]	; (9894 <__aeabi_dsub+0x348>)
    9680:	2501      	movs	r5, #1
    9682:	401c      	ands	r4, r3
    9684:	4643      	mov	r3, r8
    9686:	0762      	lsls	r2, r4, #29
    9688:	08ff      	lsrs	r7, r7, #3
    968a:	0264      	lsls	r4, r4, #9
    968c:	0576      	lsls	r6, r6, #21
    968e:	4317      	orrs	r7, r2
    9690:	0b24      	lsrs	r4, r4, #12
    9692:	0d76      	lsrs	r6, r6, #21
    9694:	401d      	ands	r5, r3
    9696:	2100      	movs	r1, #0
    9698:	0324      	lsls	r4, r4, #12
    969a:	0b23      	lsrs	r3, r4, #12
    969c:	0d0c      	lsrs	r4, r1, #20
    969e:	4a7e      	ldr	r2, [pc, #504]	; (9898 <__aeabi_dsub+0x34c>)
    96a0:	0524      	lsls	r4, r4, #20
    96a2:	431c      	orrs	r4, r3
    96a4:	4014      	ands	r4, r2
    96a6:	0533      	lsls	r3, r6, #20
    96a8:	4323      	orrs	r3, r4
    96aa:	005b      	lsls	r3, r3, #1
    96ac:	07ed      	lsls	r5, r5, #31
    96ae:	085b      	lsrs	r3, r3, #1
    96b0:	432b      	orrs	r3, r5
    96b2:	0038      	movs	r0, r7
    96b4:	0019      	movs	r1, r3
    96b6:	bc1c      	pop	{r2, r3, r4}
    96b8:	4690      	mov	r8, r2
    96ba:	4699      	mov	r9, r3
    96bc:	46a2      	mov	sl, r4
    96be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96c0:	2501      	movs	r5, #1
    96c2:	4643      	mov	r3, r8
    96c4:	0762      	lsls	r2, r4, #29
    96c6:	08ff      	lsrs	r7, r7, #3
    96c8:	4317      	orrs	r7, r2
    96ca:	08e4      	lsrs	r4, r4, #3
    96cc:	401d      	ands	r5, r3
    96ce:	4b70      	ldr	r3, [pc, #448]	; (9890 <__aeabi_dsub+0x344>)
    96d0:	429e      	cmp	r6, r3
    96d2:	d036      	beq.n	9742 <__aeabi_dsub+0x1f6>
    96d4:	0324      	lsls	r4, r4, #12
    96d6:	0576      	lsls	r6, r6, #21
    96d8:	0b24      	lsrs	r4, r4, #12
    96da:	0d76      	lsrs	r6, r6, #21
    96dc:	e7db      	b.n	9696 <__aeabi_dsub+0x14a>
    96de:	4663      	mov	r3, ip
    96e0:	1af3      	subs	r3, r6, r3
    96e2:	2b00      	cmp	r3, #0
    96e4:	dc00      	bgt.n	96e8 <__aeabi_dsub+0x19c>
    96e6:	e094      	b.n	9812 <__aeabi_dsub+0x2c6>
    96e8:	4660      	mov	r0, ip
    96ea:	2800      	cmp	r0, #0
    96ec:	d035      	beq.n	975a <__aeabi_dsub+0x20e>
    96ee:	4868      	ldr	r0, [pc, #416]	; (9890 <__aeabi_dsub+0x344>)
    96f0:	4286      	cmp	r6, r0
    96f2:	d0b1      	beq.n	9658 <__aeabi_dsub+0x10c>
    96f4:	2780      	movs	r7, #128	; 0x80
    96f6:	043f      	lsls	r7, r7, #16
    96f8:	4339      	orrs	r1, r7
    96fa:	2b38      	cmp	r3, #56	; 0x38
    96fc:	dc00      	bgt.n	9700 <__aeabi_dsub+0x1b4>
    96fe:	e0fd      	b.n	98fc <__aeabi_dsub+0x3b0>
    9700:	430a      	orrs	r2, r1
    9702:	0017      	movs	r7, r2
    9704:	2100      	movs	r1, #0
    9706:	1e7a      	subs	r2, r7, #1
    9708:	4197      	sbcs	r7, r2
    970a:	4457      	add	r7, sl
    970c:	4557      	cmp	r7, sl
    970e:	4180      	sbcs	r0, r0
    9710:	1909      	adds	r1, r1, r4
    9712:	4244      	negs	r4, r0
    9714:	190c      	adds	r4, r1, r4
    9716:	0223      	lsls	r3, r4, #8
    9718:	d53a      	bpl.n	9790 <__aeabi_dsub+0x244>
    971a:	4b5d      	ldr	r3, [pc, #372]	; (9890 <__aeabi_dsub+0x344>)
    971c:	3601      	adds	r6, #1
    971e:	429e      	cmp	r6, r3
    9720:	d100      	bne.n	9724 <__aeabi_dsub+0x1d8>
    9722:	e14b      	b.n	99bc <__aeabi_dsub+0x470>
    9724:	2201      	movs	r2, #1
    9726:	4b5b      	ldr	r3, [pc, #364]	; (9894 <__aeabi_dsub+0x348>)
    9728:	401c      	ands	r4, r3
    972a:	087b      	lsrs	r3, r7, #1
    972c:	4017      	ands	r7, r2
    972e:	431f      	orrs	r7, r3
    9730:	07e2      	lsls	r2, r4, #31
    9732:	4317      	orrs	r7, r2
    9734:	0864      	lsrs	r4, r4, #1
    9736:	e78f      	b.n	9658 <__aeabi_dsub+0x10c>
    9738:	0008      	movs	r0, r1
    973a:	4310      	orrs	r0, r2
    973c:	d000      	beq.n	9740 <__aeabi_dsub+0x1f4>
    973e:	e724      	b.n	958a <__aeabi_dsub+0x3e>
    9740:	e721      	b.n	9586 <__aeabi_dsub+0x3a>
    9742:	0023      	movs	r3, r4
    9744:	433b      	orrs	r3, r7
    9746:	d100      	bne.n	974a <__aeabi_dsub+0x1fe>
    9748:	e1b9      	b.n	9abe <__aeabi_dsub+0x572>
    974a:	2280      	movs	r2, #128	; 0x80
    974c:	0312      	lsls	r2, r2, #12
    974e:	4314      	orrs	r4, r2
    9750:	0324      	lsls	r4, r4, #12
    9752:	0b24      	lsrs	r4, r4, #12
    9754:	e79f      	b.n	9696 <__aeabi_dsub+0x14a>
    9756:	002e      	movs	r6, r5
    9758:	e77e      	b.n	9658 <__aeabi_dsub+0x10c>
    975a:	0008      	movs	r0, r1
    975c:	4310      	orrs	r0, r2
    975e:	d100      	bne.n	9762 <__aeabi_dsub+0x216>
    9760:	e0ca      	b.n	98f8 <__aeabi_dsub+0x3ac>
    9762:	1e58      	subs	r0, r3, #1
    9764:	4684      	mov	ip, r0
    9766:	2800      	cmp	r0, #0
    9768:	d000      	beq.n	976c <__aeabi_dsub+0x220>
    976a:	e0e7      	b.n	993c <__aeabi_dsub+0x3f0>
    976c:	4452      	add	r2, sl
    976e:	4552      	cmp	r2, sl
    9770:	4180      	sbcs	r0, r0
    9772:	1864      	adds	r4, r4, r1
    9774:	4240      	negs	r0, r0
    9776:	1824      	adds	r4, r4, r0
    9778:	0017      	movs	r7, r2
    977a:	2601      	movs	r6, #1
    977c:	0223      	lsls	r3, r4, #8
    977e:	d507      	bpl.n	9790 <__aeabi_dsub+0x244>
    9780:	2602      	movs	r6, #2
    9782:	e7cf      	b.n	9724 <__aeabi_dsub+0x1d8>
    9784:	4664      	mov	r4, ip
    9786:	432c      	orrs	r4, r5
    9788:	d100      	bne.n	978c <__aeabi_dsub+0x240>
    978a:	e1b3      	b.n	9af4 <__aeabi_dsub+0x5a8>
    978c:	002c      	movs	r4, r5
    978e:	4667      	mov	r7, ip
    9790:	077b      	lsls	r3, r7, #29
    9792:	d000      	beq.n	9796 <__aeabi_dsub+0x24a>
    9794:	e762      	b.n	965c <__aeabi_dsub+0x110>
    9796:	0763      	lsls	r3, r4, #29
    9798:	08ff      	lsrs	r7, r7, #3
    979a:	431f      	orrs	r7, r3
    979c:	2501      	movs	r5, #1
    979e:	4643      	mov	r3, r8
    97a0:	08e4      	lsrs	r4, r4, #3
    97a2:	401d      	ands	r5, r3
    97a4:	e793      	b.n	96ce <__aeabi_dsub+0x182>
    97a6:	2d00      	cmp	r5, #0
    97a8:	d178      	bne.n	989c <__aeabi_dsub+0x350>
    97aa:	1c75      	adds	r5, r6, #1
    97ac:	056d      	lsls	r5, r5, #21
    97ae:	0d6d      	lsrs	r5, r5, #21
    97b0:	2d01      	cmp	r5, #1
    97b2:	dc00      	bgt.n	97b6 <__aeabi_dsub+0x26a>
    97b4:	e0f2      	b.n	999c <__aeabi_dsub+0x450>
    97b6:	4650      	mov	r0, sl
    97b8:	1a80      	subs	r0, r0, r2
    97ba:	4582      	cmp	sl, r0
    97bc:	41bf      	sbcs	r7, r7
    97be:	1a65      	subs	r5, r4, r1
    97c0:	427f      	negs	r7, r7
    97c2:	1bed      	subs	r5, r5, r7
    97c4:	4684      	mov	ip, r0
    97c6:	0228      	lsls	r0, r5, #8
    97c8:	d400      	bmi.n	97cc <__aeabi_dsub+0x280>
    97ca:	e08c      	b.n	98e6 <__aeabi_dsub+0x39a>
    97cc:	4650      	mov	r0, sl
    97ce:	1a17      	subs	r7, r2, r0
    97d0:	42ba      	cmp	r2, r7
    97d2:	4192      	sbcs	r2, r2
    97d4:	1b0c      	subs	r4, r1, r4
    97d6:	4255      	negs	r5, r2
    97d8:	1b65      	subs	r5, r4, r5
    97da:	4698      	mov	r8, r3
    97dc:	e714      	b.n	9608 <__aeabi_dsub+0xbc>
    97de:	2501      	movs	r5, #1
    97e0:	4643      	mov	r3, r8
    97e2:	2400      	movs	r4, #0
    97e4:	401d      	ands	r5, r3
    97e6:	2700      	movs	r7, #0
    97e8:	e755      	b.n	9696 <__aeabi_dsub+0x14a>
    97ea:	4c2a      	ldr	r4, [pc, #168]	; (9894 <__aeabi_dsub+0x348>)
    97ec:	1af6      	subs	r6, r6, r3
    97ee:	402c      	ands	r4, r5
    97f0:	e732      	b.n	9658 <__aeabi_dsub+0x10c>
    97f2:	003d      	movs	r5, r7
    97f4:	3828      	subs	r0, #40	; 0x28
    97f6:	4085      	lsls	r5, r0
    97f8:	2700      	movs	r7, #0
    97fa:	e717      	b.n	962c <__aeabi_dsub+0xe0>
    97fc:	0038      	movs	r0, r7
    97fe:	f000 fa27 	bl	9c50 <__clzsi2>
    9802:	3020      	adds	r0, #32
    9804:	e706      	b.n	9614 <__aeabi_dsub+0xc8>
    9806:	430a      	orrs	r2, r1
    9808:	0017      	movs	r7, r2
    980a:	2100      	movs	r1, #0
    980c:	1e7a      	subs	r2, r7, #1
    980e:	4197      	sbcs	r7, r2
    9810:	e6ee      	b.n	95f0 <__aeabi_dsub+0xa4>
    9812:	2b00      	cmp	r3, #0
    9814:	d000      	beq.n	9818 <__aeabi_dsub+0x2cc>
    9816:	e0e5      	b.n	99e4 <__aeabi_dsub+0x498>
    9818:	1c73      	adds	r3, r6, #1
    981a:	469c      	mov	ip, r3
    981c:	055b      	lsls	r3, r3, #21
    981e:	0d5b      	lsrs	r3, r3, #21
    9820:	2b01      	cmp	r3, #1
    9822:	dc00      	bgt.n	9826 <__aeabi_dsub+0x2da>
    9824:	e09f      	b.n	9966 <__aeabi_dsub+0x41a>
    9826:	4b1a      	ldr	r3, [pc, #104]	; (9890 <__aeabi_dsub+0x344>)
    9828:	459c      	cmp	ip, r3
    982a:	d100      	bne.n	982e <__aeabi_dsub+0x2e2>
    982c:	e0c5      	b.n	99ba <__aeabi_dsub+0x46e>
    982e:	4452      	add	r2, sl
    9830:	4552      	cmp	r2, sl
    9832:	4180      	sbcs	r0, r0
    9834:	1864      	adds	r4, r4, r1
    9836:	4240      	negs	r0, r0
    9838:	1824      	adds	r4, r4, r0
    983a:	07e7      	lsls	r7, r4, #31
    983c:	0852      	lsrs	r2, r2, #1
    983e:	4317      	orrs	r7, r2
    9840:	0864      	lsrs	r4, r4, #1
    9842:	4666      	mov	r6, ip
    9844:	e708      	b.n	9658 <__aeabi_dsub+0x10c>
    9846:	4812      	ldr	r0, [pc, #72]	; (9890 <__aeabi_dsub+0x344>)
    9848:	4285      	cmp	r5, r0
    984a:	d100      	bne.n	984e <__aeabi_dsub+0x302>
    984c:	e085      	b.n	995a <__aeabi_dsub+0x40e>
    984e:	001d      	movs	r5, r3
    9850:	e6bc      	b.n	95cc <__aeabi_dsub+0x80>
    9852:	0029      	movs	r1, r5
    9854:	3e1f      	subs	r6, #31
    9856:	40f1      	lsrs	r1, r6
    9858:	2b20      	cmp	r3, #32
    985a:	d100      	bne.n	985e <__aeabi_dsub+0x312>
    985c:	e07f      	b.n	995e <__aeabi_dsub+0x412>
    985e:	2240      	movs	r2, #64	; 0x40
    9860:	1ad3      	subs	r3, r2, r3
    9862:	409d      	lsls	r5, r3
    9864:	432f      	orrs	r7, r5
    9866:	1e7d      	subs	r5, r7, #1
    9868:	41af      	sbcs	r7, r5
    986a:	2400      	movs	r4, #0
    986c:	430f      	orrs	r7, r1
    986e:	2600      	movs	r6, #0
    9870:	e78e      	b.n	9790 <__aeabi_dsub+0x244>
    9872:	002b      	movs	r3, r5
    9874:	000f      	movs	r7, r1
    9876:	3b20      	subs	r3, #32
    9878:	40df      	lsrs	r7, r3
    987a:	2d20      	cmp	r5, #32
    987c:	d071      	beq.n	9962 <__aeabi_dsub+0x416>
    987e:	2340      	movs	r3, #64	; 0x40
    9880:	1b5d      	subs	r5, r3, r5
    9882:	40a9      	lsls	r1, r5
    9884:	430a      	orrs	r2, r1
    9886:	1e51      	subs	r1, r2, #1
    9888:	418a      	sbcs	r2, r1
    988a:	2100      	movs	r1, #0
    988c:	4317      	orrs	r7, r2
    988e:	e6af      	b.n	95f0 <__aeabi_dsub+0xa4>
    9890:	000007ff 	.word	0x000007ff
    9894:	ff7fffff 	.word	0xff7fffff
    9898:	800fffff 	.word	0x800fffff
    989c:	2e00      	cmp	r6, #0
    989e:	d03e      	beq.n	991e <__aeabi_dsub+0x3d2>
    98a0:	4eb3      	ldr	r6, [pc, #716]	; (9b70 <__aeabi_dsub+0x624>)
    98a2:	45b4      	cmp	ip, r6
    98a4:	d045      	beq.n	9932 <__aeabi_dsub+0x3e6>
    98a6:	2680      	movs	r6, #128	; 0x80
    98a8:	0436      	lsls	r6, r6, #16
    98aa:	426d      	negs	r5, r5
    98ac:	4334      	orrs	r4, r6
    98ae:	2d38      	cmp	r5, #56	; 0x38
    98b0:	dd00      	ble.n	98b4 <__aeabi_dsub+0x368>
    98b2:	e0a8      	b.n	9a06 <__aeabi_dsub+0x4ba>
    98b4:	2d1f      	cmp	r5, #31
    98b6:	dd00      	ble.n	98ba <__aeabi_dsub+0x36e>
    98b8:	e11f      	b.n	9afa <__aeabi_dsub+0x5ae>
    98ba:	2620      	movs	r6, #32
    98bc:	0027      	movs	r7, r4
    98be:	4650      	mov	r0, sl
    98c0:	1b76      	subs	r6, r6, r5
    98c2:	40b7      	lsls	r7, r6
    98c4:	40e8      	lsrs	r0, r5
    98c6:	4307      	orrs	r7, r0
    98c8:	4650      	mov	r0, sl
    98ca:	40b0      	lsls	r0, r6
    98cc:	1e46      	subs	r6, r0, #1
    98ce:	41b0      	sbcs	r0, r6
    98d0:	40ec      	lsrs	r4, r5
    98d2:	4338      	orrs	r0, r7
    98d4:	1a17      	subs	r7, r2, r0
    98d6:	42ba      	cmp	r2, r7
    98d8:	4192      	sbcs	r2, r2
    98da:	1b0c      	subs	r4, r1, r4
    98dc:	4252      	negs	r2, r2
    98de:	1aa4      	subs	r4, r4, r2
    98e0:	4666      	mov	r6, ip
    98e2:	4698      	mov	r8, r3
    98e4:	e68b      	b.n	95fe <__aeabi_dsub+0xb2>
    98e6:	4664      	mov	r4, ip
    98e8:	4667      	mov	r7, ip
    98ea:	432c      	orrs	r4, r5
    98ec:	d000      	beq.n	98f0 <__aeabi_dsub+0x3a4>
    98ee:	e68b      	b.n	9608 <__aeabi_dsub+0xbc>
    98f0:	2500      	movs	r5, #0
    98f2:	2600      	movs	r6, #0
    98f4:	2700      	movs	r7, #0
    98f6:	e6ea      	b.n	96ce <__aeabi_dsub+0x182>
    98f8:	001e      	movs	r6, r3
    98fa:	e6ad      	b.n	9658 <__aeabi_dsub+0x10c>
    98fc:	2b1f      	cmp	r3, #31
    98fe:	dc60      	bgt.n	99c2 <__aeabi_dsub+0x476>
    9900:	2720      	movs	r7, #32
    9902:	1af8      	subs	r0, r7, r3
    9904:	000f      	movs	r7, r1
    9906:	4684      	mov	ip, r0
    9908:	4087      	lsls	r7, r0
    990a:	0010      	movs	r0, r2
    990c:	40d8      	lsrs	r0, r3
    990e:	4307      	orrs	r7, r0
    9910:	4660      	mov	r0, ip
    9912:	4082      	lsls	r2, r0
    9914:	1e50      	subs	r0, r2, #1
    9916:	4182      	sbcs	r2, r0
    9918:	40d9      	lsrs	r1, r3
    991a:	4317      	orrs	r7, r2
    991c:	e6f5      	b.n	970a <__aeabi_dsub+0x1be>
    991e:	0026      	movs	r6, r4
    9920:	4650      	mov	r0, sl
    9922:	4306      	orrs	r6, r0
    9924:	d005      	beq.n	9932 <__aeabi_dsub+0x3e6>
    9926:	43ed      	mvns	r5, r5
    9928:	2d00      	cmp	r5, #0
    992a:	d0d3      	beq.n	98d4 <__aeabi_dsub+0x388>
    992c:	4e90      	ldr	r6, [pc, #576]	; (9b70 <__aeabi_dsub+0x624>)
    992e:	45b4      	cmp	ip, r6
    9930:	d1bd      	bne.n	98ae <__aeabi_dsub+0x362>
    9932:	000c      	movs	r4, r1
    9934:	0017      	movs	r7, r2
    9936:	4666      	mov	r6, ip
    9938:	4698      	mov	r8, r3
    993a:	e68d      	b.n	9658 <__aeabi_dsub+0x10c>
    993c:	488c      	ldr	r0, [pc, #560]	; (9b70 <__aeabi_dsub+0x624>)
    993e:	4283      	cmp	r3, r0
    9940:	d00b      	beq.n	995a <__aeabi_dsub+0x40e>
    9942:	4663      	mov	r3, ip
    9944:	e6d9      	b.n	96fa <__aeabi_dsub+0x1ae>
    9946:	2d00      	cmp	r5, #0
    9948:	d000      	beq.n	994c <__aeabi_dsub+0x400>
    994a:	e096      	b.n	9a7a <__aeabi_dsub+0x52e>
    994c:	0008      	movs	r0, r1
    994e:	4310      	orrs	r0, r2
    9950:	d100      	bne.n	9954 <__aeabi_dsub+0x408>
    9952:	e0e2      	b.n	9b1a <__aeabi_dsub+0x5ce>
    9954:	000c      	movs	r4, r1
    9956:	0017      	movs	r7, r2
    9958:	4698      	mov	r8, r3
    995a:	4e85      	ldr	r6, [pc, #532]	; (9b70 <__aeabi_dsub+0x624>)
    995c:	e67c      	b.n	9658 <__aeabi_dsub+0x10c>
    995e:	2500      	movs	r5, #0
    9960:	e780      	b.n	9864 <__aeabi_dsub+0x318>
    9962:	2100      	movs	r1, #0
    9964:	e78e      	b.n	9884 <__aeabi_dsub+0x338>
    9966:	0023      	movs	r3, r4
    9968:	4650      	mov	r0, sl
    996a:	4303      	orrs	r3, r0
    996c:	2e00      	cmp	r6, #0
    996e:	d000      	beq.n	9972 <__aeabi_dsub+0x426>
    9970:	e0a8      	b.n	9ac4 <__aeabi_dsub+0x578>
    9972:	2b00      	cmp	r3, #0
    9974:	d100      	bne.n	9978 <__aeabi_dsub+0x42c>
    9976:	e0de      	b.n	9b36 <__aeabi_dsub+0x5ea>
    9978:	000b      	movs	r3, r1
    997a:	4313      	orrs	r3, r2
    997c:	d100      	bne.n	9980 <__aeabi_dsub+0x434>
    997e:	e66b      	b.n	9658 <__aeabi_dsub+0x10c>
    9980:	4452      	add	r2, sl
    9982:	4552      	cmp	r2, sl
    9984:	4180      	sbcs	r0, r0
    9986:	1864      	adds	r4, r4, r1
    9988:	4240      	negs	r0, r0
    998a:	1824      	adds	r4, r4, r0
    998c:	0017      	movs	r7, r2
    998e:	0223      	lsls	r3, r4, #8
    9990:	d400      	bmi.n	9994 <__aeabi_dsub+0x448>
    9992:	e6fd      	b.n	9790 <__aeabi_dsub+0x244>
    9994:	4b77      	ldr	r3, [pc, #476]	; (9b74 <__aeabi_dsub+0x628>)
    9996:	4666      	mov	r6, ip
    9998:	401c      	ands	r4, r3
    999a:	e65d      	b.n	9658 <__aeabi_dsub+0x10c>
    999c:	0025      	movs	r5, r4
    999e:	4650      	mov	r0, sl
    99a0:	4305      	orrs	r5, r0
    99a2:	2e00      	cmp	r6, #0
    99a4:	d1cf      	bne.n	9946 <__aeabi_dsub+0x3fa>
    99a6:	2d00      	cmp	r5, #0
    99a8:	d14f      	bne.n	9a4a <__aeabi_dsub+0x4fe>
    99aa:	000c      	movs	r4, r1
    99ac:	4314      	orrs	r4, r2
    99ae:	d100      	bne.n	99b2 <__aeabi_dsub+0x466>
    99b0:	e0a0      	b.n	9af4 <__aeabi_dsub+0x5a8>
    99b2:	000c      	movs	r4, r1
    99b4:	0017      	movs	r7, r2
    99b6:	4698      	mov	r8, r3
    99b8:	e64e      	b.n	9658 <__aeabi_dsub+0x10c>
    99ba:	4666      	mov	r6, ip
    99bc:	2400      	movs	r4, #0
    99be:	2700      	movs	r7, #0
    99c0:	e685      	b.n	96ce <__aeabi_dsub+0x182>
    99c2:	001f      	movs	r7, r3
    99c4:	0008      	movs	r0, r1
    99c6:	3f20      	subs	r7, #32
    99c8:	40f8      	lsrs	r0, r7
    99ca:	0007      	movs	r7, r0
    99cc:	2b20      	cmp	r3, #32
    99ce:	d100      	bne.n	99d2 <__aeabi_dsub+0x486>
    99d0:	e08e      	b.n	9af0 <__aeabi_dsub+0x5a4>
    99d2:	2040      	movs	r0, #64	; 0x40
    99d4:	1ac3      	subs	r3, r0, r3
    99d6:	4099      	lsls	r1, r3
    99d8:	430a      	orrs	r2, r1
    99da:	1e51      	subs	r1, r2, #1
    99dc:	418a      	sbcs	r2, r1
    99de:	2100      	movs	r1, #0
    99e0:	4317      	orrs	r7, r2
    99e2:	e692      	b.n	970a <__aeabi_dsub+0x1be>
    99e4:	2e00      	cmp	r6, #0
    99e6:	d114      	bne.n	9a12 <__aeabi_dsub+0x4c6>
    99e8:	0026      	movs	r6, r4
    99ea:	4650      	mov	r0, sl
    99ec:	4306      	orrs	r6, r0
    99ee:	d062      	beq.n	9ab6 <__aeabi_dsub+0x56a>
    99f0:	43db      	mvns	r3, r3
    99f2:	2b00      	cmp	r3, #0
    99f4:	d15c      	bne.n	9ab0 <__aeabi_dsub+0x564>
    99f6:	1887      	adds	r7, r0, r2
    99f8:	4297      	cmp	r7, r2
    99fa:	4192      	sbcs	r2, r2
    99fc:	1864      	adds	r4, r4, r1
    99fe:	4252      	negs	r2, r2
    9a00:	18a4      	adds	r4, r4, r2
    9a02:	4666      	mov	r6, ip
    9a04:	e687      	b.n	9716 <__aeabi_dsub+0x1ca>
    9a06:	4650      	mov	r0, sl
    9a08:	4320      	orrs	r0, r4
    9a0a:	1e44      	subs	r4, r0, #1
    9a0c:	41a0      	sbcs	r0, r4
    9a0e:	2400      	movs	r4, #0
    9a10:	e760      	b.n	98d4 <__aeabi_dsub+0x388>
    9a12:	4e57      	ldr	r6, [pc, #348]	; (9b70 <__aeabi_dsub+0x624>)
    9a14:	45b4      	cmp	ip, r6
    9a16:	d04e      	beq.n	9ab6 <__aeabi_dsub+0x56a>
    9a18:	2680      	movs	r6, #128	; 0x80
    9a1a:	0436      	lsls	r6, r6, #16
    9a1c:	425b      	negs	r3, r3
    9a1e:	4334      	orrs	r4, r6
    9a20:	2b38      	cmp	r3, #56	; 0x38
    9a22:	dd00      	ble.n	9a26 <__aeabi_dsub+0x4da>
    9a24:	e07f      	b.n	9b26 <__aeabi_dsub+0x5da>
    9a26:	2b1f      	cmp	r3, #31
    9a28:	dd00      	ble.n	9a2c <__aeabi_dsub+0x4e0>
    9a2a:	e08b      	b.n	9b44 <__aeabi_dsub+0x5f8>
    9a2c:	2620      	movs	r6, #32
    9a2e:	0027      	movs	r7, r4
    9a30:	4650      	mov	r0, sl
    9a32:	1af6      	subs	r6, r6, r3
    9a34:	40b7      	lsls	r7, r6
    9a36:	40d8      	lsrs	r0, r3
    9a38:	4307      	orrs	r7, r0
    9a3a:	4650      	mov	r0, sl
    9a3c:	40b0      	lsls	r0, r6
    9a3e:	1e46      	subs	r6, r0, #1
    9a40:	41b0      	sbcs	r0, r6
    9a42:	4307      	orrs	r7, r0
    9a44:	40dc      	lsrs	r4, r3
    9a46:	18bf      	adds	r7, r7, r2
    9a48:	e7d6      	b.n	99f8 <__aeabi_dsub+0x4ac>
    9a4a:	000d      	movs	r5, r1
    9a4c:	4315      	orrs	r5, r2
    9a4e:	d100      	bne.n	9a52 <__aeabi_dsub+0x506>
    9a50:	e602      	b.n	9658 <__aeabi_dsub+0x10c>
    9a52:	4650      	mov	r0, sl
    9a54:	1a80      	subs	r0, r0, r2
    9a56:	4582      	cmp	sl, r0
    9a58:	41bf      	sbcs	r7, r7
    9a5a:	1a65      	subs	r5, r4, r1
    9a5c:	427f      	negs	r7, r7
    9a5e:	1bed      	subs	r5, r5, r7
    9a60:	4684      	mov	ip, r0
    9a62:	0228      	lsls	r0, r5, #8
    9a64:	d400      	bmi.n	9a68 <__aeabi_dsub+0x51c>
    9a66:	e68d      	b.n	9784 <__aeabi_dsub+0x238>
    9a68:	4650      	mov	r0, sl
    9a6a:	1a17      	subs	r7, r2, r0
    9a6c:	42ba      	cmp	r2, r7
    9a6e:	4192      	sbcs	r2, r2
    9a70:	1b0c      	subs	r4, r1, r4
    9a72:	4252      	negs	r2, r2
    9a74:	1aa4      	subs	r4, r4, r2
    9a76:	4698      	mov	r8, r3
    9a78:	e5ee      	b.n	9658 <__aeabi_dsub+0x10c>
    9a7a:	000d      	movs	r5, r1
    9a7c:	4315      	orrs	r5, r2
    9a7e:	d100      	bne.n	9a82 <__aeabi_dsub+0x536>
    9a80:	e76b      	b.n	995a <__aeabi_dsub+0x40e>
    9a82:	4650      	mov	r0, sl
    9a84:	0767      	lsls	r7, r4, #29
    9a86:	08c0      	lsrs	r0, r0, #3
    9a88:	4307      	orrs	r7, r0
    9a8a:	2080      	movs	r0, #128	; 0x80
    9a8c:	08e4      	lsrs	r4, r4, #3
    9a8e:	0300      	lsls	r0, r0, #12
    9a90:	4204      	tst	r4, r0
    9a92:	d007      	beq.n	9aa4 <__aeabi_dsub+0x558>
    9a94:	08cd      	lsrs	r5, r1, #3
    9a96:	4205      	tst	r5, r0
    9a98:	d104      	bne.n	9aa4 <__aeabi_dsub+0x558>
    9a9a:	002c      	movs	r4, r5
    9a9c:	4698      	mov	r8, r3
    9a9e:	08d7      	lsrs	r7, r2, #3
    9aa0:	0749      	lsls	r1, r1, #29
    9aa2:	430f      	orrs	r7, r1
    9aa4:	0f7b      	lsrs	r3, r7, #29
    9aa6:	00e4      	lsls	r4, r4, #3
    9aa8:	431c      	orrs	r4, r3
    9aaa:	00ff      	lsls	r7, r7, #3
    9aac:	4e30      	ldr	r6, [pc, #192]	; (9b70 <__aeabi_dsub+0x624>)
    9aae:	e5d3      	b.n	9658 <__aeabi_dsub+0x10c>
    9ab0:	4e2f      	ldr	r6, [pc, #188]	; (9b70 <__aeabi_dsub+0x624>)
    9ab2:	45b4      	cmp	ip, r6
    9ab4:	d1b4      	bne.n	9a20 <__aeabi_dsub+0x4d4>
    9ab6:	000c      	movs	r4, r1
    9ab8:	0017      	movs	r7, r2
    9aba:	4666      	mov	r6, ip
    9abc:	e5cc      	b.n	9658 <__aeabi_dsub+0x10c>
    9abe:	2700      	movs	r7, #0
    9ac0:	2400      	movs	r4, #0
    9ac2:	e5e8      	b.n	9696 <__aeabi_dsub+0x14a>
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d039      	beq.n	9b3c <__aeabi_dsub+0x5f0>
    9ac8:	000b      	movs	r3, r1
    9aca:	4313      	orrs	r3, r2
    9acc:	d100      	bne.n	9ad0 <__aeabi_dsub+0x584>
    9ace:	e744      	b.n	995a <__aeabi_dsub+0x40e>
    9ad0:	08c0      	lsrs	r0, r0, #3
    9ad2:	0767      	lsls	r7, r4, #29
    9ad4:	4307      	orrs	r7, r0
    9ad6:	2080      	movs	r0, #128	; 0x80
    9ad8:	08e4      	lsrs	r4, r4, #3
    9ada:	0300      	lsls	r0, r0, #12
    9adc:	4204      	tst	r4, r0
    9ade:	d0e1      	beq.n	9aa4 <__aeabi_dsub+0x558>
    9ae0:	08cb      	lsrs	r3, r1, #3
    9ae2:	4203      	tst	r3, r0
    9ae4:	d1de      	bne.n	9aa4 <__aeabi_dsub+0x558>
    9ae6:	08d7      	lsrs	r7, r2, #3
    9ae8:	0749      	lsls	r1, r1, #29
    9aea:	430f      	orrs	r7, r1
    9aec:	001c      	movs	r4, r3
    9aee:	e7d9      	b.n	9aa4 <__aeabi_dsub+0x558>
    9af0:	2100      	movs	r1, #0
    9af2:	e771      	b.n	99d8 <__aeabi_dsub+0x48c>
    9af4:	2500      	movs	r5, #0
    9af6:	2700      	movs	r7, #0
    9af8:	e5e9      	b.n	96ce <__aeabi_dsub+0x182>
    9afa:	002e      	movs	r6, r5
    9afc:	0027      	movs	r7, r4
    9afe:	3e20      	subs	r6, #32
    9b00:	40f7      	lsrs	r7, r6
    9b02:	2d20      	cmp	r5, #32
    9b04:	d02f      	beq.n	9b66 <__aeabi_dsub+0x61a>
    9b06:	2640      	movs	r6, #64	; 0x40
    9b08:	1b75      	subs	r5, r6, r5
    9b0a:	40ac      	lsls	r4, r5
    9b0c:	4650      	mov	r0, sl
    9b0e:	4320      	orrs	r0, r4
    9b10:	1e44      	subs	r4, r0, #1
    9b12:	41a0      	sbcs	r0, r4
    9b14:	2400      	movs	r4, #0
    9b16:	4338      	orrs	r0, r7
    9b18:	e6dc      	b.n	98d4 <__aeabi_dsub+0x388>
    9b1a:	2480      	movs	r4, #128	; 0x80
    9b1c:	2500      	movs	r5, #0
    9b1e:	0324      	lsls	r4, r4, #12
    9b20:	4e13      	ldr	r6, [pc, #76]	; (9b70 <__aeabi_dsub+0x624>)
    9b22:	2700      	movs	r7, #0
    9b24:	e5d3      	b.n	96ce <__aeabi_dsub+0x182>
    9b26:	4650      	mov	r0, sl
    9b28:	4320      	orrs	r0, r4
    9b2a:	0007      	movs	r7, r0
    9b2c:	1e78      	subs	r0, r7, #1
    9b2e:	4187      	sbcs	r7, r0
    9b30:	2400      	movs	r4, #0
    9b32:	18bf      	adds	r7, r7, r2
    9b34:	e760      	b.n	99f8 <__aeabi_dsub+0x4ac>
    9b36:	000c      	movs	r4, r1
    9b38:	0017      	movs	r7, r2
    9b3a:	e58d      	b.n	9658 <__aeabi_dsub+0x10c>
    9b3c:	000c      	movs	r4, r1
    9b3e:	0017      	movs	r7, r2
    9b40:	4e0b      	ldr	r6, [pc, #44]	; (9b70 <__aeabi_dsub+0x624>)
    9b42:	e589      	b.n	9658 <__aeabi_dsub+0x10c>
    9b44:	001e      	movs	r6, r3
    9b46:	0027      	movs	r7, r4
    9b48:	3e20      	subs	r6, #32
    9b4a:	40f7      	lsrs	r7, r6
    9b4c:	2b20      	cmp	r3, #32
    9b4e:	d00c      	beq.n	9b6a <__aeabi_dsub+0x61e>
    9b50:	2640      	movs	r6, #64	; 0x40
    9b52:	1af3      	subs	r3, r6, r3
    9b54:	409c      	lsls	r4, r3
    9b56:	4650      	mov	r0, sl
    9b58:	4320      	orrs	r0, r4
    9b5a:	1e44      	subs	r4, r0, #1
    9b5c:	41a0      	sbcs	r0, r4
    9b5e:	4307      	orrs	r7, r0
    9b60:	2400      	movs	r4, #0
    9b62:	18bf      	adds	r7, r7, r2
    9b64:	e748      	b.n	99f8 <__aeabi_dsub+0x4ac>
    9b66:	2400      	movs	r4, #0
    9b68:	e7d0      	b.n	9b0c <__aeabi_dsub+0x5c0>
    9b6a:	2400      	movs	r4, #0
    9b6c:	e7f3      	b.n	9b56 <__aeabi_dsub+0x60a>
    9b6e:	46c0      	nop			; (mov r8, r8)
    9b70:	000007ff 	.word	0x000007ff
    9b74:	ff7fffff 	.word	0xff7fffff

00009b78 <__aeabi_d2iz>:
    9b78:	b530      	push	{r4, r5, lr}
    9b7a:	4d13      	ldr	r5, [pc, #76]	; (9bc8 <__aeabi_d2iz+0x50>)
    9b7c:	030a      	lsls	r2, r1, #12
    9b7e:	004b      	lsls	r3, r1, #1
    9b80:	0b12      	lsrs	r2, r2, #12
    9b82:	0d5b      	lsrs	r3, r3, #21
    9b84:	0fc9      	lsrs	r1, r1, #31
    9b86:	2400      	movs	r4, #0
    9b88:	42ab      	cmp	r3, r5
    9b8a:	dd10      	ble.n	9bae <__aeabi_d2iz+0x36>
    9b8c:	4c0f      	ldr	r4, [pc, #60]	; (9bcc <__aeabi_d2iz+0x54>)
    9b8e:	42a3      	cmp	r3, r4
    9b90:	dc0f      	bgt.n	9bb2 <__aeabi_d2iz+0x3a>
    9b92:	2480      	movs	r4, #128	; 0x80
    9b94:	4d0e      	ldr	r5, [pc, #56]	; (9bd0 <__aeabi_d2iz+0x58>)
    9b96:	0364      	lsls	r4, r4, #13
    9b98:	4322      	orrs	r2, r4
    9b9a:	1aed      	subs	r5, r5, r3
    9b9c:	2d1f      	cmp	r5, #31
    9b9e:	dd0b      	ble.n	9bb8 <__aeabi_d2iz+0x40>
    9ba0:	480c      	ldr	r0, [pc, #48]	; (9bd4 <__aeabi_d2iz+0x5c>)
    9ba2:	1ac3      	subs	r3, r0, r3
    9ba4:	40da      	lsrs	r2, r3
    9ba6:	4254      	negs	r4, r2
    9ba8:	2900      	cmp	r1, #0
    9baa:	d100      	bne.n	9bae <__aeabi_d2iz+0x36>
    9bac:	0014      	movs	r4, r2
    9bae:	0020      	movs	r0, r4
    9bb0:	bd30      	pop	{r4, r5, pc}
    9bb2:	4b09      	ldr	r3, [pc, #36]	; (9bd8 <__aeabi_d2iz+0x60>)
    9bb4:	18cc      	adds	r4, r1, r3
    9bb6:	e7fa      	b.n	9bae <__aeabi_d2iz+0x36>
    9bb8:	4c08      	ldr	r4, [pc, #32]	; (9bdc <__aeabi_d2iz+0x64>)
    9bba:	40e8      	lsrs	r0, r5
    9bbc:	46a4      	mov	ip, r4
    9bbe:	4463      	add	r3, ip
    9bc0:	409a      	lsls	r2, r3
    9bc2:	4302      	orrs	r2, r0
    9bc4:	e7ef      	b.n	9ba6 <__aeabi_d2iz+0x2e>
    9bc6:	46c0      	nop			; (mov r8, r8)
    9bc8:	000003fe 	.word	0x000003fe
    9bcc:	0000041d 	.word	0x0000041d
    9bd0:	00000433 	.word	0x00000433
    9bd4:	00000413 	.word	0x00000413
    9bd8:	7fffffff 	.word	0x7fffffff
    9bdc:	fffffbed 	.word	0xfffffbed

00009be0 <__aeabi_ui2d>:
    9be0:	b510      	push	{r4, lr}
    9be2:	1e04      	subs	r4, r0, #0
    9be4:	d028      	beq.n	9c38 <__aeabi_ui2d+0x58>
    9be6:	f000 f833 	bl	9c50 <__clzsi2>
    9bea:	4b15      	ldr	r3, [pc, #84]	; (9c40 <__aeabi_ui2d+0x60>)
    9bec:	4a15      	ldr	r2, [pc, #84]	; (9c44 <__aeabi_ui2d+0x64>)
    9bee:	1a1b      	subs	r3, r3, r0
    9bf0:	1ad2      	subs	r2, r2, r3
    9bf2:	2a1f      	cmp	r2, #31
    9bf4:	dd15      	ble.n	9c22 <__aeabi_ui2d+0x42>
    9bf6:	4a14      	ldr	r2, [pc, #80]	; (9c48 <__aeabi_ui2d+0x68>)
    9bf8:	1ad2      	subs	r2, r2, r3
    9bfa:	4094      	lsls	r4, r2
    9bfc:	2200      	movs	r2, #0
    9bfe:	0324      	lsls	r4, r4, #12
    9c00:	055b      	lsls	r3, r3, #21
    9c02:	0b24      	lsrs	r4, r4, #12
    9c04:	0d5b      	lsrs	r3, r3, #21
    9c06:	2100      	movs	r1, #0
    9c08:	0010      	movs	r0, r2
    9c0a:	0324      	lsls	r4, r4, #12
    9c0c:	0d0a      	lsrs	r2, r1, #20
    9c0e:	0b24      	lsrs	r4, r4, #12
    9c10:	0512      	lsls	r2, r2, #20
    9c12:	4322      	orrs	r2, r4
    9c14:	4c0d      	ldr	r4, [pc, #52]	; (9c4c <__aeabi_ui2d+0x6c>)
    9c16:	051b      	lsls	r3, r3, #20
    9c18:	4022      	ands	r2, r4
    9c1a:	4313      	orrs	r3, r2
    9c1c:	005b      	lsls	r3, r3, #1
    9c1e:	0859      	lsrs	r1, r3, #1
    9c20:	bd10      	pop	{r4, pc}
    9c22:	0021      	movs	r1, r4
    9c24:	4091      	lsls	r1, r2
    9c26:	000a      	movs	r2, r1
    9c28:	210b      	movs	r1, #11
    9c2a:	1a08      	subs	r0, r1, r0
    9c2c:	40c4      	lsrs	r4, r0
    9c2e:	055b      	lsls	r3, r3, #21
    9c30:	0324      	lsls	r4, r4, #12
    9c32:	0b24      	lsrs	r4, r4, #12
    9c34:	0d5b      	lsrs	r3, r3, #21
    9c36:	e7e6      	b.n	9c06 <__aeabi_ui2d+0x26>
    9c38:	2300      	movs	r3, #0
    9c3a:	2400      	movs	r4, #0
    9c3c:	2200      	movs	r2, #0
    9c3e:	e7e2      	b.n	9c06 <__aeabi_ui2d+0x26>
    9c40:	0000041e 	.word	0x0000041e
    9c44:	00000433 	.word	0x00000433
    9c48:	00000413 	.word	0x00000413
    9c4c:	800fffff 	.word	0x800fffff

00009c50 <__clzsi2>:
    9c50:	211c      	movs	r1, #28
    9c52:	2301      	movs	r3, #1
    9c54:	041b      	lsls	r3, r3, #16
    9c56:	4298      	cmp	r0, r3
    9c58:	d301      	bcc.n	9c5e <__clzsi2+0xe>
    9c5a:	0c00      	lsrs	r0, r0, #16
    9c5c:	3910      	subs	r1, #16
    9c5e:	0a1b      	lsrs	r3, r3, #8
    9c60:	4298      	cmp	r0, r3
    9c62:	d301      	bcc.n	9c68 <__clzsi2+0x18>
    9c64:	0a00      	lsrs	r0, r0, #8
    9c66:	3908      	subs	r1, #8
    9c68:	091b      	lsrs	r3, r3, #4
    9c6a:	4298      	cmp	r0, r3
    9c6c:	d301      	bcc.n	9c72 <__clzsi2+0x22>
    9c6e:	0900      	lsrs	r0, r0, #4
    9c70:	3904      	subs	r1, #4
    9c72:	a202      	add	r2, pc, #8	; (adr r2, 9c7c <__clzsi2+0x2c>)
    9c74:	5c10      	ldrb	r0, [r2, r0]
    9c76:	1840      	adds	r0, r0, r1
    9c78:	4770      	bx	lr
    9c7a:	46c0      	nop			; (mov r8, r8)
    9c7c:	02020304 	.word	0x02020304
    9c80:	01010101 	.word	0x01010101
	...

00009c8c <__libc_init_array>:
    9c8c:	b570      	push	{r4, r5, r6, lr}
    9c8e:	2600      	movs	r6, #0
    9c90:	4d0c      	ldr	r5, [pc, #48]	; (9cc4 <__libc_init_array+0x38>)
    9c92:	4c0d      	ldr	r4, [pc, #52]	; (9cc8 <__libc_init_array+0x3c>)
    9c94:	1b64      	subs	r4, r4, r5
    9c96:	10a4      	asrs	r4, r4, #2
    9c98:	42a6      	cmp	r6, r4
    9c9a:	d109      	bne.n	9cb0 <__libc_init_array+0x24>
    9c9c:	2600      	movs	r6, #0
    9c9e:	f001 fcc1 	bl	b624 <_init>
    9ca2:	4d0a      	ldr	r5, [pc, #40]	; (9ccc <__libc_init_array+0x40>)
    9ca4:	4c0a      	ldr	r4, [pc, #40]	; (9cd0 <__libc_init_array+0x44>)
    9ca6:	1b64      	subs	r4, r4, r5
    9ca8:	10a4      	asrs	r4, r4, #2
    9caa:	42a6      	cmp	r6, r4
    9cac:	d105      	bne.n	9cba <__libc_init_array+0x2e>
    9cae:	bd70      	pop	{r4, r5, r6, pc}
    9cb0:	00b3      	lsls	r3, r6, #2
    9cb2:	58eb      	ldr	r3, [r5, r3]
    9cb4:	4798      	blx	r3
    9cb6:	3601      	adds	r6, #1
    9cb8:	e7ee      	b.n	9c98 <__libc_init_array+0xc>
    9cba:	00b3      	lsls	r3, r6, #2
    9cbc:	58eb      	ldr	r3, [r5, r3]
    9cbe:	4798      	blx	r3
    9cc0:	3601      	adds	r6, #1
    9cc2:	e7f2      	b.n	9caa <__libc_init_array+0x1e>
    9cc4:	0000b630 	.word	0x0000b630
    9cc8:	0000b630 	.word	0x0000b630
    9ccc:	0000b630 	.word	0x0000b630
    9cd0:	0000b634 	.word	0x0000b634

00009cd4 <malloc>:
    9cd4:	b510      	push	{r4, lr}
    9cd6:	4b03      	ldr	r3, [pc, #12]	; (9ce4 <malloc+0x10>)
    9cd8:	0001      	movs	r1, r0
    9cda:	6818      	ldr	r0, [r3, #0]
    9cdc:	f000 f878 	bl	9dd0 <_malloc_r>
    9ce0:	bd10      	pop	{r4, pc}
    9ce2:	46c0      	nop			; (mov r8, r8)
    9ce4:	200000a4 	.word	0x200000a4

00009ce8 <free>:
    9ce8:	b510      	push	{r4, lr}
    9cea:	4b03      	ldr	r3, [pc, #12]	; (9cf8 <free+0x10>)
    9cec:	0001      	movs	r1, r0
    9cee:	6818      	ldr	r0, [r3, #0]
    9cf0:	f000 f824 	bl	9d3c <_free_r>
    9cf4:	bd10      	pop	{r4, pc}
    9cf6:	46c0      	nop			; (mov r8, r8)
    9cf8:	200000a4 	.word	0x200000a4

00009cfc <memcmp>:
    9cfc:	b530      	push	{r4, r5, lr}
    9cfe:	2400      	movs	r4, #0
    9d00:	42a2      	cmp	r2, r4
    9d02:	d101      	bne.n	9d08 <memcmp+0xc>
    9d04:	2000      	movs	r0, #0
    9d06:	e005      	b.n	9d14 <memcmp+0x18>
    9d08:	5d03      	ldrb	r3, [r0, r4]
    9d0a:	1c65      	adds	r5, r4, #1
    9d0c:	5d0c      	ldrb	r4, [r1, r4]
    9d0e:	42a3      	cmp	r3, r4
    9d10:	d001      	beq.n	9d16 <memcmp+0x1a>
    9d12:	1b18      	subs	r0, r3, r4
    9d14:	bd30      	pop	{r4, r5, pc}
    9d16:	002c      	movs	r4, r5
    9d18:	e7f2      	b.n	9d00 <memcmp+0x4>

00009d1a <memcpy>:
    9d1a:	2300      	movs	r3, #0
    9d1c:	b510      	push	{r4, lr}
    9d1e:	429a      	cmp	r2, r3
    9d20:	d100      	bne.n	9d24 <memcpy+0xa>
    9d22:	bd10      	pop	{r4, pc}
    9d24:	5ccc      	ldrb	r4, [r1, r3]
    9d26:	54c4      	strb	r4, [r0, r3]
    9d28:	3301      	adds	r3, #1
    9d2a:	e7f8      	b.n	9d1e <memcpy+0x4>

00009d2c <memset>:
    9d2c:	0003      	movs	r3, r0
    9d2e:	1882      	adds	r2, r0, r2
    9d30:	4293      	cmp	r3, r2
    9d32:	d100      	bne.n	9d36 <memset+0xa>
    9d34:	4770      	bx	lr
    9d36:	7019      	strb	r1, [r3, #0]
    9d38:	3301      	adds	r3, #1
    9d3a:	e7f9      	b.n	9d30 <memset+0x4>

00009d3c <_free_r>:
    9d3c:	b570      	push	{r4, r5, r6, lr}
    9d3e:	0005      	movs	r5, r0
    9d40:	2900      	cmp	r1, #0
    9d42:	d010      	beq.n	9d66 <_free_r+0x2a>
    9d44:	1f0c      	subs	r4, r1, #4
    9d46:	6823      	ldr	r3, [r4, #0]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	da00      	bge.n	9d4e <_free_r+0x12>
    9d4c:	18e4      	adds	r4, r4, r3
    9d4e:	0028      	movs	r0, r5
    9d50:	f000 fcae 	bl	a6b0 <__malloc_lock>
    9d54:	4a1d      	ldr	r2, [pc, #116]	; (9dcc <_free_r+0x90>)
    9d56:	6813      	ldr	r3, [r2, #0]
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d105      	bne.n	9d68 <_free_r+0x2c>
    9d5c:	6063      	str	r3, [r4, #4]
    9d5e:	6014      	str	r4, [r2, #0]
    9d60:	0028      	movs	r0, r5
    9d62:	f000 fca6 	bl	a6b2 <__malloc_unlock>
    9d66:	bd70      	pop	{r4, r5, r6, pc}
    9d68:	42a3      	cmp	r3, r4
    9d6a:	d909      	bls.n	9d80 <_free_r+0x44>
    9d6c:	6821      	ldr	r1, [r4, #0]
    9d6e:	1860      	adds	r0, r4, r1
    9d70:	4283      	cmp	r3, r0
    9d72:	d1f3      	bne.n	9d5c <_free_r+0x20>
    9d74:	6818      	ldr	r0, [r3, #0]
    9d76:	685b      	ldr	r3, [r3, #4]
    9d78:	1841      	adds	r1, r0, r1
    9d7a:	6021      	str	r1, [r4, #0]
    9d7c:	e7ee      	b.n	9d5c <_free_r+0x20>
    9d7e:	0013      	movs	r3, r2
    9d80:	685a      	ldr	r2, [r3, #4]
    9d82:	2a00      	cmp	r2, #0
    9d84:	d001      	beq.n	9d8a <_free_r+0x4e>
    9d86:	42a2      	cmp	r2, r4
    9d88:	d9f9      	bls.n	9d7e <_free_r+0x42>
    9d8a:	6819      	ldr	r1, [r3, #0]
    9d8c:	1858      	adds	r0, r3, r1
    9d8e:	42a0      	cmp	r0, r4
    9d90:	d10b      	bne.n	9daa <_free_r+0x6e>
    9d92:	6820      	ldr	r0, [r4, #0]
    9d94:	1809      	adds	r1, r1, r0
    9d96:	1858      	adds	r0, r3, r1
    9d98:	6019      	str	r1, [r3, #0]
    9d9a:	4282      	cmp	r2, r0
    9d9c:	d1e0      	bne.n	9d60 <_free_r+0x24>
    9d9e:	6810      	ldr	r0, [r2, #0]
    9da0:	6852      	ldr	r2, [r2, #4]
    9da2:	1841      	adds	r1, r0, r1
    9da4:	6019      	str	r1, [r3, #0]
    9da6:	605a      	str	r2, [r3, #4]
    9da8:	e7da      	b.n	9d60 <_free_r+0x24>
    9daa:	42a0      	cmp	r0, r4
    9dac:	d902      	bls.n	9db4 <_free_r+0x78>
    9dae:	230c      	movs	r3, #12
    9db0:	602b      	str	r3, [r5, #0]
    9db2:	e7d5      	b.n	9d60 <_free_r+0x24>
    9db4:	6821      	ldr	r1, [r4, #0]
    9db6:	1860      	adds	r0, r4, r1
    9db8:	4282      	cmp	r2, r0
    9dba:	d103      	bne.n	9dc4 <_free_r+0x88>
    9dbc:	6810      	ldr	r0, [r2, #0]
    9dbe:	6852      	ldr	r2, [r2, #4]
    9dc0:	1841      	adds	r1, r0, r1
    9dc2:	6021      	str	r1, [r4, #0]
    9dc4:	6062      	str	r2, [r4, #4]
    9dc6:	605c      	str	r4, [r3, #4]
    9dc8:	e7ca      	b.n	9d60 <_free_r+0x24>
    9dca:	46c0      	nop			; (mov r8, r8)
    9dcc:	200002e0 	.word	0x200002e0

00009dd0 <_malloc_r>:
    9dd0:	2303      	movs	r3, #3
    9dd2:	b570      	push	{r4, r5, r6, lr}
    9dd4:	1ccd      	adds	r5, r1, #3
    9dd6:	439d      	bics	r5, r3
    9dd8:	3508      	adds	r5, #8
    9dda:	0006      	movs	r6, r0
    9ddc:	2d0c      	cmp	r5, #12
    9dde:	d21e      	bcs.n	9e1e <_malloc_r+0x4e>
    9de0:	250c      	movs	r5, #12
    9de2:	42a9      	cmp	r1, r5
    9de4:	d81d      	bhi.n	9e22 <_malloc_r+0x52>
    9de6:	0030      	movs	r0, r6
    9de8:	f000 fc62 	bl	a6b0 <__malloc_lock>
    9dec:	4a25      	ldr	r2, [pc, #148]	; (9e84 <_malloc_r+0xb4>)
    9dee:	6814      	ldr	r4, [r2, #0]
    9df0:	0021      	movs	r1, r4
    9df2:	2900      	cmp	r1, #0
    9df4:	d119      	bne.n	9e2a <_malloc_r+0x5a>
    9df6:	4c24      	ldr	r4, [pc, #144]	; (9e88 <_malloc_r+0xb8>)
    9df8:	6823      	ldr	r3, [r4, #0]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d103      	bne.n	9e06 <_malloc_r+0x36>
    9dfe:	0030      	movs	r0, r6
    9e00:	f000 f8c8 	bl	9f94 <_sbrk_r>
    9e04:	6020      	str	r0, [r4, #0]
    9e06:	0029      	movs	r1, r5
    9e08:	0030      	movs	r0, r6
    9e0a:	f000 f8c3 	bl	9f94 <_sbrk_r>
    9e0e:	1c43      	adds	r3, r0, #1
    9e10:	d12c      	bne.n	9e6c <_malloc_r+0x9c>
    9e12:	230c      	movs	r3, #12
    9e14:	0030      	movs	r0, r6
    9e16:	6033      	str	r3, [r6, #0]
    9e18:	f000 fc4b 	bl	a6b2 <__malloc_unlock>
    9e1c:	e003      	b.n	9e26 <_malloc_r+0x56>
    9e1e:	2d00      	cmp	r5, #0
    9e20:	dadf      	bge.n	9de2 <_malloc_r+0x12>
    9e22:	230c      	movs	r3, #12
    9e24:	6033      	str	r3, [r6, #0]
    9e26:	2000      	movs	r0, #0
    9e28:	bd70      	pop	{r4, r5, r6, pc}
    9e2a:	680b      	ldr	r3, [r1, #0]
    9e2c:	1b5b      	subs	r3, r3, r5
    9e2e:	d41a      	bmi.n	9e66 <_malloc_r+0x96>
    9e30:	2b0b      	cmp	r3, #11
    9e32:	d903      	bls.n	9e3c <_malloc_r+0x6c>
    9e34:	600b      	str	r3, [r1, #0]
    9e36:	18cc      	adds	r4, r1, r3
    9e38:	6025      	str	r5, [r4, #0]
    9e3a:	e003      	b.n	9e44 <_malloc_r+0x74>
    9e3c:	428c      	cmp	r4, r1
    9e3e:	d10e      	bne.n	9e5e <_malloc_r+0x8e>
    9e40:	6863      	ldr	r3, [r4, #4]
    9e42:	6013      	str	r3, [r2, #0]
    9e44:	0030      	movs	r0, r6
    9e46:	f000 fc34 	bl	a6b2 <__malloc_unlock>
    9e4a:	0020      	movs	r0, r4
    9e4c:	2207      	movs	r2, #7
    9e4e:	300b      	adds	r0, #11
    9e50:	1d23      	adds	r3, r4, #4
    9e52:	4390      	bics	r0, r2
    9e54:	1ac3      	subs	r3, r0, r3
    9e56:	d0e7      	beq.n	9e28 <_malloc_r+0x58>
    9e58:	425a      	negs	r2, r3
    9e5a:	50e2      	str	r2, [r4, r3]
    9e5c:	e7e4      	b.n	9e28 <_malloc_r+0x58>
    9e5e:	684b      	ldr	r3, [r1, #4]
    9e60:	6063      	str	r3, [r4, #4]
    9e62:	000c      	movs	r4, r1
    9e64:	e7ee      	b.n	9e44 <_malloc_r+0x74>
    9e66:	000c      	movs	r4, r1
    9e68:	6849      	ldr	r1, [r1, #4]
    9e6a:	e7c2      	b.n	9df2 <_malloc_r+0x22>
    9e6c:	2303      	movs	r3, #3
    9e6e:	1cc4      	adds	r4, r0, #3
    9e70:	439c      	bics	r4, r3
    9e72:	42a0      	cmp	r0, r4
    9e74:	d0e0      	beq.n	9e38 <_malloc_r+0x68>
    9e76:	1a21      	subs	r1, r4, r0
    9e78:	0030      	movs	r0, r6
    9e7a:	f000 f88b 	bl	9f94 <_sbrk_r>
    9e7e:	1c43      	adds	r3, r0, #1
    9e80:	d1da      	bne.n	9e38 <_malloc_r+0x68>
    9e82:	e7c6      	b.n	9e12 <_malloc_r+0x42>
    9e84:	200002e0 	.word	0x200002e0
    9e88:	200002e4 	.word	0x200002e4

00009e8c <iprintf>:
    9e8c:	b40f      	push	{r0, r1, r2, r3}
    9e8e:	4b0b      	ldr	r3, [pc, #44]	; (9ebc <iprintf+0x30>)
    9e90:	b513      	push	{r0, r1, r4, lr}
    9e92:	681c      	ldr	r4, [r3, #0]
    9e94:	2c00      	cmp	r4, #0
    9e96:	d005      	beq.n	9ea4 <iprintf+0x18>
    9e98:	69a3      	ldr	r3, [r4, #24]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d102      	bne.n	9ea4 <iprintf+0x18>
    9e9e:	0020      	movs	r0, r4
    9ea0:	f000 fb04 	bl	a4ac <__sinit>
    9ea4:	ab05      	add	r3, sp, #20
    9ea6:	9a04      	ldr	r2, [sp, #16]
    9ea8:	68a1      	ldr	r1, [r4, #8]
    9eaa:	0020      	movs	r0, r4
    9eac:	9301      	str	r3, [sp, #4]
    9eae:	f000 fc29 	bl	a704 <_vfiprintf_r>
    9eb2:	bc16      	pop	{r1, r2, r4}
    9eb4:	bc08      	pop	{r3}
    9eb6:	b004      	add	sp, #16
    9eb8:	4718      	bx	r3
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	200000a4 	.word	0x200000a4

00009ec0 <_puts_r>:
    9ec0:	b570      	push	{r4, r5, r6, lr}
    9ec2:	0005      	movs	r5, r0
    9ec4:	000e      	movs	r6, r1
    9ec6:	2800      	cmp	r0, #0
    9ec8:	d004      	beq.n	9ed4 <_puts_r+0x14>
    9eca:	6983      	ldr	r3, [r0, #24]
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d101      	bne.n	9ed4 <_puts_r+0x14>
    9ed0:	f000 faec 	bl	a4ac <__sinit>
    9ed4:	69ab      	ldr	r3, [r5, #24]
    9ed6:	68ac      	ldr	r4, [r5, #8]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d102      	bne.n	9ee2 <_puts_r+0x22>
    9edc:	0028      	movs	r0, r5
    9ede:	f000 fae5 	bl	a4ac <__sinit>
    9ee2:	4b24      	ldr	r3, [pc, #144]	; (9f74 <_puts_r+0xb4>)
    9ee4:	429c      	cmp	r4, r3
    9ee6:	d10f      	bne.n	9f08 <_puts_r+0x48>
    9ee8:	686c      	ldr	r4, [r5, #4]
    9eea:	89a3      	ldrh	r3, [r4, #12]
    9eec:	071b      	lsls	r3, r3, #28
    9eee:	d502      	bpl.n	9ef6 <_puts_r+0x36>
    9ef0:	6923      	ldr	r3, [r4, #16]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d120      	bne.n	9f38 <_puts_r+0x78>
    9ef6:	0021      	movs	r1, r4
    9ef8:	0028      	movs	r0, r5
    9efa:	f000 f969 	bl	a1d0 <__swsetup_r>
    9efe:	2800      	cmp	r0, #0
    9f00:	d01a      	beq.n	9f38 <_puts_r+0x78>
    9f02:	2001      	movs	r0, #1
    9f04:	4240      	negs	r0, r0
    9f06:	bd70      	pop	{r4, r5, r6, pc}
    9f08:	4b1b      	ldr	r3, [pc, #108]	; (9f78 <_puts_r+0xb8>)
    9f0a:	429c      	cmp	r4, r3
    9f0c:	d101      	bne.n	9f12 <_puts_r+0x52>
    9f0e:	68ac      	ldr	r4, [r5, #8]
    9f10:	e7eb      	b.n	9eea <_puts_r+0x2a>
    9f12:	4b1a      	ldr	r3, [pc, #104]	; (9f7c <_puts_r+0xbc>)
    9f14:	429c      	cmp	r4, r3
    9f16:	d1e8      	bne.n	9eea <_puts_r+0x2a>
    9f18:	68ec      	ldr	r4, [r5, #12]
    9f1a:	e7e6      	b.n	9eea <_puts_r+0x2a>
    9f1c:	3b01      	subs	r3, #1
    9f1e:	3601      	adds	r6, #1
    9f20:	60a3      	str	r3, [r4, #8]
    9f22:	2b00      	cmp	r3, #0
    9f24:	da04      	bge.n	9f30 <_puts_r+0x70>
    9f26:	69a2      	ldr	r2, [r4, #24]
    9f28:	4293      	cmp	r3, r2
    9f2a:	db16      	blt.n	9f5a <_puts_r+0x9a>
    9f2c:	290a      	cmp	r1, #10
    9f2e:	d014      	beq.n	9f5a <_puts_r+0x9a>
    9f30:	6823      	ldr	r3, [r4, #0]
    9f32:	1c5a      	adds	r2, r3, #1
    9f34:	6022      	str	r2, [r4, #0]
    9f36:	7019      	strb	r1, [r3, #0]
    9f38:	7831      	ldrb	r1, [r6, #0]
    9f3a:	68a3      	ldr	r3, [r4, #8]
    9f3c:	2900      	cmp	r1, #0
    9f3e:	d1ed      	bne.n	9f1c <_puts_r+0x5c>
    9f40:	3b01      	subs	r3, #1
    9f42:	60a3      	str	r3, [r4, #8]
    9f44:	2b00      	cmp	r3, #0
    9f46:	da0f      	bge.n	9f68 <_puts_r+0xa8>
    9f48:	0022      	movs	r2, r4
    9f4a:	310a      	adds	r1, #10
    9f4c:	0028      	movs	r0, r5
    9f4e:	f000 f8e9 	bl	a124 <__swbuf_r>
    9f52:	1c43      	adds	r3, r0, #1
    9f54:	d0d5      	beq.n	9f02 <_puts_r+0x42>
    9f56:	200a      	movs	r0, #10
    9f58:	e7d5      	b.n	9f06 <_puts_r+0x46>
    9f5a:	0022      	movs	r2, r4
    9f5c:	0028      	movs	r0, r5
    9f5e:	f000 f8e1 	bl	a124 <__swbuf_r>
    9f62:	1c43      	adds	r3, r0, #1
    9f64:	d1e8      	bne.n	9f38 <_puts_r+0x78>
    9f66:	e7cc      	b.n	9f02 <_puts_r+0x42>
    9f68:	200a      	movs	r0, #10
    9f6a:	6823      	ldr	r3, [r4, #0]
    9f6c:	1c5a      	adds	r2, r3, #1
    9f6e:	6022      	str	r2, [r4, #0]
    9f70:	7018      	strb	r0, [r3, #0]
    9f72:	e7c8      	b.n	9f06 <_puts_r+0x46>
    9f74:	0000b5b0 	.word	0x0000b5b0
    9f78:	0000b5d0 	.word	0x0000b5d0
    9f7c:	0000b590 	.word	0x0000b590

00009f80 <puts>:
    9f80:	b510      	push	{r4, lr}
    9f82:	4b03      	ldr	r3, [pc, #12]	; (9f90 <puts+0x10>)
    9f84:	0001      	movs	r1, r0
    9f86:	6818      	ldr	r0, [r3, #0]
    9f88:	f7ff ff9a 	bl	9ec0 <_puts_r>
    9f8c:	bd10      	pop	{r4, pc}
    9f8e:	46c0      	nop			; (mov r8, r8)
    9f90:	200000a4 	.word	0x200000a4

00009f94 <_sbrk_r>:
    9f94:	2300      	movs	r3, #0
    9f96:	b570      	push	{r4, r5, r6, lr}
    9f98:	4c06      	ldr	r4, [pc, #24]	; (9fb4 <_sbrk_r+0x20>)
    9f9a:	0005      	movs	r5, r0
    9f9c:	0008      	movs	r0, r1
    9f9e:	6023      	str	r3, [r4, #0]
    9fa0:	f7fd ff0a 	bl	7db8 <_sbrk>
    9fa4:	1c43      	adds	r3, r0, #1
    9fa6:	d103      	bne.n	9fb0 <_sbrk_r+0x1c>
    9fa8:	6823      	ldr	r3, [r4, #0]
    9faa:	2b00      	cmp	r3, #0
    9fac:	d000      	beq.n	9fb0 <_sbrk_r+0x1c>
    9fae:	602b      	str	r3, [r5, #0]
    9fb0:	bd70      	pop	{r4, r5, r6, pc}
    9fb2:	46c0      	nop			; (mov r8, r8)
    9fb4:	200003b4 	.word	0x200003b4

00009fb8 <setbuf>:
    9fb8:	424a      	negs	r2, r1
    9fba:	414a      	adcs	r2, r1
    9fbc:	2380      	movs	r3, #128	; 0x80
    9fbe:	b510      	push	{r4, lr}
    9fc0:	0052      	lsls	r2, r2, #1
    9fc2:	00db      	lsls	r3, r3, #3
    9fc4:	f000 f802 	bl	9fcc <setvbuf>
    9fc8:	bd10      	pop	{r4, pc}
	...

00009fcc <setvbuf>:
    9fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fce:	001d      	movs	r5, r3
    9fd0:	4b4f      	ldr	r3, [pc, #316]	; (a110 <setvbuf+0x144>)
    9fd2:	b085      	sub	sp, #20
    9fd4:	681e      	ldr	r6, [r3, #0]
    9fd6:	0004      	movs	r4, r0
    9fd8:	000f      	movs	r7, r1
    9fda:	9200      	str	r2, [sp, #0]
    9fdc:	2e00      	cmp	r6, #0
    9fde:	d005      	beq.n	9fec <setvbuf+0x20>
    9fe0:	69b3      	ldr	r3, [r6, #24]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d102      	bne.n	9fec <setvbuf+0x20>
    9fe6:	0030      	movs	r0, r6
    9fe8:	f000 fa60 	bl	a4ac <__sinit>
    9fec:	4b49      	ldr	r3, [pc, #292]	; (a114 <setvbuf+0x148>)
    9fee:	429c      	cmp	r4, r3
    9ff0:	d150      	bne.n	a094 <setvbuf+0xc8>
    9ff2:	6874      	ldr	r4, [r6, #4]
    9ff4:	9b00      	ldr	r3, [sp, #0]
    9ff6:	2b02      	cmp	r3, #2
    9ff8:	d005      	beq.n	a006 <setvbuf+0x3a>
    9ffa:	2b01      	cmp	r3, #1
    9ffc:	d900      	bls.n	a000 <setvbuf+0x34>
    9ffe:	e084      	b.n	a10a <setvbuf+0x13e>
    a000:	2d00      	cmp	r5, #0
    a002:	da00      	bge.n	a006 <setvbuf+0x3a>
    a004:	e081      	b.n	a10a <setvbuf+0x13e>
    a006:	0021      	movs	r1, r4
    a008:	0030      	movs	r0, r6
    a00a:	f000 f9e1 	bl	a3d0 <_fflush_r>
    a00e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a010:	2900      	cmp	r1, #0
    a012:	d008      	beq.n	a026 <setvbuf+0x5a>
    a014:	0023      	movs	r3, r4
    a016:	3344      	adds	r3, #68	; 0x44
    a018:	4299      	cmp	r1, r3
    a01a:	d002      	beq.n	a022 <setvbuf+0x56>
    a01c:	0030      	movs	r0, r6
    a01e:	f7ff fe8d 	bl	9d3c <_free_r>
    a022:	2300      	movs	r3, #0
    a024:	6363      	str	r3, [r4, #52]	; 0x34
    a026:	2300      	movs	r3, #0
    a028:	61a3      	str	r3, [r4, #24]
    a02a:	6063      	str	r3, [r4, #4]
    a02c:	89a3      	ldrh	r3, [r4, #12]
    a02e:	061b      	lsls	r3, r3, #24
    a030:	d503      	bpl.n	a03a <setvbuf+0x6e>
    a032:	6921      	ldr	r1, [r4, #16]
    a034:	0030      	movs	r0, r6
    a036:	f7ff fe81 	bl	9d3c <_free_r>
    a03a:	89a3      	ldrh	r3, [r4, #12]
    a03c:	4a36      	ldr	r2, [pc, #216]	; (a118 <setvbuf+0x14c>)
    a03e:	4013      	ands	r3, r2
    a040:	81a3      	strh	r3, [r4, #12]
    a042:	9b00      	ldr	r3, [sp, #0]
    a044:	2b02      	cmp	r3, #2
    a046:	d05a      	beq.n	a0fe <setvbuf+0x132>
    a048:	ab03      	add	r3, sp, #12
    a04a:	aa02      	add	r2, sp, #8
    a04c:	0021      	movs	r1, r4
    a04e:	0030      	movs	r0, r6
    a050:	f000 fac2 	bl	a5d8 <__swhatbuf_r>
    a054:	89a3      	ldrh	r3, [r4, #12]
    a056:	4318      	orrs	r0, r3
    a058:	81a0      	strh	r0, [r4, #12]
    a05a:	2d00      	cmp	r5, #0
    a05c:	d124      	bne.n	a0a8 <setvbuf+0xdc>
    a05e:	9d02      	ldr	r5, [sp, #8]
    a060:	0028      	movs	r0, r5
    a062:	f7ff fe37 	bl	9cd4 <malloc>
    a066:	9501      	str	r5, [sp, #4]
    a068:	1e07      	subs	r7, r0, #0
    a06a:	d142      	bne.n	a0f2 <setvbuf+0x126>
    a06c:	9b02      	ldr	r3, [sp, #8]
    a06e:	9301      	str	r3, [sp, #4]
    a070:	42ab      	cmp	r3, r5
    a072:	d139      	bne.n	a0e8 <setvbuf+0x11c>
    a074:	2001      	movs	r0, #1
    a076:	4240      	negs	r0, r0
    a078:	2302      	movs	r3, #2
    a07a:	89a2      	ldrh	r2, [r4, #12]
    a07c:	4313      	orrs	r3, r2
    a07e:	81a3      	strh	r3, [r4, #12]
    a080:	2300      	movs	r3, #0
    a082:	60a3      	str	r3, [r4, #8]
    a084:	0023      	movs	r3, r4
    a086:	3347      	adds	r3, #71	; 0x47
    a088:	6023      	str	r3, [r4, #0]
    a08a:	6123      	str	r3, [r4, #16]
    a08c:	2301      	movs	r3, #1
    a08e:	6163      	str	r3, [r4, #20]
    a090:	b005      	add	sp, #20
    a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a094:	4b21      	ldr	r3, [pc, #132]	; (a11c <setvbuf+0x150>)
    a096:	429c      	cmp	r4, r3
    a098:	d101      	bne.n	a09e <setvbuf+0xd2>
    a09a:	68b4      	ldr	r4, [r6, #8]
    a09c:	e7aa      	b.n	9ff4 <setvbuf+0x28>
    a09e:	4b20      	ldr	r3, [pc, #128]	; (a120 <setvbuf+0x154>)
    a0a0:	429c      	cmp	r4, r3
    a0a2:	d1a7      	bne.n	9ff4 <setvbuf+0x28>
    a0a4:	68f4      	ldr	r4, [r6, #12]
    a0a6:	e7a5      	b.n	9ff4 <setvbuf+0x28>
    a0a8:	2f00      	cmp	r7, #0
    a0aa:	d0d9      	beq.n	a060 <setvbuf+0x94>
    a0ac:	69b3      	ldr	r3, [r6, #24]
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d102      	bne.n	a0b8 <setvbuf+0xec>
    a0b2:	0030      	movs	r0, r6
    a0b4:	f000 f9fa 	bl	a4ac <__sinit>
    a0b8:	9b00      	ldr	r3, [sp, #0]
    a0ba:	2b01      	cmp	r3, #1
    a0bc:	d103      	bne.n	a0c6 <setvbuf+0xfa>
    a0be:	89a3      	ldrh	r3, [r4, #12]
    a0c0:	9a00      	ldr	r2, [sp, #0]
    a0c2:	431a      	orrs	r2, r3
    a0c4:	81a2      	strh	r2, [r4, #12]
    a0c6:	2008      	movs	r0, #8
    a0c8:	89a3      	ldrh	r3, [r4, #12]
    a0ca:	6027      	str	r7, [r4, #0]
    a0cc:	6127      	str	r7, [r4, #16]
    a0ce:	6165      	str	r5, [r4, #20]
    a0d0:	4018      	ands	r0, r3
    a0d2:	d018      	beq.n	a106 <setvbuf+0x13a>
    a0d4:	2001      	movs	r0, #1
    a0d6:	4018      	ands	r0, r3
    a0d8:	2300      	movs	r3, #0
    a0da:	4298      	cmp	r0, r3
    a0dc:	d011      	beq.n	a102 <setvbuf+0x136>
    a0de:	426d      	negs	r5, r5
    a0e0:	60a3      	str	r3, [r4, #8]
    a0e2:	61a5      	str	r5, [r4, #24]
    a0e4:	0018      	movs	r0, r3
    a0e6:	e7d3      	b.n	a090 <setvbuf+0xc4>
    a0e8:	9801      	ldr	r0, [sp, #4]
    a0ea:	f7ff fdf3 	bl	9cd4 <malloc>
    a0ee:	1e07      	subs	r7, r0, #0
    a0f0:	d0c0      	beq.n	a074 <setvbuf+0xa8>
    a0f2:	2380      	movs	r3, #128	; 0x80
    a0f4:	89a2      	ldrh	r2, [r4, #12]
    a0f6:	9d01      	ldr	r5, [sp, #4]
    a0f8:	4313      	orrs	r3, r2
    a0fa:	81a3      	strh	r3, [r4, #12]
    a0fc:	e7d6      	b.n	a0ac <setvbuf+0xe0>
    a0fe:	2000      	movs	r0, #0
    a100:	e7ba      	b.n	a078 <setvbuf+0xac>
    a102:	60a5      	str	r5, [r4, #8]
    a104:	e7c4      	b.n	a090 <setvbuf+0xc4>
    a106:	60a0      	str	r0, [r4, #8]
    a108:	e7c2      	b.n	a090 <setvbuf+0xc4>
    a10a:	2001      	movs	r0, #1
    a10c:	4240      	negs	r0, r0
    a10e:	e7bf      	b.n	a090 <setvbuf+0xc4>
    a110:	200000a4 	.word	0x200000a4
    a114:	0000b5b0 	.word	0x0000b5b0
    a118:	fffff35c 	.word	0xfffff35c
    a11c:	0000b5d0 	.word	0x0000b5d0
    a120:	0000b590 	.word	0x0000b590

0000a124 <__swbuf_r>:
    a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a126:	0005      	movs	r5, r0
    a128:	000e      	movs	r6, r1
    a12a:	0014      	movs	r4, r2
    a12c:	2800      	cmp	r0, #0
    a12e:	d004      	beq.n	a13a <__swbuf_r+0x16>
    a130:	6983      	ldr	r3, [r0, #24]
    a132:	2b00      	cmp	r3, #0
    a134:	d101      	bne.n	a13a <__swbuf_r+0x16>
    a136:	f000 f9b9 	bl	a4ac <__sinit>
    a13a:	4b22      	ldr	r3, [pc, #136]	; (a1c4 <__swbuf_r+0xa0>)
    a13c:	429c      	cmp	r4, r3
    a13e:	d12d      	bne.n	a19c <__swbuf_r+0x78>
    a140:	686c      	ldr	r4, [r5, #4]
    a142:	69a3      	ldr	r3, [r4, #24]
    a144:	60a3      	str	r3, [r4, #8]
    a146:	89a3      	ldrh	r3, [r4, #12]
    a148:	071b      	lsls	r3, r3, #28
    a14a:	d531      	bpl.n	a1b0 <__swbuf_r+0x8c>
    a14c:	6923      	ldr	r3, [r4, #16]
    a14e:	2b00      	cmp	r3, #0
    a150:	d02e      	beq.n	a1b0 <__swbuf_r+0x8c>
    a152:	6823      	ldr	r3, [r4, #0]
    a154:	6922      	ldr	r2, [r4, #16]
    a156:	b2f7      	uxtb	r7, r6
    a158:	1a98      	subs	r0, r3, r2
    a15a:	6963      	ldr	r3, [r4, #20]
    a15c:	b2f6      	uxtb	r6, r6
    a15e:	4298      	cmp	r0, r3
    a160:	db05      	blt.n	a16e <__swbuf_r+0x4a>
    a162:	0021      	movs	r1, r4
    a164:	0028      	movs	r0, r5
    a166:	f000 f933 	bl	a3d0 <_fflush_r>
    a16a:	2800      	cmp	r0, #0
    a16c:	d126      	bne.n	a1bc <__swbuf_r+0x98>
    a16e:	68a3      	ldr	r3, [r4, #8]
    a170:	3001      	adds	r0, #1
    a172:	3b01      	subs	r3, #1
    a174:	60a3      	str	r3, [r4, #8]
    a176:	6823      	ldr	r3, [r4, #0]
    a178:	1c5a      	adds	r2, r3, #1
    a17a:	6022      	str	r2, [r4, #0]
    a17c:	701f      	strb	r7, [r3, #0]
    a17e:	6963      	ldr	r3, [r4, #20]
    a180:	4298      	cmp	r0, r3
    a182:	d004      	beq.n	a18e <__swbuf_r+0x6a>
    a184:	89a3      	ldrh	r3, [r4, #12]
    a186:	07db      	lsls	r3, r3, #31
    a188:	d51a      	bpl.n	a1c0 <__swbuf_r+0x9c>
    a18a:	2e0a      	cmp	r6, #10
    a18c:	d118      	bne.n	a1c0 <__swbuf_r+0x9c>
    a18e:	0021      	movs	r1, r4
    a190:	0028      	movs	r0, r5
    a192:	f000 f91d 	bl	a3d0 <_fflush_r>
    a196:	2800      	cmp	r0, #0
    a198:	d012      	beq.n	a1c0 <__swbuf_r+0x9c>
    a19a:	e00f      	b.n	a1bc <__swbuf_r+0x98>
    a19c:	4b0a      	ldr	r3, [pc, #40]	; (a1c8 <__swbuf_r+0xa4>)
    a19e:	429c      	cmp	r4, r3
    a1a0:	d101      	bne.n	a1a6 <__swbuf_r+0x82>
    a1a2:	68ac      	ldr	r4, [r5, #8]
    a1a4:	e7cd      	b.n	a142 <__swbuf_r+0x1e>
    a1a6:	4b09      	ldr	r3, [pc, #36]	; (a1cc <__swbuf_r+0xa8>)
    a1a8:	429c      	cmp	r4, r3
    a1aa:	d1ca      	bne.n	a142 <__swbuf_r+0x1e>
    a1ac:	68ec      	ldr	r4, [r5, #12]
    a1ae:	e7c8      	b.n	a142 <__swbuf_r+0x1e>
    a1b0:	0021      	movs	r1, r4
    a1b2:	0028      	movs	r0, r5
    a1b4:	f000 f80c 	bl	a1d0 <__swsetup_r>
    a1b8:	2800      	cmp	r0, #0
    a1ba:	d0ca      	beq.n	a152 <__swbuf_r+0x2e>
    a1bc:	2601      	movs	r6, #1
    a1be:	4276      	negs	r6, r6
    a1c0:	0030      	movs	r0, r6
    a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1c4:	0000b5b0 	.word	0x0000b5b0
    a1c8:	0000b5d0 	.word	0x0000b5d0
    a1cc:	0000b590 	.word	0x0000b590

0000a1d0 <__swsetup_r>:
    a1d0:	4b36      	ldr	r3, [pc, #216]	; (a2ac <__swsetup_r+0xdc>)
    a1d2:	b570      	push	{r4, r5, r6, lr}
    a1d4:	681d      	ldr	r5, [r3, #0]
    a1d6:	0006      	movs	r6, r0
    a1d8:	000c      	movs	r4, r1
    a1da:	2d00      	cmp	r5, #0
    a1dc:	d005      	beq.n	a1ea <__swsetup_r+0x1a>
    a1de:	69ab      	ldr	r3, [r5, #24]
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d102      	bne.n	a1ea <__swsetup_r+0x1a>
    a1e4:	0028      	movs	r0, r5
    a1e6:	f000 f961 	bl	a4ac <__sinit>
    a1ea:	4b31      	ldr	r3, [pc, #196]	; (a2b0 <__swsetup_r+0xe0>)
    a1ec:	429c      	cmp	r4, r3
    a1ee:	d10f      	bne.n	a210 <__swsetup_r+0x40>
    a1f0:	686c      	ldr	r4, [r5, #4]
    a1f2:	230c      	movs	r3, #12
    a1f4:	5ee2      	ldrsh	r2, [r4, r3]
    a1f6:	b293      	uxth	r3, r2
    a1f8:	0719      	lsls	r1, r3, #28
    a1fa:	d42d      	bmi.n	a258 <__swsetup_r+0x88>
    a1fc:	06d9      	lsls	r1, r3, #27
    a1fe:	d411      	bmi.n	a224 <__swsetup_r+0x54>
    a200:	2309      	movs	r3, #9
    a202:	2001      	movs	r0, #1
    a204:	6033      	str	r3, [r6, #0]
    a206:	3337      	adds	r3, #55	; 0x37
    a208:	4313      	orrs	r3, r2
    a20a:	81a3      	strh	r3, [r4, #12]
    a20c:	4240      	negs	r0, r0
    a20e:	bd70      	pop	{r4, r5, r6, pc}
    a210:	4b28      	ldr	r3, [pc, #160]	; (a2b4 <__swsetup_r+0xe4>)
    a212:	429c      	cmp	r4, r3
    a214:	d101      	bne.n	a21a <__swsetup_r+0x4a>
    a216:	68ac      	ldr	r4, [r5, #8]
    a218:	e7eb      	b.n	a1f2 <__swsetup_r+0x22>
    a21a:	4b27      	ldr	r3, [pc, #156]	; (a2b8 <__swsetup_r+0xe8>)
    a21c:	429c      	cmp	r4, r3
    a21e:	d1e8      	bne.n	a1f2 <__swsetup_r+0x22>
    a220:	68ec      	ldr	r4, [r5, #12]
    a222:	e7e6      	b.n	a1f2 <__swsetup_r+0x22>
    a224:	075b      	lsls	r3, r3, #29
    a226:	d513      	bpl.n	a250 <__swsetup_r+0x80>
    a228:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a22a:	2900      	cmp	r1, #0
    a22c:	d008      	beq.n	a240 <__swsetup_r+0x70>
    a22e:	0023      	movs	r3, r4
    a230:	3344      	adds	r3, #68	; 0x44
    a232:	4299      	cmp	r1, r3
    a234:	d002      	beq.n	a23c <__swsetup_r+0x6c>
    a236:	0030      	movs	r0, r6
    a238:	f7ff fd80 	bl	9d3c <_free_r>
    a23c:	2300      	movs	r3, #0
    a23e:	6363      	str	r3, [r4, #52]	; 0x34
    a240:	2224      	movs	r2, #36	; 0x24
    a242:	89a3      	ldrh	r3, [r4, #12]
    a244:	4393      	bics	r3, r2
    a246:	81a3      	strh	r3, [r4, #12]
    a248:	2300      	movs	r3, #0
    a24a:	6063      	str	r3, [r4, #4]
    a24c:	6923      	ldr	r3, [r4, #16]
    a24e:	6023      	str	r3, [r4, #0]
    a250:	2308      	movs	r3, #8
    a252:	89a2      	ldrh	r2, [r4, #12]
    a254:	4313      	orrs	r3, r2
    a256:	81a3      	strh	r3, [r4, #12]
    a258:	6923      	ldr	r3, [r4, #16]
    a25a:	2b00      	cmp	r3, #0
    a25c:	d10b      	bne.n	a276 <__swsetup_r+0xa6>
    a25e:	21a0      	movs	r1, #160	; 0xa0
    a260:	2280      	movs	r2, #128	; 0x80
    a262:	89a3      	ldrh	r3, [r4, #12]
    a264:	0089      	lsls	r1, r1, #2
    a266:	0092      	lsls	r2, r2, #2
    a268:	400b      	ands	r3, r1
    a26a:	4293      	cmp	r3, r2
    a26c:	d003      	beq.n	a276 <__swsetup_r+0xa6>
    a26e:	0021      	movs	r1, r4
    a270:	0030      	movs	r0, r6
    a272:	f000 f9d9 	bl	a628 <__smakebuf_r>
    a276:	2301      	movs	r3, #1
    a278:	89a2      	ldrh	r2, [r4, #12]
    a27a:	4013      	ands	r3, r2
    a27c:	d011      	beq.n	a2a2 <__swsetup_r+0xd2>
    a27e:	2300      	movs	r3, #0
    a280:	60a3      	str	r3, [r4, #8]
    a282:	6963      	ldr	r3, [r4, #20]
    a284:	425b      	negs	r3, r3
    a286:	61a3      	str	r3, [r4, #24]
    a288:	2000      	movs	r0, #0
    a28a:	6923      	ldr	r3, [r4, #16]
    a28c:	4283      	cmp	r3, r0
    a28e:	d1be      	bne.n	a20e <__swsetup_r+0x3e>
    a290:	230c      	movs	r3, #12
    a292:	5ee2      	ldrsh	r2, [r4, r3]
    a294:	0613      	lsls	r3, r2, #24
    a296:	d5ba      	bpl.n	a20e <__swsetup_r+0x3e>
    a298:	2340      	movs	r3, #64	; 0x40
    a29a:	4313      	orrs	r3, r2
    a29c:	81a3      	strh	r3, [r4, #12]
    a29e:	3801      	subs	r0, #1
    a2a0:	e7b5      	b.n	a20e <__swsetup_r+0x3e>
    a2a2:	0792      	lsls	r2, r2, #30
    a2a4:	d400      	bmi.n	a2a8 <__swsetup_r+0xd8>
    a2a6:	6963      	ldr	r3, [r4, #20]
    a2a8:	60a3      	str	r3, [r4, #8]
    a2aa:	e7ed      	b.n	a288 <__swsetup_r+0xb8>
    a2ac:	200000a4 	.word	0x200000a4
    a2b0:	0000b5b0 	.word	0x0000b5b0
    a2b4:	0000b5d0 	.word	0x0000b5d0
    a2b8:	0000b590 	.word	0x0000b590

0000a2bc <__sflush_r>:
    a2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a2be:	898a      	ldrh	r2, [r1, #12]
    a2c0:	0005      	movs	r5, r0
    a2c2:	000c      	movs	r4, r1
    a2c4:	0713      	lsls	r3, r2, #28
    a2c6:	d460      	bmi.n	a38a <__sflush_r+0xce>
    a2c8:	684b      	ldr	r3, [r1, #4]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	dc04      	bgt.n	a2d8 <__sflush_r+0x1c>
    a2ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	dc01      	bgt.n	a2d8 <__sflush_r+0x1c>
    a2d4:	2000      	movs	r0, #0
    a2d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a2d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a2da:	2f00      	cmp	r7, #0
    a2dc:	d0fa      	beq.n	a2d4 <__sflush_r+0x18>
    a2de:	2300      	movs	r3, #0
    a2e0:	682e      	ldr	r6, [r5, #0]
    a2e2:	602b      	str	r3, [r5, #0]
    a2e4:	2380      	movs	r3, #128	; 0x80
    a2e6:	015b      	lsls	r3, r3, #5
    a2e8:	401a      	ands	r2, r3
    a2ea:	d034      	beq.n	a356 <__sflush_r+0x9a>
    a2ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a2ee:	89a3      	ldrh	r3, [r4, #12]
    a2f0:	075b      	lsls	r3, r3, #29
    a2f2:	d506      	bpl.n	a302 <__sflush_r+0x46>
    a2f4:	6863      	ldr	r3, [r4, #4]
    a2f6:	1ac0      	subs	r0, r0, r3
    a2f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d001      	beq.n	a302 <__sflush_r+0x46>
    a2fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a300:	1ac0      	subs	r0, r0, r3
    a302:	0002      	movs	r2, r0
    a304:	6a21      	ldr	r1, [r4, #32]
    a306:	2300      	movs	r3, #0
    a308:	0028      	movs	r0, r5
    a30a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a30c:	47b8      	blx	r7
    a30e:	89a1      	ldrh	r1, [r4, #12]
    a310:	1c43      	adds	r3, r0, #1
    a312:	d106      	bne.n	a322 <__sflush_r+0x66>
    a314:	682b      	ldr	r3, [r5, #0]
    a316:	2b1d      	cmp	r3, #29
    a318:	d831      	bhi.n	a37e <__sflush_r+0xc2>
    a31a:	4a2c      	ldr	r2, [pc, #176]	; (a3cc <__sflush_r+0x110>)
    a31c:	40da      	lsrs	r2, r3
    a31e:	07d3      	lsls	r3, r2, #31
    a320:	d52d      	bpl.n	a37e <__sflush_r+0xc2>
    a322:	2300      	movs	r3, #0
    a324:	6063      	str	r3, [r4, #4]
    a326:	6923      	ldr	r3, [r4, #16]
    a328:	6023      	str	r3, [r4, #0]
    a32a:	04cb      	lsls	r3, r1, #19
    a32c:	d505      	bpl.n	a33a <__sflush_r+0x7e>
    a32e:	1c43      	adds	r3, r0, #1
    a330:	d102      	bne.n	a338 <__sflush_r+0x7c>
    a332:	682b      	ldr	r3, [r5, #0]
    a334:	2b00      	cmp	r3, #0
    a336:	d100      	bne.n	a33a <__sflush_r+0x7e>
    a338:	6560      	str	r0, [r4, #84]	; 0x54
    a33a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a33c:	602e      	str	r6, [r5, #0]
    a33e:	2900      	cmp	r1, #0
    a340:	d0c8      	beq.n	a2d4 <__sflush_r+0x18>
    a342:	0023      	movs	r3, r4
    a344:	3344      	adds	r3, #68	; 0x44
    a346:	4299      	cmp	r1, r3
    a348:	d002      	beq.n	a350 <__sflush_r+0x94>
    a34a:	0028      	movs	r0, r5
    a34c:	f7ff fcf6 	bl	9d3c <_free_r>
    a350:	2000      	movs	r0, #0
    a352:	6360      	str	r0, [r4, #52]	; 0x34
    a354:	e7bf      	b.n	a2d6 <__sflush_r+0x1a>
    a356:	2301      	movs	r3, #1
    a358:	6a21      	ldr	r1, [r4, #32]
    a35a:	0028      	movs	r0, r5
    a35c:	47b8      	blx	r7
    a35e:	1c43      	adds	r3, r0, #1
    a360:	d1c5      	bne.n	a2ee <__sflush_r+0x32>
    a362:	682b      	ldr	r3, [r5, #0]
    a364:	2b00      	cmp	r3, #0
    a366:	d0c2      	beq.n	a2ee <__sflush_r+0x32>
    a368:	2b1d      	cmp	r3, #29
    a36a:	d001      	beq.n	a370 <__sflush_r+0xb4>
    a36c:	2b16      	cmp	r3, #22
    a36e:	d101      	bne.n	a374 <__sflush_r+0xb8>
    a370:	602e      	str	r6, [r5, #0]
    a372:	e7af      	b.n	a2d4 <__sflush_r+0x18>
    a374:	2340      	movs	r3, #64	; 0x40
    a376:	89a2      	ldrh	r2, [r4, #12]
    a378:	4313      	orrs	r3, r2
    a37a:	81a3      	strh	r3, [r4, #12]
    a37c:	e7ab      	b.n	a2d6 <__sflush_r+0x1a>
    a37e:	2340      	movs	r3, #64	; 0x40
    a380:	430b      	orrs	r3, r1
    a382:	2001      	movs	r0, #1
    a384:	81a3      	strh	r3, [r4, #12]
    a386:	4240      	negs	r0, r0
    a388:	e7a5      	b.n	a2d6 <__sflush_r+0x1a>
    a38a:	690f      	ldr	r7, [r1, #16]
    a38c:	2f00      	cmp	r7, #0
    a38e:	d0a1      	beq.n	a2d4 <__sflush_r+0x18>
    a390:	680b      	ldr	r3, [r1, #0]
    a392:	600f      	str	r7, [r1, #0]
    a394:	1bdb      	subs	r3, r3, r7
    a396:	9301      	str	r3, [sp, #4]
    a398:	2300      	movs	r3, #0
    a39a:	0792      	lsls	r2, r2, #30
    a39c:	d100      	bne.n	a3a0 <__sflush_r+0xe4>
    a39e:	694b      	ldr	r3, [r1, #20]
    a3a0:	60a3      	str	r3, [r4, #8]
    a3a2:	9b01      	ldr	r3, [sp, #4]
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	dc00      	bgt.n	a3aa <__sflush_r+0xee>
    a3a8:	e794      	b.n	a2d4 <__sflush_r+0x18>
    a3aa:	9b01      	ldr	r3, [sp, #4]
    a3ac:	003a      	movs	r2, r7
    a3ae:	6a21      	ldr	r1, [r4, #32]
    a3b0:	0028      	movs	r0, r5
    a3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a3b4:	47b0      	blx	r6
    a3b6:	2800      	cmp	r0, #0
    a3b8:	dc03      	bgt.n	a3c2 <__sflush_r+0x106>
    a3ba:	2340      	movs	r3, #64	; 0x40
    a3bc:	89a2      	ldrh	r2, [r4, #12]
    a3be:	4313      	orrs	r3, r2
    a3c0:	e7df      	b.n	a382 <__sflush_r+0xc6>
    a3c2:	9b01      	ldr	r3, [sp, #4]
    a3c4:	183f      	adds	r7, r7, r0
    a3c6:	1a1b      	subs	r3, r3, r0
    a3c8:	9301      	str	r3, [sp, #4]
    a3ca:	e7ea      	b.n	a3a2 <__sflush_r+0xe6>
    a3cc:	20400001 	.word	0x20400001

0000a3d0 <_fflush_r>:
    a3d0:	690b      	ldr	r3, [r1, #16]
    a3d2:	b570      	push	{r4, r5, r6, lr}
    a3d4:	0005      	movs	r5, r0
    a3d6:	000c      	movs	r4, r1
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d101      	bne.n	a3e0 <_fflush_r+0x10>
    a3dc:	2000      	movs	r0, #0
    a3de:	bd70      	pop	{r4, r5, r6, pc}
    a3e0:	2800      	cmp	r0, #0
    a3e2:	d004      	beq.n	a3ee <_fflush_r+0x1e>
    a3e4:	6983      	ldr	r3, [r0, #24]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d101      	bne.n	a3ee <_fflush_r+0x1e>
    a3ea:	f000 f85f 	bl	a4ac <__sinit>
    a3ee:	4b0b      	ldr	r3, [pc, #44]	; (a41c <_fflush_r+0x4c>)
    a3f0:	429c      	cmp	r4, r3
    a3f2:	d109      	bne.n	a408 <_fflush_r+0x38>
    a3f4:	686c      	ldr	r4, [r5, #4]
    a3f6:	220c      	movs	r2, #12
    a3f8:	5ea3      	ldrsh	r3, [r4, r2]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d0ee      	beq.n	a3dc <_fflush_r+0xc>
    a3fe:	0021      	movs	r1, r4
    a400:	0028      	movs	r0, r5
    a402:	f7ff ff5b 	bl	a2bc <__sflush_r>
    a406:	e7ea      	b.n	a3de <_fflush_r+0xe>
    a408:	4b05      	ldr	r3, [pc, #20]	; (a420 <_fflush_r+0x50>)
    a40a:	429c      	cmp	r4, r3
    a40c:	d101      	bne.n	a412 <_fflush_r+0x42>
    a40e:	68ac      	ldr	r4, [r5, #8]
    a410:	e7f1      	b.n	a3f6 <_fflush_r+0x26>
    a412:	4b04      	ldr	r3, [pc, #16]	; (a424 <_fflush_r+0x54>)
    a414:	429c      	cmp	r4, r3
    a416:	d1ee      	bne.n	a3f6 <_fflush_r+0x26>
    a418:	68ec      	ldr	r4, [r5, #12]
    a41a:	e7ec      	b.n	a3f6 <_fflush_r+0x26>
    a41c:	0000b5b0 	.word	0x0000b5b0
    a420:	0000b5d0 	.word	0x0000b5d0
    a424:	0000b590 	.word	0x0000b590

0000a428 <_cleanup_r>:
    a428:	b510      	push	{r4, lr}
    a42a:	4902      	ldr	r1, [pc, #8]	; (a434 <_cleanup_r+0xc>)
    a42c:	f000 f8b2 	bl	a594 <_fwalk_reent>
    a430:	bd10      	pop	{r4, pc}
    a432:	46c0      	nop			; (mov r8, r8)
    a434:	0000a3d1 	.word	0x0000a3d1

0000a438 <std.isra.0>:
    a438:	2300      	movs	r3, #0
    a43a:	b510      	push	{r4, lr}
    a43c:	0004      	movs	r4, r0
    a43e:	6003      	str	r3, [r0, #0]
    a440:	6043      	str	r3, [r0, #4]
    a442:	6083      	str	r3, [r0, #8]
    a444:	8181      	strh	r1, [r0, #12]
    a446:	6643      	str	r3, [r0, #100]	; 0x64
    a448:	81c2      	strh	r2, [r0, #14]
    a44a:	6103      	str	r3, [r0, #16]
    a44c:	6143      	str	r3, [r0, #20]
    a44e:	6183      	str	r3, [r0, #24]
    a450:	0019      	movs	r1, r3
    a452:	2208      	movs	r2, #8
    a454:	305c      	adds	r0, #92	; 0x5c
    a456:	f7ff fc69 	bl	9d2c <memset>
    a45a:	4b05      	ldr	r3, [pc, #20]	; (a470 <std.isra.0+0x38>)
    a45c:	6224      	str	r4, [r4, #32]
    a45e:	6263      	str	r3, [r4, #36]	; 0x24
    a460:	4b04      	ldr	r3, [pc, #16]	; (a474 <std.isra.0+0x3c>)
    a462:	62a3      	str	r3, [r4, #40]	; 0x28
    a464:	4b04      	ldr	r3, [pc, #16]	; (a478 <std.isra.0+0x40>)
    a466:	62e3      	str	r3, [r4, #44]	; 0x2c
    a468:	4b04      	ldr	r3, [pc, #16]	; (a47c <std.isra.0+0x44>)
    a46a:	6323      	str	r3, [r4, #48]	; 0x30
    a46c:	bd10      	pop	{r4, pc}
    a46e:	46c0      	nop			; (mov r8, r8)
    a470:	0000ac4d 	.word	0x0000ac4d
    a474:	0000ac75 	.word	0x0000ac75
    a478:	0000acad 	.word	0x0000acad
    a47c:	0000acd9 	.word	0x0000acd9

0000a480 <__sfmoreglue>:
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	2568      	movs	r5, #104	; 0x68
    a484:	1e4a      	subs	r2, r1, #1
    a486:	4355      	muls	r5, r2
    a488:	000e      	movs	r6, r1
    a48a:	0029      	movs	r1, r5
    a48c:	3174      	adds	r1, #116	; 0x74
    a48e:	f7ff fc9f 	bl	9dd0 <_malloc_r>
    a492:	1e04      	subs	r4, r0, #0
    a494:	d008      	beq.n	a4a8 <__sfmoreglue+0x28>
    a496:	2100      	movs	r1, #0
    a498:	002a      	movs	r2, r5
    a49a:	6001      	str	r1, [r0, #0]
    a49c:	6046      	str	r6, [r0, #4]
    a49e:	300c      	adds	r0, #12
    a4a0:	60a0      	str	r0, [r4, #8]
    a4a2:	3268      	adds	r2, #104	; 0x68
    a4a4:	f7ff fc42 	bl	9d2c <memset>
    a4a8:	0020      	movs	r0, r4
    a4aa:	bd70      	pop	{r4, r5, r6, pc}

0000a4ac <__sinit>:
    a4ac:	6983      	ldr	r3, [r0, #24]
    a4ae:	b513      	push	{r0, r1, r4, lr}
    a4b0:	0004      	movs	r4, r0
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d128      	bne.n	a508 <__sinit+0x5c>
    a4b6:	6483      	str	r3, [r0, #72]	; 0x48
    a4b8:	64c3      	str	r3, [r0, #76]	; 0x4c
    a4ba:	6503      	str	r3, [r0, #80]	; 0x50
    a4bc:	4b13      	ldr	r3, [pc, #76]	; (a50c <__sinit+0x60>)
    a4be:	4a14      	ldr	r2, [pc, #80]	; (a510 <__sinit+0x64>)
    a4c0:	681b      	ldr	r3, [r3, #0]
    a4c2:	6282      	str	r2, [r0, #40]	; 0x28
    a4c4:	9301      	str	r3, [sp, #4]
    a4c6:	4298      	cmp	r0, r3
    a4c8:	d101      	bne.n	a4ce <__sinit+0x22>
    a4ca:	2301      	movs	r3, #1
    a4cc:	6183      	str	r3, [r0, #24]
    a4ce:	0020      	movs	r0, r4
    a4d0:	f000 f820 	bl	a514 <__sfp>
    a4d4:	6060      	str	r0, [r4, #4]
    a4d6:	0020      	movs	r0, r4
    a4d8:	f000 f81c 	bl	a514 <__sfp>
    a4dc:	60a0      	str	r0, [r4, #8]
    a4de:	0020      	movs	r0, r4
    a4e0:	f000 f818 	bl	a514 <__sfp>
    a4e4:	2200      	movs	r2, #0
    a4e6:	60e0      	str	r0, [r4, #12]
    a4e8:	2104      	movs	r1, #4
    a4ea:	6860      	ldr	r0, [r4, #4]
    a4ec:	f7ff ffa4 	bl	a438 <std.isra.0>
    a4f0:	2201      	movs	r2, #1
    a4f2:	2109      	movs	r1, #9
    a4f4:	68a0      	ldr	r0, [r4, #8]
    a4f6:	f7ff ff9f 	bl	a438 <std.isra.0>
    a4fa:	2202      	movs	r2, #2
    a4fc:	2112      	movs	r1, #18
    a4fe:	68e0      	ldr	r0, [r4, #12]
    a500:	f7ff ff9a 	bl	a438 <std.isra.0>
    a504:	2301      	movs	r3, #1
    a506:	61a3      	str	r3, [r4, #24]
    a508:	bd13      	pop	{r0, r1, r4, pc}
    a50a:	46c0      	nop			; (mov r8, r8)
    a50c:	0000b58c 	.word	0x0000b58c
    a510:	0000a429 	.word	0x0000a429

0000a514 <__sfp>:
    a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a516:	4b1e      	ldr	r3, [pc, #120]	; (a590 <__sfp+0x7c>)
    a518:	0007      	movs	r7, r0
    a51a:	681e      	ldr	r6, [r3, #0]
    a51c:	69b3      	ldr	r3, [r6, #24]
    a51e:	2b00      	cmp	r3, #0
    a520:	d102      	bne.n	a528 <__sfp+0x14>
    a522:	0030      	movs	r0, r6
    a524:	f7ff ffc2 	bl	a4ac <__sinit>
    a528:	3648      	adds	r6, #72	; 0x48
    a52a:	68b4      	ldr	r4, [r6, #8]
    a52c:	6873      	ldr	r3, [r6, #4]
    a52e:	3b01      	subs	r3, #1
    a530:	d504      	bpl.n	a53c <__sfp+0x28>
    a532:	6833      	ldr	r3, [r6, #0]
    a534:	2b00      	cmp	r3, #0
    a536:	d007      	beq.n	a548 <__sfp+0x34>
    a538:	6836      	ldr	r6, [r6, #0]
    a53a:	e7f6      	b.n	a52a <__sfp+0x16>
    a53c:	220c      	movs	r2, #12
    a53e:	5ea5      	ldrsh	r5, [r4, r2]
    a540:	2d00      	cmp	r5, #0
    a542:	d00d      	beq.n	a560 <__sfp+0x4c>
    a544:	3468      	adds	r4, #104	; 0x68
    a546:	e7f2      	b.n	a52e <__sfp+0x1a>
    a548:	2104      	movs	r1, #4
    a54a:	0038      	movs	r0, r7
    a54c:	f7ff ff98 	bl	a480 <__sfmoreglue>
    a550:	6030      	str	r0, [r6, #0]
    a552:	2800      	cmp	r0, #0
    a554:	d1f0      	bne.n	a538 <__sfp+0x24>
    a556:	230c      	movs	r3, #12
    a558:	0004      	movs	r4, r0
    a55a:	603b      	str	r3, [r7, #0]
    a55c:	0020      	movs	r0, r4
    a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a560:	2301      	movs	r3, #1
    a562:	0020      	movs	r0, r4
    a564:	425b      	negs	r3, r3
    a566:	81e3      	strh	r3, [r4, #14]
    a568:	3302      	adds	r3, #2
    a56a:	81a3      	strh	r3, [r4, #12]
    a56c:	6665      	str	r5, [r4, #100]	; 0x64
    a56e:	6025      	str	r5, [r4, #0]
    a570:	60a5      	str	r5, [r4, #8]
    a572:	6065      	str	r5, [r4, #4]
    a574:	6125      	str	r5, [r4, #16]
    a576:	6165      	str	r5, [r4, #20]
    a578:	61a5      	str	r5, [r4, #24]
    a57a:	2208      	movs	r2, #8
    a57c:	0029      	movs	r1, r5
    a57e:	305c      	adds	r0, #92	; 0x5c
    a580:	f7ff fbd4 	bl	9d2c <memset>
    a584:	6365      	str	r5, [r4, #52]	; 0x34
    a586:	63a5      	str	r5, [r4, #56]	; 0x38
    a588:	64a5      	str	r5, [r4, #72]	; 0x48
    a58a:	64e5      	str	r5, [r4, #76]	; 0x4c
    a58c:	e7e6      	b.n	a55c <__sfp+0x48>
    a58e:	46c0      	nop			; (mov r8, r8)
    a590:	0000b58c 	.word	0x0000b58c

0000a594 <_fwalk_reent>:
    a594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a596:	0004      	movs	r4, r0
    a598:	0007      	movs	r7, r0
    a59a:	2600      	movs	r6, #0
    a59c:	9101      	str	r1, [sp, #4]
    a59e:	3448      	adds	r4, #72	; 0x48
    a5a0:	2c00      	cmp	r4, #0
    a5a2:	d101      	bne.n	a5a8 <_fwalk_reent+0x14>
    a5a4:	0030      	movs	r0, r6
    a5a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a5a8:	6863      	ldr	r3, [r4, #4]
    a5aa:	68a5      	ldr	r5, [r4, #8]
    a5ac:	9300      	str	r3, [sp, #0]
    a5ae:	9b00      	ldr	r3, [sp, #0]
    a5b0:	3b01      	subs	r3, #1
    a5b2:	9300      	str	r3, [sp, #0]
    a5b4:	d501      	bpl.n	a5ba <_fwalk_reent+0x26>
    a5b6:	6824      	ldr	r4, [r4, #0]
    a5b8:	e7f2      	b.n	a5a0 <_fwalk_reent+0xc>
    a5ba:	89ab      	ldrh	r3, [r5, #12]
    a5bc:	2b01      	cmp	r3, #1
    a5be:	d908      	bls.n	a5d2 <_fwalk_reent+0x3e>
    a5c0:	220e      	movs	r2, #14
    a5c2:	5eab      	ldrsh	r3, [r5, r2]
    a5c4:	3301      	adds	r3, #1
    a5c6:	d004      	beq.n	a5d2 <_fwalk_reent+0x3e>
    a5c8:	0029      	movs	r1, r5
    a5ca:	0038      	movs	r0, r7
    a5cc:	9b01      	ldr	r3, [sp, #4]
    a5ce:	4798      	blx	r3
    a5d0:	4306      	orrs	r6, r0
    a5d2:	3568      	adds	r5, #104	; 0x68
    a5d4:	e7eb      	b.n	a5ae <_fwalk_reent+0x1a>
	...

0000a5d8 <__swhatbuf_r>:
    a5d8:	b570      	push	{r4, r5, r6, lr}
    a5da:	000e      	movs	r6, r1
    a5dc:	001d      	movs	r5, r3
    a5de:	230e      	movs	r3, #14
    a5e0:	5ec9      	ldrsh	r1, [r1, r3]
    a5e2:	b090      	sub	sp, #64	; 0x40
    a5e4:	0014      	movs	r4, r2
    a5e6:	2900      	cmp	r1, #0
    a5e8:	da07      	bge.n	a5fa <__swhatbuf_r+0x22>
    a5ea:	2300      	movs	r3, #0
    a5ec:	602b      	str	r3, [r5, #0]
    a5ee:	89b3      	ldrh	r3, [r6, #12]
    a5f0:	061b      	lsls	r3, r3, #24
    a5f2:	d411      	bmi.n	a618 <__swhatbuf_r+0x40>
    a5f4:	2380      	movs	r3, #128	; 0x80
    a5f6:	00db      	lsls	r3, r3, #3
    a5f8:	e00f      	b.n	a61a <__swhatbuf_r+0x42>
    a5fa:	aa01      	add	r2, sp, #4
    a5fc:	f000 fb98 	bl	ad30 <_fstat_r>
    a600:	2800      	cmp	r0, #0
    a602:	dbf2      	blt.n	a5ea <__swhatbuf_r+0x12>
    a604:	22f0      	movs	r2, #240	; 0xf0
    a606:	9b02      	ldr	r3, [sp, #8]
    a608:	0212      	lsls	r2, r2, #8
    a60a:	4013      	ands	r3, r2
    a60c:	4a05      	ldr	r2, [pc, #20]	; (a624 <__swhatbuf_r+0x4c>)
    a60e:	189b      	adds	r3, r3, r2
    a610:	425a      	negs	r2, r3
    a612:	4153      	adcs	r3, r2
    a614:	602b      	str	r3, [r5, #0]
    a616:	e7ed      	b.n	a5f4 <__swhatbuf_r+0x1c>
    a618:	2340      	movs	r3, #64	; 0x40
    a61a:	2000      	movs	r0, #0
    a61c:	6023      	str	r3, [r4, #0]
    a61e:	b010      	add	sp, #64	; 0x40
    a620:	bd70      	pop	{r4, r5, r6, pc}
    a622:	46c0      	nop			; (mov r8, r8)
    a624:	ffffe000 	.word	0xffffe000

0000a628 <__smakebuf_r>:
    a628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a62a:	2602      	movs	r6, #2
    a62c:	898b      	ldrh	r3, [r1, #12]
    a62e:	0005      	movs	r5, r0
    a630:	000c      	movs	r4, r1
    a632:	4233      	tst	r3, r6
    a634:	d006      	beq.n	a644 <__smakebuf_r+0x1c>
    a636:	0023      	movs	r3, r4
    a638:	3347      	adds	r3, #71	; 0x47
    a63a:	6023      	str	r3, [r4, #0]
    a63c:	6123      	str	r3, [r4, #16]
    a63e:	2301      	movs	r3, #1
    a640:	6163      	str	r3, [r4, #20]
    a642:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a644:	ab01      	add	r3, sp, #4
    a646:	466a      	mov	r2, sp
    a648:	f7ff ffc6 	bl	a5d8 <__swhatbuf_r>
    a64c:	9900      	ldr	r1, [sp, #0]
    a64e:	0007      	movs	r7, r0
    a650:	0028      	movs	r0, r5
    a652:	f7ff fbbd 	bl	9dd0 <_malloc_r>
    a656:	2800      	cmp	r0, #0
    a658:	d108      	bne.n	a66c <__smakebuf_r+0x44>
    a65a:	220c      	movs	r2, #12
    a65c:	5ea3      	ldrsh	r3, [r4, r2]
    a65e:	059a      	lsls	r2, r3, #22
    a660:	d4ef      	bmi.n	a642 <__smakebuf_r+0x1a>
    a662:	2203      	movs	r2, #3
    a664:	4393      	bics	r3, r2
    a666:	431e      	orrs	r6, r3
    a668:	81a6      	strh	r6, [r4, #12]
    a66a:	e7e4      	b.n	a636 <__smakebuf_r+0xe>
    a66c:	4b0f      	ldr	r3, [pc, #60]	; (a6ac <__smakebuf_r+0x84>)
    a66e:	62ab      	str	r3, [r5, #40]	; 0x28
    a670:	2380      	movs	r3, #128	; 0x80
    a672:	89a2      	ldrh	r2, [r4, #12]
    a674:	6020      	str	r0, [r4, #0]
    a676:	4313      	orrs	r3, r2
    a678:	81a3      	strh	r3, [r4, #12]
    a67a:	9b00      	ldr	r3, [sp, #0]
    a67c:	6120      	str	r0, [r4, #16]
    a67e:	6163      	str	r3, [r4, #20]
    a680:	9b01      	ldr	r3, [sp, #4]
    a682:	2b00      	cmp	r3, #0
    a684:	d00d      	beq.n	a6a2 <__smakebuf_r+0x7a>
    a686:	230e      	movs	r3, #14
    a688:	5ee1      	ldrsh	r1, [r4, r3]
    a68a:	0028      	movs	r0, r5
    a68c:	f000 fb62 	bl	ad54 <_isatty_r>
    a690:	2800      	cmp	r0, #0
    a692:	d006      	beq.n	a6a2 <__smakebuf_r+0x7a>
    a694:	2203      	movs	r2, #3
    a696:	89a3      	ldrh	r3, [r4, #12]
    a698:	4393      	bics	r3, r2
    a69a:	001a      	movs	r2, r3
    a69c:	2301      	movs	r3, #1
    a69e:	4313      	orrs	r3, r2
    a6a0:	81a3      	strh	r3, [r4, #12]
    a6a2:	89a0      	ldrh	r0, [r4, #12]
    a6a4:	4338      	orrs	r0, r7
    a6a6:	81a0      	strh	r0, [r4, #12]
    a6a8:	e7cb      	b.n	a642 <__smakebuf_r+0x1a>
    a6aa:	46c0      	nop			; (mov r8, r8)
    a6ac:	0000a429 	.word	0x0000a429

0000a6b0 <__malloc_lock>:
    a6b0:	4770      	bx	lr

0000a6b2 <__malloc_unlock>:
    a6b2:	4770      	bx	lr

0000a6b4 <__sfputc_r>:
    a6b4:	6893      	ldr	r3, [r2, #8]
    a6b6:	b510      	push	{r4, lr}
    a6b8:	3b01      	subs	r3, #1
    a6ba:	6093      	str	r3, [r2, #8]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	da05      	bge.n	a6cc <__sfputc_r+0x18>
    a6c0:	6994      	ldr	r4, [r2, #24]
    a6c2:	42a3      	cmp	r3, r4
    a6c4:	db08      	blt.n	a6d8 <__sfputc_r+0x24>
    a6c6:	b2cb      	uxtb	r3, r1
    a6c8:	2b0a      	cmp	r3, #10
    a6ca:	d005      	beq.n	a6d8 <__sfputc_r+0x24>
    a6cc:	6813      	ldr	r3, [r2, #0]
    a6ce:	1c58      	adds	r0, r3, #1
    a6d0:	6010      	str	r0, [r2, #0]
    a6d2:	7019      	strb	r1, [r3, #0]
    a6d4:	b2c8      	uxtb	r0, r1
    a6d6:	bd10      	pop	{r4, pc}
    a6d8:	f7ff fd24 	bl	a124 <__swbuf_r>
    a6dc:	e7fb      	b.n	a6d6 <__sfputc_r+0x22>

0000a6de <__sfputs_r>:
    a6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6e0:	0006      	movs	r6, r0
    a6e2:	000f      	movs	r7, r1
    a6e4:	0014      	movs	r4, r2
    a6e6:	18d5      	adds	r5, r2, r3
    a6e8:	42ac      	cmp	r4, r5
    a6ea:	d101      	bne.n	a6f0 <__sfputs_r+0x12>
    a6ec:	2000      	movs	r0, #0
    a6ee:	e007      	b.n	a700 <__sfputs_r+0x22>
    a6f0:	7821      	ldrb	r1, [r4, #0]
    a6f2:	003a      	movs	r2, r7
    a6f4:	0030      	movs	r0, r6
    a6f6:	f7ff ffdd 	bl	a6b4 <__sfputc_r>
    a6fa:	3401      	adds	r4, #1
    a6fc:	1c43      	adds	r3, r0, #1
    a6fe:	d1f3      	bne.n	a6e8 <__sfputs_r+0xa>
    a700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a704 <_vfiprintf_r>:
    a704:	b5f0      	push	{r4, r5, r6, r7, lr}
    a706:	b09f      	sub	sp, #124	; 0x7c
    a708:	0006      	movs	r6, r0
    a70a:	000f      	movs	r7, r1
    a70c:	0014      	movs	r4, r2
    a70e:	9305      	str	r3, [sp, #20]
    a710:	2800      	cmp	r0, #0
    a712:	d004      	beq.n	a71e <_vfiprintf_r+0x1a>
    a714:	6983      	ldr	r3, [r0, #24]
    a716:	2b00      	cmp	r3, #0
    a718:	d101      	bne.n	a71e <_vfiprintf_r+0x1a>
    a71a:	f7ff fec7 	bl	a4ac <__sinit>
    a71e:	4b7f      	ldr	r3, [pc, #508]	; (a91c <_vfiprintf_r+0x218>)
    a720:	429f      	cmp	r7, r3
    a722:	d15c      	bne.n	a7de <_vfiprintf_r+0xda>
    a724:	6877      	ldr	r7, [r6, #4]
    a726:	89bb      	ldrh	r3, [r7, #12]
    a728:	071b      	lsls	r3, r3, #28
    a72a:	d562      	bpl.n	a7f2 <_vfiprintf_r+0xee>
    a72c:	693b      	ldr	r3, [r7, #16]
    a72e:	2b00      	cmp	r3, #0
    a730:	d05f      	beq.n	a7f2 <_vfiprintf_r+0xee>
    a732:	2300      	movs	r3, #0
    a734:	ad06      	add	r5, sp, #24
    a736:	616b      	str	r3, [r5, #20]
    a738:	3320      	adds	r3, #32
    a73a:	766b      	strb	r3, [r5, #25]
    a73c:	3310      	adds	r3, #16
    a73e:	76ab      	strb	r3, [r5, #26]
    a740:	9402      	str	r4, [sp, #8]
    a742:	9c02      	ldr	r4, [sp, #8]
    a744:	7823      	ldrb	r3, [r4, #0]
    a746:	2b00      	cmp	r3, #0
    a748:	d15d      	bne.n	a806 <_vfiprintf_r+0x102>
    a74a:	9b02      	ldr	r3, [sp, #8]
    a74c:	1ae3      	subs	r3, r4, r3
    a74e:	9304      	str	r3, [sp, #16]
    a750:	d00d      	beq.n	a76e <_vfiprintf_r+0x6a>
    a752:	9b04      	ldr	r3, [sp, #16]
    a754:	9a02      	ldr	r2, [sp, #8]
    a756:	0039      	movs	r1, r7
    a758:	0030      	movs	r0, r6
    a75a:	f7ff ffc0 	bl	a6de <__sfputs_r>
    a75e:	1c43      	adds	r3, r0, #1
    a760:	d100      	bne.n	a764 <_vfiprintf_r+0x60>
    a762:	e0cc      	b.n	a8fe <_vfiprintf_r+0x1fa>
    a764:	696a      	ldr	r2, [r5, #20]
    a766:	9b04      	ldr	r3, [sp, #16]
    a768:	4694      	mov	ip, r2
    a76a:	4463      	add	r3, ip
    a76c:	616b      	str	r3, [r5, #20]
    a76e:	7823      	ldrb	r3, [r4, #0]
    a770:	2b00      	cmp	r3, #0
    a772:	d100      	bne.n	a776 <_vfiprintf_r+0x72>
    a774:	e0c3      	b.n	a8fe <_vfiprintf_r+0x1fa>
    a776:	2201      	movs	r2, #1
    a778:	2300      	movs	r3, #0
    a77a:	4252      	negs	r2, r2
    a77c:	606a      	str	r2, [r5, #4]
    a77e:	a902      	add	r1, sp, #8
    a780:	3254      	adds	r2, #84	; 0x54
    a782:	1852      	adds	r2, r2, r1
    a784:	3401      	adds	r4, #1
    a786:	602b      	str	r3, [r5, #0]
    a788:	60eb      	str	r3, [r5, #12]
    a78a:	60ab      	str	r3, [r5, #8]
    a78c:	7013      	strb	r3, [r2, #0]
    a78e:	65ab      	str	r3, [r5, #88]	; 0x58
    a790:	7821      	ldrb	r1, [r4, #0]
    a792:	2205      	movs	r2, #5
    a794:	4862      	ldr	r0, [pc, #392]	; (a920 <_vfiprintf_r+0x21c>)
    a796:	f000 fb03 	bl	ada0 <memchr>
    a79a:	1c63      	adds	r3, r4, #1
    a79c:	469c      	mov	ip, r3
    a79e:	2800      	cmp	r0, #0
    a7a0:	d135      	bne.n	a80e <_vfiprintf_r+0x10a>
    a7a2:	6829      	ldr	r1, [r5, #0]
    a7a4:	06cb      	lsls	r3, r1, #27
    a7a6:	d504      	bpl.n	a7b2 <_vfiprintf_r+0xae>
    a7a8:	2353      	movs	r3, #83	; 0x53
    a7aa:	aa02      	add	r2, sp, #8
    a7ac:	3020      	adds	r0, #32
    a7ae:	189b      	adds	r3, r3, r2
    a7b0:	7018      	strb	r0, [r3, #0]
    a7b2:	070b      	lsls	r3, r1, #28
    a7b4:	d504      	bpl.n	a7c0 <_vfiprintf_r+0xbc>
    a7b6:	2353      	movs	r3, #83	; 0x53
    a7b8:	202b      	movs	r0, #43	; 0x2b
    a7ba:	aa02      	add	r2, sp, #8
    a7bc:	189b      	adds	r3, r3, r2
    a7be:	7018      	strb	r0, [r3, #0]
    a7c0:	7823      	ldrb	r3, [r4, #0]
    a7c2:	2b2a      	cmp	r3, #42	; 0x2a
    a7c4:	d02c      	beq.n	a820 <_vfiprintf_r+0x11c>
    a7c6:	2000      	movs	r0, #0
    a7c8:	210a      	movs	r1, #10
    a7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7cc:	7822      	ldrb	r2, [r4, #0]
    a7ce:	3a30      	subs	r2, #48	; 0x30
    a7d0:	2a09      	cmp	r2, #9
    a7d2:	d800      	bhi.n	a7d6 <_vfiprintf_r+0xd2>
    a7d4:	e06b      	b.n	a8ae <_vfiprintf_r+0x1aa>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d02a      	beq.n	a830 <_vfiprintf_r+0x12c>
    a7da:	9309      	str	r3, [sp, #36]	; 0x24
    a7dc:	e028      	b.n	a830 <_vfiprintf_r+0x12c>
    a7de:	4b51      	ldr	r3, [pc, #324]	; (a924 <_vfiprintf_r+0x220>)
    a7e0:	429f      	cmp	r7, r3
    a7e2:	d101      	bne.n	a7e8 <_vfiprintf_r+0xe4>
    a7e4:	68b7      	ldr	r7, [r6, #8]
    a7e6:	e79e      	b.n	a726 <_vfiprintf_r+0x22>
    a7e8:	4b4f      	ldr	r3, [pc, #316]	; (a928 <_vfiprintf_r+0x224>)
    a7ea:	429f      	cmp	r7, r3
    a7ec:	d19b      	bne.n	a726 <_vfiprintf_r+0x22>
    a7ee:	68f7      	ldr	r7, [r6, #12]
    a7f0:	e799      	b.n	a726 <_vfiprintf_r+0x22>
    a7f2:	0039      	movs	r1, r7
    a7f4:	0030      	movs	r0, r6
    a7f6:	f7ff fceb 	bl	a1d0 <__swsetup_r>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d099      	beq.n	a732 <_vfiprintf_r+0x2e>
    a7fe:	2001      	movs	r0, #1
    a800:	4240      	negs	r0, r0
    a802:	b01f      	add	sp, #124	; 0x7c
    a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a806:	2b25      	cmp	r3, #37	; 0x25
    a808:	d09f      	beq.n	a74a <_vfiprintf_r+0x46>
    a80a:	3401      	adds	r4, #1
    a80c:	e79a      	b.n	a744 <_vfiprintf_r+0x40>
    a80e:	4b44      	ldr	r3, [pc, #272]	; (a920 <_vfiprintf_r+0x21c>)
    a810:	6829      	ldr	r1, [r5, #0]
    a812:	1ac0      	subs	r0, r0, r3
    a814:	2301      	movs	r3, #1
    a816:	4083      	lsls	r3, r0
    a818:	430b      	orrs	r3, r1
    a81a:	602b      	str	r3, [r5, #0]
    a81c:	4664      	mov	r4, ip
    a81e:	e7b7      	b.n	a790 <_vfiprintf_r+0x8c>
    a820:	9b05      	ldr	r3, [sp, #20]
    a822:	1d18      	adds	r0, r3, #4
    a824:	681b      	ldr	r3, [r3, #0]
    a826:	9005      	str	r0, [sp, #20]
    a828:	2b00      	cmp	r3, #0
    a82a:	db3a      	blt.n	a8a2 <_vfiprintf_r+0x19e>
    a82c:	9309      	str	r3, [sp, #36]	; 0x24
    a82e:	4664      	mov	r4, ip
    a830:	7823      	ldrb	r3, [r4, #0]
    a832:	2b2e      	cmp	r3, #46	; 0x2e
    a834:	d10b      	bne.n	a84e <_vfiprintf_r+0x14a>
    a836:	7863      	ldrb	r3, [r4, #1]
    a838:	1c62      	adds	r2, r4, #1
    a83a:	2b2a      	cmp	r3, #42	; 0x2a
    a83c:	d13f      	bne.n	a8be <_vfiprintf_r+0x1ba>
    a83e:	9b05      	ldr	r3, [sp, #20]
    a840:	3402      	adds	r4, #2
    a842:	1d1a      	adds	r2, r3, #4
    a844:	681b      	ldr	r3, [r3, #0]
    a846:	9205      	str	r2, [sp, #20]
    a848:	2b00      	cmp	r3, #0
    a84a:	db35      	blt.n	a8b8 <_vfiprintf_r+0x1b4>
    a84c:	9307      	str	r3, [sp, #28]
    a84e:	7821      	ldrb	r1, [r4, #0]
    a850:	2203      	movs	r2, #3
    a852:	4836      	ldr	r0, [pc, #216]	; (a92c <_vfiprintf_r+0x228>)
    a854:	f000 faa4 	bl	ada0 <memchr>
    a858:	2800      	cmp	r0, #0
    a85a:	d007      	beq.n	a86c <_vfiprintf_r+0x168>
    a85c:	4b33      	ldr	r3, [pc, #204]	; (a92c <_vfiprintf_r+0x228>)
    a85e:	682a      	ldr	r2, [r5, #0]
    a860:	1ac0      	subs	r0, r0, r3
    a862:	2340      	movs	r3, #64	; 0x40
    a864:	4083      	lsls	r3, r0
    a866:	4313      	orrs	r3, r2
    a868:	602b      	str	r3, [r5, #0]
    a86a:	3401      	adds	r4, #1
    a86c:	7821      	ldrb	r1, [r4, #0]
    a86e:	1c63      	adds	r3, r4, #1
    a870:	2206      	movs	r2, #6
    a872:	482f      	ldr	r0, [pc, #188]	; (a930 <_vfiprintf_r+0x22c>)
    a874:	9302      	str	r3, [sp, #8]
    a876:	7629      	strb	r1, [r5, #24]
    a878:	f000 fa92 	bl	ada0 <memchr>
    a87c:	2800      	cmp	r0, #0
    a87e:	d044      	beq.n	a90a <_vfiprintf_r+0x206>
    a880:	4b2c      	ldr	r3, [pc, #176]	; (a934 <_vfiprintf_r+0x230>)
    a882:	2b00      	cmp	r3, #0
    a884:	d12f      	bne.n	a8e6 <_vfiprintf_r+0x1e2>
    a886:	6829      	ldr	r1, [r5, #0]
    a888:	9b05      	ldr	r3, [sp, #20]
    a88a:	2207      	movs	r2, #7
    a88c:	05c9      	lsls	r1, r1, #23
    a88e:	d528      	bpl.n	a8e2 <_vfiprintf_r+0x1de>
    a890:	189b      	adds	r3, r3, r2
    a892:	4393      	bics	r3, r2
    a894:	3308      	adds	r3, #8
    a896:	9305      	str	r3, [sp, #20]
    a898:	696b      	ldr	r3, [r5, #20]
    a89a:	9a03      	ldr	r2, [sp, #12]
    a89c:	189b      	adds	r3, r3, r2
    a89e:	616b      	str	r3, [r5, #20]
    a8a0:	e74f      	b.n	a742 <_vfiprintf_r+0x3e>
    a8a2:	425b      	negs	r3, r3
    a8a4:	60eb      	str	r3, [r5, #12]
    a8a6:	2302      	movs	r3, #2
    a8a8:	430b      	orrs	r3, r1
    a8aa:	602b      	str	r3, [r5, #0]
    a8ac:	e7bf      	b.n	a82e <_vfiprintf_r+0x12a>
    a8ae:	434b      	muls	r3, r1
    a8b0:	3401      	adds	r4, #1
    a8b2:	189b      	adds	r3, r3, r2
    a8b4:	2001      	movs	r0, #1
    a8b6:	e789      	b.n	a7cc <_vfiprintf_r+0xc8>
    a8b8:	2301      	movs	r3, #1
    a8ba:	425b      	negs	r3, r3
    a8bc:	e7c6      	b.n	a84c <_vfiprintf_r+0x148>
    a8be:	2300      	movs	r3, #0
    a8c0:	0014      	movs	r4, r2
    a8c2:	200a      	movs	r0, #10
    a8c4:	001a      	movs	r2, r3
    a8c6:	606b      	str	r3, [r5, #4]
    a8c8:	7821      	ldrb	r1, [r4, #0]
    a8ca:	3930      	subs	r1, #48	; 0x30
    a8cc:	2909      	cmp	r1, #9
    a8ce:	d903      	bls.n	a8d8 <_vfiprintf_r+0x1d4>
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d0bc      	beq.n	a84e <_vfiprintf_r+0x14a>
    a8d4:	9207      	str	r2, [sp, #28]
    a8d6:	e7ba      	b.n	a84e <_vfiprintf_r+0x14a>
    a8d8:	4342      	muls	r2, r0
    a8da:	3401      	adds	r4, #1
    a8dc:	1852      	adds	r2, r2, r1
    a8de:	2301      	movs	r3, #1
    a8e0:	e7f2      	b.n	a8c8 <_vfiprintf_r+0x1c4>
    a8e2:	3307      	adds	r3, #7
    a8e4:	e7d5      	b.n	a892 <_vfiprintf_r+0x18e>
    a8e6:	ab05      	add	r3, sp, #20
    a8e8:	9300      	str	r3, [sp, #0]
    a8ea:	003a      	movs	r2, r7
    a8ec:	4b12      	ldr	r3, [pc, #72]	; (a938 <_vfiprintf_r+0x234>)
    a8ee:	0029      	movs	r1, r5
    a8f0:	0030      	movs	r0, r6
    a8f2:	e000      	b.n	a8f6 <_vfiprintf_r+0x1f2>
    a8f4:	bf00      	nop
    a8f6:	9003      	str	r0, [sp, #12]
    a8f8:	9b03      	ldr	r3, [sp, #12]
    a8fa:	3301      	adds	r3, #1
    a8fc:	d1cc      	bne.n	a898 <_vfiprintf_r+0x194>
    a8fe:	89bb      	ldrh	r3, [r7, #12]
    a900:	065b      	lsls	r3, r3, #25
    a902:	d500      	bpl.n	a906 <_vfiprintf_r+0x202>
    a904:	e77b      	b.n	a7fe <_vfiprintf_r+0xfa>
    a906:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a908:	e77b      	b.n	a802 <_vfiprintf_r+0xfe>
    a90a:	ab05      	add	r3, sp, #20
    a90c:	9300      	str	r3, [sp, #0]
    a90e:	003a      	movs	r2, r7
    a910:	4b09      	ldr	r3, [pc, #36]	; (a938 <_vfiprintf_r+0x234>)
    a912:	0029      	movs	r1, r5
    a914:	0030      	movs	r0, r6
    a916:	f000 f87f 	bl	aa18 <_printf_i>
    a91a:	e7ec      	b.n	a8f6 <_vfiprintf_r+0x1f2>
    a91c:	0000b5b0 	.word	0x0000b5b0
    a920:	0000b5f0 	.word	0x0000b5f0
    a924:	0000b5d0 	.word	0x0000b5d0
    a928:	0000b590 	.word	0x0000b590
    a92c:	0000b5f6 	.word	0x0000b5f6
    a930:	0000b5fa 	.word	0x0000b5fa
    a934:	00000000 	.word	0x00000000
    a938:	0000a6df 	.word	0x0000a6df

0000a93c <_printf_common>:
    a93c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a93e:	0015      	movs	r5, r2
    a940:	9301      	str	r3, [sp, #4]
    a942:	688a      	ldr	r2, [r1, #8]
    a944:	690b      	ldr	r3, [r1, #16]
    a946:	9000      	str	r0, [sp, #0]
    a948:	000c      	movs	r4, r1
    a94a:	4293      	cmp	r3, r2
    a94c:	da00      	bge.n	a950 <_printf_common+0x14>
    a94e:	0013      	movs	r3, r2
    a950:	0022      	movs	r2, r4
    a952:	602b      	str	r3, [r5, #0]
    a954:	3243      	adds	r2, #67	; 0x43
    a956:	7812      	ldrb	r2, [r2, #0]
    a958:	2a00      	cmp	r2, #0
    a95a:	d001      	beq.n	a960 <_printf_common+0x24>
    a95c:	3301      	adds	r3, #1
    a95e:	602b      	str	r3, [r5, #0]
    a960:	6823      	ldr	r3, [r4, #0]
    a962:	069b      	lsls	r3, r3, #26
    a964:	d502      	bpl.n	a96c <_printf_common+0x30>
    a966:	682b      	ldr	r3, [r5, #0]
    a968:	3302      	adds	r3, #2
    a96a:	602b      	str	r3, [r5, #0]
    a96c:	2706      	movs	r7, #6
    a96e:	6823      	ldr	r3, [r4, #0]
    a970:	401f      	ands	r7, r3
    a972:	d027      	beq.n	a9c4 <_printf_common+0x88>
    a974:	0023      	movs	r3, r4
    a976:	3343      	adds	r3, #67	; 0x43
    a978:	781b      	ldrb	r3, [r3, #0]
    a97a:	1e5a      	subs	r2, r3, #1
    a97c:	4193      	sbcs	r3, r2
    a97e:	6822      	ldr	r2, [r4, #0]
    a980:	0692      	lsls	r2, r2, #26
    a982:	d430      	bmi.n	a9e6 <_printf_common+0xaa>
    a984:	0022      	movs	r2, r4
    a986:	9901      	ldr	r1, [sp, #4]
    a988:	3243      	adds	r2, #67	; 0x43
    a98a:	9800      	ldr	r0, [sp, #0]
    a98c:	9e08      	ldr	r6, [sp, #32]
    a98e:	47b0      	blx	r6
    a990:	1c43      	adds	r3, r0, #1
    a992:	d025      	beq.n	a9e0 <_printf_common+0xa4>
    a994:	2306      	movs	r3, #6
    a996:	6820      	ldr	r0, [r4, #0]
    a998:	682a      	ldr	r2, [r5, #0]
    a99a:	68e1      	ldr	r1, [r4, #12]
    a99c:	4003      	ands	r3, r0
    a99e:	2500      	movs	r5, #0
    a9a0:	2b04      	cmp	r3, #4
    a9a2:	d103      	bne.n	a9ac <_printf_common+0x70>
    a9a4:	1a8d      	subs	r5, r1, r2
    a9a6:	43eb      	mvns	r3, r5
    a9a8:	17db      	asrs	r3, r3, #31
    a9aa:	401d      	ands	r5, r3
    a9ac:	68a3      	ldr	r3, [r4, #8]
    a9ae:	6922      	ldr	r2, [r4, #16]
    a9b0:	4293      	cmp	r3, r2
    a9b2:	dd01      	ble.n	a9b8 <_printf_common+0x7c>
    a9b4:	1a9b      	subs	r3, r3, r2
    a9b6:	18ed      	adds	r5, r5, r3
    a9b8:	2700      	movs	r7, #0
    a9ba:	42bd      	cmp	r5, r7
    a9bc:	d120      	bne.n	aa00 <_printf_common+0xc4>
    a9be:	2000      	movs	r0, #0
    a9c0:	e010      	b.n	a9e4 <_printf_common+0xa8>
    a9c2:	3701      	adds	r7, #1
    a9c4:	68e3      	ldr	r3, [r4, #12]
    a9c6:	682a      	ldr	r2, [r5, #0]
    a9c8:	1a9b      	subs	r3, r3, r2
    a9ca:	429f      	cmp	r7, r3
    a9cc:	dad2      	bge.n	a974 <_printf_common+0x38>
    a9ce:	0022      	movs	r2, r4
    a9d0:	2301      	movs	r3, #1
    a9d2:	3219      	adds	r2, #25
    a9d4:	9901      	ldr	r1, [sp, #4]
    a9d6:	9800      	ldr	r0, [sp, #0]
    a9d8:	9e08      	ldr	r6, [sp, #32]
    a9da:	47b0      	blx	r6
    a9dc:	1c43      	adds	r3, r0, #1
    a9de:	d1f0      	bne.n	a9c2 <_printf_common+0x86>
    a9e0:	2001      	movs	r0, #1
    a9e2:	4240      	negs	r0, r0
    a9e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a9e6:	2030      	movs	r0, #48	; 0x30
    a9e8:	18e1      	adds	r1, r4, r3
    a9ea:	3143      	adds	r1, #67	; 0x43
    a9ec:	7008      	strb	r0, [r1, #0]
    a9ee:	0021      	movs	r1, r4
    a9f0:	1c5a      	adds	r2, r3, #1
    a9f2:	3145      	adds	r1, #69	; 0x45
    a9f4:	7809      	ldrb	r1, [r1, #0]
    a9f6:	18a2      	adds	r2, r4, r2
    a9f8:	3243      	adds	r2, #67	; 0x43
    a9fa:	3302      	adds	r3, #2
    a9fc:	7011      	strb	r1, [r2, #0]
    a9fe:	e7c1      	b.n	a984 <_printf_common+0x48>
    aa00:	0022      	movs	r2, r4
    aa02:	2301      	movs	r3, #1
    aa04:	321a      	adds	r2, #26
    aa06:	9901      	ldr	r1, [sp, #4]
    aa08:	9800      	ldr	r0, [sp, #0]
    aa0a:	9e08      	ldr	r6, [sp, #32]
    aa0c:	47b0      	blx	r6
    aa0e:	1c43      	adds	r3, r0, #1
    aa10:	d0e6      	beq.n	a9e0 <_printf_common+0xa4>
    aa12:	3701      	adds	r7, #1
    aa14:	e7d1      	b.n	a9ba <_printf_common+0x7e>
	...

0000aa18 <_printf_i>:
    aa18:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa1a:	b08b      	sub	sp, #44	; 0x2c
    aa1c:	9206      	str	r2, [sp, #24]
    aa1e:	000a      	movs	r2, r1
    aa20:	3243      	adds	r2, #67	; 0x43
    aa22:	9307      	str	r3, [sp, #28]
    aa24:	9005      	str	r0, [sp, #20]
    aa26:	9204      	str	r2, [sp, #16]
    aa28:	7e0a      	ldrb	r2, [r1, #24]
    aa2a:	000c      	movs	r4, r1
    aa2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa2e:	2a6e      	cmp	r2, #110	; 0x6e
    aa30:	d100      	bne.n	aa34 <_printf_i+0x1c>
    aa32:	e08f      	b.n	ab54 <_printf_i+0x13c>
    aa34:	d817      	bhi.n	aa66 <_printf_i+0x4e>
    aa36:	2a63      	cmp	r2, #99	; 0x63
    aa38:	d02c      	beq.n	aa94 <_printf_i+0x7c>
    aa3a:	d808      	bhi.n	aa4e <_printf_i+0x36>
    aa3c:	2a00      	cmp	r2, #0
    aa3e:	d100      	bne.n	aa42 <_printf_i+0x2a>
    aa40:	e099      	b.n	ab76 <_printf_i+0x15e>
    aa42:	2a58      	cmp	r2, #88	; 0x58
    aa44:	d054      	beq.n	aaf0 <_printf_i+0xd8>
    aa46:	0026      	movs	r6, r4
    aa48:	3642      	adds	r6, #66	; 0x42
    aa4a:	7032      	strb	r2, [r6, #0]
    aa4c:	e029      	b.n	aaa2 <_printf_i+0x8a>
    aa4e:	2a64      	cmp	r2, #100	; 0x64
    aa50:	d001      	beq.n	aa56 <_printf_i+0x3e>
    aa52:	2a69      	cmp	r2, #105	; 0x69
    aa54:	d1f7      	bne.n	aa46 <_printf_i+0x2e>
    aa56:	6821      	ldr	r1, [r4, #0]
    aa58:	681a      	ldr	r2, [r3, #0]
    aa5a:	0608      	lsls	r0, r1, #24
    aa5c:	d523      	bpl.n	aaa6 <_printf_i+0x8e>
    aa5e:	1d11      	adds	r1, r2, #4
    aa60:	6019      	str	r1, [r3, #0]
    aa62:	6815      	ldr	r5, [r2, #0]
    aa64:	e025      	b.n	aab2 <_printf_i+0x9a>
    aa66:	2a73      	cmp	r2, #115	; 0x73
    aa68:	d100      	bne.n	aa6c <_printf_i+0x54>
    aa6a:	e088      	b.n	ab7e <_printf_i+0x166>
    aa6c:	d808      	bhi.n	aa80 <_printf_i+0x68>
    aa6e:	2a6f      	cmp	r2, #111	; 0x6f
    aa70:	d029      	beq.n	aac6 <_printf_i+0xae>
    aa72:	2a70      	cmp	r2, #112	; 0x70
    aa74:	d1e7      	bne.n	aa46 <_printf_i+0x2e>
    aa76:	2220      	movs	r2, #32
    aa78:	6809      	ldr	r1, [r1, #0]
    aa7a:	430a      	orrs	r2, r1
    aa7c:	6022      	str	r2, [r4, #0]
    aa7e:	e003      	b.n	aa88 <_printf_i+0x70>
    aa80:	2a75      	cmp	r2, #117	; 0x75
    aa82:	d020      	beq.n	aac6 <_printf_i+0xae>
    aa84:	2a78      	cmp	r2, #120	; 0x78
    aa86:	d1de      	bne.n	aa46 <_printf_i+0x2e>
    aa88:	0022      	movs	r2, r4
    aa8a:	2178      	movs	r1, #120	; 0x78
    aa8c:	3245      	adds	r2, #69	; 0x45
    aa8e:	7011      	strb	r1, [r2, #0]
    aa90:	4a6c      	ldr	r2, [pc, #432]	; (ac44 <_printf_i+0x22c>)
    aa92:	e030      	b.n	aaf6 <_printf_i+0xde>
    aa94:	000e      	movs	r6, r1
    aa96:	681a      	ldr	r2, [r3, #0]
    aa98:	3642      	adds	r6, #66	; 0x42
    aa9a:	1d11      	adds	r1, r2, #4
    aa9c:	6019      	str	r1, [r3, #0]
    aa9e:	6813      	ldr	r3, [r2, #0]
    aaa0:	7033      	strb	r3, [r6, #0]
    aaa2:	2301      	movs	r3, #1
    aaa4:	e079      	b.n	ab9a <_printf_i+0x182>
    aaa6:	0649      	lsls	r1, r1, #25
    aaa8:	d5d9      	bpl.n	aa5e <_printf_i+0x46>
    aaaa:	1d11      	adds	r1, r2, #4
    aaac:	6019      	str	r1, [r3, #0]
    aaae:	2300      	movs	r3, #0
    aab0:	5ed5      	ldrsh	r5, [r2, r3]
    aab2:	2d00      	cmp	r5, #0
    aab4:	da03      	bge.n	aabe <_printf_i+0xa6>
    aab6:	232d      	movs	r3, #45	; 0x2d
    aab8:	9a04      	ldr	r2, [sp, #16]
    aaba:	426d      	negs	r5, r5
    aabc:	7013      	strb	r3, [r2, #0]
    aabe:	4b62      	ldr	r3, [pc, #392]	; (ac48 <_printf_i+0x230>)
    aac0:	270a      	movs	r7, #10
    aac2:	9303      	str	r3, [sp, #12]
    aac4:	e02f      	b.n	ab26 <_printf_i+0x10e>
    aac6:	6820      	ldr	r0, [r4, #0]
    aac8:	6819      	ldr	r1, [r3, #0]
    aaca:	0605      	lsls	r5, r0, #24
    aacc:	d503      	bpl.n	aad6 <_printf_i+0xbe>
    aace:	1d08      	adds	r0, r1, #4
    aad0:	6018      	str	r0, [r3, #0]
    aad2:	680d      	ldr	r5, [r1, #0]
    aad4:	e005      	b.n	aae2 <_printf_i+0xca>
    aad6:	0640      	lsls	r0, r0, #25
    aad8:	d5f9      	bpl.n	aace <_printf_i+0xb6>
    aada:	680d      	ldr	r5, [r1, #0]
    aadc:	1d08      	adds	r0, r1, #4
    aade:	6018      	str	r0, [r3, #0]
    aae0:	b2ad      	uxth	r5, r5
    aae2:	4b59      	ldr	r3, [pc, #356]	; (ac48 <_printf_i+0x230>)
    aae4:	2708      	movs	r7, #8
    aae6:	9303      	str	r3, [sp, #12]
    aae8:	2a6f      	cmp	r2, #111	; 0x6f
    aaea:	d018      	beq.n	ab1e <_printf_i+0x106>
    aaec:	270a      	movs	r7, #10
    aaee:	e016      	b.n	ab1e <_printf_i+0x106>
    aaf0:	3145      	adds	r1, #69	; 0x45
    aaf2:	700a      	strb	r2, [r1, #0]
    aaf4:	4a54      	ldr	r2, [pc, #336]	; (ac48 <_printf_i+0x230>)
    aaf6:	9203      	str	r2, [sp, #12]
    aaf8:	681a      	ldr	r2, [r3, #0]
    aafa:	6821      	ldr	r1, [r4, #0]
    aafc:	1d10      	adds	r0, r2, #4
    aafe:	6018      	str	r0, [r3, #0]
    ab00:	6815      	ldr	r5, [r2, #0]
    ab02:	0608      	lsls	r0, r1, #24
    ab04:	d522      	bpl.n	ab4c <_printf_i+0x134>
    ab06:	07cb      	lsls	r3, r1, #31
    ab08:	d502      	bpl.n	ab10 <_printf_i+0xf8>
    ab0a:	2320      	movs	r3, #32
    ab0c:	4319      	orrs	r1, r3
    ab0e:	6021      	str	r1, [r4, #0]
    ab10:	2710      	movs	r7, #16
    ab12:	2d00      	cmp	r5, #0
    ab14:	d103      	bne.n	ab1e <_printf_i+0x106>
    ab16:	2320      	movs	r3, #32
    ab18:	6822      	ldr	r2, [r4, #0]
    ab1a:	439a      	bics	r2, r3
    ab1c:	6022      	str	r2, [r4, #0]
    ab1e:	0023      	movs	r3, r4
    ab20:	2200      	movs	r2, #0
    ab22:	3343      	adds	r3, #67	; 0x43
    ab24:	701a      	strb	r2, [r3, #0]
    ab26:	6863      	ldr	r3, [r4, #4]
    ab28:	60a3      	str	r3, [r4, #8]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	db5c      	blt.n	abe8 <_printf_i+0x1d0>
    ab2e:	2204      	movs	r2, #4
    ab30:	6821      	ldr	r1, [r4, #0]
    ab32:	4391      	bics	r1, r2
    ab34:	6021      	str	r1, [r4, #0]
    ab36:	2d00      	cmp	r5, #0
    ab38:	d158      	bne.n	abec <_printf_i+0x1d4>
    ab3a:	9e04      	ldr	r6, [sp, #16]
    ab3c:	2b00      	cmp	r3, #0
    ab3e:	d064      	beq.n	ac0a <_printf_i+0x1f2>
    ab40:	0026      	movs	r6, r4
    ab42:	9b03      	ldr	r3, [sp, #12]
    ab44:	3642      	adds	r6, #66	; 0x42
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	7033      	strb	r3, [r6, #0]
    ab4a:	e05e      	b.n	ac0a <_printf_i+0x1f2>
    ab4c:	0648      	lsls	r0, r1, #25
    ab4e:	d5da      	bpl.n	ab06 <_printf_i+0xee>
    ab50:	b2ad      	uxth	r5, r5
    ab52:	e7d8      	b.n	ab06 <_printf_i+0xee>
    ab54:	6809      	ldr	r1, [r1, #0]
    ab56:	681a      	ldr	r2, [r3, #0]
    ab58:	0608      	lsls	r0, r1, #24
    ab5a:	d505      	bpl.n	ab68 <_printf_i+0x150>
    ab5c:	1d11      	adds	r1, r2, #4
    ab5e:	6019      	str	r1, [r3, #0]
    ab60:	6813      	ldr	r3, [r2, #0]
    ab62:	6962      	ldr	r2, [r4, #20]
    ab64:	601a      	str	r2, [r3, #0]
    ab66:	e006      	b.n	ab76 <_printf_i+0x15e>
    ab68:	0649      	lsls	r1, r1, #25
    ab6a:	d5f7      	bpl.n	ab5c <_printf_i+0x144>
    ab6c:	1d11      	adds	r1, r2, #4
    ab6e:	6019      	str	r1, [r3, #0]
    ab70:	6813      	ldr	r3, [r2, #0]
    ab72:	8aa2      	ldrh	r2, [r4, #20]
    ab74:	801a      	strh	r2, [r3, #0]
    ab76:	2300      	movs	r3, #0
    ab78:	9e04      	ldr	r6, [sp, #16]
    ab7a:	6123      	str	r3, [r4, #16]
    ab7c:	e054      	b.n	ac28 <_printf_i+0x210>
    ab7e:	681a      	ldr	r2, [r3, #0]
    ab80:	1d11      	adds	r1, r2, #4
    ab82:	6019      	str	r1, [r3, #0]
    ab84:	6816      	ldr	r6, [r2, #0]
    ab86:	2100      	movs	r1, #0
    ab88:	6862      	ldr	r2, [r4, #4]
    ab8a:	0030      	movs	r0, r6
    ab8c:	f000 f908 	bl	ada0 <memchr>
    ab90:	2800      	cmp	r0, #0
    ab92:	d001      	beq.n	ab98 <_printf_i+0x180>
    ab94:	1b80      	subs	r0, r0, r6
    ab96:	6060      	str	r0, [r4, #4]
    ab98:	6863      	ldr	r3, [r4, #4]
    ab9a:	6123      	str	r3, [r4, #16]
    ab9c:	2300      	movs	r3, #0
    ab9e:	9a04      	ldr	r2, [sp, #16]
    aba0:	7013      	strb	r3, [r2, #0]
    aba2:	e041      	b.n	ac28 <_printf_i+0x210>
    aba4:	6923      	ldr	r3, [r4, #16]
    aba6:	0032      	movs	r2, r6
    aba8:	9906      	ldr	r1, [sp, #24]
    abaa:	9805      	ldr	r0, [sp, #20]
    abac:	9d07      	ldr	r5, [sp, #28]
    abae:	47a8      	blx	r5
    abb0:	1c43      	adds	r3, r0, #1
    abb2:	d043      	beq.n	ac3c <_printf_i+0x224>
    abb4:	6823      	ldr	r3, [r4, #0]
    abb6:	2500      	movs	r5, #0
    abb8:	079b      	lsls	r3, r3, #30
    abba:	d40f      	bmi.n	abdc <_printf_i+0x1c4>
    abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abbe:	68e0      	ldr	r0, [r4, #12]
    abc0:	4298      	cmp	r0, r3
    abc2:	da3d      	bge.n	ac40 <_printf_i+0x228>
    abc4:	0018      	movs	r0, r3
    abc6:	e03b      	b.n	ac40 <_printf_i+0x228>
    abc8:	0022      	movs	r2, r4
    abca:	2301      	movs	r3, #1
    abcc:	3219      	adds	r2, #25
    abce:	9906      	ldr	r1, [sp, #24]
    abd0:	9805      	ldr	r0, [sp, #20]
    abd2:	9e07      	ldr	r6, [sp, #28]
    abd4:	47b0      	blx	r6
    abd6:	1c43      	adds	r3, r0, #1
    abd8:	d030      	beq.n	ac3c <_printf_i+0x224>
    abda:	3501      	adds	r5, #1
    abdc:	68e3      	ldr	r3, [r4, #12]
    abde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    abe0:	1a9b      	subs	r3, r3, r2
    abe2:	429d      	cmp	r5, r3
    abe4:	dbf0      	blt.n	abc8 <_printf_i+0x1b0>
    abe6:	e7e9      	b.n	abbc <_printf_i+0x1a4>
    abe8:	2d00      	cmp	r5, #0
    abea:	d0a9      	beq.n	ab40 <_printf_i+0x128>
    abec:	9e04      	ldr	r6, [sp, #16]
    abee:	0028      	movs	r0, r5
    abf0:	0039      	movs	r1, r7
    abf2:	f7fd fbb7 	bl	8364 <__aeabi_uidivmod>
    abf6:	9b03      	ldr	r3, [sp, #12]
    abf8:	3e01      	subs	r6, #1
    abfa:	5c5b      	ldrb	r3, [r3, r1]
    abfc:	0028      	movs	r0, r5
    abfe:	7033      	strb	r3, [r6, #0]
    ac00:	0039      	movs	r1, r7
    ac02:	f7fd fb29 	bl	8258 <__udivsi3>
    ac06:	1e05      	subs	r5, r0, #0
    ac08:	d1f1      	bne.n	abee <_printf_i+0x1d6>
    ac0a:	2f08      	cmp	r7, #8
    ac0c:	d109      	bne.n	ac22 <_printf_i+0x20a>
    ac0e:	6823      	ldr	r3, [r4, #0]
    ac10:	07db      	lsls	r3, r3, #31
    ac12:	d506      	bpl.n	ac22 <_printf_i+0x20a>
    ac14:	6863      	ldr	r3, [r4, #4]
    ac16:	6922      	ldr	r2, [r4, #16]
    ac18:	4293      	cmp	r3, r2
    ac1a:	dc02      	bgt.n	ac22 <_printf_i+0x20a>
    ac1c:	2330      	movs	r3, #48	; 0x30
    ac1e:	3e01      	subs	r6, #1
    ac20:	7033      	strb	r3, [r6, #0]
    ac22:	9b04      	ldr	r3, [sp, #16]
    ac24:	1b9b      	subs	r3, r3, r6
    ac26:	6123      	str	r3, [r4, #16]
    ac28:	9b07      	ldr	r3, [sp, #28]
    ac2a:	aa09      	add	r2, sp, #36	; 0x24
    ac2c:	9300      	str	r3, [sp, #0]
    ac2e:	0021      	movs	r1, r4
    ac30:	9b06      	ldr	r3, [sp, #24]
    ac32:	9805      	ldr	r0, [sp, #20]
    ac34:	f7ff fe82 	bl	a93c <_printf_common>
    ac38:	1c43      	adds	r3, r0, #1
    ac3a:	d1b3      	bne.n	aba4 <_printf_i+0x18c>
    ac3c:	2001      	movs	r0, #1
    ac3e:	4240      	negs	r0, r0
    ac40:	b00b      	add	sp, #44	; 0x2c
    ac42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac44:	0000b612 	.word	0x0000b612
    ac48:	0000b601 	.word	0x0000b601

0000ac4c <__sread>:
    ac4c:	b570      	push	{r4, r5, r6, lr}
    ac4e:	000c      	movs	r4, r1
    ac50:	250e      	movs	r5, #14
    ac52:	5f49      	ldrsh	r1, [r1, r5]
    ac54:	f000 f8b0 	bl	adb8 <_read_r>
    ac58:	2800      	cmp	r0, #0
    ac5a:	db03      	blt.n	ac64 <__sread+0x18>
    ac5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ac5e:	181b      	adds	r3, r3, r0
    ac60:	6563      	str	r3, [r4, #84]	; 0x54
    ac62:	bd70      	pop	{r4, r5, r6, pc}
    ac64:	89a3      	ldrh	r3, [r4, #12]
    ac66:	4a02      	ldr	r2, [pc, #8]	; (ac70 <__sread+0x24>)
    ac68:	4013      	ands	r3, r2
    ac6a:	81a3      	strh	r3, [r4, #12]
    ac6c:	e7f9      	b.n	ac62 <__sread+0x16>
    ac6e:	46c0      	nop			; (mov r8, r8)
    ac70:	ffffefff 	.word	0xffffefff

0000ac74 <__swrite>:
    ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac76:	001f      	movs	r7, r3
    ac78:	898b      	ldrh	r3, [r1, #12]
    ac7a:	0005      	movs	r5, r0
    ac7c:	000c      	movs	r4, r1
    ac7e:	0016      	movs	r6, r2
    ac80:	05db      	lsls	r3, r3, #23
    ac82:	d505      	bpl.n	ac90 <__swrite+0x1c>
    ac84:	230e      	movs	r3, #14
    ac86:	5ec9      	ldrsh	r1, [r1, r3]
    ac88:	2200      	movs	r2, #0
    ac8a:	2302      	movs	r3, #2
    ac8c:	f000 f874 	bl	ad78 <_lseek_r>
    ac90:	89a3      	ldrh	r3, [r4, #12]
    ac92:	4a05      	ldr	r2, [pc, #20]	; (aca8 <__swrite+0x34>)
    ac94:	0028      	movs	r0, r5
    ac96:	4013      	ands	r3, r2
    ac98:	81a3      	strh	r3, [r4, #12]
    ac9a:	0032      	movs	r2, r6
    ac9c:	230e      	movs	r3, #14
    ac9e:	5ee1      	ldrsh	r1, [r4, r3]
    aca0:	003b      	movs	r3, r7
    aca2:	f000 f81f 	bl	ace4 <_write_r>
    aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aca8:	ffffefff 	.word	0xffffefff

0000acac <__sseek>:
    acac:	b570      	push	{r4, r5, r6, lr}
    acae:	000c      	movs	r4, r1
    acb0:	250e      	movs	r5, #14
    acb2:	5f49      	ldrsh	r1, [r1, r5]
    acb4:	f000 f860 	bl	ad78 <_lseek_r>
    acb8:	89a3      	ldrh	r3, [r4, #12]
    acba:	1c42      	adds	r2, r0, #1
    acbc:	d103      	bne.n	acc6 <__sseek+0x1a>
    acbe:	4a05      	ldr	r2, [pc, #20]	; (acd4 <__sseek+0x28>)
    acc0:	4013      	ands	r3, r2
    acc2:	81a3      	strh	r3, [r4, #12]
    acc4:	bd70      	pop	{r4, r5, r6, pc}
    acc6:	2280      	movs	r2, #128	; 0x80
    acc8:	0152      	lsls	r2, r2, #5
    acca:	4313      	orrs	r3, r2
    accc:	81a3      	strh	r3, [r4, #12]
    acce:	6560      	str	r0, [r4, #84]	; 0x54
    acd0:	e7f8      	b.n	acc4 <__sseek+0x18>
    acd2:	46c0      	nop			; (mov r8, r8)
    acd4:	ffffefff 	.word	0xffffefff

0000acd8 <__sclose>:
    acd8:	b510      	push	{r4, lr}
    acda:	230e      	movs	r3, #14
    acdc:	5ec9      	ldrsh	r1, [r1, r3]
    acde:	f000 f815 	bl	ad0c <_close_r>
    ace2:	bd10      	pop	{r4, pc}

0000ace4 <_write_r>:
    ace4:	b570      	push	{r4, r5, r6, lr}
    ace6:	0005      	movs	r5, r0
    ace8:	0008      	movs	r0, r1
    acea:	0011      	movs	r1, r2
    acec:	2200      	movs	r2, #0
    acee:	4c06      	ldr	r4, [pc, #24]	; (ad08 <_write_r+0x24>)
    acf0:	6022      	str	r2, [r4, #0]
    acf2:	001a      	movs	r2, r3
    acf4:	f7f7 f8c4 	bl	1e80 <_write>
    acf8:	1c43      	adds	r3, r0, #1
    acfa:	d103      	bne.n	ad04 <_write_r+0x20>
    acfc:	6823      	ldr	r3, [r4, #0]
    acfe:	2b00      	cmp	r3, #0
    ad00:	d000      	beq.n	ad04 <_write_r+0x20>
    ad02:	602b      	str	r3, [r5, #0]
    ad04:	bd70      	pop	{r4, r5, r6, pc}
    ad06:	46c0      	nop			; (mov r8, r8)
    ad08:	200003b4 	.word	0x200003b4

0000ad0c <_close_r>:
    ad0c:	2300      	movs	r3, #0
    ad0e:	b570      	push	{r4, r5, r6, lr}
    ad10:	4c06      	ldr	r4, [pc, #24]	; (ad2c <_close_r+0x20>)
    ad12:	0005      	movs	r5, r0
    ad14:	0008      	movs	r0, r1
    ad16:	6023      	str	r3, [r4, #0]
    ad18:	f7fd f86c 	bl	7df4 <_close>
    ad1c:	1c43      	adds	r3, r0, #1
    ad1e:	d103      	bne.n	ad28 <_close_r+0x1c>
    ad20:	6823      	ldr	r3, [r4, #0]
    ad22:	2b00      	cmp	r3, #0
    ad24:	d000      	beq.n	ad28 <_close_r+0x1c>
    ad26:	602b      	str	r3, [r5, #0]
    ad28:	bd70      	pop	{r4, r5, r6, pc}
    ad2a:	46c0      	nop			; (mov r8, r8)
    ad2c:	200003b4 	.word	0x200003b4

0000ad30 <_fstat_r>:
    ad30:	2300      	movs	r3, #0
    ad32:	b570      	push	{r4, r5, r6, lr}
    ad34:	4c06      	ldr	r4, [pc, #24]	; (ad50 <_fstat_r+0x20>)
    ad36:	0005      	movs	r5, r0
    ad38:	0008      	movs	r0, r1
    ad3a:	0011      	movs	r1, r2
    ad3c:	6023      	str	r3, [r4, #0]
    ad3e:	f7fd f863 	bl	7e08 <_fstat>
    ad42:	1c43      	adds	r3, r0, #1
    ad44:	d103      	bne.n	ad4e <_fstat_r+0x1e>
    ad46:	6823      	ldr	r3, [r4, #0]
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d000      	beq.n	ad4e <_fstat_r+0x1e>
    ad4c:	602b      	str	r3, [r5, #0]
    ad4e:	bd70      	pop	{r4, r5, r6, pc}
    ad50:	200003b4 	.word	0x200003b4

0000ad54 <_isatty_r>:
    ad54:	2300      	movs	r3, #0
    ad56:	b570      	push	{r4, r5, r6, lr}
    ad58:	4c06      	ldr	r4, [pc, #24]	; (ad74 <_isatty_r+0x20>)
    ad5a:	0005      	movs	r5, r0
    ad5c:	0008      	movs	r0, r1
    ad5e:	6023      	str	r3, [r4, #0]
    ad60:	f7fd f860 	bl	7e24 <_isatty>
    ad64:	1c43      	adds	r3, r0, #1
    ad66:	d103      	bne.n	ad70 <_isatty_r+0x1c>
    ad68:	6823      	ldr	r3, [r4, #0]
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d000      	beq.n	ad70 <_isatty_r+0x1c>
    ad6e:	602b      	str	r3, [r5, #0]
    ad70:	bd70      	pop	{r4, r5, r6, pc}
    ad72:	46c0      	nop			; (mov r8, r8)
    ad74:	200003b4 	.word	0x200003b4

0000ad78 <_lseek_r>:
    ad78:	b570      	push	{r4, r5, r6, lr}
    ad7a:	0005      	movs	r5, r0
    ad7c:	0008      	movs	r0, r1
    ad7e:	0011      	movs	r1, r2
    ad80:	2200      	movs	r2, #0
    ad82:	4c06      	ldr	r4, [pc, #24]	; (ad9c <_lseek_r+0x24>)
    ad84:	6022      	str	r2, [r4, #0]
    ad86:	001a      	movs	r2, r3
    ad88:	f7fd f855 	bl	7e36 <_lseek>
    ad8c:	1c43      	adds	r3, r0, #1
    ad8e:	d103      	bne.n	ad98 <_lseek_r+0x20>
    ad90:	6823      	ldr	r3, [r4, #0]
    ad92:	2b00      	cmp	r3, #0
    ad94:	d000      	beq.n	ad98 <_lseek_r+0x20>
    ad96:	602b      	str	r3, [r5, #0]
    ad98:	bd70      	pop	{r4, r5, r6, pc}
    ad9a:	46c0      	nop			; (mov r8, r8)
    ad9c:	200003b4 	.word	0x200003b4

0000ada0 <memchr>:
    ada0:	b2c9      	uxtb	r1, r1
    ada2:	1882      	adds	r2, r0, r2
    ada4:	4290      	cmp	r0, r2
    ada6:	d101      	bne.n	adac <memchr+0xc>
    ada8:	2000      	movs	r0, #0
    adaa:	4770      	bx	lr
    adac:	7803      	ldrb	r3, [r0, #0]
    adae:	428b      	cmp	r3, r1
    adb0:	d0fb      	beq.n	adaa <memchr+0xa>
    adb2:	3001      	adds	r0, #1
    adb4:	e7f6      	b.n	ada4 <memchr+0x4>
	...

0000adb8 <_read_r>:
    adb8:	b570      	push	{r4, r5, r6, lr}
    adba:	0005      	movs	r5, r0
    adbc:	0008      	movs	r0, r1
    adbe:	0011      	movs	r1, r2
    adc0:	2200      	movs	r2, #0
    adc2:	4c06      	ldr	r4, [pc, #24]	; (addc <_read_r+0x24>)
    adc4:	6022      	str	r2, [r4, #0]
    adc6:	001a      	movs	r2, r3
    adc8:	f7f7 f830 	bl	1e2c <_read>
    adcc:	1c43      	adds	r3, r0, #1
    adce:	d103      	bne.n	add8 <_read_r+0x20>
    add0:	6823      	ldr	r3, [r4, #0]
    add2:	2b00      	cmp	r3, #0
    add4:	d000      	beq.n	add8 <_read_r+0x20>
    add6:	602b      	str	r3, [r5, #0]
    add8:	bd70      	pop	{r4, r5, r6, pc}
    adda:	46c0      	nop			; (mov r8, r8)
    addc:	200003b4 	.word	0x200003b4
    ade0:	0000014c 	.word	0x0000014c
    ade4:	0000015a 	.word	0x0000015a
    ade8:	00000168 	.word	0x00000168
    adec:	00000176 	.word	0x00000176
    adf0:	00000184 	.word	0x00000184

0000adf4 <g_csr_template_3_device>:
    adf4:	30fb8130 0102a281 312f3000 06123014     0..0.....0/1.0..
    ae04:	0a045503 78450b0c 6c706d61 6e492065     .U....Example In
    ae14:	30173163 55030615 0e0c0304 6d617845     c1.0...U....Exam
    ae24:	20656c70 69766544 59306563 07061330     ple Device0Y0...
    ae34:	ce48862a 0601023d 48862a08 01033dce     *.H.=....*.H.=..
    ae44:	00420307 a470d804 6ab498df 40f72b93     ..B...p....j.+.@
    ae54:	ed0f8639 6a0369d6 9f84e4e7 5061fbfc     9....i.j......aP
    ae64:	a8952163 04982c91 032f9c0e c72ee4e1     c!...,..../.....
    ae74:	f46b8c93 504c98fb eea351db f0551b04     ..k...LP.Q....U.
    ae84:	46eb6360 3011a090 2a09060f f7864886     `c.F...0...*.H..
    ae94:	0e09010d 00300231 08060a30 ce48862a     ....1.0.0...*.H.
    aea4:	0203043d 30004803 26200245 714f8aab     =....H.0E. &..Oq
    aeb4:	4fbbf92c 01cda4fa 9cdff148 ffa0ffdc     ,..O....H.......
    aec4:	8d358f53 c0493dd4 020af572 9da50021     S.5..=I.r...!...
    aed4:	a14b11b4 48bb7c65 d0f66dcf 9600416a     ..K.e|.H.m..jA..
    aee4:	7379e2e1 8097f7db 01359b41 00005e88     ..ys....A.5..^..

0000aef4 <g_csr_def_3_device>:
    aef4:	00000300 0000070a 00000000 00030101     ................
    af04:	070000a5 00000100 00070040 00000000     ........@.......
    af14:	40005500 4a00b400 00000000 00000000     .U.@...J........
	...
    af38:	adf40000 00fe0000 6675625b 6f6f7420     ........[buf too
    af48:	616d7320 005d6c6c 61637461 65725f62      small].atcab_re
    af58:	735f6461 61697265 756e5f6c 7265626d     ad_serial_number
    af68:	66202928 656c6961 69772064 72206874     () failed with r
    af78:	303d7465 38302578 000a0d58 61637461     et=0x%08X...atca
    af88:	6e695f62 29286f66 69616620 2064656c     b_info() failed 
    af98:	68746977 74657220 2578303d 0d583830     with ret=0x%08X.
    afa8:	0000000a 70797243 44206f74 63697665     ....Crypto Devic
    afb8:	000d3a65 4e532020 2020203a 20202020     e:..  SN:       
    afc8:	25202020 000a0d73 65442020 76655276        %s...  DevRev
    afd8:	2020203a 25202020 000a0d73 666e6f63     :      %s...conf
    afe8:	255b6769 253d5d64 000a0d78 20656854     ig[%d]=%x...The 
    aff8:	70797243 75416f74 694c6874 696c2062     CryptoAuthLib li
    b008:	72617262 61662079 64656c69 206f7420     brary failed to 
    b018:	74696e69 696c6169 002e657a 20656854     initialize..The 
    b028:	43455441 38303543 65642041 65636976     ATECC508A device
    b038:	20736920 20746f6e 666e6f63 72756769      is not configur
    b048:	63206465 6572726f 796c7463 0000002e     ed correctly....
    b058:	20656854 43455441 38303543 65642041     The ATECC508A de
    b068:	65636976 74616420 6f7a2061 6920656e     vice data zone i
    b078:	6f6e2073 6e6f6320 75676966 2e646572     s no configured.
    b088:	00000d20 75700a0d 63696c62 79656b5f      .....public_key
    b098:	6542203a 0d6e6967 00000000 00007825     : Begin.....%x..
    b0a8:	75700a0d 63696c62 79656b5f 6e65203a     ..public_key: en
    b0b8:	00000d64 6c696166 74206465 6567206f     d...failed to ge
    b0c8:	43452074 75702043 654b2062 00000d79     t ECC pub Key...
    b0d8:	6c696166 74206465 6567206f 6172656e     failed to genera
    b0e8:	6b206574 70207965 0d726961 00000000     te key pair.....
    b0f8:	73630a0d 42203a72 6e696765 656c202c     ..csr: Begin, le
    b108:	6874676e 25203d20 000a0d64 78323025     ngth = %d...%02x
    b118:	00000000 73630a0d 65203a72 000d646e     ......csr: end..
    b128:	6c696166 74206465 6567206f 6172656e     failed to genera
    b138:	64206574 63697665 53432065 00000d52     te device CSR...
    b148:	00000c60 00000c6e 00000c7c 00000c8a     `...n...|.......
    b158:	00000c98 40030004                       .......@

0000b160 <k.4571>:
    b160:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    b170:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    b180:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    b190:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    b1a0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    b1b0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    b1c0:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    b1d0:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    b1e0:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    b1f0:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    b200:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    b210:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    b220:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    b230:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    b240:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    b250:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

0000b260 <hash_init.4603>:
    b260:	6a09e667 bb67ae85 3c6ef372 a54ff53a     g..j..g.r.n<:.O.
    b270:	510e527f 9b05688c 1f83d9ab 5be0cd19     .R.Q.h.........[
    b280:	00004cb4 00004cf8 00004cf8 00004cf8     .L...L...L...L..
    b290:	00004cf8 00004cf8 00004d54 00004d6a     .L...L..TM..jM..
    b2a0:	00004d6a 00004d6a 00004d6a 00004d6a     jM..jM..jM..jM..
    b2b0:	6b636170 73207465 20646e65 6f727265     packet send erro
    b2c0:	00000d72 6d6d6f63 20646e61 70736572     r...command resp
    b2d0:	65736e6f 72726520 000d726f 01100080     onse error......
    b2e0:	08000200 09000200 00050400 43331104     ..............3C
    b2f0:	00005030 00005048 0000505e 00005074     0P..HP..^P..tP..
    b300:	0000508a 000050a0 00005310 00005328     .P...P...S..(S..
    b310:	0000533e 00005354 0000536a 00005380     >S..TS..jS...S..

0000b320 <_tcc_intflag>:
    b320:	00000001 00000002 00000004 00000008     ................
    b330:	00001000 00002000 00004000 00008000     ..... ...@......
    b340:	00010000 00020000 00040000 00080000     ................
    b350:	000057e8 000057f6 00005804 00005812     .W...W...X...X..
    b360:	00005820 42000000 42000400 42000800      X.....B...B...B
    b370:	42000c00 42001000 43000400 0b0a0908     ...B...B...C....
    b380:	00000d0c 00006eda 00006f56 00006f56     .....n..Vo..Vo..
    b390:	00006efa 00006ef4 00006f00 00006ee0     .n...n...o...n..
    b3a0:	00006f06 00006f3c 00007210 0000726e     .o..<o...r..nr..
    b3b0:	0000726e 0000726a 00007202 00007222     nr..jr...r.."r..
    b3c0:	000071ee 00007230 00007242 000072ce     .q..0r..Br...r..
    b3d0:	0000731e 0000731e 0000731e 000072c0     .s...s...s...r..
    b3e0:	000072e0 000072ae 000072ee 00007308     .r...r...r...s..
    b3f0:	0000738e 000073f4 000073f4 000073f0     .s...s...s...s..
    b400:	00007376 000073a6 0000735e 000073be     vs...s..^s...s..
    b410:	000073d8 000076ec 000076fa 00007708     .s...v...v...w..
    b420:	00007716 00007724 766f7250 6f697369     .w..$w..Provisio
    b430:	4345206e 38303643 79726320 206f7470     n ECC608 crypto 
    b440:	69766564 000d6563 5f757063 71657266     device..cpu_freq
    b450:	0d64253d 0000000a 20656854 43455441     =%d.....The ATEC
    b460:	38303543 65642041 65636976 20736920     C508A device is 
    b470:	666e6f63 72756769 61206465 6c20646e     configured and l
    b480:	656b636f 000d2e64 6c696146 74206465     ocked...Failed t
    b490:	6567206f 68742074 43452065 75702043     o get the ECC pu
    b4a0:	654b2062 000d2e79 6c696146 74206465     b Key...Failed t
    b4b0:	6567206f 68742074 43452065 53432043     o get the ECC CS
    b4c0:	000d2e52 625f6d6e 695f7073 2e74696e     R...nm_bsp_init.
    b4d0:	0000000d 434e4957 20736920 64206e69     ....WINC is in d
    b4e0:	6c6e776f 2064616f 65646f6d 6f6e202c     ownload mode, no
    b4f0:	6f672077 646e6120 6e757220 65687420     w go and run the
    b500:	72637320 2e747069 0000000d 00008bdc      script.........
    b510:	00008bbe 00008b78 00008a96 00008b78     ....x.......x...
    b520:	00008bb0 00008b78 00008a96 00008bbe     ....x...........
    b530:	00008bbe 00008bb0 00008a96 00008a8e     ................
    b540:	00008a8e 00008a8e 00008df4 0000923c     ............<...
    b550:	000090fc 000090fc 000090f8 00009214     ................
    b560:	00009214 00009206 000090f8 00009214     ................
    b570:	00009206 00009214 000090f8 0000921c     ................
    b580:	0000921c 0000921c 00009420              ........ ...

0000b58c <_global_impure_ptr>:
    b58c:	200000a8                                ... 

0000b590 <__sf_fake_stderr>:
	...

0000b5b0 <__sf_fake_stdin>:
	...

0000b5d0 <__sf_fake_stdout>:
	...
    b5f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    b600:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    b610:	31300046 35343332 39383736 64636261     F.0123456789abcd
    b620:	00006665                                ef..

0000b624 <_init>:
    b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b62a:	bc08      	pop	{r3}
    b62c:	469e      	mov	lr, r3
    b62e:	4770      	bx	lr

0000b630 <__init_array_start>:
    b630:	000000dd 	.word	0x000000dd

0000b634 <_fini>:
    b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b636:	46c0      	nop			; (mov r8, r8)
    b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b63a:	bc08      	pop	{r3}
    b63c:	469e      	mov	lr, r3
    b63e:	4770      	bx	lr

0000b640 <__fini_array_start>:
    b640:	000000b5 	.word	0x000000b5
