
ECC608_provisioning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c888  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000188  20000000  0000c888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020188  2**0
                  CONTENTS
  3 .bss          000002e4  20000188  0000ca10  00020188  2**2
                  ALLOC
  4 .stack        00002004  2000046c  0000ccf4  00020188  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004b09b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000064bc  00000000  00000000  0006b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005fbe  00000000  00000000  00071760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001178  00000000  00000000  0007771e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f10  00000000  00000000  00078896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020f2b  00000000  00000000  000797a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018501  00000000  00000000  0009a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b20a  00000000  00000000  000b2bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000043a8  00000000  00000000  0014dddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 24 00 20 05 07 00 00 99 07 00 00 99 07 00 00     p$. ............
	...
      2c:	99 07 00 00 00 00 00 00 00 00 00 00 99 07 00 00     ................
      3c:	99 07 00 00 99 07 00 00 99 07 00 00 99 07 00 00     ................
      4c:	71 04 00 00 99 07 00 00 99 07 00 00 99 07 00 00     q...............
      5c:	99 07 00 00 b1 79 00 00 c9 79 00 00 e1 79 00 00     .....y...y...y..
      6c:	f9 79 00 00 11 7a 00 00 29 7a 00 00 01 67 00 00     .y...z..)z...g..
      7c:	15 67 00 00 29 67 00 00 99 07 00 00 99 07 00 00     .g..)g..........
	...
      94:	99 07 00 00 99 07 00 00 99 07 00 00 00 00 00 00     ................
      a4:	99 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000188 	.word	0x20000188
      d4:	00000000 	.word	0x00000000
      d8:	0000c888 	.word	0x0000c888

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000018c 	.word	0x2000018c
     108:	0000c888 	.word	0x0000c888
     10c:	0000c888 	.word	0x0000c888
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b04      	cmp	r3, #4
     140:	d827      	bhi.n	192 <system_apb_clock_set_mask+0x66>
     142:	009a      	lsls	r2, r3, #2
     144:	4b16      	ldr	r3, [pc, #88]	; (1a0 <system_apb_clock_set_mask+0x74>)
     146:	18d3      	adds	r3, r2, r3
     148:	681b      	ldr	r3, [r3, #0]
     14a:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     14c:	4b15      	ldr	r3, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     14e:	4a15      	ldr	r2, [pc, #84]	; (1a4 <system_apb_clock_set_mask+0x78>)
     150:	6951      	ldr	r1, [r2, #20]
     152:	683a      	ldr	r2, [r7, #0]
     154:	430a      	orrs	r2, r1
     156:	615a      	str	r2, [r3, #20]
			break;
     158:	e01d      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15c:	4a11      	ldr	r2, [pc, #68]	; (1a4 <system_apb_clock_set_mask+0x78>)
     15e:	6991      	ldr	r1, [r2, #24]
     160:	683a      	ldr	r2, [r7, #0]
     162:	430a      	orrs	r2, r1
     164:	619a      	str	r2, [r3, #24]
			break;
     166:	e016      	b.n	196 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     168:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16a:	4a0e      	ldr	r2, [pc, #56]	; (1a4 <system_apb_clock_set_mask+0x78>)
     16c:	69d1      	ldr	r1, [r2, #28]
     16e:	683a      	ldr	r2, [r7, #0]
     170:	430a      	orrs	r2, r1
     172:	61da      	str	r2, [r3, #28]
			break;
     174:	e00f      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     176:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <system_apb_clock_set_mask+0x78>)
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <system_apb_clock_set_mask+0x78>)
     17a:	6a11      	ldr	r1, [r2, #32]
     17c:	683a      	ldr	r2, [r7, #0]
     17e:	430a      	orrs	r2, r1
     180:	621a      	str	r2, [r3, #32]
			break;
     182:	e008      	b.n	196 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     184:	4b07      	ldr	r3, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     186:	4a07      	ldr	r2, [pc, #28]	; (1a4 <system_apb_clock_set_mask+0x78>)
     188:	6a51      	ldr	r1, [r2, #36]	; 0x24
     18a:	683a      	ldr	r2, [r7, #0]
     18c:	430a      	orrs	r2, r1
     18e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     190:	e001      	b.n	196 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     192:	2317      	movs	r3, #23
     194:	e000      	b.n	198 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     196:	2300      	movs	r3, #0
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b002      	add	sp, #8
     19e:	bd80      	pop	{r7, pc}
     1a0:	0000be2c 	.word	0x0000be2c
     1a4:	40000400 	.word	0x40000400

000001a8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <system_interrupt_enable+0x28>)
     1b6:	1dfa      	adds	r2, r7, #7
     1b8:	7812      	ldrb	r2, [r2, #0]
     1ba:	0011      	movs	r1, r2
     1bc:	221f      	movs	r2, #31
     1be:	400a      	ands	r2, r1
     1c0:	2101      	movs	r1, #1
     1c2:	4091      	lsls	r1, r2
     1c4:	000a      	movs	r2, r1
     1c6:	601a      	str	r2, [r3, #0]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}
     1d0:	e000e100 	.word	0xe000e100

000001d4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1da:	4b15      	ldr	r3, [pc, #84]	; (230 <extint_is_syncing+0x5c>)
     1dc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     1de:	2300      	movs	r3, #0
     1e0:	607b      	str	r3, [r7, #4]
     1e2:	e01c      	b.n	21e <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	009b      	lsls	r3, r3, #2
     1e8:	2208      	movs	r2, #8
     1ea:	4694      	mov	ip, r2
     1ec:	44bc      	add	ip, r7
     1ee:	4463      	add	r3, ip
     1f0:	3b08      	subs	r3, #8
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	685b      	ldr	r3, [r3, #4]
     1f6:	2202      	movs	r2, #2
     1f8:	4013      	ands	r3, r2
     1fa:	d10b      	bne.n	214 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	009b      	lsls	r3, r3, #2
     200:	2208      	movs	r2, #8
     202:	4694      	mov	ip, r2
     204:	44bc      	add	ip, r7
     206:	4463      	add	r3, ip
     208:	3b08      	subs	r3, #8
     20a:	681b      	ldr	r3, [r3, #0]
     20c:	685b      	ldr	r3, [r3, #4]
     20e:	2201      	movs	r2, #1
     210:	4013      	ands	r3, r2
     212:	d001      	beq.n	218 <extint_is_syncing+0x44>
			return true;
     214:	2301      	movs	r3, #1
     216:	e006      	b.n	226 <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     218:	687b      	ldr	r3, [r7, #4]
     21a:	3301      	adds	r3, #1
     21c:	607b      	str	r3, [r7, #4]
     21e:	687b      	ldr	r3, [r7, #4]
     220:	2b00      	cmp	r3, #0
     222:	d0df      	beq.n	1e4 <extint_is_syncing+0x10>
		}
	}
	return false;
     224:	2300      	movs	r3, #0
}
     226:	0018      	movs	r0, r3
     228:	46bd      	mov	sp, r7
     22a:	b002      	add	sp, #8
     22c:	bd80      	pop	{r7, pc}
     22e:	46c0      	nop			; (mov r8, r8)
     230:	40002400 	.word	0x40002400

00000234 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     234:	b580      	push	{r7, lr}
     236:	b086      	sub	sp, #24
     238:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     23a:	4b38      	ldr	r3, [pc, #224]	; (31c <_system_extint_init+0xe8>)
     23c:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
     23e:	2380      	movs	r3, #128	; 0x80
     240:	009b      	lsls	r3, r3, #2
     242:	0019      	movs	r1, r3
     244:	2000      	movs	r0, #0
     246:	4b36      	ldr	r3, [pc, #216]	; (320 <_system_extint_init+0xec>)
     248:	4798      	blx	r3

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     24a:	1d3b      	adds	r3, r7, #4
     24c:	0018      	movs	r0, r3
     24e:	4b35      	ldr	r3, [pc, #212]	; (324 <_system_extint_init+0xf0>)
     250:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     252:	1d3b      	adds	r3, r7, #4
     254:	2200      	movs	r2, #0
     256:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     258:	1d3b      	adds	r3, r7, #4
     25a:	0019      	movs	r1, r3
     25c:	2003      	movs	r0, #3
     25e:	4b32      	ldr	r3, [pc, #200]	; (328 <_system_extint_init+0xf4>)
     260:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     262:	2003      	movs	r0, #3
     264:	4b31      	ldr	r3, [pc, #196]	; (32c <_system_extint_init+0xf8>)
     266:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     268:	2300      	movs	r3, #0
     26a:	617b      	str	r3, [r7, #20]
     26c:	e018      	b.n	2a0 <_system_extint_init+0x6c>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     26e:	697b      	ldr	r3, [r7, #20]
     270:	009b      	lsls	r3, r3, #2
     272:	2218      	movs	r2, #24
     274:	4694      	mov	ip, r2
     276:	44bc      	add	ip, r7
     278:	4463      	add	r3, ip
     27a:	3b10      	subs	r3, #16
     27c:	681a      	ldr	r2, [r3, #0]
     27e:	697b      	ldr	r3, [r7, #20]
     280:	009b      	lsls	r3, r3, #2
     282:	2118      	movs	r1, #24
     284:	468c      	mov	ip, r1
     286:	44bc      	add	ip, r7
     288:	4463      	add	r3, ip
     28a:	3b10      	subs	r3, #16
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	b2db      	uxtb	r3, r3
     292:	2101      	movs	r1, #1
     294:	430b      	orrs	r3, r1
     296:	b2db      	uxtb	r3, r3
     298:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     29a:	697b      	ldr	r3, [r7, #20]
     29c:	3301      	adds	r3, #1
     29e:	617b      	str	r3, [r7, #20]
     2a0:	697b      	ldr	r3, [r7, #20]
     2a2:	2b00      	cmp	r3, #0
     2a4:	d0e3      	beq.n	26e <_system_extint_init+0x3a>
	}

	while (extint_is_syncing()) {
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	4b21      	ldr	r3, [pc, #132]	; (330 <_system_extint_init+0xfc>)
     2aa:	4798      	blx	r3
     2ac:	1e03      	subs	r3, r0, #0
     2ae:	d1fb      	bne.n	2a8 <_system_extint_init+0x74>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2b0:	2300      	movs	r3, #0
     2b2:	613b      	str	r3, [r7, #16]
     2b4:	e00e      	b.n	2d4 <_system_extint_init+0xa0>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     2b6:	693b      	ldr	r3, [r7, #16]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2218      	movs	r2, #24
     2bc:	4694      	mov	ip, r2
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b10      	subs	r3, #16
     2c4:	681a      	ldr	r2, [r3, #0]
     2c6:	7813      	ldrb	r3, [r2, #0]
     2c8:	2110      	movs	r1, #16
     2ca:	438b      	bics	r3, r1
     2cc:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2ce:	693b      	ldr	r3, [r7, #16]
     2d0:	3301      	adds	r3, #1
     2d2:	613b      	str	r3, [r7, #16]
     2d4:	693b      	ldr	r3, [r7, #16]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d0ed      	beq.n	2b6 <_system_extint_init+0x82>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2da:	230f      	movs	r3, #15
     2dc:	18fb      	adds	r3, r7, r3
     2de:	2200      	movs	r2, #0
     2e0:	701a      	strb	r2, [r3, #0]
     2e2:	e00d      	b.n	300 <_system_extint_init+0xcc>
		_extint_dev.callbacks[j] = NULL;
     2e4:	230f      	movs	r3, #15
     2e6:	18fb      	adds	r3, r7, r3
     2e8:	781a      	ldrb	r2, [r3, #0]
     2ea:	4b12      	ldr	r3, [pc, #72]	; (334 <_system_extint_init+0x100>)
     2ec:	0092      	lsls	r2, r2, #2
     2ee:	2100      	movs	r1, #0
     2f0:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2f2:	230f      	movs	r3, #15
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	230f      	movs	r3, #15
     2fa:	18fb      	adds	r3, r7, r3
     2fc:	3201      	adds	r2, #1
     2fe:	701a      	strb	r2, [r3, #0]
     300:	230f      	movs	r3, #15
     302:	18fb      	adds	r3, r7, r3
     304:	781b      	ldrb	r3, [r3, #0]
     306:	2b0f      	cmp	r3, #15
     308:	d9ec      	bls.n	2e4 <_system_extint_init+0xb0>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     30a:	2003      	movs	r0, #3
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <_system_extint_init+0x104>)
     30e:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     310:	4b0a      	ldr	r3, [pc, #40]	; (33c <_system_extint_init+0x108>)
     312:	4798      	blx	r3
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b006      	add	sp, #24
     31a:	bd80      	pop	{r7, pc}
     31c:	40002400 	.word	0x40002400
     320:	0000012d 	.word	0x0000012d
     324:	00000115 	.word	0x00000115
     328:	00008a11 	.word	0x00008a11
     32c:	00008a51 	.word	0x00008a51
     330:	000001d5 	.word	0x000001d5
     334:	2000036c 	.word	0x2000036c
     338:	000001a9 	.word	0x000001a9
     33c:	00000341 	.word	0x00000341

00000340 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     346:	4b15      	ldr	r3, [pc, #84]	; (39c <_extint_enable+0x5c>)
     348:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34a:	2300      	movs	r3, #0
     34c:	607b      	str	r3, [r7, #4]
     34e:	e018      	b.n	382 <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     350:	687b      	ldr	r3, [r7, #4]
     352:	009b      	lsls	r3, r3, #2
     354:	2208      	movs	r2, #8
     356:	4694      	mov	ip, r2
     358:	44bc      	add	ip, r7
     35a:	4463      	add	r3, ip
     35c:	3b08      	subs	r3, #8
     35e:	681a      	ldr	r2, [r3, #0]
     360:	687b      	ldr	r3, [r7, #4]
     362:	009b      	lsls	r3, r3, #2
     364:	2108      	movs	r1, #8
     366:	468c      	mov	ip, r1
     368:	44bc      	add	ip, r7
     36a:	4463      	add	r3, ip
     36c:	3b08      	subs	r3, #8
     36e:	681b      	ldr	r3, [r3, #0]
     370:	781b      	ldrb	r3, [r3, #0]
     372:	b2db      	uxtb	r3, r3
     374:	2102      	movs	r1, #2
     376:	430b      	orrs	r3, r1
     378:	b2db      	uxtb	r3, r3
     37a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	3301      	adds	r3, #1
     380:	607b      	str	r3, [r7, #4]
     382:	687b      	ldr	r3, [r7, #4]
     384:	2b00      	cmp	r3, #0
     386:	d0e3      	beq.n	350 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     388:	46c0      	nop			; (mov r8, r8)
     38a:	4b05      	ldr	r3, [pc, #20]	; (3a0 <_extint_enable+0x60>)
     38c:	4798      	blx	r3
     38e:	1e03      	subs	r3, r0, #0
     390:	d1fb      	bne.n	38a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     392:	46c0      	nop			; (mov r8, r8)
     394:	46bd      	mov	sp, r7
     396:	b002      	add	sp, #8
     398:	bd80      	pop	{r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	40002400 	.word	0x40002400
     3a0:	000001d5 	.word	0x000001d5

000003a4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	b084      	sub	sp, #16
     3a8:	af00      	add	r7, sp, #0
     3aa:	0002      	movs	r2, r0
     3ac:	1dfb      	adds	r3, r7, #7
     3ae:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     3b0:	230f      	movs	r3, #15
     3b2:	18fb      	adds	r3, r7, r3
     3b4:	1dfa      	adds	r2, r7, #7
     3b6:	7812      	ldrb	r2, [r2, #0]
     3b8:	0952      	lsrs	r2, r2, #5
     3ba:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     3bc:	230f      	movs	r3, #15
     3be:	18fb      	adds	r3, r7, r3
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d10c      	bne.n	3e0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3c6:	4b09      	ldr	r3, [pc, #36]	; (3ec <_extint_get_eic_from_channel+0x48>)
     3c8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     3ca:	230f      	movs	r3, #15
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	009b      	lsls	r3, r3, #2
     3d2:	2210      	movs	r2, #16
     3d4:	4694      	mov	ip, r2
     3d6:	44bc      	add	ip, r7
     3d8:	4463      	add	r3, ip
     3da:	3b08      	subs	r3, #8
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	e000      	b.n	3e2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     3e0:	2300      	movs	r3, #0
	}
}
     3e2:	0018      	movs	r0, r3
     3e4:	46bd      	mov	sp, r7
     3e6:	b004      	add	sp, #16
     3e8:	bd80      	pop	{r7, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	40002400 	.word	0x40002400

000003f0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b084      	sub	sp, #16
     3f4:	af00      	add	r7, sp, #0
     3f6:	0002      	movs	r2, r0
     3f8:	1dfb      	adds	r3, r7, #7
     3fa:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     3fc:	1dfb      	adds	r3, r7, #7
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	0018      	movs	r0, r3
     402:	4b0b      	ldr	r3, [pc, #44]	; (430 <extint_chan_is_detected+0x40>)
     404:	4798      	blx	r3
     406:	0003      	movs	r3, r0
     408:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     40a:	1dfb      	adds	r3, r7, #7
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	221f      	movs	r2, #31
     410:	4013      	ands	r3, r2
     412:	2201      	movs	r2, #1
     414:	409a      	lsls	r2, r3
     416:	0013      	movs	r3, r2
     418:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     41a:	68fb      	ldr	r3, [r7, #12]
     41c:	695b      	ldr	r3, [r3, #20]
     41e:	68ba      	ldr	r2, [r7, #8]
     420:	4013      	ands	r3, r2
     422:	1e5a      	subs	r2, r3, #1
     424:	4193      	sbcs	r3, r2
     426:	b2db      	uxtb	r3, r3
}
     428:	0018      	movs	r0, r3
     42a:	46bd      	mov	sp, r7
     42c:	b004      	add	sp, #16
     42e:	bd80      	pop	{r7, pc}
     430:	000003a5 	.word	0x000003a5

00000434 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     434:	b580      	push	{r7, lr}
     436:	b084      	sub	sp, #16
     438:	af00      	add	r7, sp, #0
     43a:	0002      	movs	r2, r0
     43c:	1dfb      	adds	r3, r7, #7
     43e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     440:	1dfb      	adds	r3, r7, #7
     442:	781b      	ldrb	r3, [r3, #0]
     444:	0018      	movs	r0, r3
     446:	4b09      	ldr	r3, [pc, #36]	; (46c <extint_chan_clear_detected+0x38>)
     448:	4798      	blx	r3
     44a:	0003      	movs	r3, r0
     44c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     44e:	1dfb      	adds	r3, r7, #7
     450:	781b      	ldrb	r3, [r3, #0]
     452:	221f      	movs	r2, #31
     454:	4013      	ands	r3, r2
     456:	2201      	movs	r2, #1
     458:	409a      	lsls	r2, r3
     45a:	0013      	movs	r3, r2
     45c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	68ba      	ldr	r2, [r7, #8]
     462:	615a      	str	r2, [r3, #20]
}
     464:	46c0      	nop			; (mov r8, r8)
     466:	46bd      	mov	sp, r7
     468:	b004      	add	sp, #16
     46a:	bd80      	pop	{r7, pc}
     46c:	000003a5 	.word	0x000003a5

00000470 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     470:	b580      	push	{r7, lr}
     472:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     474:	4b15      	ldr	r3, [pc, #84]	; (4cc <EIC_Handler+0x5c>)
     476:	2200      	movs	r2, #0
     478:	701a      	strb	r2, [r3, #0]
     47a:	e020      	b.n	4be <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     47c:	4b13      	ldr	r3, [pc, #76]	; (4cc <EIC_Handler+0x5c>)
     47e:	781b      	ldrb	r3, [r3, #0]
     480:	0018      	movs	r0, r3
     482:	4b13      	ldr	r3, [pc, #76]	; (4d0 <EIC_Handler+0x60>)
     484:	4798      	blx	r3
     486:	1e03      	subs	r3, r0, #0
     488:	d013      	beq.n	4b2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     48a:	4b10      	ldr	r3, [pc, #64]	; (4cc <EIC_Handler+0x5c>)
     48c:	781b      	ldrb	r3, [r3, #0]
     48e:	0018      	movs	r0, r3
     490:	4b10      	ldr	r3, [pc, #64]	; (4d4 <EIC_Handler+0x64>)
     492:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     494:	4b0d      	ldr	r3, [pc, #52]	; (4cc <EIC_Handler+0x5c>)
     496:	781b      	ldrb	r3, [r3, #0]
     498:	001a      	movs	r2, r3
     49a:	4b0f      	ldr	r3, [pc, #60]	; (4d8 <EIC_Handler+0x68>)
     49c:	0092      	lsls	r2, r2, #2
     49e:	58d3      	ldr	r3, [r2, r3]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d006      	beq.n	4b2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     4a4:	4b09      	ldr	r3, [pc, #36]	; (4cc <EIC_Handler+0x5c>)
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	001a      	movs	r2, r3
     4aa:	4b0b      	ldr	r3, [pc, #44]	; (4d8 <EIC_Handler+0x68>)
     4ac:	0092      	lsls	r2, r2, #2
     4ae:	58d3      	ldr	r3, [r2, r3]
     4b0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4b2:	4b06      	ldr	r3, [pc, #24]	; (4cc <EIC_Handler+0x5c>)
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	3301      	adds	r3, #1
     4b8:	b2da      	uxtb	r2, r3
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <EIC_Handler+0x5c>)
     4bc:	701a      	strb	r2, [r3, #0]
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <EIC_Handler+0x5c>)
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b0f      	cmp	r3, #15
     4c4:	d9da      	bls.n	47c <EIC_Handler+0xc>
			}
		}
	}
}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	46bd      	mov	sp, r7
     4ca:	bd80      	pop	{r7, pc}
     4cc:	200003ac 	.word	0x200003ac
     4d0:	000003f1 	.word	0x000003f1
     4d4:	00000435 	.word	0x00000435
     4d8:	2000036c 	.word	0x2000036c

000004dc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b084      	sub	sp, #16
     4e0:	af00      	add	r7, sp, #0
     4e2:	0002      	movs	r2, r0
     4e4:	1dfb      	adds	r3, r7, #7
     4e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4e8:	230f      	movs	r3, #15
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	1dfa      	adds	r2, r7, #7
     4ee:	7812      	ldrb	r2, [r2, #0]
     4f0:	09d2      	lsrs	r2, r2, #7
     4f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4f4:	230e      	movs	r3, #14
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	1dfa      	adds	r2, r7, #7
     4fa:	7812      	ldrb	r2, [r2, #0]
     4fc:	0952      	lsrs	r2, r2, #5
     4fe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     502:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     504:	230f      	movs	r3, #15
     506:	18fb      	adds	r3, r7, r3
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d10f      	bne.n	52e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     50e:	230f      	movs	r3, #15
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	009b      	lsls	r3, r3, #2
     516:	2210      	movs	r2, #16
     518:	4694      	mov	ip, r2
     51a:	44bc      	add	ip, r7
     51c:	4463      	add	r3, ip
     51e:	3b08      	subs	r3, #8
     520:	681a      	ldr	r2, [r3, #0]
     522:	230e      	movs	r3, #14
     524:	18fb      	adds	r3, r7, r3
     526:	781b      	ldrb	r3, [r3, #0]
     528:	01db      	lsls	r3, r3, #7
     52a:	18d3      	adds	r3, r2, r3
     52c:	e000      	b.n	530 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     52e:	2300      	movs	r3, #0
	}
}
     530:	0018      	movs	r0, r3
     532:	46bd      	mov	sp, r7
     534:	b004      	add	sp, #16
     536:	bd80      	pop	{r7, pc}
     538:	40002800 	.word	0x40002800

0000053c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     53c:	b580      	push	{r7, lr}
     53e:	b082      	sub	sp, #8
     540:	af00      	add	r7, sp, #0
     542:	0002      	movs	r2, r0
     544:	1dfb      	adds	r3, r7, #7
     546:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     548:	1dfb      	adds	r3, r7, #7
     54a:	781b      	ldrb	r3, [r3, #0]
     54c:	0018      	movs	r0, r3
     54e:	4b03      	ldr	r3, [pc, #12]	; (55c <port_get_group_from_gpio_pin+0x20>)
     550:	4798      	blx	r3
     552:	0003      	movs	r3, r0
}
     554:	0018      	movs	r0, r3
     556:	46bd      	mov	sp, r7
     558:	b002      	add	sp, #8
     55a:	bd80      	pop	{r7, pc}
     55c:	000004dd 	.word	0x000004dd

00000560 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     560:	b580      	push	{r7, lr}
     562:	b082      	sub	sp, #8
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     568:	687b      	ldr	r3, [r7, #4]
     56a:	2200      	movs	r2, #0
     56c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     56e:	687b      	ldr	r3, [r7, #4]
     570:	2201      	movs	r2, #1
     572:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     574:	687b      	ldr	r3, [r7, #4]
     576:	2200      	movs	r2, #0
     578:	709a      	strb	r2, [r3, #2]
}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	46bd      	mov	sp, r7
     57e:	b002      	add	sp, #8
     580:	bd80      	pop	{r7, pc}
	...

00000584 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     584:	b580      	push	{r7, lr}
     586:	b084      	sub	sp, #16
     588:	af00      	add	r7, sp, #0
     58a:	0002      	movs	r2, r0
     58c:	1dfb      	adds	r3, r7, #7
     58e:	701a      	strb	r2, [r3, #0]
     590:	1dbb      	adds	r3, r7, #6
     592:	1c0a      	adds	r2, r1, #0
     594:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     596:	1dfb      	adds	r3, r7, #7
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	0018      	movs	r0, r3
     59c:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <port_pin_set_output_level+0x50>)
     59e:	4798      	blx	r3
     5a0:	0003      	movs	r3, r0
     5a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5a4:	1dfb      	adds	r3, r7, #7
     5a6:	781b      	ldrb	r3, [r3, #0]
     5a8:	221f      	movs	r2, #31
     5aa:	4013      	ands	r3, r2
     5ac:	2201      	movs	r2, #1
     5ae:	409a      	lsls	r2, r3
     5b0:	0013      	movs	r3, r2
     5b2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     5b4:	1dbb      	adds	r3, r7, #6
     5b6:	781b      	ldrb	r3, [r3, #0]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d003      	beq.n	5c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5bc:	68fb      	ldr	r3, [r7, #12]
     5be:	68ba      	ldr	r2, [r7, #8]
     5c0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     5c2:	e002      	b.n	5ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	68ba      	ldr	r2, [r7, #8]
     5c8:	615a      	str	r2, [r3, #20]
}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	0000053d 	.word	0x0000053d

000005d8 <system_interrupt_enable_global>:
{
     5d8:	b580      	push	{r7, lr}
     5da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <system_interrupt_enable_global+0x18>)
     5de:	2201      	movs	r2, #1
     5e0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     5e6:	b662      	cpsie	i
}
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	46bd      	mov	sp, r7
     5ec:	bd80      	pop	{r7, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	20000122 	.word	0x20000122

000005f4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     5f4:	b580      	push	{r7, lr}
     5f6:	b082      	sub	sp, #8
     5f8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     5fa:	1d3b      	adds	r3, r7, #4
     5fc:	0018      	movs	r0, r3
     5fe:	4b10      	ldr	r3, [pc, #64]	; (640 <init_chip_pins+0x4c>)
     600:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     602:	1d3b      	adds	r3, r7, #4
     604:	2201      	movs	r2, #1
     606:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     608:	1d3b      	adds	r3, r7, #4
     60a:	0019      	movs	r1, r3
     60c:	200d      	movs	r0, #13
     60e:	4b0d      	ldr	r3, [pc, #52]	; (644 <init_chip_pins+0x50>)
     610:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     612:	1d3b      	adds	r3, r7, #4
     614:	0019      	movs	r1, r3
     616:	2017      	movs	r0, #23
     618:	4b0a      	ldr	r3, [pc, #40]	; (644 <init_chip_pins+0x50>)
     61a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     61c:	1d3b      	adds	r3, r7, #4
     61e:	0019      	movs	r1, r3
     620:	201c      	movs	r0, #28
     622:	4b08      	ldr	r3, [pc, #32]	; (644 <init_chip_pins+0x50>)
     624:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     626:	2100      	movs	r1, #0
     628:	2017      	movs	r0, #23
     62a:	4b07      	ldr	r3, [pc, #28]	; (648 <init_chip_pins+0x54>)
     62c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     62e:	2100      	movs	r1, #0
     630:	200d      	movs	r0, #13
     632:	4b05      	ldr	r3, [pc, #20]	; (648 <init_chip_pins+0x54>)
     634:	4798      	blx	r3
}
     636:	46c0      	nop			; (mov r8, r8)
     638:	46bd      	mov	sp, r7
     63a:	b002      	add	sp, #8
     63c:	bd80      	pop	{r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	00000561 	.word	0x00000561
     644:	00007a69 	.word	0x00007a69
     648:	00000585 	.word	0x00000585

0000064c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     64c:	b580      	push	{r7, lr}
     64e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     650:	4b0c      	ldr	r3, [pc, #48]	; (684 <nm_bsp_init+0x38>)
     652:	2200      	movs	r2, #0
     654:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     656:	4b0c      	ldr	r3, [pc, #48]	; (688 <nm_bsp_init+0x3c>)
     658:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     65a:	4b0c      	ldr	r3, [pc, #48]	; (68c <nm_bsp_init+0x40>)
     65c:	681b      	ldr	r3, [r3, #0]
     65e:	2201      	movs	r2, #1
     660:	4013      	ands	r3, r2
     662:	d004      	beq.n	66e <nm_bsp_init+0x22>
     664:	4b09      	ldr	r3, [pc, #36]	; (68c <nm_bsp_init+0x40>)
     666:	681b      	ldr	r3, [r3, #0]
     668:	2202      	movs	r2, #2
     66a:	4013      	ands	r3, r2
     66c:	d101      	bne.n	672 <nm_bsp_init+0x26>
	    delay_init();
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <nm_bsp_init+0x44>)
     670:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     672:	4b08      	ldr	r3, [pc, #32]	; (694 <nm_bsp_init+0x48>)
     674:	4798      	blx	r3

	system_interrupt_enable_global();
     676:	4b08      	ldr	r3, [pc, #32]	; (698 <nm_bsp_init+0x4c>)
     678:	4798      	blx	r3

	return M2M_SUCCESS;
     67a:	2300      	movs	r3, #0
}
     67c:	0018      	movs	r0, r3
     67e:	46bd      	mov	sp, r7
     680:	bd80      	pop	{r7, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	200001a4 	.word	0x200001a4
     688:	000005f5 	.word	0x000005f5
     68c:	e000e010 	.word	0xe000e010
     690:	00000ed1 	.word	0x00000ed1
     694:	0000069d 	.word	0x0000069d
     698:	000005d9 	.word	0x000005d9

0000069c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     69c:	b580      	push	{r7, lr}
     69e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     6a0:	2100      	movs	r1, #0
     6a2:	2017      	movs	r0, #23
     6a4:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <nm_bsp_reset+0x38>)
     6a6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     6a8:	2100      	movs	r1, #0
     6aa:	200d      	movs	r0, #13
     6ac:	4b09      	ldr	r3, [pc, #36]	; (6d4 <nm_bsp_reset+0x38>)
     6ae:	4798      	blx	r3
	nm_bsp_sleep(1);
     6b0:	2001      	movs	r0, #1
     6b2:	4b09      	ldr	r3, [pc, #36]	; (6d8 <nm_bsp_reset+0x3c>)
     6b4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     6b6:	2101      	movs	r1, #1
     6b8:	2017      	movs	r0, #23
     6ba:	4b06      	ldr	r3, [pc, #24]	; (6d4 <nm_bsp_reset+0x38>)
     6bc:	4798      	blx	r3
	nm_bsp_sleep(10);
     6be:	200a      	movs	r0, #10
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <nm_bsp_reset+0x3c>)
     6c2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     6c4:	2101      	movs	r1, #1
     6c6:	200d      	movs	r0, #13
     6c8:	4b02      	ldr	r3, [pc, #8]	; (6d4 <nm_bsp_reset+0x38>)
     6ca:	4798      	blx	r3
}
     6cc:	46c0      	nop			; (mov r8, r8)
     6ce:	46bd      	mov	sp, r7
     6d0:	bd80      	pop	{r7, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000585 	.word	0x00000585
     6d8:	000006dd 	.word	0x000006dd

000006dc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     6dc:	b580      	push	{r7, lr}
     6de:	b082      	sub	sp, #8
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     6e4:	e002      	b.n	6ec <nm_bsp_sleep+0x10>
		delay_ms(1);
     6e6:	2001      	movs	r0, #1
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <nm_bsp_sleep+0x24>)
     6ea:	4798      	blx	r3
	while (u32TimeMsec--) {
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	1e5a      	subs	r2, r3, #1
     6f0:	607a      	str	r2, [r7, #4]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d1f7      	bne.n	6e6 <nm_bsp_sleep+0xa>
	}
}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	46bd      	mov	sp, r7
     6fa:	b002      	add	sp, #8
     6fc:	bd80      	pop	{r7, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	00000f59 	.word	0x00000f59

00000704 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     704:	b580      	push	{r7, lr}
     706:	b082      	sub	sp, #8
     708:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     70a:	4b19      	ldr	r3, [pc, #100]	; (770 <Reset_Handler+0x6c>)
     70c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     70e:	4b19      	ldr	r3, [pc, #100]	; (774 <Reset_Handler+0x70>)
     710:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     712:	687a      	ldr	r2, [r7, #4]
     714:	683b      	ldr	r3, [r7, #0]
     716:	429a      	cmp	r2, r3
     718:	d00c      	beq.n	734 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     71a:	e007      	b.n	72c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     71c:	683b      	ldr	r3, [r7, #0]
     71e:	1d1a      	adds	r2, r3, #4
     720:	603a      	str	r2, [r7, #0]
     722:	687a      	ldr	r2, [r7, #4]
     724:	1d11      	adds	r1, r2, #4
     726:	6079      	str	r1, [r7, #4]
     728:	6812      	ldr	r2, [r2, #0]
     72a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     72c:	683a      	ldr	r2, [r7, #0]
     72e:	4b12      	ldr	r3, [pc, #72]	; (778 <Reset_Handler+0x74>)
     730:	429a      	cmp	r2, r3
     732:	d3f3      	bcc.n	71c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     734:	4b11      	ldr	r3, [pc, #68]	; (77c <Reset_Handler+0x78>)
     736:	603b      	str	r3, [r7, #0]
     738:	e004      	b.n	744 <Reset_Handler+0x40>
                *pDest++ = 0;
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	1d1a      	adds	r2, r3, #4
     73e:	603a      	str	r2, [r7, #0]
     740:	2200      	movs	r2, #0
     742:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     744:	683a      	ldr	r2, [r7, #0]
     746:	4b0e      	ldr	r3, [pc, #56]	; (780 <Reset_Handler+0x7c>)
     748:	429a      	cmp	r2, r3
     74a:	d3f6      	bcc.n	73a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     74c:	4b0d      	ldr	r3, [pc, #52]	; (784 <Reset_Handler+0x80>)
     74e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     750:	4b0d      	ldr	r3, [pc, #52]	; (788 <Reset_Handler+0x84>)
     752:	687a      	ldr	r2, [r7, #4]
     754:	21ff      	movs	r1, #255	; 0xff
     756:	438a      	bics	r2, r1
     758:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     75a:	4a0c      	ldr	r2, [pc, #48]	; (78c <Reset_Handler+0x88>)
     75c:	6853      	ldr	r3, [r2, #4]
     75e:	2180      	movs	r1, #128	; 0x80
     760:	430b      	orrs	r3, r1
     762:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <Reset_Handler+0x8c>)
     766:	4798      	blx	r3

        /* Branch to main function */
        main();
     768:	4b0a      	ldr	r3, [pc, #40]	; (794 <Reset_Handler+0x90>)
     76a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     76c:	e7fe      	b.n	76c <Reset_Handler+0x68>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	0000c888 	.word	0x0000c888
     774:	20000000 	.word	0x20000000
     778:	20000188 	.word	0x20000188
     77c:	20000188 	.word	0x20000188
     780:	2000046c 	.word	0x2000046c
     784:	00000000 	.word	0x00000000
     788:	e000ed00 	.word	0xe000ed00
     78c:	41004000 	.word	0x41004000
     790:	0000acd9 	.word	0x0000acd9
     794:	00009181 	.word	0x00009181

00000798 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     798:	b580      	push	{r7, lr}
     79a:	af00      	add	r7, sp, #0
        while (1) {
     79c:	e7fe      	b.n	79c <Dummy_Handler+0x4>
	...

000007a0 <detect_crypto_device>:
uint8_t public_key[ATCA_PUB_KEY_SIZE];
//local function prototypes
ATCA_STATUS configure_device(uint8_t new_device_address);

ATCA_STATUS detect_crypto_device()
{
     7a0:	b590      	push	{r4, r7, lr}
     7a2:	b0a3      	sub	sp, #140	; 0x8c
     7a4:	af00      	add	r7, sp, #0
	ATCA_STATUS  status;
	static bool attachedDevices[3];    //array to keep track of the devices detected
	uint8_t cur_config[ATCA_ECC_CONFIG_SIZE];

	// do device detection
	memset(attachedDevices, 0, sizeof(attachedDevices));
     7a6:	4b43      	ldr	r3, [pc, #268]	; (8b4 <detect_crypto_device+0x114>)
     7a8:	2203      	movs	r2, #3
     7aa:	2100      	movs	r1, #0
     7ac:	0018      	movs	r0, r3
     7ae:	4b42      	ldr	r3, [pc, #264]	; (8b8 <detect_crypto_device+0x118>)
     7b0:	4798      	blx	r3
	
	g_crypto_device = cfg_ateccx08a_i2c_default;
     7b2:	4b42      	ldr	r3, [pc, #264]	; (8bc <detect_crypto_device+0x11c>)
     7b4:	4a42      	ldr	r2, [pc, #264]	; (8c0 <detect_crypto_device+0x120>)
     7b6:	ca13      	ldmia	r2!, {r0, r1, r4}
     7b8:	c313      	stmia	r3!, {r0, r1, r4}
     7ba:	ca13      	ldmia	r2!, {r0, r1, r4}
     7bc:	c313      	stmia	r3!, {r0, r1, r4}
     7be:	ca13      	ldmia	r2!, {r0, r1, r4}
     7c0:	c313      	stmia	r3!, {r0, r1, r4}
     7c2:	ca13      	ldmia	r2!, {r0, r1, r4}
     7c4:	c313      	stmia	r3!, {r0, r1, r4}
	g_crypto_device.atcai2c.slave_address = ECCx08A_DEFAULT_ADDRESS;
     7c6:	4b3d      	ldr	r3, [pc, #244]	; (8bc <detect_crypto_device+0x11c>)
     7c8:	22c0      	movs	r2, #192	; 0xc0
     7ca:	711a      	strb	r2, [r3, #4]

	// detect any devices connected with factory default address, ECCx08A_DEFAULT_ADDRESS
	status = atcab_init(&g_crypto_device);
     7cc:	2387      	movs	r3, #135	; 0x87
     7ce:	18fc      	adds	r4, r7, r3
     7d0:	4b3a      	ldr	r3, [pc, #232]	; (8bc <detect_crypto_device+0x11c>)
     7d2:	0018      	movs	r0, r3
     7d4:	4b3b      	ldr	r3, [pc, #236]	; (8c4 <detect_crypto_device+0x124>)
     7d6:	4798      	blx	r3
     7d8:	0003      	movs	r3, r0
     7da:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     7dc:	2387      	movs	r3, #135	; 0x87
     7de:	18fb      	adds	r3, r7, r3
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d003      	beq.n	7ee <detect_crypto_device+0x4e>
	return status;
     7e6:	2387      	movs	r3, #135	; 0x87
     7e8:	18fb      	adds	r3, r7, r3
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	e05e      	b.n	8ac <detect_crypto_device+0x10c>
	
	status = atcab_read_config_zone(cur_config);
     7ee:	2387      	movs	r3, #135	; 0x87
     7f0:	18fc      	adds	r4, r7, r3
     7f2:	1d3b      	adds	r3, r7, #4
     7f4:	0018      	movs	r0, r3
     7f6:	4b34      	ldr	r3, [pc, #208]	; (8c8 <detect_crypto_device+0x128>)
     7f8:	4798      	blx	r3
     7fa:	0003      	movs	r3, r0
     7fc:	7023      	strb	r3, [r4, #0]
	if(status == ATCA_RX_CRC_ERROR)
     7fe:	2387      	movs	r3, #135	; 0x87
     800:	18fb      	adds	r3, r7, r3
     802:	781b      	ldrb	r3, [r3, #0]
     804:	2be5      	cmp	r3, #229	; 0xe5
     806:	d103      	bne.n	810 <detect_crypto_device+0x70>
	{
		// corrupted data received.  A likely cause is that there are multiple devices with the same address attached.
		// firmware bug in WINC will cause a CRC Error on the default address if it's connected
		attachedDevices[DEV_INVALID] = true;
     808:	4b2a      	ldr	r3, [pc, #168]	; (8b4 <detect_crypto_device+0x114>)
     80a:	2201      	movs	r2, #1
     80c:	705a      	strb	r2, [r3, #1]
     80e:	e015      	b.n	83c <detect_crypto_device+0x9c>
	}
	else if(status == ATCA_TOO_MANY_COMM_RETRIES)
     810:	2387      	movs	r3, #135	; 0x87
     812:	18fb      	adds	r3, r7, r3
     814:	781b      	ldrb	r3, [r3, #0]
     816:	2bec      	cmp	r3, #236	; 0xec
     818:	d103      	bne.n	822 <detect_crypto_device+0x82>
	// no device found
	attachedDevices[DEV_UNCONF] = false;
     81a:	4b26      	ldr	r3, [pc, #152]	; (8b4 <detect_crypto_device+0x114>)
     81c:	2200      	movs	r2, #0
     81e:	701a      	strb	r2, [r3, #0]
     820:	e00c      	b.n	83c <detect_crypto_device+0x9c>
	else if(status == ATCA_SUCCESS)
     822:	2387      	movs	r3, #135	; 0x87
     824:	18fb      	adds	r3, r7, r3
     826:	781b      	ldrb	r3, [r3, #0]
     828:	2b00      	cmp	r3, #0
     82a:	d103      	bne.n	834 <detect_crypto_device+0x94>
	// a single unconfigured device was found at ECCx08A_DEFAULT_ADDRESS
	attachedDevices[DEV_UNCONF] = true;
     82c:	4b21      	ldr	r3, [pc, #132]	; (8b4 <detect_crypto_device+0x114>)
     82e:	2201      	movs	r2, #1
     830:	701a      	strb	r2, [r3, #0]
     832:	e003      	b.n	83c <detect_crypto_device+0x9c>
	else
	// other error
	return status;
     834:	2387      	movs	r3, #135	; 0x87
     836:	18fb      	adds	r3, r7, r3
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	e037      	b.n	8ac <detect_crypto_device+0x10c>


	// try to communicate with AWS_ECCx08A_I2C_ADDRESS
	g_crypto_device.atcai2c.slave_address = AWS_ECCx08A_I2C_ADDRESS;
     83c:	4b1f      	ldr	r3, [pc, #124]	; (8bc <detect_crypto_device+0x11c>)
     83e:	22b0      	movs	r2, #176	; 0xb0
     840:	711a      	strb	r2, [r3, #4]
	atcab_init(&g_crypto_device);
     842:	4b1e      	ldr	r3, [pc, #120]	; (8bc <detect_crypto_device+0x11c>)
     844:	0018      	movs	r0, r3
     846:	4b1f      	ldr	r3, [pc, #124]	; (8c4 <detect_crypto_device+0x124>)
     848:	4798      	blx	r3
	status = atcab_read_config_zone(cur_config);
     84a:	2387      	movs	r3, #135	; 0x87
     84c:	18fc      	adds	r4, r7, r3
     84e:	1d3b      	adds	r3, r7, #4
     850:	0018      	movs	r0, r3
     852:	4b1d      	ldr	r3, [pc, #116]	; (8c8 <detect_crypto_device+0x128>)
     854:	4798      	blx	r3
     856:	0003      	movs	r3, r0
     858:	7023      	strb	r3, [r4, #0]
	
	if(status == ATCA_TOO_MANY_COMM_RETRIES)
     85a:	2387      	movs	r3, #135	; 0x87
     85c:	18fb      	adds	r3, r7, r3
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	2bec      	cmp	r3, #236	; 0xec
     862:	d103      	bne.n	86c <detect_crypto_device+0xcc>
	// no devices found
	attachedDevices[DEV_CRYPTO] = false;
     864:	4b13      	ldr	r3, [pc, #76]	; (8b4 <detect_crypto_device+0x114>)
     866:	2200      	movs	r2, #0
     868:	709a      	strb	r2, [r3, #2]
     86a:	e00c      	b.n	886 <detect_crypto_device+0xe6>
	else if(status == ATCA_SUCCESS)
     86c:	2387      	movs	r3, #135	; 0x87
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
     872:	2b00      	cmp	r3, #0
     874:	d103      	bne.n	87e <detect_crypto_device+0xde>
	// device was found and able to be read from, assuming WINC-based crypto device
	attachedDevices[DEV_CRYPTO] = true;
     876:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <detect_crypto_device+0x114>)
     878:	2201      	movs	r2, #1
     87a:	709a      	strb	r2, [r3, #2]
     87c:	e003      	b.n	886 <detect_crypto_device+0xe6>
	else
	// other error
	return status;
     87e:	2387      	movs	r3, #135	; 0x87
     880:	18fb      	adds	r3, r7, r3
     882:	781b      	ldrb	r3, [r3, #0]
     884:	e012      	b.n	8ac <detect_crypto_device+0x10c>
	
	// device detection completed, now do appropriate configuration...
	
	if(attachedDevices[DEV_CRYPTO])
     886:	4b0b      	ldr	r3, [pc, #44]	; (8b4 <detect_crypto_device+0x114>)
     888:	789b      	ldrb	r3, [r3, #2]
     88a:	2b00      	cmp	r3, #0
     88c:	d001      	beq.n	892 <detect_crypto_device+0xf2>
	// pre-configured crypto device found, proceed with demo
	return ATCA_SUCCESS;
     88e:	2300      	movs	r3, #0
     890:	e00c      	b.n	8ac <detect_crypto_device+0x10c>
	else if(attachedDevices[DEV_INVALID])
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <detect_crypto_device+0x114>)
     894:	785b      	ldrb	r3, [r3, #1]
     896:	2b00      	cmp	r3, #0
     898:	d001      	beq.n	89e <detect_crypto_device+0xfe>
	// invalid data found, probably because multiple devices connected
	return ATCA_RX_CRC_ERROR;
     89a:	23e5      	movs	r3, #229	; 0xe5
     89c:	e006      	b.n	8ac <detect_crypto_device+0x10c>
	else if(attachedDevices[DEV_UNCONF])
     89e:	4b05      	ldr	r3, [pc, #20]	; (8b4 <detect_crypto_device+0x114>)
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d001      	beq.n	8aa <detect_crypto_device+0x10a>
	// found unconfigured crypto device
	return ATCA_GEN_FAIL;
     8a6:	23e1      	movs	r3, #225	; 0xe1
     8a8:	e000      	b.n	8ac <detect_crypto_device+0x10c>
	else
	// no crypto devices were found
	return ATCA_NO_DEVICES;
     8aa:	23f9      	movs	r3, #249	; 0xf9
}
     8ac:	0018      	movs	r0, r3
     8ae:	46bd      	mov	sp, r7
     8b0:	b023      	add	sp, #140	; 0x8c
     8b2:	bd90      	pop	{r4, r7, pc}
     8b4:	200001a8 	.word	0x200001a8
     8b8:	0000ad79 	.word	0x0000ad79
     8bc:	200003f0 	.word	0x200003f0
     8c0:	2000009c 	.word	0x2000009c
     8c4:	00003661 	.word	0x00003661
     8c8:	0000465d 	.word	0x0000465d

000008cc <printDevDetectStatus>:


void printDevDetectStatus(ATCA_STATUS status)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b082      	sub	sp, #8
     8d0:	af00      	add	r7, sp, #0
     8d2:	0002      	movs	r2, r0
     8d4:	1dfb      	adds	r3, r7, #7
     8d6:	701a      	strb	r2, [r3, #0]
	if(status == ATCA_NO_DEVICES)
     8d8:	1dfb      	adds	r3, r7, #7
     8da:	781b      	ldrb	r3, [r3, #0]
     8dc:	2bf9      	cmp	r3, #249	; 0xf9
     8de:	d110      	bne.n	902 <printDevDetectStatus+0x36>
	{
		// no device detected
		printf("The AWS IoT Zero Touch Demo ATECCx08A pre-config has not completed.\r\n");
     8e0:	4b1c      	ldr	r3, [pc, #112]	; (954 <printDevDetectStatus+0x88>)
     8e2:	0018      	movs	r0, r3
     8e4:	4b1c      	ldr	r3, [pc, #112]	; (958 <printDevDetectStatus+0x8c>)
     8e6:	4798      	blx	r3

		printf("No attached CryptoAuth board detected.\r\n");
     8e8:	4b1c      	ldr	r3, [pc, #112]	; (95c <printDevDetectStatus+0x90>)
     8ea:	0018      	movs	r0, r3
     8ec:	4b1a      	ldr	r3, [pc, #104]	; (958 <printDevDetectStatus+0x8c>)
     8ee:	4798      	blx	r3
		printf("Please check your hardware configuration.\r\n");
     8f0:	4b1b      	ldr	r3, [pc, #108]	; (960 <printDevDetectStatus+0x94>)
     8f2:	0018      	movs	r0, r3
     8f4:	4b18      	ldr	r3, [pc, #96]	; (958 <printDevDetectStatus+0x8c>)
     8f6:	4798      	blx	r3
		printf("Stopping the AWS IoT demo.\r\n");
     8f8:	4b1a      	ldr	r3, [pc, #104]	; (964 <printDevDetectStatus+0x98>)
     8fa:	0018      	movs	r0, r3
     8fc:	4b16      	ldr	r3, [pc, #88]	; (958 <printDevDetectStatus+0x8c>)
     8fe:	4798      	blx	r3

		printf("Unknown error trying to communicate with CryptoAuth board.\r\n");
		printf("Please check your hardware configuration.\r\n");
		printf("Stopping the AWS IoT demo.\r\n");
	}
}
     900:	e024      	b.n	94c <printDevDetectStatus+0x80>
	else if(status == ATCA_RX_CRC_ERROR)
     902:	1dfb      	adds	r3, r7, #7
     904:	781b      	ldrb	r3, [r3, #0]
     906:	2be5      	cmp	r3, #229	; 0xe5
     908:	d110      	bne.n	92c <printDevDetectStatus+0x60>
		printf("The AWS IoT Zero Touch Demo ATECCx08A pre-config has not completed.\r\n");
     90a:	4b12      	ldr	r3, [pc, #72]	; (954 <printDevDetectStatus+0x88>)
     90c:	0018      	movs	r0, r3
     90e:	4b12      	ldr	r3, [pc, #72]	; (958 <printDevDetectStatus+0x8c>)
     910:	4798      	blx	r3
		printf("Unconfigured CryptoAuth board connected while WINC1500 connected.\r\n");
     912:	4b15      	ldr	r3, [pc, #84]	; (968 <printDevDetectStatus+0x9c>)
     914:	0018      	movs	r0, r3
     916:	4b10      	ldr	r3, [pc, #64]	; (958 <printDevDetectStatus+0x8c>)
     918:	4798      	blx	r3
		printf("Please disconnect WINC1500 and restart the demo.\r\n");
     91a:	4b14      	ldr	r3, [pc, #80]	; (96c <printDevDetectStatus+0xa0>)
     91c:	0018      	movs	r0, r3
     91e:	4b0e      	ldr	r3, [pc, #56]	; (958 <printDevDetectStatus+0x8c>)
     920:	4798      	blx	r3
		printf("Stopping the AWS IoT demo.\r\n");
     922:	4b10      	ldr	r3, [pc, #64]	; (964 <printDevDetectStatus+0x98>)
     924:	0018      	movs	r0, r3
     926:	4b0c      	ldr	r3, [pc, #48]	; (958 <printDevDetectStatus+0x8c>)
     928:	4798      	blx	r3
}
     92a:	e00f      	b.n	94c <printDevDetectStatus+0x80>
		printf("The AWS IoT Zero Touch Demo ATECCx08A pre-config has not completed.\r\n");
     92c:	4b09      	ldr	r3, [pc, #36]	; (954 <printDevDetectStatus+0x88>)
     92e:	0018      	movs	r0, r3
     930:	4b09      	ldr	r3, [pc, #36]	; (958 <printDevDetectStatus+0x8c>)
     932:	4798      	blx	r3
		printf("Unknown error trying to communicate with CryptoAuth board.\r\n");
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <printDevDetectStatus+0xa4>)
     936:	0018      	movs	r0, r3
     938:	4b07      	ldr	r3, [pc, #28]	; (958 <printDevDetectStatus+0x8c>)
     93a:	4798      	blx	r3
		printf("Please check your hardware configuration.\r\n");
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <printDevDetectStatus+0x94>)
     93e:	0018      	movs	r0, r3
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <printDevDetectStatus+0x8c>)
     942:	4798      	blx	r3
		printf("Stopping the AWS IoT demo.\r\n");
     944:	4b07      	ldr	r3, [pc, #28]	; (964 <printDevDetectStatus+0x98>)
     946:	0018      	movs	r0, r3
     948:	4b03      	ldr	r3, [pc, #12]	; (958 <printDevDetectStatus+0x8c>)
     94a:	4798      	blx	r3
}
     94c:	46c0      	nop			; (mov r8, r8)
     94e:	46bd      	mov	sp, r7
     950:	b002      	add	sp, #8
     952:	bd80      	pop	{r7, pc}
     954:	0000bf8c 	.word	0x0000bf8c
     958:	0000afcd 	.word	0x0000afcd
     95c:	0000bfd4 	.word	0x0000bfd4
     960:	0000bffc 	.word	0x0000bffc
     964:	0000c028 	.word	0x0000c028
     968:	0000c044 	.word	0x0000c044
     96c:	0000c088 	.word	0x0000c088
     970:	0000c0bc 	.word	0x0000c0bc

00000974 <preconfigure_crypto_device>:

ATCA_STATUS preconfigure_crypto_device()
{
     974:	b590      	push	{r4, r7, lr}
     976:	b083      	sub	sp, #12
     978:	af00      	add	r7, sp, #0
	ATCA_STATUS  status;
	bool isLocked = false;
     97a:	1d3b      	adds	r3, r7, #4
     97c:	2200      	movs	r2, #0
     97e:	701a      	strb	r2, [r3, #0]
	uint8_t slots_to_genkey[] = {0, 2, 3, 7};
     980:	003b      	movs	r3, r7
     982:	4a4f      	ldr	r2, [pc, #316]	; (ac0 <preconfigure_crypto_device+0x14c>)
     984:	6812      	ldr	r2, [r2, #0]
     986:	601a      	str	r2, [r3, #0]
	
	// setup to talk to initailly unconfigured device
	g_crypto_device = cfg_ateccx08a_i2c_default;
     988:	4b4e      	ldr	r3, [pc, #312]	; (ac4 <preconfigure_crypto_device+0x150>)
     98a:	4a4f      	ldr	r2, [pc, #316]	; (ac8 <preconfigure_crypto_device+0x154>)
     98c:	ca13      	ldmia	r2!, {r0, r1, r4}
     98e:	c313      	stmia	r3!, {r0, r1, r4}
     990:	ca13      	ldmia	r2!, {r0, r1, r4}
     992:	c313      	stmia	r3!, {r0, r1, r4}
     994:	ca13      	ldmia	r2!, {r0, r1, r4}
     996:	c313      	stmia	r3!, {r0, r1, r4}
     998:	ca13      	ldmia	r2!, {r0, r1, r4}
     99a:	c313      	stmia	r3!, {r0, r1, r4}
	g_crypto_device.atcai2c.slave_address = ECCx08A_DEFAULT_ADDRESS;
     99c:	4b49      	ldr	r3, [pc, #292]	; (ac4 <preconfigure_crypto_device+0x150>)
     99e:	22c0      	movs	r2, #192	; 0xc0
     9a0:	711a      	strb	r2, [r3, #4]

	status = atcab_init(&g_crypto_device);
     9a2:	1d7c      	adds	r4, r7, #5
     9a4:	4b47      	ldr	r3, [pc, #284]	; (ac4 <preconfigure_crypto_device+0x150>)
     9a6:	0018      	movs	r0, r3
     9a8:	4b48      	ldr	r3, [pc, #288]	; (acc <preconfigure_crypto_device+0x158>)
     9aa:	4798      	blx	r3
     9ac:	0003      	movs	r3, r0
     9ae:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     9b0:	1d7b      	adds	r3, r7, #5
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d002      	beq.n	9be <preconfigure_crypto_device+0x4a>
	return status;
     9b8:	1d7b      	adds	r3, r7, #5
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	e07c      	b.n	ab8 <preconfigure_crypto_device+0x144>

	// start the configuration

	// configure as an AWS ECCx08...
	printf("Configuring CryptoAuth Board now...\r\n");
     9be:	4b44      	ldr	r3, [pc, #272]	; (ad0 <preconfigure_crypto_device+0x15c>)
     9c0:	0018      	movs	r0, r3
     9c2:	4b44      	ldr	r3, [pc, #272]	; (ad4 <preconfigure_crypto_device+0x160>)
     9c4:	4798      	blx	r3
	
	// check to see if the Config Zone is already locked
	status = atcab_is_locked(ATCA_ZONE_CONFIG, &isLocked);
     9c6:	1d7c      	adds	r4, r7, #5
     9c8:	1d3b      	adds	r3, r7, #4
     9ca:	0019      	movs	r1, r3
     9cc:	2000      	movs	r0, #0
     9ce:	4b42      	ldr	r3, [pc, #264]	; (ad8 <preconfigure_crypto_device+0x164>)
     9d0:	4798      	blx	r3
     9d2:	0003      	movs	r3, r0
     9d4:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     9d6:	1d7b      	adds	r3, r7, #5
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	d002      	beq.n	9e4 <preconfigure_crypto_device+0x70>
	return status;
     9de:	1d7b      	adds	r3, r7, #5
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	e069      	b.n	ab8 <preconfigure_crypto_device+0x144>
	
	if(isLocked)
     9e4:	1d3b      	adds	r3, r7, #4
     9e6:	781b      	ldrb	r3, [r3, #0]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d005      	beq.n	9f8 <preconfigure_crypto_device+0x84>
	{
		printf("Cannot configure Config Zone - Config Zone already locked.\r\n");
     9ec:	4b3b      	ldr	r3, [pc, #236]	; (adc <preconfigure_crypto_device+0x168>)
     9ee:	0018      	movs	r0, r3
     9f0:	4b38      	ldr	r3, [pc, #224]	; (ad4 <preconfigure_crypto_device+0x160>)
     9f2:	4798      	blx	r3
		return ATCA_CONFIG_ZONE_LOCKED;
     9f4:	2301      	movs	r3, #1
     9f6:	e05f      	b.n	ab8 <preconfigure_crypto_device+0x144>
	}
	
	// write the entire AWS config to the device
	status = atcab_write_config_zone(aws_config);
     9f8:	1d7c      	adds	r4, r7, #5
     9fa:	4b39      	ldr	r3, [pc, #228]	; (ae0 <preconfigure_crypto_device+0x16c>)
     9fc:	0018      	movs	r0, r3
     9fe:	4b39      	ldr	r3, [pc, #228]	; (ae4 <preconfigure_crypto_device+0x170>)
     a00:	4798      	blx	r3
     a02:	0003      	movs	r3, r0
     a04:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     a06:	1d7b      	adds	r3, r7, #5
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d002      	beq.n	a14 <preconfigure_crypto_device+0xa0>
	return status;
     a0e:	1d7b      	adds	r3, r7, #5
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	e051      	b.n	ab8 <preconfigure_crypto_device+0x144>
	
	// lock the device in preparation for the actual demo
	status = atcab_lock_config_zone();
     a14:	1d7c      	adds	r4, r7, #5
     a16:	4b34      	ldr	r3, [pc, #208]	; (ae8 <preconfigure_crypto_device+0x174>)
     a18:	4798      	blx	r3
     a1a:	0003      	movs	r3, r0
     a1c:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     a1e:	1d7b      	adds	r3, r7, #5
     a20:	781b      	ldrb	r3, [r3, #0]
     a22:	2b00      	cmp	r3, #0
     a24:	d002      	beq.n	a2c <preconfigure_crypto_device+0xb8>
	return status;
     a26:	1d7b      	adds	r3, r7, #5
     a28:	781b      	ldrb	r3, [r3, #0]
     a2a:	e045      	b.n	ab8 <preconfigure_crypto_device+0x144>

	status = atcab_lock_data_zone();
     a2c:	1d7c      	adds	r4, r7, #5
     a2e:	4b2f      	ldr	r3, [pc, #188]	; (aec <preconfigure_crypto_device+0x178>)
     a30:	4798      	blx	r3
     a32:	0003      	movs	r3, r0
     a34:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     a36:	1d7b      	adds	r3, r7, #5
     a38:	781b      	ldrb	r3, [r3, #0]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d002      	beq.n	a44 <preconfigure_crypto_device+0xd0>
	return status;
     a3e:	1d7b      	adds	r3, r7, #5
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	e039      	b.n	ab8 <preconfigure_crypto_device+0x144>
	
	
	// put the newly configured device to sleep to have the changes take effect.
	atcab_wakeup();
     a44:	4b2a      	ldr	r3, [pc, #168]	; (af0 <preconfigure_crypto_device+0x17c>)
     a46:	4798      	blx	r3
	atcab_sleep();
     a48:	4b2a      	ldr	r3, [pc, #168]	; (af4 <preconfigure_crypto_device+0x180>)
     a4a:	4798      	blx	r3
	
	// setup to talk to newly configured AWS device
	g_crypto_device.atcai2c.slave_address = AWS_ECCx08A_I2C_ADDRESS;
     a4c:	4b1d      	ldr	r3, [pc, #116]	; (ac4 <preconfigure_crypto_device+0x150>)
     a4e:	22b0      	movs	r2, #176	; 0xb0
     a50:	711a      	strb	r2, [r3, #4]

	status = atcab_init(&g_crypto_device);
     a52:	1d7c      	adds	r4, r7, #5
     a54:	4b1b      	ldr	r3, [pc, #108]	; (ac4 <preconfigure_crypto_device+0x150>)
     a56:	0018      	movs	r0, r3
     a58:	4b1c      	ldr	r3, [pc, #112]	; (acc <preconfigure_crypto_device+0x158>)
     a5a:	4798      	blx	r3
     a5c:	0003      	movs	r3, r0
     a5e:	7023      	strb	r3, [r4, #0]
	if(status != ATCA_SUCCESS)
     a60:	1d7b      	adds	r3, r7, #5
     a62:	781b      	ldrb	r3, [r3, #0]
     a64:	2b00      	cmp	r3, #0
     a66:	d002      	beq.n	a6e <preconfigure_crypto_device+0xfa>
	return status;
     a68:	1d7b      	adds	r3, r7, #5
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	e024      	b.n	ab8 <preconfigure_crypto_device+0x144>
	
	// Generate private keys for slots
	for(uint16_t i=0; i < (sizeof(slots_to_genkey)/sizeof(slots_to_genkey[0])); i++)
     a6e:	1dbb      	adds	r3, r7, #6
     a70:	2200      	movs	r2, #0
     a72:	801a      	strh	r2, [r3, #0]
     a74:	e01b      	b.n	aae <preconfigure_crypto_device+0x13a>
	{
		status = atcab_genkey(slots_to_genkey[i], NULL);
     a76:	1dbb      	adds	r3, r7, #6
     a78:	881b      	ldrh	r3, [r3, #0]
     a7a:	003a      	movs	r2, r7
     a7c:	5cd3      	ldrb	r3, [r2, r3]
     a7e:	b29b      	uxth	r3, r3
     a80:	1d7c      	adds	r4, r7, #5
     a82:	2100      	movs	r1, #0
     a84:	0018      	movs	r0, r3
     a86:	4b1c      	ldr	r3, [pc, #112]	; (af8 <preconfigure_crypto_device+0x184>)
     a88:	4798      	blx	r3
     a8a:	0003      	movs	r3, r0
     a8c:	7023      	strb	r3, [r4, #0]
		if(status != ATCA_SUCCESS)
     a8e:	1d7b      	adds	r3, r7, #5
     a90:	781b      	ldrb	r3, [r3, #0]
     a92:	2b00      	cmp	r3, #0
     a94:	d006      	beq.n	aa4 <preconfigure_crypto_device+0x130>
		{
			printf("Could not generate key on slot.\r\n");
     a96:	4b19      	ldr	r3, [pc, #100]	; (afc <preconfigure_crypto_device+0x188>)
     a98:	0018      	movs	r0, r3
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <preconfigure_crypto_device+0x160>)
     a9c:	4798      	blx	r3
			return status;
     a9e:	1d7b      	adds	r3, r7, #5
     aa0:	781b      	ldrb	r3, [r3, #0]
     aa2:	e009      	b.n	ab8 <preconfigure_crypto_device+0x144>
	for(uint16_t i=0; i < (sizeof(slots_to_genkey)/sizeof(slots_to_genkey[0])); i++)
     aa4:	1dbb      	adds	r3, r7, #6
     aa6:	881a      	ldrh	r2, [r3, #0]
     aa8:	1dbb      	adds	r3, r7, #6
     aaa:	3201      	adds	r2, #1
     aac:	801a      	strh	r2, [r3, #0]
     aae:	1dbb      	adds	r3, r7, #6
     ab0:	881b      	ldrh	r3, [r3, #0]
     ab2:	2b03      	cmp	r3, #3
     ab4:	d9df      	bls.n	a76 <preconfigure_crypto_device+0x102>
		}
	}
	
	// all done
	return ATCA_SUCCESS;
     ab6:	2300      	movs	r3, #0
}
     ab8:	0018      	movs	r0, r3
     aba:	46bd      	mov	sp, r7
     abc:	b003      	add	sp, #12
     abe:	bd90      	pop	{r4, r7, pc}
     ac0:	0000c180 	.word	0x0000c180
     ac4:	200003f0 	.word	0x200003f0
     ac8:	2000009c 	.word	0x2000009c
     acc:	00003661 	.word	0x00003661
     ad0:	0000c0f8 	.word	0x0000c0f8
     ad4:	0000afcd 	.word	0x0000afcd
     ad8:	000040e9 	.word	0x000040e9
     adc:	0000c120 	.word	0x0000c120
     ae0:	20000000 	.word	0x20000000
     ae4:	000046e1 	.word	0x000046e1
     ae8:	00004925 	.word	0x00004925
     aec:	0000493d 	.word	0x0000493d
     af0:	00003705 	.word	0x00003705
     af4:	00003765 	.word	0x00003765
     af8:	00003ce5 	.word	0x00003ce5
     afc:	0000c15c 	.word	0x0000c15c

00000b00 <bin2hex>:
static const char* bin2hex(const void* data, size_t data_size)
{
     b00:	b580      	push	{r7, lr}
     b02:	b084      	sub	sp, #16
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
     b08:	6039      	str	r1, [r7, #0]
	static char buf[256];
	static char hex[] = "0123456789abcdef";
	const uint8_t* data8 = data;
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	60fb      	str	r3, [r7, #12]
	
	if (data_size*2 > sizeof(buf)-1)
     b0e:	683b      	ldr	r3, [r7, #0]
     b10:	005b      	lsls	r3, r3, #1
     b12:	2bff      	cmp	r3, #255	; 0xff
     b14:	d901      	bls.n	b1a <bin2hex+0x1a>
	return "[buf too small]";
     b16:	4b18      	ldr	r3, [pc, #96]	; (b78 <bin2hex+0x78>)
     b18:	e029      	b.n	b6e <bin2hex+0x6e>
	
	for (size_t i = 0; i < data_size; i++)
     b1a:	2300      	movs	r3, #0
     b1c:	60bb      	str	r3, [r7, #8]
     b1e:	e01c      	b.n	b5a <bin2hex+0x5a>
	{
		buf[i*2 + 0] = hex[(*data8) >> 4];
     b20:	68bb      	ldr	r3, [r7, #8]
     b22:	005b      	lsls	r3, r3, #1
     b24:	68fa      	ldr	r2, [r7, #12]
     b26:	7812      	ldrb	r2, [r2, #0]
     b28:	0912      	lsrs	r2, r2, #4
     b2a:	b2d2      	uxtb	r2, r2
     b2c:	0011      	movs	r1, r2
     b2e:	4a13      	ldr	r2, [pc, #76]	; (b7c <bin2hex+0x7c>)
     b30:	5c51      	ldrb	r1, [r2, r1]
     b32:	4a13      	ldr	r2, [pc, #76]	; (b80 <bin2hex+0x80>)
     b34:	54d1      	strb	r1, [r2, r3]
		buf[i*2 + 1] = hex[(*data8) & 0xF];
     b36:	68bb      	ldr	r3, [r7, #8]
     b38:	005b      	lsls	r3, r3, #1
     b3a:	3301      	adds	r3, #1
     b3c:	68fa      	ldr	r2, [r7, #12]
     b3e:	7812      	ldrb	r2, [r2, #0]
     b40:	0011      	movs	r1, r2
     b42:	220f      	movs	r2, #15
     b44:	400a      	ands	r2, r1
     b46:	490d      	ldr	r1, [pc, #52]	; (b7c <bin2hex+0x7c>)
     b48:	5c89      	ldrb	r1, [r1, r2]
     b4a:	4a0d      	ldr	r2, [pc, #52]	; (b80 <bin2hex+0x80>)
     b4c:	54d1      	strb	r1, [r2, r3]
		data8++;
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	3301      	adds	r3, #1
     b52:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < data_size; i++)
     b54:	68bb      	ldr	r3, [r7, #8]
     b56:	3301      	adds	r3, #1
     b58:	60bb      	str	r3, [r7, #8]
     b5a:	68ba      	ldr	r2, [r7, #8]
     b5c:	683b      	ldr	r3, [r7, #0]
     b5e:	429a      	cmp	r2, r3
     b60:	d3de      	bcc.n	b20 <bin2hex+0x20>
	}
	buf[data_size*2] = 0;
     b62:	683b      	ldr	r3, [r7, #0]
     b64:	005b      	lsls	r3, r3, #1
     b66:	4a06      	ldr	r2, [pc, #24]	; (b80 <bin2hex+0x80>)
     b68:	2100      	movs	r1, #0
     b6a:	54d1      	strb	r1, [r2, r3]
	
	return buf;
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <bin2hex+0x80>)
}
     b6e:	0018      	movs	r0, r3
     b70:	46bd      	mov	sp, r7
     b72:	b004      	add	sp, #16
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	0000c184 	.word	0x0000c184
     b7c:	20000080 	.word	0x20000080
     b80:	200001ac 	.word	0x200001ac

00000b84 <eccPrintInfo>:

static int eccPrintInfo(void)
{
     b84:	b590      	push	{r4, r7, lr}
     b86:	b085      	sub	sp, #20
     b88:	af00      	add	r7, sp, #0
	ATCA_STATUS atca_status;
	uint8_t sn[9];
	uint8_t dev_rev[4];

	atca_status = atcab_read_serial_number(sn);
     b8a:	230f      	movs	r3, #15
     b8c:	18fc      	adds	r4, r7, r3
     b8e:	1d3b      	adds	r3, r7, #4
     b90:	0018      	movs	r0, r3
     b92:	4b26      	ldr	r3, [pc, #152]	; (c2c <eccPrintInfo+0xa8>)
     b94:	4798      	blx	r3
     b96:	0003      	movs	r3, r0
     b98:	7023      	strb	r3, [r4, #0]
	if (atca_status)
     b9a:	230f      	movs	r3, #15
     b9c:	18fb      	adds	r3, r7, r3
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d00b      	beq.n	bbc <eccPrintInfo+0x38>
	{
		printf("atcab_read_serial_number() failed with ret=0x%08X\r\n", atca_status);
     ba4:	230f      	movs	r3, #15
     ba6:	18fb      	adds	r3, r7, r3
     ba8:	781a      	ldrb	r2, [r3, #0]
     baa:	4b21      	ldr	r3, [pc, #132]	; (c30 <eccPrintInfo+0xac>)
     bac:	0011      	movs	r1, r2
     bae:	0018      	movs	r0, r3
     bb0:	4b20      	ldr	r3, [pc, #128]	; (c34 <eccPrintInfo+0xb0>)
     bb2:	4798      	blx	r3
		return atca_status;
     bb4:	230f      	movs	r3, #15
     bb6:	18fb      	adds	r3, r7, r3
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	e033      	b.n	c24 <eccPrintInfo+0xa0>
	}
	
	atca_status = atcab_info(dev_rev);
     bbc:	230f      	movs	r3, #15
     bbe:	18fc      	adds	r4, r7, r3
     bc0:	003b      	movs	r3, r7
     bc2:	0018      	movs	r0, r3
     bc4:	4b1c      	ldr	r3, [pc, #112]	; (c38 <eccPrintInfo+0xb4>)
     bc6:	4798      	blx	r3
     bc8:	0003      	movs	r3, r0
     bca:	7023      	strb	r3, [r4, #0]
	if (atca_status)
     bcc:	230f      	movs	r3, #15
     bce:	18fb      	adds	r3, r7, r3
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d00b      	beq.n	bee <eccPrintInfo+0x6a>
	{
		printf("atcab_info() failed with ret=0x%08X\r\n", atca_status);
     bd6:	230f      	movs	r3, #15
     bd8:	18fb      	adds	r3, r7, r3
     bda:	781a      	ldrb	r2, [r3, #0]
     bdc:	4b17      	ldr	r3, [pc, #92]	; (c3c <eccPrintInfo+0xb8>)
     bde:	0011      	movs	r1, r2
     be0:	0018      	movs	r0, r3
     be2:	4b14      	ldr	r3, [pc, #80]	; (c34 <eccPrintInfo+0xb0>)
     be4:	4798      	blx	r3
		return atca_status;
     be6:	230f      	movs	r3, #15
     be8:	18fb      	adds	r3, r7, r3
     bea:	781b      	ldrb	r3, [r3, #0]
     bec:	e01a      	b.n	c24 <eccPrintInfo+0xa0>
	}

	printf("Crypto Device:\r\n");
     bee:	4b14      	ldr	r3, [pc, #80]	; (c40 <eccPrintInfo+0xbc>)
     bf0:	0018      	movs	r0, r3
     bf2:	4b14      	ldr	r3, [pc, #80]	; (c44 <eccPrintInfo+0xc0>)
     bf4:	4798      	blx	r3
	printf("  SN:          %s\r\n", bin2hex(sn, sizeof(sn)));
     bf6:	1d3b      	adds	r3, r7, #4
     bf8:	2109      	movs	r1, #9
     bfa:	0018      	movs	r0, r3
     bfc:	4b12      	ldr	r3, [pc, #72]	; (c48 <eccPrintInfo+0xc4>)
     bfe:	4798      	blx	r3
     c00:	0002      	movs	r2, r0
     c02:	4b12      	ldr	r3, [pc, #72]	; (c4c <eccPrintInfo+0xc8>)
     c04:	0011      	movs	r1, r2
     c06:	0018      	movs	r0, r3
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <eccPrintInfo+0xb0>)
     c0a:	4798      	blx	r3
	printf("  DevRev:      %s\r\n", bin2hex(dev_rev, sizeof(dev_rev)));
     c0c:	003b      	movs	r3, r7
     c0e:	2104      	movs	r1, #4
     c10:	0018      	movs	r0, r3
     c12:	4b0d      	ldr	r3, [pc, #52]	; (c48 <eccPrintInfo+0xc4>)
     c14:	4798      	blx	r3
     c16:	0002      	movs	r2, r0
     c18:	4b0d      	ldr	r3, [pc, #52]	; (c50 <eccPrintInfo+0xcc>)
     c1a:	0011      	movs	r1, r2
     c1c:	0018      	movs	r0, r3
     c1e:	4b05      	ldr	r3, [pc, #20]	; (c34 <eccPrintInfo+0xb0>)
     c20:	4798      	blx	r3

	return 0;
     c22:	2300      	movs	r3, #0
}
     c24:	0018      	movs	r0, r3
     c26:	46bd      	mov	sp, r7
     c28:	b005      	add	sp, #20
     c2a:	bd90      	pop	{r4, r7, pc}
     c2c:	00003e91 	.word	0x00003e91
     c30:	0000c194 	.word	0x0000c194
     c34:	0000aed9 	.word	0x0000aed9
     c38:	000037a9 	.word	0x000037a9
     c3c:	0000c1c8 	.word	0x0000c1c8
     c40:	0000c1f0 	.word	0x0000c1f0
     c44:	0000afcd 	.word	0x0000afcd
     c48:	00000b01 	.word	0x00000b01
     c4c:	0000c200 	.word	0x0000c200
     c50:	0000c214 	.word	0x0000c214

00000c54 <cryptoauthlib_init>:
 *
 * \return  The status of the CryptoAuthLib initialization
 *            ATCA_SUCCESS - Returned on a successful CryptoAuthLib initialization
 */
ATCA_STATUS cryptoauthlib_init(void)
{
     c54:	b590      	push	{r4, r7, lr}
     c56:	b083      	sub	sp, #12
     c58:	af00      	add	r7, sp, #0
    ATCA_STATUS status = ATCA_NO_DEVICES;
     c5a:	1dfb      	adds	r3, r7, #7
     c5c:	22f9      	movs	r2, #249	; 0xf9
     c5e:	701a      	strb	r2, [r3, #0]
    bool device_locked = false;
     c60:	1dbb      	adds	r3, r7, #6
     c62:	2200      	movs	r2, #0
     c64:	701a      	strb	r2, [r3, #0]
    uint8_t revision[INFO_SIZE];
    
    // Initialize the CryptoAuthLib library
    cfg_ateccx08a_i2c_default.atcai2c.slave_address = AWS_ECC508A_I2C_ADDRESS;
     c66:	4b1f      	ldr	r3, [pc, #124]	; (ce4 <cryptoauthlib_init+0x90>)
     c68:	22b0      	movs	r2, #176	; 0xb0
     c6a:	711a      	strb	r2, [r3, #4]
    
    do 
    {
        status = atcab_init(&cfg_ateccx08a_i2c_default);
     c6c:	1dfc      	adds	r4, r7, #7
     c6e:	4b1d      	ldr	r3, [pc, #116]	; (ce4 <cryptoauthlib_init+0x90>)
     c70:	0018      	movs	r0, r3
     c72:	4b1d      	ldr	r3, [pc, #116]	; (ce8 <cryptoauthlib_init+0x94>)
     c74:	4798      	blx	r3
     c76:	0003      	movs	r3, r0
     c78:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
     c7a:	1dfb      	adds	r3, r7, #7
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	2b00      	cmp	r3, #0
     c80:	d004      	beq.n	c8c <cryptoauthlib_init+0x38>
        {
            printf("The CryptoAuthLib library failed to initialize.");
     c82:	4b1a      	ldr	r3, [pc, #104]	; (cec <cryptoauthlib_init+0x98>)
     c84:	0018      	movs	r0, r3
     c86:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <cryptoauthlib_init+0x9c>)
     c88:	4798      	blx	r3
            
            // Break the do/while loop
            break;
     c8a:	e025      	b.n	cd8 <cryptoauthlib_init+0x84>
        }

        // Force the ATECC508A to sleep
        atcab_wakeup();
     c8c:	4b19      	ldr	r3, [pc, #100]	; (cf4 <cryptoauthlib_init+0xa0>)
     c8e:	4798      	blx	r3
        atcab_sleep();
     c90:	4b19      	ldr	r3, [pc, #100]	; (cf8 <cryptoauthlib_init+0xa4>)
     c92:	4798      	blx	r3
        
        // Check to make sure the ATECC508A Config zone is locked    
	    status = atcab_is_locked(LOCK_ZONE_CONFIG, &device_locked);
     c94:	1dfc      	adds	r4, r7, #7
     c96:	1dbb      	adds	r3, r7, #6
     c98:	0019      	movs	r1, r3
     c9a:	2000      	movs	r0, #0
     c9c:	4b17      	ldr	r3, [pc, #92]	; (cfc <cryptoauthlib_init+0xa8>)
     c9e:	4798      	blx	r3
     ca0:	0003      	movs	r3, r0
     ca2:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
     ca4:	1dfb      	adds	r3, r7, #7
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	2b00      	cmp	r3, #0
     caa:	d004      	beq.n	cb6 <cryptoauthlib_init+0x62>
        {
            printf("The ATECC508A device is not configured correctly.");
     cac:	4b14      	ldr	r3, [pc, #80]	; (d00 <cryptoauthlib_init+0xac>)
     cae:	0018      	movs	r0, r3
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <cryptoauthlib_init+0x9c>)
     cb2:	4798      	blx	r3
            
            // Break the do/while loop
            break;
     cb4:	e010      	b.n	cd8 <cryptoauthlib_init+0x84>
        }
		
		if(!device_locked)
     cb6:	1dbb      	adds	r3, r7, #6
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	2201      	movs	r2, #1
     cbc:	4053      	eors	r3, r2
     cbe:	b2db      	uxtb	r3, r3
     cc0:	2b00      	cmp	r3, #0
     cc2:	d004      	beq.n	cce <cryptoauthlib_init+0x7a>
        {
	        printf("The ATECC508A device data zone is no configured. \r\n");
     cc4:	4b0f      	ldr	r3, [pc, #60]	; (d04 <cryptoauthlib_init+0xb0>)
     cc6:	0018      	movs	r0, r3
     cc8:	4b0f      	ldr	r3, [pc, #60]	; (d08 <cryptoauthlib_init+0xb4>)
     cca:	4798      	blx	r3
	        // Break the do/while loop
	        break;
     ccc:	e004      	b.n	cd8 <cryptoauthlib_init+0x84>
        }

		eccPrintInfo();
     cce:	4b0f      	ldr	r3, [pc, #60]	; (d0c <cryptoauthlib_init+0xb8>)
     cd0:	4798      	blx	r3
		
        status = ATCA_SUCCESS;
     cd2:	1dfb      	adds	r3, r7, #7
     cd4:	2200      	movs	r2, #0
     cd6:	701a      	strb	r2, [r3, #0]
    } while (false);    
    
    return status;
     cd8:	1dfb      	adds	r3, r7, #7
     cda:	781b      	ldrb	r3, [r3, #0]
}
     cdc:	0018      	movs	r0, r3
     cde:	46bd      	mov	sp, r7
     ce0:	b003      	add	sp, #12
     ce2:	bd90      	pop	{r4, r7, pc}
     ce4:	2000009c 	.word	0x2000009c
     ce8:	00003661 	.word	0x00003661
     cec:	0000c238 	.word	0x0000c238
     cf0:	0000aed9 	.word	0x0000aed9
     cf4:	00003705 	.word	0x00003705
     cf8:	00003765 	.word	0x00003765
     cfc:	000040e9 	.word	0x000040e9
     d00:	0000c268 	.word	0x0000c268
     d04:	0000c29c 	.word	0x0000c29c
     d08:	0000afcd 	.word	0x0000afcd
     d0c:	00000b85 	.word	0x00000b85

00000d10 <genKeyPair>:
    return atca_status;	
}


ATCA_STATUS genKeyPair(void)
{
     d10:	b590      	push	{r4, r7, lr}
     d12:	b083      	sub	sp, #12
     d14:	af00      	add	r7, sp, #0
    ATCA_STATUS atca_status = ATCA_STATUS_UNKNOWN;
     d16:	1cfb      	adds	r3, r7, #3
     d18:	22d5      	movs	r2, #213	; 0xd5
     d1a:	701a      	strb	r2, [r3, #0]
	
    // Generate a new ATECC508A Device ECC-p256 key pair
    memset(&public_key[0], 0, sizeof(public_key));
     d1c:	4b1b      	ldr	r3, [pc, #108]	; (d8c <genKeyPair+0x7c>)
     d1e:	2240      	movs	r2, #64	; 0x40
     d20:	2100      	movs	r1, #0
     d22:	0018      	movs	r0, r3
     d24:	4b1a      	ldr	r3, [pc, #104]	; (d90 <genKeyPair+0x80>)
     d26:	4798      	blx	r3
    atca_status = atcab_genkey(DEVICE_KEY_SLOT, public_key);
     d28:	1cfc      	adds	r4, r7, #3
     d2a:	4b18      	ldr	r3, [pc, #96]	; (d8c <genKeyPair+0x7c>)
     d2c:	0019      	movs	r1, r3
     d2e:	2000      	movs	r0, #0
     d30:	4b18      	ldr	r3, [pc, #96]	; (d94 <genKeyPair+0x84>)
     d32:	4798      	blx	r3
     d34:	0003      	movs	r3, r0
     d36:	7023      	strb	r3, [r4, #0]
    if (atca_status == ATCA_SUCCESS)
     d38:	1cfb      	adds	r3, r7, #3
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d11b      	bne.n	d78 <genKeyPair+0x68>
    {
		printf("\r\npublic_key: Begin\r\n");
     d40:	4b15      	ldr	r3, [pc, #84]	; (d98 <genKeyPair+0x88>)
     d42:	0018      	movs	r0, r3
     d44:	4b15      	ldr	r3, [pc, #84]	; (d9c <genKeyPair+0x8c>)
     d46:	4798      	blx	r3
		for(int i =0; i<ATCA_PUB_KEY_SIZE;i++)
     d48:	2300      	movs	r3, #0
     d4a:	607b      	str	r3, [r7, #4]
     d4c:	e00c      	b.n	d68 <genKeyPair+0x58>
			printf("%x",public_key[i]);
     d4e:	4a0f      	ldr	r2, [pc, #60]	; (d8c <genKeyPair+0x7c>)
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	18d3      	adds	r3, r2, r3
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	001a      	movs	r2, r3
     d58:	4b11      	ldr	r3, [pc, #68]	; (da0 <genKeyPair+0x90>)
     d5a:	0011      	movs	r1, r2
     d5c:	0018      	movs	r0, r3
     d5e:	4b11      	ldr	r3, [pc, #68]	; (da4 <genKeyPair+0x94>)
     d60:	4798      	blx	r3
		for(int i =0; i<ATCA_PUB_KEY_SIZE;i++)
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	3301      	adds	r3, #1
     d66:	607b      	str	r3, [r7, #4]
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	2b3f      	cmp	r3, #63	; 0x3f
     d6c:	ddef      	ble.n	d4e <genKeyPair+0x3e>
		
		printf("\r\npublic_key: end\r\n");
     d6e:	4b0e      	ldr	r3, [pc, #56]	; (da8 <genKeyPair+0x98>)
     d70:	0018      	movs	r0, r3
     d72:	4b0a      	ldr	r3, [pc, #40]	; (d9c <genKeyPair+0x8c>)
     d74:	4798      	blx	r3
     d76:	e003      	b.n	d80 <genKeyPair+0x70>
	}
	else
		printf("failed to generate key pair\r\n");
     d78:	4b0c      	ldr	r3, [pc, #48]	; (dac <genKeyPair+0x9c>)
     d7a:	0018      	movs	r0, r3
     d7c:	4b07      	ldr	r3, [pc, #28]	; (d9c <genKeyPair+0x8c>)
     d7e:	4798      	blx	r3
}
     d80:	46c0      	nop			; (mov r8, r8)
     d82:	0018      	movs	r0, r3
     d84:	46bd      	mov	sp, r7
     d86:	b003      	add	sp, #12
     d88:	bd90      	pop	{r4, r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	200003b0 	.word	0x200003b0
     d90:	0000ad79 	.word	0x0000ad79
     d94:	00003ce5 	.word	0x00003ce5
     d98:	0000c2d0 	.word	0x0000c2d0
     d9c:	0000afcd 	.word	0x0000afcd
     da0:	0000c2e8 	.word	0x0000c2e8
     da4:	0000aed9 	.word	0x0000aed9
     da8:	0000c2ec 	.word	0x0000c2ec
     dac:	0000c31c 	.word	0x0000c31c

00000db0 <genDeviceCSR>:

ATCA_STATUS genDeviceCSR(void)
{
     db0:	b580      	push	{r7, lr}
     db2:	4f2e      	ldr	r7, [pc, #184]	; (e6c <genDeviceCSR+0xbc>)
     db4:	44bd      	add	sp, r7
     db6:	af00      	add	r7, sp, #0
    ATCA_STATUS atca_status = ATCA_STATUS_UNKNOWN;
     db8:	4b2d      	ldr	r3, [pc, #180]	; (e70 <genDeviceCSR+0xc0>)
     dba:	18fb      	adds	r3, r7, r3
     dbc:	22d5      	movs	r2, #213	; 0xd5
     dbe:	701a      	strb	r2, [r3, #0]
    uint8_t csr_buffer[1500];
    size_t csr_buffer_length = 0;
     dc0:	2300      	movs	r3, #0
     dc2:	603b      	str	r3, [r7, #0]
        
	// Generate the AWS IoT device CSR
    csr_buffer_length = sizeof(csr_buffer);
     dc4:	4b2b      	ldr	r3, [pc, #172]	; (e74 <genDeviceCSR+0xc4>)
     dc6:	603b      	str	r3, [r7, #0]
    atca_status = atcacert_create_csr(&g_csr_def_3_device, csr_buffer, &csr_buffer_length);
     dc8:	003a      	movs	r2, r7
     dca:	1d39      	adds	r1, r7, #4
     dcc:	4b2a      	ldr	r3, [pc, #168]	; (e78 <genDeviceCSR+0xc8>)
     dce:	0018      	movs	r0, r3
     dd0:	4b2a      	ldr	r3, [pc, #168]	; (e7c <genDeviceCSR+0xcc>)
     dd2:	4798      	blx	r3
     dd4:	0002      	movs	r2, r0
     dd6:	4b26      	ldr	r3, [pc, #152]	; (e70 <genDeviceCSR+0xc0>)
     dd8:	18fb      	adds	r3, r7, r3
     dda:	701a      	strb	r2, [r3, #0]
        
    if (atca_status == ATCA_SUCCESS)
     ddc:	4b24      	ldr	r3, [pc, #144]	; (e70 <genDeviceCSR+0xc0>)
     dde:	18fb      	adds	r3, r7, r3
     de0:	781b      	ldrb	r3, [r3, #0]
     de2:	2b00      	cmp	r3, #0
     de4:	d135      	bne.n	e52 <genDeviceCSR+0xa2>
    {
		printf("\r\ncsr: Begin, length = %d\r\n",csr_buffer_length);
     de6:	683a      	ldr	r2, [r7, #0]
     de8:	4b25      	ldr	r3, [pc, #148]	; (e80 <genDeviceCSR+0xd0>)
     dea:	0011      	movs	r1, r2
     dec:	0018      	movs	r0, r3
     dee:	4b25      	ldr	r3, [pc, #148]	; (e84 <genDeviceCSR+0xd4>)
     df0:	4798      	blx	r3
	    for(int i =0; i<csr_buffer_length;i++)
     df2:	2300      	movs	r3, #0
     df4:	22bc      	movs	r2, #188	; 0xbc
     df6:	00d2      	lsls	r2, r2, #3
     df8:	18ba      	adds	r2, r7, r2
     dfa:	6013      	str	r3, [r2, #0]
     dfc:	e019      	b.n	e32 <genDeviceCSR+0x82>
			printf("%02x",csr_buffer[i]);
     dfe:	4b22      	ldr	r3, [pc, #136]	; (e88 <genDeviceCSR+0xd8>)
     e00:	22bd      	movs	r2, #189	; 0xbd
     e02:	00d2      	lsls	r2, r2, #3
     e04:	18ba      	adds	r2, r7, r2
     e06:	18d2      	adds	r2, r2, r3
     e08:	23bc      	movs	r3, #188	; 0xbc
     e0a:	00db      	lsls	r3, r3, #3
     e0c:	18fb      	adds	r3, r7, r3
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	18d3      	adds	r3, r2, r3
     e12:	781b      	ldrb	r3, [r3, #0]
     e14:	001a      	movs	r2, r3
     e16:	4b1d      	ldr	r3, [pc, #116]	; (e8c <genDeviceCSR+0xdc>)
     e18:	0011      	movs	r1, r2
     e1a:	0018      	movs	r0, r3
     e1c:	4b19      	ldr	r3, [pc, #100]	; (e84 <genDeviceCSR+0xd4>)
     e1e:	4798      	blx	r3
	    for(int i =0; i<csr_buffer_length;i++)
     e20:	23bc      	movs	r3, #188	; 0xbc
     e22:	00db      	lsls	r3, r3, #3
     e24:	18fb      	adds	r3, r7, r3
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	3301      	adds	r3, #1
     e2a:	22bc      	movs	r2, #188	; 0xbc
     e2c:	00d2      	lsls	r2, r2, #3
     e2e:	18ba      	adds	r2, r7, r2
     e30:	6013      	str	r3, [r2, #0]
     e32:	23bc      	movs	r3, #188	; 0xbc
     e34:	00db      	lsls	r3, r3, #3
     e36:	18fb      	adds	r3, r7, r3
     e38:	681a      	ldr	r2, [r3, #0]
     e3a:	683b      	ldr	r3, [r7, #0]
     e3c:	429a      	cmp	r2, r3
     e3e:	d3de      	bcc.n	dfe <genDeviceCSR+0x4e>
		
		printf("\r\ncsr: end\r\n");
     e40:	4b13      	ldr	r3, [pc, #76]	; (e90 <genDeviceCSR+0xe0>)
     e42:	0018      	movs	r0, r3
     e44:	4b13      	ldr	r3, [pc, #76]	; (e94 <genDeviceCSR+0xe4>)
     e46:	4798      	blx	r3
		
		atca_status = ATCA_SUCCESS;
     e48:	4b09      	ldr	r3, [pc, #36]	; (e70 <genDeviceCSR+0xc0>)
     e4a:	18fb      	adds	r3, r7, r3
     e4c:	2200      	movs	r2, #0
     e4e:	701a      	strb	r2, [r3, #0]
     e50:	e003      	b.n	e5a <genDeviceCSR+0xaa>
    }
    else
		printf("failed to generate device CSR\r\n");
     e52:	4b11      	ldr	r3, [pc, #68]	; (e98 <genDeviceCSR+0xe8>)
     e54:	0018      	movs	r0, r3
     e56:	4b0f      	ldr	r3, [pc, #60]	; (e94 <genDeviceCSR+0xe4>)
     e58:	4798      	blx	r3
		
	return atca_status;
     e5a:	4b05      	ldr	r3, [pc, #20]	; (e70 <genDeviceCSR+0xc0>)
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	0018      	movs	r0, r3
     e62:	46bd      	mov	sp, r7
     e64:	23bd      	movs	r3, #189	; 0xbd
     e66:	00db      	lsls	r3, r3, #3
     e68:	449d      	add	sp, r3
     e6a:	bd80      	pop	{r7, pc}
     e6c:	fffffa18 	.word	0xfffffa18
     e70:	000005e7 	.word	0x000005e7
     e74:	000005dc 	.word	0x000005dc
     e78:	0000bf40 	.word	0x0000bf40
     e7c:	0000224d 	.word	0x0000224d
     e80:	0000c33c 	.word	0x0000c33c
     e84:	0000aed9 	.word	0x0000aed9
     e88:	fffffa1c 	.word	0xfffffa1c
     e8c:	0000c358 	.word	0x0000c358
     e90:	0000c360 	.word	0x0000c360
     e94:	0000afcd 	.word	0x0000afcd
     e98:	0000c36c 	.word	0x0000c36c

00000e9c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	af00      	add	r7, sp, #0
     ea2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     ea4:	687b      	ldr	r3, [r7, #4]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d00c      	beq.n	ec4 <delay_cycles+0x28>
		SysTick->LOAD = n;
     eaa:	4b08      	ldr	r3, [pc, #32]	; (ecc <delay_cycles+0x30>)
     eac:	687a      	ldr	r2, [r7, #4]
     eae:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <delay_cycles+0x30>)
     eb2:	2200      	movs	r2, #0
     eb4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	4b04      	ldr	r3, [pc, #16]	; (ecc <delay_cycles+0x30>)
     eba:	681a      	ldr	r2, [r3, #0]
     ebc:	2380      	movs	r3, #128	; 0x80
     ebe:	025b      	lsls	r3, r3, #9
     ec0:	4013      	ands	r3, r2
     ec2:	d0f9      	beq.n	eb8 <delay_cycles+0x1c>
		};
	}
}
     ec4:	46c0      	nop			; (mov r8, r8)
     ec6:	46bd      	mov	sp, r7
     ec8:	b002      	add	sp, #8
     eca:	bd80      	pop	{r7, pc}
     ecc:	e000e010 	.word	0xe000e010

00000ed0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     ed4:	2000      	movs	r0, #0
     ed6:	4b0f      	ldr	r3, [pc, #60]	; (f14 <delay_init+0x44>)
     ed8:	4798      	blx	r3
     eda:	0002      	movs	r2, r0
     edc:	4b0e      	ldr	r3, [pc, #56]	; (f18 <delay_init+0x48>)
     ede:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     ee0:	4b0d      	ldr	r3, [pc, #52]	; (f18 <delay_init+0x48>)
     ee2:	6818      	ldr	r0, [r3, #0]
     ee4:	4b0d      	ldr	r3, [pc, #52]	; (f1c <delay_init+0x4c>)
     ee6:	22fa      	movs	r2, #250	; 0xfa
     ee8:	0091      	lsls	r1, r2, #2
     eea:	4798      	blx	r3
     eec:	0003      	movs	r3, r0
     eee:	001a      	movs	r2, r3
     ef0:	4b09      	ldr	r3, [pc, #36]	; (f18 <delay_init+0x48>)
     ef2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     ef4:	4b08      	ldr	r3, [pc, #32]	; (f18 <delay_init+0x48>)
     ef6:	6818      	ldr	r0, [r3, #0]
     ef8:	4b08      	ldr	r3, [pc, #32]	; (f1c <delay_init+0x4c>)
     efa:	22fa      	movs	r2, #250	; 0xfa
     efc:	0091      	lsls	r1, r2, #2
     efe:	4798      	blx	r3
     f00:	0003      	movs	r3, r0
     f02:	001a      	movs	r2, r3
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <delay_init+0x50>)
     f06:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f08:	4b06      	ldr	r3, [pc, #24]	; (f24 <delay_init+0x54>)
     f0a:	2205      	movs	r2, #5
     f0c:	601a      	str	r2, [r3, #0]
}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	46bd      	mov	sp, r7
     f12:	bd80      	pop	{r7, pc}
     f14:	00008951 	.word	0x00008951
     f18:	20000094 	.word	0x20000094
     f1c:	000092a5 	.word	0x000092a5
     f20:	20000098 	.word	0x20000098
     f24:	e000e010 	.word	0xe000e010

00000f28 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b082      	sub	sp, #8
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
	while (n--) {
     f30:	e004      	b.n	f3c <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <delay_cycles_us+0x28>)
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	0018      	movs	r0, r3
     f38:	4b06      	ldr	r3, [pc, #24]	; (f54 <delay_cycles_us+0x2c>)
     f3a:	4798      	blx	r3
	while (n--) {
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	1e5a      	subs	r2, r3, #1
     f40:	607a      	str	r2, [r7, #4]
     f42:	2b00      	cmp	r3, #0
     f44:	d1f5      	bne.n	f32 <delay_cycles_us+0xa>
	}
}
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	46bd      	mov	sp, r7
     f4a:	b002      	add	sp, #8
     f4c:	bd80      	pop	{r7, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	20000098 	.word	0x20000098
     f54:	00000e9d 	.word	0x00000e9d

00000f58 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     f58:	b580      	push	{r7, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	af00      	add	r7, sp, #0
     f5e:	6078      	str	r0, [r7, #4]
	while (n--) {
     f60:	e004      	b.n	f6c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     f62:	4b07      	ldr	r3, [pc, #28]	; (f80 <delay_cycles_ms+0x28>)
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	0018      	movs	r0, r3
     f68:	4b06      	ldr	r3, [pc, #24]	; (f84 <delay_cycles_ms+0x2c>)
     f6a:	4798      	blx	r3
	while (n--) {
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	1e5a      	subs	r2, r3, #1
     f70:	607a      	str	r2, [r7, #4]
     f72:	2b00      	cmp	r3, #0
     f74:	d1f5      	bne.n	f62 <delay_cycles_ms+0xa>
	}
}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	46bd      	mov	sp, r7
     f7a:	b002      	add	sp, #8
     f7c:	bd80      	pop	{r7, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	20000094 	.word	0x20000094
     f84:	00000e9d 	.word	0x00000e9d

00000f88 <system_gclk_chan_get_config_defaults>:
{
     f88:	b580      	push	{r7, lr}
     f8a:	b082      	sub	sp, #8
     f8c:	af00      	add	r7, sp, #0
     f8e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	2200      	movs	r2, #0
     f94:	701a      	strb	r2, [r3, #0]
}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	46bd      	mov	sp, r7
     f9a:	b002      	add	sp, #8
     f9c:	bd80      	pop	{r7, pc}
	...

00000fa0 <system_apb_clock_set_mask>:
{
     fa0:	b580      	push	{r7, lr}
     fa2:	b082      	sub	sp, #8
     fa4:	af00      	add	r7, sp, #0
     fa6:	0002      	movs	r2, r0
     fa8:	6039      	str	r1, [r7, #0]
     faa:	1dfb      	adds	r3, r7, #7
     fac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     fae:	1dfb      	adds	r3, r7, #7
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	2b04      	cmp	r3, #4
     fb4:	d827      	bhi.n	1006 <system_apb_clock_set_mask+0x66>
     fb6:	009a      	lsls	r2, r3, #2
     fb8:	4b16      	ldr	r3, [pc, #88]	; (1014 <system_apb_clock_set_mask+0x74>)
     fba:	18d3      	adds	r3, r2, r3
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     fc0:	4b15      	ldr	r3, [pc, #84]	; (1018 <system_apb_clock_set_mask+0x78>)
     fc2:	4a15      	ldr	r2, [pc, #84]	; (1018 <system_apb_clock_set_mask+0x78>)
     fc4:	6951      	ldr	r1, [r2, #20]
     fc6:	683a      	ldr	r2, [r7, #0]
     fc8:	430a      	orrs	r2, r1
     fca:	615a      	str	r2, [r3, #20]
			break;
     fcc:	e01d      	b.n	100a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <system_apb_clock_set_mask+0x78>)
     fd0:	4a11      	ldr	r2, [pc, #68]	; (1018 <system_apb_clock_set_mask+0x78>)
     fd2:	6991      	ldr	r1, [r2, #24]
     fd4:	683a      	ldr	r2, [r7, #0]
     fd6:	430a      	orrs	r2, r1
     fd8:	619a      	str	r2, [r3, #24]
			break;
     fda:	e016      	b.n	100a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     fdc:	4b0e      	ldr	r3, [pc, #56]	; (1018 <system_apb_clock_set_mask+0x78>)
     fde:	4a0e      	ldr	r2, [pc, #56]	; (1018 <system_apb_clock_set_mask+0x78>)
     fe0:	69d1      	ldr	r1, [r2, #28]
     fe2:	683a      	ldr	r2, [r7, #0]
     fe4:	430a      	orrs	r2, r1
     fe6:	61da      	str	r2, [r3, #28]
			break;
     fe8:	e00f      	b.n	100a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     fea:	4b0b      	ldr	r3, [pc, #44]	; (1018 <system_apb_clock_set_mask+0x78>)
     fec:	4a0a      	ldr	r2, [pc, #40]	; (1018 <system_apb_clock_set_mask+0x78>)
     fee:	6a11      	ldr	r1, [r2, #32]
     ff0:	683a      	ldr	r2, [r7, #0]
     ff2:	430a      	orrs	r2, r1
     ff4:	621a      	str	r2, [r3, #32]
			break;
     ff6:	e008      	b.n	100a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     ff8:	4b07      	ldr	r3, [pc, #28]	; (1018 <system_apb_clock_set_mask+0x78>)
     ffa:	4a07      	ldr	r2, [pc, #28]	; (1018 <system_apb_clock_set_mask+0x78>)
     ffc:	6a51      	ldr	r1, [r2, #36]	; 0x24
     ffe:	683a      	ldr	r2, [r7, #0]
    1000:	430a      	orrs	r2, r1
    1002:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1004:	e001      	b.n	100a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    1006:	2317      	movs	r3, #23
    1008:	e000      	b.n	100c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    100a:	2300      	movs	r3, #0
}
    100c:	0018      	movs	r0, r3
    100e:	46bd      	mov	sp, r7
    1010:	b002      	add	sp, #8
    1012:	bd80      	pop	{r7, pc}
    1014:	0000c38c 	.word	0x0000c38c
    1018:	40000400 	.word	0x40000400

0000101c <system_pinmux_get_config_defaults>:
{
    101c:	b580      	push	{r7, lr}
    101e:	b082      	sub	sp, #8
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	2200      	movs	r2, #0
    102e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	2201      	movs	r2, #1
    1034:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	2200      	movs	r2, #0
    103a:	70da      	strb	r2, [r3, #3]
}
    103c:	46c0      	nop			; (mov r8, r8)
    103e:	46bd      	mov	sp, r7
    1040:	b002      	add	sp, #8
    1042:	bd80      	pop	{r7, pc}

00001044 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1048:	4b05      	ldr	r3, [pc, #20]	; (1060 <system_is_debugger_present+0x1c>)
    104a:	789b      	ldrb	r3, [r3, #2]
    104c:	b2db      	uxtb	r3, r3
    104e:	001a      	movs	r2, r3
    1050:	2302      	movs	r3, #2
    1052:	4013      	ands	r3, r2
    1054:	1e5a      	subs	r2, r3, #1
    1056:	4193      	sbcs	r3, r2
    1058:	b2db      	uxtb	r3, r3
}
    105a:	0018      	movs	r0, r3
    105c:	46bd      	mov	sp, r7
    105e:	bd80      	pop	{r7, pc}
    1060:	41002000 	.word	0x41002000

00001064 <system_interrupt_enter_critical_section>:
{
    1064:	b580      	push	{r7, lr}
    1066:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1068:	4b02      	ldr	r3, [pc, #8]	; (1074 <system_interrupt_enter_critical_section+0x10>)
    106a:	4798      	blx	r3
}
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	46bd      	mov	sp, r7
    1070:	bd80      	pop	{r7, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00007ad5 	.word	0x00007ad5

00001078 <system_interrupt_leave_critical_section>:
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    107c:	4b02      	ldr	r3, [pc, #8]	; (1088 <system_interrupt_leave_critical_section+0x10>)
    107e:	4798      	blx	r3
}
    1080:	46c0      	nop			; (mov r8, r8)
    1082:	46bd      	mov	sp, r7
    1084:	bd80      	pop	{r7, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00007b29 	.word	0x00007b29

0000108c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    108c:	b580      	push	{r7, lr}
    108e:	b082      	sub	sp, #8
    1090:	af00      	add	r7, sp, #0
    1092:	0002      	movs	r2, r0
    1094:	1dfb      	adds	r3, r7, #7
    1096:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1098:	4a07      	ldr	r2, [pc, #28]	; (10b8 <system_interrupt_disable+0x2c>)
    109a:	1dfb      	adds	r3, r7, #7
    109c:	781b      	ldrb	r3, [r3, #0]
    109e:	0019      	movs	r1, r3
    10a0:	231f      	movs	r3, #31
    10a2:	400b      	ands	r3, r1
    10a4:	2101      	movs	r1, #1
    10a6:	4099      	lsls	r1, r3
    10a8:	000b      	movs	r3, r1
    10aa:	0019      	movs	r1, r3
    10ac:	2380      	movs	r3, #128	; 0x80
    10ae:	50d1      	str	r1, [r2, r3]
}
    10b0:	46c0      	nop			; (mov r8, r8)
    10b2:	46bd      	mov	sp, r7
    10b4:	b002      	add	sp, #8
    10b6:	bd80      	pop	{r7, pc}
    10b8:	e000e100 	.word	0xe000e100

000010bc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    10bc:	b580      	push	{r7, lr}
    10be:	b084      	sub	sp, #16
    10c0:	af00      	add	r7, sp, #0
    10c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	69db      	ldr	r3, [r3, #28]
    10ce:	2207      	movs	r2, #7
    10d0:	4013      	ands	r3, r2
    10d2:	1e5a      	subs	r2, r3, #1
    10d4:	4193      	sbcs	r3, r2
    10d6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    10d8:	0018      	movs	r0, r3
    10da:	46bd      	mov	sp, r7
    10dc:	b004      	add	sp, #16
    10de:	bd80      	pop	{r7, pc}

000010e0 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    10e0:	b580      	push	{r7, lr}
    10e2:	b082      	sub	sp, #8
    10e4:	af00      	add	r7, sp, #0
    10e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    10e8:	46c0      	nop			; (mov r8, r8)
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	0018      	movs	r0, r3
    10ee:	4b04      	ldr	r3, [pc, #16]	; (1100 <_i2c_master_wait_for_sync+0x20>)
    10f0:	4798      	blx	r3
    10f2:	1e03      	subs	r3, r0, #0
    10f4:	d1f9      	bne.n	10ea <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	46bd      	mov	sp, r7
    10fa:	b002      	add	sp, #8
    10fc:	bd80      	pop	{r7, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	000010bd 	.word	0x000010bd

00001104 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    1104:	b580      	push	{r7, lr}
    1106:	b084      	sub	sp, #16
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	0018      	movs	r0, r3
    1118:	4b0d      	ldr	r3, [pc, #52]	; (1150 <i2c_master_disable+0x4c>)
    111a:	4798      	blx	r3
    111c:	0003      	movs	r3, r0
    111e:	0018      	movs	r0, r3
    1120:	4b0c      	ldr	r3, [pc, #48]	; (1154 <i2c_master_disable+0x50>)
    1122:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	0018      	movs	r0, r3
    1128:	4b0b      	ldr	r3, [pc, #44]	; (1158 <i2c_master_disable+0x54>)
    112a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    112c:	68fb      	ldr	r3, [r7, #12]
    112e:	2283      	movs	r2, #131	; 0x83
    1130:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1132:	68fb      	ldr	r3, [r7, #12]
    1134:	2283      	movs	r2, #131	; 0x83
    1136:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1138:	68fb      	ldr	r3, [r7, #12]
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	2202      	movs	r2, #2
    113e:	4393      	bics	r3, r2
    1140:	001a      	movs	r2, r3
    1142:	68fb      	ldr	r3, [r7, #12]
    1144:	601a      	str	r2, [r3, #0]

}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	46bd      	mov	sp, r7
    114a:	b004      	add	sp, #16
    114c:	bd80      	pop	{r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	0000796d 	.word	0x0000796d
    1154:	0000108d 	.word	0x0000108d
    1158:	000010e1 	.word	0x000010e1

0000115c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	b097      	sub	sp, #92	; 0x5c
    1160:	af00      	add	r7, sp, #0
    1162:	6178      	str	r0, [r7, #20]
    1164:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1166:	2300      	movs	r3, #0
    1168:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    116a:	2300      	movs	r3, #0
    116c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    116e:	2300      	movs	r3, #0
    1170:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    1172:	233b      	movs	r3, #59	; 0x3b
    1174:	2210      	movs	r2, #16
    1176:	4694      	mov	ip, r2
    1178:	44bc      	add	ip, r7
    117a:	4463      	add	r3, ip
    117c:	2200      	movs	r2, #0
    117e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1180:	697b      	ldr	r3, [r7, #20]
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    1186:	697b      	ldr	r3, [r7, #20]
    1188:	681b      	ldr	r3, [r3, #0]
    118a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    118c:	2323      	movs	r3, #35	; 0x23
    118e:	2210      	movs	r2, #16
    1190:	18ba      	adds	r2, r7, r2
    1192:	18d4      	adds	r4, r2, r3
    1194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1196:	0018      	movs	r0, r3
    1198:	4bc0      	ldr	r3, [pc, #768]	; (149c <_i2c_master_set_config+0x340>)
    119a:	4798      	blx	r3
    119c:	0003      	movs	r3, r0
    119e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    11a0:	230c      	movs	r3, #12
    11a2:	2210      	movs	r2, #16
    11a4:	4694      	mov	ip, r2
    11a6:	44bc      	add	ip, r7
    11a8:	4463      	add	r3, ip
    11aa:	0018      	movs	r0, r3
    11ac:	4bbc      	ldr	r3, [pc, #752]	; (14a0 <_i2c_master_set_config+0x344>)
    11ae:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    11b0:	693b      	ldr	r3, [r7, #16]
    11b2:	69db      	ldr	r3, [r3, #28]
    11b4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    11b6:	693b      	ldr	r3, [r7, #16]
    11b8:	6a1b      	ldr	r3, [r3, #32]
    11ba:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    11bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    11be:	2b00      	cmp	r3, #0
    11c0:	d106      	bne.n	11d0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    11c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c4:	2100      	movs	r1, #0
    11c6:	0018      	movs	r0, r3
    11c8:	4bb6      	ldr	r3, [pc, #728]	; (14a4 <_i2c_master_set_config+0x348>)
    11ca:	4798      	blx	r3
    11cc:	0003      	movs	r3, r0
    11ce:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    11d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    11d2:	b2da      	uxtb	r2, r3
    11d4:	230c      	movs	r3, #12
    11d6:	2110      	movs	r1, #16
    11d8:	468c      	mov	ip, r1
    11da:	44bc      	add	ip, r7
    11dc:	4463      	add	r3, ip
    11de:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    11e0:	230c      	movs	r3, #12
    11e2:	2210      	movs	r2, #16
    11e4:	4694      	mov	ip, r2
    11e6:	44bc      	add	ip, r7
    11e8:	4463      	add	r3, ip
    11ea:	2202      	movs	r2, #2
    11ec:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    11ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    11f0:	0c1b      	lsrs	r3, r3, #16
    11f2:	b2db      	uxtb	r3, r3
    11f4:	220c      	movs	r2, #12
    11f6:	2110      	movs	r1, #16
    11f8:	468c      	mov	ip, r1
    11fa:	44bc      	add	ip, r7
    11fc:	4462      	add	r2, ip
    11fe:	0011      	movs	r1, r2
    1200:	0018      	movs	r0, r3
    1202:	4ba9      	ldr	r3, [pc, #676]	; (14a8 <_i2c_master_set_config+0x34c>)
    1204:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1208:	2b00      	cmp	r3, #0
    120a:	d106      	bne.n	121a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    120e:	2101      	movs	r1, #1
    1210:	0018      	movs	r0, r3
    1212:	4ba4      	ldr	r3, [pc, #656]	; (14a4 <_i2c_master_set_config+0x348>)
    1214:	4798      	blx	r3
    1216:	0003      	movs	r3, r0
    1218:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    121a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    121c:	b2da      	uxtb	r2, r3
    121e:	230c      	movs	r3, #12
    1220:	2110      	movs	r1, #16
    1222:	468c      	mov	ip, r1
    1224:	44bc      	add	ip, r7
    1226:	4463      	add	r3, ip
    1228:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    122a:	230c      	movs	r3, #12
    122c:	2210      	movs	r2, #16
    122e:	4694      	mov	ip, r2
    1230:	44bc      	add	ip, r7
    1232:	4463      	add	r3, ip
    1234:	2202      	movs	r2, #2
    1236:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    123a:	0c1b      	lsrs	r3, r3, #16
    123c:	b2db      	uxtb	r3, r3
    123e:	220c      	movs	r2, #12
    1240:	2110      	movs	r1, #16
    1242:	468c      	mov	ip, r1
    1244:	44bc      	add	ip, r7
    1246:	4462      	add	r2, ip
    1248:	0011      	movs	r1, r2
    124a:	0018      	movs	r0, r3
    124c:	4b96      	ldr	r3, [pc, #600]	; (14a8 <_i2c_master_set_config+0x34c>)
    124e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1250:	693b      	ldr	r3, [r7, #16]
    1252:	8a9a      	ldrh	r2, [r3, #20]
    1254:	697b      	ldr	r3, [r7, #20]
    1256:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1258:	693b      	ldr	r3, [r7, #16]
    125a:	8ada      	ldrh	r2, [r3, #22]
    125c:	697b      	ldr	r3, [r7, #20]
    125e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1260:	693b      	ldr	r3, [r7, #16]
    1262:	7e1b      	ldrb	r3, [r3, #24]
    1264:	2b00      	cmp	r3, #0
    1266:	d103      	bne.n	1270 <_i2c_master_set_config+0x114>
    1268:	4b90      	ldr	r3, [pc, #576]	; (14ac <_i2c_master_set_config+0x350>)
    126a:	4798      	blx	r3
    126c:	1e03      	subs	r3, r0, #0
    126e:	d002      	beq.n	1276 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1270:	2380      	movs	r3, #128	; 0x80
    1272:	657b      	str	r3, [r7, #84]	; 0x54
    1274:	e001      	b.n	127a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1276:	2300      	movs	r3, #0
    1278:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    127a:	693b      	ldr	r3, [r7, #16]
    127c:	691b      	ldr	r3, [r3, #16]
    127e:	2b00      	cmp	r3, #0
    1280:	d004      	beq.n	128c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1282:	693b      	ldr	r3, [r7, #16]
    1284:	691b      	ldr	r3, [r3, #16]
    1286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1288:	4313      	orrs	r3, r2
    128a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    128c:	693b      	ldr	r3, [r7, #16]
    128e:	689b      	ldr	r3, [r3, #8]
    1290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1292:	4313      	orrs	r3, r2
    1294:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1296:	693b      	ldr	r3, [r7, #16]
    1298:	2224      	movs	r2, #36	; 0x24
    129a:	5c9b      	ldrb	r3, [r3, r2]
    129c:	2b00      	cmp	r3, #0
    129e:	d004      	beq.n	12aa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    12a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    12a2:	2280      	movs	r2, #128	; 0x80
    12a4:	05d2      	lsls	r2, r2, #23
    12a6:	4313      	orrs	r3, r2
    12a8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    12aa:	693b      	ldr	r3, [r7, #16]
    12ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12ae:	2b00      	cmp	r3, #0
    12b0:	d004      	beq.n	12bc <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    12b2:	693b      	ldr	r3, [r7, #16]
    12b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    12b8:	4313      	orrs	r3, r2
    12ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    12bc:	693b      	ldr	r3, [r7, #16]
    12be:	222c      	movs	r2, #44	; 0x2c
    12c0:	5c9b      	ldrb	r3, [r3, r2]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d105      	bne.n	12d2 <_i2c_master_set_config+0x176>
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	689a      	ldr	r2, [r3, #8]
    12ca:	2380      	movs	r3, #128	; 0x80
    12cc:	049b      	lsls	r3, r3, #18
    12ce:	429a      	cmp	r2, r3
    12d0:	d104      	bne.n	12dc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    12d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    12d4:	2280      	movs	r2, #128	; 0x80
    12d6:	0512      	lsls	r2, r2, #20
    12d8:	4313      	orrs	r3, r2
    12da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    12dc:	693b      	ldr	r3, [r7, #16]
    12de:	222d      	movs	r2, #45	; 0x2d
    12e0:	5c9b      	ldrb	r3, [r3, r2]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d004      	beq.n	12f0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    12e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    12e8:	2280      	movs	r2, #128	; 0x80
    12ea:	0412      	lsls	r2, r2, #16
    12ec:	4313      	orrs	r3, r2
    12ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    12f0:	693b      	ldr	r3, [r7, #16]
    12f2:	222e      	movs	r2, #46	; 0x2e
    12f4:	5c9b      	ldrb	r3, [r3, r2]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d004      	beq.n	1304 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    12fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    12fc:	2280      	movs	r2, #128	; 0x80
    12fe:	03d2      	lsls	r2, r2, #15
    1300:	4313      	orrs	r3, r2
    1302:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1306:	681a      	ldr	r2, [r3, #0]
    1308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    130a:	431a      	orrs	r2, r3
    130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    130e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	0052      	lsls	r2, r2, #1
    1316:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1318:	2323      	movs	r3, #35	; 0x23
    131a:	2210      	movs	r2, #16
    131c:	4694      	mov	ip, r2
    131e:	44bc      	add	ip, r7
    1320:	4463      	add	r3, ip
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	3312      	adds	r3, #18
    1326:	b2db      	uxtb	r3, r3
    1328:	0018      	movs	r0, r3
    132a:	4b61      	ldr	r3, [pc, #388]	; (14b0 <_i2c_master_set_config+0x354>)
    132c:	4798      	blx	r3
    132e:	0003      	movs	r3, r0
    1330:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    1332:	693b      	ldr	r3, [r7, #16]
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	22fa      	movs	r2, #250	; 0xfa
    1338:	0092      	lsls	r2, r2, #2
    133a:	4353      	muls	r3, r2
    133c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    133e:	693b      	ldr	r3, [r7, #16]
    1340:	685b      	ldr	r3, [r3, #4]
    1342:	22fa      	movs	r2, #250	; 0xfa
    1344:	0092      	lsls	r2, r2, #2
    1346:	4353      	muls	r3, r2
    1348:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    134a:	693b      	ldr	r3, [r7, #16]
    134c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    134e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    1350:	4b58      	ldr	r3, [pc, #352]	; (14b4 <_i2c_master_set_config+0x358>)
    1352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1354:	4798      	blx	r3
    1356:	0005      	movs	r5, r0
    1358:	000e      	movs	r6, r1
    135a:	4b56      	ldr	r3, [pc, #344]	; (14b4 <_i2c_master_set_config+0x358>)
    135c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    135e:	4798      	blx	r3
    1360:	60b8      	str	r0, [r7, #8]
    1362:	60f9      	str	r1, [r7, #12]
    1364:	4b53      	ldr	r3, [pc, #332]	; (14b4 <_i2c_master_set_config+0x358>)
    1366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1368:	4798      	blx	r3
    136a:	4c53      	ldr	r4, [pc, #332]	; (14b8 <_i2c_master_set_config+0x35c>)
    136c:	4a53      	ldr	r2, [pc, #332]	; (14bc <_i2c_master_set_config+0x360>)
    136e:	4b54      	ldr	r3, [pc, #336]	; (14c0 <_i2c_master_set_config+0x364>)
    1370:	47a0      	blx	r4
    1372:	0003      	movs	r3, r0
    1374:	000c      	movs	r4, r1
    1376:	603b      	str	r3, [r7, #0]
    1378:	607c      	str	r4, [r7, #4]
    137a:	4b4e      	ldr	r3, [pc, #312]	; (14b4 <_i2c_master_set_config+0x358>)
    137c:	6a38      	ldr	r0, [r7, #32]
    137e:	4798      	blx	r3
    1380:	0002      	movs	r2, r0
    1382:	000b      	movs	r3, r1
    1384:	4c4c      	ldr	r4, [pc, #304]	; (14b8 <_i2c_master_set_config+0x35c>)
    1386:	6838      	ldr	r0, [r7, #0]
    1388:	6879      	ldr	r1, [r7, #4]
    138a:	47a0      	blx	r4
    138c:	0003      	movs	r3, r0
    138e:	000c      	movs	r4, r1
    1390:	0018      	movs	r0, r3
    1392:	0021      	movs	r1, r4
    1394:	4c4b      	ldr	r4, [pc, #300]	; (14c4 <_i2c_master_set_config+0x368>)
    1396:	2200      	movs	r2, #0
    1398:	4b4b      	ldr	r3, [pc, #300]	; (14c8 <_i2c_master_set_config+0x36c>)
    139a:	47a0      	blx	r4
    139c:	0003      	movs	r3, r0
    139e:	000c      	movs	r4, r1
    13a0:	001a      	movs	r2, r3
    13a2:	0023      	movs	r3, r4
    13a4:	4c44      	ldr	r4, [pc, #272]	; (14b8 <_i2c_master_set_config+0x35c>)
    13a6:	68b8      	ldr	r0, [r7, #8]
    13a8:	68f9      	ldr	r1, [r7, #12]
    13aa:	47a0      	blx	r4
    13ac:	0003      	movs	r3, r0
    13ae:	000c      	movs	r4, r1
    13b0:	001a      	movs	r2, r3
    13b2:	0023      	movs	r3, r4
    13b4:	4c45      	ldr	r4, [pc, #276]	; (14cc <_i2c_master_set_config+0x370>)
    13b6:	0028      	movs	r0, r5
    13b8:	0031      	movs	r1, r6
    13ba:	47a0      	blx	r4
    13bc:	0003      	movs	r3, r0
    13be:	000c      	movs	r4, r1
    13c0:	001d      	movs	r5, r3
    13c2:	0026      	movs	r6, r4
    13c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    13c6:	005a      	lsls	r2, r3, #1
    13c8:	4b3a      	ldr	r3, [pc, #232]	; (14b4 <_i2c_master_set_config+0x358>)
    13ca:	0010      	movs	r0, r2
    13cc:	4798      	blx	r3
    13ce:	0002      	movs	r2, r0
    13d0:	000b      	movs	r3, r1
    13d2:	4c3c      	ldr	r4, [pc, #240]	; (14c4 <_i2c_master_set_config+0x368>)
    13d4:	0028      	movs	r0, r5
    13d6:	0031      	movs	r1, r6
    13d8:	47a0      	blx	r4
    13da:	0003      	movs	r3, r0
    13dc:	000c      	movs	r4, r1
    13de:	0018      	movs	r0, r3
    13e0:	0021      	movs	r1, r4
    13e2:	4c3a      	ldr	r4, [pc, #232]	; (14cc <_i2c_master_set_config+0x370>)
    13e4:	2200      	movs	r2, #0
    13e6:	4b3a      	ldr	r3, [pc, #232]	; (14d0 <_i2c_master_set_config+0x374>)
    13e8:	47a0      	blx	r4
    13ea:	0003      	movs	r3, r0
    13ec:	000c      	movs	r4, r1
    13ee:	001d      	movs	r5, r3
    13f0:	0026      	movs	r6, r4
    13f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    13f4:	005a      	lsls	r2, r3, #1
    13f6:	4b2f      	ldr	r3, [pc, #188]	; (14b4 <_i2c_master_set_config+0x358>)
    13f8:	0010      	movs	r0, r2
    13fa:	4798      	blx	r3
    13fc:	0002      	movs	r2, r0
    13fe:	000b      	movs	r3, r1
    1400:	4c34      	ldr	r4, [pc, #208]	; (14d4 <_i2c_master_set_config+0x378>)
    1402:	0028      	movs	r0, r5
    1404:	0031      	movs	r1, r6
    1406:	47a0      	blx	r4
    1408:	0003      	movs	r3, r0
    140a:	000c      	movs	r4, r1
    140c:	0019      	movs	r1, r3
    140e:	0022      	movs	r2, r4
    1410:	4b31      	ldr	r3, [pc, #196]	; (14d8 <_i2c_master_set_config+0x37c>)
    1412:	0008      	movs	r0, r1
    1414:	0011      	movs	r1, r2
    1416:	4798      	blx	r3
    1418:	0003      	movs	r3, r0
    141a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    141c:	693b      	ldr	r3, [r7, #16]
    141e:	689a      	ldr	r2, [r3, #8]
    1420:	2380      	movs	r3, #128	; 0x80
    1422:	049b      	lsls	r3, r3, #18
    1424:	429a      	cmp	r2, r3
    1426:	d16a      	bne.n	14fe <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1428:	4b22      	ldr	r3, [pc, #136]	; (14b4 <_i2c_master_set_config+0x358>)
    142a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    142c:	4798      	blx	r3
    142e:	4c25      	ldr	r4, [pc, #148]	; (14c4 <_i2c_master_set_config+0x368>)
    1430:	0002      	movs	r2, r0
    1432:	000b      	movs	r3, r1
    1434:	47a0      	blx	r4
    1436:	0003      	movs	r3, r0
    1438:	000c      	movs	r4, r1
    143a:	001d      	movs	r5, r3
    143c:	0026      	movs	r6, r4
    143e:	4b1d      	ldr	r3, [pc, #116]	; (14b4 <_i2c_master_set_config+0x358>)
    1440:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1442:	4798      	blx	r3
    1444:	4c1c      	ldr	r4, [pc, #112]	; (14b8 <_i2c_master_set_config+0x35c>)
    1446:	2200      	movs	r2, #0
    1448:	4b24      	ldr	r3, [pc, #144]	; (14dc <_i2c_master_set_config+0x380>)
    144a:	47a0      	blx	r4
    144c:	0003      	movs	r3, r0
    144e:	000c      	movs	r4, r1
    1450:	001a      	movs	r2, r3
    1452:	0023      	movs	r3, r4
    1454:	4c1f      	ldr	r4, [pc, #124]	; (14d4 <_i2c_master_set_config+0x378>)
    1456:	0028      	movs	r0, r5
    1458:	0031      	movs	r1, r6
    145a:	47a0      	blx	r4
    145c:	0003      	movs	r3, r0
    145e:	000c      	movs	r4, r1
    1460:	0018      	movs	r0, r3
    1462:	0021      	movs	r1, r4
    1464:	4c19      	ldr	r4, [pc, #100]	; (14cc <_i2c_master_set_config+0x370>)
    1466:	2200      	movs	r2, #0
    1468:	4b19      	ldr	r3, [pc, #100]	; (14d0 <_i2c_master_set_config+0x374>)
    146a:	47a0      	blx	r4
    146c:	0003      	movs	r3, r0
    146e:	000c      	movs	r4, r1
    1470:	0019      	movs	r1, r3
    1472:	0022      	movs	r2, r4
    1474:	4b18      	ldr	r3, [pc, #96]	; (14d8 <_i2c_master_set_config+0x37c>)
    1476:	0008      	movs	r0, r1
    1478:	0011      	movs	r1, r2
    147a:	4798      	blx	r3
    147c:	0003      	movs	r3, r0
    147e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1482:	2b00      	cmp	r3, #0
    1484:	d02e      	beq.n	14e4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1486:	4b16      	ldr	r3, [pc, #88]	; (14e0 <_i2c_master_set_config+0x384>)
    1488:	6a79      	ldr	r1, [r7, #36]	; 0x24
    148a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    148c:	4798      	blx	r3
    148e:	0003      	movs	r3, r0
    1490:	1e9a      	subs	r2, r3, #2
    1492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1494:	1ad3      	subs	r3, r2, r3
    1496:	653b      	str	r3, [r7, #80]	; 0x50
    1498:	e031      	b.n	14fe <_i2c_master_set_config+0x3a2>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	0000789d 	.word	0x0000789d
    14a0:	0000101d 	.word	0x0000101d
    14a4:	000076e1 	.word	0x000076e1
    14a8:	00008d39 	.word	0x00008d39
    14ac:	00001045 	.word	0x00001045
    14b0:	00008b01 	.word	0x00008b01
    14b4:	0000ac2d 	.word	0x0000ac2d
    14b8:	0000a099 	.word	0x0000a099
    14bc:	e826d695 	.word	0xe826d695
    14c0:	3e112e0b 	.word	0x3e112e0b
    14c4:	00009411 	.word	0x00009411
    14c8:	40240000 	.word	0x40240000
    14cc:	0000a599 	.word	0x0000a599
    14d0:	3ff00000 	.word	0x3ff00000
    14d4:	00009a31 	.word	0x00009a31
    14d8:	0000abc5 	.word	0x0000abc5
    14dc:	40080000 	.word	0x40080000
    14e0:	000092a5 	.word	0x000092a5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    14e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14e6:	005a      	lsls	r2, r3, #1
    14e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14ea:	18d3      	adds	r3, r2, r3
    14ec:	1e5a      	subs	r2, r3, #1
    14ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14f0:	0059      	lsls	r1, r3, #1
    14f2:	4b1d      	ldr	r3, [pc, #116]	; (1568 <_i2c_master_set_config+0x40c>)
    14f4:	0010      	movs	r0, r2
    14f6:	4798      	blx	r3
    14f8:	0003      	movs	r3, r0
    14fa:	3b01      	subs	r3, #1
    14fc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    14fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1500:	2bff      	cmp	r3, #255	; 0xff
    1502:	dc08      	bgt.n	1516 <_i2c_master_set_config+0x3ba>
    1504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1506:	2b00      	cmp	r3, #0
    1508:	db05      	blt.n	1516 <_i2c_master_set_config+0x3ba>
    150a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    150c:	2bff      	cmp	r3, #255	; 0xff
    150e:	dc02      	bgt.n	1516 <_i2c_master_set_config+0x3ba>
    1510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1512:	2b00      	cmp	r3, #0
    1514:	da06      	bge.n	1524 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1516:	233b      	movs	r3, #59	; 0x3b
    1518:	2210      	movs	r2, #16
    151a:	4694      	mov	ip, r2
    151c:	44bc      	add	ip, r7
    151e:	4463      	add	r3, ip
    1520:	2240      	movs	r2, #64	; 0x40
    1522:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1524:	233b      	movs	r3, #59	; 0x3b
    1526:	2210      	movs	r2, #16
    1528:	4694      	mov	ip, r2
    152a:	44bc      	add	ip, r7
    152c:	4463      	add	r3, ip
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	2b40      	cmp	r3, #64	; 0x40
    1532:	d00e      	beq.n	1552 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1536:	22ff      	movs	r2, #255	; 0xff
    1538:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    153a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    153c:	041b      	lsls	r3, r3, #16
    153e:	0019      	movs	r1, r3
    1540:	23ff      	movs	r3, #255	; 0xff
    1542:	041b      	lsls	r3, r3, #16
    1544:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1546:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    154a:	0612      	lsls	r2, r2, #24
    154c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    154e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1550:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1552:	233b      	movs	r3, #59	; 0x3b
    1554:	2210      	movs	r2, #16
    1556:	4694      	mov	ip, r2
    1558:	44bc      	add	ip, r7
    155a:	4463      	add	r3, ip
    155c:	781b      	ldrb	r3, [r3, #0]
}
    155e:	0018      	movs	r0, r3
    1560:	46bd      	mov	sp, r7
    1562:	b017      	add	sp, #92	; 0x5c
    1564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	000092a5 	.word	0x000092a5

0000156c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    156c:	b590      	push	{r4, r7, lr}
    156e:	b08b      	sub	sp, #44	; 0x2c
    1570:	af00      	add	r7, sp, #0
    1572:	60f8      	str	r0, [r7, #12]
    1574:	60b9      	str	r1, [r7, #8]
    1576:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	68ba      	ldr	r2, [r7, #8]
    157c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1584:	68fb      	ldr	r3, [r7, #12]
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	0018      	movs	r0, r3
    158a:	4b44      	ldr	r3, [pc, #272]	; (169c <i2c_master_init+0x130>)
    158c:	4798      	blx	r3
    158e:	0003      	movs	r3, r0
    1590:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    1592:	69bb      	ldr	r3, [r7, #24]
    1594:	2b05      	cmp	r3, #5
    1596:	d104      	bne.n	15a2 <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1598:	2301      	movs	r3, #1
    159a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    159c:	2318      	movs	r3, #24
    159e:	623b      	str	r3, [r7, #32]
    15a0:	e004      	b.n	15ac <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    15a2:	69bb      	ldr	r3, [r7, #24]
    15a4:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15a6:	69bb      	ldr	r3, [r7, #24]
    15a8:	3312      	adds	r3, #18
    15aa:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    15ac:	69bb      	ldr	r3, [r7, #24]
    15ae:	2b05      	cmp	r3, #5
    15b0:	d108      	bne.n	15c4 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    15b2:	2201      	movs	r2, #1
    15b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15b6:	409a      	lsls	r2, r3
    15b8:	0013      	movs	r3, r2
    15ba:	0019      	movs	r1, r3
    15bc:	2003      	movs	r0, #3
    15be:	4b38      	ldr	r3, [pc, #224]	; (16a0 <i2c_master_init+0x134>)
    15c0:	4798      	blx	r3
    15c2:	e007      	b.n	15d4 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    15c4:	2201      	movs	r2, #1
    15c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15c8:	409a      	lsls	r2, r3
    15ca:	0013      	movs	r3, r2
    15cc:	0019      	movs	r1, r3
    15ce:	2002      	movs	r0, #2
    15d0:	4b33      	ldr	r3, [pc, #204]	; (16a0 <i2c_master_init+0x134>)
    15d2:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    15d4:	2314      	movs	r3, #20
    15d6:	18fb      	adds	r3, r7, r3
    15d8:	0018      	movs	r0, r3
    15da:	4b32      	ldr	r3, [pc, #200]	; (16a4 <i2c_master_init+0x138>)
    15dc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	7b1a      	ldrb	r2, [r3, #12]
    15e2:	2314      	movs	r3, #20
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    15e8:	6a3b      	ldr	r3, [r7, #32]
    15ea:	b2db      	uxtb	r3, r3
    15ec:	2214      	movs	r2, #20
    15ee:	18ba      	adds	r2, r7, r2
    15f0:	0011      	movs	r1, r2
    15f2:	0018      	movs	r0, r3
    15f4:	4b2c      	ldr	r3, [pc, #176]	; (16a8 <i2c_master_init+0x13c>)
    15f6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    15f8:	6a3b      	ldr	r3, [r7, #32]
    15fa:	b2db      	uxtb	r3, r3
    15fc:	0018      	movs	r0, r3
    15fe:	4b2b      	ldr	r3, [pc, #172]	; (16ac <i2c_master_init+0x140>)
    1600:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	7b1b      	ldrb	r3, [r3, #12]
    1606:	2100      	movs	r1, #0
    1608:	0018      	movs	r0, r3
    160a:	4b29      	ldr	r3, [pc, #164]	; (16b0 <i2c_master_init+0x144>)
    160c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    160e:	69fb      	ldr	r3, [r7, #28]
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	2202      	movs	r2, #2
    1614:	4013      	ands	r3, r2
    1616:	d001      	beq.n	161c <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    1618:	231c      	movs	r3, #28
    161a:	e03b      	b.n	1694 <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    161c:	69fb      	ldr	r3, [r7, #28]
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	2201      	movs	r2, #1
    1622:	4013      	ands	r3, r2
    1624:	d001      	beq.n	162a <i2c_master_init+0xbe>
		return STATUS_BUSY;
    1626:	2305      	movs	r3, #5
    1628:	e034      	b.n	1694 <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	2217      	movs	r2, #23
    1630:	18bc      	adds	r4, r7, r2
    1632:	0018      	movs	r0, r3
    1634:	4b19      	ldr	r3, [pc, #100]	; (169c <i2c_master_init+0x130>)
    1636:	4798      	blx	r3
    1638:	0003      	movs	r3, r0
    163a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    163c:	4a1d      	ldr	r2, [pc, #116]	; (16b4 <i2c_master_init+0x148>)
    163e:	2317      	movs	r3, #23
    1640:	18fb      	adds	r3, r7, r3
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	0011      	movs	r1, r2
    1646:	0018      	movs	r0, r3
    1648:	4b1b      	ldr	r3, [pc, #108]	; (16b8 <i2c_master_init+0x14c>)
    164a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    164c:	2317      	movs	r3, #23
    164e:	18fb      	adds	r3, r7, r3
    1650:	781a      	ldrb	r2, [r3, #0]
    1652:	4b1a      	ldr	r3, [pc, #104]	; (16bc <i2c_master_init+0x150>)
    1654:	0092      	lsls	r2, r2, #2
    1656:	68f9      	ldr	r1, [r7, #12]
    1658:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    165a:	68fb      	ldr	r3, [r7, #12]
    165c:	2200      	movs	r2, #0
    165e:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	2200      	movs	r2, #0
    1664:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    1666:	68fb      	ldr	r3, [r7, #12]
    1668:	2200      	movs	r2, #0
    166a:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    166c:	68fb      	ldr	r3, [r7, #12]
    166e:	2200      	movs	r2, #0
    1670:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	2225      	movs	r2, #37	; 0x25
    1676:	2100      	movs	r1, #0
    1678:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	2200      	movs	r2, #0
    167e:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1680:	69fb      	ldr	r3, [r7, #28]
    1682:	2214      	movs	r2, #20
    1684:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1686:	687a      	ldr	r2, [r7, #4]
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	0011      	movs	r1, r2
    168c:	0018      	movs	r0, r3
    168e:	4b0c      	ldr	r3, [pc, #48]	; (16c0 <i2c_master_init+0x154>)
    1690:	4798      	blx	r3
    1692:	0003      	movs	r3, r0
}
    1694:	0018      	movs	r0, r3
    1696:	46bd      	mov	sp, r7
    1698:	b00b      	add	sp, #44	; 0x2c
    169a:	bd90      	pop	{r4, r7, pc}
    169c:	0000789d 	.word	0x0000789d
    16a0:	00000fa1 	.word	0x00000fa1
    16a4:	00000f89 	.word	0x00000f89
    16a8:	00008a11 	.word	0x00008a11
    16ac:	00008a51 	.word	0x00008a51
    16b0:	00007655 	.word	0x00007655
    16b4:	00001f19 	.word	0x00001f19
    16b8:	00007901 	.word	0x00007901
    16bc:	20000450 	.word	0x20000450
    16c0:	0000115d 	.word	0x0000115d

000016c4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	b084      	sub	sp, #16
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	0018      	movs	r0, r3
    16d6:	4b0f      	ldr	r3, [pc, #60]	; (1714 <i2c_master_reset+0x50>)
    16d8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	0018      	movs	r0, r3
    16de:	4b0e      	ldr	r3, [pc, #56]	; (1718 <i2c_master_reset+0x54>)
    16e0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    16e2:	4b0e      	ldr	r3, [pc, #56]	; (171c <i2c_master_reset+0x58>)
    16e4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	681b      	ldr	r3, [r3, #0]
    16ea:	0018      	movs	r0, r3
    16ec:	4b0c      	ldr	r3, [pc, #48]	; (1720 <i2c_master_reset+0x5c>)
    16ee:	4798      	blx	r3
    16f0:	0003      	movs	r3, r0
    16f2:	0018      	movs	r0, r3
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <i2c_master_reset+0x60>)
    16f6:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    16f8:	4b0b      	ldr	r3, [pc, #44]	; (1728 <i2c_master_reset+0x64>)
    16fa:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	0018      	movs	r0, r3
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <i2c_master_reset+0x50>)
    1702:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	2201      	movs	r2, #1
    1708:	601a      	str	r2, [r3, #0]
}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	46bd      	mov	sp, r7
    170e:	b004      	add	sp, #16
    1710:	bd80      	pop	{r7, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	000010e1 	.word	0x000010e1
    1718:	00001105 	.word	0x00001105
    171c:	00001065 	.word	0x00001065
    1720:	0000796d 	.word	0x0000796d
    1724:	00008b55 	.word	0x00008b55
    1728:	00001079 	.word	0x00001079

0000172c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    172c:	b580      	push	{r7, lr}
    172e:	b084      	sub	sp, #16
    1730:	af00      	add	r7, sp, #0
    1732:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	7e1b      	ldrb	r3, [r3, #24]
    173e:	b2db      	uxtb	r3, r3
    1740:	001a      	movs	r2, r3
    1742:	2302      	movs	r3, #2
    1744:	4013      	ands	r3, r2
    1746:	d00b      	beq.n	1760 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1748:	68fb      	ldr	r3, [r7, #12]
    174a:	2202      	movs	r2, #2
    174c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    174e:	68fb      	ldr	r3, [r7, #12]
    1750:	8b5b      	ldrh	r3, [r3, #26]
    1752:	b29b      	uxth	r3, r3
    1754:	001a      	movs	r2, r3
    1756:	2302      	movs	r3, #2
    1758:	4013      	ands	r3, r2
    175a:	d011      	beq.n	1780 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    175c:	2341      	movs	r3, #65	; 0x41
    175e:	e010      	b.n	1782 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	8b5b      	ldrh	r3, [r3, #26]
    1764:	b29b      	uxth	r3, r3
    1766:	001a      	movs	r2, r3
    1768:	2304      	movs	r3, #4
    176a:	4013      	ands	r3, r2
    176c:	d008      	beq.n	1780 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	685b      	ldr	r3, [r3, #4]
    1772:	22c0      	movs	r2, #192	; 0xc0
    1774:	0292      	lsls	r2, r2, #10
    1776:	431a      	orrs	r2, r3
    1778:	68fb      	ldr	r3, [r7, #12]
    177a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    177c:	2318      	movs	r3, #24
    177e:	e000      	b.n	1782 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1780:	2300      	movs	r3, #0
}
    1782:	0018      	movs	r0, r3
    1784:	46bd      	mov	sp, r7
    1786:	b004      	add	sp, #16
    1788:	bd80      	pop	{r7, pc}

0000178a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    178a:	b580      	push	{r7, lr}
    178c:	b084      	sub	sp, #16
    178e:	af00      	add	r7, sp, #0
    1790:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1798:	230e      	movs	r3, #14
    179a:	18fb      	adds	r3, r7, r3
    179c:	2200      	movs	r2, #0
    179e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17a0:	e00f      	b.n	17c2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    17a2:	230e      	movs	r3, #14
    17a4:	18fb      	adds	r3, r7, r3
    17a6:	220e      	movs	r2, #14
    17a8:	18ba      	adds	r2, r7, r2
    17aa:	8812      	ldrh	r2, [r2, #0]
    17ac:	3201      	adds	r2, #1
    17ae:	801a      	strh	r2, [r3, #0]
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	891b      	ldrh	r3, [r3, #8]
    17b4:	220e      	movs	r2, #14
    17b6:	18ba      	adds	r2, r7, r2
    17b8:	8812      	ldrh	r2, [r2, #0]
    17ba:	429a      	cmp	r2, r3
    17bc:	d301      	bcc.n	17c2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    17be:	2312      	movs	r3, #18
    17c0:	e00e      	b.n	17e0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17c2:	68bb      	ldr	r3, [r7, #8]
    17c4:	7e1b      	ldrb	r3, [r3, #24]
    17c6:	b2db      	uxtb	r3, r3
    17c8:	001a      	movs	r2, r3
    17ca:	2301      	movs	r3, #1
    17cc:	4013      	ands	r3, r2
    17ce:	d106      	bne.n	17de <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    17d0:	68bb      	ldr	r3, [r7, #8]
    17d2:	7e1b      	ldrb	r3, [r3, #24]
    17d4:	b2db      	uxtb	r3, r3
    17d6:	001a      	movs	r2, r3
    17d8:	2302      	movs	r3, #2
    17da:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17dc:	d0e1      	beq.n	17a2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    17de:	2300      	movs	r3, #0
}
    17e0:	0018      	movs	r0, r3
    17e2:	46bd      	mov	sp, r7
    17e4:	b004      	add	sp, #16
    17e6:	bd80      	pop	{r7, pc}

000017e8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    17e8:	b590      	push	{r4, r7, lr}
    17ea:	b085      	sub	sp, #20
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
    17f0:	000a      	movs	r2, r1
    17f2:	1cfb      	adds	r3, r7, #3
    17f4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17fc:	68fb      	ldr	r3, [r7, #12]
    17fe:	685b      	ldr	r3, [r3, #4]
    1800:	2280      	movs	r2, #128	; 0x80
    1802:	02d2      	lsls	r2, r2, #11
    1804:	431a      	orrs	r2, r3
    1806:	68fb      	ldr	r3, [r7, #12]
    1808:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    180a:	1cfb      	adds	r3, r7, #3
    180c:	781a      	ldrb	r2, [r3, #0]
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1812:	230b      	movs	r3, #11
    1814:	18fc      	adds	r4, r7, r3
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	0018      	movs	r0, r3
    181a:	4b07      	ldr	r3, [pc, #28]	; (1838 <_i2c_master_send_hs_master_code+0x50>)
    181c:	4798      	blx	r3
    181e:	0003      	movs	r3, r0
    1820:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1822:	68fb      	ldr	r3, [r7, #12]
    1824:	2201      	movs	r2, #1
    1826:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1828:	230b      	movs	r3, #11
    182a:	18fb      	adds	r3, r7, r3
    182c:	781b      	ldrb	r3, [r3, #0]
}
    182e:	0018      	movs	r0, r3
    1830:	46bd      	mov	sp, r7
    1832:	b005      	add	sp, #20
    1834:	bd90      	pop	{r4, r7, pc}
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	0000178b 	.word	0x0000178b

0000183c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    183c:	b590      	push	{r4, r7, lr}
    183e:	b087      	sub	sp, #28
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
    1844:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    184c:	2314      	movs	r3, #20
    184e:	18fb      	adds	r3, r7, r3
    1850:	683a      	ldr	r2, [r7, #0]
    1852:	8852      	ldrh	r2, [r2, #2]
    1854:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1856:	2312      	movs	r3, #18
    1858:	18fb      	adds	r3, r7, r3
    185a:	2200      	movs	r2, #0
    185c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    185e:	68fb      	ldr	r3, [r7, #12]
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	011b      	lsls	r3, r3, #4
    1864:	0fdb      	lsrs	r3, r3, #31
    1866:	b2db      	uxtb	r3, r3
    1868:	001a      	movs	r2, r3
    186a:	230b      	movs	r3, #11
    186c:	18fb      	adds	r3, r7, r3
    186e:	1e51      	subs	r1, r2, #1
    1870:	418a      	sbcs	r2, r1
    1872:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1874:	683b      	ldr	r3, [r7, #0]
    1876:	7a5b      	ldrb	r3, [r3, #9]
    1878:	2b00      	cmp	r3, #0
    187a:	d006      	beq.n	188a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    187c:	683b      	ldr	r3, [r7, #0]
    187e:	7a9a      	ldrb	r2, [r3, #10]
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	0011      	movs	r1, r2
    1884:	0018      	movs	r0, r3
    1886:	4b85      	ldr	r3, [pc, #532]	; (1a9c <_i2c_master_read_packet+0x260>)
    1888:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	685b      	ldr	r3, [r3, #4]
    188e:	4a84      	ldr	r2, [pc, #528]	; (1aa0 <_i2c_master_read_packet+0x264>)
    1890:	401a      	ands	r2, r3
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1896:	683b      	ldr	r3, [r7, #0]
    1898:	7a1b      	ldrb	r3, [r3, #8]
    189a:	2b00      	cmp	r3, #0
    189c:	d042      	beq.n	1924 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    189e:	683b      	ldr	r3, [r7, #0]
    18a0:	881b      	ldrh	r3, [r3, #0]
    18a2:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18a4:	683b      	ldr	r3, [r7, #0]
    18a6:	7a5b      	ldrb	r3, [r3, #9]
    18a8:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    18aa:	4313      	orrs	r3, r2
    18ac:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18ae:	2380      	movs	r3, #128	; 0x80
    18b0:	021b      	lsls	r3, r3, #8
    18b2:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    18b8:	2317      	movs	r3, #23
    18ba:	18fc      	adds	r4, r7, r3
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	0018      	movs	r0, r3
    18c0:	4b78      	ldr	r3, [pc, #480]	; (1aa4 <_i2c_master_read_packet+0x268>)
    18c2:	4798      	blx	r3
    18c4:	0003      	movs	r3, r0
    18c6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    18c8:	68fb      	ldr	r3, [r7, #12]
    18ca:	685b      	ldr	r3, [r3, #4]
    18cc:	4a74      	ldr	r2, [pc, #464]	; (1aa0 <_i2c_master_read_packet+0x264>)
    18ce:	401a      	ands	r2, r3
    18d0:	68fb      	ldr	r3, [r7, #12]
    18d2:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    18d4:	2317      	movs	r3, #23
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	2b00      	cmp	r3, #0
    18dc:	d107      	bne.n	18ee <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    18de:	2317      	movs	r3, #23
    18e0:	18fc      	adds	r4, r7, r3
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	0018      	movs	r0, r3
    18e6:	4b70      	ldr	r3, [pc, #448]	; (1aa8 <_i2c_master_read_packet+0x26c>)
    18e8:	4798      	blx	r3
    18ea:	0003      	movs	r3, r0
    18ec:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    18ee:	2317      	movs	r3, #23
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	2b00      	cmp	r3, #0
    18f6:	d111      	bne.n	191c <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18f8:	683b      	ldr	r3, [r7, #0]
    18fa:	881b      	ldrh	r3, [r3, #0]
    18fc:	0a1b      	lsrs	r3, r3, #8
    18fe:	b29b      	uxth	r3, r3
    1900:	2278      	movs	r2, #120	; 0x78
    1902:	4313      	orrs	r3, r2
    1904:	b29b      	uxth	r3, r3
    1906:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1908:	683b      	ldr	r3, [r7, #0]
    190a:	7a5b      	ldrb	r3, [r3, #9]
    190c:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    190e:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1910:	2201      	movs	r2, #1
    1912:	4313      	orrs	r3, r2
    1914:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1916:	68fb      	ldr	r3, [r7, #12]
    1918:	625a      	str	r2, [r3, #36]	; 0x24
    191a:	e00f      	b.n	193c <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    191c:	2317      	movs	r3, #23
    191e:	18fb      	adds	r3, r7, r3
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	e0b6      	b.n	1a92 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1924:	683b      	ldr	r3, [r7, #0]
    1926:	881b      	ldrh	r3, [r3, #0]
    1928:	005b      	lsls	r3, r3, #1
    192a:	2201      	movs	r2, #1
    192c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    192e:	683b      	ldr	r3, [r7, #0]
    1930:	7a5b      	ldrb	r3, [r3, #9]
    1932:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1934:	4313      	orrs	r3, r2
    1936:	001a      	movs	r2, r3
    1938:	68fb      	ldr	r3, [r7, #12]
    193a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    193c:	2317      	movs	r3, #23
    193e:	18fc      	adds	r4, r7, r3
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	0018      	movs	r0, r3
    1944:	4b57      	ldr	r3, [pc, #348]	; (1aa4 <_i2c_master_read_packet+0x268>)
    1946:	4798      	blx	r3
    1948:	0003      	movs	r3, r0
    194a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    194c:	230b      	movs	r3, #11
    194e:	18fb      	adds	r3, r7, r3
    1950:	781b      	ldrb	r3, [r3, #0]
    1952:	2b00      	cmp	r3, #0
    1954:	d00b      	beq.n	196e <_i2c_master_read_packet+0x132>
    1956:	683b      	ldr	r3, [r7, #0]
    1958:	885b      	ldrh	r3, [r3, #2]
    195a:	2b01      	cmp	r3, #1
    195c:	d107      	bne.n	196e <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	685b      	ldr	r3, [r3, #4]
    1962:	2280      	movs	r2, #128	; 0x80
    1964:	02d2      	lsls	r2, r2, #11
    1966:	431a      	orrs	r2, r3
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	605a      	str	r2, [r3, #4]
    196c:	e005      	b.n	197a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	685b      	ldr	r3, [r3, #4]
    1972:	4a4b      	ldr	r2, [pc, #300]	; (1aa0 <_i2c_master_read_packet+0x264>)
    1974:	401a      	ands	r2, r3
    1976:	68fb      	ldr	r3, [r7, #12]
    1978:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    197a:	2317      	movs	r3, #23
    197c:	18fb      	adds	r3, r7, r3
    197e:	781b      	ldrb	r3, [r3, #0]
    1980:	2b00      	cmp	r3, #0
    1982:	d107      	bne.n	1994 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1984:	2317      	movs	r3, #23
    1986:	18fc      	adds	r4, r7, r3
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	0018      	movs	r0, r3
    198c:	4b46      	ldr	r3, [pc, #280]	; (1aa8 <_i2c_master_read_packet+0x26c>)
    198e:	4798      	blx	r3
    1990:	0003      	movs	r3, r0
    1992:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1994:	2317      	movs	r3, #23
    1996:	18fb      	adds	r3, r7, r3
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d000      	beq.n	19a0 <_i2c_master_read_packet+0x164>
    199e:	e075      	b.n	1a8c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    19a0:	e04b      	b.n	1a3a <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    19a2:	68fb      	ldr	r3, [r7, #12]
    19a4:	8b5b      	ldrh	r3, [r3, #26]
    19a6:	b29b      	uxth	r3, r3
    19a8:	001a      	movs	r2, r3
    19aa:	2320      	movs	r3, #32
    19ac:	4013      	ands	r3, r2
    19ae:	d101      	bne.n	19b4 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    19b0:	2341      	movs	r3, #65	; 0x41
    19b2:	e06e      	b.n	1a92 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	7adb      	ldrb	r3, [r3, #11]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d01e      	beq.n	19fa <_i2c_master_read_packet+0x1be>
    19bc:	230b      	movs	r3, #11
    19be:	18fb      	adds	r3, r7, r3
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	2201      	movs	r2, #1
    19c4:	4053      	eors	r3, r2
    19c6:	b2db      	uxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	d004      	beq.n	19d6 <_i2c_master_read_packet+0x19a>
    19cc:	2314      	movs	r3, #20
    19ce:	18fb      	adds	r3, r7, r3
    19d0:	881b      	ldrh	r3, [r3, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d009      	beq.n	19ea <_i2c_master_read_packet+0x1ae>
    19d6:	230b      	movs	r3, #11
    19d8:	18fb      	adds	r3, r7, r3
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	2b00      	cmp	r3, #0
    19de:	d00c      	beq.n	19fa <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    19e0:	2314      	movs	r3, #20
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	881b      	ldrh	r3, [r3, #0]
    19e6:	2b01      	cmp	r3, #1
    19e8:	d107      	bne.n	19fa <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	685b      	ldr	r3, [r3, #4]
    19ee:	2280      	movs	r2, #128	; 0x80
    19f0:	02d2      	lsls	r2, r2, #11
    19f2:	431a      	orrs	r2, r3
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	605a      	str	r2, [r3, #4]
    19f8:	e01a      	b.n	1a30 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	0018      	movs	r0, r3
    19fe:	4b2b      	ldr	r3, [pc, #172]	; (1aac <_i2c_master_read_packet+0x270>)
    1a00:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1a02:	683b      	ldr	r3, [r7, #0]
    1a04:	685a      	ldr	r2, [r3, #4]
    1a06:	2312      	movs	r3, #18
    1a08:	18fb      	adds	r3, r7, r3
    1a0a:	881b      	ldrh	r3, [r3, #0]
    1a0c:	2112      	movs	r1, #18
    1a0e:	1879      	adds	r1, r7, r1
    1a10:	1c58      	adds	r0, r3, #1
    1a12:	8008      	strh	r0, [r1, #0]
    1a14:	18d3      	adds	r3, r2, r3
    1a16:	68fa      	ldr	r2, [r7, #12]
    1a18:	2128      	movs	r1, #40	; 0x28
    1a1a:	5c52      	ldrb	r2, [r2, r1]
    1a1c:	b2d2      	uxtb	r2, r2
    1a1e:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1a20:	2317      	movs	r3, #23
    1a22:	18fc      	adds	r4, r7, r3
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	0018      	movs	r0, r3
    1a28:	4b1e      	ldr	r3, [pc, #120]	; (1aa4 <_i2c_master_read_packet+0x268>)
    1a2a:	4798      	blx	r3
    1a2c:	0003      	movs	r3, r0
    1a2e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1a30:	2317      	movs	r3, #23
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d109      	bne.n	1a4e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    1a3a:	2314      	movs	r3, #20
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	881b      	ldrh	r3, [r3, #0]
    1a40:	2214      	movs	r2, #20
    1a42:	18ba      	adds	r2, r7, r2
    1a44:	1e59      	subs	r1, r3, #1
    1a46:	8011      	strh	r1, [r2, #0]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d1aa      	bne.n	19a2 <_i2c_master_read_packet+0x166>
    1a4c:	e000      	b.n	1a50 <_i2c_master_read_packet+0x214>
				break;
    1a4e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	7a9b      	ldrb	r3, [r3, #10]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d00a      	beq.n	1a6e <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	0018      	movs	r0, r3
    1a5c:	4b13      	ldr	r3, [pc, #76]	; (1aac <_i2c_master_read_packet+0x270>)
    1a5e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	685b      	ldr	r3, [r3, #4]
    1a64:	22c0      	movs	r2, #192	; 0xc0
    1a66:	0292      	lsls	r2, r2, #10
    1a68:	431a      	orrs	r2, r3
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	0018      	movs	r0, r3
    1a72:	4b0e      	ldr	r3, [pc, #56]	; (1aac <_i2c_master_read_packet+0x270>)
    1a74:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1a76:	683b      	ldr	r3, [r7, #0]
    1a78:	685a      	ldr	r2, [r3, #4]
    1a7a:	2312      	movs	r3, #18
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	881b      	ldrh	r3, [r3, #0]
    1a80:	18d3      	adds	r3, r2, r3
    1a82:	68fa      	ldr	r2, [r7, #12]
    1a84:	2128      	movs	r1, #40	; 0x28
    1a86:	5c52      	ldrb	r2, [r2, r1]
    1a88:	b2d2      	uxtb	r2, r2
    1a8a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1a8c:	2317      	movs	r3, #23
    1a8e:	18fb      	adds	r3, r7, r3
    1a90:	781b      	ldrb	r3, [r3, #0]
}
    1a92:	0018      	movs	r0, r3
    1a94:	46bd      	mov	sp, r7
    1a96:	b007      	add	sp, #28
    1a98:	bd90      	pop	{r4, r7, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	000017e9 	.word	0x000017e9
    1aa0:	fffbffff 	.word	0xfffbffff
    1aa4:	0000178b 	.word	0x0000178b
    1aa8:	0000172d 	.word	0x0000172d
    1aac:	000010e1 	.word	0x000010e1

00001ab0 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
    1ab8:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	8b9b      	ldrh	r3, [r3, #28]
    1abe:	b29b      	uxth	r3, r3
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d001      	beq.n	1ac8 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1ac4:	2305      	movs	r3, #5
    1ac6:	e00c      	b.n	1ae2 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	2201      	movs	r2, #1
    1acc:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1ace:	687b      	ldr	r3, [r7, #4]
    1ad0:	2201      	movs	r2, #1
    1ad2:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1ad4:	683a      	ldr	r2, [r7, #0]
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	0011      	movs	r1, r2
    1ada:	0018      	movs	r0, r3
    1adc:	4b03      	ldr	r3, [pc, #12]	; (1aec <i2c_master_read_packet_wait+0x3c>)
    1ade:	4798      	blx	r3
    1ae0:	0003      	movs	r3, r0
}
    1ae2:	0018      	movs	r0, r3
    1ae4:	46bd      	mov	sp, r7
    1ae6:	b002      	add	sp, #8
    1ae8:	bd80      	pop	{r7, pc}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	0000183d 	.word	0x0000183d

00001af0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1af0:	b590      	push	{r4, r7, lr}
    1af2:	b087      	sub	sp, #28
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
    1af8:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1b00:	2314      	movs	r3, #20
    1b02:	18fb      	adds	r3, r7, r3
    1b04:	683a      	ldr	r2, [r7, #0]
    1b06:	8852      	ldrh	r2, [r2, #2]
    1b08:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	0018      	movs	r0, r3
    1b0e:	4b51      	ldr	r3, [pc, #324]	; (1c54 <_i2c_master_write_packet+0x164>)
    1b10:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1b12:	683b      	ldr	r3, [r7, #0]
    1b14:	7a5b      	ldrb	r3, [r3, #9]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d006      	beq.n	1b28 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1b1a:	683b      	ldr	r3, [r7, #0]
    1b1c:	7a9a      	ldrb	r2, [r3, #10]
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	0011      	movs	r1, r2
    1b22:	0018      	movs	r0, r3
    1b24:	4b4c      	ldr	r3, [pc, #304]	; (1c58 <_i2c_master_write_packet+0x168>)
    1b26:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1b28:	68fb      	ldr	r3, [r7, #12]
    1b2a:	685b      	ldr	r3, [r3, #4]
    1b2c:	4a4b      	ldr	r2, [pc, #300]	; (1c5c <_i2c_master_write_packet+0x16c>)
    1b2e:	401a      	ands	r2, r3
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1b34:	683b      	ldr	r3, [r7, #0]
    1b36:	7a1b      	ldrb	r3, [r3, #8]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d00d      	beq.n	1b58 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b3c:	683b      	ldr	r3, [r7, #0]
    1b3e:	881b      	ldrh	r3, [r3, #0]
    1b40:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b42:	683b      	ldr	r3, [r7, #0]
    1b44:	7a5b      	ldrb	r3, [r3, #9]
    1b46:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b48:	4313      	orrs	r3, r2
    1b4a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b4c:	2380      	movs	r3, #128	; 0x80
    1b4e:	021b      	lsls	r3, r3, #8
    1b50:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	625a      	str	r2, [r3, #36]	; 0x24
    1b56:	e009      	b.n	1b6c <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b58:	683b      	ldr	r3, [r7, #0]
    1b5a:	881b      	ldrh	r3, [r3, #0]
    1b5c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1b5e:	683b      	ldr	r3, [r7, #0]
    1b60:	7a5b      	ldrb	r3, [r3, #9]
    1b62:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b64:	4313      	orrs	r3, r2
    1b66:	001a      	movs	r2, r3
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1b6c:	2317      	movs	r3, #23
    1b6e:	18fc      	adds	r4, r7, r3
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	0018      	movs	r0, r3
    1b74:	4b3a      	ldr	r3, [pc, #232]	; (1c60 <_i2c_master_write_packet+0x170>)
    1b76:	4798      	blx	r3
    1b78:	0003      	movs	r3, r0
    1b7a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1b7c:	2317      	movs	r3, #23
    1b7e:	18fb      	adds	r3, r7, r3
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d107      	bne.n	1b96 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1b86:	2317      	movs	r3, #23
    1b88:	18fc      	adds	r4, r7, r3
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	0018      	movs	r0, r3
    1b8e:	4b35      	ldr	r3, [pc, #212]	; (1c64 <_i2c_master_write_packet+0x174>)
    1b90:	4798      	blx	r3
    1b92:	0003      	movs	r3, r0
    1b94:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1b96:	2317      	movs	r3, #23
    1b98:	18fb      	adds	r3, r7, r3
    1b9a:	781b      	ldrb	r3, [r3, #0]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d152      	bne.n	1c46 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1ba0:	2312      	movs	r3, #18
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	2200      	movs	r2, #0
    1ba6:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1ba8:	e033      	b.n	1c12 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1baa:	68fb      	ldr	r3, [r7, #12]
    1bac:	8b5b      	ldrh	r3, [r3, #26]
    1bae:	b29b      	uxth	r3, r3
    1bb0:	001a      	movs	r2, r3
    1bb2:	2320      	movs	r3, #32
    1bb4:	4013      	ands	r3, r2
    1bb6:	d101      	bne.n	1bbc <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1bb8:	2341      	movs	r3, #65	; 0x41
    1bba:	e047      	b.n	1c4c <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b24      	ldr	r3, [pc, #144]	; (1c54 <_i2c_master_write_packet+0x164>)
    1bc2:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1bc4:	683b      	ldr	r3, [r7, #0]
    1bc6:	685a      	ldr	r2, [r3, #4]
    1bc8:	2312      	movs	r3, #18
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	881b      	ldrh	r3, [r3, #0]
    1bce:	2112      	movs	r1, #18
    1bd0:	1879      	adds	r1, r7, r1
    1bd2:	1c58      	adds	r0, r3, #1
    1bd4:	8008      	strh	r0, [r1, #0]
    1bd6:	18d3      	adds	r3, r2, r3
    1bd8:	7819      	ldrb	r1, [r3, #0]
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	2228      	movs	r2, #40	; 0x28
    1bde:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1be0:	2317      	movs	r3, #23
    1be2:	18fc      	adds	r4, r7, r3
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	0018      	movs	r0, r3
    1be8:	4b1d      	ldr	r3, [pc, #116]	; (1c60 <_i2c_master_write_packet+0x170>)
    1bea:	4798      	blx	r3
    1bec:	0003      	movs	r3, r0
    1bee:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1bf0:	2317      	movs	r3, #23
    1bf2:	18fb      	adds	r3, r7, r3
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d115      	bne.n	1c26 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1bfa:	68fb      	ldr	r3, [r7, #12]
    1bfc:	8b5b      	ldrh	r3, [r3, #26]
    1bfe:	b29b      	uxth	r3, r3
    1c00:	001a      	movs	r2, r3
    1c02:	2304      	movs	r3, #4
    1c04:	4013      	ands	r3, r2
    1c06:	d004      	beq.n	1c12 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1c08:	2317      	movs	r3, #23
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	221e      	movs	r2, #30
    1c0e:	701a      	strb	r2, [r3, #0]
				break;
    1c10:	e00a      	b.n	1c28 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    1c12:	2314      	movs	r3, #20
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	881b      	ldrh	r3, [r3, #0]
    1c18:	2214      	movs	r2, #20
    1c1a:	18ba      	adds	r2, r7, r2
    1c1c:	1e59      	subs	r1, r3, #1
    1c1e:	8011      	strh	r1, [r2, #0]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d1c2      	bne.n	1baa <_i2c_master_write_packet+0xba>
    1c24:	e000      	b.n	1c28 <_i2c_master_write_packet+0x138>
				break;
    1c26:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	7a9b      	ldrb	r3, [r3, #10]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d00a      	beq.n	1c46 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	0018      	movs	r0, r3
    1c34:	4b07      	ldr	r3, [pc, #28]	; (1c54 <_i2c_master_write_packet+0x164>)
    1c36:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	685b      	ldr	r3, [r3, #4]
    1c3c:	22c0      	movs	r2, #192	; 0xc0
    1c3e:	0292      	lsls	r2, r2, #10
    1c40:	431a      	orrs	r2, r3
    1c42:	68fb      	ldr	r3, [r7, #12]
    1c44:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1c46:	2317      	movs	r3, #23
    1c48:	18fb      	adds	r3, r7, r3
    1c4a:	781b      	ldrb	r3, [r3, #0]
}
    1c4c:	0018      	movs	r0, r3
    1c4e:	46bd      	mov	sp, r7
    1c50:	b007      	add	sp, #28
    1c52:	bd90      	pop	{r4, r7, pc}
    1c54:	000010e1 	.word	0x000010e1
    1c58:	000017e9 	.word	0x000017e9
    1c5c:	fffbffff 	.word	0xfffbffff
    1c60:	0000178b 	.word	0x0000178b
    1c64:	0000172d 	.word	0x0000172d

00001c68 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	b082      	sub	sp, #8
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	6078      	str	r0, [r7, #4]
    1c70:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	8b9b      	ldrh	r3, [r3, #28]
    1c76:	b29b      	uxth	r3, r3
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d001      	beq.n	1c80 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    1c7c:	2305      	movs	r3, #5
    1c7e:	e00c      	b.n	1c9a <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	2201      	movs	r2, #1
    1c84:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	2201      	movs	r2, #1
    1c8a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1c8c:	683a      	ldr	r2, [r7, #0]
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	0011      	movs	r1, r2
    1c92:	0018      	movs	r0, r3
    1c94:	4b03      	ldr	r3, [pc, #12]	; (1ca4 <i2c_master_write_packet_wait+0x3c>)
    1c96:	4798      	blx	r3
    1c98:	0003      	movs	r3, r0
}
    1c9a:	0018      	movs	r0, r3
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b002      	add	sp, #8
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00001af1 	.word	0x00001af1

00001ca8 <i2c_master_is_syncing>:
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	69db      	ldr	r3, [r3, #28]
    1cba:	2207      	movs	r2, #7
    1cbc:	4013      	ands	r3, r2
    1cbe:	1e5a      	subs	r2, r3, #1
    1cc0:	4193      	sbcs	r3, r2
    1cc2:	b2db      	uxtb	r3, r3
}
    1cc4:	0018      	movs	r0, r3
    1cc6:	46bd      	mov	sp, r7
    1cc8:	b004      	add	sp, #16
    1cca:	bd80      	pop	{r7, pc}

00001ccc <_i2c_master_wait_for_sync>:
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b082      	sub	sp, #8
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1cd4:	46c0      	nop			; (mov r8, r8)
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	0018      	movs	r0, r3
    1cda:	4b04      	ldr	r3, [pc, #16]	; (1cec <_i2c_master_wait_for_sync+0x20>)
    1cdc:	4798      	blx	r3
    1cde:	1e03      	subs	r3, r0, #0
    1ce0:	d1f9      	bne.n	1cd6 <_i2c_master_wait_for_sync+0xa>
}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	46bd      	mov	sp, r7
    1ce6:	b002      	add	sp, #8
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001ca9 	.word	0x00001ca9

00001cf0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b084      	sub	sp, #16
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	011b      	lsls	r3, r3, #4
    1d04:	0fdb      	lsrs	r3, r3, #31
    1d06:	b2db      	uxtb	r3, r3
    1d08:	001a      	movs	r2, r3
    1d0a:	230b      	movs	r3, #11
    1d0c:	18fb      	adds	r3, r7, r3
    1d0e:	1e51      	subs	r1, r2, #1
    1d10:	418a      	sbcs	r2, r1
    1d12:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1d14:	2308      	movs	r3, #8
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	687a      	ldr	r2, [r7, #4]
    1d1a:	8b52      	ldrh	r2, [r2, #26]
    1d1c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	8b9b      	ldrh	r3, [r3, #28]
    1d22:	b29a      	uxth	r2, r3
    1d24:	2308      	movs	r3, #8
    1d26:	18fb      	adds	r3, r7, r3
    1d28:	2108      	movs	r1, #8
    1d2a:	1879      	adds	r1, r7, r1
    1d2c:	8809      	ldrh	r1, [r1, #0]
    1d2e:	1a8a      	subs	r2, r1, r2
    1d30:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	8b9b      	ldrh	r3, [r3, #28]
    1d36:	b29b      	uxth	r3, r3
    1d38:	3b01      	subs	r3, #1
    1d3a:	b29a      	uxth	r2, r3
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1d40:	230b      	movs	r3, #11
    1d42:	18fb      	adds	r3, r7, r3
    1d44:	781b      	ldrb	r3, [r3, #0]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d010      	beq.n	1d6c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	7adb      	ldrb	r3, [r3, #11]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d01c      	beq.n	1d8c <_i2c_master_read+0x9c>
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	8b9b      	ldrh	r3, [r3, #28]
    1d56:	b29b      	uxth	r3, r3
    1d58:	2b01      	cmp	r3, #1
    1d5a:	d117      	bne.n	1d8c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	685b      	ldr	r3, [r3, #4]
    1d60:	2280      	movs	r2, #128	; 0x80
    1d62:	02d2      	lsls	r2, r2, #11
    1d64:	431a      	orrs	r2, r3
    1d66:	68fb      	ldr	r3, [r7, #12]
    1d68:	605a      	str	r2, [r3, #4]
    1d6a:	e00f      	b.n	1d8c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	7adb      	ldrb	r3, [r3, #11]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d00b      	beq.n	1d8c <_i2c_master_read+0x9c>
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	8b9b      	ldrh	r3, [r3, #28]
    1d78:	b29b      	uxth	r3, r3
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d106      	bne.n	1d8c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1d7e:	68fb      	ldr	r3, [r7, #12]
    1d80:	685b      	ldr	r3, [r3, #4]
    1d82:	2280      	movs	r2, #128	; 0x80
    1d84:	02d2      	lsls	r2, r2, #11
    1d86:	431a      	orrs	r2, r3
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	8b9b      	ldrh	r3, [r3, #28]
    1d90:	b29b      	uxth	r3, r3
    1d92:	2b00      	cmp	r3, #0
    1d94:	d10e      	bne.n	1db4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	7a9b      	ldrb	r3, [r3, #10]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d00a      	beq.n	1db4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	0018      	movs	r0, r3
    1da2:	4b0e      	ldr	r3, [pc, #56]	; (1ddc <_i2c_master_read+0xec>)
    1da4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1da6:	68fb      	ldr	r3, [r7, #12]
    1da8:	685b      	ldr	r3, [r3, #4]
    1daa:	22c0      	movs	r2, #192	; 0xc0
    1dac:	0292      	lsls	r2, r2, #10
    1dae:	431a      	orrs	r2, r3
    1db0:	68fb      	ldr	r3, [r7, #12]
    1db2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	0018      	movs	r0, r3
    1db8:	4b08      	ldr	r3, [pc, #32]	; (1ddc <_i2c_master_read+0xec>)
    1dba:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	6a1a      	ldr	r2, [r3, #32]
    1dc0:	2308      	movs	r3, #8
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	881b      	ldrh	r3, [r3, #0]
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	68fa      	ldr	r2, [r7, #12]
    1dca:	2128      	movs	r1, #40	; 0x28
    1dcc:	5c52      	ldrb	r2, [r2, r1]
    1dce:	b2d2      	uxtb	r2, r2
    1dd0:	701a      	strb	r2, [r3, #0]
}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	46bd      	mov	sp, r7
    1dd6:	b004      	add	sp, #16
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	00001ccd 	.word	0x00001ccd

00001de0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b084      	sub	sp, #16
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1dee:	68fb      	ldr	r3, [r7, #12]
    1df0:	8b5b      	ldrh	r3, [r3, #26]
    1df2:	b29b      	uxth	r3, r3
    1df4:	001a      	movs	r2, r3
    1df6:	2304      	movs	r3, #4
    1df8:	4013      	ands	r3, r2
    1dfa:	d004      	beq.n	1e06 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	2225      	movs	r2, #37	; 0x25
    1e00:	211e      	movs	r1, #30
    1e02:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1e04:	e024      	b.n	1e50 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1e06:	230a      	movs	r3, #10
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	687a      	ldr	r2, [r7, #4]
    1e0c:	8b52      	ldrh	r2, [r2, #26]
    1e0e:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	8b9b      	ldrh	r3, [r3, #28]
    1e14:	b29a      	uxth	r2, r3
    1e16:	230a      	movs	r3, #10
    1e18:	18fb      	adds	r3, r7, r3
    1e1a:	210a      	movs	r1, #10
    1e1c:	1879      	adds	r1, r7, r1
    1e1e:	8809      	ldrh	r1, [r1, #0]
    1e20:	1a8a      	subs	r2, r1, r2
    1e22:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	8b9b      	ldrh	r3, [r3, #28]
    1e28:	b29b      	uxth	r3, r3
    1e2a:	3b01      	subs	r3, #1
    1e2c:	b29a      	uxth	r2, r3
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	0018      	movs	r0, r3
    1e36:	4b08      	ldr	r3, [pc, #32]	; (1e58 <_i2c_master_write+0x78>)
    1e38:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	6a1a      	ldr	r2, [r3, #32]
    1e3e:	230a      	movs	r3, #10
    1e40:	18fb      	adds	r3, r7, r3
    1e42:	881b      	ldrh	r3, [r3, #0]
    1e44:	18d3      	adds	r3, r2, r3
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	b2d9      	uxtb	r1, r3
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	2228      	movs	r2, #40	; 0x28
    1e4e:	5499      	strb	r1, [r3, r2]
}
    1e50:	46bd      	mov	sp, r7
    1e52:	b004      	add	sp, #16
    1e54:	bd80      	pop	{r7, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00001ccd 	.word	0x00001ccd

00001e5c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b084      	sub	sp, #16
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1e6a:	68fb      	ldr	r3, [r7, #12]
    1e6c:	7e1b      	ldrb	r3, [r3, #24]
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	001a      	movs	r2, r3
    1e72:	2301      	movs	r3, #1
    1e74:	4013      	ands	r3, r2
    1e76:	d02b      	beq.n	1ed0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	2201      	movs	r2, #1
    1e7c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1e7e:	68fb      	ldr	r3, [r7, #12]
    1e80:	8b5b      	ldrh	r3, [r3, #26]
    1e82:	b29b      	uxth	r3, r3
    1e84:	001a      	movs	r2, r3
    1e86:	2302      	movs	r3, #2
    1e88:	4013      	ands	r3, r2
    1e8a:	d004      	beq.n	1e96 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	2225      	movs	r2, #37	; 0x25
    1e90:	2141      	movs	r1, #65	; 0x41
    1e92:	5499      	strb	r1, [r3, r2]
    1e94:	e01c      	b.n	1ed0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1e96:	68fb      	ldr	r3, [r7, #12]
    1e98:	8b5b      	ldrh	r3, [r3, #26]
    1e9a:	b29b      	uxth	r3, r3
    1e9c:	001a      	movs	r2, r3
    1e9e:	2304      	movs	r3, #4
    1ea0:	4013      	ands	r3, r2
    1ea2:	d015      	beq.n	1ed0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	2225      	movs	r2, #37	; 0x25
    1ea8:	2118      	movs	r1, #24
    1eaa:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	2200      	movs	r2, #0
    1eb0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	7a9b      	ldrb	r3, [r3, #10]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d00a      	beq.n	1ed0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b13      	ldr	r3, [pc, #76]	; (1f0c <_i2c_master_async_address_response+0xb0>)
    1ec0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1ec2:	68fb      	ldr	r3, [r7, #12]
    1ec4:	685b      	ldr	r3, [r3, #4]
    1ec6:	22c0      	movs	r2, #192	; 0xc0
    1ec8:	0292      	lsls	r2, r2, #10
    1eca:	431a      	orrs	r2, r3
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	8b9b      	ldrh	r3, [r3, #28]
    1ed4:	b29a      	uxth	r2, r3
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	2225      	movs	r2, #37	; 0x25
    1ede:	5c9b      	ldrb	r3, [r3, r2]
    1ee0:	b2db      	uxtb	r3, r3
    1ee2:	2b05      	cmp	r3, #5
    1ee4:	d10e      	bne.n	1f04 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	2224      	movs	r2, #36	; 0x24
    1eea:	5c9b      	ldrb	r3, [r3, r2]
    1eec:	b2db      	uxtb	r3, r3
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d104      	bne.n	1efc <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b06      	ldr	r3, [pc, #24]	; (1f10 <_i2c_master_async_address_response+0xb4>)
    1ef8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1efa:	e003      	b.n	1f04 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	0018      	movs	r0, r3
    1f00:	4b04      	ldr	r3, [pc, #16]	; (1f14 <_i2c_master_async_address_response+0xb8>)
    1f02:	4798      	blx	r3
}
    1f04:	46c0      	nop			; (mov r8, r8)
    1f06:	46bd      	mov	sp, r7
    1f08:	b004      	add	sp, #16
    1f0a:	bd80      	pop	{r7, pc}
    1f0c:	00001ccd 	.word	0x00001ccd
    1f10:	00001de1 	.word	0x00001de1
    1f14:	00001cf1 	.word	0x00001cf1

00001f18 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b086      	sub	sp, #24
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	0002      	movs	r2, r0
    1f20:	1dfb      	adds	r3, r7, #7
    1f22:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1f24:	1dfb      	adds	r3, r7, #7
    1f26:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1f28:	4b93      	ldr	r3, [pc, #588]	; (2178 <STACK_SIZE+0x178>)
    1f2a:	0092      	lsls	r2, r2, #2
    1f2c:	58d3      	ldr	r3, [r2, r3]
    1f2e:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f30:	697b      	ldr	r3, [r7, #20]
    1f32:	681b      	ldr	r3, [r3, #0]
    1f34:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1f36:	693b      	ldr	r3, [r7, #16]
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	011b      	lsls	r3, r3, #4
    1f3c:	0fdb      	lsrs	r3, r3, #31
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	001a      	movs	r2, r3
    1f42:	230f      	movs	r3, #15
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	1e51      	subs	r1, r2, #1
    1f48:	418a      	sbcs	r2, r1
    1f4a:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1f4c:	230e      	movs	r3, #14
    1f4e:	18fb      	adds	r3, r7, r3
    1f50:	697a      	ldr	r2, [r7, #20]
    1f52:	7e52      	ldrb	r2, [r2, #25]
    1f54:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1f56:	697b      	ldr	r3, [r7, #20]
    1f58:	7e1b      	ldrb	r3, [r3, #24]
    1f5a:	b2da      	uxtb	r2, r3
    1f5c:	230e      	movs	r3, #14
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	210e      	movs	r1, #14
    1f62:	1879      	adds	r1, r7, r1
    1f64:	7809      	ldrb	r1, [r1, #0]
    1f66:	400a      	ands	r2, r1
    1f68:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1f6a:	697b      	ldr	r3, [r7, #20]
    1f6c:	8b5b      	ldrh	r3, [r3, #26]
    1f6e:	b29b      	uxth	r3, r3
    1f70:	2b00      	cmp	r3, #0
    1f72:	d109      	bne.n	1f88 <_i2c_master_interrupt_handler+0x70>
    1f74:	697b      	ldr	r3, [r7, #20]
    1f76:	8b9b      	ldrh	r3, [r3, #28]
    1f78:	b29b      	uxth	r3, r3
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d004      	beq.n	1f88 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1f7e:	697b      	ldr	r3, [r7, #20]
    1f80:	0018      	movs	r0, r3
    1f82:	4b7e      	ldr	r3, [pc, #504]	; (217c <STACK_SIZE+0x17c>)
    1f84:	4798      	blx	r3
    1f86:	e070      	b.n	206a <STACK_SIZE+0x6a>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f88:	697b      	ldr	r3, [r7, #20]
    1f8a:	8b5b      	ldrh	r3, [r3, #26]
    1f8c:	b29b      	uxth	r3, r3
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d039      	beq.n	2006 <STACK_SIZE+0x6>
    1f92:	697b      	ldr	r3, [r7, #20]
    1f94:	8b9b      	ldrh	r3, [r3, #28]
    1f96:	b29b      	uxth	r3, r3
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d134      	bne.n	2006 <STACK_SIZE+0x6>
			(module->status == STATUS_BUSY) &&
    1f9c:	697b      	ldr	r3, [r7, #20]
    1f9e:	2225      	movs	r2, #37	; 0x25
    1fa0:	5c9b      	ldrb	r3, [r3, r2]
    1fa2:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1fa4:	2b05      	cmp	r3, #5
    1fa6:	d12e      	bne.n	2006 <STACK_SIZE+0x6>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1fa8:	697b      	ldr	r3, [r7, #20]
    1faa:	2224      	movs	r2, #36	; 0x24
    1fac:	5c9b      	ldrb	r3, [r3, r2]
    1fae:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d128      	bne.n	2006 <STACK_SIZE+0x6>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1fb4:	693b      	ldr	r3, [r7, #16]
    1fb6:	2203      	movs	r2, #3
    1fb8:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1fba:	697b      	ldr	r3, [r7, #20]
    1fbc:	2200      	movs	r2, #0
    1fbe:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1fc0:	697b      	ldr	r3, [r7, #20]
    1fc2:	2225      	movs	r2, #37	; 0x25
    1fc4:	2100      	movs	r1, #0
    1fc6:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1fc8:	697b      	ldr	r3, [r7, #20]
    1fca:	7a9b      	ldrb	r3, [r3, #10]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d00b      	beq.n	1fe8 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1fd0:	697b      	ldr	r3, [r7, #20]
    1fd2:	0018      	movs	r0, r3
    1fd4:	4b6a      	ldr	r3, [pc, #424]	; (2180 <STACK_SIZE+0x180>)
    1fd6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1fd8:	693b      	ldr	r3, [r7, #16]
    1fda:	685b      	ldr	r3, [r3, #4]
    1fdc:	22c0      	movs	r2, #192	; 0xc0
    1fde:	0292      	lsls	r2, r2, #10
    1fe0:	431a      	orrs	r2, r3
    1fe2:	693b      	ldr	r3, [r7, #16]
    1fe4:	605a      	str	r2, [r3, #4]
    1fe6:	e002      	b.n	1fee <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1fe8:	693b      	ldr	r3, [r7, #16]
    1fea:	2201      	movs	r2, #1
    1fec:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1fee:	230e      	movs	r3, #14
    1ff0:	18fb      	adds	r3, r7, r3
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	2201      	movs	r2, #1
    1ff6:	4013      	ands	r3, r2
    1ff8:	d037      	beq.n	206a <STACK_SIZE+0x6a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ffa:	697b      	ldr	r3, [r7, #20]
    1ffc:	68db      	ldr	r3, [r3, #12]
    1ffe:	697a      	ldr	r2, [r7, #20]
    2000:	0010      	movs	r0, r2
    2002:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    2004:	e031      	b.n	206a <STACK_SIZE+0x6a>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    2006:	697b      	ldr	r3, [r7, #20]
    2008:	8b5b      	ldrh	r3, [r3, #26]
    200a:	b29b      	uxth	r3, r3
    200c:	2b00      	cmp	r3, #0
    200e:	d02c      	beq.n	206a <STACK_SIZE+0x6a>
    2010:	697b      	ldr	r3, [r7, #20]
    2012:	8b9b      	ldrh	r3, [r3, #28]
    2014:	b29b      	uxth	r3, r3
    2016:	2b00      	cmp	r3, #0
    2018:	d027      	beq.n	206a <STACK_SIZE+0x6a>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    201a:	693b      	ldr	r3, [r7, #16]
    201c:	8b5b      	ldrh	r3, [r3, #26]
    201e:	b29b      	uxth	r3, r3
    2020:	001a      	movs	r2, r3
    2022:	2320      	movs	r3, #32
    2024:	4013      	ands	r3, r2
    2026:	d111      	bne.n	204c <STACK_SIZE+0x4c>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    2028:	230f      	movs	r3, #15
    202a:	18fb      	adds	r3, r7, r3
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	2201      	movs	r2, #1
    2030:	4053      	eors	r3, r2
    2032:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    2034:	2b00      	cmp	r3, #0
    2036:	d104      	bne.n	2042 <STACK_SIZE+0x42>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    2038:	697b      	ldr	r3, [r7, #20]
    203a:	8b9b      	ldrh	r3, [r3, #28]
    203c:	b29b      	uxth	r3, r3
    203e:	2b01      	cmp	r3, #1
    2040:	d004      	beq.n	204c <STACK_SIZE+0x4c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    2042:	697b      	ldr	r3, [r7, #20]
    2044:	2225      	movs	r2, #37	; 0x25
    2046:	2141      	movs	r1, #65	; 0x41
    2048:	5499      	strb	r1, [r3, r2]
    204a:	e00e      	b.n	206a <STACK_SIZE+0x6a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    204c:	697b      	ldr	r3, [r7, #20]
    204e:	2224      	movs	r2, #36	; 0x24
    2050:	5c9b      	ldrb	r3, [r3, r2]
    2052:	b2db      	uxtb	r3, r3
    2054:	2b00      	cmp	r3, #0
    2056:	d104      	bne.n	2062 <STACK_SIZE+0x62>
			_i2c_master_write(module);
    2058:	697b      	ldr	r3, [r7, #20]
    205a:	0018      	movs	r0, r3
    205c:	4b49      	ldr	r3, [pc, #292]	; (2184 <STACK_SIZE+0x184>)
    205e:	4798      	blx	r3
    2060:	e003      	b.n	206a <STACK_SIZE+0x6a>
		} else {
			_i2c_master_read(module);
    2062:	697b      	ldr	r3, [r7, #20]
    2064:	0018      	movs	r0, r3
    2066:	4b48      	ldr	r3, [pc, #288]	; (2188 <STACK_SIZE+0x188>)
    2068:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    206a:	697b      	ldr	r3, [r7, #20]
    206c:	8b5b      	ldrh	r3, [r3, #26]
    206e:	b29b      	uxth	r3, r3
    2070:	2b00      	cmp	r3, #0
    2072:	d047      	beq.n	2104 <STACK_SIZE+0x104>
    2074:	697b      	ldr	r3, [r7, #20]
    2076:	8b9b      	ldrh	r3, [r3, #28]
    2078:	b29b      	uxth	r3, r3
    207a:	2b00      	cmp	r3, #0
    207c:	d142      	bne.n	2104 <STACK_SIZE+0x104>
			(module->status == STATUS_BUSY) &&
    207e:	697b      	ldr	r3, [r7, #20]
    2080:	2225      	movs	r2, #37	; 0x25
    2082:	5c9b      	ldrb	r3, [r3, r2]
    2084:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2086:	2b05      	cmp	r3, #5
    2088:	d13c      	bne.n	2104 <STACK_SIZE+0x104>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    208a:	697b      	ldr	r3, [r7, #20]
    208c:	2224      	movs	r2, #36	; 0x24
    208e:	5c9b      	ldrb	r3, [r3, r2]
    2090:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    2092:	2b01      	cmp	r3, #1
    2094:	d136      	bne.n	2104 <STACK_SIZE+0x104>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2096:	693b      	ldr	r3, [r7, #16]
    2098:	7e1b      	ldrb	r3, [r3, #24]
    209a:	b2db      	uxtb	r3, r3
    209c:	001a      	movs	r2, r3
    209e:	2302      	movs	r3, #2
    20a0:	4013      	ands	r3, r2
    20a2:	d002      	beq.n	20aa <STACK_SIZE+0xaa>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    20a4:	693b      	ldr	r3, [r7, #16]
    20a6:	2202      	movs	r2, #2
    20a8:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    20aa:	693b      	ldr	r3, [r7, #16]
    20ac:	2203      	movs	r2, #3
    20ae:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    20b0:	697b      	ldr	r3, [r7, #20]
    20b2:	2200      	movs	r2, #0
    20b4:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    20b6:	697b      	ldr	r3, [r7, #20]
    20b8:	2225      	movs	r2, #37	; 0x25
    20ba:	2100      	movs	r1, #0
    20bc:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    20be:	230e      	movs	r3, #14
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	2202      	movs	r2, #2
    20c6:	4013      	ands	r3, r2
    20c8:	d00b      	beq.n	20e2 <STACK_SIZE+0xe2>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    20ca:	697b      	ldr	r3, [r7, #20]
    20cc:	2224      	movs	r2, #36	; 0x24
    20ce:	5c9b      	ldrb	r3, [r3, r2]
    20d0:	b2db      	uxtb	r3, r3
    20d2:	2b01      	cmp	r3, #1
    20d4:	d105      	bne.n	20e2 <STACK_SIZE+0xe2>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    20d6:	697b      	ldr	r3, [r7, #20]
    20d8:	691b      	ldr	r3, [r3, #16]
    20da:	697a      	ldr	r2, [r7, #20]
    20dc:	0010      	movs	r0, r2
    20de:	4798      	blx	r3
    20e0:	e010      	b.n	2104 <STACK_SIZE+0x104>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    20e2:	230e      	movs	r3, #14
    20e4:	18fb      	adds	r3, r7, r3
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	2201      	movs	r2, #1
    20ea:	4013      	ands	r3, r2
    20ec:	d00a      	beq.n	2104 <STACK_SIZE+0x104>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    20ee:	697b      	ldr	r3, [r7, #20]
    20f0:	2224      	movs	r2, #36	; 0x24
    20f2:	5c9b      	ldrb	r3, [r3, r2]
    20f4:	b2db      	uxtb	r3, r3
    20f6:	2b00      	cmp	r3, #0
    20f8:	d104      	bne.n	2104 <STACK_SIZE+0x104>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    20fa:	697b      	ldr	r3, [r7, #20]
    20fc:	68db      	ldr	r3, [r3, #12]
    20fe:	697a      	ldr	r2, [r7, #20]
    2100:	0010      	movs	r0, r2
    2102:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2104:	697b      	ldr	r3, [r7, #20]
    2106:	2225      	movs	r2, #37	; 0x25
    2108:	5c9b      	ldrb	r3, [r3, r2]
    210a:	b2db      	uxtb	r3, r3
    210c:	2b05      	cmp	r3, #5
    210e:	d02e      	beq.n	216e <STACK_SIZE+0x16e>
    2110:	697b      	ldr	r3, [r7, #20]
    2112:	2225      	movs	r2, #37	; 0x25
    2114:	5c9b      	ldrb	r3, [r3, r2]
    2116:	b2db      	uxtb	r3, r3
    2118:	2b00      	cmp	r3, #0
    211a:	d028      	beq.n	216e <STACK_SIZE+0x16e>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    211c:	693b      	ldr	r3, [r7, #16]
    211e:	2203      	movs	r2, #3
    2120:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2122:	697b      	ldr	r3, [r7, #20]
    2124:	2200      	movs	r2, #0
    2126:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    2128:	697b      	ldr	r3, [r7, #20]
    212a:	2200      	movs	r2, #0
    212c:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    212e:	697b      	ldr	r3, [r7, #20]
    2130:	2225      	movs	r2, #37	; 0x25
    2132:	5c9b      	ldrb	r3, [r3, r2]
    2134:	b2db      	uxtb	r3, r3
    2136:	2b41      	cmp	r3, #65	; 0x41
    2138:	d00e      	beq.n	2158 <STACK_SIZE+0x158>
				module->send_stop) {
    213a:	697b      	ldr	r3, [r7, #20]
    213c:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    213e:	2b00      	cmp	r3, #0
    2140:	d00a      	beq.n	2158 <STACK_SIZE+0x158>
			_i2c_master_wait_for_sync(module);
    2142:	697b      	ldr	r3, [r7, #20]
    2144:	0018      	movs	r0, r3
    2146:	4b0e      	ldr	r3, [pc, #56]	; (2180 <STACK_SIZE+0x180>)
    2148:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    214a:	693b      	ldr	r3, [r7, #16]
    214c:	685b      	ldr	r3, [r3, #4]
    214e:	22e0      	movs	r2, #224	; 0xe0
    2150:	02d2      	lsls	r2, r2, #11
    2152:	431a      	orrs	r2, r3
    2154:	693b      	ldr	r3, [r7, #16]
    2156:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    2158:	230e      	movs	r3, #14
    215a:	18fb      	adds	r3, r7, r3
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	2204      	movs	r2, #4
    2160:	4013      	ands	r3, r2
    2162:	d004      	beq.n	216e <STACK_SIZE+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2164:	697b      	ldr	r3, [r7, #20]
    2166:	695b      	ldr	r3, [r3, #20]
    2168:	697a      	ldr	r2, [r7, #20]
    216a:	0010      	movs	r0, r2
    216c:	4798      	blx	r3
		}
	}
}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	46bd      	mov	sp, r7
    2172:	b006      	add	sp, #24
    2174:	bd80      	pop	{r7, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	20000450 	.word	0x20000450
    217c:	00001e5d 	.word	0x00001e5d
    2180:	00001ccd 	.word	0x00001ccd
    2184:	00001de1 	.word	0x00001de1
    2188:	00001cf1 	.word	0x00001cf1

0000218c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    218c:	b580      	push	{r7, lr}
    218e:	b086      	sub	sp, #24
    2190:	af00      	add	r7, sp, #0
    2192:	60f8      	str	r0, [r7, #12]
    2194:	60b9      	str	r1, [r7, #8]
    2196:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2198:	2300      	movs	r3, #0
    219a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	2b00      	cmp	r3, #0
    21a0:	d012      	beq.n	21c8 <_read+0x3c>
		return -1;
    21a2:	2301      	movs	r3, #1
    21a4:	425b      	negs	r3, r3
    21a6:	e013      	b.n	21d0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    21a8:	4b0b      	ldr	r3, [pc, #44]	; (21d8 <_read+0x4c>)
    21aa:	681a      	ldr	r2, [r3, #0]
    21ac:	4b0b      	ldr	r3, [pc, #44]	; (21dc <_read+0x50>)
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	68b9      	ldr	r1, [r7, #8]
    21b2:	0018      	movs	r0, r3
    21b4:	4790      	blx	r2
		ptr++;
    21b6:	68bb      	ldr	r3, [r7, #8]
    21b8:	3301      	adds	r3, #1
    21ba:	60bb      	str	r3, [r7, #8]
		nChars++;
    21bc:	697b      	ldr	r3, [r7, #20]
    21be:	3301      	adds	r3, #1
    21c0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	3b01      	subs	r3, #1
    21c6:	607b      	str	r3, [r7, #4]
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2b00      	cmp	r3, #0
    21cc:	dcec      	bgt.n	21a8 <_read+0x1c>
	}
	return nChars;
    21ce:	697b      	ldr	r3, [r7, #20]
}
    21d0:	0018      	movs	r0, r3
    21d2:	46bd      	mov	sp, r7
    21d4:	b006      	add	sp, #24
    21d6:	bd80      	pop	{r7, pc}
    21d8:	20000420 	.word	0x20000420
    21dc:	20000428 	.word	0x20000428

000021e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b086      	sub	sp, #24
    21e4:	af00      	add	r7, sp, #0
    21e6:	60f8      	str	r0, [r7, #12]
    21e8:	60b9      	str	r1, [r7, #8]
    21ea:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    21ec:	2300      	movs	r3, #0
    21ee:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    21f0:	68fb      	ldr	r3, [r7, #12]
    21f2:	2b01      	cmp	r3, #1
    21f4:	d01d      	beq.n	2232 <_write+0x52>
    21f6:	68fb      	ldr	r3, [r7, #12]
    21f8:	2b02      	cmp	r3, #2
    21fa:	d01a      	beq.n	2232 <_write+0x52>
    21fc:	68fb      	ldr	r3, [r7, #12]
    21fe:	2b03      	cmp	r3, #3
    2200:	d017      	beq.n	2232 <_write+0x52>
		return -1;
    2202:	2301      	movs	r3, #1
    2204:	425b      	negs	r3, r3
    2206:	e018      	b.n	223a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2208:	4b0e      	ldr	r3, [pc, #56]	; (2244 <_write+0x64>)
    220a:	681a      	ldr	r2, [r3, #0]
    220c:	4b0e      	ldr	r3, [pc, #56]	; (2248 <_write+0x68>)
    220e:	6818      	ldr	r0, [r3, #0]
    2210:	68bb      	ldr	r3, [r7, #8]
    2212:	1c59      	adds	r1, r3, #1
    2214:	60b9      	str	r1, [r7, #8]
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	0019      	movs	r1, r3
    221a:	4790      	blx	r2
    221c:	1e03      	subs	r3, r0, #0
    221e:	da02      	bge.n	2226 <_write+0x46>
			return -1;
    2220:	2301      	movs	r3, #1
    2222:	425b      	negs	r3, r3
    2224:	e009      	b.n	223a <_write+0x5a>
		}
		++nChars;
    2226:	697b      	ldr	r3, [r7, #20]
    2228:	3301      	adds	r3, #1
    222a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	3b01      	subs	r3, #1
    2230:	607b      	str	r3, [r7, #4]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2b00      	cmp	r3, #0
    2236:	d1e7      	bne.n	2208 <_write+0x28>
	}
	return nChars;
    2238:	697b      	ldr	r3, [r7, #20]
}
    223a:	0018      	movs	r0, r3
    223c:	46bd      	mov	sp, r7
    223e:	b006      	add	sp, #24
    2240:	bd80      	pop	{r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	20000424 	.word	0x20000424
    2248:	20000428 	.word	0x20000428

0000224c <atcacert_create_csr>:
    return status;
}


int atcacert_create_csr(const atcacert_def_t* csr_def, uint8_t* csr, size_t* csr_size)
{
    224c:	b590      	push	{r4, r7, lr}
    224e:	b0b5      	sub	sp, #212	; 0xd4
    2250:	af02      	add	r7, sp, #8
    2252:	60f8      	str	r0, [r7, #12]
    2254:	60b9      	str	r1, [r7, #8]
    2256:	607a      	str	r2, [r7, #4]
    ATCA_STATUS status = ATCA_SUCCESS;
    2258:	23c7      	movs	r3, #199	; 0xc7
    225a:	18fb      	adds	r3, r7, r3
    225c:	2200      	movs	r2, #0
    225e:	701a      	strb	r2, [r3, #0]
    uint8_t pubkey[ATCA_PUB_KEY_SIZE] = { 0 };
    2260:	2374      	movs	r3, #116	; 0x74
    2262:	18fb      	adds	r3, r7, r3
    2264:	0018      	movs	r0, r3
    2266:	2340      	movs	r3, #64	; 0x40
    2268:	001a      	movs	r2, r3
    226a:	2100      	movs	r1, #0
    226c:	4b8a      	ldr	r3, [pc, #552]	; (2498 <atcacert_create_csr+0x24c>)
    226e:	4798      	blx	r3
    uint8_t sig[ATCA_SIG_SIZE] = { 0 };
    2270:	2334      	movs	r3, #52	; 0x34
    2272:	18fb      	adds	r3, r7, r3
    2274:	0018      	movs	r0, r3
    2276:	2340      	movs	r3, #64	; 0x40
    2278:	001a      	movs	r2, r3
    227a:	2100      	movs	r1, #0
    227c:	4b86      	ldr	r3, [pc, #536]	; (2498 <atcacert_create_csr+0x24c>)
    227e:	4798      	blx	r3
    const atcacert_device_loc_t* pubDevLoc = NULL;
    2280:	2300      	movs	r3, #0
    2282:	22c0      	movs	r2, #192	; 0xc0
    2284:	18ba      	adds	r2, r7, r2
    2286:	6013      	str	r3, [r2, #0]
    const atcacert_cert_loc_t* pubLoc = NULL;
    2288:	2300      	movs	r3, #0
    228a:	22bc      	movs	r2, #188	; 0xbc
    228c:	18ba      	adds	r2, r7, r2
    228e:	6013      	str	r3, [r2, #0]
    uint8_t keySlot = 0;
    2290:	23bb      	movs	r3, #187	; 0xbb
    2292:	18fb      	adds	r3, r7, r3
    2294:	2200      	movs	r2, #0
    2296:	701a      	strb	r2, [r3, #0]
    uint8_t privKeySlot = 0;
    2298:	23ba      	movs	r3, #186	; 0xba
    229a:	18fb      	adds	r3, r7, r3
    229c:	2200      	movs	r2, #0
    229e:	701a      	strb	r2, [r3, #0]
    uint8_t tbsDigest[ATCA_BLOCK_SIZE] = { 0 };
    22a0:	2314      	movs	r3, #20
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	0018      	movs	r0, r3
    22a6:	2320      	movs	r3, #32
    22a8:	001a      	movs	r2, r3
    22aa:	2100      	movs	r1, #0
    22ac:	4b7a      	ldr	r3, [pc, #488]	; (2498 <atcacert_create_csr+0x24c>)
    22ae:	4798      	blx	r3
    size_t csr_max_size = 0;
    22b0:	2300      	movs	r3, #0
    22b2:	22b4      	movs	r2, #180	; 0xb4
    22b4:	18ba      	adds	r2, r7, r2
    22b6:	6013      	str	r3, [r2, #0]

    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d008      	beq.n	22d0 <atcacert_create_csr+0x84>
    22be:	68bb      	ldr	r3, [r7, #8]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d005      	beq.n	22d0 <atcacert_create_csr+0x84>
    22c4:	68bb      	ldr	r3, [r7, #8]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d002      	beq.n	22d0 <atcacert_create_csr+0x84>
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d104      	bne.n	22da <atcacert_create_csr+0x8e>
        {
            status = ATCACERT_E_BAD_PARAMS;
    22d0:	23c7      	movs	r3, #199	; 0xc7
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	2202      	movs	r2, #2
    22d6:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Null input parameter");
    22d8:	e0d6      	b.n	2488 <atcacert_create_csr+0x23c>
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	681a      	ldr	r2, [r3, #0]
    22de:	68fb      	ldr	r3, [r7, #12]
    22e0:	214a      	movs	r1, #74	; 0x4a
    22e2:	5c59      	ldrb	r1, [r3, r1]
    22e4:	204b      	movs	r0, #75	; 0x4b
    22e6:	5c1b      	ldrb	r3, [r3, r0]
    22e8:	021b      	lsls	r3, r3, #8
    22ea:	430b      	orrs	r3, r1
    22ec:	b29b      	uxth	r3, r3
    22ee:	429a      	cmp	r2, r3
    22f0:	d204      	bcs.n	22fc <atcacert_create_csr+0xb0>
        {
            status = ATCACERT_E_BAD_PARAMS;
    22f2:	23c7      	movs	r3, #199	; 0xc7
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	2202      	movs	r2, #2
    22f8:	701a      	strb	r2, [r3, #0]
            BREAK(status, "CSR buffer size too small");
    22fa:	e0c5      	b.n	2488 <atcacert_create_csr+0x23c>
        }
        // Copy the CSR template into the CSR that will be returned
        memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	2246      	movs	r2, #70	; 0x46
    2300:	5c9a      	ldrb	r2, [r3, r2]
    2302:	2147      	movs	r1, #71	; 0x47
    2304:	5c59      	ldrb	r1, [r3, r1]
    2306:	0209      	lsls	r1, r1, #8
    2308:	430a      	orrs	r2, r1
    230a:	2148      	movs	r1, #72	; 0x48
    230c:	5c59      	ldrb	r1, [r3, r1]
    230e:	0409      	lsls	r1, r1, #16
    2310:	430a      	orrs	r2, r1
    2312:	2149      	movs	r1, #73	; 0x49
    2314:	5c5b      	ldrb	r3, [r3, r1]
    2316:	061b      	lsls	r3, r3, #24
    2318:	4313      	orrs	r3, r2
    231a:	0018      	movs	r0, r3
    231c:	68fb      	ldr	r3, [r7, #12]
    231e:	224a      	movs	r2, #74	; 0x4a
    2320:	5c9a      	ldrb	r2, [r3, r2]
    2322:	214b      	movs	r1, #75	; 0x4b
    2324:	5c5b      	ldrb	r3, [r3, r1]
    2326:	021b      	lsls	r3, r3, #8
    2328:	4313      	orrs	r3, r2
    232a:	b29b      	uxth	r3, r3
    232c:	001a      	movs	r2, r3
    232e:	68bb      	ldr	r3, [r7, #8]
    2330:	0001      	movs	r1, r0
    2332:	0018      	movs	r0, r3
    2334:	4b59      	ldr	r3, [pc, #356]	; (249c <atcacert_create_csr+0x250>)
    2336:	4798      	blx	r3
        csr_max_size = *csr_size;
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	22b4      	movs	r2, #180	; 0xb4
    233e:	18ba      	adds	r2, r7, r2
    2340:	6013      	str	r3, [r2, #0]
        *csr_size = csr_def->cert_template_size;
    2342:	68fb      	ldr	r3, [r7, #12]
    2344:	224a      	movs	r2, #74	; 0x4a
    2346:	5c9a      	ldrb	r2, [r3, r2]
    2348:	214b      	movs	r1, #75	; 0x4b
    234a:	5c5b      	ldrb	r3, [r3, r1]
    234c:	021b      	lsls	r3, r3, #8
    234e:	4313      	orrs	r3, r2
    2350:	b29b      	uxth	r3, r3
    2352:	001a      	movs	r2, r3
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	601a      	str	r2, [r3, #0]

        // Get a few elements from the csr_def structure
        pubLoc = &(csr_def->std_cert_elements[STDCERT_PUBLIC_KEY]);
    2358:	68fb      	ldr	r3, [r7, #12]
    235a:	3321      	adds	r3, #33	; 0x21
    235c:	22bc      	movs	r2, #188	; 0xbc
    235e:	18ba      	adds	r2, r7, r2
    2360:	6013      	str	r3, [r2, #0]
        pubDevLoc = &(csr_def->public_key_dev_loc);
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	3313      	adds	r3, #19
    2366:	22c0      	movs	r2, #192	; 0xc0
    2368:	18ba      	adds	r2, r7, r2
    236a:	6013      	str	r3, [r2, #0]
        keySlot = pubDevLoc->slot;
    236c:	23bb      	movs	r3, #187	; 0xbb
    236e:	18fb      	adds	r3, r7, r3
    2370:	22c0      	movs	r2, #192	; 0xc0
    2372:	18ba      	adds	r2, r7, r2
    2374:	6812      	ldr	r2, [r2, #0]
    2376:	7852      	ldrb	r2, [r2, #1]
    2378:	701a      	strb	r2, [r3, #0]
        privKeySlot = csr_def->private_key_slot;
    237a:	23ba      	movs	r3, #186	; 0xba
    237c:	18fb      	adds	r3, r7, r3
    237e:	68fa      	ldr	r2, [r7, #12]
    2380:	78d2      	ldrb	r2, [r2, #3]
    2382:	701a      	strb	r2, [r3, #0]

        // Get the public key from the device
        if (pubDevLoc->is_genkey)
    2384:	23c0      	movs	r3, #192	; 0xc0
    2386:	18fb      	adds	r3, r7, r3
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	789b      	ldrb	r3, [r3, #2]
    238c:	2b00      	cmp	r3, #0
    238e:	d013      	beq.n	23b8 <atcacert_create_csr+0x16c>
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(keySlot, pubkey);
    2390:	23bb      	movs	r3, #187	; 0xbb
    2392:	18fb      	adds	r3, r7, r3
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	b29b      	uxth	r3, r3
    2398:	22c7      	movs	r2, #199	; 0xc7
    239a:	18bc      	adds	r4, r7, r2
    239c:	2274      	movs	r2, #116	; 0x74
    239e:	18ba      	adds	r2, r7, r2
    23a0:	0011      	movs	r1, r2
    23a2:	0018      	movs	r0, r3
    23a4:	4b3e      	ldr	r3, [pc, #248]	; (24a0 <atcacert_create_csr+0x254>)
    23a6:	4798      	blx	r3
    23a8:	0003      	movs	r3, r0
    23aa:	7023      	strb	r3, [r4, #0]
            if (status != ATCA_SUCCESS)
    23ac:	23c7      	movs	r3, #199	; 0xc7
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d013      	beq.n	23de <atcacert_create_csr+0x192>
                BREAK(status, "Could not generate public key");
    23b6:	e067      	b.n	2488 <atcacert_create_csr+0x23c>
        }
        else
        {
            // Read the public key from a slot
            status = atcab_read_pubkey(keySlot, pubkey);
    23b8:	23bb      	movs	r3, #187	; 0xbb
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	b29b      	uxth	r3, r3
    23c0:	22c7      	movs	r2, #199	; 0xc7
    23c2:	18bc      	adds	r4, r7, r2
    23c4:	2274      	movs	r2, #116	; 0x74
    23c6:	18ba      	adds	r2, r7, r2
    23c8:	0011      	movs	r1, r2
    23ca:	0018      	movs	r0, r3
    23cc:	4b35      	ldr	r3, [pc, #212]	; (24a4 <atcacert_create_csr+0x258>)
    23ce:	4798      	blx	r3
    23d0:	0003      	movs	r3, r0
    23d2:	7023      	strb	r3, [r4, #0]
            if (status != ATCA_SUCCESS)
    23d4:	23c7      	movs	r3, #199	; 0xc7
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	2b00      	cmp	r3, #0
    23dc:	d14d      	bne.n	247a <atcacert_create_csr+0x22e>
                BREAK(status, "Could not read public key");
        }
        // Insert the public key into the CSR template
        status = atcacert_set_cert_element(csr_def, pubLoc, csr, *csr_size, pubkey, ATCA_PUB_KEY_SIZE);
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	681c      	ldr	r4, [r3, #0]
    23e2:	68ba      	ldr	r2, [r7, #8]
    23e4:	23bc      	movs	r3, #188	; 0xbc
    23e6:	18fb      	adds	r3, r7, r3
    23e8:	6819      	ldr	r1, [r3, #0]
    23ea:	68f8      	ldr	r0, [r7, #12]
    23ec:	2340      	movs	r3, #64	; 0x40
    23ee:	9301      	str	r3, [sp, #4]
    23f0:	2374      	movs	r3, #116	; 0x74
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	9300      	str	r3, [sp, #0]
    23f6:	0023      	movs	r3, r4
    23f8:	4c2b      	ldr	r4, [pc, #172]	; (24a8 <atcacert_create_csr+0x25c>)
    23fa:	47a0      	blx	r4
    23fc:	0002      	movs	r2, r0
    23fe:	23c7      	movs	r3, #199	; 0xc7
    2400:	18fb      	adds	r3, r7, r3
    2402:	701a      	strb	r2, [r3, #0]
        if (status != ATCA_SUCCESS)
    2404:	23c7      	movs	r3, #199	; 0xc7
    2406:	18fb      	adds	r3, r7, r3
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	2b00      	cmp	r3, #0
    240c:	d137      	bne.n	247e <atcacert_create_csr+0x232>
            BREAK(status, "Setting CSR public key failed");

        // Get the CSR TBS digest
        status = atcacert_get_tbs_digest(csr_def, csr, *csr_size, tbsDigest);
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	681a      	ldr	r2, [r3, #0]
    2412:	2314      	movs	r3, #20
    2414:	18fb      	adds	r3, r7, r3
    2416:	68b9      	ldr	r1, [r7, #8]
    2418:	68f8      	ldr	r0, [r7, #12]
    241a:	4c24      	ldr	r4, [pc, #144]	; (24ac <atcacert_create_csr+0x260>)
    241c:	47a0      	blx	r4
    241e:	0002      	movs	r2, r0
    2420:	23c7      	movs	r3, #199	; 0xc7
    2422:	18fb      	adds	r3, r7, r3
    2424:	701a      	strb	r2, [r3, #0]
        if (status != ATCA_SUCCESS)
    2426:	23c7      	movs	r3, #199	; 0xc7
    2428:	18fb      	adds	r3, r7, r3
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	2b00      	cmp	r3, #0
    242e:	d128      	bne.n	2482 <atcacert_create_csr+0x236>
            BREAK(status, "Get TBS digest failed");

        // Sign the TBS digest
        status = atcab_sign(privKeySlot, tbsDigest, sig);
    2430:	23ba      	movs	r3, #186	; 0xba
    2432:	18fb      	adds	r3, r7, r3
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	b29b      	uxth	r3, r3
    2438:	22c7      	movs	r2, #199	; 0xc7
    243a:	18bc      	adds	r4, r7, r2
    243c:	2234      	movs	r2, #52	; 0x34
    243e:	18ba      	adds	r2, r7, r2
    2440:	2114      	movs	r1, #20
    2442:	1879      	adds	r1, r7, r1
    2444:	0018      	movs	r0, r3
    2446:	4b1a      	ldr	r3, [pc, #104]	; (24b0 <atcacert_create_csr+0x264>)
    2448:	4798      	blx	r3
    244a:	0003      	movs	r3, r0
    244c:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    244e:	23c7      	movs	r3, #199	; 0xc7
    2450:	18fb      	adds	r3, r7, r3
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	2b00      	cmp	r3, #0
    2456:	d116      	bne.n	2486 <atcacert_create_csr+0x23a>
            BREAK(status, "Signing CSR failed");

        // Insert the signature into the CSR template
        status = atcacert_set_signature(csr_def, csr, csr_size, csr_max_size, sig);
    2458:	23b4      	movs	r3, #180	; 0xb4
    245a:	18fb      	adds	r3, r7, r3
    245c:	681c      	ldr	r4, [r3, #0]
    245e:	687a      	ldr	r2, [r7, #4]
    2460:	68b9      	ldr	r1, [r7, #8]
    2462:	68f8      	ldr	r0, [r7, #12]
    2464:	2334      	movs	r3, #52	; 0x34
    2466:	18fb      	adds	r3, r7, r3
    2468:	9300      	str	r3, [sp, #0]
    246a:	0023      	movs	r3, r4
    246c:	4c11      	ldr	r4, [pc, #68]	; (24b4 <atcacert_create_csr+0x268>)
    246e:	47a0      	blx	r4
    2470:	0002      	movs	r2, r0
    2472:	23c7      	movs	r3, #199	; 0xc7
    2474:	18fb      	adds	r3, r7, r3
    2476:	701a      	strb	r2, [r3, #0]
    2478:	e006      	b.n	2488 <atcacert_create_csr+0x23c>
                BREAK(status, "Could not read public key");
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	e004      	b.n	2488 <atcacert_create_csr+0x23c>
            BREAK(status, "Setting CSR public key failed");
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	e002      	b.n	2488 <atcacert_create_csr+0x23c>
            BREAK(status, "Get TBS digest failed");
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	e000      	b.n	2488 <atcacert_create_csr+0x23c>
            BREAK(status, "Signing CSR failed");
    2486:	46c0      	nop			; (mov r8, r8)
        // it is returned in the csr_size parameter.  (*csr_size = *csr_size;)

    }
    while (false);

    return status;
    2488:	23c7      	movs	r3, #199	; 0xc7
    248a:	18fb      	adds	r3, r7, r3
    248c:	781b      	ldrb	r3, [r3, #0]
}
    248e:	0018      	movs	r0, r3
    2490:	46bd      	mov	sp, r7
    2492:	b033      	add	sp, #204	; 0xcc
    2494:	bd90      	pop	{r4, r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	0000ad79 	.word	0x0000ad79
    249c:	0000ad67 	.word	0x0000ad67
    24a0:	00004b95 	.word	0x00004b95
    24a4:	00004bc1 	.word	0x00004bc1
    24a8:	000027dd 	.word	0x000027dd
    24ac:	0000275d 	.word	0x0000275d
    24b0:	00004b0d 	.word	0x00004b0d
    24b4:	00002535 	.word	0x00002535

000024b8 <get_effective_offset>:
    // device_loc_dest is encompassed by device_loc_src, return a pointer to the data for device_loc_dest
    return src_data + (device_loc_dest->offset - device_loc_src->offset);
}

static int get_effective_offset(const atcacert_def_t* cert_def, const uint8_t* cert, size_t ref_offset)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b086      	sub	sp, #24
    24bc:	af00      	add	r7, sp, #0
    24be:	60f8      	str	r0, [r7, #12]
    24c0:	60b9      	str	r1, [r7, #8]
    24c2:	607a      	str	r2, [r7, #4]
    size_t sn_offset = 0;
    24c4:	2300      	movs	r3, #0
    24c6:	617b      	str	r3, [r7, #20]

    if (cert_def->type != CERTTYPE_X509 || cert_def->sn_source != SNSRC_STORED_DYNAMIC)
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d103      	bne.n	24d8 <get_effective_offset+0x20>
    24d0:	68fb      	ldr	r3, [r7, #12]
    24d2:	791b      	ldrb	r3, [r3, #4]
    24d4:	2b07      	cmp	r3, #7
    24d6:	d001      	beq.n	24dc <get_effective_offset+0x24>
        return 0;
    24d8:	2300      	movs	r3, #0
    24da:	e027      	b.n	252c <get_effective_offset+0x74>

    sn_offset = cert_def->std_cert_elements[STDCERT_CERT_SN].offset;
    24dc:	68fb      	ldr	r3, [r7, #12]
    24de:	2235      	movs	r2, #53	; 0x35
    24e0:	5c9a      	ldrb	r2, [r3, r2]
    24e2:	2136      	movs	r1, #54	; 0x36
    24e4:	5c5b      	ldrb	r3, [r3, r1]
    24e6:	021b      	lsls	r3, r3, #8
    24e8:	4313      	orrs	r3, r2
    24ea:	b29b      	uxth	r3, r3
    24ec:	617b      	str	r3, [r7, #20]
    if (ref_offset <= sn_offset)
    24ee:	687a      	ldr	r2, [r7, #4]
    24f0:	697b      	ldr	r3, [r7, #20]
    24f2:	429a      	cmp	r2, r3
    24f4:	d801      	bhi.n	24fa <get_effective_offset+0x42>
        return 0;
    24f6:	2300      	movs	r3, #0
    24f8:	e018      	b.n	252c <get_effective_offset+0x74>

    return (int)cert[sn_offset] - (int)cert_def->cert_template[sn_offset];
    24fa:	68ba      	ldr	r2, [r7, #8]
    24fc:	697b      	ldr	r3, [r7, #20]
    24fe:	18d3      	adds	r3, r2, r3
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	0018      	movs	r0, r3
    2504:	68fb      	ldr	r3, [r7, #12]
    2506:	2246      	movs	r2, #70	; 0x46
    2508:	5c9a      	ldrb	r2, [r3, r2]
    250a:	2147      	movs	r1, #71	; 0x47
    250c:	5c59      	ldrb	r1, [r3, r1]
    250e:	0209      	lsls	r1, r1, #8
    2510:	430a      	orrs	r2, r1
    2512:	2148      	movs	r1, #72	; 0x48
    2514:	5c59      	ldrb	r1, [r3, r1]
    2516:	0409      	lsls	r1, r1, #16
    2518:	430a      	orrs	r2, r1
    251a:	2149      	movs	r1, #73	; 0x49
    251c:	5c5b      	ldrb	r3, [r3, r1]
    251e:	061b      	lsls	r3, r3, #24
    2520:	4313      	orrs	r3, r2
    2522:	001a      	movs	r2, r3
    2524:	697b      	ldr	r3, [r7, #20]
    2526:	18d3      	adds	r3, r2, r3
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	1ac3      	subs	r3, r0, r3
}
    252c:	0018      	movs	r0, r3
    252e:	46bd      	mov	sp, r7
    2530:	b006      	add	sp, #24
    2532:	bd80      	pop	{r7, pc}

00002534 <atcacert_set_signature>:
int atcacert_set_signature(const atcacert_def_t* cert_def,
                           uint8_t*              cert,
                           size_t*               cert_size,
                           size_t                max_cert_size,
                           const uint8_t         signature[64])
{
    2534:	b590      	push	{r4, r7, lr}
    2536:	b08d      	sub	sp, #52	; 0x34
    2538:	af02      	add	r7, sp, #8
    253a:	60f8      	str	r0, [r7, #12]
    253c:	60b9      	str	r1, [r7, #8]
    253e:	607a      	str	r2, [r7, #4]
    2540:	603b      	str	r3, [r7, #0]
    int ret = 0;
    2542:	2300      	movs	r3, #0
    2544:	627b      	str	r3, [r7, #36]	; 0x24
    size_t cur_der_sig_size;
    size_t new_der_sig_size;
    size_t old_cert_der_length_size;
    uint32_t new_cert_length;

    if (cert_def == NULL || cert == NULL || cert_size == NULL || signature == NULL)
    2546:	68fb      	ldr	r3, [r7, #12]
    2548:	2b00      	cmp	r3, #0
    254a:	d008      	beq.n	255e <atcacert_set_signature+0x2a>
    254c:	68bb      	ldr	r3, [r7, #8]
    254e:	2b00      	cmp	r3, #0
    2550:	d005      	beq.n	255e <atcacert_set_signature+0x2a>
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	2b00      	cmp	r3, #0
    2556:	d002      	beq.n	255e <atcacert_set_signature+0x2a>
    2558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    255a:	2b00      	cmp	r3, #0
    255c:	d101      	bne.n	2562 <atcacert_set_signature+0x2e>
        return ATCACERT_E_BAD_PARAMS;
    255e:	2302      	movs	r3, #2
    2560:	e08d      	b.n	267e <atcacert_set_signature+0x14a>

    sig_offset = cert_def->std_cert_elements[STDCERT_SIGNATURE].offset;
    2562:	2322      	movs	r3, #34	; 0x22
    2564:	18fa      	adds	r2, r7, r3
    2566:	68fb      	ldr	r3, [r7, #12]
    2568:	2125      	movs	r1, #37	; 0x25
    256a:	5c59      	ldrb	r1, [r3, r1]
    256c:	2026      	movs	r0, #38	; 0x26
    256e:	5c1b      	ldrb	r3, [r3, r0]
    2570:	021b      	lsls	r3, r3, #8
    2572:	430b      	orrs	r3, r1
    2574:	8013      	strh	r3, [r2, #0]
    sig_offset += get_effective_offset(cert_def, cert, sig_offset);
    2576:	2322      	movs	r3, #34	; 0x22
    2578:	18fb      	adds	r3, r7, r3
    257a:	881a      	ldrh	r2, [r3, #0]
    257c:	68b9      	ldr	r1, [r7, #8]
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	0018      	movs	r0, r3
    2582:	4b41      	ldr	r3, [pc, #260]	; (2688 <atcacert_set_signature+0x154>)
    2584:	4798      	blx	r3
    2586:	0003      	movs	r3, r0
    2588:	b299      	uxth	r1, r3
    258a:	2322      	movs	r3, #34	; 0x22
    258c:	18fb      	adds	r3, r7, r3
    258e:	2222      	movs	r2, #34	; 0x22
    2590:	18ba      	adds	r2, r7, r2
    2592:	8812      	ldrh	r2, [r2, #0]
    2594:	188a      	adds	r2, r1, r2
    2596:	801a      	strh	r2, [r3, #0]

    // Non X.509 signatures are treated like normal certificate elements
    if (cert_def->type != CERTTYPE_X509)
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	2b00      	cmp	r3, #0
    259e:	d00f      	beq.n	25c0 <atcacert_set_signature+0x8c>
        return atcacert_set_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_SIGNATURE], cert, *cert_size, signature, 64);
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	3325      	adds	r3, #37	; 0x25
    25a4:	0019      	movs	r1, r3
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	681c      	ldr	r4, [r3, #0]
    25aa:	68ba      	ldr	r2, [r7, #8]
    25ac:	68f8      	ldr	r0, [r7, #12]
    25ae:	2340      	movs	r3, #64	; 0x40
    25b0:	9301      	str	r3, [sp, #4]
    25b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    25b4:	9300      	str	r3, [sp, #0]
    25b6:	0023      	movs	r3, r4
    25b8:	4c34      	ldr	r4, [pc, #208]	; (268c <atcacert_set_signature+0x158>)
    25ba:	47a0      	blx	r4
    25bc:	0003      	movs	r3, r0
    25be:	e05e      	b.n	267e <atcacert_set_signature+0x14a>

    if (sig_offset >= *cert_size)
    25c0:	2322      	movs	r3, #34	; 0x22
    25c2:	18fb      	adds	r3, r7, r3
    25c4:	881a      	ldrh	r2, [r3, #0]
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	429a      	cmp	r2, r3
    25cc:	d301      	bcc.n	25d2 <atcacert_set_signature+0x9e>
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;  // Signature element is shown as past the end of the certificate
    25ce:	2309      	movs	r3, #9
    25d0:	e055      	b.n	267e <atcacert_set_signature+0x14a>

    // Current size of the signature is from its offset to the end of the cert
    cur_der_sig_size = *cert_size - sig_offset;
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	681a      	ldr	r2, [r3, #0]
    25d6:	2322      	movs	r3, #34	; 0x22
    25d8:	18fb      	adds	r3, r7, r3
    25da:	881b      	ldrh	r3, [r3, #0]
    25dc:	1ad3      	subs	r3, r2, r3
    25de:	61fb      	str	r3, [r7, #28]

    // Find the size of buffer available for the new DER signature
    new_der_sig_size = max_cert_size - sig_offset;
    25e0:	2322      	movs	r3, #34	; 0x22
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	881b      	ldrh	r3, [r3, #0]
    25e6:	683a      	ldr	r2, [r7, #0]
    25e8:	1ad3      	subs	r3, r2, r3
    25ea:	61bb      	str	r3, [r7, #24]

    // Set the new signature
    ret = atcacert_der_enc_ecdsa_sig_value(signature, &cert[sig_offset], &new_der_sig_size);
    25ec:	2322      	movs	r3, #34	; 0x22
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	881b      	ldrh	r3, [r3, #0]
    25f2:	68ba      	ldr	r2, [r7, #8]
    25f4:	18d1      	adds	r1, r2, r3
    25f6:	2318      	movs	r3, #24
    25f8:	18fa      	adds	r2, r7, r3
    25fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    25fc:	0018      	movs	r0, r3
    25fe:	4b24      	ldr	r3, [pc, #144]	; (2690 <atcacert_set_signature+0x15c>)
    2600:	4798      	blx	r3
    2602:	0003      	movs	r3, r0
    2604:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    2606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2608:	2b00      	cmp	r3, #0
    260a:	d00d      	beq.n	2628 <atcacert_set_signature+0xf4>
    {
        if (ret == ATCACERT_E_BUFFER_TOO_SMALL)
    260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    260e:	2b03      	cmp	r3, #3
    2610:	d108      	bne.n	2624 <atcacert_set_signature+0xf0>
            *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;  // Report the size needed
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	69ba      	ldr	r2, [r7, #24]
    2618:	0011      	movs	r1, r2
    261a:	69fa      	ldr	r2, [r7, #28]
    261c:	1a8a      	subs	r2, r1, r2
    261e:	189a      	adds	r2, r3, r2
    2620:	687b      	ldr	r3, [r7, #4]
    2622:	601a      	str	r2, [r3, #0]
        return ret;
    2624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2626:	e02a      	b.n	267e <atcacert_set_signature+0x14a>
    }

    *cert_size += (int)new_der_sig_size - (int)cur_der_sig_size;
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	69ba      	ldr	r2, [r7, #24]
    262e:	0011      	movs	r1, r2
    2630:	69fa      	ldr	r2, [r7, #28]
    2632:	1a8a      	subs	r2, r1, r2
    2634:	189a      	adds	r2, r3, r2
    2636:	687b      	ldr	r3, [r7, #4]
    2638:	601a      	str	r2, [r3, #0]

    old_cert_der_length_size = *cert_size - 1;
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	681b      	ldr	r3, [r3, #0]
    263e:	3b01      	subs	r3, #1
    2640:	617b      	str	r3, [r7, #20]
    ret = atcacert_der_adjust_length(
    2642:	68bb      	ldr	r3, [r7, #8]
    2644:	1c58      	adds	r0, r3, #1
        &cert[1],
        &old_cert_der_length_size,
        (int)new_der_sig_size - (int)cur_der_sig_size,
    2646:	69bb      	ldr	r3, [r7, #24]
    2648:	001a      	movs	r2, r3
    264a:	69fb      	ldr	r3, [r7, #28]
    ret = atcacert_der_adjust_length(
    264c:	1ad2      	subs	r2, r2, r3
    264e:	2310      	movs	r3, #16
    2650:	18fb      	adds	r3, r7, r3
    2652:	2114      	movs	r1, #20
    2654:	1879      	adds	r1, r7, r1
    2656:	4c0f      	ldr	r4, [pc, #60]	; (2694 <atcacert_set_signature+0x160>)
    2658:	47a0      	blx	r4
    265a:	0003      	movs	r3, r0
    265c:	627b      	str	r3, [r7, #36]	; 0x24
        &new_cert_length);
    if (ret != ATCACERT_E_SUCCESS)
    265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2660:	2b00      	cmp	r3, #0
    2662:	d001      	beq.n	2668 <atcacert_set_signature+0x134>
        return ret;
    2664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2666:	e00a      	b.n	267e <atcacert_set_signature+0x14a>

    // Tag, length, value
    if (1 + old_cert_der_length_size + new_cert_length != *cert_size)
    2668:	697a      	ldr	r2, [r7, #20]
    266a:	693b      	ldr	r3, [r7, #16]
    266c:	18d3      	adds	r3, r2, r3
    266e:	1c5a      	adds	r2, r3, #1
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	429a      	cmp	r2, r3
    2676:	d001      	beq.n	267c <atcacert_set_signature+0x148>
        return ATCACERT_E_BAD_CERT;
    2678:	230a      	movs	r3, #10
    267a:	e000      	b.n	267e <atcacert_set_signature+0x14a>

    return ATCACERT_E_SUCCESS;
    267c:	2300      	movs	r3, #0
}
    267e:	0018      	movs	r0, r3
    2680:	46bd      	mov	sp, r7
    2682:	b00b      	add	sp, #44	; 0x2c
    2684:	bd90      	pop	{r4, r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	000024b9 	.word	0x000024b9
    268c:	000027dd 	.word	0x000027dd
    2690:	00002c75 	.word	0x00002c75
    2694:	00002a65 	.word	0x00002a65

00002698 <atcacert_get_tbs>:
int atcacert_get_tbs(const atcacert_def_t* cert_def,
                     const uint8_t*        cert,
                     size_t                cert_size,
                     const uint8_t**       tbs,
                     size_t*               tbs_size)
{
    2698:	b580      	push	{r7, lr}
    269a:	b086      	sub	sp, #24
    269c:	af00      	add	r7, sp, #0
    269e:	60f8      	str	r0, [r7, #12]
    26a0:	60b9      	str	r1, [r7, #8]
    26a2:	607a      	str	r2, [r7, #4]
    26a4:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
    26a6:	2300      	movs	r3, #0
    26a8:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs == NULL || tbs_size == NULL)
    26aa:	68fb      	ldr	r3, [r7, #12]
    26ac:	2b00      	cmp	r3, #0
    26ae:	d008      	beq.n	26c2 <atcacert_get_tbs+0x2a>
    26b0:	68bb      	ldr	r3, [r7, #8]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d005      	beq.n	26c2 <atcacert_get_tbs+0x2a>
    26b6:	683b      	ldr	r3, [r7, #0]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d002      	beq.n	26c2 <atcacert_get_tbs+0x2a>
    26bc:	6a3b      	ldr	r3, [r7, #32]
    26be:	2b00      	cmp	r3, #0
    26c0:	d101      	bne.n	26c6 <atcacert_get_tbs+0x2e>
        return ATCACERT_E_BAD_PARAMS;
    26c2:	2302      	movs	r3, #2
    26c4:	e043      	b.n	274e <atcacert_get_tbs+0xb6>

    eff_offset = get_effective_offset(cert_def, cert, cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count);
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	7b9a      	ldrb	r2, [r3, #14]
    26ca:	7bdb      	ldrb	r3, [r3, #15]
    26cc:	021b      	lsls	r3, r3, #8
    26ce:	4313      	orrs	r3, r2
    26d0:	b29b      	uxth	r3, r3
    26d2:	0019      	movs	r1, r3
    26d4:	68fb      	ldr	r3, [r7, #12]
    26d6:	7c1a      	ldrb	r2, [r3, #16]
    26d8:	7c5b      	ldrb	r3, [r3, #17]
    26da:	021b      	lsls	r3, r3, #8
    26dc:	4313      	orrs	r3, r2
    26de:	b29b      	uxth	r3, r3
    26e0:	18cb      	adds	r3, r1, r3
    26e2:	001a      	movs	r2, r3
    26e4:	68b9      	ldr	r1, [r7, #8]
    26e6:	68fb      	ldr	r3, [r7, #12]
    26e8:	0018      	movs	r0, r3
    26ea:	4b1b      	ldr	r3, [pc, #108]	; (2758 <atcacert_get_tbs+0xc0>)
    26ec:	4798      	blx	r3
    26ee:	0003      	movs	r3, r0
    26f0:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_def->tbs_cert_loc.offset + cert_def->tbs_cert_loc.count + eff_offset) > cert_size)
    26f2:	68fb      	ldr	r3, [r7, #12]
    26f4:	7b9a      	ldrb	r2, [r3, #14]
    26f6:	7bdb      	ldrb	r3, [r3, #15]
    26f8:	021b      	lsls	r3, r3, #8
    26fa:	4313      	orrs	r3, r2
    26fc:	b29b      	uxth	r3, r3
    26fe:	0019      	movs	r1, r3
    2700:	68fb      	ldr	r3, [r7, #12]
    2702:	7c1a      	ldrb	r2, [r3, #16]
    2704:	7c5b      	ldrb	r3, [r3, #17]
    2706:	021b      	lsls	r3, r3, #8
    2708:	4313      	orrs	r3, r2
    270a:	b29b      	uxth	r3, r3
    270c:	18ca      	adds	r2, r1, r3
    270e:	697b      	ldr	r3, [r7, #20]
    2710:	18d3      	adds	r3, r2, r3
    2712:	001a      	movs	r2, r3
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	429a      	cmp	r2, r3
    2718:	d901      	bls.n	271e <atcacert_get_tbs+0x86>
        return ATCACERT_E_BAD_CERT;
    271a:	230a      	movs	r3, #10
    271c:	e017      	b.n	274e <atcacert_get_tbs+0xb6>

    *tbs      = &cert[cert_def->tbs_cert_loc.offset];
    271e:	68fb      	ldr	r3, [r7, #12]
    2720:	7b9a      	ldrb	r2, [r3, #14]
    2722:	7bdb      	ldrb	r3, [r3, #15]
    2724:	021b      	lsls	r3, r3, #8
    2726:	4313      	orrs	r3, r2
    2728:	b29b      	uxth	r3, r3
    272a:	001a      	movs	r2, r3
    272c:	68bb      	ldr	r3, [r7, #8]
    272e:	189a      	adds	r2, r3, r2
    2730:	683b      	ldr	r3, [r7, #0]
    2732:	601a      	str	r2, [r3, #0]
    *tbs_size = cert_def->tbs_cert_loc.count + eff_offset;
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	7c1a      	ldrb	r2, [r3, #16]
    2738:	7c5b      	ldrb	r3, [r3, #17]
    273a:	021b      	lsls	r3, r3, #8
    273c:	4313      	orrs	r3, r2
    273e:	b29b      	uxth	r3, r3
    2740:	001a      	movs	r2, r3
    2742:	697b      	ldr	r3, [r7, #20]
    2744:	18d3      	adds	r3, r2, r3
    2746:	001a      	movs	r2, r3
    2748:	6a3b      	ldr	r3, [r7, #32]
    274a:	601a      	str	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
    274c:	2300      	movs	r3, #0
}
    274e:	0018      	movs	r0, r3
    2750:	46bd      	mov	sp, r7
    2752:	b006      	add	sp, #24
    2754:	bd80      	pop	{r7, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	000024b9 	.word	0x000024b9

0000275c <atcacert_get_tbs_digest>:

int atcacert_get_tbs_digest(const atcacert_def_t* cert_def,
                            const uint8_t*        cert,
                            size_t                cert_size,
                            uint8_t               tbs_digest[32])
{
    275c:	b590      	push	{r4, r7, lr}
    275e:	b08b      	sub	sp, #44	; 0x2c
    2760:	af02      	add	r7, sp, #8
    2762:	60f8      	str	r0, [r7, #12]
    2764:	60b9      	str	r1, [r7, #8]
    2766:	607a      	str	r2, [r7, #4]
    2768:	603b      	str	r3, [r7, #0]
    int ret = ATCACERT_E_SUCCESS;
    276a:	2300      	movs	r3, #0
    276c:	61fb      	str	r3, [r7, #28]
    const uint8_t* tbs = NULL;
    276e:	2300      	movs	r3, #0
    2770:	61bb      	str	r3, [r7, #24]
    size_t tbs_size = 0;
    2772:	2300      	movs	r3, #0
    2774:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert == NULL || tbs_digest == NULL)
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	2b00      	cmp	r3, #0
    277a:	d005      	beq.n	2788 <atcacert_get_tbs_digest+0x2c>
    277c:	68bb      	ldr	r3, [r7, #8]
    277e:	2b00      	cmp	r3, #0
    2780:	d002      	beq.n	2788 <atcacert_get_tbs_digest+0x2c>
    2782:	683b      	ldr	r3, [r7, #0]
    2784:	2b00      	cmp	r3, #0
    2786:	d101      	bne.n	278c <atcacert_get_tbs_digest+0x30>
        return ATCACERT_E_BAD_PARAMS;
    2788:	2302      	movs	r3, #2
    278a:	e01f      	b.n	27cc <atcacert_get_tbs_digest+0x70>

    ret = atcacert_get_tbs(cert_def, cert, cert_size, &tbs, &tbs_size);
    278c:	2318      	movs	r3, #24
    278e:	18fc      	adds	r4, r7, r3
    2790:	687a      	ldr	r2, [r7, #4]
    2792:	68b9      	ldr	r1, [r7, #8]
    2794:	68f8      	ldr	r0, [r7, #12]
    2796:	2314      	movs	r3, #20
    2798:	18fb      	adds	r3, r7, r3
    279a:	9300      	str	r3, [sp, #0]
    279c:	0023      	movs	r3, r4
    279e:	4c0d      	ldr	r4, [pc, #52]	; (27d4 <atcacert_get_tbs_digest+0x78>)
    27a0:	47a0      	blx	r4
    27a2:	0003      	movs	r3, r0
    27a4:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    27a6:	69fb      	ldr	r3, [r7, #28]
    27a8:	2b00      	cmp	r3, #0
    27aa:	d001      	beq.n	27b0 <atcacert_get_tbs_digest+0x54>
        return ret;
    27ac:	69fb      	ldr	r3, [r7, #28]
    27ae:	e00d      	b.n	27cc <atcacert_get_tbs_digest+0x70>

    ret = atcac_sw_sha2_256(tbs, tbs_size, tbs_digest);
    27b0:	69bb      	ldr	r3, [r7, #24]
    27b2:	6979      	ldr	r1, [r7, #20]
    27b4:	683a      	ldr	r2, [r7, #0]
    27b6:	0018      	movs	r0, r3
    27b8:	4b07      	ldr	r3, [pc, #28]	; (27d8 <atcacert_get_tbs_digest+0x7c>)
    27ba:	4798      	blx	r3
    27bc:	0003      	movs	r3, r0
    27be:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    27c0:	69fb      	ldr	r3, [r7, #28]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d001      	beq.n	27ca <atcacert_get_tbs_digest+0x6e>
        return ret;
    27c6:	69fb      	ldr	r3, [r7, #28]
    27c8:	e000      	b.n	27cc <atcacert_get_tbs_digest+0x70>

    return ret;
    27ca:	69fb      	ldr	r3, [r7, #28]
}
    27cc:	0018      	movs	r0, r3
    27ce:	46bd      	mov	sp, r7
    27d0:	b009      	add	sp, #36	; 0x24
    27d2:	bd90      	pop	{r4, r7, pc}
    27d4:	00002699 	.word	0x00002699
    27d8:	000053ad 	.word	0x000053ad

000027dc <atcacert_set_cert_element>:
                              const atcacert_cert_loc_t* cert_loc,
                              uint8_t*                   cert,
                              size_t                     cert_size,
                              const uint8_t*             data,
                              size_t                     data_size)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b086      	sub	sp, #24
    27e0:	af00      	add	r7, sp, #0
    27e2:	60f8      	str	r0, [r7, #12]
    27e4:	60b9      	str	r1, [r7, #8]
    27e6:	607a      	str	r2, [r7, #4]
    27e8:	603b      	str	r3, [r7, #0]
    int eff_offset = 0;
    27ea:	2300      	movs	r3, #0
    27ec:	617b      	str	r3, [r7, #20]

    if (cert_def == NULL || cert_loc == NULL || cert == NULL)
    27ee:	68fb      	ldr	r3, [r7, #12]
    27f0:	2b00      	cmp	r3, #0
    27f2:	d005      	beq.n	2800 <atcacert_set_cert_element+0x24>
    27f4:	68bb      	ldr	r3, [r7, #8]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d002      	beq.n	2800 <atcacert_set_cert_element+0x24>
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d101      	bne.n	2804 <atcacert_set_cert_element+0x28>
        return ATCACERT_E_BAD_PARAMS;
    2800:	2302      	movs	r3, #2
    2802:	e062      	b.n	28ca <atcacert_set_cert_element+0xee>

    if (cert_loc->count == 0)
    2804:	68bb      	ldr	r3, [r7, #8]
    2806:	789a      	ldrb	r2, [r3, #2]
    2808:	78db      	ldrb	r3, [r3, #3]
    280a:	021b      	lsls	r3, r3, #8
    280c:	4313      	orrs	r3, r2
    280e:	b29b      	uxth	r3, r3
    2810:	2b00      	cmp	r3, #0
    2812:	d101      	bne.n	2818 <atcacert_set_cert_element+0x3c>
        return ATCACERT_E_SUCCESS;  // This element doesn't exist in the cert, but we treat this as a success
    2814:	2300      	movs	r3, #0
    2816:	e058      	b.n	28ca <atcacert_set_cert_element+0xee>

    if (data == NULL)
    2818:	6a3b      	ldr	r3, [r7, #32]
    281a:	2b00      	cmp	r3, #0
    281c:	d101      	bne.n	2822 <atcacert_set_cert_element+0x46>
        return ATCACERT_E_BAD_PARAMS;
    281e:	2302      	movs	r3, #2
    2820:	e053      	b.n	28ca <atcacert_set_cert_element+0xee>

    // Don't validate for dynamic cert SN
    if (!(cert_def->type == CERTTYPE_X509 &&
    2822:	68fb      	ldr	r3, [r7, #12]
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	2b00      	cmp	r3, #0
    2828:	d113      	bne.n	2852 <atcacert_set_cert_element+0x76>
          cert_def->sn_source == SNSRC_STORED_DYNAMIC &&
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	791b      	ldrb	r3, [r3, #4]
    if (!(cert_def->type == CERTTYPE_X509 &&
    282e:	2b07      	cmp	r3, #7
    2830:	d10f      	bne.n	2852 <atcacert_set_cert_element+0x76>
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
    2832:	68bb      	ldr	r3, [r7, #8]
    2834:	781a      	ldrb	r2, [r3, #0]
    2836:	785b      	ldrb	r3, [r3, #1]
    2838:	021b      	lsls	r3, r3, #8
    283a:	4313      	orrs	r3, r2
    283c:	b29a      	uxth	r2, r3
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	2135      	movs	r1, #53	; 0x35
    2842:	5c59      	ldrb	r1, [r3, r1]
    2844:	2036      	movs	r0, #54	; 0x36
    2846:	5c1b      	ldrb	r3, [r3, r0]
    2848:	021b      	lsls	r3, r3, #8
    284a:	430b      	orrs	r3, r1
    284c:	b29b      	uxth	r3, r3
    if (!(cert_def->type == CERTTYPE_X509 &&
    284e:	429a      	cmp	r2, r3
    2850:	d00b      	beq.n	286a <atcacert_set_cert_element+0x8e>
        data_size != cert_loc->count)
    2852:	68bb      	ldr	r3, [r7, #8]
    2854:	789a      	ldrb	r2, [r3, #2]
    2856:	78db      	ldrb	r3, [r3, #3]
    2858:	021b      	lsls	r3, r3, #8
    285a:	4313      	orrs	r3, r2
    285c:	b29b      	uxth	r3, r3
    285e:	001a      	movs	r2, r3
          cert_loc->offset == cert_def->std_cert_elements[STDCERT_CERT_SN].offset) &&
    2860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2862:	429a      	cmp	r2, r3
    2864:	d001      	beq.n	286a <atcacert_set_cert_element+0x8e>
        return ATCACERT_E_UNEXPECTED_ELEM_SIZE;
    2866:	2307      	movs	r3, #7
    2868:	e02f      	b.n	28ca <atcacert_set_cert_element+0xee>

    eff_offset = get_effective_offset(cert_def, cert, cert_loc->offset);
    286a:	68bb      	ldr	r3, [r7, #8]
    286c:	781a      	ldrb	r2, [r3, #0]
    286e:	785b      	ldrb	r3, [r3, #1]
    2870:	021b      	lsls	r3, r3, #8
    2872:	4313      	orrs	r3, r2
    2874:	b29b      	uxth	r3, r3
    2876:	001a      	movs	r2, r3
    2878:	6879      	ldr	r1, [r7, #4]
    287a:	68fb      	ldr	r3, [r7, #12]
    287c:	0018      	movs	r0, r3
    287e:	4b15      	ldr	r3, [pc, #84]	; (28d4 <atcacert_set_cert_element+0xf8>)
    2880:	4798      	blx	r3
    2882:	0003      	movs	r3, r0
    2884:	617b      	str	r3, [r7, #20]

    if ((size_t)(cert_loc->offset + data_size + eff_offset) > cert_size)
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781a      	ldrb	r2, [r3, #0]
    288a:	785b      	ldrb	r3, [r3, #1]
    288c:	021b      	lsls	r3, r3, #8
    288e:	4313      	orrs	r3, r2
    2890:	b29b      	uxth	r3, r3
    2892:	001a      	movs	r2, r3
    2894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2896:	18d2      	adds	r2, r2, r3
    2898:	697b      	ldr	r3, [r7, #20]
    289a:	18d2      	adds	r2, r2, r3
    289c:	683b      	ldr	r3, [r7, #0]
    289e:	429a      	cmp	r2, r3
    28a0:	d901      	bls.n	28a6 <atcacert_set_cert_element+0xca>
        return ATCACERT_E_ELEM_OUT_OF_BOUNDS;
    28a2:	2309      	movs	r3, #9
    28a4:	e011      	b.n	28ca <atcacert_set_cert_element+0xee>

    memcpy(&cert[cert_loc->offset + eff_offset], data, data_size);
    28a6:	68bb      	ldr	r3, [r7, #8]
    28a8:	781a      	ldrb	r2, [r3, #0]
    28aa:	785b      	ldrb	r3, [r3, #1]
    28ac:	021b      	lsls	r3, r3, #8
    28ae:	4313      	orrs	r3, r2
    28b0:	b29b      	uxth	r3, r3
    28b2:	001a      	movs	r2, r3
    28b4:	697b      	ldr	r3, [r7, #20]
    28b6:	18d3      	adds	r3, r2, r3
    28b8:	001a      	movs	r2, r3
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	189b      	adds	r3, r3, r2
    28be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    28c0:	6a39      	ldr	r1, [r7, #32]
    28c2:	0018      	movs	r0, r3
    28c4:	4b04      	ldr	r3, [pc, #16]	; (28d8 <atcacert_set_cert_element+0xfc>)
    28c6:	4798      	blx	r3

    return ATCACERT_E_SUCCESS;
    28c8:	2300      	movs	r3, #0
}
    28ca:	0018      	movs	r0, r3
    28cc:	46bd      	mov	sp, r7
    28ce:	b006      	add	sp, #24
    28d0:	bd80      	pop	{r7, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	000024b9 	.word	0x000024b9
    28d8:	0000ad67 	.word	0x0000ad67

000028dc <atcacert_der_enc_length>:

#include "atcacert_der.h"
#include <string.h>

int atcacert_der_enc_length(uint32_t length, uint8_t* der_length, size_t* der_length_size)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b086      	sub	sp, #24
    28e0:	af00      	add	r7, sp, #0
    28e2:	60f8      	str	r0, [r7, #12]
    28e4:	60b9      	str	r1, [r7, #8]
    28e6:	607a      	str	r2, [r7, #4]
    size_t der_length_size_calc = 0;
    28e8:	2300      	movs	r3, #0
    28ea:	617b      	str	r3, [r7, #20]
    int exp = sizeof(length) - 1;
    28ec:	2303      	movs	r3, #3
    28ee:	613b      	str	r3, [r7, #16]

    if (der_length_size == NULL)
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d101      	bne.n	28fa <atcacert_der_enc_length+0x1e>
        return ATCACERT_E_BAD_PARAMS;
    28f6:	2302      	movs	r3, #2
    28f8:	e049      	b.n	298e <atcacert_der_enc_length+0xb2>

    if (length < 0x80)
    28fa:	68fb      	ldr	r3, [r7, #12]
    28fc:	2b7f      	cmp	r3, #127	; 0x7f
    28fe:	d807      	bhi.n	2910 <atcacert_der_enc_length+0x34>
    {
        // The length can take the short form with only one byte
        der_length_size_calc = 1;
    2900:	2301      	movs	r3, #1
    2902:	617b      	str	r3, [r7, #20]
        exp = 0;
    2904:	2300      	movs	r3, #0
    2906:	613b      	str	r3, [r7, #16]
    2908:	e00b      	b.n	2922 <atcacert_der_enc_length+0x46>
    {
        // Length is long-form, encoded as a multi-byte big-endian unsigned integer

        // Find first non-zero octet
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
            exp--;
    290a:	693b      	ldr	r3, [r7, #16]
    290c:	3b01      	subs	r3, #1
    290e:	613b      	str	r3, [r7, #16]
        while (length / ((uint32_t)1 << (8 * exp)) == 0)
    2910:	693b      	ldr	r3, [r7, #16]
    2912:	00db      	lsls	r3, r3, #3
    2914:	68fa      	ldr	r2, [r7, #12]
    2916:	40da      	lsrs	r2, r3
    2918:	1e13      	subs	r3, r2, #0
    291a:	d0f6      	beq.n	290a <atcacert_der_enc_length+0x2e>

        der_length_size_calc = 2 + exp;
    291c:	693b      	ldr	r3, [r7, #16]
    291e:	3302      	adds	r3, #2
    2920:	617b      	str	r3, [r7, #20]
    }

    if (der_length != NULL && *der_length_size < der_length_size_calc)
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	2b00      	cmp	r3, #0
    2926:	d009      	beq.n	293c <atcacert_der_enc_length+0x60>
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	681a      	ldr	r2, [r3, #0]
    292c:	697b      	ldr	r3, [r7, #20]
    292e:	429a      	cmp	r2, r3
    2930:	d204      	bcs.n	293c <atcacert_der_enc_length+0x60>
    {
        *der_length_size = der_length_size_calc;
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	697a      	ldr	r2, [r7, #20]
    2936:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    2938:	2303      	movs	r3, #3
    293a:	e028      	b.n	298e <atcacert_der_enc_length+0xb2>
    }

    *der_length_size = der_length_size_calc;
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	697a      	ldr	r2, [r7, #20]
    2940:	601a      	str	r2, [r3, #0]

    if (der_length == NULL)
    2942:	68bb      	ldr	r3, [r7, #8]
    2944:	2b00      	cmp	r3, #0
    2946:	d111      	bne.n	296c <atcacert_der_enc_length+0x90>
        return ATCACERT_E_SUCCESS;  // Caller is only requesting the size
    2948:	2300      	movs	r3, #0
    294a:	e020      	b.n	298e <atcacert_der_enc_length+0xb2>

    // Encode length in big-endian format
    for (; exp >= 0; exp--)
        der_length[der_length_size_calc - 1 - exp] = (uint8_t)((length >> (exp * 8)) & 0xFF);
    294c:	693b      	ldr	r3, [r7, #16]
    294e:	697a      	ldr	r2, [r7, #20]
    2950:	1ad3      	subs	r3, r2, r3
    2952:	3b01      	subs	r3, #1
    2954:	68ba      	ldr	r2, [r7, #8]
    2956:	18d3      	adds	r3, r2, r3
    2958:	693a      	ldr	r2, [r7, #16]
    295a:	00d2      	lsls	r2, r2, #3
    295c:	68f9      	ldr	r1, [r7, #12]
    295e:	40d1      	lsrs	r1, r2
    2960:	000a      	movs	r2, r1
    2962:	b2d2      	uxtb	r2, r2
    2964:	701a      	strb	r2, [r3, #0]
    for (; exp >= 0; exp--)
    2966:	693b      	ldr	r3, [r7, #16]
    2968:	3b01      	subs	r3, #1
    296a:	613b      	str	r3, [r7, #16]
    296c:	693b      	ldr	r3, [r7, #16]
    296e:	2b00      	cmp	r3, #0
    2970:	daec      	bge.n	294c <atcacert_der_enc_length+0x70>

    if (der_length_size_calc > 1)
    2972:	697b      	ldr	r3, [r7, #20]
    2974:	2b01      	cmp	r3, #1
    2976:	d909      	bls.n	298c <atcacert_der_enc_length+0xb0>
        der_length[0] = 0x80 | (uint8_t)(der_length_size_calc - 1);  // Set number of bytes octet with long-form flag
    2978:	697b      	ldr	r3, [r7, #20]
    297a:	b2db      	uxtb	r3, r3
    297c:	3b01      	subs	r3, #1
    297e:	b2db      	uxtb	r3, r3
    2980:	2280      	movs	r2, #128	; 0x80
    2982:	4252      	negs	r2, r2
    2984:	4313      	orrs	r3, r2
    2986:	b2da      	uxtb	r2, r3
    2988:	68bb      	ldr	r3, [r7, #8]
    298a:	701a      	strb	r2, [r3, #0]

    return ATCACERT_E_SUCCESS;
    298c:	2300      	movs	r3, #0
}
    298e:	0018      	movs	r0, r3
    2990:	46bd      	mov	sp, r7
    2992:	b006      	add	sp, #24
    2994:	bd80      	pop	{r7, pc}

00002996 <atcacert_der_dec_length>:

int atcacert_der_dec_length(const uint8_t* der_length, size_t* der_length_size, uint32_t* length)
{
    2996:	b580      	push	{r7, lr}
    2998:	b086      	sub	sp, #24
    299a:	af00      	add	r7, sp, #0
    299c:	60f8      	str	r0, [r7, #12]
    299e:	60b9      	str	r1, [r7, #8]
    29a0:	607a      	str	r2, [r7, #4]
    if (der_length == NULL || der_length_size == NULL)
    29a2:	68fb      	ldr	r3, [r7, #12]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d002      	beq.n	29ae <atcacert_der_dec_length+0x18>
    29a8:	68bb      	ldr	r3, [r7, #8]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d101      	bne.n	29b2 <atcacert_der_dec_length+0x1c>
        return ATCACERT_E_BAD_PARAMS;
    29ae:	2302      	movs	r3, #2
    29b0:	e053      	b.n	2a5a <atcacert_der_dec_length+0xc4>

    if (*der_length_size < 1)
    29b2:	68bb      	ldr	r3, [r7, #8]
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	2b00      	cmp	r3, #0
    29b8:	d101      	bne.n	29be <atcacert_der_dec_length+0x28>
        return ATCACERT_E_DECODING_ERROR;
    29ba:	2304      	movs	r3, #4
    29bc:	e04d      	b.n	2a5a <atcacert_der_dec_length+0xc4>

    if (der_length[0] & 0x80)
    29be:	68fb      	ldr	r3, [r7, #12]
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	b25b      	sxtb	r3, r3
    29c4:	2b00      	cmp	r3, #0
    29c6:	da3c      	bge.n	2a42 <atcacert_der_dec_length+0xac>
    {
        // Long form
        size_t num_bytes = der_length[0] & 0x7F;
    29c8:	68fb      	ldr	r3, [r7, #12]
    29ca:	781b      	ldrb	r3, [r3, #0]
    29cc:	001a      	movs	r2, r3
    29ce:	237f      	movs	r3, #127	; 0x7f
    29d0:	4013      	ands	r3, r2
    29d2:	613b      	str	r3, [r7, #16]
        size_t i;
        if (*der_length_size < num_bytes + 1)
    29d4:	68bb      	ldr	r3, [r7, #8]
    29d6:	681a      	ldr	r2, [r3, #0]
    29d8:	693b      	ldr	r3, [r7, #16]
    29da:	3301      	adds	r3, #1
    29dc:	429a      	cmp	r2, r3
    29de:	d201      	bcs.n	29e4 <atcacert_der_dec_length+0x4e>
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, not enough data.
    29e0:	2304      	movs	r3, #4
    29e2:	e03a      	b.n	2a5a <atcacert_der_dec_length+0xc4>
        if (num_bytes == 0)
    29e4:	693b      	ldr	r3, [r7, #16]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d101      	bne.n	29ee <atcacert_der_dec_length+0x58>
            return ATCACERT_E_DECODING_ERROR;   //  Invalid DER length format, indefinite length not supported.
    29ea:	2304      	movs	r3, #4
    29ec:	e035      	b.n	2a5a <atcacert_der_dec_length+0xc4>
        if (num_bytes > sizeof(*length))
    29ee:	693b      	ldr	r3, [r7, #16]
    29f0:	2b04      	cmp	r3, #4
    29f2:	d901      	bls.n	29f8 <atcacert_der_dec_length+0x62>
            return ATCACERT_E_DECODING_ERROR;   //  Can't parse DER length format, larger than length.
    29f4:	2304      	movs	r3, #4
    29f6:	e030      	b.n	2a5a <atcacert_der_dec_length+0xc4>

        if (length != NULL)
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d01c      	beq.n	2a38 <atcacert_der_dec_length+0xa2>
        {
            // Decode integer in big-endian format
            *length = 0;
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2200      	movs	r2, #0
    2a02:	601a      	str	r2, [r3, #0]
            for (i = 1; i <= num_bytes; i++)
    2a04:	2301      	movs	r3, #1
    2a06:	617b      	str	r3, [r7, #20]
    2a08:	e012      	b.n	2a30 <atcacert_der_dec_length+0x9a>
                *length += der_length[i] * ((uint32_t)1 << (8 * (num_bytes - i)));
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	681a      	ldr	r2, [r3, #0]
    2a0e:	68f9      	ldr	r1, [r7, #12]
    2a10:	697b      	ldr	r3, [r7, #20]
    2a12:	18cb      	adds	r3, r1, r3
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	0018      	movs	r0, r3
    2a18:	6939      	ldr	r1, [r7, #16]
    2a1a:	697b      	ldr	r3, [r7, #20]
    2a1c:	1acb      	subs	r3, r1, r3
    2a1e:	00db      	lsls	r3, r3, #3
    2a20:	4098      	lsls	r0, r3
    2a22:	0003      	movs	r3, r0
    2a24:	18d2      	adds	r2, r2, r3
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	601a      	str	r2, [r3, #0]
            for (i = 1; i <= num_bytes; i++)
    2a2a:	697b      	ldr	r3, [r7, #20]
    2a2c:	3301      	adds	r3, #1
    2a2e:	617b      	str	r3, [r7, #20]
    2a30:	697a      	ldr	r2, [r7, #20]
    2a32:	693b      	ldr	r3, [r7, #16]
    2a34:	429a      	cmp	r2, r3
    2a36:	d9e8      	bls.n	2a0a <atcacert_der_dec_length+0x74>
        }
        *der_length_size = num_bytes + 1; // Return the actual number of bytes the DER length encoding used.
    2a38:	693b      	ldr	r3, [r7, #16]
    2a3a:	1c5a      	adds	r2, r3, #1
    2a3c:	68bb      	ldr	r3, [r7, #8]
    2a3e:	601a      	str	r2, [r3, #0]
    2a40:	e00a      	b.n	2a58 <atcacert_der_dec_length+0xc2>
    }
    else
    {
        if (length != NULL)
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d004      	beq.n	2a52 <atcacert_der_dec_length+0xbc>
            *length = der_length[0];
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	001a      	movs	r2, r3
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	601a      	str	r2, [r3, #0]
        *der_length_size = 1; // Return the actual number of bytes the DER length encoding used.
    2a52:	68bb      	ldr	r3, [r7, #8]
    2a54:	2201      	movs	r2, #1
    2a56:	601a      	str	r2, [r3, #0]
    }

    return ATCACERT_E_SUCCESS;
    2a58:	2300      	movs	r3, #0
}
    2a5a:	0018      	movs	r0, r3
    2a5c:	46bd      	mov	sp, r7
    2a5e:	b006      	add	sp, #24
    2a60:	bd80      	pop	{r7, pc}
	...

00002a64 <atcacert_der_adjust_length>:

int atcacert_der_adjust_length(uint8_t* der_length, size_t* der_length_size, int delta_length, uint32_t* new_length)
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b08a      	sub	sp, #40	; 0x28
    2a68:	af00      	add	r7, sp, #0
    2a6a:	60f8      	str	r0, [r7, #12]
    2a6c:	60b9      	str	r1, [r7, #8]
    2a6e:	607a      	str	r2, [r7, #4]
    2a70:	603b      	str	r3, [r7, #0]
    int ret = 0;
    2a72:	2300      	movs	r3, #0
    2a74:	627b      	str	r3, [r7, #36]	; 0x24
    size_t new_der_len_size = 0;
    2a76:	2300      	movs	r3, #0
    2a78:	61fb      	str	r3, [r7, #28]
    uint32_t old_len = 0;
    2a7a:	2300      	movs	r3, #0
    2a7c:	61bb      	str	r3, [r7, #24]
    uint32_t new_len = 0;
    2a7e:	2300      	movs	r3, #0
    2a80:	623b      	str	r3, [r7, #32]
    uint8_t new_der_length[5];

    ret = atcacert_der_dec_length(der_length, der_length_size, &old_len);
    2a82:	2318      	movs	r3, #24
    2a84:	18fa      	adds	r2, r7, r3
    2a86:	68b9      	ldr	r1, [r7, #8]
    2a88:	68fb      	ldr	r3, [r7, #12]
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b20      	ldr	r3, [pc, #128]	; (2b10 <atcacert_der_adjust_length+0xac>)
    2a8e:	4798      	blx	r3
    2a90:	0003      	movs	r3, r0
    2a92:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    2a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a96:	2b00      	cmp	r3, #0
    2a98:	d001      	beq.n	2a9e <atcacert_der_adjust_length+0x3a>
        return ret;
    2a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a9c:	e034      	b.n	2b08 <atcacert_der_adjust_length+0xa4>

    if (delta_length < 0 && (size_t)(-delta_length) > old_len)
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	da07      	bge.n	2ab4 <atcacert_der_adjust_length+0x50>
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	425b      	negs	r3, r3
    2aa8:	001a      	movs	r2, r3
    2aaa:	69bb      	ldr	r3, [r7, #24]
    2aac:	429a      	cmp	r2, r3
    2aae:	d901      	bls.n	2ab4 <atcacert_der_adjust_length+0x50>
        return ATCACERT_E_ERROR;
    2ab0:	2301      	movs	r3, #1
    2ab2:	e029      	b.n	2b08 <atcacert_der_adjust_length+0xa4>
    new_len = old_len + delta_length;
    2ab4:	69ba      	ldr	r2, [r7, #24]
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	18d3      	adds	r3, r2, r3
    2aba:	623b      	str	r3, [r7, #32]

    if (new_length != NULL)
    2abc:	683b      	ldr	r3, [r7, #0]
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d002      	beq.n	2ac8 <atcacert_der_adjust_length+0x64>
        *new_length = new_len;
    2ac2:	683b      	ldr	r3, [r7, #0]
    2ac4:	6a3a      	ldr	r2, [r7, #32]
    2ac6:	601a      	str	r2, [r3, #0]

    new_der_len_size = sizeof(new_der_length);
    2ac8:	2305      	movs	r3, #5
    2aca:	61fb      	str	r3, [r7, #28]
    ret = atcacert_der_enc_length(new_len, new_der_length, &new_der_len_size);
    2acc:	231c      	movs	r3, #28
    2ace:	18fa      	adds	r2, r7, r3
    2ad0:	2310      	movs	r3, #16
    2ad2:	18f9      	adds	r1, r7, r3
    2ad4:	6a3b      	ldr	r3, [r7, #32]
    2ad6:	0018      	movs	r0, r3
    2ad8:	4b0e      	ldr	r3, [pc, #56]	; (2b14 <atcacert_der_adjust_length+0xb0>)
    2ada:	4798      	blx	r3
    2adc:	0003      	movs	r3, r0
    2ade:	627b      	str	r3, [r7, #36]	; 0x24
    if (ret != ATCACERT_E_SUCCESS)
    2ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d001      	beq.n	2aea <atcacert_der_adjust_length+0x86>
        return ret;
    2ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae8:	e00e      	b.n	2b08 <atcacert_der_adjust_length+0xa4>

    if (*der_length_size != new_der_len_size)
    2aea:	68bb      	ldr	r3, [r7, #8]
    2aec:	681a      	ldr	r2, [r3, #0]
    2aee:	69fb      	ldr	r3, [r7, #28]
    2af0:	429a      	cmp	r2, r3
    2af2:	d001      	beq.n	2af8 <atcacert_der_adjust_length+0x94>
        return ATCACERT_E_BAD_CERT;
    2af4:	230a      	movs	r3, #10
    2af6:	e007      	b.n	2b08 <atcacert_der_adjust_length+0xa4>

    memcpy(der_length, new_der_length, new_der_len_size);
    2af8:	69fa      	ldr	r2, [r7, #28]
    2afa:	2310      	movs	r3, #16
    2afc:	18f9      	adds	r1, r7, r3
    2afe:	68fb      	ldr	r3, [r7, #12]
    2b00:	0018      	movs	r0, r3
    2b02:	4b05      	ldr	r3, [pc, #20]	; (2b18 <atcacert_der_adjust_length+0xb4>)
    2b04:	4798      	blx	r3

    return 0;
    2b06:	2300      	movs	r3, #0
}
    2b08:	0018      	movs	r0, r3
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b00a      	add	sp, #40	; 0x28
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	00002997 	.word	0x00002997
    2b14:	000028dd 	.word	0x000028dd
    2b18:	0000ad67 	.word	0x0000ad67

00002b1c <atcacert_der_enc_integer>:
int atcacert_der_enc_integer(const uint8_t* int_data,
                             size_t         int_data_size,
                             uint8_t        is_unsigned,
                             uint8_t*       der_int,
                             size_t*        der_int_size)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b08c      	sub	sp, #48	; 0x30
    2b20:	af00      	add	r7, sp, #0
    2b22:	60f8      	str	r0, [r7, #12]
    2b24:	60b9      	str	r1, [r7, #8]
    2b26:	603b      	str	r3, [r7, #0]
    2b28:	1dfb      	adds	r3, r7, #7
    2b2a:	701a      	strb	r2, [r3, #0]
    uint8_t der_length[5];
    size_t der_length_size = sizeof(der_length);
    2b2c:	2305      	movs	r3, #5
    2b2e:	617b      	str	r3, [r7, #20]
    size_t der_int_size_calc = 0;
    2b30:	2300      	movs	r3, #0
    2b32:	627b      	str	r3, [r7, #36]	; 0x24
    size_t trim = 0;
    2b34:	2300      	movs	r3, #0
    2b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t pad = 0;
    2b38:	2300      	movs	r3, #0
    2b3a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (int_data == NULL || der_int_size == NULL || int_data_size <= 0)
    2b3c:	68fb      	ldr	r3, [r7, #12]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d005      	beq.n	2b4e <atcacert_der_enc_integer+0x32>
    2b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b44:	2b00      	cmp	r3, #0
    2b46:	d002      	beq.n	2b4e <atcacert_der_enc_integer+0x32>
    2b48:	68bb      	ldr	r3, [r7, #8]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d101      	bne.n	2b52 <atcacert_der_enc_integer+0x36>
        return ATCACERT_E_BAD_PARAMS;
    2b4e:	2302      	movs	r3, #2
    2b50:	e087      	b.n	2c62 <atcacert_der_enc_integer+0x146>

    if (!(is_unsigned && (int_data[0] & 0x80)))
    2b52:	1dfb      	adds	r3, r7, #7
    2b54:	781b      	ldrb	r3, [r3, #0]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d008      	beq.n	2b6c <atcacert_der_enc_integer+0x50>
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	b25b      	sxtb	r3, r3
    2b60:	2b00      	cmp	r3, #0
    2b62:	db25      	blt.n	2bb0 <atcacert_der_enc_integer+0x94>
    {
        // This is not an unsigned value that needs a padding byte, trim any unnecessary bytes.
        // Trim a byte when the upper 9 bits are all 0s or all 1s.
        while (
    2b64:	e002      	b.n	2b6c <atcacert_der_enc_integer+0x50>
            (int_data_size - trim >= 2) && (
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
            trim++;
    2b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b68:	3301      	adds	r3, #1
    2b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
            (int_data_size - trim >= 2) && (
    2b6c:	68ba      	ldr	r2, [r7, #8]
    2b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b70:	1ad3      	subs	r3, r2, r3
        while (
    2b72:	2b01      	cmp	r3, #1
    2b74:	d91f      	bls.n	2bb6 <atcacert_der_enc_integer+0x9a>
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    2b76:	68fa      	ldr	r2, [r7, #12]
    2b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b7a:	18d3      	adds	r3, r2, r3
    2b7c:	781b      	ldrb	r3, [r3, #0]
            (int_data_size - trim >= 2) && (
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d107      	bne.n	2b92 <atcacert_der_enc_integer+0x76>
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    2b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b84:	3301      	adds	r3, #1
    2b86:	68fa      	ldr	r2, [r7, #12]
    2b88:	18d3      	adds	r3, r2, r3
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	b25b      	sxtb	r3, r3
    2b8e:	2b00      	cmp	r3, #0
    2b90:	dae9      	bge.n	2b66 <atcacert_der_enc_integer+0x4a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
    2b92:	68fa      	ldr	r2, [r7, #12]
    2b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b96:	18d3      	adds	r3, r2, r3
    2b98:	781b      	ldrb	r3, [r3, #0]
                ((int_data[trim] == 0x00) && ((int_data[trim + 1] & 0x80) == 0)) ||
    2b9a:	2bff      	cmp	r3, #255	; 0xff
    2b9c:	d10b      	bne.n	2bb6 <atcacert_der_enc_integer+0x9a>
                ((int_data[trim] == 0xFF) && ((int_data[trim + 1] & 0x80) != 0))))
    2b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ba0:	3301      	adds	r3, #1
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	18d3      	adds	r3, r2, r3
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	b25b      	sxtb	r3, r3
    2baa:	2b00      	cmp	r3, #0
    2bac:	dbdb      	blt.n	2b66 <atcacert_der_enc_integer+0x4a>
    if (!(is_unsigned && (int_data[0] & 0x80)))
    2bae:	e002      	b.n	2bb6 <atcacert_der_enc_integer+0x9a>
    }
    else
    {
        // Will be adding extra byte for unsigned padding so it's not interpreted as negative
        pad = 1;
    2bb0:	2301      	movs	r3, #1
    2bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    2bb4:	e000      	b.n	2bb8 <atcacert_der_enc_integer+0x9c>
    if (!(is_unsigned && (int_data[0] & 0x80)))
    2bb6:	46c0      	nop			; (mov r8, r8)
    }

    int ret = atcacert_der_enc_length(int_data_size + pad - trim, der_length, &der_length_size);
    2bb8:	68ba      	ldr	r2, [r7, #8]
    2bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bbc:	18d2      	adds	r2, r2, r3
    2bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bc0:	1ad3      	subs	r3, r2, r3
    2bc2:	2214      	movs	r2, #20
    2bc4:	18ba      	adds	r2, r7, r2
    2bc6:	2118      	movs	r1, #24
    2bc8:	1879      	adds	r1, r7, r1
    2bca:	0018      	movs	r0, r3
    2bcc:	4b27      	ldr	r3, [pc, #156]	; (2c6c <atcacert_der_enc_integer+0x150>)
    2bce:	4798      	blx	r3
    2bd0:	0003      	movs	r3, r0
    2bd2:	623b      	str	r3, [r7, #32]
    if (ret != ATCACERT_E_SUCCESS)
    2bd4:	6a3b      	ldr	r3, [r7, #32]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d001      	beq.n	2bde <atcacert_der_enc_integer+0xc2>
        return ret;
    2bda:	6a3b      	ldr	r3, [r7, #32]
    2bdc:	e041      	b.n	2c62 <atcacert_der_enc_integer+0x146>

    der_int_size_calc = 1 + der_length_size + int_data_size + pad - trim;
    2bde:	697a      	ldr	r2, [r7, #20]
    2be0:	68bb      	ldr	r3, [r7, #8]
    2be2:	18d2      	adds	r2, r2, r3
    2be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be6:	18d2      	adds	r2, r2, r3
    2be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bea:	1ad3      	subs	r3, r2, r3
    2bec:	3301      	adds	r3, #1
    2bee:	627b      	str	r3, [r7, #36]	; 0x24

    if (der_int != NULL && der_int_size_calc > *der_int_size)
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d009      	beq.n	2c0a <atcacert_der_enc_integer+0xee>
    2bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2bf8:	681a      	ldr	r2, [r3, #0]
    2bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bfc:	429a      	cmp	r2, r3
    2bfe:	d204      	bcs.n	2c0a <atcacert_der_enc_integer+0xee>
    {
        *der_int_size = der_int_size_calc;
    2c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2c04:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    2c06:	2303      	movs	r3, #3
    2c08:	e02b      	b.n	2c62 <atcacert_der_enc_integer+0x146>
    }

    *der_int_size = der_int_size_calc;
    2c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2c0e:	601a      	str	r2, [r3, #0]

    if (der_int == NULL)
    2c10:	683b      	ldr	r3, [r7, #0]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d101      	bne.n	2c1a <atcacert_der_enc_integer+0xfe>
        return ATCACERT_E_SUCCESS;                                                      // Caller just wanted the size of the encoded integer
    2c16:	2300      	movs	r3, #0
    2c18:	e023      	b.n	2c62 <atcacert_der_enc_integer+0x146>

    der_int[0] = 0x02;                                                                  // Integer tag
    2c1a:	683b      	ldr	r3, [r7, #0]
    2c1c:	2202      	movs	r2, #2
    2c1e:	701a      	strb	r2, [r3, #0]
    memcpy(&der_int[1], der_length, der_length_size);                                   // Integer length
    2c20:	683b      	ldr	r3, [r7, #0]
    2c22:	3301      	adds	r3, #1
    2c24:	697a      	ldr	r2, [r7, #20]
    2c26:	2118      	movs	r1, #24
    2c28:	1879      	adds	r1, r7, r1
    2c2a:	0018      	movs	r0, r3
    2c2c:	4b10      	ldr	r3, [pc, #64]	; (2c70 <atcacert_der_enc_integer+0x154>)
    2c2e:	4798      	blx	r3
    if (pad)
    2c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c32:	2b00      	cmp	r3, #0
    2c34:	d005      	beq.n	2c42 <atcacert_der_enc_integer+0x126>
        der_int[der_length_size + 1] = 0;                                               // Unsigned integer value requires padding byte so it's not interpreted as negative
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	3301      	adds	r3, #1
    2c3a:	683a      	ldr	r2, [r7, #0]
    2c3c:	18d3      	adds	r3, r2, r3
    2c3e:	2200      	movs	r2, #0
    2c40:	701a      	strb	r2, [r3, #0]
    memcpy(&der_int[der_length_size + 1 + pad], &int_data[trim], int_data_size - trim); // Integer value
    2c42:	697a      	ldr	r2, [r7, #20]
    2c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c46:	18d3      	adds	r3, r2, r3
    2c48:	3301      	adds	r3, #1
    2c4a:	683a      	ldr	r2, [r7, #0]
    2c4c:	18d0      	adds	r0, r2, r3
    2c4e:	68fa      	ldr	r2, [r7, #12]
    2c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c52:	18d1      	adds	r1, r2, r3
    2c54:	68ba      	ldr	r2, [r7, #8]
    2c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c58:	1ad3      	subs	r3, r2, r3
    2c5a:	001a      	movs	r2, r3
    2c5c:	4b04      	ldr	r3, [pc, #16]	; (2c70 <atcacert_der_enc_integer+0x154>)
    2c5e:	4798      	blx	r3

    return ATCACERT_E_SUCCESS;
    2c60:	2300      	movs	r3, #0
}
    2c62:	0018      	movs	r0, r3
    2c64:	46bd      	mov	sp, r7
    2c66:	b00c      	add	sp, #48	; 0x30
    2c68:	bd80      	pop	{r7, pc}
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	000028dd 	.word	0x000028dd
    2c70:	0000ad67 	.word	0x0000ad67

00002c74 <atcacert_der_enc_ecdsa_sig_value>:
}

int atcacert_der_enc_ecdsa_sig_value(const uint8_t raw_sig[64],
                                     uint8_t*      der_sig,
                                     size_t*       der_sig_size)
{
    2c74:	b590      	push	{r4, r7, lr}
    2c76:	b08b      	sub	sp, #44	; 0x2c
    2c78:	af02      	add	r7, sp, #8
    2c7a:	60f8      	str	r0, [r7, #12]
    2c7c:	60b9      	str	r1, [r7, #8]
    2c7e:	607a      	str	r2, [r7, #4]
    int ret = 0;
    2c80:	2300      	movs	r3, #0
    2c82:	61fb      	str	r3, [r7, #28]
    size_t r_size = 0;
    2c84:	2300      	movs	r3, #0
    2c86:	617b      	str	r3, [r7, #20]
    size_t s_size = 0;
    2c88:	2300      	movs	r3, #0
    2c8a:	613b      	str	r3, [r7, #16]
    size_t der_sig_size_calc = 0;
    2c8c:	2300      	movs	r3, #0
    2c8e:	61bb      	str	r3, [r7, #24]

    if (raw_sig == NULL || der_sig_size == NULL)
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d002      	beq.n	2c9c <atcacert_der_enc_ecdsa_sig_value+0x28>
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d101      	bne.n	2ca0 <atcacert_der_enc_ecdsa_sig_value+0x2c>
        return ATCACERT_E_BAD_PARAMS;
    2c9c:	2302      	movs	r3, #2
    2c9e:	e07d      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Find size of the DER encoded R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, NULL, &r_size);
    2ca0:	68f8      	ldr	r0, [r7, #12]
    2ca2:	2314      	movs	r3, #20
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	9300      	str	r3, [sp, #0]
    2ca8:	2300      	movs	r3, #0
    2caa:	2201      	movs	r2, #1
    2cac:	2120      	movs	r1, #32
    2cae:	4c3d      	ldr	r4, [pc, #244]	; (2da4 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2cb0:	47a0      	blx	r4
    2cb2:	0003      	movs	r3, r0
    2cb4:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2cb6:	69fb      	ldr	r3, [r7, #28]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d001      	beq.n	2cc0 <atcacert_der_enc_ecdsa_sig_value+0x4c>
        return ret;
    2cbc:	69fb      	ldr	r3, [r7, #28]
    2cbe:	e06d      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Find size of the DER encoded S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, NULL, &s_size);
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	3320      	adds	r3, #32
    2cc4:	0018      	movs	r0, r3
    2cc6:	2310      	movs	r3, #16
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	9300      	str	r3, [sp, #0]
    2ccc:	2300      	movs	r3, #0
    2cce:	2201      	movs	r2, #1
    2cd0:	2120      	movs	r1, #32
    2cd2:	4c34      	ldr	r4, [pc, #208]	; (2da4 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2cd4:	47a0      	blx	r4
    2cd6:	0003      	movs	r3, r0
    2cd8:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2cda:	69fb      	ldr	r3, [r7, #28]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d001      	beq.n	2ce4 <atcacert_der_enc_ecdsa_sig_value+0x70>
        return ret;
    2ce0:	69fb      	ldr	r3, [r7, #28]
    2ce2:	e05b      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // This calculation assumes all DER lengths are a single byte, which is fine for 32 byte
    // R and S integers.
    der_sig_size_calc = 5 + r_size + s_size;
    2ce4:	697a      	ldr	r2, [r7, #20]
    2ce6:	693b      	ldr	r3, [r7, #16]
    2ce8:	18d3      	adds	r3, r2, r3
    2cea:	3305      	adds	r3, #5
    2cec:	61bb      	str	r3, [r7, #24]

    if (der_sig != NULL && *der_sig_size < der_sig_size_calc)
    2cee:	68bb      	ldr	r3, [r7, #8]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d009      	beq.n	2d08 <atcacert_der_enc_ecdsa_sig_value+0x94>
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	681a      	ldr	r2, [r3, #0]
    2cf8:	69bb      	ldr	r3, [r7, #24]
    2cfa:	429a      	cmp	r2, r3
    2cfc:	d204      	bcs.n	2d08 <atcacert_der_enc_ecdsa_sig_value+0x94>
    {
        *der_sig_size = der_sig_size_calc;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	69ba      	ldr	r2, [r7, #24]
    2d02:	601a      	str	r2, [r3, #0]
        return ATCACERT_E_BUFFER_TOO_SMALL;
    2d04:	2303      	movs	r3, #3
    2d06:	e049      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>
    }

    *der_sig_size = der_sig_size_calc;
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	69ba      	ldr	r2, [r7, #24]
    2d0c:	601a      	str	r2, [r3, #0]

    if (der_sig == NULL)
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d101      	bne.n	2d18 <atcacert_der_enc_ecdsa_sig_value+0xa4>
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size
    2d14:	2300      	movs	r3, #0
    2d16:	e041      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    der_sig[0] = 0x03;                              // signatureValue bit string tag
    2d18:	68bb      	ldr	r3, [r7, #8]
    2d1a:	2203      	movs	r2, #3
    2d1c:	701a      	strb	r2, [r3, #0]
    der_sig[1] = (uint8_t)(der_sig_size_calc - 2);  // signatureValue bit string length
    2d1e:	68bb      	ldr	r3, [r7, #8]
    2d20:	3301      	adds	r3, #1
    2d22:	69ba      	ldr	r2, [r7, #24]
    2d24:	b2d2      	uxtb	r2, r2
    2d26:	3a02      	subs	r2, #2
    2d28:	b2d2      	uxtb	r2, r2
    2d2a:	701a      	strb	r2, [r3, #0]
    der_sig[2] = 0x00;                              // signatureValue bit string spare bits
    2d2c:	68bb      	ldr	r3, [r7, #8]
    2d2e:	3302      	adds	r3, #2
    2d30:	2200      	movs	r2, #0
    2d32:	701a      	strb	r2, [r3, #0]

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value
    der_sig[3] = 0x30;                              // sequence tag
    2d34:	68bb      	ldr	r3, [r7, #8]
    2d36:	3303      	adds	r3, #3
    2d38:	2230      	movs	r2, #48	; 0x30
    2d3a:	701a      	strb	r2, [r3, #0]
    der_sig[4] = (uint8_t)(der_sig_size_calc - 5);  // sequence length
    2d3c:	68bb      	ldr	r3, [r7, #8]
    2d3e:	3304      	adds	r3, #4
    2d40:	69ba      	ldr	r2, [r7, #24]
    2d42:	b2d2      	uxtb	r2, r2
    2d44:	3a05      	subs	r2, #5
    2d46:	b2d2      	uxtb	r2, r2
    2d48:	701a      	strb	r2, [r3, #0]

    // Add R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, &der_sig[5], &r_size);
    2d4a:	68bb      	ldr	r3, [r7, #8]
    2d4c:	1d5a      	adds	r2, r3, #5
    2d4e:	68f8      	ldr	r0, [r7, #12]
    2d50:	2314      	movs	r3, #20
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	9300      	str	r3, [sp, #0]
    2d56:	0013      	movs	r3, r2
    2d58:	2201      	movs	r2, #1
    2d5a:	2120      	movs	r1, #32
    2d5c:	4c11      	ldr	r4, [pc, #68]	; (2da4 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2d5e:	47a0      	blx	r4
    2d60:	0003      	movs	r3, r0
    2d62:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d001      	beq.n	2d6e <atcacert_der_enc_ecdsa_sig_value+0xfa>
        return ret;
    2d6a:	69fb      	ldr	r3, [r7, #28]
    2d6c:	e016      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    // Add S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, &der_sig[5 + r_size], &s_size);
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	3320      	adds	r3, #32
    2d72:	0018      	movs	r0, r3
    2d74:	697b      	ldr	r3, [r7, #20]
    2d76:	3305      	adds	r3, #5
    2d78:	68ba      	ldr	r2, [r7, #8]
    2d7a:	18d2      	adds	r2, r2, r3
    2d7c:	2310      	movs	r3, #16
    2d7e:	18fb      	adds	r3, r7, r3
    2d80:	9300      	str	r3, [sp, #0]
    2d82:	0013      	movs	r3, r2
    2d84:	2201      	movs	r2, #1
    2d86:	2120      	movs	r1, #32
    2d88:	4c06      	ldr	r4, [pc, #24]	; (2da4 <atcacert_der_enc_ecdsa_sig_value+0x130>)
    2d8a:	47a0      	blx	r4
    2d8c:	0003      	movs	r3, r0
    2d8e:	61fb      	str	r3, [r7, #28]
    if (ret != ATCACERT_E_SUCCESS)
    2d90:	69fb      	ldr	r3, [r7, #28]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d001      	beq.n	2d9a <atcacert_der_enc_ecdsa_sig_value+0x126>
        return ret;
    2d96:	69fb      	ldr	r3, [r7, #28]
    2d98:	e000      	b.n	2d9c <atcacert_der_enc_ecdsa_sig_value+0x128>

    return ATCACERT_E_SUCCESS;
    2d9a:	2300      	movs	r3, #0
}
    2d9c:	0018      	movs	r0, r3
    2d9e:	46bd      	mov	sp, r7
    2da0:	b009      	add	sp, #36	; 0x24
    2da2:	bd90      	pop	{r4, r7, pc}
    2da4:	00002b1d 	.word	0x00002b1d

00002da8 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    2da8:	b590      	push	{r4, r7, lr}
    2daa:	b085      	sub	sp, #20
    2dac:	af00      	add	r7, sp, #0
    2dae:	0002      	movs	r2, r0
    2db0:	1dfb      	adds	r3, r7, #7
    2db2:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2db4:	230b      	movs	r3, #11
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	2200      	movs	r2, #0
    2dba:	701a      	strb	r2, [r3, #0]
    ATCACommand cacmd = (ATCACommand)malloc(sizeof(struct atca_command));
    2dbc:	2008      	movs	r0, #8
    2dbe:	4b11      	ldr	r3, [pc, #68]	; (2e04 <newATCACommand+0x5c>)
    2dc0:	4798      	blx	r3
    2dc2:	0003      	movs	r3, r0
    2dc4:	60fb      	str	r3, [r7, #12]

    cacmd->dt = device_type;
    2dc6:	68fb      	ldr	r3, [r7, #12]
    2dc8:	1dfa      	adds	r2, r7, #7
    2dca:	7812      	ldrb	r2, [r2, #0]
    2dcc:	701a      	strb	r2, [r3, #0]
    status = atInitExecTimes(cacmd, device_type);  // setup typical execution times for this device type
    2dce:	230b      	movs	r3, #11
    2dd0:	18fc      	adds	r4, r7, r3
    2dd2:	1dfb      	adds	r3, r7, #7
    2dd4:	781a      	ldrb	r2, [r3, #0]
    2dd6:	68fb      	ldr	r3, [r7, #12]
    2dd8:	0011      	movs	r1, r2
    2dda:	0018      	movs	r0, r3
    2ddc:	4b0a      	ldr	r3, [pc, #40]	; (2e08 <newATCACommand+0x60>)
    2dde:	4798      	blx	r3
    2de0:	0003      	movs	r3, r0
    2de2:	7023      	strb	r3, [r4, #0]

    if (status != ATCA_SUCCESS)
    2de4:	230b      	movs	r3, #11
    2de6:	18fb      	adds	r3, r7, r3
    2de8:	781b      	ldrb	r3, [r3, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d005      	beq.n	2dfa <newATCACommand+0x52>
    {
        free(cacmd);
    2dee:	68fb      	ldr	r3, [r7, #12]
    2df0:	0018      	movs	r0, r3
    2df2:	4b06      	ldr	r3, [pc, #24]	; (2e0c <newATCACommand+0x64>)
    2df4:	4798      	blx	r3
        cacmd = NULL;
    2df6:	2300      	movs	r3, #0
    2df8:	60fb      	str	r3, [r7, #12]
    }

    return cacmd;
    2dfa:	68fb      	ldr	r3, [r7, #12]
}
    2dfc:	0018      	movs	r0, r3
    2dfe:	46bd      	mov	sp, r7
    2e00:	b005      	add	sp, #20
    2e02:	bd90      	pop	{r4, r7, pc}
    2e04:	0000ad21 	.word	0x0000ad21
    2e08:	000030b1 	.word	0x000030b1
    2e0c:	0000ad35 	.word	0x0000ad35

00002e10 <atGenKey>:
 * \param[in] cacmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atGenKey(ATCACommand cacmd, ATCAPacket *packet)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
    2e18:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	2240      	movs	r2, #64	; 0x40
    2e1e:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    2e20:	683b      	ldr	r3, [r7, #0]
    2e22:	78db      	ldrb	r3, [r3, #3]
    2e24:	001a      	movs	r2, r3
    2e26:	2310      	movs	r3, #16
    2e28:	4013      	ands	r3, r2
    2e2a:	d007      	beq.n	2e3c <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    2e2c:	683b      	ldr	r3, [r7, #0]
    2e2e:	220a      	movs	r2, #10
    2e30:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	228a      	movs	r2, #138	; 0x8a
    2e36:	2104      	movs	r1, #4
    2e38:	5299      	strh	r1, [r3, r2]
    2e3a:	e006      	b.n	2e4a <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    2e3c:	683b      	ldr	r3, [r7, #0]
    2e3e:	2207      	movs	r2, #7
    2e40:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    2e42:	683b      	ldr	r3, [r7, #0]
    2e44:	228a      	movs	r2, #138	; 0x8a
    2e46:	214b      	movs	r1, #75	; 0x4b
    2e48:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b03      	ldr	r3, [pc, #12]	; (2e5c <atGenKey+0x4c>)
    2e50:	4798      	blx	r3
    return ATCA_SUCCESS;
    2e52:	2300      	movs	r3, #0
}
    2e54:	0018      	movs	r0, r3
    2e56:	46bd      	mov	sp, r7
    2e58:	b002      	add	sp, #8
    2e5a:	bd80      	pop	{r7, pc}
    2e5c:	000031f5 	.word	0x000031f5

00002e60 <atInfo>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atInfo(ATCACommand cacmd, ATCAPacket *packet)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b082      	sub	sp, #8
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
    2e68:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    2e6a:	683b      	ldr	r3, [r7, #0]
    2e6c:	2230      	movs	r2, #48	; 0x30
    2e6e:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    2e70:	683b      	ldr	r3, [r7, #0]
    2e72:	2207      	movs	r2, #7
    2e74:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	228a      	movs	r2, #138	; 0x8a
    2e7a:	2107      	movs	r1, #7
    2e7c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2e7e:	683b      	ldr	r3, [r7, #0]
    2e80:	0018      	movs	r0, r3
    2e82:	4b03      	ldr	r3, [pc, #12]	; (2e90 <atInfo+0x30>)
    2e84:	4798      	blx	r3
    return ATCA_SUCCESS;
    2e86:	2300      	movs	r3, #0
}
    2e88:	0018      	movs	r0, r3
    2e8a:	46bd      	mov	sp, r7
    2e8c:	b002      	add	sp, #8
    2e8e:	bd80      	pop	{r7, pc}
    2e90:	000031f5 	.word	0x000031f5

00002e94 <atLock>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atLock(ATCACommand cacmd, ATCAPacket *packet)
{
    2e94:	b580      	push	{r7, lr}
    2e96:	b082      	sub	sp, #8
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
    2e9c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_LOCK;
    2e9e:	683b      	ldr	r3, [r7, #0]
    2ea0:	2217      	movs	r2, #23
    2ea2:	709a      	strb	r2, [r3, #2]
    packet->txsize = LOCK_COUNT;
    2ea4:	683b      	ldr	r3, [r7, #0]
    2ea6:	2207      	movs	r2, #7
    2ea8:	705a      	strb	r2, [r3, #1]
    packet->rxsize = LOCK_RSP_SIZE;
    2eaa:	683b      	ldr	r3, [r7, #0]
    2eac:	228a      	movs	r2, #138	; 0x8a
    2eae:	2104      	movs	r1, #4
    2eb0:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2eb2:	683b      	ldr	r3, [r7, #0]
    2eb4:	0018      	movs	r0, r3
    2eb6:	4b03      	ldr	r3, [pc, #12]	; (2ec4 <atLock+0x30>)
    2eb8:	4798      	blx	r3
    return ATCA_SUCCESS;
    2eba:	2300      	movs	r3, #0
}
    2ebc:	0018      	movs	r0, r3
    2ebe:	46bd      	mov	sp, r7
    2ec0:	b002      	add	sp, #8
    2ec2:	bd80      	pop	{r7, pc}
    2ec4:	000031f5 	.word	0x000031f5

00002ec8 <atNonce>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atNonce(ATCACommand cacmd, ATCAPacket *packet)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b084      	sub	sp, #16
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
    2ed0:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    int mode = packet->param1 & 0x03;
    2ed2:	683b      	ldr	r3, [r7, #0]
    2ed4:	78db      	ldrb	r3, [r3, #3]
    2ed6:	001a      	movs	r2, r3
    2ed8:	2303      	movs	r3, #3
    2eda:	4013      	ands	r3, r2
    2edc:	60fb      	str	r3, [r7, #12]

    packet->opcode = ATCA_NONCE;
    2ede:	683b      	ldr	r3, [r7, #0]
    2ee0:	2216      	movs	r2, #22
    2ee2:	709a      	strb	r2, [r3, #2]

    if ( (mode == 0 || mode == 1) )         // mode[0:1] == 0 | 1 then NumIn is 20 bytes
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d002      	beq.n	2ef0 <atNonce+0x28>
    2eea:	68fb      	ldr	r3, [r7, #12]
    2eec:	2b01      	cmp	r3, #1
    2eee:	d107      	bne.n	2f00 <atNonce+0x38>
    {
        packet->txsize = NONCE_COUNT_SHORT; // 20 byte challenge
    2ef0:	683b      	ldr	r3, [r7, #0]
    2ef2:	221b      	movs	r2, #27
    2ef4:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG;
    2ef6:	683b      	ldr	r3, [r7, #0]
    2ef8:	228a      	movs	r2, #138	; 0x8a
    2efa:	2123      	movs	r1, #35	; 0x23
    2efc:	5299      	strh	r1, [r3, r2]
    2efe:	e00c      	b.n	2f1a <atNonce+0x52>
    }
    else if (mode == 0x03)                  // NumIn is 32 bytes
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	2b03      	cmp	r3, #3
    2f04:	d107      	bne.n	2f16 <atNonce+0x4e>
    {
        packet->txsize = NONCE_COUNT_LONG;  // 32 byte challenge
    2f06:	683b      	ldr	r3, [r7, #0]
    2f08:	2227      	movs	r2, #39	; 0x27
    2f0a:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT;
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	228a      	movs	r2, #138	; 0x8a
    2f10:	2104      	movs	r1, #4
    2f12:	5299      	strh	r1, [r3, r2]
    2f14:	e001      	b.n	2f1a <atNonce+0x52>
    }
    else
    {
        return ATCA_BAD_PARAM;
    2f16:	23e2      	movs	r3, #226	; 0xe2
    2f18:	e004      	b.n	2f24 <atNonce+0x5c>
    }

    atCalcCrc(packet);
    2f1a:	683b      	ldr	r3, [r7, #0]
    2f1c:	0018      	movs	r0, r3
    2f1e:	4b03      	ldr	r3, [pc, #12]	; (2f2c <atNonce+0x64>)
    2f20:	4798      	blx	r3
    return ATCA_SUCCESS;
    2f22:	2300      	movs	r3, #0
}
    2f24:	0018      	movs	r0, r3
    2f26:	46bd      	mov	sp, r7
    2f28:	b004      	add	sp, #16
    2f2a:	bd80      	pop	{r7, pc}
    2f2c:	000031f5 	.word	0x000031f5

00002f30 <atRandom>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRandom(ATCACommand cacmd, ATCAPacket *packet)
{
    2f30:	b580      	push	{r7, lr}
    2f32:	b082      	sub	sp, #8
    2f34:	af00      	add	r7, sp, #0
    2f36:	6078      	str	r0, [r7, #4]
    2f38:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    2f3a:	683b      	ldr	r3, [r7, #0]
    2f3c:	221b      	movs	r2, #27
    2f3e:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    2f40:	683b      	ldr	r3, [r7, #0]
    2f42:	2207      	movs	r2, #7
    2f44:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    2f46:	683b      	ldr	r3, [r7, #0]
    2f48:	228a      	movs	r2, #138	; 0x8a
    2f4a:	2123      	movs	r1, #35	; 0x23
    2f4c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2f4e:	683b      	ldr	r3, [r7, #0]
    2f50:	0018      	movs	r0, r3
    2f52:	4b03      	ldr	r3, [pc, #12]	; (2f60 <atRandom+0x30>)
    2f54:	4798      	blx	r3
    return ATCA_SUCCESS;
    2f56:	2300      	movs	r3, #0
}
    2f58:	0018      	movs	r0, r3
    2f5a:	46bd      	mov	sp, r7
    2f5c:	b002      	add	sp, #8
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	000031f5 	.word	0x000031f5

00002f64 <atRead>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRead(ATCACommand cacmd, ATCAPacket *packet)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b082      	sub	sp, #8
    2f68:	af00      	add	r7, sp, #0
    2f6a:	6078      	str	r0, [r7, #4]
    2f6c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    2f6e:	683b      	ldr	r3, [r7, #0]
    2f70:	2202      	movs	r2, #2
    2f72:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    2f74:	683b      	ldr	r3, [r7, #0]
    2f76:	2207      	movs	r2, #7
    2f78:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    2f7a:	683b      	ldr	r3, [r7, #0]
    2f7c:	78db      	ldrb	r3, [r3, #3]
    2f7e:	b25b      	sxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	db04      	blt.n	2f8e <atRead+0x2a>
        packet->rxsize = READ_4_RSP_SIZE;
    2f84:	683b      	ldr	r3, [r7, #0]
    2f86:	228a      	movs	r2, #138	; 0x8a
    2f88:	2107      	movs	r1, #7
    2f8a:	5299      	strh	r1, [r3, r2]
    2f8c:	e003      	b.n	2f96 <atRead+0x32>
    else
        packet->rxsize = READ_32_RSP_SIZE;
    2f8e:	683b      	ldr	r3, [r7, #0]
    2f90:	228a      	movs	r2, #138	; 0x8a
    2f92:	2123      	movs	r1, #35	; 0x23
    2f94:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2f96:	683b      	ldr	r3, [r7, #0]
    2f98:	0018      	movs	r0, r3
    2f9a:	4b03      	ldr	r3, [pc, #12]	; (2fa8 <atRead+0x44>)
    2f9c:	4798      	blx	r3
    return ATCA_SUCCESS;
    2f9e:	2300      	movs	r3, #0
}
    2fa0:	0018      	movs	r0, r3
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b002      	add	sp, #8
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	000031f5 	.word	0x000031f5

00002fac <atSign>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atSign(ATCACommand cacmd, ATCAPacket *packet)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b082      	sub	sp, #8
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	6078      	str	r0, [r7, #4]
    2fb4:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    2fb6:	683b      	ldr	r3, [r7, #0]
    2fb8:	2241      	movs	r2, #65	; 0x41
    2fba:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    2fbc:	683b      	ldr	r3, [r7, #0]
    2fbe:	2207      	movs	r2, #7
    2fc0:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    2fc2:	683b      	ldr	r3, [r7, #0]
    2fc4:	228a      	movs	r2, #138	; 0x8a
    2fc6:	2143      	movs	r1, #67	; 0x43
    2fc8:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2fca:	683b      	ldr	r3, [r7, #0]
    2fcc:	0018      	movs	r0, r3
    2fce:	4b03      	ldr	r3, [pc, #12]	; (2fdc <atSign+0x30>)
    2fd0:	4798      	blx	r3
    return ATCA_SUCCESS;
    2fd2:	2300      	movs	r3, #0
}
    2fd4:	0018      	movs	r0, r3
    2fd6:	46bd      	mov	sp, r7
    2fd8:	b002      	add	sp, #8
    2fda:	bd80      	pop	{r7, pc}
    2fdc:	000031f5 	.word	0x000031f5

00002fe0 <atUpdateExtra>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atUpdateExtra(ATCACommand cacmd, ATCAPacket *packet)
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b082      	sub	sp, #8
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    2fe8:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_UPDATE_EXTRA;
    2fea:	683b      	ldr	r3, [r7, #0]
    2fec:	2220      	movs	r2, #32
    2fee:	709a      	strb	r2, [r3, #2]
    packet->txsize = UPDATE_COUNT;
    2ff0:	683b      	ldr	r3, [r7, #0]
    2ff2:	2207      	movs	r2, #7
    2ff4:	705a      	strb	r2, [r3, #1]
    packet->rxsize = UPDATE_RSP_SIZE;
    2ff6:	683b      	ldr	r3, [r7, #0]
    2ff8:	228a      	movs	r2, #138	; 0x8a
    2ffa:	2104      	movs	r1, #4
    2ffc:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    2ffe:	683b      	ldr	r3, [r7, #0]
    3000:	0018      	movs	r0, r3
    3002:	4b03      	ldr	r3, [pc, #12]	; (3010 <atUpdateExtra+0x30>)
    3004:	4798      	blx	r3
    return ATCA_SUCCESS;
    3006:	2300      	movs	r3, #0
}
    3008:	0018      	movs	r0, r3
    300a:	46bd      	mov	sp, r7
    300c:	b002      	add	sp, #8
    300e:	bd80      	pop	{r7, pc}
    3010:	000031f5 	.word	0x000031f5

00003014 <atWrite>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atWrite(ATCACommand cacmd, ATCAPacket *packet, bool hasMAC)
{
    3014:	b580      	push	{r7, lr}
    3016:	b084      	sub	sp, #16
    3018:	af00      	add	r7, sp, #0
    301a:	60f8      	str	r0, [r7, #12]
    301c:	60b9      	str	r1, [r7, #8]
    301e:	1dfb      	adds	r3, r7, #7
    3020:	701a      	strb	r2, [r3, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_WRITE;
    3022:	68bb      	ldr	r3, [r7, #8]
    3024:	2212      	movs	r2, #18
    3026:	709a      	strb	r2, [r3, #2]

    packet->txsize = 7;
    3028:	68bb      	ldr	r3, [r7, #8]
    302a:	2207      	movs	r2, #7
    302c:	705a      	strb	r2, [r3, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
    302e:	68bb      	ldr	r3, [r7, #8]
    3030:	78db      	ldrb	r3, [r3, #3]
    3032:	b25b      	sxtb	r3, r3
    3034:	2b00      	cmp	r3, #0
    3036:	da06      	bge.n	3046 <atWrite+0x32>
        packet->txsize += ATCA_BLOCK_SIZE;
    3038:	68bb      	ldr	r3, [r7, #8]
    303a:	785b      	ldrb	r3, [r3, #1]
    303c:	3320      	adds	r3, #32
    303e:	b2da      	uxtb	r2, r3
    3040:	68bb      	ldr	r3, [r7, #8]
    3042:	705a      	strb	r2, [r3, #1]
    3044:	e005      	b.n	3052 <atWrite+0x3e>
    else
        packet->txsize += ATCA_WORD_SIZE;
    3046:	68bb      	ldr	r3, [r7, #8]
    3048:	785b      	ldrb	r3, [r3, #1]
    304a:	3304      	adds	r3, #4
    304c:	b2da      	uxtb	r2, r3
    304e:	68bb      	ldr	r3, [r7, #8]
    3050:	705a      	strb	r2, [r3, #1]
    if (hasMAC)
    3052:	1dfb      	adds	r3, r7, #7
    3054:	781b      	ldrb	r3, [r3, #0]
    3056:	2b00      	cmp	r3, #0
    3058:	d005      	beq.n	3066 <atWrite+0x52>
        packet->txsize += WRITE_MAC_SIZE;
    305a:	68bb      	ldr	r3, [r7, #8]
    305c:	785b      	ldrb	r3, [r3, #1]
    305e:	3320      	adds	r3, #32
    3060:	b2da      	uxtb	r2, r3
    3062:	68bb      	ldr	r3, [r7, #8]
    3064:	705a      	strb	r2, [r3, #1]

    packet->rxsize = WRITE_RSP_SIZE;
    3066:	68bb      	ldr	r3, [r7, #8]
    3068:	228a      	movs	r2, #138	; 0x8a
    306a:	2104      	movs	r1, #4
    306c:	5299      	strh	r1, [r3, r2]
    atCalcCrc(packet);
    306e:	68bb      	ldr	r3, [r7, #8]
    3070:	0018      	movs	r0, r3
    3072:	4b03      	ldr	r3, [pc, #12]	; (3080 <atWrite+0x6c>)
    3074:	4798      	blx	r3
    return ATCA_SUCCESS;
    3076:	2300      	movs	r3, #0
}
    3078:	0018      	movs	r0, r3
    307a:	46bd      	mov	sp, r7
    307c:	b004      	add	sp, #16
    307e:	bd80      	pop	{r7, pc}
    3080:	000031f5 	.word	0x000031f5

00003084 <deleteATCACommand>:
/** \brief ATCACommand destructor
 * \param[in] cacmd instance of a command object
 */

void deleteATCACommand(ATCACommand *cacmd)    // destructor
{
    3084:	b580      	push	{r7, lr}
    3086:	b082      	sub	sp, #8
    3088:	af00      	add	r7, sp, #0
    308a:	6078      	str	r0, [r7, #4]
    if (*cacmd)
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	681b      	ldr	r3, [r3, #0]
    3090:	2b00      	cmp	r3, #0
    3092:	d004      	beq.n	309e <deleteATCACommand+0x1a>
        free((void*)*cacmd);
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	0018      	movs	r0, r3
    309a:	4b04      	ldr	r3, [pc, #16]	; (30ac <deleteATCACommand+0x28>)
    309c:	4798      	blx	r3

    *cacmd = NULL;
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	2200      	movs	r2, #0
    30a2:	601a      	str	r2, [r3, #0]
}
    30a4:	46c0      	nop			; (mov r8, r8)
    30a6:	46bd      	mov	sp, r7
    30a8:	b002      	add	sp, #8
    30aa:	bd80      	pop	{r7, pc}
    30ac:	0000ad35 	.word	0x0000ad35

000030b0 <atInitExecTimes>:
 * \param[in] device_type - the device type - execution times vary by device type
 * \return ATCA_STATUS
 */

ATCA_STATUS atInitExecTimes(ATCACommand cacmd, ATCADeviceType device_type)
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b082      	sub	sp, #8
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
    30b8:	000a      	movs	r2, r1
    30ba:	1cfb      	adds	r3, r7, #3
    30bc:	701a      	strb	r2, [r3, #0]
    switch (device_type)
    30be:	1cfb      	adds	r3, r7, #3
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d006      	beq.n	30d4 <atInitExecTimes+0x24>
    30c6:	db09      	blt.n	30dc <atInitExecTimes+0x2c>
    30c8:	2b02      	cmp	r3, #2
    30ca:	dc07      	bgt.n	30dc <atInitExecTimes+0x2c>
    {
    case ATECC108A:
    case ATECC508A:
        cacmd->execution_times = exectimes_x08a;
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	4a07      	ldr	r2, [pc, #28]	; (30ec <atInitExecTimes+0x3c>)
    30d0:	605a      	str	r2, [r3, #4]
        break;
    30d2:	e005      	b.n	30e0 <atInitExecTimes+0x30>
    case ATSHA204A:
        cacmd->execution_times = exectimes_204a;
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	4a06      	ldr	r2, [pc, #24]	; (30f0 <atInitExecTimes+0x40>)
    30d8:	605a      	str	r2, [r3, #4]
        break;
    30da:	e001      	b.n	30e0 <atInitExecTimes+0x30>
    default:
        return ATCA_BAD_PARAM;
    30dc:	23e2      	movs	r3, #226	; 0xe2
    30de:	e000      	b.n	30e2 <atInitExecTimes+0x32>
        break;
    }

    return ATCA_SUCCESS;
    30e0:	2300      	movs	r3, #0
}
    30e2:	0018      	movs	r0, r3
    30e4:	46bd      	mov	sp, r7
    30e6:	b002      	add	sp, #8
    30e8:	bd80      	pop	{r7, pc}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	200000cc 	.word	0x200000cc
    30f0:	200000f8 	.word	0x200000f8

000030f4 <atGetExecTime>:
 * \param[in] cmd - the specific command for which to lookup the execution time
 * \return typical execution time in milleseconds for the given command
 */

uint16_t atGetExecTime(ATCACommand cacmd, ATCA_CmdMap cmd)
{
    30f4:	b580      	push	{r7, lr}
    30f6:	b082      	sub	sp, #8
    30f8:	af00      	add	r7, sp, #0
    30fa:	6078      	str	r0, [r7, #4]
    30fc:	000a      	movs	r2, r1
    30fe:	1cfb      	adds	r3, r7, #3
    3100:	701a      	strb	r2, [r3, #0]
    return cacmd->execution_times[cmd];
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	685a      	ldr	r2, [r3, #4]
    3106:	1cfb      	adds	r3, r7, #3
    3108:	781b      	ldrb	r3, [r3, #0]
    310a:	005b      	lsls	r3, r3, #1
    310c:	18d3      	adds	r3, r2, r3
    310e:	881b      	ldrh	r3, [r3, #0]
}
    3110:	0018      	movs	r0, r3
    3112:	46bd      	mov	sp, r7
    3114:	b002      	add	sp, #8
    3116:	bd80      	pop	{r7, pc}

00003118 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    3118:	b580      	push	{r7, lr}
    311a:	b088      	sub	sp, #32
    311c:	af00      	add	r7, sp, #0
    311e:	60f8      	str	r0, [r7, #12]
    3120:	60b9      	str	r1, [r7, #8]
    3122:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    3124:	231a      	movs	r3, #26
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    312c:	2316      	movs	r3, #22
    312e:	18fb      	adds	r3, r7, r3
    3130:	4a2f      	ldr	r2, [pc, #188]	; (31f0 <atCRC+0xd8>)
    3132:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    3134:	2300      	movs	r3, #0
    3136:	61fb      	str	r3, [r7, #28]
    3138:	e043      	b.n	31c2 <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    313a:	2319      	movs	r3, #25
    313c:	18fb      	adds	r3, r7, r3
    313e:	2201      	movs	r2, #1
    3140:	701a      	strb	r2, [r3, #0]
    3142:	e036      	b.n	31b2 <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    3144:	68ba      	ldr	r2, [r7, #8]
    3146:	69fb      	ldr	r3, [r7, #28]
    3148:	18d3      	adds	r3, r2, r3
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	2219      	movs	r2, #25
    314e:	18ba      	adds	r2, r7, r2
    3150:	7812      	ldrb	r2, [r2, #0]
    3152:	4013      	ands	r3, r2
    3154:	b2db      	uxtb	r3, r3
    3156:	1e5a      	subs	r2, r3, #1
    3158:	4193      	sbcs	r3, r2
    315a:	b2da      	uxtb	r2, r3
    315c:	2315      	movs	r3, #21
    315e:	18fb      	adds	r3, r7, r3
    3160:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    3162:	231a      	movs	r3, #26
    3164:	18fb      	adds	r3, r7, r3
    3166:	881b      	ldrh	r3, [r3, #0]
    3168:	0bdb      	lsrs	r3, r3, #15
    316a:	b29a      	uxth	r2, r3
    316c:	2314      	movs	r3, #20
    316e:	18fb      	adds	r3, r7, r3
    3170:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    3172:	231a      	movs	r3, #26
    3174:	18fa      	adds	r2, r7, r3
    3176:	231a      	movs	r3, #26
    3178:	18fb      	adds	r3, r7, r3
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	18db      	adds	r3, r3, r3
    317e:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    3180:	2315      	movs	r3, #21
    3182:	18fa      	adds	r2, r7, r3
    3184:	2314      	movs	r3, #20
    3186:	18fb      	adds	r3, r7, r3
    3188:	7812      	ldrb	r2, [r2, #0]
    318a:	781b      	ldrb	r3, [r3, #0]
    318c:	429a      	cmp	r2, r3
    318e:	d009      	beq.n	31a4 <atCRC+0x8c>
                crc_register ^= polynom;
    3190:	231a      	movs	r3, #26
    3192:	18fb      	adds	r3, r7, r3
    3194:	221a      	movs	r2, #26
    3196:	18b9      	adds	r1, r7, r2
    3198:	2216      	movs	r2, #22
    319a:	18ba      	adds	r2, r7, r2
    319c:	8809      	ldrh	r1, [r1, #0]
    319e:	8812      	ldrh	r2, [r2, #0]
    31a0:	404a      	eors	r2, r1
    31a2:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    31a4:	2319      	movs	r3, #25
    31a6:	18fa      	adds	r2, r7, r3
    31a8:	2319      	movs	r3, #25
    31aa:	18fb      	adds	r3, r7, r3
    31ac:	781b      	ldrb	r3, [r3, #0]
    31ae:	18db      	adds	r3, r3, r3
    31b0:	7013      	strb	r3, [r2, #0]
    31b2:	2319      	movs	r3, #25
    31b4:	18fb      	adds	r3, r7, r3
    31b6:	781b      	ldrb	r3, [r3, #0]
    31b8:	2b00      	cmp	r3, #0
    31ba:	d1c3      	bne.n	3144 <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    31bc:	69fb      	ldr	r3, [r7, #28]
    31be:	3301      	adds	r3, #1
    31c0:	61fb      	str	r3, [r7, #28]
    31c2:	69fa      	ldr	r2, [r7, #28]
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	429a      	cmp	r2, r3
    31c8:	d3b7      	bcc.n	313a <atCRC+0x22>
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    31ca:	231a      	movs	r3, #26
    31cc:	18fb      	adds	r3, r7, r3
    31ce:	881b      	ldrh	r3, [r3, #0]
    31d0:	b2da      	uxtb	r2, r3
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	3301      	adds	r3, #1
    31da:	221a      	movs	r2, #26
    31dc:	18ba      	adds	r2, r7, r2
    31de:	8812      	ldrh	r2, [r2, #0]
    31e0:	0a12      	lsrs	r2, r2, #8
    31e2:	b292      	uxth	r2, r2
    31e4:	b2d2      	uxtb	r2, r2
    31e6:	701a      	strb	r2, [r3, #0]
}
    31e8:	46c0      	nop			; (mov r8, r8)
    31ea:	46bd      	mov	sp, r7
    31ec:	b008      	add	sp, #32
    31ee:	bd80      	pop	{r7, pc}
    31f0:	ffff8005 	.word	0xffff8005

000031f4 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b084      	sub	sp, #16
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	785a      	ldrb	r2, [r3, #1]
    3200:	230f      	movs	r3, #15
    3202:	18fb      	adds	r3, r7, r3
    3204:	3a02      	subs	r2, #2
    3206:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	1c5a      	adds	r2, r3, #1
    320c:	230f      	movs	r3, #15
    320e:	18fb      	adds	r3, r7, r3
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	18d3      	adds	r3, r2, r3
    3214:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    3216:	230f      	movs	r3, #15
    3218:	18fb      	adds	r3, r7, r3
    321a:	7818      	ldrb	r0, [r3, #0]
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	3301      	adds	r3, #1
    3220:	68ba      	ldr	r2, [r7, #8]
    3222:	0019      	movs	r1, r3
    3224:	4b02      	ldr	r3, [pc, #8]	; (3230 <atCalcCrc+0x3c>)
    3226:	4798      	blx	r3
}
    3228:	46c0      	nop			; (mov r8, r8)
    322a:	46bd      	mov	sp, r7
    322c:	b004      	add	sp, #16
    322e:	bd80      	pop	{r7, pc}
    3230:	00003119 	.word	0x00003119

00003234 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return status of the consistency check
 */

uint8_t atCheckCrc(const uint8_t *response)
{
    3234:	b580      	push	{r7, lr}
    3236:	b084      	sub	sp, #16
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    323c:	230f      	movs	r3, #15
    323e:	18fb      	adds	r3, r7, r3
    3240:	687a      	ldr	r2, [r7, #4]
    3242:	7812      	ldrb	r2, [r2, #0]
    3244:	701a      	strb	r2, [r3, #0]

    if (count < ATCA_CRC_SIZE)
    3246:	230f      	movs	r3, #15
    3248:	18fb      	adds	r3, r7, r3
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	2b01      	cmp	r3, #1
    324e:	d801      	bhi.n	3254 <atCheckCrc+0x20>
        return ATCA_BAD_PARAM;
    3250:	23e2      	movs	r3, #226	; 0xe2
    3252:	e029      	b.n	32a8 <atCheckCrc+0x74>

    count -= ATCA_CRC_SIZE;
    3254:	230f      	movs	r3, #15
    3256:	18fb      	adds	r3, r7, r3
    3258:	220f      	movs	r2, #15
    325a:	18ba      	adds	r2, r7, r2
    325c:	7812      	ldrb	r2, [r2, #0]
    325e:	3a02      	subs	r2, #2
    3260:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    3262:	230f      	movs	r3, #15
    3264:	18fb      	adds	r3, r7, r3
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	220c      	movs	r2, #12
    326a:	18ba      	adds	r2, r7, r2
    326c:	6879      	ldr	r1, [r7, #4]
    326e:	0018      	movs	r0, r3
    3270:	4b0f      	ldr	r3, [pc, #60]	; (32b0 <atCheckCrc+0x7c>)
    3272:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_BAD_CRC;
    3274:	230c      	movs	r3, #12
    3276:	18fb      	adds	r3, r7, r3
    3278:	781a      	ldrb	r2, [r3, #0]
    327a:	230f      	movs	r3, #15
    327c:	18fb      	adds	r3, r7, r3
    327e:	781b      	ldrb	r3, [r3, #0]
    3280:	6879      	ldr	r1, [r7, #4]
    3282:	18cb      	adds	r3, r1, r3
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	429a      	cmp	r2, r3
    3288:	d10d      	bne.n	32a6 <atCheckCrc+0x72>
    328a:	230c      	movs	r3, #12
    328c:	18fb      	adds	r3, r7, r3
    328e:	785a      	ldrb	r2, [r3, #1]
    3290:	230f      	movs	r3, #15
    3292:	18fb      	adds	r3, r7, r3
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	3301      	adds	r3, #1
    3298:	6879      	ldr	r1, [r7, #4]
    329a:	18cb      	adds	r3, r1, r3
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	429a      	cmp	r2, r3
    32a0:	d101      	bne.n	32a6 <atCheckCrc+0x72>
    32a2:	2300      	movs	r3, #0
    32a4:	e000      	b.n	32a8 <atCheckCrc+0x74>
    32a6:	23e5      	movs	r3, #229	; 0xe5
}
    32a8:	0018      	movs	r0, r3
    32aa:	46bd      	mov	sp, r7
    32ac:	b004      	add	sp, #16
    32ae:	bd80      	pop	{r7, pc}
    32b0:	00003119 	.word	0x00003119

000032b4 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_STATUS indicating type of error or no error
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b084      	sub	sp, #16
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    32bc:	230c      	movs	r3, #12
    32be:	18fb      	adds	r3, r7, r3
    32c0:	4a19      	ldr	r2, [pc, #100]	; (3328 <isATCAError+0x74>)
    32c2:	6812      	ldr	r2, [r2, #0]
    32c4:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    32c6:	230c      	movs	r3, #12
    32c8:	18f9      	adds	r1, r7, r3
    32ca:	687b      	ldr	r3, [r7, #4]
    32cc:	2204      	movs	r2, #4
    32ce:	0018      	movs	r0, r3
    32d0:	4b16      	ldr	r3, [pc, #88]	; (332c <isATCAError+0x78>)
    32d2:	4798      	blx	r3
    32d4:	1e03      	subs	r3, r0, #0
    32d6:	d101      	bne.n	32dc <isATCAError+0x28>
        return ATCA_SUCCESS;
    32d8:	2300      	movs	r3, #0
    32da:	e020      	b.n	331e <isATCAError+0x6a>

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	781b      	ldrb	r3, [r3, #0]
    32e0:	2b04      	cmp	r3, #4
    32e2:	d11b      	bne.n	331c <isATCAError+0x68>
    {
        switch (data[1])
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	3301      	adds	r3, #1
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	2b0f      	cmp	r3, #15
    32ec:	d00e      	beq.n	330c <isATCAError+0x58>
    32ee:	dc04      	bgt.n	32fa <isATCAError+0x46>
    32f0:	2b01      	cmp	r3, #1
    32f2:	d007      	beq.n	3304 <isATCAError+0x50>
    32f4:	2b03      	cmp	r3, #3
    32f6:	d007      	beq.n	3308 <isATCAError+0x54>
    32f8:	e00e      	b.n	3318 <isATCAError+0x64>
    32fa:	2b11      	cmp	r3, #17
    32fc:	d008      	beq.n	3310 <isATCAError+0x5c>
    32fe:	2bff      	cmp	r3, #255	; 0xff
    3300:	d008      	beq.n	3314 <isATCAError+0x60>
    3302:	e009      	b.n	3318 <isATCAError+0x64>
        {
        case 0x01:              // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    3304:	23d1      	movs	r3, #209	; 0xd1
    3306:	e00a      	b.n	331e <isATCAError+0x6a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    3308:	23d2      	movs	r3, #210	; 0xd2
    330a:	e008      	b.n	331e <isATCAError+0x6a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    330c:	23f4      	movs	r3, #244	; 0xf4
    330e:	e006      	b.n	331e <isATCAError+0x6a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    3310:	23f3      	movs	r3, #243	; 0xf3
    3312:	e004      	b.n	331e <isATCAError+0x6a>
            break;
        case 0xff: // bad crc found or other comm error
            return ATCA_STATUS_CRC;
    3314:	23d4      	movs	r3, #212	; 0xd4
    3316:	e002      	b.n	331e <isATCAError+0x6a>
            break;
        default:
            return ATCA_GEN_FAIL;
    3318:	23e1      	movs	r3, #225	; 0xe1
    331a:	e000      	b.n	331e <isATCAError+0x6a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    331c:	2300      	movs	r3, #0
    }
}
    331e:	0018      	movs	r0, r3
    3320:	46bd      	mov	sp, r7
    3322:	b004      	add	sp, #16
    3324:	bd80      	pop	{r7, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	0000c3a0 	.word	0x0000c3a0
    332c:	0000ad49 	.word	0x0000ad49

00003330 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    3330:	b580      	push	{r7, lr}
    3332:	b084      	sub	sp, #16
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
    ATCADevice cadev = NULL;
    3338:	2300      	movs	r3, #0
    333a:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	d101      	bne.n	3346 <newATCADevice+0x16>
        return NULL;
    3342:	2300      	movs	r3, #0
    3344:	e022      	b.n	338c <newATCADevice+0x5c>

    cadev = (ATCADevice)malloc(sizeof(struct atca_device));
    3346:	2008      	movs	r0, #8
    3348:	4b12      	ldr	r3, [pc, #72]	; (3394 <newATCADevice+0x64>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	60fb      	str	r3, [r7, #12]
    cadev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	785b      	ldrb	r3, [r3, #1]
    3354:	0018      	movs	r0, r3
    3356:	4b10      	ldr	r3, [pc, #64]	; (3398 <newATCADevice+0x68>)
    3358:	4798      	blx	r3
    335a:	0002      	movs	r2, r0
    335c:	68fb      	ldr	r3, [r7, #12]
    335e:	601a      	str	r2, [r3, #0]
    cadev->mIface    = (ATCAIface)newATCAIface(cfg);
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	0018      	movs	r0, r3
    3364:	4b0d      	ldr	r3, [pc, #52]	; (339c <newATCADevice+0x6c>)
    3366:	4798      	blx	r3
    3368:	0002      	movs	r2, r0
    336a:	68fb      	ldr	r3, [r7, #12]
    336c:	605a      	str	r2, [r3, #4]

    if (cadev->mCommands == NULL || cadev->mIface == NULL)
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	2b00      	cmp	r3, #0
    3374:	d003      	beq.n	337e <newATCADevice+0x4e>
    3376:	68fb      	ldr	r3, [r7, #12]
    3378:	685b      	ldr	r3, [r3, #4]
    337a:	2b00      	cmp	r3, #0
    337c:	d105      	bne.n	338a <newATCADevice+0x5a>
    {
        free(cadev);
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	0018      	movs	r0, r3
    3382:	4b07      	ldr	r3, [pc, #28]	; (33a0 <newATCADevice+0x70>)
    3384:	4798      	blx	r3
        cadev = NULL;
    3386:	2300      	movs	r3, #0
    3388:	60fb      	str	r3, [r7, #12]
    }

    return cadev;
    338a:	68fb      	ldr	r3, [r7, #12]
}
    338c:	0018      	movs	r0, r3
    338e:	46bd      	mov	sp, r7
    3390:	b004      	add	sp, #16
    3392:	bd80      	pop	{r7, pc}
    3394:	0000ad21 	.word	0x0000ad21
    3398:	00002da9 	.word	0x00002da9
    339c:	00003419 	.word	0x00003419
    33a0:	0000ad35 	.word	0x0000ad35

000033a4 <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b082      	sub	sp, #8
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	681b      	ldr	r3, [r3, #0]
}
    33b0:	0018      	movs	r0, r3
    33b2:	46bd      	mov	sp, r7
    33b4:	b002      	add	sp, #8
    33b6:	bd80      	pop	{r7, pc}

000033b8 <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	685b      	ldr	r3, [r3, #4]
}
    33c4:	0018      	movs	r0, r3
    33c6:	46bd      	mov	sp, r7
    33c8:	b002      	add	sp, #8
    33ca:	bd80      	pop	{r7, pc}

000033cc <deleteATCADevice>:
 * \param[in] cadev  pointer to a reference to a device
 *
 */

void deleteATCADevice(ATCADevice *cadev)   // destructor
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b084      	sub	sp, #16
    33d0:	af00      	add	r7, sp, #0
    33d2:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *cadev;
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	60fb      	str	r3, [r7, #12]

    if (*cadev)
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	681b      	ldr	r3, [r3, #0]
    33de:	2b00      	cmp	r3, #0
    33e0:	d00d      	beq.n	33fe <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    33e2:	68fb      	ldr	r3, [r7, #12]
    33e4:	0018      	movs	r0, r3
    33e6:	4b09      	ldr	r3, [pc, #36]	; (340c <deleteATCADevice+0x40>)
    33e8:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    33ea:	68fb      	ldr	r3, [r7, #12]
    33ec:	3304      	adds	r3, #4
    33ee:	0018      	movs	r0, r3
    33f0:	4b07      	ldr	r3, [pc, #28]	; (3410 <deleteATCADevice+0x44>)
    33f2:	4798      	blx	r3
        free((void*)*cadev);
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	0018      	movs	r0, r3
    33fa:	4b06      	ldr	r3, [pc, #24]	; (3414 <deleteATCADevice+0x48>)
    33fc:	4798      	blx	r3
    }

    *cadev = NULL;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	2200      	movs	r2, #0
    3402:	601a      	str	r2, [r3, #0]
}
    3404:	46c0      	nop			; (mov r8, r8)
    3406:	46bd      	mov	sp, r7
    3408:	b004      	add	sp, #16
    340a:	bd80      	pop	{r7, pc}
    340c:	00003085 	.word	0x00003085
    3410:	000035b5 	.word	0x000035b5
    3414:	0000ad35 	.word	0x0000ad35

00003418 <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
    ATCAIface caiface = (ATCAIface)malloc(sizeof(struct atca_iface));
    3420:	2028      	movs	r0, #40	; 0x28
    3422:	4b0e      	ldr	r3, [pc, #56]	; (345c <newATCAIface+0x44>)
    3424:	4798      	blx	r3
    3426:	0003      	movs	r3, r0
    3428:	60fb      	str	r3, [r7, #12]

    caiface->mType = cfg->iface_type;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	781a      	ldrb	r2, [r3, #0]
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	701a      	strb	r2, [r3, #0]
    caiface->mIfaceCFG = cfg;
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	687a      	ldr	r2, [r7, #4]
    3436:	605a      	str	r2, [r3, #4]

    if (atinit(caiface) != ATCA_SUCCESS)
    3438:	68fb      	ldr	r3, [r7, #12]
    343a:	0018      	movs	r0, r3
    343c:	4b08      	ldr	r3, [pc, #32]	; (3460 <newATCAIface+0x48>)
    343e:	4798      	blx	r3
    3440:	1e03      	subs	r3, r0, #0
    3442:	d005      	beq.n	3450 <newATCAIface+0x38>
    {
        free(caiface);
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	0018      	movs	r0, r3
    3448:	4b06      	ldr	r3, [pc, #24]	; (3464 <newATCAIface+0x4c>)
    344a:	4798      	blx	r3
        caiface = NULL;
    344c:	2300      	movs	r3, #0
    344e:	60fb      	str	r3, [r7, #12]
    }

    return caiface;
    3450:	68fb      	ldr	r3, [r7, #12]
}
    3452:	0018      	movs	r0, r3
    3454:	46bd      	mov	sp, r7
    3456:	b004      	add	sp, #16
    3458:	bd80      	pop	{r7, pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	0000ad21 	.word	0x0000ad21
    3460:	00003469 	.word	0x00003469
    3464:	0000ad35 	.word	0x0000ad35

00003468 <atinit>:

// public ATCAIface methods

ATCA_STATUS atinit(ATCAIface caiface)
{
    3468:	b590      	push	{r4, r7, lr}
    346a:	b08d      	sub	sp, #52	; 0x34
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    3470:	232f      	movs	r3, #47	; 0x2f
    3472:	18fb      	adds	r3, r7, r3
    3474:	22f0      	movs	r2, #240	; 0xf0
    3476:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(caiface, &hal);
    3478:	2308      	movs	r3, #8
    347a:	18fa      	adds	r2, r7, r3
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	0011      	movs	r1, r2
    3480:	0018      	movs	r0, r3
    3482:	4b14      	ldr	r3, [pc, #80]	; (34d4 <atinit+0x6c>)
    3484:	4798      	blx	r3

    status = caiface->atinit(&hal, caiface->mIfaceCFG);
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	689a      	ldr	r2, [r3, #8]
    348a:	687b      	ldr	r3, [r7, #4]
    348c:	6859      	ldr	r1, [r3, #4]
    348e:	232f      	movs	r3, #47	; 0x2f
    3490:	18fc      	adds	r4, r7, r3
    3492:	2308      	movs	r3, #8
    3494:	18fb      	adds	r3, r7, r3
    3496:	0018      	movs	r0, r3
    3498:	4790      	blx	r2
    349a:	0003      	movs	r3, r0
    349c:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    349e:	232f      	movs	r3, #47	; 0x2f
    34a0:	18fb      	adds	r3, r7, r3
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b00      	cmp	r3, #0
    34a6:	d10d      	bne.n	34c4 <atinit+0x5c>
    {
        caiface->hal_data = hal.hal_data;
    34a8:	2308      	movs	r3, #8
    34aa:	18fb      	adds	r3, r7, r3
    34ac:	6a1a      	ldr	r2, [r3, #32]
    34ae:	687b      	ldr	r3, [r7, #4]
    34b0:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = caiface->atpostinit(caiface);
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	68db      	ldr	r3, [r3, #12]
    34b6:	222f      	movs	r2, #47	; 0x2f
    34b8:	18bc      	adds	r4, r7, r2
    34ba:	687a      	ldr	r2, [r7, #4]
    34bc:	0010      	movs	r0, r2
    34be:	4798      	blx	r3
    34c0:	0003      	movs	r3, r0
    34c2:	7023      	strb	r3, [r4, #0]
    }

    return status;
    34c4:	232f      	movs	r3, #47	; 0x2f
    34c6:	18fb      	adds	r3, r7, r3
    34c8:	781b      	ldrb	r3, [r3, #0]
}
    34ca:	0018      	movs	r0, r3
    34cc:	46bd      	mov	sp, r7
    34ce:	b00d      	add	sp, #52	; 0x34
    34d0:	bd90      	pop	{r4, r7, pc}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	000035f9 	.word	0x000035f9

000034d8 <atsend>:

ATCA_STATUS atsend(ATCAIface caiface, uint8_t *txdata, int txlength)
{
    34d8:	b580      	push	{r7, lr}
    34da:	b084      	sub	sp, #16
    34dc:	af00      	add	r7, sp, #0
    34de:	60f8      	str	r0, [r7, #12]
    34e0:	60b9      	str	r1, [r7, #8]
    34e2:	607a      	str	r2, [r7, #4]
    return caiface->atsend(caiface, txdata, txlength);
    34e4:	68fb      	ldr	r3, [r7, #12]
    34e6:	691b      	ldr	r3, [r3, #16]
    34e8:	687a      	ldr	r2, [r7, #4]
    34ea:	68b9      	ldr	r1, [r7, #8]
    34ec:	68f8      	ldr	r0, [r7, #12]
    34ee:	4798      	blx	r3
    34f0:	0003      	movs	r3, r0
}
    34f2:	0018      	movs	r0, r3
    34f4:	46bd      	mov	sp, r7
    34f6:	b004      	add	sp, #16
    34f8:	bd80      	pop	{r7, pc}

000034fa <atreceive>:

ATCA_STATUS atreceive(ATCAIface caiface, uint8_t *rxdata, uint16_t *rxlength)
{
    34fa:	b580      	push	{r7, lr}
    34fc:	b084      	sub	sp, #16
    34fe:	af00      	add	r7, sp, #0
    3500:	60f8      	str	r0, [r7, #12]
    3502:	60b9      	str	r1, [r7, #8]
    3504:	607a      	str	r2, [r7, #4]
    return caiface->atreceive(caiface, rxdata, rxlength);
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	695b      	ldr	r3, [r3, #20]
    350a:	687a      	ldr	r2, [r7, #4]
    350c:	68b9      	ldr	r1, [r7, #8]
    350e:	68f8      	ldr	r0, [r7, #12]
    3510:	4798      	blx	r3
    3512:	0003      	movs	r3, r0
}
    3514:	0018      	movs	r0, r3
    3516:	46bd      	mov	sp, r7
    3518:	b004      	add	sp, #16
    351a:	bd80      	pop	{r7, pc}

0000351c <atwake>:

ATCA_STATUS atwake(ATCAIface caiface)
{
    351c:	b580      	push	{r7, lr}
    351e:	b082      	sub	sp, #8
    3520:	af00      	add	r7, sp, #0
    3522:	6078      	str	r0, [r7, #4]
    return caiface->atwake(caiface);
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	699b      	ldr	r3, [r3, #24]
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	0010      	movs	r0, r2
    352c:	4798      	blx	r3
    352e:	0003      	movs	r3, r0
}
    3530:	0018      	movs	r0, r3
    3532:	46bd      	mov	sp, r7
    3534:	b002      	add	sp, #8
    3536:	bd80      	pop	{r7, pc}

00003538 <atidle>:

ATCA_STATUS atidle(ATCAIface caiface)
{
    3538:	b590      	push	{r4, r7, lr}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atidle(caiface);
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	69db      	ldr	r3, [r3, #28]
    3544:	220f      	movs	r2, #15
    3546:	18bc      	adds	r4, r7, r2
    3548:	687a      	ldr	r2, [r7, #4]
    354a:	0010      	movs	r0, r2
    354c:	4798      	blx	r3
    354e:	0003      	movs	r3, r0
    3550:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    3552:	2001      	movs	r0, #1
    3554:	4b04      	ldr	r3, [pc, #16]	; (3568 <atidle+0x30>)
    3556:	4798      	blx	r3
    return status;
    3558:	230f      	movs	r3, #15
    355a:	18fb      	adds	r3, r7, r3
    355c:	781b      	ldrb	r3, [r3, #0]
}
    355e:	0018      	movs	r0, r3
    3560:	46bd      	mov	sp, r7
    3562:	b005      	add	sp, #20
    3564:	bd90      	pop	{r4, r7, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	000066d1 	.word	0x000066d1

0000356c <atsleep>:

ATCA_STATUS atsleep(ATCAIface caiface)
{
    356c:	b590      	push	{r4, r7, lr}
    356e:	b085      	sub	sp, #20
    3570:	af00      	add	r7, sp, #0
    3572:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atsleep(caiface);
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	6a1b      	ldr	r3, [r3, #32]
    3578:	220f      	movs	r2, #15
    357a:	18bc      	adds	r4, r7, r2
    357c:	687a      	ldr	r2, [r7, #4]
    357e:	0010      	movs	r0, r2
    3580:	4798      	blx	r3
    3582:	0003      	movs	r3, r0
    3584:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    3586:	2001      	movs	r0, #1
    3588:	4b04      	ldr	r3, [pc, #16]	; (359c <atsleep+0x30>)
    358a:	4798      	blx	r3
    return status;
    358c:	230f      	movs	r3, #15
    358e:	18fb      	adds	r3, r7, r3
    3590:	781b      	ldrb	r3, [r3, #0]
}
    3592:	0018      	movs	r0, r3
    3594:	46bd      	mov	sp, r7
    3596:	b005      	add	sp, #20
    3598:	bd90      	pop	{r4, r7, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	000066d1 	.word	0x000066d1

000035a0 <atgetifacecfg>:

ATCAIfaceCfg * atgetifacecfg(ATCAIface caiface)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b082      	sub	sp, #8
    35a4:	af00      	add	r7, sp, #0
    35a6:	6078      	str	r0, [r7, #4]
    return caiface->mIfaceCFG;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	685b      	ldr	r3, [r3, #4]
}
    35ac:	0018      	movs	r0, r3
    35ae:	46bd      	mov	sp, r7
    35b0:	b002      	add	sp, #8
    35b2:	bd80      	pop	{r7, pc}

000035b4 <deleteATCAIface>:
{
    return caiface->hal_data;
}

void deleteATCAIface(ATCAIface *caiface) // destructor
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b082      	sub	sp, #8
    35b8:	af00      	add	r7, sp, #0
    35ba:	6078      	str	r0, [r7, #4]
    if (*caiface)
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	681b      	ldr	r3, [r3, #0]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d00e      	beq.n	35e2 <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*caiface)->mType, (*caiface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	781a      	ldrb	r2, [r3, #0]
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35d0:	0019      	movs	r1, r3
    35d2:	0010      	movs	r0, r2
    35d4:	4b06      	ldr	r3, [pc, #24]	; (35f0 <deleteATCAIface+0x3c>)
    35d6:	4798      	blx	r3
        free((void*)*caiface);
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	681b      	ldr	r3, [r3, #0]
    35dc:	0018      	movs	r0, r3
    35de:	4b05      	ldr	r3, [pc, #20]	; (35f4 <deleteATCAIface+0x40>)
    35e0:	4798      	blx	r3
    }

    *caiface = NULL;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	2200      	movs	r2, #0
    35e6:	601a      	str	r2, [r3, #0]
}
    35e8:	46c0      	nop			; (mov r8, r8)
    35ea:	46bd      	mov	sp, r7
    35ec:	b002      	add	sp, #8
    35ee:	bd80      	pop	{r7, pc}
    35f0:	00005d35 	.word	0x00005d35
    35f4:	0000ad35 	.word	0x0000ad35

000035f8 <_atinit>:

ATCA_STATUS _atinit(ATCAIface caiface, ATCAHAL_t *hal)
{
    35f8:	b580      	push	{r7, lr}
    35fa:	b082      	sub	sp, #8
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
    3600:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(caiface->mIfaceCFG, hal);
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	685b      	ldr	r3, [r3, #4]
    3606:	683a      	ldr	r2, [r7, #0]
    3608:	0011      	movs	r1, r2
    360a:	0018      	movs	r0, r3
    360c:	4b13      	ldr	r3, [pc, #76]	; (365c <_atinit+0x64>)
    360e:	4798      	blx	r3
    caiface->atinit     = hal->halinit;
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	681a      	ldr	r2, [r3, #0]
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	609a      	str	r2, [r3, #8]
    caiface->atpostinit = hal->halpostinit;
    3618:	683b      	ldr	r3, [r7, #0]
    361a:	685a      	ldr	r2, [r3, #4]
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	60da      	str	r2, [r3, #12]
    caiface->atsend     = hal->halsend;
    3620:	683b      	ldr	r3, [r7, #0]
    3622:	689a      	ldr	r2, [r3, #8]
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	611a      	str	r2, [r3, #16]
    caiface->atreceive  = hal->halreceive;
    3628:	683b      	ldr	r3, [r7, #0]
    362a:	68da      	ldr	r2, [r3, #12]
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	615a      	str	r2, [r3, #20]
    caiface->atwake     = hal->halwake;
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	691a      	ldr	r2, [r3, #16]
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	619a      	str	r2, [r3, #24]
    caiface->atsleep    = hal->halsleep;
    3638:	683b      	ldr	r3, [r7, #0]
    363a:	699a      	ldr	r2, [r3, #24]
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	621a      	str	r2, [r3, #32]
    caiface->atidle     = hal->halidle;
    3640:	683b      	ldr	r3, [r7, #0]
    3642:	695a      	ldr	r2, [r3, #20]
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	61da      	str	r2, [r3, #28]
    caiface->hal_data   = hal->hal_data;
    3648:	683b      	ldr	r3, [r7, #0]
    364a:	6a1a      	ldr	r2, [r3, #32]
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    3650:	2300      	movs	r3, #0
}
    3652:	0018      	movs	r0, r3
    3654:	46bd      	mov	sp, r7
    3656:	b002      	add	sp, #8
    3658:	bd80      	pop	{r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	00005c99 	.word	0x00005c99

00003660 <atcab_init>:
 *  \param[in] cfg is a pointer to an interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return ATCA_STATUS
 *  \see atcab_init_device()
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    3660:	b580      	push	{r7, lr}
    3662:	b082      	sub	sp, #8
    3664:	af00      	add	r7, sp, #0
    3666:	6078      	str	r0, [r7, #4]
    if (_gDevice)       // if there's already a device created, release it
    3668:	4b18      	ldr	r3, [pc, #96]	; (36cc <atcab_init+0x6c>)
    366a:	681b      	ldr	r3, [r3, #0]
    366c:	2b00      	cmp	r3, #0
    366e:	d001      	beq.n	3674 <atcab_init+0x14>
        atcab_release();
    3670:	4b17      	ldr	r3, [pc, #92]	; (36d0 <atcab_init+0x70>)
    3672:	4798      	blx	r3

    _gDevice = newATCADevice(cfg);
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	0018      	movs	r0, r3
    3678:	4b16      	ldr	r3, [pc, #88]	; (36d4 <atcab_init+0x74>)
    367a:	4798      	blx	r3
    367c:	0002      	movs	r2, r0
    367e:	4b13      	ldr	r3, [pc, #76]	; (36cc <atcab_init+0x6c>)
    3680:	601a      	str	r2, [r3, #0]
    if (_gDevice == NULL)
    3682:	4b12      	ldr	r3, [pc, #72]	; (36cc <atcab_init+0x6c>)
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	2b00      	cmp	r3, #0
    3688:	d101      	bne.n	368e <atcab_init+0x2e>
        return ATCA_GEN_FAIL;  // Device creation failed
    368a:	23e1      	movs	r3, #225	; 0xe1
    368c:	e01a      	b.n	36c4 <atcab_init+0x64>

    _gCommandObj = atGetCommands(_gDevice);
    368e:	4b0f      	ldr	r3, [pc, #60]	; (36cc <atcab_init+0x6c>)
    3690:	681b      	ldr	r3, [r3, #0]
    3692:	0018      	movs	r0, r3
    3694:	4b10      	ldr	r3, [pc, #64]	; (36d8 <atcab_init+0x78>)
    3696:	4798      	blx	r3
    3698:	0002      	movs	r2, r0
    369a:	4b10      	ldr	r3, [pc, #64]	; (36dc <atcab_init+0x7c>)
    369c:	601a      	str	r2, [r3, #0]
    _gIface = atGetIFace(_gDevice);
    369e:	4b0b      	ldr	r3, [pc, #44]	; (36cc <atcab_init+0x6c>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	0018      	movs	r0, r3
    36a4:	4b0e      	ldr	r3, [pc, #56]	; (36e0 <atcab_init+0x80>)
    36a6:	4798      	blx	r3
    36a8:	0002      	movs	r2, r0
    36aa:	4b0e      	ldr	r3, [pc, #56]	; (36e4 <atcab_init+0x84>)
    36ac:	601a      	str	r2, [r3, #0]

    if (_gCommandObj == NULL || _gIface == NULL)
    36ae:	4b0b      	ldr	r3, [pc, #44]	; (36dc <atcab_init+0x7c>)
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d003      	beq.n	36be <atcab_init+0x5e>
    36b6:	4b0b      	ldr	r3, [pc, #44]	; (36e4 <atcab_init+0x84>)
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d101      	bne.n	36c2 <atcab_init+0x62>
        return ATCA_GEN_FAIL;  // More of an assert to make everything was constructed properly
    36be:	23e1      	movs	r3, #225	; 0xe1
    36c0:	e000      	b.n	36c4 <atcab_init+0x64>

    return ATCA_SUCCESS;
    36c2:	2300      	movs	r3, #0
}
    36c4:	0018      	movs	r0, r3
    36c6:	46bd      	mov	sp, r7
    36c8:	b002      	add	sp, #8
    36ca:	bd80      	pop	{r7, pc}
    36cc:	200002ac 	.word	0x200002ac
    36d0:	000036e9 	.word	0x000036e9
    36d4:	00003331 	.word	0x00003331
    36d8:	000033a5 	.word	0x000033a5
    36dc:	200002b0 	.word	0x200002b0
    36e0:	000033b9 	.word	0x000033b9
    36e4:	200002b4 	.word	0x200002b4

000036e8 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_release(void)
{
    36e8:	b580      	push	{r7, lr}
    36ea:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    36ec:	4b03      	ldr	r3, [pc, #12]	; (36fc <atcab_release+0x14>)
    36ee:	0018      	movs	r0, r3
    36f0:	4b03      	ldr	r3, [pc, #12]	; (3700 <atcab_release+0x18>)
    36f2:	4798      	blx	r3
    return ATCA_SUCCESS;
    36f4:	2300      	movs	r3, #0
}
    36f6:	0018      	movs	r0, r3
    36f8:	46bd      	mov	sp, r7
    36fa:	bd80      	pop	{r7, pc}
    36fc:	200002ac 	.word	0x200002ac
    3700:	000033cd 	.word	0x000033cd

00003704 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_wakeup(void)
{
    3704:	b580      	push	{r7, lr}
    3706:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    3708:	4b07      	ldr	r3, [pc, #28]	; (3728 <atcab_wakeup+0x24>)
    370a:	681b      	ldr	r3, [r3, #0]
    370c:	2b00      	cmp	r3, #0
    370e:	d101      	bne.n	3714 <atcab_wakeup+0x10>
        return ATCA_GEN_FAIL;
    3710:	23e1      	movs	r3, #225	; 0xe1
    3712:	e005      	b.n	3720 <atcab_wakeup+0x1c>

    return atwake(_gIface);
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <atcab_wakeup+0x28>)
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	0018      	movs	r0, r3
    371a:	4b05      	ldr	r3, [pc, #20]	; (3730 <atcab_wakeup+0x2c>)
    371c:	4798      	blx	r3
    371e:	0003      	movs	r3, r0
}
    3720:	0018      	movs	r0, r3
    3722:	46bd      	mov	sp, r7
    3724:	bd80      	pop	{r7, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	200002ac 	.word	0x200002ac
    372c:	200002b4 	.word	0x200002b4
    3730:	0000351d 	.word	0x0000351d

00003734 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_idle(void)
{
    3734:	b580      	push	{r7, lr}
    3736:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    3738:	4b07      	ldr	r3, [pc, #28]	; (3758 <atcab_idle+0x24>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	2b00      	cmp	r3, #0
    373e:	d101      	bne.n	3744 <atcab_idle+0x10>
        return ATCA_GEN_FAIL;
    3740:	23e1      	movs	r3, #225	; 0xe1
    3742:	e005      	b.n	3750 <atcab_idle+0x1c>

    return atidle(_gIface);
    3744:	4b05      	ldr	r3, [pc, #20]	; (375c <atcab_idle+0x28>)
    3746:	681b      	ldr	r3, [r3, #0]
    3748:	0018      	movs	r0, r3
    374a:	4b05      	ldr	r3, [pc, #20]	; (3760 <atcab_idle+0x2c>)
    374c:	4798      	blx	r3
    374e:	0003      	movs	r3, r0
}
    3750:	0018      	movs	r0, r3
    3752:	46bd      	mov	sp, r7
    3754:	bd80      	pop	{r7, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	200002ac 	.word	0x200002ac
    375c:	200002b4 	.word	0x200002b4
    3760:	00003539 	.word	0x00003539

00003764 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_sleep(void)
{
    3764:	b580      	push	{r7, lr}
    3766:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    3768:	4b07      	ldr	r3, [pc, #28]	; (3788 <atcab_sleep+0x24>)
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	2b00      	cmp	r3, #0
    376e:	d101      	bne.n	3774 <atcab_sleep+0x10>
        return ATCA_GEN_FAIL;
    3770:	23e1      	movs	r3, #225	; 0xe1
    3772:	e005      	b.n	3780 <atcab_sleep+0x1c>

    return atsleep(_gIface);
    3774:	4b05      	ldr	r3, [pc, #20]	; (378c <atcab_sleep+0x28>)
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	0018      	movs	r0, r3
    377a:	4b05      	ldr	r3, [pc, #20]	; (3790 <atcab_sleep+0x2c>)
    377c:	4798      	blx	r3
    377e:	0003      	movs	r3, r0
}
    3780:	0018      	movs	r0, r3
    3782:	46bd      	mov	sp, r7
    3784:	bd80      	pop	{r7, pc}
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	200002ac 	.word	0x200002ac
    378c:	200002b4 	.word	0x200002b4
    3790:	0000356d 	.word	0x0000356d

00003794 <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_STATUS
 */
static ATCA_STATUS _atcab_exit(void)
{
    3794:	b580      	push	{r7, lr}
    3796:	af00      	add	r7, sp, #0
    return atcab_idle();
    3798:	4b02      	ldr	r3, [pc, #8]	; (37a4 <_atcab_exit+0x10>)
    379a:	4798      	blx	r3
    379c:	0003      	movs	r3, r0
}
    379e:	0018      	movs	r0, r3
    37a0:	46bd      	mov	sp, r7
    37a2:	bd80      	pop	{r7, pc}
    37a4:	00003735 	.word	0x00003735

000037a8 <atcab_info>:
 *  \param[out] revision - 4-byte storage for receiving the revision number from the device
 *  \return ATCA_STATUS
 */

ATCA_STATUS atcab_info(uint8_t *revision)
{
    37a8:	b590      	push	{r4, r7, lr}
    37aa:	b0a9      	sub	sp, #164	; 0xa4
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCA_STATUS status = ATCA_GEN_FAIL;
    37b0:	239f      	movs	r3, #159	; 0x9f
    37b2:	18fb      	adds	r3, r7, r3
    37b4:	22e1      	movs	r2, #225	; 0xe1
    37b6:	701a      	strb	r2, [r3, #0]
    uint32_t execution_time;

    if (!_gDevice)
    37b8:	4b58      	ldr	r3, [pc, #352]	; (391c <atcab_info+0x174>)
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	2b00      	cmp	r3, #0
    37be:	d101      	bne.n	37c4 <atcab_info+0x1c>
        return ATCA_GEN_FAIL;
    37c0:	23e1      	movs	r3, #225	; 0xe1
    37c2:	e0a6      	b.n	3912 <atcab_info+0x16a>

    // build an info command
    packet.param1 = INFO_MODE_REVISION;
    37c4:	230c      	movs	r3, #12
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	2200      	movs	r2, #0
    37ca:	70da      	strb	r2, [r3, #3]
    packet.param2 = 0;
    37cc:	230c      	movs	r3, #12
    37ce:	18fb      	adds	r3, r7, r3
    37d0:	2200      	movs	r2, #0
    37d2:	809a      	strh	r2, [r3, #4]

    do
    {
        // Check the inputs
        if (revision == NULL)
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d104      	bne.n	37e4 <atcab_info+0x3c>
        {
            status = ATCA_BAD_PARAM;
    37da:	239f      	movs	r3, #159	; 0x9f
    37dc:	18fb      	adds	r3, r7, r3
    37de:	22e2      	movs	r2, #226	; 0xe2
    37e0:	701a      	strb	r2, [r3, #0]
            BREAK(status, "atcab_info: Null inputs");
    37e2:	e08c      	b.n	38fe <atcab_info+0x156>
        }
        if ( (status = atInfo(_gCommandObj, &packet)) != ATCA_SUCCESS)
    37e4:	4b4e      	ldr	r3, [pc, #312]	; (3920 <atcab_info+0x178>)
    37e6:	681b      	ldr	r3, [r3, #0]
    37e8:	229f      	movs	r2, #159	; 0x9f
    37ea:	18bc      	adds	r4, r7, r2
    37ec:	220c      	movs	r2, #12
    37ee:	18ba      	adds	r2, r7, r2
    37f0:	0011      	movs	r1, r2
    37f2:	0018      	movs	r0, r3
    37f4:	4b4b      	ldr	r3, [pc, #300]	; (3924 <atcab_info+0x17c>)
    37f6:	4798      	blx	r3
    37f8:	0003      	movs	r3, r0
    37fa:	7023      	strb	r3, [r4, #0]
    37fc:	239f      	movs	r3, #159	; 0x9f
    37fe:	18fb      	adds	r3, r7, r3
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	2b00      	cmp	r3, #0
    3804:	d000      	beq.n	3808 <atcab_info+0x60>
    3806:	e071      	b.n	38ec <atcab_info+0x144>
            BREAK(status, "Failed to construct Info command");

        execution_time = atGetExecTime(_gCommandObj, CMD_INFO);
    3808:	4b45      	ldr	r3, [pc, #276]	; (3920 <atcab_info+0x178>)
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	2108      	movs	r1, #8
    380e:	0018      	movs	r0, r3
    3810:	4b45      	ldr	r3, [pc, #276]	; (3928 <atcab_info+0x180>)
    3812:	4798      	blx	r3
    3814:	0003      	movs	r3, r0
    3816:	2298      	movs	r2, #152	; 0x98
    3818:	18ba      	adds	r2, r7, r2
    381a:	6013      	str	r3, [r2, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    381c:	239f      	movs	r3, #159	; 0x9f
    381e:	18fc      	adds	r4, r7, r3
    3820:	4b42      	ldr	r3, [pc, #264]	; (392c <atcab_info+0x184>)
    3822:	4798      	blx	r3
    3824:	0003      	movs	r3, r0
    3826:	7023      	strb	r3, [r4, #0]
    3828:	239f      	movs	r3, #159	; 0x9f
    382a:	18fb      	adds	r3, r7, r3
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	2b00      	cmp	r3, #0
    3830:	d15e      	bne.n	38f0 <atcab_info+0x148>
            BREAK(status, "Failed to wakeup");

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3832:	4b3f      	ldr	r3, [pc, #252]	; (3930 <atcab_info+0x188>)
    3834:	6818      	ldr	r0, [r3, #0]
    3836:	230c      	movs	r3, #12
    3838:	18fb      	adds	r3, r7, r3
    383a:	785b      	ldrb	r3, [r3, #1]
    383c:	001a      	movs	r2, r3
    383e:	239f      	movs	r3, #159	; 0x9f
    3840:	18fc      	adds	r4, r7, r3
    3842:	230c      	movs	r3, #12
    3844:	18fb      	adds	r3, r7, r3
    3846:	0019      	movs	r1, r3
    3848:	4b3a      	ldr	r3, [pc, #232]	; (3934 <atcab_info+0x18c>)
    384a:	4798      	blx	r3
    384c:	0003      	movs	r3, r0
    384e:	7023      	strb	r3, [r4, #0]
    3850:	239f      	movs	r3, #159	; 0x9f
    3852:	18fb      	adds	r3, r7, r3
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	2b00      	cmp	r3, #0
    3858:	d14c      	bne.n	38f4 <atcab_info+0x14c>
            BREAK(status, "Failed to send Info command");

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    385a:	2398      	movs	r3, #152	; 0x98
    385c:	18fb      	adds	r3, r7, r3
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	0018      	movs	r0, r3
    3862:	4b35      	ldr	r3, [pc, #212]	; (3938 <atcab_info+0x190>)
    3864:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, &(packet.data[0]), &(packet.rxsize) )) != ATCA_SUCCESS)
    3866:	4b32      	ldr	r3, [pc, #200]	; (3930 <atcab_info+0x188>)
    3868:	6818      	ldr	r0, [r3, #0]
    386a:	239f      	movs	r3, #159	; 0x9f
    386c:	18fc      	adds	r4, r7, r3
    386e:	230c      	movs	r3, #12
    3870:	18fb      	adds	r3, r7, r3
    3872:	338a      	adds	r3, #138	; 0x8a
    3874:	001a      	movs	r2, r3
    3876:	230c      	movs	r3, #12
    3878:	18fb      	adds	r3, r7, r3
    387a:	3306      	adds	r3, #6
    387c:	0019      	movs	r1, r3
    387e:	4b2f      	ldr	r3, [pc, #188]	; (393c <atcab_info+0x194>)
    3880:	4798      	blx	r3
    3882:	0003      	movs	r3, r0
    3884:	7023      	strb	r3, [r4, #0]
    3886:	239f      	movs	r3, #159	; 0x9f
    3888:	18fb      	adds	r3, r7, r3
    388a:	781b      	ldrb	r3, [r3, #0]
    388c:	2b00      	cmp	r3, #0
    388e:	d133      	bne.n	38f8 <atcab_info+0x150>
            BREAK(status, "Failed to receive Info command");

        // Check response size
        if (packet.rxsize < 4)
    3890:	230c      	movs	r3, #12
    3892:	18fb      	adds	r3, r7, r3
    3894:	228a      	movs	r2, #138	; 0x8a
    3896:	5a9b      	ldrh	r3, [r3, r2]
    3898:	2b03      	cmp	r3, #3
    389a:	d80f      	bhi.n	38bc <atcab_info+0x114>
        {
            if (packet.rxsize > 0)
    389c:	230c      	movs	r3, #12
    389e:	18fb      	adds	r3, r7, r3
    38a0:	228a      	movs	r2, #138	; 0x8a
    38a2:	5a9b      	ldrh	r3, [r3, r2]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d004      	beq.n	38b2 <atcab_info+0x10a>
                status = ATCA_RX_FAIL;
    38a8:	239f      	movs	r3, #159	; 0x9f
    38aa:	18fb      	adds	r3, r7, r3
    38ac:	22e6      	movs	r2, #230	; 0xe6
    38ae:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            BREAK(status, "Info command returned error code or no resonse");
    38b0:	e025      	b.n	38fe <atcab_info+0x156>
                status = ATCA_RX_NO_RESPONSE;
    38b2:	239f      	movs	r3, #159	; 0x9f
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	22e7      	movs	r2, #231	; 0xe7
    38b8:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Info command returned error code or no resonse");
    38ba:	e020      	b.n	38fe <atcab_info+0x156>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    38bc:	239f      	movs	r3, #159	; 0x9f
    38be:	18fc      	adds	r4, r7, r3
    38c0:	230c      	movs	r3, #12
    38c2:	18fb      	adds	r3, r7, r3
    38c4:	3306      	adds	r3, #6
    38c6:	0018      	movs	r0, r3
    38c8:	4b1d      	ldr	r3, [pc, #116]	; (3940 <atcab_info+0x198>)
    38ca:	4798      	blx	r3
    38cc:	0003      	movs	r3, r0
    38ce:	7023      	strb	r3, [r4, #0]
    38d0:	239f      	movs	r3, #159	; 0x9f
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d110      	bne.n	38fc <atcab_info+0x154>
            BREAK(status, "Failed to construct Info command");

        memcpy(revision, &packet.data[1], 4);    // don't include the receive length, only payload
    38da:	230c      	movs	r3, #12
    38dc:	18fb      	adds	r3, r7, r3
    38de:	1dd9      	adds	r1, r3, #7
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	2204      	movs	r2, #4
    38e4:	0018      	movs	r0, r3
    38e6:	4b17      	ldr	r3, [pc, #92]	; (3944 <atcab_info+0x19c>)
    38e8:	4798      	blx	r3
    38ea:	e008      	b.n	38fe <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    38ec:	46c0      	nop			; (mov r8, r8)
    38ee:	e006      	b.n	38fe <atcab_info+0x156>
            BREAK(status, "Failed to wakeup");
    38f0:	46c0      	nop			; (mov r8, r8)
    38f2:	e004      	b.n	38fe <atcab_info+0x156>
            BREAK(status, "Failed to send Info command");
    38f4:	46c0      	nop			; (mov r8, r8)
    38f6:	e002      	b.n	38fe <atcab_info+0x156>
            BREAK(status, "Failed to receive Info command");
    38f8:	46c0      	nop			; (mov r8, r8)
    38fa:	e000      	b.n	38fe <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    38fc:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    if (status != ATCA_COMM_FAIL)     // don't keep shoving more stuff at the chip if there's something wrong with comm
    38fe:	239f      	movs	r3, #159	; 0x9f
    3900:	18fb      	adds	r3, r7, r3
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	2bf0      	cmp	r3, #240	; 0xf0
    3906:	d001      	beq.n	390c <atcab_info+0x164>
        _atcab_exit();
    3908:	4b0f      	ldr	r3, [pc, #60]	; (3948 <atcab_info+0x1a0>)
    390a:	4798      	blx	r3

    return status;
    390c:	239f      	movs	r3, #159	; 0x9f
    390e:	18fb      	adds	r3, r7, r3
    3910:	781b      	ldrb	r3, [r3, #0]
}
    3912:	0018      	movs	r0, r3
    3914:	46bd      	mov	sp, r7
    3916:	b029      	add	sp, #164	; 0xa4
    3918:	bd90      	pop	{r4, r7, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	200002ac 	.word	0x200002ac
    3920:	200002b0 	.word	0x200002b0
    3924:	00002e61 	.word	0x00002e61
    3928:	000030f5 	.word	0x000030f5
    392c:	00003705 	.word	0x00003705
    3930:	200002b4 	.word	0x200002b4
    3934:	000034d9 	.word	0x000034d9
    3938:	000066d1 	.word	0x000066d1
    393c:	000034fb 	.word	0x000034fb
    3940:	000032b5 	.word	0x000032b5
    3944:	0000ad67 	.word	0x0000ad67
    3948:	00003795 	.word	0x00003795

0000394c <atcab_random>:
/** \brief Get a 32 byte random number from the CryptoAuth device
 *	\param[out] rand_out ptr to 32 bytes of storage for random number
 *	\return status of the operation
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    394c:	b590      	push	{r4, r7, lr}
    394e:	b0a7      	sub	sp, #156	; 0x9c
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3954:	2397      	movs	r3, #151	; 0x97
    3956:	18fb      	adds	r3, r7, r3
    3958:	22e1      	movs	r2, #225	; 0xe1
    395a:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    395c:	2394      	movs	r3, #148	; 0x94
    395e:	18fb      	adds	r3, r7, r3
    3960:	2200      	movs	r2, #0
    3962:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    3964:	4b5d      	ldr	r3, [pc, #372]	; (3adc <atcab_random+0x190>)
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	2b00      	cmp	r3, #0
    396a:	d101      	bne.n	3970 <atcab_random+0x24>
        return ATCA_GEN_FAIL;
    396c:	23e1      	movs	r3, #225	; 0xe1
    396e:	e0b1      	b.n	3ad4 <atcab_random+0x188>

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    3970:	2308      	movs	r3, #8
    3972:	18fb      	adds	r3, r7, r3
    3974:	2200      	movs	r2, #0
    3976:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    3978:	2308      	movs	r3, #8
    397a:	18fb      	adds	r3, r7, r3
    397c:	2200      	movs	r2, #0
    397e:	809a      	strh	r2, [r3, #4]
        if ( (status = atRandom(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3980:	4b57      	ldr	r3, [pc, #348]	; (3ae0 <atcab_random+0x194>)
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	2297      	movs	r2, #151	; 0x97
    3986:	18bc      	adds	r4, r7, r2
    3988:	2208      	movs	r2, #8
    398a:	18ba      	adds	r2, r7, r2
    398c:	0011      	movs	r1, r2
    398e:	0018      	movs	r0, r3
    3990:	4b54      	ldr	r3, [pc, #336]	; (3ae4 <atcab_random+0x198>)
    3992:	4798      	blx	r3
    3994:	0003      	movs	r3, r0
    3996:	7023      	strb	r3, [r4, #0]
    3998:	2397      	movs	r3, #151	; 0x97
    399a:	18fb      	adds	r3, r7, r3
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	2b00      	cmp	r3, #0
    39a0:	d000      	beq.n	39a4 <atcab_random+0x58>
    39a2:	e089      	b.n	3ab8 <atcab_random+0x16c>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_RANDOM);
    39a4:	4b4e      	ldr	r3, [pc, #312]	; (3ae0 <atcab_random+0x194>)
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	2294      	movs	r2, #148	; 0x94
    39aa:	18bc      	adds	r4, r7, r2
    39ac:	210e      	movs	r1, #14
    39ae:	0018      	movs	r0, r3
    39b0:	4b4d      	ldr	r3, [pc, #308]	; (3ae8 <atcab_random+0x19c>)
    39b2:	4798      	blx	r3
    39b4:	0003      	movs	r3, r0
    39b6:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    39b8:	2397      	movs	r3, #151	; 0x97
    39ba:	18fc      	adds	r4, r7, r3
    39bc:	4b4b      	ldr	r3, [pc, #300]	; (3aec <atcab_random+0x1a0>)
    39be:	4798      	blx	r3
    39c0:	0003      	movs	r3, r0
    39c2:	7023      	strb	r3, [r4, #0]
    39c4:	2397      	movs	r3, #151	; 0x97
    39c6:	18fb      	adds	r3, r7, r3
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	2b00      	cmp	r3, #0
    39cc:	d000      	beq.n	39d0 <atcab_random+0x84>
    39ce:	e075      	b.n	3abc <atcab_random+0x170>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    39d0:	4b47      	ldr	r3, [pc, #284]	; (3af0 <atcab_random+0x1a4>)
    39d2:	6818      	ldr	r0, [r3, #0]
    39d4:	2308      	movs	r3, #8
    39d6:	18fb      	adds	r3, r7, r3
    39d8:	785b      	ldrb	r3, [r3, #1]
    39da:	001a      	movs	r2, r3
    39dc:	2397      	movs	r3, #151	; 0x97
    39de:	18fc      	adds	r4, r7, r3
    39e0:	2308      	movs	r3, #8
    39e2:	18fb      	adds	r3, r7, r3
    39e4:	0019      	movs	r1, r3
    39e6:	4b43      	ldr	r3, [pc, #268]	; (3af4 <atcab_random+0x1a8>)
    39e8:	4798      	blx	r3
    39ea:	0003      	movs	r3, r0
    39ec:	7023      	strb	r3, [r4, #0]
    39ee:	2397      	movs	r3, #151	; 0x97
    39f0:	18fb      	adds	r3, r7, r3
    39f2:	781b      	ldrb	r3, [r3, #0]
    39f4:	2b00      	cmp	r3, #0
    39f6:	d163      	bne.n	3ac0 <atcab_random+0x174>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    39f8:	2394      	movs	r3, #148	; 0x94
    39fa:	18fb      	adds	r3, r7, r3
    39fc:	881b      	ldrh	r3, [r3, #0]
    39fe:	0018      	movs	r0, r3
    3a00:	4b3d      	ldr	r3, [pc, #244]	; (3af8 <atcab_random+0x1ac>)
    3a02:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    3a04:	4b3a      	ldr	r3, [pc, #232]	; (3af0 <atcab_random+0x1a4>)
    3a06:	6818      	ldr	r0, [r3, #0]
    3a08:	2397      	movs	r3, #151	; 0x97
    3a0a:	18fc      	adds	r4, r7, r3
    3a0c:	2308      	movs	r3, #8
    3a0e:	18fb      	adds	r3, r7, r3
    3a10:	338a      	adds	r3, #138	; 0x8a
    3a12:	001a      	movs	r2, r3
    3a14:	2308      	movs	r3, #8
    3a16:	18fb      	adds	r3, r7, r3
    3a18:	3306      	adds	r3, #6
    3a1a:	0019      	movs	r1, r3
    3a1c:	4b37      	ldr	r3, [pc, #220]	; (3afc <atcab_random+0x1b0>)
    3a1e:	4798      	blx	r3
    3a20:	0003      	movs	r3, r0
    3a22:	7023      	strb	r3, [r4, #0]
    3a24:	2397      	movs	r3, #151	; 0x97
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d14a      	bne.n	3ac4 <atcab_random+0x178>
            break;

        // Check response size
        if (packet.rxsize < 4)
    3a2e:	2308      	movs	r3, #8
    3a30:	18fb      	adds	r3, r7, r3
    3a32:	228a      	movs	r2, #138	; 0x8a
    3a34:	5a9b      	ldrh	r3, [r3, r2]
    3a36:	2b03      	cmp	r3, #3
    3a38:	d80f      	bhi.n	3a5a <atcab_random+0x10e>
        {
            if (packet.rxsize > 0)
    3a3a:	2308      	movs	r3, #8
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	228a      	movs	r2, #138	; 0x8a
    3a40:	5a9b      	ldrh	r3, [r3, r2]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d004      	beq.n	3a50 <atcab_random+0x104>
                status = ATCA_RX_FAIL;
    3a46:	2397      	movs	r3, #151	; 0x97
    3a48:	18fb      	adds	r3, r7, r3
    3a4a:	22e6      	movs	r2, #230	; 0xe6
    3a4c:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3a4e:	e03c      	b.n	3aca <atcab_random+0x17e>
                status = ATCA_RX_NO_RESPONSE;
    3a50:	2397      	movs	r3, #151	; 0x97
    3a52:	18fb      	adds	r3, r7, r3
    3a54:	22e7      	movs	r2, #231	; 0xe7
    3a56:	701a      	strb	r2, [r3, #0]
            break;
    3a58:	e037      	b.n	3aca <atcab_random+0x17e>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3a5a:	2397      	movs	r3, #151	; 0x97
    3a5c:	18fc      	adds	r4, r7, r3
    3a5e:	2308      	movs	r3, #8
    3a60:	18fb      	adds	r3, r7, r3
    3a62:	3306      	adds	r3, #6
    3a64:	0018      	movs	r0, r3
    3a66:	4b26      	ldr	r3, [pc, #152]	; (3b00 <atcab_random+0x1b4>)
    3a68:	4798      	blx	r3
    3a6a:	0003      	movs	r3, r0
    3a6c:	7023      	strb	r3, [r4, #0]
    3a6e:	2397      	movs	r3, #151	; 0x97
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d127      	bne.n	3ac8 <atcab_random+0x17c>
            break;

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    3a78:	2308      	movs	r3, #8
    3a7a:	18fb      	adds	r3, r7, r3
    3a7c:	228a      	movs	r2, #138	; 0x8a
    3a7e:	5a9a      	ldrh	r2, [r3, r2]
    3a80:	2308      	movs	r3, #8
    3a82:	18fb      	adds	r3, r7, r3
    3a84:	799b      	ldrb	r3, [r3, #6]
    3a86:	b29b      	uxth	r3, r3
    3a88:	429a      	cmp	r2, r3
    3a8a:	d304      	bcc.n	3a96 <atcab_random+0x14a>
    3a8c:	2308      	movs	r3, #8
    3a8e:	18fb      	adds	r3, r7, r3
    3a90:	799b      	ldrb	r3, [r3, #6]
    3a92:	2b23      	cmp	r3, #35	; 0x23
    3a94:	d004      	beq.n	3aa0 <atcab_random+0x154>
        {
            status = ATCA_RX_FAIL;
    3a96:	2397      	movs	r3, #151	; 0x97
    3a98:	18fb      	adds	r3, r7, r3
    3a9a:	22e6      	movs	r2, #230	; 0xe6
    3a9c:	701a      	strb	r2, [r3, #0]
            break;
    3a9e:	e014      	b.n	3aca <atcab_random+0x17e>
        }

        if (rand_out)
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d011      	beq.n	3aca <atcab_random+0x17e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    3aa6:	2308      	movs	r3, #8
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	1dd9      	adds	r1, r3, #7
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	2220      	movs	r2, #32
    3ab0:	0018      	movs	r0, r3
    3ab2:	4b14      	ldr	r3, [pc, #80]	; (3b04 <atcab_random+0x1b8>)
    3ab4:	4798      	blx	r3
    3ab6:	e008      	b.n	3aca <atcab_random+0x17e>
            break;
    3ab8:	46c0      	nop			; (mov r8, r8)
    3aba:	e006      	b.n	3aca <atcab_random+0x17e>
            break;
    3abc:	46c0      	nop			; (mov r8, r8)
    3abe:	e004      	b.n	3aca <atcab_random+0x17e>
            break;
    3ac0:	46c0      	nop			; (mov r8, r8)
    3ac2:	e002      	b.n	3aca <atcab_random+0x17e>
            break;
    3ac4:	46c0      	nop			; (mov r8, r8)
    3ac6:	e000      	b.n	3aca <atcab_random+0x17e>
            break;
    3ac8:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    3aca:	4b0f      	ldr	r3, [pc, #60]	; (3b08 <atcab_random+0x1bc>)
    3acc:	4798      	blx	r3
    return status;
    3ace:	2397      	movs	r3, #151	; 0x97
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	781b      	ldrb	r3, [r3, #0]
}
    3ad4:	0018      	movs	r0, r3
    3ad6:	46bd      	mov	sp, r7
    3ad8:	b027      	add	sp, #156	; 0x9c
    3ada:	bd90      	pop	{r4, r7, pc}
    3adc:	200002ac 	.word	0x200002ac
    3ae0:	200002b0 	.word	0x200002b0
    3ae4:	00002f31 	.word	0x00002f31
    3ae8:	000030f5 	.word	0x000030f5
    3aec:	00003705 	.word	0x00003705
    3af0:	200002b4 	.word	0x200002b4
    3af4:	000034d9 	.word	0x000034d9
    3af8:	000066d1 	.word	0x000066d1
    3afc:	000034fb 	.word	0x000034fb
    3b00:	000032b5 	.word	0x000032b5
    3b04:	0000ad67 	.word	0x0000ad67
    3b08:	00003795 	.word	0x00003795

00003b0c <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    3b0c:	b590      	push	{r4, r7, lr}
    3b0e:	b0a9      	sub	sp, #164	; 0xa4
    3b10:	af00      	add	r7, sp, #0
    3b12:	60ba      	str	r2, [r7, #8]
    3b14:	607b      	str	r3, [r7, #4]
    3b16:	230f      	movs	r3, #15
    3b18:	18fb      	adds	r3, r7, r3
    3b1a:	1c02      	adds	r2, r0, #0
    3b1c:	701a      	strb	r2, [r3, #0]
    3b1e:	230c      	movs	r3, #12
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	1c0a      	adds	r2, r1, #0
    3b24:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    3b26:	239c      	movs	r3, #156	; 0x9c
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	2200      	movs	r2, #0
    3b2c:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3b2e:	239f      	movs	r3, #159	; 0x9f
    3b30:	18fb      	adds	r3, r7, r3
    3b32:	22e1      	movs	r2, #225	; 0xe1
    3b34:	701a      	strb	r2, [r3, #0]

    if (!_gDevice)
    3b36:	4b5f      	ldr	r3, [pc, #380]	; (3cb4 <atcab_genkey_base+0x1a8>)
    3b38:	681b      	ldr	r3, [r3, #0]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d101      	bne.n	3b42 <atcab_genkey_base+0x36>
        return ATCA_GEN_FAIL;
    3b3e:	23e1      	movs	r3, #225	; 0xe1
    3b40:	e0b4      	b.n	3cac <atcab_genkey_base+0x1a0>

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    3b42:	2310      	movs	r3, #16
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	220f      	movs	r2, #15
    3b48:	18ba      	adds	r2, r7, r2
    3b4a:	7812      	ldrb	r2, [r2, #0]
    3b4c:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    3b4e:	2310      	movs	r3, #16
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	220c      	movs	r2, #12
    3b54:	18ba      	adds	r2, r7, r2
    3b56:	8812      	ldrh	r2, [r2, #0]
    3b58:	809a      	strh	r2, [r3, #4]
        if (other_data)
    3b5a:	68bb      	ldr	r3, [r7, #8]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d007      	beq.n	3b70 <atcab_genkey_base+0x64>
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    3b60:	68b9      	ldr	r1, [r7, #8]
    3b62:	2310      	movs	r3, #16
    3b64:	18fb      	adds	r3, r7, r3
    3b66:	3306      	adds	r3, #6
    3b68:	2203      	movs	r2, #3
    3b6a:	0018      	movs	r0, r3
    3b6c:	4b52      	ldr	r3, [pc, #328]	; (3cb8 <atcab_genkey_base+0x1ac>)
    3b6e:	4798      	blx	r3
        if ((status = atGenKey(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3b70:	4b52      	ldr	r3, [pc, #328]	; (3cbc <atcab_genkey_base+0x1b0>)
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	229f      	movs	r2, #159	; 0x9f
    3b76:	18bc      	adds	r4, r7, r2
    3b78:	2210      	movs	r2, #16
    3b7a:	18ba      	adds	r2, r7, r2
    3b7c:	0011      	movs	r1, r2
    3b7e:	0018      	movs	r0, r3
    3b80:	4b4f      	ldr	r3, [pc, #316]	; (3cc0 <atcab_genkey_base+0x1b4>)
    3b82:	4798      	blx	r3
    3b84:	0003      	movs	r3, r0
    3b86:	7023      	strb	r3, [r4, #0]
    3b88:	239f      	movs	r3, #159	; 0x9f
    3b8a:	18fb      	adds	r3, r7, r3
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d000      	beq.n	3b94 <atcab_genkey_base+0x88>
    3b92:	e07d      	b.n	3c90 <atcab_genkey_base+0x184>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_GENKEY);
    3b94:	4b49      	ldr	r3, [pc, #292]	; (3cbc <atcab_genkey_base+0x1b0>)
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	229c      	movs	r2, #156	; 0x9c
    3b9a:	18bc      	adds	r4, r7, r2
    3b9c:	2106      	movs	r1, #6
    3b9e:	0018      	movs	r0, r3
    3ba0:	4b48      	ldr	r3, [pc, #288]	; (3cc4 <atcab_genkey_base+0x1b8>)
    3ba2:	4798      	blx	r3
    3ba4:	0003      	movs	r3, r0
    3ba6:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    3ba8:	239f      	movs	r3, #159	; 0x9f
    3baa:	18fc      	adds	r4, r7, r3
    3bac:	4b46      	ldr	r3, [pc, #280]	; (3cc8 <atcab_genkey_base+0x1bc>)
    3bae:	4798      	blx	r3
    3bb0:	0003      	movs	r3, r0
    3bb2:	7023      	strb	r3, [r4, #0]
    3bb4:	239f      	movs	r3, #159	; 0x9f
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d16a      	bne.n	3c94 <atcab_genkey_base+0x188>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3bbe:	4b43      	ldr	r3, [pc, #268]	; (3ccc <atcab_genkey_base+0x1c0>)
    3bc0:	6818      	ldr	r0, [r3, #0]
    3bc2:	2310      	movs	r3, #16
    3bc4:	18fb      	adds	r3, r7, r3
    3bc6:	785b      	ldrb	r3, [r3, #1]
    3bc8:	001a      	movs	r2, r3
    3bca:	239f      	movs	r3, #159	; 0x9f
    3bcc:	18fc      	adds	r4, r7, r3
    3bce:	2310      	movs	r3, #16
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	0019      	movs	r1, r3
    3bd4:	4b3e      	ldr	r3, [pc, #248]	; (3cd0 <atcab_genkey_base+0x1c4>)
    3bd6:	4798      	blx	r3
    3bd8:	0003      	movs	r3, r0
    3bda:	7023      	strb	r3, [r4, #0]
    3bdc:	239f      	movs	r3, #159	; 0x9f
    3bde:	18fb      	adds	r3, r7, r3
    3be0:	781b      	ldrb	r3, [r3, #0]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d158      	bne.n	3c98 <atcab_genkey_base+0x18c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3be6:	239c      	movs	r3, #156	; 0x9c
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	881b      	ldrh	r3, [r3, #0]
    3bec:	0018      	movs	r0, r3
    3bee:	4b39      	ldr	r3, [pc, #228]	; (3cd4 <atcab_genkey_base+0x1c8>)
    3bf0:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    3bf2:	4b36      	ldr	r3, [pc, #216]	; (3ccc <atcab_genkey_base+0x1c0>)
    3bf4:	6818      	ldr	r0, [r3, #0]
    3bf6:	239f      	movs	r3, #159	; 0x9f
    3bf8:	18fc      	adds	r4, r7, r3
    3bfa:	2310      	movs	r3, #16
    3bfc:	18fb      	adds	r3, r7, r3
    3bfe:	338a      	adds	r3, #138	; 0x8a
    3c00:	001a      	movs	r2, r3
    3c02:	2310      	movs	r3, #16
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	3306      	adds	r3, #6
    3c08:	0019      	movs	r1, r3
    3c0a:	4b33      	ldr	r3, [pc, #204]	; (3cd8 <atcab_genkey_base+0x1cc>)
    3c0c:	4798      	blx	r3
    3c0e:	0003      	movs	r3, r0
    3c10:	7023      	strb	r3, [r4, #0]
    3c12:	239f      	movs	r3, #159	; 0x9f
    3c14:	18fb      	adds	r3, r7, r3
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d13f      	bne.n	3c9c <atcab_genkey_base+0x190>
            break;

        // Check response size
        if (packet.rxsize < 4)
    3c1c:	2310      	movs	r3, #16
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	228a      	movs	r2, #138	; 0x8a
    3c22:	5a9b      	ldrh	r3, [r3, r2]
    3c24:	2b03      	cmp	r3, #3
    3c26:	d80f      	bhi.n	3c48 <atcab_genkey_base+0x13c>
        {
            if (packet.rxsize > 0)
    3c28:	2310      	movs	r3, #16
    3c2a:	18fb      	adds	r3, r7, r3
    3c2c:	228a      	movs	r2, #138	; 0x8a
    3c2e:	5a9b      	ldrh	r3, [r3, r2]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d004      	beq.n	3c3e <atcab_genkey_base+0x132>
                status = ATCA_RX_FAIL;
    3c34:	239f      	movs	r3, #159	; 0x9f
    3c36:	18fb      	adds	r3, r7, r3
    3c38:	22e6      	movs	r2, #230	; 0xe6
    3c3a:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3c3c:	e031      	b.n	3ca2 <atcab_genkey_base+0x196>
                status = ATCA_RX_NO_RESPONSE;
    3c3e:	239f      	movs	r3, #159	; 0x9f
    3c40:	18fb      	adds	r3, r7, r3
    3c42:	22e7      	movs	r2, #231	; 0xe7
    3c44:	701a      	strb	r2, [r3, #0]
            break;
    3c46:	e02c      	b.n	3ca2 <atcab_genkey_base+0x196>
        }

        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3c48:	239f      	movs	r3, #159	; 0x9f
    3c4a:	18fc      	adds	r4, r7, r3
    3c4c:	2310      	movs	r3, #16
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	3306      	adds	r3, #6
    3c52:	0018      	movs	r0, r3
    3c54:	4b21      	ldr	r3, [pc, #132]	; (3cdc <atcab_genkey_base+0x1d0>)
    3c56:	4798      	blx	r3
    3c58:	0003      	movs	r3, r0
    3c5a:	7023      	strb	r3, [r4, #0]
    3c5c:	239f      	movs	r3, #159	; 0x9f
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d11c      	bne.n	3ca0 <atcab_genkey_base+0x194>
            break;

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d01a      	beq.n	3ca2 <atcab_genkey_base+0x196>
    3c6c:	2310      	movs	r3, #16
    3c6e:	18fb      	adds	r3, r7, r3
    3c70:	799b      	ldrb	r3, [r3, #6]
    3c72:	2b04      	cmp	r3, #4
    3c74:	d915      	bls.n	3ca2 <atcab_genkey_base+0x196>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    3c76:	2310      	movs	r3, #16
    3c78:	18fb      	adds	r3, r7, r3
    3c7a:	799b      	ldrb	r3, [r3, #6]
    3c7c:	3b03      	subs	r3, #3
    3c7e:	001a      	movs	r2, r3
    3c80:	2310      	movs	r3, #16
    3c82:	18fb      	adds	r3, r7, r3
    3c84:	1dd9      	adds	r1, r3, #7
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	0018      	movs	r0, r3
    3c8a:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <atcab_genkey_base+0x1ac>)
    3c8c:	4798      	blx	r3
    3c8e:	e008      	b.n	3ca2 <atcab_genkey_base+0x196>
            break;
    3c90:	46c0      	nop			; (mov r8, r8)
    3c92:	e006      	b.n	3ca2 <atcab_genkey_base+0x196>
            break;
    3c94:	46c0      	nop			; (mov r8, r8)
    3c96:	e004      	b.n	3ca2 <atcab_genkey_base+0x196>
            break;
    3c98:	46c0      	nop			; (mov r8, r8)
    3c9a:	e002      	b.n	3ca2 <atcab_genkey_base+0x196>
            break;
    3c9c:	46c0      	nop			; (mov r8, r8)
    3c9e:	e000      	b.n	3ca2 <atcab_genkey_base+0x196>
            break;
    3ca0:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    3ca2:	4b0f      	ldr	r3, [pc, #60]	; (3ce0 <atcab_genkey_base+0x1d4>)
    3ca4:	4798      	blx	r3
    return status;
    3ca6:	239f      	movs	r3, #159	; 0x9f
    3ca8:	18fb      	adds	r3, r7, r3
    3caa:	781b      	ldrb	r3, [r3, #0]
}
    3cac:	0018      	movs	r0, r3
    3cae:	46bd      	mov	sp, r7
    3cb0:	b029      	add	sp, #164	; 0xa4
    3cb2:	bd90      	pop	{r4, r7, pc}
    3cb4:	200002ac 	.word	0x200002ac
    3cb8:	0000ad67 	.word	0x0000ad67
    3cbc:	200002b0 	.word	0x200002b0
    3cc0:	00002e11 	.word	0x00002e11
    3cc4:	000030f5 	.word	0x000030f5
    3cc8:	00003705 	.word	0x00003705
    3ccc:	200002b4 	.word	0x200002b4
    3cd0:	000034d9 	.word	0x000034d9
    3cd4:	000066d1 	.word	0x000066d1
    3cd8:	000034fb 	.word	0x000034fb
    3cdc:	000032b5 	.word	0x000032b5
    3ce0:	00003795 	.word	0x00003795

00003ce4 <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    3ce4:	b590      	push	{r4, r7, lr}
    3ce6:	b083      	sub	sp, #12
    3ce8:	af00      	add	r7, sp, #0
    3cea:	0002      	movs	r2, r0
    3cec:	6039      	str	r1, [r7, #0]
    3cee:	1dbb      	adds	r3, r7, #6
    3cf0:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    3cf2:	683a      	ldr	r2, [r7, #0]
    3cf4:	1dbb      	adds	r3, r7, #6
    3cf6:	8819      	ldrh	r1, [r3, #0]
    3cf8:	0013      	movs	r3, r2
    3cfa:	2200      	movs	r2, #0
    3cfc:	2004      	movs	r0, #4
    3cfe:	4c03      	ldr	r4, [pc, #12]	; (3d0c <atcab_genkey+0x28>)
    3d00:	47a0      	blx	r4
    3d02:	0003      	movs	r3, r0
}
    3d04:	0018      	movs	r0, r3
    3d06:	46bd      	mov	sp, r7
    3d08:	b003      	add	sp, #12
    3d0a:	bd90      	pop	{r4, r7, pc}
    3d0c:	00003b0d 	.word	0x00003b0d

00003d10 <atcab_challenge>:
/** \brief send a challenge to the device (a pass-through nonce)
 *  \param[in] challenge - pointer to 32 bytes of data which will be sent as the challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_challenge(const uint8_t *challenge)
{
    3d10:	b590      	push	{r4, r7, lr}
    3d12:	b0a7      	sub	sp, #156	; 0x9c
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3d18:	2397      	movs	r3, #151	; 0x97
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	22e1      	movs	r2, #225	; 0xe1
    3d1e:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    3d20:	2394      	movs	r3, #148	; 0x94
    3d22:	18fb      	adds	r3, r7, r3
    3d24:	2200      	movs	r2, #0
    3d26:	801a      	strh	r2, [r3, #0]

    do
    {
        // Verify the inputs
        if (challenge == NULL)
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d104      	bne.n	3d38 <atcab_challenge+0x28>
        {
            status = ATCA_BAD_PARAM;
    3d2e:	2397      	movs	r3, #151	; 0x97
    3d30:	18fb      	adds	r3, r7, r3
    3d32:	22e2      	movs	r2, #226	; 0xe2
    3d34:	701a      	strb	r2, [r3, #0]
            break;
    3d36:	e08c      	b.n	3e52 <atcab_challenge+0x142>
        }

        // build a nonce command (pass through mode)
        packet.param1 = NONCE_MODE_PASSTHROUGH;
    3d38:	2308      	movs	r3, #8
    3d3a:	18fb      	adds	r3, r7, r3
    3d3c:	2203      	movs	r2, #3
    3d3e:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    3d40:	2308      	movs	r3, #8
    3d42:	18fb      	adds	r3, r7, r3
    3d44:	2200      	movs	r2, #0
    3d46:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, challenge, 32);
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	2308      	movs	r3, #8
    3d4c:	18fb      	adds	r3, r7, r3
    3d4e:	3306      	adds	r3, #6
    3d50:	2220      	movs	r2, #32
    3d52:	0018      	movs	r0, r3
    3d54:	4b43      	ldr	r3, [pc, #268]	; (3e64 <atcab_challenge+0x154>)
    3d56:	4798      	blx	r3

        if ((status = atNonce(_gCommandObj, &packet)) != ATCA_SUCCESS)
    3d58:	4b43      	ldr	r3, [pc, #268]	; (3e68 <atcab_challenge+0x158>)
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	2297      	movs	r2, #151	; 0x97
    3d5e:	18bc      	adds	r4, r7, r2
    3d60:	2208      	movs	r2, #8
    3d62:	18ba      	adds	r2, r7, r2
    3d64:	0011      	movs	r1, r2
    3d66:	0018      	movs	r0, r3
    3d68:	4b40      	ldr	r3, [pc, #256]	; (3e6c <atcab_challenge+0x15c>)
    3d6a:	4798      	blx	r3
    3d6c:	0003      	movs	r3, r0
    3d6e:	7023      	strb	r3, [r4, #0]
    3d70:	2397      	movs	r3, #151	; 0x97
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	781b      	ldrb	r3, [r3, #0]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d164      	bne.n	3e44 <atcab_challenge+0x134>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_NONCE);
    3d7a:	4b3b      	ldr	r3, [pc, #236]	; (3e68 <atcab_challenge+0x158>)
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	2294      	movs	r2, #148	; 0x94
    3d80:	18bc      	adds	r4, r7, r2
    3d82:	210b      	movs	r1, #11
    3d84:	0018      	movs	r0, r3
    3d86:	4b3a      	ldr	r3, [pc, #232]	; (3e70 <atcab_challenge+0x160>)
    3d88:	4798      	blx	r3
    3d8a:	0003      	movs	r3, r0
    3d8c:	8023      	strh	r3, [r4, #0]

        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    3d8e:	2397      	movs	r3, #151	; 0x97
    3d90:	18fc      	adds	r4, r7, r3
    3d92:	4b38      	ldr	r3, [pc, #224]	; (3e74 <atcab_challenge+0x164>)
    3d94:	4798      	blx	r3
    3d96:	0003      	movs	r3, r0
    3d98:	7023      	strb	r3, [r4, #0]
    3d9a:	2397      	movs	r3, #151	; 0x97
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d151      	bne.n	3e48 <atcab_challenge+0x138>
            break;

        // send the command
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    3da4:	4b34      	ldr	r3, [pc, #208]	; (3e78 <atcab_challenge+0x168>)
    3da6:	6818      	ldr	r0, [r3, #0]
    3da8:	2308      	movs	r3, #8
    3daa:	18fb      	adds	r3, r7, r3
    3dac:	785b      	ldrb	r3, [r3, #1]
    3dae:	001a      	movs	r2, r3
    3db0:	2397      	movs	r3, #151	; 0x97
    3db2:	18fc      	adds	r4, r7, r3
    3db4:	2308      	movs	r3, #8
    3db6:	18fb      	adds	r3, r7, r3
    3db8:	0019      	movs	r1, r3
    3dba:	4b30      	ldr	r3, [pc, #192]	; (3e7c <atcab_challenge+0x16c>)
    3dbc:	4798      	blx	r3
    3dbe:	0003      	movs	r3, r0
    3dc0:	7023      	strb	r3, [r4, #0]
    3dc2:	2397      	movs	r3, #151	; 0x97
    3dc4:	18fb      	adds	r3, r7, r3
    3dc6:	781b      	ldrb	r3, [r3, #0]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d13f      	bne.n	3e4c <atcab_challenge+0x13c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    3dcc:	2394      	movs	r3, #148	; 0x94
    3dce:	18fb      	adds	r3, r7, r3
    3dd0:	881b      	ldrh	r3, [r3, #0]
    3dd2:	0018      	movs	r0, r3
    3dd4:	4b2a      	ldr	r3, [pc, #168]	; (3e80 <atcab_challenge+0x170>)
    3dd6:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    3dd8:	4b27      	ldr	r3, [pc, #156]	; (3e78 <atcab_challenge+0x168>)
    3dda:	6818      	ldr	r0, [r3, #0]
    3ddc:	2397      	movs	r3, #151	; 0x97
    3dde:	18fc      	adds	r4, r7, r3
    3de0:	2308      	movs	r3, #8
    3de2:	18fb      	adds	r3, r7, r3
    3de4:	338a      	adds	r3, #138	; 0x8a
    3de6:	001a      	movs	r2, r3
    3de8:	2308      	movs	r3, #8
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	3306      	adds	r3, #6
    3dee:	0019      	movs	r1, r3
    3df0:	4b24      	ldr	r3, [pc, #144]	; (3e84 <atcab_challenge+0x174>)
    3df2:	4798      	blx	r3
    3df4:	0003      	movs	r3, r0
    3df6:	7023      	strb	r3, [r4, #0]
    3df8:	2397      	movs	r3, #151	; 0x97
    3dfa:	18fb      	adds	r3, r7, r3
    3dfc:	781b      	ldrb	r3, [r3, #0]
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d126      	bne.n	3e50 <atcab_challenge+0x140>
            break;

        // Check response size
        if (packet.rxsize < 4)
    3e02:	2308      	movs	r3, #8
    3e04:	18fb      	adds	r3, r7, r3
    3e06:	228a      	movs	r2, #138	; 0x8a
    3e08:	5a9b      	ldrh	r3, [r3, r2]
    3e0a:	2b03      	cmp	r3, #3
    3e0c:	d80f      	bhi.n	3e2e <atcab_challenge+0x11e>
        {
            if (packet.rxsize > 0)
    3e0e:	2308      	movs	r3, #8
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	228a      	movs	r2, #138	; 0x8a
    3e14:	5a9b      	ldrh	r3, [r3, r2]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d004      	beq.n	3e24 <atcab_challenge+0x114>
                status = ATCA_RX_FAIL;
    3e1a:	2397      	movs	r3, #151	; 0x97
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	22e6      	movs	r2, #230	; 0xe6
    3e20:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    3e22:	e016      	b.n	3e52 <atcab_challenge+0x142>
                status = ATCA_RX_NO_RESPONSE;
    3e24:	2397      	movs	r3, #151	; 0x97
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	22e7      	movs	r2, #231	; 0xe7
    3e2a:	701a      	strb	r2, [r3, #0]
            break;
    3e2c:	e011      	b.n	3e52 <atcab_challenge+0x142>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    3e2e:	2397      	movs	r3, #151	; 0x97
    3e30:	18fc      	adds	r4, r7, r3
    3e32:	2308      	movs	r3, #8
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	3306      	adds	r3, #6
    3e38:	0018      	movs	r0, r3
    3e3a:	4b13      	ldr	r3, [pc, #76]	; (3e88 <atcab_challenge+0x178>)
    3e3c:	4798      	blx	r3
    3e3e:	0003      	movs	r3, r0
    3e40:	7023      	strb	r3, [r4, #0]
    3e42:	e006      	b.n	3e52 <atcab_challenge+0x142>
            break;
    3e44:	46c0      	nop			; (mov r8, r8)
    3e46:	e004      	b.n	3e52 <atcab_challenge+0x142>
            break;
    3e48:	46c0      	nop			; (mov r8, r8)
    3e4a:	e002      	b.n	3e52 <atcab_challenge+0x142>
            break;
    3e4c:	46c0      	nop			; (mov r8, r8)
    3e4e:	e000      	b.n	3e52 <atcab_challenge+0x142>
            break;
    3e50:	46c0      	nop			; (mov r8, r8)
            break;

    }
    while (0);

    _atcab_exit();
    3e52:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <atcab_challenge+0x17c>)
    3e54:	4798      	blx	r3
    return status;
    3e56:	2397      	movs	r3, #151	; 0x97
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	781b      	ldrb	r3, [r3, #0]
}
    3e5c:	0018      	movs	r0, r3
    3e5e:	46bd      	mov	sp, r7
    3e60:	b027      	add	sp, #156	; 0x9c
    3e62:	bd90      	pop	{r4, r7, pc}
    3e64:	0000ad67 	.word	0x0000ad67
    3e68:	200002b0 	.word	0x200002b0
    3e6c:	00002ec9 	.word	0x00002ec9
    3e70:	000030f5 	.word	0x000030f5
    3e74:	00003705 	.word	0x00003705
    3e78:	200002b4 	.word	0x200002b4
    3e7c:	000034d9 	.word	0x000034d9
    3e80:	000066d1 	.word	0x000066d1
    3e84:	000034fb 	.word	0x000034fb
    3e88:	000032b5 	.word	0x000032b5
    3e8c:	00003795 	.word	0x00003795

00003e90 <atcab_read_serial_number>:
/** \brief read the serial number of the device
 *  \param[out] serial_number  pointer to space to receive serial number. This space should be 9 bytes long
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
    3e90:	b5b0      	push	{r4, r5, r7, lr}
    3e92:	b08e      	sub	sp, #56	; 0x38
    3e94:	af02      	add	r7, sp, #8
    3e96:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    3e98:	232f      	movs	r3, #47	; 0x2f
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	22e1      	movs	r2, #225	; 0xe1
    3e9e:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d101      	bne.n	3eaa <atcab_read_serial_number+0x1a>
        return ATCA_BAD_PARAM;
    3ea6:	23e2      	movs	r3, #226	; 0xe2
    3ea8:	e028      	b.n	3efc <atcab_read_serial_number+0x6c>

    do
    {
        if ( (status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    3eaa:	232f      	movs	r3, #47	; 0x2f
    3eac:	18fc      	adds	r4, r7, r3
    3eae:	2320      	movs	r3, #32
    3eb0:	9301      	str	r3, [sp, #4]
    3eb2:	230c      	movs	r3, #12
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	9300      	str	r3, [sp, #0]
    3eb8:	2300      	movs	r3, #0
    3eba:	2200      	movs	r2, #0
    3ebc:	2100      	movs	r1, #0
    3ebe:	2000      	movs	r0, #0
    3ec0:	4d10      	ldr	r5, [pc, #64]	; (3f04 <atcab_read_serial_number+0x74>)
    3ec2:	47a8      	blx	r5
    3ec4:	0003      	movs	r3, r0
    3ec6:	7023      	strb	r3, [r4, #0]
    3ec8:	232f      	movs	r3, #47	; 0x2f
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d110      	bne.n	3ef4 <atcab_read_serial_number+0x64>
            break;
        memcpy(&serial_number[0], &read_buf[0], 4);
    3ed2:	230c      	movs	r3, #12
    3ed4:	18f9      	adds	r1, r7, r3
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	2204      	movs	r2, #4
    3eda:	0018      	movs	r0, r3
    3edc:	4b0a      	ldr	r3, [pc, #40]	; (3f08 <atcab_read_serial_number+0x78>)
    3ede:	4798      	blx	r3
        memcpy(&serial_number[4], &read_buf[8], 5);
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	1d18      	adds	r0, r3, #4
    3ee4:	230c      	movs	r3, #12
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	3308      	adds	r3, #8
    3eea:	2205      	movs	r2, #5
    3eec:	0019      	movs	r1, r3
    3eee:	4b06      	ldr	r3, [pc, #24]	; (3f08 <atcab_read_serial_number+0x78>)
    3ef0:	4798      	blx	r3
    3ef2:	e000      	b.n	3ef6 <atcab_read_serial_number+0x66>
            break;
    3ef4:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
    3ef6:	232f      	movs	r3, #47	; 0x2f
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	781b      	ldrb	r3, [r3, #0]
}
    3efc:	0018      	movs	r0, r3
    3efe:	46bd      	mov	sp, r7
    3f00:	b00c      	add	sp, #48	; 0x30
    3f02:	bdb0      	pop	{r4, r5, r7, pc}
    3f04:	00004439 	.word	0x00004439
    3f08:	0000ad67 	.word	0x0000ad67

00003f0c <atcab_get_addr>:
 *  \param[in] offset
 *  \param[in] addr
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    3f0c:	b5b0      	push	{r4, r5, r7, lr}
    3f0e:	b084      	sub	sp, #16
    3f10:	af00      	add	r7, sp, #0
    3f12:	0005      	movs	r5, r0
    3f14:	000c      	movs	r4, r1
    3f16:	0010      	movs	r0, r2
    3f18:	0019      	movs	r1, r3
    3f1a:	1dfb      	adds	r3, r7, #7
    3f1c:	1c2a      	adds	r2, r5, #0
    3f1e:	701a      	strb	r2, [r3, #0]
    3f20:	1d3b      	adds	r3, r7, #4
    3f22:	1c22      	adds	r2, r4, #0
    3f24:	801a      	strh	r2, [r3, #0]
    3f26:	1dbb      	adds	r3, r7, #6
    3f28:	1c02      	adds	r2, r0, #0
    3f2a:	701a      	strb	r2, [r3, #0]
    3f2c:	1cfb      	adds	r3, r7, #3
    3f2e:	1c0a      	adds	r2, r1, #0
    3f30:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    3f32:	230f      	movs	r3, #15
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	2200      	movs	r2, #0
    3f38:	701a      	strb	r2, [r3, #0]
    uint8_t memzone = zone & 0x03;
    3f3a:	230e      	movs	r3, #14
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	1dfa      	adds	r2, r7, #7
    3f40:	7812      	ldrb	r2, [r2, #0]
    3f42:	2103      	movs	r1, #3
    3f44:	400a      	ands	r2, r1
    3f46:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
    3f48:	6a3b      	ldr	r3, [r7, #32]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d101      	bne.n	3f52 <atcab_get_addr+0x46>
        return ATCA_BAD_PARAM;
    3f4e:	23e2      	movs	r3, #226	; 0xe2
    3f50:	e052      	b.n	3ff8 <atcab_get_addr+0xec>
    if ((memzone != ATCA_ZONE_CONFIG) && (memzone != ATCA_ZONE_DATA) && (memzone != ATCA_ZONE_OTP))
    3f52:	230e      	movs	r3, #14
    3f54:	18fb      	adds	r3, r7, r3
    3f56:	781b      	ldrb	r3, [r3, #0]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d00b      	beq.n	3f74 <atcab_get_addr+0x68>
    3f5c:	230e      	movs	r3, #14
    3f5e:	18fb      	adds	r3, r7, r3
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	2b02      	cmp	r3, #2
    3f64:	d006      	beq.n	3f74 <atcab_get_addr+0x68>
    3f66:	230e      	movs	r3, #14
    3f68:	18fb      	adds	r3, r7, r3
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	2b01      	cmp	r3, #1
    3f6e:	d001      	beq.n	3f74 <atcab_get_addr+0x68>
        return ATCA_BAD_PARAM;
    3f70:	23e2      	movs	r3, #226	; 0xe2
    3f72:	e041      	b.n	3ff8 <atcab_get_addr+0xec>
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    3f74:	6a3b      	ldr	r3, [r7, #32]
    3f76:	2200      	movs	r2, #0
    3f78:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    3f7a:	1cfb      	adds	r3, r7, #3
    3f7c:	1cfa      	adds	r2, r7, #3
    3f7e:	7812      	ldrb	r2, [r2, #0]
    3f80:	2107      	movs	r1, #7
    3f82:	400a      	ands	r2, r1
    3f84:	701a      	strb	r2, [r3, #0]
        if ((memzone == ATCA_ZONE_CONFIG) || (memzone == ATCA_ZONE_OTP))
    3f86:	230e      	movs	r3, #14
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d004      	beq.n	3f9a <atcab_get_addr+0x8e>
    3f90:	230e      	movs	r3, #14
    3f92:	18fb      	adds	r3, r7, r3
    3f94:	781b      	ldrb	r3, [r3, #0]
    3f96:	2b01      	cmp	r3, #1
    3f98:	d110      	bne.n	3fbc <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
    3f9a:	1dbb      	adds	r3, r7, #6
    3f9c:	781b      	ldrb	r3, [r3, #0]
    3f9e:	b29b      	uxth	r3, r3
    3fa0:	00db      	lsls	r3, r3, #3
    3fa2:	b29a      	uxth	r2, r3
    3fa4:	6a3b      	ldr	r3, [r7, #32]
    3fa6:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
    3fa8:	6a3b      	ldr	r3, [r7, #32]
    3faa:	881a      	ldrh	r2, [r3, #0]
    3fac:	1cfb      	adds	r3, r7, #3
    3fae:	781b      	ldrb	r3, [r3, #0]
    3fb0:	b29b      	uxth	r3, r3
    3fb2:	4313      	orrs	r3, r2
    3fb4:	b29a      	uxth	r2, r3
    3fb6:	6a3b      	ldr	r3, [r7, #32]
    3fb8:	801a      	strh	r2, [r3, #0]
    3fba:	e01a      	b.n	3ff2 <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
    3fbc:	1d3b      	adds	r3, r7, #4
    3fbe:	881b      	ldrh	r3, [r3, #0]
    3fc0:	00db      	lsls	r3, r3, #3
    3fc2:	b29a      	uxth	r2, r3
    3fc4:	6a3b      	ldr	r3, [r7, #32]
    3fc6:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
    3fc8:	6a3b      	ldr	r3, [r7, #32]
    3fca:	881a      	ldrh	r2, [r3, #0]
    3fcc:	1cfb      	adds	r3, r7, #3
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	b29b      	uxth	r3, r3
    3fd2:	4313      	orrs	r3, r2
    3fd4:	b29a      	uxth	r2, r3
    3fd6:	6a3b      	ldr	r3, [r7, #32]
    3fd8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
    3fda:	6a3b      	ldr	r3, [r7, #32]
    3fdc:	881b      	ldrh	r3, [r3, #0]
    3fde:	b21a      	sxth	r2, r3
    3fe0:	1dbb      	adds	r3, r7, #6
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	021b      	lsls	r3, r3, #8
    3fe6:	b21b      	sxth	r3, r3
    3fe8:	4313      	orrs	r3, r2
    3fea:	b21b      	sxth	r3, r3
    3fec:	b29a      	uxth	r2, r3
    3fee:	6a3b      	ldr	r3, [r7, #32]
    3ff0:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
    3ff2:	230f      	movs	r3, #15
    3ff4:	18fb      	adds	r3, r7, r3
    3ff6:	781b      	ldrb	r3, [r3, #0]
}
    3ff8:	0018      	movs	r0, r3
    3ffa:	46bd      	mov	sp, r7
    3ffc:	b004      	add	sp, #16
    3ffe:	bdb0      	pop	{r4, r5, r7, pc}

00004000 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    4000:	b580      	push	{r7, lr}
    4002:	b084      	sub	sp, #16
    4004:	af00      	add	r7, sp, #0
    4006:	603a      	str	r2, [r7, #0]
    4008:	1dfb      	adds	r3, r7, #7
    400a:	1c02      	adds	r2, r0, #0
    400c:	701a      	strb	r2, [r3, #0]
    400e:	1d3b      	adds	r3, r7, #4
    4010:	1c0a      	adds	r2, r1, #0
    4012:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    4014:	230f      	movs	r3, #15
    4016:	18fb      	adds	r3, r7, r3
    4018:	2200      	movs	r2, #0
    401a:	701a      	strb	r2, [r3, #0]

    if (size == NULL)
    401c:	683b      	ldr	r3, [r7, #0]
    401e:	2b00      	cmp	r3, #0
    4020:	d101      	bne.n	4026 <atcab_get_zone_size+0x26>
        return ATCA_BAD_PARAM;
    4022:	23e2      	movs	r3, #226	; 0xe2
    4024:	e058      	b.n	40d8 <atcab_get_zone_size+0xd8>

    if (atgetifacecfg(_gIface)->devtype == ATSHA204A)
    4026:	4b2e      	ldr	r3, [pc, #184]	; (40e0 <atcab_get_zone_size+0xe0>)
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	0018      	movs	r0, r3
    402c:	4b2d      	ldr	r3, [pc, #180]	; (40e4 <atcab_get_zone_size+0xe4>)
    402e:	4798      	blx	r3
    4030:	0003      	movs	r3, r0
    4032:	785b      	ldrb	r3, [r3, #1]
    4034:	2b00      	cmp	r3, #0
    4036:	d119      	bne.n	406c <atcab_get_zone_size+0x6c>
    {
        switch (zone)
    4038:	1dfb      	adds	r3, r7, #7
    403a:	781b      	ldrb	r3, [r3, #0]
    403c:	2b01      	cmp	r3, #1
    403e:	d007      	beq.n	4050 <atcab_get_zone_size+0x50>
    4040:	2b02      	cmp	r3, #2
    4042:	d009      	beq.n	4058 <atcab_get_zone_size+0x58>
    4044:	2b00      	cmp	r3, #0
    4046:	d10b      	bne.n	4060 <atcab_get_zone_size+0x60>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	2258      	movs	r2, #88	; 0x58
    404c:	601a      	str	r2, [r3, #0]
    404e:	e040      	b.n	40d2 <atcab_get_zone_size+0xd2>
        case ATCA_ZONE_OTP:    *size = 64; break;
    4050:	683b      	ldr	r3, [r7, #0]
    4052:	2240      	movs	r2, #64	; 0x40
    4054:	601a      	str	r2, [r3, #0]
    4056:	e03c      	b.n	40d2 <atcab_get_zone_size+0xd2>
        case ATCA_ZONE_DATA:   *size = 32; break;
    4058:	683b      	ldr	r3, [r7, #0]
    405a:	2220      	movs	r2, #32
    405c:	601a      	str	r2, [r3, #0]
    405e:	e038      	b.n	40d2 <atcab_get_zone_size+0xd2>
        default: status = ATCA_BAD_PARAM; break;
    4060:	230f      	movs	r3, #15
    4062:	18fb      	adds	r3, r7, r3
    4064:	22e2      	movs	r2, #226	; 0xe2
    4066:	701a      	strb	r2, [r3, #0]
    4068:	46c0      	nop			; (mov r8, r8)
    406a:	e032      	b.n	40d2 <atcab_get_zone_size+0xd2>
        }
    }
    else
    {
        switch (zone)
    406c:	1dfb      	adds	r3, r7, #7
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	2b01      	cmp	r3, #1
    4072:	d007      	beq.n	4084 <atcab_get_zone_size+0x84>
    4074:	2b02      	cmp	r3, #2
    4076:	d009      	beq.n	408c <atcab_get_zone_size+0x8c>
    4078:	2b00      	cmp	r3, #0
    407a:	d125      	bne.n	40c8 <atcab_get_zone_size+0xc8>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	2280      	movs	r2, #128	; 0x80
    4080:	601a      	str	r2, [r3, #0]
    4082:	e026      	b.n	40d2 <atcab_get_zone_size+0xd2>
        case ATCA_ZONE_OTP:    *size = 64; break;
    4084:	683b      	ldr	r3, [r7, #0]
    4086:	2240      	movs	r2, #64	; 0x40
    4088:	601a      	str	r2, [r3, #0]
    408a:	e022      	b.n	40d2 <atcab_get_zone_size+0xd2>
        case ATCA_ZONE_DATA:
            if (slot < 8)
    408c:	1d3b      	adds	r3, r7, #4
    408e:	881b      	ldrh	r3, [r3, #0]
    4090:	2b07      	cmp	r3, #7
    4092:	d803      	bhi.n	409c <atcab_get_zone_size+0x9c>
                *size = 36;
    4094:	683b      	ldr	r3, [r7, #0]
    4096:	2224      	movs	r2, #36	; 0x24
    4098:	601a      	str	r2, [r3, #0]
                *size = 416;
            else if (slot < 16)
                *size = 72;
            else
                status = ATCA_BAD_PARAM;
            break;
    409a:	e01a      	b.n	40d2 <atcab_get_zone_size+0xd2>
            else if (slot == 8)
    409c:	1d3b      	adds	r3, r7, #4
    409e:	881b      	ldrh	r3, [r3, #0]
    40a0:	2b08      	cmp	r3, #8
    40a2:	d104      	bne.n	40ae <atcab_get_zone_size+0xae>
                *size = 416;
    40a4:	683b      	ldr	r3, [r7, #0]
    40a6:	22d0      	movs	r2, #208	; 0xd0
    40a8:	0052      	lsls	r2, r2, #1
    40aa:	601a      	str	r2, [r3, #0]
            break;
    40ac:	e011      	b.n	40d2 <atcab_get_zone_size+0xd2>
            else if (slot < 16)
    40ae:	1d3b      	adds	r3, r7, #4
    40b0:	881b      	ldrh	r3, [r3, #0]
    40b2:	2b0f      	cmp	r3, #15
    40b4:	d803      	bhi.n	40be <atcab_get_zone_size+0xbe>
                *size = 72;
    40b6:	683b      	ldr	r3, [r7, #0]
    40b8:	2248      	movs	r2, #72	; 0x48
    40ba:	601a      	str	r2, [r3, #0]
            break;
    40bc:	e009      	b.n	40d2 <atcab_get_zone_size+0xd2>
                status = ATCA_BAD_PARAM;
    40be:	230f      	movs	r3, #15
    40c0:	18fb      	adds	r3, r7, r3
    40c2:	22e2      	movs	r2, #226	; 0xe2
    40c4:	701a      	strb	r2, [r3, #0]
            break;
    40c6:	e004      	b.n	40d2 <atcab_get_zone_size+0xd2>
        default: status = ATCA_BAD_PARAM; break;
    40c8:	230f      	movs	r3, #15
    40ca:	18fb      	adds	r3, r7, r3
    40cc:	22e2      	movs	r2, #226	; 0xe2
    40ce:	701a      	strb	r2, [r3, #0]
    40d0:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
    40d2:	230f      	movs	r3, #15
    40d4:	18fb      	adds	r3, r7, r3
    40d6:	781b      	ldrb	r3, [r3, #0]
}
    40d8:	0018      	movs	r0, r3
    40da:	46bd      	mov	sp, r7
    40dc:	b004      	add	sp, #16
    40de:	bd80      	pop	{r7, pc}
    40e0:	200002b4 	.word	0x200002b4
    40e4:	000035a1 	.word	0x000035a1

000040e8 <atcab_is_locked>:
 *  \param[in]  zone      The zone to query for locked (use LOCK_ZONE_CONFIG or LOCK_ZONE_DATA)
 *  \param[out] is_locked  true if the specified zone is locked
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
    40e8:	b5b0      	push	{r4, r5, r7, lr}
    40ea:	b086      	sub	sp, #24
    40ec:	af02      	add	r7, sp, #8
    40ee:	0002      	movs	r2, r0
    40f0:	6039      	str	r1, [r7, #0]
    40f2:	1dfb      	adds	r3, r7, #7
    40f4:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    40f6:	230f      	movs	r3, #15
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	22e1      	movs	r2, #225	; 0xe1
    40fc:	701a      	strb	r2, [r3, #0]
    uint8_t data[ATCA_WORD_SIZE];

    do
    {
        if (is_locked == NULL)
    40fe:	683b      	ldr	r3, [r7, #0]
    4100:	2b00      	cmp	r3, #0
    4102:	d101      	bne.n	4108 <atcab_is_locked+0x20>
            return ATCA_BAD_PARAM;
    4104:	23e2      	movs	r3, #226	; 0xe2
    4106:	e037      	b.n	4178 <atcab_is_locked+0x90>

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ( (ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
    4108:	230f      	movs	r3, #15
    410a:	18fc      	adds	r4, r7, r3
    410c:	2304      	movs	r3, #4
    410e:	9301      	str	r3, [sp, #4]
    4110:	2308      	movs	r3, #8
    4112:	18fb      	adds	r3, r7, r3
    4114:	9300      	str	r3, [sp, #0]
    4116:	2305      	movs	r3, #5
    4118:	2202      	movs	r2, #2
    411a:	2100      	movs	r1, #0
    411c:	2000      	movs	r0, #0
    411e:	4d18      	ldr	r5, [pc, #96]	; (4180 <atcab_is_locked+0x98>)
    4120:	47a8      	blx	r5
    4122:	0003      	movs	r3, r0
    4124:	7023      	strb	r3, [r4, #0]
    4126:	230f      	movs	r3, #15
    4128:	18fb      	adds	r3, r7, r3
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	2b00      	cmp	r3, #0
    412e:	d11f      	bne.n	4170 <atcab_is_locked+0x88>
            break;

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
    4130:	1dfb      	adds	r3, r7, #7
    4132:	781b      	ldrb	r3, [r3, #0]
    4134:	2b00      	cmp	r3, #0
    4136:	d002      	beq.n	413e <atcab_is_locked+0x56>
    4138:	2b01      	cmp	r3, #1
    413a:	d00a      	beq.n	4152 <atcab_is_locked+0x6a>
    413c:	e013      	b.n	4166 <atcab_is_locked+0x7e>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
    413e:	2308      	movs	r3, #8
    4140:	18fb      	adds	r3, r7, r3
    4142:	78db      	ldrb	r3, [r3, #3]
    4144:	3b55      	subs	r3, #85	; 0x55
    4146:	1e5a      	subs	r2, r3, #1
    4148:	4193      	sbcs	r3, r2
    414a:	b2da      	uxtb	r2, r3
    414c:	683b      	ldr	r3, [r7, #0]
    414e:	701a      	strb	r2, [r3, #0]
    4150:	e00f      	b.n	4172 <atcab_is_locked+0x8a>
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
    4152:	2308      	movs	r3, #8
    4154:	18fb      	adds	r3, r7, r3
    4156:	789b      	ldrb	r3, [r3, #2]
    4158:	3b55      	subs	r3, #85	; 0x55
    415a:	1e5a      	subs	r2, r3, #1
    415c:	4193      	sbcs	r3, r2
    415e:	b2da      	uxtb	r2, r3
    4160:	683b      	ldr	r3, [r7, #0]
    4162:	701a      	strb	r2, [r3, #0]
    4164:	e005      	b.n	4172 <atcab_is_locked+0x8a>
        default: ret = ATCA_BAD_PARAM; break;
    4166:	230f      	movs	r3, #15
    4168:	18fb      	adds	r3, r7, r3
    416a:	22e2      	movs	r2, #226	; 0xe2
    416c:	701a      	strb	r2, [r3, #0]
    416e:	e000      	b.n	4172 <atcab_is_locked+0x8a>
            break;
    4170:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return ret;
    4172:	230f      	movs	r3, #15
    4174:	18fb      	adds	r3, r7, r3
    4176:	781b      	ldrb	r3, [r3, #0]
}
    4178:	0018      	movs	r0, r3
    417a:	46bd      	mov	sp, r7
    417c:	b004      	add	sp, #16
    417e:	bdb0      	pop	{r4, r5, r7, pc}
    4180:	00004439 	.word	0x00004439

00004184 <atcab_write>:
 * \param[in] mac      MAC required for encrypted writes (32 bytes). Set to NULL if not required.
 *
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
    4184:	b590      	push	{r4, r7, lr}
    4186:	b0a9      	sub	sp, #164	; 0xa4
    4188:	af00      	add	r7, sp, #0
    418a:	60ba      	str	r2, [r7, #8]
    418c:	607b      	str	r3, [r7, #4]
    418e:	230f      	movs	r3, #15
    4190:	18fb      	adds	r3, r7, r3
    4192:	1c02      	adds	r2, r0, #0
    4194:	701a      	strb	r2, [r3, #0]
    4196:	230c      	movs	r3, #12
    4198:	18fb      	adds	r3, r7, r3
    419a:	1c0a      	adds	r2, r1, #0
    419c:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    419e:	239f      	movs	r3, #159	; 0x9f
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	22e1      	movs	r2, #225	; 0xe1
    41a4:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    41a6:	239c      	movs	r3, #156	; 0x9c
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	2200      	movs	r2, #0
    41ac:	801a      	strh	r2, [r3, #0]

    if (value == NULL)
    41ae:	68bb      	ldr	r3, [r7, #8]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d101      	bne.n	41b8 <atcab_write+0x34>
        return ATCA_BAD_PARAM;
    41b4:	23e2      	movs	r3, #226	; 0xe2
    41b6:	e0be      	b.n	4336 <atcab_write+0x1b2>

    do
    {
        // Build the write command
        packet.param1 = zone;
    41b8:	2310      	movs	r3, #16
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	220f      	movs	r2, #15
    41be:	18ba      	adds	r2, r7, r2
    41c0:	7812      	ldrb	r2, [r2, #0]
    41c2:	70da      	strb	r2, [r3, #3]
        packet.param2 = address;
    41c4:	2310      	movs	r3, #16
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	220c      	movs	r2, #12
    41ca:	18ba      	adds	r2, r7, r2
    41cc:	8812      	ldrh	r2, [r2, #0]
    41ce:	809a      	strh	r2, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
    41d0:	230f      	movs	r3, #15
    41d2:	18fb      	adds	r3, r7, r3
    41d4:	781b      	ldrb	r3, [r3, #0]
    41d6:	b25b      	sxtb	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	da13      	bge.n	4204 <atcab_write+0x80>
        {
            // 32-byte write
            memcpy(packet.data, value, 32);
    41dc:	68b9      	ldr	r1, [r7, #8]
    41de:	2310      	movs	r3, #16
    41e0:	18fb      	adds	r3, r7, r3
    41e2:	3306      	adds	r3, #6
    41e4:	2220      	movs	r2, #32
    41e6:	0018      	movs	r0, r3
    41e8:	4b55      	ldr	r3, [pc, #340]	; (4340 <atcab_write+0x1bc>)
    41ea:	4798      	blx	r3
            // Only 32-byte writes can have a MAC
            if (mac)
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d010      	beq.n	4214 <atcab_write+0x90>
                memcpy(&packet.data[32], mac, 32);
    41f2:	6879      	ldr	r1, [r7, #4]
    41f4:	2310      	movs	r3, #16
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	3326      	adds	r3, #38	; 0x26
    41fa:	2220      	movs	r2, #32
    41fc:	0018      	movs	r0, r3
    41fe:	4b50      	ldr	r3, [pc, #320]	; (4340 <atcab_write+0x1bc>)
    4200:	4798      	blx	r3
    4202:	e007      	b.n	4214 <atcab_write+0x90>
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
    4204:	68b9      	ldr	r1, [r7, #8]
    4206:	2310      	movs	r3, #16
    4208:	18fb      	adds	r3, r7, r3
    420a:	3306      	adds	r3, #6
    420c:	2204      	movs	r2, #4
    420e:	0018      	movs	r0, r3
    4210:	4b4b      	ldr	r3, [pc, #300]	; (4340 <atcab_write+0x1bc>)
    4212:	4798      	blx	r3
        } if ((status = atWrite(_gCommandObj, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
    4214:	4b4b      	ldr	r3, [pc, #300]	; (4344 <atcab_write+0x1c0>)
    4216:	6818      	ldr	r0, [r3, #0]
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	2b00      	cmp	r3, #0
    421c:	d007      	beq.n	422e <atcab_write+0xaa>
    421e:	230f      	movs	r3, #15
    4220:	18fb      	adds	r3, r7, r3
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	b25b      	sxtb	r3, r3
    4226:	2b00      	cmp	r3, #0
    4228:	da01      	bge.n	422e <atcab_write+0xaa>
    422a:	2301      	movs	r3, #1
    422c:	e000      	b.n	4230 <atcab_write+0xac>
    422e:	2300      	movs	r3, #0
    4230:	1c1a      	adds	r2, r3, #0
    4232:	2301      	movs	r3, #1
    4234:	4013      	ands	r3, r2
    4236:	b2da      	uxtb	r2, r3
    4238:	239f      	movs	r3, #159	; 0x9f
    423a:	18fc      	adds	r4, r7, r3
    423c:	2310      	movs	r3, #16
    423e:	18fb      	adds	r3, r7, r3
    4240:	0019      	movs	r1, r3
    4242:	4b41      	ldr	r3, [pc, #260]	; (4348 <atcab_write+0x1c4>)
    4244:	4798      	blx	r3
    4246:	0003      	movs	r3, r0
    4248:	7023      	strb	r3, [r4, #0]
    424a:	239f      	movs	r3, #159	; 0x9f
    424c:	18fb      	adds	r3, r7, r3
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	2b00      	cmp	r3, #0
    4252:	d164      	bne.n	431e <atcab_write+0x19a>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_WRITEMEM);
    4254:	4b3b      	ldr	r3, [pc, #236]	; (4344 <atcab_write+0x1c0>)
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	229c      	movs	r2, #156	; 0x9c
    425a:	18bc      	adds	r4, r7, r2
    425c:	2114      	movs	r1, #20
    425e:	0018      	movs	r0, r3
    4260:	4b3a      	ldr	r3, [pc, #232]	; (434c <atcab_write+0x1c8>)
    4262:	4798      	blx	r3
    4264:	0003      	movs	r3, r0
    4266:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    4268:	239f      	movs	r3, #159	; 0x9f
    426a:	18fc      	adds	r4, r7, r3
    426c:	4b38      	ldr	r3, [pc, #224]	; (4350 <atcab_write+0x1cc>)
    426e:	4798      	blx	r3
    4270:	0003      	movs	r3, r0
    4272:	7023      	strb	r3, [r4, #0]
    4274:	239f      	movs	r3, #159	; 0x9f
    4276:	18fb      	adds	r3, r7, r3
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d151      	bne.n	4322 <atcab_write+0x19e>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    427e:	4b35      	ldr	r3, [pc, #212]	; (4354 <atcab_write+0x1d0>)
    4280:	6818      	ldr	r0, [r3, #0]
    4282:	2310      	movs	r3, #16
    4284:	18fb      	adds	r3, r7, r3
    4286:	785b      	ldrb	r3, [r3, #1]
    4288:	001a      	movs	r2, r3
    428a:	239f      	movs	r3, #159	; 0x9f
    428c:	18fc      	adds	r4, r7, r3
    428e:	2310      	movs	r3, #16
    4290:	18fb      	adds	r3, r7, r3
    4292:	0019      	movs	r1, r3
    4294:	4b30      	ldr	r3, [pc, #192]	; (4358 <atcab_write+0x1d4>)
    4296:	4798      	blx	r3
    4298:	0003      	movs	r3, r0
    429a:	7023      	strb	r3, [r4, #0]
    429c:	239f      	movs	r3, #159	; 0x9f
    429e:	18fb      	adds	r3, r7, r3
    42a0:	781b      	ldrb	r3, [r3, #0]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d13f      	bne.n	4326 <atcab_write+0x1a2>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    42a6:	239c      	movs	r3, #156	; 0x9c
    42a8:	18fb      	adds	r3, r7, r3
    42aa:	881b      	ldrh	r3, [r3, #0]
    42ac:	0018      	movs	r0, r3
    42ae:	4b2b      	ldr	r3, [pc, #172]	; (435c <atcab_write+0x1d8>)
    42b0:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    42b2:	4b28      	ldr	r3, [pc, #160]	; (4354 <atcab_write+0x1d0>)
    42b4:	6818      	ldr	r0, [r3, #0]
    42b6:	239f      	movs	r3, #159	; 0x9f
    42b8:	18fc      	adds	r4, r7, r3
    42ba:	2310      	movs	r3, #16
    42bc:	18fb      	adds	r3, r7, r3
    42be:	338a      	adds	r3, #138	; 0x8a
    42c0:	001a      	movs	r2, r3
    42c2:	2310      	movs	r3, #16
    42c4:	18fb      	adds	r3, r7, r3
    42c6:	3306      	adds	r3, #6
    42c8:	0019      	movs	r1, r3
    42ca:	4b25      	ldr	r3, [pc, #148]	; (4360 <atcab_write+0x1dc>)
    42cc:	4798      	blx	r3
    42ce:	0003      	movs	r3, r0
    42d0:	7023      	strb	r3, [r4, #0]
    42d2:	239f      	movs	r3, #159	; 0x9f
    42d4:	18fb      	adds	r3, r7, r3
    42d6:	781b      	ldrb	r3, [r3, #0]
    42d8:	2b00      	cmp	r3, #0
    42da:	d126      	bne.n	432a <atcab_write+0x1a6>
            break;

        // Check response size
        if (packet.rxsize < 4)
    42dc:	2310      	movs	r3, #16
    42de:	18fb      	adds	r3, r7, r3
    42e0:	228a      	movs	r2, #138	; 0x8a
    42e2:	5a9b      	ldrh	r3, [r3, r2]
    42e4:	2b03      	cmp	r3, #3
    42e6:	d80f      	bhi.n	4308 <atcab_write+0x184>
        {
            if (packet.rxsize > 0)
    42e8:	2310      	movs	r3, #16
    42ea:	18fb      	adds	r3, r7, r3
    42ec:	228a      	movs	r2, #138	; 0x8a
    42ee:	5a9b      	ldrh	r3, [r3, r2]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d004      	beq.n	42fe <atcab_write+0x17a>
                status = ATCA_RX_FAIL;
    42f4:	239f      	movs	r3, #159	; 0x9f
    42f6:	18fb      	adds	r3, r7, r3
    42f8:	22e6      	movs	r2, #230	; 0xe6
    42fa:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    42fc:	e016      	b.n	432c <atcab_write+0x1a8>
                status = ATCA_RX_NO_RESPONSE;
    42fe:	239f      	movs	r3, #159	; 0x9f
    4300:	18fb      	adds	r3, r7, r3
    4302:	22e7      	movs	r2, #231	; 0xe7
    4304:	701a      	strb	r2, [r3, #0]
            break;
    4306:	e011      	b.n	432c <atcab_write+0x1a8>
        }

        status = isATCAError(packet.data);
    4308:	239f      	movs	r3, #159	; 0x9f
    430a:	18fc      	adds	r4, r7, r3
    430c:	2310      	movs	r3, #16
    430e:	18fb      	adds	r3, r7, r3
    4310:	3306      	adds	r3, #6
    4312:	0018      	movs	r0, r3
    4314:	4b13      	ldr	r3, [pc, #76]	; (4364 <atcab_write+0x1e0>)
    4316:	4798      	blx	r3
    4318:	0003      	movs	r3, r0
    431a:	7023      	strb	r3, [r4, #0]
    431c:	e006      	b.n	432c <atcab_write+0x1a8>
            break;
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	e004      	b.n	432c <atcab_write+0x1a8>
            break;
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	e002      	b.n	432c <atcab_write+0x1a8>
            break;
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	e000      	b.n	432c <atcab_write+0x1a8>
            break;
    432a:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    _atcab_exit();
    432c:	4b0e      	ldr	r3, [pc, #56]	; (4368 <atcab_write+0x1e4>)
    432e:	4798      	blx	r3
    return status;
    4330:	239f      	movs	r3, #159	; 0x9f
    4332:	18fb      	adds	r3, r7, r3
    4334:	781b      	ldrb	r3, [r3, #0]
}
    4336:	0018      	movs	r0, r3
    4338:	46bd      	mov	sp, r7
    433a:	b029      	add	sp, #164	; 0xa4
    433c:	bd90      	pop	{r4, r7, pc}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	0000ad67 	.word	0x0000ad67
    4344:	200002b0 	.word	0x200002b0
    4348:	00003015 	.word	0x00003015
    434c:	000030f5 	.word	0x000030f5
    4350:	00003705 	.word	0x00003705
    4354:	200002b4 	.word	0x200002b4
    4358:	000034d9 	.word	0x000034d9
    435c:	000066d1 	.word	0x000066d1
    4360:	000034fb 	.word	0x000034fb
    4364:	000032b5 	.word	0x000032b5
    4368:	00003795 	.word	0x00003795

0000436c <atcab_write_zone>:
 *  \param[in] data    Data to be written.
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
    436c:	b5b0      	push	{r4, r5, r7, lr}
    436e:	b086      	sub	sp, #24
    4370:	af02      	add	r7, sp, #8
    4372:	0005      	movs	r5, r0
    4374:	000c      	movs	r4, r1
    4376:	0010      	movs	r0, r2
    4378:	0019      	movs	r1, r3
    437a:	1dfb      	adds	r3, r7, #7
    437c:	1c2a      	adds	r2, r5, #0
    437e:	701a      	strb	r2, [r3, #0]
    4380:	1d3b      	adds	r3, r7, #4
    4382:	1c22      	adds	r2, r4, #0
    4384:	801a      	strh	r2, [r3, #0]
    4386:	1dbb      	adds	r3, r7, #6
    4388:	1c02      	adds	r2, r0, #0
    438a:	701a      	strb	r2, [r3, #0]
    438c:	1cfb      	adds	r3, r7, #3
    438e:	1c0a      	adds	r2, r1, #0
    4390:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4392:	230f      	movs	r3, #15
    4394:	18fb      	adds	r3, r7, r3
    4396:	22e1      	movs	r2, #225	; 0xe1
    4398:	701a      	strb	r2, [r3, #0]
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
    439a:	6a3b      	ldr	r3, [r7, #32]
    439c:	2b00      	cmp	r3, #0
    439e:	d101      	bne.n	43a4 <atcab_write_zone+0x38>
        return ATCA_BAD_PARAM;
    43a0:	23e2      	movs	r3, #226	; 0xe2
    43a2:	e040      	b.n	4426 <atcab_write_zone+0xba>

    if (len != 4 && len != 32)
    43a4:	2324      	movs	r3, #36	; 0x24
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	2b04      	cmp	r3, #4
    43ac:	d006      	beq.n	43bc <atcab_write_zone+0x50>
    43ae:	2324      	movs	r3, #36	; 0x24
    43b0:	18fb      	adds	r3, r7, r3
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	2b20      	cmp	r3, #32
    43b6:	d001      	beq.n	43bc <atcab_write_zone+0x50>
        return ATCA_BAD_PARAM;
    43b8:	23e2      	movs	r3, #226	; 0xe2
    43ba:	e034      	b.n	4426 <atcab_write_zone+0xba>

    do
    {
        // The get address function checks the remaining variables
        if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    43bc:	230f      	movs	r3, #15
    43be:	18fc      	adds	r4, r7, r3
    43c0:	1cfb      	adds	r3, r7, #3
    43c2:	781d      	ldrb	r5, [r3, #0]
    43c4:	1dbb      	adds	r3, r7, #6
    43c6:	781a      	ldrb	r2, [r3, #0]
    43c8:	1d3b      	adds	r3, r7, #4
    43ca:	8819      	ldrh	r1, [r3, #0]
    43cc:	1dfb      	adds	r3, r7, #7
    43ce:	7818      	ldrb	r0, [r3, #0]
    43d0:	230c      	movs	r3, #12
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	9300      	str	r3, [sp, #0]
    43d6:	002b      	movs	r3, r5
    43d8:	4d15      	ldr	r5, [pc, #84]	; (4430 <atcab_write_zone+0xc4>)
    43da:	47a8      	blx	r5
    43dc:	0003      	movs	r3, r0
    43de:	7023      	strb	r3, [r4, #0]
    43e0:	230f      	movs	r3, #15
    43e2:	18fb      	adds	r3, r7, r3
    43e4:	781b      	ldrb	r3, [r3, #0]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d119      	bne.n	441e <atcab_write_zone+0xb2>
            break;

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
    43ea:	2324      	movs	r3, #36	; 0x24
    43ec:	18fb      	adds	r3, r7, r3
    43ee:	781b      	ldrb	r3, [r3, #0]
    43f0:	2b20      	cmp	r3, #32
    43f2:	d106      	bne.n	4402 <atcab_write_zone+0x96>
            zone = zone | ATCA_ZONE_READWRITE_32;
    43f4:	1dfb      	adds	r3, r7, #7
    43f6:	1dfa      	adds	r2, r7, #7
    43f8:	7812      	ldrb	r2, [r2, #0]
    43fa:	2180      	movs	r1, #128	; 0x80
    43fc:	4249      	negs	r1, r1
    43fe:	430a      	orrs	r2, r1
    4400:	701a      	strb	r2, [r3, #0]

        status = atcab_write(zone, addr, data, NULL);
    4402:	230c      	movs	r3, #12
    4404:	18fb      	adds	r3, r7, r3
    4406:	8819      	ldrh	r1, [r3, #0]
    4408:	230f      	movs	r3, #15
    440a:	18fc      	adds	r4, r7, r3
    440c:	6a3a      	ldr	r2, [r7, #32]
    440e:	1dfb      	adds	r3, r7, #7
    4410:	7818      	ldrb	r0, [r3, #0]
    4412:	2300      	movs	r3, #0
    4414:	4d07      	ldr	r5, [pc, #28]	; (4434 <atcab_write_zone+0xc8>)
    4416:	47a8      	blx	r5
    4418:	0003      	movs	r3, r0
    441a:	7023      	strb	r3, [r4, #0]
    441c:	e000      	b.n	4420 <atcab_write_zone+0xb4>
            break;
    441e:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    return status;
    4420:	230f      	movs	r3, #15
    4422:	18fb      	adds	r3, r7, r3
    4424:	781b      	ldrb	r3, [r3, #0]
}
    4426:	0018      	movs	r0, r3
    4428:	46bd      	mov	sp, r7
    442a:	b004      	add	sp, #16
    442c:	bdb0      	pop	{r4, r5, r7, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	00003f0d 	.word	0x00003f0d
    4434:	00004185 	.word	0x00004185

00004438 <atcab_read_zone>:
 *  \param[in] data
 *  \param[in] len  Must be either 4 or 32
 *  returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    4438:	b5b0      	push	{r4, r5, r7, lr}
    443a:	b0aa      	sub	sp, #168	; 0xa8
    443c:	af02      	add	r7, sp, #8
    443e:	0005      	movs	r5, r0
    4440:	000c      	movs	r4, r1
    4442:	0010      	movs	r0, r2
    4444:	0019      	movs	r1, r3
    4446:	1dfb      	adds	r3, r7, #7
    4448:	1c2a      	adds	r2, r5, #0
    444a:	701a      	strb	r2, [r3, #0]
    444c:	1d3b      	adds	r3, r7, #4
    444e:	1c22      	adds	r2, r4, #0
    4450:	801a      	strh	r2, [r3, #0]
    4452:	1dbb      	adds	r3, r7, #6
    4454:	1c02      	adds	r2, r0, #0
    4456:	701a      	strb	r2, [r3, #0]
    4458:	1cfb      	adds	r3, r7, #3
    445a:	1c0a      	adds	r2, r1, #0
    445c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    445e:	239f      	movs	r3, #159	; 0x9f
    4460:	18fb      	adds	r3, r7, r3
    4462:	2200      	movs	r2, #0
    4464:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t addr;
    uint16_t execution_time = 0;
    4466:	239c      	movs	r3, #156	; 0x9c
    4468:	18fb      	adds	r3, r7, r3
    446a:	2200      	movs	r2, #0
    446c:	801a      	strh	r2, [r3, #0]

    do
    {
        // Check the input parameters
        if (data == NULL)
    446e:	23b0      	movs	r3, #176	; 0xb0
    4470:	18fb      	adds	r3, r7, r3
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	2b00      	cmp	r3, #0
    4476:	d101      	bne.n	447c <atcab_read_zone+0x44>
            return ATCA_BAD_PARAM;
    4478:	23e2      	movs	r3, #226	; 0xe2
    447a:	e0d2      	b.n	4622 <atcab_read_zone+0x1ea>

        if (len != 4 && len != 32)
    447c:	23b4      	movs	r3, #180	; 0xb4
    447e:	18fb      	adds	r3, r7, r3
    4480:	781b      	ldrb	r3, [r3, #0]
    4482:	2b04      	cmp	r3, #4
    4484:	d006      	beq.n	4494 <atcab_read_zone+0x5c>
    4486:	23b4      	movs	r3, #180	; 0xb4
    4488:	18fb      	adds	r3, r7, r3
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	2b20      	cmp	r3, #32
    448e:	d001      	beq.n	4494 <atcab_read_zone+0x5c>
            return ATCA_BAD_PARAM;
    4490:	23e2      	movs	r3, #226	; 0xe2
    4492:	e0c6      	b.n	4622 <atcab_read_zone+0x1ea>

        // The get address function checks the remaining variables
        if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    4494:	239f      	movs	r3, #159	; 0x9f
    4496:	18fc      	adds	r4, r7, r3
    4498:	1cfb      	adds	r3, r7, #3
    449a:	781d      	ldrb	r5, [r3, #0]
    449c:	1dbb      	adds	r3, r7, #6
    449e:	781a      	ldrb	r2, [r3, #0]
    44a0:	1d3b      	adds	r3, r7, #4
    44a2:	8819      	ldrh	r1, [r3, #0]
    44a4:	1dfb      	adds	r3, r7, #7
    44a6:	7818      	ldrb	r0, [r3, #0]
    44a8:	230e      	movs	r3, #14
    44aa:	18fb      	adds	r3, r7, r3
    44ac:	9300      	str	r3, [sp, #0]
    44ae:	002b      	movs	r3, r5
    44b0:	4d5e      	ldr	r5, [pc, #376]	; (462c <atcab_read_zone+0x1f4>)
    44b2:	47a8      	blx	r5
    44b4:	0003      	movs	r3, r0
    44b6:	7023      	strb	r3, [r4, #0]
    44b8:	239f      	movs	r3, #159	; 0x9f
    44ba:	18fb      	adds	r3, r7, r3
    44bc:	781b      	ldrb	r3, [r3, #0]
    44be:	2b00      	cmp	r3, #0
    44c0:	d000      	beq.n	44c4 <atcab_read_zone+0x8c>
    44c2:	e09e      	b.n	4602 <atcab_read_zone+0x1ca>
            break;

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
    44c4:	23b4      	movs	r3, #180	; 0xb4
    44c6:	18fb      	adds	r3, r7, r3
    44c8:	781b      	ldrb	r3, [r3, #0]
    44ca:	2b20      	cmp	r3, #32
    44cc:	d106      	bne.n	44dc <atcab_read_zone+0xa4>
            zone = zone | ATCA_ZONE_READWRITE_32;
    44ce:	1dfb      	adds	r3, r7, #7
    44d0:	1dfa      	adds	r2, r7, #7
    44d2:	7812      	ldrb	r2, [r2, #0]
    44d4:	2180      	movs	r1, #128	; 0x80
    44d6:	4249      	negs	r1, r1
    44d8:	430a      	orrs	r2, r1
    44da:	701a      	strb	r2, [r3, #0]

        // build a read command
        packet.param1 = zone;
    44dc:	2310      	movs	r3, #16
    44de:	18fb      	adds	r3, r7, r3
    44e0:	1dfa      	adds	r2, r7, #7
    44e2:	7812      	ldrb	r2, [r2, #0]
    44e4:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
    44e6:	230e      	movs	r3, #14
    44e8:	18fb      	adds	r3, r7, r3
    44ea:	881a      	ldrh	r2, [r3, #0]
    44ec:	2310      	movs	r3, #16
    44ee:	18fb      	adds	r3, r7, r3
    44f0:	809a      	strh	r2, [r3, #4]

        if ( (status = atRead(_gCommandObj, &packet)) != ATCA_SUCCESS)
    44f2:	4b4f      	ldr	r3, [pc, #316]	; (4630 <atcab_read_zone+0x1f8>)
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	229f      	movs	r2, #159	; 0x9f
    44f8:	18bc      	adds	r4, r7, r2
    44fa:	2210      	movs	r2, #16
    44fc:	18ba      	adds	r2, r7, r2
    44fe:	0011      	movs	r1, r2
    4500:	0018      	movs	r0, r3
    4502:	4b4c      	ldr	r3, [pc, #304]	; (4634 <atcab_read_zone+0x1fc>)
    4504:	4798      	blx	r3
    4506:	0003      	movs	r3, r0
    4508:	7023      	strb	r3, [r4, #0]
    450a:	239f      	movs	r3, #159	; 0x9f
    450c:	18fb      	adds	r3, r7, r3
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	2b00      	cmp	r3, #0
    4512:	d000      	beq.n	4516 <atcab_read_zone+0xde>
    4514:	e077      	b.n	4606 <atcab_read_zone+0x1ce>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_READMEM);
    4516:	4b46      	ldr	r3, [pc, #280]	; (4630 <atcab_read_zone+0x1f8>)
    4518:	681b      	ldr	r3, [r3, #0]
    451a:	229c      	movs	r2, #156	; 0x9c
    451c:	18bc      	adds	r4, r7, r2
    451e:	210f      	movs	r1, #15
    4520:	0018      	movs	r0, r3
    4522:	4b45      	ldr	r3, [pc, #276]	; (4638 <atcab_read_zone+0x200>)
    4524:	4798      	blx	r3
    4526:	0003      	movs	r3, r0
    4528:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    452a:	239f      	movs	r3, #159	; 0x9f
    452c:	18fc      	adds	r4, r7, r3
    452e:	4b43      	ldr	r3, [pc, #268]	; (463c <atcab_read_zone+0x204>)
    4530:	4798      	blx	r3
    4532:	0003      	movs	r3, r0
    4534:	7023      	strb	r3, [r4, #0]
    4536:	239f      	movs	r3, #159	; 0x9f
    4538:	18fb      	adds	r3, r7, r3
    453a:	781b      	ldrb	r3, [r3, #0]
    453c:	2b00      	cmp	r3, #0
    453e:	d164      	bne.n	460a <atcab_read_zone+0x1d2>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    4540:	4b3f      	ldr	r3, [pc, #252]	; (4640 <atcab_read_zone+0x208>)
    4542:	6818      	ldr	r0, [r3, #0]
    4544:	2310      	movs	r3, #16
    4546:	18fb      	adds	r3, r7, r3
    4548:	785b      	ldrb	r3, [r3, #1]
    454a:	001a      	movs	r2, r3
    454c:	239f      	movs	r3, #159	; 0x9f
    454e:	18fc      	adds	r4, r7, r3
    4550:	2310      	movs	r3, #16
    4552:	18fb      	adds	r3, r7, r3
    4554:	0019      	movs	r1, r3
    4556:	4b3b      	ldr	r3, [pc, #236]	; (4644 <atcab_read_zone+0x20c>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]
    455e:	239f      	movs	r3, #159	; 0x9f
    4560:	18fb      	adds	r3, r7, r3
    4562:	781b      	ldrb	r3, [r3, #0]
    4564:	2b00      	cmp	r3, #0
    4566:	d152      	bne.n	460e <atcab_read_zone+0x1d6>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    4568:	239c      	movs	r3, #156	; 0x9c
    456a:	18fb      	adds	r3, r7, r3
    456c:	881b      	ldrh	r3, [r3, #0]
    456e:	0018      	movs	r0, r3
    4570:	4b35      	ldr	r3, [pc, #212]	; (4648 <atcab_read_zone+0x210>)
    4572:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    4574:	4b32      	ldr	r3, [pc, #200]	; (4640 <atcab_read_zone+0x208>)
    4576:	6818      	ldr	r0, [r3, #0]
    4578:	239f      	movs	r3, #159	; 0x9f
    457a:	18fc      	adds	r4, r7, r3
    457c:	2310      	movs	r3, #16
    457e:	18fb      	adds	r3, r7, r3
    4580:	338a      	adds	r3, #138	; 0x8a
    4582:	001a      	movs	r2, r3
    4584:	2310      	movs	r3, #16
    4586:	18fb      	adds	r3, r7, r3
    4588:	3306      	adds	r3, #6
    458a:	0019      	movs	r1, r3
    458c:	4b2f      	ldr	r3, [pc, #188]	; (464c <atcab_read_zone+0x214>)
    458e:	4798      	blx	r3
    4590:	0003      	movs	r3, r0
    4592:	7023      	strb	r3, [r4, #0]
    4594:	239f      	movs	r3, #159	; 0x9f
    4596:	18fb      	adds	r3, r7, r3
    4598:	781b      	ldrb	r3, [r3, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d139      	bne.n	4612 <atcab_read_zone+0x1da>
            break;

        // Check response size
        if (packet.rxsize < 4)
    459e:	2310      	movs	r3, #16
    45a0:	18fb      	adds	r3, r7, r3
    45a2:	228a      	movs	r2, #138	; 0x8a
    45a4:	5a9b      	ldrh	r3, [r3, r2]
    45a6:	2b03      	cmp	r3, #3
    45a8:	d80f      	bhi.n	45ca <atcab_read_zone+0x192>
        {
            if (packet.rxsize > 0)
    45aa:	2310      	movs	r3, #16
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	228a      	movs	r2, #138	; 0x8a
    45b0:	5a9b      	ldrh	r3, [r3, r2]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d004      	beq.n	45c0 <atcab_read_zone+0x188>
                status = ATCA_RX_FAIL;
    45b6:	239f      	movs	r3, #159	; 0x9f
    45b8:	18fb      	adds	r3, r7, r3
    45ba:	22e6      	movs	r2, #230	; 0xe6
    45bc:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    45be:	e02b      	b.n	4618 <atcab_read_zone+0x1e0>
                status = ATCA_RX_NO_RESPONSE;
    45c0:	239f      	movs	r3, #159	; 0x9f
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	22e7      	movs	r2, #231	; 0xe7
    45c6:	701a      	strb	r2, [r3, #0]
            break;
    45c8:	e026      	b.n	4618 <atcab_read_zone+0x1e0>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    45ca:	239f      	movs	r3, #159	; 0x9f
    45cc:	18fc      	adds	r4, r7, r3
    45ce:	2310      	movs	r3, #16
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	3306      	adds	r3, #6
    45d4:	0018      	movs	r0, r3
    45d6:	4b1e      	ldr	r3, [pc, #120]	; (4650 <atcab_read_zone+0x218>)
    45d8:	4798      	blx	r3
    45da:	0003      	movs	r3, r0
    45dc:	7023      	strb	r3, [r4, #0]
    45de:	239f      	movs	r3, #159	; 0x9f
    45e0:	18fb      	adds	r3, r7, r3
    45e2:	781b      	ldrb	r3, [r3, #0]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d116      	bne.n	4616 <atcab_read_zone+0x1de>
            break;

        memcpy(data, &packet.data[1], len);
    45e8:	23b4      	movs	r3, #180	; 0xb4
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	781a      	ldrb	r2, [r3, #0]
    45ee:	2310      	movs	r3, #16
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	1dd9      	adds	r1, r3, #7
    45f4:	23b0      	movs	r3, #176	; 0xb0
    45f6:	18fb      	adds	r3, r7, r3
    45f8:	681b      	ldr	r3, [r3, #0]
    45fa:	0018      	movs	r0, r3
    45fc:	4b15      	ldr	r3, [pc, #84]	; (4654 <atcab_read_zone+0x21c>)
    45fe:	4798      	blx	r3
    4600:	e00a      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	e008      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	e006      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    460a:	46c0      	nop			; (mov r8, r8)
    460c:	e004      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	e002      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	e000      	b.n	4618 <atcab_read_zone+0x1e0>
            break;
    4616:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    4618:	4b0f      	ldr	r3, [pc, #60]	; (4658 <atcab_read_zone+0x220>)
    461a:	4798      	blx	r3
    return status;
    461c:	239f      	movs	r3, #159	; 0x9f
    461e:	18fb      	adds	r3, r7, r3
    4620:	781b      	ldrb	r3, [r3, #0]
}
    4622:	0018      	movs	r0, r3
    4624:	46bd      	mov	sp, r7
    4626:	b028      	add	sp, #160	; 0xa0
    4628:	bdb0      	pop	{r4, r5, r7, pc}
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	00003f0d 	.word	0x00003f0d
    4630:	200002b0 	.word	0x200002b0
    4634:	00002f65 	.word	0x00002f65
    4638:	000030f5 	.word	0x000030f5
    463c:	00003705 	.word	0x00003705
    4640:	200002b4 	.word	0x200002b4
    4644:	000034d9 	.word	0x000034d9
    4648:	000066d1 	.word	0x000066d1
    464c:	000034fb 	.word	0x000034fb
    4650:	000032b5 	.word	0x000032b5
    4654:	0000ad67 	.word	0x0000ad67
    4658:	00003795 	.word	0x00003795

0000465c <atcab_read_config_zone>:
/** \brief given an SHA configuration zone buffer and dev type, read its parts from the device's config zone
 *  \param[out] config_data pointer to buffer containing a contiguous set of bytes to write to the config zone
 *  \returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_config_zone(uint8_t* config_data)
{
    465c:	b5b0      	push	{r4, r5, r7, lr}
    465e:	b086      	sub	sp, #24
    4660:	af02      	add	r7, sp, #8
    4662:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4664:	230f      	movs	r3, #15
    4666:	18fb      	adds	r3, r7, r3
    4668:	22e1      	movs	r2, #225	; 0xe1
    466a:	701a      	strb	r2, [r3, #0]

    do
    {

        // Verify the inputs
        if (config_data == NULL)
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	2b00      	cmp	r3, #0
    4670:	d104      	bne.n	467c <atcab_read_config_zone+0x20>
        {
            status = ATCA_BAD_PARAM;
    4672:	230f      	movs	r3, #15
    4674:	18fb      	adds	r3, r7, r3
    4676:	22e2      	movs	r2, #226	; 0xe2
    4678:	701a      	strb	r2, [r3, #0]
            break;
    467a:	e023      	b.n	46c4 <atcab_read_config_zone+0x68>
        }

        if (atgetifacecfg(_gIface)->devtype == ATSHA204A)
    467c:	4b15      	ldr	r3, [pc, #84]	; (46d4 <atcab_read_config_zone+0x78>)
    467e:	681b      	ldr	r3, [r3, #0]
    4680:	0018      	movs	r0, r3
    4682:	4b15      	ldr	r3, [pc, #84]	; (46d8 <atcab_read_config_zone+0x7c>)
    4684:	4798      	blx	r3
    4686:	0003      	movs	r3, r0
    4688:	785b      	ldrb	r3, [r3, #1]
    468a:	2b00      	cmp	r3, #0
    468c:	d10d      	bne.n	46aa <atcab_read_config_zone+0x4e>
            status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, 0x00, config_data, ATCA_SHA_CONFIG_SIZE);
    468e:	230f      	movs	r3, #15
    4690:	18fc      	adds	r4, r7, r3
    4692:	687a      	ldr	r2, [r7, #4]
    4694:	2358      	movs	r3, #88	; 0x58
    4696:	9300      	str	r3, [sp, #0]
    4698:	0013      	movs	r3, r2
    469a:	2200      	movs	r2, #0
    469c:	2100      	movs	r1, #0
    469e:	2000      	movs	r0, #0
    46a0:	4d0e      	ldr	r5, [pc, #56]	; (46dc <atcab_read_config_zone+0x80>)
    46a2:	47a8      	blx	r5
    46a4:	0003      	movs	r3, r0
    46a6:	7023      	strb	r3, [r4, #0]
    46a8:	e00c      	b.n	46c4 <atcab_read_config_zone+0x68>
        else
            status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, 0x00, config_data, ATCA_ECC_CONFIG_SIZE);
    46aa:	230f      	movs	r3, #15
    46ac:	18fc      	adds	r4, r7, r3
    46ae:	687a      	ldr	r2, [r7, #4]
    46b0:	2380      	movs	r3, #128	; 0x80
    46b2:	9300      	str	r3, [sp, #0]
    46b4:	0013      	movs	r3, r2
    46b6:	2200      	movs	r2, #0
    46b8:	2100      	movs	r1, #0
    46ba:	2000      	movs	r0, #0
    46bc:	4d07      	ldr	r5, [pc, #28]	; (46dc <atcab_read_config_zone+0x80>)
    46be:	47a8      	blx	r5
    46c0:	0003      	movs	r3, r0
    46c2:	7023      	strb	r3, [r4, #0]
            break;

    }
    while (0);

    return status;
    46c4:	230f      	movs	r3, #15
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	781b      	ldrb	r3, [r3, #0]
}
    46ca:	0018      	movs	r0, r3
    46cc:	46bd      	mov	sp, r7
    46ce:	b004      	add	sp, #16
    46d0:	bdb0      	pop	{r4, r5, r7, pc}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	200002b4 	.word	0x200002b4
    46d8:	000035a1 	.word	0x000035a1
    46dc:	00004fe1 	.word	0x00004fe1

000046e0 <atcab_write_config_zone>:
 *                          bytes for SHA devices and 128 bytes for ECC
 *                          devices.
 *  \returns ATCA_STATUS
 */
ATCA_STATUS atcab_write_config_zone(const uint8_t* config_data)
{
    46e0:	b5b0      	push	{r4, r5, r7, lr}
    46e2:	b086      	sub	sp, #24
    46e4:	af02      	add	r7, sp, #8
    46e6:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    46e8:	230f      	movs	r3, #15
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	22e1      	movs	r2, #225	; 0xe1
    46ee:	701a      	strb	r2, [r3, #0]
    size_t config_size = 0;
    46f0:	2300      	movs	r3, #0
    46f2:	60bb      	str	r3, [r7, #8]

    if (config_data == NULL)
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d101      	bne.n	46fe <atcab_write_config_zone+0x1e>
        return ATCA_BAD_PARAM;
    46fa:	23e2      	movs	r3, #226	; 0xe2
    46fc:	e04a      	b.n	4794 <atcab_write_config_zone+0xb4>

    do
    {
        // Get config zone size for the device
        status = atcab_get_zone_size(ATCA_ZONE_CONFIG, 0, &config_size);
    46fe:	230f      	movs	r3, #15
    4700:	18fc      	adds	r4, r7, r3
    4702:	2308      	movs	r3, #8
    4704:	18fb      	adds	r3, r7, r3
    4706:	001a      	movs	r2, r3
    4708:	2100      	movs	r1, #0
    470a:	2000      	movs	r0, #0
    470c:	4b23      	ldr	r3, [pc, #140]	; (479c <atcab_write_config_zone+0xbc>)
    470e:	4798      	blx	r3
    4710:	0003      	movs	r3, r0
    4712:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    4714:	230f      	movs	r3, #15
    4716:	18fb      	adds	r3, r7, r3
    4718:	781b      	ldrb	r3, [r3, #0]
    471a:	2b00      	cmp	r3, #0
    471c:	d132      	bne.n	4784 <atcab_write_config_zone+0xa4>
            break;

        // Write config zone excluding UserExtra and Selector
        status = atcab_write_bytes_zone(ATCA_ZONE_CONFIG, 0, 16, &config_data[16], config_size - 16);
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	3310      	adds	r3, #16
    4722:	001a      	movs	r2, r3
    4724:	68bb      	ldr	r3, [r7, #8]
    4726:	3b10      	subs	r3, #16
    4728:	210f      	movs	r1, #15
    472a:	187c      	adds	r4, r7, r1
    472c:	9300      	str	r3, [sp, #0]
    472e:	0013      	movs	r3, r2
    4730:	2210      	movs	r2, #16
    4732:	2100      	movs	r1, #0
    4734:	2000      	movs	r0, #0
    4736:	4d1a      	ldr	r5, [pc, #104]	; (47a0 <atcab_write_config_zone+0xc0>)
    4738:	47a8      	blx	r5
    473a:	0003      	movs	r3, r0
    473c:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    473e:	230f      	movs	r3, #15
    4740:	18fb      	adds	r3, r7, r3
    4742:	781b      	ldrb	r3, [r3, #0]
    4744:	2b00      	cmp	r3, #0
    4746:	d11f      	bne.n	4788 <atcab_write_config_zone+0xa8>
            break;

        // Write the UserExtra and Selector. This may fail if either value is already non-zero.
        status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, config_data[84]);
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	3354      	adds	r3, #84	; 0x54
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	b29b      	uxth	r3, r3
    4750:	220f      	movs	r2, #15
    4752:	18bc      	adds	r4, r7, r2
    4754:	0019      	movs	r1, r3
    4756:	2000      	movs	r0, #0
    4758:	4b12      	ldr	r3, [pc, #72]	; (47a4 <atcab_write_config_zone+0xc4>)
    475a:	4798      	blx	r3
    475c:	0003      	movs	r3, r0
    475e:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    4760:	230f      	movs	r3, #15
    4762:	18fb      	adds	r3, r7, r3
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	2b00      	cmp	r3, #0
    4768:	d110      	bne.n	478c <atcab_write_config_zone+0xac>
            break;
        status = atcab_updateextra(UPDATE_MODE_SELECTOR, config_data[85]);
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	3355      	adds	r3, #85	; 0x55
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	b29b      	uxth	r3, r3
    4772:	220f      	movs	r2, #15
    4774:	18bc      	adds	r4, r7, r2
    4776:	0019      	movs	r1, r3
    4778:	2001      	movs	r0, #1
    477a:	4b0a      	ldr	r3, [pc, #40]	; (47a4 <atcab_write_config_zone+0xc4>)
    477c:	4798      	blx	r3
    477e:	0003      	movs	r3, r0
    4780:	7023      	strb	r3, [r4, #0]
    4782:	e004      	b.n	478e <atcab_write_config_zone+0xae>
            break;
    4784:	46c0      	nop			; (mov r8, r8)
    4786:	e002      	b.n	478e <atcab_write_config_zone+0xae>
            break;
    4788:	46c0      	nop			; (mov r8, r8)
    478a:	e000      	b.n	478e <atcab_write_config_zone+0xae>
            break;
    478c:	46c0      	nop			; (mov r8, r8)
        if (status != ATCA_SUCCESS)
            break;
    }
    while (0);

    return status;
    478e:	230f      	movs	r3, #15
    4790:	18fb      	adds	r3, r7, r3
    4792:	781b      	ldrb	r3, [r3, #0]
}
    4794:	0018      	movs	r0, r3
    4796:	46bd      	mov	sp, r7
    4798:	b004      	add	sp, #16
    479a:	bdb0      	pop	{r4, r5, r7, pc}
    479c:	00004001 	.word	0x00004001
    47a0:	00004e05 	.word	0x00004e05
    47a4:	000051c9 	.word	0x000051c9

000047a8 <atcab_lock>:
 *                            slot locks or when mode bit 7 is set.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock(uint8_t mode, uint16_t summary_crc)
{
    47a8:	b590      	push	{r4, r7, lr}
    47aa:	b0a7      	sub	sp, #156	; 0x9c
    47ac:	af00      	add	r7, sp, #0
    47ae:	0002      	movs	r2, r0
    47b0:	1dfb      	adds	r3, r7, #7
    47b2:	701a      	strb	r2, [r3, #0]
    47b4:	1d3b      	adds	r3, r7, #4
    47b6:	1c0a      	adds	r2, r1, #0
    47b8:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    47ba:	2397      	movs	r3, #151	; 0x97
    47bc:	18fb      	adds	r3, r7, r3
    47be:	22e1      	movs	r2, #225	; 0xe1
    47c0:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    47c2:	2394      	movs	r3, #148	; 0x94
    47c4:	18fb      	adds	r3, r7, r3
    47c6:	2200      	movs	r2, #0
    47c8:	801a      	strh	r2, [r3, #0]

    // build command for lock zone and send
    memset(&packet, 0, sizeof(packet));
    47ca:	2308      	movs	r3, #8
    47cc:	18fb      	adds	r3, r7, r3
    47ce:	228c      	movs	r2, #140	; 0x8c
    47d0:	2100      	movs	r1, #0
    47d2:	0018      	movs	r0, r3
    47d4:	4b48      	ldr	r3, [pc, #288]	; (48f8 <atcab_lock+0x150>)
    47d6:	4798      	blx	r3
    packet.param1 = mode;
    47d8:	2308      	movs	r3, #8
    47da:	18fb      	adds	r3, r7, r3
    47dc:	1dfa      	adds	r2, r7, #7
    47de:	7812      	ldrb	r2, [r2, #0]
    47e0:	70da      	strb	r2, [r3, #3]
    packet.param2 = summary_crc;
    47e2:	2308      	movs	r3, #8
    47e4:	18fb      	adds	r3, r7, r3
    47e6:	1d3a      	adds	r2, r7, #4
    47e8:	8812      	ldrh	r2, [r2, #0]
    47ea:	809a      	strh	r2, [r3, #4]

    do
    {
        if ( (status = atLock(_gCommandObj, &packet)) != ATCA_SUCCESS)
    47ec:	4b43      	ldr	r3, [pc, #268]	; (48fc <atcab_lock+0x154>)
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	2297      	movs	r2, #151	; 0x97
    47f2:	18bc      	adds	r4, r7, r2
    47f4:	2208      	movs	r2, #8
    47f6:	18ba      	adds	r2, r7, r2
    47f8:	0011      	movs	r1, r2
    47fa:	0018      	movs	r0, r3
    47fc:	4b40      	ldr	r3, [pc, #256]	; (4900 <atcab_lock+0x158>)
    47fe:	4798      	blx	r3
    4800:	0003      	movs	r3, r0
    4802:	7023      	strb	r3, [r4, #0]
    4804:	2397      	movs	r3, #151	; 0x97
    4806:	18fb      	adds	r3, r7, r3
    4808:	781b      	ldrb	r3, [r3, #0]
    480a:	2b00      	cmp	r3, #0
    480c:	d164      	bne.n	48d8 <atcab_lock+0x130>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_LOCK);
    480e:	4b3b      	ldr	r3, [pc, #236]	; (48fc <atcab_lock+0x154>)
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	2294      	movs	r2, #148	; 0x94
    4814:	18bc      	adds	r4, r7, r2
    4816:	2109      	movs	r1, #9
    4818:	0018      	movs	r0, r3
    481a:	4b3a      	ldr	r3, [pc, #232]	; (4904 <atcab_lock+0x15c>)
    481c:	4798      	blx	r3
    481e:	0003      	movs	r3, r0
    4820:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    4822:	2397      	movs	r3, #151	; 0x97
    4824:	18fc      	adds	r4, r7, r3
    4826:	4b38      	ldr	r3, [pc, #224]	; (4908 <atcab_lock+0x160>)
    4828:	4798      	blx	r3
    482a:	0003      	movs	r3, r0
    482c:	7023      	strb	r3, [r4, #0]
    482e:	2397      	movs	r3, #151	; 0x97
    4830:	18fb      	adds	r3, r7, r3
    4832:	781b      	ldrb	r3, [r3, #0]
    4834:	2b00      	cmp	r3, #0
    4836:	d151      	bne.n	48dc <atcab_lock+0x134>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    4838:	4b34      	ldr	r3, [pc, #208]	; (490c <atcab_lock+0x164>)
    483a:	6818      	ldr	r0, [r3, #0]
    483c:	2308      	movs	r3, #8
    483e:	18fb      	adds	r3, r7, r3
    4840:	785b      	ldrb	r3, [r3, #1]
    4842:	001a      	movs	r2, r3
    4844:	2397      	movs	r3, #151	; 0x97
    4846:	18fc      	adds	r4, r7, r3
    4848:	2308      	movs	r3, #8
    484a:	18fb      	adds	r3, r7, r3
    484c:	0019      	movs	r1, r3
    484e:	4b30      	ldr	r3, [pc, #192]	; (4910 <atcab_lock+0x168>)
    4850:	4798      	blx	r3
    4852:	0003      	movs	r3, r0
    4854:	7023      	strb	r3, [r4, #0]
    4856:	2397      	movs	r3, #151	; 0x97
    4858:	18fb      	adds	r3, r7, r3
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	2b00      	cmp	r3, #0
    485e:	d13f      	bne.n	48e0 <atcab_lock+0x138>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    4860:	2394      	movs	r3, #148	; 0x94
    4862:	18fb      	adds	r3, r7, r3
    4864:	881b      	ldrh	r3, [r3, #0]
    4866:	0018      	movs	r0, r3
    4868:	4b2a      	ldr	r3, [pc, #168]	; (4914 <atcab_lock+0x16c>)
    486a:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    486c:	4b27      	ldr	r3, [pc, #156]	; (490c <atcab_lock+0x164>)
    486e:	6818      	ldr	r0, [r3, #0]
    4870:	2397      	movs	r3, #151	; 0x97
    4872:	18fc      	adds	r4, r7, r3
    4874:	2308      	movs	r3, #8
    4876:	18fb      	adds	r3, r7, r3
    4878:	338a      	adds	r3, #138	; 0x8a
    487a:	001a      	movs	r2, r3
    487c:	2308      	movs	r3, #8
    487e:	18fb      	adds	r3, r7, r3
    4880:	3306      	adds	r3, #6
    4882:	0019      	movs	r1, r3
    4884:	4b24      	ldr	r3, [pc, #144]	; (4918 <atcab_lock+0x170>)
    4886:	4798      	blx	r3
    4888:	0003      	movs	r3, r0
    488a:	7023      	strb	r3, [r4, #0]
    488c:	2397      	movs	r3, #151	; 0x97
    488e:	18fb      	adds	r3, r7, r3
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	2b00      	cmp	r3, #0
    4894:	d126      	bne.n	48e4 <atcab_lock+0x13c>
            break;

        // Check response size
        if (packet.rxsize < 4)
    4896:	2308      	movs	r3, #8
    4898:	18fb      	adds	r3, r7, r3
    489a:	228a      	movs	r2, #138	; 0x8a
    489c:	5a9b      	ldrh	r3, [r3, r2]
    489e:	2b03      	cmp	r3, #3
    48a0:	d80f      	bhi.n	48c2 <atcab_lock+0x11a>
        {
            if (packet.rxsize > 0)
    48a2:	2308      	movs	r3, #8
    48a4:	18fb      	adds	r3, r7, r3
    48a6:	228a      	movs	r2, #138	; 0x8a
    48a8:	5a9b      	ldrh	r3, [r3, r2]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d004      	beq.n	48b8 <atcab_lock+0x110>
                status = ATCA_RX_FAIL;
    48ae:	2397      	movs	r3, #151	; 0x97
    48b0:	18fb      	adds	r3, r7, r3
    48b2:	22e6      	movs	r2, #230	; 0xe6
    48b4:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    48b6:	e016      	b.n	48e6 <atcab_lock+0x13e>
                status = ATCA_RX_NO_RESPONSE;
    48b8:	2397      	movs	r3, #151	; 0x97
    48ba:	18fb      	adds	r3, r7, r3
    48bc:	22e7      	movs	r2, #231	; 0xe7
    48be:	701a      	strb	r2, [r3, #0]
            break;
    48c0:	e011      	b.n	48e6 <atcab_lock+0x13e>
        }

        //check the response for error
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    48c2:	2397      	movs	r3, #151	; 0x97
    48c4:	18fc      	adds	r4, r7, r3
    48c6:	2308      	movs	r3, #8
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	3306      	adds	r3, #6
    48cc:	0018      	movs	r0, r3
    48ce:	4b13      	ldr	r3, [pc, #76]	; (491c <atcab_lock+0x174>)
    48d0:	4798      	blx	r3
    48d2:	0003      	movs	r3, r0
    48d4:	7023      	strb	r3, [r4, #0]
    48d6:	e006      	b.n	48e6 <atcab_lock+0x13e>
            break;
    48d8:	46c0      	nop			; (mov r8, r8)
    48da:	e004      	b.n	48e6 <atcab_lock+0x13e>
            break;
    48dc:	46c0      	nop			; (mov r8, r8)
    48de:	e002      	b.n	48e6 <atcab_lock+0x13e>
            break;
    48e0:	46c0      	nop			; (mov r8, r8)
    48e2:	e000      	b.n	48e6 <atcab_lock+0x13e>
            break;
    48e4:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    _atcab_exit();
    48e6:	4b0e      	ldr	r3, [pc, #56]	; (4920 <atcab_lock+0x178>)
    48e8:	4798      	blx	r3
    return status;
    48ea:	2397      	movs	r3, #151	; 0x97
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	781b      	ldrb	r3, [r3, #0]
}
    48f0:	0018      	movs	r0, r3
    48f2:	46bd      	mov	sp, r7
    48f4:	b027      	add	sp, #156	; 0x9c
    48f6:	bd90      	pop	{r4, r7, pc}
    48f8:	0000ad79 	.word	0x0000ad79
    48fc:	200002b0 	.word	0x200002b0
    4900:	00002e95 	.word	0x00002e95
    4904:	000030f5 	.word	0x000030f5
    4908:	00003705 	.word	0x00003705
    490c:	200002b4 	.word	0x200002b4
    4910:	000034d9 	.word	0x000034d9
    4914:	000066d1 	.word	0x000066d1
    4918:	000034fb 	.word	0x000034fb
    491c:	000032b5 	.word	0x000032b5
    4920:	00003795 	.word	0x00003795

00004924 <atcab_lock_config_zone>:
/** \brief Unconditionally (no CRC required) lock the config zone.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock_config_zone(void)
{
    4924:	b580      	push	{r7, lr}
    4926:	af00      	add	r7, sp, #0
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_CONFIG, 0);
    4928:	2100      	movs	r1, #0
    492a:	2080      	movs	r0, #128	; 0x80
    492c:	4b02      	ldr	r3, [pc, #8]	; (4938 <atcab_lock_config_zone+0x14>)
    492e:	4798      	blx	r3
    4930:	0003      	movs	r3, r0
}
    4932:	0018      	movs	r0, r3
    4934:	46bd      	mov	sp, r7
    4936:	bd80      	pop	{r7, pc}
    4938:	000047a9 	.word	0x000047a9

0000493c <atcab_lock_data_zone>:
 *	ConfigZone must be locked and DataZone must be unlocked for the zone to be successfully locked.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock_data_zone(void)
{
    493c:	b580      	push	{r7, lr}
    493e:	af00      	add	r7, sp, #0
    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_DATA, 0);
    4940:	2100      	movs	r1, #0
    4942:	2081      	movs	r0, #129	; 0x81
    4944:	4b02      	ldr	r3, [pc, #8]	; (4950 <atcab_lock_data_zone+0x14>)
    4946:	4798      	blx	r3
    4948:	0003      	movs	r3, r0
}
    494a:	0018      	movs	r0, r3
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}
    4950:	000047a9 	.word	0x000047a9

00004954 <atcab_sign_base>:
 *                          curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    4954:	b590      	push	{r4, r7, lr}
    4956:	b0a7      	sub	sp, #156	; 0x9c
    4958:	af00      	add	r7, sp, #0
    495a:	603a      	str	r2, [r7, #0]
    495c:	1dfb      	adds	r3, r7, #7
    495e:	1c02      	adds	r2, r0, #0
    4960:	701a      	strb	r2, [r3, #0]
    4962:	1d3b      	adds	r3, r7, #4
    4964:	1c0a      	adds	r2, r1, #0
    4966:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4968:	2397      	movs	r3, #151	; 0x97
    496a:	18fb      	adds	r3, r7, r3
    496c:	22e1      	movs	r2, #225	; 0xe1
    496e:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    4970:	2394      	movs	r3, #148	; 0x94
    4972:	18fb      	adds	r3, r7, r3
    4974:	2200      	movs	r2, #0
    4976:	801a      	strh	r2, [r3, #0]

    if (signature == NULL)
    4978:	683b      	ldr	r3, [r7, #0]
    497a:	2b00      	cmp	r3, #0
    497c:	d101      	bne.n	4982 <atcab_sign_base+0x2e>
        return ATCA_BAD_PARAM;
    497e:	23e2      	movs	r3, #226	; 0xe2
    4980:	e0a8      	b.n	4ad4 <atcab_sign_base+0x180>

    if (!_gDevice)
    4982:	4b56      	ldr	r3, [pc, #344]	; (4adc <atcab_sign_base+0x188>)
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d101      	bne.n	498e <atcab_sign_base+0x3a>
        return ATCA_GEN_FAIL;
    498a:	23e1      	movs	r3, #225	; 0xe1
    498c:	e0a2      	b.n	4ad4 <atcab_sign_base+0x180>

    do
    {
        // Build sign command
        packet.param1 = mode;
    498e:	2308      	movs	r3, #8
    4990:	18fb      	adds	r3, r7, r3
    4992:	1dfa      	adds	r2, r7, #7
    4994:	7812      	ldrb	r2, [r2, #0]
    4996:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    4998:	2308      	movs	r3, #8
    499a:	18fb      	adds	r3, r7, r3
    499c:	1d3a      	adds	r2, r7, #4
    499e:	8812      	ldrh	r2, [r2, #0]
    49a0:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(_gCommandObj, &packet)) != ATCA_SUCCESS)
    49a2:	4b4f      	ldr	r3, [pc, #316]	; (4ae0 <atcab_sign_base+0x18c>)
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	2297      	movs	r2, #151	; 0x97
    49a8:	18bc      	adds	r4, r7, r2
    49aa:	2208      	movs	r2, #8
    49ac:	18ba      	adds	r2, r7, r2
    49ae:	0011      	movs	r1, r2
    49b0:	0018      	movs	r0, r3
    49b2:	4b4c      	ldr	r3, [pc, #304]	; (4ae4 <atcab_sign_base+0x190>)
    49b4:	4798      	blx	r3
    49b6:	0003      	movs	r3, r0
    49b8:	7023      	strb	r3, [r4, #0]
    49ba:	2397      	movs	r3, #151	; 0x97
    49bc:	18fb      	adds	r3, r7, r3
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	2b00      	cmp	r3, #0
    49c2:	d000      	beq.n	49c6 <atcab_sign_base+0x72>
    49c4:	e078      	b.n	4ab8 <atcab_sign_base+0x164>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_SIGN);
    49c6:	4b46      	ldr	r3, [pc, #280]	; (4ae0 <atcab_sign_base+0x18c>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	2294      	movs	r2, #148	; 0x94
    49cc:	18bc      	adds	r4, r7, r2
    49ce:	2111      	movs	r1, #17
    49d0:	0018      	movs	r0, r3
    49d2:	4b45      	ldr	r3, [pc, #276]	; (4ae8 <atcab_sign_base+0x194>)
    49d4:	4798      	blx	r3
    49d6:	0003      	movs	r3, r0
    49d8:	8023      	strh	r3, [r4, #0]

        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    49da:	4b44      	ldr	r3, [pc, #272]	; (4aec <atcab_sign_base+0x198>)
    49dc:	4798      	blx	r3
    49de:	0003      	movs	r3, r0
    49e0:	001a      	movs	r2, r3
    49e2:	2397      	movs	r3, #151	; 0x97
    49e4:	18fb      	adds	r3, r7, r3
    49e6:	781b      	ldrb	r3, [r3, #0]
    49e8:	4293      	cmp	r3, r2
    49ea:	d167      	bne.n	4abc <atcab_sign_base+0x168>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    49ec:	4b40      	ldr	r3, [pc, #256]	; (4af0 <atcab_sign_base+0x19c>)
    49ee:	6818      	ldr	r0, [r3, #0]
    49f0:	2308      	movs	r3, #8
    49f2:	18fb      	adds	r3, r7, r3
    49f4:	785b      	ldrb	r3, [r3, #1]
    49f6:	001a      	movs	r2, r3
    49f8:	2397      	movs	r3, #151	; 0x97
    49fa:	18fc      	adds	r4, r7, r3
    49fc:	2308      	movs	r3, #8
    49fe:	18fb      	adds	r3, r7, r3
    4a00:	0019      	movs	r1, r3
    4a02:	4b3c      	ldr	r3, [pc, #240]	; (4af4 <atcab_sign_base+0x1a0>)
    4a04:	4798      	blx	r3
    4a06:	0003      	movs	r3, r0
    4a08:	7023      	strb	r3, [r4, #0]
    4a0a:	2397      	movs	r3, #151	; 0x97
    4a0c:	18fb      	adds	r3, r7, r3
    4a0e:	781b      	ldrb	r3, [r3, #0]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d155      	bne.n	4ac0 <atcab_sign_base+0x16c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    4a14:	2394      	movs	r3, #148	; 0x94
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	881b      	ldrh	r3, [r3, #0]
    4a1a:	0018      	movs	r0, r3
    4a1c:	4b36      	ldr	r3, [pc, #216]	; (4af8 <atcab_sign_base+0x1a4>)
    4a1e:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    4a20:	4b33      	ldr	r3, [pc, #204]	; (4af0 <atcab_sign_base+0x19c>)
    4a22:	6818      	ldr	r0, [r3, #0]
    4a24:	2397      	movs	r3, #151	; 0x97
    4a26:	18fc      	adds	r4, r7, r3
    4a28:	2308      	movs	r3, #8
    4a2a:	18fb      	adds	r3, r7, r3
    4a2c:	338a      	adds	r3, #138	; 0x8a
    4a2e:	001a      	movs	r2, r3
    4a30:	2308      	movs	r3, #8
    4a32:	18fb      	adds	r3, r7, r3
    4a34:	3306      	adds	r3, #6
    4a36:	0019      	movs	r1, r3
    4a38:	4b30      	ldr	r3, [pc, #192]	; (4afc <atcab_sign_base+0x1a8>)
    4a3a:	4798      	blx	r3
    4a3c:	0003      	movs	r3, r0
    4a3e:	7023      	strb	r3, [r4, #0]
    4a40:	2397      	movs	r3, #151	; 0x97
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d13c      	bne.n	4ac4 <atcab_sign_base+0x170>
            break;

        // Check response size
        if (packet.rxsize < 4)
    4a4a:	2308      	movs	r3, #8
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	228a      	movs	r2, #138	; 0x8a
    4a50:	5a9b      	ldrh	r3, [r3, r2]
    4a52:	2b03      	cmp	r3, #3
    4a54:	d80f      	bhi.n	4a76 <atcab_sign_base+0x122>
        {
            if (packet.rxsize > 0)
    4a56:	2308      	movs	r3, #8
    4a58:	18fb      	adds	r3, r7, r3
    4a5a:	228a      	movs	r2, #138	; 0x8a
    4a5c:	5a9b      	ldrh	r3, [r3, r2]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d004      	beq.n	4a6c <atcab_sign_base+0x118>
                status = ATCA_RX_FAIL;
    4a62:	2397      	movs	r3, #151	; 0x97
    4a64:	18fb      	adds	r3, r7, r3
    4a66:	22e6      	movs	r2, #230	; 0xe6
    4a68:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    4a6a:	e02e      	b.n	4aca <atcab_sign_base+0x176>
                status = ATCA_RX_NO_RESPONSE;
    4a6c:	2397      	movs	r3, #151	; 0x97
    4a6e:	18fb      	adds	r3, r7, r3
    4a70:	22e7      	movs	r2, #231	; 0xe7
    4a72:	701a      	strb	r2, [r3, #0]
            break;
    4a74:	e029      	b.n	4aca <atcab_sign_base+0x176>
        }

        // check for response
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    4a76:	2397      	movs	r3, #151	; 0x97
    4a78:	18fc      	adds	r4, r7, r3
    4a7a:	2308      	movs	r3, #8
    4a7c:	18fb      	adds	r3, r7, r3
    4a7e:	3306      	adds	r3, #6
    4a80:	0018      	movs	r0, r3
    4a82:	4b1f      	ldr	r3, [pc, #124]	; (4b00 <atcab_sign_base+0x1ac>)
    4a84:	4798      	blx	r3
    4a86:	0003      	movs	r3, r0
    4a88:	7023      	strb	r3, [r4, #0]
    4a8a:	2397      	movs	r3, #151	; 0x97
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	781b      	ldrb	r3, [r3, #0]
    4a90:	2b00      	cmp	r3, #0
    4a92:	d119      	bne.n	4ac8 <atcab_sign_base+0x174>
            break;

        if (packet.data[ATCA_COUNT_IDX] > 4)
    4a94:	2308      	movs	r3, #8
    4a96:	18fb      	adds	r3, r7, r3
    4a98:	799b      	ldrb	r3, [r3, #6]
    4a9a:	2b04      	cmp	r3, #4
    4a9c:	d915      	bls.n	4aca <atcab_sign_base+0x176>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    4a9e:	2308      	movs	r3, #8
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	799b      	ldrb	r3, [r3, #6]
    4aa4:	3b03      	subs	r3, #3
    4aa6:	001a      	movs	r2, r3
    4aa8:	2308      	movs	r3, #8
    4aaa:	18fb      	adds	r3, r7, r3
    4aac:	1dd9      	adds	r1, r3, #7
    4aae:	683b      	ldr	r3, [r7, #0]
    4ab0:	0018      	movs	r0, r3
    4ab2:	4b14      	ldr	r3, [pc, #80]	; (4b04 <atcab_sign_base+0x1b0>)
    4ab4:	4798      	blx	r3
    4ab6:	e008      	b.n	4aca <atcab_sign_base+0x176>
            break;
    4ab8:	46c0      	nop			; (mov r8, r8)
    4aba:	e006      	b.n	4aca <atcab_sign_base+0x176>
            break;
    4abc:	46c0      	nop			; (mov r8, r8)
    4abe:	e004      	b.n	4aca <atcab_sign_base+0x176>
            break;
    4ac0:	46c0      	nop			; (mov r8, r8)
    4ac2:	e002      	b.n	4aca <atcab_sign_base+0x176>
            break;
    4ac4:	46c0      	nop			; (mov r8, r8)
    4ac6:	e000      	b.n	4aca <atcab_sign_base+0x176>
            break;
    4ac8:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    4aca:	4b0f      	ldr	r3, [pc, #60]	; (4b08 <atcab_sign_base+0x1b4>)
    4acc:	4798      	blx	r3
    return status;
    4ace:	2397      	movs	r3, #151	; 0x97
    4ad0:	18fb      	adds	r3, r7, r3
    4ad2:	781b      	ldrb	r3, [r3, #0]
}
    4ad4:	0018      	movs	r0, r3
    4ad6:	46bd      	mov	sp, r7
    4ad8:	b027      	add	sp, #156	; 0x9c
    4ada:	bd90      	pop	{r4, r7, pc}
    4adc:	200002ac 	.word	0x200002ac
    4ae0:	200002b0 	.word	0x200002b0
    4ae4:	00002fad 	.word	0x00002fad
    4ae8:	000030f5 	.word	0x000030f5
    4aec:	00003705 	.word	0x00003705
    4af0:	200002b4 	.word	0x200002b4
    4af4:	000034d9 	.word	0x000034d9
    4af8:	000066d1 	.word	0x000066d1
    4afc:	000034fb 	.word	0x000034fb
    4b00:	000032b5 	.word	0x000032b5
    4b04:	0000ad67 	.word	0x0000ad67
    4b08:	00003795 	.word	0x00003795

00004b0c <atcab_sign>:
 *                           curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    4b0c:	b590      	push	{r4, r7, lr}
    4b0e:	b087      	sub	sp, #28
    4b10:	af00      	add	r7, sp, #0
    4b12:	60b9      	str	r1, [r7, #8]
    4b14:	607a      	str	r2, [r7, #4]
    4b16:	230e      	movs	r3, #14
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	1c02      	adds	r2, r0, #0
    4b1c:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4b1e:	2317      	movs	r3, #23
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	22e1      	movs	r2, #225	; 0xe1
    4b24:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ( (status = atcab_random(NULL)) != ATCA_SUCCESS)
    4b26:	2317      	movs	r3, #23
    4b28:	18fc      	adds	r4, r7, r3
    4b2a:	2000      	movs	r0, #0
    4b2c:	4b16      	ldr	r3, [pc, #88]	; (4b88 <atcab_sign+0x7c>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
    4b32:	7023      	strb	r3, [r4, #0]
    4b34:	2317      	movs	r3, #23
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	781b      	ldrb	r3, [r3, #0]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d119      	bne.n	4b72 <atcab_sign+0x66>
            break;
        // Load message into TempKey
        if ( (status = atcab_challenge(msg)) != ATCA_SUCCESS)
    4b3e:	2317      	movs	r3, #23
    4b40:	18fc      	adds	r4, r7, r3
    4b42:	68bb      	ldr	r3, [r7, #8]
    4b44:	0018      	movs	r0, r3
    4b46:	4b11      	ldr	r3, [pc, #68]	; (4b8c <atcab_sign+0x80>)
    4b48:	4798      	blx	r3
    4b4a:	0003      	movs	r3, r0
    4b4c:	7023      	strb	r3, [r4, #0]
    4b4e:	2317      	movs	r3, #23
    4b50:	18fb      	adds	r3, r7, r3
    4b52:	781b      	ldrb	r3, [r3, #0]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d10e      	bne.n	4b76 <atcab_sign+0x6a>
            break;
        // Sign the message
        if ( (status = atcab_sign_base(SIGN_MODE_EXTERNAL, key_id, signature)) != ATCA_SUCCESS)
    4b58:	2317      	movs	r3, #23
    4b5a:	18fc      	adds	r4, r7, r3
    4b5c:	687a      	ldr	r2, [r7, #4]
    4b5e:	230e      	movs	r3, #14
    4b60:	18fb      	adds	r3, r7, r3
    4b62:	881b      	ldrh	r3, [r3, #0]
    4b64:	0019      	movs	r1, r3
    4b66:	2080      	movs	r0, #128	; 0x80
    4b68:	4b09      	ldr	r3, [pc, #36]	; (4b90 <atcab_sign+0x84>)
    4b6a:	4798      	blx	r3
    4b6c:	0003      	movs	r3, r0
    4b6e:	7023      	strb	r3, [r4, #0]
    4b70:	e002      	b.n	4b78 <atcab_sign+0x6c>
            break;
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	e000      	b.n	4b78 <atcab_sign+0x6c>
            break;
    4b76:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    return status;
    4b78:	2317      	movs	r3, #23
    4b7a:	18fb      	adds	r3, r7, r3
    4b7c:	781b      	ldrb	r3, [r3, #0]
}
    4b7e:	0018      	movs	r0, r3
    4b80:	46bd      	mov	sp, r7
    4b82:	b007      	add	sp, #28
    4b84:	bd90      	pop	{r4, r7, pc}
    4b86:	46c0      	nop			; (mov r8, r8)
    4b88:	0000394d 	.word	0x0000394d
    4b8c:	00003d11 	.word	0x00003d11
    4b90:	00004955 	.word	0x00004955

00004b94 <atcab_get_pubkey>:
 *  \param[in] key_id ID of the private key slot
 *  \param[out] public_key - pointer to space receiving the contents of the public key that was generated
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
    4b94:	b590      	push	{r4, r7, lr}
    4b96:	b083      	sub	sp, #12
    4b98:	af00      	add	r7, sp, #0
    4b9a:	0002      	movs	r2, r0
    4b9c:	6039      	str	r1, [r7, #0]
    4b9e:	1dbb      	adds	r3, r7, #6
    4ba0:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
    4ba2:	683a      	ldr	r2, [r7, #0]
    4ba4:	1dbb      	adds	r3, r7, #6
    4ba6:	8819      	ldrh	r1, [r3, #0]
    4ba8:	0013      	movs	r3, r2
    4baa:	2200      	movs	r2, #0
    4bac:	2000      	movs	r0, #0
    4bae:	4c03      	ldr	r4, [pc, #12]	; (4bbc <atcab_get_pubkey+0x28>)
    4bb0:	47a0      	blx	r4
    4bb2:	0003      	movs	r3, r0
}
    4bb4:	0018      	movs	r0, r3
    4bb6:	46bd      	mov	sp, r7
    4bb8:	b003      	add	sp, #12
    4bba:	bd90      	pop	{r4, r7, pc}
    4bbc:	00003b0d 	.word	0x00003b0d

00004bc0 <atcab_read_pubkey>:
 *  \param[in] slot8toF - slot number to read, expected value is 0x8 through 0xF
 *  \param[out] pubkey - space to receive read pubkey
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_pubkey(uint16_t slot8toF, uint8_t *pubkey)
{
    4bc0:	b5b0      	push	{r4, r5, r7, lr}
    4bc2:	b08e      	sub	sp, #56	; 0x38
    4bc4:	af02      	add	r7, sp, #8
    4bc6:	0002      	movs	r2, r0
    4bc8:	6039      	str	r1, [r7, #0]
    4bca:	1dbb      	adds	r3, r7, #6
    4bcc:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    4bce:	232f      	movs	r3, #47	; 0x2f
    4bd0:	18fb      	adds	r3, r7, r3
    4bd2:	22e1      	movs	r2, #225	; 0xe1
    4bd4:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];
    uint8_t block = 0;
    4bd6:	232e      	movs	r3, #46	; 0x2e
    4bd8:	18fb      	adds	r3, r7, r3
    4bda:	2200      	movs	r2, #0
    4bdc:	701a      	strb	r2, [r3, #0]
    uint8_t offset = 0;
    4bde:	232d      	movs	r3, #45	; 0x2d
    4be0:	18fb      	adds	r3, r7, r3
    4be2:	2200      	movs	r2, #0
    4be4:	701a      	strb	r2, [r3, #0]
    uint8_t cpyIndex = 0;
    4be6:	232c      	movs	r3, #44	; 0x2c
    4be8:	18fb      	adds	r3, r7, r3
    4bea:	2200      	movs	r2, #0
    4bec:	701a      	strb	r2, [r3, #0]
    uint8_t cpySize = 0;
    4bee:	232b      	movs	r3, #43	; 0x2b
    4bf0:	18fb      	adds	r3, r7, r3
    4bf2:	2200      	movs	r2, #0
    4bf4:	701a      	strb	r2, [r3, #0]
    uint8_t readIndex = 0;
    4bf6:	232a      	movs	r3, #42	; 0x2a
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	2200      	movs	r2, #0
    4bfc:	701a      	strb	r2, [r3, #0]

    // Check the pointers
    if (pubkey == NULL)
    4bfe:	683b      	ldr	r3, [r7, #0]
    4c00:	2b00      	cmp	r3, #0
    4c02:	d101      	bne.n	4c08 <atcab_read_pubkey+0x48>
        return ATCA_BAD_PARAM;
    4c04:	23e2      	movs	r3, #226	; 0xe2
    4c06:	e0f4      	b.n	4df2 <atcab_read_pubkey+0x232>
    // Check the value of the slot
    if (slot8toF < 8 || slot8toF > 0xF)
    4c08:	1dbb      	adds	r3, r7, #6
    4c0a:	881b      	ldrh	r3, [r3, #0]
    4c0c:	2b07      	cmp	r3, #7
    4c0e:	d903      	bls.n	4c18 <atcab_read_pubkey+0x58>
    4c10:	1dbb      	adds	r3, r7, #6
    4c12:	881b      	ldrh	r3, [r3, #0]
    4c14:	2b0f      	cmp	r3, #15
    4c16:	d901      	bls.n	4c1c <atcab_read_pubkey+0x5c>
        return ATCA_BAD_PARAM;
    4c18:	23e2      	movs	r3, #226	; 0xe2
    4c1a:	e0ea      	b.n	4df2 <atcab_read_pubkey+0x232>
        // The 64 byte P256 public key gets written to a 72 byte slot in the following pattern
        // | Block 1                     | Block 2                                      | Block 3       |
        // | Pad: 4 Bytes | PubKey[0:27] | PubKey[28:31] | Pad: 4 Bytes | PubKey[32:55] | PubKey[56:63] |

        // Read the block
        block = 0;
    4c1c:	232e      	movs	r3, #46	; 0x2e
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	2200      	movs	r2, #0
    4c22:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    4c24:	232f      	movs	r3, #47	; 0x2f
    4c26:	18fc      	adds	r4, r7, r3
    4c28:	232d      	movs	r3, #45	; 0x2d
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	7818      	ldrb	r0, [r3, #0]
    4c2e:	232e      	movs	r3, #46	; 0x2e
    4c30:	18fb      	adds	r3, r7, r3
    4c32:	781a      	ldrb	r2, [r3, #0]
    4c34:	1dbb      	adds	r3, r7, #6
    4c36:	8819      	ldrh	r1, [r3, #0]
    4c38:	2320      	movs	r3, #32
    4c3a:	9301      	str	r3, [sp, #4]
    4c3c:	2308      	movs	r3, #8
    4c3e:	18fb      	adds	r3, r7, r3
    4c40:	9300      	str	r3, [sp, #0]
    4c42:	0003      	movs	r3, r0
    4c44:	2002      	movs	r0, #2
    4c46:	4d6d      	ldr	r5, [pc, #436]	; (4dfc <atcab_read_pubkey+0x23c>)
    4c48:	47a8      	blx	r5
    4c4a:	0003      	movs	r3, r0
    4c4c:	7023      	strb	r3, [r4, #0]
    4c4e:	232f      	movs	r3, #47	; 0x2f
    4c50:	18fb      	adds	r3, r7, r3
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	2b00      	cmp	r3, #0
    4c56:	d000      	beq.n	4c5a <atcab_read_pubkey+0x9a>
    4c58:	e0c3      	b.n	4de2 <atcab_read_pubkey+0x222>
            break;

        // Copy.  Account for 4 byte pad
        cpySize = ATCA_BLOCK_SIZE - ATCA_PUB_KEY_PAD;
    4c5a:	232b      	movs	r3, #43	; 0x2b
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	221c      	movs	r2, #28
    4c60:	701a      	strb	r2, [r3, #0]
        readIndex = ATCA_PUB_KEY_PAD;
    4c62:	232a      	movs	r3, #42	; 0x2a
    4c64:	18fb      	adds	r3, r7, r3
    4c66:	2204      	movs	r2, #4
    4c68:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4c6a:	232c      	movs	r3, #44	; 0x2c
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	781b      	ldrb	r3, [r3, #0]
    4c70:	683a      	ldr	r2, [r7, #0]
    4c72:	18d0      	adds	r0, r2, r3
    4c74:	232a      	movs	r3, #42	; 0x2a
    4c76:	18fb      	adds	r3, r7, r3
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	2208      	movs	r2, #8
    4c7c:	18ba      	adds	r2, r7, r2
    4c7e:	18d1      	adds	r1, r2, r3
    4c80:	232b      	movs	r3, #43	; 0x2b
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	781b      	ldrb	r3, [r3, #0]
    4c86:	001a      	movs	r2, r3
    4c88:	4b5d      	ldr	r3, [pc, #372]	; (4e00 <atcab_read_pubkey+0x240>)
    4c8a:	4798      	blx	r3
        cpyIndex += cpySize;
    4c8c:	232c      	movs	r3, #44	; 0x2c
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	222c      	movs	r2, #44	; 0x2c
    4c92:	18b9      	adds	r1, r7, r2
    4c94:	222b      	movs	r2, #43	; 0x2b
    4c96:	18ba      	adds	r2, r7, r2
    4c98:	7809      	ldrb	r1, [r1, #0]
    4c9a:	7812      	ldrb	r2, [r2, #0]
    4c9c:	188a      	adds	r2, r1, r2
    4c9e:	701a      	strb	r2, [r3, #0]

        // Read the next block
        block = 1;
    4ca0:	232e      	movs	r3, #46	; 0x2e
    4ca2:	18fb      	adds	r3, r7, r3
    4ca4:	2201      	movs	r2, #1
    4ca6:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    4ca8:	232f      	movs	r3, #47	; 0x2f
    4caa:	18fc      	adds	r4, r7, r3
    4cac:	232d      	movs	r3, #45	; 0x2d
    4cae:	18fb      	adds	r3, r7, r3
    4cb0:	7818      	ldrb	r0, [r3, #0]
    4cb2:	232e      	movs	r3, #46	; 0x2e
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	781a      	ldrb	r2, [r3, #0]
    4cb8:	1dbb      	adds	r3, r7, #6
    4cba:	8819      	ldrh	r1, [r3, #0]
    4cbc:	2320      	movs	r3, #32
    4cbe:	9301      	str	r3, [sp, #4]
    4cc0:	2308      	movs	r3, #8
    4cc2:	18fb      	adds	r3, r7, r3
    4cc4:	9300      	str	r3, [sp, #0]
    4cc6:	0003      	movs	r3, r0
    4cc8:	2002      	movs	r0, #2
    4cca:	4d4c      	ldr	r5, [pc, #304]	; (4dfc <atcab_read_pubkey+0x23c>)
    4ccc:	47a8      	blx	r5
    4cce:	0003      	movs	r3, r0
    4cd0:	7023      	strb	r3, [r4, #0]
    4cd2:	232f      	movs	r3, #47	; 0x2f
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d000      	beq.n	4cde <atcab_read_pubkey+0x11e>
    4cdc:	e083      	b.n	4de6 <atcab_read_pubkey+0x226>
            break;

        // Copy.  First four bytes
        cpySize = ATCA_PUB_KEY_PAD;
    4cde:	232b      	movs	r3, #43	; 0x2b
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	2204      	movs	r2, #4
    4ce4:	701a      	strb	r2, [r3, #0]
        readIndex = 0;
    4ce6:	232a      	movs	r3, #42	; 0x2a
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	2200      	movs	r2, #0
    4cec:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4cee:	232c      	movs	r3, #44	; 0x2c
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	781b      	ldrb	r3, [r3, #0]
    4cf4:	683a      	ldr	r2, [r7, #0]
    4cf6:	18d0      	adds	r0, r2, r3
    4cf8:	232a      	movs	r3, #42	; 0x2a
    4cfa:	18fb      	adds	r3, r7, r3
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	2208      	movs	r2, #8
    4d00:	18ba      	adds	r2, r7, r2
    4d02:	18d1      	adds	r1, r2, r3
    4d04:	232b      	movs	r3, #43	; 0x2b
    4d06:	18fb      	adds	r3, r7, r3
    4d08:	781b      	ldrb	r3, [r3, #0]
    4d0a:	001a      	movs	r2, r3
    4d0c:	4b3c      	ldr	r3, [pc, #240]	; (4e00 <atcab_read_pubkey+0x240>)
    4d0e:	4798      	blx	r3
        cpyIndex += cpySize;
    4d10:	232c      	movs	r3, #44	; 0x2c
    4d12:	18fb      	adds	r3, r7, r3
    4d14:	222c      	movs	r2, #44	; 0x2c
    4d16:	18b9      	adds	r1, r7, r2
    4d18:	222b      	movs	r2, #43	; 0x2b
    4d1a:	18ba      	adds	r2, r7, r2
    4d1c:	7809      	ldrb	r1, [r1, #0]
    4d1e:	7812      	ldrb	r2, [r2, #0]
    4d20:	188a      	adds	r2, r1, r2
    4d22:	701a      	strb	r2, [r3, #0]
        // Copy.  Skip four bytes
        readIndex = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
    4d24:	232a      	movs	r3, #42	; 0x2a
    4d26:	18fb      	adds	r3, r7, r3
    4d28:	2208      	movs	r2, #8
    4d2a:	701a      	strb	r2, [r3, #0]
        cpySize = ATCA_BLOCK_SIZE - readIndex;
    4d2c:	232b      	movs	r3, #43	; 0x2b
    4d2e:	18fb      	adds	r3, r7, r3
    4d30:	222a      	movs	r2, #42	; 0x2a
    4d32:	18ba      	adds	r2, r7, r2
    4d34:	7812      	ldrb	r2, [r2, #0]
    4d36:	2120      	movs	r1, #32
    4d38:	1a8a      	subs	r2, r1, r2
    4d3a:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4d3c:	232c      	movs	r3, #44	; 0x2c
    4d3e:	18fb      	adds	r3, r7, r3
    4d40:	781b      	ldrb	r3, [r3, #0]
    4d42:	683a      	ldr	r2, [r7, #0]
    4d44:	18d0      	adds	r0, r2, r3
    4d46:	232a      	movs	r3, #42	; 0x2a
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2208      	movs	r2, #8
    4d4e:	18ba      	adds	r2, r7, r2
    4d50:	18d1      	adds	r1, r2, r3
    4d52:	232b      	movs	r3, #43	; 0x2b
    4d54:	18fb      	adds	r3, r7, r3
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	001a      	movs	r2, r3
    4d5a:	4b29      	ldr	r3, [pc, #164]	; (4e00 <atcab_read_pubkey+0x240>)
    4d5c:	4798      	blx	r3
        cpyIndex += cpySize;
    4d5e:	232c      	movs	r3, #44	; 0x2c
    4d60:	18fb      	adds	r3, r7, r3
    4d62:	222c      	movs	r2, #44	; 0x2c
    4d64:	18b9      	adds	r1, r7, r2
    4d66:	222b      	movs	r2, #43	; 0x2b
    4d68:	18ba      	adds	r2, r7, r2
    4d6a:	7809      	ldrb	r1, [r1, #0]
    4d6c:	7812      	ldrb	r2, [r2, #0]
    4d6e:	188a      	adds	r2, r1, r2
    4d70:	701a      	strb	r2, [r3, #0]

        // Read the next block
        block = 2;
    4d72:	232e      	movs	r3, #46	; 0x2e
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	2202      	movs	r2, #2
    4d78:	701a      	strb	r2, [r3, #0]
        if ( (ret = atcab_read_zone(ATCA_ZONE_DATA, slot8toF, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    4d7a:	232f      	movs	r3, #47	; 0x2f
    4d7c:	18fc      	adds	r4, r7, r3
    4d7e:	232d      	movs	r3, #45	; 0x2d
    4d80:	18fb      	adds	r3, r7, r3
    4d82:	7818      	ldrb	r0, [r3, #0]
    4d84:	232e      	movs	r3, #46	; 0x2e
    4d86:	18fb      	adds	r3, r7, r3
    4d88:	781a      	ldrb	r2, [r3, #0]
    4d8a:	1dbb      	adds	r3, r7, #6
    4d8c:	8819      	ldrh	r1, [r3, #0]
    4d8e:	2320      	movs	r3, #32
    4d90:	9301      	str	r3, [sp, #4]
    4d92:	2308      	movs	r3, #8
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	9300      	str	r3, [sp, #0]
    4d98:	0003      	movs	r3, r0
    4d9a:	2002      	movs	r0, #2
    4d9c:	4d17      	ldr	r5, [pc, #92]	; (4dfc <atcab_read_pubkey+0x23c>)
    4d9e:	47a8      	blx	r5
    4da0:	0003      	movs	r3, r0
    4da2:	7023      	strb	r3, [r4, #0]
    4da4:	232f      	movs	r3, #47	; 0x2f
    4da6:	18fb      	adds	r3, r7, r3
    4da8:	781b      	ldrb	r3, [r3, #0]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d11d      	bne.n	4dea <atcab_read_pubkey+0x22a>
            break;

        // Copy.  The remaining 8 bytes
        cpySize = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
    4dae:	232b      	movs	r3, #43	; 0x2b
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	2208      	movs	r2, #8
    4db4:	701a      	strb	r2, [r3, #0]
        readIndex = 0;
    4db6:	232a      	movs	r3, #42	; 0x2a
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	2200      	movs	r2, #0
    4dbc:	701a      	strb	r2, [r3, #0]
        memcpy(&pubkey[cpyIndex], &read_buf[readIndex], cpySize);
    4dbe:	232c      	movs	r3, #44	; 0x2c
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	683a      	ldr	r2, [r7, #0]
    4dc6:	18d0      	adds	r0, r2, r3
    4dc8:	232a      	movs	r3, #42	; 0x2a
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	781b      	ldrb	r3, [r3, #0]
    4dce:	2208      	movs	r2, #8
    4dd0:	18ba      	adds	r2, r7, r2
    4dd2:	18d1      	adds	r1, r2, r3
    4dd4:	232b      	movs	r3, #43	; 0x2b
    4dd6:	18fb      	adds	r3, r7, r3
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	001a      	movs	r2, r3
    4ddc:	4b08      	ldr	r3, [pc, #32]	; (4e00 <atcab_read_pubkey+0x240>)
    4dde:	4798      	blx	r3
    4de0:	e004      	b.n	4dec <atcab_read_pubkey+0x22c>
            break;
    4de2:	46c0      	nop			; (mov r8, r8)
    4de4:	e002      	b.n	4dec <atcab_read_pubkey+0x22c>
            break;
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	e000      	b.n	4dec <atcab_read_pubkey+0x22c>
            break;
    4dea:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    return ret;
    4dec:	232f      	movs	r3, #47	; 0x2f
    4dee:	18fb      	adds	r3, r7, r3
    4df0:	781b      	ldrb	r3, [r3, #0]
}
    4df2:	0018      	movs	r0, r3
    4df4:	46bd      	mov	sp, r7
    4df6:	b00c      	add	sp, #48	; 0x30
    4df8:	bdb0      	pop	{r4, r5, r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	00004439 	.word	0x00004439
    4e00:	0000ad67 	.word	0x0000ad67

00004e04 <atcab_write_bytes_zone>:
 *                           of a word (4 bytes).
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_write_bytes_zone(uint8_t zone, uint16_t slot, size_t offset_bytes, const uint8_t *data, size_t length)
{
    4e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e06:	b08d      	sub	sp, #52	; 0x34
    4e08:	af02      	add	r7, sp, #8
    4e0a:	60ba      	str	r2, [r7, #8]
    4e0c:	607b      	str	r3, [r7, #4]
    4e0e:	230f      	movs	r3, #15
    4e10:	18fb      	adds	r3, r7, r3
    4e12:	1c02      	adds	r2, r0, #0
    4e14:	701a      	strb	r2, [r3, #0]
    4e16:	230c      	movs	r3, #12
    4e18:	18fb      	adds	r3, r7, r3
    4e1a:	1c0a      	adds	r2, r1, #0
    4e1c:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4e1e:	2327      	movs	r3, #39	; 0x27
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	22e1      	movs	r2, #225	; 0xe1
    4e24:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
    4e26:	2300      	movs	r3, #0
    4e28:	617b      	str	r3, [r7, #20]
    size_t data_idx = 0;
    4e2a:	2300      	movs	r3, #0
    4e2c:	623b      	str	r3, [r7, #32]
    size_t cur_block = 0;
    4e2e:	2300      	movs	r3, #0
    4e30:	61fb      	str	r3, [r7, #28]
    size_t cur_word = 0;
    4e32:	2300      	movs	r3, #0
    4e34:	61bb      	str	r3, [r7, #24]

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    4e36:	230f      	movs	r3, #15
    4e38:	18fb      	adds	r3, r7, r3
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d00b      	beq.n	4e58 <atcab_write_bytes_zone+0x54>
    4e40:	230f      	movs	r3, #15
    4e42:	18fb      	adds	r3, r7, r3
    4e44:	781b      	ldrb	r3, [r3, #0]
    4e46:	2b01      	cmp	r3, #1
    4e48:	d006      	beq.n	4e58 <atcab_write_bytes_zone+0x54>
    4e4a:	230f      	movs	r3, #15
    4e4c:	18fb      	adds	r3, r7, r3
    4e4e:	781b      	ldrb	r3, [r3, #0]
    4e50:	2b02      	cmp	r3, #2
    4e52:	d001      	beq.n	4e58 <atcab_write_bytes_zone+0x54>
        return ATCA_BAD_PARAM;
    4e54:	23e2      	movs	r3, #226	; 0xe2
    4e56:	e0ba      	b.n	4fce <atcab_write_bytes_zone+0x1ca>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    4e58:	230f      	movs	r3, #15
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	781b      	ldrb	r3, [r3, #0]
    4e5e:	2b02      	cmp	r3, #2
    4e60:	d106      	bne.n	4e70 <atcab_write_bytes_zone+0x6c>
    4e62:	230c      	movs	r3, #12
    4e64:	18fb      	adds	r3, r7, r3
    4e66:	881b      	ldrh	r3, [r3, #0]
    4e68:	2b0f      	cmp	r3, #15
    4e6a:	d901      	bls.n	4e70 <atcab_write_bytes_zone+0x6c>
        return ATCA_BAD_PARAM;
    4e6c:	23e2      	movs	r3, #226	; 0xe2
    4e6e:	e0ae      	b.n	4fce <atcab_write_bytes_zone+0x1ca>
    if (length == 0)
    4e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4e72:	2b00      	cmp	r3, #0
    4e74:	d101      	bne.n	4e7a <atcab_write_bytes_zone+0x76>
        return ATCA_SUCCESS;  // Always succeed writing 0 bytes
    4e76:	2300      	movs	r3, #0
    4e78:	e0a9      	b.n	4fce <atcab_write_bytes_zone+0x1ca>
    if (data == NULL)
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d101      	bne.n	4e84 <atcab_write_bytes_zone+0x80>
        return ATCA_BAD_PARAM;
    4e80:	23e2      	movs	r3, #226	; 0xe2
    4e82:	e0a4      	b.n	4fce <atcab_write_bytes_zone+0x1ca>
    if (offset_bytes % ATCA_WORD_SIZE != 0 || length % ATCA_WORD_SIZE != 0)
    4e84:	68bb      	ldr	r3, [r7, #8]
    4e86:	2203      	movs	r2, #3
    4e88:	4013      	ands	r3, r2
    4e8a:	d103      	bne.n	4e94 <atcab_write_bytes_zone+0x90>
    4e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4e8e:	2203      	movs	r2, #3
    4e90:	4013      	ands	r3, r2
    4e92:	d001      	beq.n	4e98 <atcab_write_bytes_zone+0x94>
        return ATCA_BAD_PARAM;
    4e94:	23e2      	movs	r3, #226	; 0xe2
    4e96:	e09a      	b.n	4fce <atcab_write_bytes_zone+0x1ca>

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
    4e98:	2327      	movs	r3, #39	; 0x27
    4e9a:	18fc      	adds	r4, r7, r3
    4e9c:	2314      	movs	r3, #20
    4e9e:	18fa      	adds	r2, r7, r3
    4ea0:	230c      	movs	r3, #12
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	8819      	ldrh	r1, [r3, #0]
    4ea6:	230f      	movs	r3, #15
    4ea8:	18fb      	adds	r3, r7, r3
    4eaa:	781b      	ldrb	r3, [r3, #0]
    4eac:	0018      	movs	r0, r3
    4eae:	4b4a      	ldr	r3, [pc, #296]	; (4fd8 <atcab_write_bytes_zone+0x1d4>)
    4eb0:	4798      	blx	r3
    4eb2:	0003      	movs	r3, r0
    4eb4:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    4eb6:	2327      	movs	r3, #39	; 0x27
    4eb8:	18fb      	adds	r3, r7, r3
    4eba:	781b      	ldrb	r3, [r3, #0]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	d000      	beq.n	4ec2 <atcab_write_bytes_zone+0xbe>
    4ec0:	e07d      	b.n	4fbe <atcab_write_bytes_zone+0x1ba>
            break;
        if (offset_bytes + length > zone_size)
    4ec2:	68ba      	ldr	r2, [r7, #8]
    4ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ec6:	18d2      	adds	r2, r2, r3
    4ec8:	697b      	ldr	r3, [r7, #20]
    4eca:	429a      	cmp	r2, r3
    4ecc:	d901      	bls.n	4ed2 <atcab_write_bytes_zone+0xce>
            return ATCA_BAD_PARAM;
    4ece:	23e2      	movs	r3, #226	; 0xe2
    4ed0:	e07d      	b.n	4fce <atcab_write_bytes_zone+0x1ca>

        cur_block = offset_bytes / ATCA_BLOCK_SIZE;
    4ed2:	68bb      	ldr	r3, [r7, #8]
    4ed4:	095b      	lsrs	r3, r3, #5
    4ed6:	61fb      	str	r3, [r7, #28]
        cur_word = (offset_bytes % ATCA_BLOCK_SIZE) / ATCA_WORD_SIZE;
    4ed8:	68bb      	ldr	r3, [r7, #8]
    4eda:	221f      	movs	r2, #31
    4edc:	4013      	ands	r3, r2
    4ede:	089b      	lsrs	r3, r3, #2
    4ee0:	61bb      	str	r3, [r7, #24]

        while (data_idx < length)
    4ee2:	e067      	b.n	4fb4 <atcab_write_bytes_zone+0x1b0>
        {
            // The last item makes sure we handle the selector, user extra, and lock bytes in the config properly
            if (cur_word == 0 && length - data_idx >= ATCA_BLOCK_SIZE && !(zone == ATCA_ZONE_CONFIG && cur_block == 2))
    4ee4:	69bb      	ldr	r3, [r7, #24]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d12e      	bne.n	4f48 <atcab_write_bytes_zone+0x144>
    4eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4eec:	6a3b      	ldr	r3, [r7, #32]
    4eee:	1ad3      	subs	r3, r2, r3
    4ef0:	2b1f      	cmp	r3, #31
    4ef2:	d929      	bls.n	4f48 <atcab_write_bytes_zone+0x144>
    4ef4:	230f      	movs	r3, #15
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	781b      	ldrb	r3, [r3, #0]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d102      	bne.n	4f04 <atcab_write_bytes_zone+0x100>
    4efe:	69fb      	ldr	r3, [r7, #28]
    4f00:	2b02      	cmp	r3, #2
    4f02:	d021      	beq.n	4f48 <atcab_write_bytes_zone+0x144>
            {
                status = atcab_write_zone(zone, slot, (uint8_t)cur_block, 0, &data[data_idx], ATCA_BLOCK_SIZE);
    4f04:	69fb      	ldr	r3, [r7, #28]
    4f06:	b2dd      	uxtb	r5, r3
    4f08:	687a      	ldr	r2, [r7, #4]
    4f0a:	6a3b      	ldr	r3, [r7, #32]
    4f0c:	18d3      	adds	r3, r2, r3
    4f0e:	2227      	movs	r2, #39	; 0x27
    4f10:	18bc      	adds	r4, r7, r2
    4f12:	220c      	movs	r2, #12
    4f14:	18ba      	adds	r2, r7, r2
    4f16:	8811      	ldrh	r1, [r2, #0]
    4f18:	220f      	movs	r2, #15
    4f1a:	18ba      	adds	r2, r7, r2
    4f1c:	7810      	ldrb	r0, [r2, #0]
    4f1e:	2220      	movs	r2, #32
    4f20:	9201      	str	r2, [sp, #4]
    4f22:	9300      	str	r3, [sp, #0]
    4f24:	2300      	movs	r3, #0
    4f26:	002a      	movs	r2, r5
    4f28:	4d2c      	ldr	r5, [pc, #176]	; (4fdc <atcab_write_bytes_zone+0x1d8>)
    4f2a:	47a8      	blx	r5
    4f2c:	0003      	movs	r3, r0
    4f2e:	7023      	strb	r3, [r4, #0]
                if (status != ATCA_SUCCESS)
    4f30:	2327      	movs	r3, #39	; 0x27
    4f32:	18fb      	adds	r3, r7, r3
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d143      	bne.n	4fc2 <atcab_write_bytes_zone+0x1be>
                    break;
                data_idx += ATCA_BLOCK_SIZE;
    4f3a:	6a3b      	ldr	r3, [r7, #32]
    4f3c:	3320      	adds	r3, #32
    4f3e:	623b      	str	r3, [r7, #32]
                cur_block += 1;
    4f40:	69fb      	ldr	r3, [r7, #28]
    4f42:	3301      	adds	r3, #1
    4f44:	61fb      	str	r3, [r7, #28]
    4f46:	e035      	b.n	4fb4 <atcab_write_bytes_zone+0x1b0>
            }
            else
            {
                // Skip trying to change UserExtra, Selector, LockValue, and LockConfig which require special values
                if (!(zone == ATCA_ZONE_CONFIG && cur_block == 2 && cur_word == 5))
    4f48:	230f      	movs	r3, #15
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	781b      	ldrb	r3, [r3, #0]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d105      	bne.n	4f5e <atcab_write_bytes_zone+0x15a>
    4f52:	69fb      	ldr	r3, [r7, #28]
    4f54:	2b02      	cmp	r3, #2
    4f56:	d102      	bne.n	4f5e <atcab_write_bytes_zone+0x15a>
    4f58:	69bb      	ldr	r3, [r7, #24]
    4f5a:	2b05      	cmp	r3, #5
    4f5c:	d01c      	beq.n	4f98 <atcab_write_bytes_zone+0x194>
                {
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
    4f5e:	69fb      	ldr	r3, [r7, #28]
    4f60:	b2dd      	uxtb	r5, r3
    4f62:	69bb      	ldr	r3, [r7, #24]
    4f64:	b2de      	uxtb	r6, r3
    4f66:	687a      	ldr	r2, [r7, #4]
    4f68:	6a3b      	ldr	r3, [r7, #32]
    4f6a:	18d3      	adds	r3, r2, r3
    4f6c:	2227      	movs	r2, #39	; 0x27
    4f6e:	18bc      	adds	r4, r7, r2
    4f70:	220c      	movs	r2, #12
    4f72:	18ba      	adds	r2, r7, r2
    4f74:	8811      	ldrh	r1, [r2, #0]
    4f76:	220f      	movs	r2, #15
    4f78:	18ba      	adds	r2, r7, r2
    4f7a:	7810      	ldrb	r0, [r2, #0]
    4f7c:	2204      	movs	r2, #4
    4f7e:	9201      	str	r2, [sp, #4]
    4f80:	9300      	str	r3, [sp, #0]
    4f82:	0033      	movs	r3, r6
    4f84:	002a      	movs	r2, r5
    4f86:	4d15      	ldr	r5, [pc, #84]	; (4fdc <atcab_write_bytes_zone+0x1d8>)
    4f88:	47a8      	blx	r5
    4f8a:	0003      	movs	r3, r0
    4f8c:	7023      	strb	r3, [r4, #0]
                    if (status != ATCA_SUCCESS)
    4f8e:	2327      	movs	r3, #39	; 0x27
    4f90:	18fb      	adds	r3, r7, r3
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	2b00      	cmp	r3, #0
    4f96:	d116      	bne.n	4fc6 <atcab_write_bytes_zone+0x1c2>
                        break;
                }
                data_idx += ATCA_WORD_SIZE;
    4f98:	6a3b      	ldr	r3, [r7, #32]
    4f9a:	3304      	adds	r3, #4
    4f9c:	623b      	str	r3, [r7, #32]
                cur_word += 1;
    4f9e:	69bb      	ldr	r3, [r7, #24]
    4fa0:	3301      	adds	r3, #1
    4fa2:	61bb      	str	r3, [r7, #24]
                if (cur_word == ATCA_BLOCK_SIZE / ATCA_WORD_SIZE)
    4fa4:	69bb      	ldr	r3, [r7, #24]
    4fa6:	2b08      	cmp	r3, #8
    4fa8:	d104      	bne.n	4fb4 <atcab_write_bytes_zone+0x1b0>
                {
                    cur_block += 1;
    4faa:	69fb      	ldr	r3, [r7, #28]
    4fac:	3301      	adds	r3, #1
    4fae:	61fb      	str	r3, [r7, #28]
                    cur_word = 0;
    4fb0:	2300      	movs	r3, #0
    4fb2:	61bb      	str	r3, [r7, #24]
        while (data_idx < length)
    4fb4:	6a3a      	ldr	r2, [r7, #32]
    4fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4fb8:	429a      	cmp	r2, r3
    4fba:	d393      	bcc.n	4ee4 <atcab_write_bytes_zone+0xe0>
    4fbc:	e004      	b.n	4fc8 <atcab_write_bytes_zone+0x1c4>
            break;
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	e002      	b.n	4fc8 <atcab_write_bytes_zone+0x1c4>
                    break;
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	e000      	b.n	4fc8 <atcab_write_bytes_zone+0x1c4>
                        break;
    4fc6:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    while (false);

    return status;
    4fc8:	2327      	movs	r3, #39	; 0x27
    4fca:	18fb      	adds	r3, r7, r3
    4fcc:	781b      	ldrb	r3, [r3, #0]
}
    4fce:	0018      	movs	r0, r3
    4fd0:	46bd      	mov	sp, r7
    4fd2:	b00b      	add	sp, #44	; 0x2c
    4fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	00004001 	.word	0x00004001
    4fdc:	0000436d 	.word	0x0000436d

00004fe0 <atcab_read_bytes_zone>:
 *  \param[in]  length        Number of bytes to read.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset_bytes, uint8_t *data, size_t length)
{
    4fe0:	b5b0      	push	{r4, r5, r7, lr}
    4fe2:	b098      	sub	sp, #96	; 0x60
    4fe4:	af02      	add	r7, sp, #8
    4fe6:	60ba      	str	r2, [r7, #8]
    4fe8:	607b      	str	r3, [r7, #4]
    4fea:	230f      	movs	r3, #15
    4fec:	18fb      	adds	r3, r7, r3
    4fee:	1c02      	adds	r2, r0, #0
    4ff0:	701a      	strb	r2, [r3, #0]
    4ff2:	230c      	movs	r3, #12
    4ff4:	18fb      	adds	r3, r7, r3
    4ff6:	1c0a      	adds	r2, r1, #0
    4ff8:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    4ffa:	2357      	movs	r3, #87	; 0x57
    4ffc:	18fb      	adds	r3, r7, r3
    4ffe:	22e1      	movs	r2, #225	; 0xe1
    5000:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
    5002:	2300      	movs	r3, #0
    5004:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t read_buf[32];
    size_t data_idx = 0;
    5006:	2300      	movs	r3, #0
    5008:	653b      	str	r3, [r7, #80]	; 0x50
    size_t cur_block = 0;
    500a:	2300      	movs	r3, #0
    500c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t cur_offset = 0;
    500e:	2300      	movs	r3, #0
    5010:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t read_size = ATCA_BLOCK_SIZE;
    5012:	2347      	movs	r3, #71	; 0x47
    5014:	18fb      	adds	r3, r7, r3
    5016:	2220      	movs	r2, #32
    5018:	701a      	strb	r2, [r3, #0]
    size_t read_buf_idx = 0;
    501a:	2300      	movs	r3, #0
    501c:	643b      	str	r3, [r7, #64]	; 0x40
    size_t copy_length = 0;
    501e:	2300      	movs	r3, #0
    5020:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t read_offset = 0;
    5022:	2300      	movs	r3, #0
    5024:	63bb      	str	r3, [r7, #56]	; 0x38

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    5026:	230f      	movs	r3, #15
    5028:	18fb      	adds	r3, r7, r3
    502a:	781b      	ldrb	r3, [r3, #0]
    502c:	2b00      	cmp	r3, #0
    502e:	d00b      	beq.n	5048 <atcab_read_bytes_zone+0x68>
    5030:	230f      	movs	r3, #15
    5032:	18fb      	adds	r3, r7, r3
    5034:	781b      	ldrb	r3, [r3, #0]
    5036:	2b01      	cmp	r3, #1
    5038:	d006      	beq.n	5048 <atcab_read_bytes_zone+0x68>
    503a:	230f      	movs	r3, #15
    503c:	18fb      	adds	r3, r7, r3
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	2b02      	cmp	r3, #2
    5042:	d001      	beq.n	5048 <atcab_read_bytes_zone+0x68>
        return ATCA_BAD_PARAM;
    5044:	23e2      	movs	r3, #226	; 0xe2
    5046:	e0b5      	b.n	51b4 <atcab_read_bytes_zone+0x1d4>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    5048:	230f      	movs	r3, #15
    504a:	18fb      	adds	r3, r7, r3
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	2b02      	cmp	r3, #2
    5050:	d106      	bne.n	5060 <atcab_read_bytes_zone+0x80>
    5052:	230c      	movs	r3, #12
    5054:	18fb      	adds	r3, r7, r3
    5056:	881b      	ldrh	r3, [r3, #0]
    5058:	2b0f      	cmp	r3, #15
    505a:	d901      	bls.n	5060 <atcab_read_bytes_zone+0x80>
        return ATCA_BAD_PARAM;
    505c:	23e2      	movs	r3, #226	; 0xe2
    505e:	e0a9      	b.n	51b4 <atcab_read_bytes_zone+0x1d4>
    if (length == 0)
    5060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5062:	2b00      	cmp	r3, #0
    5064:	d101      	bne.n	506a <atcab_read_bytes_zone+0x8a>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    5066:	2300      	movs	r3, #0
    5068:	e0a4      	b.n	51b4 <atcab_read_bytes_zone+0x1d4>
    if (data == NULL)
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	2b00      	cmp	r3, #0
    506e:	d101      	bne.n	5074 <atcab_read_bytes_zone+0x94>
        return ATCA_BAD_PARAM;
    5070:	23e2      	movs	r3, #226	; 0xe2
    5072:	e09f      	b.n	51b4 <atcab_read_bytes_zone+0x1d4>

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
    5074:	2357      	movs	r3, #87	; 0x57
    5076:	18fc      	adds	r4, r7, r3
    5078:	2334      	movs	r3, #52	; 0x34
    507a:	18fa      	adds	r2, r7, r3
    507c:	230c      	movs	r3, #12
    507e:	18fb      	adds	r3, r7, r3
    5080:	8819      	ldrh	r1, [r3, #0]
    5082:	230f      	movs	r3, #15
    5084:	18fb      	adds	r3, r7, r3
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	0018      	movs	r0, r3
    508a:	4b4c      	ldr	r3, [pc, #304]	; (51bc <atcab_read_bytes_zone+0x1dc>)
    508c:	4798      	blx	r3
    508e:	0003      	movs	r3, r0
    5090:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
    5092:	2357      	movs	r3, #87	; 0x57
    5094:	18fb      	adds	r3, r7, r3
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	2b00      	cmp	r3, #0
    509a:	d000      	beq.n	509e <atcab_read_bytes_zone+0xbe>
    509c:	e084      	b.n	51a8 <atcab_read_bytes_zone+0x1c8>
            break;
        if (offset_bytes + length > zone_size)
    509e:	68ba      	ldr	r2, [r7, #8]
    50a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    50a2:	18d2      	adds	r2, r2, r3
    50a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50a6:	429a      	cmp	r2, r3
    50a8:	d901      	bls.n	50ae <atcab_read_bytes_zone+0xce>
            return ATCA_BAD_PARAM;
    50aa:	23e2      	movs	r3, #226	; 0xe2
    50ac:	e082      	b.n	51b4 <atcab_read_bytes_zone+0x1d4>

        cur_block = offset_bytes / ATCA_BLOCK_SIZE;
    50ae:	68bb      	ldr	r3, [r7, #8]
    50b0:	095b      	lsrs	r3, r3, #5
    50b2:	64fb      	str	r3, [r7, #76]	; 0x4c

        while (data_idx < length)
    50b4:	e073      	b.n	519e <atcab_read_bytes_zone+0x1be>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    50b6:	2347      	movs	r3, #71	; 0x47
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	2b20      	cmp	r3, #32
    50be:	d110      	bne.n	50e2 <atcab_read_bytes_zone+0x102>
    50c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    50c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50c4:	015b      	lsls	r3, r3, #5
    50c6:	1ad3      	subs	r3, r2, r3
    50c8:	2b1f      	cmp	r3, #31
    50ca:	d80a      	bhi.n	50e2 <atcab_read_bytes_zone+0x102>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
    50cc:	2347      	movs	r3, #71	; 0x47
    50ce:	18fb      	adds	r3, r7, r3
    50d0:	2204      	movs	r2, #4
    50d2:	701a      	strb	r2, [r3, #0]
                cur_offset = ((data_idx + offset_bytes) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    50d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    50d6:	68bb      	ldr	r3, [r7, #8]
    50d8:	18d3      	adds	r3, r2, r3
    50da:	089b      	lsrs	r3, r3, #2
    50dc:	2207      	movs	r2, #7
    50de:	4013      	ands	r3, r2
    50e0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            status = atcab_read_zone(
    50e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50e4:	b2da      	uxtb	r2, r3
    50e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    50e8:	b2dd      	uxtb	r5, r3
    50ea:	2357      	movs	r3, #87	; 0x57
    50ec:	18fc      	adds	r4, r7, r3
    50ee:	230c      	movs	r3, #12
    50f0:	18fb      	adds	r3, r7, r3
    50f2:	8819      	ldrh	r1, [r3, #0]
    50f4:	230f      	movs	r3, #15
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	7818      	ldrb	r0, [r3, #0]
    50fa:	2347      	movs	r3, #71	; 0x47
    50fc:	18fb      	adds	r3, r7, r3
    50fe:	781b      	ldrb	r3, [r3, #0]
    5100:	9301      	str	r3, [sp, #4]
    5102:	2314      	movs	r3, #20
    5104:	18fb      	adds	r3, r7, r3
    5106:	9300      	str	r3, [sp, #0]
    5108:	002b      	movs	r3, r5
    510a:	4d2d      	ldr	r5, [pc, #180]	; (51c0 <atcab_read_bytes_zone+0x1e0>)
    510c:	47a8      	blx	r5
    510e:	0003      	movs	r3, r0
    5110:	7023      	strb	r3, [r4, #0]
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
    5112:	2357      	movs	r3, #87	; 0x57
    5114:	18fb      	adds	r3, r7, r3
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	2b00      	cmp	r3, #0
    511a:	d147      	bne.n	51ac <atcab_read_bytes_zone+0x1cc>
                break;

            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    511c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    511e:	00da      	lsls	r2, r3, #3
    5120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5122:	18d3      	adds	r3, r2, r3
    5124:	009b      	lsls	r3, r3, #2
    5126:	63bb      	str	r3, [r7, #56]	; 0x38
            if (read_offset < offset_bytes)
    5128:	6bba      	ldr	r2, [r7, #56]	; 0x38
    512a:	68bb      	ldr	r3, [r7, #8]
    512c:	429a      	cmp	r2, r3
    512e:	d204      	bcs.n	513a <atcab_read_bytes_zone+0x15a>
                read_buf_idx = offset_bytes - read_offset;
    5130:	68ba      	ldr	r2, [r7, #8]
    5132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5134:	1ad3      	subs	r3, r2, r3
    5136:	643b      	str	r3, [r7, #64]	; 0x40
    5138:	e001      	b.n	513e <atcab_read_bytes_zone+0x15e>
            else
                read_buf_idx = 0;
    513a:	2300      	movs	r3, #0
    513c:	643b      	str	r3, [r7, #64]	; 0x40

            if (length - data_idx < read_size - read_buf_idx)
    513e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    5140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5142:	1ad2      	subs	r2, r2, r3
    5144:	2347      	movs	r3, #71	; 0x47
    5146:	18fb      	adds	r3, r7, r3
    5148:	7819      	ldrb	r1, [r3, #0]
    514a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    514c:	1acb      	subs	r3, r1, r3
    514e:	429a      	cmp	r2, r3
    5150:	d204      	bcs.n	515c <atcab_read_bytes_zone+0x17c>
                copy_length = length - data_idx;
    5152:	6eba      	ldr	r2, [r7, #104]	; 0x68
    5154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5156:	1ad3      	subs	r3, r2, r3
    5158:	63fb      	str	r3, [r7, #60]	; 0x3c
    515a:	e005      	b.n	5168 <atcab_read_bytes_zone+0x188>
            else
                copy_length = read_size - read_buf_idx;
    515c:	2347      	movs	r3, #71	; 0x47
    515e:	18fb      	adds	r3, r7, r3
    5160:	781a      	ldrb	r2, [r3, #0]
    5162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5164:	1ad3      	subs	r3, r2, r3
    5166:	63fb      	str	r3, [r7, #60]	; 0x3c

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    5168:	687a      	ldr	r2, [r7, #4]
    516a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    516c:	18d0      	adds	r0, r2, r3
    516e:	2314      	movs	r3, #20
    5170:	18fa      	adds	r2, r7, r3
    5172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5174:	18d3      	adds	r3, r2, r3
    5176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5178:	0019      	movs	r1, r3
    517a:	4b12      	ldr	r3, [pc, #72]	; (51c4 <atcab_read_bytes_zone+0x1e4>)
    517c:	4798      	blx	r3
            data_idx += copy_length;
    517e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5182:	18d3      	adds	r3, r2, r3
    5184:	653b      	str	r3, [r7, #80]	; 0x50
            if (read_size == ATCA_BLOCK_SIZE)
    5186:	2347      	movs	r3, #71	; 0x47
    5188:	18fb      	adds	r3, r7, r3
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	2b20      	cmp	r3, #32
    518e:	d103      	bne.n	5198 <atcab_read_bytes_zone+0x1b8>
                cur_block += 1;
    5190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5192:	3301      	adds	r3, #1
    5194:	64fb      	str	r3, [r7, #76]	; 0x4c
    5196:	e002      	b.n	519e <atcab_read_bytes_zone+0x1be>
            else
                cur_offset += 1;
    5198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    519a:	3301      	adds	r3, #1
    519c:	64bb      	str	r3, [r7, #72]	; 0x48
        while (data_idx < length)
    519e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    51a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    51a2:	429a      	cmp	r2, r3
    51a4:	d387      	bcc.n	50b6 <atcab_read_bytes_zone+0xd6>
    51a6:	e002      	b.n	51ae <atcab_read_bytes_zone+0x1ce>
            break;
    51a8:	46c0      	nop			; (mov r8, r8)
    51aa:	e000      	b.n	51ae <atcab_read_bytes_zone+0x1ce>
                break;
    51ac:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (false);

    return status;
    51ae:	2357      	movs	r3, #87	; 0x57
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	781b      	ldrb	r3, [r3, #0]
}
    51b4:	0018      	movs	r0, r3
    51b6:	46bd      	mov	sp, r7
    51b8:	b016      	add	sp, #88	; 0x58
    51ba:	bdb0      	pop	{r4, r5, r7, pc}
    51bc:	00004001 	.word	0x00004001
    51c0:	00004439 	.word	0x00004439
    51c4:	0000ad67 	.word	0x0000ad67

000051c8 <atcab_updateextra>:
 *                       limited use counter will be decremented.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_updateextra(uint8_t mode, uint16_t new_value)
{
    51c8:	b590      	push	{r4, r7, lr}
    51ca:	b0a7      	sub	sp, #156	; 0x9c
    51cc:	af00      	add	r7, sp, #0
    51ce:	0002      	movs	r2, r0
    51d0:	1dfb      	adds	r3, r7, #7
    51d2:	701a      	strb	r2, [r3, #0]
    51d4:	1d3b      	adds	r3, r7, #4
    51d6:	1c0a      	adds	r2, r1, #0
    51d8:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    51da:	2397      	movs	r3, #151	; 0x97
    51dc:	18fb      	adds	r3, r7, r3
    51de:	22e1      	movs	r2, #225	; 0xe1
    51e0:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    51e2:	2394      	movs	r3, #148	; 0x94
    51e4:	18fb      	adds	r3, r7, r3
    51e6:	2200      	movs	r2, #0
    51e8:	801a      	strh	r2, [r3, #0]

    do
    {
        // Build command
        memset(&packet, 0, sizeof(packet));
    51ea:	2308      	movs	r3, #8
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	228c      	movs	r2, #140	; 0x8c
    51f0:	2100      	movs	r1, #0
    51f2:	0018      	movs	r0, r3
    51f4:	4b47      	ldr	r3, [pc, #284]	; (5314 <atcab_updateextra+0x14c>)
    51f6:	4798      	blx	r3
        packet.param1 = mode;
    51f8:	2308      	movs	r3, #8
    51fa:	18fb      	adds	r3, r7, r3
    51fc:	1dfa      	adds	r2, r7, #7
    51fe:	7812      	ldrb	r2, [r2, #0]
    5200:	70da      	strb	r2, [r3, #3]
        packet.param2 = new_value;
    5202:	2308      	movs	r3, #8
    5204:	18fb      	adds	r3, r7, r3
    5206:	1d3a      	adds	r2, r7, #4
    5208:	8812      	ldrh	r2, [r2, #0]
    520a:	809a      	strh	r2, [r3, #4]

        if ((status = atUpdateExtra(_gCommandObj, &packet)) != ATCA_SUCCESS)
    520c:	4b42      	ldr	r3, [pc, #264]	; (5318 <atcab_updateextra+0x150>)
    520e:	681b      	ldr	r3, [r3, #0]
    5210:	2297      	movs	r2, #151	; 0x97
    5212:	18bc      	adds	r4, r7, r2
    5214:	2208      	movs	r2, #8
    5216:	18ba      	adds	r2, r7, r2
    5218:	0011      	movs	r1, r2
    521a:	0018      	movs	r0, r3
    521c:	4b3f      	ldr	r3, [pc, #252]	; (531c <atcab_updateextra+0x154>)
    521e:	4798      	blx	r3
    5220:	0003      	movs	r3, r0
    5222:	7023      	strb	r3, [r4, #0]
    5224:	2397      	movs	r3, #151	; 0x97
    5226:	18fb      	adds	r3, r7, r3
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	d162      	bne.n	52f4 <atcab_updateextra+0x12c>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_UPDATEEXTRA);
    522e:	4b3a      	ldr	r3, [pc, #232]	; (5318 <atcab_updateextra+0x150>)
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	2294      	movs	r2, #148	; 0x94
    5234:	18bc      	adds	r4, r7, r2
    5236:	2112      	movs	r1, #18
    5238:	0018      	movs	r0, r3
    523a:	4b39      	ldr	r3, [pc, #228]	; (5320 <atcab_updateextra+0x158>)
    523c:	4798      	blx	r3
    523e:	0003      	movs	r3, r0
    5240:	8023      	strh	r3, [r4, #0]

        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    5242:	4b38      	ldr	r3, [pc, #224]	; (5324 <atcab_updateextra+0x15c>)
    5244:	4798      	blx	r3
    5246:	0003      	movs	r3, r0
    5248:	001a      	movs	r2, r3
    524a:	2397      	movs	r3, #151	; 0x97
    524c:	18fb      	adds	r3, r7, r3
    524e:	781b      	ldrb	r3, [r3, #0]
    5250:	4293      	cmp	r3, r2
    5252:	d151      	bne.n	52f8 <atcab_updateextra+0x130>
            break;

        // send the command
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    5254:	4b34      	ldr	r3, [pc, #208]	; (5328 <atcab_updateextra+0x160>)
    5256:	6818      	ldr	r0, [r3, #0]
    5258:	2308      	movs	r3, #8
    525a:	18fb      	adds	r3, r7, r3
    525c:	785b      	ldrb	r3, [r3, #1]
    525e:	001a      	movs	r2, r3
    5260:	2397      	movs	r3, #151	; 0x97
    5262:	18fc      	adds	r4, r7, r3
    5264:	2308      	movs	r3, #8
    5266:	18fb      	adds	r3, r7, r3
    5268:	0019      	movs	r1, r3
    526a:	4b30      	ldr	r3, [pc, #192]	; (532c <atcab_updateextra+0x164>)
    526c:	4798      	blx	r3
    526e:	0003      	movs	r3, r0
    5270:	7023      	strb	r3, [r4, #0]
    5272:	2397      	movs	r3, #151	; 0x97
    5274:	18fb      	adds	r3, r7, r3
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	2b00      	cmp	r3, #0
    527a:	d13f      	bne.n	52fc <atcab_updateextra+0x134>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    527c:	2394      	movs	r3, #148	; 0x94
    527e:	18fb      	adds	r3, r7, r3
    5280:	881b      	ldrh	r3, [r3, #0]
    5282:	0018      	movs	r0, r3
    5284:	4b2a      	ldr	r3, [pc, #168]	; (5330 <atcab_updateextra+0x168>)
    5286:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    5288:	4b27      	ldr	r3, [pc, #156]	; (5328 <atcab_updateextra+0x160>)
    528a:	6818      	ldr	r0, [r3, #0]
    528c:	2397      	movs	r3, #151	; 0x97
    528e:	18fc      	adds	r4, r7, r3
    5290:	2308      	movs	r3, #8
    5292:	18fb      	adds	r3, r7, r3
    5294:	338a      	adds	r3, #138	; 0x8a
    5296:	001a      	movs	r2, r3
    5298:	2308      	movs	r3, #8
    529a:	18fb      	adds	r3, r7, r3
    529c:	3306      	adds	r3, #6
    529e:	0019      	movs	r1, r3
    52a0:	4b24      	ldr	r3, [pc, #144]	; (5334 <atcab_updateextra+0x16c>)
    52a2:	4798      	blx	r3
    52a4:	0003      	movs	r3, r0
    52a6:	7023      	strb	r3, [r4, #0]
    52a8:	2397      	movs	r3, #151	; 0x97
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	781b      	ldrb	r3, [r3, #0]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d126      	bne.n	5300 <atcab_updateextra+0x138>
            break;

        // Check response size
        if (packet.rxsize < 4)
    52b2:	2308      	movs	r3, #8
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	228a      	movs	r2, #138	; 0x8a
    52b8:	5a9b      	ldrh	r3, [r3, r2]
    52ba:	2b03      	cmp	r3, #3
    52bc:	d80f      	bhi.n	52de <atcab_updateextra+0x116>
        {
            if (packet.rxsize > 0)
    52be:	2308      	movs	r3, #8
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	228a      	movs	r2, #138	; 0x8a
    52c4:	5a9b      	ldrh	r3, [r3, r2]
    52c6:	2b00      	cmp	r3, #0
    52c8:	d004      	beq.n	52d4 <atcab_updateextra+0x10c>
                status = ATCA_RX_FAIL;
    52ca:	2397      	movs	r3, #151	; 0x97
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	22e6      	movs	r2, #230	; 0xe6
    52d0:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    52d2:	e016      	b.n	5302 <atcab_updateextra+0x13a>
                status = ATCA_RX_NO_RESPONSE;
    52d4:	2397      	movs	r3, #151	; 0x97
    52d6:	18fb      	adds	r3, r7, r3
    52d8:	22e7      	movs	r2, #231	; 0xe7
    52da:	701a      	strb	r2, [r3, #0]
            break;
    52dc:	e011      	b.n	5302 <atcab_updateextra+0x13a>
        }

        // check for response
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    52de:	2397      	movs	r3, #151	; 0x97
    52e0:	18fc      	adds	r4, r7, r3
    52e2:	2308      	movs	r3, #8
    52e4:	18fb      	adds	r3, r7, r3
    52e6:	3306      	adds	r3, #6
    52e8:	0018      	movs	r0, r3
    52ea:	4b13      	ldr	r3, [pc, #76]	; (5338 <atcab_updateextra+0x170>)
    52ec:	4798      	blx	r3
    52ee:	0003      	movs	r3, r0
    52f0:	7023      	strb	r3, [r4, #0]
    52f2:	e006      	b.n	5302 <atcab_updateextra+0x13a>
            break;
    52f4:	46c0      	nop			; (mov r8, r8)
    52f6:	e004      	b.n	5302 <atcab_updateextra+0x13a>
            break;
    52f8:	46c0      	nop			; (mov r8, r8)
    52fa:	e002      	b.n	5302 <atcab_updateextra+0x13a>
            break;
    52fc:	46c0      	nop			; (mov r8, r8)
    52fe:	e000      	b.n	5302 <atcab_updateextra+0x13a>
            break;
    5300:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    _atcab_exit();
    5302:	4b0e      	ldr	r3, [pc, #56]	; (533c <atcab_updateextra+0x174>)
    5304:	4798      	blx	r3
    return status;
    5306:	2397      	movs	r3, #151	; 0x97
    5308:	18fb      	adds	r3, r7, r3
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	0018      	movs	r0, r3
    530e:	46bd      	mov	sp, r7
    5310:	b027      	add	sp, #156	; 0x9c
    5312:	bd90      	pop	{r4, r7, pc}
    5314:	0000ad79 	.word	0x0000ad79
    5318:	200002b0 	.word	0x200002b0
    531c:	00002fe1 	.word	0x00002fe1
    5320:	000030f5 	.word	0x000030f5
    5324:	00003705 	.word	0x00003705
    5328:	200002b4 	.word	0x200002b4
    532c:	000034d9 	.word	0x000034d9
    5330:	000066d1 	.word	0x000066d1
    5334:	000034fb 	.word	0x000034fb
    5338:	000032b5 	.word	0x000032b5
    533c:	00003795 	.word	0x00003795

00005340 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_STATUS value
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
    5340:	b580      	push	{r7, lr}
    5342:	b082      	sub	sp, #8
    5344:	af00      	add	r7, sp, #0
    5346:	6078      	str	r0, [r7, #4]
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    sw_sha256_init((sw_sha256_ctx*)ctx);
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	0018      	movs	r0, r3
    534c:	4b03      	ldr	r3, [pc, #12]	; (535c <atcac_sw_sha2_256_init+0x1c>)
    534e:	4798      	blx	r3

    return ATCA_SUCCESS;
    5350:	2300      	movs	r3, #0
}
    5352:	0018      	movs	r0, r3
    5354:	46bd      	mov	sp, r7
    5356:	b002      	add	sp, #8
    5358:	bd80      	pop	{r7, pc}
    535a:	46c0      	nop			; (mov r8, r8)
    535c:	00005a51 	.word	0x00005a51

00005360 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_STATUS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
    5360:	b580      	push	{r7, lr}
    5362:	b084      	sub	sp, #16
    5364:	af00      	add	r7, sp, #0
    5366:	60f8      	str	r0, [r7, #12]
    5368:	60b9      	str	r1, [r7, #8]
    536a:	607a      	str	r2, [r7, #4]
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    536c:	687a      	ldr	r2, [r7, #4]
    536e:	68b9      	ldr	r1, [r7, #8]
    5370:	68fb      	ldr	r3, [r7, #12]
    5372:	0018      	movs	r0, r3
    5374:	4b03      	ldr	r3, [pc, #12]	; (5384 <atcac_sw_sha2_256_update+0x24>)
    5376:	4798      	blx	r3

    return ATCA_SUCCESS;
    5378:	2300      	movs	r3, #0
}
    537a:	0018      	movs	r0, r3
    537c:	46bd      	mov	sp, r7
    537e:	b004      	add	sp, #16
    5380:	bd80      	pop	{r7, pc}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	00005a99 	.word	0x00005a99

00005388 <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256 has
 * \return ATCA_STATUS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    5388:	b580      	push	{r7, lr}
    538a:	b082      	sub	sp, #8
    538c:	af00      	add	r7, sp, #0
    538e:	6078      	str	r0, [r7, #4]
    5390:	6039      	str	r1, [r7, #0]
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    5392:	683a      	ldr	r2, [r7, #0]
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	0011      	movs	r1, r2
    5398:	0018      	movs	r0, r3
    539a:	4b03      	ldr	r3, [pc, #12]	; (53a8 <atcac_sw_sha2_256_finish+0x20>)
    539c:	4798      	blx	r3

    return ATCA_SUCCESS;
    539e:	2300      	movs	r3, #0
}
    53a0:	0018      	movs	r0, r3
    53a2:	46bd      	mov	sp, r7
    53a4:	b002      	add	sp, #8
    53a6:	bd80      	pop	{r7, pc}
    53a8:	00005b5d 	.word	0x00005b5d

000053ac <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_STATUS
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b0b6      	sub	sp, #216	; 0xd8
    53b0:	af00      	add	r7, sp, #0
    53b2:	60f8      	str	r0, [r7, #12]
    53b4:	60b9      	str	r1, [r7, #8]
    53b6:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha2_256_ctx ctx;

    ret = atcac_sw_sha2_256_init(&ctx);
    53b8:	2314      	movs	r3, #20
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	0018      	movs	r0, r3
    53be:	4b1e      	ldr	r3, [pc, #120]	; (5438 <atcac_sw_sha2_256+0x8c>)
    53c0:	4798      	blx	r3
    53c2:	0003      	movs	r3, r0
    53c4:	22d4      	movs	r2, #212	; 0xd4
    53c6:	18ba      	adds	r2, r7, r2
    53c8:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    53ca:	23d4      	movs	r3, #212	; 0xd4
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	2b00      	cmp	r3, #0
    53d2:	d003      	beq.n	53dc <atcac_sw_sha2_256+0x30>
        return ret;
    53d4:	23d4      	movs	r3, #212	; 0xd4
    53d6:	18fb      	adds	r3, r7, r3
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	e028      	b.n	542e <atcac_sw_sha2_256+0x82>

    ret = atcac_sw_sha2_256_update(&ctx, data, data_size);
    53dc:	68ba      	ldr	r2, [r7, #8]
    53de:	68f9      	ldr	r1, [r7, #12]
    53e0:	2314      	movs	r3, #20
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	0018      	movs	r0, r3
    53e6:	4b15      	ldr	r3, [pc, #84]	; (543c <atcac_sw_sha2_256+0x90>)
    53e8:	4798      	blx	r3
    53ea:	0003      	movs	r3, r0
    53ec:	22d4      	movs	r2, #212	; 0xd4
    53ee:	18ba      	adds	r2, r7, r2
    53f0:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    53f2:	23d4      	movs	r3, #212	; 0xd4
    53f4:	18fb      	adds	r3, r7, r3
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d003      	beq.n	5404 <atcac_sw_sha2_256+0x58>
        return ret;
    53fc:	23d4      	movs	r3, #212	; 0xd4
    53fe:	18fb      	adds	r3, r7, r3
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	e014      	b.n	542e <atcac_sw_sha2_256+0x82>

    ret = atcac_sw_sha2_256_finish(&ctx, digest);
    5404:	687a      	ldr	r2, [r7, #4]
    5406:	2314      	movs	r3, #20
    5408:	18fb      	adds	r3, r7, r3
    540a:	0011      	movs	r1, r2
    540c:	0018      	movs	r0, r3
    540e:	4b0c      	ldr	r3, [pc, #48]	; (5440 <atcac_sw_sha2_256+0x94>)
    5410:	4798      	blx	r3
    5412:	0003      	movs	r3, r0
    5414:	22d4      	movs	r2, #212	; 0xd4
    5416:	18ba      	adds	r2, r7, r2
    5418:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
    541a:	23d4      	movs	r3, #212	; 0xd4
    541c:	18fb      	adds	r3, r7, r3
    541e:	681b      	ldr	r3, [r3, #0]
    5420:	2b00      	cmp	r3, #0
    5422:	d003      	beq.n	542c <atcac_sw_sha2_256+0x80>
        return ret;
    5424:	23d4      	movs	r3, #212	; 0xd4
    5426:	18fb      	adds	r3, r7, r3
    5428:	681b      	ldr	r3, [r3, #0]
    542a:	e000      	b.n	542e <atcac_sw_sha2_256+0x82>

    return ATCA_SUCCESS;
    542c:	2300      	movs	r3, #0
    542e:	0018      	movs	r0, r3
    5430:	46bd      	mov	sp, r7
    5432:	b036      	add	sp, #216	; 0xd8
    5434:	bd80      	pop	{r7, pc}
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	00005341 	.word	0x00005341
    543c:	00005361 	.word	0x00005361
    5440:	00005389 	.word	0x00005389

00005444 <sw_sha256_process>:
 * \param[in] ctx          SAH256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    5444:	b580      	push	{r7, lr}
    5446:	b0d8      	sub	sp, #352	; 0x160
    5448:	af00      	add	r7, sp, #0
    544a:	60f8      	str	r0, [r7, #12]
    544c:	60b9      	str	r1, [r7, #8]
    544e:	607a      	str	r2, [r7, #4]
    int i = 0;
    5450:	2300      	movs	r3, #0
    5452:	22ae      	movs	r2, #174	; 0xae
    5454:	0052      	lsls	r2, r2, #1
    5456:	18ba      	adds	r2, r7, r2
    5458:	6013      	str	r3, [r2, #0]
    uint32_t block = 0;
    545a:	2300      	movs	r3, #0
    545c:	22ac      	movs	r2, #172	; 0xac
    545e:	0052      	lsls	r2, r2, #1
    5460:	18ba      	adds	r2, r7, r2
    5462:	6013      	str	r3, [r2, #0]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    5464:	2300      	movs	r3, #0
    5466:	22ac      	movs	r2, #172	; 0xac
    5468:	0052      	lsls	r2, r2, #1
    546a:	18ba      	adds	r2, r7, r2
    546c:	6013      	str	r3, [r2, #0]
    546e:	e2dd      	b.n	5a2c <sw_sha256_process+0x5e8>
        uint32_t word_value;
        uint32_t s0, s1;
        uint32_t t1, t2;
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];
    5470:	23ac      	movs	r3, #172	; 0xac
    5472:	005b      	lsls	r3, r3, #1
    5474:	18fb      	adds	r3, r7, r3
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	019b      	lsls	r3, r3, #6
    547a:	68ba      	ldr	r2, [r7, #8]
    547c:	18d3      	adds	r3, r2, r3
    547e:	22a8      	movs	r2, #168	; 0xa8
    5480:	0052      	lsls	r2, r2, #1
    5482:	18ba      	adds	r2, r7, r2
    5484:	6013      	str	r3, [r2, #0]

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    5486:	2300      	movs	r3, #0
    5488:	22ae      	movs	r2, #174	; 0xae
    548a:	0052      	lsls	r2, r2, #1
    548c:	18ba      	adds	r2, r7, r2
    548e:	6013      	str	r3, [r2, #0]
    5490:	e063      	b.n	555a <sw_sha256_process+0x116>
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    5492:	23ae      	movs	r3, #174	; 0xae
    5494:	005b      	lsls	r3, r3, #1
    5496:	18fb      	adds	r3, r7, r3
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	3303      	adds	r3, #3
    549c:	22ae      	movs	r2, #174	; 0xae
    549e:	0052      	lsls	r2, r2, #1
    54a0:	18ba      	adds	r2, r7, r2
    54a2:	6812      	ldr	r2, [r2, #0]
    54a4:	21a8      	movs	r1, #168	; 0xa8
    54a6:	0049      	lsls	r1, r1, #1
    54a8:	1879      	adds	r1, r7, r1
    54aa:	6809      	ldr	r1, [r1, #0]
    54ac:	188a      	adds	r2, r1, r2
    54ae:	7811      	ldrb	r1, [r2, #0]
    54b0:	4a92      	ldr	r2, [pc, #584]	; (56fc <sw_sha256_process+0x2b8>)
    54b2:	20b0      	movs	r0, #176	; 0xb0
    54b4:	0040      	lsls	r0, r0, #1
    54b6:	4684      	mov	ip, r0
    54b8:	44bc      	add	ip, r7
    54ba:	4462      	add	r2, ip
    54bc:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    54be:	23ae      	movs	r3, #174	; 0xae
    54c0:	005b      	lsls	r3, r3, #1
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	3302      	adds	r3, #2
    54c8:	22ae      	movs	r2, #174	; 0xae
    54ca:	0052      	lsls	r2, r2, #1
    54cc:	18ba      	adds	r2, r7, r2
    54ce:	6812      	ldr	r2, [r2, #0]
    54d0:	3201      	adds	r2, #1
    54d2:	21a8      	movs	r1, #168	; 0xa8
    54d4:	0049      	lsls	r1, r1, #1
    54d6:	1879      	adds	r1, r7, r1
    54d8:	6809      	ldr	r1, [r1, #0]
    54da:	188a      	adds	r2, r1, r2
    54dc:	7811      	ldrb	r1, [r2, #0]
    54de:	4a87      	ldr	r2, [pc, #540]	; (56fc <sw_sha256_process+0x2b8>)
    54e0:	20b0      	movs	r0, #176	; 0xb0
    54e2:	0040      	lsls	r0, r0, #1
    54e4:	4684      	mov	ip, r0
    54e6:	44bc      	add	ip, r7
    54e8:	4462      	add	r2, ip
    54ea:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    54ec:	23ae      	movs	r3, #174	; 0xae
    54ee:	005b      	lsls	r3, r3, #1
    54f0:	18fb      	adds	r3, r7, r3
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	3301      	adds	r3, #1
    54f6:	22ae      	movs	r2, #174	; 0xae
    54f8:	0052      	lsls	r2, r2, #1
    54fa:	18ba      	adds	r2, r7, r2
    54fc:	6812      	ldr	r2, [r2, #0]
    54fe:	3202      	adds	r2, #2
    5500:	21a8      	movs	r1, #168	; 0xa8
    5502:	0049      	lsls	r1, r1, #1
    5504:	1879      	adds	r1, r7, r1
    5506:	6809      	ldr	r1, [r1, #0]
    5508:	188a      	adds	r2, r1, r2
    550a:	7811      	ldrb	r1, [r2, #0]
    550c:	4a7b      	ldr	r2, [pc, #492]	; (56fc <sw_sha256_process+0x2b8>)
    550e:	20b0      	movs	r0, #176	; 0xb0
    5510:	0040      	lsls	r0, r0, #1
    5512:	4684      	mov	ip, r0
    5514:	44bc      	add	ip, r7
    5516:	4462      	add	r2, ip
    5518:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    551a:	23ae      	movs	r3, #174	; 0xae
    551c:	005b      	lsls	r3, r3, #1
    551e:	18fb      	adds	r3, r7, r3
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	3303      	adds	r3, #3
    5524:	22a8      	movs	r2, #168	; 0xa8
    5526:	0052      	lsls	r2, r2, #1
    5528:	18ba      	adds	r2, r7, r2
    552a:	6812      	ldr	r2, [r2, #0]
    552c:	18d3      	adds	r3, r2, r3
    552e:	7819      	ldrb	r1, [r3, #0]
    5530:	4b72      	ldr	r3, [pc, #456]	; (56fc <sw_sha256_process+0x2b8>)
    5532:	22b0      	movs	r2, #176	; 0xb0
    5534:	0052      	lsls	r2, r2, #1
    5536:	18ba      	adds	r2, r7, r2
    5538:	18d2      	adds	r2, r2, r3
    553a:	23ae      	movs	r3, #174	; 0xae
    553c:	005b      	lsls	r3, r3, #1
    553e:	18fb      	adds	r3, r7, r3
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	18d3      	adds	r3, r2, r3
    5544:	1c0a      	adds	r2, r1, #0
    5546:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    5548:	23ae      	movs	r3, #174	; 0xae
    554a:	005b      	lsls	r3, r3, #1
    554c:	18fb      	adds	r3, r7, r3
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	3304      	adds	r3, #4
    5552:	22ae      	movs	r2, #174	; 0xae
    5554:	0052      	lsls	r2, r2, #1
    5556:	18ba      	adds	r2, r7, r2
    5558:	6013      	str	r3, [r2, #0]
    555a:	23ae      	movs	r3, #174	; 0xae
    555c:	005b      	lsls	r3, r3, #1
    555e:	18fb      	adds	r3, r7, r3
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	2b3f      	cmp	r3, #63	; 0x3f
    5564:	dd95      	ble.n	5492 <sw_sha256_process+0x4e>
        }

        w_index = 16;
    5566:	2310      	movs	r3, #16
    5568:	22aa      	movs	r2, #170	; 0xaa
    556a:	0052      	lsls	r2, r2, #1
    556c:	18ba      	adds	r2, r7, r2
    556e:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
    5570:	e08d      	b.n	568e <sw_sha256_process+0x24a>
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
    5572:	23aa      	movs	r3, #170	; 0xaa
    5574:	005b      	lsls	r3, r3, #1
    5576:	18fb      	adds	r3, r7, r3
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	3b0f      	subs	r3, #15
    557c:	001a      	movs	r2, r3
    557e:	4b5f      	ldr	r3, [pc, #380]	; (56fc <sw_sha256_process+0x2b8>)
    5580:	21b0      	movs	r1, #176	; 0xb0
    5582:	0049      	lsls	r1, r1, #1
    5584:	468c      	mov	ip, r1
    5586:	44bc      	add	ip, r7
    5588:	4463      	add	r3, ip
    558a:	0092      	lsls	r2, r2, #2
    558c:	58d3      	ldr	r3, [r2, r3]
    558e:	22a6      	movs	r2, #166	; 0xa6
    5590:	0052      	lsls	r2, r2, #1
    5592:	18ba      	adds	r2, r7, r2
    5594:	6013      	str	r3, [r2, #0]
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    5596:	23a6      	movs	r3, #166	; 0xa6
    5598:	005b      	lsls	r3, r3, #1
    559a:	18fb      	adds	r3, r7, r3
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	2207      	movs	r2, #7
    55a0:	41d3      	rors	r3, r2
    55a2:	001a      	movs	r2, r3
    55a4:	23a6      	movs	r3, #166	; 0xa6
    55a6:	005b      	lsls	r3, r3, #1
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	681b      	ldr	r3, [r3, #0]
    55ac:	2112      	movs	r1, #18
    55ae:	41cb      	rors	r3, r1
    55b0:	405a      	eors	r2, r3
    55b2:	23a6      	movs	r3, #166	; 0xa6
    55b4:	005b      	lsls	r3, r3, #1
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	681b      	ldr	r3, [r3, #0]
    55ba:	08db      	lsrs	r3, r3, #3
    55bc:	4053      	eors	r3, r2
    55be:	22a4      	movs	r2, #164	; 0xa4
    55c0:	0052      	lsls	r2, r2, #1
    55c2:	18ba      	adds	r2, r7, r2
    55c4:	6013      	str	r3, [r2, #0]

            word_value = w_union.w_word[w_index - 2];
    55c6:	23aa      	movs	r3, #170	; 0xaa
    55c8:	005b      	lsls	r3, r3, #1
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	681b      	ldr	r3, [r3, #0]
    55ce:	1e9a      	subs	r2, r3, #2
    55d0:	4b4a      	ldr	r3, [pc, #296]	; (56fc <sw_sha256_process+0x2b8>)
    55d2:	21b0      	movs	r1, #176	; 0xb0
    55d4:	0049      	lsls	r1, r1, #1
    55d6:	468c      	mov	ip, r1
    55d8:	44bc      	add	ip, r7
    55da:	4463      	add	r3, ip
    55dc:	0092      	lsls	r2, r2, #2
    55de:	58d3      	ldr	r3, [r2, r3]
    55e0:	22a6      	movs	r2, #166	; 0xa6
    55e2:	0052      	lsls	r2, r2, #1
    55e4:	18ba      	adds	r2, r7, r2
    55e6:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    55e8:	23a6      	movs	r3, #166	; 0xa6
    55ea:	005b      	lsls	r3, r3, #1
    55ec:	18fb      	adds	r3, r7, r3
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	2211      	movs	r2, #17
    55f2:	41d3      	rors	r3, r2
    55f4:	001a      	movs	r2, r3
    55f6:	23a6      	movs	r3, #166	; 0xa6
    55f8:	005b      	lsls	r3, r3, #1
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	2113      	movs	r1, #19
    5600:	41cb      	rors	r3, r1
    5602:	405a      	eors	r2, r3
    5604:	23a6      	movs	r3, #166	; 0xa6
    5606:	005b      	lsls	r3, r3, #1
    5608:	18fb      	adds	r3, r7, r3
    560a:	681b      	ldr	r3, [r3, #0]
    560c:	0a9b      	lsrs	r3, r3, #10
    560e:	4053      	eors	r3, r2
    5610:	22a2      	movs	r2, #162	; 0xa2
    5612:	0052      	lsls	r2, r2, #1
    5614:	18ba      	adds	r2, r7, r2
    5616:	6013      	str	r3, [r2, #0]

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    5618:	23aa      	movs	r3, #170	; 0xaa
    561a:	005b      	lsls	r3, r3, #1
    561c:	18fb      	adds	r3, r7, r3
    561e:	681b      	ldr	r3, [r3, #0]
    5620:	3b10      	subs	r3, #16
    5622:	001a      	movs	r2, r3
    5624:	4b35      	ldr	r3, [pc, #212]	; (56fc <sw_sha256_process+0x2b8>)
    5626:	21b0      	movs	r1, #176	; 0xb0
    5628:	0049      	lsls	r1, r1, #1
    562a:	468c      	mov	ip, r1
    562c:	44bc      	add	ip, r7
    562e:	4463      	add	r3, ip
    5630:	0092      	lsls	r2, r2, #2
    5632:	58d2      	ldr	r2, [r2, r3]
    5634:	23a4      	movs	r3, #164	; 0xa4
    5636:	005b      	lsls	r3, r3, #1
    5638:	18fb      	adds	r3, r7, r3
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	18d2      	adds	r2, r2, r3
    563e:	23aa      	movs	r3, #170	; 0xaa
    5640:	005b      	lsls	r3, r3, #1
    5642:	18fb      	adds	r3, r7, r3
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	1fd9      	subs	r1, r3, #7
    5648:	4b2c      	ldr	r3, [pc, #176]	; (56fc <sw_sha256_process+0x2b8>)
    564a:	20b0      	movs	r0, #176	; 0xb0
    564c:	0040      	lsls	r0, r0, #1
    564e:	4684      	mov	ip, r0
    5650:	44bc      	add	ip, r7
    5652:	4463      	add	r3, ip
    5654:	0089      	lsls	r1, r1, #2
    5656:	58cb      	ldr	r3, [r1, r3]
    5658:	18d2      	adds	r2, r2, r3
    565a:	23a2      	movs	r3, #162	; 0xa2
    565c:	005b      	lsls	r3, r3, #1
    565e:	18fb      	adds	r3, r7, r3
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	18d1      	adds	r1, r2, r3
    5664:	4b25      	ldr	r3, [pc, #148]	; (56fc <sw_sha256_process+0x2b8>)
    5666:	22b0      	movs	r2, #176	; 0xb0
    5668:	0052      	lsls	r2, r2, #1
    566a:	4694      	mov	ip, r2
    566c:	44bc      	add	ip, r7
    566e:	4463      	add	r3, ip
    5670:	22aa      	movs	r2, #170	; 0xaa
    5672:	0052      	lsls	r2, r2, #1
    5674:	18ba      	adds	r2, r7, r2
    5676:	6812      	ldr	r2, [r2, #0]
    5678:	0092      	lsls	r2, r2, #2
    567a:	50d1      	str	r1, [r2, r3]

            w_index++;
    567c:	23aa      	movs	r3, #170	; 0xaa
    567e:	005b      	lsls	r3, r3, #1
    5680:	18fb      	adds	r3, r7, r3
    5682:	681b      	ldr	r3, [r3, #0]
    5684:	3301      	adds	r3, #1
    5686:	22aa      	movs	r2, #170	; 0xaa
    5688:	0052      	lsls	r2, r2, #1
    568a:	18ba      	adds	r2, r7, r2
    568c:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
    568e:	23aa      	movs	r3, #170	; 0xaa
    5690:	005b      	lsls	r3, r3, #1
    5692:	18fb      	adds	r3, r7, r3
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	2b3f      	cmp	r3, #63	; 0x3f
    5698:	d800      	bhi.n	569c <sw_sha256_process+0x258>
    569a:	e76a      	b.n	5572 <sw_sha256_process+0x12e>
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
    569c:	2300      	movs	r3, #0
    569e:	22ae      	movs	r2, #174	; 0xae
    56a0:	0052      	lsls	r2, r2, #1
    56a2:	18ba      	adds	r2, r7, r2
    56a4:	6013      	str	r3, [r2, #0]
    56a6:	e01c      	b.n	56e2 <sw_sha256_process+0x29e>
            rotate_register[i] = ctx->hash[i];
    56a8:	68fb      	ldr	r3, [r7, #12]
    56aa:	22ae      	movs	r2, #174	; 0xae
    56ac:	0052      	lsls	r2, r2, #1
    56ae:	18ba      	adds	r2, r7, r2
    56b0:	6812      	ldr	r2, [r2, #0]
    56b2:	3222      	adds	r2, #34	; 0x22
    56b4:	0092      	lsls	r2, r2, #2
    56b6:	58d1      	ldr	r1, [r2, r3]
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <sw_sha256_process+0x2bc>)
    56ba:	22b0      	movs	r2, #176	; 0xb0
    56bc:	0052      	lsls	r2, r2, #1
    56be:	4694      	mov	ip, r2
    56c0:	44bc      	add	ip, r7
    56c2:	4463      	add	r3, ip
    56c4:	22ae      	movs	r2, #174	; 0xae
    56c6:	0052      	lsls	r2, r2, #1
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	6812      	ldr	r2, [r2, #0]
    56cc:	0092      	lsls	r2, r2, #2
    56ce:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
    56d0:	23ae      	movs	r3, #174	; 0xae
    56d2:	005b      	lsls	r3, r3, #1
    56d4:	18fb      	adds	r3, r7, r3
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	3301      	adds	r3, #1
    56da:	22ae      	movs	r2, #174	; 0xae
    56dc:	0052      	lsls	r2, r2, #1
    56de:	18ba      	adds	r2, r7, r2
    56e0:	6013      	str	r3, [r2, #0]
    56e2:	23ae      	movs	r3, #174	; 0xae
    56e4:	005b      	lsls	r3, r3, #1
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	681b      	ldr	r3, [r3, #0]
    56ea:	2b07      	cmp	r3, #7
    56ec:	dddc      	ble.n	56a8 <sw_sha256_process+0x264>

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    56ee:	2300      	movs	r3, #0
    56f0:	22ae      	movs	r2, #174	; 0xae
    56f2:	0052      	lsls	r2, r2, #1
    56f4:	18ba      	adds	r2, r7, r2
    56f6:	6013      	str	r3, [r2, #0]
    56f8:	e156      	b.n	59a8 <sw_sha256_process+0x564>
    56fa:	46c0      	nop			; (mov r8, r8)
    56fc:	fffffed4 	.word	0xfffffed4
    5700:	fffffeb4 	.word	0xfffffeb4
        {
            s0 = rotate_right(rotate_register[0], 2)
    5704:	4bcf      	ldr	r3, [pc, #828]	; (5a44 <sw_sha256_process+0x600>)
    5706:	22b0      	movs	r2, #176	; 0xb0
    5708:	0052      	lsls	r2, r2, #1
    570a:	4694      	mov	ip, r2
    570c:	44bc      	add	ip, r7
    570e:	4463      	add	r3, ip
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	2202      	movs	r2, #2
    5714:	41d3      	rors	r3, r2
    5716:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[0], 13)
    5718:	4bca      	ldr	r3, [pc, #808]	; (5a44 <sw_sha256_process+0x600>)
    571a:	21b0      	movs	r1, #176	; 0xb0
    571c:	0049      	lsls	r1, r1, #1
    571e:	468c      	mov	ip, r1
    5720:	44bc      	add	ip, r7
    5722:	4463      	add	r3, ip
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	210d      	movs	r1, #13
    5728:	41cb      	rors	r3, r1
    572a:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[0], 22);
    572c:	4bc5      	ldr	r3, [pc, #788]	; (5a44 <sw_sha256_process+0x600>)
    572e:	21b0      	movs	r1, #176	; 0xb0
    5730:	0049      	lsls	r1, r1, #1
    5732:	468c      	mov	ip, r1
    5734:	44bc      	add	ip, r7
    5736:	4463      	add	r3, ip
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	2116      	movs	r1, #22
    573c:	41cb      	rors	r3, r1
            s0 = rotate_right(rotate_register[0], 2)
    573e:	4053      	eors	r3, r2
    5740:	22a4      	movs	r2, #164	; 0xa4
    5742:	0052      	lsls	r2, r2, #1
    5744:	18ba      	adds	r2, r7, r2
    5746:	6013      	str	r3, [r2, #0]
            maj = (rotate_register[0] & rotate_register[1])
    5748:	4bbe      	ldr	r3, [pc, #760]	; (5a44 <sw_sha256_process+0x600>)
    574a:	22b0      	movs	r2, #176	; 0xb0
    574c:	0052      	lsls	r2, r2, #1
    574e:	4694      	mov	ip, r2
    5750:	44bc      	add	ip, r7
    5752:	4463      	add	r3, ip
    5754:	681a      	ldr	r2, [r3, #0]
    5756:	4bbb      	ldr	r3, [pc, #748]	; (5a44 <sw_sha256_process+0x600>)
    5758:	21b0      	movs	r1, #176	; 0xb0
    575a:	0049      	lsls	r1, r1, #1
    575c:	468c      	mov	ip, r1
    575e:	44bc      	add	ip, r7
    5760:	4463      	add	r3, ip
    5762:	685b      	ldr	r3, [r3, #4]
    5764:	401a      	ands	r2, r3
                  ^ (rotate_register[0] & rotate_register[2])
    5766:	4bb7      	ldr	r3, [pc, #732]	; (5a44 <sw_sha256_process+0x600>)
    5768:	21b0      	movs	r1, #176	; 0xb0
    576a:	0049      	lsls	r1, r1, #1
    576c:	468c      	mov	ip, r1
    576e:	44bc      	add	ip, r7
    5770:	4463      	add	r3, ip
    5772:	6819      	ldr	r1, [r3, #0]
    5774:	4bb3      	ldr	r3, [pc, #716]	; (5a44 <sw_sha256_process+0x600>)
    5776:	20b0      	movs	r0, #176	; 0xb0
    5778:	0040      	lsls	r0, r0, #1
    577a:	4684      	mov	ip, r0
    577c:	44bc      	add	ip, r7
    577e:	4463      	add	r3, ip
    5780:	689b      	ldr	r3, [r3, #8]
    5782:	400b      	ands	r3, r1
    5784:	405a      	eors	r2, r3
                  ^ (rotate_register[1] & rotate_register[2]);
    5786:	4baf      	ldr	r3, [pc, #700]	; (5a44 <sw_sha256_process+0x600>)
    5788:	21b0      	movs	r1, #176	; 0xb0
    578a:	0049      	lsls	r1, r1, #1
    578c:	468c      	mov	ip, r1
    578e:	44bc      	add	ip, r7
    5790:	4463      	add	r3, ip
    5792:	6859      	ldr	r1, [r3, #4]
    5794:	4bab      	ldr	r3, [pc, #684]	; (5a44 <sw_sha256_process+0x600>)
    5796:	20b0      	movs	r0, #176	; 0xb0
    5798:	0040      	lsls	r0, r0, #1
    579a:	4684      	mov	ip, r0
    579c:	44bc      	add	ip, r7
    579e:	4463      	add	r3, ip
    57a0:	689b      	ldr	r3, [r3, #8]
    57a2:	400b      	ands	r3, r1
            maj = (rotate_register[0] & rotate_register[1])
    57a4:	4053      	eors	r3, r2
    57a6:	22a0      	movs	r2, #160	; 0xa0
    57a8:	0052      	lsls	r2, r2, #1
    57aa:	18ba      	adds	r2, r7, r2
    57ac:	6013      	str	r3, [r2, #0]
            t2 = s0 + maj;
    57ae:	23a4      	movs	r3, #164	; 0xa4
    57b0:	005b      	lsls	r3, r3, #1
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	681a      	ldr	r2, [r3, #0]
    57b6:	23a0      	movs	r3, #160	; 0xa0
    57b8:	005b      	lsls	r3, r3, #1
    57ba:	18fb      	adds	r3, r7, r3
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	18d3      	adds	r3, r2, r3
    57c0:	229e      	movs	r2, #158	; 0x9e
    57c2:	0052      	lsls	r2, r2, #1
    57c4:	18ba      	adds	r2, r7, r2
    57c6:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(rotate_register[4], 6)
    57c8:	4b9e      	ldr	r3, [pc, #632]	; (5a44 <sw_sha256_process+0x600>)
    57ca:	22b0      	movs	r2, #176	; 0xb0
    57cc:	0052      	lsls	r2, r2, #1
    57ce:	4694      	mov	ip, r2
    57d0:	44bc      	add	ip, r7
    57d2:	4463      	add	r3, ip
    57d4:	691b      	ldr	r3, [r3, #16]
    57d6:	2206      	movs	r2, #6
    57d8:	41d3      	rors	r3, r2
    57da:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[4], 11)
    57dc:	4b99      	ldr	r3, [pc, #612]	; (5a44 <sw_sha256_process+0x600>)
    57de:	21b0      	movs	r1, #176	; 0xb0
    57e0:	0049      	lsls	r1, r1, #1
    57e2:	468c      	mov	ip, r1
    57e4:	44bc      	add	ip, r7
    57e6:	4463      	add	r3, ip
    57e8:	691b      	ldr	r3, [r3, #16]
    57ea:	210b      	movs	r1, #11
    57ec:	41cb      	rors	r3, r1
    57ee:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[4], 25);
    57f0:	4b94      	ldr	r3, [pc, #592]	; (5a44 <sw_sha256_process+0x600>)
    57f2:	21b0      	movs	r1, #176	; 0xb0
    57f4:	0049      	lsls	r1, r1, #1
    57f6:	468c      	mov	ip, r1
    57f8:	44bc      	add	ip, r7
    57fa:	4463      	add	r3, ip
    57fc:	691b      	ldr	r3, [r3, #16]
    57fe:	2119      	movs	r1, #25
    5800:	41cb      	rors	r3, r1
            s1 = rotate_right(rotate_register[4], 6)
    5802:	4053      	eors	r3, r2
    5804:	22a2      	movs	r2, #162	; 0xa2
    5806:	0052      	lsls	r2, r2, #1
    5808:	18ba      	adds	r2, r7, r2
    580a:	6013      	str	r3, [r2, #0]
            ch = (rotate_register[4] & rotate_register[5])
    580c:	4b8d      	ldr	r3, [pc, #564]	; (5a44 <sw_sha256_process+0x600>)
    580e:	22b0      	movs	r2, #176	; 0xb0
    5810:	0052      	lsls	r2, r2, #1
    5812:	4694      	mov	ip, r2
    5814:	44bc      	add	ip, r7
    5816:	4463      	add	r3, ip
    5818:	691a      	ldr	r2, [r3, #16]
    581a:	4b8a      	ldr	r3, [pc, #552]	; (5a44 <sw_sha256_process+0x600>)
    581c:	21b0      	movs	r1, #176	; 0xb0
    581e:	0049      	lsls	r1, r1, #1
    5820:	468c      	mov	ip, r1
    5822:	44bc      	add	ip, r7
    5824:	4463      	add	r3, ip
    5826:	695b      	ldr	r3, [r3, #20]
    5828:	401a      	ands	r2, r3
                 ^ (~rotate_register[4] & rotate_register[6]);
    582a:	4b86      	ldr	r3, [pc, #536]	; (5a44 <sw_sha256_process+0x600>)
    582c:	21b0      	movs	r1, #176	; 0xb0
    582e:	0049      	lsls	r1, r1, #1
    5830:	468c      	mov	ip, r1
    5832:	44bc      	add	ip, r7
    5834:	4463      	add	r3, ip
    5836:	691b      	ldr	r3, [r3, #16]
    5838:	43d9      	mvns	r1, r3
    583a:	4b82      	ldr	r3, [pc, #520]	; (5a44 <sw_sha256_process+0x600>)
    583c:	20b0      	movs	r0, #176	; 0xb0
    583e:	0040      	lsls	r0, r0, #1
    5840:	4684      	mov	ip, r0
    5842:	44bc      	add	ip, r7
    5844:	4463      	add	r3, ip
    5846:	699b      	ldr	r3, [r3, #24]
    5848:	400b      	ands	r3, r1
            ch = (rotate_register[4] & rotate_register[5])
    584a:	4053      	eors	r3, r2
    584c:	229c      	movs	r2, #156	; 0x9c
    584e:	0052      	lsls	r2, r2, #1
    5850:	18ba      	adds	r2, r7, r2
    5852:	6013      	str	r3, [r2, #0]
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    5854:	4b7b      	ldr	r3, [pc, #492]	; (5a44 <sw_sha256_process+0x600>)
    5856:	22b0      	movs	r2, #176	; 0xb0
    5858:	0052      	lsls	r2, r2, #1
    585a:	4694      	mov	ip, r2
    585c:	44bc      	add	ip, r7
    585e:	4463      	add	r3, ip
    5860:	69da      	ldr	r2, [r3, #28]
    5862:	23a2      	movs	r3, #162	; 0xa2
    5864:	005b      	lsls	r3, r3, #1
    5866:	18fb      	adds	r3, r7, r3
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	18d2      	adds	r2, r2, r3
    586c:	239c      	movs	r3, #156	; 0x9c
    586e:	005b      	lsls	r3, r3, #1
    5870:	18fb      	adds	r3, r7, r3
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	18d2      	adds	r2, r2, r3
    5876:	4b74      	ldr	r3, [pc, #464]	; (5a48 <sw_sha256_process+0x604>)
    5878:	21ae      	movs	r1, #174	; 0xae
    587a:	0049      	lsls	r1, r1, #1
    587c:	1879      	adds	r1, r7, r1
    587e:	6809      	ldr	r1, [r1, #0]
    5880:	0089      	lsls	r1, r1, #2
    5882:	58cb      	ldr	r3, [r1, r3]
    5884:	18d2      	adds	r2, r2, r3
    5886:	4b71      	ldr	r3, [pc, #452]	; (5a4c <sw_sha256_process+0x608>)
    5888:	21b0      	movs	r1, #176	; 0xb0
    588a:	0049      	lsls	r1, r1, #1
    588c:	468c      	mov	ip, r1
    588e:	44bc      	add	ip, r7
    5890:	4463      	add	r3, ip
    5892:	21ae      	movs	r1, #174	; 0xae
    5894:	0049      	lsls	r1, r1, #1
    5896:	1879      	adds	r1, r7, r1
    5898:	6809      	ldr	r1, [r1, #0]
    589a:	0089      	lsls	r1, r1, #2
    589c:	58cb      	ldr	r3, [r1, r3]
    589e:	18d3      	adds	r3, r2, r3
    58a0:	229a      	movs	r2, #154	; 0x9a
    58a2:	0052      	lsls	r2, r2, #1
    58a4:	18ba      	adds	r2, r7, r2
    58a6:	6013      	str	r3, [r2, #0]

            rotate_register[7] = rotate_register[6];
    58a8:	4b66      	ldr	r3, [pc, #408]	; (5a44 <sw_sha256_process+0x600>)
    58aa:	22b0      	movs	r2, #176	; 0xb0
    58ac:	0052      	lsls	r2, r2, #1
    58ae:	4694      	mov	ip, r2
    58b0:	44bc      	add	ip, r7
    58b2:	4463      	add	r3, ip
    58b4:	699a      	ldr	r2, [r3, #24]
    58b6:	4b63      	ldr	r3, [pc, #396]	; (5a44 <sw_sha256_process+0x600>)
    58b8:	21b0      	movs	r1, #176	; 0xb0
    58ba:	0049      	lsls	r1, r1, #1
    58bc:	468c      	mov	ip, r1
    58be:	44bc      	add	ip, r7
    58c0:	4463      	add	r3, ip
    58c2:	61da      	str	r2, [r3, #28]
            rotate_register[6] = rotate_register[5];
    58c4:	4b5f      	ldr	r3, [pc, #380]	; (5a44 <sw_sha256_process+0x600>)
    58c6:	22b0      	movs	r2, #176	; 0xb0
    58c8:	0052      	lsls	r2, r2, #1
    58ca:	4694      	mov	ip, r2
    58cc:	44bc      	add	ip, r7
    58ce:	4463      	add	r3, ip
    58d0:	695a      	ldr	r2, [r3, #20]
    58d2:	4b5c      	ldr	r3, [pc, #368]	; (5a44 <sw_sha256_process+0x600>)
    58d4:	21b0      	movs	r1, #176	; 0xb0
    58d6:	0049      	lsls	r1, r1, #1
    58d8:	468c      	mov	ip, r1
    58da:	44bc      	add	ip, r7
    58dc:	4463      	add	r3, ip
    58de:	619a      	str	r2, [r3, #24]
            rotate_register[5] = rotate_register[4];
    58e0:	4b58      	ldr	r3, [pc, #352]	; (5a44 <sw_sha256_process+0x600>)
    58e2:	22b0      	movs	r2, #176	; 0xb0
    58e4:	0052      	lsls	r2, r2, #1
    58e6:	4694      	mov	ip, r2
    58e8:	44bc      	add	ip, r7
    58ea:	4463      	add	r3, ip
    58ec:	691a      	ldr	r2, [r3, #16]
    58ee:	4b55      	ldr	r3, [pc, #340]	; (5a44 <sw_sha256_process+0x600>)
    58f0:	21b0      	movs	r1, #176	; 0xb0
    58f2:	0049      	lsls	r1, r1, #1
    58f4:	468c      	mov	ip, r1
    58f6:	44bc      	add	ip, r7
    58f8:	4463      	add	r3, ip
    58fa:	615a      	str	r2, [r3, #20]
            rotate_register[4] = rotate_register[3] + t1;
    58fc:	4b51      	ldr	r3, [pc, #324]	; (5a44 <sw_sha256_process+0x600>)
    58fe:	22b0      	movs	r2, #176	; 0xb0
    5900:	0052      	lsls	r2, r2, #1
    5902:	4694      	mov	ip, r2
    5904:	44bc      	add	ip, r7
    5906:	4463      	add	r3, ip
    5908:	68da      	ldr	r2, [r3, #12]
    590a:	239a      	movs	r3, #154	; 0x9a
    590c:	005b      	lsls	r3, r3, #1
    590e:	18fb      	adds	r3, r7, r3
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	18d2      	adds	r2, r2, r3
    5914:	4b4b      	ldr	r3, [pc, #300]	; (5a44 <sw_sha256_process+0x600>)
    5916:	21b0      	movs	r1, #176	; 0xb0
    5918:	0049      	lsls	r1, r1, #1
    591a:	468c      	mov	ip, r1
    591c:	44bc      	add	ip, r7
    591e:	4463      	add	r3, ip
    5920:	611a      	str	r2, [r3, #16]
            rotate_register[3] = rotate_register[2];
    5922:	4b48      	ldr	r3, [pc, #288]	; (5a44 <sw_sha256_process+0x600>)
    5924:	22b0      	movs	r2, #176	; 0xb0
    5926:	0052      	lsls	r2, r2, #1
    5928:	4694      	mov	ip, r2
    592a:	44bc      	add	ip, r7
    592c:	4463      	add	r3, ip
    592e:	689a      	ldr	r2, [r3, #8]
    5930:	4b44      	ldr	r3, [pc, #272]	; (5a44 <sw_sha256_process+0x600>)
    5932:	21b0      	movs	r1, #176	; 0xb0
    5934:	0049      	lsls	r1, r1, #1
    5936:	468c      	mov	ip, r1
    5938:	44bc      	add	ip, r7
    593a:	4463      	add	r3, ip
    593c:	60da      	str	r2, [r3, #12]
            rotate_register[2] = rotate_register[1];
    593e:	4b41      	ldr	r3, [pc, #260]	; (5a44 <sw_sha256_process+0x600>)
    5940:	22b0      	movs	r2, #176	; 0xb0
    5942:	0052      	lsls	r2, r2, #1
    5944:	4694      	mov	ip, r2
    5946:	44bc      	add	ip, r7
    5948:	4463      	add	r3, ip
    594a:	685a      	ldr	r2, [r3, #4]
    594c:	4b3d      	ldr	r3, [pc, #244]	; (5a44 <sw_sha256_process+0x600>)
    594e:	21b0      	movs	r1, #176	; 0xb0
    5950:	0049      	lsls	r1, r1, #1
    5952:	468c      	mov	ip, r1
    5954:	44bc      	add	ip, r7
    5956:	4463      	add	r3, ip
    5958:	609a      	str	r2, [r3, #8]
            rotate_register[1] = rotate_register[0];
    595a:	4b3a      	ldr	r3, [pc, #232]	; (5a44 <sw_sha256_process+0x600>)
    595c:	22b0      	movs	r2, #176	; 0xb0
    595e:	0052      	lsls	r2, r2, #1
    5960:	4694      	mov	ip, r2
    5962:	44bc      	add	ip, r7
    5964:	4463      	add	r3, ip
    5966:	681a      	ldr	r2, [r3, #0]
    5968:	4b36      	ldr	r3, [pc, #216]	; (5a44 <sw_sha256_process+0x600>)
    596a:	21b0      	movs	r1, #176	; 0xb0
    596c:	0049      	lsls	r1, r1, #1
    596e:	468c      	mov	ip, r1
    5970:	44bc      	add	ip, r7
    5972:	4463      	add	r3, ip
    5974:	605a      	str	r2, [r3, #4]
            rotate_register[0] = t1 + t2;
    5976:	239a      	movs	r3, #154	; 0x9a
    5978:	005b      	lsls	r3, r3, #1
    597a:	18fb      	adds	r3, r7, r3
    597c:	681a      	ldr	r2, [r3, #0]
    597e:	239e      	movs	r3, #158	; 0x9e
    5980:	005b      	lsls	r3, r3, #1
    5982:	18fb      	adds	r3, r7, r3
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	18d2      	adds	r2, r2, r3
    5988:	4b2e      	ldr	r3, [pc, #184]	; (5a44 <sw_sha256_process+0x600>)
    598a:	21b0      	movs	r1, #176	; 0xb0
    598c:	0049      	lsls	r1, r1, #1
    598e:	468c      	mov	ip, r1
    5990:	44bc      	add	ip, r7
    5992:	4463      	add	r3, ip
    5994:	601a      	str	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    5996:	23ae      	movs	r3, #174	; 0xae
    5998:	005b      	lsls	r3, r3, #1
    599a:	18fb      	adds	r3, r7, r3
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	3301      	adds	r3, #1
    59a0:	22ae      	movs	r2, #174	; 0xae
    59a2:	0052      	lsls	r2, r2, #1
    59a4:	18ba      	adds	r2, r7, r2
    59a6:	6013      	str	r3, [r2, #0]
    59a8:	23ae      	movs	r3, #174	; 0xae
    59aa:	005b      	lsls	r3, r3, #1
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	681b      	ldr	r3, [r3, #0]
    59b0:	2b3f      	cmp	r3, #63	; 0x3f
    59b2:	dc00      	bgt.n	59b6 <sw_sha256_process+0x572>
    59b4:	e6a6      	b.n	5704 <sw_sha256_process+0x2c0>
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
    59b6:	2300      	movs	r3, #0
    59b8:	22ae      	movs	r2, #174	; 0xae
    59ba:	0052      	lsls	r2, r2, #1
    59bc:	18ba      	adds	r2, r7, r2
    59be:	6013      	str	r3, [r2, #0]
    59c0:	e025      	b.n	5a0e <sw_sha256_process+0x5ca>
            ctx->hash[i] += rotate_register[i];
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	22ae      	movs	r2, #174	; 0xae
    59c6:	0052      	lsls	r2, r2, #1
    59c8:	18ba      	adds	r2, r7, r2
    59ca:	6812      	ldr	r2, [r2, #0]
    59cc:	3222      	adds	r2, #34	; 0x22
    59ce:	0092      	lsls	r2, r2, #2
    59d0:	58d2      	ldr	r2, [r2, r3]
    59d2:	4b1c      	ldr	r3, [pc, #112]	; (5a44 <sw_sha256_process+0x600>)
    59d4:	21b0      	movs	r1, #176	; 0xb0
    59d6:	0049      	lsls	r1, r1, #1
    59d8:	468c      	mov	ip, r1
    59da:	44bc      	add	ip, r7
    59dc:	4463      	add	r3, ip
    59de:	21ae      	movs	r1, #174	; 0xae
    59e0:	0049      	lsls	r1, r1, #1
    59e2:	1879      	adds	r1, r7, r1
    59e4:	6809      	ldr	r1, [r1, #0]
    59e6:	0089      	lsls	r1, r1, #2
    59e8:	58cb      	ldr	r3, [r1, r3]
    59ea:	18d1      	adds	r1, r2, r3
    59ec:	68fb      	ldr	r3, [r7, #12]
    59ee:	22ae      	movs	r2, #174	; 0xae
    59f0:	0052      	lsls	r2, r2, #1
    59f2:	18ba      	adds	r2, r7, r2
    59f4:	6812      	ldr	r2, [r2, #0]
    59f6:	3222      	adds	r2, #34	; 0x22
    59f8:	0092      	lsls	r2, r2, #2
    59fa:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
    59fc:	23ae      	movs	r3, #174	; 0xae
    59fe:	005b      	lsls	r3, r3, #1
    5a00:	18fb      	adds	r3, r7, r3
    5a02:	681b      	ldr	r3, [r3, #0]
    5a04:	3301      	adds	r3, #1
    5a06:	22ae      	movs	r2, #174	; 0xae
    5a08:	0052      	lsls	r2, r2, #1
    5a0a:	18ba      	adds	r2, r7, r2
    5a0c:	6013      	str	r3, [r2, #0]
    5a0e:	23ae      	movs	r3, #174	; 0xae
    5a10:	005b      	lsls	r3, r3, #1
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	2b07      	cmp	r3, #7
    5a18:	ddd3      	ble.n	59c2 <sw_sha256_process+0x57e>
    for (block = 0; block < block_count; block++)
    5a1a:	23ac      	movs	r3, #172	; 0xac
    5a1c:	005b      	lsls	r3, r3, #1
    5a1e:	18fb      	adds	r3, r7, r3
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	3301      	adds	r3, #1
    5a24:	22ac      	movs	r2, #172	; 0xac
    5a26:	0052      	lsls	r2, r2, #1
    5a28:	18ba      	adds	r2, r7, r2
    5a2a:	6013      	str	r3, [r2, #0]
    5a2c:	23ac      	movs	r3, #172	; 0xac
    5a2e:	005b      	lsls	r3, r3, #1
    5a30:	18fb      	adds	r3, r7, r3
    5a32:	681a      	ldr	r2, [r3, #0]
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	429a      	cmp	r2, r3
    5a38:	d200      	bcs.n	5a3c <sw_sha256_process+0x5f8>
    5a3a:	e519      	b.n	5470 <sw_sha256_process+0x2c>
    }
}
    5a3c:	46c0      	nop			; (mov r8, r8)
    5a3e:	46bd      	mov	sp, r7
    5a40:	b058      	add	sp, #352	; 0x160
    5a42:	bd80      	pop	{r7, pc}
    5a44:	fffffeb4 	.word	0xfffffeb4
    5a48:	0000c3a4 	.word	0x0000c3a4
    5a4c:	fffffed4 	.word	0xfffffed4

00005a50 <sw_sha256_init>:

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    5a50:	b580      	push	{r7, lr}
    5a52:	b084      	sub	sp, #16
    5a54:	af00      	add	r7, sp, #0
    5a56:	6078      	str	r0, [r7, #4]
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	22a8      	movs	r2, #168	; 0xa8
    5a5c:	2100      	movs	r1, #0
    5a5e:	0018      	movs	r0, r3
    5a60:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <sw_sha256_init+0x40>)
    5a62:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    5a64:	2300      	movs	r3, #0
    5a66:	60fb      	str	r3, [r7, #12]
    5a68:	e00b      	b.n	5a82 <sw_sha256_init+0x32>
        ctx->hash[i] = hash_init[i];
    5a6a:	4b0a      	ldr	r3, [pc, #40]	; (5a94 <sw_sha256_init+0x44>)
    5a6c:	68fa      	ldr	r2, [r7, #12]
    5a6e:	0092      	lsls	r2, r2, #2
    5a70:	58d1      	ldr	r1, [r2, r3]
    5a72:	687b      	ldr	r3, [r7, #4]
    5a74:	68fa      	ldr	r2, [r7, #12]
    5a76:	3222      	adds	r2, #34	; 0x22
    5a78:	0092      	lsls	r2, r2, #2
    5a7a:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 8; i++)
    5a7c:	68fb      	ldr	r3, [r7, #12]
    5a7e:	3301      	adds	r3, #1
    5a80:	60fb      	str	r3, [r7, #12]
    5a82:	68fb      	ldr	r3, [r7, #12]
    5a84:	2b07      	cmp	r3, #7
    5a86:	ddf0      	ble.n	5a6a <sw_sha256_init+0x1a>
}
    5a88:	46c0      	nop			; (mov r8, r8)
    5a8a:	46bd      	mov	sp, r7
    5a8c:	b004      	add	sp, #16
    5a8e:	bd80      	pop	{r7, pc}
    5a90:	0000ad79 	.word	0x0000ad79
    5a94:	0000c4a4 	.word	0x0000c4a4

00005a98 <sw_sha256_update>:

void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b088      	sub	sp, #32
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	60f8      	str	r0, [r7, #12]
    5aa0:	60b9      	str	r1, [r7, #8]
    5aa2:	607a      	str	r2, [r7, #4]
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    5aa4:	68fb      	ldr	r3, [r7, #12]
    5aa6:	685b      	ldr	r3, [r3, #4]
    5aa8:	2240      	movs	r2, #64	; 0x40
    5aaa:	1ad3      	subs	r3, r2, r3
    5aac:	61fb      	str	r3, [r7, #28]
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    5aae:	69fa      	ldr	r2, [r7, #28]
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	4293      	cmp	r3, r2
    5ab4:	d900      	bls.n	5ab8 <sw_sha256_update+0x20>
    5ab6:	0013      	movs	r3, r2
    5ab8:	61bb      	str	r3, [r7, #24]

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    5aba:	68fb      	ldr	r3, [r7, #12]
    5abc:	685b      	ldr	r3, [r3, #4]
    5abe:	3308      	adds	r3, #8
    5ac0:	68fa      	ldr	r2, [r7, #12]
    5ac2:	18d3      	adds	r3, r2, r3
    5ac4:	69ba      	ldr	r2, [r7, #24]
    5ac6:	68b9      	ldr	r1, [r7, #8]
    5ac8:	0018      	movs	r0, r3
    5aca:	4b22      	ldr	r3, [pc, #136]	; (5b54 <sw_sha256_update+0xbc>)
    5acc:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	685a      	ldr	r2, [r3, #4]
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	18d3      	adds	r3, r2, r3
    5ad6:	2b3f      	cmp	r3, #63	; 0x3f
    5ad8:	d806      	bhi.n	5ae8 <sw_sha256_update+0x50>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	685a      	ldr	r2, [r3, #4]
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	18d2      	adds	r2, r2, r3
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	605a      	str	r2, [r3, #4]
        return;
    5ae6:	e031      	b.n	5b4c <sw_sha256_update+0xb4>
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	3308      	adds	r3, #8
    5aec:	0019      	movs	r1, r3
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	2201      	movs	r2, #1
    5af2:	0018      	movs	r0, r3
    5af4:	4b18      	ldr	r3, [pc, #96]	; (5b58 <sw_sha256_update+0xc0>)
    5af6:	4798      	blx	r3

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
    5af8:	687a      	ldr	r2, [r7, #4]
    5afa:	69bb      	ldr	r3, [r7, #24]
    5afc:	1ad3      	subs	r3, r2, r3
    5afe:	607b      	str	r3, [r7, #4]
    block_count = msg_size / SHA256_BLOCK_SIZE;
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	099b      	lsrs	r3, r3, #6
    5b04:	617b      	str	r3, [r7, #20]
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    5b06:	68ba      	ldr	r2, [r7, #8]
    5b08:	69bb      	ldr	r3, [r7, #24]
    5b0a:	18d1      	adds	r1, r2, r3
    5b0c:	697a      	ldr	r2, [r7, #20]
    5b0e:	68fb      	ldr	r3, [r7, #12]
    5b10:	0018      	movs	r0, r3
    5b12:	4b11      	ldr	r3, [pc, #68]	; (5b58 <sw_sha256_update+0xc0>)
    5b14:	4798      	blx	r3

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    5b16:	68fb      	ldr	r3, [r7, #12]
    5b18:	681a      	ldr	r2, [r3, #0]
    5b1a:	697b      	ldr	r3, [r7, #20]
    5b1c:	3301      	adds	r3, #1
    5b1e:	019b      	lsls	r3, r3, #6
    5b20:	18d2      	adds	r2, r2, r3
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	601a      	str	r2, [r3, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	223f      	movs	r2, #63	; 0x3f
    5b2a:	401a      	ands	r2, r3
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	605a      	str	r2, [r3, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	3308      	adds	r3, #8
    5b34:	0018      	movs	r0, r3
    5b36:	697b      	ldr	r3, [r7, #20]
    5b38:	019a      	lsls	r2, r3, #6
    5b3a:	69bb      	ldr	r3, [r7, #24]
    5b3c:	18d3      	adds	r3, r2, r3
    5b3e:	68ba      	ldr	r2, [r7, #8]
    5b40:	18d1      	adds	r1, r2, r3
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	685b      	ldr	r3, [r3, #4]
    5b46:	001a      	movs	r2, r3
    5b48:	4b02      	ldr	r3, [pc, #8]	; (5b54 <sw_sha256_update+0xbc>)
    5b4a:	4798      	blx	r3
}
    5b4c:	46bd      	mov	sp, r7
    5b4e:	b008      	add	sp, #32
    5b50:	bd80      	pop	{r7, pc}
    5b52:	46c0      	nop			; (mov r8, r8)
    5b54:	0000ad67 	.word	0x0000ad67
    5b58:	00005445 	.word	0x00005445

00005b5c <sw_sha256_final>:

void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    5b5c:	b580      	push	{r7, lr}
    5b5e:	b086      	sub	sp, #24
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
    5b64:	6039      	str	r1, [r7, #0]
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	681a      	ldr	r2, [r3, #0]
    5b6a:	687b      	ldr	r3, [r7, #4]
    5b6c:	685b      	ldr	r3, [r3, #4]
    5b6e:	18d2      	adds	r2, r2, r3
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	601a      	str	r2, [r3, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	681b      	ldr	r3, [r3, #0]
    5b78:	00db      	lsls	r3, r3, #3
    5b7a:	60fb      	str	r3, [r7, #12]

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	685b      	ldr	r3, [r3, #4]
    5b80:	2209      	movs	r2, #9
    5b82:	4252      	negs	r2, r2
    5b84:	1ad3      	subs	r3, r2, r3
    5b86:	223f      	movs	r2, #63	; 0x3f
    5b88:	4013      	ands	r3, r2
    5b8a:	60bb      	str	r3, [r7, #8]

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	685b      	ldr	r3, [r3, #4]
    5b90:	1c59      	adds	r1, r3, #1
    5b92:	687a      	ldr	r2, [r7, #4]
    5b94:	6051      	str	r1, [r2, #4]
    5b96:	687a      	ldr	r2, [r7, #4]
    5b98:	18d3      	adds	r3, r2, r3
    5b9a:	2280      	movs	r2, #128	; 0x80
    5b9c:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	685b      	ldr	r3, [r3, #4]
    5ba2:	3308      	adds	r3, #8
    5ba4:	687a      	ldr	r2, [r7, #4]
    5ba6:	18d0      	adds	r0, r2, r3
    5ba8:	68bb      	ldr	r3, [r7, #8]
    5baa:	3304      	adds	r3, #4
    5bac:	001a      	movs	r2, r3
    5bae:	2100      	movs	r1, #0
    5bb0:	4b37      	ldr	r3, [pc, #220]	; (5c90 <sw_sha256_final+0x134>)
    5bb2:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    5bb4:	687b      	ldr	r3, [r7, #4]
    5bb6:	685a      	ldr	r2, [r3, #4]
    5bb8:	68bb      	ldr	r3, [r7, #8]
    5bba:	18d3      	adds	r3, r2, r3
    5bbc:	1d1a      	adds	r2, r3, #4
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	605a      	str	r2, [r3, #4]

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	685b      	ldr	r3, [r3, #4]
    5bc6:	1c59      	adds	r1, r3, #1
    5bc8:	687a      	ldr	r2, [r7, #4]
    5bca:	6051      	str	r1, [r2, #4]
    5bcc:	68fa      	ldr	r2, [r7, #12]
    5bce:	0e12      	lsrs	r2, r2, #24
    5bd0:	b2d1      	uxtb	r1, r2
    5bd2:	687a      	ldr	r2, [r7, #4]
    5bd4:	18d3      	adds	r3, r2, r3
    5bd6:	1c0a      	adds	r2, r1, #0
    5bd8:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	685b      	ldr	r3, [r3, #4]
    5bde:	1c59      	adds	r1, r3, #1
    5be0:	687a      	ldr	r2, [r7, #4]
    5be2:	6051      	str	r1, [r2, #4]
    5be4:	68fa      	ldr	r2, [r7, #12]
    5be6:	0c12      	lsrs	r2, r2, #16
    5be8:	b2d1      	uxtb	r1, r2
    5bea:	687a      	ldr	r2, [r7, #4]
    5bec:	18d3      	adds	r3, r2, r3
    5bee:	1c0a      	adds	r2, r1, #0
    5bf0:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	685b      	ldr	r3, [r3, #4]
    5bf6:	1c59      	adds	r1, r3, #1
    5bf8:	687a      	ldr	r2, [r7, #4]
    5bfa:	6051      	str	r1, [r2, #4]
    5bfc:	68fa      	ldr	r2, [r7, #12]
    5bfe:	0a12      	lsrs	r2, r2, #8
    5c00:	b2d1      	uxtb	r1, r2
    5c02:	687a      	ldr	r2, [r7, #4]
    5c04:	18d3      	adds	r3, r2, r3
    5c06:	1c0a      	adds	r2, r1, #0
    5c08:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	685b      	ldr	r3, [r3, #4]
    5c0e:	1c59      	adds	r1, r3, #1
    5c10:	687a      	ldr	r2, [r7, #4]
    5c12:	6051      	str	r1, [r2, #4]
    5c14:	68fa      	ldr	r2, [r7, #12]
    5c16:	b2d1      	uxtb	r1, r2
    5c18:	687a      	ldr	r2, [r7, #4]
    5c1a:	18d3      	adds	r3, r2, r3
    5c1c:	1c0a      	adds	r2, r1, #0
    5c1e:	721a      	strb	r2, [r3, #8]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	3308      	adds	r3, #8
    5c24:	0019      	movs	r1, r3
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	685b      	ldr	r3, [r3, #4]
    5c2a:	099a      	lsrs	r2, r3, #6
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	0018      	movs	r0, r3
    5c30:	4b18      	ldr	r3, [pc, #96]	; (5c94 <sw_sha256_final+0x138>)
    5c32:	4798      	blx	r3

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    5c34:	2300      	movs	r3, #0
    5c36:	617b      	str	r3, [r7, #20]
    5c38:	e023      	b.n	5c82 <sw_sha256_final+0x126>
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    5c3a:	2303      	movs	r3, #3
    5c3c:	613b      	str	r3, [r7, #16]
    5c3e:	e01a      	b.n	5c76 <sw_sha256_final+0x11a>
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    5c40:	697b      	ldr	r3, [r7, #20]
    5c42:	009a      	lsls	r2, r3, #2
    5c44:	693b      	ldr	r3, [r7, #16]
    5c46:	18d3      	adds	r3, r2, r3
    5c48:	683a      	ldr	r2, [r7, #0]
    5c4a:	18d3      	adds	r3, r2, r3
    5c4c:	687a      	ldr	r2, [r7, #4]
    5c4e:	6979      	ldr	r1, [r7, #20]
    5c50:	3122      	adds	r1, #34	; 0x22
    5c52:	0089      	lsls	r1, r1, #2
    5c54:	588a      	ldr	r2, [r1, r2]
    5c56:	b2d2      	uxtb	r2, r2
    5c58:	701a      	strb	r2, [r3, #0]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    5c5a:	693b      	ldr	r3, [r7, #16]
    5c5c:	3b01      	subs	r3, #1
    5c5e:	613b      	str	r3, [r7, #16]
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	697a      	ldr	r2, [r7, #20]
    5c64:	3222      	adds	r2, #34	; 0x22
    5c66:	0092      	lsls	r2, r2, #2
    5c68:	58d3      	ldr	r3, [r2, r3]
    5c6a:	0a19      	lsrs	r1, r3, #8
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	697a      	ldr	r2, [r7, #20]
    5c70:	3222      	adds	r2, #34	; 0x22
    5c72:	0092      	lsls	r2, r2, #2
    5c74:	50d1      	str	r1, [r2, r3]
    5c76:	693b      	ldr	r3, [r7, #16]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	dae1      	bge.n	5c40 <sw_sha256_final+0xe4>
    for (i = 0; i < 8; i++)
    5c7c:	697b      	ldr	r3, [r7, #20]
    5c7e:	3301      	adds	r3, #1
    5c80:	617b      	str	r3, [r7, #20]
    5c82:	697b      	ldr	r3, [r7, #20]
    5c84:	2b07      	cmp	r3, #7
    5c86:	ddd8      	ble.n	5c3a <sw_sha256_final+0xde>
}
    5c88:	46c0      	nop			; (mov r8, r8)
    5c8a:	46bd      	mov	sp, r7
    5c8c:	b006      	add	sp, #24
    5c8e:	bd80      	pop	{r7, pc}
    5c90:	0000ad79 	.word	0x0000ad79
    5c94:	00005445 	.word	0x00005445

00005c98 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate datastructure
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	b084      	sub	sp, #16
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
    5ca0:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    5ca2:	230f      	movs	r3, #15
    5ca4:	18fb      	adds	r3, r7, r3
    5ca6:	22f0      	movs	r2, #240	; 0xf0
    5ca8:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	2b05      	cmp	r3, #5
    5cb0:	d824      	bhi.n	5cfc <hal_iface_init+0x64>
    5cb2:	009a      	lsls	r2, r3, #2
    5cb4:	4b16      	ldr	r3, [pc, #88]	; (5d10 <hal_iface_init+0x78>)
    5cb6:	18d3      	adds	r3, r2, r3
    5cb8:	681b      	ldr	r3, [r3, #0]
    5cba:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    5cbc:	683b      	ldr	r3, [r7, #0]
    5cbe:	4a15      	ldr	r2, [pc, #84]	; (5d14 <hal_iface_init+0x7c>)
    5cc0:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	4a14      	ldr	r2, [pc, #80]	; (5d18 <hal_iface_init+0x80>)
    5cc6:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
    5cc8:	683b      	ldr	r3, [r7, #0]
    5cca:	4a14      	ldr	r2, [pc, #80]	; (5d1c <hal_iface_init+0x84>)
    5ccc:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
    5cce:	683b      	ldr	r3, [r7, #0]
    5cd0:	4a13      	ldr	r2, [pc, #76]	; (5d20 <hal_iface_init+0x88>)
    5cd2:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
    5cd4:	683b      	ldr	r3, [r7, #0]
    5cd6:	4a13      	ldr	r2, [pc, #76]	; (5d24 <hal_iface_init+0x8c>)
    5cd8:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
    5cda:	683b      	ldr	r3, [r7, #0]
    5cdc:	4a12      	ldr	r2, [pc, #72]	; (5d28 <hal_iface_init+0x90>)
    5cde:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
    5ce0:	683b      	ldr	r3, [r7, #0]
    5ce2:	4a12      	ldr	r2, [pc, #72]	; (5d2c <hal_iface_init+0x94>)
    5ce4:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
    5ce6:	683b      	ldr	r3, [r7, #0]
    5ce8:	4a11      	ldr	r2, [pc, #68]	; (5d30 <hal_iface_init+0x98>)
    5cea:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
    5cec:	683b      	ldr	r3, [r7, #0]
    5cee:	2200      	movs	r2, #0
    5cf0:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
    5cf2:	230f      	movs	r3, #15
    5cf4:	18fb      	adds	r3, r7, r3
    5cf6:	2200      	movs	r2, #0
    5cf8:	701a      	strb	r2, [r3, #0]
        #endif
        break;
    5cfa:	e002      	b.n	5d02 <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
    5cfc:	46c0      	nop			; (mov r8, r8)
    5cfe:	e000      	b.n	5d02 <hal_iface_init+0x6a>
        break;
    5d00:	46c0      	nop			; (mov r8, r8)
    }
    return status;
    5d02:	230f      	movs	r3, #15
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	781b      	ldrb	r3, [r3, #0]
}
    5d08:	0018      	movs	r0, r3
    5d0a:	46bd      	mov	sp, r7
    5d0c:	b004      	add	sp, #16
    5d0e:	bd80      	pop	{r7, pc}
    5d10:	0000c4c4 	.word	0x0000c4c4
    5d14:	00005f81 	.word	0x00005f81
    5d18:	00006145 	.word	0x00006145
    5d1c:	000061fd 	.word	0x000061fd
    5d20:	00006159 	.word	0x00006159
    5d24:	000065c5 	.word	0x000065c5
    5d28:	000063ed 	.word	0x000063ed
    5d2c:	00006535 	.word	0x00006535
    5d30:	00006655 	.word	0x00006655

00005d34 <hal_iface_release>:
 * \param[in] ifacetype - the type of physical interface to release
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType ifacetype, void *hal_data)
{
    5d34:	b590      	push	{r4, r7, lr}
    5d36:	b085      	sub	sp, #20
    5d38:	af00      	add	r7, sp, #0
    5d3a:	0002      	movs	r2, r0
    5d3c:	6039      	str	r1, [r7, #0]
    5d3e:	1dfb      	adds	r3, r7, #7
    5d40:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    5d42:	230f      	movs	r3, #15
    5d44:	18fb      	adds	r3, r7, r3
    5d46:	22e1      	movs	r2, #225	; 0xe1
    5d48:	701a      	strb	r2, [r3, #0]

    switch (ifacetype)
    5d4a:	1dfb      	adds	r3, r7, #7
    5d4c:	781b      	ldrb	r3, [r3, #0]
    5d4e:	2b05      	cmp	r3, #5
    5d50:	d80d      	bhi.n	5d6e <hal_iface_release+0x3a>
    5d52:	009a      	lsls	r2, r3, #2
    5d54:	4b0b      	ldr	r3, [pc, #44]	; (5d84 <hal_iface_release+0x50>)
    5d56:	18d3      	adds	r3, r2, r3
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
            #ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    5d5c:	230f      	movs	r3, #15
    5d5e:	18fc      	adds	r4, r7, r3
    5d60:	683b      	ldr	r3, [r7, #0]
    5d62:	0018      	movs	r0, r3
    5d64:	4b08      	ldr	r3, [pc, #32]	; (5d88 <hal_iface_release+0x54>)
    5d66:	4798      	blx	r3
    5d68:	0003      	movs	r3, r0
    5d6a:	7023      	strb	r3, [r4, #0]
            #endif
        break;
    5d6c:	e002      	b.n	5d74 <hal_iface_release+0x40>
#ifdef ATCA_HAL_SIM
        status = hal_sim_release(hal_data);
#endif
        break;
    default:
        break;
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	e000      	b.n	5d74 <hal_iface_release+0x40>
        break;
    5d72:	46c0      	nop			; (mov r8, r8)
    }

    return status;
    5d74:	230f      	movs	r3, #15
    5d76:	18fb      	adds	r3, r7, r3
    5d78:	781b      	ldrb	r3, [r3, #0]
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b005      	add	sp, #20
    5d80:	bd90      	pop	{r4, r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	0000c4dc 	.word	0x0000c4dc
    5d88:	00006655 	.word	0x00006655

00005d8c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5d8c:	b580      	push	{r7, lr}
    5d8e:	b082      	sub	sp, #8
    5d90:	af00      	add	r7, sp, #0
    5d92:	0002      	movs	r2, r0
    5d94:	1dfb      	adds	r3, r7, #7
    5d96:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5d98:	4b06      	ldr	r3, [pc, #24]	; (5db4 <system_interrupt_enable+0x28>)
    5d9a:	1dfa      	adds	r2, r7, #7
    5d9c:	7812      	ldrb	r2, [r2, #0]
    5d9e:	0011      	movs	r1, r2
    5da0:	221f      	movs	r2, #31
    5da2:	400a      	ands	r2, r1
    5da4:	2101      	movs	r1, #1
    5da6:	4091      	lsls	r1, r2
    5da8:	000a      	movs	r2, r1
    5daa:	601a      	str	r2, [r3, #0]
}
    5dac:	46c0      	nop			; (mov r8, r8)
    5dae:	46bd      	mov	sp, r7
    5db0:	b002      	add	sp, #8
    5db2:	bd80      	pop	{r7, pc}
    5db4:	e000e100 	.word	0xe000e100

00005db8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    5db8:	b580      	push	{r7, lr}
    5dba:	b082      	sub	sp, #8
    5dbc:	af00      	add	r7, sp, #0
    5dbe:	0002      	movs	r2, r0
    5dc0:	1dfb      	adds	r3, r7, #7
    5dc2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5dc4:	4a07      	ldr	r2, [pc, #28]	; (5de4 <system_interrupt_disable+0x2c>)
    5dc6:	1dfb      	adds	r3, r7, #7
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	0019      	movs	r1, r3
    5dcc:	231f      	movs	r3, #31
    5dce:	400b      	ands	r3, r1
    5dd0:	2101      	movs	r1, #1
    5dd2:	4099      	lsls	r1, r3
    5dd4:	000b      	movs	r3, r1
    5dd6:	0019      	movs	r1, r3
    5dd8:	2380      	movs	r3, #128	; 0x80
    5dda:	50d1      	str	r1, [r2, r3]
}
    5ddc:	46c0      	nop			; (mov r8, r8)
    5dde:	46bd      	mov	sp, r7
    5de0:	b002      	add	sp, #8
    5de2:	bd80      	pop	{r7, pc}
    5de4:	e000e100 	.word	0xe000e100

00005de8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	69db      	ldr	r3, [r3, #28]
    5dfa:	2207      	movs	r2, #7
    5dfc:	4013      	ands	r3, r2
    5dfe:	1e5a      	subs	r2, r3, #1
    5e00:	4193      	sbcs	r3, r2
    5e02:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5e04:	0018      	movs	r0, r3
    5e06:	46bd      	mov	sp, r7
    5e08:	b004      	add	sp, #16
    5e0a:	bd80      	pop	{r7, pc}

00005e0c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b082      	sub	sp, #8
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5e14:	46c0      	nop			; (mov r8, r8)
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	0018      	movs	r0, r3
    5e1a:	4b04      	ldr	r3, [pc, #16]	; (5e2c <_i2c_master_wait_for_sync+0x20>)
    5e1c:	4798      	blx	r3
    5e1e:	1e03      	subs	r3, r0, #0
    5e20:	d1f9      	bne.n	5e16 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	46bd      	mov	sp, r7
    5e26:	b002      	add	sp, #8
    5e28:	bd80      	pop	{r7, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	00005de9 	.word	0x00005de9

00005e30 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b082      	sub	sp, #8
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	2264      	movs	r2, #100	; 0x64
    5e3c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	4a1b      	ldr	r2, [pc, #108]	; (5eb0 <i2c_master_get_config_defaults+0x80>)
    5e42:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	2200      	movs	r2, #0
    5e48:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	2200      	movs	r2, #0
    5e4e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	2200      	movs	r2, #0
    5e54:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	2280      	movs	r2, #128	; 0x80
    5e5a:	0392      	lsls	r2, r2, #14
    5e5c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	2201      	movs	r2, #1
    5e62:	4252      	negs	r2, r2
    5e64:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	2201      	movs	r2, #1
    5e6a:	4252      	negs	r2, r2
    5e6c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	2200      	movs	r2, #0
    5e72:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	2200      	movs	r2, #0
    5e78:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    5e7a:	687b      	ldr	r3, [r7, #4]
    5e7c:	2224      	movs	r2, #36	; 0x24
    5e7e:	2100      	movs	r1, #0
    5e80:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	2200      	movs	r2, #0
    5e86:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	222c      	movs	r2, #44	; 0x2c
    5e8c:	2100      	movs	r1, #0
    5e8e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	222d      	movs	r2, #45	; 0x2d
    5e94:	2100      	movs	r1, #0
    5e96:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	222e      	movs	r2, #46	; 0x2e
    5e9c:	2100      	movs	r1, #0
    5e9e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	22d7      	movs	r2, #215	; 0xd7
    5ea4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5ea6:	46c0      	nop			; (mov r8, r8)
    5ea8:	46bd      	mov	sp, r7
    5eaa:	b002      	add	sp, #8
    5eac:	bd80      	pop	{r7, pc}
    5eae:	46c0      	nop			; (mov r8, r8)
    5eb0:	00000d48 	.word	0x00000d48

00005eb4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b084      	sub	sp, #16
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	681b      	ldr	r3, [r3, #0]
    5ec0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    5ec2:	2300      	movs	r3, #0
    5ec4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	0018      	movs	r0, r3
    5eca:	4b14      	ldr	r3, [pc, #80]	; (5f1c <i2c_master_enable+0x68>)
    5ecc:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5ece:	68bb      	ldr	r3, [r7, #8]
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	2202      	movs	r2, #2
    5ed4:	431a      	orrs	r2, r3
    5ed6:	68bb      	ldr	r3, [r7, #8]
    5ed8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5eda:	687b      	ldr	r3, [r7, #4]
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	0018      	movs	r0, r3
    5ee0:	4b0f      	ldr	r3, [pc, #60]	; (5f20 <i2c_master_enable+0x6c>)
    5ee2:	4798      	blx	r3
    5ee4:	0003      	movs	r3, r0
    5ee6:	0018      	movs	r0, r3
    5ee8:	4b0e      	ldr	r3, [pc, #56]	; (5f24 <i2c_master_enable+0x70>)
    5eea:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5eec:	e00c      	b.n	5f08 <i2c_master_enable+0x54>
		timeout_counter++;
    5eee:	68fb      	ldr	r3, [r7, #12]
    5ef0:	3301      	adds	r3, #1
    5ef2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	88db      	ldrh	r3, [r3, #6]
    5ef8:	001a      	movs	r2, r3
    5efa:	68fb      	ldr	r3, [r7, #12]
    5efc:	429a      	cmp	r2, r3
    5efe:	d803      	bhi.n	5f08 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5f00:	68bb      	ldr	r3, [r7, #8]
    5f02:	2210      	movs	r2, #16
    5f04:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    5f06:	e006      	b.n	5f16 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5f08:	68bb      	ldr	r3, [r7, #8]
    5f0a:	8b5b      	ldrh	r3, [r3, #26]
    5f0c:	b29b      	uxth	r3, r3
    5f0e:	001a      	movs	r2, r3
    5f10:	2310      	movs	r3, #16
    5f12:	4013      	ands	r3, r2
    5f14:	d0eb      	beq.n	5eee <i2c_master_enable+0x3a>
		}
	}
}
    5f16:	46bd      	mov	sp, r7
    5f18:	b004      	add	sp, #16
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	00005e0d 	.word	0x00005e0d
    5f20:	0000796d 	.word	0x0000796d
    5f24:	00005d8d 	.word	0x00005d8d

00005f28 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b084      	sub	sp, #16
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	681b      	ldr	r3, [r3, #0]
    5f34:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	0018      	movs	r0, r3
    5f3c:	4b0d      	ldr	r3, [pc, #52]	; (5f74 <i2c_master_disable+0x4c>)
    5f3e:	4798      	blx	r3
    5f40:	0003      	movs	r3, r0
    5f42:	0018      	movs	r0, r3
    5f44:	4b0c      	ldr	r3, [pc, #48]	; (5f78 <i2c_master_disable+0x50>)
    5f46:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	0018      	movs	r0, r3
    5f4c:	4b0b      	ldr	r3, [pc, #44]	; (5f7c <i2c_master_disable+0x54>)
    5f4e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5f50:	68fb      	ldr	r3, [r7, #12]
    5f52:	2283      	movs	r2, #131	; 0x83
    5f54:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5f56:	68fb      	ldr	r3, [r7, #12]
    5f58:	2283      	movs	r2, #131	; 0x83
    5f5a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5f5c:	68fb      	ldr	r3, [r7, #12]
    5f5e:	681b      	ldr	r3, [r3, #0]
    5f60:	2202      	movs	r2, #2
    5f62:	4393      	bics	r3, r2
    5f64:	001a      	movs	r2, r3
    5f66:	68fb      	ldr	r3, [r7, #12]
    5f68:	601a      	str	r2, [r3, #0]

}
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	46bd      	mov	sp, r7
    5f6e:	b004      	add	sp, #16
    5f70:	bd80      	pop	{r7, pc}
    5f72:	46c0      	nop			; (mov r8, r8)
    5f74:	0000796d 	.word	0x0000796d
    5f78:	00005db9 	.word	0x00005db9
    5f7c:	00005e0d 	.word	0x00005e0d

00005f80 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b086      	sub	sp, #24
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
    5f88:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    5f8a:	683b      	ldr	r3, [r7, #0]
    5f8c:	795b      	ldrb	r3, [r3, #5]
    5f8e:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    5f94:	4b5b      	ldr	r3, [pc, #364]	; (6104 <hal_i2c_init+0x184>)
    5f96:	681b      	ldr	r3, [r3, #0]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d10d      	bne.n	5fb8 <hal_i2c_init+0x38>
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    5f9c:	2300      	movs	r3, #0
    5f9e:	617b      	str	r3, [r7, #20]
    5fa0:	e007      	b.n	5fb2 <hal_i2c_init+0x32>
            i2c_hal_data[i] = NULL;
    5fa2:	4b59      	ldr	r3, [pc, #356]	; (6108 <hal_i2c_init+0x188>)
    5fa4:	697a      	ldr	r2, [r7, #20]
    5fa6:	0092      	lsls	r2, r2, #2
    5fa8:	2100      	movs	r1, #0
    5faa:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    5fac:	697b      	ldr	r3, [r7, #20]
    5fae:	3301      	adds	r3, #1
    5fb0:	617b      	str	r3, [r7, #20]
    5fb2:	697b      	ldr	r3, [r7, #20]
    5fb4:	2b05      	cmp	r3, #5
    5fb6:	ddf4      	ble.n	5fa2 <hal_i2c_init+0x22>

    i2c_bus_ref_ct++;  // total across buses
    5fb8:	4b52      	ldr	r3, [pc, #328]	; (6104 <hal_i2c_init+0x184>)
    5fba:	681b      	ldr	r3, [r3, #0]
    5fbc:	1c5a      	adds	r2, r3, #1
    5fbe:	4b51      	ldr	r3, [pc, #324]	; (6104 <hal_i2c_init+0x184>)
    5fc0:	601a      	str	r2, [r3, #0]
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    5fc2:	693b      	ldr	r3, [r7, #16]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	da00      	bge.n	5fca <hal_i2c_init+0x4a>
    5fc8:	e096      	b.n	60f8 <hal_i2c_init+0x178>
    5fca:	693b      	ldr	r3, [r7, #16]
    5fcc:	2b05      	cmp	r3, #5
    5fce:	dd00      	ble.n	5fd2 <hal_i2c_init+0x52>
    5fd0:	e092      	b.n	60f8 <hal_i2c_init+0x178>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
    5fd2:	4b4d      	ldr	r3, [pc, #308]	; (6108 <hal_i2c_init+0x188>)
    5fd4:	693a      	ldr	r2, [r7, #16]
    5fd6:	0092      	lsls	r2, r2, #2
    5fd8:	58d3      	ldr	r3, [r2, r3]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d000      	beq.n	5fe0 <hal_i2c_init+0x60>
    5fde:	e07c      	b.n	60da <hal_i2c_init+0x15a>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    5fe0:	2030      	movs	r0, #48	; 0x30
    5fe2:	4b4a      	ldr	r3, [pc, #296]	; (610c <hal_i2c_init+0x18c>)
    5fe4:	4798      	blx	r3
    5fe6:	0003      	movs	r3, r0
    5fe8:	0019      	movs	r1, r3
    5fea:	4b47      	ldr	r3, [pc, #284]	; (6108 <hal_i2c_init+0x188>)
    5fec:	693a      	ldr	r2, [r7, #16]
    5fee:	0092      	lsls	r2, r2, #2
    5ff0:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    5ff2:	4b45      	ldr	r3, [pc, #276]	; (6108 <hal_i2c_init+0x188>)
    5ff4:	693a      	ldr	r2, [r7, #16]
    5ff6:	0092      	lsls	r2, r2, #2
    5ff8:	58d3      	ldr	r3, [r2, r3]
    5ffa:	2201      	movs	r2, #1
    5ffc:	629a      	str	r2, [r3, #40]	; 0x28
            i2c_master_get_config_defaults(&config_i2c_master);
    5ffe:	4b44      	ldr	r3, [pc, #272]	; (6110 <hal_i2c_init+0x190>)
    6000:	0018      	movs	r0, r3
    6002:	4b44      	ldr	r3, [pc, #272]	; (6114 <hal_i2c_init+0x194>)
    6004:	4798      	blx	r3
                config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif
#ifdef __SAMR30G18A__
                config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    6006:	4b42      	ldr	r3, [pc, #264]	; (6110 <hal_i2c_init+0x190>)
    6008:	4a43      	ldr	r2, [pc, #268]	; (6118 <hal_i2c_init+0x198>)
    600a:	61da      	str	r2, [r3, #28]
                config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    600c:	4b40      	ldr	r3, [pc, #256]	; (6110 <hal_i2c_init+0x190>)
    600e:	4a43      	ldr	r2, [pc, #268]	; (611c <hal_i2c_init+0x19c>)
    6010:	621a      	str	r2, [r3, #32]
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    6012:	683b      	ldr	r3, [r7, #0]
    6014:	6898      	ldr	r0, [r3, #8]
    6016:	4b42      	ldr	r3, [pc, #264]	; (6120 <hal_i2c_init+0x1a0>)
    6018:	22fa      	movs	r2, #250	; 0xfa
    601a:	0091      	lsls	r1, r2, #2
    601c:	4798      	blx	r3
    601e:	0003      	movs	r3, r0
    6020:	001a      	movs	r2, r3
    6022:	4b3b      	ldr	r3, [pc, #236]	; (6110 <hal_i2c_init+0x190>)
    6024:	601a      	str	r2, [r3, #0]

            switch (bus)
    6026:	693b      	ldr	r3, [r7, #16]
    6028:	2b05      	cmp	r3, #5
    602a:	d848      	bhi.n	60be <hal_i2c_init+0x13e>
    602c:	693b      	ldr	r3, [r7, #16]
    602e:	009a      	lsls	r2, r3, #2
    6030:	4b3c      	ldr	r3, [pc, #240]	; (6124 <hal_i2c_init+0x1a4>)
    6032:	18d3      	adds	r3, r2, r3
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    6038:	4b33      	ldr	r3, [pc, #204]	; (6108 <hal_i2c_init+0x188>)
    603a:	693a      	ldr	r2, [r7, #16]
    603c:	0092      	lsls	r2, r2, #2
    603e:	58d3      	ldr	r3, [r2, r3]
    6040:	0018      	movs	r0, r3
    6042:	4a33      	ldr	r2, [pc, #204]	; (6110 <hal_i2c_init+0x190>)
    6044:	2384      	movs	r3, #132	; 0x84
    6046:	05db      	lsls	r3, r3, #23
    6048:	0019      	movs	r1, r3
    604a:	4b37      	ldr	r3, [pc, #220]	; (6128 <hal_i2c_init+0x1a8>)
    604c:	4798      	blx	r3
    604e:	e036      	b.n	60be <hal_i2c_init+0x13e>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    6050:	4b2d      	ldr	r3, [pc, #180]	; (6108 <hal_i2c_init+0x188>)
    6052:	693a      	ldr	r2, [r7, #16]
    6054:	0092      	lsls	r2, r2, #2
    6056:	58d3      	ldr	r3, [r2, r3]
    6058:	0018      	movs	r0, r3
    605a:	4b2d      	ldr	r3, [pc, #180]	; (6110 <hal_i2c_init+0x190>)
    605c:	4933      	ldr	r1, [pc, #204]	; (612c <hal_i2c_init+0x1ac>)
    605e:	001a      	movs	r2, r3
    6060:	4b31      	ldr	r3, [pc, #196]	; (6128 <hal_i2c_init+0x1a8>)
    6062:	4798      	blx	r3
    6064:	e02b      	b.n	60be <hal_i2c_init+0x13e>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    6066:	4b28      	ldr	r3, [pc, #160]	; (6108 <hal_i2c_init+0x188>)
    6068:	693a      	ldr	r2, [r7, #16]
    606a:	0092      	lsls	r2, r2, #2
    606c:	58d3      	ldr	r3, [r2, r3]
    606e:	0018      	movs	r0, r3
    6070:	4b27      	ldr	r3, [pc, #156]	; (6110 <hal_i2c_init+0x190>)
    6072:	492f      	ldr	r1, [pc, #188]	; (6130 <hal_i2c_init+0x1b0>)
    6074:	001a      	movs	r2, r3
    6076:	4b2c      	ldr	r3, [pc, #176]	; (6128 <hal_i2c_init+0x1a8>)
    6078:	4798      	blx	r3
    607a:	e020      	b.n	60be <hal_i2c_init+0x13e>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    607c:	4b22      	ldr	r3, [pc, #136]	; (6108 <hal_i2c_init+0x188>)
    607e:	693a      	ldr	r2, [r7, #16]
    6080:	0092      	lsls	r2, r2, #2
    6082:	58d3      	ldr	r3, [r2, r3]
    6084:	0018      	movs	r0, r3
    6086:	4b22      	ldr	r3, [pc, #136]	; (6110 <hal_i2c_init+0x190>)
    6088:	492a      	ldr	r1, [pc, #168]	; (6134 <hal_i2c_init+0x1b4>)
    608a:	001a      	movs	r2, r3
    608c:	4b26      	ldr	r3, [pc, #152]	; (6128 <hal_i2c_init+0x1a8>)
    608e:	4798      	blx	r3
    6090:	e015      	b.n	60be <hal_i2c_init+0x13e>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    6092:	4b1d      	ldr	r3, [pc, #116]	; (6108 <hal_i2c_init+0x188>)
    6094:	693a      	ldr	r2, [r7, #16]
    6096:	0092      	lsls	r2, r2, #2
    6098:	58d3      	ldr	r3, [r2, r3]
    609a:	0018      	movs	r0, r3
    609c:	4b1c      	ldr	r3, [pc, #112]	; (6110 <hal_i2c_init+0x190>)
    609e:	4926      	ldr	r1, [pc, #152]	; (6138 <hal_i2c_init+0x1b8>)
    60a0:	001a      	movs	r2, r3
    60a2:	4b21      	ldr	r3, [pc, #132]	; (6128 <hal_i2c_init+0x1a8>)
    60a4:	4798      	blx	r3
    60a6:	e00a      	b.n	60be <hal_i2c_init+0x13e>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    60a8:	4b17      	ldr	r3, [pc, #92]	; (6108 <hal_i2c_init+0x188>)
    60aa:	693a      	ldr	r2, [r7, #16]
    60ac:	0092      	lsls	r2, r2, #2
    60ae:	58d3      	ldr	r3, [r2, r3]
    60b0:	0018      	movs	r0, r3
    60b2:	4b17      	ldr	r3, [pc, #92]	; (6110 <hal_i2c_init+0x190>)
    60b4:	4921      	ldr	r1, [pc, #132]	; (613c <hal_i2c_init+0x1bc>)
    60b6:	001a      	movs	r2, r3
    60b8:	4b1b      	ldr	r3, [pc, #108]	; (6128 <hal_i2c_init+0x1a8>)
    60ba:	4798      	blx	r3
    60bc:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
    60be:	4b12      	ldr	r3, [pc, #72]	; (6108 <hal_i2c_init+0x188>)
    60c0:	693a      	ldr	r2, [r7, #16]
    60c2:	0092      	lsls	r2, r2, #2
    60c4:	58d3      	ldr	r3, [r2, r3]
    60c6:	693a      	ldr	r2, [r7, #16]
    60c8:	62da      	str	r2, [r3, #44]	; 0x2c
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    60ca:	4b0f      	ldr	r3, [pc, #60]	; (6108 <hal_i2c_init+0x188>)
    60cc:	693a      	ldr	r2, [r7, #16]
    60ce:	0092      	lsls	r2, r2, #2
    60d0:	58d3      	ldr	r3, [r2, r3]
    60d2:	0018      	movs	r0, r3
    60d4:	4b1a      	ldr	r3, [pc, #104]	; (6140 <hal_i2c_init+0x1c0>)
    60d6:	4798      	blx	r3
    60d8:	e006      	b.n	60e8 <hal_i2c_init+0x168>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
    60da:	4b0b      	ldr	r3, [pc, #44]	; (6108 <hal_i2c_init+0x188>)
    60dc:	693a      	ldr	r2, [r7, #16]
    60de:	0092      	lsls	r2, r2, #2
    60e0:	58d3      	ldr	r3, [r2, r3]
    60e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    60e4:	3201      	adds	r2, #1
    60e6:	629a      	str	r2, [r3, #40]	; 0x28
        }

        phal->hal_data = i2c_hal_data[bus];
    60e8:	4b07      	ldr	r3, [pc, #28]	; (6108 <hal_i2c_init+0x188>)
    60ea:	693a      	ldr	r2, [r7, #16]
    60ec:	0092      	lsls	r2, r2, #2
    60ee:	58d2      	ldr	r2, [r2, r3]
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
    60f4:	2300      	movs	r3, #0
    60f6:	e000      	b.n	60fa <hal_i2c_init+0x17a>
    }

    return ATCA_COMM_FAIL;
    60f8:	23f0      	movs	r3, #240	; 0xf0
}
    60fa:	0018      	movs	r0, r3
    60fc:	46bd      	mov	sp, r7
    60fe:	b006      	add	sp, #24
    6100:	bd80      	pop	{r7, pc}
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	200002b8 	.word	0x200002b8
    6108:	2000042c 	.word	0x2000042c
    610c:	0000ad21 	.word	0x0000ad21
    6110:	200002bc 	.word	0x200002bc
    6114:	00005e31 	.word	0x00005e31
    6118:	00100002 	.word	0x00100002
    611c:	00110002 	.word	0x00110002
    6120:	000092a5 	.word	0x000092a5
    6124:	0000c534 	.word	0x0000c534
    6128:	0000156d 	.word	0x0000156d
    612c:	42000400 	.word	0x42000400
    6130:	42000800 	.word	0x42000800
    6134:	42000c00 	.word	0x42000c00
    6138:	42001000 	.word	0x42001000
    613c:	43000400 	.word	0x43000400
    6140:	00005eb5 	.word	0x00005eb5

00006144 <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
    614c:	2300      	movs	r3, #0
}
    614e:	0018      	movs	r0, r3
    6150:	46bd      	mov	sp, r7
    6152:	b002      	add	sp, #8
    6154:	bd80      	pop	{r7, pc}
	...

00006158 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    6158:	b580      	push	{r7, lr}
    615a:	b08a      	sub	sp, #40	; 0x28
    615c:	af00      	add	r7, sp, #0
    615e:	60f8      	str	r0, [r7, #12]
    6160:	60b9      	str	r1, [r7, #8]
    6162:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6164:	68fb      	ldr	r3, [r7, #12]
    6166:	0018      	movs	r0, r3
    6168:	4b21      	ldr	r3, [pc, #132]	; (61f0 <hal_i2c_send+0x98>)
    616a:	4798      	blx	r3
    616c:	0003      	movs	r3, r0
    616e:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    6170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6172:	795b      	ldrb	r3, [r3, #5]
    6174:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    6176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6178:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    617a:	085b      	lsrs	r3, r3, #1
    617c:	b2db      	uxtb	r3, r3
    617e:	b29a      	uxth	r2, r3
    6180:	2314      	movs	r3, #20
    6182:	18fb      	adds	r3, r7, r3
    6184:	801a      	strh	r2, [r3, #0]
    6186:	687b      	ldr	r3, [r7, #4]
    6188:	b29a      	uxth	r2, r3
    618a:	2314      	movs	r3, #20
    618c:	18fb      	adds	r3, r7, r3
    618e:	805a      	strh	r2, [r3, #2]
    6190:	2314      	movs	r3, #20
    6192:	18fb      	adds	r3, r7, r3
    6194:	68ba      	ldr	r2, [r7, #8]
    6196:	605a      	str	r2, [r3, #4]
    6198:	2314      	movs	r3, #20
    619a:	18fb      	adds	r3, r7, r3
    619c:	2200      	movs	r2, #0
    619e:	721a      	strb	r2, [r3, #8]
    61a0:	2314      	movs	r3, #20
    61a2:	18fb      	adds	r3, r7, r3
    61a4:	2200      	movs	r2, #0
    61a6:	725a      	strb	r2, [r3, #9]
    61a8:	2314      	movs	r3, #20
    61aa:	18fb      	adds	r3, r7, r3
    61ac:	2200      	movs	r2, #0
    61ae:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    61b0:	68bb      	ldr	r3, [r7, #8]
    61b2:	2203      	movs	r2, #3
    61b4:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	3301      	adds	r3, #1
    61ba:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	b29a      	uxth	r2, r3
    61c0:	2314      	movs	r3, #20
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    61c6:	4b0b      	ldr	r3, [pc, #44]	; (61f4 <hal_i2c_send+0x9c>)
    61c8:	6a3a      	ldr	r2, [r7, #32]
    61ca:	0092      	lsls	r2, r2, #2
    61cc:	58d3      	ldr	r3, [r2, r3]
    61ce:	001a      	movs	r2, r3
    61d0:	2314      	movs	r3, #20
    61d2:	18fb      	adds	r3, r7, r3
    61d4:	0019      	movs	r1, r3
    61d6:	0010      	movs	r0, r2
    61d8:	4b07      	ldr	r3, [pc, #28]	; (61f8 <hal_i2c_send+0xa0>)
    61da:	4798      	blx	r3
    61dc:	1e03      	subs	r3, r0, #0
    61de:	d001      	beq.n	61e4 <hal_i2c_send+0x8c>
        return ATCA_COMM_FAIL;
    61e0:	23f0      	movs	r3, #240	; 0xf0
    61e2:	e000      	b.n	61e6 <hal_i2c_send+0x8e>

    return ATCA_SUCCESS;
    61e4:	2300      	movs	r3, #0
}
    61e6:	0018      	movs	r0, r3
    61e8:	46bd      	mov	sp, r7
    61ea:	b00a      	add	sp, #40	; 0x28
    61ec:	bd80      	pop	{r7, pc}
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	000035a1 	.word	0x000035a1
    61f4:	2000042c 	.word	0x2000042c
    61f8:	00001c69 	.word	0x00001c69

000061fc <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    61fc:	b580      	push	{r7, lr}
    61fe:	b08c      	sub	sp, #48	; 0x30
    6200:	af00      	add	r7, sp, #0
    6202:	60f8      	str	r0, [r7, #12]
    6204:	60b9      	str	r1, [r7, #8]
    6206:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	0018      	movs	r0, r3
    620c:	4b29      	ldr	r3, [pc, #164]	; (62b4 <hal_i2c_receive+0xb8>)
    620e:	4798      	blx	r3
    6210:	0003      	movs	r3, r0
    6212:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    6214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6216:	795b      	ldrb	r3, [r3, #5]
    6218:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    621e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
    6220:	2301      	movs	r3, #1
    6222:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    6224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6226:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    6228:	085b      	lsrs	r3, r3, #1
    622a:	b2db      	uxtb	r3, r3
    622c:	b29a      	uxth	r2, r3
    622e:	2314      	movs	r3, #20
    6230:	18fb      	adds	r3, r7, r3
    6232:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
    6238:	2314      	movs	r3, #20
    623a:	18fb      	adds	r3, r7, r3
    623c:	805a      	strh	r2, [r3, #2]
    623e:	2314      	movs	r3, #20
    6240:	18fb      	adds	r3, r7, r3
    6242:	68ba      	ldr	r2, [r7, #8]
    6244:	605a      	str	r2, [r3, #4]
    6246:	2314      	movs	r3, #20
    6248:	18fb      	adds	r3, r7, r3
    624a:	2200      	movs	r2, #0
    624c:	721a      	strb	r2, [r3, #8]
    624e:	2314      	movs	r3, #20
    6250:	18fb      	adds	r3, r7, r3
    6252:	2200      	movs	r2, #0
    6254:	725a      	strb	r2, [r3, #9]
    6256:	2314      	movs	r3, #20
    6258:	18fb      	adds	r3, r7, r3
    625a:	2200      	movs	r2, #0
    625c:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    625e:	e00c      	b.n	627a <hal_i2c_receive+0x7e>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    6260:	4b15      	ldr	r3, [pc, #84]	; (62b8 <hal_i2c_receive+0xbc>)
    6262:	6a3a      	ldr	r2, [r7, #32]
    6264:	0092      	lsls	r2, r2, #2
    6266:	58d3      	ldr	r3, [r2, r3]
    6268:	001a      	movs	r2, r3
    626a:	2314      	movs	r3, #20
    626c:	18fb      	adds	r3, r7, r3
    626e:	0019      	movs	r1, r3
    6270:	0010      	movs	r0, r2
    6272:	4b12      	ldr	r3, [pc, #72]	; (62bc <hal_i2c_receive+0xc0>)
    6274:	4798      	blx	r3
    6276:	0003      	movs	r3, r0
    6278:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    627c:	1e5a      	subs	r2, r3, #1
    627e:	62fa      	str	r2, [r7, #44]	; 0x2c
    6280:	2b00      	cmp	r3, #0
    6282:	dd02      	ble.n	628a <hal_i2c_receive+0x8e>
    6284:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6286:	2b00      	cmp	r3, #0
    6288:	d1ea      	bne.n	6260 <hal_i2c_receive+0x64>

    if (status != STATUS_OK)
    628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    628c:	2b00      	cmp	r3, #0
    628e:	d001      	beq.n	6294 <hal_i2c_receive+0x98>
        return ATCA_COMM_FAIL;
    6290:	23f0      	movs	r3, #240	; 0xf0
    6292:	e00a      	b.n	62aa <hal_i2c_receive+0xae>

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    6294:	2314      	movs	r3, #20
    6296:	18fb      	adds	r3, r7, r3
    6298:	685b      	ldr	r3, [r3, #4]
    629a:	0018      	movs	r0, r3
    629c:	4b08      	ldr	r3, [pc, #32]	; (62c0 <hal_i2c_receive+0xc4>)
    629e:	4798      	blx	r3
    62a0:	1e03      	subs	r3, r0, #0
    62a2:	d001      	beq.n	62a8 <hal_i2c_receive+0xac>
        return ATCA_COMM_FAIL;
    62a4:	23f0      	movs	r3, #240	; 0xf0
    62a6:	e000      	b.n	62aa <hal_i2c_receive+0xae>

    return ATCA_SUCCESS;
    62a8:	2300      	movs	r3, #0
}
    62aa:	0018      	movs	r0, r3
    62ac:	46bd      	mov	sp, r7
    62ae:	b00c      	add	sp, #48	; 0x30
    62b0:	bd80      	pop	{r7, pc}
    62b2:	46c0      	nop			; (mov r8, r8)
    62b4:	000035a1 	.word	0x000035a1
    62b8:	2000042c 	.word	0x2000042c
    62bc:	00001ab1 	.word	0x00001ab1
    62c0:	00003235 	.word	0x00003235

000062c4 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	b084      	sub	sp, #16
    62c8:	af00      	add	r7, sp, #0
    62ca:	6078      	str	r0, [r7, #4]
    62cc:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	0018      	movs	r0, r3
    62d2:	4b38      	ldr	r3, [pc, #224]	; (63b4 <change_i2c_speed+0xf0>)
    62d4:	4798      	blx	r3
    62d6:	0003      	movs	r3, r0
    62d8:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
    62da:	68fb      	ldr	r3, [r7, #12]
    62dc:	795b      	ldrb	r3, [r3, #5]
    62de:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
    62e0:	4b35      	ldr	r3, [pc, #212]	; (63b8 <change_i2c_speed+0xf4>)
    62e2:	4a36      	ldr	r2, [pc, #216]	; (63bc <change_i2c_speed+0xf8>)
    62e4:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
    62e6:	6838      	ldr	r0, [r7, #0]
    62e8:	4b35      	ldr	r3, [pc, #212]	; (63c0 <change_i2c_speed+0xfc>)
    62ea:	22fa      	movs	r2, #250	; 0xfa
    62ec:	0091      	lsls	r1, r2, #2
    62ee:	4798      	blx	r3
    62f0:	0003      	movs	r3, r0
    62f2:	001a      	movs	r2, r3
    62f4:	4b30      	ldr	r3, [pc, #192]	; (63b8 <change_i2c_speed+0xf4>)
    62f6:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    62f8:	4b32      	ldr	r3, [pc, #200]	; (63c4 <change_i2c_speed+0x100>)
    62fa:	68ba      	ldr	r2, [r7, #8]
    62fc:	0092      	lsls	r2, r2, #2
    62fe:	58d3      	ldr	r3, [r2, r3]
    6300:	0018      	movs	r0, r3
    6302:	4b31      	ldr	r3, [pc, #196]	; (63c8 <change_i2c_speed+0x104>)
    6304:	4798      	blx	r3

    switch (bus)
    6306:	68bb      	ldr	r3, [r7, #8]
    6308:	2b05      	cmp	r3, #5
    630a:	d848      	bhi.n	639e <change_i2c_speed+0xda>
    630c:	68bb      	ldr	r3, [r7, #8]
    630e:	009a      	lsls	r2, r3, #2
    6310:	4b2e      	ldr	r3, [pc, #184]	; (63cc <change_i2c_speed+0x108>)
    6312:	18d3      	adds	r3, r2, r3
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    6318:	4b2a      	ldr	r3, [pc, #168]	; (63c4 <change_i2c_speed+0x100>)
    631a:	68ba      	ldr	r2, [r7, #8]
    631c:	0092      	lsls	r2, r2, #2
    631e:	58d3      	ldr	r3, [r2, r3]
    6320:	0018      	movs	r0, r3
    6322:	4a25      	ldr	r2, [pc, #148]	; (63b8 <change_i2c_speed+0xf4>)
    6324:	2384      	movs	r3, #132	; 0x84
    6326:	05db      	lsls	r3, r3, #23
    6328:	0019      	movs	r1, r3
    632a:	4b29      	ldr	r3, [pc, #164]	; (63d0 <change_i2c_speed+0x10c>)
    632c:	4798      	blx	r3
    632e:	e036      	b.n	639e <change_i2c_speed+0xda>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    6330:	4b24      	ldr	r3, [pc, #144]	; (63c4 <change_i2c_speed+0x100>)
    6332:	68ba      	ldr	r2, [r7, #8]
    6334:	0092      	lsls	r2, r2, #2
    6336:	58d3      	ldr	r3, [r2, r3]
    6338:	0018      	movs	r0, r3
    633a:	4b1f      	ldr	r3, [pc, #124]	; (63b8 <change_i2c_speed+0xf4>)
    633c:	4925      	ldr	r1, [pc, #148]	; (63d4 <change_i2c_speed+0x110>)
    633e:	001a      	movs	r2, r3
    6340:	4b23      	ldr	r3, [pc, #140]	; (63d0 <change_i2c_speed+0x10c>)
    6342:	4798      	blx	r3
    6344:	e02b      	b.n	639e <change_i2c_speed+0xda>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    6346:	4b1f      	ldr	r3, [pc, #124]	; (63c4 <change_i2c_speed+0x100>)
    6348:	68ba      	ldr	r2, [r7, #8]
    634a:	0092      	lsls	r2, r2, #2
    634c:	58d3      	ldr	r3, [r2, r3]
    634e:	0018      	movs	r0, r3
    6350:	4b19      	ldr	r3, [pc, #100]	; (63b8 <change_i2c_speed+0xf4>)
    6352:	4921      	ldr	r1, [pc, #132]	; (63d8 <change_i2c_speed+0x114>)
    6354:	001a      	movs	r2, r3
    6356:	4b1e      	ldr	r3, [pc, #120]	; (63d0 <change_i2c_speed+0x10c>)
    6358:	4798      	blx	r3
    635a:	e020      	b.n	639e <change_i2c_speed+0xda>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    635c:	4b19      	ldr	r3, [pc, #100]	; (63c4 <change_i2c_speed+0x100>)
    635e:	68ba      	ldr	r2, [r7, #8]
    6360:	0092      	lsls	r2, r2, #2
    6362:	58d3      	ldr	r3, [r2, r3]
    6364:	0018      	movs	r0, r3
    6366:	4b14      	ldr	r3, [pc, #80]	; (63b8 <change_i2c_speed+0xf4>)
    6368:	491c      	ldr	r1, [pc, #112]	; (63dc <change_i2c_speed+0x118>)
    636a:	001a      	movs	r2, r3
    636c:	4b18      	ldr	r3, [pc, #96]	; (63d0 <change_i2c_speed+0x10c>)
    636e:	4798      	blx	r3
    6370:	e015      	b.n	639e <change_i2c_speed+0xda>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    6372:	4b14      	ldr	r3, [pc, #80]	; (63c4 <change_i2c_speed+0x100>)
    6374:	68ba      	ldr	r2, [r7, #8]
    6376:	0092      	lsls	r2, r2, #2
    6378:	58d3      	ldr	r3, [r2, r3]
    637a:	0018      	movs	r0, r3
    637c:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <change_i2c_speed+0xf4>)
    637e:	4918      	ldr	r1, [pc, #96]	; (63e0 <change_i2c_speed+0x11c>)
    6380:	001a      	movs	r2, r3
    6382:	4b13      	ldr	r3, [pc, #76]	; (63d0 <change_i2c_speed+0x10c>)
    6384:	4798      	blx	r3
    6386:	e00a      	b.n	639e <change_i2c_speed+0xda>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    6388:	4b0e      	ldr	r3, [pc, #56]	; (63c4 <change_i2c_speed+0x100>)
    638a:	68ba      	ldr	r2, [r7, #8]
    638c:	0092      	lsls	r2, r2, #2
    638e:	58d3      	ldr	r3, [r2, r3]
    6390:	0018      	movs	r0, r3
    6392:	4b09      	ldr	r3, [pc, #36]	; (63b8 <change_i2c_speed+0xf4>)
    6394:	4913      	ldr	r1, [pc, #76]	; (63e4 <change_i2c_speed+0x120>)
    6396:	001a      	movs	r2, r3
    6398:	4b0d      	ldr	r3, [pc, #52]	; (63d0 <change_i2c_speed+0x10c>)
    639a:	4798      	blx	r3
    639c:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    639e:	4b09      	ldr	r3, [pc, #36]	; (63c4 <change_i2c_speed+0x100>)
    63a0:	68ba      	ldr	r2, [r7, #8]
    63a2:	0092      	lsls	r2, r2, #2
    63a4:	58d3      	ldr	r3, [r2, r3]
    63a6:	0018      	movs	r0, r3
    63a8:	4b0f      	ldr	r3, [pc, #60]	; (63e8 <change_i2c_speed+0x124>)
    63aa:	4798      	blx	r3
}
    63ac:	46c0      	nop			; (mov r8, r8)
    63ae:	46bd      	mov	sp, r7
    63b0:	b004      	add	sp, #16
    63b2:	bd80      	pop	{r7, pc}
    63b4:	000035a1 	.word	0x000035a1
    63b8:	200002bc 	.word	0x200002bc
    63bc:	00002710 	.word	0x00002710
    63c0:	000092a5 	.word	0x000092a5
    63c4:	2000042c 	.word	0x2000042c
    63c8:	00005f29 	.word	0x00005f29
    63cc:	0000c54c 	.word	0x0000c54c
    63d0:	0000156d 	.word	0x0000156d
    63d4:	42000400 	.word	0x42000400
    63d8:	42000800 	.word	0x42000800
    63dc:	42000c00 	.word	0x42000c00
    63e0:	42001000 	.word	0x42001000
    63e4:	43000400 	.word	0x43000400
    63e8:	00005eb5 	.word	0x00005eb5

000063ec <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    63ec:	b580      	push	{r7, lr}
    63ee:	b08c      	sub	sp, #48	; 0x30
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	0018      	movs	r0, r3
    63f8:	4b45      	ldr	r3, [pc, #276]	; (6510 <hal_i2c_wake+0x124>)
    63fa:	4798      	blx	r3
    63fc:	0003      	movs	r3, r0
    63fe:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    6400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6402:	795b      	ldrb	r3, [r3, #5]
    6404:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    6406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    640a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
    640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    640e:	689b      	ldr	r3, [r3, #8]
    6410:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
    6412:	2301      	movs	r3, #1
    6414:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    6416:	2314      	movs	r3, #20
    6418:	18fb      	adds	r3, r7, r3
    641a:	4a3e      	ldr	r2, [pc, #248]	; (6514 <hal_i2c_wake+0x128>)
    641c:	6812      	ldr	r2, [r2, #0]
    641e:	601a      	str	r2, [r3, #0]

    if (bdrt != 100000)    // if not already at 100KHz, change it
    6420:	69fb      	ldr	r3, [r7, #28]
    6422:	4a3d      	ldr	r2, [pc, #244]	; (6518 <hal_i2c_wake+0x12c>)
    6424:	4293      	cmp	r3, r2
    6426:	d005      	beq.n	6434 <hal_i2c_wake+0x48>
        change_i2c_speed(iface, 100000);
    6428:	4a3b      	ldr	r2, [pc, #236]	; (6518 <hal_i2c_wake+0x12c>)
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	0011      	movs	r1, r2
    642e:	0018      	movs	r0, r3
    6430:	4b3a      	ldr	r3, [pc, #232]	; (651c <hal_i2c_wake+0x130>)
    6432:	4798      	blx	r3

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    6434:	2308      	movs	r3, #8
    6436:	18fb      	adds	r3, r7, r3
    6438:	2200      	movs	r2, #0
    643a:	801a      	strh	r2, [r3, #0]
    643c:	2308      	movs	r3, #8
    643e:	18fb      	adds	r3, r7, r3
    6440:	2200      	movs	r2, #0
    6442:	805a      	strh	r2, [r3, #2]
    6444:	2308      	movs	r3, #8
    6446:	18fb      	adds	r3, r7, r3
    6448:	2218      	movs	r2, #24
    644a:	18ba      	adds	r2, r7, r2
    644c:	605a      	str	r2, [r3, #4]
    644e:	2308      	movs	r3, #8
    6450:	18fb      	adds	r3, r7, r3
    6452:	2200      	movs	r2, #0
    6454:	721a      	strb	r2, [r3, #8]
    6456:	2308      	movs	r3, #8
    6458:	18fb      	adds	r3, r7, r3
    645a:	2200      	movs	r2, #0
    645c:	725a      	strb	r2, [r3, #9]
    645e:	2308      	movs	r3, #8
    6460:	18fb      	adds	r3, r7, r3
    6462:	2200      	movs	r2, #0
    6464:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    6466:	4b2e      	ldr	r3, [pc, #184]	; (6520 <hal_i2c_wake+0x134>)
    6468:	6a3a      	ldr	r2, [r7, #32]
    646a:	0092      	lsls	r2, r2, #2
    646c:	58d3      	ldr	r3, [r2, r3]
    646e:	001a      	movs	r2, r3
    6470:	2308      	movs	r3, #8
    6472:	18fb      	adds	r3, r7, r3
    6474:	0019      	movs	r1, r3
    6476:	0010      	movs	r0, r2
    6478:	4b2a      	ldr	r3, [pc, #168]	; (6524 <hal_i2c_wake+0x138>)
    647a:	4798      	blx	r3

    ///atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
	atca_delay_ms(1);
    647c:	2001      	movs	r0, #1
    647e:	4b2a      	ldr	r3, [pc, #168]	; (6528 <hal_i2c_wake+0x13c>)
    6480:	4798      	blx	r3
    packet.address = cfg->atcai2c.slave_address >> 1;
    6482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6484:	791b      	ldrb	r3, [r3, #4]
    6486:	085b      	lsrs	r3, r3, #1
    6488:	b2db      	uxtb	r3, r3
    648a:	b29a      	uxth	r2, r3
    648c:	2308      	movs	r3, #8
    648e:	18fb      	adds	r3, r7, r3
    6490:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
    6492:	2308      	movs	r3, #8
    6494:	18fb      	adds	r3, r7, r3
    6496:	2204      	movs	r2, #4
    6498:	805a      	strh	r2, [r3, #2]
    packet.data = data;
    649a:	2308      	movs	r3, #8
    649c:	18fb      	adds	r3, r7, r3
    649e:	2218      	movs	r2, #24
    64a0:	18ba      	adds	r2, r7, r2
    64a2:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
    64a4:	e00c      	b.n	64c0 <hal_i2c_wake+0xd4>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    64a6:	4b1e      	ldr	r3, [pc, #120]	; (6520 <hal_i2c_wake+0x134>)
    64a8:	6a3a      	ldr	r2, [r7, #32]
    64aa:	0092      	lsls	r2, r2, #2
    64ac:	58d3      	ldr	r3, [r2, r3]
    64ae:	001a      	movs	r2, r3
    64b0:	2308      	movs	r3, #8
    64b2:	18fb      	adds	r3, r7, r3
    64b4:	0019      	movs	r1, r3
    64b6:	0010      	movs	r0, r2
    64b8:	4b1c      	ldr	r3, [pc, #112]	; (652c <hal_i2c_wake+0x140>)
    64ba:	4798      	blx	r3
    64bc:	0003      	movs	r3, r0
    64be:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    64c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64c2:	1e5a      	subs	r2, r3, #1
    64c4:	62fa      	str	r2, [r7, #44]	; 0x2c
    64c6:	2b00      	cmp	r3, #0
    64c8:	dd02      	ble.n	64d0 <hal_i2c_wake+0xe4>
    64ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64cc:	2b00      	cmp	r3, #0
    64ce:	d1ea      	bne.n	64a6 <hal_i2c_wake+0xba>

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    64d0:	69fb      	ldr	r3, [r7, #28]
    64d2:	4a11      	ldr	r2, [pc, #68]	; (6518 <hal_i2c_wake+0x12c>)
    64d4:	4293      	cmp	r3, r2
    64d6:	d005      	beq.n	64e4 <hal_i2c_wake+0xf8>
        change_i2c_speed(iface, bdrt);
    64d8:	69fa      	ldr	r2, [r7, #28]
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	0011      	movs	r1, r2
    64de:	0018      	movs	r0, r3
    64e0:	4b0e      	ldr	r3, [pc, #56]	; (651c <hal_i2c_wake+0x130>)
    64e2:	4798      	blx	r3

    if (status != STATUS_OK)
    64e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    64e6:	2b00      	cmp	r3, #0
    64e8:	d001      	beq.n	64ee <hal_i2c_wake+0x102>
        return ATCA_COMM_FAIL;
    64ea:	23f0      	movs	r3, #240	; 0xf0
    64ec:	e00c      	b.n	6508 <hal_i2c_wake+0x11c>

    if (memcmp(data, expected, 4) == 0)
    64ee:	2314      	movs	r3, #20
    64f0:	18f9      	adds	r1, r7, r3
    64f2:	2318      	movs	r3, #24
    64f4:	18fb      	adds	r3, r7, r3
    64f6:	2204      	movs	r2, #4
    64f8:	0018      	movs	r0, r3
    64fa:	4b0d      	ldr	r3, [pc, #52]	; (6530 <hal_i2c_wake+0x144>)
    64fc:	4798      	blx	r3
    64fe:	1e03      	subs	r3, r0, #0
    6500:	d101      	bne.n	6506 <hal_i2c_wake+0x11a>
        return ATCA_SUCCESS;
    6502:	2300      	movs	r3, #0
    6504:	e000      	b.n	6508 <hal_i2c_wake+0x11c>

    return ATCA_COMM_FAIL;
    6506:	23f0      	movs	r3, #240	; 0xf0
}
    6508:	0018      	movs	r0, r3
    650a:	46bd      	mov	sp, r7
    650c:	b00c      	add	sp, #48	; 0x30
    650e:	bd80      	pop	{r7, pc}
    6510:	000035a1 	.word	0x000035a1
    6514:	0000c530 	.word	0x0000c530
    6518:	000186a0 	.word	0x000186a0
    651c:	000062c5 	.word	0x000062c5
    6520:	2000042c 	.word	0x2000042c
    6524:	00001c69 	.word	0x00001c69
    6528:	000066d1 	.word	0x000066d1
    652c:	00001ab1 	.word	0x00001ab1
    6530:	0000ad49 	.word	0x0000ad49

00006534 <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    6534:	b580      	push	{r7, lr}
    6536:	b088      	sub	sp, #32
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	0018      	movs	r0, r3
    6540:	4b1d      	ldr	r3, [pc, #116]	; (65b8 <hal_i2c_idle+0x84>)
    6542:	4798      	blx	r3
    6544:	0003      	movs	r3, r0
    6546:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    6548:	69fb      	ldr	r3, [r7, #28]
    654a:	795b      	ldrb	r3, [r3, #5]
    654c:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    654e:	69fb      	ldr	r3, [r7, #28]
    6550:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    6552:	085b      	lsrs	r3, r3, #1
    6554:	b2db      	uxtb	r3, r3
    6556:	b29a      	uxth	r2, r3
    6558:	2308      	movs	r3, #8
    655a:	18fb      	adds	r3, r7, r3
    655c:	801a      	strh	r2, [r3, #0]
    655e:	2308      	movs	r3, #8
    6560:	18fb      	adds	r3, r7, r3
    6562:	2201      	movs	r2, #1
    6564:	805a      	strh	r2, [r3, #2]
    6566:	2308      	movs	r3, #8
    6568:	18fb      	adds	r3, r7, r3
    656a:	2214      	movs	r2, #20
    656c:	18ba      	adds	r2, r7, r2
    656e:	605a      	str	r2, [r3, #4]
    6570:	2308      	movs	r3, #8
    6572:	18fb      	adds	r3, r7, r3
    6574:	2200      	movs	r2, #0
    6576:	721a      	strb	r2, [r3, #8]
    6578:	2308      	movs	r3, #8
    657a:	18fb      	adds	r3, r7, r3
    657c:	2200      	movs	r2, #0
    657e:	725a      	strb	r2, [r3, #9]
    6580:	2308      	movs	r3, #8
    6582:	18fb      	adds	r3, r7, r3
    6584:	2200      	movs	r2, #0
    6586:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    6588:	2314      	movs	r3, #20
    658a:	18fb      	adds	r3, r7, r3
    658c:	2202      	movs	r2, #2
    658e:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    6590:	4b0a      	ldr	r3, [pc, #40]	; (65bc <hal_i2c_idle+0x88>)
    6592:	69ba      	ldr	r2, [r7, #24]
    6594:	0092      	lsls	r2, r2, #2
    6596:	58d3      	ldr	r3, [r2, r3]
    6598:	001a      	movs	r2, r3
    659a:	2308      	movs	r3, #8
    659c:	18fb      	adds	r3, r7, r3
    659e:	0019      	movs	r1, r3
    65a0:	0010      	movs	r0, r2
    65a2:	4b07      	ldr	r3, [pc, #28]	; (65c0 <hal_i2c_idle+0x8c>)
    65a4:	4798      	blx	r3
    65a6:	1e03      	subs	r3, r0, #0
    65a8:	d001      	beq.n	65ae <hal_i2c_idle+0x7a>
        return ATCA_COMM_FAIL;
    65aa:	23f0      	movs	r3, #240	; 0xf0
    65ac:	e000      	b.n	65b0 <hal_i2c_idle+0x7c>

    return ATCA_SUCCESS;
    65ae:	2300      	movs	r3, #0

}
    65b0:	0018      	movs	r0, r3
    65b2:	46bd      	mov	sp, r7
    65b4:	b008      	add	sp, #32
    65b6:	bd80      	pop	{r7, pc}
    65b8:	000035a1 	.word	0x000035a1
    65bc:	2000042c 	.word	0x2000042c
    65c0:	00001c69 	.word	0x00001c69

000065c4 <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    65c4:	b580      	push	{r7, lr}
    65c6:	b088      	sub	sp, #32
    65c8:	af00      	add	r7, sp, #0
    65ca:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	0018      	movs	r0, r3
    65d0:	4b1d      	ldr	r3, [pc, #116]	; (6648 <hal_i2c_sleep+0x84>)
    65d2:	4798      	blx	r3
    65d4:	0003      	movs	r3, r0
    65d6:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    65d8:	69fb      	ldr	r3, [r7, #28]
    65da:	795b      	ldrb	r3, [r3, #5]
    65dc:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    65de:	69fb      	ldr	r3, [r7, #28]
    65e0:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    65e2:	085b      	lsrs	r3, r3, #1
    65e4:	b2db      	uxtb	r3, r3
    65e6:	b29a      	uxth	r2, r3
    65e8:	2308      	movs	r3, #8
    65ea:	18fb      	adds	r3, r7, r3
    65ec:	801a      	strh	r2, [r3, #0]
    65ee:	2308      	movs	r3, #8
    65f0:	18fb      	adds	r3, r7, r3
    65f2:	2201      	movs	r2, #1
    65f4:	805a      	strh	r2, [r3, #2]
    65f6:	2308      	movs	r3, #8
    65f8:	18fb      	adds	r3, r7, r3
    65fa:	2214      	movs	r2, #20
    65fc:	18ba      	adds	r2, r7, r2
    65fe:	605a      	str	r2, [r3, #4]
    6600:	2308      	movs	r3, #8
    6602:	18fb      	adds	r3, r7, r3
    6604:	2200      	movs	r2, #0
    6606:	721a      	strb	r2, [r3, #8]
    6608:	2308      	movs	r3, #8
    660a:	18fb      	adds	r3, r7, r3
    660c:	2200      	movs	r2, #0
    660e:	725a      	strb	r2, [r3, #9]
    6610:	2308      	movs	r3, #8
    6612:	18fb      	adds	r3, r7, r3
    6614:	2200      	movs	r2, #0
    6616:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    6618:	2314      	movs	r3, #20
    661a:	18fb      	adds	r3, r7, r3
    661c:	2201      	movs	r2, #1
    661e:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    6620:	4b0a      	ldr	r3, [pc, #40]	; (664c <hal_i2c_sleep+0x88>)
    6622:	69ba      	ldr	r2, [r7, #24]
    6624:	0092      	lsls	r2, r2, #2
    6626:	58d3      	ldr	r3, [r2, r3]
    6628:	001a      	movs	r2, r3
    662a:	2308      	movs	r3, #8
    662c:	18fb      	adds	r3, r7, r3
    662e:	0019      	movs	r1, r3
    6630:	0010      	movs	r0, r2
    6632:	4b07      	ldr	r3, [pc, #28]	; (6650 <hal_i2c_sleep+0x8c>)
    6634:	4798      	blx	r3
    6636:	1e03      	subs	r3, r0, #0
    6638:	d001      	beq.n	663e <hal_i2c_sleep+0x7a>
        return ATCA_COMM_FAIL;
    663a:	23f0      	movs	r3, #240	; 0xf0
    663c:	e000      	b.n	6640 <hal_i2c_sleep+0x7c>

    return ATCA_SUCCESS;
    663e:	2300      	movs	r3, #0
}
    6640:	0018      	movs	r0, r3
    6642:	46bd      	mov	sp, r7
    6644:	b008      	add	sp, #32
    6646:	bd80      	pop	{r7, pc}
    6648:	000035a1 	.word	0x000035a1
    664c:	2000042c 	.word	0x2000042c
    6650:	00001c69 	.word	0x00001c69

00006654 <hal_i2c_release>:
/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    6654:	b580      	push	{r7, lr}
    6656:	b084      	sub	sp, #16
    6658:	af00      	add	r7, sp, #0
    665a:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    6660:	4b17      	ldr	r3, [pc, #92]	; (66c0 <hal_i2c_release+0x6c>)
    6662:	681b      	ldr	r3, [r3, #0]
    6664:	1e5a      	subs	r2, r3, #1
    6666:	4b16      	ldr	r3, [pc, #88]	; (66c0 <hal_i2c_release+0x6c>)
    6668:	601a      	str	r2, [r3, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    666a:	68fb      	ldr	r3, [r7, #12]
    666c:	2b00      	cmp	r3, #0
    666e:	d021      	beq.n	66b4 <hal_i2c_release+0x60>
    6670:	68fb      	ldr	r3, [r7, #12]
    6672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6674:	1e5a      	subs	r2, r3, #1
    6676:	68fb      	ldr	r3, [r7, #12]
    6678:	629a      	str	r2, [r3, #40]	; 0x28
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    667e:	2b00      	cmp	r3, #0
    6680:	dc18      	bgt.n	66b4 <hal_i2c_release+0x60>
    6682:	68fb      	ldr	r3, [r7, #12]
    6684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6686:	4b0f      	ldr	r3, [pc, #60]	; (66c4 <hal_i2c_release+0x70>)
    6688:	0092      	lsls	r2, r2, #2
    668a:	58d3      	ldr	r3, [r2, r3]
    668c:	2b00      	cmp	r3, #0
    668e:	d011      	beq.n	66b4 <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
    6690:	68fb      	ldr	r3, [r7, #12]
    6692:	0018      	movs	r0, r3
    6694:	4b0c      	ldr	r3, [pc, #48]	; (66c8 <hal_i2c_release+0x74>)
    6696:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    6698:	68fb      	ldr	r3, [r7, #12]
    669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    669c:	4b09      	ldr	r3, [pc, #36]	; (66c4 <hal_i2c_release+0x70>)
    669e:	0092      	lsls	r2, r2, #2
    66a0:	58d3      	ldr	r3, [r2, r3]
    66a2:	0018      	movs	r0, r3
    66a4:	4b09      	ldr	r3, [pc, #36]	; (66cc <hal_i2c_release+0x78>)
    66a6:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    66a8:	68fb      	ldr	r3, [r7, #12]
    66aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    66ac:	4b05      	ldr	r3, [pc, #20]	; (66c4 <hal_i2c_release+0x70>)
    66ae:	0092      	lsls	r2, r2, #2
    66b0:	2100      	movs	r1, #0
    66b2:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
    66b4:	2300      	movs	r3, #0
}
    66b6:	0018      	movs	r0, r3
    66b8:	46bd      	mov	sp, r7
    66ba:	b004      	add	sp, #16
    66bc:	bd80      	pop	{r7, pc}
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	200002b8 	.word	0x200002b8
    66c4:	2000042c 	.word	0x2000042c
    66c8:	000016c5 	.word	0x000016c5
    66cc:	0000ad35 	.word	0x0000ad35

000066d0 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b082      	sub	sp, #8
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	2b00      	cmp	r3, #0
    66dc:	d004      	beq.n	66e8 <atca_delay_ms+0x18>
    66de:	687b      	ldr	r3, [r7, #4]
    66e0:	0018      	movs	r0, r3
    66e2:	4b05      	ldr	r3, [pc, #20]	; (66f8 <atca_delay_ms+0x28>)
    66e4:	4798      	blx	r3
}
    66e6:	e002      	b.n	66ee <atca_delay_ms+0x1e>
    delay_ms(delay);
    66e8:	2001      	movs	r0, #1
    66ea:	4b04      	ldr	r3, [pc, #16]	; (66fc <atca_delay_ms+0x2c>)
    66ec:	4798      	blx	r3
}
    66ee:	46c0      	nop			; (mov r8, r8)
    66f0:	46bd      	mov	sp, r7
    66f2:	b002      	add	sp, #8
    66f4:	bd80      	pop	{r7, pc}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	00000f59 	.word	0x00000f59
    66fc:	00000f29 	.word	0x00000f29

00006700 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6700:	b580      	push	{r7, lr}
    6702:	af00      	add	r7, sp, #0
    6704:	2000      	movs	r0, #0
    6706:	4b02      	ldr	r3, [pc, #8]	; (6710 <TCC0_Handler+0x10>)
    6708:	4798      	blx	r3
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	46bd      	mov	sp, r7
    670e:	bd80      	pop	{r7, pc}
    6710:	0000673d 	.word	0x0000673d

00006714 <TCC1_Handler>:
    6714:	b580      	push	{r7, lr}
    6716:	af00      	add	r7, sp, #0
    6718:	2001      	movs	r0, #1
    671a:	4b02      	ldr	r3, [pc, #8]	; (6724 <TCC1_Handler+0x10>)
    671c:	4798      	blx	r3
    671e:	46c0      	nop			; (mov r8, r8)
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	0000673d 	.word	0x0000673d

00006728 <TCC2_Handler>:
    6728:	b580      	push	{r7, lr}
    672a:	af00      	add	r7, sp, #0
    672c:	2002      	movs	r0, #2
    672e:	4b02      	ldr	r3, [pc, #8]	; (6738 <TCC2_Handler+0x10>)
    6730:	4798      	blx	r3
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	46bd      	mov	sp, r7
    6736:	bd80      	pop	{r7, pc}
    6738:	0000673d 	.word	0x0000673d

0000673c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    673c:	b580      	push	{r7, lr}
    673e:	b086      	sub	sp, #24
    6740:	af00      	add	r7, sp, #0
    6742:	0002      	movs	r2, r0
    6744:	1dfb      	adds	r3, r7, #7
    6746:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    6748:	1dfb      	adds	r3, r7, #7
    674a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    674c:	4b18      	ldr	r3, [pc, #96]	; (67b0 <_tcc_interrupt_handler+0x74>)
    674e:	0092      	lsls	r2, r2, #2
    6750:	58d3      	ldr	r3, [r2, r3]
    6752:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6754:	693b      	ldr	r3, [r7, #16]
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    675a:	693b      	ldr	r3, [r7, #16]
    675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    675e:	401a      	ands	r2, r3
			module->enable_callback_mask);
    6760:	693b      	ldr	r3, [r7, #16]
    6762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6764:	4013      	ands	r3, r2
    6766:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6768:	2300      	movs	r3, #0
    676a:	617b      	str	r3, [r7, #20]
    676c:	e019      	b.n	67a2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    676e:	4b11      	ldr	r3, [pc, #68]	; (67b4 <_tcc_interrupt_handler+0x78>)
    6770:	697a      	ldr	r2, [r7, #20]
    6772:	0092      	lsls	r2, r2, #2
    6774:	58d3      	ldr	r3, [r2, r3]
    6776:	68fa      	ldr	r2, [r7, #12]
    6778:	4013      	ands	r3, r2
    677a:	d00f      	beq.n	679c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    677c:	693a      	ldr	r2, [r7, #16]
    677e:	697b      	ldr	r3, [r7, #20]
    6780:	009b      	lsls	r3, r3, #2
    6782:	18d3      	adds	r3, r2, r3
    6784:	3304      	adds	r3, #4
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	693a      	ldr	r2, [r7, #16]
    678a:	0010      	movs	r0, r2
    678c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    678e:	693b      	ldr	r3, [r7, #16]
    6790:	681b      	ldr	r3, [r3, #0]
    6792:	4a08      	ldr	r2, [pc, #32]	; (67b4 <_tcc_interrupt_handler+0x78>)
    6794:	6979      	ldr	r1, [r7, #20]
    6796:	0089      	lsls	r1, r1, #2
    6798:	588a      	ldr	r2, [r1, r2]
    679a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    679c:	697b      	ldr	r3, [r7, #20]
    679e:	3301      	adds	r3, #1
    67a0:	617b      	str	r3, [r7, #20]
    67a2:	697b      	ldr	r3, [r7, #20]
    67a4:	2b0b      	cmp	r3, #11
    67a6:	dde2      	ble.n	676e <_tcc_interrupt_handler+0x32>
		}
	}
}
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	46bd      	mov	sp, r7
    67ac:	b006      	add	sp, #24
    67ae:	bd80      	pop	{r7, pc}
    67b0:	20000444 	.word	0x20000444
    67b4:	0000c564 	.word	0x0000c564

000067b8 <system_gclk_chan_get_config_defaults>:
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b082      	sub	sp, #8
    67bc:	af00      	add	r7, sp, #0
    67be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	2200      	movs	r2, #0
    67c4:	701a      	strb	r2, [r3, #0]
}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	46bd      	mov	sp, r7
    67ca:	b002      	add	sp, #8
    67cc:	bd80      	pop	{r7, pc}
	...

000067d0 <system_apb_clock_set_mask>:
{
    67d0:	b580      	push	{r7, lr}
    67d2:	b082      	sub	sp, #8
    67d4:	af00      	add	r7, sp, #0
    67d6:	0002      	movs	r2, r0
    67d8:	6039      	str	r1, [r7, #0]
    67da:	1dfb      	adds	r3, r7, #7
    67dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    67de:	1dfb      	adds	r3, r7, #7
    67e0:	781b      	ldrb	r3, [r3, #0]
    67e2:	2b04      	cmp	r3, #4
    67e4:	d827      	bhi.n	6836 <system_apb_clock_set_mask+0x66>
    67e6:	009a      	lsls	r2, r3, #2
    67e8:	4b16      	ldr	r3, [pc, #88]	; (6844 <system_apb_clock_set_mask+0x74>)
    67ea:	18d3      	adds	r3, r2, r3
    67ec:	681b      	ldr	r3, [r3, #0]
    67ee:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    67f0:	4b15      	ldr	r3, [pc, #84]	; (6848 <system_apb_clock_set_mask+0x78>)
    67f2:	4a15      	ldr	r2, [pc, #84]	; (6848 <system_apb_clock_set_mask+0x78>)
    67f4:	6951      	ldr	r1, [r2, #20]
    67f6:	683a      	ldr	r2, [r7, #0]
    67f8:	430a      	orrs	r2, r1
    67fa:	615a      	str	r2, [r3, #20]
			break;
    67fc:	e01d      	b.n	683a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    67fe:	4b12      	ldr	r3, [pc, #72]	; (6848 <system_apb_clock_set_mask+0x78>)
    6800:	4a11      	ldr	r2, [pc, #68]	; (6848 <system_apb_clock_set_mask+0x78>)
    6802:	6991      	ldr	r1, [r2, #24]
    6804:	683a      	ldr	r2, [r7, #0]
    6806:	430a      	orrs	r2, r1
    6808:	619a      	str	r2, [r3, #24]
			break;
    680a:	e016      	b.n	683a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    680c:	4b0e      	ldr	r3, [pc, #56]	; (6848 <system_apb_clock_set_mask+0x78>)
    680e:	4a0e      	ldr	r2, [pc, #56]	; (6848 <system_apb_clock_set_mask+0x78>)
    6810:	69d1      	ldr	r1, [r2, #28]
    6812:	683a      	ldr	r2, [r7, #0]
    6814:	430a      	orrs	r2, r1
    6816:	61da      	str	r2, [r3, #28]
			break;
    6818:	e00f      	b.n	683a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    681a:	4b0b      	ldr	r3, [pc, #44]	; (6848 <system_apb_clock_set_mask+0x78>)
    681c:	4a0a      	ldr	r2, [pc, #40]	; (6848 <system_apb_clock_set_mask+0x78>)
    681e:	6a11      	ldr	r1, [r2, #32]
    6820:	683a      	ldr	r2, [r7, #0]
    6822:	430a      	orrs	r2, r1
    6824:	621a      	str	r2, [r3, #32]
			break;
    6826:	e008      	b.n	683a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    6828:	4b07      	ldr	r3, [pc, #28]	; (6848 <system_apb_clock_set_mask+0x78>)
    682a:	4a07      	ldr	r2, [pc, #28]	; (6848 <system_apb_clock_set_mask+0x78>)
    682c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    682e:	683a      	ldr	r2, [r7, #0]
    6830:	430a      	orrs	r2, r1
    6832:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    6834:	e001      	b.n	683a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    6836:	2317      	movs	r3, #23
    6838:	e000      	b.n	683c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    683a:	2300      	movs	r3, #0
}
    683c:	0018      	movs	r0, r3
    683e:	46bd      	mov	sp, r7
    6840:	b002      	add	sp, #8
    6842:	bd80      	pop	{r7, pc}
    6844:	0000c594 	.word	0x0000c594
    6848:	40000400 	.word	0x40000400

0000684c <system_pinmux_get_config_defaults>:
{
    684c:	b580      	push	{r7, lr}
    684e:	b082      	sub	sp, #8
    6850:	af00      	add	r7, sp, #0
    6852:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	2280      	movs	r2, #128	; 0x80
    6858:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	2200      	movs	r2, #0
    685e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	2201      	movs	r2, #1
    6864:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	2200      	movs	r2, #0
    686a:	70da      	strb	r2, [r3, #3]
}
    686c:	46c0      	nop			; (mov r8, r8)
    686e:	46bd      	mov	sp, r7
    6870:	b002      	add	sp, #8
    6872:	bd80      	pop	{r7, pc}

00006874 <system_is_debugger_present>:
{
    6874:	b580      	push	{r7, lr}
    6876:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6878:	4b05      	ldr	r3, [pc, #20]	; (6890 <system_is_debugger_present+0x1c>)
    687a:	789b      	ldrb	r3, [r3, #2]
    687c:	b2db      	uxtb	r3, r3
    687e:	001a      	movs	r2, r3
    6880:	2302      	movs	r3, #2
    6882:	4013      	ands	r3, r2
    6884:	1e5a      	subs	r2, r3, #1
    6886:	4193      	sbcs	r3, r2
    6888:	b2db      	uxtb	r3, r3
}
    688a:	0018      	movs	r0, r3
    688c:	46bd      	mov	sp, r7
    688e:	bd80      	pop	{r7, pc}
    6890:	41002000 	.word	0x41002000

00006894 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    6894:	b580      	push	{r7, lr}
    6896:	b084      	sub	sp, #16
    6898:	af00      	add	r7, sp, #0
    689a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    68a2:	68fb      	ldr	r3, [r7, #12]
    68a4:	69db      	ldr	r3, [r3, #28]
    68a6:	1e5a      	subs	r2, r3, #1
    68a8:	4193      	sbcs	r3, r2
    68aa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    68ac:	0018      	movs	r0, r3
    68ae:	46bd      	mov	sp, r7
    68b0:	b004      	add	sp, #16
    68b2:	bd80      	pop	{r7, pc}

000068b4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    68b4:	b580      	push	{r7, lr}
    68b6:	b082      	sub	sp, #8
    68b8:	af00      	add	r7, sp, #0
    68ba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    68bc:	46c0      	nop			; (mov r8, r8)
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	0018      	movs	r0, r3
    68c2:	4b04      	ldr	r3, [pc, #16]	; (68d4 <_usart_wait_for_sync+0x20>)
    68c4:	4798      	blx	r3
    68c6:	1e03      	subs	r3, r0, #0
    68c8:	d1f9      	bne.n	68be <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	46bd      	mov	sp, r7
    68ce:	b002      	add	sp, #8
    68d0:	bd80      	pop	{r7, pc}
    68d2:	46c0      	nop			; (mov r8, r8)
    68d4:	00006895 	.word	0x00006895

000068d8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    68d8:	b5b0      	push	{r4, r5, r7, lr}
    68da:	b08c      	sub	sp, #48	; 0x30
    68dc:	af02      	add	r7, sp, #8
    68de:	6078      	str	r0, [r7, #4]
    68e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	681b      	ldr	r3, [r3, #0]
    68e6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	681b      	ldr	r3, [r3, #0]
    68ec:	0018      	movs	r0, r3
    68ee:	4bab      	ldr	r3, [pc, #684]	; (6b9c <_usart_set_config+0x2c4>)
    68f0:	4798      	blx	r3
    68f2:	0003      	movs	r3, r0
    68f4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	3312      	adds	r3, #18
    68fa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    68fc:	2300      	movs	r3, #0
    68fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    6900:	2300      	movs	r3, #0
    6902:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    6904:	230a      	movs	r3, #10
    6906:	18fb      	adds	r3, r7, r3
    6908:	2200      	movs	r2, #0
    690a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    690c:	231f      	movs	r3, #31
    690e:	18fb      	adds	r3, r7, r3
    6910:	2200      	movs	r2, #0
    6912:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6914:	231e      	movs	r3, #30
    6916:	18fb      	adds	r3, r7, r3
    6918:	2210      	movs	r2, #16
    691a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	8a1b      	ldrh	r3, [r3, #16]
    6920:	2280      	movs	r2, #128	; 0x80
    6922:	01d2      	lsls	r2, r2, #7
    6924:	4293      	cmp	r3, r2
    6926:	d01c      	beq.n	6962 <_usart_set_config+0x8a>
    6928:	2280      	movs	r2, #128	; 0x80
    692a:	01d2      	lsls	r2, r2, #7
    692c:	4293      	cmp	r3, r2
    692e:	dc06      	bgt.n	693e <_usart_set_config+0x66>
    6930:	2b00      	cmp	r3, #0
    6932:	d00d      	beq.n	6950 <_usart_set_config+0x78>
    6934:	2280      	movs	r2, #128	; 0x80
    6936:	0192      	lsls	r2, r2, #6
    6938:	4293      	cmp	r3, r2
    693a:	d024      	beq.n	6986 <_usart_set_config+0xae>
    693c:	e035      	b.n	69aa <_usart_set_config+0xd2>
    693e:	22c0      	movs	r2, #192	; 0xc0
    6940:	01d2      	lsls	r2, r2, #7
    6942:	4293      	cmp	r3, r2
    6944:	d028      	beq.n	6998 <_usart_set_config+0xc0>
    6946:	2280      	movs	r2, #128	; 0x80
    6948:	0212      	lsls	r2, r2, #8
    694a:	4293      	cmp	r3, r2
    694c:	d012      	beq.n	6974 <_usart_set_config+0x9c>
    694e:	e02c      	b.n	69aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6950:	231f      	movs	r3, #31
    6952:	18fb      	adds	r3, r7, r3
    6954:	2200      	movs	r2, #0
    6956:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6958:	231e      	movs	r3, #30
    695a:	18fb      	adds	r3, r7, r3
    695c:	2210      	movs	r2, #16
    695e:	701a      	strb	r2, [r3, #0]
			break;
    6960:	e023      	b.n	69aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6962:	231f      	movs	r3, #31
    6964:	18fb      	adds	r3, r7, r3
    6966:	2200      	movs	r2, #0
    6968:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    696a:	231e      	movs	r3, #30
    696c:	18fb      	adds	r3, r7, r3
    696e:	2208      	movs	r2, #8
    6970:	701a      	strb	r2, [r3, #0]
			break;
    6972:	e01a      	b.n	69aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6974:	231f      	movs	r3, #31
    6976:	18fb      	adds	r3, r7, r3
    6978:	2200      	movs	r2, #0
    697a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    697c:	231e      	movs	r3, #30
    697e:	18fb      	adds	r3, r7, r3
    6980:	2203      	movs	r2, #3
    6982:	701a      	strb	r2, [r3, #0]
			break;
    6984:	e011      	b.n	69aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6986:	231f      	movs	r3, #31
    6988:	18fb      	adds	r3, r7, r3
    698a:	2201      	movs	r2, #1
    698c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    698e:	231e      	movs	r3, #30
    6990:	18fb      	adds	r3, r7, r3
    6992:	2210      	movs	r2, #16
    6994:	701a      	strb	r2, [r3, #0]
			break;
    6996:	e008      	b.n	69aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6998:	231f      	movs	r3, #31
    699a:	18fb      	adds	r3, r7, r3
    699c:	2201      	movs	r2, #1
    699e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    69a0:	231e      	movs	r3, #30
    69a2:	18fb      	adds	r3, r7, r3
    69a4:	2208      	movs	r2, #8
    69a6:	701a      	strb	r2, [r3, #0]
			break;
    69a8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    69aa:	683b      	ldr	r3, [r7, #0]
    69ac:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    69ae:	683b      	ldr	r3, [r7, #0]
    69b0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    69b2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    69b4:	683b      	ldr	r3, [r7, #0]
    69b6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    69b8:	4313      	orrs	r3, r2
		config->sample_rate |
    69ba:	683a      	ldr	r2, [r7, #0]
    69bc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    69be:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    69c0:	683a      	ldr	r2, [r7, #0]
    69c2:	7e12      	ldrb	r2, [r2, #24]
    69c4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    69c6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    69c8:	683a      	ldr	r2, [r7, #0]
    69ca:	2126      	movs	r1, #38	; 0x26
    69cc:	5c52      	ldrb	r2, [r2, r1]
    69ce:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    69d0:	4313      	orrs	r3, r2
    69d2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    69d4:	231d      	movs	r3, #29
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	2200      	movs	r2, #0
    69da:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    69dc:	683b      	ldr	r3, [r7, #0]
    69de:	685b      	ldr	r3, [r3, #4]
    69e0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    69e2:	68fb      	ldr	r3, [r7, #12]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d01e      	beq.n	6a26 <_usart_set_config+0x14e>
    69e8:	2280      	movs	r2, #128	; 0x80
    69ea:	0552      	lsls	r2, r2, #21
    69ec:	4293      	cmp	r3, r2
    69ee:	d14f      	bne.n	6a90 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    69f0:	683b      	ldr	r3, [r7, #0]
    69f2:	2227      	movs	r2, #39	; 0x27
    69f4:	5c9b      	ldrb	r3, [r3, r2]
    69f6:	2201      	movs	r2, #1
    69f8:	4053      	eors	r3, r2
    69fa:	b2db      	uxtb	r3, r3
    69fc:	2b00      	cmp	r3, #0
    69fe:	d046      	beq.n	6a8e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6a00:	683b      	ldr	r3, [r7, #0]
    6a02:	6a1d      	ldr	r5, [r3, #32]
    6a04:	693b      	ldr	r3, [r7, #16]
    6a06:	b2db      	uxtb	r3, r3
    6a08:	0018      	movs	r0, r3
    6a0a:	4b65      	ldr	r3, [pc, #404]	; (6ba0 <_usart_set_config+0x2c8>)
    6a0c:	4798      	blx	r3
    6a0e:	0001      	movs	r1, r0
    6a10:	231d      	movs	r3, #29
    6a12:	18fc      	adds	r4, r7, r3
    6a14:	230a      	movs	r3, #10
    6a16:	18fb      	adds	r3, r7, r3
    6a18:	001a      	movs	r2, r3
    6a1a:	0028      	movs	r0, r5
    6a1c:	4b61      	ldr	r3, [pc, #388]	; (6ba4 <_usart_set_config+0x2cc>)
    6a1e:	4798      	blx	r3
    6a20:	0003      	movs	r3, r0
    6a22:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    6a24:	e033      	b.n	6a8e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    6a26:	683b      	ldr	r3, [r7, #0]
    6a28:	2227      	movs	r2, #39	; 0x27
    6a2a:	5c9b      	ldrb	r3, [r3, r2]
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d014      	beq.n	6a5a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    6a30:	683b      	ldr	r3, [r7, #0]
    6a32:	6a18      	ldr	r0, [r3, #32]
    6a34:	683b      	ldr	r3, [r7, #0]
    6a36:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    6a38:	231d      	movs	r3, #29
    6a3a:	18fc      	adds	r4, r7, r3
    6a3c:	231f      	movs	r3, #31
    6a3e:	18fb      	adds	r3, r7, r3
    6a40:	781d      	ldrb	r5, [r3, #0]
    6a42:	230a      	movs	r3, #10
    6a44:	18fa      	adds	r2, r7, r3
    6a46:	231e      	movs	r3, #30
    6a48:	18fb      	adds	r3, r7, r3
    6a4a:	781b      	ldrb	r3, [r3, #0]
    6a4c:	9300      	str	r3, [sp, #0]
    6a4e:	002b      	movs	r3, r5
    6a50:	4d55      	ldr	r5, [pc, #340]	; (6ba8 <_usart_set_config+0x2d0>)
    6a52:	47a8      	blx	r5
    6a54:	0003      	movs	r3, r0
    6a56:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    6a58:	e01a      	b.n	6a90 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    6a5a:	683b      	ldr	r3, [r7, #0]
    6a5c:	6a1d      	ldr	r5, [r3, #32]
    6a5e:	693b      	ldr	r3, [r7, #16]
    6a60:	b2db      	uxtb	r3, r3
    6a62:	0018      	movs	r0, r3
    6a64:	4b4e      	ldr	r3, [pc, #312]	; (6ba0 <_usart_set_config+0x2c8>)
    6a66:	4798      	blx	r3
				status_code =
    6a68:	231d      	movs	r3, #29
    6a6a:	18fc      	adds	r4, r7, r3
    6a6c:	231f      	movs	r3, #31
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	7819      	ldrb	r1, [r3, #0]
    6a72:	230a      	movs	r3, #10
    6a74:	18fa      	adds	r2, r7, r3
    6a76:	231e      	movs	r3, #30
    6a78:	18fb      	adds	r3, r7, r3
    6a7a:	781b      	ldrb	r3, [r3, #0]
    6a7c:	9300      	str	r3, [sp, #0]
    6a7e:	000b      	movs	r3, r1
    6a80:	0001      	movs	r1, r0
    6a82:	0028      	movs	r0, r5
    6a84:	4d48      	ldr	r5, [pc, #288]	; (6ba8 <_usart_set_config+0x2d0>)
    6a86:	47a8      	blx	r5
    6a88:	0003      	movs	r3, r0
    6a8a:	7023      	strb	r3, [r4, #0]
			break;
    6a8c:	e000      	b.n	6a90 <_usart_set_config+0x1b8>
			break;
    6a8e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    6a90:	231d      	movs	r3, #29
    6a92:	18fb      	adds	r3, r7, r3
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d003      	beq.n	6aa2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    6a9a:	231d      	movs	r3, #29
    6a9c:	18fb      	adds	r3, r7, r3
    6a9e:	781b      	ldrb	r3, [r3, #0]
    6aa0:	e077      	b.n	6b92 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    6aa2:	683b      	ldr	r3, [r7, #0]
    6aa4:	7e5b      	ldrb	r3, [r3, #25]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d003      	beq.n	6ab2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    6aaa:	683b      	ldr	r3, [r7, #0]
    6aac:	7e9a      	ldrb	r2, [r3, #26]
    6aae:	69bb      	ldr	r3, [r7, #24]
    6ab0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	0018      	movs	r0, r3
    6ab6:	4b3d      	ldr	r3, [pc, #244]	; (6bac <_usart_set_config+0x2d4>)
    6ab8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    6aba:	230a      	movs	r3, #10
    6abc:	18fb      	adds	r3, r7, r3
    6abe:	881a      	ldrh	r2, [r3, #0]
    6ac0:	69bb      	ldr	r3, [r7, #24]
    6ac2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6ac6:	68fb      	ldr	r3, [r7, #12]
    6ac8:	4313      	orrs	r3, r2
    6aca:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6acc:	683b      	ldr	r3, [r7, #0]
    6ace:	2227      	movs	r2, #39	; 0x27
    6ad0:	5c9b      	ldrb	r3, [r3, r2]
    6ad2:	2201      	movs	r2, #1
    6ad4:	4053      	eors	r3, r2
    6ad6:	b2db      	uxtb	r3, r3
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d003      	beq.n	6ae4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ade:	2204      	movs	r2, #4
    6ae0:	4313      	orrs	r3, r2
    6ae2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6ae4:	683b      	ldr	r3, [r7, #0]
    6ae6:	7e5b      	ldrb	r3, [r3, #25]
    6ae8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6aea:	683b      	ldr	r3, [r7, #0]
    6aec:	7f1b      	ldrb	r3, [r3, #28]
    6aee:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6af0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6af2:	683b      	ldr	r3, [r7, #0]
    6af4:	7f5b      	ldrb	r3, [r3, #29]
    6af6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6af8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6afa:	683b      	ldr	r3, [r7, #0]
    6afc:	2124      	movs	r1, #36	; 0x24
    6afe:	5c5b      	ldrb	r3, [r3, r1]
    6b00:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6b02:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6b04:	683b      	ldr	r3, [r7, #0]
    6b06:	2125      	movs	r1, #37	; 0x25
    6b08:	5c5b      	ldrb	r3, [r3, r1]
    6b0a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6b0c:	4313      	orrs	r3, r2
	ctrlb =  
    6b0e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    6b10:	683b      	ldr	r3, [r7, #0]
    6b12:	7a9b      	ldrb	r3, [r3, #10]
    6b14:	001a      	movs	r2, r3
    6b16:	6a3b      	ldr	r3, [r7, #32]
    6b18:	4313      	orrs	r3, r2
    6b1a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    6b1c:	683b      	ldr	r3, [r7, #0]
    6b1e:	7adb      	ldrb	r3, [r3, #11]
    6b20:	001a      	movs	r2, r3
    6b22:	6a3b      	ldr	r3, [r7, #32]
    6b24:	4313      	orrs	r3, r2
    6b26:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6b28:	683b      	ldr	r3, [r7, #0]
    6b2a:	891b      	ldrh	r3, [r3, #8]
    6b2c:	2bff      	cmp	r3, #255	; 0xff
    6b2e:	d00b      	beq.n	6b48 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b32:	2280      	movs	r2, #128	; 0x80
    6b34:	0452      	lsls	r2, r2, #17
    6b36:	4313      	orrs	r3, r2
    6b38:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    6b3a:	683b      	ldr	r3, [r7, #0]
    6b3c:	891b      	ldrh	r3, [r3, #8]
    6b3e:	001a      	movs	r2, r3
    6b40:	6a3b      	ldr	r3, [r7, #32]
    6b42:	4313      	orrs	r3, r2
    6b44:	623b      	str	r3, [r7, #32]
    6b46:	e008      	b.n	6b5a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6b48:	683b      	ldr	r3, [r7, #0]
    6b4a:	7edb      	ldrb	r3, [r3, #27]
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d004      	beq.n	6b5a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b52:	2280      	movs	r2, #128	; 0x80
    6b54:	04d2      	lsls	r2, r2, #19
    6b56:	4313      	orrs	r3, r2
    6b58:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6b5a:	683b      	ldr	r3, [r7, #0]
    6b5c:	222c      	movs	r2, #44	; 0x2c
    6b5e:	5c9b      	ldrb	r3, [r3, r2]
    6b60:	2b00      	cmp	r3, #0
    6b62:	d103      	bne.n	6b6c <_usart_set_config+0x294>
    6b64:	4b12      	ldr	r3, [pc, #72]	; (6bb0 <_usart_set_config+0x2d8>)
    6b66:	4798      	blx	r3
    6b68:	1e03      	subs	r3, r0, #0
    6b6a:	d003      	beq.n	6b74 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b6e:	2280      	movs	r2, #128	; 0x80
    6b70:	4313      	orrs	r3, r2
    6b72:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	0018      	movs	r0, r3
    6b78:	4b0c      	ldr	r3, [pc, #48]	; (6bac <_usart_set_config+0x2d4>)
    6b7a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    6b7c:	69bb      	ldr	r3, [r7, #24]
    6b7e:	6a3a      	ldr	r2, [r7, #32]
    6b80:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	0018      	movs	r0, r3
    6b86:	4b09      	ldr	r3, [pc, #36]	; (6bac <_usart_set_config+0x2d4>)
    6b88:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    6b8a:	69bb      	ldr	r3, [r7, #24]
    6b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b8e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    6b90:	2300      	movs	r3, #0
}
    6b92:	0018      	movs	r0, r3
    6b94:	46bd      	mov	sp, r7
    6b96:	b00a      	add	sp, #40	; 0x28
    6b98:	bdb0      	pop	{r4, r5, r7, pc}
    6b9a:	46c0      	nop			; (mov r8, r8)
    6b9c:	0000789d 	.word	0x0000789d
    6ba0:	00008b01 	.word	0x00008b01
    6ba4:	00007417 	.word	0x00007417
    6ba8:	00007495 	.word	0x00007495
    6bac:	000068b5 	.word	0x000068b5
    6bb0:	00006875 	.word	0x00006875

00006bb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6bb4:	b590      	push	{r4, r7, lr}
    6bb6:	b093      	sub	sp, #76	; 0x4c
    6bb8:	af00      	add	r7, sp, #0
    6bba:	60f8      	str	r0, [r7, #12]
    6bbc:	60b9      	str	r1, [r7, #8]
    6bbe:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    6bc0:	2333      	movs	r3, #51	; 0x33
    6bc2:	18fb      	adds	r3, r7, r3
    6bc4:	2200      	movs	r2, #0
    6bc6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6bc8:	68fb      	ldr	r3, [r7, #12]
    6bca:	68ba      	ldr	r2, [r7, #8]
    6bcc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6bce:	68fb      	ldr	r3, [r7, #12]
    6bd0:	681b      	ldr	r3, [r3, #0]
    6bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6bd4:	68fb      	ldr	r3, [r7, #12]
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	0018      	movs	r0, r3
    6bda:	4b8f      	ldr	r3, [pc, #572]	; (6e18 <usart_init+0x264>)
    6bdc:	4798      	blx	r3
    6bde:	0003      	movs	r3, r0
    6be0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    6be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6be4:	2b05      	cmp	r3, #5
    6be6:	d104      	bne.n	6bf2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    6be8:	2301      	movs	r3, #1
    6bea:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6bec:	2318      	movs	r3, #24
    6bee:	643b      	str	r3, [r7, #64]	; 0x40
    6bf0:	e004      	b.n	6bfc <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    6bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6bf4:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6bf8:	3312      	adds	r3, #18
    6bfa:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bfe:	681b      	ldr	r3, [r3, #0]
    6c00:	2201      	movs	r2, #1
    6c02:	4013      	ands	r3, r2
    6c04:	d001      	beq.n	6c0a <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6c06:	2305      	movs	r3, #5
    6c08:	e102      	b.n	6e10 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    6c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c0c:	681b      	ldr	r3, [r3, #0]
    6c0e:	2202      	movs	r2, #2
    6c10:	4013      	ands	r3, r2
    6c12:	d001      	beq.n	6c18 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6c14:	231c      	movs	r3, #28
    6c16:	e0fb      	b.n	6e10 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
    6c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c1a:	2b05      	cmp	r3, #5
    6c1c:	d108      	bne.n	6c30 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6c1e:	2201      	movs	r2, #1
    6c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6c22:	409a      	lsls	r2, r3
    6c24:	0013      	movs	r3, r2
    6c26:	0019      	movs	r1, r3
    6c28:	2003      	movs	r0, #3
    6c2a:	4b7c      	ldr	r3, [pc, #496]	; (6e1c <usart_init+0x268>)
    6c2c:	4798      	blx	r3
    6c2e:	e007      	b.n	6c40 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    6c30:	2201      	movs	r2, #1
    6c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6c34:	409a      	lsls	r2, r3
    6c36:	0013      	movs	r3, r2
    6c38:	0019      	movs	r1, r3
    6c3a:	2002      	movs	r0, #2
    6c3c:	4b77      	ldr	r3, [pc, #476]	; (6e1c <usart_init+0x268>)
    6c3e:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6c40:	2324      	movs	r3, #36	; 0x24
    6c42:	18fb      	adds	r3, r7, r3
    6c44:	0018      	movs	r0, r3
    6c46:	4b76      	ldr	r3, [pc, #472]	; (6e20 <usart_init+0x26c>)
    6c48:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6c4a:	687b      	ldr	r3, [r7, #4]
    6c4c:	222d      	movs	r2, #45	; 0x2d
    6c4e:	5c9a      	ldrb	r2, [r3, r2]
    6c50:	2324      	movs	r3, #36	; 0x24
    6c52:	18fb      	adds	r3, r7, r3
    6c54:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c58:	b2db      	uxtb	r3, r3
    6c5a:	2224      	movs	r2, #36	; 0x24
    6c5c:	18ba      	adds	r2, r7, r2
    6c5e:	0011      	movs	r1, r2
    6c60:	0018      	movs	r0, r3
    6c62:	4b70      	ldr	r3, [pc, #448]	; (6e24 <usart_init+0x270>)
    6c64:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c68:	b2db      	uxtb	r3, r3
    6c6a:	0018      	movs	r0, r3
    6c6c:	4b6e      	ldr	r3, [pc, #440]	; (6e28 <usart_init+0x274>)
    6c6e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	222d      	movs	r2, #45	; 0x2d
    6c74:	5c9b      	ldrb	r3, [r3, r2]
    6c76:	2100      	movs	r1, #0
    6c78:	0018      	movs	r0, r3
    6c7a:	4b6c      	ldr	r3, [pc, #432]	; (6e2c <usart_init+0x278>)
    6c7c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	7ada      	ldrb	r2, [r3, #11]
    6c82:	68fb      	ldr	r3, [r7, #12]
    6c84:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	2224      	movs	r2, #36	; 0x24
    6c8a:	5c9a      	ldrb	r2, [r3, r2]
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	2225      	movs	r2, #37	; 0x25
    6c94:	5c9a      	ldrb	r2, [r3, r2]
    6c96:	68fb      	ldr	r3, [r7, #12]
    6c98:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	7eda      	ldrb	r2, [r3, #27]
    6c9e:	68fb      	ldr	r3, [r7, #12]
    6ca0:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	7f1a      	ldrb	r2, [r3, #28]
    6ca6:	68fb      	ldr	r3, [r7, #12]
    6ca8:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    6caa:	2333      	movs	r3, #51	; 0x33
    6cac:	18fc      	adds	r4, r7, r3
    6cae:	687a      	ldr	r2, [r7, #4]
    6cb0:	68fb      	ldr	r3, [r7, #12]
    6cb2:	0011      	movs	r1, r2
    6cb4:	0018      	movs	r0, r3
    6cb6:	4b5e      	ldr	r3, [pc, #376]	; (6e30 <usart_init+0x27c>)
    6cb8:	4798      	blx	r3
    6cba:	0003      	movs	r3, r0
    6cbc:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    6cbe:	2333      	movs	r3, #51	; 0x33
    6cc0:	18fb      	adds	r3, r7, r3
    6cc2:	781b      	ldrb	r3, [r3, #0]
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d003      	beq.n	6cd0 <usart_init+0x11c>
		return status_code;
    6cc8:	2333      	movs	r3, #51	; 0x33
    6cca:	18fb      	adds	r3, r7, r3
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	e09f      	b.n	6e10 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6cd0:	2320      	movs	r3, #32
    6cd2:	18fb      	adds	r3, r7, r3
    6cd4:	0018      	movs	r0, r3
    6cd6:	4b57      	ldr	r3, [pc, #348]	; (6e34 <usart_init+0x280>)
    6cd8:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6cda:	2320      	movs	r3, #32
    6cdc:	18fb      	adds	r3, r7, r3
    6cde:	2200      	movs	r2, #0
    6ce0:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6ce2:	2320      	movs	r3, #32
    6ce4:	18fb      	adds	r3, r7, r3
    6ce6:	2200      	movs	r2, #0
    6ce8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6cee:	2310      	movs	r3, #16
    6cf0:	18fb      	adds	r3, r7, r3
    6cf2:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6cf4:	687b      	ldr	r3, [r7, #4]
    6cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6cf8:	2310      	movs	r3, #16
    6cfa:	18fb      	adds	r3, r7, r3
    6cfc:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6cfe:	687b      	ldr	r3, [r7, #4]
    6d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    6d02:	2310      	movs	r3, #16
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6d0c:	2310      	movs	r3, #16
    6d0e:	18fb      	adds	r3, r7, r3
    6d10:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6d12:	233f      	movs	r3, #63	; 0x3f
    6d14:	18fb      	adds	r3, r7, r3
    6d16:	2200      	movs	r2, #0
    6d18:	701a      	strb	r2, [r3, #0]
    6d1a:	e02c      	b.n	6d76 <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6d1c:	233f      	movs	r3, #63	; 0x3f
    6d1e:	18fb      	adds	r3, r7, r3
    6d20:	781a      	ldrb	r2, [r3, #0]
    6d22:	2310      	movs	r3, #16
    6d24:	18fb      	adds	r3, r7, r3
    6d26:	0092      	lsls	r2, r2, #2
    6d28:	58d3      	ldr	r3, [r2, r3]
    6d2a:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    6d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d109      	bne.n	6d46 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6d32:	233f      	movs	r3, #63	; 0x3f
    6d34:	18fb      	adds	r3, r7, r3
    6d36:	781a      	ldrb	r2, [r3, #0]
    6d38:	68bb      	ldr	r3, [r7, #8]
    6d3a:	0011      	movs	r1, r2
    6d3c:	0018      	movs	r0, r3
    6d3e:	4b3e      	ldr	r3, [pc, #248]	; (6e38 <usart_init+0x284>)
    6d40:	4798      	blx	r3
    6d42:	0003      	movs	r3, r0
    6d44:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d48:	3301      	adds	r3, #1
    6d4a:	d00d      	beq.n	6d68 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d4e:	b2da      	uxtb	r2, r3
    6d50:	2320      	movs	r3, #32
    6d52:	18fb      	adds	r3, r7, r3
    6d54:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d58:	0c1b      	lsrs	r3, r3, #16
    6d5a:	b2db      	uxtb	r3, r3
    6d5c:	2220      	movs	r2, #32
    6d5e:	18ba      	adds	r2, r7, r2
    6d60:	0011      	movs	r1, r2
    6d62:	0018      	movs	r0, r3
    6d64:	4b35      	ldr	r3, [pc, #212]	; (6e3c <usart_init+0x288>)
    6d66:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6d68:	233f      	movs	r3, #63	; 0x3f
    6d6a:	18fb      	adds	r3, r7, r3
    6d6c:	781a      	ldrb	r2, [r3, #0]
    6d6e:	233f      	movs	r3, #63	; 0x3f
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	3201      	adds	r2, #1
    6d74:	701a      	strb	r2, [r3, #0]
    6d76:	233f      	movs	r3, #63	; 0x3f
    6d78:	18fb      	adds	r3, r7, r3
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	2b03      	cmp	r3, #3
    6d7e:	d9cd      	bls.n	6d1c <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    6d80:	2300      	movs	r3, #0
    6d82:	637b      	str	r3, [r7, #52]	; 0x34
    6d84:	e00a      	b.n	6d9c <usart_init+0x1e8>
		module->callback[i]            = NULL;
    6d86:	68fa      	ldr	r2, [r7, #12]
    6d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d8a:	3302      	adds	r3, #2
    6d8c:	009b      	lsls	r3, r3, #2
    6d8e:	18d3      	adds	r3, r2, r3
    6d90:	3304      	adds	r3, #4
    6d92:	2200      	movs	r2, #0
    6d94:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    6d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d98:	3301      	adds	r3, #1
    6d9a:	637b      	str	r3, [r7, #52]	; 0x34
    6d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d9e:	2b05      	cmp	r3, #5
    6da0:	d9f1      	bls.n	6d86 <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
    6da2:	68fb      	ldr	r3, [r7, #12]
    6da4:	2200      	movs	r2, #0
    6da6:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	2200      	movs	r2, #0
    6dac:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6dae:	68fb      	ldr	r3, [r7, #12]
    6db0:	2200      	movs	r2, #0
    6db2:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6db4:	68fb      	ldr	r3, [r7, #12]
    6db6:	2200      	movs	r2, #0
    6db8:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6dba:	68fb      	ldr	r3, [r7, #12]
    6dbc:	2230      	movs	r2, #48	; 0x30
    6dbe:	2100      	movs	r1, #0
    6dc0:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    6dc2:	68fb      	ldr	r3, [r7, #12]
    6dc4:	2231      	movs	r2, #49	; 0x31
    6dc6:	2100      	movs	r1, #0
    6dc8:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    6dca:	68fb      	ldr	r3, [r7, #12]
    6dcc:	2232      	movs	r2, #50	; 0x32
    6dce:	2100      	movs	r1, #0
    6dd0:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	2233      	movs	r2, #51	; 0x33
    6dd6:	2100      	movs	r1, #0
    6dd8:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6dda:	68fb      	ldr	r3, [r7, #12]
    6ddc:	681b      	ldr	r3, [r3, #0]
    6dde:	2227      	movs	r2, #39	; 0x27
    6de0:	18bc      	adds	r4, r7, r2
    6de2:	0018      	movs	r0, r3
    6de4:	4b0c      	ldr	r3, [pc, #48]	; (6e18 <usart_init+0x264>)
    6de6:	4798      	blx	r3
    6de8:	0003      	movs	r3, r0
    6dea:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6dec:	4a14      	ldr	r2, [pc, #80]	; (6e40 <usart_init+0x28c>)
    6dee:	2327      	movs	r3, #39	; 0x27
    6df0:	18fb      	adds	r3, r7, r3
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	0011      	movs	r1, r2
    6df6:	0018      	movs	r0, r3
    6df8:	4b12      	ldr	r3, [pc, #72]	; (6e44 <usart_init+0x290>)
    6dfa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6dfc:	2327      	movs	r3, #39	; 0x27
    6dfe:	18fb      	adds	r3, r7, r3
    6e00:	781a      	ldrb	r2, [r3, #0]
    6e02:	4b11      	ldr	r3, [pc, #68]	; (6e48 <usart_init+0x294>)
    6e04:	0092      	lsls	r2, r2, #2
    6e06:	68f9      	ldr	r1, [r7, #12]
    6e08:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6e0a:	2333      	movs	r3, #51	; 0x33
    6e0c:	18fb      	adds	r3, r7, r3
    6e0e:	781b      	ldrb	r3, [r3, #0]
}
    6e10:	0018      	movs	r0, r3
    6e12:	46bd      	mov	sp, r7
    6e14:	b013      	add	sp, #76	; 0x4c
    6e16:	bd90      	pop	{r4, r7, pc}
    6e18:	0000789d 	.word	0x0000789d
    6e1c:	000067d1 	.word	0x000067d1
    6e20:	000067b9 	.word	0x000067b9
    6e24:	00008a11 	.word	0x00008a11
    6e28:	00008a51 	.word	0x00008a51
    6e2c:	00007655 	.word	0x00007655
    6e30:	000068d9 	.word	0x000068d9
    6e34:	0000684d 	.word	0x0000684d
    6e38:	000076e1 	.word	0x000076e1
    6e3c:	00008d39 	.word	0x00008d39
    6e40:	00006fe1 	.word	0x00006fe1
    6e44:	00007901 	.word	0x00007901
    6e48:	20000450 	.word	0x20000450

00006e4c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6e4c:	b580      	push	{r7, lr}
    6e4e:	b084      	sub	sp, #16
    6e50:	af00      	add	r7, sp, #0
    6e52:	6078      	str	r0, [r7, #4]
    6e54:	000a      	movs	r2, r1
    6e56:	1cbb      	adds	r3, r7, #2
    6e58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	79db      	ldrb	r3, [r3, #7]
    6e64:	2201      	movs	r2, #1
    6e66:	4053      	eors	r3, r2
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d001      	beq.n	6e72 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    6e6e:	231c      	movs	r3, #28
    6e70:	e017      	b.n	6ea2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6e76:	b29b      	uxth	r3, r3
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d001      	beq.n	6e80 <usart_write_wait+0x34>
		return STATUS_BUSY;
    6e7c:	2305      	movs	r3, #5
    6e7e:	e010      	b.n	6ea2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	0018      	movs	r0, r3
    6e84:	4b09      	ldr	r3, [pc, #36]	; (6eac <usart_write_wait+0x60>)
    6e86:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6e88:	68fb      	ldr	r3, [r7, #12]
    6e8a:	1cba      	adds	r2, r7, #2
    6e8c:	8812      	ldrh	r2, [r2, #0]
    6e8e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6e90:	46c0      	nop			; (mov r8, r8)
    6e92:	68fb      	ldr	r3, [r7, #12]
    6e94:	7e1b      	ldrb	r3, [r3, #24]
    6e96:	b2db      	uxtb	r3, r3
    6e98:	001a      	movs	r2, r3
    6e9a:	2302      	movs	r3, #2
    6e9c:	4013      	ands	r3, r2
    6e9e:	d0f8      	beq.n	6e92 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    6ea0:	2300      	movs	r3, #0
}
    6ea2:	0018      	movs	r0, r3
    6ea4:	46bd      	mov	sp, r7
    6ea6:	b004      	add	sp, #16
    6ea8:	bd80      	pop	{r7, pc}
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	000068b5 	.word	0x000068b5

00006eb0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b084      	sub	sp, #16
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
    6eb8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	681b      	ldr	r3, [r3, #0]
    6ebe:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	799b      	ldrb	r3, [r3, #6]
    6ec4:	2201      	movs	r2, #1
    6ec6:	4053      	eors	r3, r2
    6ec8:	b2db      	uxtb	r3, r3
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d001      	beq.n	6ed2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    6ece:	231c      	movs	r3, #28
    6ed0:	e05e      	b.n	6f90 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6ed6:	b29b      	uxth	r3, r3
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d001      	beq.n	6ee0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    6edc:	2305      	movs	r3, #5
    6ede:	e057      	b.n	6f90 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6ee0:	68fb      	ldr	r3, [r7, #12]
    6ee2:	7e1b      	ldrb	r3, [r3, #24]
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	001a      	movs	r2, r3
    6ee8:	2304      	movs	r3, #4
    6eea:	4013      	ands	r3, r2
    6eec:	d101      	bne.n	6ef2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    6eee:	2305      	movs	r3, #5
    6ef0:	e04e      	b.n	6f90 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	0018      	movs	r0, r3
    6ef6:	4b28      	ldr	r3, [pc, #160]	; (6f98 <usart_read_wait+0xe8>)
    6ef8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6efa:	68fb      	ldr	r3, [r7, #12]
    6efc:	8b5b      	ldrh	r3, [r3, #26]
    6efe:	b29b      	uxth	r3, r3
    6f00:	b2da      	uxtb	r2, r3
    6f02:	230b      	movs	r3, #11
    6f04:	18fb      	adds	r3, r7, r3
    6f06:	213f      	movs	r1, #63	; 0x3f
    6f08:	400a      	ands	r2, r1
    6f0a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    6f0c:	230b      	movs	r3, #11
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d036      	beq.n	6f84 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6f16:	230b      	movs	r3, #11
    6f18:	18fb      	adds	r3, r7, r3
    6f1a:	781b      	ldrb	r3, [r3, #0]
    6f1c:	2202      	movs	r2, #2
    6f1e:	4013      	ands	r3, r2
    6f20:	d004      	beq.n	6f2c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6f22:	68fb      	ldr	r3, [r7, #12]
    6f24:	2202      	movs	r2, #2
    6f26:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    6f28:	231a      	movs	r3, #26
    6f2a:	e031      	b.n	6f90 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6f2c:	230b      	movs	r3, #11
    6f2e:	18fb      	adds	r3, r7, r3
    6f30:	781b      	ldrb	r3, [r3, #0]
    6f32:	2204      	movs	r2, #4
    6f34:	4013      	ands	r3, r2
    6f36:	d004      	beq.n	6f42 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	2204      	movs	r2, #4
    6f3c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    6f3e:	231e      	movs	r3, #30
    6f40:	e026      	b.n	6f90 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6f42:	230b      	movs	r3, #11
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	781b      	ldrb	r3, [r3, #0]
    6f48:	2201      	movs	r2, #1
    6f4a:	4013      	ands	r3, r2
    6f4c:	d004      	beq.n	6f58 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	2201      	movs	r2, #1
    6f52:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    6f54:	2313      	movs	r3, #19
    6f56:	e01b      	b.n	6f90 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6f58:	230b      	movs	r3, #11
    6f5a:	18fb      	adds	r3, r7, r3
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	2210      	movs	r2, #16
    6f60:	4013      	ands	r3, r2
    6f62:	d004      	beq.n	6f6e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	2210      	movs	r2, #16
    6f68:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    6f6a:	2342      	movs	r3, #66	; 0x42
    6f6c:	e010      	b.n	6f90 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6f6e:	230b      	movs	r3, #11
    6f70:	18fb      	adds	r3, r7, r3
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	2220      	movs	r2, #32
    6f76:	4013      	ands	r3, r2
    6f78:	d004      	beq.n	6f84 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6f7a:	68fb      	ldr	r3, [r7, #12]
    6f7c:	2220      	movs	r2, #32
    6f7e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    6f80:	2341      	movs	r3, #65	; 0x41
    6f82:	e005      	b.n	6f90 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    6f84:	68fb      	ldr	r3, [r7, #12]
    6f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6f88:	b29a      	uxth	r2, r3
    6f8a:	683b      	ldr	r3, [r7, #0]
    6f8c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    6f8e:	2300      	movs	r3, #0
}
    6f90:	0018      	movs	r0, r3
    6f92:	46bd      	mov	sp, r7
    6f94:	b004      	add	sp, #16
    6f96:	bd80      	pop	{r7, pc}
    6f98:	000068b5 	.word	0x000068b5

00006f9c <usart_is_syncing>:
{
    6f9c:	b580      	push	{r7, lr}
    6f9e:	b084      	sub	sp, #16
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	681b      	ldr	r3, [r3, #0]
    6fa8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    6faa:	68fb      	ldr	r3, [r7, #12]
    6fac:	69db      	ldr	r3, [r3, #28]
    6fae:	1e5a      	subs	r2, r3, #1
    6fb0:	4193      	sbcs	r3, r2
    6fb2:	b2db      	uxtb	r3, r3
}
    6fb4:	0018      	movs	r0, r3
    6fb6:	46bd      	mov	sp, r7
    6fb8:	b004      	add	sp, #16
    6fba:	bd80      	pop	{r7, pc}

00006fbc <_usart_wait_for_sync>:
{
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b082      	sub	sp, #8
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6fc4:	46c0      	nop			; (mov r8, r8)
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	0018      	movs	r0, r3
    6fca:	4b04      	ldr	r3, [pc, #16]	; (6fdc <_usart_wait_for_sync+0x20>)
    6fcc:	4798      	blx	r3
    6fce:	1e03      	subs	r3, r0, #0
    6fd0:	d1f9      	bne.n	6fc6 <_usart_wait_for_sync+0xa>
}
    6fd2:	46c0      	nop			; (mov r8, r8)
    6fd4:	46bd      	mov	sp, r7
    6fd6:	b002      	add	sp, #8
    6fd8:	bd80      	pop	{r7, pc}
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	00006f9d 	.word	0x00006f9d

00006fe0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6fe0:	b580      	push	{r7, lr}
    6fe2:	b088      	sub	sp, #32
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	0002      	movs	r2, r0
    6fe8:	1dfb      	adds	r3, r7, #7
    6fea:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6fec:	1dfb      	adds	r3, r7, #7
    6fee:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6ff0:	4ba3      	ldr	r3, [pc, #652]	; (7280 <_usart_interrupt_handler+0x2a0>)
    6ff2:	0092      	lsls	r2, r2, #2
    6ff4:	58d3      	ldr	r3, [r2, r3]
    6ff6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6ff8:	69bb      	ldr	r3, [r7, #24]
    6ffa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6ffc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    6ffe:	69bb      	ldr	r3, [r7, #24]
    7000:	0018      	movs	r0, r3
    7002:	4ba0      	ldr	r3, [pc, #640]	; (7284 <_usart_interrupt_handler+0x2a4>)
    7004:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7006:	697b      	ldr	r3, [r7, #20]
    7008:	7e1b      	ldrb	r3, [r3, #24]
    700a:	b2da      	uxtb	r2, r3
    700c:	2312      	movs	r3, #18
    700e:	18fb      	adds	r3, r7, r3
    7010:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    7012:	697b      	ldr	r3, [r7, #20]
    7014:	7d9b      	ldrb	r3, [r3, #22]
    7016:	b2db      	uxtb	r3, r3
    7018:	b29a      	uxth	r2, r3
    701a:	2312      	movs	r3, #18
    701c:	18fb      	adds	r3, r7, r3
    701e:	2112      	movs	r1, #18
    7020:	1879      	adds	r1, r7, r1
    7022:	8809      	ldrh	r1, [r1, #0]
    7024:	400a      	ands	r2, r1
    7026:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    7028:	69bb      	ldr	r3, [r7, #24]
    702a:	2230      	movs	r2, #48	; 0x30
    702c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    702e:	69ba      	ldr	r2, [r7, #24]
    7030:	2131      	movs	r1, #49	; 0x31
    7032:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    7034:	4013      	ands	r3, r2
    7036:	b2da      	uxtb	r2, r3
    7038:	2310      	movs	r3, #16
    703a:	18fb      	adds	r3, r7, r3
    703c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    703e:	2312      	movs	r3, #18
    7040:	18fb      	adds	r3, r7, r3
    7042:	881b      	ldrh	r3, [r3, #0]
    7044:	2201      	movs	r2, #1
    7046:	4013      	ands	r3, r2
    7048:	d044      	beq.n	70d4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    704a:	69bb      	ldr	r3, [r7, #24]
    704c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    704e:	b29b      	uxth	r3, r3
    7050:	2b00      	cmp	r3, #0
    7052:	d03c      	beq.n	70ce <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7054:	69bb      	ldr	r3, [r7, #24]
    7056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	b2da      	uxtb	r2, r3
    705c:	231c      	movs	r3, #28
    705e:	18fb      	adds	r3, r7, r3
    7060:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7062:	69bb      	ldr	r3, [r7, #24]
    7064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7066:	1c5a      	adds	r2, r3, #1
    7068:	69bb      	ldr	r3, [r7, #24]
    706a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    706c:	69bb      	ldr	r3, [r7, #24]
    706e:	795b      	ldrb	r3, [r3, #5]
    7070:	2b01      	cmp	r3, #1
    7072:	d113      	bne.n	709c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7074:	69bb      	ldr	r3, [r7, #24]
    7076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7078:	781b      	ldrb	r3, [r3, #0]
    707a:	b2db      	uxtb	r3, r3
    707c:	021b      	lsls	r3, r3, #8
    707e:	b21a      	sxth	r2, r3
    7080:	231c      	movs	r3, #28
    7082:	18fb      	adds	r3, r7, r3
    7084:	2100      	movs	r1, #0
    7086:	5e5b      	ldrsh	r3, [r3, r1]
    7088:	4313      	orrs	r3, r2
    708a:	b21a      	sxth	r2, r3
    708c:	231c      	movs	r3, #28
    708e:	18fb      	adds	r3, r7, r3
    7090:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    7092:	69bb      	ldr	r3, [r7, #24]
    7094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7096:	1c5a      	adds	r2, r3, #1
    7098:	69bb      	ldr	r3, [r7, #24]
    709a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    709c:	231c      	movs	r3, #28
    709e:	18fb      	adds	r3, r7, r3
    70a0:	881b      	ldrh	r3, [r3, #0]
    70a2:	05db      	lsls	r3, r3, #23
    70a4:	0ddb      	lsrs	r3, r3, #23
    70a6:	b29a      	uxth	r2, r3
    70a8:	697b      	ldr	r3, [r7, #20]
    70aa:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    70ac:	69bb      	ldr	r3, [r7, #24]
    70ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    70b0:	b29b      	uxth	r3, r3
    70b2:	3b01      	subs	r3, #1
    70b4:	b29b      	uxth	r3, r3
    70b6:	69ba      	ldr	r2, [r7, #24]
    70b8:	1c19      	adds	r1, r3, #0
    70ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
    70bc:	2b00      	cmp	r3, #0
    70be:	d109      	bne.n	70d4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    70c0:	697b      	ldr	r3, [r7, #20]
    70c2:	2201      	movs	r2, #1
    70c4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    70c6:	697b      	ldr	r3, [r7, #20]
    70c8:	2202      	movs	r2, #2
    70ca:	759a      	strb	r2, [r3, #22]
    70cc:	e002      	b.n	70d4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    70ce:	697b      	ldr	r3, [r7, #20]
    70d0:	2201      	movs	r2, #1
    70d2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    70d4:	2312      	movs	r3, #18
    70d6:	18fb      	adds	r3, r7, r3
    70d8:	881b      	ldrh	r3, [r3, #0]
    70da:	2202      	movs	r2, #2
    70dc:	4013      	ands	r3, r2
    70de:	d011      	beq.n	7104 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    70e0:	697b      	ldr	r3, [r7, #20]
    70e2:	2202      	movs	r2, #2
    70e4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    70e6:	69bb      	ldr	r3, [r7, #24]
    70e8:	2233      	movs	r2, #51	; 0x33
    70ea:	2100      	movs	r1, #0
    70ec:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    70ee:	2310      	movs	r3, #16
    70f0:	18fb      	adds	r3, r7, r3
    70f2:	881b      	ldrh	r3, [r3, #0]
    70f4:	2201      	movs	r2, #1
    70f6:	4013      	ands	r3, r2
    70f8:	d004      	beq.n	7104 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    70fa:	69bb      	ldr	r3, [r7, #24]
    70fc:	68db      	ldr	r3, [r3, #12]
    70fe:	69ba      	ldr	r2, [r7, #24]
    7100:	0010      	movs	r0, r2
    7102:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7104:	2312      	movs	r3, #18
    7106:	18fb      	adds	r3, r7, r3
    7108:	881b      	ldrh	r3, [r3, #0]
    710a:	2204      	movs	r2, #4
    710c:	4013      	ands	r3, r2
    710e:	d100      	bne.n	7112 <_usart_interrupt_handler+0x132>
    7110:	e0bd      	b.n	728e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    7112:	69bb      	ldr	r3, [r7, #24]
    7114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7116:	b29b      	uxth	r3, r3
    7118:	2b00      	cmp	r3, #0
    711a:	d100      	bne.n	711e <_usart_interrupt_handler+0x13e>
    711c:	e0b4      	b.n	7288 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    711e:	697b      	ldr	r3, [r7, #20]
    7120:	8b5b      	ldrh	r3, [r3, #26]
    7122:	b29b      	uxth	r3, r3
    7124:	b2da      	uxtb	r2, r3
    7126:	231f      	movs	r3, #31
    7128:	18fb      	adds	r3, r7, r3
    712a:	213f      	movs	r1, #63	; 0x3f
    712c:	400a      	ands	r2, r1
    712e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7130:	231f      	movs	r3, #31
    7132:	18fb      	adds	r3, r7, r3
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	2208      	movs	r2, #8
    7138:	4013      	ands	r3, r2
    713a:	d007      	beq.n	714c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    713c:	231f      	movs	r3, #31
    713e:	18fb      	adds	r3, r7, r3
    7140:	221f      	movs	r2, #31
    7142:	18ba      	adds	r2, r7, r2
    7144:	7812      	ldrb	r2, [r2, #0]
    7146:	2108      	movs	r1, #8
    7148:	438a      	bics	r2, r1
    714a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    714c:	231f      	movs	r3, #31
    714e:	18fb      	adds	r3, r7, r3
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	2b00      	cmp	r3, #0
    7154:	d050      	beq.n	71f8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7156:	231f      	movs	r3, #31
    7158:	18fb      	adds	r3, r7, r3
    715a:	781b      	ldrb	r3, [r3, #0]
    715c:	2202      	movs	r2, #2
    715e:	4013      	ands	r3, r2
    7160:	d007      	beq.n	7172 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7162:	69bb      	ldr	r3, [r7, #24]
    7164:	2232      	movs	r2, #50	; 0x32
    7166:	211a      	movs	r1, #26
    7168:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    716a:	697b      	ldr	r3, [r7, #20]
    716c:	2202      	movs	r2, #2
    716e:	835a      	strh	r2, [r3, #26]
    7170:	e036      	b.n	71e0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7172:	231f      	movs	r3, #31
    7174:	18fb      	adds	r3, r7, r3
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	2204      	movs	r2, #4
    717a:	4013      	ands	r3, r2
    717c:	d007      	beq.n	718e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    717e:	69bb      	ldr	r3, [r7, #24]
    7180:	2232      	movs	r2, #50	; 0x32
    7182:	211e      	movs	r1, #30
    7184:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7186:	697b      	ldr	r3, [r7, #20]
    7188:	2204      	movs	r2, #4
    718a:	835a      	strh	r2, [r3, #26]
    718c:	e028      	b.n	71e0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    718e:	231f      	movs	r3, #31
    7190:	18fb      	adds	r3, r7, r3
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	2201      	movs	r2, #1
    7196:	4013      	ands	r3, r2
    7198:	d007      	beq.n	71aa <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    719a:	69bb      	ldr	r3, [r7, #24]
    719c:	2232      	movs	r2, #50	; 0x32
    719e:	2113      	movs	r1, #19
    71a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    71a2:	697b      	ldr	r3, [r7, #20]
    71a4:	2201      	movs	r2, #1
    71a6:	835a      	strh	r2, [r3, #26]
    71a8:	e01a      	b.n	71e0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    71aa:	231f      	movs	r3, #31
    71ac:	18fb      	adds	r3, r7, r3
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2210      	movs	r2, #16
    71b2:	4013      	ands	r3, r2
    71b4:	d007      	beq.n	71c6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    71b6:	69bb      	ldr	r3, [r7, #24]
    71b8:	2232      	movs	r2, #50	; 0x32
    71ba:	2142      	movs	r1, #66	; 0x42
    71bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    71be:	697b      	ldr	r3, [r7, #20]
    71c0:	2210      	movs	r2, #16
    71c2:	835a      	strh	r2, [r3, #26]
    71c4:	e00c      	b.n	71e0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    71c6:	231f      	movs	r3, #31
    71c8:	18fb      	adds	r3, r7, r3
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	2220      	movs	r2, #32
    71ce:	4013      	ands	r3, r2
    71d0:	d006      	beq.n	71e0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    71d2:	69bb      	ldr	r3, [r7, #24]
    71d4:	2232      	movs	r2, #50	; 0x32
    71d6:	2141      	movs	r1, #65	; 0x41
    71d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    71da:	697b      	ldr	r3, [r7, #20]
    71dc:	2220      	movs	r2, #32
    71de:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    71e0:	2310      	movs	r3, #16
    71e2:	18fb      	adds	r3, r7, r3
    71e4:	881b      	ldrh	r3, [r3, #0]
    71e6:	2204      	movs	r2, #4
    71e8:	4013      	ands	r3, r2
				if (callback_status
    71ea:	d050      	beq.n	728e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    71ec:	69bb      	ldr	r3, [r7, #24]
    71ee:	695b      	ldr	r3, [r3, #20]
    71f0:	69ba      	ldr	r2, [r7, #24]
    71f2:	0010      	movs	r0, r2
    71f4:	4798      	blx	r3
    71f6:	e04a      	b.n	728e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    71f8:	697b      	ldr	r3, [r7, #20]
    71fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    71fc:	b29a      	uxth	r2, r3
    71fe:	230e      	movs	r3, #14
    7200:	18fb      	adds	r3, r7, r3
    7202:	05d2      	lsls	r2, r2, #23
    7204:	0dd2      	lsrs	r2, r2, #23
    7206:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7208:	69bb      	ldr	r3, [r7, #24]
    720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    720c:	220e      	movs	r2, #14
    720e:	18ba      	adds	r2, r7, r2
    7210:	8812      	ldrh	r2, [r2, #0]
    7212:	b2d2      	uxtb	r2, r2
    7214:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7216:	69bb      	ldr	r3, [r7, #24]
    7218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    721a:	1c5a      	adds	r2, r3, #1
    721c:	69bb      	ldr	r3, [r7, #24]
    721e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7220:	69bb      	ldr	r3, [r7, #24]
    7222:	795b      	ldrb	r3, [r3, #5]
    7224:	2b01      	cmp	r3, #1
    7226:	d10d      	bne.n	7244 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7228:	69bb      	ldr	r3, [r7, #24]
    722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    722c:	220e      	movs	r2, #14
    722e:	18ba      	adds	r2, r7, r2
    7230:	8812      	ldrh	r2, [r2, #0]
    7232:	0a12      	lsrs	r2, r2, #8
    7234:	b292      	uxth	r2, r2
    7236:	b2d2      	uxtb	r2, r2
    7238:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    723a:	69bb      	ldr	r3, [r7, #24]
    723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    723e:	1c5a      	adds	r2, r3, #1
    7240:	69bb      	ldr	r3, [r7, #24]
    7242:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7244:	69bb      	ldr	r3, [r7, #24]
    7246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7248:	b29b      	uxth	r3, r3
    724a:	3b01      	subs	r3, #1
    724c:	b29b      	uxth	r3, r3
    724e:	69ba      	ldr	r2, [r7, #24]
    7250:	1c19      	adds	r1, r3, #0
    7252:	8591      	strh	r1, [r2, #44]	; 0x2c
    7254:	2b00      	cmp	r3, #0
    7256:	d11a      	bne.n	728e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7258:	697b      	ldr	r3, [r7, #20]
    725a:	2204      	movs	r2, #4
    725c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    725e:	69bb      	ldr	r3, [r7, #24]
    7260:	2232      	movs	r2, #50	; 0x32
    7262:	2100      	movs	r1, #0
    7264:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    7266:	2310      	movs	r3, #16
    7268:	18fb      	adds	r3, r7, r3
    726a:	881b      	ldrh	r3, [r3, #0]
    726c:	2202      	movs	r2, #2
    726e:	4013      	ands	r3, r2
					if (callback_status
    7270:	d00d      	beq.n	728e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7272:	69bb      	ldr	r3, [r7, #24]
    7274:	691b      	ldr	r3, [r3, #16]
    7276:	69ba      	ldr	r2, [r7, #24]
    7278:	0010      	movs	r0, r2
    727a:	4798      	blx	r3
    727c:	e007      	b.n	728e <_usart_interrupt_handler+0x2ae>
    727e:	46c0      	nop			; (mov r8, r8)
    7280:	20000450 	.word	0x20000450
    7284:	00006fbd 	.word	0x00006fbd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7288:	697b      	ldr	r3, [r7, #20]
    728a:	2204      	movs	r2, #4
    728c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    728e:	2312      	movs	r3, #18
    7290:	18fb      	adds	r3, r7, r3
    7292:	881b      	ldrh	r3, [r3, #0]
    7294:	2210      	movs	r2, #16
    7296:	4013      	ands	r3, r2
    7298:	d010      	beq.n	72bc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    729a:	697b      	ldr	r3, [r7, #20]
    729c:	2210      	movs	r2, #16
    729e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    72a0:	697b      	ldr	r3, [r7, #20]
    72a2:	2210      	movs	r2, #16
    72a4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    72a6:	2310      	movs	r3, #16
    72a8:	18fb      	adds	r3, r7, r3
    72aa:	881b      	ldrh	r3, [r3, #0]
    72ac:	2210      	movs	r2, #16
    72ae:	4013      	ands	r3, r2
    72b0:	d004      	beq.n	72bc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    72b2:	69bb      	ldr	r3, [r7, #24]
    72b4:	69db      	ldr	r3, [r3, #28]
    72b6:	69ba      	ldr	r2, [r7, #24]
    72b8:	0010      	movs	r0, r2
    72ba:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    72bc:	2312      	movs	r3, #18
    72be:	18fb      	adds	r3, r7, r3
    72c0:	881b      	ldrh	r3, [r3, #0]
    72c2:	2220      	movs	r2, #32
    72c4:	4013      	ands	r3, r2
    72c6:	d010      	beq.n	72ea <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    72c8:	697b      	ldr	r3, [r7, #20]
    72ca:	2220      	movs	r2, #32
    72cc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    72ce:	697b      	ldr	r3, [r7, #20]
    72d0:	2220      	movs	r2, #32
    72d2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    72d4:	2310      	movs	r3, #16
    72d6:	18fb      	adds	r3, r7, r3
    72d8:	881b      	ldrh	r3, [r3, #0]
    72da:	2208      	movs	r2, #8
    72dc:	4013      	ands	r3, r2
    72de:	d004      	beq.n	72ea <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    72e0:	69bb      	ldr	r3, [r7, #24]
    72e2:	699b      	ldr	r3, [r3, #24]
    72e4:	69ba      	ldr	r2, [r7, #24]
    72e6:	0010      	movs	r0, r2
    72e8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    72ea:	2312      	movs	r3, #18
    72ec:	18fb      	adds	r3, r7, r3
    72ee:	881b      	ldrh	r3, [r3, #0]
    72f0:	2208      	movs	r2, #8
    72f2:	4013      	ands	r3, r2
    72f4:	d010      	beq.n	7318 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    72f6:	697b      	ldr	r3, [r7, #20]
    72f8:	2208      	movs	r2, #8
    72fa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    72fc:	697b      	ldr	r3, [r7, #20]
    72fe:	2208      	movs	r2, #8
    7300:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7302:	2310      	movs	r3, #16
    7304:	18fb      	adds	r3, r7, r3
    7306:	881b      	ldrh	r3, [r3, #0]
    7308:	2220      	movs	r2, #32
    730a:	4013      	ands	r3, r2
    730c:	d004      	beq.n	7318 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    730e:	69bb      	ldr	r3, [r7, #24]
    7310:	6a1b      	ldr	r3, [r3, #32]
    7312:	69ba      	ldr	r2, [r7, #24]
    7314:	0010      	movs	r0, r2
    7316:	4798      	blx	r3
		}
	}
#endif
}
    7318:	46c0      	nop			; (mov r8, r8)
    731a:	46bd      	mov	sp, r7
    731c:	b008      	add	sp, #32
    731e:	bd80      	pop	{r7, pc}

00007320 <system_gclk_chan_get_config_defaults>:
{
    7320:	b580      	push	{r7, lr}
    7322:	b082      	sub	sp, #8
    7324:	af00      	add	r7, sp, #0
    7326:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	2200      	movs	r2, #0
    732c:	701a      	strb	r2, [r3, #0]
}
    732e:	46c0      	nop			; (mov r8, r8)
    7330:	46bd      	mov	sp, r7
    7332:	b002      	add	sp, #8
    7334:	bd80      	pop	{r7, pc}

00007336 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7336:	b5f0      	push	{r4, r5, r6, r7, lr}
    7338:	b08d      	sub	sp, #52	; 0x34
    733a:	af00      	add	r7, sp, #0
    733c:	60b8      	str	r0, [r7, #8]
    733e:	60f9      	str	r1, [r7, #12]
    7340:	603a      	str	r2, [r7, #0]
    7342:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7344:	2300      	movs	r3, #0
    7346:	2400      	movs	r4, #0
    7348:	623b      	str	r3, [r7, #32]
    734a:	627c      	str	r4, [r7, #36]	; 0x24
    734c:	2300      	movs	r3, #0
    734e:	2400      	movs	r4, #0
    7350:	61bb      	str	r3, [r7, #24]
    7352:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    7354:	233f      	movs	r3, #63	; 0x3f
    7356:	62fb      	str	r3, [r7, #44]	; 0x2c
    7358:	e053      	b.n	7402 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    735c:	3b20      	subs	r3, #32
    735e:	2b00      	cmp	r3, #0
    7360:	db04      	blt.n	736c <long_division+0x36>
    7362:	2201      	movs	r2, #1
    7364:	409a      	lsls	r2, r3
    7366:	0013      	movs	r3, r2
    7368:	617b      	str	r3, [r7, #20]
    736a:	e00b      	b.n	7384 <long_division+0x4e>
    736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    736e:	2220      	movs	r2, #32
    7370:	1ad3      	subs	r3, r2, r3
    7372:	2201      	movs	r2, #1
    7374:	40da      	lsrs	r2, r3
    7376:	0013      	movs	r3, r2
    7378:	2100      	movs	r1, #0
    737a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    737c:	4091      	lsls	r1, r2
    737e:	000a      	movs	r2, r1
    7380:	4313      	orrs	r3, r2
    7382:	617b      	str	r3, [r7, #20]
    7384:	2201      	movs	r2, #1
    7386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7388:	409a      	lsls	r2, r3
    738a:	0013      	movs	r3, r2
    738c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    738e:	69bb      	ldr	r3, [r7, #24]
    7390:	69fc      	ldr	r4, [r7, #28]
    7392:	18db      	adds	r3, r3, r3
    7394:	4164      	adcs	r4, r4
    7396:	61bb      	str	r3, [r7, #24]
    7398:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    739a:	68bb      	ldr	r3, [r7, #8]
    739c:	693a      	ldr	r2, [r7, #16]
    739e:	401a      	ands	r2, r3
    73a0:	0015      	movs	r5, r2
    73a2:	68fb      	ldr	r3, [r7, #12]
    73a4:	697a      	ldr	r2, [r7, #20]
    73a6:	401a      	ands	r2, r3
    73a8:	0016      	movs	r6, r2
    73aa:	002b      	movs	r3, r5
    73ac:	4333      	orrs	r3, r6
    73ae:	d007      	beq.n	73c0 <long_division+0x8a>
			r |= 0x01;
    73b0:	69bb      	ldr	r3, [r7, #24]
    73b2:	2201      	movs	r2, #1
    73b4:	4313      	orrs	r3, r2
    73b6:	61bb      	str	r3, [r7, #24]
    73b8:	69fb      	ldr	r3, [r7, #28]
    73ba:	2200      	movs	r2, #0
    73bc:	4313      	orrs	r3, r2
    73be:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    73c0:	687a      	ldr	r2, [r7, #4]
    73c2:	69fb      	ldr	r3, [r7, #28]
    73c4:	429a      	cmp	r2, r3
    73c6:	d819      	bhi.n	73fc <long_division+0xc6>
    73c8:	687a      	ldr	r2, [r7, #4]
    73ca:	69fb      	ldr	r3, [r7, #28]
    73cc:	429a      	cmp	r2, r3
    73ce:	d103      	bne.n	73d8 <long_division+0xa2>
    73d0:	683a      	ldr	r2, [r7, #0]
    73d2:	69bb      	ldr	r3, [r7, #24]
    73d4:	429a      	cmp	r2, r3
    73d6:	d811      	bhi.n	73fc <long_division+0xc6>
			r = r - d;
    73d8:	69b9      	ldr	r1, [r7, #24]
    73da:	69fa      	ldr	r2, [r7, #28]
    73dc:	683b      	ldr	r3, [r7, #0]
    73de:	687c      	ldr	r4, [r7, #4]
    73e0:	1ac9      	subs	r1, r1, r3
    73e2:	41a2      	sbcs	r2, r4
    73e4:	000b      	movs	r3, r1
    73e6:	0014      	movs	r4, r2
    73e8:	61bb      	str	r3, [r7, #24]
    73ea:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    73ec:	6a3a      	ldr	r2, [r7, #32]
    73ee:	693b      	ldr	r3, [r7, #16]
    73f0:	4313      	orrs	r3, r2
    73f2:	623b      	str	r3, [r7, #32]
    73f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    73f6:	697b      	ldr	r3, [r7, #20]
    73f8:	4313      	orrs	r3, r2
    73fa:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    73fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    73fe:	3b01      	subs	r3, #1
    7400:	62fb      	str	r3, [r7, #44]	; 0x2c
    7402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7404:	2b00      	cmp	r3, #0
    7406:	daa8      	bge.n	735a <long_division+0x24>
		}
	}

	return q;
    7408:	6a3b      	ldr	r3, [r7, #32]
    740a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    740c:	0018      	movs	r0, r3
    740e:	0021      	movs	r1, r4
    7410:	46bd      	mov	sp, r7
    7412:	b00d      	add	sp, #52	; 0x34
    7414:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007416 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7416:	b580      	push	{r7, lr}
    7418:	b086      	sub	sp, #24
    741a:	af00      	add	r7, sp, #0
    741c:	60f8      	str	r0, [r7, #12]
    741e:	60b9      	str	r1, [r7, #8]
    7420:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7422:	2316      	movs	r3, #22
    7424:	18fb      	adds	r3, r7, r3
    7426:	2200      	movs	r2, #0
    7428:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    742a:	68bb      	ldr	r3, [r7, #8]
    742c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    742e:	68bb      	ldr	r3, [r7, #8]
    7430:	085a      	lsrs	r2, r3, #1
    7432:	68fb      	ldr	r3, [r7, #12]
    7434:	429a      	cmp	r2, r3
    7436:	d201      	bcs.n	743c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7438:	2340      	movs	r3, #64	; 0x40
    743a:	e026      	b.n	748a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    743c:	68bb      	ldr	r3, [r7, #8]
    743e:	085b      	lsrs	r3, r3, #1
    7440:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7442:	e00a      	b.n	745a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7444:	693a      	ldr	r2, [r7, #16]
    7446:	68fb      	ldr	r3, [r7, #12]
    7448:	1ad3      	subs	r3, r2, r3
    744a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    744c:	2316      	movs	r3, #22
    744e:	18fb      	adds	r3, r7, r3
    7450:	881a      	ldrh	r2, [r3, #0]
    7452:	2316      	movs	r3, #22
    7454:	18fb      	adds	r3, r7, r3
    7456:	3201      	adds	r2, #1
    7458:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    745a:	693a      	ldr	r2, [r7, #16]
    745c:	68fb      	ldr	r3, [r7, #12]
    745e:	429a      	cmp	r2, r3
    7460:	d2f0      	bcs.n	7444 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    7462:	2316      	movs	r3, #22
    7464:	18fb      	adds	r3, r7, r3
    7466:	2216      	movs	r2, #22
    7468:	18ba      	adds	r2, r7, r2
    746a:	8812      	ldrh	r2, [r2, #0]
    746c:	3a01      	subs	r2, #1
    746e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7470:	2316      	movs	r3, #22
    7472:	18fb      	adds	r3, r7, r3
    7474:	881b      	ldrh	r3, [r3, #0]
    7476:	2bff      	cmp	r3, #255	; 0xff
    7478:	d901      	bls.n	747e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    747a:	2340      	movs	r3, #64	; 0x40
    747c:	e005      	b.n	748a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	2216      	movs	r2, #22
    7482:	18ba      	adds	r2, r7, r2
    7484:	8812      	ldrh	r2, [r2, #0]
    7486:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    7488:	2300      	movs	r3, #0
	}
}
    748a:	0018      	movs	r0, r3
    748c:	46bd      	mov	sp, r7
    748e:	b006      	add	sp, #24
    7490:	bd80      	pop	{r7, pc}
	...

00007494 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7494:	b5f0      	push	{r4, r5, r6, r7, lr}
    7496:	b0a1      	sub	sp, #132	; 0x84
    7498:	af00      	add	r7, sp, #0
    749a:	64f8      	str	r0, [r7, #76]	; 0x4c
    749c:	64b9      	str	r1, [r7, #72]	; 0x48
    749e:	647a      	str	r2, [r7, #68]	; 0x44
    74a0:	2243      	movs	r2, #67	; 0x43
    74a2:	18ba      	adds	r2, r7, r2
    74a4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    74a6:	2300      	movs	r3, #0
    74a8:	2400      	movs	r4, #0
    74aa:	673b      	str	r3, [r7, #112]	; 0x70
    74ac:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    74ae:	2300      	movs	r3, #0
    74b0:	2400      	movs	r4, #0
    74b2:	66bb      	str	r3, [r7, #104]	; 0x68
    74b4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    74b6:	2300      	movs	r3, #0
    74b8:	2400      	movs	r4, #0
    74ba:	67bb      	str	r3, [r7, #120]	; 0x78
    74bc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    74be:	2300      	movs	r3, #0
    74c0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    74c2:	2358      	movs	r3, #88	; 0x58
    74c4:	2240      	movs	r2, #64	; 0x40
    74c6:	4694      	mov	ip, r2
    74c8:	44bc      	add	ip, r7
    74ca:	4463      	add	r3, ip
    74cc:	781a      	ldrb	r2, [r3, #0]
    74ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    74d0:	435a      	muls	r2, r3
    74d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    74d4:	429a      	cmp	r2, r3
    74d6:	d901      	bls.n	74dc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    74d8:	2340      	movs	r3, #64	; 0x40
    74da:	e0b3      	b.n	7644 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    74dc:	2343      	movs	r3, #67	; 0x43
    74de:	18fb      	adds	r3, r7, r3
    74e0:	781b      	ldrb	r3, [r3, #0]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d13d      	bne.n	7562 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    74e6:	2358      	movs	r3, #88	; 0x58
    74e8:	2240      	movs	r2, #64	; 0x40
    74ea:	4694      	mov	ip, r2
    74ec:	44bc      	add	ip, r7
    74ee:	4463      	add	r3, ip
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	b2db      	uxtb	r3, r3
    74f4:	613b      	str	r3, [r7, #16]
    74f6:	2300      	movs	r3, #0
    74f8:	617b      	str	r3, [r7, #20]
    74fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    74fc:	60bb      	str	r3, [r7, #8]
    74fe:	2300      	movs	r3, #0
    7500:	60fb      	str	r3, [r7, #12]
    7502:	4c52      	ldr	r4, [pc, #328]	; (764c <_sercom_get_async_baud_val+0x1b8>)
    7504:	68ba      	ldr	r2, [r7, #8]
    7506:	68fb      	ldr	r3, [r7, #12]
    7508:	6938      	ldr	r0, [r7, #16]
    750a:	6979      	ldr	r1, [r7, #20]
    750c:	47a0      	blx	r4
    750e:	0003      	movs	r3, r0
    7510:	000c      	movs	r4, r1
    7512:	001b      	movs	r3, r3
    7514:	65fb      	str	r3, [r7, #92]	; 0x5c
    7516:	2300      	movs	r3, #0
    7518:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    751a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    751c:	603b      	str	r3, [r7, #0]
    751e:	2300      	movs	r3, #0
    7520:	607b      	str	r3, [r7, #4]
    7522:	6db8      	ldr	r0, [r7, #88]	; 0x58
    7524:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    7526:	683a      	ldr	r2, [r7, #0]
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	4c49      	ldr	r4, [pc, #292]	; (7650 <_sercom_get_async_baud_val+0x1bc>)
    752c:	47a0      	blx	r4
    752e:	0003      	movs	r3, r0
    7530:	000c      	movs	r4, r1
    7532:	673b      	str	r3, [r7, #112]	; 0x70
    7534:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7536:	2100      	movs	r1, #0
    7538:	2201      	movs	r2, #1
    753a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    753c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    753e:	1ac9      	subs	r1, r1, r3
    7540:	41a2      	sbcs	r2, r4
    7542:	000b      	movs	r3, r1
    7544:	0014      	movs	r4, r2
    7546:	66bb      	str	r3, [r7, #104]	; 0x68
    7548:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    754a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    754c:	0c1b      	lsrs	r3, r3, #16
    754e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7550:	0416      	lsls	r6, r2, #16
    7552:	431e      	orrs	r6, r3
    7554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7556:	041d      	lsls	r5, r3, #16
    7558:	0033      	movs	r3, r6
    755a:	67bb      	str	r3, [r7, #120]	; 0x78
    755c:	2300      	movs	r3, #0
    755e:	67fb      	str	r3, [r7, #124]	; 0x7c
    7560:	e06a      	b.n	7638 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7562:	2343      	movs	r3, #67	; 0x43
    7564:	18fb      	adds	r3, r7, r3
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	2b01      	cmp	r3, #1
    756a:	d165      	bne.n	7638 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    756c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    756e:	633b      	str	r3, [r7, #48]	; 0x30
    7570:	2300      	movs	r3, #0
    7572:	637b      	str	r3, [r7, #52]	; 0x34
    7574:	2358      	movs	r3, #88	; 0x58
    7576:	2240      	movs	r2, #64	; 0x40
    7578:	4694      	mov	ip, r2
    757a:	44bc      	add	ip, r7
    757c:	4463      	add	r3, ip
    757e:	781b      	ldrb	r3, [r3, #0]
    7580:	b2db      	uxtb	r3, r3
    7582:	62bb      	str	r3, [r7, #40]	; 0x28
    7584:	2300      	movs	r3, #0
    7586:	62fb      	str	r3, [r7, #44]	; 0x2c
    7588:	4c30      	ldr	r4, [pc, #192]	; (764c <_sercom_get_async_baud_val+0x1b8>)
    758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    758e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    7590:	6b79      	ldr	r1, [r7, #52]	; 0x34
    7592:	47a0      	blx	r4
    7594:	0003      	movs	r3, r0
    7596:	000c      	movs	r4, r1
    7598:	65bb      	str	r3, [r7, #88]	; 0x58
    759a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    759e:	623b      	str	r3, [r7, #32]
    75a0:	2300      	movs	r3, #0
    75a2:	627b      	str	r3, [r7, #36]	; 0x24
    75a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    75a6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    75a8:	001a      	movs	r2, r3
    75aa:	0023      	movs	r3, r4
    75ac:	6a38      	ldr	r0, [r7, #32]
    75ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
    75b0:	4c27      	ldr	r4, [pc, #156]	; (7650 <_sercom_get_async_baud_val+0x1bc>)
    75b2:	47a0      	blx	r4
    75b4:	0003      	movs	r3, r0
    75b6:	000c      	movs	r4, r1
    75b8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    75ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    75bc:	2380      	movs	r3, #128	; 0x80
    75be:	019b      	lsls	r3, r3, #6
    75c0:	429a      	cmp	r2, r3
    75c2:	d901      	bls.n	75c8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    75c4:	2340      	movs	r3, #64	; 0x40
    75c6:	e03d      	b.n	7644 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    75c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    75ca:	61bb      	str	r3, [r7, #24]
    75cc:	2300      	movs	r3, #0
    75ce:	61fb      	str	r3, [r7, #28]
    75d0:	69b9      	ldr	r1, [r7, #24]
    75d2:	69fa      	ldr	r2, [r7, #28]
    75d4:	000b      	movs	r3, r1
    75d6:	0f5b      	lsrs	r3, r3, #29
    75d8:	0010      	movs	r0, r2
    75da:	00c0      	lsls	r0, r0, #3
    75dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    75de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    75e0:	4318      	orrs	r0, r3
    75e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    75e4:	000b      	movs	r3, r1
    75e6:	00db      	lsls	r3, r3, #3
    75e8:	63bb      	str	r3, [r7, #56]	; 0x38
    75ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    75ec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    75ee:	001a      	movs	r2, r3
    75f0:	0023      	movs	r3, r4
    75f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    75f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    75f6:	4c16      	ldr	r4, [pc, #88]	; (7650 <_sercom_get_async_baud_val+0x1bc>)
    75f8:	47a0      	blx	r4
    75fa:	0003      	movs	r3, r0
    75fc:	000c      	movs	r4, r1
    75fe:	65bb      	str	r3, [r7, #88]	; 0x58
    7600:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    7602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7604:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7606:	b2d9      	uxtb	r1, r3
    7608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    760a:	b2db      	uxtb	r3, r3
    760c:	00db      	lsls	r3, r3, #3
    760e:	b2da      	uxtb	r2, r3
    7610:	2317      	movs	r3, #23
    7612:	2040      	movs	r0, #64	; 0x40
    7614:	4684      	mov	ip, r0
    7616:	44bc      	add	ip, r7
    7618:	4463      	add	r3, ip
    761a:	1a8a      	subs	r2, r1, r2
    761c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    761e:	2317      	movs	r3, #23
    7620:	2240      	movs	r2, #64	; 0x40
    7622:	4694      	mov	ip, r2
    7624:	44bc      	add	ip, r7
    7626:	4463      	add	r3, ip
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	035b      	lsls	r3, r3, #13
    762c:	001a      	movs	r2, r3
    762e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7630:	4313      	orrs	r3, r2
    7632:	67bb      	str	r3, [r7, #120]	; 0x78
    7634:	2300      	movs	r3, #0
    7636:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    7638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    763a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    763c:	b29a      	uxth	r2, r3
    763e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7640:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    7642:	2300      	movs	r3, #0
}
    7644:	0018      	movs	r0, r3
    7646:	46bd      	mov	sp, r7
    7648:	b021      	add	sp, #132	; 0x84
    764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    764c:	000093bd 	.word	0x000093bd
    7650:	00007337 	.word	0x00007337

00007654 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7654:	b580      	push	{r7, lr}
    7656:	b084      	sub	sp, #16
    7658:	af00      	add	r7, sp, #0
    765a:	0002      	movs	r2, r0
    765c:	1dfb      	adds	r3, r7, #7
    765e:	701a      	strb	r2, [r3, #0]
    7660:	1dbb      	adds	r3, r7, #6
    7662:	1c0a      	adds	r2, r1, #0
    7664:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7666:	4b1a      	ldr	r3, [pc, #104]	; (76d0 <sercom_set_gclk_generator+0x7c>)
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	2201      	movs	r2, #1
    766c:	4053      	eors	r3, r2
    766e:	b2db      	uxtb	r3, r3
    7670:	2b00      	cmp	r3, #0
    7672:	d103      	bne.n	767c <sercom_set_gclk_generator+0x28>
    7674:	1dbb      	adds	r3, r7, #6
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	2b00      	cmp	r3, #0
    767a:	d01b      	beq.n	76b4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    767c:	230c      	movs	r3, #12
    767e:	18fb      	adds	r3, r7, r3
    7680:	0018      	movs	r0, r3
    7682:	4b14      	ldr	r3, [pc, #80]	; (76d4 <sercom_set_gclk_generator+0x80>)
    7684:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    7686:	230c      	movs	r3, #12
    7688:	18fb      	adds	r3, r7, r3
    768a:	1dfa      	adds	r2, r7, #7
    768c:	7812      	ldrb	r2, [r2, #0]
    768e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7690:	230c      	movs	r3, #12
    7692:	18fb      	adds	r3, r7, r3
    7694:	0019      	movs	r1, r3
    7696:	2011      	movs	r0, #17
    7698:	4b0f      	ldr	r3, [pc, #60]	; (76d8 <sercom_set_gclk_generator+0x84>)
    769a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    769c:	2011      	movs	r0, #17
    769e:	4b0f      	ldr	r3, [pc, #60]	; (76dc <sercom_set_gclk_generator+0x88>)
    76a0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    76a2:	4b0b      	ldr	r3, [pc, #44]	; (76d0 <sercom_set_gclk_generator+0x7c>)
    76a4:	1dfa      	adds	r2, r7, #7
    76a6:	7812      	ldrb	r2, [r2, #0]
    76a8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    76aa:	4b09      	ldr	r3, [pc, #36]	; (76d0 <sercom_set_gclk_generator+0x7c>)
    76ac:	2201      	movs	r2, #1
    76ae:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    76b0:	2300      	movs	r3, #0
    76b2:	e008      	b.n	76c6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    76b4:	4b06      	ldr	r3, [pc, #24]	; (76d0 <sercom_set_gclk_generator+0x7c>)
    76b6:	785b      	ldrb	r3, [r3, #1]
    76b8:	1dfa      	adds	r2, r7, #7
    76ba:	7812      	ldrb	r2, [r2, #0]
    76bc:	429a      	cmp	r2, r3
    76be:	d101      	bne.n	76c4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    76c0:	2300      	movs	r3, #0
    76c2:	e000      	b.n	76c6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    76c4:	231d      	movs	r3, #29
}
    76c6:	0018      	movs	r0, r3
    76c8:	46bd      	mov	sp, r7
    76ca:	b004      	add	sp, #16
    76cc:	bd80      	pop	{r7, pc}
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	200002f0 	.word	0x200002f0
    76d4:	00007321 	.word	0x00007321
    76d8:	00008a11 	.word	0x00008a11
    76dc:	00008a51 	.word	0x00008a51

000076e0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    76e0:	b580      	push	{r7, lr}
    76e2:	b082      	sub	sp, #8
    76e4:	af00      	add	r7, sp, #0
    76e6:	6078      	str	r0, [r7, #4]
    76e8:	000a      	movs	r2, r1
    76ea:	1cfb      	adds	r3, r7, #3
    76ec:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	4a4e      	ldr	r2, [pc, #312]	; (782c <_sercom_get_default_pad+0x14c>)
    76f2:	4293      	cmp	r3, r2
    76f4:	d040      	beq.n	7778 <_sercom_get_default_pad+0x98>
    76f6:	4a4d      	ldr	r2, [pc, #308]	; (782c <_sercom_get_default_pad+0x14c>)
    76f8:	4293      	cmp	r3, r2
    76fa:	d807      	bhi.n	770c <_sercom_get_default_pad+0x2c>
    76fc:	2284      	movs	r2, #132	; 0x84
    76fe:	05d2      	lsls	r2, r2, #23
    7700:	4293      	cmp	r3, r2
    7702:	d00f      	beq.n	7724 <_sercom_get_default_pad+0x44>
    7704:	4a4a      	ldr	r2, [pc, #296]	; (7830 <_sercom_get_default_pad+0x150>)
    7706:	4293      	cmp	r3, r2
    7708:	d021      	beq.n	774e <_sercom_get_default_pad+0x6e>
    770a:	e089      	b.n	7820 <_sercom_get_default_pad+0x140>
    770c:	4a49      	ldr	r2, [pc, #292]	; (7834 <_sercom_get_default_pad+0x154>)
    770e:	4293      	cmp	r3, r2
    7710:	d100      	bne.n	7714 <_sercom_get_default_pad+0x34>
    7712:	e05b      	b.n	77cc <_sercom_get_default_pad+0xec>
    7714:	4a48      	ldr	r2, [pc, #288]	; (7838 <_sercom_get_default_pad+0x158>)
    7716:	4293      	cmp	r3, r2
    7718:	d100      	bne.n	771c <_sercom_get_default_pad+0x3c>
    771a:	e06c      	b.n	77f6 <_sercom_get_default_pad+0x116>
    771c:	4a47      	ldr	r2, [pc, #284]	; (783c <_sercom_get_default_pad+0x15c>)
    771e:	4293      	cmp	r3, r2
    7720:	d03f      	beq.n	77a2 <_sercom_get_default_pad+0xc2>
    7722:	e07d      	b.n	7820 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7724:	1cfb      	adds	r3, r7, #3
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	2b01      	cmp	r3, #1
    772a:	d00a      	beq.n	7742 <_sercom_get_default_pad+0x62>
    772c:	dc02      	bgt.n	7734 <_sercom_get_default_pad+0x54>
    772e:	2b00      	cmp	r3, #0
    7730:	d005      	beq.n	773e <_sercom_get_default_pad+0x5e>
    7732:	e075      	b.n	7820 <_sercom_get_default_pad+0x140>
    7734:	2b02      	cmp	r3, #2
    7736:	d006      	beq.n	7746 <_sercom_get_default_pad+0x66>
    7738:	2b03      	cmp	r3, #3
    773a:	d006      	beq.n	774a <_sercom_get_default_pad+0x6a>
    773c:	e070      	b.n	7820 <_sercom_get_default_pad+0x140>
    773e:	4b40      	ldr	r3, [pc, #256]	; (7840 <_sercom_get_default_pad+0x160>)
    7740:	e06f      	b.n	7822 <_sercom_get_default_pad+0x142>
    7742:	4b40      	ldr	r3, [pc, #256]	; (7844 <_sercom_get_default_pad+0x164>)
    7744:	e06d      	b.n	7822 <_sercom_get_default_pad+0x142>
    7746:	4b40      	ldr	r3, [pc, #256]	; (7848 <_sercom_get_default_pad+0x168>)
    7748:	e06b      	b.n	7822 <_sercom_get_default_pad+0x142>
    774a:	4b40      	ldr	r3, [pc, #256]	; (784c <_sercom_get_default_pad+0x16c>)
    774c:	e069      	b.n	7822 <_sercom_get_default_pad+0x142>
    774e:	1cfb      	adds	r3, r7, #3
    7750:	781b      	ldrb	r3, [r3, #0]
    7752:	2b01      	cmp	r3, #1
    7754:	d00a      	beq.n	776c <_sercom_get_default_pad+0x8c>
    7756:	dc02      	bgt.n	775e <_sercom_get_default_pad+0x7e>
    7758:	2b00      	cmp	r3, #0
    775a:	d005      	beq.n	7768 <_sercom_get_default_pad+0x88>
    775c:	e060      	b.n	7820 <_sercom_get_default_pad+0x140>
    775e:	2b02      	cmp	r3, #2
    7760:	d006      	beq.n	7770 <_sercom_get_default_pad+0x90>
    7762:	2b03      	cmp	r3, #3
    7764:	d006      	beq.n	7774 <_sercom_get_default_pad+0x94>
    7766:	e05b      	b.n	7820 <_sercom_get_default_pad+0x140>
    7768:	2303      	movs	r3, #3
    776a:	e05a      	b.n	7822 <_sercom_get_default_pad+0x142>
    776c:	4b38      	ldr	r3, [pc, #224]	; (7850 <_sercom_get_default_pad+0x170>)
    776e:	e058      	b.n	7822 <_sercom_get_default_pad+0x142>
    7770:	4b38      	ldr	r3, [pc, #224]	; (7854 <_sercom_get_default_pad+0x174>)
    7772:	e056      	b.n	7822 <_sercom_get_default_pad+0x142>
    7774:	4b38      	ldr	r3, [pc, #224]	; (7858 <_sercom_get_default_pad+0x178>)
    7776:	e054      	b.n	7822 <_sercom_get_default_pad+0x142>
    7778:	1cfb      	adds	r3, r7, #3
    777a:	781b      	ldrb	r3, [r3, #0]
    777c:	2b01      	cmp	r3, #1
    777e:	d00a      	beq.n	7796 <_sercom_get_default_pad+0xb6>
    7780:	dc02      	bgt.n	7788 <_sercom_get_default_pad+0xa8>
    7782:	2b00      	cmp	r3, #0
    7784:	d005      	beq.n	7792 <_sercom_get_default_pad+0xb2>
    7786:	e04b      	b.n	7820 <_sercom_get_default_pad+0x140>
    7788:	2b02      	cmp	r3, #2
    778a:	d006      	beq.n	779a <_sercom_get_default_pad+0xba>
    778c:	2b03      	cmp	r3, #3
    778e:	d006      	beq.n	779e <_sercom_get_default_pad+0xbe>
    7790:	e046      	b.n	7820 <_sercom_get_default_pad+0x140>
    7792:	4b32      	ldr	r3, [pc, #200]	; (785c <_sercom_get_default_pad+0x17c>)
    7794:	e045      	b.n	7822 <_sercom_get_default_pad+0x142>
    7796:	4b32      	ldr	r3, [pc, #200]	; (7860 <_sercom_get_default_pad+0x180>)
    7798:	e043      	b.n	7822 <_sercom_get_default_pad+0x142>
    779a:	4b32      	ldr	r3, [pc, #200]	; (7864 <_sercom_get_default_pad+0x184>)
    779c:	e041      	b.n	7822 <_sercom_get_default_pad+0x142>
    779e:	4b32      	ldr	r3, [pc, #200]	; (7868 <_sercom_get_default_pad+0x188>)
    77a0:	e03f      	b.n	7822 <_sercom_get_default_pad+0x142>
    77a2:	1cfb      	adds	r3, r7, #3
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	2b01      	cmp	r3, #1
    77a8:	d00a      	beq.n	77c0 <_sercom_get_default_pad+0xe0>
    77aa:	dc02      	bgt.n	77b2 <_sercom_get_default_pad+0xd2>
    77ac:	2b00      	cmp	r3, #0
    77ae:	d005      	beq.n	77bc <_sercom_get_default_pad+0xdc>
    77b0:	e036      	b.n	7820 <_sercom_get_default_pad+0x140>
    77b2:	2b02      	cmp	r3, #2
    77b4:	d006      	beq.n	77c4 <_sercom_get_default_pad+0xe4>
    77b6:	2b03      	cmp	r3, #3
    77b8:	d006      	beq.n	77c8 <_sercom_get_default_pad+0xe8>
    77ba:	e031      	b.n	7820 <_sercom_get_default_pad+0x140>
    77bc:	4b2b      	ldr	r3, [pc, #172]	; (786c <_sercom_get_default_pad+0x18c>)
    77be:	e030      	b.n	7822 <_sercom_get_default_pad+0x142>
    77c0:	4b2b      	ldr	r3, [pc, #172]	; (7870 <_sercom_get_default_pad+0x190>)
    77c2:	e02e      	b.n	7822 <_sercom_get_default_pad+0x142>
    77c4:	4b2b      	ldr	r3, [pc, #172]	; (7874 <_sercom_get_default_pad+0x194>)
    77c6:	e02c      	b.n	7822 <_sercom_get_default_pad+0x142>
    77c8:	4b2b      	ldr	r3, [pc, #172]	; (7878 <_sercom_get_default_pad+0x198>)
    77ca:	e02a      	b.n	7822 <_sercom_get_default_pad+0x142>
    77cc:	1cfb      	adds	r3, r7, #3
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	2b01      	cmp	r3, #1
    77d2:	d00a      	beq.n	77ea <_sercom_get_default_pad+0x10a>
    77d4:	dc02      	bgt.n	77dc <_sercom_get_default_pad+0xfc>
    77d6:	2b00      	cmp	r3, #0
    77d8:	d005      	beq.n	77e6 <_sercom_get_default_pad+0x106>
    77da:	e021      	b.n	7820 <_sercom_get_default_pad+0x140>
    77dc:	2b02      	cmp	r3, #2
    77de:	d006      	beq.n	77ee <_sercom_get_default_pad+0x10e>
    77e0:	2b03      	cmp	r3, #3
    77e2:	d006      	beq.n	77f2 <_sercom_get_default_pad+0x112>
    77e4:	e01c      	b.n	7820 <_sercom_get_default_pad+0x140>
    77e6:	4b25      	ldr	r3, [pc, #148]	; (787c <_sercom_get_default_pad+0x19c>)
    77e8:	e01b      	b.n	7822 <_sercom_get_default_pad+0x142>
    77ea:	4b25      	ldr	r3, [pc, #148]	; (7880 <_sercom_get_default_pad+0x1a0>)
    77ec:	e019      	b.n	7822 <_sercom_get_default_pad+0x142>
    77ee:	4b25      	ldr	r3, [pc, #148]	; (7884 <_sercom_get_default_pad+0x1a4>)
    77f0:	e017      	b.n	7822 <_sercom_get_default_pad+0x142>
    77f2:	4b25      	ldr	r3, [pc, #148]	; (7888 <_sercom_get_default_pad+0x1a8>)
    77f4:	e015      	b.n	7822 <_sercom_get_default_pad+0x142>
    77f6:	1cfb      	adds	r3, r7, #3
    77f8:	781b      	ldrb	r3, [r3, #0]
    77fa:	2b01      	cmp	r3, #1
    77fc:	d00a      	beq.n	7814 <_sercom_get_default_pad+0x134>
    77fe:	dc02      	bgt.n	7806 <_sercom_get_default_pad+0x126>
    7800:	2b00      	cmp	r3, #0
    7802:	d005      	beq.n	7810 <_sercom_get_default_pad+0x130>
    7804:	e00c      	b.n	7820 <_sercom_get_default_pad+0x140>
    7806:	2b02      	cmp	r3, #2
    7808:	d006      	beq.n	7818 <_sercom_get_default_pad+0x138>
    780a:	2b03      	cmp	r3, #3
    780c:	d006      	beq.n	781c <_sercom_get_default_pad+0x13c>
    780e:	e007      	b.n	7820 <_sercom_get_default_pad+0x140>
    7810:	4b1e      	ldr	r3, [pc, #120]	; (788c <_sercom_get_default_pad+0x1ac>)
    7812:	e006      	b.n	7822 <_sercom_get_default_pad+0x142>
    7814:	4b1e      	ldr	r3, [pc, #120]	; (7890 <_sercom_get_default_pad+0x1b0>)
    7816:	e004      	b.n	7822 <_sercom_get_default_pad+0x142>
    7818:	4b1e      	ldr	r3, [pc, #120]	; (7894 <_sercom_get_default_pad+0x1b4>)
    781a:	e002      	b.n	7822 <_sercom_get_default_pad+0x142>
    781c:	4b1e      	ldr	r3, [pc, #120]	; (7898 <_sercom_get_default_pad+0x1b8>)
    781e:	e000      	b.n	7822 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    7820:	2300      	movs	r3, #0
}
    7822:	0018      	movs	r0, r3
    7824:	46bd      	mov	sp, r7
    7826:	b002      	add	sp, #8
    7828:	bd80      	pop	{r7, pc}
    782a:	46c0      	nop			; (mov r8, r8)
    782c:	42000800 	.word	0x42000800
    7830:	42000400 	.word	0x42000400
    7834:	42001000 	.word	0x42001000
    7838:	43000400 	.word	0x43000400
    783c:	42000c00 	.word	0x42000c00
    7840:	00040003 	.word	0x00040003
    7844:	00050003 	.word	0x00050003
    7848:	00060003 	.word	0x00060003
    784c:	00070003 	.word	0x00070003
    7850:	00010003 	.word	0x00010003
    7854:	001e0003 	.word	0x001e0003
    7858:	001f0003 	.word	0x001f0003
    785c:	00080003 	.word	0x00080003
    7860:	00090003 	.word	0x00090003
    7864:	000a0003 	.word	0x000a0003
    7868:	000b0003 	.word	0x000b0003
    786c:	00100003 	.word	0x00100003
    7870:	00110003 	.word	0x00110003
    7874:	00120003 	.word	0x00120003
    7878:	00130003 	.word	0x00130003
    787c:	000c0003 	.word	0x000c0003
    7880:	000d0003 	.word	0x000d0003
    7884:	000e0003 	.word	0x000e0003
    7888:	000f0003 	.word	0x000f0003
    788c:	00160003 	.word	0x00160003
    7890:	00170003 	.word	0x00170003
    7894:	00180003 	.word	0x00180003
    7898:	00190003 	.word	0x00190003

0000789c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    789c:	b590      	push	{r4, r7, lr}
    789e:	b08b      	sub	sp, #44	; 0x2c
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    78a4:	230c      	movs	r3, #12
    78a6:	18fb      	adds	r3, r7, r3
    78a8:	4a0f      	ldr	r2, [pc, #60]	; (78e8 <_sercom_get_sercom_inst_index+0x4c>)
    78aa:	ca13      	ldmia	r2!, {r0, r1, r4}
    78ac:	c313      	stmia	r3!, {r0, r1, r4}
    78ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    78b0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    78b2:	2300      	movs	r3, #0
    78b4:	627b      	str	r3, [r7, #36]	; 0x24
    78b6:	e00e      	b.n	78d6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    78b8:	230c      	movs	r3, #12
    78ba:	18fb      	adds	r3, r7, r3
    78bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    78be:	0092      	lsls	r2, r2, #2
    78c0:	58d3      	ldr	r3, [r2, r3]
    78c2:	001a      	movs	r2, r3
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	429a      	cmp	r2, r3
    78c8:	d102      	bne.n	78d0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    78ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78cc:	b2db      	uxtb	r3, r3
    78ce:	e006      	b.n	78de <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    78d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78d2:	3301      	adds	r3, #1
    78d4:	627b      	str	r3, [r7, #36]	; 0x24
    78d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78d8:	2b05      	cmp	r3, #5
    78da:	d9ed      	bls.n	78b8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    78dc:	2300      	movs	r3, #0
}
    78de:	0018      	movs	r0, r3
    78e0:	46bd      	mov	sp, r7
    78e2:	b00b      	add	sp, #44	; 0x2c
    78e4:	bd90      	pop	{r4, r7, pc}
    78e6:	46c0      	nop			; (mov r8, r8)
    78e8:	0000c5a8 	.word	0x0000c5a8

000078ec <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    78ec:	b580      	push	{r7, lr}
    78ee:	b082      	sub	sp, #8
    78f0:	af00      	add	r7, sp, #0
    78f2:	0002      	movs	r2, r0
    78f4:	1dfb      	adds	r3, r7, #7
    78f6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    78f8:	46c0      	nop			; (mov r8, r8)
    78fa:	46bd      	mov	sp, r7
    78fc:	b002      	add	sp, #8
    78fe:	bd80      	pop	{r7, pc}

00007900 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7900:	b580      	push	{r7, lr}
    7902:	b084      	sub	sp, #16
    7904:	af00      	add	r7, sp, #0
    7906:	0002      	movs	r2, r0
    7908:	6039      	str	r1, [r7, #0]
    790a:	1dfb      	adds	r3, r7, #7
    790c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    790e:	4b13      	ldr	r3, [pc, #76]	; (795c <_sercom_set_handler+0x5c>)
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	2201      	movs	r2, #1
    7914:	4053      	eors	r3, r2
    7916:	b2db      	uxtb	r3, r3
    7918:	2b00      	cmp	r3, #0
    791a:	d015      	beq.n	7948 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    791c:	2300      	movs	r3, #0
    791e:	60fb      	str	r3, [r7, #12]
    7920:	e00c      	b.n	793c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7922:	4b0f      	ldr	r3, [pc, #60]	; (7960 <_sercom_set_handler+0x60>)
    7924:	68fa      	ldr	r2, [r7, #12]
    7926:	0092      	lsls	r2, r2, #2
    7928:	490e      	ldr	r1, [pc, #56]	; (7964 <_sercom_set_handler+0x64>)
    792a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    792c:	4b0e      	ldr	r3, [pc, #56]	; (7968 <_sercom_set_handler+0x68>)
    792e:	68fa      	ldr	r2, [r7, #12]
    7930:	0092      	lsls	r2, r2, #2
    7932:	2100      	movs	r1, #0
    7934:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7936:	68fb      	ldr	r3, [r7, #12]
    7938:	3301      	adds	r3, #1
    793a:	60fb      	str	r3, [r7, #12]
    793c:	68fb      	ldr	r3, [r7, #12]
    793e:	2b05      	cmp	r3, #5
    7940:	d9ef      	bls.n	7922 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    7942:	4b06      	ldr	r3, [pc, #24]	; (795c <_sercom_set_handler+0x5c>)
    7944:	2201      	movs	r2, #1
    7946:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7948:	1dfb      	adds	r3, r7, #7
    794a:	781a      	ldrb	r2, [r3, #0]
    794c:	4b04      	ldr	r3, [pc, #16]	; (7960 <_sercom_set_handler+0x60>)
    794e:	0092      	lsls	r2, r2, #2
    7950:	6839      	ldr	r1, [r7, #0]
    7952:	50d1      	str	r1, [r2, r3]
}
    7954:	46c0      	nop			; (mov r8, r8)
    7956:	46bd      	mov	sp, r7
    7958:	b004      	add	sp, #16
    795a:	bd80      	pop	{r7, pc}
    795c:	200002f2 	.word	0x200002f2
    7960:	200002f4 	.word	0x200002f4
    7964:	000078ed 	.word	0x000078ed
    7968:	20000450 	.word	0x20000450

0000796c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    796c:	b590      	push	{r4, r7, lr}
    796e:	b085      	sub	sp, #20
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7974:	2308      	movs	r3, #8
    7976:	18fb      	adds	r3, r7, r3
    7978:	4a0b      	ldr	r2, [pc, #44]	; (79a8 <_sercom_get_interrupt_vector+0x3c>)
    797a:	6811      	ldr	r1, [r2, #0]
    797c:	6019      	str	r1, [r3, #0]
    797e:	8892      	ldrh	r2, [r2, #4]
    7980:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7982:	230f      	movs	r3, #15
    7984:	18fc      	adds	r4, r7, r3
    7986:	687b      	ldr	r3, [r7, #4]
    7988:	0018      	movs	r0, r3
    798a:	4b08      	ldr	r3, [pc, #32]	; (79ac <_sercom_get_interrupt_vector+0x40>)
    798c:	4798      	blx	r3
    798e:	0003      	movs	r3, r0
    7990:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7992:	230f      	movs	r3, #15
    7994:	18fb      	adds	r3, r7, r3
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	2208      	movs	r2, #8
    799a:	18ba      	adds	r2, r7, r2
    799c:	5cd3      	ldrb	r3, [r2, r3]
    799e:	b25b      	sxtb	r3, r3
}
    79a0:	0018      	movs	r0, r3
    79a2:	46bd      	mov	sp, r7
    79a4:	b005      	add	sp, #20
    79a6:	bd90      	pop	{r4, r7, pc}
    79a8:	0000c5c0 	.word	0x0000c5c0
    79ac:	0000789d 	.word	0x0000789d

000079b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    79b0:	b580      	push	{r7, lr}
    79b2:	af00      	add	r7, sp, #0
    79b4:	4b03      	ldr	r3, [pc, #12]	; (79c4 <SERCOM0_Handler+0x14>)
    79b6:	681b      	ldr	r3, [r3, #0]
    79b8:	2000      	movs	r0, #0
    79ba:	4798      	blx	r3
    79bc:	46c0      	nop			; (mov r8, r8)
    79be:	46bd      	mov	sp, r7
    79c0:	bd80      	pop	{r7, pc}
    79c2:	46c0      	nop			; (mov r8, r8)
    79c4:	200002f4 	.word	0x200002f4

000079c8 <SERCOM1_Handler>:
    79c8:	b580      	push	{r7, lr}
    79ca:	af00      	add	r7, sp, #0
    79cc:	4b03      	ldr	r3, [pc, #12]	; (79dc <SERCOM1_Handler+0x14>)
    79ce:	685b      	ldr	r3, [r3, #4]
    79d0:	2001      	movs	r0, #1
    79d2:	4798      	blx	r3
    79d4:	46c0      	nop			; (mov r8, r8)
    79d6:	46bd      	mov	sp, r7
    79d8:	bd80      	pop	{r7, pc}
    79da:	46c0      	nop			; (mov r8, r8)
    79dc:	200002f4 	.word	0x200002f4

000079e0 <SERCOM2_Handler>:
    79e0:	b580      	push	{r7, lr}
    79e2:	af00      	add	r7, sp, #0
    79e4:	4b03      	ldr	r3, [pc, #12]	; (79f4 <SERCOM2_Handler+0x14>)
    79e6:	689b      	ldr	r3, [r3, #8]
    79e8:	2002      	movs	r0, #2
    79ea:	4798      	blx	r3
    79ec:	46c0      	nop			; (mov r8, r8)
    79ee:	46bd      	mov	sp, r7
    79f0:	bd80      	pop	{r7, pc}
    79f2:	46c0      	nop			; (mov r8, r8)
    79f4:	200002f4 	.word	0x200002f4

000079f8 <SERCOM3_Handler>:
    79f8:	b580      	push	{r7, lr}
    79fa:	af00      	add	r7, sp, #0
    79fc:	4b03      	ldr	r3, [pc, #12]	; (7a0c <SERCOM3_Handler+0x14>)
    79fe:	68db      	ldr	r3, [r3, #12]
    7a00:	2003      	movs	r0, #3
    7a02:	4798      	blx	r3
    7a04:	46c0      	nop			; (mov r8, r8)
    7a06:	46bd      	mov	sp, r7
    7a08:	bd80      	pop	{r7, pc}
    7a0a:	46c0      	nop			; (mov r8, r8)
    7a0c:	200002f4 	.word	0x200002f4

00007a10 <SERCOM4_Handler>:
    7a10:	b580      	push	{r7, lr}
    7a12:	af00      	add	r7, sp, #0
    7a14:	4b03      	ldr	r3, [pc, #12]	; (7a24 <SERCOM4_Handler+0x14>)
    7a16:	691b      	ldr	r3, [r3, #16]
    7a18:	2004      	movs	r0, #4
    7a1a:	4798      	blx	r3
    7a1c:	46c0      	nop			; (mov r8, r8)
    7a1e:	46bd      	mov	sp, r7
    7a20:	bd80      	pop	{r7, pc}
    7a22:	46c0      	nop			; (mov r8, r8)
    7a24:	200002f4 	.word	0x200002f4

00007a28 <SERCOM5_Handler>:
    7a28:	b580      	push	{r7, lr}
    7a2a:	af00      	add	r7, sp, #0
    7a2c:	4b03      	ldr	r3, [pc, #12]	; (7a3c <SERCOM5_Handler+0x14>)
    7a2e:	695b      	ldr	r3, [r3, #20]
    7a30:	2005      	movs	r0, #5
    7a32:	4798      	blx	r3
    7a34:	46c0      	nop			; (mov r8, r8)
    7a36:	46bd      	mov	sp, r7
    7a38:	bd80      	pop	{r7, pc}
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	200002f4 	.word	0x200002f4

00007a40 <system_pinmux_get_config_defaults>:
{
    7a40:	b580      	push	{r7, lr}
    7a42:	b082      	sub	sp, #8
    7a44:	af00      	add	r7, sp, #0
    7a46:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	2280      	movs	r2, #128	; 0x80
    7a4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	2200      	movs	r2, #0
    7a52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	2201      	movs	r2, #1
    7a58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	2200      	movs	r2, #0
    7a5e:	70da      	strb	r2, [r3, #3]
}
    7a60:	46c0      	nop			; (mov r8, r8)
    7a62:	46bd      	mov	sp, r7
    7a64:	b002      	add	sp, #8
    7a66:	bd80      	pop	{r7, pc}

00007a68 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b084      	sub	sp, #16
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	0002      	movs	r2, r0
    7a70:	6039      	str	r1, [r7, #0]
    7a72:	1dfb      	adds	r3, r7, #7
    7a74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7a76:	230c      	movs	r3, #12
    7a78:	18fb      	adds	r3, r7, r3
    7a7a:	0018      	movs	r0, r3
    7a7c:	4b10      	ldr	r3, [pc, #64]	; (7ac0 <port_pin_set_config+0x58>)
    7a7e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7a80:	230c      	movs	r3, #12
    7a82:	18fb      	adds	r3, r7, r3
    7a84:	2280      	movs	r2, #128	; 0x80
    7a86:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7a88:	683b      	ldr	r3, [r7, #0]
    7a8a:	781a      	ldrb	r2, [r3, #0]
    7a8c:	230c      	movs	r3, #12
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    7a92:	683b      	ldr	r3, [r7, #0]
    7a94:	785a      	ldrb	r2, [r3, #1]
    7a96:	230c      	movs	r3, #12
    7a98:	18fb      	adds	r3, r7, r3
    7a9a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7a9c:	683b      	ldr	r3, [r7, #0]
    7a9e:	789a      	ldrb	r2, [r3, #2]
    7aa0:	230c      	movs	r3, #12
    7aa2:	18fb      	adds	r3, r7, r3
    7aa4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7aa6:	230c      	movs	r3, #12
    7aa8:	18fa      	adds	r2, r7, r3
    7aaa:	1dfb      	adds	r3, r7, #7
    7aac:	781b      	ldrb	r3, [r3, #0]
    7aae:	0011      	movs	r1, r2
    7ab0:	0018      	movs	r0, r3
    7ab2:	4b04      	ldr	r3, [pc, #16]	; (7ac4 <port_pin_set_config+0x5c>)
    7ab4:	4798      	blx	r3
}
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	46bd      	mov	sp, r7
    7aba:	b004      	add	sp, #16
    7abc:	bd80      	pop	{r7, pc}
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	00007a41 	.word	0x00007a41
    7ac4:	00008d39 	.word	0x00008d39

00007ac8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7acc:	46c0      	nop			; (mov r8, r8)
    7ace:	46bd      	mov	sp, r7
    7ad0:	bd80      	pop	{r7, pc}
	...

00007ad4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    7ad4:	b580      	push	{r7, lr}
    7ad6:	b082      	sub	sp, #8
    7ad8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7ada:	4b10      	ldr	r3, [pc, #64]	; (7b1c <cpu_irq_enter_critical+0x48>)
    7adc:	681b      	ldr	r3, [r3, #0]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d112      	bne.n	7b08 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7ae2:	f3ef 8310 	mrs	r3, PRIMASK
    7ae6:	607b      	str	r3, [r7, #4]
  return(result);
    7ae8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7aea:	2b00      	cmp	r3, #0
    7aec:	d109      	bne.n	7b02 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7aee:	b672      	cpsid	i
    7af0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7af4:	4b0a      	ldr	r3, [pc, #40]	; (7b20 <cpu_irq_enter_critical+0x4c>)
    7af6:	2200      	movs	r2, #0
    7af8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7afa:	4b0a      	ldr	r3, [pc, #40]	; (7b24 <cpu_irq_enter_critical+0x50>)
    7afc:	2201      	movs	r2, #1
    7afe:	701a      	strb	r2, [r3, #0]
    7b00:	e002      	b.n	7b08 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    7b02:	4b08      	ldr	r3, [pc, #32]	; (7b24 <cpu_irq_enter_critical+0x50>)
    7b04:	2200      	movs	r2, #0
    7b06:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    7b08:	4b04      	ldr	r3, [pc, #16]	; (7b1c <cpu_irq_enter_critical+0x48>)
    7b0a:	681b      	ldr	r3, [r3, #0]
    7b0c:	1c5a      	adds	r2, r3, #1
    7b0e:	4b03      	ldr	r3, [pc, #12]	; (7b1c <cpu_irq_enter_critical+0x48>)
    7b10:	601a      	str	r2, [r3, #0]
}
    7b12:	46c0      	nop			; (mov r8, r8)
    7b14:	46bd      	mov	sp, r7
    7b16:	b002      	add	sp, #8
    7b18:	bd80      	pop	{r7, pc}
    7b1a:	46c0      	nop			; (mov r8, r8)
    7b1c:	2000030c 	.word	0x2000030c
    7b20:	20000122 	.word	0x20000122
    7b24:	20000310 	.word	0x20000310

00007b28 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7b2c:	4b0b      	ldr	r3, [pc, #44]	; (7b5c <cpu_irq_leave_critical+0x34>)
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	1e5a      	subs	r2, r3, #1
    7b32:	4b0a      	ldr	r3, [pc, #40]	; (7b5c <cpu_irq_leave_critical+0x34>)
    7b34:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7b36:	4b09      	ldr	r3, [pc, #36]	; (7b5c <cpu_irq_leave_critical+0x34>)
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d10a      	bne.n	7b54 <cpu_irq_leave_critical+0x2c>
    7b3e:	4b08      	ldr	r3, [pc, #32]	; (7b60 <cpu_irq_leave_critical+0x38>)
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	b2db      	uxtb	r3, r3
    7b44:	2b00      	cmp	r3, #0
    7b46:	d005      	beq.n	7b54 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7b48:	4b06      	ldr	r3, [pc, #24]	; (7b64 <cpu_irq_leave_critical+0x3c>)
    7b4a:	2201      	movs	r2, #1
    7b4c:	701a      	strb	r2, [r3, #0]
    7b4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7b52:	b662      	cpsie	i
	}
}
    7b54:	46c0      	nop			; (mov r8, r8)
    7b56:	46bd      	mov	sp, r7
    7b58:	bd80      	pop	{r7, pc}
    7b5a:	46c0      	nop			; (mov r8, r8)
    7b5c:	2000030c 	.word	0x2000030c
    7b60:	20000310 	.word	0x20000310
    7b64:	20000122 	.word	0x20000122

00007b68 <system_gclk_gen_get_config_defaults>:
{
    7b68:	b580      	push	{r7, lr}
    7b6a:	b082      	sub	sp, #8
    7b6c:	af00      	add	r7, sp, #0
    7b6e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	2201      	movs	r2, #1
    7b74:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	2200      	movs	r2, #0
    7b7a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	2206      	movs	r2, #6
    7b80:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	2200      	movs	r2, #0
    7b86:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	2200      	movs	r2, #0
    7b8c:	725a      	strb	r2, [r3, #9]
}
    7b8e:	46c0      	nop			; (mov r8, r8)
    7b90:	46bd      	mov	sp, r7
    7b92:	b002      	add	sp, #8
    7b94:	bd80      	pop	{r7, pc}

00007b96 <system_gclk_chan_get_config_defaults>:
{
    7b96:	b580      	push	{r7, lr}
    7b98:	b082      	sub	sp, #8
    7b9a:	af00      	add	r7, sp, #0
    7b9c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	2200      	movs	r2, #0
    7ba2:	701a      	strb	r2, [r3, #0]
}
    7ba4:	46c0      	nop			; (mov r8, r8)
    7ba6:	46bd      	mov	sp, r7
    7ba8:	b002      	add	sp, #8
    7baa:	bd80      	pop	{r7, pc}

00007bac <system_clock_source_xosc32k_get_config_defaults>:
{
    7bac:	b580      	push	{r7, lr}
    7bae:	b082      	sub	sp, #8
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	2200      	movs	r2, #0
    7bb8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    7bba:	687b      	ldr	r3, [r7, #4]
    7bbc:	2202      	movs	r2, #2
    7bbe:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
    7bc0:	687b      	ldr	r3, [r7, #4]
    7bc2:	2280      	movs	r2, #128	; 0x80
    7bc4:	0212      	lsls	r2, r2, #8
    7bc6:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	2200      	movs	r2, #0
    7bcc:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	2201      	movs	r2, #1
    7bd2:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	2200      	movs	r2, #0
    7bd8:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	2201      	movs	r2, #1
    7bde:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	2200      	movs	r2, #0
    7be4:	729a      	strb	r2, [r3, #10]
}
    7be6:	46c0      	nop			; (mov r8, r8)
    7be8:	46bd      	mov	sp, r7
    7bea:	b002      	add	sp, #8
    7bec:	bd80      	pop	{r7, pc}

00007bee <system_clock_source_osc16m_get_config_defaults>:
{
    7bee:	b580      	push	{r7, lr}
    7bf0:	b082      	sub	sp, #8
    7bf2:	af00      	add	r7, sp, #0
    7bf4:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	2200      	movs	r2, #0
    7bfa:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	2200      	movs	r2, #0
    7c00:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7c02:	687b      	ldr	r3, [r7, #4]
    7c04:	2201      	movs	r2, #1
    7c06:	709a      	strb	r2, [r3, #2]
}
    7c08:	46c0      	nop			; (mov r8, r8)
    7c0a:	46bd      	mov	sp, r7
    7c0c:	b002      	add	sp, #8
    7c0e:	bd80      	pop	{r7, pc}

00007c10 <system_clock_source_dfll_get_config_defaults>:
{
    7c10:	b580      	push	{r7, lr}
    7c12:	b082      	sub	sp, #8
    7c14:	af00      	add	r7, sp, #0
    7c16:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    7c18:	687b      	ldr	r3, [r7, #4]
    7c1a:	2200      	movs	r2, #0
    7c1c:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	2200      	movs	r2, #0
    7c22:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	2200      	movs	r2, #0
    7c28:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	2200      	movs	r2, #0
    7c2e:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	2200      	movs	r2, #0
    7c34:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
    7c36:	687b      	ldr	r3, [r7, #4]
    7c38:	2201      	movs	r2, #1
    7c3a:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	2200      	movs	r2, #0
    7c40:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	2207      	movs	r2, #7
    7c46:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	223f      	movs	r2, #63	; 0x3f
    7c4c:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	2201      	movs	r2, #1
    7c52:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	2201      	movs	r2, #1
    7c58:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
    7c5a:	687b      	ldr	r3, [r7, #4]
    7c5c:	220c      	movs	r2, #12
    7c5e:	825a      	strh	r2, [r3, #18]
}
    7c60:	46c0      	nop			; (mov r8, r8)
    7c62:	46bd      	mov	sp, r7
    7c64:	b002      	add	sp, #8
    7c66:	bd80      	pop	{r7, pc}

00007c68 <system_main_clock_set_failure_detect>:
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	b082      	sub	sp, #8
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	0002      	movs	r2, r0
    7c70:	1dfb      	adds	r3, r7, #7
    7c72:	701a      	strb	r2, [r3, #0]
}
    7c74:	46c0      	nop			; (mov r8, r8)
    7c76:	46bd      	mov	sp, r7
    7c78:	b002      	add	sp, #8
    7c7a:	bd80      	pop	{r7, pc}

00007c7c <system_cpu_clock_set_divider>:
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b082      	sub	sp, #8
    7c80:	af00      	add	r7, sp, #0
    7c82:	0002      	movs	r2, r0
    7c84:	1dfb      	adds	r3, r7, #7
    7c86:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    7c88:	4a05      	ldr	r2, [pc, #20]	; (7ca0 <system_cpu_clock_set_divider+0x24>)
    7c8a:	1dfb      	adds	r3, r7, #7
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	2101      	movs	r1, #1
    7c90:	4099      	lsls	r1, r3
    7c92:	000b      	movs	r3, r1
    7c94:	b2db      	uxtb	r3, r3
    7c96:	7113      	strb	r3, [r2, #4]
}
    7c98:	46c0      	nop			; (mov r8, r8)
    7c9a:	46bd      	mov	sp, r7
    7c9c:	b002      	add	sp, #8
    7c9e:	bd80      	pop	{r7, pc}
    7ca0:	40000400 	.word	0x40000400

00007ca4 <system_low_power_clock_set_divider>:
{
    7ca4:	b580      	push	{r7, lr}
    7ca6:	b082      	sub	sp, #8
    7ca8:	af00      	add	r7, sp, #0
    7caa:	0002      	movs	r2, r0
    7cac:	1dfb      	adds	r3, r7, #7
    7cae:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    7cb0:	4a05      	ldr	r2, [pc, #20]	; (7cc8 <system_low_power_clock_set_divider+0x24>)
    7cb2:	1dfb      	adds	r3, r7, #7
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	2101      	movs	r1, #1
    7cb8:	4099      	lsls	r1, r3
    7cba:	000b      	movs	r3, r1
    7cbc:	b2db      	uxtb	r3, r3
    7cbe:	7153      	strb	r3, [r2, #5]
}
    7cc0:	46c0      	nop			; (mov r8, r8)
    7cc2:	46bd      	mov	sp, r7
    7cc4:	b002      	add	sp, #8
    7cc6:	bd80      	pop	{r7, pc}
    7cc8:	40000400 	.word	0x40000400

00007ccc <system_backup_clock_set_divider>:
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b082      	sub	sp, #8
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	0002      	movs	r2, r0
    7cd4:	1dfb      	adds	r3, r7, #7
    7cd6:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    7cd8:	4a05      	ldr	r2, [pc, #20]	; (7cf0 <system_backup_clock_set_divider+0x24>)
    7cda:	1dfb      	adds	r3, r7, #7
    7cdc:	781b      	ldrb	r3, [r3, #0]
    7cde:	2101      	movs	r1, #1
    7ce0:	4099      	lsls	r1, r3
    7ce2:	000b      	movs	r3, r1
    7ce4:	b2db      	uxtb	r3, r3
    7ce6:	7193      	strb	r3, [r2, #6]
}
    7ce8:	46c0      	nop			; (mov r8, r8)
    7cea:	46bd      	mov	sp, r7
    7cec:	b002      	add	sp, #8
    7cee:	bd80      	pop	{r7, pc}
    7cf0:	40000400 	.word	0x40000400

00007cf4 <system_cpu_clock_get_hz>:
{
    7cf4:	b580      	push	{r7, lr}
    7cf6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    7cf8:	2000      	movs	r0, #0
    7cfa:	4b07      	ldr	r3, [pc, #28]	; (7d18 <system_cpu_clock_get_hz+0x24>)
    7cfc:	4798      	blx	r3
    7cfe:	0002      	movs	r2, r0
    7d00:	4b06      	ldr	r3, [pc, #24]	; (7d1c <system_cpu_clock_get_hz+0x28>)
    7d02:	791b      	ldrb	r3, [r3, #4]
    7d04:	b2db      	uxtb	r3, r3
    7d06:	0019      	movs	r1, r3
    7d08:	4b05      	ldr	r3, [pc, #20]	; (7d20 <system_cpu_clock_get_hz+0x2c>)
    7d0a:	0010      	movs	r0, r2
    7d0c:	4798      	blx	r3
    7d0e:	0003      	movs	r3, r0
}
    7d10:	0018      	movs	r0, r3
    7d12:	46bd      	mov	sp, r7
    7d14:	bd80      	pop	{r7, pc}
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	00008951 	.word	0x00008951
    7d1c:	40000400 	.word	0x40000400
    7d20:	000092a5 	.word	0x000092a5

00007d24 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b082      	sub	sp, #8
    7d28:	af00      	add	r7, sp, #0
    7d2a:	0002      	movs	r2, r0
    7d2c:	1dfb      	adds	r3, r7, #7
    7d2e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7d30:	4a08      	ldr	r2, [pc, #32]	; (7d54 <system_flash_set_waitstates+0x30>)
    7d32:	1dfb      	adds	r3, r7, #7
    7d34:	781b      	ldrb	r3, [r3, #0]
    7d36:	210f      	movs	r1, #15
    7d38:	400b      	ands	r3, r1
    7d3a:	b2d9      	uxtb	r1, r3
    7d3c:	6853      	ldr	r3, [r2, #4]
    7d3e:	200f      	movs	r0, #15
    7d40:	4001      	ands	r1, r0
    7d42:	0049      	lsls	r1, r1, #1
    7d44:	201e      	movs	r0, #30
    7d46:	4383      	bics	r3, r0
    7d48:	430b      	orrs	r3, r1
    7d4a:	6053      	str	r3, [r2, #4]
}
    7d4c:	46c0      	nop			; (mov r8, r8)
    7d4e:	46bd      	mov	sp, r7
    7d50:	b002      	add	sp, #8
    7d52:	bd80      	pop	{r7, pc}
    7d54:	41004000 	.word	0x41004000

00007d58 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    7d58:	b580      	push	{r7, lr}
    7d5a:	b082      	sub	sp, #8
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	0002      	movs	r2, r0
    7d60:	1dfb      	adds	r3, r7, #7
    7d62:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7d64:	2380      	movs	r3, #128	; 0x80
    7d66:	05db      	lsls	r3, r3, #23
    7d68:	789b      	ldrb	r3, [r3, #2]
    7d6a:	b2db      	uxtb	r3, r3
    7d6c:	1dfa      	adds	r2, r7, #7
    7d6e:	7812      	ldrb	r2, [r2, #0]
    7d70:	429a      	cmp	r2, r3
    7d72:	d101      	bne.n	7d78 <system_switch_performance_level+0x20>
		return STATUS_OK;
    7d74:	2300      	movs	r3, #0
    7d76:	e010      	b.n	7d9a <system_switch_performance_level+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7d78:	2380      	movs	r3, #128	; 0x80
    7d7a:	05db      	lsls	r3, r3, #23
    7d7c:	2201      	movs	r2, #1
    7d7e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    7d80:	2380      	movs	r3, #128	; 0x80
    7d82:	05db      	lsls	r3, r3, #23
    7d84:	1dfa      	adds	r2, r7, #7
    7d86:	7812      	ldrb	r2, [r2, #0]
    7d88:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	2380      	movs	r3, #128	; 0x80
    7d8e:	05db      	lsls	r3, r3, #23
    7d90:	799b      	ldrb	r3, [r3, #6]
    7d92:	b2db      	uxtb	r3, r3
    7d94:	2b00      	cmp	r3, #0
    7d96:	d0f9      	beq.n	7d8c <system_switch_performance_level+0x34>
		;
	}
	return STATUS_OK;
    7d98:	2300      	movs	r3, #0
}
    7d9a:	0018      	movs	r0, r3
    7d9c:	46bd      	mov	sp, r7
    7d9e:	b002      	add	sp, #8
    7da0:	bd80      	pop	{r7, pc}
	...

00007da4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7da4:	b580      	push	{r7, lr}
    7da6:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    7da8:	46c0      	nop			; (mov r8, r8)
    7daa:	4b04      	ldr	r3, [pc, #16]	; (7dbc <_system_dfll_wait_for_sync+0x18>)
    7dac:	68da      	ldr	r2, [r3, #12]
    7dae:	2380      	movs	r3, #128	; 0x80
    7db0:	005b      	lsls	r3, r3, #1
    7db2:	4013      	ands	r3, r2
    7db4:	d0f9      	beq.n	7daa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    7db6:	46c0      	nop			; (mov r8, r8)
    7db8:	46bd      	mov	sp, r7
    7dba:	bd80      	pop	{r7, pc}
    7dbc:	40000c00 	.word	0x40000c00

00007dc0 <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
    7dc0:	b580      	push	{r7, lr}
    7dc2:	b084      	sub	sp, #16
    7dc4:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    7dc6:	1d3b      	adds	r3, r7, #4
    7dc8:	0018      	movs	r0, r3
    7dca:	4b22      	ldr	r3, [pc, #136]	; (7e54 <_system_clock_source_osc16m_freq_sel+0x94>)
    7dcc:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    7dce:	1d3b      	adds	r3, r7, #4
    7dd0:	2203      	movs	r2, #3
    7dd2:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7dd4:	1d3b      	adds	r3, r7, #4
    7dd6:	0019      	movs	r1, r3
    7dd8:	2000      	movs	r0, #0
    7dda:	4b1f      	ldr	r3, [pc, #124]	; (7e58 <_system_clock_source_osc16m_freq_sel+0x98>)
    7ddc:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7dde:	2006      	movs	r0, #6
    7de0:	4b1e      	ldr	r3, [pc, #120]	; (7e5c <_system_clock_source_osc16m_freq_sel+0x9c>)
    7de2:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
    7de4:	003b      	movs	r3, r7
    7de6:	0018      	movs	r0, r3
    7de8:	4b1d      	ldr	r3, [pc, #116]	; (7e60 <_system_clock_source_osc16m_freq_sel+0xa0>)
    7dea:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    7dec:	003b      	movs	r3, r7
    7dee:	2203      	movs	r2, #3
    7df0:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
    7df2:	003b      	movs	r3, r7
    7df4:	2200      	movs	r2, #0
    7df6:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    7df8:	003b      	movs	r3, r7
    7dfa:	2200      	movs	r2, #0
    7dfc:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    7dfe:	003b      	movs	r3, r7
    7e00:	0018      	movs	r0, r3
    7e02:	4b18      	ldr	r3, [pc, #96]	; (7e64 <_system_clock_source_osc16m_freq_sel+0xa4>)
    7e04:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7e06:	2006      	movs	r0, #6
    7e08:	4b17      	ldr	r3, [pc, #92]	; (7e68 <_system_clock_source_osc16m_freq_sel+0xa8>)
    7e0a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    7e0c:	46c0      	nop			; (mov r8, r8)
    7e0e:	2006      	movs	r0, #6
    7e10:	4b16      	ldr	r3, [pc, #88]	; (7e6c <_system_clock_source_osc16m_freq_sel+0xac>)
    7e12:	4798      	blx	r3
    7e14:	0003      	movs	r3, r0
    7e16:	001a      	movs	r2, r3
    7e18:	2301      	movs	r3, #1
    7e1a:	4053      	eors	r3, r2
    7e1c:	b2db      	uxtb	r3, r3
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d1f5      	bne.n	7e0e <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    7e22:	1d3b      	adds	r3, r7, #4
    7e24:	0018      	movs	r0, r3
    7e26:	4b0b      	ldr	r3, [pc, #44]	; (7e54 <_system_clock_source_osc16m_freq_sel+0x94>)
    7e28:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
    7e2a:	1d3b      	adds	r3, r7, #4
    7e2c:	2206      	movs	r2, #6
    7e2e:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7e30:	1d3b      	adds	r3, r7, #4
    7e32:	0019      	movs	r1, r3
    7e34:	2000      	movs	r0, #0
    7e36:	4b08      	ldr	r3, [pc, #32]	; (7e58 <_system_clock_source_osc16m_freq_sel+0x98>)
    7e38:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    7e3a:	490d      	ldr	r1, [pc, #52]	; (7e70 <_system_clock_source_osc16m_freq_sel+0xb0>)
    7e3c:	4b0c      	ldr	r3, [pc, #48]	; (7e70 <_system_clock_source_osc16m_freq_sel+0xb0>)
    7e3e:	7d1b      	ldrb	r3, [r3, #20]
    7e40:	b2db      	uxtb	r3, r3
    7e42:	2280      	movs	r2, #128	; 0x80
    7e44:	4252      	negs	r2, r2
    7e46:	4313      	orrs	r3, r2
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	750b      	strb	r3, [r1, #20]
	}
}
    7e4c:	46c0      	nop			; (mov r8, r8)
    7e4e:	46bd      	mov	sp, r7
    7e50:	b004      	add	sp, #16
    7e52:	bd80      	pop	{r7, pc}
    7e54:	00007b69 	.word	0x00007b69
    7e58:	000087e5 	.word	0x000087e5
    7e5c:	00008299 	.word	0x00008299
    7e60:	00007bef 	.word	0x00007bef
    7e64:	00007f85 	.word	0x00007f85
    7e68:	000081d9 	.word	0x000081d9
    7e6c:	00008345 	.word	0x00008345
    7e70:	40000c00 	.word	0x40000c00

00007e74 <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7e74:	b580      	push	{r7, lr}
    7e76:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    7e78:	4b0f      	ldr	r3, [pc, #60]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7e7a:	2202      	movs	r2, #2
    7e7c:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    7e7e:	4b0f      	ldr	r3, [pc, #60]	; (7ebc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    7e80:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7e82:	4a0d      	ldr	r2, [pc, #52]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7e84:	4b0e      	ldr	r3, [pc, #56]	; (7ec0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    7e86:	689b      	ldr	r3, [r3, #8]
    7e88:	6213      	str	r3, [r2, #32]

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    7e8a:	4b0b      	ldr	r3, [pc, #44]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7e8c:	2202      	movs	r2, #2
    7e8e:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    7e90:	4b0a      	ldr	r3, [pc, #40]	; (7ebc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    7e92:	4798      	blx	r3

	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    7e94:	4a08      	ldr	r2, [pc, #32]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7e96:	4b0a      	ldr	r3, [pc, #40]	; (7ec0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    7e98:	685b      	ldr	r3, [r3, #4]
    7e9a:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    7e9c:	4b06      	ldr	r3, [pc, #24]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7e9e:	2200      	movs	r2, #0
    7ea0:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    7ea2:	4b06      	ldr	r3, [pc, #24]	; (7ebc <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    7ea4:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7ea6:	4a04      	ldr	r2, [pc, #16]	; (7eb8 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    7ea8:	4b05      	ldr	r3, [pc, #20]	; (7ec0 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	b29b      	uxth	r3, r3
    7eae:	8313      	strh	r3, [r2, #24]
}
    7eb0:	46c0      	nop			; (mov r8, r8)
    7eb2:	46bd      	mov	sp, r7
    7eb4:	bd80      	pop	{r7, pc}
    7eb6:	46c0      	nop			; (mov r8, r8)
    7eb8:	40000c00 	.word	0x40000c00
    7ebc:	00007da5 	.word	0x00007da5
    7ec0:	20000314 	.word	0x20000314

00007ec4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7ec4:	b580      	push	{r7, lr}
    7ec6:	b082      	sub	sp, #8
    7ec8:	af00      	add	r7, sp, #0
    7eca:	0002      	movs	r2, r0
    7ecc:	1dfb      	adds	r3, r7, #7
    7ece:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7ed0:	1dfb      	adds	r3, r7, #7
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	2b08      	cmp	r3, #8
    7ed6:	d842      	bhi.n	7f5e <system_clock_source_get_hz+0x9a>
    7ed8:	009a      	lsls	r2, r3, #2
    7eda:	4b23      	ldr	r3, [pc, #140]	; (7f68 <system_clock_source_get_hz+0xa4>)
    7edc:	18d3      	adds	r3, r2, r3
    7ede:	681b      	ldr	r3, [r3, #0]
    7ee0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    7ee2:	4b22      	ldr	r3, [pc, #136]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7ee4:	691b      	ldr	r3, [r3, #16]
    7ee6:	e03b      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    7ee8:	4b21      	ldr	r3, [pc, #132]	; (7f70 <system_clock_source_get_hz+0xac>)
    7eea:	7d1b      	ldrb	r3, [r3, #20]
    7eec:	071b      	lsls	r3, r3, #28
    7eee:	0f9b      	lsrs	r3, r3, #30
    7ef0:	b2db      	uxtb	r3, r3
    7ef2:	3301      	adds	r3, #1
    7ef4:	001a      	movs	r2, r3
    7ef6:	4b1f      	ldr	r3, [pc, #124]	; (7f74 <system_clock_source_get_hz+0xb0>)
    7ef8:	4353      	muls	r3, r2
    7efa:	e031      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    7efc:	2380      	movs	r3, #128	; 0x80
    7efe:	021b      	lsls	r3, r3, #8
    7f00:	e02e      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    7f02:	2380      	movs	r3, #128	; 0x80
    7f04:	021b      	lsls	r3, r3, #8
    7f06:	e02b      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    7f08:	4b18      	ldr	r3, [pc, #96]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7f0a:	695b      	ldr	r3, [r3, #20]
    7f0c:	e028      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    7f0e:	4b17      	ldr	r3, [pc, #92]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7f10:	681b      	ldr	r3, [r3, #0]
    7f12:	2202      	movs	r2, #2
    7f14:	4013      	ands	r3, r2
    7f16:	d101      	bne.n	7f1c <system_clock_source_get_hz+0x58>
			return 0;
    7f18:	2300      	movs	r3, #0
    7f1a:	e021      	b.n	7f60 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    7f1c:	4b16      	ldr	r3, [pc, #88]	; (7f78 <system_clock_source_get_hz+0xb4>)
    7f1e:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    7f20:	4b12      	ldr	r3, [pc, #72]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7f22:	681b      	ldr	r3, [r3, #0]
    7f24:	2224      	movs	r2, #36	; 0x24
    7f26:	4013      	ands	r3, r2
    7f28:	2b04      	cmp	r3, #4
    7f2a:	d109      	bne.n	7f40 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    7f2c:	2000      	movs	r0, #0
    7f2e:	4b13      	ldr	r3, [pc, #76]	; (7f7c <system_clock_source_get_hz+0xb8>)
    7f30:	4798      	blx	r3
    7f32:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7f34:	4b0d      	ldr	r3, [pc, #52]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7f36:	689b      	ldr	r3, [r3, #8]
    7f38:	041b      	lsls	r3, r3, #16
    7f3a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    7f3c:	4353      	muls	r3, r2
    7f3e:	e00f      	b.n	7f60 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    7f40:	4b0f      	ldr	r3, [pc, #60]	; (7f80 <system_clock_source_get_hz+0xbc>)
    7f42:	e00d      	b.n	7f60 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    7f44:	4a0a      	ldr	r2, [pc, #40]	; (7f70 <system_clock_source_get_hz+0xac>)
    7f46:	2328      	movs	r3, #40	; 0x28
    7f48:	5cd3      	ldrb	r3, [r2, r3]
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	001a      	movs	r2, r3
    7f4e:	2302      	movs	r3, #2
    7f50:	4013      	ands	r3, r2
    7f52:	d101      	bne.n	7f58 <system_clock_source_get_hz+0x94>
			return 0;
    7f54:	2300      	movs	r3, #0
    7f56:	e003      	b.n	7f60 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    7f58:	4b04      	ldr	r3, [pc, #16]	; (7f6c <system_clock_source_get_hz+0xa8>)
    7f5a:	68db      	ldr	r3, [r3, #12]
    7f5c:	e000      	b.n	7f60 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    7f5e:	2300      	movs	r3, #0
	}
}
    7f60:	0018      	movs	r0, r3
    7f62:	46bd      	mov	sp, r7
    7f64:	b002      	add	sp, #8
    7f66:	bd80      	pop	{r7, pc}
    7f68:	0000c5c8 	.word	0x0000c5c8
    7f6c:	20000314 	.word	0x20000314
    7f70:	40000c00 	.word	0x40000c00
    7f74:	003d0900 	.word	0x003d0900
    7f78:	00007da5 	.word	0x00007da5
    7f7c:	00008b01 	.word	0x00008b01
    7f80:	02dc6c00 	.word	0x02dc6c00

00007f84 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    7f84:	b580      	push	{r7, lr}
    7f86:	b084      	sub	sp, #16
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    7f8c:	4a1c      	ldr	r2, [pc, #112]	; (8000 <system_clock_source_osc16m_set_config+0x7c>)
    7f8e:	230c      	movs	r3, #12
    7f90:	18fb      	adds	r3, r7, r3
    7f92:	7d12      	ldrb	r2, [r2, #20]
    7f94:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
    7f96:	687b      	ldr	r3, [r7, #4]
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	1c1a      	adds	r2, r3, #0
    7f9c:	2303      	movs	r3, #3
    7f9e:	4013      	ands	r3, r2
    7fa0:	b2da      	uxtb	r2, r3
    7fa2:	230c      	movs	r3, #12
    7fa4:	18fb      	adds	r3, r7, r3
    7fa6:	2103      	movs	r1, #3
    7fa8:	400a      	ands	r2, r1
    7faa:	0090      	lsls	r0, r2, #2
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	210c      	movs	r1, #12
    7fb0:	438a      	bics	r2, r1
    7fb2:	1c11      	adds	r1, r2, #0
    7fb4:	1c02      	adds	r2, r0, #0
    7fb6:	430a      	orrs	r2, r1
    7fb8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	789a      	ldrb	r2, [r3, #2]
    7fbe:	230c      	movs	r3, #12
    7fc0:	18fb      	adds	r3, r7, r3
    7fc2:	01d0      	lsls	r0, r2, #7
    7fc4:	781a      	ldrb	r2, [r3, #0]
    7fc6:	217f      	movs	r1, #127	; 0x7f
    7fc8:	400a      	ands	r2, r1
    7fca:	1c11      	adds	r1, r2, #0
    7fcc:	1c02      	adds	r2, r0, #0
    7fce:	430a      	orrs	r2, r1
    7fd0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	785a      	ldrb	r2, [r3, #1]
    7fd6:	230c      	movs	r3, #12
    7fd8:	18fb      	adds	r3, r7, r3
    7fda:	2101      	movs	r1, #1
    7fdc:	400a      	ands	r2, r1
    7fde:	0190      	lsls	r0, r2, #6
    7fe0:	781a      	ldrb	r2, [r3, #0]
    7fe2:	2140      	movs	r1, #64	; 0x40
    7fe4:	438a      	bics	r2, r1
    7fe6:	1c11      	adds	r1, r2, #0
    7fe8:	1c02      	adds	r2, r0, #0
    7fea:	430a      	orrs	r2, r1
    7fec:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
    7fee:	4a04      	ldr	r2, [pc, #16]	; (8000 <system_clock_source_osc16m_set_config+0x7c>)
    7ff0:	230c      	movs	r3, #12
    7ff2:	18fb      	adds	r3, r7, r3
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	7513      	strb	r3, [r2, #20]
}
    7ff8:	46c0      	nop			; (mov r8, r8)
    7ffa:	46bd      	mov	sp, r7
    7ffc:	b004      	add	sp, #16
    7ffe:	bd80      	pop	{r7, pc}
    8000:	40000c00 	.word	0x40000c00

00008004 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    8004:	b580      	push	{r7, lr}
    8006:	b084      	sub	sp, #16
    8008:	af00      	add	r7, sp, #0
    800a:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    800c:	4b3a      	ldr	r3, [pc, #232]	; (80f8 <system_clock_source_xosc32k_set_config+0xf4>)
    800e:	695b      	ldr	r3, [r3, #20]
    8010:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	785b      	ldrb	r3, [r3, #1]
    8016:	1c1a      	adds	r2, r3, #0
    8018:	2307      	movs	r3, #7
    801a:	4013      	ands	r3, r2
    801c:	b2da      	uxtb	r2, r3
    801e:	230d      	movs	r3, #13
    8020:	18fb      	adds	r3, r7, r3
    8022:	2107      	movs	r1, #7
    8024:	400a      	ands	r2, r1
    8026:	0010      	movs	r0, r2
    8028:	781a      	ldrb	r2, [r3, #0]
    802a:	2107      	movs	r1, #7
    802c:	438a      	bics	r2, r1
    802e:	1c11      	adds	r1, r2, #0
    8030:	1c02      	adds	r2, r0, #0
    8032:	430a      	orrs	r2, r1
    8034:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    8036:	687b      	ldr	r3, [r7, #4]
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	2b00      	cmp	r3, #0
    803c:	d106      	bne.n	804c <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
    803e:	230c      	movs	r3, #12
    8040:	18fb      	adds	r3, r7, r3
    8042:	781a      	ldrb	r2, [r3, #0]
    8044:	2104      	movs	r1, #4
    8046:	430a      	orrs	r2, r1
    8048:	701a      	strb	r2, [r3, #0]
    804a:	e005      	b.n	8058 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    804c:	230c      	movs	r3, #12
    804e:	18fb      	adds	r3, r7, r3
    8050:	781a      	ldrb	r2, [r3, #0]
    8052:	2104      	movs	r1, #4
    8054:	438a      	bics	r2, r1
    8056:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	789a      	ldrb	r2, [r3, #2]
    805c:	230c      	movs	r3, #12
    805e:	18fb      	adds	r3, r7, r3
    8060:	2101      	movs	r1, #1
    8062:	400a      	ands	r2, r1
    8064:	0110      	lsls	r0, r2, #4
    8066:	781a      	ldrb	r2, [r3, #0]
    8068:	2110      	movs	r1, #16
    806a:	438a      	bics	r2, r1
    806c:	1c11      	adds	r1, r2, #0
    806e:	1c02      	adds	r2, r0, #0
    8070:	430a      	orrs	r2, r1
    8072:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	78da      	ldrb	r2, [r3, #3]
    8078:	230c      	movs	r3, #12
    807a:	18fb      	adds	r3, r7, r3
    807c:	2101      	movs	r1, #1
    807e:	400a      	ands	r2, r1
    8080:	00d0      	lsls	r0, r2, #3
    8082:	781a      	ldrb	r2, [r3, #0]
    8084:	2108      	movs	r1, #8
    8086:	438a      	bics	r2, r1
    8088:	1c11      	adds	r1, r2, #0
    808a:	1c02      	adds	r2, r0, #0
    808c:	430a      	orrs	r2, r1
    808e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	7a5a      	ldrb	r2, [r3, #9]
    8094:	230c      	movs	r3, #12
    8096:	18fb      	adds	r3, r7, r3
    8098:	01d0      	lsls	r0, r2, #7
    809a:	781a      	ldrb	r2, [r3, #0]
    809c:	217f      	movs	r1, #127	; 0x7f
    809e:	400a      	ands	r2, r1
    80a0:	1c11      	adds	r1, r2, #0
    80a2:	1c02      	adds	r2, r0, #0
    80a4:	430a      	orrs	r2, r1
    80a6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    80a8:	687b      	ldr	r3, [r7, #4]
    80aa:	7a1a      	ldrb	r2, [r3, #8]
    80ac:	230c      	movs	r3, #12
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	2101      	movs	r1, #1
    80b2:	400a      	ands	r2, r1
    80b4:	0190      	lsls	r0, r2, #6
    80b6:	781a      	ldrb	r2, [r3, #0]
    80b8:	2140      	movs	r1, #64	; 0x40
    80ba:	438a      	bics	r2, r1
    80bc:	1c11      	adds	r1, r2, #0
    80be:	1c02      	adds	r2, r0, #0
    80c0:	430a      	orrs	r2, r1
    80c2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    80c4:	687b      	ldr	r3, [r7, #4]
    80c6:	7a9a      	ldrb	r2, [r3, #10]
    80c8:	230d      	movs	r3, #13
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	2101      	movs	r1, #1
    80ce:	400a      	ands	r2, r1
    80d0:	0110      	lsls	r0, r2, #4
    80d2:	781a      	ldrb	r2, [r3, #0]
    80d4:	2110      	movs	r1, #16
    80d6:	438a      	bics	r2, r1
    80d8:	1c11      	adds	r1, r2, #0
    80da:	1c02      	adds	r2, r0, #0
    80dc:	430a      	orrs	r2, r1
    80de:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    80e0:	687b      	ldr	r3, [r7, #4]
    80e2:	685a      	ldr	r2, [r3, #4]
    80e4:	4b05      	ldr	r3, [pc, #20]	; (80fc <system_clock_source_xosc32k_set_config+0xf8>)
    80e6:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
    80e8:	4b03      	ldr	r3, [pc, #12]	; (80f8 <system_clock_source_xosc32k_set_config+0xf4>)
    80ea:	68fa      	ldr	r2, [r7, #12]
    80ec:	615a      	str	r2, [r3, #20]
}
    80ee:	46c0      	nop			; (mov r8, r8)
    80f0:	46bd      	mov	sp, r7
    80f2:	b004      	add	sp, #16
    80f4:	bd80      	pop	{r7, pc}
    80f6:	46c0      	nop			; (mov r8, r8)
    80f8:	40001000 	.word	0x40001000
    80fc:	20000314 	.word	0x20000314

00008100 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    8100:	b580      	push	{r7, lr}
    8102:	b082      	sub	sp, #8
    8104:	af00      	add	r7, sp, #0
    8106:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8108:	687b      	ldr	r3, [r7, #4]
    810a:	7a9b      	ldrb	r3, [r3, #10]
    810c:	029b      	lsls	r3, r3, #10
    810e:	041b      	lsls	r3, r3, #16
    8110:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	899b      	ldrh	r3, [r3, #12]
    8116:	059b      	lsls	r3, r3, #22
    8118:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    811a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    811c:	4b2c      	ldr	r3, [pc, #176]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    811e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    8120:	687b      	ldr	r3, [r7, #4]
    8122:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
    8128:	4313      	orrs	r3, r2
    812a:	b2db      	uxtb	r3, r3
    812c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
    8132:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    8134:	687a      	ldr	r2, [r7, #4]
    8136:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
    8138:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    813a:	687b      	ldr	r3, [r7, #4]
    813c:	785b      	ldrb	r3, [r3, #1]
    813e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    8140:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    8142:	687b      	ldr	r3, [r7, #4]
    8144:	789b      	ldrb	r3, [r3, #2]
    8146:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    8148:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    814a:	4b21      	ldr	r3, [pc, #132]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    814c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	2b04      	cmp	r3, #4
    8154:	d116      	bne.n	8184 <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	7b9b      	ldrb	r3, [r3, #14]
    815a:	069b      	lsls	r3, r3, #26
    815c:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	8a1b      	ldrh	r3, [r3, #16]
    8162:	041b      	lsls	r3, r3, #16
    8164:	0019      	movs	r1, r3
    8166:	4b1b      	ldr	r3, [pc, #108]	; (81d4 <system_clock_source_dfll_set_config+0xd4>)
    8168:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    816a:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    816c:	687a      	ldr	r2, [r7, #4]
    816e:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8170:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    8172:	4b17      	ldr	r3, [pc, #92]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    8174:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    8176:	4b16      	ldr	r3, [pc, #88]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	687a      	ldr	r2, [r7, #4]
    817c:	7812      	ldrb	r2, [r2, #0]
    817e:	431a      	orrs	r2, r3
    8180:	4b13      	ldr	r3, [pc, #76]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    8182:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	2b20      	cmp	r3, #32
    818a:	d11c      	bne.n	81c6 <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	7b9b      	ldrb	r3, [r3, #14]
    8190:	069b      	lsls	r3, r3, #26
    8192:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	8a1b      	ldrh	r3, [r3, #16]
    8198:	041b      	lsls	r3, r3, #16
    819a:	0019      	movs	r1, r3
    819c:	4b0d      	ldr	r3, [pc, #52]	; (81d4 <system_clock_source_dfll_set_config+0xd4>)
    819e:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    81a0:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    81a2:	687a      	ldr	r2, [r7, #4]
    81a4:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    81a6:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    81a8:	4b09      	ldr	r3, [pc, #36]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    81aa:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    81ac:	4b08      	ldr	r3, [pc, #32]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	687a      	ldr	r2, [r7, #4]
    81b2:	7812      	ldrb	r2, [r2, #0]
    81b4:	2104      	movs	r1, #4
    81b6:	430a      	orrs	r2, r1
    81b8:	b2d2      	uxtb	r2, r2
    81ba:	4313      	orrs	r3, r2
    81bc:	2280      	movs	r2, #128	; 0x80
    81be:	00d2      	lsls	r2, r2, #3
    81c0:	431a      	orrs	r2, r3
    81c2:	4b03      	ldr	r3, [pc, #12]	; (81d0 <system_clock_source_dfll_set_config+0xd0>)
    81c4:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	46bd      	mov	sp, r7
    81ca:	b002      	add	sp, #8
    81cc:	bd80      	pop	{r7, pc}
    81ce:	46c0      	nop			; (mov r8, r8)
    81d0:	20000314 	.word	0x20000314
    81d4:	03ff0000 	.word	0x03ff0000

000081d8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    81d8:	b580      	push	{r7, lr}
    81da:	b082      	sub	sp, #8
    81dc:	af00      	add	r7, sp, #0
    81de:	0002      	movs	r2, r0
    81e0:	1dfb      	adds	r3, r7, #7
    81e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    81e4:	1dfb      	adds	r3, r7, #7
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	2b08      	cmp	r3, #8
    81ea:	d844      	bhi.n	8276 <system_clock_source_enable+0x9e>
    81ec:	009a      	lsls	r2, r3, #2
    81ee:	4b25      	ldr	r3, [pc, #148]	; (8284 <system_clock_source_enable+0xac>)
    81f0:	18d3      	adds	r3, r2, r3
    81f2:	681b      	ldr	r3, [r3, #0]
    81f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    81f6:	4a24      	ldr	r2, [pc, #144]	; (8288 <system_clock_source_enable+0xb0>)
    81f8:	4b23      	ldr	r3, [pc, #140]	; (8288 <system_clock_source_enable+0xb0>)
    81fa:	7d1b      	ldrb	r3, [r3, #20]
    81fc:	b2db      	uxtb	r3, r3
    81fe:	2102      	movs	r1, #2
    8200:	430b      	orrs	r3, r1
    8202:	b2db      	uxtb	r3, r3
    8204:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    8206:	2300      	movs	r3, #0
    8208:	e038      	b.n	827c <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    820a:	4b20      	ldr	r3, [pc, #128]	; (828c <system_clock_source_enable+0xb4>)
    820c:	4a1f      	ldr	r2, [pc, #124]	; (828c <system_clock_source_enable+0xb4>)
    820e:	6992      	ldr	r2, [r2, #24]
    8210:	2102      	movs	r1, #2
    8212:	430a      	orrs	r2, r1
    8214:	619a      	str	r2, [r3, #24]
		break;
    8216:	e030      	b.n	827a <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    8218:	4a1b      	ldr	r2, [pc, #108]	; (8288 <system_clock_source_enable+0xb0>)
    821a:	4b1b      	ldr	r3, [pc, #108]	; (8288 <system_clock_source_enable+0xb0>)
    821c:	8a1b      	ldrh	r3, [r3, #16]
    821e:	b29b      	uxth	r3, r3
    8220:	2102      	movs	r1, #2
    8222:	430b      	orrs	r3, r1
    8224:	b29b      	uxth	r3, r3
    8226:	8213      	strh	r3, [r2, #16]
		break;
    8228:	e027      	b.n	827a <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    822a:	4b18      	ldr	r3, [pc, #96]	; (828c <system_clock_source_enable+0xb4>)
    822c:	4a17      	ldr	r2, [pc, #92]	; (828c <system_clock_source_enable+0xb4>)
    822e:	6952      	ldr	r2, [r2, #20]
    8230:	2102      	movs	r1, #2
    8232:	430a      	orrs	r2, r1
    8234:	615a      	str	r2, [r3, #20]
		break;
    8236:	e020      	b.n	827a <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    8238:	4b15      	ldr	r3, [pc, #84]	; (8290 <system_clock_source_enable+0xb8>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	2202      	movs	r2, #2
    823e:	431a      	orrs	r2, r3
    8240:	4b13      	ldr	r3, [pc, #76]	; (8290 <system_clock_source_enable+0xb8>)
    8242:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    8244:	4b13      	ldr	r3, [pc, #76]	; (8294 <system_clock_source_enable+0xbc>)
    8246:	4798      	blx	r3
		break;
    8248:	e017      	b.n	827a <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    824a:	4a0f      	ldr	r2, [pc, #60]	; (8288 <system_clock_source_enable+0xb0>)
    824c:	490e      	ldr	r1, [pc, #56]	; (8288 <system_clock_source_enable+0xb0>)
    824e:	2328      	movs	r3, #40	; 0x28
    8250:	5ccb      	ldrb	r3, [r1, r3]
    8252:	b2db      	uxtb	r3, r3
    8254:	2102      	movs	r1, #2
    8256:	430b      	orrs	r3, r1
    8258:	b2d9      	uxtb	r1, r3
    825a:	2328      	movs	r3, #40	; 0x28
    825c:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    825e:	46c0      	nop			; (mov r8, r8)
    8260:	4a09      	ldr	r2, [pc, #36]	; (8288 <system_clock_source_enable+0xb0>)
    8262:	2338      	movs	r3, #56	; 0x38
    8264:	5cd3      	ldrb	r3, [r2, r3]
    8266:	b2db      	uxtb	r3, r3
    8268:	001a      	movs	r2, r3
    826a:	2302      	movs	r3, #2
    826c:	4013      	ands	r3, r2
    826e:	d1f7      	bne.n	8260 <system_clock_source_enable+0x88>
		}
		break;
    8270:	e003      	b.n	827a <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    8272:	2300      	movs	r3, #0
    8274:	e002      	b.n	827c <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8276:	2317      	movs	r3, #23
    8278:	e000      	b.n	827c <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
    827a:	2300      	movs	r3, #0
}
    827c:	0018      	movs	r0, r3
    827e:	46bd      	mov	sp, r7
    8280:	b002      	add	sp, #8
    8282:	bd80      	pop	{r7, pc}
    8284:	0000c5ec 	.word	0x0000c5ec
    8288:	40000c00 	.word	0x40000c00
    828c:	40001000 	.word	0x40001000
    8290:	20000314 	.word	0x20000314
    8294:	00007e75 	.word	0x00007e75

00008298 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
    8298:	b580      	push	{r7, lr}
    829a:	b082      	sub	sp, #8
    829c:	af00      	add	r7, sp, #0
    829e:	0002      	movs	r2, r0
    82a0:	1dfb      	adds	r3, r7, #7
    82a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    82a4:	1dfb      	adds	r3, r7, #7
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	2b08      	cmp	r3, #8
    82aa:	d83c      	bhi.n	8326 <system_clock_source_disable+0x8e>
    82ac:	009a      	lsls	r2, r3, #2
    82ae:	4b21      	ldr	r3, [pc, #132]	; (8334 <system_clock_source_disable+0x9c>)
    82b0:	18d3      	adds	r3, r2, r3
    82b2:	681b      	ldr	r3, [r3, #0]
    82b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    82b6:	4a20      	ldr	r2, [pc, #128]	; (8338 <system_clock_source_disable+0xa0>)
    82b8:	4b1f      	ldr	r3, [pc, #124]	; (8338 <system_clock_source_disable+0xa0>)
    82ba:	7d1b      	ldrb	r3, [r3, #20]
    82bc:	b2db      	uxtb	r3, r3
    82be:	2102      	movs	r1, #2
    82c0:	438b      	bics	r3, r1
    82c2:	b2db      	uxtb	r3, r3
    82c4:	7513      	strb	r3, [r2, #20]
		break;
    82c6:	e030      	b.n	832a <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    82c8:	4b1c      	ldr	r3, [pc, #112]	; (833c <system_clock_source_disable+0xa4>)
    82ca:	4a1c      	ldr	r2, [pc, #112]	; (833c <system_clock_source_disable+0xa4>)
    82cc:	6992      	ldr	r2, [r2, #24]
    82ce:	2102      	movs	r1, #2
    82d0:	438a      	bics	r2, r1
    82d2:	619a      	str	r2, [r3, #24]
		break;
    82d4:	e029      	b.n	832a <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    82d6:	4a18      	ldr	r2, [pc, #96]	; (8338 <system_clock_source_disable+0xa0>)
    82d8:	4b17      	ldr	r3, [pc, #92]	; (8338 <system_clock_source_disable+0xa0>)
    82da:	8a1b      	ldrh	r3, [r3, #16]
    82dc:	b29b      	uxth	r3, r3
    82de:	2102      	movs	r1, #2
    82e0:	438b      	bics	r3, r1
    82e2:	b29b      	uxth	r3, r3
    82e4:	8213      	strh	r3, [r2, #16]
		break;
    82e6:	e020      	b.n	832a <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    82e8:	4b14      	ldr	r3, [pc, #80]	; (833c <system_clock_source_disable+0xa4>)
    82ea:	4a14      	ldr	r2, [pc, #80]	; (833c <system_clock_source_disable+0xa4>)
    82ec:	6952      	ldr	r2, [r2, #20]
    82ee:	2102      	movs	r1, #2
    82f0:	438a      	bics	r2, r1
    82f2:	615a      	str	r2, [r3, #20]
		break;
    82f4:	e019      	b.n	832a <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    82f6:	4b12      	ldr	r3, [pc, #72]	; (8340 <system_clock_source_disable+0xa8>)
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	2202      	movs	r2, #2
    82fc:	4393      	bics	r3, r2
    82fe:	001a      	movs	r2, r3
    8300:	4b0f      	ldr	r3, [pc, #60]	; (8340 <system_clock_source_disable+0xa8>)
    8302:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8304:	4a0c      	ldr	r2, [pc, #48]	; (8338 <system_clock_source_disable+0xa0>)
    8306:	4b0e      	ldr	r3, [pc, #56]	; (8340 <system_clock_source_disable+0xa8>)
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	b29b      	uxth	r3, r3
    830c:	8313      	strh	r3, [r2, #24]
		break;
    830e:	e00c      	b.n	832a <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    8310:	4a09      	ldr	r2, [pc, #36]	; (8338 <system_clock_source_disable+0xa0>)
    8312:	4909      	ldr	r1, [pc, #36]	; (8338 <system_clock_source_disable+0xa0>)
    8314:	2328      	movs	r3, #40	; 0x28
    8316:	5ccb      	ldrb	r3, [r1, r3]
    8318:	b2db      	uxtb	r3, r3
    831a:	2102      	movs	r1, #2
    831c:	438b      	bics	r3, r1
    831e:	b2d9      	uxtb	r1, r3
    8320:	2328      	movs	r3, #40	; 0x28
    8322:	54d1      	strb	r1, [r2, r3]
		break;
    8324:	e001      	b.n	832a <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8326:	2317      	movs	r3, #23
    8328:	e000      	b.n	832c <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
    832a:	2300      	movs	r3, #0
}
    832c:	0018      	movs	r0, r3
    832e:	46bd      	mov	sp, r7
    8330:	b002      	add	sp, #8
    8332:	bd80      	pop	{r7, pc}
    8334:	0000c610 	.word	0x0000c610
    8338:	40000c00 	.word	0x40000c00
    833c:	40001000 	.word	0x40001000
    8340:	20000314 	.word	0x20000314

00008344 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    8344:	b580      	push	{r7, lr}
    8346:	b084      	sub	sp, #16
    8348:	af00      	add	r7, sp, #0
    834a:	0002      	movs	r2, r0
    834c:	1dfb      	adds	r3, r7, #7
    834e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    8350:	2300      	movs	r3, #0
    8352:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    8354:	1dfb      	adds	r3, r7, #7
    8356:	781b      	ldrb	r3, [r3, #0]
    8358:	2b08      	cmp	r3, #8
    835a:	d84f      	bhi.n	83fc <system_clock_source_is_ready+0xb8>
    835c:	009a      	lsls	r2, r3, #2
    835e:	4b2a      	ldr	r3, [pc, #168]	; (8408 <system_clock_source_is_ready+0xc4>)
    8360:	18d3      	adds	r3, r2, r3
    8362:	681b      	ldr	r3, [r3, #0]
    8364:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
    8366:	2310      	movs	r3, #16
    8368:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    836a:	4b28      	ldr	r3, [pc, #160]	; (840c <system_clock_source_is_ready+0xc8>)
    836c:	68db      	ldr	r3, [r3, #12]
    836e:	68fa      	ldr	r2, [r7, #12]
    8370:	401a      	ands	r2, r3
    8372:	68fb      	ldr	r3, [r7, #12]
    8374:	1ad3      	subs	r3, r2, r3
    8376:	425a      	negs	r2, r3
    8378:	4153      	adcs	r3, r2
    837a:	b2db      	uxtb	r3, r3
    837c:	e03f      	b.n	83fe <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
    837e:	2302      	movs	r3, #2
    8380:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    8382:	4b23      	ldr	r3, [pc, #140]	; (8410 <system_clock_source_is_ready+0xcc>)
    8384:	68db      	ldr	r3, [r3, #12]
    8386:	68fa      	ldr	r2, [r7, #12]
    8388:	401a      	ands	r2, r3
    838a:	68fb      	ldr	r3, [r7, #12]
    838c:	1ad3      	subs	r3, r2, r3
    838e:	425a      	negs	r2, r3
    8390:	4153      	adcs	r3, r2
    8392:	b2db      	uxtb	r3, r3
    8394:	e033      	b.n	83fe <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
    8396:	2301      	movs	r3, #1
    8398:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    839a:	4b1c      	ldr	r3, [pc, #112]	; (840c <system_clock_source_is_ready+0xc8>)
    839c:	68db      	ldr	r3, [r3, #12]
    839e:	68fa      	ldr	r2, [r7, #12]
    83a0:	401a      	ands	r2, r3
    83a2:	68fb      	ldr	r3, [r7, #12]
    83a4:	1ad3      	subs	r3, r2, r3
    83a6:	425a      	negs	r2, r3
    83a8:	4153      	adcs	r3, r2
    83aa:	b2db      	uxtb	r3, r3
    83ac:	e027      	b.n	83fe <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
    83ae:	2301      	movs	r3, #1
    83b0:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    83b2:	4b17      	ldr	r3, [pc, #92]	; (8410 <system_clock_source_is_ready+0xcc>)
    83b4:	68db      	ldr	r3, [r3, #12]
    83b6:	68fa      	ldr	r2, [r7, #12]
    83b8:	401a      	ands	r2, r3
    83ba:	68fb      	ldr	r3, [r7, #12]
    83bc:	1ad3      	subs	r3, r2, r3
    83be:	425a      	negs	r2, r3
    83c0:	4153      	adcs	r3, r2
    83c2:	b2db      	uxtb	r3, r3
    83c4:	e01b      	b.n	83fe <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
    83c6:	23d0      	movs	r3, #208	; 0xd0
    83c8:	011b      	lsls	r3, r3, #4
    83ca:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    83cc:	4b0f      	ldr	r3, [pc, #60]	; (840c <system_clock_source_is_ready+0xc8>)
    83ce:	68db      	ldr	r3, [r3, #12]
    83d0:	68fa      	ldr	r2, [r7, #12]
    83d2:	401a      	ands	r2, r3
    83d4:	68fb      	ldr	r3, [r7, #12]
    83d6:	1ad3      	subs	r3, r2, r3
    83d8:	425a      	negs	r2, r3
    83da:	4153      	adcs	r3, r2
    83dc:	b2db      	uxtb	r3, r3
    83de:	e00e      	b.n	83fe <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    83e0:	4a0a      	ldr	r2, [pc, #40]	; (840c <system_clock_source_is_ready+0xc8>)
    83e2:	233c      	movs	r3, #60	; 0x3c
    83e4:	5cd3      	ldrb	r3, [r2, r3]
    83e6:	b2db      	uxtb	r3, r3
    83e8:	001a      	movs	r2, r3
    83ea:	2303      	movs	r3, #3
    83ec:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
    83ee:	3b03      	subs	r3, #3
    83f0:	425a      	negs	r2, r3
    83f2:	4153      	adcs	r3, r2
    83f4:	b2db      	uxtb	r3, r3
    83f6:	e002      	b.n	83fe <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    83f8:	2301      	movs	r3, #1
    83fa:	e000      	b.n	83fe <system_clock_source_is_ready+0xba>

	default:
		return false;
    83fc:	2300      	movs	r3, #0
	}
}
    83fe:	0018      	movs	r0, r3
    8400:	46bd      	mov	sp, r7
    8402:	b004      	add	sp, #16
    8404:	bd80      	pop	{r7, pc}
    8406:	46c0      	nop			; (mov r8, r8)
    8408:	0000c634 	.word	0x0000c634
    840c:	40000c00 	.word	0x40000c00
    8410:	40001000 	.word	0x40001000

00008414 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8414:	b580      	push	{r7, lr}
    8416:	b0aa      	sub	sp, #168	; 0xa8
    8418:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    841a:	4b93      	ldr	r3, [pc, #588]	; (8668 <system_clock_init+0x254>)
    841c:	2280      	movs	r2, #128	; 0x80
    841e:	0052      	lsls	r2, r2, #1
    8420:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    8422:	4b92      	ldr	r3, [pc, #584]	; (866c <system_clock_init+0x258>)
    8424:	2203      	movs	r2, #3
    8426:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    8428:	2002      	movs	r0, #2
    842a:	4b91      	ldr	r3, [pc, #580]	; (8670 <system_clock_init+0x25c>)
    842c:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    842e:	2002      	movs	r0, #2
    8430:	4b90      	ldr	r3, [pc, #576]	; (8674 <system_clock_init+0x260>)
    8432:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    8434:	2394      	movs	r3, #148	; 0x94
    8436:	18fb      	adds	r3, r7, r3
    8438:	0018      	movs	r0, r3
    843a:	4b8f      	ldr	r3, [pc, #572]	; (8678 <system_clock_init+0x264>)
    843c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    843e:	2394      	movs	r3, #148	; 0x94
    8440:	18fb      	adds	r3, r7, r3
    8442:	2280      	movs	r2, #128	; 0x80
    8444:	0212      	lsls	r2, r2, #8
    8446:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    8448:	2394      	movs	r3, #148	; 0x94
    844a:	18fb      	adds	r3, r7, r3
    844c:	2200      	movs	r2, #0
    844e:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8450:	2394      	movs	r3, #148	; 0x94
    8452:	18fb      	adds	r3, r7, r3
    8454:	2201      	movs	r2, #1
    8456:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    8458:	2394      	movs	r3, #148	; 0x94
    845a:	18fb      	adds	r3, r7, r3
    845c:	2200      	movs	r2, #0
    845e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    8460:	2394      	movs	r3, #148	; 0x94
    8462:	18fb      	adds	r3, r7, r3
    8464:	2201      	movs	r2, #1
    8466:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
    8468:	2394      	movs	r3, #148	; 0x94
    846a:	18fb      	adds	r3, r7, r3
    846c:	2200      	movs	r2, #0
    846e:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    8470:	2394      	movs	r3, #148	; 0x94
    8472:	18fb      	adds	r3, r7, r3
    8474:	2201      	movs	r2, #1
    8476:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8478:	2394      	movs	r3, #148	; 0x94
    847a:	18fb      	adds	r3, r7, r3
    847c:	0018      	movs	r0, r3
    847e:	4b7f      	ldr	r3, [pc, #508]	; (867c <system_clock_init+0x268>)
    8480:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8482:	2005      	movs	r0, #5
    8484:	4b7e      	ldr	r3, [pc, #504]	; (8680 <system_clock_init+0x26c>)
    8486:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8488:	46c0      	nop			; (mov r8, r8)
    848a:	2005      	movs	r0, #5
    848c:	4b7d      	ldr	r3, [pc, #500]	; (8684 <system_clock_init+0x270>)
    848e:	4798      	blx	r3
    8490:	0003      	movs	r3, r0
    8492:	001a      	movs	r2, r3
    8494:	2301      	movs	r3, #1
    8496:	4053      	eors	r3, r2
    8498:	b2db      	uxtb	r3, r3
    849a:	2b00      	cmp	r3, #0
    849c:	d1f5      	bne.n	848a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    849e:	4a7a      	ldr	r2, [pc, #488]	; (8688 <system_clock_init+0x274>)
    84a0:	6953      	ldr	r3, [r2, #20]
    84a2:	2180      	movs	r1, #128	; 0x80
    84a4:	430b      	orrs	r3, r1
    84a6:	6153      	str	r3, [r2, #20]
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
    84a8:	4b78      	ldr	r3, [pc, #480]	; (868c <system_clock_init+0x278>)
    84aa:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    84ac:	2380      	movs	r3, #128	; 0x80
    84ae:	18fb      	adds	r3, r7, r3
    84b0:	0018      	movs	r0, r3
    84b2:	4b77      	ldr	r3, [pc, #476]	; (8690 <system_clock_init+0x27c>)
    84b4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    84b6:	2380      	movs	r3, #128	; 0x80
    84b8:	18fb      	adds	r3, r7, r3
    84ba:	2204      	movs	r2, #4
    84bc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    84be:	2380      	movs	r3, #128	; 0x80
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	2200      	movs	r2, #0
    84c4:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    84c6:	2380      	movs	r3, #128	; 0x80
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	2200      	movs	r2, #0
    84cc:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    84ce:	4b71      	ldr	r3, [pc, #452]	; (8694 <system_clock_init+0x280>)
    84d0:	681b      	ldr	r3, [r3, #0]
    84d2:	0e9b      	lsrs	r3, r3, #26
    84d4:	22a4      	movs	r2, #164	; 0xa4
    84d6:	18ba      	adds	r2, r7, r2
    84d8:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    84da:	23a4      	movs	r3, #164	; 0xa4
    84dc:	18fb      	adds	r3, r7, r3
    84de:	681b      	ldr	r3, [r3, #0]
    84e0:	2b3f      	cmp	r3, #63	; 0x3f
    84e2:	d103      	bne.n	84ec <system_clock_init+0xd8>
		coarse = 0x1f;
    84e4:	231f      	movs	r3, #31
    84e6:	22a4      	movs	r2, #164	; 0xa4
    84e8:	18ba      	adds	r2, r7, r2
    84ea:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
    84ec:	23a4      	movs	r3, #164	; 0xa4
    84ee:	18fb      	adds	r3, r7, r3
    84f0:	681b      	ldr	r3, [r3, #0]
    84f2:	b2da      	uxtb	r2, r3
    84f4:	2380      	movs	r3, #128	; 0x80
    84f6:	18fb      	adds	r3, r7, r3
    84f8:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    84fa:	2380      	movs	r3, #128	; 0x80
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	2200      	movs	r2, #0
    8500:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8502:	2380      	movs	r3, #128	; 0x80
    8504:	18fb      	adds	r3, r7, r3
    8506:	2200      	movs	r2, #0
    8508:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    850a:	2380      	movs	r3, #128	; 0x80
    850c:	18fb      	adds	r3, r7, r3
    850e:	2200      	movs	r2, #0
    8510:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8512:	2380      	movs	r3, #128	; 0x80
    8514:	18fb      	adds	r3, r7, r3
    8516:	2200      	movs	r2, #0
    8518:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    851a:	2380      	movs	r3, #128	; 0x80
    851c:	18fb      	adds	r3, r7, r3
    851e:	4a5e      	ldr	r2, [pc, #376]	; (8698 <system_clock_init+0x284>)
    8520:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8522:	2380      	movs	r3, #128	; 0x80
    8524:	18fb      	adds	r3, r7, r3
    8526:	2207      	movs	r2, #7
    8528:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    852a:	2380      	movs	r3, #128	; 0x80
    852c:	18fb      	adds	r3, r7, r3
    852e:	223f      	movs	r2, #63	; 0x3f
    8530:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8532:	2380      	movs	r3, #128	; 0x80
    8534:	18fb      	adds	r3, r7, r3
    8536:	0018      	movs	r0, r3
    8538:	4b58      	ldr	r3, [pc, #352]	; (869c <system_clock_init+0x288>)
    853a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    853c:	4b58      	ldr	r3, [pc, #352]	; (86a0 <system_clock_init+0x28c>)
    853e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    8540:	2368      	movs	r3, #104	; 0x68
    8542:	18fb      	adds	r3, r7, r3
    8544:	0018      	movs	r0, r3
    8546:	4b57      	ldr	r3, [pc, #348]	; (86a4 <system_clock_init+0x290>)
    8548:	4798      	blx	r3
    854a:	2368      	movs	r3, #104	; 0x68
    854c:	18fb      	adds	r3, r7, r3
    854e:	2205      	movs	r2, #5
    8550:	701a      	strb	r2, [r3, #0]
    8552:	2368      	movs	r3, #104	; 0x68
    8554:	18fb      	adds	r3, r7, r3
    8556:	2201      	movs	r2, #1
    8558:	605a      	str	r2, [r3, #4]
    855a:	2368      	movs	r3, #104	; 0x68
    855c:	18fb      	adds	r3, r7, r3
    855e:	2200      	movs	r2, #0
    8560:	721a      	strb	r2, [r3, #8]
    8562:	2368      	movs	r3, #104	; 0x68
    8564:	18fb      	adds	r3, r7, r3
    8566:	2200      	movs	r2, #0
    8568:	725a      	strb	r2, [r3, #9]
    856a:	2368      	movs	r3, #104	; 0x68
    856c:	18fb      	adds	r3, r7, r3
    856e:	0019      	movs	r1, r3
    8570:	2001      	movs	r0, #1
    8572:	4b4d      	ldr	r3, [pc, #308]	; (86a8 <system_clock_init+0x294>)
    8574:	4798      	blx	r3
    8576:	2001      	movs	r0, #1
    8578:	4b4c      	ldr	r3, [pc, #304]	; (86ac <system_clock_init+0x298>)
    857a:	4798      	blx	r3
    857c:	2350      	movs	r3, #80	; 0x50
    857e:	18fb      	adds	r3, r7, r3
    8580:	0018      	movs	r0, r3
    8582:	4b48      	ldr	r3, [pc, #288]	; (86a4 <system_clock_init+0x290>)
    8584:	4798      	blx	r3
    8586:	2350      	movs	r3, #80	; 0x50
    8588:	18fb      	adds	r3, r7, r3
    858a:	2207      	movs	r2, #7
    858c:	701a      	strb	r2, [r3, #0]
    858e:	2350      	movs	r3, #80	; 0x50
    8590:	18fb      	adds	r3, r7, r3
    8592:	2201      	movs	r2, #1
    8594:	605a      	str	r2, [r3, #4]
    8596:	2350      	movs	r3, #80	; 0x50
    8598:	18fb      	adds	r3, r7, r3
    859a:	2200      	movs	r2, #0
    859c:	721a      	strb	r2, [r3, #8]
    859e:	2350      	movs	r3, #80	; 0x50
    85a0:	18fb      	adds	r3, r7, r3
    85a2:	2200      	movs	r2, #0
    85a4:	725a      	strb	r2, [r3, #9]
    85a6:	2350      	movs	r3, #80	; 0x50
    85a8:	18fb      	adds	r3, r7, r3
    85aa:	0019      	movs	r1, r3
    85ac:	2003      	movs	r0, #3
    85ae:	4b3e      	ldr	r3, [pc, #248]	; (86a8 <system_clock_init+0x294>)
    85b0:	4798      	blx	r3
    85b2:	2003      	movs	r0, #3
    85b4:	4b3d      	ldr	r3, [pc, #244]	; (86ac <system_clock_init+0x298>)
    85b6:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    85b8:	2310      	movs	r3, #16
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	0018      	movs	r0, r3
    85be:	4b3c      	ldr	r3, [pc, #240]	; (86b0 <system_clock_init+0x29c>)
    85c0:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    85c2:	2310      	movs	r3, #16
    85c4:	18fb      	adds	r3, r7, r3
    85c6:	2201      	movs	r2, #1
    85c8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    85ca:	2310      	movs	r3, #16
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	0019      	movs	r1, r3
    85d0:	2000      	movs	r0, #0
    85d2:	4b38      	ldr	r3, [pc, #224]	; (86b4 <system_clock_init+0x2a0>)
    85d4:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    85d6:	2000      	movs	r0, #0
    85d8:	4b37      	ldr	r3, [pc, #220]	; (86b8 <system_clock_init+0x2a4>)
    85da:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    85dc:	2007      	movs	r0, #7
    85de:	4b28      	ldr	r3, [pc, #160]	; (8680 <system_clock_init+0x26c>)
    85e0:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    85e2:	46c0      	nop			; (mov r8, r8)
    85e4:	2007      	movs	r0, #7
    85e6:	4b27      	ldr	r3, [pc, #156]	; (8684 <system_clock_init+0x270>)
    85e8:	4798      	blx	r3
    85ea:	0003      	movs	r3, r0
    85ec:	001a      	movs	r2, r3
    85ee:	2301      	movs	r3, #1
    85f0:	4053      	eors	r3, r2
    85f2:	b2db      	uxtb	r3, r3
    85f4:	2b00      	cmp	r3, #0
    85f6:	d1f5      	bne.n	85e4 <system_clock_init+0x1d0>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    85f8:	2000      	movs	r0, #0
    85fa:	4b30      	ldr	r3, [pc, #192]	; (86bc <system_clock_init+0x2a8>)
    85fc:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    85fe:	2000      	movs	r0, #0
    8600:	4b2f      	ldr	r3, [pc, #188]	; (86c0 <system_clock_init+0x2ac>)
    8602:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    8604:	2000      	movs	r0, #0
    8606:	4b2f      	ldr	r3, [pc, #188]	; (86c4 <system_clock_init+0x2b0>)
    8608:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    860a:	2000      	movs	r0, #0
    860c:	4b2e      	ldr	r3, [pc, #184]	; (86c8 <system_clock_init+0x2b4>)
    860e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8610:	1d3b      	adds	r3, r7, #4
    8612:	0018      	movs	r0, r3
    8614:	4b23      	ldr	r3, [pc, #140]	; (86a4 <system_clock_init+0x290>)
    8616:	4798      	blx	r3
    8618:	1d3b      	adds	r3, r7, #4
    861a:	2207      	movs	r2, #7
    861c:	701a      	strb	r2, [r3, #0]
    861e:	1d3b      	adds	r3, r7, #4
    8620:	2201      	movs	r2, #1
    8622:	605a      	str	r2, [r3, #4]
    8624:	1d3b      	adds	r3, r7, #4
    8626:	2200      	movs	r2, #0
    8628:	721a      	strb	r2, [r3, #8]
    862a:	1d3b      	adds	r3, r7, #4
    862c:	2200      	movs	r2, #0
    862e:	725a      	strb	r2, [r3, #9]
    8630:	1d3b      	adds	r3, r7, #4
    8632:	0019      	movs	r1, r3
    8634:	2000      	movs	r0, #0
    8636:	4b1c      	ldr	r3, [pc, #112]	; (86a8 <system_clock_init+0x294>)
    8638:	4798      	blx	r3
    863a:	2000      	movs	r0, #0
    863c:	4b1b      	ldr	r3, [pc, #108]	; (86ac <system_clock_init+0x298>)
    863e:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    8640:	4b22      	ldr	r3, [pc, #136]	; (86cc <system_clock_init+0x2b8>)
    8642:	4798      	blx	r3
    8644:	0003      	movs	r3, r0
    8646:	22a0      	movs	r2, #160	; 0xa0
    8648:	18ba      	adds	r2, r7, r2
    864a:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
    864c:	23a0      	movs	r3, #160	; 0xa0
    864e:	18fb      	adds	r3, r7, r3
    8650:	681b      	ldr	r3, [r3, #0]
    8652:	4a1f      	ldr	r2, [pc, #124]	; (86d0 <system_clock_init+0x2bc>)
    8654:	4293      	cmp	r3, r2
    8656:	d802      	bhi.n	865e <system_clock_init+0x24a>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    8658:	2000      	movs	r0, #0
    865a:	4b06      	ldr	r3, [pc, #24]	; (8674 <system_clock_init+0x260>)
    865c:	4798      	blx	r3
	}
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b02a      	add	sp, #168	; 0xa8
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	40000c00 	.word	0x40000c00
    866c:	40001400 	.word	0x40001400
    8670:	00007d25 	.word	0x00007d25
    8674:	00007d59 	.word	0x00007d59
    8678:	00007bad 	.word	0x00007bad
    867c:	00008005 	.word	0x00008005
    8680:	000081d9 	.word	0x000081d9
    8684:	00008345 	.word	0x00008345
    8688:	40001000 	.word	0x40001000
    868c:	00007dc1 	.word	0x00007dc1
    8690:	00007c11 	.word	0x00007c11
    8694:	00806020 	.word	0x00806020
    8698:	000005b9 	.word	0x000005b9
    869c:	00008101 	.word	0x00008101
    86a0:	000087b5 	.word	0x000087b5
    86a4:	00007b69 	.word	0x00007b69
    86a8:	000087e5 	.word	0x000087e5
    86ac:	000088f5 	.word	0x000088f5
    86b0:	00007b97 	.word	0x00007b97
    86b4:	00008a11 	.word	0x00008a11
    86b8:	00008a51 	.word	0x00008a51
    86bc:	00007ccd 	.word	0x00007ccd
    86c0:	00007ca5 	.word	0x00007ca5
    86c4:	00007c7d 	.word	0x00007c7d
    86c8:	00007c69 	.word	0x00007c69
    86cc:	00007cf5 	.word	0x00007cf5
    86d0:	00b71b00 	.word	0x00b71b00

000086d4 <system_apb_clock_set_mask>:
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b082      	sub	sp, #8
    86d8:	af00      	add	r7, sp, #0
    86da:	0002      	movs	r2, r0
    86dc:	6039      	str	r1, [r7, #0]
    86de:	1dfb      	adds	r3, r7, #7
    86e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    86e2:	1dfb      	adds	r3, r7, #7
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	2b04      	cmp	r3, #4
    86e8:	d827      	bhi.n	873a <system_apb_clock_set_mask+0x66>
    86ea:	009a      	lsls	r2, r3, #2
    86ec:	4b16      	ldr	r3, [pc, #88]	; (8748 <system_apb_clock_set_mask+0x74>)
    86ee:	18d3      	adds	r3, r2, r3
    86f0:	681b      	ldr	r3, [r3, #0]
    86f2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    86f4:	4b15      	ldr	r3, [pc, #84]	; (874c <system_apb_clock_set_mask+0x78>)
    86f6:	4a15      	ldr	r2, [pc, #84]	; (874c <system_apb_clock_set_mask+0x78>)
    86f8:	6951      	ldr	r1, [r2, #20]
    86fa:	683a      	ldr	r2, [r7, #0]
    86fc:	430a      	orrs	r2, r1
    86fe:	615a      	str	r2, [r3, #20]
			break;
    8700:	e01d      	b.n	873e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    8702:	4b12      	ldr	r3, [pc, #72]	; (874c <system_apb_clock_set_mask+0x78>)
    8704:	4a11      	ldr	r2, [pc, #68]	; (874c <system_apb_clock_set_mask+0x78>)
    8706:	6991      	ldr	r1, [r2, #24]
    8708:	683a      	ldr	r2, [r7, #0]
    870a:	430a      	orrs	r2, r1
    870c:	619a      	str	r2, [r3, #24]
			break;
    870e:	e016      	b.n	873e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    8710:	4b0e      	ldr	r3, [pc, #56]	; (874c <system_apb_clock_set_mask+0x78>)
    8712:	4a0e      	ldr	r2, [pc, #56]	; (874c <system_apb_clock_set_mask+0x78>)
    8714:	69d1      	ldr	r1, [r2, #28]
    8716:	683a      	ldr	r2, [r7, #0]
    8718:	430a      	orrs	r2, r1
    871a:	61da      	str	r2, [r3, #28]
			break;
    871c:	e00f      	b.n	873e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    871e:	4b0b      	ldr	r3, [pc, #44]	; (874c <system_apb_clock_set_mask+0x78>)
    8720:	4a0a      	ldr	r2, [pc, #40]	; (874c <system_apb_clock_set_mask+0x78>)
    8722:	6a11      	ldr	r1, [r2, #32]
    8724:	683a      	ldr	r2, [r7, #0]
    8726:	430a      	orrs	r2, r1
    8728:	621a      	str	r2, [r3, #32]
			break;
    872a:	e008      	b.n	873e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    872c:	4b07      	ldr	r3, [pc, #28]	; (874c <system_apb_clock_set_mask+0x78>)
    872e:	4a07      	ldr	r2, [pc, #28]	; (874c <system_apb_clock_set_mask+0x78>)
    8730:	6a51      	ldr	r1, [r2, #36]	; 0x24
    8732:	683a      	ldr	r2, [r7, #0]
    8734:	430a      	orrs	r2, r1
    8736:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    8738:	e001      	b.n	873e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    873a:	2317      	movs	r3, #23
    873c:	e000      	b.n	8740 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    873e:	2300      	movs	r3, #0
}
    8740:	0018      	movs	r0, r3
    8742:	46bd      	mov	sp, r7
    8744:	b002      	add	sp, #8
    8746:	bd80      	pop	{r7, pc}
    8748:	0000c658 	.word	0x0000c658
    874c:	40000400 	.word	0x40000400

00008750 <system_interrupt_enter_critical_section>:
{
    8750:	b580      	push	{r7, lr}
    8752:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8754:	4b02      	ldr	r3, [pc, #8]	; (8760 <system_interrupt_enter_critical_section+0x10>)
    8756:	4798      	blx	r3
}
    8758:	46c0      	nop			; (mov r8, r8)
    875a:	46bd      	mov	sp, r7
    875c:	bd80      	pop	{r7, pc}
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	00007ad5 	.word	0x00007ad5

00008764 <system_interrupt_leave_critical_section>:
{
    8764:	b580      	push	{r7, lr}
    8766:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8768:	4b02      	ldr	r3, [pc, #8]	; (8774 <system_interrupt_leave_critical_section+0x10>)
    876a:	4798      	blx	r3
}
    876c:	46c0      	nop			; (mov r8, r8)
    876e:	46bd      	mov	sp, r7
    8770:	bd80      	pop	{r7, pc}
    8772:	46c0      	nop			; (mov r8, r8)
    8774:	00007b29 	.word	0x00007b29

00008778 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    8778:	b580      	push	{r7, lr}
    877a:	b082      	sub	sp, #8
    877c:	af00      	add	r7, sp, #0
    877e:	0002      	movs	r2, r0
    8780:	1dfb      	adds	r3, r7, #7
    8782:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    8784:	4b09      	ldr	r3, [pc, #36]	; (87ac <system_gclk_is_syncing+0x34>)
    8786:	685b      	ldr	r3, [r3, #4]
    8788:	1dfa      	adds	r2, r7, #7
    878a:	7812      	ldrb	r2, [r2, #0]
    878c:	2101      	movs	r1, #1
    878e:	4091      	lsls	r1, r2
    8790:	000a      	movs	r2, r1
    8792:	0092      	lsls	r2, r2, #2
    8794:	4013      	ands	r3, r2
    8796:	4a06      	ldr	r2, [pc, #24]	; (87b0 <system_gclk_is_syncing+0x38>)
    8798:	4013      	ands	r3, r2
    879a:	d001      	beq.n	87a0 <system_gclk_is_syncing+0x28>
		 return true;
    879c:	2301      	movs	r3, #1
    879e:	e000      	b.n	87a2 <system_gclk_is_syncing+0x2a>
	}

	 return false;
    87a0:	2300      	movs	r3, #0
}
    87a2:	0018      	movs	r0, r3
    87a4:	46bd      	mov	sp, r7
    87a6:	b002      	add	sp, #8
    87a8:	bd80      	pop	{r7, pc}
    87aa:	46c0      	nop			; (mov r8, r8)
    87ac:	40001800 	.word	0x40001800
    87b0:	000007fc 	.word	0x000007fc

000087b4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    87b8:	2140      	movs	r1, #64	; 0x40
    87ba:	2000      	movs	r0, #0
    87bc:	4b07      	ldr	r3, [pc, #28]	; (87dc <system_gclk_init+0x28>)
    87be:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    87c0:	4b07      	ldr	r3, [pc, #28]	; (87e0 <system_gclk_init+0x2c>)
    87c2:	2201      	movs	r2, #1
    87c4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	4b05      	ldr	r3, [pc, #20]	; (87e0 <system_gclk_init+0x2c>)
    87ca:	781b      	ldrb	r3, [r3, #0]
    87cc:	b2db      	uxtb	r3, r3
    87ce:	001a      	movs	r2, r3
    87d0:	2301      	movs	r3, #1
    87d2:	4013      	ands	r3, r2
    87d4:	d1f8      	bne.n	87c8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    87d6:	46c0      	nop			; (mov r8, r8)
    87d8:	46bd      	mov	sp, r7
    87da:	bd80      	pop	{r7, pc}
    87dc:	000086d5 	.word	0x000086d5
    87e0:	40001800 	.word	0x40001800

000087e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    87e4:	b580      	push	{r7, lr}
    87e6:	b086      	sub	sp, #24
    87e8:	af00      	add	r7, sp, #0
    87ea:	0002      	movs	r2, r0
    87ec:	6039      	str	r1, [r7, #0]
    87ee:	1dfb      	adds	r3, r7, #7
    87f0:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    87f2:	683b      	ldr	r3, [r7, #0]
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    87f8:	683b      	ldr	r3, [r7, #0]
    87fa:	785b      	ldrb	r3, [r3, #1]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d004      	beq.n	880a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8800:	697b      	ldr	r3, [r7, #20]
    8802:	2280      	movs	r2, #128	; 0x80
    8804:	00d2      	lsls	r2, r2, #3
    8806:	4313      	orrs	r3, r2
    8808:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    880a:	683b      	ldr	r3, [r7, #0]
    880c:	7a5b      	ldrb	r3, [r3, #9]
    880e:	2b00      	cmp	r3, #0
    8810:	d004      	beq.n	881c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8812:	697b      	ldr	r3, [r7, #20]
    8814:	2280      	movs	r2, #128	; 0x80
    8816:	0112      	lsls	r2, r2, #4
    8818:	4313      	orrs	r3, r2
    881a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    881c:	683b      	ldr	r3, [r7, #0]
    881e:	685b      	ldr	r3, [r3, #4]
    8820:	2b01      	cmp	r3, #1
    8822:	d92c      	bls.n	887e <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8824:	683b      	ldr	r3, [r7, #0]
    8826:	685a      	ldr	r2, [r3, #4]
    8828:	683b      	ldr	r3, [r7, #0]
    882a:	685b      	ldr	r3, [r3, #4]
    882c:	3b01      	subs	r3, #1
    882e:	4013      	ands	r3, r2
    8830:	d11a      	bne.n	8868 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    8832:	2300      	movs	r3, #0
    8834:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8836:	2302      	movs	r3, #2
    8838:	60fb      	str	r3, [r7, #12]
    883a:	e005      	b.n	8848 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    883c:	693b      	ldr	r3, [r7, #16]
    883e:	3301      	adds	r3, #1
    8840:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    8842:	68fb      	ldr	r3, [r7, #12]
    8844:	005b      	lsls	r3, r3, #1
    8846:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    8848:	683b      	ldr	r3, [r7, #0]
    884a:	685a      	ldr	r2, [r3, #4]
    884c:	68fb      	ldr	r3, [r7, #12]
    884e:	429a      	cmp	r2, r3
    8850:	d8f4      	bhi.n	883c <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    8852:	693b      	ldr	r3, [r7, #16]
    8854:	041b      	lsls	r3, r3, #16
    8856:	697a      	ldr	r2, [r7, #20]
    8858:	4313      	orrs	r3, r2
    885a:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    885c:	697b      	ldr	r3, [r7, #20]
    885e:	2280      	movs	r2, #128	; 0x80
    8860:	0152      	lsls	r2, r2, #5
    8862:	4313      	orrs	r3, r2
    8864:	617b      	str	r3, [r7, #20]
    8866:	e00a      	b.n	887e <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    8868:	683b      	ldr	r3, [r7, #0]
    886a:	685b      	ldr	r3, [r3, #4]
    886c:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    886e:	697a      	ldr	r2, [r7, #20]
    8870:	4313      	orrs	r3, r2
    8872:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8874:	697b      	ldr	r3, [r7, #20]
    8876:	2280      	movs	r2, #128	; 0x80
    8878:	0092      	lsls	r2, r2, #2
    887a:	4313      	orrs	r3, r2
    887c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    887e:	683b      	ldr	r3, [r7, #0]
    8880:	7a1b      	ldrb	r3, [r3, #8]
    8882:	2b00      	cmp	r3, #0
    8884:	d004      	beq.n	8890 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8886:	697b      	ldr	r3, [r7, #20]
    8888:	2280      	movs	r2, #128	; 0x80
    888a:	0192      	lsls	r2, r2, #6
    888c:	4313      	orrs	r3, r2
    888e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    8890:	46c0      	nop			; (mov r8, r8)
    8892:	1dfb      	adds	r3, r7, #7
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	0018      	movs	r0, r3
    8898:	4b12      	ldr	r3, [pc, #72]	; (88e4 <system_gclk_gen_set_config+0x100>)
    889a:	4798      	blx	r3
    889c:	1e03      	subs	r3, r0, #0
    889e:	d1f8      	bne.n	8892 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    88a0:	4b11      	ldr	r3, [pc, #68]	; (88e8 <system_gclk_gen_set_config+0x104>)
    88a2:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    88a4:	4811      	ldr	r0, [pc, #68]	; (88ec <system_gclk_gen_set_config+0x108>)
    88a6:	1dfb      	adds	r3, r7, #7
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	4910      	ldr	r1, [pc, #64]	; (88ec <system_gclk_gen_set_config+0x108>)
    88ac:	1dfa      	adds	r2, r7, #7
    88ae:	7812      	ldrb	r2, [r2, #0]
    88b0:	3208      	adds	r2, #8
    88b2:	0092      	lsls	r2, r2, #2
    88b4:	5851      	ldr	r1, [r2, r1]
    88b6:	2280      	movs	r2, #128	; 0x80
    88b8:	0052      	lsls	r2, r2, #1
    88ba:	4011      	ands	r1, r2
    88bc:	697a      	ldr	r2, [r7, #20]
    88be:	430a      	orrs	r2, r1
    88c0:	3308      	adds	r3, #8
    88c2:	009b      	lsls	r3, r3, #2
    88c4:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    88c6:	46c0      	nop			; (mov r8, r8)
    88c8:	1dfb      	adds	r3, r7, #7
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	0018      	movs	r0, r3
    88ce:	4b05      	ldr	r3, [pc, #20]	; (88e4 <system_gclk_gen_set_config+0x100>)
    88d0:	4798      	blx	r3
    88d2:	1e03      	subs	r3, r0, #0
    88d4:	d1f8      	bne.n	88c8 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    88d6:	4b06      	ldr	r3, [pc, #24]	; (88f0 <system_gclk_gen_set_config+0x10c>)
    88d8:	4798      	blx	r3
}
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	46bd      	mov	sp, r7
    88de:	b006      	add	sp, #24
    88e0:	bd80      	pop	{r7, pc}
    88e2:	46c0      	nop			; (mov r8, r8)
    88e4:	00008779 	.word	0x00008779
    88e8:	00008751 	.word	0x00008751
    88ec:	40001800 	.word	0x40001800
    88f0:	00008765 	.word	0x00008765

000088f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    88f4:	b580      	push	{r7, lr}
    88f6:	b082      	sub	sp, #8
    88f8:	af00      	add	r7, sp, #0
    88fa:	0002      	movs	r2, r0
    88fc:	1dfb      	adds	r3, r7, #7
    88fe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    8900:	46c0      	nop			; (mov r8, r8)
    8902:	1dfb      	adds	r3, r7, #7
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	0018      	movs	r0, r3
    8908:	4b0d      	ldr	r3, [pc, #52]	; (8940 <system_gclk_gen_enable+0x4c>)
    890a:	4798      	blx	r3
    890c:	1e03      	subs	r3, r0, #0
    890e:	d1f8      	bne.n	8902 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8910:	4b0c      	ldr	r3, [pc, #48]	; (8944 <system_gclk_gen_enable+0x50>)
    8912:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    8914:	480c      	ldr	r0, [pc, #48]	; (8948 <system_gclk_gen_enable+0x54>)
    8916:	1dfb      	adds	r3, r7, #7
    8918:	781b      	ldrb	r3, [r3, #0]
    891a:	490b      	ldr	r1, [pc, #44]	; (8948 <system_gclk_gen_enable+0x54>)
    891c:	1dfa      	adds	r2, r7, #7
    891e:	7812      	ldrb	r2, [r2, #0]
    8920:	3208      	adds	r2, #8
    8922:	0092      	lsls	r2, r2, #2
    8924:	5852      	ldr	r2, [r2, r1]
    8926:	2180      	movs	r1, #128	; 0x80
    8928:	0049      	lsls	r1, r1, #1
    892a:	430a      	orrs	r2, r1
    892c:	3308      	adds	r3, #8
    892e:	009b      	lsls	r3, r3, #2
    8930:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    8932:	4b06      	ldr	r3, [pc, #24]	; (894c <system_gclk_gen_enable+0x58>)
    8934:	4798      	blx	r3
}
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	46bd      	mov	sp, r7
    893a:	b002      	add	sp, #8
    893c:	bd80      	pop	{r7, pc}
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	00008779 	.word	0x00008779
    8944:	00008751 	.word	0x00008751
    8948:	40001800 	.word	0x40001800
    894c:	00008765 	.word	0x00008765

00008950 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8950:	b580      	push	{r7, lr}
    8952:	b086      	sub	sp, #24
    8954:	af00      	add	r7, sp, #0
    8956:	0002      	movs	r2, r0
    8958:	1dfb      	adds	r3, r7, #7
    895a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    895c:	46c0      	nop			; (mov r8, r8)
    895e:	1dfb      	adds	r3, r7, #7
    8960:	781b      	ldrb	r3, [r3, #0]
    8962:	0018      	movs	r0, r3
    8964:	4b24      	ldr	r3, [pc, #144]	; (89f8 <system_gclk_gen_get_hz+0xa8>)
    8966:	4798      	blx	r3
    8968:	1e03      	subs	r3, r0, #0
    896a:	d1f8      	bne.n	895e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    896c:	4b23      	ldr	r3, [pc, #140]	; (89fc <system_gclk_gen_get_hz+0xac>)
    896e:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    8970:	4a23      	ldr	r2, [pc, #140]	; (8a00 <system_gclk_gen_get_hz+0xb0>)
    8972:	1dfb      	adds	r3, r7, #7
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	3308      	adds	r3, #8
    8978:	009b      	lsls	r3, r3, #2
    897a:	589b      	ldr	r3, [r3, r2]
    897c:	071b      	lsls	r3, r3, #28
    897e:	0f1b      	lsrs	r3, r3, #28
    8980:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8982:	0018      	movs	r0, r3
    8984:	4b1f      	ldr	r3, [pc, #124]	; (8a04 <system_gclk_gen_get_hz+0xb4>)
    8986:	4798      	blx	r3
    8988:	0003      	movs	r3, r0
    898a:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    898c:	4a1c      	ldr	r2, [pc, #112]	; (8a00 <system_gclk_gen_get_hz+0xb0>)
    898e:	1dfb      	adds	r3, r7, #7
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	3308      	adds	r3, #8
    8994:	009b      	lsls	r3, r3, #2
    8996:	589b      	ldr	r3, [r3, r2]
    8998:	04db      	lsls	r3, r3, #19
    899a:	0fdb      	lsrs	r3, r3, #31
    899c:	b2da      	uxtb	r2, r3
    899e:	2313      	movs	r3, #19
    89a0:	18fb      	adds	r3, r7, r3
    89a2:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    89a4:	4a16      	ldr	r2, [pc, #88]	; (8a00 <system_gclk_gen_get_hz+0xb0>)
    89a6:	1dfb      	adds	r3, r7, #7
    89a8:	781b      	ldrb	r3, [r3, #0]
    89aa:	3308      	adds	r3, #8
    89ac:	009b      	lsls	r3, r3, #2
    89ae:	589b      	ldr	r3, [r3, r2]
    89b0:	0c1b      	lsrs	r3, r3, #16
    89b2:	b29b      	uxth	r3, r3
    89b4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    89b6:	4b14      	ldr	r3, [pc, #80]	; (8a08 <system_gclk_gen_get_hz+0xb8>)
    89b8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    89ba:	2313      	movs	r3, #19
    89bc:	18fb      	adds	r3, r7, r3
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	2b00      	cmp	r3, #0
    89c2:	d109      	bne.n	89d8 <system_gclk_gen_get_hz+0x88>
    89c4:	68fb      	ldr	r3, [r7, #12]
    89c6:	2b01      	cmp	r3, #1
    89c8:	d906      	bls.n	89d8 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    89ca:	4b10      	ldr	r3, [pc, #64]	; (8a0c <system_gclk_gen_get_hz+0xbc>)
    89cc:	68f9      	ldr	r1, [r7, #12]
    89ce:	6978      	ldr	r0, [r7, #20]
    89d0:	4798      	blx	r3
    89d2:	0003      	movs	r3, r0
    89d4:	617b      	str	r3, [r7, #20]
    89d6:	e00a      	b.n	89ee <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    89d8:	2313      	movs	r3, #19
    89da:	18fb      	adds	r3, r7, r3
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	2b00      	cmp	r3, #0
    89e0:	d005      	beq.n	89ee <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    89e2:	68fb      	ldr	r3, [r7, #12]
    89e4:	3301      	adds	r3, #1
    89e6:	697a      	ldr	r2, [r7, #20]
    89e8:	40da      	lsrs	r2, r3
    89ea:	0013      	movs	r3, r2
    89ec:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    89ee:	697b      	ldr	r3, [r7, #20]
}
    89f0:	0018      	movs	r0, r3
    89f2:	46bd      	mov	sp, r7
    89f4:	b006      	add	sp, #24
    89f6:	bd80      	pop	{r7, pc}
    89f8:	00008779 	.word	0x00008779
    89fc:	00008751 	.word	0x00008751
    8a00:	40001800 	.word	0x40001800
    8a04:	00007ec5 	.word	0x00007ec5
    8a08:	00008765 	.word	0x00008765
    8a0c:	000092a5 	.word	0x000092a5

00008a10 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
    8a16:	0002      	movs	r2, r0
    8a18:	6039      	str	r1, [r7, #0]
    8a1a:	1dfb      	adds	r3, r7, #7
    8a1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    8a1e:	1dfb      	adds	r3, r7, #7
    8a20:	781b      	ldrb	r3, [r3, #0]
    8a22:	0018      	movs	r0, r3
    8a24:	4b08      	ldr	r3, [pc, #32]	; (8a48 <system_gclk_chan_set_config+0x38>)
    8a26:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    8a28:	4908      	ldr	r1, [pc, #32]	; (8a4c <system_gclk_chan_set_config+0x3c>)
    8a2a:	1dfb      	adds	r3, r7, #7
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	683a      	ldr	r2, [r7, #0]
    8a30:	7812      	ldrb	r2, [r2, #0]
    8a32:	0010      	movs	r0, r2
    8a34:	220f      	movs	r2, #15
    8a36:	4002      	ands	r2, r0
    8a38:	3320      	adds	r3, #32
    8a3a:	009b      	lsls	r3, r3, #2
    8a3c:	505a      	str	r2, [r3, r1]


}
    8a3e:	46c0      	nop			; (mov r8, r8)
    8a40:	46bd      	mov	sp, r7
    8a42:	b002      	add	sp, #8
    8a44:	bd80      	pop	{r7, pc}
    8a46:	46c0      	nop			; (mov r8, r8)
    8a48:	00008aa9 	.word	0x00008aa9
    8a4c:	40001800 	.word	0x40001800

00008a50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b082      	sub	sp, #8
    8a54:	af00      	add	r7, sp, #0
    8a56:	0002      	movs	r2, r0
    8a58:	1dfb      	adds	r3, r7, #7
    8a5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8a5c:	4b0f      	ldr	r3, [pc, #60]	; (8a9c <system_gclk_chan_enable+0x4c>)
    8a5e:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    8a60:	490f      	ldr	r1, [pc, #60]	; (8aa0 <system_gclk_chan_enable+0x50>)
    8a62:	1dfb      	adds	r3, r7, #7
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	480e      	ldr	r0, [pc, #56]	; (8aa0 <system_gclk_chan_enable+0x50>)
    8a68:	1dfa      	adds	r2, r7, #7
    8a6a:	7812      	ldrb	r2, [r2, #0]
    8a6c:	3220      	adds	r2, #32
    8a6e:	0092      	lsls	r2, r2, #2
    8a70:	5812      	ldr	r2, [r2, r0]
    8a72:	2040      	movs	r0, #64	; 0x40
    8a74:	4302      	orrs	r2, r0
    8a76:	3320      	adds	r3, #32
    8a78:	009b      	lsls	r3, r3, #2
    8a7a:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    8a7c:	46c0      	nop			; (mov r8, r8)
    8a7e:	4a08      	ldr	r2, [pc, #32]	; (8aa0 <system_gclk_chan_enable+0x50>)
    8a80:	1dfb      	adds	r3, r7, #7
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	3320      	adds	r3, #32
    8a86:	009b      	lsls	r3, r3, #2
    8a88:	589b      	ldr	r3, [r3, r2]
    8a8a:	2240      	movs	r2, #64	; 0x40
    8a8c:	4013      	ands	r3, r2
    8a8e:	d0f6      	beq.n	8a7e <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    8a90:	4b04      	ldr	r3, [pc, #16]	; (8aa4 <system_gclk_chan_enable+0x54>)
    8a92:	4798      	blx	r3
}
    8a94:	46c0      	nop			; (mov r8, r8)
    8a96:	46bd      	mov	sp, r7
    8a98:	b002      	add	sp, #8
    8a9a:	bd80      	pop	{r7, pc}
    8a9c:	00008751 	.word	0x00008751
    8aa0:	40001800 	.word	0x40001800
    8aa4:	00008765 	.word	0x00008765

00008aa8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8aa8:	b580      	push	{r7, lr}
    8aaa:	b082      	sub	sp, #8
    8aac:	af00      	add	r7, sp, #0
    8aae:	0002      	movs	r2, r0
    8ab0:	1dfb      	adds	r3, r7, #7
    8ab2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8ab4:	4b0f      	ldr	r3, [pc, #60]	; (8af4 <system_gclk_chan_disable+0x4c>)
    8ab6:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    8ab8:	490f      	ldr	r1, [pc, #60]	; (8af8 <system_gclk_chan_disable+0x50>)
    8aba:	1dfb      	adds	r3, r7, #7
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	480e      	ldr	r0, [pc, #56]	; (8af8 <system_gclk_chan_disable+0x50>)
    8ac0:	1dfa      	adds	r2, r7, #7
    8ac2:	7812      	ldrb	r2, [r2, #0]
    8ac4:	3220      	adds	r2, #32
    8ac6:	0092      	lsls	r2, r2, #2
    8ac8:	5812      	ldr	r2, [r2, r0]
    8aca:	2040      	movs	r0, #64	; 0x40
    8acc:	4382      	bics	r2, r0
    8ace:	3320      	adds	r3, #32
    8ad0:	009b      	lsls	r3, r3, #2
    8ad2:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    8ad4:	46c0      	nop			; (mov r8, r8)
    8ad6:	4a08      	ldr	r2, [pc, #32]	; (8af8 <system_gclk_chan_disable+0x50>)
    8ad8:	1dfb      	adds	r3, r7, #7
    8ada:	781b      	ldrb	r3, [r3, #0]
    8adc:	3320      	adds	r3, #32
    8ade:	009b      	lsls	r3, r3, #2
    8ae0:	589b      	ldr	r3, [r3, r2]
    8ae2:	2240      	movs	r2, #64	; 0x40
    8ae4:	4013      	ands	r3, r2
    8ae6:	d1f6      	bne.n	8ad6 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    8ae8:	4b04      	ldr	r3, [pc, #16]	; (8afc <system_gclk_chan_disable+0x54>)
    8aea:	4798      	blx	r3
}
    8aec:	46c0      	nop			; (mov r8, r8)
    8aee:	46bd      	mov	sp, r7
    8af0:	b002      	add	sp, #8
    8af2:	bd80      	pop	{r7, pc}
    8af4:	00008751 	.word	0x00008751
    8af8:	40001800 	.word	0x40001800
    8afc:	00008765 	.word	0x00008765

00008b00 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b084      	sub	sp, #16
    8b04:	af00      	add	r7, sp, #0
    8b06:	0002      	movs	r2, r0
    8b08:	1dfb      	adds	r3, r7, #7
    8b0a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    8b0c:	4b0d      	ldr	r3, [pc, #52]	; (8b44 <system_gclk_chan_get_hz+0x44>)
    8b0e:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    8b10:	4a0d      	ldr	r2, [pc, #52]	; (8b48 <system_gclk_chan_get_hz+0x48>)
    8b12:	1dfb      	adds	r3, r7, #7
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	3320      	adds	r3, #32
    8b18:	009b      	lsls	r3, r3, #2
    8b1a:	589b      	ldr	r3, [r3, r2]
    8b1c:	071b      	lsls	r3, r3, #28
    8b1e:	0f1b      	lsrs	r3, r3, #28
    8b20:	b2da      	uxtb	r2, r3
    8b22:	230f      	movs	r3, #15
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    8b28:	4b08      	ldr	r3, [pc, #32]	; (8b4c <system_gclk_chan_get_hz+0x4c>)
    8b2a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8b2c:	230f      	movs	r3, #15
    8b2e:	18fb      	adds	r3, r7, r3
    8b30:	781b      	ldrb	r3, [r3, #0]
    8b32:	0018      	movs	r0, r3
    8b34:	4b06      	ldr	r3, [pc, #24]	; (8b50 <system_gclk_chan_get_hz+0x50>)
    8b36:	4798      	blx	r3
    8b38:	0003      	movs	r3, r0
}
    8b3a:	0018      	movs	r0, r3
    8b3c:	46bd      	mov	sp, r7
    8b3e:	b004      	add	sp, #16
    8b40:	bd80      	pop	{r7, pc}
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	00008751 	.word	0x00008751
    8b48:	40001800 	.word	0x40001800
    8b4c:	00008765 	.word	0x00008765
    8b50:	00008951 	.word	0x00008951

00008b54 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
    8b54:	b580      	push	{r7, lr}
    8b56:	b084      	sub	sp, #16
    8b58:	af00      	add	r7, sp, #0
    8b5a:	0002      	movs	r2, r0
    8b5c:	1dfb      	adds	r3, r7, #7
    8b5e:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
    8b60:	230f      	movs	r3, #15
    8b62:	18fb      	adds	r3, r7, r3
    8b64:	2200      	movs	r2, #0
    8b66:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    8b68:	1dfb      	adds	r3, r7, #7
    8b6a:	781b      	ldrb	r3, [r3, #0]
    8b6c:	2b7f      	cmp	r3, #127	; 0x7f
    8b6e:	d80b      	bhi.n	8b88 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
    8b70:	4a13      	ldr	r2, [pc, #76]	; (8bc0 <system_interrupt_clear_pending+0x6c>)
    8b72:	1dfb      	adds	r3, r7, #7
    8b74:	781b      	ldrb	r3, [r3, #0]
    8b76:	b25b      	sxtb	r3, r3
    8b78:	2101      	movs	r1, #1
    8b7a:	4099      	lsls	r1, r3
    8b7c:	000b      	movs	r3, r1
    8b7e:	0019      	movs	r1, r3
    8b80:	23c0      	movs	r3, #192	; 0xc0
    8b82:	005b      	lsls	r3, r3, #1
    8b84:	50d1      	str	r1, [r2, r3]
    8b86:	e014      	b.n	8bb2 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
    8b88:	1dfb      	adds	r3, r7, #7
    8b8a:	781b      	ldrb	r3, [r3, #0]
    8b8c:	b25b      	sxtb	r3, r3
    8b8e:	330e      	adds	r3, #14
    8b90:	d101      	bne.n	8b96 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
    8b92:	2317      	movs	r3, #23
    8b94:	e010      	b.n	8bb8 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    8b96:	1dfb      	adds	r3, r7, #7
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	b25b      	sxtb	r3, r3
    8b9c:	3301      	adds	r3, #1
    8b9e:	d104      	bne.n	8baa <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    8ba0:	4b08      	ldr	r3, [pc, #32]	; (8bc4 <system_interrupt_clear_pending+0x70>)
    8ba2:	2280      	movs	r2, #128	; 0x80
    8ba4:	0492      	lsls	r2, r2, #18
    8ba6:	605a      	str	r2, [r3, #4]
    8ba8:	e003      	b.n	8bb2 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    8baa:	230f      	movs	r3, #15
    8bac:	18fb      	adds	r3, r7, r3
    8bae:	2217      	movs	r2, #23
    8bb0:	701a      	strb	r2, [r3, #0]
	}

	return status;
    8bb2:	230f      	movs	r3, #15
    8bb4:	18fb      	adds	r3, r7, r3
    8bb6:	781b      	ldrb	r3, [r3, #0]
}
    8bb8:	0018      	movs	r0, r3
    8bba:	46bd      	mov	sp, r7
    8bbc:	b004      	add	sp, #16
    8bbe:	bd80      	pop	{r7, pc}
    8bc0:	e000e100 	.word	0xe000e100
    8bc4:	e000ed00 	.word	0xe000ed00

00008bc8 <system_pinmux_get_group_from_gpio_pin>:
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b084      	sub	sp, #16
    8bcc:	af00      	add	r7, sp, #0
    8bce:	0002      	movs	r2, r0
    8bd0:	1dfb      	adds	r3, r7, #7
    8bd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8bd4:	230f      	movs	r3, #15
    8bd6:	18fb      	adds	r3, r7, r3
    8bd8:	1dfa      	adds	r2, r7, #7
    8bda:	7812      	ldrb	r2, [r2, #0]
    8bdc:	09d2      	lsrs	r2, r2, #7
    8bde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8be0:	230e      	movs	r3, #14
    8be2:	18fb      	adds	r3, r7, r3
    8be4:	1dfa      	adds	r2, r7, #7
    8be6:	7812      	ldrb	r2, [r2, #0]
    8be8:	0952      	lsrs	r2, r2, #5
    8bea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8bec:	4b0d      	ldr	r3, [pc, #52]	; (8c24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8bee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8bf0:	230f      	movs	r3, #15
    8bf2:	18fb      	adds	r3, r7, r3
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d10f      	bne.n	8c1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8bfa:	230f      	movs	r3, #15
    8bfc:	18fb      	adds	r3, r7, r3
    8bfe:	781b      	ldrb	r3, [r3, #0]
    8c00:	009b      	lsls	r3, r3, #2
    8c02:	2210      	movs	r2, #16
    8c04:	4694      	mov	ip, r2
    8c06:	44bc      	add	ip, r7
    8c08:	4463      	add	r3, ip
    8c0a:	3b08      	subs	r3, #8
    8c0c:	681a      	ldr	r2, [r3, #0]
    8c0e:	230e      	movs	r3, #14
    8c10:	18fb      	adds	r3, r7, r3
    8c12:	781b      	ldrb	r3, [r3, #0]
    8c14:	01db      	lsls	r3, r3, #7
    8c16:	18d3      	adds	r3, r2, r3
    8c18:	e000      	b.n	8c1c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8c1a:	2300      	movs	r3, #0
}
    8c1c:	0018      	movs	r0, r3
    8c1e:	46bd      	mov	sp, r7
    8c20:	b004      	add	sp, #16
    8c22:	bd80      	pop	{r7, pc}
    8c24:	40002800 	.word	0x40002800

00008c28 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b088      	sub	sp, #32
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	60f8      	str	r0, [r7, #12]
    8c30:	60b9      	str	r1, [r7, #8]
    8c32:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    8c34:	2300      	movs	r3, #0
    8c36:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	78db      	ldrb	r3, [r3, #3]
    8c3c:	2201      	movs	r2, #1
    8c3e:	4053      	eors	r3, r2
    8c40:	b2db      	uxtb	r3, r3
    8c42:	2b00      	cmp	r3, #0
    8c44:	d035      	beq.n	8cb2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8c46:	687b      	ldr	r3, [r7, #4]
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2b80      	cmp	r3, #128	; 0x80
    8c4c:	d00b      	beq.n	8c66 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    8c4e:	69fb      	ldr	r3, [r7, #28]
    8c50:	2280      	movs	r2, #128	; 0x80
    8c52:	0252      	lsls	r2, r2, #9
    8c54:	4313      	orrs	r3, r2
    8c56:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	781b      	ldrb	r3, [r3, #0]
    8c5c:	061b      	lsls	r3, r3, #24
    8c5e:	001a      	movs	r2, r3
    8c60:	69fb      	ldr	r3, [r7, #28]
    8c62:	4313      	orrs	r3, r2
    8c64:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8c66:	687b      	ldr	r3, [r7, #4]
    8c68:	785b      	ldrb	r3, [r3, #1]
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d003      	beq.n	8c76 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8c72:	2b02      	cmp	r3, #2
    8c74:	d110      	bne.n	8c98 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    8c76:	69fb      	ldr	r3, [r7, #28]
    8c78:	2280      	movs	r2, #128	; 0x80
    8c7a:	0292      	lsls	r2, r2, #10
    8c7c:	4313      	orrs	r3, r2
    8c7e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	789b      	ldrb	r3, [r3, #2]
    8c84:	2b00      	cmp	r3, #0
    8c86:	d004      	beq.n	8c92 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8c88:	69fb      	ldr	r3, [r7, #28]
    8c8a:	2280      	movs	r2, #128	; 0x80
    8c8c:	02d2      	lsls	r2, r2, #11
    8c8e:	4313      	orrs	r3, r2
    8c90:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8c92:	68fb      	ldr	r3, [r7, #12]
    8c94:	68ba      	ldr	r2, [r7, #8]
    8c96:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	785b      	ldrb	r3, [r3, #1]
    8c9c:	2b01      	cmp	r3, #1
    8c9e:	d003      	beq.n	8ca8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8ca4:	2b02      	cmp	r3, #2
    8ca6:	d107      	bne.n	8cb8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8ca8:	69fb      	ldr	r3, [r7, #28]
    8caa:	4a22      	ldr	r2, [pc, #136]	; (8d34 <_system_pinmux_config+0x10c>)
    8cac:	4013      	ands	r3, r2
    8cae:	61fb      	str	r3, [r7, #28]
    8cb0:	e002      	b.n	8cb8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    8cb2:	68fb      	ldr	r3, [r7, #12]
    8cb4:	68ba      	ldr	r2, [r7, #8]
    8cb6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8cb8:	68bb      	ldr	r3, [r7, #8]
    8cba:	041b      	lsls	r3, r3, #16
    8cbc:	0c1b      	lsrs	r3, r3, #16
    8cbe:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8cc0:	68bb      	ldr	r3, [r7, #8]
    8cc2:	0c1b      	lsrs	r3, r3, #16
    8cc4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8cc6:	69ba      	ldr	r2, [r7, #24]
    8cc8:	69fb      	ldr	r3, [r7, #28]
    8cca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8ccc:	22a0      	movs	r2, #160	; 0xa0
    8cce:	05d2      	lsls	r2, r2, #23
    8cd0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8cd2:	68fb      	ldr	r3, [r7, #12]
    8cd4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8cd6:	697a      	ldr	r2, [r7, #20]
    8cd8:	69fb      	ldr	r3, [r7, #28]
    8cda:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8cdc:	22d0      	movs	r2, #208	; 0xd0
    8cde:	0612      	lsls	r2, r2, #24
    8ce0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ce2:	68fb      	ldr	r3, [r7, #12]
    8ce4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	78db      	ldrb	r3, [r3, #3]
    8cea:	2201      	movs	r2, #1
    8cec:	4053      	eors	r3, r2
    8cee:	b2db      	uxtb	r3, r3
    8cf0:	2b00      	cmp	r3, #0
    8cf2:	d01a      	beq.n	8d2a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8cf4:	69fa      	ldr	r2, [r7, #28]
    8cf6:	2380      	movs	r3, #128	; 0x80
    8cf8:	02db      	lsls	r3, r3, #11
    8cfa:	4013      	ands	r3, r2
    8cfc:	d00a      	beq.n	8d14 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8cfe:	687b      	ldr	r3, [r7, #4]
    8d00:	789b      	ldrb	r3, [r3, #2]
    8d02:	2b01      	cmp	r3, #1
    8d04:	d103      	bne.n	8d0e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    8d06:	68fb      	ldr	r3, [r7, #12]
    8d08:	68ba      	ldr	r2, [r7, #8]
    8d0a:	619a      	str	r2, [r3, #24]
    8d0c:	e002      	b.n	8d14 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    8d0e:	68fb      	ldr	r3, [r7, #12]
    8d10:	68ba      	ldr	r2, [r7, #8]
    8d12:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8d14:	687b      	ldr	r3, [r7, #4]
    8d16:	785b      	ldrb	r3, [r3, #1]
    8d18:	2b01      	cmp	r3, #1
    8d1a:	d003      	beq.n	8d24 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8d20:	2b02      	cmp	r3, #2
    8d22:	d102      	bne.n	8d2a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    8d24:	68fb      	ldr	r3, [r7, #12]
    8d26:	68ba      	ldr	r2, [r7, #8]
    8d28:	609a      	str	r2, [r3, #8]
		}
	}
}
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	46bd      	mov	sp, r7
    8d2e:	b008      	add	sp, #32
    8d30:	bd80      	pop	{r7, pc}
    8d32:	46c0      	nop			; (mov r8, r8)
    8d34:	fffbffff 	.word	0xfffbffff

00008d38 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8d38:	b580      	push	{r7, lr}
    8d3a:	b084      	sub	sp, #16
    8d3c:	af00      	add	r7, sp, #0
    8d3e:	0002      	movs	r2, r0
    8d40:	6039      	str	r1, [r7, #0]
    8d42:	1dfb      	adds	r3, r7, #7
    8d44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8d46:	1dfb      	adds	r3, r7, #7
    8d48:	781b      	ldrb	r3, [r3, #0]
    8d4a:	0018      	movs	r0, r3
    8d4c:	4b0a      	ldr	r3, [pc, #40]	; (8d78 <system_pinmux_pin_set_config+0x40>)
    8d4e:	4798      	blx	r3
    8d50:	0003      	movs	r3, r0
    8d52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8d54:	1dfb      	adds	r3, r7, #7
    8d56:	781b      	ldrb	r3, [r3, #0]
    8d58:	221f      	movs	r2, #31
    8d5a:	4013      	ands	r3, r2
    8d5c:	2201      	movs	r2, #1
    8d5e:	409a      	lsls	r2, r3
    8d60:	0013      	movs	r3, r2
    8d62:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    8d64:	683a      	ldr	r2, [r7, #0]
    8d66:	68b9      	ldr	r1, [r7, #8]
    8d68:	68fb      	ldr	r3, [r7, #12]
    8d6a:	0018      	movs	r0, r3
    8d6c:	4b03      	ldr	r3, [pc, #12]	; (8d7c <system_pinmux_pin_set_config+0x44>)
    8d6e:	4798      	blx	r3
}
    8d70:	46c0      	nop			; (mov r8, r8)
    8d72:	46bd      	mov	sp, r7
    8d74:	b004      	add	sp, #16
    8d76:	bd80      	pop	{r7, pc}
    8d78:	00008bc9 	.word	0x00008bc9
    8d7c:	00008c29 	.word	0x00008c29

00008d80 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    8d80:	b580      	push	{r7, lr}
    8d82:	af00      	add	r7, sp, #0
	return;
    8d84:	46c0      	nop			; (mov r8, r8)
}
    8d86:	46bd      	mov	sp, r7
    8d88:	bd80      	pop	{r7, pc}
	...

00008d8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8d90:	4b06      	ldr	r3, [pc, #24]	; (8dac <system_init+0x20>)
    8d92:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8d94:	4b06      	ldr	r3, [pc, #24]	; (8db0 <system_init+0x24>)
    8d96:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8d98:	4b06      	ldr	r3, [pc, #24]	; (8db4 <system_init+0x28>)
    8d9a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8d9c:	4b06      	ldr	r3, [pc, #24]	; (8db8 <system_init+0x2c>)
    8d9e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8da0:	4b06      	ldr	r3, [pc, #24]	; (8dbc <system_init+0x30>)
    8da2:	4798      	blx	r3
}
    8da4:	46c0      	nop			; (mov r8, r8)
    8da6:	46bd      	mov	sp, r7
    8da8:	bd80      	pop	{r7, pc}
    8daa:	46c0      	nop			; (mov r8, r8)
    8dac:	00008415 	.word	0x00008415
    8db0:	00007ac9 	.word	0x00007ac9
    8db4:	00008d81 	.word	0x00008d81
    8db8:	00000235 	.word	0x00000235
    8dbc:	00008d81 	.word	0x00008d81

00008dc0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8dc0:	b580      	push	{r7, lr}
    8dc2:	b084      	sub	sp, #16
    8dc4:	af00      	add	r7, sp, #0
    8dc6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8dc8:	4b0a      	ldr	r3, [pc, #40]	; (8df4 <_sbrk+0x34>)
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d102      	bne.n	8dd6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    8dd0:	4b08      	ldr	r3, [pc, #32]	; (8df4 <_sbrk+0x34>)
    8dd2:	4a09      	ldr	r2, [pc, #36]	; (8df8 <_sbrk+0x38>)
    8dd4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    8dd6:	4b07      	ldr	r3, [pc, #28]	; (8df4 <_sbrk+0x34>)
    8dd8:	681b      	ldr	r3, [r3, #0]
    8dda:	60fb      	str	r3, [r7, #12]

	heap += incr;
    8ddc:	4b05      	ldr	r3, [pc, #20]	; (8df4 <_sbrk+0x34>)
    8dde:	681a      	ldr	r2, [r3, #0]
    8de0:	687b      	ldr	r3, [r7, #4]
    8de2:	18d2      	adds	r2, r2, r3
    8de4:	4b03      	ldr	r3, [pc, #12]	; (8df4 <_sbrk+0x34>)
    8de6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    8de8:	68fb      	ldr	r3, [r7, #12]
}
    8dea:	0018      	movs	r0, r3
    8dec:	46bd      	mov	sp, r7
    8dee:	b004      	add	sp, #16
    8df0:	bd80      	pop	{r7, pc}
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	2000032c 	.word	0x2000032c
    8df8:	20002470 	.word	0x20002470

00008dfc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b082      	sub	sp, #8
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
	return -1;
    8e04:	2301      	movs	r3, #1
    8e06:	425b      	negs	r3, r3
}
    8e08:	0018      	movs	r0, r3
    8e0a:	46bd      	mov	sp, r7
    8e0c:	b002      	add	sp, #8
    8e0e:	bd80      	pop	{r7, pc}

00008e10 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    8e10:	b580      	push	{r7, lr}
    8e12:	b082      	sub	sp, #8
    8e14:	af00      	add	r7, sp, #0
    8e16:	6078      	str	r0, [r7, #4]
    8e18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    8e1a:	683b      	ldr	r3, [r7, #0]
    8e1c:	2280      	movs	r2, #128	; 0x80
    8e1e:	0192      	lsls	r2, r2, #6
    8e20:	605a      	str	r2, [r3, #4]

	return 0;
    8e22:	2300      	movs	r3, #0
}
    8e24:	0018      	movs	r0, r3
    8e26:	46bd      	mov	sp, r7
    8e28:	b002      	add	sp, #8
    8e2a:	bd80      	pop	{r7, pc}

00008e2c <_isatty>:

extern int _isatty(int file)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	b082      	sub	sp, #8
    8e30:	af00      	add	r7, sp, #0
    8e32:	6078      	str	r0, [r7, #4]
	return 1;
    8e34:	2301      	movs	r3, #1
}
    8e36:	0018      	movs	r0, r3
    8e38:	46bd      	mov	sp, r7
    8e3a:	b002      	add	sp, #8
    8e3c:	bd80      	pop	{r7, pc}

00008e3e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    8e3e:	b580      	push	{r7, lr}
    8e40:	b084      	sub	sp, #16
    8e42:	af00      	add	r7, sp, #0
    8e44:	60f8      	str	r0, [r7, #12]
    8e46:	60b9      	str	r1, [r7, #8]
    8e48:	607a      	str	r2, [r7, #4]
	return 0;
    8e4a:	2300      	movs	r3, #0
}
    8e4c:	0018      	movs	r0, r3
    8e4e:	46bd      	mov	sp, r7
    8e50:	b004      	add	sp, #16
    8e52:	bd80      	pop	{r7, pc}

00008e54 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    8e54:	b580      	push	{r7, lr}
    8e56:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    8e58:	2000      	movs	r0, #0
    8e5a:	4b07      	ldr	r3, [pc, #28]	; (8e78 <system_cpu_clock_get_hz+0x24>)
    8e5c:	4798      	blx	r3
    8e5e:	0002      	movs	r2, r0
    8e60:	4b06      	ldr	r3, [pc, #24]	; (8e7c <system_cpu_clock_get_hz+0x28>)
    8e62:	791b      	ldrb	r3, [r3, #4]
    8e64:	b2db      	uxtb	r3, r3
    8e66:	0019      	movs	r1, r3
    8e68:	4b05      	ldr	r3, [pc, #20]	; (8e80 <system_cpu_clock_get_hz+0x2c>)
    8e6a:	0010      	movs	r0, r2
    8e6c:	4798      	blx	r3
    8e6e:	0003      	movs	r3, r0

}
    8e70:	0018      	movs	r0, r3
    8e72:	46bd      	mov	sp, r7
    8e74:	bd80      	pop	{r7, pc}
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	00008951 	.word	0x00008951
    8e7c:	40000400 	.word	0x40000400
    8e80:	000092a5 	.word	0x000092a5

00008e84 <system_interrupt_enable>:
{
    8e84:	b580      	push	{r7, lr}
    8e86:	b082      	sub	sp, #8
    8e88:	af00      	add	r7, sp, #0
    8e8a:	0002      	movs	r2, r0
    8e8c:	1dfb      	adds	r3, r7, #7
    8e8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e90:	4b06      	ldr	r3, [pc, #24]	; (8eac <system_interrupt_enable+0x28>)
    8e92:	1dfa      	adds	r2, r7, #7
    8e94:	7812      	ldrb	r2, [r2, #0]
    8e96:	0011      	movs	r1, r2
    8e98:	221f      	movs	r2, #31
    8e9a:	400a      	ands	r2, r1
    8e9c:	2101      	movs	r1, #1
    8e9e:	4091      	lsls	r1, r2
    8ea0:	000a      	movs	r2, r1
    8ea2:	601a      	str	r2, [r3, #0]
}
    8ea4:	46c0      	nop			; (mov r8, r8)
    8ea6:	46bd      	mov	sp, r7
    8ea8:	b002      	add	sp, #8
    8eaa:	bd80      	pop	{r7, pc}
    8eac:	e000e100 	.word	0xe000e100

00008eb0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b084      	sub	sp, #16
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	681b      	ldr	r3, [r3, #0]
    8ebc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    8ebe:	68fb      	ldr	r3, [r7, #12]
    8ec0:	69db      	ldr	r3, [r3, #28]
    8ec2:	1e5a      	subs	r2, r3, #1
    8ec4:	4193      	sbcs	r3, r2
    8ec6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    8ec8:	0018      	movs	r0, r3
    8eca:	46bd      	mov	sp, r7
    8ecc:	b004      	add	sp, #16
    8ece:	bd80      	pop	{r7, pc}

00008ed0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    8ed0:	b580      	push	{r7, lr}
    8ed2:	b082      	sub	sp, #8
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    8ed8:	46c0      	nop			; (mov r8, r8)
    8eda:	687b      	ldr	r3, [r7, #4]
    8edc:	0018      	movs	r0, r3
    8ede:	4b04      	ldr	r3, [pc, #16]	; (8ef0 <_usart_wait_for_sync+0x20>)
    8ee0:	4798      	blx	r3
    8ee2:	1e03      	subs	r3, r0, #0
    8ee4:	d1f9      	bne.n	8eda <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	46bd      	mov	sp, r7
    8eea:	b002      	add	sp, #8
    8eec:	bd80      	pop	{r7, pc}
    8eee:	46c0      	nop			; (mov r8, r8)
    8ef0:	00008eb1 	.word	0x00008eb1

00008ef4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    8ef4:	b580      	push	{r7, lr}
    8ef6:	b082      	sub	sp, #8
    8ef8:	af00      	add	r7, sp, #0
    8efa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	2280      	movs	r2, #128	; 0x80
    8f00:	05d2      	lsls	r2, r2, #23
    8f02:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	2200      	movs	r2, #0
    8f08:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	22ff      	movs	r2, #255	; 0xff
    8f0e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    8f10:	687b      	ldr	r3, [r7, #4]
    8f12:	2200      	movs	r2, #0
    8f14:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	2200      	movs	r2, #0
    8f1a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	2296      	movs	r2, #150	; 0x96
    8f20:	0192      	lsls	r2, r2, #6
    8f22:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	2224      	movs	r2, #36	; 0x24
    8f28:	2101      	movs	r1, #1
    8f2a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	2225      	movs	r2, #37	; 0x25
    8f30:	2101      	movs	r1, #1
    8f32:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2226      	movs	r2, #38	; 0x26
    8f38:	2100      	movs	r1, #0
    8f3a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	2227      	movs	r2, #39	; 0x27
    8f40:	2100      	movs	r1, #0
    8f42:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	2200      	movs	r2, #0
    8f48:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    8f4a:	687b      	ldr	r3, [r7, #4]
    8f4c:	2288      	movs	r2, #136	; 0x88
    8f4e:	0352      	lsls	r2, r2, #13
    8f50:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	222c      	movs	r2, #44	; 0x2c
    8f56:	2100      	movs	r1, #0
    8f58:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    8f5a:	687b      	ldr	r3, [r7, #4]
    8f5c:	222d      	movs	r2, #45	; 0x2d
    8f5e:	2100      	movs	r1, #0
    8f60:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	2200      	movs	r2, #0
    8f66:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	2200      	movs	r2, #0
    8f6c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    8f6e:	687b      	ldr	r3, [r7, #4]
    8f70:	2200      	movs	r2, #0
    8f72:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	2200      	movs	r2, #0
    8f78:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	2200      	movs	r2, #0
    8f7e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	2200      	movs	r2, #0
    8f84:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8f86:	687b      	ldr	r3, [r7, #4]
    8f88:	2200      	movs	r2, #0
    8f8a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	2200      	movs	r2, #0
    8f90:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	2200      	movs	r2, #0
    8f96:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	2200      	movs	r2, #0
    8f9c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	2213      	movs	r2, #19
    8fa2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	2200      	movs	r2, #0
    8fa8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    8faa:	46c0      	nop			; (mov r8, r8)
    8fac:	46bd      	mov	sp, r7
    8fae:	b002      	add	sp, #8
    8fb0:	bd80      	pop	{r7, pc}
	...

00008fb4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    8fb4:	b580      	push	{r7, lr}
    8fb6:	b084      	sub	sp, #16
    8fb8:	af00      	add	r7, sp, #0
    8fba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	681b      	ldr	r3, [r3, #0]
    8fc0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	681b      	ldr	r3, [r3, #0]
    8fc6:	0018      	movs	r0, r3
    8fc8:	4b09      	ldr	r3, [pc, #36]	; (8ff0 <usart_enable+0x3c>)
    8fca:	4798      	blx	r3
    8fcc:	0003      	movs	r3, r0
    8fce:	0018      	movs	r0, r3
    8fd0:	4b08      	ldr	r3, [pc, #32]	; (8ff4 <usart_enable+0x40>)
    8fd2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	0018      	movs	r0, r3
    8fd8:	4b07      	ldr	r3, [pc, #28]	; (8ff8 <usart_enable+0x44>)
    8fda:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8fdc:	68fb      	ldr	r3, [r7, #12]
    8fde:	681b      	ldr	r3, [r3, #0]
    8fe0:	2202      	movs	r2, #2
    8fe2:	431a      	orrs	r2, r3
    8fe4:	68fb      	ldr	r3, [r7, #12]
    8fe6:	601a      	str	r2, [r3, #0]
}
    8fe8:	46c0      	nop			; (mov r8, r8)
    8fea:	46bd      	mov	sp, r7
    8fec:	b004      	add	sp, #16
    8fee:	bd80      	pop	{r7, pc}
    8ff0:	0000796d 	.word	0x0000796d
    8ff4:	00008e85 	.word	0x00008e85
    8ff8:	00008ed1 	.word	0x00008ed1

00008ffc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    8ffc:	b580      	push	{r7, lr}
    8ffe:	b084      	sub	sp, #16
    9000:	af00      	add	r7, sp, #0
    9002:	60f8      	str	r0, [r7, #12]
    9004:	60b9      	str	r1, [r7, #8]
    9006:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    9008:	687a      	ldr	r2, [r7, #4]
    900a:	68b9      	ldr	r1, [r7, #8]
    900c:	68fb      	ldr	r3, [r7, #12]
    900e:	0018      	movs	r0, r3
    9010:	4b05      	ldr	r3, [pc, #20]	; (9028 <usart_serial_init+0x2c>)
    9012:	4798      	blx	r3
    9014:	1e03      	subs	r3, r0, #0
    9016:	d101      	bne.n	901c <usart_serial_init+0x20>
		return true;
    9018:	2301      	movs	r3, #1
    901a:	e000      	b.n	901e <usart_serial_init+0x22>
	}
	else {
		return false;
    901c:	2300      	movs	r3, #0
	}
}
    901e:	0018      	movs	r0, r3
    9020:	46bd      	mov	sp, r7
    9022:	b004      	add	sp, #16
    9024:	bd80      	pop	{r7, pc}
    9026:	46c0      	nop			; (mov r8, r8)
    9028:	00006bb5 	.word	0x00006bb5

0000902c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    902c:	b580      	push	{r7, lr}
    902e:	b082      	sub	sp, #8
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
    9034:	000a      	movs	r2, r1
    9036:	1cfb      	adds	r3, r7, #3
    9038:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    903a:	46c0      	nop			; (mov r8, r8)
    903c:	1cfb      	adds	r3, r7, #3
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	b29a      	uxth	r2, r3
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	0011      	movs	r1, r2
    9046:	0018      	movs	r0, r3
    9048:	4b04      	ldr	r3, [pc, #16]	; (905c <usart_serial_putchar+0x30>)
    904a:	4798      	blx	r3
    904c:	1e03      	subs	r3, r0, #0
    904e:	d1f5      	bne.n	903c <usart_serial_putchar+0x10>

	return STATUS_OK;
    9050:	2300      	movs	r3, #0
}
    9052:	0018      	movs	r0, r3
    9054:	46bd      	mov	sp, r7
    9056:	b002      	add	sp, #8
    9058:	bd80      	pop	{r7, pc}
    905a:	46c0      	nop			; (mov r8, r8)
    905c:	00006e4d 	.word	0x00006e4d

00009060 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    9060:	b580      	push	{r7, lr}
    9062:	b084      	sub	sp, #16
    9064:	af00      	add	r7, sp, #0
    9066:	6078      	str	r0, [r7, #4]
    9068:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    906a:	230e      	movs	r3, #14
    906c:	18fb      	adds	r3, r7, r3
    906e:	2200      	movs	r2, #0
    9070:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	230e      	movs	r3, #14
    9076:	18fa      	adds	r2, r7, r3
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	0011      	movs	r1, r2
    907c:	0018      	movs	r0, r3
    907e:	4b07      	ldr	r3, [pc, #28]	; (909c <usart_serial_getchar+0x3c>)
    9080:	4798      	blx	r3
    9082:	1e03      	subs	r3, r0, #0
    9084:	d1f6      	bne.n	9074 <usart_serial_getchar+0x14>

	*c = temp;
    9086:	230e      	movs	r3, #14
    9088:	18fb      	adds	r3, r7, r3
    908a:	881b      	ldrh	r3, [r3, #0]
    908c:	b2da      	uxtb	r2, r3
    908e:	683b      	ldr	r3, [r7, #0]
    9090:	701a      	strb	r2, [r3, #0]
}
    9092:	46c0      	nop			; (mov r8, r8)
    9094:	46bd      	mov	sp, r7
    9096:	b004      	add	sp, #16
    9098:	bd80      	pop	{r7, pc}
    909a:	46c0      	nop			; (mov r8, r8)
    909c:	00006eb1 	.word	0x00006eb1

000090a0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b084      	sub	sp, #16
    90a4:	af00      	add	r7, sp, #0
    90a6:	60f8      	str	r0, [r7, #12]
    90a8:	60b9      	str	r1, [r7, #8]
    90aa:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    90ac:	4b10      	ldr	r3, [pc, #64]	; (90f0 <stdio_serial_init+0x50>)
    90ae:	68fa      	ldr	r2, [r7, #12]
    90b0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    90b2:	4b10      	ldr	r3, [pc, #64]	; (90f4 <stdio_serial_init+0x54>)
    90b4:	4a10      	ldr	r2, [pc, #64]	; (90f8 <stdio_serial_init+0x58>)
    90b6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    90b8:	4b10      	ldr	r3, [pc, #64]	; (90fc <stdio_serial_init+0x5c>)
    90ba:	4a11      	ldr	r2, [pc, #68]	; (9100 <stdio_serial_init+0x60>)
    90bc:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    90be:	687a      	ldr	r2, [r7, #4]
    90c0:	68b9      	ldr	r1, [r7, #8]
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	0018      	movs	r0, r3
    90c6:	4b0f      	ldr	r3, [pc, #60]	; (9104 <stdio_serial_init+0x64>)
    90c8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    90ca:	4b0f      	ldr	r3, [pc, #60]	; (9108 <stdio_serial_init+0x68>)
    90cc:	681b      	ldr	r3, [r3, #0]
    90ce:	689b      	ldr	r3, [r3, #8]
    90d0:	2100      	movs	r1, #0
    90d2:	0018      	movs	r0, r3
    90d4:	4b0d      	ldr	r3, [pc, #52]	; (910c <stdio_serial_init+0x6c>)
    90d6:	4798      	blx	r3
	setbuf(stdin, NULL);
    90d8:	4b0b      	ldr	r3, [pc, #44]	; (9108 <stdio_serial_init+0x68>)
    90da:	681b      	ldr	r3, [r3, #0]
    90dc:	685b      	ldr	r3, [r3, #4]
    90de:	2100      	movs	r1, #0
    90e0:	0018      	movs	r0, r3
    90e2:	4b0a      	ldr	r3, [pc, #40]	; (910c <stdio_serial_init+0x6c>)
    90e4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	46bd      	mov	sp, r7
    90ea:	b004      	add	sp, #16
    90ec:	bd80      	pop	{r7, pc}
    90ee:	46c0      	nop			; (mov r8, r8)
    90f0:	20000428 	.word	0x20000428
    90f4:	20000424 	.word	0x20000424
    90f8:	0000902d 	.word	0x0000902d
    90fc:	20000420 	.word	0x20000420
    9100:	00009061 	.word	0x00009061
    9104:	00008ffd 	.word	0x00008ffd
    9108:	20000124 	.word	0x20000124
    910c:	0000b005 	.word	0x0000b005

00009110 <serial_console_init>:

/**
 *  Configure console.
 */
void serial_console_init(void)
{
    9110:	b580      	push	{r7, lr}
    9112:	b090      	sub	sp, #64	; 0x40
    9114:	af00      	add	r7, sp, #0
 	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    9116:	003b      	movs	r3, r7
    9118:	0018      	movs	r0, r3
    911a:	4b13      	ldr	r3, [pc, #76]	; (9168 <serial_console_init+0x58>)
    911c:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    911e:	003b      	movs	r3, r7
    9120:	2280      	movs	r2, #128	; 0x80
    9122:	0352      	lsls	r2, r2, #13
    9124:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    9126:	003b      	movs	r3, r7
    9128:	4a10      	ldr	r2, [pc, #64]	; (916c <serial_console_init+0x5c>)
    912a:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    912c:	003b      	movs	r3, r7
    912e:	4a10      	ldr	r2, [pc, #64]	; (9170 <serial_console_init+0x60>)
    9130:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    9132:	003b      	movs	r3, r7
    9134:	2201      	movs	r2, #1
    9136:	4252      	negs	r2, r2
    9138:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    913a:	003b      	movs	r3, r7
    913c:	2201      	movs	r2, #1
    913e:	4252      	negs	r2, r2
    9140:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    9142:	003b      	movs	r3, r7
    9144:	22e1      	movs	r2, #225	; 0xe1
    9146:	0252      	lsls	r2, r2, #9
    9148:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
    914a:	003a      	movs	r2, r7
    914c:	2384      	movs	r3, #132	; 0x84
    914e:	05d9      	lsls	r1, r3, #23
    9150:	4b08      	ldr	r3, [pc, #32]	; (9174 <serial_console_init+0x64>)
    9152:	0018      	movs	r0, r3
    9154:	4b08      	ldr	r3, [pc, #32]	; (9178 <serial_console_init+0x68>)
    9156:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    9158:	4b06      	ldr	r3, [pc, #24]	; (9174 <serial_console_init+0x64>)
    915a:	0018      	movs	r0, r3
    915c:	4b07      	ldr	r3, [pc, #28]	; (917c <serial_console_init+0x6c>)
    915e:	4798      	blx	r3
}
    9160:	46c0      	nop			; (mov r8, r8)
    9162:	46bd      	mov	sp, r7
    9164:	b010      	add	sp, #64	; 0x40
    9166:	bd80      	pop	{r7, pc}
    9168:	00008ef5 	.word	0x00008ef5
    916c:	00040003 	.word	0x00040003
    9170:	00050003 	.word	0x00050003
    9174:	20000330 	.word	0x20000330
    9178:	000090a1 	.word	0x000090a1
    917c:	00008fb5 	.word	0x00008fb5

00009180 <main>:

int main (void)
{
    9180:	b590      	push	{r4, r7, lr}
    9182:	b083      	sub	sp, #12
    9184:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_SUCCESS;
    9186:	1dfb      	adds	r3, r7, #7
    9188:	2200      	movs	r2, #0
    918a:	701a      	strb	r2, [r3, #0]
			
	/* system clock initialization */
	system_init();
    918c:	4b31      	ldr	r3, [pc, #196]	; (9254 <main+0xd4>)
    918e:	4798      	blx	r3

	/* Initialize serial console for debugging */
	serial_console_init();
    9190:	4b31      	ldr	r3, [pc, #196]	; (9258 <main+0xd8>)
    9192:	4798      	blx	r3

	/* delay routine initialization */
	delay_init();
    9194:	4b31      	ldr	r3, [pc, #196]	; (925c <main+0xdc>)
    9196:	4798      	blx	r3
	
	printf("Provision ECC608 crypto device\r\n");
    9198:	4b31      	ldr	r3, [pc, #196]	; (9260 <main+0xe0>)
    919a:	0018      	movs	r0, r3
    919c:	4b31      	ldr	r3, [pc, #196]	; (9264 <main+0xe4>)
    919e:	4798      	blx	r3
	printf("cpu_freq=%d\r\n",(int)system_cpu_clock_get_hz());
    91a0:	4b31      	ldr	r3, [pc, #196]	; (9268 <main+0xe8>)
    91a2:	4798      	blx	r3
    91a4:	0003      	movs	r3, r0
    91a6:	001a      	movs	r2, r3
    91a8:	4b30      	ldr	r3, [pc, #192]	; (926c <main+0xec>)
    91aa:	0011      	movs	r1, r2
    91ac:	0018      	movs	r0, r3
    91ae:	4b30      	ldr	r3, [pc, #192]	; (9270 <main+0xf0>)
    91b0:	4798      	blx	r3
    // Do the device-connected checks
    status = detect_crypto_device();
    91b2:	1dfc      	adds	r4, r7, #7
    91b4:	4b2f      	ldr	r3, [pc, #188]	; (9274 <main+0xf4>)
    91b6:	4798      	blx	r3
    91b8:	0003      	movs	r3, r0
    91ba:	7023      	strb	r3, [r4, #0]
	printDevDetectStatus(status);
    91bc:	1dfb      	adds	r3, r7, #7
    91be:	781b      	ldrb	r3, [r3, #0]
    91c0:	0018      	movs	r0, r3
    91c2:	4b2d      	ldr	r3, [pc, #180]	; (9278 <main+0xf8>)
    91c4:	4798      	blx	r3
	if (status != ATCA_SUCCESS)
    91c6:	1dfb      	adds	r3, r7, #7
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d004      	beq.n	91d8 <main+0x58>
	{
		status = preconfigure_crypto_device();
    91ce:	1dfc      	adds	r4, r7, #7
    91d0:	4b2a      	ldr	r3, [pc, #168]	; (927c <main+0xfc>)
    91d2:	4798      	blx	r3
    91d4:	0003      	movs	r3, r0
    91d6:	7023      	strb	r3, [r4, #0]
	}
	if (status == ATCA_SUCCESS)
    91d8:	1dfb      	adds	r3, r7, #7
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	2b00      	cmp	r3, #0
    91de:	d134      	bne.n	924a <main+0xca>
		 
				Enable the code below, it's initializes the library and query basic info.
				build and check that your device is alive and well configured.
		*/
		#if 1
			status = cryptoauthlib_init();
    91e0:	1dfc      	adds	r4, r7, #7
    91e2:	4b27      	ldr	r3, [pc, #156]	; (9280 <main+0x100>)
    91e4:	4798      	blx	r3
    91e6:	0003      	movs	r3, r0
    91e8:	7023      	strb	r3, [r4, #0]
			if (status == ATCA_SUCCESS)
    91ea:	1dfb      	adds	r3, r7, #7
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	2b00      	cmp	r3, #0
    91f0:	d103      	bne.n	91fa <main+0x7a>
			{
				printf("The ATECC508A device is configured and locked.\r\n");
    91f2:	4b24      	ldr	r3, [pc, #144]	; (9284 <main+0x104>)
    91f4:	0018      	movs	r0, r3
    91f6:	4b1b      	ldr	r3, [pc, #108]	; (9264 <main+0xe4>)
    91f8:	4798      	blx	r3
				3. When the slot is locked, only then you can't change the slot private key.
				4. Enable the code below and the Public Key will be on the terminal. 
				5. The private key will remain secret.
			 */
		#if 1
			status = genKeyPair();
    91fa:	1dfc      	adds	r4, r7, #7
    91fc:	4b22      	ldr	r3, [pc, #136]	; (9288 <main+0x108>)
    91fe:	4798      	blx	r3
    9200:	0003      	movs	r3, r0
    9202:	7023      	strb	r3, [r4, #0]
			if (status != ATCA_SUCCESS)
    9204:	1dfb      	adds	r3, r7, #7
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	2b00      	cmp	r3, #0
    920a:	d003      	beq.n	9214 <main+0x94>
			{
				printf("Failed to get the ECC pub Key.\r\n");
    920c:	4b1f      	ldr	r3, [pc, #124]	; (928c <main+0x10c>)
    920e:	0018      	movs	r0, r3
    9210:	4b14      	ldr	r3, [pc, #80]	; (9264 <main+0xe4>)
    9212:	4798      	blx	r3
					1. Use the key pair from step 2 to generate a Certificate signing request.
					2. The public key and basic company info is added to the CSR and then signed by the private key in slot 0
					3. Enable the code below, The generated CSR (in DER format) will be printed on the console.
			*/
		#if 1
			status = genDeviceCSR();
    9214:	1dfc      	adds	r4, r7, #7
    9216:	4b1e      	ldr	r3, [pc, #120]	; (9290 <main+0x110>)
    9218:	4798      	blx	r3
    921a:	0003      	movs	r3, r0
    921c:	7023      	strb	r3, [r4, #0]
			if (status != ATCA_SUCCESS)
    921e:	1dfb      	adds	r3, r7, #7
    9220:	781b      	ldrb	r3, [r3, #0]
    9222:	2b00      	cmp	r3, #0
    9224:	d003      	beq.n	922e <main+0xae>
			{
				printf("Failed to get the ECC CSR.\r\n");
    9226:	4b1b      	ldr	r3, [pc, #108]	; (9294 <main+0x114>)
    9228:	0018      	movs	r0, r3
    922a:	4b0e      	ldr	r3, [pc, #56]	; (9264 <main+0xe4>)
    922c:	4798      	blx	r3
					2. The public key and basic company info is added to the CSR and then signed by the private key in slot 0
					3. Enable the code below, The generated CSR (in DER format) will be printed on the console.
			*/
		#if 1
			/* Initialize BSP and Bus Interface */
			if(0 !=nm_bsp_init())
    922e:	4b1a      	ldr	r3, [pc, #104]	; (9298 <main+0x118>)
    9230:	4798      	blx	r3
    9232:	1e03      	subs	r3, r0, #0
    9234:	d004      	beq.n	9240 <main+0xc0>
			{
				printf("nm_bsp_init.\r\n");
    9236:	4b19      	ldr	r3, [pc, #100]	; (929c <main+0x11c>)
    9238:	0018      	movs	r0, r3
    923a:	4b0a      	ldr	r3, [pc, #40]	; (9264 <main+0xe4>)
    923c:	4798      	blx	r3
				while(1);
    923e:	e7fe      	b.n	923e <main+0xbe>
			}
	
				printf("WINC is in download mode, now go and run the script.\r\n");
    9240:	4b17      	ldr	r3, [pc, #92]	; (92a0 <main+0x120>)
    9242:	0018      	movs	r0, r3
    9244:	4b07      	ldr	r3, [pc, #28]	; (9264 <main+0xe4>)
    9246:	4798      	blx	r3
	
			while(1);
    9248:	e7fe      	b.n	9248 <main+0xc8>
    924a:	2300      	movs	r3, #0
		#endif
	}

}
    924c:	0018      	movs	r0, r3
    924e:	46bd      	mov	sp, r7
    9250:	b003      	add	sp, #12
    9252:	bd90      	pop	{r4, r7, pc}
    9254:	00008d8d 	.word	0x00008d8d
    9258:	00009111 	.word	0x00009111
    925c:	00000ed1 	.word	0x00000ed1
    9260:	0000c66c 	.word	0x0000c66c
    9264:	0000afcd 	.word	0x0000afcd
    9268:	00008e55 	.word	0x00008e55
    926c:	0000c68c 	.word	0x0000c68c
    9270:	0000aed9 	.word	0x0000aed9
    9274:	000007a1 	.word	0x000007a1
    9278:	000008cd 	.word	0x000008cd
    927c:	00000975 	.word	0x00000975
    9280:	00000c55 	.word	0x00000c55
    9284:	0000c69c 	.word	0x0000c69c
    9288:	00000d11 	.word	0x00000d11
    928c:	0000c6cc 	.word	0x0000c6cc
    9290:	00000db1 	.word	0x00000db1
    9294:	0000c6ec 	.word	0x0000c6ec
    9298:	0000064d 	.word	0x0000064d
    929c:	0000c708 	.word	0x0000c708
    92a0:	0000c718 	.word	0x0000c718

000092a4 <__udivsi3>:
    92a4:	2200      	movs	r2, #0
    92a6:	0843      	lsrs	r3, r0, #1
    92a8:	428b      	cmp	r3, r1
    92aa:	d374      	bcc.n	9396 <__udivsi3+0xf2>
    92ac:	0903      	lsrs	r3, r0, #4
    92ae:	428b      	cmp	r3, r1
    92b0:	d35f      	bcc.n	9372 <__udivsi3+0xce>
    92b2:	0a03      	lsrs	r3, r0, #8
    92b4:	428b      	cmp	r3, r1
    92b6:	d344      	bcc.n	9342 <__udivsi3+0x9e>
    92b8:	0b03      	lsrs	r3, r0, #12
    92ba:	428b      	cmp	r3, r1
    92bc:	d328      	bcc.n	9310 <__udivsi3+0x6c>
    92be:	0c03      	lsrs	r3, r0, #16
    92c0:	428b      	cmp	r3, r1
    92c2:	d30d      	bcc.n	92e0 <__udivsi3+0x3c>
    92c4:	22ff      	movs	r2, #255	; 0xff
    92c6:	0209      	lsls	r1, r1, #8
    92c8:	ba12      	rev	r2, r2
    92ca:	0c03      	lsrs	r3, r0, #16
    92cc:	428b      	cmp	r3, r1
    92ce:	d302      	bcc.n	92d6 <__udivsi3+0x32>
    92d0:	1212      	asrs	r2, r2, #8
    92d2:	0209      	lsls	r1, r1, #8
    92d4:	d065      	beq.n	93a2 <__udivsi3+0xfe>
    92d6:	0b03      	lsrs	r3, r0, #12
    92d8:	428b      	cmp	r3, r1
    92da:	d319      	bcc.n	9310 <__udivsi3+0x6c>
    92dc:	e000      	b.n	92e0 <__udivsi3+0x3c>
    92de:	0a09      	lsrs	r1, r1, #8
    92e0:	0bc3      	lsrs	r3, r0, #15
    92e2:	428b      	cmp	r3, r1
    92e4:	d301      	bcc.n	92ea <__udivsi3+0x46>
    92e6:	03cb      	lsls	r3, r1, #15
    92e8:	1ac0      	subs	r0, r0, r3
    92ea:	4152      	adcs	r2, r2
    92ec:	0b83      	lsrs	r3, r0, #14
    92ee:	428b      	cmp	r3, r1
    92f0:	d301      	bcc.n	92f6 <__udivsi3+0x52>
    92f2:	038b      	lsls	r3, r1, #14
    92f4:	1ac0      	subs	r0, r0, r3
    92f6:	4152      	adcs	r2, r2
    92f8:	0b43      	lsrs	r3, r0, #13
    92fa:	428b      	cmp	r3, r1
    92fc:	d301      	bcc.n	9302 <__udivsi3+0x5e>
    92fe:	034b      	lsls	r3, r1, #13
    9300:	1ac0      	subs	r0, r0, r3
    9302:	4152      	adcs	r2, r2
    9304:	0b03      	lsrs	r3, r0, #12
    9306:	428b      	cmp	r3, r1
    9308:	d301      	bcc.n	930e <__udivsi3+0x6a>
    930a:	030b      	lsls	r3, r1, #12
    930c:	1ac0      	subs	r0, r0, r3
    930e:	4152      	adcs	r2, r2
    9310:	0ac3      	lsrs	r3, r0, #11
    9312:	428b      	cmp	r3, r1
    9314:	d301      	bcc.n	931a <__udivsi3+0x76>
    9316:	02cb      	lsls	r3, r1, #11
    9318:	1ac0      	subs	r0, r0, r3
    931a:	4152      	adcs	r2, r2
    931c:	0a83      	lsrs	r3, r0, #10
    931e:	428b      	cmp	r3, r1
    9320:	d301      	bcc.n	9326 <__udivsi3+0x82>
    9322:	028b      	lsls	r3, r1, #10
    9324:	1ac0      	subs	r0, r0, r3
    9326:	4152      	adcs	r2, r2
    9328:	0a43      	lsrs	r3, r0, #9
    932a:	428b      	cmp	r3, r1
    932c:	d301      	bcc.n	9332 <__udivsi3+0x8e>
    932e:	024b      	lsls	r3, r1, #9
    9330:	1ac0      	subs	r0, r0, r3
    9332:	4152      	adcs	r2, r2
    9334:	0a03      	lsrs	r3, r0, #8
    9336:	428b      	cmp	r3, r1
    9338:	d301      	bcc.n	933e <__udivsi3+0x9a>
    933a:	020b      	lsls	r3, r1, #8
    933c:	1ac0      	subs	r0, r0, r3
    933e:	4152      	adcs	r2, r2
    9340:	d2cd      	bcs.n	92de <__udivsi3+0x3a>
    9342:	09c3      	lsrs	r3, r0, #7
    9344:	428b      	cmp	r3, r1
    9346:	d301      	bcc.n	934c <__udivsi3+0xa8>
    9348:	01cb      	lsls	r3, r1, #7
    934a:	1ac0      	subs	r0, r0, r3
    934c:	4152      	adcs	r2, r2
    934e:	0983      	lsrs	r3, r0, #6
    9350:	428b      	cmp	r3, r1
    9352:	d301      	bcc.n	9358 <__udivsi3+0xb4>
    9354:	018b      	lsls	r3, r1, #6
    9356:	1ac0      	subs	r0, r0, r3
    9358:	4152      	adcs	r2, r2
    935a:	0943      	lsrs	r3, r0, #5
    935c:	428b      	cmp	r3, r1
    935e:	d301      	bcc.n	9364 <__udivsi3+0xc0>
    9360:	014b      	lsls	r3, r1, #5
    9362:	1ac0      	subs	r0, r0, r3
    9364:	4152      	adcs	r2, r2
    9366:	0903      	lsrs	r3, r0, #4
    9368:	428b      	cmp	r3, r1
    936a:	d301      	bcc.n	9370 <__udivsi3+0xcc>
    936c:	010b      	lsls	r3, r1, #4
    936e:	1ac0      	subs	r0, r0, r3
    9370:	4152      	adcs	r2, r2
    9372:	08c3      	lsrs	r3, r0, #3
    9374:	428b      	cmp	r3, r1
    9376:	d301      	bcc.n	937c <__udivsi3+0xd8>
    9378:	00cb      	lsls	r3, r1, #3
    937a:	1ac0      	subs	r0, r0, r3
    937c:	4152      	adcs	r2, r2
    937e:	0883      	lsrs	r3, r0, #2
    9380:	428b      	cmp	r3, r1
    9382:	d301      	bcc.n	9388 <__udivsi3+0xe4>
    9384:	008b      	lsls	r3, r1, #2
    9386:	1ac0      	subs	r0, r0, r3
    9388:	4152      	adcs	r2, r2
    938a:	0843      	lsrs	r3, r0, #1
    938c:	428b      	cmp	r3, r1
    938e:	d301      	bcc.n	9394 <__udivsi3+0xf0>
    9390:	004b      	lsls	r3, r1, #1
    9392:	1ac0      	subs	r0, r0, r3
    9394:	4152      	adcs	r2, r2
    9396:	1a41      	subs	r1, r0, r1
    9398:	d200      	bcs.n	939c <__udivsi3+0xf8>
    939a:	4601      	mov	r1, r0
    939c:	4152      	adcs	r2, r2
    939e:	4610      	mov	r0, r2
    93a0:	4770      	bx	lr
    93a2:	e7ff      	b.n	93a4 <__udivsi3+0x100>
    93a4:	b501      	push	{r0, lr}
    93a6:	2000      	movs	r0, #0
    93a8:	f000 f806 	bl	93b8 <__aeabi_idiv0>
    93ac:	bd02      	pop	{r1, pc}
    93ae:	46c0      	nop			; (mov r8, r8)

000093b0 <__aeabi_uidivmod>:
    93b0:	2900      	cmp	r1, #0
    93b2:	d0f7      	beq.n	93a4 <__udivsi3+0x100>
    93b4:	e776      	b.n	92a4 <__udivsi3>
    93b6:	4770      	bx	lr

000093b8 <__aeabi_idiv0>:
    93b8:	4770      	bx	lr
    93ba:	46c0      	nop			; (mov r8, r8)

000093bc <__aeabi_lmul>:
    93bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93be:	46ce      	mov	lr, r9
    93c0:	4647      	mov	r7, r8
    93c2:	0415      	lsls	r5, r2, #16
    93c4:	0c2d      	lsrs	r5, r5, #16
    93c6:	002e      	movs	r6, r5
    93c8:	b580      	push	{r7, lr}
    93ca:	0407      	lsls	r7, r0, #16
    93cc:	0c14      	lsrs	r4, r2, #16
    93ce:	0c3f      	lsrs	r7, r7, #16
    93d0:	4699      	mov	r9, r3
    93d2:	0c03      	lsrs	r3, r0, #16
    93d4:	437e      	muls	r6, r7
    93d6:	435d      	muls	r5, r3
    93d8:	4367      	muls	r7, r4
    93da:	4363      	muls	r3, r4
    93dc:	197f      	adds	r7, r7, r5
    93de:	0c34      	lsrs	r4, r6, #16
    93e0:	19e4      	adds	r4, r4, r7
    93e2:	469c      	mov	ip, r3
    93e4:	42a5      	cmp	r5, r4
    93e6:	d903      	bls.n	93f0 <__aeabi_lmul+0x34>
    93e8:	2380      	movs	r3, #128	; 0x80
    93ea:	025b      	lsls	r3, r3, #9
    93ec:	4698      	mov	r8, r3
    93ee:	44c4      	add	ip, r8
    93f0:	464b      	mov	r3, r9
    93f2:	4351      	muls	r1, r2
    93f4:	4343      	muls	r3, r0
    93f6:	0436      	lsls	r6, r6, #16
    93f8:	0c36      	lsrs	r6, r6, #16
    93fa:	0c25      	lsrs	r5, r4, #16
    93fc:	0424      	lsls	r4, r4, #16
    93fe:	4465      	add	r5, ip
    9400:	19a4      	adds	r4, r4, r6
    9402:	1859      	adds	r1, r3, r1
    9404:	1949      	adds	r1, r1, r5
    9406:	0020      	movs	r0, r4
    9408:	bc0c      	pop	{r2, r3}
    940a:	4690      	mov	r8, r2
    940c:	4699      	mov	r9, r3
    940e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009410 <__aeabi_dadd>:
    9410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9412:	4645      	mov	r5, r8
    9414:	46de      	mov	lr, fp
    9416:	4657      	mov	r7, sl
    9418:	464e      	mov	r6, r9
    941a:	030c      	lsls	r4, r1, #12
    941c:	b5e0      	push	{r5, r6, r7, lr}
    941e:	004e      	lsls	r6, r1, #1
    9420:	0fc9      	lsrs	r1, r1, #31
    9422:	4688      	mov	r8, r1
    9424:	000d      	movs	r5, r1
    9426:	0a61      	lsrs	r1, r4, #9
    9428:	0f44      	lsrs	r4, r0, #29
    942a:	430c      	orrs	r4, r1
    942c:	00c7      	lsls	r7, r0, #3
    942e:	0319      	lsls	r1, r3, #12
    9430:	0058      	lsls	r0, r3, #1
    9432:	0fdb      	lsrs	r3, r3, #31
    9434:	469b      	mov	fp, r3
    9436:	0a4b      	lsrs	r3, r1, #9
    9438:	0f51      	lsrs	r1, r2, #29
    943a:	430b      	orrs	r3, r1
    943c:	0d76      	lsrs	r6, r6, #21
    943e:	0d40      	lsrs	r0, r0, #21
    9440:	0019      	movs	r1, r3
    9442:	00d2      	lsls	r2, r2, #3
    9444:	45d8      	cmp	r8, fp
    9446:	d100      	bne.n	944a <__aeabi_dadd+0x3a>
    9448:	e0ae      	b.n	95a8 <__aeabi_dadd+0x198>
    944a:	1a35      	subs	r5, r6, r0
    944c:	2d00      	cmp	r5, #0
    944e:	dc00      	bgt.n	9452 <__aeabi_dadd+0x42>
    9450:	e0f6      	b.n	9640 <__aeabi_dadd+0x230>
    9452:	2800      	cmp	r0, #0
    9454:	d10f      	bne.n	9476 <__aeabi_dadd+0x66>
    9456:	4313      	orrs	r3, r2
    9458:	d100      	bne.n	945c <__aeabi_dadd+0x4c>
    945a:	e0db      	b.n	9614 <__aeabi_dadd+0x204>
    945c:	1e6b      	subs	r3, r5, #1
    945e:	2b00      	cmp	r3, #0
    9460:	d000      	beq.n	9464 <__aeabi_dadd+0x54>
    9462:	e137      	b.n	96d4 <__aeabi_dadd+0x2c4>
    9464:	1aba      	subs	r2, r7, r2
    9466:	4297      	cmp	r7, r2
    9468:	41bf      	sbcs	r7, r7
    946a:	1a64      	subs	r4, r4, r1
    946c:	427f      	negs	r7, r7
    946e:	1be4      	subs	r4, r4, r7
    9470:	2601      	movs	r6, #1
    9472:	0017      	movs	r7, r2
    9474:	e024      	b.n	94c0 <__aeabi_dadd+0xb0>
    9476:	4bc6      	ldr	r3, [pc, #792]	; (9790 <__aeabi_dadd+0x380>)
    9478:	429e      	cmp	r6, r3
    947a:	d04d      	beq.n	9518 <__aeabi_dadd+0x108>
    947c:	2380      	movs	r3, #128	; 0x80
    947e:	041b      	lsls	r3, r3, #16
    9480:	4319      	orrs	r1, r3
    9482:	2d38      	cmp	r5, #56	; 0x38
    9484:	dd00      	ble.n	9488 <__aeabi_dadd+0x78>
    9486:	e107      	b.n	9698 <__aeabi_dadd+0x288>
    9488:	2d1f      	cmp	r5, #31
    948a:	dd00      	ble.n	948e <__aeabi_dadd+0x7e>
    948c:	e138      	b.n	9700 <__aeabi_dadd+0x2f0>
    948e:	2020      	movs	r0, #32
    9490:	1b43      	subs	r3, r0, r5
    9492:	469a      	mov	sl, r3
    9494:	000b      	movs	r3, r1
    9496:	4650      	mov	r0, sl
    9498:	4083      	lsls	r3, r0
    949a:	4699      	mov	r9, r3
    949c:	0013      	movs	r3, r2
    949e:	4648      	mov	r0, r9
    94a0:	40eb      	lsrs	r3, r5
    94a2:	4318      	orrs	r0, r3
    94a4:	0003      	movs	r3, r0
    94a6:	4650      	mov	r0, sl
    94a8:	4082      	lsls	r2, r0
    94aa:	1e50      	subs	r0, r2, #1
    94ac:	4182      	sbcs	r2, r0
    94ae:	40e9      	lsrs	r1, r5
    94b0:	431a      	orrs	r2, r3
    94b2:	1aba      	subs	r2, r7, r2
    94b4:	1a61      	subs	r1, r4, r1
    94b6:	4297      	cmp	r7, r2
    94b8:	41a4      	sbcs	r4, r4
    94ba:	0017      	movs	r7, r2
    94bc:	4264      	negs	r4, r4
    94be:	1b0c      	subs	r4, r1, r4
    94c0:	0223      	lsls	r3, r4, #8
    94c2:	d562      	bpl.n	958a <__aeabi_dadd+0x17a>
    94c4:	0264      	lsls	r4, r4, #9
    94c6:	0a65      	lsrs	r5, r4, #9
    94c8:	2d00      	cmp	r5, #0
    94ca:	d100      	bne.n	94ce <__aeabi_dadd+0xbe>
    94cc:	e0df      	b.n	968e <__aeabi_dadd+0x27e>
    94ce:	0028      	movs	r0, r5
    94d0:	f001 fbe4 	bl	ac9c <__clzsi2>
    94d4:	0003      	movs	r3, r0
    94d6:	3b08      	subs	r3, #8
    94d8:	2b1f      	cmp	r3, #31
    94da:	dd00      	ble.n	94de <__aeabi_dadd+0xce>
    94dc:	e0d2      	b.n	9684 <__aeabi_dadd+0x274>
    94de:	2220      	movs	r2, #32
    94e0:	003c      	movs	r4, r7
    94e2:	1ad2      	subs	r2, r2, r3
    94e4:	409d      	lsls	r5, r3
    94e6:	40d4      	lsrs	r4, r2
    94e8:	409f      	lsls	r7, r3
    94ea:	4325      	orrs	r5, r4
    94ec:	429e      	cmp	r6, r3
    94ee:	dd00      	ble.n	94f2 <__aeabi_dadd+0xe2>
    94f0:	e0c4      	b.n	967c <__aeabi_dadd+0x26c>
    94f2:	1b9e      	subs	r6, r3, r6
    94f4:	1c73      	adds	r3, r6, #1
    94f6:	2b1f      	cmp	r3, #31
    94f8:	dd00      	ble.n	94fc <__aeabi_dadd+0xec>
    94fa:	e0f1      	b.n	96e0 <__aeabi_dadd+0x2d0>
    94fc:	2220      	movs	r2, #32
    94fe:	0038      	movs	r0, r7
    9500:	0029      	movs	r1, r5
    9502:	1ad2      	subs	r2, r2, r3
    9504:	40d8      	lsrs	r0, r3
    9506:	4091      	lsls	r1, r2
    9508:	4097      	lsls	r7, r2
    950a:	002c      	movs	r4, r5
    950c:	4301      	orrs	r1, r0
    950e:	1e78      	subs	r0, r7, #1
    9510:	4187      	sbcs	r7, r0
    9512:	40dc      	lsrs	r4, r3
    9514:	2600      	movs	r6, #0
    9516:	430f      	orrs	r7, r1
    9518:	077b      	lsls	r3, r7, #29
    951a:	d009      	beq.n	9530 <__aeabi_dadd+0x120>
    951c:	230f      	movs	r3, #15
    951e:	403b      	ands	r3, r7
    9520:	2b04      	cmp	r3, #4
    9522:	d005      	beq.n	9530 <__aeabi_dadd+0x120>
    9524:	1d3b      	adds	r3, r7, #4
    9526:	42bb      	cmp	r3, r7
    9528:	41bf      	sbcs	r7, r7
    952a:	427f      	negs	r7, r7
    952c:	19e4      	adds	r4, r4, r7
    952e:	001f      	movs	r7, r3
    9530:	0223      	lsls	r3, r4, #8
    9532:	d52c      	bpl.n	958e <__aeabi_dadd+0x17e>
    9534:	4b96      	ldr	r3, [pc, #600]	; (9790 <__aeabi_dadd+0x380>)
    9536:	3601      	adds	r6, #1
    9538:	429e      	cmp	r6, r3
    953a:	d100      	bne.n	953e <__aeabi_dadd+0x12e>
    953c:	e09a      	b.n	9674 <__aeabi_dadd+0x264>
    953e:	4645      	mov	r5, r8
    9540:	4b94      	ldr	r3, [pc, #592]	; (9794 <__aeabi_dadd+0x384>)
    9542:	08ff      	lsrs	r7, r7, #3
    9544:	401c      	ands	r4, r3
    9546:	0760      	lsls	r0, r4, #29
    9548:	0576      	lsls	r6, r6, #21
    954a:	0264      	lsls	r4, r4, #9
    954c:	4307      	orrs	r7, r0
    954e:	0b24      	lsrs	r4, r4, #12
    9550:	0d76      	lsrs	r6, r6, #21
    9552:	2100      	movs	r1, #0
    9554:	0324      	lsls	r4, r4, #12
    9556:	0b23      	lsrs	r3, r4, #12
    9558:	0d0c      	lsrs	r4, r1, #20
    955a:	4a8f      	ldr	r2, [pc, #572]	; (9798 <__aeabi_dadd+0x388>)
    955c:	0524      	lsls	r4, r4, #20
    955e:	431c      	orrs	r4, r3
    9560:	4014      	ands	r4, r2
    9562:	0533      	lsls	r3, r6, #20
    9564:	4323      	orrs	r3, r4
    9566:	005b      	lsls	r3, r3, #1
    9568:	07ed      	lsls	r5, r5, #31
    956a:	085b      	lsrs	r3, r3, #1
    956c:	432b      	orrs	r3, r5
    956e:	0038      	movs	r0, r7
    9570:	0019      	movs	r1, r3
    9572:	bc3c      	pop	{r2, r3, r4, r5}
    9574:	4690      	mov	r8, r2
    9576:	4699      	mov	r9, r3
    9578:	46a2      	mov	sl, r4
    957a:	46ab      	mov	fp, r5
    957c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    957e:	4664      	mov	r4, ip
    9580:	4304      	orrs	r4, r0
    9582:	d100      	bne.n	9586 <__aeabi_dadd+0x176>
    9584:	e211      	b.n	99aa <__aeabi_dadd+0x59a>
    9586:	0004      	movs	r4, r0
    9588:	4667      	mov	r7, ip
    958a:	077b      	lsls	r3, r7, #29
    958c:	d1c6      	bne.n	951c <__aeabi_dadd+0x10c>
    958e:	4645      	mov	r5, r8
    9590:	0760      	lsls	r0, r4, #29
    9592:	08ff      	lsrs	r7, r7, #3
    9594:	4307      	orrs	r7, r0
    9596:	08e4      	lsrs	r4, r4, #3
    9598:	4b7d      	ldr	r3, [pc, #500]	; (9790 <__aeabi_dadd+0x380>)
    959a:	429e      	cmp	r6, r3
    959c:	d030      	beq.n	9600 <__aeabi_dadd+0x1f0>
    959e:	0324      	lsls	r4, r4, #12
    95a0:	0576      	lsls	r6, r6, #21
    95a2:	0b24      	lsrs	r4, r4, #12
    95a4:	0d76      	lsrs	r6, r6, #21
    95a6:	e7d4      	b.n	9552 <__aeabi_dadd+0x142>
    95a8:	1a33      	subs	r3, r6, r0
    95aa:	469a      	mov	sl, r3
    95ac:	2b00      	cmp	r3, #0
    95ae:	dd78      	ble.n	96a2 <__aeabi_dadd+0x292>
    95b0:	2800      	cmp	r0, #0
    95b2:	d031      	beq.n	9618 <__aeabi_dadd+0x208>
    95b4:	4876      	ldr	r0, [pc, #472]	; (9790 <__aeabi_dadd+0x380>)
    95b6:	4286      	cmp	r6, r0
    95b8:	d0ae      	beq.n	9518 <__aeabi_dadd+0x108>
    95ba:	2080      	movs	r0, #128	; 0x80
    95bc:	0400      	lsls	r0, r0, #16
    95be:	4301      	orrs	r1, r0
    95c0:	4653      	mov	r3, sl
    95c2:	2b38      	cmp	r3, #56	; 0x38
    95c4:	dc00      	bgt.n	95c8 <__aeabi_dadd+0x1b8>
    95c6:	e0e9      	b.n	979c <__aeabi_dadd+0x38c>
    95c8:	430a      	orrs	r2, r1
    95ca:	1e51      	subs	r1, r2, #1
    95cc:	418a      	sbcs	r2, r1
    95ce:	2100      	movs	r1, #0
    95d0:	19d2      	adds	r2, r2, r7
    95d2:	42ba      	cmp	r2, r7
    95d4:	41bf      	sbcs	r7, r7
    95d6:	1909      	adds	r1, r1, r4
    95d8:	427c      	negs	r4, r7
    95da:	0017      	movs	r7, r2
    95dc:	190c      	adds	r4, r1, r4
    95de:	0223      	lsls	r3, r4, #8
    95e0:	d5d3      	bpl.n	958a <__aeabi_dadd+0x17a>
    95e2:	4b6b      	ldr	r3, [pc, #428]	; (9790 <__aeabi_dadd+0x380>)
    95e4:	3601      	adds	r6, #1
    95e6:	429e      	cmp	r6, r3
    95e8:	d100      	bne.n	95ec <__aeabi_dadd+0x1dc>
    95ea:	e13a      	b.n	9862 <__aeabi_dadd+0x452>
    95ec:	2001      	movs	r0, #1
    95ee:	4b69      	ldr	r3, [pc, #420]	; (9794 <__aeabi_dadd+0x384>)
    95f0:	401c      	ands	r4, r3
    95f2:	087b      	lsrs	r3, r7, #1
    95f4:	4007      	ands	r7, r0
    95f6:	431f      	orrs	r7, r3
    95f8:	07e0      	lsls	r0, r4, #31
    95fa:	4307      	orrs	r7, r0
    95fc:	0864      	lsrs	r4, r4, #1
    95fe:	e78b      	b.n	9518 <__aeabi_dadd+0x108>
    9600:	0023      	movs	r3, r4
    9602:	433b      	orrs	r3, r7
    9604:	d100      	bne.n	9608 <__aeabi_dadd+0x1f8>
    9606:	e1cb      	b.n	99a0 <__aeabi_dadd+0x590>
    9608:	2280      	movs	r2, #128	; 0x80
    960a:	0312      	lsls	r2, r2, #12
    960c:	4314      	orrs	r4, r2
    960e:	0324      	lsls	r4, r4, #12
    9610:	0b24      	lsrs	r4, r4, #12
    9612:	e79e      	b.n	9552 <__aeabi_dadd+0x142>
    9614:	002e      	movs	r6, r5
    9616:	e77f      	b.n	9518 <__aeabi_dadd+0x108>
    9618:	0008      	movs	r0, r1
    961a:	4310      	orrs	r0, r2
    961c:	d100      	bne.n	9620 <__aeabi_dadd+0x210>
    961e:	e0b4      	b.n	978a <__aeabi_dadd+0x37a>
    9620:	1e58      	subs	r0, r3, #1
    9622:	2800      	cmp	r0, #0
    9624:	d000      	beq.n	9628 <__aeabi_dadd+0x218>
    9626:	e0de      	b.n	97e6 <__aeabi_dadd+0x3d6>
    9628:	18ba      	adds	r2, r7, r2
    962a:	42ba      	cmp	r2, r7
    962c:	419b      	sbcs	r3, r3
    962e:	1864      	adds	r4, r4, r1
    9630:	425b      	negs	r3, r3
    9632:	18e4      	adds	r4, r4, r3
    9634:	0017      	movs	r7, r2
    9636:	2601      	movs	r6, #1
    9638:	0223      	lsls	r3, r4, #8
    963a:	d5a6      	bpl.n	958a <__aeabi_dadd+0x17a>
    963c:	2602      	movs	r6, #2
    963e:	e7d5      	b.n	95ec <__aeabi_dadd+0x1dc>
    9640:	2d00      	cmp	r5, #0
    9642:	d16e      	bne.n	9722 <__aeabi_dadd+0x312>
    9644:	1c70      	adds	r0, r6, #1
    9646:	0540      	lsls	r0, r0, #21
    9648:	0d40      	lsrs	r0, r0, #21
    964a:	2801      	cmp	r0, #1
    964c:	dc00      	bgt.n	9650 <__aeabi_dadd+0x240>
    964e:	e0f9      	b.n	9844 <__aeabi_dadd+0x434>
    9650:	1ab8      	subs	r0, r7, r2
    9652:	4684      	mov	ip, r0
    9654:	4287      	cmp	r7, r0
    9656:	4180      	sbcs	r0, r0
    9658:	1ae5      	subs	r5, r4, r3
    965a:	4240      	negs	r0, r0
    965c:	1a2d      	subs	r5, r5, r0
    965e:	0228      	lsls	r0, r5, #8
    9660:	d400      	bmi.n	9664 <__aeabi_dadd+0x254>
    9662:	e089      	b.n	9778 <__aeabi_dadd+0x368>
    9664:	1bd7      	subs	r7, r2, r7
    9666:	42ba      	cmp	r2, r7
    9668:	4192      	sbcs	r2, r2
    966a:	1b1c      	subs	r4, r3, r4
    966c:	4252      	negs	r2, r2
    966e:	1aa5      	subs	r5, r4, r2
    9670:	46d8      	mov	r8, fp
    9672:	e729      	b.n	94c8 <__aeabi_dadd+0xb8>
    9674:	4645      	mov	r5, r8
    9676:	2400      	movs	r4, #0
    9678:	2700      	movs	r7, #0
    967a:	e76a      	b.n	9552 <__aeabi_dadd+0x142>
    967c:	4c45      	ldr	r4, [pc, #276]	; (9794 <__aeabi_dadd+0x384>)
    967e:	1af6      	subs	r6, r6, r3
    9680:	402c      	ands	r4, r5
    9682:	e749      	b.n	9518 <__aeabi_dadd+0x108>
    9684:	003d      	movs	r5, r7
    9686:	3828      	subs	r0, #40	; 0x28
    9688:	4085      	lsls	r5, r0
    968a:	2700      	movs	r7, #0
    968c:	e72e      	b.n	94ec <__aeabi_dadd+0xdc>
    968e:	0038      	movs	r0, r7
    9690:	f001 fb04 	bl	ac9c <__clzsi2>
    9694:	3020      	adds	r0, #32
    9696:	e71d      	b.n	94d4 <__aeabi_dadd+0xc4>
    9698:	430a      	orrs	r2, r1
    969a:	1e51      	subs	r1, r2, #1
    969c:	418a      	sbcs	r2, r1
    969e:	2100      	movs	r1, #0
    96a0:	e707      	b.n	94b2 <__aeabi_dadd+0xa2>
    96a2:	2b00      	cmp	r3, #0
    96a4:	d000      	beq.n	96a8 <__aeabi_dadd+0x298>
    96a6:	e0f3      	b.n	9890 <__aeabi_dadd+0x480>
    96a8:	1c70      	adds	r0, r6, #1
    96aa:	0543      	lsls	r3, r0, #21
    96ac:	0d5b      	lsrs	r3, r3, #21
    96ae:	2b01      	cmp	r3, #1
    96b0:	dc00      	bgt.n	96b4 <__aeabi_dadd+0x2a4>
    96b2:	e0ad      	b.n	9810 <__aeabi_dadd+0x400>
    96b4:	4b36      	ldr	r3, [pc, #216]	; (9790 <__aeabi_dadd+0x380>)
    96b6:	4298      	cmp	r0, r3
    96b8:	d100      	bne.n	96bc <__aeabi_dadd+0x2ac>
    96ba:	e0d1      	b.n	9860 <__aeabi_dadd+0x450>
    96bc:	18ba      	adds	r2, r7, r2
    96be:	42ba      	cmp	r2, r7
    96c0:	41bf      	sbcs	r7, r7
    96c2:	1864      	adds	r4, r4, r1
    96c4:	427f      	negs	r7, r7
    96c6:	19e4      	adds	r4, r4, r7
    96c8:	07e7      	lsls	r7, r4, #31
    96ca:	0852      	lsrs	r2, r2, #1
    96cc:	4317      	orrs	r7, r2
    96ce:	0864      	lsrs	r4, r4, #1
    96d0:	0006      	movs	r6, r0
    96d2:	e721      	b.n	9518 <__aeabi_dadd+0x108>
    96d4:	482e      	ldr	r0, [pc, #184]	; (9790 <__aeabi_dadd+0x380>)
    96d6:	4285      	cmp	r5, r0
    96d8:	d100      	bne.n	96dc <__aeabi_dadd+0x2cc>
    96da:	e093      	b.n	9804 <__aeabi_dadd+0x3f4>
    96dc:	001d      	movs	r5, r3
    96de:	e6d0      	b.n	9482 <__aeabi_dadd+0x72>
    96e0:	0029      	movs	r1, r5
    96e2:	3e1f      	subs	r6, #31
    96e4:	40f1      	lsrs	r1, r6
    96e6:	2b20      	cmp	r3, #32
    96e8:	d100      	bne.n	96ec <__aeabi_dadd+0x2dc>
    96ea:	e08d      	b.n	9808 <__aeabi_dadd+0x3f8>
    96ec:	2240      	movs	r2, #64	; 0x40
    96ee:	1ad3      	subs	r3, r2, r3
    96f0:	409d      	lsls	r5, r3
    96f2:	432f      	orrs	r7, r5
    96f4:	1e7d      	subs	r5, r7, #1
    96f6:	41af      	sbcs	r7, r5
    96f8:	2400      	movs	r4, #0
    96fa:	430f      	orrs	r7, r1
    96fc:	2600      	movs	r6, #0
    96fe:	e744      	b.n	958a <__aeabi_dadd+0x17a>
    9700:	002b      	movs	r3, r5
    9702:	0008      	movs	r0, r1
    9704:	3b20      	subs	r3, #32
    9706:	40d8      	lsrs	r0, r3
    9708:	0003      	movs	r3, r0
    970a:	2d20      	cmp	r5, #32
    970c:	d100      	bne.n	9710 <__aeabi_dadd+0x300>
    970e:	e07d      	b.n	980c <__aeabi_dadd+0x3fc>
    9710:	2040      	movs	r0, #64	; 0x40
    9712:	1b45      	subs	r5, r0, r5
    9714:	40a9      	lsls	r1, r5
    9716:	430a      	orrs	r2, r1
    9718:	1e51      	subs	r1, r2, #1
    971a:	418a      	sbcs	r2, r1
    971c:	2100      	movs	r1, #0
    971e:	431a      	orrs	r2, r3
    9720:	e6c7      	b.n	94b2 <__aeabi_dadd+0xa2>
    9722:	2e00      	cmp	r6, #0
    9724:	d050      	beq.n	97c8 <__aeabi_dadd+0x3b8>
    9726:	4e1a      	ldr	r6, [pc, #104]	; (9790 <__aeabi_dadd+0x380>)
    9728:	42b0      	cmp	r0, r6
    972a:	d057      	beq.n	97dc <__aeabi_dadd+0x3cc>
    972c:	2680      	movs	r6, #128	; 0x80
    972e:	426b      	negs	r3, r5
    9730:	4699      	mov	r9, r3
    9732:	0436      	lsls	r6, r6, #16
    9734:	4334      	orrs	r4, r6
    9736:	464b      	mov	r3, r9
    9738:	2b38      	cmp	r3, #56	; 0x38
    973a:	dd00      	ble.n	973e <__aeabi_dadd+0x32e>
    973c:	e0d6      	b.n	98ec <__aeabi_dadd+0x4dc>
    973e:	2b1f      	cmp	r3, #31
    9740:	dd00      	ble.n	9744 <__aeabi_dadd+0x334>
    9742:	e135      	b.n	99b0 <__aeabi_dadd+0x5a0>
    9744:	2620      	movs	r6, #32
    9746:	1af5      	subs	r5, r6, r3
    9748:	0026      	movs	r6, r4
    974a:	40ae      	lsls	r6, r5
    974c:	46b2      	mov	sl, r6
    974e:	003e      	movs	r6, r7
    9750:	40de      	lsrs	r6, r3
    9752:	46ac      	mov	ip, r5
    9754:	0035      	movs	r5, r6
    9756:	4656      	mov	r6, sl
    9758:	432e      	orrs	r6, r5
    975a:	4665      	mov	r5, ip
    975c:	40af      	lsls	r7, r5
    975e:	1e7d      	subs	r5, r7, #1
    9760:	41af      	sbcs	r7, r5
    9762:	40dc      	lsrs	r4, r3
    9764:	4337      	orrs	r7, r6
    9766:	1bd7      	subs	r7, r2, r7
    9768:	42ba      	cmp	r2, r7
    976a:	4192      	sbcs	r2, r2
    976c:	1b0c      	subs	r4, r1, r4
    976e:	4252      	negs	r2, r2
    9770:	1aa4      	subs	r4, r4, r2
    9772:	0006      	movs	r6, r0
    9774:	46d8      	mov	r8, fp
    9776:	e6a3      	b.n	94c0 <__aeabi_dadd+0xb0>
    9778:	4664      	mov	r4, ip
    977a:	4667      	mov	r7, ip
    977c:	432c      	orrs	r4, r5
    977e:	d000      	beq.n	9782 <__aeabi_dadd+0x372>
    9780:	e6a2      	b.n	94c8 <__aeabi_dadd+0xb8>
    9782:	2500      	movs	r5, #0
    9784:	2600      	movs	r6, #0
    9786:	2700      	movs	r7, #0
    9788:	e706      	b.n	9598 <__aeabi_dadd+0x188>
    978a:	001e      	movs	r6, r3
    978c:	e6c4      	b.n	9518 <__aeabi_dadd+0x108>
    978e:	46c0      	nop			; (mov r8, r8)
    9790:	000007ff 	.word	0x000007ff
    9794:	ff7fffff 	.word	0xff7fffff
    9798:	800fffff 	.word	0x800fffff
    979c:	2b1f      	cmp	r3, #31
    979e:	dc63      	bgt.n	9868 <__aeabi_dadd+0x458>
    97a0:	2020      	movs	r0, #32
    97a2:	1ac3      	subs	r3, r0, r3
    97a4:	0008      	movs	r0, r1
    97a6:	4098      	lsls	r0, r3
    97a8:	469c      	mov	ip, r3
    97aa:	4683      	mov	fp, r0
    97ac:	4653      	mov	r3, sl
    97ae:	0010      	movs	r0, r2
    97b0:	40d8      	lsrs	r0, r3
    97b2:	0003      	movs	r3, r0
    97b4:	4658      	mov	r0, fp
    97b6:	4318      	orrs	r0, r3
    97b8:	4663      	mov	r3, ip
    97ba:	409a      	lsls	r2, r3
    97bc:	1e53      	subs	r3, r2, #1
    97be:	419a      	sbcs	r2, r3
    97c0:	4653      	mov	r3, sl
    97c2:	4302      	orrs	r2, r0
    97c4:	40d9      	lsrs	r1, r3
    97c6:	e703      	b.n	95d0 <__aeabi_dadd+0x1c0>
    97c8:	0026      	movs	r6, r4
    97ca:	433e      	orrs	r6, r7
    97cc:	d006      	beq.n	97dc <__aeabi_dadd+0x3cc>
    97ce:	43eb      	mvns	r3, r5
    97d0:	4699      	mov	r9, r3
    97d2:	2b00      	cmp	r3, #0
    97d4:	d0c7      	beq.n	9766 <__aeabi_dadd+0x356>
    97d6:	4e94      	ldr	r6, [pc, #592]	; (9a28 <__aeabi_dadd+0x618>)
    97d8:	42b0      	cmp	r0, r6
    97da:	d1ac      	bne.n	9736 <__aeabi_dadd+0x326>
    97dc:	000c      	movs	r4, r1
    97de:	0017      	movs	r7, r2
    97e0:	0006      	movs	r6, r0
    97e2:	46d8      	mov	r8, fp
    97e4:	e698      	b.n	9518 <__aeabi_dadd+0x108>
    97e6:	4b90      	ldr	r3, [pc, #576]	; (9a28 <__aeabi_dadd+0x618>)
    97e8:	459a      	cmp	sl, r3
    97ea:	d00b      	beq.n	9804 <__aeabi_dadd+0x3f4>
    97ec:	4682      	mov	sl, r0
    97ee:	e6e7      	b.n	95c0 <__aeabi_dadd+0x1b0>
    97f0:	2800      	cmp	r0, #0
    97f2:	d000      	beq.n	97f6 <__aeabi_dadd+0x3e6>
    97f4:	e09e      	b.n	9934 <__aeabi_dadd+0x524>
    97f6:	0018      	movs	r0, r3
    97f8:	4310      	orrs	r0, r2
    97fa:	d100      	bne.n	97fe <__aeabi_dadd+0x3ee>
    97fc:	e0e9      	b.n	99d2 <__aeabi_dadd+0x5c2>
    97fe:	001c      	movs	r4, r3
    9800:	0017      	movs	r7, r2
    9802:	46d8      	mov	r8, fp
    9804:	4e88      	ldr	r6, [pc, #544]	; (9a28 <__aeabi_dadd+0x618>)
    9806:	e687      	b.n	9518 <__aeabi_dadd+0x108>
    9808:	2500      	movs	r5, #0
    980a:	e772      	b.n	96f2 <__aeabi_dadd+0x2e2>
    980c:	2100      	movs	r1, #0
    980e:	e782      	b.n	9716 <__aeabi_dadd+0x306>
    9810:	0023      	movs	r3, r4
    9812:	433b      	orrs	r3, r7
    9814:	2e00      	cmp	r6, #0
    9816:	d000      	beq.n	981a <__aeabi_dadd+0x40a>
    9818:	e0ab      	b.n	9972 <__aeabi_dadd+0x562>
    981a:	2b00      	cmp	r3, #0
    981c:	d100      	bne.n	9820 <__aeabi_dadd+0x410>
    981e:	e0e7      	b.n	99f0 <__aeabi_dadd+0x5e0>
    9820:	000b      	movs	r3, r1
    9822:	4313      	orrs	r3, r2
    9824:	d100      	bne.n	9828 <__aeabi_dadd+0x418>
    9826:	e677      	b.n	9518 <__aeabi_dadd+0x108>
    9828:	18ba      	adds	r2, r7, r2
    982a:	42ba      	cmp	r2, r7
    982c:	41bf      	sbcs	r7, r7
    982e:	1864      	adds	r4, r4, r1
    9830:	427f      	negs	r7, r7
    9832:	19e4      	adds	r4, r4, r7
    9834:	0223      	lsls	r3, r4, #8
    9836:	d400      	bmi.n	983a <__aeabi_dadd+0x42a>
    9838:	e0f2      	b.n	9a20 <__aeabi_dadd+0x610>
    983a:	4b7c      	ldr	r3, [pc, #496]	; (9a2c <__aeabi_dadd+0x61c>)
    983c:	0017      	movs	r7, r2
    983e:	401c      	ands	r4, r3
    9840:	0006      	movs	r6, r0
    9842:	e669      	b.n	9518 <__aeabi_dadd+0x108>
    9844:	0020      	movs	r0, r4
    9846:	4338      	orrs	r0, r7
    9848:	2e00      	cmp	r6, #0
    984a:	d1d1      	bne.n	97f0 <__aeabi_dadd+0x3e0>
    984c:	2800      	cmp	r0, #0
    984e:	d15b      	bne.n	9908 <__aeabi_dadd+0x4f8>
    9850:	001c      	movs	r4, r3
    9852:	4314      	orrs	r4, r2
    9854:	d100      	bne.n	9858 <__aeabi_dadd+0x448>
    9856:	e0a8      	b.n	99aa <__aeabi_dadd+0x59a>
    9858:	001c      	movs	r4, r3
    985a:	0017      	movs	r7, r2
    985c:	46d8      	mov	r8, fp
    985e:	e65b      	b.n	9518 <__aeabi_dadd+0x108>
    9860:	0006      	movs	r6, r0
    9862:	2400      	movs	r4, #0
    9864:	2700      	movs	r7, #0
    9866:	e697      	b.n	9598 <__aeabi_dadd+0x188>
    9868:	4650      	mov	r0, sl
    986a:	000b      	movs	r3, r1
    986c:	3820      	subs	r0, #32
    986e:	40c3      	lsrs	r3, r0
    9870:	4699      	mov	r9, r3
    9872:	4653      	mov	r3, sl
    9874:	2b20      	cmp	r3, #32
    9876:	d100      	bne.n	987a <__aeabi_dadd+0x46a>
    9878:	e095      	b.n	99a6 <__aeabi_dadd+0x596>
    987a:	2340      	movs	r3, #64	; 0x40
    987c:	4650      	mov	r0, sl
    987e:	1a1b      	subs	r3, r3, r0
    9880:	4099      	lsls	r1, r3
    9882:	430a      	orrs	r2, r1
    9884:	1e51      	subs	r1, r2, #1
    9886:	418a      	sbcs	r2, r1
    9888:	464b      	mov	r3, r9
    988a:	2100      	movs	r1, #0
    988c:	431a      	orrs	r2, r3
    988e:	e69f      	b.n	95d0 <__aeabi_dadd+0x1c0>
    9890:	2e00      	cmp	r6, #0
    9892:	d130      	bne.n	98f6 <__aeabi_dadd+0x4e6>
    9894:	0026      	movs	r6, r4
    9896:	433e      	orrs	r6, r7
    9898:	d067      	beq.n	996a <__aeabi_dadd+0x55a>
    989a:	43db      	mvns	r3, r3
    989c:	469a      	mov	sl, r3
    989e:	2b00      	cmp	r3, #0
    98a0:	d01c      	beq.n	98dc <__aeabi_dadd+0x4cc>
    98a2:	4e61      	ldr	r6, [pc, #388]	; (9a28 <__aeabi_dadd+0x618>)
    98a4:	42b0      	cmp	r0, r6
    98a6:	d060      	beq.n	996a <__aeabi_dadd+0x55a>
    98a8:	4653      	mov	r3, sl
    98aa:	2b38      	cmp	r3, #56	; 0x38
    98ac:	dd00      	ble.n	98b0 <__aeabi_dadd+0x4a0>
    98ae:	e096      	b.n	99de <__aeabi_dadd+0x5ce>
    98b0:	2b1f      	cmp	r3, #31
    98b2:	dd00      	ble.n	98b6 <__aeabi_dadd+0x4a6>
    98b4:	e09f      	b.n	99f6 <__aeabi_dadd+0x5e6>
    98b6:	2620      	movs	r6, #32
    98b8:	1af3      	subs	r3, r6, r3
    98ba:	0026      	movs	r6, r4
    98bc:	409e      	lsls	r6, r3
    98be:	469c      	mov	ip, r3
    98c0:	46b3      	mov	fp, r6
    98c2:	4653      	mov	r3, sl
    98c4:	003e      	movs	r6, r7
    98c6:	40de      	lsrs	r6, r3
    98c8:	0033      	movs	r3, r6
    98ca:	465e      	mov	r6, fp
    98cc:	431e      	orrs	r6, r3
    98ce:	4663      	mov	r3, ip
    98d0:	409f      	lsls	r7, r3
    98d2:	1e7b      	subs	r3, r7, #1
    98d4:	419f      	sbcs	r7, r3
    98d6:	4653      	mov	r3, sl
    98d8:	40dc      	lsrs	r4, r3
    98da:	4337      	orrs	r7, r6
    98dc:	18bf      	adds	r7, r7, r2
    98de:	4297      	cmp	r7, r2
    98e0:	4192      	sbcs	r2, r2
    98e2:	1864      	adds	r4, r4, r1
    98e4:	4252      	negs	r2, r2
    98e6:	18a4      	adds	r4, r4, r2
    98e8:	0006      	movs	r6, r0
    98ea:	e678      	b.n	95de <__aeabi_dadd+0x1ce>
    98ec:	4327      	orrs	r7, r4
    98ee:	1e7c      	subs	r4, r7, #1
    98f0:	41a7      	sbcs	r7, r4
    98f2:	2400      	movs	r4, #0
    98f4:	e737      	b.n	9766 <__aeabi_dadd+0x356>
    98f6:	4e4c      	ldr	r6, [pc, #304]	; (9a28 <__aeabi_dadd+0x618>)
    98f8:	42b0      	cmp	r0, r6
    98fa:	d036      	beq.n	996a <__aeabi_dadd+0x55a>
    98fc:	2680      	movs	r6, #128	; 0x80
    98fe:	425b      	negs	r3, r3
    9900:	0436      	lsls	r6, r6, #16
    9902:	469a      	mov	sl, r3
    9904:	4334      	orrs	r4, r6
    9906:	e7cf      	b.n	98a8 <__aeabi_dadd+0x498>
    9908:	0018      	movs	r0, r3
    990a:	4310      	orrs	r0, r2
    990c:	d100      	bne.n	9910 <__aeabi_dadd+0x500>
    990e:	e603      	b.n	9518 <__aeabi_dadd+0x108>
    9910:	1ab8      	subs	r0, r7, r2
    9912:	4684      	mov	ip, r0
    9914:	4567      	cmp	r7, ip
    9916:	41ad      	sbcs	r5, r5
    9918:	1ae0      	subs	r0, r4, r3
    991a:	426d      	negs	r5, r5
    991c:	1b40      	subs	r0, r0, r5
    991e:	0205      	lsls	r5, r0, #8
    9920:	d400      	bmi.n	9924 <__aeabi_dadd+0x514>
    9922:	e62c      	b.n	957e <__aeabi_dadd+0x16e>
    9924:	1bd7      	subs	r7, r2, r7
    9926:	42ba      	cmp	r2, r7
    9928:	4192      	sbcs	r2, r2
    992a:	1b1c      	subs	r4, r3, r4
    992c:	4252      	negs	r2, r2
    992e:	1aa4      	subs	r4, r4, r2
    9930:	46d8      	mov	r8, fp
    9932:	e5f1      	b.n	9518 <__aeabi_dadd+0x108>
    9934:	0018      	movs	r0, r3
    9936:	4310      	orrs	r0, r2
    9938:	d100      	bne.n	993c <__aeabi_dadd+0x52c>
    993a:	e763      	b.n	9804 <__aeabi_dadd+0x3f4>
    993c:	08f8      	lsrs	r0, r7, #3
    993e:	0767      	lsls	r7, r4, #29
    9940:	4307      	orrs	r7, r0
    9942:	2080      	movs	r0, #128	; 0x80
    9944:	08e4      	lsrs	r4, r4, #3
    9946:	0300      	lsls	r0, r0, #12
    9948:	4204      	tst	r4, r0
    994a:	d008      	beq.n	995e <__aeabi_dadd+0x54e>
    994c:	08dd      	lsrs	r5, r3, #3
    994e:	4205      	tst	r5, r0
    9950:	d105      	bne.n	995e <__aeabi_dadd+0x54e>
    9952:	08d2      	lsrs	r2, r2, #3
    9954:	0759      	lsls	r1, r3, #29
    9956:	4311      	orrs	r1, r2
    9958:	000f      	movs	r7, r1
    995a:	002c      	movs	r4, r5
    995c:	46d8      	mov	r8, fp
    995e:	0f7b      	lsrs	r3, r7, #29
    9960:	00e4      	lsls	r4, r4, #3
    9962:	431c      	orrs	r4, r3
    9964:	00ff      	lsls	r7, r7, #3
    9966:	4e30      	ldr	r6, [pc, #192]	; (9a28 <__aeabi_dadd+0x618>)
    9968:	e5d6      	b.n	9518 <__aeabi_dadd+0x108>
    996a:	000c      	movs	r4, r1
    996c:	0017      	movs	r7, r2
    996e:	0006      	movs	r6, r0
    9970:	e5d2      	b.n	9518 <__aeabi_dadd+0x108>
    9972:	2b00      	cmp	r3, #0
    9974:	d038      	beq.n	99e8 <__aeabi_dadd+0x5d8>
    9976:	000b      	movs	r3, r1
    9978:	4313      	orrs	r3, r2
    997a:	d100      	bne.n	997e <__aeabi_dadd+0x56e>
    997c:	e742      	b.n	9804 <__aeabi_dadd+0x3f4>
    997e:	08f8      	lsrs	r0, r7, #3
    9980:	0767      	lsls	r7, r4, #29
    9982:	4307      	orrs	r7, r0
    9984:	2080      	movs	r0, #128	; 0x80
    9986:	08e4      	lsrs	r4, r4, #3
    9988:	0300      	lsls	r0, r0, #12
    998a:	4204      	tst	r4, r0
    998c:	d0e7      	beq.n	995e <__aeabi_dadd+0x54e>
    998e:	08cb      	lsrs	r3, r1, #3
    9990:	4203      	tst	r3, r0
    9992:	d1e4      	bne.n	995e <__aeabi_dadd+0x54e>
    9994:	08d2      	lsrs	r2, r2, #3
    9996:	0749      	lsls	r1, r1, #29
    9998:	4311      	orrs	r1, r2
    999a:	000f      	movs	r7, r1
    999c:	001c      	movs	r4, r3
    999e:	e7de      	b.n	995e <__aeabi_dadd+0x54e>
    99a0:	2700      	movs	r7, #0
    99a2:	2400      	movs	r4, #0
    99a4:	e5d5      	b.n	9552 <__aeabi_dadd+0x142>
    99a6:	2100      	movs	r1, #0
    99a8:	e76b      	b.n	9882 <__aeabi_dadd+0x472>
    99aa:	2500      	movs	r5, #0
    99ac:	2700      	movs	r7, #0
    99ae:	e5f3      	b.n	9598 <__aeabi_dadd+0x188>
    99b0:	464e      	mov	r6, r9
    99b2:	0025      	movs	r5, r4
    99b4:	3e20      	subs	r6, #32
    99b6:	40f5      	lsrs	r5, r6
    99b8:	464b      	mov	r3, r9
    99ba:	002e      	movs	r6, r5
    99bc:	2b20      	cmp	r3, #32
    99be:	d02d      	beq.n	9a1c <__aeabi_dadd+0x60c>
    99c0:	2540      	movs	r5, #64	; 0x40
    99c2:	1aed      	subs	r5, r5, r3
    99c4:	40ac      	lsls	r4, r5
    99c6:	4327      	orrs	r7, r4
    99c8:	1e7c      	subs	r4, r7, #1
    99ca:	41a7      	sbcs	r7, r4
    99cc:	2400      	movs	r4, #0
    99ce:	4337      	orrs	r7, r6
    99d0:	e6c9      	b.n	9766 <__aeabi_dadd+0x356>
    99d2:	2480      	movs	r4, #128	; 0x80
    99d4:	2500      	movs	r5, #0
    99d6:	0324      	lsls	r4, r4, #12
    99d8:	4e13      	ldr	r6, [pc, #76]	; (9a28 <__aeabi_dadd+0x618>)
    99da:	2700      	movs	r7, #0
    99dc:	e5dc      	b.n	9598 <__aeabi_dadd+0x188>
    99de:	4327      	orrs	r7, r4
    99e0:	1e7c      	subs	r4, r7, #1
    99e2:	41a7      	sbcs	r7, r4
    99e4:	2400      	movs	r4, #0
    99e6:	e779      	b.n	98dc <__aeabi_dadd+0x4cc>
    99e8:	000c      	movs	r4, r1
    99ea:	0017      	movs	r7, r2
    99ec:	4e0e      	ldr	r6, [pc, #56]	; (9a28 <__aeabi_dadd+0x618>)
    99ee:	e593      	b.n	9518 <__aeabi_dadd+0x108>
    99f0:	000c      	movs	r4, r1
    99f2:	0017      	movs	r7, r2
    99f4:	e590      	b.n	9518 <__aeabi_dadd+0x108>
    99f6:	4656      	mov	r6, sl
    99f8:	0023      	movs	r3, r4
    99fa:	3e20      	subs	r6, #32
    99fc:	40f3      	lsrs	r3, r6
    99fe:	4699      	mov	r9, r3
    9a00:	4653      	mov	r3, sl
    9a02:	2b20      	cmp	r3, #32
    9a04:	d00e      	beq.n	9a24 <__aeabi_dadd+0x614>
    9a06:	2340      	movs	r3, #64	; 0x40
    9a08:	4656      	mov	r6, sl
    9a0a:	1b9b      	subs	r3, r3, r6
    9a0c:	409c      	lsls	r4, r3
    9a0e:	4327      	orrs	r7, r4
    9a10:	1e7c      	subs	r4, r7, #1
    9a12:	41a7      	sbcs	r7, r4
    9a14:	464b      	mov	r3, r9
    9a16:	2400      	movs	r4, #0
    9a18:	431f      	orrs	r7, r3
    9a1a:	e75f      	b.n	98dc <__aeabi_dadd+0x4cc>
    9a1c:	2400      	movs	r4, #0
    9a1e:	e7d2      	b.n	99c6 <__aeabi_dadd+0x5b6>
    9a20:	0017      	movs	r7, r2
    9a22:	e5b2      	b.n	958a <__aeabi_dadd+0x17a>
    9a24:	2400      	movs	r4, #0
    9a26:	e7f2      	b.n	9a0e <__aeabi_dadd+0x5fe>
    9a28:	000007ff 	.word	0x000007ff
    9a2c:	ff7fffff 	.word	0xff7fffff

00009a30 <__aeabi_ddiv>:
    9a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a32:	4657      	mov	r7, sl
    9a34:	4645      	mov	r5, r8
    9a36:	46de      	mov	lr, fp
    9a38:	464e      	mov	r6, r9
    9a3a:	b5e0      	push	{r5, r6, r7, lr}
    9a3c:	004c      	lsls	r4, r1, #1
    9a3e:	030e      	lsls	r6, r1, #12
    9a40:	b087      	sub	sp, #28
    9a42:	4683      	mov	fp, r0
    9a44:	4692      	mov	sl, r2
    9a46:	001d      	movs	r5, r3
    9a48:	4680      	mov	r8, r0
    9a4a:	0b36      	lsrs	r6, r6, #12
    9a4c:	0d64      	lsrs	r4, r4, #21
    9a4e:	0fcf      	lsrs	r7, r1, #31
    9a50:	2c00      	cmp	r4, #0
    9a52:	d04f      	beq.n	9af4 <__aeabi_ddiv+0xc4>
    9a54:	4b6f      	ldr	r3, [pc, #444]	; (9c14 <__aeabi_ddiv+0x1e4>)
    9a56:	429c      	cmp	r4, r3
    9a58:	d035      	beq.n	9ac6 <__aeabi_ddiv+0x96>
    9a5a:	2380      	movs	r3, #128	; 0x80
    9a5c:	0f42      	lsrs	r2, r0, #29
    9a5e:	041b      	lsls	r3, r3, #16
    9a60:	00f6      	lsls	r6, r6, #3
    9a62:	4313      	orrs	r3, r2
    9a64:	4333      	orrs	r3, r6
    9a66:	4699      	mov	r9, r3
    9a68:	00c3      	lsls	r3, r0, #3
    9a6a:	4698      	mov	r8, r3
    9a6c:	4b6a      	ldr	r3, [pc, #424]	; (9c18 <__aeabi_ddiv+0x1e8>)
    9a6e:	2600      	movs	r6, #0
    9a70:	469c      	mov	ip, r3
    9a72:	2300      	movs	r3, #0
    9a74:	4464      	add	r4, ip
    9a76:	9303      	str	r3, [sp, #12]
    9a78:	032b      	lsls	r3, r5, #12
    9a7a:	0b1b      	lsrs	r3, r3, #12
    9a7c:	469b      	mov	fp, r3
    9a7e:	006b      	lsls	r3, r5, #1
    9a80:	0fed      	lsrs	r5, r5, #31
    9a82:	4650      	mov	r0, sl
    9a84:	0d5b      	lsrs	r3, r3, #21
    9a86:	9501      	str	r5, [sp, #4]
    9a88:	d05e      	beq.n	9b48 <__aeabi_ddiv+0x118>
    9a8a:	4a62      	ldr	r2, [pc, #392]	; (9c14 <__aeabi_ddiv+0x1e4>)
    9a8c:	4293      	cmp	r3, r2
    9a8e:	d053      	beq.n	9b38 <__aeabi_ddiv+0x108>
    9a90:	465a      	mov	r2, fp
    9a92:	00d1      	lsls	r1, r2, #3
    9a94:	2280      	movs	r2, #128	; 0x80
    9a96:	0f40      	lsrs	r0, r0, #29
    9a98:	0412      	lsls	r2, r2, #16
    9a9a:	4302      	orrs	r2, r0
    9a9c:	430a      	orrs	r2, r1
    9a9e:	4693      	mov	fp, r2
    9aa0:	4652      	mov	r2, sl
    9aa2:	00d1      	lsls	r1, r2, #3
    9aa4:	4a5c      	ldr	r2, [pc, #368]	; (9c18 <__aeabi_ddiv+0x1e8>)
    9aa6:	4694      	mov	ip, r2
    9aa8:	2200      	movs	r2, #0
    9aaa:	4463      	add	r3, ip
    9aac:	0038      	movs	r0, r7
    9aae:	4068      	eors	r0, r5
    9ab0:	4684      	mov	ip, r0
    9ab2:	9002      	str	r0, [sp, #8]
    9ab4:	1ae4      	subs	r4, r4, r3
    9ab6:	4316      	orrs	r6, r2
    9ab8:	2e0f      	cmp	r6, #15
    9aba:	d900      	bls.n	9abe <__aeabi_ddiv+0x8e>
    9abc:	e0b4      	b.n	9c28 <__aeabi_ddiv+0x1f8>
    9abe:	4b57      	ldr	r3, [pc, #348]	; (9c1c <__aeabi_ddiv+0x1ec>)
    9ac0:	00b6      	lsls	r6, r6, #2
    9ac2:	599b      	ldr	r3, [r3, r6]
    9ac4:	469f      	mov	pc, r3
    9ac6:	0003      	movs	r3, r0
    9ac8:	4333      	orrs	r3, r6
    9aca:	4699      	mov	r9, r3
    9acc:	d16c      	bne.n	9ba8 <__aeabi_ddiv+0x178>
    9ace:	2300      	movs	r3, #0
    9ad0:	4698      	mov	r8, r3
    9ad2:	3302      	adds	r3, #2
    9ad4:	2608      	movs	r6, #8
    9ad6:	9303      	str	r3, [sp, #12]
    9ad8:	e7ce      	b.n	9a78 <__aeabi_ddiv+0x48>
    9ada:	46cb      	mov	fp, r9
    9adc:	4641      	mov	r1, r8
    9ade:	9a03      	ldr	r2, [sp, #12]
    9ae0:	9701      	str	r7, [sp, #4]
    9ae2:	2a02      	cmp	r2, #2
    9ae4:	d165      	bne.n	9bb2 <__aeabi_ddiv+0x182>
    9ae6:	9b01      	ldr	r3, [sp, #4]
    9ae8:	4c4a      	ldr	r4, [pc, #296]	; (9c14 <__aeabi_ddiv+0x1e4>)
    9aea:	469c      	mov	ip, r3
    9aec:	2300      	movs	r3, #0
    9aee:	2200      	movs	r2, #0
    9af0:	4698      	mov	r8, r3
    9af2:	e06b      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9af4:	0003      	movs	r3, r0
    9af6:	4333      	orrs	r3, r6
    9af8:	4699      	mov	r9, r3
    9afa:	d04e      	beq.n	9b9a <__aeabi_ddiv+0x16a>
    9afc:	2e00      	cmp	r6, #0
    9afe:	d100      	bne.n	9b02 <__aeabi_ddiv+0xd2>
    9b00:	e1bc      	b.n	9e7c <__aeabi_ddiv+0x44c>
    9b02:	0030      	movs	r0, r6
    9b04:	f001 f8ca 	bl	ac9c <__clzsi2>
    9b08:	0003      	movs	r3, r0
    9b0a:	3b0b      	subs	r3, #11
    9b0c:	2b1c      	cmp	r3, #28
    9b0e:	dd00      	ble.n	9b12 <__aeabi_ddiv+0xe2>
    9b10:	e1ac      	b.n	9e6c <__aeabi_ddiv+0x43c>
    9b12:	221d      	movs	r2, #29
    9b14:	1ad3      	subs	r3, r2, r3
    9b16:	465a      	mov	r2, fp
    9b18:	0001      	movs	r1, r0
    9b1a:	40da      	lsrs	r2, r3
    9b1c:	3908      	subs	r1, #8
    9b1e:	408e      	lsls	r6, r1
    9b20:	0013      	movs	r3, r2
    9b22:	4333      	orrs	r3, r6
    9b24:	4699      	mov	r9, r3
    9b26:	465b      	mov	r3, fp
    9b28:	408b      	lsls	r3, r1
    9b2a:	4698      	mov	r8, r3
    9b2c:	2300      	movs	r3, #0
    9b2e:	4c3c      	ldr	r4, [pc, #240]	; (9c20 <__aeabi_ddiv+0x1f0>)
    9b30:	2600      	movs	r6, #0
    9b32:	1a24      	subs	r4, r4, r0
    9b34:	9303      	str	r3, [sp, #12]
    9b36:	e79f      	b.n	9a78 <__aeabi_ddiv+0x48>
    9b38:	4651      	mov	r1, sl
    9b3a:	465a      	mov	r2, fp
    9b3c:	4311      	orrs	r1, r2
    9b3e:	d129      	bne.n	9b94 <__aeabi_ddiv+0x164>
    9b40:	2200      	movs	r2, #0
    9b42:	4693      	mov	fp, r2
    9b44:	3202      	adds	r2, #2
    9b46:	e7b1      	b.n	9aac <__aeabi_ddiv+0x7c>
    9b48:	4659      	mov	r1, fp
    9b4a:	4301      	orrs	r1, r0
    9b4c:	d01e      	beq.n	9b8c <__aeabi_ddiv+0x15c>
    9b4e:	465b      	mov	r3, fp
    9b50:	2b00      	cmp	r3, #0
    9b52:	d100      	bne.n	9b56 <__aeabi_ddiv+0x126>
    9b54:	e19e      	b.n	9e94 <__aeabi_ddiv+0x464>
    9b56:	4658      	mov	r0, fp
    9b58:	f001 f8a0 	bl	ac9c <__clzsi2>
    9b5c:	0003      	movs	r3, r0
    9b5e:	3b0b      	subs	r3, #11
    9b60:	2b1c      	cmp	r3, #28
    9b62:	dd00      	ble.n	9b66 <__aeabi_ddiv+0x136>
    9b64:	e18f      	b.n	9e86 <__aeabi_ddiv+0x456>
    9b66:	0002      	movs	r2, r0
    9b68:	4659      	mov	r1, fp
    9b6a:	3a08      	subs	r2, #8
    9b6c:	4091      	lsls	r1, r2
    9b6e:	468b      	mov	fp, r1
    9b70:	211d      	movs	r1, #29
    9b72:	1acb      	subs	r3, r1, r3
    9b74:	4651      	mov	r1, sl
    9b76:	40d9      	lsrs	r1, r3
    9b78:	000b      	movs	r3, r1
    9b7a:	4659      	mov	r1, fp
    9b7c:	430b      	orrs	r3, r1
    9b7e:	4651      	mov	r1, sl
    9b80:	469b      	mov	fp, r3
    9b82:	4091      	lsls	r1, r2
    9b84:	4b26      	ldr	r3, [pc, #152]	; (9c20 <__aeabi_ddiv+0x1f0>)
    9b86:	2200      	movs	r2, #0
    9b88:	1a1b      	subs	r3, r3, r0
    9b8a:	e78f      	b.n	9aac <__aeabi_ddiv+0x7c>
    9b8c:	2300      	movs	r3, #0
    9b8e:	2201      	movs	r2, #1
    9b90:	469b      	mov	fp, r3
    9b92:	e78b      	b.n	9aac <__aeabi_ddiv+0x7c>
    9b94:	4651      	mov	r1, sl
    9b96:	2203      	movs	r2, #3
    9b98:	e788      	b.n	9aac <__aeabi_ddiv+0x7c>
    9b9a:	2300      	movs	r3, #0
    9b9c:	4698      	mov	r8, r3
    9b9e:	3301      	adds	r3, #1
    9ba0:	2604      	movs	r6, #4
    9ba2:	2400      	movs	r4, #0
    9ba4:	9303      	str	r3, [sp, #12]
    9ba6:	e767      	b.n	9a78 <__aeabi_ddiv+0x48>
    9ba8:	2303      	movs	r3, #3
    9baa:	46b1      	mov	r9, r6
    9bac:	9303      	str	r3, [sp, #12]
    9bae:	260c      	movs	r6, #12
    9bb0:	e762      	b.n	9a78 <__aeabi_ddiv+0x48>
    9bb2:	2a03      	cmp	r2, #3
    9bb4:	d100      	bne.n	9bb8 <__aeabi_ddiv+0x188>
    9bb6:	e25c      	b.n	a072 <__aeabi_ddiv+0x642>
    9bb8:	9b01      	ldr	r3, [sp, #4]
    9bba:	2a01      	cmp	r2, #1
    9bbc:	d000      	beq.n	9bc0 <__aeabi_ddiv+0x190>
    9bbe:	e1e4      	b.n	9f8a <__aeabi_ddiv+0x55a>
    9bc0:	4013      	ands	r3, r2
    9bc2:	469c      	mov	ip, r3
    9bc4:	2300      	movs	r3, #0
    9bc6:	2400      	movs	r4, #0
    9bc8:	2200      	movs	r2, #0
    9bca:	4698      	mov	r8, r3
    9bcc:	2100      	movs	r1, #0
    9bce:	0312      	lsls	r2, r2, #12
    9bd0:	0b13      	lsrs	r3, r2, #12
    9bd2:	0d0a      	lsrs	r2, r1, #20
    9bd4:	0512      	lsls	r2, r2, #20
    9bd6:	431a      	orrs	r2, r3
    9bd8:	0523      	lsls	r3, r4, #20
    9bda:	4c12      	ldr	r4, [pc, #72]	; (9c24 <__aeabi_ddiv+0x1f4>)
    9bdc:	4640      	mov	r0, r8
    9bde:	4022      	ands	r2, r4
    9be0:	4313      	orrs	r3, r2
    9be2:	4662      	mov	r2, ip
    9be4:	005b      	lsls	r3, r3, #1
    9be6:	07d2      	lsls	r2, r2, #31
    9be8:	085b      	lsrs	r3, r3, #1
    9bea:	4313      	orrs	r3, r2
    9bec:	0019      	movs	r1, r3
    9bee:	b007      	add	sp, #28
    9bf0:	bc3c      	pop	{r2, r3, r4, r5}
    9bf2:	4690      	mov	r8, r2
    9bf4:	4699      	mov	r9, r3
    9bf6:	46a2      	mov	sl, r4
    9bf8:	46ab      	mov	fp, r5
    9bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bfc:	2300      	movs	r3, #0
    9bfe:	2280      	movs	r2, #128	; 0x80
    9c00:	469c      	mov	ip, r3
    9c02:	0312      	lsls	r2, r2, #12
    9c04:	4698      	mov	r8, r3
    9c06:	4c03      	ldr	r4, [pc, #12]	; (9c14 <__aeabi_ddiv+0x1e4>)
    9c08:	e7e0      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9c0a:	2300      	movs	r3, #0
    9c0c:	4c01      	ldr	r4, [pc, #4]	; (9c14 <__aeabi_ddiv+0x1e4>)
    9c0e:	2200      	movs	r2, #0
    9c10:	4698      	mov	r8, r3
    9c12:	e7db      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9c14:	000007ff 	.word	0x000007ff
    9c18:	fffffc01 	.word	0xfffffc01
    9c1c:	0000c750 	.word	0x0000c750
    9c20:	fffffc0d 	.word	0xfffffc0d
    9c24:	800fffff 	.word	0x800fffff
    9c28:	45d9      	cmp	r9, fp
    9c2a:	d900      	bls.n	9c2e <__aeabi_ddiv+0x1fe>
    9c2c:	e139      	b.n	9ea2 <__aeabi_ddiv+0x472>
    9c2e:	d100      	bne.n	9c32 <__aeabi_ddiv+0x202>
    9c30:	e134      	b.n	9e9c <__aeabi_ddiv+0x46c>
    9c32:	2300      	movs	r3, #0
    9c34:	4646      	mov	r6, r8
    9c36:	464d      	mov	r5, r9
    9c38:	469a      	mov	sl, r3
    9c3a:	3c01      	subs	r4, #1
    9c3c:	465b      	mov	r3, fp
    9c3e:	0e0a      	lsrs	r2, r1, #24
    9c40:	021b      	lsls	r3, r3, #8
    9c42:	431a      	orrs	r2, r3
    9c44:	020b      	lsls	r3, r1, #8
    9c46:	0c17      	lsrs	r7, r2, #16
    9c48:	9303      	str	r3, [sp, #12]
    9c4a:	0413      	lsls	r3, r2, #16
    9c4c:	0c1b      	lsrs	r3, r3, #16
    9c4e:	0039      	movs	r1, r7
    9c50:	0028      	movs	r0, r5
    9c52:	4690      	mov	r8, r2
    9c54:	9301      	str	r3, [sp, #4]
    9c56:	f7ff fb25 	bl	92a4 <__udivsi3>
    9c5a:	0002      	movs	r2, r0
    9c5c:	9b01      	ldr	r3, [sp, #4]
    9c5e:	4683      	mov	fp, r0
    9c60:	435a      	muls	r2, r3
    9c62:	0028      	movs	r0, r5
    9c64:	0039      	movs	r1, r7
    9c66:	4691      	mov	r9, r2
    9c68:	f7ff fba2 	bl	93b0 <__aeabi_uidivmod>
    9c6c:	0c35      	lsrs	r5, r6, #16
    9c6e:	0409      	lsls	r1, r1, #16
    9c70:	430d      	orrs	r5, r1
    9c72:	45a9      	cmp	r9, r5
    9c74:	d90d      	bls.n	9c92 <__aeabi_ddiv+0x262>
    9c76:	465b      	mov	r3, fp
    9c78:	4445      	add	r5, r8
    9c7a:	3b01      	subs	r3, #1
    9c7c:	45a8      	cmp	r8, r5
    9c7e:	d900      	bls.n	9c82 <__aeabi_ddiv+0x252>
    9c80:	e13a      	b.n	9ef8 <__aeabi_ddiv+0x4c8>
    9c82:	45a9      	cmp	r9, r5
    9c84:	d800      	bhi.n	9c88 <__aeabi_ddiv+0x258>
    9c86:	e137      	b.n	9ef8 <__aeabi_ddiv+0x4c8>
    9c88:	2302      	movs	r3, #2
    9c8a:	425b      	negs	r3, r3
    9c8c:	469c      	mov	ip, r3
    9c8e:	4445      	add	r5, r8
    9c90:	44e3      	add	fp, ip
    9c92:	464b      	mov	r3, r9
    9c94:	1aeb      	subs	r3, r5, r3
    9c96:	0039      	movs	r1, r7
    9c98:	0018      	movs	r0, r3
    9c9a:	9304      	str	r3, [sp, #16]
    9c9c:	f7ff fb02 	bl	92a4 <__udivsi3>
    9ca0:	9b01      	ldr	r3, [sp, #4]
    9ca2:	0005      	movs	r5, r0
    9ca4:	4343      	muls	r3, r0
    9ca6:	0039      	movs	r1, r7
    9ca8:	9804      	ldr	r0, [sp, #16]
    9caa:	4699      	mov	r9, r3
    9cac:	f7ff fb80 	bl	93b0 <__aeabi_uidivmod>
    9cb0:	0433      	lsls	r3, r6, #16
    9cb2:	0409      	lsls	r1, r1, #16
    9cb4:	0c1b      	lsrs	r3, r3, #16
    9cb6:	430b      	orrs	r3, r1
    9cb8:	4599      	cmp	r9, r3
    9cba:	d909      	bls.n	9cd0 <__aeabi_ddiv+0x2a0>
    9cbc:	4443      	add	r3, r8
    9cbe:	1e6a      	subs	r2, r5, #1
    9cc0:	4598      	cmp	r8, r3
    9cc2:	d900      	bls.n	9cc6 <__aeabi_ddiv+0x296>
    9cc4:	e11a      	b.n	9efc <__aeabi_ddiv+0x4cc>
    9cc6:	4599      	cmp	r9, r3
    9cc8:	d800      	bhi.n	9ccc <__aeabi_ddiv+0x29c>
    9cca:	e117      	b.n	9efc <__aeabi_ddiv+0x4cc>
    9ccc:	3d02      	subs	r5, #2
    9cce:	4443      	add	r3, r8
    9cd0:	464a      	mov	r2, r9
    9cd2:	1a9b      	subs	r3, r3, r2
    9cd4:	465a      	mov	r2, fp
    9cd6:	0412      	lsls	r2, r2, #16
    9cd8:	432a      	orrs	r2, r5
    9cda:	9903      	ldr	r1, [sp, #12]
    9cdc:	4693      	mov	fp, r2
    9cde:	0c10      	lsrs	r0, r2, #16
    9ce0:	0c0a      	lsrs	r2, r1, #16
    9ce2:	4691      	mov	r9, r2
    9ce4:	0409      	lsls	r1, r1, #16
    9ce6:	465a      	mov	r2, fp
    9ce8:	0c09      	lsrs	r1, r1, #16
    9cea:	464e      	mov	r6, r9
    9cec:	000d      	movs	r5, r1
    9cee:	0412      	lsls	r2, r2, #16
    9cf0:	0c12      	lsrs	r2, r2, #16
    9cf2:	4345      	muls	r5, r0
    9cf4:	9105      	str	r1, [sp, #20]
    9cf6:	4351      	muls	r1, r2
    9cf8:	4372      	muls	r2, r6
    9cfa:	4370      	muls	r0, r6
    9cfc:	1952      	adds	r2, r2, r5
    9cfe:	0c0e      	lsrs	r6, r1, #16
    9d00:	18b2      	adds	r2, r6, r2
    9d02:	4295      	cmp	r5, r2
    9d04:	d903      	bls.n	9d0e <__aeabi_ddiv+0x2de>
    9d06:	2580      	movs	r5, #128	; 0x80
    9d08:	026d      	lsls	r5, r5, #9
    9d0a:	46ac      	mov	ip, r5
    9d0c:	4460      	add	r0, ip
    9d0e:	0c15      	lsrs	r5, r2, #16
    9d10:	0409      	lsls	r1, r1, #16
    9d12:	0412      	lsls	r2, r2, #16
    9d14:	0c09      	lsrs	r1, r1, #16
    9d16:	1828      	adds	r0, r5, r0
    9d18:	1852      	adds	r2, r2, r1
    9d1a:	4283      	cmp	r3, r0
    9d1c:	d200      	bcs.n	9d20 <__aeabi_ddiv+0x2f0>
    9d1e:	e0ce      	b.n	9ebe <__aeabi_ddiv+0x48e>
    9d20:	d100      	bne.n	9d24 <__aeabi_ddiv+0x2f4>
    9d22:	e0c8      	b.n	9eb6 <__aeabi_ddiv+0x486>
    9d24:	1a1d      	subs	r5, r3, r0
    9d26:	4653      	mov	r3, sl
    9d28:	1a9e      	subs	r6, r3, r2
    9d2a:	45b2      	cmp	sl, r6
    9d2c:	4192      	sbcs	r2, r2
    9d2e:	4252      	negs	r2, r2
    9d30:	1aab      	subs	r3, r5, r2
    9d32:	469a      	mov	sl, r3
    9d34:	4598      	cmp	r8, r3
    9d36:	d100      	bne.n	9d3a <__aeabi_ddiv+0x30a>
    9d38:	e117      	b.n	9f6a <__aeabi_ddiv+0x53a>
    9d3a:	0039      	movs	r1, r7
    9d3c:	0018      	movs	r0, r3
    9d3e:	f7ff fab1 	bl	92a4 <__udivsi3>
    9d42:	9b01      	ldr	r3, [sp, #4]
    9d44:	0005      	movs	r5, r0
    9d46:	4343      	muls	r3, r0
    9d48:	0039      	movs	r1, r7
    9d4a:	4650      	mov	r0, sl
    9d4c:	9304      	str	r3, [sp, #16]
    9d4e:	f7ff fb2f 	bl	93b0 <__aeabi_uidivmod>
    9d52:	9804      	ldr	r0, [sp, #16]
    9d54:	040b      	lsls	r3, r1, #16
    9d56:	0c31      	lsrs	r1, r6, #16
    9d58:	4319      	orrs	r1, r3
    9d5a:	4288      	cmp	r0, r1
    9d5c:	d909      	bls.n	9d72 <__aeabi_ddiv+0x342>
    9d5e:	4441      	add	r1, r8
    9d60:	1e6b      	subs	r3, r5, #1
    9d62:	4588      	cmp	r8, r1
    9d64:	d900      	bls.n	9d68 <__aeabi_ddiv+0x338>
    9d66:	e107      	b.n	9f78 <__aeabi_ddiv+0x548>
    9d68:	4288      	cmp	r0, r1
    9d6a:	d800      	bhi.n	9d6e <__aeabi_ddiv+0x33e>
    9d6c:	e104      	b.n	9f78 <__aeabi_ddiv+0x548>
    9d6e:	3d02      	subs	r5, #2
    9d70:	4441      	add	r1, r8
    9d72:	9b04      	ldr	r3, [sp, #16]
    9d74:	1acb      	subs	r3, r1, r3
    9d76:	0018      	movs	r0, r3
    9d78:	0039      	movs	r1, r7
    9d7a:	9304      	str	r3, [sp, #16]
    9d7c:	f7ff fa92 	bl	92a4 <__udivsi3>
    9d80:	9b01      	ldr	r3, [sp, #4]
    9d82:	4682      	mov	sl, r0
    9d84:	4343      	muls	r3, r0
    9d86:	0039      	movs	r1, r7
    9d88:	9804      	ldr	r0, [sp, #16]
    9d8a:	9301      	str	r3, [sp, #4]
    9d8c:	f7ff fb10 	bl	93b0 <__aeabi_uidivmod>
    9d90:	9801      	ldr	r0, [sp, #4]
    9d92:	040b      	lsls	r3, r1, #16
    9d94:	0431      	lsls	r1, r6, #16
    9d96:	0c09      	lsrs	r1, r1, #16
    9d98:	4319      	orrs	r1, r3
    9d9a:	4288      	cmp	r0, r1
    9d9c:	d90d      	bls.n	9dba <__aeabi_ddiv+0x38a>
    9d9e:	4653      	mov	r3, sl
    9da0:	4441      	add	r1, r8
    9da2:	3b01      	subs	r3, #1
    9da4:	4588      	cmp	r8, r1
    9da6:	d900      	bls.n	9daa <__aeabi_ddiv+0x37a>
    9da8:	e0e8      	b.n	9f7c <__aeabi_ddiv+0x54c>
    9daa:	4288      	cmp	r0, r1
    9dac:	d800      	bhi.n	9db0 <__aeabi_ddiv+0x380>
    9dae:	e0e5      	b.n	9f7c <__aeabi_ddiv+0x54c>
    9db0:	2302      	movs	r3, #2
    9db2:	425b      	negs	r3, r3
    9db4:	469c      	mov	ip, r3
    9db6:	4441      	add	r1, r8
    9db8:	44e2      	add	sl, ip
    9dba:	9b01      	ldr	r3, [sp, #4]
    9dbc:	042d      	lsls	r5, r5, #16
    9dbe:	1ace      	subs	r6, r1, r3
    9dc0:	4651      	mov	r1, sl
    9dc2:	4329      	orrs	r1, r5
    9dc4:	9d05      	ldr	r5, [sp, #20]
    9dc6:	464f      	mov	r7, r9
    9dc8:	002a      	movs	r2, r5
    9dca:	040b      	lsls	r3, r1, #16
    9dcc:	0c08      	lsrs	r0, r1, #16
    9dce:	0c1b      	lsrs	r3, r3, #16
    9dd0:	435a      	muls	r2, r3
    9dd2:	4345      	muls	r5, r0
    9dd4:	437b      	muls	r3, r7
    9dd6:	4378      	muls	r0, r7
    9dd8:	195b      	adds	r3, r3, r5
    9dda:	0c17      	lsrs	r7, r2, #16
    9ddc:	18fb      	adds	r3, r7, r3
    9dde:	429d      	cmp	r5, r3
    9de0:	d903      	bls.n	9dea <__aeabi_ddiv+0x3ba>
    9de2:	2580      	movs	r5, #128	; 0x80
    9de4:	026d      	lsls	r5, r5, #9
    9de6:	46ac      	mov	ip, r5
    9de8:	4460      	add	r0, ip
    9dea:	0c1d      	lsrs	r5, r3, #16
    9dec:	0412      	lsls	r2, r2, #16
    9dee:	041b      	lsls	r3, r3, #16
    9df0:	0c12      	lsrs	r2, r2, #16
    9df2:	1828      	adds	r0, r5, r0
    9df4:	189b      	adds	r3, r3, r2
    9df6:	4286      	cmp	r6, r0
    9df8:	d200      	bcs.n	9dfc <__aeabi_ddiv+0x3cc>
    9dfa:	e093      	b.n	9f24 <__aeabi_ddiv+0x4f4>
    9dfc:	d100      	bne.n	9e00 <__aeabi_ddiv+0x3d0>
    9dfe:	e08e      	b.n	9f1e <__aeabi_ddiv+0x4ee>
    9e00:	2301      	movs	r3, #1
    9e02:	4319      	orrs	r1, r3
    9e04:	4ba0      	ldr	r3, [pc, #640]	; (a088 <__aeabi_ddiv+0x658>)
    9e06:	18e3      	adds	r3, r4, r3
    9e08:	2b00      	cmp	r3, #0
    9e0a:	dc00      	bgt.n	9e0e <__aeabi_ddiv+0x3de>
    9e0c:	e099      	b.n	9f42 <__aeabi_ddiv+0x512>
    9e0e:	074a      	lsls	r2, r1, #29
    9e10:	d000      	beq.n	9e14 <__aeabi_ddiv+0x3e4>
    9e12:	e09e      	b.n	9f52 <__aeabi_ddiv+0x522>
    9e14:	465a      	mov	r2, fp
    9e16:	01d2      	lsls	r2, r2, #7
    9e18:	d506      	bpl.n	9e28 <__aeabi_ddiv+0x3f8>
    9e1a:	465a      	mov	r2, fp
    9e1c:	4b9b      	ldr	r3, [pc, #620]	; (a08c <__aeabi_ddiv+0x65c>)
    9e1e:	401a      	ands	r2, r3
    9e20:	2380      	movs	r3, #128	; 0x80
    9e22:	4693      	mov	fp, r2
    9e24:	00db      	lsls	r3, r3, #3
    9e26:	18e3      	adds	r3, r4, r3
    9e28:	4a99      	ldr	r2, [pc, #612]	; (a090 <__aeabi_ddiv+0x660>)
    9e2a:	4293      	cmp	r3, r2
    9e2c:	dd68      	ble.n	9f00 <__aeabi_ddiv+0x4d0>
    9e2e:	2301      	movs	r3, #1
    9e30:	9a02      	ldr	r2, [sp, #8]
    9e32:	4c98      	ldr	r4, [pc, #608]	; (a094 <__aeabi_ddiv+0x664>)
    9e34:	401a      	ands	r2, r3
    9e36:	2300      	movs	r3, #0
    9e38:	4694      	mov	ip, r2
    9e3a:	4698      	mov	r8, r3
    9e3c:	2200      	movs	r2, #0
    9e3e:	e6c5      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9e40:	2280      	movs	r2, #128	; 0x80
    9e42:	464b      	mov	r3, r9
    9e44:	0312      	lsls	r2, r2, #12
    9e46:	4213      	tst	r3, r2
    9e48:	d00a      	beq.n	9e60 <__aeabi_ddiv+0x430>
    9e4a:	465b      	mov	r3, fp
    9e4c:	4213      	tst	r3, r2
    9e4e:	d106      	bne.n	9e5e <__aeabi_ddiv+0x42e>
    9e50:	431a      	orrs	r2, r3
    9e52:	0312      	lsls	r2, r2, #12
    9e54:	0b12      	lsrs	r2, r2, #12
    9e56:	46ac      	mov	ip, r5
    9e58:	4688      	mov	r8, r1
    9e5a:	4c8e      	ldr	r4, [pc, #568]	; (a094 <__aeabi_ddiv+0x664>)
    9e5c:	e6b6      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9e5e:	464b      	mov	r3, r9
    9e60:	431a      	orrs	r2, r3
    9e62:	0312      	lsls	r2, r2, #12
    9e64:	0b12      	lsrs	r2, r2, #12
    9e66:	46bc      	mov	ip, r7
    9e68:	4c8a      	ldr	r4, [pc, #552]	; (a094 <__aeabi_ddiv+0x664>)
    9e6a:	e6af      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9e6c:	0003      	movs	r3, r0
    9e6e:	465a      	mov	r2, fp
    9e70:	3b28      	subs	r3, #40	; 0x28
    9e72:	409a      	lsls	r2, r3
    9e74:	2300      	movs	r3, #0
    9e76:	4691      	mov	r9, r2
    9e78:	4698      	mov	r8, r3
    9e7a:	e657      	b.n	9b2c <__aeabi_ddiv+0xfc>
    9e7c:	4658      	mov	r0, fp
    9e7e:	f000 ff0d 	bl	ac9c <__clzsi2>
    9e82:	3020      	adds	r0, #32
    9e84:	e640      	b.n	9b08 <__aeabi_ddiv+0xd8>
    9e86:	0003      	movs	r3, r0
    9e88:	4652      	mov	r2, sl
    9e8a:	3b28      	subs	r3, #40	; 0x28
    9e8c:	409a      	lsls	r2, r3
    9e8e:	2100      	movs	r1, #0
    9e90:	4693      	mov	fp, r2
    9e92:	e677      	b.n	9b84 <__aeabi_ddiv+0x154>
    9e94:	f000 ff02 	bl	ac9c <__clzsi2>
    9e98:	3020      	adds	r0, #32
    9e9a:	e65f      	b.n	9b5c <__aeabi_ddiv+0x12c>
    9e9c:	4588      	cmp	r8, r1
    9e9e:	d200      	bcs.n	9ea2 <__aeabi_ddiv+0x472>
    9ea0:	e6c7      	b.n	9c32 <__aeabi_ddiv+0x202>
    9ea2:	464b      	mov	r3, r9
    9ea4:	07de      	lsls	r6, r3, #31
    9ea6:	085d      	lsrs	r5, r3, #1
    9ea8:	4643      	mov	r3, r8
    9eaa:	085b      	lsrs	r3, r3, #1
    9eac:	431e      	orrs	r6, r3
    9eae:	4643      	mov	r3, r8
    9eb0:	07db      	lsls	r3, r3, #31
    9eb2:	469a      	mov	sl, r3
    9eb4:	e6c2      	b.n	9c3c <__aeabi_ddiv+0x20c>
    9eb6:	2500      	movs	r5, #0
    9eb8:	4592      	cmp	sl, r2
    9eba:	d300      	bcc.n	9ebe <__aeabi_ddiv+0x48e>
    9ebc:	e733      	b.n	9d26 <__aeabi_ddiv+0x2f6>
    9ebe:	9e03      	ldr	r6, [sp, #12]
    9ec0:	4659      	mov	r1, fp
    9ec2:	46b4      	mov	ip, r6
    9ec4:	44e2      	add	sl, ip
    9ec6:	45b2      	cmp	sl, r6
    9ec8:	41ad      	sbcs	r5, r5
    9eca:	426d      	negs	r5, r5
    9ecc:	4445      	add	r5, r8
    9ece:	18eb      	adds	r3, r5, r3
    9ed0:	3901      	subs	r1, #1
    9ed2:	4598      	cmp	r8, r3
    9ed4:	d207      	bcs.n	9ee6 <__aeabi_ddiv+0x4b6>
    9ed6:	4298      	cmp	r0, r3
    9ed8:	d900      	bls.n	9edc <__aeabi_ddiv+0x4ac>
    9eda:	e07f      	b.n	9fdc <__aeabi_ddiv+0x5ac>
    9edc:	d100      	bne.n	9ee0 <__aeabi_ddiv+0x4b0>
    9ede:	e0bc      	b.n	a05a <__aeabi_ddiv+0x62a>
    9ee0:	1a1d      	subs	r5, r3, r0
    9ee2:	468b      	mov	fp, r1
    9ee4:	e71f      	b.n	9d26 <__aeabi_ddiv+0x2f6>
    9ee6:	4598      	cmp	r8, r3
    9ee8:	d1fa      	bne.n	9ee0 <__aeabi_ddiv+0x4b0>
    9eea:	9d03      	ldr	r5, [sp, #12]
    9eec:	4555      	cmp	r5, sl
    9eee:	d9f2      	bls.n	9ed6 <__aeabi_ddiv+0x4a6>
    9ef0:	4643      	mov	r3, r8
    9ef2:	468b      	mov	fp, r1
    9ef4:	1a1d      	subs	r5, r3, r0
    9ef6:	e716      	b.n	9d26 <__aeabi_ddiv+0x2f6>
    9ef8:	469b      	mov	fp, r3
    9efa:	e6ca      	b.n	9c92 <__aeabi_ddiv+0x262>
    9efc:	0015      	movs	r5, r2
    9efe:	e6e7      	b.n	9cd0 <__aeabi_ddiv+0x2a0>
    9f00:	465a      	mov	r2, fp
    9f02:	08c9      	lsrs	r1, r1, #3
    9f04:	0752      	lsls	r2, r2, #29
    9f06:	430a      	orrs	r2, r1
    9f08:	055b      	lsls	r3, r3, #21
    9f0a:	4690      	mov	r8, r2
    9f0c:	0d5c      	lsrs	r4, r3, #21
    9f0e:	465a      	mov	r2, fp
    9f10:	2301      	movs	r3, #1
    9f12:	9902      	ldr	r1, [sp, #8]
    9f14:	0252      	lsls	r2, r2, #9
    9f16:	4019      	ands	r1, r3
    9f18:	0b12      	lsrs	r2, r2, #12
    9f1a:	468c      	mov	ip, r1
    9f1c:	e656      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d100      	bne.n	9f24 <__aeabi_ddiv+0x4f4>
    9f22:	e76f      	b.n	9e04 <__aeabi_ddiv+0x3d4>
    9f24:	4446      	add	r6, r8
    9f26:	1e4a      	subs	r2, r1, #1
    9f28:	45b0      	cmp	r8, r6
    9f2a:	d929      	bls.n	9f80 <__aeabi_ddiv+0x550>
    9f2c:	0011      	movs	r1, r2
    9f2e:	4286      	cmp	r6, r0
    9f30:	d000      	beq.n	9f34 <__aeabi_ddiv+0x504>
    9f32:	e765      	b.n	9e00 <__aeabi_ddiv+0x3d0>
    9f34:	9a03      	ldr	r2, [sp, #12]
    9f36:	4293      	cmp	r3, r2
    9f38:	d000      	beq.n	9f3c <__aeabi_ddiv+0x50c>
    9f3a:	e761      	b.n	9e00 <__aeabi_ddiv+0x3d0>
    9f3c:	e762      	b.n	9e04 <__aeabi_ddiv+0x3d4>
    9f3e:	2101      	movs	r1, #1
    9f40:	4249      	negs	r1, r1
    9f42:	2001      	movs	r0, #1
    9f44:	1ac2      	subs	r2, r0, r3
    9f46:	2a38      	cmp	r2, #56	; 0x38
    9f48:	dd21      	ble.n	9f8e <__aeabi_ddiv+0x55e>
    9f4a:	9b02      	ldr	r3, [sp, #8]
    9f4c:	4003      	ands	r3, r0
    9f4e:	469c      	mov	ip, r3
    9f50:	e638      	b.n	9bc4 <__aeabi_ddiv+0x194>
    9f52:	220f      	movs	r2, #15
    9f54:	400a      	ands	r2, r1
    9f56:	2a04      	cmp	r2, #4
    9f58:	d100      	bne.n	9f5c <__aeabi_ddiv+0x52c>
    9f5a:	e75b      	b.n	9e14 <__aeabi_ddiv+0x3e4>
    9f5c:	000a      	movs	r2, r1
    9f5e:	1d11      	adds	r1, r2, #4
    9f60:	4291      	cmp	r1, r2
    9f62:	4192      	sbcs	r2, r2
    9f64:	4252      	negs	r2, r2
    9f66:	4493      	add	fp, r2
    9f68:	e754      	b.n	9e14 <__aeabi_ddiv+0x3e4>
    9f6a:	4b47      	ldr	r3, [pc, #284]	; (a088 <__aeabi_ddiv+0x658>)
    9f6c:	18e3      	adds	r3, r4, r3
    9f6e:	2b00      	cmp	r3, #0
    9f70:	dde5      	ble.n	9f3e <__aeabi_ddiv+0x50e>
    9f72:	2201      	movs	r2, #1
    9f74:	4252      	negs	r2, r2
    9f76:	e7f2      	b.n	9f5e <__aeabi_ddiv+0x52e>
    9f78:	001d      	movs	r5, r3
    9f7a:	e6fa      	b.n	9d72 <__aeabi_ddiv+0x342>
    9f7c:	469a      	mov	sl, r3
    9f7e:	e71c      	b.n	9dba <__aeabi_ddiv+0x38a>
    9f80:	42b0      	cmp	r0, r6
    9f82:	d839      	bhi.n	9ff8 <__aeabi_ddiv+0x5c8>
    9f84:	d06e      	beq.n	a064 <__aeabi_ddiv+0x634>
    9f86:	0011      	movs	r1, r2
    9f88:	e73a      	b.n	9e00 <__aeabi_ddiv+0x3d0>
    9f8a:	9302      	str	r3, [sp, #8]
    9f8c:	e73a      	b.n	9e04 <__aeabi_ddiv+0x3d4>
    9f8e:	2a1f      	cmp	r2, #31
    9f90:	dc3c      	bgt.n	a00c <__aeabi_ddiv+0x5dc>
    9f92:	2320      	movs	r3, #32
    9f94:	1a9b      	subs	r3, r3, r2
    9f96:	000c      	movs	r4, r1
    9f98:	4658      	mov	r0, fp
    9f9a:	4099      	lsls	r1, r3
    9f9c:	4098      	lsls	r0, r3
    9f9e:	1e4b      	subs	r3, r1, #1
    9fa0:	4199      	sbcs	r1, r3
    9fa2:	465b      	mov	r3, fp
    9fa4:	40d4      	lsrs	r4, r2
    9fa6:	40d3      	lsrs	r3, r2
    9fa8:	4320      	orrs	r0, r4
    9faa:	4308      	orrs	r0, r1
    9fac:	001a      	movs	r2, r3
    9fae:	0743      	lsls	r3, r0, #29
    9fb0:	d009      	beq.n	9fc6 <__aeabi_ddiv+0x596>
    9fb2:	230f      	movs	r3, #15
    9fb4:	4003      	ands	r3, r0
    9fb6:	2b04      	cmp	r3, #4
    9fb8:	d005      	beq.n	9fc6 <__aeabi_ddiv+0x596>
    9fba:	0001      	movs	r1, r0
    9fbc:	1d08      	adds	r0, r1, #4
    9fbe:	4288      	cmp	r0, r1
    9fc0:	419b      	sbcs	r3, r3
    9fc2:	425b      	negs	r3, r3
    9fc4:	18d2      	adds	r2, r2, r3
    9fc6:	0213      	lsls	r3, r2, #8
    9fc8:	d53a      	bpl.n	a040 <__aeabi_ddiv+0x610>
    9fca:	2301      	movs	r3, #1
    9fcc:	9a02      	ldr	r2, [sp, #8]
    9fce:	2401      	movs	r4, #1
    9fd0:	401a      	ands	r2, r3
    9fd2:	2300      	movs	r3, #0
    9fd4:	4694      	mov	ip, r2
    9fd6:	4698      	mov	r8, r3
    9fd8:	2200      	movs	r2, #0
    9fda:	e5f7      	b.n	9bcc <__aeabi_ddiv+0x19c>
    9fdc:	2102      	movs	r1, #2
    9fde:	4249      	negs	r1, r1
    9fe0:	468c      	mov	ip, r1
    9fe2:	9d03      	ldr	r5, [sp, #12]
    9fe4:	44e3      	add	fp, ip
    9fe6:	46ac      	mov	ip, r5
    9fe8:	44e2      	add	sl, ip
    9fea:	45aa      	cmp	sl, r5
    9fec:	41ad      	sbcs	r5, r5
    9fee:	426d      	negs	r5, r5
    9ff0:	4445      	add	r5, r8
    9ff2:	18ed      	adds	r5, r5, r3
    9ff4:	1a2d      	subs	r5, r5, r0
    9ff6:	e696      	b.n	9d26 <__aeabi_ddiv+0x2f6>
    9ff8:	1e8a      	subs	r2, r1, #2
    9ffa:	9903      	ldr	r1, [sp, #12]
    9ffc:	004d      	lsls	r5, r1, #1
    9ffe:	428d      	cmp	r5, r1
    a000:	4189      	sbcs	r1, r1
    a002:	4249      	negs	r1, r1
    a004:	4441      	add	r1, r8
    a006:	1876      	adds	r6, r6, r1
    a008:	9503      	str	r5, [sp, #12]
    a00a:	e78f      	b.n	9f2c <__aeabi_ddiv+0x4fc>
    a00c:	201f      	movs	r0, #31
    a00e:	4240      	negs	r0, r0
    a010:	1ac3      	subs	r3, r0, r3
    a012:	4658      	mov	r0, fp
    a014:	40d8      	lsrs	r0, r3
    a016:	0003      	movs	r3, r0
    a018:	2a20      	cmp	r2, #32
    a01a:	d028      	beq.n	a06e <__aeabi_ddiv+0x63e>
    a01c:	2040      	movs	r0, #64	; 0x40
    a01e:	465d      	mov	r5, fp
    a020:	1a82      	subs	r2, r0, r2
    a022:	4095      	lsls	r5, r2
    a024:	4329      	orrs	r1, r5
    a026:	1e4a      	subs	r2, r1, #1
    a028:	4191      	sbcs	r1, r2
    a02a:	4319      	orrs	r1, r3
    a02c:	2307      	movs	r3, #7
    a02e:	2200      	movs	r2, #0
    a030:	400b      	ands	r3, r1
    a032:	d009      	beq.n	a048 <__aeabi_ddiv+0x618>
    a034:	230f      	movs	r3, #15
    a036:	2200      	movs	r2, #0
    a038:	400b      	ands	r3, r1
    a03a:	0008      	movs	r0, r1
    a03c:	2b04      	cmp	r3, #4
    a03e:	d1bd      	bne.n	9fbc <__aeabi_ddiv+0x58c>
    a040:	0001      	movs	r1, r0
    a042:	0753      	lsls	r3, r2, #29
    a044:	0252      	lsls	r2, r2, #9
    a046:	0b12      	lsrs	r2, r2, #12
    a048:	08c9      	lsrs	r1, r1, #3
    a04a:	4319      	orrs	r1, r3
    a04c:	2301      	movs	r3, #1
    a04e:	4688      	mov	r8, r1
    a050:	9902      	ldr	r1, [sp, #8]
    a052:	2400      	movs	r4, #0
    a054:	4019      	ands	r1, r3
    a056:	468c      	mov	ip, r1
    a058:	e5b8      	b.n	9bcc <__aeabi_ddiv+0x19c>
    a05a:	4552      	cmp	r2, sl
    a05c:	d8be      	bhi.n	9fdc <__aeabi_ddiv+0x5ac>
    a05e:	468b      	mov	fp, r1
    a060:	2500      	movs	r5, #0
    a062:	e660      	b.n	9d26 <__aeabi_ddiv+0x2f6>
    a064:	9d03      	ldr	r5, [sp, #12]
    a066:	429d      	cmp	r5, r3
    a068:	d3c6      	bcc.n	9ff8 <__aeabi_ddiv+0x5c8>
    a06a:	0011      	movs	r1, r2
    a06c:	e762      	b.n	9f34 <__aeabi_ddiv+0x504>
    a06e:	2500      	movs	r5, #0
    a070:	e7d8      	b.n	a024 <__aeabi_ddiv+0x5f4>
    a072:	2280      	movs	r2, #128	; 0x80
    a074:	465b      	mov	r3, fp
    a076:	0312      	lsls	r2, r2, #12
    a078:	431a      	orrs	r2, r3
    a07a:	9b01      	ldr	r3, [sp, #4]
    a07c:	0312      	lsls	r2, r2, #12
    a07e:	0b12      	lsrs	r2, r2, #12
    a080:	469c      	mov	ip, r3
    a082:	4688      	mov	r8, r1
    a084:	4c03      	ldr	r4, [pc, #12]	; (a094 <__aeabi_ddiv+0x664>)
    a086:	e5a1      	b.n	9bcc <__aeabi_ddiv+0x19c>
    a088:	000003ff 	.word	0x000003ff
    a08c:	feffffff 	.word	0xfeffffff
    a090:	000007fe 	.word	0x000007fe
    a094:	000007ff 	.word	0x000007ff

0000a098 <__aeabi_dmul>:
    a098:	b5f0      	push	{r4, r5, r6, r7, lr}
    a09a:	4657      	mov	r7, sl
    a09c:	4645      	mov	r5, r8
    a09e:	46de      	mov	lr, fp
    a0a0:	464e      	mov	r6, r9
    a0a2:	b5e0      	push	{r5, r6, r7, lr}
    a0a4:	030c      	lsls	r4, r1, #12
    a0a6:	4698      	mov	r8, r3
    a0a8:	004e      	lsls	r6, r1, #1
    a0aa:	0b23      	lsrs	r3, r4, #12
    a0ac:	b087      	sub	sp, #28
    a0ae:	0007      	movs	r7, r0
    a0b0:	4692      	mov	sl, r2
    a0b2:	469b      	mov	fp, r3
    a0b4:	0d76      	lsrs	r6, r6, #21
    a0b6:	0fcd      	lsrs	r5, r1, #31
    a0b8:	2e00      	cmp	r6, #0
    a0ba:	d06b      	beq.n	a194 <__aeabi_dmul+0xfc>
    a0bc:	4b6d      	ldr	r3, [pc, #436]	; (a274 <__aeabi_dmul+0x1dc>)
    a0be:	429e      	cmp	r6, r3
    a0c0:	d035      	beq.n	a12e <__aeabi_dmul+0x96>
    a0c2:	2480      	movs	r4, #128	; 0x80
    a0c4:	465b      	mov	r3, fp
    a0c6:	0f42      	lsrs	r2, r0, #29
    a0c8:	0424      	lsls	r4, r4, #16
    a0ca:	00db      	lsls	r3, r3, #3
    a0cc:	4314      	orrs	r4, r2
    a0ce:	431c      	orrs	r4, r3
    a0d0:	00c3      	lsls	r3, r0, #3
    a0d2:	4699      	mov	r9, r3
    a0d4:	4b68      	ldr	r3, [pc, #416]	; (a278 <__aeabi_dmul+0x1e0>)
    a0d6:	46a3      	mov	fp, r4
    a0d8:	469c      	mov	ip, r3
    a0da:	2300      	movs	r3, #0
    a0dc:	2700      	movs	r7, #0
    a0de:	4466      	add	r6, ip
    a0e0:	9302      	str	r3, [sp, #8]
    a0e2:	4643      	mov	r3, r8
    a0e4:	031c      	lsls	r4, r3, #12
    a0e6:	005a      	lsls	r2, r3, #1
    a0e8:	0fdb      	lsrs	r3, r3, #31
    a0ea:	4650      	mov	r0, sl
    a0ec:	0b24      	lsrs	r4, r4, #12
    a0ee:	0d52      	lsrs	r2, r2, #21
    a0f0:	4698      	mov	r8, r3
    a0f2:	d100      	bne.n	a0f6 <__aeabi_dmul+0x5e>
    a0f4:	e076      	b.n	a1e4 <__aeabi_dmul+0x14c>
    a0f6:	4b5f      	ldr	r3, [pc, #380]	; (a274 <__aeabi_dmul+0x1dc>)
    a0f8:	429a      	cmp	r2, r3
    a0fa:	d06d      	beq.n	a1d8 <__aeabi_dmul+0x140>
    a0fc:	2380      	movs	r3, #128	; 0x80
    a0fe:	0f41      	lsrs	r1, r0, #29
    a100:	041b      	lsls	r3, r3, #16
    a102:	430b      	orrs	r3, r1
    a104:	495c      	ldr	r1, [pc, #368]	; (a278 <__aeabi_dmul+0x1e0>)
    a106:	00e4      	lsls	r4, r4, #3
    a108:	468c      	mov	ip, r1
    a10a:	431c      	orrs	r4, r3
    a10c:	00c3      	lsls	r3, r0, #3
    a10e:	2000      	movs	r0, #0
    a110:	4462      	add	r2, ip
    a112:	4641      	mov	r1, r8
    a114:	18b6      	adds	r6, r6, r2
    a116:	4069      	eors	r1, r5
    a118:	1c72      	adds	r2, r6, #1
    a11a:	9101      	str	r1, [sp, #4]
    a11c:	4694      	mov	ip, r2
    a11e:	4307      	orrs	r7, r0
    a120:	2f0f      	cmp	r7, #15
    a122:	d900      	bls.n	a126 <__aeabi_dmul+0x8e>
    a124:	e0b0      	b.n	a288 <__aeabi_dmul+0x1f0>
    a126:	4a55      	ldr	r2, [pc, #340]	; (a27c <__aeabi_dmul+0x1e4>)
    a128:	00bf      	lsls	r7, r7, #2
    a12a:	59d2      	ldr	r2, [r2, r7]
    a12c:	4697      	mov	pc, r2
    a12e:	465b      	mov	r3, fp
    a130:	4303      	orrs	r3, r0
    a132:	4699      	mov	r9, r3
    a134:	d000      	beq.n	a138 <__aeabi_dmul+0xa0>
    a136:	e087      	b.n	a248 <__aeabi_dmul+0x1b0>
    a138:	2300      	movs	r3, #0
    a13a:	469b      	mov	fp, r3
    a13c:	3302      	adds	r3, #2
    a13e:	2708      	movs	r7, #8
    a140:	9302      	str	r3, [sp, #8]
    a142:	e7ce      	b.n	a0e2 <__aeabi_dmul+0x4a>
    a144:	4642      	mov	r2, r8
    a146:	9201      	str	r2, [sp, #4]
    a148:	2802      	cmp	r0, #2
    a14a:	d067      	beq.n	a21c <__aeabi_dmul+0x184>
    a14c:	2803      	cmp	r0, #3
    a14e:	d100      	bne.n	a152 <__aeabi_dmul+0xba>
    a150:	e20e      	b.n	a570 <__aeabi_dmul+0x4d8>
    a152:	2801      	cmp	r0, #1
    a154:	d000      	beq.n	a158 <__aeabi_dmul+0xc0>
    a156:	e162      	b.n	a41e <__aeabi_dmul+0x386>
    a158:	2300      	movs	r3, #0
    a15a:	2400      	movs	r4, #0
    a15c:	2200      	movs	r2, #0
    a15e:	4699      	mov	r9, r3
    a160:	9901      	ldr	r1, [sp, #4]
    a162:	4001      	ands	r1, r0
    a164:	b2cd      	uxtb	r5, r1
    a166:	2100      	movs	r1, #0
    a168:	0312      	lsls	r2, r2, #12
    a16a:	0d0b      	lsrs	r3, r1, #20
    a16c:	0b12      	lsrs	r2, r2, #12
    a16e:	051b      	lsls	r3, r3, #20
    a170:	4313      	orrs	r3, r2
    a172:	4a43      	ldr	r2, [pc, #268]	; (a280 <__aeabi_dmul+0x1e8>)
    a174:	0524      	lsls	r4, r4, #20
    a176:	4013      	ands	r3, r2
    a178:	431c      	orrs	r4, r3
    a17a:	0064      	lsls	r4, r4, #1
    a17c:	07ed      	lsls	r5, r5, #31
    a17e:	0864      	lsrs	r4, r4, #1
    a180:	432c      	orrs	r4, r5
    a182:	4648      	mov	r0, r9
    a184:	0021      	movs	r1, r4
    a186:	b007      	add	sp, #28
    a188:	bc3c      	pop	{r2, r3, r4, r5}
    a18a:	4690      	mov	r8, r2
    a18c:	4699      	mov	r9, r3
    a18e:	46a2      	mov	sl, r4
    a190:	46ab      	mov	fp, r5
    a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a194:	4303      	orrs	r3, r0
    a196:	4699      	mov	r9, r3
    a198:	d04f      	beq.n	a23a <__aeabi_dmul+0x1a2>
    a19a:	465b      	mov	r3, fp
    a19c:	2b00      	cmp	r3, #0
    a19e:	d100      	bne.n	a1a2 <__aeabi_dmul+0x10a>
    a1a0:	e189      	b.n	a4b6 <__aeabi_dmul+0x41e>
    a1a2:	4658      	mov	r0, fp
    a1a4:	f000 fd7a 	bl	ac9c <__clzsi2>
    a1a8:	0003      	movs	r3, r0
    a1aa:	3b0b      	subs	r3, #11
    a1ac:	2b1c      	cmp	r3, #28
    a1ae:	dd00      	ble.n	a1b2 <__aeabi_dmul+0x11a>
    a1b0:	e17a      	b.n	a4a8 <__aeabi_dmul+0x410>
    a1b2:	221d      	movs	r2, #29
    a1b4:	1ad3      	subs	r3, r2, r3
    a1b6:	003a      	movs	r2, r7
    a1b8:	0001      	movs	r1, r0
    a1ba:	465c      	mov	r4, fp
    a1bc:	40da      	lsrs	r2, r3
    a1be:	3908      	subs	r1, #8
    a1c0:	408c      	lsls	r4, r1
    a1c2:	0013      	movs	r3, r2
    a1c4:	408f      	lsls	r7, r1
    a1c6:	4323      	orrs	r3, r4
    a1c8:	469b      	mov	fp, r3
    a1ca:	46b9      	mov	r9, r7
    a1cc:	2300      	movs	r3, #0
    a1ce:	4e2d      	ldr	r6, [pc, #180]	; (a284 <__aeabi_dmul+0x1ec>)
    a1d0:	2700      	movs	r7, #0
    a1d2:	1a36      	subs	r6, r6, r0
    a1d4:	9302      	str	r3, [sp, #8]
    a1d6:	e784      	b.n	a0e2 <__aeabi_dmul+0x4a>
    a1d8:	4653      	mov	r3, sl
    a1da:	4323      	orrs	r3, r4
    a1dc:	d12a      	bne.n	a234 <__aeabi_dmul+0x19c>
    a1de:	2400      	movs	r4, #0
    a1e0:	2002      	movs	r0, #2
    a1e2:	e796      	b.n	a112 <__aeabi_dmul+0x7a>
    a1e4:	4653      	mov	r3, sl
    a1e6:	4323      	orrs	r3, r4
    a1e8:	d020      	beq.n	a22c <__aeabi_dmul+0x194>
    a1ea:	2c00      	cmp	r4, #0
    a1ec:	d100      	bne.n	a1f0 <__aeabi_dmul+0x158>
    a1ee:	e157      	b.n	a4a0 <__aeabi_dmul+0x408>
    a1f0:	0020      	movs	r0, r4
    a1f2:	f000 fd53 	bl	ac9c <__clzsi2>
    a1f6:	0003      	movs	r3, r0
    a1f8:	3b0b      	subs	r3, #11
    a1fa:	2b1c      	cmp	r3, #28
    a1fc:	dd00      	ble.n	a200 <__aeabi_dmul+0x168>
    a1fe:	e149      	b.n	a494 <__aeabi_dmul+0x3fc>
    a200:	211d      	movs	r1, #29
    a202:	1acb      	subs	r3, r1, r3
    a204:	4651      	mov	r1, sl
    a206:	0002      	movs	r2, r0
    a208:	40d9      	lsrs	r1, r3
    a20a:	4653      	mov	r3, sl
    a20c:	3a08      	subs	r2, #8
    a20e:	4094      	lsls	r4, r2
    a210:	4093      	lsls	r3, r2
    a212:	430c      	orrs	r4, r1
    a214:	4a1b      	ldr	r2, [pc, #108]	; (a284 <__aeabi_dmul+0x1ec>)
    a216:	1a12      	subs	r2, r2, r0
    a218:	2000      	movs	r0, #0
    a21a:	e77a      	b.n	a112 <__aeabi_dmul+0x7a>
    a21c:	2501      	movs	r5, #1
    a21e:	9b01      	ldr	r3, [sp, #4]
    a220:	4c14      	ldr	r4, [pc, #80]	; (a274 <__aeabi_dmul+0x1dc>)
    a222:	401d      	ands	r5, r3
    a224:	2300      	movs	r3, #0
    a226:	2200      	movs	r2, #0
    a228:	4699      	mov	r9, r3
    a22a:	e79c      	b.n	a166 <__aeabi_dmul+0xce>
    a22c:	2400      	movs	r4, #0
    a22e:	2200      	movs	r2, #0
    a230:	2001      	movs	r0, #1
    a232:	e76e      	b.n	a112 <__aeabi_dmul+0x7a>
    a234:	4653      	mov	r3, sl
    a236:	2003      	movs	r0, #3
    a238:	e76b      	b.n	a112 <__aeabi_dmul+0x7a>
    a23a:	2300      	movs	r3, #0
    a23c:	469b      	mov	fp, r3
    a23e:	3301      	adds	r3, #1
    a240:	2704      	movs	r7, #4
    a242:	2600      	movs	r6, #0
    a244:	9302      	str	r3, [sp, #8]
    a246:	e74c      	b.n	a0e2 <__aeabi_dmul+0x4a>
    a248:	2303      	movs	r3, #3
    a24a:	4681      	mov	r9, r0
    a24c:	270c      	movs	r7, #12
    a24e:	9302      	str	r3, [sp, #8]
    a250:	e747      	b.n	a0e2 <__aeabi_dmul+0x4a>
    a252:	2280      	movs	r2, #128	; 0x80
    a254:	2300      	movs	r3, #0
    a256:	2500      	movs	r5, #0
    a258:	0312      	lsls	r2, r2, #12
    a25a:	4699      	mov	r9, r3
    a25c:	4c05      	ldr	r4, [pc, #20]	; (a274 <__aeabi_dmul+0x1dc>)
    a25e:	e782      	b.n	a166 <__aeabi_dmul+0xce>
    a260:	465c      	mov	r4, fp
    a262:	464b      	mov	r3, r9
    a264:	9802      	ldr	r0, [sp, #8]
    a266:	e76f      	b.n	a148 <__aeabi_dmul+0xb0>
    a268:	465c      	mov	r4, fp
    a26a:	464b      	mov	r3, r9
    a26c:	9501      	str	r5, [sp, #4]
    a26e:	9802      	ldr	r0, [sp, #8]
    a270:	e76a      	b.n	a148 <__aeabi_dmul+0xb0>
    a272:	46c0      	nop			; (mov r8, r8)
    a274:	000007ff 	.word	0x000007ff
    a278:	fffffc01 	.word	0xfffffc01
    a27c:	0000c790 	.word	0x0000c790
    a280:	800fffff 	.word	0x800fffff
    a284:	fffffc0d 	.word	0xfffffc0d
    a288:	464a      	mov	r2, r9
    a28a:	4649      	mov	r1, r9
    a28c:	0c17      	lsrs	r7, r2, #16
    a28e:	0c1a      	lsrs	r2, r3, #16
    a290:	041b      	lsls	r3, r3, #16
    a292:	0c1b      	lsrs	r3, r3, #16
    a294:	0408      	lsls	r0, r1, #16
    a296:	0019      	movs	r1, r3
    a298:	0c00      	lsrs	r0, r0, #16
    a29a:	4341      	muls	r1, r0
    a29c:	0015      	movs	r5, r2
    a29e:	4688      	mov	r8, r1
    a2a0:	0019      	movs	r1, r3
    a2a2:	437d      	muls	r5, r7
    a2a4:	4379      	muls	r1, r7
    a2a6:	9503      	str	r5, [sp, #12]
    a2a8:	4689      	mov	r9, r1
    a2aa:	0029      	movs	r1, r5
    a2ac:	0015      	movs	r5, r2
    a2ae:	4345      	muls	r5, r0
    a2b0:	444d      	add	r5, r9
    a2b2:	9502      	str	r5, [sp, #8]
    a2b4:	4645      	mov	r5, r8
    a2b6:	0c2d      	lsrs	r5, r5, #16
    a2b8:	46aa      	mov	sl, r5
    a2ba:	9d02      	ldr	r5, [sp, #8]
    a2bc:	4455      	add	r5, sl
    a2be:	45a9      	cmp	r9, r5
    a2c0:	d906      	bls.n	a2d0 <__aeabi_dmul+0x238>
    a2c2:	468a      	mov	sl, r1
    a2c4:	2180      	movs	r1, #128	; 0x80
    a2c6:	0249      	lsls	r1, r1, #9
    a2c8:	4689      	mov	r9, r1
    a2ca:	44ca      	add	sl, r9
    a2cc:	4651      	mov	r1, sl
    a2ce:	9103      	str	r1, [sp, #12]
    a2d0:	0c29      	lsrs	r1, r5, #16
    a2d2:	9104      	str	r1, [sp, #16]
    a2d4:	4641      	mov	r1, r8
    a2d6:	0409      	lsls	r1, r1, #16
    a2d8:	042d      	lsls	r5, r5, #16
    a2da:	0c09      	lsrs	r1, r1, #16
    a2dc:	4688      	mov	r8, r1
    a2de:	0029      	movs	r1, r5
    a2e0:	0c25      	lsrs	r5, r4, #16
    a2e2:	0424      	lsls	r4, r4, #16
    a2e4:	4441      	add	r1, r8
    a2e6:	0c24      	lsrs	r4, r4, #16
    a2e8:	9105      	str	r1, [sp, #20]
    a2ea:	0021      	movs	r1, r4
    a2ec:	4341      	muls	r1, r0
    a2ee:	4688      	mov	r8, r1
    a2f0:	0021      	movs	r1, r4
    a2f2:	4379      	muls	r1, r7
    a2f4:	468a      	mov	sl, r1
    a2f6:	4368      	muls	r0, r5
    a2f8:	4641      	mov	r1, r8
    a2fa:	4450      	add	r0, sl
    a2fc:	4681      	mov	r9, r0
    a2fe:	0c08      	lsrs	r0, r1, #16
    a300:	4448      	add	r0, r9
    a302:	436f      	muls	r7, r5
    a304:	4582      	cmp	sl, r0
    a306:	d903      	bls.n	a310 <__aeabi_dmul+0x278>
    a308:	2180      	movs	r1, #128	; 0x80
    a30a:	0249      	lsls	r1, r1, #9
    a30c:	4689      	mov	r9, r1
    a30e:	444f      	add	r7, r9
    a310:	0c01      	lsrs	r1, r0, #16
    a312:	4689      	mov	r9, r1
    a314:	0039      	movs	r1, r7
    a316:	4449      	add	r1, r9
    a318:	9102      	str	r1, [sp, #8]
    a31a:	4641      	mov	r1, r8
    a31c:	040f      	lsls	r7, r1, #16
    a31e:	9904      	ldr	r1, [sp, #16]
    a320:	0c3f      	lsrs	r7, r7, #16
    a322:	4688      	mov	r8, r1
    a324:	0400      	lsls	r0, r0, #16
    a326:	19c0      	adds	r0, r0, r7
    a328:	4480      	add	r8, r0
    a32a:	4641      	mov	r1, r8
    a32c:	9104      	str	r1, [sp, #16]
    a32e:	4659      	mov	r1, fp
    a330:	0c0f      	lsrs	r7, r1, #16
    a332:	0409      	lsls	r1, r1, #16
    a334:	0c09      	lsrs	r1, r1, #16
    a336:	4688      	mov	r8, r1
    a338:	4359      	muls	r1, r3
    a33a:	468a      	mov	sl, r1
    a33c:	0039      	movs	r1, r7
    a33e:	4351      	muls	r1, r2
    a340:	4689      	mov	r9, r1
    a342:	4641      	mov	r1, r8
    a344:	434a      	muls	r2, r1
    a346:	4651      	mov	r1, sl
    a348:	0c09      	lsrs	r1, r1, #16
    a34a:	468b      	mov	fp, r1
    a34c:	437b      	muls	r3, r7
    a34e:	18d2      	adds	r2, r2, r3
    a350:	445a      	add	r2, fp
    a352:	4293      	cmp	r3, r2
    a354:	d903      	bls.n	a35e <__aeabi_dmul+0x2c6>
    a356:	2380      	movs	r3, #128	; 0x80
    a358:	025b      	lsls	r3, r3, #9
    a35a:	469b      	mov	fp, r3
    a35c:	44d9      	add	r9, fp
    a35e:	4651      	mov	r1, sl
    a360:	0409      	lsls	r1, r1, #16
    a362:	0c09      	lsrs	r1, r1, #16
    a364:	468a      	mov	sl, r1
    a366:	4641      	mov	r1, r8
    a368:	4361      	muls	r1, r4
    a36a:	437c      	muls	r4, r7
    a36c:	0c13      	lsrs	r3, r2, #16
    a36e:	0412      	lsls	r2, r2, #16
    a370:	444b      	add	r3, r9
    a372:	4452      	add	r2, sl
    a374:	46a1      	mov	r9, r4
    a376:	468a      	mov	sl, r1
    a378:	003c      	movs	r4, r7
    a37a:	4641      	mov	r1, r8
    a37c:	436c      	muls	r4, r5
    a37e:	434d      	muls	r5, r1
    a380:	4651      	mov	r1, sl
    a382:	444d      	add	r5, r9
    a384:	0c0f      	lsrs	r7, r1, #16
    a386:	197d      	adds	r5, r7, r5
    a388:	45a9      	cmp	r9, r5
    a38a:	d903      	bls.n	a394 <__aeabi_dmul+0x2fc>
    a38c:	2180      	movs	r1, #128	; 0x80
    a38e:	0249      	lsls	r1, r1, #9
    a390:	4688      	mov	r8, r1
    a392:	4444      	add	r4, r8
    a394:	9f04      	ldr	r7, [sp, #16]
    a396:	9903      	ldr	r1, [sp, #12]
    a398:	46b8      	mov	r8, r7
    a39a:	4441      	add	r1, r8
    a39c:	468b      	mov	fp, r1
    a39e:	4583      	cmp	fp, r0
    a3a0:	4180      	sbcs	r0, r0
    a3a2:	4241      	negs	r1, r0
    a3a4:	4688      	mov	r8, r1
    a3a6:	4651      	mov	r1, sl
    a3a8:	0408      	lsls	r0, r1, #16
    a3aa:	042f      	lsls	r7, r5, #16
    a3ac:	0c00      	lsrs	r0, r0, #16
    a3ae:	183f      	adds	r7, r7, r0
    a3b0:	4658      	mov	r0, fp
    a3b2:	9902      	ldr	r1, [sp, #8]
    a3b4:	1810      	adds	r0, r2, r0
    a3b6:	4689      	mov	r9, r1
    a3b8:	4290      	cmp	r0, r2
    a3ba:	4192      	sbcs	r2, r2
    a3bc:	444f      	add	r7, r9
    a3be:	46ba      	mov	sl, r7
    a3c0:	4252      	negs	r2, r2
    a3c2:	4699      	mov	r9, r3
    a3c4:	4693      	mov	fp, r2
    a3c6:	44c2      	add	sl, r8
    a3c8:	44d1      	add	r9, sl
    a3ca:	44cb      	add	fp, r9
    a3cc:	428f      	cmp	r7, r1
    a3ce:	41bf      	sbcs	r7, r7
    a3d0:	45c2      	cmp	sl, r8
    a3d2:	4189      	sbcs	r1, r1
    a3d4:	4599      	cmp	r9, r3
    a3d6:	419b      	sbcs	r3, r3
    a3d8:	4593      	cmp	fp, r2
    a3da:	4192      	sbcs	r2, r2
    a3dc:	427f      	negs	r7, r7
    a3de:	4249      	negs	r1, r1
    a3e0:	0c2d      	lsrs	r5, r5, #16
    a3e2:	4252      	negs	r2, r2
    a3e4:	430f      	orrs	r7, r1
    a3e6:	425b      	negs	r3, r3
    a3e8:	4313      	orrs	r3, r2
    a3ea:	197f      	adds	r7, r7, r5
    a3ec:	18ff      	adds	r7, r7, r3
    a3ee:	465b      	mov	r3, fp
    a3f0:	193c      	adds	r4, r7, r4
    a3f2:	0ddb      	lsrs	r3, r3, #23
    a3f4:	9a05      	ldr	r2, [sp, #20]
    a3f6:	0264      	lsls	r4, r4, #9
    a3f8:	431c      	orrs	r4, r3
    a3fa:	0243      	lsls	r3, r0, #9
    a3fc:	4313      	orrs	r3, r2
    a3fe:	1e5d      	subs	r5, r3, #1
    a400:	41ab      	sbcs	r3, r5
    a402:	465a      	mov	r2, fp
    a404:	0dc0      	lsrs	r0, r0, #23
    a406:	4303      	orrs	r3, r0
    a408:	0252      	lsls	r2, r2, #9
    a40a:	4313      	orrs	r3, r2
    a40c:	01e2      	lsls	r2, r4, #7
    a40e:	d556      	bpl.n	a4be <__aeabi_dmul+0x426>
    a410:	2001      	movs	r0, #1
    a412:	085a      	lsrs	r2, r3, #1
    a414:	4003      	ands	r3, r0
    a416:	4313      	orrs	r3, r2
    a418:	07e2      	lsls	r2, r4, #31
    a41a:	4313      	orrs	r3, r2
    a41c:	0864      	lsrs	r4, r4, #1
    a41e:	485a      	ldr	r0, [pc, #360]	; (a588 <__aeabi_dmul+0x4f0>)
    a420:	4460      	add	r0, ip
    a422:	2800      	cmp	r0, #0
    a424:	dd4d      	ble.n	a4c2 <__aeabi_dmul+0x42a>
    a426:	075a      	lsls	r2, r3, #29
    a428:	d009      	beq.n	a43e <__aeabi_dmul+0x3a6>
    a42a:	220f      	movs	r2, #15
    a42c:	401a      	ands	r2, r3
    a42e:	2a04      	cmp	r2, #4
    a430:	d005      	beq.n	a43e <__aeabi_dmul+0x3a6>
    a432:	1d1a      	adds	r2, r3, #4
    a434:	429a      	cmp	r2, r3
    a436:	419b      	sbcs	r3, r3
    a438:	425b      	negs	r3, r3
    a43a:	18e4      	adds	r4, r4, r3
    a43c:	0013      	movs	r3, r2
    a43e:	01e2      	lsls	r2, r4, #7
    a440:	d504      	bpl.n	a44c <__aeabi_dmul+0x3b4>
    a442:	2080      	movs	r0, #128	; 0x80
    a444:	4a51      	ldr	r2, [pc, #324]	; (a58c <__aeabi_dmul+0x4f4>)
    a446:	00c0      	lsls	r0, r0, #3
    a448:	4014      	ands	r4, r2
    a44a:	4460      	add	r0, ip
    a44c:	4a50      	ldr	r2, [pc, #320]	; (a590 <__aeabi_dmul+0x4f8>)
    a44e:	4290      	cmp	r0, r2
    a450:	dd00      	ble.n	a454 <__aeabi_dmul+0x3bc>
    a452:	e6e3      	b.n	a21c <__aeabi_dmul+0x184>
    a454:	2501      	movs	r5, #1
    a456:	08db      	lsrs	r3, r3, #3
    a458:	0762      	lsls	r2, r4, #29
    a45a:	431a      	orrs	r2, r3
    a45c:	0264      	lsls	r4, r4, #9
    a45e:	9b01      	ldr	r3, [sp, #4]
    a460:	4691      	mov	r9, r2
    a462:	0b22      	lsrs	r2, r4, #12
    a464:	0544      	lsls	r4, r0, #21
    a466:	0d64      	lsrs	r4, r4, #21
    a468:	401d      	ands	r5, r3
    a46a:	e67c      	b.n	a166 <__aeabi_dmul+0xce>
    a46c:	2280      	movs	r2, #128	; 0x80
    a46e:	4659      	mov	r1, fp
    a470:	0312      	lsls	r2, r2, #12
    a472:	4211      	tst	r1, r2
    a474:	d008      	beq.n	a488 <__aeabi_dmul+0x3f0>
    a476:	4214      	tst	r4, r2
    a478:	d106      	bne.n	a488 <__aeabi_dmul+0x3f0>
    a47a:	4322      	orrs	r2, r4
    a47c:	0312      	lsls	r2, r2, #12
    a47e:	0b12      	lsrs	r2, r2, #12
    a480:	4645      	mov	r5, r8
    a482:	4699      	mov	r9, r3
    a484:	4c43      	ldr	r4, [pc, #268]	; (a594 <__aeabi_dmul+0x4fc>)
    a486:	e66e      	b.n	a166 <__aeabi_dmul+0xce>
    a488:	465b      	mov	r3, fp
    a48a:	431a      	orrs	r2, r3
    a48c:	0312      	lsls	r2, r2, #12
    a48e:	0b12      	lsrs	r2, r2, #12
    a490:	4c40      	ldr	r4, [pc, #256]	; (a594 <__aeabi_dmul+0x4fc>)
    a492:	e668      	b.n	a166 <__aeabi_dmul+0xce>
    a494:	0003      	movs	r3, r0
    a496:	4654      	mov	r4, sl
    a498:	3b28      	subs	r3, #40	; 0x28
    a49a:	409c      	lsls	r4, r3
    a49c:	2300      	movs	r3, #0
    a49e:	e6b9      	b.n	a214 <__aeabi_dmul+0x17c>
    a4a0:	f000 fbfc 	bl	ac9c <__clzsi2>
    a4a4:	3020      	adds	r0, #32
    a4a6:	e6a6      	b.n	a1f6 <__aeabi_dmul+0x15e>
    a4a8:	0003      	movs	r3, r0
    a4aa:	3b28      	subs	r3, #40	; 0x28
    a4ac:	409f      	lsls	r7, r3
    a4ae:	2300      	movs	r3, #0
    a4b0:	46bb      	mov	fp, r7
    a4b2:	4699      	mov	r9, r3
    a4b4:	e68a      	b.n	a1cc <__aeabi_dmul+0x134>
    a4b6:	f000 fbf1 	bl	ac9c <__clzsi2>
    a4ba:	3020      	adds	r0, #32
    a4bc:	e674      	b.n	a1a8 <__aeabi_dmul+0x110>
    a4be:	46b4      	mov	ip, r6
    a4c0:	e7ad      	b.n	a41e <__aeabi_dmul+0x386>
    a4c2:	2501      	movs	r5, #1
    a4c4:	1a2a      	subs	r2, r5, r0
    a4c6:	2a38      	cmp	r2, #56	; 0x38
    a4c8:	dd06      	ble.n	a4d8 <__aeabi_dmul+0x440>
    a4ca:	9b01      	ldr	r3, [sp, #4]
    a4cc:	2400      	movs	r4, #0
    a4ce:	401d      	ands	r5, r3
    a4d0:	2300      	movs	r3, #0
    a4d2:	2200      	movs	r2, #0
    a4d4:	4699      	mov	r9, r3
    a4d6:	e646      	b.n	a166 <__aeabi_dmul+0xce>
    a4d8:	2a1f      	cmp	r2, #31
    a4da:	dc21      	bgt.n	a520 <__aeabi_dmul+0x488>
    a4dc:	2520      	movs	r5, #32
    a4de:	0020      	movs	r0, r4
    a4e0:	1aad      	subs	r5, r5, r2
    a4e2:	001e      	movs	r6, r3
    a4e4:	40ab      	lsls	r3, r5
    a4e6:	40a8      	lsls	r0, r5
    a4e8:	40d6      	lsrs	r6, r2
    a4ea:	1e5d      	subs	r5, r3, #1
    a4ec:	41ab      	sbcs	r3, r5
    a4ee:	4330      	orrs	r0, r6
    a4f0:	4318      	orrs	r0, r3
    a4f2:	40d4      	lsrs	r4, r2
    a4f4:	0743      	lsls	r3, r0, #29
    a4f6:	d009      	beq.n	a50c <__aeabi_dmul+0x474>
    a4f8:	230f      	movs	r3, #15
    a4fa:	4003      	ands	r3, r0
    a4fc:	2b04      	cmp	r3, #4
    a4fe:	d005      	beq.n	a50c <__aeabi_dmul+0x474>
    a500:	0003      	movs	r3, r0
    a502:	1d18      	adds	r0, r3, #4
    a504:	4298      	cmp	r0, r3
    a506:	419b      	sbcs	r3, r3
    a508:	425b      	negs	r3, r3
    a50a:	18e4      	adds	r4, r4, r3
    a50c:	0223      	lsls	r3, r4, #8
    a50e:	d521      	bpl.n	a554 <__aeabi_dmul+0x4bc>
    a510:	2501      	movs	r5, #1
    a512:	9b01      	ldr	r3, [sp, #4]
    a514:	2401      	movs	r4, #1
    a516:	401d      	ands	r5, r3
    a518:	2300      	movs	r3, #0
    a51a:	2200      	movs	r2, #0
    a51c:	4699      	mov	r9, r3
    a51e:	e622      	b.n	a166 <__aeabi_dmul+0xce>
    a520:	251f      	movs	r5, #31
    a522:	0021      	movs	r1, r4
    a524:	426d      	negs	r5, r5
    a526:	1a28      	subs	r0, r5, r0
    a528:	40c1      	lsrs	r1, r0
    a52a:	0008      	movs	r0, r1
    a52c:	2a20      	cmp	r2, #32
    a52e:	d01d      	beq.n	a56c <__aeabi_dmul+0x4d4>
    a530:	355f      	adds	r5, #95	; 0x5f
    a532:	1aaa      	subs	r2, r5, r2
    a534:	4094      	lsls	r4, r2
    a536:	4323      	orrs	r3, r4
    a538:	1e5c      	subs	r4, r3, #1
    a53a:	41a3      	sbcs	r3, r4
    a53c:	2507      	movs	r5, #7
    a53e:	4303      	orrs	r3, r0
    a540:	401d      	ands	r5, r3
    a542:	2200      	movs	r2, #0
    a544:	2d00      	cmp	r5, #0
    a546:	d009      	beq.n	a55c <__aeabi_dmul+0x4c4>
    a548:	220f      	movs	r2, #15
    a54a:	2400      	movs	r4, #0
    a54c:	401a      	ands	r2, r3
    a54e:	0018      	movs	r0, r3
    a550:	2a04      	cmp	r2, #4
    a552:	d1d6      	bne.n	a502 <__aeabi_dmul+0x46a>
    a554:	0003      	movs	r3, r0
    a556:	0765      	lsls	r5, r4, #29
    a558:	0264      	lsls	r4, r4, #9
    a55a:	0b22      	lsrs	r2, r4, #12
    a55c:	08db      	lsrs	r3, r3, #3
    a55e:	432b      	orrs	r3, r5
    a560:	2501      	movs	r5, #1
    a562:	4699      	mov	r9, r3
    a564:	9b01      	ldr	r3, [sp, #4]
    a566:	2400      	movs	r4, #0
    a568:	401d      	ands	r5, r3
    a56a:	e5fc      	b.n	a166 <__aeabi_dmul+0xce>
    a56c:	2400      	movs	r4, #0
    a56e:	e7e2      	b.n	a536 <__aeabi_dmul+0x49e>
    a570:	2280      	movs	r2, #128	; 0x80
    a572:	2501      	movs	r5, #1
    a574:	0312      	lsls	r2, r2, #12
    a576:	4322      	orrs	r2, r4
    a578:	9901      	ldr	r1, [sp, #4]
    a57a:	0312      	lsls	r2, r2, #12
    a57c:	0b12      	lsrs	r2, r2, #12
    a57e:	400d      	ands	r5, r1
    a580:	4699      	mov	r9, r3
    a582:	4c04      	ldr	r4, [pc, #16]	; (a594 <__aeabi_dmul+0x4fc>)
    a584:	e5ef      	b.n	a166 <__aeabi_dmul+0xce>
    a586:	46c0      	nop			; (mov r8, r8)
    a588:	000003ff 	.word	0x000003ff
    a58c:	feffffff 	.word	0xfeffffff
    a590:	000007fe 	.word	0x000007fe
    a594:	000007ff 	.word	0x000007ff

0000a598 <__aeabi_dsub>:
    a598:	b5f0      	push	{r4, r5, r6, r7, lr}
    a59a:	4646      	mov	r6, r8
    a59c:	46d6      	mov	lr, sl
    a59e:	464f      	mov	r7, r9
    a5a0:	030c      	lsls	r4, r1, #12
    a5a2:	b5c0      	push	{r6, r7, lr}
    a5a4:	0fcd      	lsrs	r5, r1, #31
    a5a6:	004e      	lsls	r6, r1, #1
    a5a8:	0a61      	lsrs	r1, r4, #9
    a5aa:	0f44      	lsrs	r4, r0, #29
    a5ac:	430c      	orrs	r4, r1
    a5ae:	00c1      	lsls	r1, r0, #3
    a5b0:	0058      	lsls	r0, r3, #1
    a5b2:	0d40      	lsrs	r0, r0, #21
    a5b4:	4684      	mov	ip, r0
    a5b6:	468a      	mov	sl, r1
    a5b8:	000f      	movs	r7, r1
    a5ba:	0319      	lsls	r1, r3, #12
    a5bc:	0f50      	lsrs	r0, r2, #29
    a5be:	0a49      	lsrs	r1, r1, #9
    a5c0:	4301      	orrs	r1, r0
    a5c2:	48c6      	ldr	r0, [pc, #792]	; (a8dc <__aeabi_dsub+0x344>)
    a5c4:	0d76      	lsrs	r6, r6, #21
    a5c6:	46a8      	mov	r8, r5
    a5c8:	0fdb      	lsrs	r3, r3, #31
    a5ca:	00d2      	lsls	r2, r2, #3
    a5cc:	4584      	cmp	ip, r0
    a5ce:	d100      	bne.n	a5d2 <__aeabi_dsub+0x3a>
    a5d0:	e0d8      	b.n	a784 <__aeabi_dsub+0x1ec>
    a5d2:	2001      	movs	r0, #1
    a5d4:	4043      	eors	r3, r0
    a5d6:	42ab      	cmp	r3, r5
    a5d8:	d100      	bne.n	a5dc <__aeabi_dsub+0x44>
    a5da:	e0a6      	b.n	a72a <__aeabi_dsub+0x192>
    a5dc:	4660      	mov	r0, ip
    a5de:	1a35      	subs	r5, r6, r0
    a5e0:	2d00      	cmp	r5, #0
    a5e2:	dc00      	bgt.n	a5e6 <__aeabi_dsub+0x4e>
    a5e4:	e105      	b.n	a7f2 <__aeabi_dsub+0x25a>
    a5e6:	2800      	cmp	r0, #0
    a5e8:	d110      	bne.n	a60c <__aeabi_dsub+0x74>
    a5ea:	000b      	movs	r3, r1
    a5ec:	4313      	orrs	r3, r2
    a5ee:	d100      	bne.n	a5f2 <__aeabi_dsub+0x5a>
    a5f0:	e0d7      	b.n	a7a2 <__aeabi_dsub+0x20a>
    a5f2:	1e6b      	subs	r3, r5, #1
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d000      	beq.n	a5fa <__aeabi_dsub+0x62>
    a5f8:	e14b      	b.n	a892 <__aeabi_dsub+0x2fa>
    a5fa:	4653      	mov	r3, sl
    a5fc:	1a9f      	subs	r7, r3, r2
    a5fe:	45ba      	cmp	sl, r7
    a600:	4180      	sbcs	r0, r0
    a602:	1a64      	subs	r4, r4, r1
    a604:	4240      	negs	r0, r0
    a606:	1a24      	subs	r4, r4, r0
    a608:	2601      	movs	r6, #1
    a60a:	e01e      	b.n	a64a <__aeabi_dsub+0xb2>
    a60c:	4bb3      	ldr	r3, [pc, #716]	; (a8dc <__aeabi_dsub+0x344>)
    a60e:	429e      	cmp	r6, r3
    a610:	d048      	beq.n	a6a4 <__aeabi_dsub+0x10c>
    a612:	2380      	movs	r3, #128	; 0x80
    a614:	041b      	lsls	r3, r3, #16
    a616:	4319      	orrs	r1, r3
    a618:	2d38      	cmp	r5, #56	; 0x38
    a61a:	dd00      	ble.n	a61e <__aeabi_dsub+0x86>
    a61c:	e119      	b.n	a852 <__aeabi_dsub+0x2ba>
    a61e:	2d1f      	cmp	r5, #31
    a620:	dd00      	ble.n	a624 <__aeabi_dsub+0x8c>
    a622:	e14c      	b.n	a8be <__aeabi_dsub+0x326>
    a624:	2320      	movs	r3, #32
    a626:	000f      	movs	r7, r1
    a628:	1b5b      	subs	r3, r3, r5
    a62a:	0010      	movs	r0, r2
    a62c:	409a      	lsls	r2, r3
    a62e:	409f      	lsls	r7, r3
    a630:	40e8      	lsrs	r0, r5
    a632:	1e53      	subs	r3, r2, #1
    a634:	419a      	sbcs	r2, r3
    a636:	40e9      	lsrs	r1, r5
    a638:	4307      	orrs	r7, r0
    a63a:	4317      	orrs	r7, r2
    a63c:	4653      	mov	r3, sl
    a63e:	1bdf      	subs	r7, r3, r7
    a640:	1a61      	subs	r1, r4, r1
    a642:	45ba      	cmp	sl, r7
    a644:	41a4      	sbcs	r4, r4
    a646:	4264      	negs	r4, r4
    a648:	1b0c      	subs	r4, r1, r4
    a64a:	0223      	lsls	r3, r4, #8
    a64c:	d400      	bmi.n	a650 <__aeabi_dsub+0xb8>
    a64e:	e0c5      	b.n	a7dc <__aeabi_dsub+0x244>
    a650:	0264      	lsls	r4, r4, #9
    a652:	0a65      	lsrs	r5, r4, #9
    a654:	2d00      	cmp	r5, #0
    a656:	d100      	bne.n	a65a <__aeabi_dsub+0xc2>
    a658:	e0f6      	b.n	a848 <__aeabi_dsub+0x2b0>
    a65a:	0028      	movs	r0, r5
    a65c:	f000 fb1e 	bl	ac9c <__clzsi2>
    a660:	0003      	movs	r3, r0
    a662:	3b08      	subs	r3, #8
    a664:	2b1f      	cmp	r3, #31
    a666:	dd00      	ble.n	a66a <__aeabi_dsub+0xd2>
    a668:	e0e9      	b.n	a83e <__aeabi_dsub+0x2a6>
    a66a:	2220      	movs	r2, #32
    a66c:	003c      	movs	r4, r7
    a66e:	1ad2      	subs	r2, r2, r3
    a670:	409d      	lsls	r5, r3
    a672:	40d4      	lsrs	r4, r2
    a674:	409f      	lsls	r7, r3
    a676:	4325      	orrs	r5, r4
    a678:	429e      	cmp	r6, r3
    a67a:	dd00      	ble.n	a67e <__aeabi_dsub+0xe6>
    a67c:	e0db      	b.n	a836 <__aeabi_dsub+0x29e>
    a67e:	1b9e      	subs	r6, r3, r6
    a680:	1c73      	adds	r3, r6, #1
    a682:	2b1f      	cmp	r3, #31
    a684:	dd00      	ble.n	a688 <__aeabi_dsub+0xf0>
    a686:	e10a      	b.n	a89e <__aeabi_dsub+0x306>
    a688:	2220      	movs	r2, #32
    a68a:	0038      	movs	r0, r7
    a68c:	1ad2      	subs	r2, r2, r3
    a68e:	0029      	movs	r1, r5
    a690:	4097      	lsls	r7, r2
    a692:	002c      	movs	r4, r5
    a694:	4091      	lsls	r1, r2
    a696:	40d8      	lsrs	r0, r3
    a698:	1e7a      	subs	r2, r7, #1
    a69a:	4197      	sbcs	r7, r2
    a69c:	40dc      	lsrs	r4, r3
    a69e:	2600      	movs	r6, #0
    a6a0:	4301      	orrs	r1, r0
    a6a2:	430f      	orrs	r7, r1
    a6a4:	077b      	lsls	r3, r7, #29
    a6a6:	d009      	beq.n	a6bc <__aeabi_dsub+0x124>
    a6a8:	230f      	movs	r3, #15
    a6aa:	403b      	ands	r3, r7
    a6ac:	2b04      	cmp	r3, #4
    a6ae:	d005      	beq.n	a6bc <__aeabi_dsub+0x124>
    a6b0:	1d3b      	adds	r3, r7, #4
    a6b2:	42bb      	cmp	r3, r7
    a6b4:	41bf      	sbcs	r7, r7
    a6b6:	427f      	negs	r7, r7
    a6b8:	19e4      	adds	r4, r4, r7
    a6ba:	001f      	movs	r7, r3
    a6bc:	0223      	lsls	r3, r4, #8
    a6be:	d525      	bpl.n	a70c <__aeabi_dsub+0x174>
    a6c0:	4b86      	ldr	r3, [pc, #536]	; (a8dc <__aeabi_dsub+0x344>)
    a6c2:	3601      	adds	r6, #1
    a6c4:	429e      	cmp	r6, r3
    a6c6:	d100      	bne.n	a6ca <__aeabi_dsub+0x132>
    a6c8:	e0af      	b.n	a82a <__aeabi_dsub+0x292>
    a6ca:	4b85      	ldr	r3, [pc, #532]	; (a8e0 <__aeabi_dsub+0x348>)
    a6cc:	2501      	movs	r5, #1
    a6ce:	401c      	ands	r4, r3
    a6d0:	4643      	mov	r3, r8
    a6d2:	0762      	lsls	r2, r4, #29
    a6d4:	08ff      	lsrs	r7, r7, #3
    a6d6:	0264      	lsls	r4, r4, #9
    a6d8:	0576      	lsls	r6, r6, #21
    a6da:	4317      	orrs	r7, r2
    a6dc:	0b24      	lsrs	r4, r4, #12
    a6de:	0d76      	lsrs	r6, r6, #21
    a6e0:	401d      	ands	r5, r3
    a6e2:	2100      	movs	r1, #0
    a6e4:	0324      	lsls	r4, r4, #12
    a6e6:	0b23      	lsrs	r3, r4, #12
    a6e8:	0d0c      	lsrs	r4, r1, #20
    a6ea:	4a7e      	ldr	r2, [pc, #504]	; (a8e4 <__aeabi_dsub+0x34c>)
    a6ec:	0524      	lsls	r4, r4, #20
    a6ee:	431c      	orrs	r4, r3
    a6f0:	4014      	ands	r4, r2
    a6f2:	0533      	lsls	r3, r6, #20
    a6f4:	4323      	orrs	r3, r4
    a6f6:	005b      	lsls	r3, r3, #1
    a6f8:	07ed      	lsls	r5, r5, #31
    a6fa:	085b      	lsrs	r3, r3, #1
    a6fc:	432b      	orrs	r3, r5
    a6fe:	0038      	movs	r0, r7
    a700:	0019      	movs	r1, r3
    a702:	bc1c      	pop	{r2, r3, r4}
    a704:	4690      	mov	r8, r2
    a706:	4699      	mov	r9, r3
    a708:	46a2      	mov	sl, r4
    a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a70c:	2501      	movs	r5, #1
    a70e:	4643      	mov	r3, r8
    a710:	0762      	lsls	r2, r4, #29
    a712:	08ff      	lsrs	r7, r7, #3
    a714:	4317      	orrs	r7, r2
    a716:	08e4      	lsrs	r4, r4, #3
    a718:	401d      	ands	r5, r3
    a71a:	4b70      	ldr	r3, [pc, #448]	; (a8dc <__aeabi_dsub+0x344>)
    a71c:	429e      	cmp	r6, r3
    a71e:	d036      	beq.n	a78e <__aeabi_dsub+0x1f6>
    a720:	0324      	lsls	r4, r4, #12
    a722:	0576      	lsls	r6, r6, #21
    a724:	0b24      	lsrs	r4, r4, #12
    a726:	0d76      	lsrs	r6, r6, #21
    a728:	e7db      	b.n	a6e2 <__aeabi_dsub+0x14a>
    a72a:	4663      	mov	r3, ip
    a72c:	1af3      	subs	r3, r6, r3
    a72e:	2b00      	cmp	r3, #0
    a730:	dc00      	bgt.n	a734 <__aeabi_dsub+0x19c>
    a732:	e094      	b.n	a85e <__aeabi_dsub+0x2c6>
    a734:	4660      	mov	r0, ip
    a736:	2800      	cmp	r0, #0
    a738:	d035      	beq.n	a7a6 <__aeabi_dsub+0x20e>
    a73a:	4868      	ldr	r0, [pc, #416]	; (a8dc <__aeabi_dsub+0x344>)
    a73c:	4286      	cmp	r6, r0
    a73e:	d0b1      	beq.n	a6a4 <__aeabi_dsub+0x10c>
    a740:	2780      	movs	r7, #128	; 0x80
    a742:	043f      	lsls	r7, r7, #16
    a744:	4339      	orrs	r1, r7
    a746:	2b38      	cmp	r3, #56	; 0x38
    a748:	dc00      	bgt.n	a74c <__aeabi_dsub+0x1b4>
    a74a:	e0fd      	b.n	a948 <__aeabi_dsub+0x3b0>
    a74c:	430a      	orrs	r2, r1
    a74e:	0017      	movs	r7, r2
    a750:	2100      	movs	r1, #0
    a752:	1e7a      	subs	r2, r7, #1
    a754:	4197      	sbcs	r7, r2
    a756:	4457      	add	r7, sl
    a758:	4557      	cmp	r7, sl
    a75a:	4180      	sbcs	r0, r0
    a75c:	1909      	adds	r1, r1, r4
    a75e:	4244      	negs	r4, r0
    a760:	190c      	adds	r4, r1, r4
    a762:	0223      	lsls	r3, r4, #8
    a764:	d53a      	bpl.n	a7dc <__aeabi_dsub+0x244>
    a766:	4b5d      	ldr	r3, [pc, #372]	; (a8dc <__aeabi_dsub+0x344>)
    a768:	3601      	adds	r6, #1
    a76a:	429e      	cmp	r6, r3
    a76c:	d100      	bne.n	a770 <__aeabi_dsub+0x1d8>
    a76e:	e14b      	b.n	aa08 <__aeabi_dsub+0x470>
    a770:	2201      	movs	r2, #1
    a772:	4b5b      	ldr	r3, [pc, #364]	; (a8e0 <__aeabi_dsub+0x348>)
    a774:	401c      	ands	r4, r3
    a776:	087b      	lsrs	r3, r7, #1
    a778:	4017      	ands	r7, r2
    a77a:	431f      	orrs	r7, r3
    a77c:	07e2      	lsls	r2, r4, #31
    a77e:	4317      	orrs	r7, r2
    a780:	0864      	lsrs	r4, r4, #1
    a782:	e78f      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a784:	0008      	movs	r0, r1
    a786:	4310      	orrs	r0, r2
    a788:	d000      	beq.n	a78c <__aeabi_dsub+0x1f4>
    a78a:	e724      	b.n	a5d6 <__aeabi_dsub+0x3e>
    a78c:	e721      	b.n	a5d2 <__aeabi_dsub+0x3a>
    a78e:	0023      	movs	r3, r4
    a790:	433b      	orrs	r3, r7
    a792:	d100      	bne.n	a796 <__aeabi_dsub+0x1fe>
    a794:	e1b9      	b.n	ab0a <__aeabi_dsub+0x572>
    a796:	2280      	movs	r2, #128	; 0x80
    a798:	0312      	lsls	r2, r2, #12
    a79a:	4314      	orrs	r4, r2
    a79c:	0324      	lsls	r4, r4, #12
    a79e:	0b24      	lsrs	r4, r4, #12
    a7a0:	e79f      	b.n	a6e2 <__aeabi_dsub+0x14a>
    a7a2:	002e      	movs	r6, r5
    a7a4:	e77e      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a7a6:	0008      	movs	r0, r1
    a7a8:	4310      	orrs	r0, r2
    a7aa:	d100      	bne.n	a7ae <__aeabi_dsub+0x216>
    a7ac:	e0ca      	b.n	a944 <__aeabi_dsub+0x3ac>
    a7ae:	1e58      	subs	r0, r3, #1
    a7b0:	4684      	mov	ip, r0
    a7b2:	2800      	cmp	r0, #0
    a7b4:	d000      	beq.n	a7b8 <__aeabi_dsub+0x220>
    a7b6:	e0e7      	b.n	a988 <__aeabi_dsub+0x3f0>
    a7b8:	4452      	add	r2, sl
    a7ba:	4552      	cmp	r2, sl
    a7bc:	4180      	sbcs	r0, r0
    a7be:	1864      	adds	r4, r4, r1
    a7c0:	4240      	negs	r0, r0
    a7c2:	1824      	adds	r4, r4, r0
    a7c4:	0017      	movs	r7, r2
    a7c6:	2601      	movs	r6, #1
    a7c8:	0223      	lsls	r3, r4, #8
    a7ca:	d507      	bpl.n	a7dc <__aeabi_dsub+0x244>
    a7cc:	2602      	movs	r6, #2
    a7ce:	e7cf      	b.n	a770 <__aeabi_dsub+0x1d8>
    a7d0:	4664      	mov	r4, ip
    a7d2:	432c      	orrs	r4, r5
    a7d4:	d100      	bne.n	a7d8 <__aeabi_dsub+0x240>
    a7d6:	e1b3      	b.n	ab40 <__aeabi_dsub+0x5a8>
    a7d8:	002c      	movs	r4, r5
    a7da:	4667      	mov	r7, ip
    a7dc:	077b      	lsls	r3, r7, #29
    a7de:	d000      	beq.n	a7e2 <__aeabi_dsub+0x24a>
    a7e0:	e762      	b.n	a6a8 <__aeabi_dsub+0x110>
    a7e2:	0763      	lsls	r3, r4, #29
    a7e4:	08ff      	lsrs	r7, r7, #3
    a7e6:	431f      	orrs	r7, r3
    a7e8:	2501      	movs	r5, #1
    a7ea:	4643      	mov	r3, r8
    a7ec:	08e4      	lsrs	r4, r4, #3
    a7ee:	401d      	ands	r5, r3
    a7f0:	e793      	b.n	a71a <__aeabi_dsub+0x182>
    a7f2:	2d00      	cmp	r5, #0
    a7f4:	d178      	bne.n	a8e8 <__aeabi_dsub+0x350>
    a7f6:	1c75      	adds	r5, r6, #1
    a7f8:	056d      	lsls	r5, r5, #21
    a7fa:	0d6d      	lsrs	r5, r5, #21
    a7fc:	2d01      	cmp	r5, #1
    a7fe:	dc00      	bgt.n	a802 <__aeabi_dsub+0x26a>
    a800:	e0f2      	b.n	a9e8 <__aeabi_dsub+0x450>
    a802:	4650      	mov	r0, sl
    a804:	1a80      	subs	r0, r0, r2
    a806:	4582      	cmp	sl, r0
    a808:	41bf      	sbcs	r7, r7
    a80a:	1a65      	subs	r5, r4, r1
    a80c:	427f      	negs	r7, r7
    a80e:	1bed      	subs	r5, r5, r7
    a810:	4684      	mov	ip, r0
    a812:	0228      	lsls	r0, r5, #8
    a814:	d400      	bmi.n	a818 <__aeabi_dsub+0x280>
    a816:	e08c      	b.n	a932 <__aeabi_dsub+0x39a>
    a818:	4650      	mov	r0, sl
    a81a:	1a17      	subs	r7, r2, r0
    a81c:	42ba      	cmp	r2, r7
    a81e:	4192      	sbcs	r2, r2
    a820:	1b0c      	subs	r4, r1, r4
    a822:	4255      	negs	r5, r2
    a824:	1b65      	subs	r5, r4, r5
    a826:	4698      	mov	r8, r3
    a828:	e714      	b.n	a654 <__aeabi_dsub+0xbc>
    a82a:	2501      	movs	r5, #1
    a82c:	4643      	mov	r3, r8
    a82e:	2400      	movs	r4, #0
    a830:	401d      	ands	r5, r3
    a832:	2700      	movs	r7, #0
    a834:	e755      	b.n	a6e2 <__aeabi_dsub+0x14a>
    a836:	4c2a      	ldr	r4, [pc, #168]	; (a8e0 <__aeabi_dsub+0x348>)
    a838:	1af6      	subs	r6, r6, r3
    a83a:	402c      	ands	r4, r5
    a83c:	e732      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a83e:	003d      	movs	r5, r7
    a840:	3828      	subs	r0, #40	; 0x28
    a842:	4085      	lsls	r5, r0
    a844:	2700      	movs	r7, #0
    a846:	e717      	b.n	a678 <__aeabi_dsub+0xe0>
    a848:	0038      	movs	r0, r7
    a84a:	f000 fa27 	bl	ac9c <__clzsi2>
    a84e:	3020      	adds	r0, #32
    a850:	e706      	b.n	a660 <__aeabi_dsub+0xc8>
    a852:	430a      	orrs	r2, r1
    a854:	0017      	movs	r7, r2
    a856:	2100      	movs	r1, #0
    a858:	1e7a      	subs	r2, r7, #1
    a85a:	4197      	sbcs	r7, r2
    a85c:	e6ee      	b.n	a63c <__aeabi_dsub+0xa4>
    a85e:	2b00      	cmp	r3, #0
    a860:	d000      	beq.n	a864 <__aeabi_dsub+0x2cc>
    a862:	e0e5      	b.n	aa30 <__aeabi_dsub+0x498>
    a864:	1c73      	adds	r3, r6, #1
    a866:	469c      	mov	ip, r3
    a868:	055b      	lsls	r3, r3, #21
    a86a:	0d5b      	lsrs	r3, r3, #21
    a86c:	2b01      	cmp	r3, #1
    a86e:	dc00      	bgt.n	a872 <__aeabi_dsub+0x2da>
    a870:	e09f      	b.n	a9b2 <__aeabi_dsub+0x41a>
    a872:	4b1a      	ldr	r3, [pc, #104]	; (a8dc <__aeabi_dsub+0x344>)
    a874:	459c      	cmp	ip, r3
    a876:	d100      	bne.n	a87a <__aeabi_dsub+0x2e2>
    a878:	e0c5      	b.n	aa06 <__aeabi_dsub+0x46e>
    a87a:	4452      	add	r2, sl
    a87c:	4552      	cmp	r2, sl
    a87e:	4180      	sbcs	r0, r0
    a880:	1864      	adds	r4, r4, r1
    a882:	4240      	negs	r0, r0
    a884:	1824      	adds	r4, r4, r0
    a886:	07e7      	lsls	r7, r4, #31
    a888:	0852      	lsrs	r2, r2, #1
    a88a:	4317      	orrs	r7, r2
    a88c:	0864      	lsrs	r4, r4, #1
    a88e:	4666      	mov	r6, ip
    a890:	e708      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a892:	4812      	ldr	r0, [pc, #72]	; (a8dc <__aeabi_dsub+0x344>)
    a894:	4285      	cmp	r5, r0
    a896:	d100      	bne.n	a89a <__aeabi_dsub+0x302>
    a898:	e085      	b.n	a9a6 <__aeabi_dsub+0x40e>
    a89a:	001d      	movs	r5, r3
    a89c:	e6bc      	b.n	a618 <__aeabi_dsub+0x80>
    a89e:	0029      	movs	r1, r5
    a8a0:	3e1f      	subs	r6, #31
    a8a2:	40f1      	lsrs	r1, r6
    a8a4:	2b20      	cmp	r3, #32
    a8a6:	d100      	bne.n	a8aa <__aeabi_dsub+0x312>
    a8a8:	e07f      	b.n	a9aa <__aeabi_dsub+0x412>
    a8aa:	2240      	movs	r2, #64	; 0x40
    a8ac:	1ad3      	subs	r3, r2, r3
    a8ae:	409d      	lsls	r5, r3
    a8b0:	432f      	orrs	r7, r5
    a8b2:	1e7d      	subs	r5, r7, #1
    a8b4:	41af      	sbcs	r7, r5
    a8b6:	2400      	movs	r4, #0
    a8b8:	430f      	orrs	r7, r1
    a8ba:	2600      	movs	r6, #0
    a8bc:	e78e      	b.n	a7dc <__aeabi_dsub+0x244>
    a8be:	002b      	movs	r3, r5
    a8c0:	000f      	movs	r7, r1
    a8c2:	3b20      	subs	r3, #32
    a8c4:	40df      	lsrs	r7, r3
    a8c6:	2d20      	cmp	r5, #32
    a8c8:	d071      	beq.n	a9ae <__aeabi_dsub+0x416>
    a8ca:	2340      	movs	r3, #64	; 0x40
    a8cc:	1b5d      	subs	r5, r3, r5
    a8ce:	40a9      	lsls	r1, r5
    a8d0:	430a      	orrs	r2, r1
    a8d2:	1e51      	subs	r1, r2, #1
    a8d4:	418a      	sbcs	r2, r1
    a8d6:	2100      	movs	r1, #0
    a8d8:	4317      	orrs	r7, r2
    a8da:	e6af      	b.n	a63c <__aeabi_dsub+0xa4>
    a8dc:	000007ff 	.word	0x000007ff
    a8e0:	ff7fffff 	.word	0xff7fffff
    a8e4:	800fffff 	.word	0x800fffff
    a8e8:	2e00      	cmp	r6, #0
    a8ea:	d03e      	beq.n	a96a <__aeabi_dsub+0x3d2>
    a8ec:	4eb3      	ldr	r6, [pc, #716]	; (abbc <__aeabi_dsub+0x624>)
    a8ee:	45b4      	cmp	ip, r6
    a8f0:	d045      	beq.n	a97e <__aeabi_dsub+0x3e6>
    a8f2:	2680      	movs	r6, #128	; 0x80
    a8f4:	0436      	lsls	r6, r6, #16
    a8f6:	426d      	negs	r5, r5
    a8f8:	4334      	orrs	r4, r6
    a8fa:	2d38      	cmp	r5, #56	; 0x38
    a8fc:	dd00      	ble.n	a900 <__aeabi_dsub+0x368>
    a8fe:	e0a8      	b.n	aa52 <__aeabi_dsub+0x4ba>
    a900:	2d1f      	cmp	r5, #31
    a902:	dd00      	ble.n	a906 <__aeabi_dsub+0x36e>
    a904:	e11f      	b.n	ab46 <__aeabi_dsub+0x5ae>
    a906:	2620      	movs	r6, #32
    a908:	0027      	movs	r7, r4
    a90a:	4650      	mov	r0, sl
    a90c:	1b76      	subs	r6, r6, r5
    a90e:	40b7      	lsls	r7, r6
    a910:	40e8      	lsrs	r0, r5
    a912:	4307      	orrs	r7, r0
    a914:	4650      	mov	r0, sl
    a916:	40b0      	lsls	r0, r6
    a918:	1e46      	subs	r6, r0, #1
    a91a:	41b0      	sbcs	r0, r6
    a91c:	40ec      	lsrs	r4, r5
    a91e:	4338      	orrs	r0, r7
    a920:	1a17      	subs	r7, r2, r0
    a922:	42ba      	cmp	r2, r7
    a924:	4192      	sbcs	r2, r2
    a926:	1b0c      	subs	r4, r1, r4
    a928:	4252      	negs	r2, r2
    a92a:	1aa4      	subs	r4, r4, r2
    a92c:	4666      	mov	r6, ip
    a92e:	4698      	mov	r8, r3
    a930:	e68b      	b.n	a64a <__aeabi_dsub+0xb2>
    a932:	4664      	mov	r4, ip
    a934:	4667      	mov	r7, ip
    a936:	432c      	orrs	r4, r5
    a938:	d000      	beq.n	a93c <__aeabi_dsub+0x3a4>
    a93a:	e68b      	b.n	a654 <__aeabi_dsub+0xbc>
    a93c:	2500      	movs	r5, #0
    a93e:	2600      	movs	r6, #0
    a940:	2700      	movs	r7, #0
    a942:	e6ea      	b.n	a71a <__aeabi_dsub+0x182>
    a944:	001e      	movs	r6, r3
    a946:	e6ad      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a948:	2b1f      	cmp	r3, #31
    a94a:	dc60      	bgt.n	aa0e <__aeabi_dsub+0x476>
    a94c:	2720      	movs	r7, #32
    a94e:	1af8      	subs	r0, r7, r3
    a950:	000f      	movs	r7, r1
    a952:	4684      	mov	ip, r0
    a954:	4087      	lsls	r7, r0
    a956:	0010      	movs	r0, r2
    a958:	40d8      	lsrs	r0, r3
    a95a:	4307      	orrs	r7, r0
    a95c:	4660      	mov	r0, ip
    a95e:	4082      	lsls	r2, r0
    a960:	1e50      	subs	r0, r2, #1
    a962:	4182      	sbcs	r2, r0
    a964:	40d9      	lsrs	r1, r3
    a966:	4317      	orrs	r7, r2
    a968:	e6f5      	b.n	a756 <__aeabi_dsub+0x1be>
    a96a:	0026      	movs	r6, r4
    a96c:	4650      	mov	r0, sl
    a96e:	4306      	orrs	r6, r0
    a970:	d005      	beq.n	a97e <__aeabi_dsub+0x3e6>
    a972:	43ed      	mvns	r5, r5
    a974:	2d00      	cmp	r5, #0
    a976:	d0d3      	beq.n	a920 <__aeabi_dsub+0x388>
    a978:	4e90      	ldr	r6, [pc, #576]	; (abbc <__aeabi_dsub+0x624>)
    a97a:	45b4      	cmp	ip, r6
    a97c:	d1bd      	bne.n	a8fa <__aeabi_dsub+0x362>
    a97e:	000c      	movs	r4, r1
    a980:	0017      	movs	r7, r2
    a982:	4666      	mov	r6, ip
    a984:	4698      	mov	r8, r3
    a986:	e68d      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a988:	488c      	ldr	r0, [pc, #560]	; (abbc <__aeabi_dsub+0x624>)
    a98a:	4283      	cmp	r3, r0
    a98c:	d00b      	beq.n	a9a6 <__aeabi_dsub+0x40e>
    a98e:	4663      	mov	r3, ip
    a990:	e6d9      	b.n	a746 <__aeabi_dsub+0x1ae>
    a992:	2d00      	cmp	r5, #0
    a994:	d000      	beq.n	a998 <__aeabi_dsub+0x400>
    a996:	e096      	b.n	aac6 <__aeabi_dsub+0x52e>
    a998:	0008      	movs	r0, r1
    a99a:	4310      	orrs	r0, r2
    a99c:	d100      	bne.n	a9a0 <__aeabi_dsub+0x408>
    a99e:	e0e2      	b.n	ab66 <__aeabi_dsub+0x5ce>
    a9a0:	000c      	movs	r4, r1
    a9a2:	0017      	movs	r7, r2
    a9a4:	4698      	mov	r8, r3
    a9a6:	4e85      	ldr	r6, [pc, #532]	; (abbc <__aeabi_dsub+0x624>)
    a9a8:	e67c      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a9aa:	2500      	movs	r5, #0
    a9ac:	e780      	b.n	a8b0 <__aeabi_dsub+0x318>
    a9ae:	2100      	movs	r1, #0
    a9b0:	e78e      	b.n	a8d0 <__aeabi_dsub+0x338>
    a9b2:	0023      	movs	r3, r4
    a9b4:	4650      	mov	r0, sl
    a9b6:	4303      	orrs	r3, r0
    a9b8:	2e00      	cmp	r6, #0
    a9ba:	d000      	beq.n	a9be <__aeabi_dsub+0x426>
    a9bc:	e0a8      	b.n	ab10 <__aeabi_dsub+0x578>
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d100      	bne.n	a9c4 <__aeabi_dsub+0x42c>
    a9c2:	e0de      	b.n	ab82 <__aeabi_dsub+0x5ea>
    a9c4:	000b      	movs	r3, r1
    a9c6:	4313      	orrs	r3, r2
    a9c8:	d100      	bne.n	a9cc <__aeabi_dsub+0x434>
    a9ca:	e66b      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a9cc:	4452      	add	r2, sl
    a9ce:	4552      	cmp	r2, sl
    a9d0:	4180      	sbcs	r0, r0
    a9d2:	1864      	adds	r4, r4, r1
    a9d4:	4240      	negs	r0, r0
    a9d6:	1824      	adds	r4, r4, r0
    a9d8:	0017      	movs	r7, r2
    a9da:	0223      	lsls	r3, r4, #8
    a9dc:	d400      	bmi.n	a9e0 <__aeabi_dsub+0x448>
    a9de:	e6fd      	b.n	a7dc <__aeabi_dsub+0x244>
    a9e0:	4b77      	ldr	r3, [pc, #476]	; (abc0 <__aeabi_dsub+0x628>)
    a9e2:	4666      	mov	r6, ip
    a9e4:	401c      	ands	r4, r3
    a9e6:	e65d      	b.n	a6a4 <__aeabi_dsub+0x10c>
    a9e8:	0025      	movs	r5, r4
    a9ea:	4650      	mov	r0, sl
    a9ec:	4305      	orrs	r5, r0
    a9ee:	2e00      	cmp	r6, #0
    a9f0:	d1cf      	bne.n	a992 <__aeabi_dsub+0x3fa>
    a9f2:	2d00      	cmp	r5, #0
    a9f4:	d14f      	bne.n	aa96 <__aeabi_dsub+0x4fe>
    a9f6:	000c      	movs	r4, r1
    a9f8:	4314      	orrs	r4, r2
    a9fa:	d100      	bne.n	a9fe <__aeabi_dsub+0x466>
    a9fc:	e0a0      	b.n	ab40 <__aeabi_dsub+0x5a8>
    a9fe:	000c      	movs	r4, r1
    aa00:	0017      	movs	r7, r2
    aa02:	4698      	mov	r8, r3
    aa04:	e64e      	b.n	a6a4 <__aeabi_dsub+0x10c>
    aa06:	4666      	mov	r6, ip
    aa08:	2400      	movs	r4, #0
    aa0a:	2700      	movs	r7, #0
    aa0c:	e685      	b.n	a71a <__aeabi_dsub+0x182>
    aa0e:	001f      	movs	r7, r3
    aa10:	0008      	movs	r0, r1
    aa12:	3f20      	subs	r7, #32
    aa14:	40f8      	lsrs	r0, r7
    aa16:	0007      	movs	r7, r0
    aa18:	2b20      	cmp	r3, #32
    aa1a:	d100      	bne.n	aa1e <__aeabi_dsub+0x486>
    aa1c:	e08e      	b.n	ab3c <__aeabi_dsub+0x5a4>
    aa1e:	2040      	movs	r0, #64	; 0x40
    aa20:	1ac3      	subs	r3, r0, r3
    aa22:	4099      	lsls	r1, r3
    aa24:	430a      	orrs	r2, r1
    aa26:	1e51      	subs	r1, r2, #1
    aa28:	418a      	sbcs	r2, r1
    aa2a:	2100      	movs	r1, #0
    aa2c:	4317      	orrs	r7, r2
    aa2e:	e692      	b.n	a756 <__aeabi_dsub+0x1be>
    aa30:	2e00      	cmp	r6, #0
    aa32:	d114      	bne.n	aa5e <__aeabi_dsub+0x4c6>
    aa34:	0026      	movs	r6, r4
    aa36:	4650      	mov	r0, sl
    aa38:	4306      	orrs	r6, r0
    aa3a:	d062      	beq.n	ab02 <__aeabi_dsub+0x56a>
    aa3c:	43db      	mvns	r3, r3
    aa3e:	2b00      	cmp	r3, #0
    aa40:	d15c      	bne.n	aafc <__aeabi_dsub+0x564>
    aa42:	1887      	adds	r7, r0, r2
    aa44:	4297      	cmp	r7, r2
    aa46:	4192      	sbcs	r2, r2
    aa48:	1864      	adds	r4, r4, r1
    aa4a:	4252      	negs	r2, r2
    aa4c:	18a4      	adds	r4, r4, r2
    aa4e:	4666      	mov	r6, ip
    aa50:	e687      	b.n	a762 <__aeabi_dsub+0x1ca>
    aa52:	4650      	mov	r0, sl
    aa54:	4320      	orrs	r0, r4
    aa56:	1e44      	subs	r4, r0, #1
    aa58:	41a0      	sbcs	r0, r4
    aa5a:	2400      	movs	r4, #0
    aa5c:	e760      	b.n	a920 <__aeabi_dsub+0x388>
    aa5e:	4e57      	ldr	r6, [pc, #348]	; (abbc <__aeabi_dsub+0x624>)
    aa60:	45b4      	cmp	ip, r6
    aa62:	d04e      	beq.n	ab02 <__aeabi_dsub+0x56a>
    aa64:	2680      	movs	r6, #128	; 0x80
    aa66:	0436      	lsls	r6, r6, #16
    aa68:	425b      	negs	r3, r3
    aa6a:	4334      	orrs	r4, r6
    aa6c:	2b38      	cmp	r3, #56	; 0x38
    aa6e:	dd00      	ble.n	aa72 <__aeabi_dsub+0x4da>
    aa70:	e07f      	b.n	ab72 <__aeabi_dsub+0x5da>
    aa72:	2b1f      	cmp	r3, #31
    aa74:	dd00      	ble.n	aa78 <__aeabi_dsub+0x4e0>
    aa76:	e08b      	b.n	ab90 <__aeabi_dsub+0x5f8>
    aa78:	2620      	movs	r6, #32
    aa7a:	0027      	movs	r7, r4
    aa7c:	4650      	mov	r0, sl
    aa7e:	1af6      	subs	r6, r6, r3
    aa80:	40b7      	lsls	r7, r6
    aa82:	40d8      	lsrs	r0, r3
    aa84:	4307      	orrs	r7, r0
    aa86:	4650      	mov	r0, sl
    aa88:	40b0      	lsls	r0, r6
    aa8a:	1e46      	subs	r6, r0, #1
    aa8c:	41b0      	sbcs	r0, r6
    aa8e:	4307      	orrs	r7, r0
    aa90:	40dc      	lsrs	r4, r3
    aa92:	18bf      	adds	r7, r7, r2
    aa94:	e7d6      	b.n	aa44 <__aeabi_dsub+0x4ac>
    aa96:	000d      	movs	r5, r1
    aa98:	4315      	orrs	r5, r2
    aa9a:	d100      	bne.n	aa9e <__aeabi_dsub+0x506>
    aa9c:	e602      	b.n	a6a4 <__aeabi_dsub+0x10c>
    aa9e:	4650      	mov	r0, sl
    aaa0:	1a80      	subs	r0, r0, r2
    aaa2:	4582      	cmp	sl, r0
    aaa4:	41bf      	sbcs	r7, r7
    aaa6:	1a65      	subs	r5, r4, r1
    aaa8:	427f      	negs	r7, r7
    aaaa:	1bed      	subs	r5, r5, r7
    aaac:	4684      	mov	ip, r0
    aaae:	0228      	lsls	r0, r5, #8
    aab0:	d400      	bmi.n	aab4 <__aeabi_dsub+0x51c>
    aab2:	e68d      	b.n	a7d0 <__aeabi_dsub+0x238>
    aab4:	4650      	mov	r0, sl
    aab6:	1a17      	subs	r7, r2, r0
    aab8:	42ba      	cmp	r2, r7
    aaba:	4192      	sbcs	r2, r2
    aabc:	1b0c      	subs	r4, r1, r4
    aabe:	4252      	negs	r2, r2
    aac0:	1aa4      	subs	r4, r4, r2
    aac2:	4698      	mov	r8, r3
    aac4:	e5ee      	b.n	a6a4 <__aeabi_dsub+0x10c>
    aac6:	000d      	movs	r5, r1
    aac8:	4315      	orrs	r5, r2
    aaca:	d100      	bne.n	aace <__aeabi_dsub+0x536>
    aacc:	e76b      	b.n	a9a6 <__aeabi_dsub+0x40e>
    aace:	4650      	mov	r0, sl
    aad0:	0767      	lsls	r7, r4, #29
    aad2:	08c0      	lsrs	r0, r0, #3
    aad4:	4307      	orrs	r7, r0
    aad6:	2080      	movs	r0, #128	; 0x80
    aad8:	08e4      	lsrs	r4, r4, #3
    aada:	0300      	lsls	r0, r0, #12
    aadc:	4204      	tst	r4, r0
    aade:	d007      	beq.n	aaf0 <__aeabi_dsub+0x558>
    aae0:	08cd      	lsrs	r5, r1, #3
    aae2:	4205      	tst	r5, r0
    aae4:	d104      	bne.n	aaf0 <__aeabi_dsub+0x558>
    aae6:	002c      	movs	r4, r5
    aae8:	4698      	mov	r8, r3
    aaea:	08d7      	lsrs	r7, r2, #3
    aaec:	0749      	lsls	r1, r1, #29
    aaee:	430f      	orrs	r7, r1
    aaf0:	0f7b      	lsrs	r3, r7, #29
    aaf2:	00e4      	lsls	r4, r4, #3
    aaf4:	431c      	orrs	r4, r3
    aaf6:	00ff      	lsls	r7, r7, #3
    aaf8:	4e30      	ldr	r6, [pc, #192]	; (abbc <__aeabi_dsub+0x624>)
    aafa:	e5d3      	b.n	a6a4 <__aeabi_dsub+0x10c>
    aafc:	4e2f      	ldr	r6, [pc, #188]	; (abbc <__aeabi_dsub+0x624>)
    aafe:	45b4      	cmp	ip, r6
    ab00:	d1b4      	bne.n	aa6c <__aeabi_dsub+0x4d4>
    ab02:	000c      	movs	r4, r1
    ab04:	0017      	movs	r7, r2
    ab06:	4666      	mov	r6, ip
    ab08:	e5cc      	b.n	a6a4 <__aeabi_dsub+0x10c>
    ab0a:	2700      	movs	r7, #0
    ab0c:	2400      	movs	r4, #0
    ab0e:	e5e8      	b.n	a6e2 <__aeabi_dsub+0x14a>
    ab10:	2b00      	cmp	r3, #0
    ab12:	d039      	beq.n	ab88 <__aeabi_dsub+0x5f0>
    ab14:	000b      	movs	r3, r1
    ab16:	4313      	orrs	r3, r2
    ab18:	d100      	bne.n	ab1c <__aeabi_dsub+0x584>
    ab1a:	e744      	b.n	a9a6 <__aeabi_dsub+0x40e>
    ab1c:	08c0      	lsrs	r0, r0, #3
    ab1e:	0767      	lsls	r7, r4, #29
    ab20:	4307      	orrs	r7, r0
    ab22:	2080      	movs	r0, #128	; 0x80
    ab24:	08e4      	lsrs	r4, r4, #3
    ab26:	0300      	lsls	r0, r0, #12
    ab28:	4204      	tst	r4, r0
    ab2a:	d0e1      	beq.n	aaf0 <__aeabi_dsub+0x558>
    ab2c:	08cb      	lsrs	r3, r1, #3
    ab2e:	4203      	tst	r3, r0
    ab30:	d1de      	bne.n	aaf0 <__aeabi_dsub+0x558>
    ab32:	08d7      	lsrs	r7, r2, #3
    ab34:	0749      	lsls	r1, r1, #29
    ab36:	430f      	orrs	r7, r1
    ab38:	001c      	movs	r4, r3
    ab3a:	e7d9      	b.n	aaf0 <__aeabi_dsub+0x558>
    ab3c:	2100      	movs	r1, #0
    ab3e:	e771      	b.n	aa24 <__aeabi_dsub+0x48c>
    ab40:	2500      	movs	r5, #0
    ab42:	2700      	movs	r7, #0
    ab44:	e5e9      	b.n	a71a <__aeabi_dsub+0x182>
    ab46:	002e      	movs	r6, r5
    ab48:	0027      	movs	r7, r4
    ab4a:	3e20      	subs	r6, #32
    ab4c:	40f7      	lsrs	r7, r6
    ab4e:	2d20      	cmp	r5, #32
    ab50:	d02f      	beq.n	abb2 <__aeabi_dsub+0x61a>
    ab52:	2640      	movs	r6, #64	; 0x40
    ab54:	1b75      	subs	r5, r6, r5
    ab56:	40ac      	lsls	r4, r5
    ab58:	4650      	mov	r0, sl
    ab5a:	4320      	orrs	r0, r4
    ab5c:	1e44      	subs	r4, r0, #1
    ab5e:	41a0      	sbcs	r0, r4
    ab60:	2400      	movs	r4, #0
    ab62:	4338      	orrs	r0, r7
    ab64:	e6dc      	b.n	a920 <__aeabi_dsub+0x388>
    ab66:	2480      	movs	r4, #128	; 0x80
    ab68:	2500      	movs	r5, #0
    ab6a:	0324      	lsls	r4, r4, #12
    ab6c:	4e13      	ldr	r6, [pc, #76]	; (abbc <__aeabi_dsub+0x624>)
    ab6e:	2700      	movs	r7, #0
    ab70:	e5d3      	b.n	a71a <__aeabi_dsub+0x182>
    ab72:	4650      	mov	r0, sl
    ab74:	4320      	orrs	r0, r4
    ab76:	0007      	movs	r7, r0
    ab78:	1e78      	subs	r0, r7, #1
    ab7a:	4187      	sbcs	r7, r0
    ab7c:	2400      	movs	r4, #0
    ab7e:	18bf      	adds	r7, r7, r2
    ab80:	e760      	b.n	aa44 <__aeabi_dsub+0x4ac>
    ab82:	000c      	movs	r4, r1
    ab84:	0017      	movs	r7, r2
    ab86:	e58d      	b.n	a6a4 <__aeabi_dsub+0x10c>
    ab88:	000c      	movs	r4, r1
    ab8a:	0017      	movs	r7, r2
    ab8c:	4e0b      	ldr	r6, [pc, #44]	; (abbc <__aeabi_dsub+0x624>)
    ab8e:	e589      	b.n	a6a4 <__aeabi_dsub+0x10c>
    ab90:	001e      	movs	r6, r3
    ab92:	0027      	movs	r7, r4
    ab94:	3e20      	subs	r6, #32
    ab96:	40f7      	lsrs	r7, r6
    ab98:	2b20      	cmp	r3, #32
    ab9a:	d00c      	beq.n	abb6 <__aeabi_dsub+0x61e>
    ab9c:	2640      	movs	r6, #64	; 0x40
    ab9e:	1af3      	subs	r3, r6, r3
    aba0:	409c      	lsls	r4, r3
    aba2:	4650      	mov	r0, sl
    aba4:	4320      	orrs	r0, r4
    aba6:	1e44      	subs	r4, r0, #1
    aba8:	41a0      	sbcs	r0, r4
    abaa:	4307      	orrs	r7, r0
    abac:	2400      	movs	r4, #0
    abae:	18bf      	adds	r7, r7, r2
    abb0:	e748      	b.n	aa44 <__aeabi_dsub+0x4ac>
    abb2:	2400      	movs	r4, #0
    abb4:	e7d0      	b.n	ab58 <__aeabi_dsub+0x5c0>
    abb6:	2400      	movs	r4, #0
    abb8:	e7f3      	b.n	aba2 <__aeabi_dsub+0x60a>
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	000007ff 	.word	0x000007ff
    abc0:	ff7fffff 	.word	0xff7fffff

0000abc4 <__aeabi_d2iz>:
    abc4:	b530      	push	{r4, r5, lr}
    abc6:	4d13      	ldr	r5, [pc, #76]	; (ac14 <__aeabi_d2iz+0x50>)
    abc8:	030a      	lsls	r2, r1, #12
    abca:	004b      	lsls	r3, r1, #1
    abcc:	0b12      	lsrs	r2, r2, #12
    abce:	0d5b      	lsrs	r3, r3, #21
    abd0:	0fc9      	lsrs	r1, r1, #31
    abd2:	2400      	movs	r4, #0
    abd4:	42ab      	cmp	r3, r5
    abd6:	dd10      	ble.n	abfa <__aeabi_d2iz+0x36>
    abd8:	4c0f      	ldr	r4, [pc, #60]	; (ac18 <__aeabi_d2iz+0x54>)
    abda:	42a3      	cmp	r3, r4
    abdc:	dc0f      	bgt.n	abfe <__aeabi_d2iz+0x3a>
    abde:	2480      	movs	r4, #128	; 0x80
    abe0:	4d0e      	ldr	r5, [pc, #56]	; (ac1c <__aeabi_d2iz+0x58>)
    abe2:	0364      	lsls	r4, r4, #13
    abe4:	4322      	orrs	r2, r4
    abe6:	1aed      	subs	r5, r5, r3
    abe8:	2d1f      	cmp	r5, #31
    abea:	dd0b      	ble.n	ac04 <__aeabi_d2iz+0x40>
    abec:	480c      	ldr	r0, [pc, #48]	; (ac20 <__aeabi_d2iz+0x5c>)
    abee:	1ac3      	subs	r3, r0, r3
    abf0:	40da      	lsrs	r2, r3
    abf2:	4254      	negs	r4, r2
    abf4:	2900      	cmp	r1, #0
    abf6:	d100      	bne.n	abfa <__aeabi_d2iz+0x36>
    abf8:	0014      	movs	r4, r2
    abfa:	0020      	movs	r0, r4
    abfc:	bd30      	pop	{r4, r5, pc}
    abfe:	4b09      	ldr	r3, [pc, #36]	; (ac24 <__aeabi_d2iz+0x60>)
    ac00:	18cc      	adds	r4, r1, r3
    ac02:	e7fa      	b.n	abfa <__aeabi_d2iz+0x36>
    ac04:	4c08      	ldr	r4, [pc, #32]	; (ac28 <__aeabi_d2iz+0x64>)
    ac06:	40e8      	lsrs	r0, r5
    ac08:	46a4      	mov	ip, r4
    ac0a:	4463      	add	r3, ip
    ac0c:	409a      	lsls	r2, r3
    ac0e:	4302      	orrs	r2, r0
    ac10:	e7ef      	b.n	abf2 <__aeabi_d2iz+0x2e>
    ac12:	46c0      	nop			; (mov r8, r8)
    ac14:	000003fe 	.word	0x000003fe
    ac18:	0000041d 	.word	0x0000041d
    ac1c:	00000433 	.word	0x00000433
    ac20:	00000413 	.word	0x00000413
    ac24:	7fffffff 	.word	0x7fffffff
    ac28:	fffffbed 	.word	0xfffffbed

0000ac2c <__aeabi_ui2d>:
    ac2c:	b510      	push	{r4, lr}
    ac2e:	1e04      	subs	r4, r0, #0
    ac30:	d028      	beq.n	ac84 <__aeabi_ui2d+0x58>
    ac32:	f000 f833 	bl	ac9c <__clzsi2>
    ac36:	4b15      	ldr	r3, [pc, #84]	; (ac8c <__aeabi_ui2d+0x60>)
    ac38:	4a15      	ldr	r2, [pc, #84]	; (ac90 <__aeabi_ui2d+0x64>)
    ac3a:	1a1b      	subs	r3, r3, r0
    ac3c:	1ad2      	subs	r2, r2, r3
    ac3e:	2a1f      	cmp	r2, #31
    ac40:	dd15      	ble.n	ac6e <__aeabi_ui2d+0x42>
    ac42:	4a14      	ldr	r2, [pc, #80]	; (ac94 <__aeabi_ui2d+0x68>)
    ac44:	1ad2      	subs	r2, r2, r3
    ac46:	4094      	lsls	r4, r2
    ac48:	2200      	movs	r2, #0
    ac4a:	0324      	lsls	r4, r4, #12
    ac4c:	055b      	lsls	r3, r3, #21
    ac4e:	0b24      	lsrs	r4, r4, #12
    ac50:	0d5b      	lsrs	r3, r3, #21
    ac52:	2100      	movs	r1, #0
    ac54:	0010      	movs	r0, r2
    ac56:	0324      	lsls	r4, r4, #12
    ac58:	0d0a      	lsrs	r2, r1, #20
    ac5a:	0b24      	lsrs	r4, r4, #12
    ac5c:	0512      	lsls	r2, r2, #20
    ac5e:	4322      	orrs	r2, r4
    ac60:	4c0d      	ldr	r4, [pc, #52]	; (ac98 <__aeabi_ui2d+0x6c>)
    ac62:	051b      	lsls	r3, r3, #20
    ac64:	4022      	ands	r2, r4
    ac66:	4313      	orrs	r3, r2
    ac68:	005b      	lsls	r3, r3, #1
    ac6a:	0859      	lsrs	r1, r3, #1
    ac6c:	bd10      	pop	{r4, pc}
    ac6e:	0021      	movs	r1, r4
    ac70:	4091      	lsls	r1, r2
    ac72:	000a      	movs	r2, r1
    ac74:	210b      	movs	r1, #11
    ac76:	1a08      	subs	r0, r1, r0
    ac78:	40c4      	lsrs	r4, r0
    ac7a:	055b      	lsls	r3, r3, #21
    ac7c:	0324      	lsls	r4, r4, #12
    ac7e:	0b24      	lsrs	r4, r4, #12
    ac80:	0d5b      	lsrs	r3, r3, #21
    ac82:	e7e6      	b.n	ac52 <__aeabi_ui2d+0x26>
    ac84:	2300      	movs	r3, #0
    ac86:	2400      	movs	r4, #0
    ac88:	2200      	movs	r2, #0
    ac8a:	e7e2      	b.n	ac52 <__aeabi_ui2d+0x26>
    ac8c:	0000041e 	.word	0x0000041e
    ac90:	00000433 	.word	0x00000433
    ac94:	00000413 	.word	0x00000413
    ac98:	800fffff 	.word	0x800fffff

0000ac9c <__clzsi2>:
    ac9c:	211c      	movs	r1, #28
    ac9e:	2301      	movs	r3, #1
    aca0:	041b      	lsls	r3, r3, #16
    aca2:	4298      	cmp	r0, r3
    aca4:	d301      	bcc.n	acaa <__clzsi2+0xe>
    aca6:	0c00      	lsrs	r0, r0, #16
    aca8:	3910      	subs	r1, #16
    acaa:	0a1b      	lsrs	r3, r3, #8
    acac:	4298      	cmp	r0, r3
    acae:	d301      	bcc.n	acb4 <__clzsi2+0x18>
    acb0:	0a00      	lsrs	r0, r0, #8
    acb2:	3908      	subs	r1, #8
    acb4:	091b      	lsrs	r3, r3, #4
    acb6:	4298      	cmp	r0, r3
    acb8:	d301      	bcc.n	acbe <__clzsi2+0x22>
    acba:	0900      	lsrs	r0, r0, #4
    acbc:	3904      	subs	r1, #4
    acbe:	a202      	add	r2, pc, #8	; (adr r2, acc8 <__clzsi2+0x2c>)
    acc0:	5c10      	ldrb	r0, [r2, r0]
    acc2:	1840      	adds	r0, r0, r1
    acc4:	4770      	bx	lr
    acc6:	46c0      	nop			; (mov r8, r8)
    acc8:	02020304 	.word	0x02020304
    accc:	01010101 	.word	0x01010101
	...

0000acd8 <__libc_init_array>:
    acd8:	b570      	push	{r4, r5, r6, lr}
    acda:	2600      	movs	r6, #0
    acdc:	4d0c      	ldr	r5, [pc, #48]	; (ad10 <__libc_init_array+0x38>)
    acde:	4c0d      	ldr	r4, [pc, #52]	; (ad14 <__libc_init_array+0x3c>)
    ace0:	1b64      	subs	r4, r4, r5
    ace2:	10a4      	asrs	r4, r4, #2
    ace4:	42a6      	cmp	r6, r4
    ace6:	d109      	bne.n	acfc <__libc_init_array+0x24>
    ace8:	2600      	movs	r6, #0
    acea:	f001 fdbd 	bl	c868 <_init>
    acee:	4d0a      	ldr	r5, [pc, #40]	; (ad18 <__libc_init_array+0x40>)
    acf0:	4c0a      	ldr	r4, [pc, #40]	; (ad1c <__libc_init_array+0x44>)
    acf2:	1b64      	subs	r4, r4, r5
    acf4:	10a4      	asrs	r4, r4, #2
    acf6:	42a6      	cmp	r6, r4
    acf8:	d105      	bne.n	ad06 <__libc_init_array+0x2e>
    acfa:	bd70      	pop	{r4, r5, r6, pc}
    acfc:	00b3      	lsls	r3, r6, #2
    acfe:	58eb      	ldr	r3, [r5, r3]
    ad00:	4798      	blx	r3
    ad02:	3601      	adds	r6, #1
    ad04:	e7ee      	b.n	ace4 <__libc_init_array+0xc>
    ad06:	00b3      	lsls	r3, r6, #2
    ad08:	58eb      	ldr	r3, [r5, r3]
    ad0a:	4798      	blx	r3
    ad0c:	3601      	adds	r6, #1
    ad0e:	e7f2      	b.n	acf6 <__libc_init_array+0x1e>
    ad10:	0000c874 	.word	0x0000c874
    ad14:	0000c874 	.word	0x0000c874
    ad18:	0000c874 	.word	0x0000c874
    ad1c:	0000c878 	.word	0x0000c878

0000ad20 <malloc>:
    ad20:	b510      	push	{r4, lr}
    ad22:	4b03      	ldr	r3, [pc, #12]	; (ad30 <malloc+0x10>)
    ad24:	0001      	movs	r1, r0
    ad26:	6818      	ldr	r0, [r3, #0]
    ad28:	f000 f878 	bl	ae1c <_malloc_r>
    ad2c:	bd10      	pop	{r4, pc}
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	20000124 	.word	0x20000124

0000ad34 <free>:
    ad34:	b510      	push	{r4, lr}
    ad36:	4b03      	ldr	r3, [pc, #12]	; (ad44 <free+0x10>)
    ad38:	0001      	movs	r1, r0
    ad3a:	6818      	ldr	r0, [r3, #0]
    ad3c:	f000 f824 	bl	ad88 <_free_r>
    ad40:	bd10      	pop	{r4, pc}
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	20000124 	.word	0x20000124

0000ad48 <memcmp>:
    ad48:	b530      	push	{r4, r5, lr}
    ad4a:	2400      	movs	r4, #0
    ad4c:	42a2      	cmp	r2, r4
    ad4e:	d101      	bne.n	ad54 <memcmp+0xc>
    ad50:	2000      	movs	r0, #0
    ad52:	e005      	b.n	ad60 <memcmp+0x18>
    ad54:	5d03      	ldrb	r3, [r0, r4]
    ad56:	1c65      	adds	r5, r4, #1
    ad58:	5d0c      	ldrb	r4, [r1, r4]
    ad5a:	42a3      	cmp	r3, r4
    ad5c:	d001      	beq.n	ad62 <memcmp+0x1a>
    ad5e:	1b18      	subs	r0, r3, r4
    ad60:	bd30      	pop	{r4, r5, pc}
    ad62:	002c      	movs	r4, r5
    ad64:	e7f2      	b.n	ad4c <memcmp+0x4>

0000ad66 <memcpy>:
    ad66:	2300      	movs	r3, #0
    ad68:	b510      	push	{r4, lr}
    ad6a:	429a      	cmp	r2, r3
    ad6c:	d100      	bne.n	ad70 <memcpy+0xa>
    ad6e:	bd10      	pop	{r4, pc}
    ad70:	5ccc      	ldrb	r4, [r1, r3]
    ad72:	54c4      	strb	r4, [r0, r3]
    ad74:	3301      	adds	r3, #1
    ad76:	e7f8      	b.n	ad6a <memcpy+0x4>

0000ad78 <memset>:
    ad78:	0003      	movs	r3, r0
    ad7a:	1882      	adds	r2, r0, r2
    ad7c:	4293      	cmp	r3, r2
    ad7e:	d100      	bne.n	ad82 <memset+0xa>
    ad80:	4770      	bx	lr
    ad82:	7019      	strb	r1, [r3, #0]
    ad84:	3301      	adds	r3, #1
    ad86:	e7f9      	b.n	ad7c <memset+0x4>

0000ad88 <_free_r>:
    ad88:	b570      	push	{r4, r5, r6, lr}
    ad8a:	0005      	movs	r5, r0
    ad8c:	2900      	cmp	r1, #0
    ad8e:	d010      	beq.n	adb2 <_free_r+0x2a>
    ad90:	1f0c      	subs	r4, r1, #4
    ad92:	6823      	ldr	r3, [r4, #0]
    ad94:	2b00      	cmp	r3, #0
    ad96:	da00      	bge.n	ad9a <_free_r+0x12>
    ad98:	18e4      	adds	r4, r4, r3
    ad9a:	0028      	movs	r0, r5
    ad9c:	f000 fcae 	bl	b6fc <__malloc_lock>
    ada0:	4a1d      	ldr	r2, [pc, #116]	; (ae18 <_free_r+0x90>)
    ada2:	6813      	ldr	r3, [r2, #0]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d105      	bne.n	adb4 <_free_r+0x2c>
    ada8:	6063      	str	r3, [r4, #4]
    adaa:	6014      	str	r4, [r2, #0]
    adac:	0028      	movs	r0, r5
    adae:	f000 fca6 	bl	b6fe <__malloc_unlock>
    adb2:	bd70      	pop	{r4, r5, r6, pc}
    adb4:	42a3      	cmp	r3, r4
    adb6:	d909      	bls.n	adcc <_free_r+0x44>
    adb8:	6821      	ldr	r1, [r4, #0]
    adba:	1860      	adds	r0, r4, r1
    adbc:	4283      	cmp	r3, r0
    adbe:	d1f3      	bne.n	ada8 <_free_r+0x20>
    adc0:	6818      	ldr	r0, [r3, #0]
    adc2:	685b      	ldr	r3, [r3, #4]
    adc4:	1841      	adds	r1, r0, r1
    adc6:	6021      	str	r1, [r4, #0]
    adc8:	e7ee      	b.n	ada8 <_free_r+0x20>
    adca:	0013      	movs	r3, r2
    adcc:	685a      	ldr	r2, [r3, #4]
    adce:	2a00      	cmp	r2, #0
    add0:	d001      	beq.n	add6 <_free_r+0x4e>
    add2:	42a2      	cmp	r2, r4
    add4:	d9f9      	bls.n	adca <_free_r+0x42>
    add6:	6819      	ldr	r1, [r3, #0]
    add8:	1858      	adds	r0, r3, r1
    adda:	42a0      	cmp	r0, r4
    addc:	d10b      	bne.n	adf6 <_free_r+0x6e>
    adde:	6820      	ldr	r0, [r4, #0]
    ade0:	1809      	adds	r1, r1, r0
    ade2:	1858      	adds	r0, r3, r1
    ade4:	6019      	str	r1, [r3, #0]
    ade6:	4282      	cmp	r2, r0
    ade8:	d1e0      	bne.n	adac <_free_r+0x24>
    adea:	6810      	ldr	r0, [r2, #0]
    adec:	6852      	ldr	r2, [r2, #4]
    adee:	1841      	adds	r1, r0, r1
    adf0:	6019      	str	r1, [r3, #0]
    adf2:	605a      	str	r2, [r3, #4]
    adf4:	e7da      	b.n	adac <_free_r+0x24>
    adf6:	42a0      	cmp	r0, r4
    adf8:	d902      	bls.n	ae00 <_free_r+0x78>
    adfa:	230c      	movs	r3, #12
    adfc:	602b      	str	r3, [r5, #0]
    adfe:	e7d5      	b.n	adac <_free_r+0x24>
    ae00:	6821      	ldr	r1, [r4, #0]
    ae02:	1860      	adds	r0, r4, r1
    ae04:	4282      	cmp	r2, r0
    ae06:	d103      	bne.n	ae10 <_free_r+0x88>
    ae08:	6810      	ldr	r0, [r2, #0]
    ae0a:	6852      	ldr	r2, [r2, #4]
    ae0c:	1841      	adds	r1, r0, r1
    ae0e:	6021      	str	r1, [r4, #0]
    ae10:	6062      	str	r2, [r4, #4]
    ae12:	605c      	str	r4, [r3, #4]
    ae14:	e7ca      	b.n	adac <_free_r+0x24>
    ae16:	46c0      	nop			; (mov r8, r8)
    ae18:	20000364 	.word	0x20000364

0000ae1c <_malloc_r>:
    ae1c:	2303      	movs	r3, #3
    ae1e:	b570      	push	{r4, r5, r6, lr}
    ae20:	1ccd      	adds	r5, r1, #3
    ae22:	439d      	bics	r5, r3
    ae24:	3508      	adds	r5, #8
    ae26:	0006      	movs	r6, r0
    ae28:	2d0c      	cmp	r5, #12
    ae2a:	d21e      	bcs.n	ae6a <_malloc_r+0x4e>
    ae2c:	250c      	movs	r5, #12
    ae2e:	42a9      	cmp	r1, r5
    ae30:	d81d      	bhi.n	ae6e <_malloc_r+0x52>
    ae32:	0030      	movs	r0, r6
    ae34:	f000 fc62 	bl	b6fc <__malloc_lock>
    ae38:	4a25      	ldr	r2, [pc, #148]	; (aed0 <_malloc_r+0xb4>)
    ae3a:	6814      	ldr	r4, [r2, #0]
    ae3c:	0021      	movs	r1, r4
    ae3e:	2900      	cmp	r1, #0
    ae40:	d119      	bne.n	ae76 <_malloc_r+0x5a>
    ae42:	4c24      	ldr	r4, [pc, #144]	; (aed4 <_malloc_r+0xb8>)
    ae44:	6823      	ldr	r3, [r4, #0]
    ae46:	2b00      	cmp	r3, #0
    ae48:	d103      	bne.n	ae52 <_malloc_r+0x36>
    ae4a:	0030      	movs	r0, r6
    ae4c:	f000 f8c8 	bl	afe0 <_sbrk_r>
    ae50:	6020      	str	r0, [r4, #0]
    ae52:	0029      	movs	r1, r5
    ae54:	0030      	movs	r0, r6
    ae56:	f000 f8c3 	bl	afe0 <_sbrk_r>
    ae5a:	1c43      	adds	r3, r0, #1
    ae5c:	d12c      	bne.n	aeb8 <_malloc_r+0x9c>
    ae5e:	230c      	movs	r3, #12
    ae60:	0030      	movs	r0, r6
    ae62:	6033      	str	r3, [r6, #0]
    ae64:	f000 fc4b 	bl	b6fe <__malloc_unlock>
    ae68:	e003      	b.n	ae72 <_malloc_r+0x56>
    ae6a:	2d00      	cmp	r5, #0
    ae6c:	dadf      	bge.n	ae2e <_malloc_r+0x12>
    ae6e:	230c      	movs	r3, #12
    ae70:	6033      	str	r3, [r6, #0]
    ae72:	2000      	movs	r0, #0
    ae74:	bd70      	pop	{r4, r5, r6, pc}
    ae76:	680b      	ldr	r3, [r1, #0]
    ae78:	1b5b      	subs	r3, r3, r5
    ae7a:	d41a      	bmi.n	aeb2 <_malloc_r+0x96>
    ae7c:	2b0b      	cmp	r3, #11
    ae7e:	d903      	bls.n	ae88 <_malloc_r+0x6c>
    ae80:	600b      	str	r3, [r1, #0]
    ae82:	18cc      	adds	r4, r1, r3
    ae84:	6025      	str	r5, [r4, #0]
    ae86:	e003      	b.n	ae90 <_malloc_r+0x74>
    ae88:	428c      	cmp	r4, r1
    ae8a:	d10e      	bne.n	aeaa <_malloc_r+0x8e>
    ae8c:	6863      	ldr	r3, [r4, #4]
    ae8e:	6013      	str	r3, [r2, #0]
    ae90:	0030      	movs	r0, r6
    ae92:	f000 fc34 	bl	b6fe <__malloc_unlock>
    ae96:	0020      	movs	r0, r4
    ae98:	2207      	movs	r2, #7
    ae9a:	300b      	adds	r0, #11
    ae9c:	1d23      	adds	r3, r4, #4
    ae9e:	4390      	bics	r0, r2
    aea0:	1ac3      	subs	r3, r0, r3
    aea2:	d0e7      	beq.n	ae74 <_malloc_r+0x58>
    aea4:	425a      	negs	r2, r3
    aea6:	50e2      	str	r2, [r4, r3]
    aea8:	e7e4      	b.n	ae74 <_malloc_r+0x58>
    aeaa:	684b      	ldr	r3, [r1, #4]
    aeac:	6063      	str	r3, [r4, #4]
    aeae:	000c      	movs	r4, r1
    aeb0:	e7ee      	b.n	ae90 <_malloc_r+0x74>
    aeb2:	000c      	movs	r4, r1
    aeb4:	6849      	ldr	r1, [r1, #4]
    aeb6:	e7c2      	b.n	ae3e <_malloc_r+0x22>
    aeb8:	2303      	movs	r3, #3
    aeba:	1cc4      	adds	r4, r0, #3
    aebc:	439c      	bics	r4, r3
    aebe:	42a0      	cmp	r0, r4
    aec0:	d0e0      	beq.n	ae84 <_malloc_r+0x68>
    aec2:	1a21      	subs	r1, r4, r0
    aec4:	0030      	movs	r0, r6
    aec6:	f000 f88b 	bl	afe0 <_sbrk_r>
    aeca:	1c43      	adds	r3, r0, #1
    aecc:	d1da      	bne.n	ae84 <_malloc_r+0x68>
    aece:	e7c6      	b.n	ae5e <_malloc_r+0x42>
    aed0:	20000364 	.word	0x20000364
    aed4:	20000368 	.word	0x20000368

0000aed8 <iprintf>:
    aed8:	b40f      	push	{r0, r1, r2, r3}
    aeda:	4b0b      	ldr	r3, [pc, #44]	; (af08 <iprintf+0x30>)
    aedc:	b513      	push	{r0, r1, r4, lr}
    aede:	681c      	ldr	r4, [r3, #0]
    aee0:	2c00      	cmp	r4, #0
    aee2:	d005      	beq.n	aef0 <iprintf+0x18>
    aee4:	69a3      	ldr	r3, [r4, #24]
    aee6:	2b00      	cmp	r3, #0
    aee8:	d102      	bne.n	aef0 <iprintf+0x18>
    aeea:	0020      	movs	r0, r4
    aeec:	f000 fb04 	bl	b4f8 <__sinit>
    aef0:	ab05      	add	r3, sp, #20
    aef2:	9a04      	ldr	r2, [sp, #16]
    aef4:	68a1      	ldr	r1, [r4, #8]
    aef6:	0020      	movs	r0, r4
    aef8:	9301      	str	r3, [sp, #4]
    aefa:	f000 fc29 	bl	b750 <_vfiprintf_r>
    aefe:	bc16      	pop	{r1, r2, r4}
    af00:	bc08      	pop	{r3}
    af02:	b004      	add	sp, #16
    af04:	4718      	bx	r3
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	20000124 	.word	0x20000124

0000af0c <_puts_r>:
    af0c:	b570      	push	{r4, r5, r6, lr}
    af0e:	0005      	movs	r5, r0
    af10:	000e      	movs	r6, r1
    af12:	2800      	cmp	r0, #0
    af14:	d004      	beq.n	af20 <_puts_r+0x14>
    af16:	6983      	ldr	r3, [r0, #24]
    af18:	2b00      	cmp	r3, #0
    af1a:	d101      	bne.n	af20 <_puts_r+0x14>
    af1c:	f000 faec 	bl	b4f8 <__sinit>
    af20:	69ab      	ldr	r3, [r5, #24]
    af22:	68ac      	ldr	r4, [r5, #8]
    af24:	2b00      	cmp	r3, #0
    af26:	d102      	bne.n	af2e <_puts_r+0x22>
    af28:	0028      	movs	r0, r5
    af2a:	f000 fae5 	bl	b4f8 <__sinit>
    af2e:	4b24      	ldr	r3, [pc, #144]	; (afc0 <_puts_r+0xb4>)
    af30:	429c      	cmp	r4, r3
    af32:	d10f      	bne.n	af54 <_puts_r+0x48>
    af34:	686c      	ldr	r4, [r5, #4]
    af36:	89a3      	ldrh	r3, [r4, #12]
    af38:	071b      	lsls	r3, r3, #28
    af3a:	d502      	bpl.n	af42 <_puts_r+0x36>
    af3c:	6923      	ldr	r3, [r4, #16]
    af3e:	2b00      	cmp	r3, #0
    af40:	d120      	bne.n	af84 <_puts_r+0x78>
    af42:	0021      	movs	r1, r4
    af44:	0028      	movs	r0, r5
    af46:	f000 f969 	bl	b21c <__swsetup_r>
    af4a:	2800      	cmp	r0, #0
    af4c:	d01a      	beq.n	af84 <_puts_r+0x78>
    af4e:	2001      	movs	r0, #1
    af50:	4240      	negs	r0, r0
    af52:	bd70      	pop	{r4, r5, r6, pc}
    af54:	4b1b      	ldr	r3, [pc, #108]	; (afc4 <_puts_r+0xb8>)
    af56:	429c      	cmp	r4, r3
    af58:	d101      	bne.n	af5e <_puts_r+0x52>
    af5a:	68ac      	ldr	r4, [r5, #8]
    af5c:	e7eb      	b.n	af36 <_puts_r+0x2a>
    af5e:	4b1a      	ldr	r3, [pc, #104]	; (afc8 <_puts_r+0xbc>)
    af60:	429c      	cmp	r4, r3
    af62:	d1e8      	bne.n	af36 <_puts_r+0x2a>
    af64:	68ec      	ldr	r4, [r5, #12]
    af66:	e7e6      	b.n	af36 <_puts_r+0x2a>
    af68:	3b01      	subs	r3, #1
    af6a:	3601      	adds	r6, #1
    af6c:	60a3      	str	r3, [r4, #8]
    af6e:	2b00      	cmp	r3, #0
    af70:	da04      	bge.n	af7c <_puts_r+0x70>
    af72:	69a2      	ldr	r2, [r4, #24]
    af74:	4293      	cmp	r3, r2
    af76:	db16      	blt.n	afa6 <_puts_r+0x9a>
    af78:	290a      	cmp	r1, #10
    af7a:	d014      	beq.n	afa6 <_puts_r+0x9a>
    af7c:	6823      	ldr	r3, [r4, #0]
    af7e:	1c5a      	adds	r2, r3, #1
    af80:	6022      	str	r2, [r4, #0]
    af82:	7019      	strb	r1, [r3, #0]
    af84:	7831      	ldrb	r1, [r6, #0]
    af86:	68a3      	ldr	r3, [r4, #8]
    af88:	2900      	cmp	r1, #0
    af8a:	d1ed      	bne.n	af68 <_puts_r+0x5c>
    af8c:	3b01      	subs	r3, #1
    af8e:	60a3      	str	r3, [r4, #8]
    af90:	2b00      	cmp	r3, #0
    af92:	da0f      	bge.n	afb4 <_puts_r+0xa8>
    af94:	0022      	movs	r2, r4
    af96:	310a      	adds	r1, #10
    af98:	0028      	movs	r0, r5
    af9a:	f000 f8e9 	bl	b170 <__swbuf_r>
    af9e:	1c43      	adds	r3, r0, #1
    afa0:	d0d5      	beq.n	af4e <_puts_r+0x42>
    afa2:	200a      	movs	r0, #10
    afa4:	e7d5      	b.n	af52 <_puts_r+0x46>
    afa6:	0022      	movs	r2, r4
    afa8:	0028      	movs	r0, r5
    afaa:	f000 f8e1 	bl	b170 <__swbuf_r>
    afae:	1c43      	adds	r3, r0, #1
    afb0:	d1e8      	bne.n	af84 <_puts_r+0x78>
    afb2:	e7cc      	b.n	af4e <_puts_r+0x42>
    afb4:	200a      	movs	r0, #10
    afb6:	6823      	ldr	r3, [r4, #0]
    afb8:	1c5a      	adds	r2, r3, #1
    afba:	6022      	str	r2, [r4, #0]
    afbc:	7018      	strb	r0, [r3, #0]
    afbe:	e7c8      	b.n	af52 <_puts_r+0x46>
    afc0:	0000c7f4 	.word	0x0000c7f4
    afc4:	0000c814 	.word	0x0000c814
    afc8:	0000c7d4 	.word	0x0000c7d4

0000afcc <puts>:
    afcc:	b510      	push	{r4, lr}
    afce:	4b03      	ldr	r3, [pc, #12]	; (afdc <puts+0x10>)
    afd0:	0001      	movs	r1, r0
    afd2:	6818      	ldr	r0, [r3, #0]
    afd4:	f7ff ff9a 	bl	af0c <_puts_r>
    afd8:	bd10      	pop	{r4, pc}
    afda:	46c0      	nop			; (mov r8, r8)
    afdc:	20000124 	.word	0x20000124

0000afe0 <_sbrk_r>:
    afe0:	2300      	movs	r3, #0
    afe2:	b570      	push	{r4, r5, r6, lr}
    afe4:	4c06      	ldr	r4, [pc, #24]	; (b000 <_sbrk_r+0x20>)
    afe6:	0005      	movs	r5, r0
    afe8:	0008      	movs	r0, r1
    afea:	6023      	str	r3, [r4, #0]
    afec:	f7fd fee8 	bl	8dc0 <_sbrk>
    aff0:	1c43      	adds	r3, r0, #1
    aff2:	d103      	bne.n	affc <_sbrk_r+0x1c>
    aff4:	6823      	ldr	r3, [r4, #0]
    aff6:	2b00      	cmp	r3, #0
    aff8:	d000      	beq.n	affc <_sbrk_r+0x1c>
    affa:	602b      	str	r3, [r5, #0]
    affc:	bd70      	pop	{r4, r5, r6, pc}
    affe:	46c0      	nop			; (mov r8, r8)
    b000:	20000468 	.word	0x20000468

0000b004 <setbuf>:
    b004:	424a      	negs	r2, r1
    b006:	414a      	adcs	r2, r1
    b008:	2380      	movs	r3, #128	; 0x80
    b00a:	b510      	push	{r4, lr}
    b00c:	0052      	lsls	r2, r2, #1
    b00e:	00db      	lsls	r3, r3, #3
    b010:	f000 f802 	bl	b018 <setvbuf>
    b014:	bd10      	pop	{r4, pc}
	...

0000b018 <setvbuf>:
    b018:	b5f0      	push	{r4, r5, r6, r7, lr}
    b01a:	001d      	movs	r5, r3
    b01c:	4b4f      	ldr	r3, [pc, #316]	; (b15c <setvbuf+0x144>)
    b01e:	b085      	sub	sp, #20
    b020:	681e      	ldr	r6, [r3, #0]
    b022:	0004      	movs	r4, r0
    b024:	000f      	movs	r7, r1
    b026:	9200      	str	r2, [sp, #0]
    b028:	2e00      	cmp	r6, #0
    b02a:	d005      	beq.n	b038 <setvbuf+0x20>
    b02c:	69b3      	ldr	r3, [r6, #24]
    b02e:	2b00      	cmp	r3, #0
    b030:	d102      	bne.n	b038 <setvbuf+0x20>
    b032:	0030      	movs	r0, r6
    b034:	f000 fa60 	bl	b4f8 <__sinit>
    b038:	4b49      	ldr	r3, [pc, #292]	; (b160 <setvbuf+0x148>)
    b03a:	429c      	cmp	r4, r3
    b03c:	d150      	bne.n	b0e0 <setvbuf+0xc8>
    b03e:	6874      	ldr	r4, [r6, #4]
    b040:	9b00      	ldr	r3, [sp, #0]
    b042:	2b02      	cmp	r3, #2
    b044:	d005      	beq.n	b052 <setvbuf+0x3a>
    b046:	2b01      	cmp	r3, #1
    b048:	d900      	bls.n	b04c <setvbuf+0x34>
    b04a:	e084      	b.n	b156 <setvbuf+0x13e>
    b04c:	2d00      	cmp	r5, #0
    b04e:	da00      	bge.n	b052 <setvbuf+0x3a>
    b050:	e081      	b.n	b156 <setvbuf+0x13e>
    b052:	0021      	movs	r1, r4
    b054:	0030      	movs	r0, r6
    b056:	f000 f9e1 	bl	b41c <_fflush_r>
    b05a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b05c:	2900      	cmp	r1, #0
    b05e:	d008      	beq.n	b072 <setvbuf+0x5a>
    b060:	0023      	movs	r3, r4
    b062:	3344      	adds	r3, #68	; 0x44
    b064:	4299      	cmp	r1, r3
    b066:	d002      	beq.n	b06e <setvbuf+0x56>
    b068:	0030      	movs	r0, r6
    b06a:	f7ff fe8d 	bl	ad88 <_free_r>
    b06e:	2300      	movs	r3, #0
    b070:	6363      	str	r3, [r4, #52]	; 0x34
    b072:	2300      	movs	r3, #0
    b074:	61a3      	str	r3, [r4, #24]
    b076:	6063      	str	r3, [r4, #4]
    b078:	89a3      	ldrh	r3, [r4, #12]
    b07a:	061b      	lsls	r3, r3, #24
    b07c:	d503      	bpl.n	b086 <setvbuf+0x6e>
    b07e:	6921      	ldr	r1, [r4, #16]
    b080:	0030      	movs	r0, r6
    b082:	f7ff fe81 	bl	ad88 <_free_r>
    b086:	89a3      	ldrh	r3, [r4, #12]
    b088:	4a36      	ldr	r2, [pc, #216]	; (b164 <setvbuf+0x14c>)
    b08a:	4013      	ands	r3, r2
    b08c:	81a3      	strh	r3, [r4, #12]
    b08e:	9b00      	ldr	r3, [sp, #0]
    b090:	2b02      	cmp	r3, #2
    b092:	d05a      	beq.n	b14a <setvbuf+0x132>
    b094:	ab03      	add	r3, sp, #12
    b096:	aa02      	add	r2, sp, #8
    b098:	0021      	movs	r1, r4
    b09a:	0030      	movs	r0, r6
    b09c:	f000 fac2 	bl	b624 <__swhatbuf_r>
    b0a0:	89a3      	ldrh	r3, [r4, #12]
    b0a2:	4318      	orrs	r0, r3
    b0a4:	81a0      	strh	r0, [r4, #12]
    b0a6:	2d00      	cmp	r5, #0
    b0a8:	d124      	bne.n	b0f4 <setvbuf+0xdc>
    b0aa:	9d02      	ldr	r5, [sp, #8]
    b0ac:	0028      	movs	r0, r5
    b0ae:	f7ff fe37 	bl	ad20 <malloc>
    b0b2:	9501      	str	r5, [sp, #4]
    b0b4:	1e07      	subs	r7, r0, #0
    b0b6:	d142      	bne.n	b13e <setvbuf+0x126>
    b0b8:	9b02      	ldr	r3, [sp, #8]
    b0ba:	9301      	str	r3, [sp, #4]
    b0bc:	42ab      	cmp	r3, r5
    b0be:	d139      	bne.n	b134 <setvbuf+0x11c>
    b0c0:	2001      	movs	r0, #1
    b0c2:	4240      	negs	r0, r0
    b0c4:	2302      	movs	r3, #2
    b0c6:	89a2      	ldrh	r2, [r4, #12]
    b0c8:	4313      	orrs	r3, r2
    b0ca:	81a3      	strh	r3, [r4, #12]
    b0cc:	2300      	movs	r3, #0
    b0ce:	60a3      	str	r3, [r4, #8]
    b0d0:	0023      	movs	r3, r4
    b0d2:	3347      	adds	r3, #71	; 0x47
    b0d4:	6023      	str	r3, [r4, #0]
    b0d6:	6123      	str	r3, [r4, #16]
    b0d8:	2301      	movs	r3, #1
    b0da:	6163      	str	r3, [r4, #20]
    b0dc:	b005      	add	sp, #20
    b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0e0:	4b21      	ldr	r3, [pc, #132]	; (b168 <setvbuf+0x150>)
    b0e2:	429c      	cmp	r4, r3
    b0e4:	d101      	bne.n	b0ea <setvbuf+0xd2>
    b0e6:	68b4      	ldr	r4, [r6, #8]
    b0e8:	e7aa      	b.n	b040 <setvbuf+0x28>
    b0ea:	4b20      	ldr	r3, [pc, #128]	; (b16c <setvbuf+0x154>)
    b0ec:	429c      	cmp	r4, r3
    b0ee:	d1a7      	bne.n	b040 <setvbuf+0x28>
    b0f0:	68f4      	ldr	r4, [r6, #12]
    b0f2:	e7a5      	b.n	b040 <setvbuf+0x28>
    b0f4:	2f00      	cmp	r7, #0
    b0f6:	d0d9      	beq.n	b0ac <setvbuf+0x94>
    b0f8:	69b3      	ldr	r3, [r6, #24]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d102      	bne.n	b104 <setvbuf+0xec>
    b0fe:	0030      	movs	r0, r6
    b100:	f000 f9fa 	bl	b4f8 <__sinit>
    b104:	9b00      	ldr	r3, [sp, #0]
    b106:	2b01      	cmp	r3, #1
    b108:	d103      	bne.n	b112 <setvbuf+0xfa>
    b10a:	89a3      	ldrh	r3, [r4, #12]
    b10c:	9a00      	ldr	r2, [sp, #0]
    b10e:	431a      	orrs	r2, r3
    b110:	81a2      	strh	r2, [r4, #12]
    b112:	2008      	movs	r0, #8
    b114:	89a3      	ldrh	r3, [r4, #12]
    b116:	6027      	str	r7, [r4, #0]
    b118:	6127      	str	r7, [r4, #16]
    b11a:	6165      	str	r5, [r4, #20]
    b11c:	4018      	ands	r0, r3
    b11e:	d018      	beq.n	b152 <setvbuf+0x13a>
    b120:	2001      	movs	r0, #1
    b122:	4018      	ands	r0, r3
    b124:	2300      	movs	r3, #0
    b126:	4298      	cmp	r0, r3
    b128:	d011      	beq.n	b14e <setvbuf+0x136>
    b12a:	426d      	negs	r5, r5
    b12c:	60a3      	str	r3, [r4, #8]
    b12e:	61a5      	str	r5, [r4, #24]
    b130:	0018      	movs	r0, r3
    b132:	e7d3      	b.n	b0dc <setvbuf+0xc4>
    b134:	9801      	ldr	r0, [sp, #4]
    b136:	f7ff fdf3 	bl	ad20 <malloc>
    b13a:	1e07      	subs	r7, r0, #0
    b13c:	d0c0      	beq.n	b0c0 <setvbuf+0xa8>
    b13e:	2380      	movs	r3, #128	; 0x80
    b140:	89a2      	ldrh	r2, [r4, #12]
    b142:	9d01      	ldr	r5, [sp, #4]
    b144:	4313      	orrs	r3, r2
    b146:	81a3      	strh	r3, [r4, #12]
    b148:	e7d6      	b.n	b0f8 <setvbuf+0xe0>
    b14a:	2000      	movs	r0, #0
    b14c:	e7ba      	b.n	b0c4 <setvbuf+0xac>
    b14e:	60a5      	str	r5, [r4, #8]
    b150:	e7c4      	b.n	b0dc <setvbuf+0xc4>
    b152:	60a0      	str	r0, [r4, #8]
    b154:	e7c2      	b.n	b0dc <setvbuf+0xc4>
    b156:	2001      	movs	r0, #1
    b158:	4240      	negs	r0, r0
    b15a:	e7bf      	b.n	b0dc <setvbuf+0xc4>
    b15c:	20000124 	.word	0x20000124
    b160:	0000c7f4 	.word	0x0000c7f4
    b164:	fffff35c 	.word	0xfffff35c
    b168:	0000c814 	.word	0x0000c814
    b16c:	0000c7d4 	.word	0x0000c7d4

0000b170 <__swbuf_r>:
    b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b172:	0005      	movs	r5, r0
    b174:	000e      	movs	r6, r1
    b176:	0014      	movs	r4, r2
    b178:	2800      	cmp	r0, #0
    b17a:	d004      	beq.n	b186 <__swbuf_r+0x16>
    b17c:	6983      	ldr	r3, [r0, #24]
    b17e:	2b00      	cmp	r3, #0
    b180:	d101      	bne.n	b186 <__swbuf_r+0x16>
    b182:	f000 f9b9 	bl	b4f8 <__sinit>
    b186:	4b22      	ldr	r3, [pc, #136]	; (b210 <__swbuf_r+0xa0>)
    b188:	429c      	cmp	r4, r3
    b18a:	d12d      	bne.n	b1e8 <__swbuf_r+0x78>
    b18c:	686c      	ldr	r4, [r5, #4]
    b18e:	69a3      	ldr	r3, [r4, #24]
    b190:	60a3      	str	r3, [r4, #8]
    b192:	89a3      	ldrh	r3, [r4, #12]
    b194:	071b      	lsls	r3, r3, #28
    b196:	d531      	bpl.n	b1fc <__swbuf_r+0x8c>
    b198:	6923      	ldr	r3, [r4, #16]
    b19a:	2b00      	cmp	r3, #0
    b19c:	d02e      	beq.n	b1fc <__swbuf_r+0x8c>
    b19e:	6823      	ldr	r3, [r4, #0]
    b1a0:	6922      	ldr	r2, [r4, #16]
    b1a2:	b2f7      	uxtb	r7, r6
    b1a4:	1a98      	subs	r0, r3, r2
    b1a6:	6963      	ldr	r3, [r4, #20]
    b1a8:	b2f6      	uxtb	r6, r6
    b1aa:	4298      	cmp	r0, r3
    b1ac:	db05      	blt.n	b1ba <__swbuf_r+0x4a>
    b1ae:	0021      	movs	r1, r4
    b1b0:	0028      	movs	r0, r5
    b1b2:	f000 f933 	bl	b41c <_fflush_r>
    b1b6:	2800      	cmp	r0, #0
    b1b8:	d126      	bne.n	b208 <__swbuf_r+0x98>
    b1ba:	68a3      	ldr	r3, [r4, #8]
    b1bc:	3001      	adds	r0, #1
    b1be:	3b01      	subs	r3, #1
    b1c0:	60a3      	str	r3, [r4, #8]
    b1c2:	6823      	ldr	r3, [r4, #0]
    b1c4:	1c5a      	adds	r2, r3, #1
    b1c6:	6022      	str	r2, [r4, #0]
    b1c8:	701f      	strb	r7, [r3, #0]
    b1ca:	6963      	ldr	r3, [r4, #20]
    b1cc:	4298      	cmp	r0, r3
    b1ce:	d004      	beq.n	b1da <__swbuf_r+0x6a>
    b1d0:	89a3      	ldrh	r3, [r4, #12]
    b1d2:	07db      	lsls	r3, r3, #31
    b1d4:	d51a      	bpl.n	b20c <__swbuf_r+0x9c>
    b1d6:	2e0a      	cmp	r6, #10
    b1d8:	d118      	bne.n	b20c <__swbuf_r+0x9c>
    b1da:	0021      	movs	r1, r4
    b1dc:	0028      	movs	r0, r5
    b1de:	f000 f91d 	bl	b41c <_fflush_r>
    b1e2:	2800      	cmp	r0, #0
    b1e4:	d012      	beq.n	b20c <__swbuf_r+0x9c>
    b1e6:	e00f      	b.n	b208 <__swbuf_r+0x98>
    b1e8:	4b0a      	ldr	r3, [pc, #40]	; (b214 <__swbuf_r+0xa4>)
    b1ea:	429c      	cmp	r4, r3
    b1ec:	d101      	bne.n	b1f2 <__swbuf_r+0x82>
    b1ee:	68ac      	ldr	r4, [r5, #8]
    b1f0:	e7cd      	b.n	b18e <__swbuf_r+0x1e>
    b1f2:	4b09      	ldr	r3, [pc, #36]	; (b218 <__swbuf_r+0xa8>)
    b1f4:	429c      	cmp	r4, r3
    b1f6:	d1ca      	bne.n	b18e <__swbuf_r+0x1e>
    b1f8:	68ec      	ldr	r4, [r5, #12]
    b1fa:	e7c8      	b.n	b18e <__swbuf_r+0x1e>
    b1fc:	0021      	movs	r1, r4
    b1fe:	0028      	movs	r0, r5
    b200:	f000 f80c 	bl	b21c <__swsetup_r>
    b204:	2800      	cmp	r0, #0
    b206:	d0ca      	beq.n	b19e <__swbuf_r+0x2e>
    b208:	2601      	movs	r6, #1
    b20a:	4276      	negs	r6, r6
    b20c:	0030      	movs	r0, r6
    b20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b210:	0000c7f4 	.word	0x0000c7f4
    b214:	0000c814 	.word	0x0000c814
    b218:	0000c7d4 	.word	0x0000c7d4

0000b21c <__swsetup_r>:
    b21c:	4b36      	ldr	r3, [pc, #216]	; (b2f8 <__swsetup_r+0xdc>)
    b21e:	b570      	push	{r4, r5, r6, lr}
    b220:	681d      	ldr	r5, [r3, #0]
    b222:	0006      	movs	r6, r0
    b224:	000c      	movs	r4, r1
    b226:	2d00      	cmp	r5, #0
    b228:	d005      	beq.n	b236 <__swsetup_r+0x1a>
    b22a:	69ab      	ldr	r3, [r5, #24]
    b22c:	2b00      	cmp	r3, #0
    b22e:	d102      	bne.n	b236 <__swsetup_r+0x1a>
    b230:	0028      	movs	r0, r5
    b232:	f000 f961 	bl	b4f8 <__sinit>
    b236:	4b31      	ldr	r3, [pc, #196]	; (b2fc <__swsetup_r+0xe0>)
    b238:	429c      	cmp	r4, r3
    b23a:	d10f      	bne.n	b25c <__swsetup_r+0x40>
    b23c:	686c      	ldr	r4, [r5, #4]
    b23e:	230c      	movs	r3, #12
    b240:	5ee2      	ldrsh	r2, [r4, r3]
    b242:	b293      	uxth	r3, r2
    b244:	0719      	lsls	r1, r3, #28
    b246:	d42d      	bmi.n	b2a4 <__swsetup_r+0x88>
    b248:	06d9      	lsls	r1, r3, #27
    b24a:	d411      	bmi.n	b270 <__swsetup_r+0x54>
    b24c:	2309      	movs	r3, #9
    b24e:	2001      	movs	r0, #1
    b250:	6033      	str	r3, [r6, #0]
    b252:	3337      	adds	r3, #55	; 0x37
    b254:	4313      	orrs	r3, r2
    b256:	81a3      	strh	r3, [r4, #12]
    b258:	4240      	negs	r0, r0
    b25a:	bd70      	pop	{r4, r5, r6, pc}
    b25c:	4b28      	ldr	r3, [pc, #160]	; (b300 <__swsetup_r+0xe4>)
    b25e:	429c      	cmp	r4, r3
    b260:	d101      	bne.n	b266 <__swsetup_r+0x4a>
    b262:	68ac      	ldr	r4, [r5, #8]
    b264:	e7eb      	b.n	b23e <__swsetup_r+0x22>
    b266:	4b27      	ldr	r3, [pc, #156]	; (b304 <__swsetup_r+0xe8>)
    b268:	429c      	cmp	r4, r3
    b26a:	d1e8      	bne.n	b23e <__swsetup_r+0x22>
    b26c:	68ec      	ldr	r4, [r5, #12]
    b26e:	e7e6      	b.n	b23e <__swsetup_r+0x22>
    b270:	075b      	lsls	r3, r3, #29
    b272:	d513      	bpl.n	b29c <__swsetup_r+0x80>
    b274:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b276:	2900      	cmp	r1, #0
    b278:	d008      	beq.n	b28c <__swsetup_r+0x70>
    b27a:	0023      	movs	r3, r4
    b27c:	3344      	adds	r3, #68	; 0x44
    b27e:	4299      	cmp	r1, r3
    b280:	d002      	beq.n	b288 <__swsetup_r+0x6c>
    b282:	0030      	movs	r0, r6
    b284:	f7ff fd80 	bl	ad88 <_free_r>
    b288:	2300      	movs	r3, #0
    b28a:	6363      	str	r3, [r4, #52]	; 0x34
    b28c:	2224      	movs	r2, #36	; 0x24
    b28e:	89a3      	ldrh	r3, [r4, #12]
    b290:	4393      	bics	r3, r2
    b292:	81a3      	strh	r3, [r4, #12]
    b294:	2300      	movs	r3, #0
    b296:	6063      	str	r3, [r4, #4]
    b298:	6923      	ldr	r3, [r4, #16]
    b29a:	6023      	str	r3, [r4, #0]
    b29c:	2308      	movs	r3, #8
    b29e:	89a2      	ldrh	r2, [r4, #12]
    b2a0:	4313      	orrs	r3, r2
    b2a2:	81a3      	strh	r3, [r4, #12]
    b2a4:	6923      	ldr	r3, [r4, #16]
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d10b      	bne.n	b2c2 <__swsetup_r+0xa6>
    b2aa:	21a0      	movs	r1, #160	; 0xa0
    b2ac:	2280      	movs	r2, #128	; 0x80
    b2ae:	89a3      	ldrh	r3, [r4, #12]
    b2b0:	0089      	lsls	r1, r1, #2
    b2b2:	0092      	lsls	r2, r2, #2
    b2b4:	400b      	ands	r3, r1
    b2b6:	4293      	cmp	r3, r2
    b2b8:	d003      	beq.n	b2c2 <__swsetup_r+0xa6>
    b2ba:	0021      	movs	r1, r4
    b2bc:	0030      	movs	r0, r6
    b2be:	f000 f9d9 	bl	b674 <__smakebuf_r>
    b2c2:	2301      	movs	r3, #1
    b2c4:	89a2      	ldrh	r2, [r4, #12]
    b2c6:	4013      	ands	r3, r2
    b2c8:	d011      	beq.n	b2ee <__swsetup_r+0xd2>
    b2ca:	2300      	movs	r3, #0
    b2cc:	60a3      	str	r3, [r4, #8]
    b2ce:	6963      	ldr	r3, [r4, #20]
    b2d0:	425b      	negs	r3, r3
    b2d2:	61a3      	str	r3, [r4, #24]
    b2d4:	2000      	movs	r0, #0
    b2d6:	6923      	ldr	r3, [r4, #16]
    b2d8:	4283      	cmp	r3, r0
    b2da:	d1be      	bne.n	b25a <__swsetup_r+0x3e>
    b2dc:	230c      	movs	r3, #12
    b2de:	5ee2      	ldrsh	r2, [r4, r3]
    b2e0:	0613      	lsls	r3, r2, #24
    b2e2:	d5ba      	bpl.n	b25a <__swsetup_r+0x3e>
    b2e4:	2340      	movs	r3, #64	; 0x40
    b2e6:	4313      	orrs	r3, r2
    b2e8:	81a3      	strh	r3, [r4, #12]
    b2ea:	3801      	subs	r0, #1
    b2ec:	e7b5      	b.n	b25a <__swsetup_r+0x3e>
    b2ee:	0792      	lsls	r2, r2, #30
    b2f0:	d400      	bmi.n	b2f4 <__swsetup_r+0xd8>
    b2f2:	6963      	ldr	r3, [r4, #20]
    b2f4:	60a3      	str	r3, [r4, #8]
    b2f6:	e7ed      	b.n	b2d4 <__swsetup_r+0xb8>
    b2f8:	20000124 	.word	0x20000124
    b2fc:	0000c7f4 	.word	0x0000c7f4
    b300:	0000c814 	.word	0x0000c814
    b304:	0000c7d4 	.word	0x0000c7d4

0000b308 <__sflush_r>:
    b308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b30a:	898a      	ldrh	r2, [r1, #12]
    b30c:	0005      	movs	r5, r0
    b30e:	000c      	movs	r4, r1
    b310:	0713      	lsls	r3, r2, #28
    b312:	d460      	bmi.n	b3d6 <__sflush_r+0xce>
    b314:	684b      	ldr	r3, [r1, #4]
    b316:	2b00      	cmp	r3, #0
    b318:	dc04      	bgt.n	b324 <__sflush_r+0x1c>
    b31a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b31c:	2b00      	cmp	r3, #0
    b31e:	dc01      	bgt.n	b324 <__sflush_r+0x1c>
    b320:	2000      	movs	r0, #0
    b322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b324:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b326:	2f00      	cmp	r7, #0
    b328:	d0fa      	beq.n	b320 <__sflush_r+0x18>
    b32a:	2300      	movs	r3, #0
    b32c:	682e      	ldr	r6, [r5, #0]
    b32e:	602b      	str	r3, [r5, #0]
    b330:	2380      	movs	r3, #128	; 0x80
    b332:	015b      	lsls	r3, r3, #5
    b334:	401a      	ands	r2, r3
    b336:	d034      	beq.n	b3a2 <__sflush_r+0x9a>
    b338:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b33a:	89a3      	ldrh	r3, [r4, #12]
    b33c:	075b      	lsls	r3, r3, #29
    b33e:	d506      	bpl.n	b34e <__sflush_r+0x46>
    b340:	6863      	ldr	r3, [r4, #4]
    b342:	1ac0      	subs	r0, r0, r3
    b344:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b346:	2b00      	cmp	r3, #0
    b348:	d001      	beq.n	b34e <__sflush_r+0x46>
    b34a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b34c:	1ac0      	subs	r0, r0, r3
    b34e:	0002      	movs	r2, r0
    b350:	6a21      	ldr	r1, [r4, #32]
    b352:	2300      	movs	r3, #0
    b354:	0028      	movs	r0, r5
    b356:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b358:	47b8      	blx	r7
    b35a:	89a1      	ldrh	r1, [r4, #12]
    b35c:	1c43      	adds	r3, r0, #1
    b35e:	d106      	bne.n	b36e <__sflush_r+0x66>
    b360:	682b      	ldr	r3, [r5, #0]
    b362:	2b1d      	cmp	r3, #29
    b364:	d831      	bhi.n	b3ca <__sflush_r+0xc2>
    b366:	4a2c      	ldr	r2, [pc, #176]	; (b418 <__sflush_r+0x110>)
    b368:	40da      	lsrs	r2, r3
    b36a:	07d3      	lsls	r3, r2, #31
    b36c:	d52d      	bpl.n	b3ca <__sflush_r+0xc2>
    b36e:	2300      	movs	r3, #0
    b370:	6063      	str	r3, [r4, #4]
    b372:	6923      	ldr	r3, [r4, #16]
    b374:	6023      	str	r3, [r4, #0]
    b376:	04cb      	lsls	r3, r1, #19
    b378:	d505      	bpl.n	b386 <__sflush_r+0x7e>
    b37a:	1c43      	adds	r3, r0, #1
    b37c:	d102      	bne.n	b384 <__sflush_r+0x7c>
    b37e:	682b      	ldr	r3, [r5, #0]
    b380:	2b00      	cmp	r3, #0
    b382:	d100      	bne.n	b386 <__sflush_r+0x7e>
    b384:	6560      	str	r0, [r4, #84]	; 0x54
    b386:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b388:	602e      	str	r6, [r5, #0]
    b38a:	2900      	cmp	r1, #0
    b38c:	d0c8      	beq.n	b320 <__sflush_r+0x18>
    b38e:	0023      	movs	r3, r4
    b390:	3344      	adds	r3, #68	; 0x44
    b392:	4299      	cmp	r1, r3
    b394:	d002      	beq.n	b39c <__sflush_r+0x94>
    b396:	0028      	movs	r0, r5
    b398:	f7ff fcf6 	bl	ad88 <_free_r>
    b39c:	2000      	movs	r0, #0
    b39e:	6360      	str	r0, [r4, #52]	; 0x34
    b3a0:	e7bf      	b.n	b322 <__sflush_r+0x1a>
    b3a2:	2301      	movs	r3, #1
    b3a4:	6a21      	ldr	r1, [r4, #32]
    b3a6:	0028      	movs	r0, r5
    b3a8:	47b8      	blx	r7
    b3aa:	1c43      	adds	r3, r0, #1
    b3ac:	d1c5      	bne.n	b33a <__sflush_r+0x32>
    b3ae:	682b      	ldr	r3, [r5, #0]
    b3b0:	2b00      	cmp	r3, #0
    b3b2:	d0c2      	beq.n	b33a <__sflush_r+0x32>
    b3b4:	2b1d      	cmp	r3, #29
    b3b6:	d001      	beq.n	b3bc <__sflush_r+0xb4>
    b3b8:	2b16      	cmp	r3, #22
    b3ba:	d101      	bne.n	b3c0 <__sflush_r+0xb8>
    b3bc:	602e      	str	r6, [r5, #0]
    b3be:	e7af      	b.n	b320 <__sflush_r+0x18>
    b3c0:	2340      	movs	r3, #64	; 0x40
    b3c2:	89a2      	ldrh	r2, [r4, #12]
    b3c4:	4313      	orrs	r3, r2
    b3c6:	81a3      	strh	r3, [r4, #12]
    b3c8:	e7ab      	b.n	b322 <__sflush_r+0x1a>
    b3ca:	2340      	movs	r3, #64	; 0x40
    b3cc:	430b      	orrs	r3, r1
    b3ce:	2001      	movs	r0, #1
    b3d0:	81a3      	strh	r3, [r4, #12]
    b3d2:	4240      	negs	r0, r0
    b3d4:	e7a5      	b.n	b322 <__sflush_r+0x1a>
    b3d6:	690f      	ldr	r7, [r1, #16]
    b3d8:	2f00      	cmp	r7, #0
    b3da:	d0a1      	beq.n	b320 <__sflush_r+0x18>
    b3dc:	680b      	ldr	r3, [r1, #0]
    b3de:	600f      	str	r7, [r1, #0]
    b3e0:	1bdb      	subs	r3, r3, r7
    b3e2:	9301      	str	r3, [sp, #4]
    b3e4:	2300      	movs	r3, #0
    b3e6:	0792      	lsls	r2, r2, #30
    b3e8:	d100      	bne.n	b3ec <__sflush_r+0xe4>
    b3ea:	694b      	ldr	r3, [r1, #20]
    b3ec:	60a3      	str	r3, [r4, #8]
    b3ee:	9b01      	ldr	r3, [sp, #4]
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	dc00      	bgt.n	b3f6 <__sflush_r+0xee>
    b3f4:	e794      	b.n	b320 <__sflush_r+0x18>
    b3f6:	9b01      	ldr	r3, [sp, #4]
    b3f8:	003a      	movs	r2, r7
    b3fa:	6a21      	ldr	r1, [r4, #32]
    b3fc:	0028      	movs	r0, r5
    b3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b400:	47b0      	blx	r6
    b402:	2800      	cmp	r0, #0
    b404:	dc03      	bgt.n	b40e <__sflush_r+0x106>
    b406:	2340      	movs	r3, #64	; 0x40
    b408:	89a2      	ldrh	r2, [r4, #12]
    b40a:	4313      	orrs	r3, r2
    b40c:	e7df      	b.n	b3ce <__sflush_r+0xc6>
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	183f      	adds	r7, r7, r0
    b412:	1a1b      	subs	r3, r3, r0
    b414:	9301      	str	r3, [sp, #4]
    b416:	e7ea      	b.n	b3ee <__sflush_r+0xe6>
    b418:	20400001 	.word	0x20400001

0000b41c <_fflush_r>:
    b41c:	690b      	ldr	r3, [r1, #16]
    b41e:	b570      	push	{r4, r5, r6, lr}
    b420:	0005      	movs	r5, r0
    b422:	000c      	movs	r4, r1
    b424:	2b00      	cmp	r3, #0
    b426:	d101      	bne.n	b42c <_fflush_r+0x10>
    b428:	2000      	movs	r0, #0
    b42a:	bd70      	pop	{r4, r5, r6, pc}
    b42c:	2800      	cmp	r0, #0
    b42e:	d004      	beq.n	b43a <_fflush_r+0x1e>
    b430:	6983      	ldr	r3, [r0, #24]
    b432:	2b00      	cmp	r3, #0
    b434:	d101      	bne.n	b43a <_fflush_r+0x1e>
    b436:	f000 f85f 	bl	b4f8 <__sinit>
    b43a:	4b0b      	ldr	r3, [pc, #44]	; (b468 <_fflush_r+0x4c>)
    b43c:	429c      	cmp	r4, r3
    b43e:	d109      	bne.n	b454 <_fflush_r+0x38>
    b440:	686c      	ldr	r4, [r5, #4]
    b442:	220c      	movs	r2, #12
    b444:	5ea3      	ldrsh	r3, [r4, r2]
    b446:	2b00      	cmp	r3, #0
    b448:	d0ee      	beq.n	b428 <_fflush_r+0xc>
    b44a:	0021      	movs	r1, r4
    b44c:	0028      	movs	r0, r5
    b44e:	f7ff ff5b 	bl	b308 <__sflush_r>
    b452:	e7ea      	b.n	b42a <_fflush_r+0xe>
    b454:	4b05      	ldr	r3, [pc, #20]	; (b46c <_fflush_r+0x50>)
    b456:	429c      	cmp	r4, r3
    b458:	d101      	bne.n	b45e <_fflush_r+0x42>
    b45a:	68ac      	ldr	r4, [r5, #8]
    b45c:	e7f1      	b.n	b442 <_fflush_r+0x26>
    b45e:	4b04      	ldr	r3, [pc, #16]	; (b470 <_fflush_r+0x54>)
    b460:	429c      	cmp	r4, r3
    b462:	d1ee      	bne.n	b442 <_fflush_r+0x26>
    b464:	68ec      	ldr	r4, [r5, #12]
    b466:	e7ec      	b.n	b442 <_fflush_r+0x26>
    b468:	0000c7f4 	.word	0x0000c7f4
    b46c:	0000c814 	.word	0x0000c814
    b470:	0000c7d4 	.word	0x0000c7d4

0000b474 <_cleanup_r>:
    b474:	b510      	push	{r4, lr}
    b476:	4902      	ldr	r1, [pc, #8]	; (b480 <_cleanup_r+0xc>)
    b478:	f000 f8b2 	bl	b5e0 <_fwalk_reent>
    b47c:	bd10      	pop	{r4, pc}
    b47e:	46c0      	nop			; (mov r8, r8)
    b480:	0000b41d 	.word	0x0000b41d

0000b484 <std.isra.0>:
    b484:	2300      	movs	r3, #0
    b486:	b510      	push	{r4, lr}
    b488:	0004      	movs	r4, r0
    b48a:	6003      	str	r3, [r0, #0]
    b48c:	6043      	str	r3, [r0, #4]
    b48e:	6083      	str	r3, [r0, #8]
    b490:	8181      	strh	r1, [r0, #12]
    b492:	6643      	str	r3, [r0, #100]	; 0x64
    b494:	81c2      	strh	r2, [r0, #14]
    b496:	6103      	str	r3, [r0, #16]
    b498:	6143      	str	r3, [r0, #20]
    b49a:	6183      	str	r3, [r0, #24]
    b49c:	0019      	movs	r1, r3
    b49e:	2208      	movs	r2, #8
    b4a0:	305c      	adds	r0, #92	; 0x5c
    b4a2:	f7ff fc69 	bl	ad78 <memset>
    b4a6:	4b05      	ldr	r3, [pc, #20]	; (b4bc <std.isra.0+0x38>)
    b4a8:	6224      	str	r4, [r4, #32]
    b4aa:	6263      	str	r3, [r4, #36]	; 0x24
    b4ac:	4b04      	ldr	r3, [pc, #16]	; (b4c0 <std.isra.0+0x3c>)
    b4ae:	62a3      	str	r3, [r4, #40]	; 0x28
    b4b0:	4b04      	ldr	r3, [pc, #16]	; (b4c4 <std.isra.0+0x40>)
    b4b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    b4b4:	4b04      	ldr	r3, [pc, #16]	; (b4c8 <std.isra.0+0x44>)
    b4b6:	6323      	str	r3, [r4, #48]	; 0x30
    b4b8:	bd10      	pop	{r4, pc}
    b4ba:	46c0      	nop			; (mov r8, r8)
    b4bc:	0000bc99 	.word	0x0000bc99
    b4c0:	0000bcc1 	.word	0x0000bcc1
    b4c4:	0000bcf9 	.word	0x0000bcf9
    b4c8:	0000bd25 	.word	0x0000bd25

0000b4cc <__sfmoreglue>:
    b4cc:	b570      	push	{r4, r5, r6, lr}
    b4ce:	2568      	movs	r5, #104	; 0x68
    b4d0:	1e4a      	subs	r2, r1, #1
    b4d2:	4355      	muls	r5, r2
    b4d4:	000e      	movs	r6, r1
    b4d6:	0029      	movs	r1, r5
    b4d8:	3174      	adds	r1, #116	; 0x74
    b4da:	f7ff fc9f 	bl	ae1c <_malloc_r>
    b4de:	1e04      	subs	r4, r0, #0
    b4e0:	d008      	beq.n	b4f4 <__sfmoreglue+0x28>
    b4e2:	2100      	movs	r1, #0
    b4e4:	002a      	movs	r2, r5
    b4e6:	6001      	str	r1, [r0, #0]
    b4e8:	6046      	str	r6, [r0, #4]
    b4ea:	300c      	adds	r0, #12
    b4ec:	60a0      	str	r0, [r4, #8]
    b4ee:	3268      	adds	r2, #104	; 0x68
    b4f0:	f7ff fc42 	bl	ad78 <memset>
    b4f4:	0020      	movs	r0, r4
    b4f6:	bd70      	pop	{r4, r5, r6, pc}

0000b4f8 <__sinit>:
    b4f8:	6983      	ldr	r3, [r0, #24]
    b4fa:	b513      	push	{r0, r1, r4, lr}
    b4fc:	0004      	movs	r4, r0
    b4fe:	2b00      	cmp	r3, #0
    b500:	d128      	bne.n	b554 <__sinit+0x5c>
    b502:	6483      	str	r3, [r0, #72]	; 0x48
    b504:	64c3      	str	r3, [r0, #76]	; 0x4c
    b506:	6503      	str	r3, [r0, #80]	; 0x50
    b508:	4b13      	ldr	r3, [pc, #76]	; (b558 <__sinit+0x60>)
    b50a:	4a14      	ldr	r2, [pc, #80]	; (b55c <__sinit+0x64>)
    b50c:	681b      	ldr	r3, [r3, #0]
    b50e:	6282      	str	r2, [r0, #40]	; 0x28
    b510:	9301      	str	r3, [sp, #4]
    b512:	4298      	cmp	r0, r3
    b514:	d101      	bne.n	b51a <__sinit+0x22>
    b516:	2301      	movs	r3, #1
    b518:	6183      	str	r3, [r0, #24]
    b51a:	0020      	movs	r0, r4
    b51c:	f000 f820 	bl	b560 <__sfp>
    b520:	6060      	str	r0, [r4, #4]
    b522:	0020      	movs	r0, r4
    b524:	f000 f81c 	bl	b560 <__sfp>
    b528:	60a0      	str	r0, [r4, #8]
    b52a:	0020      	movs	r0, r4
    b52c:	f000 f818 	bl	b560 <__sfp>
    b530:	2200      	movs	r2, #0
    b532:	60e0      	str	r0, [r4, #12]
    b534:	2104      	movs	r1, #4
    b536:	6860      	ldr	r0, [r4, #4]
    b538:	f7ff ffa4 	bl	b484 <std.isra.0>
    b53c:	2201      	movs	r2, #1
    b53e:	2109      	movs	r1, #9
    b540:	68a0      	ldr	r0, [r4, #8]
    b542:	f7ff ff9f 	bl	b484 <std.isra.0>
    b546:	2202      	movs	r2, #2
    b548:	2112      	movs	r1, #18
    b54a:	68e0      	ldr	r0, [r4, #12]
    b54c:	f7ff ff9a 	bl	b484 <std.isra.0>
    b550:	2301      	movs	r3, #1
    b552:	61a3      	str	r3, [r4, #24]
    b554:	bd13      	pop	{r0, r1, r4, pc}
    b556:	46c0      	nop			; (mov r8, r8)
    b558:	0000c7d0 	.word	0x0000c7d0
    b55c:	0000b475 	.word	0x0000b475

0000b560 <__sfp>:
    b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b562:	4b1e      	ldr	r3, [pc, #120]	; (b5dc <__sfp+0x7c>)
    b564:	0007      	movs	r7, r0
    b566:	681e      	ldr	r6, [r3, #0]
    b568:	69b3      	ldr	r3, [r6, #24]
    b56a:	2b00      	cmp	r3, #0
    b56c:	d102      	bne.n	b574 <__sfp+0x14>
    b56e:	0030      	movs	r0, r6
    b570:	f7ff ffc2 	bl	b4f8 <__sinit>
    b574:	3648      	adds	r6, #72	; 0x48
    b576:	68b4      	ldr	r4, [r6, #8]
    b578:	6873      	ldr	r3, [r6, #4]
    b57a:	3b01      	subs	r3, #1
    b57c:	d504      	bpl.n	b588 <__sfp+0x28>
    b57e:	6833      	ldr	r3, [r6, #0]
    b580:	2b00      	cmp	r3, #0
    b582:	d007      	beq.n	b594 <__sfp+0x34>
    b584:	6836      	ldr	r6, [r6, #0]
    b586:	e7f6      	b.n	b576 <__sfp+0x16>
    b588:	220c      	movs	r2, #12
    b58a:	5ea5      	ldrsh	r5, [r4, r2]
    b58c:	2d00      	cmp	r5, #0
    b58e:	d00d      	beq.n	b5ac <__sfp+0x4c>
    b590:	3468      	adds	r4, #104	; 0x68
    b592:	e7f2      	b.n	b57a <__sfp+0x1a>
    b594:	2104      	movs	r1, #4
    b596:	0038      	movs	r0, r7
    b598:	f7ff ff98 	bl	b4cc <__sfmoreglue>
    b59c:	6030      	str	r0, [r6, #0]
    b59e:	2800      	cmp	r0, #0
    b5a0:	d1f0      	bne.n	b584 <__sfp+0x24>
    b5a2:	230c      	movs	r3, #12
    b5a4:	0004      	movs	r4, r0
    b5a6:	603b      	str	r3, [r7, #0]
    b5a8:	0020      	movs	r0, r4
    b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5ac:	2301      	movs	r3, #1
    b5ae:	0020      	movs	r0, r4
    b5b0:	425b      	negs	r3, r3
    b5b2:	81e3      	strh	r3, [r4, #14]
    b5b4:	3302      	adds	r3, #2
    b5b6:	81a3      	strh	r3, [r4, #12]
    b5b8:	6665      	str	r5, [r4, #100]	; 0x64
    b5ba:	6025      	str	r5, [r4, #0]
    b5bc:	60a5      	str	r5, [r4, #8]
    b5be:	6065      	str	r5, [r4, #4]
    b5c0:	6125      	str	r5, [r4, #16]
    b5c2:	6165      	str	r5, [r4, #20]
    b5c4:	61a5      	str	r5, [r4, #24]
    b5c6:	2208      	movs	r2, #8
    b5c8:	0029      	movs	r1, r5
    b5ca:	305c      	adds	r0, #92	; 0x5c
    b5cc:	f7ff fbd4 	bl	ad78 <memset>
    b5d0:	6365      	str	r5, [r4, #52]	; 0x34
    b5d2:	63a5      	str	r5, [r4, #56]	; 0x38
    b5d4:	64a5      	str	r5, [r4, #72]	; 0x48
    b5d6:	64e5      	str	r5, [r4, #76]	; 0x4c
    b5d8:	e7e6      	b.n	b5a8 <__sfp+0x48>
    b5da:	46c0      	nop			; (mov r8, r8)
    b5dc:	0000c7d0 	.word	0x0000c7d0

0000b5e0 <_fwalk_reent>:
    b5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b5e2:	0004      	movs	r4, r0
    b5e4:	0007      	movs	r7, r0
    b5e6:	2600      	movs	r6, #0
    b5e8:	9101      	str	r1, [sp, #4]
    b5ea:	3448      	adds	r4, #72	; 0x48
    b5ec:	2c00      	cmp	r4, #0
    b5ee:	d101      	bne.n	b5f4 <_fwalk_reent+0x14>
    b5f0:	0030      	movs	r0, r6
    b5f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b5f4:	6863      	ldr	r3, [r4, #4]
    b5f6:	68a5      	ldr	r5, [r4, #8]
    b5f8:	9300      	str	r3, [sp, #0]
    b5fa:	9b00      	ldr	r3, [sp, #0]
    b5fc:	3b01      	subs	r3, #1
    b5fe:	9300      	str	r3, [sp, #0]
    b600:	d501      	bpl.n	b606 <_fwalk_reent+0x26>
    b602:	6824      	ldr	r4, [r4, #0]
    b604:	e7f2      	b.n	b5ec <_fwalk_reent+0xc>
    b606:	89ab      	ldrh	r3, [r5, #12]
    b608:	2b01      	cmp	r3, #1
    b60a:	d908      	bls.n	b61e <_fwalk_reent+0x3e>
    b60c:	220e      	movs	r2, #14
    b60e:	5eab      	ldrsh	r3, [r5, r2]
    b610:	3301      	adds	r3, #1
    b612:	d004      	beq.n	b61e <_fwalk_reent+0x3e>
    b614:	0029      	movs	r1, r5
    b616:	0038      	movs	r0, r7
    b618:	9b01      	ldr	r3, [sp, #4]
    b61a:	4798      	blx	r3
    b61c:	4306      	orrs	r6, r0
    b61e:	3568      	adds	r5, #104	; 0x68
    b620:	e7eb      	b.n	b5fa <_fwalk_reent+0x1a>
	...

0000b624 <__swhatbuf_r>:
    b624:	b570      	push	{r4, r5, r6, lr}
    b626:	000e      	movs	r6, r1
    b628:	001d      	movs	r5, r3
    b62a:	230e      	movs	r3, #14
    b62c:	5ec9      	ldrsh	r1, [r1, r3]
    b62e:	b090      	sub	sp, #64	; 0x40
    b630:	0014      	movs	r4, r2
    b632:	2900      	cmp	r1, #0
    b634:	da07      	bge.n	b646 <__swhatbuf_r+0x22>
    b636:	2300      	movs	r3, #0
    b638:	602b      	str	r3, [r5, #0]
    b63a:	89b3      	ldrh	r3, [r6, #12]
    b63c:	061b      	lsls	r3, r3, #24
    b63e:	d411      	bmi.n	b664 <__swhatbuf_r+0x40>
    b640:	2380      	movs	r3, #128	; 0x80
    b642:	00db      	lsls	r3, r3, #3
    b644:	e00f      	b.n	b666 <__swhatbuf_r+0x42>
    b646:	aa01      	add	r2, sp, #4
    b648:	f000 fb98 	bl	bd7c <_fstat_r>
    b64c:	2800      	cmp	r0, #0
    b64e:	dbf2      	blt.n	b636 <__swhatbuf_r+0x12>
    b650:	22f0      	movs	r2, #240	; 0xf0
    b652:	9b02      	ldr	r3, [sp, #8]
    b654:	0212      	lsls	r2, r2, #8
    b656:	4013      	ands	r3, r2
    b658:	4a05      	ldr	r2, [pc, #20]	; (b670 <__swhatbuf_r+0x4c>)
    b65a:	189b      	adds	r3, r3, r2
    b65c:	425a      	negs	r2, r3
    b65e:	4153      	adcs	r3, r2
    b660:	602b      	str	r3, [r5, #0]
    b662:	e7ed      	b.n	b640 <__swhatbuf_r+0x1c>
    b664:	2340      	movs	r3, #64	; 0x40
    b666:	2000      	movs	r0, #0
    b668:	6023      	str	r3, [r4, #0]
    b66a:	b010      	add	sp, #64	; 0x40
    b66c:	bd70      	pop	{r4, r5, r6, pc}
    b66e:	46c0      	nop			; (mov r8, r8)
    b670:	ffffe000 	.word	0xffffe000

0000b674 <__smakebuf_r>:
    b674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b676:	2602      	movs	r6, #2
    b678:	898b      	ldrh	r3, [r1, #12]
    b67a:	0005      	movs	r5, r0
    b67c:	000c      	movs	r4, r1
    b67e:	4233      	tst	r3, r6
    b680:	d006      	beq.n	b690 <__smakebuf_r+0x1c>
    b682:	0023      	movs	r3, r4
    b684:	3347      	adds	r3, #71	; 0x47
    b686:	6023      	str	r3, [r4, #0]
    b688:	6123      	str	r3, [r4, #16]
    b68a:	2301      	movs	r3, #1
    b68c:	6163      	str	r3, [r4, #20]
    b68e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b690:	ab01      	add	r3, sp, #4
    b692:	466a      	mov	r2, sp
    b694:	f7ff ffc6 	bl	b624 <__swhatbuf_r>
    b698:	9900      	ldr	r1, [sp, #0]
    b69a:	0007      	movs	r7, r0
    b69c:	0028      	movs	r0, r5
    b69e:	f7ff fbbd 	bl	ae1c <_malloc_r>
    b6a2:	2800      	cmp	r0, #0
    b6a4:	d108      	bne.n	b6b8 <__smakebuf_r+0x44>
    b6a6:	220c      	movs	r2, #12
    b6a8:	5ea3      	ldrsh	r3, [r4, r2]
    b6aa:	059a      	lsls	r2, r3, #22
    b6ac:	d4ef      	bmi.n	b68e <__smakebuf_r+0x1a>
    b6ae:	2203      	movs	r2, #3
    b6b0:	4393      	bics	r3, r2
    b6b2:	431e      	orrs	r6, r3
    b6b4:	81a6      	strh	r6, [r4, #12]
    b6b6:	e7e4      	b.n	b682 <__smakebuf_r+0xe>
    b6b8:	4b0f      	ldr	r3, [pc, #60]	; (b6f8 <__smakebuf_r+0x84>)
    b6ba:	62ab      	str	r3, [r5, #40]	; 0x28
    b6bc:	2380      	movs	r3, #128	; 0x80
    b6be:	89a2      	ldrh	r2, [r4, #12]
    b6c0:	6020      	str	r0, [r4, #0]
    b6c2:	4313      	orrs	r3, r2
    b6c4:	81a3      	strh	r3, [r4, #12]
    b6c6:	9b00      	ldr	r3, [sp, #0]
    b6c8:	6120      	str	r0, [r4, #16]
    b6ca:	6163      	str	r3, [r4, #20]
    b6cc:	9b01      	ldr	r3, [sp, #4]
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	d00d      	beq.n	b6ee <__smakebuf_r+0x7a>
    b6d2:	230e      	movs	r3, #14
    b6d4:	5ee1      	ldrsh	r1, [r4, r3]
    b6d6:	0028      	movs	r0, r5
    b6d8:	f000 fb62 	bl	bda0 <_isatty_r>
    b6dc:	2800      	cmp	r0, #0
    b6de:	d006      	beq.n	b6ee <__smakebuf_r+0x7a>
    b6e0:	2203      	movs	r2, #3
    b6e2:	89a3      	ldrh	r3, [r4, #12]
    b6e4:	4393      	bics	r3, r2
    b6e6:	001a      	movs	r2, r3
    b6e8:	2301      	movs	r3, #1
    b6ea:	4313      	orrs	r3, r2
    b6ec:	81a3      	strh	r3, [r4, #12]
    b6ee:	89a0      	ldrh	r0, [r4, #12]
    b6f0:	4338      	orrs	r0, r7
    b6f2:	81a0      	strh	r0, [r4, #12]
    b6f4:	e7cb      	b.n	b68e <__smakebuf_r+0x1a>
    b6f6:	46c0      	nop			; (mov r8, r8)
    b6f8:	0000b475 	.word	0x0000b475

0000b6fc <__malloc_lock>:
    b6fc:	4770      	bx	lr

0000b6fe <__malloc_unlock>:
    b6fe:	4770      	bx	lr

0000b700 <__sfputc_r>:
    b700:	6893      	ldr	r3, [r2, #8]
    b702:	b510      	push	{r4, lr}
    b704:	3b01      	subs	r3, #1
    b706:	6093      	str	r3, [r2, #8]
    b708:	2b00      	cmp	r3, #0
    b70a:	da05      	bge.n	b718 <__sfputc_r+0x18>
    b70c:	6994      	ldr	r4, [r2, #24]
    b70e:	42a3      	cmp	r3, r4
    b710:	db08      	blt.n	b724 <__sfputc_r+0x24>
    b712:	b2cb      	uxtb	r3, r1
    b714:	2b0a      	cmp	r3, #10
    b716:	d005      	beq.n	b724 <__sfputc_r+0x24>
    b718:	6813      	ldr	r3, [r2, #0]
    b71a:	1c58      	adds	r0, r3, #1
    b71c:	6010      	str	r0, [r2, #0]
    b71e:	7019      	strb	r1, [r3, #0]
    b720:	b2c8      	uxtb	r0, r1
    b722:	bd10      	pop	{r4, pc}
    b724:	f7ff fd24 	bl	b170 <__swbuf_r>
    b728:	e7fb      	b.n	b722 <__sfputc_r+0x22>

0000b72a <__sfputs_r>:
    b72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b72c:	0006      	movs	r6, r0
    b72e:	000f      	movs	r7, r1
    b730:	0014      	movs	r4, r2
    b732:	18d5      	adds	r5, r2, r3
    b734:	42ac      	cmp	r4, r5
    b736:	d101      	bne.n	b73c <__sfputs_r+0x12>
    b738:	2000      	movs	r0, #0
    b73a:	e007      	b.n	b74c <__sfputs_r+0x22>
    b73c:	7821      	ldrb	r1, [r4, #0]
    b73e:	003a      	movs	r2, r7
    b740:	0030      	movs	r0, r6
    b742:	f7ff ffdd 	bl	b700 <__sfputc_r>
    b746:	3401      	adds	r4, #1
    b748:	1c43      	adds	r3, r0, #1
    b74a:	d1f3      	bne.n	b734 <__sfputs_r+0xa>
    b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b750 <_vfiprintf_r>:
    b750:	b5f0      	push	{r4, r5, r6, r7, lr}
    b752:	b09f      	sub	sp, #124	; 0x7c
    b754:	0006      	movs	r6, r0
    b756:	000f      	movs	r7, r1
    b758:	0014      	movs	r4, r2
    b75a:	9305      	str	r3, [sp, #20]
    b75c:	2800      	cmp	r0, #0
    b75e:	d004      	beq.n	b76a <_vfiprintf_r+0x1a>
    b760:	6983      	ldr	r3, [r0, #24]
    b762:	2b00      	cmp	r3, #0
    b764:	d101      	bne.n	b76a <_vfiprintf_r+0x1a>
    b766:	f7ff fec7 	bl	b4f8 <__sinit>
    b76a:	4b7f      	ldr	r3, [pc, #508]	; (b968 <_vfiprintf_r+0x218>)
    b76c:	429f      	cmp	r7, r3
    b76e:	d15c      	bne.n	b82a <_vfiprintf_r+0xda>
    b770:	6877      	ldr	r7, [r6, #4]
    b772:	89bb      	ldrh	r3, [r7, #12]
    b774:	071b      	lsls	r3, r3, #28
    b776:	d562      	bpl.n	b83e <_vfiprintf_r+0xee>
    b778:	693b      	ldr	r3, [r7, #16]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d05f      	beq.n	b83e <_vfiprintf_r+0xee>
    b77e:	2300      	movs	r3, #0
    b780:	ad06      	add	r5, sp, #24
    b782:	616b      	str	r3, [r5, #20]
    b784:	3320      	adds	r3, #32
    b786:	766b      	strb	r3, [r5, #25]
    b788:	3310      	adds	r3, #16
    b78a:	76ab      	strb	r3, [r5, #26]
    b78c:	9402      	str	r4, [sp, #8]
    b78e:	9c02      	ldr	r4, [sp, #8]
    b790:	7823      	ldrb	r3, [r4, #0]
    b792:	2b00      	cmp	r3, #0
    b794:	d15d      	bne.n	b852 <_vfiprintf_r+0x102>
    b796:	9b02      	ldr	r3, [sp, #8]
    b798:	1ae3      	subs	r3, r4, r3
    b79a:	9304      	str	r3, [sp, #16]
    b79c:	d00d      	beq.n	b7ba <_vfiprintf_r+0x6a>
    b79e:	9b04      	ldr	r3, [sp, #16]
    b7a0:	9a02      	ldr	r2, [sp, #8]
    b7a2:	0039      	movs	r1, r7
    b7a4:	0030      	movs	r0, r6
    b7a6:	f7ff ffc0 	bl	b72a <__sfputs_r>
    b7aa:	1c43      	adds	r3, r0, #1
    b7ac:	d100      	bne.n	b7b0 <_vfiprintf_r+0x60>
    b7ae:	e0cc      	b.n	b94a <_vfiprintf_r+0x1fa>
    b7b0:	696a      	ldr	r2, [r5, #20]
    b7b2:	9b04      	ldr	r3, [sp, #16]
    b7b4:	4694      	mov	ip, r2
    b7b6:	4463      	add	r3, ip
    b7b8:	616b      	str	r3, [r5, #20]
    b7ba:	7823      	ldrb	r3, [r4, #0]
    b7bc:	2b00      	cmp	r3, #0
    b7be:	d100      	bne.n	b7c2 <_vfiprintf_r+0x72>
    b7c0:	e0c3      	b.n	b94a <_vfiprintf_r+0x1fa>
    b7c2:	2201      	movs	r2, #1
    b7c4:	2300      	movs	r3, #0
    b7c6:	4252      	negs	r2, r2
    b7c8:	606a      	str	r2, [r5, #4]
    b7ca:	a902      	add	r1, sp, #8
    b7cc:	3254      	adds	r2, #84	; 0x54
    b7ce:	1852      	adds	r2, r2, r1
    b7d0:	3401      	adds	r4, #1
    b7d2:	602b      	str	r3, [r5, #0]
    b7d4:	60eb      	str	r3, [r5, #12]
    b7d6:	60ab      	str	r3, [r5, #8]
    b7d8:	7013      	strb	r3, [r2, #0]
    b7da:	65ab      	str	r3, [r5, #88]	; 0x58
    b7dc:	7821      	ldrb	r1, [r4, #0]
    b7de:	2205      	movs	r2, #5
    b7e0:	4862      	ldr	r0, [pc, #392]	; (b96c <_vfiprintf_r+0x21c>)
    b7e2:	f000 fb03 	bl	bdec <memchr>
    b7e6:	1c63      	adds	r3, r4, #1
    b7e8:	469c      	mov	ip, r3
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d135      	bne.n	b85a <_vfiprintf_r+0x10a>
    b7ee:	6829      	ldr	r1, [r5, #0]
    b7f0:	06cb      	lsls	r3, r1, #27
    b7f2:	d504      	bpl.n	b7fe <_vfiprintf_r+0xae>
    b7f4:	2353      	movs	r3, #83	; 0x53
    b7f6:	aa02      	add	r2, sp, #8
    b7f8:	3020      	adds	r0, #32
    b7fa:	189b      	adds	r3, r3, r2
    b7fc:	7018      	strb	r0, [r3, #0]
    b7fe:	070b      	lsls	r3, r1, #28
    b800:	d504      	bpl.n	b80c <_vfiprintf_r+0xbc>
    b802:	2353      	movs	r3, #83	; 0x53
    b804:	202b      	movs	r0, #43	; 0x2b
    b806:	aa02      	add	r2, sp, #8
    b808:	189b      	adds	r3, r3, r2
    b80a:	7018      	strb	r0, [r3, #0]
    b80c:	7823      	ldrb	r3, [r4, #0]
    b80e:	2b2a      	cmp	r3, #42	; 0x2a
    b810:	d02c      	beq.n	b86c <_vfiprintf_r+0x11c>
    b812:	2000      	movs	r0, #0
    b814:	210a      	movs	r1, #10
    b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b818:	7822      	ldrb	r2, [r4, #0]
    b81a:	3a30      	subs	r2, #48	; 0x30
    b81c:	2a09      	cmp	r2, #9
    b81e:	d800      	bhi.n	b822 <_vfiprintf_r+0xd2>
    b820:	e06b      	b.n	b8fa <_vfiprintf_r+0x1aa>
    b822:	2800      	cmp	r0, #0
    b824:	d02a      	beq.n	b87c <_vfiprintf_r+0x12c>
    b826:	9309      	str	r3, [sp, #36]	; 0x24
    b828:	e028      	b.n	b87c <_vfiprintf_r+0x12c>
    b82a:	4b51      	ldr	r3, [pc, #324]	; (b970 <_vfiprintf_r+0x220>)
    b82c:	429f      	cmp	r7, r3
    b82e:	d101      	bne.n	b834 <_vfiprintf_r+0xe4>
    b830:	68b7      	ldr	r7, [r6, #8]
    b832:	e79e      	b.n	b772 <_vfiprintf_r+0x22>
    b834:	4b4f      	ldr	r3, [pc, #316]	; (b974 <_vfiprintf_r+0x224>)
    b836:	429f      	cmp	r7, r3
    b838:	d19b      	bne.n	b772 <_vfiprintf_r+0x22>
    b83a:	68f7      	ldr	r7, [r6, #12]
    b83c:	e799      	b.n	b772 <_vfiprintf_r+0x22>
    b83e:	0039      	movs	r1, r7
    b840:	0030      	movs	r0, r6
    b842:	f7ff fceb 	bl	b21c <__swsetup_r>
    b846:	2800      	cmp	r0, #0
    b848:	d099      	beq.n	b77e <_vfiprintf_r+0x2e>
    b84a:	2001      	movs	r0, #1
    b84c:	4240      	negs	r0, r0
    b84e:	b01f      	add	sp, #124	; 0x7c
    b850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b852:	2b25      	cmp	r3, #37	; 0x25
    b854:	d09f      	beq.n	b796 <_vfiprintf_r+0x46>
    b856:	3401      	adds	r4, #1
    b858:	e79a      	b.n	b790 <_vfiprintf_r+0x40>
    b85a:	4b44      	ldr	r3, [pc, #272]	; (b96c <_vfiprintf_r+0x21c>)
    b85c:	6829      	ldr	r1, [r5, #0]
    b85e:	1ac0      	subs	r0, r0, r3
    b860:	2301      	movs	r3, #1
    b862:	4083      	lsls	r3, r0
    b864:	430b      	orrs	r3, r1
    b866:	602b      	str	r3, [r5, #0]
    b868:	4664      	mov	r4, ip
    b86a:	e7b7      	b.n	b7dc <_vfiprintf_r+0x8c>
    b86c:	9b05      	ldr	r3, [sp, #20]
    b86e:	1d18      	adds	r0, r3, #4
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	9005      	str	r0, [sp, #20]
    b874:	2b00      	cmp	r3, #0
    b876:	db3a      	blt.n	b8ee <_vfiprintf_r+0x19e>
    b878:	9309      	str	r3, [sp, #36]	; 0x24
    b87a:	4664      	mov	r4, ip
    b87c:	7823      	ldrb	r3, [r4, #0]
    b87e:	2b2e      	cmp	r3, #46	; 0x2e
    b880:	d10b      	bne.n	b89a <_vfiprintf_r+0x14a>
    b882:	7863      	ldrb	r3, [r4, #1]
    b884:	1c62      	adds	r2, r4, #1
    b886:	2b2a      	cmp	r3, #42	; 0x2a
    b888:	d13f      	bne.n	b90a <_vfiprintf_r+0x1ba>
    b88a:	9b05      	ldr	r3, [sp, #20]
    b88c:	3402      	adds	r4, #2
    b88e:	1d1a      	adds	r2, r3, #4
    b890:	681b      	ldr	r3, [r3, #0]
    b892:	9205      	str	r2, [sp, #20]
    b894:	2b00      	cmp	r3, #0
    b896:	db35      	blt.n	b904 <_vfiprintf_r+0x1b4>
    b898:	9307      	str	r3, [sp, #28]
    b89a:	7821      	ldrb	r1, [r4, #0]
    b89c:	2203      	movs	r2, #3
    b89e:	4836      	ldr	r0, [pc, #216]	; (b978 <_vfiprintf_r+0x228>)
    b8a0:	f000 faa4 	bl	bdec <memchr>
    b8a4:	2800      	cmp	r0, #0
    b8a6:	d007      	beq.n	b8b8 <_vfiprintf_r+0x168>
    b8a8:	4b33      	ldr	r3, [pc, #204]	; (b978 <_vfiprintf_r+0x228>)
    b8aa:	682a      	ldr	r2, [r5, #0]
    b8ac:	1ac0      	subs	r0, r0, r3
    b8ae:	2340      	movs	r3, #64	; 0x40
    b8b0:	4083      	lsls	r3, r0
    b8b2:	4313      	orrs	r3, r2
    b8b4:	602b      	str	r3, [r5, #0]
    b8b6:	3401      	adds	r4, #1
    b8b8:	7821      	ldrb	r1, [r4, #0]
    b8ba:	1c63      	adds	r3, r4, #1
    b8bc:	2206      	movs	r2, #6
    b8be:	482f      	ldr	r0, [pc, #188]	; (b97c <_vfiprintf_r+0x22c>)
    b8c0:	9302      	str	r3, [sp, #8]
    b8c2:	7629      	strb	r1, [r5, #24]
    b8c4:	f000 fa92 	bl	bdec <memchr>
    b8c8:	2800      	cmp	r0, #0
    b8ca:	d044      	beq.n	b956 <_vfiprintf_r+0x206>
    b8cc:	4b2c      	ldr	r3, [pc, #176]	; (b980 <_vfiprintf_r+0x230>)
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	d12f      	bne.n	b932 <_vfiprintf_r+0x1e2>
    b8d2:	6829      	ldr	r1, [r5, #0]
    b8d4:	9b05      	ldr	r3, [sp, #20]
    b8d6:	2207      	movs	r2, #7
    b8d8:	05c9      	lsls	r1, r1, #23
    b8da:	d528      	bpl.n	b92e <_vfiprintf_r+0x1de>
    b8dc:	189b      	adds	r3, r3, r2
    b8de:	4393      	bics	r3, r2
    b8e0:	3308      	adds	r3, #8
    b8e2:	9305      	str	r3, [sp, #20]
    b8e4:	696b      	ldr	r3, [r5, #20]
    b8e6:	9a03      	ldr	r2, [sp, #12]
    b8e8:	189b      	adds	r3, r3, r2
    b8ea:	616b      	str	r3, [r5, #20]
    b8ec:	e74f      	b.n	b78e <_vfiprintf_r+0x3e>
    b8ee:	425b      	negs	r3, r3
    b8f0:	60eb      	str	r3, [r5, #12]
    b8f2:	2302      	movs	r3, #2
    b8f4:	430b      	orrs	r3, r1
    b8f6:	602b      	str	r3, [r5, #0]
    b8f8:	e7bf      	b.n	b87a <_vfiprintf_r+0x12a>
    b8fa:	434b      	muls	r3, r1
    b8fc:	3401      	adds	r4, #1
    b8fe:	189b      	adds	r3, r3, r2
    b900:	2001      	movs	r0, #1
    b902:	e789      	b.n	b818 <_vfiprintf_r+0xc8>
    b904:	2301      	movs	r3, #1
    b906:	425b      	negs	r3, r3
    b908:	e7c6      	b.n	b898 <_vfiprintf_r+0x148>
    b90a:	2300      	movs	r3, #0
    b90c:	0014      	movs	r4, r2
    b90e:	200a      	movs	r0, #10
    b910:	001a      	movs	r2, r3
    b912:	606b      	str	r3, [r5, #4]
    b914:	7821      	ldrb	r1, [r4, #0]
    b916:	3930      	subs	r1, #48	; 0x30
    b918:	2909      	cmp	r1, #9
    b91a:	d903      	bls.n	b924 <_vfiprintf_r+0x1d4>
    b91c:	2b00      	cmp	r3, #0
    b91e:	d0bc      	beq.n	b89a <_vfiprintf_r+0x14a>
    b920:	9207      	str	r2, [sp, #28]
    b922:	e7ba      	b.n	b89a <_vfiprintf_r+0x14a>
    b924:	4342      	muls	r2, r0
    b926:	3401      	adds	r4, #1
    b928:	1852      	adds	r2, r2, r1
    b92a:	2301      	movs	r3, #1
    b92c:	e7f2      	b.n	b914 <_vfiprintf_r+0x1c4>
    b92e:	3307      	adds	r3, #7
    b930:	e7d5      	b.n	b8de <_vfiprintf_r+0x18e>
    b932:	ab05      	add	r3, sp, #20
    b934:	9300      	str	r3, [sp, #0]
    b936:	003a      	movs	r2, r7
    b938:	4b12      	ldr	r3, [pc, #72]	; (b984 <_vfiprintf_r+0x234>)
    b93a:	0029      	movs	r1, r5
    b93c:	0030      	movs	r0, r6
    b93e:	e000      	b.n	b942 <_vfiprintf_r+0x1f2>
    b940:	bf00      	nop
    b942:	9003      	str	r0, [sp, #12]
    b944:	9b03      	ldr	r3, [sp, #12]
    b946:	3301      	adds	r3, #1
    b948:	d1cc      	bne.n	b8e4 <_vfiprintf_r+0x194>
    b94a:	89bb      	ldrh	r3, [r7, #12]
    b94c:	065b      	lsls	r3, r3, #25
    b94e:	d500      	bpl.n	b952 <_vfiprintf_r+0x202>
    b950:	e77b      	b.n	b84a <_vfiprintf_r+0xfa>
    b952:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b954:	e77b      	b.n	b84e <_vfiprintf_r+0xfe>
    b956:	ab05      	add	r3, sp, #20
    b958:	9300      	str	r3, [sp, #0]
    b95a:	003a      	movs	r2, r7
    b95c:	4b09      	ldr	r3, [pc, #36]	; (b984 <_vfiprintf_r+0x234>)
    b95e:	0029      	movs	r1, r5
    b960:	0030      	movs	r0, r6
    b962:	f000 f87f 	bl	ba64 <_printf_i>
    b966:	e7ec      	b.n	b942 <_vfiprintf_r+0x1f2>
    b968:	0000c7f4 	.word	0x0000c7f4
    b96c:	0000c834 	.word	0x0000c834
    b970:	0000c814 	.word	0x0000c814
    b974:	0000c7d4 	.word	0x0000c7d4
    b978:	0000c83a 	.word	0x0000c83a
    b97c:	0000c83e 	.word	0x0000c83e
    b980:	00000000 	.word	0x00000000
    b984:	0000b72b 	.word	0x0000b72b

0000b988 <_printf_common>:
    b988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b98a:	0015      	movs	r5, r2
    b98c:	9301      	str	r3, [sp, #4]
    b98e:	688a      	ldr	r2, [r1, #8]
    b990:	690b      	ldr	r3, [r1, #16]
    b992:	9000      	str	r0, [sp, #0]
    b994:	000c      	movs	r4, r1
    b996:	4293      	cmp	r3, r2
    b998:	da00      	bge.n	b99c <_printf_common+0x14>
    b99a:	0013      	movs	r3, r2
    b99c:	0022      	movs	r2, r4
    b99e:	602b      	str	r3, [r5, #0]
    b9a0:	3243      	adds	r2, #67	; 0x43
    b9a2:	7812      	ldrb	r2, [r2, #0]
    b9a4:	2a00      	cmp	r2, #0
    b9a6:	d001      	beq.n	b9ac <_printf_common+0x24>
    b9a8:	3301      	adds	r3, #1
    b9aa:	602b      	str	r3, [r5, #0]
    b9ac:	6823      	ldr	r3, [r4, #0]
    b9ae:	069b      	lsls	r3, r3, #26
    b9b0:	d502      	bpl.n	b9b8 <_printf_common+0x30>
    b9b2:	682b      	ldr	r3, [r5, #0]
    b9b4:	3302      	adds	r3, #2
    b9b6:	602b      	str	r3, [r5, #0]
    b9b8:	2706      	movs	r7, #6
    b9ba:	6823      	ldr	r3, [r4, #0]
    b9bc:	401f      	ands	r7, r3
    b9be:	d027      	beq.n	ba10 <_printf_common+0x88>
    b9c0:	0023      	movs	r3, r4
    b9c2:	3343      	adds	r3, #67	; 0x43
    b9c4:	781b      	ldrb	r3, [r3, #0]
    b9c6:	1e5a      	subs	r2, r3, #1
    b9c8:	4193      	sbcs	r3, r2
    b9ca:	6822      	ldr	r2, [r4, #0]
    b9cc:	0692      	lsls	r2, r2, #26
    b9ce:	d430      	bmi.n	ba32 <_printf_common+0xaa>
    b9d0:	0022      	movs	r2, r4
    b9d2:	9901      	ldr	r1, [sp, #4]
    b9d4:	3243      	adds	r2, #67	; 0x43
    b9d6:	9800      	ldr	r0, [sp, #0]
    b9d8:	9e08      	ldr	r6, [sp, #32]
    b9da:	47b0      	blx	r6
    b9dc:	1c43      	adds	r3, r0, #1
    b9de:	d025      	beq.n	ba2c <_printf_common+0xa4>
    b9e0:	2306      	movs	r3, #6
    b9e2:	6820      	ldr	r0, [r4, #0]
    b9e4:	682a      	ldr	r2, [r5, #0]
    b9e6:	68e1      	ldr	r1, [r4, #12]
    b9e8:	4003      	ands	r3, r0
    b9ea:	2500      	movs	r5, #0
    b9ec:	2b04      	cmp	r3, #4
    b9ee:	d103      	bne.n	b9f8 <_printf_common+0x70>
    b9f0:	1a8d      	subs	r5, r1, r2
    b9f2:	43eb      	mvns	r3, r5
    b9f4:	17db      	asrs	r3, r3, #31
    b9f6:	401d      	ands	r5, r3
    b9f8:	68a3      	ldr	r3, [r4, #8]
    b9fa:	6922      	ldr	r2, [r4, #16]
    b9fc:	4293      	cmp	r3, r2
    b9fe:	dd01      	ble.n	ba04 <_printf_common+0x7c>
    ba00:	1a9b      	subs	r3, r3, r2
    ba02:	18ed      	adds	r5, r5, r3
    ba04:	2700      	movs	r7, #0
    ba06:	42bd      	cmp	r5, r7
    ba08:	d120      	bne.n	ba4c <_printf_common+0xc4>
    ba0a:	2000      	movs	r0, #0
    ba0c:	e010      	b.n	ba30 <_printf_common+0xa8>
    ba0e:	3701      	adds	r7, #1
    ba10:	68e3      	ldr	r3, [r4, #12]
    ba12:	682a      	ldr	r2, [r5, #0]
    ba14:	1a9b      	subs	r3, r3, r2
    ba16:	429f      	cmp	r7, r3
    ba18:	dad2      	bge.n	b9c0 <_printf_common+0x38>
    ba1a:	0022      	movs	r2, r4
    ba1c:	2301      	movs	r3, #1
    ba1e:	3219      	adds	r2, #25
    ba20:	9901      	ldr	r1, [sp, #4]
    ba22:	9800      	ldr	r0, [sp, #0]
    ba24:	9e08      	ldr	r6, [sp, #32]
    ba26:	47b0      	blx	r6
    ba28:	1c43      	adds	r3, r0, #1
    ba2a:	d1f0      	bne.n	ba0e <_printf_common+0x86>
    ba2c:	2001      	movs	r0, #1
    ba2e:	4240      	negs	r0, r0
    ba30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ba32:	2030      	movs	r0, #48	; 0x30
    ba34:	18e1      	adds	r1, r4, r3
    ba36:	3143      	adds	r1, #67	; 0x43
    ba38:	7008      	strb	r0, [r1, #0]
    ba3a:	0021      	movs	r1, r4
    ba3c:	1c5a      	adds	r2, r3, #1
    ba3e:	3145      	adds	r1, #69	; 0x45
    ba40:	7809      	ldrb	r1, [r1, #0]
    ba42:	18a2      	adds	r2, r4, r2
    ba44:	3243      	adds	r2, #67	; 0x43
    ba46:	3302      	adds	r3, #2
    ba48:	7011      	strb	r1, [r2, #0]
    ba4a:	e7c1      	b.n	b9d0 <_printf_common+0x48>
    ba4c:	0022      	movs	r2, r4
    ba4e:	2301      	movs	r3, #1
    ba50:	321a      	adds	r2, #26
    ba52:	9901      	ldr	r1, [sp, #4]
    ba54:	9800      	ldr	r0, [sp, #0]
    ba56:	9e08      	ldr	r6, [sp, #32]
    ba58:	47b0      	blx	r6
    ba5a:	1c43      	adds	r3, r0, #1
    ba5c:	d0e6      	beq.n	ba2c <_printf_common+0xa4>
    ba5e:	3701      	adds	r7, #1
    ba60:	e7d1      	b.n	ba06 <_printf_common+0x7e>
	...

0000ba64 <_printf_i>:
    ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba66:	b08b      	sub	sp, #44	; 0x2c
    ba68:	9206      	str	r2, [sp, #24]
    ba6a:	000a      	movs	r2, r1
    ba6c:	3243      	adds	r2, #67	; 0x43
    ba6e:	9307      	str	r3, [sp, #28]
    ba70:	9005      	str	r0, [sp, #20]
    ba72:	9204      	str	r2, [sp, #16]
    ba74:	7e0a      	ldrb	r2, [r1, #24]
    ba76:	000c      	movs	r4, r1
    ba78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ba7a:	2a6e      	cmp	r2, #110	; 0x6e
    ba7c:	d100      	bne.n	ba80 <_printf_i+0x1c>
    ba7e:	e08f      	b.n	bba0 <_printf_i+0x13c>
    ba80:	d817      	bhi.n	bab2 <_printf_i+0x4e>
    ba82:	2a63      	cmp	r2, #99	; 0x63
    ba84:	d02c      	beq.n	bae0 <_printf_i+0x7c>
    ba86:	d808      	bhi.n	ba9a <_printf_i+0x36>
    ba88:	2a00      	cmp	r2, #0
    ba8a:	d100      	bne.n	ba8e <_printf_i+0x2a>
    ba8c:	e099      	b.n	bbc2 <_printf_i+0x15e>
    ba8e:	2a58      	cmp	r2, #88	; 0x58
    ba90:	d054      	beq.n	bb3c <_printf_i+0xd8>
    ba92:	0026      	movs	r6, r4
    ba94:	3642      	adds	r6, #66	; 0x42
    ba96:	7032      	strb	r2, [r6, #0]
    ba98:	e029      	b.n	baee <_printf_i+0x8a>
    ba9a:	2a64      	cmp	r2, #100	; 0x64
    ba9c:	d001      	beq.n	baa2 <_printf_i+0x3e>
    ba9e:	2a69      	cmp	r2, #105	; 0x69
    baa0:	d1f7      	bne.n	ba92 <_printf_i+0x2e>
    baa2:	6821      	ldr	r1, [r4, #0]
    baa4:	681a      	ldr	r2, [r3, #0]
    baa6:	0608      	lsls	r0, r1, #24
    baa8:	d523      	bpl.n	baf2 <_printf_i+0x8e>
    baaa:	1d11      	adds	r1, r2, #4
    baac:	6019      	str	r1, [r3, #0]
    baae:	6815      	ldr	r5, [r2, #0]
    bab0:	e025      	b.n	bafe <_printf_i+0x9a>
    bab2:	2a73      	cmp	r2, #115	; 0x73
    bab4:	d100      	bne.n	bab8 <_printf_i+0x54>
    bab6:	e088      	b.n	bbca <_printf_i+0x166>
    bab8:	d808      	bhi.n	bacc <_printf_i+0x68>
    baba:	2a6f      	cmp	r2, #111	; 0x6f
    babc:	d029      	beq.n	bb12 <_printf_i+0xae>
    babe:	2a70      	cmp	r2, #112	; 0x70
    bac0:	d1e7      	bne.n	ba92 <_printf_i+0x2e>
    bac2:	2220      	movs	r2, #32
    bac4:	6809      	ldr	r1, [r1, #0]
    bac6:	430a      	orrs	r2, r1
    bac8:	6022      	str	r2, [r4, #0]
    baca:	e003      	b.n	bad4 <_printf_i+0x70>
    bacc:	2a75      	cmp	r2, #117	; 0x75
    bace:	d020      	beq.n	bb12 <_printf_i+0xae>
    bad0:	2a78      	cmp	r2, #120	; 0x78
    bad2:	d1de      	bne.n	ba92 <_printf_i+0x2e>
    bad4:	0022      	movs	r2, r4
    bad6:	2178      	movs	r1, #120	; 0x78
    bad8:	3245      	adds	r2, #69	; 0x45
    bada:	7011      	strb	r1, [r2, #0]
    badc:	4a6c      	ldr	r2, [pc, #432]	; (bc90 <_printf_i+0x22c>)
    bade:	e030      	b.n	bb42 <_printf_i+0xde>
    bae0:	000e      	movs	r6, r1
    bae2:	681a      	ldr	r2, [r3, #0]
    bae4:	3642      	adds	r6, #66	; 0x42
    bae6:	1d11      	adds	r1, r2, #4
    bae8:	6019      	str	r1, [r3, #0]
    baea:	6813      	ldr	r3, [r2, #0]
    baec:	7033      	strb	r3, [r6, #0]
    baee:	2301      	movs	r3, #1
    baf0:	e079      	b.n	bbe6 <_printf_i+0x182>
    baf2:	0649      	lsls	r1, r1, #25
    baf4:	d5d9      	bpl.n	baaa <_printf_i+0x46>
    baf6:	1d11      	adds	r1, r2, #4
    baf8:	6019      	str	r1, [r3, #0]
    bafa:	2300      	movs	r3, #0
    bafc:	5ed5      	ldrsh	r5, [r2, r3]
    bafe:	2d00      	cmp	r5, #0
    bb00:	da03      	bge.n	bb0a <_printf_i+0xa6>
    bb02:	232d      	movs	r3, #45	; 0x2d
    bb04:	9a04      	ldr	r2, [sp, #16]
    bb06:	426d      	negs	r5, r5
    bb08:	7013      	strb	r3, [r2, #0]
    bb0a:	4b62      	ldr	r3, [pc, #392]	; (bc94 <_printf_i+0x230>)
    bb0c:	270a      	movs	r7, #10
    bb0e:	9303      	str	r3, [sp, #12]
    bb10:	e02f      	b.n	bb72 <_printf_i+0x10e>
    bb12:	6820      	ldr	r0, [r4, #0]
    bb14:	6819      	ldr	r1, [r3, #0]
    bb16:	0605      	lsls	r5, r0, #24
    bb18:	d503      	bpl.n	bb22 <_printf_i+0xbe>
    bb1a:	1d08      	adds	r0, r1, #4
    bb1c:	6018      	str	r0, [r3, #0]
    bb1e:	680d      	ldr	r5, [r1, #0]
    bb20:	e005      	b.n	bb2e <_printf_i+0xca>
    bb22:	0640      	lsls	r0, r0, #25
    bb24:	d5f9      	bpl.n	bb1a <_printf_i+0xb6>
    bb26:	680d      	ldr	r5, [r1, #0]
    bb28:	1d08      	adds	r0, r1, #4
    bb2a:	6018      	str	r0, [r3, #0]
    bb2c:	b2ad      	uxth	r5, r5
    bb2e:	4b59      	ldr	r3, [pc, #356]	; (bc94 <_printf_i+0x230>)
    bb30:	2708      	movs	r7, #8
    bb32:	9303      	str	r3, [sp, #12]
    bb34:	2a6f      	cmp	r2, #111	; 0x6f
    bb36:	d018      	beq.n	bb6a <_printf_i+0x106>
    bb38:	270a      	movs	r7, #10
    bb3a:	e016      	b.n	bb6a <_printf_i+0x106>
    bb3c:	3145      	adds	r1, #69	; 0x45
    bb3e:	700a      	strb	r2, [r1, #0]
    bb40:	4a54      	ldr	r2, [pc, #336]	; (bc94 <_printf_i+0x230>)
    bb42:	9203      	str	r2, [sp, #12]
    bb44:	681a      	ldr	r2, [r3, #0]
    bb46:	6821      	ldr	r1, [r4, #0]
    bb48:	1d10      	adds	r0, r2, #4
    bb4a:	6018      	str	r0, [r3, #0]
    bb4c:	6815      	ldr	r5, [r2, #0]
    bb4e:	0608      	lsls	r0, r1, #24
    bb50:	d522      	bpl.n	bb98 <_printf_i+0x134>
    bb52:	07cb      	lsls	r3, r1, #31
    bb54:	d502      	bpl.n	bb5c <_printf_i+0xf8>
    bb56:	2320      	movs	r3, #32
    bb58:	4319      	orrs	r1, r3
    bb5a:	6021      	str	r1, [r4, #0]
    bb5c:	2710      	movs	r7, #16
    bb5e:	2d00      	cmp	r5, #0
    bb60:	d103      	bne.n	bb6a <_printf_i+0x106>
    bb62:	2320      	movs	r3, #32
    bb64:	6822      	ldr	r2, [r4, #0]
    bb66:	439a      	bics	r2, r3
    bb68:	6022      	str	r2, [r4, #0]
    bb6a:	0023      	movs	r3, r4
    bb6c:	2200      	movs	r2, #0
    bb6e:	3343      	adds	r3, #67	; 0x43
    bb70:	701a      	strb	r2, [r3, #0]
    bb72:	6863      	ldr	r3, [r4, #4]
    bb74:	60a3      	str	r3, [r4, #8]
    bb76:	2b00      	cmp	r3, #0
    bb78:	db5c      	blt.n	bc34 <_printf_i+0x1d0>
    bb7a:	2204      	movs	r2, #4
    bb7c:	6821      	ldr	r1, [r4, #0]
    bb7e:	4391      	bics	r1, r2
    bb80:	6021      	str	r1, [r4, #0]
    bb82:	2d00      	cmp	r5, #0
    bb84:	d158      	bne.n	bc38 <_printf_i+0x1d4>
    bb86:	9e04      	ldr	r6, [sp, #16]
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d064      	beq.n	bc56 <_printf_i+0x1f2>
    bb8c:	0026      	movs	r6, r4
    bb8e:	9b03      	ldr	r3, [sp, #12]
    bb90:	3642      	adds	r6, #66	; 0x42
    bb92:	781b      	ldrb	r3, [r3, #0]
    bb94:	7033      	strb	r3, [r6, #0]
    bb96:	e05e      	b.n	bc56 <_printf_i+0x1f2>
    bb98:	0648      	lsls	r0, r1, #25
    bb9a:	d5da      	bpl.n	bb52 <_printf_i+0xee>
    bb9c:	b2ad      	uxth	r5, r5
    bb9e:	e7d8      	b.n	bb52 <_printf_i+0xee>
    bba0:	6809      	ldr	r1, [r1, #0]
    bba2:	681a      	ldr	r2, [r3, #0]
    bba4:	0608      	lsls	r0, r1, #24
    bba6:	d505      	bpl.n	bbb4 <_printf_i+0x150>
    bba8:	1d11      	adds	r1, r2, #4
    bbaa:	6019      	str	r1, [r3, #0]
    bbac:	6813      	ldr	r3, [r2, #0]
    bbae:	6962      	ldr	r2, [r4, #20]
    bbb0:	601a      	str	r2, [r3, #0]
    bbb2:	e006      	b.n	bbc2 <_printf_i+0x15e>
    bbb4:	0649      	lsls	r1, r1, #25
    bbb6:	d5f7      	bpl.n	bba8 <_printf_i+0x144>
    bbb8:	1d11      	adds	r1, r2, #4
    bbba:	6019      	str	r1, [r3, #0]
    bbbc:	6813      	ldr	r3, [r2, #0]
    bbbe:	8aa2      	ldrh	r2, [r4, #20]
    bbc0:	801a      	strh	r2, [r3, #0]
    bbc2:	2300      	movs	r3, #0
    bbc4:	9e04      	ldr	r6, [sp, #16]
    bbc6:	6123      	str	r3, [r4, #16]
    bbc8:	e054      	b.n	bc74 <_printf_i+0x210>
    bbca:	681a      	ldr	r2, [r3, #0]
    bbcc:	1d11      	adds	r1, r2, #4
    bbce:	6019      	str	r1, [r3, #0]
    bbd0:	6816      	ldr	r6, [r2, #0]
    bbd2:	2100      	movs	r1, #0
    bbd4:	6862      	ldr	r2, [r4, #4]
    bbd6:	0030      	movs	r0, r6
    bbd8:	f000 f908 	bl	bdec <memchr>
    bbdc:	2800      	cmp	r0, #0
    bbde:	d001      	beq.n	bbe4 <_printf_i+0x180>
    bbe0:	1b80      	subs	r0, r0, r6
    bbe2:	6060      	str	r0, [r4, #4]
    bbe4:	6863      	ldr	r3, [r4, #4]
    bbe6:	6123      	str	r3, [r4, #16]
    bbe8:	2300      	movs	r3, #0
    bbea:	9a04      	ldr	r2, [sp, #16]
    bbec:	7013      	strb	r3, [r2, #0]
    bbee:	e041      	b.n	bc74 <_printf_i+0x210>
    bbf0:	6923      	ldr	r3, [r4, #16]
    bbf2:	0032      	movs	r2, r6
    bbf4:	9906      	ldr	r1, [sp, #24]
    bbf6:	9805      	ldr	r0, [sp, #20]
    bbf8:	9d07      	ldr	r5, [sp, #28]
    bbfa:	47a8      	blx	r5
    bbfc:	1c43      	adds	r3, r0, #1
    bbfe:	d043      	beq.n	bc88 <_printf_i+0x224>
    bc00:	6823      	ldr	r3, [r4, #0]
    bc02:	2500      	movs	r5, #0
    bc04:	079b      	lsls	r3, r3, #30
    bc06:	d40f      	bmi.n	bc28 <_printf_i+0x1c4>
    bc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc0a:	68e0      	ldr	r0, [r4, #12]
    bc0c:	4298      	cmp	r0, r3
    bc0e:	da3d      	bge.n	bc8c <_printf_i+0x228>
    bc10:	0018      	movs	r0, r3
    bc12:	e03b      	b.n	bc8c <_printf_i+0x228>
    bc14:	0022      	movs	r2, r4
    bc16:	2301      	movs	r3, #1
    bc18:	3219      	adds	r2, #25
    bc1a:	9906      	ldr	r1, [sp, #24]
    bc1c:	9805      	ldr	r0, [sp, #20]
    bc1e:	9e07      	ldr	r6, [sp, #28]
    bc20:	47b0      	blx	r6
    bc22:	1c43      	adds	r3, r0, #1
    bc24:	d030      	beq.n	bc88 <_printf_i+0x224>
    bc26:	3501      	adds	r5, #1
    bc28:	68e3      	ldr	r3, [r4, #12]
    bc2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc2c:	1a9b      	subs	r3, r3, r2
    bc2e:	429d      	cmp	r5, r3
    bc30:	dbf0      	blt.n	bc14 <_printf_i+0x1b0>
    bc32:	e7e9      	b.n	bc08 <_printf_i+0x1a4>
    bc34:	2d00      	cmp	r5, #0
    bc36:	d0a9      	beq.n	bb8c <_printf_i+0x128>
    bc38:	9e04      	ldr	r6, [sp, #16]
    bc3a:	0028      	movs	r0, r5
    bc3c:	0039      	movs	r1, r7
    bc3e:	f7fd fbb7 	bl	93b0 <__aeabi_uidivmod>
    bc42:	9b03      	ldr	r3, [sp, #12]
    bc44:	3e01      	subs	r6, #1
    bc46:	5c5b      	ldrb	r3, [r3, r1]
    bc48:	0028      	movs	r0, r5
    bc4a:	7033      	strb	r3, [r6, #0]
    bc4c:	0039      	movs	r1, r7
    bc4e:	f7fd fb29 	bl	92a4 <__udivsi3>
    bc52:	1e05      	subs	r5, r0, #0
    bc54:	d1f1      	bne.n	bc3a <_printf_i+0x1d6>
    bc56:	2f08      	cmp	r7, #8
    bc58:	d109      	bne.n	bc6e <_printf_i+0x20a>
    bc5a:	6823      	ldr	r3, [r4, #0]
    bc5c:	07db      	lsls	r3, r3, #31
    bc5e:	d506      	bpl.n	bc6e <_printf_i+0x20a>
    bc60:	6863      	ldr	r3, [r4, #4]
    bc62:	6922      	ldr	r2, [r4, #16]
    bc64:	4293      	cmp	r3, r2
    bc66:	dc02      	bgt.n	bc6e <_printf_i+0x20a>
    bc68:	2330      	movs	r3, #48	; 0x30
    bc6a:	3e01      	subs	r6, #1
    bc6c:	7033      	strb	r3, [r6, #0]
    bc6e:	9b04      	ldr	r3, [sp, #16]
    bc70:	1b9b      	subs	r3, r3, r6
    bc72:	6123      	str	r3, [r4, #16]
    bc74:	9b07      	ldr	r3, [sp, #28]
    bc76:	aa09      	add	r2, sp, #36	; 0x24
    bc78:	9300      	str	r3, [sp, #0]
    bc7a:	0021      	movs	r1, r4
    bc7c:	9b06      	ldr	r3, [sp, #24]
    bc7e:	9805      	ldr	r0, [sp, #20]
    bc80:	f7ff fe82 	bl	b988 <_printf_common>
    bc84:	1c43      	adds	r3, r0, #1
    bc86:	d1b3      	bne.n	bbf0 <_printf_i+0x18c>
    bc88:	2001      	movs	r0, #1
    bc8a:	4240      	negs	r0, r0
    bc8c:	b00b      	add	sp, #44	; 0x2c
    bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc90:	0000c856 	.word	0x0000c856
    bc94:	0000c845 	.word	0x0000c845

0000bc98 <__sread>:
    bc98:	b570      	push	{r4, r5, r6, lr}
    bc9a:	000c      	movs	r4, r1
    bc9c:	250e      	movs	r5, #14
    bc9e:	5f49      	ldrsh	r1, [r1, r5]
    bca0:	f000 f8b0 	bl	be04 <_read_r>
    bca4:	2800      	cmp	r0, #0
    bca6:	db03      	blt.n	bcb0 <__sread+0x18>
    bca8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bcaa:	181b      	adds	r3, r3, r0
    bcac:	6563      	str	r3, [r4, #84]	; 0x54
    bcae:	bd70      	pop	{r4, r5, r6, pc}
    bcb0:	89a3      	ldrh	r3, [r4, #12]
    bcb2:	4a02      	ldr	r2, [pc, #8]	; (bcbc <__sread+0x24>)
    bcb4:	4013      	ands	r3, r2
    bcb6:	81a3      	strh	r3, [r4, #12]
    bcb8:	e7f9      	b.n	bcae <__sread+0x16>
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	ffffefff 	.word	0xffffefff

0000bcc0 <__swrite>:
    bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcc2:	001f      	movs	r7, r3
    bcc4:	898b      	ldrh	r3, [r1, #12]
    bcc6:	0005      	movs	r5, r0
    bcc8:	000c      	movs	r4, r1
    bcca:	0016      	movs	r6, r2
    bccc:	05db      	lsls	r3, r3, #23
    bcce:	d505      	bpl.n	bcdc <__swrite+0x1c>
    bcd0:	230e      	movs	r3, #14
    bcd2:	5ec9      	ldrsh	r1, [r1, r3]
    bcd4:	2200      	movs	r2, #0
    bcd6:	2302      	movs	r3, #2
    bcd8:	f000 f874 	bl	bdc4 <_lseek_r>
    bcdc:	89a3      	ldrh	r3, [r4, #12]
    bcde:	4a05      	ldr	r2, [pc, #20]	; (bcf4 <__swrite+0x34>)
    bce0:	0028      	movs	r0, r5
    bce2:	4013      	ands	r3, r2
    bce4:	81a3      	strh	r3, [r4, #12]
    bce6:	0032      	movs	r2, r6
    bce8:	230e      	movs	r3, #14
    bcea:	5ee1      	ldrsh	r1, [r4, r3]
    bcec:	003b      	movs	r3, r7
    bcee:	f000 f81f 	bl	bd30 <_write_r>
    bcf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcf4:	ffffefff 	.word	0xffffefff

0000bcf8 <__sseek>:
    bcf8:	b570      	push	{r4, r5, r6, lr}
    bcfa:	000c      	movs	r4, r1
    bcfc:	250e      	movs	r5, #14
    bcfe:	5f49      	ldrsh	r1, [r1, r5]
    bd00:	f000 f860 	bl	bdc4 <_lseek_r>
    bd04:	89a3      	ldrh	r3, [r4, #12]
    bd06:	1c42      	adds	r2, r0, #1
    bd08:	d103      	bne.n	bd12 <__sseek+0x1a>
    bd0a:	4a05      	ldr	r2, [pc, #20]	; (bd20 <__sseek+0x28>)
    bd0c:	4013      	ands	r3, r2
    bd0e:	81a3      	strh	r3, [r4, #12]
    bd10:	bd70      	pop	{r4, r5, r6, pc}
    bd12:	2280      	movs	r2, #128	; 0x80
    bd14:	0152      	lsls	r2, r2, #5
    bd16:	4313      	orrs	r3, r2
    bd18:	81a3      	strh	r3, [r4, #12]
    bd1a:	6560      	str	r0, [r4, #84]	; 0x54
    bd1c:	e7f8      	b.n	bd10 <__sseek+0x18>
    bd1e:	46c0      	nop			; (mov r8, r8)
    bd20:	ffffefff 	.word	0xffffefff

0000bd24 <__sclose>:
    bd24:	b510      	push	{r4, lr}
    bd26:	230e      	movs	r3, #14
    bd28:	5ec9      	ldrsh	r1, [r1, r3]
    bd2a:	f000 f815 	bl	bd58 <_close_r>
    bd2e:	bd10      	pop	{r4, pc}

0000bd30 <_write_r>:
    bd30:	b570      	push	{r4, r5, r6, lr}
    bd32:	0005      	movs	r5, r0
    bd34:	0008      	movs	r0, r1
    bd36:	0011      	movs	r1, r2
    bd38:	2200      	movs	r2, #0
    bd3a:	4c06      	ldr	r4, [pc, #24]	; (bd54 <_write_r+0x24>)
    bd3c:	6022      	str	r2, [r4, #0]
    bd3e:	001a      	movs	r2, r3
    bd40:	f7f6 fa4e 	bl	21e0 <_write>
    bd44:	1c43      	adds	r3, r0, #1
    bd46:	d103      	bne.n	bd50 <_write_r+0x20>
    bd48:	6823      	ldr	r3, [r4, #0]
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d000      	beq.n	bd50 <_write_r+0x20>
    bd4e:	602b      	str	r3, [r5, #0]
    bd50:	bd70      	pop	{r4, r5, r6, pc}
    bd52:	46c0      	nop			; (mov r8, r8)
    bd54:	20000468 	.word	0x20000468

0000bd58 <_close_r>:
    bd58:	2300      	movs	r3, #0
    bd5a:	b570      	push	{r4, r5, r6, lr}
    bd5c:	4c06      	ldr	r4, [pc, #24]	; (bd78 <_close_r+0x20>)
    bd5e:	0005      	movs	r5, r0
    bd60:	0008      	movs	r0, r1
    bd62:	6023      	str	r3, [r4, #0]
    bd64:	f7fd f84a 	bl	8dfc <_close>
    bd68:	1c43      	adds	r3, r0, #1
    bd6a:	d103      	bne.n	bd74 <_close_r+0x1c>
    bd6c:	6823      	ldr	r3, [r4, #0]
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d000      	beq.n	bd74 <_close_r+0x1c>
    bd72:	602b      	str	r3, [r5, #0]
    bd74:	bd70      	pop	{r4, r5, r6, pc}
    bd76:	46c0      	nop			; (mov r8, r8)
    bd78:	20000468 	.word	0x20000468

0000bd7c <_fstat_r>:
    bd7c:	2300      	movs	r3, #0
    bd7e:	b570      	push	{r4, r5, r6, lr}
    bd80:	4c06      	ldr	r4, [pc, #24]	; (bd9c <_fstat_r+0x20>)
    bd82:	0005      	movs	r5, r0
    bd84:	0008      	movs	r0, r1
    bd86:	0011      	movs	r1, r2
    bd88:	6023      	str	r3, [r4, #0]
    bd8a:	f7fd f841 	bl	8e10 <_fstat>
    bd8e:	1c43      	adds	r3, r0, #1
    bd90:	d103      	bne.n	bd9a <_fstat_r+0x1e>
    bd92:	6823      	ldr	r3, [r4, #0]
    bd94:	2b00      	cmp	r3, #0
    bd96:	d000      	beq.n	bd9a <_fstat_r+0x1e>
    bd98:	602b      	str	r3, [r5, #0]
    bd9a:	bd70      	pop	{r4, r5, r6, pc}
    bd9c:	20000468 	.word	0x20000468

0000bda0 <_isatty_r>:
    bda0:	2300      	movs	r3, #0
    bda2:	b570      	push	{r4, r5, r6, lr}
    bda4:	4c06      	ldr	r4, [pc, #24]	; (bdc0 <_isatty_r+0x20>)
    bda6:	0005      	movs	r5, r0
    bda8:	0008      	movs	r0, r1
    bdaa:	6023      	str	r3, [r4, #0]
    bdac:	f7fd f83e 	bl	8e2c <_isatty>
    bdb0:	1c43      	adds	r3, r0, #1
    bdb2:	d103      	bne.n	bdbc <_isatty_r+0x1c>
    bdb4:	6823      	ldr	r3, [r4, #0]
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d000      	beq.n	bdbc <_isatty_r+0x1c>
    bdba:	602b      	str	r3, [r5, #0]
    bdbc:	bd70      	pop	{r4, r5, r6, pc}
    bdbe:	46c0      	nop			; (mov r8, r8)
    bdc0:	20000468 	.word	0x20000468

0000bdc4 <_lseek_r>:
    bdc4:	b570      	push	{r4, r5, r6, lr}
    bdc6:	0005      	movs	r5, r0
    bdc8:	0008      	movs	r0, r1
    bdca:	0011      	movs	r1, r2
    bdcc:	2200      	movs	r2, #0
    bdce:	4c06      	ldr	r4, [pc, #24]	; (bde8 <_lseek_r+0x24>)
    bdd0:	6022      	str	r2, [r4, #0]
    bdd2:	001a      	movs	r2, r3
    bdd4:	f7fd f833 	bl	8e3e <_lseek>
    bdd8:	1c43      	adds	r3, r0, #1
    bdda:	d103      	bne.n	bde4 <_lseek_r+0x20>
    bddc:	6823      	ldr	r3, [r4, #0]
    bdde:	2b00      	cmp	r3, #0
    bde0:	d000      	beq.n	bde4 <_lseek_r+0x20>
    bde2:	602b      	str	r3, [r5, #0]
    bde4:	bd70      	pop	{r4, r5, r6, pc}
    bde6:	46c0      	nop			; (mov r8, r8)
    bde8:	20000468 	.word	0x20000468

0000bdec <memchr>:
    bdec:	b2c9      	uxtb	r1, r1
    bdee:	1882      	adds	r2, r0, r2
    bdf0:	4290      	cmp	r0, r2
    bdf2:	d101      	bne.n	bdf8 <memchr+0xc>
    bdf4:	2000      	movs	r0, #0
    bdf6:	4770      	bx	lr
    bdf8:	7803      	ldrb	r3, [r0, #0]
    bdfa:	428b      	cmp	r3, r1
    bdfc:	d0fb      	beq.n	bdf6 <memchr+0xa>
    bdfe:	3001      	adds	r0, #1
    be00:	e7f6      	b.n	bdf0 <memchr+0x4>
	...

0000be04 <_read_r>:
    be04:	b570      	push	{r4, r5, r6, lr}
    be06:	0005      	movs	r5, r0
    be08:	0008      	movs	r0, r1
    be0a:	0011      	movs	r1, r2
    be0c:	2200      	movs	r2, #0
    be0e:	4c06      	ldr	r4, [pc, #24]	; (be28 <_read_r+0x24>)
    be10:	6022      	str	r2, [r4, #0]
    be12:	001a      	movs	r2, r3
    be14:	f7f6 f9ba 	bl	218c <_read>
    be18:	1c43      	adds	r3, r0, #1
    be1a:	d103      	bne.n	be24 <_read_r+0x20>
    be1c:	6823      	ldr	r3, [r4, #0]
    be1e:	2b00      	cmp	r3, #0
    be20:	d000      	beq.n	be24 <_read_r+0x20>
    be22:	602b      	str	r3, [r5, #0]
    be24:	bd70      	pop	{r4, r5, r6, pc}
    be26:	46c0      	nop			; (mov r8, r8)
    be28:	20000468 	.word	0x20000468
    be2c:	0000014c 	.word	0x0000014c
    be30:	0000015a 	.word	0x0000015a
    be34:	00000168 	.word	0x00000168
    be38:	00000176 	.word	0x00000176
    be3c:	00000184 	.word	0x00000184

0000be40 <g_csr_template_3_device>:
    be40:	30fb8130 0102a281 312f3000 06123014     0..0.....0/1.0..
    be50:	0a045503 78450b0c 6c706d61 6e492065     .U....Example In
    be60:	30173163 55030615 0e0c0304 6d617845     c1.0...U....Exam
    be70:	20656c70 69766544 59306563 07061330     ple Device0Y0...
    be80:	ce48862a 0601023d 48862a08 01033dce     *.H.=....*.H.=..
    be90:	00420307 a470d804 6ab498df 40f72b93     ..B...p....j.+.@
    bea0:	ed0f8639 6a0369d6 9f84e4e7 5061fbfc     9....i.j......aP
    beb0:	a8952163 04982c91 032f9c0e c72ee4e1     c!...,..../.....
    bec0:	f46b8c93 504c98fb eea351db f0551b04     ..k...LP.Q....U.
    bed0:	46eb6360 3011a090 2a09060f f7864886     `c.F...0...*.H..
    bee0:	0e09010d 00300231 08060a30 ce48862a     ....1.0.0...*.H.
    bef0:	0203043d 30004803 26200245 714f8aab     =....H.0E. &..Oq
    bf00:	4fbbf92c 01cda4fa 9cdff148 ffa0ffdc     ,..O....H.......
    bf10:	8d358f53 c0493dd4 020af572 9da50021     S.5..=I.r...!...
    bf20:	a14b11b4 48bb7c65 d0f66dcf 9600416a     ..K.e|.H.m..jA..
    bf30:	7379e2e1 8097f7db 01359b41 00005e88     ..ys....A.5..^..

0000bf40 <g_csr_def_3_device>:
    bf40:	00000300 0000070a 00000000 00030101     ................
    bf50:	070000a5 00000100 00070040 00000000     ........@.......
    bf60:	40005500 4a00b400 00000000 00000000     .U.@...J........
	...
    bf84:	be400000 00fe0000 20656854 20535741     ..@.....The AWS 
    bf94:	20546f49 6f72655a 756f5420 44206863     IoT Zero Touch D
    bfa4:	206f6d65 43455441 38307843 72702041     emo ATECCx08A pr
    bfb4:	6f632d65 6769666e 73616820 746f6e20     e-config has not
    bfc4:	6d6f6320 74656c70 0d2e6465 00000000      completed......
    bfd4:	61206f4e 63617474 20646568 70797243     No attached Cryp
    bfe4:	75416f74 62206874 6472616f 74656420     toAuth board det
    bff4:	65746365 000d2e64 61656c50 63206573     ected...Please c
    c004:	6b636568 756f7920 61682072 61776472     heck your hardwa
    c014:	63206572 69666e6f 61727567 6e6f6974     re configuration
    c024:	00000d2e 706f7453 676e6970 65687420     ....Stopping the
    c034:	53574120 546f4920 6d656420 000d2e6f      AWS IoT demo...
    c044:	6f636e55 6769666e 64657275 79724320     Unconfigured Cry
    c054:	416f7470 20687475 72616f62 6f632064     ptoAuth board co
    c064:	63656e6e 20646574 6c696877 49572065     nnected while WI
    c074:	3531434e 63203030 656e6e6f 64657463     NC1500 connected
    c084:	00000d2e 61656c50 64206573 6f637369     ....Please disco
    c094:	63656e6e 49572074 3531434e 61203030     nnect WINC1500 a
    c0a4:	7220646e 61747365 74207472 64206568     nd restart the d
    c0b4:	2e6f6d65 0000000d 6e6b6e55 206e776f     emo.....Unknown 
    c0c4:	6f727265 72742072 676e6979 206f7420     error trying to 
    c0d4:	6d6d6f63 63696e75 20657461 68746977     communicate with
    c0e4:	79724320 416f7470 20687475 72616f62      CryptoAuth boar
    c0f4:	000d2e64 666e6f43 72756769 20676e69     d...Configuring 
    c104:	70797243 75416f74 42206874 6472616f     CryptoAuth Board
    c114:	776f6e20 0d2e2e2e 00000000 6e6e6143      now........Cann
    c124:	6320746f 69666e6f 65727567 6e6f4320     ot configure Con
    c134:	20676966 656e6f5a 43202d20 69666e6f     fig Zone - Confi
    c144:	6f5a2067 6120656e 6165726c 6c207964     g Zone already l
    c154:	656b636f 000d2e64 6c756f43 6f6e2064     ocked...Could no
    c164:	65672074 6172656e 6b206574 6f207965     t generate key o
    c174:	6c73206e 0d2e746f 00000000 07030200     n slot..........
    c184:	6675625b 6f6f7420 616d7320 005d6c6c     [buf too small].
    c194:	61637461 65725f62 735f6461 61697265     atcab_read_seria
    c1a4:	756e5f6c 7265626d 66202928 656c6961     l_number() faile
    c1b4:	69772064 72206874 303d7465 38302578     d with ret=0x%08
    c1c4:	000a0d58 61637461 6e695f62 29286f66     X...atcab_info()
    c1d4:	69616620 2064656c 68746977 74657220      failed with ret
    c1e4:	2578303d 0d583830 0000000a 70797243     =0x%08X.....Cryp
    c1f4:	44206f74 63697665 000d3a65 4e532020     to Device:..  SN
    c204:	2020203a 20202020 25202020 000a0d73     :          %s...
    c214:	65442020 76655276 2020203a 25202020       DevRev:      %
    c224:	000a0d73 666e6f63 255b6769 253d5d64     s...config[%d]=%
    c234:	000a0d78 20656854 70797243 75416f74     x...The CryptoAu
    c244:	694c6874 696c2062 72617262 61662079     thLib library fa
    c254:	64656c69 206f7420 74696e69 696c6169     iled to initiali
    c264:	002e657a 20656854 43455441 38303543     ze..The ATECC508
    c274:	65642041 65636976 20736920 20746f6e     A device is not 
    c284:	666e6f63 72756769 63206465 6572726f     configured corre
    c294:	796c7463 0000002e 20656854 43455441     ctly....The ATEC
    c2a4:	38303543 65642041 65636976 74616420     C508A device dat
    c2b4:	6f7a2061 6920656e 6f6e2073 6e6f6320     a zone is no con
    c2c4:	75676966 2e646572 00000d20 75700a0d     figured. .....pu
    c2d4:	63696c62 79656b5f 6542203a 0d6e6967     blic_key: Begin.
    c2e4:	00000000 00007825 75700a0d 63696c62     ....%x....public
    c2f4:	79656b5f 6e65203a 00000d64 6c696166     _key: end...fail
    c304:	74206465 6567206f 43452074 75702043     ed to get ECC pu
    c314:	654b2062 00000d79 6c696166 74206465     b Key...failed t
    c324:	6567206f 6172656e 6b206574 70207965     o generate key p
    c334:	0d726961 00000000 73630a0d 42203a72     air.......csr: B
    c344:	6e696765 656c202c 6874676e 25203d20     egin, length = %
    c354:	000a0d64 78323025 00000000 73630a0d     d...%02x......cs
    c364:	65203a72 000d646e 6c696166 74206465     r: end..failed t
    c374:	6567206f 6172656e 64206574 63697665     o generate devic
    c384:	53432065 00000d52 00000fc0 00000fce     e CSR...........
    c394:	00000fdc 00000fea 00000ff8 40030004     ...............@

0000c3a4 <k.4571>:
    c3a4:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    c3b4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    c3c4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    c3d4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    c3e4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    c3f4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    c404:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    c414:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    c424:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    c434:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    c444:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    c454:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    c464:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    c474:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    c484:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    c494:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

0000c4a4 <hash_init.4603>:
    c4a4:	6a09e667 bb67ae85 3c6ef372 a54ff53a     g..j..g.r.n<:.O.
    c4b4:	510e527f 9b05688c 1f83d9ab 5be0cd19     .R.Q.h.........[
    c4c4:	00005cbc 00005d00 00005d00 00005d00     .\...]...]...]..
    c4d4:	00005d00 00005d00 00005d5c 00005d72     .]...]..\]..r]..
    c4e4:	00005d72 00005d72 00005d72 00005d72     r]..r]..r]..r]..
    c4f4:	6b636170 73207465 20646e65 6f727265     packet send erro
    c504:	00000d72 6d6d6f63 20646e61 70736572     r...command resp
    c514:	65736e6f 72726520 000d726f 01100080     onse error......
    c524:	08000200 09000200 00050400 43331104     ..............3C
    c534:	00006038 00006050 00006066 0000607c     8`..P`..f`..|`..
    c544:	00006092 000060a8 00006318 00006330     .`...`...c..0c..
    c554:	00006346 0000635c 00006372 00006388     Fc..\c..rc...c..

0000c564 <_tcc_intflag>:
    c564:	00000001 00000002 00000004 00000008     ................
    c574:	00001000 00002000 00004000 00008000     ..... ...@......
    c584:	00010000 00020000 00040000 00080000     ................
    c594:	000067f0 000067fe 0000680c 0000681a     .g...g...h...h..
    c5a4:	00006828 42000000 42000400 42000800     (h.....B...B...B
    c5b4:	42000c00 42001000 43000400 0b0a0908     ...B...B...C....
    c5c4:	00000d0c 00007ee2 00007f5e 00007f5e     .....~..^...^...
    c5d4:	00007f02 00007efc 00007f08 00007ee8     .....~.......~..
    c5e4:	00007f0e 00007f44 00008218 00008276     ....D.......v...
    c5f4:	00008276 00008272 0000820a 0000822a     v...r.......*...
    c604:	000081f6 00008238 0000824a 000082d6     ....8...J.......
    c614:	00008326 00008326 00008326 000082c8     &...&...&.......
    c624:	000082e8 000082b6 000082f6 00008310     ................
    c634:	00008396 000083fc 000083fc 000083f8     ................
    c644:	0000837e 000083ae 00008366 000083c6     ~.......f.......
    c654:	000083e0 000086f4 00008702 00008710     ................
    c664:	0000871e 0000872c 766f7250 6f697369     ....,...Provisio
    c674:	4345206e 38303643 79726320 206f7470     n ECC608 crypto 
    c684:	69766564 000d6563 5f757063 71657266     device..cpu_freq
    c694:	0d64253d 0000000a 20656854 43455441     =%d.....The ATEC
    c6a4:	38303543 65642041 65636976 20736920     C508A device is 
    c6b4:	666e6f63 72756769 61206465 6c20646e     configured and l
    c6c4:	656b636f 000d2e64 6c696146 74206465     ocked...Failed t
    c6d4:	6567206f 68742074 43452065 75702043     o get the ECC pu
    c6e4:	654b2062 000d2e79 6c696146 74206465     b Key...Failed t
    c6f4:	6567206f 68742074 43452065 53432043     o get the ECC CS
    c704:	000d2e52 625f6d6e 695f7073 2e74696e     R...nm_bsp_init.
    c714:	0000000d 434e4957 20736920 64206e69     ....WINC is in d
    c724:	6c6e776f 2064616f 65646f6d 6f6e202c     ownload mode, no
    c734:	6f672077 646e6120 6e757220 65687420     w go and run the
    c744:	72637320 2e747069 0000000d 00009c28      script.....(...
    c754:	00009c0a 00009bc4 00009ae2 00009bc4     ................
    c764:	00009bfc 00009bc4 00009ae2 00009c0a     ................
    c774:	00009c0a 00009bfc 00009ae2 00009ada     ................
    c784:	00009ada 00009ada 00009e40 0000a288     ........@.......
    c794:	0000a148 0000a148 0000a144 0000a260     H...H...D...`...
    c7a4:	0000a260 0000a252 0000a144 0000a260     `...R...D...`...
    c7b4:	0000a252 0000a260 0000a144 0000a268     R...`...D...h...
    c7c4:	0000a268 0000a268 0000a46c              h...h...l...

0000c7d0 <_global_impure_ptr>:
    c7d0:	20000128                                (.. 

0000c7d4 <__sf_fake_stderr>:
	...

0000c7f4 <__sf_fake_stdin>:
	...

0000c814 <__sf_fake_stdout>:
	...
    c834:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c844:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c854:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c864:	00006665                                ef..

0000c868 <_init>:
    c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c86e:	bc08      	pop	{r3}
    c870:	469e      	mov	lr, r3
    c872:	4770      	bx	lr

0000c874 <__init_array_start>:
    c874:	000000dd 	.word	0x000000dd

0000c878 <_fini>:
    c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c87a:	46c0      	nop			; (mov r8, r8)
    c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c87e:	bc08      	pop	{r3}
    c880:	469e      	mov	lr, r3
    c882:	4770      	bx	lr

0000c884 <__fini_array_start>:
    c884:	000000b5 	.word	0x000000b5
