
APPS_WSN_DEMO9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001d630  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000598  20000000  0001d630  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00030598  2**0
                  CONTENTS
  3 .bss          000012c0  20000598  0001dbc8  00030598  2**2
                  ALLOC
  4 .stack        00002000  20001858  0001ee88  00030598  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000305c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0009ed4a  00000000  00000000  00030619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000cbbe  00000000  00000000  000cf363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000de89  00000000  00000000  000dbf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026b8  00000000  00000000  000e9daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002348  00000000  00000000  000ec462  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000308d6  00000000  00000000  000ee7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003510d  00000000  00000000  0011f080  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000af54c  00000000  00000000  0015418d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009374  00000000  00000000  002036dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 38 00 20 79 5c 01 00 0d 5d 01 00 0d 5d 01 00     X8. y\...]...]..
	...
      2c:	0d 5d 01 00 00 00 00 00 00 00 00 00 0d 5d 01 00     .]...........]..
      3c:	0d 5d 01 00 0d 5d 01 00 bd 61 00 00 e5 59 00 00     .]...]...a...Y..
      4c:	4d 12 01 00 0d 5d 01 00 0d 5d 01 00 0d 5d 01 00     M....]...]...]..
      5c:	0d 5d 01 00 a1 2b 01 00 b9 2b 01 00 d1 2b 01 00     .]...+...+...+..
      6c:	e9 2b 01 00 01 2c 01 00 19 2c 01 00 0d 5d 01 00     .+...,...,...]..
      7c:	0d 5d 01 00 0d 5d 01 00 19 54 01 00 2d 54 01 00     .]...]...T..-T..
	...
      94:	41 54 01 00 0d 5d 01 00 0d 5d 01 00 00 00 00 00     AT...]...]......
      a4:	0d 5d 01 00 00 00 00 00 00 00 00 00 00 00 00 00     .]..............

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000598 	.word	0x20000598
      d4:	00000000 	.word	0x00000000
      d8:	0001d630 	.word	0x0001d630

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000059c 	.word	0x2000059c
     108:	0001d630 	.word	0x0001d630
     10c:	0001d630 	.word	0x0001d630
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	40002800 	.word	0x40002800

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     210:	b580      	push	{r7, lr}
     212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <system_interrupt_enable_global+0x18>)
     216:	2201      	movs	r2, #1
     218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     21a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
}
     220:	46c0      	nop			; (mov r8, r8)
     222:	46bd      	mov	sp, r7
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	200004b0 	.word	0x200004b0

0000022c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     22c:	b580      	push	{r7, lr}
     22e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     230:	4b04      	ldr	r3, [pc, #16]	; (244 <chip_isr+0x18>)
     232:	681b      	ldr	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <chip_isr+0x12>
		gpfIsr();
     238:	4b02      	ldr	r3, [pc, #8]	; (244 <chip_isr+0x18>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4798      	blx	r3
	}
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	bd80      	pop	{r7, pc}
     244:	200005b4 	.word	0x200005b4

00000248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0018      	movs	r0, r3
     252:	4b0c      	ldr	r3, [pc, #48]	; (284 <init_chip_pins+0x3c>)
     254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     256:	1d3b      	adds	r3, r7, #4
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     25c:	1d3b      	adds	r3, r7, #4
     25e:	0019      	movs	r1, r3
     260:	200d      	movs	r0, #13
     262:	4b09      	ldr	r3, [pc, #36]	; (288 <init_chip_pins+0x40>)
     264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	2017      	movs	r0, #23
     26c:	4b06      	ldr	r3, [pc, #24]	; (288 <init_chip_pins+0x40>)
     26e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     270:	1d3b      	adds	r3, r7, #4
     272:	0019      	movs	r1, r3
     274:	201c      	movs	r0, #28
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <init_chip_pins+0x40>)
     278:	4798      	blx	r3
	

}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00000199 	.word	0x00000199
     288:	00011791 	.word	0x00011791

0000028c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     28c:	b580      	push	{r7, lr}
     28e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     290:	4b0c      	ldr	r3, [pc, #48]	; (2c4 <nm_bsp_init+0x38>)
     292:	2200      	movs	r2, #0
     294:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     296:	4b0c      	ldr	r3, [pc, #48]	; (2c8 <nm_bsp_init+0x3c>)
     298:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     29a:	4b0c      	ldr	r3, [pc, #48]	; (2cc <nm_bsp_init+0x40>)
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	2201      	movs	r2, #1
     2a0:	4013      	ands	r3, r2
     2a2:	d004      	beq.n	2ae <nm_bsp_init+0x22>
     2a4:	4b09      	ldr	r3, [pc, #36]	; (2cc <nm_bsp_init+0x40>)
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	4013      	ands	r3, r2
     2ac:	d101      	bne.n	2b2 <nm_bsp_init+0x26>
	    delay_init();
     2ae:	4b08      	ldr	r3, [pc, #32]	; (2d0 <nm_bsp_init+0x44>)
     2b0:	4798      	blx	r3
    } // Changes

	/* Perform chip reset. */
	nm_bsp_reset();
     2b2:	4b08      	ldr	r3, [pc, #32]	; (2d4 <nm_bsp_init+0x48>)
     2b4:	4798      	blx	r3

	system_interrupt_enable_global();
     2b6:	4b08      	ldr	r3, [pc, #32]	; (2d8 <nm_bsp_init+0x4c>)
     2b8:	4798      	blx	r3

	return M2M_SUCCESS;
     2ba:	2300      	movs	r3, #0
}
     2bc:	0018      	movs	r0, r3
     2be:	46bd      	mov	sp, r7
     2c0:	bd80      	pop	{r7, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	200005b4 	.word	0x200005b4
     2c8:	00000249 	.word	0x00000249
     2cc:	e000e010 	.word	0xe000e010
     2d0:	00010d05 	.word	0x00010d05
     2d4:	000002dd 	.word	0x000002dd
     2d8:	00000211 	.word	0x00000211

000002dc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     2dc:	b580      	push	{r7, lr}
     2de:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     2e0:	2100      	movs	r1, #0
     2e2:	2017      	movs	r0, #23
     2e4:	4b0c      	ldr	r3, [pc, #48]	; (318 <nm_bsp_reset+0x3c>)
     2e6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     2e8:	2100      	movs	r1, #0
     2ea:	200d      	movs	r0, #13
     2ec:	4b0a      	ldr	r3, [pc, #40]	; (318 <nm_bsp_reset+0x3c>)
     2ee:	4798      	blx	r3
	nm_bsp_sleep(100);
     2f0:	2064      	movs	r0, #100	; 0x64
     2f2:	4b0a      	ldr	r3, [pc, #40]	; (31c <nm_bsp_reset+0x40>)
     2f4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     2f6:	2101      	movs	r1, #1
     2f8:	2017      	movs	r0, #23
     2fa:	4b07      	ldr	r3, [pc, #28]	; (318 <nm_bsp_reset+0x3c>)
     2fc:	4798      	blx	r3
	nm_bsp_sleep(10);
     2fe:	200a      	movs	r0, #10
     300:	4b06      	ldr	r3, [pc, #24]	; (31c <nm_bsp_reset+0x40>)
     302:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     304:	2101      	movs	r1, #1
     306:	200d      	movs	r0, #13
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <nm_bsp_reset+0x3c>)
     30a:	4798      	blx	r3
	nm_bsp_sleep(10);
     30c:	200a      	movs	r0, #10
     30e:	4b03      	ldr	r3, [pc, #12]	; (31c <nm_bsp_reset+0x40>)
     310:	4798      	blx	r3
}
     312:	46c0      	nop			; (mov r8, r8)
     314:	46bd      	mov	sp, r7
     316:	bd80      	pop	{r7, pc}
     318:	000001bd 	.word	0x000001bd
     31c:	00000321 	.word	0x00000321

00000320 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     328:	e002      	b.n	330 <nm_bsp_sleep+0x10>
		delay_ms(1);
     32a:	2001      	movs	r0, #1
     32c:	4b05      	ldr	r3, [pc, #20]	; (344 <nm_bsp_sleep+0x24>)
     32e:	4798      	blx	r3
	while (u32TimeMsec--) {
     330:	687b      	ldr	r3, [r7, #4]
     332:	1e5a      	subs	r2, r3, #1
     334:	607a      	str	r2, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d1f7      	bne.n	32a <nm_bsp_sleep+0xa>
	}
}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	46bd      	mov	sp, r7
     33e:	b002      	add	sp, #8
     340:	bd80      	pop	{r7, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	00010d8d 	.word	0x00010d8d

00000348 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     348:	b580      	push	{r7, lr}
     34a:	b086      	sub	sp, #24
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     350:	4b19      	ldr	r3, [pc, #100]	; (3b8 <nm_bsp_register_isr+0x70>)
     352:	687a      	ldr	r2, [r7, #4]
     354:	601a      	str	r2, [r3, #0]
	
	extint_chan_get_config_defaults(&config_extint_chan);
     356:	230c      	movs	r3, #12
     358:	18fb      	adds	r3, r7, r3
     35a:	0018      	movs	r0, r3
     35c:	4b17      	ldr	r3, [pc, #92]	; (3bc <nm_bsp_register_isr+0x74>)
     35e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	2216      	movs	r2, #22
     366:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     368:	230c      	movs	r3, #12
     36a:	18fb      	adds	r3, r7, r3
     36c:	2200      	movs	r2, #0
     36e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     370:	230c      	movs	r3, #12
     372:	18fb      	adds	r3, r7, r3
     374:	2201      	movs	r2, #1
     376:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	config_extint_chan.enable_async_edge_detection = false;
     378:	230c      	movs	r3, #12
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	725a      	strb	r2, [r3, #9]
	#else
	config_extint_chan.wake_if_sleeping    = true;
	#endif
	config_extint_chan.filter_input_signal = false;
     380:	230c      	movs	r3, #12
     382:	18fb      	adds	r3, r7, r3
     384:	2200      	movs	r2, #0
     386:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     388:	230c      	movs	r3, #12
     38a:	18fb      	adds	r3, r7, r3
     38c:	2202      	movs	r2, #2
     38e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     390:	230c      	movs	r3, #12
     392:	18fb      	adds	r3, r7, r3
     394:	0019      	movs	r1, r3
     396:	2006      	movs	r0, #6
     398:	4b09      	ldr	r3, [pc, #36]	; (3c0 <nm_bsp_register_isr+0x78>)
     39a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <nm_bsp_register_isr+0x7c>)
     39e:	2200      	movs	r2, #0
     3a0:	2106      	movs	r1, #6
     3a2:	0018      	movs	r0, r3
     3a4:	4b08      	ldr	r3, [pc, #32]	; (3c8 <nm_bsp_register_isr+0x80>)
     3a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3a8:	2100      	movs	r1, #0
     3aa:	2006      	movs	r0, #6
     3ac:	4b07      	ldr	r3, [pc, #28]	; (3cc <nm_bsp_register_isr+0x84>)
     3ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3b0:	46c0      	nop			; (mov r8, r8)
     3b2:	46bd      	mov	sp, r7
     3b4:	b006      	add	sp, #24
     3b6:	bd80      	pop	{r7, pc}
     3b8:	200005b4 	.word	0x200005b4
     3bc:	00011621 	.word	0x00011621
     3c0:	00011655 	.word	0x00011655
     3c4:	0000022d 	.word	0x0000022d
     3c8:	00011159 	.word	0x00011159
     3cc:	000111bd 	.word	0x000111bd

000003d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	0002      	movs	r2, r0
     3d8:	1dfb      	adds	r3, r7, #7
     3da:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d004      	beq.n	3ee <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3e4:	2100      	movs	r1, #0
     3e6:	2006      	movs	r0, #6
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <nm_bsp_interrupt_ctrl+0x30>)
     3ea:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     3ec:	e003      	b.n	3f6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     3ee:	2100      	movs	r1, #0
     3f0:	2006      	movs	r0, #6
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <nm_bsp_interrupt_ctrl+0x34>)
     3f4:	4798      	blx	r3
}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	000111bd 	.word	0x000111bd
     404:	00011205 	.word	0x00011205

00000408 <system_pinmux_get_group_from_gpio_pin>:
{
     408:	b580      	push	{r7, lr}
     40a:	b084      	sub	sp, #16
     40c:	af00      	add	r7, sp, #0
     40e:	0002      	movs	r2, r0
     410:	1dfb      	adds	r3, r7, #7
     412:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	1dfa      	adds	r2, r7, #7
     41a:	7812      	ldrb	r2, [r2, #0]
     41c:	09d2      	lsrs	r2, r2, #7
     41e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     420:	230e      	movs	r3, #14
     422:	18fb      	adds	r3, r7, r3
     424:	1dfa      	adds	r2, r7, #7
     426:	7812      	ldrb	r2, [r2, #0]
     428:	0952      	lsrs	r2, r2, #5
     42a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     42c:	4b0d      	ldr	r3, [pc, #52]	; (464 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     42e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     430:	230f      	movs	r3, #15
     432:	18fb      	adds	r3, r7, r3
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d10f      	bne.n	45a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     43a:	230f      	movs	r3, #15
     43c:	18fb      	adds	r3, r7, r3
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	009b      	lsls	r3, r3, #2
     442:	2210      	movs	r2, #16
     444:	4694      	mov	ip, r2
     446:	44bc      	add	ip, r7
     448:	4463      	add	r3, ip
     44a:	3b08      	subs	r3, #8
     44c:	681a      	ldr	r2, [r3, #0]
     44e:	230e      	movs	r3, #14
     450:	18fb      	adds	r3, r7, r3
     452:	781b      	ldrb	r3, [r3, #0]
     454:	01db      	lsls	r3, r3, #7
     456:	18d3      	adds	r3, r2, r3
     458:	e000      	b.n	45c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     45a:	2300      	movs	r3, #0
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}
     464:	40002800 	.word	0x40002800

00000468 <port_get_group_from_gpio_pin>:
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	0002      	movs	r2, r0
     470:	1dfb      	adds	r3, r7, #7
     472:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     474:	1dfb      	adds	r3, r7, #7
     476:	781b      	ldrb	r3, [r3, #0]
     478:	0018      	movs	r0, r3
     47a:	4b03      	ldr	r3, [pc, #12]	; (488 <port_get_group_from_gpio_pin+0x20>)
     47c:	4798      	blx	r3
     47e:	0003      	movs	r3, r0
}
     480:	0018      	movs	r0, r3
     482:	46bd      	mov	sp, r7
     484:	b002      	add	sp, #8
     486:	bd80      	pop	{r7, pc}
     488:	00000409 	.word	0x00000409

0000048c <port_get_config_defaults>:
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     494:	687b      	ldr	r3, [r7, #4]
     496:	2200      	movs	r2, #0
     498:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2201      	movs	r2, #1
     49e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	2200      	movs	r2, #0
     4a4:	709a      	strb	r2, [r3, #2]
}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	46bd      	mov	sp, r7
     4aa:	b002      	add	sp, #8
     4ac:	bd80      	pop	{r7, pc}
	...

000004b0 <port_pin_set_output_level>:
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	0002      	movs	r2, r0
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	701a      	strb	r2, [r3, #0]
     4bc:	1dbb      	adds	r3, r7, #6
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     4c2:	1dfb      	adds	r3, r7, #7
     4c4:	781b      	ldrb	r3, [r3, #0]
     4c6:	0018      	movs	r0, r3
     4c8:	4b0d      	ldr	r3, [pc, #52]	; (500 <port_pin_set_output_level+0x50>)
     4ca:	4798      	blx	r3
     4cc:	0003      	movs	r3, r0
     4ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	221f      	movs	r2, #31
     4d6:	4013      	ands	r3, r2
     4d8:	2201      	movs	r2, #1
     4da:	409a      	lsls	r2, r3
     4dc:	0013      	movs	r3, r2
     4de:	60bb      	str	r3, [r7, #8]
	if (level) {
     4e0:	1dbb      	adds	r3, r7, #6
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d003      	beq.n	4f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     4e8:	68fb      	ldr	r3, [r7, #12]
     4ea:	68ba      	ldr	r2, [r7, #8]
     4ec:	619a      	str	r2, [r3, #24]
}
     4ee:	e002      	b.n	4f6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     4f0:	68fb      	ldr	r3, [r7, #12]
     4f2:	68ba      	ldr	r2, [r7, #8]
     4f4:	615a      	str	r2, [r3, #20]
}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	46bd      	mov	sp, r7
     4fa:	b004      	add	sp, #16
     4fc:	bd80      	pop	{r7, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00000469 	.word	0x00000469

00000504 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     504:	b580      	push	{r7, lr}
     506:	b084      	sub	sp, #16
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	681b      	ldr	r3, [r3, #0]
     510:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     512:	68fb      	ldr	r3, [r7, #12]
     514:	69db      	ldr	r3, [r3, #28]
     516:	1e5a      	subs	r2, r3, #1
     518:	4193      	sbcs	r3, r2
     51a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     51c:	0018      	movs	r0, r3
     51e:	46bd      	mov	sp, r7
     520:	b004      	add	sp, #16
     522:	bd80      	pop	{r7, pc}

00000524 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     524:	b580      	push	{r7, lr}
     526:	b082      	sub	sp, #8
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	2201      	movs	r2, #1
     530:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     532:	687b      	ldr	r3, [r7, #4]
     534:	2200      	movs	r2, #0
     536:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     538:	687b      	ldr	r3, [r7, #4]
     53a:	2200      	movs	r2, #0
     53c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	22c0      	movs	r2, #192	; 0xc0
     542:	0392      	lsls	r2, r2, #14
     544:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     546:	687b      	ldr	r3, [r7, #4]
     548:	2200      	movs	r2, #0
     54a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	2200      	movs	r2, #0
     550:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     552:	687b      	ldr	r3, [r7, #4]
     554:	2201      	movs	r2, #1
     556:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     558:	687b      	ldr	r3, [r7, #4]
     55a:	2201      	movs	r2, #1
     55c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     55e:	687b      	ldr	r3, [r7, #4]
     560:	2200      	movs	r2, #0
     562:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     564:	687b      	ldr	r3, [r7, #4]
     566:	2224      	movs	r2, #36	; 0x24
     568:	2100      	movs	r1, #0
     56a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	3318      	adds	r3, #24
     570:	220c      	movs	r2, #12
     572:	2100      	movs	r1, #0
     574:	0018      	movs	r0, r3
     576:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <spi_get_config_defaults+0x7c>)
     578:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	4a09      	ldr	r2, [pc, #36]	; (5a4 <spi_get_config_defaults+0x80>)
     57e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     580:	687b      	ldr	r3, [r7, #4]
     582:	2200      	movs	r2, #0
     584:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     586:	687b      	ldr	r3, [r7, #4]
     588:	2200      	movs	r2, #0
     58a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	2200      	movs	r2, #0
     590:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     592:	687b      	ldr	r3, [r7, #4]
     594:	2200      	movs	r2, #0
     596:	635a      	str	r2, [r3, #52]	; 0x34

};
     598:	46c0      	nop			; (mov r8, r8)
     59a:	46bd      	mov	sp, r7
     59c:	b002      	add	sp, #8
     59e:	bd80      	pop	{r7, pc}
     5a0:	00019ea1 	.word	0x00019ea1
     5a4:	000186a0 	.word	0x000186a0

000005a8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	220a      	movs	r2, #10
     5b4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	2200      	movs	r2, #0
     5ba:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	2200      	movs	r2, #0
     5c0:	709a      	strb	r2, [r3, #2]
}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	46bd      	mov	sp, r7
     5c6:	b002      	add	sp, #8
     5c8:	bd80      	pop	{r7, pc}
	...

000005cc <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     5cc:	b580      	push	{r7, lr}
     5ce:	b084      	sub	sp, #16
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
     5d4:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	781a      	ldrb	r2, [r3, #0]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	785a      	ldrb	r2, [r3, #1]
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     5e6:	683b      	ldr	r3, [r7, #0]
     5e8:	789a      	ldrb	r2, [r3, #2]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     5ee:	230c      	movs	r3, #12
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	0018      	movs	r0, r3
     5f4:	4b0b      	ldr	r3, [pc, #44]	; (624 <spi_attach_slave+0x58>)
     5f6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     5f8:	230c      	movs	r3, #12
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	2201      	movs	r2, #1
     5fe:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     600:	687b      	ldr	r3, [r7, #4]
     602:	781b      	ldrb	r3, [r3, #0]
     604:	220c      	movs	r2, #12
     606:	18ba      	adds	r2, r7, r2
     608:	0011      	movs	r1, r2
     60a:	0018      	movs	r0, r3
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <spi_attach_slave+0x5c>)
     60e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     610:	687b      	ldr	r3, [r7, #4]
     612:	781b      	ldrb	r3, [r3, #0]
     614:	2101      	movs	r1, #1
     616:	0018      	movs	r0, r3
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <spi_attach_slave+0x60>)
     61a:	4798      	blx	r3
}
     61c:	46c0      	nop			; (mov r8, r8)
     61e:	46bd      	mov	sp, r7
     620:	b004      	add	sp, #16
     622:	bd80      	pop	{r7, pc}
     624:	0000048d 	.word	0x0000048d
     628:	00011791 	.word	0x00011791
     62c:	000004b1 	.word	0x000004b1

00000630 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     638:	687b      	ldr	r3, [r7, #4]
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     63e:	46c0      	nop			; (mov r8, r8)
     640:	687b      	ldr	r3, [r7, #4]
     642:	0018      	movs	r0, r3
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <spi_enable+0x30>)
     646:	4798      	blx	r3
     648:	1e03      	subs	r3, r0, #0
     64a:	d1f9      	bne.n	640 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     64c:	68fb      	ldr	r3, [r7, #12]
     64e:	681b      	ldr	r3, [r3, #0]
     650:	2202      	movs	r2, #2
     652:	431a      	orrs	r2, r3
     654:	68fb      	ldr	r3, [r7, #12]
     656:	601a      	str	r2, [r3, #0]
}
     658:	46c0      	nop			; (mov r8, r8)
     65a:	46bd      	mov	sp, r7
     65c:	b004      	add	sp, #16
     65e:	bd80      	pop	{r7, pc}
     660:	00000505 	.word	0x00000505

00000664 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     672:	46c0      	nop			; (mov r8, r8)
     674:	687b      	ldr	r3, [r7, #4]
     676:	0018      	movs	r0, r3
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <spi_disable+0x40>)
     67a:	4798      	blx	r3
     67c:	1e03      	subs	r3, r0, #0
     67e:	d1f9      	bne.n	674 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     680:	68fb      	ldr	r3, [r7, #12]
     682:	228f      	movs	r2, #143	; 0x8f
     684:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     686:	68fb      	ldr	r3, [r7, #12]
     688:	228f      	movs	r2, #143	; 0x8f
     68a:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     68c:	68fb      	ldr	r3, [r7, #12]
     68e:	681b      	ldr	r3, [r3, #0]
     690:	2202      	movs	r2, #2
     692:	4393      	bics	r3, r2
     694:	001a      	movs	r2, r3
     696:	68fb      	ldr	r3, [r7, #12]
     698:	601a      	str	r2, [r3, #0]
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b004      	add	sp, #16
     6a0:	bd80      	pop	{r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00000505 	.word	0x00000505

000006a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b084      	sub	sp, #16
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	7e1b      	ldrb	r3, [r3, #24]
     6ba:	b2db      	uxtb	r3, r3
     6bc:	001a      	movs	r2, r3
     6be:	2302      	movs	r3, #2
     6c0:	4013      	ands	r3, r2
     6c2:	1e5a      	subs	r2, r3, #1
     6c4:	4193      	sbcs	r3, r2
     6c6:	b2db      	uxtb	r3, r3
}
     6c8:	0018      	movs	r0, r3
     6ca:	46bd      	mov	sp, r7
     6cc:	b004      	add	sp, #16
     6ce:	bd80      	pop	{r7, pc}

000006d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b084      	sub	sp, #16
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6de:	68fb      	ldr	r3, [r7, #12]
     6e0:	7e1b      	ldrb	r3, [r3, #24]
     6e2:	b2db      	uxtb	r3, r3
     6e4:	001a      	movs	r2, r3
     6e6:	2301      	movs	r3, #1
     6e8:	4013      	ands	r3, r2
     6ea:	1e5a      	subs	r2, r3, #1
     6ec:	4193      	sbcs	r3, r2
     6ee:	b2db      	uxtb	r3, r3
}
     6f0:	0018      	movs	r0, r3
     6f2:	46bd      	mov	sp, r7
     6f4:	b004      	add	sp, #16
     6f6:	bd80      	pop	{r7, pc}

000006f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     6f8:	b580      	push	{r7, lr}
     6fa:	b084      	sub	sp, #16
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     700:	687b      	ldr	r3, [r7, #4]
     702:	681b      	ldr	r3, [r3, #0]
     704:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     706:	68fb      	ldr	r3, [r7, #12]
     708:	7e1b      	ldrb	r3, [r3, #24]
     70a:	b2db      	uxtb	r3, r3
     70c:	001a      	movs	r2, r3
     70e:	2304      	movs	r3, #4
     710:	4013      	ands	r3, r2
     712:	1e5a      	subs	r2, r3, #1
     714:	4193      	sbcs	r3, r2
     716:	b2db      	uxtb	r3, r3
}
     718:	0018      	movs	r0, r3
     71a:	46bd      	mov	sp, r7
     71c:	b004      	add	sp, #16
     71e:	bd80      	pop	{r7, pc}

00000720 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     720:	b580      	push	{r7, lr}
     722:	b084      	sub	sp, #16
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	000a      	movs	r2, r1
     72a:	1cbb      	adds	r3, r7, #2
     72c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     734:	687b      	ldr	r3, [r7, #4]
     736:	0018      	movs	r0, r3
     738:	4b0a      	ldr	r3, [pc, #40]	; (764 <spi_write+0x44>)
     73a:	4798      	blx	r3
     73c:	0003      	movs	r3, r0
     73e:	001a      	movs	r2, r3
     740:	2301      	movs	r3, #1
     742:	4053      	eors	r3, r2
     744:	b2db      	uxtb	r3, r3
     746:	2b00      	cmp	r3, #0
     748:	d001      	beq.n	74e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     74a:	2305      	movs	r3, #5
     74c:	e006      	b.n	75c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     74e:	1cbb      	adds	r3, r7, #2
     750:	881b      	ldrh	r3, [r3, #0]
     752:	05db      	lsls	r3, r3, #23
     754:	0dda      	lsrs	r2, r3, #23
     756:	68fb      	ldr	r3, [r7, #12]
     758:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     75a:	2300      	movs	r3, #0
}
     75c:	0018      	movs	r0, r3
     75e:	46bd      	mov	sp, r7
     760:	b004      	add	sp, #16
     762:	bd80      	pop	{r7, pc}
     764:	000006d1 	.word	0x000006d1

00000768 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     768:	b580      	push	{r7, lr}
     76a:	b084      	sub	sp, #16
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
     770:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     772:	687b      	ldr	r3, [r7, #4]
     774:	681b      	ldr	r3, [r3, #0]
     776:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     778:	687b      	ldr	r3, [r7, #4]
     77a:	0018      	movs	r0, r3
     77c:	4b1b      	ldr	r3, [pc, #108]	; (7ec <spi_read+0x84>)
     77e:	4798      	blx	r3
     780:	0003      	movs	r3, r0
     782:	001a      	movs	r2, r3
     784:	2301      	movs	r3, #1
     786:	4053      	eors	r3, r2
     788:	b2db      	uxtb	r3, r3
     78a:	2b00      	cmp	r3, #0
     78c:	d001      	beq.n	792 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     78e:	2310      	movs	r3, #16
     790:	e027      	b.n	7e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     792:	230f      	movs	r3, #15
     794:	18fb      	adds	r3, r7, r3
     796:	2200      	movs	r2, #0
     798:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     79a:	68bb      	ldr	r3, [r7, #8]
     79c:	8b5b      	ldrh	r3, [r3, #26]
     79e:	b29b      	uxth	r3, r3
     7a0:	001a      	movs	r2, r3
     7a2:	2304      	movs	r3, #4
     7a4:	4013      	ands	r3, r2
     7a6:	d006      	beq.n	7b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     7a8:	230f      	movs	r3, #15
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	221e      	movs	r2, #30
     7ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     7b0:	68bb      	ldr	r3, [r7, #8]
     7b2:	2204      	movs	r2, #4
     7b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	799b      	ldrb	r3, [r3, #6]
     7ba:	2b01      	cmp	r3, #1
     7bc:	d108      	bne.n	7d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     7be:	68bb      	ldr	r3, [r7, #8]
     7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7c2:	b29b      	uxth	r3, r3
     7c4:	05db      	lsls	r3, r3, #23
     7c6:	0ddb      	lsrs	r3, r3, #23
     7c8:	b29a      	uxth	r2, r3
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	801a      	strh	r2, [r3, #0]
     7ce:	e005      	b.n	7dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     7d0:	68bb      	ldr	r3, [r7, #8]
     7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7d4:	b2db      	uxtb	r3, r3
     7d6:	b29a      	uxth	r2, r3
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     7dc:	230f      	movs	r3, #15
     7de:	18fb      	adds	r3, r7, r3
     7e0:	781b      	ldrb	r3, [r3, #0]
}
     7e2:	0018      	movs	r0, r3
     7e4:	46bd      	mov	sp, r7
     7e6:	b004      	add	sp, #16
     7e8:	bd80      	pop	{r7, pc}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	000006f9 	.word	0x000006f9

000007f0 <spi_rw>:

struct spi_module master_wifi;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b086      	sub	sp, #24
     7f4:	af00      	add	r7, sp, #0
     7f6:	60f8      	str	r0, [r7, #12]
     7f8:	60b9      	str	r1, [r7, #8]
     7fa:	1dbb      	adds	r3, r7, #6
     7fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     7fe:	2313      	movs	r3, #19
     800:	18fb      	adds	r3, r7, r3
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     806:	2317      	movs	r3, #23
     808:	18fb      	adds	r3, r7, r3
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
     80e:	2316      	movs	r3, #22
     810:	18fb      	adds	r3, r7, r3
     812:	2200      	movs	r2, #0
     814:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     816:	2314      	movs	r3, #20
     818:	18fb      	adds	r3, r7, r3
     81a:	2200      	movs	r2, #0
     81c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     81e:	2310      	movs	r3, #16
     820:	18fb      	adds	r3, r7, r3
     822:	2200      	movs	r2, #0
     824:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     826:	68fb      	ldr	r3, [r7, #12]
     828:	2b00      	cmp	r3, #0
     82a:	d107      	bne.n	83c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     82c:	2313      	movs	r3, #19
     82e:	18fb      	adds	r3, r7, r3
     830:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     832:	2317      	movs	r3, #23
     834:	18fb      	adds	r3, r7, r3
     836:	2201      	movs	r2, #1
     838:	701a      	strb	r2, [r3, #0]
     83a:	e00d      	b.n	858 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     83c:	68bb      	ldr	r3, [r7, #8]
     83e:	2b00      	cmp	r3, #0
     840:	d107      	bne.n	852 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     842:	2313      	movs	r3, #19
     844:	18fb      	adds	r3, r7, r3
     846:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     848:	2316      	movs	r3, #22
     84a:	18fb      	adds	r3, r7, r3
     84c:	2201      	movs	r2, #1
     84e:	701a      	strb	r2, [r3, #0]
     850:	e002      	b.n	858 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     852:	2306      	movs	r3, #6
     854:	425b      	negs	r3, r3
     856:	e06a      	b.n	92e <spi_rw+0x13e>
	}

	spi_select_slave(&master_wifi, &slave_inst, true);
     858:	4937      	ldr	r1, [pc, #220]	; (938 <spi_rw+0x148>)
     85a:	4b38      	ldr	r3, [pc, #224]	; (93c <spi_rw+0x14c>)
     85c:	2201      	movs	r2, #1
     85e:	0018      	movs	r0, r3
     860:	4b37      	ldr	r3, [pc, #220]	; (940 <spi_rw+0x150>)
     862:	4798      	blx	r3

	while (u16Sz) {
     864:	e04c      	b.n	900 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     866:	68fb      	ldr	r3, [r7, #12]
     868:	781a      	ldrb	r2, [r3, #0]
     86a:	2314      	movs	r3, #20
     86c:	18fb      	adds	r3, r7, r3
     86e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master_wifi))
     870:	46c0      	nop			; (mov r8, r8)
     872:	4b32      	ldr	r3, [pc, #200]	; (93c <spi_rw+0x14c>)
     874:	0018      	movs	r0, r3
     876:	4b33      	ldr	r3, [pc, #204]	; (944 <spi_rw+0x154>)
     878:	4798      	blx	r3
     87a:	0003      	movs	r3, r0
     87c:	001a      	movs	r2, r3
     87e:	2301      	movs	r3, #1
     880:	4053      	eors	r3, r2
     882:	b2db      	uxtb	r3, r3
     884:	2b00      	cmp	r3, #0
     886:	d1f4      	bne.n	872 <spi_rw+0x82>
			;
		while(spi_write(&master_wifi, txd_data) != STATUS_OK)
     888:	46c0      	nop			; (mov r8, r8)
     88a:	2314      	movs	r3, #20
     88c:	18fb      	adds	r3, r7, r3
     88e:	881a      	ldrh	r2, [r3, #0]
     890:	4b2a      	ldr	r3, [pc, #168]	; (93c <spi_rw+0x14c>)
     892:	0011      	movs	r1, r2
     894:	0018      	movs	r0, r3
     896:	4b2c      	ldr	r3, [pc, #176]	; (948 <spi_rw+0x158>)
     898:	4798      	blx	r3
     89a:	1e03      	subs	r3, r0, #0
     89c:	d1f5      	bne.n	88a <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master_wifi))
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	4b26      	ldr	r3, [pc, #152]	; (93c <spi_rw+0x14c>)
     8a2:	0018      	movs	r0, r3
     8a4:	4b29      	ldr	r3, [pc, #164]	; (94c <spi_rw+0x15c>)
     8a6:	4798      	blx	r3
     8a8:	0003      	movs	r3, r0
     8aa:	001a      	movs	r2, r3
     8ac:	2301      	movs	r3, #1
     8ae:	4053      	eors	r3, r2
     8b0:	b2db      	uxtb	r3, r3
     8b2:	2b00      	cmp	r3, #0
     8b4:	d1f4      	bne.n	8a0 <spi_rw+0xb0>
			;
		while (spi_read(&master_wifi, &rxd_data) != STATUS_OK)
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	2310      	movs	r3, #16
     8ba:	18fa      	adds	r2, r7, r3
     8bc:	4b1f      	ldr	r3, [pc, #124]	; (93c <spi_rw+0x14c>)
     8be:	0011      	movs	r1, r2
     8c0:	0018      	movs	r0, r3
     8c2:	4b23      	ldr	r3, [pc, #140]	; (950 <spi_rw+0x160>)
     8c4:	4798      	blx	r3
     8c6:	1e03      	subs	r3, r0, #0
     8c8:	d1f6      	bne.n	8b8 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     8ca:	2310      	movs	r3, #16
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	881b      	ldrh	r3, [r3, #0]
     8d0:	b2da      	uxtb	r2, r3
     8d2:	68bb      	ldr	r3, [r7, #8]
     8d4:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     8d6:	1dbb      	adds	r3, r7, #6
     8d8:	881a      	ldrh	r2, [r3, #0]
     8da:	1dbb      	adds	r3, r7, #6
     8dc:	3a01      	subs	r2, #1
     8de:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     8e0:	2316      	movs	r3, #22
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d102      	bne.n	8f0 <spi_rw+0x100>
			pu8Miso++;
     8ea:	68bb      	ldr	r3, [r7, #8]
     8ec:	3301      	adds	r3, #1
     8ee:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     8f0:	2317      	movs	r3, #23
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d102      	bne.n	900 <spi_rw+0x110>
			pu8Mosi++;
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	3301      	adds	r3, #1
     8fe:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     900:	1dbb      	adds	r3, r7, #6
     902:	881b      	ldrh	r3, [r3, #0]
     904:	2b00      	cmp	r3, #0
     906:	d1ae      	bne.n	866 <spi_rw+0x76>
	}

	while (!spi_is_write_complete(&master_wifi))
     908:	46c0      	nop			; (mov r8, r8)
     90a:	4b0c      	ldr	r3, [pc, #48]	; (93c <spi_rw+0x14c>)
     90c:	0018      	movs	r0, r3
     90e:	4b11      	ldr	r3, [pc, #68]	; (954 <spi_rw+0x164>)
     910:	4798      	blx	r3
     912:	0003      	movs	r3, r0
     914:	001a      	movs	r2, r3
     916:	2301      	movs	r3, #1
     918:	4053      	eors	r3, r2
     91a:	b2db      	uxtb	r3, r3
     91c:	2b00      	cmp	r3, #0
     91e:	d1f4      	bne.n	90a <spi_rw+0x11a>
		;

	spi_select_slave(&master_wifi, &slave_inst, false);
     920:	4905      	ldr	r1, [pc, #20]	; (938 <spi_rw+0x148>)
     922:	4b06      	ldr	r3, [pc, #24]	; (93c <spi_rw+0x14c>)
     924:	2200      	movs	r2, #0
     926:	0018      	movs	r0, r3
     928:	4b05      	ldr	r3, [pc, #20]	; (940 <spi_rw+0x150>)
     92a:	4798      	blx	r3

	return M2M_SUCCESS;
     92c:	2300      	movs	r3, #0
}
     92e:	0018      	movs	r0, r3
     930:	46bd      	mov	sp, r7
     932:	b006      	add	sp, #24
     934:	bd80      	pop	{r7, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	20000a90 	.word	0x20000a90
     93c:	20000a94 	.word	0x20000a94
     940:	0001347d 	.word	0x0001347d
     944:	000006d1 	.word	0x000006d1
     948:	00000721 	.word	0x00000721
     94c:	000006f9 	.word	0x000006f9
     950:	00000769 	.word	0x00000769
     954:	000006a9 	.word	0x000006a9

00000958 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     958:	b580      	push	{r7, lr}
     95a:	b092      	sub	sp, #72	; 0x48
     95c:	af00      	add	r7, sp, #0
     95e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     960:	2347      	movs	r3, #71	; 0x47
     962:	18fb      	adds	r3, r7, r3
     964:	2200      	movs	r2, #0
     966:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	0018      	movs	r0, r3
     96e:	4b29      	ldr	r3, [pc, #164]	; (a14 <nm_bus_init+0xbc>)
     970:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     972:	2308      	movs	r3, #8
     974:	18fb      	adds	r3, r7, r3
     976:	2223      	movs	r2, #35	; 0x23
     978:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     97a:	2308      	movs	r3, #8
     97c:	18fa      	adds	r2, r7, r3
     97e:	4b26      	ldr	r3, [pc, #152]	; (a18 <nm_bus_init+0xc0>)
     980:	0011      	movs	r1, r2
     982:	0018      	movs	r0, r3
     984:	4b25      	ldr	r3, [pc, #148]	; (a1c <nm_bus_init+0xc4>)
     986:	4798      	blx	r3
	spi_get_config_defaults(&config);
     988:	230c      	movs	r3, #12
     98a:	18fb      	adds	r3, r7, r3
     98c:	0018      	movs	r0, r3
     98e:	4b24      	ldr	r3, [pc, #144]	; (a20 <nm_bus_init+0xc8>)
     990:	4798      	blx	r3
	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     992:	230c      	movs	r3, #12
     994:	18fb      	adds	r3, r7, r3
     996:	0018      	movs	r0, r3
     998:	4b21      	ldr	r3, [pc, #132]	; (a20 <nm_bus_init+0xc8>)
     99a:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     99c:	230c      	movs	r3, #12
     99e:	18fb      	adds	r3, r7, r3
     9a0:	2280      	movs	r2, #128	; 0x80
     9a2:	0252      	lsls	r2, r2, #9
     9a4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     9a6:	230c      	movs	r3, #12
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	4a1e      	ldr	r2, [pc, #120]	; (a24 <nm_bus_init+0xcc>)
     9ac:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     9ae:	230c      	movs	r3, #12
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2201      	movs	r2, #1
     9b4:	4252      	negs	r2, r2
     9b6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     9b8:	230c      	movs	r3, #12
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	4a1a      	ldr	r2, [pc, #104]	; (a28 <nm_bus_init+0xd0>)
     9be:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     9c0:	230c      	movs	r3, #12
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	4a19      	ldr	r2, [pc, #100]	; (a2c <nm_bus_init+0xd4>)
     9c6:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     9c8:	230c      	movs	r3, #12
     9ca:	18fb      	adds	r3, r7, r3
     9cc:	2200      	movs	r2, #0
     9ce:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     9d0:	230c      	movs	r3, #12
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	4a16      	ldr	r2, [pc, #88]	; (a30 <nm_bus_init+0xd8>)
     9d6:	619a      	str	r2, [r3, #24]
	if (spi_init(&master_wifi, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     9d8:	230c      	movs	r3, #12
     9da:	18fa      	adds	r2, r7, r3
     9dc:	4915      	ldr	r1, [pc, #84]	; (a34 <nm_bus_init+0xdc>)
     9de:	4b16      	ldr	r3, [pc, #88]	; (a38 <nm_bus_init+0xe0>)
     9e0:	0018      	movs	r0, r3
     9e2:	4b16      	ldr	r3, [pc, #88]	; (a3c <nm_bus_init+0xe4>)
     9e4:	4798      	blx	r3
     9e6:	1e03      	subs	r3, r0, #0
     9e8:	d002      	beq.n	9f0 <nm_bus_init+0x98>
		return M2M_ERR_BUS_FAIL;
     9ea:	2306      	movs	r3, #6
     9ec:	425b      	negs	r3, r3
     9ee:	e00c      	b.n	a0a <nm_bus_init+0xb2>
	}

	/* Enable the SPI master. */
	spi_enable(&master_wifi);
     9f0:	4b11      	ldr	r3, [pc, #68]	; (a38 <nm_bus_init+0xe0>)
     9f2:	0018      	movs	r0, r3
     9f4:	4b12      	ldr	r3, [pc, #72]	; (a40 <nm_bus_init+0xe8>)
     9f6:	4798      	blx	r3

	nm_bsp_reset();
     9f8:	4b12      	ldr	r3, [pc, #72]	; (a44 <nm_bus_init+0xec>)
     9fa:	4798      	blx	r3
	nm_bsp_sleep(1);
     9fc:	2001      	movs	r0, #1
     9fe:	4b12      	ldr	r3, [pc, #72]	; (a48 <nm_bus_init+0xf0>)
     a00:	4798      	blx	r3
#endif
	return result;
     a02:	2347      	movs	r3, #71	; 0x47
     a04:	18fb      	adds	r3, r7, r3
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	b25b      	sxtb	r3, r3
}
     a0a:	0018      	movs	r0, r3
     a0c:	46bd      	mov	sp, r7
     a0e:	b012      	add	sp, #72	; 0x48
     a10:	bd80      	pop	{r7, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	000005a9 	.word	0x000005a9
     a18:	20000a90 	.word	0x20000a90
     a1c:	000005cd 	.word	0x000005cd
     a20:	00000525 	.word	0x00000525
     a24:	00220003 	.word	0x00220003
     a28:	00360003 	.word	0x00360003
     a2c:	00370003 	.word	0x00370003
     a30:	00b71b00 	.word	0x00b71b00
     a34:	43000400 	.word	0x43000400
     a38:	20000a94 	.word	0x20000a94
     a3c:	00013365 	.word	0x00013365
     a40:	00000631 	.word	0x00000631
     a44:	000002dd 	.word	0x000002dd
     a48:	00000321 	.word	0x00000321

00000a4c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     a4c:	b590      	push	{r4, r7, lr}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	0002      	movs	r2, r0
     a54:	6039      	str	r1, [r7, #0]
     a56:	1dfb      	adds	r3, r7, #7
     a58:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     a5a:	230f      	movs	r3, #15
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	2200      	movs	r2, #0
     a60:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     a62:	1dfb      	adds	r3, r7, #7
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b03      	cmp	r3, #3
     a68:	d10f      	bne.n	a8a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     a6a:	683b      	ldr	r3, [r7, #0]
     a6c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     a6e:	68bb      	ldr	r3, [r7, #8]
     a70:	6818      	ldr	r0, [r3, #0]
     a72:	68bb      	ldr	r3, [r7, #8]
     a74:	6859      	ldr	r1, [r3, #4]
     a76:	68bb      	ldr	r3, [r7, #8]
     a78:	891b      	ldrh	r3, [r3, #8]
     a7a:	220f      	movs	r2, #15
     a7c:	18bc      	adds	r4, r7, r2
     a7e:	001a      	movs	r2, r3
     a80:	4b10      	ldr	r3, [pc, #64]	; (ac4 <nm_bus_ioctl+0x78>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
     a86:	7023      	strb	r3, [r4, #0]
		}
		break;
     a88:	e013      	b.n	ab2 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     a8a:	230f      	movs	r3, #15
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	22ff      	movs	r2, #255	; 0xff
     a90:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     a92:	230e      	movs	r3, #14
     a94:	33ff      	adds	r3, #255	; 0xff
     a96:	001a      	movs	r2, r3
     a98:	490b      	ldr	r1, [pc, #44]	; (ac8 <nm_bus_ioctl+0x7c>)
     a9a:	4b0c      	ldr	r3, [pc, #48]	; (acc <nm_bus_ioctl+0x80>)
     a9c:	0018      	movs	r0, r3
     a9e:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <nm_bus_ioctl+0x84>)
     aa0:	4798      	blx	r3
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <nm_bus_ioctl+0x88>)
     aa4:	0018      	movs	r0, r3
     aa6:	4b0c      	ldr	r3, [pc, #48]	; (ad8 <nm_bus_ioctl+0x8c>)
     aa8:	4798      	blx	r3
     aaa:	200d      	movs	r0, #13
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <nm_bus_ioctl+0x90>)
     aae:	4798      	blx	r3
			break;
     ab0:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     ab2:	230f      	movs	r3, #15
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	b25b      	sxtb	r3, r3
}
     aba:	0018      	movs	r0, r3
     abc:	46bd      	mov	sp, r7
     abe:	b005      	add	sp, #20
     ac0:	bd90      	pop	{r4, r7, pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	000007f1 	.word	0x000007f1
     ac8:	0001b468 	.word	0x0001b468
     acc:	0001b440 	.word	0x0001b440
     ad0:	0001a001 	.word	0x0001a001
     ad4:	0001b454 	.word	0x0001b454
     ad8:	0001a11d 	.word	0x0001a11d
     adc:	0001a035 	.word	0x0001a035

00000ae0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	b082      	sub	sp, #8
     ae4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     ae6:	1dfb      	adds	r3, r7, #7
     ae8:	2200      	movs	r2, #0
     aea:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     aec:	1d3b      	adds	r3, r7, #4
     aee:	0018      	movs	r0, r3
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <nm_bus_deinit+0x38>)
     af2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     af4:	1d3b      	adds	r3, r7, #4
     af6:	2200      	movs	r2, #0
     af8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     afa:	1d3b      	adds	r3, r7, #4
     afc:	2200      	movs	r2, #0
     afe:	705a      	strb	r2, [r3, #1]

#ifdef CONF_WINC_USE_I2C
	i2c_master_disable(&i2c_master_instance);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master_wifi);
     b00:	4b06      	ldr	r3, [pc, #24]	; (b1c <nm_bus_deinit+0x3c>)
     b02:	0018      	movs	r0, r3
     b04:	4b06      	ldr	r3, [pc, #24]	; (b20 <nm_bus_deinit+0x40>)
     b06:	4798      	blx	r3
#endif /* CONF_WINC_USE_SPI */
	return result;
     b08:	1dfb      	adds	r3, r7, #7
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	b25b      	sxtb	r3, r3
}
     b0e:	0018      	movs	r0, r3
     b10:	46bd      	mov	sp, r7
     b12:	b002      	add	sp, #8
     b14:	bd80      	pop	{r7, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	0000048d 	.word	0x0000048d
     b1c:	20000a94 	.word	0x20000a94
     b20:	00000665 	.word	0x00000665

00000b24 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     b24:	b580      	push	{r7, lr}
     b26:	b084      	sub	sp, #16
     b28:	af00      	add	r7, sp, #0
     b2a:	60f8      	str	r0, [r7, #12]
     b2c:	60b9      	str	r1, [r7, #8]
     b2e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	2b00      	cmp	r3, #0
     b34:	d010      	beq.n	b58 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     b36:	68bb      	ldr	r3, [r7, #8]
     b38:	781a      	ldrb	r2, [r3, #0]
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	701a      	strb	r2, [r3, #0]
		pDst++;
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	3301      	adds	r3, #1
     b42:	60fb      	str	r3, [r7, #12]
		pSrc++;
     b44:	68bb      	ldr	r3, [r7, #8]
     b46:	3301      	adds	r3, #1
     b48:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	3b01      	subs	r3, #1
     b4e:	607b      	str	r3, [r7, #4]
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	2b00      	cmp	r3, #0
     b54:	d1ef      	bne.n	b36 <m2m_memcpy+0x12>
     b56:	e000      	b.n	b5a <m2m_memcpy+0x36>
	if(sz == 0) return;
     b58:	46c0      	nop			; (mov r8, r8)
}
     b5a:	46bd      	mov	sp, r7
     b5c:	b004      	add	sp, #16
     b5e:	bd80      	pop	{r7, pc}

00000b60 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     b60:	b580      	push	{r7, lr}
     b62:	b084      	sub	sp, #16
     b64:	af00      	add	r7, sp, #0
     b66:	60f8      	str	r0, [r7, #12]
     b68:	607a      	str	r2, [r7, #4]
     b6a:	230b      	movs	r3, #11
     b6c:	18fb      	adds	r3, r7, r3
     b6e:	1c0a      	adds	r2, r1, #0
     b70:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	2b00      	cmp	r3, #0
     b76:	d00e      	beq.n	b96 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     b78:	68fb      	ldr	r3, [r7, #12]
     b7a:	220b      	movs	r2, #11
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	7812      	ldrb	r2, [r2, #0]
     b80:	701a      	strb	r2, [r3, #0]
		pBuf++;
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	3301      	adds	r3, #1
     b86:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	3b01      	subs	r3, #1
     b8c:	607b      	str	r3, [r7, #4]
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	2b00      	cmp	r3, #0
     b92:	d1f1      	bne.n	b78 <m2m_memset+0x18>
     b94:	e000      	b.n	b98 <m2m_memset+0x38>
	if(sz == 0) return;
     b96:	46c0      	nop			; (mov r8, r8)
}
     b98:	46bd      	mov	sp, r7
     b9a:	b004      	add	sp, #16
     b9c:	bd80      	pop	{r7, pc}

00000b9e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     b9e:	b580      	push	{r7, lr}
     ba0:	b084      	sub	sp, #16
     ba2:	af00      	add	r7, sp, #0
     ba4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     ba6:	230e      	movs	r3, #14
     ba8:	18fb      	adds	r3, r7, r3
     baa:	2200      	movs	r2, #0
     bac:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     bae:	e009      	b.n	bc4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     bb0:	230e      	movs	r3, #14
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	881a      	ldrh	r2, [r3, #0]
     bb6:	230e      	movs	r3, #14
     bb8:	18fb      	adds	r3, r7, r3
     bba:	3201      	adds	r2, #1
     bbc:	801a      	strh	r2, [r3, #0]
		pcStr++;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	3301      	adds	r3, #1
     bc2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d1f1      	bne.n	bb0 <m2m_strlen+0x12>
	}
	return u16StrLen;
     bcc:	230e      	movs	r3, #14
     bce:	18fb      	adds	r3, r7, r3
     bd0:	881b      	ldrh	r3, [r3, #0]
}
     bd2:	0018      	movs	r0, r3
     bd4:	46bd      	mov	sp, r7
     bd6:	b004      	add	sp, #16
     bd8:	bd80      	pop	{r7, pc}
	...

00000bdc <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     bdc:	b580      	push	{r7, lr}
     bde:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <isr+0x18>)
     be2:	78db      	ldrb	r3, [r3, #3]
     be4:	b2db      	uxtb	r3, r3
     be6:	3301      	adds	r3, #1
     be8:	b2da      	uxtb	r2, r3
     bea:	4b02      	ldr	r3, [pc, #8]	; (bf4 <isr+0x18>)
     bec:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	46bd      	mov	sp, r7
     bf2:	bd80      	pop	{r7, pc}
     bf4:	20000aa0 	.word	0x20000aa0

00000bf8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     bf8:	b590      	push	{r4, r7, lr}
     bfa:	b083      	sub	sp, #12
     bfc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     bfe:	1dfb      	adds	r3, r7, #7
     c00:	2200      	movs	r2, #0
     c02:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     c04:	4b14      	ldr	r3, [pc, #80]	; (c58 <hif_set_rx_done+0x60>)
     c06:	2200      	movs	r2, #0
     c08:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     c0a:	2001      	movs	r0, #1
     c0c:	4b13      	ldr	r3, [pc, #76]	; (c5c <hif_set_rx_done+0x64>)
     c0e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     c10:	1dfc      	adds	r4, r7, #7
     c12:	003b      	movs	r3, r7
     c14:	4a12      	ldr	r2, [pc, #72]	; (c60 <hif_set_rx_done+0x68>)
     c16:	0019      	movs	r1, r3
     c18:	0010      	movs	r0, r2
     c1a:	4b12      	ldr	r3, [pc, #72]	; (c64 <hif_set_rx_done+0x6c>)
     c1c:	4798      	blx	r3
     c1e:	0003      	movs	r3, r0
     c20:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     c22:	1dfb      	adds	r3, r7, #7
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	b25b      	sxtb	r3, r3
     c28:	2b00      	cmp	r3, #0
     c2a:	d10d      	bne.n	c48 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     c2c:	683b      	ldr	r3, [r7, #0]
     c2e:	2202      	movs	r2, #2
     c30:	4313      	orrs	r3, r2
     c32:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	1dfc      	adds	r4, r7, #7
     c38:	4a09      	ldr	r2, [pc, #36]	; (c60 <hif_set_rx_done+0x68>)
     c3a:	0019      	movs	r1, r3
     c3c:	0010      	movs	r0, r2
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <hif_set_rx_done+0x70>)
     c40:	4798      	blx	r3
     c42:	0003      	movs	r3, r0
     c44:	7023      	strb	r3, [r4, #0]
     c46:	e000      	b.n	c4a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     c48:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     c4a:	1dfb      	adds	r3, r7, #7
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	b25b      	sxtb	r3, r3

}
     c50:	0018      	movs	r0, r3
     c52:	46bd      	mov	sp, r7
     c54:	b003      	add	sp, #12
     c56:	bd90      	pop	{r4, r7, pc}
     c58:	20000aa0 	.word	0x20000aa0
     c5c:	000003d1 	.word	0x000003d1
     c60:	00001070 	.word	0x00001070
     c64:	00003095 	.word	0x00003095
     c68:	000030b9 	.word	0x000030b9

00000c6c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b082      	sub	sp, #8
     c70:	af00      	add	r7, sp, #0
     c72:	603a      	str	r2, [r7, #0]
     c74:	1dfb      	adds	r3, r7, #7
     c76:	1c02      	adds	r2, r0, #0
     c78:	701a      	strb	r2, [r3, #0]
     c7a:	1d3b      	adds	r3, r7, #4
     c7c:	1c0a      	adds	r2, r1, #0
     c7e:	801a      	strh	r2, [r3, #0]


}
     c80:	46c0      	nop			; (mov r8, r8)
     c82:	46bd      	mov	sp, r7
     c84:	b002      	add	sp, #8
     c86:	bd80      	pop	{r7, pc}

00000c88 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     c88:	b590      	push	{r4, r7, lr}
     c8a:	b083      	sub	sp, #12
     c8c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     c8e:	1dfb      	adds	r3, r7, #7
     c90:	2200      	movs	r2, #0
     c92:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     c94:	4b16      	ldr	r3, [pc, #88]	; (cf0 <hif_chip_wake+0x68>)
     c96:	789b      	ldrb	r3, [r3, #2]
     c98:	b2db      	uxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d003      	beq.n	ca6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	b25b      	sxtb	r3, r3
     ca4:	e01f      	b.n	ce6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     ca6:	4b12      	ldr	r3, [pc, #72]	; (cf0 <hif_chip_wake+0x68>)
     ca8:	785b      	ldrb	r3, [r3, #1]
     caa:	b2db      	uxtb	r3, r3
     cac:	2b00      	cmp	r3, #0
     cae:	d10e      	bne.n	cce <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <hif_chip_wake+0x68>)
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	b2db      	uxtb	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	d009      	beq.n	cce <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     cba:	1dfc      	adds	r4, r7, #7
     cbc:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <hif_chip_wake+0x6c>)
     cbe:	4798      	blx	r3
     cc0:	0003      	movs	r3, r0
     cc2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     cc4:	1dfb      	adds	r3, r7, #7
     cc6:	781b      	ldrb	r3, [r3, #0]
     cc8:	b25b      	sxtb	r3, r3
     cca:	2b00      	cmp	r3, #0
     ccc:	d107      	bne.n	cde <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     cce:	4b08      	ldr	r3, [pc, #32]	; (cf0 <hif_chip_wake+0x68>)
     cd0:	785b      	ldrb	r3, [r3, #1]
     cd2:	b2db      	uxtb	r3, r3
     cd4:	3301      	adds	r3, #1
     cd6:	b2da      	uxtb	r2, r3
     cd8:	4b05      	ldr	r3, [pc, #20]	; (cf0 <hif_chip_wake+0x68>)
     cda:	705a      	strb	r2, [r3, #1]
     cdc:	e000      	b.n	ce0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     cde:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	b25b      	sxtb	r3, r3
}
     ce6:	0018      	movs	r0, r3
     ce8:	46bd      	mov	sp, r7
     cea:	b003      	add	sp, #12
     cec:	bd90      	pop	{r4, r7, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	20000aa0 	.word	0x20000aa0
     cf4:	00002b69 	.word	0x00002b69

00000cf8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <hif_chip_sleep_sc+0x24>)
     cfe:	785b      	ldrb	r3, [r3, #1]
     d00:	b2db      	uxtb	r3, r3
     d02:	2b00      	cmp	r3, #0
     d04:	d006      	beq.n	d14 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     d06:	4b05      	ldr	r3, [pc, #20]	; (d1c <hif_chip_sleep_sc+0x24>)
     d08:	785b      	ldrb	r3, [r3, #1]
     d0a:	b2db      	uxtb	r3, r3
     d0c:	3b01      	subs	r3, #1
     d0e:	b2da      	uxtb	r2, r3
     d10:	4b02      	ldr	r3, [pc, #8]	; (d1c <hif_chip_sleep_sc+0x24>)
     d12:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     d14:	2300      	movs	r3, #0
}
     d16:	0018      	movs	r0, r3
     d18:	46bd      	mov	sp, r7
     d1a:	bd80      	pop	{r7, pc}
     d1c:	20000aa0 	.word	0x20000aa0

00000d20 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b083      	sub	sp, #12
     d24:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     d26:	1dfb      	adds	r3, r7, #7
     d28:	2200      	movs	r2, #0
     d2a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     d2c:	4b10      	ldr	r3, [pc, #64]	; (d70 <hif_chip_sleep+0x50>)
     d2e:	785b      	ldrb	r3, [r3, #1]
     d30:	b2db      	uxtb	r3, r3
     d32:	2b00      	cmp	r3, #0
     d34:	d006      	beq.n	d44 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     d36:	4b0e      	ldr	r3, [pc, #56]	; (d70 <hif_chip_sleep+0x50>)
     d38:	785b      	ldrb	r3, [r3, #1]
     d3a:	b2db      	uxtb	r3, r3
     d3c:	3b01      	subs	r3, #1
     d3e:	b2da      	uxtb	r2, r3
     d40:	4b0b      	ldr	r3, [pc, #44]	; (d70 <hif_chip_sleep+0x50>)
     d42:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     d44:	4b0a      	ldr	r3, [pc, #40]	; (d70 <hif_chip_sleep+0x50>)
     d46:	785b      	ldrb	r3, [r3, #1]
     d48:	b2db      	uxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d109      	bne.n	d62 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <hif_chip_sleep+0x50>)
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	2b00      	cmp	r3, #0
     d56:	d004      	beq.n	d62 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     d58:	1dfc      	adds	r4, r7, #7
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <hif_chip_sleep+0x54>)
     d5c:	4798      	blx	r3
     d5e:	0003      	movs	r3, r0
     d60:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     d62:	1dfb      	adds	r3, r7, #7
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	b25b      	sxtb	r3, r3
}
     d68:	0018      	movs	r0, r3
     d6a:	46bd      	mov	sp, r7
     d6c:	b003      	add	sp, #12
     d6e:	bd90      	pop	{r4, r7, pc}
     d70:	20000aa0 	.word	0x20000aa0
     d74:	00002a91 	.word	0x00002a91

00000d78 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     d78:	b580      	push	{r7, lr}
     d7a:	b082      	sub	sp, #8
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     d80:	4b09      	ldr	r3, [pc, #36]	; (da8 <hif_init+0x30>)
     d82:	2228      	movs	r2, #40	; 0x28
     d84:	2100      	movs	r1, #0
     d86:	0018      	movs	r0, r3
     d88:	4b08      	ldr	r3, [pc, #32]	; (dac <hif_init+0x34>)
     d8a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     d8c:	4b08      	ldr	r3, [pc, #32]	; (db0 <hif_init+0x38>)
     d8e:	0018      	movs	r0, r3
     d90:	4b08      	ldr	r3, [pc, #32]	; (db4 <hif_init+0x3c>)
     d92:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     d94:	4b08      	ldr	r3, [pc, #32]	; (db8 <hif_init+0x40>)
     d96:	0019      	movs	r1, r3
     d98:	2003      	movs	r0, #3
     d9a:	4b08      	ldr	r3, [pc, #32]	; (dbc <hif_init+0x44>)
     d9c:	4798      	blx	r3
	return M2M_SUCCESS;
     d9e:	2300      	movs	r3, #0
}
     da0:	0018      	movs	r0, r3
     da2:	46bd      	mov	sp, r7
     da4:	b002      	add	sp, #8
     da6:	bd80      	pop	{r7, pc}
     da8:	20000aa0 	.word	0x20000aa0
     dac:	00000b61 	.word	0x00000b61
     db0:	00000bdd 	.word	0x00000bdd
     db4:	00000349 	.word	0x00000349
     db8:	00000c6d 	.word	0x00000c6d
     dbc:	00001835 	.word	0x00001835

00000dc0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     dc0:	b590      	push	{r4, r7, lr}
     dc2:	b089      	sub	sp, #36	; 0x24
     dc4:	af00      	add	r7, sp, #0
     dc6:	0004      	movs	r4, r0
     dc8:	0008      	movs	r0, r1
     dca:	603a      	str	r2, [r7, #0]
     dcc:	0019      	movs	r1, r3
     dce:	1dfb      	adds	r3, r7, #7
     dd0:	1c22      	adds	r2, r4, #0
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	1dbb      	adds	r3, r7, #6
     dd6:	1c02      	adds	r2, r0, #0
     dd8:	701a      	strb	r2, [r3, #0]
     dda:	1d3b      	adds	r3, r7, #4
     ddc:	1c0a      	adds	r2, r1, #0
     dde:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     de0:	231f      	movs	r3, #31
     de2:	18fb      	adds	r3, r7, r3
     de4:	22ff      	movs	r2, #255	; 0xff
     de6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     de8:	1dbb      	adds	r3, r7, #6
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	227f      	movs	r2, #127	; 0x7f
     dee:	4013      	ands	r3, r2
     df0:	b2da      	uxtb	r2, r3
     df2:	2318      	movs	r3, #24
     df4:	18fb      	adds	r3, r7, r3
     df6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     df8:	2318      	movs	r3, #24
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	1dfa      	adds	r2, r7, #7
     dfe:	7812      	ldrb	r2, [r2, #0]
     e00:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     e02:	2318      	movs	r3, #24
     e04:	18fb      	adds	r3, r7, r3
     e06:	2208      	movs	r2, #8
     e08:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e0c:	2b00      	cmp	r3, #0
     e0e:	d011      	beq.n	e34 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     e10:	2318      	movs	r3, #24
     e12:	18fb      	adds	r3, r7, r3
     e14:	885b      	ldrh	r3, [r3, #2]
     e16:	b29a      	uxth	r2, r3
     e18:	2338      	movs	r3, #56	; 0x38
     e1a:	18f9      	adds	r1, r7, r3
     e1c:	2334      	movs	r3, #52	; 0x34
     e1e:	18fb      	adds	r3, r7, r3
     e20:	8809      	ldrh	r1, [r1, #0]
     e22:	881b      	ldrh	r3, [r3, #0]
     e24:	18cb      	adds	r3, r1, r3
     e26:	b29b      	uxth	r3, r3
     e28:	18d3      	adds	r3, r2, r3
     e2a:	b29a      	uxth	r2, r3
     e2c:	2318      	movs	r3, #24
     e2e:	18fb      	adds	r3, r7, r3
     e30:	805a      	strh	r2, [r3, #2]
     e32:	e00a      	b.n	e4a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     e34:	2318      	movs	r3, #24
     e36:	18fb      	adds	r3, r7, r3
     e38:	885b      	ldrh	r3, [r3, #2]
     e3a:	b29a      	uxth	r2, r3
     e3c:	1d3b      	adds	r3, r7, #4
     e3e:	881b      	ldrh	r3, [r3, #0]
     e40:	18d3      	adds	r3, r2, r3
     e42:	b29a      	uxth	r2, r3
     e44:	2318      	movs	r3, #24
     e46:	18fb      	adds	r3, r7, r3
     e48:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     e4a:	231f      	movs	r3, #31
     e4c:	18fc      	adds	r4, r7, r3
     e4e:	4bb0      	ldr	r3, [pc, #704]	; (1110 <hif_send+0x350>)
     e50:	4798      	blx	r3
     e52:	0003      	movs	r3, r0
     e54:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     e56:	231f      	movs	r3, #31
     e58:	18fb      	adds	r3, r7, r3
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	b25b      	sxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d000      	beq.n	e64 <hif_send+0xa4>
     e62:	e127      	b.n	10b4 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     e64:	2300      	movs	r3, #0
     e66:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     e68:	230e      	movs	r3, #14
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	2200      	movs	r2, #0
     e6e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     e70:	2300      	movs	r3, #0
     e72:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     e74:	1dfb      	adds	r3, r7, #7
     e76:	781a      	ldrb	r2, [r3, #0]
     e78:	697b      	ldr	r3, [r7, #20]
     e7a:	4313      	orrs	r3, r2
     e7c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     e7e:	1dbb      	adds	r3, r7, #6
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	021a      	lsls	r2, r3, #8
     e84:	697b      	ldr	r3, [r7, #20]
     e86:	4313      	orrs	r3, r2
     e88:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     e8a:	2318      	movs	r3, #24
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	885b      	ldrh	r3, [r3, #2]
     e90:	b29b      	uxth	r3, r3
     e92:	041a      	lsls	r2, r3, #16
     e94:	697b      	ldr	r3, [r7, #20]
     e96:	4313      	orrs	r3, r2
     e98:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     e9a:	697b      	ldr	r3, [r7, #20]
     e9c:	221f      	movs	r2, #31
     e9e:	18bc      	adds	r4, r7, r2
     ea0:	4a9c      	ldr	r2, [pc, #624]	; (1114 <hif_send+0x354>)
     ea2:	0019      	movs	r1, r3
     ea4:	0010      	movs	r0, r2
     ea6:	4b9c      	ldr	r3, [pc, #624]	; (1118 <hif_send+0x358>)
     ea8:	4798      	blx	r3
     eaa:	0003      	movs	r3, r0
     eac:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     eae:	231f      	movs	r3, #31
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	b25b      	sxtb	r3, r3
     eb6:	2b00      	cmp	r3, #0
     eb8:	d000      	beq.n	ebc <hif_send+0xfc>
     eba:	e116      	b.n	10ea <hif_send+0x32a>

		reg = 0UL;
     ebc:	2300      	movs	r3, #0
     ebe:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
     ec0:	697b      	ldr	r3, [r7, #20]
     ec2:	2202      	movs	r2, #2
     ec4:	4313      	orrs	r3, r2
     ec6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     ec8:	697b      	ldr	r3, [r7, #20]
     eca:	221f      	movs	r2, #31
     ecc:	18bc      	adds	r4, r7, r2
     ece:	4a93      	ldr	r2, [pc, #588]	; (111c <hif_send+0x35c>)
     ed0:	0019      	movs	r1, r3
     ed2:	0010      	movs	r0, r2
     ed4:	4b90      	ldr	r3, [pc, #576]	; (1118 <hif_send+0x358>)
     ed6:	4798      	blx	r3
     ed8:	0003      	movs	r3, r0
     eda:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     edc:	231f      	movs	r3, #31
     ede:	18fb      	adds	r3, r7, r3
     ee0:	781b      	ldrb	r3, [r3, #0]
     ee2:	b25b      	sxtb	r3, r3
     ee4:	2b00      	cmp	r3, #0
     ee6:	d000      	beq.n	eea <hif_send+0x12a>
     ee8:	e101      	b.n	10ee <hif_send+0x32e>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     eea:	2300      	movs	r3, #0
     eec:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     eee:	230e      	movs	r3, #14
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	2200      	movs	r2, #0
     ef4:	801a      	strh	r2, [r3, #0]
     ef6:	e04f      	b.n	f98 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     ef8:	231f      	movs	r3, #31
     efa:	18fc      	adds	r4, r7, r3
     efc:	2314      	movs	r3, #20
     efe:	18fb      	adds	r3, r7, r3
     f00:	4a86      	ldr	r2, [pc, #536]	; (111c <hif_send+0x35c>)
     f02:	0019      	movs	r1, r3
     f04:	0010      	movs	r0, r2
     f06:	4b86      	ldr	r3, [pc, #536]	; (1120 <hif_send+0x360>)
     f08:	4798      	blx	r3
     f0a:	0003      	movs	r3, r0
     f0c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     f0e:	231f      	movs	r3, #31
     f10:	18fb      	adds	r3, r7, r3
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	b25b      	sxtb	r3, r3
     f16:	2b00      	cmp	r3, #0
     f18:	d146      	bne.n	fa8 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     f1a:	230e      	movs	r3, #14
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	881b      	ldrh	r3, [r3, #0]
     f20:	b29a      	uxth	r2, r3
     f22:	23f4      	movs	r3, #244	; 0xf4
     f24:	33ff      	adds	r3, #255	; 0xff
     f26:	429a      	cmp	r2, r3
     f28:	d915      	bls.n	f56 <hif_send+0x196>
				if(cnt < 501) {
     f2a:	230e      	movs	r3, #14
     f2c:	18fb      	adds	r3, r7, r3
     f2e:	881b      	ldrh	r3, [r3, #0]
     f30:	b29a      	uxth	r2, r3
     f32:	23fa      	movs	r3, #250	; 0xfa
     f34:	005b      	lsls	r3, r3, #1
     f36:	429a      	cmp	r2, r3
     f38:	d80a      	bhi.n	f50 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
     f3a:	4b7a      	ldr	r3, [pc, #488]	; (1124 <hif_send+0x364>)
     f3c:	0018      	movs	r0, r3
     f3e:	4b7a      	ldr	r3, [pc, #488]	; (1128 <hif_send+0x368>)
     f40:	4798      	blx	r3
     f42:	4b7a      	ldr	r3, [pc, #488]	; (112c <hif_send+0x36c>)
     f44:	0018      	movs	r0, r3
     f46:	4b7a      	ldr	r3, [pc, #488]	; (1130 <hif_send+0x370>)
     f48:	4798      	blx	r3
     f4a:	200d      	movs	r0, #13
     f4c:	4b79      	ldr	r3, [pc, #484]	; (1134 <hif_send+0x374>)
     f4e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
     f50:	2001      	movs	r0, #1
     f52:	4b79      	ldr	r3, [pc, #484]	; (1138 <hif_send+0x378>)
     f54:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
     f56:	697b      	ldr	r3, [r7, #20]
     f58:	2202      	movs	r2, #2
     f5a:	4013      	ands	r3, r2
     f5c:	d113      	bne.n	f86 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     f5e:	231f      	movs	r3, #31
     f60:	18fc      	adds	r4, r7, r3
     f62:	2310      	movs	r3, #16
     f64:	18fb      	adds	r3, r7, r3
     f66:	4a75      	ldr	r2, [pc, #468]	; (113c <hif_send+0x37c>)
     f68:	0019      	movs	r1, r3
     f6a:	0010      	movs	r0, r2
     f6c:	4b6c      	ldr	r3, [pc, #432]	; (1120 <hif_send+0x360>)
     f6e:	4798      	blx	r3
     f70:	0003      	movs	r3, r0
     f72:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
     f74:	231f      	movs	r3, #31
     f76:	18fb      	adds	r3, r7, r3
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	b25b      	sxtb	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d015      	beq.n	fac <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     f80:	2300      	movs	r3, #0
     f82:	613b      	str	r3, [r7, #16]
					goto ERR1;
     f84:	e0ba      	b.n	10fc <hif_send+0x33c>
		for(cnt = 0; cnt < 1000; cnt ++)
     f86:	230e      	movs	r3, #14
     f88:	18fb      	adds	r3, r7, r3
     f8a:	881b      	ldrh	r3, [r3, #0]
     f8c:	b29b      	uxth	r3, r3
     f8e:	3301      	adds	r3, #1
     f90:	b29a      	uxth	r2, r3
     f92:	230e      	movs	r3, #14
     f94:	18fb      	adds	r3, r7, r3
     f96:	801a      	strh	r2, [r3, #0]
     f98:	230e      	movs	r3, #14
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	881b      	ldrh	r3, [r3, #0]
     f9e:	b29b      	uxth	r3, r3
     fa0:	4a67      	ldr	r2, [pc, #412]	; (1140 <hif_send+0x380>)
     fa2:	4293      	cmp	r3, r2
     fa4:	d9a8      	bls.n	ef8 <hif_send+0x138>
     fa6:	e002      	b.n	fae <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
     fa8:	46c0      	nop			; (mov r8, r8)
     faa:	e000      	b.n	fae <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
     fac:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
     fae:	693b      	ldr	r3, [r7, #16]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d100      	bne.n	fb6 <hif_send+0x1f6>
     fb4:	e073      	b.n	109e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     fb6:	693b      	ldr	r3, [r7, #16]
     fb8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     fba:	2318      	movs	r3, #24
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	885b      	ldrh	r3, [r3, #2]
     fc0:	b29a      	uxth	r2, r3
     fc2:	2318      	movs	r3, #24
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	221f      	movs	r2, #31
     fcc:	18bc      	adds	r4, r7, r2
     fce:	2218      	movs	r2, #24
     fd0:	18b9      	adds	r1, r7, r2
     fd2:	2208      	movs	r2, #8
     fd4:	0018      	movs	r0, r3
     fd6:	4b5b      	ldr	r3, [pc, #364]	; (1144 <hif_send+0x384>)
     fd8:	4798      	blx	r3
     fda:	0003      	movs	r3, r0
     fdc:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
     fde:	231f      	movs	r3, #31
     fe0:	18fb      	adds	r3, r7, r3
     fe2:	781b      	ldrb	r3, [r3, #0]
     fe4:	b25b      	sxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	d000      	beq.n	fec <hif_send+0x22c>
     fea:	e082      	b.n	10f2 <hif_send+0x332>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     fec:	68bb      	ldr	r3, [r7, #8]
     fee:	3308      	adds	r3, #8
     ff0:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
     ff2:	683b      	ldr	r3, [r7, #0]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d015      	beq.n	1024 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     ff8:	68b8      	ldr	r0, [r7, #8]
     ffa:	1d3b      	adds	r3, r7, #4
     ffc:	881a      	ldrh	r2, [r3, #0]
     ffe:	231f      	movs	r3, #31
    1000:	18fc      	adds	r4, r7, r3
    1002:	683b      	ldr	r3, [r7, #0]
    1004:	0019      	movs	r1, r3
    1006:	4b4f      	ldr	r3, [pc, #316]	; (1144 <hif_send+0x384>)
    1008:	4798      	blx	r3
    100a:	0003      	movs	r3, r0
    100c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    100e:	231f      	movs	r3, #31
    1010:	18fb      	adds	r3, r7, r3
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	b25b      	sxtb	r3, r3
    1016:	2b00      	cmp	r3, #0
    1018:	d16d      	bne.n	10f6 <hif_send+0x336>
				u32CurrAddr += u16CtrlBufSize;
    101a:	1d3b      	adds	r3, r7, #4
    101c:	881a      	ldrh	r2, [r3, #0]
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	18d3      	adds	r3, r2, r3
    1022:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    1024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1026:	2b00      	cmp	r3, #0
    1028:	d021      	beq.n	106e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    102a:	2338      	movs	r3, #56	; 0x38
    102c:	18fb      	adds	r3, r7, r3
    102e:	881a      	ldrh	r2, [r3, #0]
    1030:	1d3b      	adds	r3, r7, #4
    1032:	881b      	ldrh	r3, [r3, #0]
    1034:	1ad3      	subs	r3, r2, r3
    1036:	001a      	movs	r2, r3
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	18d3      	adds	r3, r2, r3
    103c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    103e:	68b8      	ldr	r0, [r7, #8]
    1040:	2334      	movs	r3, #52	; 0x34
    1042:	18fb      	adds	r3, r7, r3
    1044:	881a      	ldrh	r2, [r3, #0]
    1046:	231f      	movs	r3, #31
    1048:	18fc      	adds	r4, r7, r3
    104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104c:	0019      	movs	r1, r3
    104e:	4b3d      	ldr	r3, [pc, #244]	; (1144 <hif_send+0x384>)
    1050:	4798      	blx	r3
    1052:	0003      	movs	r3, r0
    1054:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    1056:	231f      	movs	r3, #31
    1058:	18fb      	adds	r3, r7, r3
    105a:	781b      	ldrb	r3, [r3, #0]
    105c:	b25b      	sxtb	r3, r3
    105e:	2b00      	cmp	r3, #0
    1060:	d14b      	bne.n	10fa <hif_send+0x33a>
				u32CurrAddr += u16DataSize;
    1062:	2334      	movs	r3, #52	; 0x34
    1064:	18fb      	adds	r3, r7, r3
    1066:	881a      	ldrh	r2, [r3, #0]
    1068:	68bb      	ldr	r3, [r7, #8]
    106a:	18d3      	adds	r3, r2, r3
    106c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    106e:	693b      	ldr	r3, [r7, #16]
    1070:	009b      	lsls	r3, r3, #2
    1072:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    1074:	697b      	ldr	r3, [r7, #20]
    1076:	2202      	movs	r2, #2
    1078:	4313      	orrs	r3, r2
    107a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    107c:	697b      	ldr	r3, [r7, #20]
    107e:	221f      	movs	r2, #31
    1080:	18bc      	adds	r4, r7, r2
    1082:	4a31      	ldr	r2, [pc, #196]	; (1148 <hif_send+0x388>)
    1084:	0019      	movs	r1, r3
    1086:	0010      	movs	r0, r2
    1088:	4b23      	ldr	r3, [pc, #140]	; (1118 <hif_send+0x358>)
    108a:	4798      	blx	r3
    108c:	0003      	movs	r3, r0
    108e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1090:	231f      	movs	r3, #31
    1092:	18fb      	adds	r3, r7, r3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	b25b      	sxtb	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	d01b      	beq.n	10d4 <hif_send+0x314>
    109c:	e02e      	b.n	10fc <hif_send+0x33c>
		}
		else
		{
			ret = hif_chip_sleep();
    109e:	231f      	movs	r3, #31
    10a0:	18fc      	adds	r4, r7, r3
    10a2:	4b2a      	ldr	r3, [pc, #168]	; (114c <hif_send+0x38c>)
    10a4:	4798      	blx	r3
    10a6:	0003      	movs	r3, r0
    10a8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    10aa:	231f      	movs	r3, #31
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	22fd      	movs	r2, #253	; 0xfd
    10b0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    10b2:	e025      	b.n	1100 <hif_send+0x340>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    10b4:	2398      	movs	r3, #152	; 0x98
    10b6:	33ff      	adds	r3, #255	; 0xff
    10b8:	001a      	movs	r2, r3
    10ba:	4925      	ldr	r1, [pc, #148]	; (1150 <hif_send+0x390>)
    10bc:	4b25      	ldr	r3, [pc, #148]	; (1154 <hif_send+0x394>)
    10be:	0018      	movs	r0, r3
    10c0:	4b19      	ldr	r3, [pc, #100]	; (1128 <hif_send+0x368>)
    10c2:	4798      	blx	r3
    10c4:	4b24      	ldr	r3, [pc, #144]	; (1158 <hif_send+0x398>)
    10c6:	0018      	movs	r0, r3
    10c8:	4b19      	ldr	r3, [pc, #100]	; (1130 <hif_send+0x370>)
    10ca:	4798      	blx	r3
    10cc:	200d      	movs	r0, #13
    10ce:	4b19      	ldr	r3, [pc, #100]	; (1134 <hif_send+0x374>)
    10d0:	4798      	blx	r3
		goto ERR2;
    10d2:	e015      	b.n	1100 <hif_send+0x340>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    10d4:	231f      	movs	r3, #31
    10d6:	18fc      	adds	r4, r7, r3
    10d8:	4b1c      	ldr	r3, [pc, #112]	; (114c <hif_send+0x38c>)
    10da:	4798      	blx	r3
    10dc:	0003      	movs	r3, r0
    10de:	7023      	strb	r3, [r4, #0]
	return ret;
    10e0:	231f      	movs	r3, #31
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	781b      	ldrb	r3, [r3, #0]
    10e6:	b25b      	sxtb	r3, r3
    10e8:	e00e      	b.n	1108 <hif_send+0x348>
		if(M2M_SUCCESS != ret) goto ERR1;
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	e006      	b.n	10fc <hif_send+0x33c>
		if(M2M_SUCCESS != ret) goto ERR1;
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	e004      	b.n	10fc <hif_send+0x33c>
			if(M2M_SUCCESS != ret) goto ERR1;
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	e002      	b.n	10fc <hif_send+0x33c>
				if(M2M_SUCCESS != ret) goto ERR1;
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	e000      	b.n	10fc <hif_send+0x33c>
				if(M2M_SUCCESS != ret) goto ERR1;
    10fa:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    10fc:	4b17      	ldr	r3, [pc, #92]	; (115c <hif_send+0x39c>)
    10fe:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    1100:	231f      	movs	r3, #31
    1102:	18fb      	adds	r3, r7, r3
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	b25b      	sxtb	r3, r3
}
    1108:	0018      	movs	r0, r3
    110a:	46bd      	mov	sp, r7
    110c:	b009      	add	sp, #36	; 0x24
    110e:	bd90      	pop	{r4, r7, pc}
    1110:	00000c89 	.word	0x00000c89
    1114:	0000108c 	.word	0x0000108c
    1118:	000030b9 	.word	0x000030b9
    111c:	00001078 	.word	0x00001078
    1120:	00003095 	.word	0x00003095
    1124:	0001b478 	.word	0x0001b478
    1128:	0001a001 	.word	0x0001a001
    112c:	0001b484 	.word	0x0001b484
    1130:	0001a11d 	.word	0x0001a11d
    1134:	0001a035 	.word	0x0001a035
    1138:	00000321 	.word	0x00000321
    113c:	00150400 	.word	0x00150400
    1140:	000003e7 	.word	0x000003e7
    1144:	00003201 	.word	0x00003201
    1148:	0000106c 	.word	0x0000106c
    114c:	00000d21 	.word	0x00000d21
    1150:	0001b78c 	.word	0x0001b78c
    1154:	0001b494 	.word	0x0001b494
    1158:	0001b4a8 	.word	0x0001b4a8
    115c:	00000cf9 	.word	0x00000cf9

00001160 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1160:	b590      	push	{r4, r7, lr}
    1162:	b087      	sub	sp, #28
    1164:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    1166:	230f      	movs	r3, #15
    1168:	18fb      	adds	r3, r7, r3
    116a:	2200      	movs	r2, #0
    116c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    116e:	230f      	movs	r3, #15
    1170:	18fc      	adds	r4, r7, r3
    1172:	2308      	movs	r3, #8
    1174:	18fb      	adds	r3, r7, r3
    1176:	4ad8      	ldr	r2, [pc, #864]	; (14d8 <hif_isr+0x378>)
    1178:	0019      	movs	r1, r3
    117a:	0010      	movs	r0, r2
    117c:	4bd7      	ldr	r3, [pc, #860]	; (14dc <hif_isr+0x37c>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
    1182:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1184:	230f      	movs	r3, #15
    1186:	18fb      	adds	r3, r7, r3
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	b25b      	sxtb	r3, r3
    118c:	2b00      	cmp	r3, #0
    118e:	d000      	beq.n	1192 <hif_isr+0x32>
    1190:	e215      	b.n	15be <hif_isr+0x45e>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1192:	68bb      	ldr	r3, [r7, #8]
    1194:	2201      	movs	r2, #1
    1196:	4013      	ands	r3, r2
    1198:	d100      	bne.n	119c <hif_isr+0x3c>
    119a:	e1fc      	b.n	1596 <hif_isr+0x436>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    119c:	2000      	movs	r0, #0
    119e:	4bd0      	ldr	r3, [pc, #832]	; (14e0 <hif_isr+0x380>)
    11a0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	2201      	movs	r2, #1
    11a6:	4393      	bics	r3, r2
    11a8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    11aa:	68bb      	ldr	r3, [r7, #8]
    11ac:	220f      	movs	r2, #15
    11ae:	18bc      	adds	r4, r7, r2
    11b0:	4ac9      	ldr	r2, [pc, #804]	; (14d8 <hif_isr+0x378>)
    11b2:	0019      	movs	r1, r3
    11b4:	0010      	movs	r0, r2
    11b6:	4bcb      	ldr	r3, [pc, #812]	; (14e4 <hif_isr+0x384>)
    11b8:	4798      	blx	r3
    11ba:	0003      	movs	r3, r0
    11bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    11be:	230f      	movs	r3, #15
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	b25b      	sxtb	r3, r3
    11c6:	2b00      	cmp	r3, #0
    11c8:	d000      	beq.n	11cc <hif_isr+0x6c>
    11ca:	e206      	b.n	15da <hif_isr+0x47a>
			gstrHifCxt.u8HifRXDone = 1;
    11cc:	4bc6      	ldr	r3, [pc, #792]	; (14e8 <hif_isr+0x388>)
    11ce:	2201      	movs	r2, #1
    11d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    11d2:	68bb      	ldr	r3, [r7, #8]
    11d4:	089b      	lsrs	r3, r3, #2
    11d6:	b29a      	uxth	r2, r3
    11d8:	230c      	movs	r3, #12
    11da:	18fb      	adds	r3, r7, r3
    11dc:	0512      	lsls	r2, r2, #20
    11de:	0d12      	lsrs	r2, r2, #20
    11e0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    11e2:	230c      	movs	r3, #12
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	881b      	ldrh	r3, [r3, #0]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d100      	bne.n	11ee <hif_isr+0x8e>
    11ec:	e1c1      	b.n	1572 <hif_isr+0x412>
				uint32 address = 0;
    11ee:	2300      	movs	r3, #0
    11f0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    11f2:	230f      	movs	r3, #15
    11f4:	18fc      	adds	r4, r7, r3
    11f6:	003b      	movs	r3, r7
    11f8:	4abc      	ldr	r2, [pc, #752]	; (14ec <hif_isr+0x38c>)
    11fa:	0019      	movs	r1, r3
    11fc:	0010      	movs	r0, r2
    11fe:	4bb7      	ldr	r3, [pc, #732]	; (14dc <hif_isr+0x37c>)
    1200:	4798      	blx	r3
    1202:	0003      	movs	r3, r0
    1204:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1206:	230f      	movs	r3, #15
    1208:	18fb      	adds	r3, r7, r3
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	b25b      	sxtb	r3, r3
    120e:	2b00      	cmp	r3, #0
    1210:	d011      	beq.n	1236 <hif_isr+0xd6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1212:	23e4      	movs	r3, #228	; 0xe4
    1214:	005a      	lsls	r2, r3, #1
    1216:	49b6      	ldr	r1, [pc, #728]	; (14f0 <hif_isr+0x390>)
    1218:	4bb6      	ldr	r3, [pc, #728]	; (14f4 <hif_isr+0x394>)
    121a:	0018      	movs	r0, r3
    121c:	4bb6      	ldr	r3, [pc, #728]	; (14f8 <hif_isr+0x398>)
    121e:	4798      	blx	r3
    1220:	4bb6      	ldr	r3, [pc, #728]	; (14fc <hif_isr+0x39c>)
    1222:	0018      	movs	r0, r3
    1224:	4bb6      	ldr	r3, [pc, #728]	; (1500 <hif_isr+0x3a0>)
    1226:	4798      	blx	r3
    1228:	200d      	movs	r0, #13
    122a:	4bb6      	ldr	r3, [pc, #728]	; (1504 <hif_isr+0x3a4>)
    122c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    122e:	2001      	movs	r0, #1
    1230:	4bab      	ldr	r3, [pc, #684]	; (14e0 <hif_isr+0x380>)
    1232:	4798      	blx	r3
					goto ERR1;
    1234:	e1d2      	b.n	15dc <hif_isr+0x47c>
				}
				gstrHifCxt.u32RxAddr = address;
    1236:	683a      	ldr	r2, [r7, #0]
    1238:	4bab      	ldr	r3, [pc, #684]	; (14e8 <hif_isr+0x388>)
    123a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    123c:	230c      	movs	r3, #12
    123e:	18fb      	adds	r3, r7, r3
    1240:	881a      	ldrh	r2, [r3, #0]
    1242:	4ba9      	ldr	r3, [pc, #676]	; (14e8 <hif_isr+0x388>)
    1244:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1246:	683b      	ldr	r3, [r7, #0]
    1248:	220f      	movs	r2, #15
    124a:	18bc      	adds	r4, r7, r2
    124c:	1d39      	adds	r1, r7, #4
    124e:	2204      	movs	r2, #4
    1250:	0018      	movs	r0, r3
    1252:	4bad      	ldr	r3, [pc, #692]	; (1508 <hif_isr+0x3a8>)
    1254:	4798      	blx	r3
    1256:	0003      	movs	r3, r0
    1258:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    125a:	1d3b      	adds	r3, r7, #4
    125c:	885b      	ldrh	r3, [r3, #2]
    125e:	b29a      	uxth	r2, r3
    1260:	1d3b      	adds	r3, r7, #4
    1262:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    1264:	230f      	movs	r3, #15
    1266:	18fb      	adds	r3, r7, r3
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	b25b      	sxtb	r3, r3
    126c:	2b00      	cmp	r3, #0
    126e:	d011      	beq.n	1294 <hif_isr+0x134>
				{
					M2M_ERR("(hif) address bus fail\n");
    1270:	23e9      	movs	r3, #233	; 0xe9
    1272:	005a      	lsls	r2, r3, #1
    1274:	499e      	ldr	r1, [pc, #632]	; (14f0 <hif_isr+0x390>)
    1276:	4b9f      	ldr	r3, [pc, #636]	; (14f4 <hif_isr+0x394>)
    1278:	0018      	movs	r0, r3
    127a:	4b9f      	ldr	r3, [pc, #636]	; (14f8 <hif_isr+0x398>)
    127c:	4798      	blx	r3
    127e:	4ba3      	ldr	r3, [pc, #652]	; (150c <hif_isr+0x3ac>)
    1280:	0018      	movs	r0, r3
    1282:	4b9f      	ldr	r3, [pc, #636]	; (1500 <hif_isr+0x3a0>)
    1284:	4798      	blx	r3
    1286:	200d      	movs	r0, #13
    1288:	4b9e      	ldr	r3, [pc, #632]	; (1504 <hif_isr+0x3a4>)
    128a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    128c:	2001      	movs	r0, #1
    128e:	4b94      	ldr	r3, [pc, #592]	; (14e0 <hif_isr+0x380>)
    1290:	4798      	blx	r3
					goto ERR1;
    1292:	e1a3      	b.n	15dc <hif_isr+0x47c>
				}
				if(strHif.u16Length != size)
    1294:	1d3b      	adds	r3, r7, #4
    1296:	885b      	ldrh	r3, [r3, #2]
    1298:	b29b      	uxth	r3, r3
    129a:	220c      	movs	r2, #12
    129c:	18ba      	adds	r2, r7, r2
    129e:	8812      	ldrh	r2, [r2, #0]
    12a0:	429a      	cmp	r2, r3
    12a2:	d02e      	beq.n	1302 <hif_isr+0x1a2>
				{
					if((size - strHif.u16Length) > 4)
    12a4:	230c      	movs	r3, #12
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	881b      	ldrh	r3, [r3, #0]
    12aa:	1d3a      	adds	r2, r7, #4
    12ac:	8852      	ldrh	r2, [r2, #2]
    12ae:	b292      	uxth	r2, r2
    12b0:	1a9b      	subs	r3, r3, r2
    12b2:	2b04      	cmp	r3, #4
    12b4:	dd25      	ble.n	1302 <hif_isr+0x1a2>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    12b6:	23dc      	movs	r3, #220	; 0xdc
    12b8:	33ff      	adds	r3, #255	; 0xff
    12ba:	001a      	movs	r2, r3
    12bc:	498c      	ldr	r1, [pc, #560]	; (14f0 <hif_isr+0x390>)
    12be:	4b8d      	ldr	r3, [pc, #564]	; (14f4 <hif_isr+0x394>)
    12c0:	0018      	movs	r0, r3
    12c2:	4b8d      	ldr	r3, [pc, #564]	; (14f8 <hif_isr+0x398>)
    12c4:	4798      	blx	r3
    12c6:	230c      	movs	r3, #12
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	8819      	ldrh	r1, [r3, #0]
    12cc:	1d3b      	adds	r3, r7, #4
    12ce:	885b      	ldrh	r3, [r3, #2]
    12d0:	b29b      	uxth	r3, r3
    12d2:	001a      	movs	r2, r3
    12d4:	1d3b      	adds	r3, r7, #4
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b2db      	uxtb	r3, r3
    12da:	001c      	movs	r4, r3
    12dc:	1d3b      	adds	r3, r7, #4
    12de:	785b      	ldrb	r3, [r3, #1]
    12e0:	b2db      	uxtb	r3, r3
    12e2:	488b      	ldr	r0, [pc, #556]	; (1510 <hif_isr+0x3b0>)
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	0023      	movs	r3, r4
    12e8:	4c83      	ldr	r4, [pc, #524]	; (14f8 <hif_isr+0x398>)
    12ea:	47a0      	blx	r4
    12ec:	200d      	movs	r0, #13
    12ee:	4b85      	ldr	r3, [pc, #532]	; (1504 <hif_isr+0x3a4>)
    12f0:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    12f2:	2001      	movs	r0, #1
    12f4:	4b7a      	ldr	r3, [pc, #488]	; (14e0 <hif_isr+0x380>)
    12f6:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    12f8:	230f      	movs	r3, #15
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	22fa      	movs	r2, #250	; 0xfa
    12fe:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1300:	e16c      	b.n	15dc <hif_isr+0x47c>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1302:	1d3b      	adds	r3, r7, #4
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	b2db      	uxtb	r3, r3
    1308:	2b01      	cmp	r3, #1
    130a:	d121      	bne.n	1350 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    130c:	4b76      	ldr	r3, [pc, #472]	; (14e8 <hif_isr+0x388>)
    130e:	68db      	ldr	r3, [r3, #12]
    1310:	2b00      	cmp	r3, #0
    1312:	d00d      	beq.n	1330 <hif_isr+0x1d0>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1314:	4b74      	ldr	r3, [pc, #464]	; (14e8 <hif_isr+0x388>)
    1316:	68db      	ldr	r3, [r3, #12]
    1318:	1d3a      	adds	r2, r7, #4
    131a:	7852      	ldrb	r2, [r2, #1]
    131c:	b2d0      	uxtb	r0, r2
    131e:	1d3a      	adds	r2, r7, #4
    1320:	8852      	ldrh	r2, [r2, #2]
    1322:	b292      	uxth	r2, r2
    1324:	3a08      	subs	r2, #8
    1326:	b291      	uxth	r1, r2
    1328:	683a      	ldr	r2, [r7, #0]
    132a:	3208      	adds	r2, #8
    132c:	4798      	blx	r3
    132e:	e0ff      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    1330:	23e8      	movs	r3, #232	; 0xe8
    1332:	33ff      	adds	r3, #255	; 0xff
    1334:	001a      	movs	r2, r3
    1336:	496e      	ldr	r1, [pc, #440]	; (14f0 <hif_isr+0x390>)
    1338:	4b6e      	ldr	r3, [pc, #440]	; (14f4 <hif_isr+0x394>)
    133a:	0018      	movs	r0, r3
    133c:	4b6e      	ldr	r3, [pc, #440]	; (14f8 <hif_isr+0x398>)
    133e:	4798      	blx	r3
    1340:	4b74      	ldr	r3, [pc, #464]	; (1514 <hif_isr+0x3b4>)
    1342:	0018      	movs	r0, r3
    1344:	4b6e      	ldr	r3, [pc, #440]	; (1500 <hif_isr+0x3a0>)
    1346:	4798      	blx	r3
    1348:	200d      	movs	r0, #13
    134a:	4b6e      	ldr	r3, [pc, #440]	; (1504 <hif_isr+0x3a4>)
    134c:	4798      	blx	r3
    134e:	e0ef      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1350:	1d3b      	adds	r3, r7, #4
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	b2db      	uxtb	r3, r3
    1356:	2b02      	cmp	r3, #2
    1358:	d121      	bne.n	139e <hif_isr+0x23e>
				{
					if(gstrHifCxt.pfIpCb)
    135a:	4b63      	ldr	r3, [pc, #396]	; (14e8 <hif_isr+0x388>)
    135c:	691b      	ldr	r3, [r3, #16]
    135e:	2b00      	cmp	r3, #0
    1360:	d00d      	beq.n	137e <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1362:	4b61      	ldr	r3, [pc, #388]	; (14e8 <hif_isr+0x388>)
    1364:	691b      	ldr	r3, [r3, #16]
    1366:	1d3a      	adds	r2, r7, #4
    1368:	7852      	ldrb	r2, [r2, #1]
    136a:	b2d0      	uxtb	r0, r2
    136c:	1d3a      	adds	r2, r7, #4
    136e:	8852      	ldrh	r2, [r2, #2]
    1370:	b292      	uxth	r2, r2
    1372:	3a08      	subs	r2, #8
    1374:	b291      	uxth	r1, r2
    1376:	683a      	ldr	r2, [r7, #0]
    1378:	3208      	adds	r2, #8
    137a:	4798      	blx	r3
    137c:	e0d8      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    137e:	23f0      	movs	r3, #240	; 0xf0
    1380:	33ff      	adds	r3, #255	; 0xff
    1382:	001a      	movs	r2, r3
    1384:	495a      	ldr	r1, [pc, #360]	; (14f0 <hif_isr+0x390>)
    1386:	4b5b      	ldr	r3, [pc, #364]	; (14f4 <hif_isr+0x394>)
    1388:	0018      	movs	r0, r3
    138a:	4b5b      	ldr	r3, [pc, #364]	; (14f8 <hif_isr+0x398>)
    138c:	4798      	blx	r3
    138e:	4b62      	ldr	r3, [pc, #392]	; (1518 <hif_isr+0x3b8>)
    1390:	0018      	movs	r0, r3
    1392:	4b5b      	ldr	r3, [pc, #364]	; (1500 <hif_isr+0x3a0>)
    1394:	4798      	blx	r3
    1396:	200d      	movs	r0, #13
    1398:	4b5a      	ldr	r3, [pc, #360]	; (1504 <hif_isr+0x3a4>)
    139a:	4798      	blx	r3
    139c:	e0c8      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    139e:	1d3b      	adds	r3, r7, #4
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	2b04      	cmp	r3, #4
    13a6:	d121      	bne.n	13ec <hif_isr+0x28c>
				{
					if(gstrHifCxt.pfOtaCb)
    13a8:	4b4f      	ldr	r3, [pc, #316]	; (14e8 <hif_isr+0x388>)
    13aa:	695b      	ldr	r3, [r3, #20]
    13ac:	2b00      	cmp	r3, #0
    13ae:	d00d      	beq.n	13cc <hif_isr+0x26c>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13b0:	4b4d      	ldr	r3, [pc, #308]	; (14e8 <hif_isr+0x388>)
    13b2:	695b      	ldr	r3, [r3, #20]
    13b4:	1d3a      	adds	r2, r7, #4
    13b6:	7852      	ldrb	r2, [r2, #1]
    13b8:	b2d0      	uxtb	r0, r2
    13ba:	1d3a      	adds	r2, r7, #4
    13bc:	8852      	ldrh	r2, [r2, #2]
    13be:	b292      	uxth	r2, r2
    13c0:	3a08      	subs	r2, #8
    13c2:	b291      	uxth	r1, r2
    13c4:	683a      	ldr	r2, [r7, #0]
    13c6:	3208      	adds	r2, #8
    13c8:	4798      	blx	r3
    13ca:	e0b1      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    13cc:	23f8      	movs	r3, #248	; 0xf8
    13ce:	33ff      	adds	r3, #255	; 0xff
    13d0:	001a      	movs	r2, r3
    13d2:	4947      	ldr	r1, [pc, #284]	; (14f0 <hif_isr+0x390>)
    13d4:	4b47      	ldr	r3, [pc, #284]	; (14f4 <hif_isr+0x394>)
    13d6:	0018      	movs	r0, r3
    13d8:	4b47      	ldr	r3, [pc, #284]	; (14f8 <hif_isr+0x398>)
    13da:	4798      	blx	r3
    13dc:	4b4f      	ldr	r3, [pc, #316]	; (151c <hif_isr+0x3bc>)
    13de:	0018      	movs	r0, r3
    13e0:	4b47      	ldr	r3, [pc, #284]	; (1500 <hif_isr+0x3a0>)
    13e2:	4798      	blx	r3
    13e4:	200d      	movs	r0, #13
    13e6:	4b47      	ldr	r3, [pc, #284]	; (1504 <hif_isr+0x3a4>)
    13e8:	4798      	blx	r3
    13ea:	e0a1      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    13ec:	1d3b      	adds	r3, r7, #4
    13ee:	781b      	ldrb	r3, [r3, #0]
    13f0:	b2db      	uxtb	r3, r3
    13f2:	2b06      	cmp	r3, #6
    13f4:	d120      	bne.n	1438 <hif_isr+0x2d8>
				{
					if(gstrHifCxt.pfCryptoCb)
    13f6:	4b3c      	ldr	r3, [pc, #240]	; (14e8 <hif_isr+0x388>)
    13f8:	6a1b      	ldr	r3, [r3, #32]
    13fa:	2b00      	cmp	r3, #0
    13fc:	d00d      	beq.n	141a <hif_isr+0x2ba>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13fe:	4b3a      	ldr	r3, [pc, #232]	; (14e8 <hif_isr+0x388>)
    1400:	6a1b      	ldr	r3, [r3, #32]
    1402:	1d3a      	adds	r2, r7, #4
    1404:	7852      	ldrb	r2, [r2, #1]
    1406:	b2d0      	uxtb	r0, r2
    1408:	1d3a      	adds	r2, r7, #4
    140a:	8852      	ldrh	r2, [r2, #2]
    140c:	b292      	uxth	r2, r2
    140e:	3a08      	subs	r2, #8
    1410:	b291      	uxth	r1, r2
    1412:	683a      	ldr	r2, [r7, #0]
    1414:	3208      	adds	r2, #8
    1416:	4798      	blx	r3
    1418:	e08a      	b.n	1530 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    141a:	2380      	movs	r3, #128	; 0x80
    141c:	009a      	lsls	r2, r3, #2
    141e:	4934      	ldr	r1, [pc, #208]	; (14f0 <hif_isr+0x390>)
    1420:	4b34      	ldr	r3, [pc, #208]	; (14f4 <hif_isr+0x394>)
    1422:	0018      	movs	r0, r3
    1424:	4b34      	ldr	r3, [pc, #208]	; (14f8 <hif_isr+0x398>)
    1426:	4798      	blx	r3
    1428:	4b3d      	ldr	r3, [pc, #244]	; (1520 <hif_isr+0x3c0>)
    142a:	0018      	movs	r0, r3
    142c:	4b34      	ldr	r3, [pc, #208]	; (1500 <hif_isr+0x3a0>)
    142e:	4798      	blx	r3
    1430:	200d      	movs	r0, #13
    1432:	4b34      	ldr	r3, [pc, #208]	; (1504 <hif_isr+0x3a4>)
    1434:	4798      	blx	r3
    1436:	e07b      	b.n	1530 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1438:	1d3b      	adds	r3, r7, #4
    143a:	781b      	ldrb	r3, [r3, #0]
    143c:	b2db      	uxtb	r3, r3
    143e:	2b07      	cmp	r3, #7
    1440:	d11f      	bne.n	1482 <hif_isr+0x322>
				{
					if(gstrHifCxt.pfSigmaCb)
    1442:	4b29      	ldr	r3, [pc, #164]	; (14e8 <hif_isr+0x388>)
    1444:	699b      	ldr	r3, [r3, #24]
    1446:	2b00      	cmp	r3, #0
    1448:	d00d      	beq.n	1466 <hif_isr+0x306>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    144a:	4b27      	ldr	r3, [pc, #156]	; (14e8 <hif_isr+0x388>)
    144c:	699b      	ldr	r3, [r3, #24]
    144e:	1d3a      	adds	r2, r7, #4
    1450:	7852      	ldrb	r2, [r2, #1]
    1452:	b2d0      	uxtb	r0, r2
    1454:	1d3a      	adds	r2, r7, #4
    1456:	8852      	ldrh	r2, [r2, #2]
    1458:	b292      	uxth	r2, r2
    145a:	3a08      	subs	r2, #8
    145c:	b291      	uxth	r1, r2
    145e:	683a      	ldr	r2, [r7, #0]
    1460:	3208      	adds	r2, #8
    1462:	4798      	blx	r3
    1464:	e064      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1466:	4a2f      	ldr	r2, [pc, #188]	; (1524 <hif_isr+0x3c4>)
    1468:	4921      	ldr	r1, [pc, #132]	; (14f0 <hif_isr+0x390>)
    146a:	4b22      	ldr	r3, [pc, #136]	; (14f4 <hif_isr+0x394>)
    146c:	0018      	movs	r0, r3
    146e:	4b22      	ldr	r3, [pc, #136]	; (14f8 <hif_isr+0x398>)
    1470:	4798      	blx	r3
    1472:	4b2d      	ldr	r3, [pc, #180]	; (1528 <hif_isr+0x3c8>)
    1474:	0018      	movs	r0, r3
    1476:	4b22      	ldr	r3, [pc, #136]	; (1500 <hif_isr+0x3a0>)
    1478:	4798      	blx	r3
    147a:	200d      	movs	r0, #13
    147c:	4b21      	ldr	r3, [pc, #132]	; (1504 <hif_isr+0x3a4>)
    147e:	4798      	blx	r3
    1480:	e056      	b.n	1530 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1482:	1d3b      	adds	r3, r7, #4
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	b2db      	uxtb	r3, r3
    1488:	2b05      	cmp	r3, #5
    148a:	d111      	bne.n	14b0 <hif_isr+0x350>
				{
				    if(gstrHifCxt.pfSslCb)
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <hif_isr+0x388>)
    148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1490:	2b00      	cmp	r3, #0
    1492:	d04d      	beq.n	1530 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1494:	4b14      	ldr	r3, [pc, #80]	; (14e8 <hif_isr+0x388>)
    1496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1498:	1d3a      	adds	r2, r7, #4
    149a:	7852      	ldrb	r2, [r2, #1]
    149c:	b2d0      	uxtb	r0, r2
    149e:	1d3a      	adds	r2, r7, #4
    14a0:	8852      	ldrh	r2, [r2, #2]
    14a2:	b292      	uxth	r2, r2
    14a4:	3a08      	subs	r2, #8
    14a6:	b291      	uxth	r1, r2
    14a8:	683a      	ldr	r2, [r7, #0]
    14aa:	3208      	adds	r2, #8
    14ac:	4798      	blx	r3
    14ae:	e03f      	b.n	1530 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    14b0:	2384      	movs	r3, #132	; 0x84
    14b2:	009a      	lsls	r2, r3, #2
    14b4:	490e      	ldr	r1, [pc, #56]	; (14f0 <hif_isr+0x390>)
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <hif_isr+0x394>)
    14b8:	0018      	movs	r0, r3
    14ba:	4b0f      	ldr	r3, [pc, #60]	; (14f8 <hif_isr+0x398>)
    14bc:	4798      	blx	r3
    14be:	4b1b      	ldr	r3, [pc, #108]	; (152c <hif_isr+0x3cc>)
    14c0:	0018      	movs	r0, r3
    14c2:	4b0f      	ldr	r3, [pc, #60]	; (1500 <hif_isr+0x3a0>)
    14c4:	4798      	blx	r3
    14c6:	200d      	movs	r0, #13
    14c8:	4b0e      	ldr	r3, [pc, #56]	; (1504 <hif_isr+0x3a4>)
    14ca:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    14cc:	230f      	movs	r3, #15
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	22fa      	movs	r2, #250	; 0xfa
    14d2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    14d4:	e082      	b.n	15dc <hif_isr+0x47c>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001070 	.word	0x00001070
    14dc:	00003095 	.word	0x00003095
    14e0:	000003d1 	.word	0x000003d1
    14e4:	000030b9 	.word	0x000030b9
    14e8:	20000aa0 	.word	0x20000aa0
    14ec:	00001084 	.word	0x00001084
    14f0:	0001b798 	.word	0x0001b798
    14f4:	0001b494 	.word	0x0001b494
    14f8:	0001a001 	.word	0x0001a001
    14fc:	0001b4c4 	.word	0x0001b4c4
    1500:	0001a11d 	.word	0x0001a11d
    1504:	0001a035 	.word	0x0001a035
    1508:	00003109 	.word	0x00003109
    150c:	0001b4e8 	.word	0x0001b4e8
    1510:	0001b500 	.word	0x0001b500
    1514:	0001b540 	.word	0x0001b540
    1518:	0001b560 	.word	0x0001b560
    151c:	0001b584 	.word	0x0001b584
    1520:	0001b5a4 	.word	0x0001b5a4
    1524:	00000207 	.word	0x00000207
    1528:	0001b5c8 	.word	0x0001b5c8
    152c:	0001b5ec 	.word	0x0001b5ec
				}
				if(gstrHifCxt.u8HifRXDone)
    1530:	4b2e      	ldr	r3, [pc, #184]	; (15ec <hif_isr+0x48c>)
    1532:	789b      	ldrb	r3, [r3, #2]
    1534:	b2db      	uxtb	r3, r3
    1536:	2b00      	cmp	r3, #0
    1538:	d050      	beq.n	15dc <hif_isr+0x47c>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    153a:	4a2d      	ldr	r2, [pc, #180]	; (15f0 <hif_isr+0x490>)
    153c:	492d      	ldr	r1, [pc, #180]	; (15f4 <hif_isr+0x494>)
    153e:	4b2e      	ldr	r3, [pc, #184]	; (15f8 <hif_isr+0x498>)
    1540:	0018      	movs	r0, r3
    1542:	4b2e      	ldr	r3, [pc, #184]	; (15fc <hif_isr+0x49c>)
    1544:	4798      	blx	r3
    1546:	1d3b      	adds	r3, r7, #4
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	b2db      	uxtb	r3, r3
    154c:	0019      	movs	r1, r3
    154e:	1d3b      	adds	r3, r7, #4
    1550:	785b      	ldrb	r3, [r3, #1]
    1552:	b2db      	uxtb	r3, r3
    1554:	001a      	movs	r2, r3
    1556:	4b2a      	ldr	r3, [pc, #168]	; (1600 <hif_isr+0x4a0>)
    1558:	0018      	movs	r0, r3
    155a:	4b28      	ldr	r3, [pc, #160]	; (15fc <hif_isr+0x49c>)
    155c:	4798      	blx	r3
    155e:	200d      	movs	r0, #13
    1560:	4b28      	ldr	r3, [pc, #160]	; (1604 <hif_isr+0x4a4>)
    1562:	4798      	blx	r3
					ret = hif_set_rx_done();
    1564:	230f      	movs	r3, #15
    1566:	18fc      	adds	r4, r7, r3
    1568:	4b27      	ldr	r3, [pc, #156]	; (1608 <hif_isr+0x4a8>)
    156a:	4798      	blx	r3
    156c:	0003      	movs	r3, r0
    156e:	7023      	strb	r3, [r4, #0]
    1570:	e034      	b.n	15dc <hif_isr+0x47c>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1572:	4a26      	ldr	r2, [pc, #152]	; (160c <hif_isr+0x4ac>)
    1574:	491f      	ldr	r1, [pc, #124]	; (15f4 <hif_isr+0x494>)
    1576:	4b20      	ldr	r3, [pc, #128]	; (15f8 <hif_isr+0x498>)
    1578:	0018      	movs	r0, r3
    157a:	4b20      	ldr	r3, [pc, #128]	; (15fc <hif_isr+0x49c>)
    157c:	4798      	blx	r3
    157e:	4b24      	ldr	r3, [pc, #144]	; (1610 <hif_isr+0x4b0>)
    1580:	0018      	movs	r0, r3
    1582:	4b24      	ldr	r3, [pc, #144]	; (1614 <hif_isr+0x4b4>)
    1584:	4798      	blx	r3
    1586:	200d      	movs	r0, #13
    1588:	4b1e      	ldr	r3, [pc, #120]	; (1604 <hif_isr+0x4a4>)
    158a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    158c:	230f      	movs	r3, #15
    158e:	18fb      	adds	r3, r7, r3
    1590:	22fe      	movs	r2, #254	; 0xfe
    1592:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1594:	e022      	b.n	15dc <hif_isr+0x47c>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1596:	4a20      	ldr	r2, [pc, #128]	; (1618 <hif_isr+0x4b8>)
    1598:	4916      	ldr	r1, [pc, #88]	; (15f4 <hif_isr+0x494>)
    159a:	4b17      	ldr	r3, [pc, #92]	; (15f8 <hif_isr+0x498>)
    159c:	0018      	movs	r0, r3
    159e:	4b17      	ldr	r3, [pc, #92]	; (15fc <hif_isr+0x49c>)
    15a0:	4798      	blx	r3
    15a2:	68ba      	ldr	r2, [r7, #8]
    15a4:	4b1d      	ldr	r3, [pc, #116]	; (161c <hif_isr+0x4bc>)
    15a6:	0011      	movs	r1, r2
    15a8:	0018      	movs	r0, r3
    15aa:	4b14      	ldr	r3, [pc, #80]	; (15fc <hif_isr+0x49c>)
    15ac:	4798      	blx	r3
    15ae:	200d      	movs	r0, #13
    15b0:	4b14      	ldr	r3, [pc, #80]	; (1604 <hif_isr+0x4a4>)
    15b2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    15b4:	230f      	movs	r3, #15
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	22f4      	movs	r2, #244	; 0xf4
    15ba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    15bc:	e00e      	b.n	15dc <hif_isr+0x47c>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    15be:	4a18      	ldr	r2, [pc, #96]	; (1620 <hif_isr+0x4c0>)
    15c0:	490c      	ldr	r1, [pc, #48]	; (15f4 <hif_isr+0x494>)
    15c2:	4b0d      	ldr	r3, [pc, #52]	; (15f8 <hif_isr+0x498>)
    15c4:	0018      	movs	r0, r3
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <hif_isr+0x49c>)
    15c8:	4798      	blx	r3
    15ca:	4b16      	ldr	r3, [pc, #88]	; (1624 <hif_isr+0x4c4>)
    15cc:	0018      	movs	r0, r3
    15ce:	4b11      	ldr	r3, [pc, #68]	; (1614 <hif_isr+0x4b4>)
    15d0:	4798      	blx	r3
    15d2:	200d      	movs	r0, #13
    15d4:	4b0b      	ldr	r3, [pc, #44]	; (1604 <hif_isr+0x4a4>)
    15d6:	4798      	blx	r3
		goto ERR1;
    15d8:	e000      	b.n	15dc <hif_isr+0x47c>
			if(ret != M2M_SUCCESS)goto ERR1;
    15da:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    15dc:	230f      	movs	r3, #15
    15de:	18fb      	adds	r3, r7, r3
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	b25b      	sxtb	r3, r3
}
    15e4:	0018      	movs	r0, r3
    15e6:	46bd      	mov	sp, r7
    15e8:	b005      	add	sp, #20
    15ea:	bd90      	pop	{r4, r7, pc}
    15ec:	20000aa0 	.word	0x20000aa0
    15f0:	00000216 	.word	0x00000216
    15f4:	0001b798 	.word	0x0001b798
    15f8:	0001b494 	.word	0x0001b494
    15fc:	0001a001 	.word	0x0001a001
    1600:	0001b604 	.word	0x0001b604
    1604:	0001a035 	.word	0x0001a035
    1608:	00000bf9 	.word	0x00000bf9
    160c:	0000021d 	.word	0x0000021d
    1610:	0001b630 	.word	0x0001b630
    1614:	0001a11d 	.word	0x0001a11d
    1618:	00000225 	.word	0x00000225
    161c:	0001b644 	.word	0x0001b644
    1620:	0000022e 	.word	0x0000022e
    1624:	0001b660 	.word	0x0001b660

00001628 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1628:	b590      	push	{r4, r7, lr}
    162a:	b083      	sub	sp, #12
    162c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    162e:	1dfb      	adds	r3, r7, #7
    1630:	2200      	movs	r2, #0
    1632:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    1634:	e023      	b.n	167e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1636:	4b18      	ldr	r3, [pc, #96]	; (1698 <hif_handle_isr+0x70>)
    1638:	78db      	ldrb	r3, [r3, #3]
    163a:	b2db      	uxtb	r3, r3
    163c:	3b01      	subs	r3, #1
    163e:	b2da      	uxtb	r2, r3
    1640:	4b15      	ldr	r3, [pc, #84]	; (1698 <hif_handle_isr+0x70>)
    1642:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1644:	1dfc      	adds	r4, r7, #7
    1646:	4b15      	ldr	r3, [pc, #84]	; (169c <hif_handle_isr+0x74>)
    1648:	4798      	blx	r3
    164a:	0003      	movs	r3, r0
    164c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    164e:	1dfb      	adds	r3, r7, #7
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	b25b      	sxtb	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	d100      	bne.n	165a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1658:	e011      	b.n	167e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    165a:	4a11      	ldr	r2, [pc, #68]	; (16a0 <hif_handle_isr+0x78>)
    165c:	4911      	ldr	r1, [pc, #68]	; (16a4 <hif_handle_isr+0x7c>)
    165e:	4b12      	ldr	r3, [pc, #72]	; (16a8 <hif_handle_isr+0x80>)
    1660:	0018      	movs	r0, r3
    1662:	4b12      	ldr	r3, [pc, #72]	; (16ac <hif_handle_isr+0x84>)
    1664:	4798      	blx	r3
    1666:	1dfb      	adds	r3, r7, #7
    1668:	2200      	movs	r2, #0
    166a:	569a      	ldrsb	r2, [r3, r2]
    166c:	4b10      	ldr	r3, [pc, #64]	; (16b0 <hif_handle_isr+0x88>)
    166e:	0011      	movs	r1, r2
    1670:	0018      	movs	r0, r3
    1672:	4b0e      	ldr	r3, [pc, #56]	; (16ac <hif_handle_isr+0x84>)
    1674:	4798      	blx	r3
    1676:	200d      	movs	r0, #13
    1678:	4b0e      	ldr	r3, [pc, #56]	; (16b4 <hif_handle_isr+0x8c>)
    167a:	4798      	blx	r3
			ret = hif_isr();
    167c:	e7e2      	b.n	1644 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    167e:	4b06      	ldr	r3, [pc, #24]	; (1698 <hif_handle_isr+0x70>)
    1680:	78db      	ldrb	r3, [r3, #3]
    1682:	b2db      	uxtb	r3, r3
    1684:	2b00      	cmp	r3, #0
    1686:	d1d6      	bne.n	1636 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1688:	1dfb      	adds	r3, r7, #7
    168a:	781b      	ldrb	r3, [r3, #0]
    168c:	b25b      	sxtb	r3, r3
}
    168e:	0018      	movs	r0, r3
    1690:	46bd      	mov	sp, r7
    1692:	b003      	add	sp, #12
    1694:	bd90      	pop	{r4, r7, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	20000aa0 	.word	0x20000aa0
    169c:	00001161 	.word	0x00001161
    16a0:	0000024b 	.word	0x0000024b
    16a4:	0001b7a0 	.word	0x0001b7a0
    16a8:	0001b494 	.word	0x0001b494
    16ac:	0001a001 	.word	0x0001a001
    16b0:	0001b684 	.word	0x0001b684
    16b4:	0001a035 	.word	0x0001a035

000016b8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    16b8:	b590      	push	{r4, r7, lr}
    16ba:	b087      	sub	sp, #28
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	0019      	movs	r1, r3
    16c4:	1dbb      	adds	r3, r7, #6
    16c6:	801a      	strh	r2, [r3, #0]
    16c8:	1d7b      	adds	r3, r7, #5
    16ca:	1c0a      	adds	r2, r1, #0
    16cc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    16ce:	2317      	movs	r3, #23
    16d0:	18fb      	adds	r3, r7, r3
    16d2:	2200      	movs	r2, #0
    16d4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    16d6:	68fb      	ldr	r3, [r7, #12]
    16d8:	2b00      	cmp	r3, #0
    16da:	d006      	beq.n	16ea <hif_receive+0x32>
    16dc:	68bb      	ldr	r3, [r7, #8]
    16de:	2b00      	cmp	r3, #0
    16e0:	d003      	beq.n	16ea <hif_receive+0x32>
    16e2:	1dbb      	adds	r3, r7, #6
    16e4:	881b      	ldrh	r3, [r3, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d11d      	bne.n	1726 <hif_receive+0x6e>
	{
		if(isDone)
    16ea:	1d7b      	adds	r3, r7, #5
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d006      	beq.n	1700 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    16f2:	2317      	movs	r3, #23
    16f4:	18fc      	adds	r4, r7, r3
    16f6:	4b43      	ldr	r3, [pc, #268]	; (1804 <hif_receive+0x14c>)
    16f8:	4798      	blx	r3
    16fa:	0003      	movs	r3, r0
    16fc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    16fe:	e079      	b.n	17f4 <hif_receive+0x13c>
			ret = M2M_ERR_FAIL;
    1700:	2317      	movs	r3, #23
    1702:	18fb      	adds	r3, r7, r3
    1704:	22f4      	movs	r2, #244	; 0xf4
    1706:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1708:	239b      	movs	r3, #155	; 0x9b
    170a:	009a      	lsls	r2, r3, #2
    170c:	493e      	ldr	r1, [pc, #248]	; (1808 <hif_receive+0x150>)
    170e:	4b3f      	ldr	r3, [pc, #252]	; (180c <hif_receive+0x154>)
    1710:	0018      	movs	r0, r3
    1712:	4b3f      	ldr	r3, [pc, #252]	; (1810 <hif_receive+0x158>)
    1714:	4798      	blx	r3
    1716:	4b3f      	ldr	r3, [pc, #252]	; (1814 <hif_receive+0x15c>)
    1718:	0018      	movs	r0, r3
    171a:	4b3f      	ldr	r3, [pc, #252]	; (1818 <hif_receive+0x160>)
    171c:	4798      	blx	r3
    171e:	200d      	movs	r0, #13
    1720:	4b3e      	ldr	r3, [pc, #248]	; (181c <hif_receive+0x164>)
    1722:	4798      	blx	r3
		goto ERR1;
    1724:	e066      	b.n	17f4 <hif_receive+0x13c>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    1726:	1dbb      	adds	r3, r7, #6
    1728:	881a      	ldrh	r2, [r3, #0]
    172a:	4b3d      	ldr	r3, [pc, #244]	; (1820 <hif_receive+0x168>)
    172c:	689b      	ldr	r3, [r3, #8]
    172e:	429a      	cmp	r2, r3
    1730:	d916      	bls.n	1760 <hif_receive+0xa8>
	{
		ret = M2M_ERR_FAIL;
    1732:	2317      	movs	r3, #23
    1734:	18fb      	adds	r3, r7, r3
    1736:	22f4      	movs	r2, #244	; 0xf4
    1738:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    173a:	239d      	movs	r3, #157	; 0x9d
    173c:	009a      	lsls	r2, r3, #2
    173e:	4932      	ldr	r1, [pc, #200]	; (1808 <hif_receive+0x150>)
    1740:	4b32      	ldr	r3, [pc, #200]	; (180c <hif_receive+0x154>)
    1742:	0018      	movs	r0, r3
    1744:	4b32      	ldr	r3, [pc, #200]	; (1810 <hif_receive+0x158>)
    1746:	4798      	blx	r3
    1748:	1dbb      	adds	r3, r7, #6
    174a:	8819      	ldrh	r1, [r3, #0]
    174c:	4b34      	ldr	r3, [pc, #208]	; (1820 <hif_receive+0x168>)
    174e:	689a      	ldr	r2, [r3, #8]
    1750:	4b34      	ldr	r3, [pc, #208]	; (1824 <hif_receive+0x16c>)
    1752:	0018      	movs	r0, r3
    1754:	4b2e      	ldr	r3, [pc, #184]	; (1810 <hif_receive+0x158>)
    1756:	4798      	blx	r3
    1758:	200d      	movs	r0, #13
    175a:	4b30      	ldr	r3, [pc, #192]	; (181c <hif_receive+0x164>)
    175c:	4798      	blx	r3
		goto ERR1;
    175e:	e049      	b.n	17f4 <hif_receive+0x13c>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1760:	4b2f      	ldr	r3, [pc, #188]	; (1820 <hif_receive+0x168>)
    1762:	685a      	ldr	r2, [r3, #4]
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	429a      	cmp	r2, r3
    1768:	d80a      	bhi.n	1780 <hif_receive+0xc8>
    176a:	1dbb      	adds	r3, r7, #6
    176c:	881a      	ldrh	r2, [r3, #0]
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	18d2      	adds	r2, r2, r3
    1772:	4b2b      	ldr	r3, [pc, #172]	; (1820 <hif_receive+0x168>)
    1774:	6859      	ldr	r1, [r3, #4]
    1776:	4b2a      	ldr	r3, [pc, #168]	; (1820 <hif_receive+0x168>)
    1778:	689b      	ldr	r3, [r3, #8]
    177a:	18cb      	adds	r3, r1, r3
    177c:	429a      	cmp	r2, r3
    177e:	d911      	bls.n	17a4 <hif_receive+0xec>
	{
		ret = M2M_ERR_FAIL;
    1780:	2317      	movs	r3, #23
    1782:	18fb      	adds	r3, r7, r3
    1784:	22f4      	movs	r2, #244	; 0xf4
    1786:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1788:	4a27      	ldr	r2, [pc, #156]	; (1828 <hif_receive+0x170>)
    178a:	491f      	ldr	r1, [pc, #124]	; (1808 <hif_receive+0x150>)
    178c:	4b1f      	ldr	r3, [pc, #124]	; (180c <hif_receive+0x154>)
    178e:	0018      	movs	r0, r3
    1790:	4b1f      	ldr	r3, [pc, #124]	; (1810 <hif_receive+0x158>)
    1792:	4798      	blx	r3
    1794:	4b25      	ldr	r3, [pc, #148]	; (182c <hif_receive+0x174>)
    1796:	0018      	movs	r0, r3
    1798:	4b1f      	ldr	r3, [pc, #124]	; (1818 <hif_receive+0x160>)
    179a:	4798      	blx	r3
    179c:	200d      	movs	r0, #13
    179e:	4b1f      	ldr	r3, [pc, #124]	; (181c <hif_receive+0x164>)
    17a0:	4798      	blx	r3
		goto ERR1;
    17a2:	e027      	b.n	17f4 <hif_receive+0x13c>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    17a4:	1dbb      	adds	r3, r7, #6
    17a6:	881a      	ldrh	r2, [r3, #0]
    17a8:	2317      	movs	r3, #23
    17aa:	18fc      	adds	r4, r7, r3
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	0018      	movs	r0, r3
    17b2:	4b1f      	ldr	r3, [pc, #124]	; (1830 <hif_receive+0x178>)
    17b4:	4798      	blx	r3
    17b6:	0003      	movs	r3, r0
    17b8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    17ba:	2317      	movs	r3, #23
    17bc:	18fb      	adds	r3, r7, r3
    17be:	781b      	ldrb	r3, [r3, #0]
    17c0:	b25b      	sxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	d115      	bne.n	17f2 <hif_receive+0x13a>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    17c6:	4b16      	ldr	r3, [pc, #88]	; (1820 <hif_receive+0x168>)
    17c8:	685a      	ldr	r2, [r3, #4]
    17ca:	4b15      	ldr	r3, [pc, #84]	; (1820 <hif_receive+0x168>)
    17cc:	689b      	ldr	r3, [r3, #8]
    17ce:	18d2      	adds	r2, r2, r3
    17d0:	1dbb      	adds	r3, r7, #6
    17d2:	8819      	ldrh	r1, [r3, #0]
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	18cb      	adds	r3, r1, r3
    17d8:	429a      	cmp	r2, r3
    17da:	d003      	beq.n	17e4 <hif_receive+0x12c>
    17dc:	1d7b      	adds	r3, r7, #5
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d007      	beq.n	17f4 <hif_receive+0x13c>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    17e4:	2317      	movs	r3, #23
    17e6:	18fc      	adds	r4, r7, r3
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <hif_receive+0x14c>)
    17ea:	4798      	blx	r3
    17ec:	0003      	movs	r3, r0
    17ee:	7023      	strb	r3, [r4, #0]
    17f0:	e000      	b.n	17f4 <hif_receive+0x13c>
	if(ret != M2M_SUCCESS)goto ERR1;
    17f2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    17f4:	2317      	movs	r3, #23
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	b25b      	sxtb	r3, r3
}
    17fc:	0018      	movs	r0, r3
    17fe:	46bd      	mov	sp, r7
    1800:	b007      	add	sp, #28
    1802:	bd90      	pop	{r4, r7, pc}
    1804:	00000bf9 	.word	0x00000bf9
    1808:	0001b7b0 	.word	0x0001b7b0
    180c:	0001b494 	.word	0x0001b494
    1810:	0001a001 	.word	0x0001a001
    1814:	0001b6b4 	.word	0x0001b6b4
    1818:	0001a11d 	.word	0x0001a11d
    181c:	0001a035 	.word	0x0001a035
    1820:	20000aa0 	.word	0x20000aa0
    1824:	0001b6d4 	.word	0x0001b6d4
    1828:	0000027a 	.word	0x0000027a
    182c:	0001b71c 	.word	0x0001b71c
    1830:	00003109 	.word	0x00003109

00001834 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1834:	b580      	push	{r7, lr}
    1836:	b084      	sub	sp, #16
    1838:	af00      	add	r7, sp, #0
    183a:	0002      	movs	r2, r0
    183c:	6039      	str	r1, [r7, #0]
    183e:	1dfb      	adds	r3, r7, #7
    1840:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1842:	230f      	movs	r3, #15
    1844:	18fb      	adds	r3, r7, r3
    1846:	2200      	movs	r2, #0
    1848:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    184a:	1dfb      	adds	r3, r7, #7
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	2b07      	cmp	r3, #7
    1850:	d820      	bhi.n	1894 <hif_register_cb+0x60>
    1852:	009a      	lsls	r2, r3, #2
    1854:	4b1e      	ldr	r3, [pc, #120]	; (18d0 <hif_register_cb+0x9c>)
    1856:	18d3      	adds	r3, r2, r3
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    185c:	4b1d      	ldr	r3, [pc, #116]	; (18d4 <hif_register_cb+0xa0>)
    185e:	683a      	ldr	r2, [r7, #0]
    1860:	611a      	str	r2, [r3, #16]
			break;
    1862:	e02c      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1864:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <hif_register_cb+0xa0>)
    1866:	683a      	ldr	r2, [r7, #0]
    1868:	60da      	str	r2, [r3, #12]
			break;
    186a:	e028      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    186c:	4b19      	ldr	r3, [pc, #100]	; (18d4 <hif_register_cb+0xa0>)
    186e:	683a      	ldr	r2, [r7, #0]
    1870:	615a      	str	r2, [r3, #20]
			break;
    1872:	e024      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1874:	4b17      	ldr	r3, [pc, #92]	; (18d4 <hif_register_cb+0xa0>)
    1876:	683a      	ldr	r2, [r7, #0]
    1878:	61da      	str	r2, [r3, #28]
			break;
    187a:	e020      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    187c:	4b15      	ldr	r3, [pc, #84]	; (18d4 <hif_register_cb+0xa0>)
    187e:	683a      	ldr	r2, [r7, #0]
    1880:	621a      	str	r2, [r3, #32]
			break;
    1882:	e01c      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1884:	4b13      	ldr	r3, [pc, #76]	; (18d4 <hif_register_cb+0xa0>)
    1886:	683a      	ldr	r2, [r7, #0]
    1888:	619a      	str	r2, [r3, #24]
			break;
    188a:	e018      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    188c:	4b11      	ldr	r3, [pc, #68]	; (18d4 <hif_register_cb+0xa0>)
    188e:	683a      	ldr	r2, [r7, #0]
    1890:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1892:	e014      	b.n	18be <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1894:	4a10      	ldr	r2, [pc, #64]	; (18d8 <hif_register_cb+0xa4>)
    1896:	4911      	ldr	r1, [pc, #68]	; (18dc <hif_register_cb+0xa8>)
    1898:	4b11      	ldr	r3, [pc, #68]	; (18e0 <hif_register_cb+0xac>)
    189a:	0018      	movs	r0, r3
    189c:	4b11      	ldr	r3, [pc, #68]	; (18e4 <hif_register_cb+0xb0>)
    189e:	4798      	blx	r3
    18a0:	1dfb      	adds	r3, r7, #7
    18a2:	781a      	ldrb	r2, [r3, #0]
    18a4:	4b10      	ldr	r3, [pc, #64]	; (18e8 <hif_register_cb+0xb4>)
    18a6:	0011      	movs	r1, r2
    18a8:	0018      	movs	r0, r3
    18aa:	4b0e      	ldr	r3, [pc, #56]	; (18e4 <hif_register_cb+0xb0>)
    18ac:	4798      	blx	r3
    18ae:	200d      	movs	r0, #13
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <hif_register_cb+0xb8>)
    18b2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    18b4:	230f      	movs	r3, #15
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	22f4      	movs	r2, #244	; 0xf4
    18ba:	701a      	strb	r2, [r3, #0]
			break;
    18bc:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    18be:	230f      	movs	r3, #15
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	b25b      	sxtb	r3, r3
}
    18c6:	0018      	movs	r0, r3
    18c8:	46bd      	mov	sp, r7
    18ca:	b004      	add	sp, #16
    18cc:	bd80      	pop	{r7, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	0001b76c 	.word	0x0001b76c
    18d4:	20000aa0 	.word	0x20000aa0
    18d8:	000002b2 	.word	0x000002b2
    18dc:	0001b7bc 	.word	0x0001b7bc
    18e0:	0001b494 	.word	0x0001b494
    18e4:	0001a001 	.word	0x0001a001
    18e8:	0001b760 	.word	0x0001b760
    18ec:	0001a035 	.word	0x0001a035

000018f0 <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    18f0:	b5b0      	push	{r4, r5, r7, lr}
    18f2:	b0a0      	sub	sp, #128	; 0x80
    18f4:	af00      	add	r7, sp, #0
    18f6:	603a      	str	r2, [r7, #0]
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	1c02      	adds	r2, r0, #0
    18fc:	701a      	strb	r2, [r3, #0]
    18fe:	1d3b      	adds	r3, r7, #4
    1900:	1c0a      	adds	r2, r1, #0
    1902:	801a      	strh	r2, [r3, #0]
	sint8 s8tmp = M2M_SUCCESS;
    1904:	237f      	movs	r3, #127	; 0x7f
    1906:	18fb      	adds	r3, r7, r3
    1908:	2200      	movs	r2, #0
    190a:	701a      	strb	r2, [r3, #0]
	switch(u8OpCode)
    190c:	1dfb      	adds	r3, r7, #7
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2b01      	cmp	r3, #1
    1912:	d002      	beq.n	191a <m2m_ssl_cb+0x2a>
    1914:	2b06      	cmp	r3, #6
    1916:	d022      	beq.n	195e <m2m_ssl_cb+0x6e>
    1918:	e041      	b.n	199e <m2m_ssl_cb+0xae>
	{
		case M2M_SSL_REQ_ECC:
		{
			tstrEccReqInfo strEccREQ;
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
    191a:	237f      	movs	r3, #127	; 0x7f
    191c:	18fc      	adds	r4, r7, r3
    191e:	2308      	movs	r3, #8
    1920:	18f9      	adds	r1, r7, r3
    1922:	6838      	ldr	r0, [r7, #0]
    1924:	2300      	movs	r3, #0
    1926:	2270      	movs	r2, #112	; 0x70
    1928:	4d28      	ldr	r5, [pc, #160]	; (19cc <m2m_ssl_cb+0xdc>)
    192a:	47a8      	blx	r5
    192c:	0003      	movs	r3, r0
    192e:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    1930:	237f      	movs	r3, #127	; 0x7f
    1932:	18fb      	adds	r3, r7, r3
    1934:	781b      	ldrb	r3, [r3, #0]
    1936:	b25b      	sxtb	r3, r3
    1938:	2b00      	cmp	r3, #0
    193a:	d12d      	bne.n	1998 <m2m_ssl_cb+0xa8>
			{
				if (gpfAppSSLCb)
    193c:	4b24      	ldr	r3, [pc, #144]	; (19d0 <m2m_ssl_cb+0xe0>)
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	2b00      	cmp	r3, #0
    1942:	d029      	beq.n	1998 <m2m_ssl_cb+0xa8>
				{
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	3370      	adds	r3, #112	; 0x70
    1948:	001a      	movs	r2, r3
    194a:	4b22      	ldr	r3, [pc, #136]	; (19d4 <m2m_ssl_cb+0xe4>)
    194c:	601a      	str	r2, [r3, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
    194e:	4b20      	ldr	r3, [pc, #128]	; (19d0 <m2m_ssl_cb+0xe0>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	2208      	movs	r2, #8
    1954:	18ba      	adds	r2, r7, r2
    1956:	0011      	movs	r1, r2
    1958:	2001      	movs	r0, #1
    195a:	4798      	blx	r3
				}
			}
		}
		break;
    195c:	e01c      	b.n	1998 <m2m_ssl_cb+0xa8>
		case M2M_SSL_RESP_SET_CS_LIST:
		{
			tstrSslSetActiveCsList strCsList;
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
    195e:	237f      	movs	r3, #127	; 0x7f
    1960:	18fc      	adds	r4, r7, r3
    1962:	2378      	movs	r3, #120	; 0x78
    1964:	18f9      	adds	r1, r7, r3
    1966:	6838      	ldr	r0, [r7, #0]
    1968:	2300      	movs	r3, #0
    196a:	2204      	movs	r2, #4
    196c:	4d17      	ldr	r5, [pc, #92]	; (19cc <m2m_ssl_cb+0xdc>)
    196e:	47a8      	blx	r5
    1970:	0003      	movs	r3, r0
    1972:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    1974:	237f      	movs	r3, #127	; 0x7f
    1976:	18fb      	adds	r3, r7, r3
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	b25b      	sxtb	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d10d      	bne.n	199c <m2m_ssl_cb+0xac>
			{
				if (gpfAppSSLCb)
    1980:	4b13      	ldr	r3, [pc, #76]	; (19d0 <m2m_ssl_cb+0xe0>)
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	2b00      	cmp	r3, #0
    1986:	d009      	beq.n	199c <m2m_ssl_cb+0xac>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
    1988:	4b11      	ldr	r3, [pc, #68]	; (19d0 <m2m_ssl_cb+0xe0>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2278      	movs	r2, #120	; 0x78
    198e:	18ba      	adds	r2, r7, r2
    1990:	0011      	movs	r1, r2
    1992:	2006      	movs	r0, #6
    1994:	4798      	blx	r3
			}
		}
		break;
    1996:	e001      	b.n	199c <m2m_ssl_cb+0xac>
		break;
    1998:	46c0      	nop			; (mov r8, r8)
    199a:	e000      	b.n	199e <m2m_ssl_cb+0xae>
		break;
    199c:	46c0      	nop			; (mov r8, r8)
	}
	if(s8tmp != M2M_SUCCESS)
    199e:	237f      	movs	r3, #127	; 0x7f
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	b25b      	sxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	d00c      	beq.n	19c4 <m2m_ssl_cb+0xd4>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
    19aa:	490b      	ldr	r1, [pc, #44]	; (19d8 <m2m_ssl_cb+0xe8>)
    19ac:	4b0b      	ldr	r3, [pc, #44]	; (19dc <m2m_ssl_cb+0xec>)
    19ae:	226b      	movs	r2, #107	; 0x6b
    19b0:	0018      	movs	r0, r3
    19b2:	4b0b      	ldr	r3, [pc, #44]	; (19e0 <m2m_ssl_cb+0xf0>)
    19b4:	4798      	blx	r3
    19b6:	4b0b      	ldr	r3, [pc, #44]	; (19e4 <m2m_ssl_cb+0xf4>)
    19b8:	0018      	movs	r0, r3
    19ba:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <m2m_ssl_cb+0xf8>)
    19bc:	4798      	blx	r3
    19be:	200d      	movs	r0, #13
    19c0:	4b0a      	ldr	r3, [pc, #40]	; (19ec <m2m_ssl_cb+0xfc>)
    19c2:	4798      	blx	r3
	}
}
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	b020      	add	sp, #128	; 0x80
    19ca:	bdb0      	pop	{r4, r5, r7, pc}
    19cc:	000016b9 	.word	0x000016b9
    19d0:	200005b8 	.word	0x200005b8
    19d4:	200005bc 	.word	0x200005bc
    19d8:	0001b82c 	.word	0x0001b82c
    19dc:	0001b7cc 	.word	0x0001b7cc
    19e0:	0001a001 	.word	0x0001a001
    19e4:	0001b7e0 	.word	0x0001b7e0
    19e8:	0001a11d 	.word	0x0001a11d
    19ec:	0001a035 	.word	0x0001a035

000019f0 <m2m_ssl_handshake_rsp>:
	@param [in]	u16RspDataSz
				Response data size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_handshake_rsp(tstrEccReqInfo* strECCResp, uint8* pu8RspDataBuff, uint16 u16RspDataSz)
{
    19f0:	b5b0      	push	{r4, r5, r7, lr}
    19f2:	b08a      	sub	sp, #40	; 0x28
    19f4:	af04      	add	r7, sp, #16
    19f6:	60f8      	str	r0, [r7, #12]
    19f8:	60b9      	str	r1, [r7, #8]
    19fa:	1dbb      	adds	r3, r7, #6
    19fc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    19fe:	2317      	movs	r3, #23
    1a00:	18fb      	adds	r3, r7, r3
    1a02:	2200      	movs	r2, #0
    1a04:	701a      	strb	r2, [r3, #0]
	
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, (M2M_SSL_RESP_ECC | M2M_REQ_DATA_PKT), (uint8*)strECCResp, sizeof(tstrEccReqInfo), pu8RspDataBuff, u16RspDataSz, sizeof(tstrEccReqInfo));
    1a06:	2317      	movs	r3, #23
    1a08:	18fc      	adds	r4, r7, r3
    1a0a:	68fa      	ldr	r2, [r7, #12]
    1a0c:	2370      	movs	r3, #112	; 0x70
    1a0e:	9302      	str	r3, [sp, #8]
    1a10:	1dbb      	adds	r3, r7, #6
    1a12:	881b      	ldrh	r3, [r3, #0]
    1a14:	9301      	str	r3, [sp, #4]
    1a16:	68bb      	ldr	r3, [r7, #8]
    1a18:	9300      	str	r3, [sp, #0]
    1a1a:	2370      	movs	r3, #112	; 0x70
    1a1c:	2182      	movs	r1, #130	; 0x82
    1a1e:	2005      	movs	r0, #5
    1a20:	4d05      	ldr	r5, [pc, #20]	; (1a38 <m2m_ssl_handshake_rsp+0x48>)
    1a22:	47a8      	blx	r5
    1a24:	0003      	movs	r3, r0
    1a26:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    1a28:	2317      	movs	r3, #23
    1a2a:	18fb      	adds	r3, r7, r3
    1a2c:	781b      	ldrb	r3, [r3, #0]
    1a2e:	b25b      	sxtb	r3, r3
}
    1a30:	0018      	movs	r0, r3
    1a32:	46bd      	mov	sp, r7
    1a34:	b006      	add	sp, #24
    1a36:	bdb0      	pop	{r4, r5, r7, pc}
    1a38:	00000dc1 	.word	0x00000dc1

00001a3c <m2m_ssl_retrieve_cert>:
	@param [in]	pu8Key
				Pointer to the certificate Key.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_cert(uint16* pu16CurveType, uint8* pu8Hash, uint8* pu8Sig, tstrECPoint* pu8Key)
{
    1a3c:	b590      	push	{r4, r7, lr}
    1a3e:	b087      	sub	sp, #28
    1a40:	af00      	add	r7, sp, #0
    1a42:	60f8      	str	r0, [r7, #12]
    1a44:	60b9      	str	r1, [r7, #8]
    1a46:	607a      	str	r2, [r7, #4]
    1a48:	603b      	str	r3, [r7, #0]
	uint8	bSetRxDone	= 1;
    1a4a:	2317      	movs	r3, #23
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	2201      	movs	r2, #1
    1a50:	701a      	strb	r2, [r3, #0]
	uint16	u16HashSz, u16SigSz, u16KeySz;
	sint8	s8Ret = M2M_SUCCESS;
    1a52:	2316      	movs	r3, #22
    1a54:	18fb      	adds	r3, r7, r3
    1a56:	2200      	movs	r2, #0
    1a58:	701a      	strb	r2, [r3, #0]

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
    1a5a:	4b77      	ldr	r3, [pc, #476]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d102      	bne.n	1a68 <m2m_ssl_retrieve_cert+0x2c>
    1a62:	230c      	movs	r3, #12
    1a64:	425b      	negs	r3, r3
    1a66:	e0e3      	b.n	1c30 <m2m_ssl_retrieve_cert+0x1f4>
	
	if(hif_receive(gu32HIFAddr, (uint8*)pu16CurveType, 2, 0) != M2M_SUCCESS) goto __ERR;
    1a68:	4b73      	ldr	r3, [pc, #460]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a6a:	6818      	ldr	r0, [r3, #0]
    1a6c:	68f9      	ldr	r1, [r7, #12]
    1a6e:	2300      	movs	r3, #0
    1a70:	2202      	movs	r2, #2
    1a72:	4c72      	ldr	r4, [pc, #456]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1a74:	47a0      	blx	r4
    1a76:	1e03      	subs	r3, r0, #0
    1a78:	d000      	beq.n	1a7c <m2m_ssl_retrieve_cert+0x40>
    1a7a:	e0b9      	b.n	1bf0 <m2m_ssl_retrieve_cert+0x1b4>
	gu32HIFAddr += 2;
    1a7c:	4b6e      	ldr	r3, [pc, #440]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	1c9a      	adds	r2, r3, #2
    1a82:	4b6d      	ldr	r3, [pc, #436]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a84:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16KeySz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1a86:	4b6c      	ldr	r3, [pc, #432]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a88:	6818      	ldr	r0, [r3, #0]
    1a8a:	2310      	movs	r3, #16
    1a8c:	18f9      	adds	r1, r7, r3
    1a8e:	2300      	movs	r3, #0
    1a90:	2202      	movs	r2, #2
    1a92:	4c6a      	ldr	r4, [pc, #424]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1a94:	47a0      	blx	r4
    1a96:	1e03      	subs	r3, r0, #0
    1a98:	d000      	beq.n	1a9c <m2m_ssl_retrieve_cert+0x60>
    1a9a:	e0ab      	b.n	1bf4 <m2m_ssl_retrieve_cert+0x1b8>
	gu32HIFAddr += 2;
    1a9c:	4b66      	ldr	r3, [pc, #408]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	1c9a      	adds	r2, r3, #2
    1aa2:	4b65      	ldr	r3, [pc, #404]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1aa4:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16HashSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1aa6:	4b64      	ldr	r3, [pc, #400]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1aa8:	6818      	ldr	r0, [r3, #0]
    1aaa:	2314      	movs	r3, #20
    1aac:	18f9      	adds	r1, r7, r3
    1aae:	2300      	movs	r3, #0
    1ab0:	2202      	movs	r2, #2
    1ab2:	4c62      	ldr	r4, [pc, #392]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ab4:	47a0      	blx	r4
    1ab6:	1e03      	subs	r3, r0, #0
    1ab8:	d000      	beq.n	1abc <m2m_ssl_retrieve_cert+0x80>
    1aba:	e09d      	b.n	1bf8 <m2m_ssl_retrieve_cert+0x1bc>
	gu32HIFAddr += 2;
    1abc:	4b5e      	ldr	r3, [pc, #376]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	1c9a      	adds	r2, r3, #2
    1ac2:	4b5d      	ldr	r3, [pc, #372]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ac4:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16SigSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1ac6:	4b5c      	ldr	r3, [pc, #368]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ac8:	6818      	ldr	r0, [r3, #0]
    1aca:	2312      	movs	r3, #18
    1acc:	18f9      	adds	r1, r7, r3
    1ace:	2300      	movs	r3, #0
    1ad0:	2202      	movs	r2, #2
    1ad2:	4c5a      	ldr	r4, [pc, #360]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ad4:	47a0      	blx	r4
    1ad6:	1e03      	subs	r3, r0, #0
    1ad8:	d000      	beq.n	1adc <m2m_ssl_retrieve_cert+0xa0>
    1ada:	e08f      	b.n	1bfc <m2m_ssl_retrieve_cert+0x1c0>
	gu32HIFAddr += 2;
    1adc:	4b56      	ldr	r3, [pc, #344]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	1c9a      	adds	r2, r3, #2
    1ae2:	4b55      	ldr	r3, [pc, #340]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ae4:	601a      	str	r2, [r3, #0]

	(*pu16CurveType)= _htons((*pu16CurveType));
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	881b      	ldrh	r3, [r3, #0]
    1aea:	021b      	lsls	r3, r3, #8
    1aec:	b21a      	sxth	r2, r3
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	881b      	ldrh	r3, [r3, #0]
    1af2:	0a1b      	lsrs	r3, r3, #8
    1af4:	b29b      	uxth	r3, r3
    1af6:	b21b      	sxth	r3, r3
    1af8:	4313      	orrs	r3, r2
    1afa:	b21b      	sxth	r3, r3
    1afc:	b29a      	uxth	r2, r3
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	801a      	strh	r2, [r3, #0]
	pu8Key->u16Size	= _htons(u16KeySz);
    1b02:	2310      	movs	r3, #16
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	881b      	ldrh	r3, [r3, #0]
    1b08:	021b      	lsls	r3, r3, #8
    1b0a:	b21a      	sxth	r2, r3
    1b0c:	2310      	movs	r3, #16
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	881b      	ldrh	r3, [r3, #0]
    1b12:	0a1b      	lsrs	r3, r3, #8
    1b14:	b29b      	uxth	r3, r3
    1b16:	b21b      	sxth	r3, r3
    1b18:	4313      	orrs	r3, r2
    1b1a:	b21b      	sxth	r3, r3
    1b1c:	b299      	uxth	r1, r3
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	2240      	movs	r2, #64	; 0x40
    1b22:	5299      	strh	r1, [r3, r2]
	u16HashSz		= _htons(u16HashSz);
    1b24:	2314      	movs	r3, #20
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	881b      	ldrh	r3, [r3, #0]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	b21a      	sxth	r2, r3
    1b2e:	2314      	movs	r3, #20
    1b30:	18fb      	adds	r3, r7, r3
    1b32:	881b      	ldrh	r3, [r3, #0]
    1b34:	0a1b      	lsrs	r3, r3, #8
    1b36:	b29b      	uxth	r3, r3
    1b38:	b21b      	sxth	r3, r3
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b21b      	sxth	r3, r3
    1b3e:	b29a      	uxth	r2, r3
    1b40:	2314      	movs	r3, #20
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	801a      	strh	r2, [r3, #0]
	u16SigSz		= _htons(u16SigSz);
    1b46:	2312      	movs	r3, #18
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	021b      	lsls	r3, r3, #8
    1b4e:	b21a      	sxth	r2, r3
    1b50:	2312      	movs	r3, #18
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	881b      	ldrh	r3, [r3, #0]
    1b56:	0a1b      	lsrs	r3, r3, #8
    1b58:	b29b      	uxth	r3, r3
    1b5a:	b21b      	sxth	r3, r3
    1b5c:	4313      	orrs	r3, r2
    1b5e:	b21b      	sxth	r3, r3
    1b60:	b29a      	uxth	r2, r3
    1b62:	2312      	movs	r3, #18
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	801a      	strh	r2, [r3, #0]
	
	if(hif_receive(gu32HIFAddr, pu8Key->X, pu8Key->u16Size * 2, 0) != M2M_SUCCESS) goto __ERR;
    1b68:	4b33      	ldr	r3, [pc, #204]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b6a:	6818      	ldr	r0, [r3, #0]
    1b6c:	6839      	ldr	r1, [r7, #0]
    1b6e:	683b      	ldr	r3, [r7, #0]
    1b70:	2240      	movs	r2, #64	; 0x40
    1b72:	5a9b      	ldrh	r3, [r3, r2]
    1b74:	18db      	adds	r3, r3, r3
    1b76:	b29a      	uxth	r2, r3
    1b78:	2300      	movs	r3, #0
    1b7a:	4c30      	ldr	r4, [pc, #192]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1b7c:	47a0      	blx	r4
    1b7e:	1e03      	subs	r3, r0, #0
    1b80:	d13e      	bne.n	1c00 <m2m_ssl_retrieve_cert+0x1c4>
	gu32HIFAddr += (pu8Key->u16Size * 2);
    1b82:	683b      	ldr	r3, [r7, #0]
    1b84:	2240      	movs	r2, #64	; 0x40
    1b86:	5a9b      	ldrh	r3, [r3, r2]
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	001a      	movs	r2, r3
    1b8c:	4b2a      	ldr	r3, [pc, #168]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	18d2      	adds	r2, r2, r3
    1b92:	4b29      	ldr	r3, [pc, #164]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b94:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1b96:	4b28      	ldr	r3, [pc, #160]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b98:	6818      	ldr	r0, [r3, #0]
    1b9a:	2314      	movs	r3, #20
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	881a      	ldrh	r2, [r3, #0]
    1ba0:	68b9      	ldr	r1, [r7, #8]
    1ba2:	2300      	movs	r3, #0
    1ba4:	4c25      	ldr	r4, [pc, #148]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ba6:	47a0      	blx	r4
    1ba8:	1e03      	subs	r3, r0, #0
    1baa:	d12b      	bne.n	1c04 <m2m_ssl_retrieve_cert+0x1c8>
	gu32HIFAddr += u16HashSz;
    1bac:	2314      	movs	r3, #20
    1bae:	18fb      	adds	r3, r7, r3
    1bb0:	881b      	ldrh	r3, [r3, #0]
    1bb2:	001a      	movs	r2, r3
    1bb4:	4b20      	ldr	r3, [pc, #128]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	18d2      	adds	r2, r2, r3
    1bba:	4b1f      	ldr	r3, [pc, #124]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bbc:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, pu8Sig, u16SigSz, 0) != M2M_SUCCESS) goto __ERR;
    1bbe:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bc0:	6818      	ldr	r0, [r3, #0]
    1bc2:	2312      	movs	r3, #18
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	881a      	ldrh	r2, [r3, #0]
    1bc8:	6879      	ldr	r1, [r7, #4]
    1bca:	2300      	movs	r3, #0
    1bcc:	4c1b      	ldr	r4, [pc, #108]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1bce:	47a0      	blx	r4
    1bd0:	1e03      	subs	r3, r0, #0
    1bd2:	d119      	bne.n	1c08 <m2m_ssl_retrieve_cert+0x1cc>
	gu32HIFAddr += u16SigSz;
    1bd4:	2312      	movs	r3, #18
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	001a      	movs	r2, r3
    1bdc:	4b16      	ldr	r3, [pc, #88]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bde:	681b      	ldr	r3, [r3, #0]
    1be0:	18d2      	adds	r2, r2, r3
    1be2:	4b15      	ldr	r3, [pc, #84]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1be4:	601a      	str	r2, [r3, #0]
	
	bSetRxDone = 0;
    1be6:	2317      	movs	r3, #23
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	2200      	movs	r2, #0
    1bec:	701a      	strb	r2, [r3, #0]
    1bee:	e00c      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)pu16CurveType, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	e00a      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16KeySz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	e008      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16HashSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	e006      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16SigSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	e004      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Key->X, pu8Key->u16Size * 2, 0) != M2M_SUCCESS) goto __ERR;
    1c00:	46c0      	nop			; (mov r8, r8)
    1c02:	e002      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c04:	46c0      	nop			; (mov r8, r8)
    1c06:	e000      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Sig, u16SigSz, 0) != M2M_SUCCESS) goto __ERR;
    1c08:	46c0      	nop			; (mov r8, r8)

__ERR:
	if(bSetRxDone)
    1c0a:	2317      	movs	r3, #23
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	781b      	ldrb	r3, [r3, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d009      	beq.n	1c28 <m2m_ssl_retrieve_cert+0x1ec>
	{
		s8Ret = M2M_ERR_FAIL;
    1c14:	2316      	movs	r3, #22
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	22f4      	movs	r2, #244	; 0xf4
    1c1a:	701a      	strb	r2, [r3, #0]
		hif_receive(0, NULL, 0, 1);
    1c1c:	2301      	movs	r3, #1
    1c1e:	2200      	movs	r2, #0
    1c20:	2100      	movs	r1, #0
    1c22:	2000      	movs	r0, #0
    1c24:	4c05      	ldr	r4, [pc, #20]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1c26:	47a0      	blx	r4
	}
	return s8Ret;
    1c28:	2316      	movs	r3, #22
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	b25b      	sxtb	r3, r3
}
    1c30:	0018      	movs	r0, r3
    1c32:	46bd      	mov	sp, r7
    1c34:	b007      	add	sp, #28
    1c36:	bd90      	pop	{r4, r7, pc}
    1c38:	200005bc 	.word	0x200005bc
    1c3c:	000016b9 	.word	0x000016b9

00001c40 <m2m_ssl_retrieve_hash>:
	@param [in]	u16HashSz
				Hash size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_hash(uint8* pu8Hash, uint16 u16HashSz)
{
    1c40:	b590      	push	{r4, r7, lr}
    1c42:	b085      	sub	sp, #20
    1c44:	af00      	add	r7, sp, #0
    1c46:	6078      	str	r0, [r7, #4]
    1c48:	000a      	movs	r2, r1
    1c4a:	1cbb      	adds	r3, r7, #2
    1c4c:	801a      	strh	r2, [r3, #0]
	uint8	bSetRxDone	= 1;
    1c4e:	230f      	movs	r3, #15
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	2201      	movs	r2, #1
    1c54:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = M2M_SUCCESS;
    1c56:	230e      	movs	r3, #14
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	2200      	movs	r2, #0
    1c5c:	701a      	strb	r2, [r3, #0]

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
    1c5e:	4b17      	ldr	r3, [pc, #92]	; (1cbc <m2m_ssl_retrieve_hash+0x7c>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d102      	bne.n	1c6c <m2m_ssl_retrieve_hash+0x2c>
    1c66:	230c      	movs	r3, #12
    1c68:	425b      	negs	r3, r3
    1c6a:	e022      	b.n	1cb2 <m2m_ssl_retrieve_hash+0x72>

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c6c:	4b13      	ldr	r3, [pc, #76]	; (1cbc <m2m_ssl_retrieve_hash+0x7c>)
    1c6e:	6818      	ldr	r0, [r3, #0]
    1c70:	1cbb      	adds	r3, r7, #2
    1c72:	881a      	ldrh	r2, [r3, #0]
    1c74:	6879      	ldr	r1, [r7, #4]
    1c76:	2300      	movs	r3, #0
    1c78:	4c11      	ldr	r4, [pc, #68]	; (1cc0 <m2m_ssl_retrieve_hash+0x80>)
    1c7a:	47a0      	blx	r4
    1c7c:	1e03      	subs	r3, r0, #0
    1c7e:	d104      	bne.n	1c8a <m2m_ssl_retrieve_hash+0x4a>
	
	bSetRxDone = 0;
    1c80:	230f      	movs	r3, #15
    1c82:	18fb      	adds	r3, r7, r3
    1c84:	2200      	movs	r2, #0
    1c86:	701a      	strb	r2, [r3, #0]
    1c88:	e000      	b.n	1c8c <m2m_ssl_retrieve_hash+0x4c>
	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c8a:	46c0      	nop			; (mov r8, r8)

__ERR:
	if(bSetRxDone)
    1c8c:	230f      	movs	r3, #15
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d009      	beq.n	1caa <m2m_ssl_retrieve_hash+0x6a>
	{
		s8Ret = M2M_ERR_FAIL;
    1c96:	230e      	movs	r3, #14
    1c98:	18fb      	adds	r3, r7, r3
    1c9a:	22f4      	movs	r2, #244	; 0xf4
    1c9c:	701a      	strb	r2, [r3, #0]
		hif_receive(0, NULL, 0, 1);
    1c9e:	2301      	movs	r3, #1
    1ca0:	2200      	movs	r2, #0
    1ca2:	2100      	movs	r1, #0
    1ca4:	2000      	movs	r0, #0
    1ca6:	4c06      	ldr	r4, [pc, #24]	; (1cc0 <m2m_ssl_retrieve_hash+0x80>)
    1ca8:	47a0      	blx	r4
	}
	return s8Ret;
    1caa:	230e      	movs	r3, #14
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	b25b      	sxtb	r3, r3
}
    1cb2:	0018      	movs	r0, r3
    1cb4:	46bd      	mov	sp, r7
    1cb6:	b005      	add	sp, #20
    1cb8:	bd90      	pop	{r4, r7, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	200005bc 	.word	0x200005bc
    1cc0:	000016b9 	.word	0x000016b9

00001cc4 <m2m_ssl_ecc_process_done>:
/*!
	@fn	\	m2m_ssl_ecc_process_done(void)
	@brief	Stops receiving from the HIF
*/
NMI_API void m2m_ssl_ecc_process_done(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0
	gu32HIFAddr = 0;
    1cc8:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <m2m_ssl_ecc_process_done+0x10>)
    1cca:	2200      	movs	r2, #0
    1ccc:	601a      	str	r2, [r3, #0]
}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	46bd      	mov	sp, r7
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	200005bc 	.word	0x200005bc

00001cd8 <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    1cd8:	b5b0      	push	{r4, r5, r7, lr}
    1cda:	b088      	sub	sp, #32
    1cdc:	af04      	add	r7, sp, #16
    1cde:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    1ce0:	230f      	movs	r3, #15
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	2200      	movs	r2, #0
    1ce6:	701a      	strb	r2, [r3, #0]
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	60bb      	str	r3, [r7, #8]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    1cec:	230f      	movs	r3, #15
    1cee:	18fc      	adds	r4, r7, r3
    1cf0:	2308      	movs	r3, #8
    1cf2:	18fa      	adds	r2, r7, r3
    1cf4:	2300      	movs	r3, #0
    1cf6:	9302      	str	r3, [sp, #8]
    1cf8:	2300      	movs	r3, #0
    1cfa:	9301      	str	r3, [sp, #4]
    1cfc:	2300      	movs	r3, #0
    1cfe:	9300      	str	r3, [sp, #0]
    1d00:	2304      	movs	r3, #4
    1d02:	2105      	movs	r1, #5
    1d04:	2005      	movs	r0, #5
    1d06:	4d06      	ldr	r5, [pc, #24]	; (1d20 <m2m_ssl_set_active_ciphersuites+0x48>)
    1d08:	47a8      	blx	r5
    1d0a:	0003      	movs	r3, r0
    1d0c:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    1d0e:	230f      	movs	r3, #15
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	b25b      	sxtb	r3, r3
}
    1d16:	0018      	movs	r0, r3
    1d18:	46bd      	mov	sp, r7
    1d1a:	b004      	add	sp, #16
    1d1c:	bdb0      	pop	{r4, r5, r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00000dc1 	.word	0x00000dc1

00001d24 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
    1d24:	b590      	push	{r4, r7, lr}
    1d26:	b085      	sub	sp, #20
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    1d2c:	230f      	movs	r3, #15
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	2200      	movs	r2, #0
    1d32:	701a      	strb	r2, [r3, #0]

	gpfAppSSLCb = pfAppSSLCb;
    1d34:	4b18      	ldr	r3, [pc, #96]	; (1d98 <m2m_ssl_init+0x74>)
    1d36:	687a      	ldr	r2, [r7, #4]
    1d38:	601a      	str	r2, [r3, #0]
	gu32HIFAddr = 0;
    1d3a:	4b18      	ldr	r3, [pc, #96]	; (1d9c <m2m_ssl_init+0x78>)
    1d3c:	2200      	movs	r2, #0
    1d3e:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
    1d40:	230f      	movs	r3, #15
    1d42:	18fc      	adds	r4, r7, r3
    1d44:	4b16      	ldr	r3, [pc, #88]	; (1da0 <m2m_ssl_init+0x7c>)
    1d46:	0019      	movs	r1, r3
    1d48:	2005      	movs	r0, #5
    1d4a:	4b16      	ldr	r3, [pc, #88]	; (1da4 <m2m_ssl_init+0x80>)
    1d4c:	4798      	blx	r3
    1d4e:	0003      	movs	r3, r0
    1d50:	7023      	strb	r3, [r4, #0]
	if (s8Ret != M2M_SUCCESS)
    1d52:	230f      	movs	r3, #15
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	b25b      	sxtb	r3, r3
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d013      	beq.n	1d86 <m2m_ssl_init+0x62>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
    1d5e:	2330      	movs	r3, #48	; 0x30
    1d60:	33ff      	adds	r3, #255	; 0xff
    1d62:	001a      	movs	r2, r3
    1d64:	4910      	ldr	r1, [pc, #64]	; (1da8 <m2m_ssl_init+0x84>)
    1d66:	4b11      	ldr	r3, [pc, #68]	; (1dac <m2m_ssl_init+0x88>)
    1d68:	0018      	movs	r0, r3
    1d6a:	4b11      	ldr	r3, [pc, #68]	; (1db0 <m2m_ssl_init+0x8c>)
    1d6c:	4798      	blx	r3
    1d6e:	230f      	movs	r3, #15
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	2200      	movs	r2, #0
    1d74:	569a      	ldrsb	r2, [r3, r2]
    1d76:	4b0f      	ldr	r3, [pc, #60]	; (1db4 <m2m_ssl_init+0x90>)
    1d78:	0011      	movs	r1, r2
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b0c      	ldr	r3, [pc, #48]	; (1db0 <m2m_ssl_init+0x8c>)
    1d7e:	4798      	blx	r3
    1d80:	200d      	movs	r0, #13
    1d82:	4b0d      	ldr	r3, [pc, #52]	; (1db8 <m2m_ssl_init+0x94>)
    1d84:	4798      	blx	r3
	}
	return s8Ret;
    1d86:	230f      	movs	r3, #15
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	b25b      	sxtb	r3, r3
    1d8e:	0018      	movs	r0, r3
    1d90:	46bd      	mov	sp, r7
    1d92:	b005      	add	sp, #20
    1d94:	bd90      	pop	{r4, r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	200005b8 	.word	0x200005b8
    1d9c:	200005bc 	.word	0x200005bc
    1da0:	000018f1 	.word	0x000018f1
    1da4:	00001835 	.word	0x00001835
    1da8:	0001b838 	.word	0x0001b838
    1dac:	0001b7cc 	.word	0x0001b7cc
    1db0:	0001a001 	.word	0x0001a001
    1db4:	0001b804 	.word	0x0001b804
    1db8:	0001a035 	.word	0x0001a035

00001dbc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1dbc:	b590      	push	{r4, r7, lr}
    1dbe:	b0ad      	sub	sp, #180	; 0xb4
    1dc0:	af02      	add	r7, sp, #8
    1dc2:	603a      	str	r2, [r7, #0]
    1dc4:	1dfb      	adds	r3, r7, #7
    1dc6:	1c02      	adds	r2, r0, #0
    1dc8:	701a      	strb	r2, [r3, #0]
    1dca:	1d3b      	adds	r3, r7, #4
    1dcc:	1c0a      	adds	r2, r1, #0
    1dce:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	2b2c      	cmp	r3, #44	; 0x2c
    1dd6:	d116      	bne.n	1e06 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1dd8:	239c      	movs	r3, #156	; 0x9c
    1dda:	18f9      	adds	r1, r7, r3
    1ddc:	6838      	ldr	r0, [r7, #0]
    1dde:	2300      	movs	r3, #0
    1de0:	2204      	movs	r2, #4
    1de2:	4cc6      	ldr	r4, [pc, #792]	; (20fc <STACK_SIZE+0xfc>)
    1de4:	47a0      	blx	r4
    1de6:	1e03      	subs	r3, r0, #0
    1de8:	d000      	beq.n	1dec <m2m_wifi_cb+0x30>
    1dea:	e1aa      	b.n	2142 <STACK_SIZE+0x142>
		{
			if (gpfAppWifiCb)
    1dec:	4bc4      	ldr	r3, [pc, #784]	; (2100 <STACK_SIZE+0x100>)
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d100      	bne.n	1df6 <m2m_wifi_cb+0x3a>
    1df4:	e1a5      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1df6:	4bc2      	ldr	r3, [pc, #776]	; (2100 <STACK_SIZE+0x100>)
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	229c      	movs	r2, #156	; 0x9c
    1dfc:	18ba      	adds	r2, r7, r2
    1dfe:	0011      	movs	r1, r2
    1e00:	202c      	movs	r0, #44	; 0x2c
    1e02:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1e04:	e19d      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	2b1b      	cmp	r3, #27
    1e0c:	d116      	bne.n	1e3c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1e0e:	2394      	movs	r3, #148	; 0x94
    1e10:	18f9      	adds	r1, r7, r3
    1e12:	6838      	ldr	r0, [r7, #0]
    1e14:	2300      	movs	r3, #0
    1e16:	2208      	movs	r2, #8
    1e18:	4cb8      	ldr	r4, [pc, #736]	; (20fc <STACK_SIZE+0xfc>)
    1e1a:	47a0      	blx	r4
    1e1c:	1e03      	subs	r3, r0, #0
    1e1e:	d000      	beq.n	1e22 <m2m_wifi_cb+0x66>
    1e20:	e18f      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1e22:	4bb7      	ldr	r3, [pc, #732]	; (2100 <STACK_SIZE+0x100>)
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d100      	bne.n	1e2c <m2m_wifi_cb+0x70>
    1e2a:	e18a      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1e2c:	4bb4      	ldr	r3, [pc, #720]	; (2100 <STACK_SIZE+0x100>)
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	2294      	movs	r2, #148	; 0x94
    1e32:	18ba      	adds	r2, r7, r2
    1e34:	0011      	movs	r1, r2
    1e36:	201b      	movs	r0, #27
    1e38:	4798      	blx	r3
}
    1e3a:	e182      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1e3c:	1dfb      	adds	r3, r7, #7
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	2b06      	cmp	r3, #6
    1e42:	d116      	bne.n	1e72 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1e44:	2308      	movs	r3, #8
    1e46:	18f9      	adds	r1, r7, r3
    1e48:	6838      	ldr	r0, [r7, #0]
    1e4a:	2301      	movs	r3, #1
    1e4c:	2233      	movs	r2, #51	; 0x33
    1e4e:	4cab      	ldr	r4, [pc, #684]	; (20fc <STACK_SIZE+0xfc>)
    1e50:	47a0      	blx	r4
    1e52:	1e03      	subs	r3, r0, #0
    1e54:	d000      	beq.n	1e58 <m2m_wifi_cb+0x9c>
    1e56:	e174      	b.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    1e58:	4ba9      	ldr	r3, [pc, #676]	; (2100 <STACK_SIZE+0x100>)
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d100      	bne.n	1e62 <m2m_wifi_cb+0xa6>
    1e60:	e16f      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1e62:	4ba7      	ldr	r3, [pc, #668]	; (2100 <STACK_SIZE+0x100>)
    1e64:	681b      	ldr	r3, [r3, #0]
    1e66:	2208      	movs	r2, #8
    1e68:	18ba      	adds	r2, r7, r2
    1e6a:	0011      	movs	r1, r2
    1e6c:	2006      	movs	r0, #6
    1e6e:	4798      	blx	r3
}
    1e70:	e167      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1e72:	1dfb      	adds	r3, r7, #7
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b0e      	cmp	r3, #14
    1e78:	d100      	bne.n	1e7c <m2m_wifi_cb+0xc0>
    1e7a:	e162      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1e7c:	1dfb      	adds	r3, r7, #7
    1e7e:	781b      	ldrb	r3, [r3, #0]
    1e80:	2b32      	cmp	r3, #50	; 0x32
    1e82:	d116      	bne.n	1eb2 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1e84:	2380      	movs	r3, #128	; 0x80
    1e86:	18f9      	adds	r1, r7, r3
    1e88:	6838      	ldr	r0, [r7, #0]
    1e8a:	2300      	movs	r3, #0
    1e8c:	2214      	movs	r2, #20
    1e8e:	4c9b      	ldr	r4, [pc, #620]	; (20fc <STACK_SIZE+0xfc>)
    1e90:	47a0      	blx	r4
    1e92:	1e03      	subs	r3, r0, #0
    1e94:	d000      	beq.n	1e98 <m2m_wifi_cb+0xdc>
    1e96:	e154      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1e98:	4b99      	ldr	r3, [pc, #612]	; (2100 <STACK_SIZE+0x100>)
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d100      	bne.n	1ea2 <m2m_wifi_cb+0xe6>
    1ea0:	e14f      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1ea2:	4b97      	ldr	r3, [pc, #604]	; (2100 <STACK_SIZE+0x100>)
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	18ba      	adds	r2, r7, r2
    1eaa:	0011      	movs	r1, r2
    1eac:	2032      	movs	r0, #50	; 0x32
    1eae:	4798      	blx	r3
}
    1eb0:	e147      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1eb2:	1dfb      	adds	r3, r7, #7
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	2b2f      	cmp	r3, #47	; 0x2f
    1eb8:	d11d      	bne.n	1ef6 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1eba:	2308      	movs	r3, #8
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	2264      	movs	r2, #100	; 0x64
    1ec0:	2100      	movs	r1, #0
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b8f      	ldr	r3, [pc, #572]	; (2104 <STACK_SIZE+0x104>)
    1ec6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1ec8:	2308      	movs	r3, #8
    1eca:	18f9      	adds	r1, r7, r3
    1ecc:	6838      	ldr	r0, [r7, #0]
    1ece:	2300      	movs	r3, #0
    1ed0:	2264      	movs	r2, #100	; 0x64
    1ed2:	4c8a      	ldr	r4, [pc, #552]	; (20fc <STACK_SIZE+0xfc>)
    1ed4:	47a0      	blx	r4
    1ed6:	1e03      	subs	r3, r0, #0
    1ed8:	d000      	beq.n	1edc <m2m_wifi_cb+0x120>
    1eda:	e132      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1edc:	4b88      	ldr	r3, [pc, #544]	; (2100 <STACK_SIZE+0x100>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d100      	bne.n	1ee6 <m2m_wifi_cb+0x12a>
    1ee4:	e12d      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ee6:	4b86      	ldr	r3, [pc, #536]	; (2100 <STACK_SIZE+0x100>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2208      	movs	r2, #8
    1eec:	18ba      	adds	r2, r7, r2
    1eee:	0011      	movs	r1, r2
    1ef0:	202f      	movs	r0, #47	; 0x2f
    1ef2:	4798      	blx	r3
}
    1ef4:	e125      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1ef6:	1dfb      	adds	r3, r7, #7
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	2b34      	cmp	r3, #52	; 0x34
    1efc:	d12e      	bne.n	1f5c <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1efe:	237c      	movs	r3, #124	; 0x7c
    1f00:	18f9      	adds	r1, r7, r3
    1f02:	6838      	ldr	r0, [r7, #0]
    1f04:	2300      	movs	r3, #0
    1f06:	2204      	movs	r2, #4
    1f08:	4c7c      	ldr	r4, [pc, #496]	; (20fc <STACK_SIZE+0xfc>)
    1f0a:	47a0      	blx	r4
    1f0c:	1e03      	subs	r3, r0, #0
    1f0e:	d000      	beq.n	1f12 <m2m_wifi_cb+0x156>
    1f10:	e117      	b.n	2142 <STACK_SIZE+0x142>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1f12:	4b7d      	ldr	r3, [pc, #500]	; (2108 <STACK_SIZE+0x108>)
    1f14:	0018      	movs	r0, r3
    1f16:	4b7d      	ldr	r3, [pc, #500]	; (210c <STACK_SIZE+0x10c>)
    1f18:	4798      	blx	r3
    1f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f1c:	0e1b      	lsrs	r3, r3, #24
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	0019      	movs	r1, r3
    1f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f24:	0c1b      	lsrs	r3, r3, #16
    1f26:	b2db      	uxtb	r3, r3
    1f28:	001a      	movs	r2, r3
    1f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f2c:	0a1b      	lsrs	r3, r3, #8
    1f2e:	b2db      	uxtb	r3, r3
    1f30:	001c      	movs	r4, r3
    1f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f34:	b2db      	uxtb	r3, r3
    1f36:	4876      	ldr	r0, [pc, #472]	; (2110 <STACK_SIZE+0x110>)
    1f38:	9300      	str	r3, [sp, #0]
    1f3a:	0023      	movs	r3, r4
    1f3c:	4c73      	ldr	r4, [pc, #460]	; (210c <STACK_SIZE+0x10c>)
    1f3e:	47a0      	blx	r4
    1f40:	200d      	movs	r0, #13
    1f42:	4b74      	ldr	r3, [pc, #464]	; (2114 <STACK_SIZE+0x114>)
    1f44:	4798      	blx	r3
			if (gpfAppWifiCb)
    1f46:	4b6e      	ldr	r3, [pc, #440]	; (2100 <STACK_SIZE+0x100>)
    1f48:	681b      	ldr	r3, [r3, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d100      	bne.n	1f50 <m2m_wifi_cb+0x194>
    1f4e:	e0f8      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1f50:	4b6b      	ldr	r3, [pc, #428]	; (2100 <STACK_SIZE+0x100>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	2100      	movs	r1, #0
    1f56:	2034      	movs	r0, #52	; 0x34
    1f58:	4798      	blx	r3
}
    1f5a:	e0f2      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1f5c:	1dfb      	adds	r3, r7, #7
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b11      	cmp	r3, #17
    1f62:	d11e      	bne.n	1fa2 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1f64:	4b6c      	ldr	r3, [pc, #432]	; (2118 <STACK_SIZE+0x118>)
    1f66:	2200      	movs	r2, #0
    1f68:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1f6a:	2378      	movs	r3, #120	; 0x78
    1f6c:	18f9      	adds	r1, r7, r3
    1f6e:	6838      	ldr	r0, [r7, #0]
    1f70:	2300      	movs	r3, #0
    1f72:	2204      	movs	r2, #4
    1f74:	4c61      	ldr	r4, [pc, #388]	; (20fc <STACK_SIZE+0xfc>)
    1f76:	47a0      	blx	r4
    1f78:	1e03      	subs	r3, r0, #0
    1f7a:	d000      	beq.n	1f7e <m2m_wifi_cb+0x1c2>
    1f7c:	e0e1      	b.n	2142 <STACK_SIZE+0x142>
			gu8ChNum = strState.u8NumofCh;
    1f7e:	2378      	movs	r3, #120	; 0x78
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	781a      	ldrb	r2, [r3, #0]
    1f84:	4b65      	ldr	r3, [pc, #404]	; (211c <STACK_SIZE+0x11c>)
    1f86:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1f88:	4b5d      	ldr	r3, [pc, #372]	; (2100 <STACK_SIZE+0x100>)
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d100      	bne.n	1f92 <m2m_wifi_cb+0x1d6>
    1f90:	e0d7      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1f92:	4b5b      	ldr	r3, [pc, #364]	; (2100 <STACK_SIZE+0x100>)
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	2278      	movs	r2, #120	; 0x78
    1f98:	18ba      	adds	r2, r7, r2
    1f9a:	0011      	movs	r1, r2
    1f9c:	2011      	movs	r0, #17
    1f9e:	4798      	blx	r3
}
    1fa0:	e0cf      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1fa2:	1dfb      	adds	r3, r7, #7
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2b13      	cmp	r3, #19
    1fa8:	d116      	bne.n	1fd8 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1faa:	2308      	movs	r3, #8
    1fac:	18f9      	adds	r1, r7, r3
    1fae:	6838      	ldr	r0, [r7, #0]
    1fb0:	2300      	movs	r3, #0
    1fb2:	222c      	movs	r2, #44	; 0x2c
    1fb4:	4c51      	ldr	r4, [pc, #324]	; (20fc <STACK_SIZE+0xfc>)
    1fb6:	47a0      	blx	r4
    1fb8:	1e03      	subs	r3, r0, #0
    1fba:	d000      	beq.n	1fbe <m2m_wifi_cb+0x202>
    1fbc:	e0c1      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1fbe:	4b50      	ldr	r3, [pc, #320]	; (2100 <STACK_SIZE+0x100>)
    1fc0:	681b      	ldr	r3, [r3, #0]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d100      	bne.n	1fc8 <m2m_wifi_cb+0x20c>
    1fc6:	e0bc      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1fc8:	4b4d      	ldr	r3, [pc, #308]	; (2100 <STACK_SIZE+0x100>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2208      	movs	r2, #8
    1fce:	18ba      	adds	r2, r7, r2
    1fd0:	0011      	movs	r1, r2
    1fd2:	2013      	movs	r0, #19
    1fd4:	4798      	blx	r3
}
    1fd6:	e0b4      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2b04      	cmp	r3, #4
    1fde:	d116      	bne.n	200e <STACK_SIZE+0xe>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1fe0:	23a0      	movs	r3, #160	; 0xa0
    1fe2:	18f9      	adds	r1, r7, r3
    1fe4:	6838      	ldr	r0, [r7, #0]
    1fe6:	2300      	movs	r3, #0
    1fe8:	2204      	movs	r2, #4
    1fea:	4c44      	ldr	r4, [pc, #272]	; (20fc <STACK_SIZE+0xfc>)
    1fec:	47a0      	blx	r4
    1fee:	1e03      	subs	r3, r0, #0
    1ff0:	d000      	beq.n	1ff4 <m2m_wifi_cb+0x238>
    1ff2:	e0a6      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1ff4:	4b42      	ldr	r3, [pc, #264]	; (2100 <STACK_SIZE+0x100>)
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d100      	bne.n	1ffe <m2m_wifi_cb+0x242>
    1ffc:	e0a1      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1ffe:	4b40      	ldr	r3, [pc, #256]	; (2100 <STACK_SIZE+0x100>)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	22a0      	movs	r2, #160	; 0xa0
    2004:	18ba      	adds	r2, r7, r2
    2006:	0011      	movs	r1, r2
    2008:	2004      	movs	r0, #4
    200a:	4798      	blx	r3
}
    200c:	e099      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    200e:	1dfb      	adds	r3, r7, #7
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	2b65      	cmp	r3, #101	; 0x65
    2014:	d116      	bne.n	2044 <STACK_SIZE+0x44>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2016:	23a0      	movs	r3, #160	; 0xa0
    2018:	18f9      	adds	r1, r7, r3
    201a:	6838      	ldr	r0, [r7, #0]
    201c:	2300      	movs	r3, #0
    201e:	2204      	movs	r2, #4
    2020:	4c36      	ldr	r4, [pc, #216]	; (20fc <STACK_SIZE+0xfc>)
    2022:	47a0      	blx	r4
    2024:	1e03      	subs	r3, r0, #0
    2026:	d000      	beq.n	202a <STACK_SIZE+0x2a>
    2028:	e08b      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    202a:	4b35      	ldr	r3, [pc, #212]	; (2100 <STACK_SIZE+0x100>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e086      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2034:	4b32      	ldr	r3, [pc, #200]	; (2100 <STACK_SIZE+0x100>)
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	22a0      	movs	r2, #160	; 0xa0
    203a:	18ba      	adds	r2, r7, r2
    203c:	0011      	movs	r1, r2
    203e:	2065      	movs	r0, #101	; 0x65
    2040:	4798      	blx	r3
}
    2042:	e07e      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2044:	1dfb      	adds	r3, r7, #7
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	2b09      	cmp	r3, #9
    204a:	d116      	bne.n	207a <STACK_SIZE+0x7a>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    204c:	2308      	movs	r3, #8
    204e:	18f9      	adds	r1, r7, r3
    2050:	6838      	ldr	r0, [r7, #0]
    2052:	2301      	movs	r3, #1
    2054:	2264      	movs	r2, #100	; 0x64
    2056:	4c29      	ldr	r4, [pc, #164]	; (20fc <STACK_SIZE+0xfc>)
    2058:	47a0      	blx	r4
    205a:	1e03      	subs	r3, r0, #0
    205c:	d000      	beq.n	2060 <STACK_SIZE+0x60>
    205e:	e070      	b.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    2060:	4b27      	ldr	r3, [pc, #156]	; (2100 <STACK_SIZE+0x100>)
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	2b00      	cmp	r3, #0
    2066:	d100      	bne.n	206a <STACK_SIZE+0x6a>
    2068:	e06b      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    206a:	4b25      	ldr	r3, [pc, #148]	; (2100 <STACK_SIZE+0x100>)
    206c:	681b      	ldr	r3, [r3, #0]
    206e:	2208      	movs	r2, #8
    2070:	18ba      	adds	r2, r7, r2
    2072:	0011      	movs	r1, r2
    2074:	2009      	movs	r0, #9
    2076:	4798      	blx	r3
}
    2078:	e063      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    207a:	1dfb      	adds	r3, r7, #7
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b2a      	cmp	r3, #42	; 0x2a
    2080:	d114      	bne.n	20ac <STACK_SIZE+0xac>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2082:	2374      	movs	r3, #116	; 0x74
    2084:	18f9      	adds	r1, r7, r3
    2086:	6838      	ldr	r0, [r7, #0]
    2088:	2301      	movs	r3, #1
    208a:	2204      	movs	r2, #4
    208c:	4c1b      	ldr	r4, [pc, #108]	; (20fc <STACK_SIZE+0xfc>)
    208e:	47a0      	blx	r4
    2090:	1e03      	subs	r3, r0, #0
    2092:	d156      	bne.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    2094:	4b1a      	ldr	r3, [pc, #104]	; (2100 <STACK_SIZE+0x100>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d052      	beq.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    209c:	4b18      	ldr	r3, [pc, #96]	; (2100 <STACK_SIZE+0x100>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	2274      	movs	r2, #116	; 0x74
    20a2:	18ba      	adds	r2, r7, r2
    20a4:	0011      	movs	r1, r2
    20a6:	202a      	movs	r0, #42	; 0x2a
    20a8:	4798      	blx	r3
}
    20aa:	e04a      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    20ac:	1dfb      	adds	r3, r7, #7
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	2b20      	cmp	r3, #32
    20b2:	d135      	bne.n	2120 <STACK_SIZE+0x120>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    20b4:	236c      	movs	r3, #108	; 0x6c
    20b6:	18f9      	adds	r1, r7, r3
    20b8:	6838      	ldr	r0, [r7, #0]
    20ba:	2300      	movs	r3, #0
    20bc:	2208      	movs	r2, #8
    20be:	4c0f      	ldr	r4, [pc, #60]	; (20fc <STACK_SIZE+0xfc>)
    20c0:	47a0      	blx	r4
    20c2:	1e03      	subs	r3, r0, #0
    20c4:	d13d      	bne.n	2142 <STACK_SIZE+0x142>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    20c6:	683b      	ldr	r3, [r7, #0]
    20c8:	3308      	adds	r3, #8
    20ca:	0018      	movs	r0, r3
    20cc:	236c      	movs	r3, #108	; 0x6c
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	6819      	ldr	r1, [r3, #0]
    20d2:	236c      	movs	r3, #108	; 0x6c
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	889a      	ldrh	r2, [r3, #4]
    20d8:	2301      	movs	r3, #1
    20da:	4c08      	ldr	r4, [pc, #32]	; (20fc <STACK_SIZE+0xfc>)
    20dc:	47a0      	blx	r4
    20de:	1e03      	subs	r3, r0, #0
    20e0:	d12f      	bne.n	2142 <STACK_SIZE+0x142>
				if(gpfAppWifiCb)
    20e2:	4b07      	ldr	r3, [pc, #28]	; (2100 <STACK_SIZE+0x100>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d02b      	beq.n	2142 <STACK_SIZE+0x142>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <STACK_SIZE+0x100>)
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	226c      	movs	r2, #108	; 0x6c
    20f0:	18ba      	adds	r2, r7, r2
    20f2:	0011      	movs	r1, r2
    20f4:	2020      	movs	r0, #32
    20f6:	4798      	blx	r3
}
    20f8:	e023      	b.n	2142 <STACK_SIZE+0x142>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	000016b9 	.word	0x000016b9
    2100:	200005c4 	.word	0x200005c4
    2104:	00000b61 	.word	0x00000b61
    2108:	0001b848 	.word	0x0001b848
    210c:	0001a001 	.word	0x0001a001
    2110:	0001b854 	.word	0x0001b854
    2114:	0001a035 	.word	0x0001a035
    2118:	200005c1 	.word	0x200005c1
    211c:	200005c0 	.word	0x200005c0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    2120:	2392      	movs	r3, #146	; 0x92
    2122:	005a      	lsls	r2, r3, #1
    2124:	4909      	ldr	r1, [pc, #36]	; (214c <STACK_SIZE+0x14c>)
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <STACK_SIZE+0x150>)
    2128:	0018      	movs	r0, r3
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <STACK_SIZE+0x154>)
    212c:	4798      	blx	r3
    212e:	1dfb      	adds	r3, r7, #7
    2130:	781a      	ldrb	r2, [r3, #0]
    2132:	4b09      	ldr	r3, [pc, #36]	; (2158 <STACK_SIZE+0x158>)
    2134:	0011      	movs	r1, r2
    2136:	0018      	movs	r0, r3
    2138:	4b06      	ldr	r3, [pc, #24]	; (2154 <STACK_SIZE+0x154>)
    213a:	4798      	blx	r3
    213c:	200d      	movs	r0, #13
    213e:	4b07      	ldr	r3, [pc, #28]	; (215c <STACK_SIZE+0x15c>)
    2140:	4798      	blx	r3
}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	46bd      	mov	sp, r7
    2146:	b02b      	add	sp, #172	; 0xac
    2148:	bd90      	pop	{r4, r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	0001bbfc 	.word	0x0001bbfc
    2150:	0001b874 	.word	0x0001b874
    2154:	0001a001 	.word	0x0001a001
    2158:	0001b888 	.word	0x0001b888
    215c:	0001a035 	.word	0x0001a035

00002160 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2160:	b590      	push	{r4, r7, lr}
    2162:	b091      	sub	sp, #68	; 0x44
    2164:	af02      	add	r7, sp, #8
    2166:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    2168:	2337      	movs	r3, #55	; 0x37
    216a:	18fb      	adds	r3, r7, r3
    216c:	2200      	movs	r2, #0
    216e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2170:	230b      	movs	r3, #11
    2172:	18fb      	adds	r3, r7, r3
    2174:	2201      	movs	r2, #1
    2176:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	2b00      	cmp	r3, #0
    217c:	d104      	bne.n	2188 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    217e:	2337      	movs	r3, #55	; 0x37
    2180:	18fb      	adds	r3, r7, r3
    2182:	22f4      	movs	r2, #244	; 0xf4
    2184:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    2186:	e0ad      	b.n	22e4 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	681a      	ldr	r2, [r3, #0]
    218c:	4b59      	ldr	r3, [pc, #356]	; (22f4 <m2m_wifi_init+0x194>)
    218e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    2190:	4b59      	ldr	r3, [pc, #356]	; (22f8 <m2m_wifi_init+0x198>)
    2192:	2200      	movs	r2, #0
    2194:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    2196:	2337      	movs	r3, #55	; 0x37
    2198:	18fc      	adds	r4, r7, r3
    219a:	230b      	movs	r3, #11
    219c:	18fb      	adds	r3, r7, r3
    219e:	0018      	movs	r0, r3
    21a0:	4b56      	ldr	r3, [pc, #344]	; (22fc <m2m_wifi_init+0x19c>)
    21a2:	4798      	blx	r3
    21a4:	0003      	movs	r3, r0
    21a6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    21a8:	2337      	movs	r3, #55	; 0x37
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	b25b      	sxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	d000      	beq.n	21b6 <m2m_wifi_init+0x56>
    21b4:	e093      	b.n	22de <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    21b6:	2337      	movs	r3, #55	; 0x37
    21b8:	18fc      	adds	r4, r7, r3
    21ba:	2000      	movs	r0, #0
    21bc:	4b50      	ldr	r3, [pc, #320]	; (2300 <m2m_wifi_init+0x1a0>)
    21be:	4798      	blx	r3
    21c0:	0003      	movs	r3, r0
    21c2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    21c4:	2337      	movs	r3, #55	; 0x37
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b25b      	sxtb	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	d000      	beq.n	21d2 <m2m_wifi_init+0x72>
    21d0:	e080      	b.n	22d4 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    21d2:	4b4c      	ldr	r3, [pc, #304]	; (2304 <m2m_wifi_init+0x1a4>)
    21d4:	0019      	movs	r1, r3
    21d6:	2001      	movs	r0, #1
    21d8:	4b4b      	ldr	r3, [pc, #300]	; (2308 <m2m_wifi_init+0x1a8>)
    21da:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    21dc:	2337      	movs	r3, #55	; 0x37
    21de:	18fc      	adds	r4, r7, r3
    21e0:	230c      	movs	r3, #12
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	0018      	movs	r0, r3
    21e6:	4b49      	ldr	r3, [pc, #292]	; (230c <m2m_wifi_init+0x1ac>)
    21e8:	4798      	blx	r3
    21ea:	0003      	movs	r3, r0
    21ec:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    21ee:	4b48      	ldr	r3, [pc, #288]	; (2310 <m2m_wifi_init+0x1b0>)
    21f0:	0018      	movs	r0, r3
    21f2:	4b48      	ldr	r3, [pc, #288]	; (2314 <m2m_wifi_init+0x1b4>)
    21f4:	4798      	blx	r3
    21f6:	230c      	movs	r3, #12
    21f8:	18fb      	adds	r3, r7, r3
    21fa:	791b      	ldrb	r3, [r3, #4]
    21fc:	0019      	movs	r1, r3
    21fe:	230c      	movs	r3, #12
    2200:	18fb      	adds	r3, r7, r3
    2202:	795b      	ldrb	r3, [r3, #5]
    2204:	001a      	movs	r2, r3
    2206:	230c      	movs	r3, #12
    2208:	18fb      	adds	r3, r7, r3
    220a:	799b      	ldrb	r3, [r3, #6]
    220c:	001c      	movs	r4, r3
    220e:	230c      	movs	r3, #12
    2210:	18fb      	adds	r3, r7, r3
    2212:	8c1b      	ldrh	r3, [r3, #32]
    2214:	4840      	ldr	r0, [pc, #256]	; (2318 <m2m_wifi_init+0x1b8>)
    2216:	9300      	str	r3, [sp, #0]
    2218:	0023      	movs	r3, r4
    221a:	4c3e      	ldr	r4, [pc, #248]	; (2314 <m2m_wifi_init+0x1b4>)
    221c:	47a0      	blx	r4
    221e:	200d      	movs	r0, #13
    2220:	4b3e      	ldr	r3, [pc, #248]	; (231c <m2m_wifi_init+0x1bc>)
    2222:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2224:	4b3a      	ldr	r3, [pc, #232]	; (2310 <m2m_wifi_init+0x1b0>)
    2226:	0018      	movs	r0, r3
    2228:	4b3a      	ldr	r3, [pc, #232]	; (2314 <m2m_wifi_init+0x1b4>)
    222a:	4798      	blx	r3
    222c:	230c      	movs	r3, #12
    222e:	18fb      	adds	r3, r7, r3
    2230:	3316      	adds	r3, #22
    2232:	001a      	movs	r2, r3
    2234:	230c      	movs	r3, #12
    2236:	18fb      	adds	r3, r7, r3
    2238:	330a      	adds	r3, #10
    223a:	0019      	movs	r1, r3
    223c:	4b38      	ldr	r3, [pc, #224]	; (2320 <m2m_wifi_init+0x1c0>)
    223e:	0018      	movs	r0, r3
    2240:	4b34      	ldr	r3, [pc, #208]	; (2314 <m2m_wifi_init+0x1b4>)
    2242:	4798      	blx	r3
    2244:	200d      	movs	r0, #13
    2246:	4b35      	ldr	r3, [pc, #212]	; (231c <m2m_wifi_init+0x1bc>)
    2248:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    224a:	4b31      	ldr	r3, [pc, #196]	; (2310 <m2m_wifi_init+0x1b0>)
    224c:	0018      	movs	r0, r3
    224e:	4b31      	ldr	r3, [pc, #196]	; (2314 <m2m_wifi_init+0x1b4>)
    2250:	4798      	blx	r3
    2252:	230c      	movs	r3, #12
    2254:	18fb      	adds	r3, r7, r3
    2256:	79db      	ldrb	r3, [r3, #7]
    2258:	0019      	movs	r1, r3
    225a:	230c      	movs	r3, #12
    225c:	18fb      	adds	r3, r7, r3
    225e:	7a1b      	ldrb	r3, [r3, #8]
    2260:	001a      	movs	r2, r3
    2262:	230c      	movs	r3, #12
    2264:	18fb      	adds	r3, r7, r3
    2266:	7a5b      	ldrb	r3, [r3, #9]
    2268:	482e      	ldr	r0, [pc, #184]	; (2324 <m2m_wifi_init+0x1c4>)
    226a:	4c2a      	ldr	r4, [pc, #168]	; (2314 <m2m_wifi_init+0x1b4>)
    226c:	47a0      	blx	r4
    226e:	200d      	movs	r0, #13
    2270:	4b2a      	ldr	r3, [pc, #168]	; (231c <m2m_wifi_init+0x1bc>)
    2272:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2274:	4b26      	ldr	r3, [pc, #152]	; (2310 <m2m_wifi_init+0x1b0>)
    2276:	0018      	movs	r0, r3
    2278:	4b26      	ldr	r3, [pc, #152]	; (2314 <m2m_wifi_init+0x1b4>)
    227a:	4798      	blx	r3
    227c:	482a      	ldr	r0, [pc, #168]	; (2328 <m2m_wifi_init+0x1c8>)
    227e:	2304      	movs	r3, #4
    2280:	2205      	movs	r2, #5
    2282:	2113      	movs	r1, #19
    2284:	4c23      	ldr	r4, [pc, #140]	; (2314 <m2m_wifi_init+0x1b4>)
    2286:	47a0      	blx	r4
    2288:	200d      	movs	r0, #13
    228a:	4b24      	ldr	r3, [pc, #144]	; (231c <m2m_wifi_init+0x1bc>)
    228c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    228e:	4b20      	ldr	r3, [pc, #128]	; (2310 <m2m_wifi_init+0x1b0>)
    2290:	0018      	movs	r0, r3
    2292:	4b20      	ldr	r3, [pc, #128]	; (2314 <m2m_wifi_init+0x1b4>)
    2294:	4798      	blx	r3
    2296:	4a25      	ldr	r2, [pc, #148]	; (232c <m2m_wifi_init+0x1cc>)
    2298:	4925      	ldr	r1, [pc, #148]	; (2330 <m2m_wifi_init+0x1d0>)
    229a:	4b26      	ldr	r3, [pc, #152]	; (2334 <m2m_wifi_init+0x1d4>)
    229c:	0018      	movs	r0, r3
    229e:	4b1d      	ldr	r3, [pc, #116]	; (2314 <m2m_wifi_init+0x1b4>)
    22a0:	4798      	blx	r3
    22a2:	200d      	movs	r0, #13
    22a4:	4b1d      	ldr	r3, [pc, #116]	; (231c <m2m_wifi_init+0x1bc>)
    22a6:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    22a8:	2337      	movs	r3, #55	; 0x37
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	b25b      	sxtb	r3, r3
    22b0:	330d      	adds	r3, #13
    22b2:	d116      	bne.n	22e2 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    22b4:	23e8      	movs	r3, #232	; 0xe8
    22b6:	33ff      	adds	r3, #255	; 0xff
    22b8:	001a      	movs	r2, r3
    22ba:	491f      	ldr	r1, [pc, #124]	; (2338 <m2m_wifi_init+0x1d8>)
    22bc:	4b1f      	ldr	r3, [pc, #124]	; (233c <m2m_wifi_init+0x1dc>)
    22be:	0018      	movs	r0, r3
    22c0:	4b14      	ldr	r3, [pc, #80]	; (2314 <m2m_wifi_init+0x1b4>)
    22c2:	4798      	blx	r3
    22c4:	4b1e      	ldr	r3, [pc, #120]	; (2340 <m2m_wifi_init+0x1e0>)
    22c6:	0018      	movs	r0, r3
    22c8:	4b1e      	ldr	r3, [pc, #120]	; (2344 <m2m_wifi_init+0x1e4>)
    22ca:	4798      	blx	r3
    22cc:	200d      	movs	r0, #13
    22ce:	4b13      	ldr	r3, [pc, #76]	; (231c <m2m_wifi_init+0x1bc>)
    22d0:	4798      	blx	r3
	}

	goto _EXIT0;
    22d2:	e006      	b.n	22e2 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    22d4:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    22d6:	2000      	movs	r0, #0
    22d8:	4b1b      	ldr	r3, [pc, #108]	; (2348 <m2m_wifi_init+0x1e8>)
    22da:	4798      	blx	r3
    22dc:	e002      	b.n	22e4 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	e000      	b.n	22e4 <m2m_wifi_init+0x184>
	goto _EXIT0;
    22e2:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    22e4:	2337      	movs	r3, #55	; 0x37
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	b25b      	sxtb	r3, r3
}
    22ec:	0018      	movs	r0, r3
    22ee:	46bd      	mov	sp, r7
    22f0:	b00f      	add	sp, #60	; 0x3c
    22f2:	bd90      	pop	{r4, r7, pc}
    22f4:	200005c4 	.word	0x200005c4
    22f8:	200005c1 	.word	0x200005c1
    22fc:	00003499 	.word	0x00003499
    2300:	00000d79 	.word	0x00000d79
    2304:	00001dbd 	.word	0x00001dbd
    2308:	00001835 	.word	0x00001835
    230c:	000032cd 	.word	0x000032cd
    2310:	0001b848 	.word	0x0001b848
    2314:	0001a001 	.word	0x0001a001
    2318:	0001b9dc 	.word	0x0001b9dc
    231c:	0001a035 	.word	0x0001a035
    2320:	0001ba04 	.word	0x0001ba04
    2324:	0001ba20 	.word	0x0001ba20
    2328:	0001ba44 	.word	0x0001ba44
    232c:	0001ba5c 	.word	0x0001ba5c
    2330:	0001ba68 	.word	0x0001ba68
    2334:	0001ba74 	.word	0x0001ba74
    2338:	0001bc08 	.word	0x0001bc08
    233c:	0001b874 	.word	0x0001b874
    2340:	0001ba8c 	.word	0x0001ba8c
    2344:	0001a11d 	.word	0x0001a11d
    2348:	0000362d 	.word	0x0000362d

0000234c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    234c:	b580      	push	{r7, lr}
    234e:	b082      	sub	sp, #8
    2350:	af00      	add	r7, sp, #0
    2352:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <m2m_wifi_handle_events+0x18>)
    2356:	4798      	blx	r3
    2358:	0003      	movs	r3, r0
}
    235a:	0018      	movs	r0, r3
    235c:	46bd      	mov	sp, r7
    235e:	b002      	add	sp, #8
    2360:	bd80      	pop	{r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	00001629 	.word	0x00001629

00002368 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2368:	b590      	push	{r4, r7, lr}
    236a:	b087      	sub	sp, #28
    236c:	af02      	add	r7, sp, #8
    236e:	60f8      	str	r0, [r7, #12]
    2370:	0008      	movs	r0, r1
    2372:	0011      	movs	r1, r2
    2374:	607b      	str	r3, [r7, #4]
    2376:	230b      	movs	r3, #11
    2378:	18fb      	adds	r3, r7, r3
    237a:	1c02      	adds	r2, r0, #0
    237c:	701a      	strb	r2, [r3, #0]
    237e:	230a      	movs	r3, #10
    2380:	18fb      	adds	r3, r7, r3
    2382:	1c0a      	adds	r2, r1, #0
    2384:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2386:	687c      	ldr	r4, [r7, #4]
    2388:	230a      	movs	r3, #10
    238a:	18fb      	adds	r3, r7, r3
    238c:	781a      	ldrb	r2, [r3, #0]
    238e:	230b      	movs	r3, #11
    2390:	18fb      	adds	r3, r7, r3
    2392:	7819      	ldrb	r1, [r3, #0]
    2394:	68f8      	ldr	r0, [r7, #12]
    2396:	2300      	movs	r3, #0
    2398:	9301      	str	r3, [sp, #4]
    239a:	2320      	movs	r3, #32
    239c:	18fb      	adds	r3, r7, r3
    239e:	881b      	ldrh	r3, [r3, #0]
    23a0:	9300      	str	r3, [sp, #0]
    23a2:	0023      	movs	r3, r4
    23a4:	4c03      	ldr	r4, [pc, #12]	; (23b4 <m2m_wifi_connect+0x4c>)
    23a6:	47a0      	blx	r4
    23a8:	0003      	movs	r3, r0
}
    23aa:	0018      	movs	r0, r3
    23ac:	46bd      	mov	sp, r7
    23ae:	b005      	add	sp, #20
    23b0:	bd90      	pop	{r4, r7, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	000023b9 	.word	0x000023b9

000023b8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    23b8:	b5b0      	push	{r4, r5, r7, lr}
    23ba:	b0aa      	sub	sp, #168	; 0xa8
    23bc:	af04      	add	r7, sp, #16
    23be:	60f8      	str	r0, [r7, #12]
    23c0:	0008      	movs	r0, r1
    23c2:	0011      	movs	r1, r2
    23c4:	607b      	str	r3, [r7, #4]
    23c6:	230b      	movs	r3, #11
    23c8:	18fb      	adds	r3, r7, r3
    23ca:	1c02      	adds	r2, r0, #0
    23cc:	701a      	strb	r2, [r3, #0]
    23ce:	230a      	movs	r3, #10
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	1c0a      	adds	r2, r1, #0
    23d4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    23d6:	2397      	movs	r3, #151	; 0x97
    23d8:	18fb      	adds	r3, r7, r3
    23da:	2200      	movs	r2, #0
    23dc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    23de:	230a      	movs	r3, #10
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	2b01      	cmp	r3, #1
    23e6:	d100      	bne.n	23ea <m2m_wifi_connect_sc+0x32>
    23e8:	e083      	b.n	24f2 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d111      	bne.n	2414 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    23f0:	4adb      	ldr	r2, [pc, #876]	; (2760 <m2m_wifi_connect_sc+0x3a8>)
    23f2:	49dc      	ldr	r1, [pc, #880]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    23f4:	4bdc      	ldr	r3, [pc, #880]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    23f6:	0018      	movs	r0, r3
    23f8:	4bdc      	ldr	r3, [pc, #880]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    23fa:	4798      	blx	r3
    23fc:	4bdc      	ldr	r3, [pc, #880]	; (2770 <m2m_wifi_connect_sc+0x3b8>)
    23fe:	0018      	movs	r0, r3
    2400:	4bdc      	ldr	r3, [pc, #880]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2402:	4798      	blx	r3
    2404:	200d      	movs	r0, #13
    2406:	4bdc      	ldr	r3, [pc, #880]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2408:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    240a:	2397      	movs	r3, #151	; 0x97
    240c:	18fb      	adds	r3, r7, r3
    240e:	22f4      	movs	r2, #244	; 0xf4
    2410:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2412:	e1f5      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2414:	230a      	movs	r3, #10
    2416:	18fb      	adds	r3, r7, r3
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	2b02      	cmp	r3, #2
    241c:	d169      	bne.n	24f2 <m2m_wifi_connect_sc+0x13a>
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	0018      	movs	r0, r3
    2422:	4bd6      	ldr	r3, [pc, #856]	; (277c <m2m_wifi_connect_sc+0x3c4>)
    2424:	4798      	blx	r3
    2426:	0003      	movs	r3, r0
    2428:	2b40      	cmp	r3, #64	; 0x40
    242a:	d162      	bne.n	24f2 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    242c:	2396      	movs	r3, #150	; 0x96
    242e:	18fb      	adds	r3, r7, r3
    2430:	2200      	movs	r2, #0
    2432:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	2290      	movs	r2, #144	; 0x90
    2438:	18ba      	adds	r2, r7, r2
    243a:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    243c:	e054      	b.n	24e8 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    243e:	2396      	movs	r3, #150	; 0x96
    2440:	18fb      	adds	r3, r7, r3
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	2290      	movs	r2, #144	; 0x90
    2446:	18ba      	adds	r2, r7, r2
    2448:	6812      	ldr	r2, [r2, #0]
    244a:	18d3      	adds	r3, r2, r3
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	2b2f      	cmp	r3, #47	; 0x2f
    2450:	d931      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    2452:	2396      	movs	r3, #150	; 0x96
    2454:	18fb      	adds	r3, r7, r3
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	2290      	movs	r2, #144	; 0x90
    245a:	18ba      	adds	r2, r7, r2
    245c:	6812      	ldr	r2, [r2, #0]
    245e:	18d3      	adds	r3, r2, r3
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b39      	cmp	r3, #57	; 0x39
    2464:	d909      	bls.n	247a <m2m_wifi_connect_sc+0xc2>
    2466:	2396      	movs	r3, #150	; 0x96
    2468:	18fb      	adds	r3, r7, r3
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	2290      	movs	r2, #144	; 0x90
    246e:	18ba      	adds	r2, r7, r2
    2470:	6812      	ldr	r2, [r2, #0]
    2472:	18d3      	adds	r3, r2, r3
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	2b40      	cmp	r3, #64	; 0x40
    2478:	d91d      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    247a:	2396      	movs	r3, #150	; 0x96
    247c:	18fb      	adds	r3, r7, r3
    247e:	781b      	ldrb	r3, [r3, #0]
    2480:	2290      	movs	r2, #144	; 0x90
    2482:	18ba      	adds	r2, r7, r2
    2484:	6812      	ldr	r2, [r2, #0]
    2486:	18d3      	adds	r3, r2, r3
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	2b46      	cmp	r3, #70	; 0x46
    248c:	d909      	bls.n	24a2 <m2m_wifi_connect_sc+0xea>
    248e:	2396      	movs	r3, #150	; 0x96
    2490:	18fb      	adds	r3, r7, r3
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	2290      	movs	r2, #144	; 0x90
    2496:	18ba      	adds	r2, r7, r2
    2498:	6812      	ldr	r2, [r2, #0]
    249a:	18d3      	adds	r3, r2, r3
    249c:	781b      	ldrb	r3, [r3, #0]
    249e:	2b60      	cmp	r3, #96	; 0x60
    24a0:	d909      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    24a2:	2396      	movs	r3, #150	; 0x96
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	2290      	movs	r2, #144	; 0x90
    24aa:	18ba      	adds	r2, r7, r2
    24ac:	6812      	ldr	r2, [r2, #0]
    24ae:	18d3      	adds	r3, r2, r3
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	2b66      	cmp	r3, #102	; 0x66
    24b4:	d911      	bls.n	24da <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    24b6:	4ab2      	ldr	r2, [pc, #712]	; (2780 <m2m_wifi_connect_sc+0x3c8>)
    24b8:	49aa      	ldr	r1, [pc, #680]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    24ba:	4bab      	ldr	r3, [pc, #684]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    24bc:	0018      	movs	r0, r3
    24be:	4bab      	ldr	r3, [pc, #684]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    24c0:	4798      	blx	r3
    24c2:	4bb0      	ldr	r3, [pc, #704]	; (2784 <m2m_wifi_connect_sc+0x3cc>)
    24c4:	0018      	movs	r0, r3
    24c6:	4bab      	ldr	r3, [pc, #684]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    24c8:	4798      	blx	r3
    24ca:	200d      	movs	r0, #13
    24cc:	4baa      	ldr	r3, [pc, #680]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    24ce:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    24d0:	2397      	movs	r3, #151	; 0x97
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	22f4      	movs	r2, #244	; 0xf4
    24d6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    24d8:	e192      	b.n	2800 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    24da:	2396      	movs	r3, #150	; 0x96
    24dc:	18fb      	adds	r3, r7, r3
    24de:	781a      	ldrb	r2, [r3, #0]
    24e0:	2396      	movs	r3, #150	; 0x96
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	3201      	adds	r2, #1
    24e6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    24e8:	2396      	movs	r3, #150	; 0x96
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	781b      	ldrb	r3, [r3, #0]
    24ee:	2b3f      	cmp	r3, #63	; 0x3f
    24f0:	d9a5      	bls.n	243e <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    24f2:	230b      	movs	r3, #11
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d004      	beq.n	2506 <m2m_wifi_connect_sc+0x14e>
    24fc:	230b      	movs	r3, #11
    24fe:	18fb      	adds	r3, r7, r3
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	2b20      	cmp	r3, #32
    2504:	d911      	bls.n	252a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    2506:	4aa0      	ldr	r2, [pc, #640]	; (2788 <m2m_wifi_connect_sc+0x3d0>)
    2508:	4996      	ldr	r1, [pc, #600]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    250a:	4b97      	ldr	r3, [pc, #604]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    250c:	0018      	movs	r0, r3
    250e:	4b97      	ldr	r3, [pc, #604]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2510:	4798      	blx	r3
    2512:	4b9e      	ldr	r3, [pc, #632]	; (278c <m2m_wifi_connect_sc+0x3d4>)
    2514:	0018      	movs	r0, r3
    2516:	4b97      	ldr	r3, [pc, #604]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2518:	4798      	blx	r3
    251a:	200d      	movs	r0, #13
    251c:	4b96      	ldr	r3, [pc, #600]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    251e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2520:	2397      	movs	r3, #151	; 0x97
    2522:	18fb      	adds	r3, r7, r3
    2524:	22f4      	movs	r2, #244	; 0xf4
    2526:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2528:	e16a      	b.n	2800 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    252a:	23a8      	movs	r3, #168	; 0xa8
    252c:	18fb      	adds	r3, r7, r3
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	2b00      	cmp	r3, #0
    2532:	d004      	beq.n	253e <m2m_wifi_connect_sc+0x186>
    2534:	23a8      	movs	r3, #168	; 0xa8
    2536:	18fb      	adds	r3, r7, r3
    2538:	881b      	ldrh	r3, [r3, #0]
    253a:	2b0e      	cmp	r3, #14
    253c:	d917      	bls.n	256e <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    253e:	23a8      	movs	r3, #168	; 0xa8
    2540:	18fb      	adds	r3, r7, r3
    2542:	881b      	ldrh	r3, [r3, #0]
    2544:	2bff      	cmp	r3, #255	; 0xff
    2546:	d012      	beq.n	256e <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    2548:	238d      	movs	r3, #141	; 0x8d
    254a:	009a      	lsls	r2, r3, #2
    254c:	4985      	ldr	r1, [pc, #532]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    254e:	4b86      	ldr	r3, [pc, #536]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    2550:	0018      	movs	r0, r3
    2552:	4b86      	ldr	r3, [pc, #536]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2554:	4798      	blx	r3
    2556:	4b8e      	ldr	r3, [pc, #568]	; (2790 <m2m_wifi_connect_sc+0x3d8>)
    2558:	0018      	movs	r0, r3
    255a:	4b86      	ldr	r3, [pc, #536]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    255c:	4798      	blx	r3
    255e:	200d      	movs	r0, #13
    2560:	4b85      	ldr	r3, [pc, #532]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2562:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2564:	2397      	movs	r3, #151	; 0x97
    2566:	18fb      	adds	r3, r7, r3
    2568:	22f4      	movs	r2, #244	; 0xf4
    256a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    256c:	e148      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    256e:	230b      	movs	r3, #11
    2570:	18fb      	adds	r3, r7, r3
    2572:	781a      	ldrb	r2, [r3, #0]
    2574:	68f9      	ldr	r1, [r7, #12]
    2576:	2314      	movs	r3, #20
    2578:	18fb      	adds	r3, r7, r3
    257a:	3346      	adds	r3, #70	; 0x46
    257c:	0018      	movs	r0, r3
    257e:	4b85      	ldr	r3, [pc, #532]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    2580:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2582:	230b      	movs	r3, #11
    2584:	18fb      	adds	r3, r7, r3
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2214      	movs	r2, #20
    258a:	18ba      	adds	r2, r7, r2
    258c:	2146      	movs	r1, #70	; 0x46
    258e:	18d3      	adds	r3, r2, r3
    2590:	185b      	adds	r3, r3, r1
    2592:	2200      	movs	r2, #0
    2594:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2596:	2314      	movs	r3, #20
    2598:	18fb      	adds	r3, r7, r3
    259a:	22a8      	movs	r2, #168	; 0xa8
    259c:	18ba      	adds	r2, r7, r2
    259e:	2144      	movs	r1, #68	; 0x44
    25a0:	8812      	ldrh	r2, [r2, #0]
    25a2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    25a4:	23ac      	movs	r3, #172	; 0xac
    25a6:	18fb      	adds	r3, r7, r3
    25a8:	781b      	ldrb	r3, [r3, #0]
    25aa:	1e5a      	subs	r2, r3, #1
    25ac:	4193      	sbcs	r3, r2
    25ae:	b2db      	uxtb	r3, r3
    25b0:	0019      	movs	r1, r3
    25b2:	2314      	movs	r3, #20
    25b4:	18fb      	adds	r3, r7, r3
    25b6:	2267      	movs	r2, #103	; 0x67
    25b8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    25ba:	2314      	movs	r3, #20
    25bc:	18fb      	adds	r3, r7, r3
    25be:	228c      	movs	r2, #140	; 0x8c
    25c0:	18ba      	adds	r2, r7, r2
    25c2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    25c4:	238c      	movs	r3, #140	; 0x8c
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	220a      	movs	r2, #10
    25cc:	18ba      	adds	r2, r7, r2
    25ce:	2141      	movs	r1, #65	; 0x41
    25d0:	7812      	ldrb	r2, [r2, #0]
    25d2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    25d4:	230a      	movs	r3, #10
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	2b03      	cmp	r3, #3
    25dc:	d000      	beq.n	25e0 <m2m_wifi_connect_sc+0x228>
    25de:	e07a      	b.n	26d6 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	2288      	movs	r2, #136	; 0x88
    25e4:	18ba      	adds	r2, r7, r2
    25e6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    25e8:	238c      	movs	r3, #140	; 0x8c
    25ea:	18fb      	adds	r3, r7, r3
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	2284      	movs	r2, #132	; 0x84
    25f0:	18ba      	adds	r2, r7, r2
    25f2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    25f4:	2388      	movs	r3, #136	; 0x88
    25f6:	18fb      	adds	r3, r7, r3
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	3b01      	subs	r3, #1
    25fe:	b2da      	uxtb	r2, r3
    2600:	2384      	movs	r3, #132	; 0x84
    2602:	18fb      	adds	r3, r7, r3
    2604:	681b      	ldr	r3, [r3, #0]
    2606:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2608:	2384      	movs	r3, #132	; 0x84
    260a:	18fb      	adds	r3, r7, r3
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	781b      	ldrb	r3, [r3, #0]
    2610:	2b03      	cmp	r3, #3
    2612:	d917      	bls.n	2644 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2614:	4a60      	ldr	r2, [pc, #384]	; (2798 <m2m_wifi_connect_sc+0x3e0>)
    2616:	4953      	ldr	r1, [pc, #332]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2618:	4b53      	ldr	r3, [pc, #332]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    261a:	0018      	movs	r0, r3
    261c:	4b53      	ldr	r3, [pc, #332]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    261e:	4798      	blx	r3
    2620:	2384      	movs	r3, #132	; 0x84
    2622:	18fb      	adds	r3, r7, r3
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	001a      	movs	r2, r3
    262a:	4b5c      	ldr	r3, [pc, #368]	; (279c <m2m_wifi_connect_sc+0x3e4>)
    262c:	0011      	movs	r1, r2
    262e:	0018      	movs	r0, r3
    2630:	4b4e      	ldr	r3, [pc, #312]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2632:	4798      	blx	r3
    2634:	200d      	movs	r0, #13
    2636:	4b50      	ldr	r3, [pc, #320]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2638:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    263a:	2397      	movs	r3, #151	; 0x97
    263c:	18fb      	adds	r3, r7, r3
    263e:	22f4      	movs	r2, #244	; 0xf4
    2640:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2642:	e0dd      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2644:	2388      	movs	r3, #136	; 0x88
    2646:	18fb      	adds	r3, r7, r3
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	785b      	ldrb	r3, [r3, #1]
    264c:	3b01      	subs	r3, #1
    264e:	b2da      	uxtb	r2, r3
    2650:	2384      	movs	r3, #132	; 0x84
    2652:	18fb      	adds	r3, r7, r3
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2658:	2384      	movs	r3, #132	; 0x84
    265a:	18fb      	adds	r3, r7, r3
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	785b      	ldrb	r3, [r3, #1]
    2660:	2b0a      	cmp	r3, #10
    2662:	d01d      	beq.n	26a0 <m2m_wifi_connect_sc+0x2e8>
    2664:	2384      	movs	r3, #132	; 0x84
    2666:	18fb      	adds	r3, r7, r3
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	2b1a      	cmp	r3, #26
    266e:	d017      	beq.n	26a0 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2670:	4a4b      	ldr	r2, [pc, #300]	; (27a0 <m2m_wifi_connect_sc+0x3e8>)
    2672:	493c      	ldr	r1, [pc, #240]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2674:	4b3c      	ldr	r3, [pc, #240]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    2676:	0018      	movs	r0, r3
    2678:	4b3c      	ldr	r3, [pc, #240]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    267a:	4798      	blx	r3
    267c:	2384      	movs	r3, #132	; 0x84
    267e:	18fb      	adds	r3, r7, r3
    2680:	681b      	ldr	r3, [r3, #0]
    2682:	785b      	ldrb	r3, [r3, #1]
    2684:	001a      	movs	r2, r3
    2686:	4b47      	ldr	r3, [pc, #284]	; (27a4 <m2m_wifi_connect_sc+0x3ec>)
    2688:	0011      	movs	r1, r2
    268a:	0018      	movs	r0, r3
    268c:	4b37      	ldr	r3, [pc, #220]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    268e:	4798      	blx	r3
    2690:	200d      	movs	r0, #13
    2692:	4b39      	ldr	r3, [pc, #228]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2694:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2696:	2397      	movs	r3, #151	; 0x97
    2698:	18fb      	adds	r3, r7, r3
    269a:	22f4      	movs	r2, #244	; 0xf4
    269c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    269e:	e0af      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    26a0:	2384      	movs	r3, #132	; 0x84
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	1c98      	adds	r0, r3, #2
    26a8:	2388      	movs	r3, #136	; 0x88
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	1c99      	adds	r1, r3, #2
    26b0:	2388      	movs	r3, #136	; 0x88
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	785b      	ldrb	r3, [r3, #1]
    26b8:	001a      	movs	r2, r3
    26ba:	4b36      	ldr	r3, [pc, #216]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    26bc:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    26be:	2388      	movs	r3, #136	; 0x88
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	681b      	ldr	r3, [r3, #0]
    26c4:	785b      	ldrb	r3, [r3, #1]
    26c6:	001a      	movs	r2, r3
    26c8:	2384      	movs	r3, #132	; 0x84
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	189b      	adds	r3, r3, r2
    26d0:	2200      	movs	r2, #0
    26d2:	709a      	strb	r2, [r3, #2]
    26d4:	e083      	b.n	27de <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    26d6:	230a      	movs	r3, #10
    26d8:	18fb      	adds	r3, r7, r3
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	2b02      	cmp	r3, #2
    26de:	d130      	bne.n	2742 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    26e0:	2382      	movs	r3, #130	; 0x82
    26e2:	18fc      	adds	r4, r7, r3
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	0018      	movs	r0, r3
    26e8:	4b24      	ldr	r3, [pc, #144]	; (277c <m2m_wifi_connect_sc+0x3c4>)
    26ea:	4798      	blx	r3
    26ec:	0003      	movs	r3, r0
    26ee:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    26f0:	2382      	movs	r3, #130	; 0x82
    26f2:	18fb      	adds	r3, r7, r3
    26f4:	881b      	ldrh	r3, [r3, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d004      	beq.n	2704 <m2m_wifi_connect_sc+0x34c>
    26fa:	2382      	movs	r3, #130	; 0x82
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	881b      	ldrh	r3, [r3, #0]
    2700:	2b40      	cmp	r3, #64	; 0x40
    2702:	d911      	bls.n	2728 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    2704:	4a28      	ldr	r2, [pc, #160]	; (27a8 <m2m_wifi_connect_sc+0x3f0>)
    2706:	4917      	ldr	r1, [pc, #92]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2708:	4b17      	ldr	r3, [pc, #92]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    270a:	0018      	movs	r0, r3
    270c:	4b17      	ldr	r3, [pc, #92]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    270e:	4798      	blx	r3
    2710:	4b26      	ldr	r3, [pc, #152]	; (27ac <m2m_wifi_connect_sc+0x3f4>)
    2712:	0018      	movs	r0, r3
    2714:	4b17      	ldr	r3, [pc, #92]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2716:	4798      	blx	r3
    2718:	200d      	movs	r0, #13
    271a:	4b17      	ldr	r3, [pc, #92]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    271c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    271e:	2397      	movs	r3, #151	; 0x97
    2720:	18fb      	adds	r3, r7, r3
    2722:	22f4      	movs	r2, #244	; 0xf4
    2724:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2726:	e06b      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2728:	238c      	movs	r3, #140	; 0x8c
    272a:	18fb      	adds	r3, r7, r3
    272c:	6818      	ldr	r0, [r3, #0]
    272e:	2382      	movs	r3, #130	; 0x82
    2730:	18fb      	adds	r3, r7, r3
    2732:	881b      	ldrh	r3, [r3, #0]
    2734:	3301      	adds	r3, #1
    2736:	001a      	movs	r2, r3
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	0019      	movs	r1, r3
    273c:	4b15      	ldr	r3, [pc, #84]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    273e:	4798      	blx	r3
    2740:	e04d      	b.n	27de <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2742:	230a      	movs	r3, #10
    2744:	18fb      	adds	r3, r7, r3
    2746:	781b      	ldrb	r3, [r3, #0]
    2748:	2b04      	cmp	r3, #4
    274a:	d131      	bne.n	27b0 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    274c:	238c      	movs	r3, #140	; 0x8c
    274e:	18fb      	adds	r3, r7, r3
    2750:	681b      	ldr	r3, [r3, #0]
    2752:	6879      	ldr	r1, [r7, #4]
    2754:	223e      	movs	r2, #62	; 0x3e
    2756:	0018      	movs	r0, r3
    2758:	4b0e      	ldr	r3, [pc, #56]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    275a:	4798      	blx	r3
    275c:	e03f      	b.n	27de <m2m_wifi_connect_sc+0x426>
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00000215 	.word	0x00000215
    2764:	0001bc18 	.word	0x0001bc18
    2768:	0001b874 	.word	0x0001b874
    276c:	0001a001 	.word	0x0001a001
    2770:	0001baa8 	.word	0x0001baa8
    2774:	0001a11d 	.word	0x0001a11d
    2778:	0001a035 	.word	0x0001a035
    277c:	00000b9f 	.word	0x00000b9f
    2780:	00000221 	.word	0x00000221
    2784:	0001babc 	.word	0x0001babc
    2788:	0000022b 	.word	0x0000022b
    278c:	0001bac8 	.word	0x0001bac8
    2790:	0001badc 	.word	0x0001badc
    2794:	00000b25 	.word	0x00000b25
    2798:	0000024b 	.word	0x0000024b
    279c:	0001bae8 	.word	0x0001bae8
    27a0:	00000252 	.word	0x00000252
    27a4:	0001bb04 	.word	0x0001bb04
    27a8:	00000261 	.word	0x00000261
    27ac:	0001bb20 	.word	0x0001bb20
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    27b0:	230a      	movs	r3, #10
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2b01      	cmp	r3, #1
    27b8:	d011      	beq.n	27de <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    27ba:	4a15      	ldr	r2, [pc, #84]	; (2810 <m2m_wifi_connect_sc+0x458>)
    27bc:	4915      	ldr	r1, [pc, #84]	; (2814 <m2m_wifi_connect_sc+0x45c>)
    27be:	4b16      	ldr	r3, [pc, #88]	; (2818 <m2m_wifi_connect_sc+0x460>)
    27c0:	0018      	movs	r0, r3
    27c2:	4b16      	ldr	r3, [pc, #88]	; (281c <m2m_wifi_connect_sc+0x464>)
    27c4:	4798      	blx	r3
    27c6:	4b16      	ldr	r3, [pc, #88]	; (2820 <m2m_wifi_connect_sc+0x468>)
    27c8:	0018      	movs	r0, r3
    27ca:	4b16      	ldr	r3, [pc, #88]	; (2824 <m2m_wifi_connect_sc+0x46c>)
    27cc:	4798      	blx	r3
    27ce:	200d      	movs	r0, #13
    27d0:	4b15      	ldr	r3, [pc, #84]	; (2828 <m2m_wifi_connect_sc+0x470>)
    27d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    27d4:	2397      	movs	r3, #151	; 0x97
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	22f4      	movs	r2, #244	; 0xf4
    27da:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    27dc:	e010      	b.n	2800 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    27de:	2397      	movs	r3, #151	; 0x97
    27e0:	18fc      	adds	r4, r7, r3
    27e2:	2314      	movs	r3, #20
    27e4:	18fa      	adds	r2, r7, r3
    27e6:	2300      	movs	r3, #0
    27e8:	9302      	str	r3, [sp, #8]
    27ea:	2300      	movs	r3, #0
    27ec:	9301      	str	r3, [sp, #4]
    27ee:	2300      	movs	r3, #0
    27f0:	9300      	str	r3, [sp, #0]
    27f2:	236c      	movs	r3, #108	; 0x6c
    27f4:	2128      	movs	r1, #40	; 0x28
    27f6:	2001      	movs	r0, #1
    27f8:	4d0c      	ldr	r5, [pc, #48]	; (282c <m2m_wifi_connect_sc+0x474>)
    27fa:	47a8      	blx	r5
    27fc:	0003      	movs	r3, r0
    27fe:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2800:	2397      	movs	r3, #151	; 0x97
    2802:	18fb      	adds	r3, r7, r3
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	b25b      	sxtb	r3, r3
}
    2808:	0018      	movs	r0, r3
    280a:	46bd      	mov	sp, r7
    280c:	b026      	add	sp, #152	; 0x98
    280e:	bdb0      	pop	{r4, r5, r7, pc}
    2810:	00000271 	.word	0x00000271
    2814:	0001bc18 	.word	0x0001bc18
    2818:	0001b874 	.word	0x0001b874
    281c:	0001a001 	.word	0x0001a001
    2820:	0001bb3c 	.word	0x0001bb3c
    2824:	0001a11d 	.word	0x0001a11d
    2828:	0001a035 	.word	0x0001a035
    282c:	00000dc1 	.word	0x00000dc1

00002830 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2830:	b580      	push	{r7, lr}
    2832:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2834:	2300      	movs	r3, #0
}
    2836:	0018      	movs	r0, r3
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}

0000283c <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
    283c:	b590      	push	{r4, r7, lr}
    283e:	b085      	sub	sp, #20
    2840:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    2842:	2300      	movs	r3, #0
    2844:	9302      	str	r3, [sp, #8]
    2846:	2300      	movs	r3, #0
    2848:	9301      	str	r3, [sp, #4]
    284a:	2300      	movs	r3, #0
    284c:	9300      	str	r3, [sp, #0]
    284e:	2300      	movs	r3, #0
    2850:	2200      	movs	r2, #0
    2852:	211a      	movs	r1, #26
    2854:	2001      	movs	r0, #1
    2856:	4c03      	ldr	r4, [pc, #12]	; (2864 <m2m_wifi_get_sytem_time+0x28>)
    2858:	47a0      	blx	r4
    285a:	0003      	movs	r3, r0
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b001      	add	sp, #4
    2862:	bd90      	pop	{r4, r7, pc}
    2864:	00000dc1 	.word	0x00000dc1

00002868 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2868:	b590      	push	{r4, r7, lr}
    286a:	b087      	sub	sp, #28
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2870:	2317      	movs	r3, #23
    2872:	18fb      	adds	r3, r7, r3
    2874:	2200      	movs	r2, #0
    2876:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    287c:	693b      	ldr	r3, [r7, #16]
    287e:	2280      	movs	r2, #128	; 0x80
    2880:	0052      	lsls	r2, r2, #1
    2882:	4313      	orrs	r3, r2
    2884:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2886:	693a      	ldr	r2, [r7, #16]
    2888:	23a5      	movs	r3, #165	; 0xa5
    288a:	015b      	lsls	r3, r3, #5
    288c:	0011      	movs	r1, r2
    288e:	0018      	movs	r0, r3
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <chip_apply_conf+0x74>)
    2892:	4798      	blx	r3
		if(val32 != 0) {		
    2894:	693b      	ldr	r3, [r7, #16]
    2896:	2b00      	cmp	r3, #0
    2898:	d018      	beq.n	28cc <chip_apply_conf+0x64>
			uint32 reg = 0;
    289a:	2300      	movs	r3, #0
    289c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    289e:	2317      	movs	r3, #23
    28a0:	18fc      	adds	r4, r7, r3
    28a2:	230c      	movs	r3, #12
    28a4:	18fa      	adds	r2, r7, r3
    28a6:	23a5      	movs	r3, #165	; 0xa5
    28a8:	015b      	lsls	r3, r3, #5
    28aa:	0011      	movs	r1, r2
    28ac:	0018      	movs	r0, r3
    28ae:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <chip_apply_conf+0x78>)
    28b0:	4798      	blx	r3
    28b2:	0003      	movs	r3, r0
    28b4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    28b6:	2317      	movs	r3, #23
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	b25b      	sxtb	r3, r3
    28be:	2b00      	cmp	r3, #0
    28c0:	d1e1      	bne.n	2886 <chip_apply_conf+0x1e>
				if(reg == val32)
    28c2:	68fa      	ldr	r2, [r7, #12]
    28c4:	693b      	ldr	r3, [r7, #16]
    28c6:	429a      	cmp	r2, r3
    28c8:	d002      	beq.n	28d0 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    28ca:	e7dc      	b.n	2886 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    28cc:	46c0      	nop			; (mov r8, r8)
    28ce:	e000      	b.n	28d2 <chip_apply_conf+0x6a>
					break;
    28d0:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    28d2:	2300      	movs	r3, #0
}
    28d4:	0018      	movs	r0, r3
    28d6:	46bd      	mov	sp, r7
    28d8:	b007      	add	sp, #28
    28da:	bd90      	pop	{r4, r7, pc}
    28dc:	000030b9 	.word	0x000030b9
    28e0:	00003095 	.word	0x00003095

000028e4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    28e4:	b590      	push	{r4, r7, lr}
    28e6:	b083      	sub	sp, #12
    28e8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    28ea:	2300      	movs	r3, #0
    28ec:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    28ee:	1dfb      	adds	r3, r7, #7
    28f0:	2200      	movs	r2, #0
    28f2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    28f4:	1dfc      	adds	r4, r7, #7
    28f6:	003b      	movs	r3, r7
    28f8:	4a24      	ldr	r2, [pc, #144]	; (298c <enable_interrupts+0xa8>)
    28fa:	0019      	movs	r1, r3
    28fc:	0010      	movs	r0, r2
    28fe:	4b24      	ldr	r3, [pc, #144]	; (2990 <enable_interrupts+0xac>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
    2904:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2906:	1dfb      	adds	r3, r7, #7
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	b25b      	sxtb	r3, r3
    290c:	2b00      	cmp	r3, #0
    290e:	d131      	bne.n	2974 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    2910:	683b      	ldr	r3, [r7, #0]
    2912:	2280      	movs	r2, #128	; 0x80
    2914:	0052      	lsls	r2, r2, #1
    2916:	4313      	orrs	r3, r2
    2918:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    291a:	683b      	ldr	r3, [r7, #0]
    291c:	1dfc      	adds	r4, r7, #7
    291e:	4a1b      	ldr	r2, [pc, #108]	; (298c <enable_interrupts+0xa8>)
    2920:	0019      	movs	r1, r3
    2922:	0010      	movs	r0, r2
    2924:	4b1b      	ldr	r3, [pc, #108]	; (2994 <enable_interrupts+0xb0>)
    2926:	4798      	blx	r3
    2928:	0003      	movs	r3, r0
    292a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    292c:	1dfb      	adds	r3, r7, #7
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	b25b      	sxtb	r3, r3
    2932:	2b00      	cmp	r3, #0
    2934:	d120      	bne.n	2978 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2936:	1dfc      	adds	r4, r7, #7
    2938:	003a      	movs	r2, r7
    293a:	23d0      	movs	r3, #208	; 0xd0
    293c:	015b      	lsls	r3, r3, #5
    293e:	0011      	movs	r1, r2
    2940:	0018      	movs	r0, r3
    2942:	4b13      	ldr	r3, [pc, #76]	; (2990 <enable_interrupts+0xac>)
    2944:	4798      	blx	r3
    2946:	0003      	movs	r3, r0
    2948:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    294a:	1dfb      	adds	r3, r7, #7
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	b25b      	sxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d113      	bne.n	297c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	0252      	lsls	r2, r2, #9
    295a:	4313      	orrs	r3, r2
    295c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    295e:	683a      	ldr	r2, [r7, #0]
    2960:	1dfc      	adds	r4, r7, #7
    2962:	23d0      	movs	r3, #208	; 0xd0
    2964:	015b      	lsls	r3, r3, #5
    2966:	0011      	movs	r1, r2
    2968:	0018      	movs	r0, r3
    296a:	4b0a      	ldr	r3, [pc, #40]	; (2994 <enable_interrupts+0xb0>)
    296c:	4798      	blx	r3
    296e:	0003      	movs	r3, r0
    2970:	7023      	strb	r3, [r4, #0]
    2972:	e004      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2974:	46c0      	nop			; (mov r8, r8)
    2976:	e002      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	e000      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    297c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    297e:	1dfb      	adds	r3, r7, #7
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	b25b      	sxtb	r3, r3
}
    2984:	0018      	movs	r0, r3
    2986:	46bd      	mov	sp, r7
    2988:	b003      	add	sp, #12
    298a:	bd90      	pop	{r4, r7, pc}
    298c:	00001408 	.word	0x00001408
    2990:	00003095 	.word	0x00003095
    2994:	000030b9 	.word	0x000030b9

00002998 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2998:	b580      	push	{r7, lr}
    299a:	b082      	sub	sp, #8
    299c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    299e:	4b32      	ldr	r3, [pc, #200]	; (2a68 <nmi_get_chipid+0xd0>)
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d159      	bne.n	2a5a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    29a6:	4a30      	ldr	r2, [pc, #192]	; (2a68 <nmi_get_chipid+0xd0>)
    29a8:	2380      	movs	r3, #128	; 0x80
    29aa:	015b      	lsls	r3, r3, #5
    29ac:	0011      	movs	r1, r2
    29ae:	0018      	movs	r0, r3
    29b0:	4b2e      	ldr	r3, [pc, #184]	; (2a6c <nmi_get_chipid+0xd4>)
    29b2:	4798      	blx	r3
    29b4:	1e03      	subs	r3, r0, #0
    29b6:	d004      	beq.n	29c2 <nmi_get_chipid+0x2a>
			chipid = 0;
    29b8:	4b2b      	ldr	r3, [pc, #172]	; (2a68 <nmi_get_chipid+0xd0>)
    29ba:	2200      	movs	r2, #0
    29bc:	601a      	str	r2, [r3, #0]
			return 0;
    29be:	2300      	movs	r3, #0
    29c0:	e04d      	b.n	2a5e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    29c2:	1d3b      	adds	r3, r7, #4
    29c4:	4a2a      	ldr	r2, [pc, #168]	; (2a70 <nmi_get_chipid+0xd8>)
    29c6:	0019      	movs	r1, r3
    29c8:	0010      	movs	r0, r2
    29ca:	4b28      	ldr	r3, [pc, #160]	; (2a6c <nmi_get_chipid+0xd4>)
    29cc:	4798      	blx	r3
    29ce:	1e03      	subs	r3, r0, #0
    29d0:	d004      	beq.n	29dc <nmi_get_chipid+0x44>
			chipid = 0;
    29d2:	4b25      	ldr	r3, [pc, #148]	; (2a68 <nmi_get_chipid+0xd0>)
    29d4:	2200      	movs	r2, #0
    29d6:	601a      	str	r2, [r3, #0]
			return 0;
    29d8:	2300      	movs	r3, #0
    29da:	e040      	b.n	2a5e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    29dc:	4b22      	ldr	r3, [pc, #136]	; (2a68 <nmi_get_chipid+0xd0>)
    29de:	681b      	ldr	r3, [r3, #0]
    29e0:	4a24      	ldr	r2, [pc, #144]	; (2a74 <nmi_get_chipid+0xdc>)
    29e2:	4293      	cmp	r3, r2
    29e4:	d106      	bne.n	29f4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	2b01      	cmp	r3, #1
    29ea:	d029      	beq.n	2a40 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    29ec:	4b1e      	ldr	r3, [pc, #120]	; (2a68 <nmi_get_chipid+0xd0>)
    29ee:	4a22      	ldr	r2, [pc, #136]	; (2a78 <nmi_get_chipid+0xe0>)
    29f0:	601a      	str	r2, [r3, #0]
    29f2:	e025      	b.n	2a40 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    29f4:	4b1c      	ldr	r3, [pc, #112]	; (2a68 <nmi_get_chipid+0xd0>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	4a20      	ldr	r2, [pc, #128]	; (2a7c <nmi_get_chipid+0xe4>)
    29fa:	4293      	cmp	r3, r2
    29fc:	d10d      	bne.n	2a1a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2b03      	cmp	r3, #3
    2a02:	d01d      	beq.n	2a40 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	2b04      	cmp	r3, #4
    2a08:	d103      	bne.n	2a12 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    2a0a:	4b17      	ldr	r3, [pc, #92]	; (2a68 <nmi_get_chipid+0xd0>)
    2a0c:	4a1c      	ldr	r2, [pc, #112]	; (2a80 <nmi_get_chipid+0xe8>)
    2a0e:	601a      	str	r2, [r3, #0]
    2a10:	e016      	b.n	2a40 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    2a12:	4b15      	ldr	r3, [pc, #84]	; (2a68 <nmi_get_chipid+0xd0>)
    2a14:	4a1b      	ldr	r2, [pc, #108]	; (2a84 <nmi_get_chipid+0xec>)
    2a16:	601a      	str	r2, [r3, #0]
    2a18:	e012      	b.n	2a40 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    2a1a:	4b13      	ldr	r3, [pc, #76]	; (2a68 <nmi_get_chipid+0xd0>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	4a1a      	ldr	r2, [pc, #104]	; (2a88 <nmi_get_chipid+0xf0>)
    2a20:	4293      	cmp	r3, r2
    2a22:	d10d      	bne.n	2a40 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2a24:	4a10      	ldr	r2, [pc, #64]	; (2a68 <nmi_get_chipid+0xd0>)
    2a26:	23ec      	movs	r3, #236	; 0xec
    2a28:	039b      	lsls	r3, r3, #14
    2a2a:	0011      	movs	r1, r2
    2a2c:	0018      	movs	r0, r3
    2a2e:	4b0f      	ldr	r3, [pc, #60]	; (2a6c <nmi_get_chipid+0xd4>)
    2a30:	4798      	blx	r3
    2a32:	1e03      	subs	r3, r0, #0
    2a34:	d004      	beq.n	2a40 <nmi_get_chipid+0xa8>
			chipid = 0;
    2a36:	4b0c      	ldr	r3, [pc, #48]	; (2a68 <nmi_get_chipid+0xd0>)
    2a38:	2200      	movs	r2, #0
    2a3a:	601a      	str	r2, [r3, #0]
			return 0;
    2a3c:	2300      	movs	r3, #0
    2a3e:	e00e      	b.n	2a5e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    2a40:	4b09      	ldr	r3, [pc, #36]	; (2a68 <nmi_get_chipid+0xd0>)
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	4a11      	ldr	r2, [pc, #68]	; (2a8c <nmi_get_chipid+0xf4>)
    2a46:	401a      	ands	r2, r3
    2a48:	4b07      	ldr	r3, [pc, #28]	; (2a68 <nmi_get_chipid+0xd0>)
    2a4a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2a4c:	4b06      	ldr	r3, [pc, #24]	; (2a68 <nmi_get_chipid+0xd0>)
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	22a0      	movs	r2, #160	; 0xa0
    2a52:	02d2      	lsls	r2, r2, #11
    2a54:	431a      	orrs	r2, r3
    2a56:	4b04      	ldr	r3, [pc, #16]	; (2a68 <nmi_get_chipid+0xd0>)
    2a58:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2a5a:	4b03      	ldr	r3, [pc, #12]	; (2a68 <nmi_get_chipid+0xd0>)
    2a5c:	681b      	ldr	r3, [r3, #0]
}
    2a5e:	0018      	movs	r0, r3
    2a60:	46bd      	mov	sp, r7
    2a62:	b002      	add	sp, #8
    2a64:	bd80      	pop	{r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	200005c8 	.word	0x200005c8
    2a6c:	00003095 	.word	0x00003095
    2a70:	000013f4 	.word	0x000013f4
    2a74:	001002a0 	.word	0x001002a0
    2a78:	001002a1 	.word	0x001002a1
    2a7c:	001002b0 	.word	0x001002b0
    2a80:	001002b1 	.word	0x001002b1
    2a84:	001002b2 	.word	0x001002b2
    2a88:	001000f0 	.word	0x001000f0
    2a8c:	fff0ffff 	.word	0xfff0ffff

00002a90 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2a90:	b590      	push	{r4, r7, lr}
    2a92:	b083      	sub	sp, #12
    2a94:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2a96:	1dfb      	adds	r3, r7, #7
    2a98:	2200      	movs	r2, #0
    2a9a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2a9c:	1dfc      	adds	r4, r7, #7
    2a9e:	003b      	movs	r3, r7
    2aa0:	0019      	movs	r1, r3
    2aa2:	2010      	movs	r0, #16
    2aa4:	4b2e      	ldr	r3, [pc, #184]	; (2b60 <chip_sleep+0xd0>)
    2aa6:	4798      	blx	r3
    2aa8:	0003      	movs	r3, r0
    2aaa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2aac:	1dfb      	adds	r3, r7, #7
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	b25b      	sxtb	r3, r3
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d145      	bne.n	2b42 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    2ab6:	683b      	ldr	r3, [r7, #0]
    2ab8:	2201      	movs	r2, #1
    2aba:	4013      	ands	r3, r2
    2abc:	d000      	beq.n	2ac0 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2abe:	e7ed      	b.n	2a9c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2ac0:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2ac2:	1dfc      	adds	r4, r7, #7
    2ac4:	003b      	movs	r3, r7
    2ac6:	0019      	movs	r1, r3
    2ac8:	2001      	movs	r0, #1
    2aca:	4b25      	ldr	r3, [pc, #148]	; (2b60 <chip_sleep+0xd0>)
    2acc:	4798      	blx	r3
    2ace:	0003      	movs	r3, r0
    2ad0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2ad2:	1dfb      	adds	r3, r7, #7
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	b25b      	sxtb	r3, r3
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d134      	bne.n	2b46 <chip_sleep+0xb6>
	if(reg & NBIT1)
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	2202      	movs	r2, #2
    2ae0:	4013      	ands	r3, r2
    2ae2:	d010      	beq.n	2b06 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    2ae4:	683b      	ldr	r3, [r7, #0]
    2ae6:	2202      	movs	r2, #2
    2ae8:	4393      	bics	r3, r2
    2aea:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	1dfc      	adds	r4, r7, #7
    2af0:	0019      	movs	r1, r3
    2af2:	2001      	movs	r0, #1
    2af4:	4b1b      	ldr	r3, [pc, #108]	; (2b64 <chip_sleep+0xd4>)
    2af6:	4798      	blx	r3
    2af8:	0003      	movs	r3, r0
    2afa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    2afc:	1dfb      	adds	r3, r7, #7
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	b25b      	sxtb	r3, r3
    2b02:	2b00      	cmp	r3, #0
    2b04:	d121      	bne.n	2b4a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2b06:	1dfc      	adds	r4, r7, #7
    2b08:	003b      	movs	r3, r7
    2b0a:	0019      	movs	r1, r3
    2b0c:	200b      	movs	r0, #11
    2b0e:	4b14      	ldr	r3, [pc, #80]	; (2b60 <chip_sleep+0xd0>)
    2b10:	4798      	blx	r3
    2b12:	0003      	movs	r3, r0
    2b14:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2b16:	1dfb      	adds	r3, r7, #7
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	b25b      	sxtb	r3, r3
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d116      	bne.n	2b4e <chip_sleep+0xbe>
	if(reg & NBIT0)
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	2201      	movs	r2, #1
    2b24:	4013      	ands	r3, r2
    2b26:	d013      	beq.n	2b50 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    2b28:	683b      	ldr	r3, [r7, #0]
    2b2a:	2201      	movs	r2, #1
    2b2c:	4393      	bics	r3, r2
    2b2e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2b30:	683b      	ldr	r3, [r7, #0]
    2b32:	1dfc      	adds	r4, r7, #7
    2b34:	0019      	movs	r1, r3
    2b36:	200b      	movs	r0, #11
    2b38:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <chip_sleep+0xd4>)
    2b3a:	4798      	blx	r3
    2b3c:	0003      	movs	r3, r0
    2b3e:	7023      	strb	r3, [r4, #0]
    2b40:	e006      	b.n	2b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	e004      	b.n	2b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	e002      	b.n	2b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	e000      	b.n	2b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2b4e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    2b50:	1dfb      	adds	r3, r7, #7
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	b25b      	sxtb	r3, r3
}
    2b56:	0018      	movs	r0, r3
    2b58:	46bd      	mov	sp, r7
    2b5a:	b003      	add	sp, #12
    2b5c:	bd90      	pop	{r4, r7, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	00003095 	.word	0x00003095
    2b64:	000030b9 	.word	0x000030b9

00002b68 <chip_wake>:
sint8 chip_wake(void)
{
    2b68:	b590      	push	{r4, r7, lr}
    2b6a:	b085      	sub	sp, #20
    2b6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2b6e:	230f      	movs	r3, #15
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2b76:	2300      	movs	r3, #0
    2b78:	607b      	str	r3, [r7, #4]
    2b7a:	2300      	movs	r3, #0
    2b7c:	603b      	str	r3, [r7, #0]
    2b7e:	2300      	movs	r3, #0
    2b80:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2b82:	230f      	movs	r3, #15
    2b84:	18fc      	adds	r4, r7, r3
    2b86:	1d3b      	adds	r3, r7, #4
    2b88:	0019      	movs	r1, r3
    2b8a:	200b      	movs	r0, #11
    2b8c:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <chip_wake+0x158>)
    2b8e:	4798      	blx	r3
    2b90:	0003      	movs	r3, r0
    2b92:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2b94:	230f      	movs	r3, #15
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	b25b      	sxtb	r3, r3
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d000      	beq.n	2ba2 <chip_wake+0x3a>
    2ba0:	e07f      	b.n	2ca2 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	2201      	movs	r2, #1
    2ba6:	4013      	ands	r3, r2
    2ba8:	d110      	bne.n	2bcc <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	2201      	movs	r2, #1
    2bae:	4313      	orrs	r3, r2
    2bb0:	220f      	movs	r2, #15
    2bb2:	18bc      	adds	r4, r7, r2
    2bb4:	0019      	movs	r1, r3
    2bb6:	200b      	movs	r0, #11
    2bb8:	4b42      	ldr	r3, [pc, #264]	; (2cc4 <chip_wake+0x15c>)
    2bba:	4798      	blx	r3
    2bbc:	0003      	movs	r3, r0
    2bbe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2bc0:	230f      	movs	r3, #15
    2bc2:	18fb      	adds	r3, r7, r3
    2bc4:	781b      	ldrb	r3, [r3, #0]
    2bc6:	b25b      	sxtb	r3, r3
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d16c      	bne.n	2ca6 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2bcc:	230f      	movs	r3, #15
    2bce:	18fc      	adds	r4, r7, r3
    2bd0:	1d3b      	adds	r3, r7, #4
    2bd2:	0019      	movs	r1, r3
    2bd4:	2001      	movs	r0, #1
    2bd6:	4b3a      	ldr	r3, [pc, #232]	; (2cc0 <chip_wake+0x158>)
    2bd8:	4798      	blx	r3
    2bda:	0003      	movs	r3, r0
    2bdc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2bde:	230f      	movs	r3, #15
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	b25b      	sxtb	r3, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	d15f      	bne.n	2caa <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	2202      	movs	r2, #2
    2bee:	4013      	ands	r3, r2
    2bf0:	d110      	bne.n	2c14 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	2202      	movs	r2, #2
    2bf6:	4313      	orrs	r3, r2
    2bf8:	220f      	movs	r2, #15
    2bfa:	18bc      	adds	r4, r7, r2
    2bfc:	0019      	movs	r1, r3
    2bfe:	2001      	movs	r0, #1
    2c00:	4b30      	ldr	r3, [pc, #192]	; (2cc4 <chip_wake+0x15c>)
    2c02:	4798      	blx	r3
    2c04:	0003      	movs	r3, r0
    2c06:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2c08:	230f      	movs	r3, #15
    2c0a:	18fb      	adds	r3, r7, r3
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	b25b      	sxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d14c      	bne.n	2cae <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2c14:	230f      	movs	r3, #15
    2c16:	18fc      	adds	r4, r7, r3
    2c18:	003b      	movs	r3, r7
    2c1a:	0019      	movs	r1, r3
    2c1c:	200f      	movs	r0, #15
    2c1e:	4b28      	ldr	r3, [pc, #160]	; (2cc0 <chip_wake+0x158>)
    2c20:	4798      	blx	r3
    2c22:	0003      	movs	r3, r0
    2c24:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    2c26:	230f      	movs	r3, #15
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	b25b      	sxtb	r3, r3
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d013      	beq.n	2c5a <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    2c32:	23aa      	movs	r3, #170	; 0xaa
    2c34:	005a      	lsls	r2, r3, #1
    2c36:	4924      	ldr	r1, [pc, #144]	; (2cc8 <chip_wake+0x160>)
    2c38:	4b24      	ldr	r3, [pc, #144]	; (2ccc <chip_wake+0x164>)
    2c3a:	0018      	movs	r0, r3
    2c3c:	4b24      	ldr	r3, [pc, #144]	; (2cd0 <chip_wake+0x168>)
    2c3e:	4798      	blx	r3
    2c40:	230f      	movs	r3, #15
    2c42:	18fb      	adds	r3, r7, r3
    2c44:	2100      	movs	r1, #0
    2c46:	5659      	ldrsb	r1, [r3, r1]
    2c48:	683a      	ldr	r2, [r7, #0]
    2c4a:	4b22      	ldr	r3, [pc, #136]	; (2cd4 <chip_wake+0x16c>)
    2c4c:	0018      	movs	r0, r3
    2c4e:	4b20      	ldr	r3, [pc, #128]	; (2cd0 <chip_wake+0x168>)
    2c50:	4798      	blx	r3
    2c52:	200d      	movs	r0, #13
    2c54:	4b20      	ldr	r3, [pc, #128]	; (2cd8 <chip_wake+0x170>)
    2c56:	4798      	blx	r3
			goto _WAKE_EXIT;
    2c58:	e02a      	b.n	2cb0 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    2c5a:	683b      	ldr	r3, [r7, #0]
    2c5c:	2204      	movs	r2, #4
    2c5e:	4013      	ands	r3, r2
    2c60:	d11b      	bne.n	2c9a <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    2c62:	2002      	movs	r0, #2
    2c64:	4b1d      	ldr	r3, [pc, #116]	; (2cdc <chip_wake+0x174>)
    2c66:	4798      	blx	r3
		trials++;
    2c68:	68bb      	ldr	r3, [r7, #8]
    2c6a:	3301      	adds	r3, #1
    2c6c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2c6e:	68bb      	ldr	r3, [r7, #8]
    2c70:	2b04      	cmp	r3, #4
    2c72:	d9cf      	bls.n	2c14 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2c74:	23af      	movs	r3, #175	; 0xaf
    2c76:	005a      	lsls	r2, r3, #1
    2c78:	4913      	ldr	r1, [pc, #76]	; (2cc8 <chip_wake+0x160>)
    2c7a:	4b14      	ldr	r3, [pc, #80]	; (2ccc <chip_wake+0x164>)
    2c7c:	0018      	movs	r0, r3
    2c7e:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <chip_wake+0x168>)
    2c80:	4798      	blx	r3
    2c82:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <chip_wake+0x178>)
    2c84:	0018      	movs	r0, r3
    2c86:	4b17      	ldr	r3, [pc, #92]	; (2ce4 <chip_wake+0x17c>)
    2c88:	4798      	blx	r3
    2c8a:	200d      	movs	r0, #13
    2c8c:	4b12      	ldr	r3, [pc, #72]	; (2cd8 <chip_wake+0x170>)
    2c8e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2c90:	230f      	movs	r3, #15
    2c92:	18fb      	adds	r3, r7, r3
    2c94:	22fc      	movs	r2, #252	; 0xfc
    2c96:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2c98:	e00a      	b.n	2cb0 <chip_wake+0x148>
			break;
    2c9a:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2c9c:	4b12      	ldr	r3, [pc, #72]	; (2ce8 <chip_wake+0x180>)
    2c9e:	4798      	blx	r3
    2ca0:	e006      	b.n	2cb0 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	e004      	b.n	2cb0 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	e002      	b.n	2cb0 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	e000      	b.n	2cb0 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2cae:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2cb0:	230f      	movs	r3, #15
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	b25b      	sxtb	r3, r3
}
    2cb8:	0018      	movs	r0, r3
    2cba:	46bd      	mov	sp, r7
    2cbc:	b005      	add	sp, #20
    2cbe:	bd90      	pop	{r4, r7, pc}
    2cc0:	00003095 	.word	0x00003095
    2cc4:	000030b9 	.word	0x000030b9
    2cc8:	0001bcb0 	.word	0x0001bcb0
    2ccc:	0001bc2c 	.word	0x0001bc2c
    2cd0:	0001a001 	.word	0x0001a001
    2cd4:	0001bc40 	.word	0x0001bc40
    2cd8:	0001a035 	.word	0x0001a035
    2cdc:	00000321 	.word	0x00000321
    2ce0:	0001bc58 	.word	0x0001bc58
    2ce4:	0001a11d 	.word	0x0001a11d
    2ce8:	00003055 	.word	0x00003055

00002cec <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2cec:	b580      	push	{r7, lr}
    2cee:	b088      	sub	sp, #32
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	0002      	movs	r2, r0
    2cf4:	1dfb      	adds	r3, r7, #7
    2cf6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2cf8:	2313      	movs	r3, #19
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	2200      	movs	r2, #0
    2cfe:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2d00:	2300      	movs	r3, #0
    2d02:	61fb      	str	r3, [r7, #28]
    2d04:	2300      	movs	r3, #0
    2d06:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    2d08:	2300      	movs	r3, #0
    2d0a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    2d0c:	4b4a      	ldr	r3, [pc, #296]	; (2e38 <wait_for_bootrom+0x14c>)
    2d0e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    2d10:	2300      	movs	r3, #0
    2d12:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2d14:	4b49      	ldr	r3, [pc, #292]	; (2e3c <wait_for_bootrom+0x150>)
    2d16:	0018      	movs	r0, r3
    2d18:	4b49      	ldr	r3, [pc, #292]	; (2e40 <wait_for_bootrom+0x154>)
    2d1a:	4798      	blx	r3
    2d1c:	0003      	movs	r3, r0
    2d1e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    2d20:	69fb      	ldr	r3, [r7, #28]
    2d22:	2b00      	cmp	r3, #0
    2d24:	db03      	blt.n	2d2e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2d26:	2001      	movs	r0, #1
    2d28:	4b46      	ldr	r3, [pc, #280]	; (2e44 <wait_for_bootrom+0x158>)
    2d2a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2d2c:	e7f2      	b.n	2d14 <wait_for_bootrom+0x28>
			break;
    2d2e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2d30:	4b45      	ldr	r3, [pc, #276]	; (2e48 <wait_for_bootrom+0x15c>)
    2d32:	0018      	movs	r0, r3
    2d34:	4b42      	ldr	r3, [pc, #264]	; (2e40 <wait_for_bootrom+0x154>)
    2d36:	4798      	blx	r3
    2d38:	0003      	movs	r3, r0
    2d3a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    2d3c:	69fb      	ldr	r3, [r7, #28]
    2d3e:	2201      	movs	r2, #1
    2d40:	4013      	ands	r3, r2
    2d42:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2d44:	69fb      	ldr	r3, [r7, #28]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d112      	bne.n	2d70 <wait_for_bootrom+0x84>
	{
		reg = 0;
    2d4a:	2300      	movs	r3, #0
    2d4c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    2d4e:	e00b      	b.n	2d68 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    2d50:	2001      	movs	r0, #1
    2d52:	4b3c      	ldr	r3, [pc, #240]	; (2e44 <wait_for_bootrom+0x158>)
    2d54:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    2d56:	4b3d      	ldr	r3, [pc, #244]	; (2e4c <wait_for_bootrom+0x160>)
    2d58:	0018      	movs	r0, r3
    2d5a:	4b39      	ldr	r3, [pc, #228]	; (2e40 <wait_for_bootrom+0x154>)
    2d5c:	4798      	blx	r3
    2d5e:	0003      	movs	r3, r0
    2d60:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    2d62:	69bb      	ldr	r3, [r7, #24]
    2d64:	3301      	adds	r3, #1
    2d66:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    2d68:	69fb      	ldr	r3, [r7, #28]
    2d6a:	4a39      	ldr	r2, [pc, #228]	; (2e50 <wait_for_bootrom+0x164>)
    2d6c:	4293      	cmp	r3, r2
    2d6e:	d1ef      	bne.n	2d50 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2d70:	1dfb      	adds	r3, r7, #7
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	2b02      	cmp	r3, #2
    2d76:	d10d      	bne.n	2d94 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2d78:	4a36      	ldr	r2, [pc, #216]	; (2e54 <wait_for_bootrom+0x168>)
    2d7a:	4b37      	ldr	r3, [pc, #220]	; (2e58 <wait_for_bootrom+0x16c>)
    2d7c:	0011      	movs	r1, r2
    2d7e:	0018      	movs	r0, r3
    2d80:	4b36      	ldr	r3, [pc, #216]	; (2e5c <wait_for_bootrom+0x170>)
    2d82:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2d84:	2380      	movs	r3, #128	; 0x80
    2d86:	035b      	lsls	r3, r3, #13
    2d88:	4a35      	ldr	r2, [pc, #212]	; (2e60 <wait_for_bootrom+0x174>)
    2d8a:	0019      	movs	r1, r3
    2d8c:	0010      	movs	r0, r2
    2d8e:	4b33      	ldr	r3, [pc, #204]	; (2e5c <wait_for_bootrom+0x170>)
    2d90:	4798      	blx	r3
    2d92:	e022      	b.n	2dda <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2d94:	1dfb      	adds	r3, r7, #7
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	2b03      	cmp	r3, #3
    2d9a:	d10b      	bne.n	2db4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2d9c:	4a2d      	ldr	r2, [pc, #180]	; (2e54 <wait_for_bootrom+0x168>)
    2d9e:	4b2e      	ldr	r3, [pc, #184]	; (2e58 <wait_for_bootrom+0x16c>)
    2da0:	0011      	movs	r1, r2
    2da2:	0018      	movs	r0, r3
    2da4:	4b2d      	ldr	r3, [pc, #180]	; (2e5c <wait_for_bootrom+0x170>)
    2da6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2da8:	4b2d      	ldr	r3, [pc, #180]	; (2e60 <wait_for_bootrom+0x174>)
    2daa:	2100      	movs	r1, #0
    2dac:	0018      	movs	r0, r3
    2dae:	4b2b      	ldr	r3, [pc, #172]	; (2e5c <wait_for_bootrom+0x170>)
    2db0:	4798      	blx	r3
    2db2:	e012      	b.n	2dda <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2db4:	1dfb      	adds	r3, r7, #7
    2db6:	781b      	ldrb	r3, [r3, #0]
    2db8:	2b04      	cmp	r3, #4
    2dba:	d108      	bne.n	2dce <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2dbc:	2380      	movs	r3, #128	; 0x80
    2dbe:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2dc0:	68fb      	ldr	r3, [r7, #12]
    2dc2:	4a27      	ldr	r2, [pc, #156]	; (2e60 <wait_for_bootrom+0x174>)
    2dc4:	0019      	movs	r1, r3
    2dc6:	0010      	movs	r0, r2
    2dc8:	4b24      	ldr	r3, [pc, #144]	; (2e5c <wait_for_bootrom+0x170>)
    2dca:	4798      	blx	r3
    2dcc:	e005      	b.n	2dda <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	4a23      	ldr	r2, [pc, #140]	; (2e60 <wait_for_bootrom+0x174>)
    2dd2:	0019      	movs	r1, r3
    2dd4:	0010      	movs	r0, r2
    2dd6:	4b21      	ldr	r3, [pc, #132]	; (2e5c <wait_for_bootrom+0x170>)
    2dd8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2dda:	4b22      	ldr	r3, [pc, #136]	; (2e64 <wait_for_bootrom+0x178>)
    2ddc:	4798      	blx	r3
    2dde:	0003      	movs	r3, r0
    2de0:	051b      	lsls	r3, r3, #20
    2de2:	0d1b      	lsrs	r3, r3, #20
    2de4:	4a20      	ldr	r2, [pc, #128]	; (2e68 <wait_for_bootrom+0x17c>)
    2de6:	4293      	cmp	r3, r2
    2de8:	d906      	bls.n	2df8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2dea:	697b      	ldr	r3, [r7, #20]
    2dec:	2202      	movs	r2, #2
    2dee:	4313      	orrs	r3, r2
    2df0:	0018      	movs	r0, r3
    2df2:	4b1e      	ldr	r3, [pc, #120]	; (2e6c <wait_for_bootrom+0x180>)
    2df4:	4798      	blx	r3
    2df6:	e003      	b.n	2e00 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    2df8:	697b      	ldr	r3, [r7, #20]
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b1b      	ldr	r3, [pc, #108]	; (2e6c <wait_for_bootrom+0x180>)
    2dfe:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2e00:	4b1b      	ldr	r3, [pc, #108]	; (2e70 <wait_for_bootrom+0x184>)
    2e02:	0018      	movs	r0, r3
    2e04:	4b1b      	ldr	r3, [pc, #108]	; (2e74 <wait_for_bootrom+0x188>)
    2e06:	4798      	blx	r3
    2e08:	68fa      	ldr	r2, [r7, #12]
    2e0a:	4b1b      	ldr	r3, [pc, #108]	; (2e78 <wait_for_bootrom+0x18c>)
    2e0c:	0011      	movs	r1, r2
    2e0e:	0018      	movs	r0, r3
    2e10:	4b18      	ldr	r3, [pc, #96]	; (2e74 <wait_for_bootrom+0x188>)
    2e12:	4798      	blx	r3
    2e14:	200d      	movs	r0, #13
    2e16:	4b19      	ldr	r3, [pc, #100]	; (2e7c <wait_for_bootrom+0x190>)
    2e18:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2e1a:	4a19      	ldr	r2, [pc, #100]	; (2e80 <wait_for_bootrom+0x194>)
    2e1c:	4b0b      	ldr	r3, [pc, #44]	; (2e4c <wait_for_bootrom+0x160>)
    2e1e:	0011      	movs	r1, r2
    2e20:	0018      	movs	r0, r3
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <wait_for_bootrom+0x170>)
    2e24:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2e26:	2313      	movs	r3, #19
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	b25b      	sxtb	r3, r3
}
    2e2e:	0018      	movs	r0, r3
    2e30:	46bd      	mov	sp, r7
    2e32:	b008      	add	sp, #32
    2e34:	bd80      	pop	{r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	13541354 	.word	0x13541354
    2e3c:	00001014 	.word	0x00001014
    2e40:	00003075 	.word	0x00003075
    2e44:	00000321 	.word	0x00000321
    2e48:	000207bc 	.word	0x000207bc
    2e4c:	000c000c 	.word	0x000c000c
    2e50:	10add09e 	.word	0x10add09e
    2e54:	3c1cd57d 	.word	0x3c1cd57d
    2e58:	000207ac 	.word	0x000207ac
    2e5c:	000030b9 	.word	0x000030b9
    2e60:	0000108c 	.word	0x0000108c
    2e64:	00002999 	.word	0x00002999
    2e68:	0000039f 	.word	0x0000039f
    2e6c:	00002869 	.word	0x00002869
    2e70:	0001bc74 	.word	0x0001bc74
    2e74:	0001a001 	.word	0x0001a001
    2e78:	0001bc80 	.word	0x0001bc80
    2e7c:	0001a035 	.word	0x0001a035
    2e80:	ef522f61 	.word	0xef522f61

00002e84 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2e84:	b580      	push	{r7, lr}
    2e86:	b088      	sub	sp, #32
    2e88:	af00      	add	r7, sp, #0
    2e8a:	0002      	movs	r2, r0
    2e8c:	1dfb      	adds	r3, r7, #7
    2e8e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2e90:	231f      	movs	r3, #31
    2e92:	18fb      	adds	r3, r7, r3
    2e94:	2200      	movs	r2, #0
    2e96:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2e98:	2300      	movs	r3, #0
    2e9a:	61bb      	str	r3, [r7, #24]
    2e9c:	2300      	movs	r3, #0
    2e9e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2ea0:	2301      	movs	r3, #1
    2ea2:	425b      	negs	r3, r3
    2ea4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2ea6:	4b1d      	ldr	r3, [pc, #116]	; (2f1c <wait_for_firmware_start+0x98>)
    2ea8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2eaa:	4b1d      	ldr	r3, [pc, #116]	; (2f20 <wait_for_firmware_start+0x9c>)
    2eac:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2eae:	1dfb      	adds	r3, r7, #7
    2eb0:	781b      	ldrb	r3, [r3, #0]
    2eb2:	2b02      	cmp	r3, #2
    2eb4:	d003      	beq.n	2ebe <wait_for_firmware_start+0x3a>
    2eb6:	1dfb      	adds	r3, r7, #7
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b03      	cmp	r3, #3
    2ebc:	d119      	bne.n	2ef2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2ebe:	4b19      	ldr	r3, [pc, #100]	; (2f24 <wait_for_firmware_start+0xa0>)
    2ec0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2ec2:	4b19      	ldr	r3, [pc, #100]	; (2f28 <wait_for_firmware_start+0xa4>)
    2ec4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2ec6:	e014      	b.n	2ef2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2ec8:	2002      	movs	r0, #2
    2eca:	4b18      	ldr	r3, [pc, #96]	; (2f2c <wait_for_firmware_start+0xa8>)
    2ecc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2ece:	68fb      	ldr	r3, [r7, #12]
    2ed0:	0018      	movs	r0, r3
    2ed2:	4b17      	ldr	r3, [pc, #92]	; (2f30 <wait_for_firmware_start+0xac>)
    2ed4:	4798      	blx	r3
    2ed6:	0003      	movs	r3, r0
    2ed8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2eda:	697b      	ldr	r3, [r7, #20]
    2edc:	3301      	adds	r3, #1
    2ede:	617b      	str	r3, [r7, #20]
    2ee0:	697a      	ldr	r2, [r7, #20]
    2ee2:	693b      	ldr	r3, [r7, #16]
    2ee4:	429a      	cmp	r2, r3
    2ee6:	d304      	bcc.n	2ef2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2ee8:	231f      	movs	r3, #31
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	22fb      	movs	r2, #251	; 0xfb
    2eee:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2ef0:	e00c      	b.n	2f0c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2ef2:	68ba      	ldr	r2, [r7, #8]
    2ef4:	69bb      	ldr	r3, [r7, #24]
    2ef6:	429a      	cmp	r2, r3
    2ef8:	d1e6      	bne.n	2ec8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2efa:	68bb      	ldr	r3, [r7, #8]
    2efc:	4a08      	ldr	r2, [pc, #32]	; (2f20 <wait_for_firmware_start+0x9c>)
    2efe:	4293      	cmp	r3, r2
    2f00:	d104      	bne.n	2f0c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2f02:	4b06      	ldr	r3, [pc, #24]	; (2f1c <wait_for_firmware_start+0x98>)
    2f04:	2100      	movs	r1, #0
    2f06:	0018      	movs	r0, r3
    2f08:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <wait_for_firmware_start+0xb0>)
    2f0a:	4798      	blx	r3
	}
ERR:
	return ret;
    2f0c:	231f      	movs	r3, #31
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	b25b      	sxtb	r3, r3
}
    2f14:	0018      	movs	r0, r3
    2f16:	46bd      	mov	sp, r7
    2f18:	b008      	add	sp, #32
    2f1a:	bd80      	pop	{r7, pc}
    2f1c:	0000108c 	.word	0x0000108c
    2f20:	02532636 	.word	0x02532636
    2f24:	000207ac 	.word	0x000207ac
    2f28:	d75dc1c3 	.word	0xd75dc1c3
    2f2c:	00000321 	.word	0x00000321
    2f30:	00003075 	.word	0x00003075
    2f34:	000030b9 	.word	0x000030b9

00002f38 <chip_deinit>:

sint8 chip_deinit(void)
{
    2f38:	b590      	push	{r4, r7, lr}
    2f3a:	b083      	sub	sp, #12
    2f3c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2f3e:	2300      	movs	r3, #0
    2f40:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2f42:	1dfc      	adds	r4, r7, #7
    2f44:	003a      	movs	r2, r7
    2f46:	23a0      	movs	r3, #160	; 0xa0
    2f48:	015b      	lsls	r3, r3, #5
    2f4a:	0011      	movs	r1, r2
    2f4c:	0018      	movs	r0, r3
    2f4e:	4b1f      	ldr	r3, [pc, #124]	; (2fcc <chip_deinit+0x94>)
    2f50:	4798      	blx	r3
    2f52:	0003      	movs	r3, r0
    2f54:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2f56:	1dfb      	adds	r3, r7, #7
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25b      	sxtb	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d00d      	beq.n	2f7c <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2f60:	4a1b      	ldr	r2, [pc, #108]	; (2fd0 <chip_deinit+0x98>)
    2f62:	491c      	ldr	r1, [pc, #112]	; (2fd4 <chip_deinit+0x9c>)
    2f64:	4b1c      	ldr	r3, [pc, #112]	; (2fd8 <chip_deinit+0xa0>)
    2f66:	0018      	movs	r0, r3
    2f68:	4b1c      	ldr	r3, [pc, #112]	; (2fdc <chip_deinit+0xa4>)
    2f6a:	4798      	blx	r3
    2f6c:	4b1c      	ldr	r3, [pc, #112]	; (2fe0 <chip_deinit+0xa8>)
    2f6e:	0018      	movs	r0, r3
    2f70:	4b1c      	ldr	r3, [pc, #112]	; (2fe4 <chip_deinit+0xac>)
    2f72:	4798      	blx	r3
    2f74:	200d      	movs	r0, #13
    2f76:	4b1c      	ldr	r3, [pc, #112]	; (2fe8 <chip_deinit+0xb0>)
    2f78:	4798      	blx	r3
		goto ERR1;
    2f7a:	e020      	b.n	2fbe <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2f7c:	683b      	ldr	r3, [r7, #0]
    2f7e:	4a1b      	ldr	r2, [pc, #108]	; (2fec <chip_deinit+0xb4>)
    2f80:	4013      	ands	r3, r2
    2f82:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2f84:	683a      	ldr	r2, [r7, #0]
    2f86:	1dfc      	adds	r4, r7, #7
    2f88:	23a0      	movs	r3, #160	; 0xa0
    2f8a:	015b      	lsls	r3, r3, #5
    2f8c:	0011      	movs	r1, r2
    2f8e:	0018      	movs	r0, r3
    2f90:	4b17      	ldr	r3, [pc, #92]	; (2ff0 <chip_deinit+0xb8>)
    2f92:	4798      	blx	r3
    2f94:	0003      	movs	r3, r0
    2f96:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2f98:	1dfb      	adds	r3, r7, #7
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	b25b      	sxtb	r3, r3
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d00d      	beq.n	2fbe <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2fa2:	4a14      	ldr	r2, [pc, #80]	; (2ff4 <chip_deinit+0xbc>)
    2fa4:	490b      	ldr	r1, [pc, #44]	; (2fd4 <chip_deinit+0x9c>)
    2fa6:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <chip_deinit+0xa0>)
    2fa8:	0018      	movs	r0, r3
    2faa:	4b0c      	ldr	r3, [pc, #48]	; (2fdc <chip_deinit+0xa4>)
    2fac:	4798      	blx	r3
    2fae:	4b0c      	ldr	r3, [pc, #48]	; (2fe0 <chip_deinit+0xa8>)
    2fb0:	0018      	movs	r0, r3
    2fb2:	4b0c      	ldr	r3, [pc, #48]	; (2fe4 <chip_deinit+0xac>)
    2fb4:	4798      	blx	r3
    2fb6:	200d      	movs	r0, #13
    2fb8:	4b0b      	ldr	r3, [pc, #44]	; (2fe8 <chip_deinit+0xb0>)
    2fba:	4798      	blx	r3
		goto ERR1;
    2fbc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2fbe:	1dfb      	adds	r3, r7, #7
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	b25b      	sxtb	r3, r3
}
    2fc4:	0018      	movs	r0, r3
    2fc6:	46bd      	mov	sp, r7
    2fc8:	b003      	add	sp, #12
    2fca:	bd90      	pop	{r4, r7, pc}
    2fcc:	00003095 	.word	0x00003095
    2fd0:	00000205 	.word	0x00000205
    2fd4:	0001bcbc 	.word	0x0001bcbc
    2fd8:	0001bc2c 	.word	0x0001bc2c
    2fdc:	0001a001 	.word	0x0001a001
    2fe0:	0001bc98 	.word	0x0001bc98
    2fe4:	0001a11d 	.word	0x0001a11d
    2fe8:	0001a035 	.word	0x0001a035
    2fec:	fffffbff 	.word	0xfffffbff
    2ff0:	000030b9 	.word	0x000030b9
    2ff4:	0000020b 	.word	0x0000020b

00002ff8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2ff8:	b590      	push	{r4, r7, lr}
    2ffa:	b085      	sub	sp, #20
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3000:	230f      	movs	r3, #15
    3002:	18fb      	adds	r3, r7, r3
    3004:	2200      	movs	r2, #0
    3006:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    3008:	230f      	movs	r3, #15
    300a:	18fc      	adds	r4, r7, r3
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	0018      	movs	r0, r3
    3010:	4b05      	ldr	r3, [pc, #20]	; (3028 <nm_bus_iface_init+0x30>)
    3012:	4798      	blx	r3
    3014:	0003      	movs	r3, r0
    3016:	7023      	strb	r3, [r4, #0]
	return ret;
    3018:	230f      	movs	r3, #15
    301a:	18fb      	adds	r3, r7, r3
    301c:	781b      	ldrb	r3, [r3, #0]
    301e:	b25b      	sxtb	r3, r3
}
    3020:	0018      	movs	r0, r3
    3022:	46bd      	mov	sp, r7
    3024:	b005      	add	sp, #20
    3026:	bd90      	pop	{r4, r7, pc}
    3028:	00000959 	.word	0x00000959

0000302c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    302c:	b590      	push	{r4, r7, lr}
    302e:	b083      	sub	sp, #12
    3030:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3032:	1dfb      	adds	r3, r7, #7
    3034:	2200      	movs	r2, #0
    3036:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    3038:	1dfc      	adds	r4, r7, #7
    303a:	4b05      	ldr	r3, [pc, #20]	; (3050 <nm_bus_iface_deinit+0x24>)
    303c:	4798      	blx	r3
    303e:	0003      	movs	r3, r0
    3040:	7023      	strb	r3, [r4, #0]

	return ret;
    3042:	1dfb      	adds	r3, r7, #7
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	b25b      	sxtb	r3, r3
}
    3048:	0018      	movs	r0, r3
    304a:	46bd      	mov	sp, r7
    304c:	b003      	add	sp, #12
    304e:	bd90      	pop	{r4, r7, pc}
    3050:	00000ae1 	.word	0x00000ae1

00003054 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    3054:	b580      	push	{r7, lr}
    3056:	b082      	sub	sp, #8
    3058:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    305a:	1dfb      	adds	r3, r7, #7
    305c:	2200      	movs	r2, #0
    305e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    3060:	4b03      	ldr	r3, [pc, #12]	; (3070 <nm_bus_reset+0x1c>)
    3062:	4798      	blx	r3
    3064:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    3066:	0018      	movs	r0, r3
    3068:	46bd      	mov	sp, r7
    306a:	b002      	add	sp, #8
    306c:	bd80      	pop	{r7, pc}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	0000496d 	.word	0x0000496d

00003074 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    3074:	b580      	push	{r7, lr}
    3076:	b082      	sub	sp, #8
    3078:	af00      	add	r7, sp, #0
    307a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	0018      	movs	r0, r3
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <nm_read_reg+0x1c>)
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    3086:	0018      	movs	r0, r3
    3088:	46bd      	mov	sp, r7
    308a:	b002      	add	sp, #8
    308c:	bd80      	pop	{r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	00004905 	.word	0x00004905

00003094 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    309e:	683a      	ldr	r2, [r7, #0]
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	0011      	movs	r1, r2
    30a4:	0018      	movs	r0, r3
    30a6:	4b03      	ldr	r3, [pc, #12]	; (30b4 <nm_read_reg_with_ret+0x20>)
    30a8:	4798      	blx	r3
    30aa:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    30ac:	0018      	movs	r0, r3
    30ae:	46bd      	mov	sp, r7
    30b0:	b002      	add	sp, #8
    30b2:	bd80      	pop	{r7, pc}
    30b4:	00004b01 	.word	0x00004b01

000030b8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
    30c0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    30c2:	683a      	ldr	r2, [r7, #0]
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	0011      	movs	r1, r2
    30c8:	0018      	movs	r0, r3
    30ca:	4b03      	ldr	r3, [pc, #12]	; (30d8 <nm_write_reg+0x20>)
    30cc:	4798      	blx	r3
    30ce:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    30d0:	0018      	movs	r0, r3
    30d2:	46bd      	mov	sp, r7
    30d4:	b002      	add	sp, #8
    30d6:	bd80      	pop	{r7, pc}
    30d8:	00004b51 	.word	0x00004b51

000030dc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b084      	sub	sp, #16
    30e0:	af00      	add	r7, sp, #0
    30e2:	60f8      	str	r0, [r7, #12]
    30e4:	60b9      	str	r1, [r7, #8]
    30e6:	1dbb      	adds	r3, r7, #6
    30e8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    30ea:	1dbb      	adds	r3, r7, #6
    30ec:	881a      	ldrh	r2, [r3, #0]
    30ee:	68b9      	ldr	r1, [r7, #8]
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	0018      	movs	r0, r3
    30f4:	4b03      	ldr	r3, [pc, #12]	; (3104 <p_nm_read_block+0x28>)
    30f6:	4798      	blx	r3
    30f8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b004      	add	sp, #16
    3100:	bd80      	pop	{r7, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	00004ba1 	.word	0x00004ba1

00003108 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3108:	b580      	push	{r7, lr}
    310a:	b086      	sub	sp, #24
    310c:	af00      	add	r7, sp, #0
    310e:	60f8      	str	r0, [r7, #12]
    3110:	60b9      	str	r1, [r7, #8]
    3112:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    3114:	4b2d      	ldr	r3, [pc, #180]	; (31cc <nm_read_block+0xc4>)
    3116:	881a      	ldrh	r2, [r3, #0]
    3118:	2310      	movs	r3, #16
    311a:	18fb      	adds	r3, r7, r3
    311c:	3a08      	subs	r2, #8
    311e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3120:	2300      	movs	r3, #0
    3122:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    3124:	2313      	movs	r3, #19
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    312c:	2310      	movs	r3, #16
    312e:	18fb      	adds	r3, r7, r3
    3130:	881a      	ldrh	r2, [r3, #0]
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	429a      	cmp	r2, r3
    3136:	d313      	bcc.n	3160 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3138:	68ba      	ldr	r2, [r7, #8]
    313a:	697b      	ldr	r3, [r7, #20]
    313c:	18d1      	adds	r1, r2, r3
    313e:	687b      	ldr	r3, [r7, #4]
    3140:	b29a      	uxth	r2, r3
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	0018      	movs	r0, r3
    3146:	4b22      	ldr	r3, [pc, #136]	; (31d0 <nm_read_block+0xc8>)
    3148:	4798      	blx	r3
    314a:	0003      	movs	r3, r0
    314c:	b2da      	uxtb	r2, r3
    314e:	2313      	movs	r3, #19
    3150:	18fb      	adds	r3, r7, r3
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	18d3      	adds	r3, r2, r3
    3156:	b2da      	uxtb	r2, r3
    3158:	2313      	movs	r3, #19
    315a:	18fb      	adds	r3, r7, r3
    315c:	701a      	strb	r2, [r3, #0]
			break;
    315e:	e02d      	b.n	31bc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3160:	68ba      	ldr	r2, [r7, #8]
    3162:	697b      	ldr	r3, [r7, #20]
    3164:	18d1      	adds	r1, r2, r3
    3166:	2310      	movs	r3, #16
    3168:	18fb      	adds	r3, r7, r3
    316a:	881a      	ldrh	r2, [r3, #0]
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	0018      	movs	r0, r3
    3170:	4b17      	ldr	r3, [pc, #92]	; (31d0 <nm_read_block+0xc8>)
    3172:	4798      	blx	r3
    3174:	0003      	movs	r3, r0
    3176:	b2da      	uxtb	r2, r3
    3178:	2313      	movs	r3, #19
    317a:	18fb      	adds	r3, r7, r3
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	18d3      	adds	r3, r2, r3
    3180:	b2da      	uxtb	r2, r3
    3182:	2313      	movs	r3, #19
    3184:	18fb      	adds	r3, r7, r3
    3186:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3188:	2313      	movs	r3, #19
    318a:	18fb      	adds	r3, r7, r3
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	b25b      	sxtb	r3, r3
    3190:	2b00      	cmp	r3, #0
    3192:	d112      	bne.n	31ba <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    3194:	2310      	movs	r3, #16
    3196:	18fb      	adds	r3, r7, r3
    3198:	881b      	ldrh	r3, [r3, #0]
    319a:	687a      	ldr	r2, [r7, #4]
    319c:	1ad3      	subs	r3, r2, r3
    319e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    31a0:	2310      	movs	r3, #16
    31a2:	18fb      	adds	r3, r7, r3
    31a4:	881b      	ldrh	r3, [r3, #0]
    31a6:	697a      	ldr	r2, [r7, #20]
    31a8:	18d3      	adds	r3, r2, r3
    31aa:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    31ac:	2310      	movs	r3, #16
    31ae:	18fb      	adds	r3, r7, r3
    31b0:	881b      	ldrh	r3, [r3, #0]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	18d3      	adds	r3, r2, r3
    31b6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    31b8:	e7b8      	b.n	312c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    31ba:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    31bc:	2313      	movs	r3, #19
    31be:	18fb      	adds	r3, r7, r3
    31c0:	781b      	ldrb	r3, [r3, #0]
    31c2:	b25b      	sxtb	r3, r3
}
    31c4:	0018      	movs	r0, r3
    31c6:	46bd      	mov	sp, r7
    31c8:	b006      	add	sp, #24
    31ca:	bd80      	pop	{r7, pc}
    31cc:	20000000 	.word	0x20000000
    31d0:	000030dd 	.word	0x000030dd

000031d4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	af00      	add	r7, sp, #0
    31da:	60f8      	str	r0, [r7, #12]
    31dc:	60b9      	str	r1, [r7, #8]
    31de:	1dbb      	adds	r3, r7, #6
    31e0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    31e2:	1dbb      	adds	r3, r7, #6
    31e4:	881a      	ldrh	r2, [r3, #0]
    31e6:	68b9      	ldr	r1, [r7, #8]
    31e8:	68fb      	ldr	r3, [r7, #12]
    31ea:	0018      	movs	r0, r3
    31ec:	4b03      	ldr	r3, [pc, #12]	; (31fc <p_nm_write_block+0x28>)
    31ee:	4798      	blx	r3
    31f0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    31f2:	0018      	movs	r0, r3
    31f4:	46bd      	mov	sp, r7
    31f6:	b004      	add	sp, #16
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00004bf9 	.word	0x00004bf9

00003200 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3200:	b580      	push	{r7, lr}
    3202:	b086      	sub	sp, #24
    3204:	af00      	add	r7, sp, #0
    3206:	60f8      	str	r0, [r7, #12]
    3208:	60b9      	str	r1, [r7, #8]
    320a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    320c:	4b2d      	ldr	r3, [pc, #180]	; (32c4 <nm_write_block+0xc4>)
    320e:	881a      	ldrh	r2, [r3, #0]
    3210:	2310      	movs	r3, #16
    3212:	18fb      	adds	r3, r7, r3
    3214:	3a08      	subs	r2, #8
    3216:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3218:	2300      	movs	r3, #0
    321a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    321c:	2313      	movs	r3, #19
    321e:	18fb      	adds	r3, r7, r3
    3220:	2200      	movs	r2, #0
    3222:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3224:	2310      	movs	r3, #16
    3226:	18fb      	adds	r3, r7, r3
    3228:	881a      	ldrh	r2, [r3, #0]
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	429a      	cmp	r2, r3
    322e:	d313      	bcc.n	3258 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3230:	68ba      	ldr	r2, [r7, #8]
    3232:	697b      	ldr	r3, [r7, #20]
    3234:	18d1      	adds	r1, r2, r3
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	b29a      	uxth	r2, r3
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	0018      	movs	r0, r3
    323e:	4b22      	ldr	r3, [pc, #136]	; (32c8 <nm_write_block+0xc8>)
    3240:	4798      	blx	r3
    3242:	0003      	movs	r3, r0
    3244:	b2da      	uxtb	r2, r3
    3246:	2313      	movs	r3, #19
    3248:	18fb      	adds	r3, r7, r3
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	18d3      	adds	r3, r2, r3
    324e:	b2da      	uxtb	r2, r3
    3250:	2313      	movs	r3, #19
    3252:	18fb      	adds	r3, r7, r3
    3254:	701a      	strb	r2, [r3, #0]
			break;
    3256:	e02d      	b.n	32b4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3258:	68ba      	ldr	r2, [r7, #8]
    325a:	697b      	ldr	r3, [r7, #20]
    325c:	18d1      	adds	r1, r2, r3
    325e:	2310      	movs	r3, #16
    3260:	18fb      	adds	r3, r7, r3
    3262:	881a      	ldrh	r2, [r3, #0]
    3264:	68fb      	ldr	r3, [r7, #12]
    3266:	0018      	movs	r0, r3
    3268:	4b17      	ldr	r3, [pc, #92]	; (32c8 <nm_write_block+0xc8>)
    326a:	4798      	blx	r3
    326c:	0003      	movs	r3, r0
    326e:	b2da      	uxtb	r2, r3
    3270:	2313      	movs	r3, #19
    3272:	18fb      	adds	r3, r7, r3
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	18d3      	adds	r3, r2, r3
    3278:	b2da      	uxtb	r2, r3
    327a:	2313      	movs	r3, #19
    327c:	18fb      	adds	r3, r7, r3
    327e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3280:	2313      	movs	r3, #19
    3282:	18fb      	adds	r3, r7, r3
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	b25b      	sxtb	r3, r3
    3288:	2b00      	cmp	r3, #0
    328a:	d112      	bne.n	32b2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    328c:	2310      	movs	r3, #16
    328e:	18fb      	adds	r3, r7, r3
    3290:	881b      	ldrh	r3, [r3, #0]
    3292:	687a      	ldr	r2, [r7, #4]
    3294:	1ad3      	subs	r3, r2, r3
    3296:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    3298:	2310      	movs	r3, #16
    329a:	18fb      	adds	r3, r7, r3
    329c:	881b      	ldrh	r3, [r3, #0]
    329e:	697a      	ldr	r2, [r7, #20]
    32a0:	18d3      	adds	r3, r2, r3
    32a2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    32a4:	2310      	movs	r3, #16
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	881b      	ldrh	r3, [r3, #0]
    32aa:	68fa      	ldr	r2, [r7, #12]
    32ac:	18d3      	adds	r3, r2, r3
    32ae:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    32b0:	e7b8      	b.n	3224 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    32b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    32b4:	2313      	movs	r3, #19
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	781b      	ldrb	r3, [r3, #0]
    32ba:	b25b      	sxtb	r3, r3
}
    32bc:	0018      	movs	r0, r3
    32be:	46bd      	mov	sp, r7
    32c0:	b006      	add	sp, #24
    32c2:	bd80      	pop	{r7, pc}
    32c4:	20000000 	.word	0x20000000
    32c8:	000031d5 	.word	0x000031d5

000032cc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    32cc:	b590      	push	{r4, r7, lr}
    32ce:	b089      	sub	sp, #36	; 0x24
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    32d4:	2300      	movs	r3, #0
    32d6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    32d8:	231f      	movs	r3, #31
    32da:	18fb      	adds	r3, r7, r3
    32dc:	2200      	movs	r2, #0
    32de:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    32e0:	230c      	movs	r3, #12
    32e2:	18fb      	adds	r3, r7, r3
    32e4:	0018      	movs	r0, r3
    32e6:	2308      	movs	r3, #8
    32e8:	001a      	movs	r2, r3
    32ea:	2100      	movs	r1, #0
    32ec:	4b64      	ldr	r3, [pc, #400]	; (3480 <nm_get_firmware_full_info+0x1b4>)
    32ee:	4798      	blx	r3
	if (pstrRev != NULL)
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d100      	bne.n	32f8 <nm_get_firmware_full_info+0x2c>
    32f6:	e0ba      	b.n	346e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	2228      	movs	r2, #40	; 0x28
    32fc:	2100      	movs	r1, #0
    32fe:	0018      	movs	r0, r3
    3300:	4b60      	ldr	r3, [pc, #384]	; (3484 <nm_get_firmware_full_info+0x1b8>)
    3302:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    3304:	231f      	movs	r3, #31
    3306:	18fc      	adds	r4, r7, r3
    3308:	2314      	movs	r3, #20
    330a:	18fb      	adds	r3, r7, r3
    330c:	4a5e      	ldr	r2, [pc, #376]	; (3488 <nm_get_firmware_full_info+0x1bc>)
    330e:	0019      	movs	r1, r3
    3310:	0010      	movs	r0, r2
    3312:	4b5e      	ldr	r3, [pc, #376]	; (348c <nm_get_firmware_full_info+0x1c0>)
    3314:	4798      	blx	r3
    3316:	0003      	movs	r3, r0
    3318:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    331a:	231f      	movs	r3, #31
    331c:	18fb      	adds	r3, r7, r3
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	b25b      	sxtb	r3, r3
    3322:	2b00      	cmp	r3, #0
    3324:	d000      	beq.n	3328 <nm_get_firmware_full_info+0x5c>
    3326:	e0a2      	b.n	346e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    3328:	697b      	ldr	r3, [r7, #20]
    332a:	2b00      	cmp	r3, #0
    332c:	d100      	bne.n	3330 <nm_get_firmware_full_info+0x64>
    332e:	e09a      	b.n	3466 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    3330:	697b      	ldr	r3, [r7, #20]
    3332:	22c0      	movs	r2, #192	; 0xc0
    3334:	0292      	lsls	r2, r2, #10
    3336:	4313      	orrs	r3, r2
    3338:	221f      	movs	r2, #31
    333a:	18bc      	adds	r4, r7, r2
    333c:	220c      	movs	r2, #12
    333e:	18b9      	adds	r1, r7, r2
    3340:	2208      	movs	r2, #8
    3342:	0018      	movs	r0, r3
    3344:	4b52      	ldr	r3, [pc, #328]	; (3490 <nm_get_firmware_full_info+0x1c4>)
    3346:	4798      	blx	r3
    3348:	0003      	movs	r3, r0
    334a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    334c:	231f      	movs	r3, #31
    334e:	18fb      	adds	r3, r7, r3
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	b25b      	sxtb	r3, r3
    3354:	2b00      	cmp	r3, #0
    3356:	d000      	beq.n	335a <nm_get_firmware_full_info+0x8e>
    3358:	e089      	b.n	346e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    335a:	230c      	movs	r3, #12
    335c:	18fb      	adds	r3, r7, r3
    335e:	685b      	ldr	r3, [r3, #4]
    3360:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    3362:	697b      	ldr	r3, [r7, #20]
    3364:	041b      	lsls	r3, r3, #16
    3366:	0c1b      	lsrs	r3, r3, #16
    3368:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    336a:	697b      	ldr	r3, [r7, #20]
    336c:	2b00      	cmp	r3, #0
    336e:	d100      	bne.n	3372 <nm_get_firmware_full_info+0xa6>
    3370:	e074      	b.n	345c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    3372:	697b      	ldr	r3, [r7, #20]
    3374:	22c0      	movs	r2, #192	; 0xc0
    3376:	0292      	lsls	r2, r2, #10
    3378:	4313      	orrs	r3, r2
    337a:	221f      	movs	r2, #31
    337c:	18bc      	adds	r4, r7, r2
    337e:	6879      	ldr	r1, [r7, #4]
    3380:	2228      	movs	r2, #40	; 0x28
    3382:	0018      	movs	r0, r3
    3384:	4b42      	ldr	r3, [pc, #264]	; (3490 <nm_get_firmware_full_info+0x1c4>)
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    338c:	231f      	movs	r3, #31
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	b25b      	sxtb	r3, r3
    3394:	2b00      	cmp	r3, #0
    3396:	d16a      	bne.n	346e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	791b      	ldrb	r3, [r3, #4]
    339c:	021b      	lsls	r3, r3, #8
    339e:	b21a      	sxth	r2, r3
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	795b      	ldrb	r3, [r3, #5]
    33a4:	011b      	lsls	r3, r3, #4
    33a6:	b21b      	sxth	r3, r3
    33a8:	21ff      	movs	r1, #255	; 0xff
    33aa:	400b      	ands	r3, r1
    33ac:	b21b      	sxth	r3, r3
    33ae:	4313      	orrs	r3, r2
    33b0:	b21a      	sxth	r2, r3
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	799b      	ldrb	r3, [r3, #6]
    33b6:	b21b      	sxth	r3, r3
    33b8:	210f      	movs	r1, #15
    33ba:	400b      	ands	r3, r1
    33bc:	b21b      	sxth	r3, r3
    33be:	4313      	orrs	r3, r2
    33c0:	b21a      	sxth	r2, r3
    33c2:	231c      	movs	r3, #28
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    33c8:	231a      	movs	r3, #26
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	4a31      	ldr	r2, [pc, #196]	; (3494 <nm_get_firmware_full_info+0x1c8>)
    33ce:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	79db      	ldrb	r3, [r3, #7]
    33d4:	021b      	lsls	r3, r3, #8
    33d6:	b21a      	sxth	r2, r3
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	7a1b      	ldrb	r3, [r3, #8]
    33dc:	011b      	lsls	r3, r3, #4
    33de:	b21b      	sxth	r3, r3
    33e0:	21ff      	movs	r1, #255	; 0xff
    33e2:	400b      	ands	r3, r1
    33e4:	b21b      	sxth	r3, r3
    33e6:	4313      	orrs	r3, r2
    33e8:	b21a      	sxth	r2, r3
    33ea:	687b      	ldr	r3, [r7, #4]
    33ec:	7a5b      	ldrb	r3, [r3, #9]
    33ee:	b21b      	sxth	r3, r3
    33f0:	210f      	movs	r1, #15
    33f2:	400b      	ands	r3, r1
    33f4:	b21b      	sxth	r3, r3
    33f6:	4313      	orrs	r3, r2
    33f8:	b21a      	sxth	r2, r3
    33fa:	2318      	movs	r3, #24
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3400:	231c      	movs	r3, #28
    3402:	18fb      	adds	r3, r7, r3
    3404:	881b      	ldrh	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d009      	beq.n	341e <nm_get_firmware_full_info+0x152>
    340a:	2318      	movs	r3, #24
    340c:	18fb      	adds	r3, r7, r3
    340e:	881b      	ldrh	r3, [r3, #0]
    3410:	2b00      	cmp	r3, #0
    3412:	d004      	beq.n	341e <nm_get_firmware_full_info+0x152>
    3414:	2318      	movs	r3, #24
    3416:	18fb      	adds	r3, r7, r3
    3418:	881b      	ldrh	r3, [r3, #0]
    341a:	2b00      	cmp	r3, #0
    341c:	d104      	bne.n	3428 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    341e:	231f      	movs	r3, #31
    3420:	18fb      	adds	r3, r7, r3
    3422:	22f4      	movs	r2, #244	; 0xf4
    3424:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3426:	e022      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    3428:	231a      	movs	r3, #26
    342a:	18fa      	adds	r2, r7, r3
    342c:	2318      	movs	r3, #24
    342e:	18fb      	adds	r3, r7, r3
    3430:	8812      	ldrh	r2, [r2, #0]
    3432:	881b      	ldrh	r3, [r3, #0]
    3434:	429a      	cmp	r2, r3
    3436:	d204      	bcs.n	3442 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3438:	231f      	movs	r3, #31
    343a:	18fb      	adds	r3, r7, r3
    343c:	22f3      	movs	r2, #243	; 0xf3
    343e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3440:	e015      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    3442:	231a      	movs	r3, #26
    3444:	18fa      	adds	r2, r7, r3
    3446:	231c      	movs	r3, #28
    3448:	18fb      	adds	r3, r7, r3
    344a:	8812      	ldrh	r2, [r2, #0]
    344c:	881b      	ldrh	r3, [r3, #0]
    344e:	429a      	cmp	r2, r3
    3450:	d90d      	bls.n	346e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    3452:	231f      	movs	r3, #31
    3454:	18fb      	adds	r3, r7, r3
    3456:	22f3      	movs	r2, #243	; 0xf3
    3458:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    345a:	e008      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    345c:	231f      	movs	r3, #31
    345e:	18fb      	adds	r3, r7, r3
    3460:	22f4      	movs	r2, #244	; 0xf4
    3462:	701a      	strb	r2, [r3, #0]
    3464:	e003      	b.n	346e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    3466:	231f      	movs	r3, #31
    3468:	18fb      	adds	r3, r7, r3
    346a:	22f4      	movs	r2, #244	; 0xf4
    346c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    346e:	231f      	movs	r3, #31
    3470:	18fb      	adds	r3, r7, r3
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	b25b      	sxtb	r3, r3
}
    3476:	0018      	movs	r0, r3
    3478:	46bd      	mov	sp, r7
    347a:	b009      	add	sp, #36	; 0x24
    347c:	bd90      	pop	{r4, r7, pc}
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	00019ea1 	.word	0x00019ea1
    3484:	00000b61 	.word	0x00000b61
    3488:	000c0008 	.word	0x000c0008
    348c:	00003095 	.word	0x00003095
    3490:	00003109 	.word	0x00003109
    3494:	00001354 	.word	0x00001354

00003498 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3498:	b590      	push	{r4, r7, lr}
    349a:	b085      	sub	sp, #20
    349c:	af00      	add	r7, sp, #0
    349e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    34a0:	230f      	movs	r3, #15
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	2200      	movs	r2, #0
    34a6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d013      	beq.n	34d6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    34ae:	230e      	movs	r3, #14
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	687a      	ldr	r2, [r7, #4]
    34b4:	7812      	ldrb	r2, [r2, #0]
    34b6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    34b8:	230e      	movs	r3, #14
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	2b00      	cmp	r3, #0
    34c0:	d004      	beq.n	34cc <nm_drv_init+0x34>
    34c2:	230e      	movs	r3, #14
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	781b      	ldrb	r3, [r3, #0]
    34c8:	2b04      	cmp	r3, #4
    34ca:	d908      	bls.n	34de <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    34cc:	230e      	movs	r3, #14
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2201      	movs	r2, #1
    34d2:	701a      	strb	r2, [r3, #0]
    34d4:	e003      	b.n	34de <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    34d6:	230e      	movs	r3, #14
    34d8:	18fb      	adds	r3, r7, r3
    34da:	2201      	movs	r2, #1
    34dc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    34de:	230f      	movs	r3, #15
    34e0:	18fc      	adds	r4, r7, r3
    34e2:	2000      	movs	r0, #0
    34e4:	4b41      	ldr	r3, [pc, #260]	; (35ec <nm_drv_init+0x154>)
    34e6:	4798      	blx	r3
    34e8:	0003      	movs	r3, r0
    34ea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    34ec:	230f      	movs	r3, #15
    34ee:	18fb      	adds	r3, r7, r3
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	b25b      	sxtb	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00f      	beq.n	3518 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    34f8:	2328      	movs	r3, #40	; 0x28
    34fa:	33ff      	adds	r3, #255	; 0xff
    34fc:	001a      	movs	r2, r3
    34fe:	493c      	ldr	r1, [pc, #240]	; (35f0 <nm_drv_init+0x158>)
    3500:	4b3c      	ldr	r3, [pc, #240]	; (35f4 <nm_drv_init+0x15c>)
    3502:	0018      	movs	r0, r3
    3504:	4b3c      	ldr	r3, [pc, #240]	; (35f8 <nm_drv_init+0x160>)
    3506:	4798      	blx	r3
    3508:	4b3c      	ldr	r3, [pc, #240]	; (35fc <nm_drv_init+0x164>)
    350a:	0018      	movs	r0, r3
    350c:	4b3c      	ldr	r3, [pc, #240]	; (3600 <nm_drv_init+0x168>)
    350e:	4798      	blx	r3
    3510:	200d      	movs	r0, #13
    3512:	4b3c      	ldr	r3, [pc, #240]	; (3604 <nm_drv_init+0x16c>)
    3514:	4798      	blx	r3
		goto ERR1;
    3516:	e060      	b.n	35da <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    3518:	4b3b      	ldr	r3, [pc, #236]	; (3608 <nm_drv_init+0x170>)
    351a:	0018      	movs	r0, r3
    351c:	4b36      	ldr	r3, [pc, #216]	; (35f8 <nm_drv_init+0x160>)
    351e:	4798      	blx	r3
    3520:	4b3a      	ldr	r3, [pc, #232]	; (360c <nm_drv_init+0x174>)
    3522:	4798      	blx	r3
    3524:	0002      	movs	r2, r0
    3526:	4b3a      	ldr	r3, [pc, #232]	; (3610 <nm_drv_init+0x178>)
    3528:	0011      	movs	r1, r2
    352a:	0018      	movs	r0, r3
    352c:	4b32      	ldr	r3, [pc, #200]	; (35f8 <nm_drv_init+0x160>)
    352e:	4798      	blx	r3
    3530:	200d      	movs	r0, #13
    3532:	4b34      	ldr	r3, [pc, #208]	; (3604 <nm_drv_init+0x16c>)
    3534:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3536:	4b37      	ldr	r3, [pc, #220]	; (3614 <nm_drv_init+0x17c>)
    3538:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    353a:	230f      	movs	r3, #15
    353c:	18fc      	adds	r4, r7, r3
    353e:	230e      	movs	r3, #14
    3540:	18fb      	adds	r3, r7, r3
    3542:	781b      	ldrb	r3, [r3, #0]
    3544:	0018      	movs	r0, r3
    3546:	4b34      	ldr	r3, [pc, #208]	; (3618 <nm_drv_init+0x180>)
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    354e:	230f      	movs	r3, #15
    3550:	18fb      	adds	r3, r7, r3
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	b25b      	sxtb	r3, r3
    3556:	2b00      	cmp	r3, #0
    3558:	d13a      	bne.n	35d0 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    355a:	230f      	movs	r3, #15
    355c:	18fc      	adds	r4, r7, r3
    355e:	230e      	movs	r3, #14
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	0018      	movs	r0, r3
    3566:	4b2d      	ldr	r3, [pc, #180]	; (361c <nm_drv_init+0x184>)
    3568:	4798      	blx	r3
    356a:	0003      	movs	r3, r0
    356c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    356e:	230f      	movs	r3, #15
    3570:	18fb      	adds	r3, r7, r3
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	b25b      	sxtb	r3, r3
    3576:	2b00      	cmp	r3, #0
    3578:	d12c      	bne.n	35d4 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    357a:	230e      	movs	r3, #14
    357c:	18fb      	adds	r3, r7, r3
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	2b02      	cmp	r3, #2
    3582:	d02a      	beq.n	35da <nm_drv_init+0x142>
    3584:	230e      	movs	r3, #14
    3586:	18fb      	adds	r3, r7, r3
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b03      	cmp	r3, #3
    358c:	d025      	beq.n	35da <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    358e:	230f      	movs	r3, #15
    3590:	18fc      	adds	r4, r7, r3
    3592:	4b23      	ldr	r3, [pc, #140]	; (3620 <nm_drv_init+0x188>)
    3594:	4798      	blx	r3
    3596:	0003      	movs	r3, r0
    3598:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    359a:	230f      	movs	r3, #15
    359c:	18fb      	adds	r3, r7, r3
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	b25b      	sxtb	r3, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	d00f      	beq.n	35c6 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    35a6:	2356      	movs	r3, #86	; 0x56
    35a8:	33ff      	adds	r3, #255	; 0xff
    35aa:	001a      	movs	r2, r3
    35ac:	4910      	ldr	r1, [pc, #64]	; (35f0 <nm_drv_init+0x158>)
    35ae:	4b11      	ldr	r3, [pc, #68]	; (35f4 <nm_drv_init+0x15c>)
    35b0:	0018      	movs	r0, r3
    35b2:	4b11      	ldr	r3, [pc, #68]	; (35f8 <nm_drv_init+0x160>)
    35b4:	4798      	blx	r3
    35b6:	4b1b      	ldr	r3, [pc, #108]	; (3624 <nm_drv_init+0x18c>)
    35b8:	0018      	movs	r0, r3
    35ba:	4b11      	ldr	r3, [pc, #68]	; (3600 <nm_drv_init+0x168>)
    35bc:	4798      	blx	r3
    35be:	200d      	movs	r0, #13
    35c0:	4b10      	ldr	r3, [pc, #64]	; (3604 <nm_drv_init+0x16c>)
    35c2:	4798      	blx	r3
		goto ERR2;
    35c4:	e007      	b.n	35d6 <nm_drv_init+0x13e>
	}
	return ret;
    35c6:	230f      	movs	r3, #15
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	781b      	ldrb	r3, [r3, #0]
    35cc:	b25b      	sxtb	r3, r3
    35ce:	e008      	b.n	35e2 <nm_drv_init+0x14a>
		goto ERR2;
    35d0:	46c0      	nop			; (mov r8, r8)
    35d2:	e000      	b.n	35d6 <nm_drv_init+0x13e>
		goto ERR2;
    35d4:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    35d6:	4b14      	ldr	r3, [pc, #80]	; (3628 <nm_drv_init+0x190>)
    35d8:	4798      	blx	r3
ERR1:
	return ret;
    35da:	230f      	movs	r3, #15
    35dc:	18fb      	adds	r3, r7, r3
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	b25b      	sxtb	r3, r3
}
    35e2:	0018      	movs	r0, r3
    35e4:	46bd      	mov	sp, r7
    35e6:	b005      	add	sp, #20
    35e8:	bd90      	pop	{r4, r7, pc}
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	00002ff9 	.word	0x00002ff9
    35f0:	0001bd94 	.word	0x0001bd94
    35f4:	0001bcc8 	.word	0x0001bcc8
    35f8:	0001a001 	.word	0x0001a001
    35fc:	0001bcdc 	.word	0x0001bcdc
    3600:	0001a11d 	.word	0x0001a11d
    3604:	0001a035 	.word	0x0001a035
    3608:	0001bcf8 	.word	0x0001bcf8
    360c:	00002999 	.word	0x00002999
    3610:	0001bd04 	.word	0x0001bd04
    3614:	0000499d 	.word	0x0000499d
    3618:	00002ced 	.word	0x00002ced
    361c:	00002e85 	.word	0x00002e85
    3620:	000028e5 	.word	0x000028e5
    3624:	0001bd14 	.word	0x0001bd14
    3628:	0000302d 	.word	0x0000302d

0000362c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    362c:	b590      	push	{r4, r7, lr}
    362e:	b085      	sub	sp, #20
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3634:	230f      	movs	r3, #15
    3636:	18fc      	adds	r4, r7, r3
    3638:	4b2d      	ldr	r3, [pc, #180]	; (36f0 <nm_drv_deinit+0xc4>)
    363a:	4798      	blx	r3
    363c:	0003      	movs	r3, r0
    363e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3640:	230f      	movs	r3, #15
    3642:	18fb      	adds	r3, r7, r3
    3644:	781b      	ldrb	r3, [r3, #0]
    3646:	b25b      	sxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d00e      	beq.n	366a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    364c:	23b6      	movs	r3, #182	; 0xb6
    364e:	005a      	lsls	r2, r3, #1
    3650:	4928      	ldr	r1, [pc, #160]	; (36f4 <nm_drv_deinit+0xc8>)
    3652:	4b29      	ldr	r3, [pc, #164]	; (36f8 <nm_drv_deinit+0xcc>)
    3654:	0018      	movs	r0, r3
    3656:	4b29      	ldr	r3, [pc, #164]	; (36fc <nm_drv_deinit+0xd0>)
    3658:	4798      	blx	r3
    365a:	4b29      	ldr	r3, [pc, #164]	; (3700 <nm_drv_deinit+0xd4>)
    365c:	0018      	movs	r0, r3
    365e:	4b29      	ldr	r3, [pc, #164]	; (3704 <nm_drv_deinit+0xd8>)
    3660:	4798      	blx	r3
    3662:	200d      	movs	r0, #13
    3664:	4b28      	ldr	r3, [pc, #160]	; (3708 <nm_drv_deinit+0xdc>)
    3666:	4798      	blx	r3
		goto ERR1;
    3668:	e03a      	b.n	36e0 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    366a:	230f      	movs	r3, #15
    366c:	18fc      	adds	r4, r7, r3
    366e:	2000      	movs	r0, #0
    3670:	4b26      	ldr	r3, [pc, #152]	; (370c <nm_drv_deinit+0xe0>)
    3672:	4798      	blx	r3
    3674:	0003      	movs	r3, r0
    3676:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3678:	230f      	movs	r3, #15
    367a:	18fb      	adds	r3, r7, r3
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	b25b      	sxtb	r3, r3
    3680:	2b00      	cmp	r3, #0
    3682:	d00f      	beq.n	36a4 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3684:	2374      	movs	r3, #116	; 0x74
    3686:	33ff      	adds	r3, #255	; 0xff
    3688:	001a      	movs	r2, r3
    368a:	491a      	ldr	r1, [pc, #104]	; (36f4 <nm_drv_deinit+0xc8>)
    368c:	4b1a      	ldr	r3, [pc, #104]	; (36f8 <nm_drv_deinit+0xcc>)
    368e:	0018      	movs	r0, r3
    3690:	4b1a      	ldr	r3, [pc, #104]	; (36fc <nm_drv_deinit+0xd0>)
    3692:	4798      	blx	r3
    3694:	4b1e      	ldr	r3, [pc, #120]	; (3710 <nm_drv_deinit+0xe4>)
    3696:	0018      	movs	r0, r3
    3698:	4b1a      	ldr	r3, [pc, #104]	; (3704 <nm_drv_deinit+0xd8>)
    369a:	4798      	blx	r3
    369c:	200d      	movs	r0, #13
    369e:	4b1a      	ldr	r3, [pc, #104]	; (3708 <nm_drv_deinit+0xdc>)
    36a0:	4798      	blx	r3
		goto ERR1;
    36a2:	e01d      	b.n	36e0 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    36a4:	230f      	movs	r3, #15
    36a6:	18fc      	adds	r4, r7, r3
    36a8:	4b1a      	ldr	r3, [pc, #104]	; (3714 <nm_drv_deinit+0xe8>)
    36aa:	4798      	blx	r3
    36ac:	0003      	movs	r3, r0
    36ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    36b0:	230f      	movs	r3, #15
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	781b      	ldrb	r3, [r3, #0]
    36b6:	b25b      	sxtb	r3, r3
    36b8:	2b00      	cmp	r3, #0
    36ba:	d00f      	beq.n	36dc <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    36bc:	237a      	movs	r3, #122	; 0x7a
    36be:	33ff      	adds	r3, #255	; 0xff
    36c0:	001a      	movs	r2, r3
    36c2:	490c      	ldr	r1, [pc, #48]	; (36f4 <nm_drv_deinit+0xc8>)
    36c4:	4b0c      	ldr	r3, [pc, #48]	; (36f8 <nm_drv_deinit+0xcc>)
    36c6:	0018      	movs	r0, r3
    36c8:	4b0c      	ldr	r3, [pc, #48]	; (36fc <nm_drv_deinit+0xd0>)
    36ca:	4798      	blx	r3
    36cc:	4b12      	ldr	r3, [pc, #72]	; (3718 <nm_drv_deinit+0xec>)
    36ce:	0018      	movs	r0, r3
    36d0:	4b0c      	ldr	r3, [pc, #48]	; (3704 <nm_drv_deinit+0xd8>)
    36d2:	4798      	blx	r3
    36d4:	200d      	movs	r0, #13
    36d6:	4b0c      	ldr	r3, [pc, #48]	; (3708 <nm_drv_deinit+0xdc>)
    36d8:	4798      	blx	r3
		goto ERR1;
    36da:	e001      	b.n	36e0 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    36dc:	4b0f      	ldr	r3, [pc, #60]	; (371c <nm_drv_deinit+0xf0>)
    36de:	4798      	blx	r3
#endif

ERR1:
	return ret;
    36e0:	230f      	movs	r3, #15
    36e2:	18fb      	adds	r3, r7, r3
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	b25b      	sxtb	r3, r3
}
    36e8:	0018      	movs	r0, r3
    36ea:	46bd      	mov	sp, r7
    36ec:	b005      	add	sp, #20
    36ee:	bd90      	pop	{r4, r7, pc}
    36f0:	00002f39 	.word	0x00002f39
    36f4:	0001bda0 	.word	0x0001bda0
    36f8:	0001bcc8 	.word	0x0001bcc8
    36fc:	0001a001 	.word	0x0001a001
    3700:	0001bd34 	.word	0x0001bd34
    3704:	0001a11d 	.word	0x0001a11d
    3708:	0001a035 	.word	0x0001a035
    370c:	000051f1 	.word	0x000051f1
    3710:	0001bd54 	.word	0x0001bd54
    3714:	0000302d 	.word	0x0000302d
    3718:	0001bd78 	.word	0x0001bd78
    371c:	00004ae9 	.word	0x00004ae9

00003720 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    3720:	b580      	push	{r7, lr}
    3722:	b086      	sub	sp, #24
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	000a      	movs	r2, r1
    372a:	1cbb      	adds	r3, r7, #2
    372c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    372e:	230c      	movs	r3, #12
    3730:	18fb      	adds	r3, r7, r3
    3732:	2200      	movs	r2, #0
    3734:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3736:	230c      	movs	r3, #12
    3738:	18fb      	adds	r3, r7, r3
    373a:	687a      	ldr	r2, [r7, #4]
    373c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    373e:	230c      	movs	r3, #12
    3740:	18fb      	adds	r3, r7, r3
    3742:	1cba      	adds	r2, r7, #2
    3744:	8812      	ldrh	r2, [r2, #0]
    3746:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3748:	230c      	movs	r3, #12
    374a:	18fb      	adds	r3, r7, r3
    374c:	0019      	movs	r1, r3
    374e:	2003      	movs	r0, #3
    3750:	4b03      	ldr	r3, [pc, #12]	; (3760 <nmi_spi_read+0x40>)
    3752:	4798      	blx	r3
    3754:	0003      	movs	r3, r0
}
    3756:	0018      	movs	r0, r3
    3758:	46bd      	mov	sp, r7
    375a:	b006      	add	sp, #24
    375c:	bd80      	pop	{r7, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	00000a4d 	.word	0x00000a4d

00003764 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3764:	b580      	push	{r7, lr}
    3766:	b086      	sub	sp, #24
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
    376c:	000a      	movs	r2, r1
    376e:	1cbb      	adds	r3, r7, #2
    3770:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3772:	230c      	movs	r3, #12
    3774:	18fb      	adds	r3, r7, r3
    3776:	687a      	ldr	r2, [r7, #4]
    3778:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    377a:	230c      	movs	r3, #12
    377c:	18fb      	adds	r3, r7, r3
    377e:	2200      	movs	r2, #0
    3780:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3782:	230c      	movs	r3, #12
    3784:	18fb      	adds	r3, r7, r3
    3786:	1cba      	adds	r2, r7, #2
    3788:	8812      	ldrh	r2, [r2, #0]
    378a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    378c:	230c      	movs	r3, #12
    378e:	18fb      	adds	r3, r7, r3
    3790:	0019      	movs	r1, r3
    3792:	2003      	movs	r0, #3
    3794:	4b03      	ldr	r3, [pc, #12]	; (37a4 <nmi_spi_write+0x40>)
    3796:	4798      	blx	r3
    3798:	0003      	movs	r3, r0
}
    379a:	0018      	movs	r0, r3
    379c:	46bd      	mov	sp, r7
    379e:	b006      	add	sp, #24
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	00000a4d 	.word	0x00000a4d

000037a8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b082      	sub	sp, #8
    37ac:	af00      	add	r7, sp, #0
    37ae:	0002      	movs	r2, r0
    37b0:	1dfb      	adds	r3, r7, #7
    37b2:	701a      	strb	r2, [r3, #0]
    37b4:	1dbb      	adds	r3, r7, #6
    37b6:	1c0a      	adds	r2, r1, #0
    37b8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    37ba:	1dfb      	adds	r3, r7, #7
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	005a      	lsls	r2, r3, #1
    37c0:	1dbb      	adds	r3, r7, #6
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	4053      	eors	r3, r2
    37c6:	4a03      	ldr	r2, [pc, #12]	; (37d4 <crc7_byte+0x2c>)
    37c8:	5cd3      	ldrb	r3, [r2, r3]
}
    37ca:	0018      	movs	r0, r3
    37cc:	46bd      	mov	sp, r7
    37ce:	b002      	add	sp, #8
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	0001bdb0 	.word	0x0001bdb0

000037d8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b085      	sub	sp, #20
    37dc:	af00      	add	r7, sp, #0
    37de:	60b9      	str	r1, [r7, #8]
    37e0:	607a      	str	r2, [r7, #4]
    37e2:	230f      	movs	r3, #15
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	1c02      	adds	r2, r0, #0
    37e8:	701a      	strb	r2, [r3, #0]
	while (len--)
    37ea:	e00e      	b.n	380a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    37ec:	68bb      	ldr	r3, [r7, #8]
    37ee:	1c5a      	adds	r2, r3, #1
    37f0:	60ba      	str	r2, [r7, #8]
    37f2:	781a      	ldrb	r2, [r3, #0]
    37f4:	230f      	movs	r3, #15
    37f6:	18fc      	adds	r4, r7, r3
    37f8:	230f      	movs	r3, #15
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	0011      	movs	r1, r2
    3800:	0018      	movs	r0, r3
    3802:	4b08      	ldr	r3, [pc, #32]	; (3824 <crc7+0x4c>)
    3804:	4798      	blx	r3
    3806:	0003      	movs	r3, r0
    3808:	7023      	strb	r3, [r4, #0]
	while (len--)
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	1e5a      	subs	r2, r3, #1
    380e:	607a      	str	r2, [r7, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d1eb      	bne.n	37ec <crc7+0x14>
	return crc;
    3814:	230f      	movs	r3, #15
    3816:	18fb      	adds	r3, r7, r3
    3818:	781b      	ldrb	r3, [r3, #0]
}
    381a:	0018      	movs	r0, r3
    381c:	46bd      	mov	sp, r7
    381e:	b005      	add	sp, #20
    3820:	bd90      	pop	{r4, r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	000037a9 	.word	0x000037a9

00003828 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3828:	b590      	push	{r4, r7, lr}
    382a:	b089      	sub	sp, #36	; 0x24
    382c:	af00      	add	r7, sp, #0
    382e:	60b9      	str	r1, [r7, #8]
    3830:	607a      	str	r2, [r7, #4]
    3832:	603b      	str	r3, [r7, #0]
    3834:	230f      	movs	r3, #15
    3836:	18fb      	adds	r3, r7, r3
    3838:	1c02      	adds	r2, r0, #0
    383a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    383c:	231f      	movs	r3, #31
    383e:	18fb      	adds	r3, r7, r3
    3840:	2205      	movs	r2, #5
    3842:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3844:	231e      	movs	r3, #30
    3846:	18fb      	adds	r3, r7, r3
    3848:	2201      	movs	r2, #1
    384a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    384c:	2314      	movs	r3, #20
    384e:	18fb      	adds	r3, r7, r3
    3850:	220f      	movs	r2, #15
    3852:	18ba      	adds	r2, r7, r2
    3854:	7812      	ldrb	r2, [r2, #0]
    3856:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3858:	230f      	movs	r3, #15
    385a:	18fb      	adds	r3, r7, r3
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	3bc1      	subs	r3, #193	; 0xc1
    3860:	2b0e      	cmp	r3, #14
    3862:	d900      	bls.n	3866 <spi_cmd+0x3e>
    3864:	e11b      	b.n	3a9e <spi_cmd+0x276>
    3866:	009a      	lsls	r2, r3, #2
    3868:	4bb6      	ldr	r3, [pc, #728]	; (3b44 <spi_cmd+0x31c>)
    386a:	18d3      	adds	r3, r2, r3
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3870:	68bb      	ldr	r3, [r7, #8]
    3872:	0c1b      	lsrs	r3, r3, #16
    3874:	b2da      	uxtb	r2, r3
    3876:	2314      	movs	r3, #20
    3878:	18fb      	adds	r3, r7, r3
    387a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    387c:	68bb      	ldr	r3, [r7, #8]
    387e:	0a1b      	lsrs	r3, r3, #8
    3880:	b2da      	uxtb	r2, r3
    3882:	2314      	movs	r3, #20
    3884:	18fb      	adds	r3, r7, r3
    3886:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3888:	68bb      	ldr	r3, [r7, #8]
    388a:	b2da      	uxtb	r2, r3
    388c:	2314      	movs	r3, #20
    388e:	18fb      	adds	r3, r7, r3
    3890:	70da      	strb	r2, [r3, #3]
		len = 5;
    3892:	231f      	movs	r3, #31
    3894:	18fb      	adds	r3, r7, r3
    3896:	2205      	movs	r2, #5
    3898:	701a      	strb	r2, [r3, #0]
		break;
    389a:	e105      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	0a1b      	lsrs	r3, r3, #8
    38a0:	b2da      	uxtb	r2, r3
    38a2:	2314      	movs	r3, #20
    38a4:	18fb      	adds	r3, r7, r3
    38a6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    38a8:	2330      	movs	r3, #48	; 0x30
    38aa:	18fb      	adds	r3, r7, r3
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d009      	beq.n	38c6 <spi_cmd+0x9e>
    38b2:	2314      	movs	r3, #20
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	785b      	ldrb	r3, [r3, #1]
    38b8:	2280      	movs	r2, #128	; 0x80
    38ba:	4252      	negs	r2, r2
    38bc:	4313      	orrs	r3, r2
    38be:	b2da      	uxtb	r2, r3
    38c0:	2314      	movs	r3, #20
    38c2:	18fb      	adds	r3, r7, r3
    38c4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    38c6:	68bb      	ldr	r3, [r7, #8]
    38c8:	b2da      	uxtb	r2, r3
    38ca:	2314      	movs	r3, #20
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    38d0:	2314      	movs	r3, #20
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	2200      	movs	r2, #0
    38d6:	70da      	strb	r2, [r3, #3]
		len = 5;
    38d8:	231f      	movs	r3, #31
    38da:	18fb      	adds	r3, r7, r3
    38dc:	2205      	movs	r2, #5
    38de:	701a      	strb	r2, [r3, #0]
		break;
    38e0:	e0e2      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    38e2:	2314      	movs	r3, #20
    38e4:	18fb      	adds	r3, r7, r3
    38e6:	2200      	movs	r2, #0
    38e8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    38ea:	2314      	movs	r3, #20
    38ec:	18fb      	adds	r3, r7, r3
    38ee:	2200      	movs	r2, #0
    38f0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    38f2:	2314      	movs	r3, #20
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	2200      	movs	r2, #0
    38f8:	70da      	strb	r2, [r3, #3]
		len = 5;
    38fa:	231f      	movs	r3, #31
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	2205      	movs	r2, #5
    3900:	701a      	strb	r2, [r3, #0]
		break;
    3902:	e0d1      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3904:	2314      	movs	r3, #20
    3906:	18fb      	adds	r3, r7, r3
    3908:	2200      	movs	r2, #0
    390a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    390c:	2314      	movs	r3, #20
    390e:	18fb      	adds	r3, r7, r3
    3910:	2200      	movs	r2, #0
    3912:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3914:	2314      	movs	r3, #20
    3916:	18fb      	adds	r3, r7, r3
    3918:	2200      	movs	r2, #0
    391a:	70da      	strb	r2, [r3, #3]
		len = 5;
    391c:	231f      	movs	r3, #31
    391e:	18fb      	adds	r3, r7, r3
    3920:	2205      	movs	r2, #5
    3922:	701a      	strb	r2, [r3, #0]
		break;
    3924:	e0c0      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    3926:	2314      	movs	r3, #20
    3928:	18fb      	adds	r3, r7, r3
    392a:	22ff      	movs	r2, #255	; 0xff
    392c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    392e:	2314      	movs	r3, #20
    3930:	18fb      	adds	r3, r7, r3
    3932:	22ff      	movs	r2, #255	; 0xff
    3934:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3936:	2314      	movs	r3, #20
    3938:	18fb      	adds	r3, r7, r3
    393a:	22ff      	movs	r2, #255	; 0xff
    393c:	70da      	strb	r2, [r3, #3]
		len = 5;
    393e:	231f      	movs	r3, #31
    3940:	18fb      	adds	r3, r7, r3
    3942:	2205      	movs	r2, #5
    3944:	701a      	strb	r2, [r3, #0]
		break;
    3946:	e0af      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3948:	68bb      	ldr	r3, [r7, #8]
    394a:	0c1b      	lsrs	r3, r3, #16
    394c:	b2da      	uxtb	r2, r3
    394e:	2314      	movs	r3, #20
    3950:	18fb      	adds	r3, r7, r3
    3952:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3954:	68bb      	ldr	r3, [r7, #8]
    3956:	0a1b      	lsrs	r3, r3, #8
    3958:	b2da      	uxtb	r2, r3
    395a:	2314      	movs	r3, #20
    395c:	18fb      	adds	r3, r7, r3
    395e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3960:	68bb      	ldr	r3, [r7, #8]
    3962:	b2da      	uxtb	r2, r3
    3964:	2314      	movs	r3, #20
    3966:	18fb      	adds	r3, r7, r3
    3968:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    396a:	683b      	ldr	r3, [r7, #0]
    396c:	0a1b      	lsrs	r3, r3, #8
    396e:	b2da      	uxtb	r2, r3
    3970:	2314      	movs	r3, #20
    3972:	18fb      	adds	r3, r7, r3
    3974:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3976:	683b      	ldr	r3, [r7, #0]
    3978:	b2da      	uxtb	r2, r3
    397a:	2314      	movs	r3, #20
    397c:	18fb      	adds	r3, r7, r3
    397e:	715a      	strb	r2, [r3, #5]
		len = 7;
    3980:	231f      	movs	r3, #31
    3982:	18fb      	adds	r3, r7, r3
    3984:	2207      	movs	r2, #7
    3986:	701a      	strb	r2, [r3, #0]
		break;
    3988:	e08e      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    398a:	68bb      	ldr	r3, [r7, #8]
    398c:	0c1b      	lsrs	r3, r3, #16
    398e:	b2da      	uxtb	r2, r3
    3990:	2314      	movs	r3, #20
    3992:	18fb      	adds	r3, r7, r3
    3994:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3996:	68bb      	ldr	r3, [r7, #8]
    3998:	0a1b      	lsrs	r3, r3, #8
    399a:	b2da      	uxtb	r2, r3
    399c:	2314      	movs	r3, #20
    399e:	18fb      	adds	r3, r7, r3
    39a0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    39a2:	68bb      	ldr	r3, [r7, #8]
    39a4:	b2da      	uxtb	r2, r3
    39a6:	2314      	movs	r3, #20
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	0c1b      	lsrs	r3, r3, #16
    39b0:	b2da      	uxtb	r2, r3
    39b2:	2314      	movs	r3, #20
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	0a1b      	lsrs	r3, r3, #8
    39bc:	b2da      	uxtb	r2, r3
    39be:	2314      	movs	r3, #20
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    39c4:	683b      	ldr	r3, [r7, #0]
    39c6:	b2da      	uxtb	r2, r3
    39c8:	2314      	movs	r3, #20
    39ca:	18fb      	adds	r3, r7, r3
    39cc:	719a      	strb	r2, [r3, #6]
		len = 8;
    39ce:	231f      	movs	r3, #31
    39d0:	18fb      	adds	r3, r7, r3
    39d2:	2208      	movs	r2, #8
    39d4:	701a      	strb	r2, [r3, #0]
		break;
    39d6:	e067      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    39d8:	68bb      	ldr	r3, [r7, #8]
    39da:	0a1b      	lsrs	r3, r3, #8
    39dc:	b2da      	uxtb	r2, r3
    39de:	2314      	movs	r3, #20
    39e0:	18fb      	adds	r3, r7, r3
    39e2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    39e4:	2330      	movs	r3, #48	; 0x30
    39e6:	18fb      	adds	r3, r7, r3
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d009      	beq.n	3a02 <spi_cmd+0x1da>
    39ee:	2314      	movs	r3, #20
    39f0:	18fb      	adds	r3, r7, r3
    39f2:	785b      	ldrb	r3, [r3, #1]
    39f4:	2280      	movs	r2, #128	; 0x80
    39f6:	4252      	negs	r2, r2
    39f8:	4313      	orrs	r3, r2
    39fa:	b2da      	uxtb	r2, r3
    39fc:	2314      	movs	r3, #20
    39fe:	18fb      	adds	r3, r7, r3
    3a00:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3a02:	68bb      	ldr	r3, [r7, #8]
    3a04:	b2da      	uxtb	r2, r3
    3a06:	2314      	movs	r3, #20
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	0e1b      	lsrs	r3, r3, #24
    3a10:	b2da      	uxtb	r2, r3
    3a12:	2314      	movs	r3, #20
    3a14:	18fb      	adds	r3, r7, r3
    3a16:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	0c1b      	lsrs	r3, r3, #16
    3a1c:	b2da      	uxtb	r2, r3
    3a1e:	2314      	movs	r3, #20
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	0a1b      	lsrs	r3, r3, #8
    3a28:	b2da      	uxtb	r2, r3
    3a2a:	2314      	movs	r3, #20
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	b2da      	uxtb	r2, r3
    3a34:	2314      	movs	r3, #20
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	719a      	strb	r2, [r3, #6]
		len = 8;
    3a3a:	231f      	movs	r3, #31
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	2208      	movs	r2, #8
    3a40:	701a      	strb	r2, [r3, #0]
		break;
    3a42:	e031      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3a44:	68bb      	ldr	r3, [r7, #8]
    3a46:	0c1b      	lsrs	r3, r3, #16
    3a48:	b2da      	uxtb	r2, r3
    3a4a:	2314      	movs	r3, #20
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3a50:	68bb      	ldr	r3, [r7, #8]
    3a52:	0a1b      	lsrs	r3, r3, #8
    3a54:	b2da      	uxtb	r2, r3
    3a56:	2314      	movs	r3, #20
    3a58:	18fb      	adds	r3, r7, r3
    3a5a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3a5c:	68bb      	ldr	r3, [r7, #8]
    3a5e:	b2da      	uxtb	r2, r3
    3a60:	2314      	movs	r3, #20
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	0e1b      	lsrs	r3, r3, #24
    3a6a:	b2da      	uxtb	r2, r3
    3a6c:	2314      	movs	r3, #20
    3a6e:	18fb      	adds	r3, r7, r3
    3a70:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	0c1b      	lsrs	r3, r3, #16
    3a76:	b2da      	uxtb	r2, r3
    3a78:	2314      	movs	r3, #20
    3a7a:	18fb      	adds	r3, r7, r3
    3a7c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	0a1b      	lsrs	r3, r3, #8
    3a82:	b2da      	uxtb	r2, r3
    3a84:	2314      	movs	r3, #20
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	b2da      	uxtb	r2, r3
    3a8e:	2314      	movs	r3, #20
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	71da      	strb	r2, [r3, #7]
		len = 9;
    3a94:	231f      	movs	r3, #31
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	2209      	movs	r2, #9
    3a9a:	701a      	strb	r2, [r3, #0]
		break;
    3a9c:	e004      	b.n	3aa8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3a9e:	231e      	movs	r3, #30
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	2200      	movs	r2, #0
    3aa4:	701a      	strb	r2, [r3, #0]
		break;
    3aa6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3aa8:	231e      	movs	r3, #30
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	b25b      	sxtb	r3, r3
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d03f      	beq.n	3b34 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3ab4:	4b24      	ldr	r3, [pc, #144]	; (3b48 <spi_cmd+0x320>)
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d115      	bne.n	3ae8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3abc:	231f      	movs	r3, #31
    3abe:	18fb      	adds	r3, r7, r3
    3ac0:	781b      	ldrb	r3, [r3, #0]
    3ac2:	1e5c      	subs	r4, r3, #1
    3ac4:	231f      	movs	r3, #31
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	3b01      	subs	r3, #1
    3acc:	001a      	movs	r2, r3
    3ace:	2314      	movs	r3, #20
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	0019      	movs	r1, r3
    3ad4:	207f      	movs	r0, #127	; 0x7f
    3ad6:	4b1d      	ldr	r3, [pc, #116]	; (3b4c <spi_cmd+0x324>)
    3ad8:	4798      	blx	r3
    3ada:	0003      	movs	r3, r0
    3adc:	18db      	adds	r3, r3, r3
    3ade:	b2da      	uxtb	r2, r3
    3ae0:	2314      	movs	r3, #20
    3ae2:	18fb      	adds	r3, r7, r3
    3ae4:	551a      	strb	r2, [r3, r4]
    3ae6:	e006      	b.n	3af6 <spi_cmd+0x2ce>
		else
			len-=1;
    3ae8:	231f      	movs	r3, #31
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	221f      	movs	r2, #31
    3aee:	18ba      	adds	r2, r7, r2
    3af0:	7812      	ldrb	r2, [r2, #0]
    3af2:	3a01      	subs	r2, #1
    3af4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3af6:	231f      	movs	r3, #31
    3af8:	18fb      	adds	r3, r7, r3
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	b29a      	uxth	r2, r3
    3afe:	2314      	movs	r3, #20
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	0011      	movs	r1, r2
    3b04:	0018      	movs	r0, r3
    3b06:	4b12      	ldr	r3, [pc, #72]	; (3b50 <spi_cmd+0x328>)
    3b08:	4798      	blx	r3
    3b0a:	1e03      	subs	r3, r0, #0
    3b0c:	d012      	beq.n	3b34 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3b0e:	2328      	movs	r3, #40	; 0x28
    3b10:	33ff      	adds	r3, #255	; 0xff
    3b12:	001a      	movs	r2, r3
    3b14:	490f      	ldr	r1, [pc, #60]	; (3b54 <spi_cmd+0x32c>)
    3b16:	4b10      	ldr	r3, [pc, #64]	; (3b58 <spi_cmd+0x330>)
    3b18:	0018      	movs	r0, r3
    3b1a:	4b10      	ldr	r3, [pc, #64]	; (3b5c <spi_cmd+0x334>)
    3b1c:	4798      	blx	r3
    3b1e:	4b10      	ldr	r3, [pc, #64]	; (3b60 <spi_cmd+0x338>)
    3b20:	0018      	movs	r0, r3
    3b22:	4b10      	ldr	r3, [pc, #64]	; (3b64 <spi_cmd+0x33c>)
    3b24:	4798      	blx	r3
    3b26:	200d      	movs	r0, #13
    3b28:	4b0f      	ldr	r3, [pc, #60]	; (3b68 <spi_cmd+0x340>)
    3b2a:	4798      	blx	r3
			result = N_FAIL;
    3b2c:	231e      	movs	r3, #30
    3b2e:	18fb      	adds	r3, r7, r3
    3b30:	2200      	movs	r2, #0
    3b32:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    3b34:	231e      	movs	r3, #30
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	b25b      	sxtb	r3, r3
}
    3b3c:	0018      	movs	r0, r3
    3b3e:	46bd      	mov	sp, r7
    3b40:	b009      	add	sp, #36	; 0x24
    3b42:	bd90      	pop	{r4, r7, pc}
    3b44:	0001c408 	.word	0x0001c408
    3b48:	200005cc 	.word	0x200005cc
    3b4c:	000037d9 	.word	0x000037d9
    3b50:	00003765 	.word	0x00003765
    3b54:	0001c444 	.word	0x0001c444
    3b58:	0001beb0 	.word	0x0001beb0
    3b5c:	0001a001 	.word	0x0001a001
    3b60:	0001bec4 	.word	0x0001bec4
    3b64:	0001a11d 	.word	0x0001a11d
    3b68:	0001a035 	.word	0x0001a035

00003b6c <spi_data_rsp>:
 sint8 spi_data_rsp(uint8 cmd)
{
    3b6c:	b590      	push	{r4, r7, lr}
    3b6e:	b085      	sub	sp, #20
    3b70:	af00      	add	r7, sp, #0
    3b72:	0002      	movs	r2, r0
    3b74:	1dfb      	adds	r3, r7, #7
    3b76:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3b78:	230e      	movs	r3, #14
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	2201      	movs	r2, #1
    3b7e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3b80:	4b31      	ldr	r3, [pc, #196]	; (3c48 <spi_data_rsp+0xdc>)
    3b82:	781b      	ldrb	r3, [r3, #0]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d104      	bne.n	3b92 <spi_data_rsp+0x26>
		len = 2;
    3b88:	230f      	movs	r3, #15
    3b8a:	18fb      	adds	r3, r7, r3
    3b8c:	2202      	movs	r2, #2
    3b8e:	701a      	strb	r2, [r3, #0]
    3b90:	e003      	b.n	3b9a <spi_data_rsp+0x2e>
	else
		len = 3;
    3b92:	230f      	movs	r3, #15
    3b94:	18fb      	adds	r3, r7, r3
    3b96:	2203      	movs	r2, #3
    3b98:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3b9a:	230f      	movs	r3, #15
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	b29a      	uxth	r2, r3
    3ba2:	2308      	movs	r3, #8
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	0011      	movs	r1, r2
    3ba8:	0018      	movs	r0, r3
    3baa:	4b28      	ldr	r3, [pc, #160]	; (3c4c <spi_data_rsp+0xe0>)
    3bac:	4798      	blx	r3
    3bae:	1e03      	subs	r3, r0, #0
    3bb0:	d012      	beq.n	3bd8 <spi_data_rsp+0x6c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3bb2:	239d      	movs	r3, #157	; 0x9d
    3bb4:	005a      	lsls	r2, r3, #1
    3bb6:	4926      	ldr	r1, [pc, #152]	; (3c50 <spi_data_rsp+0xe4>)
    3bb8:	4b26      	ldr	r3, [pc, #152]	; (3c54 <spi_data_rsp+0xe8>)
    3bba:	0018      	movs	r0, r3
    3bbc:	4b26      	ldr	r3, [pc, #152]	; (3c58 <spi_data_rsp+0xec>)
    3bbe:	4798      	blx	r3
    3bc0:	4b26      	ldr	r3, [pc, #152]	; (3c5c <spi_data_rsp+0xf0>)
    3bc2:	0018      	movs	r0, r3
    3bc4:	4b26      	ldr	r3, [pc, #152]	; (3c60 <spi_data_rsp+0xf4>)
    3bc6:	4798      	blx	r3
    3bc8:	200d      	movs	r0, #13
    3bca:	4b26      	ldr	r3, [pc, #152]	; (3c64 <spi_data_rsp+0xf8>)
    3bcc:	4798      	blx	r3
		result = N_FAIL;
    3bce:	230e      	movs	r3, #14
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	2200      	movs	r2, #0
    3bd4:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3bd6:	e02f      	b.n	3c38 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3bd8:	230f      	movs	r3, #15
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	781b      	ldrb	r3, [r3, #0]
    3bde:	3b01      	subs	r3, #1
    3be0:	2208      	movs	r2, #8
    3be2:	18ba      	adds	r2, r7, r2
    3be4:	5cd3      	ldrb	r3, [r2, r3]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d108      	bne.n	3bfc <spi_data_rsp+0x90>
    3bea:	230f      	movs	r3, #15
    3bec:	18fb      	adds	r3, r7, r3
    3bee:	781b      	ldrb	r3, [r3, #0]
    3bf0:	3b02      	subs	r3, #2
    3bf2:	2208      	movs	r2, #8
    3bf4:	18ba      	adds	r2, r7, r2
    3bf6:	5cd3      	ldrb	r3, [r2, r3]
    3bf8:	2bc3      	cmp	r3, #195	; 0xc3
    3bfa:	d01d      	beq.n	3c38 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3bfc:	2342      	movs	r3, #66	; 0x42
    3bfe:	33ff      	adds	r3, #255	; 0xff
    3c00:	001a      	movs	r2, r3
    3c02:	4913      	ldr	r1, [pc, #76]	; (3c50 <spi_data_rsp+0xe4>)
    3c04:	4b13      	ldr	r3, [pc, #76]	; (3c54 <spi_data_rsp+0xe8>)
    3c06:	0018      	movs	r0, r3
    3c08:	4b13      	ldr	r3, [pc, #76]	; (3c58 <spi_data_rsp+0xec>)
    3c0a:	4798      	blx	r3
    3c0c:	2308      	movs	r3, #8
    3c0e:	18fb      	adds	r3, r7, r3
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	0019      	movs	r1, r3
    3c14:	2308      	movs	r3, #8
    3c16:	18fb      	adds	r3, r7, r3
    3c18:	785b      	ldrb	r3, [r3, #1]
    3c1a:	001a      	movs	r2, r3
    3c1c:	2308      	movs	r3, #8
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	789b      	ldrb	r3, [r3, #2]
    3c22:	4811      	ldr	r0, [pc, #68]	; (3c68 <spi_data_rsp+0xfc>)
    3c24:	4c0c      	ldr	r4, [pc, #48]	; (3c58 <spi_data_rsp+0xec>)
    3c26:	47a0      	blx	r4
    3c28:	200d      	movs	r0, #13
    3c2a:	4b0e      	ldr	r3, [pc, #56]	; (3c64 <spi_data_rsp+0xf8>)
    3c2c:	4798      	blx	r3
		result = N_FAIL;
    3c2e:	230e      	movs	r3, #14
    3c30:	18fb      	adds	r3, r7, r3
    3c32:	2200      	movs	r2, #0
    3c34:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3c36:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    3c38:	230e      	movs	r3, #14
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	b25b      	sxtb	r3, r3
}
    3c40:	0018      	movs	r0, r3
    3c42:	46bd      	mov	sp, r7
    3c44:	b005      	add	sp, #20
    3c46:	bd90      	pop	{r4, r7, pc}
    3c48:	200005cc 	.word	0x200005cc
    3c4c:	00003721 	.word	0x00003721
    3c50:	0001c44c 	.word	0x0001c44c
    3c54:	0001beb0 	.word	0x0001beb0
    3c58:	0001a001 	.word	0x0001a001
    3c5c:	0001bef0 	.word	0x0001bef0
    3c60:	0001a11d 	.word	0x0001a11d
    3c64:	0001a035 	.word	0x0001a035
    3c68:	0001bf10 	.word	0x0001bf10

00003c6c <spi_cmd_rsp>:

 sint8 spi_cmd_rsp(uint8 cmd)
{
    3c6c:	b580      	push	{r7, lr}
    3c6e:	b084      	sub	sp, #16
    3c70:	af00      	add	r7, sp, #0
    3c72:	0002      	movs	r2, r0
    3c74:	1dfb      	adds	r3, r7, #7
    3c76:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3c78:	230f      	movs	r3, #15
    3c7a:	18fb      	adds	r3, r7, r3
    3c7c:	2201      	movs	r2, #1
    3c7e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3c80:	1dfb      	adds	r3, r7, #7
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	2bcf      	cmp	r3, #207	; 0xcf
    3c86:	d007      	beq.n	3c98 <spi_cmd_rsp+0x2c>
    3c88:	1dfb      	adds	r3, r7, #7
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	2bc5      	cmp	r3, #197	; 0xc5
    3c8e:	d003      	beq.n	3c98 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3c90:	1dfb      	adds	r3, r7, #7
    3c92:	781b      	ldrb	r3, [r3, #0]
    3c94:	2bc6      	cmp	r3, #198	; 0xc6
    3c96:	d10c      	bne.n	3cb2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3c98:	230d      	movs	r3, #13
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	2101      	movs	r1, #1
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b3a      	ldr	r3, [pc, #232]	; (3d8c <spi_cmd_rsp+0x120>)
    3ca2:	4798      	blx	r3
    3ca4:	1e03      	subs	r3, r0, #0
    3ca6:	d004      	beq.n	3cb2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3ca8:	230f      	movs	r3, #15
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3cb0:	e063      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3cb2:	230e      	movs	r3, #14
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	220a      	movs	r2, #10
    3cb8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3cba:	230d      	movs	r3, #13
    3cbc:	18fb      	adds	r3, r7, r3
    3cbe:	2101      	movs	r1, #1
    3cc0:	0018      	movs	r0, r3
    3cc2:	4b32      	ldr	r3, [pc, #200]	; (3d8c <spi_cmd_rsp+0x120>)
    3cc4:	4798      	blx	r3
    3cc6:	1e03      	subs	r3, r0, #0
    3cc8:	d013      	beq.n	3cf2 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3cca:	2362      	movs	r3, #98	; 0x62
    3ccc:	33ff      	adds	r3, #255	; 0xff
    3cce:	001a      	movs	r2, r3
    3cd0:	492f      	ldr	r1, [pc, #188]	; (3d90 <spi_cmd_rsp+0x124>)
    3cd2:	4b30      	ldr	r3, [pc, #192]	; (3d94 <spi_cmd_rsp+0x128>)
    3cd4:	0018      	movs	r0, r3
    3cd6:	4b30      	ldr	r3, [pc, #192]	; (3d98 <spi_cmd_rsp+0x12c>)
    3cd8:	4798      	blx	r3
    3cda:	4b30      	ldr	r3, [pc, #192]	; (3d9c <spi_cmd_rsp+0x130>)
    3cdc:	0018      	movs	r0, r3
    3cde:	4b30      	ldr	r3, [pc, #192]	; (3da0 <spi_cmd_rsp+0x134>)
    3ce0:	4798      	blx	r3
    3ce2:	200d      	movs	r0, #13
    3ce4:	4b2f      	ldr	r3, [pc, #188]	; (3da4 <spi_cmd_rsp+0x138>)
    3ce6:	4798      	blx	r3
			result = N_FAIL;
    3ce8:	230f      	movs	r3, #15
    3cea:	18fb      	adds	r3, r7, r3
    3cec:	2200      	movs	r2, #0
    3cee:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3cf0:	e043      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3cf2:	230d      	movs	r3, #13
    3cf4:	18fb      	adds	r3, r7, r3
    3cf6:	781b      	ldrb	r3, [r3, #0]
    3cf8:	1dfa      	adds	r2, r7, #7
    3cfa:	7812      	ldrb	r2, [r2, #0]
    3cfc:	429a      	cmp	r2, r3
    3cfe:	d00b      	beq.n	3d18 <spi_cmd_rsp+0xac>
    3d00:	230e      	movs	r3, #14
    3d02:	18fb      	adds	r3, r7, r3
    3d04:	781b      	ldrb	r3, [r3, #0]
    3d06:	b25b      	sxtb	r3, r3
    3d08:	b2da      	uxtb	r2, r3
    3d0a:	3a01      	subs	r2, #1
    3d0c:	b2d1      	uxtb	r1, r2
    3d0e:	220e      	movs	r2, #14
    3d10:	18ba      	adds	r2, r7, r2
    3d12:	7011      	strb	r1, [r2, #0]
    3d14:	2b00      	cmp	r3, #0
    3d16:	dcd0      	bgt.n	3cba <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3d18:	230e      	movs	r3, #14
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	220a      	movs	r2, #10
    3d1e:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3d20:	230d      	movs	r3, #13
    3d22:	18fb      	adds	r3, r7, r3
    3d24:	2101      	movs	r1, #1
    3d26:	0018      	movs	r0, r3
    3d28:	4b18      	ldr	r3, [pc, #96]	; (3d8c <spi_cmd_rsp+0x120>)
    3d2a:	4798      	blx	r3
    3d2c:	1e03      	subs	r3, r0, #0
    3d2e:	d013      	beq.n	3d58 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3d30:	2370      	movs	r3, #112	; 0x70
    3d32:	33ff      	adds	r3, #255	; 0xff
    3d34:	001a      	movs	r2, r3
    3d36:	4916      	ldr	r1, [pc, #88]	; (3d90 <spi_cmd_rsp+0x124>)
    3d38:	4b16      	ldr	r3, [pc, #88]	; (3d94 <spi_cmd_rsp+0x128>)
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b16      	ldr	r3, [pc, #88]	; (3d98 <spi_cmd_rsp+0x12c>)
    3d3e:	4798      	blx	r3
    3d40:	4b16      	ldr	r3, [pc, #88]	; (3d9c <spi_cmd_rsp+0x130>)
    3d42:	0018      	movs	r0, r3
    3d44:	4b16      	ldr	r3, [pc, #88]	; (3da0 <spi_cmd_rsp+0x134>)
    3d46:	4798      	blx	r3
    3d48:	200d      	movs	r0, #13
    3d4a:	4b16      	ldr	r3, [pc, #88]	; (3da4 <spi_cmd_rsp+0x138>)
    3d4c:	4798      	blx	r3
			result = N_FAIL;
    3d4e:	230f      	movs	r3, #15
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	2200      	movs	r2, #0
    3d54:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3d56:	e010      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3d58:	230d      	movs	r3, #13
    3d5a:	18fb      	adds	r3, r7, r3
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d00b      	beq.n	3d7a <spi_cmd_rsp+0x10e>
    3d62:	230e      	movs	r3, #14
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	b25b      	sxtb	r3, r3
    3d6a:	b2da      	uxtb	r2, r3
    3d6c:	3a01      	subs	r2, #1
    3d6e:	b2d1      	uxtb	r1, r2
    3d70:	220e      	movs	r2, #14
    3d72:	18ba      	adds	r2, r7, r2
    3d74:	7011      	strb	r1, [r2, #0]
    3d76:	2b00      	cmp	r3, #0
    3d78:	dcd2      	bgt.n	3d20 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    3d7a:	230f      	movs	r3, #15
    3d7c:	18fb      	adds	r3, r7, r3
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	b25b      	sxtb	r3, r3
}
    3d82:	0018      	movs	r0, r3
    3d84:	46bd      	mov	sp, r7
    3d86:	b004      	add	sp, #16
    3d88:	bd80      	pop	{r7, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00003721 	.word	0x00003721
    3d90:	0001c45c 	.word	0x0001c45c
    3d94:	0001beb0 	.word	0x0001beb0
    3d98:	0001a001 	.word	0x0001a001
    3d9c:	0001bf40 	.word	0x0001bf40
    3da0:	0001a11d 	.word	0x0001a11d
    3da4:	0001a035 	.word	0x0001a035

00003da8 <spi_data_read>:
_error_:
	return result;
}
#endif
 sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3da8:	b580      	push	{r7, lr}
    3daa:	b086      	sub	sp, #24
    3dac:	af00      	add	r7, sp, #0
    3dae:	6078      	str	r0, [r7, #4]
    3db0:	0008      	movs	r0, r1
    3db2:	0011      	movs	r1, r2
    3db4:	1cbb      	adds	r3, r7, #2
    3db6:	1c02      	adds	r2, r0, #0
    3db8:	801a      	strh	r2, [r3, #0]
    3dba:	1c7b      	adds	r3, r7, #1
    3dbc:	1c0a      	adds	r2, r1, #0
    3dbe:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3dc0:	2311      	movs	r3, #17
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	2201      	movs	r2, #1
    3dc6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3dc8:	2314      	movs	r3, #20
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	2200      	movs	r2, #0
    3dce:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3dd0:	1cbb      	adds	r3, r7, #2
    3dd2:	881a      	ldrh	r2, [r3, #0]
    3dd4:	2380      	movs	r3, #128	; 0x80
    3dd6:	019b      	lsls	r3, r3, #6
    3dd8:	429a      	cmp	r2, r3
    3dda:	d805      	bhi.n	3de8 <spi_data_read+0x40>
			nbytes = sz;
    3ddc:	2312      	movs	r3, #18
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	1cba      	adds	r2, r7, #2
    3de2:	8812      	ldrh	r2, [r2, #0]
    3de4:	801a      	strh	r2, [r3, #0]
    3de6:	e004      	b.n	3df2 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3de8:	2312      	movs	r3, #18
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	2280      	movs	r2, #128	; 0x80
    3dee:	0192      	lsls	r2, r2, #6
    3df0:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    3df2:	2316      	movs	r3, #22
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	220a      	movs	r2, #10
    3df8:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3dfa:	230b      	movs	r3, #11
    3dfc:	18fb      	adds	r3, r7, r3
    3dfe:	2101      	movs	r1, #1
    3e00:	0018      	movs	r0, r3
    3e02:	4b5b      	ldr	r3, [pc, #364]	; (3f70 <spi_data_read+0x1c8>)
    3e04:	4798      	blx	r3
    3e06:	1e03      	subs	r3, r0, #0
    3e08:	d011      	beq.n	3e2e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3e0a:	4a5a      	ldr	r2, [pc, #360]	; (3f74 <spi_data_read+0x1cc>)
    3e0c:	495a      	ldr	r1, [pc, #360]	; (3f78 <spi_data_read+0x1d0>)
    3e0e:	4b5b      	ldr	r3, [pc, #364]	; (3f7c <spi_data_read+0x1d4>)
    3e10:	0018      	movs	r0, r3
    3e12:	4b5b      	ldr	r3, [pc, #364]	; (3f80 <spi_data_read+0x1d8>)
    3e14:	4798      	blx	r3
    3e16:	4b5b      	ldr	r3, [pc, #364]	; (3f84 <spi_data_read+0x1dc>)
    3e18:	0018      	movs	r0, r3
    3e1a:	4b5b      	ldr	r3, [pc, #364]	; (3f88 <spi_data_read+0x1e0>)
    3e1c:	4798      	blx	r3
    3e1e:	200d      	movs	r0, #13
    3e20:	4b5a      	ldr	r3, [pc, #360]	; (3f8c <spi_data_read+0x1e4>)
    3e22:	4798      	blx	r3
				result = N_FAIL;
    3e24:	2311      	movs	r3, #17
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	2200      	movs	r2, #0
    3e2a:	701a      	strb	r2, [r3, #0]
				break;
    3e2c:	e017      	b.n	3e5e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    3e2e:	230b      	movs	r3, #11
    3e30:	18fb      	adds	r3, r7, r3
    3e32:	781b      	ldrb	r3, [r3, #0]
    3e34:	091b      	lsrs	r3, r3, #4
    3e36:	b2db      	uxtb	r3, r3
    3e38:	001a      	movs	r2, r3
    3e3a:	230f      	movs	r3, #15
    3e3c:	4013      	ands	r3, r2
    3e3e:	2b0f      	cmp	r3, #15
    3e40:	d00c      	beq.n	3e5c <spi_data_read+0xb4>
				break;
		} while (retry--);
    3e42:	2316      	movs	r3, #22
    3e44:	18fb      	adds	r3, r7, r3
    3e46:	2200      	movs	r2, #0
    3e48:	5e9b      	ldrsh	r3, [r3, r2]
    3e4a:	b29a      	uxth	r2, r3
    3e4c:	3a01      	subs	r2, #1
    3e4e:	b291      	uxth	r1, r2
    3e50:	2216      	movs	r2, #22
    3e52:	18ba      	adds	r2, r7, r2
    3e54:	8011      	strh	r1, [r2, #0]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d1cf      	bne.n	3dfa <spi_data_read+0x52>
    3e5a:	e000      	b.n	3e5e <spi_data_read+0xb6>
				break;
    3e5c:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3e5e:	2311      	movs	r3, #17
    3e60:	18fb      	adds	r3, r7, r3
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	b25b      	sxtb	r3, r3
    3e66:	2b00      	cmp	r3, #0
    3e68:	d100      	bne.n	3e6c <spi_data_read+0xc4>
    3e6a:	e078      	b.n	3f5e <spi_data_read+0x1b6>
			break;

		if (retry <= 0) {
    3e6c:	2316      	movs	r3, #22
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	2200      	movs	r2, #0
    3e72:	5e9b      	ldrsh	r3, [r3, r2]
    3e74:	2b00      	cmp	r3, #0
    3e76:	dc16      	bgt.n	3ea6 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3e78:	4a45      	ldr	r2, [pc, #276]	; (3f90 <spi_data_read+0x1e8>)
    3e7a:	493f      	ldr	r1, [pc, #252]	; (3f78 <spi_data_read+0x1d0>)
    3e7c:	4b3f      	ldr	r3, [pc, #252]	; (3f7c <spi_data_read+0x1d4>)
    3e7e:	0018      	movs	r0, r3
    3e80:	4b3f      	ldr	r3, [pc, #252]	; (3f80 <spi_data_read+0x1d8>)
    3e82:	4798      	blx	r3
    3e84:	230b      	movs	r3, #11
    3e86:	18fb      	adds	r3, r7, r3
    3e88:	781b      	ldrb	r3, [r3, #0]
    3e8a:	001a      	movs	r2, r3
    3e8c:	4b41      	ldr	r3, [pc, #260]	; (3f94 <spi_data_read+0x1ec>)
    3e8e:	0011      	movs	r1, r2
    3e90:	0018      	movs	r0, r3
    3e92:	4b3b      	ldr	r3, [pc, #236]	; (3f80 <spi_data_read+0x1d8>)
    3e94:	4798      	blx	r3
    3e96:	200d      	movs	r0, #13
    3e98:	4b3c      	ldr	r3, [pc, #240]	; (3f8c <spi_data_read+0x1e4>)
    3e9a:	4798      	blx	r3
			result = N_FAIL;
    3e9c:	2311      	movs	r3, #17
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	2200      	movs	r2, #0
    3ea2:	701a      	strb	r2, [r3, #0]
			break;
    3ea4:	e05c      	b.n	3f60 <spi_data_read+0x1b8>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3ea6:	2314      	movs	r3, #20
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	2200      	movs	r2, #0
    3eac:	5e9b      	ldrsh	r3, [r3, r2]
    3eae:	687a      	ldr	r2, [r7, #4]
    3eb0:	18d2      	adds	r2, r2, r3
    3eb2:	2312      	movs	r3, #18
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	881b      	ldrh	r3, [r3, #0]
    3eb8:	0019      	movs	r1, r3
    3eba:	0010      	movs	r0, r2
    3ebc:	4b2c      	ldr	r3, [pc, #176]	; (3f70 <spi_data_read+0x1c8>)
    3ebe:	4798      	blx	r3
    3ec0:	1e03      	subs	r3, r0, #0
    3ec2:	d011      	beq.n	3ee8 <spi_data_read+0x140>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3ec4:	4a34      	ldr	r2, [pc, #208]	; (3f98 <spi_data_read+0x1f0>)
    3ec6:	492c      	ldr	r1, [pc, #176]	; (3f78 <spi_data_read+0x1d0>)
    3ec8:	4b2c      	ldr	r3, [pc, #176]	; (3f7c <spi_data_read+0x1d4>)
    3eca:	0018      	movs	r0, r3
    3ecc:	4b2c      	ldr	r3, [pc, #176]	; (3f80 <spi_data_read+0x1d8>)
    3ece:	4798      	blx	r3
    3ed0:	4b32      	ldr	r3, [pc, #200]	; (3f9c <spi_data_read+0x1f4>)
    3ed2:	0018      	movs	r0, r3
    3ed4:	4b2c      	ldr	r3, [pc, #176]	; (3f88 <spi_data_read+0x1e0>)
    3ed6:	4798      	blx	r3
    3ed8:	200d      	movs	r0, #13
    3eda:	4b2c      	ldr	r3, [pc, #176]	; (3f8c <spi_data_read+0x1e4>)
    3edc:	4798      	blx	r3
			result = N_FAIL;
    3ede:	2311      	movs	r3, #17
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	2200      	movs	r2, #0
    3ee4:	701a      	strb	r2, [r3, #0]
			break;
    3ee6:	e03b      	b.n	3f60 <spi_data_read+0x1b8>
		}
		if(!clockless)
    3ee8:	1c7b      	adds	r3, r7, #1
    3eea:	781b      	ldrb	r3, [r3, #0]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d11d      	bne.n	3f2c <spi_data_read+0x184>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3ef0:	4b2b      	ldr	r3, [pc, #172]	; (3fa0 <spi_data_read+0x1f8>)
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d119      	bne.n	3f2c <spi_data_read+0x184>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3ef8:	230c      	movs	r3, #12
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	2102      	movs	r1, #2
    3efe:	0018      	movs	r0, r3
    3f00:	4b1b      	ldr	r3, [pc, #108]	; (3f70 <spi_data_read+0x1c8>)
    3f02:	4798      	blx	r3
    3f04:	1e03      	subs	r3, r0, #0
    3f06:	d011      	beq.n	3f2c <spi_data_read+0x184>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3f08:	4a26      	ldr	r2, [pc, #152]	; (3fa4 <spi_data_read+0x1fc>)
    3f0a:	491b      	ldr	r1, [pc, #108]	; (3f78 <spi_data_read+0x1d0>)
    3f0c:	4b1b      	ldr	r3, [pc, #108]	; (3f7c <spi_data_read+0x1d4>)
    3f0e:	0018      	movs	r0, r3
    3f10:	4b1b      	ldr	r3, [pc, #108]	; (3f80 <spi_data_read+0x1d8>)
    3f12:	4798      	blx	r3
    3f14:	4b24      	ldr	r3, [pc, #144]	; (3fa8 <spi_data_read+0x200>)
    3f16:	0018      	movs	r0, r3
    3f18:	4b1b      	ldr	r3, [pc, #108]	; (3f88 <spi_data_read+0x1e0>)
    3f1a:	4798      	blx	r3
    3f1c:	200d      	movs	r0, #13
    3f1e:	4b1b      	ldr	r3, [pc, #108]	; (3f8c <spi_data_read+0x1e4>)
    3f20:	4798      	blx	r3
					result = N_FAIL;
    3f22:	2311      	movs	r3, #17
    3f24:	18fb      	adds	r3, r7, r3
    3f26:	2200      	movs	r2, #0
    3f28:	701a      	strb	r2, [r3, #0]
					break;
    3f2a:	e019      	b.n	3f60 <spi_data_read+0x1b8>
				}
			}
		}
		ix += nbytes;
    3f2c:	2314      	movs	r3, #20
    3f2e:	18fb      	adds	r3, r7, r3
    3f30:	881a      	ldrh	r2, [r3, #0]
    3f32:	2312      	movs	r3, #18
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	881b      	ldrh	r3, [r3, #0]
    3f38:	18d3      	adds	r3, r2, r3
    3f3a:	b29a      	uxth	r2, r3
    3f3c:	2314      	movs	r3, #20
    3f3e:	18fb      	adds	r3, r7, r3
    3f40:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3f42:	2312      	movs	r3, #18
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	881a      	ldrh	r2, [r3, #0]
    3f48:	1cbb      	adds	r3, r7, #2
    3f4a:	1cb9      	adds	r1, r7, #2
    3f4c:	8809      	ldrh	r1, [r1, #0]
    3f4e:	1a8a      	subs	r2, r1, r2
    3f50:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3f52:	1cbb      	adds	r3, r7, #2
    3f54:	881b      	ldrh	r3, [r3, #0]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d000      	beq.n	3f5c <spi_data_read+0x1b4>
    3f5a:	e739      	b.n	3dd0 <spi_data_read+0x28>
    3f5c:	e000      	b.n	3f60 <spi_data_read+0x1b8>
			break;
    3f5e:	46c0      	nop			; (mov r8, r8)

	return result;
    3f60:	2311      	movs	r3, #17
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	b25b      	sxtb	r3, r3
}
    3f68:	0018      	movs	r0, r3
    3f6a:	46bd      	mov	sp, r7
    3f6c:	b006      	add	sp, #24
    3f6e:	bd80      	pop	{r7, pc}
    3f70:	00003721 	.word	0x00003721
    3f74:	000002fe 	.word	0x000002fe
    3f78:	0001c468 	.word	0x0001c468
    3f7c:	0001beb0 	.word	0x0001beb0
    3f80:	0001a001 	.word	0x0001a001
    3f84:	0001bf74 	.word	0x0001bf74
    3f88:	0001a11d 	.word	0x0001a11d
    3f8c:	0001a035 	.word	0x0001a035
    3f90:	0000030a 	.word	0x0000030a
    3f94:	0001bfa8 	.word	0x0001bfa8
    3f98:	00000313 	.word	0x00000313
    3f9c:	0001bfd8 	.word	0x0001bfd8
    3fa0:	200005cc 	.word	0x200005cc
    3fa4:	0000031e 	.word	0x0000031e
    3fa8:	0001c008 	.word	0x0001c008

00003fac <spi_data_write>:

 sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b086      	sub	sp, #24
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	000a      	movs	r2, r1
    3fb6:	1cbb      	adds	r3, r7, #2
    3fb8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3fba:	2313      	movs	r3, #19
    3fbc:	18fb      	adds	r3, r7, r3
    3fbe:	2201      	movs	r2, #1
    3fc0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3fc2:	230c      	movs	r3, #12
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	2200      	movs	r2, #0
    3fc8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3fca:	2316      	movs	r3, #22
    3fcc:	18fb      	adds	r3, r7, r3
    3fce:	2200      	movs	r2, #0
    3fd0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3fd2:	1cbb      	adds	r3, r7, #2
    3fd4:	881a      	ldrh	r2, [r3, #0]
    3fd6:	2380      	movs	r3, #128	; 0x80
    3fd8:	019b      	lsls	r3, r3, #6
    3fda:	429a      	cmp	r2, r3
    3fdc:	d805      	bhi.n	3fea <spi_data_write+0x3e>
			nbytes = sz;
    3fde:	2314      	movs	r3, #20
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	1cba      	adds	r2, r7, #2
    3fe4:	8812      	ldrh	r2, [r2, #0]
    3fe6:	801a      	strh	r2, [r3, #0]
    3fe8:	e004      	b.n	3ff4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3fea:	2314      	movs	r3, #20
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	2280      	movs	r2, #128	; 0x80
    3ff0:	0192      	lsls	r2, r2, #6
    3ff2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3ff4:	2311      	movs	r3, #17
    3ff6:	18fb      	adds	r3, r7, r3
    3ff8:	22f0      	movs	r2, #240	; 0xf0
    3ffa:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3ffc:	2316      	movs	r3, #22
    3ffe:	18fb      	adds	r3, r7, r3
    4000:	2200      	movs	r2, #0
    4002:	5e9b      	ldrsh	r3, [r3, r2]
    4004:	2b00      	cmp	r3, #0
    4006:	d10f      	bne.n	4028 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    4008:	1cbb      	adds	r3, r7, #2
    400a:	881a      	ldrh	r2, [r3, #0]
    400c:	2380      	movs	r3, #128	; 0x80
    400e:	019b      	lsls	r3, r3, #6
    4010:	429a      	cmp	r2, r3
    4012:	d804      	bhi.n	401e <spi_data_write+0x72>
				order = 0x3;
    4014:	2312      	movs	r3, #18
    4016:	18fb      	adds	r3, r7, r3
    4018:	2203      	movs	r2, #3
    401a:	701a      	strb	r2, [r3, #0]
    401c:	e013      	b.n	4046 <spi_data_write+0x9a>
			else
				order = 0x1;
    401e:	2312      	movs	r3, #18
    4020:	18fb      	adds	r3, r7, r3
    4022:	2201      	movs	r2, #1
    4024:	701a      	strb	r2, [r3, #0]
    4026:	e00e      	b.n	4046 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    4028:	1cbb      	adds	r3, r7, #2
    402a:	881a      	ldrh	r2, [r3, #0]
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	019b      	lsls	r3, r3, #6
    4030:	429a      	cmp	r2, r3
    4032:	d804      	bhi.n	403e <spi_data_write+0x92>
				order = 0x3;
    4034:	2312      	movs	r3, #18
    4036:	18fb      	adds	r3, r7, r3
    4038:	2203      	movs	r2, #3
    403a:	701a      	strb	r2, [r3, #0]
    403c:	e003      	b.n	4046 <spi_data_write+0x9a>
			else
				order = 0x2;
    403e:	2312      	movs	r3, #18
    4040:	18fb      	adds	r3, r7, r3
    4042:	2202      	movs	r2, #2
    4044:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    4046:	2311      	movs	r3, #17
    4048:	18fb      	adds	r3, r7, r3
    404a:	781a      	ldrb	r2, [r3, #0]
    404c:	2312      	movs	r3, #18
    404e:	18fb      	adds	r3, r7, r3
    4050:	781b      	ldrb	r3, [r3, #0]
    4052:	4313      	orrs	r3, r2
    4054:	b2da      	uxtb	r2, r3
    4056:	2311      	movs	r3, #17
    4058:	18fb      	adds	r3, r7, r3
    405a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    405c:	2311      	movs	r3, #17
    405e:	18fb      	adds	r3, r7, r3
    4060:	2101      	movs	r1, #1
    4062:	0018      	movs	r0, r3
    4064:	4b3a      	ldr	r3, [pc, #232]	; (4150 <spi_data_write+0x1a4>)
    4066:	4798      	blx	r3
    4068:	1e03      	subs	r3, r0, #0
    406a:	d011      	beq.n	4090 <spi_data_write+0xe4>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    406c:	4a39      	ldr	r2, [pc, #228]	; (4154 <spi_data_write+0x1a8>)
    406e:	493a      	ldr	r1, [pc, #232]	; (4158 <spi_data_write+0x1ac>)
    4070:	4b3a      	ldr	r3, [pc, #232]	; (415c <spi_data_write+0x1b0>)
    4072:	0018      	movs	r0, r3
    4074:	4b3a      	ldr	r3, [pc, #232]	; (4160 <spi_data_write+0x1b4>)
    4076:	4798      	blx	r3
    4078:	4b3a      	ldr	r3, [pc, #232]	; (4164 <spi_data_write+0x1b8>)
    407a:	0018      	movs	r0, r3
    407c:	4b3a      	ldr	r3, [pc, #232]	; (4168 <spi_data_write+0x1bc>)
    407e:	4798      	blx	r3
    4080:	200d      	movs	r0, #13
    4082:	4b3a      	ldr	r3, [pc, #232]	; (416c <spi_data_write+0x1c0>)
    4084:	4798      	blx	r3
			result = N_FAIL;
    4086:	2313      	movs	r3, #19
    4088:	18fb      	adds	r3, r7, r3
    408a:	2200      	movs	r2, #0
    408c:	701a      	strb	r2, [r3, #0]
			break;
    408e:	e057      	b.n	4140 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    4090:	2316      	movs	r3, #22
    4092:	18fb      	adds	r3, r7, r3
    4094:	2200      	movs	r2, #0
    4096:	5e9b      	ldrsh	r3, [r3, r2]
    4098:	687a      	ldr	r2, [r7, #4]
    409a:	18d2      	adds	r2, r2, r3
    409c:	2314      	movs	r3, #20
    409e:	18fb      	adds	r3, r7, r3
    40a0:	881b      	ldrh	r3, [r3, #0]
    40a2:	0019      	movs	r1, r3
    40a4:	0010      	movs	r0, r2
    40a6:	4b2a      	ldr	r3, [pc, #168]	; (4150 <spi_data_write+0x1a4>)
    40a8:	4798      	blx	r3
    40aa:	1e03      	subs	r3, r0, #0
    40ac:	d012      	beq.n	40d4 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    40ae:	23d6      	movs	r3, #214	; 0xd6
    40b0:	009a      	lsls	r2, r3, #2
    40b2:	4929      	ldr	r1, [pc, #164]	; (4158 <spi_data_write+0x1ac>)
    40b4:	4b29      	ldr	r3, [pc, #164]	; (415c <spi_data_write+0x1b0>)
    40b6:	0018      	movs	r0, r3
    40b8:	4b29      	ldr	r3, [pc, #164]	; (4160 <spi_data_write+0x1b4>)
    40ba:	4798      	blx	r3
    40bc:	4b2c      	ldr	r3, [pc, #176]	; (4170 <spi_data_write+0x1c4>)
    40be:	0018      	movs	r0, r3
    40c0:	4b29      	ldr	r3, [pc, #164]	; (4168 <spi_data_write+0x1bc>)
    40c2:	4798      	blx	r3
    40c4:	200d      	movs	r0, #13
    40c6:	4b29      	ldr	r3, [pc, #164]	; (416c <spi_data_write+0x1c0>)
    40c8:	4798      	blx	r3
			result = N_FAIL;
    40ca:	2313      	movs	r3, #19
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	2200      	movs	r2, #0
    40d0:	701a      	strb	r2, [r3, #0]
			break;
    40d2:	e035      	b.n	4140 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    40d4:	4b27      	ldr	r3, [pc, #156]	; (4174 <spi_data_write+0x1c8>)
    40d6:	781b      	ldrb	r3, [r3, #0]
    40d8:	2b00      	cmp	r3, #0
    40da:	d119      	bne.n	4110 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    40dc:	230c      	movs	r3, #12
    40de:	18fb      	adds	r3, r7, r3
    40e0:	2102      	movs	r1, #2
    40e2:	0018      	movs	r0, r3
    40e4:	4b1a      	ldr	r3, [pc, #104]	; (4150 <spi_data_write+0x1a4>)
    40e6:	4798      	blx	r3
    40e8:	1e03      	subs	r3, r0, #0
    40ea:	d011      	beq.n	4110 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    40ec:	4a22      	ldr	r2, [pc, #136]	; (4178 <spi_data_write+0x1cc>)
    40ee:	491a      	ldr	r1, [pc, #104]	; (4158 <spi_data_write+0x1ac>)
    40f0:	4b1a      	ldr	r3, [pc, #104]	; (415c <spi_data_write+0x1b0>)
    40f2:	0018      	movs	r0, r3
    40f4:	4b1a      	ldr	r3, [pc, #104]	; (4160 <spi_data_write+0x1b4>)
    40f6:	4798      	blx	r3
    40f8:	4b20      	ldr	r3, [pc, #128]	; (417c <spi_data_write+0x1d0>)
    40fa:	0018      	movs	r0, r3
    40fc:	4b1a      	ldr	r3, [pc, #104]	; (4168 <spi_data_write+0x1bc>)
    40fe:	4798      	blx	r3
    4100:	200d      	movs	r0, #13
    4102:	4b1a      	ldr	r3, [pc, #104]	; (416c <spi_data_write+0x1c0>)
    4104:	4798      	blx	r3
				result = N_FAIL;
    4106:	2313      	movs	r3, #19
    4108:	18fb      	adds	r3, r7, r3
    410a:	2200      	movs	r2, #0
    410c:	701a      	strb	r2, [r3, #0]
				break;
    410e:	e017      	b.n	4140 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    4110:	2316      	movs	r3, #22
    4112:	18fb      	adds	r3, r7, r3
    4114:	881a      	ldrh	r2, [r3, #0]
    4116:	2314      	movs	r3, #20
    4118:	18fb      	adds	r3, r7, r3
    411a:	881b      	ldrh	r3, [r3, #0]
    411c:	18d3      	adds	r3, r2, r3
    411e:	b29a      	uxth	r2, r3
    4120:	2316      	movs	r3, #22
    4122:	18fb      	adds	r3, r7, r3
    4124:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4126:	1cbb      	adds	r3, r7, #2
    4128:	1cb9      	adds	r1, r7, #2
    412a:	2214      	movs	r2, #20
    412c:	18ba      	adds	r2, r7, r2
    412e:	8809      	ldrh	r1, [r1, #0]
    4130:	8812      	ldrh	r2, [r2, #0]
    4132:	1a8a      	subs	r2, r1, r2
    4134:	801a      	strh	r2, [r3, #0]
	} while (sz);
    4136:	1cbb      	adds	r3, r7, #2
    4138:	881b      	ldrh	r3, [r3, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d000      	beq.n	4140 <spi_data_write+0x194>
    413e:	e748      	b.n	3fd2 <spi_data_write+0x26>


	return result;
    4140:	2313      	movs	r3, #19
    4142:	18fb      	adds	r3, r7, r3
    4144:	781b      	ldrb	r3, [r3, #0]
    4146:	b25b      	sxtb	r3, r3
}
    4148:	0018      	movs	r0, r3
    414a:	46bd      	mov	sp, r7
    414c:	b006      	add	sp, #24
    414e:	bd80      	pop	{r7, pc}
    4150:	00003765 	.word	0x00003765
    4154:	0000034f 	.word	0x0000034f
    4158:	0001c478 	.word	0x0001c478
    415c:	0001beb0 	.word	0x0001beb0
    4160:	0001a001 	.word	0x0001a001
    4164:	0001c03c 	.word	0x0001c03c
    4168:	0001a11d 	.word	0x0001a11d
    416c:	0001a035 	.word	0x0001a035
    4170:	0001c074 	.word	0x0001c074
    4174:	200005cc 	.word	0x200005cc
    4178:	00000362 	.word	0x00000362
    417c:	0001c0a8 	.word	0x0001c0a8

00004180 <spi_write_reg>:
	Spi interfaces

********************************************/

 sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4180:	b5b0      	push	{r4, r5, r7, lr}
    4182:	b086      	sub	sp, #24
    4184:	af02      	add	r7, sp, #8
    4186:	6078      	str	r0, [r7, #4]
    4188:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    418a:	230f      	movs	r3, #15
    418c:	18fb      	adds	r3, r7, r3
    418e:	220a      	movs	r2, #10
    4190:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4192:	230e      	movs	r3, #14
    4194:	18fb      	adds	r3, r7, r3
    4196:	2201      	movs	r2, #1
    4198:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    419a:	230d      	movs	r3, #13
    419c:	18fb      	adds	r3, r7, r3
    419e:	22c9      	movs	r2, #201	; 0xc9
    41a0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    41a2:	230c      	movs	r3, #12
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	2200      	movs	r2, #0
    41a8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	2b30      	cmp	r3, #48	; 0x30
    41ae:	d808      	bhi.n	41c2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    41b0:	230d      	movs	r3, #13
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	22c3      	movs	r2, #195	; 0xc3
    41b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    41b8:	230c      	movs	r3, #12
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	2201      	movs	r2, #1
    41be:	701a      	strb	r2, [r3, #0]
    41c0:	e007      	b.n	41d2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    41c2:	230d      	movs	r3, #13
    41c4:	18fb      	adds	r3, r7, r3
    41c6:	22c9      	movs	r2, #201	; 0xc9
    41c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    41ca:	230c      	movs	r3, #12
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	2200      	movs	r2, #0
    41d0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    41d2:	230e      	movs	r3, #14
    41d4:	18fc      	adds	r4, r7, r3
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	6879      	ldr	r1, [r7, #4]
    41da:	230d      	movs	r3, #13
    41dc:	18fb      	adds	r3, r7, r3
    41de:	7818      	ldrb	r0, [r3, #0]
    41e0:	230c      	movs	r3, #12
    41e2:	18fb      	adds	r3, r7, r3
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	9300      	str	r3, [sp, #0]
    41e8:	2304      	movs	r3, #4
    41ea:	4d3b      	ldr	r5, [pc, #236]	; (42d8 <spi_write_reg+0x158>)
    41ec:	47a8      	blx	r5
    41ee:	0003      	movs	r3, r0
    41f0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41f2:	230e      	movs	r3, #14
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b25b      	sxtb	r3, r3
    41fa:	2b01      	cmp	r3, #1
    41fc:	d00f      	beq.n	421e <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    41fe:	4a37      	ldr	r2, [pc, #220]	; (42dc <spi_write_reg+0x15c>)
    4200:	4937      	ldr	r1, [pc, #220]	; (42e0 <spi_write_reg+0x160>)
    4202:	4b38      	ldr	r3, [pc, #224]	; (42e4 <spi_write_reg+0x164>)
    4204:	0018      	movs	r0, r3
    4206:	4b38      	ldr	r3, [pc, #224]	; (42e8 <spi_write_reg+0x168>)
    4208:	4798      	blx	r3
    420a:	687a      	ldr	r2, [r7, #4]
    420c:	4b37      	ldr	r3, [pc, #220]	; (42ec <spi_write_reg+0x16c>)
    420e:	0011      	movs	r1, r2
    4210:	0018      	movs	r0, r3
    4212:	4b35      	ldr	r3, [pc, #212]	; (42e8 <spi_write_reg+0x168>)
    4214:	4798      	blx	r3
    4216:	200d      	movs	r0, #13
    4218:	4b35      	ldr	r3, [pc, #212]	; (42f0 <spi_write_reg+0x170>)
    421a:	4798      	blx	r3
		goto _FAIL_;
    421c:	e01f      	b.n	425e <spi_write_reg+0xde>
	}

	result = spi_cmd_rsp(cmd);
    421e:	230e      	movs	r3, #14
    4220:	18fc      	adds	r4, r7, r3
    4222:	230d      	movs	r3, #13
    4224:	18fb      	adds	r3, r7, r3
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	0018      	movs	r0, r3
    422a:	4b32      	ldr	r3, [pc, #200]	; (42f4 <spi_write_reg+0x174>)
    422c:	4798      	blx	r3
    422e:	0003      	movs	r3, r0
    4230:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4232:	230e      	movs	r3, #14
    4234:	18fb      	adds	r3, r7, r3
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	b25b      	sxtb	r3, r3
    423a:	2b01      	cmp	r3, #1
    423c:	d00f      	beq.n	425e <spi_write_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    423e:	4a2e      	ldr	r2, [pc, #184]	; (42f8 <spi_write_reg+0x178>)
    4240:	4927      	ldr	r1, [pc, #156]	; (42e0 <spi_write_reg+0x160>)
    4242:	4b28      	ldr	r3, [pc, #160]	; (42e4 <spi_write_reg+0x164>)
    4244:	0018      	movs	r0, r3
    4246:	4b28      	ldr	r3, [pc, #160]	; (42e8 <spi_write_reg+0x168>)
    4248:	4798      	blx	r3
    424a:	687a      	ldr	r2, [r7, #4]
    424c:	4b2b      	ldr	r3, [pc, #172]	; (42fc <spi_write_reg+0x17c>)
    424e:	0011      	movs	r1, r2
    4250:	0018      	movs	r0, r3
    4252:	4b25      	ldr	r3, [pc, #148]	; (42e8 <spi_write_reg+0x168>)
    4254:	4798      	blx	r3
    4256:	200d      	movs	r0, #13
    4258:	4b25      	ldr	r3, [pc, #148]	; (42f0 <spi_write_reg+0x170>)
    425a:	4798      	blx	r3
		goto _FAIL_;
    425c:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    425e:	230e      	movs	r3, #14
    4260:	18fb      	adds	r3, r7, r3
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	b25b      	sxtb	r3, r3
    4266:	2b01      	cmp	r3, #1
    4268:	d02e      	beq.n	42c8 <spi_write_reg+0x148>
	{
		nm_bsp_sleep(1);
    426a:	2001      	movs	r0, #1
    426c:	4b24      	ldr	r3, [pc, #144]	; (4300 <spi_write_reg+0x180>)
    426e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4270:	2300      	movs	r3, #0
    4272:	9300      	str	r3, [sp, #0]
    4274:	2300      	movs	r3, #0
    4276:	2200      	movs	r2, #0
    4278:	2100      	movs	r1, #0
    427a:	20cf      	movs	r0, #207	; 0xcf
    427c:	4c16      	ldr	r4, [pc, #88]	; (42d8 <spi_write_reg+0x158>)
    427e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4280:	20cf      	movs	r0, #207	; 0xcf
    4282:	4b1c      	ldr	r3, [pc, #112]	; (42f4 <spi_write_reg+0x174>)
    4284:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    4286:	4a1f      	ldr	r2, [pc, #124]	; (4304 <spi_write_reg+0x184>)
    4288:	4915      	ldr	r1, [pc, #84]	; (42e0 <spi_write_reg+0x160>)
    428a:	4b16      	ldr	r3, [pc, #88]	; (42e4 <spi_write_reg+0x164>)
    428c:	0018      	movs	r0, r3
    428e:	4b16      	ldr	r3, [pc, #88]	; (42e8 <spi_write_reg+0x168>)
    4290:	4798      	blx	r3
    4292:	230f      	movs	r3, #15
    4294:	18fb      	adds	r3, r7, r3
    4296:	7819      	ldrb	r1, [r3, #0]
    4298:	683b      	ldr	r3, [r7, #0]
    429a:	687a      	ldr	r2, [r7, #4]
    429c:	481a      	ldr	r0, [pc, #104]	; (4308 <spi_write_reg+0x188>)
    429e:	4c12      	ldr	r4, [pc, #72]	; (42e8 <spi_write_reg+0x168>)
    42a0:	47a0      	blx	r4
    42a2:	200d      	movs	r0, #13
    42a4:	4b12      	ldr	r3, [pc, #72]	; (42f0 <spi_write_reg+0x170>)
    42a6:	4798      	blx	r3
		nm_bsp_sleep(1);
    42a8:	2001      	movs	r0, #1
    42aa:	4b15      	ldr	r3, [pc, #84]	; (4300 <spi_write_reg+0x180>)
    42ac:	4798      	blx	r3
		retry--;
    42ae:	230f      	movs	r3, #15
    42b0:	18fb      	adds	r3, r7, r3
    42b2:	781a      	ldrb	r2, [r3, #0]
    42b4:	230f      	movs	r3, #15
    42b6:	18fb      	adds	r3, r7, r3
    42b8:	3a01      	subs	r2, #1
    42ba:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    42bc:	230f      	movs	r3, #15
    42be:	18fb      	adds	r3, r7, r3
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d000      	beq.n	42c8 <spi_write_reg+0x148>
    42c6:	e770      	b.n	41aa <spi_write_reg+0x2a>
	}

	return result;
    42c8:	230e      	movs	r3, #14
    42ca:	18fb      	adds	r3, r7, r3
    42cc:	781b      	ldrb	r3, [r3, #0]
    42ce:	b25b      	sxtb	r3, r3
}
    42d0:	0018      	movs	r0, r3
    42d2:	46bd      	mov	sp, r7
    42d4:	b004      	add	sp, #16
    42d6:	bdb0      	pop	{r4, r5, r7, pc}
    42d8:	00003829 	.word	0x00003829
    42dc:	00000395 	.word	0x00000395
    42e0:	0001c488 	.word	0x0001c488
    42e4:	0001beb0 	.word	0x0001beb0
    42e8:	0001a001 	.word	0x0001a001
    42ec:	0001c0e0 	.word	0x0001c0e0
    42f0:	0001a035 	.word	0x0001a035
    42f4:	00003c6d 	.word	0x00003c6d
    42f8:	0000039b 	.word	0x0000039b
    42fc:	0001c10c 	.word	0x0001c10c
    4300:	00000321 	.word	0x00000321
    4304:	000003ae 	.word	0x000003ae
    4308:	0001c144 	.word	0x0001c144

0000430c <nm_spi_write>:

 sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    430c:	b5b0      	push	{r4, r5, r7, lr}
    430e:	b088      	sub	sp, #32
    4310:	af02      	add	r7, sp, #8
    4312:	60f8      	str	r0, [r7, #12]
    4314:	60b9      	str	r1, [r7, #8]
    4316:	1dbb      	adds	r3, r7, #6
    4318:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    431a:	2316      	movs	r3, #22
    431c:	18fb      	adds	r3, r7, r3
    431e:	220a      	movs	r2, #10
    4320:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    4322:	2315      	movs	r3, #21
    4324:	18fb      	adds	r3, r7, r3
    4326:	22c7      	movs	r2, #199	; 0xc7
    4328:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    432a:	1dbb      	adds	r3, r7, #6
    432c:	881b      	ldrh	r3, [r3, #0]
    432e:	2b01      	cmp	r3, #1
    4330:	d102      	bne.n	4338 <nm_spi_write+0x2c>
		size = 2;
    4332:	1dbb      	adds	r3, r7, #6
    4334:	2202      	movs	r2, #2
    4336:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    4338:	1dbb      	adds	r3, r7, #6
    433a:	881a      	ldrh	r2, [r3, #0]
    433c:	2317      	movs	r3, #23
    433e:	18fc      	adds	r4, r7, r3
    4340:	68f9      	ldr	r1, [r7, #12]
    4342:	2315      	movs	r3, #21
    4344:	18fb      	adds	r3, r7, r3
    4346:	7818      	ldrb	r0, [r3, #0]
    4348:	2300      	movs	r3, #0
    434a:	9300      	str	r3, [sp, #0]
    434c:	0013      	movs	r3, r2
    434e:	2200      	movs	r2, #0
    4350:	4d5a      	ldr	r5, [pc, #360]	; (44bc <nm_spi_write+0x1b0>)
    4352:	47a8      	blx	r5
    4354:	0003      	movs	r3, r0
    4356:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4358:	2317      	movs	r3, #23
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	b25b      	sxtb	r3, r3
    4360:	2b01      	cmp	r3, #1
    4362:	d00f      	beq.n	4384 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    4364:	4a56      	ldr	r2, [pc, #344]	; (44c0 <nm_spi_write+0x1b4>)
    4366:	4957      	ldr	r1, [pc, #348]	; (44c4 <nm_spi_write+0x1b8>)
    4368:	4b57      	ldr	r3, [pc, #348]	; (44c8 <nm_spi_write+0x1bc>)
    436a:	0018      	movs	r0, r3
    436c:	4b57      	ldr	r3, [pc, #348]	; (44cc <nm_spi_write+0x1c0>)
    436e:	4798      	blx	r3
    4370:	68fa      	ldr	r2, [r7, #12]
    4372:	4b57      	ldr	r3, [pc, #348]	; (44d0 <nm_spi_write+0x1c4>)
    4374:	0011      	movs	r1, r2
    4376:	0018      	movs	r0, r3
    4378:	4b54      	ldr	r3, [pc, #336]	; (44cc <nm_spi_write+0x1c0>)
    437a:	4798      	blx	r3
    437c:	200d      	movs	r0, #13
    437e:	4b55      	ldr	r3, [pc, #340]	; (44d4 <nm_spi_write+0x1c8>)
    4380:	4798      	blx	r3
		goto _FAIL_;
    4382:	e05c      	b.n	443e <nm_spi_write+0x132>
	}

	result = spi_cmd_rsp(cmd);
    4384:	2317      	movs	r3, #23
    4386:	18fc      	adds	r4, r7, r3
    4388:	2315      	movs	r3, #21
    438a:	18fb      	adds	r3, r7, r3
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	0018      	movs	r0, r3
    4390:	4b51      	ldr	r3, [pc, #324]	; (44d8 <nm_spi_write+0x1cc>)
    4392:	4798      	blx	r3
    4394:	0003      	movs	r3, r0
    4396:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4398:	2317      	movs	r3, #23
    439a:	18fb      	adds	r3, r7, r3
    439c:	781b      	ldrb	r3, [r3, #0]
    439e:	b25b      	sxtb	r3, r3
    43a0:	2b01      	cmp	r3, #1
    43a2:	d00f      	beq.n	43c4 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    43a4:	4a4d      	ldr	r2, [pc, #308]	; (44dc <nm_spi_write+0x1d0>)
    43a6:	4947      	ldr	r1, [pc, #284]	; (44c4 <nm_spi_write+0x1b8>)
    43a8:	4b47      	ldr	r3, [pc, #284]	; (44c8 <nm_spi_write+0x1bc>)
    43aa:	0018      	movs	r0, r3
    43ac:	4b47      	ldr	r3, [pc, #284]	; (44cc <nm_spi_write+0x1c0>)
    43ae:	4798      	blx	r3
    43b0:	68fa      	ldr	r2, [r7, #12]
    43b2:	4b4b      	ldr	r3, [pc, #300]	; (44e0 <nm_spi_write+0x1d4>)
    43b4:	0011      	movs	r1, r2
    43b6:	0018      	movs	r0, r3
    43b8:	4b44      	ldr	r3, [pc, #272]	; (44cc <nm_spi_write+0x1c0>)
    43ba:	4798      	blx	r3
    43bc:	200d      	movs	r0, #13
    43be:	4b45      	ldr	r3, [pc, #276]	; (44d4 <nm_spi_write+0x1c8>)
    43c0:	4798      	blx	r3
		goto _FAIL_;
    43c2:	e03c      	b.n	443e <nm_spi_write+0x132>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    43c4:	2317      	movs	r3, #23
    43c6:	18fc      	adds	r4, r7, r3
    43c8:	1dbb      	adds	r3, r7, #6
    43ca:	881a      	ldrh	r2, [r3, #0]
    43cc:	68bb      	ldr	r3, [r7, #8]
    43ce:	0011      	movs	r1, r2
    43d0:	0018      	movs	r0, r3
    43d2:	4b44      	ldr	r3, [pc, #272]	; (44e4 <nm_spi_write+0x1d8>)
    43d4:	4798      	blx	r3
    43d6:	0003      	movs	r3, r0
    43d8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    43da:	2317      	movs	r3, #23
    43dc:	18fb      	adds	r3, r7, r3
    43de:	781b      	ldrb	r3, [r3, #0]
    43e0:	b25b      	sxtb	r3, r3
    43e2:	2b01      	cmp	r3, #1
    43e4:	d00d      	beq.n	4402 <nm_spi_write+0xf6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    43e6:	4a40      	ldr	r2, [pc, #256]	; (44e8 <nm_spi_write+0x1dc>)
    43e8:	4936      	ldr	r1, [pc, #216]	; (44c4 <nm_spi_write+0x1b8>)
    43ea:	4b37      	ldr	r3, [pc, #220]	; (44c8 <nm_spi_write+0x1bc>)
    43ec:	0018      	movs	r0, r3
    43ee:	4b37      	ldr	r3, [pc, #220]	; (44cc <nm_spi_write+0x1c0>)
    43f0:	4798      	blx	r3
    43f2:	4b3e      	ldr	r3, [pc, #248]	; (44ec <nm_spi_write+0x1e0>)
    43f4:	0018      	movs	r0, r3
    43f6:	4b3e      	ldr	r3, [pc, #248]	; (44f0 <nm_spi_write+0x1e4>)
    43f8:	4798      	blx	r3
    43fa:	200d      	movs	r0, #13
    43fc:	4b35      	ldr	r3, [pc, #212]	; (44d4 <nm_spi_write+0x1c8>)
    43fe:	4798      	blx	r3
		goto _FAIL_;
    4400:	e01d      	b.n	443e <nm_spi_write+0x132>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    4402:	2317      	movs	r3, #23
    4404:	18fc      	adds	r4, r7, r3
    4406:	2315      	movs	r3, #21
    4408:	18fb      	adds	r3, r7, r3
    440a:	781b      	ldrb	r3, [r3, #0]
    440c:	0018      	movs	r0, r3
    440e:	4b39      	ldr	r3, [pc, #228]	; (44f4 <nm_spi_write+0x1e8>)
    4410:	4798      	blx	r3
    4412:	0003      	movs	r3, r0
    4414:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4416:	2317      	movs	r3, #23
    4418:	18fb      	adds	r3, r7, r3
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	b25b      	sxtb	r3, r3
    441e:	2b01      	cmp	r3, #1
    4420:	d00d      	beq.n	443e <nm_spi_write+0x132>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4422:	4a35      	ldr	r2, [pc, #212]	; (44f8 <nm_spi_write+0x1ec>)
    4424:	4927      	ldr	r1, [pc, #156]	; (44c4 <nm_spi_write+0x1b8>)
    4426:	4b28      	ldr	r3, [pc, #160]	; (44c8 <nm_spi_write+0x1bc>)
    4428:	0018      	movs	r0, r3
    442a:	4b28      	ldr	r3, [pc, #160]	; (44cc <nm_spi_write+0x1c0>)
    442c:	4798      	blx	r3
    442e:	4b2f      	ldr	r3, [pc, #188]	; (44ec <nm_spi_write+0x1e0>)
    4430:	0018      	movs	r0, r3
    4432:	4b2f      	ldr	r3, [pc, #188]	; (44f0 <nm_spi_write+0x1e4>)
    4434:	4798      	blx	r3
    4436:	200d      	movs	r0, #13
    4438:	4b26      	ldr	r3, [pc, #152]	; (44d4 <nm_spi_write+0x1c8>)
    443a:	4798      	blx	r3
		goto _FAIL_;
    443c:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    443e:	2317      	movs	r3, #23
    4440:	18fb      	adds	r3, r7, r3
    4442:	781b      	ldrb	r3, [r3, #0]
    4444:	b25b      	sxtb	r3, r3
    4446:	2b01      	cmp	r3, #1
    4448:	d02f      	beq.n	44aa <nm_spi_write+0x19e>
	{
		nm_bsp_sleep(1);
    444a:	2001      	movs	r0, #1
    444c:	4b2b      	ldr	r3, [pc, #172]	; (44fc <nm_spi_write+0x1f0>)
    444e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4450:	2300      	movs	r3, #0
    4452:	9300      	str	r3, [sp, #0]
    4454:	2300      	movs	r3, #0
    4456:	2200      	movs	r2, #0
    4458:	2100      	movs	r1, #0
    445a:	20cf      	movs	r0, #207	; 0xcf
    445c:	4c17      	ldr	r4, [pc, #92]	; (44bc <nm_spi_write+0x1b0>)
    445e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4460:	20cf      	movs	r0, #207	; 0xcf
    4462:	4b1d      	ldr	r3, [pc, #116]	; (44d8 <nm_spi_write+0x1cc>)
    4464:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4466:	4a26      	ldr	r2, [pc, #152]	; (4500 <nm_spi_write+0x1f4>)
    4468:	4916      	ldr	r1, [pc, #88]	; (44c4 <nm_spi_write+0x1b8>)
    446a:	4b17      	ldr	r3, [pc, #92]	; (44c8 <nm_spi_write+0x1bc>)
    446c:	0018      	movs	r0, r3
    446e:	4b17      	ldr	r3, [pc, #92]	; (44cc <nm_spi_write+0x1c0>)
    4470:	4798      	blx	r3
    4472:	2316      	movs	r3, #22
    4474:	18fb      	adds	r3, r7, r3
    4476:	7819      	ldrb	r1, [r3, #0]
    4478:	1dbb      	adds	r3, r7, #6
    447a:	881b      	ldrh	r3, [r3, #0]
    447c:	68fa      	ldr	r2, [r7, #12]
    447e:	4821      	ldr	r0, [pc, #132]	; (4504 <nm_spi_write+0x1f8>)
    4480:	4c12      	ldr	r4, [pc, #72]	; (44cc <nm_spi_write+0x1c0>)
    4482:	47a0      	blx	r4
    4484:	200d      	movs	r0, #13
    4486:	4b13      	ldr	r3, [pc, #76]	; (44d4 <nm_spi_write+0x1c8>)
    4488:	4798      	blx	r3
		nm_bsp_sleep(1);
    448a:	2001      	movs	r0, #1
    448c:	4b1b      	ldr	r3, [pc, #108]	; (44fc <nm_spi_write+0x1f0>)
    448e:	4798      	blx	r3
		retry--;
    4490:	2316      	movs	r3, #22
    4492:	18fb      	adds	r3, r7, r3
    4494:	781a      	ldrb	r2, [r3, #0]
    4496:	2316      	movs	r3, #22
    4498:	18fb      	adds	r3, r7, r3
    449a:	3a01      	subs	r2, #1
    449c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    449e:	2316      	movs	r3, #22
    44a0:	18fb      	adds	r3, r7, r3
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d000      	beq.n	44aa <nm_spi_write+0x19e>
    44a8:	e73f      	b.n	432a <nm_spi_write+0x1e>
	}


	return result;
    44aa:	2317      	movs	r3, #23
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	b25b      	sxtb	r3, r3
}
    44b2:	0018      	movs	r0, r3
    44b4:	46bd      	mov	sp, r7
    44b6:	b006      	add	sp, #24
    44b8:	bdb0      	pop	{r4, r5, r7, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00003829 	.word	0x00003829
    44c0:	000003c9 	.word	0x000003c9
    44c4:	0001c498 	.word	0x0001c498
    44c8:	0001beb0 	.word	0x0001beb0
    44cc:	0001a001 	.word	0x0001a001
    44d0:	0001c160 	.word	0x0001c160
    44d4:	0001a035 	.word	0x0001a035
    44d8:	00003c6d 	.word	0x00003c6d
    44dc:	000003cf 	.word	0x000003cf
    44e0:	0001c190 	.word	0x0001c190
    44e4:	00003fad 	.word	0x00003fad
    44e8:	000003df 	.word	0x000003df
    44ec:	0001c1c8 	.word	0x0001c1c8
    44f0:	0001a11d 	.word	0x0001a11d
    44f4:	00003b6d 	.word	0x00003b6d
    44f8:	000003e7 	.word	0x000003e7
    44fc:	00000321 	.word	0x00000321
    4500:	000003f1 	.word	0x000003f1
    4504:	0001c1f0 	.word	0x0001c1f0

00004508 <spi_read_reg>:
 sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4508:	b5b0      	push	{r4, r5, r7, lr}
    450a:	b086      	sub	sp, #24
    450c:	af02      	add	r7, sp, #8
    450e:	6078      	str	r0, [r7, #4]
    4510:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    4512:	230f      	movs	r3, #15
    4514:	18fb      	adds	r3, r7, r3
    4516:	220a      	movs	r2, #10
    4518:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    451a:	230e      	movs	r3, #14
    451c:	18fb      	adds	r3, r7, r3
    451e:	2201      	movs	r2, #1
    4520:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    4522:	230d      	movs	r3, #13
    4524:	18fb      	adds	r3, r7, r3
    4526:	22ca      	movs	r2, #202	; 0xca
    4528:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    452a:	230c      	movs	r3, #12
    452c:	18fb      	adds	r3, r7, r3
    452e:	2200      	movs	r2, #0
    4530:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	2bff      	cmp	r3, #255	; 0xff
    4536:	d808      	bhi.n	454a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    4538:	230d      	movs	r3, #13
    453a:	18fb      	adds	r3, r7, r3
    453c:	22c4      	movs	r2, #196	; 0xc4
    453e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4540:	230c      	movs	r3, #12
    4542:	18fb      	adds	r3, r7, r3
    4544:	2201      	movs	r2, #1
    4546:	701a      	strb	r2, [r3, #0]
    4548:	e007      	b.n	455a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    454a:	230d      	movs	r3, #13
    454c:	18fb      	adds	r3, r7, r3
    454e:	22ca      	movs	r2, #202	; 0xca
    4550:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4552:	230c      	movs	r3, #12
    4554:	18fb      	adds	r3, r7, r3
    4556:	2200      	movs	r2, #0
    4558:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    455a:	230e      	movs	r3, #14
    455c:	18fc      	adds	r4, r7, r3
    455e:	6879      	ldr	r1, [r7, #4]
    4560:	230d      	movs	r3, #13
    4562:	18fb      	adds	r3, r7, r3
    4564:	7818      	ldrb	r0, [r3, #0]
    4566:	230c      	movs	r3, #12
    4568:	18fb      	adds	r3, r7, r3
    456a:	781b      	ldrb	r3, [r3, #0]
    456c:	9300      	str	r3, [sp, #0]
    456e:	2304      	movs	r3, #4
    4570:	2200      	movs	r2, #0
    4572:	4d56      	ldr	r5, [pc, #344]	; (46cc <spi_read_reg+0x1c4>)
    4574:	47a8      	blx	r5
    4576:	0003      	movs	r3, r0
    4578:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    457a:	230e      	movs	r3, #14
    457c:	18fb      	adds	r3, r7, r3
    457e:	781b      	ldrb	r3, [r3, #0]
    4580:	b25b      	sxtb	r3, r3
    4582:	2b01      	cmp	r3, #1
    4584:	d00f      	beq.n	45a6 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4586:	4a52      	ldr	r2, [pc, #328]	; (46d0 <spi_read_reg+0x1c8>)
    4588:	4952      	ldr	r1, [pc, #328]	; (46d4 <spi_read_reg+0x1cc>)
    458a:	4b53      	ldr	r3, [pc, #332]	; (46d8 <spi_read_reg+0x1d0>)
    458c:	0018      	movs	r0, r3
    458e:	4b53      	ldr	r3, [pc, #332]	; (46dc <spi_read_reg+0x1d4>)
    4590:	4798      	blx	r3
    4592:	687a      	ldr	r2, [r7, #4]
    4594:	4b52      	ldr	r3, [pc, #328]	; (46e0 <spi_read_reg+0x1d8>)
    4596:	0011      	movs	r1, r2
    4598:	0018      	movs	r0, r3
    459a:	4b50      	ldr	r3, [pc, #320]	; (46dc <spi_read_reg+0x1d4>)
    459c:	4798      	blx	r3
    459e:	200d      	movs	r0, #13
    45a0:	4b50      	ldr	r3, [pc, #320]	; (46e4 <spi_read_reg+0x1dc>)
    45a2:	4798      	blx	r3
		goto _FAIL_;
    45a4:	e055      	b.n	4652 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    45a6:	230e      	movs	r3, #14
    45a8:	18fc      	adds	r4, r7, r3
    45aa:	230d      	movs	r3, #13
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	0018      	movs	r0, r3
    45b2:	4b4d      	ldr	r3, [pc, #308]	; (46e8 <spi_read_reg+0x1e0>)
    45b4:	4798      	blx	r3
    45b6:	0003      	movs	r3, r0
    45b8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    45ba:	230e      	movs	r3, #14
    45bc:	18fb      	adds	r3, r7, r3
    45be:	781b      	ldrb	r3, [r3, #0]
    45c0:	b25b      	sxtb	r3, r3
    45c2:	2b01      	cmp	r3, #1
    45c4:	d00f      	beq.n	45e6 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    45c6:	4a49      	ldr	r2, [pc, #292]	; (46ec <spi_read_reg+0x1e4>)
    45c8:	4942      	ldr	r1, [pc, #264]	; (46d4 <spi_read_reg+0x1cc>)
    45ca:	4b43      	ldr	r3, [pc, #268]	; (46d8 <spi_read_reg+0x1d0>)
    45cc:	0018      	movs	r0, r3
    45ce:	4b43      	ldr	r3, [pc, #268]	; (46dc <spi_read_reg+0x1d4>)
    45d0:	4798      	blx	r3
    45d2:	687a      	ldr	r2, [r7, #4]
    45d4:	4b46      	ldr	r3, [pc, #280]	; (46f0 <spi_read_reg+0x1e8>)
    45d6:	0011      	movs	r1, r2
    45d8:	0018      	movs	r0, r3
    45da:	4b40      	ldr	r3, [pc, #256]	; (46dc <spi_read_reg+0x1d4>)
    45dc:	4798      	blx	r3
    45de:	200d      	movs	r0, #13
    45e0:	4b40      	ldr	r3, [pc, #256]	; (46e4 <spi_read_reg+0x1dc>)
    45e2:	4798      	blx	r3
		goto _FAIL_;
    45e4:	e035      	b.n	4652 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    45e6:	230e      	movs	r3, #14
    45e8:	18fc      	adds	r4, r7, r3
    45ea:	230c      	movs	r3, #12
    45ec:	18fb      	adds	r3, r7, r3
    45ee:	781a      	ldrb	r2, [r3, #0]
    45f0:	2308      	movs	r3, #8
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	2104      	movs	r1, #4
    45f6:	0018      	movs	r0, r3
    45f8:	4b3e      	ldr	r3, [pc, #248]	; (46f4 <spi_read_reg+0x1ec>)
    45fa:	4798      	blx	r3
    45fc:	0003      	movs	r3, r0
    45fe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4600:	230e      	movs	r3, #14
    4602:	18fb      	adds	r3, r7, r3
    4604:	781b      	ldrb	r3, [r3, #0]
    4606:	b25b      	sxtb	r3, r3
    4608:	2b01      	cmp	r3, #1
    460a:	d00d      	beq.n	4628 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    460c:	4a3a      	ldr	r2, [pc, #232]	; (46f8 <spi_read_reg+0x1f0>)
    460e:	4931      	ldr	r1, [pc, #196]	; (46d4 <spi_read_reg+0x1cc>)
    4610:	4b31      	ldr	r3, [pc, #196]	; (46d8 <spi_read_reg+0x1d0>)
    4612:	0018      	movs	r0, r3
    4614:	4b31      	ldr	r3, [pc, #196]	; (46dc <spi_read_reg+0x1d4>)
    4616:	4798      	blx	r3
    4618:	4b38      	ldr	r3, [pc, #224]	; (46fc <spi_read_reg+0x1f4>)
    461a:	0018      	movs	r0, r3
    461c:	4b38      	ldr	r3, [pc, #224]	; (4700 <spi_read_reg+0x1f8>)
    461e:	4798      	blx	r3
    4620:	200d      	movs	r0, #13
    4622:	4b30      	ldr	r3, [pc, #192]	; (46e4 <spi_read_reg+0x1dc>)
    4624:	4798      	blx	r3
		goto _FAIL_;
    4626:	e014      	b.n	4652 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    4628:	2308      	movs	r3, #8
    462a:	18fb      	adds	r3, r7, r3
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    4630:	2308      	movs	r3, #8
    4632:	18fb      	adds	r3, r7, r3
    4634:	785b      	ldrb	r3, [r3, #1]
    4636:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    4638:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    463a:	2308      	movs	r3, #8
    463c:	18fb      	adds	r3, r7, r3
    463e:	789b      	ldrb	r3, [r3, #2]
    4640:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    4642:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4644:	2308      	movs	r3, #8
    4646:	18fb      	adds	r3, r7, r3
    4648:	78db      	ldrb	r3, [r3, #3]
    464a:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    464c:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    464e:	683b      	ldr	r3, [r7, #0]
    4650:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    4652:	230e      	movs	r3, #14
    4654:	18fb      	adds	r3, r7, r3
    4656:	781b      	ldrb	r3, [r3, #0]
    4658:	b25b      	sxtb	r3, r3
    465a:	2b01      	cmp	r3, #1
    465c:	d02e      	beq.n	46bc <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    465e:	2001      	movs	r0, #1
    4660:	4b28      	ldr	r3, [pc, #160]	; (4704 <spi_read_reg+0x1fc>)
    4662:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4664:	2300      	movs	r3, #0
    4666:	9300      	str	r3, [sp, #0]
    4668:	2300      	movs	r3, #0
    466a:	2200      	movs	r2, #0
    466c:	2100      	movs	r1, #0
    466e:	20cf      	movs	r0, #207	; 0xcf
    4670:	4c16      	ldr	r4, [pc, #88]	; (46cc <spi_read_reg+0x1c4>)
    4672:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4674:	20cf      	movs	r0, #207	; 0xcf
    4676:	4b1c      	ldr	r3, [pc, #112]	; (46e8 <spi_read_reg+0x1e0>)
    4678:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    467a:	4a23      	ldr	r2, [pc, #140]	; (4708 <spi_read_reg+0x200>)
    467c:	4915      	ldr	r1, [pc, #84]	; (46d4 <spi_read_reg+0x1cc>)
    467e:	4b16      	ldr	r3, [pc, #88]	; (46d8 <spi_read_reg+0x1d0>)
    4680:	0018      	movs	r0, r3
    4682:	4b16      	ldr	r3, [pc, #88]	; (46dc <spi_read_reg+0x1d4>)
    4684:	4798      	blx	r3
    4686:	230f      	movs	r3, #15
    4688:	18fb      	adds	r3, r7, r3
    468a:	7819      	ldrb	r1, [r3, #0]
    468c:	687a      	ldr	r2, [r7, #4]
    468e:	4b1f      	ldr	r3, [pc, #124]	; (470c <spi_read_reg+0x204>)
    4690:	0018      	movs	r0, r3
    4692:	4b12      	ldr	r3, [pc, #72]	; (46dc <spi_read_reg+0x1d4>)
    4694:	4798      	blx	r3
    4696:	200d      	movs	r0, #13
    4698:	4b12      	ldr	r3, [pc, #72]	; (46e4 <spi_read_reg+0x1dc>)
    469a:	4798      	blx	r3
		nm_bsp_sleep(1);
    469c:	2001      	movs	r0, #1
    469e:	4b19      	ldr	r3, [pc, #100]	; (4704 <spi_read_reg+0x1fc>)
    46a0:	4798      	blx	r3
		retry--;
    46a2:	230f      	movs	r3, #15
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	781a      	ldrb	r2, [r3, #0]
    46a8:	230f      	movs	r3, #15
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	3a01      	subs	r2, #1
    46ae:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    46b0:	230f      	movs	r3, #15
    46b2:	18fb      	adds	r3, r7, r3
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d000      	beq.n	46bc <spi_read_reg+0x1b4>
    46ba:	e73a      	b.n	4532 <spi_read_reg+0x2a>
	}
		
	return result;
    46bc:	230e      	movs	r3, #14
    46be:	18fb      	adds	r3, r7, r3
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	b25b      	sxtb	r3, r3
}
    46c4:	0018      	movs	r0, r3
    46c6:	46bd      	mov	sp, r7
    46c8:	b004      	add	sp, #16
    46ca:	bdb0      	pop	{r4, r5, r7, pc}
    46cc:	00003829 	.word	0x00003829
    46d0:	00000415 	.word	0x00000415
    46d4:	0001c4a8 	.word	0x0001c4a8
    46d8:	0001beb0 	.word	0x0001beb0
    46dc:	0001a001 	.word	0x0001a001
    46e0:	0001c20c 	.word	0x0001c20c
    46e4:	0001a035 	.word	0x0001a035
    46e8:	00003c6d 	.word	0x00003c6d
    46ec:	0000041b 	.word	0x0000041b
    46f0:	0001c238 	.word	0x0001c238
    46f4:	00003da9 	.word	0x00003da9
    46f8:	00000422 	.word	0x00000422
    46fc:	0001c26c 	.word	0x0001c26c
    4700:	0001a11d 	.word	0x0001a11d
    4704:	00000321 	.word	0x00000321
    4708:	0000043a 	.word	0x0000043a
    470c:	0001c28c 	.word	0x0001c28c

00004710 <nm_spi_read>:

 sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4710:	b5b0      	push	{r4, r5, r7, lr}
    4712:	b088      	sub	sp, #32
    4714:	af02      	add	r7, sp, #8
    4716:	60f8      	str	r0, [r7, #12]
    4718:	60b9      	str	r1, [r7, #8]
    471a:	1dbb      	adds	r3, r7, #6
    471c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    471e:	2314      	movs	r3, #20
    4720:	18fb      	adds	r3, r7, r3
    4722:	22c8      	movs	r2, #200	; 0xc8
    4724:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    4726:	2316      	movs	r3, #22
    4728:	18fb      	adds	r3, r7, r3
    472a:	220a      	movs	r2, #10
    472c:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    472e:	2315      	movs	r3, #21
    4730:	18fb      	adds	r3, r7, r3
    4732:	2200      	movs	r2, #0
    4734:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    4736:	1dbb      	adds	r3, r7, #6
    4738:	881b      	ldrh	r3, [r3, #0]
    473a:	2b01      	cmp	r3, #1
    473c:	d106      	bne.n	474c <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    473e:	1dbb      	adds	r3, r7, #6
    4740:	2202      	movs	r2, #2
    4742:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4744:	2315      	movs	r3, #21
    4746:	18fb      	adds	r3, r7, r3
    4748:	2201      	movs	r2, #1
    474a:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    474c:	1dbb      	adds	r3, r7, #6
    474e:	881a      	ldrh	r2, [r3, #0]
    4750:	2317      	movs	r3, #23
    4752:	18fc      	adds	r4, r7, r3
    4754:	68f9      	ldr	r1, [r7, #12]
    4756:	2314      	movs	r3, #20
    4758:	18fb      	adds	r3, r7, r3
    475a:	7818      	ldrb	r0, [r3, #0]
    475c:	2300      	movs	r3, #0
    475e:	9300      	str	r3, [sp, #0]
    4760:	0013      	movs	r3, r2
    4762:	2200      	movs	r2, #0
    4764:	4d56      	ldr	r5, [pc, #344]	; (48c0 <nm_spi_read+0x1b0>)
    4766:	47a8      	blx	r5
    4768:	0003      	movs	r3, r0
    476a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    476c:	2317      	movs	r3, #23
    476e:	18fb      	adds	r3, r7, r3
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	b25b      	sxtb	r3, r3
    4774:	2b01      	cmp	r3, #1
    4776:	d00f      	beq.n	4798 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4778:	4a52      	ldr	r2, [pc, #328]	; (48c4 <nm_spi_read+0x1b4>)
    477a:	4953      	ldr	r1, [pc, #332]	; (48c8 <nm_spi_read+0x1b8>)
    477c:	4b53      	ldr	r3, [pc, #332]	; (48cc <nm_spi_read+0x1bc>)
    477e:	0018      	movs	r0, r3
    4780:	4b53      	ldr	r3, [pc, #332]	; (48d0 <nm_spi_read+0x1c0>)
    4782:	4798      	blx	r3
    4784:	68fa      	ldr	r2, [r7, #12]
    4786:	4b53      	ldr	r3, [pc, #332]	; (48d4 <nm_spi_read+0x1c4>)
    4788:	0011      	movs	r1, r2
    478a:	0018      	movs	r0, r3
    478c:	4b50      	ldr	r3, [pc, #320]	; (48d0 <nm_spi_read+0x1c0>)
    478e:	4798      	blx	r3
    4790:	200d      	movs	r0, #13
    4792:	4b51      	ldr	r3, [pc, #324]	; (48d8 <nm_spi_read+0x1c8>)
    4794:	4798      	blx	r3
		goto _FAIL_;
    4796:	e055      	b.n	4844 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4798:	2317      	movs	r3, #23
    479a:	18fc      	adds	r4, r7, r3
    479c:	2314      	movs	r3, #20
    479e:	18fb      	adds	r3, r7, r3
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	0018      	movs	r0, r3
    47a4:	4b4d      	ldr	r3, [pc, #308]	; (48dc <nm_spi_read+0x1cc>)
    47a6:	4798      	blx	r3
    47a8:	0003      	movs	r3, r0
    47aa:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47ac:	2317      	movs	r3, #23
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	b25b      	sxtb	r3, r3
    47b4:	2b01      	cmp	r3, #1
    47b6:	d00f      	beq.n	47d8 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    47b8:	4a49      	ldr	r2, [pc, #292]	; (48e0 <nm_spi_read+0x1d0>)
    47ba:	4943      	ldr	r1, [pc, #268]	; (48c8 <nm_spi_read+0x1b8>)
    47bc:	4b43      	ldr	r3, [pc, #268]	; (48cc <nm_spi_read+0x1bc>)
    47be:	0018      	movs	r0, r3
    47c0:	4b43      	ldr	r3, [pc, #268]	; (48d0 <nm_spi_read+0x1c0>)
    47c2:	4798      	blx	r3
    47c4:	68fa      	ldr	r2, [r7, #12]
    47c6:	4b47      	ldr	r3, [pc, #284]	; (48e4 <nm_spi_read+0x1d4>)
    47c8:	0011      	movs	r1, r2
    47ca:	0018      	movs	r0, r3
    47cc:	4b40      	ldr	r3, [pc, #256]	; (48d0 <nm_spi_read+0x1c0>)
    47ce:	4798      	blx	r3
    47d0:	200d      	movs	r0, #13
    47d2:	4b41      	ldr	r3, [pc, #260]	; (48d8 <nm_spi_read+0x1c8>)
    47d4:	4798      	blx	r3
		goto _FAIL_;
    47d6:	e035      	b.n	4844 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    47d8:	2315      	movs	r3, #21
    47da:	18fb      	adds	r3, r7, r3
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	2b00      	cmp	r3, #0
    47e0:	d011      	beq.n	4806 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    47e2:	2317      	movs	r3, #23
    47e4:	18fc      	adds	r4, r7, r3
    47e6:	1dbb      	adds	r3, r7, #6
    47e8:	8819      	ldrh	r1, [r3, #0]
    47ea:	2310      	movs	r3, #16
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	2200      	movs	r2, #0
    47f0:	0018      	movs	r0, r3
    47f2:	4b3d      	ldr	r3, [pc, #244]	; (48e8 <nm_spi_read+0x1d8>)
    47f4:	4798      	blx	r3
    47f6:	0003      	movs	r3, r0
    47f8:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    47fa:	2310      	movs	r3, #16
    47fc:	18fb      	adds	r3, r7, r3
    47fe:	781a      	ldrb	r2, [r3, #0]
    4800:	68bb      	ldr	r3, [r7, #8]
    4802:	701a      	strb	r2, [r3, #0]
    4804:	e00a      	b.n	481c <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    4806:	2317      	movs	r3, #23
    4808:	18fc      	adds	r4, r7, r3
    480a:	1dbb      	adds	r3, r7, #6
    480c:	8819      	ldrh	r1, [r3, #0]
    480e:	68bb      	ldr	r3, [r7, #8]
    4810:	2200      	movs	r2, #0
    4812:	0018      	movs	r0, r3
    4814:	4b34      	ldr	r3, [pc, #208]	; (48e8 <nm_spi_read+0x1d8>)
    4816:	4798      	blx	r3
    4818:	0003      	movs	r3, r0
    481a:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    481c:	2317      	movs	r3, #23
    481e:	18fb      	adds	r3, r7, r3
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	b25b      	sxtb	r3, r3
    4824:	2b01      	cmp	r3, #1
    4826:	d00d      	beq.n	4844 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    4828:	4a30      	ldr	r2, [pc, #192]	; (48ec <nm_spi_read+0x1dc>)
    482a:	4927      	ldr	r1, [pc, #156]	; (48c8 <nm_spi_read+0x1b8>)
    482c:	4b27      	ldr	r3, [pc, #156]	; (48cc <nm_spi_read+0x1bc>)
    482e:	0018      	movs	r0, r3
    4830:	4b27      	ldr	r3, [pc, #156]	; (48d0 <nm_spi_read+0x1c0>)
    4832:	4798      	blx	r3
    4834:	4b2e      	ldr	r3, [pc, #184]	; (48f0 <nm_spi_read+0x1e0>)
    4836:	0018      	movs	r0, r3
    4838:	4b2e      	ldr	r3, [pc, #184]	; (48f4 <nm_spi_read+0x1e4>)
    483a:	4798      	blx	r3
    483c:	200d      	movs	r0, #13
    483e:	4b26      	ldr	r3, [pc, #152]	; (48d8 <nm_spi_read+0x1c8>)
    4840:	4798      	blx	r3
		goto _FAIL_;
    4842:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4844:	2317      	movs	r3, #23
    4846:	18fb      	adds	r3, r7, r3
    4848:	781b      	ldrb	r3, [r3, #0]
    484a:	b25b      	sxtb	r3, r3
    484c:	2b01      	cmp	r3, #1
    484e:	d02f      	beq.n	48b0 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    4850:	2001      	movs	r0, #1
    4852:	4b29      	ldr	r3, [pc, #164]	; (48f8 <nm_spi_read+0x1e8>)
    4854:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4856:	2300      	movs	r3, #0
    4858:	9300      	str	r3, [sp, #0]
    485a:	2300      	movs	r3, #0
    485c:	2200      	movs	r2, #0
    485e:	2100      	movs	r1, #0
    4860:	20cf      	movs	r0, #207	; 0xcf
    4862:	4c17      	ldr	r4, [pc, #92]	; (48c0 <nm_spi_read+0x1b0>)
    4864:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4866:	20cf      	movs	r0, #207	; 0xcf
    4868:	4b1c      	ldr	r3, [pc, #112]	; (48dc <nm_spi_read+0x1cc>)
    486a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    486c:	4a23      	ldr	r2, [pc, #140]	; (48fc <nm_spi_read+0x1ec>)
    486e:	4916      	ldr	r1, [pc, #88]	; (48c8 <nm_spi_read+0x1b8>)
    4870:	4b16      	ldr	r3, [pc, #88]	; (48cc <nm_spi_read+0x1bc>)
    4872:	0018      	movs	r0, r3
    4874:	4b16      	ldr	r3, [pc, #88]	; (48d0 <nm_spi_read+0x1c0>)
    4876:	4798      	blx	r3
    4878:	2316      	movs	r3, #22
    487a:	18fb      	adds	r3, r7, r3
    487c:	7819      	ldrb	r1, [r3, #0]
    487e:	1dbb      	adds	r3, r7, #6
    4880:	881b      	ldrh	r3, [r3, #0]
    4882:	68fa      	ldr	r2, [r7, #12]
    4884:	481e      	ldr	r0, [pc, #120]	; (4900 <nm_spi_read+0x1f0>)
    4886:	4c12      	ldr	r4, [pc, #72]	; (48d0 <nm_spi_read+0x1c0>)
    4888:	47a0      	blx	r4
    488a:	200d      	movs	r0, #13
    488c:	4b12      	ldr	r3, [pc, #72]	; (48d8 <nm_spi_read+0x1c8>)
    488e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4890:	2001      	movs	r0, #1
    4892:	4b19      	ldr	r3, [pc, #100]	; (48f8 <nm_spi_read+0x1e8>)
    4894:	4798      	blx	r3
		retry--;
    4896:	2316      	movs	r3, #22
    4898:	18fb      	adds	r3, r7, r3
    489a:	781a      	ldrb	r2, [r3, #0]
    489c:	2316      	movs	r3, #22
    489e:	18fb      	adds	r3, r7, r3
    48a0:	3a01      	subs	r2, #1
    48a2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    48a4:	2316      	movs	r3, #22
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	781b      	ldrb	r3, [r3, #0]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d000      	beq.n	48b0 <nm_spi_read+0x1a0>
    48ae:	e742      	b.n	4736 <nm_spi_read+0x26>
	}

	return result;
    48b0:	2317      	movs	r3, #23
    48b2:	18fb      	adds	r3, r7, r3
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	b25b      	sxtb	r3, r3
}
    48b8:	0018      	movs	r0, r3
    48ba:	46bd      	mov	sp, r7
    48bc:	b006      	add	sp, #24
    48be:	bdb0      	pop	{r4, r5, r7, pc}
    48c0:	00003829 	.word	0x00003829
    48c4:	0000045b 	.word	0x0000045b
    48c8:	0001c4b8 	.word	0x0001c4b8
    48cc:	0001beb0 	.word	0x0001beb0
    48d0:	0001a001 	.word	0x0001a001
    48d4:	0001c2a4 	.word	0x0001c2a4
    48d8:	0001a035 	.word	0x0001a035
    48dc:	00003c6d 	.word	0x00003c6d
    48e0:	00000461 	.word	0x00000461
    48e4:	0001c2d4 	.word	0x0001c2d4
    48e8:	00003da9 	.word	0x00003da9
    48ec:	00000471 	.word	0x00000471
    48f0:	0001c30c 	.word	0x0001c30c
    48f4:	0001a11d 	.word	0x0001a11d
    48f8:	00000321 	.word	0x00000321
    48fc:	00000482 	.word	0x00000482
    4900:	0001c1f0 	.word	0x0001c1f0

00004904 <nm_spi_read_reg>:
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4904:	b580      	push	{r7, lr}
    4906:	b084      	sub	sp, #16
    4908:	af00      	add	r7, sp, #0
    490a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    490c:	230c      	movs	r3, #12
    490e:	18fa      	adds	r2, r7, r3
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	0011      	movs	r1, r2
    4914:	0018      	movs	r0, r3
    4916:	4b03      	ldr	r3, [pc, #12]	; (4924 <nm_spi_read_reg+0x20>)
    4918:	4798      	blx	r3

	return u32Val;
    491a:	68fb      	ldr	r3, [r7, #12]
}
    491c:	0018      	movs	r0, r3
    491e:	46bd      	mov	sp, r7
    4920:	b004      	add	sp, #16
    4922:	bd80      	pop	{r7, pc}
    4924:	00004509 	.word	0x00004509

00004928 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4928:	b580      	push	{r7, lr}
    492a:	b082      	sub	sp, #8
    492c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    492e:	4b0c      	ldr	r3, [pc, #48]	; (4960 <spi_init_pkt_sz+0x38>)
    4930:	0018      	movs	r0, r3
    4932:	4b0c      	ldr	r3, [pc, #48]	; (4964 <spi_init_pkt_sz+0x3c>)
    4934:	4798      	blx	r3
    4936:	0003      	movs	r3, r0
    4938:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	2270      	movs	r2, #112	; 0x70
    493e:	4393      	bics	r3, r2
    4940:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	2250      	movs	r2, #80	; 0x50
    4946:	4313      	orrs	r3, r2
    4948:	607b      	str	r3, [r7, #4]
    494a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	4a04      	ldr	r2, [pc, #16]	; (4960 <spi_init_pkt_sz+0x38>)
    4950:	0019      	movs	r1, r3
    4952:	0010      	movs	r0, r2
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <spi_init_pkt_sz+0x40>)
    4956:	4798      	blx	r3
}
    4958:	46c0      	nop			; (mov r8, r8)
    495a:	46bd      	mov	sp, r7
    495c:	b002      	add	sp, #8
    495e:	bd80      	pop	{r7, pc}
    4960:	0000e824 	.word	0x0000e824
    4964:	00004905 	.word	0x00004905
    4968:	00004b51 	.word	0x00004b51

0000496c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    496c:	b590      	push	{r4, r7, lr}
    496e:	b083      	sub	sp, #12
    4970:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4972:	2300      	movs	r3, #0
    4974:	9300      	str	r3, [sp, #0]
    4976:	2300      	movs	r3, #0
    4978:	2200      	movs	r2, #0
    497a:	2100      	movs	r1, #0
    497c:	20cf      	movs	r0, #207	; 0xcf
    497e:	4c05      	ldr	r4, [pc, #20]	; (4994 <nm_spi_reset+0x28>)
    4980:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    4982:	20cf      	movs	r0, #207	; 0xcf
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <nm_spi_reset+0x2c>)
    4986:	4798      	blx	r3
	return M2M_SUCCESS;
    4988:	2300      	movs	r3, #0
}
    498a:	0018      	movs	r0, r3
    498c:	46bd      	mov	sp, r7
    498e:	b001      	add	sp, #4
    4990:	bd90      	pop	{r4, r7, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	00003829 	.word	0x00003829
    4998:	00003c6d 	.word	0x00003c6d

0000499c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    49a6:	4b3e      	ldr	r3, [pc, #248]	; (4aa0 <nm_spi_init+0x104>)
    49a8:	2200      	movs	r2, #0
    49aa:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    49ac:	003b      	movs	r3, r7
    49ae:	4a3d      	ldr	r2, [pc, #244]	; (4aa4 <nm_spi_init+0x108>)
    49b0:	0019      	movs	r1, r3
    49b2:	0010      	movs	r0, r2
    49b4:	4b3c      	ldr	r3, [pc, #240]	; (4aa8 <nm_spi_init+0x10c>)
    49b6:	4798      	blx	r3
    49b8:	1e03      	subs	r3, r0, #0
    49ba:	d126      	bne.n	4a0a <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    49bc:	4b38      	ldr	r3, [pc, #224]	; (4aa0 <nm_spi_init+0x104>)
    49be:	2201      	movs	r2, #1
    49c0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    49c2:	4a3a      	ldr	r2, [pc, #232]	; (4aac <nm_spi_init+0x110>)
    49c4:	493a      	ldr	r1, [pc, #232]	; (4ab0 <nm_spi_init+0x114>)
    49c6:	4b3b      	ldr	r3, [pc, #236]	; (4ab4 <nm_spi_init+0x118>)
    49c8:	0018      	movs	r0, r3
    49ca:	4b3b      	ldr	r3, [pc, #236]	; (4ab8 <nm_spi_init+0x11c>)
    49cc:	4798      	blx	r3
    49ce:	4b3b      	ldr	r3, [pc, #236]	; (4abc <nm_spi_init+0x120>)
    49d0:	0018      	movs	r0, r3
    49d2:	4b3b      	ldr	r3, [pc, #236]	; (4ac0 <nm_spi_init+0x124>)
    49d4:	4798      	blx	r3
    49d6:	200d      	movs	r0, #13
    49d8:	4b3a      	ldr	r3, [pc, #232]	; (4ac4 <nm_spi_init+0x128>)
    49da:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    49dc:	003b      	movs	r3, r7
    49de:	4a31      	ldr	r2, [pc, #196]	; (4aa4 <nm_spi_init+0x108>)
    49e0:	0019      	movs	r1, r3
    49e2:	0010      	movs	r0, r2
    49e4:	4b30      	ldr	r3, [pc, #192]	; (4aa8 <nm_spi_init+0x10c>)
    49e6:	4798      	blx	r3
    49e8:	1e03      	subs	r3, r0, #0
    49ea:	d10e      	bne.n	4a0a <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    49ec:	4a36      	ldr	r2, [pc, #216]	; (4ac8 <nm_spi_init+0x12c>)
    49ee:	4930      	ldr	r1, [pc, #192]	; (4ab0 <nm_spi_init+0x114>)
    49f0:	4b30      	ldr	r3, [pc, #192]	; (4ab4 <nm_spi_init+0x118>)
    49f2:	0018      	movs	r0, r3
    49f4:	4b30      	ldr	r3, [pc, #192]	; (4ab8 <nm_spi_init+0x11c>)
    49f6:	4798      	blx	r3
    49f8:	4b34      	ldr	r3, [pc, #208]	; (4acc <nm_spi_init+0x130>)
    49fa:	0018      	movs	r0, r3
    49fc:	4b30      	ldr	r3, [pc, #192]	; (4ac0 <nm_spi_init+0x124>)
    49fe:	4798      	blx	r3
    4a00:	200d      	movs	r0, #13
    4a02:	4b30      	ldr	r3, [pc, #192]	; (4ac4 <nm_spi_init+0x128>)
    4a04:	4798      	blx	r3
			return 0;
    4a06:	2300      	movs	r3, #0
    4a08:	e045      	b.n	4a96 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    4a0a:	4b25      	ldr	r3, [pc, #148]	; (4aa0 <nm_spi_init+0x104>)
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d125      	bne.n	4a5e <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    4a12:	683b      	ldr	r3, [r7, #0]
    4a14:	220c      	movs	r2, #12
    4a16:	4393      	bics	r3, r2
    4a18:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	2270      	movs	r2, #112	; 0x70
    4a1e:	4393      	bics	r3, r2
    4a20:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	2250      	movs	r2, #80	; 0x50
    4a26:	4313      	orrs	r3, r2
    4a28:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4a2a:	683b      	ldr	r3, [r7, #0]
    4a2c:	4a1d      	ldr	r2, [pc, #116]	; (4aa4 <nm_spi_init+0x108>)
    4a2e:	0019      	movs	r1, r3
    4a30:	0010      	movs	r0, r2
    4a32:	4b27      	ldr	r3, [pc, #156]	; (4ad0 <nm_spi_init+0x134>)
    4a34:	4798      	blx	r3
    4a36:	1e03      	subs	r3, r0, #0
    4a38:	d10e      	bne.n	4a58 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    4a3a:	4a26      	ldr	r2, [pc, #152]	; (4ad4 <nm_spi_init+0x138>)
    4a3c:	491c      	ldr	r1, [pc, #112]	; (4ab0 <nm_spi_init+0x114>)
    4a3e:	4b1d      	ldr	r3, [pc, #116]	; (4ab4 <nm_spi_init+0x118>)
    4a40:	0018      	movs	r0, r3
    4a42:	4b1d      	ldr	r3, [pc, #116]	; (4ab8 <nm_spi_init+0x11c>)
    4a44:	4798      	blx	r3
    4a46:	4b24      	ldr	r3, [pc, #144]	; (4ad8 <nm_spi_init+0x13c>)
    4a48:	0018      	movs	r0, r3
    4a4a:	4b1d      	ldr	r3, [pc, #116]	; (4ac0 <nm_spi_init+0x124>)
    4a4c:	4798      	blx	r3
    4a4e:	200d      	movs	r0, #13
    4a50:	4b1c      	ldr	r3, [pc, #112]	; (4ac4 <nm_spi_init+0x128>)
    4a52:	4798      	blx	r3
			return 0;
    4a54:	2300      	movs	r3, #0
    4a56:	e01e      	b.n	4a96 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    4a58:	4b11      	ldr	r3, [pc, #68]	; (4aa0 <nm_spi_init+0x104>)
    4a5a:	2201      	movs	r2, #1
    4a5c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    4a5e:	1d3a      	adds	r2, r7, #4
    4a60:	2380      	movs	r3, #128	; 0x80
    4a62:	015b      	lsls	r3, r3, #5
    4a64:	0011      	movs	r1, r2
    4a66:	0018      	movs	r0, r3
    4a68:	4b0f      	ldr	r3, [pc, #60]	; (4aa8 <nm_spi_init+0x10c>)
    4a6a:	4798      	blx	r3
    4a6c:	1e03      	subs	r3, r0, #0
    4a6e:	d10f      	bne.n	4a90 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4a70:	4a1a      	ldr	r2, [pc, #104]	; (4adc <nm_spi_init+0x140>)
    4a72:	490f      	ldr	r1, [pc, #60]	; (4ab0 <nm_spi_init+0x114>)
    4a74:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <nm_spi_init+0x118>)
    4a76:	0018      	movs	r0, r3
    4a78:	4b0f      	ldr	r3, [pc, #60]	; (4ab8 <nm_spi_init+0x11c>)
    4a7a:	4798      	blx	r3
    4a7c:	4b18      	ldr	r3, [pc, #96]	; (4ae0 <nm_spi_init+0x144>)
    4a7e:	0018      	movs	r0, r3
    4a80:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <nm_spi_init+0x124>)
    4a82:	4798      	blx	r3
    4a84:	200d      	movs	r0, #13
    4a86:	4b0f      	ldr	r3, [pc, #60]	; (4ac4 <nm_spi_init+0x128>)
    4a88:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4a8a:	2306      	movs	r3, #6
    4a8c:	425b      	negs	r3, r3
    4a8e:	e002      	b.n	4a96 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4a90:	4b14      	ldr	r3, [pc, #80]	; (4ae4 <nm_spi_init+0x148>)
    4a92:	4798      	blx	r3


	return M2M_SUCCESS;
    4a94:	2300      	movs	r3, #0
}
    4a96:	0018      	movs	r0, r3
    4a98:	46bd      	mov	sp, r7
    4a9a:	b002      	add	sp, #8
    4a9c:	bd80      	pop	{r7, pc}
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	200005cc 	.word	0x200005cc
    4aa4:	0000e824 	.word	0x0000e824
    4aa8:	00004509 	.word	0x00004509
    4aac:	000004cc 	.word	0x000004cc
    4ab0:	0001c4c4 	.word	0x0001c4c4
    4ab4:	0001beb0 	.word	0x0001beb0
    4ab8:	0001a001 	.word	0x0001a001
    4abc:	0001c334 	.word	0x0001c334
    4ac0:	0001a11d 	.word	0x0001a11d
    4ac4:	0001a035 	.word	0x0001a035
    4ac8:	000004cf 	.word	0x000004cf
    4acc:	0001c384 	.word	0x0001c384
    4ad0:	00004181 	.word	0x00004181
    4ad4:	000004d9 	.word	0x000004d9
    4ad8:	0001c3b0 	.word	0x0001c3b0
    4adc:	000004e3 	.word	0x000004e3
    4ae0:	0001c3e4 	.word	0x0001c3e4
    4ae4:	00004929 	.word	0x00004929

00004ae8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4ae8:	b580      	push	{r7, lr}
    4aea:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4aec:	4b03      	ldr	r3, [pc, #12]	; (4afc <nm_spi_deinit+0x14>)
    4aee:	2200      	movs	r2, #0
    4af0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4af2:	2300      	movs	r3, #0
}
    4af4:	0018      	movs	r0, r3
    4af6:	46bd      	mov	sp, r7
    4af8:	bd80      	pop	{r7, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	200005cc 	.word	0x200005cc

00004b00 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4b00:	b590      	push	{r4, r7, lr}
    4b02:	b085      	sub	sp, #20
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
    4b08:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4b0a:	230f      	movs	r3, #15
    4b0c:	18fc      	adds	r4, r7, r3
    4b0e:	683a      	ldr	r2, [r7, #0]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	0011      	movs	r1, r2
    4b14:	0018      	movs	r0, r3
    4b16:	4b0d      	ldr	r3, [pc, #52]	; (4b4c <nm_spi_read_reg_with_ret+0x4c>)
    4b18:	4798      	blx	r3
    4b1a:	0003      	movs	r3, r0
    4b1c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4b1e:	230f      	movs	r3, #15
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	b25b      	sxtb	r3, r3
    4b26:	2b01      	cmp	r3, #1
    4b28:	d104      	bne.n	4b34 <nm_spi_read_reg_with_ret+0x34>
    4b2a:	230f      	movs	r3, #15
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	2200      	movs	r2, #0
    4b30:	701a      	strb	r2, [r3, #0]
    4b32:	e003      	b.n	4b3c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4b34:	230f      	movs	r3, #15
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	22fa      	movs	r2, #250	; 0xfa
    4b3a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4b3c:	230f      	movs	r3, #15
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	781b      	ldrb	r3, [r3, #0]
    4b42:	b25b      	sxtb	r3, r3
}
    4b44:	0018      	movs	r0, r3
    4b46:	46bd      	mov	sp, r7
    4b48:	b005      	add	sp, #20
    4b4a:	bd90      	pop	{r4, r7, pc}
    4b4c:	00004509 	.word	0x00004509

00004b50 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4b50:	b590      	push	{r4, r7, lr}
    4b52:	b085      	sub	sp, #20
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
    4b58:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4b5a:	230f      	movs	r3, #15
    4b5c:	18fc      	adds	r4, r7, r3
    4b5e:	683a      	ldr	r2, [r7, #0]
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	0011      	movs	r1, r2
    4b64:	0018      	movs	r0, r3
    4b66:	4b0d      	ldr	r3, [pc, #52]	; (4b9c <nm_spi_write_reg+0x4c>)
    4b68:	4798      	blx	r3
    4b6a:	0003      	movs	r3, r0
    4b6c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4b6e:	230f      	movs	r3, #15
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	781b      	ldrb	r3, [r3, #0]
    4b74:	b25b      	sxtb	r3, r3
    4b76:	2b01      	cmp	r3, #1
    4b78:	d104      	bne.n	4b84 <nm_spi_write_reg+0x34>
    4b7a:	230f      	movs	r3, #15
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	2200      	movs	r2, #0
    4b80:	701a      	strb	r2, [r3, #0]
    4b82:	e003      	b.n	4b8c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4b84:	230f      	movs	r3, #15
    4b86:	18fb      	adds	r3, r7, r3
    4b88:	22fa      	movs	r2, #250	; 0xfa
    4b8a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4b8c:	230f      	movs	r3, #15
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	b25b      	sxtb	r3, r3
}
    4b94:	0018      	movs	r0, r3
    4b96:	46bd      	mov	sp, r7
    4b98:	b005      	add	sp, #20
    4b9a:	bd90      	pop	{r4, r7, pc}
    4b9c:	00004181 	.word	0x00004181

00004ba0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4ba0:	b590      	push	{r4, r7, lr}
    4ba2:	b087      	sub	sp, #28
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	60f8      	str	r0, [r7, #12]
    4ba8:	60b9      	str	r1, [r7, #8]
    4baa:	1dbb      	adds	r3, r7, #6
    4bac:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4bae:	2317      	movs	r3, #23
    4bb0:	18fc      	adds	r4, r7, r3
    4bb2:	1dbb      	adds	r3, r7, #6
    4bb4:	881a      	ldrh	r2, [r3, #0]
    4bb6:	68b9      	ldr	r1, [r7, #8]
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	0018      	movs	r0, r3
    4bbc:	4b0d      	ldr	r3, [pc, #52]	; (4bf4 <nm_spi_read_block+0x54>)
    4bbe:	4798      	blx	r3
    4bc0:	0003      	movs	r3, r0
    4bc2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4bc4:	2317      	movs	r3, #23
    4bc6:	18fb      	adds	r3, r7, r3
    4bc8:	781b      	ldrb	r3, [r3, #0]
    4bca:	b25b      	sxtb	r3, r3
    4bcc:	2b01      	cmp	r3, #1
    4bce:	d104      	bne.n	4bda <nm_spi_read_block+0x3a>
    4bd0:	2317      	movs	r3, #23
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	2200      	movs	r2, #0
    4bd6:	701a      	strb	r2, [r3, #0]
    4bd8:	e003      	b.n	4be2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4bda:	2317      	movs	r3, #23
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	22fa      	movs	r2, #250	; 0xfa
    4be0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4be2:	2317      	movs	r3, #23
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	781b      	ldrb	r3, [r3, #0]
    4be8:	b25b      	sxtb	r3, r3
}
    4bea:	0018      	movs	r0, r3
    4bec:	46bd      	mov	sp, r7
    4bee:	b007      	add	sp, #28
    4bf0:	bd90      	pop	{r4, r7, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	00004711 	.word	0x00004711

00004bf8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4bf8:	b590      	push	{r4, r7, lr}
    4bfa:	b087      	sub	sp, #28
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	60b9      	str	r1, [r7, #8]
    4c02:	1dbb      	adds	r3, r7, #6
    4c04:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    4c06:	2317      	movs	r3, #23
    4c08:	18fc      	adds	r4, r7, r3
    4c0a:	1dbb      	adds	r3, r7, #6
    4c0c:	881a      	ldrh	r2, [r3, #0]
    4c0e:	68b9      	ldr	r1, [r7, #8]
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	0018      	movs	r0, r3
    4c14:	4b0d      	ldr	r3, [pc, #52]	; (4c4c <nm_spi_write_block+0x54>)
    4c16:	4798      	blx	r3
    4c18:	0003      	movs	r3, r0
    4c1a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4c1c:	2317      	movs	r3, #23
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	b25b      	sxtb	r3, r3
    4c24:	2b01      	cmp	r3, #1
    4c26:	d104      	bne.n	4c32 <nm_spi_write_block+0x3a>
    4c28:	2317      	movs	r3, #23
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	2200      	movs	r2, #0
    4c2e:	701a      	strb	r2, [r3, #0]
    4c30:	e003      	b.n	4c3a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4c32:	2317      	movs	r3, #23
    4c34:	18fb      	adds	r3, r7, r3
    4c36:	22fa      	movs	r2, #250	; 0xfa
    4c38:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4c3a:	2317      	movs	r3, #23
    4c3c:	18fb      	adds	r3, r7, r3
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	b25b      	sxtb	r3, r3
}
    4c42:	0018      	movs	r0, r3
    4c44:	46bd      	mov	sp, r7
    4c46:	b007      	add	sp, #28
    4c48:	bd90      	pop	{r4, r7, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	0000430d 	.word	0x0000430d

00004c50 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4c50:	b590      	push	{r4, r7, lr}
    4c52:	b08d      	sub	sp, #52	; 0x34
    4c54:	af04      	add	r7, sp, #16
    4c56:	0004      	movs	r4, r0
    4c58:	0008      	movs	r0, r1
    4c5a:	0011      	movs	r1, r2
    4c5c:	1dbb      	adds	r3, r7, #6
    4c5e:	1c22      	adds	r2, r4, #0
    4c60:	801a      	strh	r2, [r3, #0]
    4c62:	1d7b      	adds	r3, r7, #5
    4c64:	1c02      	adds	r2, r0, #0
    4c66:	701a      	strb	r2, [r3, #0]
    4c68:	1d3b      	adds	r3, r7, #4
    4c6a:	1c0a      	adds	r2, r1, #0
    4c6c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    4c6e:	231f      	movs	r3, #31
    4c70:	18fb      	adds	r3, r7, r3
    4c72:	22ff      	movs	r2, #255	; 0xff
    4c74:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4c76:	1dbb      	adds	r3, r7, #6
    4c78:	881b      	ldrh	r3, [r3, #0]
    4c7a:	2b02      	cmp	r3, #2
    4c7c:	d000      	beq.n	4c80 <socket+0x30>
    4c7e:	e0cd      	b.n	4e1c <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    4c80:	1d7b      	adds	r3, r7, #5
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	2b01      	cmp	r3, #1
    4c86:	d135      	bne.n	4cf4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    4c88:	231e      	movs	r3, #30
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	2200      	movs	r2, #0
    4c8e:	701a      	strb	r2, [r3, #0]
    4c90:	e02a      	b.n	4ce8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    4c92:	2317      	movs	r3, #23
    4c94:	18fb      	adds	r3, r7, r3
    4c96:	4a65      	ldr	r2, [pc, #404]	; (4e2c <socket+0x1dc>)
    4c98:	7812      	ldrb	r2, [r2, #0]
    4c9a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4c9c:	4b63      	ldr	r3, [pc, #396]	; (4e2c <socket+0x1dc>)
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	b2db      	uxtb	r3, r3
    4ca2:	011a      	lsls	r2, r3, #4
    4ca4:	4b62      	ldr	r3, [pc, #392]	; (4e30 <socket+0x1e0>)
    4ca6:	18d3      	adds	r3, r2, r3
    4ca8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4caa:	4b60      	ldr	r3, [pc, #384]	; (4e2c <socket+0x1dc>)
    4cac:	781b      	ldrb	r3, [r3, #0]
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	1c5a      	adds	r2, r3, #1
    4cb2:	4b60      	ldr	r3, [pc, #384]	; (4e34 <socket+0x1e4>)
    4cb4:	2107      	movs	r1, #7
    4cb6:	0010      	movs	r0, r2
    4cb8:	4798      	blx	r3
    4cba:	000b      	movs	r3, r1
    4cbc:	b2da      	uxtb	r2, r3
    4cbe:	4b5b      	ldr	r3, [pc, #364]	; (4e2c <socket+0x1dc>)
    4cc0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    4cc2:	69bb      	ldr	r3, [r7, #24]
    4cc4:	7a9b      	ldrb	r3, [r3, #10]
    4cc6:	b2db      	uxtb	r3, r3
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d106      	bne.n	4cda <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    4ccc:	231f      	movs	r3, #31
    4cce:	18fb      	adds	r3, r7, r3
    4cd0:	2217      	movs	r2, #23
    4cd2:	18ba      	adds	r2, r7, r2
    4cd4:	7812      	ldrb	r2, [r2, #0]
    4cd6:	701a      	strb	r2, [r3, #0]
					break;
    4cd8:	e04c      	b.n	4d74 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    4cda:	231e      	movs	r3, #30
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	781a      	ldrb	r2, [r3, #0]
    4ce0:	231e      	movs	r3, #30
    4ce2:	18fb      	adds	r3, r7, r3
    4ce4:	3201      	adds	r2, #1
    4ce6:	701a      	strb	r2, [r3, #0]
    4ce8:	231e      	movs	r3, #30
    4cea:	18fb      	adds	r3, r7, r3
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	2b06      	cmp	r3, #6
    4cf0:	d9cf      	bls.n	4c92 <socket+0x42>
    4cf2:	e03f      	b.n	4d74 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    4cf4:	1d7b      	adds	r3, r7, #5
    4cf6:	781b      	ldrb	r3, [r3, #0]
    4cf8:	2b02      	cmp	r3, #2
    4cfa:	d13b      	bne.n	4d74 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    4cfc:	4b4e      	ldr	r3, [pc, #312]	; (4e38 <socket+0x1e8>)
    4cfe:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    4d00:	231e      	movs	r3, #30
    4d02:	18fb      	adds	r3, r7, r3
    4d04:	2200      	movs	r2, #0
    4d06:	701a      	strb	r2, [r3, #0]
    4d08:	e02f      	b.n	4d6a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    4d0a:	2317      	movs	r3, #23
    4d0c:	18fb      	adds	r3, r7, r3
    4d0e:	4a4b      	ldr	r2, [pc, #300]	; (4e3c <socket+0x1ec>)
    4d10:	7812      	ldrb	r2, [r2, #0]
    4d12:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4d14:	4b49      	ldr	r3, [pc, #292]	; (4e3c <socket+0x1ec>)
    4d16:	781b      	ldrb	r3, [r3, #0]
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	011b      	lsls	r3, r3, #4
    4d1c:	693a      	ldr	r2, [r7, #16]
    4d1e:	18d3      	adds	r3, r2, r3
    4d20:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4d22:	4b46      	ldr	r3, [pc, #280]	; (4e3c <socket+0x1ec>)
    4d24:	781b      	ldrb	r3, [r3, #0]
    4d26:	b2db      	uxtb	r3, r3
    4d28:	3301      	adds	r3, #1
    4d2a:	4a45      	ldr	r2, [pc, #276]	; (4e40 <socket+0x1f0>)
    4d2c:	4013      	ands	r3, r2
    4d2e:	d504      	bpl.n	4d3a <socket+0xea>
    4d30:	3b01      	subs	r3, #1
    4d32:	2204      	movs	r2, #4
    4d34:	4252      	negs	r2, r2
    4d36:	4313      	orrs	r3, r2
    4d38:	3301      	adds	r3, #1
    4d3a:	b2da      	uxtb	r2, r3
    4d3c:	4b3f      	ldr	r3, [pc, #252]	; (4e3c <socket+0x1ec>)
    4d3e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    4d40:	69bb      	ldr	r3, [r7, #24]
    4d42:	7a9b      	ldrb	r3, [r3, #10]
    4d44:	b2db      	uxtb	r3, r3
    4d46:	2b00      	cmp	r3, #0
    4d48:	d108      	bne.n	4d5c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    4d4a:	2317      	movs	r3, #23
    4d4c:	18fb      	adds	r3, r7, r3
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	3307      	adds	r3, #7
    4d52:	b2da      	uxtb	r2, r3
    4d54:	231f      	movs	r3, #31
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	701a      	strb	r2, [r3, #0]
					break;
    4d5a:	e00b      	b.n	4d74 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    4d5c:	231e      	movs	r3, #30
    4d5e:	18fb      	adds	r3, r7, r3
    4d60:	781a      	ldrb	r2, [r3, #0]
    4d62:	231e      	movs	r3, #30
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	3201      	adds	r2, #1
    4d68:	701a      	strb	r2, [r3, #0]
    4d6a:	231e      	movs	r3, #30
    4d6c:	18fb      	adds	r3, r7, r3
    4d6e:	781b      	ldrb	r3, [r3, #0]
    4d70:	2b03      	cmp	r3, #3
    4d72:	d9ca      	bls.n	4d0a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    4d74:	231f      	movs	r3, #31
    4d76:	18fb      	adds	r3, r7, r3
    4d78:	781b      	ldrb	r3, [r3, #0]
    4d7a:	2b7f      	cmp	r3, #127	; 0x7f
    4d7c:	d84e      	bhi.n	4e1c <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    4d7e:	69bb      	ldr	r3, [r7, #24]
    4d80:	2210      	movs	r2, #16
    4d82:	2100      	movs	r1, #0
    4d84:	0018      	movs	r0, r3
    4d86:	4b2f      	ldr	r3, [pc, #188]	; (4e44 <socket+0x1f4>)
    4d88:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    4d8a:	69bb      	ldr	r3, [r7, #24]
    4d8c:	2201      	movs	r2, #1
    4d8e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    4d90:	4b2d      	ldr	r3, [pc, #180]	; (4e48 <socket+0x1f8>)
    4d92:	881b      	ldrh	r3, [r3, #0]
    4d94:	b29b      	uxth	r3, r3
    4d96:	3301      	adds	r3, #1
    4d98:	b29a      	uxth	r2, r3
    4d9a:	4b2b      	ldr	r3, [pc, #172]	; (4e48 <socket+0x1f8>)
    4d9c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    4d9e:	4b2a      	ldr	r3, [pc, #168]	; (4e48 <socket+0x1f8>)
    4da0:	881b      	ldrh	r3, [r3, #0]
    4da2:	b29b      	uxth	r3, r3
    4da4:	2b00      	cmp	r3, #0
    4da6:	d106      	bne.n	4db6 <socket+0x166>
				++gu16SessionID;
    4da8:	4b27      	ldr	r3, [pc, #156]	; (4e48 <socket+0x1f8>)
    4daa:	881b      	ldrh	r3, [r3, #0]
    4dac:	b29b      	uxth	r3, r3
    4dae:	3301      	adds	r3, #1
    4db0:	b29a      	uxth	r2, r3
    4db2:	4b25      	ldr	r3, [pc, #148]	; (4e48 <socket+0x1f8>)
    4db4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    4db6:	4b24      	ldr	r3, [pc, #144]	; (4e48 <socket+0x1f8>)
    4db8:	881b      	ldrh	r3, [r3, #0]
    4dba:	b29a      	uxth	r2, r3
    4dbc:	69bb      	ldr	r3, [r7, #24]
    4dbe:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    4dc0:	4b22      	ldr	r3, [pc, #136]	; (4e4c <socket+0x1fc>)
    4dc2:	0018      	movs	r0, r3
    4dc4:	4b22      	ldr	r3, [pc, #136]	; (4e50 <socket+0x200>)
    4dc6:	4798      	blx	r3
    4dc8:	231f      	movs	r3, #31
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	2100      	movs	r1, #0
    4dce:	5659      	ldrsb	r1, [r3, r1]
    4dd0:	4b1d      	ldr	r3, [pc, #116]	; (4e48 <socket+0x1f8>)
    4dd2:	881b      	ldrh	r3, [r3, #0]
    4dd4:	b29b      	uxth	r3, r3
    4dd6:	001a      	movs	r2, r3
    4dd8:	4b1e      	ldr	r3, [pc, #120]	; (4e54 <socket+0x204>)
    4dda:	0018      	movs	r0, r3
    4ddc:	4b1c      	ldr	r3, [pc, #112]	; (4e50 <socket+0x200>)
    4dde:	4798      	blx	r3
    4de0:	200d      	movs	r0, #13
    4de2:	4b1d      	ldr	r3, [pc, #116]	; (4e58 <socket+0x208>)
    4de4:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    4de6:	1d3b      	adds	r3, r7, #4
    4de8:	781b      	ldrb	r3, [r3, #0]
    4dea:	2201      	movs	r2, #1
    4dec:	4013      	ands	r3, r2
    4dee:	d015      	beq.n	4e1c <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    4df0:	230c      	movs	r3, #12
    4df2:	18fb      	adds	r3, r7, r3
    4df4:	221f      	movs	r2, #31
    4df6:	18ba      	adds	r2, r7, r2
    4df8:	7812      	ldrb	r2, [r2, #0]
    4dfa:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    4dfc:	69bb      	ldr	r3, [r7, #24]
    4dfe:	2221      	movs	r2, #33	; 0x21
    4e00:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    4e02:	230c      	movs	r3, #12
    4e04:	18fa      	adds	r2, r7, r3
    4e06:	2300      	movs	r3, #0
    4e08:	9302      	str	r3, [sp, #8]
    4e0a:	2300      	movs	r3, #0
    4e0c:	9301      	str	r3, [sp, #4]
    4e0e:	2300      	movs	r3, #0
    4e10:	9300      	str	r3, [sp, #0]
    4e12:	2304      	movs	r3, #4
    4e14:	2150      	movs	r1, #80	; 0x50
    4e16:	2002      	movs	r0, #2
    4e18:	4c10      	ldr	r4, [pc, #64]	; (4e5c <socket+0x20c>)
    4e1a:	47a0      	blx	r4
			}
		}
	}
	return sock;
    4e1c:	231f      	movs	r3, #31
    4e1e:	18fb      	adds	r3, r7, r3
    4e20:	781b      	ldrb	r3, [r3, #0]
    4e22:	b25b      	sxtb	r3, r3
}
    4e24:	0018      	movs	r0, r3
    4e26:	46bd      	mov	sp, r7
    4e28:	b009      	add	sp, #36	; 0x24
    4e2a:	bd90      	pop	{r4, r7, pc}
    4e2c:	200005d0 	.word	0x200005d0
    4e30:	20000acc 	.word	0x20000acc
    4e34:	0001817d 	.word	0x0001817d
    4e38:	20000b3c 	.word	0x20000b3c
    4e3c:	200005d1 	.word	0x200005d1
    4e40:	80000003 	.word	0x80000003
    4e44:	00000b61 	.word	0x00000b61
    4e48:	200005ce 	.word	0x200005ce
    4e4c:	0001c4d0 	.word	0x0001c4d0
    4e50:	0001a001 	.word	0x0001a001
    4e54:	0001c4f0 	.word	0x0001c4f0
    4e58:	0001a035 	.word	0x0001a035
    4e5c:	00000dc1 	.word	0x00000dc1

00004e60 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    4e60:	b5b0      	push	{r4, r5, r7, lr}
    4e62:	b08a      	sub	sp, #40	; 0x28
    4e64:	af04      	add	r7, sp, #16
    4e66:	6039      	str	r1, [r7, #0]
    4e68:	0011      	movs	r1, r2
    4e6a:	1dfb      	adds	r3, r7, #7
    4e6c:	1c02      	adds	r2, r0, #0
    4e6e:	701a      	strb	r2, [r3, #0]
    4e70:	1dbb      	adds	r3, r7, #6
    4e72:	1c0a      	adds	r2, r1, #0
    4e74:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4e76:	2317      	movs	r3, #23
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	22fa      	movs	r2, #250	; 0xfa
    4e7c:	701a      	strb	r2, [r3, #0]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	2b00      	cmp	r3, #0
    4e82:	d05c      	beq.n	4f3e <bind+0xde>
    4e84:	1dfb      	adds	r3, r7, #7
    4e86:	781b      	ldrb	r3, [r3, #0]
    4e88:	2b7f      	cmp	r3, #127	; 0x7f
    4e8a:	d858      	bhi.n	4f3e <bind+0xde>
    4e8c:	1dfb      	adds	r3, r7, #7
    4e8e:	781b      	ldrb	r3, [r3, #0]
    4e90:	b25b      	sxtb	r3, r3
    4e92:	4a2f      	ldr	r2, [pc, #188]	; (4f50 <bind+0xf0>)
    4e94:	011b      	lsls	r3, r3, #4
    4e96:	18d3      	adds	r3, r2, r3
    4e98:	330a      	adds	r3, #10
    4e9a:	781b      	ldrb	r3, [r3, #0]
    4e9c:	b2db      	uxtb	r3, r3
    4e9e:	2b01      	cmp	r3, #1
    4ea0:	d14d      	bne.n	4f3e <bind+0xde>
    4ea2:	1dbb      	adds	r3, r7, #6
    4ea4:	781b      	ldrb	r3, [r3, #0]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d049      	beq.n	4f3e <bind+0xde>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
    4eaa:	2316      	movs	r3, #22
    4eac:	18fb      	adds	r3, r7, r3
    4eae:	2241      	movs	r2, #65	; 0x41
    4eb0:	701a      	strb	r2, [r3, #0]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4eb2:	1dfb      	adds	r3, r7, #7
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	b25b      	sxtb	r3, r3
    4eb8:	4a25      	ldr	r2, [pc, #148]	; (4f50 <bind+0xf0>)
    4eba:	011b      	lsls	r3, r3, #4
    4ebc:	18d3      	adds	r3, r2, r3
    4ebe:	330b      	adds	r3, #11
    4ec0:	781b      	ldrb	r3, [r3, #0]
    4ec2:	b2db      	uxtb	r3, r3
    4ec4:	001a      	movs	r2, r3
    4ec6:	2301      	movs	r3, #1
    4ec8:	4013      	ands	r3, r2
    4eca:	d003      	beq.n	4ed4 <bind+0x74>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    4ecc:	2316      	movs	r3, #22
    4ece:	18fb      	adds	r3, r7, r3
    4ed0:	2254      	movs	r2, #84	; 0x54
    4ed2:	701a      	strb	r2, [r3, #0]
		}

		/* Build the bind request. */
		strBind.sock = sock;
    4ed4:	2308      	movs	r3, #8
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	1dfa      	adds	r2, r7, #7
    4eda:	7812      	ldrb	r2, [r2, #0]
    4edc:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4ede:	6839      	ldr	r1, [r7, #0]
    4ee0:	2308      	movs	r3, #8
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	2208      	movs	r2, #8
    4ee6:	0018      	movs	r0, r3
    4ee8:	4b1a      	ldr	r3, [pc, #104]	; (4f54 <bind+0xf4>)
    4eea:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    4eec:	1dfb      	adds	r3, r7, #7
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	b25b      	sxtb	r3, r3
    4ef2:	4a17      	ldr	r2, [pc, #92]	; (4f50 <bind+0xf0>)
    4ef4:	011b      	lsls	r3, r3, #4
    4ef6:	18d3      	adds	r3, r2, r3
    4ef8:	3306      	adds	r3, #6
    4efa:	881b      	ldrh	r3, [r3, #0]
    4efc:	b29a      	uxth	r2, r3
    4efe:	2308      	movs	r3, #8
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	815a      	strh	r2, [r3, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    4f04:	2317      	movs	r3, #23
    4f06:	18fc      	adds	r4, r7, r3
    4f08:	2308      	movs	r3, #8
    4f0a:	18fa      	adds	r2, r7, r3
    4f0c:	2316      	movs	r3, #22
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	7819      	ldrb	r1, [r3, #0]
    4f12:	2300      	movs	r3, #0
    4f14:	9302      	str	r3, [sp, #8]
    4f16:	2300      	movs	r3, #0
    4f18:	9301      	str	r3, [sp, #4]
    4f1a:	2300      	movs	r3, #0
    4f1c:	9300      	str	r3, [sp, #0]
    4f1e:	230c      	movs	r3, #12
    4f20:	2002      	movs	r0, #2
    4f22:	4d0d      	ldr	r5, [pc, #52]	; (4f58 <bind+0xf8>)
    4f24:	47a8      	blx	r5
    4f26:	0003      	movs	r3, r0
    4f28:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4f2a:	2317      	movs	r3, #23
    4f2c:	18fb      	adds	r3, r7, r3
    4f2e:	781b      	ldrb	r3, [r3, #0]
    4f30:	b25b      	sxtb	r3, r3
    4f32:	2b00      	cmp	r3, #0
    4f34:	d003      	beq.n	4f3e <bind+0xde>
		{
			s8Ret = SOCK_ERR_INVALID;
    4f36:	2317      	movs	r3, #23
    4f38:	18fb      	adds	r3, r7, r3
    4f3a:	22f7      	movs	r2, #247	; 0xf7
    4f3c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    4f3e:	2317      	movs	r3, #23
    4f40:	18fb      	adds	r3, r7, r3
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	b25b      	sxtb	r3, r3
}
    4f46:	0018      	movs	r0, r3
    4f48:	46bd      	mov	sp, r7
    4f4a:	b006      	add	sp, #24
    4f4c:	bdb0      	pop	{r4, r5, r7, pc}
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	20000acc 	.word	0x20000acc
    4f54:	00000b25 	.word	0x00000b25
    4f58:	00000dc1 	.word	0x00000dc1

00004f5c <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
    4f5c:	b580      	push	{r7, lr}
    4f5e:	b086      	sub	sp, #24
    4f60:	af00      	add	r7, sp, #0
    4f62:	60b9      	str	r1, [r7, #8]
    4f64:	607a      	str	r2, [r7, #4]
    4f66:	230f      	movs	r3, #15
    4f68:	18fb      	adds	r3, r7, r3
    4f6a:	1c02      	adds	r2, r0, #0
    4f6c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4f6e:	2317      	movs	r3, #23
    4f70:	18fb      	adds	r3, r7, r3
    4f72:	22fa      	movs	r2, #250	; 0xfa
    4f74:	701a      	strb	r2, [r3, #0]
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    4f76:	230f      	movs	r3, #15
    4f78:	18fb      	adds	r3, r7, r3
    4f7a:	781b      	ldrb	r3, [r3, #0]
    4f7c:	2b7f      	cmp	r3, #127	; 0x7f
    4f7e:	d80f      	bhi.n	4fa0 <accept+0x44>
    4f80:	230f      	movs	r3, #15
    4f82:	18fb      	adds	r3, r7, r3
    4f84:	781b      	ldrb	r3, [r3, #0]
    4f86:	b25b      	sxtb	r3, r3
    4f88:	4a09      	ldr	r2, [pc, #36]	; (4fb0 <accept+0x54>)
    4f8a:	011b      	lsls	r3, r3, #4
    4f8c:	18d3      	adds	r3, r2, r3
    4f8e:	330a      	adds	r3, #10
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	b2db      	uxtb	r3, r3
    4f94:	2b01      	cmp	r3, #1
    4f96:	d103      	bne.n	4fa0 <accept+0x44>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    4f98:	2317      	movs	r3, #23
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	2200      	movs	r2, #0
    4f9e:	701a      	strb	r2, [r3, #0]
	}
	return s8Ret;
    4fa0:	2317      	movs	r3, #23
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	781b      	ldrb	r3, [r3, #0]
    4fa6:	b25b      	sxtb	r3, r3
}
    4fa8:	0018      	movs	r0, r3
    4faa:	46bd      	mov	sp, r7
    4fac:	b006      	add	sp, #24
    4fae:	bd80      	pop	{r7, pc}
    4fb0:	20000acc 	.word	0x20000acc

00004fb4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4fb4:	b5b0      	push	{r4, r5, r7, lr}
    4fb6:	b088      	sub	sp, #32
    4fb8:	af04      	add	r7, sp, #16
    4fba:	0002      	movs	r2, r0
    4fbc:	1dfb      	adds	r3, r7, #7
    4fbe:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4fc0:	230f      	movs	r3, #15
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	22fa      	movs	r2, #250	; 0xfa
    4fc6:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    4fc8:	4b42      	ldr	r3, [pc, #264]	; (50d4 <close+0x120>)
    4fca:	0018      	movs	r0, r3
    4fcc:	4b42      	ldr	r3, [pc, #264]	; (50d8 <close+0x124>)
    4fce:	4798      	blx	r3
    4fd0:	1dfb      	adds	r3, r7, #7
    4fd2:	2200      	movs	r2, #0
    4fd4:	569a      	ldrsb	r2, [r3, r2]
    4fd6:	4b41      	ldr	r3, [pc, #260]	; (50dc <close+0x128>)
    4fd8:	0011      	movs	r1, r2
    4fda:	0018      	movs	r0, r3
    4fdc:	4b3e      	ldr	r3, [pc, #248]	; (50d8 <close+0x124>)
    4fde:	4798      	blx	r3
    4fe0:	200d      	movs	r0, #13
    4fe2:	4b3f      	ldr	r3, [pc, #252]	; (50e0 <close+0x12c>)
    4fe4:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    4fe6:	1dfb      	adds	r3, r7, #7
    4fe8:	781b      	ldrb	r3, [r3, #0]
    4fea:	2b7f      	cmp	r3, #127	; 0x7f
    4fec:	d86a      	bhi.n	50c4 <close+0x110>
    4fee:	1dfb      	adds	r3, r7, #7
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	b25b      	sxtb	r3, r3
    4ff4:	4a3b      	ldr	r2, [pc, #236]	; (50e4 <close+0x130>)
    4ff6:	011b      	lsls	r3, r3, #4
    4ff8:	18d3      	adds	r3, r2, r3
    4ffa:	330a      	adds	r3, #10
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	b2db      	uxtb	r3, r3
    5000:	2b01      	cmp	r3, #1
    5002:	d15f      	bne.n	50c4 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5004:	230e      	movs	r3, #14
    5006:	18fb      	adds	r3, r7, r3
    5008:	2249      	movs	r2, #73	; 0x49
    500a:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    500c:	2308      	movs	r3, #8
    500e:	18fb      	adds	r3, r7, r3
    5010:	1dfa      	adds	r2, r7, #7
    5012:	7812      	ldrb	r2, [r2, #0]
    5014:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5016:	1dfb      	adds	r3, r7, #7
    5018:	781b      	ldrb	r3, [r3, #0]
    501a:	b25b      	sxtb	r3, r3
    501c:	4a31      	ldr	r2, [pc, #196]	; (50e4 <close+0x130>)
    501e:	011b      	lsls	r3, r3, #4
    5020:	18d3      	adds	r3, r2, r3
    5022:	3306      	adds	r3, #6
    5024:	881b      	ldrh	r3, [r3, #0]
    5026:	b29a      	uxth	r2, r3
    5028:	2308      	movs	r3, #8
    502a:	18fb      	adds	r3, r7, r3
    502c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    502e:	1dfb      	adds	r3, r7, #7
    5030:	781b      	ldrb	r3, [r3, #0]
    5032:	b25b      	sxtb	r3, r3
    5034:	4a2b      	ldr	r2, [pc, #172]	; (50e4 <close+0x130>)
    5036:	011b      	lsls	r3, r3, #4
    5038:	18d3      	adds	r3, r2, r3
    503a:	330a      	adds	r3, #10
    503c:	2200      	movs	r2, #0
    503e:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5040:	1dfb      	adds	r3, r7, #7
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	b25b      	sxtb	r3, r3
    5046:	4a27      	ldr	r2, [pc, #156]	; (50e4 <close+0x130>)
    5048:	011b      	lsls	r3, r3, #4
    504a:	18d3      	adds	r3, r2, r3
    504c:	3306      	adds	r3, #6
    504e:	2200      	movs	r2, #0
    5050:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5052:	1dfb      	adds	r3, r7, #7
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	b25b      	sxtb	r3, r3
    5058:	4a22      	ldr	r2, [pc, #136]	; (50e4 <close+0x130>)
    505a:	011b      	lsls	r3, r3, #4
    505c:	18d3      	adds	r3, r2, r3
    505e:	330b      	adds	r3, #11
    5060:	781b      	ldrb	r3, [r3, #0]
    5062:	b2db      	uxtb	r3, r3
    5064:	001a      	movs	r2, r3
    5066:	2301      	movs	r3, #1
    5068:	4013      	ands	r3, r2
    506a:	d003      	beq.n	5074 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    506c:	230e      	movs	r3, #14
    506e:	18fb      	adds	r3, r7, r3
    5070:	224e      	movs	r2, #78	; 0x4e
    5072:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5074:	230f      	movs	r3, #15
    5076:	18fc      	adds	r4, r7, r3
    5078:	2308      	movs	r3, #8
    507a:	18fa      	adds	r2, r7, r3
    507c:	230e      	movs	r3, #14
    507e:	18fb      	adds	r3, r7, r3
    5080:	7819      	ldrb	r1, [r3, #0]
    5082:	2300      	movs	r3, #0
    5084:	9302      	str	r3, [sp, #8]
    5086:	2300      	movs	r3, #0
    5088:	9301      	str	r3, [sp, #4]
    508a:	2300      	movs	r3, #0
    508c:	9300      	str	r3, [sp, #0]
    508e:	2304      	movs	r3, #4
    5090:	2002      	movs	r0, #2
    5092:	4d15      	ldr	r5, [pc, #84]	; (50e8 <close+0x134>)
    5094:	47a8      	blx	r5
    5096:	0003      	movs	r3, r0
    5098:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    509a:	230f      	movs	r3, #15
    509c:	18fb      	adds	r3, r7, r3
    509e:	781b      	ldrb	r3, [r3, #0]
    50a0:	b25b      	sxtb	r3, r3
    50a2:	2b00      	cmp	r3, #0
    50a4:	d003      	beq.n	50ae <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    50a6:	230f      	movs	r3, #15
    50a8:	18fb      	adds	r3, r7, r3
    50aa:	22f7      	movs	r2, #247	; 0xf7
    50ac:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    50ae:	1dfb      	adds	r3, r7, #7
    50b0:	781b      	ldrb	r3, [r3, #0]
    50b2:	b25b      	sxtb	r3, r3
    50b4:	011a      	lsls	r2, r3, #4
    50b6:	4b0b      	ldr	r3, [pc, #44]	; (50e4 <close+0x130>)
    50b8:	18d3      	adds	r3, r2, r3
    50ba:	2210      	movs	r2, #16
    50bc:	2100      	movs	r1, #0
    50be:	0018      	movs	r0, r3
    50c0:	4b0a      	ldr	r3, [pc, #40]	; (50ec <close+0x138>)
    50c2:	4798      	blx	r3
	}
	return s8Ret;
    50c4:	230f      	movs	r3, #15
    50c6:	18fb      	adds	r3, r7, r3
    50c8:	781b      	ldrb	r3, [r3, #0]
    50ca:	b25b      	sxtb	r3, r3
}
    50cc:	0018      	movs	r0, r3
    50ce:	46bd      	mov	sp, r7
    50d0:	b004      	add	sp, #16
    50d2:	bdb0      	pop	{r4, r5, r7, pc}
    50d4:	0001c4d0 	.word	0x0001c4d0
    50d8:	0001a001 	.word	0x0001a001
    50dc:	0001c50c 	.word	0x0001c50c
    50e0:	0001a035 	.word	0x0001a035
    50e4:	20000acc 	.word	0x20000acc
    50e8:	00000dc1 	.word	0x00000dc1
    50ec:	00000b61 	.word	0x00000b61

000050f0 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    50f0:	b580      	push	{r7, lr}
    50f2:	b082      	sub	sp, #8
    50f4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    50f6:	003b      	movs	r3, r7
    50f8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	22b9      	movs	r2, #185	; 0xb9
    50fe:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5100:	4b13      	ldr	r3, [pc, #76]	; (5150 <spi_flash_enter_low_power_mode+0x60>)
    5102:	2100      	movs	r1, #0
    5104:	0018      	movs	r0, r3
    5106:	4b13      	ldr	r3, [pc, #76]	; (5154 <spi_flash_enter_low_power_mode+0x64>)
    5108:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    510a:	687b      	ldr	r3, [r7, #4]
    510c:	781b      	ldrb	r3, [r3, #0]
    510e:	001a      	movs	r2, r3
    5110:	4b11      	ldr	r3, [pc, #68]	; (5158 <spi_flash_enter_low_power_mode+0x68>)
    5112:	0011      	movs	r1, r2
    5114:	0018      	movs	r0, r3
    5116:	4b0f      	ldr	r3, [pc, #60]	; (5154 <spi_flash_enter_low_power_mode+0x64>)
    5118:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    511a:	4b10      	ldr	r3, [pc, #64]	; (515c <spi_flash_enter_low_power_mode+0x6c>)
    511c:	2101      	movs	r1, #1
    511e:	0018      	movs	r0, r3
    5120:	4b0c      	ldr	r3, [pc, #48]	; (5154 <spi_flash_enter_low_power_mode+0x64>)
    5122:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5124:	4b0e      	ldr	r3, [pc, #56]	; (5160 <spi_flash_enter_low_power_mode+0x70>)
    5126:	2100      	movs	r1, #0
    5128:	0018      	movs	r0, r3
    512a:	4b0a      	ldr	r3, [pc, #40]	; (5154 <spi_flash_enter_low_power_mode+0x64>)
    512c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    512e:	4b0d      	ldr	r3, [pc, #52]	; (5164 <spi_flash_enter_low_power_mode+0x74>)
    5130:	2181      	movs	r1, #129	; 0x81
    5132:	0018      	movs	r0, r3
    5134:	4b07      	ldr	r3, [pc, #28]	; (5154 <spi_flash_enter_low_power_mode+0x64>)
    5136:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5138:	46c0      	nop			; (mov r8, r8)
    513a:	4b0b      	ldr	r3, [pc, #44]	; (5168 <spi_flash_enter_low_power_mode+0x78>)
    513c:	0018      	movs	r0, r3
    513e:	4b0b      	ldr	r3, [pc, #44]	; (516c <spi_flash_enter_low_power_mode+0x7c>)
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
    5144:	2b01      	cmp	r3, #1
    5146:	d1f8      	bne.n	513a <spi_flash_enter_low_power_mode+0x4a>
}
    5148:	46c0      	nop			; (mov r8, r8)
    514a:	46bd      	mov	sp, r7
    514c:	b002      	add	sp, #8
    514e:	bd80      	pop	{r7, pc}
    5150:	00010208 	.word	0x00010208
    5154:	000030b9 	.word	0x000030b9
    5158:	0001020c 	.word	0x0001020c
    515c:	00010214 	.word	0x00010214
    5160:	0001021c 	.word	0x0001021c
    5164:	00010204 	.word	0x00010204
    5168:	00010218 	.word	0x00010218
    516c:	00003075 	.word	0x00003075

00005170 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5176:	003b      	movs	r3, r7
    5178:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	22ab      	movs	r2, #171	; 0xab
    517e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5180:	4b13      	ldr	r3, [pc, #76]	; (51d0 <spi_flash_leave_low_power_mode+0x60>)
    5182:	2100      	movs	r1, #0
    5184:	0018      	movs	r0, r3
    5186:	4b13      	ldr	r3, [pc, #76]	; (51d4 <spi_flash_leave_low_power_mode+0x64>)
    5188:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	781b      	ldrb	r3, [r3, #0]
    518e:	001a      	movs	r2, r3
    5190:	4b11      	ldr	r3, [pc, #68]	; (51d8 <spi_flash_leave_low_power_mode+0x68>)
    5192:	0011      	movs	r1, r2
    5194:	0018      	movs	r0, r3
    5196:	4b0f      	ldr	r3, [pc, #60]	; (51d4 <spi_flash_leave_low_power_mode+0x64>)
    5198:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    519a:	4b10      	ldr	r3, [pc, #64]	; (51dc <spi_flash_leave_low_power_mode+0x6c>)
    519c:	2101      	movs	r1, #1
    519e:	0018      	movs	r0, r3
    51a0:	4b0c      	ldr	r3, [pc, #48]	; (51d4 <spi_flash_leave_low_power_mode+0x64>)
    51a2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    51a4:	4b0e      	ldr	r3, [pc, #56]	; (51e0 <spi_flash_leave_low_power_mode+0x70>)
    51a6:	2100      	movs	r1, #0
    51a8:	0018      	movs	r0, r3
    51aa:	4b0a      	ldr	r3, [pc, #40]	; (51d4 <spi_flash_leave_low_power_mode+0x64>)
    51ac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    51ae:	4b0d      	ldr	r3, [pc, #52]	; (51e4 <spi_flash_leave_low_power_mode+0x74>)
    51b0:	2181      	movs	r1, #129	; 0x81
    51b2:	0018      	movs	r0, r3
    51b4:	4b07      	ldr	r3, [pc, #28]	; (51d4 <spi_flash_leave_low_power_mode+0x64>)
    51b6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    51b8:	46c0      	nop			; (mov r8, r8)
    51ba:	4b0b      	ldr	r3, [pc, #44]	; (51e8 <spi_flash_leave_low_power_mode+0x78>)
    51bc:	0018      	movs	r0, r3
    51be:	4b0b      	ldr	r3, [pc, #44]	; (51ec <spi_flash_leave_low_power_mode+0x7c>)
    51c0:	4798      	blx	r3
    51c2:	0003      	movs	r3, r0
    51c4:	2b01      	cmp	r3, #1
    51c6:	d1f8      	bne.n	51ba <spi_flash_leave_low_power_mode+0x4a>
}
    51c8:	46c0      	nop			; (mov r8, r8)
    51ca:	46bd      	mov	sp, r7
    51cc:	b002      	add	sp, #8
    51ce:	bd80      	pop	{r7, pc}
    51d0:	00010208 	.word	0x00010208
    51d4:	000030b9 	.word	0x000030b9
    51d8:	0001020c 	.word	0x0001020c
    51dc:	00010214 	.word	0x00010214
    51e0:	0001021c 	.word	0x0001021c
    51e4:	00010204 	.word	0x00010204
    51e8:	00010218 	.word	0x00010218
    51ec:	00003075 	.word	0x00003075

000051f0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    51f0:	b590      	push	{r4, r7, lr}
    51f2:	b085      	sub	sp, #20
    51f4:	af00      	add	r7, sp, #0
    51f6:	0002      	movs	r2, r0
    51f8:	1dfb      	adds	r3, r7, #7
    51fa:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    51fc:	230f      	movs	r3, #15
    51fe:	18fb      	adds	r3, r7, r3
    5200:	2200      	movs	r2, #0
    5202:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5204:	4b24      	ldr	r3, [pc, #144]	; (5298 <spi_flash_enable+0xa8>)
    5206:	4798      	blx	r3
    5208:	0003      	movs	r3, r0
    520a:	051b      	lsls	r3, r3, #20
    520c:	0d1b      	lsrs	r3, r3, #20
    520e:	4a23      	ldr	r2, [pc, #140]	; (529c <spi_flash_enable+0xac>)
    5210:	4293      	cmp	r3, r2
    5212:	d938      	bls.n	5286 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5214:	230f      	movs	r3, #15
    5216:	18fc      	adds	r4, r7, r3
    5218:	2308      	movs	r3, #8
    521a:	18fb      	adds	r3, r7, r3
    521c:	4a20      	ldr	r2, [pc, #128]	; (52a0 <spi_flash_enable+0xb0>)
    521e:	0019      	movs	r1, r3
    5220:	0010      	movs	r0, r2
    5222:	4b20      	ldr	r3, [pc, #128]	; (52a4 <spi_flash_enable+0xb4>)
    5224:	4798      	blx	r3
    5226:	0003      	movs	r3, r0
    5228:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    522a:	230f      	movs	r3, #15
    522c:	18fb      	adds	r3, r7, r3
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	b25b      	sxtb	r3, r3
    5232:	2b00      	cmp	r3, #0
    5234:	d126      	bne.n	5284 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5236:	68bb      	ldr	r3, [r7, #8]
    5238:	4a1b      	ldr	r2, [pc, #108]	; (52a8 <spi_flash_enable+0xb8>)
    523a:	4013      	ands	r3, r2
    523c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    523e:	68bb      	ldr	r3, [r7, #8]
    5240:	4a1a      	ldr	r2, [pc, #104]	; (52ac <spi_flash_enable+0xbc>)
    5242:	4313      	orrs	r3, r2
    5244:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5246:	68bb      	ldr	r3, [r7, #8]
    5248:	4a15      	ldr	r2, [pc, #84]	; (52a0 <spi_flash_enable+0xb0>)
    524a:	0019      	movs	r1, r3
    524c:	0010      	movs	r0, r2
    524e:	4b18      	ldr	r3, [pc, #96]	; (52b0 <spi_flash_enable+0xc0>)
    5250:	4798      	blx	r3
		if(enable) {
    5252:	1dfb      	adds	r3, r7, #7
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d002      	beq.n	5260 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    525a:	4b16      	ldr	r3, [pc, #88]	; (52b4 <spi_flash_enable+0xc4>)
    525c:	4798      	blx	r3
    525e:	e001      	b.n	5264 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5260:	4b15      	ldr	r3, [pc, #84]	; (52b8 <spi_flash_enable+0xc8>)
    5262:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5264:	68bb      	ldr	r3, [r7, #8]
    5266:	4a10      	ldr	r2, [pc, #64]	; (52a8 <spi_flash_enable+0xb8>)
    5268:	4013      	ands	r3, r2
    526a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    526c:	68bb      	ldr	r3, [r7, #8]
    526e:	2280      	movs	r2, #128	; 0x80
    5270:	0252      	lsls	r2, r2, #9
    5272:	4313      	orrs	r3, r2
    5274:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5276:	68bb      	ldr	r3, [r7, #8]
    5278:	4a09      	ldr	r2, [pc, #36]	; (52a0 <spi_flash_enable+0xb0>)
    527a:	0019      	movs	r1, r3
    527c:	0010      	movs	r0, r2
    527e:	4b0c      	ldr	r3, [pc, #48]	; (52b0 <spi_flash_enable+0xc0>)
    5280:	4798      	blx	r3
    5282:	e000      	b.n	5286 <spi_flash_enable+0x96>
			goto ERR1;
    5284:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5286:	230f      	movs	r3, #15
    5288:	18fb      	adds	r3, r7, r3
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	b25b      	sxtb	r3, r3
}
    528e:	0018      	movs	r0, r3
    5290:	46bd      	mov	sp, r7
    5292:	b005      	add	sp, #20
    5294:	bd90      	pop	{r4, r7, pc}
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	00002999 	.word	0x00002999
    529c:	0000039f 	.word	0x0000039f
    52a0:	00001410 	.word	0x00001410
    52a4:	00003095 	.word	0x00003095
    52a8:	f8888fff 	.word	0xf8888fff
    52ac:	01111000 	.word	0x01111000
    52b0:	000030b9 	.word	0x000030b9
    52b4:	00005171 	.word	0x00005171
    52b8:	000050f1 	.word	0x000050f1

000052bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    52bc:	b580      	push	{r7, lr}
    52be:	b082      	sub	sp, #8
    52c0:	af00      	add	r7, sp, #0
    52c2:	0002      	movs	r2, r0
    52c4:	6039      	str	r1, [r7, #0]
    52c6:	1dfb      	adds	r3, r7, #7
    52c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    52ca:	1dfb      	adds	r3, r7, #7
    52cc:	781b      	ldrb	r3, [r3, #0]
    52ce:	2b04      	cmp	r3, #4
    52d0:	d827      	bhi.n	5322 <system_apb_clock_set_mask+0x66>
    52d2:	009a      	lsls	r2, r3, #2
    52d4:	4b16      	ldr	r3, [pc, #88]	; (5330 <system_apb_clock_set_mask+0x74>)
    52d6:	18d3      	adds	r3, r2, r3
    52d8:	681b      	ldr	r3, [r3, #0]
    52da:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    52dc:	4b15      	ldr	r3, [pc, #84]	; (5334 <system_apb_clock_set_mask+0x78>)
    52de:	4a15      	ldr	r2, [pc, #84]	; (5334 <system_apb_clock_set_mask+0x78>)
    52e0:	6951      	ldr	r1, [r2, #20]
    52e2:	683a      	ldr	r2, [r7, #0]
    52e4:	430a      	orrs	r2, r1
    52e6:	615a      	str	r2, [r3, #20]
			break;
    52e8:	e01d      	b.n	5326 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    52ea:	4b12      	ldr	r3, [pc, #72]	; (5334 <system_apb_clock_set_mask+0x78>)
    52ec:	4a11      	ldr	r2, [pc, #68]	; (5334 <system_apb_clock_set_mask+0x78>)
    52ee:	6991      	ldr	r1, [r2, #24]
    52f0:	683a      	ldr	r2, [r7, #0]
    52f2:	430a      	orrs	r2, r1
    52f4:	619a      	str	r2, [r3, #24]
			break;
    52f6:	e016      	b.n	5326 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    52f8:	4b0e      	ldr	r3, [pc, #56]	; (5334 <system_apb_clock_set_mask+0x78>)
    52fa:	4a0e      	ldr	r2, [pc, #56]	; (5334 <system_apb_clock_set_mask+0x78>)
    52fc:	69d1      	ldr	r1, [r2, #28]
    52fe:	683a      	ldr	r2, [r7, #0]
    5300:	430a      	orrs	r2, r1
    5302:	61da      	str	r2, [r3, #28]
			break;
    5304:	e00f      	b.n	5326 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5306:	4b0b      	ldr	r3, [pc, #44]	; (5334 <system_apb_clock_set_mask+0x78>)
    5308:	4a0a      	ldr	r2, [pc, #40]	; (5334 <system_apb_clock_set_mask+0x78>)
    530a:	6a11      	ldr	r1, [r2, #32]
    530c:	683a      	ldr	r2, [r7, #0]
    530e:	430a      	orrs	r2, r1
    5310:	621a      	str	r2, [r3, #32]
			break;
    5312:	e008      	b.n	5326 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    5314:	4b07      	ldr	r3, [pc, #28]	; (5334 <system_apb_clock_set_mask+0x78>)
    5316:	4a07      	ldr	r2, [pc, #28]	; (5334 <system_apb_clock_set_mask+0x78>)
    5318:	6a51      	ldr	r1, [r2, #36]	; 0x24
    531a:	683a      	ldr	r2, [r7, #0]
    531c:	430a      	orrs	r2, r1
    531e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    5320:	e001      	b.n	5326 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5322:	2317      	movs	r3, #23
    5324:	e000      	b.n	5328 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
    5326:	2300      	movs	r3, #0
}
    5328:	0018      	movs	r0, r3
    532a:	46bd      	mov	sp, r7
    532c:	b002      	add	sp, #8
    532e:	bd80      	pop	{r7, pc}
    5330:	0001c580 	.word	0x0001c580
    5334:	40000400 	.word	0x40000400

00005338 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5338:	b580      	push	{r7, lr}
    533a:	b082      	sub	sp, #8
    533c:	af00      	add	r7, sp, #0
    533e:	0002      	movs	r2, r0
    5340:	1dfb      	adds	r3, r7, #7
    5342:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5344:	4b06      	ldr	r3, [pc, #24]	; (5360 <system_interrupt_enable+0x28>)
    5346:	1dfa      	adds	r2, r7, #7
    5348:	7812      	ldrb	r2, [r2, #0]
    534a:	0011      	movs	r1, r2
    534c:	221f      	movs	r2, #31
    534e:	400a      	ands	r2, r1
    5350:	2101      	movs	r1, #1
    5352:	4091      	lsls	r1, r2
    5354:	000a      	movs	r2, r1
    5356:	601a      	str	r2, [r3, #0]
}
    5358:	46c0      	nop			; (mov r8, r8)
    535a:	46bd      	mov	sp, r7
    535c:	b002      	add	sp, #8
    535e:	bd80      	pop	{r7, pc}
    5360:	e000e100 	.word	0xe000e100

00005364 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    5364:	b580      	push	{r7, lr}
    5366:	b082      	sub	sp, #8
    5368:	af00      	add	r7, sp, #0
    536a:	0002      	movs	r2, r0
    536c:	1dfb      	adds	r3, r7, #7
    536e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5370:	4a07      	ldr	r2, [pc, #28]	; (5390 <system_interrupt_disable+0x2c>)
    5372:	1dfb      	adds	r3, r7, #7
    5374:	781b      	ldrb	r3, [r3, #0]
    5376:	0019      	movs	r1, r3
    5378:	231f      	movs	r3, #31
    537a:	400b      	ands	r3, r1
    537c:	2101      	movs	r1, #1
    537e:	4099      	lsls	r1, r3
    5380:	000b      	movs	r3, r1
    5382:	0019      	movs	r1, r3
    5384:	2380      	movs	r3, #128	; 0x80
    5386:	50d1      	str	r1, [r2, r3]
}
    5388:	46c0      	nop			; (mov r8, r8)
    538a:	46bd      	mov	sp, r7
    538c:	b002      	add	sp, #8
    538e:	bd80      	pop	{r7, pc}
    5390:	e000e100 	.word	0xe000e100

00005394 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    5394:	b580      	push	{r7, lr}
    5396:	b084      	sub	sp, #16
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	681b      	ldr	r3, [r3, #0]
    53a0:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    53a2:	68fb      	ldr	r3, [r7, #12]
    53a4:	691b      	ldr	r3, [r3, #16]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d001      	beq.n	53ae <rtc_count_is_syncing+0x1a>
		return true;
    53aa:	2301      	movs	r3, #1
    53ac:	e000      	b.n	53b0 <rtc_count_is_syncing+0x1c>
	}

	return false;
    53ae:	2300      	movs	r3, #0
}
    53b0:	0018      	movs	r0, r3
    53b2:	46bd      	mov	sp, r7
    53b4:	b004      	add	sp, #16
    53b6:	bd80      	pop	{r7, pc}

000053b8 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	b084      	sub	sp, #16
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    53c6:	2002      	movs	r0, #2
    53c8:	4b0d      	ldr	r3, [pc, #52]	; (5400 <rtc_count_enable+0x48>)
    53ca:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    53cc:	46c0      	nop			; (mov r8, r8)
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	0018      	movs	r0, r3
    53d2:	4b0c      	ldr	r3, [pc, #48]	; (5404 <rtc_count_enable+0x4c>)
    53d4:	4798      	blx	r3
    53d6:	1e03      	subs	r3, r0, #0
    53d8:	d1f9      	bne.n	53ce <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    53da:	68fb      	ldr	r3, [r7, #12]
    53dc:	881b      	ldrh	r3, [r3, #0]
    53de:	b29b      	uxth	r3, r3
    53e0:	2202      	movs	r2, #2
    53e2:	4313      	orrs	r3, r2
    53e4:	b29a      	uxth	r2, r3
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    53ea:	46c0      	nop			; (mov r8, r8)
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	0018      	movs	r0, r3
    53f0:	4b04      	ldr	r3, [pc, #16]	; (5404 <rtc_count_enable+0x4c>)
    53f2:	4798      	blx	r3
    53f4:	1e03      	subs	r3, r0, #0
    53f6:	d1f9      	bne.n	53ec <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
    53f8:	46c0      	nop			; (mov r8, r8)
    53fa:	46bd      	mov	sp, r7
    53fc:	b004      	add	sp, #16
    53fe:	bd80      	pop	{r7, pc}
    5400:	00005339 	.word	0x00005339
    5404:	00005395 	.word	0x00005395

00005408 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    5408:	b580      	push	{r7, lr}
    540a:	b084      	sub	sp, #16
    540c:	af00      	add	r7, sp, #0
    540e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	681b      	ldr	r3, [r3, #0]
    5414:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    5416:	2002      	movs	r0, #2
    5418:	4b10      	ldr	r3, [pc, #64]	; (545c <rtc_count_disable+0x54>)
    541a:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    541c:	46c0      	nop			; (mov r8, r8)
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	0018      	movs	r0, r3
    5422:	4b0f      	ldr	r3, [pc, #60]	; (5460 <rtc_count_disable+0x58>)
    5424:	4798      	blx	r3
    5426:	1e03      	subs	r3, r0, #0
    5428:	d1f9      	bne.n	541e <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    542a:	68fb      	ldr	r3, [r7, #12]
    542c:	4a0d      	ldr	r2, [pc, #52]	; (5464 <rtc_count_disable+0x5c>)
    542e:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    5430:	68fb      	ldr	r3, [r7, #12]
    5432:	4a0c      	ldr	r2, [pc, #48]	; (5464 <rtc_count_disable+0x5c>)
    5434:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5436:	68fb      	ldr	r3, [r7, #12]
    5438:	881b      	ldrh	r3, [r3, #0]
    543a:	b29b      	uxth	r3, r3
    543c:	2202      	movs	r2, #2
    543e:	4393      	bics	r3, r2
    5440:	b29a      	uxth	r2, r3
    5442:	68fb      	ldr	r3, [r7, #12]
    5444:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	0018      	movs	r0, r3
    544c:	4b04      	ldr	r3, [pc, #16]	; (5460 <rtc_count_disable+0x58>)
    544e:	4798      	blx	r3
    5450:	1e03      	subs	r3, r0, #0
    5452:	d1f9      	bne.n	5448 <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
    5454:	46c0      	nop			; (mov r8, r8)
    5456:	46bd      	mov	sp, r7
    5458:	b004      	add	sp, #16
    545a:	bd80      	pop	{r7, pc}
    545c:	00005365 	.word	0x00005365
    5460:	00005395 	.word	0x00005395
    5464:	ffff81ff 	.word	0xffff81ff

00005468 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    5468:	b580      	push	{r7, lr}
    546a:	b084      	sub	sp, #16
    546c:	af00      	add	r7, sp, #0
    546e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	0018      	movs	r0, r3
    547a:	4b11      	ldr	r3, [pc, #68]	; (54c0 <rtc_count_reset+0x58>)
    547c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	2200      	movs	r2, #0
    5482:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
    5484:	687b      	ldr	r3, [r7, #4]
    5486:	2200      	movs	r2, #0
    5488:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	0018      	movs	r0, r3
    5490:	4b0c      	ldr	r3, [pc, #48]	; (54c4 <rtc_count_reset+0x5c>)
    5492:	4798      	blx	r3
    5494:	1e03      	subs	r3, r0, #0
    5496:	d1f9      	bne.n	548c <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5498:	68fb      	ldr	r3, [r7, #12]
    549a:	881b      	ldrh	r3, [r3, #0]
    549c:	b29b      	uxth	r3, r3
    549e:	2201      	movs	r2, #1
    54a0:	4313      	orrs	r3, r2
    54a2:	b29a      	uxth	r2, r3
    54a4:	68fb      	ldr	r3, [r7, #12]
    54a6:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    54a8:	46c0      	nop			; (mov r8, r8)
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	0018      	movs	r0, r3
    54ae:	4b05      	ldr	r3, [pc, #20]	; (54c4 <rtc_count_reset+0x5c>)
    54b0:	4798      	blx	r3
    54b2:	1e03      	subs	r3, r0, #0
    54b4:	d1f9      	bne.n	54aa <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	46bd      	mov	sp, r7
    54ba:	b004      	add	sp, #16
    54bc:	bd80      	pop	{r7, pc}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	00005409 	.word	0x00005409
    54c4:	00005395 	.word	0x00005395

000054c8 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b084      	sub	sp, #16
    54cc:	af00      	add	r7, sp, #0
    54ce:	6078      	str	r0, [r7, #4]
    54d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	791b      	ldrb	r3, [r3, #4]
    54dc:	b29b      	uxth	r3, r3
    54de:	03db      	lsls	r3, r3, #15
    54e0:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	881b      	ldrh	r3, [r3, #0]
    54e6:	4313      	orrs	r3, r2
    54e8:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    54ea:	68bb      	ldr	r3, [r7, #8]
    54ec:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    54ee:	683b      	ldr	r3, [r7, #0]
    54f0:	789b      	ldrb	r3, [r3, #2]
    54f2:	2b00      	cmp	r3, #0
    54f4:	d032      	beq.n	555c <_rtc_count_set_config+0x94>
    54f6:	2b01      	cmp	r3, #1
    54f8:	d15e      	bne.n	55b8 <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    54fa:	68bb      	ldr	r3, [r7, #8]
    54fc:	881b      	ldrh	r3, [r3, #0]
    54fe:	b29a      	uxth	r2, r3
    5500:	68bb      	ldr	r3, [r7, #8]
    5502:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    5504:	683b      	ldr	r3, [r7, #0]
    5506:	78db      	ldrb	r3, [r3, #3]
    5508:	2b00      	cmp	r3, #0
    550a:	d007      	beq.n	551c <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    550c:	68bb      	ldr	r3, [r7, #8]
    550e:	881b      	ldrh	r3, [r3, #0]
    5510:	b29b      	uxth	r3, r3
    5512:	2280      	movs	r2, #128	; 0x80
    5514:	4313      	orrs	r3, r2
    5516:	b29a      	uxth	r2, r3
    5518:	68bb      	ldr	r3, [r7, #8]
    551a:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    551c:	230f      	movs	r3, #15
    551e:	18fb      	adds	r3, r7, r3
    5520:	2200      	movs	r2, #0
    5522:	701a      	strb	r2, [r3, #0]
    5524:	e014      	b.n	5550 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
    5526:	230f      	movs	r3, #15
    5528:	18fb      	adds	r3, r7, r3
    552a:	781a      	ldrb	r2, [r3, #0]
    552c:	683b      	ldr	r3, [r7, #0]
    552e:	3202      	adds	r2, #2
    5530:	0092      	lsls	r2, r2, #2
    5532:	58d1      	ldr	r1, [r2, r3]
    5534:	230f      	movs	r3, #15
    5536:	18fb      	adds	r3, r7, r3
    5538:	781a      	ldrb	r2, [r3, #0]
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	0018      	movs	r0, r3
    553e:	4b22      	ldr	r3, [pc, #136]	; (55c8 <_rtc_count_set_config+0x100>)
    5540:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    5542:	230f      	movs	r3, #15
    5544:	18fb      	adds	r3, r7, r3
    5546:	781a      	ldrb	r2, [r3, #0]
    5548:	230f      	movs	r3, #15
    554a:	18fb      	adds	r3, r7, r3
    554c:	3201      	adds	r2, #1
    554e:	701a      	strb	r2, [r3, #0]
    5550:	230f      	movs	r3, #15
    5552:	18fb      	adds	r3, r7, r3
    5554:	781b      	ldrb	r3, [r3, #0]
    5556:	2b00      	cmp	r3, #0
    5558:	d0e5      	beq.n	5526 <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
    555a:	e02f      	b.n	55bc <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    555c:	68bb      	ldr	r3, [r7, #8]
    555e:	881b      	ldrh	r3, [r3, #0]
    5560:	b29b      	uxth	r3, r3
    5562:	2204      	movs	r2, #4
    5564:	4313      	orrs	r3, r2
    5566:	b29a      	uxth	r2, r3
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    556c:	683b      	ldr	r3, [r7, #0]
    556e:	78db      	ldrb	r3, [r3, #3]
    5570:	2b00      	cmp	r3, #0
    5572:	d001      	beq.n	5578 <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    5574:	2317      	movs	r3, #23
    5576:	e022      	b.n	55be <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5578:	230e      	movs	r3, #14
    557a:	18fb      	adds	r3, r7, r3
    557c:	2200      	movs	r2, #0
    557e:	701a      	strb	r2, [r3, #0]
    5580:	e014      	b.n	55ac <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
    5582:	230e      	movs	r3, #14
    5584:	18fb      	adds	r3, r7, r3
    5586:	781a      	ldrb	r2, [r3, #0]
    5588:	683b      	ldr	r3, [r7, #0]
    558a:	3202      	adds	r2, #2
    558c:	0092      	lsls	r2, r2, #2
    558e:	58d1      	ldr	r1, [r2, r3]
    5590:	230e      	movs	r3, #14
    5592:	18fb      	adds	r3, r7, r3
    5594:	781a      	ldrb	r2, [r3, #0]
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	0018      	movs	r0, r3
    559a:	4b0b      	ldr	r3, [pc, #44]	; (55c8 <_rtc_count_set_config+0x100>)
    559c:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    559e:	230e      	movs	r3, #14
    55a0:	18fb      	adds	r3, r7, r3
    55a2:	781a      	ldrb	r2, [r3, #0]
    55a4:	230e      	movs	r3, #14
    55a6:	18fb      	adds	r3, r7, r3
    55a8:	3201      	adds	r2, #1
    55aa:	701a      	strb	r2, [r3, #0]
    55ac:	230e      	movs	r3, #14
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	781b      	ldrb	r3, [r3, #0]
    55b2:	2b01      	cmp	r3, #1
    55b4:	d9e5      	bls.n	5582 <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
    55b6:	e001      	b.n	55bc <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    55b8:	2317      	movs	r3, #23
    55ba:	e000      	b.n	55be <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    55bc:	2300      	movs	r3, #0
}
    55be:	0018      	movs	r0, r3
    55c0:	46bd      	mov	sp, r7
    55c2:	b004      	add	sp, #16
    55c4:	bd80      	pop	{r7, pc}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	00005631 	.word	0x00005631

000055cc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b084      	sub	sp, #16
    55d0:	af00      	add	r7, sp, #0
    55d2:	60f8      	str	r0, [r7, #12]
    55d4:	60b9      	str	r1, [r7, #8]
    55d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    55d8:	68fb      	ldr	r3, [r7, #12]
    55da:	68ba      	ldr	r2, [r7, #8]
    55dc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
    55de:	2380      	movs	r3, #128	; 0x80
    55e0:	005b      	lsls	r3, r3, #1
    55e2:	0019      	movs	r1, r3
    55e4:	2000      	movs	r0, #0
    55e6:	4b0d      	ldr	r3, [pc, #52]	; (561c <rtc_count_init+0x50>)
    55e8:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    55ea:	4b0d      	ldr	r3, [pc, #52]	; (5620 <rtc_count_init+0x54>)
    55ec:	2200      	movs	r2, #0
    55ee:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    55f0:	68fb      	ldr	r3, [r7, #12]
    55f2:	0018      	movs	r0, r3
    55f4:	4b0b      	ldr	r3, [pc, #44]	; (5624 <rtc_count_init+0x58>)
    55f6:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	789a      	ldrb	r2, [r3, #2]
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    5600:	4b09      	ldr	r3, [pc, #36]	; (5628 <rtc_count_init+0x5c>)
    5602:	68fa      	ldr	r2, [r7, #12]
    5604:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    5606:	687a      	ldr	r2, [r7, #4]
    5608:	68fb      	ldr	r3, [r7, #12]
    560a:	0011      	movs	r1, r2
    560c:	0018      	movs	r0, r3
    560e:	4b07      	ldr	r3, [pc, #28]	; (562c <rtc_count_init+0x60>)
    5610:	4798      	blx	r3
    5612:	0003      	movs	r3, r0
}
    5614:	0018      	movs	r0, r3
    5616:	46bd      	mov	sp, r7
    5618:	b004      	add	sp, #16
    561a:	bd80      	pop	{r7, pc}
    561c:	000052bd 	.word	0x000052bd
    5620:	40001000 	.word	0x40001000
    5624:	00005469 	.word	0x00005469
    5628:	20000b88 	.word	0x20000b88
    562c:	000054c9 	.word	0x000054c9

00005630 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    5630:	b580      	push	{r7, lr}
    5632:	b086      	sub	sp, #24
    5634:	af00      	add	r7, sp, #0
    5636:	60f8      	str	r0, [r7, #12]
    5638:	60b9      	str	r1, [r7, #8]
    563a:	1dfb      	adds	r3, r7, #7
    563c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    563e:	68fb      	ldr	r3, [r7, #12]
    5640:	681b      	ldr	r3, [r3, #0]
    5642:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    5644:	46c0      	nop			; (mov r8, r8)
    5646:	68fb      	ldr	r3, [r7, #12]
    5648:	0018      	movs	r0, r3
    564a:	4b1d      	ldr	r3, [pc, #116]	; (56c0 <rtc_count_set_compare+0x90>)
    564c:	4798      	blx	r3
    564e:	1e03      	subs	r3, r0, #0
    5650:	d1f9      	bne.n	5646 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	791b      	ldrb	r3, [r3, #4]
    5656:	2b00      	cmp	r3, #0
    5658:	d00f      	beq.n	567a <rtc_count_set_compare+0x4a>
    565a:	2b01      	cmp	r3, #1
    565c:	d122      	bne.n	56a4 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    565e:	1dfb      	adds	r3, r7, #7
    5660:	781b      	ldrb	r3, [r3, #0]
    5662:	2b01      	cmp	r3, #1
    5664:	d901      	bls.n	566a <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    5666:	2317      	movs	r3, #23
    5668:	e026      	b.n	56b8 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    566a:	1dfb      	adds	r3, r7, #7
    566c:	781a      	ldrb	r2, [r3, #0]
    566e:	697b      	ldr	r3, [r7, #20]
    5670:	3208      	adds	r2, #8
    5672:	0092      	lsls	r2, r2, #2
    5674:	68b9      	ldr	r1, [r7, #8]
    5676:	50d1      	str	r1, [r2, r3]

			break;
    5678:	e016      	b.n	56a8 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    567a:	1dfb      	adds	r3, r7, #7
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	2b02      	cmp	r3, #2
    5680:	d901      	bls.n	5686 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    5682:	2317      	movs	r3, #23
    5684:	e018      	b.n	56b8 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    5686:	68bb      	ldr	r3, [r7, #8]
    5688:	4a0e      	ldr	r2, [pc, #56]	; (56c4 <rtc_count_set_compare+0x94>)
    568a:	4293      	cmp	r3, r2
    568c:	d901      	bls.n	5692 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    568e:	2317      	movs	r3, #23
    5690:	e012      	b.n	56b8 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    5692:	1dfb      	adds	r3, r7, #7
    5694:	781a      	ldrb	r2, [r3, #0]
    5696:	68bb      	ldr	r3, [r7, #8]
    5698:	b299      	uxth	r1, r3
    569a:	697b      	ldr	r3, [r7, #20]
    569c:	3210      	adds	r2, #16
    569e:	0052      	lsls	r2, r2, #1
    56a0:	52d1      	strh	r1, [r2, r3]

			break;
    56a2:	e001      	b.n	56a8 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    56a4:	231a      	movs	r3, #26
    56a6:	e007      	b.n	56b8 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    56a8:	46c0      	nop			; (mov r8, r8)
    56aa:	68fb      	ldr	r3, [r7, #12]
    56ac:	0018      	movs	r0, r3
    56ae:	4b04      	ldr	r3, [pc, #16]	; (56c0 <rtc_count_set_compare+0x90>)
    56b0:	4798      	blx	r3
    56b2:	1e03      	subs	r3, r0, #0
    56b4:	d1f9      	bne.n	56aa <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    56b6:	2300      	movs	r3, #0
}
    56b8:	0018      	movs	r0, r3
    56ba:	46bd      	mov	sp, r7
    56bc:	b006      	add	sp, #24
    56be:	bd80      	pop	{r7, pc}
    56c0:	00005395 	.word	0x00005395
    56c4:	0000ffff 	.word	0x0000ffff

000056c8 <rtc_count_clear_compare_match>:
 * \retval STATUS_ERR_BAD_FORMAT   If the module was not initialized in a mode
 */
enum status_code rtc_count_clear_compare_match(
		struct rtc_module *const module,
		const enum rtc_count_compare comp_index)
{
    56c8:	b580      	push	{r7, lr}
    56ca:	b084      	sub	sp, #16
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
    56d0:	000a      	movs	r2, r1
    56d2:	1cfb      	adds	r3, r7, #3
    56d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	60fb      	str	r3, [r7, #12]

	/* Check sanity. */
	switch (module->mode){
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	791b      	ldrb	r3, [r3, #4]
    56e0:	2b00      	cmp	r3, #0
    56e2:	d007      	beq.n	56f4 <rtc_count_clear_compare_match+0x2c>
    56e4:	2b01      	cmp	r3, #1
    56e6:	d10b      	bne.n	5700 <rtc_count_clear_compare_match+0x38>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_COMP32_NUM) {
    56e8:	1cfb      	adds	r3, r7, #3
    56ea:	781b      	ldrb	r3, [r3, #0]
    56ec:	2b01      	cmp	r3, #1
    56ee:	d909      	bls.n	5704 <rtc_count_clear_compare_match+0x3c>
				return STATUS_ERR_INVALID_ARG;
    56f0:	2317      	movs	r3, #23
    56f2:	e019      	b.n	5728 <rtc_count_clear_compare_match+0x60>

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
    56f4:	1cfb      	adds	r3, r7, #3
    56f6:	781b      	ldrb	r3, [r3, #0]
    56f8:	2b02      	cmp	r3, #2
    56fa:	d905      	bls.n	5708 <rtc_count_clear_compare_match+0x40>
				return STATUS_ERR_INVALID_ARG;
    56fc:	2317      	movs	r3, #23
    56fe:	e013      	b.n	5728 <rtc_count_clear_compare_match+0x60>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    5700:	231a      	movs	r3, #26
    5702:	e011      	b.n	5728 <rtc_count_clear_compare_match+0x60>
			break;
    5704:	46c0      	nop			; (mov r8, r8)
    5706:	e000      	b.n	570a <rtc_count_clear_compare_match+0x42>
			break;
    5708:	46c0      	nop			; (mov r8, r8)
	}

	/* Clear INTFLAG. */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << comp_index);
    570a:	1cfb      	adds	r3, r7, #3
    570c:	781b      	ldrb	r3, [r3, #0]
    570e:	2201      	movs	r2, #1
    5710:	409a      	lsls	r2, r3
    5712:	0013      	movs	r3, r2
    5714:	b29b      	uxth	r3, r3
    5716:	021b      	lsls	r3, r3, #8
    5718:	b29a      	uxth	r2, r3
    571a:	23c0      	movs	r3, #192	; 0xc0
    571c:	009b      	lsls	r3, r3, #2
    571e:	4013      	ands	r3, r2
    5720:	b29a      	uxth	r2, r3
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	819a      	strh	r2, [r3, #12]

	return STATUS_OK;
    5726:	2300      	movs	r3, #0
}
    5728:	0018      	movs	r0, r3
    572a:	46bd      	mov	sp, r7
    572c:	b004      	add	sp, #16
    572e:	bd80      	pop	{r7, pc}

00005730 <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
    5730:	b580      	push	{r7, lr}
    5732:	b086      	sub	sp, #24
    5734:	af00      	add	r7, sp, #0
    5736:	60f8      	str	r0, [r7, #12]
    5738:	60b9      	str	r1, [r7, #8]
    573a:	1dfb      	adds	r3, r7, #7
    573c:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
    573e:	2317      	movs	r3, #23
    5740:	18fb      	adds	r3, r7, r3
    5742:	2200      	movs	r2, #0
    5744:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    5746:	1dfb      	adds	r3, r7, #7
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	2b0a      	cmp	r3, #10
    574c:	d003      	beq.n	5756 <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    574e:	1dfb      	adds	r3, r7, #7
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	2b07      	cmp	r3, #7
    5754:	d804      	bhi.n	5760 <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
    5756:	2317      	movs	r3, #23
    5758:	18fb      	adds	r3, r7, r3
    575a:	2200      	movs	r2, #0
    575c:	701a      	strb	r2, [r3, #0]
    575e:	e01f      	b.n	57a0 <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    5760:	68fb      	ldr	r3, [r7, #12]
    5762:	791b      	ldrb	r3, [r3, #4]
    5764:	2b00      	cmp	r3, #0
    5766:	d00a      	beq.n	577e <rtc_count_register_callback+0x4e>
    5768:	2b01      	cmp	r3, #1
    576a:	d111      	bne.n	5790 <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    576c:	1dfb      	adds	r3, r7, #7
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	2b09      	cmp	r3, #9
    5772:	d912      	bls.n	579a <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
    5774:	2317      	movs	r3, #23
    5776:	18fb      	adds	r3, r7, r3
    5778:	2217      	movs	r2, #23
    577a:	701a      	strb	r2, [r3, #0]
			}

			break;
    577c:	e00d      	b.n	579a <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    577e:	1dfb      	adds	r3, r7, #7
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	2b0a      	cmp	r3, #10
    5784:	d90b      	bls.n	579e <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
    5786:	2317      	movs	r3, #23
    5788:	18fb      	adds	r3, r7, r3
    578a:	2217      	movs	r2, #23
    578c:	701a      	strb	r2, [r3, #0]
			}
			break;
    578e:	e006      	b.n	579e <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
    5790:	2317      	movs	r3, #23
    5792:	18fb      	adds	r3, r7, r3
    5794:	2217      	movs	r2, #23
    5796:	701a      	strb	r2, [r3, #0]
    5798:	e002      	b.n	57a0 <rtc_count_register_callback+0x70>
			break;
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	e000      	b.n	57a0 <rtc_count_register_callback+0x70>
			break;
    579e:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
    57a0:	2317      	movs	r3, #23
    57a2:	18fb      	adds	r3, r7, r3
    57a4:	781b      	ldrb	r3, [r3, #0]
    57a6:	2b00      	cmp	r3, #0
    57a8:	d115      	bne.n	57d6 <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
    57aa:	1dfb      	adds	r3, r7, #7
    57ac:	781a      	ldrb	r2, [r3, #0]
    57ae:	68fb      	ldr	r3, [r7, #12]
    57b0:	3202      	adds	r2, #2
    57b2:	0092      	lsls	r2, r2, #2
    57b4:	68b9      	ldr	r1, [r7, #8]
    57b6:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    57bc:	b29b      	uxth	r3, r3
    57be:	b21a      	sxth	r2, r3
    57c0:	1dfb      	adds	r3, r7, #7
    57c2:	781b      	ldrb	r3, [r3, #0]
    57c4:	2101      	movs	r1, #1
    57c6:	4099      	lsls	r1, r3
    57c8:	000b      	movs	r3, r1
    57ca:	b21b      	sxth	r3, r3
    57cc:	4313      	orrs	r3, r2
    57ce:	b21b      	sxth	r3, r3
    57d0:	b29a      	uxth	r2, r3
    57d2:	68fb      	ldr	r3, [r7, #12]
    57d4:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
    57d6:	2317      	movs	r3, #23
    57d8:	18fb      	adds	r3, r7, r3
    57da:	781b      	ldrb	r3, [r3, #0]
}
    57dc:	0018      	movs	r0, r3
    57de:	46bd      	mov	sp, r7
    57e0:	b006      	add	sp, #24
    57e2:	bd80      	pop	{r7, pc}

000057e4 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b084      	sub	sp, #16
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
    57ec:	000a      	movs	r2, r1
    57ee:	1cfb      	adds	r3, r7, #3
    57f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    57f8:	1cfb      	adds	r3, r7, #3
    57fa:	781b      	ldrb	r3, [r3, #0]
    57fc:	2b0a      	cmp	r3, #10
    57fe:	d103      	bne.n	5808 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    5800:	68fb      	ldr	r3, [r7, #12]
    5802:	4a1a      	ldr	r2, [pc, #104]	; (586c <rtc_count_enable_callback+0x88>)
    5804:	815a      	strh	r2, [r3, #10]
    5806:	e01e      	b.n	5846 <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5808:	1cfb      	adds	r3, r7, #3
    580a:	781b      	ldrb	r3, [r3, #0]
    580c:	2b07      	cmp	r3, #7
    580e:	d80b      	bhi.n	5828 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    5810:	1cfb      	adds	r3, r7, #3
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2201      	movs	r2, #1
    5816:	409a      	lsls	r2, r3
    5818:	0013      	movs	r3, r2
    581a:	b29b      	uxth	r3, r3
    581c:	22ff      	movs	r2, #255	; 0xff
    581e:	4013      	ands	r3, r2
    5820:	b29a      	uxth	r2, r3
    5822:	68fb      	ldr	r3, [r7, #12]
    5824:	815a      	strh	r2, [r3, #10]
    5826:	e00e      	b.n	5846 <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    5828:	1cfb      	adds	r3, r7, #3
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	3b08      	subs	r3, #8
    582e:	2201      	movs	r2, #1
    5830:	409a      	lsls	r2, r3
    5832:	0013      	movs	r3, r2
    5834:	b29b      	uxth	r3, r3
    5836:	021b      	lsls	r3, r3, #8
    5838:	b29a      	uxth	r2, r3
    583a:	23c0      	movs	r3, #192	; 0xc0
    583c:	009b      	lsls	r3, r3, #2
    583e:	4013      	ands	r3, r2
    5840:	b29a      	uxth	r2, r3
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    584a:	b29b      	uxth	r3, r3
    584c:	b21a      	sxth	r2, r3
    584e:	1cfb      	adds	r3, r7, #3
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	2101      	movs	r1, #1
    5854:	4099      	lsls	r1, r3
    5856:	000b      	movs	r3, r1
    5858:	b21b      	sxth	r3, r3
    585a:	4313      	orrs	r3, r2
    585c:	b21b      	sxth	r3, r3
    585e:	b29a      	uxth	r2, r3
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	86da      	strh	r2, [r3, #54]	; 0x36
}
    5864:	46c0      	nop			; (mov r8, r8)
    5866:	46bd      	mov	sp, r7
    5868:	b004      	add	sp, #16
    586a:	bd80      	pop	{r7, pc}
    586c:	ffff8000 	.word	0xffff8000

00005870 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    5870:	b580      	push	{r7, lr}
    5872:	b086      	sub	sp, #24
    5874:	af00      	add	r7, sp, #0
    5876:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    5878:	4b58      	ldr	r3, [pc, #352]	; (59dc <_rtc_interrupt_handler+0x16c>)
    587a:	687a      	ldr	r2, [r7, #4]
    587c:	0092      	lsls	r2, r2, #2
    587e:	58d3      	ldr	r3, [r2, r3]
    5880:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    5882:	693b      	ldr	r3, [r7, #16]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    5888:	230a      	movs	r3, #10
    588a:	18fb      	adds	r3, r7, r3
    588c:	693a      	ldr	r2, [r7, #16]
    588e:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    5890:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    5892:	693b      	ldr	r3, [r7, #16]
    5894:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5896:	b29a      	uxth	r2, r3
    5898:	230a      	movs	r3, #10
    589a:	18fb      	adds	r3, r7, r3
    589c:	210a      	movs	r1, #10
    589e:	1879      	adds	r1, r7, r1
    58a0:	8809      	ldrh	r1, [r1, #0]
    58a2:	400a      	ands	r2, r1
    58a4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    58a6:	2308      	movs	r3, #8
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	68fa      	ldr	r2, [r7, #12]
    58ac:	8992      	ldrh	r2, [r2, #12]
    58ae:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    58b0:	68fb      	ldr	r3, [r7, #12]
    58b2:	895b      	ldrh	r3, [r3, #10]
    58b4:	b29a      	uxth	r2, r3
    58b6:	2308      	movs	r3, #8
    58b8:	18fb      	adds	r3, r7, r3
    58ba:	2108      	movs	r1, #8
    58bc:	1879      	adds	r1, r7, r1
    58be:	8809      	ldrh	r1, [r1, #0]
    58c0:	400a      	ands	r2, r1
    58c2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    58c4:	2308      	movs	r3, #8
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	2200      	movs	r2, #0
    58ca:	5e9b      	ldrsh	r3, [r3, r2]
    58cc:	2b00      	cmp	r3, #0
    58ce:	da0d      	bge.n	58ec <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    58d0:	230a      	movs	r3, #10
    58d2:	18fb      	adds	r3, r7, r3
    58d4:	881a      	ldrh	r2, [r3, #0]
    58d6:	2380      	movs	r3, #128	; 0x80
    58d8:	00db      	lsls	r3, r3, #3
    58da:	4013      	ands	r3, r2
    58dc:	d002      	beq.n	58e4 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    58de:	693b      	ldr	r3, [r7, #16]
    58e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    58e2:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	4a3e      	ldr	r2, [pc, #248]	; (59e0 <_rtc_interrupt_handler+0x170>)
    58e8:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    58ea:	e072      	b.n	59d2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    58ec:	2308      	movs	r3, #8
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	881b      	ldrh	r3, [r3, #0]
    58f2:	22ff      	movs	r2, #255	; 0xff
    58f4:	4013      	ands	r3, r2
    58f6:	d041      	beq.n	597c <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    58f8:	2317      	movs	r3, #23
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	2200      	movs	r2, #0
    58fe:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5900:	2317      	movs	r3, #23
    5902:	18fb      	adds	r3, r7, r3
    5904:	2200      	movs	r2, #0
    5906:	701a      	strb	r2, [r3, #0]
    5908:	e032      	b.n	5970 <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    590a:	2308      	movs	r3, #8
    590c:	18fb      	adds	r3, r7, r3
    590e:	881b      	ldrh	r3, [r3, #0]
    5910:	2217      	movs	r2, #23
    5912:	18ba      	adds	r2, r7, r2
    5914:	7812      	ldrb	r2, [r2, #0]
    5916:	2101      	movs	r1, #1
    5918:	4091      	lsls	r1, r2
    591a:	000a      	movs	r2, r1
    591c:	4013      	ands	r3, r2
    591e:	22ff      	movs	r2, #255	; 0xff
    5920:	4013      	ands	r3, r2
    5922:	d012      	beq.n	594a <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    5924:	230a      	movs	r3, #10
    5926:	18fb      	adds	r3, r7, r3
    5928:	881a      	ldrh	r2, [r3, #0]
    592a:	2317      	movs	r3, #23
    592c:	18fb      	adds	r3, r7, r3
    592e:	781b      	ldrb	r3, [r3, #0]
    5930:	411a      	asrs	r2, r3
    5932:	0013      	movs	r3, r2
    5934:	2201      	movs	r2, #1
    5936:	4013      	ands	r3, r2
    5938:	d007      	beq.n	594a <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    593a:	2317      	movs	r3, #23
    593c:	18fb      	adds	r3, r7, r3
    593e:	781a      	ldrb	r2, [r3, #0]
    5940:	693b      	ldr	r3, [r7, #16]
    5942:	3202      	adds	r2, #2
    5944:	0092      	lsls	r2, r2, #2
    5946:	58d3      	ldr	r3, [r2, r3]
    5948:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    594a:	2317      	movs	r3, #23
    594c:	18fb      	adds	r3, r7, r3
    594e:	781b      	ldrb	r3, [r3, #0]
    5950:	2201      	movs	r2, #1
    5952:	409a      	lsls	r2, r3
    5954:	0013      	movs	r3, r2
    5956:	b29b      	uxth	r3, r3
    5958:	22ff      	movs	r2, #255	; 0xff
    595a:	4013      	ands	r3, r2
    595c:	b29a      	uxth	r2, r3
    595e:	68fb      	ldr	r3, [r7, #12]
    5960:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5962:	2317      	movs	r3, #23
    5964:	18fb      	adds	r3, r7, r3
    5966:	781a      	ldrb	r2, [r3, #0]
    5968:	2317      	movs	r3, #23
    596a:	18fb      	adds	r3, r7, r3
    596c:	3201      	adds	r2, #1
    596e:	701a      	strb	r2, [r3, #0]
    5970:	2317      	movs	r3, #23
    5972:	18fb      	adds	r3, r7, r3
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	2b07      	cmp	r3, #7
    5978:	d9c7      	bls.n	590a <_rtc_interrupt_handler+0x9a>
}
    597a:	e02a      	b.n	59d2 <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    597c:	2308      	movs	r3, #8
    597e:	18fb      	adds	r3, r7, r3
    5980:	881a      	ldrh	r2, [r3, #0]
    5982:	2380      	movs	r3, #128	; 0x80
    5984:	005b      	lsls	r3, r3, #1
    5986:	4013      	ands	r3, r2
    5988:	d00e      	beq.n	59a8 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    598a:	230a      	movs	r3, #10
    598c:	18fb      	adds	r3, r7, r3
    598e:	881a      	ldrh	r2, [r3, #0]
    5990:	2380      	movs	r3, #128	; 0x80
    5992:	005b      	lsls	r3, r3, #1
    5994:	4013      	ands	r3, r2
    5996:	d002      	beq.n	599e <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    5998:	693b      	ldr	r3, [r7, #16]
    599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    599c:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    599e:	68fb      	ldr	r3, [r7, #12]
    59a0:	2280      	movs	r2, #128	; 0x80
    59a2:	0052      	lsls	r2, r2, #1
    59a4:	819a      	strh	r2, [r3, #12]
}
    59a6:	e014      	b.n	59d2 <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    59a8:	2308      	movs	r3, #8
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	881a      	ldrh	r2, [r3, #0]
    59ae:	2380      	movs	r3, #128	; 0x80
    59b0:	009b      	lsls	r3, r3, #2
    59b2:	4013      	ands	r3, r2
    59b4:	d00d      	beq.n	59d2 <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    59b6:	230a      	movs	r3, #10
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	881a      	ldrh	r2, [r3, #0]
    59bc:	2380      	movs	r3, #128	; 0x80
    59be:	009b      	lsls	r3, r3, #2
    59c0:	4013      	ands	r3, r2
    59c2:	d002      	beq.n	59ca <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    59c4:	693b      	ldr	r3, [r7, #16]
    59c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59c8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    59ca:	68fb      	ldr	r3, [r7, #12]
    59cc:	2280      	movs	r2, #128	; 0x80
    59ce:	0092      	lsls	r2, r2, #2
    59d0:	819a      	strh	r2, [r3, #12]
}
    59d2:	46c0      	nop			; (mov r8, r8)
    59d4:	46bd      	mov	sp, r7
    59d6:	b006      	add	sp, #24
    59d8:	bd80      	pop	{r7, pc}
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	20000b88 	.word	0x20000b88
    59e0:	ffff8000 	.word	0xffff8000

000059e4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    59e8:	2000      	movs	r0, #0
    59ea:	4b02      	ldr	r3, [pc, #8]	; (59f4 <RTC_Handler+0x10>)
    59ec:	4798      	blx	r3
}
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	46bd      	mov	sp, r7
    59f2:	bd80      	pop	{r7, pc}
    59f4:	00005871 	.word	0x00005871

000059f8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b084      	sub	sp, #16
    59fc:	af00      	add	r7, sp, #0
    59fe:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	681b      	ldr	r3, [r3, #0]
    5a04:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	69db      	ldr	r3, [r3, #28]
    5a0a:	2207      	movs	r2, #7
    5a0c:	4013      	ands	r3, r2
    5a0e:	1e5a      	subs	r2, r3, #1
    5a10:	4193      	sbcs	r3, r2
    5a12:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5a14:	0018      	movs	r0, r3
    5a16:	46bd      	mov	sp, r7
    5a18:	b004      	add	sp, #16
    5a1a:	bd80      	pop	{r7, pc}

00005a1c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b082      	sub	sp, #8
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5a24:	46c0      	nop			; (mov r8, r8)
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	0018      	movs	r0, r3
    5a2a:	4b04      	ldr	r3, [pc, #16]	; (5a3c <_i2c_master_wait_for_sync+0x20>)
    5a2c:	4798      	blx	r3
    5a2e:	1e03      	subs	r3, r0, #0
    5a30:	d1f9      	bne.n	5a26 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    5a32:	46c0      	nop			; (mov r8, r8)
    5a34:	46bd      	mov	sp, r7
    5a36:	b002      	add	sp, #8
    5a38:	bd80      	pop	{r7, pc}
    5a3a:	46c0      	nop			; (mov r8, r8)
    5a3c:	000059f9 	.word	0x000059f9

00005a40 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b084      	sub	sp, #16
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	681b      	ldr	r3, [r3, #0]
    5a4c:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	011b      	lsls	r3, r3, #4
    5a54:	0fdb      	lsrs	r3, r3, #31
    5a56:	b2db      	uxtb	r3, r3
    5a58:	001a      	movs	r2, r3
    5a5a:	230b      	movs	r3, #11
    5a5c:	18fb      	adds	r3, r7, r3
    5a5e:	1e51      	subs	r1, r2, #1
    5a60:	418a      	sbcs	r2, r1
    5a62:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    5a64:	2308      	movs	r3, #8
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	687a      	ldr	r2, [r7, #4]
    5a6a:	8b52      	ldrh	r2, [r2, #26]
    5a6c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	8b9b      	ldrh	r3, [r3, #28]
    5a72:	b29a      	uxth	r2, r3
    5a74:	2308      	movs	r3, #8
    5a76:	18fb      	adds	r3, r7, r3
    5a78:	2108      	movs	r1, #8
    5a7a:	1879      	adds	r1, r7, r1
    5a7c:	8809      	ldrh	r1, [r1, #0]
    5a7e:	1a8a      	subs	r2, r1, r2
    5a80:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	8b9b      	ldrh	r3, [r3, #28]
    5a86:	b29b      	uxth	r3, r3
    5a88:	3b01      	subs	r3, #1
    5a8a:	b29a      	uxth	r2, r3
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    5a90:	230b      	movs	r3, #11
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d010      	beq.n	5abc <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	7adb      	ldrb	r3, [r3, #11]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d01c      	beq.n	5adc <_i2c_master_read+0x9c>
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	8b9b      	ldrh	r3, [r3, #28]
    5aa6:	b29b      	uxth	r3, r3
    5aa8:	2b01      	cmp	r3, #1
    5aaa:	d117      	bne.n	5adc <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	685b      	ldr	r3, [r3, #4]
    5ab0:	2280      	movs	r2, #128	; 0x80
    5ab2:	02d2      	lsls	r2, r2, #11
    5ab4:	431a      	orrs	r2, r3
    5ab6:	68fb      	ldr	r3, [r7, #12]
    5ab8:	605a      	str	r2, [r3, #4]
    5aba:	e00f      	b.n	5adc <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	7adb      	ldrb	r3, [r3, #11]
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d00b      	beq.n	5adc <_i2c_master_read+0x9c>
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	8b9b      	ldrh	r3, [r3, #28]
    5ac8:	b29b      	uxth	r3, r3
    5aca:	2b00      	cmp	r3, #0
    5acc:	d106      	bne.n	5adc <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	685b      	ldr	r3, [r3, #4]
    5ad2:	2280      	movs	r2, #128	; 0x80
    5ad4:	02d2      	lsls	r2, r2, #11
    5ad6:	431a      	orrs	r2, r3
    5ad8:	68fb      	ldr	r3, [r7, #12]
    5ada:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	8b9b      	ldrh	r3, [r3, #28]
    5ae0:	b29b      	uxth	r3, r3
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	d10e      	bne.n	5b04 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	7a9b      	ldrb	r3, [r3, #10]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d00a      	beq.n	5b04 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	0018      	movs	r0, r3
    5af2:	4b0e      	ldr	r3, [pc, #56]	; (5b2c <_i2c_master_read+0xec>)
    5af4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5af6:	68fb      	ldr	r3, [r7, #12]
    5af8:	685b      	ldr	r3, [r3, #4]
    5afa:	22c0      	movs	r2, #192	; 0xc0
    5afc:	0292      	lsls	r2, r2, #10
    5afe:	431a      	orrs	r2, r3
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	0018      	movs	r0, r3
    5b08:	4b08      	ldr	r3, [pc, #32]	; (5b2c <_i2c_master_read+0xec>)
    5b0a:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	6a1a      	ldr	r2, [r3, #32]
    5b10:	2308      	movs	r3, #8
    5b12:	18fb      	adds	r3, r7, r3
    5b14:	881b      	ldrh	r3, [r3, #0]
    5b16:	18d3      	adds	r3, r2, r3
    5b18:	68fa      	ldr	r2, [r7, #12]
    5b1a:	2128      	movs	r1, #40	; 0x28
    5b1c:	5c52      	ldrb	r2, [r2, r1]
    5b1e:	b2d2      	uxtb	r2, r2
    5b20:	701a      	strb	r2, [r3, #0]
}
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	46bd      	mov	sp, r7
    5b26:	b004      	add	sp, #16
    5b28:	bd80      	pop	{r7, pc}
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	00005a1d 	.word	0x00005a1d

00005b30 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b084      	sub	sp, #16
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    5b3e:	68fb      	ldr	r3, [r7, #12]
    5b40:	8b5b      	ldrh	r3, [r3, #26]
    5b42:	b29b      	uxth	r3, r3
    5b44:	001a      	movs	r2, r3
    5b46:	2304      	movs	r3, #4
    5b48:	4013      	ands	r3, r2
    5b4a:	d004      	beq.n	5b56 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	2225      	movs	r2, #37	; 0x25
    5b50:	211e      	movs	r1, #30
    5b52:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    5b54:	e024      	b.n	5ba0 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    5b56:	230a      	movs	r3, #10
    5b58:	18fb      	adds	r3, r7, r3
    5b5a:	687a      	ldr	r2, [r7, #4]
    5b5c:	8b52      	ldrh	r2, [r2, #26]
    5b5e:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	8b9b      	ldrh	r3, [r3, #28]
    5b64:	b29a      	uxth	r2, r3
    5b66:	230a      	movs	r3, #10
    5b68:	18fb      	adds	r3, r7, r3
    5b6a:	210a      	movs	r1, #10
    5b6c:	1879      	adds	r1, r7, r1
    5b6e:	8809      	ldrh	r1, [r1, #0]
    5b70:	1a8a      	subs	r2, r1, r2
    5b72:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	8b9b      	ldrh	r3, [r3, #28]
    5b78:	b29b      	uxth	r3, r3
    5b7a:	3b01      	subs	r3, #1
    5b7c:	b29a      	uxth	r2, r3
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	0018      	movs	r0, r3
    5b86:	4b08      	ldr	r3, [pc, #32]	; (5ba8 <_i2c_master_write+0x78>)
    5b88:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	6a1a      	ldr	r2, [r3, #32]
    5b8e:	230a      	movs	r3, #10
    5b90:	18fb      	adds	r3, r7, r3
    5b92:	881b      	ldrh	r3, [r3, #0]
    5b94:	18d3      	adds	r3, r2, r3
    5b96:	781b      	ldrb	r3, [r3, #0]
    5b98:	b2d9      	uxtb	r1, r3
    5b9a:	68fb      	ldr	r3, [r7, #12]
    5b9c:	2228      	movs	r2, #40	; 0x28
    5b9e:	5499      	strb	r1, [r3, r2]
}
    5ba0:	46bd      	mov	sp, r7
    5ba2:	b004      	add	sp, #16
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	00005a1d 	.word	0x00005a1d

00005bac <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b084      	sub	sp, #16
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5bb4:	687b      	ldr	r3, [r7, #4]
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5bba:	68fb      	ldr	r3, [r7, #12]
    5bbc:	7e1b      	ldrb	r3, [r3, #24]
    5bbe:	b2db      	uxtb	r3, r3
    5bc0:	001a      	movs	r2, r3
    5bc2:	2301      	movs	r3, #1
    5bc4:	4013      	ands	r3, r2
    5bc6:	d00e      	beq.n	5be6 <_i2c_master_async_address_response+0x3a>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5bc8:	68fb      	ldr	r3, [r7, #12]
    5bca:	2201      	movs	r2, #1
    5bcc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5bce:	68fb      	ldr	r3, [r7, #12]
    5bd0:	8b5b      	ldrh	r3, [r3, #26]
    5bd2:	b29b      	uxth	r3, r3
    5bd4:	001a      	movs	r2, r3
    5bd6:	2302      	movs	r3, #2
    5bd8:	4013      	ands	r3, r2
    5bda:	d021      	beq.n	5c20 <_i2c_master_async_address_response+0x74>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    5bdc:	687b      	ldr	r3, [r7, #4]
    5bde:	2225      	movs	r2, #37	; 0x25
    5be0:	2141      	movs	r1, #65	; 0x41
    5be2:	5499      	strb	r1, [r3, r2]
    5be4:	e01c      	b.n	5c20 <_i2c_master_async_address_response+0x74>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5be6:	68fb      	ldr	r3, [r7, #12]
    5be8:	8b5b      	ldrh	r3, [r3, #26]
    5bea:	b29b      	uxth	r3, r3
    5bec:	001a      	movs	r2, r3
    5bee:	2304      	movs	r3, #4
    5bf0:	4013      	ands	r3, r2
    5bf2:	d015      	beq.n	5c20 <_i2c_master_async_address_response+0x74>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	2225      	movs	r2, #37	; 0x25
    5bf8:	2118      	movs	r1, #24
    5bfa:	5499      	strb	r1, [r3, r2]
		module->buffer_remaining = 0;
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	2200      	movs	r2, #0
    5c00:	839a      	strh	r2, [r3, #28]

		if (module->send_stop) {
    5c02:	687b      	ldr	r3, [r7, #4]
    5c04:	7a9b      	ldrb	r3, [r3, #10]
    5c06:	2b00      	cmp	r3, #0
    5c08:	d00a      	beq.n	5c20 <_i2c_master_async_address_response+0x74>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b13      	ldr	r3, [pc, #76]	; (5c5c <_i2c_master_async_address_response+0xb0>)
    5c10:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5c12:	68fb      	ldr	r3, [r7, #12]
    5c14:	685b      	ldr	r3, [r3, #4]
    5c16:	22c0      	movs	r2, #192	; 0xc0
    5c18:	0292      	lsls	r2, r2, #10
    5c1a:	431a      	orrs	r2, r3
    5c1c:	68fb      	ldr	r3, [r7, #12]
    5c1e:	605a      	str	r2, [r3, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	8b9b      	ldrh	r3, [r3, #28]
    5c24:	b29a      	uxth	r2, r3
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	2225      	movs	r2, #37	; 0x25
    5c2e:	5c9b      	ldrb	r3, [r3, r2]
    5c30:	b2db      	uxtb	r3, r3
    5c32:	2b05      	cmp	r3, #5
    5c34:	d10e      	bne.n	5c54 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5c36:	687b      	ldr	r3, [r7, #4]
    5c38:	2224      	movs	r2, #36	; 0x24
    5c3a:	5c9b      	ldrb	r3, [r3, r2]
    5c3c:	b2db      	uxtb	r3, r3
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d104      	bne.n	5c4c <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	0018      	movs	r0, r3
    5c46:	4b06      	ldr	r3, [pc, #24]	; (5c60 <_i2c_master_async_address_response+0xb4>)
    5c48:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    5c4a:	e003      	b.n	5c54 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	0018      	movs	r0, r3
    5c50:	4b04      	ldr	r3, [pc, #16]	; (5c64 <_i2c_master_async_address_response+0xb8>)
    5c52:	4798      	blx	r3
}
    5c54:	46c0      	nop			; (mov r8, r8)
    5c56:	46bd      	mov	sp, r7
    5c58:	b004      	add	sp, #16
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	00005a1d 	.word	0x00005a1d
    5c60:	00005b31 	.word	0x00005b31
    5c64:	00005a41 	.word	0x00005a41

00005c68 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	b086      	sub	sp, #24
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	0002      	movs	r2, r0
    5c70:	1dfb      	adds	r3, r7, #7
    5c72:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    5c74:	1dfb      	adds	r3, r7, #7
    5c76:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    5c78:	4b93      	ldr	r3, [pc, #588]	; (5ec8 <_i2c_master_interrupt_handler+0x260>)
    5c7a:	0092      	lsls	r2, r2, #2
    5c7c:	58d3      	ldr	r3, [r2, r3]
    5c7e:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5c80:	697b      	ldr	r3, [r7, #20]
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5c86:	693b      	ldr	r3, [r7, #16]
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	011b      	lsls	r3, r3, #4
    5c8c:	0fdb      	lsrs	r3, r3, #31
    5c8e:	b2db      	uxtb	r3, r3
    5c90:	001a      	movs	r2, r3
    5c92:	230f      	movs	r3, #15
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	1e51      	subs	r1, r2, #1
    5c98:	418a      	sbcs	r2, r1
    5c9a:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    5c9c:	230e      	movs	r3, #14
    5c9e:	18fb      	adds	r3, r7, r3
    5ca0:	697a      	ldr	r2, [r7, #20]
    5ca2:	7e52      	ldrb	r2, [r2, #25]
    5ca4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    5ca6:	697b      	ldr	r3, [r7, #20]
    5ca8:	7e1b      	ldrb	r3, [r3, #24]
    5caa:	b2da      	uxtb	r2, r3
    5cac:	230e      	movs	r3, #14
    5cae:	18fb      	adds	r3, r7, r3
    5cb0:	210e      	movs	r1, #14
    5cb2:	1879      	adds	r1, r7, r1
    5cb4:	7809      	ldrb	r1, [r1, #0]
    5cb6:	400a      	ands	r2, r1
    5cb8:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    5cba:	697b      	ldr	r3, [r7, #20]
    5cbc:	8b5b      	ldrh	r3, [r3, #26]
    5cbe:	b29b      	uxth	r3, r3
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d109      	bne.n	5cd8 <_i2c_master_interrupt_handler+0x70>
    5cc4:	697b      	ldr	r3, [r7, #20]
    5cc6:	8b9b      	ldrh	r3, [r3, #28]
    5cc8:	b29b      	uxth	r3, r3
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d004      	beq.n	5cd8 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    5cce:	697b      	ldr	r3, [r7, #20]
    5cd0:	0018      	movs	r0, r3
    5cd2:	4b7e      	ldr	r3, [pc, #504]	; (5ecc <_i2c_master_interrupt_handler+0x264>)
    5cd4:	4798      	blx	r3
    5cd6:	e070      	b.n	5dba <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5cd8:	697b      	ldr	r3, [r7, #20]
    5cda:	8b5b      	ldrh	r3, [r3, #26]
    5cdc:	b29b      	uxth	r3, r3
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d039      	beq.n	5d56 <_i2c_master_interrupt_handler+0xee>
    5ce2:	697b      	ldr	r3, [r7, #20]
    5ce4:	8b9b      	ldrh	r3, [r3, #28]
    5ce6:	b29b      	uxth	r3, r3
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d134      	bne.n	5d56 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    5cec:	697b      	ldr	r3, [r7, #20]
    5cee:	2225      	movs	r2, #37	; 0x25
    5cf0:	5c9b      	ldrb	r3, [r3, r2]
    5cf2:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5cf4:	2b05      	cmp	r3, #5
    5cf6:	d12e      	bne.n	5d56 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5cf8:	697b      	ldr	r3, [r7, #20]
    5cfa:	2224      	movs	r2, #36	; 0x24
    5cfc:	5c9b      	ldrb	r3, [r3, r2]
    5cfe:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    5d00:	2b00      	cmp	r3, #0
    5d02:	d128      	bne.n	5d56 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    5d04:	693b      	ldr	r3, [r7, #16]
    5d06:	2203      	movs	r2, #3
    5d08:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5d0a:	697b      	ldr	r3, [r7, #20]
    5d0c:	2200      	movs	r2, #0
    5d0e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    5d10:	697b      	ldr	r3, [r7, #20]
    5d12:	2225      	movs	r2, #37	; 0x25
    5d14:	2100      	movs	r1, #0
    5d16:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    5d18:	697b      	ldr	r3, [r7, #20]
    5d1a:	7a9b      	ldrb	r3, [r3, #10]
    5d1c:	2b00      	cmp	r3, #0
    5d1e:	d00b      	beq.n	5d38 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    5d20:	697b      	ldr	r3, [r7, #20]
    5d22:	0018      	movs	r0, r3
    5d24:	4b6a      	ldr	r3, [pc, #424]	; (5ed0 <_i2c_master_interrupt_handler+0x268>)
    5d26:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5d28:	693b      	ldr	r3, [r7, #16]
    5d2a:	685b      	ldr	r3, [r3, #4]
    5d2c:	22c0      	movs	r2, #192	; 0xc0
    5d2e:	0292      	lsls	r2, r2, #10
    5d30:	431a      	orrs	r2, r3
    5d32:	693b      	ldr	r3, [r7, #16]
    5d34:	605a      	str	r2, [r3, #4]
    5d36:	e002      	b.n	5d3e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5d38:	693b      	ldr	r3, [r7, #16]
    5d3a:	2201      	movs	r2, #1
    5d3c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5d3e:	230e      	movs	r3, #14
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	781b      	ldrb	r3, [r3, #0]
    5d44:	2201      	movs	r2, #1
    5d46:	4013      	ands	r3, r2
    5d48:	d037      	beq.n	5dba <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5d4a:	697b      	ldr	r3, [r7, #20]
    5d4c:	68db      	ldr	r3, [r3, #12]
    5d4e:	697a      	ldr	r2, [r7, #20]
    5d50:	0010      	movs	r0, r2
    5d52:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5d54:	e031      	b.n	5dba <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    5d56:	697b      	ldr	r3, [r7, #20]
    5d58:	8b5b      	ldrh	r3, [r3, #26]
    5d5a:	b29b      	uxth	r3, r3
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d02c      	beq.n	5dba <_i2c_master_interrupt_handler+0x152>
    5d60:	697b      	ldr	r3, [r7, #20]
    5d62:	8b9b      	ldrh	r3, [r3, #28]
    5d64:	b29b      	uxth	r3, r3
    5d66:	2b00      	cmp	r3, #0
    5d68:	d027      	beq.n	5dba <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    5d6a:	693b      	ldr	r3, [r7, #16]
    5d6c:	8b5b      	ldrh	r3, [r3, #26]
    5d6e:	b29b      	uxth	r3, r3
    5d70:	001a      	movs	r2, r3
    5d72:	2320      	movs	r3, #32
    5d74:	4013      	ands	r3, r2
    5d76:	d111      	bne.n	5d9c <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5d78:	230f      	movs	r3, #15
    5d7a:	18fb      	adds	r3, r7, r3
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	2201      	movs	r2, #1
    5d80:	4053      	eors	r3, r2
    5d82:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    5d84:	2b00      	cmp	r3, #0
    5d86:	d104      	bne.n	5d92 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5d88:	697b      	ldr	r3, [r7, #20]
    5d8a:	8b9b      	ldrh	r3, [r3, #28]
    5d8c:	b29b      	uxth	r3, r3
    5d8e:	2b01      	cmp	r3, #1
    5d90:	d004      	beq.n	5d9c <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5d92:	697b      	ldr	r3, [r7, #20]
    5d94:	2225      	movs	r2, #37	; 0x25
    5d96:	2141      	movs	r1, #65	; 0x41
    5d98:	5499      	strb	r1, [r3, r2]
    5d9a:	e00e      	b.n	5dba <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5d9c:	697b      	ldr	r3, [r7, #20]
    5d9e:	2224      	movs	r2, #36	; 0x24
    5da0:	5c9b      	ldrb	r3, [r3, r2]
    5da2:	b2db      	uxtb	r3, r3
    5da4:	2b00      	cmp	r3, #0
    5da6:	d104      	bne.n	5db2 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    5da8:	697b      	ldr	r3, [r7, #20]
    5daa:	0018      	movs	r0, r3
    5dac:	4b49      	ldr	r3, [pc, #292]	; (5ed4 <_i2c_master_interrupt_handler+0x26c>)
    5dae:	4798      	blx	r3
    5db0:	e003      	b.n	5dba <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    5db2:	697b      	ldr	r3, [r7, #20]
    5db4:	0018      	movs	r0, r3
    5db6:	4b48      	ldr	r3, [pc, #288]	; (5ed8 <_i2c_master_interrupt_handler+0x270>)
    5db8:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5dba:	697b      	ldr	r3, [r7, #20]
    5dbc:	8b5b      	ldrh	r3, [r3, #26]
    5dbe:	b29b      	uxth	r3, r3
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d047      	beq.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
    5dc4:	697b      	ldr	r3, [r7, #20]
    5dc6:	8b9b      	ldrh	r3, [r3, #28]
    5dc8:	b29b      	uxth	r3, r3
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d142      	bne.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    5dce:	697b      	ldr	r3, [r7, #20]
    5dd0:	2225      	movs	r2, #37	; 0x25
    5dd2:	5c9b      	ldrb	r3, [r3, r2]
    5dd4:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5dd6:	2b05      	cmp	r3, #5
    5dd8:	d13c      	bne.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    5dda:	697b      	ldr	r3, [r7, #20]
    5ddc:	2224      	movs	r2, #36	; 0x24
    5dde:	5c9b      	ldrb	r3, [r3, r2]
    5de0:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    5de2:	2b01      	cmp	r3, #1
    5de4:	d136      	bne.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5de6:	693b      	ldr	r3, [r7, #16]
    5de8:	7e1b      	ldrb	r3, [r3, #24]
    5dea:	b2db      	uxtb	r3, r3
    5dec:	001a      	movs	r2, r3
    5dee:	2302      	movs	r3, #2
    5df0:	4013      	ands	r3, r2
    5df2:	d002      	beq.n	5dfa <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5df4:	693b      	ldr	r3, [r7, #16]
    5df6:	2202      	movs	r2, #2
    5df8:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    5dfa:	693b      	ldr	r3, [r7, #16]
    5dfc:	2203      	movs	r2, #3
    5dfe:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    5e00:	697b      	ldr	r3, [r7, #20]
    5e02:	2200      	movs	r2, #0
    5e04:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    5e06:	697b      	ldr	r3, [r7, #20]
    5e08:	2225      	movs	r2, #37	; 0x25
    5e0a:	2100      	movs	r1, #0
    5e0c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    5e0e:	230e      	movs	r3, #14
    5e10:	18fb      	adds	r3, r7, r3
    5e12:	781b      	ldrb	r3, [r3, #0]
    5e14:	2202      	movs	r2, #2
    5e16:	4013      	ands	r3, r2
    5e18:	d00b      	beq.n	5e32 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    5e1a:	697b      	ldr	r3, [r7, #20]
    5e1c:	2224      	movs	r2, #36	; 0x24
    5e1e:	5c9b      	ldrb	r3, [r3, r2]
    5e20:	b2db      	uxtb	r3, r3
    5e22:	2b01      	cmp	r3, #1
    5e24:	d105      	bne.n	5e32 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    5e26:	697b      	ldr	r3, [r7, #20]
    5e28:	691b      	ldr	r3, [r3, #16]
    5e2a:	697a      	ldr	r2, [r7, #20]
    5e2c:	0010      	movs	r0, r2
    5e2e:	4798      	blx	r3
    5e30:	e010      	b.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    5e32:	230e      	movs	r3, #14
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	2201      	movs	r2, #1
    5e3a:	4013      	ands	r3, r2
    5e3c:	d00a      	beq.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5e3e:	697b      	ldr	r3, [r7, #20]
    5e40:	2224      	movs	r2, #36	; 0x24
    5e42:	5c9b      	ldrb	r3, [r3, r2]
    5e44:	b2db      	uxtb	r3, r3
    5e46:	2b00      	cmp	r3, #0
    5e48:	d104      	bne.n	5e54 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5e4a:	697b      	ldr	r3, [r7, #20]
    5e4c:	68db      	ldr	r3, [r3, #12]
    5e4e:	697a      	ldr	r2, [r7, #20]
    5e50:	0010      	movs	r0, r2
    5e52:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    5e54:	697b      	ldr	r3, [r7, #20]
    5e56:	2225      	movs	r2, #37	; 0x25
    5e58:	5c9b      	ldrb	r3, [r3, r2]
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	2b05      	cmp	r3, #5
    5e5e:	d02e      	beq.n	5ebe <_i2c_master_interrupt_handler+0x256>
    5e60:	697b      	ldr	r3, [r7, #20]
    5e62:	2225      	movs	r2, #37	; 0x25
    5e64:	5c9b      	ldrb	r3, [r3, r2]
    5e66:	b2db      	uxtb	r3, r3
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d028      	beq.n	5ebe <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    5e6c:	693b      	ldr	r3, [r7, #16]
    5e6e:	2203      	movs	r2, #3
    5e70:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5e72:	697b      	ldr	r3, [r7, #20]
    5e74:	2200      	movs	r2, #0
    5e76:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    5e78:	697b      	ldr	r3, [r7, #20]
    5e7a:	2200      	movs	r2, #0
    5e7c:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5e7e:	697b      	ldr	r3, [r7, #20]
    5e80:	2225      	movs	r2, #37	; 0x25
    5e82:	5c9b      	ldrb	r3, [r3, r2]
    5e84:	b2db      	uxtb	r3, r3
    5e86:	2b41      	cmp	r3, #65	; 0x41
    5e88:	d00e      	beq.n	5ea8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    5e8a:	697b      	ldr	r3, [r7, #20]
    5e8c:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d00a      	beq.n	5ea8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    5e92:	697b      	ldr	r3, [r7, #20]
    5e94:	0018      	movs	r0, r3
    5e96:	4b0e      	ldr	r3, [pc, #56]	; (5ed0 <_i2c_master_interrupt_handler+0x268>)
    5e98:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    5e9a:	693b      	ldr	r3, [r7, #16]
    5e9c:	685b      	ldr	r3, [r3, #4]
    5e9e:	22e0      	movs	r2, #224	; 0xe0
    5ea0:	02d2      	lsls	r2, r2, #11
    5ea2:	431a      	orrs	r2, r3
    5ea4:	693b      	ldr	r3, [r7, #16]
    5ea6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    5ea8:	230e      	movs	r3, #14
    5eaa:	18fb      	adds	r3, r7, r3
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	2204      	movs	r2, #4
    5eb0:	4013      	ands	r3, r2
    5eb2:	d004      	beq.n	5ebe <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    5eb4:	697b      	ldr	r3, [r7, #20]
    5eb6:	695b      	ldr	r3, [r3, #20]
    5eb8:	697a      	ldr	r2, [r7, #20]
    5eba:	0010      	movs	r0, r2
    5ebc:	4798      	blx	r3
		}
	}
}
    5ebe:	46c0      	nop			; (mov r8, r8)
    5ec0:	46bd      	mov	sp, r7
    5ec2:	b006      	add	sp, #24
    5ec4:	bd80      	pop	{r7, pc}
    5ec6:	46c0      	nop			; (mov r8, r8)
    5ec8:	200015d4 	.word	0x200015d4
    5ecc:	00005bad 	.word	0x00005bad
    5ed0:	00005a1d 	.word	0x00005a1d
    5ed4:	00005b31 	.word	0x00005b31
    5ed8:	00005a41 	.word	0x00005a41

00005edc <system_apb_clock_set_mask>:
{
    5edc:	b580      	push	{r7, lr}
    5ede:	b082      	sub	sp, #8
    5ee0:	af00      	add	r7, sp, #0
    5ee2:	0002      	movs	r2, r0
    5ee4:	6039      	str	r1, [r7, #0]
    5ee6:	1dfb      	adds	r3, r7, #7
    5ee8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5eea:	1dfb      	adds	r3, r7, #7
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	2b04      	cmp	r3, #4
    5ef0:	d827      	bhi.n	5f42 <system_apb_clock_set_mask+0x66>
    5ef2:	009a      	lsls	r2, r3, #2
    5ef4:	4b16      	ldr	r3, [pc, #88]	; (5f50 <system_apb_clock_set_mask+0x74>)
    5ef6:	18d3      	adds	r3, r2, r3
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    5efc:	4b15      	ldr	r3, [pc, #84]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5efe:	4a15      	ldr	r2, [pc, #84]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f00:	6951      	ldr	r1, [r2, #20]
    5f02:	683a      	ldr	r2, [r7, #0]
    5f04:	430a      	orrs	r2, r1
    5f06:	615a      	str	r2, [r3, #20]
			break;
    5f08:	e01d      	b.n	5f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    5f0a:	4b12      	ldr	r3, [pc, #72]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f0c:	4a11      	ldr	r2, [pc, #68]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f0e:	6991      	ldr	r1, [r2, #24]
    5f10:	683a      	ldr	r2, [r7, #0]
    5f12:	430a      	orrs	r2, r1
    5f14:	619a      	str	r2, [r3, #24]
			break;
    5f16:	e016      	b.n	5f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    5f18:	4b0e      	ldr	r3, [pc, #56]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f1a:	4a0e      	ldr	r2, [pc, #56]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f1c:	69d1      	ldr	r1, [r2, #28]
    5f1e:	683a      	ldr	r2, [r7, #0]
    5f20:	430a      	orrs	r2, r1
    5f22:	61da      	str	r2, [r3, #28]
			break;
    5f24:	e00f      	b.n	5f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    5f26:	4b0b      	ldr	r3, [pc, #44]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f28:	4a0a      	ldr	r2, [pc, #40]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f2a:	6a11      	ldr	r1, [r2, #32]
    5f2c:	683a      	ldr	r2, [r7, #0]
    5f2e:	430a      	orrs	r2, r1
    5f30:	621a      	str	r2, [r3, #32]
			break;
    5f32:	e008      	b.n	5f46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    5f34:	4b07      	ldr	r3, [pc, #28]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f36:	4a07      	ldr	r2, [pc, #28]	; (5f54 <system_apb_clock_set_mask+0x78>)
    5f38:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5f3a:	683a      	ldr	r2, [r7, #0]
    5f3c:	430a      	orrs	r2, r1
    5f3e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    5f40:	e001      	b.n	5f46 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    5f42:	2317      	movs	r3, #23
    5f44:	e000      	b.n	5f48 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    5f46:	2300      	movs	r3, #0
}
    5f48:	0018      	movs	r0, r3
    5f4a:	46bd      	mov	sp, r7
    5f4c:	b002      	add	sp, #8
    5f4e:	bd80      	pop	{r7, pc}
    5f50:	0001c594 	.word	0x0001c594
    5f54:	40000400 	.word	0x40000400

00005f58 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b082      	sub	sp, #8
    5f5c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5f5e:	4b06      	ldr	r3, [pc, #24]	; (5f78 <wdt_is_syncing+0x20>)
    5f60:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
    5f62:	687b      	ldr	r3, [r7, #4]
    5f64:	689b      	ldr	r3, [r3, #8]
    5f66:	2b00      	cmp	r3, #0
    5f68:	d001      	beq.n	5f6e <wdt_is_syncing+0x16>
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
#endif
		return true;
    5f6a:	2301      	movs	r3, #1
    5f6c:	e000      	b.n	5f70 <wdt_is_syncing+0x18>
	}

	return false;
    5f6e:	2300      	movs	r3, #0
}
    5f70:	0018      	movs	r0, r3
    5f72:	46bd      	mov	sp, r7
    5f74:	b002      	add	sp, #8
    5f76:	bd80      	pop	{r7, pc}
    5f78:	40001c00 	.word	0x40001c00

00005f7c <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	b082      	sub	sp, #8
    5f80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5f82:	4b07      	ldr	r3, [pc, #28]	; (5fa0 <wdt_is_locked+0x24>)
    5f84:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	b2db      	uxtb	r3, r3
    5f8c:	001a      	movs	r2, r3
    5f8e:	2380      	movs	r3, #128	; 0x80
    5f90:	4013      	ands	r3, r2
    5f92:	1e5a      	subs	r2, r3, #1
    5f94:	4193      	sbcs	r3, r2
    5f96:	b2db      	uxtb	r3, r3
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
#endif
}
    5f98:	0018      	movs	r0, r3
    5f9a:	46bd      	mov	sp, r7
    5f9c:	b002      	add	sp, #8
    5f9e:	bd80      	pop	{r7, pc}
    5fa0:	40001c00 	.word	0x40001c00

00005fa4 <wdt_set_config>:
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b084      	sub	sp, #16
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    5fac:	4b47      	ldr	r3, [pc, #284]	; (60cc <wdt_set_config+0x128>)
    5fae:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);
    5fb0:	2180      	movs	r1, #128	; 0x80
    5fb2:	2000      	movs	r0, #0
    5fb4:	4b46      	ldr	r3, [pc, #280]	; (60d0 <wdt_set_config+0x12c>)
    5fb6:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    5fb8:	4b46      	ldr	r3, [pc, #280]	; (60d4 <wdt_set_config+0x130>)
    5fba:	4798      	blx	r3
    5fbc:	1e03      	subs	r3, r0, #0
    5fbe:	d001      	beq.n	5fc4 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    5fc0:	2310      	movs	r3, #16
    5fc2:	e07e      	b.n	60c2 <wdt_set_config+0x11e>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	789b      	ldrb	r3, [r3, #2]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d101      	bne.n	5fd0 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    5fcc:	2317      	movs	r3, #23
    5fce:	e078      	b.n	60c2 <wdt_set_config+0x11e>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	789a      	ldrb	r2, [r3, #2]
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	78db      	ldrb	r3, [r3, #3]
    5fd8:	429a      	cmp	r2, r3
    5fda:	d305      	bcc.n	5fe8 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	789a      	ldrb	r2, [r3, #2]
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	791b      	ldrb	r3, [r3, #4]
	if ((config->timeout_period < config->window_period) ||
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d201      	bcs.n	5fec <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    5fe8:	2317      	movs	r3, #23
    5fea:	e06a      	b.n	60c2 <wdt_set_config+0x11e>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    5fec:	68bb      	ldr	r3, [r7, #8]
    5fee:	781b      	ldrb	r3, [r3, #0]
    5ff0:	b2db      	uxtb	r3, r3
    5ff2:	2202      	movs	r2, #2
    5ff4:	4393      	bics	r3, r2
    5ff6:	b2da      	uxtb	r2, r3
    5ff8:	68bb      	ldr	r3, [r7, #8]
    5ffa:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    5ffc:	46c0      	nop			; (mov r8, r8)
    5ffe:	4b36      	ldr	r3, [pc, #216]	; (60d8 <wdt_set_config+0x134>)
    6000:	4798      	blx	r3
    6002:	1e03      	subs	r3, r0, #0
    6004:	d1fb      	bne.n	5ffe <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	785b      	ldrb	r3, [r3, #1]
    600a:	2201      	movs	r2, #1
    600c:	4053      	eors	r3, r2
    600e:	b2db      	uxtb	r3, r3
    6010:	2b00      	cmp	r3, #0
    6012:	d001      	beq.n	6018 <wdt_set_config+0x74>
		return STATUS_OK;
    6014:	2300      	movs	r3, #0
    6016:	e054      	b.n	60c2 <wdt_set_config+0x11e>
	}

	uint32_t new_config = 0;
    6018:	2300      	movs	r3, #0
    601a:	60fb      	str	r3, [r7, #12]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	789b      	ldrb	r3, [r3, #2]
    6020:	3b01      	subs	r3, #1
    6022:	001a      	movs	r2, r3
    6024:	68fb      	ldr	r3, [r7, #12]
    6026:	4313      	orrs	r3, r2
    6028:	60fb      	str	r3, [r7, #12]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	78db      	ldrb	r3, [r3, #3]
    602e:	2b00      	cmp	r3, #0
    6030:	d010      	beq.n	6054 <wdt_set_config+0xb0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    6032:	68bb      	ldr	r3, [r7, #8]
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	b2db      	uxtb	r3, r3
    6038:	2204      	movs	r2, #4
    603a:	4313      	orrs	r3, r2
    603c:	b2da      	uxtb	r2, r3
    603e:	68bb      	ldr	r3, [r7, #8]
    6040:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	78db      	ldrb	r3, [r3, #3]
    6046:	3b01      	subs	r3, #1
    6048:	011b      	lsls	r3, r3, #4
    604a:	001a      	movs	r2, r3
    604c:	68fb      	ldr	r3, [r7, #12]
    604e:	4313      	orrs	r3, r2
    6050:	60fb      	str	r3, [r7, #12]
    6052:	e007      	b.n	6064 <wdt_set_config+0xc0>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    6054:	68bb      	ldr	r3, [r7, #8]
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	b2db      	uxtb	r3, r3
    605a:	2204      	movs	r2, #4
    605c:	4393      	bics	r3, r2
    605e:	b2da      	uxtb	r2, r3
    6060:	68bb      	ldr	r3, [r7, #8]
    6062:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    6064:	46c0      	nop			; (mov r8, r8)
    6066:	4b1c      	ldr	r3, [pc, #112]	; (60d8 <wdt_set_config+0x134>)
    6068:	4798      	blx	r3
    606a:	1e03      	subs	r3, r0, #0
    606c:	d1fb      	bne.n	6066 <wdt_set_config+0xc2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    606e:	68fb      	ldr	r3, [r7, #12]
    6070:	b2da      	uxtb	r2, r3
    6072:	68bb      	ldr	r3, [r7, #8]
    6074:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	791b      	ldrb	r3, [r3, #4]
    607a:	2b00      	cmp	r3, #0
    607c:	d005      	beq.n	608a <wdt_set_config+0xe6>
		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	791b      	ldrb	r3, [r3, #4]
    6082:	3b01      	subs	r3, #1
    6084:	b2da      	uxtb	r2, r3
    6086:	68bb      	ldr	r3, [r7, #8]
    6088:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	2b00      	cmp	r3, #0
    6090:	d009      	beq.n	60a6 <wdt_set_config+0x102>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    6092:	68bb      	ldr	r3, [r7, #8]
    6094:	781b      	ldrb	r3, [r3, #0]
    6096:	b2db      	uxtb	r3, r3
    6098:	2280      	movs	r2, #128	; 0x80
    609a:	4252      	negs	r2, r2
    609c:	4313      	orrs	r3, r2
    609e:	b2da      	uxtb	r2, r3
    60a0:	68bb      	ldr	r3, [r7, #8]
    60a2:	701a      	strb	r2, [r3, #0]
    60a4:	e007      	b.n	60b6 <wdt_set_config+0x112>
	} else {
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    60a6:	68bb      	ldr	r3, [r7, #8]
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	b2db      	uxtb	r3, r3
    60ac:	2202      	movs	r2, #2
    60ae:	4313      	orrs	r3, r2
    60b0:	b2da      	uxtb	r2, r3
    60b2:	68bb      	ldr	r3, [r7, #8]
    60b4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	4b07      	ldr	r3, [pc, #28]	; (60d8 <wdt_set_config+0x134>)
    60ba:	4798      	blx	r3
    60bc:	1e03      	subs	r3, r0, #0
    60be:	d1fb      	bne.n	60b8 <wdt_set_config+0x114>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b004      	add	sp, #16
    60c8:	bd80      	pop	{r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	40001c00 	.word	0x40001c00
    60d0:	00005edd 	.word	0x00005edd
    60d4:	00005f7d 	.word	0x00005f7d
    60d8:	00005f59 	.word	0x00005f59

000060dc <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    60e2:	4b07      	ldr	r3, [pc, #28]	; (6100 <wdt_reset_count+0x24>)
    60e4:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    60e6:	687b      	ldr	r3, [r7, #4]
    60e8:	22a5      	movs	r2, #165	; 0xa5
    60ea:	731a      	strb	r2, [r3, #12]

	while (wdt_is_syncing()) {
    60ec:	46c0      	nop			; (mov r8, r8)
    60ee:	4b05      	ldr	r3, [pc, #20]	; (6104 <wdt_reset_count+0x28>)
    60f0:	4798      	blx	r3
    60f2:	1e03      	subs	r3, r0, #0
    60f4:	d1fb      	bne.n	60ee <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	46bd      	mov	sp, r7
    60fa:	b002      	add	sp, #8
    60fc:	bd80      	pop	{r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	40001c00 	.word	0x40001c00
    6104:	00005f59 	.word	0x00005f59

00006108 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    6108:	b580      	push	{r7, lr}
    610a:	b082      	sub	sp, #8
    610c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    610e:	4b04      	ldr	r3, [pc, #16]	; (6120 <wdt_clear_early_warning+0x18>)
    6110:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	2201      	movs	r2, #1
    6116:	719a      	strb	r2, [r3, #6]
}
    6118:	46c0      	nop			; (mov r8, r8)
    611a:	46bd      	mov	sp, r7
    611c:	b002      	add	sp, #8
    611e:	bd80      	pop	{r7, pc}
    6120:	40001c00 	.word	0x40001c00

00006124 <system_interrupt_enable>:
{
    6124:	b580      	push	{r7, lr}
    6126:	b082      	sub	sp, #8
    6128:	af00      	add	r7, sp, #0
    612a:	0002      	movs	r2, r0
    612c:	1dfb      	adds	r3, r7, #7
    612e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6130:	4b06      	ldr	r3, [pc, #24]	; (614c <system_interrupt_enable+0x28>)
    6132:	1dfa      	adds	r2, r7, #7
    6134:	7812      	ldrb	r2, [r2, #0]
    6136:	0011      	movs	r1, r2
    6138:	221f      	movs	r2, #31
    613a:	400a      	ands	r2, r1
    613c:	2101      	movs	r1, #1
    613e:	4091      	lsls	r1, r2
    6140:	000a      	movs	r2, r1
    6142:	601a      	str	r2, [r3, #0]
}
    6144:	46c0      	nop			; (mov r8, r8)
    6146:	46bd      	mov	sp, r7
    6148:	b002      	add	sp, #8
    614a:	bd80      	pop	{r7, pc}
    614c:	e000e100 	.word	0xe000e100

00006150 <wdt_register_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_register_callback(
		const wdt_callback_t callback,
		const enum wdt_callback type)
{
    6150:	b580      	push	{r7, lr}
    6152:	b082      	sub	sp, #8
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
    6158:	000a      	movs	r2, r1
    615a:	1cfb      	adds	r3, r7, #3
    615c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
    615e:	1cfb      	adds	r3, r7, #3
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d104      	bne.n	6170 <wdt_register_callback+0x20>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
    6166:	4b05      	ldr	r3, [pc, #20]	; (617c <wdt_register_callback+0x2c>)
    6168:	687a      	ldr	r2, [r7, #4]
    616a:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
    616c:	2300      	movs	r3, #0
    616e:	e000      	b.n	6172 <wdt_register_callback+0x22>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6170:	2317      	movs	r3, #23
	}
}
    6172:	0018      	movs	r0, r3
    6174:	46bd      	mov	sp, r7
    6176:	b002      	add	sp, #8
    6178:	bd80      	pop	{r7, pc}
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	20000b8c 	.word	0x20000b8c

00006180 <wdt_enable_callback>:
 * \retval STATUS_OK               The callback was enabled successfully
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
    6180:	b580      	push	{r7, lr}
    6182:	b084      	sub	sp, #16
    6184:	af00      	add	r7, sp, #0
    6186:	0002      	movs	r2, r0
    6188:	1dfb      	adds	r3, r7, #7
    618a:	701a      	strb	r2, [r3, #0]
	Wdt *const WDT_module = WDT;
    618c:	4b09      	ldr	r3, [pc, #36]	; (61b4 <wdt_enable_callback+0x34>)
    618e:	60fb      	str	r3, [r7, #12]

	switch (type)
    6190:	1dfb      	adds	r3, r7, #7
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	2b00      	cmp	r3, #0
    6196:	d107      	bne.n	61a8 <wdt_enable_callback+0x28>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
    6198:	68fb      	ldr	r3, [r7, #12]
    619a:	2201      	movs	r2, #1
    619c:	715a      	strb	r2, [r3, #5]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
    619e:	2001      	movs	r0, #1
    61a0:	4b05      	ldr	r3, [pc, #20]	; (61b8 <wdt_enable_callback+0x38>)
    61a2:	4798      	blx	r3
		return STATUS_OK;
    61a4:	2300      	movs	r3, #0
    61a6:	e000      	b.n	61aa <wdt_enable_callback+0x2a>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    61a8:	2317      	movs	r3, #23
	}
}
    61aa:	0018      	movs	r0, r3
    61ac:	46bd      	mov	sp, r7
    61ae:	b004      	add	sp, #16
    61b0:	bd80      	pop	{r7, pc}
    61b2:	46c0      	nop			; (mov r8, r8)
    61b4:	40001c00 	.word	0x40001c00
    61b8:	00006125 	.word	0x00006125

000061bc <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    61bc:	b580      	push	{r7, lr}
    61be:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    61c0:	4b05      	ldr	r3, [pc, #20]	; (61d8 <WDT_Handler+0x1c>)
    61c2:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    61c4:	4b05      	ldr	r3, [pc, #20]	; (61dc <WDT_Handler+0x20>)
    61c6:	681b      	ldr	r3, [r3, #0]
    61c8:	2b00      	cmp	r3, #0
    61ca:	d002      	beq.n	61d2 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    61cc:	4b03      	ldr	r3, [pc, #12]	; (61dc <WDT_Handler+0x20>)
    61ce:	681b      	ldr	r3, [r3, #0]
    61d0:	4798      	blx	r3
	}
}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	46bd      	mov	sp, r7
    61d6:	bd80      	pop	{r7, pc}
    61d8:	00006109 	.word	0x00006109
    61dc:	20000b8c 	.word	0x20000b8c

000061e0 <aws_iot_mqtt_publish>:
			rc = SUBSCRIBE_ERROR;
	}
	return rc;
}

IoT_Error_t aws_iot_mqtt_publish(MQTTPublishParams *pParams) {
    61e0:	b580      	push	{r7, lr}
    61e2:	b088      	sub	sp, #32
    61e4:	af00      	add	r7, sp, #0
    61e6:	6078      	str	r0, [r7, #4]
	IoT_Error_t rc = NONE_ERROR;
    61e8:	231f      	movs	r3, #31
    61ea:	18fb      	adds	r3, r7, r3
    61ec:	2200      	movs	r2, #0
    61ee:	701a      	strb	r2, [r3, #0]

	MQTTMessage Message;
	Message.dup = pParams->MessageParams.isDuplicate;
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	799b      	ldrb	r3, [r3, #6]
    61f4:	001a      	movs	r2, r3
    61f6:	230c      	movs	r3, #12
    61f8:	18fb      	adds	r3, r7, r3
    61fa:	709a      	strb	r2, [r3, #2]
	Message.id = pParams->MessageParams.id;
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	891a      	ldrh	r2, [r3, #8]
    6200:	230c      	movs	r3, #12
    6202:	18fb      	adds	r3, r7, r3
    6204:	809a      	strh	r2, [r3, #4]
	Message.payload = pParams->MessageParams.pPayload;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	68da      	ldr	r2, [r3, #12]
    620a:	230c      	movs	r3, #12
    620c:	18fb      	adds	r3, r7, r3
    620e:	609a      	str	r2, [r3, #8]
	Message.payloadlen = pParams->MessageParams.PayloadLen;
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	691a      	ldr	r2, [r3, #16]
    6214:	230c      	movs	r3, #12
    6216:	18fb      	adds	r3, r7, r3
    6218:	60da      	str	r2, [r3, #12]
	Message.qos = (enum QoS)pParams->MessageParams.qos;
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	791a      	ldrb	r2, [r3, #4]
    621e:	230c      	movs	r3, #12
    6220:	18fb      	adds	r3, r7, r3
    6222:	701a      	strb	r2, [r3, #0]
	Message.retained = pParams->MessageParams.isRetained;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	795b      	ldrb	r3, [r3, #5]
    6228:	001a      	movs	r2, r3
    622a:	230c      	movs	r3, #12
    622c:	18fb      	adds	r3, r7, r3
    622e:	705a      	strb	r2, [r3, #1]

	if(0 != MQTTPublish(&c, pParams->pTopic, &Message)){
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	6819      	ldr	r1, [r3, #0]
    6234:	230c      	movs	r3, #12
    6236:	18fa      	adds	r2, r7, r3
    6238:	4b08      	ldr	r3, [pc, #32]	; (625c <aws_iot_mqtt_publish+0x7c>)
    623a:	0018      	movs	r0, r3
    623c:	4b08      	ldr	r3, [pc, #32]	; (6260 <aws_iot_mqtt_publish+0x80>)
    623e:	4798      	blx	r3
    6240:	1e03      	subs	r3, r0, #0
    6242:	d003      	beq.n	624c <aws_iot_mqtt_publish+0x6c>
		rc = PUBLISH_ERROR;
    6244:	231f      	movs	r3, #31
    6246:	18fb      	adds	r3, r7, r3
    6248:	22fb      	movs	r2, #251	; 0xfb
    624a:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    624c:	231f      	movs	r3, #31
    624e:	18fb      	adds	r3, r7, r3
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	b25b      	sxtb	r3, r3
}
    6254:	0018      	movs	r0, r3
    6256:	46bd      	mov	sp, r7
    6258:	b008      	add	sp, #32
    625a:	bd80      	pop	{r7, pc}
    625c:	200005d4 	.word	0x200005d4
    6260:	00007615 	.word	0x00007615

00006264 <aws_iot_mqtt_yield>:
	}

	return rc;
}

IoT_Error_t aws_iot_mqtt_yield(int timeout) {
    6264:	b590      	push	{r4, r7, lr}
    6266:	b085      	sub	sp, #20
    6268:	af00      	add	r7, sp, #0
    626a:	6078      	str	r0, [r7, #4]
	MQTTReturnCode pahoRc = MQTTYield(&c, timeout);
    626c:	687a      	ldr	r2, [r7, #4]
    626e:	230e      	movs	r3, #14
    6270:	18fc      	adds	r4, r7, r3
    6272:	4b37      	ldr	r3, [pc, #220]	; (6350 <aws_iot_mqtt_yield+0xec>)
    6274:	0011      	movs	r1, r2
    6276:	0018      	movs	r0, r3
    6278:	4b36      	ldr	r3, [pc, #216]	; (6354 <aws_iot_mqtt_yield+0xf0>)
    627a:	4798      	blx	r3
    627c:	0003      	movs	r3, r0
    627e:	7023      	strb	r3, [r4, #0]
	IoT_Error_t rc = NONE_ERROR;
    6280:	230f      	movs	r3, #15
    6282:	18fb      	adds	r3, r7, r3
    6284:	2200      	movs	r2, #0
    6286:	701a      	strb	r2, [r3, #0]
	if(MQTT_NETWORK_RECONNECTED == pahoRc){
    6288:	230e      	movs	r3, #14
    628a:	18fb      	adds	r3, r7, r3
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	b25b      	sxtb	r3, r3
    6290:	2b01      	cmp	r3, #1
    6292:	d104      	bne.n	629e <aws_iot_mqtt_yield+0x3a>
		rc = RECONNECT_SUCCESSFUL;
    6294:	230f      	movs	r3, #15
    6296:	18fb      	adds	r3, r7, r3
    6298:	2201      	movs	r2, #1
    629a:	701a      	strb	r2, [r3, #0]
    629c:	e050      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(SUCCESS == pahoRc){
    629e:	230e      	movs	r3, #14
    62a0:	18fb      	adds	r3, r7, r3
    62a2:	781b      	ldrb	r3, [r3, #0]
    62a4:	b25b      	sxtb	r3, r3
    62a6:	2b00      	cmp	r3, #0
    62a8:	d104      	bne.n	62b4 <aws_iot_mqtt_yield+0x50>
		rc = NONE_ERROR;
    62aa:	230f      	movs	r3, #15
    62ac:	18fb      	adds	r3, r7, r3
    62ae:	2200      	movs	r2, #0
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	e045      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_NULL_VALUE_ERROR == pahoRc) {
    62b4:	230e      	movs	r3, #14
    62b6:	18fb      	adds	r3, r7, r3
    62b8:	781b      	ldrb	r3, [r3, #0]
    62ba:	b25b      	sxtb	r3, r3
    62bc:	3306      	adds	r3, #6
    62be:	d104      	bne.n	62ca <aws_iot_mqtt_yield+0x66>
		rc = NULL_VALUE_ERROR;
    62c0:	230f      	movs	r3, #15
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	22fe      	movs	r2, #254	; 0xfe
    62c6:	701a      	strb	r2, [r3, #0]
    62c8:	e03a      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_NETWORK_DISCONNECTED_ERROR == pahoRc) {
    62ca:	230e      	movs	r3, #14
    62cc:	18fb      	adds	r3, r7, r3
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	b25b      	sxtb	r3, r3
    62d2:	3304      	adds	r3, #4
    62d4:	d104      	bne.n	62e0 <aws_iot_mqtt_yield+0x7c>
		rc = NETWORK_DISCONNECTED;
    62d6:	230f      	movs	r3, #15
    62d8:	18fb      	adds	r3, r7, r3
    62da:	22e9      	movs	r2, #233	; 0xe9
    62dc:	701a      	strb	r2, [r3, #0]
    62de:	e02f      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_RECONNECT_TIMED_OUT == pahoRc) {
    62e0:	230e      	movs	r3, #14
    62e2:	18fb      	adds	r3, r7, r3
    62e4:	781b      	ldrb	r3, [r3, #0]
    62e6:	b25b      	sxtb	r3, r3
    62e8:	3308      	adds	r3, #8
    62ea:	d104      	bne.n	62f6 <aws_iot_mqtt_yield+0x92>
		rc = NETWORK_RECONNECT_TIMED_OUT;
    62ec:	230f      	movs	r3, #15
    62ee:	18fb      	adds	r3, r7, r3
    62f0:	22e8      	movs	r2, #232	; 0xe8
    62f2:	701a      	strb	r2, [r3, #0]
    62f4:	e024      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_ATTEMPTING_RECONNECT == pahoRc) {
    62f6:	230e      	movs	r3, #14
    62f8:	18fb      	adds	r3, r7, r3
    62fa:	781b      	ldrb	r3, [r3, #0]
    62fc:	b25b      	sxtb	r3, r3
    62fe:	2b03      	cmp	r3, #3
    6300:	d104      	bne.n	630c <aws_iot_mqtt_yield+0xa8>
		rc = NETWORK_ATTEMPTING_RECONNECT;
    6302:	230f      	movs	r3, #15
    6304:	18fb      	adds	r3, r7, r3
    6306:	22e7      	movs	r2, #231	; 0xe7
    6308:	701a      	strb	r2, [r3, #0]
    630a:	e019      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_BUFFER_RX_MESSAGE_INVALID == pahoRc){
    630c:	230e      	movs	r3, #14
    630e:	18fb      	adds	r3, r7, r3
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	b25b      	sxtb	r3, r3
    6314:	3312      	adds	r3, #18
    6316:	d104      	bne.n	6322 <aws_iot_mqtt_yield+0xbe>
		rc = RX_MESSAGE_INVALID;
    6318:	230f      	movs	r3, #15
    631a:	18fb      	adds	r3, r7, r3
    631c:	22e5      	movs	r2, #229	; 0xe5
    631e:	701a      	strb	r2, [r3, #0]
    6320:	e00e      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTTPACKET_BUFFER_TOO_SHORT == pahoRc){
    6322:	230e      	movs	r3, #14
    6324:	18fb      	adds	r3, r7, r3
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	b25b      	sxtb	r3, r3
    632a:	3309      	adds	r3, #9
    632c:	d104      	bne.n	6338 <aws_iot_mqtt_yield+0xd4>
		rc = RX_MESSAGE_BIGGER_THAN_MQTT_RX_BUF;
    632e:	230f      	movs	r3, #15
    6330:	18fb      	adds	r3, r7, r3
    6332:	22e4      	movs	r2, #228	; 0xe4
    6334:	701a      	strb	r2, [r3, #0]
    6336:	e003      	b.n	6340 <aws_iot_mqtt_yield+0xdc>
	} else {
		rc = YIELD_ERROR;
    6338:	230f      	movs	r3, #15
    633a:	18fb      	adds	r3, r7, r3
    633c:	22f9      	movs	r2, #249	; 0xf9
    633e:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    6340:	230f      	movs	r3, #15
    6342:	18fb      	adds	r3, r7, r3
    6344:	781b      	ldrb	r3, [r3, #0]
    6346:	b25b      	sxtb	r3, r3
}
    6348:	0018      	movs	r0, r3
    634a:	46bd      	mov	sp, r7
    634c:	b005      	add	sp, #20
    634e:	bd90      	pop	{r4, r7, pc}
    6350:	200005d4 	.word	0x200005d4
    6354:	00007011 	.word	0x00007011

00006358 <getTimeInMillis>:

#include "timer_d21.h"
#include "stdio.h"
#include "AWS_SDK/aws_iot_src/protocol/mqtt/aws_iot_embedded_client_wrapper/timer_interface.h"
static uint32_t getTimeInMillis(void)
{
    6358:	b580      	push	{r7, lr}
    635a:	af00      	add	r7, sp, #0
	return ms_ticks;
    635c:	4b02      	ldr	r3, [pc, #8]	; (6368 <getTimeInMillis+0x10>)
    635e:	681b      	ldr	r3, [r3, #0]
}
    6360:	0018      	movs	r0, r3
    6362:	46bd      	mov	sp, r7
    6364:	bd80      	pop	{r7, pc}
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	200008d8 	.word	0x200008d8

0000636c <expired>:

char expired(Timer *timer)
{
    636c:	b580      	push	{r7, lr}
    636e:	b082      	sub	sp, #8
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
	return ((timer->end_time > 0)
    6374:	687b      	ldr	r3, [r7, #4]
    6376:	681b      	ldr	r3, [r3, #0]
	&& ((getTimeInMillis() + timer->offset) > timer->end_time));
    6378:	2b00      	cmp	r3, #0
    637a:	d00b      	beq.n	6394 <expired+0x28>
    637c:	4b08      	ldr	r3, [pc, #32]	; (63a0 <expired+0x34>)
    637e:	4798      	blx	r3
    6380:	0002      	movs	r2, r0
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	685b      	ldr	r3, [r3, #4]
    6386:	18d2      	adds	r2, r2, r3
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	681b      	ldr	r3, [r3, #0]
    638c:	429a      	cmp	r2, r3
    638e:	d901      	bls.n	6394 <expired+0x28>
    6390:	2301      	movs	r3, #1
    6392:	e000      	b.n	6396 <expired+0x2a>
    6394:	2300      	movs	r3, #0
    6396:	b2db      	uxtb	r3, r3
}
    6398:	0018      	movs	r0, r3
    639a:	46bd      	mov	sp, r7
    639c:	b002      	add	sp, #8
    639e:	bd80      	pop	{r7, pc}
    63a0:	00006359 	.word	0x00006359

000063a4 <countdown_ms>:

void countdown_ms(Timer *timer, unsigned int timeout)
{
    63a4:	b580      	push	{r7, lr}
    63a6:	b084      	sub	sp, #16
    63a8:	af00      	add	r7, sp, #0
    63aa:	6078      	str	r0, [r7, #4]
    63ac:	6039      	str	r1, [r7, #0]
	uint32_t timems = getTimeInMillis();
    63ae:	4b10      	ldr	r3, [pc, #64]	; (63f0 <countdown_ms+0x4c>)
    63b0:	4798      	blx	r3
    63b2:	0003      	movs	r3, r0
    63b4:	60fb      	str	r3, [r7, #12]

	timer->end_time = timems + timeout;
    63b6:	68fa      	ldr	r2, [r7, #12]
    63b8:	683b      	ldr	r3, [r7, #0]
    63ba:	18d2      	adds	r2, r2, r3
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	601a      	str	r2, [r3, #0]

	if (timer->end_time < timems) {
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	681a      	ldr	r2, [r3, #0]
    63c4:	68fb      	ldr	r3, [r7, #12]
    63c6:	429a      	cmp	r2, r3
    63c8:	d20b      	bcs.n	63e2 <countdown_ms+0x3e>
		timer->offset = ~0 - timems + 1;
    63ca:	68fb      	ldr	r3, [r7, #12]
    63cc:	425a      	negs	r2, r3
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	605a      	str	r2, [r3, #4]
		timer->end_time += timer->offset;
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	681a      	ldr	r2, [r3, #0]
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	685b      	ldr	r3, [r3, #4]
    63da:	18d2      	adds	r2, r2, r3
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	601a      	str	r2, [r3, #0]
	}
	else {
		timer->offset = 0;
	}
}
    63e0:	e002      	b.n	63e8 <countdown_ms+0x44>
		timer->offset = 0;
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	2200      	movs	r2, #0
    63e6:	605a      	str	r2, [r3, #4]
}
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	46bd      	mov	sp, r7
    63ec:	b004      	add	sp, #16
    63ee:	bd80      	pop	{r7, pc}
    63f0:	00006359 	.word	0x00006359

000063f4 <countdown>:

void countdown(Timer *timer, unsigned int timeout)
{
    63f4:	b580      	push	{r7, lr}
    63f6:	b084      	sub	sp, #16
    63f8:	af00      	add	r7, sp, #0
    63fa:	6078      	str	r0, [r7, #4]
    63fc:	6039      	str	r1, [r7, #0]
	uint32_t timems = getTimeInMillis();
    63fe:	4b12      	ldr	r3, [pc, #72]	; (6448 <countdown+0x54>)
    6400:	4798      	blx	r3
    6402:	0003      	movs	r3, r0
    6404:	60fb      	str	r3, [r7, #12]

	timer->end_time = timems + (timeout * 1000);
    6406:	683b      	ldr	r3, [r7, #0]
    6408:	22fa      	movs	r2, #250	; 0xfa
    640a:	0092      	lsls	r2, r2, #2
    640c:	435a      	muls	r2, r3
    640e:	68fb      	ldr	r3, [r7, #12]
    6410:	18d2      	adds	r2, r2, r3
    6412:	687b      	ldr	r3, [r7, #4]
    6414:	601a      	str	r2, [r3, #0]

	if (timer->end_time < timems) {
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	681a      	ldr	r2, [r3, #0]
    641a:	68fb      	ldr	r3, [r7, #12]
    641c:	429a      	cmp	r2, r3
    641e:	d20b      	bcs.n	6438 <countdown+0x44>
		timer->offset = ~0 - timems + 1;
    6420:	68fb      	ldr	r3, [r7, #12]
    6422:	425a      	negs	r2, r3
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	605a      	str	r2, [r3, #4]
		timer->end_time += timer->offset;
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	681a      	ldr	r2, [r3, #0]
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	685b      	ldr	r3, [r3, #4]
    6430:	18d2      	adds	r2, r2, r3
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	601a      	str	r2, [r3, #0]
	}
	else {
		timer->offset = 0;
	}
}
    6436:	e002      	b.n	643e <countdown+0x4a>
		timer->offset = 0;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	2200      	movs	r2, #0
    643c:	605a      	str	r2, [r3, #4]
}
    643e:	46c0      	nop			; (mov r8, r8)
    6440:	46bd      	mov	sp, r7
    6442:	b004      	add	sp, #16
    6444:	bd80      	pop	{r7, pc}
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	00006359 	.word	0x00006359

0000644c <left_ms>:

int left_ms(Timer *timer)
{
    644c:	b590      	push	{r4, r7, lr}
    644e:	b085      	sub	sp, #20
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
	int diff = timer->end_time - (getTimeInMillis() + timer->offset);
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	681c      	ldr	r4, [r3, #0]
    6458:	4b07      	ldr	r3, [pc, #28]	; (6478 <left_ms+0x2c>)
    645a:	4798      	blx	r3
    645c:	0002      	movs	r2, r0
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	685b      	ldr	r3, [r3, #4]
    6462:	18d3      	adds	r3, r2, r3
    6464:	1ae3      	subs	r3, r4, r3
    6466:	60fb      	str	r3, [r7, #12]
	return (diff > 0 ? diff : 0);
    6468:	68fb      	ldr	r3, [r7, #12]
    646a:	2b00      	cmp	r3, #0
    646c:	da00      	bge.n	6470 <left_ms+0x24>
    646e:	2300      	movs	r3, #0
}
    6470:	0018      	movs	r0, r3
    6472:	46bd      	mov	sp, r7
    6474:	b005      	add	sp, #20
    6476:	bd90      	pop	{r4, r7, pc}
    6478:	00006359 	.word	0x00006359

0000647c <InitTimer>:

void InitTimer(Timer *timer)
{
    647c:	b580      	push	{r7, lr}
    647e:	b082      	sub	sp, #8
    6480:	af00      	add	r7, sp, #0
    6482:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	2200      	movs	r2, #0
    6488:	601a      	str	r2, [r3, #0]
	timer->offset = 0;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	2200      	movs	r2, #0
    648e:	605a      	str	r2, [r3, #4]
    6490:	46c0      	nop			; (mov r8, r8)
    6492:	46bd      	mov	sp, r7
    6494:	b002      	add	sp, #8
    6496:	bd80      	pop	{r7, pc}

00006498 <NewMessageData>:
#include "timer_d21.h"
#include <string.h>

static void MQTTForceDisconnect(Client *c);

void NewMessageData(MessageData *md, MQTTString *aTopicName, MQTTMessage *aMessage, pApplicationHandler_t applicationHandler) {
    6498:	b580      	push	{r7, lr}
    649a:	b084      	sub	sp, #16
    649c:	af00      	add	r7, sp, #0
    649e:	60f8      	str	r0, [r7, #12]
    64a0:	60b9      	str	r1, [r7, #8]
    64a2:	607a      	str	r2, [r7, #4]
    64a4:	603b      	str	r3, [r7, #0]
    md->topicName = aTopicName;
    64a6:	68fb      	ldr	r3, [r7, #12]
    64a8:	68ba      	ldr	r2, [r7, #8]
    64aa:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
    64ac:	68fb      	ldr	r3, [r7, #12]
    64ae:	687a      	ldr	r2, [r7, #4]
    64b0:	601a      	str	r2, [r3, #0]
    md->applicationHandler = applicationHandler;
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	683a      	ldr	r2, [r7, #0]
    64b6:	609a      	str	r2, [r3, #8]
}
    64b8:	46c0      	nop			; (mov r8, r8)
    64ba:	46bd      	mov	sp, r7
    64bc:	b004      	add	sp, #16
    64be:	bd80      	pop	{r7, pc}

000064c0 <getNextPacketId>:

uint16_t getNextPacketId(Client *c) {
    64c0:	b580      	push	{r7, lr}
    64c2:	b082      	sub	sp, #8
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
    return c->nextPacketId = (uint16_t)((MAX_PACKET_ID == c->nextPacketId) ? 1 : (c->nextPacketId + 1));
    64c8:	687b      	ldr	r3, [r7, #4]
    64ca:	889b      	ldrh	r3, [r3, #4]
    64cc:	4a08      	ldr	r2, [pc, #32]	; (64f0 <getNextPacketId+0x30>)
    64ce:	4293      	cmp	r3, r2
    64d0:	d004      	beq.n	64dc <getNextPacketId+0x1c>
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	889b      	ldrh	r3, [r3, #4]
    64d6:	3301      	adds	r3, #1
    64d8:	b29a      	uxth	r2, r3
    64da:	e000      	b.n	64de <getNextPacketId+0x1e>
    64dc:	2201      	movs	r2, #1
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	809a      	strh	r2, [r3, #4]
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	889b      	ldrh	r3, [r3, #4]
}
    64e6:	0018      	movs	r0, r3
    64e8:	46bd      	mov	sp, r7
    64ea:	b002      	add	sp, #8
    64ec:	bd80      	pop	{r7, pc}
    64ee:	46c0      	nop			; (mov r8, r8)
    64f0:	0000ffff 	.word	0x0000ffff

000064f4 <sendPacket>:

MQTTReturnCode sendPacket(Client *c, uint32_t length, Timer *timer) {
    64f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64f6:	46c6      	mov	lr, r8
    64f8:	b500      	push	{lr}
    64fa:	b086      	sub	sp, #24
    64fc:	af00      	add	r7, sp, #0
    64fe:	60f8      	str	r0, [r7, #12]
    6500:	60b9      	str	r1, [r7, #8]
    6502:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    6504:	68fb      	ldr	r3, [r7, #12]
    6506:	2b00      	cmp	r3, #0
    6508:	d002      	beq.n	6510 <sendPacket+0x1c>
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	2b00      	cmp	r3, #0
    650e:	d102      	bne.n	6516 <sendPacket+0x22>
        return MQTT_NULL_VALUE_ERROR;
    6510:	2306      	movs	r3, #6
    6512:	425b      	negs	r3, r3
    6514:	e03d      	b.n	6592 <sendPacket+0x9e>
    }

    int32_t sentLen = 0;
    6516:	2300      	movs	r3, #0
    6518:	613b      	str	r3, [r7, #16]
    uint32_t sent = 0;
    651a:	2300      	movs	r3, #0
    651c:	617b      	str	r3, [r7, #20]

    if(length >= c->bufSize) {
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	699a      	ldr	r2, [r3, #24]
    6522:	68bb      	ldr	r3, [r7, #8]
    6524:	429a      	cmp	r2, r3
    6526:	d820      	bhi.n	656a <sendPacket+0x76>
    	return MQTTPACKET_BUFFER_TOO_SHORT;
    6528:	2309      	movs	r3, #9
    652a:	425b      	negs	r3, r3
    652c:	e031      	b.n	6592 <sendPacket+0x9e>
    }

    while(sent < length && !expired(timer)) {
        sentLen = c->networkStack.mqttwrite(&(c->networkStack), &c->buf[sent], (int)length, left_ms(timer));
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	22a4      	movs	r2, #164	; 0xa4
    6532:	589c      	ldr	r4, [r3, r2]
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	3398      	adds	r3, #152	; 0x98
    6538:	001d      	movs	r5, r3
    653a:	68fb      	ldr	r3, [r7, #12]
    653c:	6a1a      	ldr	r2, [r3, #32]
    653e:	697b      	ldr	r3, [r7, #20]
    6540:	18d6      	adds	r6, r2, r3
    6542:	68bb      	ldr	r3, [r7, #8]
    6544:	4698      	mov	r8, r3
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	0018      	movs	r0, r3
    654a:	4b15      	ldr	r3, [pc, #84]	; (65a0 <sendPacket+0xac>)
    654c:	4798      	blx	r3
    654e:	0003      	movs	r3, r0
    6550:	4642      	mov	r2, r8
    6552:	0031      	movs	r1, r6
    6554:	0028      	movs	r0, r5
    6556:	47a0      	blx	r4
    6558:	0003      	movs	r3, r0
    655a:	613b      	str	r3, [r7, #16]
        if(sentLen < 0) {
    655c:	693b      	ldr	r3, [r7, #16]
    655e:	2b00      	cmp	r3, #0
    6560:	db0e      	blt.n	6580 <sendPacket+0x8c>
            /* there was an error writing the data */
            break;
        }
        sent = sent + (uint32_t)sentLen;
    6562:	693b      	ldr	r3, [r7, #16]
    6564:	697a      	ldr	r2, [r7, #20]
    6566:	18d3      	adds	r3, r2, r3
    6568:	617b      	str	r3, [r7, #20]
    while(sent < length && !expired(timer)) {
    656a:	697a      	ldr	r2, [r7, #20]
    656c:	68bb      	ldr	r3, [r7, #8]
    656e:	429a      	cmp	r2, r3
    6570:	d207      	bcs.n	6582 <sendPacket+0x8e>
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	0018      	movs	r0, r3
    6576:	4b0b      	ldr	r3, [pc, #44]	; (65a4 <sendPacket+0xb0>)
    6578:	4798      	blx	r3
    657a:	1e03      	subs	r3, r0, #0
    657c:	d0d7      	beq.n	652e <sendPacket+0x3a>
    657e:	e000      	b.n	6582 <sendPacket+0x8e>
            break;
    6580:	46c0      	nop			; (mov r8, r8)
    }

    if(sent == length) {
    6582:	697a      	ldr	r2, [r7, #20]
    6584:	68bb      	ldr	r3, [r7, #8]
    6586:	429a      	cmp	r2, r3
    6588:	d101      	bne.n	658e <sendPacket+0x9a>
        /* record the fact that we have successfully sent the packet */
        //countdown(&c->pingTimer, c->keepAliveInterval);
        return SUCCESS;
    658a:	2300      	movs	r3, #0
    658c:	e001      	b.n	6592 <sendPacket+0x9e>
    }

    return FAILURE;
    658e:	2301      	movs	r3, #1
    6590:	425b      	negs	r3, r3
}
    6592:	0018      	movs	r0, r3
    6594:	46bd      	mov	sp, r7
    6596:	b006      	add	sp, #24
    6598:	bc04      	pop	{r2}
    659a:	4690      	mov	r8, r2
    659c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    659e:	46c0      	nop			; (mov r8, r8)
    65a0:	0000644d 	.word	0x0000644d
    65a4:	0000636d 	.word	0x0000636d

000065a8 <copyMQTTConnectData>:

void copyMQTTConnectData(MQTTPacket_connectData *destination, MQTTPacket_connectData *source) {
    65a8:	b580      	push	{r7, lr}
    65aa:	b082      	sub	sp, #8
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
    65b0:	6039      	str	r1, [r7, #0]
    if(NULL == destination || NULL == source) {
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d033      	beq.n	6620 <copyMQTTConnectData+0x78>
    65b8:	683b      	ldr	r3, [r7, #0]
    65ba:	2b00      	cmp	r3, #0
    65bc:	d030      	beq.n	6620 <copyMQTTConnectData+0x78>
        return;
    }
    destination->willFlag = source->willFlag;
    65be:	683b      	ldr	r3, [r7, #0]
    65c0:	7dda      	ldrb	r2, [r3, #23]
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	75da      	strb	r2, [r3, #23]
    destination->MQTTVersion = source->MQTTVersion;
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	795a      	ldrb	r2, [r3, #5]
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	715a      	strb	r2, [r3, #5]
    destination->clientID.cstring = source->clientID.cstring;
    65ce:	683b      	ldr	r3, [r7, #0]
    65d0:	689a      	ldr	r2, [r3, #8]
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	609a      	str	r2, [r3, #8]
    destination->username.cstring = source->username.cstring;
    65d6:	683b      	ldr	r3, [r7, #0]
    65d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	63da      	str	r2, [r3, #60]	; 0x3c
    destination->password.cstring = source->password.cstring;
    65de:	683b      	ldr	r3, [r7, #0]
    65e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    65e2:	687b      	ldr	r3, [r7, #4]
    65e4:	649a      	str	r2, [r3, #72]	; 0x48
    destination->will.topicName.cstring = source->will.topicName.cstring;
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	6a1a      	ldr	r2, [r3, #32]
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	621a      	str	r2, [r3, #32]
    destination->will.message.cstring = source->will.message.cstring;
    65ee:	683b      	ldr	r3, [r7, #0]
    65f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	62da      	str	r2, [r3, #44]	; 0x2c
    destination->will.qos = source->will.qos;
    65f6:	683b      	ldr	r3, [r7, #0]
    65f8:	2239      	movs	r2, #57	; 0x39
    65fa:	5c99      	ldrb	r1, [r3, r2]
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	2239      	movs	r2, #57	; 0x39
    6600:	5499      	strb	r1, [r3, r2]
    destination->will.retained = source->will.retained;
    6602:	683b      	ldr	r3, [r7, #0]
    6604:	2238      	movs	r2, #56	; 0x38
    6606:	5c99      	ldrb	r1, [r3, r2]
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	2238      	movs	r2, #56	; 0x38
    660c:	5499      	strb	r1, [r3, r2]
    destination->keepAliveInterval = source->keepAliveInterval;
    660e:	683b      	ldr	r3, [r7, #0]
    6610:	8a9a      	ldrh	r2, [r3, #20]
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	829a      	strh	r2, [r3, #20]
    destination->cleansession = source->cleansession;
    6616:	683b      	ldr	r3, [r7, #0]
    6618:	7d9a      	ldrb	r2, [r3, #22]
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	759a      	strb	r2, [r3, #22]
    661e:	e000      	b.n	6622 <copyMQTTConnectData+0x7a>
        return;
    6620:	46c0      	nop			; (mov r8, r8)
}
    6622:	46bd      	mov	sp, r7
    6624:	b002      	add	sp, #8
    6626:	bd80      	pop	{r7, pc}

00006628 <decodePacket>:
    InitTimer(&(c->reconnectDelayTimer));

    return SUCCESS;
}

MQTTReturnCode decodePacket(Client *c, uint32_t *value, uint32_t timeout) {
    6628:	b590      	push	{r4, r7, lr}
    662a:	b089      	sub	sp, #36	; 0x24
    662c:	af00      	add	r7, sp, #0
    662e:	60f8      	str	r0, [r7, #12]
    6630:	60b9      	str	r1, [r7, #8]
    6632:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == value) {
    6634:	68fb      	ldr	r3, [r7, #12]
    6636:	2b00      	cmp	r3, #0
    6638:	d002      	beq.n	6640 <decodePacket+0x18>
    663a:	68bb      	ldr	r3, [r7, #8]
    663c:	2b00      	cmp	r3, #0
    663e:	d102      	bne.n	6646 <decodePacket+0x1e>
        return MQTT_NULL_VALUE_ERROR;
    6640:	2306      	movs	r3, #6
    6642:	425b      	negs	r3, r3
    6644:	e03a      	b.n	66bc <decodePacket+0x94>
    }

    unsigned char i;
    uint32_t multiplier = 1;
    6646:	2301      	movs	r3, #1
    6648:	61fb      	str	r3, [r7, #28]
    uint32_t len = 0;
    664a:	2300      	movs	r3, #0
    664c:	61bb      	str	r3, [r7, #24]
    const uint32_t MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
    664e:	2304      	movs	r3, #4
    6650:	617b      	str	r3, [r7, #20]

    *value = 0;
    6652:	68bb      	ldr	r3, [r7, #8]
    6654:	2200      	movs	r2, #0
    6656:	601a      	str	r2, [r3, #0]

    do {
        if(++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    6658:	69bb      	ldr	r3, [r7, #24]
    665a:	3301      	adds	r3, #1
    665c:	61bb      	str	r3, [r7, #24]
    665e:	69ba      	ldr	r2, [r7, #24]
    6660:	697b      	ldr	r3, [r7, #20]
    6662:	429a      	cmp	r2, r3
    6664:	d902      	bls.n	666c <decodePacket+0x44>
            /* bad data */
            return MQTTPACKET_READ_ERROR;
    6666:	230a      	movs	r3, #10
    6668:	425b      	negs	r3, r3
    666a:	e027      	b.n	66bc <decodePacket+0x94>
        }

        if((c->networkStack.mqttread(&(c->networkStack), &i, 1, (int)timeout)) != 1) {
    666c:	68fb      	ldr	r3, [r7, #12]
    666e:	22a0      	movs	r2, #160	; 0xa0
    6670:	589c      	ldr	r4, [r3, r2]
    6672:	68fb      	ldr	r3, [r7, #12]
    6674:	3398      	adds	r3, #152	; 0x98
    6676:	0018      	movs	r0, r3
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	2213      	movs	r2, #19
    667c:	18b9      	adds	r1, r7, r2
    667e:	2201      	movs	r2, #1
    6680:	47a0      	blx	r4
    6682:	0003      	movs	r3, r0
    6684:	2b01      	cmp	r3, #1
    6686:	d002      	beq.n	668e <decodePacket+0x66>
            /* The value argument is the important value. len is just used temporarily
             * and never used by the calling function for anything else */
            return FAILURE;
    6688:	2301      	movs	r3, #1
    668a:	425b      	negs	r3, r3
    668c:	e016      	b.n	66bc <decodePacket+0x94>
        }

        *value += ((i & 127) * multiplier);
    668e:	68bb      	ldr	r3, [r7, #8]
    6690:	681a      	ldr	r2, [r3, #0]
    6692:	2313      	movs	r3, #19
    6694:	18fb      	adds	r3, r7, r3
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	0019      	movs	r1, r3
    669a:	237f      	movs	r3, #127	; 0x7f
    669c:	400b      	ands	r3, r1
    669e:	69f9      	ldr	r1, [r7, #28]
    66a0:	434b      	muls	r3, r1
    66a2:	18d2      	adds	r2, r2, r3
    66a4:	68bb      	ldr	r3, [r7, #8]
    66a6:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
    66a8:	69fb      	ldr	r3, [r7, #28]
    66aa:	01db      	lsls	r3, r3, #7
    66ac:	61fb      	str	r3, [r7, #28]
    }while((i & 128) != 0);
    66ae:	2313      	movs	r3, #19
    66b0:	18fb      	adds	r3, r7, r3
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	b25b      	sxtb	r3, r3
    66b6:	2b00      	cmp	r3, #0
    66b8:	dbce      	blt.n	6658 <decodePacket+0x30>

    /* The value argument is the important value. len is just used temporarily
     * and never used by the calling function for anything else */
    return SUCCESS;
    66ba:	2300      	movs	r3, #0
}
    66bc:	0018      	movs	r0, r3
    66be:	46bd      	mov	sp, r7
    66c0:	b009      	add	sp, #36	; 0x24
    66c2:	bd90      	pop	{r4, r7, pc}

000066c4 <readPacket>:

MQTTReturnCode readPacket(Client *c, Timer *timer, uint8_t *packet_type) {
    66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c6:	46c6      	mov	lr, r8
    66c8:	b500      	push	{lr}
    66ca:	b08c      	sub	sp, #48	; 0x30
    66cc:	af00      	add	r7, sp, #0
    66ce:	60f8      	str	r0, [r7, #12]
    66d0:	60b9      	str	r1, [r7, #8]
    66d2:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    66d4:	68fb      	ldr	r3, [r7, #12]
    66d6:	2b00      	cmp	r3, #0
    66d8:	d002      	beq.n	66e0 <readPacket+0x1c>
    66da:	68bb      	ldr	r3, [r7, #8]
    66dc:	2b00      	cmp	r3, #0
    66de:	d102      	bne.n	66e6 <readPacket+0x22>
        return MQTT_NULL_VALUE_ERROR;
    66e0:	2306      	movs	r3, #6
    66e2:	425b      	negs	r3, r3
    66e4:	e0b6      	b.n	6854 <readPacket+0x190>
    }

    MQTTHeader header = {0};
    66e6:	2300      	movs	r3, #0
    66e8:	61bb      	str	r3, [r7, #24]
    uint32_t len = 0;
    66ea:	2300      	movs	r3, #0
    66ec:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_len = 0;
    66ee:	2300      	movs	r3, #0
    66f0:	617b      	str	r3, [r7, #20]
    uint32_t total_bytes_read = 0;
    66f2:	2300      	movs	r3, #0
    66f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bytes_to_be_read = 0;
    66f6:	2300      	movs	r3, #0
    66f8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t ret_val = 0;
    66fa:	2300      	movs	r3, #0
    66fc:	623b      	str	r3, [r7, #32]

    /* 1. read the header byte.  This has the packet type in it */
    if(1 != c->networkStack.mqttread(&(c->networkStack), c->readbuf, 1, left_ms(timer))) {
    66fe:	68fb      	ldr	r3, [r7, #12]
    6700:	22a0      	movs	r2, #160	; 0xa0
    6702:	589c      	ldr	r4, [r3, r2]
    6704:	68fb      	ldr	r3, [r7, #12]
    6706:	3398      	adds	r3, #152	; 0x98
    6708:	001d      	movs	r5, r3
    670a:	68fb      	ldr	r3, [r7, #12]
    670c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    670e:	68bb      	ldr	r3, [r7, #8]
    6710:	0018      	movs	r0, r3
    6712:	4b53      	ldr	r3, [pc, #332]	; (6860 <readPacket+0x19c>)
    6714:	4798      	blx	r3
    6716:	0003      	movs	r3, r0
    6718:	2201      	movs	r2, #1
    671a:	0031      	movs	r1, r6
    671c:	0028      	movs	r0, r5
    671e:	47a0      	blx	r4
    6720:	0003      	movs	r3, r0
    6722:	2b01      	cmp	r3, #1
    6724:	d001      	beq.n	672a <readPacket+0x66>
        /* If a network disconnect has occurred it would have been caught by keepalive already.
         * If nothing is found at this point means there was nothing to read. Not 100% correct,
         * but the only way to be sure is to pass proper error codes from the network stack
         * which the mbedtls/openssl implementations do not return */
        return MQTT_NOTHING_TO_READ;
    6726:	2302      	movs	r3, #2
    6728:	e094      	b.n	6854 <readPacket+0x190>
    }

    len = 1;
    672a:	2301      	movs	r3, #1
    672c:	627b      	str	r3, [r7, #36]	; 0x24
    /* 2. read the remaining length.  This is variable in itself */
    MQTTReturnCode rc = decodePacket(c, &rem_len, (uint32_t)left_ms(timer));
    672e:	68bb      	ldr	r3, [r7, #8]
    6730:	0018      	movs	r0, r3
    6732:	4b4b      	ldr	r3, [pc, #300]	; (6860 <readPacket+0x19c>)
    6734:	4798      	blx	r3
    6736:	0003      	movs	r3, r0
    6738:	001a      	movs	r2, r3
    673a:	231f      	movs	r3, #31
    673c:	18fc      	adds	r4, r7, r3
    673e:	2314      	movs	r3, #20
    6740:	18f9      	adds	r1, r7, r3
    6742:	68fb      	ldr	r3, [r7, #12]
    6744:	0018      	movs	r0, r3
    6746:	4b47      	ldr	r3, [pc, #284]	; (6864 <readPacket+0x1a0>)
    6748:	4798      	blx	r3
    674a:	0003      	movs	r3, r0
    674c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    674e:	231f      	movs	r3, #31
    6750:	18fb      	adds	r3, r7, r3
    6752:	781b      	ldrb	r3, [r3, #0]
    6754:	b25b      	sxtb	r3, r3
    6756:	2b00      	cmp	r3, #0
    6758:	d004      	beq.n	6764 <readPacket+0xa0>
        return rc;
    675a:	231f      	movs	r3, #31
    675c:	18fb      	adds	r3, r7, r3
    675e:	781b      	ldrb	r3, [r3, #0]
    6760:	b25b      	sxtb	r3, r3
    6762:	e077      	b.n	6854 <readPacket+0x190>
    }

    /* if the buffer is too short then the message will be dropped silently */
	if (rem_len >= c->readBufSize) {
    6764:	68fb      	ldr	r3, [r7, #12]
    6766:	69da      	ldr	r2, [r3, #28]
    6768:	697b      	ldr	r3, [r7, #20]
    676a:	429a      	cmp	r2, r3
    676c:	d837      	bhi.n	67de <readPacket+0x11a>
		bytes_to_be_read = c->readBufSize;
    676e:	68fb      	ldr	r3, [r7, #12]
    6770:	69db      	ldr	r3, [r3, #28]
    6772:	62bb      	str	r3, [r7, #40]	; 0x28
		do {
			ret_val = c->networkStack.mqttread(&(c->networkStack), c->readbuf, bytes_to_be_read, left_ms(timer));
    6774:	68fb      	ldr	r3, [r7, #12]
    6776:	22a0      	movs	r2, #160	; 0xa0
    6778:	589c      	ldr	r4, [r3, r2]
    677a:	68fb      	ldr	r3, [r7, #12]
    677c:	3398      	adds	r3, #152	; 0x98
    677e:	001d      	movs	r5, r3
    6780:	68fb      	ldr	r3, [r7, #12]
    6782:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    6784:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6786:	4698      	mov	r8, r3
    6788:	68bb      	ldr	r3, [r7, #8]
    678a:	0018      	movs	r0, r3
    678c:	4b34      	ldr	r3, [pc, #208]	; (6860 <readPacket+0x19c>)
    678e:	4798      	blx	r3
    6790:	0003      	movs	r3, r0
    6792:	4642      	mov	r2, r8
    6794:	0031      	movs	r1, r6
    6796:	0028      	movs	r0, r5
    6798:	47a0      	blx	r4
    679a:	0003      	movs	r3, r0
    679c:	623b      	str	r3, [r7, #32]
			if (ret_val > 0) {
    679e:	6a3b      	ldr	r3, [r7, #32]
    67a0:	2b00      	cmp	r3, #0
    67a2:	dd12      	ble.n	67ca <readPacket+0x106>
				total_bytes_read += ret_val;
    67a4:	6a3b      	ldr	r3, [r7, #32]
    67a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    67a8:	18d3      	adds	r3, r2, r3
    67aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				if((rem_len - total_bytes_read) >= c->readBufSize){
    67ac:	697a      	ldr	r2, [r7, #20]
    67ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67b0:	1ad2      	subs	r2, r2, r3
    67b2:	68fb      	ldr	r3, [r7, #12]
    67b4:	69db      	ldr	r3, [r3, #28]
    67b6:	429a      	cmp	r2, r3
    67b8:	d303      	bcc.n	67c2 <readPacket+0xfe>
					bytes_to_be_read = c->readBufSize;
    67ba:	68fb      	ldr	r3, [r7, #12]
    67bc:	69db      	ldr	r3, [r3, #28]
    67be:	62bb      	str	r3, [r7, #40]	; 0x28
    67c0:	e003      	b.n	67ca <readPacket+0x106>
				}
				else{
					bytes_to_be_read = rem_len - total_bytes_read;
    67c2:	697a      	ldr	r2, [r7, #20]
    67c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67c6:	1ad3      	subs	r3, r2, r3
    67c8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
		} while (total_bytes_read < rem_len && ret_val > 0);
    67ca:	697b      	ldr	r3, [r7, #20]
    67cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    67ce:	429a      	cmp	r2, r3
    67d0:	d202      	bcs.n	67d8 <readPacket+0x114>
    67d2:	6a3b      	ldr	r3, [r7, #32]
    67d4:	2b00      	cmp	r3, #0
    67d6:	dccd      	bgt.n	6774 <readPacket+0xb0>
		return MQTTPACKET_BUFFER_TOO_SHORT;
    67d8:	2309      	movs	r3, #9
    67da:	425b      	negs	r3, r3
    67dc:	e03a      	b.n	6854 <readPacket+0x190>
	}

    /* put the original remaining length back into the buffer */
    len += MQTTPacket_encode(c->readbuf + 1, rem_len);
    67de:	68fb      	ldr	r3, [r7, #12]
    67e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67e2:	3301      	adds	r3, #1
    67e4:	697a      	ldr	r2, [r7, #20]
    67e6:	0011      	movs	r1, r2
    67e8:	0018      	movs	r0, r3
    67ea:	4b1f      	ldr	r3, [pc, #124]	; (6868 <readPacket+0x1a4>)
    67ec:	4798      	blx	r3
    67ee:	0002      	movs	r2, r0
    67f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67f2:	189b      	adds	r3, r3, r2
    67f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if(rem_len > 0 && (c->networkStack.mqttread(&(c->networkStack), c->readbuf + len, (int)rem_len, left_ms(timer)) != (int)rem_len)) {
    67f6:	697b      	ldr	r3, [r7, #20]
    67f8:	2b00      	cmp	r3, #0
    67fa:	d01b      	beq.n	6834 <readPacket+0x170>
    67fc:	68fb      	ldr	r3, [r7, #12]
    67fe:	22a0      	movs	r2, #160	; 0xa0
    6800:	589c      	ldr	r4, [r3, r2]
    6802:	68fb      	ldr	r3, [r7, #12]
    6804:	3398      	adds	r3, #152	; 0x98
    6806:	001d      	movs	r5, r3
    6808:	68fb      	ldr	r3, [r7, #12]
    680a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    680e:	18d6      	adds	r6, r2, r3
    6810:	697b      	ldr	r3, [r7, #20]
    6812:	603b      	str	r3, [r7, #0]
    6814:	68bb      	ldr	r3, [r7, #8]
    6816:	0018      	movs	r0, r3
    6818:	4b11      	ldr	r3, [pc, #68]	; (6860 <readPacket+0x19c>)
    681a:	4798      	blx	r3
    681c:	0003      	movs	r3, r0
    681e:	683a      	ldr	r2, [r7, #0]
    6820:	0031      	movs	r1, r6
    6822:	0028      	movs	r0, r5
    6824:	47a0      	blx	r4
    6826:	0002      	movs	r2, r0
    6828:	697b      	ldr	r3, [r7, #20]
    682a:	429a      	cmp	r2, r3
    682c:	d002      	beq.n	6834 <readPacket+0x170>
        return FAILURE;
    682e:	2301      	movs	r3, #1
    6830:	425b      	negs	r3, r3
    6832:	e00f      	b.n	6854 <readPacket+0x190>
    }

    header.byte = c->readbuf[0];
    6834:	68fb      	ldr	r3, [r7, #12]
    6836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6838:	781a      	ldrb	r2, [r3, #0]
    683a:	2318      	movs	r3, #24
    683c:	18fb      	adds	r3, r7, r3
    683e:	701a      	strb	r2, [r3, #0]
    *packet_type = header.bits.type;
    6840:	2318      	movs	r3, #24
    6842:	18fb      	adds	r3, r7, r3
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	061b      	lsls	r3, r3, #24
    6848:	0f1b      	lsrs	r3, r3, #28
    684a:	b2db      	uxtb	r3, r3
    684c:	001a      	movs	r2, r3
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	701a      	strb	r2, [r3, #0]

    return SUCCESS;
    6852:	2300      	movs	r3, #0
}
    6854:	0018      	movs	r0, r3
    6856:	46bd      	mov	sp, r7
    6858:	b00c      	add	sp, #48	; 0x30
    685a:	bc04      	pop	{r2}
    685c:	4690      	mov	r8, r2
    685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6860:	0000644d 	.word	0x0000644d
    6864:	00006629 	.word	0x00006629
    6868:	00008185 	.word	0x00008185

0000686c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char *topicFilter, MQTTString *topicName) {
    686c:	b580      	push	{r7, lr}
    686e:	b086      	sub	sp, #24
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
    6874:	6039      	str	r1, [r7, #0]
    if(NULL == topicFilter || NULL == topicName) {
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	2b00      	cmp	r3, #0
    687a:	d002      	beq.n	6882 <isTopicMatched+0x16>
    687c:	683b      	ldr	r3, [r7, #0]
    687e:	2b00      	cmp	r3, #0
    6880:	d101      	bne.n	6886 <isTopicMatched+0x1a>
        return MQTT_NULL_VALUE_ERROR;
    6882:	23fa      	movs	r3, #250	; 0xfa
    6884:	e05c      	b.n	6940 <isTopicMatched+0xd4>
    }

    char *curf = topicFilter;
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	617b      	str	r3, [r7, #20]
    char *curn = topicName->lenstring.data;
    688a:	683b      	ldr	r3, [r7, #0]
    688c:	689b      	ldr	r3, [r3, #8]
    688e:	613b      	str	r3, [r7, #16]
    char *curn_end = curn + topicName->lenstring.len;
    6890:	683b      	ldr	r3, [r7, #0]
    6892:	685b      	ldr	r3, [r3, #4]
    6894:	693a      	ldr	r2, [r7, #16]
    6896:	18d3      	adds	r3, r2, r3
    6898:	60bb      	str	r3, [r7, #8]

    while(*curf && (curn < curn_end)) {
    689a:	e039      	b.n	6910 <isTopicMatched+0xa4>
        if(*curn == '/' && *curf != '/') {
    689c:	693b      	ldr	r3, [r7, #16]
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	2b2f      	cmp	r3, #47	; 0x2f
    68a2:	d103      	bne.n	68ac <isTopicMatched+0x40>
    68a4:	697b      	ldr	r3, [r7, #20]
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	2b2f      	cmp	r3, #47	; 0x2f
    68aa:	d13a      	bne.n	6922 <isTopicMatched+0xb6>
            break;
        }
        if(*curf != '+' && *curf != '#' && *curf != *curn) {
    68ac:	697b      	ldr	r3, [r7, #20]
    68ae:	781b      	ldrb	r3, [r3, #0]
    68b0:	2b2b      	cmp	r3, #43	; 0x2b
    68b2:	d009      	beq.n	68c8 <isTopicMatched+0x5c>
    68b4:	697b      	ldr	r3, [r7, #20]
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	2b23      	cmp	r3, #35	; 0x23
    68ba:	d005      	beq.n	68c8 <isTopicMatched+0x5c>
    68bc:	697b      	ldr	r3, [r7, #20]
    68be:	781a      	ldrb	r2, [r3, #0]
    68c0:	693b      	ldr	r3, [r7, #16]
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	429a      	cmp	r2, r3
    68c6:	d12e      	bne.n	6926 <isTopicMatched+0xba>
            break;
        }
        if(*curf == '+') {
    68c8:	697b      	ldr	r3, [r7, #20]
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	2b2b      	cmp	r3, #43	; 0x2b
    68ce:	d112      	bne.n	68f6 <isTopicMatched+0x8a>
            /* skip until we meet the next separator, or end of string */
            char *nextpos = curn + 1;
    68d0:	693b      	ldr	r3, [r7, #16]
    68d2:	3301      	adds	r3, #1
    68d4:	60fb      	str	r3, [r7, #12]
            while(nextpos < curn_end && *nextpos != '/')
    68d6:	e005      	b.n	68e4 <isTopicMatched+0x78>
                nextpos = ++curn + 1;
    68d8:	693b      	ldr	r3, [r7, #16]
    68da:	3301      	adds	r3, #1
    68dc:	613b      	str	r3, [r7, #16]
    68de:	693b      	ldr	r3, [r7, #16]
    68e0:	3301      	adds	r3, #1
    68e2:	60fb      	str	r3, [r7, #12]
            while(nextpos < curn_end && *nextpos != '/')
    68e4:	68fa      	ldr	r2, [r7, #12]
    68e6:	68bb      	ldr	r3, [r7, #8]
    68e8:	429a      	cmp	r2, r3
    68ea:	d20b      	bcs.n	6904 <isTopicMatched+0x98>
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	781b      	ldrb	r3, [r3, #0]
    68f0:	2b2f      	cmp	r3, #47	; 0x2f
    68f2:	d1f1      	bne.n	68d8 <isTopicMatched+0x6c>
    68f4:	e006      	b.n	6904 <isTopicMatched+0x98>
        } else if(*curf == '#') {
    68f6:	697b      	ldr	r3, [r7, #20]
    68f8:	781b      	ldrb	r3, [r3, #0]
    68fa:	2b23      	cmp	r3, #35	; 0x23
    68fc:	d102      	bne.n	6904 <isTopicMatched+0x98>
            /* skip until end of string */
            curn = curn_end - 1;
    68fe:	68bb      	ldr	r3, [r7, #8]
    6900:	3b01      	subs	r3, #1
    6902:	613b      	str	r3, [r7, #16]
        }

        curf++;
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	3301      	adds	r3, #1
    6908:	617b      	str	r3, [r7, #20]
        curn++;
    690a:	693b      	ldr	r3, [r7, #16]
    690c:	3301      	adds	r3, #1
    690e:	613b      	str	r3, [r7, #16]
    while(*curf && (curn < curn_end)) {
    6910:	697b      	ldr	r3, [r7, #20]
    6912:	781b      	ldrb	r3, [r3, #0]
    6914:	2b00      	cmp	r3, #0
    6916:	d007      	beq.n	6928 <isTopicMatched+0xbc>
    6918:	693a      	ldr	r2, [r7, #16]
    691a:	68bb      	ldr	r3, [r7, #8]
    691c:	429a      	cmp	r2, r3
    691e:	d3bd      	bcc.n	689c <isTopicMatched+0x30>
    6920:	e002      	b.n	6928 <isTopicMatched+0xbc>
            break;
    6922:	46c0      	nop			; (mov r8, r8)
    6924:	e000      	b.n	6928 <isTopicMatched+0xbc>
            break;
    6926:	46c0      	nop			; (mov r8, r8)
    };

    return (curn == curn_end) && (*curf == '\0');
    6928:	693a      	ldr	r2, [r7, #16]
    692a:	68bb      	ldr	r3, [r7, #8]
    692c:	429a      	cmp	r2, r3
    692e:	d105      	bne.n	693c <isTopicMatched+0xd0>
    6930:	697b      	ldr	r3, [r7, #20]
    6932:	781b      	ldrb	r3, [r3, #0]
    6934:	2b00      	cmp	r3, #0
    6936:	d101      	bne.n	693c <isTopicMatched+0xd0>
    6938:	2301      	movs	r3, #1
    693a:	e000      	b.n	693e <isTopicMatched+0xd2>
    693c:	2300      	movs	r3, #0
    693e:	b2db      	uxtb	r3, r3
}
    6940:	0018      	movs	r0, r3
    6942:	46bd      	mov	sp, r7
    6944:	b006      	add	sp, #24
    6946:	bd80      	pop	{r7, pc}

00006948 <deliverMessage>:

MQTTReturnCode deliverMessage(Client *c, MQTTString *topicName, MQTTMessage *message) {
    6948:	b590      	push	{r4, r7, lr}
    694a:	b089      	sub	sp, #36	; 0x24
    694c:	af00      	add	r7, sp, #0
    694e:	60f8      	str	r0, [r7, #12]
    6950:	60b9      	str	r1, [r7, #8]
    6952:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == topicName || NULL == message) {
    6954:	68fb      	ldr	r3, [r7, #12]
    6956:	2b00      	cmp	r3, #0
    6958:	d005      	beq.n	6966 <deliverMessage+0x1e>
    695a:	68bb      	ldr	r3, [r7, #8]
    695c:	2b00      	cmp	r3, #0
    695e:	d002      	beq.n	6966 <deliverMessage+0x1e>
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	2b00      	cmp	r3, #0
    6964:	d102      	bne.n	696c <deliverMessage+0x24>
        return MQTT_NULL_VALUE_ERROR;
    6966:	2306      	movs	r3, #6
    6968:	425b      	negs	r3, r3
    696a:	e069      	b.n	6a40 <deliverMessage+0xf8>

    uint32_t i;
    MessageData md;

    // we have to find the right message handler - indexed by topic
    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    696c:	2300      	movs	r3, #0
    696e:	61fb      	str	r3, [r7, #28]
    6970:	e04a      	b.n	6a08 <deliverMessage+0xc0>
        if((c->messageHandlers[i].topicFilter != 0)
    6972:	68fa      	ldr	r2, [r7, #12]
    6974:	69fb      	ldr	r3, [r7, #28]
    6976:	330c      	adds	r3, #12
    6978:	011b      	lsls	r3, r3, #4
    697a:	18d3      	adds	r3, r2, r3
    697c:	3304      	adds	r3, #4
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	2b00      	cmp	r3, #0
    6982:	d03e      	beq.n	6a02 <deliverMessage+0xba>
           && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    6984:	68fa      	ldr	r2, [r7, #12]
    6986:	69fb      	ldr	r3, [r7, #28]
    6988:	330c      	adds	r3, #12
    698a:	011b      	lsls	r3, r3, #4
    698c:	18d3      	adds	r3, r2, r3
    698e:	3304      	adds	r3, #4
    6990:	681a      	ldr	r2, [r3, #0]
    6992:	68bb      	ldr	r3, [r7, #8]
    6994:	0011      	movs	r1, r2
    6996:	0018      	movs	r0, r3
    6998:	4b2b      	ldr	r3, [pc, #172]	; (6a48 <deliverMessage+0x100>)
    699a:	4798      	blx	r3
    699c:	1e03      	subs	r3, r0, #0
    699e:	d10d      	bne.n	69bc <deliverMessage+0x74>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName))) {
    69a0:	68fa      	ldr	r2, [r7, #12]
    69a2:	69fb      	ldr	r3, [r7, #28]
    69a4:	330c      	adds	r3, #12
    69a6:	011b      	lsls	r3, r3, #4
    69a8:	18d3      	adds	r3, r2, r3
    69aa:	3304      	adds	r3, #4
    69ac:	681b      	ldr	r3, [r3, #0]
    69ae:	68ba      	ldr	r2, [r7, #8]
    69b0:	0011      	movs	r1, r2
    69b2:	0018      	movs	r0, r3
    69b4:	4b25      	ldr	r3, [pc, #148]	; (6a4c <deliverMessage+0x104>)
    69b6:	4798      	blx	r3
    69b8:	1e03      	subs	r3, r0, #0
           && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    69ba:	d022      	beq.n	6a02 <deliverMessage+0xba>
            if(c->messageHandlers[i].fp != NULL) {
    69bc:	68fa      	ldr	r2, [r7, #12]
    69be:	69fb      	ldr	r3, [r7, #28]
    69c0:	330c      	adds	r3, #12
    69c2:	011b      	lsls	r3, r3, #4
    69c4:	18d3      	adds	r3, r2, r3
    69c6:	3308      	adds	r3, #8
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	2b00      	cmp	r3, #0
    69cc:	d019      	beq.n	6a02 <deliverMessage+0xba>
                NewMessageData(&md, topicName, message, c->messageHandlers[i].applicationHandler);
    69ce:	68fa      	ldr	r2, [r7, #12]
    69d0:	69fb      	ldr	r3, [r7, #28]
    69d2:	21cc      	movs	r1, #204	; 0xcc
    69d4:	011b      	lsls	r3, r3, #4
    69d6:	18d3      	adds	r3, r2, r3
    69d8:	185b      	adds	r3, r3, r1
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	687a      	ldr	r2, [r7, #4]
    69de:	68b9      	ldr	r1, [r7, #8]
    69e0:	2010      	movs	r0, #16
    69e2:	1838      	adds	r0, r7, r0
    69e4:	4c1a      	ldr	r4, [pc, #104]	; (6a50 <deliverMessage+0x108>)
    69e6:	47a0      	blx	r4
                c->messageHandlers[i].fp(&md);
    69e8:	68fa      	ldr	r2, [r7, #12]
    69ea:	69fb      	ldr	r3, [r7, #28]
    69ec:	330c      	adds	r3, #12
    69ee:	011b      	lsls	r3, r3, #4
    69f0:	18d3      	adds	r3, r2, r3
    69f2:	3308      	adds	r3, #8
    69f4:	681b      	ldr	r3, [r3, #0]
    69f6:	2210      	movs	r2, #16
    69f8:	18ba      	adds	r2, r7, r2
    69fa:	0010      	movs	r0, r2
    69fc:	4798      	blx	r3
                return SUCCESS;
    69fe:	2300      	movs	r3, #0
    6a00:	e01e      	b.n	6a40 <deliverMessage+0xf8>
    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    6a02:	69fb      	ldr	r3, [r7, #28]
    6a04:	3301      	adds	r3, #1
    6a06:	61fb      	str	r3, [r7, #28]
    6a08:	69fb      	ldr	r3, [r7, #28]
    6a0a:	2b04      	cmp	r3, #4
    6a0c:	d9b1      	bls.n	6972 <deliverMessage+0x2a>
            }
        }
    }

    if(NULL != c->defaultMessageHandler) {
    6a0e:	68fa      	ldr	r2, [r7, #12]
    6a10:	238a      	movs	r3, #138	; 0x8a
    6a12:	005b      	lsls	r3, r3, #1
    6a14:	58d3      	ldr	r3, [r2, r3]
    6a16:	2b00      	cmp	r3, #0
    6a18:	d010      	beq.n	6a3c <deliverMessage+0xf4>
        NewMessageData(&md, topicName, message, NULL);
    6a1a:	687a      	ldr	r2, [r7, #4]
    6a1c:	68b9      	ldr	r1, [r7, #8]
    6a1e:	2310      	movs	r3, #16
    6a20:	18f8      	adds	r0, r7, r3
    6a22:	2300      	movs	r3, #0
    6a24:	4c0a      	ldr	r4, [pc, #40]	; (6a50 <deliverMessage+0x108>)
    6a26:	47a0      	blx	r4
        c->defaultMessageHandler(&md);
    6a28:	68fa      	ldr	r2, [r7, #12]
    6a2a:	238a      	movs	r3, #138	; 0x8a
    6a2c:	005b      	lsls	r3, r3, #1
    6a2e:	58d3      	ldr	r3, [r2, r3]
    6a30:	2210      	movs	r2, #16
    6a32:	18ba      	adds	r2, r7, r2
    6a34:	0010      	movs	r0, r2
    6a36:	4798      	blx	r3
        return SUCCESS;
    6a38:	2300      	movs	r3, #0
    6a3a:	e001      	b.n	6a40 <deliverMessage+0xf8>
    }

    /* Message handler not found for topic */
    return FAILURE;
    6a3c:	2301      	movs	r3, #1
    6a3e:	425b      	negs	r3, r3
}
    6a40:	0018      	movs	r0, r3
    6a42:	46bd      	mov	sp, r7
    6a44:	b009      	add	sp, #36	; 0x24
    6a46:	bd90      	pop	{r4, r7, pc}
    6a48:	00008679 	.word	0x00008679
    6a4c:	0000686d 	.word	0x0000686d
    6a50:	00006499 	.word	0x00006499

00006a54 <handleDisconnect>:

MQTTReturnCode handleDisconnect(Client *c) {
    6a54:	b590      	push	{r4, r7, lr}
    6a56:	b085      	sub	sp, #20
    6a58:	af00      	add	r7, sp, #0
    6a5a:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d102      	bne.n	6a68 <handleDisconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    6a62:	2306      	movs	r3, #6
    6a64:	425b      	negs	r3, r3
    6a66:	e021      	b.n	6aac <handleDisconnect+0x58>
    }

    MQTTReturnCode rc = MQTTDisconnect(c);
    6a68:	230f      	movs	r3, #15
    6a6a:	18fc      	adds	r4, r7, r3
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	0018      	movs	r0, r3
    6a70:	4b10      	ldr	r3, [pc, #64]	; (6ab4 <handleDisconnect+0x60>)
    6a72:	4798      	blx	r3
    6a74:	0003      	movs	r3, r0
    6a76:	7023      	strb	r3, [r4, #0]
    if(rc != SUCCESS){
    6a78:	230f      	movs	r3, #15
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	b25b      	sxtb	r3, r3
    6a80:	2b00      	cmp	r3, #0
    6a82:	d003      	beq.n	6a8c <handleDisconnect+0x38>
    	// If the sendPacket prevents us from sending a disconnect packet then we have to clean the stack
    	MQTTForceDisconnect(c);
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	0018      	movs	r0, r3
    6a88:	4b0b      	ldr	r3, [pc, #44]	; (6ab8 <handleDisconnect+0x64>)
    6a8a:	4798      	blx	r3
    }

    if(NULL != c->disconnectHandler) {
    6a8c:	687a      	ldr	r2, [r7, #4]
    6a8e:	238c      	movs	r3, #140	; 0x8c
    6a90:	005b      	lsls	r3, r3, #1
    6a92:	58d3      	ldr	r3, [r2, r3]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d004      	beq.n	6aa2 <handleDisconnect+0x4e>
        c->disconnectHandler();
    6a98:	687a      	ldr	r2, [r7, #4]
    6a9a:	238c      	movs	r3, #140	; 0x8c
    6a9c:	005b      	lsls	r3, r3, #1
    6a9e:	58d3      	ldr	r3, [r2, r3]
    6aa0:	4798      	blx	r3
    }

    /* Reset to 0 since this was not a manual disconnect */
    c->wasManuallyDisconnected = 0;
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	2200      	movs	r2, #0
    6aa6:	705a      	strb	r2, [r3, #1]
    return MQTT_NETWORK_DISCONNECTED_ERROR;
    6aa8:	2304      	movs	r3, #4
    6aaa:	425b      	negs	r3, r3
}
    6aac:	0018      	movs	r0, r3
    6aae:	46bd      	mov	sp, r7
    6ab0:	b005      	add	sp, #20
    6ab2:	bd90      	pop	{r4, r7, pc}
    6ab4:	0000784d 	.word	0x0000784d
    6ab8:	00007819 	.word	0x00007819

00006abc <MQTTAttemptReconnect>:

MQTTReturnCode MQTTAttemptReconnect(Client *c) {
    6abc:	b590      	push	{r4, r7, lr}
    6abe:	b085      	sub	sp, #20
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d102      	bne.n	6ad0 <MQTTAttemptReconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    6aca:	2306      	movs	r3, #6
    6acc:	425b      	negs	r3, r3
    6ace:	e02d      	b.n	6b2c <MQTTAttemptReconnect+0x70>
    }

    if(1 == c->isConnected) {
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	2b01      	cmp	r3, #1
    6ad6:	d102      	bne.n	6ade <MQTTAttemptReconnect+0x22>
        return MQTT_NETWORK_ALREADY_CONNECTED_ERROR;
    6ad8:	2305      	movs	r3, #5
    6ada:	425b      	negs	r3, r3
    6adc:	e026      	b.n	6b2c <MQTTAttemptReconnect+0x70>
    }

    MQTTReturnCode rc = MQTT_ATTEMPTING_RECONNECT;
    6ade:	230f      	movs	r3, #15
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	2203      	movs	r2, #3
    6ae4:	701a      	strb	r2, [r3, #0]

    /* Ignoring return code. failures expected if network is disconnected */
    rc = MQTTConnect(c, NULL);
    6ae6:	230f      	movs	r3, #15
    6ae8:	18fc      	adds	r4, r7, r3
    6aea:	687b      	ldr	r3, [r7, #4]
    6aec:	2100      	movs	r1, #0
    6aee:	0018      	movs	r0, r3
    6af0:	4b10      	ldr	r3, [pc, #64]	; (6b34 <MQTTAttemptReconnect+0x78>)
    6af2:	4798      	blx	r3
    6af4:	0003      	movs	r3, r0
    6af6:	7023      	strb	r3, [r4, #0]

    /* If still disconnected handle disconnect */
    if(0 == c->isConnected) {
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d101      	bne.n	6b04 <MQTTAttemptReconnect+0x48>
        return MQTT_ATTEMPTING_RECONNECT;
    6b00:	2303      	movs	r3, #3
    6b02:	e013      	b.n	6b2c <MQTTAttemptReconnect+0x70>
    }

    rc = MQTTResubscribe(c);
    6b04:	230f      	movs	r3, #15
    6b06:	18fc      	adds	r4, r7, r3
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	0018      	movs	r0, r3
    6b0c:	4b0a      	ldr	r3, [pc, #40]	; (6b38 <MQTTAttemptReconnect+0x7c>)
    6b0e:	4798      	blx	r3
    6b10:	0003      	movs	r3, r0
    6b12:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6b14:	230f      	movs	r3, #15
    6b16:	18fb      	adds	r3, r7, r3
    6b18:	781b      	ldrb	r3, [r3, #0]
    6b1a:	b25b      	sxtb	r3, r3
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d004      	beq.n	6b2a <MQTTAttemptReconnect+0x6e>
        return rc;
    6b20:	230f      	movs	r3, #15
    6b22:	18fb      	adds	r3, r7, r3
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	b25b      	sxtb	r3, r3
    6b28:	e000      	b.n	6b2c <MQTTAttemptReconnect+0x70>
    }

    return MQTT_NETWORK_RECONNECTED;
    6b2a:	2301      	movs	r3, #1
}
    6b2c:	0018      	movs	r0, r3
    6b2e:	46bd      	mov	sp, r7
    6b30:	b005      	add	sp, #20
    6b32:	bd90      	pop	{r4, r7, pc}
    6b34:	00007215 	.word	0x00007215
    6b38:	00007441 	.word	0x00007441

00006b3c <handleReconnect>:

MQTTReturnCode handleReconnect(Client *c) {
    6b3c:	b590      	push	{r4, r7, lr}
    6b3e:	b085      	sub	sp, #20
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d102      	bne.n	6b50 <handleReconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    6b4a:	2306      	movs	r3, #6
    6b4c:	425b      	negs	r3, r3
    6b4e:	e051      	b.n	6bf4 <handleReconnect+0xb8>
    }

    if(!expired(&(c->reconnectDelayTimer))) {
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	33bc      	adds	r3, #188	; 0xbc
    6b54:	0018      	movs	r0, r3
    6b56:	4b29      	ldr	r3, [pc, #164]	; (6bfc <handleReconnect+0xc0>)
    6b58:	4798      	blx	r3
    6b5a:	1e03      	subs	r3, r0, #0
    6b5c:	d101      	bne.n	6b62 <handleReconnect+0x26>
        /* Timer has not expired. Not time to attempt reconnect yet.
         * Return attempting reconnect */
        return MQTT_ATTEMPTING_RECONNECT;
    6b5e:	2303      	movs	r3, #3
    6b60:	e048      	b.n	6bf4 <handleReconnect+0xb8>
    }

    int8_t isPhysicalLayerConnected = 1;
    6b62:	230f      	movs	r3, #15
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	2201      	movs	r2, #1
    6b68:	701a      	strb	r2, [r3, #0]
    if(NULL != c->networkStack.isConnected) {
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	22ac      	movs	r2, #172	; 0xac
    6b6e:	589b      	ldr	r3, [r3, r2]
    6b70:	2b00      	cmp	r3, #0
    6b72:	d00a      	beq.n	6b8a <handleReconnect+0x4e>
        isPhysicalLayerConnected = (int8_t)c->networkStack.isConnected(&(c->networkStack));
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	22ac      	movs	r2, #172	; 0xac
    6b78:	589b      	ldr	r3, [r3, r2]
    6b7a:	687a      	ldr	r2, [r7, #4]
    6b7c:	3298      	adds	r2, #152	; 0x98
    6b7e:	0010      	movs	r0, r2
    6b80:	4798      	blx	r3
    6b82:	0002      	movs	r2, r0
    6b84:	230f      	movs	r3, #15
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	701a      	strb	r2, [r3, #0]
    }

    MQTTReturnCode rc = MQTT_NETWORK_RECONNECTED;
    6b8a:	230e      	movs	r3, #14
    6b8c:	18fb      	adds	r3, r7, r3
    6b8e:	2201      	movs	r2, #1
    6b90:	701a      	strb	r2, [r3, #0]
    if(isPhysicalLayerConnected) {
    6b92:	230f      	movs	r3, #15
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	b25b      	sxtb	r3, r3
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d00f      	beq.n	6bbe <handleReconnect+0x82>
        rc = MQTTAttemptReconnect(c);
    6b9e:	230e      	movs	r3, #14
    6ba0:	18fc      	adds	r4, r7, r3
    6ba2:	687b      	ldr	r3, [r7, #4]
    6ba4:	0018      	movs	r0, r3
    6ba6:	4b16      	ldr	r3, [pc, #88]	; (6c00 <handleReconnect+0xc4>)
    6ba8:	4798      	blx	r3
    6baa:	0003      	movs	r3, r0
    6bac:	7023      	strb	r3, [r4, #0]
        if(MQTT_NETWORK_RECONNECTED == rc) {
    6bae:	230e      	movs	r3, #14
    6bb0:	18fb      	adds	r3, r7, r3
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	b25b      	sxtb	r3, r3
    6bb6:	2b01      	cmp	r3, #1
    6bb8:	d101      	bne.n	6bbe <handleReconnect+0x82>
            return MQTT_NETWORK_RECONNECTED;
    6bba:	2301      	movs	r3, #1
    6bbc:	e01a      	b.n	6bf4 <handleReconnect+0xb8>
        }
    }

    c->currentReconnectWaitInterval *= 2;
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	691b      	ldr	r3, [r3, #16]
    6bc2:	005a      	lsls	r2, r3, #1
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	611a      	str	r2, [r3, #16]

    if(MAX_RECONNECT_WAIT_INTERVAL < c->currentReconnectWaitInterval) {
    6bc8:	687b      	ldr	r3, [r7, #4]
    6bca:	691a      	ldr	r2, [r3, #16]
    6bcc:	23fa      	movs	r3, #250	; 0xfa
    6bce:	015b      	lsls	r3, r3, #5
    6bd0:	429a      	cmp	r2, r3
    6bd2:	d902      	bls.n	6bda <handleReconnect+0x9e>
        return MQTT_RECONNECT_TIMED_OUT;
    6bd4:	2308      	movs	r3, #8
    6bd6:	425b      	negs	r3, r3
    6bd8:	e00c      	b.n	6bf4 <handleReconnect+0xb8>
    }
    countdown_ms(&(c->reconnectDelayTimer), c->currentReconnectWaitInterval);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	33bc      	adds	r3, #188	; 0xbc
    6bde:	001a      	movs	r2, r3
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	691b      	ldr	r3, [r3, #16]
    6be4:	0019      	movs	r1, r3
    6be6:	0010      	movs	r0, r2
    6be8:	4b06      	ldr	r3, [pc, #24]	; (6c04 <handleReconnect+0xc8>)
    6bea:	4798      	blx	r3
    return rc;
    6bec:	230e      	movs	r3, #14
    6bee:	18fb      	adds	r3, r7, r3
    6bf0:	781b      	ldrb	r3, [r3, #0]
    6bf2:	b25b      	sxtb	r3, r3
}
    6bf4:	0018      	movs	r0, r3
    6bf6:	46bd      	mov	sp, r7
    6bf8:	b005      	add	sp, #20
    6bfa:	bd90      	pop	{r4, r7, pc}
    6bfc:	0000636d 	.word	0x0000636d
    6c00:	00006abd 	.word	0x00006abd
    6c04:	000063a5 	.word	0x000063a5

00006c08 <keepalive>:

MQTTReturnCode keepalive(Client *c) {
    6c08:	b590      	push	{r4, r7, lr}
    6c0a:	b087      	sub	sp, #28
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d102      	bne.n	6c1c <keepalive+0x14>
        return MQTT_NULL_VALUE_ERROR;
    6c16:	2306      	movs	r3, #6
    6c18:	425b      	negs	r3, r3
    6c1a:	e068      	b.n	6cee <keepalive+0xe6>
    }

	if(0 == c->keepAliveInterval) {
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	68db      	ldr	r3, [r3, #12]
    6c20:	2b00      	cmp	r3, #0
    6c22:	d101      	bne.n	6c28 <keepalive+0x20>
		return SUCCESS;
    6c24:	2300      	movs	r3, #0
    6c26:	e062      	b.n	6cee <keepalive+0xe6>
	}

	if(!expired(&c->pingTimer)) {
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	33b4      	adds	r3, #180	; 0xb4
    6c2c:	0018      	movs	r0, r3
    6c2e:	4b32      	ldr	r3, [pc, #200]	; (6cf8 <keepalive+0xf0>)
    6c30:	4798      	blx	r3
    6c32:	1e03      	subs	r3, r0, #0
    6c34:	d101      	bne.n	6c3a <keepalive+0x32>
        return SUCCESS;
    6c36:	2300      	movs	r3, #0
    6c38:	e059      	b.n	6cee <keepalive+0xe6>
    }

    if(c->isPingOutstanding) {
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	789b      	ldrb	r3, [r3, #2]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	d005      	beq.n	6c4e <keepalive+0x46>
        return handleDisconnect(c);
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	0018      	movs	r0, r3
    6c46:	4b2d      	ldr	r3, [pc, #180]	; (6cfc <keepalive+0xf4>)
    6c48:	4798      	blx	r3
    6c4a:	0003      	movs	r3, r0
    6c4c:	e04f      	b.n	6cee <keepalive+0xe6>
    }

    /* there is no ping outstanding - send one */
    MQTTReturnCode rc = SUCCESS;
    6c4e:	2317      	movs	r3, #23
    6c50:	18fb      	adds	r3, r7, r3
    6c52:	2200      	movs	r2, #0
    6c54:	701a      	strb	r2, [r3, #0]
    Timer timer;
    InitTimer(&timer);
    6c56:	230c      	movs	r3, #12
    6c58:	18fb      	adds	r3, r7, r3
    6c5a:	0018      	movs	r0, r3
    6c5c:	4b28      	ldr	r3, [pc, #160]	; (6d00 <keepalive+0xf8>)
    6c5e:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    6c60:	687b      	ldr	r3, [r7, #4]
    6c62:	689a      	ldr	r2, [r3, #8]
    6c64:	230c      	movs	r3, #12
    6c66:	18fb      	adds	r3, r7, r3
    6c68:	0011      	movs	r1, r2
    6c6a:	0018      	movs	r0, r3
    6c6c:	4b25      	ldr	r3, [pc, #148]	; (6d04 <keepalive+0xfc>)
    6c6e:	4798      	blx	r3
    uint32_t serialized_len = 0;
    6c70:	2300      	movs	r3, #0
    6c72:	60bb      	str	r3, [r7, #8]
    rc = MQTTSerialize_pingreq(c->buf, c->bufSize, &serialized_len);
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	6a18      	ldr	r0, [r3, #32]
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	699b      	ldr	r3, [r3, #24]
    6c7c:	2217      	movs	r2, #23
    6c7e:	18bc      	adds	r4, r7, r2
    6c80:	2208      	movs	r2, #8
    6c82:	18ba      	adds	r2, r7, r2
    6c84:	0019      	movs	r1, r3
    6c86:	4b20      	ldr	r3, [pc, #128]	; (6d08 <keepalive+0x100>)
    6c88:	4798      	blx	r3
    6c8a:	0003      	movs	r3, r0
    6c8c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6c8e:	2317      	movs	r3, #23
    6c90:	18fb      	adds	r3, r7, r3
    6c92:	781b      	ldrb	r3, [r3, #0]
    6c94:	b25b      	sxtb	r3, r3
    6c96:	2b00      	cmp	r3, #0
    6c98:	d004      	beq.n	6ca4 <keepalive+0x9c>
        return rc;
    6c9a:	2317      	movs	r3, #23
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	b25b      	sxtb	r3, r3
    6ca2:	e024      	b.n	6cee <keepalive+0xe6>
    }

    /* send the ping packet */
    rc = sendPacket(c, serialized_len, &timer);
    6ca4:	68b9      	ldr	r1, [r7, #8]
    6ca6:	2317      	movs	r3, #23
    6ca8:	18fc      	adds	r4, r7, r3
    6caa:	230c      	movs	r3, #12
    6cac:	18fa      	adds	r2, r7, r3
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	0018      	movs	r0, r3
    6cb2:	4b16      	ldr	r3, [pc, #88]	; (6d0c <keepalive+0x104>)
    6cb4:	4798      	blx	r3
    6cb6:	0003      	movs	r3, r0
    6cb8:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6cba:	2317      	movs	r3, #23
    6cbc:	18fb      	adds	r3, r7, r3
    6cbe:	781b      	ldrb	r3, [r3, #0]
    6cc0:	b25b      	sxtb	r3, r3
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d005      	beq.n	6cd2 <keepalive+0xca>
    	//If sending a PING fails we can no longer determine if we are connected.  In this case we decide we are disconnected and begin reconnection attempts
        return handleDisconnect(c);
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	0018      	movs	r0, r3
    6cca:	4b0c      	ldr	r3, [pc, #48]	; (6cfc <keepalive+0xf4>)
    6ccc:	4798      	blx	r3
    6cce:	0003      	movs	r3, r0
    6cd0:	e00d      	b.n	6cee <keepalive+0xe6>
    }

    c->isPingOutstanding = 1;
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	2201      	movs	r2, #1
    6cd6:	709a      	strb	r2, [r3, #2]
    /* start a timer to wait for PINGRESP from server */
    countdown(&c->pingTimer, c->keepAliveInterval / 2);
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	33b4      	adds	r3, #180	; 0xb4
    6cdc:	001a      	movs	r2, r3
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	68db      	ldr	r3, [r3, #12]
    6ce2:	085b      	lsrs	r3, r3, #1
    6ce4:	0019      	movs	r1, r3
    6ce6:	0010      	movs	r0, r2
    6ce8:	4b09      	ldr	r3, [pc, #36]	; (6d10 <keepalive+0x108>)
    6cea:	4798      	blx	r3

    return SUCCESS;
    6cec:	2300      	movs	r3, #0
}
    6cee:	0018      	movs	r0, r3
    6cf0:	46bd      	mov	sp, r7
    6cf2:	b007      	add	sp, #28
    6cf4:	bd90      	pop	{r4, r7, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)
    6cf8:	0000636d 	.word	0x0000636d
    6cfc:	00006a55 	.word	0x00006a55
    6d00:	0000647d 	.word	0x0000647d
    6d04:	000063a5 	.word	0x000063a5
    6d08:	00007f01 	.word	0x00007f01
    6d0c:	000064f5 	.word	0x000064f5
    6d10:	000063f5 	.word	0x000063f5

00006d14 <handlePublish>:

MQTTReturnCode handlePublish(Client *c, Timer *timer) {
    6d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d16:	b093      	sub	sp, #76	; 0x4c
    6d18:	af06      	add	r7, sp, #24
    6d1a:	6078      	str	r0, [r7, #4]
    6d1c:	6039      	str	r1, [r7, #0]
    MQTTString topicName;
    MQTTMessage msg;
    MQTTReturnCode rc;
    uint32_t len = 0;
    6d1e:	2300      	movs	r3, #0
    6d20:	60fb      	str	r3, [r7, #12]

    rc = MQTTDeserialize_publish((unsigned char *) &msg.dup, (QoS *) &msg.qos, (unsigned char *) &msg.retained,
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	69db      	ldr	r3, [r3, #28]
    6d2a:	212f      	movs	r1, #47	; 0x2f
    6d2c:	187c      	adds	r4, r7, r1
    6d2e:	2110      	movs	r1, #16
    6d30:	1879      	adds	r1, r7, r1
    6d32:	3104      	adds	r1, #4
    6d34:	468c      	mov	ip, r1
    6d36:	2110      	movs	r1, #16
    6d38:	1879      	adds	r1, r7, r1
    6d3a:	1c4e      	adds	r6, r1, #1
    6d3c:	2110      	movs	r1, #16
    6d3e:	187d      	adds	r5, r7, r1
    6d40:	2110      	movs	r1, #16
    6d42:	1879      	adds	r1, r7, r1
    6d44:	1c88      	adds	r0, r1, #2
    6d46:	9304      	str	r3, [sp, #16]
    6d48:	9203      	str	r2, [sp, #12]
    6d4a:	2310      	movs	r3, #16
    6d4c:	18fb      	adds	r3, r7, r3
    6d4e:	330c      	adds	r3, #12
    6d50:	9302      	str	r3, [sp, #8]
    6d52:	2310      	movs	r3, #16
    6d54:	18fb      	adds	r3, r7, r3
    6d56:	3308      	adds	r3, #8
    6d58:	9301      	str	r3, [sp, #4]
    6d5a:	2320      	movs	r3, #32
    6d5c:	18fb      	adds	r3, r7, r3
    6d5e:	9300      	str	r3, [sp, #0]
    6d60:	4663      	mov	r3, ip
    6d62:	0032      	movs	r2, r6
    6d64:	0029      	movs	r1, r5
    6d66:	4d3f      	ldr	r5, [pc, #252]	; (6e64 <handlePublish+0x150>)
    6d68:	47a8      	blx	r5
    6d6a:	0003      	movs	r3, r0
    6d6c:	7023      	strb	r3, [r4, #0]
                                 (uint16_t *)&msg.id, &topicName,
                                 (unsigned char **) &msg.payload, (uint32_t *) &msg.payloadlen, c->readbuf,
                                 c->readBufSize);
    if(SUCCESS != rc) {
    6d6e:	232f      	movs	r3, #47	; 0x2f
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	b25b      	sxtb	r3, r3
    6d76:	2b00      	cmp	r3, #0
    6d78:	d004      	beq.n	6d84 <handlePublish+0x70>
        return rc;
    6d7a:	232f      	movs	r3, #47	; 0x2f
    6d7c:	18fb      	adds	r3, r7, r3
    6d7e:	781b      	ldrb	r3, [r3, #0]
    6d80:	b25b      	sxtb	r3, r3
    6d82:	e06a      	b.n	6e5a <handlePublish+0x146>
    }

    rc = deliverMessage(c, &topicName, &msg);
    6d84:	232f      	movs	r3, #47	; 0x2f
    6d86:	18fc      	adds	r4, r7, r3
    6d88:	2310      	movs	r3, #16
    6d8a:	18fa      	adds	r2, r7, r3
    6d8c:	2320      	movs	r3, #32
    6d8e:	18f9      	adds	r1, r7, r3
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	0018      	movs	r0, r3
    6d94:	4b34      	ldr	r3, [pc, #208]	; (6e68 <handlePublish+0x154>)
    6d96:	4798      	blx	r3
    6d98:	0003      	movs	r3, r0
    6d9a:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6d9c:	232f      	movs	r3, #47	; 0x2f
    6d9e:	18fb      	adds	r3, r7, r3
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	b25b      	sxtb	r3, r3
    6da4:	2b00      	cmp	r3, #0
    6da6:	d004      	beq.n	6db2 <handlePublish+0x9e>
        return rc;
    6da8:	232f      	movs	r3, #47	; 0x2f
    6daa:	18fb      	adds	r3, r7, r3
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	b25b      	sxtb	r3, r3
    6db0:	e053      	b.n	6e5a <handlePublish+0x146>
    }

    if(QOS0 == msg.qos) {
    6db2:	2310      	movs	r3, #16
    6db4:	18fb      	adds	r3, r7, r3
    6db6:	781b      	ldrb	r3, [r3, #0]
    6db8:	2b00      	cmp	r3, #0
    6dba:	d101      	bne.n	6dc0 <handlePublish+0xac>
        /* No further processing required for QOS0 */
        return SUCCESS;
    6dbc:	2300      	movs	r3, #0
    6dbe:	e04c      	b.n	6e5a <handlePublish+0x146>
    }

    if(QOS1 == msg.qos) {
    6dc0:	2310      	movs	r3, #16
    6dc2:	18fb      	adds	r3, r7, r3
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	2b01      	cmp	r3, #1
    6dc8:	d113      	bne.n	6df2 <handlePublish+0xde>
        rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBACK, 0, msg.id, &len);
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	6a18      	ldr	r0, [r3, #32]
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	6999      	ldr	r1, [r3, #24]
    6dd2:	2310      	movs	r3, #16
    6dd4:	18fb      	adds	r3, r7, r3
    6dd6:	889b      	ldrh	r3, [r3, #4]
    6dd8:	222f      	movs	r2, #47	; 0x2f
    6dda:	18bc      	adds	r4, r7, r2
    6ddc:	220c      	movs	r2, #12
    6dde:	18ba      	adds	r2, r7, r2
    6de0:	9201      	str	r2, [sp, #4]
    6de2:	9300      	str	r3, [sp, #0]
    6de4:	2300      	movs	r3, #0
    6de6:	2204      	movs	r2, #4
    6de8:	4d20      	ldr	r5, [pc, #128]	; (6e6c <handlePublish+0x158>)
    6dea:	47a8      	blx	r5
    6dec:	0003      	movs	r3, r0
    6dee:	7023      	strb	r3, [r4, #0]
    6df0:	e012      	b.n	6e18 <handlePublish+0x104>
    } else { /* Message is not QOS0 or 1 means only option left is QOS2 */
        rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBREC, 0, msg.id, &len);
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	6a18      	ldr	r0, [r3, #32]
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	6999      	ldr	r1, [r3, #24]
    6dfa:	2310      	movs	r3, #16
    6dfc:	18fb      	adds	r3, r7, r3
    6dfe:	889b      	ldrh	r3, [r3, #4]
    6e00:	222f      	movs	r2, #47	; 0x2f
    6e02:	18bc      	adds	r4, r7, r2
    6e04:	220c      	movs	r2, #12
    6e06:	18ba      	adds	r2, r7, r2
    6e08:	9201      	str	r2, [sp, #4]
    6e0a:	9300      	str	r3, [sp, #0]
    6e0c:	2300      	movs	r3, #0
    6e0e:	2205      	movs	r2, #5
    6e10:	4d16      	ldr	r5, [pc, #88]	; (6e6c <handlePublish+0x158>)
    6e12:	47a8      	blx	r5
    6e14:	0003      	movs	r3, r0
    6e16:	7023      	strb	r3, [r4, #0]
    }

    if(SUCCESS != rc) {
    6e18:	232f      	movs	r3, #47	; 0x2f
    6e1a:	18fb      	adds	r3, r7, r3
    6e1c:	781b      	ldrb	r3, [r3, #0]
    6e1e:	b25b      	sxtb	r3, r3
    6e20:	2b00      	cmp	r3, #0
    6e22:	d004      	beq.n	6e2e <handlePublish+0x11a>
        return rc;
    6e24:	232f      	movs	r3, #47	; 0x2f
    6e26:	18fb      	adds	r3, r7, r3
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	b25b      	sxtb	r3, r3
    6e2c:	e015      	b.n	6e5a <handlePublish+0x146>
    }

    rc = sendPacket(c, len, timer);
    6e2e:	68f9      	ldr	r1, [r7, #12]
    6e30:	232f      	movs	r3, #47	; 0x2f
    6e32:	18fc      	adds	r4, r7, r3
    6e34:	683a      	ldr	r2, [r7, #0]
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	0018      	movs	r0, r3
    6e3a:	4b0d      	ldr	r3, [pc, #52]	; (6e70 <handlePublish+0x15c>)
    6e3c:	4798      	blx	r3
    6e3e:	0003      	movs	r3, r0
    6e40:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6e42:	232f      	movs	r3, #47	; 0x2f
    6e44:	18fb      	adds	r3, r7, r3
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	b25b      	sxtb	r3, r3
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d004      	beq.n	6e58 <handlePublish+0x144>
        return rc;
    6e4e:	232f      	movs	r3, #47	; 0x2f
    6e50:	18fb      	adds	r3, r7, r3
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	b25b      	sxtb	r3, r3
    6e56:	e000      	b.n	6e5a <handlePublish+0x146>
    }

    return SUCCESS;
    6e58:	2300      	movs	r3, #0
}
    6e5a:	0018      	movs	r0, r3
    6e5c:	46bd      	mov	sp, r7
    6e5e:	b00d      	add	sp, #52	; 0x34
    6e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e62:	46c0      	nop			; (mov r8, r8)
    6e64:	00007f29 	.word	0x00007f29
    6e68:	00006949 	.word	0x00006949
    6e6c:	00008a95 	.word	0x00008a95
    6e70:	000064f5 	.word	0x000064f5

00006e74 <handlePubrec>:

MQTTReturnCode handlePubrec(Client *c, Timer *timer) {
    6e74:	b5b0      	push	{r4, r5, r7, lr}
    6e76:	b088      	sub	sp, #32
    6e78:	af02      	add	r7, sp, #8
    6e7a:	6078      	str	r0, [r7, #4]
    6e7c:	6039      	str	r1, [r7, #0]
    uint16_t packet_id;
    unsigned char dup, type;
    MQTTReturnCode rc;
    rc = MQTTDeserialize_ack(&type, &dup, &packet_id, c->readbuf, c->readBufSize);
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	69db      	ldr	r3, [r3, #28]
    6e86:	2217      	movs	r2, #23
    6e88:	18bc      	adds	r4, r7, r2
    6e8a:	2214      	movs	r2, #20
    6e8c:	18ba      	adds	r2, r7, r2
    6e8e:	2113      	movs	r1, #19
    6e90:	1879      	adds	r1, r7, r1
    6e92:	2012      	movs	r0, #18
    6e94:	1838      	adds	r0, r7, r0
    6e96:	9300      	str	r3, [sp, #0]
    6e98:	002b      	movs	r3, r5
    6e9a:	4d23      	ldr	r5, [pc, #140]	; (6f28 <handlePubrec+0xb4>)
    6e9c:	47a8      	blx	r5
    6e9e:	0003      	movs	r3, r0
    6ea0:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6ea2:	2317      	movs	r3, #23
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	b25b      	sxtb	r3, r3
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d004      	beq.n	6eb8 <handlePubrec+0x44>
        return rc;
    6eae:	2317      	movs	r3, #23
    6eb0:	18fb      	adds	r3, r7, r3
    6eb2:	781b      	ldrb	r3, [r3, #0]
    6eb4:	b25b      	sxtb	r3, r3
    6eb6:	e033      	b.n	6f20 <handlePubrec+0xac>
    }

    uint32_t len;
    rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBREL, 0, packet_id, &len);
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	6a18      	ldr	r0, [r3, #32]
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	6999      	ldr	r1, [r3, #24]
    6ec0:	2314      	movs	r3, #20
    6ec2:	18fb      	adds	r3, r7, r3
    6ec4:	881b      	ldrh	r3, [r3, #0]
    6ec6:	2217      	movs	r2, #23
    6ec8:	18bc      	adds	r4, r7, r2
    6eca:	220c      	movs	r2, #12
    6ecc:	18ba      	adds	r2, r7, r2
    6ece:	9201      	str	r2, [sp, #4]
    6ed0:	9300      	str	r3, [sp, #0]
    6ed2:	2300      	movs	r3, #0
    6ed4:	2206      	movs	r2, #6
    6ed6:	4d15      	ldr	r5, [pc, #84]	; (6f2c <handlePubrec+0xb8>)
    6ed8:	47a8      	blx	r5
    6eda:	0003      	movs	r3, r0
    6edc:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6ede:	2317      	movs	r3, #23
    6ee0:	18fb      	adds	r3, r7, r3
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	b25b      	sxtb	r3, r3
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d004      	beq.n	6ef4 <handlePubrec+0x80>
        return rc;
    6eea:	2317      	movs	r3, #23
    6eec:	18fb      	adds	r3, r7, r3
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	b25b      	sxtb	r3, r3
    6ef2:	e015      	b.n	6f20 <handlePubrec+0xac>
    }

    /* send the PUBREL packet */
    rc = sendPacket(c, len, timer);
    6ef4:	68f9      	ldr	r1, [r7, #12]
    6ef6:	2317      	movs	r3, #23
    6ef8:	18fc      	adds	r4, r7, r3
    6efa:	683a      	ldr	r2, [r7, #0]
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	0018      	movs	r0, r3
    6f00:	4b0b      	ldr	r3, [pc, #44]	; (6f30 <handlePubrec+0xbc>)
    6f02:	4798      	blx	r3
    6f04:	0003      	movs	r3, r0
    6f06:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    6f08:	2317      	movs	r3, #23
    6f0a:	18fb      	adds	r3, r7, r3
    6f0c:	781b      	ldrb	r3, [r3, #0]
    6f0e:	b25b      	sxtb	r3, r3
    6f10:	2b00      	cmp	r3, #0
    6f12:	d004      	beq.n	6f1e <handlePubrec+0xaa>
        /* there was a problem */
        return rc;
    6f14:	2317      	movs	r3, #23
    6f16:	18fb      	adds	r3, r7, r3
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	b25b      	sxtb	r3, r3
    6f1c:	e000      	b.n	6f20 <handlePubrec+0xac>
    }

    return SUCCESS;
    6f1e:	2300      	movs	r3, #0
}
    6f20:	0018      	movs	r0, r3
    6f22:	46bd      	mov	sp, r7
    6f24:	b006      	add	sp, #24
    6f26:	bdb0      	pop	{r4, r5, r7, pc}
    6f28:	00008081 	.word	0x00008081
    6f2c:	00008a95 	.word	0x00008a95
    6f30:	000064f5 	.word	0x000064f5

00006f34 <cycle>:

MQTTReturnCode cycle(Client *c, Timer *timer, uint8_t *packet_type) {
    6f34:	b590      	push	{r4, r7, lr}
    6f36:	b087      	sub	sp, #28
    6f38:	af00      	add	r7, sp, #0
    6f3a:	60f8      	str	r0, [r7, #12]
    6f3c:	60b9      	str	r1, [r7, #8]
    6f3e:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	2b00      	cmp	r3, #0
    6f44:	d002      	beq.n	6f4c <cycle+0x18>
    6f46:	68bb      	ldr	r3, [r7, #8]
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d102      	bne.n	6f52 <cycle+0x1e>
        return MQTT_NULL_VALUE_ERROR;
    6f4c:	2306      	movs	r3, #6
    6f4e:	425b      	negs	r3, r3
    6f50:	e050      	b.n	6ff4 <cycle+0xc0>
    }

    /* read the socket, see what work is due */
    MQTTReturnCode rc = readPacket(c, timer, packet_type);
    6f52:	2317      	movs	r3, #23
    6f54:	18fc      	adds	r4, r7, r3
    6f56:	687a      	ldr	r2, [r7, #4]
    6f58:	68b9      	ldr	r1, [r7, #8]
    6f5a:	68fb      	ldr	r3, [r7, #12]
    6f5c:	0018      	movs	r0, r3
    6f5e:	4b27      	ldr	r3, [pc, #156]	; (6ffc <cycle+0xc8>)
    6f60:	4798      	blx	r3
    6f62:	0003      	movs	r3, r0
    6f64:	7023      	strb	r3, [r4, #0]
    if(MQTT_NOTHING_TO_READ == rc) {
    6f66:	2317      	movs	r3, #23
    6f68:	18fb      	adds	r3, r7, r3
    6f6a:	781b      	ldrb	r3, [r3, #0]
    6f6c:	b25b      	sxtb	r3, r3
    6f6e:	2b02      	cmp	r3, #2
    6f70:	d101      	bne.n	6f76 <cycle+0x42>
        /* Nothing to read, not a cycle failure */
        return SUCCESS;
    6f72:	2300      	movs	r3, #0
    6f74:	e03e      	b.n	6ff4 <cycle+0xc0>
    }
    if(SUCCESS != rc) {
    6f76:	2317      	movs	r3, #23
    6f78:	18fb      	adds	r3, r7, r3
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	b25b      	sxtb	r3, r3
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d004      	beq.n	6f8c <cycle+0x58>
        return rc;
    6f82:	2317      	movs	r3, #23
    6f84:	18fb      	adds	r3, r7, r3
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	b25b      	sxtb	r3, r3
    6f8a:	e033      	b.n	6ff4 <cycle+0xc0>
    }

    switch(*packet_type) {
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	781b      	ldrb	r3, [r3, #0]
    6f90:	2b0d      	cmp	r3, #13
    6f92:	d827      	bhi.n	6fe4 <cycle+0xb0>
    6f94:	009a      	lsls	r2, r3, #2
    6f96:	4b1a      	ldr	r3, [pc, #104]	; (7000 <cycle+0xcc>)
    6f98:	18d3      	adds	r3, r2, r3
    6f9a:	681b      	ldr	r3, [r3, #0]
    6f9c:	469f      	mov	pc, r3
        case PUBACK:
        case SUBACK:
        case UNSUBACK:
            break;
        case PUBLISH: {
            rc = handlePublish(c, timer);
    6f9e:	2317      	movs	r3, #23
    6fa0:	18fc      	adds	r4, r7, r3
    6fa2:	68ba      	ldr	r2, [r7, #8]
    6fa4:	68fb      	ldr	r3, [r7, #12]
    6fa6:	0011      	movs	r1, r2
    6fa8:	0018      	movs	r0, r3
    6faa:	4b16      	ldr	r3, [pc, #88]	; (7004 <cycle+0xd0>)
    6fac:	4798      	blx	r3
    6fae:	0003      	movs	r3, r0
    6fb0:	7023      	strb	r3, [r4, #0]
            break;
    6fb2:	e01b      	b.n	6fec <cycle+0xb8>
        }
        case PUBREC: {
            rc = handlePubrec(c, timer);
    6fb4:	2317      	movs	r3, #23
    6fb6:	18fc      	adds	r4, r7, r3
    6fb8:	68ba      	ldr	r2, [r7, #8]
    6fba:	68fb      	ldr	r3, [r7, #12]
    6fbc:	0011      	movs	r1, r2
    6fbe:	0018      	movs	r0, r3
    6fc0:	4b11      	ldr	r3, [pc, #68]	; (7008 <cycle+0xd4>)
    6fc2:	4798      	blx	r3
    6fc4:	0003      	movs	r3, r0
    6fc6:	7023      	strb	r3, [r4, #0]
            break;
    6fc8:	e010      	b.n	6fec <cycle+0xb8>
        }
        case PUBCOMP:
            break;
        case PINGRESP: {
            c->isPingOutstanding = 0;
    6fca:	68fb      	ldr	r3, [r7, #12]
    6fcc:	2200      	movs	r2, #0
    6fce:	709a      	strb	r2, [r3, #2]
            countdown(&c->pingTimer, c->keepAliveInterval);
    6fd0:	68fb      	ldr	r3, [r7, #12]
    6fd2:	33b4      	adds	r3, #180	; 0xb4
    6fd4:	001a      	movs	r2, r3
    6fd6:	68fb      	ldr	r3, [r7, #12]
    6fd8:	68db      	ldr	r3, [r3, #12]
    6fda:	0019      	movs	r1, r3
    6fdc:	0010      	movs	r0, r2
    6fde:	4b0b      	ldr	r3, [pc, #44]	; (700c <cycle+0xd8>)
    6fe0:	4798      	blx	r3
            break;
    6fe2:	e003      	b.n	6fec <cycle+0xb8>
        }
        default: {
            /* Either unknown packet type or Failure occurred
             * Should not happen */
        	return MQTT_BUFFER_RX_MESSAGE_INVALID;
    6fe4:	2312      	movs	r3, #18
    6fe6:	425b      	negs	r3, r3
    6fe8:	e004      	b.n	6ff4 <cycle+0xc0>
            break;
    6fea:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }

    return rc;
    6fec:	2317      	movs	r3, #23
    6fee:	18fb      	adds	r3, r7, r3
    6ff0:	781b      	ldrb	r3, [r3, #0]
    6ff2:	b25b      	sxtb	r3, r3
}
    6ff4:	0018      	movs	r0, r3
    6ff6:	46bd      	mov	sp, r7
    6ff8:	b007      	add	sp, #28
    6ffa:	bd90      	pop	{r4, r7, pc}
    6ffc:	000066c5 	.word	0x000066c5
    7000:	0001c5a8 	.word	0x0001c5a8
    7004:	00006d15 	.word	0x00006d15
    7008:	00006e75 	.word	0x00006e75
    700c:	000063f5 	.word	0x000063f5

00007010 <MQTTYield>:

MQTTReturnCode MQTTYield(Client *c, uint32_t timeout_ms) {
    7010:	b590      	push	{r4, r7, lr}
    7012:	b087      	sub	sp, #28
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
    7018:	6039      	str	r1, [r7, #0]
    if(NULL == c) {
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	2b00      	cmp	r3, #0
    701e:	d102      	bne.n	7026 <MQTTYield+0x16>
        return MQTT_NULL_VALUE_ERROR;
    7020:	2306      	movs	r3, #6
    7022:	425b      	negs	r3, r3
    7024:	e08d      	b.n	7142 <MQTTYield+0x132>
    }

    /* Check if network was manually disconnected */
    if(0 == c->isConnected && 1 == c->wasManuallyDisconnected) {
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	2b00      	cmp	r3, #0
    702c:	d105      	bne.n	703a <MQTTYield+0x2a>
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	785b      	ldrb	r3, [r3, #1]
    7032:	2b01      	cmp	r3, #1
    7034:	d101      	bne.n	703a <MQTTYield+0x2a>
        return MQTT_NETWORK_MANUALLY_DISCONNECTED;
    7036:	2305      	movs	r3, #5
    7038:	e083      	b.n	7142 <MQTTYield+0x132>
    }

    /* Check if network is disconnected and auto-reconnect is not enabled */
    if(0 == c->isConnected && 0 == c->isAutoReconnectEnabled) {
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	781b      	ldrb	r3, [r3, #0]
    703e:	2b00      	cmp	r3, #0
    7040:	d106      	bne.n	7050 <MQTTYield+0x40>
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	78db      	ldrb	r3, [r3, #3]
    7046:	2b00      	cmp	r3, #0
    7048:	d102      	bne.n	7050 <MQTTYield+0x40>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    704a:	2304      	movs	r3, #4
    704c:	425b      	negs	r3, r3
    704e:	e078      	b.n	7142 <MQTTYield+0x132>
    }

    MQTTReturnCode rc = SUCCESS;
    7050:	2317      	movs	r3, #23
    7052:	18fb      	adds	r3, r7, r3
    7054:	2200      	movs	r2, #0
    7056:	701a      	strb	r2, [r3, #0]
    Timer timer;
    InitTimer(&timer);
    7058:	230c      	movs	r3, #12
    705a:	18fb      	adds	r3, r7, r3
    705c:	0018      	movs	r0, r3
    705e:	4b3b      	ldr	r3, [pc, #236]	; (714c <MQTTYield+0x13c>)
    7060:	4798      	blx	r3
    uint8_t packet_type;
    countdown_ms(&timer, timeout_ms);
    7062:	683a      	ldr	r2, [r7, #0]
    7064:	230c      	movs	r3, #12
    7066:	18fb      	adds	r3, r7, r3
    7068:	0011      	movs	r1, r2
    706a:	0018      	movs	r0, r3
    706c:	4b38      	ldr	r3, [pc, #224]	; (7150 <MQTTYield+0x140>)
    706e:	4798      	blx	r3

    while(!expired(&timer)) {
    7070:	e058      	b.n	7124 <MQTTYield+0x114>
        if(0 == c->isConnected) {
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d113      	bne.n	70a2 <MQTTYield+0x92>
            if(MAX_RECONNECT_WAIT_INTERVAL < c->currentReconnectWaitInterval) {
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	691a      	ldr	r2, [r3, #16]
    707e:	23fa      	movs	r3, #250	; 0xfa
    7080:	015b      	lsls	r3, r3, #5
    7082:	429a      	cmp	r2, r3
    7084:	d904      	bls.n	7090 <MQTTYield+0x80>
                rc = MQTT_RECONNECT_TIMED_OUT;
    7086:	2317      	movs	r3, #23
    7088:	18fb      	adds	r3, r7, r3
    708a:	22f8      	movs	r2, #248	; 0xf8
    708c:	701a      	strb	r2, [r3, #0]
                break;
    708e:	e054      	b.n	713a <MQTTYield+0x12a>
            }
            rc = handleReconnect(c);
    7090:	2317      	movs	r3, #23
    7092:	18fc      	adds	r4, r7, r3
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	0018      	movs	r0, r3
    7098:	4b2e      	ldr	r3, [pc, #184]	; (7154 <MQTTYield+0x144>)
    709a:	4798      	blx	r3
    709c:	0003      	movs	r3, r0
    709e:	7023      	strb	r3, [r4, #0]
            /* Network reconnect attempted, check if yield timer expired before
             * doing anything else */
            continue;
    70a0:	e040      	b.n	7124 <MQTTYield+0x114>
        }

        rc = cycle(c, &timer, &packet_type);
    70a2:	2317      	movs	r3, #23
    70a4:	18fc      	adds	r4, r7, r3
    70a6:	230b      	movs	r3, #11
    70a8:	18fa      	adds	r2, r7, r3
    70aa:	230c      	movs	r3, #12
    70ac:	18f9      	adds	r1, r7, r3
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	0018      	movs	r0, r3
    70b2:	4b29      	ldr	r3, [pc, #164]	; (7158 <MQTTYield+0x148>)
    70b4:	4798      	blx	r3
    70b6:	0003      	movs	r3, r0
    70b8:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    70ba:	2317      	movs	r3, #23
    70bc:	18fb      	adds	r3, r7, r3
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	b25b      	sxtb	r3, r3
    70c2:	2b00      	cmp	r3, #0
    70c4:	d136      	bne.n	7134 <MQTTYield+0x124>
            break;
        }

        rc = keepalive(c);
    70c6:	2317      	movs	r3, #23
    70c8:	18fc      	adds	r4, r7, r3
    70ca:	687b      	ldr	r3, [r7, #4]
    70cc:	0018      	movs	r0, r3
    70ce:	4b23      	ldr	r3, [pc, #140]	; (715c <MQTTYield+0x14c>)
    70d0:	4798      	blx	r3
    70d2:	0003      	movs	r3, r0
    70d4:	7023      	strb	r3, [r4, #0]
        if(MQTT_NETWORK_DISCONNECTED_ERROR == rc && 1 == c->isAutoReconnectEnabled) {
    70d6:	2317      	movs	r3, #23
    70d8:	18fb      	adds	r3, r7, r3
    70da:	781b      	ldrb	r3, [r3, #0]
    70dc:	b25b      	sxtb	r3, r3
    70de:	3304      	adds	r3, #4
    70e0:	d11a      	bne.n	7118 <MQTTYield+0x108>
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	78db      	ldrb	r3, [r3, #3]
    70e6:	2b01      	cmp	r3, #1
    70e8:	d116      	bne.n	7118 <MQTTYield+0x108>
            c->currentReconnectWaitInterval = MIN_RECONNECT_WAIT_INTERVAL;
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	22fa      	movs	r2, #250	; 0xfa
    70ee:	0092      	lsls	r2, r2, #2
    70f0:	611a      	str	r2, [r3, #16]
            countdown_ms(&(c->reconnectDelayTimer), c->currentReconnectWaitInterval);
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	33bc      	adds	r3, #188	; 0xbc
    70f6:	001a      	movs	r2, r3
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	691b      	ldr	r3, [r3, #16]
    70fc:	0019      	movs	r1, r3
    70fe:	0010      	movs	r0, r2
    7100:	4b13      	ldr	r3, [pc, #76]	; (7150 <MQTTYield+0x140>)
    7102:	4798      	blx	r3
            c->counterNetworkDisconnected++;
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	695b      	ldr	r3, [r3, #20]
    7108:	1c5a      	adds	r2, r3, #1
    710a:	687b      	ldr	r3, [r7, #4]
    710c:	615a      	str	r2, [r3, #20]
            /* Depending on timer values, it is possible that yield timer has expired
             * Set to rc to attempting reconnect to inform client that autoreconnect
             * attempt has started */
            rc = MQTT_ATTEMPTING_RECONNECT;
    710e:	2317      	movs	r3, #23
    7110:	18fb      	adds	r3, r7, r3
    7112:	2203      	movs	r2, #3
    7114:	701a      	strb	r2, [r3, #0]
    7116:	e005      	b.n	7124 <MQTTYield+0x114>
        } else if(SUCCESS != rc) {
    7118:	2317      	movs	r3, #23
    711a:	18fb      	adds	r3, r7, r3
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	b25b      	sxtb	r3, r3
    7120:	2b00      	cmp	r3, #0
    7122:	d109      	bne.n	7138 <MQTTYield+0x128>
    while(!expired(&timer)) {
    7124:	230c      	movs	r3, #12
    7126:	18fb      	adds	r3, r7, r3
    7128:	0018      	movs	r0, r3
    712a:	4b0d      	ldr	r3, [pc, #52]	; (7160 <MQTTYield+0x150>)
    712c:	4798      	blx	r3
    712e:	1e03      	subs	r3, r0, #0
    7130:	d09f      	beq.n	7072 <MQTTYield+0x62>
    7132:	e002      	b.n	713a <MQTTYield+0x12a>
            break;
    7134:	46c0      	nop			; (mov r8, r8)
    7136:	e000      	b.n	713a <MQTTYield+0x12a>
            break;
    7138:	46c0      	nop			; (mov r8, r8)
        }
    }

    return rc;
    713a:	2317      	movs	r3, #23
    713c:	18fb      	adds	r3, r7, r3
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	b25b      	sxtb	r3, r3
}
    7142:	0018      	movs	r0, r3
    7144:	46bd      	mov	sp, r7
    7146:	b007      	add	sp, #28
    7148:	bd90      	pop	{r4, r7, pc}
    714a:	46c0      	nop			; (mov r8, r8)
    714c:	0000647d 	.word	0x0000647d
    7150:	000063a5 	.word	0x000063a5
    7154:	00006b3d 	.word	0x00006b3d
    7158:	00006f35 	.word	0x00006f35
    715c:	00006c09 	.word	0x00006c09
    7160:	0000636d 	.word	0x0000636d

00007164 <waitfor>:

/* only used in single-threaded mode where one command at a time is in process */
MQTTReturnCode waitfor(Client *c, uint8_t packet_type, Timer *timer) {
    7164:	b590      	push	{r4, r7, lr}
    7166:	b087      	sub	sp, #28
    7168:	af00      	add	r7, sp, #0
    716a:	60f8      	str	r0, [r7, #12]
    716c:	607a      	str	r2, [r7, #4]
    716e:	230b      	movs	r3, #11
    7170:	18fb      	adds	r3, r7, r3
    7172:	1c0a      	adds	r2, r1, #0
    7174:	701a      	strb	r2, [r3, #0]
    if(NULL == c || NULL == timer) {
    7176:	68fb      	ldr	r3, [r7, #12]
    7178:	2b00      	cmp	r3, #0
    717a:	d002      	beq.n	7182 <waitfor+0x1e>
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	2b00      	cmp	r3, #0
    7180:	d102      	bne.n	7188 <waitfor+0x24>
        return MQTT_NULL_VALUE_ERROR;
    7182:	2306      	movs	r3, #6
    7184:	425b      	negs	r3, r3
    7186:	e03d      	b.n	7204 <waitfor+0xa0>
    }

    MQTTReturnCode rc = FAILURE;
    7188:	2317      	movs	r3, #23
    718a:	18fb      	adds	r3, r7, r3
    718c:	22ff      	movs	r2, #255	; 0xff
    718e:	701a      	strb	r2, [r3, #0]
    uint8_t read_packet_type = 0;
    7190:	2316      	movs	r3, #22
    7192:	18fb      	adds	r3, r7, r3
    7194:	2200      	movs	r2, #0
    7196:	701a      	strb	r2, [r3, #0]
    do {
        if(expired(timer)) {
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	0018      	movs	r0, r3
    719c:	4b1b      	ldr	r3, [pc, #108]	; (720c <waitfor+0xa8>)
    719e:	4798      	blx	r3
    71a0:	1e03      	subs	r3, r0, #0
    71a2:	d119      	bne.n	71d8 <waitfor+0x74>
            /* we timed out */
            break;
        }
        rc = cycle(c, timer, &read_packet_type);
    71a4:	2317      	movs	r3, #23
    71a6:	18fc      	adds	r4, r7, r3
    71a8:	2316      	movs	r3, #22
    71aa:	18fa      	adds	r2, r7, r3
    71ac:	6879      	ldr	r1, [r7, #4]
    71ae:	68fb      	ldr	r3, [r7, #12]
    71b0:	0018      	movs	r0, r3
    71b2:	4b17      	ldr	r3, [pc, #92]	; (7210 <waitfor+0xac>)
    71b4:	4798      	blx	r3
    71b6:	0003      	movs	r3, r0
    71b8:	7023      	strb	r3, [r4, #0]
    }while(MQTT_NETWORK_DISCONNECTED_ERROR != rc  && read_packet_type != packet_type);
    71ba:	2317      	movs	r3, #23
    71bc:	18fb      	adds	r3, r7, r3
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	b25b      	sxtb	r3, r3
    71c2:	3304      	adds	r3, #4
    71c4:	d009      	beq.n	71da <waitfor+0x76>
    71c6:	2316      	movs	r3, #22
    71c8:	18fb      	adds	r3, r7, r3
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	220b      	movs	r2, #11
    71ce:	18ba      	adds	r2, r7, r2
    71d0:	7812      	ldrb	r2, [r2, #0]
    71d2:	429a      	cmp	r2, r3
    71d4:	d1e0      	bne.n	7198 <waitfor+0x34>
    71d6:	e000      	b.n	71da <waitfor+0x76>
            break;
    71d8:	46c0      	nop			; (mov r8, r8)

    if(MQTT_NETWORK_DISCONNECTED_ERROR != rc && read_packet_type != packet_type) {
    71da:	2317      	movs	r3, #23
    71dc:	18fb      	adds	r3, r7, r3
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	b25b      	sxtb	r3, r3
    71e2:	3304      	adds	r3, #4
    71e4:	d00a      	beq.n	71fc <waitfor+0x98>
    71e6:	2316      	movs	r3, #22
    71e8:	18fb      	adds	r3, r7, r3
    71ea:	781b      	ldrb	r3, [r3, #0]
    71ec:	220b      	movs	r2, #11
    71ee:	18ba      	adds	r2, r7, r2
    71f0:	7812      	ldrb	r2, [r2, #0]
    71f2:	429a      	cmp	r2, r3
    71f4:	d002      	beq.n	71fc <waitfor+0x98>
        return FAILURE;
    71f6:	2301      	movs	r3, #1
    71f8:	425b      	negs	r3, r3
    71fa:	e003      	b.n	7204 <waitfor+0xa0>
    }

    /* Something failed or we didn't receive the expected packet, return error code */
    return rc;
    71fc:	2317      	movs	r3, #23
    71fe:	18fb      	adds	r3, r7, r3
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	b25b      	sxtb	r3, r3
}
    7204:	0018      	movs	r0, r3
    7206:	46bd      	mov	sp, r7
    7208:	b007      	add	sp, #28
    720a:	bd90      	pop	{r4, r7, pc}
    720c:	0000636d 	.word	0x0000636d
    7210:	00006f35 	.word	0x00006f35

00007214 <MQTTConnect>:

MQTTReturnCode MQTTConnect(Client *c, MQTTPacket_connectData *options) {
    7214:	b5f0      	push	{r4, r5, r6, r7, lr}
    7216:	b08d      	sub	sp, #52	; 0x34
    7218:	af04      	add	r7, sp, #16
    721a:	6078      	str	r0, [r7, #4]
    721c:	6039      	str	r1, [r7, #0]
    if(NULL == c) {
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	2b00      	cmp	r3, #0
    7222:	d102      	bne.n	722a <MQTTConnect+0x16>
        return MQTT_NULL_VALUE_ERROR;
    7224:	2306      	movs	r3, #6
    7226:	425b      	negs	r3, r3
    7228:	e0d8      	b.n	73dc <MQTTConnect+0x1c8>
    }

    Timer connect_timer;
    MQTTReturnCode connack_rc = FAILURE;
    722a:	2313      	movs	r3, #19
    722c:	18fb      	adds	r3, r7, r3
    722e:	22ff      	movs	r2, #255	; 0xff
    7230:	701a      	strb	r2, [r3, #0]
    char sessionPresent = 0;
    7232:	2312      	movs	r3, #18
    7234:	18fb      	adds	r3, r7, r3
    7236:	2200      	movs	r2, #0
    7238:	701a      	strb	r2, [r3, #0]
    uint32_t len = 0;
    723a:	2300      	movs	r3, #0
    723c:	60fb      	str	r3, [r7, #12]
    MQTTReturnCode rc = FAILURE;
    723e:	231f      	movs	r3, #31
    7240:	18fb      	adds	r3, r7, r3
    7242:	22ff      	movs	r2, #255	; 0xff
    7244:	701a      	strb	r2, [r3, #0]

    InitTimer(&connect_timer);
    7246:	2314      	movs	r3, #20
    7248:	18fb      	adds	r3, r7, r3
    724a:	0018      	movs	r0, r3
    724c:	4b65      	ldr	r3, [pc, #404]	; (73e4 <MQTTConnect+0x1d0>)
    724e:	4798      	blx	r3
    countdown_ms(&connect_timer, c->commandTimeoutMs);
    7250:	687b      	ldr	r3, [r7, #4]
    7252:	689a      	ldr	r2, [r3, #8]
    7254:	2314      	movs	r3, #20
    7256:	18fb      	adds	r3, r7, r3
    7258:	0011      	movs	r1, r2
    725a:	0018      	movs	r0, r3
    725c:	4b62      	ldr	r3, [pc, #392]	; (73e8 <MQTTConnect+0x1d4>)
    725e:	4798      	blx	r3

    if(c->isConnected) {
    7260:	687b      	ldr	r3, [r7, #4]
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	2b00      	cmp	r3, #0
    7266:	d002      	beq.n	726e <MQTTConnect+0x5a>
        /* Don't send connect packet again if we are already connected */
        return MQTT_NETWORK_ALREADY_CONNECTED_ERROR;
    7268:	2305      	movs	r3, #5
    726a:	425b      	negs	r3, r3
    726c:	e0b6      	b.n	73dc <MQTTConnect+0x1c8>
    }

    if(NULL != options) {
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	2b00      	cmp	r3, #0
    7272:	d006      	beq.n	7282 <MQTTConnect+0x6e>
        /* override default options if new options were supplied */
        copyMQTTConnectData(&(c->options), options);
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	3344      	adds	r3, #68	; 0x44
    7278:	683a      	ldr	r2, [r7, #0]
    727a:	0011      	movs	r1, r2
    727c:	0018      	movs	r0, r3
    727e:	4b5b      	ldr	r3, [pc, #364]	; (73ec <MQTTConnect+0x1d8>)
    7280:	4798      	blx	r3
    }

    c->networkInitHandler(&(c->networkStack));
    7282:	687a      	ldr	r2, [r7, #4]
    7284:	238e      	movs	r3, #142	; 0x8e
    7286:	005b      	lsls	r3, r3, #1
    7288:	58d3      	ldr	r3, [r2, r3]
    728a:	687a      	ldr	r2, [r7, #4]
    728c:	3298      	adds	r2, #152	; 0x98
    728e:	0010      	movs	r0, r2
    7290:	4798      	blx	r3
    rc = c->networkStack.connect(&(c->networkStack), c->tlsConnectParams);
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	229c      	movs	r2, #156	; 0x9c
    7296:	589c      	ldr	r4, [r3, r2]
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	3398      	adds	r3, #152	; 0x98
    729c:	469c      	mov	ip, r3
    729e:	687b      	ldr	r3, [r7, #4]
    72a0:	466a      	mov	r2, sp
    72a2:	0011      	movs	r1, r2
    72a4:	001a      	movs	r2, r3
    72a6:	3234      	adds	r2, #52	; 0x34
    72a8:	ca61      	ldmia	r2!, {r0, r5, r6}
    72aa:	c161      	stmia	r1!, {r0, r5, r6}
    72ac:	6812      	ldr	r2, [r2, #0]
    72ae:	600a      	str	r2, [r1, #0]
    72b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    72b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    72b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    72b6:	4660      	mov	r0, ip
    72b8:	47a0      	blx	r4
    72ba:	0002      	movs	r2, r0
    72bc:	231f      	movs	r3, #31
    72be:	18fb      	adds	r3, r7, r3
    72c0:	701a      	strb	r2, [r3, #0]
    if(0 != rc) {
    72c2:	231f      	movs	r3, #31
    72c4:	18fb      	adds	r3, r7, r3
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	b25b      	sxtb	r3, r3
    72ca:	2b00      	cmp	r3, #0
    72cc:	d002      	beq.n	72d4 <MQTTConnect+0xc0>
        /* TLS Connect failed, return error */
        return FAILURE;
    72ce:	2301      	movs	r3, #1
    72d0:	425b      	negs	r3, r3
    72d2:	e083      	b.n	73dc <MQTTConnect+0x1c8>
    }

    c->keepAliveInterval = c->options.keepAliveInterval;
    72d4:	687b      	ldr	r3, [r7, #4]
    72d6:	2258      	movs	r2, #88	; 0x58
    72d8:	5a9b      	ldrh	r3, [r3, r2]
    72da:	001a      	movs	r2, r3
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	60da      	str	r2, [r3, #12]
    rc = MQTTSerialize_connect(c->buf, c->bufSize, &(c->options), &len);
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	6a18      	ldr	r0, [r3, #32]
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	6999      	ldr	r1, [r3, #24]
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	3344      	adds	r3, #68	; 0x44
    72ec:	001a      	movs	r2, r3
    72ee:	231f      	movs	r3, #31
    72f0:	18fc      	adds	r4, r7, r3
    72f2:	230c      	movs	r3, #12
    72f4:	18fb      	adds	r3, r7, r3
    72f6:	4d3e      	ldr	r5, [pc, #248]	; (73f0 <MQTTConnect+0x1dc>)
    72f8:	47a8      	blx	r5
    72fa:	0003      	movs	r3, r0
    72fc:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc || 0 >= len) {
    72fe:	231f      	movs	r3, #31
    7300:	18fb      	adds	r3, r7, r3
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	b25b      	sxtb	r3, r3
    7306:	2b00      	cmp	r3, #0
    7308:	d102      	bne.n	7310 <MQTTConnect+0xfc>
    730a:	68fb      	ldr	r3, [r7, #12]
    730c:	2b00      	cmp	r3, #0
    730e:	d102      	bne.n	7316 <MQTTConnect+0x102>
        return FAILURE;
    7310:	2301      	movs	r3, #1
    7312:	425b      	negs	r3, r3
    7314:	e062      	b.n	73dc <MQTTConnect+0x1c8>
    }

    /* send the connect packet */
    rc = sendPacket(c, len, &connect_timer);
    7316:	68f9      	ldr	r1, [r7, #12]
    7318:	231f      	movs	r3, #31
    731a:	18fc      	adds	r4, r7, r3
    731c:	2314      	movs	r3, #20
    731e:	18fa      	adds	r2, r7, r3
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	0018      	movs	r0, r3
    7324:	4b33      	ldr	r3, [pc, #204]	; (73f4 <MQTTConnect+0x1e0>)
    7326:	4798      	blx	r3
    7328:	0003      	movs	r3, r0
    732a:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    732c:	231f      	movs	r3, #31
    732e:	18fb      	adds	r3, r7, r3
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	b25b      	sxtb	r3, r3
    7334:	2b00      	cmp	r3, #0
    7336:	d004      	beq.n	7342 <MQTTConnect+0x12e>
        return rc;
    7338:	231f      	movs	r3, #31
    733a:	18fb      	adds	r3, r7, r3
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	b25b      	sxtb	r3, r3
    7340:	e04c      	b.n	73dc <MQTTConnect+0x1c8>
    }

    /* this will be a blocking call, wait for the CONNACK */
    rc = waitfor(c, CONNACK, &connect_timer);
    7342:	231f      	movs	r3, #31
    7344:	18fc      	adds	r4, r7, r3
    7346:	2314      	movs	r3, #20
    7348:	18fa      	adds	r2, r7, r3
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	2102      	movs	r1, #2
    734e:	0018      	movs	r0, r3
    7350:	4b29      	ldr	r3, [pc, #164]	; (73f8 <MQTTConnect+0x1e4>)
    7352:	4798      	blx	r3
    7354:	0003      	movs	r3, r0
    7356:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    7358:	231f      	movs	r3, #31
    735a:	18fb      	adds	r3, r7, r3
    735c:	781b      	ldrb	r3, [r3, #0]
    735e:	b25b      	sxtb	r3, r3
    7360:	2b00      	cmp	r3, #0
    7362:	d004      	beq.n	736e <MQTTConnect+0x15a>
        return rc;
    7364:	231f      	movs	r3, #31
    7366:	18fb      	adds	r3, r7, r3
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	b25b      	sxtb	r3, r3
    736c:	e036      	b.n	73dc <MQTTConnect+0x1c8>
    }

    /* Received CONNACK, check the return code */
    rc = MQTTDeserialize_connack((unsigned char *)&sessionPresent, &connack_rc, c->readbuf, c->readBufSize);
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	69db      	ldr	r3, [r3, #28]
    7376:	211f      	movs	r1, #31
    7378:	187c      	adds	r4, r7, r1
    737a:	2113      	movs	r1, #19
    737c:	1879      	adds	r1, r7, r1
    737e:	2012      	movs	r0, #18
    7380:	1838      	adds	r0, r7, r0
    7382:	4d1e      	ldr	r5, [pc, #120]	; (73fc <MQTTConnect+0x1e8>)
    7384:	47a8      	blx	r5
    7386:	0003      	movs	r3, r0
    7388:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    738a:	231f      	movs	r3, #31
    738c:	18fb      	adds	r3, r7, r3
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	b25b      	sxtb	r3, r3
    7392:	2b00      	cmp	r3, #0
    7394:	d004      	beq.n	73a0 <MQTTConnect+0x18c>
        return rc;
    7396:	231f      	movs	r3, #31
    7398:	18fb      	adds	r3, r7, r3
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	b25b      	sxtb	r3, r3
    739e:	e01d      	b.n	73dc <MQTTConnect+0x1c8>
    }

    if(MQTT_CONNACK_CONNECTION_ACCEPTED != connack_rc) {
    73a0:	2313      	movs	r3, #19
    73a2:	18fb      	adds	r3, r7, r3
    73a4:	781b      	ldrb	r3, [r3, #0]
    73a6:	b25b      	sxtb	r3, r3
    73a8:	2b04      	cmp	r3, #4
    73aa:	d004      	beq.n	73b6 <MQTTConnect+0x1a2>
        return connack_rc;
    73ac:	2313      	movs	r3, #19
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	b25b      	sxtb	r3, r3
    73b4:	e012      	b.n	73dc <MQTTConnect+0x1c8>
    }

    c->isConnected = 1;
    73b6:	687b      	ldr	r3, [r7, #4]
    73b8:	2201      	movs	r2, #1
    73ba:	701a      	strb	r2, [r3, #0]
    c->wasManuallyDisconnected = 0;
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	2200      	movs	r2, #0
    73c0:	705a      	strb	r2, [r3, #1]
    c->isPingOutstanding = 0;
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	2200      	movs	r2, #0
    73c6:	709a      	strb	r2, [r3, #2]
    countdown(&c->pingTimer, c->keepAliveInterval);
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	33b4      	adds	r3, #180	; 0xb4
    73cc:	001a      	movs	r2, r3
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	68db      	ldr	r3, [r3, #12]
    73d2:	0019      	movs	r1, r3
    73d4:	0010      	movs	r0, r2
    73d6:	4b0a      	ldr	r3, [pc, #40]	; (7400 <MQTTConnect+0x1ec>)
    73d8:	4798      	blx	r3

    return SUCCESS;
    73da:	2300      	movs	r3, #0
}
    73dc:	0018      	movs	r0, r3
    73de:	46bd      	mov	sp, r7
    73e0:	b009      	add	sp, #36	; 0x24
    73e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e4:	0000647d 	.word	0x0000647d
    73e8:	000063a5 	.word	0x000063a5
    73ec:	000065a9 	.word	0x000065a9
    73f0:	00007a19 	.word	0x00007a19
    73f4:	000064f5 	.word	0x000064f5
    73f8:	00007165 	.word	0x00007165
    73fc:	00007cc1 	.word	0x00007cc1
    7400:	000063f5 	.word	0x000063f5

00007404 <GetFreeMessageHandlerIndex>:

/* Return MAX_MESSAGE_HANDLERS value if no free index is available */
uint32_t GetFreeMessageHandlerIndex(Client *c) {
    7404:	b580      	push	{r7, lr}
    7406:	b084      	sub	sp, #16
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
    uint32_t itr;
    for(itr = 0; itr < MAX_MESSAGE_HANDLERS; itr++) {
    740c:	2300      	movs	r3, #0
    740e:	60fb      	str	r3, [r7, #12]
    7410:	e00b      	b.n	742a <GetFreeMessageHandlerIndex+0x26>
        if(c->messageHandlers[itr].topicFilter == NULL) {
    7412:	687a      	ldr	r2, [r7, #4]
    7414:	68fb      	ldr	r3, [r7, #12]
    7416:	330c      	adds	r3, #12
    7418:	011b      	lsls	r3, r3, #4
    741a:	18d3      	adds	r3, r2, r3
    741c:	3304      	adds	r3, #4
    741e:	681b      	ldr	r3, [r3, #0]
    7420:	2b00      	cmp	r3, #0
    7422:	d006      	beq.n	7432 <GetFreeMessageHandlerIndex+0x2e>
    for(itr = 0; itr < MAX_MESSAGE_HANDLERS; itr++) {
    7424:	68fb      	ldr	r3, [r7, #12]
    7426:	3301      	adds	r3, #1
    7428:	60fb      	str	r3, [r7, #12]
    742a:	68fb      	ldr	r3, [r7, #12]
    742c:	2b04      	cmp	r3, #4
    742e:	d9f0      	bls.n	7412 <GetFreeMessageHandlerIndex+0xe>
    7430:	e000      	b.n	7434 <GetFreeMessageHandlerIndex+0x30>
            break;
    7432:	46c0      	nop			; (mov r8, r8)
        }
    }

    return itr;
    7434:	68fb      	ldr	r3, [r7, #12]
}
    7436:	0018      	movs	r0, r3
    7438:	46bd      	mov	sp, r7
    743a:	b004      	add	sp, #16
    743c:	bd80      	pop	{r7, pc}
	...

00007440 <MQTTResubscribe>:
    c->messageHandlers[indexOfFreeMessageHandler].qos = qos;

    return SUCCESS;
}

MQTTReturnCode MQTTResubscribe(Client *c) {
    7440:	b5f0      	push	{r4, r5, r6, r7, lr}
    7442:	b093      	sub	sp, #76	; 0x4c
    7444:	af04      	add	r7, sp, #16
    7446:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	2b00      	cmp	r3, #0
    744c:	d102      	bne.n	7454 <MQTTResubscribe+0x14>
        return MQTT_NULL_VALUE_ERROR;
    744e:	2306      	movs	r3, #6
    7450:	425b      	negs	r3, r3
    7452:	e0cb      	b.n	75ec <MQTTResubscribe+0x1ac>
    }

    if(!c->isConnected) {
    7454:	687b      	ldr	r3, [r7, #4]
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	2b00      	cmp	r3, #0
    745a:	d102      	bne.n	7462 <MQTTResubscribe+0x22>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    745c:	2304      	movs	r3, #4
    745e:	425b      	negs	r3, r3
    7460:	e0c4      	b.n	75ec <MQTTResubscribe+0x1ac>
    }

    MQTTReturnCode rc = FAILURE;
    7462:	2333      	movs	r3, #51	; 0x33
    7464:	18fb      	adds	r3, r7, r3
    7466:	22ff      	movs	r2, #255	; 0xff
    7468:	701a      	strb	r2, [r3, #0]
    Timer timer;
    uint32_t len = 0;
    746a:	2300      	movs	r3, #0
    746c:	623b      	str	r3, [r7, #32]
    uint32_t count = 0;
    746e:	2300      	movs	r3, #0
    7470:	61fb      	str	r3, [r7, #28]
    QoS grantedQoS[3] = {QOS0, QOS0, QOS0};
    7472:	2318      	movs	r3, #24
    7474:	18fb      	adds	r3, r7, r3
    7476:	2200      	movs	r2, #0
    7478:	701a      	strb	r2, [r3, #0]
    747a:	2318      	movs	r3, #24
    747c:	18fb      	adds	r3, r7, r3
    747e:	2200      	movs	r2, #0
    7480:	705a      	strb	r2, [r3, #1]
    7482:	2318      	movs	r3, #24
    7484:	18fb      	adds	r3, r7, r3
    7486:	2200      	movs	r2, #0
    7488:	709a      	strb	r2, [r3, #2]
    uint16_t packetId;
    uint32_t existingSubCount = GetFreeMessageHandlerIndex(c);
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	0018      	movs	r0, r3
    748e:	4b59      	ldr	r3, [pc, #356]	; (75f4 <MQTTResubscribe+0x1b4>)
    7490:	4798      	blx	r3
    7492:	0003      	movs	r3, r0
    7494:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t itr = 0;
    7496:	2300      	movs	r3, #0
    7498:	637b      	str	r3, [r7, #52]	; 0x34

    for(itr = 0; itr < existingSubCount; itr++) {
    749a:	2300      	movs	r3, #0
    749c:	637b      	str	r3, [r7, #52]	; 0x34
    749e:	e09f      	b.n	75e0 <MQTTResubscribe+0x1a0>
        MQTTString topic = MQTTString_initializer;
    74a0:	2308      	movs	r3, #8
    74a2:	18fb      	adds	r3, r7, r3
    74a4:	2200      	movs	r2, #0
    74a6:	601a      	str	r2, [r3, #0]
    74a8:	2308      	movs	r3, #8
    74aa:	18fb      	adds	r3, r7, r3
    74ac:	2200      	movs	r2, #0
    74ae:	605a      	str	r2, [r3, #4]
    74b0:	2308      	movs	r3, #8
    74b2:	18fb      	adds	r3, r7, r3
    74b4:	2200      	movs	r2, #0
    74b6:	609a      	str	r2, [r3, #8]
        topic.cstring = (char *)c->messageHandlers[itr].topicFilter;
    74b8:	687a      	ldr	r2, [r7, #4]
    74ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74bc:	330c      	adds	r3, #12
    74be:	011b      	lsls	r3, r3, #4
    74c0:	18d3      	adds	r3, r2, r3
    74c2:	3304      	adds	r3, #4
    74c4:	681a      	ldr	r2, [r3, #0]
    74c6:	2308      	movs	r3, #8
    74c8:	18fb      	adds	r3, r7, r3
    74ca:	601a      	str	r2, [r3, #0]

        InitTimer(&timer);
    74cc:	2324      	movs	r3, #36	; 0x24
    74ce:	18fb      	adds	r3, r7, r3
    74d0:	0018      	movs	r0, r3
    74d2:	4b49      	ldr	r3, [pc, #292]	; (75f8 <MQTTResubscribe+0x1b8>)
    74d4:	4798      	blx	r3
        countdown_ms(&timer, c->commandTimeoutMs);
    74d6:	687b      	ldr	r3, [r7, #4]
    74d8:	689a      	ldr	r2, [r3, #8]
    74da:	2324      	movs	r3, #36	; 0x24
    74dc:	18fb      	adds	r3, r7, r3
    74de:	0011      	movs	r1, r2
    74e0:	0018      	movs	r0, r3
    74e2:	4b46      	ldr	r3, [pc, #280]	; (75fc <MQTTResubscribe+0x1bc>)
    74e4:	4798      	blx	r3

        rc = MQTTSerialize_subscribe(c->buf, c->bufSize, 0, getNextPacketId(c), 1,
    74e6:	687b      	ldr	r3, [r7, #4]
    74e8:	6a1d      	ldr	r5, [r3, #32]
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	699e      	ldr	r6, [r3, #24]
    74ee:	687b      	ldr	r3, [r7, #4]
    74f0:	0018      	movs	r0, r3
    74f2:	4b43      	ldr	r3, [pc, #268]	; (7600 <MQTTResubscribe+0x1c0>)
    74f4:	4798      	blx	r3
    74f6:	0003      	movs	r3, r0
    74f8:	0019      	movs	r1, r3
    74fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74fc:	011b      	lsls	r3, r3, #4
    74fe:	33c8      	adds	r3, #200	; 0xc8
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	18d3      	adds	r3, r2, r3
    7504:	3308      	adds	r3, #8
    7506:	2233      	movs	r2, #51	; 0x33
    7508:	18bc      	adds	r4, r7, r2
    750a:	2220      	movs	r2, #32
    750c:	18ba      	adds	r2, r7, r2
    750e:	9203      	str	r2, [sp, #12]
    7510:	9302      	str	r3, [sp, #8]
    7512:	2308      	movs	r3, #8
    7514:	18fb      	adds	r3, r7, r3
    7516:	9301      	str	r3, [sp, #4]
    7518:	2301      	movs	r3, #1
    751a:	9300      	str	r3, [sp, #0]
    751c:	000b      	movs	r3, r1
    751e:	2200      	movs	r2, #0
    7520:	0031      	movs	r1, r6
    7522:	0028      	movs	r0, r5
    7524:	4d37      	ldr	r5, [pc, #220]	; (7604 <MQTTResubscribe+0x1c4>)
    7526:	47a8      	blx	r5
    7528:	0003      	movs	r3, r0
    752a:	7023      	strb	r3, [r4, #0]
                                     &topic, &(c->messageHandlers[itr].qos), &len);
        if(SUCCESS != rc) {
    752c:	2333      	movs	r3, #51	; 0x33
    752e:	18fb      	adds	r3, r7, r3
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	b25b      	sxtb	r3, r3
    7534:	2b00      	cmp	r3, #0
    7536:	d004      	beq.n	7542 <MQTTResubscribe+0x102>
            return rc;
    7538:	2333      	movs	r3, #51	; 0x33
    753a:	18fb      	adds	r3, r7, r3
    753c:	781b      	ldrb	r3, [r3, #0]
    753e:	b25b      	sxtb	r3, r3
    7540:	e054      	b.n	75ec <MQTTResubscribe+0x1ac>
        }

        /* send the subscribe packet */
        rc = sendPacket(c, len, &timer);
    7542:	6a39      	ldr	r1, [r7, #32]
    7544:	2333      	movs	r3, #51	; 0x33
    7546:	18fc      	adds	r4, r7, r3
    7548:	2324      	movs	r3, #36	; 0x24
    754a:	18fa      	adds	r2, r7, r3
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	0018      	movs	r0, r3
    7550:	4b2d      	ldr	r3, [pc, #180]	; (7608 <MQTTResubscribe+0x1c8>)
    7552:	4798      	blx	r3
    7554:	0003      	movs	r3, r0
    7556:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    7558:	2333      	movs	r3, #51	; 0x33
    755a:	18fb      	adds	r3, r7, r3
    755c:	781b      	ldrb	r3, [r3, #0]
    755e:	b25b      	sxtb	r3, r3
    7560:	2b00      	cmp	r3, #0
    7562:	d004      	beq.n	756e <MQTTResubscribe+0x12e>
            return rc;
    7564:	2333      	movs	r3, #51	; 0x33
    7566:	18fb      	adds	r3, r7, r3
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	b25b      	sxtb	r3, r3
    756c:	e03e      	b.n	75ec <MQTTResubscribe+0x1ac>
        }

        /* wait for suback */
        rc = waitfor(c, SUBACK, &timer);
    756e:	2333      	movs	r3, #51	; 0x33
    7570:	18fc      	adds	r4, r7, r3
    7572:	2324      	movs	r3, #36	; 0x24
    7574:	18fa      	adds	r2, r7, r3
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	2109      	movs	r1, #9
    757a:	0018      	movs	r0, r3
    757c:	4b23      	ldr	r3, [pc, #140]	; (760c <MQTTResubscribe+0x1cc>)
    757e:	4798      	blx	r3
    7580:	0003      	movs	r3, r0
    7582:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    7584:	2333      	movs	r3, #51	; 0x33
    7586:	18fb      	adds	r3, r7, r3
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	b25b      	sxtb	r3, r3
    758c:	2b00      	cmp	r3, #0
    758e:	d004      	beq.n	759a <MQTTResubscribe+0x15a>
            return rc;
    7590:	2333      	movs	r3, #51	; 0x33
    7592:	18fb      	adds	r3, r7, r3
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	b25b      	sxtb	r3, r3
    7598:	e028      	b.n	75ec <MQTTResubscribe+0x1ac>
        }

        /* Granted QoS can be 0, 1 or 2 */
        rc = MQTTDeserialize_suback(&packetId, 1, &count, grantedQoS, c->readbuf, c->readBufSize);
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    759e:	687b      	ldr	r3, [r7, #4]
    75a0:	69db      	ldr	r3, [r3, #28]
    75a2:	2133      	movs	r1, #51	; 0x33
    75a4:	187c      	adds	r4, r7, r1
    75a6:	2118      	movs	r1, #24
    75a8:	187d      	adds	r5, r7, r1
    75aa:	211c      	movs	r1, #28
    75ac:	1879      	adds	r1, r7, r1
    75ae:	2016      	movs	r0, #22
    75b0:	1838      	adds	r0, r7, r0
    75b2:	9301      	str	r3, [sp, #4]
    75b4:	9200      	str	r2, [sp, #0]
    75b6:	002b      	movs	r3, r5
    75b8:	000a      	movs	r2, r1
    75ba:	2101      	movs	r1, #1
    75bc:	4d14      	ldr	r5, [pc, #80]	; (7610 <MQTTResubscribe+0x1d0>)
    75be:	47a8      	blx	r5
    75c0:	0003      	movs	r3, r0
    75c2:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    75c4:	2333      	movs	r3, #51	; 0x33
    75c6:	18fb      	adds	r3, r7, r3
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	b25b      	sxtb	r3, r3
    75cc:	2b00      	cmp	r3, #0
    75ce:	d004      	beq.n	75da <MQTTResubscribe+0x19a>
            return rc;
    75d0:	2333      	movs	r3, #51	; 0x33
    75d2:	18fb      	adds	r3, r7, r3
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	b25b      	sxtb	r3, r3
    75d8:	e008      	b.n	75ec <MQTTResubscribe+0x1ac>
    for(itr = 0; itr < existingSubCount; itr++) {
    75da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    75dc:	3301      	adds	r3, #1
    75de:	637b      	str	r3, [r7, #52]	; 0x34
    75e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    75e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    75e4:	429a      	cmp	r2, r3
    75e6:	d200      	bcs.n	75ea <MQTTResubscribe+0x1aa>
    75e8:	e75a      	b.n	74a0 <MQTTResubscribe+0x60>
        }
    }

    return SUCCESS;
    75ea:	2300      	movs	r3, #0
}
    75ec:	0018      	movs	r0, r3
    75ee:	46bd      	mov	sp, r7
    75f0:	b00f      	add	sp, #60	; 0x3c
    75f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75f4:	00007405 	.word	0x00007405
    75f8:	0000647d 	.word	0x0000647d
    75fc:	000063a5 	.word	0x000063a5
    7600:	000064c1 	.word	0x000064c1
    7604:	00008bd1 	.word	0x00008bd1
    7608:	000064f5 	.word	0x000064f5
    760c:	00007165 	.word	0x00007165
    7610:	00008d15 	.word	0x00008d15

00007614 <MQTTPublish>:
    }

    return SUCCESS;
}

MQTTReturnCode MQTTPublish(Client *c, const char *topicName, MQTTMessage *message) {
    7614:	b5f0      	push	{r4, r5, r6, r7, lr}
    7616:	46d6      	mov	lr, sl
    7618:	464f      	mov	r7, r9
    761a:	4646      	mov	r6, r8
    761c:	b5c0      	push	{r6, r7, lr}
    761e:	b094      	sub	sp, #80	; 0x50
    7620:	af08      	add	r7, sp, #32
    7622:	60f8      	str	r0, [r7, #12]
    7624:	60b9      	str	r1, [r7, #8]
    7626:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == topicName || NULL == message) {
    7628:	68fb      	ldr	r3, [r7, #12]
    762a:	2b00      	cmp	r3, #0
    762c:	d005      	beq.n	763a <MQTTPublish+0x26>
    762e:	68bb      	ldr	r3, [r7, #8]
    7630:	2b00      	cmp	r3, #0
    7632:	d002      	beq.n	763a <MQTTPublish+0x26>
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	2b00      	cmp	r3, #0
    7638:	d102      	bne.n	7640 <MQTTPublish+0x2c>
        return MQTT_NULL_VALUE_ERROR;
    763a:	2306      	movs	r3, #6
    763c:	425b      	negs	r3, r3
    763e:	e0d4      	b.n	77ea <MQTTPublish+0x1d6>
    }

    if(!c->isConnected) {
    7640:	68fb      	ldr	r3, [r7, #12]
    7642:	781b      	ldrb	r3, [r3, #0]
    7644:	2b00      	cmp	r3, #0
    7646:	d102      	bne.n	764e <MQTTPublish+0x3a>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    7648:	2304      	movs	r3, #4
    764a:	425b      	negs	r3, r3
    764c:	e0cd      	b.n	77ea <MQTTPublish+0x1d6>
    }

    Timer timer;
    MQTTString topic = MQTTString_initializer;
    764e:	2318      	movs	r3, #24
    7650:	18fb      	adds	r3, r7, r3
    7652:	2200      	movs	r2, #0
    7654:	601a      	str	r2, [r3, #0]
    7656:	2318      	movs	r3, #24
    7658:	18fb      	adds	r3, r7, r3
    765a:	2200      	movs	r2, #0
    765c:	605a      	str	r2, [r3, #4]
    765e:	2318      	movs	r3, #24
    7660:	18fb      	adds	r3, r7, r3
    7662:	2200      	movs	r2, #0
    7664:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
    7666:	2318      	movs	r3, #24
    7668:	18fb      	adds	r3, r7, r3
    766a:	68ba      	ldr	r2, [r7, #8]
    766c:	601a      	str	r2, [r3, #0]
    uint32_t len = 0;
    766e:	2300      	movs	r3, #0
    7670:	617b      	str	r3, [r7, #20]
    uint8_t waitForAck = 0;
    7672:	232f      	movs	r3, #47	; 0x2f
    7674:	18fb      	adds	r3, r7, r3
    7676:	2200      	movs	r2, #0
    7678:	701a      	strb	r2, [r3, #0]
    uint8_t packetType = PUBACK;
    767a:	232e      	movs	r3, #46	; 0x2e
    767c:	18fb      	adds	r3, r7, r3
    767e:	2204      	movs	r2, #4
    7680:	701a      	strb	r2, [r3, #0]
    uint16_t packet_id;
    unsigned char dup, type;
    MQTTReturnCode rc = FAILURE;
    7682:	232d      	movs	r3, #45	; 0x2d
    7684:	18fb      	adds	r3, r7, r3
    7686:	22ff      	movs	r2, #255	; 0xff
    7688:	701a      	strb	r2, [r3, #0]

    InitTimer(&timer);
    768a:	2324      	movs	r3, #36	; 0x24
    768c:	18fb      	adds	r3, r7, r3
    768e:	0018      	movs	r0, r3
    7690:	4b5a      	ldr	r3, [pc, #360]	; (77fc <MQTTPublish+0x1e8>)
    7692:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    7694:	68fb      	ldr	r3, [r7, #12]
    7696:	689a      	ldr	r2, [r3, #8]
    7698:	2324      	movs	r3, #36	; 0x24
    769a:	18fb      	adds	r3, r7, r3
    769c:	0011      	movs	r1, r2
    769e:	0018      	movs	r0, r3
    76a0:	4b57      	ldr	r3, [pc, #348]	; (7800 <MQTTPublish+0x1ec>)
    76a2:	4798      	blx	r3

    if(QOS1 == message->qos || QOS2 == message->qos) {
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	2b01      	cmp	r3, #1
    76aa:	d003      	beq.n	76b4 <MQTTPublish+0xa0>
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	2b02      	cmp	r3, #2
    76b2:	d113      	bne.n	76dc <MQTTPublish+0xc8>
        message->id = getNextPacketId(c);
    76b4:	68fb      	ldr	r3, [r7, #12]
    76b6:	0018      	movs	r0, r3
    76b8:	4b52      	ldr	r3, [pc, #328]	; (7804 <MQTTPublish+0x1f0>)
    76ba:	4798      	blx	r3
    76bc:	0003      	movs	r3, r0
    76be:	001a      	movs	r2, r3
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	809a      	strh	r2, [r3, #4]
        waitForAck = 1;
    76c4:	232f      	movs	r3, #47	; 0x2f
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	2201      	movs	r2, #1
    76ca:	701a      	strb	r2, [r3, #0]
        if(QOS2 == message->qos) {
    76cc:	687b      	ldr	r3, [r7, #4]
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	2b02      	cmp	r3, #2
    76d2:	d103      	bne.n	76dc <MQTTPublish+0xc8>
            packetType = PUBCOMP;
    76d4:	232e      	movs	r3, #46	; 0x2e
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	2207      	movs	r2, #7
    76da:	701a      	strb	r2, [r3, #0]
        }
    }

    rc = MQTTSerialize_publish(c->buf, c->bufSize, 0, message->qos, message->retained, message->id,
    76dc:	68fb      	ldr	r3, [r7, #12]
    76de:	6a1e      	ldr	r6, [r3, #32]
    76e0:	68fb      	ldr	r3, [r7, #12]
    76e2:	699b      	ldr	r3, [r3, #24]
    76e4:	469c      	mov	ip, r3
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	781b      	ldrb	r3, [r3, #0]
    76ea:	4698      	mov	r8, r3
    76ec:	687b      	ldr	r3, [r7, #4]
    76ee:	785b      	ldrb	r3, [r3, #1]
    76f0:	4699      	mov	r9, r3
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	889b      	ldrh	r3, [r3, #4]
    76f6:	469a      	mov	sl, r3
              topic, (unsigned char*)message->payload, message->payloadlen, &len);
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	689a      	ldr	r2, [r3, #8]
    rc = MQTTSerialize_publish(c->buf, c->bufSize, 0, message->qos, message->retained, message->id,
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	68db      	ldr	r3, [r3, #12]
    7700:	242d      	movs	r4, #45	; 0x2d
    7702:	193c      	adds	r4, r7, r4
    7704:	2514      	movs	r5, #20
    7706:	197d      	adds	r5, r7, r5
    7708:	9507      	str	r5, [sp, #28]
    770a:	9306      	str	r3, [sp, #24]
    770c:	9205      	str	r2, [sp, #20]
    770e:	2318      	movs	r3, #24
    7710:	18fa      	adds	r2, r7, r3
    7712:	2308      	movs	r3, #8
    7714:	446b      	add	r3, sp
    7716:	ca23      	ldmia	r2!, {r0, r1, r5}
    7718:	c323      	stmia	r3!, {r0, r1, r5}
    771a:	4653      	mov	r3, sl
    771c:	9301      	str	r3, [sp, #4]
    771e:	464b      	mov	r3, r9
    7720:	9300      	str	r3, [sp, #0]
    7722:	4643      	mov	r3, r8
    7724:	2200      	movs	r2, #0
    7726:	4661      	mov	r1, ip
    7728:	0030      	movs	r0, r6
    772a:	4d37      	ldr	r5, [pc, #220]	; (7808 <MQTTPublish+0x1f4>)
    772c:	47a8      	blx	r5
    772e:	0003      	movs	r3, r0
    7730:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    7732:	232d      	movs	r3, #45	; 0x2d
    7734:	18fb      	adds	r3, r7, r3
    7736:	781b      	ldrb	r3, [r3, #0]
    7738:	b25b      	sxtb	r3, r3
    773a:	2b00      	cmp	r3, #0
    773c:	d004      	beq.n	7748 <MQTTPublish+0x134>
        return rc;
    773e:	232d      	movs	r3, #45	; 0x2d
    7740:	18fb      	adds	r3, r7, r3
    7742:	781b      	ldrb	r3, [r3, #0]
    7744:	b25b      	sxtb	r3, r3
    7746:	e050      	b.n	77ea <MQTTPublish+0x1d6>
    }

    /* send the publish packet */
    rc = sendPacket(c, len, &timer);
    7748:	6979      	ldr	r1, [r7, #20]
    774a:	232d      	movs	r3, #45	; 0x2d
    774c:	18fc      	adds	r4, r7, r3
    774e:	2324      	movs	r3, #36	; 0x24
    7750:	18fa      	adds	r2, r7, r3
    7752:	68fb      	ldr	r3, [r7, #12]
    7754:	0018      	movs	r0, r3
    7756:	4b2d      	ldr	r3, [pc, #180]	; (780c <MQTTPublish+0x1f8>)
    7758:	4798      	blx	r3
    775a:	0003      	movs	r3, r0
    775c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    775e:	232d      	movs	r3, #45	; 0x2d
    7760:	18fb      	adds	r3, r7, r3
    7762:	781b      	ldrb	r3, [r3, #0]
    7764:	b25b      	sxtb	r3, r3
    7766:	2b00      	cmp	r3, #0
    7768:	d004      	beq.n	7774 <MQTTPublish+0x160>
        return rc;
    776a:	232d      	movs	r3, #45	; 0x2d
    776c:	18fb      	adds	r3, r7, r3
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	b25b      	sxtb	r3, r3
    7772:	e03a      	b.n	77ea <MQTTPublish+0x1d6>
    }

    /* Wait for ack if QoS1 or QoS2 */
    if(1 == waitForAck) {
    7774:	232f      	movs	r3, #47	; 0x2f
    7776:	18fb      	adds	r3, r7, r3
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	2b01      	cmp	r3, #1
    777c:	d134      	bne.n	77e8 <MQTTPublish+0x1d4>
        rc = waitfor(c, packetType, &timer);
    777e:	232d      	movs	r3, #45	; 0x2d
    7780:	18fc      	adds	r4, r7, r3
    7782:	2324      	movs	r3, #36	; 0x24
    7784:	18fa      	adds	r2, r7, r3
    7786:	232e      	movs	r3, #46	; 0x2e
    7788:	18fb      	adds	r3, r7, r3
    778a:	7819      	ldrb	r1, [r3, #0]
    778c:	68fb      	ldr	r3, [r7, #12]
    778e:	0018      	movs	r0, r3
    7790:	4b1f      	ldr	r3, [pc, #124]	; (7810 <MQTTPublish+0x1fc>)
    7792:	4798      	blx	r3
    7794:	0003      	movs	r3, r0
    7796:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    7798:	232d      	movs	r3, #45	; 0x2d
    779a:	18fb      	adds	r3, r7, r3
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	b25b      	sxtb	r3, r3
    77a0:	2b00      	cmp	r3, #0
    77a2:	d004      	beq.n	77ae <MQTTPublish+0x19a>
            return rc;
    77a4:	232d      	movs	r3, #45	; 0x2d
    77a6:	18fb      	adds	r3, r7, r3
    77a8:	781b      	ldrb	r3, [r3, #0]
    77aa:	b25b      	sxtb	r3, r3
    77ac:	e01d      	b.n	77ea <MQTTPublish+0x1d6>
        }

        rc = MQTTDeserialize_ack(&type, &dup, &packet_id, c->readbuf, c->readBufSize);
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    77b2:	68fb      	ldr	r3, [r7, #12]
    77b4:	69db      	ldr	r3, [r3, #28]
    77b6:	222d      	movs	r2, #45	; 0x2d
    77b8:	18bc      	adds	r4, r7, r2
    77ba:	2212      	movs	r2, #18
    77bc:	18ba      	adds	r2, r7, r2
    77be:	2111      	movs	r1, #17
    77c0:	1879      	adds	r1, r7, r1
    77c2:	2010      	movs	r0, #16
    77c4:	1838      	adds	r0, r7, r0
    77c6:	9300      	str	r3, [sp, #0]
    77c8:	002b      	movs	r3, r5
    77ca:	4d12      	ldr	r5, [pc, #72]	; (7814 <MQTTPublish+0x200>)
    77cc:	47a8      	blx	r5
    77ce:	0003      	movs	r3, r0
    77d0:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    77d2:	232d      	movs	r3, #45	; 0x2d
    77d4:	18fb      	adds	r3, r7, r3
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	b25b      	sxtb	r3, r3
    77da:	2b00      	cmp	r3, #0
    77dc:	d004      	beq.n	77e8 <MQTTPublish+0x1d4>
            return rc;
    77de:	232d      	movs	r3, #45	; 0x2d
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	781b      	ldrb	r3, [r3, #0]
    77e4:	b25b      	sxtb	r3, r3
    77e6:	e000      	b.n	77ea <MQTTPublish+0x1d6>
        }
    }

    return SUCCESS;
    77e8:	2300      	movs	r3, #0
}
    77ea:	0018      	movs	r0, r3
    77ec:	46bd      	mov	sp, r7
    77ee:	b00c      	add	sp, #48	; 0x30
    77f0:	bc1c      	pop	{r2, r3, r4}
    77f2:	4690      	mov	r8, r2
    77f4:	4699      	mov	r9, r3
    77f6:	46a2      	mov	sl, r4
    77f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	0000647d 	.word	0x0000647d
    7800:	000063a5 	.word	0x000063a5
    7804:	000064c1 	.word	0x000064c1
    7808:	00008945 	.word	0x00008945
    780c:	000064f5 	.word	0x000064f5
    7810:	00007165 	.word	0x00007165
    7814:	00008081 	.word	0x00008081

00007818 <MQTTForceDisconnect>:
/**
 * This is for the case when the sendPacket Fails.
 */
static void MQTTForceDisconnect(Client *c){
    7818:	b580      	push	{r7, lr}
    781a:	b082      	sub	sp, #8
    781c:	af00      	add	r7, sp, #0
    781e:	6078      	str	r0, [r7, #4]
	c->isConnected = 0;
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	2200      	movs	r2, #0
    7824:	701a      	strb	r2, [r3, #0]
	c->networkStack.disconnect(&(c->networkStack));
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	22a8      	movs	r2, #168	; 0xa8
    782a:	589b      	ldr	r3, [r3, r2]
    782c:	687a      	ldr	r2, [r7, #4]
    782e:	3298      	adds	r2, #152	; 0x98
    7830:	0010      	movs	r0, r2
    7832:	4798      	blx	r3
	c->networkStack.destroy(&(c->networkStack));
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	22b0      	movs	r2, #176	; 0xb0
    7838:	589b      	ldr	r3, [r3, r2]
    783a:	687a      	ldr	r2, [r7, #4]
    783c:	3298      	adds	r2, #152	; 0x98
    783e:	0010      	movs	r0, r2
    7840:	4798      	blx	r3
}
    7842:	46c0      	nop			; (mov r8, r8)
    7844:	46bd      	mov	sp, r7
    7846:	b002      	add	sp, #8
    7848:	bd80      	pop	{r7, pc}
	...

0000784c <MQTTDisconnect>:

MQTTReturnCode MQTTDisconnect(Client *c) {
    784c:	b590      	push	{r4, r7, lr}
    784e:	b087      	sub	sp, #28
    7850:	af00      	add	r7, sp, #0
    7852:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    7854:	687b      	ldr	r3, [r7, #4]
    7856:	2b00      	cmp	r3, #0
    7858:	d102      	bne.n	7860 <MQTTDisconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    785a:	2306      	movs	r3, #6
    785c:	425b      	negs	r3, r3
    785e:	e06c      	b.n	793a <MQTTDisconnect+0xee>
    }

    if(0 == c->isConnected) {
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	781b      	ldrb	r3, [r3, #0]
    7864:	2b00      	cmp	r3, #0
    7866:	d102      	bne.n	786e <MQTTDisconnect+0x22>
        /* Network is already disconnected. Do nothing */
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    7868:	2304      	movs	r3, #4
    786a:	425b      	negs	r3, r3
    786c:	e065      	b.n	793a <MQTTDisconnect+0xee>
    }

    MQTTReturnCode rc = FAILURE;
    786e:	2317      	movs	r3, #23
    7870:	18fb      	adds	r3, r7, r3
    7872:	22ff      	movs	r2, #255	; 0xff
    7874:	701a      	strb	r2, [r3, #0]
    /* We might wait for incomplete incoming publishes to complete */
    Timer timer;
    uint32_t serialized_len = 0;
    7876:	2300      	movs	r3, #0
    7878:	60bb      	str	r3, [r7, #8]
    rc = MQTTSerialize_disconnect(c->buf, c->bufSize, &serialized_len);
    787a:	687b      	ldr	r3, [r7, #4]
    787c:	6a18      	ldr	r0, [r3, #32]
    787e:	687b      	ldr	r3, [r7, #4]
    7880:	699b      	ldr	r3, [r3, #24]
    7882:	2217      	movs	r2, #23
    7884:	18bc      	adds	r4, r7, r2
    7886:	2208      	movs	r2, #8
    7888:	18ba      	adds	r2, r7, r2
    788a:	0019      	movs	r1, r3
    788c:	4b2d      	ldr	r3, [pc, #180]	; (7944 <MQTTDisconnect+0xf8>)
    788e:	4798      	blx	r3
    7890:	0003      	movs	r3, r0
    7892:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    7894:	2317      	movs	r3, #23
    7896:	18fb      	adds	r3, r7, r3
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	b25b      	sxtb	r3, r3
    789c:	2b00      	cmp	r3, #0
    789e:	d004      	beq.n	78aa <MQTTDisconnect+0x5e>
        return rc;
    78a0:	2317      	movs	r3, #23
    78a2:	18fb      	adds	r3, r7, r3
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	b25b      	sxtb	r3, r3
    78a8:	e047      	b.n	793a <MQTTDisconnect+0xee>
    }

    InitTimer(&timer);
    78aa:	230c      	movs	r3, #12
    78ac:	18fb      	adds	r3, r7, r3
    78ae:	0018      	movs	r0, r3
    78b0:	4b25      	ldr	r3, [pc, #148]	; (7948 <MQTTDisconnect+0xfc>)
    78b2:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	689a      	ldr	r2, [r3, #8]
    78b8:	230c      	movs	r3, #12
    78ba:	18fb      	adds	r3, r7, r3
    78bc:	0011      	movs	r1, r2
    78be:	0018      	movs	r0, r3
    78c0:	4b22      	ldr	r3, [pc, #136]	; (794c <MQTTDisconnect+0x100>)
    78c2:	4798      	blx	r3

    /* send the disconnect packet */
    if(serialized_len > 0) {
    78c4:	68bb      	ldr	r3, [r7, #8]
    78c6:	2b00      	cmp	r3, #0
    78c8:	d015      	beq.n	78f6 <MQTTDisconnect+0xaa>
        rc = sendPacket(c, serialized_len, &timer);
    78ca:	68b9      	ldr	r1, [r7, #8]
    78cc:	2317      	movs	r3, #23
    78ce:	18fc      	adds	r4, r7, r3
    78d0:	230c      	movs	r3, #12
    78d2:	18fa      	adds	r2, r7, r3
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	0018      	movs	r0, r3
    78d8:	4b1d      	ldr	r3, [pc, #116]	; (7950 <MQTTDisconnect+0x104>)
    78da:	4798      	blx	r3
    78dc:	0003      	movs	r3, r0
    78de:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    78e0:	2317      	movs	r3, #23
    78e2:	18fb      	adds	r3, r7, r3
    78e4:	781b      	ldrb	r3, [r3, #0]
    78e6:	b25b      	sxtb	r3, r3
    78e8:	2b00      	cmp	r3, #0
    78ea:	d004      	beq.n	78f6 <MQTTDisconnect+0xaa>
            return rc;
    78ec:	2317      	movs	r3, #23
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	b25b      	sxtb	r3, r3
    78f4:	e021      	b.n	793a <MQTTDisconnect+0xee>
        }
    }

    /* Clean network stack */
    c->networkStack.disconnect(&(c->networkStack));
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	22a8      	movs	r2, #168	; 0xa8
    78fa:	589b      	ldr	r3, [r3, r2]
    78fc:	687a      	ldr	r2, [r7, #4]
    78fe:	3298      	adds	r2, #152	; 0x98
    7900:	0010      	movs	r0, r2
    7902:	4798      	blx	r3
    rc = c->networkStack.destroy(&(c->networkStack));
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	22b0      	movs	r2, #176	; 0xb0
    7908:	589b      	ldr	r3, [r3, r2]
    790a:	687a      	ldr	r2, [r7, #4]
    790c:	3298      	adds	r2, #152	; 0x98
    790e:	0010      	movs	r0, r2
    7910:	4798      	blx	r3
    7912:	0002      	movs	r2, r0
    7914:	2317      	movs	r3, #23
    7916:	18fb      	adds	r3, r7, r3
    7918:	701a      	strb	r2, [r3, #0]
    if(0 != rc) {
    791a:	2317      	movs	r3, #23
    791c:	18fb      	adds	r3, r7, r3
    791e:	781b      	ldrb	r3, [r3, #0]
    7920:	b25b      	sxtb	r3, r3
    7922:	2b00      	cmp	r3, #0
    7924:	d002      	beq.n	792c <MQTTDisconnect+0xe0>
        /* TLS Destroy failed, return error */
        return FAILURE;
    7926:	2301      	movs	r3, #1
    7928:	425b      	negs	r3, r3
    792a:	e006      	b.n	793a <MQTTDisconnect+0xee>
    }

    c->isConnected = 0;
    792c:	687b      	ldr	r3, [r7, #4]
    792e:	2200      	movs	r2, #0
    7930:	701a      	strb	r2, [r3, #0]

    /* Always set to 1 whenever disconnect is called. Keepalive resets to 0 */
    c->wasManuallyDisconnected = 1;
    7932:	687b      	ldr	r3, [r7, #4]
    7934:	2201      	movs	r2, #1
    7936:	705a      	strb	r2, [r3, #1]

    return SUCCESS;
    7938:	2300      	movs	r3, #0
}
    793a:	0018      	movs	r0, r3
    793c:	46bd      	mov	sp, r7
    793e:	b007      	add	sp, #28
    7940:	bd90      	pop	{r4, r7, pc}
    7942:	46c0      	nop			; (mov r8, r8)
    7944:	00007ed9 	.word	0x00007ed9
    7948:	0000647d 	.word	0x0000647d
    794c:	000063a5 	.word	0x000063a5
    7950:	000064f5 	.word	0x000064f5

00007954 <MQTTSerialize_GetConnectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @param the length of buffer needed to contain the serialized version of the packet
  * @return MQTTReturnCode indicating function execution status
  */
size_t MQTTSerialize_GetConnectLength(MQTTPacket_connectData *options) {
    7954:	b590      	push	{r4, r7, lr}
    7956:	b085      	sub	sp, #20
    7958:	af00      	add	r7, sp, #0
    795a:	6078      	str	r0, [r7, #4]
	FUNC_ENTRY;

	size_t len = 0;
    795c:	2300      	movs	r3, #0
    795e:	60fb      	str	r3, [r7, #12]
	/* variable depending on MQTT or MQIsdp */
	if(3 == options->MQTTVersion) {
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	795b      	ldrb	r3, [r3, #5]
    7964:	2b03      	cmp	r3, #3
    7966:	d102      	bne.n	796e <MQTTSerialize_GetConnectLength+0x1a>
		len = 12;
    7968:	230c      	movs	r3, #12
    796a:	60fb      	str	r3, [r7, #12]
    796c:	e005      	b.n	797a <MQTTSerialize_GetConnectLength+0x26>
	} else if(4 == options->MQTTVersion) {
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	795b      	ldrb	r3, [r3, #5]
    7972:	2b04      	cmp	r3, #4
    7974:	d101      	bne.n	797a <MQTTSerialize_GetConnectLength+0x26>
		len = 10;
    7976:	230a      	movs	r3, #10
    7978:	60fb      	str	r3, [r7, #12]
	}

	len += MQTTstrlen(options->clientID) + 2;
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	6898      	ldr	r0, [r3, #8]
    797e:	68d9      	ldr	r1, [r3, #12]
    7980:	691a      	ldr	r2, [r3, #16]
    7982:	4b24      	ldr	r3, [pc, #144]	; (7a14 <MQTTSerialize_GetConnectLength+0xc0>)
    7984:	4798      	blx	r3
    7986:	0003      	movs	r3, r0
    7988:	3302      	adds	r3, #2
    798a:	68fa      	ldr	r2, [r7, #12]
    798c:	18d3      	adds	r3, r2, r3
    798e:	60fb      	str	r3, [r7, #12]

	if(options->willFlag) {
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	7ddb      	ldrb	r3, [r3, #23]
    7994:	2b00      	cmp	r3, #0
    7996:	d012      	beq.n	79be <MQTTSerialize_GetConnectLength+0x6a>
		len += MQTTstrlen(options->will.topicName) + 2 + MQTTstrlen(options->will.message) + 2;
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	6a18      	ldr	r0, [r3, #32]
    799c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    799e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    79a0:	4b1c      	ldr	r3, [pc, #112]	; (7a14 <MQTTSerialize_GetConnectLength+0xc0>)
    79a2:	4798      	blx	r3
    79a4:	0004      	movs	r4, r0
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    79aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
    79ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    79ae:	4b19      	ldr	r3, [pc, #100]	; (7a14 <MQTTSerialize_GetConnectLength+0xc0>)
    79b0:	4798      	blx	r3
    79b2:	0003      	movs	r3, r0
    79b4:	18e3      	adds	r3, r4, r3
    79b6:	3304      	adds	r3, #4
    79b8:	68fa      	ldr	r2, [r7, #12]
    79ba:	18d3      	adds	r3, r2, r3
    79bc:	60fb      	str	r3, [r7, #12]
	}

	if(options->username.cstring || options->username.lenstring.data) {
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    79c2:	2b00      	cmp	r3, #0
    79c4:	d103      	bne.n	79ce <MQTTSerialize_GetConnectLength+0x7a>
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    79ca:	2b00      	cmp	r3, #0
    79cc:	d00a      	beq.n	79e4 <MQTTSerialize_GetConnectLength+0x90>
		len += MQTTstrlen(options->username) + 2;
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    79d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    79d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    79d6:	4b0f      	ldr	r3, [pc, #60]	; (7a14 <MQTTSerialize_GetConnectLength+0xc0>)
    79d8:	4798      	blx	r3
    79da:	0003      	movs	r3, r0
    79dc:	3302      	adds	r3, #2
    79de:	68fa      	ldr	r2, [r7, #12]
    79e0:	18d3      	adds	r3, r2, r3
    79e2:	60fb      	str	r3, [r7, #12]
	}

	if(options->password.cstring || options->password.lenstring.data) {
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    79e8:	2b00      	cmp	r3, #0
    79ea:	d103      	bne.n	79f4 <MQTTSerialize_GetConnectLength+0xa0>
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79f0:	2b00      	cmp	r3, #0
    79f2:	d00a      	beq.n	7a0a <MQTTSerialize_GetConnectLength+0xb6>
		len += MQTTstrlen(options->password) + 2;
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
    79f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    79fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    79fc:	4b05      	ldr	r3, [pc, #20]	; (7a14 <MQTTSerialize_GetConnectLength+0xc0>)
    79fe:	4798      	blx	r3
    7a00:	0003      	movs	r3, r0
    7a02:	3302      	adds	r3, #2
    7a04:	68fa      	ldr	r2, [r7, #12]
    7a06:	18d3      	adds	r3, r2, r3
    7a08:	60fb      	str	r3, [r7, #12]
	}

	FUNC_EXIT_RC(len);
	return len;
    7a0a:	68fb      	ldr	r3, [r7, #12]
}
    7a0c:	0018      	movs	r0, r3
    7a0e:	46bd      	mov	sp, r7
    7a10:	b005      	add	sp, #20
    7a12:	bd90      	pop	{r4, r7, pc}
    7a14:	00008639 	.word	0x00008639

00007a18 <MQTTSerialize_connect>:
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_connect(unsigned char *buf, size_t buflen,
									 MQTTPacket_connectData *options,
									 uint32_t *serialized_len) {
    7a18:	b5b0      	push	{r4, r5, r7, lr}
    7a1a:	b08c      	sub	sp, #48	; 0x30
    7a1c:	af02      	add	r7, sp, #8
    7a1e:	60f8      	str	r0, [r7, #12]
    7a20:	60b9      	str	r1, [r7, #8]
    7a22:	607a      	str	r2, [r7, #4]
    7a24:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == options || NULL == serialized_len) {
    7a26:	68fb      	ldr	r3, [r7, #12]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d005      	beq.n	7a38 <MQTTSerialize_connect+0x20>
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d002      	beq.n	7a38 <MQTTSerialize_connect+0x20>
    7a32:	683b      	ldr	r3, [r7, #0]
    7a34:	2b00      	cmp	r3, #0
    7a36:	d102      	bne.n	7a3e <MQTTSerialize_connect+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    7a38:	2306      	movs	r3, #6
    7a3a:	425b      	negs	r3, r3
    7a3c:	e128      	b.n	7c90 <MQTTSerialize_connect+0x278>
	}

	unsigned char *ptr = buf;
    7a3e:	68fb      	ldr	r3, [r7, #12]
    7a40:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
    7a42:	2300      	movs	r3, #0
    7a44:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
    7a46:	2300      	movs	r3, #0
    7a48:	617b      	str	r3, [r7, #20]
	size_t len = 0;
    7a4a:	2300      	movs	r3, #0
    7a4c:	627b      	str	r3, [r7, #36]	; 0x24

	len = MQTTSerialize_GetConnectLength(options);
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	0018      	movs	r0, r3
    7a52:	4b91      	ldr	r3, [pc, #580]	; (7c98 <MQTTSerialize_connect+0x280>)
    7a54:	4798      	blx	r3
    7a56:	0003      	movs	r3, r0
    7a58:	627b      	str	r3, [r7, #36]	; 0x24
	if(MQTTPacket_len(len) > buflen) {
    7a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a5c:	0018      	movs	r0, r3
    7a5e:	4b8f      	ldr	r3, [pc, #572]	; (7c9c <MQTTSerialize_connect+0x284>)
    7a60:	4798      	blx	r3
    7a62:	0002      	movs	r2, r0
    7a64:	68bb      	ldr	r3, [r7, #8]
    7a66:	429a      	cmp	r2, r3
    7a68:	d902      	bls.n	7a70 <MQTTSerialize_connect+0x58>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    7a6a:	2309      	movs	r3, #9
    7a6c:	425b      	negs	r3, r3
    7a6e:	e10f      	b.n	7c90 <MQTTSerialize_connect+0x278>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, CONNECT, QOS0, 0, 0);
    7a70:	2323      	movs	r3, #35	; 0x23
    7a72:	18fc      	adds	r4, r7, r3
    7a74:	2318      	movs	r3, #24
    7a76:	18f8      	adds	r0, r7, r3
    7a78:	2300      	movs	r3, #0
    7a7a:	9300      	str	r3, [sp, #0]
    7a7c:	2300      	movs	r3, #0
    7a7e:	2200      	movs	r2, #0
    7a80:	2101      	movs	r1, #1
    7a82:	4d87      	ldr	r5, [pc, #540]	; (7ca0 <MQTTSerialize_connect+0x288>)
    7a84:	47a8      	blx	r5
    7a86:	0003      	movs	r3, r0
    7a88:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    7a8a:	2323      	movs	r3, #35	; 0x23
    7a8c:	18fb      	adds	r3, r7, r3
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	b25b      	sxtb	r3, r3
    7a92:	2b00      	cmp	r3, #0
    7a94:	d004      	beq.n	7aa0 <MQTTSerialize_connect+0x88>
		FUNC_EXIT_RC(rc);
		return rc;
    7a96:	2323      	movs	r3, #35	; 0x23
    7a98:	18fb      	adds	r3, r7, r3
    7a9a:	781b      	ldrb	r3, [r3, #0]
    7a9c:	b25b      	sxtb	r3, r3
    7a9e:	e0f7      	b.n	7c90 <MQTTSerialize_connect+0x278>
	}

	writeChar(&ptr, header.byte); /* write header */
    7aa0:	2318      	movs	r3, #24
    7aa2:	18fb      	adds	r3, r7, r3
    7aa4:	781a      	ldrb	r2, [r3, #0]
    7aa6:	231c      	movs	r3, #28
    7aa8:	18fb      	adds	r3, r7, r3
    7aaa:	0011      	movs	r1, r2
    7aac:	0018      	movs	r0, r3
    7aae:	4b7d      	ldr	r3, [pc, #500]	; (7ca4 <MQTTSerialize_connect+0x28c>)
    7ab0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    7ab2:	69fb      	ldr	r3, [r7, #28]
    7ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7ab6:	0011      	movs	r1, r2
    7ab8:	0018      	movs	r0, r3
    7aba:	4b7b      	ldr	r3, [pc, #492]	; (7ca8 <MQTTSerialize_connect+0x290>)
    7abc:	4798      	blx	r3
    7abe:	0002      	movs	r2, r0
    7ac0:	69fb      	ldr	r3, [r7, #28]
    7ac2:	189b      	adds	r3, r3, r2
    7ac4:	61fb      	str	r3, [r7, #28]

	if(4 == options->MQTTVersion) {
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	795b      	ldrb	r3, [r3, #5]
    7aca:	2b04      	cmp	r3, #4
    7acc:	d10d      	bne.n	7aea <MQTTSerialize_connect+0xd2>
		writeCString(&ptr, "MQTT");
    7ace:	4a77      	ldr	r2, [pc, #476]	; (7cac <MQTTSerialize_connect+0x294>)
    7ad0:	231c      	movs	r3, #28
    7ad2:	18fb      	adds	r3, r7, r3
    7ad4:	0011      	movs	r1, r2
    7ad6:	0018      	movs	r0, r3
    7ad8:	4b75      	ldr	r3, [pc, #468]	; (7cb0 <MQTTSerialize_connect+0x298>)
    7ada:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    7adc:	231c      	movs	r3, #28
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2104      	movs	r1, #4
    7ae2:	0018      	movs	r0, r3
    7ae4:	4b6f      	ldr	r3, [pc, #444]	; (7ca4 <MQTTSerialize_connect+0x28c>)
    7ae6:	4798      	blx	r3
    7ae8:	e00c      	b.n	7b04 <MQTTSerialize_connect+0xec>
	} else {
		writeCString(&ptr, "MQIsdp");
    7aea:	4a72      	ldr	r2, [pc, #456]	; (7cb4 <MQTTSerialize_connect+0x29c>)
    7aec:	231c      	movs	r3, #28
    7aee:	18fb      	adds	r3, r7, r3
    7af0:	0011      	movs	r1, r2
    7af2:	0018      	movs	r0, r3
    7af4:	4b6e      	ldr	r3, [pc, #440]	; (7cb0 <MQTTSerialize_connect+0x298>)
    7af6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    7af8:	231c      	movs	r3, #28
    7afa:	18fb      	adds	r3, r7, r3
    7afc:	2103      	movs	r1, #3
    7afe:	0018      	movs	r0, r3
    7b00:	4b68      	ldr	r3, [pc, #416]	; (7ca4 <MQTTSerialize_connect+0x28c>)
    7b02:	4798      	blx	r3
	}

	flags.all = 0;
    7b04:	2314      	movs	r3, #20
    7b06:	18fb      	adds	r3, r7, r3
    7b08:	2200      	movs	r2, #0
    7b0a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = (options->cleansession) ? 1 : 0;
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	7d9b      	ldrb	r3, [r3, #22]
    7b10:	1e5a      	subs	r2, r3, #1
    7b12:	4193      	sbcs	r3, r2
    7b14:	b2da      	uxtb	r2, r3
    7b16:	2314      	movs	r3, #20
    7b18:	18fb      	adds	r3, r7, r3
    7b1a:	2101      	movs	r1, #1
    7b1c:	400a      	ands	r2, r1
    7b1e:	1890      	adds	r0, r2, r2
    7b20:	781a      	ldrb	r2, [r3, #0]
    7b22:	2102      	movs	r1, #2
    7b24:	438a      	bics	r2, r1
    7b26:	1c11      	adds	r1, r2, #0
    7b28:	1c02      	adds	r2, r0, #0
    7b2a:	430a      	orrs	r2, r1
    7b2c:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	7ddb      	ldrb	r3, [r3, #23]
    7b32:	1e5a      	subs	r2, r3, #1
    7b34:	4193      	sbcs	r3, r2
    7b36:	b2da      	uxtb	r2, r3
    7b38:	2314      	movs	r3, #20
    7b3a:	18fb      	adds	r3, r7, r3
    7b3c:	2101      	movs	r1, #1
    7b3e:	400a      	ands	r2, r1
    7b40:	0090      	lsls	r0, r2, #2
    7b42:	781a      	ldrb	r2, [r3, #0]
    7b44:	2104      	movs	r1, #4
    7b46:	438a      	bics	r2, r1
    7b48:	1c11      	adds	r1, r2, #0
    7b4a:	1c02      	adds	r2, r0, #0
    7b4c:	430a      	orrs	r2, r1
    7b4e:	701a      	strb	r2, [r3, #0]
	if(flags.bits.will) {
    7b50:	2314      	movs	r3, #20
    7b52:	18fb      	adds	r3, r7, r3
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	2204      	movs	r2, #4
    7b58:	4013      	ands	r3, r2
    7b5a:	b2db      	uxtb	r3, r3
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d024      	beq.n	7baa <MQTTSerialize_connect+0x192>
		flags.bits.willQoS = options->will.qos;
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	2239      	movs	r2, #57	; 0x39
    7b64:	5c9b      	ldrb	r3, [r3, r2]
    7b66:	1c1a      	adds	r2, r3, #0
    7b68:	2303      	movs	r3, #3
    7b6a:	4013      	ands	r3, r2
    7b6c:	b2da      	uxtb	r2, r3
    7b6e:	2314      	movs	r3, #20
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	2103      	movs	r1, #3
    7b74:	400a      	ands	r2, r1
    7b76:	00d0      	lsls	r0, r2, #3
    7b78:	781a      	ldrb	r2, [r3, #0]
    7b7a:	2118      	movs	r1, #24
    7b7c:	438a      	bics	r2, r1
    7b7e:	1c11      	adds	r1, r2, #0
    7b80:	1c02      	adds	r2, r0, #0
    7b82:	430a      	orrs	r2, r1
    7b84:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = (options->will.retained) ? 1 : 0;
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	2238      	movs	r2, #56	; 0x38
    7b8a:	5c9b      	ldrb	r3, [r3, r2]
    7b8c:	1e5a      	subs	r2, r3, #1
    7b8e:	4193      	sbcs	r3, r2
    7b90:	b2da      	uxtb	r2, r3
    7b92:	2314      	movs	r3, #20
    7b94:	18fb      	adds	r3, r7, r3
    7b96:	2101      	movs	r1, #1
    7b98:	400a      	ands	r2, r1
    7b9a:	0150      	lsls	r0, r2, #5
    7b9c:	781a      	ldrb	r2, [r3, #0]
    7b9e:	2120      	movs	r1, #32
    7ba0:	438a      	bics	r2, r1
    7ba2:	1c11      	adds	r1, r2, #0
    7ba4:	1c02      	adds	r2, r0, #0
    7ba6:	430a      	orrs	r2, r1
    7ba8:	701a      	strb	r2, [r3, #0]
	}

	if(options->username.cstring || options->username.lenstring.data) {
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d103      	bne.n	7bba <MQTTSerialize_connect+0x1a2>
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d006      	beq.n	7bc8 <MQTTSerialize_connect+0x1b0>
		flags.bits.username = 1;
    7bba:	2314      	movs	r3, #20
    7bbc:	18fb      	adds	r3, r7, r3
    7bbe:	781a      	ldrb	r2, [r3, #0]
    7bc0:	2180      	movs	r1, #128	; 0x80
    7bc2:	4249      	negs	r1, r1
    7bc4:	430a      	orrs	r2, r1
    7bc6:	701a      	strb	r2, [r3, #0]
	}

	if(options->password.cstring || options->password.lenstring.data) {
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d103      	bne.n	7bd8 <MQTTSerialize_connect+0x1c0>
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d005      	beq.n	7be4 <MQTTSerialize_connect+0x1cc>
		flags.bits.password = 1;
    7bd8:	2314      	movs	r3, #20
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	781a      	ldrb	r2, [r3, #0]
    7bde:	2140      	movs	r1, #64	; 0x40
    7be0:	430a      	orrs	r2, r1
    7be2:	701a      	strb	r2, [r3, #0]
	}

	writeChar(&ptr, flags.all);
    7be4:	2314      	movs	r3, #20
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	781a      	ldrb	r2, [r3, #0]
    7bea:	231c      	movs	r3, #28
    7bec:	18fb      	adds	r3, r7, r3
    7bee:	0011      	movs	r1, r2
    7bf0:	0018      	movs	r0, r3
    7bf2:	4b2c      	ldr	r3, [pc, #176]	; (7ca4 <MQTTSerialize_connect+0x28c>)
    7bf4:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	8a9b      	ldrh	r3, [r3, #20]
    7bfa:	001a      	movs	r2, r3
    7bfc:	231c      	movs	r3, #28
    7bfe:	18fb      	adds	r3, r7, r3
    7c00:	0011      	movs	r1, r2
    7c02:	0018      	movs	r0, r3
    7c04:	4b2c      	ldr	r3, [pc, #176]	; (7cb8 <MQTTSerialize_connect+0x2a0>)
    7c06:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	221c      	movs	r2, #28
    7c0c:	18b8      	adds	r0, r7, r2
    7c0e:	6899      	ldr	r1, [r3, #8]
    7c10:	68da      	ldr	r2, [r3, #12]
    7c12:	691b      	ldr	r3, [r3, #16]
    7c14:	4c29      	ldr	r4, [pc, #164]	; (7cbc <MQTTSerialize_connect+0x2a4>)
    7c16:	47a0      	blx	r4
	if(options->willFlag) {
    7c18:	687b      	ldr	r3, [r7, #4]
    7c1a:	7ddb      	ldrb	r3, [r3, #23]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	d00f      	beq.n	7c40 <MQTTSerialize_connect+0x228>
		writeMQTTString(&ptr, options->will.topicName);
    7c20:	687b      	ldr	r3, [r7, #4]
    7c22:	221c      	movs	r2, #28
    7c24:	18b8      	adds	r0, r7, r2
    7c26:	6a19      	ldr	r1, [r3, #32]
    7c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c2c:	4c23      	ldr	r4, [pc, #140]	; (7cbc <MQTTSerialize_connect+0x2a4>)
    7c2e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	221c      	movs	r2, #28
    7c34:	18b8      	adds	r0, r7, r2
    7c36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7c3c:	4c1f      	ldr	r4, [pc, #124]	; (7cbc <MQTTSerialize_connect+0x2a4>)
    7c3e:	47a0      	blx	r4
	}

	if(flags.bits.username) {
    7c40:	2314      	movs	r3, #20
    7c42:	18fb      	adds	r3, r7, r3
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	227f      	movs	r2, #127	; 0x7f
    7c48:	4393      	bics	r3, r2
    7c4a:	b2db      	uxtb	r3, r3
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d007      	beq.n	7c60 <MQTTSerialize_connect+0x248>
		writeMQTTString(&ptr, options->username);
    7c50:	687b      	ldr	r3, [r7, #4]
    7c52:	221c      	movs	r2, #28
    7c54:	18b8      	adds	r0, r7, r2
    7c56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    7c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7c5c:	4c17      	ldr	r4, [pc, #92]	; (7cbc <MQTTSerialize_connect+0x2a4>)
    7c5e:	47a0      	blx	r4
	}

	if(flags.bits.password) {
    7c60:	2314      	movs	r3, #20
    7c62:	18fb      	adds	r3, r7, r3
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	2240      	movs	r2, #64	; 0x40
    7c68:	4013      	ands	r3, r2
    7c6a:	b2db      	uxtb	r3, r3
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d007      	beq.n	7c80 <MQTTSerialize_connect+0x268>
		writeMQTTString(&ptr, options->password);
    7c70:	687b      	ldr	r3, [r7, #4]
    7c72:	221c      	movs	r2, #28
    7c74:	18b8      	adds	r0, r7, r2
    7c76:	6c99      	ldr	r1, [r3, #72]	; 0x48
    7c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7c7c:	4c0f      	ldr	r4, [pc, #60]	; (7cbc <MQTTSerialize_connect+0x2a4>)
    7c7e:	47a0      	blx	r4
	}

	*serialized_len = (uint32_t)(ptr - buf);
    7c80:	69fb      	ldr	r3, [r7, #28]
    7c82:	001a      	movs	r2, r3
    7c84:	68fb      	ldr	r3, [r7, #12]
    7c86:	1ad3      	subs	r3, r2, r3
    7c88:	001a      	movs	r2, r3
    7c8a:	683b      	ldr	r3, [r7, #0]
    7c8c:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    7c8e:	2300      	movs	r3, #0
}
    7c90:	0018      	movs	r0, r3
    7c92:	46bd      	mov	sp, r7
    7c94:	b00a      	add	sp, #40	; 0x28
    7c96:	bdb0      	pop	{r4, r5, r7, pc}
    7c98:	00007955 	.word	0x00007955
    7c9c:	00008269 	.word	0x00008269
    7ca0:	000086f1 	.word	0x000086f1
    7ca4:	000083e9 	.word	0x000083e9
    7ca8:	00008185 	.word	0x00008185
    7cac:	0001c5e0 	.word	0x0001c5e0
    7cb0:	000084ed 	.word	0x000084ed
    7cb4:	0001c5e8 	.word	0x0001c5e8
    7cb8:	00008459 	.word	0x00008459
    7cbc:	0000853d 	.word	0x0000853d

00007cc0 <MQTTDeserialize_connack>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTDeserialize_connack(unsigned char *sessionPresent,
									   MQTTReturnCode *connack_rc,
									   unsigned char *buf, size_t buflen) {
    7cc0:	b590      	push	{r4, r7, lr}
    7cc2:	b08d      	sub	sp, #52	; 0x34
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	60f8      	str	r0, [r7, #12]
    7cc8:	60b9      	str	r1, [r7, #8]
    7cca:	607a      	str	r2, [r7, #4]
    7ccc:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == sessionPresent || NULL == connack_rc || NULL == buf) {
    7cce:	68fb      	ldr	r3, [r7, #12]
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	d005      	beq.n	7ce0 <MQTTDeserialize_connack+0x20>
    7cd4:	68bb      	ldr	r3, [r7, #8]
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d002      	beq.n	7ce0 <MQTTDeserialize_connack+0x20>
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	2b00      	cmp	r3, #0
    7cde:	d102      	bne.n	7ce6 <MQTTDeserialize_connack+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    7ce0:	2306      	movs	r3, #6
    7ce2:	425b      	negs	r3, r3
    7ce4:	e094      	b.n	7e10 <MQTTDeserialize_connack+0x150>
	}

	/* CONNACK header size is fixed at two bytes for fixed and 2 bytes for variable,
	 * using that as minimum size
	 * MQTT v3.1.1 Specification 3.2.1 */
	if(4 > buflen) {
    7ce6:	683b      	ldr	r3, [r7, #0]
    7ce8:	2b03      	cmp	r3, #3
    7cea:	d802      	bhi.n	7cf2 <MQTTDeserialize_connack+0x32>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    7cec:	2309      	movs	r3, #9
    7cee:	425b      	negs	r3, r3
    7cf0:	e08e      	b.n	7e10 <MQTTDeserialize_connack+0x150>
	}

	MQTTHeader header = {0};
    7cf2:	2300      	movs	r3, #0
    7cf4:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned char *curdata = buf;
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	623b      	str	r3, [r7, #32]
	unsigned char *enddata = NULL;
    7cfa:	2300      	movs	r3, #0
    7cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	MQTTReturnCode rc = FAILURE;
    7cfe:	232b      	movs	r3, #43	; 0x2b
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	22ff      	movs	r2, #255	; 0xff
    7d04:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    7d06:	2300      	movs	r3, #0
    7d08:	61fb      	str	r3, [r7, #28]
	uint32_t readBytesLen = 0;
    7d0a:	2300      	movs	r3, #0
    7d0c:	61bb      	str	r3, [r7, #24]
	MQTTConnackFlags flags = {0};
    7d0e:	2300      	movs	r3, #0
    7d10:	617b      	str	r3, [r7, #20]

	header.byte = readChar(&curdata);
    7d12:	2320      	movs	r3, #32
    7d14:	18fb      	adds	r3, r7, r3
    7d16:	0018      	movs	r0, r3
    7d18:	4b3f      	ldr	r3, [pc, #252]	; (7e18 <MQTTDeserialize_connack+0x158>)
    7d1a:	4798      	blx	r3
    7d1c:	0003      	movs	r3, r0
    7d1e:	001a      	movs	r2, r3
    7d20:	2324      	movs	r3, #36	; 0x24
    7d22:	18fb      	adds	r3, r7, r3
    7d24:	701a      	strb	r2, [r3, #0]
	if(CONNACK != header.bits.type) {
    7d26:	2324      	movs	r3, #36	; 0x24
    7d28:	18fb      	adds	r3, r7, r3
    7d2a:	781b      	ldrb	r3, [r3, #0]
    7d2c:	220f      	movs	r2, #15
    7d2e:	4393      	bics	r3, r2
    7d30:	b2db      	uxtb	r3, r3
    7d32:	2b20      	cmp	r3, #32
    7d34:	d002      	beq.n	7d3c <MQTTDeserialize_connack+0x7c>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    7d36:	2301      	movs	r3, #1
    7d38:	425b      	negs	r3, r3
    7d3a:	e069      	b.n	7e10 <MQTTDeserialize_connack+0x150>
	}

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    7d3c:	6a3b      	ldr	r3, [r7, #32]
    7d3e:	222b      	movs	r2, #43	; 0x2b
    7d40:	18bc      	adds	r4, r7, r2
    7d42:	2218      	movs	r2, #24
    7d44:	18ba      	adds	r2, r7, r2
    7d46:	211c      	movs	r1, #28
    7d48:	1879      	adds	r1, r7, r1
    7d4a:	0018      	movs	r0, r3
    7d4c:	4b33      	ldr	r3, [pc, #204]	; (7e1c <MQTTDeserialize_connack+0x15c>)
    7d4e:	4798      	blx	r3
    7d50:	0003      	movs	r3, r0
    7d52:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    7d54:	232b      	movs	r3, #43	; 0x2b
    7d56:	18fb      	adds	r3, r7, r3
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	b25b      	sxtb	r3, r3
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d004      	beq.n	7d6a <MQTTDeserialize_connack+0xaa>
		FUNC_EXIT_RC(rc);
		return rc;
    7d60:	232b      	movs	r3, #43	; 0x2b
    7d62:	18fb      	adds	r3, r7, r3
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	b25b      	sxtb	r3, r3
    7d68:	e052      	b.n	7e10 <MQTTDeserialize_connack+0x150>
	}

	curdata += (readBytesLen);
    7d6a:	6a3a      	ldr	r2, [r7, #32]
    7d6c:	69bb      	ldr	r3, [r7, #24]
    7d6e:	18d3      	adds	r3, r2, r3
    7d70:	623b      	str	r3, [r7, #32]
	enddata = curdata + decodedLen;
    7d72:	6a3a      	ldr	r2, [r7, #32]
    7d74:	69fb      	ldr	r3, [r7, #28]
    7d76:	18d3      	adds	r3, r2, r3
    7d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(enddata - curdata < 2) {
    7d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7d7c:	6a3a      	ldr	r2, [r7, #32]
    7d7e:	1a9b      	subs	r3, r3, r2
    7d80:	2b01      	cmp	r3, #1
    7d82:	dc02      	bgt.n	7d8a <MQTTDeserialize_connack+0xca>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    7d84:	2301      	movs	r3, #1
    7d86:	425b      	negs	r3, r3
    7d88:	e042      	b.n	7e10 <MQTTDeserialize_connack+0x150>
	}

	flags.all = readChar(&curdata);
    7d8a:	2320      	movs	r3, #32
    7d8c:	18fb      	adds	r3, r7, r3
    7d8e:	0018      	movs	r0, r3
    7d90:	4b21      	ldr	r3, [pc, #132]	; (7e18 <MQTTDeserialize_connack+0x158>)
    7d92:	4798      	blx	r3
    7d94:	0003      	movs	r3, r0
    7d96:	001a      	movs	r2, r3
    7d98:	2314      	movs	r3, #20
    7d9a:	18fb      	adds	r3, r7, r3
    7d9c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
    7d9e:	2314      	movs	r3, #20
    7da0:	18fb      	adds	r3, r7, r3
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	061b      	lsls	r3, r3, #24
    7da6:	0fdb      	lsrs	r3, r3, #31
    7da8:	b2db      	uxtb	r3, r3
    7daa:	001a      	movs	r2, r3
    7dac:	68fb      	ldr	r3, [r7, #12]
    7dae:	701a      	strb	r2, [r3, #0]
	unsigned char connack_rc_char = readChar(&curdata);
    7db0:	232a      	movs	r3, #42	; 0x2a
    7db2:	18fc      	adds	r4, r7, r3
    7db4:	2320      	movs	r3, #32
    7db6:	18fb      	adds	r3, r7, r3
    7db8:	0018      	movs	r0, r3
    7dba:	4b17      	ldr	r3, [pc, #92]	; (7e18 <MQTTDeserialize_connack+0x158>)
    7dbc:	4798      	blx	r3
    7dbe:	0003      	movs	r3, r0
    7dc0:	7023      	strb	r3, [r4, #0]
	switch(connack_rc_char) {
    7dc2:	232a      	movs	r3, #42	; 0x2a
    7dc4:	18fb      	adds	r3, r7, r3
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	2b05      	cmp	r3, #5
    7dca:	d81c      	bhi.n	7e06 <MQTTDeserialize_connack+0x146>
    7dcc:	009a      	lsls	r2, r3, #2
    7dce:	4b14      	ldr	r3, [pc, #80]	; (7e20 <MQTTDeserialize_connack+0x160>)
    7dd0:	18d3      	adds	r3, r2, r3
    7dd2:	681b      	ldr	r3, [r3, #0]
    7dd4:	469f      	mov	pc, r3
		case CONNACK_CONNECTION_ACCEPTED:
			*connack_rc = MQTT_CONNACK_CONNECTION_ACCEPTED;
    7dd6:	68bb      	ldr	r3, [r7, #8]
    7dd8:	2204      	movs	r2, #4
    7dda:	701a      	strb	r2, [r3, #0]
			break;
    7ddc:	e017      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		case CONANCK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR:
			*connack_rc = MQTT_CONANCK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR;
    7dde:	68bb      	ldr	r3, [r7, #8]
    7de0:	22f3      	movs	r2, #243	; 0xf3
    7de2:	701a      	strb	r2, [r3, #0]
			break;
    7de4:	e013      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		case CONNACK_IDENTIFIER_REJECTED_ERROR:
			*connack_rc = MQTT_CONNACK_IDENTIFIER_REJECTED_ERROR;
    7de6:	68bb      	ldr	r3, [r7, #8]
    7de8:	22f2      	movs	r2, #242	; 0xf2
    7dea:	701a      	strb	r2, [r3, #0]
			break;
    7dec:	e00f      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		case CONNACK_SERVER_UNAVAILABLE_ERROR:
			*connack_rc = MQTT_CONNACK_SERVER_UNAVAILABLE_ERROR;
    7dee:	68bb      	ldr	r3, [r7, #8]
    7df0:	22f1      	movs	r2, #241	; 0xf1
    7df2:	701a      	strb	r2, [r3, #0]
			break;
    7df4:	e00b      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		case CONNACK_BAD_USERDATA_ERROR:
			*connack_rc = MQTT_CONNACK_BAD_USERDATA_ERROR;
    7df6:	68bb      	ldr	r3, [r7, #8]
    7df8:	22f0      	movs	r2, #240	; 0xf0
    7dfa:	701a      	strb	r2, [r3, #0]
			break;
    7dfc:	e007      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		case CONNACK_NOT_AUTHORIZED_ERROR:
			*connack_rc = MQTT_CONNACK_NOT_AUTHORIZED_ERROR;
    7dfe:	68bb      	ldr	r3, [r7, #8]
    7e00:	22ef      	movs	r2, #239	; 0xef
    7e02:	701a      	strb	r2, [r3, #0]
			break;
    7e04:	e003      	b.n	7e0e <MQTTDeserialize_connack+0x14e>
		default:
			*connack_rc = MQTT_CONNACK_UNKNOWN_ERROR;
    7e06:	68bb      	ldr	r3, [r7, #8]
    7e08:	22f4      	movs	r2, #244	; 0xf4
    7e0a:	701a      	strb	r2, [r3, #0]
			break;
    7e0c:	46c0      	nop			; (mov r8, r8)
	}

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    7e0e:	2300      	movs	r3, #0
}
    7e10:	0018      	movs	r0, r3
    7e12:	46bd      	mov	sp, r7
    7e14:	b00d      	add	sp, #52	; 0x34
    7e16:	bd90      	pop	{r4, r7, pc}
    7e18:	000083bd 	.word	0x000083bd
    7e1c:	000082f9 	.word	0x000082f9
    7e20:	0001c5f0 	.word	0x0001c5f0

00007e24 <MQTTSerialize_zero>:
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_zero(unsigned char *buf, size_t buflen,
								  unsigned char packetType,
								  uint32_t *serialized_length) {
    7e24:	b5b0      	push	{r4, r5, r7, lr}
    7e26:	b08a      	sub	sp, #40	; 0x28
    7e28:	af02      	add	r7, sp, #8
    7e2a:	60f8      	str	r0, [r7, #12]
    7e2c:	60b9      	str	r1, [r7, #8]
    7e2e:	603b      	str	r3, [r7, #0]
    7e30:	1dfb      	adds	r3, r7, #7
    7e32:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == serialized_length) {
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	2b00      	cmp	r3, #0
    7e38:	d002      	beq.n	7e40 <MQTTSerialize_zero+0x1c>
    7e3a:	683b      	ldr	r3, [r7, #0]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d102      	bne.n	7e46 <MQTTSerialize_zero+0x22>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    7e40:	2306      	movs	r3, #6
    7e42:	425b      	negs	r3, r3
    7e44:	e03d      	b.n	7ec2 <MQTTSerialize_zero+0x9e>
	}

	/* Buffer should have at least 2 bytes for the header */
	if(4 > buflen) {
    7e46:	68bb      	ldr	r3, [r7, #8]
    7e48:	2b03      	cmp	r3, #3
    7e4a:	d802      	bhi.n	7e52 <MQTTSerialize_zero+0x2e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    7e4c:	2309      	movs	r3, #9
    7e4e:	425b      	negs	r3, r3
    7e50:	e037      	b.n	7ec2 <MQTTSerialize_zero+0x9e>
	}

	MQTTHeader header = {0};
    7e52:	2300      	movs	r3, #0
    7e54:	61bb      	str	r3, [r7, #24]
	unsigned char *ptr = buf;
    7e56:	68fb      	ldr	r3, [r7, #12]
    7e58:	617b      	str	r3, [r7, #20]

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, packetType, QOS0, 0, 0);
    7e5a:	1dfb      	adds	r3, r7, #7
    7e5c:	2100      	movs	r1, #0
    7e5e:	5659      	ldrsb	r1, [r3, r1]
    7e60:	231f      	movs	r3, #31
    7e62:	18fc      	adds	r4, r7, r3
    7e64:	2318      	movs	r3, #24
    7e66:	18f8      	adds	r0, r7, r3
    7e68:	2300      	movs	r3, #0
    7e6a:	9300      	str	r3, [sp, #0]
    7e6c:	2300      	movs	r3, #0
    7e6e:	2200      	movs	r2, #0
    7e70:	4d16      	ldr	r5, [pc, #88]	; (7ecc <MQTTSerialize_zero+0xa8>)
    7e72:	47a8      	blx	r5
    7e74:	0003      	movs	r3, r0
    7e76:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    7e78:	231f      	movs	r3, #31
    7e7a:	18fb      	adds	r3, r7, r3
    7e7c:	781b      	ldrb	r3, [r3, #0]
    7e7e:	b25b      	sxtb	r3, r3
    7e80:	2b00      	cmp	r3, #0
    7e82:	d004      	beq.n	7e8e <MQTTSerialize_zero+0x6a>
		FUNC_EXIT_RC(rc);
		return rc;
    7e84:	231f      	movs	r3, #31
    7e86:	18fb      	adds	r3, r7, r3
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	b25b      	sxtb	r3, r3
    7e8c:	e019      	b.n	7ec2 <MQTTSerialize_zero+0x9e>
	}

	/* write header */
	writeChar(&ptr, header.byte);
    7e8e:	2318      	movs	r3, #24
    7e90:	18fb      	adds	r3, r7, r3
    7e92:	781a      	ldrb	r2, [r3, #0]
    7e94:	2314      	movs	r3, #20
    7e96:	18fb      	adds	r3, r7, r3
    7e98:	0011      	movs	r1, r2
    7e9a:	0018      	movs	r0, r3
    7e9c:	4b0c      	ldr	r3, [pc, #48]	; (7ed0 <MQTTSerialize_zero+0xac>)
    7e9e:	4798      	blx	r3

	/* write remaining length */
	ptr += MQTTPacket_encode(ptr, 0);
    7ea0:	697b      	ldr	r3, [r7, #20]
    7ea2:	2100      	movs	r1, #0
    7ea4:	0018      	movs	r0, r3
    7ea6:	4b0b      	ldr	r3, [pc, #44]	; (7ed4 <MQTTSerialize_zero+0xb0>)
    7ea8:	4798      	blx	r3
    7eaa:	0002      	movs	r2, r0
    7eac:	697b      	ldr	r3, [r7, #20]
    7eae:	189b      	adds	r3, r3, r2
    7eb0:	617b      	str	r3, [r7, #20]
	*serialized_length = (uint32_t)(ptr - buf);
    7eb2:	697b      	ldr	r3, [r7, #20]
    7eb4:	001a      	movs	r2, r3
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	1ad3      	subs	r3, r2, r3
    7eba:	001a      	movs	r2, r3
    7ebc:	683b      	ldr	r3, [r7, #0]
    7ebe:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    7ec0:	2300      	movs	r3, #0
}
    7ec2:	0018      	movs	r0, r3
    7ec4:	46bd      	mov	sp, r7
    7ec6:	b008      	add	sp, #32
    7ec8:	bdb0      	pop	{r4, r5, r7, pc}
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	000086f1 	.word	0x000086f1
    7ed0:	000083e9 	.word	0x000083e9
    7ed4:	00008185 	.word	0x00008185

00007ed8 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_disconnect(unsigned char *buf, size_t buflen,
										uint32_t *serialized_length) {
    7ed8:	b590      	push	{r4, r7, lr}
    7eda:	b085      	sub	sp, #20
    7edc:	af00      	add	r7, sp, #0
    7ede:	60f8      	str	r0, [r7, #12]
    7ee0:	60b9      	str	r1, [r7, #8]
    7ee2:	607a      	str	r2, [r7, #4]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT, serialized_length);
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	68b9      	ldr	r1, [r7, #8]
    7ee8:	68f8      	ldr	r0, [r7, #12]
    7eea:	220e      	movs	r2, #14
    7eec:	4c03      	ldr	r4, [pc, #12]	; (7efc <MQTTSerialize_disconnect+0x24>)
    7eee:	47a0      	blx	r4
    7ef0:	0003      	movs	r3, r0
}
    7ef2:	0018      	movs	r0, r3
    7ef4:	46bd      	mov	sp, r7
    7ef6:	b005      	add	sp, #20
    7ef8:	bd90      	pop	{r4, r7, pc}
    7efa:	46c0      	nop			; (mov r8, r8)
    7efc:	00007e25 	.word	0x00007e25

00007f00 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_pingreq(unsigned char *buf, size_t buflen,
									 uint32_t *serialized_length) {
    7f00:	b590      	push	{r4, r7, lr}
    7f02:	b085      	sub	sp, #20
    7f04:	af00      	add	r7, sp, #0
    7f06:	60f8      	str	r0, [r7, #12]
    7f08:	60b9      	str	r1, [r7, #8]
    7f0a:	607a      	str	r2, [r7, #4]
	return MQTTSerialize_zero(buf, buflen, PINGREQ, serialized_length);
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	68b9      	ldr	r1, [r7, #8]
    7f10:	68f8      	ldr	r0, [r7, #12]
    7f12:	220c      	movs	r2, #12
    7f14:	4c03      	ldr	r4, [pc, #12]	; (7f24 <MQTTSerialize_pingreq+0x24>)
    7f16:	47a0      	blx	r4
    7f18:	0003      	movs	r3, r0
}
    7f1a:	0018      	movs	r0, r3
    7f1c:	46bd      	mov	sp, r7
    7f1e:	b005      	add	sp, #20
    7f20:	bd90      	pop	{r4, r7, pc}
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	00007e25 	.word	0x00007e25

00007f28 <MQTTDeserialize_publish>:
  * @return error code.  1 is success
  */
MQTTReturnCode MQTTDeserialize_publish(unsigned char *dup, QoS *qos,
									   unsigned char *retained, uint16_t *packetid,
									   MQTTString* topicName, unsigned char **payload,
									   uint32_t *payloadlen, unsigned char *buf, size_t buflen) {
    7f28:	b590      	push	{r4, r7, lr}
    7f2a:	b08b      	sub	sp, #44	; 0x2c
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	60f8      	str	r0, [r7, #12]
    7f30:	60b9      	str	r1, [r7, #8]
    7f32:	607a      	str	r2, [r7, #4]
    7f34:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == dup || NULL == qos || NULL == retained || NULL == packetid) {
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d008      	beq.n	7f4e <MQTTDeserialize_publish+0x26>
    7f3c:	68bb      	ldr	r3, [r7, #8]
    7f3e:	2b00      	cmp	r3, #0
    7f40:	d005      	beq.n	7f4e <MQTTDeserialize_publish+0x26>
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	2b00      	cmp	r3, #0
    7f46:	d002      	beq.n	7f4e <MQTTDeserialize_publish+0x26>
    7f48:	683b      	ldr	r3, [r7, #0]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d102      	bne.n	7f54 <MQTTDeserialize_publish+0x2c>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    7f4e:	2301      	movs	r3, #1
    7f50:	425b      	negs	r3, r3
    7f52:	e089      	b.n	8068 <MQTTDeserialize_publish+0x140>
	 * Fixed header is two bytes.
	 * Variable header size depends on QoS And Topic Name.
	 * QoS level 0 doesn't have a message identifier (0 - 2 bytes)
	 * Topic Name length fields decide size of topic name field (at least 2 bytes)
	 * MQTT v3.1.1 Specification 3.3.1 */
	if(4 > buflen) {
    7f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    7f56:	2b03      	cmp	r3, #3
    7f58:	d802      	bhi.n	7f60 <MQTTDeserialize_publish+0x38>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    7f5a:	2309      	movs	r3, #9
    7f5c:	425b      	negs	r3, r3
    7f5e:	e083      	b.n	8068 <MQTTDeserialize_publish+0x140>
	}

	MQTTHeader header = {0};
    7f60:	2300      	movs	r3, #0
    7f62:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    7f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7f66:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    7f68:	2300      	movs	r3, #0
    7f6a:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTReturnCode rc = FAILURE;
    7f6c:	2323      	movs	r3, #35	; 0x23
    7f6e:	18fb      	adds	r3, r7, r3
    7f70:	22ff      	movs	r2, #255	; 0xff
    7f72:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    7f74:	2300      	movs	r3, #0
    7f76:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    7f78:	2300      	movs	r3, #0
    7f7a:	613b      	str	r3, [r7, #16]

	header.byte = readChar(&curdata);
    7f7c:	2318      	movs	r3, #24
    7f7e:	18fb      	adds	r3, r7, r3
    7f80:	0018      	movs	r0, r3
    7f82:	4b3b      	ldr	r3, [pc, #236]	; (8070 <MQTTDeserialize_publish+0x148>)
    7f84:	4798      	blx	r3
    7f86:	0003      	movs	r3, r0
    7f88:	001a      	movs	r2, r3
    7f8a:	231c      	movs	r3, #28
    7f8c:	18fb      	adds	r3, r7, r3
    7f8e:	701a      	strb	r2, [r3, #0]
	if(PUBLISH != header.bits.type) {
    7f90:	231c      	movs	r3, #28
    7f92:	18fb      	adds	r3, r7, r3
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	220f      	movs	r2, #15
    7f98:	4393      	bics	r3, r2
    7f9a:	b2db      	uxtb	r3, r3
    7f9c:	2b30      	cmp	r3, #48	; 0x30
    7f9e:	d002      	beq.n	7fa6 <MQTTDeserialize_publish+0x7e>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    7fa0:	2301      	movs	r3, #1
    7fa2:	425b      	negs	r3, r3
    7fa4:	e060      	b.n	8068 <MQTTDeserialize_publish+0x140>
	}

	*dup = header.bits.dup;
    7fa6:	231c      	movs	r3, #28
    7fa8:	18fb      	adds	r3, r7, r3
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	071b      	lsls	r3, r3, #28
    7fae:	0fdb      	lsrs	r3, r3, #31
    7fb0:	b2db      	uxtb	r3, r3
    7fb2:	001a      	movs	r2, r3
    7fb4:	68fb      	ldr	r3, [r7, #12]
    7fb6:	701a      	strb	r2, [r3, #0]
	*qos = (QoS)header.bits.qos;
    7fb8:	231c      	movs	r3, #28
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	781b      	ldrb	r3, [r3, #0]
    7fbe:	075b      	lsls	r3, r3, #29
    7fc0:	0f9b      	lsrs	r3, r3, #30
    7fc2:	b2db      	uxtb	r3, r3
    7fc4:	001a      	movs	r2, r3
    7fc6:	68bb      	ldr	r3, [r7, #8]
    7fc8:	701a      	strb	r2, [r3, #0]
	*retained = header.bits.retain;
    7fca:	231c      	movs	r3, #28
    7fcc:	18fb      	adds	r3, r7, r3
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	07db      	lsls	r3, r3, #31
    7fd2:	0fdb      	lsrs	r3, r3, #31
    7fd4:	b2db      	uxtb	r3, r3
    7fd6:	001a      	movs	r2, r3
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	701a      	strb	r2, [r3, #0]

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    7fdc:	69bb      	ldr	r3, [r7, #24]
    7fde:	2223      	movs	r2, #35	; 0x23
    7fe0:	18bc      	adds	r4, r7, r2
    7fe2:	2210      	movs	r2, #16
    7fe4:	18ba      	adds	r2, r7, r2
    7fe6:	2114      	movs	r1, #20
    7fe8:	1879      	adds	r1, r7, r1
    7fea:	0018      	movs	r0, r3
    7fec:	4b21      	ldr	r3, [pc, #132]	; (8074 <MQTTDeserialize_publish+0x14c>)
    7fee:	4798      	blx	r3
    7ff0:	0003      	movs	r3, r0
    7ff2:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    7ff4:	2323      	movs	r3, #35	; 0x23
    7ff6:	18fb      	adds	r3, r7, r3
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	b25b      	sxtb	r3, r3
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d004      	beq.n	800a <MQTTDeserialize_publish+0xe2>
		FUNC_EXIT_RC(rc);
		return rc;
    8000:	2323      	movs	r3, #35	; 0x23
    8002:	18fb      	adds	r3, r7, r3
    8004:	781b      	ldrb	r3, [r3, #0]
    8006:	b25b      	sxtb	r3, r3
    8008:	e02e      	b.n	8068 <MQTTDeserialize_publish+0x140>
	}
	curdata += (readBytesLen);
    800a:	69ba      	ldr	r2, [r7, #24]
    800c:	693b      	ldr	r3, [r7, #16]
    800e:	18d3      	adds	r3, r2, r3
    8010:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    8012:	69ba      	ldr	r2, [r7, #24]
    8014:	697b      	ldr	r3, [r7, #20]
    8016:	18d3      	adds	r3, r2, r3
    8018:	627b      	str	r3, [r7, #36]	; 0x24

	/* do we have enough data to read the protocol version byte? */
	if(SUCCESS != readMQTTLenString(topicName, &curdata, enddata) || (0 > (enddata - curdata))) {
    801a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    801c:	2318      	movs	r3, #24
    801e:	18f9      	adds	r1, r7, r3
    8020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8022:	0018      	movs	r0, r3
    8024:	4b14      	ldr	r3, [pc, #80]	; (8078 <MQTTDeserialize_publish+0x150>)
    8026:	4798      	blx	r3
    8028:	1e03      	subs	r3, r0, #0
    802a:	d103      	bne.n	8034 <MQTTDeserialize_publish+0x10c>
    802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    802e:	69ba      	ldr	r2, [r7, #24]
    8030:	1a9b      	subs	r3, r3, r2
    8032:	d502      	bpl.n	803a <MQTTDeserialize_publish+0x112>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    8034:	2301      	movs	r3, #1
    8036:	425b      	negs	r3, r3
    8038:	e016      	b.n	8068 <MQTTDeserialize_publish+0x140>
	}

	if(QOS0 != *qos) {
    803a:	68bb      	ldr	r3, [r7, #8]
    803c:	781b      	ldrb	r3, [r3, #0]
    803e:	2b00      	cmp	r3, #0
    8040:	d008      	beq.n	8054 <MQTTDeserialize_publish+0x12c>
		*packetid = readPacketId(&curdata);
    8042:	2318      	movs	r3, #24
    8044:	18fb      	adds	r3, r7, r3
    8046:	0018      	movs	r0, r3
    8048:	4b0c      	ldr	r3, [pc, #48]	; (807c <MQTTDeserialize_publish+0x154>)
    804a:	4798      	blx	r3
    804c:	0003      	movs	r3, r0
    804e:	001a      	movs	r2, r3
    8050:	683b      	ldr	r3, [r7, #0]
    8052:	801a      	strh	r2, [r3, #0]
	}

	*payloadlen = (uint32_t)(enddata - curdata);
    8054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8056:	69ba      	ldr	r2, [r7, #24]
    8058:	1a9b      	subs	r3, r3, r2
    805a:	001a      	movs	r2, r3
    805c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    805e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
    8060:	69ba      	ldr	r2, [r7, #24]
    8062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8064:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    8066:	2300      	movs	r3, #0
}
    8068:	0018      	movs	r0, r3
    806a:	46bd      	mov	sp, r7
    806c:	b00b      	add	sp, #44	; 0x2c
    806e:	bd90      	pop	{r4, r7, pc}
    8070:	000083bd 	.word	0x000083bd
    8074:	000082f9 	.word	0x000082f9
    8078:	000085c1 	.word	0x000085c1
    807c:	00008367 	.word	0x00008367

00008080 <MQTTDeserialize_ack>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
MQTTReturnCode MQTTDeserialize_ack(unsigned char *packettype, unsigned char *dup,
								   uint16_t *packetid, unsigned char *buf,
								   size_t buflen) {
    8080:	b590      	push	{r4, r7, lr}
    8082:	b08b      	sub	sp, #44	; 0x2c
    8084:	af00      	add	r7, sp, #0
    8086:	60f8      	str	r0, [r7, #12]
    8088:	60b9      	str	r1, [r7, #8]
    808a:	607a      	str	r2, [r7, #4]
    808c:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == packettype || NULL == dup || NULL == packetid || NULL == buf) {
    808e:	68fb      	ldr	r3, [r7, #12]
    8090:	2b00      	cmp	r3, #0
    8092:	d008      	beq.n	80a6 <MQTTDeserialize_ack+0x26>
    8094:	68bb      	ldr	r3, [r7, #8]
    8096:	2b00      	cmp	r3, #0
    8098:	d005      	beq.n	80a6 <MQTTDeserialize_ack+0x26>
    809a:	687b      	ldr	r3, [r7, #4]
    809c:	2b00      	cmp	r3, #0
    809e:	d002      	beq.n	80a6 <MQTTDeserialize_ack+0x26>
    80a0:	683b      	ldr	r3, [r7, #0]
    80a2:	2b00      	cmp	r3, #0
    80a4:	d102      	bne.n	80ac <MQTTDeserialize_ack+0x2c>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    80a6:	2306      	movs	r3, #6
    80a8:	425b      	negs	r3, r3
    80aa:	e060      	b.n	816e <MQTTDeserialize_ack+0xee>
	}

	/* PUBACK fixed header size is two bytes, variable header is 2 bytes, MQTT v3.1.1 Specification 3.4.1 */
	if(4 > buflen) {
    80ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    80ae:	2b03      	cmp	r3, #3
    80b0:	d802      	bhi.n	80b8 <MQTTDeserialize_ack+0x38>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    80b2:	2309      	movs	r3, #9
    80b4:	425b      	negs	r3, r3
    80b6:	e05a      	b.n	816e <MQTTDeserialize_ack+0xee>
	}

	MQTTReturnCode rc = FAILURE;
    80b8:	2327      	movs	r3, #39	; 0x27
    80ba:	18fb      	adds	r3, r7, r3
    80bc:	22ff      	movs	r2, #255	; 0xff
    80be:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
    80c0:	2300      	movs	r3, #0
    80c2:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    80c4:	683b      	ldr	r3, [r7, #0]
    80c6:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    80c8:	2300      	movs	r3, #0
    80ca:	623b      	str	r3, [r7, #32]
	uint32_t decodedLen = 0;
    80cc:	2300      	movs	r3, #0
    80ce:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    80d0:	2300      	movs	r3, #0
    80d2:	613b      	str	r3, [r7, #16]

	header.byte = readChar(&curdata);
    80d4:	2318      	movs	r3, #24
    80d6:	18fb      	adds	r3, r7, r3
    80d8:	0018      	movs	r0, r3
    80da:	4b27      	ldr	r3, [pc, #156]	; (8178 <MQTTDeserialize_ack+0xf8>)
    80dc:	4798      	blx	r3
    80de:	0003      	movs	r3, r0
    80e0:	001a      	movs	r2, r3
    80e2:	231c      	movs	r3, #28
    80e4:	18fb      	adds	r3, r7, r3
    80e6:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
    80e8:	231c      	movs	r3, #28
    80ea:	18fb      	adds	r3, r7, r3
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	071b      	lsls	r3, r3, #28
    80f0:	0fdb      	lsrs	r3, r3, #31
    80f2:	b2db      	uxtb	r3, r3
    80f4:	001a      	movs	r2, r3
    80f6:	68bb      	ldr	r3, [r7, #8]
    80f8:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
    80fa:	231c      	movs	r3, #28
    80fc:	18fb      	adds	r3, r7, r3
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	061b      	lsls	r3, r3, #24
    8102:	0f1b      	lsrs	r3, r3, #28
    8104:	b2db      	uxtb	r3, r3
    8106:	001a      	movs	r2, r3
    8108:	68fb      	ldr	r3, [r7, #12]
    810a:	701a      	strb	r2, [r3, #0]

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    810c:	69bb      	ldr	r3, [r7, #24]
    810e:	2227      	movs	r2, #39	; 0x27
    8110:	18bc      	adds	r4, r7, r2
    8112:	2210      	movs	r2, #16
    8114:	18ba      	adds	r2, r7, r2
    8116:	2114      	movs	r1, #20
    8118:	1879      	adds	r1, r7, r1
    811a:	0018      	movs	r0, r3
    811c:	4b17      	ldr	r3, [pc, #92]	; (817c <MQTTDeserialize_ack+0xfc>)
    811e:	4798      	blx	r3
    8120:	0003      	movs	r3, r0
    8122:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    8124:	2327      	movs	r3, #39	; 0x27
    8126:	18fb      	adds	r3, r7, r3
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	b25b      	sxtb	r3, r3
    812c:	2b00      	cmp	r3, #0
    812e:	d004      	beq.n	813a <MQTTDeserialize_ack+0xba>
		FUNC_EXIT_RC(rc);
		return rc;
    8130:	2327      	movs	r3, #39	; 0x27
    8132:	18fb      	adds	r3, r7, r3
    8134:	781b      	ldrb	r3, [r3, #0]
    8136:	b25b      	sxtb	r3, r3
    8138:	e019      	b.n	816e <MQTTDeserialize_ack+0xee>
	}
	curdata += (readBytesLen);
    813a:	69ba      	ldr	r2, [r7, #24]
    813c:	693b      	ldr	r3, [r7, #16]
    813e:	18d3      	adds	r3, r2, r3
    8140:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    8142:	69ba      	ldr	r2, [r7, #24]
    8144:	697b      	ldr	r3, [r7, #20]
    8146:	18d3      	adds	r3, r2, r3
    8148:	623b      	str	r3, [r7, #32]

	if(enddata - curdata < 2) {
    814a:	6a3b      	ldr	r3, [r7, #32]
    814c:	69ba      	ldr	r2, [r7, #24]
    814e:	1a9b      	subs	r3, r3, r2
    8150:	2b01      	cmp	r3, #1
    8152:	dc02      	bgt.n	815a <MQTTDeserialize_ack+0xda>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    8154:	2301      	movs	r3, #1
    8156:	425b      	negs	r3, r3
    8158:	e009      	b.n	816e <MQTTDeserialize_ack+0xee>
	}

	*packetid = readPacketId(&curdata);
    815a:	2318      	movs	r3, #24
    815c:	18fb      	adds	r3, r7, r3
    815e:	0018      	movs	r0, r3
    8160:	4b07      	ldr	r3, [pc, #28]	; (8180 <MQTTDeserialize_ack+0x100>)
    8162:	4798      	blx	r3
    8164:	0003      	movs	r3, r0
    8166:	001a      	movs	r2, r3
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	801a      	strh	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    816c:	2300      	movs	r3, #0
    816e:	0018      	movs	r0, r3
    8170:	46bd      	mov	sp, r7
    8172:	b00b      	add	sp, #44	; 0x2c
    8174:	bd90      	pop	{r4, r7, pc}
    8176:	46c0      	nop			; (mov r8, r8)
    8178:	000083bd 	.word	0x000083bd
    817c:	000082f9 	.word	0x000082f9
    8180:	00008367 	.word	0x00008367

00008184 <MQTTPacket_encode>:
 * Encodes the message length according to the MQTT algorithm
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
uint32_t MQTTPacket_encode(unsigned char *buf, size_t length) {
    8184:	b580      	push	{r7, lr}
    8186:	b084      	sub	sp, #16
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
    818c:	6039      	str	r1, [r7, #0]
	uint32_t outLen = 0;
    818e:	2300      	movs	r3, #0
    8190:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do {
		int16_t d = length % 128;
    8192:	683b      	ldr	r3, [r7, #0]
    8194:	b21a      	sxth	r2, r3
    8196:	230a      	movs	r3, #10
    8198:	18fb      	adds	r3, r7, r3
    819a:	217f      	movs	r1, #127	; 0x7f
    819c:	400a      	ands	r2, r1
    819e:	801a      	strh	r2, [r3, #0]
		length /= 128;
    81a0:	683b      	ldr	r3, [r7, #0]
    81a2:	09db      	lsrs	r3, r3, #7
    81a4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if(length > 0) {
    81a6:	683b      	ldr	r3, [r7, #0]
    81a8:	2b00      	cmp	r3, #0
    81aa:	d007      	beq.n	81bc <MQTTPacket_encode+0x38>
			d |= 0x80;
    81ac:	230a      	movs	r3, #10
    81ae:	18fb      	adds	r3, r7, r3
    81b0:	220a      	movs	r2, #10
    81b2:	18ba      	adds	r2, r7, r2
    81b4:	8812      	ldrh	r2, [r2, #0]
    81b6:	2180      	movs	r1, #128	; 0x80
    81b8:	430a      	orrs	r2, r1
    81ba:	801a      	strh	r2, [r3, #0]
		}
		buf[outLen++] = (unsigned char)d;
    81bc:	68fb      	ldr	r3, [r7, #12]
    81be:	1c5a      	adds	r2, r3, #1
    81c0:	60fa      	str	r2, [r7, #12]
    81c2:	687a      	ldr	r2, [r7, #4]
    81c4:	18d3      	adds	r3, r2, r3
    81c6:	220a      	movs	r2, #10
    81c8:	18ba      	adds	r2, r7, r2
    81ca:	8812      	ldrh	r2, [r2, #0]
    81cc:	b2d2      	uxtb	r2, r2
    81ce:	701a      	strb	r2, [r3, #0]
	}while(length > 0);
    81d0:	683b      	ldr	r3, [r7, #0]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d1dd      	bne.n	8192 <MQTTPacket_encode+0xe>

	FUNC_EXIT_RC(outLen);
	return outLen;
    81d6:	68fb      	ldr	r3, [r7, #12]
}
    81d8:	0018      	movs	r0, r3
    81da:	46bd      	mov	sp, r7
    81dc:	b004      	add	sp, #16
    81de:	bd80      	pop	{r7, pc}

000081e0 <MQTTPacket_decode>:
 * Decodes the message length according to the MQTT algorithm
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
MQTTReturnCode MQTTPacket_decode(uint32_t (*getcharfn)(unsigned char *, uint32_t), uint32_t *value, uint32_t *readBytesLen) {
    81e0:	b580      	push	{r7, lr}
    81e2:	b088      	sub	sp, #32
    81e4:	af00      	add	r7, sp, #0
    81e6:	60f8      	str	r0, [r7, #12]
    81e8:	60b9      	str	r1, [r7, #8]
    81ea:	607a      	str	r2, [r7, #4]
	unsigned char c;
	uint32_t multiplier = 1;
    81ec:	2301      	movs	r3, #1
    81ee:	61fb      	str	r3, [r7, #28]
	uint32_t len = 0;
    81f0:	2300      	movs	r3, #0
    81f2:	61bb      	str	r3, [r7, #24]
	uint32_t getLen = 0;
    81f4:	2300      	movs	r3, #0
    81f6:	617b      	str	r3, [r7, #20]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
    81f8:	68bb      	ldr	r3, [r7, #8]
    81fa:	2200      	movs	r2, #0
    81fc:	601a      	str	r2, [r3, #0]
	do {
		if(++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    81fe:	69bb      	ldr	r3, [r7, #24]
    8200:	3301      	adds	r3, #1
    8202:	61bb      	str	r3, [r7, #24]
    8204:	69bb      	ldr	r3, [r7, #24]
    8206:	2b04      	cmp	r3, #4
    8208:	d902      	bls.n	8210 <MQTTPacket_decode+0x30>
			/* bad data */
			FUNC_EXIT_RC(MQTTPACKET_READ_ERROR);
			return MQTTPACKET_READ_ERROR;
    820a:	230a      	movs	r3, #10
    820c:	425b      	negs	r3, r3
    820e:	e027      	b.n	8260 <MQTTPacket_decode+0x80>
		}
		getLen = (*getcharfn)(&c, 1);
    8210:	2313      	movs	r3, #19
    8212:	18fa      	adds	r2, r7, r3
    8214:	68fb      	ldr	r3, [r7, #12]
    8216:	2101      	movs	r1, #1
    8218:	0010      	movs	r0, r2
    821a:	4798      	blx	r3
    821c:	0003      	movs	r3, r0
    821e:	617b      	str	r3, [r7, #20]
		if(1 != getLen) {
    8220:	697b      	ldr	r3, [r7, #20]
    8222:	2b01      	cmp	r3, #1
    8224:	d002      	beq.n	822c <MQTTPacket_decode+0x4c>
			FUNC_EXIT_RC(FAILURE);
			return FAILURE;
    8226:	2301      	movs	r3, #1
    8228:	425b      	negs	r3, r3
    822a:	e019      	b.n	8260 <MQTTPacket_decode+0x80>
		}
		*value += (c & 127) * multiplier;
    822c:	68bb      	ldr	r3, [r7, #8]
    822e:	681a      	ldr	r2, [r3, #0]
    8230:	2313      	movs	r3, #19
    8232:	18fb      	adds	r3, r7, r3
    8234:	781b      	ldrb	r3, [r3, #0]
    8236:	0019      	movs	r1, r3
    8238:	237f      	movs	r3, #127	; 0x7f
    823a:	400b      	ands	r3, r1
    823c:	69f9      	ldr	r1, [r7, #28]
    823e:	434b      	muls	r3, r1
    8240:	18d2      	adds	r2, r2, r3
    8242:	68bb      	ldr	r3, [r7, #8]
    8244:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
    8246:	69fb      	ldr	r3, [r7, #28]
    8248:	01db      	lsls	r3, r3, #7
    824a:	61fb      	str	r3, [r7, #28]
	}while((c & 128) != 0);
    824c:	2313      	movs	r3, #19
    824e:	18fb      	adds	r3, r7, r3
    8250:	781b      	ldrb	r3, [r3, #0]
    8252:	b25b      	sxtb	r3, r3
    8254:	2b00      	cmp	r3, #0
    8256:	dbd2      	blt.n	81fe <MQTTPacket_decode+0x1e>

	*readBytesLen = len;
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	69ba      	ldr	r2, [r7, #24]
    825c:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    825e:	2300      	movs	r3, #0
}
    8260:	0018      	movs	r0, r3
    8262:	46bd      	mov	sp, r7
    8264:	b008      	add	sp, #32
    8266:	bd80      	pop	{r7, pc}

00008268 <MQTTPacket_len>:

size_t MQTTPacket_len(size_t rem_len) {
    8268:	b580      	push	{r7, lr}
    826a:	b082      	sub	sp, #8
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	3301      	adds	r3, #1
    8274:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if(rem_len < 128) {
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	2b7f      	cmp	r3, #127	; 0x7f
    827a:	d803      	bhi.n	8284 <MQTTPacket_len+0x1c>
		rem_len += 1;
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	3301      	adds	r3, #1
    8280:	607b      	str	r3, [r7, #4]
    8282:	e012      	b.n	82aa <MQTTPacket_len+0x42>
	} else if (rem_len < 16384) {
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	4a0b      	ldr	r2, [pc, #44]	; (82b4 <MQTTPacket_len+0x4c>)
    8288:	4293      	cmp	r3, r2
    828a:	d803      	bhi.n	8294 <MQTTPacket_len+0x2c>
		rem_len += 2;
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	3302      	adds	r3, #2
    8290:	607b      	str	r3, [r7, #4]
    8292:	e00a      	b.n	82aa <MQTTPacket_len+0x42>
	} else if (rem_len < 2097151) {
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	4a08      	ldr	r2, [pc, #32]	; (82b8 <MQTTPacket_len+0x50>)
    8298:	4293      	cmp	r3, r2
    829a:	d803      	bhi.n	82a4 <MQTTPacket_len+0x3c>
		rem_len += 3;
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	3303      	adds	r3, #3
    82a0:	607b      	str	r3, [r7, #4]
    82a2:	e002      	b.n	82aa <MQTTPacket_len+0x42>
	} else {
		rem_len += 4;
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	3304      	adds	r3, #4
    82a8:	607b      	str	r3, [r7, #4]
	}

	return rem_len;
    82aa:	687b      	ldr	r3, [r7, #4]
}
    82ac:	0018      	movs	r0, r3
    82ae:	46bd      	mov	sp, r7
    82b0:	b002      	add	sp, #8
    82b2:	bd80      	pop	{r7, pc}
    82b4:	00003fff 	.word	0x00003fff
    82b8:	001ffffe 	.word	0x001ffffe

000082bc <bufchar>:

static unsigned char *bufptr;

uint32_t bufchar(unsigned char *c, uint32_t count) {
    82bc:	b580      	push	{r7, lr}
    82be:	b084      	sub	sp, #16
    82c0:	af00      	add	r7, sp, #0
    82c2:	6078      	str	r0, [r7, #4]
    82c4:	6039      	str	r1, [r7, #0]
	uint32_t i;

	for(i = 0; i < count; ++i) {
    82c6:	2300      	movs	r3, #0
    82c8:	60fb      	str	r3, [r7, #12]
    82ca:	e00a      	b.n	82e2 <bufchar+0x26>
		*c = *bufptr++;
    82cc:	4b09      	ldr	r3, [pc, #36]	; (82f4 <bufchar+0x38>)
    82ce:	681b      	ldr	r3, [r3, #0]
    82d0:	1c59      	adds	r1, r3, #1
    82d2:	4a08      	ldr	r2, [pc, #32]	; (82f4 <bufchar+0x38>)
    82d4:	6011      	str	r1, [r2, #0]
    82d6:	781a      	ldrb	r2, [r3, #0]
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < count; ++i) {
    82dc:	68fb      	ldr	r3, [r7, #12]
    82de:	3301      	adds	r3, #1
    82e0:	60fb      	str	r3, [r7, #12]
    82e2:	68fa      	ldr	r2, [r7, #12]
    82e4:	683b      	ldr	r3, [r7, #0]
    82e6:	429a      	cmp	r2, r3
    82e8:	d3f0      	bcc.n	82cc <bufchar+0x10>
	}

	return count;
    82ea:	683b      	ldr	r3, [r7, #0]
}
    82ec:	0018      	movs	r0, r3
    82ee:	46bd      	mov	sp, r7
    82f0:	b004      	add	sp, #16
    82f2:	bd80      	pop	{r7, pc}
    82f4:	200006f4 	.word	0x200006f4

000082f8 <MQTTPacket_decodeBuf>:

MQTTReturnCode MQTTPacket_decodeBuf(unsigned char *buf, uint32_t *value, uint32_t *readBytesLen) {
    82f8:	b580      	push	{r7, lr}
    82fa:	b084      	sub	sp, #16
    82fc:	af00      	add	r7, sp, #0
    82fe:	60f8      	str	r0, [r7, #12]
    8300:	60b9      	str	r1, [r7, #8]
    8302:	607a      	str	r2, [r7, #4]
	bufptr = buf;
    8304:	4b06      	ldr	r3, [pc, #24]	; (8320 <MQTTPacket_decodeBuf+0x28>)
    8306:	68fa      	ldr	r2, [r7, #12]
    8308:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value, readBytesLen);
    830a:	687a      	ldr	r2, [r7, #4]
    830c:	68b9      	ldr	r1, [r7, #8]
    830e:	4b05      	ldr	r3, [pc, #20]	; (8324 <MQTTPacket_decodeBuf+0x2c>)
    8310:	0018      	movs	r0, r3
    8312:	4b05      	ldr	r3, [pc, #20]	; (8328 <MQTTPacket_decodeBuf+0x30>)
    8314:	4798      	blx	r3
    8316:	0003      	movs	r3, r0
}
    8318:	0018      	movs	r0, r3
    831a:	46bd      	mov	sp, r7
    831c:	b004      	add	sp, #16
    831e:	bd80      	pop	{r7, pc}
    8320:	200006f4 	.word	0x200006f4
    8324:	000082bd 	.word	0x000082bd
    8328:	000081e1 	.word	0x000081e1

0000832c <readSizeT>:
/**
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
size_t readSizeT(unsigned char **pptr) {
    832c:	b580      	push	{r7, lr}
    832e:	b086      	sub	sp, #24
    8330:	af00      	add	r7, sp, #0
    8332:	6078      	str	r0, [r7, #4]
	unsigned char *ptr = *pptr;
    8334:	687b      	ldr	r3, [r7, #4]
    8336:	681b      	ldr	r3, [r3, #0]
    8338:	617b      	str	r3, [r7, #20]
	size_t firstByte = (size_t)(*ptr);
    833a:	697b      	ldr	r3, [r7, #20]
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	613b      	str	r3, [r7, #16]
	size_t secondByte = (size_t)(*(ptr+1));
    8340:	697b      	ldr	r3, [r7, #20]
    8342:	3301      	adds	r3, #1
    8344:	781b      	ldrb	r3, [r3, #0]
    8346:	60fb      	str	r3, [r7, #12]
	size_t size = 256 * firstByte + secondByte;
    8348:	693b      	ldr	r3, [r7, #16]
    834a:	021a      	lsls	r2, r3, #8
    834c:	68fb      	ldr	r3, [r7, #12]
    834e:	18d3      	adds	r3, r2, r3
    8350:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	681b      	ldr	r3, [r3, #0]
    8356:	1c9a      	adds	r2, r3, #2
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	601a      	str	r2, [r3, #0]
	return size;
    835c:	68bb      	ldr	r3, [r7, #8]
}
    835e:	0018      	movs	r0, r3
    8360:	46bd      	mov	sp, r7
    8362:	b006      	add	sp, #24
    8364:	bd80      	pop	{r7, pc}

00008366 <readPacketId>:
/**
 * Calculates uint16 packet id from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the value calculated
 */
uint16_t readPacketId(unsigned char **pptr) {
    8366:	b580      	push	{r7, lr}
    8368:	b084      	sub	sp, #16
    836a:	af00      	add	r7, sp, #0
    836c:	6078      	str	r0, [r7, #4]
	unsigned char *ptr = *pptr;
    836e:	687b      	ldr	r3, [r7, #4]
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	60fb      	str	r3, [r7, #12]
	uint8_t firstByte = (uint8_t)(*ptr);
    8374:	230b      	movs	r3, #11
    8376:	18fb      	adds	r3, r7, r3
    8378:	68fa      	ldr	r2, [r7, #12]
    837a:	7812      	ldrb	r2, [r2, #0]
    837c:	701a      	strb	r2, [r3, #0]
	uint8_t secondByte = (uint8_t)(*(ptr + 1));
    837e:	230a      	movs	r3, #10
    8380:	18fb      	adds	r3, r7, r3
    8382:	68fa      	ldr	r2, [r7, #12]
    8384:	7852      	ldrb	r2, [r2, #1]
    8386:	701a      	strb	r2, [r3, #0]
	uint16_t len = (uint16_t)(secondByte + (256 * firstByte));
    8388:	230a      	movs	r3, #10
    838a:	18fb      	adds	r3, r7, r3
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	b299      	uxth	r1, r3
    8390:	230b      	movs	r3, #11
    8392:	18fb      	adds	r3, r7, r3
    8394:	781b      	ldrb	r3, [r3, #0]
    8396:	b29b      	uxth	r3, r3
    8398:	021b      	lsls	r3, r3, #8
    839a:	b29a      	uxth	r2, r3
    839c:	2308      	movs	r3, #8
    839e:	18fb      	adds	r3, r7, r3
    83a0:	188a      	adds	r2, r1, r2
    83a2:	801a      	strh	r2, [r3, #0]
	*pptr += 2;
    83a4:	687b      	ldr	r3, [r7, #4]
    83a6:	681b      	ldr	r3, [r3, #0]
    83a8:	1c9a      	adds	r2, r3, #2
    83aa:	687b      	ldr	r3, [r7, #4]
    83ac:	601a      	str	r2, [r3, #0]
	return len;
    83ae:	2308      	movs	r3, #8
    83b0:	18fb      	adds	r3, r7, r3
    83b2:	881b      	ldrh	r3, [r3, #0]
}
    83b4:	0018      	movs	r0, r3
    83b6:	46bd      	mov	sp, r7
    83b8:	b004      	add	sp, #16
    83ba:	bd80      	pop	{r7, pc}

000083bc <readChar>:
/**
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
unsigned char readChar(unsigned char **pptr) {
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
	unsigned char c = **pptr;
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	681a      	ldr	r2, [r3, #0]
    83c8:	230f      	movs	r3, #15
    83ca:	18fb      	adds	r3, r7, r3
    83cc:	7812      	ldrb	r2, [r2, #0]
    83ce:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	681b      	ldr	r3, [r3, #0]
    83d4:	1c5a      	adds	r2, r3, #1
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	601a      	str	r2, [r3, #0]
	return c;
    83da:	230f      	movs	r3, #15
    83dc:	18fb      	adds	r3, r7, r3
    83de:	781b      	ldrb	r3, [r3, #0]
}
    83e0:	0018      	movs	r0, r3
    83e2:	46bd      	mov	sp, r7
    83e4:	b004      	add	sp, #16
    83e6:	bd80      	pop	{r7, pc}

000083e8 <writeChar>:
/**
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char **pptr, unsigned char c) {
    83e8:	b580      	push	{r7, lr}
    83ea:	b082      	sub	sp, #8
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
    83f0:	000a      	movs	r2, r1
    83f2:	1cfb      	adds	r3, r7, #3
    83f4:	701a      	strb	r2, [r3, #0]
	**pptr = c;
    83f6:	687b      	ldr	r3, [r7, #4]
    83f8:	681b      	ldr	r3, [r3, #0]
    83fa:	1cfa      	adds	r2, r7, #3
    83fc:	7812      	ldrb	r2, [r2, #0]
    83fe:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	681b      	ldr	r3, [r3, #0]
    8404:	1c5a      	adds	r2, r3, #1
    8406:	687b      	ldr	r3, [r7, #4]
    8408:	601a      	str	r2, [r3, #0]
}
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	46bd      	mov	sp, r7
    840e:	b002      	add	sp, #8
    8410:	bd80      	pop	{r7, pc}

00008412 <writePacketId>:
/**
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writePacketId(unsigned char** pptr, uint16_t anInt) {
    8412:	b580      	push	{r7, lr}
    8414:	b082      	sub	sp, #8
    8416:	af00      	add	r7, sp, #0
    8418:	6078      	str	r0, [r7, #4]
    841a:	000a      	movs	r2, r1
    841c:	1cbb      	adds	r3, r7, #2
    841e:	801a      	strh	r2, [r3, #0]
	**pptr = (unsigned char)(anInt / 256);
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	681b      	ldr	r3, [r3, #0]
    8424:	1cba      	adds	r2, r7, #2
    8426:	8812      	ldrh	r2, [r2, #0]
    8428:	0a12      	lsrs	r2, r2, #8
    842a:	b292      	uxth	r2, r2
    842c:	b2d2      	uxtb	r2, r2
    842e:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	1c5a      	adds	r2, r3, #1
    8436:	687b      	ldr	r3, [r7, #4]
    8438:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	681b      	ldr	r3, [r3, #0]
    843e:	1cba      	adds	r2, r7, #2
    8440:	8812      	ldrh	r2, [r2, #0]
    8442:	b2d2      	uxtb	r2, r2
    8444:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    8446:	687b      	ldr	r3, [r7, #4]
    8448:	681b      	ldr	r3, [r3, #0]
    844a:	1c5a      	adds	r2, r3, #1
    844c:	687b      	ldr	r3, [r7, #4]
    844e:	601a      	str	r2, [r3, #0]
}
    8450:	46c0      	nop			; (mov r8, r8)
    8452:	46bd      	mov	sp, r7
    8454:	b002      	add	sp, #8
    8456:	bd80      	pop	{r7, pc}

00008458 <writeInt>:
/**
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char **pptr, int32_t anInt) {
    8458:	b580      	push	{r7, lr}
    845a:	b082      	sub	sp, #8
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
    8460:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
    8462:	687b      	ldr	r3, [r7, #4]
    8464:	681a      	ldr	r2, [r3, #0]
    8466:	683b      	ldr	r3, [r7, #0]
    8468:	2b00      	cmp	r3, #0
    846a:	da00      	bge.n	846e <writeInt+0x16>
    846c:	33ff      	adds	r3, #255	; 0xff
    846e:	121b      	asrs	r3, r3, #8
    8470:	b2db      	uxtb	r3, r3
    8472:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	681b      	ldr	r3, [r3, #0]
    8478:	1c5a      	adds	r2, r3, #1
    847a:	687b      	ldr	r3, [r7, #4]
    847c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
    847e:	687b      	ldr	r3, [r7, #4]
    8480:	681a      	ldr	r2, [r3, #0]
    8482:	683b      	ldr	r3, [r7, #0]
    8484:	4908      	ldr	r1, [pc, #32]	; (84a8 <writeInt+0x50>)
    8486:	400b      	ands	r3, r1
    8488:	d503      	bpl.n	8492 <writeInt+0x3a>
    848a:	3b01      	subs	r3, #1
    848c:	4907      	ldr	r1, [pc, #28]	; (84ac <writeInt+0x54>)
    848e:	430b      	orrs	r3, r1
    8490:	3301      	adds	r3, #1
    8492:	b2db      	uxtb	r3, r3
    8494:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
    8496:	687b      	ldr	r3, [r7, #4]
    8498:	681b      	ldr	r3, [r3, #0]
    849a:	1c5a      	adds	r2, r3, #1
    849c:	687b      	ldr	r3, [r7, #4]
    849e:	601a      	str	r2, [r3, #0]
}
    84a0:	46c0      	nop			; (mov r8, r8)
    84a2:	46bd      	mov	sp, r7
    84a4:	b002      	add	sp, #8
    84a6:	bd80      	pop	{r7, pc}
    84a8:	800000ff 	.word	0x800000ff
    84ac:	ffffff00 	.word	0xffffff00

000084b0 <writeSizeT>:
/**
 * Writes size as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeSizeT(unsigned char **pptr, size_t size) {
    84b0:	b580      	push	{r7, lr}
    84b2:	b082      	sub	sp, #8
    84b4:	af00      	add	r7, sp, #0
    84b6:	6078      	str	r0, [r7, #4]
    84b8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(size / 256);
    84ba:	687b      	ldr	r3, [r7, #4]
    84bc:	681b      	ldr	r3, [r3, #0]
    84be:	683a      	ldr	r2, [r7, #0]
    84c0:	0a12      	lsrs	r2, r2, #8
    84c2:	b2d2      	uxtb	r2, r2
    84c4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	1c5a      	adds	r2, r3, #1
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(size % 256);
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	681b      	ldr	r3, [r3, #0]
    84d4:	683a      	ldr	r2, [r7, #0]
    84d6:	b2d2      	uxtb	r2, r2
    84d8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	681b      	ldr	r3, [r3, #0]
    84de:	1c5a      	adds	r2, r3, #1
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	601a      	str	r2, [r3, #0]
}
    84e4:	46c0      	nop			; (mov r8, r8)
    84e6:	46bd      	mov	sp, r7
    84e8:	b002      	add	sp, #8
    84ea:	bd80      	pop	{r7, pc}

000084ec <writeCString>:
/**
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char **pptr, const char *string) {
    84ec:	b580      	push	{r7, lr}
    84ee:	b084      	sub	sp, #16
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
    84f4:	6039      	str	r1, [r7, #0]
	size_t len = strlen(string);
    84f6:	683b      	ldr	r3, [r7, #0]
    84f8:	0018      	movs	r0, r3
    84fa:	4b0d      	ldr	r3, [pc, #52]	; (8530 <writeCString+0x44>)
    84fc:	4798      	blx	r3
    84fe:	0003      	movs	r3, r0
    8500:	60fb      	str	r3, [r7, #12]
	writeSizeT(pptr, len);
    8502:	68fa      	ldr	r2, [r7, #12]
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	0011      	movs	r1, r2
    8508:	0018      	movs	r0, r3
    850a:	4b0a      	ldr	r3, [pc, #40]	; (8534 <writeCString+0x48>)
    850c:	4798      	blx	r3
	memcpy(*pptr, string, len);
    850e:	687b      	ldr	r3, [r7, #4]
    8510:	681b      	ldr	r3, [r3, #0]
    8512:	68fa      	ldr	r2, [r7, #12]
    8514:	6839      	ldr	r1, [r7, #0]
    8516:	0018      	movs	r0, r3
    8518:	4b07      	ldr	r3, [pc, #28]	; (8538 <writeCString+0x4c>)
    851a:	4798      	blx	r3
	*pptr += len;
    851c:	687b      	ldr	r3, [r7, #4]
    851e:	681a      	ldr	r2, [r3, #0]
    8520:	68fb      	ldr	r3, [r7, #12]
    8522:	18d2      	adds	r2, r2, r3
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	601a      	str	r2, [r3, #0]
}
    8528:	46c0      	nop			; (mov r8, r8)
    852a:	46bd      	mov	sp, r7
    852c:	b004      	add	sp, #16
    852e:	bd80      	pop	{r7, pc}
    8530:	0001a3e3 	.word	0x0001a3e3
    8534:	000084b1 	.word	0x000084b1
    8538:	00019e6b 	.word	0x00019e6b

0000853c <writeMQTTString>:

void writeMQTTString(unsigned char **pptr, MQTTString mqttstring) {
    853c:	b580      	push	{r7, lr}
    853e:	b084      	sub	sp, #16
    8540:	af00      	add	r7, sp, #0
    8542:	60f8      	str	r0, [r7, #12]
    8544:	0038      	movs	r0, r7
    8546:	6001      	str	r1, [r0, #0]
    8548:	6042      	str	r2, [r0, #4]
    854a:	6083      	str	r3, [r0, #8]
	if(mqttstring.lenstring.len > 0) {
    854c:	003b      	movs	r3, r7
    854e:	685b      	ldr	r3, [r3, #4]
    8550:	2b00      	cmp	r3, #0
    8552:	d017      	beq.n	8584 <writeMQTTString+0x48>
		writeSizeT(pptr, mqttstring.lenstring.len);
    8554:	003b      	movs	r3, r7
    8556:	685a      	ldr	r2, [r3, #4]
    8558:	68fb      	ldr	r3, [r7, #12]
    855a:	0011      	movs	r1, r2
    855c:	0018      	movs	r0, r3
    855e:	4b14      	ldr	r3, [pc, #80]	; (85b0 <writeMQTTString+0x74>)
    8560:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    8562:	68fb      	ldr	r3, [r7, #12]
    8564:	6818      	ldr	r0, [r3, #0]
    8566:	003b      	movs	r3, r7
    8568:	6899      	ldr	r1, [r3, #8]
    856a:	003b      	movs	r3, r7
    856c:	685b      	ldr	r3, [r3, #4]
    856e:	001a      	movs	r2, r3
    8570:	4b10      	ldr	r3, [pc, #64]	; (85b4 <writeMQTTString+0x78>)
    8572:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    8574:	68fb      	ldr	r3, [r7, #12]
    8576:	681a      	ldr	r2, [r3, #0]
    8578:	003b      	movs	r3, r7
    857a:	685b      	ldr	r3, [r3, #4]
    857c:	18d2      	adds	r2, r2, r3
    857e:	68fb      	ldr	r3, [r7, #12]
    8580:	601a      	str	r2, [r3, #0]
	} else if (mqttstring.cstring) {
		writeCString(pptr, mqttstring.cstring);
	} else {
		writeInt(pptr, 0);
	}
}
    8582:	e010      	b.n	85a6 <writeMQTTString+0x6a>
	} else if (mqttstring.cstring) {
    8584:	003b      	movs	r3, r7
    8586:	681b      	ldr	r3, [r3, #0]
    8588:	2b00      	cmp	r3, #0
    858a:	d007      	beq.n	859c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
    858c:	003b      	movs	r3, r7
    858e:	681a      	ldr	r2, [r3, #0]
    8590:	68fb      	ldr	r3, [r7, #12]
    8592:	0011      	movs	r1, r2
    8594:	0018      	movs	r0, r3
    8596:	4b08      	ldr	r3, [pc, #32]	; (85b8 <writeMQTTString+0x7c>)
    8598:	4798      	blx	r3
}
    859a:	e004      	b.n	85a6 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
    859c:	68fb      	ldr	r3, [r7, #12]
    859e:	2100      	movs	r1, #0
    85a0:	0018      	movs	r0, r3
    85a2:	4b06      	ldr	r3, [pc, #24]	; (85bc <writeMQTTString+0x80>)
    85a4:	4798      	blx	r3
}
    85a6:	46c0      	nop			; (mov r8, r8)
    85a8:	46bd      	mov	sp, r7
    85aa:	b004      	add	sp, #16
    85ac:	bd80      	pop	{r7, pc}
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	000084b1 	.word	0x000084b1
    85b4:	00019e6b 	.word	0x00019e6b
    85b8:	000084ed 	.word	0x000084ed
    85bc:	00008459 	.word	0x00008459

000085c0 <readMQTTLenString>:
 * @param mqttstring the MQTTString structure into which the data is to be read
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return SUCCESS if successful, FAILURE if not
 */
MQTTReturnCode readMQTTLenString(MQTTString *mqttstring, unsigned char **pptr, unsigned char *enddata) {
    85c0:	b580      	push	{r7, lr}
    85c2:	b086      	sub	sp, #24
    85c4:	af00      	add	r7, sp, #0
    85c6:	60f8      	str	r0, [r7, #12]
    85c8:	60b9      	str	r1, [r7, #8]
    85ca:	607a      	str	r2, [r7, #4]
	MQTTReturnCode rc = FAILURE;
    85cc:	2317      	movs	r3, #23
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	22ff      	movs	r2, #255	; 0xff
    85d2:	701a      	strb	r2, [r3, #0]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	/* enough length to read the integer? */
	if(enddata - (*pptr) > 1) {
    85d4:	687a      	ldr	r2, [r7, #4]
    85d6:	68bb      	ldr	r3, [r7, #8]
    85d8:	681b      	ldr	r3, [r3, #0]
    85da:	1ad3      	subs	r3, r2, r3
    85dc:	2b01      	cmp	r3, #1
    85de:	dd1d      	ble.n	861c <readMQTTLenString+0x5c>
		mqttstring->lenstring.len = readSizeT(pptr); /* increments pptr to point past length */
    85e0:	68bb      	ldr	r3, [r7, #8]
    85e2:	0018      	movs	r0, r3
    85e4:	4b13      	ldr	r3, [pc, #76]	; (8634 <readMQTTLenString+0x74>)
    85e6:	4798      	blx	r3
    85e8:	0002      	movs	r2, r0
    85ea:	68fb      	ldr	r3, [r7, #12]
    85ec:	605a      	str	r2, [r3, #4]
		if(&(*pptr)[mqttstring->lenstring.len] <= enddata) {
    85ee:	68bb      	ldr	r3, [r7, #8]
    85f0:	681a      	ldr	r2, [r3, #0]
    85f2:	68fb      	ldr	r3, [r7, #12]
    85f4:	685b      	ldr	r3, [r3, #4]
    85f6:	18d2      	adds	r2, r2, r3
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	429a      	cmp	r2, r3
    85fc:	d80e      	bhi.n	861c <readMQTTLenString+0x5c>
			mqttstring->lenstring.data = (char*)*pptr;
    85fe:	68bb      	ldr	r3, [r7, #8]
    8600:	681a      	ldr	r2, [r3, #0]
    8602:	68fb      	ldr	r3, [r7, #12]
    8604:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
    8606:	68bb      	ldr	r3, [r7, #8]
    8608:	681a      	ldr	r2, [r3, #0]
    860a:	68fb      	ldr	r3, [r7, #12]
    860c:	685b      	ldr	r3, [r3, #4]
    860e:	18d2      	adds	r2, r2, r3
    8610:	68bb      	ldr	r3, [r7, #8]
    8612:	601a      	str	r2, [r3, #0]
			rc = SUCCESS;
    8614:	2317      	movs	r3, #23
    8616:	18fb      	adds	r3, r7, r3
    8618:	2200      	movs	r2, #0
    861a:	701a      	strb	r2, [r3, #0]
		}
	}
	mqttstring->cstring = NULL;
    861c:	68fb      	ldr	r3, [r7, #12]
    861e:	2200      	movs	r2, #0
    8620:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(rc);
	return rc;
    8622:	2317      	movs	r3, #23
    8624:	18fb      	adds	r3, r7, r3
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	b25b      	sxtb	r3, r3
}
    862a:	0018      	movs	r0, r3
    862c:	46bd      	mov	sp, r7
    862e:	b006      	add	sp, #24
    8630:	bd80      	pop	{r7, pc}
    8632:	46c0      	nop			; (mov r8, r8)
    8634:	0000832d 	.word	0x0000832d

00008638 <MQTTstrlen>:
/**
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
size_t MQTTstrlen(MQTTString mqttstring) {
    8638:	b580      	push	{r7, lr}
    863a:	b086      	sub	sp, #24
    863c:	af00      	add	r7, sp, #0
    863e:	1d3b      	adds	r3, r7, #4
    8640:	6018      	str	r0, [r3, #0]
    8642:	6059      	str	r1, [r3, #4]
    8644:	609a      	str	r2, [r3, #8]
	size_t len = 0;
    8646:	2300      	movs	r3, #0
    8648:	617b      	str	r3, [r7, #20]

	if(mqttstring.cstring) {
    864a:	1d3b      	adds	r3, r7, #4
    864c:	681b      	ldr	r3, [r3, #0]
    864e:	2b00      	cmp	r3, #0
    8650:	d007      	beq.n	8662 <MQTTstrlen+0x2a>
		len = strlen(mqttstring.cstring);
    8652:	1d3b      	adds	r3, r7, #4
    8654:	681b      	ldr	r3, [r3, #0]
    8656:	0018      	movs	r0, r3
    8658:	4b06      	ldr	r3, [pc, #24]	; (8674 <MQTTstrlen+0x3c>)
    865a:	4798      	blx	r3
    865c:	0003      	movs	r3, r0
    865e:	617b      	str	r3, [r7, #20]
    8660:	e002      	b.n	8668 <MQTTstrlen+0x30>
	} else {
		len = mqttstring.lenstring.len;
    8662:	1d3b      	adds	r3, r7, #4
    8664:	685b      	ldr	r3, [r3, #4]
    8666:	617b      	str	r3, [r7, #20]
	}

	return len;
    8668:	697b      	ldr	r3, [r7, #20]
}
    866a:	0018      	movs	r0, r3
    866c:	46bd      	mov	sp, r7
    866e:	b006      	add	sp, #24
    8670:	bd80      	pop	{r7, pc}
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	0001a3e3 	.word	0x0001a3e3

00008678 <MQTTPacket_equals>:
 * Compares an MQTTString to a C string
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
uint8_t MQTTPacket_equals(MQTTString *a, char *bptr) {
    8678:	b580      	push	{r7, lr}
    867a:	b086      	sub	sp, #24
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
    8680:	6039      	str	r1, [r7, #0]
	size_t alen = 0;
    8682:	2300      	movs	r3, #0
    8684:	617b      	str	r3, [r7, #20]
	size_t	blen = 0;
    8686:	2300      	movs	r3, #0
    8688:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if(a->cstring) {
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	681b      	ldr	r3, [r3, #0]
    868e:	2b00      	cmp	r3, #0
    8690:	d00a      	beq.n	86a8 <MQTTPacket_equals+0x30>
		aptr = a->cstring;
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	0018      	movs	r0, r3
    869e:	4b12      	ldr	r3, [pc, #72]	; (86e8 <MQTTPacket_equals+0x70>)
    86a0:	4798      	blx	r3
    86a2:	0003      	movs	r3, r0
    86a4:	617b      	str	r3, [r7, #20]
    86a6:	e005      	b.n	86b4 <MQTTPacket_equals+0x3c>
	} else {
		aptr = a->lenstring.data;
    86a8:	687b      	ldr	r3, [r7, #4]
    86aa:	689b      	ldr	r3, [r3, #8]
    86ac:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	685b      	ldr	r3, [r3, #4]
    86b2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
    86b4:	683b      	ldr	r3, [r7, #0]
    86b6:	0018      	movs	r0, r3
    86b8:	4b0b      	ldr	r3, [pc, #44]	; (86e8 <MQTTPacket_equals+0x70>)
    86ba:	4798      	blx	r3
    86bc:	0003      	movs	r3, r0
    86be:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    86c0:	697a      	ldr	r2, [r7, #20]
    86c2:	68fb      	ldr	r3, [r7, #12]
    86c4:	429a      	cmp	r2, r3
    86c6:	d109      	bne.n	86dc <MQTTPacket_equals+0x64>
    86c8:	697a      	ldr	r2, [r7, #20]
    86ca:	6839      	ldr	r1, [r7, #0]
    86cc:	693b      	ldr	r3, [r7, #16]
    86ce:	0018      	movs	r0, r3
    86d0:	4b06      	ldr	r3, [pc, #24]	; (86ec <MQTTPacket_equals+0x74>)
    86d2:	4798      	blx	r3
    86d4:	1e03      	subs	r3, r0, #0
    86d6:	d101      	bne.n	86dc <MQTTPacket_equals+0x64>
    86d8:	2301      	movs	r3, #1
    86da:	e000      	b.n	86de <MQTTPacket_equals+0x66>
    86dc:	2300      	movs	r3, #0
    86de:	b2db      	uxtb	r3, r3
}
    86e0:	0018      	movs	r0, r3
    86e2:	46bd      	mov	sp, r7
    86e4:	b006      	add	sp, #24
    86e6:	bd80      	pop	{r7, pc}
    86e8:	0001a3e3 	.word	0x0001a3e3
    86ec:	0001a3f1 	.word	0x0001a3f1

000086f0 <MQTTPacket_InitHeader>:
 * always initialized using the proper mappings. No Endianness issues here since
 * the individual fields are all less than a byte. Also generates no warnings since
 * all fields are initialized using hex constants
 */
MQTTReturnCode MQTTPacket_InitHeader(MQTTHeader *header, MessageTypes message_type,
						   QoS qos, uint8_t dup, uint8_t retained) {
    86f0:	b590      	push	{r4, r7, lr}
    86f2:	b083      	sub	sp, #12
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
    86f8:	000c      	movs	r4, r1
    86fa:	0010      	movs	r0, r2
    86fc:	0019      	movs	r1, r3
    86fe:	1cfb      	adds	r3, r7, #3
    8700:	1c22      	adds	r2, r4, #0
    8702:	701a      	strb	r2, [r3, #0]
    8704:	1cbb      	adds	r3, r7, #2
    8706:	1c02      	adds	r2, r0, #0
    8708:	701a      	strb	r2, [r3, #0]
    870a:	1c7b      	adds	r3, r7, #1
    870c:	1c0a      	adds	r2, r1, #0
    870e:	701a      	strb	r2, [r3, #0]
	if(NULL == header) {
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	2b00      	cmp	r3, #0
    8714:	d102      	bne.n	871c <MQTTPacket_InitHeader+0x2c>
		return MQTT_NULL_VALUE_ERROR;
    8716:	2306      	movs	r3, #6
    8718:	425b      	negs	r3, r3
    871a:	e0e3      	b.n	88e4 <MQTTPacket_InitHeader+0x1f4>
	}

	/* Set all bits to zero */
	header->byte = 0;
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	2200      	movs	r2, #0
    8720:	701a      	strb	r2, [r3, #0]
	switch(message_type) {
    8722:	1cfb      	adds	r3, r7, #3
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	b25b      	sxtb	r3, r3
    8728:	3301      	adds	r3, #1
    872a:	2b0f      	cmp	r3, #15
    872c:	d900      	bls.n	8730 <MQTTPacket_InitHeader+0x40>
    872e:	e08c      	b.n	884a <MQTTPacket_InitHeader+0x15a>
    8730:	009a      	lsls	r2, r3, #2
    8732:	4b6e      	ldr	r3, [pc, #440]	; (88ec <MQTTPacket_InitHeader+0x1fc>)
    8734:	18d3      	adds	r3, r2, r3
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	469f      	mov	pc, r3
		case UNKNOWN:
			/* Should never happen */
			return MQTT_UNKNOWN_ERROR;
    873a:	2303      	movs	r3, #3
    873c:	425b      	negs	r3, r3
    873e:	e0d1      	b.n	88e4 <MQTTPacket_InitHeader+0x1f4>
		case CONNECT:
			header->bits.type = 0x01;
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	781a      	ldrb	r2, [r3, #0]
    8744:	210f      	movs	r1, #15
    8746:	400a      	ands	r2, r1
    8748:	1c11      	adds	r1, r2, #0
    874a:	2210      	movs	r2, #16
    874c:	430a      	orrs	r2, r1
    874e:	701a      	strb	r2, [r3, #0]
			break;
    8750:	e07e      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case CONNACK:
			header->bits.type = 0x02;
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	781a      	ldrb	r2, [r3, #0]
    8756:	210f      	movs	r1, #15
    8758:	400a      	ands	r2, r1
    875a:	1c11      	adds	r1, r2, #0
    875c:	2220      	movs	r2, #32
    875e:	430a      	orrs	r2, r1
    8760:	701a      	strb	r2, [r3, #0]
			break;
    8762:	e075      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PUBLISH:
			header->bits.type = 0x03;
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	781a      	ldrb	r2, [r3, #0]
    8768:	210f      	movs	r1, #15
    876a:	400a      	ands	r2, r1
    876c:	1c11      	adds	r1, r2, #0
    876e:	2230      	movs	r2, #48	; 0x30
    8770:	430a      	orrs	r2, r1
    8772:	701a      	strb	r2, [r3, #0]
			break;
    8774:	e06c      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PUBACK:
			header->bits.type = 0x04;
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	781a      	ldrb	r2, [r3, #0]
    877a:	210f      	movs	r1, #15
    877c:	400a      	ands	r2, r1
    877e:	1c11      	adds	r1, r2, #0
    8780:	2240      	movs	r2, #64	; 0x40
    8782:	430a      	orrs	r2, r1
    8784:	701a      	strb	r2, [r3, #0]
			break;
    8786:	e063      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PUBREC:
			header->bits.type = 0x05;
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	781a      	ldrb	r2, [r3, #0]
    878c:	210f      	movs	r1, #15
    878e:	400a      	ands	r2, r1
    8790:	1c11      	adds	r1, r2, #0
    8792:	2250      	movs	r2, #80	; 0x50
    8794:	430a      	orrs	r2, r1
    8796:	701a      	strb	r2, [r3, #0]
			break;
    8798:	e05a      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PUBREL:
			header->bits.type = 0x06;
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	781a      	ldrb	r2, [r3, #0]
    879e:	210f      	movs	r1, #15
    87a0:	400a      	ands	r2, r1
    87a2:	1c11      	adds	r1, r2, #0
    87a4:	2260      	movs	r2, #96	; 0x60
    87a6:	430a      	orrs	r2, r1
    87a8:	701a      	strb	r2, [r3, #0]
			break;
    87aa:	e051      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PUBCOMP:
			header->bits.type = 0x07;
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	781a      	ldrb	r2, [r3, #0]
    87b0:	210f      	movs	r1, #15
    87b2:	400a      	ands	r2, r1
    87b4:	1c11      	adds	r1, r2, #0
    87b6:	2270      	movs	r2, #112	; 0x70
    87b8:	430a      	orrs	r2, r1
    87ba:	701a      	strb	r2, [r3, #0]
			break;
    87bc:	e048      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case SUBSCRIBE:
			header->bits.type = 0x08;
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	781a      	ldrb	r2, [r3, #0]
    87c2:	210f      	movs	r1, #15
    87c4:	400a      	ands	r2, r1
    87c6:	1c11      	adds	r1, r2, #0
    87c8:	2280      	movs	r2, #128	; 0x80
    87ca:	4252      	negs	r2, r2
    87cc:	430a      	orrs	r2, r1
    87ce:	701a      	strb	r2, [r3, #0]
			break;
    87d0:	e03e      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case SUBACK:
			header->bits.type = 0x09;
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	781a      	ldrb	r2, [r3, #0]
    87d6:	210f      	movs	r1, #15
    87d8:	400a      	ands	r2, r1
    87da:	1c11      	adds	r1, r2, #0
    87dc:	2270      	movs	r2, #112	; 0x70
    87de:	4252      	negs	r2, r2
    87e0:	430a      	orrs	r2, r1
    87e2:	701a      	strb	r2, [r3, #0]
			break;
    87e4:	e034      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case UNSUBSCRIBE:
			header->bits.type = 0x0A;
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	781a      	ldrb	r2, [r3, #0]
    87ea:	210f      	movs	r1, #15
    87ec:	400a      	ands	r2, r1
    87ee:	1c11      	adds	r1, r2, #0
    87f0:	2260      	movs	r2, #96	; 0x60
    87f2:	4252      	negs	r2, r2
    87f4:	430a      	orrs	r2, r1
    87f6:	701a      	strb	r2, [r3, #0]
			break;
    87f8:	e02a      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case UNSUBACK:
			header->bits.type = 0x0B;
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	781a      	ldrb	r2, [r3, #0]
    87fe:	210f      	movs	r1, #15
    8800:	400a      	ands	r2, r1
    8802:	1c11      	adds	r1, r2, #0
    8804:	2250      	movs	r2, #80	; 0x50
    8806:	4252      	negs	r2, r2
    8808:	430a      	orrs	r2, r1
    880a:	701a      	strb	r2, [r3, #0]
			break;
    880c:	e020      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PINGREQ:
			header->bits.type = 0x0C;
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	781a      	ldrb	r2, [r3, #0]
    8812:	210f      	movs	r1, #15
    8814:	400a      	ands	r2, r1
    8816:	1c11      	adds	r1, r2, #0
    8818:	2240      	movs	r2, #64	; 0x40
    881a:	4252      	negs	r2, r2
    881c:	430a      	orrs	r2, r1
    881e:	701a      	strb	r2, [r3, #0]
			break;
    8820:	e016      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case PINGRESP:
			header->bits.type = 0x0D;
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	781a      	ldrb	r2, [r3, #0]
    8826:	210f      	movs	r1, #15
    8828:	400a      	ands	r2, r1
    882a:	1c11      	adds	r1, r2, #0
    882c:	2230      	movs	r2, #48	; 0x30
    882e:	4252      	negs	r2, r2
    8830:	430a      	orrs	r2, r1
    8832:	701a      	strb	r2, [r3, #0]
			break;
    8834:	e00c      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		case DISCONNECT:
			header->bits.type = 0x0E;
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	781a      	ldrb	r2, [r3, #0]
    883a:	210f      	movs	r1, #15
    883c:	400a      	ands	r2, r1
    883e:	1c11      	adds	r1, r2, #0
    8840:	2220      	movs	r2, #32
    8842:	4252      	negs	r2, r2
    8844:	430a      	orrs	r2, r1
    8846:	701a      	strb	r2, [r3, #0]
			break;
    8848:	e002      	b.n	8850 <MQTTPacket_InitHeader+0x160>
		default:
			/* Should never happen */
			return MQTT_UNKNOWN_ERROR;
    884a:	2303      	movs	r3, #3
    884c:	425b      	negs	r3, r3
    884e:	e049      	b.n	88e4 <MQTTPacket_InitHeader+0x1f4>
	}

	header->bits.dup = (1 == dup) ? 0x01 : 0x00;
    8850:	1c7b      	adds	r3, r7, #1
    8852:	781b      	ldrb	r3, [r3, #0]
    8854:	3b01      	subs	r3, #1
    8856:	425a      	negs	r2, r3
    8858:	4153      	adcs	r3, r2
    885a:	b2da      	uxtb	r2, r3
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	2101      	movs	r1, #1
    8860:	400a      	ands	r2, r1
    8862:	00d0      	lsls	r0, r2, #3
    8864:	781a      	ldrb	r2, [r3, #0]
    8866:	2108      	movs	r1, #8
    8868:	438a      	bics	r2, r1
    886a:	1c11      	adds	r1, r2, #0
    886c:	1c02      	adds	r2, r0, #0
    886e:	430a      	orrs	r2, r1
    8870:	701a      	strb	r2, [r3, #0]
	switch(qos) {
    8872:	1cbb      	adds	r3, r7, #2
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	2b01      	cmp	r3, #1
    8878:	d009      	beq.n	888e <MQTTPacket_InitHeader+0x19e>
    887a:	2b02      	cmp	r3, #2
    887c:	d010      	beq.n	88a0 <MQTTPacket_InitHeader+0x1b0>
    887e:	2b00      	cmp	r3, #0
    8880:	d117      	bne.n	88b2 <MQTTPacket_InitHeader+0x1c2>
		case QOS0:
			header->bits.qos = 0x00;
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	781a      	ldrb	r2, [r3, #0]
    8886:	2106      	movs	r1, #6
    8888:	438a      	bics	r2, r1
    888a:	701a      	strb	r2, [r3, #0]
			break;
    888c:	e017      	b.n	88be <MQTTPacket_InitHeader+0x1ce>
		case QOS1:
			header->bits.qos = 0x01;
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	2106      	movs	r1, #6
    8894:	438a      	bics	r2, r1
    8896:	1c11      	adds	r1, r2, #0
    8898:	2202      	movs	r2, #2
    889a:	430a      	orrs	r2, r1
    889c:	701a      	strb	r2, [r3, #0]
			break;
    889e:	e00e      	b.n	88be <MQTTPacket_InitHeader+0x1ce>
		case QOS2:
			header->bits.qos = 0x02;
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	781a      	ldrb	r2, [r3, #0]
    88a4:	2106      	movs	r1, #6
    88a6:	438a      	bics	r2, r1
    88a8:	1c11      	adds	r1, r2, #0
    88aa:	2204      	movs	r2, #4
    88ac:	430a      	orrs	r2, r1
    88ae:	701a      	strb	r2, [r3, #0]
			break;
    88b0:	e005      	b.n	88be <MQTTPacket_InitHeader+0x1ce>
		default:
			/* Using QOS0 as default */
			header->bits.qos = 0x00;
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	781a      	ldrb	r2, [r3, #0]
    88b6:	2106      	movs	r1, #6
    88b8:	438a      	bics	r2, r1
    88ba:	701a      	strb	r2, [r3, #0]
			break;
    88bc:	46c0      	nop			; (mov r8, r8)
	}

	header->bits.retain = (1 == retained) ? 0x01 : 0x00;
    88be:	2318      	movs	r3, #24
    88c0:	18fb      	adds	r3, r7, r3
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	3b01      	subs	r3, #1
    88c6:	425a      	negs	r2, r3
    88c8:	4153      	adcs	r3, r2
    88ca:	b2da      	uxtb	r2, r3
    88cc:	687b      	ldr	r3, [r7, #4]
    88ce:	2101      	movs	r1, #1
    88d0:	400a      	ands	r2, r1
    88d2:	0010      	movs	r0, r2
    88d4:	781a      	ldrb	r2, [r3, #0]
    88d6:	2101      	movs	r1, #1
    88d8:	438a      	bics	r2, r1
    88da:	1c11      	adds	r1, r2, #0
    88dc:	1c02      	adds	r2, r0, #0
    88de:	430a      	orrs	r2, r1
    88e0:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
    88e2:	2300      	movs	r3, #0
}
    88e4:	0018      	movs	r0, r3
    88e6:	46bd      	mov	sp, r7
    88e8:	b003      	add	sp, #12
    88ea:	bd90      	pop	{r4, r7, pc}
    88ec:	0001c608 	.word	0x0001c608

000088f0 <MQTTSerialize_GetPublishLength>:
  * @param qos the MQTT QoS of the publish (packetid is omitted for QoS 0)
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
size_t MQTTSerialize_GetPublishLength(uint8_t qos, MQTTString topicName, size_t payloadlen) {
    88f0:	b590      	push	{r4, r7, lr}
    88f2:	b087      	sub	sp, #28
    88f4:	af00      	add	r7, sp, #0
    88f6:	0004      	movs	r4, r0
    88f8:	0038      	movs	r0, r7
    88fa:	6001      	str	r1, [r0, #0]
    88fc:	6042      	str	r2, [r0, #4]
    88fe:	6083      	str	r3, [r0, #8]
    8900:	230f      	movs	r3, #15
    8902:	18fb      	adds	r3, r7, r3
    8904:	1c22      	adds	r2, r4, #0
    8906:	701a      	strb	r2, [r3, #0]
	size_t len = 0;
    8908:	2300      	movs	r3, #0
    890a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    890c:	003b      	movs	r3, r7
    890e:	6818      	ldr	r0, [r3, #0]
    8910:	6859      	ldr	r1, [r3, #4]
    8912:	689a      	ldr	r2, [r3, #8]
    8914:	4b0a      	ldr	r3, [pc, #40]	; (8940 <MQTTSerialize_GetPublishLength+0x50>)
    8916:	4798      	blx	r3
    8918:	0002      	movs	r2, r0
    891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    891c:	18d3      	adds	r3, r2, r3
    891e:	3302      	adds	r3, #2
    8920:	697a      	ldr	r2, [r7, #20]
    8922:	18d3      	adds	r3, r2, r3
    8924:	617b      	str	r3, [r7, #20]
	if(qos > 0) {
    8926:	230f      	movs	r3, #15
    8928:	18fb      	adds	r3, r7, r3
    892a:	781b      	ldrb	r3, [r3, #0]
    892c:	2b00      	cmp	r3, #0
    892e:	d002      	beq.n	8936 <MQTTSerialize_GetPublishLength+0x46>
		len += 2; /* packetid */
    8930:	697b      	ldr	r3, [r7, #20]
    8932:	3302      	adds	r3, #2
    8934:	617b      	str	r3, [r7, #20]
	}
	return len;
    8936:	697b      	ldr	r3, [r7, #20]
}
    8938:	0018      	movs	r0, r3
    893a:	46bd      	mov	sp, r7
    893c:	b007      	add	sp, #28
    893e:	bd90      	pop	{r4, r7, pc}
    8940:	00008639 	.word	0x00008639

00008944 <MQTTSerialize_publish>:
  * @return the length of the serialized data.  <= 0 indicates error
  */
MQTTReturnCode MQTTSerialize_publish(unsigned char *buf, size_t buflen, uint8_t dup,
						  QoS qos, uint8_t retained, uint16_t packetid,
						  MQTTString topicName, unsigned char *payload, size_t payloadlen,
						  uint32_t *serialized_len) {
    8944:	b5b0      	push	{r4, r5, r7, lr}
    8946:	b08a      	sub	sp, #40	; 0x28
    8948:	af02      	add	r7, sp, #8
    894a:	60f8      	str	r0, [r7, #12]
    894c:	60b9      	str	r1, [r7, #8]
    894e:	0019      	movs	r1, r3
    8950:	1dfb      	adds	r3, r7, #7
    8952:	701a      	strb	r2, [r3, #0]
    8954:	1dbb      	adds	r3, r7, #6
    8956:	1c0a      	adds	r2, r1, #0
    8958:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == payload || NULL == serialized_len) {
    895a:	68fb      	ldr	r3, [r7, #12]
    895c:	2b00      	cmp	r3, #0
    895e:	d005      	beq.n	896c <MQTTSerialize_publish+0x28>
    8960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8962:	2b00      	cmp	r3, #0
    8964:	d002      	beq.n	896c <MQTTSerialize_publish+0x28>
    8966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8968:	2b00      	cmp	r3, #0
    896a:	d102      	bne.n	8972 <MQTTSerialize_publish+0x2e>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    896c:	2306      	movs	r3, #6
    896e:	425b      	negs	r3, r3
    8970:	e07b      	b.n	8a6a <MQTTSerialize_publish+0x126>
	}

	unsigned char *ptr = buf;
    8972:	68fb      	ldr	r3, [r7, #12]
    8974:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
    8976:	2300      	movs	r3, #0
    8978:	613b      	str	r3, [r7, #16]
	size_t rem_len = 0;
    897a:	2300      	movs	r3, #0
    897c:	61fb      	str	r3, [r7, #28]

	rem_len = MQTTSerialize_GetPublishLength(qos, topicName, payloadlen);
    897e:	2308      	movs	r3, #8
    8980:	2230      	movs	r2, #48	; 0x30
    8982:	4694      	mov	ip, r2
    8984:	44bc      	add	ip, r7
    8986:	4463      	add	r3, ip
    8988:	1dba      	adds	r2, r7, #6
    898a:	7810      	ldrb	r0, [r2, #0]
    898c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    898e:	9200      	str	r2, [sp, #0]
    8990:	6819      	ldr	r1, [r3, #0]
    8992:	685a      	ldr	r2, [r3, #4]
    8994:	689b      	ldr	r3, [r3, #8]
    8996:	4c37      	ldr	r4, [pc, #220]	; (8a74 <MQTTSerialize_publish+0x130>)
    8998:	47a0      	blx	r4
    899a:	0003      	movs	r3, r0
    899c:	61fb      	str	r3, [r7, #28]
	if(MQTTPacket_len(rem_len) > buflen) {
    899e:	69fb      	ldr	r3, [r7, #28]
    89a0:	0018      	movs	r0, r3
    89a2:	4b35      	ldr	r3, [pc, #212]	; (8a78 <MQTTSerialize_publish+0x134>)
    89a4:	4798      	blx	r3
    89a6:	0002      	movs	r2, r0
    89a8:	68bb      	ldr	r3, [r7, #8]
    89aa:	429a      	cmp	r2, r3
    89ac:	d902      	bls.n	89b4 <MQTTSerialize_publish+0x70>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    89ae:	2309      	movs	r3, #9
    89b0:	425b      	negs	r3, r3
    89b2:	e05a      	b.n	8a6a <MQTTSerialize_publish+0x126>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, PUBLISH, qos, dup, retained);
    89b4:	231b      	movs	r3, #27
    89b6:	18fc      	adds	r4, r7, r3
    89b8:	1dfb      	adds	r3, r7, #7
    89ba:	7819      	ldrb	r1, [r3, #0]
    89bc:	1dbb      	adds	r3, r7, #6
    89be:	781a      	ldrb	r2, [r3, #0]
    89c0:	2310      	movs	r3, #16
    89c2:	18f8      	adds	r0, r7, r3
    89c4:	2330      	movs	r3, #48	; 0x30
    89c6:	18fb      	adds	r3, r7, r3
    89c8:	781b      	ldrb	r3, [r3, #0]
    89ca:	9300      	str	r3, [sp, #0]
    89cc:	000b      	movs	r3, r1
    89ce:	2103      	movs	r1, #3
    89d0:	4d2a      	ldr	r5, [pc, #168]	; (8a7c <MQTTSerialize_publish+0x138>)
    89d2:	47a8      	blx	r5
    89d4:	0003      	movs	r3, r0
    89d6:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    89d8:	231b      	movs	r3, #27
    89da:	18fb      	adds	r3, r7, r3
    89dc:	781b      	ldrb	r3, [r3, #0]
    89de:	b25b      	sxtb	r3, r3
    89e0:	2b00      	cmp	r3, #0
    89e2:	d004      	beq.n	89ee <MQTTSerialize_publish+0xaa>
		FUNC_EXIT_RC(rc);
		return rc;
    89e4:	231b      	movs	r3, #27
    89e6:	18fb      	adds	r3, r7, r3
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	b25b      	sxtb	r3, r3
    89ec:	e03d      	b.n	8a6a <MQTTSerialize_publish+0x126>
	}
	writeChar(&ptr, header.byte); /* write header */
    89ee:	2310      	movs	r3, #16
    89f0:	18fb      	adds	r3, r7, r3
    89f2:	781a      	ldrb	r2, [r3, #0]
    89f4:	2314      	movs	r3, #20
    89f6:	18fb      	adds	r3, r7, r3
    89f8:	0011      	movs	r1, r2
    89fa:	0018      	movs	r0, r3
    89fc:	4b20      	ldr	r3, [pc, #128]	; (8a80 <MQTTSerialize_publish+0x13c>)
    89fe:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    8a00:	697b      	ldr	r3, [r7, #20]
    8a02:	69fa      	ldr	r2, [r7, #28]
    8a04:	0011      	movs	r1, r2
    8a06:	0018      	movs	r0, r3
    8a08:	4b1e      	ldr	r3, [pc, #120]	; (8a84 <MQTTSerialize_publish+0x140>)
    8a0a:	4798      	blx	r3
    8a0c:	0002      	movs	r2, r0
    8a0e:	697b      	ldr	r3, [r7, #20]
    8a10:	189b      	adds	r3, r3, r2
    8a12:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
    8a14:	2308      	movs	r3, #8
    8a16:	2230      	movs	r2, #48	; 0x30
    8a18:	4694      	mov	ip, r2
    8a1a:	44bc      	add	ip, r7
    8a1c:	4463      	add	r3, ip
    8a1e:	2214      	movs	r2, #20
    8a20:	18b8      	adds	r0, r7, r2
    8a22:	6819      	ldr	r1, [r3, #0]
    8a24:	685a      	ldr	r2, [r3, #4]
    8a26:	689b      	ldr	r3, [r3, #8]
    8a28:	4c17      	ldr	r4, [pc, #92]	; (8a88 <MQTTSerialize_publish+0x144>)
    8a2a:	47a0      	blx	r4

	if(qos > 0) {
    8a2c:	1dbb      	adds	r3, r7, #6
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d008      	beq.n	8a46 <MQTTSerialize_publish+0x102>
		writeInt(&ptr, packetid);
    8a34:	2334      	movs	r3, #52	; 0x34
    8a36:	18fb      	adds	r3, r7, r3
    8a38:	881a      	ldrh	r2, [r3, #0]
    8a3a:	2314      	movs	r3, #20
    8a3c:	18fb      	adds	r3, r7, r3
    8a3e:	0011      	movs	r1, r2
    8a40:	0018      	movs	r0, r3
    8a42:	4b12      	ldr	r3, [pc, #72]	; (8a8c <MQTTSerialize_publish+0x148>)
    8a44:	4798      	blx	r3
	}

	memcpy(ptr, payload, payloadlen);
    8a46:	697b      	ldr	r3, [r7, #20]
    8a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    8a4c:	0018      	movs	r0, r3
    8a4e:	4b10      	ldr	r3, [pc, #64]	; (8a90 <MQTTSerialize_publish+0x14c>)
    8a50:	4798      	blx	r3
	ptr += payloadlen;
    8a52:	697a      	ldr	r2, [r7, #20]
    8a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8a56:	18d3      	adds	r3, r2, r3
    8a58:	617b      	str	r3, [r7, #20]

	*serialized_len = (uint32_t)(ptr - buf);
    8a5a:	697b      	ldr	r3, [r7, #20]
    8a5c:	001a      	movs	r2, r3
    8a5e:	68fb      	ldr	r3, [r7, #12]
    8a60:	1ad3      	subs	r3, r2, r3
    8a62:	001a      	movs	r2, r3
    8a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8a66:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    8a68:	2300      	movs	r3, #0
}
    8a6a:	0018      	movs	r0, r3
    8a6c:	46bd      	mov	sp, r7
    8a6e:	b008      	add	sp, #32
    8a70:	bdb0      	pop	{r4, r5, r7, pc}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	000088f1 	.word	0x000088f1
    8a78:	00008269 	.word	0x00008269
    8a7c:	000086f1 	.word	0x000086f1
    8a80:	000083e9 	.word	0x000083e9
    8a84:	00008185 	.word	0x00008185
    8a88:	0000853d 	.word	0x0000853d
    8a8c:	00008459 	.word	0x00008459
    8a90:	00019e6b 	.word	0x00019e6b

00008a94 <MQTTSerialize_ack>:
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
MQTTReturnCode MQTTSerialize_ack(unsigned char *buf, size_t buflen,
					  unsigned char type, uint8_t dup, uint16_t packetid,
					  uint32_t *serialized_len) {
    8a94:	b5b0      	push	{r4, r5, r7, lr}
    8a96:	b08a      	sub	sp, #40	; 0x28
    8a98:	af02      	add	r7, sp, #8
    8a9a:	60f8      	str	r0, [r7, #12]
    8a9c:	60b9      	str	r1, [r7, #8]
    8a9e:	0019      	movs	r1, r3
    8aa0:	1dfb      	adds	r3, r7, #7
    8aa2:	701a      	strb	r2, [r3, #0]
    8aa4:	1dbb      	adds	r3, r7, #6
    8aa6:	1c0a      	adds	r2, r1, #0
    8aa8:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || serialized_len == NULL) {
    8aaa:	68fb      	ldr	r3, [r7, #12]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d002      	beq.n	8ab6 <MQTTSerialize_ack+0x22>
    8ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d102      	bne.n	8abc <MQTTSerialize_ack+0x28>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    8ab6:	2306      	movs	r3, #6
    8ab8:	425b      	negs	r3, r3
    8aba:	e053      	b.n	8b64 <MQTTSerialize_ack+0xd0>
	}

	MQTTHeader header = {0};
    8abc:	2300      	movs	r3, #0
    8abe:	61bb      	str	r3, [r7, #24]
	unsigned char *ptr = buf;
    8ac0:	68fb      	ldr	r3, [r7, #12]
    8ac2:	617b      	str	r3, [r7, #20]

	/* Minimum byte length required by ACK headers is
	 * 2 for fixed and 2 for variable part */
	if(4 > buflen) {
    8ac4:	68bb      	ldr	r3, [r7, #8]
    8ac6:	2b03      	cmp	r3, #3
    8ac8:	d802      	bhi.n	8ad0 <MQTTSerialize_ack+0x3c>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    8aca:	2309      	movs	r3, #9
    8acc:	425b      	negs	r3, r3
    8ace:	e049      	b.n	8b64 <MQTTSerialize_ack+0xd0>
	}

	QoS requestQoS = (PUBREL == type) ? QOS1 : QOS0;
    8ad0:	1dfb      	adds	r3, r7, #7
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	3b06      	subs	r3, #6
    8ad6:	425a      	negs	r2, r3
    8ad8:	4153      	adcs	r3, r2
    8ada:	b2da      	uxtb	r2, r3
    8adc:	231f      	movs	r3, #31
    8ade:	18fb      	adds	r3, r7, r3
    8ae0:	701a      	strb	r2, [r3, #0]
	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, type, requestQoS, dup, 0);
    8ae2:	1dfb      	adds	r3, r7, #7
    8ae4:	2100      	movs	r1, #0
    8ae6:	5659      	ldrsb	r1, [r3, r1]
    8ae8:	231e      	movs	r3, #30
    8aea:	18fc      	adds	r4, r7, r3
    8aec:	1dbb      	adds	r3, r7, #6
    8aee:	781d      	ldrb	r5, [r3, #0]
    8af0:	231f      	movs	r3, #31
    8af2:	18fb      	adds	r3, r7, r3
    8af4:	781a      	ldrb	r2, [r3, #0]
    8af6:	2318      	movs	r3, #24
    8af8:	18f8      	adds	r0, r7, r3
    8afa:	2300      	movs	r3, #0
    8afc:	9300      	str	r3, [sp, #0]
    8afe:	002b      	movs	r3, r5
    8b00:	4d1a      	ldr	r5, [pc, #104]	; (8b6c <MQTTSerialize_ack+0xd8>)
    8b02:	47a8      	blx	r5
    8b04:	0003      	movs	r3, r0
    8b06:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    8b08:	231e      	movs	r3, #30
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	b25b      	sxtb	r3, r3
    8b10:	2b00      	cmp	r3, #0
    8b12:	d004      	beq.n	8b1e <MQTTSerialize_ack+0x8a>
		FUNC_EXIT_RC(rc);
		return rc;
    8b14:	231e      	movs	r3, #30
    8b16:	18fb      	adds	r3, r7, r3
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	b25b      	sxtb	r3, r3
    8b1c:	e022      	b.n	8b64 <MQTTSerialize_ack+0xd0>
	}
	writeChar(&ptr, header.byte); /* write header */
    8b1e:	2318      	movs	r3, #24
    8b20:	18fb      	adds	r3, r7, r3
    8b22:	781a      	ldrb	r2, [r3, #0]
    8b24:	2314      	movs	r3, #20
    8b26:	18fb      	adds	r3, r7, r3
    8b28:	0011      	movs	r1, r2
    8b2a:	0018      	movs	r0, r3
    8b2c:	4b10      	ldr	r3, [pc, #64]	; (8b70 <MQTTSerialize_ack+0xdc>)
    8b2e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    8b30:	697b      	ldr	r3, [r7, #20]
    8b32:	2102      	movs	r1, #2
    8b34:	0018      	movs	r0, r3
    8b36:	4b0f      	ldr	r3, [pc, #60]	; (8b74 <MQTTSerialize_ack+0xe0>)
    8b38:	4798      	blx	r3
    8b3a:	0002      	movs	r2, r0
    8b3c:	697b      	ldr	r3, [r7, #20]
    8b3e:	189b      	adds	r3, r3, r2
    8b40:	617b      	str	r3, [r7, #20]
	writePacketId(&ptr, packetid);
    8b42:	2330      	movs	r3, #48	; 0x30
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	881a      	ldrh	r2, [r3, #0]
    8b48:	2314      	movs	r3, #20
    8b4a:	18fb      	adds	r3, r7, r3
    8b4c:	0011      	movs	r1, r2
    8b4e:	0018      	movs	r0, r3
    8b50:	4b09      	ldr	r3, [pc, #36]	; (8b78 <MQTTSerialize_ack+0xe4>)
    8b52:	4798      	blx	r3
	*serialized_len = (uint32_t)(ptr - buf);
    8b54:	697b      	ldr	r3, [r7, #20]
    8b56:	001a      	movs	r2, r3
    8b58:	68fb      	ldr	r3, [r7, #12]
    8b5a:	1ad3      	subs	r3, r2, r3
    8b5c:	001a      	movs	r2, r3
    8b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b60:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    8b62:	2300      	movs	r3, #0
}
    8b64:	0018      	movs	r0, r3
    8b66:	46bd      	mov	sp, r7
    8b68:	b008      	add	sp, #32
    8b6a:	bdb0      	pop	{r4, r5, r7, pc}
    8b6c:	000086f1 	.word	0x000086f1
    8b70:	000083e9 	.word	0x000083e9
    8b74:	00008185 	.word	0x00008185
    8b78:	00008413 	.word	0x00008413

00008b7c <MQTTSerialize_GetSubscribePacketLength>:
  * Determines the length of the MQTT subscribe packet that would be produced using the supplied parameters
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
size_t MQTTSerialize_GetSubscribePacketLength(uint32_t count, MQTTString topicFilters[]) {
    8b7c:	b580      	push	{r7, lr}
    8b7e:	b084      	sub	sp, #16
    8b80:	af00      	add	r7, sp, #0
    8b82:	6078      	str	r0, [r7, #4]
    8b84:	6039      	str	r1, [r7, #0]
	size_t i;
	size_t len = 2; /* packetid */
    8b86:	2302      	movs	r3, #2
    8b88:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < count; ++i) {
    8b8a:	2300      	movs	r3, #0
    8b8c:	60fb      	str	r3, [r7, #12]
    8b8e:	e014      	b.n	8bba <MQTTSerialize_GetSubscribePacketLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    8b90:	68fa      	ldr	r2, [r7, #12]
    8b92:	0013      	movs	r3, r2
    8b94:	005b      	lsls	r3, r3, #1
    8b96:	189b      	adds	r3, r3, r2
    8b98:	009b      	lsls	r3, r3, #2
    8b9a:	001a      	movs	r2, r3
    8b9c:	683b      	ldr	r3, [r7, #0]
    8b9e:	189b      	adds	r3, r3, r2
    8ba0:	6818      	ldr	r0, [r3, #0]
    8ba2:	6859      	ldr	r1, [r3, #4]
    8ba4:	689a      	ldr	r2, [r3, #8]
    8ba6:	4b09      	ldr	r3, [pc, #36]	; (8bcc <MQTTSerialize_GetSubscribePacketLength+0x50>)
    8ba8:	4798      	blx	r3
    8baa:	0003      	movs	r3, r0
    8bac:	3303      	adds	r3, #3
    8bae:	68ba      	ldr	r2, [r7, #8]
    8bb0:	18d3      	adds	r3, r2, r3
    8bb2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; ++i) {
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	3301      	adds	r3, #1
    8bb8:	60fb      	str	r3, [r7, #12]
    8bba:	68fa      	ldr	r2, [r7, #12]
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	429a      	cmp	r2, r3
    8bc0:	d3e6      	bcc.n	8b90 <MQTTSerialize_GetSubscribePacketLength+0x14>
	}

	return len;
    8bc2:	68bb      	ldr	r3, [r7, #8]
}
    8bc4:	0018      	movs	r0, r3
    8bc6:	46bd      	mov	sp, r7
    8bc8:	b004      	add	sp, #16
    8bca:	bd80      	pop	{r7, pc}
    8bcc:	00008639 	.word	0x00008639

00008bd0 <MQTTSerialize_subscribe>:
  * @return the length of the serialized data.  <= 0 indicates error
  */
MQTTReturnCode MQTTSerialize_subscribe(unsigned char *buf, size_t buflen,
									   unsigned char dup, uint16_t packetid, uint32_t count,
									   MQTTString topicFilters[], QoS requestedQoSs[],
									   uint32_t *serialized_len) {									
    8bd0:	b5b0      	push	{r4, r5, r7, lr}
    8bd2:	b08c      	sub	sp, #48	; 0x30
    8bd4:	af02      	add	r7, sp, #8
    8bd6:	60f8      	str	r0, [r7, #12]
    8bd8:	60b9      	str	r1, [r7, #8]
    8bda:	0019      	movs	r1, r3
    8bdc:	1dfb      	adds	r3, r7, #7
    8bde:	701a      	strb	r2, [r3, #0]
    8be0:	1d3b      	adds	r3, r7, #4
    8be2:	1c0a      	adds	r2, r1, #0
    8be4:	801a      	strh	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == serialized_len) {
    8be6:	68fb      	ldr	r3, [r7, #12]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d002      	beq.n	8bf2 <MQTTSerialize_subscribe+0x22>
    8bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d102      	bne.n	8bf8 <MQTTSerialize_subscribe+0x28>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    8bf2:	2306      	movs	r3, #6
    8bf4:	425b      	negs	r3, r3
    8bf6:	e07a      	b.n	8cee <MQTTSerialize_subscribe+0x11e>
	}

	unsigned char *ptr = buf;
    8bf8:	68fb      	ldr	r3, [r7, #12]
    8bfa:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
    8bfc:	2300      	movs	r3, #0
    8bfe:	617b      	str	r3, [r7, #20]
	size_t rem_len = 0;
    8c00:	2300      	movs	r3, #0
    8c02:	623b      	str	r3, [r7, #32]
	uint32_t i = 0;
    8c04:	2300      	movs	r3, #0
    8c06:	627b      	str	r3, [r7, #36]	; 0x24

	if(MQTTPacket_len(rem_len = MQTTSerialize_GetSubscribePacketLength(count, topicFilters)) > buflen) {
    8c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c0c:	0011      	movs	r1, r2
    8c0e:	0018      	movs	r0, r3
    8c10:	4b39      	ldr	r3, [pc, #228]	; (8cf8 <MQTTSerialize_subscribe+0x128>)
    8c12:	4798      	blx	r3
    8c14:	0003      	movs	r3, r0
    8c16:	623b      	str	r3, [r7, #32]
    8c18:	6a3b      	ldr	r3, [r7, #32]
    8c1a:	0018      	movs	r0, r3
    8c1c:	4b37      	ldr	r3, [pc, #220]	; (8cfc <MQTTSerialize_subscribe+0x12c>)
    8c1e:	4798      	blx	r3
    8c20:	0002      	movs	r2, r0
    8c22:	68bb      	ldr	r3, [r7, #8]
    8c24:	429a      	cmp	r2, r3
    8c26:	d902      	bls.n	8c2e <MQTTSerialize_subscribe+0x5e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    8c28:	2309      	movs	r3, #9
    8c2a:	425b      	negs	r3, r3
    8c2c:	e05f      	b.n	8cee <MQTTSerialize_subscribe+0x11e>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, SUBSCRIBE, 1, dup, 0);
    8c2e:	231f      	movs	r3, #31
    8c30:	18fc      	adds	r4, r7, r3
    8c32:	1dfb      	adds	r3, r7, #7
    8c34:	781a      	ldrb	r2, [r3, #0]
    8c36:	2314      	movs	r3, #20
    8c38:	18f8      	adds	r0, r7, r3
    8c3a:	2300      	movs	r3, #0
    8c3c:	9300      	str	r3, [sp, #0]
    8c3e:	0013      	movs	r3, r2
    8c40:	2201      	movs	r2, #1
    8c42:	2108      	movs	r1, #8
    8c44:	4d2e      	ldr	r5, [pc, #184]	; (8d00 <MQTTSerialize_subscribe+0x130>)
    8c46:	47a8      	blx	r5
    8c48:	0003      	movs	r3, r0
    8c4a:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    8c4c:	231f      	movs	r3, #31
    8c4e:	18fb      	adds	r3, r7, r3
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	b25b      	sxtb	r3, r3
    8c54:	2b00      	cmp	r3, #0
    8c56:	d004      	beq.n	8c62 <MQTTSerialize_subscribe+0x92>
		FUNC_EXIT_RC(rc);
		return rc;
    8c58:	231f      	movs	r3, #31
    8c5a:	18fb      	adds	r3, r7, r3
    8c5c:	781b      	ldrb	r3, [r3, #0]
    8c5e:	b25b      	sxtb	r3, r3
    8c60:	e045      	b.n	8cee <MQTTSerialize_subscribe+0x11e>
	}
	/* write header */
	writeChar(&ptr, header.byte);
    8c62:	2314      	movs	r3, #20
    8c64:	18fb      	adds	r3, r7, r3
    8c66:	781a      	ldrb	r2, [r3, #0]
    8c68:	2318      	movs	r3, #24
    8c6a:	18fb      	adds	r3, r7, r3
    8c6c:	0011      	movs	r1, r2
    8c6e:	0018      	movs	r0, r3
    8c70:	4b24      	ldr	r3, [pc, #144]	; (8d04 <MQTTSerialize_subscribe+0x134>)
    8c72:	4798      	blx	r3

	/* write remaining length */
	ptr += MQTTPacket_encode(ptr, rem_len);
    8c74:	69bb      	ldr	r3, [r7, #24]
    8c76:	6a3a      	ldr	r2, [r7, #32]
    8c78:	0011      	movs	r1, r2
    8c7a:	0018      	movs	r0, r3
    8c7c:	4b22      	ldr	r3, [pc, #136]	; (8d08 <MQTTSerialize_subscribe+0x138>)
    8c7e:	4798      	blx	r3
    8c80:	0002      	movs	r2, r0
    8c82:	69bb      	ldr	r3, [r7, #24]
    8c84:	189b      	adds	r3, r3, r2
    8c86:	61bb      	str	r3, [r7, #24]

	writePacketId(&ptr, packetid);
    8c88:	1d3b      	adds	r3, r7, #4
    8c8a:	881a      	ldrh	r2, [r3, #0]
    8c8c:	2318      	movs	r3, #24
    8c8e:	18fb      	adds	r3, r7, r3
    8c90:	0011      	movs	r1, r2
    8c92:	0018      	movs	r0, r3
    8c94:	4b1d      	ldr	r3, [pc, #116]	; (8d0c <MQTTSerialize_subscribe+0x13c>)
    8c96:	4798      	blx	r3

	for(i = 0; i < count; ++i) {
    8c98:	2300      	movs	r3, #0
    8c9a:	627b      	str	r3, [r7, #36]	; 0x24
    8c9c:	e01b      	b.n	8cd6 <MQTTSerialize_subscribe+0x106>
		writeMQTTString(&ptr, topicFilters[i]);
    8c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8ca0:	0013      	movs	r3, r2
    8ca2:	005b      	lsls	r3, r3, #1
    8ca4:	189b      	adds	r3, r3, r2
    8ca6:	009b      	lsls	r3, r3, #2
    8ca8:	001a      	movs	r2, r3
    8caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8cac:	189b      	adds	r3, r3, r2
    8cae:	2218      	movs	r2, #24
    8cb0:	18b8      	adds	r0, r7, r2
    8cb2:	6819      	ldr	r1, [r3, #0]
    8cb4:	685a      	ldr	r2, [r3, #4]
    8cb6:	689b      	ldr	r3, [r3, #8]
    8cb8:	4c15      	ldr	r4, [pc, #84]	; (8d10 <MQTTSerialize_subscribe+0x140>)
    8cba:	47a0      	blx	r4
		writeChar(&ptr, (unsigned char)requestedQoSs[i]);
    8cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    8cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cc0:	18d3      	adds	r3, r2, r3
    8cc2:	781a      	ldrb	r2, [r3, #0]
    8cc4:	2318      	movs	r3, #24
    8cc6:	18fb      	adds	r3, r7, r3
    8cc8:	0011      	movs	r1, r2
    8cca:	0018      	movs	r0, r3
    8ccc:	4b0d      	ldr	r3, [pc, #52]	; (8d04 <MQTTSerialize_subscribe+0x134>)
    8cce:	4798      	blx	r3
	for(i = 0; i < count; ++i) {
    8cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cd2:	3301      	adds	r3, #1
    8cd4:	627b      	str	r3, [r7, #36]	; 0x24
    8cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8cda:	429a      	cmp	r2, r3
    8cdc:	d3df      	bcc.n	8c9e <MQTTSerialize_subscribe+0xce>
	}

	*serialized_len = (uint32_t)(ptr - buf);
    8cde:	69bb      	ldr	r3, [r7, #24]
    8ce0:	001a      	movs	r2, r3
    8ce2:	68fb      	ldr	r3, [r7, #12]
    8ce4:	1ad3      	subs	r3, r2, r3
    8ce6:	001a      	movs	r2, r3
    8ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8cea:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    8cec:	2300      	movs	r3, #0
}
    8cee:	0018      	movs	r0, r3
    8cf0:	46bd      	mov	sp, r7
    8cf2:	b00a      	add	sp, #40	; 0x28
    8cf4:	bdb0      	pop	{r4, r5, r7, pc}
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	00008b7d 	.word	0x00008b7d
    8cfc:	00008269 	.word	0x00008269
    8d00:	000086f1 	.word	0x000086f1
    8d04:	000083e9 	.word	0x000083e9
    8d08:	00008185 	.word	0x00008185
    8d0c:	00008413 	.word	0x00008413
    8d10:	0000853d 	.word	0x0000853d

00008d14 <MQTTDeserialize_suback>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
MQTTReturnCode MQTTDeserialize_suback(uint16_t *packetid, uint32_t maxcount,
									  uint32_t *count, QoS grantedQoSs[],
									  unsigned char *buf, size_t buflen) {
    8d14:	b590      	push	{r4, r7, lr}
    8d16:	b08b      	sub	sp, #44	; 0x2c
    8d18:	af00      	add	r7, sp, #0
    8d1a:	60f8      	str	r0, [r7, #12]
    8d1c:	60b9      	str	r1, [r7, #8]
    8d1e:	607a      	str	r2, [r7, #4]
    8d20:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == packetid || NULL == count || NULL == grantedQoSs) {
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d005      	beq.n	8d34 <MQTTDeserialize_suback+0x20>
    8d28:	687b      	ldr	r3, [r7, #4]
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d002      	beq.n	8d34 <MQTTDeserialize_suback+0x20>
    8d2e:	683b      	ldr	r3, [r7, #0]
    8d30:	2b00      	cmp	r3, #0
    8d32:	d102      	bne.n	8d3a <MQTTDeserialize_suback+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    8d34:	2306      	movs	r3, #6
    8d36:	425b      	negs	r3, r3
    8d38:	e077      	b.n	8e2a <MQTTDeserialize_suback+0x116>
	}

	MQTTHeader header = {0};
    8d3a:	2300      	movs	r3, #0
    8d3c:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    8d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d40:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    8d42:	2300      	movs	r3, #0
    8d44:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTReturnCode decodeRc = FAILURE;
    8d46:	2323      	movs	r3, #35	; 0x23
    8d48:	18fb      	adds	r3, r7, r3
    8d4a:	22ff      	movs	r2, #255	; 0xff
    8d4c:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    8d4e:	2300      	movs	r3, #0
    8d50:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    8d52:	2300      	movs	r3, #0
    8d54:	613b      	str	r3, [r7, #16]

	/* SUBACK header size is 4 bytes for header and at least one byte for QoS payload
	 * Need at least a 5 bytes buffer. MQTT3.1.1 specification 3.9
	 */
	if(5 > buflen) {
    8d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d58:	2b04      	cmp	r3, #4
    8d5a:	d802      	bhi.n	8d62 <MQTTDeserialize_suback+0x4e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    8d5c:	2309      	movs	r3, #9
    8d5e:	425b      	negs	r3, r3
    8d60:	e063      	b.n	8e2a <MQTTDeserialize_suback+0x116>
	}

	header.byte = readChar(&curdata);
    8d62:	2318      	movs	r3, #24
    8d64:	18fb      	adds	r3, r7, r3
    8d66:	0018      	movs	r0, r3
    8d68:	4b32      	ldr	r3, [pc, #200]	; (8e34 <MQTTDeserialize_suback+0x120>)
    8d6a:	4798      	blx	r3
    8d6c:	0003      	movs	r3, r0
    8d6e:	001a      	movs	r2, r3
    8d70:	231c      	movs	r3, #28
    8d72:	18fb      	adds	r3, r7, r3
    8d74:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK) {
    8d76:	231c      	movs	r3, #28
    8d78:	18fb      	adds	r3, r7, r3
    8d7a:	781b      	ldrb	r3, [r3, #0]
    8d7c:	220f      	movs	r2, #15
    8d7e:	4393      	bics	r3, r2
    8d80:	b2db      	uxtb	r3, r3
    8d82:	2b90      	cmp	r3, #144	; 0x90
    8d84:	d002      	beq.n	8d8c <MQTTDeserialize_suback+0x78>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    8d86:	2301      	movs	r3, #1
    8d88:	425b      	negs	r3, r3
    8d8a:	e04e      	b.n	8e2a <MQTTDeserialize_suback+0x116>
	}

	/* read remaining length */
	decodeRc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    8d8c:	69bb      	ldr	r3, [r7, #24]
    8d8e:	2223      	movs	r2, #35	; 0x23
    8d90:	18bc      	adds	r4, r7, r2
    8d92:	2210      	movs	r2, #16
    8d94:	18ba      	adds	r2, r7, r2
    8d96:	2114      	movs	r1, #20
    8d98:	1879      	adds	r1, r7, r1
    8d9a:	0018      	movs	r0, r3
    8d9c:	4b26      	ldr	r3, [pc, #152]	; (8e38 <MQTTDeserialize_suback+0x124>)
    8d9e:	4798      	blx	r3
    8da0:	0003      	movs	r3, r0
    8da2:	7023      	strb	r3, [r4, #0]
	if(decodeRc != SUCCESS) {
    8da4:	2323      	movs	r3, #35	; 0x23
    8da6:	18fb      	adds	r3, r7, r3
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	b25b      	sxtb	r3, r3
    8dac:	2b00      	cmp	r3, #0
    8dae:	d004      	beq.n	8dba <MQTTDeserialize_suback+0xa6>
		return decodeRc;
    8db0:	2323      	movs	r3, #35	; 0x23
    8db2:	18fb      	adds	r3, r7, r3
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	b25b      	sxtb	r3, r3
    8db8:	e037      	b.n	8e2a <MQTTDeserialize_suback+0x116>
	}

	curdata += (readBytesLen);
    8dba:	69ba      	ldr	r2, [r7, #24]
    8dbc:	693b      	ldr	r3, [r7, #16]
    8dbe:	18d3      	adds	r3, r2, r3
    8dc0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    8dc2:	69ba      	ldr	r2, [r7, #24]
    8dc4:	697b      	ldr	r3, [r7, #20]
    8dc6:	18d3      	adds	r3, r2, r3
    8dc8:	627b      	str	r3, [r7, #36]	; 0x24
	if (enddata - curdata < 2) {
    8dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dcc:	69ba      	ldr	r2, [r7, #24]
    8dce:	1a9b      	subs	r3, r3, r2
    8dd0:	2b01      	cmp	r3, #1
    8dd2:	dc02      	bgt.n	8dda <MQTTDeserialize_suback+0xc6>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    8dd4:	2301      	movs	r3, #1
    8dd6:	425b      	negs	r3, r3
    8dd8:	e027      	b.n	8e2a <MQTTDeserialize_suback+0x116>
	}

	*packetid = readPacketId(&curdata);
    8dda:	2318      	movs	r3, #24
    8ddc:	18fb      	adds	r3, r7, r3
    8dde:	0018      	movs	r0, r3
    8de0:	4b16      	ldr	r3, [pc, #88]	; (8e3c <MQTTDeserialize_suback+0x128>)
    8de2:	4798      	blx	r3
    8de4:	0003      	movs	r3, r0
    8de6:	001a      	movs	r2, r3
    8de8:	68fb      	ldr	r3, [r7, #12]
    8dea:	801a      	strh	r2, [r3, #0]

	*count = 0;
    8dec:	687b      	ldr	r3, [r7, #4]
    8dee:	2200      	movs	r2, #0
    8df0:	601a      	str	r2, [r3, #0]
	while(curdata < enddata) {
    8df2:	e015      	b.n	8e20 <MQTTDeserialize_suback+0x10c>
		if(*count > maxcount) {
    8df4:	687b      	ldr	r3, [r7, #4]
    8df6:	681a      	ldr	r2, [r3, #0]
    8df8:	68bb      	ldr	r3, [r7, #8]
    8dfa:	429a      	cmp	r2, r3
    8dfc:	d902      	bls.n	8e04 <MQTTDeserialize_suback+0xf0>
			FUNC_EXIT_RC(FAILURE);
			return FAILURE;
    8dfe:	2301      	movs	r3, #1
    8e00:	425b      	negs	r3, r3
    8e02:	e012      	b.n	8e2a <MQTTDeserialize_suback+0x116>
		}
		grantedQoSs[(*count)++] = (QoS)readChar(&curdata);
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	681b      	ldr	r3, [r3, #0]
    8e08:	1c59      	adds	r1, r3, #1
    8e0a:	687a      	ldr	r2, [r7, #4]
    8e0c:	6011      	str	r1, [r2, #0]
    8e0e:	683a      	ldr	r2, [r7, #0]
    8e10:	18d4      	adds	r4, r2, r3
    8e12:	2318      	movs	r3, #24
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	0018      	movs	r0, r3
    8e18:	4b06      	ldr	r3, [pc, #24]	; (8e34 <MQTTDeserialize_suback+0x120>)
    8e1a:	4798      	blx	r3
    8e1c:	0003      	movs	r3, r0
    8e1e:	7023      	strb	r3, [r4, #0]
	while(curdata < enddata) {
    8e20:	69ba      	ldr	r2, [r7, #24]
    8e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e24:	429a      	cmp	r2, r3
    8e26:	d3e5      	bcc.n	8df4 <MQTTDeserialize_suback+0xe0>
	}

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    8e28:	2300      	movs	r3, #0
}
    8e2a:	0018      	movs	r0, r3
    8e2c:	46bd      	mov	sp, r7
    8e2e:	b00b      	add	sp, #44	; 0x2c
    8e30:	bd90      	pop	{r4, r7, pc}
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	000083bd 	.word	0x000083bd
    8e38:	000082f9 	.word	0x000082f9
    8e3c:	00008367 	.word	0x00008367

00008e40 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    8e40:	b580      	push	{r7, lr}
    8e42:	b082      	sub	sp, #8
    8e44:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8e46:	f3ef 8310 	mrs	r3, PRIMASK
    8e4a:	607b      	str	r3, [r7, #4]
  return(result);
    8e4c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8e4e:	425a      	negs	r2, r3
    8e50:	4153      	adcs	r3, r2
    8e52:	b2db      	uxtb	r3, r3
    8e54:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    8e56:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8e58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8e5c:	4b03      	ldr	r3, [pc, #12]	; (8e6c <cpu_irq_save+0x2c>)
    8e5e:	2200      	movs	r2, #0
    8e60:	701a      	strb	r2, [r3, #0]
	return flags;
    8e62:	683b      	ldr	r3, [r7, #0]
}
    8e64:	0018      	movs	r0, r3
    8e66:	46bd      	mov	sp, r7
    8e68:	b002      	add	sp, #8
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	200004b0 	.word	0x200004b0

00008e70 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    8e70:	b580      	push	{r7, lr}
    8e72:	b082      	sub	sp, #8
    8e74:	af00      	add	r7, sp, #0
    8e76:	6078      	str	r0, [r7, #4]
	return (flags);
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	1e5a      	subs	r2, r3, #1
    8e7c:	4193      	sbcs	r3, r2
    8e7e:	b2db      	uxtb	r3, r3
}
    8e80:	0018      	movs	r0, r3
    8e82:	46bd      	mov	sp, r7
    8e84:	b002      	add	sp, #8
    8e86:	bd80      	pop	{r7, pc}

00008e88 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    8e88:	b580      	push	{r7, lr}
    8e8a:	b082      	sub	sp, #8
    8e8c:	af00      	add	r7, sp, #0
    8e8e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	0018      	movs	r0, r3
    8e94:	4b06      	ldr	r3, [pc, #24]	; (8eb0 <cpu_irq_restore+0x28>)
    8e96:	4798      	blx	r3
    8e98:	1e03      	subs	r3, r0, #0
    8e9a:	d005      	beq.n	8ea8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    8e9c:	4b05      	ldr	r3, [pc, #20]	; (8eb4 <cpu_irq_restore+0x2c>)
    8e9e:	2201      	movs	r2, #1
    8ea0:	701a      	strb	r2, [r3, #0]
    8ea2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8ea6:	b662      	cpsie	i
}
    8ea8:	46c0      	nop			; (mov r8, r8)
    8eaa:	46bd      	mov	sp, r7
    8eac:	b002      	add	sp, #8
    8eae:	bd80      	pop	{r7, pc}
    8eb0:	00008e71 	.word	0x00008e71
    8eb4:	200004b0 	.word	0x200004b0

00008eb8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8eb8:	b580      	push	{r7, lr}
    8eba:	b084      	sub	sp, #16
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	0002      	movs	r2, r0
    8ec0:	1dfb      	adds	r3, r7, #7
    8ec2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8ec4:	230f      	movs	r3, #15
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	1dfa      	adds	r2, r7, #7
    8eca:	7812      	ldrb	r2, [r2, #0]
    8ecc:	09d2      	lsrs	r2, r2, #7
    8ece:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8ed0:	230e      	movs	r3, #14
    8ed2:	18fb      	adds	r3, r7, r3
    8ed4:	1dfa      	adds	r2, r7, #7
    8ed6:	7812      	ldrb	r2, [r2, #0]
    8ed8:	0952      	lsrs	r2, r2, #5
    8eda:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8edc:	4b0d      	ldr	r3, [pc, #52]	; (8f14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8ede:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8ee0:	230f      	movs	r3, #15
    8ee2:	18fb      	adds	r3, r7, r3
    8ee4:	781b      	ldrb	r3, [r3, #0]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d10f      	bne.n	8f0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8eea:	230f      	movs	r3, #15
    8eec:	18fb      	adds	r3, r7, r3
    8eee:	781b      	ldrb	r3, [r3, #0]
    8ef0:	009b      	lsls	r3, r3, #2
    8ef2:	2210      	movs	r2, #16
    8ef4:	4694      	mov	ip, r2
    8ef6:	44bc      	add	ip, r7
    8ef8:	4463      	add	r3, ip
    8efa:	3b08      	subs	r3, #8
    8efc:	681a      	ldr	r2, [r3, #0]
    8efe:	230e      	movs	r3, #14
    8f00:	18fb      	adds	r3, r7, r3
    8f02:	781b      	ldrb	r3, [r3, #0]
    8f04:	01db      	lsls	r3, r3, #7
    8f06:	18d3      	adds	r3, r2, r3
    8f08:	e000      	b.n	8f0c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8f0a:	2300      	movs	r3, #0
	}
}
    8f0c:	0018      	movs	r0, r3
    8f0e:	46bd      	mov	sp, r7
    8f10:	b004      	add	sp, #16
    8f12:	bd80      	pop	{r7, pc}
    8f14:	40002800 	.word	0x40002800

00008f18 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8f18:	b580      	push	{r7, lr}
    8f1a:	b082      	sub	sp, #8
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	0002      	movs	r2, r0
    8f20:	1dfb      	adds	r3, r7, #7
    8f22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8f24:	1dfb      	adds	r3, r7, #7
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	0018      	movs	r0, r3
    8f2a:	4b03      	ldr	r3, [pc, #12]	; (8f38 <port_get_group_from_gpio_pin+0x20>)
    8f2c:	4798      	blx	r3
    8f2e:	0003      	movs	r3, r0
}
    8f30:	0018      	movs	r0, r3
    8f32:	46bd      	mov	sp, r7
    8f34:	b002      	add	sp, #8
    8f36:	bd80      	pop	{r7, pc}
    8f38:	00008eb9 	.word	0x00008eb9

00008f3c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8f3c:	b580      	push	{r7, lr}
    8f3e:	b082      	sub	sp, #8
    8f40:	af00      	add	r7, sp, #0
    8f42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	2200      	movs	r2, #0
    8f48:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8f4a:	687b      	ldr	r3, [r7, #4]
    8f4c:	2201      	movs	r2, #1
    8f4e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8f50:	687b      	ldr	r3, [r7, #4]
    8f52:	2200      	movs	r2, #0
    8f54:	709a      	strb	r2, [r3, #2]
}
    8f56:	46c0      	nop			; (mov r8, r8)
    8f58:	46bd      	mov	sp, r7
    8f5a:	b002      	add	sp, #8
    8f5c:	bd80      	pop	{r7, pc}
	...

00008f60 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8f60:	b580      	push	{r7, lr}
    8f62:	b084      	sub	sp, #16
    8f64:	af00      	add	r7, sp, #0
    8f66:	0002      	movs	r2, r0
    8f68:	1dfb      	adds	r3, r7, #7
    8f6a:	701a      	strb	r2, [r3, #0]
    8f6c:	1dbb      	adds	r3, r7, #6
    8f6e:	1c0a      	adds	r2, r1, #0
    8f70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8f72:	1dfb      	adds	r3, r7, #7
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	0018      	movs	r0, r3
    8f78:	4b0d      	ldr	r3, [pc, #52]	; (8fb0 <port_pin_set_output_level+0x50>)
    8f7a:	4798      	blx	r3
    8f7c:	0003      	movs	r3, r0
    8f7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8f80:	1dfb      	adds	r3, r7, #7
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	221f      	movs	r2, #31
    8f86:	4013      	ands	r3, r2
    8f88:	2201      	movs	r2, #1
    8f8a:	409a      	lsls	r2, r3
    8f8c:	0013      	movs	r3, r2
    8f8e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8f90:	1dbb      	adds	r3, r7, #6
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d003      	beq.n	8fa0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8f98:	68fb      	ldr	r3, [r7, #12]
    8f9a:	68ba      	ldr	r2, [r7, #8]
    8f9c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8f9e:	e002      	b.n	8fa6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8fa0:	68fb      	ldr	r3, [r7, #12]
    8fa2:	68ba      	ldr	r2, [r7, #8]
    8fa4:	615a      	str	r2, [r3, #20]
}
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	46bd      	mov	sp, r7
    8faa:	b004      	add	sp, #16
    8fac:	bd80      	pop	{r7, pc}
    8fae:	46c0      	nop			; (mov r8, r8)
    8fb0:	00008f19 	.word	0x00008f19

00008fb4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    8fb4:	b580      	push	{r7, lr}
    8fb6:	b084      	sub	sp, #16
    8fb8:	af00      	add	r7, sp, #0
    8fba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	681b      	ldr	r3, [r3, #0]
    8fc0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8fc2:	68fb      	ldr	r3, [r7, #12]
    8fc4:	69db      	ldr	r3, [r3, #28]
    8fc6:	1e5a      	subs	r2, r3, #1
    8fc8:	4193      	sbcs	r3, r2
    8fca:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    8fcc:	0018      	movs	r0, r3
    8fce:	46bd      	mov	sp, r7
    8fd0:	b004      	add	sp, #16
    8fd2:	bd80      	pop	{r7, pc}

00008fd4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	b082      	sub	sp, #8
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	2201      	movs	r2, #1
    8fe0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	2200      	movs	r2, #0
    8fe6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	2200      	movs	r2, #0
    8fec:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    8fee:	687b      	ldr	r3, [r7, #4]
    8ff0:	22c0      	movs	r2, #192	; 0xc0
    8ff2:	0392      	lsls	r2, r2, #14
    8ff4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    8ff6:	687b      	ldr	r3, [r7, #4]
    8ff8:	2200      	movs	r2, #0
    8ffa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    8ffc:	687b      	ldr	r3, [r7, #4]
    8ffe:	2200      	movs	r2, #0
    9000:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    9002:	687b      	ldr	r3, [r7, #4]
    9004:	2201      	movs	r2, #1
    9006:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    9008:	687b      	ldr	r3, [r7, #4]
    900a:	2201      	movs	r2, #1
    900c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	2200      	movs	r2, #0
    9012:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	2224      	movs	r2, #36	; 0x24
    9018:	2100      	movs	r1, #0
    901a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	3318      	adds	r3, #24
    9020:	220c      	movs	r2, #12
    9022:	2100      	movs	r1, #0
    9024:	0018      	movs	r0, r3
    9026:	4b0a      	ldr	r3, [pc, #40]	; (9050 <spi_get_config_defaults+0x7c>)
    9028:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    902a:	687b      	ldr	r3, [r7, #4]
    902c:	4a09      	ldr	r2, [pc, #36]	; (9054 <spi_get_config_defaults+0x80>)
    902e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9030:	687b      	ldr	r3, [r7, #4]
    9032:	2200      	movs	r2, #0
    9034:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	2200      	movs	r2, #0
    903a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	2200      	movs	r2, #0
    9040:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	2200      	movs	r2, #0
    9046:	635a      	str	r2, [r3, #52]	; 0x34

};
    9048:	46c0      	nop			; (mov r8, r8)
    904a:	46bd      	mov	sp, r7
    904c:	b002      	add	sp, #8
    904e:	bd80      	pop	{r7, pc}
    9050:	00019ea1 	.word	0x00019ea1
    9054:	000186a0 	.word	0x000186a0

00009058 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    9058:	b580      	push	{r7, lr}
    905a:	b082      	sub	sp, #8
    905c:	af00      	add	r7, sp, #0
    905e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	220a      	movs	r2, #10
    9064:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	2200      	movs	r2, #0
    906a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	2200      	movs	r2, #0
    9070:	709a      	strb	r2, [r3, #2]
}
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	46bd      	mov	sp, r7
    9076:	b002      	add	sp, #8
    9078:	bd80      	pop	{r7, pc}
	...

0000907c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    907c:	b580      	push	{r7, lr}
    907e:	b084      	sub	sp, #16
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    9086:	683b      	ldr	r3, [r7, #0]
    9088:	781a      	ldrb	r2, [r3, #0]
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    908e:	683b      	ldr	r3, [r7, #0]
    9090:	785a      	ldrb	r2, [r3, #1]
    9092:	687b      	ldr	r3, [r7, #4]
    9094:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    9096:	683b      	ldr	r3, [r7, #0]
    9098:	789a      	ldrb	r2, [r3, #2]
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    909e:	230c      	movs	r3, #12
    90a0:	18fb      	adds	r3, r7, r3
    90a2:	0018      	movs	r0, r3
    90a4:	4b0b      	ldr	r3, [pc, #44]	; (90d4 <spi_attach_slave+0x58>)
    90a6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    90a8:	230c      	movs	r3, #12
    90aa:	18fb      	adds	r3, r7, r3
    90ac:	2201      	movs	r2, #1
    90ae:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	220c      	movs	r2, #12
    90b6:	18ba      	adds	r2, r7, r2
    90b8:	0011      	movs	r1, r2
    90ba:	0018      	movs	r0, r3
    90bc:	4b06      	ldr	r3, [pc, #24]	; (90d8 <spi_attach_slave+0x5c>)
    90be:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	781b      	ldrb	r3, [r3, #0]
    90c4:	2101      	movs	r1, #1
    90c6:	0018      	movs	r0, r3
    90c8:	4b04      	ldr	r3, [pc, #16]	; (90dc <spi_attach_slave+0x60>)
    90ca:	4798      	blx	r3
}
    90cc:	46c0      	nop			; (mov r8, r8)
    90ce:	46bd      	mov	sp, r7
    90d0:	b004      	add	sp, #16
    90d2:	bd80      	pop	{r7, pc}
    90d4:	00008f3d 	.word	0x00008f3d
    90d8:	00011791 	.word	0x00011791
    90dc:	00008f61 	.word	0x00008f61

000090e0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b084      	sub	sp, #16
    90e4:	af00      	add	r7, sp, #0
    90e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	681b      	ldr	r3, [r3, #0]
    90ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    90ee:	46c0      	nop			; (mov r8, r8)
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	0018      	movs	r0, r3
    90f4:	4b06      	ldr	r3, [pc, #24]	; (9110 <spi_enable+0x30>)
    90f6:	4798      	blx	r3
    90f8:	1e03      	subs	r3, r0, #0
    90fa:	d1f9      	bne.n	90f0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    90fc:	68fb      	ldr	r3, [r7, #12]
    90fe:	681b      	ldr	r3, [r3, #0]
    9100:	2202      	movs	r2, #2
    9102:	431a      	orrs	r2, r3
    9104:	68fb      	ldr	r3, [r7, #12]
    9106:	601a      	str	r2, [r3, #0]
}
    9108:	46c0      	nop			; (mov r8, r8)
    910a:	46bd      	mov	sp, r7
    910c:	b004      	add	sp, #16
    910e:	bd80      	pop	{r7, pc}
    9110:	00008fb5 	.word	0x00008fb5

00009114 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    9114:	b580      	push	{r7, lr}
    9116:	b084      	sub	sp, #16
    9118:	af00      	add	r7, sp, #0
    911a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	681b      	ldr	r3, [r3, #0]
    9120:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9122:	68fb      	ldr	r3, [r7, #12]
    9124:	7e1b      	ldrb	r3, [r3, #24]
    9126:	b2db      	uxtb	r3, r3
    9128:	001a      	movs	r2, r3
    912a:	2302      	movs	r3, #2
    912c:	4013      	ands	r3, r2
    912e:	1e5a      	subs	r2, r3, #1
    9130:	4193      	sbcs	r3, r2
    9132:	b2db      	uxtb	r3, r3
}
    9134:	0018      	movs	r0, r3
    9136:	46bd      	mov	sp, r7
    9138:	b004      	add	sp, #16
    913a:	bd80      	pop	{r7, pc}

0000913c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    913c:	b580      	push	{r7, lr}
    913e:	b084      	sub	sp, #16
    9140:	af00      	add	r7, sp, #0
    9142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9144:	687b      	ldr	r3, [r7, #4]
    9146:	681b      	ldr	r3, [r3, #0]
    9148:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    914a:	68fb      	ldr	r3, [r7, #12]
    914c:	7e1b      	ldrb	r3, [r3, #24]
    914e:	b2db      	uxtb	r3, r3
    9150:	001a      	movs	r2, r3
    9152:	2301      	movs	r3, #1
    9154:	4013      	ands	r3, r2
    9156:	1e5a      	subs	r2, r3, #1
    9158:	4193      	sbcs	r3, r2
    915a:	b2db      	uxtb	r3, r3
}
    915c:	0018      	movs	r0, r3
    915e:	46bd      	mov	sp, r7
    9160:	b004      	add	sp, #16
    9162:	bd80      	pop	{r7, pc}

00009164 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    9164:	b580      	push	{r7, lr}
    9166:	b084      	sub	sp, #16
    9168:	af00      	add	r7, sp, #0
    916a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	681b      	ldr	r3, [r3, #0]
    9170:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9172:	68fb      	ldr	r3, [r7, #12]
    9174:	7e1b      	ldrb	r3, [r3, #24]
    9176:	b2db      	uxtb	r3, r3
    9178:	001a      	movs	r2, r3
    917a:	2304      	movs	r3, #4
    917c:	4013      	ands	r3, r2
    917e:	1e5a      	subs	r2, r3, #1
    9180:	4193      	sbcs	r3, r2
    9182:	b2db      	uxtb	r3, r3
}
    9184:	0018      	movs	r0, r3
    9186:	46bd      	mov	sp, r7
    9188:	b004      	add	sp, #16
    918a:	bd80      	pop	{r7, pc}

0000918c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    918c:	b580      	push	{r7, lr}
    918e:	b084      	sub	sp, #16
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
    9194:	000a      	movs	r2, r1
    9196:	1cbb      	adds	r3, r7, #2
    9198:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	0018      	movs	r0, r3
    91a4:	4b0a      	ldr	r3, [pc, #40]	; (91d0 <spi_write+0x44>)
    91a6:	4798      	blx	r3
    91a8:	0003      	movs	r3, r0
    91aa:	001a      	movs	r2, r3
    91ac:	2301      	movs	r3, #1
    91ae:	4053      	eors	r3, r2
    91b0:	b2db      	uxtb	r3, r3
    91b2:	2b00      	cmp	r3, #0
    91b4:	d001      	beq.n	91ba <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    91b6:	2305      	movs	r3, #5
    91b8:	e006      	b.n	91c8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    91ba:	1cbb      	adds	r3, r7, #2
    91bc:	881b      	ldrh	r3, [r3, #0]
    91be:	05db      	lsls	r3, r3, #23
    91c0:	0dda      	lsrs	r2, r3, #23
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    91c6:	2300      	movs	r3, #0
}
    91c8:	0018      	movs	r0, r3
    91ca:	46bd      	mov	sp, r7
    91cc:	b004      	add	sp, #16
    91ce:	bd80      	pop	{r7, pc}
    91d0:	0000913d 	.word	0x0000913d

000091d4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    91d4:	b580      	push	{r7, lr}
    91d6:	b084      	sub	sp, #16
    91d8:	af00      	add	r7, sp, #0
    91da:	6078      	str	r0, [r7, #4]
    91dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    91e4:	687b      	ldr	r3, [r7, #4]
    91e6:	0018      	movs	r0, r3
    91e8:	4b1b      	ldr	r3, [pc, #108]	; (9258 <spi_read+0x84>)
    91ea:	4798      	blx	r3
    91ec:	0003      	movs	r3, r0
    91ee:	001a      	movs	r2, r3
    91f0:	2301      	movs	r3, #1
    91f2:	4053      	eors	r3, r2
    91f4:	b2db      	uxtb	r3, r3
    91f6:	2b00      	cmp	r3, #0
    91f8:	d001      	beq.n	91fe <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    91fa:	2310      	movs	r3, #16
    91fc:	e027      	b.n	924e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    91fe:	230f      	movs	r3, #15
    9200:	18fb      	adds	r3, r7, r3
    9202:	2200      	movs	r2, #0
    9204:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9206:	68bb      	ldr	r3, [r7, #8]
    9208:	8b5b      	ldrh	r3, [r3, #26]
    920a:	b29b      	uxth	r3, r3
    920c:	001a      	movs	r2, r3
    920e:	2304      	movs	r3, #4
    9210:	4013      	ands	r3, r2
    9212:	d006      	beq.n	9222 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    9214:	230f      	movs	r3, #15
    9216:	18fb      	adds	r3, r7, r3
    9218:	221e      	movs	r2, #30
    921a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    921c:	68bb      	ldr	r3, [r7, #8]
    921e:	2204      	movs	r2, #4
    9220:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	799b      	ldrb	r3, [r3, #6]
    9226:	2b01      	cmp	r3, #1
    9228:	d108      	bne.n	923c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    922a:	68bb      	ldr	r3, [r7, #8]
    922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    922e:	b29b      	uxth	r3, r3
    9230:	05db      	lsls	r3, r3, #23
    9232:	0ddb      	lsrs	r3, r3, #23
    9234:	b29a      	uxth	r2, r3
    9236:	683b      	ldr	r3, [r7, #0]
    9238:	801a      	strh	r2, [r3, #0]
    923a:	e005      	b.n	9248 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    923c:	68bb      	ldr	r3, [r7, #8]
    923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9240:	b2db      	uxtb	r3, r3
    9242:	b29a      	uxth	r2, r3
    9244:	683b      	ldr	r3, [r7, #0]
    9246:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    9248:	230f      	movs	r3, #15
    924a:	18fb      	adds	r3, r7, r3
    924c:	781b      	ldrb	r3, [r3, #0]
}
    924e:	0018      	movs	r0, r3
    9250:	46bd      	mov	sp, r7
    9252:	b004      	add	sp, #16
    9254:	bd80      	pop	{r7, pc}
    9256:	46c0      	nop			; (mov r8, r8)
    9258:	00009165 	.word	0x00009165

0000925c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    925c:	b580      	push	{r7, lr}
    925e:	b084      	sub	sp, #16
    9260:	af00      	add	r7, sp, #0
    9262:	0002      	movs	r2, r0
    9264:	1dfb      	adds	r3, r7, #7
    9266:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9268:	230f      	movs	r3, #15
    926a:	18fb      	adds	r3, r7, r3
    926c:	1dfa      	adds	r2, r7, #7
    926e:	7812      	ldrb	r2, [r2, #0]
    9270:	0952      	lsrs	r2, r2, #5
    9272:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    9274:	230f      	movs	r3, #15
    9276:	18fb      	adds	r3, r7, r3
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	2b00      	cmp	r3, #0
    927c:	d10c      	bne.n	9298 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    927e:	4b09      	ldr	r3, [pc, #36]	; (92a4 <_extint_get_eic_from_channel+0x48>)
    9280:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    9282:	230f      	movs	r3, #15
    9284:	18fb      	adds	r3, r7, r3
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	009b      	lsls	r3, r3, #2
    928a:	2210      	movs	r2, #16
    928c:	4694      	mov	ip, r2
    928e:	44bc      	add	ip, r7
    9290:	4463      	add	r3, ip
    9292:	3b08      	subs	r3, #8
    9294:	681b      	ldr	r3, [r3, #0]
    9296:	e000      	b.n	929a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    9298:	2300      	movs	r3, #0
	}
}
    929a:	0018      	movs	r0, r3
    929c:	46bd      	mov	sp, r7
    929e:	b004      	add	sp, #16
    92a0:	bd80      	pop	{r7, pc}
    92a2:	46c0      	nop			; (mov r8, r8)
    92a4:	40002400 	.word	0x40002400

000092a8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	b084      	sub	sp, #16
    92ac:	af00      	add	r7, sp, #0
    92ae:	0002      	movs	r2, r0
    92b0:	1dfb      	adds	r3, r7, #7
    92b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    92b4:	1dfb      	adds	r3, r7, #7
    92b6:	781b      	ldrb	r3, [r3, #0]
    92b8:	0018      	movs	r0, r3
    92ba:	4b09      	ldr	r3, [pc, #36]	; (92e0 <extint_chan_clear_detected+0x38>)
    92bc:	4798      	blx	r3
    92be:	0003      	movs	r3, r0
    92c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    92c2:	1dfb      	adds	r3, r7, #7
    92c4:	781b      	ldrb	r3, [r3, #0]
    92c6:	221f      	movs	r2, #31
    92c8:	4013      	ands	r3, r2
    92ca:	2201      	movs	r2, #1
    92cc:	409a      	lsls	r2, r3
    92ce:	0013      	movs	r3, r2
    92d0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    92d2:	68fb      	ldr	r3, [r7, #12]
    92d4:	68ba      	ldr	r2, [r7, #8]
    92d6:	615a      	str	r2, [r3, #20]
}
    92d8:	46c0      	nop			; (mov r8, r8)
    92da:	46bd      	mov	sp, r7
    92dc:	b004      	add	sp, #16
    92de:	bd80      	pop	{r7, pc}
    92e0:	0000925d 	.word	0x0000925d

000092e4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    92e4:	b580      	push	{r7, lr}
    92e6:	af00      	add	r7, sp, #0
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
    92e8:	2000      	movs	r0, #0
    92ea:	4b03      	ldr	r3, [pc, #12]	; (92f8 <AT86RFX_ISR+0x14>)
    92ec:	4798      	blx	r3
	PHY_PacketReceieved();
    92ee:	4b03      	ldr	r3, [pc, #12]	; (92fc <AT86RFX_ISR+0x18>)
    92f0:	4798      	blx	r3

}
    92f2:	46c0      	nop			; (mov r8, r8)
    92f4:	46bd      	mov	sp, r7
    92f6:	bd80      	pop	{r7, pc}
    92f8:	000092a9 	.word	0x000092a9
    92fc:	0000fb59 	.word	0x0000fb59

00009300 <trx_spi_init>:

void trx_spi_init(void)
{
    9300:	b580      	push	{r7, lr}
    9302:	b084      	sub	sp, #16
    9304:	af00      	add	r7, sp, #0
	/* Initialize SPI in master_1 mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    9306:	4b2a      	ldr	r3, [pc, #168]	; (93b0 <trx_spi_init+0xb0>)
    9308:	0018      	movs	r0, r3
    930a:	4b2a      	ldr	r3, [pc, #168]	; (93b4 <trx_spi_init+0xb4>)
    930c:	4798      	blx	r3
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    930e:	4b28      	ldr	r3, [pc, #160]	; (93b0 <trx_spi_init+0xb0>)
    9310:	223f      	movs	r2, #63	; 0x3f
    9312:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    9314:	4a26      	ldr	r2, [pc, #152]	; (93b0 <trx_spi_init+0xb0>)
    9316:	4b28      	ldr	r3, [pc, #160]	; (93b8 <trx_spi_init+0xb8>)
    9318:	0011      	movs	r1, r2
    931a:	0018      	movs	r0, r3
    931c:	4b27      	ldr	r3, [pc, #156]	; (93bc <trx_spi_init+0xbc>)
    931e:	4798      	blx	r3
	spi_get_config_defaults(&config);
    9320:	4b27      	ldr	r3, [pc, #156]	; (93c0 <trx_spi_init+0xc0>)
    9322:	0018      	movs	r0, r3
    9324:	4b27      	ldr	r3, [pc, #156]	; (93c4 <trx_spi_init+0xc4>)
    9326:	4798      	blx	r3
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    9328:	4b25      	ldr	r3, [pc, #148]	; (93c0 <trx_spi_init+0xc0>)
    932a:	2280      	movs	r2, #128	; 0x80
    932c:	0252      	lsls	r2, r2, #9
    932e:	60da      	str	r2, [r3, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    9330:	4b23      	ldr	r3, [pc, #140]	; (93c0 <trx_spi_init+0xc0>)
    9332:	4a25      	ldr	r2, [pc, #148]	; (93c8 <trx_spi_init+0xc8>)
    9334:	619a      	str	r2, [r3, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    9336:	4b22      	ldr	r3, [pc, #136]	; (93c0 <trx_spi_init+0xc0>)
    9338:	4a24      	ldr	r2, [pc, #144]	; (93cc <trx_spi_init+0xcc>)
    933a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    933c:	4b20      	ldr	r3, [pc, #128]	; (93c0 <trx_spi_init+0xc0>)
    933e:	2201      	movs	r2, #1
    9340:	4252      	negs	r2, r2
    9342:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    9344:	4b1e      	ldr	r3, [pc, #120]	; (93c0 <trx_spi_init+0xc0>)
    9346:	4a22      	ldr	r2, [pc, #136]	; (93d0 <trx_spi_init+0xd0>)
    9348:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    934a:	4b1d      	ldr	r3, [pc, #116]	; (93c0 <trx_spi_init+0xc0>)
    934c:	4a21      	ldr	r2, [pc, #132]	; (93d4 <trx_spi_init+0xd4>)
    934e:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&master_1, AT86RFX_SPI, &config);
    9350:	4a1b      	ldr	r2, [pc, #108]	; (93c0 <trx_spi_init+0xc0>)
    9352:	4921      	ldr	r1, [pc, #132]	; (93d8 <trx_spi_init+0xd8>)
    9354:	4b21      	ldr	r3, [pc, #132]	; (93dc <trx_spi_init+0xdc>)
    9356:	0018      	movs	r0, r3
    9358:	4b21      	ldr	r3, [pc, #132]	; (93e0 <trx_spi_init+0xe0>)
    935a:	4798      	blx	r3
	spi_enable(&master_1);
    935c:	4b1f      	ldr	r3, [pc, #124]	; (93dc <trx_spi_init+0xdc>)
    935e:	0018      	movs	r0, r3
    9360:	4b20      	ldr	r3, [pc, #128]	; (93e4 <trx_spi_init+0xe4>)
    9362:	4798      	blx	r3

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    9364:	1d3b      	adds	r3, r7, #4
    9366:	0018      	movs	r0, r3
    9368:	4b1f      	ldr	r3, [pc, #124]	; (93e8 <trx_spi_init+0xe8>)
    936a:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    936c:	1d3b      	adds	r3, r7, #4
    936e:	2220      	movs	r2, #32
    9370:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    9372:	1d3b      	adds	r3, r7, #4
    9374:	2280      	movs	r2, #128	; 0x80
    9376:	0392      	lsls	r2, r2, #14
    9378:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    937a:	1d3b      	adds	r3, r7, #4
    937c:	2202      	movs	r2, #2
    937e:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    9380:	1d3b      	adds	r3, r7, #4
    9382:	2200      	movs	r2, #0
    9384:	725a      	strb	r2, [r3, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    9386:	1d3b      	adds	r3, r7, #4
    9388:	2200      	movs	r2, #0
    938a:	729a      	strb	r2, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    938c:	1d3b      	adds	r3, r7, #4
    938e:	2201      	movs	r2, #1
    9390:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    9392:	1d3b      	adds	r3, r7, #4
    9394:	0019      	movs	r1, r3
    9396:	2000      	movs	r0, #0
    9398:	4b14      	ldr	r3, [pc, #80]	; (93ec <trx_spi_init+0xec>)
    939a:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    939c:	4b14      	ldr	r3, [pc, #80]	; (93f0 <trx_spi_init+0xf0>)
    939e:	2200      	movs	r2, #0
    93a0:	2100      	movs	r1, #0
    93a2:	0018      	movs	r0, r3
    93a4:	4b13      	ldr	r3, [pc, #76]	; (93f4 <trx_spi_init+0xf4>)
    93a6:	4798      	blx	r3
	spi_master_1_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    93a8:	46c0      	nop			; (mov r8, r8)
    93aa:	46bd      	mov	sp, r7
    93ac:	b004      	add	sp, #16
    93ae:	bd80      	pop	{r7, pc}
    93b0:	20000ba0 	.word	0x20000ba0
    93b4:	00009059 	.word	0x00009059
    93b8:	20000ba4 	.word	0x20000ba4
    93bc:	0000907d 	.word	0x0000907d
    93c0:	20000ba8 	.word	0x20000ba8
    93c4:	00008fd5 	.word	0x00008fd5
    93c8:	003d0900 	.word	0x003d0900
    93cc:	00530005 	.word	0x00530005
    93d0:	003e0005 	.word	0x003e0005
    93d4:	00520005 	.word	0x00520005
    93d8:	42001000 	.word	0x42001000
    93dc:	20000b90 	.word	0x20000b90
    93e0:	00013365 	.word	0x00013365
    93e4:	000090e1 	.word	0x000090e1
    93e8:	00011621 	.word	0x00011621
    93ec:	00011655 	.word	0x00011655
    93f0:	000092e5 	.word	0x000092e5
    93f4:	00011159 	.word	0x00011159

000093f8 <PhyReset>:

void PhyReset(void)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	af00      	add	r7, sp, #0
	/* Ensure control lines have correct levels. */
	RST_HIGH();
    93fc:	2101      	movs	r1, #1
    93fe:	202f      	movs	r0, #47	; 0x2f
    9400:	4b0c      	ldr	r3, [pc, #48]	; (9434 <PhyReset+0x3c>)
    9402:	4798      	blx	r3
	SLP_TR_LOW();
    9404:	2100      	movs	r1, #0
    9406:	2014      	movs	r0, #20
    9408:	4b0a      	ldr	r3, [pc, #40]	; (9434 <PhyReset+0x3c>)
    940a:	4798      	blx	r3

	/* Wait typical time of timer TR1. */
	delay_us(330);
    940c:	23a5      	movs	r3, #165	; 0xa5
    940e:	005b      	lsls	r3, r3, #1
    9410:	0018      	movs	r0, r3
    9412:	4b09      	ldr	r3, [pc, #36]	; (9438 <PhyReset+0x40>)
    9414:	4798      	blx	r3

	RST_LOW();
    9416:	2100      	movs	r1, #0
    9418:	202f      	movs	r0, #47	; 0x2f
    941a:	4b06      	ldr	r3, [pc, #24]	; (9434 <PhyReset+0x3c>)
    941c:	4798      	blx	r3
	delay_us(10);
    941e:	200a      	movs	r0, #10
    9420:	4b05      	ldr	r3, [pc, #20]	; (9438 <PhyReset+0x40>)
    9422:	4798      	blx	r3
	RST_HIGH();
    9424:	2101      	movs	r1, #1
    9426:	202f      	movs	r0, #47	; 0x2f
    9428:	4b02      	ldr	r3, [pc, #8]	; (9434 <PhyReset+0x3c>)
    942a:	4798      	blx	r3
}
    942c:	46c0      	nop			; (mov r8, r8)
    942e:	46bd      	mov	sp, r7
    9430:	bd80      	pop	{r7, pc}
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	00008f61 	.word	0x00008f61
    9438:	00010d5d 	.word	0x00010d5d

0000943c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    943c:	b580      	push	{r7, lr}
    943e:	b084      	sub	sp, #16
    9440:	af00      	add	r7, sp, #0
    9442:	0002      	movs	r2, r0
    9444:	1dfb      	adds	r3, r7, #7
    9446:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    9448:	230c      	movs	r3, #12
    944a:	18fb      	adds	r3, r7, r3
    944c:	2200      	movs	r2, #0
    944e:	801a      	strh	r2, [r3, #0]
	uint8_t register_value = 0;
#endif

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    9450:	4b44      	ldr	r3, [pc, #272]	; (9564 <trx_reg_read+0x128>)
    9452:	4798      	blx	r3
    9454:	0002      	movs	r2, r0
    9456:	230f      	movs	r3, #15
    9458:	18fb      	adds	r3, r7, r3
    945a:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
    945c:	1dfb      	adds	r3, r7, #7
    945e:	1dfa      	adds	r2, r7, #7
    9460:	7812      	ldrb	r2, [r2, #0]
    9462:	2180      	movs	r1, #128	; 0x80
    9464:	4249      	negs	r1, r1
    9466:	430a      	orrs	r2, r1
    9468:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    946a:	493f      	ldr	r1, [pc, #252]	; (9568 <trx_reg_read+0x12c>)
    946c:	4b3f      	ldr	r3, [pc, #252]	; (956c <trx_reg_read+0x130>)
    946e:	2201      	movs	r2, #1
    9470:	0018      	movs	r0, r3
    9472:	4b3f      	ldr	r3, [pc, #252]	; (9570 <trx_reg_read+0x134>)
    9474:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    9476:	46c0      	nop			; (mov r8, r8)
    9478:	4b3c      	ldr	r3, [pc, #240]	; (956c <trx_reg_read+0x130>)
    947a:	0018      	movs	r0, r3
    947c:	4b3d      	ldr	r3, [pc, #244]	; (9574 <trx_reg_read+0x138>)
    947e:	4798      	blx	r3
    9480:	0003      	movs	r3, r0
    9482:	001a      	movs	r2, r3
    9484:	2301      	movs	r3, #1
    9486:	4053      	eors	r3, r2
    9488:	b2db      	uxtb	r3, r3
    948a:	2b00      	cmp	r3, #0
    948c:	d1f4      	bne.n	9478 <trx_reg_read+0x3c>
	}
	spi_write(&master_1, addr);
    948e:	1dfb      	adds	r3, r7, #7
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	b29a      	uxth	r2, r3
    9494:	4b35      	ldr	r3, [pc, #212]	; (956c <trx_reg_read+0x130>)
    9496:	0011      	movs	r1, r2
    9498:	0018      	movs	r0, r3
    949a:	4b37      	ldr	r3, [pc, #220]	; (9578 <trx_reg_read+0x13c>)
    949c:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    949e:	46c0      	nop			; (mov r8, r8)
    94a0:	4b32      	ldr	r3, [pc, #200]	; (956c <trx_reg_read+0x130>)
    94a2:	0018      	movs	r0, r3
    94a4:	4b35      	ldr	r3, [pc, #212]	; (957c <trx_reg_read+0x140>)
    94a6:	4798      	blx	r3
    94a8:	0003      	movs	r3, r0
    94aa:	001a      	movs	r2, r3
    94ac:	2301      	movs	r3, #1
    94ae:	4053      	eors	r3, r2
    94b0:	b2db      	uxtb	r3, r3
    94b2:	2b00      	cmp	r3, #0
    94b4:	d1f4      	bne.n	94a0 <trx_reg_read+0x64>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    94b6:	46c0      	nop			; (mov r8, r8)
    94b8:	4b2c      	ldr	r3, [pc, #176]	; (956c <trx_reg_read+0x130>)
    94ba:	0018      	movs	r0, r3
    94bc:	4b30      	ldr	r3, [pc, #192]	; (9580 <trx_reg_read+0x144>)
    94be:	4798      	blx	r3
    94c0:	0003      	movs	r3, r0
    94c2:	001a      	movs	r2, r3
    94c4:	2301      	movs	r3, #1
    94c6:	4053      	eors	r3, r2
    94c8:	b2db      	uxtb	r3, r3
    94ca:	2b00      	cmp	r3, #0
    94cc:	d1f4      	bne.n	94b8 <trx_reg_read+0x7c>
	}
	spi_read(&master_1, &dummy_read);
    94ce:	4a2d      	ldr	r2, [pc, #180]	; (9584 <trx_reg_read+0x148>)
    94d0:	4b26      	ldr	r3, [pc, #152]	; (956c <trx_reg_read+0x130>)
    94d2:	0011      	movs	r1, r2
    94d4:	0018      	movs	r0, r3
    94d6:	4b2c      	ldr	r3, [pc, #176]	; (9588 <trx_reg_read+0x14c>)
    94d8:	4798      	blx	r3

	while (!spi_is_ready_to_write(&master_1)) {
    94da:	46c0      	nop			; (mov r8, r8)
    94dc:	4b23      	ldr	r3, [pc, #140]	; (956c <trx_reg_read+0x130>)
    94de:	0018      	movs	r0, r3
    94e0:	4b24      	ldr	r3, [pc, #144]	; (9574 <trx_reg_read+0x138>)
    94e2:	4798      	blx	r3
    94e4:	0003      	movs	r3, r0
    94e6:	001a      	movs	r2, r3
    94e8:	2301      	movs	r3, #1
    94ea:	4053      	eors	r3, r2
    94ec:	b2db      	uxtb	r3, r3
    94ee:	2b00      	cmp	r3, #0
    94f0:	d1f4      	bne.n	94dc <trx_reg_read+0xa0>
	}
	spi_write(&master_1, 0);
    94f2:	4b1e      	ldr	r3, [pc, #120]	; (956c <trx_reg_read+0x130>)
    94f4:	2100      	movs	r1, #0
    94f6:	0018      	movs	r0, r3
    94f8:	4b1f      	ldr	r3, [pc, #124]	; (9578 <trx_reg_read+0x13c>)
    94fa:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    94fc:	46c0      	nop			; (mov r8, r8)
    94fe:	4b1b      	ldr	r3, [pc, #108]	; (956c <trx_reg_read+0x130>)
    9500:	0018      	movs	r0, r3
    9502:	4b1e      	ldr	r3, [pc, #120]	; (957c <trx_reg_read+0x140>)
    9504:	4798      	blx	r3
    9506:	0003      	movs	r3, r0
    9508:	001a      	movs	r2, r3
    950a:	2301      	movs	r3, #1
    950c:	4053      	eors	r3, r2
    950e:	b2db      	uxtb	r3, r3
    9510:	2b00      	cmp	r3, #0
    9512:	d1f4      	bne.n	94fe <trx_reg_read+0xc2>
	}
	while (!spi_is_ready_to_read(&master_1)) {
    9514:	46c0      	nop			; (mov r8, r8)
    9516:	4b15      	ldr	r3, [pc, #84]	; (956c <trx_reg_read+0x130>)
    9518:	0018      	movs	r0, r3
    951a:	4b19      	ldr	r3, [pc, #100]	; (9580 <trx_reg_read+0x144>)
    951c:	4798      	blx	r3
    951e:	0003      	movs	r3, r0
    9520:	001a      	movs	r2, r3
    9522:	2301      	movs	r3, #1
    9524:	4053      	eors	r3, r2
    9526:	b2db      	uxtb	r3, r3
    9528:	2b00      	cmp	r3, #0
    952a:	d1f4      	bne.n	9516 <trx_reg_read+0xda>
	}
	spi_read(&master_1, &register_value);
    952c:	230c      	movs	r3, #12
    952e:	18fa      	adds	r2, r7, r3
    9530:	4b0e      	ldr	r3, [pc, #56]	; (956c <trx_reg_read+0x130>)
    9532:	0011      	movs	r1, r2
    9534:	0018      	movs	r0, r3
    9536:	4b14      	ldr	r3, [pc, #80]	; (9588 <trx_reg_read+0x14c>)
    9538:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    953a:	490b      	ldr	r1, [pc, #44]	; (9568 <trx_reg_read+0x12c>)
    953c:	4b0b      	ldr	r3, [pc, #44]	; (956c <trx_reg_read+0x130>)
    953e:	2200      	movs	r2, #0
    9540:	0018      	movs	r0, r3
    9542:	4b0b      	ldr	r3, [pc, #44]	; (9570 <trx_reg_read+0x134>)
    9544:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    9546:	230f      	movs	r3, #15
    9548:	18fb      	adds	r3, r7, r3
    954a:	781b      	ldrb	r3, [r3, #0]
    954c:	0018      	movs	r0, r3
    954e:	4b0f      	ldr	r3, [pc, #60]	; (958c <trx_reg_read+0x150>)
    9550:	4798      	blx	r3

	return register_value;
    9552:	230c      	movs	r3, #12
    9554:	18fb      	adds	r3, r7, r3
    9556:	881b      	ldrh	r3, [r3, #0]
    9558:	b2db      	uxtb	r3, r3
}
    955a:	0018      	movs	r0, r3
    955c:	46bd      	mov	sp, r7
    955e:	b004      	add	sp, #16
    9560:	bd80      	pop	{r7, pc}
    9562:	46c0      	nop			; (mov r8, r8)
    9564:	00008e41 	.word	0x00008e41
    9568:	20000ba4 	.word	0x20000ba4
    956c:	20000b90 	.word	0x20000b90
    9570:	0001347d 	.word	0x0001347d
    9574:	0000913d 	.word	0x0000913d
    9578:	0000918d 	.word	0x0000918d
    957c:	00009115 	.word	0x00009115
    9580:	00009165 	.word	0x00009165
    9584:	20000b9c 	.word	0x20000b9c
    9588:	000091d5 	.word	0x000091d5
    958c:	00008e89 	.word	0x00008e89

00009590 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    9590:	b580      	push	{r7, lr}
    9592:	b084      	sub	sp, #16
    9594:	af00      	add	r7, sp, #0
    9596:	0002      	movs	r2, r0
    9598:	1dfb      	adds	r3, r7, #7
    959a:	701a      	strb	r2, [r3, #0]
    959c:	1dbb      	adds	r3, r7, #6
    959e:	1c0a      	adds	r2, r1, #0
    95a0:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    95a2:	4b43      	ldr	r3, [pc, #268]	; (96b0 <trx_reg_write+0x120>)
    95a4:	4798      	blx	r3
    95a6:	0002      	movs	r2, r0
    95a8:	230f      	movs	r3, #15
    95aa:	18fb      	adds	r3, r7, r3
    95ac:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
    95ae:	1dfb      	adds	r3, r7, #7
    95b0:	1dfa      	adds	r2, r7, #7
    95b2:	7812      	ldrb	r2, [r2, #0]
    95b4:	2140      	movs	r1, #64	; 0x40
    95b6:	4249      	negs	r1, r1
    95b8:	430a      	orrs	r2, r1
    95ba:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    95bc:	493d      	ldr	r1, [pc, #244]	; (96b4 <trx_reg_write+0x124>)
    95be:	4b3e      	ldr	r3, [pc, #248]	; (96b8 <trx_reg_write+0x128>)
    95c0:	2201      	movs	r2, #1
    95c2:	0018      	movs	r0, r3
    95c4:	4b3d      	ldr	r3, [pc, #244]	; (96bc <trx_reg_write+0x12c>)
    95c6:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    95c8:	46c0      	nop			; (mov r8, r8)
    95ca:	4b3b      	ldr	r3, [pc, #236]	; (96b8 <trx_reg_write+0x128>)
    95cc:	0018      	movs	r0, r3
    95ce:	4b3c      	ldr	r3, [pc, #240]	; (96c0 <trx_reg_write+0x130>)
    95d0:	4798      	blx	r3
    95d2:	0003      	movs	r3, r0
    95d4:	001a      	movs	r2, r3
    95d6:	2301      	movs	r3, #1
    95d8:	4053      	eors	r3, r2
    95da:	b2db      	uxtb	r3, r3
    95dc:	2b00      	cmp	r3, #0
    95de:	d1f4      	bne.n	95ca <trx_reg_write+0x3a>
	}
	spi_write(&master_1, addr);
    95e0:	1dfb      	adds	r3, r7, #7
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	b29a      	uxth	r2, r3
    95e6:	4b34      	ldr	r3, [pc, #208]	; (96b8 <trx_reg_write+0x128>)
    95e8:	0011      	movs	r1, r2
    95ea:	0018      	movs	r0, r3
    95ec:	4b35      	ldr	r3, [pc, #212]	; (96c4 <trx_reg_write+0x134>)
    95ee:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    95f0:	46c0      	nop			; (mov r8, r8)
    95f2:	4b31      	ldr	r3, [pc, #196]	; (96b8 <trx_reg_write+0x128>)
    95f4:	0018      	movs	r0, r3
    95f6:	4b34      	ldr	r3, [pc, #208]	; (96c8 <trx_reg_write+0x138>)
    95f8:	4798      	blx	r3
    95fa:	0003      	movs	r3, r0
    95fc:	001a      	movs	r2, r3
    95fe:	2301      	movs	r3, #1
    9600:	4053      	eors	r3, r2
    9602:	b2db      	uxtb	r3, r3
    9604:	2b00      	cmp	r3, #0
    9606:	d1f4      	bne.n	95f2 <trx_reg_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9608:	46c0      	nop			; (mov r8, r8)
    960a:	4b2b      	ldr	r3, [pc, #172]	; (96b8 <trx_reg_write+0x128>)
    960c:	0018      	movs	r0, r3
    960e:	4b2f      	ldr	r3, [pc, #188]	; (96cc <trx_reg_write+0x13c>)
    9610:	4798      	blx	r3
    9612:	0003      	movs	r3, r0
    9614:	001a      	movs	r2, r3
    9616:	2301      	movs	r3, #1
    9618:	4053      	eors	r3, r2
    961a:	b2db      	uxtb	r3, r3
    961c:	2b00      	cmp	r3, #0
    961e:	d1f4      	bne.n	960a <trx_reg_write+0x7a>
	}
	spi_read(&master_1, &dummy_read);
    9620:	4a2b      	ldr	r2, [pc, #172]	; (96d0 <trx_reg_write+0x140>)
    9622:	4b25      	ldr	r3, [pc, #148]	; (96b8 <trx_reg_write+0x128>)
    9624:	0011      	movs	r1, r2
    9626:	0018      	movs	r0, r3
    9628:	4b2a      	ldr	r3, [pc, #168]	; (96d4 <trx_reg_write+0x144>)
    962a:	4798      	blx	r3

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master_1)) {
    962c:	46c0      	nop			; (mov r8, r8)
    962e:	4b22      	ldr	r3, [pc, #136]	; (96b8 <trx_reg_write+0x128>)
    9630:	0018      	movs	r0, r3
    9632:	4b23      	ldr	r3, [pc, #140]	; (96c0 <trx_reg_write+0x130>)
    9634:	4798      	blx	r3
    9636:	0003      	movs	r3, r0
    9638:	001a      	movs	r2, r3
    963a:	2301      	movs	r3, #1
    963c:	4053      	eors	r3, r2
    963e:	b2db      	uxtb	r3, r3
    9640:	2b00      	cmp	r3, #0
    9642:	d1f4      	bne.n	962e <trx_reg_write+0x9e>
	}
	spi_write(&master_1, data);
    9644:	1dbb      	adds	r3, r7, #6
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	b29a      	uxth	r2, r3
    964a:	4b1b      	ldr	r3, [pc, #108]	; (96b8 <trx_reg_write+0x128>)
    964c:	0011      	movs	r1, r2
    964e:	0018      	movs	r0, r3
    9650:	4b1c      	ldr	r3, [pc, #112]	; (96c4 <trx_reg_write+0x134>)
    9652:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9654:	46c0      	nop			; (mov r8, r8)
    9656:	4b18      	ldr	r3, [pc, #96]	; (96b8 <trx_reg_write+0x128>)
    9658:	0018      	movs	r0, r3
    965a:	4b1b      	ldr	r3, [pc, #108]	; (96c8 <trx_reg_write+0x138>)
    965c:	4798      	blx	r3
    965e:	0003      	movs	r3, r0
    9660:	001a      	movs	r2, r3
    9662:	2301      	movs	r3, #1
    9664:	4053      	eors	r3, r2
    9666:	b2db      	uxtb	r3, r3
    9668:	2b00      	cmp	r3, #0
    966a:	d1f4      	bne.n	9656 <trx_reg_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    966c:	46c0      	nop			; (mov r8, r8)
    966e:	4b12      	ldr	r3, [pc, #72]	; (96b8 <trx_reg_write+0x128>)
    9670:	0018      	movs	r0, r3
    9672:	4b16      	ldr	r3, [pc, #88]	; (96cc <trx_reg_write+0x13c>)
    9674:	4798      	blx	r3
    9676:	0003      	movs	r3, r0
    9678:	001a      	movs	r2, r3
    967a:	2301      	movs	r3, #1
    967c:	4053      	eors	r3, r2
    967e:	b2db      	uxtb	r3, r3
    9680:	2b00      	cmp	r3, #0
    9682:	d1f4      	bne.n	966e <trx_reg_write+0xde>
	}
	spi_read(&master_1, &dummy_read);
    9684:	4a12      	ldr	r2, [pc, #72]	; (96d0 <trx_reg_write+0x140>)
    9686:	4b0c      	ldr	r3, [pc, #48]	; (96b8 <trx_reg_write+0x128>)
    9688:	0011      	movs	r1, r2
    968a:	0018      	movs	r0, r3
    968c:	4b11      	ldr	r3, [pc, #68]	; (96d4 <trx_reg_write+0x144>)
    968e:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    9690:	4908      	ldr	r1, [pc, #32]	; (96b4 <trx_reg_write+0x124>)
    9692:	4b09      	ldr	r3, [pc, #36]	; (96b8 <trx_reg_write+0x128>)
    9694:	2200      	movs	r2, #0
    9696:	0018      	movs	r0, r3
    9698:	4b08      	ldr	r3, [pc, #32]	; (96bc <trx_reg_write+0x12c>)
    969a:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    969c:	230f      	movs	r3, #15
    969e:	18fb      	adds	r3, r7, r3
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	0018      	movs	r0, r3
    96a4:	4b0c      	ldr	r3, [pc, #48]	; (96d8 <trx_reg_write+0x148>)
    96a6:	4798      	blx	r3
}
    96a8:	46c0      	nop			; (mov r8, r8)
    96aa:	46bd      	mov	sp, r7
    96ac:	b004      	add	sp, #16
    96ae:	bd80      	pop	{r7, pc}
    96b0:	00008e41 	.word	0x00008e41
    96b4:	20000ba4 	.word	0x20000ba4
    96b8:	20000b90 	.word	0x20000b90
    96bc:	0001347d 	.word	0x0001347d
    96c0:	0000913d 	.word	0x0000913d
    96c4:	0000918d 	.word	0x0000918d
    96c8:	00009115 	.word	0x00009115
    96cc:	00009165 	.word	0x00009165
    96d0:	20000b9c 	.word	0x20000b9c
    96d4:	000091d5 	.word	0x000091d5
    96d8:	00008e89 	.word	0x00008e89

000096dc <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    96dc:	b580      	push	{r7, lr}
    96de:	b084      	sub	sp, #16
    96e0:	af00      	add	r7, sp, #0
    96e2:	6078      	str	r0, [r7, #4]
    96e4:	000a      	movs	r2, r1
    96e6:	1cfb      	adds	r3, r7, #3
    96e8:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    96ea:	4b49      	ldr	r3, [pc, #292]	; (9810 <trx_frame_read+0x134>)
    96ec:	4798      	blx	r3
    96ee:	0002      	movs	r2, r0
    96f0:	230f      	movs	r3, #15
    96f2:	18fb      	adds	r3, r7, r3
    96f4:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    96f6:	4947      	ldr	r1, [pc, #284]	; (9814 <trx_frame_read+0x138>)
    96f8:	4b47      	ldr	r3, [pc, #284]	; (9818 <trx_frame_read+0x13c>)
    96fa:	2201      	movs	r2, #1
    96fc:	0018      	movs	r0, r3
    96fe:	4b47      	ldr	r3, [pc, #284]	; (981c <trx_frame_read+0x140>)
    9700:	4798      	blx	r3

	temp = TRX_CMD_FR;
    9702:	230c      	movs	r3, #12
    9704:	18fb      	adds	r3, r7, r3
    9706:	2220      	movs	r2, #32
    9708:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	4b42      	ldr	r3, [pc, #264]	; (9818 <trx_frame_read+0x13c>)
    970e:	0018      	movs	r0, r3
    9710:	4b43      	ldr	r3, [pc, #268]	; (9820 <trx_frame_read+0x144>)
    9712:	4798      	blx	r3
    9714:	0003      	movs	r3, r0
    9716:	001a      	movs	r2, r3
    9718:	2301      	movs	r3, #1
    971a:	4053      	eors	r3, r2
    971c:	b2db      	uxtb	r3, r3
    971e:	2b00      	cmp	r3, #0
    9720:	d1f4      	bne.n	970c <trx_frame_read+0x30>
	}
	spi_write(&master_1, temp);
    9722:	230c      	movs	r3, #12
    9724:	18fb      	adds	r3, r7, r3
    9726:	881a      	ldrh	r2, [r3, #0]
    9728:	4b3b      	ldr	r3, [pc, #236]	; (9818 <trx_frame_read+0x13c>)
    972a:	0011      	movs	r1, r2
    972c:	0018      	movs	r0, r3
    972e:	4b3d      	ldr	r3, [pc, #244]	; (9824 <trx_frame_read+0x148>)
    9730:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9732:	46c0      	nop			; (mov r8, r8)
    9734:	4b38      	ldr	r3, [pc, #224]	; (9818 <trx_frame_read+0x13c>)
    9736:	0018      	movs	r0, r3
    9738:	4b3b      	ldr	r3, [pc, #236]	; (9828 <trx_frame_read+0x14c>)
    973a:	4798      	blx	r3
    973c:	0003      	movs	r3, r0
    973e:	001a      	movs	r2, r3
    9740:	2301      	movs	r3, #1
    9742:	4053      	eors	r3, r2
    9744:	b2db      	uxtb	r3, r3
    9746:	2b00      	cmp	r3, #0
    9748:	d1f4      	bne.n	9734 <trx_frame_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    974a:	46c0      	nop			; (mov r8, r8)
    974c:	4b32      	ldr	r3, [pc, #200]	; (9818 <trx_frame_read+0x13c>)
    974e:	0018      	movs	r0, r3
    9750:	4b36      	ldr	r3, [pc, #216]	; (982c <trx_frame_read+0x150>)
    9752:	4798      	blx	r3
    9754:	0003      	movs	r3, r0
    9756:	001a      	movs	r2, r3
    9758:	2301      	movs	r3, #1
    975a:	4053      	eors	r3, r2
    975c:	b2db      	uxtb	r3, r3
    975e:	2b00      	cmp	r3, #0
    9760:	d1f4      	bne.n	974c <trx_frame_read+0x70>
	}
	spi_read(&master_1, &dummy_read);
    9762:	4a33      	ldr	r2, [pc, #204]	; (9830 <trx_frame_read+0x154>)
    9764:	4b2c      	ldr	r3, [pc, #176]	; (9818 <trx_frame_read+0x13c>)
    9766:	0011      	movs	r1, r2
    9768:	0018      	movs	r0, r3
    976a:	4b32      	ldr	r3, [pc, #200]	; (9834 <trx_frame_read+0x158>)
    976c:	4798      	blx	r3

	while (length--) {
    976e:	e038      	b.n	97e2 <trx_frame_read+0x106>
		while (!spi_is_ready_to_write(&master_1)) {
    9770:	46c0      	nop			; (mov r8, r8)
    9772:	4b29      	ldr	r3, [pc, #164]	; (9818 <trx_frame_read+0x13c>)
    9774:	0018      	movs	r0, r3
    9776:	4b2a      	ldr	r3, [pc, #168]	; (9820 <trx_frame_read+0x144>)
    9778:	4798      	blx	r3
    977a:	0003      	movs	r3, r0
    977c:	001a      	movs	r2, r3
    977e:	2301      	movs	r3, #1
    9780:	4053      	eors	r3, r2
    9782:	b2db      	uxtb	r3, r3
    9784:	2b00      	cmp	r3, #0
    9786:	d1f4      	bne.n	9772 <trx_frame_read+0x96>
		}
		spi_write(&master_1, 0);
    9788:	4b23      	ldr	r3, [pc, #140]	; (9818 <trx_frame_read+0x13c>)
    978a:	2100      	movs	r1, #0
    978c:	0018      	movs	r0, r3
    978e:	4b25      	ldr	r3, [pc, #148]	; (9824 <trx_frame_read+0x148>)
    9790:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    9792:	46c0      	nop			; (mov r8, r8)
    9794:	4b20      	ldr	r3, [pc, #128]	; (9818 <trx_frame_read+0x13c>)
    9796:	0018      	movs	r0, r3
    9798:	4b23      	ldr	r3, [pc, #140]	; (9828 <trx_frame_read+0x14c>)
    979a:	4798      	blx	r3
    979c:	0003      	movs	r3, r0
    979e:	001a      	movs	r2, r3
    97a0:	2301      	movs	r3, #1
    97a2:	4053      	eors	r3, r2
    97a4:	b2db      	uxtb	r3, r3
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1f4      	bne.n	9794 <trx_frame_read+0xb8>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    97aa:	46c0      	nop			; (mov r8, r8)
    97ac:	4b1a      	ldr	r3, [pc, #104]	; (9818 <trx_frame_read+0x13c>)
    97ae:	0018      	movs	r0, r3
    97b0:	4b1e      	ldr	r3, [pc, #120]	; (982c <trx_frame_read+0x150>)
    97b2:	4798      	blx	r3
    97b4:	0003      	movs	r3, r0
    97b6:	001a      	movs	r2, r3
    97b8:	2301      	movs	r3, #1
    97ba:	4053      	eors	r3, r2
    97bc:	b2db      	uxtb	r3, r3
    97be:	2b00      	cmp	r3, #0
    97c0:	d1f4      	bne.n	97ac <trx_frame_read+0xd0>
		}
		spi_read(&master_1, &temp);
    97c2:	230c      	movs	r3, #12
    97c4:	18fa      	adds	r2, r7, r3
    97c6:	4b14      	ldr	r3, [pc, #80]	; (9818 <trx_frame_read+0x13c>)
    97c8:	0011      	movs	r1, r2
    97ca:	0018      	movs	r0, r3
    97cc:	4b19      	ldr	r3, [pc, #100]	; (9834 <trx_frame_read+0x158>)
    97ce:	4798      	blx	r3
		*data = temp;
    97d0:	230c      	movs	r3, #12
    97d2:	18fb      	adds	r3, r7, r3
    97d4:	881b      	ldrh	r3, [r3, #0]
    97d6:	b2da      	uxtb	r2, r3
    97d8:	687b      	ldr	r3, [r7, #4]
    97da:	701a      	strb	r2, [r3, #0]
		data++;
    97dc:	687b      	ldr	r3, [r7, #4]
    97de:	3301      	adds	r3, #1
    97e0:	607b      	str	r3, [r7, #4]
	while (length--) {
    97e2:	1cfb      	adds	r3, r7, #3
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	1cfa      	adds	r2, r7, #3
    97e8:	1e59      	subs	r1, r3, #1
    97ea:	7011      	strb	r1, [r2, #0]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d1bf      	bne.n	9770 <trx_frame_read+0x94>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    97f0:	4908      	ldr	r1, [pc, #32]	; (9814 <trx_frame_read+0x138>)
    97f2:	4b09      	ldr	r3, [pc, #36]	; (9818 <trx_frame_read+0x13c>)
    97f4:	2200      	movs	r2, #0
    97f6:	0018      	movs	r0, r3
    97f8:	4b08      	ldr	r3, [pc, #32]	; (981c <trx_frame_read+0x140>)
    97fa:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    97fc:	230f      	movs	r3, #15
    97fe:	18fb      	adds	r3, r7, r3
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	0018      	movs	r0, r3
    9804:	4b0c      	ldr	r3, [pc, #48]	; (9838 <trx_frame_read+0x15c>)
    9806:	4798      	blx	r3
}
    9808:	46c0      	nop			; (mov r8, r8)
    980a:	46bd      	mov	sp, r7
    980c:	b004      	add	sp, #16
    980e:	bd80      	pop	{r7, pc}
    9810:	00008e41 	.word	0x00008e41
    9814:	20000ba4 	.word	0x20000ba4
    9818:	20000b90 	.word	0x20000b90
    981c:	0001347d 	.word	0x0001347d
    9820:	0000913d 	.word	0x0000913d
    9824:	0000918d 	.word	0x0000918d
    9828:	00009115 	.word	0x00009115
    982c:	00009165 	.word	0x00009165
    9830:	20000b9c 	.word	0x20000b9c
    9834:	000091d5 	.word	0x000091d5
    9838:	00008e89 	.word	0x00008e89

0000983c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    983c:	b580      	push	{r7, lr}
    983e:	b084      	sub	sp, #16
    9840:	af00      	add	r7, sp, #0
    9842:	6078      	str	r0, [r7, #4]
    9844:	000a      	movs	r2, r1
    9846:	1cfb      	adds	r3, r7, #3
    9848:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    984a:	4b47      	ldr	r3, [pc, #284]	; (9968 <trx_frame_write+0x12c>)
    984c:	4798      	blx	r3
    984e:	0002      	movs	r2, r0
    9850:	230f      	movs	r3, #15
    9852:	18fb      	adds	r3, r7, r3
    9854:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    9856:	4945      	ldr	r1, [pc, #276]	; (996c <trx_frame_write+0x130>)
    9858:	4b45      	ldr	r3, [pc, #276]	; (9970 <trx_frame_write+0x134>)
    985a:	2201      	movs	r2, #1
    985c:	0018      	movs	r0, r3
    985e:	4b45      	ldr	r3, [pc, #276]	; (9974 <trx_frame_write+0x138>)
    9860:	4798      	blx	r3

	temp = TRX_CMD_FW;
    9862:	230e      	movs	r3, #14
    9864:	18fb      	adds	r3, r7, r3
    9866:	2260      	movs	r2, #96	; 0x60
    9868:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    986a:	46c0      	nop			; (mov r8, r8)
    986c:	4b40      	ldr	r3, [pc, #256]	; (9970 <trx_frame_write+0x134>)
    986e:	0018      	movs	r0, r3
    9870:	4b41      	ldr	r3, [pc, #260]	; (9978 <trx_frame_write+0x13c>)
    9872:	4798      	blx	r3
    9874:	0003      	movs	r3, r0
    9876:	001a      	movs	r2, r3
    9878:	2301      	movs	r3, #1
    987a:	4053      	eors	r3, r2
    987c:	b2db      	uxtb	r3, r3
    987e:	2b00      	cmp	r3, #0
    9880:	d1f4      	bne.n	986c <trx_frame_write+0x30>
	}
	spi_write(&master_1, temp);
    9882:	230e      	movs	r3, #14
    9884:	18fb      	adds	r3, r7, r3
    9886:	781b      	ldrb	r3, [r3, #0]
    9888:	b29a      	uxth	r2, r3
    988a:	4b39      	ldr	r3, [pc, #228]	; (9970 <trx_frame_write+0x134>)
    988c:	0011      	movs	r1, r2
    988e:	0018      	movs	r0, r3
    9890:	4b3a      	ldr	r3, [pc, #232]	; (997c <trx_frame_write+0x140>)
    9892:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9894:	46c0      	nop			; (mov r8, r8)
    9896:	4b36      	ldr	r3, [pc, #216]	; (9970 <trx_frame_write+0x134>)
    9898:	0018      	movs	r0, r3
    989a:	4b39      	ldr	r3, [pc, #228]	; (9980 <trx_frame_write+0x144>)
    989c:	4798      	blx	r3
    989e:	0003      	movs	r3, r0
    98a0:	001a      	movs	r2, r3
    98a2:	2301      	movs	r3, #1
    98a4:	4053      	eors	r3, r2
    98a6:	b2db      	uxtb	r3, r3
    98a8:	2b00      	cmp	r3, #0
    98aa:	d1f4      	bne.n	9896 <trx_frame_write+0x5a>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    98ac:	46c0      	nop			; (mov r8, r8)
    98ae:	4b30      	ldr	r3, [pc, #192]	; (9970 <trx_frame_write+0x134>)
    98b0:	0018      	movs	r0, r3
    98b2:	4b34      	ldr	r3, [pc, #208]	; (9984 <trx_frame_write+0x148>)
    98b4:	4798      	blx	r3
    98b6:	0003      	movs	r3, r0
    98b8:	001a      	movs	r2, r3
    98ba:	2301      	movs	r3, #1
    98bc:	4053      	eors	r3, r2
    98be:	b2db      	uxtb	r3, r3
    98c0:	2b00      	cmp	r3, #0
    98c2:	d1f4      	bne.n	98ae <trx_frame_write+0x72>
	}
	spi_read(&master_1, &dummy_read);
    98c4:	4a30      	ldr	r2, [pc, #192]	; (9988 <trx_frame_write+0x14c>)
    98c6:	4b2a      	ldr	r3, [pc, #168]	; (9970 <trx_frame_write+0x134>)
    98c8:	0011      	movs	r1, r2
    98ca:	0018      	movs	r0, r3
    98cc:	4b2f      	ldr	r3, [pc, #188]	; (998c <trx_frame_write+0x150>)
    98ce:	4798      	blx	r3
	while (length--) {
    98d0:	e033      	b.n	993a <trx_frame_write+0xfe>
		while (!spi_is_ready_to_write(&master_1)) {
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	4b26      	ldr	r3, [pc, #152]	; (9970 <trx_frame_write+0x134>)
    98d6:	0018      	movs	r0, r3
    98d8:	4b27      	ldr	r3, [pc, #156]	; (9978 <trx_frame_write+0x13c>)
    98da:	4798      	blx	r3
    98dc:	0003      	movs	r3, r0
    98de:	001a      	movs	r2, r3
    98e0:	2301      	movs	r3, #1
    98e2:	4053      	eors	r3, r2
    98e4:	b2db      	uxtb	r3, r3
    98e6:	2b00      	cmp	r3, #0
    98e8:	d1f4      	bne.n	98d4 <trx_frame_write+0x98>
		}
		spi_write(&master_1, *data++);
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	1c5a      	adds	r2, r3, #1
    98ee:	607a      	str	r2, [r7, #4]
    98f0:	781b      	ldrb	r3, [r3, #0]
    98f2:	b29a      	uxth	r2, r3
    98f4:	4b1e      	ldr	r3, [pc, #120]	; (9970 <trx_frame_write+0x134>)
    98f6:	0011      	movs	r1, r2
    98f8:	0018      	movs	r0, r3
    98fa:	4b20      	ldr	r3, [pc, #128]	; (997c <trx_frame_write+0x140>)
    98fc:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	4b1b      	ldr	r3, [pc, #108]	; (9970 <trx_frame_write+0x134>)
    9902:	0018      	movs	r0, r3
    9904:	4b1e      	ldr	r3, [pc, #120]	; (9980 <trx_frame_write+0x144>)
    9906:	4798      	blx	r3
    9908:	0003      	movs	r3, r0
    990a:	001a      	movs	r2, r3
    990c:	2301      	movs	r3, #1
    990e:	4053      	eors	r3, r2
    9910:	b2db      	uxtb	r3, r3
    9912:	2b00      	cmp	r3, #0
    9914:	d1f4      	bne.n	9900 <trx_frame_write+0xc4>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    9916:	46c0      	nop			; (mov r8, r8)
    9918:	4b15      	ldr	r3, [pc, #84]	; (9970 <trx_frame_write+0x134>)
    991a:	0018      	movs	r0, r3
    991c:	4b19      	ldr	r3, [pc, #100]	; (9984 <trx_frame_write+0x148>)
    991e:	4798      	blx	r3
    9920:	0003      	movs	r3, r0
    9922:	001a      	movs	r2, r3
    9924:	2301      	movs	r3, #1
    9926:	4053      	eors	r3, r2
    9928:	b2db      	uxtb	r3, r3
    992a:	2b00      	cmp	r3, #0
    992c:	d1f4      	bne.n	9918 <trx_frame_write+0xdc>
		}
		spi_read(&master_1, &dummy_read);
    992e:	4a16      	ldr	r2, [pc, #88]	; (9988 <trx_frame_write+0x14c>)
    9930:	4b0f      	ldr	r3, [pc, #60]	; (9970 <trx_frame_write+0x134>)
    9932:	0011      	movs	r1, r2
    9934:	0018      	movs	r0, r3
    9936:	4b15      	ldr	r3, [pc, #84]	; (998c <trx_frame_write+0x150>)
    9938:	4798      	blx	r3
	while (length--) {
    993a:	1cfb      	adds	r3, r7, #3
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	1cfa      	adds	r2, r7, #3
    9940:	1e59      	subs	r1, r3, #1
    9942:	7011      	strb	r1, [r2, #0]
    9944:	2b00      	cmp	r3, #0
    9946:	d1c4      	bne.n	98d2 <trx_frame_write+0x96>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    9948:	4908      	ldr	r1, [pc, #32]	; (996c <trx_frame_write+0x130>)
    994a:	4b09      	ldr	r3, [pc, #36]	; (9970 <trx_frame_write+0x134>)
    994c:	2200      	movs	r2, #0
    994e:	0018      	movs	r0, r3
    9950:	4b08      	ldr	r3, [pc, #32]	; (9974 <trx_frame_write+0x138>)
    9952:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    9954:	230f      	movs	r3, #15
    9956:	18fb      	adds	r3, r7, r3
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	0018      	movs	r0, r3
    995c:	4b0c      	ldr	r3, [pc, #48]	; (9990 <trx_frame_write+0x154>)
    995e:	4798      	blx	r3
}
    9960:	46c0      	nop			; (mov r8, r8)
    9962:	46bd      	mov	sp, r7
    9964:	b004      	add	sp, #16
    9966:	bd80      	pop	{r7, pc}
    9968:	00008e41 	.word	0x00008e41
    996c:	20000ba4 	.word	0x20000ba4
    9970:	20000b90 	.word	0x20000b90
    9974:	0001347d 	.word	0x0001347d
    9978:	0000913d 	.word	0x0000913d
    997c:	0000918d 	.word	0x0000918d
    9980:	00009115 	.word	0x00009115
    9984:	00009165 	.word	0x00009165
    9988:	20000b9c 	.word	0x20000b9c
    998c:	000091d5 	.word	0x000091d5
    9990:	00008e89 	.word	0x00008e89

00009994 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    9994:	b580      	push	{r7, lr}
    9996:	b084      	sub	sp, #16
    9998:	af00      	add	r7, sp, #0
    999a:	6039      	str	r1, [r7, #0]
    999c:	0011      	movs	r1, r2
    999e:	1dfb      	adds	r3, r7, #7
    99a0:	1c02      	adds	r2, r0, #0
    99a2:	701a      	strb	r2, [r3, #0]
    99a4:	1dbb      	adds	r3, r7, #6
    99a6:	1c0a      	adds	r2, r1, #0
    99a8:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    99aa:	4b60      	ldr	r3, [pc, #384]	; (9b2c <trx_sram_write+0x198>)
    99ac:	4798      	blx	r3
    99ae:	0002      	movs	r2, r0
    99b0:	230f      	movs	r3, #15
    99b2:	18fb      	adds	r3, r7, r3
    99b4:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    99b6:	495e      	ldr	r1, [pc, #376]	; (9b30 <trx_sram_write+0x19c>)
    99b8:	4b5e      	ldr	r3, [pc, #376]	; (9b34 <trx_sram_write+0x1a0>)
    99ba:	2201      	movs	r2, #1
    99bc:	0018      	movs	r0, r3
    99be:	4b5e      	ldr	r3, [pc, #376]	; (9b38 <trx_sram_write+0x1a4>)
    99c0:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    99c2:	230e      	movs	r3, #14
    99c4:	18fb      	adds	r3, r7, r3
    99c6:	2240      	movs	r2, #64	; 0x40
    99c8:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    99ca:	46c0      	nop			; (mov r8, r8)
    99cc:	4b59      	ldr	r3, [pc, #356]	; (9b34 <trx_sram_write+0x1a0>)
    99ce:	0018      	movs	r0, r3
    99d0:	4b5a      	ldr	r3, [pc, #360]	; (9b3c <trx_sram_write+0x1a8>)
    99d2:	4798      	blx	r3
    99d4:	0003      	movs	r3, r0
    99d6:	001a      	movs	r2, r3
    99d8:	2301      	movs	r3, #1
    99da:	4053      	eors	r3, r2
    99dc:	b2db      	uxtb	r3, r3
    99de:	2b00      	cmp	r3, #0
    99e0:	d1f4      	bne.n	99cc <trx_sram_write+0x38>
	}
	spi_write(&master_1, temp);
    99e2:	230e      	movs	r3, #14
    99e4:	18fb      	adds	r3, r7, r3
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	b29a      	uxth	r2, r3
    99ea:	4b52      	ldr	r3, [pc, #328]	; (9b34 <trx_sram_write+0x1a0>)
    99ec:	0011      	movs	r1, r2
    99ee:	0018      	movs	r0, r3
    99f0:	4b53      	ldr	r3, [pc, #332]	; (9b40 <trx_sram_write+0x1ac>)
    99f2:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    99f4:	46c0      	nop			; (mov r8, r8)
    99f6:	4b4f      	ldr	r3, [pc, #316]	; (9b34 <trx_sram_write+0x1a0>)
    99f8:	0018      	movs	r0, r3
    99fa:	4b52      	ldr	r3, [pc, #328]	; (9b44 <trx_sram_write+0x1b0>)
    99fc:	4798      	blx	r3
    99fe:	0003      	movs	r3, r0
    9a00:	001a      	movs	r2, r3
    9a02:	2301      	movs	r3, #1
    9a04:	4053      	eors	r3, r2
    9a06:	b2db      	uxtb	r3, r3
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d1f4      	bne.n	99f6 <trx_sram_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9a0c:	46c0      	nop			; (mov r8, r8)
    9a0e:	4b49      	ldr	r3, [pc, #292]	; (9b34 <trx_sram_write+0x1a0>)
    9a10:	0018      	movs	r0, r3
    9a12:	4b4d      	ldr	r3, [pc, #308]	; (9b48 <trx_sram_write+0x1b4>)
    9a14:	4798      	blx	r3
    9a16:	0003      	movs	r3, r0
    9a18:	001a      	movs	r2, r3
    9a1a:	2301      	movs	r3, #1
    9a1c:	4053      	eors	r3, r2
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	2b00      	cmp	r3, #0
    9a22:	d1f4      	bne.n	9a0e <trx_sram_write+0x7a>
	}
	spi_read(&master_1, &dummy_read);
    9a24:	4a49      	ldr	r2, [pc, #292]	; (9b4c <trx_sram_write+0x1b8>)
    9a26:	4b43      	ldr	r3, [pc, #268]	; (9b34 <trx_sram_write+0x1a0>)
    9a28:	0011      	movs	r1, r2
    9a2a:	0018      	movs	r0, r3
    9a2c:	4b48      	ldr	r3, [pc, #288]	; (9b50 <trx_sram_write+0x1bc>)
    9a2e:	4798      	blx	r3

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master_1)) {
    9a30:	46c0      	nop			; (mov r8, r8)
    9a32:	4b40      	ldr	r3, [pc, #256]	; (9b34 <trx_sram_write+0x1a0>)
    9a34:	0018      	movs	r0, r3
    9a36:	4b41      	ldr	r3, [pc, #260]	; (9b3c <trx_sram_write+0x1a8>)
    9a38:	4798      	blx	r3
    9a3a:	0003      	movs	r3, r0
    9a3c:	001a      	movs	r2, r3
    9a3e:	2301      	movs	r3, #1
    9a40:	4053      	eors	r3, r2
    9a42:	b2db      	uxtb	r3, r3
    9a44:	2b00      	cmp	r3, #0
    9a46:	d1f4      	bne.n	9a32 <trx_sram_write+0x9e>
	}
	spi_write(&master_1, addr);
    9a48:	1dfb      	adds	r3, r7, #7
    9a4a:	781b      	ldrb	r3, [r3, #0]
    9a4c:	b29a      	uxth	r2, r3
    9a4e:	4b39      	ldr	r3, [pc, #228]	; (9b34 <trx_sram_write+0x1a0>)
    9a50:	0011      	movs	r1, r2
    9a52:	0018      	movs	r0, r3
    9a54:	4b3a      	ldr	r3, [pc, #232]	; (9b40 <trx_sram_write+0x1ac>)
    9a56:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9a58:	46c0      	nop			; (mov r8, r8)
    9a5a:	4b36      	ldr	r3, [pc, #216]	; (9b34 <trx_sram_write+0x1a0>)
    9a5c:	0018      	movs	r0, r3
    9a5e:	4b39      	ldr	r3, [pc, #228]	; (9b44 <trx_sram_write+0x1b0>)
    9a60:	4798      	blx	r3
    9a62:	0003      	movs	r3, r0
    9a64:	001a      	movs	r2, r3
    9a66:	2301      	movs	r3, #1
    9a68:	4053      	eors	r3, r2
    9a6a:	b2db      	uxtb	r3, r3
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	d1f4      	bne.n	9a5a <trx_sram_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9a70:	46c0      	nop			; (mov r8, r8)
    9a72:	4b30      	ldr	r3, [pc, #192]	; (9b34 <trx_sram_write+0x1a0>)
    9a74:	0018      	movs	r0, r3
    9a76:	4b34      	ldr	r3, [pc, #208]	; (9b48 <trx_sram_write+0x1b4>)
    9a78:	4798      	blx	r3
    9a7a:	0003      	movs	r3, r0
    9a7c:	001a      	movs	r2, r3
    9a7e:	2301      	movs	r3, #1
    9a80:	4053      	eors	r3, r2
    9a82:	b2db      	uxtb	r3, r3
    9a84:	2b00      	cmp	r3, #0
    9a86:	d1f4      	bne.n	9a72 <trx_sram_write+0xde>
	}
	spi_read(&master_1, &dummy_read);
    9a88:	4a30      	ldr	r2, [pc, #192]	; (9b4c <trx_sram_write+0x1b8>)
    9a8a:	4b2a      	ldr	r3, [pc, #168]	; (9b34 <trx_sram_write+0x1a0>)
    9a8c:	0011      	movs	r1, r2
    9a8e:	0018      	movs	r0, r3
    9a90:	4b2f      	ldr	r3, [pc, #188]	; (9b50 <trx_sram_write+0x1bc>)
    9a92:	4798      	blx	r3

	while (length--) {
    9a94:	e033      	b.n	9afe <trx_sram_write+0x16a>
		while (!spi_is_ready_to_write(&master_1)) {
    9a96:	46c0      	nop			; (mov r8, r8)
    9a98:	4b26      	ldr	r3, [pc, #152]	; (9b34 <trx_sram_write+0x1a0>)
    9a9a:	0018      	movs	r0, r3
    9a9c:	4b27      	ldr	r3, [pc, #156]	; (9b3c <trx_sram_write+0x1a8>)
    9a9e:	4798      	blx	r3
    9aa0:	0003      	movs	r3, r0
    9aa2:	001a      	movs	r2, r3
    9aa4:	2301      	movs	r3, #1
    9aa6:	4053      	eors	r3, r2
    9aa8:	b2db      	uxtb	r3, r3
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d1f4      	bne.n	9a98 <trx_sram_write+0x104>
		}
		spi_write(&master_1, *data++);
    9aae:	683b      	ldr	r3, [r7, #0]
    9ab0:	1c5a      	adds	r2, r3, #1
    9ab2:	603a      	str	r2, [r7, #0]
    9ab4:	781b      	ldrb	r3, [r3, #0]
    9ab6:	b29a      	uxth	r2, r3
    9ab8:	4b1e      	ldr	r3, [pc, #120]	; (9b34 <trx_sram_write+0x1a0>)
    9aba:	0011      	movs	r1, r2
    9abc:	0018      	movs	r0, r3
    9abe:	4b20      	ldr	r3, [pc, #128]	; (9b40 <trx_sram_write+0x1ac>)
    9ac0:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    9ac2:	46c0      	nop			; (mov r8, r8)
    9ac4:	4b1b      	ldr	r3, [pc, #108]	; (9b34 <trx_sram_write+0x1a0>)
    9ac6:	0018      	movs	r0, r3
    9ac8:	4b1e      	ldr	r3, [pc, #120]	; (9b44 <trx_sram_write+0x1b0>)
    9aca:	4798      	blx	r3
    9acc:	0003      	movs	r3, r0
    9ace:	001a      	movs	r2, r3
    9ad0:	2301      	movs	r3, #1
    9ad2:	4053      	eors	r3, r2
    9ad4:	b2db      	uxtb	r3, r3
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d1f4      	bne.n	9ac4 <trx_sram_write+0x130>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    9ada:	46c0      	nop			; (mov r8, r8)
    9adc:	4b15      	ldr	r3, [pc, #84]	; (9b34 <trx_sram_write+0x1a0>)
    9ade:	0018      	movs	r0, r3
    9ae0:	4b19      	ldr	r3, [pc, #100]	; (9b48 <trx_sram_write+0x1b4>)
    9ae2:	4798      	blx	r3
    9ae4:	0003      	movs	r3, r0
    9ae6:	001a      	movs	r2, r3
    9ae8:	2301      	movs	r3, #1
    9aea:	4053      	eors	r3, r2
    9aec:	b2db      	uxtb	r3, r3
    9aee:	2b00      	cmp	r3, #0
    9af0:	d1f4      	bne.n	9adc <trx_sram_write+0x148>
		}
		spi_read(&master_1, &dummy_read);
    9af2:	4a16      	ldr	r2, [pc, #88]	; (9b4c <trx_sram_write+0x1b8>)
    9af4:	4b0f      	ldr	r3, [pc, #60]	; (9b34 <trx_sram_write+0x1a0>)
    9af6:	0011      	movs	r1, r2
    9af8:	0018      	movs	r0, r3
    9afa:	4b15      	ldr	r3, [pc, #84]	; (9b50 <trx_sram_write+0x1bc>)
    9afc:	4798      	blx	r3
	while (length--) {
    9afe:	1dbb      	adds	r3, r7, #6
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	1dba      	adds	r2, r7, #6
    9b04:	1e59      	subs	r1, r3, #1
    9b06:	7011      	strb	r1, [r2, #0]
    9b08:	2b00      	cmp	r3, #0
    9b0a:	d1c4      	bne.n	9a96 <trx_sram_write+0x102>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    9b0c:	4908      	ldr	r1, [pc, #32]	; (9b30 <trx_sram_write+0x19c>)
    9b0e:	4b09      	ldr	r3, [pc, #36]	; (9b34 <trx_sram_write+0x1a0>)
    9b10:	2200      	movs	r2, #0
    9b12:	0018      	movs	r0, r3
    9b14:	4b08      	ldr	r3, [pc, #32]	; (9b38 <trx_sram_write+0x1a4>)
    9b16:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    9b18:	230f      	movs	r3, #15
    9b1a:	18fb      	adds	r3, r7, r3
    9b1c:	781b      	ldrb	r3, [r3, #0]
    9b1e:	0018      	movs	r0, r3
    9b20:	4b0c      	ldr	r3, [pc, #48]	; (9b54 <trx_sram_write+0x1c0>)
    9b22:	4798      	blx	r3
}
    9b24:	46c0      	nop			; (mov r8, r8)
    9b26:	46bd      	mov	sp, r7
    9b28:	b004      	add	sp, #16
    9b2a:	bd80      	pop	{r7, pc}
    9b2c:	00008e41 	.word	0x00008e41
    9b30:	20000ba4 	.word	0x20000ba4
    9b34:	20000b90 	.word	0x20000b90
    9b38:	0001347d 	.word	0x0001347d
    9b3c:	0000913d 	.word	0x0000913d
    9b40:	0000918d 	.word	0x0000918d
    9b44:	00009115 	.word	0x00009115
    9b48:	00009165 	.word	0x00009165
    9b4c:	20000b9c 	.word	0x20000b9c
    9b50:	000091d5 	.word	0x000091d5
    9b54:	00008e89 	.word	0x00008e89

00009b58 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    9b58:	b580      	push	{r7, lr}
    9b5a:	b084      	sub	sp, #16
    9b5c:	af00      	add	r7, sp, #0
    9b5e:	6039      	str	r1, [r7, #0]
    9b60:	0011      	movs	r1, r2
    9b62:	1dfb      	adds	r3, r7, #7
    9b64:	1c02      	adds	r2, r0, #0
    9b66:	701a      	strb	r2, [r3, #0]
    9b68:	1dbb      	adds	r3, r7, #6
    9b6a:	1c0a      	adds	r2, r1, #0
    9b6c:	701a      	strb	r2, [r3, #0]
	delay_us(1); /* wap_rf4ce */
    9b6e:	2001      	movs	r0, #1
    9b70:	4b63      	ldr	r3, [pc, #396]	; (9d00 <trx_sram_read+0x1a8>)
    9b72:	4798      	blx	r3

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    9b74:	4b63      	ldr	r3, [pc, #396]	; (9d04 <trx_sram_read+0x1ac>)
    9b76:	4798      	blx	r3
    9b78:	0002      	movs	r2, r0
    9b7a:	230f      	movs	r3, #15
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    9b80:	4961      	ldr	r1, [pc, #388]	; (9d08 <trx_sram_read+0x1b0>)
    9b82:	4b62      	ldr	r3, [pc, #392]	; (9d0c <trx_sram_read+0x1b4>)
    9b84:	2201      	movs	r2, #1
    9b86:	0018      	movs	r0, r3
    9b88:	4b61      	ldr	r3, [pc, #388]	; (9d10 <trx_sram_read+0x1b8>)
    9b8a:	4798      	blx	r3

	temp = TRX_CMD_SR;
    9b8c:	230c      	movs	r3, #12
    9b8e:	18fb      	adds	r3, r7, r3
    9b90:	2200      	movs	r2, #0
    9b92:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    9b94:	46c0      	nop			; (mov r8, r8)
    9b96:	4b5d      	ldr	r3, [pc, #372]	; (9d0c <trx_sram_read+0x1b4>)
    9b98:	0018      	movs	r0, r3
    9b9a:	4b5e      	ldr	r3, [pc, #376]	; (9d14 <trx_sram_read+0x1bc>)
    9b9c:	4798      	blx	r3
    9b9e:	0003      	movs	r3, r0
    9ba0:	001a      	movs	r2, r3
    9ba2:	2301      	movs	r3, #1
    9ba4:	4053      	eors	r3, r2
    9ba6:	b2db      	uxtb	r3, r3
    9ba8:	2b00      	cmp	r3, #0
    9baa:	d1f4      	bne.n	9b96 <trx_sram_read+0x3e>
	}
	spi_write(&master_1, temp);
    9bac:	230c      	movs	r3, #12
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	881a      	ldrh	r2, [r3, #0]
    9bb2:	4b56      	ldr	r3, [pc, #344]	; (9d0c <trx_sram_read+0x1b4>)
    9bb4:	0011      	movs	r1, r2
    9bb6:	0018      	movs	r0, r3
    9bb8:	4b57      	ldr	r3, [pc, #348]	; (9d18 <trx_sram_read+0x1c0>)
    9bba:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9bbc:	46c0      	nop			; (mov r8, r8)
    9bbe:	4b53      	ldr	r3, [pc, #332]	; (9d0c <trx_sram_read+0x1b4>)
    9bc0:	0018      	movs	r0, r3
    9bc2:	4b56      	ldr	r3, [pc, #344]	; (9d1c <trx_sram_read+0x1c4>)
    9bc4:	4798      	blx	r3
    9bc6:	0003      	movs	r3, r0
    9bc8:	001a      	movs	r2, r3
    9bca:	2301      	movs	r3, #1
    9bcc:	4053      	eors	r3, r2
    9bce:	b2db      	uxtb	r3, r3
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d1f4      	bne.n	9bbe <trx_sram_read+0x66>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9bd4:	46c0      	nop			; (mov r8, r8)
    9bd6:	4b4d      	ldr	r3, [pc, #308]	; (9d0c <trx_sram_read+0x1b4>)
    9bd8:	0018      	movs	r0, r3
    9bda:	4b51      	ldr	r3, [pc, #324]	; (9d20 <trx_sram_read+0x1c8>)
    9bdc:	4798      	blx	r3
    9bde:	0003      	movs	r3, r0
    9be0:	001a      	movs	r2, r3
    9be2:	2301      	movs	r3, #1
    9be4:	4053      	eors	r3, r2
    9be6:	b2db      	uxtb	r3, r3
    9be8:	2b00      	cmp	r3, #0
    9bea:	d1f4      	bne.n	9bd6 <trx_sram_read+0x7e>
	}
	spi_read(&master_1, &dummy_read);
    9bec:	4a4d      	ldr	r2, [pc, #308]	; (9d24 <trx_sram_read+0x1cc>)
    9bee:	4b47      	ldr	r3, [pc, #284]	; (9d0c <trx_sram_read+0x1b4>)
    9bf0:	0011      	movs	r1, r2
    9bf2:	0018      	movs	r0, r3
    9bf4:	4b4c      	ldr	r3, [pc, #304]	; (9d28 <trx_sram_read+0x1d0>)
    9bf6:	4798      	blx	r3

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master_1)) {
    9bf8:	46c0      	nop			; (mov r8, r8)
    9bfa:	4b44      	ldr	r3, [pc, #272]	; (9d0c <trx_sram_read+0x1b4>)
    9bfc:	0018      	movs	r0, r3
    9bfe:	4b45      	ldr	r3, [pc, #276]	; (9d14 <trx_sram_read+0x1bc>)
    9c00:	4798      	blx	r3
    9c02:	0003      	movs	r3, r0
    9c04:	001a      	movs	r2, r3
    9c06:	2301      	movs	r3, #1
    9c08:	4053      	eors	r3, r2
    9c0a:	b2db      	uxtb	r3, r3
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d1f4      	bne.n	9bfa <trx_sram_read+0xa2>
	}
	spi_write(&master_1, addr);
    9c10:	1dfb      	adds	r3, r7, #7
    9c12:	781b      	ldrb	r3, [r3, #0]
    9c14:	b29a      	uxth	r2, r3
    9c16:	4b3d      	ldr	r3, [pc, #244]	; (9d0c <trx_sram_read+0x1b4>)
    9c18:	0011      	movs	r1, r2
    9c1a:	0018      	movs	r0, r3
    9c1c:	4b3e      	ldr	r3, [pc, #248]	; (9d18 <trx_sram_read+0x1c0>)
    9c1e:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9c20:	46c0      	nop			; (mov r8, r8)
    9c22:	4b3a      	ldr	r3, [pc, #232]	; (9d0c <trx_sram_read+0x1b4>)
    9c24:	0018      	movs	r0, r3
    9c26:	4b3d      	ldr	r3, [pc, #244]	; (9d1c <trx_sram_read+0x1c4>)
    9c28:	4798      	blx	r3
    9c2a:	0003      	movs	r3, r0
    9c2c:	001a      	movs	r2, r3
    9c2e:	2301      	movs	r3, #1
    9c30:	4053      	eors	r3, r2
    9c32:	b2db      	uxtb	r3, r3
    9c34:	2b00      	cmp	r3, #0
    9c36:	d1f4      	bne.n	9c22 <trx_sram_read+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9c38:	46c0      	nop			; (mov r8, r8)
    9c3a:	4b34      	ldr	r3, [pc, #208]	; (9d0c <trx_sram_read+0x1b4>)
    9c3c:	0018      	movs	r0, r3
    9c3e:	4b38      	ldr	r3, [pc, #224]	; (9d20 <trx_sram_read+0x1c8>)
    9c40:	4798      	blx	r3
    9c42:	0003      	movs	r3, r0
    9c44:	001a      	movs	r2, r3
    9c46:	2301      	movs	r3, #1
    9c48:	4053      	eors	r3, r2
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d1f4      	bne.n	9c3a <trx_sram_read+0xe2>
	}
	spi_read(&master_1, &dummy_read);
    9c50:	4a34      	ldr	r2, [pc, #208]	; (9d24 <trx_sram_read+0x1cc>)
    9c52:	4b2e      	ldr	r3, [pc, #184]	; (9d0c <trx_sram_read+0x1b4>)
    9c54:	0011      	movs	r1, r2
    9c56:	0018      	movs	r0, r3
    9c58:	4b33      	ldr	r3, [pc, #204]	; (9d28 <trx_sram_read+0x1d0>)
    9c5a:	4798      	blx	r3

	/* Upload the received byte in the user provided location */
	while (length--) {
    9c5c:	e038      	b.n	9cd0 <trx_sram_read+0x178>
		while (!spi_is_ready_to_write(&master_1)) {
    9c5e:	46c0      	nop			; (mov r8, r8)
    9c60:	4b2a      	ldr	r3, [pc, #168]	; (9d0c <trx_sram_read+0x1b4>)
    9c62:	0018      	movs	r0, r3
    9c64:	4b2b      	ldr	r3, [pc, #172]	; (9d14 <trx_sram_read+0x1bc>)
    9c66:	4798      	blx	r3
    9c68:	0003      	movs	r3, r0
    9c6a:	001a      	movs	r2, r3
    9c6c:	2301      	movs	r3, #1
    9c6e:	4053      	eors	r3, r2
    9c70:	b2db      	uxtb	r3, r3
    9c72:	2b00      	cmp	r3, #0
    9c74:	d1f4      	bne.n	9c60 <trx_sram_read+0x108>
		}
		spi_write(&master_1, 0);
    9c76:	4b25      	ldr	r3, [pc, #148]	; (9d0c <trx_sram_read+0x1b4>)
    9c78:	2100      	movs	r1, #0
    9c7a:	0018      	movs	r0, r3
    9c7c:	4b26      	ldr	r3, [pc, #152]	; (9d18 <trx_sram_read+0x1c0>)
    9c7e:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    9c80:	46c0      	nop			; (mov r8, r8)
    9c82:	4b22      	ldr	r3, [pc, #136]	; (9d0c <trx_sram_read+0x1b4>)
    9c84:	0018      	movs	r0, r3
    9c86:	4b25      	ldr	r3, [pc, #148]	; (9d1c <trx_sram_read+0x1c4>)
    9c88:	4798      	blx	r3
    9c8a:	0003      	movs	r3, r0
    9c8c:	001a      	movs	r2, r3
    9c8e:	2301      	movs	r3, #1
    9c90:	4053      	eors	r3, r2
    9c92:	b2db      	uxtb	r3, r3
    9c94:	2b00      	cmp	r3, #0
    9c96:	d1f4      	bne.n	9c82 <trx_sram_read+0x12a>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    9c98:	46c0      	nop			; (mov r8, r8)
    9c9a:	4b1c      	ldr	r3, [pc, #112]	; (9d0c <trx_sram_read+0x1b4>)
    9c9c:	0018      	movs	r0, r3
    9c9e:	4b20      	ldr	r3, [pc, #128]	; (9d20 <trx_sram_read+0x1c8>)
    9ca0:	4798      	blx	r3
    9ca2:	0003      	movs	r3, r0
    9ca4:	001a      	movs	r2, r3
    9ca6:	2301      	movs	r3, #1
    9ca8:	4053      	eors	r3, r2
    9caa:	b2db      	uxtb	r3, r3
    9cac:	2b00      	cmp	r3, #0
    9cae:	d1f4      	bne.n	9c9a <trx_sram_read+0x142>
		}
		spi_read(&master_1, &temp);
    9cb0:	230c      	movs	r3, #12
    9cb2:	18fa      	adds	r2, r7, r3
    9cb4:	4b15      	ldr	r3, [pc, #84]	; (9d0c <trx_sram_read+0x1b4>)
    9cb6:	0011      	movs	r1, r2
    9cb8:	0018      	movs	r0, r3
    9cba:	4b1b      	ldr	r3, [pc, #108]	; (9d28 <trx_sram_read+0x1d0>)
    9cbc:	4798      	blx	r3
		*data = temp;
    9cbe:	230c      	movs	r3, #12
    9cc0:	18fb      	adds	r3, r7, r3
    9cc2:	881b      	ldrh	r3, [r3, #0]
    9cc4:	b2da      	uxtb	r2, r3
    9cc6:	683b      	ldr	r3, [r7, #0]
    9cc8:	701a      	strb	r2, [r3, #0]
		data++;
    9cca:	683b      	ldr	r3, [r7, #0]
    9ccc:	3301      	adds	r3, #1
    9cce:	603b      	str	r3, [r7, #0]
	while (length--) {
    9cd0:	1dbb      	adds	r3, r7, #6
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	1dba      	adds	r2, r7, #6
    9cd6:	1e59      	subs	r1, r3, #1
    9cd8:	7011      	strb	r1, [r2, #0]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d1bf      	bne.n	9c5e <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    9cde:	490a      	ldr	r1, [pc, #40]	; (9d08 <trx_sram_read+0x1b0>)
    9ce0:	4b0a      	ldr	r3, [pc, #40]	; (9d0c <trx_sram_read+0x1b4>)
    9ce2:	2200      	movs	r2, #0
    9ce4:	0018      	movs	r0, r3
    9ce6:	4b0a      	ldr	r3, [pc, #40]	; (9d10 <trx_sram_read+0x1b8>)
    9ce8:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    9cea:	230f      	movs	r3, #15
    9cec:	18fb      	adds	r3, r7, r3
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	0018      	movs	r0, r3
    9cf2:	4b0e      	ldr	r3, [pc, #56]	; (9d2c <trx_sram_read+0x1d4>)
    9cf4:	4798      	blx	r3
}
    9cf6:	46c0      	nop			; (mov r8, r8)
    9cf8:	46bd      	mov	sp, r7
    9cfa:	b004      	add	sp, #16
    9cfc:	bd80      	pop	{r7, pc}
    9cfe:	46c0      	nop			; (mov r8, r8)
    9d00:	00010d5d 	.word	0x00010d5d
    9d04:	00008e41 	.word	0x00008e41
    9d08:	20000ba4 	.word	0x20000ba4
    9d0c:	20000b90 	.word	0x20000b90
    9d10:	0001347d 	.word	0x0001347d
    9d14:	0000913d 	.word	0x0000913d
    9d18:	0000918d 	.word	0x0000918d
    9d1c:	00009115 	.word	0x00009115
    9d20:	00009165 	.word	0x00009165
    9d24:	20000b9c 	.word	0x20000b9c
    9d28:	000091d5 	.word	0x000091d5
    9d2c:	00008e89 	.word	0x00008e89

00009d30 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    9d30:	b580      	push	{r7, lr}
    9d32:	b084      	sub	sp, #16
    9d34:	af00      	add	r7, sp, #0
    9d36:	6039      	str	r1, [r7, #0]
    9d38:	0011      	movs	r1, r2
    9d3a:	1dfb      	adds	r3, r7, #7
    9d3c:	1c02      	adds	r2, r0, #0
    9d3e:	701a      	strb	r2, [r3, #0]
    9d40:	1dbb      	adds	r3, r7, #6
    9d42:	1c0a      	adds	r2, r1, #0
    9d44:	701a      	strb	r2, [r3, #0]
	uint8_t *odata;
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
    9d46:	2308      	movs	r3, #8
    9d48:	18fb      	adds	r3, r7, r3
    9d4a:	2200      	movs	r2, #0
    9d4c:	801a      	strh	r2, [r3, #0]
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    9d4e:	2001      	movs	r0, #1
    9d50:	4b9a      	ldr	r3, [pc, #616]	; (9fbc <trx_aes_wrrd+0x28c>)
    9d52:	4798      	blx	r3

	ENTER_TRX_REGION();
    9d54:	2100      	movs	r1, #0
    9d56:	2000      	movs	r0, #0
    9d58:	4b99      	ldr	r3, [pc, #612]	; (9fc0 <trx_aes_wrrd+0x290>)
    9d5a:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    9d5c:	4999      	ldr	r1, [pc, #612]	; (9fc4 <trx_aes_wrrd+0x294>)
    9d5e:	4b9a      	ldr	r3, [pc, #616]	; (9fc8 <trx_aes_wrrd+0x298>)
    9d60:	2201      	movs	r2, #1
    9d62:	0018      	movs	r0, r3
    9d64:	4b99      	ldr	r3, [pc, #612]	; (9fcc <trx_aes_wrrd+0x29c>)
    9d66:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    9d68:	230b      	movs	r3, #11
    9d6a:	18fb      	adds	r3, r7, r3
    9d6c:	2240      	movs	r2, #64	; 0x40
    9d6e:	701a      	strb	r2, [r3, #0]

	while (!spi_is_ready_to_write(&master_1)) {
    9d70:	46c0      	nop			; (mov r8, r8)
    9d72:	4b95      	ldr	r3, [pc, #596]	; (9fc8 <trx_aes_wrrd+0x298>)
    9d74:	0018      	movs	r0, r3
    9d76:	4b96      	ldr	r3, [pc, #600]	; (9fd0 <trx_aes_wrrd+0x2a0>)
    9d78:	4798      	blx	r3
    9d7a:	0003      	movs	r3, r0
    9d7c:	001a      	movs	r2, r3
    9d7e:	2301      	movs	r3, #1
    9d80:	4053      	eors	r3, r2
    9d82:	b2db      	uxtb	r3, r3
    9d84:	2b00      	cmp	r3, #0
    9d86:	d1f4      	bne.n	9d72 <trx_aes_wrrd+0x42>
	}
	spi_write(&master_1, temp);
    9d88:	230b      	movs	r3, #11
    9d8a:	18fb      	adds	r3, r7, r3
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	b29a      	uxth	r2, r3
    9d90:	4b8d      	ldr	r3, [pc, #564]	; (9fc8 <trx_aes_wrrd+0x298>)
    9d92:	0011      	movs	r1, r2
    9d94:	0018      	movs	r0, r3
    9d96:	4b8f      	ldr	r3, [pc, #572]	; (9fd4 <trx_aes_wrrd+0x2a4>)
    9d98:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9d9a:	46c0      	nop			; (mov r8, r8)
    9d9c:	4b8a      	ldr	r3, [pc, #552]	; (9fc8 <trx_aes_wrrd+0x298>)
    9d9e:	0018      	movs	r0, r3
    9da0:	4b8d      	ldr	r3, [pc, #564]	; (9fd8 <trx_aes_wrrd+0x2a8>)
    9da2:	4798      	blx	r3
    9da4:	0003      	movs	r3, r0
    9da6:	001a      	movs	r2, r3
    9da8:	2301      	movs	r3, #1
    9daa:	4053      	eors	r3, r2
    9dac:	b2db      	uxtb	r3, r3
    9dae:	2b00      	cmp	r3, #0
    9db0:	d1f4      	bne.n	9d9c <trx_aes_wrrd+0x6c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9db2:	46c0      	nop			; (mov r8, r8)
    9db4:	4b84      	ldr	r3, [pc, #528]	; (9fc8 <trx_aes_wrrd+0x298>)
    9db6:	0018      	movs	r0, r3
    9db8:	4b88      	ldr	r3, [pc, #544]	; (9fdc <trx_aes_wrrd+0x2ac>)
    9dba:	4798      	blx	r3
    9dbc:	0003      	movs	r3, r0
    9dbe:	001a      	movs	r2, r3
    9dc0:	2301      	movs	r3, #1
    9dc2:	4053      	eors	r3, r2
    9dc4:	b2db      	uxtb	r3, r3
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	d1f4      	bne.n	9db4 <trx_aes_wrrd+0x84>
	}
	spi_read(&master_1, &dummy_read);
    9dca:	4a85      	ldr	r2, [pc, #532]	; (9fe0 <trx_aes_wrrd+0x2b0>)
    9dcc:	4b7e      	ldr	r3, [pc, #504]	; (9fc8 <trx_aes_wrrd+0x298>)
    9dce:	0011      	movs	r1, r2
    9dd0:	0018      	movs	r0, r3
    9dd2:	4b84      	ldr	r3, [pc, #528]	; (9fe4 <trx_aes_wrrd+0x2b4>)
    9dd4:	4798      	blx	r3

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master_1)) {
    9dd6:	46c0      	nop			; (mov r8, r8)
    9dd8:	4b7b      	ldr	r3, [pc, #492]	; (9fc8 <trx_aes_wrrd+0x298>)
    9dda:	0018      	movs	r0, r3
    9ddc:	4b7c      	ldr	r3, [pc, #496]	; (9fd0 <trx_aes_wrrd+0x2a0>)
    9dde:	4798      	blx	r3
    9de0:	0003      	movs	r3, r0
    9de2:	001a      	movs	r2, r3
    9de4:	2301      	movs	r3, #1
    9de6:	4053      	eors	r3, r2
    9de8:	b2db      	uxtb	r3, r3
    9dea:	2b00      	cmp	r3, #0
    9dec:	d1f4      	bne.n	9dd8 <trx_aes_wrrd+0xa8>
	}
	spi_write(&master_1, addr);
    9dee:	1dfb      	adds	r3, r7, #7
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	b29a      	uxth	r2, r3
    9df4:	4b74      	ldr	r3, [pc, #464]	; (9fc8 <trx_aes_wrrd+0x298>)
    9df6:	0011      	movs	r1, r2
    9df8:	0018      	movs	r0, r3
    9dfa:	4b76      	ldr	r3, [pc, #472]	; (9fd4 <trx_aes_wrrd+0x2a4>)
    9dfc:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9dfe:	46c0      	nop			; (mov r8, r8)
    9e00:	4b71      	ldr	r3, [pc, #452]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e02:	0018      	movs	r0, r3
    9e04:	4b74      	ldr	r3, [pc, #464]	; (9fd8 <trx_aes_wrrd+0x2a8>)
    9e06:	4798      	blx	r3
    9e08:	0003      	movs	r3, r0
    9e0a:	001a      	movs	r2, r3
    9e0c:	2301      	movs	r3, #1
    9e0e:	4053      	eors	r3, r2
    9e10:	b2db      	uxtb	r3, r3
    9e12:	2b00      	cmp	r3, #0
    9e14:	d1f4      	bne.n	9e00 <trx_aes_wrrd+0xd0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9e16:	46c0      	nop			; (mov r8, r8)
    9e18:	4b6b      	ldr	r3, [pc, #428]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e1a:	0018      	movs	r0, r3
    9e1c:	4b6f      	ldr	r3, [pc, #444]	; (9fdc <trx_aes_wrrd+0x2ac>)
    9e1e:	4798      	blx	r3
    9e20:	0003      	movs	r3, r0
    9e22:	001a      	movs	r2, r3
    9e24:	2301      	movs	r3, #1
    9e26:	4053      	eors	r3, r2
    9e28:	b2db      	uxtb	r3, r3
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d1f4      	bne.n	9e18 <trx_aes_wrrd+0xe8>
	}
	spi_read(&master_1, &dummy_read);
    9e2e:	4a6c      	ldr	r2, [pc, #432]	; (9fe0 <trx_aes_wrrd+0x2b0>)
    9e30:	4b65      	ldr	r3, [pc, #404]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e32:	0011      	movs	r1, r2
    9e34:	0018      	movs	r0, r3
    9e36:	4b6b      	ldr	r3, [pc, #428]	; (9fe4 <trx_aes_wrrd+0x2b4>)
    9e38:	4798      	blx	r3

	/* now transfer data */
	odata = idata;
    9e3a:	683b      	ldr	r3, [r7, #0]
    9e3c:	60fb      	str	r3, [r7, #12]

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master_1)) {
    9e3e:	46c0      	nop			; (mov r8, r8)
    9e40:	4b61      	ldr	r3, [pc, #388]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e42:	0018      	movs	r0, r3
    9e44:	4b62      	ldr	r3, [pc, #392]	; (9fd0 <trx_aes_wrrd+0x2a0>)
    9e46:	4798      	blx	r3
    9e48:	0003      	movs	r3, r0
    9e4a:	001a      	movs	r2, r3
    9e4c:	2301      	movs	r3, #1
    9e4e:	4053      	eors	r3, r2
    9e50:	b2db      	uxtb	r3, r3
    9e52:	2b00      	cmp	r3, #0
    9e54:	d1f4      	bne.n	9e40 <trx_aes_wrrd+0x110>
	}
	spi_write(&master_1, *idata++);
    9e56:	683b      	ldr	r3, [r7, #0]
    9e58:	1c5a      	adds	r2, r3, #1
    9e5a:	603a      	str	r2, [r7, #0]
    9e5c:	781b      	ldrb	r3, [r3, #0]
    9e5e:	b29a      	uxth	r2, r3
    9e60:	4b59      	ldr	r3, [pc, #356]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e62:	0011      	movs	r1, r2
    9e64:	0018      	movs	r0, r3
    9e66:	4b5b      	ldr	r3, [pc, #364]	; (9fd4 <trx_aes_wrrd+0x2a4>)
    9e68:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9e6a:	46c0      	nop			; (mov r8, r8)
    9e6c:	4b56      	ldr	r3, [pc, #344]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e6e:	0018      	movs	r0, r3
    9e70:	4b59      	ldr	r3, [pc, #356]	; (9fd8 <trx_aes_wrrd+0x2a8>)
    9e72:	4798      	blx	r3
    9e74:	0003      	movs	r3, r0
    9e76:	001a      	movs	r2, r3
    9e78:	2301      	movs	r3, #1
    9e7a:	4053      	eors	r3, r2
    9e7c:	b2db      	uxtb	r3, r3
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d1f4      	bne.n	9e6c <trx_aes_wrrd+0x13c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    9e82:	46c0      	nop			; (mov r8, r8)
    9e84:	4b50      	ldr	r3, [pc, #320]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e86:	0018      	movs	r0, r3
    9e88:	4b54      	ldr	r3, [pc, #336]	; (9fdc <trx_aes_wrrd+0x2ac>)
    9e8a:	4798      	blx	r3
    9e8c:	0003      	movs	r3, r0
    9e8e:	001a      	movs	r2, r3
    9e90:	2301      	movs	r3, #1
    9e92:	4053      	eors	r3, r2
    9e94:	b2db      	uxtb	r3, r3
    9e96:	2b00      	cmp	r3, #0
    9e98:	d1f4      	bne.n	9e84 <trx_aes_wrrd+0x154>
	}
	spi_read(&master_1, &dummy_read);
    9e9a:	4a51      	ldr	r2, [pc, #324]	; (9fe0 <trx_aes_wrrd+0x2b0>)
    9e9c:	4b4a      	ldr	r3, [pc, #296]	; (9fc8 <trx_aes_wrrd+0x298>)
    9e9e:	0011      	movs	r1, r2
    9ea0:	0018      	movs	r0, r3
    9ea2:	4b50      	ldr	r3, [pc, #320]	; (9fe4 <trx_aes_wrrd+0x2b4>)
    9ea4:	4798      	blx	r3

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    9ea6:	e041      	b.n	9f2c <trx_aes_wrrd+0x1fc>
		while (!spi_is_ready_to_write(&master_1)) {
    9ea8:	46c0      	nop			; (mov r8, r8)
    9eaa:	4b47      	ldr	r3, [pc, #284]	; (9fc8 <trx_aes_wrrd+0x298>)
    9eac:	0018      	movs	r0, r3
    9eae:	4b48      	ldr	r3, [pc, #288]	; (9fd0 <trx_aes_wrrd+0x2a0>)
    9eb0:	4798      	blx	r3
    9eb2:	0003      	movs	r3, r0
    9eb4:	001a      	movs	r2, r3
    9eb6:	2301      	movs	r3, #1
    9eb8:	4053      	eors	r3, r2
    9eba:	b2db      	uxtb	r3, r3
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	d1f4      	bne.n	9eaa <trx_aes_wrrd+0x17a>
		}
		spi_write(&master_1, *idata++);
    9ec0:	683b      	ldr	r3, [r7, #0]
    9ec2:	1c5a      	adds	r2, r3, #1
    9ec4:	603a      	str	r2, [r7, #0]
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	b29a      	uxth	r2, r3
    9eca:	4b3f      	ldr	r3, [pc, #252]	; (9fc8 <trx_aes_wrrd+0x298>)
    9ecc:	0011      	movs	r1, r2
    9ece:	0018      	movs	r0, r3
    9ed0:	4b40      	ldr	r3, [pc, #256]	; (9fd4 <trx_aes_wrrd+0x2a4>)
    9ed2:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    9ed4:	46c0      	nop			; (mov r8, r8)
    9ed6:	4b3c      	ldr	r3, [pc, #240]	; (9fc8 <trx_aes_wrrd+0x298>)
    9ed8:	0018      	movs	r0, r3
    9eda:	4b3f      	ldr	r3, [pc, #252]	; (9fd8 <trx_aes_wrrd+0x2a8>)
    9edc:	4798      	blx	r3
    9ede:	0003      	movs	r3, r0
    9ee0:	001a      	movs	r2, r3
    9ee2:	2301      	movs	r3, #1
    9ee4:	4053      	eors	r3, r2
    9ee6:	b2db      	uxtb	r3, r3
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d1f4      	bne.n	9ed6 <trx_aes_wrrd+0x1a6>
		}
		while (!spi_is_ready_to_read(&master_1)) {
    9eec:	46c0      	nop			; (mov r8, r8)
    9eee:	4b36      	ldr	r3, [pc, #216]	; (9fc8 <trx_aes_wrrd+0x298>)
    9ef0:	0018      	movs	r0, r3
    9ef2:	4b3a      	ldr	r3, [pc, #232]	; (9fdc <trx_aes_wrrd+0x2ac>)
    9ef4:	4798      	blx	r3
    9ef6:	0003      	movs	r3, r0
    9ef8:	001a      	movs	r2, r3
    9efa:	2301      	movs	r3, #1
    9efc:	4053      	eors	r3, r2
    9efe:	b2db      	uxtb	r3, r3
    9f00:	2b00      	cmp	r3, #0
    9f02:	d1f4      	bne.n	9eee <trx_aes_wrrd+0x1be>
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master_1, &odata_var);
    9f04:	2308      	movs	r3, #8
    9f06:	18fa      	adds	r2, r7, r3
    9f08:	4b2f      	ldr	r3, [pc, #188]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f0a:	0011      	movs	r1, r2
    9f0c:	0018      	movs	r0, r3
    9f0e:	4b35      	ldr	r3, [pc, #212]	; (9fe4 <trx_aes_wrrd+0x2b4>)
    9f10:	4798      	blx	r3
		*odata++ = (uint8_t)odata_var;
    9f12:	68fb      	ldr	r3, [r7, #12]
    9f14:	1c5a      	adds	r2, r3, #1
    9f16:	60fa      	str	r2, [r7, #12]
    9f18:	2208      	movs	r2, #8
    9f1a:	18ba      	adds	r2, r7, r2
    9f1c:	8812      	ldrh	r2, [r2, #0]
    9f1e:	b2d2      	uxtb	r2, r2
    9f20:	701a      	strb	r2, [r3, #0]
#else
		spi_read(&master_1, (uint16_t *)odata++);
#endif
		length--;
    9f22:	1dbb      	adds	r3, r7, #6
    9f24:	781a      	ldrb	r2, [r3, #0]
    9f26:	1dbb      	adds	r3, r7, #6
    9f28:	3a01      	subs	r2, #1
    9f2a:	701a      	strb	r2, [r3, #0]
	while (length > 0) {
    9f2c:	1dbb      	adds	r3, r7, #6
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	2b00      	cmp	r3, #0
    9f32:	d1b9      	bne.n	9ea8 <trx_aes_wrrd+0x178>
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master_1)) {
    9f34:	46c0      	nop			; (mov r8, r8)
    9f36:	4b24      	ldr	r3, [pc, #144]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f38:	0018      	movs	r0, r3
    9f3a:	4b25      	ldr	r3, [pc, #148]	; (9fd0 <trx_aes_wrrd+0x2a0>)
    9f3c:	4798      	blx	r3
    9f3e:	0003      	movs	r3, r0
    9f40:	001a      	movs	r2, r3
    9f42:	2301      	movs	r3, #1
    9f44:	4053      	eors	r3, r2
    9f46:	b2db      	uxtb	r3, r3
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d1f4      	bne.n	9f36 <trx_aes_wrrd+0x206>
	}
	spi_write(&master_1, 0);
    9f4c:	4b1e      	ldr	r3, [pc, #120]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f4e:	2100      	movs	r1, #0
    9f50:	0018      	movs	r0, r3
    9f52:	4b20      	ldr	r3, [pc, #128]	; (9fd4 <trx_aes_wrrd+0x2a4>)
    9f54:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    9f56:	46c0      	nop			; (mov r8, r8)
    9f58:	4b1b      	ldr	r3, [pc, #108]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f5a:	0018      	movs	r0, r3
    9f5c:	4b1e      	ldr	r3, [pc, #120]	; (9fd8 <trx_aes_wrrd+0x2a8>)
    9f5e:	4798      	blx	r3
    9f60:	0003      	movs	r3, r0
    9f62:	001a      	movs	r2, r3
    9f64:	2301      	movs	r3, #1
    9f66:	4053      	eors	r3, r2
    9f68:	b2db      	uxtb	r3, r3
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d1f4      	bne.n	9f58 <trx_aes_wrrd+0x228>
	}
	while (!spi_is_ready_to_read(&master_1)) {
    9f6e:	46c0      	nop			; (mov r8, r8)
    9f70:	4b15      	ldr	r3, [pc, #84]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f72:	0018      	movs	r0, r3
    9f74:	4b19      	ldr	r3, [pc, #100]	; (9fdc <trx_aes_wrrd+0x2ac>)
    9f76:	4798      	blx	r3
    9f78:	0003      	movs	r3, r0
    9f7a:	001a      	movs	r2, r3
    9f7c:	2301      	movs	r3, #1
    9f7e:	4053      	eors	r3, r2
    9f80:	b2db      	uxtb	r3, r3
    9f82:	2b00      	cmp	r3, #0
    9f84:	d1f4      	bne.n	9f70 <trx_aes_wrrd+0x240>
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master_1, &odata_var);
    9f86:	2308      	movs	r3, #8
    9f88:	18fa      	adds	r2, r7, r3
    9f8a:	4b0f      	ldr	r3, [pc, #60]	; (9fc8 <trx_aes_wrrd+0x298>)
    9f8c:	0011      	movs	r1, r2
    9f8e:	0018      	movs	r0, r3
    9f90:	4b14      	ldr	r3, [pc, #80]	; (9fe4 <trx_aes_wrrd+0x2b4>)
    9f92:	4798      	blx	r3
	*odata = (uint8_t)odata_var;
    9f94:	2308      	movs	r3, #8
    9f96:	18fb      	adds	r3, r7, r3
    9f98:	881b      	ldrh	r3, [r3, #0]
    9f9a:	b2da      	uxtb	r2, r3
    9f9c:	68fb      	ldr	r3, [r7, #12]
    9f9e:	701a      	strb	r2, [r3, #0]
#else
	spi_read(&master_1, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    9fa0:	4908      	ldr	r1, [pc, #32]	; (9fc4 <trx_aes_wrrd+0x294>)
    9fa2:	4b09      	ldr	r3, [pc, #36]	; (9fc8 <trx_aes_wrrd+0x298>)
    9fa4:	2200      	movs	r2, #0
    9fa6:	0018      	movs	r0, r3
    9fa8:	4b08      	ldr	r3, [pc, #32]	; (9fcc <trx_aes_wrrd+0x29c>)
    9faa:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    9fac:	2100      	movs	r1, #0
    9fae:	2000      	movs	r0, #0
    9fb0:	4b0d      	ldr	r3, [pc, #52]	; (9fe8 <trx_aes_wrrd+0x2b8>)
    9fb2:	4798      	blx	r3
}
    9fb4:	46c0      	nop			; (mov r8, r8)
    9fb6:	46bd      	mov	sp, r7
    9fb8:	b004      	add	sp, #16
    9fba:	bd80      	pop	{r7, pc}
    9fbc:	00010d5d 	.word	0x00010d5d
    9fc0:	00011205 	.word	0x00011205
    9fc4:	20000ba4 	.word	0x20000ba4
    9fc8:	20000b90 	.word	0x20000b90
    9fcc:	0001347d 	.word	0x0001347d
    9fd0:	0000913d 	.word	0x0000913d
    9fd4:	0000918d 	.word	0x0000918d
    9fd8:	00009115 	.word	0x00009115
    9fdc:	00009165 	.word	0x00009165
    9fe0:	20000b9c 	.word	0x20000b9c
    9fe4:	000091d5 	.word	0x000091d5
    9fe8:	000111bd 	.word	0x000111bd

00009fec <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
    9fec:	b580      	push	{r7, lr}
    9fee:	b084      	sub	sp, #16
    9ff0:	af00      	add	r7, sp, #0
    9ff2:	6078      	str	r0, [r7, #4]
      size_t len;
      char* copy;

      len = strlen(str) + 1;
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	0018      	movs	r0, r3
    9ff8:	4b0d      	ldr	r3, [pc, #52]	; (a030 <cJSON_strdup+0x44>)
    9ffa:	4798      	blx	r3
    9ffc:	0003      	movs	r3, r0
    9ffe:	3301      	adds	r3, #1
    a000:	60fb      	str	r3, [r7, #12]
      if (!(copy = (char*)cJSON_malloc(len))) return 0;
    a002:	4b0c      	ldr	r3, [pc, #48]	; (a034 <cJSON_strdup+0x48>)
    a004:	681b      	ldr	r3, [r3, #0]
    a006:	68fa      	ldr	r2, [r7, #12]
    a008:	0010      	movs	r0, r2
    a00a:	4798      	blx	r3
    a00c:	0003      	movs	r3, r0
    a00e:	60bb      	str	r3, [r7, #8]
    a010:	68bb      	ldr	r3, [r7, #8]
    a012:	2b00      	cmp	r3, #0
    a014:	d101      	bne.n	a01a <cJSON_strdup+0x2e>
    a016:	2300      	movs	r3, #0
    a018:	e006      	b.n	a028 <cJSON_strdup+0x3c>
      memcpy(copy,str,len);
    a01a:	68fa      	ldr	r2, [r7, #12]
    a01c:	6879      	ldr	r1, [r7, #4]
    a01e:	68bb      	ldr	r3, [r7, #8]
    a020:	0018      	movs	r0, r3
    a022:	4b05      	ldr	r3, [pc, #20]	; (a038 <cJSON_strdup+0x4c>)
    a024:	4798      	blx	r3
      return copy;
    a026:	68bb      	ldr	r3, [r7, #8]
}
    a028:	0018      	movs	r0, r3
    a02a:	46bd      	mov	sp, r7
    a02c:	b004      	add	sp, #16
    a02e:	bd80      	pop	{r7, pc}
    a030:	0001a3e3 	.word	0x0001a3e3
    a034:	20000004 	.word	0x20000004
    a038:	00019e6b 	.word	0x00019e6b

0000a03c <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
    a03c:	b580      	push	{r7, lr}
    a03e:	b082      	sub	sp, #8
    a040:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
    a042:	4b0a      	ldr	r3, [pc, #40]	; (a06c <cJSON_New_Item+0x30>)
    a044:	681b      	ldr	r3, [r3, #0]
    a046:	2028      	movs	r0, #40	; 0x28
    a048:	4798      	blx	r3
    a04a:	0003      	movs	r3, r0
    a04c:	607b      	str	r3, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
    a04e:	687b      	ldr	r3, [r7, #4]
    a050:	2b00      	cmp	r3, #0
    a052:	d005      	beq.n	a060 <cJSON_New_Item+0x24>
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	2228      	movs	r2, #40	; 0x28
    a058:	2100      	movs	r1, #0
    a05a:	0018      	movs	r0, r3
    a05c:	4b04      	ldr	r3, [pc, #16]	; (a070 <cJSON_New_Item+0x34>)
    a05e:	4798      	blx	r3
	return node;
    a060:	687b      	ldr	r3, [r7, #4]
}
    a062:	0018      	movs	r0, r3
    a064:	46bd      	mov	sp, r7
    a066:	b002      	add	sp, #8
    a068:	bd80      	pop	{r7, pc}
    a06a:	46c0      	nop			; (mov r8, r8)
    a06c:	20000004 	.word	0x20000004
    a070:	00019ea1 	.word	0x00019ea1

0000a074 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
    a074:	b580      	push	{r7, lr}
    a076:	b084      	sub	sp, #16
    a078:	af00      	add	r7, sp, #0
    a07a:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
    a07c:	e038      	b.n	a0f0 <cJSON_Delete+0x7c>
	{
		next=c->next;
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	681b      	ldr	r3, [r3, #0]
    a082:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	68da      	ldr	r2, [r3, #12]
    a088:	2380      	movs	r3, #128	; 0x80
    a08a:	005b      	lsls	r3, r3, #1
    a08c:	4013      	ands	r3, r2
    a08e:	d108      	bne.n	a0a2 <cJSON_Delete+0x2e>
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	689b      	ldr	r3, [r3, #8]
    a094:	2b00      	cmp	r3, #0
    a096:	d004      	beq.n	a0a2 <cJSON_Delete+0x2e>
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	689b      	ldr	r3, [r3, #8]
    a09c:	0018      	movs	r0, r3
    a09e:	f7ff ffe9 	bl	a074 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	68da      	ldr	r2, [r3, #12]
    a0a6:	2380      	movs	r3, #128	; 0x80
    a0a8:	005b      	lsls	r3, r3, #1
    a0aa:	4013      	ands	r3, r2
    a0ac:	d109      	bne.n	a0c2 <cJSON_Delete+0x4e>
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	691b      	ldr	r3, [r3, #16]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d005      	beq.n	a0c2 <cJSON_Delete+0x4e>
    a0b6:	4b12      	ldr	r3, [pc, #72]	; (a100 <cJSON_Delete+0x8c>)
    a0b8:	681a      	ldr	r2, [r3, #0]
    a0ba:	687b      	ldr	r3, [r7, #4]
    a0bc:	691b      	ldr	r3, [r3, #16]
    a0be:	0018      	movs	r0, r3
    a0c0:	4790      	blx	r2
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	68da      	ldr	r2, [r3, #12]
    a0c6:	2380      	movs	r3, #128	; 0x80
    a0c8:	009b      	lsls	r3, r3, #2
    a0ca:	4013      	ands	r3, r2
    a0cc:	d109      	bne.n	a0e2 <cJSON_Delete+0x6e>
    a0ce:	687b      	ldr	r3, [r7, #4]
    a0d0:	6a1b      	ldr	r3, [r3, #32]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d005      	beq.n	a0e2 <cJSON_Delete+0x6e>
    a0d6:	4b0a      	ldr	r3, [pc, #40]	; (a100 <cJSON_Delete+0x8c>)
    a0d8:	681a      	ldr	r2, [r3, #0]
    a0da:	687b      	ldr	r3, [r7, #4]
    a0dc:	6a1b      	ldr	r3, [r3, #32]
    a0de:	0018      	movs	r0, r3
    a0e0:	4790      	blx	r2
		cJSON_free(c);
    a0e2:	4b07      	ldr	r3, [pc, #28]	; (a100 <cJSON_Delete+0x8c>)
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	687a      	ldr	r2, [r7, #4]
    a0e8:	0010      	movs	r0, r2
    a0ea:	4798      	blx	r3
		c=next;
    a0ec:	68fb      	ldr	r3, [r7, #12]
    a0ee:	607b      	str	r3, [r7, #4]
	while (c)
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d1c3      	bne.n	a07e <cJSON_Delete+0xa>
	}
}
    a0f6:	46c0      	nop			; (mov r8, r8)
    a0f8:	46bd      	mov	sp, r7
    a0fa:	b004      	add	sp, #16
    a0fc:	bd80      	pop	{r7, pc}
    a0fe:	46c0      	nop			; (mov r8, r8)
    a100:	20000008 	.word	0x20000008

0000a104 <pow2gt>:
	item->valueint=(int)n;
	item->type=cJSON_Number;
	return num;
}

static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
    a104:	b580      	push	{r7, lr}
    a106:	b082      	sub	sp, #8
    a108:	af00      	add	r7, sp, #0
    a10a:	6078      	str	r0, [r7, #4]
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	3b01      	subs	r3, #1
    a110:	607b      	str	r3, [r7, #4]
    a112:	687b      	ldr	r3, [r7, #4]
    a114:	105b      	asrs	r3, r3, #1
    a116:	687a      	ldr	r2, [r7, #4]
    a118:	4313      	orrs	r3, r2
    a11a:	607b      	str	r3, [r7, #4]
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	109b      	asrs	r3, r3, #2
    a120:	687a      	ldr	r2, [r7, #4]
    a122:	4313      	orrs	r3, r2
    a124:	607b      	str	r3, [r7, #4]
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	111b      	asrs	r3, r3, #4
    a12a:	687a      	ldr	r2, [r7, #4]
    a12c:	4313      	orrs	r3, r2
    a12e:	607b      	str	r3, [r7, #4]
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	121b      	asrs	r3, r3, #8
    a134:	687a      	ldr	r2, [r7, #4]
    a136:	4313      	orrs	r3, r2
    a138:	607b      	str	r3, [r7, #4]
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	141b      	asrs	r3, r3, #16
    a13e:	687a      	ldr	r2, [r7, #4]
    a140:	4313      	orrs	r3, r2
    a142:	607b      	str	r3, [r7, #4]
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	3301      	adds	r3, #1
    a148:	0018      	movs	r0, r3
    a14a:	46bd      	mov	sp, r7
    a14c:	b002      	add	sp, #8
    a14e:	bd80      	pop	{r7, pc}

0000a150 <ensure>:

typedef struct {char *buffer; int length; int offset; } printbuffer;

static char* ensure(printbuffer *p,int needed)
{
    a150:	b580      	push	{r7, lr}
    a152:	b084      	sub	sp, #16
    a154:	af00      	add	r7, sp, #0
    a156:	6078      	str	r0, [r7, #4]
    a158:	6039      	str	r1, [r7, #0]
	char *newbuffer;int newsize;
	if (!p || !p->buffer) return 0;
    a15a:	687b      	ldr	r3, [r7, #4]
    a15c:	2b00      	cmp	r3, #0
    a15e:	d003      	beq.n	a168 <ensure+0x18>
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	681b      	ldr	r3, [r3, #0]
    a164:	2b00      	cmp	r3, #0
    a166:	d101      	bne.n	a16c <ensure+0x1c>
    a168:	2300      	movs	r3, #0
    a16a:	e04a      	b.n	a202 <ensure+0xb2>
	needed+=p->offset;
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	689b      	ldr	r3, [r3, #8]
    a170:	683a      	ldr	r2, [r7, #0]
    a172:	18d3      	adds	r3, r2, r3
    a174:	603b      	str	r3, [r7, #0]
	if (needed<=p->length) return p->buffer+p->offset;
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	685a      	ldr	r2, [r3, #4]
    a17a:	683b      	ldr	r3, [r7, #0]
    a17c:	429a      	cmp	r2, r3
    a17e:	db05      	blt.n	a18c <ensure+0x3c>
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	681a      	ldr	r2, [r3, #0]
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	689b      	ldr	r3, [r3, #8]
    a188:	18d3      	adds	r3, r2, r3
    a18a:	e03a      	b.n	a202 <ensure+0xb2>

	newsize=pow2gt(needed);
    a18c:	683b      	ldr	r3, [r7, #0]
    a18e:	0018      	movs	r0, r3
    a190:	4b1e      	ldr	r3, [pc, #120]	; (a20c <ensure+0xbc>)
    a192:	4798      	blx	r3
    a194:	0003      	movs	r3, r0
    a196:	60fb      	str	r3, [r7, #12]
	newbuffer=(char*)cJSON_malloc(newsize);
    a198:	4b1d      	ldr	r3, [pc, #116]	; (a210 <ensure+0xc0>)
    a19a:	681b      	ldr	r3, [r3, #0]
    a19c:	68fa      	ldr	r2, [r7, #12]
    a19e:	0010      	movs	r0, r2
    a1a0:	4798      	blx	r3
    a1a2:	0003      	movs	r3, r0
    a1a4:	60bb      	str	r3, [r7, #8]
	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
    a1a6:	68bb      	ldr	r3, [r7, #8]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d10d      	bne.n	a1c8 <ensure+0x78>
    a1ac:	4b19      	ldr	r3, [pc, #100]	; (a214 <ensure+0xc4>)
    a1ae:	681a      	ldr	r2, [r3, #0]
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	681b      	ldr	r3, [r3, #0]
    a1b4:	0018      	movs	r0, r3
    a1b6:	4790      	blx	r2
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	2200      	movs	r2, #0
    a1bc:	605a      	str	r2, [r3, #4]
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	2200      	movs	r2, #0
    a1c2:	601a      	str	r2, [r3, #0]
    a1c4:	2300      	movs	r3, #0
    a1c6:	e01c      	b.n	a202 <ensure+0xb2>
	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
    a1c8:	68bb      	ldr	r3, [r7, #8]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d008      	beq.n	a1e0 <ensure+0x90>
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	6819      	ldr	r1, [r3, #0]
    a1d2:	687b      	ldr	r3, [r7, #4]
    a1d4:	685b      	ldr	r3, [r3, #4]
    a1d6:	001a      	movs	r2, r3
    a1d8:	68bb      	ldr	r3, [r7, #8]
    a1da:	0018      	movs	r0, r3
    a1dc:	4b0e      	ldr	r3, [pc, #56]	; (a218 <ensure+0xc8>)
    a1de:	4798      	blx	r3
	cJSON_free(p->buffer);
    a1e0:	4b0c      	ldr	r3, [pc, #48]	; (a214 <ensure+0xc4>)
    a1e2:	681a      	ldr	r2, [r3, #0]
    a1e4:	687b      	ldr	r3, [r7, #4]
    a1e6:	681b      	ldr	r3, [r3, #0]
    a1e8:	0018      	movs	r0, r3
    a1ea:	4790      	blx	r2
	p->length=newsize;
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	68fa      	ldr	r2, [r7, #12]
    a1f0:	605a      	str	r2, [r3, #4]
	p->buffer=newbuffer;
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	68ba      	ldr	r2, [r7, #8]
    a1f6:	601a      	str	r2, [r3, #0]
	return newbuffer+p->offset;
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	689b      	ldr	r3, [r3, #8]
    a1fc:	001a      	movs	r2, r3
    a1fe:	68bb      	ldr	r3, [r7, #8]
    a200:	189b      	adds	r3, r3, r2
}
    a202:	0018      	movs	r0, r3
    a204:	46bd      	mov	sp, r7
    a206:	b004      	add	sp, #16
    a208:	bd80      	pop	{r7, pc}
    a20a:	46c0      	nop			; (mov r8, r8)
    a20c:	0000a105 	.word	0x0000a105
    a210:	20000004 	.word	0x20000004
    a214:	20000008 	.word	0x20000008
    a218:	00019e6b 	.word	0x00019e6b

0000a21c <update>:

static int update(printbuffer *p)
{
    a21c:	b590      	push	{r4, r7, lr}
    a21e:	b085      	sub	sp, #20
    a220:	af00      	add	r7, sp, #0
    a222:	6078      	str	r0, [r7, #4]
	char *str;
	if (!p || !p->buffer) return 0;
    a224:	687b      	ldr	r3, [r7, #4]
    a226:	2b00      	cmp	r3, #0
    a228:	d003      	beq.n	a232 <update+0x16>
    a22a:	687b      	ldr	r3, [r7, #4]
    a22c:	681b      	ldr	r3, [r3, #0]
    a22e:	2b00      	cmp	r3, #0
    a230:	d101      	bne.n	a236 <update+0x1a>
    a232:	2300      	movs	r3, #0
    a234:	e00e      	b.n	a254 <update+0x38>
	str=p->buffer+p->offset;
    a236:	687b      	ldr	r3, [r7, #4]
    a238:	681a      	ldr	r2, [r3, #0]
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	689b      	ldr	r3, [r3, #8]
    a23e:	18d3      	adds	r3, r2, r3
    a240:	60fb      	str	r3, [r7, #12]
	return p->offset+strlen(str);
    a242:	687b      	ldr	r3, [r7, #4]
    a244:	689b      	ldr	r3, [r3, #8]
    a246:	001c      	movs	r4, r3
    a248:	68fb      	ldr	r3, [r7, #12]
    a24a:	0018      	movs	r0, r3
    a24c:	4b03      	ldr	r3, [pc, #12]	; (a25c <update+0x40>)
    a24e:	4798      	blx	r3
    a250:	0003      	movs	r3, r0
    a252:	18e3      	adds	r3, r4, r3
}
    a254:	0018      	movs	r0, r3
    a256:	46bd      	mov	sp, r7
    a258:	b005      	add	sp, #20
    a25a:	bd90      	pop	{r4, r7, pc}
    a25c:	0001a3e3 	.word	0x0001a3e3

0000a260 <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item,printbuffer *p)
{
    a260:	b5f0      	push	{r4, r5, r6, r7, lr}
    a262:	b08f      	sub	sp, #60	; 0x3c
    a264:	af00      	add	r7, sp, #0
    a266:	6278      	str	r0, [r7, #36]	; 0x24
    a268:	6239      	str	r1, [r7, #32]
	char *str=0;
    a26a:	2300      	movs	r3, #0
    a26c:	637b      	str	r3, [r7, #52]	; 0x34
	double d=item->valuedouble;
    a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a270:	69dc      	ldr	r4, [r3, #28]
    a272:	699b      	ldr	r3, [r3, #24]
    a274:	62bb      	str	r3, [r7, #40]	; 0x28
    a276:	62fc      	str	r4, [r7, #44]	; 0x2c
	if (d==0)
    a278:	4c6f      	ldr	r4, [pc, #444]	; (a438 <print_number+0x1d8>)
    a27a:	2200      	movs	r2, #0
    a27c:	2300      	movs	r3, #0
    a27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a282:	47a0      	blx	r4
    a284:	1e03      	subs	r3, r0, #0
    a286:	d01d      	beq.n	a2c4 <print_number+0x64>
	{
		if (p)	str=ensure(p,2);
    a288:	6a3b      	ldr	r3, [r7, #32]
    a28a:	2b00      	cmp	r3, #0
    a28c:	d007      	beq.n	a29e <print_number+0x3e>
    a28e:	6a3b      	ldr	r3, [r7, #32]
    a290:	2102      	movs	r1, #2
    a292:	0018      	movs	r0, r3
    a294:	4b69      	ldr	r3, [pc, #420]	; (a43c <print_number+0x1dc>)
    a296:	4798      	blx	r3
    a298:	0003      	movs	r3, r0
    a29a:	637b      	str	r3, [r7, #52]	; 0x34
    a29c:	e005      	b.n	a2aa <print_number+0x4a>
		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
    a29e:	4b68      	ldr	r3, [pc, #416]	; (a440 <print_number+0x1e0>)
    a2a0:	681b      	ldr	r3, [r3, #0]
    a2a2:	2002      	movs	r0, #2
    a2a4:	4798      	blx	r3
    a2a6:	0003      	movs	r3, r0
    a2a8:	637b      	str	r3, [r7, #52]	; 0x34
		if (str) strcpy(str,"0");
    a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d100      	bne.n	a2b2 <print_number+0x52>
    a2b0:	e0bd      	b.n	a42e <print_number+0x1ce>
    a2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a2b4:	4b63      	ldr	r3, [pc, #396]	; (a444 <print_number+0x1e4>)
    a2b6:	0010      	movs	r0, r2
    a2b8:	0019      	movs	r1, r3
    a2ba:	2302      	movs	r3, #2
    a2bc:	001a      	movs	r2, r3
    a2be:	4b62      	ldr	r3, [pc, #392]	; (a448 <print_number+0x1e8>)
    a2c0:	4798      	blx	r3
    a2c2:	e0b4      	b.n	a42e <print_number+0x1ce>
	}
	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
    a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2c6:	695a      	ldr	r2, [r3, #20]
    a2c8:	4b60      	ldr	r3, [pc, #384]	; (a44c <print_number+0x1ec>)
    a2ca:	0010      	movs	r0, r2
    a2cc:	4798      	blx	r3
    a2ce:	4c60      	ldr	r4, [pc, #384]	; (a450 <print_number+0x1f0>)
    a2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2d4:	47a0      	blx	r4
    a2d6:	0003      	movs	r3, r0
    a2d8:	000c      	movs	r4, r1
    a2da:	001a      	movs	r2, r3
    a2dc:	0015      	movs	r5, r2
    a2de:	0063      	lsls	r3, r4, #1
    a2e0:	085e      	lsrs	r6, r3, #1
    a2e2:	4c5c      	ldr	r4, [pc, #368]	; (a454 <print_number+0x1f4>)
    a2e4:	2200      	movs	r2, #0
    a2e6:	4b5c      	ldr	r3, [pc, #368]	; (a458 <print_number+0x1f8>)
    a2e8:	0028      	movs	r0, r5
    a2ea:	0031      	movs	r1, r6
    a2ec:	47a0      	blx	r4
    a2ee:	1e03      	subs	r3, r0, #0
    a2f0:	d02c      	beq.n	a34c <print_number+0xec>
    a2f2:	4c58      	ldr	r4, [pc, #352]	; (a454 <print_number+0x1f4>)
    a2f4:	4a59      	ldr	r2, [pc, #356]	; (a45c <print_number+0x1fc>)
    a2f6:	4b5a      	ldr	r3, [pc, #360]	; (a460 <print_number+0x200>)
    a2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a2fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a2fc:	47a0      	blx	r4
    a2fe:	1e03      	subs	r3, r0, #0
    a300:	d024      	beq.n	a34c <print_number+0xec>
    a302:	4c58      	ldr	r4, [pc, #352]	; (a464 <print_number+0x204>)
    a304:	2200      	movs	r2, #0
    a306:	4b58      	ldr	r3, [pc, #352]	; (a468 <print_number+0x208>)
    a308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a30a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a30c:	47a0      	blx	r4
    a30e:	1e03      	subs	r3, r0, #0
    a310:	d01c      	beq.n	a34c <print_number+0xec>
	{
		if (p)	str=ensure(p,21);
    a312:	6a3b      	ldr	r3, [r7, #32]
    a314:	2b00      	cmp	r3, #0
    a316:	d007      	beq.n	a328 <print_number+0xc8>
    a318:	6a3b      	ldr	r3, [r7, #32]
    a31a:	2115      	movs	r1, #21
    a31c:	0018      	movs	r0, r3
    a31e:	4b47      	ldr	r3, [pc, #284]	; (a43c <print_number+0x1dc>)
    a320:	4798      	blx	r3
    a322:	0003      	movs	r3, r0
    a324:	637b      	str	r3, [r7, #52]	; 0x34
    a326:	e005      	b.n	a334 <print_number+0xd4>
		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
    a328:	4b45      	ldr	r3, [pc, #276]	; (a440 <print_number+0x1e0>)
    a32a:	681b      	ldr	r3, [r3, #0]
    a32c:	2015      	movs	r0, #21
    a32e:	4798      	blx	r3
    a330:	0003      	movs	r3, r0
    a332:	637b      	str	r3, [r7, #52]	; 0x34
		if (str)	sprintf(str,"%d",item->valueint);
    a334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a336:	2b00      	cmp	r3, #0
    a338:	d100      	bne.n	a33c <print_number+0xdc>
    a33a:	e078      	b.n	a42e <print_number+0x1ce>
    a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a33e:	695a      	ldr	r2, [r3, #20]
    a340:	494a      	ldr	r1, [pc, #296]	; (a46c <print_number+0x20c>)
    a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a344:	0018      	movs	r0, r3
    a346:	4b4a      	ldr	r3, [pc, #296]	; (a470 <print_number+0x210>)
    a348:	4798      	blx	r3
    a34a:	e070      	b.n	a42e <print_number+0x1ce>
	}
	else
	{
		if (p)	str=ensure(p,64);
    a34c:	6a3b      	ldr	r3, [r7, #32]
    a34e:	2b00      	cmp	r3, #0
    a350:	d007      	beq.n	a362 <print_number+0x102>
    a352:	6a3b      	ldr	r3, [r7, #32]
    a354:	2140      	movs	r1, #64	; 0x40
    a356:	0018      	movs	r0, r3
    a358:	4b38      	ldr	r3, [pc, #224]	; (a43c <print_number+0x1dc>)
    a35a:	4798      	blx	r3
    a35c:	0003      	movs	r3, r0
    a35e:	637b      	str	r3, [r7, #52]	; 0x34
    a360:	e005      	b.n	a36e <print_number+0x10e>
		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
    a362:	4b37      	ldr	r3, [pc, #220]	; (a440 <print_number+0x1e0>)
    a364:	681b      	ldr	r3, [r3, #0]
    a366:	2040      	movs	r0, #64	; 0x40
    a368:	4798      	blx	r3
    a36a:	0003      	movs	r3, r0
    a36c:	637b      	str	r3, [r7, #52]	; 0x34
		if (str)
    a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a370:	2b00      	cmp	r3, #0
    a372:	d05c      	beq.n	a42e <print_number+0x1ce>
		{
			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
    a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a376:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    a378:	0018      	movs	r0, r3
    a37a:	0021      	movs	r1, r4
    a37c:	4b3d      	ldr	r3, [pc, #244]	; (a474 <print_number+0x214>)
    a37e:	4798      	blx	r3
    a380:	4c33      	ldr	r4, [pc, #204]	; (a450 <print_number+0x1f0>)
    a382:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a386:	47a0      	blx	r4
    a388:	0003      	movs	r3, r0
    a38a:	000c      	movs	r4, r1
    a38c:	001a      	movs	r2, r3
    a38e:	61ba      	str	r2, [r7, #24]
    a390:	0063      	lsls	r3, r4, #1
    a392:	085b      	lsrs	r3, r3, #1
    a394:	61fb      	str	r3, [r7, #28]
    a396:	4c2f      	ldr	r4, [pc, #188]	; (a454 <print_number+0x1f4>)
    a398:	2200      	movs	r2, #0
    a39a:	4b2f      	ldr	r3, [pc, #188]	; (a458 <print_number+0x1f8>)
    a39c:	69b8      	ldr	r0, [r7, #24]
    a39e:	69f9      	ldr	r1, [r7, #28]
    a3a0:	47a0      	blx	r4
    a3a2:	1e03      	subs	r3, r0, #0
    a3a4:	d016      	beq.n	a3d4 <print_number+0x174>
    a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a3a8:	613b      	str	r3, [r7, #16]
    a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3ac:	005b      	lsls	r3, r3, #1
    a3ae:	085b      	lsrs	r3, r3, #1
    a3b0:	617b      	str	r3, [r7, #20]
    a3b2:	4c31      	ldr	r4, [pc, #196]	; (a478 <print_number+0x218>)
    a3b4:	4a31      	ldr	r2, [pc, #196]	; (a47c <print_number+0x21c>)
    a3b6:	4b32      	ldr	r3, [pc, #200]	; (a480 <print_number+0x220>)
    a3b8:	6938      	ldr	r0, [r7, #16]
    a3ba:	6979      	ldr	r1, [r7, #20]
    a3bc:	47a0      	blx	r4
    a3be:	1e03      	subs	r3, r0, #0
    a3c0:	d008      	beq.n	a3d4 <print_number+0x174>
    a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a3c4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    a3c6:	492f      	ldr	r1, [pc, #188]	; (a484 <print_number+0x224>)
    a3c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a3ca:	001a      	movs	r2, r3
    a3cc:	0023      	movs	r3, r4
    a3ce:	4c28      	ldr	r4, [pc, #160]	; (a470 <print_number+0x210>)
    a3d0:	47a0      	blx	r4
    a3d2:	e02c      	b.n	a42e <print_number+0x1ce>
			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
    a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a3d6:	60bb      	str	r3, [r7, #8]
    a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3da:	005b      	lsls	r3, r3, #1
    a3dc:	085b      	lsrs	r3, r3, #1
    a3de:	60fb      	str	r3, [r7, #12]
    a3e0:	4c25      	ldr	r4, [pc, #148]	; (a478 <print_number+0x218>)
    a3e2:	4a29      	ldr	r2, [pc, #164]	; (a488 <print_number+0x228>)
    a3e4:	4b29      	ldr	r3, [pc, #164]	; (a48c <print_number+0x22c>)
    a3e6:	68b8      	ldr	r0, [r7, #8]
    a3e8:	68f9      	ldr	r1, [r7, #12]
    a3ea:	47a0      	blx	r4
    a3ec:	1e03      	subs	r3, r0, #0
    a3ee:	d10d      	bne.n	a40c <print_number+0x1ac>
    a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a3f2:	603b      	str	r3, [r7, #0]
    a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3f6:	005b      	lsls	r3, r3, #1
    a3f8:	085b      	lsrs	r3, r3, #1
    a3fa:	607b      	str	r3, [r7, #4]
    a3fc:	4c24      	ldr	r4, [pc, #144]	; (a490 <print_number+0x230>)
    a3fe:	2200      	movs	r2, #0
    a400:	4b24      	ldr	r3, [pc, #144]	; (a494 <print_number+0x234>)
    a402:	6838      	ldr	r0, [r7, #0]
    a404:	6879      	ldr	r1, [r7, #4]
    a406:	47a0      	blx	r4
    a408:	1e03      	subs	r3, r0, #0
    a40a:	d008      	beq.n	a41e <print_number+0x1be>
    a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a40e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    a410:	4921      	ldr	r1, [pc, #132]	; (a498 <print_number+0x238>)
    a412:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a414:	001a      	movs	r2, r3
    a416:	0023      	movs	r3, r4
    a418:	4c15      	ldr	r4, [pc, #84]	; (a470 <print_number+0x210>)
    a41a:	47a0      	blx	r4
    a41c:	e007      	b.n	a42e <print_number+0x1ce>
			else												sprintf(str,"%f",d);
    a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a420:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    a422:	491e      	ldr	r1, [pc, #120]	; (a49c <print_number+0x23c>)
    a424:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a426:	001a      	movs	r2, r3
    a428:	0023      	movs	r3, r4
    a42a:	4c11      	ldr	r4, [pc, #68]	; (a470 <print_number+0x210>)
    a42c:	47a0      	blx	r4
		}
	}
	return str;
    a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    a430:	0018      	movs	r0, r3
    a432:	46bd      	mov	sp, r7
    a434:	b00f      	add	sp, #60	; 0x3c
    a436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a438:	000181a9 	.word	0x000181a9
    a43c:	0000a151 	.word	0x0000a151
    a440:	20000004 	.word	0x20000004
    a444:	0001c648 	.word	0x0001c648
    a448:	00019e6b 	.word	0x00019e6b
    a44c:	00019c75 	.word	0x00019c75
    a450:	000195e1 	.word	0x000195e1
    a454:	000181c9 	.word	0x000181c9
    a458:	3cb00000 	.word	0x3cb00000
    a45c:	ffc00000 	.word	0xffc00000
    a460:	41dfffff 	.word	0x41dfffff
    a464:	000181f1 	.word	0x000181f1
    a468:	c1e00000 	.word	0xc1e00000
    a46c:	0001c64c 	.word	0x0001c64c
    a470:	0001a2c1 	.word	0x0001a2c1
    a474:	00017d6d 	.word	0x00017d6d
    a478:	000181b5 	.word	0x000181b5
    a47c:	e4c2f344 	.word	0xe4c2f344
    a480:	4c63e9e4 	.word	0x4c63e9e4
    a484:	0001c650 	.word	0x0001c650
    a488:	a0b5ed8d 	.word	0xa0b5ed8d
    a48c:	3eb0c6f7 	.word	0x3eb0c6f7
    a490:	000181dd 	.word	0x000181dd
    a494:	41cdcd65 	.word	0x41cdcd65
    a498:	0001c658 	.word	0x0001c658
    a49c:	0001c65c 	.word	0x0001c65c

0000a4a0 <print_string_ptr>:
							0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,
							0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0};

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str,printbuffer *p)
{
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b088      	sub	sp, #32
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	6078      	str	r0, [r7, #4]
    a4a8:	6039      	str	r1, [r7, #0]
	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
    a4aa:	2300      	movs	r3, #0
    a4ac:	613b      	str	r3, [r7, #16]
    a4ae:	2300      	movs	r3, #0
    a4b0:	60fb      	str	r3, [r7, #12]
	
	ptr=str;while (*ptr) flag|=escapable[*ptr++];
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	61fb      	str	r3, [r7, #28]
    a4b6:	e00a      	b.n	a4ce <print_string_ptr+0x2e>
    a4b8:	69fb      	ldr	r3, [r7, #28]
    a4ba:	1c5a      	adds	r2, r3, #1
    a4bc:	61fa      	str	r2, [r7, #28]
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	001a      	movs	r2, r3
    a4c2:	4b9b      	ldr	r3, [pc, #620]	; (a730 <print_string_ptr+0x290>)
    a4c4:	0092      	lsls	r2, r2, #2
    a4c6:	58d3      	ldr	r3, [r2, r3]
    a4c8:	68fa      	ldr	r2, [r7, #12]
    a4ca:	4313      	orrs	r3, r2
    a4cc:	60fb      	str	r3, [r7, #12]
    a4ce:	69fb      	ldr	r3, [r7, #28]
    a4d0:	781b      	ldrb	r3, [r3, #0]
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d1f0      	bne.n	a4b8 <print_string_ptr+0x18>
	if (!flag)
    a4d6:	68fb      	ldr	r3, [r7, #12]
    a4d8:	2b00      	cmp	r3, #0
    a4da:	d137      	bne.n	a54c <print_string_ptr+0xac>
	{
		len=ptr-str;
    a4dc:	69fa      	ldr	r2, [r7, #28]
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	1ad3      	subs	r3, r2, r3
    a4e2:	613b      	str	r3, [r7, #16]
		if (p) out=ensure(p,len+3);
    a4e4:	683b      	ldr	r3, [r7, #0]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d009      	beq.n	a4fe <print_string_ptr+0x5e>
    a4ea:	693b      	ldr	r3, [r7, #16]
    a4ec:	1cda      	adds	r2, r3, #3
    a4ee:	683b      	ldr	r3, [r7, #0]
    a4f0:	0011      	movs	r1, r2
    a4f2:	0018      	movs	r0, r3
    a4f4:	4b8f      	ldr	r3, [pc, #572]	; (a734 <print_string_ptr+0x294>)
    a4f6:	4798      	blx	r3
    a4f8:	0003      	movs	r3, r0
    a4fa:	617b      	str	r3, [r7, #20]
    a4fc:	e007      	b.n	a50e <print_string_ptr+0x6e>
		else		out=(char*)cJSON_malloc(len+3);
    a4fe:	4b8e      	ldr	r3, [pc, #568]	; (a738 <print_string_ptr+0x298>)
    a500:	681b      	ldr	r3, [r3, #0]
    a502:	693a      	ldr	r2, [r7, #16]
    a504:	3203      	adds	r2, #3
    a506:	0010      	movs	r0, r2
    a508:	4798      	blx	r3
    a50a:	0003      	movs	r3, r0
    a50c:	617b      	str	r3, [r7, #20]
		if (!out) return 0;
    a50e:	697b      	ldr	r3, [r7, #20]
    a510:	2b00      	cmp	r3, #0
    a512:	d101      	bne.n	a518 <print_string_ptr+0x78>
    a514:	2300      	movs	r3, #0
    a516:	e106      	b.n	a726 <print_string_ptr+0x286>
		ptr2=out;*ptr2++='\"';
    a518:	697b      	ldr	r3, [r7, #20]
    a51a:	61bb      	str	r3, [r7, #24]
    a51c:	69bb      	ldr	r3, [r7, #24]
    a51e:	1c5a      	adds	r2, r3, #1
    a520:	61ba      	str	r2, [r7, #24]
    a522:	2222      	movs	r2, #34	; 0x22
    a524:	701a      	strb	r2, [r3, #0]
		strcpy(ptr2,str);
    a526:	687a      	ldr	r2, [r7, #4]
    a528:	69bb      	ldr	r3, [r7, #24]
    a52a:	0011      	movs	r1, r2
    a52c:	0018      	movs	r0, r3
    a52e:	4b83      	ldr	r3, [pc, #524]	; (a73c <print_string_ptr+0x29c>)
    a530:	4798      	blx	r3
		ptr2[len]='\"';
    a532:	693b      	ldr	r3, [r7, #16]
    a534:	69ba      	ldr	r2, [r7, #24]
    a536:	18d3      	adds	r3, r2, r3
    a538:	2222      	movs	r2, #34	; 0x22
    a53a:	701a      	strb	r2, [r3, #0]
		ptr2[len+1]=0;
    a53c:	693b      	ldr	r3, [r7, #16]
    a53e:	3301      	adds	r3, #1
    a540:	69ba      	ldr	r2, [r7, #24]
    a542:	18d3      	adds	r3, r2, r3
    a544:	2200      	movs	r2, #0
    a546:	701a      	strb	r2, [r3, #0]
		return out;
    a548:	697b      	ldr	r3, [r7, #20]
    a54a:	e0ec      	b.n	a726 <print_string_ptr+0x286>
	}
	
	if (!str)
    a54c:	687b      	ldr	r3, [r7, #4]
    a54e:	2b00      	cmp	r3, #0
    a550:	d11f      	bne.n	a592 <print_string_ptr+0xf2>
	{
		if (p)	out=ensure(p,3);
    a552:	683b      	ldr	r3, [r7, #0]
    a554:	2b00      	cmp	r3, #0
    a556:	d007      	beq.n	a568 <print_string_ptr+0xc8>
    a558:	683b      	ldr	r3, [r7, #0]
    a55a:	2103      	movs	r1, #3
    a55c:	0018      	movs	r0, r3
    a55e:	4b75      	ldr	r3, [pc, #468]	; (a734 <print_string_ptr+0x294>)
    a560:	4798      	blx	r3
    a562:	0003      	movs	r3, r0
    a564:	617b      	str	r3, [r7, #20]
    a566:	e005      	b.n	a574 <print_string_ptr+0xd4>
		else	out=(char*)cJSON_malloc(3);
    a568:	4b73      	ldr	r3, [pc, #460]	; (a738 <print_string_ptr+0x298>)
    a56a:	681b      	ldr	r3, [r3, #0]
    a56c:	2003      	movs	r0, #3
    a56e:	4798      	blx	r3
    a570:	0003      	movs	r3, r0
    a572:	617b      	str	r3, [r7, #20]
		if (!out) return 0;
    a574:	697b      	ldr	r3, [r7, #20]
    a576:	2b00      	cmp	r3, #0
    a578:	d101      	bne.n	a57e <print_string_ptr+0xde>
    a57a:	2300      	movs	r3, #0
    a57c:	e0d3      	b.n	a726 <print_string_ptr+0x286>
		strcpy(out,"\"\"");
    a57e:	697a      	ldr	r2, [r7, #20]
    a580:	4b6f      	ldr	r3, [pc, #444]	; (a740 <print_string_ptr+0x2a0>)
    a582:	0010      	movs	r0, r2
    a584:	0019      	movs	r1, r3
    a586:	2303      	movs	r3, #3
    a588:	001a      	movs	r2, r3
    a58a:	4b6e      	ldr	r3, [pc, #440]	; (a744 <print_string_ptr+0x2a4>)
    a58c:	4798      	blx	r3
		return out;
    a58e:	697b      	ldr	r3, [r7, #20]
    a590:	e0c9      	b.n	a726 <print_string_ptr+0x286>
	}
	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
    a592:	687b      	ldr	r3, [r7, #4]
    a594:	61fb      	str	r3, [r7, #28]
    a596:	e018      	b.n	a5ca <print_string_ptr+0x12a>
    a598:	230b      	movs	r3, #11
    a59a:	18fb      	adds	r3, r7, r3
    a59c:	781a      	ldrb	r2, [r3, #0]
    a59e:	4b6a      	ldr	r3, [pc, #424]	; (a748 <print_string_ptr+0x2a8>)
    a5a0:	0011      	movs	r1, r2
    a5a2:	0018      	movs	r0, r3
    a5a4:	4b69      	ldr	r3, [pc, #420]	; (a74c <print_string_ptr+0x2ac>)
    a5a6:	4798      	blx	r3
    a5a8:	1e03      	subs	r3, r0, #0
    a5aa:	d003      	beq.n	a5b4 <print_string_ptr+0x114>
    a5ac:	693b      	ldr	r3, [r7, #16]
    a5ae:	3301      	adds	r3, #1
    a5b0:	613b      	str	r3, [r7, #16]
    a5b2:	e007      	b.n	a5c4 <print_string_ptr+0x124>
    a5b4:	230b      	movs	r3, #11
    a5b6:	18fb      	adds	r3, r7, r3
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	2b1f      	cmp	r3, #31
    a5bc:	d802      	bhi.n	a5c4 <print_string_ptr+0x124>
    a5be:	693b      	ldr	r3, [r7, #16]
    a5c0:	3305      	adds	r3, #5
    a5c2:	613b      	str	r3, [r7, #16]
    a5c4:	69fb      	ldr	r3, [r7, #28]
    a5c6:	3301      	adds	r3, #1
    a5c8:	61fb      	str	r3, [r7, #28]
    a5ca:	230b      	movs	r3, #11
    a5cc:	18fb      	adds	r3, r7, r3
    a5ce:	69fa      	ldr	r2, [r7, #28]
    a5d0:	7812      	ldrb	r2, [r2, #0]
    a5d2:	701a      	strb	r2, [r3, #0]
    a5d4:	230b      	movs	r3, #11
    a5d6:	18fb      	adds	r3, r7, r3
    a5d8:	781b      	ldrb	r3, [r3, #0]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d005      	beq.n	a5ea <print_string_ptr+0x14a>
    a5de:	693b      	ldr	r3, [r7, #16]
    a5e0:	3301      	adds	r3, #1
    a5e2:	613b      	str	r3, [r7, #16]
    a5e4:	693b      	ldr	r3, [r7, #16]
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d1d6      	bne.n	a598 <print_string_ptr+0xf8>
	
	if (p)	out=ensure(p,len+3);
    a5ea:	683b      	ldr	r3, [r7, #0]
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	d009      	beq.n	a604 <print_string_ptr+0x164>
    a5f0:	693b      	ldr	r3, [r7, #16]
    a5f2:	1cda      	adds	r2, r3, #3
    a5f4:	683b      	ldr	r3, [r7, #0]
    a5f6:	0011      	movs	r1, r2
    a5f8:	0018      	movs	r0, r3
    a5fa:	4b4e      	ldr	r3, [pc, #312]	; (a734 <print_string_ptr+0x294>)
    a5fc:	4798      	blx	r3
    a5fe:	0003      	movs	r3, r0
    a600:	617b      	str	r3, [r7, #20]
    a602:	e007      	b.n	a614 <print_string_ptr+0x174>
	else	out=(char*)cJSON_malloc(len+3);
    a604:	4b4c      	ldr	r3, [pc, #304]	; (a738 <print_string_ptr+0x298>)
    a606:	681b      	ldr	r3, [r3, #0]
    a608:	693a      	ldr	r2, [r7, #16]
    a60a:	3203      	adds	r2, #3
    a60c:	0010      	movs	r0, r2
    a60e:	4798      	blx	r3
    a610:	0003      	movs	r3, r0
    a612:	617b      	str	r3, [r7, #20]
	if (!out) return 0;
    a614:	697b      	ldr	r3, [r7, #20]
    a616:	2b00      	cmp	r3, #0
    a618:	d101      	bne.n	a61e <print_string_ptr+0x17e>
    a61a:	2300      	movs	r3, #0
    a61c:	e083      	b.n	a726 <print_string_ptr+0x286>

	ptr2=out;ptr=str;
    a61e:	697b      	ldr	r3, [r7, #20]
    a620:	61bb      	str	r3, [r7, #24]
    a622:	687b      	ldr	r3, [r7, #4]
    a624:	61fb      	str	r3, [r7, #28]
	*ptr2++='\"';
    a626:	69bb      	ldr	r3, [r7, #24]
    a628:	1c5a      	adds	r2, r3, #1
    a62a:	61ba      	str	r2, [r7, #24]
    a62c:	2222      	movs	r2, #34	; 0x22
    a62e:	701a      	strb	r2, [r3, #0]
	while (*ptr)
    a630:	e06a      	b.n	a708 <print_string_ptr+0x268>
	{
		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
    a632:	69fb      	ldr	r3, [r7, #28]
    a634:	781b      	ldrb	r3, [r3, #0]
    a636:	2b1f      	cmp	r3, #31
    a638:	d910      	bls.n	a65c <print_string_ptr+0x1bc>
    a63a:	69fb      	ldr	r3, [r7, #28]
    a63c:	781b      	ldrb	r3, [r3, #0]
    a63e:	2b22      	cmp	r3, #34	; 0x22
    a640:	d00c      	beq.n	a65c <print_string_ptr+0x1bc>
    a642:	69fb      	ldr	r3, [r7, #28]
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	2b5c      	cmp	r3, #92	; 0x5c
    a648:	d008      	beq.n	a65c <print_string_ptr+0x1bc>
    a64a:	69bb      	ldr	r3, [r7, #24]
    a64c:	1c5a      	adds	r2, r3, #1
    a64e:	61ba      	str	r2, [r7, #24]
    a650:	69fa      	ldr	r2, [r7, #28]
    a652:	1c51      	adds	r1, r2, #1
    a654:	61f9      	str	r1, [r7, #28]
    a656:	7812      	ldrb	r2, [r2, #0]
    a658:	701a      	strb	r2, [r3, #0]
    a65a:	e055      	b.n	a708 <print_string_ptr+0x268>
		else
		{
			*ptr2++='\\';
    a65c:	69bb      	ldr	r3, [r7, #24]
    a65e:	1c5a      	adds	r2, r3, #1
    a660:	61ba      	str	r2, [r7, #24]
    a662:	225c      	movs	r2, #92	; 0x5c
    a664:	701a      	strb	r2, [r3, #0]
			switch (token=*ptr++)
    a666:	69fb      	ldr	r3, [r7, #28]
    a668:	1c5a      	adds	r2, r3, #1
    a66a:	61fa      	str	r2, [r7, #28]
    a66c:	220b      	movs	r2, #11
    a66e:	18ba      	adds	r2, r7, r2
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	7013      	strb	r3, [r2, #0]
    a674:	230b      	movs	r3, #11
    a676:	18fb      	adds	r3, r7, r3
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	2b0c      	cmp	r3, #12
    a67c:	d020      	beq.n	a6c0 <print_string_ptr+0x220>
    a67e:	dc06      	bgt.n	a68e <print_string_ptr+0x1ee>
    a680:	2b09      	cmp	r3, #9
    a682:	d02f      	beq.n	a6e4 <print_string_ptr+0x244>
    a684:	2b0a      	cmp	r3, #10
    a686:	d021      	beq.n	a6cc <print_string_ptr+0x22c>
    a688:	2b08      	cmp	r3, #8
    a68a:	d013      	beq.n	a6b4 <print_string_ptr+0x214>
    a68c:	e030      	b.n	a6f0 <print_string_ptr+0x250>
    a68e:	2b22      	cmp	r3, #34	; 0x22
    a690:	d00a      	beq.n	a6a8 <print_string_ptr+0x208>
    a692:	2b5c      	cmp	r3, #92	; 0x5c
    a694:	d002      	beq.n	a69c <print_string_ptr+0x1fc>
    a696:	2b0d      	cmp	r3, #13
    a698:	d01e      	beq.n	a6d8 <print_string_ptr+0x238>
    a69a:	e029      	b.n	a6f0 <print_string_ptr+0x250>
			{
				case '\\':	*ptr2++='\\';	break;
    a69c:	69bb      	ldr	r3, [r7, #24]
    a69e:	1c5a      	adds	r2, r3, #1
    a6a0:	61ba      	str	r2, [r7, #24]
    a6a2:	225c      	movs	r2, #92	; 0x5c
    a6a4:	701a      	strb	r2, [r3, #0]
    a6a6:	e02f      	b.n	a708 <print_string_ptr+0x268>
				case '\"':	*ptr2++='\"';	break;
    a6a8:	69bb      	ldr	r3, [r7, #24]
    a6aa:	1c5a      	adds	r2, r3, #1
    a6ac:	61ba      	str	r2, [r7, #24]
    a6ae:	2222      	movs	r2, #34	; 0x22
    a6b0:	701a      	strb	r2, [r3, #0]
    a6b2:	e029      	b.n	a708 <print_string_ptr+0x268>
				case '\b':	*ptr2++='b';	break;
    a6b4:	69bb      	ldr	r3, [r7, #24]
    a6b6:	1c5a      	adds	r2, r3, #1
    a6b8:	61ba      	str	r2, [r7, #24]
    a6ba:	2262      	movs	r2, #98	; 0x62
    a6bc:	701a      	strb	r2, [r3, #0]
    a6be:	e023      	b.n	a708 <print_string_ptr+0x268>
				case '\f':	*ptr2++='f';	break;
    a6c0:	69bb      	ldr	r3, [r7, #24]
    a6c2:	1c5a      	adds	r2, r3, #1
    a6c4:	61ba      	str	r2, [r7, #24]
    a6c6:	2266      	movs	r2, #102	; 0x66
    a6c8:	701a      	strb	r2, [r3, #0]
    a6ca:	e01d      	b.n	a708 <print_string_ptr+0x268>
				case '\n':	*ptr2++='n';	break;
    a6cc:	69bb      	ldr	r3, [r7, #24]
    a6ce:	1c5a      	adds	r2, r3, #1
    a6d0:	61ba      	str	r2, [r7, #24]
    a6d2:	226e      	movs	r2, #110	; 0x6e
    a6d4:	701a      	strb	r2, [r3, #0]
    a6d6:	e017      	b.n	a708 <print_string_ptr+0x268>
				case '\r':	*ptr2++='r';	break;
    a6d8:	69bb      	ldr	r3, [r7, #24]
    a6da:	1c5a      	adds	r2, r3, #1
    a6dc:	61ba      	str	r2, [r7, #24]
    a6de:	2272      	movs	r2, #114	; 0x72
    a6e0:	701a      	strb	r2, [r3, #0]
    a6e2:	e011      	b.n	a708 <print_string_ptr+0x268>
				case '\t':	*ptr2++='t';	break;
    a6e4:	69bb      	ldr	r3, [r7, #24]
    a6e6:	1c5a      	adds	r2, r3, #1
    a6e8:	61ba      	str	r2, [r7, #24]
    a6ea:	2274      	movs	r2, #116	; 0x74
    a6ec:	701a      	strb	r2, [r3, #0]
    a6ee:	e00b      	b.n	a708 <print_string_ptr+0x268>
				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
    a6f0:	230b      	movs	r3, #11
    a6f2:	18fb      	adds	r3, r7, r3
    a6f4:	781a      	ldrb	r2, [r3, #0]
    a6f6:	4916      	ldr	r1, [pc, #88]	; (a750 <print_string_ptr+0x2b0>)
    a6f8:	69bb      	ldr	r3, [r7, #24]
    a6fa:	0018      	movs	r0, r3
    a6fc:	4b15      	ldr	r3, [pc, #84]	; (a754 <print_string_ptr+0x2b4>)
    a6fe:	4798      	blx	r3
    a700:	69bb      	ldr	r3, [r7, #24]
    a702:	3305      	adds	r3, #5
    a704:	61bb      	str	r3, [r7, #24]
    a706:	46c0      	nop			; (mov r8, r8)
	while (*ptr)
    a708:	69fb      	ldr	r3, [r7, #28]
    a70a:	781b      	ldrb	r3, [r3, #0]
    a70c:	2b00      	cmp	r3, #0
    a70e:	d190      	bne.n	a632 <print_string_ptr+0x192>
			}
		}
	}
	*ptr2++='\"';*ptr2++=0;
    a710:	69bb      	ldr	r3, [r7, #24]
    a712:	1c5a      	adds	r2, r3, #1
    a714:	61ba      	str	r2, [r7, #24]
    a716:	2222      	movs	r2, #34	; 0x22
    a718:	701a      	strb	r2, [r3, #0]
    a71a:	69bb      	ldr	r3, [r7, #24]
    a71c:	1c5a      	adds	r2, r3, #1
    a71e:	61ba      	str	r2, [r7, #24]
    a720:	2200      	movs	r2, #0
    a722:	701a      	strb	r2, [r3, #0]
	return out;
    a724:	697b      	ldr	r3, [r7, #20]
}
    a726:	0018      	movs	r0, r3
    a728:	46bd      	mov	sp, r7
    a72a:	b008      	add	sp, #32
    a72c:	bd80      	pop	{r7, pc}
    a72e:	46c0      	nop			; (mov r8, r8)
    a730:	2000000c 	.word	0x2000000c
    a734:	0000a151 	.word	0x0000a151
    a738:	20000004 	.word	0x20000004
    a73c:	0001a3d3 	.word	0x0001a3d3
    a740:	0001c660 	.word	0x0001c660
    a744:	00019e6b 	.word	0x00019e6b
    a748:	0001c664 	.word	0x0001c664
    a74c:	0001a3b7 	.word	0x0001a3b7
    a750:	0001c66c 	.word	0x0001c66c
    a754:	0001a2c1 	.word	0x0001a2c1

0000a758 <print_string>:
/* Invote print_string_ptr (which is useful) on an item. */
static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}
    a758:	b580      	push	{r7, lr}
    a75a:	b082      	sub	sp, #8
    a75c:	af00      	add	r7, sp, #0
    a75e:	6078      	str	r0, [r7, #4]
    a760:	6039      	str	r1, [r7, #0]
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	691b      	ldr	r3, [r3, #16]
    a766:	683a      	ldr	r2, [r7, #0]
    a768:	0011      	movs	r1, r2
    a76a:	0018      	movs	r0, r3
    a76c:	4b03      	ldr	r3, [pc, #12]	; (a77c <print_string+0x24>)
    a76e:	4798      	blx	r3
    a770:	0003      	movs	r3, r0
    a772:	0018      	movs	r0, r3
    a774:	46bd      	mov	sp, r7
    a776:	b002      	add	sp, #8
    a778:	bd80      	pop	{r7, pc}
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	0000a4a1 	.word	0x0000a4a1

0000a780 <cJSON_Print>:
}
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
    a780:	b590      	push	{r4, r7, lr}
    a782:	b083      	sub	sp, #12
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    a788:	6878      	ldr	r0, [r7, #4]
    a78a:	2300      	movs	r3, #0
    a78c:	2201      	movs	r2, #1
    a78e:	2100      	movs	r1, #0
    a790:	4c03      	ldr	r4, [pc, #12]	; (a7a0 <cJSON_Print+0x20>)
    a792:	47a0      	blx	r4
    a794:	0003      	movs	r3, r0
    a796:	0018      	movs	r0, r3
    a798:	46bd      	mov	sp, r7
    a79a:	b003      	add	sp, #12
    a79c:	bd90      	pop	{r4, r7, pc}
    a79e:	46c0      	nop			; (mov r8, r8)
    a7a0:	0000a7a5 	.word	0x0000a7a5

0000a7a4 <print_value>:
	ep=value;return 0;	/* failure. */
}

/* Render a value to text. */
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
{
    a7a4:	b590      	push	{r4, r7, lr}
    a7a6:	b087      	sub	sp, #28
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	60f8      	str	r0, [r7, #12]
    a7ac:	60b9      	str	r1, [r7, #8]
    a7ae:	607a      	str	r2, [r7, #4]
    a7b0:	603b      	str	r3, [r7, #0]
	char *out=0;
    a7b2:	2300      	movs	r3, #0
    a7b4:	617b      	str	r3, [r7, #20]
	if (!item) return 0;
    a7b6:	68fb      	ldr	r3, [r7, #12]
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d101      	bne.n	a7c0 <print_value+0x1c>
    a7bc:	2300      	movs	r3, #0
    a7be:	e0b7      	b.n	a930 <print_value+0x18c>
	if (p)
    a7c0:	683b      	ldr	r3, [r7, #0]
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d06c      	beq.n	a8a0 <print_value+0xfc>
	{
		switch ((item->type)&255)
    a7c6:	68fb      	ldr	r3, [r7, #12]
    a7c8:	68db      	ldr	r3, [r3, #12]
    a7ca:	22ff      	movs	r2, #255	; 0xff
    a7cc:	4013      	ands	r3, r2
    a7ce:	2b06      	cmp	r3, #6
    a7d0:	d900      	bls.n	a7d4 <print_value+0x30>
    a7d2:	e0ac      	b.n	a92e <print_value+0x18a>
    a7d4:	009a      	lsls	r2, r3, #2
    a7d6:	4b58      	ldr	r3, [pc, #352]	; (a938 <print_value+0x194>)
    a7d8:	18d3      	adds	r3, r2, r3
    a7da:	681b      	ldr	r3, [r3, #0]
    a7dc:	469f      	mov	pc, r3
		{
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
    a7de:	683b      	ldr	r3, [r7, #0]
    a7e0:	2105      	movs	r1, #5
    a7e2:	0018      	movs	r0, r3
    a7e4:	4b55      	ldr	r3, [pc, #340]	; (a93c <print_value+0x198>)
    a7e6:	4798      	blx	r3
    a7e8:	0003      	movs	r3, r0
    a7ea:	617b      	str	r3, [r7, #20]
    a7ec:	697b      	ldr	r3, [r7, #20]
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d100      	bne.n	a7f4 <print_value+0x50>
    a7f2:	e097      	b.n	a924 <print_value+0x180>
    a7f4:	697a      	ldr	r2, [r7, #20]
    a7f6:	4b52      	ldr	r3, [pc, #328]	; (a940 <print_value+0x19c>)
    a7f8:	0010      	movs	r0, r2
    a7fa:	0019      	movs	r1, r3
    a7fc:	2305      	movs	r3, #5
    a7fe:	001a      	movs	r2, r3
    a800:	4b50      	ldr	r3, [pc, #320]	; (a944 <print_value+0x1a0>)
    a802:	4798      	blx	r3
    a804:	e08e      	b.n	a924 <print_value+0x180>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
    a806:	683b      	ldr	r3, [r7, #0]
    a808:	2106      	movs	r1, #6
    a80a:	0018      	movs	r0, r3
    a80c:	4b4b      	ldr	r3, [pc, #300]	; (a93c <print_value+0x198>)
    a80e:	4798      	blx	r3
    a810:	0003      	movs	r3, r0
    a812:	617b      	str	r3, [r7, #20]
    a814:	697b      	ldr	r3, [r7, #20]
    a816:	2b00      	cmp	r3, #0
    a818:	d100      	bne.n	a81c <print_value+0x78>
    a81a:	e085      	b.n	a928 <print_value+0x184>
    a81c:	697a      	ldr	r2, [r7, #20]
    a81e:	4b4a      	ldr	r3, [pc, #296]	; (a948 <print_value+0x1a4>)
    a820:	0010      	movs	r0, r2
    a822:	0019      	movs	r1, r3
    a824:	2306      	movs	r3, #6
    a826:	001a      	movs	r2, r3
    a828:	4b46      	ldr	r3, [pc, #280]	; (a944 <print_value+0x1a0>)
    a82a:	4798      	blx	r3
    a82c:	e07c      	b.n	a928 <print_value+0x184>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
    a82e:	683b      	ldr	r3, [r7, #0]
    a830:	2105      	movs	r1, #5
    a832:	0018      	movs	r0, r3
    a834:	4b41      	ldr	r3, [pc, #260]	; (a93c <print_value+0x198>)
    a836:	4798      	blx	r3
    a838:	0003      	movs	r3, r0
    a83a:	617b      	str	r3, [r7, #20]
    a83c:	697b      	ldr	r3, [r7, #20]
    a83e:	2b00      	cmp	r3, #0
    a840:	d100      	bne.n	a844 <print_value+0xa0>
    a842:	e073      	b.n	a92c <print_value+0x188>
    a844:	697a      	ldr	r2, [r7, #20]
    a846:	4b41      	ldr	r3, [pc, #260]	; (a94c <print_value+0x1a8>)
    a848:	0010      	movs	r0, r2
    a84a:	0019      	movs	r1, r3
    a84c:	2305      	movs	r3, #5
    a84e:	001a      	movs	r2, r3
    a850:	4b3c      	ldr	r3, [pc, #240]	; (a944 <print_value+0x1a0>)
    a852:	4798      	blx	r3
    a854:	e06a      	b.n	a92c <print_value+0x188>
			case cJSON_Number:	out=print_number(item,p);break;
    a856:	683a      	ldr	r2, [r7, #0]
    a858:	68fb      	ldr	r3, [r7, #12]
    a85a:	0011      	movs	r1, r2
    a85c:	0018      	movs	r0, r3
    a85e:	4b3c      	ldr	r3, [pc, #240]	; (a950 <print_value+0x1ac>)
    a860:	4798      	blx	r3
    a862:	0003      	movs	r3, r0
    a864:	617b      	str	r3, [r7, #20]
    a866:	e062      	b.n	a92e <print_value+0x18a>
			case cJSON_String:	out=print_string(item,p);break;
    a868:	683a      	ldr	r2, [r7, #0]
    a86a:	68fb      	ldr	r3, [r7, #12]
    a86c:	0011      	movs	r1, r2
    a86e:	0018      	movs	r0, r3
    a870:	4b38      	ldr	r3, [pc, #224]	; (a954 <print_value+0x1b0>)
    a872:	4798      	blx	r3
    a874:	0003      	movs	r3, r0
    a876:	617b      	str	r3, [r7, #20]
    a878:	e059      	b.n	a92e <print_value+0x18a>
			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
    a87a:	683b      	ldr	r3, [r7, #0]
    a87c:	687a      	ldr	r2, [r7, #4]
    a87e:	68b9      	ldr	r1, [r7, #8]
    a880:	68f8      	ldr	r0, [r7, #12]
    a882:	4c35      	ldr	r4, [pc, #212]	; (a958 <print_value+0x1b4>)
    a884:	47a0      	blx	r4
    a886:	0003      	movs	r3, r0
    a888:	617b      	str	r3, [r7, #20]
    a88a:	e050      	b.n	a92e <print_value+0x18a>
			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
    a88c:	683b      	ldr	r3, [r7, #0]
    a88e:	687a      	ldr	r2, [r7, #4]
    a890:	68b9      	ldr	r1, [r7, #8]
    a892:	68f8      	ldr	r0, [r7, #12]
    a894:	4c31      	ldr	r4, [pc, #196]	; (a95c <print_value+0x1b8>)
    a896:	47a0      	blx	r4
    a898:	0003      	movs	r3, r0
    a89a:	617b      	str	r3, [r7, #20]
    a89c:	46c0      	nop			; (mov r8, r8)
    a89e:	e046      	b.n	a92e <print_value+0x18a>
		}
	}
	else
	{
		switch ((item->type)&255)
    a8a0:	68fb      	ldr	r3, [r7, #12]
    a8a2:	68db      	ldr	r3, [r3, #12]
    a8a4:	22ff      	movs	r2, #255	; 0xff
    a8a6:	4013      	ands	r3, r2
    a8a8:	2b06      	cmp	r3, #6
    a8aa:	d840      	bhi.n	a92e <print_value+0x18a>
    a8ac:	009a      	lsls	r2, r3, #2
    a8ae:	4b2c      	ldr	r3, [pc, #176]	; (a960 <print_value+0x1bc>)
    a8b0:	18d3      	adds	r3, r2, r3
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	469f      	mov	pc, r3
		{
			case cJSON_NULL:	out=cJSON_strdup("null");	break;
    a8b6:	4b22      	ldr	r3, [pc, #136]	; (a940 <print_value+0x19c>)
    a8b8:	0018      	movs	r0, r3
    a8ba:	4b2a      	ldr	r3, [pc, #168]	; (a964 <print_value+0x1c0>)
    a8bc:	4798      	blx	r3
    a8be:	0003      	movs	r3, r0
    a8c0:	617b      	str	r3, [r7, #20]
    a8c2:	e034      	b.n	a92e <print_value+0x18a>
			case cJSON_False:	out=cJSON_strdup("false");break;
    a8c4:	4b20      	ldr	r3, [pc, #128]	; (a948 <print_value+0x1a4>)
    a8c6:	0018      	movs	r0, r3
    a8c8:	4b26      	ldr	r3, [pc, #152]	; (a964 <print_value+0x1c0>)
    a8ca:	4798      	blx	r3
    a8cc:	0003      	movs	r3, r0
    a8ce:	617b      	str	r3, [r7, #20]
    a8d0:	e02d      	b.n	a92e <print_value+0x18a>
			case cJSON_True:	out=cJSON_strdup("true"); break;
    a8d2:	4b1e      	ldr	r3, [pc, #120]	; (a94c <print_value+0x1a8>)
    a8d4:	0018      	movs	r0, r3
    a8d6:	4b23      	ldr	r3, [pc, #140]	; (a964 <print_value+0x1c0>)
    a8d8:	4798      	blx	r3
    a8da:	0003      	movs	r3, r0
    a8dc:	617b      	str	r3, [r7, #20]
    a8de:	e026      	b.n	a92e <print_value+0x18a>
			case cJSON_Number:	out=print_number(item,0);break;
    a8e0:	68fb      	ldr	r3, [r7, #12]
    a8e2:	2100      	movs	r1, #0
    a8e4:	0018      	movs	r0, r3
    a8e6:	4b1a      	ldr	r3, [pc, #104]	; (a950 <print_value+0x1ac>)
    a8e8:	4798      	blx	r3
    a8ea:	0003      	movs	r3, r0
    a8ec:	617b      	str	r3, [r7, #20]
    a8ee:	e01e      	b.n	a92e <print_value+0x18a>
			case cJSON_String:	out=print_string(item,0);break;
    a8f0:	68fb      	ldr	r3, [r7, #12]
    a8f2:	2100      	movs	r1, #0
    a8f4:	0018      	movs	r0, r3
    a8f6:	4b17      	ldr	r3, [pc, #92]	; (a954 <print_value+0x1b0>)
    a8f8:	4798      	blx	r3
    a8fa:	0003      	movs	r3, r0
    a8fc:	617b      	str	r3, [r7, #20]
    a8fe:	e016      	b.n	a92e <print_value+0x18a>
			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
    a900:	687a      	ldr	r2, [r7, #4]
    a902:	68b9      	ldr	r1, [r7, #8]
    a904:	68f8      	ldr	r0, [r7, #12]
    a906:	2300      	movs	r3, #0
    a908:	4c13      	ldr	r4, [pc, #76]	; (a958 <print_value+0x1b4>)
    a90a:	47a0      	blx	r4
    a90c:	0003      	movs	r3, r0
    a90e:	617b      	str	r3, [r7, #20]
    a910:	e00d      	b.n	a92e <print_value+0x18a>
			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
    a912:	687a      	ldr	r2, [r7, #4]
    a914:	68b9      	ldr	r1, [r7, #8]
    a916:	68f8      	ldr	r0, [r7, #12]
    a918:	2300      	movs	r3, #0
    a91a:	4c10      	ldr	r4, [pc, #64]	; (a95c <print_value+0x1b8>)
    a91c:	47a0      	blx	r4
    a91e:	0003      	movs	r3, r0
    a920:	617b      	str	r3, [r7, #20]
    a922:	e004      	b.n	a92e <print_value+0x18a>
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
    a924:	46c0      	nop			; (mov r8, r8)
    a926:	e002      	b.n	a92e <print_value+0x18a>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
    a928:	46c0      	nop			; (mov r8, r8)
    a92a:	e000      	b.n	a92e <print_value+0x18a>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
    a92c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return out;
    a92e:	697b      	ldr	r3, [r7, #20]
}
    a930:	0018      	movs	r0, r3
    a932:	46bd      	mov	sp, r7
    a934:	b007      	add	sp, #28
    a936:	bd90      	pop	{r4, r7, pc}
    a938:	0001c690 	.word	0x0001c690
    a93c:	0000a151 	.word	0x0000a151
    a940:	0001c674 	.word	0x0001c674
    a944:	00019e6b 	.word	0x00019e6b
    a948:	0001c67c 	.word	0x0001c67c
    a94c:	0001c684 	.word	0x0001c684
    a950:	0000a261 	.word	0x0000a261
    a954:	0000a759 	.word	0x0000a759
    a958:	0000a969 	.word	0x0000a969
    a95c:	0000acbd 	.word	0x0000acbd
    a960:	0001c6ac 	.word	0x0001c6ac
    a964:	00009fed 	.word	0x00009fed

0000a968 <print_array>:
	ep=value;return 0;	/* malformed. */
}

/* Render an array to text */
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
{
    a968:	b590      	push	{r4, r7, lr}
    a96a:	b08f      	sub	sp, #60	; 0x3c
    a96c:	af00      	add	r7, sp, #0
    a96e:	60f8      	str	r0, [r7, #12]
    a970:	60b9      	str	r1, [r7, #8]
    a972:	607a      	str	r2, [r7, #4]
    a974:	603b      	str	r3, [r7, #0]
	char **entries;
	char *out=0,*ptr,*ret;int len=5;
    a976:	2300      	movs	r3, #0
    a978:	637b      	str	r3, [r7, #52]	; 0x34
    a97a:	2305      	movs	r3, #5
    a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
	cJSON *child=item->child;
    a97e:	68fb      	ldr	r3, [r7, #12]
    a980:	689b      	ldr	r3, [r3, #8]
    a982:	62bb      	str	r3, [r7, #40]	; 0x28
	int numentries=0,i=0,fail=0;
    a984:	2300      	movs	r3, #0
    a986:	627b      	str	r3, [r7, #36]	; 0x24
    a988:	2300      	movs	r3, #0
    a98a:	623b      	str	r3, [r7, #32]
    a98c:	2300      	movs	r3, #0
    a98e:	61fb      	str	r3, [r7, #28]
	size_t tmplen=0;
    a990:	2300      	movs	r3, #0
    a992:	61bb      	str	r3, [r7, #24]
	
	/* How many entries in the array? */
	while (child) numentries++,child=child->next;
    a994:	e005      	b.n	a9a2 <print_array+0x3a>
    a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a998:	3301      	adds	r3, #1
    a99a:	627b      	str	r3, [r7, #36]	; 0x24
    a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a99e:	681b      	ldr	r3, [r3, #0]
    a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
    a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d1f6      	bne.n	a996 <print_array+0x2e>
	/* Explicitly handle numentries==0 */
	if (!numentries)
    a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d11d      	bne.n	a9ea <print_array+0x82>
	{
		if (p)	out=ensure(p,3);
    a9ae:	683b      	ldr	r3, [r7, #0]
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d007      	beq.n	a9c4 <print_array+0x5c>
    a9b4:	683b      	ldr	r3, [r7, #0]
    a9b6:	2103      	movs	r1, #3
    a9b8:	0018      	movs	r0, r3
    a9ba:	4bb7      	ldr	r3, [pc, #732]	; (ac98 <print_array+0x330>)
    a9bc:	4798      	blx	r3
    a9be:	0003      	movs	r3, r0
    a9c0:	637b      	str	r3, [r7, #52]	; 0x34
    a9c2:	e005      	b.n	a9d0 <print_array+0x68>
		else	out=(char*)cJSON_malloc(3);
    a9c4:	4bb5      	ldr	r3, [pc, #724]	; (ac9c <print_array+0x334>)
    a9c6:	681b      	ldr	r3, [r3, #0]
    a9c8:	2003      	movs	r0, #3
    a9ca:	4798      	blx	r3
    a9cc:	0003      	movs	r3, r0
    a9ce:	637b      	str	r3, [r7, #52]	; 0x34
		if (out) strcpy(out,"[]");
    a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d007      	beq.n	a9e6 <print_array+0x7e>
    a9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a9d8:	4bb1      	ldr	r3, [pc, #708]	; (aca0 <print_array+0x338>)
    a9da:	0010      	movs	r0, r2
    a9dc:	0019      	movs	r1, r3
    a9de:	2303      	movs	r3, #3
    a9e0:	001a      	movs	r2, r3
    a9e2:	4bb0      	ldr	r3, [pc, #704]	; (aca4 <print_array+0x33c>)
    a9e4:	4798      	blx	r3
		return out;
    a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a9e8:	e152      	b.n	ac90 <print_array+0x328>
	}

	if (p)
    a9ea:	683b      	ldr	r3, [r7, #0]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d100      	bne.n	a9f2 <print_array+0x8a>
    a9f0:	e07a      	b.n	aae8 <print_array+0x180>
	{
		/* Compose the output array. */
		i=p->offset;
    a9f2:	683b      	ldr	r3, [r7, #0]
    a9f4:	689b      	ldr	r3, [r3, #8]
    a9f6:	623b      	str	r3, [r7, #32]
		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
    a9f8:	683b      	ldr	r3, [r7, #0]
    a9fa:	2101      	movs	r1, #1
    a9fc:	0018      	movs	r0, r3
    a9fe:	4ba6      	ldr	r3, [pc, #664]	; (ac98 <print_array+0x330>)
    aa00:	4798      	blx	r3
    aa02:	0003      	movs	r3, r0
    aa04:	633b      	str	r3, [r7, #48]	; 0x30
    aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d101      	bne.n	aa10 <print_array+0xa8>
    aa0c:	2300      	movs	r3, #0
    aa0e:	e13f      	b.n	ac90 <print_array+0x328>
    aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa12:	225b      	movs	r2, #91	; 0x5b
    aa14:	701a      	strb	r2, [r3, #0]
    aa16:	683b      	ldr	r3, [r7, #0]
    aa18:	689b      	ldr	r3, [r3, #8]
    aa1a:	1c5a      	adds	r2, r3, #1
    aa1c:	683b      	ldr	r3, [r7, #0]
    aa1e:	609a      	str	r2, [r3, #8]
		child=item->child;
    aa20:	68fb      	ldr	r3, [r7, #12]
    aa22:	689b      	ldr	r3, [r3, #8]
    aa24:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    aa26:	e03f      	b.n	aaa8 <print_array+0x140>
		{
			print_value(child,depth+1,fmt,p);
    aa28:	68bb      	ldr	r3, [r7, #8]
    aa2a:	1c59      	adds	r1, r3, #1
    aa2c:	683b      	ldr	r3, [r7, #0]
    aa2e:	687a      	ldr	r2, [r7, #4]
    aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aa32:	4c9d      	ldr	r4, [pc, #628]	; (aca8 <print_array+0x340>)
    aa34:	47a0      	blx	r4
			p->offset=update(p);
    aa36:	683b      	ldr	r3, [r7, #0]
    aa38:	0018      	movs	r0, r3
    aa3a:	4b9c      	ldr	r3, [pc, #624]	; (acac <print_array+0x344>)
    aa3c:	4798      	blx	r3
    aa3e:	0002      	movs	r2, r0
    aa40:	683b      	ldr	r3, [r7, #0]
    aa42:	609a      	str	r2, [r3, #8]
			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
    aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa46:	681b      	ldr	r3, [r3, #0]
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d02a      	beq.n	aaa2 <print_array+0x13a>
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d001      	beq.n	aa56 <print_array+0xee>
    aa52:	2302      	movs	r3, #2
    aa54:	e000      	b.n	aa58 <print_array+0xf0>
    aa56:	2301      	movs	r3, #1
    aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
    aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa5c:	1c5a      	adds	r2, r3, #1
    aa5e:	683b      	ldr	r3, [r7, #0]
    aa60:	0011      	movs	r1, r2
    aa62:	0018      	movs	r0, r3
    aa64:	4b8c      	ldr	r3, [pc, #560]	; (ac98 <print_array+0x330>)
    aa66:	4798      	blx	r3
    aa68:	0003      	movs	r3, r0
    aa6a:	633b      	str	r3, [r7, #48]	; 0x30
    aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d101      	bne.n	aa76 <print_array+0x10e>
    aa72:	2300      	movs	r3, #0
    aa74:	e10c      	b.n	ac90 <print_array+0x328>
    aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa78:	1c5a      	adds	r2, r3, #1
    aa7a:	633a      	str	r2, [r7, #48]	; 0x30
    aa7c:	222c      	movs	r2, #44	; 0x2c
    aa7e:	701a      	strb	r2, [r3, #0]
    aa80:	687b      	ldr	r3, [r7, #4]
    aa82:	2b00      	cmp	r3, #0
    aa84:	d004      	beq.n	aa90 <print_array+0x128>
    aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa88:	1c5a      	adds	r2, r3, #1
    aa8a:	633a      	str	r2, [r7, #48]	; 0x30
    aa8c:	2220      	movs	r2, #32
    aa8e:	701a      	strb	r2, [r3, #0]
    aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aa92:	2200      	movs	r2, #0
    aa94:	701a      	strb	r2, [r3, #0]
    aa96:	683b      	ldr	r3, [r7, #0]
    aa98:	689a      	ldr	r2, [r3, #8]
    aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa9c:	18d2      	adds	r2, r2, r3
    aa9e:	683b      	ldr	r3, [r7, #0]
    aaa0:	609a      	str	r2, [r3, #8]
			child=child->next;
    aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aaa4:	681b      	ldr	r3, [r3, #0]
    aaa6:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d002      	beq.n	aab4 <print_array+0x14c>
    aaae:	69fb      	ldr	r3, [r7, #28]
    aab0:	2b00      	cmp	r3, #0
    aab2:	d0b9      	beq.n	aa28 <print_array+0xc0>
		}
		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
    aab4:	683b      	ldr	r3, [r7, #0]
    aab6:	2102      	movs	r1, #2
    aab8:	0018      	movs	r0, r3
    aaba:	4b77      	ldr	r3, [pc, #476]	; (ac98 <print_array+0x330>)
    aabc:	4798      	blx	r3
    aabe:	0003      	movs	r3, r0
    aac0:	633b      	str	r3, [r7, #48]	; 0x30
    aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aac4:	2b00      	cmp	r3, #0
    aac6:	d101      	bne.n	aacc <print_array+0x164>
    aac8:	2300      	movs	r3, #0
    aaca:	e0e1      	b.n	ac90 <print_array+0x328>
    aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aace:	1c5a      	adds	r2, r3, #1
    aad0:	633a      	str	r2, [r7, #48]	; 0x30
    aad2:	225d      	movs	r2, #93	; 0x5d
    aad4:	701a      	strb	r2, [r3, #0]
    aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aad8:	2200      	movs	r2, #0
    aada:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
    aadc:	683b      	ldr	r3, [r7, #0]
    aade:	681a      	ldr	r2, [r3, #0]
    aae0:	6a3b      	ldr	r3, [r7, #32]
    aae2:	18d3      	adds	r3, r2, r3
    aae4:	637b      	str	r3, [r7, #52]	; 0x34
    aae6:	e0d2      	b.n	ac8e <print_array+0x326>
	}
	else
	{
		/* Allocate an array to hold the values for each */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
    aae8:	4b6c      	ldr	r3, [pc, #432]	; (ac9c <print_array+0x334>)
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    aaee:	0092      	lsls	r2, r2, #2
    aaf0:	0010      	movs	r0, r2
    aaf2:	4798      	blx	r3
    aaf4:	0003      	movs	r3, r0
    aaf6:	617b      	str	r3, [r7, #20]
		if (!entries) return 0;
    aaf8:	697b      	ldr	r3, [r7, #20]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d101      	bne.n	ab02 <print_array+0x19a>
    aafe:	2300      	movs	r3, #0
    ab00:	e0c6      	b.n	ac90 <print_array+0x328>
		memset(entries,0,numentries*sizeof(char*));
    ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ab04:	009a      	lsls	r2, r3, #2
    ab06:	697b      	ldr	r3, [r7, #20]
    ab08:	2100      	movs	r1, #0
    ab0a:	0018      	movs	r0, r3
    ab0c:	4b68      	ldr	r3, [pc, #416]	; (acb0 <print_array+0x348>)
    ab0e:	4798      	blx	r3
		/* Retrieve all the results: */
		child=item->child;
    ab10:	68fb      	ldr	r3, [r7, #12]
    ab12:	689b      	ldr	r3, [r3, #8]
    ab14:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    ab16:	e029      	b.n	ab6c <print_array+0x204>
		{
			ret=print_value(child,depth+1,fmt,0);
    ab18:	68bb      	ldr	r3, [r7, #8]
    ab1a:	1c59      	adds	r1, r3, #1
    ab1c:	687a      	ldr	r2, [r7, #4]
    ab1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab20:	2300      	movs	r3, #0
    ab22:	4c61      	ldr	r4, [pc, #388]	; (aca8 <print_array+0x340>)
    ab24:	47a0      	blx	r4
    ab26:	0003      	movs	r3, r0
    ab28:	613b      	str	r3, [r7, #16]
			entries[i++]=ret;
    ab2a:	6a3b      	ldr	r3, [r7, #32]
    ab2c:	1c5a      	adds	r2, r3, #1
    ab2e:	623a      	str	r2, [r7, #32]
    ab30:	009b      	lsls	r3, r3, #2
    ab32:	697a      	ldr	r2, [r7, #20]
    ab34:	18d3      	adds	r3, r2, r3
    ab36:	693a      	ldr	r2, [r7, #16]
    ab38:	601a      	str	r2, [r3, #0]
			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
    ab3a:	693b      	ldr	r3, [r7, #16]
    ab3c:	2b00      	cmp	r3, #0
    ab3e:	d010      	beq.n	ab62 <print_array+0x1fa>
    ab40:	693b      	ldr	r3, [r7, #16]
    ab42:	0018      	movs	r0, r3
    ab44:	4b5b      	ldr	r3, [pc, #364]	; (acb4 <print_array+0x34c>)
    ab46:	4798      	blx	r3
    ab48:	0002      	movs	r2, r0
    ab4a:	687b      	ldr	r3, [r7, #4]
    ab4c:	2b00      	cmp	r3, #0
    ab4e:	d001      	beq.n	ab54 <print_array+0x1ec>
    ab50:	2301      	movs	r3, #1
    ab52:	e000      	b.n	ab56 <print_array+0x1ee>
    ab54:	2300      	movs	r3, #0
    ab56:	18d2      	adds	r2, r2, r3
    ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab5a:	18d3      	adds	r3, r2, r3
    ab5c:	3302      	adds	r3, #2
    ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ab60:	e001      	b.n	ab66 <print_array+0x1fe>
    ab62:	2301      	movs	r3, #1
    ab64:	61fb      	str	r3, [r7, #28]
			child=child->next;
    ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab68:	681b      	ldr	r3, [r3, #0]
    ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d002      	beq.n	ab78 <print_array+0x210>
    ab72:	69fb      	ldr	r3, [r7, #28]
    ab74:	2b00      	cmp	r3, #0
    ab76:	d0cf      	beq.n	ab18 <print_array+0x1b0>
		}
		
		/* If we didn't fail, try to malloc the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
    ab78:	69fb      	ldr	r3, [r7, #28]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d106      	bne.n	ab8c <print_array+0x224>
    ab7e:	4b47      	ldr	r3, [pc, #284]	; (ac9c <print_array+0x334>)
    ab80:	681b      	ldr	r3, [r3, #0]
    ab82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ab84:	0010      	movs	r0, r2
    ab86:	4798      	blx	r3
    ab88:	0003      	movs	r3, r0
    ab8a:	637b      	str	r3, [r7, #52]	; 0x34
		/* If that fails, we fail. */
		if (!out) fail=1;
    ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ab8e:	2b00      	cmp	r3, #0
    ab90:	d101      	bne.n	ab96 <print_array+0x22e>
    ab92:	2301      	movs	r3, #1
    ab94:	61fb      	str	r3, [r7, #28]

		/* Handle failure. */
		if (fail)
    ab96:	69fb      	ldr	r3, [r7, #28]
    ab98:	2b00      	cmp	r3, #0
    ab9a:	d020      	beq.n	abde <print_array+0x276>
		{
			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
    ab9c:	2300      	movs	r3, #0
    ab9e:	623b      	str	r3, [r7, #32]
    aba0:	e012      	b.n	abc8 <print_array+0x260>
    aba2:	6a3b      	ldr	r3, [r7, #32]
    aba4:	009b      	lsls	r3, r3, #2
    aba6:	697a      	ldr	r2, [r7, #20]
    aba8:	18d3      	adds	r3, r2, r3
    abaa:	681b      	ldr	r3, [r3, #0]
    abac:	2b00      	cmp	r3, #0
    abae:	d008      	beq.n	abc2 <print_array+0x25a>
    abb0:	4b41      	ldr	r3, [pc, #260]	; (acb8 <print_array+0x350>)
    abb2:	681a      	ldr	r2, [r3, #0]
    abb4:	6a3b      	ldr	r3, [r7, #32]
    abb6:	009b      	lsls	r3, r3, #2
    abb8:	6979      	ldr	r1, [r7, #20]
    abba:	18cb      	adds	r3, r1, r3
    abbc:	681b      	ldr	r3, [r3, #0]
    abbe:	0018      	movs	r0, r3
    abc0:	4790      	blx	r2
    abc2:	6a3b      	ldr	r3, [r7, #32]
    abc4:	3301      	adds	r3, #1
    abc6:	623b      	str	r3, [r7, #32]
    abc8:	6a3a      	ldr	r2, [r7, #32]
    abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    abcc:	429a      	cmp	r2, r3
    abce:	dbe8      	blt.n	aba2 <print_array+0x23a>
			cJSON_free(entries);
    abd0:	4b39      	ldr	r3, [pc, #228]	; (acb8 <print_array+0x350>)
    abd2:	681b      	ldr	r3, [r3, #0]
    abd4:	697a      	ldr	r2, [r7, #20]
    abd6:	0010      	movs	r0, r2
    abd8:	4798      	blx	r3
			return 0;
    abda:	2300      	movs	r3, #0
    abdc:	e058      	b.n	ac90 <print_array+0x328>
		}
		
		/* Compose the output array. */
		*out='[';
    abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    abe0:	225b      	movs	r2, #91	; 0x5b
    abe2:	701a      	strb	r2, [r3, #0]
		ptr=out+1;*ptr=0;
    abe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    abe6:	3301      	adds	r3, #1
    abe8:	633b      	str	r3, [r7, #48]	; 0x30
    abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abec:	2200      	movs	r2, #0
    abee:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
    abf0:	2300      	movs	r3, #0
    abf2:	623b      	str	r3, [r7, #32]
    abf4:	e038      	b.n	ac68 <print_array+0x300>
		{
			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
    abf6:	6a3b      	ldr	r3, [r7, #32]
    abf8:	009b      	lsls	r3, r3, #2
    abfa:	697a      	ldr	r2, [r7, #20]
    abfc:	18d3      	adds	r3, r2, r3
    abfe:	681b      	ldr	r3, [r3, #0]
    ac00:	0018      	movs	r0, r3
    ac02:	4b2c      	ldr	r3, [pc, #176]	; (acb4 <print_array+0x34c>)
    ac04:	4798      	blx	r3
    ac06:	0003      	movs	r3, r0
    ac08:	61bb      	str	r3, [r7, #24]
    ac0a:	6a3b      	ldr	r3, [r7, #32]
    ac0c:	009b      	lsls	r3, r3, #2
    ac0e:	697a      	ldr	r2, [r7, #20]
    ac10:	18d3      	adds	r3, r2, r3
    ac12:	6819      	ldr	r1, [r3, #0]
    ac14:	69ba      	ldr	r2, [r7, #24]
    ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac18:	0018      	movs	r0, r3
    ac1a:	4b22      	ldr	r3, [pc, #136]	; (aca4 <print_array+0x33c>)
    ac1c:	4798      	blx	r3
    ac1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ac20:	69bb      	ldr	r3, [r7, #24]
    ac22:	18d3      	adds	r3, r2, r3
    ac24:	633b      	str	r3, [r7, #48]	; 0x30
			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
    ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac28:	1e5a      	subs	r2, r3, #1
    ac2a:	6a3b      	ldr	r3, [r7, #32]
    ac2c:	429a      	cmp	r2, r3
    ac2e:	d00f      	beq.n	ac50 <print_array+0x2e8>
    ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac32:	1c5a      	adds	r2, r3, #1
    ac34:	633a      	str	r2, [r7, #48]	; 0x30
    ac36:	222c      	movs	r2, #44	; 0x2c
    ac38:	701a      	strb	r2, [r3, #0]
    ac3a:	687b      	ldr	r3, [r7, #4]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d004      	beq.n	ac4a <print_array+0x2e2>
    ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac42:	1c5a      	adds	r2, r3, #1
    ac44:	633a      	str	r2, [r7, #48]	; 0x30
    ac46:	2220      	movs	r2, #32
    ac48:	701a      	strb	r2, [r3, #0]
    ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac4c:	2200      	movs	r2, #0
    ac4e:	701a      	strb	r2, [r3, #0]
			cJSON_free(entries[i]);
    ac50:	4b19      	ldr	r3, [pc, #100]	; (acb8 <print_array+0x350>)
    ac52:	681a      	ldr	r2, [r3, #0]
    ac54:	6a3b      	ldr	r3, [r7, #32]
    ac56:	009b      	lsls	r3, r3, #2
    ac58:	6979      	ldr	r1, [r7, #20]
    ac5a:	18cb      	adds	r3, r1, r3
    ac5c:	681b      	ldr	r3, [r3, #0]
    ac5e:	0018      	movs	r0, r3
    ac60:	4790      	blx	r2
		for (i=0;i<numentries;i++)
    ac62:	6a3b      	ldr	r3, [r7, #32]
    ac64:	3301      	adds	r3, #1
    ac66:	623b      	str	r3, [r7, #32]
    ac68:	6a3a      	ldr	r2, [r7, #32]
    ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac6c:	429a      	cmp	r2, r3
    ac6e:	dbc2      	blt.n	abf6 <print_array+0x28e>
		}
		cJSON_free(entries);
    ac70:	4b11      	ldr	r3, [pc, #68]	; (acb8 <print_array+0x350>)
    ac72:	681b      	ldr	r3, [r3, #0]
    ac74:	697a      	ldr	r2, [r7, #20]
    ac76:	0010      	movs	r0, r2
    ac78:	4798      	blx	r3
		*ptr++=']';*ptr++=0;
    ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac7c:	1c5a      	adds	r2, r3, #1
    ac7e:	633a      	str	r2, [r7, #48]	; 0x30
    ac80:	225d      	movs	r2, #93	; 0x5d
    ac82:	701a      	strb	r2, [r3, #0]
    ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac86:	1c5a      	adds	r2, r3, #1
    ac88:	633a      	str	r2, [r7, #48]	; 0x30
    ac8a:	2200      	movs	r2, #0
    ac8c:	701a      	strb	r2, [r3, #0]
	}
	return out;	
    ac8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ac90:	0018      	movs	r0, r3
    ac92:	46bd      	mov	sp, r7
    ac94:	b00f      	add	sp, #60	; 0x3c
    ac96:	bd90      	pop	{r4, r7, pc}
    ac98:	0000a151 	.word	0x0000a151
    ac9c:	20000004 	.word	0x20000004
    aca0:	0001c68c 	.word	0x0001c68c
    aca4:	00019e6b 	.word	0x00019e6b
    aca8:	0000a7a5 	.word	0x0000a7a5
    acac:	0000a21d 	.word	0x0000a21d
    acb0:	00019ea1 	.word	0x00019ea1
    acb4:	0001a3e3 	.word	0x0001a3e3
    acb8:	20000008 	.word	0x20000008

0000acbc <print_object>:
	ep=value;return 0;	/* malformed. */
}

/* Render an object to text. */
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
{
    acbc:	b5b0      	push	{r4, r5, r7, lr}
    acbe:	b092      	sub	sp, #72	; 0x48
    acc0:	af00      	add	r7, sp, #0
    acc2:	60f8      	str	r0, [r7, #12]
    acc4:	60b9      	str	r1, [r7, #8]
    acc6:	607a      	str	r2, [r7, #4]
    acc8:	603b      	str	r3, [r7, #0]
	char **entries=0,**names=0;
    acca:	2300      	movs	r3, #0
    accc:	627b      	str	r3, [r7, #36]	; 0x24
    acce:	2300      	movs	r3, #0
    acd0:	623b      	str	r3, [r7, #32]
	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
    acd2:	2300      	movs	r3, #0
    acd4:	647b      	str	r3, [r7, #68]	; 0x44
    acd6:	2307      	movs	r3, #7
    acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    acda:	2300      	movs	r3, #0
    acdc:	63bb      	str	r3, [r7, #56]	; 0x38
	cJSON *child=item->child;
    acde:	68fb      	ldr	r3, [r7, #12]
    ace0:	689b      	ldr	r3, [r3, #8]
    ace2:	633b      	str	r3, [r7, #48]	; 0x30
	int numentries=0,fail=0;
    ace4:	2300      	movs	r3, #0
    ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
    ace8:	2300      	movs	r3, #0
    acea:	62bb      	str	r3, [r7, #40]	; 0x28
	size_t tmplen=0;
    acec:	2300      	movs	r3, #0
    acee:	61fb      	str	r3, [r7, #28]
	/* Count the number of entries. */
	while (child) numentries++,child=child->next;
    acf0:	e005      	b.n	acfe <print_object+0x42>
    acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acf4:	3301      	adds	r3, #1
    acf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    acfa:	681b      	ldr	r3, [r3, #0]
    acfc:	633b      	str	r3, [r7, #48]	; 0x30
    acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad00:	2b00      	cmp	r3, #0
    ad02:	d1f6      	bne.n	acf2 <print_object+0x36>
	/* Explicitly handle empty object case */
	if (!numentries)
    ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad06:	2b00      	cmp	r3, #0
    ad08:	d14e      	bne.n	ada8 <print_object+0xec>
	{
		if (p) out=ensure(p,fmt?depth+4:3);
    ad0a:	683b      	ldr	r3, [r7, #0]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d00e      	beq.n	ad2e <print_object+0x72>
    ad10:	687b      	ldr	r3, [r7, #4]
    ad12:	2b00      	cmp	r3, #0
    ad14:	d002      	beq.n	ad1c <print_object+0x60>
    ad16:	68bb      	ldr	r3, [r7, #8]
    ad18:	3304      	adds	r3, #4
    ad1a:	e000      	b.n	ad1e <print_object+0x62>
    ad1c:	2303      	movs	r3, #3
    ad1e:	683a      	ldr	r2, [r7, #0]
    ad20:	0019      	movs	r1, r3
    ad22:	0010      	movs	r0, r2
    ad24:	4bc5      	ldr	r3, [pc, #788]	; (b03c <print_object+0x380>)
    ad26:	4798      	blx	r3
    ad28:	0003      	movs	r3, r0
    ad2a:	647b      	str	r3, [r7, #68]	; 0x44
    ad2c:	e00c      	b.n	ad48 <print_object+0x8c>
		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
    ad2e:	4bc4      	ldr	r3, [pc, #784]	; (b040 <print_object+0x384>)
    ad30:	681b      	ldr	r3, [r3, #0]
    ad32:	687a      	ldr	r2, [r7, #4]
    ad34:	2a00      	cmp	r2, #0
    ad36:	d002      	beq.n	ad3e <print_object+0x82>
    ad38:	68ba      	ldr	r2, [r7, #8]
    ad3a:	3204      	adds	r2, #4
    ad3c:	e000      	b.n	ad40 <print_object+0x84>
    ad3e:	2203      	movs	r2, #3
    ad40:	0010      	movs	r0, r2
    ad42:	4798      	blx	r3
    ad44:	0003      	movs	r3, r0
    ad46:	647b      	str	r3, [r7, #68]	; 0x44
		if (!out)	return 0;
    ad48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	d101      	bne.n	ad52 <print_object+0x96>
    ad4e:	2300      	movs	r3, #0
    ad50:	e282      	b.n	b258 <print_object+0x59c>
		ptr=out;*ptr++='{';
    ad52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ad54:	643b      	str	r3, [r7, #64]	; 0x40
    ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad58:	1c5a      	adds	r2, r3, #1
    ad5a:	643a      	str	r2, [r7, #64]	; 0x40
    ad5c:	227b      	movs	r2, #123	; 0x7b
    ad5e:	701a      	strb	r2, [r3, #0]
		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	2b00      	cmp	r3, #0
    ad64:	d014      	beq.n	ad90 <print_object+0xd4>
    ad66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad68:	1c5a      	adds	r2, r3, #1
    ad6a:	643a      	str	r2, [r7, #64]	; 0x40
    ad6c:	220a      	movs	r2, #10
    ad6e:	701a      	strb	r2, [r3, #0]
    ad70:	2300      	movs	r3, #0
    ad72:	63bb      	str	r3, [r7, #56]	; 0x38
    ad74:	e007      	b.n	ad86 <print_object+0xca>
    ad76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad78:	1c5a      	adds	r2, r3, #1
    ad7a:	643a      	str	r2, [r7, #64]	; 0x40
    ad7c:	2209      	movs	r2, #9
    ad7e:	701a      	strb	r2, [r3, #0]
    ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ad82:	3301      	adds	r3, #1
    ad84:	63bb      	str	r3, [r7, #56]	; 0x38
    ad86:	68bb      	ldr	r3, [r7, #8]
    ad88:	1e5a      	subs	r2, r3, #1
    ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ad8c:	429a      	cmp	r2, r3
    ad8e:	dcf2      	bgt.n	ad76 <print_object+0xba>
		*ptr++='}';*ptr++=0;
    ad90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad92:	1c5a      	adds	r2, r3, #1
    ad94:	643a      	str	r2, [r7, #64]	; 0x40
    ad96:	227d      	movs	r2, #125	; 0x7d
    ad98:	701a      	strb	r2, [r3, #0]
    ad9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ad9c:	1c5a      	adds	r2, r3, #1
    ad9e:	643a      	str	r2, [r7, #64]	; 0x40
    ada0:	2200      	movs	r2, #0
    ada2:	701a      	strb	r2, [r3, #0]
		return out;
    ada4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ada6:	e257      	b.n	b258 <print_object+0x59c>
	}
	if (p)
    ada8:	683b      	ldr	r3, [r7, #0]
    adaa:	2b00      	cmp	r3, #0
    adac:	d100      	bne.n	adb0 <print_object+0xf4>
    adae:	e10a      	b.n	afc6 <print_object+0x30a>
	{
		/* Compose the output: */
		i=p->offset;
    adb0:	683b      	ldr	r3, [r7, #0]
    adb2:	689b      	ldr	r3, [r3, #8]
    adb4:	63bb      	str	r3, [r7, #56]	; 0x38
		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
    adb6:	687b      	ldr	r3, [r7, #4]
    adb8:	2b00      	cmp	r3, #0
    adba:	d001      	beq.n	adc0 <print_object+0x104>
    adbc:	2302      	movs	r3, #2
    adbe:	e000      	b.n	adc2 <print_object+0x106>
    adc0:	2301      	movs	r3, #1
    adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    adc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    adc6:	1c5a      	adds	r2, r3, #1
    adc8:	683b      	ldr	r3, [r7, #0]
    adca:	0011      	movs	r1, r2
    adcc:	0018      	movs	r0, r3
    adce:	4b9b      	ldr	r3, [pc, #620]	; (b03c <print_object+0x380>)
    add0:	4798      	blx	r3
    add2:	0003      	movs	r3, r0
    add4:	643b      	str	r3, [r7, #64]	; 0x40
    add6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    add8:	2b00      	cmp	r3, #0
    adda:	d101      	bne.n	ade0 <print_object+0x124>
    addc:	2300      	movs	r3, #0
    adde:	e23b      	b.n	b258 <print_object+0x59c>
		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
    ade0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ade2:	1c5a      	adds	r2, r3, #1
    ade4:	643a      	str	r2, [r7, #64]	; 0x40
    ade6:	227b      	movs	r2, #123	; 0x7b
    ade8:	701a      	strb	r2, [r3, #0]
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	2b00      	cmp	r3, #0
    adee:	d004      	beq.n	adfa <print_object+0x13e>
    adf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    adf2:	1c5a      	adds	r2, r3, #1
    adf4:	643a      	str	r2, [r7, #64]	; 0x40
    adf6:	220a      	movs	r2, #10
    adf8:	701a      	strb	r2, [r3, #0]
    adfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    adfc:	2200      	movs	r2, #0
    adfe:	701a      	strb	r2, [r3, #0]
    ae00:	683b      	ldr	r3, [r7, #0]
    ae02:	689a      	ldr	r2, [r3, #8]
    ae04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae06:	18d2      	adds	r2, r2, r3
    ae08:	683b      	ldr	r3, [r7, #0]
    ae0a:	609a      	str	r2, [r3, #8]
		child=item->child;depth++;
    ae0c:	68fb      	ldr	r3, [r7, #12]
    ae0e:	689b      	ldr	r3, [r3, #8]
    ae10:	633b      	str	r3, [r7, #48]	; 0x30
    ae12:	68bb      	ldr	r3, [r7, #8]
    ae14:	3301      	adds	r3, #1
    ae16:	60bb      	str	r3, [r7, #8]
		while (child)
    ae18:	e09d      	b.n	af56 <print_object+0x29a>
		{
			if (fmt)
    ae1a:	687b      	ldr	r3, [r7, #4]
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d021      	beq.n	ae64 <print_object+0x1a8>
			{
				ptr=ensure(p,depth);	if (!ptr) return 0;
    ae20:	68ba      	ldr	r2, [r7, #8]
    ae22:	683b      	ldr	r3, [r7, #0]
    ae24:	0011      	movs	r1, r2
    ae26:	0018      	movs	r0, r3
    ae28:	4b84      	ldr	r3, [pc, #528]	; (b03c <print_object+0x380>)
    ae2a:	4798      	blx	r3
    ae2c:	0003      	movs	r3, r0
    ae2e:	643b      	str	r3, [r7, #64]	; 0x40
    ae30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae32:	2b00      	cmp	r3, #0
    ae34:	d101      	bne.n	ae3a <print_object+0x17e>
    ae36:	2300      	movs	r3, #0
    ae38:	e20e      	b.n	b258 <print_object+0x59c>
				for (j=0;j<depth;j++) *ptr++='\t';
    ae3a:	2300      	movs	r3, #0
    ae3c:	637b      	str	r3, [r7, #52]	; 0x34
    ae3e:	e007      	b.n	ae50 <print_object+0x194>
    ae40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ae42:	1c5a      	adds	r2, r3, #1
    ae44:	643a      	str	r2, [r7, #64]	; 0x40
    ae46:	2209      	movs	r2, #9
    ae48:	701a      	strb	r2, [r3, #0]
    ae4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae4c:	3301      	adds	r3, #1
    ae4e:	637b      	str	r3, [r7, #52]	; 0x34
    ae50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ae52:	68bb      	ldr	r3, [r7, #8]
    ae54:	429a      	cmp	r2, r3
    ae56:	dbf3      	blt.n	ae40 <print_object+0x184>
				p->offset+=depth;
    ae58:	683b      	ldr	r3, [r7, #0]
    ae5a:	689a      	ldr	r2, [r3, #8]
    ae5c:	68bb      	ldr	r3, [r7, #8]
    ae5e:	18d2      	adds	r2, r2, r3
    ae60:	683b      	ldr	r3, [r7, #0]
    ae62:	609a      	str	r2, [r3, #8]
			}
			print_string_ptr(child->string,p);
    ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae66:	6a1b      	ldr	r3, [r3, #32]
    ae68:	683a      	ldr	r2, [r7, #0]
    ae6a:	0011      	movs	r1, r2
    ae6c:	0018      	movs	r0, r3
    ae6e:	4b75      	ldr	r3, [pc, #468]	; (b044 <print_object+0x388>)
    ae70:	4798      	blx	r3
			p->offset=update(p);
    ae72:	683b      	ldr	r3, [r7, #0]
    ae74:	0018      	movs	r0, r3
    ae76:	4b74      	ldr	r3, [pc, #464]	; (b048 <print_object+0x38c>)
    ae78:	4798      	blx	r3
    ae7a:	0002      	movs	r2, r0
    ae7c:	683b      	ldr	r3, [r7, #0]
    ae7e:	609a      	str	r2, [r3, #8]
			
			len=fmt?2:1;
    ae80:	687b      	ldr	r3, [r7, #4]
    ae82:	2b00      	cmp	r3, #0
    ae84:	d001      	beq.n	ae8a <print_object+0x1ce>
    ae86:	2302      	movs	r3, #2
    ae88:	e000      	b.n	ae8c <print_object+0x1d0>
    ae8a:	2301      	movs	r3, #1
    ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len);	if (!ptr) return 0;
    ae8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ae90:	683b      	ldr	r3, [r7, #0]
    ae92:	0011      	movs	r1, r2
    ae94:	0018      	movs	r0, r3
    ae96:	4b69      	ldr	r3, [pc, #420]	; (b03c <print_object+0x380>)
    ae98:	4798      	blx	r3
    ae9a:	0003      	movs	r3, r0
    ae9c:	643b      	str	r3, [r7, #64]	; 0x40
    ae9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aea0:	2b00      	cmp	r3, #0
    aea2:	d101      	bne.n	aea8 <print_object+0x1ec>
    aea4:	2300      	movs	r3, #0
    aea6:	e1d7      	b.n	b258 <print_object+0x59c>
			*ptr++=':';if (fmt) *ptr++='\t';
    aea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aeaa:	1c5a      	adds	r2, r3, #1
    aeac:	643a      	str	r2, [r7, #64]	; 0x40
    aeae:	223a      	movs	r2, #58	; 0x3a
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	687b      	ldr	r3, [r7, #4]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d004      	beq.n	aec2 <print_object+0x206>
    aeb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    aeba:	1c5a      	adds	r2, r3, #1
    aebc:	643a      	str	r2, [r7, #64]	; 0x40
    aebe:	2209      	movs	r2, #9
    aec0:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
    aec2:	683b      	ldr	r3, [r7, #0]
    aec4:	689a      	ldr	r2, [r3, #8]
    aec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aec8:	18d2      	adds	r2, r2, r3
    aeca:	683b      	ldr	r3, [r7, #0]
    aecc:	609a      	str	r2, [r3, #8]
			
			print_value(child,depth,fmt,p);
    aece:	683b      	ldr	r3, [r7, #0]
    aed0:	687a      	ldr	r2, [r7, #4]
    aed2:	68b9      	ldr	r1, [r7, #8]
    aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    aed6:	4c5d      	ldr	r4, [pc, #372]	; (b04c <print_object+0x390>)
    aed8:	47a0      	blx	r4
			p->offset=update(p);
    aeda:	683b      	ldr	r3, [r7, #0]
    aedc:	0018      	movs	r0, r3
    aede:	4b5a      	ldr	r3, [pc, #360]	; (b048 <print_object+0x38c>)
    aee0:	4798      	blx	r3
    aee2:	0002      	movs	r2, r0
    aee4:	683b      	ldr	r3, [r7, #0]
    aee6:	609a      	str	r2, [r3, #8]

			len=(fmt?1:0)+(child->next?1:0);
    aee8:	687b      	ldr	r3, [r7, #4]
    aeea:	1e5a      	subs	r2, r3, #1
    aeec:	4193      	sbcs	r3, r2
    aeee:	b2db      	uxtb	r3, r3
    aef0:	001a      	movs	r2, r3
    aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aef4:	681b      	ldr	r3, [r3, #0]
    aef6:	1e59      	subs	r1, r3, #1
    aef8:	418b      	sbcs	r3, r1
    aefa:	b2db      	uxtb	r3, r3
    aefc:	18d3      	adds	r3, r2, r3
    aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len+1); if (!ptr) return 0;
    af00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af02:	1c5a      	adds	r2, r3, #1
    af04:	683b      	ldr	r3, [r7, #0]
    af06:	0011      	movs	r1, r2
    af08:	0018      	movs	r0, r3
    af0a:	4b4c      	ldr	r3, [pc, #304]	; (b03c <print_object+0x380>)
    af0c:	4798      	blx	r3
    af0e:	0003      	movs	r3, r0
    af10:	643b      	str	r3, [r7, #64]	; 0x40
    af12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af14:	2b00      	cmp	r3, #0
    af16:	d101      	bne.n	af1c <print_object+0x260>
    af18:	2300      	movs	r3, #0
    af1a:	e19d      	b.n	b258 <print_object+0x59c>
			if (child->next) *ptr++=',';
    af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af1e:	681b      	ldr	r3, [r3, #0]
    af20:	2b00      	cmp	r3, #0
    af22:	d004      	beq.n	af2e <print_object+0x272>
    af24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af26:	1c5a      	adds	r2, r3, #1
    af28:	643a      	str	r2, [r7, #64]	; 0x40
    af2a:	222c      	movs	r2, #44	; 0x2c
    af2c:	701a      	strb	r2, [r3, #0]
			if (fmt) *ptr++='\n';*ptr=0;
    af2e:	687b      	ldr	r3, [r7, #4]
    af30:	2b00      	cmp	r3, #0
    af32:	d004      	beq.n	af3e <print_object+0x282>
    af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af36:	1c5a      	adds	r2, r3, #1
    af38:	643a      	str	r2, [r7, #64]	; 0x40
    af3a:	220a      	movs	r2, #10
    af3c:	701a      	strb	r2, [r3, #0]
    af3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af40:	2200      	movs	r2, #0
    af42:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
    af44:	683b      	ldr	r3, [r7, #0]
    af46:	689a      	ldr	r2, [r3, #8]
    af48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af4a:	18d2      	adds	r2, r2, r3
    af4c:	683b      	ldr	r3, [r7, #0]
    af4e:	609a      	str	r2, [r3, #8]
			child=child->next;
    af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af52:	681b      	ldr	r3, [r3, #0]
    af54:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
    af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af58:	2b00      	cmp	r3, #0
    af5a:	d000      	beq.n	af5e <print_object+0x2a2>
    af5c:	e75d      	b.n	ae1a <print_object+0x15e>
		}
		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
    af5e:	687b      	ldr	r3, [r7, #4]
    af60:	2b00      	cmp	r3, #0
    af62:	d002      	beq.n	af6a <print_object+0x2ae>
    af64:	68bb      	ldr	r3, [r7, #8]
    af66:	3301      	adds	r3, #1
    af68:	e000      	b.n	af6c <print_object+0x2b0>
    af6a:	2302      	movs	r3, #2
    af6c:	683a      	ldr	r2, [r7, #0]
    af6e:	0019      	movs	r1, r3
    af70:	0010      	movs	r0, r2
    af72:	4b32      	ldr	r3, [pc, #200]	; (b03c <print_object+0x380>)
    af74:	4798      	blx	r3
    af76:	0003      	movs	r3, r0
    af78:	643b      	str	r3, [r7, #64]	; 0x40
    af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af7c:	2b00      	cmp	r3, #0
    af7e:	d101      	bne.n	af84 <print_object+0x2c8>
    af80:	2300      	movs	r3, #0
    af82:	e169      	b.n	b258 <print_object+0x59c>
		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
    af84:	687b      	ldr	r3, [r7, #4]
    af86:	2b00      	cmp	r3, #0
    af88:	d00f      	beq.n	afaa <print_object+0x2ee>
    af8a:	2300      	movs	r3, #0
    af8c:	63bb      	str	r3, [r7, #56]	; 0x38
    af8e:	e007      	b.n	afa0 <print_object+0x2e4>
    af90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af92:	1c5a      	adds	r2, r3, #1
    af94:	643a      	str	r2, [r7, #64]	; 0x40
    af96:	2209      	movs	r2, #9
    af98:	701a      	strb	r2, [r3, #0]
    af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    af9c:	3301      	adds	r3, #1
    af9e:	63bb      	str	r3, [r7, #56]	; 0x38
    afa0:	68bb      	ldr	r3, [r7, #8]
    afa2:	1e5a      	subs	r2, r3, #1
    afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afa6:	429a      	cmp	r2, r3
    afa8:	dcf2      	bgt.n	af90 <print_object+0x2d4>
		*ptr++='}';*ptr=0;
    afaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afac:	1c5a      	adds	r2, r3, #1
    afae:	643a      	str	r2, [r7, #64]	; 0x40
    afb0:	227d      	movs	r2, #125	; 0x7d
    afb2:	701a      	strb	r2, [r3, #0]
    afb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afb6:	2200      	movs	r2, #0
    afb8:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
    afba:	683b      	ldr	r3, [r7, #0]
    afbc:	681a      	ldr	r2, [r3, #0]
    afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afc0:	18d3      	adds	r3, r2, r3
    afc2:	647b      	str	r3, [r7, #68]	; 0x44
    afc4:	e147      	b.n	b256 <print_object+0x59a>
	}
	else
	{
		/* Allocate space for the names and the objects */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
    afc6:	4b1e      	ldr	r3, [pc, #120]	; (b040 <print_object+0x384>)
    afc8:	681b      	ldr	r3, [r3, #0]
    afca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    afcc:	0092      	lsls	r2, r2, #2
    afce:	0010      	movs	r0, r2
    afd0:	4798      	blx	r3
    afd2:	0003      	movs	r3, r0
    afd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!entries) return 0;
    afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afd8:	2b00      	cmp	r3, #0
    afda:	d101      	bne.n	afe0 <print_object+0x324>
    afdc:	2300      	movs	r3, #0
    afde:	e13b      	b.n	b258 <print_object+0x59c>
		names=(char**)cJSON_malloc(numentries*sizeof(char*));
    afe0:	4b17      	ldr	r3, [pc, #92]	; (b040 <print_object+0x384>)
    afe2:	681b      	ldr	r3, [r3, #0]
    afe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    afe6:	0092      	lsls	r2, r2, #2
    afe8:	0010      	movs	r0, r2
    afea:	4798      	blx	r3
    afec:	0003      	movs	r3, r0
    afee:	623b      	str	r3, [r7, #32]
		if (!names) {cJSON_free(entries);return 0;}
    aff0:	6a3b      	ldr	r3, [r7, #32]
    aff2:	2b00      	cmp	r3, #0
    aff4:	d106      	bne.n	b004 <print_object+0x348>
    aff6:	4b16      	ldr	r3, [pc, #88]	; (b050 <print_object+0x394>)
    aff8:	681b      	ldr	r3, [r3, #0]
    affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    affc:	0010      	movs	r0, r2
    affe:	4798      	blx	r3
    b000:	2300      	movs	r3, #0
    b002:	e129      	b.n	b258 <print_object+0x59c>
		memset(entries,0,sizeof(char*)*numentries);
    b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b006:	009a      	lsls	r2, r3, #2
    b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b00a:	2100      	movs	r1, #0
    b00c:	0018      	movs	r0, r3
    b00e:	4b11      	ldr	r3, [pc, #68]	; (b054 <print_object+0x398>)
    b010:	4798      	blx	r3
		memset(names,0,sizeof(char*)*numentries);
    b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b014:	009a      	lsls	r2, r3, #2
    b016:	6a3b      	ldr	r3, [r7, #32]
    b018:	2100      	movs	r1, #0
    b01a:	0018      	movs	r0, r3
    b01c:	4b0d      	ldr	r3, [pc, #52]	; (b054 <print_object+0x398>)
    b01e:	4798      	blx	r3

		/* Collect all the results into our arrays: */
		child=item->child;depth++;if (fmt) len+=depth;
    b020:	68fb      	ldr	r3, [r7, #12]
    b022:	689b      	ldr	r3, [r3, #8]
    b024:	633b      	str	r3, [r7, #48]	; 0x30
    b026:	68bb      	ldr	r3, [r7, #8]
    b028:	3301      	adds	r3, #1
    b02a:	60bb      	str	r3, [r7, #8]
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	2b00      	cmp	r3, #0
    b030:	d053      	beq.n	b0da <print_object+0x41e>
    b032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b034:	68bb      	ldr	r3, [r7, #8]
    b036:	18d3      	adds	r3, r2, r3
    b038:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (child)
    b03a:	e04e      	b.n	b0da <print_object+0x41e>
    b03c:	0000a151 	.word	0x0000a151
    b040:	20000004 	.word	0x20000004
    b044:	0000a4a1 	.word	0x0000a4a1
    b048:	0000a21d 	.word	0x0000a21d
    b04c:	0000a7a5 	.word	0x0000a7a5
    b050:	20000008 	.word	0x20000008
    b054:	00019ea1 	.word	0x00019ea1
		{
			names[i]=str=print_string_ptr(child->string,0);
    b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b05a:	009b      	lsls	r3, r3, #2
    b05c:	6a3a      	ldr	r2, [r7, #32]
    b05e:	18d4      	adds	r4, r2, r3
    b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b062:	6a1b      	ldr	r3, [r3, #32]
    b064:	2100      	movs	r1, #0
    b066:	0018      	movs	r0, r3
    b068:	4b7d      	ldr	r3, [pc, #500]	; (b260 <print_object+0x5a4>)
    b06a:	4798      	blx	r3
    b06c:	0003      	movs	r3, r0
    b06e:	61bb      	str	r3, [r7, #24]
    b070:	69bb      	ldr	r3, [r7, #24]
    b072:	6023      	str	r3, [r4, #0]
			entries[i++]=ret=print_value(child,depth,fmt,0);
    b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b076:	1c5a      	adds	r2, r3, #1
    b078:	63ba      	str	r2, [r7, #56]	; 0x38
    b07a:	009b      	lsls	r3, r3, #2
    b07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b07e:	18d4      	adds	r4, r2, r3
    b080:	687a      	ldr	r2, [r7, #4]
    b082:	68b9      	ldr	r1, [r7, #8]
    b084:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b086:	2300      	movs	r3, #0
    b088:	4d76      	ldr	r5, [pc, #472]	; (b264 <print_object+0x5a8>)
    b08a:	47a8      	blx	r5
    b08c:	0003      	movs	r3, r0
    b08e:	617b      	str	r3, [r7, #20]
    b090:	697b      	ldr	r3, [r7, #20]
    b092:	6023      	str	r3, [r4, #0]
			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
    b094:	69bb      	ldr	r3, [r7, #24]
    b096:	2b00      	cmp	r3, #0
    b098:	d01a      	beq.n	b0d0 <print_object+0x414>
    b09a:	697b      	ldr	r3, [r7, #20]
    b09c:	2b00      	cmp	r3, #0
    b09e:	d017      	beq.n	b0d0 <print_object+0x414>
    b0a0:	697b      	ldr	r3, [r7, #20]
    b0a2:	0018      	movs	r0, r3
    b0a4:	4b70      	ldr	r3, [pc, #448]	; (b268 <print_object+0x5ac>)
    b0a6:	4798      	blx	r3
    b0a8:	0004      	movs	r4, r0
    b0aa:	69bb      	ldr	r3, [r7, #24]
    b0ac:	0018      	movs	r0, r3
    b0ae:	4b6e      	ldr	r3, [pc, #440]	; (b268 <print_object+0x5ac>)
    b0b0:	4798      	blx	r3
    b0b2:	0003      	movs	r3, r0
    b0b4:	18e3      	adds	r3, r4, r3
    b0b6:	687a      	ldr	r2, [r7, #4]
    b0b8:	2a00      	cmp	r2, #0
    b0ba:	d002      	beq.n	b0c2 <print_object+0x406>
    b0bc:	68ba      	ldr	r2, [r7, #8]
    b0be:	3202      	adds	r2, #2
    b0c0:	e000      	b.n	b0c4 <print_object+0x408>
    b0c2:	2200      	movs	r2, #0
    b0c4:	189a      	adds	r2, r3, r2
    b0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0c8:	18d3      	adds	r3, r2, r3
    b0ca:	3302      	adds	r3, #2
    b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    b0ce:	e001      	b.n	b0d4 <print_object+0x418>
    b0d0:	2301      	movs	r3, #1
    b0d2:	62bb      	str	r3, [r7, #40]	; 0x28
			child=child->next;
    b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0d6:	681b      	ldr	r3, [r3, #0]
    b0d8:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
    b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d1bb      	bne.n	b058 <print_object+0x39c>
		}
		
		/* Try to allocate the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
    b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d106      	bne.n	b0f4 <print_object+0x438>
    b0e6:	4b61      	ldr	r3, [pc, #388]	; (b26c <print_object+0x5b0>)
    b0e8:	681b      	ldr	r3, [r3, #0]
    b0ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b0ec:	0010      	movs	r0, r2
    b0ee:	4798      	blx	r3
    b0f0:	0003      	movs	r3, r0
    b0f2:	647b      	str	r3, [r7, #68]	; 0x44
		if (!out) fail=1;
    b0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b0f6:	2b00      	cmp	r3, #0
    b0f8:	d101      	bne.n	b0fe <print_object+0x442>
    b0fa:	2301      	movs	r3, #1
    b0fc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Handle failure */
		if (fail)
    b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b100:	2b00      	cmp	r3, #0
    b102:	d035      	beq.n	b170 <print_object+0x4b4>
		{
			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
    b104:	2300      	movs	r3, #0
    b106:	63bb      	str	r3, [r7, #56]	; 0x38
    b108:	e022      	b.n	b150 <print_object+0x494>
    b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b10c:	009b      	lsls	r3, r3, #2
    b10e:	6a3a      	ldr	r2, [r7, #32]
    b110:	18d3      	adds	r3, r2, r3
    b112:	681b      	ldr	r3, [r3, #0]
    b114:	2b00      	cmp	r3, #0
    b116:	d008      	beq.n	b12a <print_object+0x46e>
    b118:	4b55      	ldr	r3, [pc, #340]	; (b270 <print_object+0x5b4>)
    b11a:	681a      	ldr	r2, [r3, #0]
    b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b11e:	009b      	lsls	r3, r3, #2
    b120:	6a39      	ldr	r1, [r7, #32]
    b122:	18cb      	adds	r3, r1, r3
    b124:	681b      	ldr	r3, [r3, #0]
    b126:	0018      	movs	r0, r3
    b128:	4790      	blx	r2
    b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b12c:	009b      	lsls	r3, r3, #2
    b12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b130:	18d3      	adds	r3, r2, r3
    b132:	681b      	ldr	r3, [r3, #0]
    b134:	2b00      	cmp	r3, #0
    b136:	d008      	beq.n	b14a <print_object+0x48e>
    b138:	4b4d      	ldr	r3, [pc, #308]	; (b270 <print_object+0x5b4>)
    b13a:	681a      	ldr	r2, [r3, #0]
    b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b13e:	009b      	lsls	r3, r3, #2
    b140:	6a79      	ldr	r1, [r7, #36]	; 0x24
    b142:	18cb      	adds	r3, r1, r3
    b144:	681b      	ldr	r3, [r3, #0]
    b146:	0018      	movs	r0, r3
    b148:	4790      	blx	r2
    b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b14c:	3301      	adds	r3, #1
    b14e:	63bb      	str	r3, [r7, #56]	; 0x38
    b150:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b154:	429a      	cmp	r2, r3
    b156:	dbd8      	blt.n	b10a <print_object+0x44e>
			cJSON_free(names);cJSON_free(entries);
    b158:	4b45      	ldr	r3, [pc, #276]	; (b270 <print_object+0x5b4>)
    b15a:	681b      	ldr	r3, [r3, #0]
    b15c:	6a3a      	ldr	r2, [r7, #32]
    b15e:	0010      	movs	r0, r2
    b160:	4798      	blx	r3
    b162:	4b43      	ldr	r3, [pc, #268]	; (b270 <print_object+0x5b4>)
    b164:	681b      	ldr	r3, [r3, #0]
    b166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b168:	0010      	movs	r0, r2
    b16a:	4798      	blx	r3
			return 0;
    b16c:	2300      	movs	r3, #0
    b16e:	e073      	b.n	b258 <print_object+0x59c>
		}
		
		/* Compose the output: */
		*out='{';ptr=out+1;//if (fmt)*ptr++='\n';*ptr=0;
    b170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b172:	227b      	movs	r2, #123	; 0x7b
    b174:	701a      	strb	r2, [r3, #0]
    b176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b178:	3301      	adds	r3, #1
    b17a:	643b      	str	r3, [r7, #64]	; 0x40
		for (i=0;i<numentries;i++)
    b17c:	2300      	movs	r3, #0
    b17e:	63bb      	str	r3, [r7, #56]	; 0x38
    b180:	e051      	b.n	b226 <print_object+0x56a>
		{
		//	if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
    b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b184:	009b      	lsls	r3, r3, #2
    b186:	6a3a      	ldr	r2, [r7, #32]
    b188:	18d3      	adds	r3, r2, r3
    b18a:	681b      	ldr	r3, [r3, #0]
    b18c:	0018      	movs	r0, r3
    b18e:	4b36      	ldr	r3, [pc, #216]	; (b268 <print_object+0x5ac>)
    b190:	4798      	blx	r3
    b192:	0003      	movs	r3, r0
    b194:	61fb      	str	r3, [r7, #28]
    b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b198:	009b      	lsls	r3, r3, #2
    b19a:	6a3a      	ldr	r2, [r7, #32]
    b19c:	18d3      	adds	r3, r2, r3
    b19e:	6819      	ldr	r1, [r3, #0]
    b1a0:	69fa      	ldr	r2, [r7, #28]
    b1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b1a4:	0018      	movs	r0, r3
    b1a6:	4b33      	ldr	r3, [pc, #204]	; (b274 <print_object+0x5b8>)
    b1a8:	4798      	blx	r3
    b1aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b1ac:	69fb      	ldr	r3, [r7, #28]
    b1ae:	18d3      	adds	r3, r2, r3
    b1b0:	643b      	str	r3, [r7, #64]	; 0x40
			*ptr++=':';//if (fmt) *ptr++='\t';
    b1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b1b4:	1c5a      	adds	r2, r3, #1
    b1b6:	643a      	str	r2, [r7, #64]	; 0x40
    b1b8:	223a      	movs	r2, #58	; 0x3a
    b1ba:	701a      	strb	r2, [r3, #0]
			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
    b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b1be:	009b      	lsls	r3, r3, #2
    b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b1c2:	18d3      	adds	r3, r2, r3
    b1c4:	681a      	ldr	r2, [r3, #0]
    b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b1c8:	0011      	movs	r1, r2
    b1ca:	0018      	movs	r0, r3
    b1cc:	4b2a      	ldr	r3, [pc, #168]	; (b278 <print_object+0x5bc>)
    b1ce:	4798      	blx	r3
    b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b1d2:	009b      	lsls	r3, r3, #2
    b1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b1d6:	18d3      	adds	r3, r2, r3
    b1d8:	681b      	ldr	r3, [r3, #0]
    b1da:	0018      	movs	r0, r3
    b1dc:	4b22      	ldr	r3, [pc, #136]	; (b268 <print_object+0x5ac>)
    b1de:	4798      	blx	r3
    b1e0:	0002      	movs	r2, r0
    b1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b1e4:	189b      	adds	r3, r3, r2
    b1e6:	643b      	str	r3, [r7, #64]	; 0x40
			if (i!=numentries-1) *ptr++=',';
    b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1ea:	1e5a      	subs	r2, r3, #1
    b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b1ee:	429a      	cmp	r2, r3
    b1f0:	d004      	beq.n	b1fc <print_object+0x540>
    b1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b1f4:	1c5a      	adds	r2, r3, #1
    b1f6:	643a      	str	r2, [r7, #64]	; 0x40
    b1f8:	222c      	movs	r2, #44	; 0x2c
    b1fa:	701a      	strb	r2, [r3, #0]
			//if (fmt) *ptr++='\n';*ptr=0;
			cJSON_free(names[i]);cJSON_free(entries[i]);
    b1fc:	4b1c      	ldr	r3, [pc, #112]	; (b270 <print_object+0x5b4>)
    b1fe:	681a      	ldr	r2, [r3, #0]
    b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b202:	009b      	lsls	r3, r3, #2
    b204:	6a39      	ldr	r1, [r7, #32]
    b206:	18cb      	adds	r3, r1, r3
    b208:	681b      	ldr	r3, [r3, #0]
    b20a:	0018      	movs	r0, r3
    b20c:	4790      	blx	r2
    b20e:	4b18      	ldr	r3, [pc, #96]	; (b270 <print_object+0x5b4>)
    b210:	681a      	ldr	r2, [r3, #0]
    b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b214:	009b      	lsls	r3, r3, #2
    b216:	6a79      	ldr	r1, [r7, #36]	; 0x24
    b218:	18cb      	adds	r3, r1, r3
    b21a:	681b      	ldr	r3, [r3, #0]
    b21c:	0018      	movs	r0, r3
    b21e:	4790      	blx	r2
		for (i=0;i<numentries;i++)
    b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b222:	3301      	adds	r3, #1
    b224:	63bb      	str	r3, [r7, #56]	; 0x38
    b226:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b22a:	429a      	cmp	r2, r3
    b22c:	dba9      	blt.n	b182 <print_object+0x4c6>
		}
		
		cJSON_free(names);cJSON_free(entries);
    b22e:	4b10      	ldr	r3, [pc, #64]	; (b270 <print_object+0x5b4>)
    b230:	681b      	ldr	r3, [r3, #0]
    b232:	6a3a      	ldr	r2, [r7, #32]
    b234:	0010      	movs	r0, r2
    b236:	4798      	blx	r3
    b238:	4b0d      	ldr	r3, [pc, #52]	; (b270 <print_object+0x5b4>)
    b23a:	681b      	ldr	r3, [r3, #0]
    b23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b23e:	0010      	movs	r0, r2
    b240:	4798      	blx	r3
		//if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
		*ptr++='}';*ptr++=0;
    b242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b244:	1c5a      	adds	r2, r3, #1
    b246:	643a      	str	r2, [r7, #64]	; 0x40
    b248:	227d      	movs	r2, #125	; 0x7d
    b24a:	701a      	strb	r2, [r3, #0]
    b24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b24e:	1c5a      	adds	r2, r3, #1
    b250:	643a      	str	r2, [r7, #64]	; 0x40
    b252:	2200      	movs	r2, #0
    b254:	701a      	strb	r2, [r3, #0]
	}
	return out;	
    b256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    b258:	0018      	movs	r0, r3
    b25a:	46bd      	mov	sp, r7
    b25c:	b012      	add	sp, #72	; 0x48
    b25e:	bdb0      	pop	{r4, r5, r7, pc}
    b260:	0000a4a1 	.word	0x0000a4a1
    b264:	0000a7a5 	.word	0x0000a7a5
    b268:	0001a3e3 	.word	0x0001a3e3
    b26c:	20000004 	.word	0x20000004
    b270:	20000008 	.word	0x20000008
    b274:	00019e6b 	.word	0x00019e6b
    b278:	0001a3d3 	.word	0x0001a3d3

0000b27c <suffix_object>:
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
    b27c:	b580      	push	{r7, lr}
    b27e:	b082      	sub	sp, #8
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
    b284:	6039      	str	r1, [r7, #0]
    b286:	687b      	ldr	r3, [r7, #4]
    b288:	683a      	ldr	r2, [r7, #0]
    b28a:	601a      	str	r2, [r3, #0]
    b28c:	683b      	ldr	r3, [r7, #0]
    b28e:	687a      	ldr	r2, [r7, #4]
    b290:	605a      	str	r2, [r3, #4]
    b292:	46c0      	nop			; (mov r8, r8)
    b294:	46bd      	mov	sp, r7
    b296:	b002      	add	sp, #8
    b298:	bd80      	pop	{r7, pc}
	...

0000b29c <cJSON_AddItemToArray>:
/* Utility for handling references. */
static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
    b29c:	b580      	push	{r7, lr}
    b29e:	b084      	sub	sp, #16
    b2a0:	af00      	add	r7, sp, #0
    b2a2:	6078      	str	r0, [r7, #4]
    b2a4:	6039      	str	r1, [r7, #0]
    b2a6:	687b      	ldr	r3, [r7, #4]
    b2a8:	689b      	ldr	r3, [r3, #8]
    b2aa:	60fb      	str	r3, [r7, #12]
    b2ac:	683b      	ldr	r3, [r7, #0]
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	d017      	beq.n	b2e2 <cJSON_AddItemToArray+0x46>
    b2b2:	68fb      	ldr	r3, [r7, #12]
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d106      	bne.n	b2c6 <cJSON_AddItemToArray+0x2a>
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	683a      	ldr	r2, [r7, #0]
    b2bc:	609a      	str	r2, [r3, #8]
    b2be:	e011      	b.n	b2e4 <cJSON_AddItemToArray+0x48>
    b2c0:	68fb      	ldr	r3, [r7, #12]
    b2c2:	681b      	ldr	r3, [r3, #0]
    b2c4:	60fb      	str	r3, [r7, #12]
    b2c6:	68fb      	ldr	r3, [r7, #12]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d003      	beq.n	b2d4 <cJSON_AddItemToArray+0x38>
    b2cc:	68fb      	ldr	r3, [r7, #12]
    b2ce:	681b      	ldr	r3, [r3, #0]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d1f5      	bne.n	b2c0 <cJSON_AddItemToArray+0x24>
    b2d4:	683a      	ldr	r2, [r7, #0]
    b2d6:	68fb      	ldr	r3, [r7, #12]
    b2d8:	0011      	movs	r1, r2
    b2da:	0018      	movs	r0, r3
    b2dc:	4b03      	ldr	r3, [pc, #12]	; (b2ec <cJSON_AddItemToArray+0x50>)
    b2de:	4798      	blx	r3
    b2e0:	e000      	b.n	b2e4 <cJSON_AddItemToArray+0x48>
    b2e2:	46c0      	nop			; (mov r8, r8)
    b2e4:	46bd      	mov	sp, r7
    b2e6:	b004      	add	sp, #16
    b2e8:	bd80      	pop	{r7, pc}
    b2ea:	46c0      	nop			; (mov r8, r8)
    b2ec:	0000b27d 	.word	0x0000b27d

0000b2f0 <cJSON_AddItemToObject>:
void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b084      	sub	sp, #16
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	60f8      	str	r0, [r7, #12]
    b2f8:	60b9      	str	r1, [r7, #8]
    b2fa:	607a      	str	r2, [r7, #4]
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	2b00      	cmp	r3, #0
    b300:	d017      	beq.n	b332 <cJSON_AddItemToObject+0x42>
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	6a1b      	ldr	r3, [r3, #32]
    b306:	2b00      	cmp	r3, #0
    b308:	d005      	beq.n	b316 <cJSON_AddItemToObject+0x26>
    b30a:	4b0c      	ldr	r3, [pc, #48]	; (b33c <cJSON_AddItemToObject+0x4c>)
    b30c:	681a      	ldr	r2, [r3, #0]
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	6a1b      	ldr	r3, [r3, #32]
    b312:	0018      	movs	r0, r3
    b314:	4790      	blx	r2
    b316:	68bb      	ldr	r3, [r7, #8]
    b318:	0018      	movs	r0, r3
    b31a:	4b09      	ldr	r3, [pc, #36]	; (b340 <cJSON_AddItemToObject+0x50>)
    b31c:	4798      	blx	r3
    b31e:	0002      	movs	r2, r0
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	621a      	str	r2, [r3, #32]
    b324:	687a      	ldr	r2, [r7, #4]
    b326:	68fb      	ldr	r3, [r7, #12]
    b328:	0011      	movs	r1, r2
    b32a:	0018      	movs	r0, r3
    b32c:	4b05      	ldr	r3, [pc, #20]	; (b344 <cJSON_AddItemToObject+0x54>)
    b32e:	4798      	blx	r3
    b330:	e000      	b.n	b334 <cJSON_AddItemToObject+0x44>
    b332:	46c0      	nop			; (mov r8, r8)
    b334:	46bd      	mov	sp, r7
    b336:	b004      	add	sp, #16
    b338:	bd80      	pop	{r7, pc}
    b33a:	46c0      	nop			; (mov r8, r8)
    b33c:	20000008 	.word	0x20000008
    b340:	00009fed 	.word	0x00009fed
    b344:	0000b29d 	.word	0x0000b29d

0000b348 <cJSON_CreateNumber>:
/* Create basic types: */
cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
    b348:	b590      	push	{r4, r7, lr}
    b34a:	b085      	sub	sp, #20
    b34c:	af00      	add	r7, sp, #0
    b34e:	6038      	str	r0, [r7, #0]
    b350:	6079      	str	r1, [r7, #4]
    b352:	4b0d      	ldr	r3, [pc, #52]	; (b388 <cJSON_CreateNumber+0x40>)
    b354:	4798      	blx	r3
    b356:	0003      	movs	r3, r0
    b358:	60fb      	str	r3, [r7, #12]
    b35a:	68fb      	ldr	r3, [r7, #12]
    b35c:	2b00      	cmp	r3, #0
    b35e:	d00e      	beq.n	b37e <cJSON_CreateNumber+0x36>
    b360:	68fb      	ldr	r3, [r7, #12]
    b362:	2203      	movs	r2, #3
    b364:	60da      	str	r2, [r3, #12]
    b366:	68fa      	ldr	r2, [r7, #12]
    b368:	683b      	ldr	r3, [r7, #0]
    b36a:	687c      	ldr	r4, [r7, #4]
    b36c:	6193      	str	r3, [r2, #24]
    b36e:	61d4      	str	r4, [r2, #28]
    b370:	4b06      	ldr	r3, [pc, #24]	; (b38c <cJSON_CreateNumber+0x44>)
    b372:	6838      	ldr	r0, [r7, #0]
    b374:	6879      	ldr	r1, [r7, #4]
    b376:	4798      	blx	r3
    b378:	0002      	movs	r2, r0
    b37a:	68fb      	ldr	r3, [r7, #12]
    b37c:	615a      	str	r2, [r3, #20]
    b37e:	68fb      	ldr	r3, [r7, #12]
    b380:	0018      	movs	r0, r3
    b382:	46bd      	mov	sp, r7
    b384:	b005      	add	sp, #20
    b386:	bd90      	pop	{r4, r7, pc}
    b388:	0000a03d 	.word	0x0000a03d
    b38c:	00019c0d 	.word	0x00019c0d

0000b390 <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
    b390:	b580      	push	{r7, lr}
    b392:	b084      	sub	sp, #16
    b394:	af00      	add	r7, sp, #0
    b396:	6078      	str	r0, [r7, #4]
    b398:	4b0a      	ldr	r3, [pc, #40]	; (b3c4 <cJSON_CreateString+0x34>)
    b39a:	4798      	blx	r3
    b39c:	0003      	movs	r3, r0
    b39e:	60fb      	str	r3, [r7, #12]
    b3a0:	68fb      	ldr	r3, [r7, #12]
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d009      	beq.n	b3ba <cJSON_CreateString+0x2a>
    b3a6:	68fb      	ldr	r3, [r7, #12]
    b3a8:	2204      	movs	r2, #4
    b3aa:	60da      	str	r2, [r3, #12]
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	0018      	movs	r0, r3
    b3b0:	4b05      	ldr	r3, [pc, #20]	; (b3c8 <cJSON_CreateString+0x38>)
    b3b2:	4798      	blx	r3
    b3b4:	0002      	movs	r2, r0
    b3b6:	68fb      	ldr	r3, [r7, #12]
    b3b8:	611a      	str	r2, [r3, #16]
    b3ba:	68fb      	ldr	r3, [r7, #12]
    b3bc:	0018      	movs	r0, r3
    b3be:	46bd      	mov	sp, r7
    b3c0:	b004      	add	sp, #16
    b3c2:	bd80      	pop	{r7, pc}
    b3c4:	0000a03d 	.word	0x0000a03d
    b3c8:	00009fed 	.word	0x00009fed

0000b3cc <cJSON_CreateArray>:
cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
    b3cc:	b580      	push	{r7, lr}
    b3ce:	b082      	sub	sp, #8
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	4b07      	ldr	r3, [pc, #28]	; (b3f0 <cJSON_CreateArray+0x24>)
    b3d4:	4798      	blx	r3
    b3d6:	0003      	movs	r3, r0
    b3d8:	607b      	str	r3, [r7, #4]
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d002      	beq.n	b3e6 <cJSON_CreateArray+0x1a>
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	2205      	movs	r2, #5
    b3e4:	60da      	str	r2, [r3, #12]
    b3e6:	687b      	ldr	r3, [r7, #4]
    b3e8:	0018      	movs	r0, r3
    b3ea:	46bd      	mov	sp, r7
    b3ec:	b002      	add	sp, #8
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	0000a03d 	.word	0x0000a03d

0000b3f4 <cJSON_CreateObject>:
cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
    b3f4:	b580      	push	{r7, lr}
    b3f6:	b082      	sub	sp, #8
    b3f8:	af00      	add	r7, sp, #0
    b3fa:	4b07      	ldr	r3, [pc, #28]	; (b418 <cJSON_CreateObject+0x24>)
    b3fc:	4798      	blx	r3
    b3fe:	0003      	movs	r3, r0
    b400:	607b      	str	r3, [r7, #4]
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	2b00      	cmp	r3, #0
    b406:	d002      	beq.n	b40e <cJSON_CreateObject+0x1a>
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	2206      	movs	r2, #6
    b40c:	60da      	str	r2, [r3, #12]
    b40e:	687b      	ldr	r3, [r7, #4]
    b410:	0018      	movs	r0, r3
    b412:	46bd      	mov	sp, r7
    b414:	b002      	add	sp, #8
    b416:	bd80      	pop	{r7, pc}
    b418:	0000a03d 	.word	0x0000a03d

0000b41c <system_pinmux_get_group_from_gpio_pin>:
{
    b41c:	b580      	push	{r7, lr}
    b41e:	b084      	sub	sp, #16
    b420:	af00      	add	r7, sp, #0
    b422:	0002      	movs	r2, r0
    b424:	1dfb      	adds	r3, r7, #7
    b426:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b428:	230f      	movs	r3, #15
    b42a:	18fb      	adds	r3, r7, r3
    b42c:	1dfa      	adds	r2, r7, #7
    b42e:	7812      	ldrb	r2, [r2, #0]
    b430:	09d2      	lsrs	r2, r2, #7
    b432:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b434:	230e      	movs	r3, #14
    b436:	18fb      	adds	r3, r7, r3
    b438:	1dfa      	adds	r2, r7, #7
    b43a:	7812      	ldrb	r2, [r2, #0]
    b43c:	0952      	lsrs	r2, r2, #5
    b43e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b440:	4b0d      	ldr	r3, [pc, #52]	; (b478 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b442:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b444:	230f      	movs	r3, #15
    b446:	18fb      	adds	r3, r7, r3
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	2b00      	cmp	r3, #0
    b44c:	d10f      	bne.n	b46e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b44e:	230f      	movs	r3, #15
    b450:	18fb      	adds	r3, r7, r3
    b452:	781b      	ldrb	r3, [r3, #0]
    b454:	009b      	lsls	r3, r3, #2
    b456:	2210      	movs	r2, #16
    b458:	4694      	mov	ip, r2
    b45a:	44bc      	add	ip, r7
    b45c:	4463      	add	r3, ip
    b45e:	3b08      	subs	r3, #8
    b460:	681a      	ldr	r2, [r3, #0]
    b462:	230e      	movs	r3, #14
    b464:	18fb      	adds	r3, r7, r3
    b466:	781b      	ldrb	r3, [r3, #0]
    b468:	01db      	lsls	r3, r3, #7
    b46a:	18d3      	adds	r3, r2, r3
    b46c:	e000      	b.n	b470 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b46e:	2300      	movs	r3, #0
}
    b470:	0018      	movs	r0, r3
    b472:	46bd      	mov	sp, r7
    b474:	b004      	add	sp, #16
    b476:	bd80      	pop	{r7, pc}
    b478:	40002800 	.word	0x40002800

0000b47c <port_get_group_from_gpio_pin>:
{
    b47c:	b580      	push	{r7, lr}
    b47e:	b082      	sub	sp, #8
    b480:	af00      	add	r7, sp, #0
    b482:	0002      	movs	r2, r0
    b484:	1dfb      	adds	r3, r7, #7
    b486:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b488:	1dfb      	adds	r3, r7, #7
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	0018      	movs	r0, r3
    b48e:	4b03      	ldr	r3, [pc, #12]	; (b49c <port_get_group_from_gpio_pin+0x20>)
    b490:	4798      	blx	r3
    b492:	0003      	movs	r3, r0
}
    b494:	0018      	movs	r0, r3
    b496:	46bd      	mov	sp, r7
    b498:	b002      	add	sp, #8
    b49a:	bd80      	pop	{r7, pc}
    b49c:	0000b41d 	.word	0x0000b41d

0000b4a0 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    b4a0:	b580      	push	{r7, lr}
    b4a2:	b084      	sub	sp, #16
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	0002      	movs	r2, r0
    b4a8:	1dfb      	adds	r3, r7, #7
    b4aa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b4ac:	1dfb      	adds	r3, r7, #7
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	0018      	movs	r0, r3
    b4b2:	4b09      	ldr	r3, [pc, #36]	; (b4d8 <port_pin_toggle_output_level+0x38>)
    b4b4:	4798      	blx	r3
    b4b6:	0003      	movs	r3, r0
    b4b8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b4ba:	1dfb      	adds	r3, r7, #7
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	221f      	movs	r2, #31
    b4c0:	4013      	ands	r3, r2
    b4c2:	2201      	movs	r2, #1
    b4c4:	409a      	lsls	r2, r3
    b4c6:	0013      	movs	r3, r2
    b4c8:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    b4ca:	68fb      	ldr	r3, [r7, #12]
    b4cc:	68ba      	ldr	r2, [r7, #8]
    b4ce:	61da      	str	r2, [r3, #28]
}
    b4d0:	46c0      	nop			; (mov r8, r8)
    b4d2:	46bd      	mov	sp, r7
    b4d4:	b004      	add	sp, #16
    b4d6:	bd80      	pop	{r7, pc}
    b4d8:	0000b47d 	.word	0x0000b47d

0000b4dc <jsonMessagePublish>:
	return 0;
}


static void jsonMessagePublish(char* channel, cJSON *message)
{
    b4dc:	b590      	push	{r4, r7, lr}
    b4de:	b085      	sub	sp, #20
    b4e0:	af00      	add	r7, sp, #0
    b4e2:	6078      	str	r0, [r7, #4]
    b4e4:	6039      	str	r1, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    b4e6:	230f      	movs	r3, #15
    b4e8:	18fb      	adds	r3, r7, r3
    b4ea:	2200      	movs	r2, #0
    b4ec:	701a      	strb	r2, [r3, #0]
	char* out;
	out = cJSON_Print(message);
    b4ee:	683b      	ldr	r3, [r7, #0]
    b4f0:	0018      	movs	r0, r3
    b4f2:	4b23      	ldr	r3, [pc, #140]	; (b580 <jsonMessagePublish+0xa4>)
    b4f4:	4798      	blx	r3
    b4f6:	0003      	movs	r3, r0
    b4f8:	60bb      	str	r3, [r7, #8]
	Msg.qos = QOS_0;
    b4fa:	4b22      	ldr	r3, [pc, #136]	; (b584 <jsonMessagePublish+0xa8>)
    b4fc:	2200      	movs	r2, #0
    b4fe:	701a      	strb	r2, [r3, #0]
	Msg.PayloadLen = strlen(out) + 1;
    b500:	68bb      	ldr	r3, [r7, #8]
    b502:	0018      	movs	r0, r3
    b504:	4b20      	ldr	r3, [pc, #128]	; (b588 <jsonMessagePublish+0xac>)
    b506:	4798      	blx	r3
    b508:	0003      	movs	r3, r0
    b50a:	1c5a      	adds	r2, r3, #1
    b50c:	4b1d      	ldr	r3, [pc, #116]	; (b584 <jsonMessagePublish+0xa8>)
    b50e:	60da      	str	r2, [r3, #12]
	Msg.pPayload = (void *)out ;
    b510:	4b1c      	ldr	r3, [pc, #112]	; (b584 <jsonMessagePublish+0xa8>)
    b512:	68ba      	ldr	r2, [r7, #8]
    b514:	609a      	str	r2, [r3, #8]
	Params.pTopic = (char*)channel;
    b516:	4b1d      	ldr	r3, [pc, #116]	; (b58c <jsonMessagePublish+0xb0>)
    b518:	687a      	ldr	r2, [r7, #4]
    b51a:	601a      	str	r2, [r3, #0]
	Params.MessageParams = Msg;
    b51c:	4b1b      	ldr	r3, [pc, #108]	; (b58c <jsonMessagePublish+0xb0>)
    b51e:	4a19      	ldr	r2, [pc, #100]	; (b584 <jsonMessagePublish+0xa8>)
    b520:	3304      	adds	r3, #4
    b522:	ca13      	ldmia	r2!, {r0, r1, r4}
    b524:	c313      	stmia	r3!, {r0, r1, r4}
    b526:	6812      	ldr	r2, [r2, #0]
    b528:	601a      	str	r2, [r3, #0]
	rc = aws_iot_mqtt_publish(&Params);
    b52a:	230f      	movs	r3, #15
    b52c:	18fc      	adds	r4, r7, r3
    b52e:	4b17      	ldr	r3, [pc, #92]	; (b58c <jsonMessagePublish+0xb0>)
    b530:	0018      	movs	r0, r3
    b532:	4b17      	ldr	r3, [pc, #92]	; (b590 <jsonMessagePublish+0xb4>)
    b534:	4798      	blx	r3
    b536:	0003      	movs	r3, r0
    b538:	7023      	strb	r3, [r4, #0]
	if (rc != NONE_ERROR)
    b53a:	230f      	movs	r3, #15
    b53c:	18fb      	adds	r3, r7, r3
    b53e:	781b      	ldrb	r3, [r3, #0]
    b540:	b25b      	sxtb	r3, r3
    b542:	2b00      	cmp	r3, #0
    b544:	d00f      	beq.n	b566 <jsonMessagePublish+0x8a>
	{
			printf("aws_iot_mqtt_publish() error, rc = %d\n", rc);
    b546:	230f      	movs	r3, #15
    b548:	18fb      	adds	r3, r7, r3
    b54a:	2200      	movs	r2, #0
    b54c:	569a      	ldrsb	r2, [r3, r2]
    b54e:	4b11      	ldr	r3, [pc, #68]	; (b594 <jsonMessagePublish+0xb8>)
    b550:	0011      	movs	r1, r2
    b552:	0018      	movs	r0, r3
    b554:	4b10      	ldr	r3, [pc, #64]	; (b598 <jsonMessagePublish+0xbc>)
    b556:	4798      	blx	r3
			while(1)
			{
				LED_Toggle(LED0);
    b558:	2013      	movs	r0, #19
    b55a:	4b10      	ldr	r3, [pc, #64]	; (b59c <jsonMessagePublish+0xc0>)
    b55c:	4798      	blx	r3
				delay_ms(100);
    b55e:	2064      	movs	r0, #100	; 0x64
    b560:	4b0f      	ldr	r3, [pc, #60]	; (b5a0 <jsonMessagePublish+0xc4>)
    b562:	4798      	blx	r3
				LED_Toggle(LED0);
    b564:	e7f8      	b.n	b558 <jsonMessagePublish+0x7c>
			}
	}
	else
	{
		printf("aws_iot_mqtt  publish success!!!\r\n");
    b566:	4b0f      	ldr	r3, [pc, #60]	; (b5a4 <jsonMessagePublish+0xc8>)
    b568:	0018      	movs	r0, r3
    b56a:	4b0f      	ldr	r3, [pc, #60]	; (b5a8 <jsonMessagePublish+0xcc>)
    b56c:	4798      	blx	r3
	}

	free(out);
    b56e:	68bb      	ldr	r3, [r7, #8]
    b570:	0018      	movs	r0, r3
    b572:	4b0e      	ldr	r3, [pc, #56]	; (b5ac <jsonMessagePublish+0xd0>)
    b574:	4798      	blx	r3
	
}
    b576:	46c0      	nop			; (mov r8, r8)
    b578:	46bd      	mov	sp, r7
    b57a:	b005      	add	sp, #20
    b57c:	bd90      	pop	{r4, r7, pc}
    b57e:	46c0      	nop			; (mov r8, r8)
    b580:	0000a781 	.word	0x0000a781
    b584:	20000bf4 	.word	0x20000bf4
    b588:	0001a3e3 	.word	0x0001a3e3
    b58c:	20000be0 	.word	0x20000be0
    b590:	000061e1 	.word	0x000061e1
    b594:	0001c7b4 	.word	0x0001c7b4
    b598:	0001a001 	.word	0x0001a001
    b59c:	0000b4a1 	.word	0x0000b4a1
    b5a0:	00010d8d 	.word	0x00010d8d
    b5a4:	0001c7dc 	.word	0x0001c7dc
    b5a8:	0001a11d 	.word	0x0001a11d
    b5ac:	00019e39 	.word	0x00019e39

0000b5b0 <cloud_mqtt_yield>:
	}
	return rc;
}

Cloud_RC cloud_mqtt_yield(int timeout)
{
    b5b0:	b590      	push	{r4, r7, lr}
    b5b2:	b085      	sub	sp, #20
    b5b4:	af00      	add	r7, sp, #0
    b5b6:	6078      	str	r0, [r7, #4]
	IoT_Error_t rc = NONE_ERROR;
    b5b8:	230f      	movs	r3, #15
    b5ba:	18fb      	adds	r3, r7, r3
    b5bc:	2200      	movs	r2, #0
    b5be:	701a      	strb	r2, [r3, #0]
	rc = aws_iot_mqtt_yield(timeout);
    b5c0:	230f      	movs	r3, #15
    b5c2:	18fc      	adds	r4, r7, r3
    b5c4:	687b      	ldr	r3, [r7, #4]
    b5c6:	0018      	movs	r0, r3
    b5c8:	4b05      	ldr	r3, [pc, #20]	; (b5e0 <cloud_mqtt_yield+0x30>)
    b5ca:	4798      	blx	r3
    b5cc:	0003      	movs	r3, r0
    b5ce:	7023      	strb	r3, [r4, #0]
	return rc;
    b5d0:	230f      	movs	r3, #15
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	b25b      	sxtb	r3, r3
}
    b5d8:	0018      	movs	r0, r3
    b5da:	46bd      	mov	sp, r7
    b5dc:	b005      	add	sp, #20
    b5de:	bd90      	pop	{r4, r7, pc}
    b5e0:	00006265 	.word	0x00006265

0000b5e4 <cloud_mqtt_publish>:

Cloud_RC cloud_mqtt_publish(char* channel, void* message)
{
    b5e4:	b580      	push	{r7, lr}
    b5e6:	b084      	sub	sp, #16
    b5e8:	af00      	add	r7, sp, #0
    b5ea:	6078      	str	r0, [r7, #4]
    b5ec:	6039      	str	r1, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    b5ee:	230f      	movs	r3, #15
    b5f0:	18fb      	adds	r3, r7, r3
    b5f2:	2200      	movs	r2, #0
    b5f4:	701a      	strb	r2, [r3, #0]
	jsonMessagePublish(channel, message);
    b5f6:	683a      	ldr	r2, [r7, #0]
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	0011      	movs	r1, r2
    b5fc:	0018      	movs	r0, r3
    b5fe:	4b05      	ldr	r3, [pc, #20]	; (b614 <cloud_mqtt_publish+0x30>)
    b600:	4798      	blx	r3
	
	return rc;
    b602:	230f      	movs	r3, #15
    b604:	18fb      	adds	r3, r7, r3
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	b25b      	sxtb	r3, r3
	
}
    b60a:	0018      	movs	r0, r3
    b60c:	46bd      	mov	sp, r7
    b60e:	b004      	add	sp, #16
    b610:	bd80      	pop	{r7, pc}
    b612:	46c0      	nop			; (mov r8, r8)
    b614:	0000b4dd 	.word	0x0000b4dd

0000b618 <cloud_create_topic>:
	return rc;
	
}

Cloud_RC cloud_create_topic(char* full_path, char* device_type, char* device_id, char* topic_name)
{
    b618:	b580      	push	{r7, lr}
    b61a:	b086      	sub	sp, #24
    b61c:	af00      	add	r7, sp, #0
    b61e:	60f8      	str	r0, [r7, #12]
    b620:	60b9      	str	r1, [r7, #8]
    b622:	607a      	str	r2, [r7, #4]
    b624:	603b      	str	r3, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    b626:	2317      	movs	r3, #23
    b628:	18fb      	adds	r3, r7, r3
    b62a:	2200      	movs	r2, #0
    b62c:	701a      	strb	r2, [r3, #0]
	sprintf(full_path, "/Microchip/WSN_Demo/MiWi\0");
    b62e:	68fa      	ldr	r2, [r7, #12]
    b630:	4b07      	ldr	r3, [pc, #28]	; (b650 <cloud_create_topic+0x38>)
    b632:	0010      	movs	r0, r2
    b634:	0019      	movs	r1, r3
    b636:	2319      	movs	r3, #25
    b638:	001a      	movs	r2, r3
    b63a:	4b06      	ldr	r3, [pc, #24]	; (b654 <cloud_create_topic+0x3c>)
    b63c:	4798      	blx	r3
	return rc;
    b63e:	2317      	movs	r3, #23
    b640:	18fb      	adds	r3, r7, r3
    b642:	781b      	ldrb	r3, [r3, #0]
    b644:	b25b      	sxtb	r3, r3
	
}
    b646:	0018      	movs	r0, r3
    b648:	46bd      	mov	sp, r7
    b64a:	b006      	add	sp, #24
    b64c:	bd80      	pop	{r7, pc}
    b64e:	46c0      	nop			; (mov r8, r8)
    b650:	0001c89c 	.word	0x0001c89c
    b654:	00019e6b 	.word	0x00019e6b

0000b658 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    b658:	b590      	push	{r4, r7, lr}
    b65a:	b085      	sub	sp, #20
    b65c:	af00      	add	r7, sp, #0
    b65e:	0002      	movs	r2, r0
    b660:	1dfb      	adds	r3, r7, #7
    b662:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    b664:	230b      	movs	r3, #11
    b666:	18fb      	adds	r3, r7, r3
    b668:	2200      	movs	r2, #0
    b66a:	701a      	strb	r2, [r3, #0]
    ATCACommand cacmd = (ATCACommand)malloc(sizeof(struct atca_command));
    b66c:	2008      	movs	r0, #8
    b66e:	4b11      	ldr	r3, [pc, #68]	; (b6b4 <newATCACommand+0x5c>)
    b670:	4798      	blx	r3
    b672:	0003      	movs	r3, r0
    b674:	60fb      	str	r3, [r7, #12]

    cacmd->dt = device_type;
    b676:	68fb      	ldr	r3, [r7, #12]
    b678:	1dfa      	adds	r2, r7, #7
    b67a:	7812      	ldrb	r2, [r2, #0]
    b67c:	701a      	strb	r2, [r3, #0]
    status = atInitExecTimes(cacmd, device_type);  // setup typical execution times for this device type
    b67e:	230b      	movs	r3, #11
    b680:	18fc      	adds	r4, r7, r3
    b682:	1dfb      	adds	r3, r7, #7
    b684:	781a      	ldrb	r2, [r3, #0]
    b686:	68fb      	ldr	r3, [r7, #12]
    b688:	0011      	movs	r1, r2
    b68a:	0018      	movs	r0, r3
    b68c:	4b0a      	ldr	r3, [pc, #40]	; (b6b8 <newATCACommand+0x60>)
    b68e:	4798      	blx	r3
    b690:	0003      	movs	r3, r0
    b692:	7023      	strb	r3, [r4, #0]

    if (status != ATCA_SUCCESS)
    b694:	230b      	movs	r3, #11
    b696:	18fb      	adds	r3, r7, r3
    b698:	781b      	ldrb	r3, [r3, #0]
    b69a:	2b00      	cmp	r3, #0
    b69c:	d005      	beq.n	b6aa <newATCACommand+0x52>
    {
        free(cacmd);
    b69e:	68fb      	ldr	r3, [r7, #12]
    b6a0:	0018      	movs	r0, r3
    b6a2:	4b06      	ldr	r3, [pc, #24]	; (b6bc <newATCACommand+0x64>)
    b6a4:	4798      	blx	r3
        cacmd = NULL;
    b6a6:	2300      	movs	r3, #0
    b6a8:	60fb      	str	r3, [r7, #12]
    }

    return cacmd;
    b6aa:	68fb      	ldr	r3, [r7, #12]
}
    b6ac:	0018      	movs	r0, r3
    b6ae:	46bd      	mov	sp, r7
    b6b0:	b005      	add	sp, #20
    b6b2:	bd90      	pop	{r4, r7, pc}
    b6b4:	00019e25 	.word	0x00019e25
    b6b8:	0000b925 	.word	0x0000b925
    b6bc:	00019e39 	.word	0x00019e39

0000b6c0 <atECDH>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atECDH(ATCACommand cacmd, ATCAPacket *packet)
{
    b6c0:	b580      	push	{r7, lr}
    b6c2:	b082      	sub	sp, #8
    b6c4:	af00      	add	r7, sp, #0
    b6c6:	6078      	str	r0, [r7, #4]
    b6c8:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_ECDH;
    b6ca:	683b      	ldr	r3, [r7, #0]
    b6cc:	2243      	movs	r2, #67	; 0x43
    b6ce:	709a      	strb	r2, [r3, #2]
    packet->txsize = ECDH_COUNT;
    b6d0:	683b      	ldr	r3, [r7, #0]
    b6d2:	2247      	movs	r2, #71	; 0x47
    b6d4:	705a      	strb	r2, [r3, #1]
    packet->rxsize = ECDH_RSP_SIZE;
    b6d6:	683b      	ldr	r3, [r7, #0]
    b6d8:	228a      	movs	r2, #138	; 0x8a
    b6da:	2123      	movs	r1, #35	; 0x23
    b6dc:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b6de:	683b      	ldr	r3, [r7, #0]
    b6e0:	0018      	movs	r0, r3
    b6e2:	4b03      	ldr	r3, [pc, #12]	; (b6f0 <atECDH+0x30>)
    b6e4:	4798      	blx	r3
    return ATCA_SUCCESS;
    b6e6:	2300      	movs	r3, #0
}
    b6e8:	0018      	movs	r0, r3
    b6ea:	46bd      	mov	sp, r7
    b6ec:	b002      	add	sp, #8
    b6ee:	bd80      	pop	{r7, pc}
    b6f0:	0000ba69 	.word	0x0000ba69

0000b6f4 <atGenKey>:
 * \param[in] cacmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atGenKey(ATCACommand cacmd, ATCAPacket *packet)
{
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b082      	sub	sp, #8
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	6078      	str	r0, [r7, #4]
    b6fc:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    b6fe:	683b      	ldr	r3, [r7, #0]
    b700:	2240      	movs	r2, #64	; 0x40
    b702:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    b704:	683b      	ldr	r3, [r7, #0]
    b706:	78db      	ldrb	r3, [r3, #3]
    b708:	001a      	movs	r2, r3
    b70a:	2310      	movs	r3, #16
    b70c:	4013      	ands	r3, r2
    b70e:	d007      	beq.n	b720 <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    b710:	683b      	ldr	r3, [r7, #0]
    b712:	220a      	movs	r2, #10
    b714:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    b716:	683b      	ldr	r3, [r7, #0]
    b718:	228a      	movs	r2, #138	; 0x8a
    b71a:	2104      	movs	r1, #4
    b71c:	5299      	strh	r1, [r3, r2]
    b71e:	e006      	b.n	b72e <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    b720:	683b      	ldr	r3, [r7, #0]
    b722:	2207      	movs	r2, #7
    b724:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    b726:	683b      	ldr	r3, [r7, #0]
    b728:	228a      	movs	r2, #138	; 0x8a
    b72a:	214b      	movs	r1, #75	; 0x4b
    b72c:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    b72e:	683b      	ldr	r3, [r7, #0]
    b730:	0018      	movs	r0, r3
    b732:	4b03      	ldr	r3, [pc, #12]	; (b740 <atGenKey+0x4c>)
    b734:	4798      	blx	r3
    return ATCA_SUCCESS;
    b736:	2300      	movs	r3, #0
}
    b738:	0018      	movs	r0, r3
    b73a:	46bd      	mov	sp, r7
    b73c:	b002      	add	sp, #8
    b73e:	bd80      	pop	{r7, pc}
    b740:	0000ba69 	.word	0x0000ba69

0000b744 <atInfo>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atInfo(ATCACommand cacmd, ATCAPacket *packet)
{
    b744:	b580      	push	{r7, lr}
    b746:	b082      	sub	sp, #8
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    b74c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    b74e:	683b      	ldr	r3, [r7, #0]
    b750:	2230      	movs	r2, #48	; 0x30
    b752:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    b754:	683b      	ldr	r3, [r7, #0]
    b756:	2207      	movs	r2, #7
    b758:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    b75a:	683b      	ldr	r3, [r7, #0]
    b75c:	228a      	movs	r2, #138	; 0x8a
    b75e:	2107      	movs	r1, #7
    b760:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b762:	683b      	ldr	r3, [r7, #0]
    b764:	0018      	movs	r0, r3
    b766:	4b03      	ldr	r3, [pc, #12]	; (b774 <atInfo+0x30>)
    b768:	4798      	blx	r3
    return ATCA_SUCCESS;
    b76a:	2300      	movs	r3, #0
}
    b76c:	0018      	movs	r0, r3
    b76e:	46bd      	mov	sp, r7
    b770:	b002      	add	sp, #8
    b772:	bd80      	pop	{r7, pc}
    b774:	0000ba69 	.word	0x0000ba69

0000b778 <atNonce>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atNonce(ATCACommand cacmd, ATCAPacket *packet)
{
    b778:	b580      	push	{r7, lr}
    b77a:	b084      	sub	sp, #16
    b77c:	af00      	add	r7, sp, #0
    b77e:	6078      	str	r0, [r7, #4]
    b780:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    int mode = packet->param1 & 0x03;
    b782:	683b      	ldr	r3, [r7, #0]
    b784:	78db      	ldrb	r3, [r3, #3]
    b786:	001a      	movs	r2, r3
    b788:	2303      	movs	r3, #3
    b78a:	4013      	ands	r3, r2
    b78c:	60fb      	str	r3, [r7, #12]

    packet->opcode = ATCA_NONCE;
    b78e:	683b      	ldr	r3, [r7, #0]
    b790:	2216      	movs	r2, #22
    b792:	709a      	strb	r2, [r3, #2]

    if ( (mode == 0 || mode == 1) )         // mode[0:1] == 0 | 1 then NumIn is 20 bytes
    b794:	68fb      	ldr	r3, [r7, #12]
    b796:	2b00      	cmp	r3, #0
    b798:	d002      	beq.n	b7a0 <atNonce+0x28>
    b79a:	68fb      	ldr	r3, [r7, #12]
    b79c:	2b01      	cmp	r3, #1
    b79e:	d107      	bne.n	b7b0 <atNonce+0x38>
    {
        packet->txsize = NONCE_COUNT_SHORT; // 20 byte challenge
    b7a0:	683b      	ldr	r3, [r7, #0]
    b7a2:	221b      	movs	r2, #27
    b7a4:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG;
    b7a6:	683b      	ldr	r3, [r7, #0]
    b7a8:	228a      	movs	r2, #138	; 0x8a
    b7aa:	2123      	movs	r1, #35	; 0x23
    b7ac:	5299      	strh	r1, [r3, r2]
    b7ae:	e00c      	b.n	b7ca <atNonce+0x52>
    }
    else if (mode == 0x03)                  // NumIn is 32 bytes
    b7b0:	68fb      	ldr	r3, [r7, #12]
    b7b2:	2b03      	cmp	r3, #3
    b7b4:	d107      	bne.n	b7c6 <atNonce+0x4e>
    {
        packet->txsize = NONCE_COUNT_LONG;  // 32 byte challenge
    b7b6:	683b      	ldr	r3, [r7, #0]
    b7b8:	2227      	movs	r2, #39	; 0x27
    b7ba:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT;
    b7bc:	683b      	ldr	r3, [r7, #0]
    b7be:	228a      	movs	r2, #138	; 0x8a
    b7c0:	2104      	movs	r1, #4
    b7c2:	5299      	strh	r1, [r3, r2]
    b7c4:	e001      	b.n	b7ca <atNonce+0x52>
    }
    else
    {
        return ATCA_BAD_PARAM;
    b7c6:	23e2      	movs	r3, #226	; 0xe2
    b7c8:	e004      	b.n	b7d4 <atNonce+0x5c>
    }

    atCalcCrc(packet);
    b7ca:	683b      	ldr	r3, [r7, #0]
    b7cc:	0018      	movs	r0, r3
    b7ce:	4b03      	ldr	r3, [pc, #12]	; (b7dc <atNonce+0x64>)
    b7d0:	4798      	blx	r3
    return ATCA_SUCCESS;
    b7d2:	2300      	movs	r3, #0
}
    b7d4:	0018      	movs	r0, r3
    b7d6:	46bd      	mov	sp, r7
    b7d8:	b004      	add	sp, #16
    b7da:	bd80      	pop	{r7, pc}
    b7dc:	0000ba69 	.word	0x0000ba69

0000b7e0 <atRandom>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRandom(ATCACommand cacmd, ATCAPacket *packet)
{
    b7e0:	b580      	push	{r7, lr}
    b7e2:	b082      	sub	sp, #8
    b7e4:	af00      	add	r7, sp, #0
    b7e6:	6078      	str	r0, [r7, #4]
    b7e8:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    b7ea:	683b      	ldr	r3, [r7, #0]
    b7ec:	221b      	movs	r2, #27
    b7ee:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    b7f0:	683b      	ldr	r3, [r7, #0]
    b7f2:	2207      	movs	r2, #7
    b7f4:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    b7f6:	683b      	ldr	r3, [r7, #0]
    b7f8:	228a      	movs	r2, #138	; 0x8a
    b7fa:	2123      	movs	r1, #35	; 0x23
    b7fc:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b7fe:	683b      	ldr	r3, [r7, #0]
    b800:	0018      	movs	r0, r3
    b802:	4b03      	ldr	r3, [pc, #12]	; (b810 <atRandom+0x30>)
    b804:	4798      	blx	r3
    return ATCA_SUCCESS;
    b806:	2300      	movs	r3, #0
}
    b808:	0018      	movs	r0, r3
    b80a:	46bd      	mov	sp, r7
    b80c:	b002      	add	sp, #8
    b80e:	bd80      	pop	{r7, pc}
    b810:	0000ba69 	.word	0x0000ba69

0000b814 <atRead>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRead(ATCACommand cacmd, ATCAPacket *packet)
{
    b814:	b580      	push	{r7, lr}
    b816:	b082      	sub	sp, #8
    b818:	af00      	add	r7, sp, #0
    b81a:	6078      	str	r0, [r7, #4]
    b81c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    b81e:	683b      	ldr	r3, [r7, #0]
    b820:	2202      	movs	r2, #2
    b822:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    b824:	683b      	ldr	r3, [r7, #0]
    b826:	2207      	movs	r2, #7
    b828:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    b82a:	683b      	ldr	r3, [r7, #0]
    b82c:	78db      	ldrb	r3, [r3, #3]
    b82e:	b25b      	sxtb	r3, r3
    b830:	2b00      	cmp	r3, #0
    b832:	db04      	blt.n	b83e <atRead+0x2a>
        packet->rxsize = READ_4_RSP_SIZE;
    b834:	683b      	ldr	r3, [r7, #0]
    b836:	228a      	movs	r2, #138	; 0x8a
    b838:	2107      	movs	r1, #7
    b83a:	5299      	strh	r1, [r3, r2]
    b83c:	e003      	b.n	b846 <atRead+0x32>
    else
        packet->rxsize = READ_32_RSP_SIZE;
    b83e:	683b      	ldr	r3, [r7, #0]
    b840:	228a      	movs	r2, #138	; 0x8a
    b842:	2123      	movs	r1, #35	; 0x23
    b844:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b846:	683b      	ldr	r3, [r7, #0]
    b848:	0018      	movs	r0, r3
    b84a:	4b03      	ldr	r3, [pc, #12]	; (b858 <atRead+0x44>)
    b84c:	4798      	blx	r3
    return ATCA_SUCCESS;
    b84e:	2300      	movs	r3, #0
}
    b850:	0018      	movs	r0, r3
    b852:	46bd      	mov	sp, r7
    b854:	b002      	add	sp, #8
    b856:	bd80      	pop	{r7, pc}
    b858:	0000ba69 	.word	0x0000ba69

0000b85c <atSign>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atSign(ATCACommand cacmd, ATCAPacket *packet)
{
    b85c:	b580      	push	{r7, lr}
    b85e:	b082      	sub	sp, #8
    b860:	af00      	add	r7, sp, #0
    b862:	6078      	str	r0, [r7, #4]
    b864:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    b866:	683b      	ldr	r3, [r7, #0]
    b868:	2241      	movs	r2, #65	; 0x41
    b86a:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    b86c:	683b      	ldr	r3, [r7, #0]
    b86e:	2207      	movs	r2, #7
    b870:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    b872:	683b      	ldr	r3, [r7, #0]
    b874:	228a      	movs	r2, #138	; 0x8a
    b876:	2143      	movs	r1, #67	; 0x43
    b878:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b87a:	683b      	ldr	r3, [r7, #0]
    b87c:	0018      	movs	r0, r3
    b87e:	4b03      	ldr	r3, [pc, #12]	; (b88c <atSign+0x30>)
    b880:	4798      	blx	r3
    return ATCA_SUCCESS;
    b882:	2300      	movs	r3, #0
}
    b884:	0018      	movs	r0, r3
    b886:	46bd      	mov	sp, r7
    b888:	b002      	add	sp, #8
    b88a:	bd80      	pop	{r7, pc}
    b88c:	0000ba69 	.word	0x0000ba69

0000b890 <atVerify>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atVerify(ATCACommand cacmd, ATCAPacket *packet)
{
    b890:	b580      	push	{r7, lr}
    b892:	b082      	sub	sp, #8
    b894:	af00      	add	r7, sp, #0
    b896:	6078      	str	r0, [r7, #4]
    b898:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_VERIFY;
    b89a:	683b      	ldr	r3, [r7, #0]
    b89c:	2245      	movs	r2, #69	; 0x45
    b89e:	709a      	strb	r2, [r3, #2]

    // variable packet size based on mode
    switch (packet->param1)
    b8a0:	683b      	ldr	r3, [r7, #0]
    b8a2:	78db      	ldrb	r3, [r3, #3]
    b8a4:	2b07      	cmp	r3, #7
    b8a6:	d814      	bhi.n	b8d2 <atVerify+0x42>
    b8a8:	009a      	lsls	r2, r3, #2
    b8aa:	4b11      	ldr	r3, [pc, #68]	; (b8f0 <atVerify+0x60>)
    b8ac:	18d3      	adds	r3, r2, r3
    b8ae:	681b      	ldr	r3, [r3, #0]
    b8b0:	469f      	mov	pc, r3
    {
    case 0:  // Stored mode
        packet->txsize = VERIFY_256_STORED_COUNT;
    b8b2:	683b      	ldr	r3, [r7, #0]
    b8b4:	2247      	movs	r2, #71	; 0x47
    b8b6:	705a      	strb	r2, [r3, #1]
        break;
    b8b8:	e00d      	b.n	b8d6 <atVerify+0x46>
    case 1:  // ValidateExternal mode
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
    b8ba:	683b      	ldr	r3, [r7, #0]
    b8bc:	2287      	movs	r2, #135	; 0x87
    b8be:	705a      	strb	r2, [r3, #1]
        break;
    b8c0:	e009      	b.n	b8d6 <atVerify+0x46>
    case 2:  // External mode
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
    b8c2:	683b      	ldr	r3, [r7, #0]
    b8c4:	2287      	movs	r2, #135	; 0x87
    b8c6:	705a      	strb	r2, [r3, #1]
        break;
    b8c8:	e005      	b.n	b8d6 <atVerify+0x46>
    case 3:     // Validate mode
    case 7:     // Invalidate mode
        packet->txsize = VERIFY_256_VALIDATE_COUNT;
    b8ca:	683b      	ldr	r3, [r7, #0]
    b8cc:	225a      	movs	r2, #90	; 0x5a
    b8ce:	705a      	strb	r2, [r3, #1]
        break;
    b8d0:	e001      	b.n	b8d6 <atVerify+0x46>
    default:
        return ATCA_BAD_PARAM;
    b8d2:	23e2      	movs	r3, #226	; 0xe2
    b8d4:	e008      	b.n	b8e8 <atVerify+0x58>
    }
    packet->rxsize = VERIFY_RSP_SIZE;
    b8d6:	683b      	ldr	r3, [r7, #0]
    b8d8:	228a      	movs	r2, #138	; 0x8a
    b8da:	2104      	movs	r1, #4
    b8dc:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    b8de:	683b      	ldr	r3, [r7, #0]
    b8e0:	0018      	movs	r0, r3
    b8e2:	4b04      	ldr	r3, [pc, #16]	; (b8f4 <atVerify+0x64>)
    b8e4:	4798      	blx	r3
    return ATCA_SUCCESS;
    b8e6:	2300      	movs	r3, #0
}
    b8e8:	0018      	movs	r0, r3
    b8ea:	46bd      	mov	sp, r7
    b8ec:	b002      	add	sp, #8
    b8ee:	bd80      	pop	{r7, pc}
    b8f0:	0001c8cc 	.word	0x0001c8cc
    b8f4:	0000ba69 	.word	0x0000ba69

0000b8f8 <deleteATCACommand>:
/** \brief ATCACommand destructor
 * \param[in] cacmd instance of a command object
 */

void deleteATCACommand(ATCACommand *cacmd)    // destructor
{
    b8f8:	b580      	push	{r7, lr}
    b8fa:	b082      	sub	sp, #8
    b8fc:	af00      	add	r7, sp, #0
    b8fe:	6078      	str	r0, [r7, #4]
    if (*cacmd)
    b900:	687b      	ldr	r3, [r7, #4]
    b902:	681b      	ldr	r3, [r3, #0]
    b904:	2b00      	cmp	r3, #0
    b906:	d004      	beq.n	b912 <deleteATCACommand+0x1a>
        free((void*)*cacmd);
    b908:	687b      	ldr	r3, [r7, #4]
    b90a:	681b      	ldr	r3, [r3, #0]
    b90c:	0018      	movs	r0, r3
    b90e:	4b04      	ldr	r3, [pc, #16]	; (b920 <deleteATCACommand+0x28>)
    b910:	4798      	blx	r3

    *cacmd = NULL;
    b912:	687b      	ldr	r3, [r7, #4]
    b914:	2200      	movs	r2, #0
    b916:	601a      	str	r2, [r3, #0]
}
    b918:	46c0      	nop			; (mov r8, r8)
    b91a:	46bd      	mov	sp, r7
    b91c:	b002      	add	sp, #8
    b91e:	bd80      	pop	{r7, pc}
    b920:	00019e39 	.word	0x00019e39

0000b924 <atInitExecTimes>:
 * \param[in] device_type - the device type - execution times vary by device type
 * \return ATCA_STATUS
 */

ATCA_STATUS atInitExecTimes(ATCACommand cacmd, ATCADeviceType device_type)
{
    b924:	b580      	push	{r7, lr}
    b926:	b082      	sub	sp, #8
    b928:	af00      	add	r7, sp, #0
    b92a:	6078      	str	r0, [r7, #4]
    b92c:	000a      	movs	r2, r1
    b92e:	1cfb      	adds	r3, r7, #3
    b930:	701a      	strb	r2, [r3, #0]
    switch (device_type)
    b932:	1cfb      	adds	r3, r7, #3
    b934:	781b      	ldrb	r3, [r3, #0]
    b936:	2b00      	cmp	r3, #0
    b938:	d006      	beq.n	b948 <atInitExecTimes+0x24>
    b93a:	db09      	blt.n	b950 <atInitExecTimes+0x2c>
    b93c:	2b02      	cmp	r3, #2
    b93e:	dc07      	bgt.n	b950 <atInitExecTimes+0x2c>
    {
    case ATECC108A:
    case ATECC508A:
        cacmd->execution_times = exectimes_x08a;
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	4a07      	ldr	r2, [pc, #28]	; (b960 <atInitExecTimes+0x3c>)
    b944:	605a      	str	r2, [r3, #4]
        break;
    b946:	e005      	b.n	b954 <atInitExecTimes+0x30>
    case ATSHA204A:
        cacmd->execution_times = exectimes_204a;
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	4a06      	ldr	r2, [pc, #24]	; (b964 <atInitExecTimes+0x40>)
    b94c:	605a      	str	r2, [r3, #4]
        break;
    b94e:	e001      	b.n	b954 <atInitExecTimes+0x30>
    default:
        return ATCA_BAD_PARAM;
    b950:	23e2      	movs	r3, #226	; 0xe2
    b952:	e000      	b.n	b956 <atInitExecTimes+0x32>
        break;
    }

    return ATCA_SUCCESS;
    b954:	2300      	movs	r3, #0
}
    b956:	0018      	movs	r0, r3
    b958:	46bd      	mov	sp, r7
    b95a:	b002      	add	sp, #8
    b95c:	bd80      	pop	{r7, pc}
    b95e:	46c0      	nop			; (mov r8, r8)
    b960:	2000043c 	.word	0x2000043c
    b964:	20000468 	.word	0x20000468

0000b968 <atGetExecTime>:
 * \param[in] cmd - the specific command for which to lookup the execution time
 * \return typical execution time in milleseconds for the given command
 */

uint16_t atGetExecTime(ATCACommand cacmd, ATCA_CmdMap cmd)
{
    b968:	b580      	push	{r7, lr}
    b96a:	b082      	sub	sp, #8
    b96c:	af00      	add	r7, sp, #0
    b96e:	6078      	str	r0, [r7, #4]
    b970:	000a      	movs	r2, r1
    b972:	1cfb      	adds	r3, r7, #3
    b974:	701a      	strb	r2, [r3, #0]
    return cacmd->execution_times[cmd];
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	685a      	ldr	r2, [r3, #4]
    b97a:	1cfb      	adds	r3, r7, #3
    b97c:	781b      	ldrb	r3, [r3, #0]
    b97e:	005b      	lsls	r3, r3, #1
    b980:	18d3      	adds	r3, r2, r3
    b982:	881b      	ldrh	r3, [r3, #0]
}
    b984:	0018      	movs	r0, r3
    b986:	46bd      	mov	sp, r7
    b988:	b002      	add	sp, #8
    b98a:	bd80      	pop	{r7, pc}

0000b98c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    b98c:	b580      	push	{r7, lr}
    b98e:	b088      	sub	sp, #32
    b990:	af00      	add	r7, sp, #0
    b992:	60f8      	str	r0, [r7, #12]
    b994:	60b9      	str	r1, [r7, #8]
    b996:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    b998:	231a      	movs	r3, #26
    b99a:	18fb      	adds	r3, r7, r3
    b99c:	2200      	movs	r2, #0
    b99e:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    b9a0:	2316      	movs	r3, #22
    b9a2:	18fb      	adds	r3, r7, r3
    b9a4:	4a2f      	ldr	r2, [pc, #188]	; (ba64 <atCRC+0xd8>)
    b9a6:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    b9a8:	2300      	movs	r3, #0
    b9aa:	61fb      	str	r3, [r7, #28]
    b9ac:	e043      	b.n	ba36 <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    b9ae:	2319      	movs	r3, #25
    b9b0:	18fb      	adds	r3, r7, r3
    b9b2:	2201      	movs	r2, #1
    b9b4:	701a      	strb	r2, [r3, #0]
    b9b6:	e036      	b.n	ba26 <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    b9b8:	68ba      	ldr	r2, [r7, #8]
    b9ba:	69fb      	ldr	r3, [r7, #28]
    b9bc:	18d3      	adds	r3, r2, r3
    b9be:	781b      	ldrb	r3, [r3, #0]
    b9c0:	2219      	movs	r2, #25
    b9c2:	18ba      	adds	r2, r7, r2
    b9c4:	7812      	ldrb	r2, [r2, #0]
    b9c6:	4013      	ands	r3, r2
    b9c8:	b2db      	uxtb	r3, r3
    b9ca:	1e5a      	subs	r2, r3, #1
    b9cc:	4193      	sbcs	r3, r2
    b9ce:	b2da      	uxtb	r2, r3
    b9d0:	2315      	movs	r3, #21
    b9d2:	18fb      	adds	r3, r7, r3
    b9d4:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    b9d6:	231a      	movs	r3, #26
    b9d8:	18fb      	adds	r3, r7, r3
    b9da:	881b      	ldrh	r3, [r3, #0]
    b9dc:	0bdb      	lsrs	r3, r3, #15
    b9de:	b29a      	uxth	r2, r3
    b9e0:	2314      	movs	r3, #20
    b9e2:	18fb      	adds	r3, r7, r3
    b9e4:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    b9e6:	231a      	movs	r3, #26
    b9e8:	18fa      	adds	r2, r7, r3
    b9ea:	231a      	movs	r3, #26
    b9ec:	18fb      	adds	r3, r7, r3
    b9ee:	881b      	ldrh	r3, [r3, #0]
    b9f0:	18db      	adds	r3, r3, r3
    b9f2:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    b9f4:	2315      	movs	r3, #21
    b9f6:	18fa      	adds	r2, r7, r3
    b9f8:	2314      	movs	r3, #20
    b9fa:	18fb      	adds	r3, r7, r3
    b9fc:	7812      	ldrb	r2, [r2, #0]
    b9fe:	781b      	ldrb	r3, [r3, #0]
    ba00:	429a      	cmp	r2, r3
    ba02:	d009      	beq.n	ba18 <atCRC+0x8c>
                crc_register ^= polynom;
    ba04:	231a      	movs	r3, #26
    ba06:	18fb      	adds	r3, r7, r3
    ba08:	221a      	movs	r2, #26
    ba0a:	18b9      	adds	r1, r7, r2
    ba0c:	2216      	movs	r2, #22
    ba0e:	18ba      	adds	r2, r7, r2
    ba10:	8809      	ldrh	r1, [r1, #0]
    ba12:	8812      	ldrh	r2, [r2, #0]
    ba14:	404a      	eors	r2, r1
    ba16:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    ba18:	2319      	movs	r3, #25
    ba1a:	18fa      	adds	r2, r7, r3
    ba1c:	2319      	movs	r3, #25
    ba1e:	18fb      	adds	r3, r7, r3
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	18db      	adds	r3, r3, r3
    ba24:	7013      	strb	r3, [r2, #0]
    ba26:	2319      	movs	r3, #25
    ba28:	18fb      	adds	r3, r7, r3
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	d1c3      	bne.n	b9b8 <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    ba30:	69fb      	ldr	r3, [r7, #28]
    ba32:	3301      	adds	r3, #1
    ba34:	61fb      	str	r3, [r7, #28]
    ba36:	69fa      	ldr	r2, [r7, #28]
    ba38:	68fb      	ldr	r3, [r7, #12]
    ba3a:	429a      	cmp	r2, r3
    ba3c:	d3b7      	bcc.n	b9ae <atCRC+0x22>
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    ba3e:	231a      	movs	r3, #26
    ba40:	18fb      	adds	r3, r7, r3
    ba42:	881b      	ldrh	r3, [r3, #0]
    ba44:	b2da      	uxtb	r2, r3
    ba46:	687b      	ldr	r3, [r7, #4]
    ba48:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    ba4a:	687b      	ldr	r3, [r7, #4]
    ba4c:	3301      	adds	r3, #1
    ba4e:	221a      	movs	r2, #26
    ba50:	18ba      	adds	r2, r7, r2
    ba52:	8812      	ldrh	r2, [r2, #0]
    ba54:	0a12      	lsrs	r2, r2, #8
    ba56:	b292      	uxth	r2, r2
    ba58:	b2d2      	uxtb	r2, r2
    ba5a:	701a      	strb	r2, [r3, #0]
}
    ba5c:	46c0      	nop			; (mov r8, r8)
    ba5e:	46bd      	mov	sp, r7
    ba60:	b008      	add	sp, #32
    ba62:	bd80      	pop	{r7, pc}
    ba64:	ffff8005 	.word	0xffff8005

0000ba68 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    ba68:	b580      	push	{r7, lr}
    ba6a:	b084      	sub	sp, #16
    ba6c:	af00      	add	r7, sp, #0
    ba6e:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    ba70:	687b      	ldr	r3, [r7, #4]
    ba72:	785a      	ldrb	r2, [r3, #1]
    ba74:	230f      	movs	r3, #15
    ba76:	18fb      	adds	r3, r7, r3
    ba78:	3a02      	subs	r2, #2
    ba7a:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    ba7c:	687b      	ldr	r3, [r7, #4]
    ba7e:	1c5a      	adds	r2, r3, #1
    ba80:	230f      	movs	r3, #15
    ba82:	18fb      	adds	r3, r7, r3
    ba84:	781b      	ldrb	r3, [r3, #0]
    ba86:	18d3      	adds	r3, r2, r3
    ba88:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    ba8a:	230f      	movs	r3, #15
    ba8c:	18fb      	adds	r3, r7, r3
    ba8e:	7818      	ldrb	r0, [r3, #0]
    ba90:	687b      	ldr	r3, [r7, #4]
    ba92:	3301      	adds	r3, #1
    ba94:	68ba      	ldr	r2, [r7, #8]
    ba96:	0019      	movs	r1, r3
    ba98:	4b02      	ldr	r3, [pc, #8]	; (baa4 <atCalcCrc+0x3c>)
    ba9a:	4798      	blx	r3
}
    ba9c:	46c0      	nop			; (mov r8, r8)
    ba9e:	46bd      	mov	sp, r7
    baa0:	b004      	add	sp, #16
    baa2:	bd80      	pop	{r7, pc}
    baa4:	0000b98d 	.word	0x0000b98d

0000baa8 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return status of the consistency check
 */

uint8_t atCheckCrc(const uint8_t *response)
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b084      	sub	sp, #16
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    bab0:	230f      	movs	r3, #15
    bab2:	18fb      	adds	r3, r7, r3
    bab4:	687a      	ldr	r2, [r7, #4]
    bab6:	7812      	ldrb	r2, [r2, #0]
    bab8:	701a      	strb	r2, [r3, #0]

    if (count < ATCA_CRC_SIZE)
    baba:	230f      	movs	r3, #15
    babc:	18fb      	adds	r3, r7, r3
    babe:	781b      	ldrb	r3, [r3, #0]
    bac0:	2b01      	cmp	r3, #1
    bac2:	d801      	bhi.n	bac8 <atCheckCrc+0x20>
        return ATCA_BAD_PARAM;
    bac4:	23e2      	movs	r3, #226	; 0xe2
    bac6:	e029      	b.n	bb1c <atCheckCrc+0x74>

    count -= ATCA_CRC_SIZE;
    bac8:	230f      	movs	r3, #15
    baca:	18fb      	adds	r3, r7, r3
    bacc:	220f      	movs	r2, #15
    bace:	18ba      	adds	r2, r7, r2
    bad0:	7812      	ldrb	r2, [r2, #0]
    bad2:	3a02      	subs	r2, #2
    bad4:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    bad6:	230f      	movs	r3, #15
    bad8:	18fb      	adds	r3, r7, r3
    bada:	781b      	ldrb	r3, [r3, #0]
    badc:	220c      	movs	r2, #12
    bade:	18ba      	adds	r2, r7, r2
    bae0:	6879      	ldr	r1, [r7, #4]
    bae2:	0018      	movs	r0, r3
    bae4:	4b0f      	ldr	r3, [pc, #60]	; (bb24 <atCheckCrc+0x7c>)
    bae6:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_BAD_CRC;
    bae8:	230c      	movs	r3, #12
    baea:	18fb      	adds	r3, r7, r3
    baec:	781a      	ldrb	r2, [r3, #0]
    baee:	230f      	movs	r3, #15
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	781b      	ldrb	r3, [r3, #0]
    baf4:	6879      	ldr	r1, [r7, #4]
    baf6:	18cb      	adds	r3, r1, r3
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	429a      	cmp	r2, r3
    bafc:	d10d      	bne.n	bb1a <atCheckCrc+0x72>
    bafe:	230c      	movs	r3, #12
    bb00:	18fb      	adds	r3, r7, r3
    bb02:	785a      	ldrb	r2, [r3, #1]
    bb04:	230f      	movs	r3, #15
    bb06:	18fb      	adds	r3, r7, r3
    bb08:	781b      	ldrb	r3, [r3, #0]
    bb0a:	3301      	adds	r3, #1
    bb0c:	6879      	ldr	r1, [r7, #4]
    bb0e:	18cb      	adds	r3, r1, r3
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	429a      	cmp	r2, r3
    bb14:	d101      	bne.n	bb1a <atCheckCrc+0x72>
    bb16:	2300      	movs	r3, #0
    bb18:	e000      	b.n	bb1c <atCheckCrc+0x74>
    bb1a:	23e5      	movs	r3, #229	; 0xe5
}
    bb1c:	0018      	movs	r0, r3
    bb1e:	46bd      	mov	sp, r7
    bb20:	b004      	add	sp, #16
    bb22:	bd80      	pop	{r7, pc}
    bb24:	0000b98d 	.word	0x0000b98d

0000bb28 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_STATUS indicating type of error or no error
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    bb28:	b580      	push	{r7, lr}
    bb2a:	b084      	sub	sp, #16
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    bb30:	230c      	movs	r3, #12
    bb32:	18fb      	adds	r3, r7, r3
    bb34:	4a19      	ldr	r2, [pc, #100]	; (bb9c <isATCAError+0x74>)
    bb36:	6812      	ldr	r2, [r2, #0]
    bb38:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    bb3a:	230c      	movs	r3, #12
    bb3c:	18f9      	adds	r1, r7, r3
    bb3e:	687b      	ldr	r3, [r7, #4]
    bb40:	2204      	movs	r2, #4
    bb42:	0018      	movs	r0, r3
    bb44:	4b16      	ldr	r3, [pc, #88]	; (bba0 <isATCAError+0x78>)
    bb46:	4798      	blx	r3
    bb48:	1e03      	subs	r3, r0, #0
    bb4a:	d101      	bne.n	bb50 <isATCAError+0x28>
        return ATCA_SUCCESS;
    bb4c:	2300      	movs	r3, #0
    bb4e:	e020      	b.n	bb92 <isATCAError+0x6a>

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    bb50:	687b      	ldr	r3, [r7, #4]
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	2b04      	cmp	r3, #4
    bb56:	d11b      	bne.n	bb90 <isATCAError+0x68>
    {
        switch (data[1])
    bb58:	687b      	ldr	r3, [r7, #4]
    bb5a:	3301      	adds	r3, #1
    bb5c:	781b      	ldrb	r3, [r3, #0]
    bb5e:	2b0f      	cmp	r3, #15
    bb60:	d00e      	beq.n	bb80 <isATCAError+0x58>
    bb62:	dc04      	bgt.n	bb6e <isATCAError+0x46>
    bb64:	2b01      	cmp	r3, #1
    bb66:	d007      	beq.n	bb78 <isATCAError+0x50>
    bb68:	2b03      	cmp	r3, #3
    bb6a:	d007      	beq.n	bb7c <isATCAError+0x54>
    bb6c:	e00e      	b.n	bb8c <isATCAError+0x64>
    bb6e:	2b11      	cmp	r3, #17
    bb70:	d008      	beq.n	bb84 <isATCAError+0x5c>
    bb72:	2bff      	cmp	r3, #255	; 0xff
    bb74:	d008      	beq.n	bb88 <isATCAError+0x60>
    bb76:	e009      	b.n	bb8c <isATCAError+0x64>
        {
        case 0x01:              // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    bb78:	23d1      	movs	r3, #209	; 0xd1
    bb7a:	e00a      	b.n	bb92 <isATCAError+0x6a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    bb7c:	23d2      	movs	r3, #210	; 0xd2
    bb7e:	e008      	b.n	bb92 <isATCAError+0x6a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    bb80:	23f4      	movs	r3, #244	; 0xf4
    bb82:	e006      	b.n	bb92 <isATCAError+0x6a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    bb84:	23f3      	movs	r3, #243	; 0xf3
    bb86:	e004      	b.n	bb92 <isATCAError+0x6a>
            break;
        case 0xff: // bad crc found or other comm error
            return ATCA_STATUS_CRC;
    bb88:	23d4      	movs	r3, #212	; 0xd4
    bb8a:	e002      	b.n	bb92 <isATCAError+0x6a>
            break;
        default:
            return ATCA_GEN_FAIL;
    bb8c:	23e1      	movs	r3, #225	; 0xe1
    bb8e:	e000      	b.n	bb92 <isATCAError+0x6a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    bb90:	2300      	movs	r3, #0
    }
}
    bb92:	0018      	movs	r0, r3
    bb94:	46bd      	mov	sp, r7
    bb96:	b004      	add	sp, #16
    bb98:	bd80      	pop	{r7, pc}
    bb9a:	46c0      	nop			; (mov r8, r8)
    bb9c:	0001c8ec 	.word	0x0001c8ec
    bba0:	00019e4d 	.word	0x00019e4d

0000bba4 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	b084      	sub	sp, #16
    bba8:	af00      	add	r7, sp, #0
    bbaa:	6078      	str	r0, [r7, #4]
    ATCADevice cadev = NULL;
    bbac:	2300      	movs	r3, #0
    bbae:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    bbb0:	687b      	ldr	r3, [r7, #4]
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d101      	bne.n	bbba <newATCADevice+0x16>
        return NULL;
    bbb6:	2300      	movs	r3, #0
    bbb8:	e022      	b.n	bc00 <newATCADevice+0x5c>

    cadev = (ATCADevice)malloc(sizeof(struct atca_device));
    bbba:	2008      	movs	r0, #8
    bbbc:	4b12      	ldr	r3, [pc, #72]	; (bc08 <newATCADevice+0x64>)
    bbbe:	4798      	blx	r3
    bbc0:	0003      	movs	r3, r0
    bbc2:	60fb      	str	r3, [r7, #12]
    cadev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    bbc4:	687b      	ldr	r3, [r7, #4]
    bbc6:	785b      	ldrb	r3, [r3, #1]
    bbc8:	0018      	movs	r0, r3
    bbca:	4b10      	ldr	r3, [pc, #64]	; (bc0c <newATCADevice+0x68>)
    bbcc:	4798      	blx	r3
    bbce:	0002      	movs	r2, r0
    bbd0:	68fb      	ldr	r3, [r7, #12]
    bbd2:	601a      	str	r2, [r3, #0]
    cadev->mIface    = (ATCAIface)newATCAIface(cfg);
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	0018      	movs	r0, r3
    bbd8:	4b0d      	ldr	r3, [pc, #52]	; (bc10 <newATCADevice+0x6c>)
    bbda:	4798      	blx	r3
    bbdc:	0002      	movs	r2, r0
    bbde:	68fb      	ldr	r3, [r7, #12]
    bbe0:	605a      	str	r2, [r3, #4]

    if (cadev->mCommands == NULL || cadev->mIface == NULL)
    bbe2:	68fb      	ldr	r3, [r7, #12]
    bbe4:	681b      	ldr	r3, [r3, #0]
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d003      	beq.n	bbf2 <newATCADevice+0x4e>
    bbea:	68fb      	ldr	r3, [r7, #12]
    bbec:	685b      	ldr	r3, [r3, #4]
    bbee:	2b00      	cmp	r3, #0
    bbf0:	d105      	bne.n	bbfe <newATCADevice+0x5a>
    {
        free(cadev);
    bbf2:	68fb      	ldr	r3, [r7, #12]
    bbf4:	0018      	movs	r0, r3
    bbf6:	4b07      	ldr	r3, [pc, #28]	; (bc14 <newATCADevice+0x70>)
    bbf8:	4798      	blx	r3
        cadev = NULL;
    bbfa:	2300      	movs	r3, #0
    bbfc:	60fb      	str	r3, [r7, #12]
    }

    return cadev;
    bbfe:	68fb      	ldr	r3, [r7, #12]
}
    bc00:	0018      	movs	r0, r3
    bc02:	46bd      	mov	sp, r7
    bc04:	b004      	add	sp, #16
    bc06:	bd80      	pop	{r7, pc}
    bc08:	00019e25 	.word	0x00019e25
    bc0c:	0000b659 	.word	0x0000b659
    bc10:	0000bc8d 	.word	0x0000bc8d
    bc14:	00019e39 	.word	0x00019e39

0000bc18 <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    bc18:	b580      	push	{r7, lr}
    bc1a:	b082      	sub	sp, #8
    bc1c:	af00      	add	r7, sp, #0
    bc1e:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    bc20:	687b      	ldr	r3, [r7, #4]
    bc22:	681b      	ldr	r3, [r3, #0]
}
    bc24:	0018      	movs	r0, r3
    bc26:	46bd      	mov	sp, r7
    bc28:	b002      	add	sp, #8
    bc2a:	bd80      	pop	{r7, pc}

0000bc2c <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    bc2c:	b580      	push	{r7, lr}
    bc2e:	b082      	sub	sp, #8
    bc30:	af00      	add	r7, sp, #0
    bc32:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	685b      	ldr	r3, [r3, #4]
}
    bc38:	0018      	movs	r0, r3
    bc3a:	46bd      	mov	sp, r7
    bc3c:	b002      	add	sp, #8
    bc3e:	bd80      	pop	{r7, pc}

0000bc40 <deleteATCADevice>:
 * \param[in] cadev  pointer to a reference to a device
 *
 */

void deleteATCADevice(ATCADevice *cadev)   // destructor
{
    bc40:	b580      	push	{r7, lr}
    bc42:	b084      	sub	sp, #16
    bc44:	af00      	add	r7, sp, #0
    bc46:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *cadev;
    bc48:	687b      	ldr	r3, [r7, #4]
    bc4a:	681b      	ldr	r3, [r3, #0]
    bc4c:	60fb      	str	r3, [r7, #12]

    if (*cadev)
    bc4e:	687b      	ldr	r3, [r7, #4]
    bc50:	681b      	ldr	r3, [r3, #0]
    bc52:	2b00      	cmp	r3, #0
    bc54:	d00d      	beq.n	bc72 <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    bc56:	68fb      	ldr	r3, [r7, #12]
    bc58:	0018      	movs	r0, r3
    bc5a:	4b09      	ldr	r3, [pc, #36]	; (bc80 <deleteATCADevice+0x40>)
    bc5c:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    bc5e:	68fb      	ldr	r3, [r7, #12]
    bc60:	3304      	adds	r3, #4
    bc62:	0018      	movs	r0, r3
    bc64:	4b07      	ldr	r3, [pc, #28]	; (bc84 <deleteATCADevice+0x44>)
    bc66:	4798      	blx	r3
        free((void*)*cadev);
    bc68:	687b      	ldr	r3, [r7, #4]
    bc6a:	681b      	ldr	r3, [r3, #0]
    bc6c:	0018      	movs	r0, r3
    bc6e:	4b06      	ldr	r3, [pc, #24]	; (bc88 <deleteATCADevice+0x48>)
    bc70:	4798      	blx	r3
    }

    *cadev = NULL;
    bc72:	687b      	ldr	r3, [r7, #4]
    bc74:	2200      	movs	r2, #0
    bc76:	601a      	str	r2, [r3, #0]
}
    bc78:	46c0      	nop			; (mov r8, r8)
    bc7a:	46bd      	mov	sp, r7
    bc7c:	b004      	add	sp, #16
    bc7e:	bd80      	pop	{r7, pc}
    bc80:	0000b8f9 	.word	0x0000b8f9
    bc84:	0000be29 	.word	0x0000be29
    bc88:	00019e39 	.word	0x00019e39

0000bc8c <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    bc8c:	b580      	push	{r7, lr}
    bc8e:	b084      	sub	sp, #16
    bc90:	af00      	add	r7, sp, #0
    bc92:	6078      	str	r0, [r7, #4]
    ATCAIface caiface = (ATCAIface)malloc(sizeof(struct atca_iface));
    bc94:	2028      	movs	r0, #40	; 0x28
    bc96:	4b0e      	ldr	r3, [pc, #56]	; (bcd0 <newATCAIface+0x44>)
    bc98:	4798      	blx	r3
    bc9a:	0003      	movs	r3, r0
    bc9c:	60fb      	str	r3, [r7, #12]

    caiface->mType = cfg->iface_type;
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	781a      	ldrb	r2, [r3, #0]
    bca2:	68fb      	ldr	r3, [r7, #12]
    bca4:	701a      	strb	r2, [r3, #0]
    caiface->mIfaceCFG = cfg;
    bca6:	68fb      	ldr	r3, [r7, #12]
    bca8:	687a      	ldr	r2, [r7, #4]
    bcaa:	605a      	str	r2, [r3, #4]

    if (atinit(caiface) != ATCA_SUCCESS)
    bcac:	68fb      	ldr	r3, [r7, #12]
    bcae:	0018      	movs	r0, r3
    bcb0:	4b08      	ldr	r3, [pc, #32]	; (bcd4 <newATCAIface+0x48>)
    bcb2:	4798      	blx	r3
    bcb4:	1e03      	subs	r3, r0, #0
    bcb6:	d005      	beq.n	bcc4 <newATCAIface+0x38>
    {
        free(caiface);
    bcb8:	68fb      	ldr	r3, [r7, #12]
    bcba:	0018      	movs	r0, r3
    bcbc:	4b06      	ldr	r3, [pc, #24]	; (bcd8 <newATCAIface+0x4c>)
    bcbe:	4798      	blx	r3
        caiface = NULL;
    bcc0:	2300      	movs	r3, #0
    bcc2:	60fb      	str	r3, [r7, #12]
    }

    return caiface;
    bcc4:	68fb      	ldr	r3, [r7, #12]
}
    bcc6:	0018      	movs	r0, r3
    bcc8:	46bd      	mov	sp, r7
    bcca:	b004      	add	sp, #16
    bccc:	bd80      	pop	{r7, pc}
    bcce:	46c0      	nop			; (mov r8, r8)
    bcd0:	00019e25 	.word	0x00019e25
    bcd4:	0000bcdd 	.word	0x0000bcdd
    bcd8:	00019e39 	.word	0x00019e39

0000bcdc <atinit>:

// public ATCAIface methods

ATCA_STATUS atinit(ATCAIface caiface)
{
    bcdc:	b590      	push	{r4, r7, lr}
    bcde:	b08d      	sub	sp, #52	; 0x34
    bce0:	af00      	add	r7, sp, #0
    bce2:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    bce4:	232f      	movs	r3, #47	; 0x2f
    bce6:	18fb      	adds	r3, r7, r3
    bce8:	22f0      	movs	r2, #240	; 0xf0
    bcea:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(caiface, &hal);
    bcec:	2308      	movs	r3, #8
    bcee:	18fa      	adds	r2, r7, r3
    bcf0:	687b      	ldr	r3, [r7, #4]
    bcf2:	0011      	movs	r1, r2
    bcf4:	0018      	movs	r0, r3
    bcf6:	4b14      	ldr	r3, [pc, #80]	; (bd48 <atinit+0x6c>)
    bcf8:	4798      	blx	r3

    status = caiface->atinit(&hal, caiface->mIfaceCFG);
    bcfa:	687b      	ldr	r3, [r7, #4]
    bcfc:	689a      	ldr	r2, [r3, #8]
    bcfe:	687b      	ldr	r3, [r7, #4]
    bd00:	6859      	ldr	r1, [r3, #4]
    bd02:	232f      	movs	r3, #47	; 0x2f
    bd04:	18fc      	adds	r4, r7, r3
    bd06:	2308      	movs	r3, #8
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	0018      	movs	r0, r3
    bd0c:	4790      	blx	r2
    bd0e:	0003      	movs	r3, r0
    bd10:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    bd12:	232f      	movs	r3, #47	; 0x2f
    bd14:	18fb      	adds	r3, r7, r3
    bd16:	781b      	ldrb	r3, [r3, #0]
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d10d      	bne.n	bd38 <atinit+0x5c>
    {
        caiface->hal_data = hal.hal_data;
    bd1c:	2308      	movs	r3, #8
    bd1e:	18fb      	adds	r3, r7, r3
    bd20:	6a1a      	ldr	r2, [r3, #32]
    bd22:	687b      	ldr	r3, [r7, #4]
    bd24:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = caiface->atpostinit(caiface);
    bd26:	687b      	ldr	r3, [r7, #4]
    bd28:	68db      	ldr	r3, [r3, #12]
    bd2a:	222f      	movs	r2, #47	; 0x2f
    bd2c:	18bc      	adds	r4, r7, r2
    bd2e:	687a      	ldr	r2, [r7, #4]
    bd30:	0010      	movs	r0, r2
    bd32:	4798      	blx	r3
    bd34:	0003      	movs	r3, r0
    bd36:	7023      	strb	r3, [r4, #0]
    }

    return status;
    bd38:	232f      	movs	r3, #47	; 0x2f
    bd3a:	18fb      	adds	r3, r7, r3
    bd3c:	781b      	ldrb	r3, [r3, #0]
}
    bd3e:	0018      	movs	r0, r3
    bd40:	46bd      	mov	sp, r7
    bd42:	b00d      	add	sp, #52	; 0x34
    bd44:	bd90      	pop	{r4, r7, pc}
    bd46:	46c0      	nop			; (mov r8, r8)
    bd48:	0000be6d 	.word	0x0000be6d

0000bd4c <atsend>:

ATCA_STATUS atsend(ATCAIface caiface, uint8_t *txdata, int txlength)
{
    bd4c:	b580      	push	{r7, lr}
    bd4e:	b084      	sub	sp, #16
    bd50:	af00      	add	r7, sp, #0
    bd52:	60f8      	str	r0, [r7, #12]
    bd54:	60b9      	str	r1, [r7, #8]
    bd56:	607a      	str	r2, [r7, #4]
    return caiface->atsend(caiface, txdata, txlength);
    bd58:	68fb      	ldr	r3, [r7, #12]
    bd5a:	691b      	ldr	r3, [r3, #16]
    bd5c:	687a      	ldr	r2, [r7, #4]
    bd5e:	68b9      	ldr	r1, [r7, #8]
    bd60:	68f8      	ldr	r0, [r7, #12]
    bd62:	4798      	blx	r3
    bd64:	0003      	movs	r3, r0
}
    bd66:	0018      	movs	r0, r3
    bd68:	46bd      	mov	sp, r7
    bd6a:	b004      	add	sp, #16
    bd6c:	bd80      	pop	{r7, pc}

0000bd6e <atreceive>:

ATCA_STATUS atreceive(ATCAIface caiface, uint8_t *rxdata, uint16_t *rxlength)
{
    bd6e:	b580      	push	{r7, lr}
    bd70:	b084      	sub	sp, #16
    bd72:	af00      	add	r7, sp, #0
    bd74:	60f8      	str	r0, [r7, #12]
    bd76:	60b9      	str	r1, [r7, #8]
    bd78:	607a      	str	r2, [r7, #4]
    return caiface->atreceive(caiface, rxdata, rxlength);
    bd7a:	68fb      	ldr	r3, [r7, #12]
    bd7c:	695b      	ldr	r3, [r3, #20]
    bd7e:	687a      	ldr	r2, [r7, #4]
    bd80:	68b9      	ldr	r1, [r7, #8]
    bd82:	68f8      	ldr	r0, [r7, #12]
    bd84:	4798      	blx	r3
    bd86:	0003      	movs	r3, r0
}
    bd88:	0018      	movs	r0, r3
    bd8a:	46bd      	mov	sp, r7
    bd8c:	b004      	add	sp, #16
    bd8e:	bd80      	pop	{r7, pc}

0000bd90 <atwake>:

ATCA_STATUS atwake(ATCAIface caiface)
{
    bd90:	b580      	push	{r7, lr}
    bd92:	b082      	sub	sp, #8
    bd94:	af00      	add	r7, sp, #0
    bd96:	6078      	str	r0, [r7, #4]
    return caiface->atwake(caiface);
    bd98:	687b      	ldr	r3, [r7, #4]
    bd9a:	699b      	ldr	r3, [r3, #24]
    bd9c:	687a      	ldr	r2, [r7, #4]
    bd9e:	0010      	movs	r0, r2
    bda0:	4798      	blx	r3
    bda2:	0003      	movs	r3, r0
}
    bda4:	0018      	movs	r0, r3
    bda6:	46bd      	mov	sp, r7
    bda8:	b002      	add	sp, #8
    bdaa:	bd80      	pop	{r7, pc}

0000bdac <atidle>:

ATCA_STATUS atidle(ATCAIface caiface)
{
    bdac:	b590      	push	{r4, r7, lr}
    bdae:	b085      	sub	sp, #20
    bdb0:	af00      	add	r7, sp, #0
    bdb2:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atidle(caiface);
    bdb4:	687b      	ldr	r3, [r7, #4]
    bdb6:	69db      	ldr	r3, [r3, #28]
    bdb8:	220f      	movs	r2, #15
    bdba:	18bc      	adds	r4, r7, r2
    bdbc:	687a      	ldr	r2, [r7, #4]
    bdbe:	0010      	movs	r0, r2
    bdc0:	4798      	blx	r3
    bdc2:	0003      	movs	r3, r0
    bdc4:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    bdc6:	2001      	movs	r0, #1
    bdc8:	4b04      	ldr	r3, [pc, #16]	; (bddc <atidle+0x30>)
    bdca:	4798      	blx	r3
    return status;
    bdcc:	230f      	movs	r3, #15
    bdce:	18fb      	adds	r3, r7, r3
    bdd0:	781b      	ldrb	r3, [r3, #0]
}
    bdd2:	0018      	movs	r0, r3
    bdd4:	46bd      	mov	sp, r7
    bdd6:	b005      	add	sp, #20
    bdd8:	bd90      	pop	{r4, r7, pc}
    bdda:	46c0      	nop			; (mov r8, r8)
    bddc:	0000dc25 	.word	0x0000dc25

0000bde0 <atsleep>:

ATCA_STATUS atsleep(ATCAIface caiface)
{
    bde0:	b590      	push	{r4, r7, lr}
    bde2:	b085      	sub	sp, #20
    bde4:	af00      	add	r7, sp, #0
    bde6:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atsleep(caiface);
    bde8:	687b      	ldr	r3, [r7, #4]
    bdea:	6a1b      	ldr	r3, [r3, #32]
    bdec:	220f      	movs	r2, #15
    bdee:	18bc      	adds	r4, r7, r2
    bdf0:	687a      	ldr	r2, [r7, #4]
    bdf2:	0010      	movs	r0, r2
    bdf4:	4798      	blx	r3
    bdf6:	0003      	movs	r3, r0
    bdf8:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    bdfa:	2001      	movs	r0, #1
    bdfc:	4b04      	ldr	r3, [pc, #16]	; (be10 <atsleep+0x30>)
    bdfe:	4798      	blx	r3
    return status;
    be00:	230f      	movs	r3, #15
    be02:	18fb      	adds	r3, r7, r3
    be04:	781b      	ldrb	r3, [r3, #0]
}
    be06:	0018      	movs	r0, r3
    be08:	46bd      	mov	sp, r7
    be0a:	b005      	add	sp, #20
    be0c:	bd90      	pop	{r4, r7, pc}
    be0e:	46c0      	nop			; (mov r8, r8)
    be10:	0000dc25 	.word	0x0000dc25

0000be14 <atgetifacecfg>:

ATCAIfaceCfg * atgetifacecfg(ATCAIface caiface)
{
    be14:	b580      	push	{r7, lr}
    be16:	b082      	sub	sp, #8
    be18:	af00      	add	r7, sp, #0
    be1a:	6078      	str	r0, [r7, #4]
    return caiface->mIfaceCFG;
    be1c:	687b      	ldr	r3, [r7, #4]
    be1e:	685b      	ldr	r3, [r3, #4]
}
    be20:	0018      	movs	r0, r3
    be22:	46bd      	mov	sp, r7
    be24:	b002      	add	sp, #8
    be26:	bd80      	pop	{r7, pc}

0000be28 <deleteATCAIface>:
{
    return caiface->hal_data;
}

void deleteATCAIface(ATCAIface *caiface) // destructor
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
    be2e:	6078      	str	r0, [r7, #4]
    if (*caiface)
    be30:	687b      	ldr	r3, [r7, #4]
    be32:	681b      	ldr	r3, [r3, #0]
    be34:	2b00      	cmp	r3, #0
    be36:	d00e      	beq.n	be56 <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*caiface)->mType, (*caiface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	781a      	ldrb	r2, [r3, #0]
    be3e:	687b      	ldr	r3, [r7, #4]
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be44:	0019      	movs	r1, r3
    be46:	0010      	movs	r0, r2
    be48:	4b06      	ldr	r3, [pc, #24]	; (be64 <deleteATCAIface+0x3c>)
    be4a:	4798      	blx	r3
        free((void*)*caiface);
    be4c:	687b      	ldr	r3, [r7, #4]
    be4e:	681b      	ldr	r3, [r3, #0]
    be50:	0018      	movs	r0, r3
    be52:	4b05      	ldr	r3, [pc, #20]	; (be68 <deleteATCAIface+0x40>)
    be54:	4798      	blx	r3
    }

    *caiface = NULL;
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	2200      	movs	r2, #0
    be5a:	601a      	str	r2, [r3, #0]
}
    be5c:	46c0      	nop			; (mov r8, r8)
    be5e:	46bd      	mov	sp, r7
    be60:	b002      	add	sp, #8
    be62:	bd80      	pop	{r7, pc}
    be64:	0000d285 	.word	0x0000d285
    be68:	00019e39 	.word	0x00019e39

0000be6c <_atinit>:

ATCA_STATUS _atinit(ATCAIface caiface, ATCAHAL_t *hal)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	b082      	sub	sp, #8
    be70:	af00      	add	r7, sp, #0
    be72:	6078      	str	r0, [r7, #4]
    be74:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(caiface->mIfaceCFG, hal);
    be76:	687b      	ldr	r3, [r7, #4]
    be78:	685b      	ldr	r3, [r3, #4]
    be7a:	683a      	ldr	r2, [r7, #0]
    be7c:	0011      	movs	r1, r2
    be7e:	0018      	movs	r0, r3
    be80:	4b13      	ldr	r3, [pc, #76]	; (bed0 <_atinit+0x64>)
    be82:	4798      	blx	r3
    caiface->atinit     = hal->halinit;
    be84:	683b      	ldr	r3, [r7, #0]
    be86:	681a      	ldr	r2, [r3, #0]
    be88:	687b      	ldr	r3, [r7, #4]
    be8a:	609a      	str	r2, [r3, #8]
    caiface->atpostinit = hal->halpostinit;
    be8c:	683b      	ldr	r3, [r7, #0]
    be8e:	685a      	ldr	r2, [r3, #4]
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	60da      	str	r2, [r3, #12]
    caiface->atsend     = hal->halsend;
    be94:	683b      	ldr	r3, [r7, #0]
    be96:	689a      	ldr	r2, [r3, #8]
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	611a      	str	r2, [r3, #16]
    caiface->atreceive  = hal->halreceive;
    be9c:	683b      	ldr	r3, [r7, #0]
    be9e:	68da      	ldr	r2, [r3, #12]
    bea0:	687b      	ldr	r3, [r7, #4]
    bea2:	615a      	str	r2, [r3, #20]
    caiface->atwake     = hal->halwake;
    bea4:	683b      	ldr	r3, [r7, #0]
    bea6:	691a      	ldr	r2, [r3, #16]
    bea8:	687b      	ldr	r3, [r7, #4]
    beaa:	619a      	str	r2, [r3, #24]
    caiface->atsleep    = hal->halsleep;
    beac:	683b      	ldr	r3, [r7, #0]
    beae:	699a      	ldr	r2, [r3, #24]
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	621a      	str	r2, [r3, #32]
    caiface->atidle     = hal->halidle;
    beb4:	683b      	ldr	r3, [r7, #0]
    beb6:	695a      	ldr	r2, [r3, #20]
    beb8:	687b      	ldr	r3, [r7, #4]
    beba:	61da      	str	r2, [r3, #28]
    caiface->hal_data   = hal->hal_data;
    bebc:	683b      	ldr	r3, [r7, #0]
    bebe:	6a1a      	ldr	r2, [r3, #32]
    bec0:	687b      	ldr	r3, [r7, #4]
    bec2:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    bec4:	2300      	movs	r3, #0
}
    bec6:	0018      	movs	r0, r3
    bec8:	46bd      	mov	sp, r7
    beca:	b002      	add	sp, #8
    becc:	bd80      	pop	{r7, pc}
    bece:	46c0      	nop			; (mov r8, r8)
    bed0:	0000d1e9 	.word	0x0000d1e9

0000bed4 <atcab_init>:
 *  \param[in] cfg is a pointer to an interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return ATCA_STATUS
 *  \see atcab_init_device()
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    bed4:	b580      	push	{r7, lr}
    bed6:	b082      	sub	sp, #8
    bed8:	af00      	add	r7, sp, #0
    beda:	6078      	str	r0, [r7, #4]
    if (_gDevice)       // if there's already a device created, release it
    bedc:	4b18      	ldr	r3, [pc, #96]	; (bf40 <atcab_init+0x6c>)
    bede:	681b      	ldr	r3, [r3, #0]
    bee0:	2b00      	cmp	r3, #0
    bee2:	d001      	beq.n	bee8 <atcab_init+0x14>
        atcab_release();
    bee4:	4b17      	ldr	r3, [pc, #92]	; (bf44 <atcab_init+0x70>)
    bee6:	4798      	blx	r3

    _gDevice = newATCADevice(cfg);
    bee8:	687b      	ldr	r3, [r7, #4]
    beea:	0018      	movs	r0, r3
    beec:	4b16      	ldr	r3, [pc, #88]	; (bf48 <atcab_init+0x74>)
    beee:	4798      	blx	r3
    bef0:	0002      	movs	r2, r0
    bef2:	4b13      	ldr	r3, [pc, #76]	; (bf40 <atcab_init+0x6c>)
    bef4:	601a      	str	r2, [r3, #0]
    if (_gDevice == NULL)
    bef6:	4b12      	ldr	r3, [pc, #72]	; (bf40 <atcab_init+0x6c>)
    bef8:	681b      	ldr	r3, [r3, #0]
    befa:	2b00      	cmp	r3, #0
    befc:	d101      	bne.n	bf02 <atcab_init+0x2e>
        return ATCA_GEN_FAIL;  // Device creation failed
    befe:	23e1      	movs	r3, #225	; 0xe1
    bf00:	e01a      	b.n	bf38 <atcab_init+0x64>

    _gCommandObj = atGetCommands(_gDevice);
    bf02:	4b0f      	ldr	r3, [pc, #60]	; (bf40 <atcab_init+0x6c>)
    bf04:	681b      	ldr	r3, [r3, #0]
    bf06:	0018      	movs	r0, r3
    bf08:	4b10      	ldr	r3, [pc, #64]	; (bf4c <atcab_init+0x78>)
    bf0a:	4798      	blx	r3
    bf0c:	0002      	movs	r2, r0
    bf0e:	4b10      	ldr	r3, [pc, #64]	; (bf50 <atcab_init+0x7c>)
    bf10:	601a      	str	r2, [r3, #0]
    _gIface = atGetIFace(_gDevice);
    bf12:	4b0b      	ldr	r3, [pc, #44]	; (bf40 <atcab_init+0x6c>)
    bf14:	681b      	ldr	r3, [r3, #0]
    bf16:	0018      	movs	r0, r3
    bf18:	4b0e      	ldr	r3, [pc, #56]	; (bf54 <atcab_init+0x80>)
    bf1a:	4798      	blx	r3
    bf1c:	0002      	movs	r2, r0
    bf1e:	4b0e      	ldr	r3, [pc, #56]	; (bf58 <atcab_init+0x84>)
    bf20:	601a      	str	r2, [r3, #0]

    if (_gCommandObj == NULL || _gIface == NULL)
    bf22:	4b0b      	ldr	r3, [pc, #44]	; (bf50 <atcab_init+0x7c>)
    bf24:	681b      	ldr	r3, [r3, #0]
    bf26:	2b00      	cmp	r3, #0
    bf28:	d003      	beq.n	bf32 <atcab_init+0x5e>
    bf2a:	4b0b      	ldr	r3, [pc, #44]	; (bf58 <atcab_init+0x84>)
    bf2c:	681b      	ldr	r3, [r3, #0]
    bf2e:	2b00      	cmp	r3, #0
    bf30:	d101      	bne.n	bf36 <atcab_init+0x62>
        return ATCA_GEN_FAIL;  // More of an assert to make everything was constructed properly
    bf32:	23e1      	movs	r3, #225	; 0xe1
    bf34:	e000      	b.n	bf38 <atcab_init+0x64>

    return ATCA_SUCCESS;
    bf36:	2300      	movs	r3, #0
}
    bf38:	0018      	movs	r0, r3
    bf3a:	46bd      	mov	sp, r7
    bf3c:	b002      	add	sp, #8
    bf3e:	bd80      	pop	{r7, pc}
    bf40:	200006f8 	.word	0x200006f8
    bf44:	0000bf5d 	.word	0x0000bf5d
    bf48:	0000bba5 	.word	0x0000bba5
    bf4c:	0000bc19 	.word	0x0000bc19
    bf50:	200006fc 	.word	0x200006fc
    bf54:	0000bc2d 	.word	0x0000bc2d
    bf58:	20000700 	.word	0x20000700

0000bf5c <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_release(void)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    bf60:	4b03      	ldr	r3, [pc, #12]	; (bf70 <atcab_release+0x14>)
    bf62:	0018      	movs	r0, r3
    bf64:	4b03      	ldr	r3, [pc, #12]	; (bf74 <atcab_release+0x18>)
    bf66:	4798      	blx	r3
    return ATCA_SUCCESS;
    bf68:	2300      	movs	r3, #0
}
    bf6a:	0018      	movs	r0, r3
    bf6c:	46bd      	mov	sp, r7
    bf6e:	bd80      	pop	{r7, pc}
    bf70:	200006f8 	.word	0x200006f8
    bf74:	0000bc41 	.word	0x0000bc41

0000bf78 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_wakeup(void)
{
    bf78:	b580      	push	{r7, lr}
    bf7a:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    bf7c:	4b07      	ldr	r3, [pc, #28]	; (bf9c <atcab_wakeup+0x24>)
    bf7e:	681b      	ldr	r3, [r3, #0]
    bf80:	2b00      	cmp	r3, #0
    bf82:	d101      	bne.n	bf88 <atcab_wakeup+0x10>
        return ATCA_GEN_FAIL;
    bf84:	23e1      	movs	r3, #225	; 0xe1
    bf86:	e005      	b.n	bf94 <atcab_wakeup+0x1c>

    return atwake(_gIface);
    bf88:	4b05      	ldr	r3, [pc, #20]	; (bfa0 <atcab_wakeup+0x28>)
    bf8a:	681b      	ldr	r3, [r3, #0]
    bf8c:	0018      	movs	r0, r3
    bf8e:	4b05      	ldr	r3, [pc, #20]	; (bfa4 <atcab_wakeup+0x2c>)
    bf90:	4798      	blx	r3
    bf92:	0003      	movs	r3, r0
}
    bf94:	0018      	movs	r0, r3
    bf96:	46bd      	mov	sp, r7
    bf98:	bd80      	pop	{r7, pc}
    bf9a:	46c0      	nop			; (mov r8, r8)
    bf9c:	200006f8 	.word	0x200006f8
    bfa0:	20000700 	.word	0x20000700
    bfa4:	0000bd91 	.word	0x0000bd91

0000bfa8 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_idle(void)
{
    bfa8:	b580      	push	{r7, lr}
    bfaa:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    bfac:	4b07      	ldr	r3, [pc, #28]	; (bfcc <atcab_idle+0x24>)
    bfae:	681b      	ldr	r3, [r3, #0]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d101      	bne.n	bfb8 <atcab_idle+0x10>
        return ATCA_GEN_FAIL;
    bfb4:	23e1      	movs	r3, #225	; 0xe1
    bfb6:	e005      	b.n	bfc4 <atcab_idle+0x1c>

    return atidle(_gIface);
    bfb8:	4b05      	ldr	r3, [pc, #20]	; (bfd0 <atcab_idle+0x28>)
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	0018      	movs	r0, r3
    bfbe:	4b05      	ldr	r3, [pc, #20]	; (bfd4 <atcab_idle+0x2c>)
    bfc0:	4798      	blx	r3
    bfc2:	0003      	movs	r3, r0
}
    bfc4:	0018      	movs	r0, r3
    bfc6:	46bd      	mov	sp, r7
    bfc8:	bd80      	pop	{r7, pc}
    bfca:	46c0      	nop			; (mov r8, r8)
    bfcc:	200006f8 	.word	0x200006f8
    bfd0:	20000700 	.word	0x20000700
    bfd4:	0000bdad 	.word	0x0000bdad

0000bfd8 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_sleep(void)
{
    bfd8:	b580      	push	{r7, lr}
    bfda:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    bfdc:	4b07      	ldr	r3, [pc, #28]	; (bffc <atcab_sleep+0x24>)
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d101      	bne.n	bfe8 <atcab_sleep+0x10>
        return ATCA_GEN_FAIL;
    bfe4:	23e1      	movs	r3, #225	; 0xe1
    bfe6:	e005      	b.n	bff4 <atcab_sleep+0x1c>

    return atsleep(_gIface);
    bfe8:	4b05      	ldr	r3, [pc, #20]	; (c000 <atcab_sleep+0x28>)
    bfea:	681b      	ldr	r3, [r3, #0]
    bfec:	0018      	movs	r0, r3
    bfee:	4b05      	ldr	r3, [pc, #20]	; (c004 <atcab_sleep+0x2c>)
    bff0:	4798      	blx	r3
    bff2:	0003      	movs	r3, r0
}
    bff4:	0018      	movs	r0, r3
    bff6:	46bd      	mov	sp, r7
    bff8:	bd80      	pop	{r7, pc}
    bffa:	46c0      	nop			; (mov r8, r8)
    bffc:	200006f8 	.word	0x200006f8
    c000:	20000700 	.word	0x20000700
    c004:	0000bde1 	.word	0x0000bde1

0000c008 <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_STATUS
 */
static ATCA_STATUS _atcab_exit(void)
{
    c008:	b580      	push	{r7, lr}
    c00a:	af00      	add	r7, sp, #0
    return atcab_idle();
    c00c:	4b02      	ldr	r3, [pc, #8]	; (c018 <_atcab_exit+0x10>)
    c00e:	4798      	blx	r3
    c010:	0003      	movs	r3, r0
}
    c012:	0018      	movs	r0, r3
    c014:	46bd      	mov	sp, r7
    c016:	bd80      	pop	{r7, pc}
    c018:	0000bfa9 	.word	0x0000bfa9

0000c01c <atcab_info>:
 *  \param[out] revision - 4-byte storage for receiving the revision number from the device
 *  \return ATCA_STATUS
 */

ATCA_STATUS atcab_info(uint8_t *revision)
{
    c01c:	b590      	push	{r4, r7, lr}
    c01e:	b0a9      	sub	sp, #164	; 0xa4
    c020:	af00      	add	r7, sp, #0
    c022:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c024:	239f      	movs	r3, #159	; 0x9f
    c026:	18fb      	adds	r3, r7, r3
    c028:	22e1      	movs	r2, #225	; 0xe1
    c02a:	701a      	strb	r2, [r3, #0]
    uint32_t execution_time;

    if (!_gDevice)
    c02c:	4b58      	ldr	r3, [pc, #352]	; (c190 <atcab_info+0x174>)
    c02e:	681b      	ldr	r3, [r3, #0]
    c030:	2b00      	cmp	r3, #0
    c032:	d101      	bne.n	c038 <atcab_info+0x1c>
        return ATCA_GEN_FAIL;
    c034:	23e1      	movs	r3, #225	; 0xe1
    c036:	e0a6      	b.n	c186 <atcab_info+0x16a>

    // build an info command
    packet.param1 = INFO_MODE_REVISION;
    c038:	230c      	movs	r3, #12
    c03a:	18fb      	adds	r3, r7, r3
    c03c:	2200      	movs	r2, #0
    c03e:	70da      	strb	r2, [r3, #3]
    packet.param2 = 0;
    c040:	230c      	movs	r3, #12
    c042:	18fb      	adds	r3, r7, r3
    c044:	2200      	movs	r2, #0
    c046:	809a      	strh	r2, [r3, #4]

    do
    {
        // Check the inputs
        if (revision == NULL)
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	2b00      	cmp	r3, #0
    c04c:	d104      	bne.n	c058 <atcab_info+0x3c>
        {
            status = ATCA_BAD_PARAM;
    c04e:	239f      	movs	r3, #159	; 0x9f
    c050:	18fb      	adds	r3, r7, r3
    c052:	22e2      	movs	r2, #226	; 0xe2
    c054:	701a      	strb	r2, [r3, #0]
            BREAK(status, "atcab_info: Null inputs");
    c056:	e08c      	b.n	c172 <atcab_info+0x156>
        }
        if ( (status = atInfo(_gCommandObj, &packet)) != ATCA_SUCCESS)
    c058:	4b4e      	ldr	r3, [pc, #312]	; (c194 <atcab_info+0x178>)
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	229f      	movs	r2, #159	; 0x9f
    c05e:	18bc      	adds	r4, r7, r2
    c060:	220c      	movs	r2, #12
    c062:	18ba      	adds	r2, r7, r2
    c064:	0011      	movs	r1, r2
    c066:	0018      	movs	r0, r3
    c068:	4b4b      	ldr	r3, [pc, #300]	; (c198 <atcab_info+0x17c>)
    c06a:	4798      	blx	r3
    c06c:	0003      	movs	r3, r0
    c06e:	7023      	strb	r3, [r4, #0]
    c070:	239f      	movs	r3, #159	; 0x9f
    c072:	18fb      	adds	r3, r7, r3
    c074:	781b      	ldrb	r3, [r3, #0]
    c076:	2b00      	cmp	r3, #0
    c078:	d000      	beq.n	c07c <atcab_info+0x60>
    c07a:	e071      	b.n	c160 <atcab_info+0x144>
            BREAK(status, "Failed to construct Info command");

        execution_time = atGetExecTime(_gCommandObj, CMD_INFO);
    c07c:	4b45      	ldr	r3, [pc, #276]	; (c194 <atcab_info+0x178>)
    c07e:	681b      	ldr	r3, [r3, #0]
    c080:	2108      	movs	r1, #8
    c082:	0018      	movs	r0, r3
    c084:	4b45      	ldr	r3, [pc, #276]	; (c19c <atcab_info+0x180>)
    c086:	4798      	blx	r3
    c088:	0003      	movs	r3, r0
    c08a:	2298      	movs	r2, #152	; 0x98
    c08c:	18ba      	adds	r2, r7, r2
    c08e:	6013      	str	r3, [r2, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    c090:	239f      	movs	r3, #159	; 0x9f
    c092:	18fc      	adds	r4, r7, r3
    c094:	4b42      	ldr	r3, [pc, #264]	; (c1a0 <atcab_info+0x184>)
    c096:	4798      	blx	r3
    c098:	0003      	movs	r3, r0
    c09a:	7023      	strb	r3, [r4, #0]
    c09c:	239f      	movs	r3, #159	; 0x9f
    c09e:	18fb      	adds	r3, r7, r3
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d15e      	bne.n	c164 <atcab_info+0x148>
            BREAK(status, "Failed to wakeup");

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    c0a6:	4b3f      	ldr	r3, [pc, #252]	; (c1a4 <atcab_info+0x188>)
    c0a8:	6818      	ldr	r0, [r3, #0]
    c0aa:	230c      	movs	r3, #12
    c0ac:	18fb      	adds	r3, r7, r3
    c0ae:	785b      	ldrb	r3, [r3, #1]
    c0b0:	001a      	movs	r2, r3
    c0b2:	239f      	movs	r3, #159	; 0x9f
    c0b4:	18fc      	adds	r4, r7, r3
    c0b6:	230c      	movs	r3, #12
    c0b8:	18fb      	adds	r3, r7, r3
    c0ba:	0019      	movs	r1, r3
    c0bc:	4b3a      	ldr	r3, [pc, #232]	; (c1a8 <atcab_info+0x18c>)
    c0be:	4798      	blx	r3
    c0c0:	0003      	movs	r3, r0
    c0c2:	7023      	strb	r3, [r4, #0]
    c0c4:	239f      	movs	r3, #159	; 0x9f
    c0c6:	18fb      	adds	r3, r7, r3
    c0c8:	781b      	ldrb	r3, [r3, #0]
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d14c      	bne.n	c168 <atcab_info+0x14c>
            BREAK(status, "Failed to send Info command");

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    c0ce:	2398      	movs	r3, #152	; 0x98
    c0d0:	18fb      	adds	r3, r7, r3
    c0d2:	681b      	ldr	r3, [r3, #0]
    c0d4:	0018      	movs	r0, r3
    c0d6:	4b35      	ldr	r3, [pc, #212]	; (c1ac <atcab_info+0x190>)
    c0d8:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, &(packet.data[0]), &(packet.rxsize) )) != ATCA_SUCCESS)
    c0da:	4b32      	ldr	r3, [pc, #200]	; (c1a4 <atcab_info+0x188>)
    c0dc:	6818      	ldr	r0, [r3, #0]
    c0de:	239f      	movs	r3, #159	; 0x9f
    c0e0:	18fc      	adds	r4, r7, r3
    c0e2:	230c      	movs	r3, #12
    c0e4:	18fb      	adds	r3, r7, r3
    c0e6:	338a      	adds	r3, #138	; 0x8a
    c0e8:	001a      	movs	r2, r3
    c0ea:	230c      	movs	r3, #12
    c0ec:	18fb      	adds	r3, r7, r3
    c0ee:	3306      	adds	r3, #6
    c0f0:	0019      	movs	r1, r3
    c0f2:	4b2f      	ldr	r3, [pc, #188]	; (c1b0 <atcab_info+0x194>)
    c0f4:	4798      	blx	r3
    c0f6:	0003      	movs	r3, r0
    c0f8:	7023      	strb	r3, [r4, #0]
    c0fa:	239f      	movs	r3, #159	; 0x9f
    c0fc:	18fb      	adds	r3, r7, r3
    c0fe:	781b      	ldrb	r3, [r3, #0]
    c100:	2b00      	cmp	r3, #0
    c102:	d133      	bne.n	c16c <atcab_info+0x150>
            BREAK(status, "Failed to receive Info command");

        // Check response size
        if (packet.rxsize < 4)
    c104:	230c      	movs	r3, #12
    c106:	18fb      	adds	r3, r7, r3
    c108:	228a      	movs	r2, #138	; 0x8a
    c10a:	5a9b      	ldrh	r3, [r3, r2]
    c10c:	2b03      	cmp	r3, #3
    c10e:	d80f      	bhi.n	c130 <atcab_info+0x114>
        {
            if (packet.rxsize > 0)
    c110:	230c      	movs	r3, #12
    c112:	18fb      	adds	r3, r7, r3
    c114:	228a      	movs	r2, #138	; 0x8a
    c116:	5a9b      	ldrh	r3, [r3, r2]
    c118:	2b00      	cmp	r3, #0
    c11a:	d004      	beq.n	c126 <atcab_info+0x10a>
                status = ATCA_RX_FAIL;
    c11c:	239f      	movs	r3, #159	; 0x9f
    c11e:	18fb      	adds	r3, r7, r3
    c120:	22e6      	movs	r2, #230	; 0xe6
    c122:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            BREAK(status, "Info command returned error code or no resonse");
    c124:	e025      	b.n	c172 <atcab_info+0x156>
                status = ATCA_RX_NO_RESPONSE;
    c126:	239f      	movs	r3, #159	; 0x9f
    c128:	18fb      	adds	r3, r7, r3
    c12a:	22e7      	movs	r2, #231	; 0xe7
    c12c:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Info command returned error code or no resonse");
    c12e:	e020      	b.n	c172 <atcab_info+0x156>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    c130:	239f      	movs	r3, #159	; 0x9f
    c132:	18fc      	adds	r4, r7, r3
    c134:	230c      	movs	r3, #12
    c136:	18fb      	adds	r3, r7, r3
    c138:	3306      	adds	r3, #6
    c13a:	0018      	movs	r0, r3
    c13c:	4b1d      	ldr	r3, [pc, #116]	; (c1b4 <atcab_info+0x198>)
    c13e:	4798      	blx	r3
    c140:	0003      	movs	r3, r0
    c142:	7023      	strb	r3, [r4, #0]
    c144:	239f      	movs	r3, #159	; 0x9f
    c146:	18fb      	adds	r3, r7, r3
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	2b00      	cmp	r3, #0
    c14c:	d110      	bne.n	c170 <atcab_info+0x154>
            BREAK(status, "Failed to construct Info command");

        memcpy(revision, &packet.data[1], 4);    // don't include the receive length, only payload
    c14e:	230c      	movs	r3, #12
    c150:	18fb      	adds	r3, r7, r3
    c152:	1dd9      	adds	r1, r3, #7
    c154:	687b      	ldr	r3, [r7, #4]
    c156:	2204      	movs	r2, #4
    c158:	0018      	movs	r0, r3
    c15a:	4b17      	ldr	r3, [pc, #92]	; (c1b8 <atcab_info+0x19c>)
    c15c:	4798      	blx	r3
    c15e:	e008      	b.n	c172 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    c160:	46c0      	nop			; (mov r8, r8)
    c162:	e006      	b.n	c172 <atcab_info+0x156>
            BREAK(status, "Failed to wakeup");
    c164:	46c0      	nop			; (mov r8, r8)
    c166:	e004      	b.n	c172 <atcab_info+0x156>
            BREAK(status, "Failed to send Info command");
    c168:	46c0      	nop			; (mov r8, r8)
    c16a:	e002      	b.n	c172 <atcab_info+0x156>
            BREAK(status, "Failed to receive Info command");
    c16c:	46c0      	nop			; (mov r8, r8)
    c16e:	e000      	b.n	c172 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    c170:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    if (status != ATCA_COMM_FAIL)     // don't keep shoving more stuff at the chip if there's something wrong with comm
    c172:	239f      	movs	r3, #159	; 0x9f
    c174:	18fb      	adds	r3, r7, r3
    c176:	781b      	ldrb	r3, [r3, #0]
    c178:	2bf0      	cmp	r3, #240	; 0xf0
    c17a:	d001      	beq.n	c180 <atcab_info+0x164>
        _atcab_exit();
    c17c:	4b0f      	ldr	r3, [pc, #60]	; (c1bc <atcab_info+0x1a0>)
    c17e:	4798      	blx	r3

    return status;
    c180:	239f      	movs	r3, #159	; 0x9f
    c182:	18fb      	adds	r3, r7, r3
    c184:	781b      	ldrb	r3, [r3, #0]
}
    c186:	0018      	movs	r0, r3
    c188:	46bd      	mov	sp, r7
    c18a:	b029      	add	sp, #164	; 0xa4
    c18c:	bd90      	pop	{r4, r7, pc}
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	200006f8 	.word	0x200006f8
    c194:	200006fc 	.word	0x200006fc
    c198:	0000b745 	.word	0x0000b745
    c19c:	0000b969 	.word	0x0000b969
    c1a0:	0000bf79 	.word	0x0000bf79
    c1a4:	20000700 	.word	0x20000700
    c1a8:	0000bd4d 	.word	0x0000bd4d
    c1ac:	0000dc25 	.word	0x0000dc25
    c1b0:	0000bd6f 	.word	0x0000bd6f
    c1b4:	0000bb29 	.word	0x0000bb29
    c1b8:	00019e6b 	.word	0x00019e6b
    c1bc:	0000c009 	.word	0x0000c009

0000c1c0 <atcab_random>:
/** \brief Get a 32 byte random number from the CryptoAuth device
 *	\param[out] rand_out ptr to 32 bytes of storage for random number
 *	\return status of the operation
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    c1c0:	b590      	push	{r4, r7, lr}
    c1c2:	b0a7      	sub	sp, #156	; 0x9c
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c1c8:	2397      	movs	r3, #151	; 0x97
    c1ca:	18fb      	adds	r3, r7, r3
    c1cc:	22e1      	movs	r2, #225	; 0xe1
    c1ce:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    c1d0:	2394      	movs	r3, #148	; 0x94
    c1d2:	18fb      	adds	r3, r7, r3
    c1d4:	2200      	movs	r2, #0
    c1d6:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    c1d8:	4b5d      	ldr	r3, [pc, #372]	; (c350 <atcab_random+0x190>)
    c1da:	681b      	ldr	r3, [r3, #0]
    c1dc:	2b00      	cmp	r3, #0
    c1de:	d101      	bne.n	c1e4 <atcab_random+0x24>
        return ATCA_GEN_FAIL;
    c1e0:	23e1      	movs	r3, #225	; 0xe1
    c1e2:	e0b1      	b.n	c348 <atcab_random+0x188>

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    c1e4:	2308      	movs	r3, #8
    c1e6:	18fb      	adds	r3, r7, r3
    c1e8:	2200      	movs	r2, #0
    c1ea:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    c1ec:	2308      	movs	r3, #8
    c1ee:	18fb      	adds	r3, r7, r3
    c1f0:	2200      	movs	r2, #0
    c1f2:	809a      	strh	r2, [r3, #4]
        if ( (status = atRandom(_gCommandObj, &packet)) != ATCA_SUCCESS)
    c1f4:	4b57      	ldr	r3, [pc, #348]	; (c354 <atcab_random+0x194>)
    c1f6:	681b      	ldr	r3, [r3, #0]
    c1f8:	2297      	movs	r2, #151	; 0x97
    c1fa:	18bc      	adds	r4, r7, r2
    c1fc:	2208      	movs	r2, #8
    c1fe:	18ba      	adds	r2, r7, r2
    c200:	0011      	movs	r1, r2
    c202:	0018      	movs	r0, r3
    c204:	4b54      	ldr	r3, [pc, #336]	; (c358 <atcab_random+0x198>)
    c206:	4798      	blx	r3
    c208:	0003      	movs	r3, r0
    c20a:	7023      	strb	r3, [r4, #0]
    c20c:	2397      	movs	r3, #151	; 0x97
    c20e:	18fb      	adds	r3, r7, r3
    c210:	781b      	ldrb	r3, [r3, #0]
    c212:	2b00      	cmp	r3, #0
    c214:	d000      	beq.n	c218 <atcab_random+0x58>
    c216:	e089      	b.n	c32c <atcab_random+0x16c>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_RANDOM);
    c218:	4b4e      	ldr	r3, [pc, #312]	; (c354 <atcab_random+0x194>)
    c21a:	681b      	ldr	r3, [r3, #0]
    c21c:	2294      	movs	r2, #148	; 0x94
    c21e:	18bc      	adds	r4, r7, r2
    c220:	210e      	movs	r1, #14
    c222:	0018      	movs	r0, r3
    c224:	4b4d      	ldr	r3, [pc, #308]	; (c35c <atcab_random+0x19c>)
    c226:	4798      	blx	r3
    c228:	0003      	movs	r3, r0
    c22a:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    c22c:	2397      	movs	r3, #151	; 0x97
    c22e:	18fc      	adds	r4, r7, r3
    c230:	4b4b      	ldr	r3, [pc, #300]	; (c360 <atcab_random+0x1a0>)
    c232:	4798      	blx	r3
    c234:	0003      	movs	r3, r0
    c236:	7023      	strb	r3, [r4, #0]
    c238:	2397      	movs	r3, #151	; 0x97
    c23a:	18fb      	adds	r3, r7, r3
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	2b00      	cmp	r3, #0
    c240:	d000      	beq.n	c244 <atcab_random+0x84>
    c242:	e075      	b.n	c330 <atcab_random+0x170>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    c244:	4b47      	ldr	r3, [pc, #284]	; (c364 <atcab_random+0x1a4>)
    c246:	6818      	ldr	r0, [r3, #0]
    c248:	2308      	movs	r3, #8
    c24a:	18fb      	adds	r3, r7, r3
    c24c:	785b      	ldrb	r3, [r3, #1]
    c24e:	001a      	movs	r2, r3
    c250:	2397      	movs	r3, #151	; 0x97
    c252:	18fc      	adds	r4, r7, r3
    c254:	2308      	movs	r3, #8
    c256:	18fb      	adds	r3, r7, r3
    c258:	0019      	movs	r1, r3
    c25a:	4b43      	ldr	r3, [pc, #268]	; (c368 <atcab_random+0x1a8>)
    c25c:	4798      	blx	r3
    c25e:	0003      	movs	r3, r0
    c260:	7023      	strb	r3, [r4, #0]
    c262:	2397      	movs	r3, #151	; 0x97
    c264:	18fb      	adds	r3, r7, r3
    c266:	781b      	ldrb	r3, [r3, #0]
    c268:	2b00      	cmp	r3, #0
    c26a:	d163      	bne.n	c334 <atcab_random+0x174>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    c26c:	2394      	movs	r3, #148	; 0x94
    c26e:	18fb      	adds	r3, r7, r3
    c270:	881b      	ldrh	r3, [r3, #0]
    c272:	0018      	movs	r0, r3
    c274:	4b3d      	ldr	r3, [pc, #244]	; (c36c <atcab_random+0x1ac>)
    c276:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    c278:	4b3a      	ldr	r3, [pc, #232]	; (c364 <atcab_random+0x1a4>)
    c27a:	6818      	ldr	r0, [r3, #0]
    c27c:	2397      	movs	r3, #151	; 0x97
    c27e:	18fc      	adds	r4, r7, r3
    c280:	2308      	movs	r3, #8
    c282:	18fb      	adds	r3, r7, r3
    c284:	338a      	adds	r3, #138	; 0x8a
    c286:	001a      	movs	r2, r3
    c288:	2308      	movs	r3, #8
    c28a:	18fb      	adds	r3, r7, r3
    c28c:	3306      	adds	r3, #6
    c28e:	0019      	movs	r1, r3
    c290:	4b37      	ldr	r3, [pc, #220]	; (c370 <atcab_random+0x1b0>)
    c292:	4798      	blx	r3
    c294:	0003      	movs	r3, r0
    c296:	7023      	strb	r3, [r4, #0]
    c298:	2397      	movs	r3, #151	; 0x97
    c29a:	18fb      	adds	r3, r7, r3
    c29c:	781b      	ldrb	r3, [r3, #0]
    c29e:	2b00      	cmp	r3, #0
    c2a0:	d14a      	bne.n	c338 <atcab_random+0x178>
            break;

        // Check response size
        if (packet.rxsize < 4)
    c2a2:	2308      	movs	r3, #8
    c2a4:	18fb      	adds	r3, r7, r3
    c2a6:	228a      	movs	r2, #138	; 0x8a
    c2a8:	5a9b      	ldrh	r3, [r3, r2]
    c2aa:	2b03      	cmp	r3, #3
    c2ac:	d80f      	bhi.n	c2ce <atcab_random+0x10e>
        {
            if (packet.rxsize > 0)
    c2ae:	2308      	movs	r3, #8
    c2b0:	18fb      	adds	r3, r7, r3
    c2b2:	228a      	movs	r2, #138	; 0x8a
    c2b4:	5a9b      	ldrh	r3, [r3, r2]
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d004      	beq.n	c2c4 <atcab_random+0x104>
                status = ATCA_RX_FAIL;
    c2ba:	2397      	movs	r3, #151	; 0x97
    c2bc:	18fb      	adds	r3, r7, r3
    c2be:	22e6      	movs	r2, #230	; 0xe6
    c2c0:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    c2c2:	e03c      	b.n	c33e <atcab_random+0x17e>
                status = ATCA_RX_NO_RESPONSE;
    c2c4:	2397      	movs	r3, #151	; 0x97
    c2c6:	18fb      	adds	r3, r7, r3
    c2c8:	22e7      	movs	r2, #231	; 0xe7
    c2ca:	701a      	strb	r2, [r3, #0]
            break;
    c2cc:	e037      	b.n	c33e <atcab_random+0x17e>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    c2ce:	2397      	movs	r3, #151	; 0x97
    c2d0:	18fc      	adds	r4, r7, r3
    c2d2:	2308      	movs	r3, #8
    c2d4:	18fb      	adds	r3, r7, r3
    c2d6:	3306      	adds	r3, #6
    c2d8:	0018      	movs	r0, r3
    c2da:	4b26      	ldr	r3, [pc, #152]	; (c374 <atcab_random+0x1b4>)
    c2dc:	4798      	blx	r3
    c2de:	0003      	movs	r3, r0
    c2e0:	7023      	strb	r3, [r4, #0]
    c2e2:	2397      	movs	r3, #151	; 0x97
    c2e4:	18fb      	adds	r3, r7, r3
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d127      	bne.n	c33c <atcab_random+0x17c>
            break;

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    c2ec:	2308      	movs	r3, #8
    c2ee:	18fb      	adds	r3, r7, r3
    c2f0:	228a      	movs	r2, #138	; 0x8a
    c2f2:	5a9a      	ldrh	r2, [r3, r2]
    c2f4:	2308      	movs	r3, #8
    c2f6:	18fb      	adds	r3, r7, r3
    c2f8:	799b      	ldrb	r3, [r3, #6]
    c2fa:	b29b      	uxth	r3, r3
    c2fc:	429a      	cmp	r2, r3
    c2fe:	d304      	bcc.n	c30a <atcab_random+0x14a>
    c300:	2308      	movs	r3, #8
    c302:	18fb      	adds	r3, r7, r3
    c304:	799b      	ldrb	r3, [r3, #6]
    c306:	2b23      	cmp	r3, #35	; 0x23
    c308:	d004      	beq.n	c314 <atcab_random+0x154>
        {
            status = ATCA_RX_FAIL;
    c30a:	2397      	movs	r3, #151	; 0x97
    c30c:	18fb      	adds	r3, r7, r3
    c30e:	22e6      	movs	r2, #230	; 0xe6
    c310:	701a      	strb	r2, [r3, #0]
            break;
    c312:	e014      	b.n	c33e <atcab_random+0x17e>
        }

        if (rand_out)
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	2b00      	cmp	r3, #0
    c318:	d011      	beq.n	c33e <atcab_random+0x17e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    c31a:	2308      	movs	r3, #8
    c31c:	18fb      	adds	r3, r7, r3
    c31e:	1dd9      	adds	r1, r3, #7
    c320:	687b      	ldr	r3, [r7, #4]
    c322:	2220      	movs	r2, #32
    c324:	0018      	movs	r0, r3
    c326:	4b14      	ldr	r3, [pc, #80]	; (c378 <atcab_random+0x1b8>)
    c328:	4798      	blx	r3
    c32a:	e008      	b.n	c33e <atcab_random+0x17e>
            break;
    c32c:	46c0      	nop			; (mov r8, r8)
    c32e:	e006      	b.n	c33e <atcab_random+0x17e>
            break;
    c330:	46c0      	nop			; (mov r8, r8)
    c332:	e004      	b.n	c33e <atcab_random+0x17e>
            break;
    c334:	46c0      	nop			; (mov r8, r8)
    c336:	e002      	b.n	c33e <atcab_random+0x17e>
            break;
    c338:	46c0      	nop			; (mov r8, r8)
    c33a:	e000      	b.n	c33e <atcab_random+0x17e>
            break;
    c33c:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    c33e:	4b0f      	ldr	r3, [pc, #60]	; (c37c <atcab_random+0x1bc>)
    c340:	4798      	blx	r3
    return status;
    c342:	2397      	movs	r3, #151	; 0x97
    c344:	18fb      	adds	r3, r7, r3
    c346:	781b      	ldrb	r3, [r3, #0]
}
    c348:	0018      	movs	r0, r3
    c34a:	46bd      	mov	sp, r7
    c34c:	b027      	add	sp, #156	; 0x9c
    c34e:	bd90      	pop	{r4, r7, pc}
    c350:	200006f8 	.word	0x200006f8
    c354:	200006fc 	.word	0x200006fc
    c358:	0000b7e1 	.word	0x0000b7e1
    c35c:	0000b969 	.word	0x0000b969
    c360:	0000bf79 	.word	0x0000bf79
    c364:	20000700 	.word	0x20000700
    c368:	0000bd4d 	.word	0x0000bd4d
    c36c:	0000dc25 	.word	0x0000dc25
    c370:	0000bd6f 	.word	0x0000bd6f
    c374:	0000bb29 	.word	0x0000bb29
    c378:	00019e6b 	.word	0x00019e6b
    c37c:	0000c009 	.word	0x0000c009

0000c380 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    c380:	b590      	push	{r4, r7, lr}
    c382:	b0a9      	sub	sp, #164	; 0xa4
    c384:	af00      	add	r7, sp, #0
    c386:	60ba      	str	r2, [r7, #8]
    c388:	607b      	str	r3, [r7, #4]
    c38a:	230f      	movs	r3, #15
    c38c:	18fb      	adds	r3, r7, r3
    c38e:	1c02      	adds	r2, r0, #0
    c390:	701a      	strb	r2, [r3, #0]
    c392:	230c      	movs	r3, #12
    c394:	18fb      	adds	r3, r7, r3
    c396:	1c0a      	adds	r2, r1, #0
    c398:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    c39a:	239c      	movs	r3, #156	; 0x9c
    c39c:	18fb      	adds	r3, r7, r3
    c39e:	2200      	movs	r2, #0
    c3a0:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c3a2:	239f      	movs	r3, #159	; 0x9f
    c3a4:	18fb      	adds	r3, r7, r3
    c3a6:	22e1      	movs	r2, #225	; 0xe1
    c3a8:	701a      	strb	r2, [r3, #0]

    if (!_gDevice)
    c3aa:	4b5f      	ldr	r3, [pc, #380]	; (c528 <atcab_genkey_base+0x1a8>)
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	d101      	bne.n	c3b6 <atcab_genkey_base+0x36>
        return ATCA_GEN_FAIL;
    c3b2:	23e1      	movs	r3, #225	; 0xe1
    c3b4:	e0b4      	b.n	c520 <atcab_genkey_base+0x1a0>

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    c3b6:	2310      	movs	r3, #16
    c3b8:	18fb      	adds	r3, r7, r3
    c3ba:	220f      	movs	r2, #15
    c3bc:	18ba      	adds	r2, r7, r2
    c3be:	7812      	ldrb	r2, [r2, #0]
    c3c0:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    c3c2:	2310      	movs	r3, #16
    c3c4:	18fb      	adds	r3, r7, r3
    c3c6:	220c      	movs	r2, #12
    c3c8:	18ba      	adds	r2, r7, r2
    c3ca:	8812      	ldrh	r2, [r2, #0]
    c3cc:	809a      	strh	r2, [r3, #4]
        if (other_data)
    c3ce:	68bb      	ldr	r3, [r7, #8]
    c3d0:	2b00      	cmp	r3, #0
    c3d2:	d007      	beq.n	c3e4 <atcab_genkey_base+0x64>
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    c3d4:	68b9      	ldr	r1, [r7, #8]
    c3d6:	2310      	movs	r3, #16
    c3d8:	18fb      	adds	r3, r7, r3
    c3da:	3306      	adds	r3, #6
    c3dc:	2203      	movs	r2, #3
    c3de:	0018      	movs	r0, r3
    c3e0:	4b52      	ldr	r3, [pc, #328]	; (c52c <atcab_genkey_base+0x1ac>)
    c3e2:	4798      	blx	r3
        if ((status = atGenKey(_gCommandObj, &packet)) != ATCA_SUCCESS)
    c3e4:	4b52      	ldr	r3, [pc, #328]	; (c530 <atcab_genkey_base+0x1b0>)
    c3e6:	681b      	ldr	r3, [r3, #0]
    c3e8:	229f      	movs	r2, #159	; 0x9f
    c3ea:	18bc      	adds	r4, r7, r2
    c3ec:	2210      	movs	r2, #16
    c3ee:	18ba      	adds	r2, r7, r2
    c3f0:	0011      	movs	r1, r2
    c3f2:	0018      	movs	r0, r3
    c3f4:	4b4f      	ldr	r3, [pc, #316]	; (c534 <atcab_genkey_base+0x1b4>)
    c3f6:	4798      	blx	r3
    c3f8:	0003      	movs	r3, r0
    c3fa:	7023      	strb	r3, [r4, #0]
    c3fc:	239f      	movs	r3, #159	; 0x9f
    c3fe:	18fb      	adds	r3, r7, r3
    c400:	781b      	ldrb	r3, [r3, #0]
    c402:	2b00      	cmp	r3, #0
    c404:	d000      	beq.n	c408 <atcab_genkey_base+0x88>
    c406:	e07d      	b.n	c504 <atcab_genkey_base+0x184>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_GENKEY);
    c408:	4b49      	ldr	r3, [pc, #292]	; (c530 <atcab_genkey_base+0x1b0>)
    c40a:	681b      	ldr	r3, [r3, #0]
    c40c:	229c      	movs	r2, #156	; 0x9c
    c40e:	18bc      	adds	r4, r7, r2
    c410:	2106      	movs	r1, #6
    c412:	0018      	movs	r0, r3
    c414:	4b48      	ldr	r3, [pc, #288]	; (c538 <atcab_genkey_base+0x1b8>)
    c416:	4798      	blx	r3
    c418:	0003      	movs	r3, r0
    c41a:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    c41c:	239f      	movs	r3, #159	; 0x9f
    c41e:	18fc      	adds	r4, r7, r3
    c420:	4b46      	ldr	r3, [pc, #280]	; (c53c <atcab_genkey_base+0x1bc>)
    c422:	4798      	blx	r3
    c424:	0003      	movs	r3, r0
    c426:	7023      	strb	r3, [r4, #0]
    c428:	239f      	movs	r3, #159	; 0x9f
    c42a:	18fb      	adds	r3, r7, r3
    c42c:	781b      	ldrb	r3, [r3, #0]
    c42e:	2b00      	cmp	r3, #0
    c430:	d16a      	bne.n	c508 <atcab_genkey_base+0x188>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    c432:	4b43      	ldr	r3, [pc, #268]	; (c540 <atcab_genkey_base+0x1c0>)
    c434:	6818      	ldr	r0, [r3, #0]
    c436:	2310      	movs	r3, #16
    c438:	18fb      	adds	r3, r7, r3
    c43a:	785b      	ldrb	r3, [r3, #1]
    c43c:	001a      	movs	r2, r3
    c43e:	239f      	movs	r3, #159	; 0x9f
    c440:	18fc      	adds	r4, r7, r3
    c442:	2310      	movs	r3, #16
    c444:	18fb      	adds	r3, r7, r3
    c446:	0019      	movs	r1, r3
    c448:	4b3e      	ldr	r3, [pc, #248]	; (c544 <atcab_genkey_base+0x1c4>)
    c44a:	4798      	blx	r3
    c44c:	0003      	movs	r3, r0
    c44e:	7023      	strb	r3, [r4, #0]
    c450:	239f      	movs	r3, #159	; 0x9f
    c452:	18fb      	adds	r3, r7, r3
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	2b00      	cmp	r3, #0
    c458:	d158      	bne.n	c50c <atcab_genkey_base+0x18c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    c45a:	239c      	movs	r3, #156	; 0x9c
    c45c:	18fb      	adds	r3, r7, r3
    c45e:	881b      	ldrh	r3, [r3, #0]
    c460:	0018      	movs	r0, r3
    c462:	4b39      	ldr	r3, [pc, #228]	; (c548 <atcab_genkey_base+0x1c8>)
    c464:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    c466:	4b36      	ldr	r3, [pc, #216]	; (c540 <atcab_genkey_base+0x1c0>)
    c468:	6818      	ldr	r0, [r3, #0]
    c46a:	239f      	movs	r3, #159	; 0x9f
    c46c:	18fc      	adds	r4, r7, r3
    c46e:	2310      	movs	r3, #16
    c470:	18fb      	adds	r3, r7, r3
    c472:	338a      	adds	r3, #138	; 0x8a
    c474:	001a      	movs	r2, r3
    c476:	2310      	movs	r3, #16
    c478:	18fb      	adds	r3, r7, r3
    c47a:	3306      	adds	r3, #6
    c47c:	0019      	movs	r1, r3
    c47e:	4b33      	ldr	r3, [pc, #204]	; (c54c <atcab_genkey_base+0x1cc>)
    c480:	4798      	blx	r3
    c482:	0003      	movs	r3, r0
    c484:	7023      	strb	r3, [r4, #0]
    c486:	239f      	movs	r3, #159	; 0x9f
    c488:	18fb      	adds	r3, r7, r3
    c48a:	781b      	ldrb	r3, [r3, #0]
    c48c:	2b00      	cmp	r3, #0
    c48e:	d13f      	bne.n	c510 <atcab_genkey_base+0x190>
            break;

        // Check response size
        if (packet.rxsize < 4)
    c490:	2310      	movs	r3, #16
    c492:	18fb      	adds	r3, r7, r3
    c494:	228a      	movs	r2, #138	; 0x8a
    c496:	5a9b      	ldrh	r3, [r3, r2]
    c498:	2b03      	cmp	r3, #3
    c49a:	d80f      	bhi.n	c4bc <atcab_genkey_base+0x13c>
        {
            if (packet.rxsize > 0)
    c49c:	2310      	movs	r3, #16
    c49e:	18fb      	adds	r3, r7, r3
    c4a0:	228a      	movs	r2, #138	; 0x8a
    c4a2:	5a9b      	ldrh	r3, [r3, r2]
    c4a4:	2b00      	cmp	r3, #0
    c4a6:	d004      	beq.n	c4b2 <atcab_genkey_base+0x132>
                status = ATCA_RX_FAIL;
    c4a8:	239f      	movs	r3, #159	; 0x9f
    c4aa:	18fb      	adds	r3, r7, r3
    c4ac:	22e6      	movs	r2, #230	; 0xe6
    c4ae:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    c4b0:	e031      	b.n	c516 <atcab_genkey_base+0x196>
                status = ATCA_RX_NO_RESPONSE;
    c4b2:	239f      	movs	r3, #159	; 0x9f
    c4b4:	18fb      	adds	r3, r7, r3
    c4b6:	22e7      	movs	r2, #231	; 0xe7
    c4b8:	701a      	strb	r2, [r3, #0]
            break;
    c4ba:	e02c      	b.n	c516 <atcab_genkey_base+0x196>
        }

        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    c4bc:	239f      	movs	r3, #159	; 0x9f
    c4be:	18fc      	adds	r4, r7, r3
    c4c0:	2310      	movs	r3, #16
    c4c2:	18fb      	adds	r3, r7, r3
    c4c4:	3306      	adds	r3, #6
    c4c6:	0018      	movs	r0, r3
    c4c8:	4b21      	ldr	r3, [pc, #132]	; (c550 <atcab_genkey_base+0x1d0>)
    c4ca:	4798      	blx	r3
    c4cc:	0003      	movs	r3, r0
    c4ce:	7023      	strb	r3, [r4, #0]
    c4d0:	239f      	movs	r3, #159	; 0x9f
    c4d2:	18fb      	adds	r3, r7, r3
    c4d4:	781b      	ldrb	r3, [r3, #0]
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d11c      	bne.n	c514 <atcab_genkey_base+0x194>
            break;

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    c4da:	687b      	ldr	r3, [r7, #4]
    c4dc:	2b00      	cmp	r3, #0
    c4de:	d01a      	beq.n	c516 <atcab_genkey_base+0x196>
    c4e0:	2310      	movs	r3, #16
    c4e2:	18fb      	adds	r3, r7, r3
    c4e4:	799b      	ldrb	r3, [r3, #6]
    c4e6:	2b04      	cmp	r3, #4
    c4e8:	d915      	bls.n	c516 <atcab_genkey_base+0x196>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    c4ea:	2310      	movs	r3, #16
    c4ec:	18fb      	adds	r3, r7, r3
    c4ee:	799b      	ldrb	r3, [r3, #6]
    c4f0:	3b03      	subs	r3, #3
    c4f2:	001a      	movs	r2, r3
    c4f4:	2310      	movs	r3, #16
    c4f6:	18fb      	adds	r3, r7, r3
    c4f8:	1dd9      	adds	r1, r3, #7
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	0018      	movs	r0, r3
    c4fe:	4b0b      	ldr	r3, [pc, #44]	; (c52c <atcab_genkey_base+0x1ac>)
    c500:	4798      	blx	r3
    c502:	e008      	b.n	c516 <atcab_genkey_base+0x196>
            break;
    c504:	46c0      	nop			; (mov r8, r8)
    c506:	e006      	b.n	c516 <atcab_genkey_base+0x196>
            break;
    c508:	46c0      	nop			; (mov r8, r8)
    c50a:	e004      	b.n	c516 <atcab_genkey_base+0x196>
            break;
    c50c:	46c0      	nop			; (mov r8, r8)
    c50e:	e002      	b.n	c516 <atcab_genkey_base+0x196>
            break;
    c510:	46c0      	nop			; (mov r8, r8)
    c512:	e000      	b.n	c516 <atcab_genkey_base+0x196>
            break;
    c514:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    c516:	4b0f      	ldr	r3, [pc, #60]	; (c554 <atcab_genkey_base+0x1d4>)
    c518:	4798      	blx	r3
    return status;
    c51a:	239f      	movs	r3, #159	; 0x9f
    c51c:	18fb      	adds	r3, r7, r3
    c51e:	781b      	ldrb	r3, [r3, #0]
}
    c520:	0018      	movs	r0, r3
    c522:	46bd      	mov	sp, r7
    c524:	b029      	add	sp, #164	; 0xa4
    c526:	bd90      	pop	{r4, r7, pc}
    c528:	200006f8 	.word	0x200006f8
    c52c:	00019e6b 	.word	0x00019e6b
    c530:	200006fc 	.word	0x200006fc
    c534:	0000b6f5 	.word	0x0000b6f5
    c538:	0000b969 	.word	0x0000b969
    c53c:	0000bf79 	.word	0x0000bf79
    c540:	20000700 	.word	0x20000700
    c544:	0000bd4d 	.word	0x0000bd4d
    c548:	0000dc25 	.word	0x0000dc25
    c54c:	0000bd6f 	.word	0x0000bd6f
    c550:	0000bb29 	.word	0x0000bb29
    c554:	0000c009 	.word	0x0000c009

0000c558 <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    c558:	b590      	push	{r4, r7, lr}
    c55a:	b083      	sub	sp, #12
    c55c:	af00      	add	r7, sp, #0
    c55e:	0002      	movs	r2, r0
    c560:	6039      	str	r1, [r7, #0]
    c562:	1dbb      	adds	r3, r7, #6
    c564:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    c566:	683a      	ldr	r2, [r7, #0]
    c568:	1dbb      	adds	r3, r7, #6
    c56a:	8819      	ldrh	r1, [r3, #0]
    c56c:	0013      	movs	r3, r2
    c56e:	2200      	movs	r2, #0
    c570:	2004      	movs	r0, #4
    c572:	4c03      	ldr	r4, [pc, #12]	; (c580 <atcab_genkey+0x28>)
    c574:	47a0      	blx	r4
    c576:	0003      	movs	r3, r0
}
    c578:	0018      	movs	r0, r3
    c57a:	46bd      	mov	sp, r7
    c57c:	b003      	add	sp, #12
    c57e:	bd90      	pop	{r4, r7, pc}
    c580:	0000c381 	.word	0x0000c381

0000c584 <atcab_challenge>:
/** \brief send a challenge to the device (a pass-through nonce)
 *  \param[in] challenge - pointer to 32 bytes of data which will be sent as the challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_challenge(const uint8_t *challenge)
{
    c584:	b590      	push	{r4, r7, lr}
    c586:	b0a7      	sub	sp, #156	; 0x9c
    c588:	af00      	add	r7, sp, #0
    c58a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c58c:	2397      	movs	r3, #151	; 0x97
    c58e:	18fb      	adds	r3, r7, r3
    c590:	22e1      	movs	r2, #225	; 0xe1
    c592:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    c594:	2394      	movs	r3, #148	; 0x94
    c596:	18fb      	adds	r3, r7, r3
    c598:	2200      	movs	r2, #0
    c59a:	801a      	strh	r2, [r3, #0]

    do
    {
        // Verify the inputs
        if (challenge == NULL)
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d104      	bne.n	c5ac <atcab_challenge+0x28>
        {
            status = ATCA_BAD_PARAM;
    c5a2:	2397      	movs	r3, #151	; 0x97
    c5a4:	18fb      	adds	r3, r7, r3
    c5a6:	22e2      	movs	r2, #226	; 0xe2
    c5a8:	701a      	strb	r2, [r3, #0]
            break;
    c5aa:	e08c      	b.n	c6c6 <atcab_challenge+0x142>
        }

        // build a nonce command (pass through mode)
        packet.param1 = NONCE_MODE_PASSTHROUGH;
    c5ac:	2308      	movs	r3, #8
    c5ae:	18fb      	adds	r3, r7, r3
    c5b0:	2203      	movs	r2, #3
    c5b2:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    c5b4:	2308      	movs	r3, #8
    c5b6:	18fb      	adds	r3, r7, r3
    c5b8:	2200      	movs	r2, #0
    c5ba:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, challenge, 32);
    c5bc:	6879      	ldr	r1, [r7, #4]
    c5be:	2308      	movs	r3, #8
    c5c0:	18fb      	adds	r3, r7, r3
    c5c2:	3306      	adds	r3, #6
    c5c4:	2220      	movs	r2, #32
    c5c6:	0018      	movs	r0, r3
    c5c8:	4b43      	ldr	r3, [pc, #268]	; (c6d8 <atcab_challenge+0x154>)
    c5ca:	4798      	blx	r3

        if ((status = atNonce(_gCommandObj, &packet)) != ATCA_SUCCESS)
    c5cc:	4b43      	ldr	r3, [pc, #268]	; (c6dc <atcab_challenge+0x158>)
    c5ce:	681b      	ldr	r3, [r3, #0]
    c5d0:	2297      	movs	r2, #151	; 0x97
    c5d2:	18bc      	adds	r4, r7, r2
    c5d4:	2208      	movs	r2, #8
    c5d6:	18ba      	adds	r2, r7, r2
    c5d8:	0011      	movs	r1, r2
    c5da:	0018      	movs	r0, r3
    c5dc:	4b40      	ldr	r3, [pc, #256]	; (c6e0 <atcab_challenge+0x15c>)
    c5de:	4798      	blx	r3
    c5e0:	0003      	movs	r3, r0
    c5e2:	7023      	strb	r3, [r4, #0]
    c5e4:	2397      	movs	r3, #151	; 0x97
    c5e6:	18fb      	adds	r3, r7, r3
    c5e8:	781b      	ldrb	r3, [r3, #0]
    c5ea:	2b00      	cmp	r3, #0
    c5ec:	d164      	bne.n	c6b8 <atcab_challenge+0x134>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_NONCE);
    c5ee:	4b3b      	ldr	r3, [pc, #236]	; (c6dc <atcab_challenge+0x158>)
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	2294      	movs	r2, #148	; 0x94
    c5f4:	18bc      	adds	r4, r7, r2
    c5f6:	210b      	movs	r1, #11
    c5f8:	0018      	movs	r0, r3
    c5fa:	4b3a      	ldr	r3, [pc, #232]	; (c6e4 <atcab_challenge+0x160>)
    c5fc:	4798      	blx	r3
    c5fe:	0003      	movs	r3, r0
    c600:	8023      	strh	r3, [r4, #0]

        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    c602:	2397      	movs	r3, #151	; 0x97
    c604:	18fc      	adds	r4, r7, r3
    c606:	4b38      	ldr	r3, [pc, #224]	; (c6e8 <atcab_challenge+0x164>)
    c608:	4798      	blx	r3
    c60a:	0003      	movs	r3, r0
    c60c:	7023      	strb	r3, [r4, #0]
    c60e:	2397      	movs	r3, #151	; 0x97
    c610:	18fb      	adds	r3, r7, r3
    c612:	781b      	ldrb	r3, [r3, #0]
    c614:	2b00      	cmp	r3, #0
    c616:	d151      	bne.n	c6bc <atcab_challenge+0x138>
            break;

        // send the command
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    c618:	4b34      	ldr	r3, [pc, #208]	; (c6ec <atcab_challenge+0x168>)
    c61a:	6818      	ldr	r0, [r3, #0]
    c61c:	2308      	movs	r3, #8
    c61e:	18fb      	adds	r3, r7, r3
    c620:	785b      	ldrb	r3, [r3, #1]
    c622:	001a      	movs	r2, r3
    c624:	2397      	movs	r3, #151	; 0x97
    c626:	18fc      	adds	r4, r7, r3
    c628:	2308      	movs	r3, #8
    c62a:	18fb      	adds	r3, r7, r3
    c62c:	0019      	movs	r1, r3
    c62e:	4b30      	ldr	r3, [pc, #192]	; (c6f0 <atcab_challenge+0x16c>)
    c630:	4798      	blx	r3
    c632:	0003      	movs	r3, r0
    c634:	7023      	strb	r3, [r4, #0]
    c636:	2397      	movs	r3, #151	; 0x97
    c638:	18fb      	adds	r3, r7, r3
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d13f      	bne.n	c6c0 <atcab_challenge+0x13c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    c640:	2394      	movs	r3, #148	; 0x94
    c642:	18fb      	adds	r3, r7, r3
    c644:	881b      	ldrh	r3, [r3, #0]
    c646:	0018      	movs	r0, r3
    c648:	4b2a      	ldr	r3, [pc, #168]	; (c6f4 <atcab_challenge+0x170>)
    c64a:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    c64c:	4b27      	ldr	r3, [pc, #156]	; (c6ec <atcab_challenge+0x168>)
    c64e:	6818      	ldr	r0, [r3, #0]
    c650:	2397      	movs	r3, #151	; 0x97
    c652:	18fc      	adds	r4, r7, r3
    c654:	2308      	movs	r3, #8
    c656:	18fb      	adds	r3, r7, r3
    c658:	338a      	adds	r3, #138	; 0x8a
    c65a:	001a      	movs	r2, r3
    c65c:	2308      	movs	r3, #8
    c65e:	18fb      	adds	r3, r7, r3
    c660:	3306      	adds	r3, #6
    c662:	0019      	movs	r1, r3
    c664:	4b24      	ldr	r3, [pc, #144]	; (c6f8 <atcab_challenge+0x174>)
    c666:	4798      	blx	r3
    c668:	0003      	movs	r3, r0
    c66a:	7023      	strb	r3, [r4, #0]
    c66c:	2397      	movs	r3, #151	; 0x97
    c66e:	18fb      	adds	r3, r7, r3
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	2b00      	cmp	r3, #0
    c674:	d126      	bne.n	c6c4 <atcab_challenge+0x140>
            break;

        // Check response size
        if (packet.rxsize < 4)
    c676:	2308      	movs	r3, #8
    c678:	18fb      	adds	r3, r7, r3
    c67a:	228a      	movs	r2, #138	; 0x8a
    c67c:	5a9b      	ldrh	r3, [r3, r2]
    c67e:	2b03      	cmp	r3, #3
    c680:	d80f      	bhi.n	c6a2 <atcab_challenge+0x11e>
        {
            if (packet.rxsize > 0)
    c682:	2308      	movs	r3, #8
    c684:	18fb      	adds	r3, r7, r3
    c686:	228a      	movs	r2, #138	; 0x8a
    c688:	5a9b      	ldrh	r3, [r3, r2]
    c68a:	2b00      	cmp	r3, #0
    c68c:	d004      	beq.n	c698 <atcab_challenge+0x114>
                status = ATCA_RX_FAIL;
    c68e:	2397      	movs	r3, #151	; 0x97
    c690:	18fb      	adds	r3, r7, r3
    c692:	22e6      	movs	r2, #230	; 0xe6
    c694:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    c696:	e016      	b.n	c6c6 <atcab_challenge+0x142>
                status = ATCA_RX_NO_RESPONSE;
    c698:	2397      	movs	r3, #151	; 0x97
    c69a:	18fb      	adds	r3, r7, r3
    c69c:	22e7      	movs	r2, #231	; 0xe7
    c69e:	701a      	strb	r2, [r3, #0]
            break;
    c6a0:	e011      	b.n	c6c6 <atcab_challenge+0x142>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    c6a2:	2397      	movs	r3, #151	; 0x97
    c6a4:	18fc      	adds	r4, r7, r3
    c6a6:	2308      	movs	r3, #8
    c6a8:	18fb      	adds	r3, r7, r3
    c6aa:	3306      	adds	r3, #6
    c6ac:	0018      	movs	r0, r3
    c6ae:	4b13      	ldr	r3, [pc, #76]	; (c6fc <atcab_challenge+0x178>)
    c6b0:	4798      	blx	r3
    c6b2:	0003      	movs	r3, r0
    c6b4:	7023      	strb	r3, [r4, #0]
    c6b6:	e006      	b.n	c6c6 <atcab_challenge+0x142>
            break;
    c6b8:	46c0      	nop			; (mov r8, r8)
    c6ba:	e004      	b.n	c6c6 <atcab_challenge+0x142>
            break;
    c6bc:	46c0      	nop			; (mov r8, r8)
    c6be:	e002      	b.n	c6c6 <atcab_challenge+0x142>
            break;
    c6c0:	46c0      	nop			; (mov r8, r8)
    c6c2:	e000      	b.n	c6c6 <atcab_challenge+0x142>
            break;
    c6c4:	46c0      	nop			; (mov r8, r8)
            break;

    }
    while (0);

    _atcab_exit();
    c6c6:	4b0e      	ldr	r3, [pc, #56]	; (c700 <atcab_challenge+0x17c>)
    c6c8:	4798      	blx	r3
    return status;
    c6ca:	2397      	movs	r3, #151	; 0x97
    c6cc:	18fb      	adds	r3, r7, r3
    c6ce:	781b      	ldrb	r3, [r3, #0]
}
    c6d0:	0018      	movs	r0, r3
    c6d2:	46bd      	mov	sp, r7
    c6d4:	b027      	add	sp, #156	; 0x9c
    c6d6:	bd90      	pop	{r4, r7, pc}
    c6d8:	00019e6b 	.word	0x00019e6b
    c6dc:	200006fc 	.word	0x200006fc
    c6e0:	0000b779 	.word	0x0000b779
    c6e4:	0000b969 	.word	0x0000b969
    c6e8:	0000bf79 	.word	0x0000bf79
    c6ec:	20000700 	.word	0x20000700
    c6f0:	0000bd4d 	.word	0x0000bd4d
    c6f4:	0000dc25 	.word	0x0000dc25
    c6f8:	0000bd6f 	.word	0x0000bd6f
    c6fc:	0000bb29 	.word	0x0000bb29
    c700:	0000c009 	.word	0x0000c009

0000c704 <atcab_read_serial_number>:
/** \brief read the serial number of the device
 *  \param[out] serial_number  pointer to space to receive serial number. This space should be 9 bytes long
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
    c704:	b5b0      	push	{r4, r5, r7, lr}
    c706:	b08e      	sub	sp, #56	; 0x38
    c708:	af02      	add	r7, sp, #8
    c70a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c70c:	232f      	movs	r3, #47	; 0x2f
    c70e:	18fb      	adds	r3, r7, r3
    c710:	22e1      	movs	r2, #225	; 0xe1
    c712:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	2b00      	cmp	r3, #0
    c718:	d101      	bne.n	c71e <atcab_read_serial_number+0x1a>
        return ATCA_BAD_PARAM;
    c71a:	23e2      	movs	r3, #226	; 0xe2
    c71c:	e028      	b.n	c770 <atcab_read_serial_number+0x6c>

    do
    {
        if ( (status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    c71e:	232f      	movs	r3, #47	; 0x2f
    c720:	18fc      	adds	r4, r7, r3
    c722:	2320      	movs	r3, #32
    c724:	9301      	str	r3, [sp, #4]
    c726:	230c      	movs	r3, #12
    c728:	18fb      	adds	r3, r7, r3
    c72a:	9300      	str	r3, [sp, #0]
    c72c:	2300      	movs	r3, #0
    c72e:	2200      	movs	r2, #0
    c730:	2100      	movs	r1, #0
    c732:	2000      	movs	r0, #0
    c734:	4d10      	ldr	r5, [pc, #64]	; (c778 <atcab_read_serial_number+0x74>)
    c736:	47a8      	blx	r5
    c738:	0003      	movs	r3, r0
    c73a:	7023      	strb	r3, [r4, #0]
    c73c:	232f      	movs	r3, #47	; 0x2f
    c73e:	18fb      	adds	r3, r7, r3
    c740:	781b      	ldrb	r3, [r3, #0]
    c742:	2b00      	cmp	r3, #0
    c744:	d110      	bne.n	c768 <atcab_read_serial_number+0x64>
            break;
        memcpy(&serial_number[0], &read_buf[0], 4);
    c746:	230c      	movs	r3, #12
    c748:	18f9      	adds	r1, r7, r3
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	2204      	movs	r2, #4
    c74e:	0018      	movs	r0, r3
    c750:	4b0a      	ldr	r3, [pc, #40]	; (c77c <atcab_read_serial_number+0x78>)
    c752:	4798      	blx	r3
        memcpy(&serial_number[4], &read_buf[8], 5);
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	1d18      	adds	r0, r3, #4
    c758:	230c      	movs	r3, #12
    c75a:	18fb      	adds	r3, r7, r3
    c75c:	3308      	adds	r3, #8
    c75e:	2205      	movs	r2, #5
    c760:	0019      	movs	r1, r3
    c762:	4b06      	ldr	r3, [pc, #24]	; (c77c <atcab_read_serial_number+0x78>)
    c764:	4798      	blx	r3
    c766:	e000      	b.n	c76a <atcab_read_serial_number+0x66>
            break;
    c768:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
    c76a:	232f      	movs	r3, #47	; 0x2f
    c76c:	18fb      	adds	r3, r7, r3
    c76e:	781b      	ldrb	r3, [r3, #0]
}
    c770:	0018      	movs	r0, r3
    c772:	46bd      	mov	sp, r7
    c774:	b00c      	add	sp, #48	; 0x30
    c776:	bdb0      	pop	{r4, r5, r7, pc}
    c778:	0000cd85 	.word	0x0000cd85
    c77c:	00019e6b 	.word	0x00019e6b

0000c780 <atcab_verify>:
 *                        other modes.
 *
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_verify(uint8_t mode, uint16_t key_id, const uint8_t* signature, const uint8_t* public_key, const uint8_t* other_data)
{
    c780:	b590      	push	{r4, r7, lr}
    c782:	b0a9      	sub	sp, #164	; 0xa4
    c784:	af00      	add	r7, sp, #0
    c786:	60ba      	str	r2, [r7, #8]
    c788:	607b      	str	r3, [r7, #4]
    c78a:	230f      	movs	r3, #15
    c78c:	18fb      	adds	r3, r7, r3
    c78e:	1c02      	adds	r2, r0, #0
    c790:	701a      	strb	r2, [r3, #0]
    c792:	230c      	movs	r3, #12
    c794:	18fb      	adds	r3, r7, r3
    c796:	1c0a      	adds	r2, r1, #0
    c798:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c79a:	239f      	movs	r3, #159	; 0x9f
    c79c:	18fb      	adds	r3, r7, r3
    c79e:	22e1      	movs	r2, #225	; 0xe1
    c7a0:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    c7a2:	239c      	movs	r3, #156	; 0x9c
    c7a4:	18fb      	adds	r3, r7, r3
    c7a6:	2200      	movs	r2, #0
    c7a8:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    c7aa:	4b6c      	ldr	r3, [pc, #432]	; (c95c <atcab_verify+0x1dc>)
    c7ac:	681b      	ldr	r3, [r3, #0]
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d101      	bne.n	c7b6 <atcab_verify+0x36>
        return ATCA_GEN_FAIL;
    c7b2:	23e1      	movs	r3, #225	; 0xe1
    c7b4:	e0cd      	b.n	c952 <atcab_verify+0x1d2>

    do
    {
        if (signature == NULL)
    c7b6:	68bb      	ldr	r3, [r7, #8]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d101      	bne.n	c7c0 <atcab_verify+0x40>
            return ATCA_BAD_PARAM;
    c7bc:	23e2      	movs	r3, #226	; 0xe2
    c7be:	e0c8      	b.n	c952 <atcab_verify+0x1d2>
        if (mode == VERIFY_MODE_EXTERNAL && public_key == NULL)
    c7c0:	230f      	movs	r3, #15
    c7c2:	18fb      	adds	r3, r7, r3
    c7c4:	781b      	ldrb	r3, [r3, #0]
    c7c6:	2b02      	cmp	r3, #2
    c7c8:	d104      	bne.n	c7d4 <atcab_verify+0x54>
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	2b00      	cmp	r3, #0
    c7ce:	d101      	bne.n	c7d4 <atcab_verify+0x54>
            return ATCA_BAD_PARAM;
    c7d0:	23e2      	movs	r3, #226	; 0xe2
    c7d2:	e0be      	b.n	c952 <atcab_verify+0x1d2>
        if (mode == VERIFY_MODE_VALIDATE && other_data == NULL)
    c7d4:	230f      	movs	r3, #15
    c7d6:	18fb      	adds	r3, r7, r3
    c7d8:	781b      	ldrb	r3, [r3, #0]
    c7da:	2b03      	cmp	r3, #3
    c7dc:	d106      	bne.n	c7ec <atcab_verify+0x6c>
    c7de:	23b0      	movs	r3, #176	; 0xb0
    c7e0:	18fb      	adds	r3, r7, r3
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d101      	bne.n	c7ec <atcab_verify+0x6c>
            return ATCA_BAD_PARAM;
    c7e8:	23e2      	movs	r3, #226	; 0xe2
    c7ea:	e0b2      	b.n	c952 <atcab_verify+0x1d2>

        // Build the verify command
        packet.param1 = mode;
    c7ec:	2310      	movs	r3, #16
    c7ee:	18fb      	adds	r3, r7, r3
    c7f0:	220f      	movs	r2, #15
    c7f2:	18ba      	adds	r2, r7, r2
    c7f4:	7812      	ldrb	r2, [r2, #0]
    c7f6:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    c7f8:	2310      	movs	r3, #16
    c7fa:	18fb      	adds	r3, r7, r3
    c7fc:	220c      	movs	r2, #12
    c7fe:	18ba      	adds	r2, r7, r2
    c800:	8812      	ldrh	r2, [r2, #0]
    c802:	809a      	strh	r2, [r3, #4]
        memcpy(&packet.data[0], signature, ATCA_SIG_SIZE);
    c804:	68b9      	ldr	r1, [r7, #8]
    c806:	2310      	movs	r3, #16
    c808:	18fb      	adds	r3, r7, r3
    c80a:	3306      	adds	r3, #6
    c80c:	2240      	movs	r2, #64	; 0x40
    c80e:	0018      	movs	r0, r3
    c810:	4b53      	ldr	r3, [pc, #332]	; (c960 <atcab_verify+0x1e0>)
    c812:	4798      	blx	r3
        if (mode == VERIFY_MODE_EXTERNAL)
    c814:	230f      	movs	r3, #15
    c816:	18fb      	adds	r3, r7, r3
    c818:	781b      	ldrb	r3, [r3, #0]
    c81a:	2b02      	cmp	r3, #2
    c81c:	d108      	bne.n	c830 <atcab_verify+0xb0>
            memcpy(&packet.data[ATCA_SIG_SIZE], public_key, ATCA_PUB_KEY_SIZE);
    c81e:	6879      	ldr	r1, [r7, #4]
    c820:	2310      	movs	r3, #16
    c822:	18fb      	adds	r3, r7, r3
    c824:	3346      	adds	r3, #70	; 0x46
    c826:	2240      	movs	r2, #64	; 0x40
    c828:	0018      	movs	r0, r3
    c82a:	4b4d      	ldr	r3, [pc, #308]	; (c960 <atcab_verify+0x1e0>)
    c82c:	4798      	blx	r3
    c82e:	e00e      	b.n	c84e <atcab_verify+0xce>
        else if (other_data)
    c830:	23b0      	movs	r3, #176	; 0xb0
    c832:	18fb      	adds	r3, r7, r3
    c834:	681b      	ldr	r3, [r3, #0]
    c836:	2b00      	cmp	r3, #0
    c838:	d009      	beq.n	c84e <atcab_verify+0xce>
            memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);
    c83a:	23b0      	movs	r3, #176	; 0xb0
    c83c:	18fb      	adds	r3, r7, r3
    c83e:	6819      	ldr	r1, [r3, #0]
    c840:	2310      	movs	r3, #16
    c842:	18fb      	adds	r3, r7, r3
    c844:	3346      	adds	r3, #70	; 0x46
    c846:	2213      	movs	r2, #19
    c848:	0018      	movs	r0, r3
    c84a:	4b45      	ldr	r3, [pc, #276]	; (c960 <atcab_verify+0x1e0>)
    c84c:	4798      	blx	r3

        if ( (status = atVerify(_gCommandObj, &packet)) != ATCA_SUCCESS)
    c84e:	4b45      	ldr	r3, [pc, #276]	; (c964 <atcab_verify+0x1e4>)
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	229f      	movs	r2, #159	; 0x9f
    c854:	18bc      	adds	r4, r7, r2
    c856:	2210      	movs	r2, #16
    c858:	18ba      	adds	r2, r7, r2
    c85a:	0011      	movs	r1, r2
    c85c:	0018      	movs	r0, r3
    c85e:	4b42      	ldr	r3, [pc, #264]	; (c968 <atcab_verify+0x1e8>)
    c860:	4798      	blx	r3
    c862:	0003      	movs	r3, r0
    c864:	7023      	strb	r3, [r4, #0]
    c866:	239f      	movs	r3, #159	; 0x9f
    c868:	18fb      	adds	r3, r7, r3
    c86a:	781b      	ldrb	r3, [r3, #0]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d164      	bne.n	c93a <atcab_verify+0x1ba>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_VERIFY);
    c870:	4b3c      	ldr	r3, [pc, #240]	; (c964 <atcab_verify+0x1e4>)
    c872:	681b      	ldr	r3, [r3, #0]
    c874:	229c      	movs	r2, #156	; 0x9c
    c876:	18bc      	adds	r4, r7, r2
    c878:	2113      	movs	r1, #19
    c87a:	0018      	movs	r0, r3
    c87c:	4b3b      	ldr	r3, [pc, #236]	; (c96c <atcab_verify+0x1ec>)
    c87e:	4798      	blx	r3
    c880:	0003      	movs	r3, r0
    c882:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    c884:	239f      	movs	r3, #159	; 0x9f
    c886:	18fc      	adds	r4, r7, r3
    c888:	4b39      	ldr	r3, [pc, #228]	; (c970 <atcab_verify+0x1f0>)
    c88a:	4798      	blx	r3
    c88c:	0003      	movs	r3, r0
    c88e:	7023      	strb	r3, [r4, #0]
    c890:	239f      	movs	r3, #159	; 0x9f
    c892:	18fb      	adds	r3, r7, r3
    c894:	781b      	ldrb	r3, [r3, #0]
    c896:	2b00      	cmp	r3, #0
    c898:	d151      	bne.n	c93e <atcab_verify+0x1be>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    c89a:	4b36      	ldr	r3, [pc, #216]	; (c974 <atcab_verify+0x1f4>)
    c89c:	6818      	ldr	r0, [r3, #0]
    c89e:	2310      	movs	r3, #16
    c8a0:	18fb      	adds	r3, r7, r3
    c8a2:	785b      	ldrb	r3, [r3, #1]
    c8a4:	001a      	movs	r2, r3
    c8a6:	239f      	movs	r3, #159	; 0x9f
    c8a8:	18fc      	adds	r4, r7, r3
    c8aa:	2310      	movs	r3, #16
    c8ac:	18fb      	adds	r3, r7, r3
    c8ae:	0019      	movs	r1, r3
    c8b0:	4b31      	ldr	r3, [pc, #196]	; (c978 <atcab_verify+0x1f8>)
    c8b2:	4798      	blx	r3
    c8b4:	0003      	movs	r3, r0
    c8b6:	7023      	strb	r3, [r4, #0]
    c8b8:	239f      	movs	r3, #159	; 0x9f
    c8ba:	18fb      	adds	r3, r7, r3
    c8bc:	781b      	ldrb	r3, [r3, #0]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d13f      	bne.n	c942 <atcab_verify+0x1c2>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    c8c2:	239c      	movs	r3, #156	; 0x9c
    c8c4:	18fb      	adds	r3, r7, r3
    c8c6:	881b      	ldrh	r3, [r3, #0]
    c8c8:	0018      	movs	r0, r3
    c8ca:	4b2c      	ldr	r3, [pc, #176]	; (c97c <atcab_verify+0x1fc>)
    c8cc:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    c8ce:	4b29      	ldr	r3, [pc, #164]	; (c974 <atcab_verify+0x1f4>)
    c8d0:	6818      	ldr	r0, [r3, #0]
    c8d2:	239f      	movs	r3, #159	; 0x9f
    c8d4:	18fc      	adds	r4, r7, r3
    c8d6:	2310      	movs	r3, #16
    c8d8:	18fb      	adds	r3, r7, r3
    c8da:	338a      	adds	r3, #138	; 0x8a
    c8dc:	001a      	movs	r2, r3
    c8de:	2310      	movs	r3, #16
    c8e0:	18fb      	adds	r3, r7, r3
    c8e2:	3306      	adds	r3, #6
    c8e4:	0019      	movs	r1, r3
    c8e6:	4b26      	ldr	r3, [pc, #152]	; (c980 <atcab_verify+0x200>)
    c8e8:	4798      	blx	r3
    c8ea:	0003      	movs	r3, r0
    c8ec:	7023      	strb	r3, [r4, #0]
    c8ee:	239f      	movs	r3, #159	; 0x9f
    c8f0:	18fb      	adds	r3, r7, r3
    c8f2:	781b      	ldrb	r3, [r3, #0]
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d126      	bne.n	c946 <atcab_verify+0x1c6>
            break;

        // Check response size
        if (packet.rxsize < 4)
    c8f8:	2310      	movs	r3, #16
    c8fa:	18fb      	adds	r3, r7, r3
    c8fc:	228a      	movs	r2, #138	; 0x8a
    c8fe:	5a9b      	ldrh	r3, [r3, r2]
    c900:	2b03      	cmp	r3, #3
    c902:	d80f      	bhi.n	c924 <atcab_verify+0x1a4>
        {
            if (packet.rxsize > 0)
    c904:	2310      	movs	r3, #16
    c906:	18fb      	adds	r3, r7, r3
    c908:	228a      	movs	r2, #138	; 0x8a
    c90a:	5a9b      	ldrh	r3, [r3, r2]
    c90c:	2b00      	cmp	r3, #0
    c90e:	d004      	beq.n	c91a <atcab_verify+0x19a>
                status = ATCA_RX_FAIL;
    c910:	239f      	movs	r3, #159	; 0x9f
    c912:	18fb      	adds	r3, r7, r3
    c914:	22e6      	movs	r2, #230	; 0xe6
    c916:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    c918:	e016      	b.n	c948 <atcab_verify+0x1c8>
                status = ATCA_RX_NO_RESPONSE;
    c91a:	239f      	movs	r3, #159	; 0x9f
    c91c:	18fb      	adds	r3, r7, r3
    c91e:	22e7      	movs	r2, #231	; 0xe7
    c920:	701a      	strb	r2, [r3, #0]
            break;
    c922:	e011      	b.n	c948 <atcab_verify+0x1c8>
        }

        status = isATCAError(packet.data);
    c924:	239f      	movs	r3, #159	; 0x9f
    c926:	18fc      	adds	r4, r7, r3
    c928:	2310      	movs	r3, #16
    c92a:	18fb      	adds	r3, r7, r3
    c92c:	3306      	adds	r3, #6
    c92e:	0018      	movs	r0, r3
    c930:	4b14      	ldr	r3, [pc, #80]	; (c984 <atcab_verify+0x204>)
    c932:	4798      	blx	r3
    c934:	0003      	movs	r3, r0
    c936:	7023      	strb	r3, [r4, #0]
    c938:	e006      	b.n	c948 <atcab_verify+0x1c8>
            break;
    c93a:	46c0      	nop			; (mov r8, r8)
    c93c:	e004      	b.n	c948 <atcab_verify+0x1c8>
            break;
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	e002      	b.n	c948 <atcab_verify+0x1c8>
            break;
    c942:	46c0      	nop			; (mov r8, r8)
    c944:	e000      	b.n	c948 <atcab_verify+0x1c8>
            break;
    c946:	46c0      	nop			; (mov r8, r8)
    }
    while (false);

    _atcab_exit();
    c948:	4b0f      	ldr	r3, [pc, #60]	; (c988 <atcab_verify+0x208>)
    c94a:	4798      	blx	r3
    return status;
    c94c:	239f      	movs	r3, #159	; 0x9f
    c94e:	18fb      	adds	r3, r7, r3
    c950:	781b      	ldrb	r3, [r3, #0]
}
    c952:	0018      	movs	r0, r3
    c954:	46bd      	mov	sp, r7
    c956:	b029      	add	sp, #164	; 0xa4
    c958:	bd90      	pop	{r4, r7, pc}
    c95a:	46c0      	nop			; (mov r8, r8)
    c95c:	200006f8 	.word	0x200006f8
    c960:	00019e6b 	.word	0x00019e6b
    c964:	200006fc 	.word	0x200006fc
    c968:	0000b891 	.word	0x0000b891
    c96c:	0000b969 	.word	0x0000b969
    c970:	0000bf79 	.word	0x0000bf79
    c974:	20000700 	.word	0x20000700
    c978:	0000bd4d 	.word	0x0000bd4d
    c97c:	0000dc25 	.word	0x0000dc25
    c980:	0000bd6f 	.word	0x0000bd6f
    c984:	0000bb29 	.word	0x0000bb29
    c988:	0000c009 	.word	0x0000c009

0000c98c <atcab_verify_extern>:
 *
 * \return ATCA_SUCCESS on verification success or failure, because the
 *         command still completed successfully.
 */
ATCA_STATUS atcab_verify_extern(const uint8_t *message, const uint8_t *signature, const uint8_t *public_key, bool *is_verified)
{
    c98c:	b5b0      	push	{r4, r5, r7, lr}
    c98e:	b088      	sub	sp, #32
    c990:	af02      	add	r7, sp, #8
    c992:	60f8      	str	r0, [r7, #12]
    c994:	60b9      	str	r1, [r7, #8]
    c996:	607a      	str	r2, [r7, #4]
    c998:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    c99a:	2317      	movs	r3, #23
    c99c:	18fb      	adds	r3, r7, r3
    c99e:	22e1      	movs	r2, #225	; 0xe1
    c9a0:	701a      	strb	r2, [r3, #0]

    if (signature == NULL || message == NULL || public_key == NULL || is_verified == NULL)
    c9a2:	68bb      	ldr	r3, [r7, #8]
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d008      	beq.n	c9ba <atcab_verify_extern+0x2e>
    c9a8:	68fb      	ldr	r3, [r7, #12]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d005      	beq.n	c9ba <atcab_verify_extern+0x2e>
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	d002      	beq.n	c9ba <atcab_verify_extern+0x2e>
    c9b4:	683b      	ldr	r3, [r7, #0]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d101      	bne.n	c9be <atcab_verify_extern+0x32>
        return ATCA_BAD_PARAM;
    c9ba:	23e2      	movs	r3, #226	; 0xe2
    c9bc:	e031      	b.n	ca22 <atcab_verify_extern+0x96>

    do
    {
        // nonce passthrough
        if ( (status = atcab_challenge(message)) != ATCA_SUCCESS)
    c9be:	2317      	movs	r3, #23
    c9c0:	18fc      	adds	r4, r7, r3
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	0018      	movs	r0, r3
    c9c6:	4b19      	ldr	r3, [pc, #100]	; (ca2c <atcab_verify_extern+0xa0>)
    c9c8:	4798      	blx	r3
    c9ca:	0003      	movs	r3, r0
    c9cc:	7023      	strb	r3, [r4, #0]
    c9ce:	2317      	movs	r3, #23
    c9d0:	18fb      	adds	r3, r7, r3
    c9d2:	781b      	ldrb	r3, [r3, #0]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d11e      	bne.n	ca16 <atcab_verify_extern+0x8a>
            break;

        status = atcab_verify(VERIFY_MODE_EXTERNAL, VERIFY_KEY_P256, signature, public_key, NULL);
    c9d8:	2317      	movs	r3, #23
    c9da:	18fc      	adds	r4, r7, r3
    c9dc:	6879      	ldr	r1, [r7, #4]
    c9de:	68ba      	ldr	r2, [r7, #8]
    c9e0:	2300      	movs	r3, #0
    c9e2:	9300      	str	r3, [sp, #0]
    c9e4:	000b      	movs	r3, r1
    c9e6:	2104      	movs	r1, #4
    c9e8:	2002      	movs	r0, #2
    c9ea:	4d11      	ldr	r5, [pc, #68]	; (ca30 <atcab_verify_extern+0xa4>)
    c9ec:	47a8      	blx	r5
    c9ee:	0003      	movs	r3, r0
    c9f0:	7023      	strb	r3, [r4, #0]
        *is_verified = (status == ATCA_SUCCESS);
    c9f2:	2317      	movs	r3, #23
    c9f4:	18fb      	adds	r3, r7, r3
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	425a      	negs	r2, r3
    c9fa:	4153      	adcs	r3, r2
    c9fc:	b2da      	uxtb	r2, r3
    c9fe:	683b      	ldr	r3, [r7, #0]
    ca00:	701a      	strb	r2, [r3, #0]
        if (status == ATCA_CHECKMAC_VERIFY_FAILED)
    ca02:	2317      	movs	r3, #23
    ca04:	18fb      	adds	r3, r7, r3
    ca06:	781b      	ldrb	r3, [r3, #0]
    ca08:	2bd1      	cmp	r3, #209	; 0xd1
    ca0a:	d105      	bne.n	ca18 <atcab_verify_extern+0x8c>
            status = ATCA_SUCCESS;  // Verify failed, but command succeeded
    ca0c:	2317      	movs	r3, #23
    ca0e:	18fb      	adds	r3, r7, r3
    ca10:	2200      	movs	r2, #0
    ca12:	701a      	strb	r2, [r3, #0]
    ca14:	e000      	b.n	ca18 <atcab_verify_extern+0x8c>
            break;
    ca16:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    ca18:	4b06      	ldr	r3, [pc, #24]	; (ca34 <atcab_verify_extern+0xa8>)
    ca1a:	4798      	blx	r3
    return status;
    ca1c:	2317      	movs	r3, #23
    ca1e:	18fb      	adds	r3, r7, r3
    ca20:	781b      	ldrb	r3, [r3, #0]
}
    ca22:	0018      	movs	r0, r3
    ca24:	46bd      	mov	sp, r7
    ca26:	b006      	add	sp, #24
    ca28:	bdb0      	pop	{r4, r5, r7, pc}
    ca2a:	46c0      	nop			; (mov r8, r8)
    ca2c:	0000c585 	.word	0x0000c585
    ca30:	0000c781 	.word	0x0000c781
    ca34:	0000c009 	.word	0x0000c009

0000ca38 <atcab_ecdh>:
 *                        32 bytes.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_ecdh(uint16_t key_id, const uint8_t* pubkey, uint8_t* pms)
{
    ca38:	b590      	push	{r4, r7, lr}
    ca3a:	b0a9      	sub	sp, #164	; 0xa4
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	60b9      	str	r1, [r7, #8]
    ca40:	607a      	str	r2, [r7, #4]
    ca42:	230e      	movs	r3, #14
    ca44:	18fb      	adds	r3, r7, r3
    ca46:	1c02      	adds	r2, r0, #0
    ca48:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status;
    ATCAPacket packet;
    uint16_t execution_time = 0;
    ca4a:	239c      	movs	r3, #156	; 0x9c
    ca4c:	18fb      	adds	r3, r7, r3
    ca4e:	2200      	movs	r2, #0
    ca50:	801a      	strh	r2, [r3, #0]

    do
    {
        if (pubkey == NULL || pms == NULL)
    ca52:	68bb      	ldr	r3, [r7, #8]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d002      	beq.n	ca5e <atcab_ecdh+0x26>
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d104      	bne.n	ca68 <atcab_ecdh+0x30>
        {
            status = ATCA_BAD_PARAM;
    ca5e:	239f      	movs	r3, #159	; 0x9f
    ca60:	18fb      	adds	r3, r7, r3
    ca62:	22e2      	movs	r2, #226	; 0xe2
    ca64:	701a      	strb	r2, [r3, #0]
            break;
    ca66:	e0a4      	b.n	cbb2 <atcab_ecdh+0x17a>
        }
        memset(pms, 0, ATCA_KEY_SIZE);
    ca68:	687b      	ldr	r3, [r7, #4]
    ca6a:	2220      	movs	r2, #32
    ca6c:	2100      	movs	r1, #0
    ca6e:	0018      	movs	r0, r3
    ca70:	4b54      	ldr	r3, [pc, #336]	; (cbc4 <atcab_ecdh+0x18c>)
    ca72:	4798      	blx	r3

        // build a ecdh command
        packet.param1 = ECDH_PREFIX_MODE;
    ca74:	2310      	movs	r3, #16
    ca76:	18fb      	adds	r3, r7, r3
    ca78:	2200      	movs	r2, #0
    ca7a:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    ca7c:	2310      	movs	r3, #16
    ca7e:	18fb      	adds	r3, r7, r3
    ca80:	220e      	movs	r2, #14
    ca82:	18ba      	adds	r2, r7, r2
    ca84:	8812      	ldrh	r2, [r2, #0]
    ca86:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, pubkey, ATCA_PUB_KEY_SIZE);
    ca88:	68b9      	ldr	r1, [r7, #8]
    ca8a:	2310      	movs	r3, #16
    ca8c:	18fb      	adds	r3, r7, r3
    ca8e:	3306      	adds	r3, #6
    ca90:	2240      	movs	r2, #64	; 0x40
    ca92:	0018      	movs	r0, r3
    ca94:	4b4c      	ldr	r3, [pc, #304]	; (cbc8 <atcab_ecdh+0x190>)
    ca96:	4798      	blx	r3

        if ( (status = atECDH(_gCommandObj, &packet)) != ATCA_SUCCESS)
    ca98:	4b4c      	ldr	r3, [pc, #304]	; (cbcc <atcab_ecdh+0x194>)
    ca9a:	681b      	ldr	r3, [r3, #0]
    ca9c:	229f      	movs	r2, #159	; 0x9f
    ca9e:	18bc      	adds	r4, r7, r2
    caa0:	2210      	movs	r2, #16
    caa2:	18ba      	adds	r2, r7, r2
    caa4:	0011      	movs	r1, r2
    caa6:	0018      	movs	r0, r3
    caa8:	4b49      	ldr	r3, [pc, #292]	; (cbd0 <atcab_ecdh+0x198>)
    caaa:	4798      	blx	r3
    caac:	0003      	movs	r3, r0
    caae:	7023      	strb	r3, [r4, #0]
    cab0:	239f      	movs	r3, #159	; 0x9f
    cab2:	18fb      	adds	r3, r7, r3
    cab4:	781b      	ldrb	r3, [r3, #0]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d000      	beq.n	cabc <atcab_ecdh+0x84>
    caba:	e071      	b.n	cba0 <atcab_ecdh+0x168>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_ECDH);
    cabc:	4b43      	ldr	r3, [pc, #268]	; (cbcc <atcab_ecdh+0x194>)
    cabe:	681b      	ldr	r3, [r3, #0]
    cac0:	229c      	movs	r2, #156	; 0x9c
    cac2:	18bc      	adds	r4, r7, r2
    cac4:	2104      	movs	r1, #4
    cac6:	0018      	movs	r0, r3
    cac8:	4b42      	ldr	r3, [pc, #264]	; (cbd4 <atcab_ecdh+0x19c>)
    caca:	4798      	blx	r3
    cacc:	0003      	movs	r3, r0
    cace:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    cad0:	239f      	movs	r3, #159	; 0x9f
    cad2:	18fc      	adds	r4, r7, r3
    cad4:	4b40      	ldr	r3, [pc, #256]	; (cbd8 <atcab_ecdh+0x1a0>)
    cad6:	4798      	blx	r3
    cad8:	0003      	movs	r3, r0
    cada:	7023      	strb	r3, [r4, #0]
    cadc:	239f      	movs	r3, #159	; 0x9f
    cade:	18fb      	adds	r3, r7, r3
    cae0:	781b      	ldrb	r3, [r3, #0]
    cae2:	2b00      	cmp	r3, #0
    cae4:	d15e      	bne.n	cba4 <atcab_ecdh+0x16c>
            break;

        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    cae6:	4b3d      	ldr	r3, [pc, #244]	; (cbdc <atcab_ecdh+0x1a4>)
    cae8:	6818      	ldr	r0, [r3, #0]
    caea:	2310      	movs	r3, #16
    caec:	18fb      	adds	r3, r7, r3
    caee:	785b      	ldrb	r3, [r3, #1]
    caf0:	001a      	movs	r2, r3
    caf2:	239f      	movs	r3, #159	; 0x9f
    caf4:	18fc      	adds	r4, r7, r3
    caf6:	2310      	movs	r3, #16
    caf8:	18fb      	adds	r3, r7, r3
    cafa:	0019      	movs	r1, r3
    cafc:	4b38      	ldr	r3, [pc, #224]	; (cbe0 <atcab_ecdh+0x1a8>)
    cafe:	4798      	blx	r3
    cb00:	0003      	movs	r3, r0
    cb02:	7023      	strb	r3, [r4, #0]
    cb04:	239f      	movs	r3, #159	; 0x9f
    cb06:	18fb      	adds	r3, r7, r3
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d14c      	bne.n	cba8 <atcab_ecdh+0x170>
            break;

        atca_delay_ms(execution_time);
    cb0e:	239c      	movs	r3, #156	; 0x9c
    cb10:	18fb      	adds	r3, r7, r3
    cb12:	881b      	ldrh	r3, [r3, #0]
    cb14:	0018      	movs	r0, r3
    cb16:	4b33      	ldr	r3, [pc, #204]	; (cbe4 <atcab_ecdh+0x1ac>)
    cb18:	4798      	blx	r3

        if ((status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    cb1a:	4b30      	ldr	r3, [pc, #192]	; (cbdc <atcab_ecdh+0x1a4>)
    cb1c:	6818      	ldr	r0, [r3, #0]
    cb1e:	239f      	movs	r3, #159	; 0x9f
    cb20:	18fc      	adds	r4, r7, r3
    cb22:	2310      	movs	r3, #16
    cb24:	18fb      	adds	r3, r7, r3
    cb26:	338a      	adds	r3, #138	; 0x8a
    cb28:	001a      	movs	r2, r3
    cb2a:	2310      	movs	r3, #16
    cb2c:	18fb      	adds	r3, r7, r3
    cb2e:	3306      	adds	r3, #6
    cb30:	0019      	movs	r1, r3
    cb32:	4b2d      	ldr	r3, [pc, #180]	; (cbe8 <atcab_ecdh+0x1b0>)
    cb34:	4798      	blx	r3
    cb36:	0003      	movs	r3, r0
    cb38:	7023      	strb	r3, [r4, #0]
    cb3a:	239f      	movs	r3, #159	; 0x9f
    cb3c:	18fb      	adds	r3, r7, r3
    cb3e:	781b      	ldrb	r3, [r3, #0]
    cb40:	2b00      	cmp	r3, #0
    cb42:	d133      	bne.n	cbac <atcab_ecdh+0x174>
            break;

        // Check response size
        if (packet.rxsize < 4)
    cb44:	2310      	movs	r3, #16
    cb46:	18fb      	adds	r3, r7, r3
    cb48:	228a      	movs	r2, #138	; 0x8a
    cb4a:	5a9b      	ldrh	r3, [r3, r2]
    cb4c:	2b03      	cmp	r3, #3
    cb4e:	d80f      	bhi.n	cb70 <atcab_ecdh+0x138>
        {
            if (packet.rxsize > 0)
    cb50:	2310      	movs	r3, #16
    cb52:	18fb      	adds	r3, r7, r3
    cb54:	228a      	movs	r2, #138	; 0x8a
    cb56:	5a9b      	ldrh	r3, [r3, r2]
    cb58:	2b00      	cmp	r3, #0
    cb5a:	d004      	beq.n	cb66 <atcab_ecdh+0x12e>
                status = ATCA_RX_FAIL;
    cb5c:	239f      	movs	r3, #159	; 0x9f
    cb5e:	18fb      	adds	r3, r7, r3
    cb60:	22e6      	movs	r2, #230	; 0xe6
    cb62:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    cb64:	e025      	b.n	cbb2 <atcab_ecdh+0x17a>
                status = ATCA_RX_NO_RESPONSE;
    cb66:	239f      	movs	r3, #159	; 0x9f
    cb68:	18fb      	adds	r3, r7, r3
    cb6a:	22e7      	movs	r2, #231	; 0xe7
    cb6c:	701a      	strb	r2, [r3, #0]
            break;
    cb6e:	e020      	b.n	cbb2 <atcab_ecdh+0x17a>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    cb70:	239f      	movs	r3, #159	; 0x9f
    cb72:	18fc      	adds	r4, r7, r3
    cb74:	2310      	movs	r3, #16
    cb76:	18fb      	adds	r3, r7, r3
    cb78:	3306      	adds	r3, #6
    cb7a:	0018      	movs	r0, r3
    cb7c:	4b1b      	ldr	r3, [pc, #108]	; (cbec <atcab_ecdh+0x1b4>)
    cb7e:	4798      	blx	r3
    cb80:	0003      	movs	r3, r0
    cb82:	7023      	strb	r3, [r4, #0]
    cb84:	239f      	movs	r3, #159	; 0x9f
    cb86:	18fb      	adds	r3, r7, r3
    cb88:	781b      	ldrb	r3, [r3, #0]
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d110      	bne.n	cbb0 <atcab_ecdh+0x178>
            break;

        // The ECDH command may return a single byte. Then the CRC is copied into indices [1:2]
        memcpy(pms, &packet.data[ATCA_RSP_DATA_IDX], ATCA_KEY_SIZE);
    cb8e:	2310      	movs	r3, #16
    cb90:	18fb      	adds	r3, r7, r3
    cb92:	1dd9      	adds	r1, r3, #7
    cb94:	687b      	ldr	r3, [r7, #4]
    cb96:	2220      	movs	r2, #32
    cb98:	0018      	movs	r0, r3
    cb9a:	4b0b      	ldr	r3, [pc, #44]	; (cbc8 <atcab_ecdh+0x190>)
    cb9c:	4798      	blx	r3
    cb9e:	e008      	b.n	cbb2 <atcab_ecdh+0x17a>
            break;
    cba0:	46c0      	nop			; (mov r8, r8)
    cba2:	e006      	b.n	cbb2 <atcab_ecdh+0x17a>
            break;
    cba4:	46c0      	nop			; (mov r8, r8)
    cba6:	e004      	b.n	cbb2 <atcab_ecdh+0x17a>
            break;
    cba8:	46c0      	nop			; (mov r8, r8)
    cbaa:	e002      	b.n	cbb2 <atcab_ecdh+0x17a>
            break;
    cbac:	46c0      	nop			; (mov r8, r8)
    cbae:	e000      	b.n	cbb2 <atcab_ecdh+0x17a>
            break;
    cbb0:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    _atcab_exit();
    cbb2:	4b0f      	ldr	r3, [pc, #60]	; (cbf0 <atcab_ecdh+0x1b8>)
    cbb4:	4798      	blx	r3
    return status;
    cbb6:	239f      	movs	r3, #159	; 0x9f
    cbb8:	18fb      	adds	r3, r7, r3
    cbba:	781b      	ldrb	r3, [r3, #0]
}
    cbbc:	0018      	movs	r0, r3
    cbbe:	46bd      	mov	sp, r7
    cbc0:	b029      	add	sp, #164	; 0xa4
    cbc2:	bd90      	pop	{r4, r7, pc}
    cbc4:	00019ea1 	.word	0x00019ea1
    cbc8:	00019e6b 	.word	0x00019e6b
    cbcc:	200006fc 	.word	0x200006fc
    cbd0:	0000b6c1 	.word	0x0000b6c1
    cbd4:	0000b969 	.word	0x0000b969
    cbd8:	0000bf79 	.word	0x0000bf79
    cbdc:	20000700 	.word	0x20000700
    cbe0:	0000bd4d 	.word	0x0000bd4d
    cbe4:	0000dc25 	.word	0x0000dc25
    cbe8:	0000bd6f 	.word	0x0000bd6f
    cbec:	0000bb29 	.word	0x0000bb29
    cbf0:	0000c009 	.word	0x0000c009

0000cbf4 <atcab_get_addr>:
 *  \param[in] offset
 *  \param[in] addr
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    cbf4:	b5b0      	push	{r4, r5, r7, lr}
    cbf6:	b084      	sub	sp, #16
    cbf8:	af00      	add	r7, sp, #0
    cbfa:	0005      	movs	r5, r0
    cbfc:	000c      	movs	r4, r1
    cbfe:	0010      	movs	r0, r2
    cc00:	0019      	movs	r1, r3
    cc02:	1dfb      	adds	r3, r7, #7
    cc04:	1c2a      	adds	r2, r5, #0
    cc06:	701a      	strb	r2, [r3, #0]
    cc08:	1d3b      	adds	r3, r7, #4
    cc0a:	1c22      	adds	r2, r4, #0
    cc0c:	801a      	strh	r2, [r3, #0]
    cc0e:	1dbb      	adds	r3, r7, #6
    cc10:	1c02      	adds	r2, r0, #0
    cc12:	701a      	strb	r2, [r3, #0]
    cc14:	1cfb      	adds	r3, r7, #3
    cc16:	1c0a      	adds	r2, r1, #0
    cc18:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    cc1a:	230f      	movs	r3, #15
    cc1c:	18fb      	adds	r3, r7, r3
    cc1e:	2200      	movs	r2, #0
    cc20:	701a      	strb	r2, [r3, #0]
    uint8_t memzone = zone & 0x03;
    cc22:	230e      	movs	r3, #14
    cc24:	18fb      	adds	r3, r7, r3
    cc26:	1dfa      	adds	r2, r7, #7
    cc28:	7812      	ldrb	r2, [r2, #0]
    cc2a:	2103      	movs	r1, #3
    cc2c:	400a      	ands	r2, r1
    cc2e:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
    cc30:	6a3b      	ldr	r3, [r7, #32]
    cc32:	2b00      	cmp	r3, #0
    cc34:	d101      	bne.n	cc3a <atcab_get_addr+0x46>
        return ATCA_BAD_PARAM;
    cc36:	23e2      	movs	r3, #226	; 0xe2
    cc38:	e052      	b.n	cce0 <atcab_get_addr+0xec>
    if ((memzone != ATCA_ZONE_CONFIG) && (memzone != ATCA_ZONE_DATA) && (memzone != ATCA_ZONE_OTP))
    cc3a:	230e      	movs	r3, #14
    cc3c:	18fb      	adds	r3, r7, r3
    cc3e:	781b      	ldrb	r3, [r3, #0]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d00b      	beq.n	cc5c <atcab_get_addr+0x68>
    cc44:	230e      	movs	r3, #14
    cc46:	18fb      	adds	r3, r7, r3
    cc48:	781b      	ldrb	r3, [r3, #0]
    cc4a:	2b02      	cmp	r3, #2
    cc4c:	d006      	beq.n	cc5c <atcab_get_addr+0x68>
    cc4e:	230e      	movs	r3, #14
    cc50:	18fb      	adds	r3, r7, r3
    cc52:	781b      	ldrb	r3, [r3, #0]
    cc54:	2b01      	cmp	r3, #1
    cc56:	d001      	beq.n	cc5c <atcab_get_addr+0x68>
        return ATCA_BAD_PARAM;
    cc58:	23e2      	movs	r3, #226	; 0xe2
    cc5a:	e041      	b.n	cce0 <atcab_get_addr+0xec>
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    cc5c:	6a3b      	ldr	r3, [r7, #32]
    cc5e:	2200      	movs	r2, #0
    cc60:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    cc62:	1cfb      	adds	r3, r7, #3
    cc64:	1cfa      	adds	r2, r7, #3
    cc66:	7812      	ldrb	r2, [r2, #0]
    cc68:	2107      	movs	r1, #7
    cc6a:	400a      	ands	r2, r1
    cc6c:	701a      	strb	r2, [r3, #0]
        if ((memzone == ATCA_ZONE_CONFIG) || (memzone == ATCA_ZONE_OTP))
    cc6e:	230e      	movs	r3, #14
    cc70:	18fb      	adds	r3, r7, r3
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	2b00      	cmp	r3, #0
    cc76:	d004      	beq.n	cc82 <atcab_get_addr+0x8e>
    cc78:	230e      	movs	r3, #14
    cc7a:	18fb      	adds	r3, r7, r3
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	2b01      	cmp	r3, #1
    cc80:	d110      	bne.n	cca4 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
    cc82:	1dbb      	adds	r3, r7, #6
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	b29b      	uxth	r3, r3
    cc88:	00db      	lsls	r3, r3, #3
    cc8a:	b29a      	uxth	r2, r3
    cc8c:	6a3b      	ldr	r3, [r7, #32]
    cc8e:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
    cc90:	6a3b      	ldr	r3, [r7, #32]
    cc92:	881a      	ldrh	r2, [r3, #0]
    cc94:	1cfb      	adds	r3, r7, #3
    cc96:	781b      	ldrb	r3, [r3, #0]
    cc98:	b29b      	uxth	r3, r3
    cc9a:	4313      	orrs	r3, r2
    cc9c:	b29a      	uxth	r2, r3
    cc9e:	6a3b      	ldr	r3, [r7, #32]
    cca0:	801a      	strh	r2, [r3, #0]
    cca2:	e01a      	b.n	ccda <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
    cca4:	1d3b      	adds	r3, r7, #4
    cca6:	881b      	ldrh	r3, [r3, #0]
    cca8:	00db      	lsls	r3, r3, #3
    ccaa:	b29a      	uxth	r2, r3
    ccac:	6a3b      	ldr	r3, [r7, #32]
    ccae:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
    ccb0:	6a3b      	ldr	r3, [r7, #32]
    ccb2:	881a      	ldrh	r2, [r3, #0]
    ccb4:	1cfb      	adds	r3, r7, #3
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	b29b      	uxth	r3, r3
    ccba:	4313      	orrs	r3, r2
    ccbc:	b29a      	uxth	r2, r3
    ccbe:	6a3b      	ldr	r3, [r7, #32]
    ccc0:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
    ccc2:	6a3b      	ldr	r3, [r7, #32]
    ccc4:	881b      	ldrh	r3, [r3, #0]
    ccc6:	b21a      	sxth	r2, r3
    ccc8:	1dbb      	adds	r3, r7, #6
    ccca:	781b      	ldrb	r3, [r3, #0]
    cccc:	021b      	lsls	r3, r3, #8
    ccce:	b21b      	sxth	r3, r3
    ccd0:	4313      	orrs	r3, r2
    ccd2:	b21b      	sxth	r3, r3
    ccd4:	b29a      	uxth	r2, r3
    ccd6:	6a3b      	ldr	r3, [r7, #32]
    ccd8:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
    ccda:	230f      	movs	r3, #15
    ccdc:	18fb      	adds	r3, r7, r3
    ccde:	781b      	ldrb	r3, [r3, #0]
}
    cce0:	0018      	movs	r0, r3
    cce2:	46bd      	mov	sp, r7
    cce4:	b004      	add	sp, #16
    cce6:	bdb0      	pop	{r4, r5, r7, pc}

0000cce8 <atcab_is_locked>:
 *  \param[in]  zone      The zone to query for locked (use LOCK_ZONE_CONFIG or LOCK_ZONE_DATA)
 *  \param[out] is_locked  true if the specified zone is locked
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
    cce8:	b5b0      	push	{r4, r5, r7, lr}
    ccea:	b086      	sub	sp, #24
    ccec:	af02      	add	r7, sp, #8
    ccee:	0002      	movs	r2, r0
    ccf0:	6039      	str	r1, [r7, #0]
    ccf2:	1dfb      	adds	r3, r7, #7
    ccf4:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    ccf6:	230f      	movs	r3, #15
    ccf8:	18fb      	adds	r3, r7, r3
    ccfa:	22e1      	movs	r2, #225	; 0xe1
    ccfc:	701a      	strb	r2, [r3, #0]
    uint8_t data[ATCA_WORD_SIZE];

    do
    {
        if (is_locked == NULL)
    ccfe:	683b      	ldr	r3, [r7, #0]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d101      	bne.n	cd08 <atcab_is_locked+0x20>
            return ATCA_BAD_PARAM;
    cd04:	23e2      	movs	r3, #226	; 0xe2
    cd06:	e037      	b.n	cd78 <atcab_is_locked+0x90>

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ( (ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
    cd08:	230f      	movs	r3, #15
    cd0a:	18fc      	adds	r4, r7, r3
    cd0c:	2304      	movs	r3, #4
    cd0e:	9301      	str	r3, [sp, #4]
    cd10:	2308      	movs	r3, #8
    cd12:	18fb      	adds	r3, r7, r3
    cd14:	9300      	str	r3, [sp, #0]
    cd16:	2305      	movs	r3, #5
    cd18:	2202      	movs	r2, #2
    cd1a:	2100      	movs	r1, #0
    cd1c:	2000      	movs	r0, #0
    cd1e:	4d18      	ldr	r5, [pc, #96]	; (cd80 <atcab_is_locked+0x98>)
    cd20:	47a8      	blx	r5
    cd22:	0003      	movs	r3, r0
    cd24:	7023      	strb	r3, [r4, #0]
    cd26:	230f      	movs	r3, #15
    cd28:	18fb      	adds	r3, r7, r3
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d11f      	bne.n	cd70 <atcab_is_locked+0x88>
            break;

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
    cd30:	1dfb      	adds	r3, r7, #7
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	2b00      	cmp	r3, #0
    cd36:	d002      	beq.n	cd3e <atcab_is_locked+0x56>
    cd38:	2b01      	cmp	r3, #1
    cd3a:	d00a      	beq.n	cd52 <atcab_is_locked+0x6a>
    cd3c:	e013      	b.n	cd66 <atcab_is_locked+0x7e>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
    cd3e:	2308      	movs	r3, #8
    cd40:	18fb      	adds	r3, r7, r3
    cd42:	78db      	ldrb	r3, [r3, #3]
    cd44:	3b55      	subs	r3, #85	; 0x55
    cd46:	1e5a      	subs	r2, r3, #1
    cd48:	4193      	sbcs	r3, r2
    cd4a:	b2da      	uxtb	r2, r3
    cd4c:	683b      	ldr	r3, [r7, #0]
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	e00f      	b.n	cd72 <atcab_is_locked+0x8a>
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
    cd52:	2308      	movs	r3, #8
    cd54:	18fb      	adds	r3, r7, r3
    cd56:	789b      	ldrb	r3, [r3, #2]
    cd58:	3b55      	subs	r3, #85	; 0x55
    cd5a:	1e5a      	subs	r2, r3, #1
    cd5c:	4193      	sbcs	r3, r2
    cd5e:	b2da      	uxtb	r2, r3
    cd60:	683b      	ldr	r3, [r7, #0]
    cd62:	701a      	strb	r2, [r3, #0]
    cd64:	e005      	b.n	cd72 <atcab_is_locked+0x8a>
        default: ret = ATCA_BAD_PARAM; break;
    cd66:	230f      	movs	r3, #15
    cd68:	18fb      	adds	r3, r7, r3
    cd6a:	22e2      	movs	r2, #226	; 0xe2
    cd6c:	701a      	strb	r2, [r3, #0]
    cd6e:	e000      	b.n	cd72 <atcab_is_locked+0x8a>
            break;
    cd70:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return ret;
    cd72:	230f      	movs	r3, #15
    cd74:	18fb      	adds	r3, r7, r3
    cd76:	781b      	ldrb	r3, [r3, #0]
}
    cd78:	0018      	movs	r0, r3
    cd7a:	46bd      	mov	sp, r7
    cd7c:	b004      	add	sp, #16
    cd7e:	bdb0      	pop	{r4, r5, r7, pc}
    cd80:	0000cd85 	.word	0x0000cd85

0000cd84 <atcab_read_zone>:
 *  \param[in] data
 *  \param[in] len  Must be either 4 or 32
 *  returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    cd84:	b5b0      	push	{r4, r5, r7, lr}
    cd86:	b0aa      	sub	sp, #168	; 0xa8
    cd88:	af02      	add	r7, sp, #8
    cd8a:	0005      	movs	r5, r0
    cd8c:	000c      	movs	r4, r1
    cd8e:	0010      	movs	r0, r2
    cd90:	0019      	movs	r1, r3
    cd92:	1dfb      	adds	r3, r7, #7
    cd94:	1c2a      	adds	r2, r5, #0
    cd96:	701a      	strb	r2, [r3, #0]
    cd98:	1d3b      	adds	r3, r7, #4
    cd9a:	1c22      	adds	r2, r4, #0
    cd9c:	801a      	strh	r2, [r3, #0]
    cd9e:	1dbb      	adds	r3, r7, #6
    cda0:	1c02      	adds	r2, r0, #0
    cda2:	701a      	strb	r2, [r3, #0]
    cda4:	1cfb      	adds	r3, r7, #3
    cda6:	1c0a      	adds	r2, r1, #0
    cda8:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    cdaa:	239f      	movs	r3, #159	; 0x9f
    cdac:	18fb      	adds	r3, r7, r3
    cdae:	2200      	movs	r2, #0
    cdb0:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t addr;
    uint16_t execution_time = 0;
    cdb2:	239c      	movs	r3, #156	; 0x9c
    cdb4:	18fb      	adds	r3, r7, r3
    cdb6:	2200      	movs	r2, #0
    cdb8:	801a      	strh	r2, [r3, #0]

    do
    {
        // Check the input parameters
        if (data == NULL)
    cdba:	23b0      	movs	r3, #176	; 0xb0
    cdbc:	18fb      	adds	r3, r7, r3
    cdbe:	681b      	ldr	r3, [r3, #0]
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d101      	bne.n	cdc8 <atcab_read_zone+0x44>
            return ATCA_BAD_PARAM;
    cdc4:	23e2      	movs	r3, #226	; 0xe2
    cdc6:	e0d2      	b.n	cf6e <atcab_read_zone+0x1ea>

        if (len != 4 && len != 32)
    cdc8:	23b4      	movs	r3, #180	; 0xb4
    cdca:	18fb      	adds	r3, r7, r3
    cdcc:	781b      	ldrb	r3, [r3, #0]
    cdce:	2b04      	cmp	r3, #4
    cdd0:	d006      	beq.n	cde0 <atcab_read_zone+0x5c>
    cdd2:	23b4      	movs	r3, #180	; 0xb4
    cdd4:	18fb      	adds	r3, r7, r3
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	2b20      	cmp	r3, #32
    cdda:	d001      	beq.n	cde0 <atcab_read_zone+0x5c>
            return ATCA_BAD_PARAM;
    cddc:	23e2      	movs	r3, #226	; 0xe2
    cdde:	e0c6      	b.n	cf6e <atcab_read_zone+0x1ea>

        // The get address function checks the remaining variables
        if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    cde0:	239f      	movs	r3, #159	; 0x9f
    cde2:	18fc      	adds	r4, r7, r3
    cde4:	1cfb      	adds	r3, r7, #3
    cde6:	781d      	ldrb	r5, [r3, #0]
    cde8:	1dbb      	adds	r3, r7, #6
    cdea:	781a      	ldrb	r2, [r3, #0]
    cdec:	1d3b      	adds	r3, r7, #4
    cdee:	8819      	ldrh	r1, [r3, #0]
    cdf0:	1dfb      	adds	r3, r7, #7
    cdf2:	7818      	ldrb	r0, [r3, #0]
    cdf4:	230e      	movs	r3, #14
    cdf6:	18fb      	adds	r3, r7, r3
    cdf8:	9300      	str	r3, [sp, #0]
    cdfa:	002b      	movs	r3, r5
    cdfc:	4d5e      	ldr	r5, [pc, #376]	; (cf78 <atcab_read_zone+0x1f4>)
    cdfe:	47a8      	blx	r5
    ce00:	0003      	movs	r3, r0
    ce02:	7023      	strb	r3, [r4, #0]
    ce04:	239f      	movs	r3, #159	; 0x9f
    ce06:	18fb      	adds	r3, r7, r3
    ce08:	781b      	ldrb	r3, [r3, #0]
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d000      	beq.n	ce10 <atcab_read_zone+0x8c>
    ce0e:	e09e      	b.n	cf4e <atcab_read_zone+0x1ca>
            break;

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
    ce10:	23b4      	movs	r3, #180	; 0xb4
    ce12:	18fb      	adds	r3, r7, r3
    ce14:	781b      	ldrb	r3, [r3, #0]
    ce16:	2b20      	cmp	r3, #32
    ce18:	d106      	bne.n	ce28 <atcab_read_zone+0xa4>
            zone = zone | ATCA_ZONE_READWRITE_32;
    ce1a:	1dfb      	adds	r3, r7, #7
    ce1c:	1dfa      	adds	r2, r7, #7
    ce1e:	7812      	ldrb	r2, [r2, #0]
    ce20:	2180      	movs	r1, #128	; 0x80
    ce22:	4249      	negs	r1, r1
    ce24:	430a      	orrs	r2, r1
    ce26:	701a      	strb	r2, [r3, #0]

        // build a read command
        packet.param1 = zone;
    ce28:	2310      	movs	r3, #16
    ce2a:	18fb      	adds	r3, r7, r3
    ce2c:	1dfa      	adds	r2, r7, #7
    ce2e:	7812      	ldrb	r2, [r2, #0]
    ce30:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
    ce32:	230e      	movs	r3, #14
    ce34:	18fb      	adds	r3, r7, r3
    ce36:	881a      	ldrh	r2, [r3, #0]
    ce38:	2310      	movs	r3, #16
    ce3a:	18fb      	adds	r3, r7, r3
    ce3c:	809a      	strh	r2, [r3, #4]

        if ( (status = atRead(_gCommandObj, &packet)) != ATCA_SUCCESS)
    ce3e:	4b4f      	ldr	r3, [pc, #316]	; (cf7c <atcab_read_zone+0x1f8>)
    ce40:	681b      	ldr	r3, [r3, #0]
    ce42:	229f      	movs	r2, #159	; 0x9f
    ce44:	18bc      	adds	r4, r7, r2
    ce46:	2210      	movs	r2, #16
    ce48:	18ba      	adds	r2, r7, r2
    ce4a:	0011      	movs	r1, r2
    ce4c:	0018      	movs	r0, r3
    ce4e:	4b4c      	ldr	r3, [pc, #304]	; (cf80 <atcab_read_zone+0x1fc>)
    ce50:	4798      	blx	r3
    ce52:	0003      	movs	r3, r0
    ce54:	7023      	strb	r3, [r4, #0]
    ce56:	239f      	movs	r3, #159	; 0x9f
    ce58:	18fb      	adds	r3, r7, r3
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d000      	beq.n	ce62 <atcab_read_zone+0xde>
    ce60:	e077      	b.n	cf52 <atcab_read_zone+0x1ce>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_READMEM);
    ce62:	4b46      	ldr	r3, [pc, #280]	; (cf7c <atcab_read_zone+0x1f8>)
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	229c      	movs	r2, #156	; 0x9c
    ce68:	18bc      	adds	r4, r7, r2
    ce6a:	210f      	movs	r1, #15
    ce6c:	0018      	movs	r0, r3
    ce6e:	4b45      	ldr	r3, [pc, #276]	; (cf84 <atcab_read_zone+0x200>)
    ce70:	4798      	blx	r3
    ce72:	0003      	movs	r3, r0
    ce74:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    ce76:	239f      	movs	r3, #159	; 0x9f
    ce78:	18fc      	adds	r4, r7, r3
    ce7a:	4b43      	ldr	r3, [pc, #268]	; (cf88 <atcab_read_zone+0x204>)
    ce7c:	4798      	blx	r3
    ce7e:	0003      	movs	r3, r0
    ce80:	7023      	strb	r3, [r4, #0]
    ce82:	239f      	movs	r3, #159	; 0x9f
    ce84:	18fb      	adds	r3, r7, r3
    ce86:	781b      	ldrb	r3, [r3, #0]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d164      	bne.n	cf56 <atcab_read_zone+0x1d2>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    ce8c:	4b3f      	ldr	r3, [pc, #252]	; (cf8c <atcab_read_zone+0x208>)
    ce8e:	6818      	ldr	r0, [r3, #0]
    ce90:	2310      	movs	r3, #16
    ce92:	18fb      	adds	r3, r7, r3
    ce94:	785b      	ldrb	r3, [r3, #1]
    ce96:	001a      	movs	r2, r3
    ce98:	239f      	movs	r3, #159	; 0x9f
    ce9a:	18fc      	adds	r4, r7, r3
    ce9c:	2310      	movs	r3, #16
    ce9e:	18fb      	adds	r3, r7, r3
    cea0:	0019      	movs	r1, r3
    cea2:	4b3b      	ldr	r3, [pc, #236]	; (cf90 <atcab_read_zone+0x20c>)
    cea4:	4798      	blx	r3
    cea6:	0003      	movs	r3, r0
    cea8:	7023      	strb	r3, [r4, #0]
    ceaa:	239f      	movs	r3, #159	; 0x9f
    ceac:	18fb      	adds	r3, r7, r3
    ceae:	781b      	ldrb	r3, [r3, #0]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d152      	bne.n	cf5a <atcab_read_zone+0x1d6>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    ceb4:	239c      	movs	r3, #156	; 0x9c
    ceb6:	18fb      	adds	r3, r7, r3
    ceb8:	881b      	ldrh	r3, [r3, #0]
    ceba:	0018      	movs	r0, r3
    cebc:	4b35      	ldr	r3, [pc, #212]	; (cf94 <atcab_read_zone+0x210>)
    cebe:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    cec0:	4b32      	ldr	r3, [pc, #200]	; (cf8c <atcab_read_zone+0x208>)
    cec2:	6818      	ldr	r0, [r3, #0]
    cec4:	239f      	movs	r3, #159	; 0x9f
    cec6:	18fc      	adds	r4, r7, r3
    cec8:	2310      	movs	r3, #16
    ceca:	18fb      	adds	r3, r7, r3
    cecc:	338a      	adds	r3, #138	; 0x8a
    cece:	001a      	movs	r2, r3
    ced0:	2310      	movs	r3, #16
    ced2:	18fb      	adds	r3, r7, r3
    ced4:	3306      	adds	r3, #6
    ced6:	0019      	movs	r1, r3
    ced8:	4b2f      	ldr	r3, [pc, #188]	; (cf98 <atcab_read_zone+0x214>)
    ceda:	4798      	blx	r3
    cedc:	0003      	movs	r3, r0
    cede:	7023      	strb	r3, [r4, #0]
    cee0:	239f      	movs	r3, #159	; 0x9f
    cee2:	18fb      	adds	r3, r7, r3
    cee4:	781b      	ldrb	r3, [r3, #0]
    cee6:	2b00      	cmp	r3, #0
    cee8:	d139      	bne.n	cf5e <atcab_read_zone+0x1da>
            break;

        // Check response size
        if (packet.rxsize < 4)
    ceea:	2310      	movs	r3, #16
    ceec:	18fb      	adds	r3, r7, r3
    ceee:	228a      	movs	r2, #138	; 0x8a
    cef0:	5a9b      	ldrh	r3, [r3, r2]
    cef2:	2b03      	cmp	r3, #3
    cef4:	d80f      	bhi.n	cf16 <atcab_read_zone+0x192>
        {
            if (packet.rxsize > 0)
    cef6:	2310      	movs	r3, #16
    cef8:	18fb      	adds	r3, r7, r3
    cefa:	228a      	movs	r2, #138	; 0x8a
    cefc:	5a9b      	ldrh	r3, [r3, r2]
    cefe:	2b00      	cmp	r3, #0
    cf00:	d004      	beq.n	cf0c <atcab_read_zone+0x188>
                status = ATCA_RX_FAIL;
    cf02:	239f      	movs	r3, #159	; 0x9f
    cf04:	18fb      	adds	r3, r7, r3
    cf06:	22e6      	movs	r2, #230	; 0xe6
    cf08:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    cf0a:	e02b      	b.n	cf64 <atcab_read_zone+0x1e0>
                status = ATCA_RX_NO_RESPONSE;
    cf0c:	239f      	movs	r3, #159	; 0x9f
    cf0e:	18fb      	adds	r3, r7, r3
    cf10:	22e7      	movs	r2, #231	; 0xe7
    cf12:	701a      	strb	r2, [r3, #0]
            break;
    cf14:	e026      	b.n	cf64 <atcab_read_zone+0x1e0>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    cf16:	239f      	movs	r3, #159	; 0x9f
    cf18:	18fc      	adds	r4, r7, r3
    cf1a:	2310      	movs	r3, #16
    cf1c:	18fb      	adds	r3, r7, r3
    cf1e:	3306      	adds	r3, #6
    cf20:	0018      	movs	r0, r3
    cf22:	4b1e      	ldr	r3, [pc, #120]	; (cf9c <atcab_read_zone+0x218>)
    cf24:	4798      	blx	r3
    cf26:	0003      	movs	r3, r0
    cf28:	7023      	strb	r3, [r4, #0]
    cf2a:	239f      	movs	r3, #159	; 0x9f
    cf2c:	18fb      	adds	r3, r7, r3
    cf2e:	781b      	ldrb	r3, [r3, #0]
    cf30:	2b00      	cmp	r3, #0
    cf32:	d116      	bne.n	cf62 <atcab_read_zone+0x1de>
            break;

        memcpy(data, &packet.data[1], len);
    cf34:	23b4      	movs	r3, #180	; 0xb4
    cf36:	18fb      	adds	r3, r7, r3
    cf38:	781a      	ldrb	r2, [r3, #0]
    cf3a:	2310      	movs	r3, #16
    cf3c:	18fb      	adds	r3, r7, r3
    cf3e:	1dd9      	adds	r1, r3, #7
    cf40:	23b0      	movs	r3, #176	; 0xb0
    cf42:	18fb      	adds	r3, r7, r3
    cf44:	681b      	ldr	r3, [r3, #0]
    cf46:	0018      	movs	r0, r3
    cf48:	4b15      	ldr	r3, [pc, #84]	; (cfa0 <atcab_read_zone+0x21c>)
    cf4a:	4798      	blx	r3
    cf4c:	e00a      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	e008      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf52:	46c0      	nop			; (mov r8, r8)
    cf54:	e006      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf56:	46c0      	nop			; (mov r8, r8)
    cf58:	e004      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	e002      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf5e:	46c0      	nop			; (mov r8, r8)
    cf60:	e000      	b.n	cf64 <atcab_read_zone+0x1e0>
            break;
    cf62:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    cf64:	4b0f      	ldr	r3, [pc, #60]	; (cfa4 <atcab_read_zone+0x220>)
    cf66:	4798      	blx	r3
    return status;
    cf68:	239f      	movs	r3, #159	; 0x9f
    cf6a:	18fb      	adds	r3, r7, r3
    cf6c:	781b      	ldrb	r3, [r3, #0]
}
    cf6e:	0018      	movs	r0, r3
    cf70:	46bd      	mov	sp, r7
    cf72:	b028      	add	sp, #160	; 0xa0
    cf74:	bdb0      	pop	{r4, r5, r7, pc}
    cf76:	46c0      	nop			; (mov r8, r8)
    cf78:	0000cbf5 	.word	0x0000cbf5
    cf7c:	200006fc 	.word	0x200006fc
    cf80:	0000b815 	.word	0x0000b815
    cf84:	0000b969 	.word	0x0000b969
    cf88:	0000bf79 	.word	0x0000bf79
    cf8c:	20000700 	.word	0x20000700
    cf90:	0000bd4d 	.word	0x0000bd4d
    cf94:	0000dc25 	.word	0x0000dc25
    cf98:	0000bd6f 	.word	0x0000bd6f
    cf9c:	0000bb29 	.word	0x0000bb29
    cfa0:	00019e6b 	.word	0x00019e6b
    cfa4:	0000c009 	.word	0x0000c009

0000cfa8 <atcab_sign_base>:
 *                          curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    cfa8:	b590      	push	{r4, r7, lr}
    cfaa:	b0a7      	sub	sp, #156	; 0x9c
    cfac:	af00      	add	r7, sp, #0
    cfae:	603a      	str	r2, [r7, #0]
    cfb0:	1dfb      	adds	r3, r7, #7
    cfb2:	1c02      	adds	r2, r0, #0
    cfb4:	701a      	strb	r2, [r3, #0]
    cfb6:	1d3b      	adds	r3, r7, #4
    cfb8:	1c0a      	adds	r2, r1, #0
    cfba:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    cfbc:	2397      	movs	r3, #151	; 0x97
    cfbe:	18fb      	adds	r3, r7, r3
    cfc0:	22e1      	movs	r2, #225	; 0xe1
    cfc2:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    cfc4:	2394      	movs	r3, #148	; 0x94
    cfc6:	18fb      	adds	r3, r7, r3
    cfc8:	2200      	movs	r2, #0
    cfca:	801a      	strh	r2, [r3, #0]

    if (signature == NULL)
    cfcc:	683b      	ldr	r3, [r7, #0]
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d101      	bne.n	cfd6 <atcab_sign_base+0x2e>
        return ATCA_BAD_PARAM;
    cfd2:	23e2      	movs	r3, #226	; 0xe2
    cfd4:	e0a8      	b.n	d128 <atcab_sign_base+0x180>

    if (!_gDevice)
    cfd6:	4b56      	ldr	r3, [pc, #344]	; (d130 <atcab_sign_base+0x188>)
    cfd8:	681b      	ldr	r3, [r3, #0]
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d101      	bne.n	cfe2 <atcab_sign_base+0x3a>
        return ATCA_GEN_FAIL;
    cfde:	23e1      	movs	r3, #225	; 0xe1
    cfe0:	e0a2      	b.n	d128 <atcab_sign_base+0x180>

    do
    {
        // Build sign command
        packet.param1 = mode;
    cfe2:	2308      	movs	r3, #8
    cfe4:	18fb      	adds	r3, r7, r3
    cfe6:	1dfa      	adds	r2, r7, #7
    cfe8:	7812      	ldrb	r2, [r2, #0]
    cfea:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    cfec:	2308      	movs	r3, #8
    cfee:	18fb      	adds	r3, r7, r3
    cff0:	1d3a      	adds	r2, r7, #4
    cff2:	8812      	ldrh	r2, [r2, #0]
    cff4:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(_gCommandObj, &packet)) != ATCA_SUCCESS)
    cff6:	4b4f      	ldr	r3, [pc, #316]	; (d134 <atcab_sign_base+0x18c>)
    cff8:	681b      	ldr	r3, [r3, #0]
    cffa:	2297      	movs	r2, #151	; 0x97
    cffc:	18bc      	adds	r4, r7, r2
    cffe:	2208      	movs	r2, #8
    d000:	18ba      	adds	r2, r7, r2
    d002:	0011      	movs	r1, r2
    d004:	0018      	movs	r0, r3
    d006:	4b4c      	ldr	r3, [pc, #304]	; (d138 <atcab_sign_base+0x190>)
    d008:	4798      	blx	r3
    d00a:	0003      	movs	r3, r0
    d00c:	7023      	strb	r3, [r4, #0]
    d00e:	2397      	movs	r3, #151	; 0x97
    d010:	18fb      	adds	r3, r7, r3
    d012:	781b      	ldrb	r3, [r3, #0]
    d014:	2b00      	cmp	r3, #0
    d016:	d000      	beq.n	d01a <atcab_sign_base+0x72>
    d018:	e078      	b.n	d10c <atcab_sign_base+0x164>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_SIGN);
    d01a:	4b46      	ldr	r3, [pc, #280]	; (d134 <atcab_sign_base+0x18c>)
    d01c:	681b      	ldr	r3, [r3, #0]
    d01e:	2294      	movs	r2, #148	; 0x94
    d020:	18bc      	adds	r4, r7, r2
    d022:	2111      	movs	r1, #17
    d024:	0018      	movs	r0, r3
    d026:	4b45      	ldr	r3, [pc, #276]	; (d13c <atcab_sign_base+0x194>)
    d028:	4798      	blx	r3
    d02a:	0003      	movs	r3, r0
    d02c:	8023      	strh	r3, [r4, #0]

        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    d02e:	4b44      	ldr	r3, [pc, #272]	; (d140 <atcab_sign_base+0x198>)
    d030:	4798      	blx	r3
    d032:	0003      	movs	r3, r0
    d034:	001a      	movs	r2, r3
    d036:	2397      	movs	r3, #151	; 0x97
    d038:	18fb      	adds	r3, r7, r3
    d03a:	781b      	ldrb	r3, [r3, #0]
    d03c:	4293      	cmp	r3, r2
    d03e:	d167      	bne.n	d110 <atcab_sign_base+0x168>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    d040:	4b40      	ldr	r3, [pc, #256]	; (d144 <atcab_sign_base+0x19c>)
    d042:	6818      	ldr	r0, [r3, #0]
    d044:	2308      	movs	r3, #8
    d046:	18fb      	adds	r3, r7, r3
    d048:	785b      	ldrb	r3, [r3, #1]
    d04a:	001a      	movs	r2, r3
    d04c:	2397      	movs	r3, #151	; 0x97
    d04e:	18fc      	adds	r4, r7, r3
    d050:	2308      	movs	r3, #8
    d052:	18fb      	adds	r3, r7, r3
    d054:	0019      	movs	r1, r3
    d056:	4b3c      	ldr	r3, [pc, #240]	; (d148 <atcab_sign_base+0x1a0>)
    d058:	4798      	blx	r3
    d05a:	0003      	movs	r3, r0
    d05c:	7023      	strb	r3, [r4, #0]
    d05e:	2397      	movs	r3, #151	; 0x97
    d060:	18fb      	adds	r3, r7, r3
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	2b00      	cmp	r3, #0
    d066:	d155      	bne.n	d114 <atcab_sign_base+0x16c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    d068:	2394      	movs	r3, #148	; 0x94
    d06a:	18fb      	adds	r3, r7, r3
    d06c:	881b      	ldrh	r3, [r3, #0]
    d06e:	0018      	movs	r0, r3
    d070:	4b36      	ldr	r3, [pc, #216]	; (d14c <atcab_sign_base+0x1a4>)
    d072:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    d074:	4b33      	ldr	r3, [pc, #204]	; (d144 <atcab_sign_base+0x19c>)
    d076:	6818      	ldr	r0, [r3, #0]
    d078:	2397      	movs	r3, #151	; 0x97
    d07a:	18fc      	adds	r4, r7, r3
    d07c:	2308      	movs	r3, #8
    d07e:	18fb      	adds	r3, r7, r3
    d080:	338a      	adds	r3, #138	; 0x8a
    d082:	001a      	movs	r2, r3
    d084:	2308      	movs	r3, #8
    d086:	18fb      	adds	r3, r7, r3
    d088:	3306      	adds	r3, #6
    d08a:	0019      	movs	r1, r3
    d08c:	4b30      	ldr	r3, [pc, #192]	; (d150 <atcab_sign_base+0x1a8>)
    d08e:	4798      	blx	r3
    d090:	0003      	movs	r3, r0
    d092:	7023      	strb	r3, [r4, #0]
    d094:	2397      	movs	r3, #151	; 0x97
    d096:	18fb      	adds	r3, r7, r3
    d098:	781b      	ldrb	r3, [r3, #0]
    d09a:	2b00      	cmp	r3, #0
    d09c:	d13c      	bne.n	d118 <atcab_sign_base+0x170>
            break;

        // Check response size
        if (packet.rxsize < 4)
    d09e:	2308      	movs	r3, #8
    d0a0:	18fb      	adds	r3, r7, r3
    d0a2:	228a      	movs	r2, #138	; 0x8a
    d0a4:	5a9b      	ldrh	r3, [r3, r2]
    d0a6:	2b03      	cmp	r3, #3
    d0a8:	d80f      	bhi.n	d0ca <atcab_sign_base+0x122>
        {
            if (packet.rxsize > 0)
    d0aa:	2308      	movs	r3, #8
    d0ac:	18fb      	adds	r3, r7, r3
    d0ae:	228a      	movs	r2, #138	; 0x8a
    d0b0:	5a9b      	ldrh	r3, [r3, r2]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d004      	beq.n	d0c0 <atcab_sign_base+0x118>
                status = ATCA_RX_FAIL;
    d0b6:	2397      	movs	r3, #151	; 0x97
    d0b8:	18fb      	adds	r3, r7, r3
    d0ba:	22e6      	movs	r2, #230	; 0xe6
    d0bc:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    d0be:	e02e      	b.n	d11e <atcab_sign_base+0x176>
                status = ATCA_RX_NO_RESPONSE;
    d0c0:	2397      	movs	r3, #151	; 0x97
    d0c2:	18fb      	adds	r3, r7, r3
    d0c4:	22e7      	movs	r2, #231	; 0xe7
    d0c6:	701a      	strb	r2, [r3, #0]
            break;
    d0c8:	e029      	b.n	d11e <atcab_sign_base+0x176>
        }

        // check for response
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    d0ca:	2397      	movs	r3, #151	; 0x97
    d0cc:	18fc      	adds	r4, r7, r3
    d0ce:	2308      	movs	r3, #8
    d0d0:	18fb      	adds	r3, r7, r3
    d0d2:	3306      	adds	r3, #6
    d0d4:	0018      	movs	r0, r3
    d0d6:	4b1f      	ldr	r3, [pc, #124]	; (d154 <atcab_sign_base+0x1ac>)
    d0d8:	4798      	blx	r3
    d0da:	0003      	movs	r3, r0
    d0dc:	7023      	strb	r3, [r4, #0]
    d0de:	2397      	movs	r3, #151	; 0x97
    d0e0:	18fb      	adds	r3, r7, r3
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d119      	bne.n	d11c <atcab_sign_base+0x174>
            break;

        if (packet.data[ATCA_COUNT_IDX] > 4)
    d0e8:	2308      	movs	r3, #8
    d0ea:	18fb      	adds	r3, r7, r3
    d0ec:	799b      	ldrb	r3, [r3, #6]
    d0ee:	2b04      	cmp	r3, #4
    d0f0:	d915      	bls.n	d11e <atcab_sign_base+0x176>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    d0f2:	2308      	movs	r3, #8
    d0f4:	18fb      	adds	r3, r7, r3
    d0f6:	799b      	ldrb	r3, [r3, #6]
    d0f8:	3b03      	subs	r3, #3
    d0fa:	001a      	movs	r2, r3
    d0fc:	2308      	movs	r3, #8
    d0fe:	18fb      	adds	r3, r7, r3
    d100:	1dd9      	adds	r1, r3, #7
    d102:	683b      	ldr	r3, [r7, #0]
    d104:	0018      	movs	r0, r3
    d106:	4b14      	ldr	r3, [pc, #80]	; (d158 <atcab_sign_base+0x1b0>)
    d108:	4798      	blx	r3
    d10a:	e008      	b.n	d11e <atcab_sign_base+0x176>
            break;
    d10c:	46c0      	nop			; (mov r8, r8)
    d10e:	e006      	b.n	d11e <atcab_sign_base+0x176>
            break;
    d110:	46c0      	nop			; (mov r8, r8)
    d112:	e004      	b.n	d11e <atcab_sign_base+0x176>
            break;
    d114:	46c0      	nop			; (mov r8, r8)
    d116:	e002      	b.n	d11e <atcab_sign_base+0x176>
            break;
    d118:	46c0      	nop			; (mov r8, r8)
    d11a:	e000      	b.n	d11e <atcab_sign_base+0x176>
            break;
    d11c:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    d11e:	4b0f      	ldr	r3, [pc, #60]	; (d15c <atcab_sign_base+0x1b4>)
    d120:	4798      	blx	r3
    return status;
    d122:	2397      	movs	r3, #151	; 0x97
    d124:	18fb      	adds	r3, r7, r3
    d126:	781b      	ldrb	r3, [r3, #0]
}
    d128:	0018      	movs	r0, r3
    d12a:	46bd      	mov	sp, r7
    d12c:	b027      	add	sp, #156	; 0x9c
    d12e:	bd90      	pop	{r4, r7, pc}
    d130:	200006f8 	.word	0x200006f8
    d134:	200006fc 	.word	0x200006fc
    d138:	0000b85d 	.word	0x0000b85d
    d13c:	0000b969 	.word	0x0000b969
    d140:	0000bf79 	.word	0x0000bf79
    d144:	20000700 	.word	0x20000700
    d148:	0000bd4d 	.word	0x0000bd4d
    d14c:	0000dc25 	.word	0x0000dc25
    d150:	0000bd6f 	.word	0x0000bd6f
    d154:	0000bb29 	.word	0x0000bb29
    d158:	00019e6b 	.word	0x00019e6b
    d15c:	0000c009 	.word	0x0000c009

0000d160 <atcab_sign>:
 *                           curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    d160:	b590      	push	{r4, r7, lr}
    d162:	b087      	sub	sp, #28
    d164:	af00      	add	r7, sp, #0
    d166:	60b9      	str	r1, [r7, #8]
    d168:	607a      	str	r2, [r7, #4]
    d16a:	230e      	movs	r3, #14
    d16c:	18fb      	adds	r3, r7, r3
    d16e:	1c02      	adds	r2, r0, #0
    d170:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    d172:	2317      	movs	r3, #23
    d174:	18fb      	adds	r3, r7, r3
    d176:	22e1      	movs	r2, #225	; 0xe1
    d178:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ( (status = atcab_random(NULL)) != ATCA_SUCCESS)
    d17a:	2317      	movs	r3, #23
    d17c:	18fc      	adds	r4, r7, r3
    d17e:	2000      	movs	r0, #0
    d180:	4b16      	ldr	r3, [pc, #88]	; (d1dc <atcab_sign+0x7c>)
    d182:	4798      	blx	r3
    d184:	0003      	movs	r3, r0
    d186:	7023      	strb	r3, [r4, #0]
    d188:	2317      	movs	r3, #23
    d18a:	18fb      	adds	r3, r7, r3
    d18c:	781b      	ldrb	r3, [r3, #0]
    d18e:	2b00      	cmp	r3, #0
    d190:	d119      	bne.n	d1c6 <atcab_sign+0x66>
            break;
        // Load message into TempKey
        if ( (status = atcab_challenge(msg)) != ATCA_SUCCESS)
    d192:	2317      	movs	r3, #23
    d194:	18fc      	adds	r4, r7, r3
    d196:	68bb      	ldr	r3, [r7, #8]
    d198:	0018      	movs	r0, r3
    d19a:	4b11      	ldr	r3, [pc, #68]	; (d1e0 <atcab_sign+0x80>)
    d19c:	4798      	blx	r3
    d19e:	0003      	movs	r3, r0
    d1a0:	7023      	strb	r3, [r4, #0]
    d1a2:	2317      	movs	r3, #23
    d1a4:	18fb      	adds	r3, r7, r3
    d1a6:	781b      	ldrb	r3, [r3, #0]
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	d10e      	bne.n	d1ca <atcab_sign+0x6a>
            break;
        // Sign the message
        if ( (status = atcab_sign_base(SIGN_MODE_EXTERNAL, key_id, signature)) != ATCA_SUCCESS)
    d1ac:	2317      	movs	r3, #23
    d1ae:	18fc      	adds	r4, r7, r3
    d1b0:	687a      	ldr	r2, [r7, #4]
    d1b2:	230e      	movs	r3, #14
    d1b4:	18fb      	adds	r3, r7, r3
    d1b6:	881b      	ldrh	r3, [r3, #0]
    d1b8:	0019      	movs	r1, r3
    d1ba:	2080      	movs	r0, #128	; 0x80
    d1bc:	4b09      	ldr	r3, [pc, #36]	; (d1e4 <atcab_sign+0x84>)
    d1be:	4798      	blx	r3
    d1c0:	0003      	movs	r3, r0
    d1c2:	7023      	strb	r3, [r4, #0]
    d1c4:	e002      	b.n	d1cc <atcab_sign+0x6c>
            break;
    d1c6:	46c0      	nop			; (mov r8, r8)
    d1c8:	e000      	b.n	d1cc <atcab_sign+0x6c>
            break;
    d1ca:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    return status;
    d1cc:	2317      	movs	r3, #23
    d1ce:	18fb      	adds	r3, r7, r3
    d1d0:	781b      	ldrb	r3, [r3, #0]
}
    d1d2:	0018      	movs	r0, r3
    d1d4:	46bd      	mov	sp, r7
    d1d6:	b007      	add	sp, #28
    d1d8:	bd90      	pop	{r4, r7, pc}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	0000c1c1 	.word	0x0000c1c1
    d1e0:	0000c585 	.word	0x0000c585
    d1e4:	0000cfa9 	.word	0x0000cfa9

0000d1e8 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate datastructure
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	b084      	sub	sp, #16
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
    d1f0:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    d1f2:	230f      	movs	r3, #15
    d1f4:	18fb      	adds	r3, r7, r3
    d1f6:	22f0      	movs	r2, #240	; 0xf0
    d1f8:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
    d1fa:	687b      	ldr	r3, [r7, #4]
    d1fc:	781b      	ldrb	r3, [r3, #0]
    d1fe:	2b05      	cmp	r3, #5
    d200:	d824      	bhi.n	d24c <hal_iface_init+0x64>
    d202:	009a      	lsls	r2, r3, #2
    d204:	4b16      	ldr	r3, [pc, #88]	; (d260 <hal_iface_init+0x78>)
    d206:	18d3      	adds	r3, r2, r3
    d208:	681b      	ldr	r3, [r3, #0]
    d20a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    d20c:	683b      	ldr	r3, [r7, #0]
    d20e:	4a15      	ldr	r2, [pc, #84]	; (d264 <hal_iface_init+0x7c>)
    d210:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
    d212:	683b      	ldr	r3, [r7, #0]
    d214:	4a14      	ldr	r2, [pc, #80]	; (d268 <hal_iface_init+0x80>)
    d216:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
    d218:	683b      	ldr	r3, [r7, #0]
    d21a:	4a14      	ldr	r2, [pc, #80]	; (d26c <hal_iface_init+0x84>)
    d21c:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
    d21e:	683b      	ldr	r3, [r7, #0]
    d220:	4a13      	ldr	r2, [pc, #76]	; (d270 <hal_iface_init+0x88>)
    d222:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
    d224:	683b      	ldr	r3, [r7, #0]
    d226:	4a13      	ldr	r2, [pc, #76]	; (d274 <hal_iface_init+0x8c>)
    d228:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
    d22a:	683b      	ldr	r3, [r7, #0]
    d22c:	4a12      	ldr	r2, [pc, #72]	; (d278 <hal_iface_init+0x90>)
    d22e:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
    d230:	683b      	ldr	r3, [r7, #0]
    d232:	4a12      	ldr	r2, [pc, #72]	; (d27c <hal_iface_init+0x94>)
    d234:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
    d236:	683b      	ldr	r3, [r7, #0]
    d238:	4a11      	ldr	r2, [pc, #68]	; (d280 <hal_iface_init+0x98>)
    d23a:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
    d23c:	683b      	ldr	r3, [r7, #0]
    d23e:	2200      	movs	r2, #0
    d240:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
    d242:	230f      	movs	r3, #15
    d244:	18fb      	adds	r3, r7, r3
    d246:	2200      	movs	r2, #0
    d248:	701a      	strb	r2, [r3, #0]
        #endif
        break;
    d24a:	e002      	b.n	d252 <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
    d24c:	46c0      	nop			; (mov r8, r8)
    d24e:	e000      	b.n	d252 <hal_iface_init+0x6a>
        break;
    d250:	46c0      	nop			; (mov r8, r8)
    }
    return status;
    d252:	230f      	movs	r3, #15
    d254:	18fb      	adds	r3, r7, r3
    d256:	781b      	ldrb	r3, [r3, #0]
}
    d258:	0018      	movs	r0, r3
    d25a:	46bd      	mov	sp, r7
    d25c:	b004      	add	sp, #16
    d25e:	bd80      	pop	{r7, pc}
    d260:	0001c8f0 	.word	0x0001c8f0
    d264:	0000d4d1 	.word	0x0000d4d1
    d268:	0000d699 	.word	0x0000d699
    d26c:	0000d751 	.word	0x0000d751
    d270:	0000d6ad 	.word	0x0000d6ad
    d274:	0000db19 	.word	0x0000db19
    d278:	0000d941 	.word	0x0000d941
    d27c:	0000da89 	.word	0x0000da89
    d280:	0000dba9 	.word	0x0000dba9

0000d284 <hal_iface_release>:
 * \param[in] ifacetype - the type of physical interface to release
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType ifacetype, void *hal_data)
{
    d284:	b590      	push	{r4, r7, lr}
    d286:	b085      	sub	sp, #20
    d288:	af00      	add	r7, sp, #0
    d28a:	0002      	movs	r2, r0
    d28c:	6039      	str	r1, [r7, #0]
    d28e:	1dfb      	adds	r3, r7, #7
    d290:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    d292:	230f      	movs	r3, #15
    d294:	18fb      	adds	r3, r7, r3
    d296:	22e1      	movs	r2, #225	; 0xe1
    d298:	701a      	strb	r2, [r3, #0]

    switch (ifacetype)
    d29a:	1dfb      	adds	r3, r7, #7
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	2b05      	cmp	r3, #5
    d2a0:	d80d      	bhi.n	d2be <hal_iface_release+0x3a>
    d2a2:	009a      	lsls	r2, r3, #2
    d2a4:	4b0b      	ldr	r3, [pc, #44]	; (d2d4 <hal_iface_release+0x50>)
    d2a6:	18d3      	adds	r3, r2, r3
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
            #ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    d2ac:	230f      	movs	r3, #15
    d2ae:	18fc      	adds	r4, r7, r3
    d2b0:	683b      	ldr	r3, [r7, #0]
    d2b2:	0018      	movs	r0, r3
    d2b4:	4b08      	ldr	r3, [pc, #32]	; (d2d8 <hal_iface_release+0x54>)
    d2b6:	4798      	blx	r3
    d2b8:	0003      	movs	r3, r0
    d2ba:	7023      	strb	r3, [r4, #0]
            #endif
        break;
    d2bc:	e002      	b.n	d2c4 <hal_iface_release+0x40>
#ifdef ATCA_HAL_SIM
        status = hal_sim_release(hal_data);
#endif
        break;
    default:
        break;
    d2be:	46c0      	nop			; (mov r8, r8)
    d2c0:	e000      	b.n	d2c4 <hal_iface_release+0x40>
        break;
    d2c2:	46c0      	nop			; (mov r8, r8)
    }

    return status;
    d2c4:	230f      	movs	r3, #15
    d2c6:	18fb      	adds	r3, r7, r3
    d2c8:	781b      	ldrb	r3, [r3, #0]
}
    d2ca:	0018      	movs	r0, r3
    d2cc:	46bd      	mov	sp, r7
    d2ce:	b005      	add	sp, #20
    d2d0:	bd90      	pop	{r4, r7, pc}
    d2d2:	46c0      	nop			; (mov r8, r8)
    d2d4:	0001c908 	.word	0x0001c908
    d2d8:	0000dba9 	.word	0x0000dba9

0000d2dc <system_interrupt_enable>:
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b082      	sub	sp, #8
    d2e0:	af00      	add	r7, sp, #0
    d2e2:	0002      	movs	r2, r0
    d2e4:	1dfb      	adds	r3, r7, #7
    d2e6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d2e8:	4b06      	ldr	r3, [pc, #24]	; (d304 <system_interrupt_enable+0x28>)
    d2ea:	1dfa      	adds	r2, r7, #7
    d2ec:	7812      	ldrb	r2, [r2, #0]
    d2ee:	0011      	movs	r1, r2
    d2f0:	221f      	movs	r2, #31
    d2f2:	400a      	ands	r2, r1
    d2f4:	2101      	movs	r1, #1
    d2f6:	4091      	lsls	r1, r2
    d2f8:	000a      	movs	r2, r1
    d2fa:	601a      	str	r2, [r3, #0]
}
    d2fc:	46c0      	nop			; (mov r8, r8)
    d2fe:	46bd      	mov	sp, r7
    d300:	b002      	add	sp, #8
    d302:	bd80      	pop	{r7, pc}
    d304:	e000e100 	.word	0xe000e100

0000d308 <system_interrupt_disable>:
{
    d308:	b580      	push	{r7, lr}
    d30a:	b082      	sub	sp, #8
    d30c:	af00      	add	r7, sp, #0
    d30e:	0002      	movs	r2, r0
    d310:	1dfb      	adds	r3, r7, #7
    d312:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d314:	4a07      	ldr	r2, [pc, #28]	; (d334 <system_interrupt_disable+0x2c>)
    d316:	1dfb      	adds	r3, r7, #7
    d318:	781b      	ldrb	r3, [r3, #0]
    d31a:	0019      	movs	r1, r3
    d31c:	231f      	movs	r3, #31
    d31e:	400b      	ands	r3, r1
    d320:	2101      	movs	r1, #1
    d322:	4099      	lsls	r1, r3
    d324:	000b      	movs	r3, r1
    d326:	0019      	movs	r1, r3
    d328:	2380      	movs	r3, #128	; 0x80
    d32a:	50d1      	str	r1, [r2, r3]
}
    d32c:	46c0      	nop			; (mov r8, r8)
    d32e:	46bd      	mov	sp, r7
    d330:	b002      	add	sp, #8
    d332:	bd80      	pop	{r7, pc}
    d334:	e000e100 	.word	0xe000e100

0000d338 <i2c_master_is_syncing>:
{
    d338:	b580      	push	{r7, lr}
    d33a:	b084      	sub	sp, #16
    d33c:	af00      	add	r7, sp, #0
    d33e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    d346:	68fb      	ldr	r3, [r7, #12]
    d348:	69db      	ldr	r3, [r3, #28]
    d34a:	2207      	movs	r2, #7
    d34c:	4013      	ands	r3, r2
    d34e:	1e5a      	subs	r2, r3, #1
    d350:	4193      	sbcs	r3, r2
    d352:	b2db      	uxtb	r3, r3
}
    d354:	0018      	movs	r0, r3
    d356:	46bd      	mov	sp, r7
    d358:	b004      	add	sp, #16
    d35a:	bd80      	pop	{r7, pc}

0000d35c <_i2c_master_wait_for_sync>:
{
    d35c:	b580      	push	{r7, lr}
    d35e:	b082      	sub	sp, #8
    d360:	af00      	add	r7, sp, #0
    d362:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    d364:	46c0      	nop			; (mov r8, r8)
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	0018      	movs	r0, r3
    d36a:	4b04      	ldr	r3, [pc, #16]	; (d37c <_i2c_master_wait_for_sync+0x20>)
    d36c:	4798      	blx	r3
    d36e:	1e03      	subs	r3, r0, #0
    d370:	d1f9      	bne.n	d366 <_i2c_master_wait_for_sync+0xa>
}
    d372:	46c0      	nop			; (mov r8, r8)
    d374:	46bd      	mov	sp, r7
    d376:	b002      	add	sp, #8
    d378:	bd80      	pop	{r7, pc}
    d37a:	46c0      	nop			; (mov r8, r8)
    d37c:	0000d339 	.word	0x0000d339

0000d380 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    d380:	b580      	push	{r7, lr}
    d382:	b082      	sub	sp, #8
    d384:	af00      	add	r7, sp, #0
    d386:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    d388:	687b      	ldr	r3, [r7, #4]
    d38a:	2264      	movs	r2, #100	; 0x64
    d38c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    d38e:	687b      	ldr	r3, [r7, #4]
    d390:	4a1b      	ldr	r2, [pc, #108]	; (d400 <i2c_master_get_config_defaults+0x80>)
    d392:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	2200      	movs	r2, #0
    d398:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	2200      	movs	r2, #0
    d39e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    d3a0:	687b      	ldr	r3, [r7, #4]
    d3a2:	2200      	movs	r2, #0
    d3a4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	2280      	movs	r2, #128	; 0x80
    d3aa:	0392      	lsls	r2, r2, #14
    d3ac:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    d3ae:	687b      	ldr	r3, [r7, #4]
    d3b0:	2201      	movs	r2, #1
    d3b2:	4252      	negs	r2, r2
    d3b4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    d3b6:	687b      	ldr	r3, [r7, #4]
    d3b8:	2201      	movs	r2, #1
    d3ba:	4252      	negs	r2, r2
    d3bc:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT; // Changes
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	2200      	movs	r2, #0
    d3c2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT; // Changes
    d3c4:	687b      	ldr	r3, [r7, #4]
    d3c6:	2200      	movs	r2, #0
    d3c8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    d3ca:	687b      	ldr	r3, [r7, #4]
    d3cc:	2224      	movs	r2, #36	; 0x24
    d3ce:	2100      	movs	r1, #0
    d3d0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    d3d2:	687b      	ldr	r3, [r7, #4]
    d3d4:	2200      	movs	r2, #0
    d3d6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	222c      	movs	r2, #44	; 0x2c
    d3dc:	2100      	movs	r1, #0
    d3de:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    d3e0:	687b      	ldr	r3, [r7, #4]
    d3e2:	222d      	movs	r2, #45	; 0x2d
    d3e4:	2100      	movs	r1, #0
    d3e6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	222e      	movs	r2, #46	; 0x2e
    d3ec:	2100      	movs	r1, #0
    d3ee:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	22d7      	movs	r2, #215	; 0xd7
    d3f4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    d3f6:	46c0      	nop			; (mov r8, r8)
    d3f8:	46bd      	mov	sp, r7
    d3fa:	b002      	add	sp, #8
    d3fc:	bd80      	pop	{r7, pc}
    d3fe:	46c0      	nop			; (mov r8, r8)
    d400:	00000d48 	.word	0x00000d48

0000d404 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    d404:	b580      	push	{r7, lr}
    d406:	b084      	sub	sp, #16
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	681b      	ldr	r3, [r3, #0]
    d410:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    d412:	2300      	movs	r3, #0
    d414:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	0018      	movs	r0, r3
    d41a:	4b14      	ldr	r3, [pc, #80]	; (d46c <i2c_master_enable+0x68>)
    d41c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    d41e:	68bb      	ldr	r3, [r7, #8]
    d420:	681b      	ldr	r3, [r3, #0]
    d422:	2202      	movs	r2, #2
    d424:	431a      	orrs	r2, r3
    d426:	68bb      	ldr	r3, [r7, #8]
    d428:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d42a:	687b      	ldr	r3, [r7, #4]
    d42c:	681b      	ldr	r3, [r3, #0]
    d42e:	0018      	movs	r0, r3
    d430:	4b0f      	ldr	r3, [pc, #60]	; (d470 <i2c_master_enable+0x6c>)
    d432:	4798      	blx	r3
    d434:	0003      	movs	r3, r0
    d436:	0018      	movs	r0, r3
    d438:	4b0e      	ldr	r3, [pc, #56]	; (d474 <i2c_master_enable+0x70>)
    d43a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d43c:	e00c      	b.n	d458 <i2c_master_enable+0x54>
		timeout_counter++;
    d43e:	68fb      	ldr	r3, [r7, #12]
    d440:	3301      	adds	r3, #1
    d442:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	88db      	ldrh	r3, [r3, #6]
    d448:	001a      	movs	r2, r3
    d44a:	68fb      	ldr	r3, [r7, #12]
    d44c:	429a      	cmp	r2, r3
    d44e:	d803      	bhi.n	d458 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    d450:	68bb      	ldr	r3, [r7, #8]
    d452:	2210      	movs	r2, #16
    d454:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    d456:	e006      	b.n	d466 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    d458:	68bb      	ldr	r3, [r7, #8]
    d45a:	8b5b      	ldrh	r3, [r3, #26]
    d45c:	b29b      	uxth	r3, r3
    d45e:	001a      	movs	r2, r3
    d460:	2310      	movs	r3, #16
    d462:	4013      	ands	r3, r2
    d464:	d0eb      	beq.n	d43e <i2c_master_enable+0x3a>
		}
	}
}
    d466:	46bd      	mov	sp, r7
    d468:	b004      	add	sp, #16
    d46a:	bd80      	pop	{r7, pc}
    d46c:	0000d35d 	.word	0x0000d35d
    d470:	00012b5d 	.word	0x00012b5d
    d474:	0000d2dd 	.word	0x0000d2dd

0000d478 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    d478:	b580      	push	{r7, lr}
    d47a:	b084      	sub	sp, #16
    d47c:	af00      	add	r7, sp, #0
    d47e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	681b      	ldr	r3, [r3, #0]
    d484:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	681b      	ldr	r3, [r3, #0]
    d48a:	0018      	movs	r0, r3
    d48c:	4b0d      	ldr	r3, [pc, #52]	; (d4c4 <i2c_master_disable+0x4c>)
    d48e:	4798      	blx	r3
    d490:	0003      	movs	r3, r0
    d492:	0018      	movs	r0, r3
    d494:	4b0c      	ldr	r3, [pc, #48]	; (d4c8 <i2c_master_disable+0x50>)
    d496:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	0018      	movs	r0, r3
    d49c:	4b0b      	ldr	r3, [pc, #44]	; (d4cc <i2c_master_disable+0x54>)
    d49e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    d4a0:	68fb      	ldr	r3, [r7, #12]
    d4a2:	2283      	movs	r2, #131	; 0x83
    d4a4:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    d4a6:	68fb      	ldr	r3, [r7, #12]
    d4a8:	2283      	movs	r2, #131	; 0x83
    d4aa:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    d4ac:	68fb      	ldr	r3, [r7, #12]
    d4ae:	681b      	ldr	r3, [r3, #0]
    d4b0:	2202      	movs	r2, #2
    d4b2:	4393      	bics	r3, r2
    d4b4:	001a      	movs	r2, r3
    d4b6:	68fb      	ldr	r3, [r7, #12]
    d4b8:	601a      	str	r2, [r3, #0]

}
    d4ba:	46c0      	nop			; (mov r8, r8)
    d4bc:	46bd      	mov	sp, r7
    d4be:	b004      	add	sp, #16
    d4c0:	bd80      	pop	{r7, pc}
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	00012b5d 	.word	0x00012b5d
    d4c8:	0000d309 	.word	0x0000d309
    d4cc:	0000d35d 	.word	0x0000d35d

0000d4d0 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b086      	sub	sp, #24
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	6078      	str	r0, [r7, #4]
    d4d8:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    d4da:	683b      	ldr	r3, [r7, #0]
    d4dc:	795b      	ldrb	r3, [r3, #5]
    d4de:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    d4e4:	4b5c      	ldr	r3, [pc, #368]	; (d658 <hal_i2c_init+0x188>)
    d4e6:	681b      	ldr	r3, [r3, #0]
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d10d      	bne.n	d508 <hal_i2c_init+0x38>
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    d4ec:	2300      	movs	r3, #0
    d4ee:	617b      	str	r3, [r7, #20]
    d4f0:	e007      	b.n	d502 <hal_i2c_init+0x32>
            i2c_hal_data[i] = NULL;
    d4f2:	4b5a      	ldr	r3, [pc, #360]	; (d65c <hal_i2c_init+0x18c>)
    d4f4:	697a      	ldr	r2, [r7, #20]
    d4f6:	0092      	lsls	r2, r2, #2
    d4f8:	2100      	movs	r1, #0
    d4fa:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    d4fc:	697b      	ldr	r3, [r7, #20]
    d4fe:	3301      	adds	r3, #1
    d500:	617b      	str	r3, [r7, #20]
    d502:	697b      	ldr	r3, [r7, #20]
    d504:	2b05      	cmp	r3, #5
    d506:	ddf4      	ble.n	d4f2 <hal_i2c_init+0x22>

    i2c_bus_ref_ct++;  // total across buses
    d508:	4b53      	ldr	r3, [pc, #332]	; (d658 <hal_i2c_init+0x188>)
    d50a:	681b      	ldr	r3, [r3, #0]
    d50c:	1c5a      	adds	r2, r3, #1
    d50e:	4b52      	ldr	r3, [pc, #328]	; (d658 <hal_i2c_init+0x188>)
    d510:	601a      	str	r2, [r3, #0]
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    d512:	693b      	ldr	r3, [r7, #16]
    d514:	2b00      	cmp	r3, #0
    d516:	da00      	bge.n	d51a <hal_i2c_init+0x4a>
    d518:	e099      	b.n	d64e <hal_i2c_init+0x17e>
    d51a:	693b      	ldr	r3, [r7, #16]
    d51c:	2b05      	cmp	r3, #5
    d51e:	dd00      	ble.n	d522 <hal_i2c_init+0x52>
    d520:	e095      	b.n	d64e <hal_i2c_init+0x17e>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
    d522:	4b4e      	ldr	r3, [pc, #312]	; (d65c <hal_i2c_init+0x18c>)
    d524:	693a      	ldr	r2, [r7, #16]
    d526:	0092      	lsls	r2, r2, #2
    d528:	58d3      	ldr	r3, [r2, r3]
    d52a:	2b00      	cmp	r3, #0
    d52c:	d000      	beq.n	d530 <hal_i2c_init+0x60>
    d52e:	e07f      	b.n	d630 <hal_i2c_init+0x160>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    d530:	2030      	movs	r0, #48	; 0x30
    d532:	4b4b      	ldr	r3, [pc, #300]	; (d660 <hal_i2c_init+0x190>)
    d534:	4798      	blx	r3
    d536:	0003      	movs	r3, r0
    d538:	0019      	movs	r1, r3
    d53a:	4b48      	ldr	r3, [pc, #288]	; (d65c <hal_i2c_init+0x18c>)
    d53c:	693a      	ldr	r2, [r7, #16]
    d53e:	0092      	lsls	r2, r2, #2
    d540:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    d542:	4b46      	ldr	r3, [pc, #280]	; (d65c <hal_i2c_init+0x18c>)
    d544:	693a      	ldr	r2, [r7, #16]
    d546:	0092      	lsls	r2, r2, #2
    d548:	58d3      	ldr	r3, [r2, r3]
    d54a:	2201      	movs	r2, #1
    d54c:	629a      	str	r2, [r3, #40]	; 0x28
            i2c_master_get_config_defaults(&config_i2c_master);
    d54e:	4b45      	ldr	r3, [pc, #276]	; (d664 <hal_i2c_init+0x194>)
    d550:	0018      	movs	r0, r3
    d552:	4b45      	ldr	r3, [pc, #276]	; (d668 <hal_i2c_init+0x198>)
    d554:	4798      	blx	r3
#ifdef __SAMR30G18A__
            if (bus == 1)
    d556:	693b      	ldr	r3, [r7, #16]
    d558:	2b01      	cmp	r3, #1
    d55a:	d105      	bne.n	d568 <hal_i2c_init+0x98>
            {
                config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    d55c:	4b41      	ldr	r3, [pc, #260]	; (d664 <hal_i2c_init+0x194>)
    d55e:	4a43      	ldr	r2, [pc, #268]	; (d66c <hal_i2c_init+0x19c>)
    d560:	61da      	str	r2, [r3, #28]
                config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    d562:	4b40      	ldr	r3, [pc, #256]	; (d664 <hal_i2c_init+0x194>)
    d564:	4a42      	ldr	r2, [pc, #264]	; (d670 <hal_i2c_init+0x1a0>)
    d566:	621a      	str	r2, [r3, #32]
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    d568:	683b      	ldr	r3, [r7, #0]
    d56a:	6898      	ldr	r0, [r3, #8]
    d56c:	4b41      	ldr	r3, [pc, #260]	; (d674 <hal_i2c_init+0x1a4>)
    d56e:	22fa      	movs	r2, #250	; 0xfa
    d570:	0091      	lsls	r1, r2, #2
    d572:	4798      	blx	r3
    d574:	0003      	movs	r3, r0
    d576:	001a      	movs	r2, r3
    d578:	4b3a      	ldr	r3, [pc, #232]	; (d664 <hal_i2c_init+0x194>)
    d57a:	601a      	str	r2, [r3, #0]

            switch (bus)
    d57c:	693b      	ldr	r3, [r7, #16]
    d57e:	2b05      	cmp	r3, #5
    d580:	d848      	bhi.n	d614 <hal_i2c_init+0x144>
    d582:	693b      	ldr	r3, [r7, #16]
    d584:	009a      	lsls	r2, r3, #2
    d586:	4b3c      	ldr	r3, [pc, #240]	; (d678 <hal_i2c_init+0x1a8>)
    d588:	18d3      	adds	r3, r2, r3
    d58a:	681b      	ldr	r3, [r3, #0]
    d58c:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    d58e:	4b33      	ldr	r3, [pc, #204]	; (d65c <hal_i2c_init+0x18c>)
    d590:	693a      	ldr	r2, [r7, #16]
    d592:	0092      	lsls	r2, r2, #2
    d594:	58d3      	ldr	r3, [r2, r3]
    d596:	0018      	movs	r0, r3
    d598:	4a32      	ldr	r2, [pc, #200]	; (d664 <hal_i2c_init+0x194>)
    d59a:	2384      	movs	r3, #132	; 0x84
    d59c:	05db      	lsls	r3, r3, #23
    d59e:	0019      	movs	r1, r3
    d5a0:	4b36      	ldr	r3, [pc, #216]	; (d67c <hal_i2c_init+0x1ac>)
    d5a2:	4798      	blx	r3
    d5a4:	e036      	b.n	d614 <hal_i2c_init+0x144>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    d5a6:	4b2d      	ldr	r3, [pc, #180]	; (d65c <hal_i2c_init+0x18c>)
    d5a8:	693a      	ldr	r2, [r7, #16]
    d5aa:	0092      	lsls	r2, r2, #2
    d5ac:	58d3      	ldr	r3, [r2, r3]
    d5ae:	0018      	movs	r0, r3
    d5b0:	4b2c      	ldr	r3, [pc, #176]	; (d664 <hal_i2c_init+0x194>)
    d5b2:	4933      	ldr	r1, [pc, #204]	; (d680 <hal_i2c_init+0x1b0>)
    d5b4:	001a      	movs	r2, r3
    d5b6:	4b31      	ldr	r3, [pc, #196]	; (d67c <hal_i2c_init+0x1ac>)
    d5b8:	4798      	blx	r3
    d5ba:	e02b      	b.n	d614 <hal_i2c_init+0x144>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    d5bc:	4b27      	ldr	r3, [pc, #156]	; (d65c <hal_i2c_init+0x18c>)
    d5be:	693a      	ldr	r2, [r7, #16]
    d5c0:	0092      	lsls	r2, r2, #2
    d5c2:	58d3      	ldr	r3, [r2, r3]
    d5c4:	0018      	movs	r0, r3
    d5c6:	4b27      	ldr	r3, [pc, #156]	; (d664 <hal_i2c_init+0x194>)
    d5c8:	492e      	ldr	r1, [pc, #184]	; (d684 <hal_i2c_init+0x1b4>)
    d5ca:	001a      	movs	r2, r3
    d5cc:	4b2b      	ldr	r3, [pc, #172]	; (d67c <hal_i2c_init+0x1ac>)
    d5ce:	4798      	blx	r3
    d5d0:	e020      	b.n	d614 <hal_i2c_init+0x144>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    d5d2:	4b22      	ldr	r3, [pc, #136]	; (d65c <hal_i2c_init+0x18c>)
    d5d4:	693a      	ldr	r2, [r7, #16]
    d5d6:	0092      	lsls	r2, r2, #2
    d5d8:	58d3      	ldr	r3, [r2, r3]
    d5da:	0018      	movs	r0, r3
    d5dc:	4b21      	ldr	r3, [pc, #132]	; (d664 <hal_i2c_init+0x194>)
    d5de:	492a      	ldr	r1, [pc, #168]	; (d688 <hal_i2c_init+0x1b8>)
    d5e0:	001a      	movs	r2, r3
    d5e2:	4b26      	ldr	r3, [pc, #152]	; (d67c <hal_i2c_init+0x1ac>)
    d5e4:	4798      	blx	r3
    d5e6:	e015      	b.n	d614 <hal_i2c_init+0x144>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    d5e8:	4b1c      	ldr	r3, [pc, #112]	; (d65c <hal_i2c_init+0x18c>)
    d5ea:	693a      	ldr	r2, [r7, #16]
    d5ec:	0092      	lsls	r2, r2, #2
    d5ee:	58d3      	ldr	r3, [r2, r3]
    d5f0:	0018      	movs	r0, r3
    d5f2:	4b1c      	ldr	r3, [pc, #112]	; (d664 <hal_i2c_init+0x194>)
    d5f4:	4925      	ldr	r1, [pc, #148]	; (d68c <hal_i2c_init+0x1bc>)
    d5f6:	001a      	movs	r2, r3
    d5f8:	4b20      	ldr	r3, [pc, #128]	; (d67c <hal_i2c_init+0x1ac>)
    d5fa:	4798      	blx	r3
    d5fc:	e00a      	b.n	d614 <hal_i2c_init+0x144>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    d5fe:	4b17      	ldr	r3, [pc, #92]	; (d65c <hal_i2c_init+0x18c>)
    d600:	693a      	ldr	r2, [r7, #16]
    d602:	0092      	lsls	r2, r2, #2
    d604:	58d3      	ldr	r3, [r2, r3]
    d606:	0018      	movs	r0, r3
    d608:	4b16      	ldr	r3, [pc, #88]	; (d664 <hal_i2c_init+0x194>)
    d60a:	4921      	ldr	r1, [pc, #132]	; (d690 <hal_i2c_init+0x1c0>)
    d60c:	001a      	movs	r2, r3
    d60e:	4b1b      	ldr	r3, [pc, #108]	; (d67c <hal_i2c_init+0x1ac>)
    d610:	4798      	blx	r3
    d612:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
    d614:	4b11      	ldr	r3, [pc, #68]	; (d65c <hal_i2c_init+0x18c>)
    d616:	693a      	ldr	r2, [r7, #16]
    d618:	0092      	lsls	r2, r2, #2
    d61a:	58d3      	ldr	r3, [r2, r3]
    d61c:	693a      	ldr	r2, [r7, #16]
    d61e:	62da      	str	r2, [r3, #44]	; 0x2c
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    d620:	4b0e      	ldr	r3, [pc, #56]	; (d65c <hal_i2c_init+0x18c>)
    d622:	693a      	ldr	r2, [r7, #16]
    d624:	0092      	lsls	r2, r2, #2
    d626:	58d3      	ldr	r3, [r2, r3]
    d628:	0018      	movs	r0, r3
    d62a:	4b1a      	ldr	r3, [pc, #104]	; (d694 <hal_i2c_init+0x1c4>)
    d62c:	4798      	blx	r3
    d62e:	e006      	b.n	d63e <hal_i2c_init+0x16e>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
    d630:	4b0a      	ldr	r3, [pc, #40]	; (d65c <hal_i2c_init+0x18c>)
    d632:	693a      	ldr	r2, [r7, #16]
    d634:	0092      	lsls	r2, r2, #2
    d636:	58d3      	ldr	r3, [r2, r3]
    d638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d63a:	3201      	adds	r2, #1
    d63c:	629a      	str	r2, [r3, #40]	; 0x28
        }

        phal->hal_data = i2c_hal_data[bus];
    d63e:	4b07      	ldr	r3, [pc, #28]	; (d65c <hal_i2c_init+0x18c>)
    d640:	693a      	ldr	r2, [r7, #16]
    d642:	0092      	lsls	r2, r2, #2
    d644:	58d2      	ldr	r2, [r2, r3]
    d646:	68fb      	ldr	r3, [r7, #12]
    d648:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
    d64a:	2300      	movs	r3, #0
    d64c:	e000      	b.n	d650 <hal_i2c_init+0x180>
    }

    return ATCA_COMM_FAIL;
    d64e:	23f0      	movs	r3, #240	; 0xf0
}
    d650:	0018      	movs	r0, r3
    d652:	46bd      	mov	sp, r7
    d654:	b006      	add	sp, #24
    d656:	bd80      	pop	{r7, pc}
    d658:	20000704 	.word	0x20000704
    d65c:	20000d78 	.word	0x20000d78
    d660:	00019e25 	.word	0x00019e25
    d664:	20000708 	.word	0x20000708
    d668:	0000d381 	.word	0x0000d381
    d66c:	00100002 	.word	0x00100002
    d670:	00110002 	.word	0x00110002
    d674:	00017e9d 	.word	0x00017e9d
    d678:	0001c960 	.word	0x0001c960
    d67c:	00011dd5 	.word	0x00011dd5
    d680:	42000400 	.word	0x42000400
    d684:	42000800 	.word	0x42000800
    d688:	42000c00 	.word	0x42000c00
    d68c:	42001000 	.word	0x42001000
    d690:	43000400 	.word	0x43000400
    d694:	0000d405 	.word	0x0000d405

0000d698 <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    d698:	b580      	push	{r7, lr}
    d69a:	b082      	sub	sp, #8
    d69c:	af00      	add	r7, sp, #0
    d69e:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
    d6a0:	2300      	movs	r3, #0
}
    d6a2:	0018      	movs	r0, r3
    d6a4:	46bd      	mov	sp, r7
    d6a6:	b002      	add	sp, #8
    d6a8:	bd80      	pop	{r7, pc}
	...

0000d6ac <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    d6ac:	b580      	push	{r7, lr}
    d6ae:	b08a      	sub	sp, #40	; 0x28
    d6b0:	af00      	add	r7, sp, #0
    d6b2:	60f8      	str	r0, [r7, #12]
    d6b4:	60b9      	str	r1, [r7, #8]
    d6b6:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    d6b8:	68fb      	ldr	r3, [r7, #12]
    d6ba:	0018      	movs	r0, r3
    d6bc:	4b21      	ldr	r3, [pc, #132]	; (d744 <hal_i2c_send+0x98>)
    d6be:	4798      	blx	r3
    d6c0:	0003      	movs	r3, r0
    d6c2:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6c6:	795b      	ldrb	r3, [r3, #5]
    d6c8:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6cc:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    d6ce:	085b      	lsrs	r3, r3, #1
    d6d0:	b2db      	uxtb	r3, r3
    d6d2:	b29a      	uxth	r2, r3
    d6d4:	2314      	movs	r3, #20
    d6d6:	18fb      	adds	r3, r7, r3
    d6d8:	801a      	strh	r2, [r3, #0]
    d6da:	687b      	ldr	r3, [r7, #4]
    d6dc:	b29a      	uxth	r2, r3
    d6de:	2314      	movs	r3, #20
    d6e0:	18fb      	adds	r3, r7, r3
    d6e2:	805a      	strh	r2, [r3, #2]
    d6e4:	2314      	movs	r3, #20
    d6e6:	18fb      	adds	r3, r7, r3
    d6e8:	68ba      	ldr	r2, [r7, #8]
    d6ea:	605a      	str	r2, [r3, #4]
    d6ec:	2314      	movs	r3, #20
    d6ee:	18fb      	adds	r3, r7, r3
    d6f0:	2200      	movs	r2, #0
    d6f2:	721a      	strb	r2, [r3, #8]
    d6f4:	2314      	movs	r3, #20
    d6f6:	18fb      	adds	r3, r7, r3
    d6f8:	2200      	movs	r2, #0
    d6fa:	725a      	strb	r2, [r3, #9]
    d6fc:	2314      	movs	r3, #20
    d6fe:	18fb      	adds	r3, r7, r3
    d700:	2200      	movs	r2, #0
    d702:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    d704:	68bb      	ldr	r3, [r7, #8]
    d706:	2203      	movs	r2, #3
    d708:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
    d70a:	687b      	ldr	r3, [r7, #4]
    d70c:	3301      	adds	r3, #1
    d70e:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
    d710:	687b      	ldr	r3, [r7, #4]
    d712:	b29a      	uxth	r2, r3
    d714:	2314      	movs	r3, #20
    d716:	18fb      	adds	r3, r7, r3
    d718:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    d71a:	4b0b      	ldr	r3, [pc, #44]	; (d748 <hal_i2c_send+0x9c>)
    d71c:	6a3a      	ldr	r2, [r7, #32]
    d71e:	0092      	lsls	r2, r2, #2
    d720:	58d3      	ldr	r3, [r2, r3]
    d722:	001a      	movs	r2, r3
    d724:	2314      	movs	r3, #20
    d726:	18fb      	adds	r3, r7, r3
    d728:	0019      	movs	r1, r3
    d72a:	0010      	movs	r0, r2
    d72c:	4b07      	ldr	r3, [pc, #28]	; (d74c <hal_i2c_send+0xa0>)
    d72e:	4798      	blx	r3
    d730:	1e03      	subs	r3, r0, #0
    d732:	d001      	beq.n	d738 <hal_i2c_send+0x8c>
        return ATCA_COMM_FAIL;
    d734:	23f0      	movs	r3, #240	; 0xf0
    d736:	e000      	b.n	d73a <hal_i2c_send+0x8e>

    return ATCA_SUCCESS;
    d738:	2300      	movs	r3, #0
}
    d73a:	0018      	movs	r0, r3
    d73c:	46bd      	mov	sp, r7
    d73e:	b00a      	add	sp, #40	; 0x28
    d740:	bd80      	pop	{r7, pc}
    d742:	46c0      	nop			; (mov r8, r8)
    d744:	0000be15 	.word	0x0000be15
    d748:	20000d78 	.word	0x20000d78
    d74c:	000124d1 	.word	0x000124d1

0000d750 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    d750:	b580      	push	{r7, lr}
    d752:	b08c      	sub	sp, #48	; 0x30
    d754:	af00      	add	r7, sp, #0
    d756:	60f8      	str	r0, [r7, #12]
    d758:	60b9      	str	r1, [r7, #8]
    d75a:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    d75c:	68fb      	ldr	r3, [r7, #12]
    d75e:	0018      	movs	r0, r3
    d760:	4b29      	ldr	r3, [pc, #164]	; (d808 <hal_i2c_receive+0xb8>)
    d762:	4798      	blx	r3
    d764:	0003      	movs	r3, r0
    d766:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d76a:	795b      	ldrb	r3, [r3, #5]
    d76c:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d772:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
    d774:	2301      	movs	r3, #1
    d776:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d77a:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    d77c:	085b      	lsrs	r3, r3, #1
    d77e:	b2db      	uxtb	r3, r3
    d780:	b29a      	uxth	r2, r3
    d782:	2314      	movs	r3, #20
    d784:	18fb      	adds	r3, r7, r3
    d786:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
    d78c:	2314      	movs	r3, #20
    d78e:	18fb      	adds	r3, r7, r3
    d790:	805a      	strh	r2, [r3, #2]
    d792:	2314      	movs	r3, #20
    d794:	18fb      	adds	r3, r7, r3
    d796:	68ba      	ldr	r2, [r7, #8]
    d798:	605a      	str	r2, [r3, #4]
    d79a:	2314      	movs	r3, #20
    d79c:	18fb      	adds	r3, r7, r3
    d79e:	2200      	movs	r2, #0
    d7a0:	721a      	strb	r2, [r3, #8]
    d7a2:	2314      	movs	r3, #20
    d7a4:	18fb      	adds	r3, r7, r3
    d7a6:	2200      	movs	r2, #0
    d7a8:	725a      	strb	r2, [r3, #9]
    d7aa:	2314      	movs	r3, #20
    d7ac:	18fb      	adds	r3, r7, r3
    d7ae:	2200      	movs	r2, #0
    d7b0:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    d7b2:	e00c      	b.n	d7ce <hal_i2c_receive+0x7e>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    d7b4:	4b15      	ldr	r3, [pc, #84]	; (d80c <hal_i2c_receive+0xbc>)
    d7b6:	6a3a      	ldr	r2, [r7, #32]
    d7b8:	0092      	lsls	r2, r2, #2
    d7ba:	58d3      	ldr	r3, [r2, r3]
    d7bc:	001a      	movs	r2, r3
    d7be:	2314      	movs	r3, #20
    d7c0:	18fb      	adds	r3, r7, r3
    d7c2:	0019      	movs	r1, r3
    d7c4:	0010      	movs	r0, r2
    d7c6:	4b12      	ldr	r3, [pc, #72]	; (d810 <hal_i2c_receive+0xc0>)
    d7c8:	4798      	blx	r3
    d7ca:	0003      	movs	r3, r0
    d7cc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7d0:	1e5a      	subs	r2, r3, #1
    d7d2:	62fa      	str	r2, [r7, #44]	; 0x2c
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	dd02      	ble.n	d7de <hal_i2c_receive+0x8e>
    d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7da:	2b00      	cmp	r3, #0
    d7dc:	d1ea      	bne.n	d7b4 <hal_i2c_receive+0x64>

    if (status != STATUS_OK)
    d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	d001      	beq.n	d7e8 <hal_i2c_receive+0x98>
        return ATCA_COMM_FAIL;
    d7e4:	23f0      	movs	r3, #240	; 0xf0
    d7e6:	e00a      	b.n	d7fe <hal_i2c_receive+0xae>

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    d7e8:	2314      	movs	r3, #20
    d7ea:	18fb      	adds	r3, r7, r3
    d7ec:	685b      	ldr	r3, [r3, #4]
    d7ee:	0018      	movs	r0, r3
    d7f0:	4b08      	ldr	r3, [pc, #32]	; (d814 <hal_i2c_receive+0xc4>)
    d7f2:	4798      	blx	r3
    d7f4:	1e03      	subs	r3, r0, #0
    d7f6:	d001      	beq.n	d7fc <hal_i2c_receive+0xac>
        return ATCA_COMM_FAIL;
    d7f8:	23f0      	movs	r3, #240	; 0xf0
    d7fa:	e000      	b.n	d7fe <hal_i2c_receive+0xae>

    return ATCA_SUCCESS;
    d7fc:	2300      	movs	r3, #0
}
    d7fe:	0018      	movs	r0, r3
    d800:	46bd      	mov	sp, r7
    d802:	b00c      	add	sp, #48	; 0x30
    d804:	bd80      	pop	{r7, pc}
    d806:	46c0      	nop			; (mov r8, r8)
    d808:	0000be15 	.word	0x0000be15
    d80c:	20000d78 	.word	0x20000d78
    d810:	00012319 	.word	0x00012319
    d814:	0000baa9 	.word	0x0000baa9

0000d818 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    d818:	b580      	push	{r7, lr}
    d81a:	b084      	sub	sp, #16
    d81c:	af00      	add	r7, sp, #0
    d81e:	6078      	str	r0, [r7, #4]
    d820:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    d822:	687b      	ldr	r3, [r7, #4]
    d824:	0018      	movs	r0, r3
    d826:	4b38      	ldr	r3, [pc, #224]	; (d908 <change_i2c_speed+0xf0>)
    d828:	4798      	blx	r3
    d82a:	0003      	movs	r3, r0
    d82c:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
    d82e:	68fb      	ldr	r3, [r7, #12]
    d830:	795b      	ldrb	r3, [r3, #5]
    d832:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
    d834:	4b35      	ldr	r3, [pc, #212]	; (d90c <change_i2c_speed+0xf4>)
    d836:	4a36      	ldr	r2, [pc, #216]	; (d910 <change_i2c_speed+0xf8>)
    d838:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
    d83a:	6838      	ldr	r0, [r7, #0]
    d83c:	4b35      	ldr	r3, [pc, #212]	; (d914 <change_i2c_speed+0xfc>)
    d83e:	22fa      	movs	r2, #250	; 0xfa
    d840:	0091      	lsls	r1, r2, #2
    d842:	4798      	blx	r3
    d844:	0003      	movs	r3, r0
    d846:	001a      	movs	r2, r3
    d848:	4b30      	ldr	r3, [pc, #192]	; (d90c <change_i2c_speed+0xf4>)
    d84a:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    d84c:	4b32      	ldr	r3, [pc, #200]	; (d918 <change_i2c_speed+0x100>)
    d84e:	68ba      	ldr	r2, [r7, #8]
    d850:	0092      	lsls	r2, r2, #2
    d852:	58d3      	ldr	r3, [r2, r3]
    d854:	0018      	movs	r0, r3
    d856:	4b31      	ldr	r3, [pc, #196]	; (d91c <change_i2c_speed+0x104>)
    d858:	4798      	blx	r3

    switch (bus)
    d85a:	68bb      	ldr	r3, [r7, #8]
    d85c:	2b05      	cmp	r3, #5
    d85e:	d848      	bhi.n	d8f2 <change_i2c_speed+0xda>
    d860:	68bb      	ldr	r3, [r7, #8]
    d862:	009a      	lsls	r2, r3, #2
    d864:	4b2e      	ldr	r3, [pc, #184]	; (d920 <change_i2c_speed+0x108>)
    d866:	18d3      	adds	r3, r2, r3
    d868:	681b      	ldr	r3, [r3, #0]
    d86a:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    d86c:	4b2a      	ldr	r3, [pc, #168]	; (d918 <change_i2c_speed+0x100>)
    d86e:	68ba      	ldr	r2, [r7, #8]
    d870:	0092      	lsls	r2, r2, #2
    d872:	58d3      	ldr	r3, [r2, r3]
    d874:	0018      	movs	r0, r3
    d876:	4a25      	ldr	r2, [pc, #148]	; (d90c <change_i2c_speed+0xf4>)
    d878:	2384      	movs	r3, #132	; 0x84
    d87a:	05db      	lsls	r3, r3, #23
    d87c:	0019      	movs	r1, r3
    d87e:	4b29      	ldr	r3, [pc, #164]	; (d924 <change_i2c_speed+0x10c>)
    d880:	4798      	blx	r3
    d882:	e036      	b.n	d8f2 <change_i2c_speed+0xda>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    d884:	4b24      	ldr	r3, [pc, #144]	; (d918 <change_i2c_speed+0x100>)
    d886:	68ba      	ldr	r2, [r7, #8]
    d888:	0092      	lsls	r2, r2, #2
    d88a:	58d3      	ldr	r3, [r2, r3]
    d88c:	0018      	movs	r0, r3
    d88e:	4b1f      	ldr	r3, [pc, #124]	; (d90c <change_i2c_speed+0xf4>)
    d890:	4925      	ldr	r1, [pc, #148]	; (d928 <change_i2c_speed+0x110>)
    d892:	001a      	movs	r2, r3
    d894:	4b23      	ldr	r3, [pc, #140]	; (d924 <change_i2c_speed+0x10c>)
    d896:	4798      	blx	r3
    d898:	e02b      	b.n	d8f2 <change_i2c_speed+0xda>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    d89a:	4b1f      	ldr	r3, [pc, #124]	; (d918 <change_i2c_speed+0x100>)
    d89c:	68ba      	ldr	r2, [r7, #8]
    d89e:	0092      	lsls	r2, r2, #2
    d8a0:	58d3      	ldr	r3, [r2, r3]
    d8a2:	0018      	movs	r0, r3
    d8a4:	4b19      	ldr	r3, [pc, #100]	; (d90c <change_i2c_speed+0xf4>)
    d8a6:	4921      	ldr	r1, [pc, #132]	; (d92c <change_i2c_speed+0x114>)
    d8a8:	001a      	movs	r2, r3
    d8aa:	4b1e      	ldr	r3, [pc, #120]	; (d924 <change_i2c_speed+0x10c>)
    d8ac:	4798      	blx	r3
    d8ae:	e020      	b.n	d8f2 <change_i2c_speed+0xda>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    d8b0:	4b19      	ldr	r3, [pc, #100]	; (d918 <change_i2c_speed+0x100>)
    d8b2:	68ba      	ldr	r2, [r7, #8]
    d8b4:	0092      	lsls	r2, r2, #2
    d8b6:	58d3      	ldr	r3, [r2, r3]
    d8b8:	0018      	movs	r0, r3
    d8ba:	4b14      	ldr	r3, [pc, #80]	; (d90c <change_i2c_speed+0xf4>)
    d8bc:	491c      	ldr	r1, [pc, #112]	; (d930 <change_i2c_speed+0x118>)
    d8be:	001a      	movs	r2, r3
    d8c0:	4b18      	ldr	r3, [pc, #96]	; (d924 <change_i2c_speed+0x10c>)
    d8c2:	4798      	blx	r3
    d8c4:	e015      	b.n	d8f2 <change_i2c_speed+0xda>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    d8c6:	4b14      	ldr	r3, [pc, #80]	; (d918 <change_i2c_speed+0x100>)
    d8c8:	68ba      	ldr	r2, [r7, #8]
    d8ca:	0092      	lsls	r2, r2, #2
    d8cc:	58d3      	ldr	r3, [r2, r3]
    d8ce:	0018      	movs	r0, r3
    d8d0:	4b0e      	ldr	r3, [pc, #56]	; (d90c <change_i2c_speed+0xf4>)
    d8d2:	4918      	ldr	r1, [pc, #96]	; (d934 <change_i2c_speed+0x11c>)
    d8d4:	001a      	movs	r2, r3
    d8d6:	4b13      	ldr	r3, [pc, #76]	; (d924 <change_i2c_speed+0x10c>)
    d8d8:	4798      	blx	r3
    d8da:	e00a      	b.n	d8f2 <change_i2c_speed+0xda>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    d8dc:	4b0e      	ldr	r3, [pc, #56]	; (d918 <change_i2c_speed+0x100>)
    d8de:	68ba      	ldr	r2, [r7, #8]
    d8e0:	0092      	lsls	r2, r2, #2
    d8e2:	58d3      	ldr	r3, [r2, r3]
    d8e4:	0018      	movs	r0, r3
    d8e6:	4b09      	ldr	r3, [pc, #36]	; (d90c <change_i2c_speed+0xf4>)
    d8e8:	4913      	ldr	r1, [pc, #76]	; (d938 <change_i2c_speed+0x120>)
    d8ea:	001a      	movs	r2, r3
    d8ec:	4b0d      	ldr	r3, [pc, #52]	; (d924 <change_i2c_speed+0x10c>)
    d8ee:	4798      	blx	r3
    d8f0:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    d8f2:	4b09      	ldr	r3, [pc, #36]	; (d918 <change_i2c_speed+0x100>)
    d8f4:	68ba      	ldr	r2, [r7, #8]
    d8f6:	0092      	lsls	r2, r2, #2
    d8f8:	58d3      	ldr	r3, [r2, r3]
    d8fa:	0018      	movs	r0, r3
    d8fc:	4b0f      	ldr	r3, [pc, #60]	; (d93c <change_i2c_speed+0x124>)
    d8fe:	4798      	blx	r3
}
    d900:	46c0      	nop			; (mov r8, r8)
    d902:	46bd      	mov	sp, r7
    d904:	b004      	add	sp, #16
    d906:	bd80      	pop	{r7, pc}
    d908:	0000be15 	.word	0x0000be15
    d90c:	20000708 	.word	0x20000708
    d910:	00002710 	.word	0x00002710
    d914:	00017e9d 	.word	0x00017e9d
    d918:	20000d78 	.word	0x20000d78
    d91c:	0000d479 	.word	0x0000d479
    d920:	0001c978 	.word	0x0001c978
    d924:	00011dd5 	.word	0x00011dd5
    d928:	42000400 	.word	0x42000400
    d92c:	42000800 	.word	0x42000800
    d930:	42000c00 	.word	0x42000c00
    d934:	42001000 	.word	0x42001000
    d938:	43000400 	.word	0x43000400
    d93c:	0000d405 	.word	0x0000d405

0000d940 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    d940:	b580      	push	{r7, lr}
    d942:	b08c      	sub	sp, #48	; 0x30
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	0018      	movs	r0, r3
    d94c:	4b45      	ldr	r3, [pc, #276]	; (da64 <hal_i2c_wake+0x124>)
    d94e:	4798      	blx	r3
    d950:	0003      	movs	r3, r0
    d952:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d956:	795b      	ldrb	r3, [r3, #5]
    d958:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
    d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d962:	689b      	ldr	r3, [r3, #8]
    d964:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
    d966:	2301      	movs	r3, #1
    d968:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    d96a:	2314      	movs	r3, #20
    d96c:	18fb      	adds	r3, r7, r3
    d96e:	4a3e      	ldr	r2, [pc, #248]	; (da68 <hal_i2c_wake+0x128>)
    d970:	6812      	ldr	r2, [r2, #0]
    d972:	601a      	str	r2, [r3, #0]
    if (bdrt != 100000)    // if not already at 100KHz, change it
    d974:	69fb      	ldr	r3, [r7, #28]
    d976:	4a3d      	ldr	r2, [pc, #244]	; (da6c <hal_i2c_wake+0x12c>)
    d978:	4293      	cmp	r3, r2
    d97a:	d005      	beq.n	d988 <hal_i2c_wake+0x48>
        change_i2c_speed(iface, 100000);
    d97c:	4a3b      	ldr	r2, [pc, #236]	; (da6c <hal_i2c_wake+0x12c>)
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	0011      	movs	r1, r2
    d982:	0018      	movs	r0, r3
    d984:	4b3a      	ldr	r3, [pc, #232]	; (da70 <hal_i2c_wake+0x130>)
    d986:	4798      	blx	r3

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    d988:	2308      	movs	r3, #8
    d98a:	18fb      	adds	r3, r7, r3
    d98c:	2200      	movs	r2, #0
    d98e:	801a      	strh	r2, [r3, #0]
    d990:	2308      	movs	r3, #8
    d992:	18fb      	adds	r3, r7, r3
    d994:	2200      	movs	r2, #0
    d996:	805a      	strh	r2, [r3, #2]
    d998:	2308      	movs	r3, #8
    d99a:	18fb      	adds	r3, r7, r3
    d99c:	2218      	movs	r2, #24
    d99e:	18ba      	adds	r2, r7, r2
    d9a0:	605a      	str	r2, [r3, #4]
    d9a2:	2308      	movs	r3, #8
    d9a4:	18fb      	adds	r3, r7, r3
    d9a6:	2200      	movs	r2, #0
    d9a8:	721a      	strb	r2, [r3, #8]
    d9aa:	2308      	movs	r3, #8
    d9ac:	18fb      	adds	r3, r7, r3
    d9ae:	2200      	movs	r2, #0
    d9b0:	725a      	strb	r2, [r3, #9]
    d9b2:	2308      	movs	r3, #8
    d9b4:	18fb      	adds	r3, r7, r3
    d9b6:	2200      	movs	r2, #0
    d9b8:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    d9ba:	4b2e      	ldr	r3, [pc, #184]	; (da74 <hal_i2c_wake+0x134>)
    d9bc:	6a3a      	ldr	r2, [r7, #32]
    d9be:	0092      	lsls	r2, r2, #2
    d9c0:	58d3      	ldr	r3, [r2, r3]
    d9c2:	001a      	movs	r2, r3
    d9c4:	2308      	movs	r3, #8
    d9c6:	18fb      	adds	r3, r7, r3
    d9c8:	0019      	movs	r1, r3
    d9ca:	0010      	movs	r0, r2
    d9cc:	4b2a      	ldr	r3, [pc, #168]	; (da78 <hal_i2c_wake+0x138>)
    d9ce:	4798      	blx	r3

    ///atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
	atca_delay_ms(1);
    d9d0:	2001      	movs	r0, #1
    d9d2:	4b2a      	ldr	r3, [pc, #168]	; (da7c <hal_i2c_wake+0x13c>)
    d9d4:	4798      	blx	r3
    packet.address = cfg->atcai2c.slave_address >> 1;
    d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d9d8:	791b      	ldrb	r3, [r3, #4]
    d9da:	085b      	lsrs	r3, r3, #1
    d9dc:	b2db      	uxtb	r3, r3
    d9de:	b29a      	uxth	r2, r3
    d9e0:	2308      	movs	r3, #8
    d9e2:	18fb      	adds	r3, r7, r3
    d9e4:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
    d9e6:	2308      	movs	r3, #8
    d9e8:	18fb      	adds	r3, r7, r3
    d9ea:	2204      	movs	r2, #4
    d9ec:	805a      	strh	r2, [r3, #2]
    packet.data = data;
    d9ee:	2308      	movs	r3, #8
    d9f0:	18fb      	adds	r3, r7, r3
    d9f2:	2218      	movs	r2, #24
    d9f4:	18ba      	adds	r2, r7, r2
    d9f6:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
    d9f8:	e00c      	b.n	da14 <hal_i2c_wake+0xd4>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    d9fa:	4b1e      	ldr	r3, [pc, #120]	; (da74 <hal_i2c_wake+0x134>)
    d9fc:	6a3a      	ldr	r2, [r7, #32]
    d9fe:	0092      	lsls	r2, r2, #2
    da00:	58d3      	ldr	r3, [r2, r3]
    da02:	001a      	movs	r2, r3
    da04:	2308      	movs	r3, #8
    da06:	18fb      	adds	r3, r7, r3
    da08:	0019      	movs	r1, r3
    da0a:	0010      	movs	r0, r2
    da0c:	4b1c      	ldr	r3, [pc, #112]	; (da80 <hal_i2c_wake+0x140>)
    da0e:	4798      	blx	r3
    da10:	0003      	movs	r3, r0
    da12:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da16:	1e5a      	subs	r2, r3, #1
    da18:	62fa      	str	r2, [r7, #44]	; 0x2c
    da1a:	2b00      	cmp	r3, #0
    da1c:	dd02      	ble.n	da24 <hal_i2c_wake+0xe4>
    da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da20:	2b00      	cmp	r3, #0
    da22:	d1ea      	bne.n	d9fa <hal_i2c_wake+0xba>

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    da24:	69fb      	ldr	r3, [r7, #28]
    da26:	4a11      	ldr	r2, [pc, #68]	; (da6c <hal_i2c_wake+0x12c>)
    da28:	4293      	cmp	r3, r2
    da2a:	d005      	beq.n	da38 <hal_i2c_wake+0xf8>
        change_i2c_speed(iface, bdrt);
    da2c:	69fa      	ldr	r2, [r7, #28]
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	0011      	movs	r1, r2
    da32:	0018      	movs	r0, r3
    da34:	4b0e      	ldr	r3, [pc, #56]	; (da70 <hal_i2c_wake+0x130>)
    da36:	4798      	blx	r3

    if (status != STATUS_OK)
    da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da3a:	2b00      	cmp	r3, #0
    da3c:	d001      	beq.n	da42 <hal_i2c_wake+0x102>
        return ATCA_COMM_FAIL;
    da3e:	23f0      	movs	r3, #240	; 0xf0
    da40:	e00c      	b.n	da5c <hal_i2c_wake+0x11c>

    if (memcmp(data, expected, 4) == 0)
    da42:	2314      	movs	r3, #20
    da44:	18f9      	adds	r1, r7, r3
    da46:	2318      	movs	r3, #24
    da48:	18fb      	adds	r3, r7, r3
    da4a:	2204      	movs	r2, #4
    da4c:	0018      	movs	r0, r3
    da4e:	4b0d      	ldr	r3, [pc, #52]	; (da84 <hal_i2c_wake+0x144>)
    da50:	4798      	blx	r3
    da52:	1e03      	subs	r3, r0, #0
    da54:	d101      	bne.n	da5a <hal_i2c_wake+0x11a>
        return ATCA_SUCCESS;
    da56:	2300      	movs	r3, #0
    da58:	e000      	b.n	da5c <hal_i2c_wake+0x11c>

    return ATCA_COMM_FAIL;
    da5a:	23f0      	movs	r3, #240	; 0xf0
}
    da5c:	0018      	movs	r0, r3
    da5e:	46bd      	mov	sp, r7
    da60:	b00c      	add	sp, #48	; 0x30
    da62:	bd80      	pop	{r7, pc}
    da64:	0000be15 	.word	0x0000be15
    da68:	0001c95c 	.word	0x0001c95c
    da6c:	000186a0 	.word	0x000186a0
    da70:	0000d819 	.word	0x0000d819
    da74:	20000d78 	.word	0x20000d78
    da78:	000124d1 	.word	0x000124d1
    da7c:	0000dc25 	.word	0x0000dc25
    da80:	00012319 	.word	0x00012319
    da84:	00019e4d 	.word	0x00019e4d

0000da88 <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b088      	sub	sp, #32
    da8c:	af00      	add	r7, sp, #0
    da8e:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    da90:	687b      	ldr	r3, [r7, #4]
    da92:	0018      	movs	r0, r3
    da94:	4b1d      	ldr	r3, [pc, #116]	; (db0c <hal_i2c_idle+0x84>)
    da96:	4798      	blx	r3
    da98:	0003      	movs	r3, r0
    da9a:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    da9c:	69fb      	ldr	r3, [r7, #28]
    da9e:	795b      	ldrb	r3, [r3, #5]
    daa0:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    daa2:	69fb      	ldr	r3, [r7, #28]
    daa4:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    daa6:	085b      	lsrs	r3, r3, #1
    daa8:	b2db      	uxtb	r3, r3
    daaa:	b29a      	uxth	r2, r3
    daac:	2308      	movs	r3, #8
    daae:	18fb      	adds	r3, r7, r3
    dab0:	801a      	strh	r2, [r3, #0]
    dab2:	2308      	movs	r3, #8
    dab4:	18fb      	adds	r3, r7, r3
    dab6:	2201      	movs	r2, #1
    dab8:	805a      	strh	r2, [r3, #2]
    daba:	2308      	movs	r3, #8
    dabc:	18fb      	adds	r3, r7, r3
    dabe:	2214      	movs	r2, #20
    dac0:	18ba      	adds	r2, r7, r2
    dac2:	605a      	str	r2, [r3, #4]
    dac4:	2308      	movs	r3, #8
    dac6:	18fb      	adds	r3, r7, r3
    dac8:	2200      	movs	r2, #0
    daca:	721a      	strb	r2, [r3, #8]
    dacc:	2308      	movs	r3, #8
    dace:	18fb      	adds	r3, r7, r3
    dad0:	2200      	movs	r2, #0
    dad2:	725a      	strb	r2, [r3, #9]
    dad4:	2308      	movs	r3, #8
    dad6:	18fb      	adds	r3, r7, r3
    dad8:	2200      	movs	r2, #0
    dada:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    dadc:	2314      	movs	r3, #20
    dade:	18fb      	adds	r3, r7, r3
    dae0:	2202      	movs	r2, #2
    dae2:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    dae4:	4b0a      	ldr	r3, [pc, #40]	; (db10 <hal_i2c_idle+0x88>)
    dae6:	69ba      	ldr	r2, [r7, #24]
    dae8:	0092      	lsls	r2, r2, #2
    daea:	58d3      	ldr	r3, [r2, r3]
    daec:	001a      	movs	r2, r3
    daee:	2308      	movs	r3, #8
    daf0:	18fb      	adds	r3, r7, r3
    daf2:	0019      	movs	r1, r3
    daf4:	0010      	movs	r0, r2
    daf6:	4b07      	ldr	r3, [pc, #28]	; (db14 <hal_i2c_idle+0x8c>)
    daf8:	4798      	blx	r3
    dafa:	1e03      	subs	r3, r0, #0
    dafc:	d001      	beq.n	db02 <hal_i2c_idle+0x7a>
        return ATCA_COMM_FAIL;
    dafe:	23f0      	movs	r3, #240	; 0xf0
    db00:	e000      	b.n	db04 <hal_i2c_idle+0x7c>

    return ATCA_SUCCESS;
    db02:	2300      	movs	r3, #0

}
    db04:	0018      	movs	r0, r3
    db06:	46bd      	mov	sp, r7
    db08:	b008      	add	sp, #32
    db0a:	bd80      	pop	{r7, pc}
    db0c:	0000be15 	.word	0x0000be15
    db10:	20000d78 	.word	0x20000d78
    db14:	000124d1 	.word	0x000124d1

0000db18 <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    db18:	b580      	push	{r7, lr}
    db1a:	b088      	sub	sp, #32
    db1c:	af00      	add	r7, sp, #0
    db1e:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	0018      	movs	r0, r3
    db24:	4b1d      	ldr	r3, [pc, #116]	; (db9c <hal_i2c_sleep+0x84>)
    db26:	4798      	blx	r3
    db28:	0003      	movs	r3, r0
    db2a:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    db2c:	69fb      	ldr	r3, [r7, #28]
    db2e:	795b      	ldrb	r3, [r3, #5]
    db30:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];
    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    db32:	69fb      	ldr	r3, [r7, #28]
    db34:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    db36:	085b      	lsrs	r3, r3, #1
    db38:	b2db      	uxtb	r3, r3
    db3a:	b29a      	uxth	r2, r3
    db3c:	2308      	movs	r3, #8
    db3e:	18fb      	adds	r3, r7, r3
    db40:	801a      	strh	r2, [r3, #0]
    db42:	2308      	movs	r3, #8
    db44:	18fb      	adds	r3, r7, r3
    db46:	2201      	movs	r2, #1
    db48:	805a      	strh	r2, [r3, #2]
    db4a:	2308      	movs	r3, #8
    db4c:	18fb      	adds	r3, r7, r3
    db4e:	2214      	movs	r2, #20
    db50:	18ba      	adds	r2, r7, r2
    db52:	605a      	str	r2, [r3, #4]
    db54:	2308      	movs	r3, #8
    db56:	18fb      	adds	r3, r7, r3
    db58:	2200      	movs	r2, #0
    db5a:	721a      	strb	r2, [r3, #8]
    db5c:	2308      	movs	r3, #8
    db5e:	18fb      	adds	r3, r7, r3
    db60:	2200      	movs	r2, #0
    db62:	725a      	strb	r2, [r3, #9]
    db64:	2308      	movs	r3, #8
    db66:	18fb      	adds	r3, r7, r3
    db68:	2200      	movs	r2, #0
    db6a:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    db6c:	2314      	movs	r3, #20
    db6e:	18fb      	adds	r3, r7, r3
    db70:	2201      	movs	r2, #1
    db72:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    db74:	4b0a      	ldr	r3, [pc, #40]	; (dba0 <hal_i2c_sleep+0x88>)
    db76:	69ba      	ldr	r2, [r7, #24]
    db78:	0092      	lsls	r2, r2, #2
    db7a:	58d3      	ldr	r3, [r2, r3]
    db7c:	001a      	movs	r2, r3
    db7e:	2308      	movs	r3, #8
    db80:	18fb      	adds	r3, r7, r3
    db82:	0019      	movs	r1, r3
    db84:	0010      	movs	r0, r2
    db86:	4b07      	ldr	r3, [pc, #28]	; (dba4 <hal_i2c_sleep+0x8c>)
    db88:	4798      	blx	r3
    db8a:	1e03      	subs	r3, r0, #0
    db8c:	d001      	beq.n	db92 <hal_i2c_sleep+0x7a>
        return ATCA_COMM_FAIL;
    db8e:	23f0      	movs	r3, #240	; 0xf0
    db90:	e000      	b.n	db94 <hal_i2c_sleep+0x7c>

    return ATCA_SUCCESS;
    db92:	2300      	movs	r3, #0
}
    db94:	0018      	movs	r0, r3
    db96:	46bd      	mov	sp, r7
    db98:	b008      	add	sp, #32
    db9a:	bd80      	pop	{r7, pc}
    db9c:	0000be15 	.word	0x0000be15
    dba0:	20000d78 	.word	0x20000d78
    dba4:	000124d1 	.word	0x000124d1

0000dba8 <hal_i2c_release>:
/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    dba8:	b580      	push	{r7, lr}
    dbaa:	b084      	sub	sp, #16
    dbac:	af00      	add	r7, sp, #0
    dbae:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    dbb4:	4b17      	ldr	r3, [pc, #92]	; (dc14 <hal_i2c_release+0x6c>)
    dbb6:	681b      	ldr	r3, [r3, #0]
    dbb8:	1e5a      	subs	r2, r3, #1
    dbba:	4b16      	ldr	r3, [pc, #88]	; (dc14 <hal_i2c_release+0x6c>)
    dbbc:	601a      	str	r2, [r3, #0]
    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    dbbe:	68fb      	ldr	r3, [r7, #12]
    dbc0:	2b00      	cmp	r3, #0
    dbc2:	d021      	beq.n	dc08 <hal_i2c_release+0x60>
    dbc4:	68fb      	ldr	r3, [r7, #12]
    dbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbc8:	1e5a      	subs	r2, r3, #1
    dbca:	68fb      	ldr	r3, [r7, #12]
    dbcc:	629a      	str	r2, [r3, #40]	; 0x28
    dbce:	68fb      	ldr	r3, [r7, #12]
    dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	dc18      	bgt.n	dc08 <hal_i2c_release+0x60>
    dbd6:	68fb      	ldr	r3, [r7, #12]
    dbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dbda:	4b0f      	ldr	r3, [pc, #60]	; (dc18 <hal_i2c_release+0x70>)
    dbdc:	0092      	lsls	r2, r2, #2
    dbde:	58d3      	ldr	r3, [r2, r3]
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	d011      	beq.n	dc08 <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
    dbe4:	68fb      	ldr	r3, [r7, #12]
    dbe6:	0018      	movs	r0, r3
    dbe8:	4b0c      	ldr	r3, [pc, #48]	; (dc1c <hal_i2c_release+0x74>)
    dbea:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    dbec:	68fb      	ldr	r3, [r7, #12]
    dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dbf0:	4b09      	ldr	r3, [pc, #36]	; (dc18 <hal_i2c_release+0x70>)
    dbf2:	0092      	lsls	r2, r2, #2
    dbf4:	58d3      	ldr	r3, [r2, r3]
    dbf6:	0018      	movs	r0, r3
    dbf8:	4b09      	ldr	r3, [pc, #36]	; (dc20 <hal_i2c_release+0x78>)
    dbfa:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    dbfc:	68fb      	ldr	r3, [r7, #12]
    dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dc00:	4b05      	ldr	r3, [pc, #20]	; (dc18 <hal_i2c_release+0x70>)
    dc02:	0092      	lsls	r2, r2, #2
    dc04:	2100      	movs	r1, #0
    dc06:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
    dc08:	2300      	movs	r3, #0
}
    dc0a:	0018      	movs	r0, r3
    dc0c:	46bd      	mov	sp, r7
    dc0e:	b004      	add	sp, #16
    dc10:	bd80      	pop	{r7, pc}
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	20000704 	.word	0x20000704
    dc18:	20000d78 	.word	0x20000d78
    dc1c:	00011f2d 	.word	0x00011f2d
    dc20:	00019e39 	.word	0x00019e39

0000dc24 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    dc24:	b580      	push	{r7, lr}
    dc26:	b082      	sub	sp, #8
    dc28:	af00      	add	r7, sp, #0
    dc2a:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
    dc2c:	687b      	ldr	r3, [r7, #4]
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d004      	beq.n	dc3c <atca_delay_ms+0x18>
    dc32:	687b      	ldr	r3, [r7, #4]
    dc34:	0018      	movs	r0, r3
    dc36:	4b05      	ldr	r3, [pc, #20]	; (dc4c <atca_delay_ms+0x28>)
    dc38:	4798      	blx	r3
}
    dc3a:	e002      	b.n	dc42 <atca_delay_ms+0x1e>
    delay_ms(delay);
    dc3c:	2001      	movs	r0, #1
    dc3e:	4b04      	ldr	r3, [pc, #16]	; (dc50 <atca_delay_ms+0x2c>)
    dc40:	4798      	blx	r3
}
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	46bd      	mov	sp, r7
    dc46:	b002      	add	sp, #8
    dc48:	bd80      	pop	{r7, pc}
    dc4a:	46c0      	nop			; (mov r8, r8)
    dc4c:	00010d8d 	.word	0x00010d8d
    dc50:	00010d5d 	.word	0x00010d5d

0000dc54 <atcatls_sign>:
 *  \param[in] message A pointer to the 32 byte message to be signed
 *  \param[out] signature A pointer that will hold the 64 byte P256 signature
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_sign(uint8_t slotid, const uint8_t *message, uint8_t *signature)
{
    dc54:	b590      	push	{r4, r7, lr}
    dc56:	b087      	sub	sp, #28
    dc58:	af00      	add	r7, sp, #0
    dc5a:	60b9      	str	r1, [r7, #8]
    dc5c:	607a      	str	r2, [r7, #4]
    dc5e:	230f      	movs	r3, #15
    dc60:	18fb      	adds	r3, r7, r3
    dc62:	1c02      	adds	r2, r0, #0
    dc64:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    dc66:	2317      	movs	r3, #23
    dc68:	18fb      	adds	r3, r7, r3
    dc6a:	2200      	movs	r2, #0
    dc6c:	701a      	strb	r2, [r3, #0]

    do
    {
        // Check the inputs
        if (message == NULL || signature == NULL)
    dc6e:	68bb      	ldr	r3, [r7, #8]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d002      	beq.n	dc7a <atcatls_sign+0x26>
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	2b00      	cmp	r3, #0
    dc78:	d104      	bne.n	dc84 <atcatls_sign+0x30>
        {
            status = ATCA_BAD_PARAM;
    dc7a:	2317      	movs	r3, #23
    dc7c:	18fb      	adds	r3, r7, r3
    dc7e:	22e2      	movs	r2, #226	; 0xe2
    dc80:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Bad input parameters");
    dc82:	e00c      	b.n	dc9e <atcatls_sign+0x4a>
        }
        // Sign the message
        if ((status = atcab_sign(slotid, message, signature)) != ATCA_SUCCESS)
    dc84:	230f      	movs	r3, #15
    dc86:	18fb      	adds	r3, r7, r3
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	b29b      	uxth	r3, r3
    dc8c:	2217      	movs	r2, #23
    dc8e:	18bc      	adds	r4, r7, r2
    dc90:	687a      	ldr	r2, [r7, #4]
    dc92:	68b9      	ldr	r1, [r7, #8]
    dc94:	0018      	movs	r0, r3
    dc96:	4b05      	ldr	r3, [pc, #20]	; (dcac <atcatls_sign+0x58>)
    dc98:	4798      	blx	r3
    dc9a:	0003      	movs	r3, r0
    dc9c:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Sign Failed");

    }
    while (0);

    return status;
    dc9e:	2317      	movs	r3, #23
    dca0:	18fb      	adds	r3, r7, r3
    dca2:	781b      	ldrb	r3, [r3, #0]
}
    dca4:	0018      	movs	r0, r3
    dca6:	46bd      	mov	sp, r7
    dca8:	b007      	add	sp, #28
    dcaa:	bd90      	pop	{r4, r7, pc}
    dcac:	0000d161 	.word	0x0000d161

0000dcb0 <atcatls_verify>:
 *  \param[in] pubkey A pointer to the 64 byte P256 public key used for verificaion
 *  \param[out] verified A pointer to the boolean result of this verify operation
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_verify(const uint8_t *message, const uint8_t *signature, const uint8_t *pubkey, bool *verified)
{
    dcb0:	b5b0      	push	{r4, r5, r7, lr}
    dcb2:	b086      	sub	sp, #24
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	60f8      	str	r0, [r7, #12]
    dcb8:	60b9      	str	r1, [r7, #8]
    dcba:	607a      	str	r2, [r7, #4]
    dcbc:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    dcbe:	2317      	movs	r3, #23
    dcc0:	18fb      	adds	r3, r7, r3
    dcc2:	2200      	movs	r2, #0
    dcc4:	701a      	strb	r2, [r3, #0]

    do
    {
        // Check the inputs
        if (message == NULL || signature == NULL || pubkey == NULL || verified == NULL)
    dcc6:	68fb      	ldr	r3, [r7, #12]
    dcc8:	2b00      	cmp	r3, #0
    dcca:	d008      	beq.n	dcde <atcatls_verify+0x2e>
    dccc:	68bb      	ldr	r3, [r7, #8]
    dcce:	2b00      	cmp	r3, #0
    dcd0:	d005      	beq.n	dcde <atcatls_verify+0x2e>
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d002      	beq.n	dcde <atcatls_verify+0x2e>
    dcd8:	683b      	ldr	r3, [r7, #0]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d104      	bne.n	dce8 <atcatls_verify+0x38>
        {
            status = ATCA_BAD_PARAM;
    dcde:	2317      	movs	r3, #23
    dce0:	18fb      	adds	r3, r7, r3
    dce2:	22e2      	movs	r2, #226	; 0xe2
    dce4:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Bad input parameters");
    dce6:	e009      	b.n	dcfc <atcatls_verify+0x4c>
        }
        // Verify the signature of the message
        if ((status = atcab_verify_extern(message, signature, pubkey, verified)) != ATCA_SUCCESS)
    dce8:	2317      	movs	r3, #23
    dcea:	18fc      	adds	r4, r7, r3
    dcec:	683b      	ldr	r3, [r7, #0]
    dcee:	687a      	ldr	r2, [r7, #4]
    dcf0:	68b9      	ldr	r1, [r7, #8]
    dcf2:	68f8      	ldr	r0, [r7, #12]
    dcf4:	4d05      	ldr	r5, [pc, #20]	; (dd0c <atcatls_verify+0x5c>)
    dcf6:	47a8      	blx	r5
    dcf8:	0003      	movs	r3, r0
    dcfa:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Verify Failed");

    }
    while (0);

    return status;
    dcfc:	2317      	movs	r3, #23
    dcfe:	18fb      	adds	r3, r7, r3
    dd00:	781b      	ldrb	r3, [r3, #0]
}
    dd02:	0018      	movs	r0, r3
    dd04:	46bd      	mov	sp, r7
    dd06:	b006      	add	sp, #24
    dd08:	bdb0      	pop	{r4, r5, r7, pc}
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	0000c98d 	.word	0x0000c98d

0000dd10 <atcatls_create_key>:
 *  \param[in] slotid The slot id to create the ECC private key
 *  \param[out] pubkey Pointer the public key bytes that coorespond to the private key that was created
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_create_key(uint8_t slotid, uint8_t* pubkey)
{
    dd10:	b590      	push	{r4, r7, lr}
    dd12:	b085      	sub	sp, #20
    dd14:	af00      	add	r7, sp, #0
    dd16:	0002      	movs	r2, r0
    dd18:	6039      	str	r1, [r7, #0]
    dd1a:	1dfb      	adds	r3, r7, #7
    dd1c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    dd1e:	230f      	movs	r3, #15
    dd20:	18fb      	adds	r3, r7, r3
    dd22:	2200      	movs	r2, #0
    dd24:	701a      	strb	r2, [r3, #0]

    do
    {
        // Verify input parameters
        if (pubkey == NULL)
    dd26:	683b      	ldr	r3, [r7, #0]
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d104      	bne.n	dd36 <atcatls_create_key+0x26>
        {
            status = ATCA_BAD_PARAM;
    dd2c:	230f      	movs	r3, #15
    dd2e:	18fb      	adds	r3, r7, r3
    dd30:	22e2      	movs	r2, #226	; 0xe2
    dd32:	701a      	strb	r2, [r3, #0]
            BREAK(status, "NULL inputs");
    dd34:	e00b      	b.n	dd4e <atcatls_create_key+0x3e>
        }
        // Call the Genkey command on the specified slot
        if ((status = atcab_genkey(slotid, pubkey)) != ATCA_SUCCESS)
    dd36:	1dfb      	adds	r3, r7, #7
    dd38:	781b      	ldrb	r3, [r3, #0]
    dd3a:	b29b      	uxth	r3, r3
    dd3c:	220f      	movs	r2, #15
    dd3e:	18bc      	adds	r4, r7, r2
    dd40:	683a      	ldr	r2, [r7, #0]
    dd42:	0011      	movs	r1, r2
    dd44:	0018      	movs	r0, r3
    dd46:	4b05      	ldr	r3, [pc, #20]	; (dd5c <atcatls_create_key+0x4c>)
    dd48:	4798      	blx	r3
    dd4a:	0003      	movs	r3, r0
    dd4c:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Create key failed");

    }
    while (0);

    return status;
    dd4e:	230f      	movs	r3, #15
    dd50:	18fb      	adds	r3, r7, r3
    dd52:	781b      	ldrb	r3, [r3, #0]
}
    dd54:	0018      	movs	r0, r3
    dd56:	46bd      	mov	sp, r7
    dd58:	b005      	add	sp, #20
    dd5a:	bd90      	pop	{r4, r7, pc}
    dd5c:	0000c559 	.word	0x0000c559

0000dd60 <system_pinmux_get_group_from_gpio_pin>:
{
    dd60:	b580      	push	{r7, lr}
    dd62:	b084      	sub	sp, #16
    dd64:	af00      	add	r7, sp, #0
    dd66:	0002      	movs	r2, r0
    dd68:	1dfb      	adds	r3, r7, #7
    dd6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    dd6c:	230f      	movs	r3, #15
    dd6e:	18fb      	adds	r3, r7, r3
    dd70:	1dfa      	adds	r2, r7, #7
    dd72:	7812      	ldrb	r2, [r2, #0]
    dd74:	09d2      	lsrs	r2, r2, #7
    dd76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    dd78:	230e      	movs	r3, #14
    dd7a:	18fb      	adds	r3, r7, r3
    dd7c:	1dfa      	adds	r2, r7, #7
    dd7e:	7812      	ldrb	r2, [r2, #0]
    dd80:	0952      	lsrs	r2, r2, #5
    dd82:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    dd84:	4b0d      	ldr	r3, [pc, #52]	; (ddbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    dd86:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    dd88:	230f      	movs	r3, #15
    dd8a:	18fb      	adds	r3, r7, r3
    dd8c:	781b      	ldrb	r3, [r3, #0]
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d10f      	bne.n	ddb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    dd92:	230f      	movs	r3, #15
    dd94:	18fb      	adds	r3, r7, r3
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	009b      	lsls	r3, r3, #2
    dd9a:	2210      	movs	r2, #16
    dd9c:	4694      	mov	ip, r2
    dd9e:	44bc      	add	ip, r7
    dda0:	4463      	add	r3, ip
    dda2:	3b08      	subs	r3, #8
    dda4:	681a      	ldr	r2, [r3, #0]
    dda6:	230e      	movs	r3, #14
    dda8:	18fb      	adds	r3, r7, r3
    ddaa:	781b      	ldrb	r3, [r3, #0]
    ddac:	01db      	lsls	r3, r3, #7
    ddae:	18d3      	adds	r3, r2, r3
    ddb0:	e000      	b.n	ddb4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ddb2:	2300      	movs	r3, #0
}
    ddb4:	0018      	movs	r0, r3
    ddb6:	46bd      	mov	sp, r7
    ddb8:	b004      	add	sp, #16
    ddba:	bd80      	pop	{r7, pc}
    ddbc:	40002800 	.word	0x40002800

0000ddc0 <port_get_group_from_gpio_pin>:
{
    ddc0:	b580      	push	{r7, lr}
    ddc2:	b082      	sub	sp, #8
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	0002      	movs	r2, r0
    ddc8:	1dfb      	adds	r3, r7, #7
    ddca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ddcc:	1dfb      	adds	r3, r7, #7
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	0018      	movs	r0, r3
    ddd2:	4b03      	ldr	r3, [pc, #12]	; (dde0 <port_get_group_from_gpio_pin+0x20>)
    ddd4:	4798      	blx	r3
    ddd6:	0003      	movs	r3, r0
}
    ddd8:	0018      	movs	r0, r3
    ddda:	46bd      	mov	sp, r7
    dddc:	b002      	add	sp, #8
    ddde:	bd80      	pop	{r7, pc}
    dde0:	0000dd61 	.word	0x0000dd61

0000dde4 <port_pin_set_output_level>:
{
    dde4:	b580      	push	{r7, lr}
    dde6:	b084      	sub	sp, #16
    dde8:	af00      	add	r7, sp, #0
    ddea:	0002      	movs	r2, r0
    ddec:	1dfb      	adds	r3, r7, #7
    ddee:	701a      	strb	r2, [r3, #0]
    ddf0:	1dbb      	adds	r3, r7, #6
    ddf2:	1c0a      	adds	r2, r1, #0
    ddf4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ddf6:	1dfb      	adds	r3, r7, #7
    ddf8:	781b      	ldrb	r3, [r3, #0]
    ddfa:	0018      	movs	r0, r3
    ddfc:	4b0d      	ldr	r3, [pc, #52]	; (de34 <port_pin_set_output_level+0x50>)
    ddfe:	4798      	blx	r3
    de00:	0003      	movs	r3, r0
    de02:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    de04:	1dfb      	adds	r3, r7, #7
    de06:	781b      	ldrb	r3, [r3, #0]
    de08:	221f      	movs	r2, #31
    de0a:	4013      	ands	r3, r2
    de0c:	2201      	movs	r2, #1
    de0e:	409a      	lsls	r2, r3
    de10:	0013      	movs	r3, r2
    de12:	60bb      	str	r3, [r7, #8]
	if (level) {
    de14:	1dbb      	adds	r3, r7, #6
    de16:	781b      	ldrb	r3, [r3, #0]
    de18:	2b00      	cmp	r3, #0
    de1a:	d003      	beq.n	de24 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	68ba      	ldr	r2, [r7, #8]
    de20:	619a      	str	r2, [r3, #24]
}
    de22:	e002      	b.n	de2a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    de24:	68fb      	ldr	r3, [r7, #12]
    de26:	68ba      	ldr	r2, [r7, #8]
    de28:	615a      	str	r2, [r3, #20]
}
    de2a:	46c0      	nop			; (mov r8, r8)
    de2c:	46bd      	mov	sp, r7
    de2e:	b004      	add	sp, #16
    de30:	bd80      	pop	{r7, pc}
    de32:	46c0      	nop			; (mov r8, r8)
    de34:	0000ddc1 	.word	0x0000ddc1

0000de38 <PHY_DataReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Trigger to Transmit Packet
void PHY_DataReq(uint8_t* data)
{
    de38:	b580      	push	{r7, lr}
    de3a:	b082      	sub	sp, #8
    de3c:	af00      	add	r7, sp, #0
    de3e:	6078      	str	r0, [r7, #4]
    phyTrxSetState(TRX_CMD_TX_ARET_ON);
    de40:	2019      	movs	r0, #25
    de42:	4b14      	ldr	r3, [pc, #80]	; (de94 <PHY_DataReq+0x5c>)
    de44:	4798      	blx	r3

    phyReadRegister(RG_IRQ_STATUS);
    de46:	200f      	movs	r0, #15
    de48:	4b13      	ldr	r3, [pc, #76]	; (de98 <PHY_DataReq+0x60>)
    de4a:	4798      	blx	r3

    /* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
    data[1] += 2; // 2
    de4c:	687b      	ldr	r3, [r7, #4]
    de4e:	3301      	adds	r3, #1
    de50:	687a      	ldr	r2, [r7, #4]
    de52:	3201      	adds	r2, #1
    de54:	7812      	ldrb	r2, [r2, #0]
    de56:	3202      	adds	r2, #2
    de58:	b2d2      	uxtb	r2, r2
    de5a:	701a      	strb	r2, [r3, #0]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	1c5a      	adds	r2, r3, #1
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	3301      	adds	r3, #1
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	3b01      	subs	r3, #1
    de68:	b2db      	uxtb	r3, r3
    de6a:	0019      	movs	r1, r3
    de6c:	0010      	movs	r0, r2
    de6e:	4b0b      	ldr	r3, [pc, #44]	; (de9c <PHY_DataReq+0x64>)
    de70:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
    de72:	4b0b      	ldr	r3, [pc, #44]	; (dea0 <PHY_DataReq+0x68>)
    de74:	2203      	movs	r2, #3
    de76:	701a      	strb	r2, [r3, #0]

    TRX_SLP_TR_HIGH();
    de78:	2101      	movs	r1, #1
    de7a:	2014      	movs	r0, #20
    de7c:	4b09      	ldr	r3, [pc, #36]	; (dea4 <PHY_DataReq+0x6c>)
    de7e:	4798      	blx	r3
  __ASM volatile ("nop");
    de80:	46c0      	nop			; (mov r8, r8)
    de82:	46c0      	nop			; (mov r8, r8)
    TRX_TRIG_DELAY();
    TRX_SLP_TR_LOW();
    de84:	2100      	movs	r1, #0
    de86:	2014      	movs	r0, #20
    de88:	4b06      	ldr	r3, [pc, #24]	; (dea4 <PHY_DataReq+0x6c>)
    de8a:	4798      	blx	r3
}
    de8c:	46c0      	nop			; (mov r8, r8)
    de8e:	46bd      	mov	sp, r7
    de90:	b002      	add	sp, #8
    de92:	bd80      	pop	{r7, pc}
    de94:	0000f1cd 	.word	0x0000f1cd
    de98:	0000f13d 	.word	0x0000f13d
    de9c:	0000983d 	.word	0x0000983d
    dea0:	2000073e 	.word	0x2000073e
    dea4:	0000dde5 	.word	0x0000dde5

0000dea8 <PHY_RandomReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Random Number Generator
uint16_t PHY_RandomReq(void)
{
    dea8:	b580      	push	{r7, lr}
    deaa:	b082      	sub	sp, #8
    deac:	af00      	add	r7, sp, #0
    uint16_t rnd = 0;
    deae:	1dbb      	adds	r3, r7, #6
    deb0:	2200      	movs	r2, #0
    deb2:	801a      	strh	r2, [r3, #0]
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);
    deb4:	2006      	movs	r0, #6
    deb6:	4b19      	ldr	r3, [pc, #100]	; (df1c <PHY_RandomReq+0x74>)
    deb8:	4798      	blx	r3

    for (uint8_t i = 0; i < 16; i += 2) {
    deba:	1d7b      	adds	r3, r7, #5
    debc:	2200      	movs	r2, #0
    debe:	701a      	strb	r2, [r3, #0]
    dec0:	e01f      	b.n	df02 <PHY_RandomReq+0x5a>
        delay_cycles_us(1);
    dec2:	2001      	movs	r0, #1
    dec4:	4b16      	ldr	r3, [pc, #88]	; (df20 <PHY_RandomReq+0x78>)
    dec6:	4798      	blx	r3
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    dec8:	2006      	movs	r0, #6
    deca:	4b16      	ldr	r3, [pc, #88]	; (df24 <PHY_RandomReq+0x7c>)
    decc:	4798      	blx	r3
    dece:	0003      	movs	r3, r0
    ded0:	095b      	lsrs	r3, r3, #5
    ded2:	b2da      	uxtb	r2, r3
    ded4:	1d3b      	adds	r3, r7, #4
    ded6:	2103      	movs	r1, #3
    ded8:	400a      	ands	r2, r1
    deda:	701a      	strb	r2, [r3, #0]
        rnd |= rndValue << i;
    dedc:	1d3b      	adds	r3, r7, #4
    dede:	781a      	ldrb	r2, [r3, #0]
    dee0:	1d7b      	adds	r3, r7, #5
    dee2:	781b      	ldrb	r3, [r3, #0]
    dee4:	409a      	lsls	r2, r3
    dee6:	0013      	movs	r3, r2
    dee8:	b21a      	sxth	r2, r3
    deea:	1dbb      	adds	r3, r7, #6
    deec:	2100      	movs	r1, #0
    deee:	5e5b      	ldrsh	r3, [r3, r1]
    def0:	4313      	orrs	r3, r2
    def2:	b21a      	sxth	r2, r3
    def4:	1dbb      	adds	r3, r7, #6
    def6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 16; i += 2) {
    def8:	1d7b      	adds	r3, r7, #5
    defa:	1d7a      	adds	r2, r7, #5
    defc:	7812      	ldrb	r2, [r2, #0]
    defe:	3202      	adds	r2, #2
    df00:	701a      	strb	r2, [r3, #0]
    df02:	1d7b      	adds	r3, r7, #5
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b0f      	cmp	r3, #15
    df08:	d9db      	bls.n	dec2 <PHY_RandomReq+0x1a>
    }
    phySetRxState();
    df0a:	4b07      	ldr	r3, [pc, #28]	; (df28 <PHY_RandomReq+0x80>)
    df0c:	4798      	blx	r3

    return rnd;
    df0e:	1dbb      	adds	r3, r7, #6
    df10:	881b      	ldrh	r3, [r3, #0]
}
    df12:	0018      	movs	r0, r3
    df14:	46bd      	mov	sp, r7
    df16:	b002      	add	sp, #8
    df18:	bd80      	pop	{r7, pc}
    df1a:	46c0      	nop			; (mov r8, r8)
    df1c:	0000f1cd 	.word	0x0000f1cd
    df20:	00010d5d 	.word	0x00010d5d
    df24:	0000f13d 	.word	0x0000f13d
    df28:	0000f19d 	.word	0x0000f19d

0000df2c <PHY_Init>:

/*************************************************************************/ /**
*****************************************************************************/
// Radio Initialization
void PHY_Init(void)
{
    df2c:	b580      	push	{r7, lr}
    df2e:	af00      	add	r7, sp, #0
    trx_spi_init();
    df30:	4b11      	ldr	r3, [pc, #68]	; (df78 <PHY_Init+0x4c>)
    df32:	4798      	blx	r3
    PhyReset();
    df34:	4b11      	ldr	r3, [pc, #68]	; (df7c <PHY_Init+0x50>)
    df36:	4798      	blx	r3
    phyRxState = false;
    df38:	4b11      	ldr	r3, [pc, #68]	; (df80 <PHY_Init+0x54>)
    df3a:	2200      	movs	r2, #0
    df3c:	701a      	strb	r2, [r3, #0]

    phyWriteRegister(RG_IRQ_MASK, 0xFF);
    df3e:	21ff      	movs	r1, #255	; 0xff
    df40:	200e      	movs	r0, #14
    df42:	4b10      	ldr	r3, [pc, #64]	; (df84 <PHY_Init+0x58>)
    df44:	4798      	blx	r3
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
    df46:	2108      	movs	r1, #8
    df48:	2002      	movs	r0, #2
    df4a:	4b0e      	ldr	r3, [pc, #56]	; (df84 <PHY_Init+0x58>)
    df4c:	4798      	blx	r3
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    df4e:	2001      	movs	r0, #1
    df50:	4b0d      	ldr	r3, [pc, #52]	; (df88 <PHY_Init+0x5c>)
    df52:	4798      	blx	r3
    df54:	0003      	movs	r3, r0
    df56:	001a      	movs	r2, r3
    df58:	231f      	movs	r3, #31
    df5a:	4013      	ands	r3, r2
    df5c:	2b08      	cmp	r3, #8
    df5e:	d1f2      	bne.n	df46 <PHY_Init+0x1a>

    phyWriteRegister(RG_TRX_CTRL_1,
    df60:	212e      	movs	r1, #46	; 0x2e
    df62:	2004      	movs	r0, #4
    df64:	4b07      	ldr	r3, [pc, #28]	; (df84 <PHY_Init+0x58>)
    df66:	4798      	blx	r3
        (1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) | (1 << IRQ_MASK_MODE));

    phyWriteRegister(RG_TRX_CTRL_2,
    df68:	21a0      	movs	r1, #160	; 0xa0
    df6a:	200c      	movs	r0, #12
    df6c:	4b05      	ldr	r3, [pc, #20]	; (df84 <PHY_Init+0x58>)
    df6e:	4798      	blx	r3
        (1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    df70:	46c0      	nop			; (mov r8, r8)
    df72:	46bd      	mov	sp, r7
    df74:	bd80      	pop	{r7, pc}
    df76:	46c0      	nop			; (mov r8, r8)
    df78:	00009301 	.word	0x00009301
    df7c:	000093f9 	.word	0x000093f9
    df80:	200007c0 	.word	0x200007c0
    df84:	0000f10d 	.word	0x0000f10d
    df88:	0000f13d 	.word	0x0000f13d

0000df8c <PHY_SetRxState>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Radio to Receive State
void PHY_SetRxState(bool rx)
{
    df8c:	b580      	push	{r7, lr}
    df8e:	b082      	sub	sp, #8
    df90:	af00      	add	r7, sp, #0
    df92:	0002      	movs	r2, r0
    df94:	1dfb      	adds	r3, r7, #7
    df96:	701a      	strb	r2, [r3, #0]
    phyRxState = rx;
    df98:	4b04      	ldr	r3, [pc, #16]	; (dfac <PHY_SetRxState+0x20>)
    df9a:	1dfa      	adds	r2, r7, #7
    df9c:	7812      	ldrb	r2, [r2, #0]
    df9e:	701a      	strb	r2, [r3, #0]
    phySetRxState();
    dfa0:	4b03      	ldr	r3, [pc, #12]	; (dfb0 <PHY_SetRxState+0x24>)
    dfa2:	4798      	blx	r3
}
    dfa4:	46c0      	nop			; (mov r8, r8)
    dfa6:	46bd      	mov	sp, r7
    dfa8:	b002      	add	sp, #8
    dfaa:	bd80      	pop	{r7, pc}
    dfac:	200007c0 	.word	0x200007c0
    dfb0:	0000f19d 	.word	0x0000f19d

0000dfb4 <PHY_SetChannel>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Channel
void PHY_SetChannel(uint8_t channel)
{
    dfb4:	b580      	push	{r7, lr}
    dfb6:	b084      	sub	sp, #16
    dfb8:	af00      	add	r7, sp, #0
    dfba:	0002      	movs	r2, r0
    dfbc:	1dfb      	adds	r3, r7, #7
    dfbe:	701a      	strb	r2, [r3, #0]
    uint8_t reg;

    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    dfc0:	2008      	movs	r0, #8
    dfc2:	4b0c      	ldr	r3, [pc, #48]	; (dff4 <PHY_SetChannel+0x40>)
    dfc4:	4798      	blx	r3
    dfc6:	0003      	movs	r3, r0
    dfc8:	0019      	movs	r1, r3
    dfca:	230f      	movs	r3, #15
    dfcc:	18fb      	adds	r3, r7, r3
    dfce:	221f      	movs	r2, #31
    dfd0:	4391      	bics	r1, r2
    dfd2:	000a      	movs	r2, r1
    dfd4:	701a      	strb	r2, [r3, #0]
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    dfd6:	230f      	movs	r3, #15
    dfd8:	18fa      	adds	r2, r7, r3
    dfda:	1dfb      	adds	r3, r7, #7
    dfdc:	7812      	ldrb	r2, [r2, #0]
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	4313      	orrs	r3, r2
    dfe2:	b2db      	uxtb	r3, r3
    dfe4:	0019      	movs	r1, r3
    dfe6:	2008      	movs	r0, #8
    dfe8:	4b03      	ldr	r3, [pc, #12]	; (dff8 <PHY_SetChannel+0x44>)
    dfea:	4798      	blx	r3
}
    dfec:	46c0      	nop			; (mov r8, r8)
    dfee:	46bd      	mov	sp, r7
    dff0:	b004      	add	sp, #16
    dff2:	bd80      	pop	{r7, pc}
    dff4:	0000f13d 	.word	0x0000f13d
    dff8:	0000f10d 	.word	0x0000f10d

0000dffc <PHY_SetPanId>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Pan ID
void PHY_SetPanId(uint16_t panId)
{
    dffc:	b580      	push	{r7, lr}
    dffe:	b084      	sub	sp, #16
    e000:	af00      	add	r7, sp, #0
    e002:	0002      	movs	r2, r0
    e004:	1dbb      	adds	r3, r7, #6
    e006:	801a      	strh	r2, [r3, #0]
    uint8_t* d = (uint8_t*)&panId;
    e008:	1dbb      	adds	r3, r7, #6
    e00a:	60fb      	str	r3, [r7, #12]
    phyWriteRegister(RG_PAN_ID_0, d[0]);
    e00c:	68fb      	ldr	r3, [r7, #12]
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	0019      	movs	r1, r3
    e012:	2022      	movs	r0, #34	; 0x22
    e014:	4b06      	ldr	r3, [pc, #24]	; (e030 <PHY_SetPanId+0x34>)
    e016:	4798      	blx	r3
    phyWriteRegister(RG_PAN_ID_1, d[1]);
    e018:	68fb      	ldr	r3, [r7, #12]
    e01a:	3301      	adds	r3, #1
    e01c:	781b      	ldrb	r3, [r3, #0]
    e01e:	0019      	movs	r1, r3
    e020:	2023      	movs	r0, #35	; 0x23
    e022:	4b03      	ldr	r3, [pc, #12]	; (e030 <PHY_SetPanId+0x34>)
    e024:	4798      	blx	r3
}
    e026:	46c0      	nop			; (mov r8, r8)
    e028:	46bd      	mov	sp, r7
    e02a:	b004      	add	sp, #16
    e02c:	bd80      	pop	{r7, pc}
    e02e:	46c0      	nop			; (mov r8, r8)
    e030:	0000f10d 	.word	0x0000f10d

0000e034 <PHY_SetShortAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Short Address
void PHY_SetShortAddr(uint16_t addr)
{
    e034:	b580      	push	{r7, lr}
    e036:	b084      	sub	sp, #16
    e038:	af00      	add	r7, sp, #0
    e03a:	0002      	movs	r2, r0
    e03c:	1dbb      	adds	r3, r7, #6
    e03e:	801a      	strh	r2, [r3, #0]
    uint8_t* d = (uint8_t*)&addr;
    e040:	1dbb      	adds	r3, r7, #6
    e042:	60fb      	str	r3, [r7, #12]

    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
    e044:	68fb      	ldr	r3, [r7, #12]
    e046:	781b      	ldrb	r3, [r3, #0]
    e048:	0019      	movs	r1, r3
    e04a:	2020      	movs	r0, #32
    e04c:	4b0b      	ldr	r3, [pc, #44]	; (e07c <PHY_SetShortAddr+0x48>)
    e04e:	4798      	blx	r3
    phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
    e050:	68fb      	ldr	r3, [r7, #12]
    e052:	3301      	adds	r3, #1
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	0019      	movs	r1, r3
    e058:	2021      	movs	r0, #33	; 0x21
    e05a:	4b08      	ldr	r3, [pc, #32]	; (e07c <PHY_SetShortAddr+0x48>)
    e05c:	4798      	blx	r3
    phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
    e05e:	68fb      	ldr	r3, [r7, #12]
    e060:	781a      	ldrb	r2, [r3, #0]
    e062:	68fb      	ldr	r3, [r7, #12]
    e064:	3301      	adds	r3, #1
    e066:	781b      	ldrb	r3, [r3, #0]
    e068:	18d3      	adds	r3, r2, r3
    e06a:	b2db      	uxtb	r3, r3
    e06c:	0019      	movs	r1, r3
    e06e:	202d      	movs	r0, #45	; 0x2d
    e070:	4b02      	ldr	r3, [pc, #8]	; (e07c <PHY_SetShortAddr+0x48>)
    e072:	4798      	blx	r3
}
    e074:	46c0      	nop			; (mov r8, r8)
    e076:	46bd      	mov	sp, r7
    e078:	b004      	add	sp, #16
    e07a:	bd80      	pop	{r7, pc}
    e07c:	0000f10d 	.word	0x0000f10d

0000e080 <PHY_EncryptReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Encrypt Block
void PHY_EncryptReq(uint8_t* text, uint8_t* key)
{
    e080:	b580      	push	{r7, lr}
    e082:	b082      	sub	sp, #8
    e084:	af00      	add	r7, sp, #0
    e086:	6078      	str	r0, [r7, #4]
    e088:	6039      	str	r1, [r7, #0]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    e08a:	683b      	ldr	r3, [r7, #0]
    e08c:	2200      	movs	r2, #0
    e08e:	2100      	movs	r1, #0
    e090:	0018      	movs	r0, r3
    e092:	4b07      	ldr	r3, [pc, #28]	; (e0b0 <PHY_EncryptReq+0x30>)
    e094:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
    sal_aes_wrrd(text, NULL);
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	2100      	movs	r1, #0
    e09a:	0018      	movs	r0, r3
    e09c:	4b05      	ldr	r3, [pc, #20]	; (e0b4 <PHY_EncryptReq+0x34>)
    e09e:	4798      	blx	r3
#else
    sal_aes_exec(text);
#endif
    sal_aes_read(text);
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	0018      	movs	r0, r3
    e0a4:	4b04      	ldr	r3, [pc, #16]	; (e0b8 <PHY_EncryptReq+0x38>)
    e0a6:	4798      	blx	r3
}
    e0a8:	46c0      	nop			; (mov r8, r8)
    e0aa:	46bd      	mov	sp, r7
    e0ac:	b002      	add	sp, #8
    e0ae:	bd80      	pop	{r7, pc}
    e0b0:	00016bad 	.word	0x00016bad
    e0b4:	00016d71 	.word	0x00016d71
    e0b8:	00016dfd 	.word	0x00016dfd

0000e0bc <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress(uint8_t* Address, uint8_t* PANID)
{
    e0bc:	b580      	push	{r7, lr}
    e0be:	b082      	sub	sp, #8
    e0c0:	af00      	add	r7, sp, #0
    e0c2:	6078      	str	r0, [r7, #4]
    e0c4:	6039      	str	r1, [r7, #0]
    myNetworkAddress.v[0] = Address[0];
    e0c6:	687b      	ldr	r3, [r7, #4]
    e0c8:	781a      	ldrb	r2, [r3, #0]
    e0ca:	4b0d      	ldr	r3, [pc, #52]	; (e100 <MiMAC_SetAltAddress+0x44>)
    e0cc:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	785a      	ldrb	r2, [r3, #1]
    e0d2:	4b0b      	ldr	r3, [pc, #44]	; (e100 <MiMAC_SetAltAddress+0x44>)
    e0d4:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
    e0d6:	683b      	ldr	r3, [r7, #0]
    e0d8:	781a      	ldrb	r2, [r3, #0]
    e0da:	4b0a      	ldr	r3, [pc, #40]	; (e104 <MiMAC_SetAltAddress+0x48>)
    e0dc:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
    e0de:	683b      	ldr	r3, [r7, #0]
    e0e0:	785a      	ldrb	r2, [r3, #1]
    e0e2:	4b08      	ldr	r3, [pc, #32]	; (e104 <MiMAC_SetAltAddress+0x48>)
    e0e4:	705a      	strb	r2, [r3, #1]
    PHY_SetShortAddr(APP_ADDR);
    e0e6:	2001      	movs	r0, #1
    e0e8:	4b07      	ldr	r3, [pc, #28]	; (e108 <MiMAC_SetAltAddress+0x4c>)
    e0ea:	4798      	blx	r3
    PHY_SetPanId(MY_PAN_ID);
    e0ec:	4b07      	ldr	r3, [pc, #28]	; (e10c <MiMAC_SetAltAddress+0x50>)
    e0ee:	0018      	movs	r0, r3
    e0f0:	4b07      	ldr	r3, [pc, #28]	; (e110 <MiMAC_SetAltAddress+0x54>)
    e0f2:	4798      	blx	r3
    return true;
    e0f4:	2301      	movs	r3, #1
}
    e0f6:	0018      	movs	r0, r3
    e0f8:	46bd      	mov	sp, r7
    e0fa:	b002      	add	sp, #8
    e0fc:	bd80      	pop	{r7, pc}
    e0fe:	46c0      	nop			; (mov r8, r8)
    e100:	20000d94 	.word	0x20000d94
    e104:	20001408 	.word	0x20001408
    e108:	0000e035 	.word	0x0000e035
    e10c:	00001111 	.word	0x00001111
    e110:	0000dffd 	.word	0x0000dffd

0000e114 <mic_generator>:

#if defined(ENABLE_SECURITY)
void mic_generator(uint8_t* Payloadinfo, uint8_t len, uint8_t frame_control, API_UINT32_UNION FrameCounter, uint8_t* SourceIEEEAddress)
{
    e114:	b580      	push	{r7, lr}
    e116:	b0aa      	sub	sp, #168	; 0xa8
    e118:	af00      	add	r7, sp, #0
    e11a:	60f8      	str	r0, [r7, #12]
    e11c:	0008      	movs	r0, r1
    e11e:	0011      	movs	r1, r2
    e120:	607b      	str	r3, [r7, #4]
    e122:	230b      	movs	r3, #11
    e124:	18fb      	adds	r3, r7, r3
    e126:	1c02      	adds	r2, r0, #0
    e128:	701a      	strb	r2, [r3, #0]
    e12a:	230a      	movs	r3, #10
    e12c:	18fb      	adds	r3, r7, r3
    e12e:	1c0a      	adds	r2, r1, #0
    e130:	701a      	strb	r2, [r3, #0]
    uint8_t i, j, iterations, copy_packet[FRAME_BUFFER], cbc_header_with_padding[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = len / AES_BLOCKSIZE;
    e132:	23a5      	movs	r3, #165	; 0xa5
    e134:	18fb      	adds	r3, r7, r3
    e136:	220b      	movs	r2, #11
    e138:	18ba      	adds	r2, r7, r2
    e13a:	7812      	ldrb	r2, [r2, #0]
    e13c:	0912      	lsrs	r2, r2, #4
    e13e:	701a      	strb	r2, [r3, #0]
    if (len % AES_BLOCKSIZE != 0)
    e140:	230b      	movs	r3, #11
    e142:	18fb      	adds	r3, r7, r3
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	220f      	movs	r2, #15
    e148:	4013      	ands	r3, r2
    e14a:	b2db      	uxtb	r3, r3
    e14c:	2b00      	cmp	r3, #0
    e14e:	d006      	beq.n	e15e <mic_generator+0x4a>
        iterations++;
    e150:	23a5      	movs	r3, #165	; 0xa5
    e152:	18fb      	adds	r3, r7, r3
    e154:	781a      	ldrb	r2, [r3, #0]
    e156:	23a5      	movs	r3, #165	; 0xa5
    e158:	18fb      	adds	r3, r7, r3
    e15a:	3201      	adds	r2, #1
    e15c:	701a      	strb	r2, [r3, #0]
    InitVect_in[0] = frame_control; //0x49
    e15e:	4b9f      	ldr	r3, [pc, #636]	; (e3dc <mic_generator+0x2c8>)
    e160:	220a      	movs	r2, #10
    e162:	18ba      	adds	r2, r7, r2
    e164:	7812      	ldrb	r2, [r2, #0]
    e166:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
    e168:	2314      	movs	r3, #20
    e16a:	18fb      	adds	r3, r7, r3
    e16c:	2200      	movs	r2, #0
    e16e:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
    e170:	2314      	movs	r3, #20
    e172:	18fb      	adds	r3, r7, r3
    e174:	220d      	movs	r2, #13
    e176:	705a      	strb	r2, [r3, #1]
    cbc_header_with_padding[2] = frame_control; //frame_control;
    e178:	2314      	movs	r3, #20
    e17a:	18fb      	adds	r3, r7, r3
    e17c:	220a      	movs	r2, #10
    e17e:	18ba      	adds	r2, r7, r2
    e180:	7812      	ldrb	r2, [r2, #0]
    e182:	709a      	strb	r2, [r3, #2]
    for (i = 0; i < 8; i++) {
    e184:	23a7      	movs	r3, #167	; 0xa7
    e186:	18fb      	adds	r3, r7, r3
    e188:	2200      	movs	r2, #0
    e18a:	701a      	strb	r2, [r3, #0]
    e18c:	e023      	b.n	e1d6 <mic_generator+0xc2>
        InitVect_in[i + 1] = SourceIEEEAddress[i];
    e18e:	23a7      	movs	r3, #167	; 0xa7
    e190:	18fb      	adds	r3, r7, r3
    e192:	781b      	ldrb	r3, [r3, #0]
    e194:	3301      	adds	r3, #1
    e196:	22a7      	movs	r2, #167	; 0xa7
    e198:	18ba      	adds	r2, r7, r2
    e19a:	7812      	ldrb	r2, [r2, #0]
    e19c:	21b0      	movs	r1, #176	; 0xb0
    e19e:	1879      	adds	r1, r7, r1
    e1a0:	6809      	ldr	r1, [r1, #0]
    e1a2:	188a      	adds	r2, r1, r2
    e1a4:	7811      	ldrb	r1, [r2, #0]
    e1a6:	4a8d      	ldr	r2, [pc, #564]	; (e3dc <mic_generator+0x2c8>)
    e1a8:	54d1      	strb	r1, [r2, r3]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
    e1aa:	23a7      	movs	r3, #167	; 0xa7
    e1ac:	18fb      	adds	r3, r7, r3
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	3307      	adds	r3, #7
    e1b2:	22a7      	movs	r2, #167	; 0xa7
    e1b4:	18ba      	adds	r2, r7, r2
    e1b6:	7812      	ldrb	r2, [r2, #0]
    e1b8:	21b0      	movs	r1, #176	; 0xb0
    e1ba:	1879      	adds	r1, r7, r1
    e1bc:	6809      	ldr	r1, [r1, #0]
    e1be:	188a      	adds	r2, r1, r2
    e1c0:	7811      	ldrb	r1, [r2, #0]
    e1c2:	2214      	movs	r2, #20
    e1c4:	18ba      	adds	r2, r7, r2
    e1c6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 8; i++) {
    e1c8:	23a7      	movs	r3, #167	; 0xa7
    e1ca:	18fb      	adds	r3, r7, r3
    e1cc:	781a      	ldrb	r2, [r3, #0]
    e1ce:	23a7      	movs	r3, #167	; 0xa7
    e1d0:	18fb      	adds	r3, r7, r3
    e1d2:	3201      	adds	r2, #1
    e1d4:	701a      	strb	r2, [r3, #0]
    e1d6:	23a7      	movs	r3, #167	; 0xa7
    e1d8:	18fb      	adds	r3, r7, r3
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	2b07      	cmp	r3, #7
    e1de:	d9d6      	bls.n	e18e <mic_generator+0x7a>
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
    e1e0:	23a7      	movs	r3, #167	; 0xa7
    e1e2:	18fb      	adds	r3, r7, r3
    e1e4:	2200      	movs	r2, #0
    e1e6:	701a      	strb	r2, [r3, #0]
    e1e8:	e01d      	b.n	e226 <mic_generator+0x112>
        InitVect_in[i + 9] = FrameCounter.v[i];
    e1ea:	23a7      	movs	r3, #167	; 0xa7
    e1ec:	18fb      	adds	r3, r7, r3
    e1ee:	781b      	ldrb	r3, [r3, #0]
    e1f0:	3309      	adds	r3, #9
    e1f2:	22a7      	movs	r2, #167	; 0xa7
    e1f4:	18ba      	adds	r2, r7, r2
    e1f6:	7812      	ldrb	r2, [r2, #0]
    e1f8:	1d39      	adds	r1, r7, #4
    e1fa:	5c89      	ldrb	r1, [r1, r2]
    e1fc:	4a77      	ldr	r2, [pc, #476]	; (e3dc <mic_generator+0x2c8>)
    e1fe:	54d1      	strb	r1, [r2, r3]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    e200:	23a7      	movs	r3, #167	; 0xa7
    e202:	18fb      	adds	r3, r7, r3
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	3303      	adds	r3, #3
    e208:	22a7      	movs	r2, #167	; 0xa7
    e20a:	18ba      	adds	r2, r7, r2
    e20c:	7812      	ldrb	r2, [r2, #0]
    e20e:	1d39      	adds	r1, r7, #4
    e210:	5c89      	ldrb	r1, [r1, r2]
    e212:	2214      	movs	r2, #20
    e214:	18ba      	adds	r2, r7, r2
    e216:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
    e218:	23a7      	movs	r3, #167	; 0xa7
    e21a:	18fb      	adds	r3, r7, r3
    e21c:	781a      	ldrb	r2, [r3, #0]
    e21e:	23a7      	movs	r3, #167	; 0xa7
    e220:	18fb      	adds	r3, r7, r3
    e222:	3201      	adds	r2, #1
    e224:	701a      	strb	r2, [r3, #0]
    e226:	23a7      	movs	r3, #167	; 0xa7
    e228:	18fb      	adds	r3, r7, r3
    e22a:	781b      	ldrb	r3, [r3, #0]
    e22c:	2b03      	cmp	r3, #3
    e22e:	d9dc      	bls.n	e1ea <mic_generator+0xd6>
    }
    //cbc_header_with_padding[14] = 0x00;  // Padding
    cbc_header_with_padding[15] = 0x00; // Padding
    e230:	2314      	movs	r3, #20
    e232:	18fb      	adds	r3, r7, r3
    e234:	2200      	movs	r2, #0
    e236:	73da      	strb	r2, [r3, #15]
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    e238:	4b68      	ldr	r3, [pc, #416]	; (e3dc <mic_generator+0x2c8>)
    e23a:	2204      	movs	r2, #4
    e23c:	735a      	strb	r2, [r3, #13]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
    e23e:	4b67      	ldr	r3, [pc, #412]	; (e3dc <mic_generator+0x2c8>)
    e240:	2200      	movs	r2, #0
    e242:	739a      	strb	r2, [r3, #14]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    e244:	4b65      	ldr	r3, [pc, #404]	; (e3dc <mic_generator+0x2c8>)
    e246:	220b      	movs	r2, #11
    e248:	18ba      	adds	r2, r7, r2
    e24a:	7812      	ldrb	r2, [r2, #0]
    e24c:	73da      	strb	r2, [r3, #15]
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    e24e:	4a64      	ldr	r2, [pc, #400]	; (e3e0 <mic_generator+0x2cc>)
    e250:	4b62      	ldr	r3, [pc, #392]	; (e3dc <mic_generator+0x2c8>)
    e252:	0011      	movs	r1, r2
    e254:	0018      	movs	r0, r3
    e256:	4b63      	ldr	r3, [pc, #396]	; (e3e4 <mic_generator+0x2d0>)
    e258:	4798      	blx	r3
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    e25a:	23a7      	movs	r3, #167	; 0xa7
    e25c:	18fb      	adds	r3, r7, r3
    e25e:	2200      	movs	r2, #0
    e260:	701a      	strb	r2, [r3, #0]
    e262:	e012      	b.n	e28a <mic_generator+0x176>
        copy_packet[i] = cbc_header_with_padding[i];
    e264:	23a7      	movs	r3, #167	; 0xa7
    e266:	18fb      	adds	r3, r7, r3
    e268:	781b      	ldrb	r3, [r3, #0]
    e26a:	22a7      	movs	r2, #167	; 0xa7
    e26c:	18ba      	adds	r2, r7, r2
    e26e:	7812      	ldrb	r2, [r2, #0]
    e270:	2114      	movs	r1, #20
    e272:	1879      	adds	r1, r7, r1
    e274:	5c89      	ldrb	r1, [r1, r2]
    e276:	2224      	movs	r2, #36	; 0x24
    e278:	18ba      	adds	r2, r7, r2
    e27a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    e27c:	23a7      	movs	r3, #167	; 0xa7
    e27e:	18fb      	adds	r3, r7, r3
    e280:	781a      	ldrb	r2, [r3, #0]
    e282:	23a7      	movs	r3, #167	; 0xa7
    e284:	18fb      	adds	r3, r7, r3
    e286:	3201      	adds	r2, #1
    e288:	701a      	strb	r2, [r3, #0]
    e28a:	23a7      	movs	r3, #167	; 0xa7
    e28c:	18fb      	adds	r3, r7, r3
    e28e:	781b      	ldrb	r3, [r3, #0]
    e290:	2b0f      	cmp	r3, #15
    e292:	d9e7      	bls.n	e264 <mic_generator+0x150>
    }
    // Copy the Payload and Do the padding
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    e294:	23a7      	movs	r3, #167	; 0xa7
    e296:	18fb      	adds	r3, r7, r3
    e298:	2210      	movs	r2, #16
    e29a:	701a      	strb	r2, [r3, #0]
    e29c:	e013      	b.n	e2c6 <mic_generator+0x1b2>
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    e29e:	23a7      	movs	r3, #167	; 0xa7
    e2a0:	18fb      	adds	r3, r7, r3
    e2a2:	781b      	ldrb	r3, [r3, #0]
    e2a4:	22a7      	movs	r2, #167	; 0xa7
    e2a6:	18ba      	adds	r2, r7, r2
    e2a8:	7812      	ldrb	r2, [r2, #0]
    e2aa:	3a10      	subs	r2, #16
    e2ac:	68f9      	ldr	r1, [r7, #12]
    e2ae:	188a      	adds	r2, r1, r2
    e2b0:	7811      	ldrb	r1, [r2, #0]
    e2b2:	2224      	movs	r2, #36	; 0x24
    e2b4:	18ba      	adds	r2, r7, r2
    e2b6:	54d1      	strb	r1, [r2, r3]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    e2b8:	23a7      	movs	r3, #167	; 0xa7
    e2ba:	18fb      	adds	r3, r7, r3
    e2bc:	781a      	ldrb	r2, [r3, #0]
    e2be:	23a7      	movs	r3, #167	; 0xa7
    e2c0:	18fb      	adds	r3, r7, r3
    e2c2:	3201      	adds	r2, #1
    e2c4:	701a      	strb	r2, [r3, #0]
    e2c6:	23a7      	movs	r3, #167	; 0xa7
    e2c8:	18fb      	adds	r3, r7, r3
    e2ca:	781a      	ldrb	r2, [r3, #0]
    e2cc:	230b      	movs	r3, #11
    e2ce:	18fb      	adds	r3, r7, r3
    e2d0:	781b      	ldrb	r3, [r3, #0]
    e2d2:	3310      	adds	r3, #16
    e2d4:	429a      	cmp	r2, r3
    e2d6:	dbe2      	blt.n	e29e <mic_generator+0x18a>
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    e2d8:	23a7      	movs	r3, #167	; 0xa7
    e2da:	18fb      	adds	r3, r7, r3
    e2dc:	220b      	movs	r2, #11
    e2de:	18ba      	adds	r2, r7, r2
    e2e0:	7812      	ldrb	r2, [r2, #0]
    e2e2:	3210      	adds	r2, #16
    e2e4:	701a      	strb	r2, [r3, #0]
    e2e6:	e00d      	b.n	e304 <mic_generator+0x1f0>
        copy_packet[i] = 0; // Padding
    e2e8:	23a7      	movs	r3, #167	; 0xa7
    e2ea:	18fb      	adds	r3, r7, r3
    e2ec:	781b      	ldrb	r3, [r3, #0]
    e2ee:	2224      	movs	r2, #36	; 0x24
    e2f0:	18ba      	adds	r2, r7, r2
    e2f2:	2100      	movs	r1, #0
    e2f4:	54d1      	strb	r1, [r2, r3]
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    e2f6:	23a7      	movs	r3, #167	; 0xa7
    e2f8:	18fb      	adds	r3, r7, r3
    e2fa:	781a      	ldrb	r2, [r3, #0]
    e2fc:	23a7      	movs	r3, #167	; 0xa7
    e2fe:	18fb      	adds	r3, r7, r3
    e300:	3201      	adds	r2, #1
    e302:	701a      	strb	r2, [r3, #0]
    e304:	23a7      	movs	r3, #167	; 0xa7
    e306:	18fb      	adds	r3, r7, r3
    e308:	781a      	ldrb	r2, [r3, #0]
    e30a:	23a5      	movs	r3, #165	; 0xa5
    e30c:	18fb      	adds	r3, r7, r3
    e30e:	781b      	ldrb	r3, [r3, #0]
    e310:	3301      	adds	r3, #1
    e312:	011b      	lsls	r3, r3, #4
    e314:	429a      	cmp	r2, r3
    e316:	dbe7      	blt.n	e2e8 <mic_generator+0x1d4>
    }
    for (i = 0; i < iterations + 1; i++) {
    e318:	23a7      	movs	r3, #167	; 0xa7
    e31a:	18fb      	adds	r3, r7, r3
    e31c:	2200      	movs	r2, #0
    e31e:	701a      	strb	r2, [r3, #0]
    e320:	e034      	b.n	e38c <mic_generator+0x278>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e322:	23a6      	movs	r3, #166	; 0xa6
    e324:	18fb      	adds	r3, r7, r3
    e326:	2200      	movs	r2, #0
    e328:	701a      	strb	r2, [r3, #0]
    e32a:	e01d      	b.n	e368 <mic_generator+0x254>
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    e32c:	23a6      	movs	r3, #166	; 0xa6
    e32e:	18fb      	adds	r3, r7, r3
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	22a6      	movs	r2, #166	; 0xa6
    e334:	18ba      	adds	r2, r7, r2
    e336:	7812      	ldrb	r2, [r2, #0]
    e338:	4928      	ldr	r1, [pc, #160]	; (e3dc <mic_generator+0x2c8>)
    e33a:	5c89      	ldrb	r1, [r1, r2]
    e33c:	22a6      	movs	r2, #166	; 0xa6
    e33e:	18ba      	adds	r2, r7, r2
    e340:	7810      	ldrb	r0, [r2, #0]
    e342:	22a7      	movs	r2, #167	; 0xa7
    e344:	18ba      	adds	r2, r7, r2
    e346:	7812      	ldrb	r2, [r2, #0]
    e348:	0112      	lsls	r2, r2, #4
    e34a:	1882      	adds	r2, r0, r2
    e34c:	2024      	movs	r0, #36	; 0x24
    e34e:	1838      	adds	r0, r7, r0
    e350:	5c82      	ldrb	r2, [r0, r2]
    e352:	404a      	eors	r2, r1
    e354:	b2d1      	uxtb	r1, r2
    e356:	4a21      	ldr	r2, [pc, #132]	; (e3dc <mic_generator+0x2c8>)
    e358:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e35a:	23a6      	movs	r3, #166	; 0xa6
    e35c:	18fb      	adds	r3, r7, r3
    e35e:	781a      	ldrb	r2, [r3, #0]
    e360:	23a6      	movs	r3, #166	; 0xa6
    e362:	18fb      	adds	r3, r7, r3
    e364:	3201      	adds	r2, #1
    e366:	701a      	strb	r2, [r3, #0]
    e368:	23a6      	movs	r3, #166	; 0xa6
    e36a:	18fb      	adds	r3, r7, r3
    e36c:	781b      	ldrb	r3, [r3, #0]
    e36e:	2b0f      	cmp	r3, #15
    e370:	d9dc      	bls.n	e32c <mic_generator+0x218>
        }
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    e372:	4a1b      	ldr	r2, [pc, #108]	; (e3e0 <mic_generator+0x2cc>)
    e374:	4b19      	ldr	r3, [pc, #100]	; (e3dc <mic_generator+0x2c8>)
    e376:	0011      	movs	r1, r2
    e378:	0018      	movs	r0, r3
    e37a:	4b1a      	ldr	r3, [pc, #104]	; (e3e4 <mic_generator+0x2d0>)
    e37c:	4798      	blx	r3
    for (i = 0; i < iterations + 1; i++) {
    e37e:	23a7      	movs	r3, #167	; 0xa7
    e380:	18fb      	adds	r3, r7, r3
    e382:	781a      	ldrb	r2, [r3, #0]
    e384:	23a7      	movs	r3, #167	; 0xa7
    e386:	18fb      	adds	r3, r7, r3
    e388:	3201      	adds	r2, #1
    e38a:	701a      	strb	r2, [r3, #0]
    e38c:	23a7      	movs	r3, #167	; 0xa7
    e38e:	18fb      	adds	r3, r7, r3
    e390:	781a      	ldrb	r2, [r3, #0]
    e392:	23a5      	movs	r3, #165	; 0xa5
    e394:	18fb      	adds	r3, r7, r3
    e396:	781b      	ldrb	r3, [r3, #0]
    e398:	3301      	adds	r3, #1
    e39a:	429a      	cmp	r2, r3
    e39c:	dbc1      	blt.n	e322 <mic_generator+0x20e>
    }
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    e39e:	23a7      	movs	r3, #167	; 0xa7
    e3a0:	18fb      	adds	r3, r7, r3
    e3a2:	2200      	movs	r2, #0
    e3a4:	701a      	strb	r2, [r3, #0]
    e3a6:	e010      	b.n	e3ca <mic_generator+0x2b6>
        CBC_mic[i] = InitVect_in[i];
    e3a8:	23a7      	movs	r3, #167	; 0xa7
    e3aa:	18fb      	adds	r3, r7, r3
    e3ac:	781b      	ldrb	r3, [r3, #0]
    e3ae:	22a7      	movs	r2, #167	; 0xa7
    e3b0:	18ba      	adds	r2, r7, r2
    e3b2:	7812      	ldrb	r2, [r2, #0]
    e3b4:	4909      	ldr	r1, [pc, #36]	; (e3dc <mic_generator+0x2c8>)
    e3b6:	5c89      	ldrb	r1, [r1, r2]
    e3b8:	4a0b      	ldr	r2, [pc, #44]	; (e3e8 <mic_generator+0x2d4>)
    e3ba:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    e3bc:	23a7      	movs	r3, #167	; 0xa7
    e3be:	18fb      	adds	r3, r7, r3
    e3c0:	781a      	ldrb	r2, [r3, #0]
    e3c2:	23a7      	movs	r3, #167	; 0xa7
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	3201      	adds	r2, #1
    e3c8:	701a      	strb	r2, [r3, #0]
    e3ca:	23a7      	movs	r3, #167	; 0xa7
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	781b      	ldrb	r3, [r3, #0]
    e3d0:	2b0f      	cmp	r3, #15
    e3d2:	d9e9      	bls.n	e3a8 <mic_generator+0x294>
    }
}
    e3d4:	46c0      	nop			; (mov r8, r8)
    e3d6:	46bd      	mov	sp, r7
    e3d8:	b02a      	add	sp, #168	; 0xa8
    e3da:	bd80      	pop	{r7, pc}
    e3dc:	20000da4 	.word	0x20000da4
    e3e0:	20000494 	.word	0x20000494
    e3e4:	0000e081 	.word	0x0000e081
    e3e8:	200013f4 	.word	0x200013f4

0000e3ec <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t* Payloadinfo, uint8_t* Payload_len, API_UINT32_UNION FrameCounter,
    uint8_t FrameControl)
{
    e3ec:	b590      	push	{r4, r7, lr}
    e3ee:	b091      	sub	sp, #68	; 0x44
    e3f0:	af02      	add	r7, sp, #8
    e3f2:	60f8      	str	r0, [r7, #12]
    e3f4:	60b9      	str	r1, [r7, #8]
    e3f6:	607a      	str	r2, [r7, #4]
    e3f8:	001a      	movs	r2, r3
    e3fa:	1cfb      	adds	r3, r7, #3
    e3fc:	701a      	strb	r2, [r3, #0]
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *Payload_len / AES_BLOCKSIZE;
    e3fe:	68bb      	ldr	r3, [r7, #8]
    e400:	781a      	ldrb	r2, [r3, #0]
    e402:	2336      	movs	r3, #54	; 0x36
    e404:	18fb      	adds	r3, r7, r3
    e406:	0912      	lsrs	r2, r2, #4
    e408:	701a      	strb	r2, [r3, #0]
    if (*Payload_len % AES_BLOCKSIZE != 0)
    e40a:	68bb      	ldr	r3, [r7, #8]
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	220f      	movs	r2, #15
    e410:	4013      	ands	r3, r2
    e412:	b2db      	uxtb	r3, r3
    e414:	2b00      	cmp	r3, #0
    e416:	d006      	beq.n	e426 <DataEncrypt+0x3a>
        iterations++;
    e418:	2336      	movs	r3, #54	; 0x36
    e41a:	18fb      	adds	r3, r7, r3
    e41c:	781a      	ldrb	r2, [r3, #0]
    e41e:	2336      	movs	r3, #54	; 0x36
    e420:	18fb      	adds	r3, r7, r3
    e422:	3201      	adds	r2, #1
    e424:	701a      	strb	r2, [r3, #0]

    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
    e426:	68bb      	ldr	r3, [r7, #8]
    e428:	7819      	ldrb	r1, [r3, #0]
    e42a:	4b82      	ldr	r3, [pc, #520]	; (e634 <DataEncrypt+0x248>)
    e42c:	685b      	ldr	r3, [r3, #4]
    e42e:	687c      	ldr	r4, [r7, #4]
    e430:	1cfa      	adds	r2, r7, #3
    e432:	7812      	ldrb	r2, [r2, #0]
    e434:	68f8      	ldr	r0, [r7, #12]
    e436:	9300      	str	r3, [sp, #0]
    e438:	0023      	movs	r3, r4
    e43a:	4c7f      	ldr	r4, [pc, #508]	; (e638 <DataEncrypt+0x24c>)
    e43c:	47a0      	blx	r4

    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    e43e:	2337      	movs	r3, #55	; 0x37
    e440:	18fb      	adds	r3, r7, r3
    e442:	68ba      	ldr	r2, [r7, #8]
    e444:	7812      	ldrb	r2, [r2, #0]
    e446:	701a      	strb	r2, [r3, #0]
    e448:	e00d      	b.n	e466 <DataEncrypt+0x7a>
        Payloadinfo[i] = 0; // Padding
    e44a:	2337      	movs	r3, #55	; 0x37
    e44c:	18fb      	adds	r3, r7, r3
    e44e:	781b      	ldrb	r3, [r3, #0]
    e450:	68fa      	ldr	r2, [r7, #12]
    e452:	18d3      	adds	r3, r2, r3
    e454:	2200      	movs	r2, #0
    e456:	701a      	strb	r2, [r3, #0]
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    e458:	2337      	movs	r3, #55	; 0x37
    e45a:	18fb      	adds	r3, r7, r3
    e45c:	781a      	ldrb	r2, [r3, #0]
    e45e:	2337      	movs	r3, #55	; 0x37
    e460:	18fb      	adds	r3, r7, r3
    e462:	3201      	adds	r2, #1
    e464:	701a      	strb	r2, [r3, #0]
    e466:	2337      	movs	r3, #55	; 0x37
    e468:	18fb      	adds	r3, r7, r3
    e46a:	781a      	ldrb	r2, [r3, #0]
    e46c:	2336      	movs	r3, #54	; 0x36
    e46e:	18fb      	adds	r3, r7, r3
    e470:	781b      	ldrb	r3, [r3, #0]
    e472:	011b      	lsls	r3, r3, #4
    e474:	429a      	cmp	r2, r3
    e476:	dbe8      	blt.n	e44a <DataEncrypt+0x5e>
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    e478:	2314      	movs	r3, #20
    e47a:	18fb      	adds	r3, r7, r3
    e47c:	2201      	movs	r2, #1
    e47e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    e480:	2337      	movs	r3, #55	; 0x37
    e482:	18fb      	adds	r3, r7, r3
    e484:	2200      	movs	r2, #0
    e486:	701a      	strb	r2, [r3, #0]
    e488:	e014      	b.n	e4b4 <DataEncrypt+0xc8>
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
    e48a:	2337      	movs	r3, #55	; 0x37
    e48c:	18fb      	adds	r3, r7, r3
    e48e:	781b      	ldrb	r3, [r3, #0]
    e490:	1c5a      	adds	r2, r3, #1
    e492:	4b68      	ldr	r3, [pc, #416]	; (e634 <DataEncrypt+0x248>)
    e494:	6859      	ldr	r1, [r3, #4]
    e496:	2337      	movs	r3, #55	; 0x37
    e498:	18fb      	adds	r3, r7, r3
    e49a:	781b      	ldrb	r3, [r3, #0]
    e49c:	18cb      	adds	r3, r1, r3
    e49e:	7819      	ldrb	r1, [r3, #0]
    e4a0:	2314      	movs	r3, #20
    e4a2:	18fb      	adds	r3, r7, r3
    e4a4:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    e4a6:	2337      	movs	r3, #55	; 0x37
    e4a8:	18fb      	adds	r3, r7, r3
    e4aa:	781a      	ldrb	r2, [r3, #0]
    e4ac:	2337      	movs	r3, #55	; 0x37
    e4ae:	18fb      	adds	r3, r7, r3
    e4b0:	3201      	adds	r2, #1
    e4b2:	701a      	strb	r2, [r3, #0]
    e4b4:	2337      	movs	r3, #55	; 0x37
    e4b6:	18fb      	adds	r3, r7, r3
    e4b8:	781b      	ldrb	r3, [r3, #0]
    e4ba:	2b07      	cmp	r3, #7
    e4bc:	d9e5      	bls.n	e48a <DataEncrypt+0x9e>
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if address is less than 8 bytes
        }
    }
    // FrameCounter
    for (i = 0; i < 4; i++) {
    e4be:	2337      	movs	r3, #55	; 0x37
    e4c0:	18fb      	adds	r3, r7, r3
    e4c2:	2200      	movs	r2, #0
    e4c4:	701a      	strb	r2, [r3, #0]
    e4c6:	e012      	b.n	e4ee <DataEncrypt+0x102>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    e4c8:	2337      	movs	r3, #55	; 0x37
    e4ca:	18fb      	adds	r3, r7, r3
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	3309      	adds	r3, #9
    e4d0:	2237      	movs	r2, #55	; 0x37
    e4d2:	18ba      	adds	r2, r7, r2
    e4d4:	7812      	ldrb	r2, [r2, #0]
    e4d6:	1d39      	adds	r1, r7, #4
    e4d8:	5c89      	ldrb	r1, [r1, r2]
    e4da:	2214      	movs	r2, #20
    e4dc:	18ba      	adds	r2, r7, r2
    e4de:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
    e4e0:	2337      	movs	r3, #55	; 0x37
    e4e2:	18fb      	adds	r3, r7, r3
    e4e4:	781a      	ldrb	r2, [r3, #0]
    e4e6:	2337      	movs	r3, #55	; 0x37
    e4e8:	18fb      	adds	r3, r7, r3
    e4ea:	3201      	adds	r2, #1
    e4ec:	701a      	strb	r2, [r3, #0]
    e4ee:	2337      	movs	r3, #55	; 0x37
    e4f0:	18fb      	adds	r3, r7, r3
    e4f2:	781b      	ldrb	r3, [r3, #0]
    e4f4:	2b03      	cmp	r3, #3
    e4f6:	d9e7      	bls.n	e4c8 <DataEncrypt+0xdc>
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    e4f8:	2314      	movs	r3, #20
    e4fa:	18fb      	adds	r3, r7, r3
    e4fc:	2204      	movs	r2, #4
    e4fe:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    e500:	2314      	movs	r3, #20
    e502:	18fb      	adds	r3, r7, r3
    e504:	2200      	movs	r2, #0
    e506:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    e508:	2314      	movs	r3, #20
    e50a:	18fb      	adds	r3, r7, r3
    e50c:	2200      	movs	r2, #0
    e50e:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
    e510:	2337      	movs	r3, #55	; 0x37
    e512:	18fb      	adds	r3, r7, r3
    e514:	2200      	movs	r2, #0
    e516:	701a      	strb	r2, [r3, #0]
    e518:	e07d      	b.n	e616 <DataEncrypt+0x22a>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e51a:	2335      	movs	r3, #53	; 0x35
    e51c:	18fb      	adds	r3, r7, r3
    e51e:	2200      	movs	r2, #0
    e520:	701a      	strb	r2, [r3, #0]
    e522:	e012      	b.n	e54a <DataEncrypt+0x15e>
            block[j] = CTR_Nonce_and_Counter[j];
    e524:	2335      	movs	r3, #53	; 0x35
    e526:	18fb      	adds	r3, r7, r3
    e528:	781b      	ldrb	r3, [r3, #0]
    e52a:	2235      	movs	r2, #53	; 0x35
    e52c:	18ba      	adds	r2, r7, r2
    e52e:	7812      	ldrb	r2, [r2, #0]
    e530:	2114      	movs	r1, #20
    e532:	1879      	adds	r1, r7, r1
    e534:	5c89      	ldrb	r1, [r1, r2]
    e536:	2224      	movs	r2, #36	; 0x24
    e538:	18ba      	adds	r2, r7, r2
    e53a:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e53c:	2335      	movs	r3, #53	; 0x35
    e53e:	18fb      	adds	r3, r7, r3
    e540:	781a      	ldrb	r2, [r3, #0]
    e542:	2335      	movs	r3, #53	; 0x35
    e544:	18fb      	adds	r3, r7, r3
    e546:	3201      	adds	r2, #1
    e548:	701a      	strb	r2, [r3, #0]
    e54a:	2335      	movs	r3, #53	; 0x35
    e54c:	18fb      	adds	r3, r7, r3
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	2b0f      	cmp	r3, #15
    e552:	d9e7      	bls.n	e524 <DataEncrypt+0x138>
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
    e554:	4a39      	ldr	r2, [pc, #228]	; (e63c <DataEncrypt+0x250>)
    e556:	2324      	movs	r3, #36	; 0x24
    e558:	18fb      	adds	r3, r7, r3
    e55a:	0011      	movs	r1, r2
    e55c:	0018      	movs	r0, r3
    e55e:	4b38      	ldr	r3, [pc, #224]	; (e640 <DataEncrypt+0x254>)
    e560:	4798      	blx	r3
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e562:	2335      	movs	r3, #53	; 0x35
    e564:	18fb      	adds	r3, r7, r3
    e566:	2200      	movs	r2, #0
    e568:	701a      	strb	r2, [r3, #0]
    e56a:	e040      	b.n	e5ee <DataEncrypt+0x202>
            if (CTR_Nonce_and_Counter[15] == 0) {
    e56c:	2314      	movs	r3, #20
    e56e:	18fb      	adds	r3, r7, r3
    e570:	7bdb      	ldrb	r3, [r3, #15]
    e572:	2b00      	cmp	r3, #0
    e574:	d112      	bne.n	e59c <DataEncrypt+0x1b0>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    e576:	2335      	movs	r3, #53	; 0x35
    e578:	18fb      	adds	r3, r7, r3
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	2235      	movs	r2, #53	; 0x35
    e57e:	18ba      	adds	r2, r7, r2
    e580:	7812      	ldrb	r2, [r2, #0]
    e582:	2124      	movs	r1, #36	; 0x24
    e584:	1879      	adds	r1, r7, r1
    e586:	5c89      	ldrb	r1, [r1, r2]
    e588:	2235      	movs	r2, #53	; 0x35
    e58a:	18ba      	adds	r2, r7, r2
    e58c:	7812      	ldrb	r2, [r2, #0]
    e58e:	482d      	ldr	r0, [pc, #180]	; (e644 <DataEncrypt+0x258>)
    e590:	5c82      	ldrb	r2, [r0, r2]
    e592:	404a      	eors	r2, r1
    e594:	b2d1      	uxtb	r1, r2
    e596:	4a2c      	ldr	r2, [pc, #176]	; (e648 <DataEncrypt+0x25c>)
    e598:	54d1      	strb	r1, [r2, r3]
    e59a:	e021      	b.n	e5e0 <DataEncrypt+0x1f4>
            }
            else {
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    e59c:	2335      	movs	r3, #53	; 0x35
    e59e:	18fb      	adds	r3, r7, r3
    e5a0:	781a      	ldrb	r2, [r3, #0]
    e5a2:	2337      	movs	r3, #55	; 0x37
    e5a4:	18fb      	adds	r3, r7, r3
    e5a6:	781b      	ldrb	r3, [r3, #0]
    e5a8:	3b01      	subs	r3, #1
    e5aa:	011b      	lsls	r3, r3, #4
    e5ac:	18d3      	adds	r3, r2, r3
    e5ae:	001a      	movs	r2, r3
    e5b0:	68fb      	ldr	r3, [r7, #12]
    e5b2:	189b      	adds	r3, r3, r2
    e5b4:	2235      	movs	r2, #53	; 0x35
    e5b6:	18ba      	adds	r2, r7, r2
    e5b8:	7812      	ldrb	r2, [r2, #0]
    e5ba:	2124      	movs	r1, #36	; 0x24
    e5bc:	1879      	adds	r1, r7, r1
    e5be:	5c89      	ldrb	r1, [r1, r2]
    e5c0:	2235      	movs	r2, #53	; 0x35
    e5c2:	18ba      	adds	r2, r7, r2
    e5c4:	7810      	ldrb	r0, [r2, #0]
    e5c6:	2237      	movs	r2, #55	; 0x37
    e5c8:	18ba      	adds	r2, r7, r2
    e5ca:	7812      	ldrb	r2, [r2, #0]
    e5cc:	3a01      	subs	r2, #1
    e5ce:	0112      	lsls	r2, r2, #4
    e5d0:	1882      	adds	r2, r0, r2
    e5d2:	0010      	movs	r0, r2
    e5d4:	68fa      	ldr	r2, [r7, #12]
    e5d6:	1812      	adds	r2, r2, r0
    e5d8:	7812      	ldrb	r2, [r2, #0]
    e5da:	404a      	eors	r2, r1
    e5dc:	b2d2      	uxtb	r2, r2
    e5de:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    e5e0:	2335      	movs	r3, #53	; 0x35
    e5e2:	18fb      	adds	r3, r7, r3
    e5e4:	781a      	ldrb	r2, [r3, #0]
    e5e6:	2335      	movs	r3, #53	; 0x35
    e5e8:	18fb      	adds	r3, r7, r3
    e5ea:	3201      	adds	r2, #1
    e5ec:	701a      	strb	r2, [r3, #0]
    e5ee:	2335      	movs	r3, #53	; 0x35
    e5f0:	18fb      	adds	r3, r7, r3
    e5f2:	781b      	ldrb	r3, [r3, #0]
    e5f4:	2b0f      	cmp	r3, #15
    e5f6:	d9b9      	bls.n	e56c <DataEncrypt+0x180>
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    e5f8:	2314      	movs	r3, #20
    e5fa:	18fb      	adds	r3, r7, r3
    e5fc:	7bdb      	ldrb	r3, [r3, #15]
    e5fe:	3301      	adds	r3, #1
    e600:	b2da      	uxtb	r2, r3
    e602:	2314      	movs	r3, #20
    e604:	18fb      	adds	r3, r7, r3
    e606:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    e608:	2337      	movs	r3, #55	; 0x37
    e60a:	18fb      	adds	r3, r7, r3
    e60c:	781a      	ldrb	r2, [r3, #0]
    e60e:	2337      	movs	r3, #55	; 0x37
    e610:	18fb      	adds	r3, r7, r3
    e612:	3201      	adds	r2, #1
    e614:	701a      	strb	r2, [r3, #0]
    e616:	2337      	movs	r3, #55	; 0x37
    e618:	18fb      	adds	r3, r7, r3
    e61a:	781a      	ldrb	r2, [r3, #0]
    e61c:	2336      	movs	r3, #54	; 0x36
    e61e:	18fb      	adds	r3, r7, r3
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	3301      	adds	r3, #1
    e624:	429a      	cmp	r2, r3
    e626:	da00      	bge.n	e62a <DataEncrypt+0x23e>
    e628:	e777      	b.n	e51a <DataEncrypt+0x12e>
    }
    return true;
    e62a:	2301      	movs	r3, #1
}
    e62c:	0018      	movs	r0, r3
    e62e:	46bd      	mov	sp, r7
    e630:	b00f      	add	sp, #60	; 0x3c
    e632:	bd90      	pop	{r4, r7, pc}
    e634:	20000d9c 	.word	0x20000d9c
    e638:	0000e115 	.word	0x0000e115
    e63c:	20000494 	.word	0x20000494
    e640:	0000e081 	.word	0x0000e081
    e644:	200013f4 	.word	0x200013f4
    e648:	20000dc8 	.word	0x20000dc8

0000e64c <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
    e64c:	b580      	push	{r7, lr}
    e64e:	af00      	add	r7, sp, #0
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    e650:	4b0e      	ldr	r3, [pc, #56]	; (e68c <validate_mic+0x40>)
    e652:	781a      	ldrb	r2, [r3, #0]
    e654:	4b0e      	ldr	r3, [pc, #56]	; (e690 <validate_mic+0x44>)
    e656:	781b      	ldrb	r3, [r3, #0]
    e658:	429a      	cmp	r2, r3
    e65a:	d111      	bne.n	e680 <validate_mic+0x34>
    e65c:	4b0b      	ldr	r3, [pc, #44]	; (e68c <validate_mic+0x40>)
    e65e:	785a      	ldrb	r2, [r3, #1]
    e660:	4b0b      	ldr	r3, [pc, #44]	; (e690 <validate_mic+0x44>)
    e662:	785b      	ldrb	r3, [r3, #1]
    e664:	429a      	cmp	r2, r3
    e666:	d10b      	bne.n	e680 <validate_mic+0x34>
    e668:	4b08      	ldr	r3, [pc, #32]	; (e68c <validate_mic+0x40>)
    e66a:	789a      	ldrb	r2, [r3, #2]
    e66c:	4b08      	ldr	r3, [pc, #32]	; (e690 <validate_mic+0x44>)
    e66e:	789b      	ldrb	r3, [r3, #2]
    e670:	429a      	cmp	r2, r3
    e672:	d105      	bne.n	e680 <validate_mic+0x34>
    e674:	4b05      	ldr	r3, [pc, #20]	; (e68c <validate_mic+0x40>)
    e676:	78da      	ldrb	r2, [r3, #3]
    e678:	4b05      	ldr	r3, [pc, #20]	; (e690 <validate_mic+0x44>)
    e67a:	78db      	ldrb	r3, [r3, #3]
    e67c:	429a      	cmp	r2, r3
    e67e:	d001      	beq.n	e684 <validate_mic+0x38>
        return false;
    e680:	2300      	movs	r3, #0
    e682:	e000      	b.n	e686 <validate_mic+0x3a>
    }
    else {
        return true;
    e684:	2301      	movs	r3, #1
    }
}
    e686:	0018      	movs	r0, r3
    e688:	46bd      	mov	sp, r7
    e68a:	bd80      	pop	{r7, pc}
    e68c:	20000dc8 	.word	0x20000dc8
    e690:	20001404 	.word	0x20001404

0000e694 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t* Payload, uint8_t* PayloadLen, uint8_t* SourceIEEEAddress,
    API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    e694:	b590      	push	{r4, r7, lr}
    e696:	b091      	sub	sp, #68	; 0x44
    e698:	af02      	add	r7, sp, #8
    e69a:	60f8      	str	r0, [r7, #12]
    e69c:	60b9      	str	r1, [r7, #8]
    e69e:	607a      	str	r2, [r7, #4]
    e6a0:	603b      	str	r3, [r7, #0]
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *PayloadLen / 16;
    e6a2:	68bb      	ldr	r3, [r7, #8]
    e6a4:	781a      	ldrb	r2, [r3, #0]
    e6a6:	2336      	movs	r3, #54	; 0x36
    e6a8:	18fb      	adds	r3, r7, r3
    e6aa:	0912      	lsrs	r2, r2, #4
    e6ac:	701a      	strb	r2, [r3, #0]
    if (*PayloadLen % AES_BLOCKSIZE != 0)
    e6ae:	68bb      	ldr	r3, [r7, #8]
    e6b0:	781b      	ldrb	r3, [r3, #0]
    e6b2:	220f      	movs	r2, #15
    e6b4:	4013      	ands	r3, r2
    e6b6:	b2db      	uxtb	r3, r3
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	d006      	beq.n	e6ca <DataDecrypt+0x36>
        iterations++;
    e6bc:	2336      	movs	r3, #54	; 0x36
    e6be:	18fb      	adds	r3, r7, r3
    e6c0:	781a      	ldrb	r2, [r3, #0]
    e6c2:	2336      	movs	r3, #54	; 0x36
    e6c4:	18fb      	adds	r3, r7, r3
    e6c6:	3201      	adds	r2, #1
    e6c8:	701a      	strb	r2, [r3, #0]

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    e6ca:	2337      	movs	r3, #55	; 0x37
    e6cc:	18fb      	adds	r3, r7, r3
    e6ce:	68ba      	ldr	r2, [r7, #8]
    e6d0:	7812      	ldrb	r2, [r2, #0]
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	e00d      	b.n	e6f2 <DataDecrypt+0x5e>
        Payload[i] = 0; // Padding
    e6d6:	2337      	movs	r3, #55	; 0x37
    e6d8:	18fb      	adds	r3, r7, r3
    e6da:	781b      	ldrb	r3, [r3, #0]
    e6dc:	68fa      	ldr	r2, [r7, #12]
    e6de:	18d3      	adds	r3, r2, r3
    e6e0:	2200      	movs	r2, #0
    e6e2:	701a      	strb	r2, [r3, #0]
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    e6e4:	2337      	movs	r3, #55	; 0x37
    e6e6:	18fb      	adds	r3, r7, r3
    e6e8:	781a      	ldrb	r2, [r3, #0]
    e6ea:	2337      	movs	r3, #55	; 0x37
    e6ec:	18fb      	adds	r3, r7, r3
    e6ee:	3201      	adds	r2, #1
    e6f0:	701a      	strb	r2, [r3, #0]
    e6f2:	2337      	movs	r3, #55	; 0x37
    e6f4:	18fb      	adds	r3, r7, r3
    e6f6:	781a      	ldrb	r2, [r3, #0]
    e6f8:	2336      	movs	r3, #54	; 0x36
    e6fa:	18fb      	adds	r3, r7, r3
    e6fc:	781b      	ldrb	r3, [r3, #0]
    e6fe:	011b      	lsls	r3, r3, #4
    e700:	429a      	cmp	r2, r3
    e702:	dbe8      	blt.n	e6d6 <DataDecrypt+0x42>
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    e704:	2314      	movs	r3, #20
    e706:	18fb      	adds	r3, r7, r3
    e708:	2201      	movs	r2, #1
    e70a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    e70c:	2337      	movs	r3, #55	; 0x37
    e70e:	18fb      	adds	r3, r7, r3
    e710:	2200      	movs	r2, #0
    e712:	701a      	strb	r2, [r3, #0]
    e714:	e013      	b.n	e73e <DataDecrypt+0xaa>
        CTR_Nonce_and_Counter[i + 1] = SourceIEEEAddress[i];
    e716:	2337      	movs	r3, #55	; 0x37
    e718:	18fb      	adds	r3, r7, r3
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	3301      	adds	r3, #1
    e71e:	2237      	movs	r2, #55	; 0x37
    e720:	18ba      	adds	r2, r7, r2
    e722:	7812      	ldrb	r2, [r2, #0]
    e724:	6879      	ldr	r1, [r7, #4]
    e726:	188a      	adds	r2, r1, r2
    e728:	7811      	ldrb	r1, [r2, #0]
    e72a:	2214      	movs	r2, #20
    e72c:	18ba      	adds	r2, r7, r2
    e72e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    e730:	2337      	movs	r3, #55	; 0x37
    e732:	18fb      	adds	r3, r7, r3
    e734:	781a      	ldrb	r2, [r3, #0]
    e736:	2337      	movs	r3, #55	; 0x37
    e738:	18fb      	adds	r3, r7, r3
    e73a:	3201      	adds	r2, #1
    e73c:	701a      	strb	r2, [r3, #0]
    e73e:	2337      	movs	r3, #55	; 0x37
    e740:	18fb      	adds	r3, r7, r3
    e742:	781b      	ldrb	r3, [r3, #0]
    e744:	2b07      	cmp	r3, #7
    e746:	d9e6      	bls.n	e716 <DataDecrypt+0x82>
    if (MY_ADDRESS_LENGTH < 8) {
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if source address is less than 8 bytes
        }
    }
    for (i = 0; i < 4; i++) {
    e748:	2337      	movs	r3, #55	; 0x37
    e74a:	18fb      	adds	r3, r7, r3
    e74c:	2200      	movs	r2, #0
    e74e:	701a      	strb	r2, [r3, #0]
    e750:	e012      	b.n	e778 <DataDecrypt+0xe4>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    e752:	2337      	movs	r3, #55	; 0x37
    e754:	18fb      	adds	r3, r7, r3
    e756:	781b      	ldrb	r3, [r3, #0]
    e758:	3309      	adds	r3, #9
    e75a:	2237      	movs	r2, #55	; 0x37
    e75c:	18ba      	adds	r2, r7, r2
    e75e:	7812      	ldrb	r2, [r2, #0]
    e760:	0039      	movs	r1, r7
    e762:	5c89      	ldrb	r1, [r1, r2]
    e764:	2214      	movs	r2, #20
    e766:	18ba      	adds	r2, r7, r2
    e768:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
    e76a:	2337      	movs	r3, #55	; 0x37
    e76c:	18fb      	adds	r3, r7, r3
    e76e:	781a      	ldrb	r2, [r3, #0]
    e770:	2337      	movs	r3, #55	; 0x37
    e772:	18fb      	adds	r3, r7, r3
    e774:	3201      	adds	r2, #1
    e776:	701a      	strb	r2, [r3, #0]
    e778:	2337      	movs	r3, #55	; 0x37
    e77a:	18fb      	adds	r3, r7, r3
    e77c:	781b      	ldrb	r3, [r3, #0]
    e77e:	2b03      	cmp	r3, #3
    e780:	d9e7      	bls.n	e752 <DataDecrypt+0xbe>
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    e782:	2314      	movs	r3, #20
    e784:	18fb      	adds	r3, r7, r3
    e786:	2204      	movs	r2, #4
    e788:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    e78a:	2314      	movs	r3, #20
    e78c:	18fb      	adds	r3, r7, r3
    e78e:	2200      	movs	r2, #0
    e790:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    e792:	2314      	movs	r3, #20
    e794:	18fb      	adds	r3, r7, r3
    e796:	2200      	movs	r2, #0
    e798:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
    e79a:	2337      	movs	r3, #55	; 0x37
    e79c:	18fb      	adds	r3, r7, r3
    e79e:	2200      	movs	r2, #0
    e7a0:	701a      	strb	r2, [r3, #0]
    e7a2:	e076      	b.n	e892 <DataDecrypt+0x1fe>
        for (j = 0; j < 16; j++) {
    e7a4:	2335      	movs	r3, #53	; 0x35
    e7a6:	18fb      	adds	r3, r7, r3
    e7a8:	2200      	movs	r2, #0
    e7aa:	701a      	strb	r2, [r3, #0]
    e7ac:	e012      	b.n	e7d4 <DataDecrypt+0x140>
            block[j] = CTR_Nonce_and_Counter[j];
    e7ae:	2335      	movs	r3, #53	; 0x35
    e7b0:	18fb      	adds	r3, r7, r3
    e7b2:	781b      	ldrb	r3, [r3, #0]
    e7b4:	2235      	movs	r2, #53	; 0x35
    e7b6:	18ba      	adds	r2, r7, r2
    e7b8:	7812      	ldrb	r2, [r2, #0]
    e7ba:	2114      	movs	r1, #20
    e7bc:	1879      	adds	r1, r7, r1
    e7be:	5c89      	ldrb	r1, [r1, r2]
    e7c0:	2224      	movs	r2, #36	; 0x24
    e7c2:	18ba      	adds	r2, r7, r2
    e7c4:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 16; j++) {
    e7c6:	2335      	movs	r3, #53	; 0x35
    e7c8:	18fb      	adds	r3, r7, r3
    e7ca:	781a      	ldrb	r2, [r3, #0]
    e7cc:	2335      	movs	r3, #53	; 0x35
    e7ce:	18fb      	adds	r3, r7, r3
    e7d0:	3201      	adds	r2, #1
    e7d2:	701a      	strb	r2, [r3, #0]
    e7d4:	2335      	movs	r3, #53	; 0x35
    e7d6:	18fb      	adds	r3, r7, r3
    e7d8:	781b      	ldrb	r3, [r3, #0]
    e7da:	2b0f      	cmp	r3, #15
    e7dc:	d9e7      	bls.n	e7ae <DataDecrypt+0x11a>
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
    e7de:	4a4f      	ldr	r2, [pc, #316]	; (e91c <DataDecrypt+0x288>)
    e7e0:	2324      	movs	r3, #36	; 0x24
    e7e2:	18fb      	adds	r3, r7, r3
    e7e4:	0011      	movs	r1, r2
    e7e6:	0018      	movs	r0, r3
    e7e8:	4b4d      	ldr	r3, [pc, #308]	; (e920 <DataDecrypt+0x28c>)
    e7ea:	4798      	blx	r3
        for (j = 0; j < 16; j++) {
    e7ec:	2335      	movs	r3, #53	; 0x35
    e7ee:	18fb      	adds	r3, r7, r3
    e7f0:	2200      	movs	r2, #0
    e7f2:	701a      	strb	r2, [r3, #0]
    e7f4:	e039      	b.n	e86a <DataDecrypt+0x1d6>
            if (CTR_Nonce_and_Counter[15] == 0) {
    e7f6:	2314      	movs	r3, #20
    e7f8:	18fb      	adds	r3, r7, r3
    e7fa:	7bdb      	ldrb	r3, [r3, #15]
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	d10b      	bne.n	e818 <DataDecrypt+0x184>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    e800:	2335      	movs	r3, #53	; 0x35
    e802:	18fb      	adds	r3, r7, r3
    e804:	781b      	ldrb	r3, [r3, #0]
    e806:	2235      	movs	r2, #53	; 0x35
    e808:	18ba      	adds	r2, r7, r2
    e80a:	7812      	ldrb	r2, [r2, #0]
    e80c:	2124      	movs	r1, #36	; 0x24
    e80e:	1879      	adds	r1, r7, r1
    e810:	5c89      	ldrb	r1, [r1, r2]
    e812:	4a44      	ldr	r2, [pc, #272]	; (e924 <DataDecrypt+0x290>)
    e814:	54d1      	strb	r1, [r2, r3]
    e816:	e021      	b.n	e85c <DataDecrypt+0x1c8>
            }
            else {
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
    e818:	2335      	movs	r3, #53	; 0x35
    e81a:	18fb      	adds	r3, r7, r3
    e81c:	781a      	ldrb	r2, [r3, #0]
    e81e:	2337      	movs	r3, #55	; 0x37
    e820:	18fb      	adds	r3, r7, r3
    e822:	781b      	ldrb	r3, [r3, #0]
    e824:	3b01      	subs	r3, #1
    e826:	011b      	lsls	r3, r3, #4
    e828:	18d3      	adds	r3, r2, r3
    e82a:	001a      	movs	r2, r3
    e82c:	68fb      	ldr	r3, [r7, #12]
    e82e:	189b      	adds	r3, r3, r2
    e830:	2235      	movs	r2, #53	; 0x35
    e832:	18ba      	adds	r2, r7, r2
    e834:	7812      	ldrb	r2, [r2, #0]
    e836:	2124      	movs	r1, #36	; 0x24
    e838:	1879      	adds	r1, r7, r1
    e83a:	5c89      	ldrb	r1, [r1, r2]
    e83c:	2235      	movs	r2, #53	; 0x35
    e83e:	18ba      	adds	r2, r7, r2
    e840:	7810      	ldrb	r0, [r2, #0]
    e842:	2237      	movs	r2, #55	; 0x37
    e844:	18ba      	adds	r2, r7, r2
    e846:	7812      	ldrb	r2, [r2, #0]
    e848:	3a01      	subs	r2, #1
    e84a:	0112      	lsls	r2, r2, #4
    e84c:	1882      	adds	r2, r0, r2
    e84e:	0010      	movs	r0, r2
    e850:	68fa      	ldr	r2, [r7, #12]
    e852:	1812      	adds	r2, r2, r0
    e854:	7812      	ldrb	r2, [r2, #0]
    e856:	404a      	eors	r2, r1
    e858:	b2d2      	uxtb	r2, r2
    e85a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 16; j++) {
    e85c:	2335      	movs	r3, #53	; 0x35
    e85e:	18fb      	adds	r3, r7, r3
    e860:	781a      	ldrb	r2, [r3, #0]
    e862:	2335      	movs	r3, #53	; 0x35
    e864:	18fb      	adds	r3, r7, r3
    e866:	3201      	adds	r2, #1
    e868:	701a      	strb	r2, [r3, #0]
    e86a:	2335      	movs	r3, #53	; 0x35
    e86c:	18fb      	adds	r3, r7, r3
    e86e:	781b      	ldrb	r3, [r3, #0]
    e870:	2b0f      	cmp	r3, #15
    e872:	d9c0      	bls.n	e7f6 <DataDecrypt+0x162>
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    e874:	2314      	movs	r3, #20
    e876:	18fb      	adds	r3, r7, r3
    e878:	7bdb      	ldrb	r3, [r3, #15]
    e87a:	3301      	adds	r3, #1
    e87c:	b2da      	uxtb	r2, r3
    e87e:	2314      	movs	r3, #20
    e880:	18fb      	adds	r3, r7, r3
    e882:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    e884:	2337      	movs	r3, #55	; 0x37
    e886:	18fb      	adds	r3, r7, r3
    e888:	781a      	ldrb	r2, [r3, #0]
    e88a:	2337      	movs	r3, #55	; 0x37
    e88c:	18fb      	adds	r3, r7, r3
    e88e:	3201      	adds	r2, #1
    e890:	701a      	strb	r2, [r3, #0]
    e892:	2337      	movs	r3, #55	; 0x37
    e894:	18fb      	adds	r3, r7, r3
    e896:	781a      	ldrb	r2, [r3, #0]
    e898:	2336      	movs	r3, #54	; 0x36
    e89a:	18fb      	adds	r3, r7, r3
    e89c:	781b      	ldrb	r3, [r3, #0]
    e89e:	3301      	adds	r3, #1
    e8a0:	429a      	cmp	r2, r3
    e8a2:	da00      	bge.n	e8a6 <DataDecrypt+0x212>
    e8a4:	e77e      	b.n	e7a4 <DataDecrypt+0x110>
    }
    *PayloadLen = *PayloadLen - 4;
    e8a6:	68bb      	ldr	r3, [r7, #8]
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	3b04      	subs	r3, #4
    e8ac:	b2da      	uxtb	r2, r3
    e8ae:	68bb      	ldr	r3, [r7, #8]
    e8b0:	701a      	strb	r2, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    e8b2:	68bb      	ldr	r3, [r7, #8]
    e8b4:	7819      	ldrb	r1, [r3, #0]
    e8b6:	683c      	ldr	r4, [r7, #0]
    e8b8:	2348      	movs	r3, #72	; 0x48
    e8ba:	18fb      	adds	r3, r7, r3
    e8bc:	781a      	ldrb	r2, [r3, #0]
    e8be:	68f8      	ldr	r0, [r7, #12]
    e8c0:	687b      	ldr	r3, [r7, #4]
    e8c2:	9300      	str	r3, [sp, #0]
    e8c4:	0023      	movs	r3, r4
    e8c6:	4c18      	ldr	r4, [pc, #96]	; (e928 <DataDecrypt+0x294>)
    e8c8:	47a0      	blx	r4
    for (i = 0; i < 16; i++) {
    e8ca:	2337      	movs	r3, #55	; 0x37
    e8cc:	18fb      	adds	r3, r7, r3
    e8ce:	2200      	movs	r2, #0
    e8d0:	701a      	strb	r2, [r3, #0]
    e8d2:	e017      	b.n	e904 <DataDecrypt+0x270>
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    e8d4:	2337      	movs	r3, #55	; 0x37
    e8d6:	18fb      	adds	r3, r7, r3
    e8d8:	781b      	ldrb	r3, [r3, #0]
    e8da:	2237      	movs	r2, #55	; 0x37
    e8dc:	18ba      	adds	r2, r7, r2
    e8de:	7812      	ldrb	r2, [r2, #0]
    e8e0:	4910      	ldr	r1, [pc, #64]	; (e924 <DataDecrypt+0x290>)
    e8e2:	5c89      	ldrb	r1, [r1, r2]
    e8e4:	2237      	movs	r2, #55	; 0x37
    e8e6:	18ba      	adds	r2, r7, r2
    e8e8:	7812      	ldrb	r2, [r2, #0]
    e8ea:	4810      	ldr	r0, [pc, #64]	; (e92c <DataDecrypt+0x298>)
    e8ec:	5c82      	ldrb	r2, [r0, r2]
    e8ee:	404a      	eors	r2, r1
    e8f0:	b2d1      	uxtb	r1, r2
    e8f2:	4a0f      	ldr	r2, [pc, #60]	; (e930 <DataDecrypt+0x29c>)
    e8f4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 16; i++) {
    e8f6:	2337      	movs	r3, #55	; 0x37
    e8f8:	18fb      	adds	r3, r7, r3
    e8fa:	781a      	ldrb	r2, [r3, #0]
    e8fc:	2337      	movs	r3, #55	; 0x37
    e8fe:	18fb      	adds	r3, r7, r3
    e900:	3201      	adds	r2, #1
    e902:	701a      	strb	r2, [r3, #0]
    e904:	2337      	movs	r3, #55	; 0x37
    e906:	18fb      	adds	r3, r7, r3
    e908:	781b      	ldrb	r3, [r3, #0]
    e90a:	2b0f      	cmp	r3, #15
    e90c:	d9e2      	bls.n	e8d4 <DataDecrypt+0x240>
    }
    return validate_mic();
    e90e:	4b09      	ldr	r3, [pc, #36]	; (e934 <DataDecrypt+0x2a0>)
    e910:	4798      	blx	r3
    e912:	0003      	movs	r3, r0
}
    e914:	0018      	movs	r0, r3
    e916:	46bd      	mov	sp, r7
    e918:	b00f      	add	sp, #60	; 0x3c
    e91a:	bd90      	pop	{r4, r7, pc}
    e91c:	20000494 	.word	0x20000494
    e920:	0000e081 	.word	0x0000e081
    e924:	20000db4 	.word	0x20000db4
    e928:	0000e115 	.word	0x0000e115
    e92c:	200013f4 	.word	0x200013f4
    e930:	20000dc8 	.word	0x20000dc8
    e934:	0000e64d 	.word	0x0000e64d

0000e938 <MiMAC_SetChannel>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
    e938:	b580      	push	{r7, lr}
    e93a:	b082      	sub	sp, #8
    e93c:	af00      	add	r7, sp, #0
    e93e:	0002      	movs	r2, r0
    e940:	1dfb      	adds	r3, r7, #7
    e942:	701a      	strb	r2, [r3, #0]
    e944:	1dbb      	adds	r3, r7, #6
    e946:	1c0a      	adds	r2, r1, #0
    e948:	701a      	strb	r2, [r3, #0]
	if (channel < 0x00 || channel > 0x0A) {
    e94a:	1dfb      	adds	r3, r7, #7
    e94c:	781b      	ldrb	r3, [r3, #0]
    e94e:	2b0a      	cmp	r3, #10
    e950:	d901      	bls.n	e956 <MiMAC_SetChannel+0x1e>
		return false;
    e952:	2300      	movs	r3, #0
    e954:	e009      	b.n	e96a <MiMAC_SetChannel+0x32>
	}
	MACCurrentChannel = channel;
    e956:	4b07      	ldr	r3, [pc, #28]	; (e974 <MiMAC_SetChannel+0x3c>)
    e958:	1dfa      	adds	r2, r7, #7
    e95a:	7812      	ldrb	r2, [r2, #0]
    e95c:	701a      	strb	r2, [r3, #0]
	PHY_SetChannel(channel);
    e95e:	1dfb      	adds	r3, r7, #7
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	0018      	movs	r0, r3
    e964:	4b04      	ldr	r3, [pc, #16]	; (e978 <MiMAC_SetChannel+0x40>)
    e966:	4798      	blx	r3
	return true;
    e968:	2301      	movs	r3, #1
}
    e96a:	0018      	movs	r0, r3
    e96c:	46bd      	mov	sp, r7
    e96e:	b002      	add	sp, #8
    e970:	bd80      	pop	{r7, pc}
    e972:	46c0      	nop			; (mov r8, r8)
    e974:	2000140a 	.word	0x2000140a
    e978:	0000dfb5 	.word	0x0000dfb5

0000e97c <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    e97c:	b590      	push	{r4, r7, lr}
    e97e:	b085      	sub	sp, #20
    e980:	af00      	add	r7, sp, #0
    e982:	003b      	movs	r3, r7
    e984:	6018      	str	r0, [r3, #0]
    e986:	6059      	str	r1, [r3, #4]
    uint8_t i;

    PHY_Init();
    e988:	4b1f      	ldr	r3, [pc, #124]	; (ea08 <MiMAC_Init+0x8c>)
    e98a:	4798      	blx	r3
    MACInitParams = initValue;
    e98c:	4b1f      	ldr	r3, [pc, #124]	; (ea0c <MiMAC_Init+0x90>)
    e98e:	003a      	movs	r2, r7
    e990:	ca03      	ldmia	r2!, {r0, r1}
    e992:	c303      	stmia	r3!, {r0, r1}
    uint16_t x = PHY_RandomReq();
    e994:	230c      	movs	r3, #12
    e996:	18fc      	adds	r4, r7, r3
    e998:	4b1d      	ldr	r3, [pc, #116]	; (ea10 <MiMAC_Init+0x94>)
    e99a:	4798      	blx	r3
    e99c:	0003      	movs	r3, r0
    e99e:	8023      	strh	r3, [r4, #0]
    // Set RF mode
    PHY_SetRxState(true);
    e9a0:	2001      	movs	r0, #1
    e9a2:	4b1c      	ldr	r3, [pc, #112]	; (ea14 <MiMAC_Init+0x98>)
    e9a4:	4798      	blx	r3
    IEEESeqNum = x & 0xff;
    e9a6:	230c      	movs	r3, #12
    e9a8:	18fb      	adds	r3, r7, r3
    e9aa:	881b      	ldrh	r3, [r3, #0]
    e9ac:	b2da      	uxtb	r2, r3
    e9ae:	4b1a      	ldr	r3, [pc, #104]	; (ea18 <MiMAC_Init+0x9c>)
    e9b0:	701a      	strb	r2, [r3, #0]

    MACCurrentChannel = 11;
    e9b2:	4b1a      	ldr	r3, [pc, #104]	; (ea1c <MiMAC_Init+0xa0>)
    e9b4:	220b      	movs	r2, #11
    e9b6:	701a      	strb	r2, [r3, #0]

    // Set Node Address
    PHY_SetIEEEAddr(myLongAddress);
    e9b8:	4b19      	ldr	r3, [pc, #100]	; (ea20 <MiMAC_Init+0xa4>)
    e9ba:	0018      	movs	r0, r3
    e9bc:	4b19      	ldr	r3, [pc, #100]	; (ea24 <MiMAC_Init+0xa8>)
    e9be:	4798      	blx	r3

    trx_status.Val = 0;
    e9c0:	4b19      	ldr	r3, [pc, #100]	; (ea28 <MiMAC_Init+0xac>)
    e9c2:	2200      	movs	r2, #0
    e9c4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < BANK_SIZE; i++) {
    e9c6:	230f      	movs	r3, #15
    e9c8:	18fb      	adds	r3, r7, r3
    e9ca:	2200      	movs	r2, #0
    e9cc:	701a      	strb	r2, [r3, #0]
    e9ce:	e00e      	b.n	e9ee <MiMAC_Init+0x72>
        RxBuffer[i].PayloadLen = 0;
    e9d0:	230f      	movs	r3, #15
    e9d2:	18fb      	adds	r3, r7, r3
    e9d4:	781a      	ldrb	r2, [r3, #0]
    e9d6:	4b15      	ldr	r3, [pc, #84]	; (ea2c <MiMAC_Init+0xb0>)
    e9d8:	214e      	movs	r1, #78	; 0x4e
    e9da:	434a      	muls	r2, r1
    e9dc:	2100      	movs	r1, #0
    e9de:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < BANK_SIZE; i++) {
    e9e0:	230f      	movs	r3, #15
    e9e2:	18fb      	adds	r3, r7, r3
    e9e4:	781a      	ldrb	r2, [r3, #0]
    e9e6:	230f      	movs	r3, #15
    e9e8:	18fb      	adds	r3, r7, r3
    e9ea:	3201      	adds	r2, #1
    e9ec:	701a      	strb	r2, [r3, #0]
    e9ee:	230f      	movs	r3, #15
    e9f0:	18fb      	adds	r3, r7, r3
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	2b13      	cmp	r3, #19
    e9f6:	d9eb      	bls.n	e9d0 <MiMAC_Init+0x54>
        OutgoingFrameCounter.Val = 0;
        nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        OutgoingFrameCounter.Val = 1;
    }
#else
    OutgoingFrameCounter.Val = 1;
    e9f8:	4b0d      	ldr	r3, [pc, #52]	; (ea30 <MiMAC_Init+0xb4>)
    e9fa:	2201      	movs	r2, #1
    e9fc:	601a      	str	r2, [r3, #0]
#endif
#endif

    return true;
    e9fe:	2301      	movs	r3, #1
}
    ea00:	0018      	movs	r0, r3
    ea02:	46bd      	mov	sp, r7
    ea04:	b005      	add	sp, #20
    ea06:	bd90      	pop	{r4, r7, pc}
    ea08:	0000df2d 	.word	0x0000df2d
    ea0c:	20000d9c 	.word	0x20000d9c
    ea10:	0000dea9 	.word	0x0000dea9
    ea14:	0000df8d 	.word	0x0000df8d
    ea18:	20000d90 	.word	0x20000d90
    ea1c:	2000140a 	.word	0x2000140a
    ea20:	20001578 	.word	0x20001578
    ea24:	0000f225 	.word	0x0000f225
    ea28:	2000140c 	.word	0x2000140c
    ea2c:	20000dd8 	.word	0x20000dd8
    ea30:	200013f0 	.word	0x200013f0

0000ea34 <MiMAC_SendPacket>:
 *
 *****************************************************************************************/
bool MiMAC_SendPacket(MAC_TRANS_PARAM transParam,
    uint8_t* MACPayload,
    uint8_t MACPayloadLen)
{
    ea34:	b590      	push	{r4, r7, lr}
    ea36:	b0a7      	sub	sp, #156	; 0x9c
    ea38:	af00      	add	r7, sp, #0
    ea3a:	1d3c      	adds	r4, r7, #4
    ea3c:	6020      	str	r0, [r4, #0]
    ea3e:	6061      	str	r1, [r4, #4]
    ea40:	60a2      	str	r2, [r4, #8]
    ea42:	603b      	str	r3, [r7, #0]
    uint8_t headerLength;
    uint8_t loc = 0;
    ea44:	2396      	movs	r3, #150	; 0x96
    ea46:	18fb      	adds	r3, r7, r3
    ea48:	2200      	movs	r2, #0
    ea4a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
    ea4c:	2395      	movs	r3, #149	; 0x95
    ea4e:	18fb      	adds	r3, r7, r3
    ea50:	2200      	movs	r2, #0
    ea52:	701a      	strb	r2, [r3, #0]
    uint8_t packet[FRAME_BUFFER];
    uint8_t frameControl = 0;
    ea54:	2394      	movs	r3, #148	; 0x94
    ea56:	18fb      	adds	r3, r7, r3
    ea58:	2200      	movs	r2, #0
    ea5a:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
    bool IntraPAN;
#endif

    if (transParam.flags.bits.broadcast) {
    ea5c:	1d3b      	adds	r3, r7, #4
    ea5e:	781b      	ldrb	r3, [r3, #0]
    ea60:	2204      	movs	r2, #4
    ea62:	4013      	ands	r3, r2
    ea64:	b2db      	uxtb	r3, r3
    ea66:	2b00      	cmp	r3, #0
    ea68:	d002      	beq.n	ea70 <MiMAC_SendPacket+0x3c>
        transParam.altDestAddr = true;
    ea6a:	1d3b      	adds	r3, r7, #4
    ea6c:	2201      	movs	r2, #1
    ea6e:	721a      	strb	r2, [r3, #8]
    }

    if (transParam.flags.bits.secEn) {
    ea70:	1d3b      	adds	r3, r7, #4
    ea72:	781b      	ldrb	r3, [r3, #0]
    ea74:	2208      	movs	r2, #8
    ea76:	4013      	ands	r3, r2
    ea78:	b2db      	uxtb	r3, r3
    ea7a:	2b00      	cmp	r3, #0
    ea7c:	d002      	beq.n	ea84 <MiMAC_SendPacket+0x50>
        transParam.altSrcAddr = false;
    ea7e:	1d3b      	adds	r3, r7, #4
    ea80:	2200      	movs	r2, #0
    ea82:	725a      	strb	r2, [r3, #9]
        }
    }
#endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
    ea84:	1d3b      	adds	r3, r7, #4
    ea86:	781b      	ldrb	r3, [r3, #0]
    ea88:	2203      	movs	r2, #3
    ea8a:	4013      	ands	r3, r2
    ea8c:	b2db      	uxtb	r3, r3
    ea8e:	2b01      	cmp	r3, #1
    ea90:	d104      	bne.n	ea9c <MiMAC_SendPacket+0x68>
        frameControl = 0x03;
    ea92:	2394      	movs	r3, #148	; 0x94
    ea94:	18fb      	adds	r3, r7, r3
    ea96:	2203      	movs	r2, #3
    ea98:	701a      	strb	r2, [r3, #0]
    ea9a:	e00a      	b.n	eab2 <MiMAC_SendPacket+0x7e>
    }
    else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA) {
    ea9c:	1d3b      	adds	r3, r7, #4
    ea9e:	781b      	ldrb	r3, [r3, #0]
    eaa0:	2203      	movs	r2, #3
    eaa2:	4013      	ands	r3, r2
    eaa4:	b2db      	uxtb	r3, r3
    eaa6:	2b00      	cmp	r3, #0
    eaa8:	d103      	bne.n	eab2 <MiMAC_SendPacket+0x7e>
        frameControl = 0x01;
    eaaa:	2394      	movs	r3, #148	; 0x94
    eaac:	18fb      	adds	r3, r7, r3
    eaae:	2201      	movs	r2, #1
    eab0:	701a      	strb	r2, [r3, #0]
    }

// decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    eab2:	1d3b      	adds	r3, r7, #4
    eab4:	895a      	ldrh	r2, [r3, #10]
    eab6:	4be3      	ldr	r3, [pc, #908]	; (ee44 <MiMAC_SendPacket+0x410>)
    eab8:	881b      	ldrh	r3, [r3, #0]
    eaba:	429a      	cmp	r2, r3
    eabc:	d115      	bne.n	eaea <MiMAC_SendPacket+0xb6>
    eabe:	4be1      	ldr	r3, [pc, #900]	; (ee44 <MiMAC_SendPacket+0x410>)
    eac0:	881b      	ldrh	r3, [r3, #0]
    eac2:	4ae1      	ldr	r2, [pc, #900]	; (ee48 <MiMAC_SendPacket+0x414>)
    eac4:	4293      	cmp	r3, r2
    eac6:	d010      	beq.n	eaea <MiMAC_SendPacket+0xb6>
#endif
    {
        headerLength = 5;
    eac8:	2397      	movs	r3, #151	; 0x97
    eaca:	18fb      	adds	r3, r7, r3
    eacc:	2205      	movs	r2, #5
    eace:	701a      	strb	r2, [r3, #0]
        frameControl |= 0x40;
    ead0:	2394      	movs	r3, #148	; 0x94
    ead2:	18fb      	adds	r3, r7, r3
    ead4:	2294      	movs	r2, #148	; 0x94
    ead6:	18ba      	adds	r2, r7, r2
    ead8:	7812      	ldrb	r2, [r2, #0]
    eada:	2140      	movs	r1, #64	; 0x40
    eadc:	430a      	orrs	r2, r1
    eade:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        IntraPAN = true;
    eae0:	2393      	movs	r3, #147	; 0x93
    eae2:	18fb      	adds	r3, r7, r3
    eae4:	2201      	movs	r2, #1
    eae6:	701a      	strb	r2, [r3, #0]
    eae8:	e007      	b.n	eafa <MiMAC_SendPacket+0xc6>
#endif
    }
#ifndef TARGET_SMALL
    else {
        headerLength = 7;
    eaea:	2397      	movs	r3, #151	; 0x97
    eaec:	18fb      	adds	r3, r7, r3
    eaee:	2207      	movs	r2, #7
    eaf0:	701a      	strb	r2, [r3, #0]
        IntraPAN = false;
    eaf2:	2393      	movs	r3, #147	; 0x93
    eaf4:	18fb      	adds	r3, r7, r3
    eaf6:	2200      	movs	r2, #0
    eaf8:	701a      	strb	r2, [r3, #0]
    }
#endif

    if (transParam.altDestAddr) {
    eafa:	1d3b      	adds	r3, r7, #4
    eafc:	7a1b      	ldrb	r3, [r3, #8]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d007      	beq.n	eb12 <MiMAC_SendPacket+0xde>
        headerLength += 2;
    eb02:	2397      	movs	r3, #151	; 0x97
    eb04:	18fb      	adds	r3, r7, r3
    eb06:	2297      	movs	r2, #151	; 0x97
    eb08:	18ba      	adds	r2, r7, r2
    eb0a:	7812      	ldrb	r2, [r2, #0]
    eb0c:	3202      	adds	r2, #2
    eb0e:	701a      	strb	r2, [r3, #0]
    eb10:	e006      	b.n	eb20 <MiMAC_SendPacket+0xec>
    }
    else {
        headerLength += 8;
    eb12:	2397      	movs	r3, #151	; 0x97
    eb14:	18fb      	adds	r3, r7, r3
    eb16:	2297      	movs	r2, #151	; 0x97
    eb18:	18ba      	adds	r2, r7, r2
    eb1a:	7812      	ldrb	r2, [r2, #0]
    eb1c:	3208      	adds	r2, #8
    eb1e:	701a      	strb	r2, [r3, #0]
    }

    if (transParam.altSrcAddr) {
    eb20:	1d3b      	adds	r3, r7, #4
    eb22:	7a5b      	ldrb	r3, [r3, #9]
    eb24:	2b00      	cmp	r3, #0
    eb26:	d007      	beq.n	eb38 <MiMAC_SendPacket+0x104>
        headerLength += 2;
    eb28:	2397      	movs	r3, #151	; 0x97
    eb2a:	18fb      	adds	r3, r7, r3
    eb2c:	2297      	movs	r2, #151	; 0x97
    eb2e:	18ba      	adds	r2, r7, r2
    eb30:	7812      	ldrb	r2, [r2, #0]
    eb32:	3202      	adds	r2, #2
    eb34:	701a      	strb	r2, [r3, #0]
    eb36:	e006      	b.n	eb46 <MiMAC_SendPacket+0x112>
    }
    else {
        headerLength += 8;
    eb38:	2397      	movs	r3, #151	; 0x97
    eb3a:	18fb      	adds	r3, r7, r3
    eb3c:	2297      	movs	r2, #151	; 0x97
    eb3e:	18ba      	adds	r2, r7, r2
    eb40:	7812      	ldrb	r2, [r2, #0]
    eb42:	3208      	adds	r2, #8
    eb44:	701a      	strb	r2, [r3, #0]
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    eb46:	1d3b      	adds	r3, r7, #4
    eb48:	781b      	ldrb	r3, [r3, #0]
    eb4a:	2220      	movs	r2, #32
    eb4c:	4013      	ands	r3, r2
    eb4e:	b2db      	uxtb	r3, r3
    eb50:	2b00      	cmp	r3, #0
    eb52:	d00e      	beq.n	eb72 <MiMAC_SendPacket+0x13e>
    eb54:	1d3b      	adds	r3, r7, #4
    eb56:	781b      	ldrb	r3, [r3, #0]
    eb58:	2204      	movs	r2, #4
    eb5a:	4013      	ands	r3, r2
    eb5c:	b2db      	uxtb	r3, r3
    eb5e:	2b00      	cmp	r3, #0
    eb60:	d107      	bne.n	eb72 <MiMAC_SendPacket+0x13e>
        frameControl |= 0x20;
    eb62:	2394      	movs	r3, #148	; 0x94
    eb64:	18fb      	adds	r3, r7, r3
    eb66:	2294      	movs	r2, #148	; 0x94
    eb68:	18ba      	adds	r2, r7, r2
    eb6a:	7812      	ldrb	r2, [r2, #0]
    eb6c:	2120      	movs	r1, #32
    eb6e:	430a      	orrs	r2, r1
    eb70:	701a      	strb	r2, [r3, #0]
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    eb72:	1d3b      	adds	r3, r7, #4
    eb74:	781b      	ldrb	r3, [r3, #0]
    eb76:	2203      	movs	r2, #3
    eb78:	4013      	ands	r3, r2
    eb7a:	b2db      	uxtb	r3, r3
    eb7c:	2b03      	cmp	r3, #3
    eb7e:	d113      	bne.n	eba8 <MiMAC_SendPacket+0x174>
        frameControl = 0x00;
    eb80:	2394      	movs	r3, #148	; 0x94
    eb82:	18fb      	adds	r3, r7, r3
    eb84:	2200      	movs	r2, #0
    eb86:	701a      	strb	r2, [r3, #0]
        headerLength = 7;
    eb88:	2397      	movs	r3, #151	; 0x97
    eb8a:	18fb      	adds	r3, r7, r3
    eb8c:	2207      	movs	r2, #7
    eb8e:	701a      	strb	r2, [r3, #0]
#if !defined(TARGET_SMALL)
        IntraPAN = false;
    eb90:	2393      	movs	r3, #147	; 0x93
    eb92:	18fb      	adds	r3, r7, r3
    eb94:	2200      	movs	r2, #0
    eb96:	701a      	strb	r2, [r3, #0]
#endif
        transParam.altSrcAddr = true;
    eb98:	1d3b      	adds	r3, r7, #4
    eb9a:	2201      	movs	r2, #1
    eb9c:	725a      	strb	r2, [r3, #9]
        transParam.flags.bits.ackReq = false;
    eb9e:	1d3b      	adds	r3, r7, #4
    eba0:	781a      	ldrb	r2, [r3, #0]
    eba2:	2120      	movs	r1, #32
    eba4:	438a      	bics	r2, r1
    eba6:	701a      	strb	r2, [r3, #0]
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
    eba8:	1d3b      	adds	r3, r7, #4
    ebaa:	781b      	ldrb	r3, [r3, #0]
    ebac:	2208      	movs	r2, #8
    ebae:	4013      	ands	r3, r2
    ebb0:	b2db      	uxtb	r3, r3
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d013      	beq.n	ebde <MiMAC_SendPacket+0x1aa>
        frameControl |= 0x08;
    ebb6:	2394      	movs	r3, #148	; 0x94
    ebb8:	18fb      	adds	r3, r7, r3
    ebba:	2294      	movs	r2, #148	; 0x94
    ebbc:	18ba      	adds	r2, r7, r2
    ebbe:	7812      	ldrb	r2, [r2, #0]
    ebc0:	2108      	movs	r1, #8
    ebc2:	430a      	orrs	r2, r1
    ebc4:	701a      	strb	r2, [r3, #0]
        //DataEncrypt(MACPayload, &MACPayloadLen , 0 , 0 , 0);
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    ebc6:	2394      	movs	r3, #148	; 0x94
    ebc8:	18fb      	adds	r3, r7, r3
    ebca:	7819      	ldrb	r1, [r3, #0]
    ebcc:	4b9f      	ldr	r3, [pc, #636]	; (ee4c <MiMAC_SendPacket+0x418>)
    ebce:	681a      	ldr	r2, [r3, #0]
    ebd0:	23a8      	movs	r3, #168	; 0xa8
    ebd2:	18fc      	adds	r4, r7, r3
    ebd4:	6838      	ldr	r0, [r7, #0]
    ebd6:	000b      	movs	r3, r1
    ebd8:	0021      	movs	r1, r4
    ebda:	4c9d      	ldr	r4, [pc, #628]	; (ee50 <MiMAC_SendPacket+0x41c>)
    ebdc:	47a0      	blx	r4
    }
#endif

    // set header length
    packet[loc++] = headerLength;
    ebde:	2396      	movs	r3, #150	; 0x96
    ebe0:	18fb      	adds	r3, r7, r3
    ebe2:	781b      	ldrb	r3, [r3, #0]
    ebe4:	2296      	movs	r2, #150	; 0x96
    ebe6:	18ba      	adds	r2, r7, r2
    ebe8:	1c59      	adds	r1, r3, #1
    ebea:	7011      	strb	r1, [r2, #0]
    ebec:	0019      	movs	r1, r3
    ebee:	2310      	movs	r3, #16
    ebf0:	18fb      	adds	r3, r7, r3
    ebf2:	2297      	movs	r2, #151	; 0x97
    ebf4:	18ba      	adds	r2, r7, r2
    ebf6:	7812      	ldrb	r2, [r2, #0]
    ebf8:	545a      	strb	r2, [r3, r1]
// set packet length
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
    ebfa:	1d3b      	adds	r3, r7, #4
    ebfc:	781b      	ldrb	r3, [r3, #0]
    ebfe:	2208      	movs	r2, #8
    ec00:	4013      	ands	r3, r2
    ec02:	b2db      	uxtb	r3, r3
    ec04:	2b00      	cmp	r3, #0
    ec06:	d015      	beq.n	ec34 <MiMAC_SendPacket+0x200>
        // 4 byte mic and 5 byte outgoing frame counter
        packet[loc++] = MACPayloadLen + headerLength + 9;
    ec08:	2396      	movs	r3, #150	; 0x96
    ec0a:	18fb      	adds	r3, r7, r3
    ec0c:	781b      	ldrb	r3, [r3, #0]
    ec0e:	2296      	movs	r2, #150	; 0x96
    ec10:	18ba      	adds	r2, r7, r2
    ec12:	1c59      	adds	r1, r3, #1
    ec14:	7011      	strb	r1, [r2, #0]
    ec16:	0019      	movs	r1, r3
    ec18:	23a8      	movs	r3, #168	; 0xa8
    ec1a:	18fb      	adds	r3, r7, r3
    ec1c:	781a      	ldrb	r2, [r3, #0]
    ec1e:	2397      	movs	r3, #151	; 0x97
    ec20:	18fb      	adds	r3, r7, r3
    ec22:	781b      	ldrb	r3, [r3, #0]
    ec24:	18d3      	adds	r3, r2, r3
    ec26:	b2db      	uxtb	r3, r3
    ec28:	3309      	adds	r3, #9
    ec2a:	b2da      	uxtb	r2, r3
    ec2c:	2310      	movs	r3, #16
    ec2e:	18fb      	adds	r3, r7, r3
    ec30:	545a      	strb	r2, [r3, r1]
    ec32:	e012      	b.n	ec5a <MiMAC_SendPacket+0x226>
    }
    else
#endif
    {
        packet[loc++] = MACPayloadLen + headerLength;
    ec34:	2396      	movs	r3, #150	; 0x96
    ec36:	18fb      	adds	r3, r7, r3
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	2296      	movs	r2, #150	; 0x96
    ec3c:	18ba      	adds	r2, r7, r2
    ec3e:	1c59      	adds	r1, r3, #1
    ec40:	7011      	strb	r1, [r2, #0]
    ec42:	0019      	movs	r1, r3
    ec44:	23a8      	movs	r3, #168	; 0xa8
    ec46:	18fb      	adds	r3, r7, r3
    ec48:	781a      	ldrb	r2, [r3, #0]
    ec4a:	2397      	movs	r3, #151	; 0x97
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	18d3      	adds	r3, r2, r3
    ec52:	b2da      	uxtb	r2, r3
    ec54:	2310      	movs	r3, #16
    ec56:	18fb      	adds	r3, r7, r3
    ec58:	545a      	strb	r2, [r3, r1]
    }

    // set frame control LSB
    packet[loc++] = frameControl;
    ec5a:	2396      	movs	r3, #150	; 0x96
    ec5c:	18fb      	adds	r3, r7, r3
    ec5e:	781b      	ldrb	r3, [r3, #0]
    ec60:	2296      	movs	r2, #150	; 0x96
    ec62:	18ba      	adds	r2, r7, r2
    ec64:	1c59      	adds	r1, r3, #1
    ec66:	7011      	strb	r1, [r2, #0]
    ec68:	0019      	movs	r1, r3
    ec6a:	2310      	movs	r3, #16
    ec6c:	18fb      	adds	r3, r7, r3
    ec6e:	2294      	movs	r2, #148	; 0x94
    ec70:	18ba      	adds	r2, r7, r2
    ec72:	7812      	ldrb	r2, [r2, #0]
    ec74:	545a      	strb	r2, [r3, r1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    ec76:	1d3b      	adds	r3, r7, #4
    ec78:	781b      	ldrb	r3, [r3, #0]
    ec7a:	2203      	movs	r2, #3
    ec7c:	4013      	ands	r3, r2
    ec7e:	b2db      	uxtb	r3, r3
    ec80:	2b03      	cmp	r3, #3
    ec82:	d11d      	bne.n	ecc0 <MiMAC_SendPacket+0x28c>
        packet[loc++] = 0x80;
    ec84:	2396      	movs	r3, #150	; 0x96
    ec86:	18fb      	adds	r3, r7, r3
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	2296      	movs	r2, #150	; 0x96
    ec8c:	18ba      	adds	r2, r7, r2
    ec8e:	1c59      	adds	r1, r3, #1
    ec90:	7011      	strb	r1, [r2, #0]
    ec92:	001a      	movs	r2, r3
    ec94:	2310      	movs	r3, #16
    ec96:	18fb      	adds	r3, r7, r3
    ec98:	2180      	movs	r1, #128	; 0x80
    ec9a:	5499      	strb	r1, [r3, r2]
        // sequence number
        packet[loc++] = IEEESeqNum++;
    ec9c:	2396      	movs	r3, #150	; 0x96
    ec9e:	18fb      	adds	r3, r7, r3
    eca0:	781b      	ldrb	r3, [r3, #0]
    eca2:	2296      	movs	r2, #150	; 0x96
    eca4:	18ba      	adds	r2, r7, r2
    eca6:	1c59      	adds	r1, r3, #1
    eca8:	7011      	strb	r1, [r2, #0]
    ecaa:	0019      	movs	r1, r3
    ecac:	4b69      	ldr	r3, [pc, #420]	; (ee54 <MiMAC_SendPacket+0x420>)
    ecae:	781b      	ldrb	r3, [r3, #0]
    ecb0:	1c5a      	adds	r2, r3, #1
    ecb2:	b2d0      	uxtb	r0, r2
    ecb4:	4a67      	ldr	r2, [pc, #412]	; (ee54 <MiMAC_SendPacket+0x420>)
    ecb6:	7010      	strb	r0, [r2, #0]
    ecb8:	2210      	movs	r2, #16
    ecba:	18ba      	adds	r2, r7, r2
    ecbc:	5453      	strb	r3, [r2, r1]
    ecbe:	e0e9      	b.n	ee94 <MiMAC_SendPacket+0x460>
    }
    else {
        if (transParam.altDestAddr && transParam.altSrcAddr) {
    ecc0:	1d3b      	adds	r3, r7, #4
    ecc2:	7a1b      	ldrb	r3, [r3, #8]
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d010      	beq.n	ecea <MiMAC_SendPacket+0x2b6>
    ecc8:	1d3b      	adds	r3, r7, #4
    ecca:	7a5b      	ldrb	r3, [r3, #9]
    eccc:	2b00      	cmp	r3, #0
    ecce:	d00c      	beq.n	ecea <MiMAC_SendPacket+0x2b6>
            packet[loc++] = 0x88;
    ecd0:	2396      	movs	r3, #150	; 0x96
    ecd2:	18fb      	adds	r3, r7, r3
    ecd4:	781b      	ldrb	r3, [r3, #0]
    ecd6:	2296      	movs	r2, #150	; 0x96
    ecd8:	18ba      	adds	r2, r7, r2
    ecda:	1c59      	adds	r1, r3, #1
    ecdc:	7011      	strb	r1, [r2, #0]
    ecde:	001a      	movs	r2, r3
    ece0:	2310      	movs	r3, #16
    ece2:	18fb      	adds	r3, r7, r3
    ece4:	2188      	movs	r1, #136	; 0x88
    ece6:	5499      	strb	r1, [r3, r2]
    ece8:	e03b      	b.n	ed62 <MiMAC_SendPacket+0x32e>
        }
        else if (transParam.altDestAddr && transParam.altSrcAddr == 0) {
    ecea:	1d3b      	adds	r3, r7, #4
    ecec:	7a1b      	ldrb	r3, [r3, #8]
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d013      	beq.n	ed1a <MiMAC_SendPacket+0x2e6>
    ecf2:	1d3b      	adds	r3, r7, #4
    ecf4:	7a5b      	ldrb	r3, [r3, #9]
    ecf6:	2201      	movs	r2, #1
    ecf8:	4053      	eors	r3, r2
    ecfa:	b2db      	uxtb	r3, r3
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	d00c      	beq.n	ed1a <MiMAC_SendPacket+0x2e6>
            packet[loc++] = 0xC8;
    ed00:	2396      	movs	r3, #150	; 0x96
    ed02:	18fb      	adds	r3, r7, r3
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	2296      	movs	r2, #150	; 0x96
    ed08:	18ba      	adds	r2, r7, r2
    ed0a:	1c59      	adds	r1, r3, #1
    ed0c:	7011      	strb	r1, [r2, #0]
    ed0e:	001a      	movs	r2, r3
    ed10:	2310      	movs	r3, #16
    ed12:	18fb      	adds	r3, r7, r3
    ed14:	21c8      	movs	r1, #200	; 0xc8
    ed16:	5499      	strb	r1, [r3, r2]
    ed18:	e023      	b.n	ed62 <MiMAC_SendPacket+0x32e>
        }
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
    ed1a:	1d3b      	adds	r3, r7, #4
    ed1c:	7a1b      	ldrb	r3, [r3, #8]
    ed1e:	2201      	movs	r2, #1
    ed20:	4053      	eors	r3, r2
    ed22:	b2db      	uxtb	r3, r3
    ed24:	2b00      	cmp	r3, #0
    ed26:	d010      	beq.n	ed4a <MiMAC_SendPacket+0x316>
    ed28:	1d3b      	adds	r3, r7, #4
    ed2a:	7a5b      	ldrb	r3, [r3, #9]
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d00c      	beq.n	ed4a <MiMAC_SendPacket+0x316>
            packet[loc++] = 0x8C;
    ed30:	2396      	movs	r3, #150	; 0x96
    ed32:	18fb      	adds	r3, r7, r3
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2296      	movs	r2, #150	; 0x96
    ed38:	18ba      	adds	r2, r7, r2
    ed3a:	1c59      	adds	r1, r3, #1
    ed3c:	7011      	strb	r1, [r2, #0]
    ed3e:	001a      	movs	r2, r3
    ed40:	2310      	movs	r3, #16
    ed42:	18fb      	adds	r3, r7, r3
    ed44:	218c      	movs	r1, #140	; 0x8c
    ed46:	5499      	strb	r1, [r3, r2]
    ed48:	e00b      	b.n	ed62 <MiMAC_SendPacket+0x32e>
        }
        else {
            packet[loc++] = 0xCC;
    ed4a:	2396      	movs	r3, #150	; 0x96
    ed4c:	18fb      	adds	r3, r7, r3
    ed4e:	781b      	ldrb	r3, [r3, #0]
    ed50:	2296      	movs	r2, #150	; 0x96
    ed52:	18ba      	adds	r2, r7, r2
    ed54:	1c59      	adds	r1, r3, #1
    ed56:	7011      	strb	r1, [r2, #0]
    ed58:	001a      	movs	r2, r3
    ed5a:	2310      	movs	r3, #16
    ed5c:	18fb      	adds	r3, r7, r3
    ed5e:	21cc      	movs	r1, #204	; 0xcc
    ed60:	5499      	strb	r1, [r3, r2]
        }

        // sequence number
        packet[loc++] = IEEESeqNum++;
    ed62:	2396      	movs	r3, #150	; 0x96
    ed64:	18fb      	adds	r3, r7, r3
    ed66:	781b      	ldrb	r3, [r3, #0]
    ed68:	2296      	movs	r2, #150	; 0x96
    ed6a:	18ba      	adds	r2, r7, r2
    ed6c:	1c59      	adds	r1, r3, #1
    ed6e:	7011      	strb	r1, [r2, #0]
    ed70:	0019      	movs	r1, r3
    ed72:	4b38      	ldr	r3, [pc, #224]	; (ee54 <MiMAC_SendPacket+0x420>)
    ed74:	781b      	ldrb	r3, [r3, #0]
    ed76:	1c5a      	adds	r2, r3, #1
    ed78:	b2d0      	uxtb	r0, r2
    ed7a:	4a36      	ldr	r2, [pc, #216]	; (ee54 <MiMAC_SendPacket+0x420>)
    ed7c:	7010      	strb	r0, [r2, #0]
    ed7e:	2210      	movs	r2, #16
    ed80:	18ba      	adds	r2, r7, r2
    ed82:	5453      	strb	r3, [r2, r1]

        // destination PANID
        packet[loc++] = transParam.DestPANID.v[0];
    ed84:	2396      	movs	r3, #150	; 0x96
    ed86:	18fb      	adds	r3, r7, r3
    ed88:	781b      	ldrb	r3, [r3, #0]
    ed8a:	2296      	movs	r2, #150	; 0x96
    ed8c:	18ba      	adds	r2, r7, r2
    ed8e:	1c59      	adds	r1, r3, #1
    ed90:	7011      	strb	r1, [r2, #0]
    ed92:	001a      	movs	r2, r3
    ed94:	1d3b      	adds	r3, r7, #4
    ed96:	7a99      	ldrb	r1, [r3, #10]
    ed98:	2310      	movs	r3, #16
    ed9a:	18fb      	adds	r3, r7, r3
    ed9c:	5499      	strb	r1, [r3, r2]
        packet[loc++] = transParam.DestPANID.v[1];
    ed9e:	2396      	movs	r3, #150	; 0x96
    eda0:	18fb      	adds	r3, r7, r3
    eda2:	781b      	ldrb	r3, [r3, #0]
    eda4:	2296      	movs	r2, #150	; 0x96
    eda6:	18ba      	adds	r2, r7, r2
    eda8:	1c59      	adds	r1, r3, #1
    edaa:	7011      	strb	r1, [r2, #0]
    edac:	001a      	movs	r2, r3
    edae:	1d3b      	adds	r3, r7, #4
    edb0:	7ad9      	ldrb	r1, [r3, #11]
    edb2:	2310      	movs	r3, #16
    edb4:	18fb      	adds	r3, r7, r3
    edb6:	5499      	strb	r1, [r3, r2]

        // destination address
        if (transParam.flags.bits.broadcast) {
    edb8:	1d3b      	adds	r3, r7, #4
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	2204      	movs	r2, #4
    edbe:	4013      	ands	r3, r2
    edc0:	b2db      	uxtb	r3, r3
    edc2:	2b00      	cmp	r3, #0
    edc4:	d018      	beq.n	edf8 <MiMAC_SendPacket+0x3c4>
            packet[loc++] = 0xFF;
    edc6:	2396      	movs	r3, #150	; 0x96
    edc8:	18fb      	adds	r3, r7, r3
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	2296      	movs	r2, #150	; 0x96
    edce:	18ba      	adds	r2, r7, r2
    edd0:	1c59      	adds	r1, r3, #1
    edd2:	7011      	strb	r1, [r2, #0]
    edd4:	001a      	movs	r2, r3
    edd6:	2310      	movs	r3, #16
    edd8:	18fb      	adds	r3, r7, r3
    edda:	21ff      	movs	r1, #255	; 0xff
    eddc:	5499      	strb	r1, [r3, r2]
            packet[loc++] = 0xFF;
    edde:	2396      	movs	r3, #150	; 0x96
    ede0:	18fb      	adds	r3, r7, r3
    ede2:	781b      	ldrb	r3, [r3, #0]
    ede4:	2296      	movs	r2, #150	; 0x96
    ede6:	18ba      	adds	r2, r7, r2
    ede8:	1c59      	adds	r1, r3, #1
    edea:	7011      	strb	r1, [r2, #0]
    edec:	001a      	movs	r2, r3
    edee:	2310      	movs	r3, #16
    edf0:	18fb      	adds	r3, r7, r3
    edf2:	21ff      	movs	r1, #255	; 0xff
    edf4:	5499      	strb	r1, [r3, r2]
    edf6:	e04d      	b.n	ee94 <MiMAC_SendPacket+0x460>
        }
        else {
            if (transParam.altDestAddr) {
    edf8:	1d3b      	adds	r3, r7, #4
    edfa:	7a1b      	ldrb	r3, [r3, #8]
    edfc:	2b00      	cmp	r3, #0
    edfe:	d01c      	beq.n	ee3a <MiMAC_SendPacket+0x406>
                packet[loc++] = transParam.DestAddress[0];
    ee00:	2396      	movs	r3, #150	; 0x96
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	2296      	movs	r2, #150	; 0x96
    ee08:	18ba      	adds	r2, r7, r2
    ee0a:	1c59      	adds	r1, r3, #1
    ee0c:	7011      	strb	r1, [r2, #0]
    ee0e:	001a      	movs	r2, r3
    ee10:	1d3b      	adds	r3, r7, #4
    ee12:	685b      	ldr	r3, [r3, #4]
    ee14:	7819      	ldrb	r1, [r3, #0]
    ee16:	2310      	movs	r3, #16
    ee18:	18fb      	adds	r3, r7, r3
    ee1a:	5499      	strb	r1, [r3, r2]
                packet[loc++] = transParam.DestAddress[1];
    ee1c:	2396      	movs	r3, #150	; 0x96
    ee1e:	18fb      	adds	r3, r7, r3
    ee20:	781b      	ldrb	r3, [r3, #0]
    ee22:	2296      	movs	r2, #150	; 0x96
    ee24:	18ba      	adds	r2, r7, r2
    ee26:	1c59      	adds	r1, r3, #1
    ee28:	7011      	strb	r1, [r2, #0]
    ee2a:	001a      	movs	r2, r3
    ee2c:	1d3b      	adds	r3, r7, #4
    ee2e:	685b      	ldr	r3, [r3, #4]
    ee30:	7859      	ldrb	r1, [r3, #1]
    ee32:	2310      	movs	r3, #16
    ee34:	18fb      	adds	r3, r7, r3
    ee36:	5499      	strb	r1, [r3, r2]
    ee38:	e02c      	b.n	ee94 <MiMAC_SendPacket+0x460>
            }
            else {
                for (i = 0; i < 8; i++) {
    ee3a:	2395      	movs	r3, #149	; 0x95
    ee3c:	18fb      	adds	r3, r7, r3
    ee3e:	2200      	movs	r2, #0
    ee40:	701a      	strb	r2, [r3, #0]
    ee42:	e022      	b.n	ee8a <MiMAC_SendPacket+0x456>
    ee44:	20001408 	.word	0x20001408
    ee48:	0000ffff 	.word	0x0000ffff
    ee4c:	200013f0 	.word	0x200013f0
    ee50:	0000e3ed 	.word	0x0000e3ed
    ee54:	20000d90 	.word	0x20000d90
                    packet[loc++] = transParam.DestAddress[i];
    ee58:	2396      	movs	r3, #150	; 0x96
    ee5a:	18fb      	adds	r3, r7, r3
    ee5c:	781b      	ldrb	r3, [r3, #0]
    ee5e:	2296      	movs	r2, #150	; 0x96
    ee60:	18ba      	adds	r2, r7, r2
    ee62:	1c59      	adds	r1, r3, #1
    ee64:	7011      	strb	r1, [r2, #0]
    ee66:	0019      	movs	r1, r3
    ee68:	1d3b      	adds	r3, r7, #4
    ee6a:	685a      	ldr	r2, [r3, #4]
    ee6c:	2395      	movs	r3, #149	; 0x95
    ee6e:	18fb      	adds	r3, r7, r3
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	18d3      	adds	r3, r2, r3
    ee74:	781a      	ldrb	r2, [r3, #0]
    ee76:	2310      	movs	r3, #16
    ee78:	18fb      	adds	r3, r7, r3
    ee7a:	545a      	strb	r2, [r3, r1]
                for (i = 0; i < 8; i++) {
    ee7c:	2395      	movs	r3, #149	; 0x95
    ee7e:	18fb      	adds	r3, r7, r3
    ee80:	781a      	ldrb	r2, [r3, #0]
    ee82:	2395      	movs	r3, #149	; 0x95
    ee84:	18fb      	adds	r3, r7, r3
    ee86:	3201      	adds	r2, #1
    ee88:	701a      	strb	r2, [r3, #0]
    ee8a:	2395      	movs	r3, #149	; 0x95
    ee8c:	18fb      	adds	r3, r7, r3
    ee8e:	781b      	ldrb	r3, [r3, #0]
    ee90:	2b07      	cmp	r3, #7
    ee92:	d9e1      	bls.n	ee58 <MiMAC_SendPacket+0x424>
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false) {
    ee94:	2393      	movs	r3, #147	; 0x93
    ee96:	18fb      	adds	r3, r7, r3
    ee98:	781b      	ldrb	r3, [r3, #0]
    ee9a:	2201      	movs	r2, #1
    ee9c:	4053      	eors	r3, r2
    ee9e:	b2db      	uxtb	r3, r3
    eea0:	2b00      	cmp	r3, #0
    eea2:	d019      	beq.n	eed8 <MiMAC_SendPacket+0x4a4>
        packet[loc++] = MAC_PANID.v[0];
    eea4:	2396      	movs	r3, #150	; 0x96
    eea6:	18fb      	adds	r3, r7, r3
    eea8:	781b      	ldrb	r3, [r3, #0]
    eeaa:	2296      	movs	r2, #150	; 0x96
    eeac:	18ba      	adds	r2, r7, r2
    eeae:	1c59      	adds	r1, r3, #1
    eeb0:	7011      	strb	r1, [r2, #0]
    eeb2:	001a      	movs	r2, r3
    eeb4:	4b8e      	ldr	r3, [pc, #568]	; (f0f0 <MiMAC_SendPacket+0x6bc>)
    eeb6:	7819      	ldrb	r1, [r3, #0]
    eeb8:	2310      	movs	r3, #16
    eeba:	18fb      	adds	r3, r7, r3
    eebc:	5499      	strb	r1, [r3, r2]
        packet[loc++] = MAC_PANID.v[1];
    eebe:	2396      	movs	r3, #150	; 0x96
    eec0:	18fb      	adds	r3, r7, r3
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	2296      	movs	r2, #150	; 0x96
    eec6:	18ba      	adds	r2, r7, r2
    eec8:	1c59      	adds	r1, r3, #1
    eeca:	7011      	strb	r1, [r2, #0]
    eecc:	001a      	movs	r2, r3
    eece:	4b88      	ldr	r3, [pc, #544]	; (f0f0 <MiMAC_SendPacket+0x6bc>)
    eed0:	7859      	ldrb	r1, [r3, #1]
    eed2:	2310      	movs	r3, #16
    eed4:	18fb      	adds	r3, r7, r3
    eed6:	5499      	strb	r1, [r3, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr) {
    eed8:	1d3b      	adds	r3, r7, #4
    eeda:	7a5b      	ldrb	r3, [r3, #9]
    eedc:	2b00      	cmp	r3, #0
    eede:	d01a      	beq.n	ef16 <MiMAC_SendPacket+0x4e2>
        packet[loc++] = myNetworkAddress.v[0];
    eee0:	2396      	movs	r3, #150	; 0x96
    eee2:	18fb      	adds	r3, r7, r3
    eee4:	781b      	ldrb	r3, [r3, #0]
    eee6:	2296      	movs	r2, #150	; 0x96
    eee8:	18ba      	adds	r2, r7, r2
    eeea:	1c59      	adds	r1, r3, #1
    eeec:	7011      	strb	r1, [r2, #0]
    eeee:	001a      	movs	r2, r3
    eef0:	4b80      	ldr	r3, [pc, #512]	; (f0f4 <MiMAC_SendPacket+0x6c0>)
    eef2:	7819      	ldrb	r1, [r3, #0]
    eef4:	2310      	movs	r3, #16
    eef6:	18fb      	adds	r3, r7, r3
    eef8:	5499      	strb	r1, [r3, r2]
        packet[loc++] = myNetworkAddress.v[1];
    eefa:	2396      	movs	r3, #150	; 0x96
    eefc:	18fb      	adds	r3, r7, r3
    eefe:	781b      	ldrb	r3, [r3, #0]
    ef00:	2296      	movs	r2, #150	; 0x96
    ef02:	18ba      	adds	r2, r7, r2
    ef04:	1c59      	adds	r1, r3, #1
    ef06:	7011      	strb	r1, [r2, #0]
    ef08:	001a      	movs	r2, r3
    ef0a:	4b7a      	ldr	r3, [pc, #488]	; (f0f4 <MiMAC_SendPacket+0x6c0>)
    ef0c:	7859      	ldrb	r1, [r3, #1]
    ef0e:	2310      	movs	r3, #16
    ef10:	18fb      	adds	r3, r7, r3
    ef12:	5499      	strb	r1, [r3, r2]
    ef14:	e022      	b.n	ef5c <MiMAC_SendPacket+0x528>
    }
    else {
        for (i = 0; i < 8; i++) {
    ef16:	2395      	movs	r3, #149	; 0x95
    ef18:	18fb      	adds	r3, r7, r3
    ef1a:	2200      	movs	r2, #0
    ef1c:	701a      	strb	r2, [r3, #0]
    ef1e:	e018      	b.n	ef52 <MiMAC_SendPacket+0x51e>
            packet[loc++] = MACInitParams.PAddress[i];
    ef20:	2396      	movs	r3, #150	; 0x96
    ef22:	18fb      	adds	r3, r7, r3
    ef24:	781b      	ldrb	r3, [r3, #0]
    ef26:	2296      	movs	r2, #150	; 0x96
    ef28:	18ba      	adds	r2, r7, r2
    ef2a:	1c59      	adds	r1, r3, #1
    ef2c:	7011      	strb	r1, [r2, #0]
    ef2e:	0019      	movs	r1, r3
    ef30:	4b71      	ldr	r3, [pc, #452]	; (f0f8 <MiMAC_SendPacket+0x6c4>)
    ef32:	685a      	ldr	r2, [r3, #4]
    ef34:	2395      	movs	r3, #149	; 0x95
    ef36:	18fb      	adds	r3, r7, r3
    ef38:	781b      	ldrb	r3, [r3, #0]
    ef3a:	18d3      	adds	r3, r2, r3
    ef3c:	781a      	ldrb	r2, [r3, #0]
    ef3e:	2310      	movs	r3, #16
    ef40:	18fb      	adds	r3, r7, r3
    ef42:	545a      	strb	r2, [r3, r1]
        for (i = 0; i < 8; i++) {
    ef44:	2395      	movs	r3, #149	; 0x95
    ef46:	18fb      	adds	r3, r7, r3
    ef48:	781a      	ldrb	r2, [r3, #0]
    ef4a:	2395      	movs	r3, #149	; 0x95
    ef4c:	18fb      	adds	r3, r7, r3
    ef4e:	3201      	adds	r2, #1
    ef50:	701a      	strb	r2, [r3, #0]
    ef52:	2395      	movs	r3, #149	; 0x95
    ef54:	18fb      	adds	r3, r7, r3
    ef56:	781b      	ldrb	r3, [r3, #0]
    ef58:	2b07      	cmp	r3, #7
    ef5a:	d9e1      	bls.n	ef20 <MiMAC_SendPacket+0x4ec>
        }
    }
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
    ef5c:	1d3b      	adds	r3, r7, #4
    ef5e:	781b      	ldrb	r3, [r3, #0]
    ef60:	2208      	movs	r2, #8
    ef62:	4013      	ands	r3, r2
    ef64:	b2db      	uxtb	r3, r3
    ef66:	2b00      	cmp	r3, #0
    ef68:	d031      	beq.n	efce <MiMAC_SendPacket+0x59a>
        // fill the additional security aux header
        for (i = 0; i < 4; i++) {
    ef6a:	2395      	movs	r3, #149	; 0x95
    ef6c:	18fb      	adds	r3, r7, r3
    ef6e:	2200      	movs	r2, #0
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	e016      	b.n	efa2 <MiMAC_SendPacket+0x56e>
            packet[loc++] = OutgoingFrameCounter.v[i];
    ef74:	2396      	movs	r3, #150	; 0x96
    ef76:	18fb      	adds	r3, r7, r3
    ef78:	781b      	ldrb	r3, [r3, #0]
    ef7a:	2296      	movs	r2, #150	; 0x96
    ef7c:	18ba      	adds	r2, r7, r2
    ef7e:	1c59      	adds	r1, r3, #1
    ef80:	7011      	strb	r1, [r2, #0]
    ef82:	0019      	movs	r1, r3
    ef84:	2395      	movs	r3, #149	; 0x95
    ef86:	18fb      	adds	r3, r7, r3
    ef88:	781b      	ldrb	r3, [r3, #0]
    ef8a:	4a5c      	ldr	r2, [pc, #368]	; (f0fc <MiMAC_SendPacket+0x6c8>)
    ef8c:	5cd2      	ldrb	r2, [r2, r3]
    ef8e:	2310      	movs	r3, #16
    ef90:	18fb      	adds	r3, r7, r3
    ef92:	545a      	strb	r2, [r3, r1]
        for (i = 0; i < 4; i++) {
    ef94:	2395      	movs	r3, #149	; 0x95
    ef96:	18fb      	adds	r3, r7, r3
    ef98:	781a      	ldrb	r2, [r3, #0]
    ef9a:	2395      	movs	r3, #149	; 0x95
    ef9c:	18fb      	adds	r3, r7, r3
    ef9e:	3201      	adds	r2, #1
    efa0:	701a      	strb	r2, [r3, #0]
    efa2:	2395      	movs	r3, #149	; 0x95
    efa4:	18fb      	adds	r3, r7, r3
    efa6:	781b      	ldrb	r3, [r3, #0]
    efa8:	2b03      	cmp	r3, #3
    efaa:	d9e3      	bls.n	ef74 <MiMAC_SendPacket+0x540>
        }
        OutgoingFrameCounter.Val++;
    efac:	4b53      	ldr	r3, [pc, #332]	; (f0fc <MiMAC_SendPacket+0x6c8>)
    efae:	681b      	ldr	r3, [r3, #0]
    efb0:	1c5a      	adds	r2, r3, #1
    efb2:	4b52      	ldr	r3, [pc, #328]	; (f0fc <MiMAC_SendPacket+0x6c8>)
    efb4:	601a      	str	r2, [r3, #0]
        if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0)) {
            nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        }
#endif
        //copy myKeySequenceNumber
        packet[loc++] = myKeySequenceNumber;
    efb6:	2396      	movs	r3, #150	; 0x96
    efb8:	18fb      	adds	r3, r7, r3
    efba:	781b      	ldrb	r3, [r3, #0]
    efbc:	2296      	movs	r2, #150	; 0x96
    efbe:	18ba      	adds	r2, r7, r2
    efc0:	1c59      	adds	r1, r3, #1
    efc2:	7011      	strb	r1, [r2, #0]
    efc4:	001a      	movs	r2, r3
    efc6:	2100      	movs	r1, #0
    efc8:	2310      	movs	r3, #16
    efca:	18fb      	adds	r3, r7, r3
    efcc:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < MACPayloadLen; i++) {
        packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) {
    efce:	2395      	movs	r3, #149	; 0x95
    efd0:	18fb      	adds	r3, r7, r3
    efd2:	2200      	movs	r2, #0
    efd4:	701a      	strb	r2, [r3, #0]
    efd6:	e017      	b.n	f008 <MiMAC_SendPacket+0x5d4>
        packet[loc++] = MACPayload[i];
    efd8:	2396      	movs	r3, #150	; 0x96
    efda:	18fb      	adds	r3, r7, r3
    efdc:	781b      	ldrb	r3, [r3, #0]
    efde:	2296      	movs	r2, #150	; 0x96
    efe0:	18ba      	adds	r2, r7, r2
    efe2:	1c59      	adds	r1, r3, #1
    efe4:	7011      	strb	r1, [r2, #0]
    efe6:	0019      	movs	r1, r3
    efe8:	2395      	movs	r3, #149	; 0x95
    efea:	18fb      	adds	r3, r7, r3
    efec:	781b      	ldrb	r3, [r3, #0]
    efee:	683a      	ldr	r2, [r7, #0]
    eff0:	18d3      	adds	r3, r2, r3
    eff2:	781a      	ldrb	r2, [r3, #0]
    eff4:	2310      	movs	r3, #16
    eff6:	18fb      	adds	r3, r7, r3
    eff8:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < MACPayloadLen; i++) {
    effa:	2395      	movs	r3, #149	; 0x95
    effc:	18fb      	adds	r3, r7, r3
    effe:	781a      	ldrb	r2, [r3, #0]
    f000:	2395      	movs	r3, #149	; 0x95
    f002:	18fb      	adds	r3, r7, r3
    f004:	3201      	adds	r2, #1
    f006:	701a      	strb	r2, [r3, #0]
    f008:	23a8      	movs	r3, #168	; 0xa8
    f00a:	18fb      	adds	r3, r7, r3
    f00c:	781b      	ldrb	r3, [r3, #0]
    f00e:	2295      	movs	r2, #149	; 0x95
    f010:	18ba      	adds	r2, r7, r2
    f012:	7812      	ldrb	r2, [r2, #0]
    f014:	429a      	cmp	r2, r3
    f016:	d3df      	bcc.n	efd8 <MiMAC_SendPacket+0x5a4>
    }
    // MIC added
    packet[loc++] = final_mic_value[0];
    f018:	2396      	movs	r3, #150	; 0x96
    f01a:	18fb      	adds	r3, r7, r3
    f01c:	781b      	ldrb	r3, [r3, #0]
    f01e:	2296      	movs	r2, #150	; 0x96
    f020:	18ba      	adds	r2, r7, r2
    f022:	1c59      	adds	r1, r3, #1
    f024:	7011      	strb	r1, [r2, #0]
    f026:	001a      	movs	r2, r3
    f028:	4b35      	ldr	r3, [pc, #212]	; (f100 <MiMAC_SendPacket+0x6cc>)
    f02a:	7819      	ldrb	r1, [r3, #0]
    f02c:	2310      	movs	r3, #16
    f02e:	18fb      	adds	r3, r7, r3
    f030:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[1];
    f032:	2396      	movs	r3, #150	; 0x96
    f034:	18fb      	adds	r3, r7, r3
    f036:	781b      	ldrb	r3, [r3, #0]
    f038:	2296      	movs	r2, #150	; 0x96
    f03a:	18ba      	adds	r2, r7, r2
    f03c:	1c59      	adds	r1, r3, #1
    f03e:	7011      	strb	r1, [r2, #0]
    f040:	001a      	movs	r2, r3
    f042:	4b2f      	ldr	r3, [pc, #188]	; (f100 <MiMAC_SendPacket+0x6cc>)
    f044:	7859      	ldrb	r1, [r3, #1]
    f046:	2310      	movs	r3, #16
    f048:	18fb      	adds	r3, r7, r3
    f04a:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[2];
    f04c:	2396      	movs	r3, #150	; 0x96
    f04e:	18fb      	adds	r3, r7, r3
    f050:	781b      	ldrb	r3, [r3, #0]
    f052:	2296      	movs	r2, #150	; 0x96
    f054:	18ba      	adds	r2, r7, r2
    f056:	1c59      	adds	r1, r3, #1
    f058:	7011      	strb	r1, [r2, #0]
    f05a:	001a      	movs	r2, r3
    f05c:	4b28      	ldr	r3, [pc, #160]	; (f100 <MiMAC_SendPacket+0x6cc>)
    f05e:	7899      	ldrb	r1, [r3, #2]
    f060:	2310      	movs	r3, #16
    f062:	18fb      	adds	r3, r7, r3
    f064:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[3];
    f066:	2396      	movs	r3, #150	; 0x96
    f068:	18fb      	adds	r3, r7, r3
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	2296      	movs	r2, #150	; 0x96
    f06e:	18ba      	adds	r2, r7, r2
    f070:	1c59      	adds	r1, r3, #1
    f072:	7011      	strb	r1, [r2, #0]
    f074:	001a      	movs	r2, r3
    f076:	4b22      	ldr	r3, [pc, #136]	; (f100 <MiMAC_SendPacket+0x6cc>)
    f078:	78d9      	ldrb	r1, [r3, #3]
    f07a:	2310      	movs	r3, #16
    f07c:	18fb      	adds	r3, r7, r3
    f07e:	5499      	strb	r1, [r3, r2]
#endif

    trx_status.bits.TX_BUSY = 1;
    f080:	4a20      	ldr	r2, [pc, #128]	; (f104 <MiMAC_SendPacket+0x6d0>)
    f082:	7813      	ldrb	r3, [r2, #0]
    f084:	2101      	movs	r1, #1
    f086:	430b      	orrs	r3, r1
    f088:	7013      	strb	r3, [r2, #0]

    // set the trigger value
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    f08a:	1d3b      	adds	r3, r7, #4
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	2220      	movs	r2, #32
    f090:	4013      	ands	r3, r2
    f092:	b2db      	uxtb	r3, r3
    f094:	2b00      	cmp	r3, #0
    f096:	d010      	beq.n	f0ba <MiMAC_SendPacket+0x686>
    f098:	1d3b      	adds	r3, r7, #4
    f09a:	781b      	ldrb	r3, [r3, #0]
    f09c:	2204      	movs	r2, #4
    f09e:	4013      	ands	r3, r2
    f0a0:	b2db      	uxtb	r3, r3
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	d109      	bne.n	f0ba <MiMAC_SendPacket+0x686>
        i = 0x05;
    f0a6:	2395      	movs	r3, #149	; 0x95
    f0a8:	18fb      	adds	r3, r7, r3
    f0aa:	2205      	movs	r2, #5
    f0ac:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 1;
    f0ae:	4a15      	ldr	r2, [pc, #84]	; (f104 <MiMAC_SendPacket+0x6d0>)
    f0b0:	7813      	ldrb	r3, [r2, #0]
    f0b2:	2102      	movs	r1, #2
    f0b4:	430b      	orrs	r3, r1
    f0b6:	7013      	strb	r3, [r2, #0]
    f0b8:	e008      	b.n	f0cc <MiMAC_SendPacket+0x698>
#endif
    }
    else {
        i = 0x01;
    f0ba:	2395      	movs	r3, #149	; 0x95
    f0bc:	18fb      	adds	r3, r7, r3
    f0be:	2201      	movs	r2, #1
    f0c0:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
    f0c2:	4a10      	ldr	r2, [pc, #64]	; (f104 <MiMAC_SendPacket+0x6d0>)
    f0c4:	7813      	ldrb	r3, [r2, #0]
    f0c6:	2102      	movs	r1, #2
    f0c8:	438b      	bics	r3, r1
    f0ca:	7013      	strb	r3, [r2, #0]
#endif
    }
    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
    f0cc:	2310      	movs	r3, #16
    f0ce:	18fb      	adds	r3, r7, r3
    f0d0:	0018      	movs	r0, r3
    f0d2:	4b0d      	ldr	r3, [pc, #52]	; (f108 <MiMAC_SendPacket+0x6d4>)
    f0d4:	4798      	blx	r3

    return !trx_status.bits.TX_FAIL;
    f0d6:	4b0b      	ldr	r3, [pc, #44]	; (f104 <MiMAC_SendPacket+0x6d0>)
    f0d8:	781b      	ldrb	r3, [r3, #0]
    f0da:	075b      	lsls	r3, r3, #29
    f0dc:	0fdb      	lsrs	r3, r3, #31
    f0de:	b2db      	uxtb	r3, r3
    f0e0:	2201      	movs	r2, #1
    f0e2:	4053      	eors	r3, r2
    f0e4:	b2db      	uxtb	r3, r3
}
    f0e6:	0018      	movs	r0, r3
    f0e8:	46bd      	mov	sp, r7
    f0ea:	b027      	add	sp, #156	; 0x9c
    f0ec:	bd90      	pop	{r4, r7, pc}
    f0ee:	46c0      	nop			; (mov r8, r8)
    f0f0:	20001408 	.word	0x20001408
    f0f4:	20000d94 	.word	0x20000d94
    f0f8:	20000d9c 	.word	0x20000d9c
    f0fc:	200013f0 	.word	0x200013f0
    f100:	20000dc8 	.word	0x20000dc8
    f104:	2000140c 	.word	0x2000140c
    f108:	0000de39 	.word	0x0000de39

0000f10c <phyWriteRegister>:
}

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    f10c:	b580      	push	{r7, lr}
    f10e:	b082      	sub	sp, #8
    f110:	af00      	add	r7, sp, #0
    f112:	0002      	movs	r2, r0
    f114:	1dfb      	adds	r3, r7, #7
    f116:	701a      	strb	r2, [r3, #0]
    f118:	1dbb      	adds	r3, r7, #6
    f11a:	1c0a      	adds	r2, r1, #0
    f11c:	701a      	strb	r2, [r3, #0]
    trx_reg_write(reg, value);
    f11e:	1dbb      	adds	r3, r7, #6
    f120:	781a      	ldrb	r2, [r3, #0]
    f122:	1dfb      	adds	r3, r7, #7
    f124:	781b      	ldrb	r3, [r3, #0]
    f126:	0011      	movs	r1, r2
    f128:	0018      	movs	r0, r3
    f12a:	4b03      	ldr	r3, [pc, #12]	; (f138 <phyWriteRegister+0x2c>)
    f12c:	4798      	blx	r3
}
    f12e:	46c0      	nop			; (mov r8, r8)
    f130:	46bd      	mov	sp, r7
    f132:	b002      	add	sp, #8
    f134:	bd80      	pop	{r7, pc}
    f136:	46c0      	nop			; (mov r8, r8)
    f138:	00009591 	.word	0x00009591

0000f13c <phyReadRegister>:

/*************************************************************************/ /**
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    f13c:	b590      	push	{r4, r7, lr}
    f13e:	b085      	sub	sp, #20
    f140:	af00      	add	r7, sp, #0
    f142:	0002      	movs	r2, r0
    f144:	1dfb      	adds	r3, r7, #7
    f146:	701a      	strb	r2, [r3, #0]
    uint8_t value;

    value = trx_reg_read(reg);
    f148:	230f      	movs	r3, #15
    f14a:	18fc      	adds	r4, r7, r3
    f14c:	1dfb      	adds	r3, r7, #7
    f14e:	781b      	ldrb	r3, [r3, #0]
    f150:	0018      	movs	r0, r3
    f152:	4b05      	ldr	r3, [pc, #20]	; (f168 <phyReadRegister+0x2c>)
    f154:	4798      	blx	r3
    f156:	0003      	movs	r3, r0
    f158:	7023      	strb	r3, [r4, #0]

    return value;
    f15a:	230f      	movs	r3, #15
    f15c:	18fb      	adds	r3, r7, r3
    f15e:	781b      	ldrb	r3, [r3, #0]
}
    f160:	0018      	movs	r0, r3
    f162:	46bd      	mov	sp, r7
    f164:	b005      	add	sp, #20
    f166:	bd90      	pop	{r4, r7, pc}
    f168:	0000943d 	.word	0x0000943d

0000f16c <phyWaitState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
    f16c:	b590      	push	{r4, r7, lr}
    f16e:	b083      	sub	sp, #12
    f170:	af00      	add	r7, sp, #0
    f172:	0002      	movs	r2, r0
    f174:	1dfb      	adds	r3, r7, #7
    f176:	701a      	strb	r2, [r3, #0]
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    f178:	46c0      	nop			; (mov r8, r8)
    f17a:	1dfb      	adds	r3, r7, #7
    f17c:	781c      	ldrb	r4, [r3, #0]
    f17e:	2001      	movs	r0, #1
    f180:	4b05      	ldr	r3, [pc, #20]	; (f198 <phyWaitState+0x2c>)
    f182:	4798      	blx	r3
    f184:	0003      	movs	r3, r0
    f186:	001a      	movs	r2, r3
    f188:	231f      	movs	r3, #31
    f18a:	4013      	ands	r3, r2
    f18c:	429c      	cmp	r4, r3
    f18e:	d1f4      	bne.n	f17a <phyWaitState+0xe>
    }
}
    f190:	46c0      	nop			; (mov r8, r8)
    f192:	46bd      	mov	sp, r7
    f194:	b003      	add	sp, #12
    f196:	bd90      	pop	{r4, r7, pc}
    f198:	0000f13d 	.word	0x0000f13d

0000f19c <phySetRxState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phySetRxState(void)
{
    f19c:	b580      	push	{r7, lr}
    f19e:	af00      	add	r7, sp, #0
    phyTrxSetState(TRX_CMD_TRX_OFF);
    f1a0:	2008      	movs	r0, #8
    f1a2:	4b07      	ldr	r3, [pc, #28]	; (f1c0 <phySetRxState+0x24>)
    f1a4:	4798      	blx	r3

    phyReadRegister(RG_IRQ_STATUS);
    f1a6:	200f      	movs	r0, #15
    f1a8:	4b06      	ldr	r3, [pc, #24]	; (f1c4 <phySetRxState+0x28>)
    f1aa:	4798      	blx	r3

    if (phyRxState) {
    f1ac:	4b06      	ldr	r3, [pc, #24]	; (f1c8 <phySetRxState+0x2c>)
    f1ae:	781b      	ldrb	r3, [r3, #0]
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d002      	beq.n	f1ba <phySetRxState+0x1e>
        phyTrxSetState(TRX_CMD_RX_AACK_ON);
    f1b4:	2016      	movs	r0, #22
    f1b6:	4b02      	ldr	r3, [pc, #8]	; (f1c0 <phySetRxState+0x24>)
    f1b8:	4798      	blx	r3
    }
}
    f1ba:	46c0      	nop			; (mov r8, r8)
    f1bc:	46bd      	mov	sp, r7
    f1be:	bd80      	pop	{r7, pc}
    f1c0:	0000f1cd 	.word	0x0000f1cd
    f1c4:	0000f13d 	.word	0x0000f13d
    f1c8:	200007c0 	.word	0x200007c0

0000f1cc <phyTrxSetState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    f1cc:	b590      	push	{r4, r7, lr}
    f1ce:	b083      	sub	sp, #12
    f1d0:	af00      	add	r7, sp, #0
    f1d2:	0002      	movs	r2, r0
    f1d4:	1dfb      	adds	r3, r7, #7
    f1d6:	701a      	strb	r2, [r3, #0]
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    f1d8:	2103      	movs	r1, #3
    f1da:	2002      	movs	r0, #2
    f1dc:	4b0f      	ldr	r3, [pc, #60]	; (f21c <phyTrxSetState+0x50>)
    f1de:	4798      	blx	r3
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    f1e0:	2001      	movs	r0, #1
    f1e2:	4b0f      	ldr	r3, [pc, #60]	; (f220 <phyTrxSetState+0x54>)
    f1e4:	4798      	blx	r3
    f1e6:	0003      	movs	r3, r0
    f1e8:	001a      	movs	r2, r3
    f1ea:	231f      	movs	r3, #31
    f1ec:	4013      	ands	r3, r2
    f1ee:	2b08      	cmp	r3, #8
    f1f0:	d1f2      	bne.n	f1d8 <phyTrxSetState+0xc>

    do {
        phyWriteRegister(RG_TRX_STATE,
    f1f2:	1dfb      	adds	r3, r7, #7
    f1f4:	781b      	ldrb	r3, [r3, #0]
    f1f6:	0019      	movs	r1, r3
    f1f8:	2002      	movs	r0, #2
    f1fa:	4b08      	ldr	r3, [pc, #32]	; (f21c <phyTrxSetState+0x50>)
    f1fc:	4798      	blx	r3
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    f1fe:	1dfb      	adds	r3, r7, #7
    f200:	781c      	ldrb	r4, [r3, #0]
    f202:	2001      	movs	r0, #1
    f204:	4b06      	ldr	r3, [pc, #24]	; (f220 <phyTrxSetState+0x54>)
    f206:	4798      	blx	r3
    f208:	0003      	movs	r3, r0
    f20a:	001a      	movs	r2, r3
    f20c:	231f      	movs	r3, #31
    f20e:	4013      	ands	r3, r2
    f210:	429c      	cmp	r4, r3
    f212:	d1ee      	bne.n	f1f2 <phyTrxSetState+0x26>
}
    f214:	46c0      	nop			; (mov r8, r8)
    f216:	46bd      	mov	sp, r7
    f218:	b003      	add	sp, #12
    f21a:	bd90      	pop	{r4, r7, pc}
    f21c:	0000f10d 	.word	0x0000f10d
    f220:	0000f13d 	.word	0x0000f13d

0000f224 <PHY_SetIEEEAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
    f224:	b580      	push	{r7, lr}
    f226:	b084      	sub	sp, #16
    f228:	af00      	add	r7, sp, #0
    f22a:	6078      	str	r0, [r7, #4]
    uint8_t* ptr_to_reg = ieee_addr;
    f22c:	687b      	ldr	r3, [r7, #4]
    f22e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 8; i++) {
    f230:	230b      	movs	r3, #11
    f232:	18fb      	adds	r3, r7, r3
    f234:	2200      	movs	r2, #0
    f236:	701a      	strb	r2, [r3, #0]
    f238:	e014      	b.n	f264 <PHY_SetIEEEAddr+0x40>
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    f23a:	230b      	movs	r3, #11
    f23c:	18fb      	adds	r3, r7, r3
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	3324      	adds	r3, #36	; 0x24
    f242:	b2da      	uxtb	r2, r3
    f244:	68fb      	ldr	r3, [r7, #12]
    f246:	781b      	ldrb	r3, [r3, #0]
    f248:	0019      	movs	r1, r3
    f24a:	0010      	movs	r0, r2
    f24c:	4b0a      	ldr	r3, [pc, #40]	; (f278 <PHY_SetIEEEAddr+0x54>)
    f24e:	4798      	blx	r3
        ptr_to_reg++;
    f250:	68fb      	ldr	r3, [r7, #12]
    f252:	3301      	adds	r3, #1
    f254:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 8; i++) {
    f256:	230b      	movs	r3, #11
    f258:	18fb      	adds	r3, r7, r3
    f25a:	781a      	ldrb	r2, [r3, #0]
    f25c:	230b      	movs	r3, #11
    f25e:	18fb      	adds	r3, r7, r3
    f260:	3201      	adds	r2, #1
    f262:	701a      	strb	r2, [r3, #0]
    f264:	230b      	movs	r3, #11
    f266:	18fb      	adds	r3, r7, r3
    f268:	781b      	ldrb	r3, [r3, #0]
    f26a:	2b07      	cmp	r3, #7
    f26c:	d9e5      	bls.n	f23a <PHY_SetIEEEAddr+0x16>
    }
}
    f26e:	46c0      	nop			; (mov r8, r8)
    f270:	46bd      	mov	sp, r7
    f272:	b004      	add	sp, #16
    f274:	bd80      	pop	{r7, pc}
    f276:	46c0      	nop			; (mov r8, r8)
    f278:	00009591 	.word	0x00009591

0000f27c <MiMAC_DiscardPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
    f27c:	b580      	push	{r7, lr}
    f27e:	af00      	add	r7, sp, #0
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
    f280:	4b07      	ldr	r3, [pc, #28]	; (f2a0 <MiMAC_DiscardPacket+0x24>)
    f282:	781b      	ldrb	r3, [r3, #0]
    f284:	2b13      	cmp	r3, #19
    f286:	d807      	bhi.n	f298 <MiMAC_DiscardPacket+0x1c>
        RxBuffer[BankIndex].PayloadLen = 0;
    f288:	4b05      	ldr	r3, [pc, #20]	; (f2a0 <MiMAC_DiscardPacket+0x24>)
    f28a:	781b      	ldrb	r3, [r3, #0]
    f28c:	0019      	movs	r1, r3
    f28e:	4b05      	ldr	r3, [pc, #20]	; (f2a4 <MiMAC_DiscardPacket+0x28>)
    f290:	224e      	movs	r2, #78	; 0x4e
    f292:	434a      	muls	r2, r1
    f294:	2100      	movs	r1, #0
    f296:	54d1      	strb	r1, [r2, r3]
    }
}
    f298:	46c0      	nop			; (mov r8, r8)
    f29a:	46bd      	mov	sp, r7
    f29c:	bd80      	pop	{r7, pc}
    f29e:	46c0      	nop			; (mov r8, r8)
    f2a0:	200004a4 	.word	0x200004a4
    f2a4:	20000dd8 	.word	0x20000dd8

0000f2a8 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    f2a8:	b590      	push	{r4, r7, lr}
    f2aa:	b085      	sub	sp, #20
    f2ac:	af02      	add	r7, sp, #8
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
    f2ae:	4bc8      	ldr	r3, [pc, #800]	; (f5d0 <MiMAC_ReceivedPacket+0x328>)
    f2b0:	781b      	ldrb	r3, [r3, #0]
    f2b2:	07db      	lsls	r3, r3, #31
    f2b4:	0fdb      	lsrs	r3, r3, #31
    f2b6:	b2db      	uxtb	r3, r3
    f2b8:	2b00      	cmp	r3, #0
    f2ba:	d014      	beq.n	f2e6 <MiMAC_ReceivedPacket+0x3e>
        if (failureCounter >= FAILURE_COUNTER) {
    f2bc:	4bc5      	ldr	r3, [pc, #788]	; (f5d4 <MiMAC_ReceivedPacket+0x32c>)
    f2be:	881b      	ldrh	r3, [r3, #0]
    f2c0:	b29b      	uxth	r3, r3
    f2c2:	2b05      	cmp	r3, #5
    f2c4:	d908      	bls.n	f2d8 <MiMAC_ReceivedPacket+0x30>
            failureCounter = 0;
    f2c6:	4bc3      	ldr	r3, [pc, #780]	; (f5d4 <MiMAC_ReceivedPacket+0x32c>)
    f2c8:	2200      	movs	r2, #0
    f2ca:	801a      	strh	r2, [r3, #0]
            trx_status.bits.TX_BUSY = 0;
    f2cc:	4ac0      	ldr	r2, [pc, #768]	; (f5d0 <MiMAC_ReceivedPacket+0x328>)
    f2ce:	7813      	ldrb	r3, [r2, #0]
    f2d0:	2101      	movs	r1, #1
    f2d2:	438b      	bics	r3, r1
    f2d4:	7013      	strb	r3, [r2, #0]
    f2d6:	e006      	b.n	f2e6 <MiMAC_ReceivedPacket+0x3e>
        }
        else {
            failureCounter++;
    f2d8:	4bbe      	ldr	r3, [pc, #760]	; (f5d4 <MiMAC_ReceivedPacket+0x32c>)
    f2da:	881b      	ldrh	r3, [r3, #0]
    f2dc:	b29b      	uxth	r3, r3
    f2de:	3301      	adds	r3, #1
    f2e0:	b29a      	uxth	r2, r3
    f2e2:	4bbc      	ldr	r3, [pc, #752]	; (f5d4 <MiMAC_ReceivedPacket+0x32c>)
    f2e4:	801a      	strh	r2, [r3, #0]
        }
    }

    BankIndex = 0xFF;
    f2e6:	4bbc      	ldr	r3, [pc, #752]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f2e8:	22ff      	movs	r2, #255	; 0xff
    f2ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BANK_SIZE; i++) {
    f2ec:	1dfb      	adds	r3, r7, #7
    f2ee:	2200      	movs	r2, #0
    f2f0:	701a      	strb	r2, [r3, #0]
    f2f2:	e011      	b.n	f318 <MiMAC_ReceivedPacket+0x70>
        if (RxBuffer[i].PayloadLen > 0) {
    f2f4:	1dfb      	adds	r3, r7, #7
    f2f6:	781a      	ldrb	r2, [r3, #0]
    f2f8:	4bb8      	ldr	r3, [pc, #736]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f2fa:	214e      	movs	r1, #78	; 0x4e
    f2fc:	434a      	muls	r2, r1
    f2fe:	5cd3      	ldrb	r3, [r2, r3]
    f300:	2b00      	cmp	r3, #0
    f302:	d004      	beq.n	f30e <MiMAC_ReceivedPacket+0x66>
            BankIndex = i;
    f304:	4bb4      	ldr	r3, [pc, #720]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f306:	1dfa      	adds	r2, r7, #7
    f308:	7812      	ldrb	r2, [r2, #0]
    f30a:	701a      	strb	r2, [r3, #0]
            break;
    f30c:	e008      	b.n	f320 <MiMAC_ReceivedPacket+0x78>
    for (i = 0; i < BANK_SIZE; i++) {
    f30e:	1dfb      	adds	r3, r7, #7
    f310:	781a      	ldrb	r2, [r3, #0]
    f312:	1dfb      	adds	r3, r7, #7
    f314:	3201      	adds	r2, #1
    f316:	701a      	strb	r2, [r3, #0]
    f318:	1dfb      	adds	r3, r7, #7
    f31a:	781b      	ldrb	r3, [r3, #0]
    f31c:	2b13      	cmp	r3, #19
    f31e:	d9e9      	bls.n	f2f4 <MiMAC_ReceivedPacket+0x4c>
        }
    }

    if (BankIndex < BANK_SIZE) {
    f320:	4bad      	ldr	r3, [pc, #692]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f322:	781b      	ldrb	r3, [r3, #0]
    f324:	2b13      	cmp	r3, #19
    f326:	d901      	bls.n	f32c <MiMAC_ReceivedPacket+0x84>
    f328:	f000 fbf9 	bl	fb1e <MiMAC_ReceivedPacket+0x876>
        uint8_t addrMode;
#ifndef TARGET_SMALL
        bool bIntraPAN = true;
    f32c:	1dbb      	adds	r3, r7, #6
    f32e:	2201      	movs	r2, #1
    f330:	701a      	strb	r2, [r3, #0]

        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    f332:	4ba9      	ldr	r3, [pc, #676]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f334:	781b      	ldrb	r3, [r3, #0]
    f336:	0019      	movs	r1, r3
    f338:	4aa8      	ldr	r2, [pc, #672]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f33a:	234e      	movs	r3, #78	; 0x4e
    f33c:	434b      	muls	r3, r1
    f33e:	18d3      	adds	r3, r2, r3
    f340:	3301      	adds	r3, #1
    f342:	781b      	ldrb	r3, [r3, #0]
    f344:	001a      	movs	r2, r3
    f346:	2340      	movs	r3, #64	; 0x40
    f348:	4013      	ands	r3, r2
    f34a:	d102      	bne.n	f352 <MiMAC_ReceivedPacket+0xaa>
            bIntraPAN = false;
    f34c:	1dbb      	adds	r3, r7, #6
    f34e:	2200      	movs	r2, #0
    f350:	701a      	strb	r2, [r3, #0]
        }
#endif
        MACRxPacket.flags.Val = 0;
    f352:	4ba3      	ldr	r3, [pc, #652]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f354:	2200      	movs	r2, #0
    f356:	701a      	strb	r2, [r3, #0]
        MACRxPacket.altSourceAddress = false;
    f358:	4ba1      	ldr	r3, [pc, #644]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f35a:	2200      	movs	r2, #0
    f35c:	73da      	strb	r2, [r3, #15]

        //Determine the start of the MAC payload
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    f35e:	4b9e      	ldr	r3, [pc, #632]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	0019      	movs	r1, r3
    f364:	4a9d      	ldr	r2, [pc, #628]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f366:	234e      	movs	r3, #78	; 0x4e
    f368:	434b      	muls	r3, r1
    f36a:	18d3      	adds	r3, r2, r3
    f36c:	3302      	adds	r3, #2
    f36e:	781a      	ldrb	r2, [r3, #0]
    f370:	1d7b      	adds	r3, r7, #5
    f372:	2133      	movs	r1, #51	; 0x33
    f374:	438a      	bics	r2, r1
    f376:	701a      	strb	r2, [r3, #0]
        switch (addrMode) {
    f378:	1d7b      	adds	r3, r7, #5
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	2b88      	cmp	r3, #136	; 0x88
    f37e:	d100      	bne.n	f382 <MiMAC_ReceivedPacket+0xda>
    f380:	e176      	b.n	f670 <MiMAC_ReceivedPacket+0x3c8>
    f382:	dc06      	bgt.n	f392 <MiMAC_ReceivedPacket+0xea>
    f384:	2b08      	cmp	r3, #8
    f386:	d100      	bne.n	f38a <MiMAC_ReceivedPacket+0xe2>
    f388:	e291      	b.n	f8ae <MiMAC_ReceivedPacket+0x606>
    f38a:	2b80      	cmp	r3, #128	; 0x80
    f38c:	d100      	bne.n	f390 <MiMAC_ReceivedPacket+0xe8>
    f38e:	e129      	b.n	f5e4 <MiMAC_ReceivedPacket+0x33c>
    f390:	e2bf      	b.n	f912 <MiMAC_ReceivedPacket+0x66a>
    f392:	2bc8      	cmp	r3, #200	; 0xc8
    f394:	d006      	beq.n	f3a4 <MiMAC_ReceivedPacket+0xfc>
    f396:	2bcc      	cmp	r3, #204	; 0xcc
    f398:	d100      	bne.n	f39c <MiMAC_ReceivedPacket+0xf4>
    f39a:	e09b      	b.n	f4d4 <MiMAC_ReceivedPacket+0x22c>
    f39c:	2b8c      	cmp	r3, #140	; 0x8c
    f39e:	d100      	bne.n	f3a2 <MiMAC_ReceivedPacket+0xfa>
    f3a0:	e204      	b.n	f7ac <MiMAC_ReceivedPacket+0x504>
    f3a2:	e2b6      	b.n	f912 <MiMAC_ReceivedPacket+0x66a>
        case 0xC8: //short dest, long source
            // for P2P only broadcast allows short destination address
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    f3a4:	4b8c      	ldr	r3, [pc, #560]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	0019      	movs	r1, r3
    f3aa:	4a8c      	ldr	r2, [pc, #560]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f3ac:	234e      	movs	r3, #78	; 0x4e
    f3ae:	434b      	muls	r3, r1
    f3b0:	18d3      	adds	r3, r2, r3
    f3b2:	3306      	adds	r3, #6
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	2bff      	cmp	r3, #255	; 0xff
    f3b8:	d10f      	bne.n	f3da <MiMAC_ReceivedPacket+0x132>
    f3ba:	4b87      	ldr	r3, [pc, #540]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f3bc:	781b      	ldrb	r3, [r3, #0]
    f3be:	0019      	movs	r1, r3
    f3c0:	4a86      	ldr	r2, [pc, #536]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f3c2:	234e      	movs	r3, #78	; 0x4e
    f3c4:	434b      	muls	r3, r1
    f3c6:	18d3      	adds	r3, r2, r3
    f3c8:	3307      	adds	r3, #7
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	2bff      	cmp	r3, #255	; 0xff
    f3ce:	d104      	bne.n	f3da <MiMAC_ReceivedPacket+0x132>
                MACRxPacket.flags.bits.broadcast = 1;
    f3d0:	4b83      	ldr	r3, [pc, #524]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f3d2:	781a      	ldrb	r2, [r3, #0]
    f3d4:	2104      	movs	r1, #4
    f3d6:	430a      	orrs	r2, r1
    f3d8:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    f3da:	4b81      	ldr	r3, [pc, #516]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f3dc:	781a      	ldrb	r2, [r3, #0]
    f3de:	2180      	movs	r1, #128	; 0x80
    f3e0:	4249      	negs	r1, r1
    f3e2:	430a      	orrs	r2, r1
    f3e4:	701a      	strb	r2, [r3, #0]

#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
    f3e6:	1dbb      	adds	r3, r7, #6
    f3e8:	781b      	ldrb	r3, [r3, #0]
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	d038      	beq.n	f460 <MiMAC_ReceivedPacket+0x1b8>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    f3ee:	4b7a      	ldr	r3, [pc, #488]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f3f0:	781b      	ldrb	r3, [r3, #0]
    f3f2:	0019      	movs	r1, r3
    f3f4:	4a79      	ldr	r2, [pc, #484]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f3f6:	234e      	movs	r3, #78	; 0x4e
    f3f8:	434b      	muls	r3, r1
    f3fa:	18d3      	adds	r3, r2, r3
    f3fc:	3304      	adds	r3, #4
    f3fe:	781a      	ldrb	r2, [r3, #0]
    f400:	4b77      	ldr	r3, [pc, #476]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f402:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    f404:	4b74      	ldr	r3, [pc, #464]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f406:	781b      	ldrb	r3, [r3, #0]
    f408:	0019      	movs	r1, r3
    f40a:	4a74      	ldr	r2, [pc, #464]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f40c:	234e      	movs	r3, #78	; 0x4e
    f40e:	434b      	muls	r3, r1
    f410:	18d3      	adds	r3, r2, r3
    f412:	3305      	adds	r3, #5
    f414:	781a      	ldrb	r2, [r3, #0]
    f416:	4b72      	ldr	r3, [pc, #456]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f418:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    f41a:	4b6f      	ldr	r3, [pc, #444]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	001a      	movs	r2, r3
    f420:	234e      	movs	r3, #78	; 0x4e
    f422:	4353      	muls	r3, r2
    f424:	1dda      	adds	r2, r3, #7
    f426:	4b6d      	ldr	r3, [pc, #436]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f428:	18d3      	adds	r3, r2, r3
    f42a:	1c5a      	adds	r2, r3, #1
    f42c:	4b6c      	ldr	r3, [pc, #432]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f42e:	605a      	str	r2, [r3, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    f430:	4b69      	ldr	r3, [pc, #420]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f432:	781b      	ldrb	r3, [r3, #0]
    f434:	0019      	movs	r1, r3
    f436:	4b69      	ldr	r3, [pc, #420]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f438:	224e      	movs	r2, #78	; 0x4e
    f43a:	434a      	muls	r2, r1
    f43c:	5cd3      	ldrb	r3, [r2, r3]
    f43e:	3b13      	subs	r3, #19
    f440:	b2da      	uxtb	r2, r3
    f442:	4b67      	ldr	r3, [pc, #412]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f444:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    f446:	4b64      	ldr	r3, [pc, #400]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f448:	781b      	ldrb	r3, [r3, #0]
    f44a:	001a      	movs	r2, r3
    f44c:	234e      	movs	r3, #78	; 0x4e
    f44e:	4353      	muls	r3, r2
    f450:	330f      	adds	r3, #15
    f452:	001a      	movs	r2, r3
    f454:	4b61      	ldr	r3, [pc, #388]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f456:	18d3      	adds	r3, r2, r3
    f458:	1c5a      	adds	r2, r3, #1
    f45a:	4b61      	ldr	r3, [pc, #388]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f45c:	609a      	str	r2, [r3, #8]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
            }
#endif

            break;
    f45e:	e25c      	b.n	f91a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    f460:	4b5d      	ldr	r3, [pc, #372]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	0019      	movs	r1, r3
    f466:	4a5d      	ldr	r2, [pc, #372]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f468:	234e      	movs	r3, #78	; 0x4e
    f46a:	434b      	muls	r3, r1
    f46c:	18d3      	adds	r3, r2, r3
    f46e:	3308      	adds	r3, #8
    f470:	781a      	ldrb	r2, [r3, #0]
    f472:	4b5b      	ldr	r3, [pc, #364]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f474:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    f476:	4b58      	ldr	r3, [pc, #352]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f478:	781b      	ldrb	r3, [r3, #0]
    f47a:	0019      	movs	r1, r3
    f47c:	4a57      	ldr	r2, [pc, #348]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f47e:	234e      	movs	r3, #78	; 0x4e
    f480:	434b      	muls	r3, r1
    f482:	18d3      	adds	r3, r2, r3
    f484:	3309      	adds	r3, #9
    f486:	781a      	ldrb	r2, [r3, #0]
    f488:	4b55      	ldr	r3, [pc, #340]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f48a:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    f48c:	4b52      	ldr	r3, [pc, #328]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f48e:	781b      	ldrb	r3, [r3, #0]
    f490:	001a      	movs	r2, r3
    f492:	234e      	movs	r3, #78	; 0x4e
    f494:	4353      	muls	r3, r2
    f496:	3309      	adds	r3, #9
    f498:	001a      	movs	r2, r3
    f49a:	4b50      	ldr	r3, [pc, #320]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f49c:	18d3      	adds	r3, r2, r3
    f49e:	1c5a      	adds	r2, r3, #1
    f4a0:	4b4f      	ldr	r3, [pc, #316]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f4a2:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    f4a4:	4b4c      	ldr	r3, [pc, #304]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	0019      	movs	r1, r3
    f4aa:	4b4c      	ldr	r3, [pc, #304]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f4ac:	224e      	movs	r2, #78	; 0x4e
    f4ae:	434a      	muls	r2, r1
    f4b0:	5cd3      	ldrb	r3, [r2, r3]
    f4b2:	3b15      	subs	r3, #21
    f4b4:	b2da      	uxtb	r2, r3
    f4b6:	4b4a      	ldr	r3, [pc, #296]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f4b8:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    f4ba:	4b47      	ldr	r3, [pc, #284]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	001a      	movs	r2, r3
    f4c0:	234e      	movs	r3, #78	; 0x4e
    f4c2:	4353      	muls	r3, r2
    f4c4:	3311      	adds	r3, #17
    f4c6:	001a      	movs	r2, r3
    f4c8:	4b44      	ldr	r3, [pc, #272]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f4ca:	18d3      	adds	r3, r2, r3
    f4cc:	1c5a      	adds	r2, r3, #1
    f4ce:	4b44      	ldr	r3, [pc, #272]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f4d0:	609a      	str	r2, [r3, #8]
            break;
    f4d2:	e222      	b.n	f91a <MiMAC_ReceivedPacket+0x672>

        case 0xCC: // long dest, long source
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    f4d4:	4b42      	ldr	r3, [pc, #264]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f4d6:	781a      	ldrb	r2, [r3, #0]
    f4d8:	2180      	movs	r1, #128	; 0x80
    f4da:	4249      	negs	r1, r1
    f4dc:	430a      	orrs	r2, r1
    f4de:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
    f4e0:	1dbb      	adds	r3, r7, #6
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d039      	beq.n	f55c <MiMAC_ReceivedPacket+0x2b4>
#endif
            {
//rxFrame.flags.bits.intraPAN = 1;
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    f4e8:	4b3b      	ldr	r3, [pc, #236]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f4ea:	781b      	ldrb	r3, [r3, #0]
    f4ec:	0019      	movs	r1, r3
    f4ee:	4a3b      	ldr	r2, [pc, #236]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f4f0:	234e      	movs	r3, #78	; 0x4e
    f4f2:	434b      	muls	r3, r1
    f4f4:	18d3      	adds	r3, r2, r3
    f4f6:	3304      	adds	r3, #4
    f4f8:	781a      	ldrb	r2, [r3, #0]
    f4fa:	4b39      	ldr	r3, [pc, #228]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f4fc:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    f4fe:	4b36      	ldr	r3, [pc, #216]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f500:	781b      	ldrb	r3, [r3, #0]
    f502:	0019      	movs	r1, r3
    f504:	4a35      	ldr	r2, [pc, #212]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f506:	234e      	movs	r3, #78	; 0x4e
    f508:	434b      	muls	r3, r1
    f50a:	18d3      	adds	r3, r2, r3
    f50c:	3305      	adds	r3, #5
    f50e:	781a      	ldrb	r2, [r3, #0]
    f510:	4b33      	ldr	r3, [pc, #204]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f512:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    f514:	4b30      	ldr	r3, [pc, #192]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f516:	781b      	ldrb	r3, [r3, #0]
    f518:	001a      	movs	r2, r3
    f51a:	234e      	movs	r3, #78	; 0x4e
    f51c:	4353      	muls	r3, r2
    f51e:	330d      	adds	r3, #13
    f520:	001a      	movs	r2, r3
    f522:	4b2e      	ldr	r3, [pc, #184]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f524:	18d3      	adds	r3, r2, r3
    f526:	1c5a      	adds	r2, r3, #1
    f528:	4b2d      	ldr	r3, [pc, #180]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f52a:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    f52c:	4b2a      	ldr	r3, [pc, #168]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f52e:	781b      	ldrb	r3, [r3, #0]
    f530:	0019      	movs	r1, r3
    f532:	4b2a      	ldr	r3, [pc, #168]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f534:	224e      	movs	r2, #78	; 0x4e
    f536:	434a      	muls	r2, r1
    f538:	5cd3      	ldrb	r3, [r2, r3]
    f53a:	3b19      	subs	r3, #25
    f53c:	b2da      	uxtb	r2, r3
    f53e:	4b28      	ldr	r3, [pc, #160]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f540:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    f542:	4b25      	ldr	r3, [pc, #148]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f544:	781b      	ldrb	r3, [r3, #0]
    f546:	001a      	movs	r2, r3
    f548:	234e      	movs	r3, #78	; 0x4e
    f54a:	4353      	muls	r3, r2
    f54c:	3315      	adds	r3, #21
    f54e:	001a      	movs	r2, r3
    f550:	4b22      	ldr	r3, [pc, #136]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f552:	18d3      	adds	r3, r2, r3
    f554:	1c5a      	adds	r2, r3, #1
    f556:	4b22      	ldr	r3, [pc, #136]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f558:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
            }
#endif
            break;
    f55a:	e1de      	b.n	f91a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    f55c:	4b1e      	ldr	r3, [pc, #120]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	0019      	movs	r1, r3
    f562:	4a1e      	ldr	r2, [pc, #120]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f564:	234e      	movs	r3, #78	; 0x4e
    f566:	434b      	muls	r3, r1
    f568:	18d3      	adds	r3, r2, r3
    f56a:	330e      	adds	r3, #14
    f56c:	781a      	ldrb	r2, [r3, #0]
    f56e:	4b1c      	ldr	r3, [pc, #112]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f570:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    f572:	4b19      	ldr	r3, [pc, #100]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	0019      	movs	r1, r3
    f578:	4a18      	ldr	r2, [pc, #96]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f57a:	234e      	movs	r3, #78	; 0x4e
    f57c:	434b      	muls	r3, r1
    f57e:	18d3      	adds	r3, r2, r3
    f580:	330f      	adds	r3, #15
    f582:	781a      	ldrb	r2, [r3, #0]
    f584:	4b16      	ldr	r3, [pc, #88]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f586:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    f588:	4b13      	ldr	r3, [pc, #76]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f58a:	781b      	ldrb	r3, [r3, #0]
    f58c:	001a      	movs	r2, r3
    f58e:	234e      	movs	r3, #78	; 0x4e
    f590:	4353      	muls	r3, r2
    f592:	330f      	adds	r3, #15
    f594:	001a      	movs	r2, r3
    f596:	4b11      	ldr	r3, [pc, #68]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f598:	18d3      	adds	r3, r2, r3
    f59a:	1c5a      	adds	r2, r3, #1
    f59c:	4b10      	ldr	r3, [pc, #64]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f59e:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    f5a0:	4b0d      	ldr	r3, [pc, #52]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	0019      	movs	r1, r3
    f5a6:	4b0d      	ldr	r3, [pc, #52]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f5a8:	224e      	movs	r2, #78	; 0x4e
    f5aa:	434a      	muls	r2, r1
    f5ac:	5cd3      	ldrb	r3, [r2, r3]
    f5ae:	3b1b      	subs	r3, #27
    f5b0:	b2da      	uxtb	r2, r3
    f5b2:	4b0b      	ldr	r3, [pc, #44]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f5b4:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    f5b6:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <MiMAC_ReceivedPacket+0x330>)
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	001a      	movs	r2, r3
    f5bc:	234e      	movs	r3, #78	; 0x4e
    f5be:	4353      	muls	r3, r2
    f5c0:	3317      	adds	r3, #23
    f5c2:	001a      	movs	r2, r3
    f5c4:	4b05      	ldr	r3, [pc, #20]	; (f5dc <MiMAC_ReceivedPacket+0x334>)
    f5c6:	18d3      	adds	r3, r2, r3
    f5c8:	1c5a      	adds	r2, r3, #1
    f5ca:	4b05      	ldr	r3, [pc, #20]	; (f5e0 <MiMAC_ReceivedPacket+0x338>)
    f5cc:	609a      	str	r2, [r3, #8]
            break;
    f5ce:	e1a4      	b.n	f91a <MiMAC_ReceivedPacket+0x672>
    f5d0:	2000140c 	.word	0x2000140c
    f5d4:	2000073c 	.word	0x2000073c
    f5d8:	200004a4 	.word	0x200004a4
    f5dc:	20000dd8 	.word	0x20000dd8
    f5e0:	200014dc 	.word	0x200014dc

        case 0x80: // short source only. used in beacon
        {
            MACRxPacket.flags.bits.broadcast = 1;
    f5e4:	4be4      	ldr	r3, [pc, #912]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f5e6:	781a      	ldrb	r2, [r3, #0]
    f5e8:	2104      	movs	r1, #4
    f5ea:	430a      	orrs	r2, r1
    f5ec:	701a      	strb	r2, [r3, #0]
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    f5ee:	4be2      	ldr	r3, [pc, #904]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f5f0:	781a      	ldrb	r2, [r3, #0]
    f5f2:	2180      	movs	r1, #128	; 0x80
    f5f4:	4249      	negs	r1, r1
    f5f6:	430a      	orrs	r2, r1
    f5f8:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
    f5fa:	4bdf      	ldr	r3, [pc, #892]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f5fc:	2201      	movs	r2, #1
    f5fe:	73da      	strb	r2, [r3, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    f600:	4bde      	ldr	r3, [pc, #888]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f602:	781b      	ldrb	r3, [r3, #0]
    f604:	0019      	movs	r1, r3
    f606:	4ade      	ldr	r2, [pc, #888]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f608:	234e      	movs	r3, #78	; 0x4e
    f60a:	434b      	muls	r3, r1
    f60c:	18d3      	adds	r3, r2, r3
    f60e:	3304      	adds	r3, #4
    f610:	781a      	ldrb	r2, [r3, #0]
    f612:	4bd9      	ldr	r3, [pc, #868]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f614:	741a      	strb	r2, [r3, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    f616:	4bd9      	ldr	r3, [pc, #868]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f618:	781b      	ldrb	r3, [r3, #0]
    f61a:	0019      	movs	r1, r3
    f61c:	4ad8      	ldr	r2, [pc, #864]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f61e:	234e      	movs	r3, #78	; 0x4e
    f620:	434b      	muls	r3, r1
    f622:	18d3      	adds	r3, r2, r3
    f624:	3305      	adds	r3, #5
    f626:	781a      	ldrb	r2, [r3, #0]
    f628:	4bd3      	ldr	r3, [pc, #844]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f62a:	745a      	strb	r2, [r3, #17]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    f62c:	4bd3      	ldr	r3, [pc, #844]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	001a      	movs	r2, r3
    f632:	234e      	movs	r3, #78	; 0x4e
    f634:	4353      	muls	r3, r2
    f636:	1d5a      	adds	r2, r3, #5
    f638:	4bd1      	ldr	r3, [pc, #836]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f63a:	18d3      	adds	r3, r2, r3
    f63c:	1c5a      	adds	r2, r3, #1
    f63e:	4bce      	ldr	r3, [pc, #824]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f640:	605a      	str	r2, [r3, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    f642:	4bce      	ldr	r3, [pc, #824]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f644:	781b      	ldrb	r3, [r3, #0]
    f646:	0019      	movs	r1, r3
    f648:	4bcd      	ldr	r3, [pc, #820]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f64a:	224e      	movs	r2, #78	; 0x4e
    f64c:	434a      	muls	r2, r1
    f64e:	5cd3      	ldrb	r3, [r2, r3]
    f650:	3b0b      	subs	r3, #11
    f652:	b2da      	uxtb	r2, r3
    f654:	4bc8      	ldr	r3, [pc, #800]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f656:	731a      	strb	r2, [r3, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    f658:	4bc8      	ldr	r3, [pc, #800]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	001a      	movs	r2, r3
    f65e:	234e      	movs	r3, #78	; 0x4e
    f660:	4353      	muls	r3, r2
    f662:	1dda      	adds	r2, r3, #7
    f664:	4bc6      	ldr	r3, [pc, #792]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f666:	18d3      	adds	r3, r2, r3
    f668:	1c5a      	adds	r2, r3, #1
    f66a:	4bc3      	ldr	r3, [pc, #780]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f66c:	609a      	str	r2, [r3, #8]
        } break;
    f66e:	e154      	b.n	f91a <MiMAC_ReceivedPacket+0x672>

        case 0x88: // short dest, short source
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    f670:	4bc2      	ldr	r3, [pc, #776]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	0019      	movs	r1, r3
    f676:	4ac2      	ldr	r2, [pc, #776]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f678:	234e      	movs	r3, #78	; 0x4e
    f67a:	434b      	muls	r3, r1
    f67c:	18d3      	adds	r3, r2, r3
    f67e:	3306      	adds	r3, #6
    f680:	781b      	ldrb	r3, [r3, #0]
    f682:	2bff      	cmp	r3, #255	; 0xff
    f684:	d10f      	bne.n	f6a6 <MiMAC_ReceivedPacket+0x3fe>
    f686:	4bbd      	ldr	r3, [pc, #756]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f688:	781b      	ldrb	r3, [r3, #0]
    f68a:	0019      	movs	r1, r3
    f68c:	4abc      	ldr	r2, [pc, #752]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f68e:	234e      	movs	r3, #78	; 0x4e
    f690:	434b      	muls	r3, r1
    f692:	18d3      	adds	r3, r2, r3
    f694:	3307      	adds	r3, #7
    f696:	781b      	ldrb	r3, [r3, #0]
    f698:	2bff      	cmp	r3, #255	; 0xff
    f69a:	d104      	bne.n	f6a6 <MiMAC_ReceivedPacket+0x3fe>
                MACRxPacket.flags.bits.broadcast = 1;
    f69c:	4bb6      	ldr	r3, [pc, #728]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f69e:	781a      	ldrb	r2, [r3, #0]
    f6a0:	2104      	movs	r1, #4
    f6a2:	430a      	orrs	r2, r1
    f6a4:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    f6a6:	4bb4      	ldr	r3, [pc, #720]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f6a8:	781a      	ldrb	r2, [r3, #0]
    f6aa:	2180      	movs	r1, #128	; 0x80
    f6ac:	4249      	negs	r1, r1
    f6ae:	430a      	orrs	r2, r1
    f6b0:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
    f6b2:	4bb1      	ldr	r3, [pc, #708]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f6b4:	2201      	movs	r2, #1
    f6b6:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN == false) {
    f6b8:	1dbb      	adds	r3, r7, #6
    f6ba:	781b      	ldrb	r3, [r3, #0]
    f6bc:	2201      	movs	r2, #1
    f6be:	4053      	eors	r3, r2
    f6c0:	b2db      	uxtb	r3, r3
    f6c2:	2b00      	cmp	r3, #0
    f6c4:	d039      	beq.n	f73a <MiMAC_ReceivedPacket+0x492>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    f6c6:	4bad      	ldr	r3, [pc, #692]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f6c8:	781b      	ldrb	r3, [r3, #0]
    f6ca:	0019      	movs	r1, r3
    f6cc:	4aac      	ldr	r2, [pc, #688]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f6ce:	234e      	movs	r3, #78	; 0x4e
    f6d0:	434b      	muls	r3, r1
    f6d2:	18d3      	adds	r3, r2, r3
    f6d4:	3308      	adds	r3, #8
    f6d6:	781a      	ldrb	r2, [r3, #0]
    f6d8:	4ba7      	ldr	r3, [pc, #668]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f6da:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    f6dc:	4ba7      	ldr	r3, [pc, #668]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f6de:	781b      	ldrb	r3, [r3, #0]
    f6e0:	0019      	movs	r1, r3
    f6e2:	4aa7      	ldr	r2, [pc, #668]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f6e4:	234e      	movs	r3, #78	; 0x4e
    f6e6:	434b      	muls	r3, r1
    f6e8:	18d3      	adds	r3, r2, r3
    f6ea:	3309      	adds	r3, #9
    f6ec:	781a      	ldrb	r2, [r3, #0]
    f6ee:	4ba2      	ldr	r3, [pc, #648]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f6f0:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    f6f2:	4ba2      	ldr	r3, [pc, #648]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f6f4:	781b      	ldrb	r3, [r3, #0]
    f6f6:	001a      	movs	r2, r3
    f6f8:	234e      	movs	r3, #78	; 0x4e
    f6fa:	4353      	muls	r3, r2
    f6fc:	3309      	adds	r3, #9
    f6fe:	001a      	movs	r2, r3
    f700:	4b9f      	ldr	r3, [pc, #636]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f702:	18d3      	adds	r3, r2, r3
    f704:	1c5a      	adds	r2, r3, #1
    f706:	4b9c      	ldr	r3, [pc, #624]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f708:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    f70a:	4b9c      	ldr	r3, [pc, #624]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f70c:	781b      	ldrb	r3, [r3, #0]
    f70e:	0019      	movs	r1, r3
    f710:	4b9b      	ldr	r3, [pc, #620]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f712:	224e      	movs	r2, #78	; 0x4e
    f714:	434a      	muls	r2, r1
    f716:	5cd3      	ldrb	r3, [r2, r3]
    f718:	3b0f      	subs	r3, #15
    f71a:	b2da      	uxtb	r2, r3
    f71c:	4b96      	ldr	r3, [pc, #600]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f71e:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    f720:	4b96      	ldr	r3, [pc, #600]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f722:	781b      	ldrb	r3, [r3, #0]
    f724:	001a      	movs	r2, r3
    f726:	234e      	movs	r3, #78	; 0x4e
    f728:	4353      	muls	r3, r2
    f72a:	330b      	adds	r3, #11
    f72c:	001a      	movs	r2, r3
    f72e:	4b94      	ldr	r3, [pc, #592]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f730:	18d3      	adds	r3, r2, r3
    f732:	1c5a      	adds	r2, r3, #1
    f734:	4b90      	ldr	r3, [pc, #576]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f736:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
            }
        } break;
    f738:	e0ef      	b.n	f91a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    f73a:	4b90      	ldr	r3, [pc, #576]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	0019      	movs	r1, r3
    f740:	4a8f      	ldr	r2, [pc, #572]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f742:	234e      	movs	r3, #78	; 0x4e
    f744:	434b      	muls	r3, r1
    f746:	18d3      	adds	r3, r2, r3
    f748:	3304      	adds	r3, #4
    f74a:	781a      	ldrb	r2, [r3, #0]
    f74c:	4b8a      	ldr	r3, [pc, #552]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f74e:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    f750:	4b8a      	ldr	r3, [pc, #552]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f752:	781b      	ldrb	r3, [r3, #0]
    f754:	0019      	movs	r1, r3
    f756:	4a8a      	ldr	r2, [pc, #552]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f758:	234e      	movs	r3, #78	; 0x4e
    f75a:	434b      	muls	r3, r1
    f75c:	18d3      	adds	r3, r2, r3
    f75e:	3305      	adds	r3, #5
    f760:	781a      	ldrb	r2, [r3, #0]
    f762:	4b85      	ldr	r3, [pc, #532]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f764:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    f766:	4b85      	ldr	r3, [pc, #532]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	001a      	movs	r2, r3
    f76c:	234e      	movs	r3, #78	; 0x4e
    f76e:	4353      	muls	r3, r2
    f770:	1dda      	adds	r2, r3, #7
    f772:	4b83      	ldr	r3, [pc, #524]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f774:	18d3      	adds	r3, r2, r3
    f776:	1c5a      	adds	r2, r3, #1
    f778:	4b7f      	ldr	r3, [pc, #508]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f77a:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    f77c:	4b7f      	ldr	r3, [pc, #508]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f77e:	781b      	ldrb	r3, [r3, #0]
    f780:	0019      	movs	r1, r3
    f782:	4b7f      	ldr	r3, [pc, #508]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f784:	224e      	movs	r2, #78	; 0x4e
    f786:	434a      	muls	r2, r1
    f788:	5cd3      	ldrb	r3, [r2, r3]
    f78a:	3b0d      	subs	r3, #13
    f78c:	b2da      	uxtb	r2, r3
    f78e:	4b7a      	ldr	r3, [pc, #488]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f790:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    f792:	4b7a      	ldr	r3, [pc, #488]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	001a      	movs	r2, r3
    f798:	234e      	movs	r3, #78	; 0x4e
    f79a:	4353      	muls	r3, r2
    f79c:	3309      	adds	r3, #9
    f79e:	001a      	movs	r2, r3
    f7a0:	4b77      	ldr	r3, [pc, #476]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f7a2:	18d3      	adds	r3, r2, r3
    f7a4:	1c5a      	adds	r2, r3, #1
    f7a6:	4b74      	ldr	r3, [pc, #464]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f7a8:	609a      	str	r2, [r3, #8]
        } break;
    f7aa:	e0b6      	b.n	f91a <MiMAC_ReceivedPacket+0x672>

        case 0x8C: // long dest, short source
        {
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    f7ac:	4b72      	ldr	r3, [pc, #456]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f7ae:	781a      	ldrb	r2, [r3, #0]
    f7b0:	2180      	movs	r1, #128	; 0x80
    f7b2:	4249      	negs	r1, r1
    f7b4:	430a      	orrs	r2, r1
    f7b6:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
    f7b8:	4b6f      	ldr	r3, [pc, #444]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f7ba:	2201      	movs	r2, #1
    f7bc:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
    f7be:	1dbb      	adds	r3, r7, #6
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d039      	beq.n	f83a <MiMAC_ReceivedPacket+0x592>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    f7c6:	4b6d      	ldr	r3, [pc, #436]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f7c8:	781b      	ldrb	r3, [r3, #0]
    f7ca:	0019      	movs	r1, r3
    f7cc:	4a6c      	ldr	r2, [pc, #432]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f7ce:	234e      	movs	r3, #78	; 0x4e
    f7d0:	434b      	muls	r3, r1
    f7d2:	18d3      	adds	r3, r2, r3
    f7d4:	3304      	adds	r3, #4
    f7d6:	781a      	ldrb	r2, [r3, #0]
    f7d8:	4b67      	ldr	r3, [pc, #412]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f7da:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    f7dc:	4b67      	ldr	r3, [pc, #412]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f7de:	781b      	ldrb	r3, [r3, #0]
    f7e0:	0019      	movs	r1, r3
    f7e2:	4a67      	ldr	r2, [pc, #412]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f7e4:	234e      	movs	r3, #78	; 0x4e
    f7e6:	434b      	muls	r3, r1
    f7e8:	18d3      	adds	r3, r2, r3
    f7ea:	3305      	adds	r3, #5
    f7ec:	781a      	ldrb	r2, [r3, #0]
    f7ee:	4b62      	ldr	r3, [pc, #392]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f7f0:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    f7f2:	4b62      	ldr	r3, [pc, #392]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	001a      	movs	r2, r3
    f7f8:	234e      	movs	r3, #78	; 0x4e
    f7fa:	4353      	muls	r3, r2
    f7fc:	330c      	adds	r3, #12
    f7fe:	001a      	movs	r2, r3
    f800:	4b5f      	ldr	r3, [pc, #380]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f802:	18d3      	adds	r3, r2, r3
    f804:	1c5a      	adds	r2, r3, #1
    f806:	4b5c      	ldr	r3, [pc, #368]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f808:	605a      	str	r2, [r3, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    f80a:	4b5c      	ldr	r3, [pc, #368]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f80c:	781b      	ldrb	r3, [r3, #0]
    f80e:	0019      	movs	r1, r3
    f810:	4b5b      	ldr	r3, [pc, #364]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f812:	224e      	movs	r2, #78	; 0x4e
    f814:	434a      	muls	r2, r1
    f816:	5cd3      	ldrb	r3, [r2, r3]
    f818:	3b13      	subs	r3, #19
    f81a:	b2da      	uxtb	r2, r3
    f81c:	4b56      	ldr	r3, [pc, #344]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f81e:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    f820:	4b56      	ldr	r3, [pc, #344]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	001a      	movs	r2, r3
    f826:	234e      	movs	r3, #78	; 0x4e
    f828:	4353      	muls	r3, r2
    f82a:	330f      	adds	r3, #15
    f82c:	001a      	movs	r2, r3
    f82e:	4b54      	ldr	r3, [pc, #336]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f830:	18d3      	adds	r3, r2, r3
    f832:	1c5a      	adds	r2, r3, #1
    f834:	4b50      	ldr	r3, [pc, #320]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f836:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
            }
#endif
        } break;
    f838:	e06f      	b.n	f91a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    f83a:	4b50      	ldr	r3, [pc, #320]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	0019      	movs	r1, r3
    f840:	4a4f      	ldr	r2, [pc, #316]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f842:	234e      	movs	r3, #78	; 0x4e
    f844:	434b      	muls	r3, r1
    f846:	18d3      	adds	r3, r2, r3
    f848:	330d      	adds	r3, #13
    f84a:	781a      	ldrb	r2, [r3, #0]
    f84c:	4b4a      	ldr	r3, [pc, #296]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f84e:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    f850:	4b4a      	ldr	r3, [pc, #296]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	0019      	movs	r1, r3
    f856:	4a4a      	ldr	r2, [pc, #296]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f858:	234e      	movs	r3, #78	; 0x4e
    f85a:	434b      	muls	r3, r1
    f85c:	18d3      	adds	r3, r2, r3
    f85e:	330e      	adds	r3, #14
    f860:	781a      	ldrb	r2, [r3, #0]
    f862:	4b45      	ldr	r3, [pc, #276]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f864:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    f866:	4b45      	ldr	r3, [pc, #276]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f868:	781b      	ldrb	r3, [r3, #0]
    f86a:	001a      	movs	r2, r3
    f86c:	234e      	movs	r3, #78	; 0x4e
    f86e:	4353      	muls	r3, r2
    f870:	330e      	adds	r3, #14
    f872:	001a      	movs	r2, r3
    f874:	4b42      	ldr	r3, [pc, #264]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f876:	18d3      	adds	r3, r2, r3
    f878:	1c5a      	adds	r2, r3, #1
    f87a:	4b3f      	ldr	r3, [pc, #252]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f87c:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    f87e:	4b3f      	ldr	r3, [pc, #252]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f880:	781b      	ldrb	r3, [r3, #0]
    f882:	0019      	movs	r1, r3
    f884:	4b3e      	ldr	r3, [pc, #248]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f886:	224e      	movs	r2, #78	; 0x4e
    f888:	434a      	muls	r2, r1
    f88a:	5cd3      	ldrb	r3, [r2, r3]
    f88c:	3b15      	subs	r3, #21
    f88e:	b2da      	uxtb	r2, r3
    f890:	4b39      	ldr	r3, [pc, #228]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f892:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    f894:	4b39      	ldr	r3, [pc, #228]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f896:	781b      	ldrb	r3, [r3, #0]
    f898:	001a      	movs	r2, r3
    f89a:	234e      	movs	r3, #78	; 0x4e
    f89c:	4353      	muls	r3, r2
    f89e:	3311      	adds	r3, #17
    f8a0:	001a      	movs	r2, r3
    f8a2:	4b37      	ldr	r3, [pc, #220]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f8a4:	18d3      	adds	r3, r2, r3
    f8a6:	1c5a      	adds	r2, r3, #1
    f8a8:	4b33      	ldr	r3, [pc, #204]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f8aa:	609a      	str	r2, [r3, #8]
        } break;
    f8ac:	e035      	b.n	f91a <MiMAC_ReceivedPacket+0x672>

        case 0x08: //dest-short, source-none
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    f8ae:	4b33      	ldr	r3, [pc, #204]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	0019      	movs	r1, r3
    f8b4:	4a32      	ldr	r2, [pc, #200]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f8b6:	234e      	movs	r3, #78	; 0x4e
    f8b8:	434b      	muls	r3, r1
    f8ba:	18d3      	adds	r3, r2, r3
    f8bc:	3306      	adds	r3, #6
    f8be:	781b      	ldrb	r3, [r3, #0]
    f8c0:	2bff      	cmp	r3, #255	; 0xff
    f8c2:	d10f      	bne.n	f8e4 <MiMAC_ReceivedPacket+0x63c>
    f8c4:	4b2d      	ldr	r3, [pc, #180]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f8c6:	781b      	ldrb	r3, [r3, #0]
    f8c8:	0019      	movs	r1, r3
    f8ca:	4a2d      	ldr	r2, [pc, #180]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f8cc:	234e      	movs	r3, #78	; 0x4e
    f8ce:	434b      	muls	r3, r1
    f8d0:	18d3      	adds	r3, r2, r3
    f8d2:	3307      	adds	r3, #7
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	2bff      	cmp	r3, #255	; 0xff
    f8d8:	d104      	bne.n	f8e4 <MiMAC_ReceivedPacket+0x63c>
                MACRxPacket.flags.bits.broadcast = 1;
    f8da:	4b27      	ldr	r3, [pc, #156]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f8dc:	781a      	ldrb	r2, [r3, #0]
    f8de:	2104      	movs	r1, #4
    f8e0:	430a      	orrs	r2, r1
    f8e2:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    f8e4:	4b25      	ldr	r3, [pc, #148]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f8e6:	781b      	ldrb	r3, [r3, #0]
    f8e8:	0019      	movs	r1, r3
    f8ea:	4b25      	ldr	r3, [pc, #148]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f8ec:	224e      	movs	r2, #78	; 0x4e
    f8ee:	434a      	muls	r2, r1
    f8f0:	5cd3      	ldrb	r3, [r2, r3]
    f8f2:	3b0a      	subs	r3, #10
    f8f4:	b2da      	uxtb	r2, r3
    f8f6:	4b20      	ldr	r3, [pc, #128]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f8f8:	731a      	strb	r2, [r3, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    f8fa:	4b20      	ldr	r3, [pc, #128]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f8fc:	781b      	ldrb	r3, [r3, #0]
    f8fe:	001a      	movs	r2, r3
    f900:	234e      	movs	r3, #78	; 0x4e
    f902:	4353      	muls	r3, r2
    f904:	1dda      	adds	r2, r3, #7
    f906:	4b1e      	ldr	r3, [pc, #120]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f908:	18d3      	adds	r3, r2, r3
    f90a:	1c5a      	adds	r2, r3, #1
    f90c:	4b1a      	ldr	r3, [pc, #104]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f90e:	609a      	str	r2, [r3, #8]
        } break;
    f910:	e003      	b.n	f91a <MiMAC_ReceivedPacket+0x672>

        // all other addressing mode will not be supported in P2P
        default:
            // not valid addressing mode or no addressing info
            MiMAC_DiscardPacket();
    f912:	4b1c      	ldr	r3, [pc, #112]	; (f984 <MiMAC_ReceivedPacket+0x6dc>)
    f914:	4798      	blx	r3
            return false;
    f916:	2300      	movs	r3, #0
    f918:	e102      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
        }

#ifdef ENABLE_SECURITY
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    f91a:	4b18      	ldr	r3, [pc, #96]	; (f97c <MiMAC_ReceivedPacket+0x6d4>)
    f91c:	781b      	ldrb	r3, [r3, #0]
    f91e:	0019      	movs	r1, r3
    f920:	4a17      	ldr	r2, [pc, #92]	; (f980 <MiMAC_ReceivedPacket+0x6d8>)
    f922:	234e      	movs	r3, #78	; 0x4e
    f924:	434b      	muls	r3, r1
    f926:	18d3      	adds	r3, r2, r3
    f928:	3301      	adds	r3, #1
    f92a:	781b      	ldrb	r3, [r3, #0]
    f92c:	001a      	movs	r2, r3
    f92e:	2308      	movs	r3, #8
    f930:	4013      	ands	r3, r2
    f932:	d100      	bne.n	f936 <MiMAC_ReceivedPacket+0x68e>
    f934:	e0bd      	b.n	fab2 <MiMAC_ReceivedPacket+0x80a>
            API_UINT32_UNION FrameCounter;

            if (addrMode < 0xC0) {
    f936:	1d7b      	adds	r3, r7, #5
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	2bbf      	cmp	r3, #191	; 0xbf
    f93c:	d803      	bhi.n	f946 <MiMAC_ReceivedPacket+0x69e>
                MiMAC_DiscardPacket();
    f93e:	4b11      	ldr	r3, [pc, #68]	; (f984 <MiMAC_ReceivedPacket+0x6dc>)
    f940:	4798      	blx	r3
                return false;
    f942:	2300      	movs	r3, #0
    f944:	e0ec      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
            }

            FrameCounter.v[0] = MACRxPacket.Payload[0];
    f946:	4b0c      	ldr	r3, [pc, #48]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f948:	689b      	ldr	r3, [r3, #8]
    f94a:	781a      	ldrb	r2, [r3, #0]
    f94c:	003b      	movs	r3, r7
    f94e:	701a      	strb	r2, [r3, #0]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    f950:	4b09      	ldr	r3, [pc, #36]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f952:	689b      	ldr	r3, [r3, #8]
    f954:	785a      	ldrb	r2, [r3, #1]
    f956:	003b      	movs	r3, r7
    f958:	705a      	strb	r2, [r3, #1]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    f95a:	4b07      	ldr	r3, [pc, #28]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f95c:	689b      	ldr	r3, [r3, #8]
    f95e:	789a      	ldrb	r2, [r3, #2]
    f960:	003b      	movs	r3, r7
    f962:	709a      	strb	r2, [r3, #2]
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    f964:	4b04      	ldr	r3, [pc, #16]	; (f978 <MiMAC_ReceivedPacket+0x6d0>)
    f966:	689b      	ldr	r3, [r3, #8]
    f968:	78da      	ldrb	r2, [r3, #3]
    f96a:	003b      	movs	r3, r7
    f96c:	70da      	strb	r2, [r3, #3]

            for (i = 0; i < CONNECTION_SIZE; i++) {
    f96e:	1dfb      	adds	r3, r7, #7
    f970:	2200      	movs	r2, #0
    f972:	701a      	strb	r2, [r3, #0]
    f974:	e02d      	b.n	f9d2 <MiMAC_ReceivedPacket+0x72a>
    f976:	46c0      	nop			; (mov r8, r8)
    f978:	200014dc 	.word	0x200014dc
    f97c:	200004a4 	.word	0x200004a4
    f980:	20000dd8 	.word	0x20000dd8
    f984:	0000f27d 	.word	0x0000f27d
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    f988:	1dfb      	adds	r3, r7, #7
    f98a:	781a      	ldrb	r2, [r3, #0]
    f98c:	4966      	ldr	r1, [pc, #408]	; (fb28 <MiMAC_ReceivedPacket+0x880>)
    f98e:	2008      	movs	r0, #8
    f990:	0013      	movs	r3, r2
    f992:	009b      	lsls	r3, r3, #2
    f994:	189b      	adds	r3, r3, r2
    f996:	005b      	lsls	r3, r3, #1
    f998:	18cb      	adds	r3, r1, r3
    f99a:	181b      	adds	r3, r3, r0
    f99c:	785b      	ldrb	r3, [r3, #1]
    f99e:	061b      	lsls	r3, r3, #24
    f9a0:	0fdb      	lsrs	r3, r3, #31
    f9a2:	b2db      	uxtb	r3, r3
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	d00f      	beq.n	f9c8 <MiMAC_ReceivedPacket+0x720>
    f9a8:	1dfb      	adds	r3, r7, #7
    f9aa:	781a      	ldrb	r2, [r3, #0]
    f9ac:	0013      	movs	r3, r2
    f9ae:	009b      	lsls	r3, r3, #2
    f9b0:	189b      	adds	r3, r3, r2
    f9b2:	005b      	lsls	r3, r3, #1
    f9b4:	4a5c      	ldr	r2, [pc, #368]	; (fb28 <MiMAC_ReceivedPacket+0x880>)
    f9b6:	189a      	adds	r2, r3, r2
    f9b8:	4b5c      	ldr	r3, [pc, #368]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    f9ba:	685b      	ldr	r3, [r3, #4]
    f9bc:	0019      	movs	r1, r3
    f9be:	0010      	movs	r0, r2
    f9c0:	4b5b      	ldr	r3, [pc, #364]	; (fb30 <MiMAC_ReceivedPacket+0x888>)
    f9c2:	4798      	blx	r3
    f9c4:	1e03      	subs	r3, r0, #0
    f9c6:	d109      	bne.n	f9dc <MiMAC_ReceivedPacket+0x734>
            for (i = 0; i < CONNECTION_SIZE; i++) {
    f9c8:	1dfb      	adds	r3, r7, #7
    f9ca:	781a      	ldrb	r2, [r3, #0]
    f9cc:	1dfb      	adds	r3, r7, #7
    f9ce:	3201      	adds	r2, #1
    f9d0:	701a      	strb	r2, [r3, #0]
    f9d2:	1dfb      	adds	r3, r7, #7
    f9d4:	781b      	ldrb	r3, [r3, #0]
    f9d6:	2b13      	cmp	r3, #19
    f9d8:	d9d6      	bls.n	f988 <MiMAC_ReceivedPacket+0x6e0>
    f9da:	e000      	b.n	f9de <MiMAC_ReceivedPacket+0x736>
                    break;
    f9dc:	46c0      	nop			; (mov r8, r8)
                }
            }

            if (i < CONNECTION_SIZE) {
    f9de:	1dfb      	adds	r3, r7, #7
    f9e0:	781b      	ldrb	r3, [r3, #0]
    f9e2:	2b13      	cmp	r3, #19
    f9e4:	d811      	bhi.n	fa0a <MiMAC_ReceivedPacket+0x762>
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
    f9e6:	1dfb      	adds	r3, r7, #7
    f9e8:	781a      	ldrb	r2, [r3, #0]
    f9ea:	4b52      	ldr	r3, [pc, #328]	; (fb34 <MiMAC_ReceivedPacket+0x88c>)
    f9ec:	0092      	lsls	r2, r2, #2
    f9ee:	58d2      	ldr	r2, [r2, r3]
    f9f0:	683b      	ldr	r3, [r7, #0]
    f9f2:	429a      	cmp	r2, r3
    f9f4:	d903      	bls.n	f9fe <MiMAC_ReceivedPacket+0x756>
                    MiMAC_DiscardPacket();
    f9f6:	4b50      	ldr	r3, [pc, #320]	; (fb38 <MiMAC_ReceivedPacket+0x890>)
    f9f8:	4798      	blx	r3
                    return false;
    f9fa:	2300      	movs	r3, #0
    f9fc:	e090      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
                }
                else {
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
    f9fe:	1dfb      	adds	r3, r7, #7
    fa00:	781a      	ldrb	r2, [r3, #0]
    fa02:	6839      	ldr	r1, [r7, #0]
    fa04:	4b4b      	ldr	r3, [pc, #300]	; (fb34 <MiMAC_ReceivedPacket+0x88c>)
    fa06:	0092      	lsls	r2, r2, #2
    fa08:	50d1      	str	r1, [r2, r3]
                }
            }

            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    fa0a:	4b48      	ldr	r3, [pc, #288]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa0c:	7b1b      	ldrb	r3, [r3, #12]
    fa0e:	3b05      	subs	r3, #5
    fa10:	b2da      	uxtb	r2, r3
    fa12:	4b46      	ldr	r3, [pc, #280]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa14:	731a      	strb	r2, [r3, #12]

            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    fa16:	4b45      	ldr	r3, [pc, #276]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa18:	689a      	ldr	r2, [r3, #8]
    fa1a:	4b44      	ldr	r3, [pc, #272]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa1c:	7b1b      	ldrb	r3, [r3, #12]
    fa1e:	3301      	adds	r3, #1
    fa20:	18d3      	adds	r3, r2, r3
    fa22:	781a      	ldrb	r2, [r3, #0]
    fa24:	4b45      	ldr	r3, [pc, #276]	; (fb3c <MiMAC_ReceivedPacket+0x894>)
    fa26:	701a      	strb	r2, [r3, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    fa28:	4b40      	ldr	r3, [pc, #256]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa2a:	689a      	ldr	r2, [r3, #8]
    fa2c:	4b3f      	ldr	r3, [pc, #252]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa2e:	7b1b      	ldrb	r3, [r3, #12]
    fa30:	3302      	adds	r3, #2
    fa32:	18d3      	adds	r3, r2, r3
    fa34:	781a      	ldrb	r2, [r3, #0]
    fa36:	4b41      	ldr	r3, [pc, #260]	; (fb3c <MiMAC_ReceivedPacket+0x894>)
    fa38:	705a      	strb	r2, [r3, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
    fa3a:	4b3c      	ldr	r3, [pc, #240]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa3c:	689a      	ldr	r2, [r3, #8]
    fa3e:	4b3b      	ldr	r3, [pc, #236]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa40:	7b1b      	ldrb	r3, [r3, #12]
    fa42:	3303      	adds	r3, #3
    fa44:	18d3      	adds	r3, r2, r3
    fa46:	781a      	ldrb	r2, [r3, #0]
    fa48:	4b3c      	ldr	r3, [pc, #240]	; (fb3c <MiMAC_ReceivedPacket+0x894>)
    fa4a:	709a      	strb	r2, [r3, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    fa4c:	4b37      	ldr	r3, [pc, #220]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa4e:	689a      	ldr	r2, [r3, #8]
    fa50:	4b36      	ldr	r3, [pc, #216]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa52:	7b1b      	ldrb	r3, [r3, #12]
    fa54:	3304      	adds	r3, #4
    fa56:	18d3      	adds	r3, r2, r3
    fa58:	781a      	ldrb	r2, [r3, #0]
    fa5a:	4b38      	ldr	r3, [pc, #224]	; (fb3c <MiMAC_ReceivedPacket+0x894>)
    fa5c:	70da      	strb	r2, [r3, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    fa5e:	4b33      	ldr	r3, [pc, #204]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa60:	689b      	ldr	r3, [r3, #8]
    fa62:	1d58      	adds	r0, r3, #5
    fa64:	4b31      	ldr	r3, [pc, #196]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fa66:	685c      	ldr	r4, [r3, #4]
    fa68:	4b35      	ldr	r3, [pc, #212]	; (fb40 <MiMAC_ReceivedPacket+0x898>)
    fa6a:	781b      	ldrb	r3, [r3, #0]
    fa6c:	0019      	movs	r1, r3
    fa6e:	4a35      	ldr	r2, [pc, #212]	; (fb44 <MiMAC_ReceivedPacket+0x89c>)
    fa70:	234e      	movs	r3, #78	; 0x4e
    fa72:	434b      	muls	r3, r1
    fa74:	18d3      	adds	r3, r2, r3
    fa76:	3301      	adds	r3, #1
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	683a      	ldr	r2, [r7, #0]
    fa7c:	4932      	ldr	r1, [pc, #200]	; (fb48 <MiMAC_ReceivedPacket+0x8a0>)
    fa7e:	9300      	str	r3, [sp, #0]
    fa80:	0013      	movs	r3, r2
    fa82:	0022      	movs	r2, r4
    fa84:	4c31      	ldr	r4, [pc, #196]	; (fb4c <MiMAC_ReceivedPacket+0x8a4>)
    fa86:	47a0      	blx	r4
    fa88:	0003      	movs	r3, r0
    fa8a:	001a      	movs	r2, r3
    fa8c:	2301      	movs	r3, #1
    fa8e:	4053      	eors	r3, r2
    fa90:	b2db      	uxtb	r3, r3
    fa92:	2b00      	cmp	r3, #0
    fa94:	d003      	beq.n	fa9e <MiMAC_ReceivedPacket+0x7f6>
                MiMAC_DiscardPacket();
    fa96:	4b28      	ldr	r3, [pc, #160]	; (fb38 <MiMAC_ReceivedPacket+0x890>)
    fa98:	4798      	blx	r3
                return false;
    fa9a:	2300      	movs	r3, #0
    fa9c:	e040      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
            }

            // remove the security header from the payload
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    fa9e:	4b23      	ldr	r3, [pc, #140]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    faa0:	689b      	ldr	r3, [r3, #8]
    faa2:	1d5a      	adds	r2, r3, #5
    faa4:	4b21      	ldr	r3, [pc, #132]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    faa6:	609a      	str	r2, [r3, #8]
            MACRxPacket.flags.bits.secEn = 1;
    faa8:	4b20      	ldr	r3, [pc, #128]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    faaa:	781a      	ldrb	r2, [r3, #0]
    faac:	2108      	movs	r1, #8
    faae:	430a      	orrs	r2, r1
    fab0:	701a      	strb	r2, [r3, #0]
#endif

        // check the frame type. Only the data and command frame type
        // are supported. Acknowledgement frame type is handled in
        // AT96RF233 transceiver hardware.
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    fab2:	4b23      	ldr	r3, [pc, #140]	; (fb40 <MiMAC_ReceivedPacket+0x898>)
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	0019      	movs	r1, r3
    fab8:	4a22      	ldr	r2, [pc, #136]	; (fb44 <MiMAC_ReceivedPacket+0x89c>)
    faba:	234e      	movs	r3, #78	; 0x4e
    fabc:	434b      	muls	r3, r1
    fabe:	18d3      	adds	r3, r2, r3
    fac0:	3301      	adds	r3, #1
    fac2:	781b      	ldrb	r3, [r3, #0]
    fac4:	001a      	movs	r2, r3
    fac6:	2307      	movs	r3, #7
    fac8:	4013      	ands	r3, r2
    faca:	2b01      	cmp	r3, #1
    facc:	d004      	beq.n	fad8 <MiMAC_ReceivedPacket+0x830>
    face:	2b03      	cmp	r3, #3
    fad0:	d008      	beq.n	fae4 <MiMAC_ReceivedPacket+0x83c>
    fad2:	2b00      	cmp	r3, #0
    fad4:	d00f      	beq.n	faf6 <MiMAC_ReceivedPacket+0x84e>
    fad6:	e014      	b.n	fb02 <MiMAC_ReceivedPacket+0x85a>
        {
        case 0x01: // data frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    fad8:	4b14      	ldr	r3, [pc, #80]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fada:	781a      	ldrb	r2, [r3, #0]
    fadc:	2103      	movs	r1, #3
    fade:	438a      	bics	r2, r1
    fae0:	701a      	strb	r2, [r3, #0]
            break;
    fae2:	e012      	b.n	fb0a <MiMAC_ReceivedPacket+0x862>
        case 0x03: // command frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    fae4:	4b11      	ldr	r3, [pc, #68]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fae6:	781a      	ldrb	r2, [r3, #0]
    fae8:	2103      	movs	r1, #3
    faea:	438a      	bics	r2, r1
    faec:	1c11      	adds	r1, r2, #0
    faee:	2201      	movs	r2, #1
    faf0:	430a      	orrs	r2, r1
    faf2:	701a      	strb	r2, [r3, #0]
            break;
    faf4:	e009      	b.n	fb0a <MiMAC_ReceivedPacket+0x862>
        case 0x00:
            // use reserved packet type to represent beacon packet
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    faf6:	4b0d      	ldr	r3, [pc, #52]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    faf8:	781a      	ldrb	r2, [r3, #0]
    fafa:	2103      	movs	r1, #3
    fafc:	430a      	orrs	r2, r1
    fafe:	701a      	strb	r2, [r3, #0]
            break;
    fb00:	e003      	b.n	fb0a <MiMAC_ReceivedPacket+0x862>
        default: // not support frame type
            MiMAC_DiscardPacket();
    fb02:	4b0d      	ldr	r3, [pc, #52]	; (fb38 <MiMAC_ReceivedPacket+0x890>)
    fb04:	4798      	blx	r3
            return false;
    fb06:	2300      	movs	r3, #0
    fb08:	e00a      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
        }
#ifndef TARGET_SMALL
        MACRxPacket.LQIValue = Received_LQI_Val;
    fb0a:	4b11      	ldr	r3, [pc, #68]	; (fb50 <MiMAC_ReceivedPacket+0x8a8>)
    fb0c:	781a      	ldrb	r2, [r3, #0]
    fb0e:	4b07      	ldr	r3, [pc, #28]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fb10:	739a      	strb	r2, [r3, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
    fb12:	4b10      	ldr	r3, [pc, #64]	; (fb54 <MiMAC_ReceivedPacket+0x8ac>)
    fb14:	781a      	ldrb	r2, [r3, #0]
    fb16:	4b05      	ldr	r3, [pc, #20]	; (fb2c <MiMAC_ReceivedPacket+0x884>)
    fb18:	735a      	strb	r2, [r3, #13]
#endif

        return true;
    fb1a:	2301      	movs	r3, #1
    fb1c:	e000      	b.n	fb20 <MiMAC_ReceivedPacket+0x878>
    }
    return false;
    fb1e:	2300      	movs	r3, #0
}
    fb20:	0018      	movs	r0, r3
    fb22:	46bd      	mov	sp, r7
    fb24:	b003      	add	sp, #12
    fb26:	bd90      	pop	{r4, r7, pc}
    fb28:	20001414 	.word	0x20001414
    fb2c:	200014dc 	.word	0x200014dc
    fb30:	000106bd 	.word	0x000106bd
    fb34:	200014f8 	.word	0x200014f8
    fb38:	0000f27d 	.word	0x0000f27d
    fb3c:	20001404 	.word	0x20001404
    fb40:	200004a4 	.word	0x200004a4
    fb44:	20000dd8 	.word	0x20000dd8
    fb48:	200014e8 	.word	0x200014e8
    fb4c:	0000e695 	.word	0x0000e695
    fb50:	20000d91 	.word	0x20000d91
    fb54:	20000dc4 	.word	0x20000dc4

0000fb58 <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    fb58:	b590      	push	{r4, r7, lr}
    fb5a:	b083      	sub	sp, #12
    fb5c:	af00      	add	r7, sp, #0
    if (PHY_STATE_SLEEP == phyState) {
    fb5e:	4b66      	ldr	r3, [pc, #408]	; (fcf8 <PHY_PacketReceieved+0x1a0>)
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	2b02      	cmp	r3, #2
    fb64:	d100      	bne.n	fb68 <PHY_PacketReceieved+0x10>
    fb66:	e0c2      	b.n	fcee <PHY_PacketReceieved+0x196>
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    fb68:	200f      	movs	r0, #15
    fb6a:	4b64      	ldr	r3, [pc, #400]	; (fcfc <PHY_PacketReceieved+0x1a4>)
    fb6c:	4798      	blx	r3
    fb6e:	0003      	movs	r3, r0
    fb70:	001a      	movs	r2, r3
    fb72:	2308      	movs	r3, #8
    fb74:	4013      	ands	r3, r2
    fb76:	d100      	bne.n	fb7a <PHY_PacketReceieved+0x22>
    fb78:	e0ba      	b.n	fcf0 <PHY_PacketReceieved+0x198>
        if (PHY_STATE_IDLE == phyState) {
    fb7a:	4b5f      	ldr	r3, [pc, #380]	; (fcf8 <PHY_PacketReceieved+0x1a0>)
    fb7c:	781b      	ldrb	r3, [r3, #0]
    fb7e:	2b01      	cmp	r3, #1
    fb80:	d000      	beq.n	fb84 <PHY_PacketReceieved+0x2c>
    fb82:	e076      	b.n	fc72 <PHY_PacketReceieved+0x11a>
            uint8_t size, i, RxBank = 0xFF;
    fb84:	1dbb      	adds	r3, r7, #6
    fb86:	22ff      	movs	r2, #255	; 0xff
    fb88:	701a      	strb	r2, [r3, #0]

            for (i = 0; i < BANK_SIZE; i++) {
    fb8a:	1dfb      	adds	r3, r7, #7
    fb8c:	2200      	movs	r2, #0
    fb8e:	701a      	strb	r2, [r3, #0]
    fb90:	e011      	b.n	fbb6 <PHY_PacketReceieved+0x5e>
                if (RxBuffer[i].PayloadLen == 0) {
    fb92:	1dfb      	adds	r3, r7, #7
    fb94:	781a      	ldrb	r2, [r3, #0]
    fb96:	4b5a      	ldr	r3, [pc, #360]	; (fd00 <PHY_PacketReceieved+0x1a8>)
    fb98:	214e      	movs	r1, #78	; 0x4e
    fb9a:	434a      	muls	r2, r1
    fb9c:	5cd3      	ldrb	r3, [r2, r3]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	d104      	bne.n	fbac <PHY_PacketReceieved+0x54>
                    RxBank = i;
    fba2:	1dbb      	adds	r3, r7, #6
    fba4:	1dfa      	adds	r2, r7, #7
    fba6:	7812      	ldrb	r2, [r2, #0]
    fba8:	701a      	strb	r2, [r3, #0]
                    break;
    fbaa:	e008      	b.n	fbbe <PHY_PacketReceieved+0x66>
            for (i = 0; i < BANK_SIZE; i++) {
    fbac:	1dfb      	adds	r3, r7, #7
    fbae:	781a      	ldrb	r2, [r3, #0]
    fbb0:	1dfb      	adds	r3, r7, #7
    fbb2:	3201      	adds	r2, #1
    fbb4:	701a      	strb	r2, [r3, #0]
    fbb6:	1dfb      	adds	r3, r7, #7
    fbb8:	781b      	ldrb	r3, [r3, #0]
    fbba:	2b13      	cmp	r3, #19
    fbbc:	d9e9      	bls.n	fb92 <PHY_PacketReceieved+0x3a>
                }
            }
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
    fbbe:	2007      	movs	r0, #7
    fbc0:	4b4e      	ldr	r3, [pc, #312]	; (fcfc <PHY_PacketReceieved+0x1a4>)
    fbc2:	4798      	blx	r3
    fbc4:	0003      	movs	r3, r0
    fbc6:	3b5b      	subs	r3, #91	; 0x5b
    fbc8:	b2da      	uxtb	r2, r3
    fbca:	4b4e      	ldr	r3, [pc, #312]	; (fd04 <PHY_PacketReceieved+0x1ac>)
    fbcc:	701a      	strb	r2, [r3, #0]

            trx_frame_read(&size, 1);
    fbce:	1d3b      	adds	r3, r7, #4
    fbd0:	2101      	movs	r1, #1
    fbd2:	0018      	movs	r0, r3
    fbd4:	4b4c      	ldr	r3, [pc, #304]	; (fd08 <PHY_PacketReceieved+0x1b0>)
    fbd6:	4798      	blx	r3

            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
    fbd8:	1d3b      	adds	r3, r7, #4
    fbda:	781b      	ldrb	r3, [r3, #0]
    fbdc:	3305      	adds	r3, #5
    fbde:	b2da      	uxtb	r2, r3
    fbe0:	4b4a      	ldr	r3, [pc, #296]	; (fd0c <PHY_PacketReceieved+0x1b4>)
    fbe2:	0011      	movs	r1, r2
    fbe4:	0018      	movs	r0, r3
    fbe6:	4b48      	ldr	r3, [pc, #288]	; (fd08 <PHY_PacketReceieved+0x1b0>)
    fbe8:	4798      	blx	r3
            RxBuffer[RxBank].PayloadLen = size + 2;
    fbea:	1dbb      	adds	r3, r7, #6
    fbec:	781a      	ldrb	r2, [r3, #0]
    fbee:	1d3b      	adds	r3, r7, #4
    fbf0:	781b      	ldrb	r3, [r3, #0]
    fbf2:	3302      	adds	r3, #2
    fbf4:	b2d8      	uxtb	r0, r3
    fbf6:	4b42      	ldr	r3, [pc, #264]	; (fd00 <PHY_PacketReceieved+0x1a8>)
    fbf8:	214e      	movs	r1, #78	; 0x4e
    fbfa:	434a      	muls	r2, r1
    fbfc:	1c01      	adds	r1, r0, #0
    fbfe:	54d1      	strb	r1, [r2, r3]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
    fc00:	1dbb      	adds	r3, r7, #6
    fc02:	781a      	ldrb	r2, [r3, #0]
    fc04:	4b3e      	ldr	r3, [pc, #248]	; (fd00 <PHY_PacketReceieved+0x1a8>)
    fc06:	214e      	movs	r1, #78	; 0x4e
    fc08:	434a      	muls	r2, r1
    fc0a:	5cd3      	ldrb	r3, [r2, r3]
    fc0c:	2b4c      	cmp	r3, #76	; 0x4c
    fc0e:	d825      	bhi.n	fc5c <PHY_PacketReceieved+0x104>
                //indicate that data is now stored in the buffer
                trx_status.bits.RX_BUFFERED = 1;
    fc10:	4a3f      	ldr	r2, [pc, #252]	; (fd10 <PHY_PacketReceieved+0x1b8>)
    fc12:	7813      	ldrb	r3, [r2, #0]
    fc14:	2120      	movs	r1, #32
    fc16:	430b      	orrs	r3, r1
    fc18:	7013      	strb	r3, [r2, #0]

                //copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
                for (i = 1; i <= size + 2; i++) {
    fc1a:	1dfb      	adds	r3, r7, #7
    fc1c:	2201      	movs	r2, #1
    fc1e:	701a      	strb	r2, [r3, #0]
    fc20:	e015      	b.n	fc4e <PHY_PacketReceieved+0xf6>
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    fc22:	1dbb      	adds	r3, r7, #6
    fc24:	781a      	ldrb	r2, [r3, #0]
    fc26:	1dfb      	adds	r3, r7, #7
    fc28:	781b      	ldrb	r3, [r3, #0]
    fc2a:	3b01      	subs	r3, #1
    fc2c:	1df9      	adds	r1, r7, #7
    fc2e:	7809      	ldrb	r1, [r1, #0]
    fc30:	4836      	ldr	r0, [pc, #216]	; (fd0c <PHY_PacketReceieved+0x1b4>)
    fc32:	5c44      	ldrb	r4, [r0, r1]
    fc34:	4932      	ldr	r1, [pc, #200]	; (fd00 <PHY_PacketReceieved+0x1a8>)
    fc36:	204e      	movs	r0, #78	; 0x4e
    fc38:	4342      	muls	r2, r0
    fc3a:	188a      	adds	r2, r1, r2
    fc3c:	18d3      	adds	r3, r2, r3
    fc3e:	3301      	adds	r3, #1
    fc40:	1c22      	adds	r2, r4, #0
    fc42:	701a      	strb	r2, [r3, #0]
                for (i = 1; i <= size + 2; i++) {
    fc44:	1dfb      	adds	r3, r7, #7
    fc46:	781a      	ldrb	r2, [r3, #0]
    fc48:	1dfb      	adds	r3, r7, #7
    fc4a:	3201      	adds	r2, #1
    fc4c:	701a      	strb	r2, [r3, #0]
    fc4e:	1dfb      	adds	r3, r7, #7
    fc50:	781a      	ldrb	r2, [r3, #0]
    fc52:	1d3b      	adds	r3, r7, #4
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	3302      	adds	r3, #2
    fc58:	429a      	cmp	r2, r3
    fc5a:	dde2      	ble.n	fc22 <PHY_PacketReceieved+0xca>
                }
            }
            Received_LQI_Val = phyRxBuffer[i - 2];
    fc5c:	1dfb      	adds	r3, r7, #7
    fc5e:	781b      	ldrb	r3, [r3, #0]
    fc60:	3b02      	subs	r3, #2
    fc62:	4a2a      	ldr	r2, [pc, #168]	; (fd0c <PHY_PacketReceieved+0x1b4>)
    fc64:	5cd2      	ldrb	r2, [r2, r3]
    fc66:	4b2b      	ldr	r3, [pc, #172]	; (fd14 <PHY_PacketReceieved+0x1bc>)
    fc68:	701a      	strb	r2, [r3, #0]

            phyWaitState(TRX_STATUS_RX_AACK_ON);
    fc6a:	2016      	movs	r0, #22
    fc6c:	4b2a      	ldr	r3, [pc, #168]	; (fd18 <PHY_PacketReceieved+0x1c0>)
    fc6e:	4798      	blx	r3
    fc70:	e03e      	b.n	fcf0 <PHY_PacketReceieved+0x198>
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
    fc72:	4b21      	ldr	r3, [pc, #132]	; (fcf8 <PHY_PacketReceieved+0x1a0>)
    fc74:	781b      	ldrb	r3, [r3, #0]
    fc76:	2b03      	cmp	r3, #3
    fc78:	d13a      	bne.n	fcf0 <PHY_PacketReceieved+0x198>
            uint8_t status
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
    fc7a:	2002      	movs	r0, #2
    fc7c:	4b1f      	ldr	r3, [pc, #124]	; (fcfc <PHY_PacketReceieved+0x1a4>)
    fc7e:	4798      	blx	r3
    fc80:	0003      	movs	r3, r0
    fc82:	095b      	lsrs	r3, r3, #5
    fc84:	b2da      	uxtb	r2, r3
            uint8_t status
    fc86:	1d7b      	adds	r3, r7, #5
    fc88:	2107      	movs	r1, #7
    fc8a:	400a      	ands	r2, r1
    fc8c:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_FAIL = 0;
    fc8e:	4a20      	ldr	r2, [pc, #128]	; (fd10 <PHY_PacketReceieved+0x1b8>)
    fc90:	7813      	ldrb	r3, [r2, #0]
    fc92:	2104      	movs	r1, #4
    fc94:	438b      	bics	r3, r1
    fc96:	7013      	strb	r3, [r2, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
    fc98:	4a1d      	ldr	r2, [pc, #116]	; (fd10 <PHY_PacketReceieved+0x1b8>)
    fc9a:	7813      	ldrb	r3, [r2, #0]
    fc9c:	2102      	movs	r1, #2
    fc9e:	438b      	bics	r3, r1
    fca0:	7013      	strb	r3, [r2, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    fca2:	1d7b      	adds	r3, r7, #5
    fca4:	781b      	ldrb	r3, [r3, #0]
    fca6:	2b00      	cmp	r3, #0
    fca8:	d103      	bne.n	fcb2 <PHY_PacketReceieved+0x15a>
                status = PHY_STATUS_SUCCESS;
    fcaa:	1d7b      	adds	r3, r7, #5
    fcac:	2200      	movs	r2, #0
    fcae:	701a      	strb	r2, [r3, #0]
    fcb0:	e017      	b.n	fce2 <PHY_PacketReceieved+0x18a>
            }
            else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status) {
    fcb2:	1d7b      	adds	r3, r7, #5
    fcb4:	781b      	ldrb	r3, [r3, #0]
    fcb6:	2b03      	cmp	r3, #3
    fcb8:	d103      	bne.n	fcc2 <PHY_PacketReceieved+0x16a>
                status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    fcba:	1d7b      	adds	r3, r7, #5
    fcbc:	2201      	movs	r2, #1
    fcbe:	701a      	strb	r2, [r3, #0]
    fcc0:	e00f      	b.n	fce2 <PHY_PacketReceieved+0x18a>
            }
            else if (TRAC_STATUS_NO_ACK == status) {
    fcc2:	1d7b      	adds	r3, r7, #5
    fcc4:	781b      	ldrb	r3, [r3, #0]
    fcc6:	2b05      	cmp	r3, #5
    fcc8:	d108      	bne.n	fcdc <PHY_PacketReceieved+0x184>
                status = PHY_STATUS_NO_ACK;
    fcca:	1d7b      	adds	r3, r7, #5
    fccc:	2202      	movs	r2, #2
    fcce:	701a      	strb	r2, [r3, #0]
                trx_status.bits.TX_FAIL = 1;
    fcd0:	4a0f      	ldr	r2, [pc, #60]	; (fd10 <PHY_PacketReceieved+0x1b8>)
    fcd2:	7813      	ldrb	r3, [r2, #0]
    fcd4:	2104      	movs	r1, #4
    fcd6:	430b      	orrs	r3, r1
    fcd8:	7013      	strb	r3, [r2, #0]
    fcda:	e002      	b.n	fce2 <PHY_PacketReceieved+0x18a>
            }
            else {
                status = PHY_STATUS_ERROR;
    fcdc:	1d7b      	adds	r3, r7, #5
    fcde:	2203      	movs	r2, #3
    fce0:	701a      	strb	r2, [r3, #0]
            }

            phySetRxState();
    fce2:	4b0e      	ldr	r3, [pc, #56]	; (fd1c <PHY_PacketReceieved+0x1c4>)
    fce4:	4798      	blx	r3
            phyState = PHY_STATE_IDLE;
    fce6:	4b04      	ldr	r3, [pc, #16]	; (fcf8 <PHY_PacketReceieved+0x1a0>)
    fce8:	2201      	movs	r2, #1
    fcea:	701a      	strb	r2, [r3, #0]
    fcec:	e000      	b.n	fcf0 <PHY_PacketReceieved+0x198>
        return;
    fcee:	46c0      	nop			; (mov r8, r8)
        }
    }
    fcf0:	46bd      	mov	sp, r7
    fcf2:	b003      	add	sp, #12
    fcf4:	bd90      	pop	{r4, r7, pc}
    fcf6:	46c0      	nop			; (mov r8, r8)
    fcf8:	2000073e 	.word	0x2000073e
    fcfc:	0000f13d 	.word	0x0000f13d
    fd00:	20000dd8 	.word	0x20000dd8
    fd04:	20000dc4 	.word	0x20000dc4
    fd08:	000096dd 	.word	0x000096dd
    fd0c:	20000740 	.word	0x20000740
    fd10:	2000140c 	.word	0x2000140c
    fd14:	20000d91 	.word	0x20000d91
    fd18:	0000f16d 	.word	0x0000f16d
    fd1c:	0000f19d 	.word	0x0000f19d

0000fd20 <Total_Connections>:
/************************ VARIABLES ********************************/
uint8_t myLongAddress[8];

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
    fd20:	b580      	push	{r7, lr}
    fd22:	b082      	sub	sp, #8
    fd24:	af00      	add	r7, sp, #0
    uint8_t count=0 , i;
    fd26:	1dfb      	adds	r3, r7, #7
    fd28:	2200      	movs	r2, #0
    fd2a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<CONNECTION_SIZE;i++)
    fd2c:	1dbb      	adds	r3, r7, #6
    fd2e:	2200      	movs	r2, #0
    fd30:	701a      	strb	r2, [r3, #0]
    fd32:	e019      	b.n	fd68 <Total_Connections+0x48>
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
    fd34:	1dbb      	adds	r3, r7, #6
    fd36:	781a      	ldrb	r2, [r3, #0]
    fd38:	4910      	ldr	r1, [pc, #64]	; (fd7c <Total_Connections+0x5c>)
    fd3a:	2008      	movs	r0, #8
    fd3c:	0013      	movs	r3, r2
    fd3e:	009b      	lsls	r3, r3, #2
    fd40:	189b      	adds	r3, r3, r2
    fd42:	005b      	lsls	r3, r3, #1
    fd44:	18cb      	adds	r3, r1, r3
    fd46:	181b      	adds	r3, r3, r0
    fd48:	785b      	ldrb	r3, [r3, #1]
    fd4a:	061b      	lsls	r3, r3, #24
    fd4c:	0fdb      	lsrs	r3, r3, #31
    fd4e:	b2db      	uxtb	r3, r3
    fd50:	2b00      	cmp	r3, #0
    fd52:	d004      	beq.n	fd5e <Total_Connections+0x3e>
        {
            count++;
    fd54:	1dfb      	adds	r3, r7, #7
    fd56:	781a      	ldrb	r2, [r3, #0]
    fd58:	1dfb      	adds	r3, r7, #7
    fd5a:	3201      	adds	r2, #1
    fd5c:	701a      	strb	r2, [r3, #0]
    for (i=0;i<CONNECTION_SIZE;i++)
    fd5e:	1dbb      	adds	r3, r7, #6
    fd60:	781a      	ldrb	r2, [r3, #0]
    fd62:	1dbb      	adds	r3, r7, #6
    fd64:	3201      	adds	r2, #1
    fd66:	701a      	strb	r2, [r3, #0]
    fd68:	1dbb      	adds	r3, r7, #6
    fd6a:	781b      	ldrb	r3, [r3, #0]
    fd6c:	2b13      	cmp	r3, #19
    fd6e:	d9e1      	bls.n	fd34 <Total_Connections+0x14>
        }
    #endif      
    }
    return count;
    fd70:	1dfb      	adds	r3, r7, #7
    fd72:	781b      	ldrb	r3, [r3, #0]
}
    fd74:	0018      	movs	r0, r3
    fd76:	46bd      	mov	sp, r7
    fd78:	b002      	add	sp, #8
    fd7a:	bd80      	pop	{r7, pc}
    fd7c:	20001414 	.word	0x20001414

0000fd80 <P2PTasks>:
 * Side Effects:    The stack receives, handles, buffers, and transmits 
 *                  packets.  It also handles all of the joining 
 * 
 ********************************************************************/
void P2PTasks(void)
{
    fd80:	b590      	push	{r4, r7, lr}
    fd82:	b085      	sub	sp, #20
    fd84:	af02      	add	r7, sp, #8
            TimeSyncSlot = 0;
        }    
    #endif

  // Check if transceiver receive any message.
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    fd86:	4bd3      	ldr	r3, [pc, #844]	; (100d4 <P2PTasks+0x354>)
    fd88:	781b      	ldrb	r3, [r3, #0]
    fd8a:	071b      	lsls	r3, r3, #28
    fd8c:	0fdb      	lsrs	r3, r3, #31
    fd8e:	b2db      	uxtb	r3, r3
    fd90:	2b00      	cmp	r3, #0
    fd92:	d000      	beq.n	fd96 <P2PTasks+0x16>
    fd94:	e286      	b.n	102a4 <P2PTasks+0x524>
    fd96:	4bd0      	ldr	r3, [pc, #832]	; (100d8 <P2PTasks+0x358>)
    fd98:	4798      	blx	r3
    fd9a:	1e03      	subs	r3, r0, #0
    fd9c:	d100      	bne.n	fda0 <P2PTasks+0x20>
    fd9e:	e281      	b.n	102a4 <P2PTasks+0x524>
    {
        rxMessage.flags.Val = 0;
    fda0:	4bce      	ldr	r3, [pc, #824]	; (100dc <P2PTasks+0x35c>)
    fda2:	2200      	movs	r2, #0
    fda4:	701a      	strb	r2, [r3, #0]
        //rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
        
            temp_bit = MACRxPacket.flags.bits.broadcast;
    fda6:	4bce      	ldr	r3, [pc, #824]	; (100e0 <P2PTasks+0x360>)
    fda8:	781b      	ldrb	r3, [r3, #0]
    fdaa:	075b      	lsls	r3, r3, #29
    fdac:	0fdb      	lsrs	r3, r3, #31
    fdae:	b2db      	uxtb	r3, r3
    fdb0:	001a      	movs	r2, r3
    fdb2:	4bcc      	ldr	r3, [pc, #816]	; (100e4 <P2PTasks+0x364>)
    fdb4:	701a      	strb	r2, [r3, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    fdb6:	4bcb      	ldr	r3, [pc, #812]	; (100e4 <P2PTasks+0x364>)
    fdb8:	781b      	ldrb	r3, [r3, #0]
    fdba:	1c1a      	adds	r2, r3, #0
    fdbc:	2303      	movs	r3, #3
    fdbe:	4013      	ands	r3, r2
    fdc0:	b2da      	uxtb	r2, r3
    fdc2:	4bc6      	ldr	r3, [pc, #792]	; (100dc <P2PTasks+0x35c>)
    fdc4:	2103      	movs	r1, #3
    fdc6:	400a      	ands	r2, r1
    fdc8:	0010      	movs	r0, r2
    fdca:	781a      	ldrb	r2, [r3, #0]
    fdcc:	2103      	movs	r1, #3
    fdce:	438a      	bics	r2, r1
    fdd0:	1c11      	adds	r1, r2, #0
    fdd2:	1c02      	adds	r2, r0, #0
    fdd4:	430a      	orrs	r2, r1
    fdd6:	701a      	strb	r2, [r3, #0]

        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    fdd8:	4bc1      	ldr	r3, [pc, #772]	; (100e0 <P2PTasks+0x360>)
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	071b      	lsls	r3, r3, #28
    fdde:	0fdb      	lsrs	r3, r3, #31
    fde0:	b2da      	uxtb	r2, r3
    fde2:	4bbe      	ldr	r3, [pc, #760]	; (100dc <P2PTasks+0x35c>)
    fde4:	2101      	movs	r1, #1
    fde6:	400a      	ands	r2, r1
    fde8:	00d0      	lsls	r0, r2, #3
    fdea:	781a      	ldrb	r2, [r3, #0]
    fdec:	2108      	movs	r1, #8
    fdee:	438a      	bics	r2, r1
    fdf0:	1c11      	adds	r1, r2, #0
    fdf2:	1c02      	adds	r2, r0, #0
    fdf4:	430a      	orrs	r2, r1
    fdf6:	701a      	strb	r2, [r3, #0]
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    fdf8:	4bb9      	ldr	r3, [pc, #740]	; (100e0 <P2PTasks+0x360>)
    fdfa:	781b      	ldrb	r3, [r3, #0]
    fdfc:	2203      	movs	r2, #3
    fdfe:	4013      	ands	r3, r2
    fe00:	b2db      	uxtb	r3, r3
    fe02:	3b01      	subs	r3, #1
    fe04:	425a      	negs	r2, r3
    fe06:	4153      	adcs	r3, r2
    fe08:	b2da      	uxtb	r2, r3
    fe0a:	4bb4      	ldr	r3, [pc, #720]	; (100dc <P2PTasks+0x35c>)
    fe0c:	2101      	movs	r1, #1
    fe0e:	400a      	ands	r2, r1
    fe10:	0150      	lsls	r0, r2, #5
    fe12:	781a      	ldrb	r2, [r3, #0]
    fe14:	2120      	movs	r1, #32
    fe16:	438a      	bics	r2, r1
    fe18:	1c11      	adds	r1, r2, #0
    fe1a:	1c02      	adds	r2, r0, #0
    fe1c:	430a      	orrs	r2, r1
    fe1e:	701a      	strb	r2, [r3, #0]
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    fe20:	4baf      	ldr	r3, [pc, #700]	; (100e0 <P2PTasks+0x360>)
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	061b      	lsls	r3, r3, #24
    fe26:	0fdb      	lsrs	r3, r3, #31
    fe28:	b2da      	uxtb	r2, r3
    fe2a:	4bac      	ldr	r3, [pc, #688]	; (100dc <P2PTasks+0x35c>)
    fe2c:	2101      	movs	r1, #1
    fe2e:	400a      	ands	r2, r1
    fe30:	0190      	lsls	r0, r2, #6
    fe32:	781a      	ldrb	r2, [r3, #0]
    fe34:	2140      	movs	r1, #64	; 0x40
    fe36:	438a      	bics	r2, r1
    fe38:	1c11      	adds	r1, r2, #0
    fe3a:	1c02      	adds	r2, r0, #0
    fe3c:	430a      	orrs	r2, r1
    fe3e:	701a      	strb	r2, [r3, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    fe40:	4ba7      	ldr	r3, [pc, #668]	; (100e0 <P2PTasks+0x360>)
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	227f      	movs	r2, #127	; 0x7f
    fe46:	4393      	bics	r3, r2
    fe48:	b2db      	uxtb	r3, r3
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	d003      	beq.n	fe56 <P2PTasks+0xd6>
        {
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    fe4e:	4ba4      	ldr	r3, [pc, #656]	; (100e0 <P2PTasks+0x360>)
    fe50:	685a      	ldr	r2, [r3, #4]
    fe52:	4ba2      	ldr	r3, [pc, #648]	; (100dc <P2PTasks+0x35c>)
    fe54:	605a      	str	r2, [r3, #4]
        }
        #if defined(IEEE_802_15_4) && !defined(TARGET_SMALL)
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    fe56:	4ba2      	ldr	r3, [pc, #648]	; (100e0 <P2PTasks+0x360>)
    fe58:	8a1a      	ldrh	r2, [r3, #16]
    fe5a:	4ba0      	ldr	r3, [pc, #640]	; (100dc <P2PTasks+0x35c>)
    fe5c:	805a      	strh	r2, [r3, #2]
        #endif

        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    fe5e:	4ba0      	ldr	r3, [pc, #640]	; (100e0 <P2PTasks+0x360>)
    fe60:	7b1a      	ldrb	r2, [r3, #12]
    fe62:	4b9e      	ldr	r3, [pc, #632]	; (100dc <P2PTasks+0x35c>)
    fe64:	731a      	strb	r2, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    fe66:	4b9e      	ldr	r3, [pc, #632]	; (100e0 <P2PTasks+0x360>)
    fe68:	689a      	ldr	r2, [r3, #8]
    fe6a:	4b9c      	ldr	r3, [pc, #624]	; (100dc <P2PTasks+0x35c>)
    fe6c:	609a      	str	r2, [r3, #8]
               
        
        /************************/
      
        #ifndef TARGET_SMALL
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    fe6e:	4b9c      	ldr	r3, [pc, #624]	; (100e0 <P2PTasks+0x360>)
    fe70:	7b9a      	ldrb	r2, [r3, #14]
    fe72:	4b9a      	ldr	r3, [pc, #616]	; (100dc <P2PTasks+0x35c>)
    fe74:	739a      	strb	r2, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    fe76:	4b9a      	ldr	r3, [pc, #616]	; (100e0 <P2PTasks+0x360>)
    fe78:	7b5a      	ldrb	r2, [r3, #13]
    fe7a:	4b98      	ldr	r3, [pc, #608]	; (100dc <P2PTasks+0x35c>)
    fe7c:	735a      	strb	r2, [r3, #13]
        #endif

        if( rxMessage.flags.bits.command )
    fe7e:	4b97      	ldr	r3, [pc, #604]	; (100dc <P2PTasks+0x35c>)
    fe80:	781b      	ldrb	r3, [r3, #0]
    fe82:	2220      	movs	r2, #32
    fe84:	4013      	ands	r3, r2
    fe86:	b2db      	uxtb	r3, r3
    fe88:	2b00      	cmp	r3, #0
    fe8a:	d100      	bne.n	fe8e <P2PTasks+0x10e>
    fe8c:	e1ec      	b.n	10268 <P2PTasks+0x4e8>
        {
            // if comes here, we know it is a command frame
            switch( rxMessage.Payload[0] )
    fe8e:	4b93      	ldr	r3, [pc, #588]	; (100dc <P2PTasks+0x35c>)
    fe90:	689b      	ldr	r3, [r3, #8]
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	3b81      	subs	r3, #129	; 0x81
    fe96:	2b16      	cmp	r3, #22
    fe98:	d900      	bls.n	fe9c <P2PTasks+0x11c>
    fe9a:	e1de      	b.n	1025a <P2PTasks+0x4da>
    fe9c:	009a      	lsls	r2, r3, #2
    fe9e:	4b92      	ldr	r3, [pc, #584]	; (100e8 <P2PTasks+0x368>)
    fea0:	18d3      	adds	r3, r2, r3
    fea2:	681b      	ldr	r3, [r3, #0]
    fea4:	469f      	mov	pc, r3
                            #ifdef ENABLE_SLEEP
                                MiMAC_DiscardPacket();
                                break;
                            #else
                                
                                uint8_t status = STATUS_SUCCESS;
    fea6:	1dbb      	adds	r3, r7, #6
    fea8:	2200      	movs	r2, #0
    feaa:	701a      	strb	r2, [r3, #0]
                                
                                // if channel does not math, it may be a 
                                // sub-harmonics signal, ignore the request
                                if( currentChannel != rxMessage.Payload[1] )
    feac:	4b8b      	ldr	r3, [pc, #556]	; (100dc <P2PTasks+0x35c>)
    feae:	689b      	ldr	r3, [r3, #8]
    feb0:	3301      	adds	r3, #1
    feb2:	781a      	ldrb	r2, [r3, #0]
    feb4:	4b8d      	ldr	r3, [pc, #564]	; (100ec <P2PTasks+0x36c>)
    feb6:	781b      	ldrb	r3, [r3, #0]
    feb8:	429a      	cmp	r2, r3
    feba:	d002      	beq.n	fec2 <P2PTasks+0x142>
                                {
                                    MiMAC_DiscardPacket();
    febc:	4b8c      	ldr	r3, [pc, #560]	; (100f0 <P2PTasks+0x370>)
    febe:	4798      	blx	r3
                                    break;
    fec0:	e1d7      	b.n	10272 <P2PTasks+0x4f2>
                                }
                                
                                // if new connection is not allowed, ignore 
                                // the request
                                if( ConnMode == DISABLE_ALL_CONN )
    fec2:	4b8c      	ldr	r3, [pc, #560]	; (100f4 <P2PTasks+0x374>)
    fec4:	781b      	ldrb	r3, [r3, #0]
    fec6:	2b03      	cmp	r3, #3
    fec8:	d102      	bne.n	fed0 <P2PTasks+0x150>
                                { 
                                    MiMAC_DiscardPacket();
    feca:	4b89      	ldr	r3, [pc, #548]	; (100f0 <P2PTasks+0x370>)
    fecc:	4798      	blx	r3
                                    break;
    fece:	e1d0      	b.n	10272 <P2PTasks+0x4f2>
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    fed0:	4b82      	ldr	r3, [pc, #520]	; (100dc <P2PTasks+0x35c>)
    fed2:	885b      	ldrh	r3, [r3, #2]
    fed4:	4a88      	ldr	r2, [pc, #544]	; (100f8 <P2PTasks+0x378>)
    fed6:	4293      	cmp	r3, r2
    fed8:	d00d      	beq.n	fef6 <P2PTasks+0x176>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    feda:	4b80      	ldr	r3, [pc, #512]	; (100dc <P2PTasks+0x35c>)
    fedc:	885a      	ldrh	r2, [r3, #2]
    fede:	4b87      	ldr	r3, [pc, #540]	; (100fc <P2PTasks+0x37c>)
    fee0:	881b      	ldrh	r3, [r3, #0]
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    fee2:	429a      	cmp	r2, r3
    fee4:	d007      	beq.n	fef6 <P2PTasks+0x176>
                                        rxMessage.PayloadSize > 2)
    fee6:	4b7d      	ldr	r3, [pc, #500]	; (100dc <P2PTasks+0x35c>)
    fee8:	7b1b      	ldrb	r3, [r3, #12]
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    feea:	2b02      	cmp	r3, #2
    feec:	d903      	bls.n	fef6 <P2PTasks+0x176>
                                    {
                                        status = STATUS_NOT_SAME_PAN;
    feee:	1dbb      	adds	r3, r7, #6
    fef0:	22f2      	movs	r2, #242	; 0xf2
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	e004      	b.n	ff00 <P2PTasks+0x180>
                                    else
                                #endif
                                {
                                    // request accepted, try to add the requesting
                                    // device into P2P Connection Entry
                                    status = AddConnection();
    fef6:	1dbc      	adds	r4, r7, #6
    fef8:	4b81      	ldr	r3, [pc, #516]	; (10100 <P2PTasks+0x380>)
    fefa:	4798      	blx	r3
    fefc:	0003      	movs	r3, r0
    fefe:	7023      	strb	r3, [r4, #0]

                                        }
                                    }
                                #endif
							
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    ff00:	4b7c      	ldr	r3, [pc, #496]	; (100f4 <P2PTasks+0x374>)
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	2b01      	cmp	r3, #1
    ff06:	d10a      	bne.n	ff1e <P2PTasks+0x19e>
    ff08:	1dbb      	adds	r3, r7, #6
    ff0a:	781b      	ldrb	r3, [r3, #0]
    ff0c:	2b01      	cmp	r3, #1
    ff0e:	d006      	beq.n	ff1e <P2PTasks+0x19e>
    ff10:	1dbb      	adds	r3, r7, #6
    ff12:	781b      	ldrb	r3, [r3, #0]
    ff14:	2b02      	cmp	r3, #2
    ff16:	d002      	beq.n	ff1e <P2PTasks+0x19e>
                                {
                                    status = STATUS_NOT_PERMITTED;
    ff18:	1dbb      	adds	r3, r7, #6
    ff1a:	22f3      	movs	r2, #243	; 0xf3
    ff1c:	701a      	strb	r2, [r3, #0]
                                    status = STATUS_NOT_PERMITTED;
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
    ff1e:	4b79      	ldr	r3, [pc, #484]	; (10104 <P2PTasks+0x384>)
    ff20:	2200      	movs	r2, #0
    ff22:	701a      	strb	r2, [r3, #0]
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
    ff24:	4b77      	ldr	r3, [pc, #476]	; (10104 <P2PTasks+0x384>)
    ff26:	781b      	ldrb	r3, [r3, #0]
    ff28:	1c5a      	adds	r2, r3, #1
    ff2a:	b2d1      	uxtb	r1, r2
    ff2c:	4a75      	ldr	r2, [pc, #468]	; (10104 <P2PTasks+0x384>)
    ff2e:	7011      	strb	r1, [r2, #0]
    ff30:	001a      	movs	r2, r3
    ff32:	4b75      	ldr	r3, [pc, #468]	; (10108 <P2PTasks+0x388>)
    ff34:	2191      	movs	r1, #145	; 0x91
    ff36:	5499      	strb	r1, [r3, r2]
                                MiApp_WriteData(status);
    ff38:	4b72      	ldr	r3, [pc, #456]	; (10104 <P2PTasks+0x384>)
    ff3a:	781b      	ldrb	r3, [r3, #0]
    ff3c:	1c5a      	adds	r2, r3, #1
    ff3e:	b2d1      	uxtb	r1, r2
    ff40:	4a70      	ldr	r2, [pc, #448]	; (10104 <P2PTasks+0x384>)
    ff42:	7011      	strb	r1, [r2, #0]
    ff44:	0019      	movs	r1, r3
    ff46:	4b70      	ldr	r3, [pc, #448]	; (10108 <P2PTasks+0x388>)
    ff48:	1dba      	adds	r2, r7, #6
    ff4a:	7812      	ldrb	r2, [r2, #0]
    ff4c:	545a      	strb	r2, [r3, r1]
                                MiApp_WriteData(MyindexinPC);
    ff4e:	4b6d      	ldr	r3, [pc, #436]	; (10104 <P2PTasks+0x384>)
    ff50:	781b      	ldrb	r3, [r3, #0]
    ff52:	1c5a      	adds	r2, r3, #1
    ff54:	b2d1      	uxtb	r1, r2
    ff56:	4a6b      	ldr	r2, [pc, #428]	; (10104 <P2PTasks+0x384>)
    ff58:	7011      	strb	r1, [r2, #0]
    ff5a:	001a      	movs	r2, r3
    ff5c:	4b6b      	ldr	r3, [pc, #428]	; (1010c <P2PTasks+0x38c>)
    ff5e:	7819      	ldrb	r1, [r3, #0]
    ff60:	4b69      	ldr	r3, [pc, #420]	; (10108 <P2PTasks+0x388>)
    ff62:	5499      	strb	r1, [r3, r2]
								#if defined (R)
									MiApp_WriteData(0xA1); // I'm a Router
								#endif
								#if defined (PC)
									MiApp_WriteData(0xB1); // I'm the PC
    ff64:	4b67      	ldr	r3, [pc, #412]	; (10104 <P2PTasks+0x384>)
    ff66:	781b      	ldrb	r3, [r3, #0]
    ff68:	1c5a      	adds	r2, r3, #1
    ff6a:	b2d1      	uxtb	r1, r2
    ff6c:	4a65      	ldr	r2, [pc, #404]	; (10104 <P2PTasks+0x384>)
    ff6e:	7011      	strb	r1, [r2, #0]
    ff70:	001a      	movs	r2, r3
    ff72:	4b65      	ldr	r3, [pc, #404]	; (10108 <P2PTasks+0x388>)
    ff74:	21b1      	movs	r1, #177	; 0xb1
    ff76:	5499      	strb	r1, [r3, r2]
								#endif
                                if( status == STATUS_SUCCESS ||
    ff78:	1dbb      	adds	r3, r7, #6
    ff7a:	781b      	ldrb	r3, [r3, #0]
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d003      	beq.n	ff88 <P2PTasks+0x208>
    ff80:	1dbb      	adds	r3, r7, #6
    ff82:	781b      	ldrb	r3, [r3, #0]
    ff84:	2b01      	cmp	r3, #1
    ff86:	d10a      	bne.n	ff9e <P2PTasks+0x21e>
                                    status == STATUS_EXISTS )
                                {
                                    MiApp_WriteData(P2PCapacityInfo);
    ff88:	4b5e      	ldr	r3, [pc, #376]	; (10104 <P2PTasks+0x384>)
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	1c5a      	adds	r2, r3, #1
    ff8e:	b2d1      	uxtb	r1, r2
    ff90:	4a5c      	ldr	r2, [pc, #368]	; (10104 <P2PTasks+0x384>)
    ff92:	7011      	strb	r1, [r2, #0]
    ff94:	001a      	movs	r2, r3
    ff96:	4b5e      	ldr	r3, [pc, #376]	; (10110 <P2PTasks+0x390>)
    ff98:	7819      	ldrb	r1, [r3, #0]
    ff9a:	4b5b      	ldr	r3, [pc, #364]	; (10108 <P2PTasks+0x388>)
    ff9c:	5499      	strb	r1, [r3, r2]
                                            MiApp_WriteData(AdditionalNodeID[i]);
                                        }
                                    #endif
                                }
                                
                                MiMAC_DiscardPacket();
    ff9e:	4b54      	ldr	r3, [pc, #336]	; (100f0 <P2PTasks+0x370>)
    ffa0:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                    #endif
                                #else
                                        
                                    #if defined(IEEE_802_15_4)
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    ffa2:	4b4e      	ldr	r3, [pc, #312]	; (100dc <P2PTasks+0x35c>)
    ffa4:	6858      	ldr	r0, [r3, #4]
    ffa6:	4b4d      	ldr	r3, [pc, #308]	; (100dc <P2PTasks+0x35c>)
    ffa8:	781b      	ldrb	r3, [r3, #0]
    ffaa:	071b      	lsls	r3, r3, #28
    ffac:	0fdb      	lsrs	r3, r3, #31
    ffae:	b2db      	uxtb	r3, r3
    ffb0:	1e5a      	subs	r2, r3, #1
    ffb2:	4193      	sbcs	r3, r2
    ffb4:	b2db      	uxtb	r3, r3
    ffb6:	4a49      	ldr	r2, [pc, #292]	; (100dc <P2PTasks+0x35c>)
    ffb8:	8851      	ldrh	r1, [r2, #2]
    ffba:	9300      	str	r3, [sp, #0]
    ffbc:	2301      	movs	r3, #1
    ffbe:	0002      	movs	r2, r0
    ffc0:	2000      	movs	r0, #0
    ffc2:	4c54      	ldr	r4, [pc, #336]	; (10114 <P2PTasks+0x394>)
    ffc4:	47a0      	blx	r4
                                  MiMAC_DiscardPacket();
                              }
							#endif
                              
                        }
                        break; 
    ffc6:	e154      	b.n	10272 <P2PTasks+0x4f2>
				#endif
                    case CMD_P2P_ACTIVE_SCAN_REQUEST:
                        {
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    ffc8:	4b4a      	ldr	r3, [pc, #296]	; (100f4 <P2PTasks+0x374>)
    ffca:	781b      	ldrb	r3, [r3, #0]
    ffcc:	2b02      	cmp	r3, #2
    ffce:	d902      	bls.n	ffd6 <P2PTasks+0x256>
                            {
                                MiMAC_DiscardPacket();
    ffd0:	4b47      	ldr	r3, [pc, #284]	; (100f0 <P2PTasks+0x370>)
    ffd2:	4798      	blx	r3
                                break;
    ffd4:	e14d      	b.n	10272 <P2PTasks+0x4f2>
                            }
                            if( currentChannel != rxMessage.Payload[1] )
    ffd6:	4b41      	ldr	r3, [pc, #260]	; (100dc <P2PTasks+0x35c>)
    ffd8:	689b      	ldr	r3, [r3, #8]
    ffda:	3301      	adds	r3, #1
    ffdc:	781a      	ldrb	r2, [r3, #0]
    ffde:	4b43      	ldr	r3, [pc, #268]	; (100ec <P2PTasks+0x36c>)
    ffe0:	781b      	ldrb	r3, [r3, #0]
    ffe2:	429a      	cmp	r2, r3
    ffe4:	d002      	beq.n	ffec <P2PTasks+0x26c>
                            {
                                MiMAC_DiscardPacket();
    ffe6:	4b42      	ldr	r3, [pc, #264]	; (100f0 <P2PTasks+0x370>)
    ffe8:	4798      	blx	r3
                                break;
    ffea:	e142      	b.n	10272 <P2PTasks+0x4f2>
                            }
                            
                            MiApp_FlushTx();
    ffec:	4b45      	ldr	r3, [pc, #276]	; (10104 <P2PTasks+0x384>)
    ffee:	2200      	movs	r2, #0
    fff0:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    fff2:	4b44      	ldr	r3, [pc, #272]	; (10104 <P2PTasks+0x384>)
    fff4:	781b      	ldrb	r3, [r3, #0]
    fff6:	1c5a      	adds	r2, r3, #1
    fff8:	b2d1      	uxtb	r1, r2
    fffa:	4a42      	ldr	r2, [pc, #264]	; (10104 <P2PTasks+0x384>)
    fffc:	7011      	strb	r1, [r2, #0]
    fffe:	001a      	movs	r2, r3
   10000:	4b41      	ldr	r3, [pc, #260]	; (10108 <P2PTasks+0x388>)
   10002:	2197      	movs	r1, #151	; 0x97
   10004:	5499      	strb	r1, [r3, r2]
                            MiApp_WriteData(P2PCapacityInfo);
   10006:	4b3f      	ldr	r3, [pc, #252]	; (10104 <P2PTasks+0x384>)
   10008:	781b      	ldrb	r3, [r3, #0]
   1000a:	1c5a      	adds	r2, r3, #1
   1000c:	b2d1      	uxtb	r1, r2
   1000e:	4a3d      	ldr	r2, [pc, #244]	; (10104 <P2PTasks+0x384>)
   10010:	7011      	strb	r1, [r2, #0]
   10012:	001a      	movs	r2, r3
   10014:	4b3e      	ldr	r3, [pc, #248]	; (10110 <P2PTasks+0x390>)
   10016:	7819      	ldrb	r1, [r3, #0]
   10018:	4b3b      	ldr	r3, [pc, #236]	; (10108 <P2PTasks+0x388>)
   1001a:	5499      	strb	r1, [r3, r2]
                                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                                {
                                    MiApp_WriteData(AdditionalNodeID[i]);
                                }
                            #endif
                            MiMAC_DiscardPacket();
   1001c:	4b34      	ldr	r3, [pc, #208]	; (100f0 <P2PTasks+0x370>)
   1001e:	4798      	blx	r3
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
   10020:	4b2e      	ldr	r3, [pc, #184]	; (100dc <P2PTasks+0x35c>)
   10022:	6858      	ldr	r0, [r3, #4]
   10024:	4b2d      	ldr	r3, [pc, #180]	; (100dc <P2PTasks+0x35c>)
   10026:	781b      	ldrb	r3, [r3, #0]
   10028:	071b      	lsls	r3, r3, #28
   1002a:	0fdb      	lsrs	r3, r3, #31
   1002c:	b2db      	uxtb	r3, r3
   1002e:	1e5a      	subs	r2, r3, #1
   10030:	4193      	sbcs	r3, r2
   10032:	b2db      	uxtb	r3, r3
   10034:	4a29      	ldr	r2, [pc, #164]	; (100dc <P2PTasks+0x35c>)
   10036:	8851      	ldrh	r1, [r2, #2]
   10038:	9300      	str	r3, [sp, #0]
   1003a:	2301      	movs	r3, #1
   1003c:	0002      	movs	r2, r0
   1003e:	2000      	movs	r0, #0
   10040:	4c34      	ldr	r4, [pc, #208]	; (10114 <P2PTasks+0x394>)
   10042:	47a0      	blx	r4
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif
                        }
                        break;
   10044:	e115      	b.n	10272 <P2PTasks+0x4f2>
                    
                    
                    #ifndef TARGET_SMALL    
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
   10046:	4b2f      	ldr	r3, [pc, #188]	; (10104 <P2PTasks+0x384>)
   10048:	2200      	movs	r2, #0
   1004a:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
   1004c:	4b2d      	ldr	r3, [pc, #180]	; (10104 <P2PTasks+0x384>)
   1004e:	781b      	ldrb	r3, [r3, #0]
   10050:	1c5a      	adds	r2, r3, #1
   10052:	b2d1      	uxtb	r1, r2
   10054:	4a2b      	ldr	r2, [pc, #172]	; (10104 <P2PTasks+0x384>)
   10056:	7011      	strb	r1, [r2, #0]
   10058:	001a      	movs	r2, r3
   1005a:	4b2b      	ldr	r3, [pc, #172]	; (10108 <P2PTasks+0x388>)
   1005c:	2192      	movs	r1, #146	; 0x92
   1005e:	5499      	strb	r1, [r3, r2]

                            for(i = 0; i < CONNECTION_SIZE; i++)
   10060:	1dfb      	adds	r3, r7, #7
   10062:	2200      	movs	r2, #0
   10064:	701a      	strb	r2, [r3, #0]
   10066:	e060      	b.n	1012a <P2PTasks+0x3aa>
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
   10068:	1dfb      	adds	r3, r7, #7
   1006a:	781a      	ldrb	r2, [r3, #0]
   1006c:	492a      	ldr	r1, [pc, #168]	; (10118 <P2PTasks+0x398>)
   1006e:	2008      	movs	r0, #8
   10070:	0013      	movs	r3, r2
   10072:	009b      	lsls	r3, r3, #2
   10074:	189b      	adds	r3, r3, r2
   10076:	005b      	lsls	r3, r3, #1
   10078:	18cb      	adds	r3, r1, r3
   1007a:	181b      	adds	r3, r3, r0
   1007c:	785b      	ldrb	r3, [r3, #1]
   1007e:	061b      	lsls	r3, r3, #24
   10080:	0fdb      	lsrs	r3, r3, #31
   10082:	b2db      	uxtb	r3, r3
   10084:	2b00      	cmp	r3, #0
   10086:	d04b      	beq.n	10120 <P2PTasks+0x3a0>
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   10088:	4b14      	ldr	r3, [pc, #80]	; (100dc <P2PTasks+0x35c>)
   1008a:	6858      	ldr	r0, [r3, #4]
   1008c:	1dfb      	adds	r3, r7, #7
   1008e:	781a      	ldrb	r2, [r3, #0]
   10090:	0013      	movs	r3, r2
   10092:	009b      	lsls	r3, r3, #2
   10094:	189b      	adds	r3, r3, r2
   10096:	005b      	lsls	r3, r3, #1
   10098:	4a1f      	ldr	r2, [pc, #124]	; (10118 <P2PTasks+0x398>)
   1009a:	189b      	adds	r3, r3, r2
   1009c:	0019      	movs	r1, r3
   1009e:	4b1f      	ldr	r3, [pc, #124]	; (1011c <P2PTasks+0x39c>)
   100a0:	4798      	blx	r3
   100a2:	1e03      	subs	r3, r0, #0
   100a4:	d03c      	beq.n	10120 <P2PTasks+0x3a0>
                                    {
                                        // find the record. disable the record and
                                        // set status to be SUCCESS
                                        ConnectionTable[i].status.Val = 0;
   100a6:	1dfb      	adds	r3, r7, #7
   100a8:	781a      	ldrb	r2, [r3, #0]
   100aa:	491b      	ldr	r1, [pc, #108]	; (10118 <P2PTasks+0x398>)
   100ac:	0013      	movs	r3, r2
   100ae:	009b      	lsls	r3, r3, #2
   100b0:	189b      	adds	r3, r3, r2
   100b2:	005b      	lsls	r3, r3, #1
   100b4:	18cb      	adds	r3, r1, r3
   100b6:	3309      	adds	r3, #9
   100b8:	2200      	movs	r2, #0
   100ba:	701a      	strb	r2, [r3, #0]
                                        #if defined(ENABLE_NETWORK_FREEZER)
                                            nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                        #endif
                                        MiApp_WriteData(STATUS_SUCCESS);
   100bc:	4b11      	ldr	r3, [pc, #68]	; (10104 <P2PTasks+0x384>)
   100be:	781b      	ldrb	r3, [r3, #0]
   100c0:	1c5a      	adds	r2, r3, #1
   100c2:	b2d1      	uxtb	r1, r2
   100c4:	4a0f      	ldr	r2, [pc, #60]	; (10104 <P2PTasks+0x384>)
   100c6:	7011      	strb	r1, [r2, #0]
   100c8:	001a      	movs	r2, r3
   100ca:	4b0f      	ldr	r3, [pc, #60]	; (10108 <P2PTasks+0x388>)
   100cc:	2100      	movs	r1, #0
   100ce:	5499      	strb	r1, [r3, r2]

                                        break;
   100d0:	e02f      	b.n	10132 <P2PTasks+0x3b2>
   100d2:	46c0      	nop			; (mov r8, r8)
   100d4:	2000154c 	.word	0x2000154c
   100d8:	0000f2a9 	.word	0x0000f2a9
   100dc:	20001580 	.word	0x20001580
   100e0:	200014dc 	.word	0x200014dc
   100e4:	200014f6 	.word	0x200014f6
   100e8:	0001c990 	.word	0x0001c990
   100ec:	200007c1 	.word	0x200007c1
   100f0:	0000f27d 	.word	0x0000f27d
   100f4:	200004a5 	.word	0x200004a5
   100f8:	0000ffff 	.word	0x0000ffff
   100fc:	200014f4 	.word	0x200014f4
   10100:	00010971 	.word	0x00010971
   10104:	2000154d 	.word	0x2000154d
   10108:	20001550 	.word	0x20001550
   1010c:	20001548 	.word	0x20001548
   10110:	200014f0 	.word	0x200014f0
   10114:	00010585 	.word	0x00010585
   10118:	20001414 	.word	0x20001414
   1011c:	000106bd 	.word	0x000106bd
                            for(i = 0; i < CONNECTION_SIZE; i++)
   10120:	1dfb      	adds	r3, r7, #7
   10122:	781a      	ldrb	r2, [r3, #0]
   10124:	1dfb      	adds	r3, r7, #7
   10126:	3201      	adds	r2, #1
   10128:	701a      	strb	r2, [r3, #0]
   1012a:	1dfb      	adds	r3, r7, #7
   1012c:	781b      	ldrb	r3, [r3, #0]
   1012e:	2b13      	cmp	r3, #19
   10130:	d99a      	bls.n	10068 <P2PTasks+0x2e8>
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
   10132:	4b5e      	ldr	r3, [pc, #376]	; (102ac <P2PTasks+0x52c>)
   10134:	4798      	blx	r3

                            if( i == CONNECTION_SIZE ) 
   10136:	1dfb      	adds	r3, r7, #7
   10138:	781b      	ldrb	r3, [r3, #0]
   1013a:	2b14      	cmp	r3, #20
   1013c:	d109      	bne.n	10152 <P2PTasks+0x3d2>
                            {
                                // not found, the requesting device is not my peer
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
   1013e:	4b5c      	ldr	r3, [pc, #368]	; (102b0 <P2PTasks+0x530>)
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	1c5a      	adds	r2, r3, #1
   10144:	b2d1      	uxtb	r1, r2
   10146:	4a5a      	ldr	r2, [pc, #360]	; (102b0 <P2PTasks+0x530>)
   10148:	7011      	strb	r1, [r2, #0]
   1014a:	001a      	movs	r2, r3
   1014c:	4b59      	ldr	r3, [pc, #356]	; (102b4 <P2PTasks+0x534>)
   1014e:	21f0      	movs	r1, #240	; 0xf0
   10150:	5499      	strb	r1, [r3, r2]
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
   10152:	4b59      	ldr	r3, [pc, #356]	; (102b8 <P2PTasks+0x538>)
   10154:	6858      	ldr	r0, [r3, #4]
   10156:	4b58      	ldr	r3, [pc, #352]	; (102b8 <P2PTasks+0x538>)
   10158:	781b      	ldrb	r3, [r3, #0]
   1015a:	071b      	lsls	r3, r3, #28
   1015c:	0fdb      	lsrs	r3, r3, #31
   1015e:	b2db      	uxtb	r3, r3
   10160:	1e5a      	subs	r2, r3, #1
   10162:	4193      	sbcs	r3, r2
   10164:	b2db      	uxtb	r3, r3
   10166:	4a54      	ldr	r2, [pc, #336]	; (102b8 <P2PTasks+0x538>)
   10168:	8851      	ldrh	r1, [r2, #2]
   1016a:	9300      	str	r3, [sp, #0]
   1016c:	2301      	movs	r3, #1
   1016e:	0002      	movs	r2, r0
   10170:	2000      	movs	r0, #0
   10172:	4c52      	ldr	r4, [pc, #328]	; (102bc <P2PTasks+0x53c>)
   10174:	47a0      	blx	r4
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif

                        }
                            break;
   10176:	e07c      	b.n	10272 <P2PTasks+0x4f2>
                    #endif
                    
                    case CMD_P2P_CONNECTION_RESPONSE:
                        {
                            switch( rxMessage.Payload[1] )
   10178:	4b4f      	ldr	r3, [pc, #316]	; (102b8 <P2PTasks+0x538>)
   1017a:	689b      	ldr	r3, [r3, #8]
   1017c:	3301      	adds	r3, #1
   1017e:	781b      	ldrb	r3, [r3, #0]
   10180:	3300      	adds	r3, #0
   10182:	2b01      	cmp	r3, #1
   10184:	d815      	bhi.n	101b2 <P2PTasks+0x432>
                            {              
                                case STATUS_SUCCESS:
                                case STATUS_EXISTS:
                                    #if defined(IEEE_802_15_4)
                                        if( myPANID.Val == 0xFFFF )
   10186:	4b4e      	ldr	r3, [pc, #312]	; (102c0 <P2PTasks+0x540>)
   10188:	881b      	ldrh	r3, [r3, #0]
   1018a:	4a4e      	ldr	r2, [pc, #312]	; (102c4 <P2PTasks+0x544>)
   1018c:	4293      	cmp	r3, r2
   1018e:	d10d      	bne.n	101ac <P2PTasks+0x42c>
                                        {
                                            myPANID.Val = rxMessage.SourcePANID.Val;
   10190:	4b49      	ldr	r3, [pc, #292]	; (102b8 <P2PTasks+0x538>)
   10192:	885a      	ldrh	r2, [r3, #2]
   10194:	4b4a      	ldr	r3, [pc, #296]	; (102c0 <P2PTasks+0x540>)
   10196:	801a      	strh	r2, [r3, #0]
                                            {
                                                uint16_t tmp = 0xFFFF;
   10198:	1d3b      	adds	r3, r7, #4
   1019a:	2201      	movs	r2, #1
   1019c:	4252      	negs	r2, r2
   1019e:	801a      	strh	r2, [r3, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   101a0:	4a47      	ldr	r2, [pc, #284]	; (102c0 <P2PTasks+0x540>)
   101a2:	1d3b      	adds	r3, r7, #4
   101a4:	0011      	movs	r1, r2
   101a6:	0018      	movs	r0, r3
   101a8:	4b47      	ldr	r3, [pc, #284]	; (102c8 <P2PTasks+0x548>)
   101aa:	4798      	blx	r3
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutMyPANID(myPANID.v);
                                            #endif
                                        }
                                    #endif
                                    AddConnection();
   101ac:	4b47      	ldr	r3, [pc, #284]	; (102cc <P2PTasks+0x54c>)
   101ae:	4798      	blx	r3
                                    
                                    #if defined(ENABLE_NETWORK_FREEZER)
                                        P2PStatus.bits.SaveConnection = 1;
                                        nvmDelayTick.Val = MiWi_TickGet();
                                    #endif
                                    break;
   101b0:	e000      	b.n	101b4 <P2PTasks+0x434>
                                default:
                                    break;
   101b2:	46c0      	nop			; (mov r8, r8)
                            }                        
                        }
                        MiMAC_DiscardPacket();
   101b4:	4b3d      	ldr	r3, [pc, #244]	; (102ac <P2PTasks+0x52c>)
   101b6:	4798      	blx	r3
                        break; 
   101b8:	e05b      	b.n	10272 <P2PTasks+0x4f2>
                    
                    
                    case CMD_P2P_ACTIVE_SCAN_RESPONSE:
                        {
                            if( P2PStatus.bits.Resync )
   101ba:	4b45      	ldr	r3, [pc, #276]	; (102d0 <P2PTasks+0x550>)
   101bc:	781b      	ldrb	r3, [r3, #0]
   101be:	069b      	lsls	r3, r3, #26
   101c0:	0fdb      	lsrs	r3, r3, #31
   101c2:	b2db      	uxtb	r3, r3
   101c4:	2b00      	cmp	r3, #0
   101c6:	d004      	beq.n	101d2 <P2PTasks+0x452>
                            {
                                P2PStatus.bits.Resync = 0;   
   101c8:	4a41      	ldr	r2, [pc, #260]	; (102d0 <P2PTasks+0x550>)
   101ca:	7813      	ldrb	r3, [r2, #0]
   101cc:	2120      	movs	r1, #32
   101ce:	438b      	bics	r3, r1
   101d0:	7013      	strb	r3, [r2, #0]
                                        ActiveScanResultIndex++;
                                    }
                                }
                            #endif

                            MiMAC_DiscardPacket(); 
   101d2:	4b36      	ldr	r3, [pc, #216]	; (102ac <P2PTasks+0x52c>)
   101d4:	4798      	blx	r3
                        }
                        break;                
   101d6:	e04c      	b.n	10272 <P2PTasks+0x4f2>
                    
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
   101d8:	4b37      	ldr	r3, [pc, #220]	; (102b8 <P2PTasks+0x538>)
   101da:	689b      	ldr	r3, [r3, #8]
   101dc:	3301      	adds	r3, #1
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	2b00      	cmp	r3, #0
   101e2:	d137      	bne.n	10254 <P2PTasks+0x4d4>
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
   101e4:	1dfb      	adds	r3, r7, #7
   101e6:	2200      	movs	r2, #0
   101e8:	701a      	strb	r2, [r3, #0]
   101ea:	e02f      	b.n	1024c <P2PTasks+0x4cc>
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
   101ec:	1dfb      	adds	r3, r7, #7
   101ee:	781a      	ldrb	r2, [r3, #0]
   101f0:	4938      	ldr	r1, [pc, #224]	; (102d4 <P2PTasks+0x554>)
   101f2:	2008      	movs	r0, #8
   101f4:	0013      	movs	r3, r2
   101f6:	009b      	lsls	r3, r3, #2
   101f8:	189b      	adds	r3, r3, r2
   101fa:	005b      	lsls	r3, r3, #1
   101fc:	18cb      	adds	r3, r1, r3
   101fe:	181b      	adds	r3, r3, r0
   10200:	785b      	ldrb	r3, [r3, #1]
   10202:	061b      	lsls	r3, r3, #24
   10204:	0fdb      	lsrs	r3, r3, #31
   10206:	b2db      	uxtb	r3, r3
   10208:	2b00      	cmp	r3, #0
   1020a:	d01a      	beq.n	10242 <P2PTasks+0x4c2>
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   1020c:	4b2a      	ldr	r3, [pc, #168]	; (102b8 <P2PTasks+0x538>)
   1020e:	6858      	ldr	r0, [r3, #4]
   10210:	1dfb      	adds	r3, r7, #7
   10212:	781a      	ldrb	r2, [r3, #0]
   10214:	0013      	movs	r3, r2
   10216:	009b      	lsls	r3, r3, #2
   10218:	189b      	adds	r3, r3, r2
   1021a:	005b      	lsls	r3, r3, #1
   1021c:	4a2d      	ldr	r2, [pc, #180]	; (102d4 <P2PTasks+0x554>)
   1021e:	189b      	adds	r3, r3, r2
   10220:	0019      	movs	r1, r3
   10222:	4b2d      	ldr	r3, [pc, #180]	; (102d8 <P2PTasks+0x558>)
   10224:	4798      	blx	r3
   10226:	1e03      	subs	r3, r0, #0
   10228:	d00b      	beq.n	10242 <P2PTasks+0x4c2>
                                        {
                                            // invalidate the record
                                            ConnectionTable[i].status.Val = 0;
   1022a:	1dfb      	adds	r3, r7, #7
   1022c:	781a      	ldrb	r2, [r3, #0]
   1022e:	4929      	ldr	r1, [pc, #164]	; (102d4 <P2PTasks+0x554>)
   10230:	0013      	movs	r3, r2
   10232:	009b      	lsls	r3, r3, #2
   10234:	189b      	adds	r3, r3, r2
   10236:	005b      	lsls	r3, r3, #1
   10238:	18cb      	adds	r3, r1, r3
   1023a:	3309      	adds	r3, #9
   1023c:	2200      	movs	r2, #0
   1023e:	701a      	strb	r2, [r3, #0]
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                            #endif
                                            break;
   10240:	e008      	b.n	10254 <P2PTasks+0x4d4>
                                for(i = 0; i < CONNECTION_SIZE; i++)
   10242:	1dfb      	adds	r3, r7, #7
   10244:	781a      	ldrb	r2, [r3, #0]
   10246:	1dfb      	adds	r3, r7, #7
   10248:	3201      	adds	r2, #1
   1024a:	701a      	strb	r2, [r3, #0]
   1024c:	1dfb      	adds	r3, r7, #7
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	2b13      	cmp	r3, #19
   10252:	d9cb      	bls.n	101ec <P2PTasks+0x46c>
                                        }
                                    } 
                                }
                            }
                        }
                        MiMAC_DiscardPacket();
   10254:	4b15      	ldr	r3, [pc, #84]	; (102ac <P2PTasks+0x52c>)
   10256:	4798      	blx	r3
                        break;
   10258:	e00b      	b.n	10272 <P2PTasks+0x4f2>
                #endif
                
                        
                default:
                    // let upper application layer to handle undefined command frame
                    P2PStatus.bits.RxHasUserData = 1;
   1025a:	4a1d      	ldr	r2, [pc, #116]	; (102d0 <P2PTasks+0x550>)
   1025c:	7813      	ldrb	r3, [r2, #0]
   1025e:	2108      	movs	r1, #8
   10260:	430b      	orrs	r3, r1
   10262:	7013      	strb	r3, [r2, #0]
                    break;
   10264:	46c0      	nop			; (mov r8, r8)
   10266:	e004      	b.n	10272 <P2PTasks+0x4f2>
            }
        }
        else
        {
            P2PStatus.bits.RxHasUserData = 1;
   10268:	4a19      	ldr	r2, [pc, #100]	; (102d0 <P2PTasks+0x550>)
   1026a:	7813      	ldrb	r3, [r2, #0]
   1026c:	2108      	movs	r1, #8
   1026e:	430b      	orrs	r3, r1
   10270:	7013      	strb	r3, [r2, #0]
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
            {
                P2PStatus.bits.DataRequesting = 0;
            }
        #endif       
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
   10272:	4b11      	ldr	r3, [pc, #68]	; (102b8 <P2PTasks+0x538>)
   10274:	7b1b      	ldrb	r3, [r3, #12]
   10276:	2b00      	cmp	r3, #0
   10278:	d00d      	beq.n	10296 <P2PTasks+0x516>
   1027a:	4b15      	ldr	r3, [pc, #84]	; (102d0 <P2PTasks+0x550>)
   1027c:	781b      	ldrb	r3, [r3, #0]
   1027e:	06db      	lsls	r3, r3, #27
   10280:	0fdb      	lsrs	r3, r3, #31
   10282:	b2db      	uxtb	r3, r3
   10284:	2b00      	cmp	r3, #0
   10286:	d106      	bne.n	10296 <P2PTasks+0x516>
   10288:	4b11      	ldr	r3, [pc, #68]	; (102d0 <P2PTasks+0x550>)
   1028a:	781b      	ldrb	r3, [r3, #0]
   1028c:	069b      	lsls	r3, r3, #26
   1028e:	0fdb      	lsrs	r3, r3, #31
   10290:	b2db      	uxtb	r3, r3
   10292:	2b00      	cmp	r3, #0
   10294:	d006      	beq.n	102a4 <P2PTasks+0x524>
        {
            P2PStatus.bits.RxHasUserData = 0;
   10296:	4a0e      	ldr	r2, [pc, #56]	; (102d0 <P2PTasks+0x550>)
   10298:	7813      	ldrb	r3, [r2, #0]
   1029a:	2108      	movs	r1, #8
   1029c:	438b      	bics	r3, r1
   1029e:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
   102a0:	4b02      	ldr	r3, [pc, #8]	; (102ac <P2PTasks+0x52c>)
   102a2:	4798      	blx	r3
        }   
            
    }   
}
   102a4:	46c0      	nop			; (mov r8, r8)
   102a6:	46bd      	mov	sp, r7
   102a8:	b003      	add	sp, #12
   102aa:	bd90      	pop	{r4, r7, pc}
   102ac:	0000f27d 	.word	0x0000f27d
   102b0:	2000154d 	.word	0x2000154d
   102b4:	20001550 	.word	0x20001550
   102b8:	20001580 	.word	0x20001580
   102bc:	00010585 	.word	0x00010585
   102c0:	200014f4 	.word	0x200014f4
   102c4:	0000ffff 	.word	0x0000ffff
   102c8:	0000e0bd 	.word	0x0000e0bd
   102cc:	00010971 	.word	0x00010971
   102d0:	2000154c 	.word	0x2000154c
   102d4:	20001414 	.word	0x20001414
   102d8:	000106bd 	.word	0x000106bd

000102dc <MiApp_ProtocolInit>:

uint32_t addr1 =  0x0080A00C;

bool MiApp_ProtocolInit(bool bNetworkFreezer)
{
   102dc:	b580      	push	{r7, lr}
   102de:	b08c      	sub	sp, #48	; 0x30
   102e0:	af00      	add	r7, sp, #0
   102e2:	0002      	movs	r2, r0
   102e4:	1dfb      	adds	r3, r7, #7
   102e6:	701a      	strb	r2, [r3, #0]
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
   102e8:	4b96      	ldr	r3, [pc, #600]	; (10544 <MiApp_ProtocolInit+0x268>)
   102ea:	2200      	movs	r2, #0
   102ec:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (uint32_t *)0x0080A00C;
   102ee:	4b96      	ldr	r3, [pc, #600]	; (10548 <MiApp_ProtocolInit+0x26c>)
   102f0:	62bb      	str	r3, [r7, #40]	; 0x28
	val_1 = *ptr1;
   102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   102f4:	681b      	ldr	r3, [r3, #0]
   102f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *ptr = (uint32_t *)0x0080A040;
   102f8:	4b94      	ldr	r3, [pc, #592]	; (1054c <MiApp_ProtocolInit+0x270>)
   102fa:	623b      	str	r3, [r7, #32]
	val_2 = *ptr;
   102fc:	6a3b      	ldr	r3, [r7, #32]
   102fe:	681b      	ldr	r3, [r3, #0]
   10300:	61fb      	str	r3, [r7, #28]
	ptr++;
   10302:	6a3b      	ldr	r3, [r7, #32]
   10304:	3304      	adds	r3, #4
   10306:	623b      	str	r3, [r7, #32]
	val_3 = *ptr;
   10308:	6a3b      	ldr	r3, [r7, #32]
   1030a:	681b      	ldr	r3, [r3, #0]
   1030c:	61bb      	str	r3, [r7, #24]
	ptr++;
   1030e:	6a3b      	ldr	r3, [r7, #32]
   10310:	3304      	adds	r3, #4
   10312:	623b      	str	r3, [r7, #32]
	val_4 = *ptr;
   10314:	6a3b      	ldr	r3, [r7, #32]
   10316:	681b      	ldr	r3, [r3, #0]
   10318:	617b      	str	r3, [r7, #20]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
   1031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1031c:	b2da      	uxtb	r2, r3
   1031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10320:	0a1b      	lsrs	r3, r3, #8
   10322:	b2db      	uxtb	r3, r3
   10324:	18d3      	adds	r3, r2, r3
   10326:	b2da      	uxtb	r2, r3
   10328:	4b89      	ldr	r3, [pc, #548]	; (10550 <MiApp_ProtocolInit+0x274>)
   1032a:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
   1032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1032e:	0c1b      	lsrs	r3, r3, #16
   10330:	b2da      	uxtb	r2, r3
   10332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10334:	0e1b      	lsrs	r3, r3, #24
   10336:	b2db      	uxtb	r3, r3
   10338:	18d3      	adds	r3, r2, r3
   1033a:	b2da      	uxtb	r2, r3
   1033c:	4b84      	ldr	r3, [pc, #528]	; (10550 <MiApp_ProtocolInit+0x274>)
   1033e:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
   10340:	69fb      	ldr	r3, [r7, #28]
   10342:	b2da      	uxtb	r2, r3
   10344:	69fb      	ldr	r3, [r7, #28]
   10346:	0a1b      	lsrs	r3, r3, #8
   10348:	b2db      	uxtb	r3, r3
   1034a:	18d3      	adds	r3, r2, r3
   1034c:	b2da      	uxtb	r2, r3
   1034e:	4b80      	ldr	r3, [pc, #512]	; (10550 <MiApp_ProtocolInit+0x274>)
   10350:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
   10352:	69fb      	ldr	r3, [r7, #28]
   10354:	0c1b      	lsrs	r3, r3, #16
   10356:	b2da      	uxtb	r2, r3
   10358:	69fb      	ldr	r3, [r7, #28]
   1035a:	0e1b      	lsrs	r3, r3, #24
   1035c:	b2db      	uxtb	r3, r3
   1035e:	18d3      	adds	r3, r2, r3
   10360:	b2da      	uxtb	r2, r3
   10362:	4b7b      	ldr	r3, [pc, #492]	; (10550 <MiApp_ProtocolInit+0x274>)
   10364:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
   10366:	69bb      	ldr	r3, [r7, #24]
   10368:	b2da      	uxtb	r2, r3
   1036a:	69bb      	ldr	r3, [r7, #24]
   1036c:	0a1b      	lsrs	r3, r3, #8
   1036e:	b2db      	uxtb	r3, r3
   10370:	18d3      	adds	r3, r2, r3
   10372:	b2da      	uxtb	r2, r3
   10374:	4b76      	ldr	r3, [pc, #472]	; (10550 <MiApp_ProtocolInit+0x274>)
   10376:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
   10378:	69bb      	ldr	r3, [r7, #24]
   1037a:	0c1b      	lsrs	r3, r3, #16
   1037c:	b2da      	uxtb	r2, r3
   1037e:	69bb      	ldr	r3, [r7, #24]
   10380:	0e1b      	lsrs	r3, r3, #24
   10382:	b2db      	uxtb	r3, r3
   10384:	18d3      	adds	r3, r2, r3
   10386:	b2da      	uxtb	r2, r3
   10388:	4b71      	ldr	r3, [pc, #452]	; (10550 <MiApp_ProtocolInit+0x274>)
   1038a:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
   1038c:	697b      	ldr	r3, [r7, #20]
   1038e:	b2da      	uxtb	r2, r3
   10390:	697b      	ldr	r3, [r7, #20]
   10392:	0a1b      	lsrs	r3, r3, #8
   10394:	b2db      	uxtb	r3, r3
   10396:	18d3      	adds	r3, r2, r3
   10398:	b2da      	uxtb	r2, r3
   1039a:	4b6d      	ldr	r3, [pc, #436]	; (10550 <MiApp_ProtocolInit+0x274>)
   1039c:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
   1039e:	697b      	ldr	r3, [r7, #20]
   103a0:	0c1b      	lsrs	r3, r3, #16
   103a2:	b2da      	uxtb	r2, r3
   103a4:	697b      	ldr	r3, [r7, #20]
   103a6:	0e1b      	lsrs	r3, r3, #24
   103a8:	b2db      	uxtb	r3, r3
   103aa:	18d3      	adds	r3, r2, r3
   103ac:	b2da      	uxtb	r2, r3
   103ae:	4b68      	ldr	r3, [pc, #416]	; (10550 <MiApp_ProtocolInit+0x274>)
   103b0:	71da      	strb	r2, [r3, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
   103b2:	1dfb      	adds	r3, r7, #7
   103b4:	781b      	ldrb	r3, [r3, #0]
   103b6:	2201      	movs	r2, #1
   103b8:	4053      	eors	r3, r2
   103ba:	b2db      	uxtb	r3, r3
   103bc:	2b00      	cmp	r3, #0
   103be:	d03e      	beq.n	1043e <MiApp_ProtocolInit+0x162>
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
   103c0:	232f      	movs	r3, #47	; 0x2f
   103c2:	18fb      	adds	r3, r7, r3
   103c4:	2200      	movs	r2, #0
   103c6:	701a      	strb	r2, [r3, #0]
   103c8:	e034      	b.n	10434 <MiApp_ProtocolInit+0x158>
		{
			ConnectionTable[i].status.Val = 0;
   103ca:	232f      	movs	r3, #47	; 0x2f
   103cc:	18fb      	adds	r3, r7, r3
   103ce:	781a      	ldrb	r2, [r3, #0]
   103d0:	4960      	ldr	r1, [pc, #384]	; (10554 <MiApp_ProtocolInit+0x278>)
   103d2:	0013      	movs	r3, r2
   103d4:	009b      	lsls	r3, r3, #2
   103d6:	189b      	adds	r3, r3, r2
   103d8:	005b      	lsls	r3, r3, #1
   103da:	18cb      	adds	r3, r1, r3
   103dc:	3309      	adds	r3, #9
   103de:	2200      	movs	r2, #0
   103e0:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[0] = 0x00;
   103e2:	232f      	movs	r3, #47	; 0x2f
   103e4:	18fb      	adds	r3, r7, r3
   103e6:	781a      	ldrb	r2, [r3, #0]
   103e8:	495a      	ldr	r1, [pc, #360]	; (10554 <MiApp_ProtocolInit+0x278>)
   103ea:	0013      	movs	r3, r2
   103ec:	009b      	lsls	r3, r3, #2
   103ee:	189b      	adds	r3, r3, r2
   103f0:	005b      	lsls	r3, r3, #1
   103f2:	2200      	movs	r2, #0
   103f4:	545a      	strb	r2, [r3, r1]
			ConnectionTable[i].Address[1] = 0x00;
   103f6:	232f      	movs	r3, #47	; 0x2f
   103f8:	18fb      	adds	r3, r7, r3
   103fa:	781a      	ldrb	r2, [r3, #0]
   103fc:	4955      	ldr	r1, [pc, #340]	; (10554 <MiApp_ProtocolInit+0x278>)
   103fe:	0013      	movs	r3, r2
   10400:	009b      	lsls	r3, r3, #2
   10402:	189b      	adds	r3, r3, r2
   10404:	005b      	lsls	r3, r3, #1
   10406:	18cb      	adds	r3, r1, r3
   10408:	3301      	adds	r3, #1
   1040a:	2200      	movs	r2, #0
   1040c:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[2] = 0x00;
   1040e:	232f      	movs	r3, #47	; 0x2f
   10410:	18fb      	adds	r3, r7, r3
   10412:	781a      	ldrb	r2, [r3, #0]
   10414:	494f      	ldr	r1, [pc, #316]	; (10554 <MiApp_ProtocolInit+0x278>)
   10416:	0013      	movs	r3, r2
   10418:	009b      	lsls	r3, r3, #2
   1041a:	189b      	adds	r3, r3, r2
   1041c:	005b      	lsls	r3, r3, #1
   1041e:	18cb      	adds	r3, r1, r3
   10420:	3302      	adds	r3, #2
   10422:	2200      	movs	r2, #0
   10424:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < CONNECTION_SIZE; i++)
   10426:	232f      	movs	r3, #47	; 0x2f
   10428:	18fb      	adds	r3, r7, r3
   1042a:	781a      	ldrb	r2, [r3, #0]
   1042c:	232f      	movs	r3, #47	; 0x2f
   1042e:	18fb      	adds	r3, r7, r3
   10430:	3201      	adds	r2, #1
   10432:	701a      	strb	r2, [r3, #0]
   10434:	232f      	movs	r3, #47	; 0x2f
   10436:	18fb      	adds	r3, r7, r3
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	2b13      	cmp	r3, #19
   1043c:	d9c5      	bls.n	103ca <MiApp_ProtocolInit+0xee>
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
   1043e:	4b46      	ldr	r3, [pc, #280]	; (10558 <MiApp_ProtocolInit+0x27c>)
   10440:	2200      	movs	r2, #0
   10442:	701a      	strb	r2, [r3, #0]
		indirectMessages[i].flags.Val = 0;
	}
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
   10444:	232f      	movs	r3, #47	; 0x2f
   10446:	18fb      	adds	r3, r7, r3
   10448:	2200      	movs	r2, #0
   1044a:	701a      	strb	r2, [r3, #0]
   1044c:	e00d      	b.n	1046a <MiApp_ProtocolInit+0x18e>
	{
		IncomingFrameCounter[i].Val = 0;
   1044e:	232f      	movs	r3, #47	; 0x2f
   10450:	18fb      	adds	r3, r7, r3
   10452:	781a      	ldrb	r2, [r3, #0]
   10454:	4b41      	ldr	r3, [pc, #260]	; (1055c <MiApp_ProtocolInit+0x280>)
   10456:	0092      	lsls	r2, r2, #2
   10458:	2100      	movs	r1, #0
   1045a:	50d1      	str	r1, [r2, r3]
	for(i = 0; i < CONNECTION_SIZE; i++)
   1045c:	232f      	movs	r3, #47	; 0x2f
   1045e:	18fb      	adds	r3, r7, r3
   10460:	781a      	ldrb	r2, [r3, #0]
   10462:	232f      	movs	r3, #47	; 0x2f
   10464:	18fb      	adds	r3, r7, r3
   10466:	3201      	adds	r2, #1
   10468:	701a      	strb	r2, [r3, #0]
   1046a:	232f      	movs	r3, #47	; 0x2f
   1046c:	18fb      	adds	r3, r7, r3
   1046e:	781b      	ldrb	r3, [r3, #0]
   10470:	2b13      	cmp	r3, #19
   10472:	d9ec      	bls.n	1044e <MiApp_ProtocolInit+0x172>
	}
	#endif
	

	#if defined(IEEE_802_15_4)
		myPANID.Val = MY_PAN_ID;
   10474:	4b3a      	ldr	r3, [pc, #232]	; (10560 <MiApp_ProtocolInit+0x284>)
   10476:	4a3b      	ldr	r2, [pc, #236]	; (10564 <MiApp_ProtocolInit+0x288>)
   10478:	801a      	strh	r2, [r3, #0]
	#endif

	
	initValue.PAddress = myLongAddress;
   1047a:	230c      	movs	r3, #12
   1047c:	18fb      	adds	r3, r7, r3
   1047e:	4a34      	ldr	r2, [pc, #208]	; (10550 <MiApp_ProtocolInit+0x274>)
   10480:	605a      	str	r2, [r3, #4]
	initValue.actionFlags.bits.CCAEnable = 1;
   10482:	230c      	movs	r3, #12
   10484:	18fb      	adds	r3, r7, r3
   10486:	781a      	ldrb	r2, [r3, #0]
   10488:	2102      	movs	r1, #2
   1048a:	430a      	orrs	r2, r1
   1048c:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
   1048e:	230c      	movs	r3, #12
   10490:	18fb      	adds	r3, r7, r3
   10492:	781a      	ldrb	r2, [r3, #0]
   10494:	2178      	movs	r1, #120	; 0x78
   10496:	438a      	bics	r2, r1
   10498:	1c11      	adds	r1, r2, #0
   1049a:	2240      	movs	r2, #64	; 0x40
   1049c:	430a      	orrs	r2, r1
   1049e:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
   104a0:	230c      	movs	r3, #12
   104a2:	18fb      	adds	r3, r7, r3
   104a4:	1dfa      	adds	r2, r7, #7
   104a6:	7812      	ldrb	r2, [r2, #0]
   104a8:	2101      	movs	r1, #1
   104aa:	400a      	ands	r2, r1
   104ac:	0090      	lsls	r0, r2, #2
   104ae:	781a      	ldrb	r2, [r3, #0]
   104b0:	2104      	movs	r1, #4
   104b2:	438a      	bics	r2, r1
   104b4:	1c11      	adds	r1, r2, #0
   104b6:	1c02      	adds	r2, r0, #0
   104b8:	430a      	orrs	r2, r1
   104ba:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.RepeaterMode = 0;
   104bc:	230c      	movs	r3, #12
   104be:	18fb      	adds	r3, r7, r3
   104c0:	781a      	ldrb	r2, [r3, #0]
   104c2:	2101      	movs	r1, #1
   104c4:	438a      	bics	r2, r1
   104c6:	701a      	strb	r2, [r3, #0]

	MiMAC_Init(initValue);
   104c8:	230c      	movs	r3, #12
   104ca:	18fb      	adds	r3, r7, r3
   104cc:	6818      	ldr	r0, [r3, #0]
   104ce:	6859      	ldr	r1, [r3, #4]
   104d0:	4b25      	ldr	r3, [pc, #148]	; (10568 <MiApp_ProtocolInit+0x28c>)
   104d2:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
   104d4:	230a      	movs	r3, #10
   104d6:	18fb      	adds	r3, r7, r3
   104d8:	2201      	movs	r2, #1
   104da:	4252      	negs	r2, r2
   104dc:	801a      	strh	r2, [r3, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   104de:	4a20      	ldr	r2, [pc, #128]	; (10560 <MiApp_ProtocolInit+0x284>)
   104e0:	230a      	movs	r3, #10
   104e2:	18fb      	adds	r3, r7, r3
   104e4:	0011      	movs	r1, r2
   104e6:	0018      	movs	r0, r3
   104e8:	4b20      	ldr	r3, [pc, #128]	; (1056c <MiApp_ProtocolInit+0x290>)
   104ea:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
   104ec:	4b20      	ldr	r3, [pc, #128]	; (10570 <MiApp_ProtocolInit+0x294>)
   104ee:	781b      	ldrb	r3, [r3, #0]
   104f0:	0018      	movs	r0, r3
   104f2:	4b20      	ldr	r3, [pc, #128]	; (10574 <MiApp_ProtocolInit+0x298>)
   104f4:	4798      	blx	r3
	#elif defined(ENABLE_INDIRECT_MESSAGE)
	TimeSlotTick.Val = ((ONE_SECOND) * RFD_WAKEUP_INTERVAL) / TIME_SYNC_SLOTS;
	#endif
	#endif

	P2PCapacityInfo = 0;
   104f6:	4b20      	ldr	r3, [pc, #128]	; (10578 <MiApp_ProtocolInit+0x29c>)
   104f8:	2200      	movs	r2, #0
   104fa:	701a      	strb	r2, [r3, #0]
	#if !defined(ENABLE_SLEEP)
	P2PCapacityInfo |= 0x01;
   104fc:	4b1e      	ldr	r3, [pc, #120]	; (10578 <MiApp_ProtocolInit+0x29c>)
   104fe:	781b      	ldrb	r3, [r3, #0]
   10500:	2201      	movs	r2, #1
   10502:	4313      	orrs	r3, r2
   10504:	b2da      	uxtb	r2, r3
   10506:	4b1c      	ldr	r3, [pc, #112]	; (10578 <MiApp_ProtocolInit+0x29c>)
   10508:	701a      	strb	r2, [r3, #0]
	#endif
	#if defined(ENABLE_SECURITY)
	P2PCapacityInfo |= 0x08;
   1050a:	4b1b      	ldr	r3, [pc, #108]	; (10578 <MiApp_ProtocolInit+0x29c>)
   1050c:	781b      	ldrb	r3, [r3, #0]
   1050e:	2208      	movs	r2, #8
   10510:	4313      	orrs	r3, r2
   10512:	b2da      	uxtb	r2, r3
   10514:	4b18      	ldr	r3, [pc, #96]	; (10578 <MiApp_ProtocolInit+0x29c>)
   10516:	701a      	strb	r2, [r3, #0]
	#endif
	P2PCapacityInfo |= (ConnMode << 4);
   10518:	4b18      	ldr	r3, [pc, #96]	; (1057c <MiApp_ProtocolInit+0x2a0>)
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	011b      	lsls	r3, r3, #4
   1051e:	b25a      	sxtb	r2, r3
   10520:	4b15      	ldr	r3, [pc, #84]	; (10578 <MiApp_ProtocolInit+0x29c>)
   10522:	781b      	ldrb	r3, [r3, #0]
   10524:	b25b      	sxtb	r3, r3
   10526:	4313      	orrs	r3, r2
   10528:	b25b      	sxtb	r3, r3
   1052a:	b2da      	uxtb	r2, r3
   1052c:	4b12      	ldr	r3, [pc, #72]	; (10578 <MiApp_ProtocolInit+0x29c>)
   1052e:	701a      	strb	r2, [r3, #0]
	ENABLE_TRX_IRQ();
   10530:	2100      	movs	r1, #0
   10532:	2000      	movs	r0, #0
   10534:	4b12      	ldr	r3, [pc, #72]	; (10580 <MiApp_ProtocolInit+0x2a4>)
   10536:	4798      	blx	r3
	return true;
   10538:	2301      	movs	r3, #1
}
   1053a:	0018      	movs	r0, r3
   1053c:	46bd      	mov	sp, r7
   1053e:	b00c      	add	sp, #48	; 0x30
   10540:	bd80      	pop	{r7, pc}
   10542:	46c0      	nop			; (mov r8, r8)
   10544:	2000154c 	.word	0x2000154c
   10548:	0080a00c 	.word	0x0080a00c
   1054c:	0080a040 	.word	0x0080a040
   10550:	20001578 	.word	0x20001578
   10554:	20001414 	.word	0x20001414
   10558:	2000154d 	.word	0x2000154d
   1055c:	200014f8 	.word	0x200014f8
   10560:	200014f4 	.word	0x200014f4
   10564:	00001111 	.word	0x00001111
   10568:	0000e97d 	.word	0x0000e97d
   1056c:	0000e0bd 	.word	0x0000e0bd
   10570:	200007c1 	.word	0x200007c1
   10574:	0001090d 	.word	0x0001090d
   10578:	200014f0 	.word	0x200014f0
   1057c:	200004a5 	.word	0x200004a5
   10580:	000111bd 	.word	0x000111bd

00010584 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
   10584:	b5b0      	push	{r4, r5, r7, lr}
   10586:	b088      	sub	sp, #32
   10588:	af02      	add	r7, sp, #8
   1058a:	0004      	movs	r4, r0
   1058c:	1d38      	adds	r0, r7, #4
   1058e:	8001      	strh	r1, [r0, #0]
   10590:	603a      	str	r2, [r7, #0]
   10592:	0019      	movs	r1, r3
   10594:	1dfb      	adds	r3, r7, #7
   10596:	1c22      	adds	r2, r4, #0
   10598:	701a      	strb	r2, [r3, #0]
   1059a:	1dbb      	adds	r3, r7, #6
   1059c:	1c0a      	adds	r2, r1, #0
   1059e:	701a      	strb	r2, [r3, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
   105a0:	2308      	movs	r3, #8
   105a2:	18fb      	adds	r3, r7, r3
   105a4:	2200      	movs	r2, #0
   105a6:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
   105a8:	1dbb      	adds	r3, r7, #6
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	1c1a      	adds	r2, r3, #0
   105ae:	2303      	movs	r3, #3
   105b0:	4013      	ands	r3, r2
   105b2:	b2da      	uxtb	r2, r3
   105b4:	2308      	movs	r3, #8
   105b6:	18fb      	adds	r3, r7, r3
   105b8:	2103      	movs	r1, #3
   105ba:	400a      	ands	r2, r1
   105bc:	0010      	movs	r0, r2
   105be:	781a      	ldrb	r2, [r3, #0]
   105c0:	2103      	movs	r1, #3
   105c2:	438a      	bics	r2, r1
   105c4:	1c11      	adds	r1, r2, #0
   105c6:	1c02      	adds	r2, r0, #0
   105c8:	430a      	orrs	r2, r1
   105ca:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
   105cc:	1dfb      	adds	r3, r7, #7
   105ce:	781b      	ldrb	r3, [r3, #0]
   105d0:	2201      	movs	r2, #1
   105d2:	4053      	eors	r3, r2
   105d4:	b2da      	uxtb	r2, r3
   105d6:	2308      	movs	r3, #8
   105d8:	18fb      	adds	r3, r7, r3
   105da:	2101      	movs	r1, #1
   105dc:	400a      	ands	r2, r1
   105de:	0150      	lsls	r0, r2, #5
   105e0:	781a      	ldrb	r2, [r3, #0]
   105e2:	2120      	movs	r1, #32
   105e4:	438a      	bics	r2, r1
   105e6:	1c11      	adds	r1, r2, #0
   105e8:	1c02      	adds	r2, r0, #0
   105ea:	430a      	orrs	r2, r1
   105ec:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.broadcast = Broadcast;
   105ee:	2308      	movs	r3, #8
   105f0:	18fb      	adds	r3, r7, r3
   105f2:	1dfa      	adds	r2, r7, #7
   105f4:	7812      	ldrb	r2, [r2, #0]
   105f6:	2101      	movs	r1, #1
   105f8:	400a      	ands	r2, r1
   105fa:	0090      	lsls	r0, r2, #2
   105fc:	781a      	ldrb	r2, [r3, #0]
   105fe:	2104      	movs	r1, #4
   10600:	438a      	bics	r2, r1
   10602:	1c11      	adds	r1, r2, #0
   10604:	1c02      	adds	r2, r0, #0
   10606:	430a      	orrs	r2, r1
   10608:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
   1060a:	2308      	movs	r3, #8
   1060c:	18fb      	adds	r3, r7, r3
   1060e:	2228      	movs	r2, #40	; 0x28
   10610:	18ba      	adds	r2, r7, r2
   10612:	7812      	ldrb	r2, [r2, #0]
   10614:	2101      	movs	r1, #1
   10616:	400a      	ands	r2, r1
   10618:	00d0      	lsls	r0, r2, #3
   1061a:	781a      	ldrb	r2, [r3, #0]
   1061c:	2108      	movs	r1, #8
   1061e:	438a      	bics	r2, r1
   10620:	1c11      	adds	r1, r2, #0
   10622:	1c02      	adds	r2, r0, #0
   10624:	430a      	orrs	r2, r1
   10626:	701a      	strb	r2, [r3, #0]
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
   10628:	2308      	movs	r3, #8
   1062a:	18fb      	adds	r3, r7, r3
   1062c:	2200      	movs	r2, #0
   1062e:	725a      	strb	r2, [r3, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
   10630:	1dfb      	adds	r3, r7, #7
   10632:	781a      	ldrb	r2, [r3, #0]
   10634:	2308      	movs	r3, #8
   10636:	18fb      	adds	r3, r7, r3
   10638:	721a      	strb	r2, [r3, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
   1063a:	1dfb      	adds	r3, r7, #7
   1063c:	781b      	ldrb	r3, [r3, #0]
   1063e:	2201      	movs	r2, #1
   10640:	4053      	eors	r3, r2
   10642:	b2da      	uxtb	r2, r3
   10644:	2308      	movs	r3, #8
   10646:	18fb      	adds	r3, r7, r3
   10648:	2101      	movs	r1, #1
   1064a:	400a      	ands	r2, r1
   1064c:	0190      	lsls	r0, r2, #6
   1064e:	781a      	ldrb	r2, [r3, #0]
   10650:	2140      	movs	r1, #64	; 0x40
   10652:	438a      	bics	r2, r1
   10654:	1c11      	adds	r1, r2, #0
   10656:	1c02      	adds	r2, r0, #0
   10658:	430a      	orrs	r2, r1
   1065a:	701a      	strb	r2, [r3, #0]
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
   1065c:	2308      	movs	r3, #8
   1065e:	18fb      	adds	r3, r7, r3
   10660:	781a      	ldrb	r2, [r3, #0]
   10662:	2180      	movs	r1, #128	; 0x80
   10664:	4249      	negs	r1, r1
   10666:	430a      	orrs	r2, r1
   10668:	701a      	strb	r2, [r3, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;
   1066a:	2308      	movs	r3, #8
   1066c:	18fb      	adds	r3, r7, r3
   1066e:	683a      	ldr	r2, [r7, #0]
   10670:	605a      	str	r2, [r3, #4]

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
   10672:	1d3b      	adds	r3, r7, #4
   10674:	881a      	ldrh	r2, [r3, #0]
   10676:	2308      	movs	r3, #8
   10678:	18fb      	adds	r3, r7, r3
   1067a:	815a      	strh	r2, [r3, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
   1067c:	4b0c      	ldr	r3, [pc, #48]	; (106b0 <SendPacket+0x12c>)
   1067e:	781b      	ldrb	r3, [r3, #0]
   10680:	2217      	movs	r2, #23
   10682:	18bc      	adds	r4, r7, r2
   10684:	490b      	ldr	r1, [pc, #44]	; (106b4 <SendPacket+0x130>)
   10686:	2208      	movs	r2, #8
   10688:	18ba      	adds	r2, r7, r2
   1068a:	9300      	str	r3, [sp, #0]
   1068c:	000b      	movs	r3, r1
   1068e:	6810      	ldr	r0, [r2, #0]
   10690:	6851      	ldr	r1, [r2, #4]
   10692:	6892      	ldr	r2, [r2, #8]
   10694:	4d08      	ldr	r5, [pc, #32]	; (106b8 <SendPacket+0x134>)
   10696:	47a8      	blx	r5
   10698:	0003      	movs	r3, r0
   1069a:	7023      	strb	r3, [r4, #0]
    TxData = 0;
   1069c:	4b04      	ldr	r3, [pc, #16]	; (106b0 <SendPacket+0x12c>)
   1069e:	2200      	movs	r2, #0
   106a0:	701a      	strb	r2, [r3, #0]
    
    return status;
   106a2:	2317      	movs	r3, #23
   106a4:	18fb      	adds	r3, r7, r3
   106a6:	781b      	ldrb	r3, [r3, #0]
}
   106a8:	0018      	movs	r0, r3
   106aa:	46bd      	mov	sp, r7
   106ac:	b006      	add	sp, #24
   106ae:	bdb0      	pop	{r4, r5, r7, pc}
   106b0:	2000154d 	.word	0x2000154d
   106b4:	20001550 	.word	0x20001550
   106b8:	0000ea35 	.word	0x0000ea35

000106bc <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
   106bc:	b580      	push	{r7, lr}
   106be:	b084      	sub	sp, #16
   106c0:	af00      	add	r7, sp, #0
   106c2:	6078      	str	r0, [r7, #4]
   106c4:	6039      	str	r1, [r7, #0]
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
   106c6:	230f      	movs	r3, #15
   106c8:	18fb      	adds	r3, r7, r3
   106ca:	2200      	movs	r2, #0
   106cc:	701a      	strb	r2, [r3, #0]
   106ce:	e016      	b.n	106fe <isSameAddress+0x42>
    {
        if( Address1[i] != Address2[i] )
   106d0:	230f      	movs	r3, #15
   106d2:	18fb      	adds	r3, r7, r3
   106d4:	781b      	ldrb	r3, [r3, #0]
   106d6:	687a      	ldr	r2, [r7, #4]
   106d8:	18d3      	adds	r3, r2, r3
   106da:	781a      	ldrb	r2, [r3, #0]
   106dc:	230f      	movs	r3, #15
   106de:	18fb      	adds	r3, r7, r3
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	6839      	ldr	r1, [r7, #0]
   106e4:	18cb      	adds	r3, r1, r3
   106e6:	781b      	ldrb	r3, [r3, #0]
   106e8:	429a      	cmp	r2, r3
   106ea:	d001      	beq.n	106f0 <isSameAddress+0x34>
        {
            return false;
   106ec:	2300      	movs	r3, #0
   106ee:	e00c      	b.n	1070a <isSameAddress+0x4e>
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
   106f0:	230f      	movs	r3, #15
   106f2:	18fb      	adds	r3, r7, r3
   106f4:	781a      	ldrb	r2, [r3, #0]
   106f6:	230f      	movs	r3, #15
   106f8:	18fb      	adds	r3, r7, r3
   106fa:	3201      	adds	r2, #1
   106fc:	701a      	strb	r2, [r3, #0]
   106fe:	230f      	movs	r3, #15
   10700:	18fb      	adds	r3, r7, r3
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	2b07      	cmp	r3, #7
   10706:	d9e3      	bls.n	106d0 <isSameAddress+0x14>
        }
    }
    return true;
   10708:	2301      	movs	r3, #1
}
   1070a:	0018      	movs	r0, r3
   1070c:	46bd      	mov	sp, r7
   1070e:	b004      	add	sp, #16
   10710:	bd80      	pop	{r7, pc}
	...

00010714 <MiApp_StartConnection>:

#if defined(ENABLE_HAND_SHAKE)
     
    bool MiApp_StartConnection(uint8_t Mode, uint8_t ScanDuration, uint32_t ChannelMap)
    {
   10714:	b580      	push	{r7, lr}
   10716:	b084      	sub	sp, #16
   10718:	af00      	add	r7, sp, #0
   1071a:	603a      	str	r2, [r7, #0]
   1071c:	1dfb      	adds	r3, r7, #7
   1071e:	1c02      	adds	r2, r0, #0
   10720:	701a      	strb	r2, [r3, #0]
   10722:	1dbb      	adds	r3, r7, #6
   10724:	1c0a      	adds	r2, r1, #0
   10726:	701a      	strb	r2, [r3, #0]
		#if defined(PROTOCOL_STAR)
			role = PanCoordinator;
		#endif
        switch(Mode)
   10728:	1dfb      	adds	r3, r7, #7
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	2b01      	cmp	r3, #1
   1072e:	d017      	beq.n	10760 <MiApp_StartConnection+0x4c>
   10730:	2b02      	cmp	r3, #2
   10732:	d017      	beq.n	10764 <MiApp_StartConnection+0x50>
   10734:	2b00      	cmp	r3, #0
   10736:	d002      	beq.n	1073e <MiApp_StartConnection+0x2a>
            case START_CONN_CS_SCN:
                // Carrier sense scan is not supported for current available transceivers
                return false;
            
            default:
                break;
   10738:	46c0      	nop			; (mov r8, r8)
        }    
        return false;
   1073a:	2300      	movs	r3, #0
   1073c:	e013      	b.n	10766 <MiApp_StartConnection+0x52>
                        myPANID.Val = MY_PAN_ID;
   1073e:	4b0c      	ldr	r3, [pc, #48]	; (10770 <MiApp_StartConnection+0x5c>)
   10740:	4a0c      	ldr	r2, [pc, #48]	; (10774 <MiApp_StartConnection+0x60>)
   10742:	801a      	strh	r2, [r3, #0]
                        uint16_t tmp = 0xFFFF;
   10744:	230e      	movs	r3, #14
   10746:	18fb      	adds	r3, r7, r3
   10748:	2201      	movs	r2, #1
   1074a:	4252      	negs	r2, r2
   1074c:	801a      	strh	r2, [r3, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   1074e:	4a08      	ldr	r2, [pc, #32]	; (10770 <MiApp_StartConnection+0x5c>)
   10750:	230e      	movs	r3, #14
   10752:	18fb      	adds	r3, r7, r3
   10754:	0011      	movs	r1, r2
   10756:	0018      	movs	r0, r3
   10758:	4b07      	ldr	r3, [pc, #28]	; (10778 <MiApp_StartConnection+0x64>)
   1075a:	4798      	blx	r3
                return true;
   1075c:	2301      	movs	r3, #1
   1075e:	e002      	b.n	10766 <MiApp_StartConnection+0x52>
                    return false;
   10760:	2300      	movs	r3, #0
   10762:	e000      	b.n	10766 <MiApp_StartConnection+0x52>
                return false;
   10764:	2300      	movs	r3, #0
    }
   10766:	0018      	movs	r0, r3
   10768:	46bd      	mov	sp, r7
   1076a:	b004      	add	sp, #16
   1076c:	bd80      	pop	{r7, pc}
   1076e:	46c0      	nop			; (mov r8, r8)
   10770:	200014f4 	.word	0x200014f4
   10774:	00001111 	.word	0x00001111
   10778:	0000e0bd 	.word	0x0000e0bd

0001077c <MiApp_EstablishConnection>:
     *      If more than one connections have been established through this function call, the
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
   1077c:	b590      	push	{r4, r7, lr}
   1077e:	b089      	sub	sp, #36	; 0x24
   10780:	af02      	add	r7, sp, #8
   10782:	0002      	movs	r2, r0
   10784:	1dfb      	adds	r3, r7, #7
   10786:	701a      	strb	r2, [r3, #0]
   10788:	1dbb      	adds	r3, r7, #6
   1078a:	1c0a      	adds	r2, r1, #0
   1078c:	701a      	strb	r2, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
   1078e:	2315      	movs	r3, #21
   10790:	18fb      	adds	r3, r7, r3
   10792:	4a4a      	ldr	r2, [pc, #296]	; (108bc <MiApp_EstablishConnection+0x140>)
   10794:	7812      	ldrb	r2, [r2, #0]
   10796:	701a      	strb	r2, [r3, #0]
        uint8_t    retry = CONNECTION_RETRY_TIMES;
   10798:	2317      	movs	r3, #23
   1079a:	18fb      	adds	r3, r7, r3
   1079c:	2203      	movs	r2, #3
   1079e:	701a      	strb	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
   107a0:	2316      	movs	r3, #22
   107a2:	18fb      	adds	r3, r7, r3
   107a4:	2200      	movs	r2, #0
   107a6:	701a      	strb	r2, [r3, #0]
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1.Val = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
   107a8:	1dbb      	adds	r3, r7, #6
   107aa:	781b      	ldrb	r3, [r3, #0]
   107ac:	2b01      	cmp	r3, #1
   107ae:	d101      	bne.n	107b4 <MiApp_EstablishConnection+0x38>
        {
            return 0xFF;
   107b0:	23ff      	movs	r3, #255	; 0xff
   107b2:	e07e      	b.n	108b2 <MiApp_EstablishConnection+0x136>
        }
       
        t1.Val = MiWi_TickGet();
   107b4:	4b42      	ldr	r3, [pc, #264]	; (108c0 <MiApp_EstablishConnection+0x144>)
   107b6:	4798      	blx	r3
   107b8:	0003      	movs	r3, r0
   107ba:	613b      	str	r3, [r7, #16]

        t1.Val -= (ONE_SECOND);
   107bc:	693b      	ldr	r3, [r7, #16]
   107be:	3b7c      	subs	r3, #124	; 0x7c
   107c0:	613b      	str	r3, [r7, #16]
        ConnMode = ENABLE_ALL_CONN;
   107c2:	4b3e      	ldr	r3, [pc, #248]	; (108bc <MiApp_EstablishConnection+0x140>)
   107c4:	2200      	movs	r2, #0
   107c6:	701a      	strb	r2, [r3, #0]
        P2PStatus.bits.SearchConnection = 1;
   107c8:	4a3e      	ldr	r2, [pc, #248]	; (108c4 <MiApp_EstablishConnection+0x148>)
   107ca:	7813      	ldrb	r3, [r2, #0]
   107cc:	2110      	movs	r1, #16
   107ce:	430b      	orrs	r3, r1
   107d0:	7013      	strb	r3, [r2, #0]
        while( P2PStatus.bits.SearchConnection )
   107d2:	e060      	b.n	10896 <MiApp_EstablishConnection+0x11a>
        {
            t2.Val = MiWi_TickGet();
   107d4:	4b3a      	ldr	r3, [pc, #232]	; (108c0 <MiApp_EstablishConnection+0x144>)
   107d6:	4798      	blx	r3
   107d8:	0003      	movs	r3, r0
   107da:	60fb      	str	r3, [r7, #12]
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
   107dc:	68fa      	ldr	r2, [r7, #12]
   107de:	693b      	ldr	r3, [r7, #16]
   107e0:	1ad3      	subs	r3, r2, r3
   107e2:	2b7c      	cmp	r3, #124	; 0x7c
   107e4:	d951      	bls.n	1088a <MiApp_EstablishConnection+0x10e>
            {   
                t1.Val = t2.Val;
   107e6:	68fb      	ldr	r3, [r7, #12]
   107e8:	613b      	str	r3, [r7, #16]

                if( connectionInterval-- > 0 )
   107ea:	2316      	movs	r3, #22
   107ec:	18fb      	adds	r3, r7, r3
   107ee:	781b      	ldrb	r3, [r3, #0]
   107f0:	2216      	movs	r2, #22
   107f2:	18ba      	adds	r2, r7, r2
   107f4:	1e59      	subs	r1, r3, #1
   107f6:	7011      	strb	r1, [r2, #0]
   107f8:	2b00      	cmp	r3, #0
   107fa:	d006      	beq.n	1080a <MiApp_EstablishConnection+0x8e>
   107fc:	2317      	movs	r3, #23
   107fe:	18fb      	adds	r3, r7, r3
   10800:	2217      	movs	r2, #23
   10802:	18ba      	adds	r2, r7, r2
   10804:	7812      	ldrb	r2, [r2, #0]
   10806:	701a      	strb	r2, [r3, #0]
                {
                    continue;
   10808:	e045      	b.n	10896 <MiApp_EstablishConnection+0x11a>
                }
                connectionInterval = CONNECTION_INTERVAL-1;
   1080a:	2316      	movs	r3, #22
   1080c:	18fb      	adds	r3, r7, r3
   1080e:	2201      	movs	r2, #1
   10810:	701a      	strb	r2, [r3, #0]
                if( retry-- == 0 )
   10812:	2317      	movs	r3, #23
   10814:	18fb      	adds	r3, r7, r3
   10816:	781b      	ldrb	r3, [r3, #0]
   10818:	2217      	movs	r2, #23
   1081a:	18ba      	adds	r2, r7, r2
   1081c:	1e59      	subs	r1, r3, #1
   1081e:	7011      	strb	r1, [r2, #0]
   10820:	2b00      	cmp	r3, #0
   10822:	d106      	bne.n	10832 <MiApp_EstablishConnection+0xb6>
                {

                    P2PStatus.bits.SearchConnection = 0;
   10824:	4a27      	ldr	r2, [pc, #156]	; (108c4 <MiApp_EstablishConnection+0x148>)
   10826:	7813      	ldrb	r3, [r2, #0]
   10828:	2110      	movs	r1, #16
   1082a:	438b      	bics	r3, r1
   1082c:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
   1082e:	23ff      	movs	r3, #255	; 0xff
   10830:	e03f      	b.n	108b2 <MiApp_EstablishConnection+0x136>
                }
                MiApp_FlushTx();
   10832:	4b25      	ldr	r3, [pc, #148]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   10834:	2200      	movs	r2, #0
   10836:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
   10838:	4b23      	ldr	r3, [pc, #140]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   1083a:	781b      	ldrb	r3, [r3, #0]
   1083c:	1c5a      	adds	r2, r3, #1
   1083e:	b2d1      	uxtb	r1, r2
   10840:	4a21      	ldr	r2, [pc, #132]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   10842:	7011      	strb	r1, [r2, #0]
   10844:	001a      	movs	r2, r3
   10846:	4b21      	ldr	r3, [pc, #132]	; (108cc <MiApp_EstablishConnection+0x150>)
   10848:	2181      	movs	r1, #129	; 0x81
   1084a:	5499      	strb	r1, [r3, r2]
                MiApp_WriteData(currentChannel);
   1084c:	4b1e      	ldr	r3, [pc, #120]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   1084e:	781b      	ldrb	r3, [r3, #0]
   10850:	1c5a      	adds	r2, r3, #1
   10852:	b2d1      	uxtb	r1, r2
   10854:	4a1c      	ldr	r2, [pc, #112]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   10856:	7011      	strb	r1, [r2, #0]
   10858:	001a      	movs	r2, r3
   1085a:	4b1d      	ldr	r3, [pc, #116]	; (108d0 <MiApp_EstablishConnection+0x154>)
   1085c:	7819      	ldrb	r1, [r3, #0]
   1085e:	4b1b      	ldr	r3, [pc, #108]	; (108cc <MiApp_EstablishConnection+0x150>)
   10860:	5499      	strb	r1, [r3, r2]
                MiApp_WriteData(P2PCapacityInfo);
   10862:	4b19      	ldr	r3, [pc, #100]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   10864:	781b      	ldrb	r3, [r3, #0]
   10866:	1c5a      	adds	r2, r3, #1
   10868:	b2d1      	uxtb	r1, r2
   1086a:	4a17      	ldr	r2, [pc, #92]	; (108c8 <MiApp_EstablishConnection+0x14c>)
   1086c:	7011      	strb	r1, [r2, #0]
   1086e:	001a      	movs	r2, r3
   10870:	4b18      	ldr	r3, [pc, #96]	; (108d4 <MiApp_EstablishConnection+0x158>)
   10872:	7819      	ldrb	r1, [r3, #0]
   10874:	4b15      	ldr	r3, [pc, #84]	; (108cc <MiApp_EstablishConnection+0x150>)
   10876:	5499      	strb	r1, [r3, r2]
                        {
                            MiApp_SetChannel( ActiveScanResults[ActiveScanIndex].Channel );
                            SendPacket(false, ActiveScanResults[ActiveScanIndex].PANID, ActiveScanResults[ActiveScanIndex].Address, true, false);
                        }
                    #else
                        SendPacket(true, myPANID, NULL, true, false);
   10878:	4b17      	ldr	r3, [pc, #92]	; (108d8 <MiApp_EstablishConnection+0x15c>)
   1087a:	8819      	ldrh	r1, [r3, #0]
   1087c:	2300      	movs	r3, #0
   1087e:	9300      	str	r3, [sp, #0]
   10880:	2301      	movs	r3, #1
   10882:	2200      	movs	r2, #0
   10884:	2001      	movs	r0, #1
   10886:	4c15      	ldr	r4, [pc, #84]	; (108dc <MiApp_EstablishConnection+0x160>)
   10888:	47a0      	blx	r4
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
   1088a:	4b15      	ldr	r3, [pc, #84]	; (108e0 <MiApp_EstablishConnection+0x164>)
   1088c:	4798      	blx	r3
   1088e:	1e03      	subs	r3, r0, #0
   10890:	d001      	beq.n	10896 <MiApp_EstablishConnection+0x11a>
            {
                MiApp_DiscardMessage();
   10892:	4b14      	ldr	r3, [pc, #80]	; (108e4 <MiApp_EstablishConnection+0x168>)
   10894:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
   10896:	4b0b      	ldr	r3, [pc, #44]	; (108c4 <MiApp_EstablishConnection+0x148>)
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	06db      	lsls	r3, r3, #27
   1089c:	0fdb      	lsrs	r3, r3, #31
   1089e:	b2db      	uxtb	r3, r3
   108a0:	2b00      	cmp	r3, #0
   108a2:	d197      	bne.n	107d4 <MiApp_EstablishConnection+0x58>
            }     
            //P2PTasks();
        }
      
        ConnMode = tmpConnectionMode;
   108a4:	4b05      	ldr	r3, [pc, #20]	; (108bc <MiApp_EstablishConnection+0x140>)
   108a6:	2215      	movs	r2, #21
   108a8:	18ba      	adds	r2, r7, r2
   108aa:	7812      	ldrb	r2, [r2, #0]
   108ac:	701a      	strb	r2, [r3, #0]
			 else
			 {
				 role = EndDevice;
			 }
		#endif
        return LatestConnection;
   108ae:	4b0e      	ldr	r3, [pc, #56]	; (108e8 <MiApp_EstablishConnection+0x16c>)
   108b0:	781b      	ldrb	r3, [r3, #0]
        
    }
   108b2:	0018      	movs	r0, r3
   108b4:	46bd      	mov	sp, r7
   108b6:	b007      	add	sp, #28
   108b8:	bd90      	pop	{r4, r7, pc}
   108ba:	46c0      	nop			; (mov r8, r8)
   108bc:	200004a5 	.word	0x200004a5
   108c0:	00016fd1 	.word	0x00016fd1
   108c4:	2000154c 	.word	0x2000154c
   108c8:	2000154d 	.word	0x2000154d
   108cc:	20001550 	.word	0x20001550
   108d0:	200007c1 	.word	0x200007c1
   108d4:	200014f0 	.word	0x200014f0
   108d8:	200014f4 	.word	0x200014f4
   108dc:	00010585 	.word	0x00010585
   108e0:	00010949 	.word	0x00010949
   108e4:	000108ed 	.word	0x000108ed
   108e8:	20001410 	.word	0x20001410

000108ec <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
   108ec:	b580      	push	{r7, lr}
   108ee:	af00      	add	r7, sp, #0
    P2PStatus.bits.RxHasUserData = 0;
   108f0:	4a04      	ldr	r2, [pc, #16]	; (10904 <MiApp_DiscardMessage+0x18>)
   108f2:	7813      	ldrb	r3, [r2, #0]
   108f4:	2108      	movs	r1, #8
   108f6:	438b      	bics	r3, r1
   108f8:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
   108fa:	4b03      	ldr	r3, [pc, #12]	; (10908 <MiApp_DiscardMessage+0x1c>)
   108fc:	4798      	blx	r3
}
   108fe:	46c0      	nop			; (mov r8, r8)
   10900:	46bd      	mov	sp, r7
   10902:	bd80      	pop	{r7, pc}
   10904:	2000154c 	.word	0x2000154c
   10908:	0000f27d 	.word	0x0000f27d

0001090c <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
   1090c:	b580      	push	{r7, lr}
   1090e:	b082      	sub	sp, #8
   10910:	af00      	add	r7, sp, #0
   10912:	0002      	movs	r2, r0
   10914:	1dfb      	adds	r3, r7, #7
   10916:	701a      	strb	r2, [r3, #0]
    if( MiMAC_SetChannel(channel, 0) )
   10918:	1dfb      	adds	r3, r7, #7
   1091a:	781b      	ldrb	r3, [r3, #0]
   1091c:	2100      	movs	r1, #0
   1091e:	0018      	movs	r0, r3
   10920:	4b07      	ldr	r3, [pc, #28]	; (10940 <MiApp_SetChannel+0x34>)
   10922:	4798      	blx	r3
   10924:	1e03      	subs	r3, r0, #0
   10926:	d005      	beq.n	10934 <MiApp_SetChannel+0x28>
    {
        currentChannel = channel;
   10928:	4b06      	ldr	r3, [pc, #24]	; (10944 <MiApp_SetChannel+0x38>)
   1092a:	1dfa      	adds	r2, r7, #7
   1092c:	7812      	ldrb	r2, [r2, #0]
   1092e:	701a      	strb	r2, [r3, #0]
        #if defined(ENABLE_NETWORK_FREEZER)
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
   10930:	2301      	movs	r3, #1
   10932:	e000      	b.n	10936 <MiApp_SetChannel+0x2a>
    }
    return false;
   10934:	2300      	movs	r3, #0
}
   10936:	0018      	movs	r0, r3
   10938:	46bd      	mov	sp, r7
   1093a:	b002      	add	sp, #8
   1093c:	bd80      	pop	{r7, pc}
   1093e:	46c0      	nop			; (mov r8, r8)
   10940:	0000e939 	.word	0x0000e939
   10944:	200007c1 	.word	0x200007c1

00010948 <MiApp_MessageAvailable>:


bool MiApp_MessageAvailable(void)
{ 
   10948:	b580      	push	{r7, lr}
   1094a:	af00      	add	r7, sp, #0
    P2PTasks(); 
   1094c:	4b06      	ldr	r3, [pc, #24]	; (10968 <MiApp_MessageAvailable+0x20>)
   1094e:	4798      	blx	r3
    
    return P2PStatus.bits.RxHasUserData;
   10950:	4b06      	ldr	r3, [pc, #24]	; (1096c <MiApp_MessageAvailable+0x24>)
   10952:	781b      	ldrb	r3, [r3, #0]
   10954:	071b      	lsls	r3, r3, #28
   10956:	0fdb      	lsrs	r3, r3, #31
   10958:	b2db      	uxtb	r3, r3
   1095a:	1e5a      	subs	r2, r3, #1
   1095c:	4193      	sbcs	r3, r2
   1095e:	b2db      	uxtb	r3, r3
}
   10960:	0018      	movs	r0, r3
   10962:	46bd      	mov	sp, r7
   10964:	bd80      	pop	{r7, pc}
   10966:	46c0      	nop			; (mov r8, r8)
   10968:	0000fd81 	.word	0x0000fd81
   1096c:	2000154c 	.word	0x2000154c

00010970 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
   10970:	b590      	push	{r4, r7, lr}
   10972:	b083      	sub	sp, #12
   10974:	af00      	add	r7, sp, #0
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
   10976:	1dbb      	adds	r3, r7, #6
   10978:	2200      	movs	r2, #0
   1097a:	701a      	strb	r2, [r3, #0]
        uint8_t connectionSlot = 0xFF;
   1097c:	1d7b      	adds	r3, r7, #5
   1097e:	22ff      	movs	r2, #255	; 0xff
   10980:	701a      	strb	r2, [r3, #0]
                return STATUS_ACTIVE_SCAN;
            }
        #endif
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
   10982:	1dfb      	adds	r3, r7, #7
   10984:	2200      	movs	r2, #0
   10986:	701a      	strb	r2, [r3, #0]
   10988:	e033      	b.n	109f2 <AddConnection+0x82>
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
   1098a:	1dfb      	adds	r3, r7, #7
   1098c:	781a      	ldrb	r2, [r3, #0]
   1098e:	495d      	ldr	r1, [pc, #372]	; (10b04 <AddConnection+0x194>)
   10990:	2008      	movs	r0, #8
   10992:	0013      	movs	r3, r2
   10994:	009b      	lsls	r3, r3, #2
   10996:	189b      	adds	r3, r3, r2
   10998:	005b      	lsls	r3, r3, #1
   1099a:	18cb      	adds	r3, r1, r3
   1099c:	181b      	adds	r3, r3, r0
   1099e:	785b      	ldrb	r3, [r3, #1]
   109a0:	061b      	lsls	r3, r3, #24
   109a2:	0fdb      	lsrs	r3, r3, #31
   109a4:	b2db      	uxtb	r3, r3
   109a6:	2b00      	cmp	r3, #0
   109a8:	d016      	beq.n	109d8 <AddConnection+0x68>
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   109aa:	4b57      	ldr	r3, [pc, #348]	; (10b08 <AddConnection+0x198>)
   109ac:	6858      	ldr	r0, [r3, #4]
   109ae:	1dfb      	adds	r3, r7, #7
   109b0:	781a      	ldrb	r2, [r3, #0]
   109b2:	0013      	movs	r3, r2
   109b4:	009b      	lsls	r3, r3, #2
   109b6:	189b      	adds	r3, r3, r2
   109b8:	005b      	lsls	r3, r3, #1
   109ba:	4a52      	ldr	r2, [pc, #328]	; (10b04 <AddConnection+0x194>)
   109bc:	189b      	adds	r3, r3, r2
   109be:	0019      	movs	r1, r3
   109c0:	4b52      	ldr	r3, [pc, #328]	; (10b0c <AddConnection+0x19c>)
   109c2:	4798      	blx	r3
   109c4:	1e03      	subs	r3, r0, #0
   109c6:	d00f      	beq.n	109e8 <AddConnection+0x78>
                {
                    connectionSlot = i;
   109c8:	1d7b      	adds	r3, r7, #5
   109ca:	1dfa      	adds	r2, r7, #7
   109cc:	7812      	ldrb	r2, [r2, #0]
   109ce:	701a      	strb	r2, [r3, #0]
                    status = STATUS_EXISTS;
   109d0:	1dbb      	adds	r3, r7, #6
   109d2:	2201      	movs	r2, #1
   109d4:	701a      	strb	r2, [r3, #0]
                    break;
   109d6:	e010      	b.n	109fa <AddConnection+0x8a>
                }
            }
            else if( connectionSlot == 0xFF )
   109d8:	1d7b      	adds	r3, r7, #5
   109da:	781b      	ldrb	r3, [r3, #0]
   109dc:	2bff      	cmp	r3, #255	; 0xff
   109de:	d103      	bne.n	109e8 <AddConnection+0x78>
            {
                // store the first empty slot
                connectionSlot = i;
   109e0:	1d7b      	adds	r3, r7, #5
   109e2:	1dfa      	adds	r2, r7, #7
   109e4:	7812      	ldrb	r2, [r2, #0]
   109e6:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < CONNECTION_SIZE; i++)
   109e8:	1dfb      	adds	r3, r7, #7
   109ea:	781a      	ldrb	r2, [r3, #0]
   109ec:	1dfb      	adds	r3, r7, #7
   109ee:	3201      	adds	r2, #1
   109f0:	701a      	strb	r2, [r3, #0]
   109f2:	1dfb      	adds	r3, r7, #7
   109f4:	781b      	ldrb	r3, [r3, #0]
   109f6:	2b13      	cmp	r3, #19
   109f8:	d9c7      	bls.n	1098a <AddConnection+0x1a>
            }  
        }
            
        if( connectionSlot == 0xFF )
   109fa:	1d7b      	adds	r3, r7, #5
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	2bff      	cmp	r3, #255	; 0xff
   10a00:	d101      	bne.n	10a06 <AddConnection+0x96>
        {
            return STATUS_NOT_ENOUGH_SPACE;
   10a02:	23f1      	movs	r3, #241	; 0xf1
   10a04:	e079      	b.n	10afa <AddConnection+0x18a>
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
   10a06:	4b42      	ldr	r3, [pc, #264]	; (10b10 <AddConnection+0x1a0>)
   10a08:	781b      	ldrb	r3, [r3, #0]
   10a0a:	2b00      	cmp	r3, #0
   10a0c:	d002      	beq.n	10a14 <AddConnection+0xa4>
            {
                return status;
   10a0e:	1dbb      	adds	r3, r7, #6
   10a10:	781b      	ldrb	r3, [r3, #0]
   10a12:	e072      	b.n	10afa <AddConnection+0x18a>
            }
            MyindexinPC = connectionSlot;    
   10a14:	4b3f      	ldr	r3, [pc, #252]	; (10b14 <AddConnection+0x1a4>)
   10a16:	1d7a      	adds	r2, r7, #5
   10a18:	7812      	ldrb	r2, [r2, #0]
   10a1a:	701a      	strb	r2, [r3, #0]
            // store the source address
            for(i = 0; i < 8; i++)
   10a1c:	1dfb      	adds	r3, r7, #7
   10a1e:	2200      	movs	r2, #0
   10a20:	701a      	strb	r2, [r3, #0]
   10a22:	e016      	b.n	10a52 <AddConnection+0xe2>
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
   10a24:	1d7b      	adds	r3, r7, #5
   10a26:	781a      	ldrb	r2, [r3, #0]
   10a28:	1dfb      	adds	r3, r7, #7
   10a2a:	7819      	ldrb	r1, [r3, #0]
   10a2c:	4b36      	ldr	r3, [pc, #216]	; (10b08 <AddConnection+0x198>)
   10a2e:	6858      	ldr	r0, [r3, #4]
   10a30:	1dfb      	adds	r3, r7, #7
   10a32:	781b      	ldrb	r3, [r3, #0]
   10a34:	18c3      	adds	r3, r0, r3
   10a36:	781c      	ldrb	r4, [r3, #0]
   10a38:	4832      	ldr	r0, [pc, #200]	; (10b04 <AddConnection+0x194>)
   10a3a:	0013      	movs	r3, r2
   10a3c:	009b      	lsls	r3, r3, #2
   10a3e:	189b      	adds	r3, r3, r2
   10a40:	005b      	lsls	r3, r3, #1
   10a42:	18c3      	adds	r3, r0, r3
   10a44:	1c22      	adds	r2, r4, #0
   10a46:	545a      	strb	r2, [r3, r1]
            for(i = 0; i < 8; i++)
   10a48:	1dfb      	adds	r3, r7, #7
   10a4a:	781a      	ldrb	r2, [r3, #0]
   10a4c:	1dfb      	adds	r3, r7, #7
   10a4e:	3201      	adds	r2, #1
   10a50:	701a      	strb	r2, [r3, #0]
   10a52:	1dfb      	adds	r3, r7, #7
   10a54:	781b      	ldrb	r3, [r3, #0]
   10a56:	2b07      	cmp	r3, #7
   10a58:	d9e4      	bls.n	10a24 <AddConnection+0xb4>
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
   10a5a:	1d7b      	adds	r3, r7, #5
   10a5c:	781a      	ldrb	r2, [r3, #0]
   10a5e:	4929      	ldr	r1, [pc, #164]	; (10b04 <AddConnection+0x194>)
   10a60:	2008      	movs	r0, #8
   10a62:	0013      	movs	r3, r2
   10a64:	009b      	lsls	r3, r3, #2
   10a66:	189b      	adds	r3, r3, r2
   10a68:	005b      	lsls	r3, r3, #1
   10a6a:	18cb      	adds	r3, r1, r3
   10a6c:	181b      	adds	r3, r3, r0
   10a6e:	785a      	ldrb	r2, [r3, #1]
   10a70:	2180      	movs	r1, #128	; 0x80
   10a72:	4249      	negs	r1, r1
   10a74:	430a      	orrs	r2, r1
   10a76:	705a      	strb	r2, [r3, #1]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
   10a78:	1d7b      	adds	r3, r7, #5
   10a7a:	781a      	ldrb	r2, [r3, #0]
   10a7c:	4b22      	ldr	r3, [pc, #136]	; (10b08 <AddConnection+0x198>)
   10a7e:	689b      	ldr	r3, [r3, #8]
   10a80:	3302      	adds	r3, #2
   10a82:	781b      	ldrb	r3, [r3, #0]
   10a84:	1c19      	adds	r1, r3, #0
   10a86:	2301      	movs	r3, #1
   10a88:	400b      	ands	r3, r1
   10a8a:	b2d9      	uxtb	r1, r3
   10a8c:	481d      	ldr	r0, [pc, #116]	; (10b04 <AddConnection+0x194>)
   10a8e:	2408      	movs	r4, #8
   10a90:	0013      	movs	r3, r2
   10a92:	009b      	lsls	r3, r3, #2
   10a94:	189b      	adds	r3, r3, r2
   10a96:	005b      	lsls	r3, r3, #1
   10a98:	18c3      	adds	r3, r0, r3
   10a9a:	191b      	adds	r3, r3, r4
   10a9c:	2201      	movs	r2, #1
   10a9e:	4011      	ands	r1, r2
   10aa0:	0008      	movs	r0, r1
   10aa2:	785a      	ldrb	r2, [r3, #1]
   10aa4:	2101      	movs	r1, #1
   10aa6:	438a      	bics	r2, r1
   10aa8:	1c11      	adds	r1, r2, #0
   10aaa:	1c02      	adds	r2, r0, #0
   10aac:	430a      	orrs	r2, r1
   10aae:	705a      	strb	r2, [r3, #1]
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
                }
            #endif
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
   10ab0:	1d7b      	adds	r3, r7, #5
   10ab2:	781a      	ldrb	r2, [r3, #0]
   10ab4:	4b14      	ldr	r3, [pc, #80]	; (10b08 <AddConnection+0x198>)
   10ab6:	689b      	ldr	r3, [r3, #8]
   10ab8:	78d8      	ldrb	r0, [r3, #3]
   10aba:	4912      	ldr	r1, [pc, #72]	; (10b04 <AddConnection+0x194>)
   10abc:	0013      	movs	r3, r2
   10abe:	009b      	lsls	r3, r3, #2
   10ac0:	189b      	adds	r3, r3, r2
   10ac2:	005b      	lsls	r3, r3, #1
   10ac4:	18cb      	adds	r3, r1, r3
   10ac6:	3308      	adds	r3, #8
   10ac8:	1c02      	adds	r2, r0, #0
   10aca:	701a      	strb	r2, [r3, #0]
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
   10acc:	1d7b      	adds	r3, r7, #5
   10ace:	781a      	ldrb	r2, [r3, #0]
   10ad0:	4b11      	ldr	r3, [pc, #68]	; (10b18 <AddConnection+0x1a8>)
   10ad2:	0092      	lsls	r2, r2, #2
   10ad4:	2100      	movs	r1, #0
   10ad6:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
   10ad8:	4b10      	ldr	r3, [pc, #64]	; (10b1c <AddConnection+0x1ac>)
   10ada:	1d7a      	adds	r2, r7, #5
   10adc:	7812      	ldrb	r2, [r2, #0]
   10ade:	701a      	strb	r2, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
   10ae0:	4a0f      	ldr	r2, [pc, #60]	; (10b20 <AddConnection+0x1b0>)
   10ae2:	7813      	ldrb	r3, [r2, #0]
   10ae4:	2110      	movs	r1, #16
   10ae6:	438b      	bics	r3, r1
   10ae8:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
   10aea:	4b0e      	ldr	r3, [pc, #56]	; (10b24 <AddConnection+0x1b4>)
   10aec:	4798      	blx	r3
   10aee:	0003      	movs	r3, r0
   10af0:	001a      	movs	r2, r3
   10af2:	4b0d      	ldr	r3, [pc, #52]	; (10b28 <AddConnection+0x1b8>)
   10af4:	701a      	strb	r2, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
   10af6:	1dbb      	adds	r3, r7, #6
   10af8:	781b      	ldrb	r3, [r3, #0]
    }
   10afa:	0018      	movs	r0, r3
   10afc:	46bd      	mov	sp, r7
   10afe:	b003      	add	sp, #12
   10b00:	bd90      	pop	{r4, r7, pc}
   10b02:	46c0      	nop			; (mov r8, r8)
   10b04:	20001414 	.word	0x20001414
   10b08:	20001580 	.word	0x20001580
   10b0c:	000106bd 	.word	0x000106bd
   10b10:	200004a5 	.word	0x200004a5
   10b14:	20001548 	.word	0x20001548
   10b18:	200014f8 	.word	0x200014f8
   10b1c:	20001410 	.word	0x20001410
   10b20:	2000154c 	.word	0x2000154c
   10b24:	0000fd21 	.word	0x0000fd21
   10b28:	200014f7 	.word	0x200014f7

00010b2c <MiApp_ConnectionMode>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
   10b2c:	b580      	push	{r7, lr}
   10b2e:	b082      	sub	sp, #8
   10b30:	af00      	add	r7, sp, #0
   10b32:	0002      	movs	r2, r0
   10b34:	1dfb      	adds	r3, r7, #7
   10b36:	701a      	strb	r2, [r3, #0]
    if( Mode > 3 )
   10b38:	1dfb      	adds	r3, r7, #7
   10b3a:	781b      	ldrb	r3, [r3, #0]
   10b3c:	2b03      	cmp	r3, #3
   10b3e:	d813      	bhi.n	10b68 <MiApp_ConnectionMode+0x3c>
    {
        return;
    }
    ConnMode = Mode;
   10b40:	4b0b      	ldr	r3, [pc, #44]	; (10b70 <MiApp_ConnectionMode+0x44>)
   10b42:	1dfa      	adds	r2, r7, #7
   10b44:	7812      	ldrb	r2, [r2, #0]
   10b46:	701a      	strb	r2, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
   10b48:	4b0a      	ldr	r3, [pc, #40]	; (10b74 <MiApp_ConnectionMode+0x48>)
   10b4a:	781b      	ldrb	r3, [r3, #0]
   10b4c:	b25b      	sxtb	r3, r3
   10b4e:	220f      	movs	r2, #15
   10b50:	4013      	ands	r3, r2
   10b52:	b25a      	sxtb	r2, r3
   10b54:	4b06      	ldr	r3, [pc, #24]	; (10b70 <MiApp_ConnectionMode+0x44>)
   10b56:	781b      	ldrb	r3, [r3, #0]
   10b58:	011b      	lsls	r3, r3, #4
   10b5a:	b25b      	sxtb	r3, r3
   10b5c:	4313      	orrs	r3, r2
   10b5e:	b25b      	sxtb	r3, r3
   10b60:	b2da      	uxtb	r2, r3
   10b62:	4b04      	ldr	r3, [pc, #16]	; (10b74 <MiApp_ConnectionMode+0x48>)
   10b64:	701a      	strb	r2, [r3, #0]
   10b66:	e000      	b.n	10b6a <MiApp_ConnectionMode+0x3e>
        return;
   10b68:	46c0      	nop			; (mov r8, r8)
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
   10b6a:	46bd      	mov	sp, r7
   10b6c:	b002      	add	sp, #8
   10b6e:	bd80      	pop	{r7, pc}
   10b70:	200004a5 	.word	0x200004a5
   10b74:	200014f0 	.word	0x200014f0

00010b78 <iot_message_reportInfo>:

}


cJSON* iot_message_reportInfo(char* device_type, char* mac_addr, int report_data_num, NodeInfo data_info[])
{
   10b78:	b590      	push	{r4, r7, lr}
   10b7a:	b087      	sub	sp, #28
   10b7c:	af00      	add	r7, sp, #0
   10b7e:	60f8      	str	r0, [r7, #12]
   10b80:	60b9      	str	r1, [r7, #8]
   10b82:	607a      	str	r2, [r7, #4]
   10b84:	603b      	str	r3, [r7, #0]
	cJSON *json2CloudData;
	cJSON *json2CloudNodeData;
	cJSON *json2CloudDataArray1;
	
	json2CloudData=cJSON_CreateObject();
   10b86:	4b3f      	ldr	r3, [pc, #252]	; (10c84 <iot_message_reportInfo+0x10c>)
   10b88:	4798      	blx	r3
   10b8a:	0003      	movs	r3, r0
   10b8c:	617b      	str	r3, [r7, #20]
	json2CloudDataArray1=cJSON_CreateArray();
   10b8e:	4b3e      	ldr	r3, [pc, #248]	; (10c88 <iot_message_reportInfo+0x110>)
   10b90:	4798      	blx	r3
   10b92:	0003      	movs	r3, r0
   10b94:	613b      	str	r3, [r7, #16]

	if((json2CloudData == NULL) || (json2CloudDataArray1 == NULL))
   10b96:	697b      	ldr	r3, [r7, #20]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	d002      	beq.n	10ba2 <iot_message_reportInfo+0x2a>
   10b9c:	693b      	ldr	r3, [r7, #16]
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d104      	bne.n	10bac <iot_message_reportInfo+0x34>
	{
		printf("json2CloudData malloc fail");
   10ba2:	4b3a      	ldr	r3, [pc, #232]	; (10c8c <iot_message_reportInfo+0x114>)
   10ba4:	0018      	movs	r0, r3
   10ba6:	4b3a      	ldr	r3, [pc, #232]	; (10c90 <iot_message_reportInfo+0x118>)
   10ba8:	4798      	blx	r3
		while(1);
   10baa:	e7fe      	b.n	10baa <iot_message_reportInfo+0x32>
	}
	if (miwiNodeTemp > 0)
   10bac:	4b39      	ldr	r3, [pc, #228]	; (10c94 <iot_message_reportInfo+0x11c>)
   10bae:	681b      	ldr	r3, [r3, #0]
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	dd36      	ble.n	10c22 <iot_message_reportInfo+0xaa>
	{
		cJSON_AddStringToObject(json2CloudData, MIWI_BATTERY_DATATYPE_NAME, INIT_BATTERY); // Fixed Battery Value is sent
   10bb4:	4b38      	ldr	r3, [pc, #224]	; (10c98 <iot_message_reportInfo+0x120>)
   10bb6:	0018      	movs	r0, r3
   10bb8:	4b38      	ldr	r3, [pc, #224]	; (10c9c <iot_message_reportInfo+0x124>)
   10bba:	4798      	blx	r3
   10bbc:	0002      	movs	r2, r0
   10bbe:	4938      	ldr	r1, [pc, #224]	; (10ca0 <iot_message_reportInfo+0x128>)
   10bc0:	697b      	ldr	r3, [r7, #20]
   10bc2:	0018      	movs	r0, r3
   10bc4:	4b37      	ldr	r3, [pc, #220]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10bc6:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_RSSI_DATATYPE_NAME, miwiNodeRssi);
   10bc8:	4b37      	ldr	r3, [pc, #220]	; (10ca8 <iot_message_reportInfo+0x130>)
   10bca:	681a      	ldr	r2, [r3, #0]
   10bcc:	4b37      	ldr	r3, [pc, #220]	; (10cac <iot_message_reportInfo+0x134>)
   10bce:	0010      	movs	r0, r2
   10bd0:	4798      	blx	r3
   10bd2:	0003      	movs	r3, r0
   10bd4:	000c      	movs	r4, r1
   10bd6:	0018      	movs	r0, r3
   10bd8:	0021      	movs	r1, r4
   10bda:	4b35      	ldr	r3, [pc, #212]	; (10cb0 <iot_message_reportInfo+0x138>)
   10bdc:	4798      	blx	r3
   10bde:	0002      	movs	r2, r0
   10be0:	4934      	ldr	r1, [pc, #208]	; (10cb4 <iot_message_reportInfo+0x13c>)
   10be2:	697b      	ldr	r3, [r7, #20]
   10be4:	0018      	movs	r0, r3
   10be6:	4b2f      	ldr	r3, [pc, #188]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10be8:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_TEMP_DATATYPE_NAME, miwiNodeTemp);
   10bea:	4b2a      	ldr	r3, [pc, #168]	; (10c94 <iot_message_reportInfo+0x11c>)
   10bec:	681a      	ldr	r2, [r3, #0]
   10bee:	4b2f      	ldr	r3, [pc, #188]	; (10cac <iot_message_reportInfo+0x134>)
   10bf0:	0010      	movs	r0, r2
   10bf2:	4798      	blx	r3
   10bf4:	0003      	movs	r3, r0
   10bf6:	000c      	movs	r4, r1
   10bf8:	0018      	movs	r0, r3
   10bfa:	0021      	movs	r1, r4
   10bfc:	4b2c      	ldr	r3, [pc, #176]	; (10cb0 <iot_message_reportInfo+0x138>)
   10bfe:	4798      	blx	r3
   10c00:	0002      	movs	r2, r0
   10c02:	492d      	ldr	r1, [pc, #180]	; (10cb8 <iot_message_reportInfo+0x140>)
   10c04:	697b      	ldr	r3, [r7, #20]
   10c06:	0018      	movs	r0, r3
   10c08:	4b26      	ldr	r3, [pc, #152]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c0a:	4798      	blx	r3
		cJSON_AddStringToObject(json2CloudData, MIWI_NODEID_DATATYPE_NAME, miwiNodeLocation);
   10c0c:	4b2b      	ldr	r3, [pc, #172]	; (10cbc <iot_message_reportInfo+0x144>)
   10c0e:	0018      	movs	r0, r3
   10c10:	4b22      	ldr	r3, [pc, #136]	; (10c9c <iot_message_reportInfo+0x124>)
   10c12:	4798      	blx	r3
   10c14:	0002      	movs	r2, r0
   10c16:	492a      	ldr	r1, [pc, #168]	; (10cc0 <iot_message_reportInfo+0x148>)
   10c18:	697b      	ldr	r3, [r7, #20]
   10c1a:	0018      	movs	r0, r3
   10c1c:	4b21      	ldr	r3, [pc, #132]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c1e:	4798      	blx	r3
   10c20:	e02b      	b.n	10c7a <iot_message_reportInfo+0x102>
	}
	else
	{
		cJSON_AddStringToObject(json2CloudData, MIWI_BATTERY_DATATYPE_NAME, INIT_BATTERY);
   10c22:	4b1d      	ldr	r3, [pc, #116]	; (10c98 <iot_message_reportInfo+0x120>)
   10c24:	0018      	movs	r0, r3
   10c26:	4b1d      	ldr	r3, [pc, #116]	; (10c9c <iot_message_reportInfo+0x124>)
   10c28:	4798      	blx	r3
   10c2a:	0002      	movs	r2, r0
   10c2c:	491c      	ldr	r1, [pc, #112]	; (10ca0 <iot_message_reportInfo+0x128>)
   10c2e:	697b      	ldr	r3, [r7, #20]
   10c30:	0018      	movs	r0, r3
   10c32:	4b1c      	ldr	r3, [pc, #112]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c34:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_RSSI_DATATYPE_NAME, INIT_RSSI);
   10c36:	2300      	movs	r3, #0
   10c38:	4c22      	ldr	r4, [pc, #136]	; (10cc4 <iot_message_reportInfo+0x14c>)
   10c3a:	0018      	movs	r0, r3
   10c3c:	0021      	movs	r1, r4
   10c3e:	4b1c      	ldr	r3, [pc, #112]	; (10cb0 <iot_message_reportInfo+0x138>)
   10c40:	4798      	blx	r3
   10c42:	0002      	movs	r2, r0
   10c44:	491b      	ldr	r1, [pc, #108]	; (10cb4 <iot_message_reportInfo+0x13c>)
   10c46:	697b      	ldr	r3, [r7, #20]
   10c48:	0018      	movs	r0, r3
   10c4a:	4b16      	ldr	r3, [pc, #88]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c4c:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_TEMP_DATATYPE_NAME, INIT_TEMP);
   10c4e:	2300      	movs	r3, #0
   10c50:	4c1d      	ldr	r4, [pc, #116]	; (10cc8 <iot_message_reportInfo+0x150>)
   10c52:	0018      	movs	r0, r3
   10c54:	0021      	movs	r1, r4
   10c56:	4b16      	ldr	r3, [pc, #88]	; (10cb0 <iot_message_reportInfo+0x138>)
   10c58:	4798      	blx	r3
   10c5a:	0002      	movs	r2, r0
   10c5c:	4916      	ldr	r1, [pc, #88]	; (10cb8 <iot_message_reportInfo+0x140>)
   10c5e:	697b      	ldr	r3, [r7, #20]
   10c60:	0018      	movs	r0, r3
   10c62:	4b10      	ldr	r3, [pc, #64]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c64:	4798      	blx	r3
		cJSON_AddStringToObject(json2CloudData, MIWI_NODEID_DATATYPE_NAME, INIT_NODEID);
   10c66:	4b19      	ldr	r3, [pc, #100]	; (10ccc <iot_message_reportInfo+0x154>)
   10c68:	0018      	movs	r0, r3
   10c6a:	4b0c      	ldr	r3, [pc, #48]	; (10c9c <iot_message_reportInfo+0x124>)
   10c6c:	4798      	blx	r3
   10c6e:	0002      	movs	r2, r0
   10c70:	4913      	ldr	r1, [pc, #76]	; (10cc0 <iot_message_reportInfo+0x148>)
   10c72:	697b      	ldr	r3, [r7, #20]
   10c74:	0018      	movs	r0, r3
   10c76:	4b0b      	ldr	r3, [pc, #44]	; (10ca4 <iot_message_reportInfo+0x12c>)
   10c78:	4798      	blx	r3
	}

	return json2CloudData;
   10c7a:	697b      	ldr	r3, [r7, #20]
}
   10c7c:	0018      	movs	r0, r3
   10c7e:	46bd      	mov	sp, r7
   10c80:	b007      	add	sp, #28
   10c82:	bd90      	pop	{r4, r7, pc}
   10c84:	0000b3f5 	.word	0x0000b3f5
   10c88:	0000b3cd 	.word	0x0000b3cd
   10c8c:	0001cb44 	.word	0x0001cb44
   10c90:	0001a001 	.word	0x0001a001
   10c94:	200016c8 	.word	0x200016c8
   10c98:	0001cb8c 	.word	0x0001cb8c
   10c9c:	0000b391 	.word	0x0000b391
   10ca0:	0001cb94 	.word	0x0001cb94
   10ca4:	0000b2f1 	.word	0x0000b2f1
   10ca8:	20001604 	.word	0x20001604
   10cac:	00019c75 	.word	0x00019c75
   10cb0:	0000b349 	.word	0x0000b349
   10cb4:	0001cb9c 	.word	0x0001cb9c
   10cb8:	0001cba4 	.word	0x0001cba4
   10cbc:	20001614 	.word	0x20001614
   10cc0:	0001cbc0 	.word	0x0001cbc0
   10cc4:	c055c000 	.word	0xc055c000
   10cc8:	40524000 	.word	0x40524000
   10ccc:	0001cbb0 	.word	0x0001cbb0

00010cd0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   10cd0:	b580      	push	{r7, lr}
   10cd2:	b082      	sub	sp, #8
   10cd4:	af00      	add	r7, sp, #0
   10cd6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   10cd8:	687b      	ldr	r3, [r7, #4]
   10cda:	2b00      	cmp	r3, #0
   10cdc:	d00c      	beq.n	10cf8 <delay_cycles+0x28>
		SysTick->LOAD = n;
   10cde:	4b08      	ldr	r3, [pc, #32]	; (10d00 <delay_cycles+0x30>)
   10ce0:	687a      	ldr	r2, [r7, #4]
   10ce2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   10ce4:	4b06      	ldr	r3, [pc, #24]	; (10d00 <delay_cycles+0x30>)
   10ce6:	2200      	movs	r2, #0
   10ce8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   10cea:	46c0      	nop			; (mov r8, r8)
   10cec:	4b04      	ldr	r3, [pc, #16]	; (10d00 <delay_cycles+0x30>)
   10cee:	681a      	ldr	r2, [r3, #0]
   10cf0:	2380      	movs	r3, #128	; 0x80
   10cf2:	025b      	lsls	r3, r3, #9
   10cf4:	4013      	ands	r3, r2
   10cf6:	d0f9      	beq.n	10cec <delay_cycles+0x1c>
		};
	}
}
   10cf8:	46c0      	nop			; (mov r8, r8)
   10cfa:	46bd      	mov	sp, r7
   10cfc:	b002      	add	sp, #8
   10cfe:	bd80      	pop	{r7, pc}
   10d00:	e000e010 	.word	0xe000e010

00010d04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   10d04:	b580      	push	{r7, lr}
   10d06:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   10d08:	2000      	movs	r0, #0
   10d0a:	4b0f      	ldr	r3, [pc, #60]	; (10d48 <delay_init+0x44>)
   10d0c:	4798      	blx	r3
   10d0e:	0002      	movs	r2, r0
   10d10:	4b0e      	ldr	r3, [pc, #56]	; (10d4c <delay_init+0x48>)
   10d12:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   10d14:	4b0d      	ldr	r3, [pc, #52]	; (10d4c <delay_init+0x48>)
   10d16:	6818      	ldr	r0, [r3, #0]
   10d18:	4b0d      	ldr	r3, [pc, #52]	; (10d50 <delay_init+0x4c>)
   10d1a:	22fa      	movs	r2, #250	; 0xfa
   10d1c:	0091      	lsls	r1, r2, #2
   10d1e:	4798      	blx	r3
   10d20:	0003      	movs	r3, r0
   10d22:	001a      	movs	r2, r3
   10d24:	4b09      	ldr	r3, [pc, #36]	; (10d4c <delay_init+0x48>)
   10d26:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   10d28:	4b08      	ldr	r3, [pc, #32]	; (10d4c <delay_init+0x48>)
   10d2a:	6818      	ldr	r0, [r3, #0]
   10d2c:	4b08      	ldr	r3, [pc, #32]	; (10d50 <delay_init+0x4c>)
   10d2e:	22fa      	movs	r2, #250	; 0xfa
   10d30:	0091      	lsls	r1, r2, #2
   10d32:	4798      	blx	r3
   10d34:	0003      	movs	r3, r0
   10d36:	001a      	movs	r2, r3
   10d38:	4b06      	ldr	r3, [pc, #24]	; (10d54 <delay_init+0x50>)
   10d3a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   10d3c:	4b06      	ldr	r3, [pc, #24]	; (10d58 <delay_init+0x54>)
   10d3e:	2205      	movs	r2, #5
   10d40:	601a      	str	r2, [r3, #0]
}
   10d42:	46c0      	nop			; (mov r8, r8)
   10d44:	46bd      	mov	sp, r7
   10d46:	bd80      	pop	{r7, pc}
   10d48:	00014fa9 	.word	0x00014fa9
   10d4c:	200004a8 	.word	0x200004a8
   10d50:	00017e9d 	.word	0x00017e9d
   10d54:	200004ac 	.word	0x200004ac
   10d58:	e000e010 	.word	0xe000e010

00010d5c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   10d5c:	b580      	push	{r7, lr}
   10d5e:	b082      	sub	sp, #8
   10d60:	af00      	add	r7, sp, #0
   10d62:	6078      	str	r0, [r7, #4]
	while (n--) {
   10d64:	e004      	b.n	10d70 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   10d66:	4b07      	ldr	r3, [pc, #28]	; (10d84 <delay_cycles_us+0x28>)
   10d68:	681b      	ldr	r3, [r3, #0]
   10d6a:	0018      	movs	r0, r3
   10d6c:	4b06      	ldr	r3, [pc, #24]	; (10d88 <delay_cycles_us+0x2c>)
   10d6e:	4798      	blx	r3
	while (n--) {
   10d70:	687b      	ldr	r3, [r7, #4]
   10d72:	1e5a      	subs	r2, r3, #1
   10d74:	607a      	str	r2, [r7, #4]
   10d76:	2b00      	cmp	r3, #0
   10d78:	d1f5      	bne.n	10d66 <delay_cycles_us+0xa>
	}
}
   10d7a:	46c0      	nop			; (mov r8, r8)
   10d7c:	46bd      	mov	sp, r7
   10d7e:	b002      	add	sp, #8
   10d80:	bd80      	pop	{r7, pc}
   10d82:	46c0      	nop			; (mov r8, r8)
   10d84:	200004ac 	.word	0x200004ac
   10d88:	00010cd1 	.word	0x00010cd1

00010d8c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   10d8c:	b580      	push	{r7, lr}
   10d8e:	b082      	sub	sp, #8
   10d90:	af00      	add	r7, sp, #0
   10d92:	6078      	str	r0, [r7, #4]
	while (n--) {
   10d94:	e004      	b.n	10da0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   10d96:	4b07      	ldr	r3, [pc, #28]	; (10db4 <delay_cycles_ms+0x28>)
   10d98:	681b      	ldr	r3, [r3, #0]
   10d9a:	0018      	movs	r0, r3
   10d9c:	4b06      	ldr	r3, [pc, #24]	; (10db8 <delay_cycles_ms+0x2c>)
   10d9e:	4798      	blx	r3
	while (n--) {
   10da0:	687b      	ldr	r3, [r7, #4]
   10da2:	1e5a      	subs	r2, r3, #1
   10da4:	607a      	str	r2, [r7, #4]
   10da6:	2b00      	cmp	r3, #0
   10da8:	d1f5      	bne.n	10d96 <delay_cycles_ms+0xa>
	}
}
   10daa:	46c0      	nop			; (mov r8, r8)
   10dac:	46bd      	mov	sp, r7
   10dae:	b002      	add	sp, #8
   10db0:	bd80      	pop	{r7, pc}
   10db2:	46c0      	nop			; (mov r8, r8)
   10db4:	200004a8 	.word	0x200004a8
   10db8:	00010cd1 	.word	0x00010cd1

00010dbc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   10dbc:	b580      	push	{r7, lr}
   10dbe:	b082      	sub	sp, #8
   10dc0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10dc2:	4b10      	ldr	r3, [pc, #64]	; (10e04 <cpu_irq_enter_critical+0x48>)
   10dc4:	681b      	ldr	r3, [r3, #0]
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	d112      	bne.n	10df0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10dca:	f3ef 8310 	mrs	r3, PRIMASK
   10dce:	607b      	str	r3, [r7, #4]
  return(result);
   10dd0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	d109      	bne.n	10dea <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   10dd6:	b672      	cpsid	i
   10dd8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10ddc:	4b0a      	ldr	r3, [pc, #40]	; (10e08 <cpu_irq_enter_critical+0x4c>)
   10dde:	2200      	movs	r2, #0
   10de0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10de2:	4b0a      	ldr	r3, [pc, #40]	; (10e0c <cpu_irq_enter_critical+0x50>)
   10de4:	2201      	movs	r2, #1
   10de6:	701a      	strb	r2, [r3, #0]
   10de8:	e002      	b.n	10df0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   10dea:	4b08      	ldr	r3, [pc, #32]	; (10e0c <cpu_irq_enter_critical+0x50>)
   10dec:	2200      	movs	r2, #0
   10dee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10df0:	4b04      	ldr	r3, [pc, #16]	; (10e04 <cpu_irq_enter_critical+0x48>)
   10df2:	681b      	ldr	r3, [r3, #0]
   10df4:	1c5a      	adds	r2, r3, #1
   10df6:	4b03      	ldr	r3, [pc, #12]	; (10e04 <cpu_irq_enter_critical+0x48>)
   10df8:	601a      	str	r2, [r3, #0]
}
   10dfa:	46c0      	nop			; (mov r8, r8)
   10dfc:	46bd      	mov	sp, r7
   10dfe:	b002      	add	sp, #8
   10e00:	bd80      	pop	{r7, pc}
   10e02:	46c0      	nop			; (mov r8, r8)
   10e04:	200007c4 	.word	0x200007c4
   10e08:	200004b0 	.word	0x200004b0
   10e0c:	200007c8 	.word	0x200007c8

00010e10 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10e10:	b580      	push	{r7, lr}
   10e12:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10e14:	4b0b      	ldr	r3, [pc, #44]	; (10e44 <cpu_irq_leave_critical+0x34>)
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	1e5a      	subs	r2, r3, #1
   10e1a:	4b0a      	ldr	r3, [pc, #40]	; (10e44 <cpu_irq_leave_critical+0x34>)
   10e1c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10e1e:	4b09      	ldr	r3, [pc, #36]	; (10e44 <cpu_irq_leave_critical+0x34>)
   10e20:	681b      	ldr	r3, [r3, #0]
   10e22:	2b00      	cmp	r3, #0
   10e24:	d10a      	bne.n	10e3c <cpu_irq_leave_critical+0x2c>
   10e26:	4b08      	ldr	r3, [pc, #32]	; (10e48 <cpu_irq_leave_critical+0x38>)
   10e28:	781b      	ldrb	r3, [r3, #0]
   10e2a:	b2db      	uxtb	r3, r3
   10e2c:	2b00      	cmp	r3, #0
   10e2e:	d005      	beq.n	10e3c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10e30:	4b06      	ldr	r3, [pc, #24]	; (10e4c <cpu_irq_leave_critical+0x3c>)
   10e32:	2201      	movs	r2, #1
   10e34:	701a      	strb	r2, [r3, #0]
   10e36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10e3a:	b662      	cpsie	i
	}
}
   10e3c:	46c0      	nop			; (mov r8, r8)
   10e3e:	46bd      	mov	sp, r7
   10e40:	bd80      	pop	{r7, pc}
   10e42:	46c0      	nop			; (mov r8, r8)
   10e44:	200007c4 	.word	0x200007c4
   10e48:	200007c8 	.word	0x200007c8
   10e4c:	200004b0 	.word	0x200004b0

00010e50 <system_pinmux_get_config_defaults>:
{
   10e50:	b580      	push	{r7, lr}
   10e52:	b082      	sub	sp, #8
   10e54:	af00      	add	r7, sp, #0
   10e56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10e58:	687b      	ldr	r3, [r7, #4]
   10e5a:	2280      	movs	r2, #128	; 0x80
   10e5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10e5e:	687b      	ldr	r3, [r7, #4]
   10e60:	2200      	movs	r2, #0
   10e62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10e64:	687b      	ldr	r3, [r7, #4]
   10e66:	2201      	movs	r2, #1
   10e68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10e6a:	687b      	ldr	r3, [r7, #4]
   10e6c:	2200      	movs	r2, #0
   10e6e:	70da      	strb	r2, [r3, #3]
}
   10e70:	46c0      	nop			; (mov r8, r8)
   10e72:	46bd      	mov	sp, r7
   10e74:	b002      	add	sp, #8
   10e76:	bd80      	pop	{r7, pc}

00010e78 <system_pinmux_get_group_from_gpio_pin>:
{
   10e78:	b580      	push	{r7, lr}
   10e7a:	b084      	sub	sp, #16
   10e7c:	af00      	add	r7, sp, #0
   10e7e:	0002      	movs	r2, r0
   10e80:	1dfb      	adds	r3, r7, #7
   10e82:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10e84:	230f      	movs	r3, #15
   10e86:	18fb      	adds	r3, r7, r3
   10e88:	1dfa      	adds	r2, r7, #7
   10e8a:	7812      	ldrb	r2, [r2, #0]
   10e8c:	09d2      	lsrs	r2, r2, #7
   10e8e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10e90:	230e      	movs	r3, #14
   10e92:	18fb      	adds	r3, r7, r3
   10e94:	1dfa      	adds	r2, r7, #7
   10e96:	7812      	ldrb	r2, [r2, #0]
   10e98:	0952      	lsrs	r2, r2, #5
   10e9a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10e9c:	4b0d      	ldr	r3, [pc, #52]	; (10ed4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10e9e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   10ea0:	230f      	movs	r3, #15
   10ea2:	18fb      	adds	r3, r7, r3
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	2b00      	cmp	r3, #0
   10ea8:	d10f      	bne.n	10eca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   10eaa:	230f      	movs	r3, #15
   10eac:	18fb      	adds	r3, r7, r3
   10eae:	781b      	ldrb	r3, [r3, #0]
   10eb0:	009b      	lsls	r3, r3, #2
   10eb2:	2210      	movs	r2, #16
   10eb4:	4694      	mov	ip, r2
   10eb6:	44bc      	add	ip, r7
   10eb8:	4463      	add	r3, ip
   10eba:	3b08      	subs	r3, #8
   10ebc:	681a      	ldr	r2, [r3, #0]
   10ebe:	230e      	movs	r3, #14
   10ec0:	18fb      	adds	r3, r7, r3
   10ec2:	781b      	ldrb	r3, [r3, #0]
   10ec4:	01db      	lsls	r3, r3, #7
   10ec6:	18d3      	adds	r3, r2, r3
   10ec8:	e000      	b.n	10ecc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   10eca:	2300      	movs	r3, #0
}
   10ecc:	0018      	movs	r0, r3
   10ece:	46bd      	mov	sp, r7
   10ed0:	b004      	add	sp, #16
   10ed2:	bd80      	pop	{r7, pc}
   10ed4:	40002800 	.word	0x40002800

00010ed8 <port_get_group_from_gpio_pin>:
{
   10ed8:	b580      	push	{r7, lr}
   10eda:	b082      	sub	sp, #8
   10edc:	af00      	add	r7, sp, #0
   10ede:	0002      	movs	r2, r0
   10ee0:	1dfb      	adds	r3, r7, #7
   10ee2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   10ee4:	1dfb      	adds	r3, r7, #7
   10ee6:	781b      	ldrb	r3, [r3, #0]
   10ee8:	0018      	movs	r0, r3
   10eea:	4b03      	ldr	r3, [pc, #12]	; (10ef8 <port_get_group_from_gpio_pin+0x20>)
   10eec:	4798      	blx	r3
   10eee:	0003      	movs	r3, r0
}
   10ef0:	0018      	movs	r0, r3
   10ef2:	46bd      	mov	sp, r7
   10ef4:	b002      	add	sp, #8
   10ef6:	bd80      	pop	{r7, pc}
   10ef8:	00010e79 	.word	0x00010e79

00010efc <port_get_config_defaults>:
{
   10efc:	b580      	push	{r7, lr}
   10efe:	b082      	sub	sp, #8
   10f00:	af00      	add	r7, sp, #0
   10f02:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   10f04:	687b      	ldr	r3, [r7, #4]
   10f06:	2200      	movs	r2, #0
   10f08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   10f0a:	687b      	ldr	r3, [r7, #4]
   10f0c:	2201      	movs	r2, #1
   10f0e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	2200      	movs	r2, #0
   10f14:	709a      	strb	r2, [r3, #2]
}
   10f16:	46c0      	nop			; (mov r8, r8)
   10f18:	46bd      	mov	sp, r7
   10f1a:	b002      	add	sp, #8
   10f1c:	bd80      	pop	{r7, pc}
	...

00010f20 <port_pin_set_output_level>:
{
   10f20:	b580      	push	{r7, lr}
   10f22:	b084      	sub	sp, #16
   10f24:	af00      	add	r7, sp, #0
   10f26:	0002      	movs	r2, r0
   10f28:	1dfb      	adds	r3, r7, #7
   10f2a:	701a      	strb	r2, [r3, #0]
   10f2c:	1dbb      	adds	r3, r7, #6
   10f2e:	1c0a      	adds	r2, r1, #0
   10f30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   10f32:	1dfb      	adds	r3, r7, #7
   10f34:	781b      	ldrb	r3, [r3, #0]
   10f36:	0018      	movs	r0, r3
   10f38:	4b0d      	ldr	r3, [pc, #52]	; (10f70 <port_pin_set_output_level+0x50>)
   10f3a:	4798      	blx	r3
   10f3c:	0003      	movs	r3, r0
   10f3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10f40:	1dfb      	adds	r3, r7, #7
   10f42:	781b      	ldrb	r3, [r3, #0]
   10f44:	221f      	movs	r2, #31
   10f46:	4013      	ands	r3, r2
   10f48:	2201      	movs	r2, #1
   10f4a:	409a      	lsls	r2, r3
   10f4c:	0013      	movs	r3, r2
   10f4e:	60bb      	str	r3, [r7, #8]
	if (level) {
   10f50:	1dbb      	adds	r3, r7, #6
   10f52:	781b      	ldrb	r3, [r3, #0]
   10f54:	2b00      	cmp	r3, #0
   10f56:	d003      	beq.n	10f60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   10f58:	68fb      	ldr	r3, [r7, #12]
   10f5a:	68ba      	ldr	r2, [r7, #8]
   10f5c:	619a      	str	r2, [r3, #24]
}
   10f5e:	e002      	b.n	10f66 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   10f60:	68fb      	ldr	r3, [r7, #12]
   10f62:	68ba      	ldr	r2, [r7, #8]
   10f64:	615a      	str	r2, [r3, #20]
}
   10f66:	46c0      	nop			; (mov r8, r8)
   10f68:	46bd      	mov	sp, r7
   10f6a:	b004      	add	sp, #16
   10f6c:	bd80      	pop	{r7, pc}
   10f6e:	46c0      	nop			; (mov r8, r8)
   10f70:	00010ed9 	.word	0x00010ed9

00010f74 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   10f74:	b580      	push	{r7, lr}
   10f76:	b082      	sub	sp, #8
   10f78:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   10f7a:	1d3b      	adds	r3, r7, #4
   10f7c:	0018      	movs	r0, r3
   10f7e:	4b3c      	ldr	r3, [pc, #240]	; (11070 <system_board_init+0xfc>)
   10f80:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   10f82:	1d3b      	adds	r3, r7, #4
   10f84:	2201      	movs	r2, #1
   10f86:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   10f88:	1d3b      	adds	r3, r7, #4
   10f8a:	0019      	movs	r1, r3
   10f8c:	2013      	movs	r0, #19
   10f8e:	4b39      	ldr	r3, [pc, #228]	; (11074 <system_board_init+0x100>)
   10f90:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   10f92:	2101      	movs	r1, #1
   10f94:	2013      	movs	r0, #19
   10f96:	4b38      	ldr	r3, [pc, #224]	; (11078 <system_board_init+0x104>)
   10f98:	4798      	blx	r3
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   10f9a:	1d3b      	adds	r3, r7, #4
   10f9c:	2201      	movs	r2, #1
   10f9e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
   10fa0:	1d3b      	adds	r3, r7, #4
   10fa2:	0019      	movs	r1, r3
   10fa4:	2012      	movs	r0, #18
   10fa6:	4b33      	ldr	r3, [pc, #204]	; (11074 <system_board_init+0x100>)
   10fa8:	4798      	blx	r3
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
   10faa:	2101      	movs	r1, #1
   10fac:	2012      	movs	r0, #18
   10fae:	4b32      	ldr	r3, [pc, #200]	; (11078 <system_board_init+0x104>)
   10fb0:	4798      	blx	r3
	//pin_conf.direction  = PORT_PIN_DIR_INPUT;
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(BUTTON_0_PIN, &pin_conf);
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
   10fb2:	1d3b      	adds	r3, r7, #4
   10fb4:	0018      	movs	r0, r3
   10fb6:	4b2e      	ldr	r3, [pc, #184]	; (11070 <system_board_init+0xfc>)
   10fb8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   10fba:	1d3b      	adds	r3, r7, #4
   10fbc:	2201      	movs	r2, #1
   10fbe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
   10fc0:	1d3b      	adds	r3, r7, #4
   10fc2:	0019      	movs	r1, r3
   10fc4:	2052      	movs	r0, #82	; 0x52
   10fc6:	4b2b      	ldr	r3, [pc, #172]	; (11074 <system_board_init+0x100>)
   10fc8:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
   10fca:	1d3b      	adds	r3, r7, #4
   10fcc:	0019      	movs	r1, r3
   10fce:	203e      	movs	r0, #62	; 0x3e
   10fd0:	4b28      	ldr	r3, [pc, #160]	; (11074 <system_board_init+0x100>)
   10fd2:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
   10fd4:	1d3b      	adds	r3, r7, #4
   10fd6:	0019      	movs	r1, r3
   10fd8:	203f      	movs	r0, #63	; 0x3f
   10fda:	4b26      	ldr	r3, [pc, #152]	; (11074 <system_board_init+0x100>)
   10fdc:	4798      	blx	r3
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
   10fde:	1d3b      	adds	r3, r7, #4
   10fe0:	0019      	movs	r1, r3
   10fe2:	202f      	movs	r0, #47	; 0x2f
   10fe4:	4b23      	ldr	r3, [pc, #140]	; (11074 <system_board_init+0x100>)
   10fe6:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
   10fe8:	1d3b      	adds	r3, r7, #4
   10fea:	0019      	movs	r1, r3
   10fec:	2014      	movs	r0, #20
   10fee:	4b21      	ldr	r3, [pc, #132]	; (11074 <system_board_init+0x100>)
   10ff0:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
   10ff2:	2101      	movs	r1, #1
   10ff4:	2052      	movs	r0, #82	; 0x52
   10ff6:	4b20      	ldr	r3, [pc, #128]	; (11078 <system_board_init+0x104>)
   10ff8:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
   10ffa:	2101      	movs	r1, #1
   10ffc:	203e      	movs	r0, #62	; 0x3e
   10ffe:	4b1e      	ldr	r3, [pc, #120]	; (11078 <system_board_init+0x104>)
   11000:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
   11002:	2101      	movs	r1, #1
   11004:	203f      	movs	r0, #63	; 0x3f
   11006:	4b1c      	ldr	r3, [pc, #112]	; (11078 <system_board_init+0x104>)
   11008:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
   1100a:	2101      	movs	r1, #1
   1100c:	202f      	movs	r0, #47	; 0x2f
   1100e:	4b1a      	ldr	r3, [pc, #104]	; (11078 <system_board_init+0x104>)
   11010:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
   11012:	2101      	movs	r1, #1
   11014:	2014      	movs	r0, #20
   11016:	4b18      	ldr	r3, [pc, #96]	; (11078 <system_board_init+0x104>)
   11018:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1101a:	1d3b      	adds	r3, r7, #4
   1101c:	2200      	movs	r2, #0
   1101e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
   11020:	1d3b      	adds	r3, r7, #4
   11022:	0019      	movs	r1, r3
   11024:	2053      	movs	r0, #83	; 0x53
   11026:	4b13      	ldr	r3, [pc, #76]	; (11074 <system_board_init+0x100>)
   11028:	4798      	blx	r3
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
   1102a:	4b14      	ldr	r3, [pc, #80]	; (1107c <system_board_init+0x108>)
   1102c:	4a13      	ldr	r2, [pc, #76]	; (1107c <system_board_init+0x108>)
   1102e:	69d2      	ldr	r2, [r2, #28]
   11030:	2180      	movs	r1, #128	; 0x80
   11032:	0209      	lsls	r1, r1, #8
   11034:	430a      	orrs	r2, r1
   11036:	61da      	str	r2, [r3, #28]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR30 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
   11038:	4b11      	ldr	r3, [pc, #68]	; (11080 <system_board_init+0x10c>)
   1103a:	2204      	movs	r2, #4
   1103c:	801a      	strh	r2, [r3, #0]
	
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
   1103e:	003b      	movs	r3, r7
   11040:	0018      	movs	r0, r3
   11042:	4b10      	ldr	r3, [pc, #64]	; (11084 <system_board_init+0x110>)
   11044:	4798      	blx	r3
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
   11046:	003b      	movs	r3, r7
   11048:	2205      	movs	r2, #5
   1104a:	701a      	strb	r2, [r3, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
   1104c:	003b      	movs	r3, r7
   1104e:	2201      	movs	r2, #1
   11050:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
   11052:	003b      	movs	r3, r7
   11054:	0019      	movs	r1, r3
   11056:	2009      	movs	r0, #9
   11058:	4b0b      	ldr	r3, [pc, #44]	; (11088 <system_board_init+0x114>)
   1105a:	4798      	blx	r3
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
   1105c:	003b      	movs	r3, r7
   1105e:	0019      	movs	r1, r3
   11060:	200c      	movs	r0, #12
   11062:	4b09      	ldr	r3, [pc, #36]	; (11088 <system_board_init+0x114>)
   11064:	4798      	blx	r3
#endif	
}
   11066:	46c0      	nop			; (mov r8, r8)
   11068:	46bd      	mov	sp, r7
   1106a:	b002      	add	sp, #8
   1106c:	bd80      	pop	{r7, pc}
   1106e:	46c0      	nop			; (mov r8, r8)
   11070:	00010efd 	.word	0x00010efd
   11074:	00011791 	.word	0x00011791
   11078:	00010f21 	.word	0x00010f21
   1107c:	40000400 	.word	0x40000400
   11080:	42003c00 	.word	0x42003c00
   11084:	00010e51 	.word	0x00010e51
   11088:	00015391 	.word	0x00015391

0001108c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   1108c:	b580      	push	{r7, lr}
   1108e:	b084      	sub	sp, #16
   11090:	af00      	add	r7, sp, #0
   11092:	0002      	movs	r2, r0
   11094:	1dfb      	adds	r3, r7, #7
   11096:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   11098:	230f      	movs	r3, #15
   1109a:	18fb      	adds	r3, r7, r3
   1109c:	1dfa      	adds	r2, r7, #7
   1109e:	7812      	ldrb	r2, [r2, #0]
   110a0:	0952      	lsrs	r2, r2, #5
   110a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   110a4:	230f      	movs	r3, #15
   110a6:	18fb      	adds	r3, r7, r3
   110a8:	781b      	ldrb	r3, [r3, #0]
   110aa:	2b00      	cmp	r3, #0
   110ac:	d10c      	bne.n	110c8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   110ae:	4b09      	ldr	r3, [pc, #36]	; (110d4 <_extint_get_eic_from_channel+0x48>)
   110b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   110b2:	230f      	movs	r3, #15
   110b4:	18fb      	adds	r3, r7, r3
   110b6:	781b      	ldrb	r3, [r3, #0]
   110b8:	009b      	lsls	r3, r3, #2
   110ba:	2210      	movs	r2, #16
   110bc:	4694      	mov	ip, r2
   110be:	44bc      	add	ip, r7
   110c0:	4463      	add	r3, ip
   110c2:	3b08      	subs	r3, #8
   110c4:	681b      	ldr	r3, [r3, #0]
   110c6:	e000      	b.n	110ca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   110c8:	2300      	movs	r3, #0
	}
}
   110ca:	0018      	movs	r0, r3
   110cc:	46bd      	mov	sp, r7
   110ce:	b004      	add	sp, #16
   110d0:	bd80      	pop	{r7, pc}
   110d2:	46c0      	nop			; (mov r8, r8)
   110d4:	40002400 	.word	0x40002400

000110d8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   110d8:	b580      	push	{r7, lr}
   110da:	b084      	sub	sp, #16
   110dc:	af00      	add	r7, sp, #0
   110de:	0002      	movs	r2, r0
   110e0:	1dfb      	adds	r3, r7, #7
   110e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   110e4:	1dfb      	adds	r3, r7, #7
   110e6:	781b      	ldrb	r3, [r3, #0]
   110e8:	0018      	movs	r0, r3
   110ea:	4b0b      	ldr	r3, [pc, #44]	; (11118 <extint_chan_is_detected+0x40>)
   110ec:	4798      	blx	r3
   110ee:	0003      	movs	r3, r0
   110f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   110f2:	1dfb      	adds	r3, r7, #7
   110f4:	781b      	ldrb	r3, [r3, #0]
   110f6:	221f      	movs	r2, #31
   110f8:	4013      	ands	r3, r2
   110fa:	2201      	movs	r2, #1
   110fc:	409a      	lsls	r2, r3
   110fe:	0013      	movs	r3, r2
   11100:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   11102:	68fb      	ldr	r3, [r7, #12]
   11104:	695b      	ldr	r3, [r3, #20]
   11106:	68ba      	ldr	r2, [r7, #8]
   11108:	4013      	ands	r3, r2
   1110a:	1e5a      	subs	r2, r3, #1
   1110c:	4193      	sbcs	r3, r2
   1110e:	b2db      	uxtb	r3, r3
}
   11110:	0018      	movs	r0, r3
   11112:	46bd      	mov	sp, r7
   11114:	b004      	add	sp, #16
   11116:	bd80      	pop	{r7, pc}
   11118:	0001108d 	.word	0x0001108d

0001111c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1111c:	b580      	push	{r7, lr}
   1111e:	b084      	sub	sp, #16
   11120:	af00      	add	r7, sp, #0
   11122:	0002      	movs	r2, r0
   11124:	1dfb      	adds	r3, r7, #7
   11126:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11128:	1dfb      	adds	r3, r7, #7
   1112a:	781b      	ldrb	r3, [r3, #0]
   1112c:	0018      	movs	r0, r3
   1112e:	4b09      	ldr	r3, [pc, #36]	; (11154 <extint_chan_clear_detected+0x38>)
   11130:	4798      	blx	r3
   11132:	0003      	movs	r3, r0
   11134:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   11136:	1dfb      	adds	r3, r7, #7
   11138:	781b      	ldrb	r3, [r3, #0]
   1113a:	221f      	movs	r2, #31
   1113c:	4013      	ands	r3, r2
   1113e:	2201      	movs	r2, #1
   11140:	409a      	lsls	r2, r3
   11142:	0013      	movs	r3, r2
   11144:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   11146:	68fb      	ldr	r3, [r7, #12]
   11148:	68ba      	ldr	r2, [r7, #8]
   1114a:	615a      	str	r2, [r3, #20]
}
   1114c:	46c0      	nop			; (mov r8, r8)
   1114e:	46bd      	mov	sp, r7
   11150:	b004      	add	sp, #16
   11152:	bd80      	pop	{r7, pc}
   11154:	0001108d 	.word	0x0001108d

00011158 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11158:	b580      	push	{r7, lr}
   1115a:	b082      	sub	sp, #8
   1115c:	af00      	add	r7, sp, #0
   1115e:	6078      	str	r0, [r7, #4]
   11160:	0008      	movs	r0, r1
   11162:	0011      	movs	r1, r2
   11164:	1cfb      	adds	r3, r7, #3
   11166:	1c02      	adds	r2, r0, #0
   11168:	701a      	strb	r2, [r3, #0]
   1116a:	1cbb      	adds	r3, r7, #2
   1116c:	1c0a      	adds	r2, r1, #0
   1116e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   11170:	1cbb      	adds	r3, r7, #2
   11172:	781b      	ldrb	r3, [r3, #0]
   11174:	2b00      	cmp	r3, #0
   11176:	d001      	beq.n	1117c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   11178:	2317      	movs	r3, #23
   1117a:	e019      	b.n	111b0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   1117c:	1cfb      	adds	r3, r7, #3
   1117e:	781a      	ldrb	r2, [r3, #0]
   11180:	4b0d      	ldr	r3, [pc, #52]	; (111b8 <extint_register_callback+0x60>)
   11182:	0092      	lsls	r2, r2, #2
   11184:	58d3      	ldr	r3, [r2, r3]
   11186:	2b00      	cmp	r3, #0
   11188:	d107      	bne.n	1119a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   1118a:	1cfb      	adds	r3, r7, #3
   1118c:	781a      	ldrb	r2, [r3, #0]
   1118e:	4b0a      	ldr	r3, [pc, #40]	; (111b8 <extint_register_callback+0x60>)
   11190:	0092      	lsls	r2, r2, #2
   11192:	6879      	ldr	r1, [r7, #4]
   11194:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   11196:	2300      	movs	r3, #0
   11198:	e00a      	b.n	111b0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1119a:	1cfb      	adds	r3, r7, #3
   1119c:	781a      	ldrb	r2, [r3, #0]
   1119e:	4b06      	ldr	r3, [pc, #24]	; (111b8 <extint_register_callback+0x60>)
   111a0:	0092      	lsls	r2, r2, #2
   111a2:	58d2      	ldr	r2, [r2, r3]
   111a4:	687b      	ldr	r3, [r7, #4]
   111a6:	429a      	cmp	r2, r3
   111a8:	d101      	bne.n	111ae <extint_register_callback+0x56>
		return STATUS_OK;
   111aa:	2300      	movs	r3, #0
   111ac:	e000      	b.n	111b0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   111ae:	231d      	movs	r3, #29
}
   111b0:	0018      	movs	r0, r3
   111b2:	46bd      	mov	sp, r7
   111b4:	b002      	add	sp, #8
   111b6:	bd80      	pop	{r7, pc}
   111b8:	20001594 	.word	0x20001594

000111bc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   111bc:	b580      	push	{r7, lr}
   111be:	b084      	sub	sp, #16
   111c0:	af00      	add	r7, sp, #0
   111c2:	0002      	movs	r2, r0
   111c4:	1dfb      	adds	r3, r7, #7
   111c6:	701a      	strb	r2, [r3, #0]
   111c8:	1dbb      	adds	r3, r7, #6
   111ca:	1c0a      	adds	r2, r1, #0
   111cc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   111ce:	1dbb      	adds	r3, r7, #6
   111d0:	781b      	ldrb	r3, [r3, #0]
   111d2:	2b00      	cmp	r3, #0
   111d4:	d10e      	bne.n	111f4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   111d6:	1dfb      	adds	r3, r7, #7
   111d8:	781b      	ldrb	r3, [r3, #0]
   111da:	0018      	movs	r0, r3
   111dc:	4b08      	ldr	r3, [pc, #32]	; (11200 <extint_chan_enable_callback+0x44>)
   111de:	4798      	blx	r3
   111e0:	0003      	movs	r3, r0
   111e2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   111e4:	1dfb      	adds	r3, r7, #7
   111e6:	781b      	ldrb	r3, [r3, #0]
   111e8:	2201      	movs	r2, #1
   111ea:	409a      	lsls	r2, r3
   111ec:	68fb      	ldr	r3, [r7, #12]
   111ee:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   111f0:	2300      	movs	r3, #0
   111f2:	e000      	b.n	111f6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   111f4:	2317      	movs	r3, #23
}
   111f6:	0018      	movs	r0, r3
   111f8:	46bd      	mov	sp, r7
   111fa:	b004      	add	sp, #16
   111fc:	bd80      	pop	{r7, pc}
   111fe:	46c0      	nop			; (mov r8, r8)
   11200:	0001108d 	.word	0x0001108d

00011204 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11204:	b580      	push	{r7, lr}
   11206:	b084      	sub	sp, #16
   11208:	af00      	add	r7, sp, #0
   1120a:	0002      	movs	r2, r0
   1120c:	1dfb      	adds	r3, r7, #7
   1120e:	701a      	strb	r2, [r3, #0]
   11210:	1dbb      	adds	r3, r7, #6
   11212:	1c0a      	adds	r2, r1, #0
   11214:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   11216:	1dbb      	adds	r3, r7, #6
   11218:	781b      	ldrb	r3, [r3, #0]
   1121a:	2b00      	cmp	r3, #0
   1121c:	d10e      	bne.n	1123c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   1121e:	1dfb      	adds	r3, r7, #7
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	0018      	movs	r0, r3
   11224:	4b08      	ldr	r3, [pc, #32]	; (11248 <extint_chan_disable_callback+0x44>)
   11226:	4798      	blx	r3
   11228:	0003      	movs	r3, r0
   1122a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   1122c:	1dfb      	adds	r3, r7, #7
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	2201      	movs	r2, #1
   11232:	409a      	lsls	r2, r3
   11234:	68fb      	ldr	r3, [r7, #12]
   11236:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   11238:	2300      	movs	r3, #0
   1123a:	e000      	b.n	1123e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   1123c:	2317      	movs	r3, #23
}
   1123e:	0018      	movs	r0, r3
   11240:	46bd      	mov	sp, r7
   11242:	b004      	add	sp, #16
   11244:	bd80      	pop	{r7, pc}
   11246:	46c0      	nop			; (mov r8, r8)
   11248:	0001108d 	.word	0x0001108d

0001124c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1124c:	b580      	push	{r7, lr}
   1124e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   11250:	4b15      	ldr	r3, [pc, #84]	; (112a8 <EIC_Handler+0x5c>)
   11252:	2200      	movs	r2, #0
   11254:	701a      	strb	r2, [r3, #0]
   11256:	e020      	b.n	1129a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   11258:	4b13      	ldr	r3, [pc, #76]	; (112a8 <EIC_Handler+0x5c>)
   1125a:	781b      	ldrb	r3, [r3, #0]
   1125c:	0018      	movs	r0, r3
   1125e:	4b13      	ldr	r3, [pc, #76]	; (112ac <EIC_Handler+0x60>)
   11260:	4798      	blx	r3
   11262:	1e03      	subs	r3, r0, #0
   11264:	d013      	beq.n	1128e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   11266:	4b10      	ldr	r3, [pc, #64]	; (112a8 <EIC_Handler+0x5c>)
   11268:	781b      	ldrb	r3, [r3, #0]
   1126a:	0018      	movs	r0, r3
   1126c:	4b10      	ldr	r3, [pc, #64]	; (112b0 <EIC_Handler+0x64>)
   1126e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   11270:	4b0d      	ldr	r3, [pc, #52]	; (112a8 <EIC_Handler+0x5c>)
   11272:	781b      	ldrb	r3, [r3, #0]
   11274:	001a      	movs	r2, r3
   11276:	4b0f      	ldr	r3, [pc, #60]	; (112b4 <EIC_Handler+0x68>)
   11278:	0092      	lsls	r2, r2, #2
   1127a:	58d3      	ldr	r3, [r2, r3]
   1127c:	2b00      	cmp	r3, #0
   1127e:	d006      	beq.n	1128e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   11280:	4b09      	ldr	r3, [pc, #36]	; (112a8 <EIC_Handler+0x5c>)
   11282:	781b      	ldrb	r3, [r3, #0]
   11284:	001a      	movs	r2, r3
   11286:	4b0b      	ldr	r3, [pc, #44]	; (112b4 <EIC_Handler+0x68>)
   11288:	0092      	lsls	r2, r2, #2
   1128a:	58d3      	ldr	r3, [r2, r3]
   1128c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1128e:	4b06      	ldr	r3, [pc, #24]	; (112a8 <EIC_Handler+0x5c>)
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	3301      	adds	r3, #1
   11294:	b2da      	uxtb	r2, r3
   11296:	4b04      	ldr	r3, [pc, #16]	; (112a8 <EIC_Handler+0x5c>)
   11298:	701a      	strb	r2, [r3, #0]
   1129a:	4b03      	ldr	r3, [pc, #12]	; (112a8 <EIC_Handler+0x5c>)
   1129c:	781b      	ldrb	r3, [r3, #0]
   1129e:	2b0f      	cmp	r3, #15
   112a0:	d9da      	bls.n	11258 <EIC_Handler+0xc>
			}
		}
	}
}
   112a2:	46c0      	nop			; (mov r8, r8)
   112a4:	46bd      	mov	sp, r7
   112a6:	bd80      	pop	{r7, pc}
   112a8:	20001590 	.word	0x20001590
   112ac:	000110d9 	.word	0x000110d9
   112b0:	0001111d 	.word	0x0001111d
   112b4:	20001594 	.word	0x20001594

000112b8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   112b8:	b580      	push	{r7, lr}
   112ba:	b082      	sub	sp, #8
   112bc:	af00      	add	r7, sp, #0
   112be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   112c0:	687b      	ldr	r3, [r7, #4]
   112c2:	2200      	movs	r2, #0
   112c4:	701a      	strb	r2, [r3, #0]
}
   112c6:	46c0      	nop			; (mov r8, r8)
   112c8:	46bd      	mov	sp, r7
   112ca:	b002      	add	sp, #8
   112cc:	bd80      	pop	{r7, pc}
	...

000112d0 <system_apb_clock_set_mask>:
{
   112d0:	b580      	push	{r7, lr}
   112d2:	b082      	sub	sp, #8
   112d4:	af00      	add	r7, sp, #0
   112d6:	0002      	movs	r2, r0
   112d8:	6039      	str	r1, [r7, #0]
   112da:	1dfb      	adds	r3, r7, #7
   112dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   112de:	1dfb      	adds	r3, r7, #7
   112e0:	781b      	ldrb	r3, [r3, #0]
   112e2:	2b04      	cmp	r3, #4
   112e4:	d827      	bhi.n	11336 <system_apb_clock_set_mask+0x66>
   112e6:	009a      	lsls	r2, r3, #2
   112e8:	4b16      	ldr	r3, [pc, #88]	; (11344 <system_apb_clock_set_mask+0x74>)
   112ea:	18d3      	adds	r3, r2, r3
   112ec:	681b      	ldr	r3, [r3, #0]
   112ee:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   112f0:	4b15      	ldr	r3, [pc, #84]	; (11348 <system_apb_clock_set_mask+0x78>)
   112f2:	4a15      	ldr	r2, [pc, #84]	; (11348 <system_apb_clock_set_mask+0x78>)
   112f4:	6951      	ldr	r1, [r2, #20]
   112f6:	683a      	ldr	r2, [r7, #0]
   112f8:	430a      	orrs	r2, r1
   112fa:	615a      	str	r2, [r3, #20]
			break;
   112fc:	e01d      	b.n	1133a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   112fe:	4b12      	ldr	r3, [pc, #72]	; (11348 <system_apb_clock_set_mask+0x78>)
   11300:	4a11      	ldr	r2, [pc, #68]	; (11348 <system_apb_clock_set_mask+0x78>)
   11302:	6991      	ldr	r1, [r2, #24]
   11304:	683a      	ldr	r2, [r7, #0]
   11306:	430a      	orrs	r2, r1
   11308:	619a      	str	r2, [r3, #24]
			break;
   1130a:	e016      	b.n	1133a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   1130c:	4b0e      	ldr	r3, [pc, #56]	; (11348 <system_apb_clock_set_mask+0x78>)
   1130e:	4a0e      	ldr	r2, [pc, #56]	; (11348 <system_apb_clock_set_mask+0x78>)
   11310:	69d1      	ldr	r1, [r2, #28]
   11312:	683a      	ldr	r2, [r7, #0]
   11314:	430a      	orrs	r2, r1
   11316:	61da      	str	r2, [r3, #28]
			break;
   11318:	e00f      	b.n	1133a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   1131a:	4b0b      	ldr	r3, [pc, #44]	; (11348 <system_apb_clock_set_mask+0x78>)
   1131c:	4a0a      	ldr	r2, [pc, #40]	; (11348 <system_apb_clock_set_mask+0x78>)
   1131e:	6a11      	ldr	r1, [r2, #32]
   11320:	683a      	ldr	r2, [r7, #0]
   11322:	430a      	orrs	r2, r1
   11324:	621a      	str	r2, [r3, #32]
			break;
   11326:	e008      	b.n	1133a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   11328:	4b07      	ldr	r3, [pc, #28]	; (11348 <system_apb_clock_set_mask+0x78>)
   1132a:	4a07      	ldr	r2, [pc, #28]	; (11348 <system_apb_clock_set_mask+0x78>)
   1132c:	6a51      	ldr	r1, [r2, #36]	; 0x24
   1132e:	683a      	ldr	r2, [r7, #0]
   11330:	430a      	orrs	r2, r1
   11332:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   11334:	e001      	b.n	1133a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   11336:	2317      	movs	r3, #23
   11338:	e000      	b.n	1133c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   1133a:	2300      	movs	r3, #0
}
   1133c:	0018      	movs	r0, r3
   1133e:	46bd      	mov	sp, r7
   11340:	b002      	add	sp, #8
   11342:	bd80      	pop	{r7, pc}
   11344:	0001cbdc 	.word	0x0001cbdc
   11348:	40000400 	.word	0x40000400

0001134c <system_pinmux_get_config_defaults>:
{
   1134c:	b580      	push	{r7, lr}
   1134e:	b082      	sub	sp, #8
   11350:	af00      	add	r7, sp, #0
   11352:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11354:	687b      	ldr	r3, [r7, #4]
   11356:	2280      	movs	r2, #128	; 0x80
   11358:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1135a:	687b      	ldr	r3, [r7, #4]
   1135c:	2200      	movs	r2, #0
   1135e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11360:	687b      	ldr	r3, [r7, #4]
   11362:	2201      	movs	r2, #1
   11364:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11366:	687b      	ldr	r3, [r7, #4]
   11368:	2200      	movs	r2, #0
   1136a:	70da      	strb	r2, [r3, #3]
}
   1136c:	46c0      	nop			; (mov r8, r8)
   1136e:	46bd      	mov	sp, r7
   11370:	b002      	add	sp, #8
   11372:	bd80      	pop	{r7, pc}

00011374 <system_interrupt_enable>:
{
   11374:	b580      	push	{r7, lr}
   11376:	b082      	sub	sp, #8
   11378:	af00      	add	r7, sp, #0
   1137a:	0002      	movs	r2, r0
   1137c:	1dfb      	adds	r3, r7, #7
   1137e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11380:	4b06      	ldr	r3, [pc, #24]	; (1139c <system_interrupt_enable+0x28>)
   11382:	1dfa      	adds	r2, r7, #7
   11384:	7812      	ldrb	r2, [r2, #0]
   11386:	0011      	movs	r1, r2
   11388:	221f      	movs	r2, #31
   1138a:	400a      	ands	r2, r1
   1138c:	2101      	movs	r1, #1
   1138e:	4091      	lsls	r1, r2
   11390:	000a      	movs	r2, r1
   11392:	601a      	str	r2, [r3, #0]
}
   11394:	46c0      	nop			; (mov r8, r8)
   11396:	46bd      	mov	sp, r7
   11398:	b002      	add	sp, #8
   1139a:	bd80      	pop	{r7, pc}
   1139c:	e000e100 	.word	0xe000e100

000113a0 <_extint_get_eic_from_channel>:
{
   113a0:	b580      	push	{r7, lr}
   113a2:	b084      	sub	sp, #16
   113a4:	af00      	add	r7, sp, #0
   113a6:	0002      	movs	r2, r0
   113a8:	1dfb      	adds	r3, r7, #7
   113aa:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   113ac:	230f      	movs	r3, #15
   113ae:	18fb      	adds	r3, r7, r3
   113b0:	1dfa      	adds	r2, r7, #7
   113b2:	7812      	ldrb	r2, [r2, #0]
   113b4:	0952      	lsrs	r2, r2, #5
   113b6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   113b8:	230f      	movs	r3, #15
   113ba:	18fb      	adds	r3, r7, r3
   113bc:	781b      	ldrb	r3, [r3, #0]
   113be:	2b00      	cmp	r3, #0
   113c0:	d10c      	bne.n	113dc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   113c2:	4b09      	ldr	r3, [pc, #36]	; (113e8 <_extint_get_eic_from_channel+0x48>)
   113c4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   113c6:	230f      	movs	r3, #15
   113c8:	18fb      	adds	r3, r7, r3
   113ca:	781b      	ldrb	r3, [r3, #0]
   113cc:	009b      	lsls	r3, r3, #2
   113ce:	2210      	movs	r2, #16
   113d0:	4694      	mov	ip, r2
   113d2:	44bc      	add	ip, r7
   113d4:	4463      	add	r3, ip
   113d6:	3b08      	subs	r3, #8
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	e000      	b.n	113de <_extint_get_eic_from_channel+0x3e>
		return NULL;
   113dc:	2300      	movs	r3, #0
}
   113de:	0018      	movs	r0, r3
   113e0:	46bd      	mov	sp, r7
   113e2:	b004      	add	sp, #16
   113e4:	bd80      	pop	{r7, pc}
   113e6:	46c0      	nop			; (mov r8, r8)
   113e8:	40002400 	.word	0x40002400

000113ec <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   113ec:	b580      	push	{r7, lr}
   113ee:	b082      	sub	sp, #8
   113f0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   113f2:	4b15      	ldr	r3, [pc, #84]	; (11448 <extint_is_syncing+0x5c>)
   113f4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   113f6:	2300      	movs	r3, #0
   113f8:	607b      	str	r3, [r7, #4]
   113fa:	e01c      	b.n	11436 <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   113fc:	687b      	ldr	r3, [r7, #4]
   113fe:	009b      	lsls	r3, r3, #2
   11400:	2208      	movs	r2, #8
   11402:	4694      	mov	ip, r2
   11404:	44bc      	add	ip, r7
   11406:	4463      	add	r3, ip
   11408:	3b08      	subs	r3, #8
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	685b      	ldr	r3, [r3, #4]
   1140e:	2202      	movs	r2, #2
   11410:	4013      	ands	r3, r2
   11412:	d10b      	bne.n	1142c <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   11414:	687b      	ldr	r3, [r7, #4]
   11416:	009b      	lsls	r3, r3, #2
   11418:	2208      	movs	r2, #8
   1141a:	4694      	mov	ip, r2
   1141c:	44bc      	add	ip, r7
   1141e:	4463      	add	r3, ip
   11420:	3b08      	subs	r3, #8
   11422:	681b      	ldr	r3, [r3, #0]
   11424:	685b      	ldr	r3, [r3, #4]
   11426:	2201      	movs	r2, #1
   11428:	4013      	ands	r3, r2
   1142a:	d001      	beq.n	11430 <extint_is_syncing+0x44>
			return true;
   1142c:	2301      	movs	r3, #1
   1142e:	e006      	b.n	1143e <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   11430:	687b      	ldr	r3, [r7, #4]
   11432:	3301      	adds	r3, #1
   11434:	607b      	str	r3, [r7, #4]
   11436:	687b      	ldr	r3, [r7, #4]
   11438:	2b00      	cmp	r3, #0
   1143a:	d0df      	beq.n	113fc <extint_is_syncing+0x10>
		}
	}
	return false;
   1143c:	2300      	movs	r3, #0
}
   1143e:	0018      	movs	r0, r3
   11440:	46bd      	mov	sp, r7
   11442:	b002      	add	sp, #8
   11444:	bd80      	pop	{r7, pc}
   11446:	46c0      	nop			; (mov r8, r8)
   11448:	40002400 	.word	0x40002400

0001144c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1144c:	b580      	push	{r7, lr}
   1144e:	b086      	sub	sp, #24
   11450:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   11452:	4b38      	ldr	r3, [pc, #224]	; (11534 <_system_extint_init+0xe8>)
   11454:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
   11456:	2380      	movs	r3, #128	; 0x80
   11458:	009b      	lsls	r3, r3, #2
   1145a:	0019      	movs	r1, r3
   1145c:	2000      	movs	r0, #0
   1145e:	4b36      	ldr	r3, [pc, #216]	; (11538 <_system_extint_init+0xec>)
   11460:	4798      	blx	r3

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   11462:	1d3b      	adds	r3, r7, #4
   11464:	0018      	movs	r0, r3
   11466:	4b35      	ldr	r3, [pc, #212]	; (1153c <_system_extint_init+0xf0>)
   11468:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1146a:	1d3b      	adds	r3, r7, #4
   1146c:	2200      	movs	r2, #0
   1146e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   11470:	1d3b      	adds	r3, r7, #4
   11472:	0019      	movs	r1, r3
   11474:	2003      	movs	r0, #3
   11476:	4b32      	ldr	r3, [pc, #200]	; (11540 <_system_extint_init+0xf4>)
   11478:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1147a:	2003      	movs	r0, #3
   1147c:	4b31      	ldr	r3, [pc, #196]	; (11544 <_system_extint_init+0xf8>)
   1147e:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   11480:	2300      	movs	r3, #0
   11482:	617b      	str	r3, [r7, #20]
   11484:	e018      	b.n	114b8 <_system_extint_init+0x6c>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
   11486:	697b      	ldr	r3, [r7, #20]
   11488:	009b      	lsls	r3, r3, #2
   1148a:	2218      	movs	r2, #24
   1148c:	4694      	mov	ip, r2
   1148e:	44bc      	add	ip, r7
   11490:	4463      	add	r3, ip
   11492:	3b10      	subs	r3, #16
   11494:	681a      	ldr	r2, [r3, #0]
   11496:	697b      	ldr	r3, [r7, #20]
   11498:	009b      	lsls	r3, r3, #2
   1149a:	2118      	movs	r1, #24
   1149c:	468c      	mov	ip, r1
   1149e:	44bc      	add	ip, r7
   114a0:	4463      	add	r3, ip
   114a2:	3b10      	subs	r3, #16
   114a4:	681b      	ldr	r3, [r3, #0]
   114a6:	781b      	ldrb	r3, [r3, #0]
   114a8:	b2db      	uxtb	r3, r3
   114aa:	2101      	movs	r1, #1
   114ac:	430b      	orrs	r3, r1
   114ae:	b2db      	uxtb	r3, r3
   114b0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   114b2:	697b      	ldr	r3, [r7, #20]
   114b4:	3301      	adds	r3, #1
   114b6:	617b      	str	r3, [r7, #20]
   114b8:	697b      	ldr	r3, [r7, #20]
   114ba:	2b00      	cmp	r3, #0
   114bc:	d0e3      	beq.n	11486 <_system_extint_init+0x3a>
	}

	while (extint_is_syncing()) {
   114be:	46c0      	nop			; (mov r8, r8)
   114c0:	4b21      	ldr	r3, [pc, #132]	; (11548 <_system_extint_init+0xfc>)
   114c2:	4798      	blx	r3
   114c4:	1e03      	subs	r3, r0, #0
   114c6:	d1fb      	bne.n	114c0 <_system_extint_init+0x74>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   114c8:	2300      	movs	r3, #0
   114ca:	613b      	str	r3, [r7, #16]
   114cc:	e00e      	b.n	114ec <_system_extint_init+0xa0>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
   114ce:	693b      	ldr	r3, [r7, #16]
   114d0:	009b      	lsls	r3, r3, #2
   114d2:	2218      	movs	r2, #24
   114d4:	4694      	mov	ip, r2
   114d6:	44bc      	add	ip, r7
   114d8:	4463      	add	r3, ip
   114da:	3b10      	subs	r3, #16
   114dc:	681a      	ldr	r2, [r3, #0]
   114de:	7813      	ldrb	r3, [r2, #0]
   114e0:	2110      	movs	r1, #16
   114e2:	438b      	bics	r3, r1
   114e4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   114e6:	693b      	ldr	r3, [r7, #16]
   114e8:	3301      	adds	r3, #1
   114ea:	613b      	str	r3, [r7, #16]
   114ec:	693b      	ldr	r3, [r7, #16]
   114ee:	2b00      	cmp	r3, #0
   114f0:	d0ed      	beq.n	114ce <_system_extint_init+0x82>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   114f2:	230f      	movs	r3, #15
   114f4:	18fb      	adds	r3, r7, r3
   114f6:	2200      	movs	r2, #0
   114f8:	701a      	strb	r2, [r3, #0]
   114fa:	e00d      	b.n	11518 <_system_extint_init+0xcc>
		_extint_dev.callbacks[j] = NULL;
   114fc:	230f      	movs	r3, #15
   114fe:	18fb      	adds	r3, r7, r3
   11500:	781a      	ldrb	r2, [r3, #0]
   11502:	4b12      	ldr	r3, [pc, #72]	; (1154c <_system_extint_init+0x100>)
   11504:	0092      	lsls	r2, r2, #2
   11506:	2100      	movs	r1, #0
   11508:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1150a:	230f      	movs	r3, #15
   1150c:	18fb      	adds	r3, r7, r3
   1150e:	781a      	ldrb	r2, [r3, #0]
   11510:	230f      	movs	r3, #15
   11512:	18fb      	adds	r3, r7, r3
   11514:	3201      	adds	r2, #1
   11516:	701a      	strb	r2, [r3, #0]
   11518:	230f      	movs	r3, #15
   1151a:	18fb      	adds	r3, r7, r3
   1151c:	781b      	ldrb	r3, [r3, #0]
   1151e:	2b0f      	cmp	r3, #15
   11520:	d9ec      	bls.n	114fc <_system_extint_init+0xb0>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   11522:	2003      	movs	r0, #3
   11524:	4b0a      	ldr	r3, [pc, #40]	; (11550 <_system_extint_init+0x104>)
   11526:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   11528:	4b0a      	ldr	r3, [pc, #40]	; (11554 <_system_extint_init+0x108>)
   1152a:	4798      	blx	r3
}
   1152c:	46c0      	nop			; (mov r8, r8)
   1152e:	46bd      	mov	sp, r7
   11530:	b006      	add	sp, #24
   11532:	bd80      	pop	{r7, pc}
   11534:	40002400 	.word	0x40002400
   11538:	000112d1 	.word	0x000112d1
   1153c:	000112b9 	.word	0x000112b9
   11540:	00015069 	.word	0x00015069
   11544:	000150a9 	.word	0x000150a9
   11548:	000113ed 	.word	0x000113ed
   1154c:	20001594 	.word	0x20001594
   11550:	00011375 	.word	0x00011375
   11554:	00011559 	.word	0x00011559

00011558 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   11558:	b580      	push	{r7, lr}
   1155a:	b082      	sub	sp, #8
   1155c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1155e:	4b15      	ldr	r3, [pc, #84]	; (115b4 <_extint_enable+0x5c>)
   11560:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   11562:	2300      	movs	r3, #0
   11564:	607b      	str	r3, [r7, #4]
   11566:	e018      	b.n	1159a <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
   11568:	687b      	ldr	r3, [r7, #4]
   1156a:	009b      	lsls	r3, r3, #2
   1156c:	2208      	movs	r2, #8
   1156e:	4694      	mov	ip, r2
   11570:	44bc      	add	ip, r7
   11572:	4463      	add	r3, ip
   11574:	3b08      	subs	r3, #8
   11576:	681a      	ldr	r2, [r3, #0]
   11578:	687b      	ldr	r3, [r7, #4]
   1157a:	009b      	lsls	r3, r3, #2
   1157c:	2108      	movs	r1, #8
   1157e:	468c      	mov	ip, r1
   11580:	44bc      	add	ip, r7
   11582:	4463      	add	r3, ip
   11584:	3b08      	subs	r3, #8
   11586:	681b      	ldr	r3, [r3, #0]
   11588:	781b      	ldrb	r3, [r3, #0]
   1158a:	b2db      	uxtb	r3, r3
   1158c:	2102      	movs	r1, #2
   1158e:	430b      	orrs	r3, r1
   11590:	b2db      	uxtb	r3, r3
   11592:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   11594:	687b      	ldr	r3, [r7, #4]
   11596:	3301      	adds	r3, #1
   11598:	607b      	str	r3, [r7, #4]
   1159a:	687b      	ldr	r3, [r7, #4]
   1159c:	2b00      	cmp	r3, #0
   1159e:	d0e3      	beq.n	11568 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   115a0:	46c0      	nop			; (mov r8, r8)
   115a2:	4b05      	ldr	r3, [pc, #20]	; (115b8 <_extint_enable+0x60>)
   115a4:	4798      	blx	r3
   115a6:	1e03      	subs	r3, r0, #0
   115a8:	d1fb      	bne.n	115a2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   115aa:	46c0      	nop			; (mov r8, r8)
   115ac:	46bd      	mov	sp, r7
   115ae:	b002      	add	sp, #8
   115b0:	bd80      	pop	{r7, pc}
   115b2:	46c0      	nop			; (mov r8, r8)
   115b4:	40002400 	.word	0x40002400
   115b8:	000113ed 	.word	0x000113ed

000115bc <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
   115bc:	b580      	push	{r7, lr}
   115be:	b082      	sub	sp, #8
   115c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   115c2:	4b15      	ldr	r3, [pc, #84]	; (11618 <_extint_disable+0x5c>)
   115c4:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   115c6:	2300      	movs	r3, #0
   115c8:	607b      	str	r3, [r7, #4]
   115ca:	e018      	b.n	115fe <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
   115cc:	687b      	ldr	r3, [r7, #4]
   115ce:	009b      	lsls	r3, r3, #2
   115d0:	2208      	movs	r2, #8
   115d2:	4694      	mov	ip, r2
   115d4:	44bc      	add	ip, r7
   115d6:	4463      	add	r3, ip
   115d8:	3b08      	subs	r3, #8
   115da:	681a      	ldr	r2, [r3, #0]
   115dc:	687b      	ldr	r3, [r7, #4]
   115de:	009b      	lsls	r3, r3, #2
   115e0:	2108      	movs	r1, #8
   115e2:	468c      	mov	ip, r1
   115e4:	44bc      	add	ip, r7
   115e6:	4463      	add	r3, ip
   115e8:	3b08      	subs	r3, #8
   115ea:	681b      	ldr	r3, [r3, #0]
   115ec:	781b      	ldrb	r3, [r3, #0]
   115ee:	b2db      	uxtb	r3, r3
   115f0:	2102      	movs	r1, #2
   115f2:	438b      	bics	r3, r1
   115f4:	b2db      	uxtb	r3, r3
   115f6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   115f8:	687b      	ldr	r3, [r7, #4]
   115fa:	3301      	adds	r3, #1
   115fc:	607b      	str	r3, [r7, #4]
   115fe:	687b      	ldr	r3, [r7, #4]
   11600:	2b00      	cmp	r3, #0
   11602:	d0e3      	beq.n	115cc <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
   11604:	46c0      	nop			; (mov r8, r8)
   11606:	4b05      	ldr	r3, [pc, #20]	; (1161c <_extint_disable+0x60>)
   11608:	4798      	blx	r3
   1160a:	1e03      	subs	r3, r0, #0
   1160c:	d1fb      	bne.n	11606 <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1160e:	46c0      	nop			; (mov r8, r8)
   11610:	46bd      	mov	sp, r7
   11612:	b002      	add	sp, #8
   11614:	bd80      	pop	{r7, pc}
   11616:	46c0      	nop			; (mov r8, r8)
   11618:	40002400 	.word	0x40002400
   1161c:	000113ed 	.word	0x000113ed

00011620 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   11620:	b580      	push	{r7, lr}
   11622:	b082      	sub	sp, #8
   11624:	af00      	add	r7, sp, #0
   11626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   11628:	687b      	ldr	r3, [r7, #4]
   1162a:	2200      	movs	r2, #0
   1162c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1162e:	687b      	ldr	r3, [r7, #4]
   11630:	2200      	movs	r2, #0
   11632:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   11634:	687b      	ldr	r3, [r7, #4]
   11636:	2201      	movs	r2, #1
   11638:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
   1163a:	687b      	ldr	r3, [r7, #4]
   1163c:	2200      	movs	r2, #0
   1163e:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   11640:	687b      	ldr	r3, [r7, #4]
   11642:	2202      	movs	r2, #2
   11644:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
   11646:	687b      	ldr	r3, [r7, #4]
   11648:	2200      	movs	r2, #0
   1164a:	725a      	strb	r2, [r3, #9]
}
   1164c:	46c0      	nop			; (mov r8, r8)
   1164e:	46bd      	mov	sp, r7
   11650:	b002      	add	sp, #8
   11652:	bd80      	pop	{r7, pc}

00011654 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   11654:	b580      	push	{r7, lr}
   11656:	b086      	sub	sp, #24
   11658:	af00      	add	r7, sp, #0
   1165a:	0002      	movs	r2, r0
   1165c:	6039      	str	r1, [r7, #0]
   1165e:	1dfb      	adds	r3, r7, #7
   11660:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
   11662:	4b3c      	ldr	r3, [pc, #240]	; (11754 <extint_chan_set_config+0x100>)
   11664:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11666:	2308      	movs	r3, #8
   11668:	18fb      	adds	r3, r7, r3
   1166a:	0018      	movs	r0, r3
   1166c:	4b3a      	ldr	r3, [pc, #232]	; (11758 <extint_chan_set_config+0x104>)
   1166e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   11670:	683b      	ldr	r3, [r7, #0]
   11672:	685b      	ldr	r3, [r3, #4]
   11674:	b2da      	uxtb	r2, r3
   11676:	2308      	movs	r3, #8
   11678:	18fb      	adds	r3, r7, r3
   1167a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1167c:	2308      	movs	r3, #8
   1167e:	18fb      	adds	r3, r7, r3
   11680:	2200      	movs	r2, #0
   11682:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   11684:	683b      	ldr	r3, [r7, #0]
   11686:	7a1a      	ldrb	r2, [r3, #8]
   11688:	2308      	movs	r3, #8
   1168a:	18fb      	adds	r3, r7, r3
   1168c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1168e:	683b      	ldr	r3, [r7, #0]
   11690:	681b      	ldr	r3, [r3, #0]
   11692:	b2db      	uxtb	r3, r3
   11694:	2208      	movs	r2, #8
   11696:	18ba      	adds	r2, r7, r2
   11698:	0011      	movs	r1, r2
   1169a:	0018      	movs	r0, r3
   1169c:	4b2f      	ldr	r3, [pc, #188]	; (1175c <extint_chan_set_config+0x108>)
   1169e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   116a0:	1dfb      	adds	r3, r7, #7
   116a2:	781b      	ldrb	r3, [r3, #0]
   116a4:	0018      	movs	r0, r3
   116a6:	4b2e      	ldr	r3, [pc, #184]	; (11760 <extint_chan_set_config+0x10c>)
   116a8:	4798      	blx	r3
   116aa:	0003      	movs	r3, r0
   116ac:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   116ae:	1dfb      	adds	r3, r7, #7
   116b0:	781b      	ldrb	r3, [r3, #0]
   116b2:	2207      	movs	r2, #7
   116b4:	4013      	ands	r3, r2
   116b6:	009b      	lsls	r3, r3, #2
   116b8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   116ba:	683b      	ldr	r3, [r7, #0]
   116bc:	7adb      	ldrb	r3, [r3, #11]
   116be:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   116c0:	683b      	ldr	r3, [r7, #0]
   116c2:	7a9b      	ldrb	r3, [r3, #10]
   116c4:	2b00      	cmp	r3, #0
   116c6:	d003      	beq.n	116d0 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
   116c8:	697b      	ldr	r3, [r7, #20]
   116ca:	2208      	movs	r2, #8
   116cc:	4313      	orrs	r3, r2
   116ce:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   116d0:	1dfb      	adds	r3, r7, #7
   116d2:	781b      	ldrb	r3, [r3, #0]
   116d4:	08db      	lsrs	r3, r3, #3
   116d6:	b2db      	uxtb	r3, r3
   116d8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   116da:	1dfb      	adds	r3, r7, #7
   116dc:	781b      	ldrb	r3, [r3, #0]
   116de:	08db      	lsrs	r3, r3, #3
   116e0:	b2db      	uxtb	r3, r3
   116e2:	693a      	ldr	r2, [r7, #16]
   116e4:	3306      	adds	r3, #6
   116e6:	009b      	lsls	r3, r3, #2
   116e8:	18d3      	adds	r3, r2, r3
   116ea:	3304      	adds	r3, #4
   116ec:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   116ee:	210f      	movs	r1, #15
   116f0:	68fa      	ldr	r2, [r7, #12]
   116f2:	4091      	lsls	r1, r2
   116f4:	000a      	movs	r2, r1
   116f6:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   116f8:	401a      	ands	r2, r3
			(new_config << config_pos);
   116fa:	6979      	ldr	r1, [r7, #20]
   116fc:	68fb      	ldr	r3, [r7, #12]
   116fe:	4099      	lsls	r1, r3
   11700:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   11702:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   11704:	6939      	ldr	r1, [r7, #16]
   11706:	1d83      	adds	r3, r0, #6
   11708:	009b      	lsls	r3, r3, #2
   1170a:	18cb      	adds	r3, r1, r3
   1170c:	3304      	adds	r3, #4
   1170e:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
   11710:	683b      	ldr	r3, [r7, #0]
   11712:	7a5b      	ldrb	r3, [r3, #9]
   11714:	2b00      	cmp	r3, #0
   11716:	d00a      	beq.n	1172e <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
   11718:	693b      	ldr	r3, [r7, #16]
   1171a:	699a      	ldr	r2, [r3, #24]
   1171c:	1dfb      	adds	r3, r7, #7
   1171e:	781b      	ldrb	r3, [r3, #0]
   11720:	2101      	movs	r1, #1
   11722:	4099      	lsls	r1, r3
   11724:	000b      	movs	r3, r1
   11726:	431a      	orrs	r2, r3
   11728:	693b      	ldr	r3, [r7, #16]
   1172a:	619a      	str	r2, [r3, #24]
   1172c:	e00c      	b.n	11748 <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
   1172e:	693b      	ldr	r3, [r7, #16]
   11730:	699b      	ldr	r3, [r3, #24]
   11732:	1dfa      	adds	r2, r7, #7
   11734:	7812      	ldrb	r2, [r2, #0]
   11736:	2101      	movs	r1, #1
   11738:	4091      	lsls	r1, r2
   1173a:	000a      	movs	r2, r1
   1173c:	43d2      	mvns	r2, r2
   1173e:	4013      	ands	r3, r2
   11740:	041b      	lsls	r3, r3, #16
   11742:	0c1a      	lsrs	r2, r3, #16
   11744:	693b      	ldr	r3, [r7, #16]
   11746:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
   11748:	4b06      	ldr	r3, [pc, #24]	; (11764 <extint_chan_set_config+0x110>)
   1174a:	4798      	blx	r3
}
   1174c:	46c0      	nop			; (mov r8, r8)
   1174e:	46bd      	mov	sp, r7
   11750:	b006      	add	sp, #24
   11752:	bd80      	pop	{r7, pc}
   11754:	000115bd 	.word	0x000115bd
   11758:	0001134d 	.word	0x0001134d
   1175c:	00015391 	.word	0x00015391
   11760:	000113a1 	.word	0x000113a1
   11764:	00011559 	.word	0x00011559

00011768 <system_pinmux_get_config_defaults>:
{
   11768:	b580      	push	{r7, lr}
   1176a:	b082      	sub	sp, #8
   1176c:	af00      	add	r7, sp, #0
   1176e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11770:	687b      	ldr	r3, [r7, #4]
   11772:	2280      	movs	r2, #128	; 0x80
   11774:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11776:	687b      	ldr	r3, [r7, #4]
   11778:	2200      	movs	r2, #0
   1177a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1177c:	687b      	ldr	r3, [r7, #4]
   1177e:	2201      	movs	r2, #1
   11780:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11782:	687b      	ldr	r3, [r7, #4]
   11784:	2200      	movs	r2, #0
   11786:	70da      	strb	r2, [r3, #3]
}
   11788:	46c0      	nop			; (mov r8, r8)
   1178a:	46bd      	mov	sp, r7
   1178c:	b002      	add	sp, #8
   1178e:	bd80      	pop	{r7, pc}

00011790 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11790:	b580      	push	{r7, lr}
   11792:	b084      	sub	sp, #16
   11794:	af00      	add	r7, sp, #0
   11796:	0002      	movs	r2, r0
   11798:	6039      	str	r1, [r7, #0]
   1179a:	1dfb      	adds	r3, r7, #7
   1179c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1179e:	230c      	movs	r3, #12
   117a0:	18fb      	adds	r3, r7, r3
   117a2:	0018      	movs	r0, r3
   117a4:	4b10      	ldr	r3, [pc, #64]	; (117e8 <port_pin_set_config+0x58>)
   117a6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   117a8:	230c      	movs	r3, #12
   117aa:	18fb      	adds	r3, r7, r3
   117ac:	2280      	movs	r2, #128	; 0x80
   117ae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   117b0:	683b      	ldr	r3, [r7, #0]
   117b2:	781a      	ldrb	r2, [r3, #0]
   117b4:	230c      	movs	r3, #12
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   117ba:	683b      	ldr	r3, [r7, #0]
   117bc:	785a      	ldrb	r2, [r3, #1]
   117be:	230c      	movs	r3, #12
   117c0:	18fb      	adds	r3, r7, r3
   117c2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   117c4:	683b      	ldr	r3, [r7, #0]
   117c6:	789a      	ldrb	r2, [r3, #2]
   117c8:	230c      	movs	r3, #12
   117ca:	18fb      	adds	r3, r7, r3
   117cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   117ce:	230c      	movs	r3, #12
   117d0:	18fa      	adds	r2, r7, r3
   117d2:	1dfb      	adds	r3, r7, #7
   117d4:	781b      	ldrb	r3, [r3, #0]
   117d6:	0011      	movs	r1, r2
   117d8:	0018      	movs	r0, r3
   117da:	4b04      	ldr	r3, [pc, #16]	; (117ec <port_pin_set_config+0x5c>)
   117dc:	4798      	blx	r3
}
   117de:	46c0      	nop			; (mov r8, r8)
   117e0:	46bd      	mov	sp, r7
   117e2:	b004      	add	sp, #16
   117e4:	bd80      	pop	{r7, pc}
   117e6:	46c0      	nop			; (mov r8, r8)
   117e8:	00011769 	.word	0x00011769
   117ec:	00015391 	.word	0x00015391

000117f0 <system_gclk_chan_get_config_defaults>:
{
   117f0:	b580      	push	{r7, lr}
   117f2:	b082      	sub	sp, #8
   117f4:	af00      	add	r7, sp, #0
   117f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   117f8:	687b      	ldr	r3, [r7, #4]
   117fa:	2200      	movs	r2, #0
   117fc:	701a      	strb	r2, [r3, #0]
}
   117fe:	46c0      	nop			; (mov r8, r8)
   11800:	46bd      	mov	sp, r7
   11802:	b002      	add	sp, #8
   11804:	bd80      	pop	{r7, pc}
	...

00011808 <system_apb_clock_set_mask>:
{
   11808:	b580      	push	{r7, lr}
   1180a:	b082      	sub	sp, #8
   1180c:	af00      	add	r7, sp, #0
   1180e:	0002      	movs	r2, r0
   11810:	6039      	str	r1, [r7, #0]
   11812:	1dfb      	adds	r3, r7, #7
   11814:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11816:	1dfb      	adds	r3, r7, #7
   11818:	781b      	ldrb	r3, [r3, #0]
   1181a:	2b04      	cmp	r3, #4
   1181c:	d827      	bhi.n	1186e <system_apb_clock_set_mask+0x66>
   1181e:	009a      	lsls	r2, r3, #2
   11820:	4b16      	ldr	r3, [pc, #88]	; (1187c <system_apb_clock_set_mask+0x74>)
   11822:	18d3      	adds	r3, r2, r3
   11824:	681b      	ldr	r3, [r3, #0]
   11826:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   11828:	4b15      	ldr	r3, [pc, #84]	; (11880 <system_apb_clock_set_mask+0x78>)
   1182a:	4a15      	ldr	r2, [pc, #84]	; (11880 <system_apb_clock_set_mask+0x78>)
   1182c:	6951      	ldr	r1, [r2, #20]
   1182e:	683a      	ldr	r2, [r7, #0]
   11830:	430a      	orrs	r2, r1
   11832:	615a      	str	r2, [r3, #20]
			break;
   11834:	e01d      	b.n	11872 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   11836:	4b12      	ldr	r3, [pc, #72]	; (11880 <system_apb_clock_set_mask+0x78>)
   11838:	4a11      	ldr	r2, [pc, #68]	; (11880 <system_apb_clock_set_mask+0x78>)
   1183a:	6991      	ldr	r1, [r2, #24]
   1183c:	683a      	ldr	r2, [r7, #0]
   1183e:	430a      	orrs	r2, r1
   11840:	619a      	str	r2, [r3, #24]
			break;
   11842:	e016      	b.n	11872 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   11844:	4b0e      	ldr	r3, [pc, #56]	; (11880 <system_apb_clock_set_mask+0x78>)
   11846:	4a0e      	ldr	r2, [pc, #56]	; (11880 <system_apb_clock_set_mask+0x78>)
   11848:	69d1      	ldr	r1, [r2, #28]
   1184a:	683a      	ldr	r2, [r7, #0]
   1184c:	430a      	orrs	r2, r1
   1184e:	61da      	str	r2, [r3, #28]
			break;
   11850:	e00f      	b.n	11872 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   11852:	4b0b      	ldr	r3, [pc, #44]	; (11880 <system_apb_clock_set_mask+0x78>)
   11854:	4a0a      	ldr	r2, [pc, #40]	; (11880 <system_apb_clock_set_mask+0x78>)
   11856:	6a11      	ldr	r1, [r2, #32]
   11858:	683a      	ldr	r2, [r7, #0]
   1185a:	430a      	orrs	r2, r1
   1185c:	621a      	str	r2, [r3, #32]
			break;
   1185e:	e008      	b.n	11872 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   11860:	4b07      	ldr	r3, [pc, #28]	; (11880 <system_apb_clock_set_mask+0x78>)
   11862:	4a07      	ldr	r2, [pc, #28]	; (11880 <system_apb_clock_set_mask+0x78>)
   11864:	6a51      	ldr	r1, [r2, #36]	; 0x24
   11866:	683a      	ldr	r2, [r7, #0]
   11868:	430a      	orrs	r2, r1
   1186a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   1186c:	e001      	b.n	11872 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   1186e:	2317      	movs	r3, #23
   11870:	e000      	b.n	11874 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   11872:	2300      	movs	r3, #0
}
   11874:	0018      	movs	r0, r3
   11876:	46bd      	mov	sp, r7
   11878:	b002      	add	sp, #8
   1187a:	bd80      	pop	{r7, pc}
   1187c:	0001cbf0 	.word	0x0001cbf0
   11880:	40000400 	.word	0x40000400

00011884 <system_pinmux_get_config_defaults>:
{
   11884:	b580      	push	{r7, lr}
   11886:	b082      	sub	sp, #8
   11888:	af00      	add	r7, sp, #0
   1188a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1188c:	687b      	ldr	r3, [r7, #4]
   1188e:	2280      	movs	r2, #128	; 0x80
   11890:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11892:	687b      	ldr	r3, [r7, #4]
   11894:	2200      	movs	r2, #0
   11896:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11898:	687b      	ldr	r3, [r7, #4]
   1189a:	2201      	movs	r2, #1
   1189c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1189e:	687b      	ldr	r3, [r7, #4]
   118a0:	2200      	movs	r2, #0
   118a2:	70da      	strb	r2, [r3, #3]
}
   118a4:	46c0      	nop			; (mov r8, r8)
   118a6:	46bd      	mov	sp, r7
   118a8:	b002      	add	sp, #8
   118aa:	bd80      	pop	{r7, pc}

000118ac <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   118ac:	b580      	push	{r7, lr}
   118ae:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   118b0:	4b05      	ldr	r3, [pc, #20]	; (118c8 <system_is_debugger_present+0x1c>)
   118b2:	789b      	ldrb	r3, [r3, #2]
   118b4:	b2db      	uxtb	r3, r3
   118b6:	001a      	movs	r2, r3
   118b8:	2302      	movs	r3, #2
   118ba:	4013      	ands	r3, r2
   118bc:	1e5a      	subs	r2, r3, #1
   118be:	4193      	sbcs	r3, r2
   118c0:	b2db      	uxtb	r3, r3
}
   118c2:	0018      	movs	r0, r3
   118c4:	46bd      	mov	sp, r7
   118c6:	bd80      	pop	{r7, pc}
   118c8:	41002000 	.word	0x41002000

000118cc <system_interrupt_enter_critical_section>:
{
   118cc:	b580      	push	{r7, lr}
   118ce:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   118d0:	4b02      	ldr	r3, [pc, #8]	; (118dc <system_interrupt_enter_critical_section+0x10>)
   118d2:	4798      	blx	r3
}
   118d4:	46c0      	nop			; (mov r8, r8)
   118d6:	46bd      	mov	sp, r7
   118d8:	bd80      	pop	{r7, pc}
   118da:	46c0      	nop			; (mov r8, r8)
   118dc:	00010dbd 	.word	0x00010dbd

000118e0 <system_interrupt_leave_critical_section>:
{
   118e0:	b580      	push	{r7, lr}
   118e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   118e4:	4b02      	ldr	r3, [pc, #8]	; (118f0 <system_interrupt_leave_critical_section+0x10>)
   118e6:	4798      	blx	r3
}
   118e8:	46c0      	nop			; (mov r8, r8)
   118ea:	46bd      	mov	sp, r7
   118ec:	bd80      	pop	{r7, pc}
   118ee:	46c0      	nop			; (mov r8, r8)
   118f0:	00010e11 	.word	0x00010e11

000118f4 <system_interrupt_disable>:
{
   118f4:	b580      	push	{r7, lr}
   118f6:	b082      	sub	sp, #8
   118f8:	af00      	add	r7, sp, #0
   118fa:	0002      	movs	r2, r0
   118fc:	1dfb      	adds	r3, r7, #7
   118fe:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11900:	4a07      	ldr	r2, [pc, #28]	; (11920 <system_interrupt_disable+0x2c>)
   11902:	1dfb      	adds	r3, r7, #7
   11904:	781b      	ldrb	r3, [r3, #0]
   11906:	0019      	movs	r1, r3
   11908:	231f      	movs	r3, #31
   1190a:	400b      	ands	r3, r1
   1190c:	2101      	movs	r1, #1
   1190e:	4099      	lsls	r1, r3
   11910:	000b      	movs	r3, r1
   11912:	0019      	movs	r1, r3
   11914:	2380      	movs	r3, #128	; 0x80
   11916:	50d1      	str	r1, [r2, r3]
}
   11918:	46c0      	nop			; (mov r8, r8)
   1191a:	46bd      	mov	sp, r7
   1191c:	b002      	add	sp, #8
   1191e:	bd80      	pop	{r7, pc}
   11920:	e000e100 	.word	0xe000e100

00011924 <i2c_master_is_syncing>:
{
   11924:	b580      	push	{r7, lr}
   11926:	b084      	sub	sp, #16
   11928:	af00      	add	r7, sp, #0
   1192a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1192c:	687b      	ldr	r3, [r7, #4]
   1192e:	681b      	ldr	r3, [r3, #0]
   11930:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   11932:	68fb      	ldr	r3, [r7, #12]
   11934:	69db      	ldr	r3, [r3, #28]
   11936:	2207      	movs	r2, #7
   11938:	4013      	ands	r3, r2
   1193a:	1e5a      	subs	r2, r3, #1
   1193c:	4193      	sbcs	r3, r2
   1193e:	b2db      	uxtb	r3, r3
}
   11940:	0018      	movs	r0, r3
   11942:	46bd      	mov	sp, r7
   11944:	b004      	add	sp, #16
   11946:	bd80      	pop	{r7, pc}

00011948 <_i2c_master_wait_for_sync>:
{
   11948:	b580      	push	{r7, lr}
   1194a:	b082      	sub	sp, #8
   1194c:	af00      	add	r7, sp, #0
   1194e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   11950:	46c0      	nop			; (mov r8, r8)
   11952:	687b      	ldr	r3, [r7, #4]
   11954:	0018      	movs	r0, r3
   11956:	4b04      	ldr	r3, [pc, #16]	; (11968 <_i2c_master_wait_for_sync+0x20>)
   11958:	4798      	blx	r3
   1195a:	1e03      	subs	r3, r0, #0
   1195c:	d1f9      	bne.n	11952 <_i2c_master_wait_for_sync+0xa>
}
   1195e:	46c0      	nop			; (mov r8, r8)
   11960:	46bd      	mov	sp, r7
   11962:	b002      	add	sp, #8
   11964:	bd80      	pop	{r7, pc}
   11966:	46c0      	nop			; (mov r8, r8)
   11968:	00011925 	.word	0x00011925

0001196c <i2c_master_disable>:
{
   1196c:	b580      	push	{r7, lr}
   1196e:	b084      	sub	sp, #16
   11970:	af00      	add	r7, sp, #0
   11972:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11974:	687b      	ldr	r3, [r7, #4]
   11976:	681b      	ldr	r3, [r3, #0]
   11978:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1197a:	687b      	ldr	r3, [r7, #4]
   1197c:	681b      	ldr	r3, [r3, #0]
   1197e:	0018      	movs	r0, r3
   11980:	4b0d      	ldr	r3, [pc, #52]	; (119b8 <i2c_master_disable+0x4c>)
   11982:	4798      	blx	r3
   11984:	0003      	movs	r3, r0
   11986:	0018      	movs	r0, r3
   11988:	4b0c      	ldr	r3, [pc, #48]	; (119bc <i2c_master_disable+0x50>)
   1198a:	4798      	blx	r3
	_i2c_master_wait_for_sync(module);
   1198c:	687b      	ldr	r3, [r7, #4]
   1198e:	0018      	movs	r0, r3
   11990:	4b0b      	ldr	r3, [pc, #44]	; (119c0 <i2c_master_disable+0x54>)
   11992:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   11994:	68fb      	ldr	r3, [r7, #12]
   11996:	2283      	movs	r2, #131	; 0x83
   11998:	751a      	strb	r2, [r3, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1199a:	68fb      	ldr	r3, [r7, #12]
   1199c:	2283      	movs	r2, #131	; 0x83
   1199e:	761a      	strb	r2, [r3, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   119a0:	68fb      	ldr	r3, [r7, #12]
   119a2:	681b      	ldr	r3, [r3, #0]
   119a4:	2202      	movs	r2, #2
   119a6:	4393      	bics	r3, r2
   119a8:	001a      	movs	r2, r3
   119aa:	68fb      	ldr	r3, [r7, #12]
   119ac:	601a      	str	r2, [r3, #0]
}
   119ae:	46c0      	nop			; (mov r8, r8)
   119b0:	46bd      	mov	sp, r7
   119b2:	b004      	add	sp, #16
   119b4:	bd80      	pop	{r7, pc}
   119b6:	46c0      	nop			; (mov r8, r8)
   119b8:	00012b5d 	.word	0x00012b5d
   119bc:	000118f5 	.word	0x000118f5
   119c0:	00011949 	.word	0x00011949

000119c4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   119c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119c6:	b097      	sub	sp, #92	; 0x5c
   119c8:	af00      	add	r7, sp, #0
   119ca:	6178      	str	r0, [r7, #20]
   119cc:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   119ce:	2300      	movs	r3, #0
   119d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   119d2:	2300      	movs	r3, #0
   119d4:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   119d6:	2300      	movs	r3, #0
   119d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   119da:	233b      	movs	r3, #59	; 0x3b
   119dc:	2210      	movs	r2, #16
   119de:	4694      	mov	ip, r2
   119e0:	44bc      	add	ip, r7
   119e2:	4463      	add	r3, ip
   119e4:	2200      	movs	r2, #0
   119e6:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   119e8:	697b      	ldr	r3, [r7, #20]
   119ea:	681b      	ldr	r3, [r3, #0]
   119ec:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   119ee:	697b      	ldr	r3, [r7, #20]
   119f0:	681b      	ldr	r3, [r3, #0]
   119f2:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   119f4:	2323      	movs	r3, #35	; 0x23
   119f6:	2210      	movs	r2, #16
   119f8:	18ba      	adds	r2, r7, r2
   119fa:	18d4      	adds	r4, r2, r3
   119fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   119fe:	0018      	movs	r0, r3
   11a00:	4bc0      	ldr	r3, [pc, #768]	; (11d04 <_i2c_master_set_config+0x340>)
   11a02:	4798      	blx	r3
   11a04:	0003      	movs	r3, r0
   11a06:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   11a08:	230c      	movs	r3, #12
   11a0a:	2210      	movs	r2, #16
   11a0c:	4694      	mov	ip, r2
   11a0e:	44bc      	add	ip, r7
   11a10:	4463      	add	r3, ip
   11a12:	0018      	movs	r0, r3
   11a14:	4bbc      	ldr	r3, [pc, #752]	; (11d08 <_i2c_master_set_config+0x344>)
   11a16:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   11a18:	693b      	ldr	r3, [r7, #16]
   11a1a:	69db      	ldr	r3, [r3, #28]
   11a1c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   11a1e:	693b      	ldr	r3, [r7, #16]
   11a20:	6a1b      	ldr	r3, [r3, #32]
   11a22:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   11a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11a26:	2b00      	cmp	r3, #0
   11a28:	d106      	bne.n	11a38 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   11a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11a2c:	2100      	movs	r1, #0
   11a2e:	0018      	movs	r0, r3
   11a30:	4bb6      	ldr	r3, [pc, #728]	; (11d0c <_i2c_master_set_config+0x348>)
   11a32:	4798      	blx	r3
   11a34:	0003      	movs	r3, r0
   11a36:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   11a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11a3a:	b2da      	uxtb	r2, r3
   11a3c:	230c      	movs	r3, #12
   11a3e:	2110      	movs	r1, #16
   11a40:	468c      	mov	ip, r1
   11a42:	44bc      	add	ip, r7
   11a44:	4463      	add	r3, ip
   11a46:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11a48:	230c      	movs	r3, #12
   11a4a:	2210      	movs	r2, #16
   11a4c:	4694      	mov	ip, r2
   11a4e:	44bc      	add	ip, r7
   11a50:	4463      	add	r3, ip
   11a52:	2202      	movs	r2, #2
   11a54:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   11a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11a58:	0c1b      	lsrs	r3, r3, #16
   11a5a:	b2db      	uxtb	r3, r3
   11a5c:	220c      	movs	r2, #12
   11a5e:	2110      	movs	r1, #16
   11a60:	468c      	mov	ip, r1
   11a62:	44bc      	add	ip, r7
   11a64:	4462      	add	r2, ip
   11a66:	0011      	movs	r1, r2
   11a68:	0018      	movs	r0, r3
   11a6a:	4ba9      	ldr	r3, [pc, #676]	; (11d10 <_i2c_master_set_config+0x34c>)
   11a6c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   11a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a70:	2b00      	cmp	r3, #0
   11a72:	d106      	bne.n	11a82 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   11a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11a76:	2101      	movs	r1, #1
   11a78:	0018      	movs	r0, r3
   11a7a:	4ba4      	ldr	r3, [pc, #656]	; (11d0c <_i2c_master_set_config+0x348>)
   11a7c:	4798      	blx	r3
   11a7e:	0003      	movs	r3, r0
   11a80:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   11a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a84:	b2da      	uxtb	r2, r3
   11a86:	230c      	movs	r3, #12
   11a88:	2110      	movs	r1, #16
   11a8a:	468c      	mov	ip, r1
   11a8c:	44bc      	add	ip, r7
   11a8e:	4463      	add	r3, ip
   11a90:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11a92:	230c      	movs	r3, #12
   11a94:	2210      	movs	r2, #16
   11a96:	4694      	mov	ip, r2
   11a98:	44bc      	add	ip, r7
   11a9a:	4463      	add	r3, ip
   11a9c:	2202      	movs	r2, #2
   11a9e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   11aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11aa2:	0c1b      	lsrs	r3, r3, #16
   11aa4:	b2db      	uxtb	r3, r3
   11aa6:	220c      	movs	r2, #12
   11aa8:	2110      	movs	r1, #16
   11aaa:	468c      	mov	ip, r1
   11aac:	44bc      	add	ip, r7
   11aae:	4462      	add	r2, ip
   11ab0:	0011      	movs	r1, r2
   11ab2:	0018      	movs	r0, r3
   11ab4:	4b96      	ldr	r3, [pc, #600]	; (11d10 <_i2c_master_set_config+0x34c>)
   11ab6:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   11ab8:	693b      	ldr	r3, [r7, #16]
   11aba:	8a9a      	ldrh	r2, [r3, #20]
   11abc:	697b      	ldr	r3, [r7, #20]
   11abe:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   11ac0:	693b      	ldr	r3, [r7, #16]
   11ac2:	8ada      	ldrh	r2, [r3, #22]
   11ac4:	697b      	ldr	r3, [r7, #20]
   11ac6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   11ac8:	693b      	ldr	r3, [r7, #16]
   11aca:	7e1b      	ldrb	r3, [r3, #24]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d103      	bne.n	11ad8 <_i2c_master_set_config+0x114>
   11ad0:	4b90      	ldr	r3, [pc, #576]	; (11d14 <_i2c_master_set_config+0x350>)
   11ad2:	4798      	blx	r3
   11ad4:	1e03      	subs	r3, r0, #0
   11ad6:	d002      	beq.n	11ade <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   11ad8:	2380      	movs	r3, #128	; 0x80
   11ada:	657b      	str	r3, [r7, #84]	; 0x54
   11adc:	e001      	b.n	11ae2 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   11ade:	2300      	movs	r3, #0
   11ae0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   11ae2:	693b      	ldr	r3, [r7, #16]
   11ae4:	691b      	ldr	r3, [r3, #16]
   11ae6:	2b00      	cmp	r3, #0
   11ae8:	d004      	beq.n	11af4 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   11aea:	693b      	ldr	r3, [r7, #16]
   11aec:	691b      	ldr	r3, [r3, #16]
   11aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   11af0:	4313      	orrs	r3, r2
   11af2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   11af4:	693b      	ldr	r3, [r7, #16]
   11af6:	689b      	ldr	r3, [r3, #8]
   11af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   11afa:	4313      	orrs	r3, r2
   11afc:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   11afe:	693b      	ldr	r3, [r7, #16]
   11b00:	2224      	movs	r2, #36	; 0x24
   11b02:	5c9b      	ldrb	r3, [r3, r2]
   11b04:	2b00      	cmp	r3, #0
   11b06:	d004      	beq.n	11b12 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   11b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11b0a:	2280      	movs	r2, #128	; 0x80
   11b0c:	05d2      	lsls	r2, r2, #23
   11b0e:	4313      	orrs	r3, r2
   11b10:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   11b12:	693b      	ldr	r3, [r7, #16]
   11b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b16:	2b00      	cmp	r3, #0
   11b18:	d004      	beq.n	11b24 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   11b1a:	693b      	ldr	r3, [r7, #16]
   11b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11b1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   11b20:	4313      	orrs	r3, r2
   11b22:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   11b24:	693b      	ldr	r3, [r7, #16]
   11b26:	222c      	movs	r2, #44	; 0x2c
   11b28:	5c9b      	ldrb	r3, [r3, r2]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d105      	bne.n	11b3a <_i2c_master_set_config+0x176>
   11b2e:	693b      	ldr	r3, [r7, #16]
   11b30:	689a      	ldr	r2, [r3, #8]
   11b32:	2380      	movs	r3, #128	; 0x80
   11b34:	049b      	lsls	r3, r3, #18
   11b36:	429a      	cmp	r2, r3
   11b38:	d104      	bne.n	11b44 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   11b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11b3c:	2280      	movs	r2, #128	; 0x80
   11b3e:	0512      	lsls	r2, r2, #20
   11b40:	4313      	orrs	r3, r2
   11b42:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   11b44:	693b      	ldr	r3, [r7, #16]
   11b46:	222d      	movs	r2, #45	; 0x2d
   11b48:	5c9b      	ldrb	r3, [r3, r2]
   11b4a:	2b00      	cmp	r3, #0
   11b4c:	d004      	beq.n	11b58 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   11b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11b50:	2280      	movs	r2, #128	; 0x80
   11b52:	0412      	lsls	r2, r2, #16
   11b54:	4313      	orrs	r3, r2
   11b56:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   11b58:	693b      	ldr	r3, [r7, #16]
   11b5a:	222e      	movs	r2, #46	; 0x2e
   11b5c:	5c9b      	ldrb	r3, [r3, r2]
   11b5e:	2b00      	cmp	r3, #0
   11b60:	d004      	beq.n	11b6c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   11b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11b64:	2280      	movs	r2, #128	; 0x80
   11b66:	03d2      	lsls	r2, r2, #15
   11b68:	4313      	orrs	r3, r2
   11b6a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   11b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11b6e:	681a      	ldr	r2, [r3, #0]
   11b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   11b72:	431a      	orrs	r2, r3
   11b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11b76:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   11b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11b7a:	2280      	movs	r2, #128	; 0x80
   11b7c:	0052      	lsls	r2, r2, #1
   11b7e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   11b80:	2323      	movs	r3, #35	; 0x23
   11b82:	2210      	movs	r2, #16
   11b84:	4694      	mov	ip, r2
   11b86:	44bc      	add	ip, r7
   11b88:	4463      	add	r3, ip
   11b8a:	781b      	ldrb	r3, [r3, #0]
   11b8c:	3312      	adds	r3, #18
   11b8e:	b2db      	uxtb	r3, r3
   11b90:	0018      	movs	r0, r3
   11b92:	4b61      	ldr	r3, [pc, #388]	; (11d18 <_i2c_master_set_config+0x354>)
   11b94:	4798      	blx	r3
   11b96:	0003      	movs	r3, r0
   11b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   11b9a:	693b      	ldr	r3, [r7, #16]
   11b9c:	681b      	ldr	r3, [r3, #0]
   11b9e:	22fa      	movs	r2, #250	; 0xfa
   11ba0:	0092      	lsls	r2, r2, #2
   11ba2:	4353      	muls	r3, r2
   11ba4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   11ba6:	693b      	ldr	r3, [r7, #16]
   11ba8:	685b      	ldr	r3, [r3, #4]
   11baa:	22fa      	movs	r2, #250	; 0xfa
   11bac:	0092      	lsls	r2, r2, #2
   11bae:	4353      	muls	r3, r2
   11bb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   11bb2:	693b      	ldr	r3, [r7, #16]
   11bb4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   11bb6:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   11bb8:	4b58      	ldr	r3, [pc, #352]	; (11d1c <_i2c_master_set_config+0x358>)
   11bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11bbc:	4798      	blx	r3
   11bbe:	0005      	movs	r5, r0
   11bc0:	000e      	movs	r6, r1
   11bc2:	4b56      	ldr	r3, [pc, #344]	; (11d1c <_i2c_master_set_config+0x358>)
   11bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11bc6:	4798      	blx	r3
   11bc8:	60b8      	str	r0, [r7, #8]
   11bca:	60f9      	str	r1, [r7, #12]
   11bcc:	4b53      	ldr	r3, [pc, #332]	; (11d1c <_i2c_master_set_config+0x358>)
   11bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11bd0:	4798      	blx	r3
   11bd2:	4c53      	ldr	r4, [pc, #332]	; (11d20 <_i2c_master_set_config+0x35c>)
   11bd4:	4a53      	ldr	r2, [pc, #332]	; (11d24 <_i2c_master_set_config+0x360>)
   11bd6:	4b54      	ldr	r3, [pc, #336]	; (11d28 <_i2c_master_set_config+0x364>)
   11bd8:	47a0      	blx	r4
   11bda:	0003      	movs	r3, r0
   11bdc:	000c      	movs	r4, r1
   11bde:	603b      	str	r3, [r7, #0]
   11be0:	607c      	str	r4, [r7, #4]
   11be2:	4b4e      	ldr	r3, [pc, #312]	; (11d1c <_i2c_master_set_config+0x358>)
   11be4:	6a38      	ldr	r0, [r7, #32]
   11be6:	4798      	blx	r3
   11be8:	0002      	movs	r2, r0
   11bea:	000b      	movs	r3, r1
   11bec:	4c4c      	ldr	r4, [pc, #304]	; (11d20 <_i2c_master_set_config+0x35c>)
   11bee:	6838      	ldr	r0, [r7, #0]
   11bf0:	6879      	ldr	r1, [r7, #4]
   11bf2:	47a0      	blx	r4
   11bf4:	0003      	movs	r3, r0
   11bf6:	000c      	movs	r4, r1
   11bf8:	0018      	movs	r0, r3
   11bfa:	0021      	movs	r1, r4
   11bfc:	4c4b      	ldr	r4, [pc, #300]	; (11d2c <_i2c_master_set_config+0x368>)
   11bfe:	2200      	movs	r2, #0
   11c00:	4b4b      	ldr	r3, [pc, #300]	; (11d30 <_i2c_master_set_config+0x36c>)
   11c02:	47a0      	blx	r4
   11c04:	0003      	movs	r3, r0
   11c06:	000c      	movs	r4, r1
   11c08:	001a      	movs	r2, r3
   11c0a:	0023      	movs	r3, r4
   11c0c:	4c44      	ldr	r4, [pc, #272]	; (11d20 <_i2c_master_set_config+0x35c>)
   11c0e:	68b8      	ldr	r0, [r7, #8]
   11c10:	68f9      	ldr	r1, [r7, #12]
   11c12:	47a0      	blx	r4
   11c14:	0003      	movs	r3, r0
   11c16:	000c      	movs	r4, r1
   11c18:	001a      	movs	r2, r3
   11c1a:	0023      	movs	r3, r4
   11c1c:	4c45      	ldr	r4, [pc, #276]	; (11d34 <_i2c_master_set_config+0x370>)
   11c1e:	0028      	movs	r0, r5
   11c20:	0031      	movs	r1, r6
   11c22:	47a0      	blx	r4
   11c24:	0003      	movs	r3, r0
   11c26:	000c      	movs	r4, r1
   11c28:	001d      	movs	r5, r3
   11c2a:	0026      	movs	r6, r4
   11c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11c2e:	005a      	lsls	r2, r3, #1
   11c30:	4b3a      	ldr	r3, [pc, #232]	; (11d1c <_i2c_master_set_config+0x358>)
   11c32:	0010      	movs	r0, r2
   11c34:	4798      	blx	r3
   11c36:	0002      	movs	r2, r0
   11c38:	000b      	movs	r3, r1
   11c3a:	4c3c      	ldr	r4, [pc, #240]	; (11d2c <_i2c_master_set_config+0x368>)
   11c3c:	0028      	movs	r0, r5
   11c3e:	0031      	movs	r1, r6
   11c40:	47a0      	blx	r4
   11c42:	0003      	movs	r3, r0
   11c44:	000c      	movs	r4, r1
   11c46:	0018      	movs	r0, r3
   11c48:	0021      	movs	r1, r4
   11c4a:	4c3a      	ldr	r4, [pc, #232]	; (11d34 <_i2c_master_set_config+0x370>)
   11c4c:	2200      	movs	r2, #0
   11c4e:	4b3a      	ldr	r3, [pc, #232]	; (11d38 <_i2c_master_set_config+0x374>)
   11c50:	47a0      	blx	r4
   11c52:	0003      	movs	r3, r0
   11c54:	000c      	movs	r4, r1
   11c56:	001d      	movs	r5, r3
   11c58:	0026      	movs	r6, r4
   11c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11c5c:	005a      	lsls	r2, r3, #1
   11c5e:	4b2f      	ldr	r3, [pc, #188]	; (11d1c <_i2c_master_set_config+0x358>)
   11c60:	0010      	movs	r0, r2
   11c62:	4798      	blx	r3
   11c64:	0002      	movs	r2, r0
   11c66:	000b      	movs	r3, r1
   11c68:	4c34      	ldr	r4, [pc, #208]	; (11d3c <_i2c_master_set_config+0x378>)
   11c6a:	0028      	movs	r0, r5
   11c6c:	0031      	movs	r1, r6
   11c6e:	47a0      	blx	r4
   11c70:	0003      	movs	r3, r0
   11c72:	000c      	movs	r4, r1
   11c74:	0019      	movs	r1, r3
   11c76:	0022      	movs	r2, r4
   11c78:	4b31      	ldr	r3, [pc, #196]	; (11d40 <_i2c_master_set_config+0x37c>)
   11c7a:	0008      	movs	r0, r1
   11c7c:	0011      	movs	r1, r2
   11c7e:	4798      	blx	r3
   11c80:	0003      	movs	r3, r0
   11c82:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   11c84:	693b      	ldr	r3, [r7, #16]
   11c86:	689a      	ldr	r2, [r3, #8]
   11c88:	2380      	movs	r3, #128	; 0x80
   11c8a:	049b      	lsls	r3, r3, #18
   11c8c:	429a      	cmp	r2, r3
   11c8e:	d16a      	bne.n	11d66 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   11c90:	4b22      	ldr	r3, [pc, #136]	; (11d1c <_i2c_master_set_config+0x358>)
   11c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11c94:	4798      	blx	r3
   11c96:	4c25      	ldr	r4, [pc, #148]	; (11d2c <_i2c_master_set_config+0x368>)
   11c98:	0002      	movs	r2, r0
   11c9a:	000b      	movs	r3, r1
   11c9c:	47a0      	blx	r4
   11c9e:	0003      	movs	r3, r0
   11ca0:	000c      	movs	r4, r1
   11ca2:	001d      	movs	r5, r3
   11ca4:	0026      	movs	r6, r4
   11ca6:	4b1d      	ldr	r3, [pc, #116]	; (11d1c <_i2c_master_set_config+0x358>)
   11ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11caa:	4798      	blx	r3
   11cac:	4c1c      	ldr	r4, [pc, #112]	; (11d20 <_i2c_master_set_config+0x35c>)
   11cae:	2200      	movs	r2, #0
   11cb0:	4b24      	ldr	r3, [pc, #144]	; (11d44 <_i2c_master_set_config+0x380>)
   11cb2:	47a0      	blx	r4
   11cb4:	0003      	movs	r3, r0
   11cb6:	000c      	movs	r4, r1
   11cb8:	001a      	movs	r2, r3
   11cba:	0023      	movs	r3, r4
   11cbc:	4c1f      	ldr	r4, [pc, #124]	; (11d3c <_i2c_master_set_config+0x378>)
   11cbe:	0028      	movs	r0, r5
   11cc0:	0031      	movs	r1, r6
   11cc2:	47a0      	blx	r4
   11cc4:	0003      	movs	r3, r0
   11cc6:	000c      	movs	r4, r1
   11cc8:	0018      	movs	r0, r3
   11cca:	0021      	movs	r1, r4
   11ccc:	4c19      	ldr	r4, [pc, #100]	; (11d34 <_i2c_master_set_config+0x370>)
   11cce:	2200      	movs	r2, #0
   11cd0:	4b19      	ldr	r3, [pc, #100]	; (11d38 <_i2c_master_set_config+0x374>)
   11cd2:	47a0      	blx	r4
   11cd4:	0003      	movs	r3, r0
   11cd6:	000c      	movs	r4, r1
   11cd8:	0019      	movs	r1, r3
   11cda:	0022      	movs	r2, r4
   11cdc:	4b18      	ldr	r3, [pc, #96]	; (11d40 <_i2c_master_set_config+0x37c>)
   11cde:	0008      	movs	r0, r1
   11ce0:	0011      	movs	r1, r2
   11ce2:	4798      	blx	r3
   11ce4:	0003      	movs	r3, r0
   11ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   11ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11cea:	2b00      	cmp	r3, #0
   11cec:	d02e      	beq.n	11d4c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   11cee:	4b16      	ldr	r3, [pc, #88]	; (11d48 <_i2c_master_set_config+0x384>)
   11cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11cf4:	4798      	blx	r3
   11cf6:	0003      	movs	r3, r0
   11cf8:	1e9a      	subs	r2, r3, #2
   11cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11cfc:	1ad3      	subs	r3, r2, r3
   11cfe:	653b      	str	r3, [r7, #80]	; 0x50
   11d00:	e031      	b.n	11d66 <_i2c_master_set_config+0x3a2>
   11d02:	46c0      	nop			; (mov r8, r8)
   11d04:	00012a8d 	.word	0x00012a8d
   11d08:	00011885 	.word	0x00011885
   11d0c:	000128d1 	.word	0x000128d1
   11d10:	00015391 	.word	0x00015391
   11d14:	000118ad 	.word	0x000118ad
   11d18:	00015159 	.word	0x00015159
   11d1c:	00019cf9 	.word	0x00019cf9
   11d20:	000190e1 	.word	0x000190e1
   11d24:	e826d695 	.word	0xe826d695
   11d28:	3e112e0b 	.word	0x3e112e0b
   11d2c:	00018259 	.word	0x00018259
   11d30:	40240000 	.word	0x40240000
   11d34:	000195e1 	.word	0x000195e1
   11d38:	3ff00000 	.word	0x3ff00000
   11d3c:	00018879 	.word	0x00018879
   11d40:	00019c0d 	.word	0x00019c0d
   11d44:	40080000 	.word	0x40080000
   11d48:	00017e9d 	.word	0x00017e9d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   11d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d4e:	005a      	lsls	r2, r3, #1
   11d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11d52:	18d3      	adds	r3, r2, r3
   11d54:	1e5a      	subs	r2, r3, #1
   11d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d58:	0059      	lsls	r1, r3, #1
   11d5a:	4b1d      	ldr	r3, [pc, #116]	; (11dd0 <_i2c_master_set_config+0x40c>)
   11d5c:	0010      	movs	r0, r2
   11d5e:	4798      	blx	r3
   11d60:	0003      	movs	r3, r0
   11d62:	3b01      	subs	r3, #1
   11d64:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   11d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d68:	2bff      	cmp	r3, #255	; 0xff
   11d6a:	dc08      	bgt.n	11d7e <_i2c_master_set_config+0x3ba>
   11d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d6e:	2b00      	cmp	r3, #0
   11d70:	db05      	blt.n	11d7e <_i2c_master_set_config+0x3ba>
   11d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11d74:	2bff      	cmp	r3, #255	; 0xff
   11d76:	dc02      	bgt.n	11d7e <_i2c_master_set_config+0x3ba>
   11d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	da06      	bge.n	11d8c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   11d7e:	233b      	movs	r3, #59	; 0x3b
   11d80:	2210      	movs	r2, #16
   11d82:	4694      	mov	ip, r2
   11d84:	44bc      	add	ip, r7
   11d86:	4463      	add	r3, ip
   11d88:	2240      	movs	r2, #64	; 0x40
   11d8a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   11d8c:	233b      	movs	r3, #59	; 0x3b
   11d8e:	2210      	movs	r2, #16
   11d90:	4694      	mov	ip, r2
   11d92:	44bc      	add	ip, r7
   11d94:	4463      	add	r3, ip
   11d96:	781b      	ldrb	r3, [r3, #0]
   11d98:	2b40      	cmp	r3, #64	; 0x40
   11d9a:	d00e      	beq.n	11dba <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   11d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d9e:	22ff      	movs	r2, #255	; 0xff
   11da0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   11da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11da4:	041b      	lsls	r3, r3, #16
   11da6:	0019      	movs	r1, r3
   11da8:	23ff      	movs	r3, #255	; 0xff
   11daa:	041b      	lsls	r3, r3, #16
   11dac:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   11dae:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   11db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   11db2:	0612      	lsls	r2, r2, #24
   11db4:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   11db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11db8:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   11dba:	233b      	movs	r3, #59	; 0x3b
   11dbc:	2210      	movs	r2, #16
   11dbe:	4694      	mov	ip, r2
   11dc0:	44bc      	add	ip, r7
   11dc2:	4463      	add	r3, ip
   11dc4:	781b      	ldrb	r3, [r3, #0]
}
   11dc6:	0018      	movs	r0, r3
   11dc8:	46bd      	mov	sp, r7
   11dca:	b017      	add	sp, #92	; 0x5c
   11dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dce:	46c0      	nop			; (mov r8, r8)
   11dd0:	00017e9d 	.word	0x00017e9d

00011dd4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   11dd4:	b590      	push	{r4, r7, lr}
   11dd6:	b08b      	sub	sp, #44	; 0x2c
   11dd8:	af00      	add	r7, sp, #0
   11dda:	60f8      	str	r0, [r7, #12]
   11ddc:	60b9      	str	r1, [r7, #8]
   11dde:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   11de0:	68fb      	ldr	r3, [r7, #12]
   11de2:	68ba      	ldr	r2, [r7, #8]
   11de4:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11de6:	68fb      	ldr	r3, [r7, #12]
   11de8:	681b      	ldr	r3, [r3, #0]
   11dea:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   11dec:	68fb      	ldr	r3, [r7, #12]
   11dee:	681b      	ldr	r3, [r3, #0]
   11df0:	0018      	movs	r0, r3
   11df2:	4b44      	ldr	r3, [pc, #272]	; (11f04 <i2c_master_init+0x130>)
   11df4:	4798      	blx	r3
   11df6:	0003      	movs	r3, r0
   11df8:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   11dfa:	69bb      	ldr	r3, [r7, #24]
   11dfc:	2b05      	cmp	r3, #5
   11dfe:	d104      	bne.n	11e0a <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   11e00:	2301      	movs	r3, #1
   11e02:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   11e04:	2318      	movs	r3, #24
   11e06:	623b      	str	r3, [r7, #32]
   11e08:	e004      	b.n	11e14 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   11e0a:	69bb      	ldr	r3, [r7, #24]
   11e0c:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   11e0e:	69bb      	ldr	r3, [r7, #24]
   11e10:	3312      	adds	r3, #18
   11e12:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   11e14:	69bb      	ldr	r3, [r7, #24]
   11e16:	2b05      	cmp	r3, #5
   11e18:	d108      	bne.n	11e2c <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   11e1a:	2201      	movs	r2, #1
   11e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e1e:	409a      	lsls	r2, r3
   11e20:	0013      	movs	r3, r2
   11e22:	0019      	movs	r1, r3
   11e24:	2003      	movs	r0, #3
   11e26:	4b38      	ldr	r3, [pc, #224]	; (11f08 <i2c_master_init+0x134>)
   11e28:	4798      	blx	r3
   11e2a:	e007      	b.n	11e3c <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   11e2c:	2201      	movs	r2, #1
   11e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e30:	409a      	lsls	r2, r3
   11e32:	0013      	movs	r3, r2
   11e34:	0019      	movs	r1, r3
   11e36:	2002      	movs	r0, #2
   11e38:	4b33      	ldr	r3, [pc, #204]	; (11f08 <i2c_master_init+0x134>)
   11e3a:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   11e3c:	2314      	movs	r3, #20
   11e3e:	18fb      	adds	r3, r7, r3
   11e40:	0018      	movs	r0, r3
   11e42:	4b32      	ldr	r3, [pc, #200]	; (11f0c <i2c_master_init+0x138>)
   11e44:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	7b1a      	ldrb	r2, [r3, #12]
   11e4a:	2314      	movs	r3, #20
   11e4c:	18fb      	adds	r3, r7, r3
   11e4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   11e50:	6a3b      	ldr	r3, [r7, #32]
   11e52:	b2db      	uxtb	r3, r3
   11e54:	2214      	movs	r2, #20
   11e56:	18ba      	adds	r2, r7, r2
   11e58:	0011      	movs	r1, r2
   11e5a:	0018      	movs	r0, r3
   11e5c:	4b2c      	ldr	r3, [pc, #176]	; (11f10 <i2c_master_init+0x13c>)
   11e5e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   11e60:	6a3b      	ldr	r3, [r7, #32]
   11e62:	b2db      	uxtb	r3, r3
   11e64:	0018      	movs	r0, r3
   11e66:	4b2b      	ldr	r3, [pc, #172]	; (11f14 <i2c_master_init+0x140>)
   11e68:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   11e6a:	687b      	ldr	r3, [r7, #4]
   11e6c:	7b1b      	ldrb	r3, [r3, #12]
   11e6e:	2100      	movs	r1, #0
   11e70:	0018      	movs	r0, r3
   11e72:	4b29      	ldr	r3, [pc, #164]	; (11f18 <i2c_master_init+0x144>)
   11e74:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   11e76:	69fb      	ldr	r3, [r7, #28]
   11e78:	681b      	ldr	r3, [r3, #0]
   11e7a:	2202      	movs	r2, #2
   11e7c:	4013      	ands	r3, r2
   11e7e:	d001      	beq.n	11e84 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
   11e80:	231c      	movs	r3, #28
   11e82:	e03b      	b.n	11efc <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   11e84:	69fb      	ldr	r3, [r7, #28]
   11e86:	681b      	ldr	r3, [r3, #0]
   11e88:	2201      	movs	r2, #1
   11e8a:	4013      	ands	r3, r2
   11e8c:	d001      	beq.n	11e92 <i2c_master_init+0xbe>
		return STATUS_BUSY;
   11e8e:	2305      	movs	r3, #5
   11e90:	e034      	b.n	11efc <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   11e92:	68fb      	ldr	r3, [r7, #12]
   11e94:	681b      	ldr	r3, [r3, #0]
   11e96:	2217      	movs	r2, #23
   11e98:	18bc      	adds	r4, r7, r2
   11e9a:	0018      	movs	r0, r3
   11e9c:	4b19      	ldr	r3, [pc, #100]	; (11f04 <i2c_master_init+0x130>)
   11e9e:	4798      	blx	r3
   11ea0:	0003      	movs	r3, r0
   11ea2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   11ea4:	4a1d      	ldr	r2, [pc, #116]	; (11f1c <i2c_master_init+0x148>)
   11ea6:	2317      	movs	r3, #23
   11ea8:	18fb      	adds	r3, r7, r3
   11eaa:	781b      	ldrb	r3, [r3, #0]
   11eac:	0011      	movs	r1, r2
   11eae:	0018      	movs	r0, r3
   11eb0:	4b1b      	ldr	r3, [pc, #108]	; (11f20 <i2c_master_init+0x14c>)
   11eb2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   11eb4:	2317      	movs	r3, #23
   11eb6:	18fb      	adds	r3, r7, r3
   11eb8:	781a      	ldrb	r2, [r3, #0]
   11eba:	4b1a      	ldr	r3, [pc, #104]	; (11f24 <i2c_master_init+0x150>)
   11ebc:	0092      	lsls	r2, r2, #2
   11ebe:	68f9      	ldr	r1, [r7, #12]
   11ec0:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   11ec2:	68fb      	ldr	r3, [r7, #12]
   11ec4:	2200      	movs	r2, #0
   11ec6:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   11ec8:	68fb      	ldr	r3, [r7, #12]
   11eca:	2200      	movs	r2, #0
   11ecc:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   11ece:	68fb      	ldr	r3, [r7, #12]
   11ed0:	2200      	movs	r2, #0
   11ed2:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   11ed4:	68fb      	ldr	r3, [r7, #12]
   11ed6:	2200      	movs	r2, #0
   11ed8:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   11eda:	68fb      	ldr	r3, [r7, #12]
   11edc:	2225      	movs	r2, #37	; 0x25
   11ede:	2100      	movs	r1, #0
   11ee0:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   11ee2:	68fb      	ldr	r3, [r7, #12]
   11ee4:	2200      	movs	r2, #0
   11ee6:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   11ee8:	69fb      	ldr	r3, [r7, #28]
   11eea:	2214      	movs	r2, #20
   11eec:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   11eee:	687a      	ldr	r2, [r7, #4]
   11ef0:	68fb      	ldr	r3, [r7, #12]
   11ef2:	0011      	movs	r1, r2
   11ef4:	0018      	movs	r0, r3
   11ef6:	4b0c      	ldr	r3, [pc, #48]	; (11f28 <i2c_master_init+0x154>)
   11ef8:	4798      	blx	r3
   11efa:	0003      	movs	r3, r0
}
   11efc:	0018      	movs	r0, r3
   11efe:	46bd      	mov	sp, r7
   11f00:	b00b      	add	sp, #44	; 0x2c
   11f02:	bd90      	pop	{r4, r7, pc}
   11f04:	00012a8d 	.word	0x00012a8d
   11f08:	00011809 	.word	0x00011809
   11f0c:	000117f1 	.word	0x000117f1
   11f10:	00015069 	.word	0x00015069
   11f14:	000150a9 	.word	0x000150a9
   11f18:	00012845 	.word	0x00012845
   11f1c:	00005c69 	.word	0x00005c69
   11f20:	00012af1 	.word	0x00012af1
   11f24:	200015d4 	.word	0x200015d4
   11f28:	000119c5 	.word	0x000119c5

00011f2c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   11f2c:	b580      	push	{r7, lr}
   11f2e:	b084      	sub	sp, #16
   11f30:	af00      	add	r7, sp, #0
   11f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11f34:	687b      	ldr	r3, [r7, #4]
   11f36:	681b      	ldr	r3, [r3, #0]
   11f38:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   11f3a:	687b      	ldr	r3, [r7, #4]
   11f3c:	0018      	movs	r0, r3
   11f3e:	4b0f      	ldr	r3, [pc, #60]	; (11f7c <i2c_master_reset+0x50>)
   11f40:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	0018      	movs	r0, r3
   11f46:	4b0e      	ldr	r3, [pc, #56]	; (11f80 <i2c_master_reset+0x54>)
   11f48:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   11f4a:	4b0e      	ldr	r3, [pc, #56]	; (11f84 <i2c_master_reset+0x58>)
   11f4c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	681b      	ldr	r3, [r3, #0]
   11f52:	0018      	movs	r0, r3
   11f54:	4b0c      	ldr	r3, [pc, #48]	; (11f88 <i2c_master_reset+0x5c>)
   11f56:	4798      	blx	r3
   11f58:	0003      	movs	r3, r0
   11f5a:	0018      	movs	r0, r3
   11f5c:	4b0b      	ldr	r3, [pc, #44]	; (11f8c <i2c_master_reset+0x60>)
   11f5e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   11f60:	4b0b      	ldr	r3, [pc, #44]	; (11f90 <i2c_master_reset+0x64>)
   11f62:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	0018      	movs	r0, r3
   11f68:	4b04      	ldr	r3, [pc, #16]	; (11f7c <i2c_master_reset+0x50>)
   11f6a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   11f6c:	68fb      	ldr	r3, [r7, #12]
   11f6e:	2201      	movs	r2, #1
   11f70:	601a      	str	r2, [r3, #0]
}
   11f72:	46c0      	nop			; (mov r8, r8)
   11f74:	46bd      	mov	sp, r7
   11f76:	b004      	add	sp, #16
   11f78:	bd80      	pop	{r7, pc}
   11f7a:	46c0      	nop			; (mov r8, r8)
   11f7c:	00011949 	.word	0x00011949
   11f80:	0001196d 	.word	0x0001196d
   11f84:	000118cd 	.word	0x000118cd
   11f88:	00012b5d 	.word	0x00012b5d
   11f8c:	000151ad 	.word	0x000151ad
   11f90:	000118e1 	.word	0x000118e1

00011f94 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   11f94:	b580      	push	{r7, lr}
   11f96:	b084      	sub	sp, #16
   11f98:	af00      	add	r7, sp, #0
   11f9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11f9c:	687b      	ldr	r3, [r7, #4]
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   11fa2:	68fb      	ldr	r3, [r7, #12]
   11fa4:	7e1b      	ldrb	r3, [r3, #24]
   11fa6:	b2db      	uxtb	r3, r3
   11fa8:	001a      	movs	r2, r3
   11faa:	2302      	movs	r3, #2
   11fac:	4013      	ands	r3, r2
   11fae:	d00b      	beq.n	11fc8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	2202      	movs	r2, #2
   11fb4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   11fb6:	68fb      	ldr	r3, [r7, #12]
   11fb8:	8b5b      	ldrh	r3, [r3, #26]
   11fba:	b29b      	uxth	r3, r3
   11fbc:	001a      	movs	r2, r3
   11fbe:	2302      	movs	r3, #2
   11fc0:	4013      	ands	r3, r2
   11fc2:	d011      	beq.n	11fe8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   11fc4:	2341      	movs	r3, #65	; 0x41
   11fc6:	e010      	b.n	11fea <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	8b5b      	ldrh	r3, [r3, #26]
   11fcc:	b29b      	uxth	r3, r3
   11fce:	001a      	movs	r2, r3
   11fd0:	2304      	movs	r3, #4
   11fd2:	4013      	ands	r3, r2
   11fd4:	d008      	beq.n	11fe8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   11fd6:	68fb      	ldr	r3, [r7, #12]
   11fd8:	685b      	ldr	r3, [r3, #4]
   11fda:	22c0      	movs	r2, #192	; 0xc0
   11fdc:	0292      	lsls	r2, r2, #10
   11fde:	431a      	orrs	r2, r3
   11fe0:	68fb      	ldr	r3, [r7, #12]
   11fe2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   11fe4:	2318      	movs	r3, #24
   11fe6:	e000      	b.n	11fea <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   11fe8:	2300      	movs	r3, #0
}
   11fea:	0018      	movs	r0, r3
   11fec:	46bd      	mov	sp, r7
   11fee:	b004      	add	sp, #16
   11ff0:	bd80      	pop	{r7, pc}

00011ff2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   11ff2:	b580      	push	{r7, lr}
   11ff4:	b084      	sub	sp, #16
   11ff6:	af00      	add	r7, sp, #0
   11ff8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11ffa:	687b      	ldr	r3, [r7, #4]
   11ffc:	681b      	ldr	r3, [r3, #0]
   11ffe:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   12000:	230e      	movs	r3, #14
   12002:	18fb      	adds	r3, r7, r3
   12004:	2200      	movs	r2, #0
   12006:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12008:	e00f      	b.n	1202a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1200a:	230e      	movs	r3, #14
   1200c:	18fb      	adds	r3, r7, r3
   1200e:	220e      	movs	r2, #14
   12010:	18ba      	adds	r2, r7, r2
   12012:	8812      	ldrh	r2, [r2, #0]
   12014:	3201      	adds	r2, #1
   12016:	801a      	strh	r2, [r3, #0]
   12018:	687b      	ldr	r3, [r7, #4]
   1201a:	891b      	ldrh	r3, [r3, #8]
   1201c:	220e      	movs	r2, #14
   1201e:	18ba      	adds	r2, r7, r2
   12020:	8812      	ldrh	r2, [r2, #0]
   12022:	429a      	cmp	r2, r3
   12024:	d301      	bcc.n	1202a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   12026:	2312      	movs	r3, #18
   12028:	e00e      	b.n	12048 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1202a:	68bb      	ldr	r3, [r7, #8]
   1202c:	7e1b      	ldrb	r3, [r3, #24]
   1202e:	b2db      	uxtb	r3, r3
   12030:	001a      	movs	r2, r3
   12032:	2301      	movs	r3, #1
   12034:	4013      	ands	r3, r2
   12036:	d106      	bne.n	12046 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   12038:	68bb      	ldr	r3, [r7, #8]
   1203a:	7e1b      	ldrb	r3, [r3, #24]
   1203c:	b2db      	uxtb	r3, r3
   1203e:	001a      	movs	r2, r3
   12040:	2302      	movs	r3, #2
   12042:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12044:	d0e1      	beq.n	1200a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   12046:	2300      	movs	r3, #0
}
   12048:	0018      	movs	r0, r3
   1204a:	46bd      	mov	sp, r7
   1204c:	b004      	add	sp, #16
   1204e:	bd80      	pop	{r7, pc}

00012050 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   12050:	b590      	push	{r4, r7, lr}
   12052:	b085      	sub	sp, #20
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
   12058:	000a      	movs	r2, r1
   1205a:	1cfb      	adds	r3, r7, #3
   1205c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1205e:	687b      	ldr	r3, [r7, #4]
   12060:	681b      	ldr	r3, [r3, #0]
   12062:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12064:	68fb      	ldr	r3, [r7, #12]
   12066:	685b      	ldr	r3, [r3, #4]
   12068:	2280      	movs	r2, #128	; 0x80
   1206a:	02d2      	lsls	r2, r2, #11
   1206c:	431a      	orrs	r2, r3
   1206e:	68fb      	ldr	r3, [r7, #12]
   12070:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   12072:	1cfb      	adds	r3, r7, #3
   12074:	781a      	ldrb	r2, [r3, #0]
   12076:	68fb      	ldr	r3, [r7, #12]
   12078:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1207a:	230b      	movs	r3, #11
   1207c:	18fc      	adds	r4, r7, r3
   1207e:	687b      	ldr	r3, [r7, #4]
   12080:	0018      	movs	r0, r3
   12082:	4b07      	ldr	r3, [pc, #28]	; (120a0 <_i2c_master_send_hs_master_code+0x50>)
   12084:	4798      	blx	r3
   12086:	0003      	movs	r3, r0
   12088:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1208a:	68fb      	ldr	r3, [r7, #12]
   1208c:	2201      	movs	r2, #1
   1208e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   12090:	230b      	movs	r3, #11
   12092:	18fb      	adds	r3, r7, r3
   12094:	781b      	ldrb	r3, [r3, #0]
}
   12096:	0018      	movs	r0, r3
   12098:	46bd      	mov	sp, r7
   1209a:	b005      	add	sp, #20
   1209c:	bd90      	pop	{r4, r7, pc}
   1209e:	46c0      	nop			; (mov r8, r8)
   120a0:	00011ff3 	.word	0x00011ff3

000120a4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b087      	sub	sp, #28
   120a8:	af00      	add	r7, sp, #0
   120aa:	6078      	str	r0, [r7, #4]
   120ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   120ae:	687b      	ldr	r3, [r7, #4]
   120b0:	681b      	ldr	r3, [r3, #0]
   120b2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   120b4:	2314      	movs	r3, #20
   120b6:	18fb      	adds	r3, r7, r3
   120b8:	683a      	ldr	r2, [r7, #0]
   120ba:	8852      	ldrh	r2, [r2, #2]
   120bc:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   120be:	2312      	movs	r3, #18
   120c0:	18fb      	adds	r3, r7, r3
   120c2:	2200      	movs	r2, #0
   120c4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   120c6:	68fb      	ldr	r3, [r7, #12]
   120c8:	681b      	ldr	r3, [r3, #0]
   120ca:	011b      	lsls	r3, r3, #4
   120cc:	0fdb      	lsrs	r3, r3, #31
   120ce:	b2db      	uxtb	r3, r3
   120d0:	001a      	movs	r2, r3
   120d2:	230b      	movs	r3, #11
   120d4:	18fb      	adds	r3, r7, r3
   120d6:	1e51      	subs	r1, r2, #1
   120d8:	418a      	sbcs	r2, r1
   120da:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   120dc:	683b      	ldr	r3, [r7, #0]
   120de:	7a5b      	ldrb	r3, [r3, #9]
   120e0:	2b00      	cmp	r3, #0
   120e2:	d006      	beq.n	120f2 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   120e4:	683b      	ldr	r3, [r7, #0]
   120e6:	7a9a      	ldrb	r2, [r3, #10]
   120e8:	687b      	ldr	r3, [r7, #4]
   120ea:	0011      	movs	r1, r2
   120ec:	0018      	movs	r0, r3
   120ee:	4b85      	ldr	r3, [pc, #532]	; (12304 <_i2c_master_read_packet+0x260>)
   120f0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   120f2:	68fb      	ldr	r3, [r7, #12]
   120f4:	685b      	ldr	r3, [r3, #4]
   120f6:	4a84      	ldr	r2, [pc, #528]	; (12308 <_i2c_master_read_packet+0x264>)
   120f8:	401a      	ands	r2, r3
   120fa:	68fb      	ldr	r3, [r7, #12]
   120fc:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   120fe:	683b      	ldr	r3, [r7, #0]
   12100:	7a1b      	ldrb	r3, [r3, #8]
   12102:	2b00      	cmp	r3, #0
   12104:	d042      	beq.n	1218c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   12106:	683b      	ldr	r3, [r7, #0]
   12108:	881b      	ldrh	r3, [r3, #0]
   1210a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1210c:	683b      	ldr	r3, [r7, #0]
   1210e:	7a5b      	ldrb	r3, [r3, #9]
   12110:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   12112:	4313      	orrs	r3, r2
   12114:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12116:	2380      	movs	r3, #128	; 0x80
   12118:	021b      	lsls	r3, r3, #8
   1211a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   1211c:	68fb      	ldr	r3, [r7, #12]
   1211e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   12120:	2317      	movs	r3, #23
   12122:	18fc      	adds	r4, r7, r3
   12124:	687b      	ldr	r3, [r7, #4]
   12126:	0018      	movs	r0, r3
   12128:	4b78      	ldr	r3, [pc, #480]	; (1230c <_i2c_master_read_packet+0x268>)
   1212a:	4798      	blx	r3
   1212c:	0003      	movs	r3, r0
   1212e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12130:	68fb      	ldr	r3, [r7, #12]
   12132:	685b      	ldr	r3, [r3, #4]
   12134:	4a74      	ldr	r2, [pc, #464]	; (12308 <_i2c_master_read_packet+0x264>)
   12136:	401a      	ands	r2, r3
   12138:	68fb      	ldr	r3, [r7, #12]
   1213a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   1213c:	2317      	movs	r3, #23
   1213e:	18fb      	adds	r3, r7, r3
   12140:	781b      	ldrb	r3, [r3, #0]
   12142:	2b00      	cmp	r3, #0
   12144:	d107      	bne.n	12156 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
   12146:	2317      	movs	r3, #23
   12148:	18fc      	adds	r4, r7, r3
   1214a:	687b      	ldr	r3, [r7, #4]
   1214c:	0018      	movs	r0, r3
   1214e:	4b70      	ldr	r3, [pc, #448]	; (12310 <_i2c_master_read_packet+0x26c>)
   12150:	4798      	blx	r3
   12152:	0003      	movs	r3, r0
   12154:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12156:	2317      	movs	r3, #23
   12158:	18fb      	adds	r3, r7, r3
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	2b00      	cmp	r3, #0
   1215e:	d111      	bne.n	12184 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12160:	683b      	ldr	r3, [r7, #0]
   12162:	881b      	ldrh	r3, [r3, #0]
   12164:	0a1b      	lsrs	r3, r3, #8
   12166:	b29b      	uxth	r3, r3
   12168:	2278      	movs	r2, #120	; 0x78
   1216a:	4313      	orrs	r3, r2
   1216c:	b29b      	uxth	r3, r3
   1216e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12170:	683b      	ldr	r3, [r7, #0]
   12172:	7a5b      	ldrb	r3, [r3, #9]
   12174:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12176:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12178:	2201      	movs	r2, #1
   1217a:	4313      	orrs	r3, r2
   1217c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1217e:	68fb      	ldr	r3, [r7, #12]
   12180:	625a      	str	r2, [r3, #36]	; 0x24
   12182:	e00f      	b.n	121a4 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12184:	2317      	movs	r3, #23
   12186:	18fb      	adds	r3, r7, r3
   12188:	781b      	ldrb	r3, [r3, #0]
   1218a:	e0b6      	b.n	122fa <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1218c:	683b      	ldr	r3, [r7, #0]
   1218e:	881b      	ldrh	r3, [r3, #0]
   12190:	005b      	lsls	r3, r3, #1
   12192:	2201      	movs	r2, #1
   12194:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12196:	683b      	ldr	r3, [r7, #0]
   12198:	7a5b      	ldrb	r3, [r3, #9]
   1219a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1219c:	4313      	orrs	r3, r2
   1219e:	001a      	movs	r2, r3
   121a0:	68fb      	ldr	r3, [r7, #12]
   121a2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   121a4:	2317      	movs	r3, #23
   121a6:	18fc      	adds	r4, r7, r3
   121a8:	687b      	ldr	r3, [r7, #4]
   121aa:	0018      	movs	r0, r3
   121ac:	4b57      	ldr	r3, [pc, #348]	; (1230c <_i2c_master_read_packet+0x268>)
   121ae:	4798      	blx	r3
   121b0:	0003      	movs	r3, r0
   121b2:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   121b4:	230b      	movs	r3, #11
   121b6:	18fb      	adds	r3, r7, r3
   121b8:	781b      	ldrb	r3, [r3, #0]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d00b      	beq.n	121d6 <_i2c_master_read_packet+0x132>
   121be:	683b      	ldr	r3, [r7, #0]
   121c0:	885b      	ldrh	r3, [r3, #2]
   121c2:	2b01      	cmp	r3, #1
   121c4:	d107      	bne.n	121d6 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   121c6:	68fb      	ldr	r3, [r7, #12]
   121c8:	685b      	ldr	r3, [r3, #4]
   121ca:	2280      	movs	r2, #128	; 0x80
   121cc:	02d2      	lsls	r2, r2, #11
   121ce:	431a      	orrs	r2, r3
   121d0:	68fb      	ldr	r3, [r7, #12]
   121d2:	605a      	str	r2, [r3, #4]
   121d4:	e005      	b.n	121e2 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
   121d6:	68fb      	ldr	r3, [r7, #12]
   121d8:	685b      	ldr	r3, [r3, #4]
   121da:	4a4b      	ldr	r2, [pc, #300]	; (12308 <_i2c_master_read_packet+0x264>)
   121dc:	401a      	ands	r2, r3
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   121e2:	2317      	movs	r3, #23
   121e4:	18fb      	adds	r3, r7, r3
   121e6:	781b      	ldrb	r3, [r3, #0]
   121e8:	2b00      	cmp	r3, #0
   121ea:	d107      	bne.n	121fc <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
   121ec:	2317      	movs	r3, #23
   121ee:	18fc      	adds	r4, r7, r3
   121f0:	687b      	ldr	r3, [r7, #4]
   121f2:	0018      	movs	r0, r3
   121f4:	4b46      	ldr	r3, [pc, #280]	; (12310 <_i2c_master_read_packet+0x26c>)
   121f6:	4798      	blx	r3
   121f8:	0003      	movs	r3, r0
   121fa:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   121fc:	2317      	movs	r3, #23
   121fe:	18fb      	adds	r3, r7, r3
   12200:	781b      	ldrb	r3, [r3, #0]
   12202:	2b00      	cmp	r3, #0
   12204:	d000      	beq.n	12208 <_i2c_master_read_packet+0x164>
   12206:	e075      	b.n	122f4 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
   12208:	e04b      	b.n	122a2 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   1220a:	68fb      	ldr	r3, [r7, #12]
   1220c:	8b5b      	ldrh	r3, [r3, #26]
   1220e:	b29b      	uxth	r3, r3
   12210:	001a      	movs	r2, r3
   12212:	2320      	movs	r3, #32
   12214:	4013      	ands	r3, r2
   12216:	d101      	bne.n	1221c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
   12218:	2341      	movs	r3, #65	; 0x41
   1221a:	e06e      	b.n	122fa <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
   1221c:	687b      	ldr	r3, [r7, #4]
   1221e:	7adb      	ldrb	r3, [r3, #11]
   12220:	2b00      	cmp	r3, #0
   12222:	d01e      	beq.n	12262 <_i2c_master_read_packet+0x1be>
   12224:	230b      	movs	r3, #11
   12226:	18fb      	adds	r3, r7, r3
   12228:	781b      	ldrb	r3, [r3, #0]
   1222a:	2201      	movs	r2, #1
   1222c:	4053      	eors	r3, r2
   1222e:	b2db      	uxtb	r3, r3
   12230:	2b00      	cmp	r3, #0
   12232:	d004      	beq.n	1223e <_i2c_master_read_packet+0x19a>
   12234:	2314      	movs	r3, #20
   12236:	18fb      	adds	r3, r7, r3
   12238:	881b      	ldrh	r3, [r3, #0]
   1223a:	2b00      	cmp	r3, #0
   1223c:	d009      	beq.n	12252 <_i2c_master_read_packet+0x1ae>
   1223e:	230b      	movs	r3, #11
   12240:	18fb      	adds	r3, r7, r3
   12242:	781b      	ldrb	r3, [r3, #0]
   12244:	2b00      	cmp	r3, #0
   12246:	d00c      	beq.n	12262 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
   12248:	2314      	movs	r3, #20
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	881b      	ldrh	r3, [r3, #0]
   1224e:	2b01      	cmp	r3, #1
   12250:	d107      	bne.n	12262 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12252:	68fb      	ldr	r3, [r7, #12]
   12254:	685b      	ldr	r3, [r3, #4]
   12256:	2280      	movs	r2, #128	; 0x80
   12258:	02d2      	lsls	r2, r2, #11
   1225a:	431a      	orrs	r2, r3
   1225c:	68fb      	ldr	r3, [r7, #12]
   1225e:	605a      	str	r2, [r3, #4]
   12260:	e01a      	b.n	12298 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   12262:	687b      	ldr	r3, [r7, #4]
   12264:	0018      	movs	r0, r3
   12266:	4b2b      	ldr	r3, [pc, #172]	; (12314 <_i2c_master_read_packet+0x270>)
   12268:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   1226a:	683b      	ldr	r3, [r7, #0]
   1226c:	685a      	ldr	r2, [r3, #4]
   1226e:	2312      	movs	r3, #18
   12270:	18fb      	adds	r3, r7, r3
   12272:	881b      	ldrh	r3, [r3, #0]
   12274:	2112      	movs	r1, #18
   12276:	1879      	adds	r1, r7, r1
   12278:	1c58      	adds	r0, r3, #1
   1227a:	8008      	strh	r0, [r1, #0]
   1227c:	18d3      	adds	r3, r2, r3
   1227e:	68fa      	ldr	r2, [r7, #12]
   12280:	2128      	movs	r1, #40	; 0x28
   12282:	5c52      	ldrb	r2, [r2, r1]
   12284:	b2d2      	uxtb	r2, r2
   12286:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   12288:	2317      	movs	r3, #23
   1228a:	18fc      	adds	r4, r7, r3
   1228c:	687b      	ldr	r3, [r7, #4]
   1228e:	0018      	movs	r0, r3
   12290:	4b1e      	ldr	r3, [pc, #120]	; (1230c <_i2c_master_read_packet+0x268>)
   12292:	4798      	blx	r3
   12294:	0003      	movs	r3, r0
   12296:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   12298:	2317      	movs	r3, #23
   1229a:	18fb      	adds	r3, r7, r3
   1229c:	781b      	ldrb	r3, [r3, #0]
   1229e:	2b00      	cmp	r3, #0
   122a0:	d109      	bne.n	122b6 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
   122a2:	2314      	movs	r3, #20
   122a4:	18fb      	adds	r3, r7, r3
   122a6:	881b      	ldrh	r3, [r3, #0]
   122a8:	2214      	movs	r2, #20
   122aa:	18ba      	adds	r2, r7, r2
   122ac:	1e59      	subs	r1, r3, #1
   122ae:	8011      	strh	r1, [r2, #0]
   122b0:	2b00      	cmp	r3, #0
   122b2:	d1aa      	bne.n	1220a <_i2c_master_read_packet+0x166>
   122b4:	e000      	b.n	122b8 <_i2c_master_read_packet+0x214>
				break;
   122b6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	7a9b      	ldrb	r3, [r3, #10]
   122bc:	2b00      	cmp	r3, #0
   122be:	d00a      	beq.n	122d6 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   122c0:	687b      	ldr	r3, [r7, #4]
   122c2:	0018      	movs	r0, r3
   122c4:	4b13      	ldr	r3, [pc, #76]	; (12314 <_i2c_master_read_packet+0x270>)
   122c6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   122c8:	68fb      	ldr	r3, [r7, #12]
   122ca:	685b      	ldr	r3, [r3, #4]
   122cc:	22c0      	movs	r2, #192	; 0xc0
   122ce:	0292      	lsls	r2, r2, #10
   122d0:	431a      	orrs	r2, r3
   122d2:	68fb      	ldr	r3, [r7, #12]
   122d4:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   122d6:	687b      	ldr	r3, [r7, #4]
   122d8:	0018      	movs	r0, r3
   122da:	4b0e      	ldr	r3, [pc, #56]	; (12314 <_i2c_master_read_packet+0x270>)
   122dc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   122de:	683b      	ldr	r3, [r7, #0]
   122e0:	685a      	ldr	r2, [r3, #4]
   122e2:	2312      	movs	r3, #18
   122e4:	18fb      	adds	r3, r7, r3
   122e6:	881b      	ldrh	r3, [r3, #0]
   122e8:	18d3      	adds	r3, r2, r3
   122ea:	68fa      	ldr	r2, [r7, #12]
   122ec:	2128      	movs	r1, #40	; 0x28
   122ee:	5c52      	ldrb	r2, [r2, r1]
   122f0:	b2d2      	uxtb	r2, r2
   122f2:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   122f4:	2317      	movs	r3, #23
   122f6:	18fb      	adds	r3, r7, r3
   122f8:	781b      	ldrb	r3, [r3, #0]
}
   122fa:	0018      	movs	r0, r3
   122fc:	46bd      	mov	sp, r7
   122fe:	b007      	add	sp, #28
   12300:	bd90      	pop	{r4, r7, pc}
   12302:	46c0      	nop			; (mov r8, r8)
   12304:	00012051 	.word	0x00012051
   12308:	fffbffff 	.word	0xfffbffff
   1230c:	00011ff3 	.word	0x00011ff3
   12310:	00011f95 	.word	0x00011f95
   12314:	00011949 	.word	0x00011949

00012318 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12318:	b580      	push	{r7, lr}
   1231a:	b082      	sub	sp, #8
   1231c:	af00      	add	r7, sp, #0
   1231e:	6078      	str	r0, [r7, #4]
   12320:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
   12322:	687b      	ldr	r3, [r7, #4]
   12324:	8b9b      	ldrh	r3, [r3, #28]
   12326:	b29b      	uxth	r3, r3
   12328:	2b00      	cmp	r3, #0
   1232a:	d001      	beq.n	12330 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
   1232c:	2305      	movs	r3, #5
   1232e:	e00c      	b.n	1234a <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
   12330:	687b      	ldr	r3, [r7, #4]
   12332:	2201      	movs	r2, #1
   12334:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12336:	687b      	ldr	r3, [r7, #4]
   12338:	2201      	movs	r2, #1
   1233a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
   1233c:	683a      	ldr	r2, [r7, #0]
   1233e:	687b      	ldr	r3, [r7, #4]
   12340:	0011      	movs	r1, r2
   12342:	0018      	movs	r0, r3
   12344:	4b03      	ldr	r3, [pc, #12]	; (12354 <i2c_master_read_packet_wait+0x3c>)
   12346:	4798      	blx	r3
   12348:	0003      	movs	r3, r0
}
   1234a:	0018      	movs	r0, r3
   1234c:	46bd      	mov	sp, r7
   1234e:	b002      	add	sp, #8
   12350:	bd80      	pop	{r7, pc}
   12352:	46c0      	nop			; (mov r8, r8)
   12354:	000120a5 	.word	0x000120a5

00012358 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12358:	b590      	push	{r4, r7, lr}
   1235a:	b087      	sub	sp, #28
   1235c:	af00      	add	r7, sp, #0
   1235e:	6078      	str	r0, [r7, #4]
   12360:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12362:	687b      	ldr	r3, [r7, #4]
   12364:	681b      	ldr	r3, [r3, #0]
   12366:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   12368:	2314      	movs	r3, #20
   1236a:	18fb      	adds	r3, r7, r3
   1236c:	683a      	ldr	r2, [r7, #0]
   1236e:	8852      	ldrh	r2, [r2, #2]
   12370:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   12372:	687b      	ldr	r3, [r7, #4]
   12374:	0018      	movs	r0, r3
   12376:	4b51      	ldr	r3, [pc, #324]	; (124bc <_i2c_master_write_packet+0x164>)
   12378:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1237a:	683b      	ldr	r3, [r7, #0]
   1237c:	7a5b      	ldrb	r3, [r3, #9]
   1237e:	2b00      	cmp	r3, #0
   12380:	d006      	beq.n	12390 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12382:	683b      	ldr	r3, [r7, #0]
   12384:	7a9a      	ldrb	r2, [r3, #10]
   12386:	687b      	ldr	r3, [r7, #4]
   12388:	0011      	movs	r1, r2
   1238a:	0018      	movs	r0, r3
   1238c:	4b4c      	ldr	r3, [pc, #304]	; (124c0 <_i2c_master_write_packet+0x168>)
   1238e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12390:	68fb      	ldr	r3, [r7, #12]
   12392:	685b      	ldr	r3, [r3, #4]
   12394:	4a4b      	ldr	r2, [pc, #300]	; (124c4 <_i2c_master_write_packet+0x16c>)
   12396:	401a      	ands	r2, r3
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   1239c:	683b      	ldr	r3, [r7, #0]
   1239e:	7a1b      	ldrb	r3, [r3, #8]
   123a0:	2b00      	cmp	r3, #0
   123a2:	d00d      	beq.n	123c0 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   123a4:	683b      	ldr	r3, [r7, #0]
   123a6:	881b      	ldrh	r3, [r3, #0]
   123a8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   123aa:	683b      	ldr	r3, [r7, #0]
   123ac:	7a5b      	ldrb	r3, [r3, #9]
   123ae:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   123b0:	4313      	orrs	r3, r2
   123b2:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   123b4:	2380      	movs	r3, #128	; 0x80
   123b6:	021b      	lsls	r3, r3, #8
   123b8:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   123ba:	68fb      	ldr	r3, [r7, #12]
   123bc:	625a      	str	r2, [r3, #36]	; 0x24
   123be:	e009      	b.n	123d4 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   123c0:	683b      	ldr	r3, [r7, #0]
   123c2:	881b      	ldrh	r3, [r3, #0]
   123c4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   123c6:	683b      	ldr	r3, [r7, #0]
   123c8:	7a5b      	ldrb	r3, [r3, #9]
   123ca:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   123cc:	4313      	orrs	r3, r2
   123ce:	001a      	movs	r2, r3
   123d0:	68fb      	ldr	r3, [r7, #12]
   123d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   123d4:	2317      	movs	r3, #23
   123d6:	18fc      	adds	r4, r7, r3
   123d8:	687b      	ldr	r3, [r7, #4]
   123da:	0018      	movs	r0, r3
   123dc:	4b3a      	ldr	r3, [pc, #232]	; (124c8 <_i2c_master_write_packet+0x170>)
   123de:	4798      	blx	r3
   123e0:	0003      	movs	r3, r0
   123e2:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   123e4:	2317      	movs	r3, #23
   123e6:	18fb      	adds	r3, r7, r3
   123e8:	781b      	ldrb	r3, [r3, #0]
   123ea:	2b00      	cmp	r3, #0
   123ec:	d107      	bne.n	123fe <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
   123ee:	2317      	movs	r3, #23
   123f0:	18fc      	adds	r4, r7, r3
   123f2:	687b      	ldr	r3, [r7, #4]
   123f4:	0018      	movs	r0, r3
   123f6:	4b35      	ldr	r3, [pc, #212]	; (124cc <_i2c_master_write_packet+0x174>)
   123f8:	4798      	blx	r3
   123fa:	0003      	movs	r3, r0
   123fc:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   123fe:	2317      	movs	r3, #23
   12400:	18fb      	adds	r3, r7, r3
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	2b00      	cmp	r3, #0
   12406:	d152      	bne.n	124ae <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   12408:	2312      	movs	r3, #18
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	2200      	movs	r2, #0
   1240e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   12410:	e033      	b.n	1247a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   12412:	68fb      	ldr	r3, [r7, #12]
   12414:	8b5b      	ldrh	r3, [r3, #26]
   12416:	b29b      	uxth	r3, r3
   12418:	001a      	movs	r2, r3
   1241a:	2320      	movs	r3, #32
   1241c:	4013      	ands	r3, r2
   1241e:	d101      	bne.n	12424 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
   12420:	2341      	movs	r3, #65	; 0x41
   12422:	e047      	b.n	124b4 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   12424:	687b      	ldr	r3, [r7, #4]
   12426:	0018      	movs	r0, r3
   12428:	4b24      	ldr	r3, [pc, #144]	; (124bc <_i2c_master_write_packet+0x164>)
   1242a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   1242c:	683b      	ldr	r3, [r7, #0]
   1242e:	685a      	ldr	r2, [r3, #4]
   12430:	2312      	movs	r3, #18
   12432:	18fb      	adds	r3, r7, r3
   12434:	881b      	ldrh	r3, [r3, #0]
   12436:	2112      	movs	r1, #18
   12438:	1879      	adds	r1, r7, r1
   1243a:	1c58      	adds	r0, r3, #1
   1243c:	8008      	strh	r0, [r1, #0]
   1243e:	18d3      	adds	r3, r2, r3
   12440:	7819      	ldrb	r1, [r3, #0]
   12442:	68fb      	ldr	r3, [r7, #12]
   12444:	2228      	movs	r2, #40	; 0x28
   12446:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   12448:	2317      	movs	r3, #23
   1244a:	18fc      	adds	r4, r7, r3
   1244c:	687b      	ldr	r3, [r7, #4]
   1244e:	0018      	movs	r0, r3
   12450:	4b1d      	ldr	r3, [pc, #116]	; (124c8 <_i2c_master_write_packet+0x170>)
   12452:	4798      	blx	r3
   12454:	0003      	movs	r3, r0
   12456:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   12458:	2317      	movs	r3, #23
   1245a:	18fb      	adds	r3, r7, r3
   1245c:	781b      	ldrb	r3, [r3, #0]
   1245e:	2b00      	cmp	r3, #0
   12460:	d115      	bne.n	1248e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12462:	68fb      	ldr	r3, [r7, #12]
   12464:	8b5b      	ldrh	r3, [r3, #26]
   12466:	b29b      	uxth	r3, r3
   12468:	001a      	movs	r2, r3
   1246a:	2304      	movs	r3, #4
   1246c:	4013      	ands	r3, r2
   1246e:	d004      	beq.n	1247a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   12470:	2317      	movs	r3, #23
   12472:	18fb      	adds	r3, r7, r3
   12474:	221e      	movs	r2, #30
   12476:	701a      	strb	r2, [r3, #0]
				break;
   12478:	e00a      	b.n	12490 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
   1247a:	2314      	movs	r3, #20
   1247c:	18fb      	adds	r3, r7, r3
   1247e:	881b      	ldrh	r3, [r3, #0]
   12480:	2214      	movs	r2, #20
   12482:	18ba      	adds	r2, r7, r2
   12484:	1e59      	subs	r1, r3, #1
   12486:	8011      	strh	r1, [r2, #0]
   12488:	2b00      	cmp	r3, #0
   1248a:	d1c2      	bne.n	12412 <_i2c_master_write_packet+0xba>
   1248c:	e000      	b.n	12490 <_i2c_master_write_packet+0x138>
				break;
   1248e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   12490:	687b      	ldr	r3, [r7, #4]
   12492:	7a9b      	ldrb	r3, [r3, #10]
   12494:	2b00      	cmp	r3, #0
   12496:	d00a      	beq.n	124ae <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   12498:	687b      	ldr	r3, [r7, #4]
   1249a:	0018      	movs	r0, r3
   1249c:	4b07      	ldr	r3, [pc, #28]	; (124bc <_i2c_master_write_packet+0x164>)
   1249e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   124a0:	68fb      	ldr	r3, [r7, #12]
   124a2:	685b      	ldr	r3, [r3, #4]
   124a4:	22c0      	movs	r2, #192	; 0xc0
   124a6:	0292      	lsls	r2, r2, #10
   124a8:	431a      	orrs	r2, r3
   124aa:	68fb      	ldr	r3, [r7, #12]
   124ac:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   124ae:	2317      	movs	r3, #23
   124b0:	18fb      	adds	r3, r7, r3
   124b2:	781b      	ldrb	r3, [r3, #0]
}
   124b4:	0018      	movs	r0, r3
   124b6:	46bd      	mov	sp, r7
   124b8:	b007      	add	sp, #28
   124ba:	bd90      	pop	{r4, r7, pc}
   124bc:	00011949 	.word	0x00011949
   124c0:	00012051 	.word	0x00012051
   124c4:	fffbffff 	.word	0xfffbffff
   124c8:	00011ff3 	.word	0x00011ff3
   124cc:	00011f95 	.word	0x00011f95

000124d0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   124d0:	b580      	push	{r7, lr}
   124d2:	b082      	sub	sp, #8
   124d4:	af00      	add	r7, sp, #0
   124d6:	6078      	str	r0, [r7, #4]
   124d8:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   124da:	687b      	ldr	r3, [r7, #4]
   124dc:	8b9b      	ldrh	r3, [r3, #28]
   124de:	b29b      	uxth	r3, r3
   124e0:	2b00      	cmp	r3, #0
   124e2:	d001      	beq.n	124e8 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
   124e4:	2305      	movs	r3, #5
   124e6:	e00c      	b.n	12502 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
   124e8:	687b      	ldr	r3, [r7, #4]
   124ea:	2201      	movs	r2, #1
   124ec:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   124ee:	687b      	ldr	r3, [r7, #4]
   124f0:	2201      	movs	r2, #1
   124f2:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
   124f4:	683a      	ldr	r2, [r7, #0]
   124f6:	687b      	ldr	r3, [r7, #4]
   124f8:	0011      	movs	r1, r2
   124fa:	0018      	movs	r0, r3
   124fc:	4b03      	ldr	r3, [pc, #12]	; (1250c <i2c_master_write_packet_wait+0x3c>)
   124fe:	4798      	blx	r3
   12500:	0003      	movs	r3, r0
}
   12502:	0018      	movs	r0, r3
   12504:	46bd      	mov	sp, r7
   12506:	b002      	add	sp, #8
   12508:	bd80      	pop	{r7, pc}
   1250a:	46c0      	nop			; (mov r8, r8)
   1250c:	00012359 	.word	0x00012359

00012510 <system_gclk_chan_get_config_defaults>:
{
   12510:	b580      	push	{r7, lr}
   12512:	b082      	sub	sp, #8
   12514:	af00      	add	r7, sp, #0
   12516:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	2200      	movs	r2, #0
   1251c:	701a      	strb	r2, [r3, #0]
}
   1251e:	46c0      	nop			; (mov r8, r8)
   12520:	46bd      	mov	sp, r7
   12522:	b002      	add	sp, #8
   12524:	bd80      	pop	{r7, pc}

00012526 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   12526:	b5f0      	push	{r4, r5, r6, r7, lr}
   12528:	b08d      	sub	sp, #52	; 0x34
   1252a:	af00      	add	r7, sp, #0
   1252c:	60b8      	str	r0, [r7, #8]
   1252e:	60f9      	str	r1, [r7, #12]
   12530:	603a      	str	r2, [r7, #0]
   12532:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   12534:	2300      	movs	r3, #0
   12536:	2400      	movs	r4, #0
   12538:	623b      	str	r3, [r7, #32]
   1253a:	627c      	str	r4, [r7, #36]	; 0x24
   1253c:	2300      	movs	r3, #0
   1253e:	2400      	movs	r4, #0
   12540:	61bb      	str	r3, [r7, #24]
   12542:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   12544:	233f      	movs	r3, #63	; 0x3f
   12546:	62fb      	str	r3, [r7, #44]	; 0x2c
   12548:	e053      	b.n	125f2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1254c:	3b20      	subs	r3, #32
   1254e:	2b00      	cmp	r3, #0
   12550:	db04      	blt.n	1255c <long_division+0x36>
   12552:	2201      	movs	r2, #1
   12554:	409a      	lsls	r2, r3
   12556:	0013      	movs	r3, r2
   12558:	617b      	str	r3, [r7, #20]
   1255a:	e00b      	b.n	12574 <long_division+0x4e>
   1255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1255e:	2220      	movs	r2, #32
   12560:	1ad3      	subs	r3, r2, r3
   12562:	2201      	movs	r2, #1
   12564:	40da      	lsrs	r2, r3
   12566:	0013      	movs	r3, r2
   12568:	2100      	movs	r1, #0
   1256a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1256c:	4091      	lsls	r1, r2
   1256e:	000a      	movs	r2, r1
   12570:	4313      	orrs	r3, r2
   12572:	617b      	str	r3, [r7, #20]
   12574:	2201      	movs	r2, #1
   12576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12578:	409a      	lsls	r2, r3
   1257a:	0013      	movs	r3, r2
   1257c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1257e:	69bb      	ldr	r3, [r7, #24]
   12580:	69fc      	ldr	r4, [r7, #28]
   12582:	18db      	adds	r3, r3, r3
   12584:	4164      	adcs	r4, r4
   12586:	61bb      	str	r3, [r7, #24]
   12588:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1258a:	68bb      	ldr	r3, [r7, #8]
   1258c:	693a      	ldr	r2, [r7, #16]
   1258e:	401a      	ands	r2, r3
   12590:	0015      	movs	r5, r2
   12592:	68fb      	ldr	r3, [r7, #12]
   12594:	697a      	ldr	r2, [r7, #20]
   12596:	401a      	ands	r2, r3
   12598:	0016      	movs	r6, r2
   1259a:	002b      	movs	r3, r5
   1259c:	4333      	orrs	r3, r6
   1259e:	d007      	beq.n	125b0 <long_division+0x8a>
			r |= 0x01;
   125a0:	69bb      	ldr	r3, [r7, #24]
   125a2:	2201      	movs	r2, #1
   125a4:	4313      	orrs	r3, r2
   125a6:	61bb      	str	r3, [r7, #24]
   125a8:	69fb      	ldr	r3, [r7, #28]
   125aa:	2200      	movs	r2, #0
   125ac:	4313      	orrs	r3, r2
   125ae:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   125b0:	687a      	ldr	r2, [r7, #4]
   125b2:	69fb      	ldr	r3, [r7, #28]
   125b4:	429a      	cmp	r2, r3
   125b6:	d819      	bhi.n	125ec <long_division+0xc6>
   125b8:	687a      	ldr	r2, [r7, #4]
   125ba:	69fb      	ldr	r3, [r7, #28]
   125bc:	429a      	cmp	r2, r3
   125be:	d103      	bne.n	125c8 <long_division+0xa2>
   125c0:	683a      	ldr	r2, [r7, #0]
   125c2:	69bb      	ldr	r3, [r7, #24]
   125c4:	429a      	cmp	r2, r3
   125c6:	d811      	bhi.n	125ec <long_division+0xc6>
			r = r - d;
   125c8:	69b9      	ldr	r1, [r7, #24]
   125ca:	69fa      	ldr	r2, [r7, #28]
   125cc:	683b      	ldr	r3, [r7, #0]
   125ce:	687c      	ldr	r4, [r7, #4]
   125d0:	1ac9      	subs	r1, r1, r3
   125d2:	41a2      	sbcs	r2, r4
   125d4:	000b      	movs	r3, r1
   125d6:	0014      	movs	r4, r2
   125d8:	61bb      	str	r3, [r7, #24]
   125da:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   125dc:	6a3a      	ldr	r2, [r7, #32]
   125de:	693b      	ldr	r3, [r7, #16]
   125e0:	4313      	orrs	r3, r2
   125e2:	623b      	str	r3, [r7, #32]
   125e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   125e6:	697b      	ldr	r3, [r7, #20]
   125e8:	4313      	orrs	r3, r2
   125ea:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125ee:	3b01      	subs	r3, #1
   125f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   125f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125f4:	2b00      	cmp	r3, #0
   125f6:	daa8      	bge.n	1254a <long_division+0x24>
		}
	}

	return q;
   125f8:	6a3b      	ldr	r3, [r7, #32]
   125fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   125fc:	0018      	movs	r0, r3
   125fe:	0021      	movs	r1, r4
   12600:	46bd      	mov	sp, r7
   12602:	b00d      	add	sp, #52	; 0x34
   12604:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012606 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   12606:	b580      	push	{r7, lr}
   12608:	b086      	sub	sp, #24
   1260a:	af00      	add	r7, sp, #0
   1260c:	60f8      	str	r0, [r7, #12]
   1260e:	60b9      	str	r1, [r7, #8]
   12610:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   12612:	2316      	movs	r3, #22
   12614:	18fb      	adds	r3, r7, r3
   12616:	2200      	movs	r2, #0
   12618:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1261a:	68bb      	ldr	r3, [r7, #8]
   1261c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1261e:	68bb      	ldr	r3, [r7, #8]
   12620:	085a      	lsrs	r2, r3, #1
   12622:	68fb      	ldr	r3, [r7, #12]
   12624:	429a      	cmp	r2, r3
   12626:	d201      	bcs.n	1262c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12628:	2340      	movs	r3, #64	; 0x40
   1262a:	e026      	b.n	1267a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1262c:	68bb      	ldr	r3, [r7, #8]
   1262e:	085b      	lsrs	r3, r3, #1
   12630:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   12632:	e00a      	b.n	1264a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   12634:	693a      	ldr	r2, [r7, #16]
   12636:	68fb      	ldr	r3, [r7, #12]
   12638:	1ad3      	subs	r3, r2, r3
   1263a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1263c:	2316      	movs	r3, #22
   1263e:	18fb      	adds	r3, r7, r3
   12640:	881a      	ldrh	r2, [r3, #0]
   12642:	2316      	movs	r3, #22
   12644:	18fb      	adds	r3, r7, r3
   12646:	3201      	adds	r2, #1
   12648:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1264a:	693a      	ldr	r2, [r7, #16]
   1264c:	68fb      	ldr	r3, [r7, #12]
   1264e:	429a      	cmp	r2, r3
   12650:	d2f0      	bcs.n	12634 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   12652:	2316      	movs	r3, #22
   12654:	18fb      	adds	r3, r7, r3
   12656:	2216      	movs	r2, #22
   12658:	18ba      	adds	r2, r7, r2
   1265a:	8812      	ldrh	r2, [r2, #0]
   1265c:	3a01      	subs	r2, #1
   1265e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   12660:	2316      	movs	r3, #22
   12662:	18fb      	adds	r3, r7, r3
   12664:	881b      	ldrh	r3, [r3, #0]
   12666:	2bff      	cmp	r3, #255	; 0xff
   12668:	d901      	bls.n	1266e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1266a:	2340      	movs	r3, #64	; 0x40
   1266c:	e005      	b.n	1267a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	2216      	movs	r2, #22
   12672:	18ba      	adds	r2, r7, r2
   12674:	8812      	ldrh	r2, [r2, #0]
   12676:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   12678:	2300      	movs	r3, #0
	}
}
   1267a:	0018      	movs	r0, r3
   1267c:	46bd      	mov	sp, r7
   1267e:	b006      	add	sp, #24
   12680:	bd80      	pop	{r7, pc}
	...

00012684 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   12684:	b5f0      	push	{r4, r5, r6, r7, lr}
   12686:	b0a1      	sub	sp, #132	; 0x84
   12688:	af00      	add	r7, sp, #0
   1268a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1268c:	64b9      	str	r1, [r7, #72]	; 0x48
   1268e:	647a      	str	r2, [r7, #68]	; 0x44
   12690:	2243      	movs	r2, #67	; 0x43
   12692:	18ba      	adds	r2, r7, r2
   12694:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   12696:	2300      	movs	r3, #0
   12698:	2400      	movs	r4, #0
   1269a:	673b      	str	r3, [r7, #112]	; 0x70
   1269c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1269e:	2300      	movs	r3, #0
   126a0:	2400      	movs	r4, #0
   126a2:	66bb      	str	r3, [r7, #104]	; 0x68
   126a4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   126a6:	2300      	movs	r3, #0
   126a8:	2400      	movs	r4, #0
   126aa:	67bb      	str	r3, [r7, #120]	; 0x78
   126ac:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   126ae:	2300      	movs	r3, #0
   126b0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   126b2:	2358      	movs	r3, #88	; 0x58
   126b4:	2240      	movs	r2, #64	; 0x40
   126b6:	4694      	mov	ip, r2
   126b8:	44bc      	add	ip, r7
   126ba:	4463      	add	r3, ip
   126bc:	781a      	ldrb	r2, [r3, #0]
   126be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   126c0:	435a      	muls	r2, r3
   126c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   126c4:	429a      	cmp	r2, r3
   126c6:	d901      	bls.n	126cc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   126c8:	2340      	movs	r3, #64	; 0x40
   126ca:	e0b3      	b.n	12834 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   126cc:	2343      	movs	r3, #67	; 0x43
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	781b      	ldrb	r3, [r3, #0]
   126d2:	2b00      	cmp	r3, #0
   126d4:	d13d      	bne.n	12752 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   126d6:	2358      	movs	r3, #88	; 0x58
   126d8:	2240      	movs	r2, #64	; 0x40
   126da:	4694      	mov	ip, r2
   126dc:	44bc      	add	ip, r7
   126de:	4463      	add	r3, ip
   126e0:	781b      	ldrb	r3, [r3, #0]
   126e2:	b2db      	uxtb	r3, r3
   126e4:	613b      	str	r3, [r7, #16]
   126e6:	2300      	movs	r3, #0
   126e8:	617b      	str	r3, [r7, #20]
   126ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   126ec:	60bb      	str	r3, [r7, #8]
   126ee:	2300      	movs	r3, #0
   126f0:	60fb      	str	r3, [r7, #12]
   126f2:	4c52      	ldr	r4, [pc, #328]	; (1283c <_sercom_get_async_baud_val+0x1b8>)
   126f4:	68ba      	ldr	r2, [r7, #8]
   126f6:	68fb      	ldr	r3, [r7, #12]
   126f8:	6938      	ldr	r0, [r7, #16]
   126fa:	6979      	ldr	r1, [r7, #20]
   126fc:	47a0      	blx	r4
   126fe:	0003      	movs	r3, r0
   12700:	000c      	movs	r4, r1
   12702:	001b      	movs	r3, r3
   12704:	65fb      	str	r3, [r7, #92]	; 0x5c
   12706:	2300      	movs	r3, #0
   12708:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1270c:	603b      	str	r3, [r7, #0]
   1270e:	2300      	movs	r3, #0
   12710:	607b      	str	r3, [r7, #4]
   12712:	6db8      	ldr	r0, [r7, #88]	; 0x58
   12714:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12716:	683a      	ldr	r2, [r7, #0]
   12718:	687b      	ldr	r3, [r7, #4]
   1271a:	4c49      	ldr	r4, [pc, #292]	; (12840 <_sercom_get_async_baud_val+0x1bc>)
   1271c:	47a0      	blx	r4
   1271e:	0003      	movs	r3, r0
   12720:	000c      	movs	r4, r1
   12722:	673b      	str	r3, [r7, #112]	; 0x70
   12724:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   12726:	2100      	movs	r1, #0
   12728:	2201      	movs	r2, #1
   1272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1272c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1272e:	1ac9      	subs	r1, r1, r3
   12730:	41a2      	sbcs	r2, r4
   12732:	000b      	movs	r3, r1
   12734:	0014      	movs	r4, r2
   12736:	66bb      	str	r3, [r7, #104]	; 0x68
   12738:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1273a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1273c:	0c1b      	lsrs	r3, r3, #16
   1273e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12740:	0416      	lsls	r6, r2, #16
   12742:	431e      	orrs	r6, r3
   12744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12746:	041d      	lsls	r5, r3, #16
   12748:	0033      	movs	r3, r6
   1274a:	67bb      	str	r3, [r7, #120]	; 0x78
   1274c:	2300      	movs	r3, #0
   1274e:	67fb      	str	r3, [r7, #124]	; 0x7c
   12750:	e06a      	b.n	12828 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   12752:	2343      	movs	r3, #67	; 0x43
   12754:	18fb      	adds	r3, r7, r3
   12756:	781b      	ldrb	r3, [r3, #0]
   12758:	2b01      	cmp	r3, #1
   1275a:	d165      	bne.n	12828 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1275e:	633b      	str	r3, [r7, #48]	; 0x30
   12760:	2300      	movs	r3, #0
   12762:	637b      	str	r3, [r7, #52]	; 0x34
   12764:	2358      	movs	r3, #88	; 0x58
   12766:	2240      	movs	r2, #64	; 0x40
   12768:	4694      	mov	ip, r2
   1276a:	44bc      	add	ip, r7
   1276c:	4463      	add	r3, ip
   1276e:	781b      	ldrb	r3, [r3, #0]
   12770:	b2db      	uxtb	r3, r3
   12772:	62bb      	str	r3, [r7, #40]	; 0x28
   12774:	2300      	movs	r3, #0
   12776:	62fb      	str	r3, [r7, #44]	; 0x2c
   12778:	4c30      	ldr	r4, [pc, #192]	; (1283c <_sercom_get_async_baud_val+0x1b8>)
   1277a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1277e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12780:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12782:	47a0      	blx	r4
   12784:	0003      	movs	r3, r0
   12786:	000c      	movs	r4, r1
   12788:	65bb      	str	r3, [r7, #88]	; 0x58
   1278a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1278c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1278e:	623b      	str	r3, [r7, #32]
   12790:	2300      	movs	r3, #0
   12792:	627b      	str	r3, [r7, #36]	; 0x24
   12794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12796:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12798:	001a      	movs	r2, r3
   1279a:	0023      	movs	r3, r4
   1279c:	6a38      	ldr	r0, [r7, #32]
   1279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   127a0:	4c27      	ldr	r4, [pc, #156]	; (12840 <_sercom_get_async_baud_val+0x1bc>)
   127a2:	47a0      	blx	r4
   127a4:	0003      	movs	r3, r0
   127a6:	000c      	movs	r4, r1
   127a8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   127aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   127ac:	2380      	movs	r3, #128	; 0x80
   127ae:	019b      	lsls	r3, r3, #6
   127b0:	429a      	cmp	r2, r3
   127b2:	d901      	bls.n	127b8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   127b4:	2340      	movs	r3, #64	; 0x40
   127b6:	e03d      	b.n	12834 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   127b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   127ba:	61bb      	str	r3, [r7, #24]
   127bc:	2300      	movs	r3, #0
   127be:	61fb      	str	r3, [r7, #28]
   127c0:	69b9      	ldr	r1, [r7, #24]
   127c2:	69fa      	ldr	r2, [r7, #28]
   127c4:	000b      	movs	r3, r1
   127c6:	0f5b      	lsrs	r3, r3, #29
   127c8:	0010      	movs	r0, r2
   127ca:	00c0      	lsls	r0, r0, #3
   127cc:	63f8      	str	r0, [r7, #60]	; 0x3c
   127ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   127d0:	4318      	orrs	r0, r3
   127d2:	63f8      	str	r0, [r7, #60]	; 0x3c
   127d4:	000b      	movs	r3, r1
   127d6:	00db      	lsls	r3, r3, #3
   127d8:	63bb      	str	r3, [r7, #56]	; 0x38
   127da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   127de:	001a      	movs	r2, r3
   127e0:	0023      	movs	r3, r4
   127e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   127e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   127e6:	4c16      	ldr	r4, [pc, #88]	; (12840 <_sercom_get_async_baud_val+0x1bc>)
   127e8:	47a0      	blx	r4
   127ea:	0003      	movs	r3, r0
   127ec:	000c      	movs	r4, r1
   127ee:	65bb      	str	r3, [r7, #88]	; 0x58
   127f0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   127f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127f4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   127f6:	b2d9      	uxtb	r1, r3
   127f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   127fa:	b2db      	uxtb	r3, r3
   127fc:	00db      	lsls	r3, r3, #3
   127fe:	b2da      	uxtb	r2, r3
   12800:	2317      	movs	r3, #23
   12802:	2040      	movs	r0, #64	; 0x40
   12804:	4684      	mov	ip, r0
   12806:	44bc      	add	ip, r7
   12808:	4463      	add	r3, ip
   1280a:	1a8a      	subs	r2, r1, r2
   1280c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1280e:	2317      	movs	r3, #23
   12810:	2240      	movs	r2, #64	; 0x40
   12812:	4694      	mov	ip, r2
   12814:	44bc      	add	ip, r7
   12816:	4463      	add	r3, ip
   12818:	781b      	ldrb	r3, [r3, #0]
   1281a:	035b      	lsls	r3, r3, #13
   1281c:	001a      	movs	r2, r3
   1281e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12820:	4313      	orrs	r3, r2
   12822:	67bb      	str	r3, [r7, #120]	; 0x78
   12824:	2300      	movs	r3, #0
   12826:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   12828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1282a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1282c:	b29a      	uxth	r2, r3
   1282e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12830:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   12832:	2300      	movs	r3, #0
}
   12834:	0018      	movs	r0, r3
   12836:	46bd      	mov	sp, r7
   12838:	b021      	add	sp, #132	; 0x84
   1283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1283c:	00018205 	.word	0x00018205
   12840:	00012527 	.word	0x00012527

00012844 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   12844:	b580      	push	{r7, lr}
   12846:	b084      	sub	sp, #16
   12848:	af00      	add	r7, sp, #0
   1284a:	0002      	movs	r2, r0
   1284c:	1dfb      	adds	r3, r7, #7
   1284e:	701a      	strb	r2, [r3, #0]
   12850:	1dbb      	adds	r3, r7, #6
   12852:	1c0a      	adds	r2, r1, #0
   12854:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   12856:	4b1a      	ldr	r3, [pc, #104]	; (128c0 <sercom_set_gclk_generator+0x7c>)
   12858:	781b      	ldrb	r3, [r3, #0]
   1285a:	2201      	movs	r2, #1
   1285c:	4053      	eors	r3, r2
   1285e:	b2db      	uxtb	r3, r3
   12860:	2b00      	cmp	r3, #0
   12862:	d103      	bne.n	1286c <sercom_set_gclk_generator+0x28>
   12864:	1dbb      	adds	r3, r7, #6
   12866:	781b      	ldrb	r3, [r3, #0]
   12868:	2b00      	cmp	r3, #0
   1286a:	d01b      	beq.n	128a4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1286c:	230c      	movs	r3, #12
   1286e:	18fb      	adds	r3, r7, r3
   12870:	0018      	movs	r0, r3
   12872:	4b14      	ldr	r3, [pc, #80]	; (128c4 <sercom_set_gclk_generator+0x80>)
   12874:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   12876:	230c      	movs	r3, #12
   12878:	18fb      	adds	r3, r7, r3
   1287a:	1dfa      	adds	r2, r7, #7
   1287c:	7812      	ldrb	r2, [r2, #0]
   1287e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   12880:	230c      	movs	r3, #12
   12882:	18fb      	adds	r3, r7, r3
   12884:	0019      	movs	r1, r3
   12886:	2011      	movs	r0, #17
   12888:	4b0f      	ldr	r3, [pc, #60]	; (128c8 <sercom_set_gclk_generator+0x84>)
   1288a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1288c:	2011      	movs	r0, #17
   1288e:	4b0f      	ldr	r3, [pc, #60]	; (128cc <sercom_set_gclk_generator+0x88>)
   12890:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   12892:	4b0b      	ldr	r3, [pc, #44]	; (128c0 <sercom_set_gclk_generator+0x7c>)
   12894:	1dfa      	adds	r2, r7, #7
   12896:	7812      	ldrb	r2, [r2, #0]
   12898:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1289a:	4b09      	ldr	r3, [pc, #36]	; (128c0 <sercom_set_gclk_generator+0x7c>)
   1289c:	2201      	movs	r2, #1
   1289e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   128a0:	2300      	movs	r3, #0
   128a2:	e008      	b.n	128b6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   128a4:	4b06      	ldr	r3, [pc, #24]	; (128c0 <sercom_set_gclk_generator+0x7c>)
   128a6:	785b      	ldrb	r3, [r3, #1]
   128a8:	1dfa      	adds	r2, r7, #7
   128aa:	7812      	ldrb	r2, [r2, #0]
   128ac:	429a      	cmp	r2, r3
   128ae:	d101      	bne.n	128b4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   128b0:	2300      	movs	r3, #0
   128b2:	e000      	b.n	128b6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   128b4:	231d      	movs	r3, #29
}
   128b6:	0018      	movs	r0, r3
   128b8:	46bd      	mov	sp, r7
   128ba:	b004      	add	sp, #16
   128bc:	bd80      	pop	{r7, pc}
   128be:	46c0      	nop			; (mov r8, r8)
   128c0:	200007cc 	.word	0x200007cc
   128c4:	00012511 	.word	0x00012511
   128c8:	00015069 	.word	0x00015069
   128cc:	000150a9 	.word	0x000150a9

000128d0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   128d0:	b580      	push	{r7, lr}
   128d2:	b082      	sub	sp, #8
   128d4:	af00      	add	r7, sp, #0
   128d6:	6078      	str	r0, [r7, #4]
   128d8:	000a      	movs	r2, r1
   128da:	1cfb      	adds	r3, r7, #3
   128dc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   128de:	687b      	ldr	r3, [r7, #4]
   128e0:	4a4e      	ldr	r2, [pc, #312]	; (12a1c <_sercom_get_default_pad+0x14c>)
   128e2:	4293      	cmp	r3, r2
   128e4:	d040      	beq.n	12968 <_sercom_get_default_pad+0x98>
   128e6:	4a4d      	ldr	r2, [pc, #308]	; (12a1c <_sercom_get_default_pad+0x14c>)
   128e8:	4293      	cmp	r3, r2
   128ea:	d807      	bhi.n	128fc <_sercom_get_default_pad+0x2c>
   128ec:	2284      	movs	r2, #132	; 0x84
   128ee:	05d2      	lsls	r2, r2, #23
   128f0:	4293      	cmp	r3, r2
   128f2:	d00f      	beq.n	12914 <_sercom_get_default_pad+0x44>
   128f4:	4a4a      	ldr	r2, [pc, #296]	; (12a20 <_sercom_get_default_pad+0x150>)
   128f6:	4293      	cmp	r3, r2
   128f8:	d021      	beq.n	1293e <_sercom_get_default_pad+0x6e>
   128fa:	e089      	b.n	12a10 <_sercom_get_default_pad+0x140>
   128fc:	4a49      	ldr	r2, [pc, #292]	; (12a24 <_sercom_get_default_pad+0x154>)
   128fe:	4293      	cmp	r3, r2
   12900:	d100      	bne.n	12904 <_sercom_get_default_pad+0x34>
   12902:	e05b      	b.n	129bc <_sercom_get_default_pad+0xec>
   12904:	4a48      	ldr	r2, [pc, #288]	; (12a28 <_sercom_get_default_pad+0x158>)
   12906:	4293      	cmp	r3, r2
   12908:	d100      	bne.n	1290c <_sercom_get_default_pad+0x3c>
   1290a:	e06c      	b.n	129e6 <_sercom_get_default_pad+0x116>
   1290c:	4a47      	ldr	r2, [pc, #284]	; (12a2c <_sercom_get_default_pad+0x15c>)
   1290e:	4293      	cmp	r3, r2
   12910:	d03f      	beq.n	12992 <_sercom_get_default_pad+0xc2>
   12912:	e07d      	b.n	12a10 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   12914:	1cfb      	adds	r3, r7, #3
   12916:	781b      	ldrb	r3, [r3, #0]
   12918:	2b01      	cmp	r3, #1
   1291a:	d00a      	beq.n	12932 <_sercom_get_default_pad+0x62>
   1291c:	dc02      	bgt.n	12924 <_sercom_get_default_pad+0x54>
   1291e:	2b00      	cmp	r3, #0
   12920:	d005      	beq.n	1292e <_sercom_get_default_pad+0x5e>
   12922:	e075      	b.n	12a10 <_sercom_get_default_pad+0x140>
   12924:	2b02      	cmp	r3, #2
   12926:	d006      	beq.n	12936 <_sercom_get_default_pad+0x66>
   12928:	2b03      	cmp	r3, #3
   1292a:	d006      	beq.n	1293a <_sercom_get_default_pad+0x6a>
   1292c:	e070      	b.n	12a10 <_sercom_get_default_pad+0x140>
   1292e:	4b40      	ldr	r3, [pc, #256]	; (12a30 <_sercom_get_default_pad+0x160>)
   12930:	e06f      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12932:	4b40      	ldr	r3, [pc, #256]	; (12a34 <_sercom_get_default_pad+0x164>)
   12934:	e06d      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12936:	4b40      	ldr	r3, [pc, #256]	; (12a38 <_sercom_get_default_pad+0x168>)
   12938:	e06b      	b.n	12a12 <_sercom_get_default_pad+0x142>
   1293a:	4b40      	ldr	r3, [pc, #256]	; (12a3c <_sercom_get_default_pad+0x16c>)
   1293c:	e069      	b.n	12a12 <_sercom_get_default_pad+0x142>
   1293e:	1cfb      	adds	r3, r7, #3
   12940:	781b      	ldrb	r3, [r3, #0]
   12942:	2b01      	cmp	r3, #1
   12944:	d00a      	beq.n	1295c <_sercom_get_default_pad+0x8c>
   12946:	dc02      	bgt.n	1294e <_sercom_get_default_pad+0x7e>
   12948:	2b00      	cmp	r3, #0
   1294a:	d005      	beq.n	12958 <_sercom_get_default_pad+0x88>
   1294c:	e060      	b.n	12a10 <_sercom_get_default_pad+0x140>
   1294e:	2b02      	cmp	r3, #2
   12950:	d006      	beq.n	12960 <_sercom_get_default_pad+0x90>
   12952:	2b03      	cmp	r3, #3
   12954:	d006      	beq.n	12964 <_sercom_get_default_pad+0x94>
   12956:	e05b      	b.n	12a10 <_sercom_get_default_pad+0x140>
   12958:	2303      	movs	r3, #3
   1295a:	e05a      	b.n	12a12 <_sercom_get_default_pad+0x142>
   1295c:	4b38      	ldr	r3, [pc, #224]	; (12a40 <_sercom_get_default_pad+0x170>)
   1295e:	e058      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12960:	4b38      	ldr	r3, [pc, #224]	; (12a44 <_sercom_get_default_pad+0x174>)
   12962:	e056      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12964:	4b38      	ldr	r3, [pc, #224]	; (12a48 <_sercom_get_default_pad+0x178>)
   12966:	e054      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12968:	1cfb      	adds	r3, r7, #3
   1296a:	781b      	ldrb	r3, [r3, #0]
   1296c:	2b01      	cmp	r3, #1
   1296e:	d00a      	beq.n	12986 <_sercom_get_default_pad+0xb6>
   12970:	dc02      	bgt.n	12978 <_sercom_get_default_pad+0xa8>
   12972:	2b00      	cmp	r3, #0
   12974:	d005      	beq.n	12982 <_sercom_get_default_pad+0xb2>
   12976:	e04b      	b.n	12a10 <_sercom_get_default_pad+0x140>
   12978:	2b02      	cmp	r3, #2
   1297a:	d006      	beq.n	1298a <_sercom_get_default_pad+0xba>
   1297c:	2b03      	cmp	r3, #3
   1297e:	d006      	beq.n	1298e <_sercom_get_default_pad+0xbe>
   12980:	e046      	b.n	12a10 <_sercom_get_default_pad+0x140>
   12982:	4b32      	ldr	r3, [pc, #200]	; (12a4c <_sercom_get_default_pad+0x17c>)
   12984:	e045      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12986:	4b32      	ldr	r3, [pc, #200]	; (12a50 <_sercom_get_default_pad+0x180>)
   12988:	e043      	b.n	12a12 <_sercom_get_default_pad+0x142>
   1298a:	4b32      	ldr	r3, [pc, #200]	; (12a54 <_sercom_get_default_pad+0x184>)
   1298c:	e041      	b.n	12a12 <_sercom_get_default_pad+0x142>
   1298e:	4b32      	ldr	r3, [pc, #200]	; (12a58 <_sercom_get_default_pad+0x188>)
   12990:	e03f      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12992:	1cfb      	adds	r3, r7, #3
   12994:	781b      	ldrb	r3, [r3, #0]
   12996:	2b01      	cmp	r3, #1
   12998:	d00a      	beq.n	129b0 <_sercom_get_default_pad+0xe0>
   1299a:	dc02      	bgt.n	129a2 <_sercom_get_default_pad+0xd2>
   1299c:	2b00      	cmp	r3, #0
   1299e:	d005      	beq.n	129ac <_sercom_get_default_pad+0xdc>
   129a0:	e036      	b.n	12a10 <_sercom_get_default_pad+0x140>
   129a2:	2b02      	cmp	r3, #2
   129a4:	d006      	beq.n	129b4 <_sercom_get_default_pad+0xe4>
   129a6:	2b03      	cmp	r3, #3
   129a8:	d006      	beq.n	129b8 <_sercom_get_default_pad+0xe8>
   129aa:	e031      	b.n	12a10 <_sercom_get_default_pad+0x140>
   129ac:	4b2b      	ldr	r3, [pc, #172]	; (12a5c <_sercom_get_default_pad+0x18c>)
   129ae:	e030      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129b0:	4b2b      	ldr	r3, [pc, #172]	; (12a60 <_sercom_get_default_pad+0x190>)
   129b2:	e02e      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129b4:	4b2b      	ldr	r3, [pc, #172]	; (12a64 <_sercom_get_default_pad+0x194>)
   129b6:	e02c      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129b8:	4b2b      	ldr	r3, [pc, #172]	; (12a68 <_sercom_get_default_pad+0x198>)
   129ba:	e02a      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129bc:	1cfb      	adds	r3, r7, #3
   129be:	781b      	ldrb	r3, [r3, #0]
   129c0:	2b01      	cmp	r3, #1
   129c2:	d00a      	beq.n	129da <_sercom_get_default_pad+0x10a>
   129c4:	dc02      	bgt.n	129cc <_sercom_get_default_pad+0xfc>
   129c6:	2b00      	cmp	r3, #0
   129c8:	d005      	beq.n	129d6 <_sercom_get_default_pad+0x106>
   129ca:	e021      	b.n	12a10 <_sercom_get_default_pad+0x140>
   129cc:	2b02      	cmp	r3, #2
   129ce:	d006      	beq.n	129de <_sercom_get_default_pad+0x10e>
   129d0:	2b03      	cmp	r3, #3
   129d2:	d006      	beq.n	129e2 <_sercom_get_default_pad+0x112>
   129d4:	e01c      	b.n	12a10 <_sercom_get_default_pad+0x140>
   129d6:	4b25      	ldr	r3, [pc, #148]	; (12a6c <_sercom_get_default_pad+0x19c>)
   129d8:	e01b      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129da:	4b25      	ldr	r3, [pc, #148]	; (12a70 <_sercom_get_default_pad+0x1a0>)
   129dc:	e019      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129de:	4b25      	ldr	r3, [pc, #148]	; (12a74 <_sercom_get_default_pad+0x1a4>)
   129e0:	e017      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129e2:	4b25      	ldr	r3, [pc, #148]	; (12a78 <_sercom_get_default_pad+0x1a8>)
   129e4:	e015      	b.n	12a12 <_sercom_get_default_pad+0x142>
   129e6:	1cfb      	adds	r3, r7, #3
   129e8:	781b      	ldrb	r3, [r3, #0]
   129ea:	2b01      	cmp	r3, #1
   129ec:	d00a      	beq.n	12a04 <_sercom_get_default_pad+0x134>
   129ee:	dc02      	bgt.n	129f6 <_sercom_get_default_pad+0x126>
   129f0:	2b00      	cmp	r3, #0
   129f2:	d005      	beq.n	12a00 <_sercom_get_default_pad+0x130>
   129f4:	e00c      	b.n	12a10 <_sercom_get_default_pad+0x140>
   129f6:	2b02      	cmp	r3, #2
   129f8:	d006      	beq.n	12a08 <_sercom_get_default_pad+0x138>
   129fa:	2b03      	cmp	r3, #3
   129fc:	d006      	beq.n	12a0c <_sercom_get_default_pad+0x13c>
   129fe:	e007      	b.n	12a10 <_sercom_get_default_pad+0x140>
   12a00:	4b1e      	ldr	r3, [pc, #120]	; (12a7c <_sercom_get_default_pad+0x1ac>)
   12a02:	e006      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12a04:	4b1e      	ldr	r3, [pc, #120]	; (12a80 <_sercom_get_default_pad+0x1b0>)
   12a06:	e004      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12a08:	4b1e      	ldr	r3, [pc, #120]	; (12a84 <_sercom_get_default_pad+0x1b4>)
   12a0a:	e002      	b.n	12a12 <_sercom_get_default_pad+0x142>
   12a0c:	4b1e      	ldr	r3, [pc, #120]	; (12a88 <_sercom_get_default_pad+0x1b8>)
   12a0e:	e000      	b.n	12a12 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
   12a10:	2300      	movs	r3, #0
}
   12a12:	0018      	movs	r0, r3
   12a14:	46bd      	mov	sp, r7
   12a16:	b002      	add	sp, #8
   12a18:	bd80      	pop	{r7, pc}
   12a1a:	46c0      	nop			; (mov r8, r8)
   12a1c:	42000800 	.word	0x42000800
   12a20:	42000400 	.word	0x42000400
   12a24:	42001000 	.word	0x42001000
   12a28:	43000400 	.word	0x43000400
   12a2c:	42000c00 	.word	0x42000c00
   12a30:	00040003 	.word	0x00040003
   12a34:	00050003 	.word	0x00050003
   12a38:	00060003 	.word	0x00060003
   12a3c:	00070003 	.word	0x00070003
   12a40:	00010003 	.word	0x00010003
   12a44:	001e0003 	.word	0x001e0003
   12a48:	001f0003 	.word	0x001f0003
   12a4c:	00080003 	.word	0x00080003
   12a50:	00090003 	.word	0x00090003
   12a54:	000a0003 	.word	0x000a0003
   12a58:	000b0003 	.word	0x000b0003
   12a5c:	00100003 	.word	0x00100003
   12a60:	00110003 	.word	0x00110003
   12a64:	00120003 	.word	0x00120003
   12a68:	00130003 	.word	0x00130003
   12a6c:	000c0003 	.word	0x000c0003
   12a70:	000d0003 	.word	0x000d0003
   12a74:	000e0003 	.word	0x000e0003
   12a78:	000f0003 	.word	0x000f0003
   12a7c:	00160003 	.word	0x00160003
   12a80:	00170003 	.word	0x00170003
   12a84:	00180003 	.word	0x00180003
   12a88:	00190003 	.word	0x00190003

00012a8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   12a8c:	b590      	push	{r4, r7, lr}
   12a8e:	b08b      	sub	sp, #44	; 0x2c
   12a90:	af00      	add	r7, sp, #0
   12a92:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   12a94:	230c      	movs	r3, #12
   12a96:	18fb      	adds	r3, r7, r3
   12a98:	4a0f      	ldr	r2, [pc, #60]	; (12ad8 <_sercom_get_sercom_inst_index+0x4c>)
   12a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
   12a9c:	c313      	stmia	r3!, {r0, r1, r4}
   12a9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   12aa0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12aa2:	2300      	movs	r3, #0
   12aa4:	627b      	str	r3, [r7, #36]	; 0x24
   12aa6:	e00e      	b.n	12ac6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   12aa8:	230c      	movs	r3, #12
   12aaa:	18fb      	adds	r3, r7, r3
   12aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12aae:	0092      	lsls	r2, r2, #2
   12ab0:	58d3      	ldr	r3, [r2, r3]
   12ab2:	001a      	movs	r2, r3
   12ab4:	687b      	ldr	r3, [r7, #4]
   12ab6:	429a      	cmp	r2, r3
   12ab8:	d102      	bne.n	12ac0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   12aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12abc:	b2db      	uxtb	r3, r3
   12abe:	e006      	b.n	12ace <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ac2:	3301      	adds	r3, #1
   12ac4:	627b      	str	r3, [r7, #36]	; 0x24
   12ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ac8:	2b05      	cmp	r3, #5
   12aca:	d9ed      	bls.n	12aa8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   12acc:	2300      	movs	r3, #0
}
   12ace:	0018      	movs	r0, r3
   12ad0:	46bd      	mov	sp, r7
   12ad2:	b00b      	add	sp, #44	; 0x2c
   12ad4:	bd90      	pop	{r4, r7, pc}
   12ad6:	46c0      	nop			; (mov r8, r8)
   12ad8:	0001cc04 	.word	0x0001cc04

00012adc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   12adc:	b580      	push	{r7, lr}
   12ade:	b082      	sub	sp, #8
   12ae0:	af00      	add	r7, sp, #0
   12ae2:	0002      	movs	r2, r0
   12ae4:	1dfb      	adds	r3, r7, #7
   12ae6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   12ae8:	46c0      	nop			; (mov r8, r8)
   12aea:	46bd      	mov	sp, r7
   12aec:	b002      	add	sp, #8
   12aee:	bd80      	pop	{r7, pc}

00012af0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   12af0:	b580      	push	{r7, lr}
   12af2:	b084      	sub	sp, #16
   12af4:	af00      	add	r7, sp, #0
   12af6:	0002      	movs	r2, r0
   12af8:	6039      	str	r1, [r7, #0]
   12afa:	1dfb      	adds	r3, r7, #7
   12afc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   12afe:	4b13      	ldr	r3, [pc, #76]	; (12b4c <_sercom_set_handler+0x5c>)
   12b00:	781b      	ldrb	r3, [r3, #0]
   12b02:	2201      	movs	r2, #1
   12b04:	4053      	eors	r3, r2
   12b06:	b2db      	uxtb	r3, r3
   12b08:	2b00      	cmp	r3, #0
   12b0a:	d015      	beq.n	12b38 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12b0c:	2300      	movs	r3, #0
   12b0e:	60fb      	str	r3, [r7, #12]
   12b10:	e00c      	b.n	12b2c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   12b12:	4b0f      	ldr	r3, [pc, #60]	; (12b50 <_sercom_set_handler+0x60>)
   12b14:	68fa      	ldr	r2, [r7, #12]
   12b16:	0092      	lsls	r2, r2, #2
   12b18:	490e      	ldr	r1, [pc, #56]	; (12b54 <_sercom_set_handler+0x64>)
   12b1a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   12b1c:	4b0e      	ldr	r3, [pc, #56]	; (12b58 <_sercom_set_handler+0x68>)
   12b1e:	68fa      	ldr	r2, [r7, #12]
   12b20:	0092      	lsls	r2, r2, #2
   12b22:	2100      	movs	r1, #0
   12b24:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12b26:	68fb      	ldr	r3, [r7, #12]
   12b28:	3301      	adds	r3, #1
   12b2a:	60fb      	str	r3, [r7, #12]
   12b2c:	68fb      	ldr	r3, [r7, #12]
   12b2e:	2b05      	cmp	r3, #5
   12b30:	d9ef      	bls.n	12b12 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   12b32:	4b06      	ldr	r3, [pc, #24]	; (12b4c <_sercom_set_handler+0x5c>)
   12b34:	2201      	movs	r2, #1
   12b36:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   12b38:	1dfb      	adds	r3, r7, #7
   12b3a:	781a      	ldrb	r2, [r3, #0]
   12b3c:	4b04      	ldr	r3, [pc, #16]	; (12b50 <_sercom_set_handler+0x60>)
   12b3e:	0092      	lsls	r2, r2, #2
   12b40:	6839      	ldr	r1, [r7, #0]
   12b42:	50d1      	str	r1, [r2, r3]
}
   12b44:	46c0      	nop			; (mov r8, r8)
   12b46:	46bd      	mov	sp, r7
   12b48:	b004      	add	sp, #16
   12b4a:	bd80      	pop	{r7, pc}
   12b4c:	200007ce 	.word	0x200007ce
   12b50:	200007d0 	.word	0x200007d0
   12b54:	00012add 	.word	0x00012add
   12b58:	200015d4 	.word	0x200015d4

00012b5c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   12b5c:	b590      	push	{r4, r7, lr}
   12b5e:	b085      	sub	sp, #20
   12b60:	af00      	add	r7, sp, #0
   12b62:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   12b64:	2308      	movs	r3, #8
   12b66:	18fb      	adds	r3, r7, r3
   12b68:	4a0b      	ldr	r2, [pc, #44]	; (12b98 <_sercom_get_interrupt_vector+0x3c>)
   12b6a:	6811      	ldr	r1, [r2, #0]
   12b6c:	6019      	str	r1, [r3, #0]
   12b6e:	8892      	ldrh	r2, [r2, #4]
   12b70:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   12b72:	230f      	movs	r3, #15
   12b74:	18fc      	adds	r4, r7, r3
   12b76:	687b      	ldr	r3, [r7, #4]
   12b78:	0018      	movs	r0, r3
   12b7a:	4b08      	ldr	r3, [pc, #32]	; (12b9c <_sercom_get_interrupt_vector+0x40>)
   12b7c:	4798      	blx	r3
   12b7e:	0003      	movs	r3, r0
   12b80:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   12b82:	230f      	movs	r3, #15
   12b84:	18fb      	adds	r3, r7, r3
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	2208      	movs	r2, #8
   12b8a:	18ba      	adds	r2, r7, r2
   12b8c:	5cd3      	ldrb	r3, [r2, r3]
   12b8e:	b25b      	sxtb	r3, r3
}
   12b90:	0018      	movs	r0, r3
   12b92:	46bd      	mov	sp, r7
   12b94:	b005      	add	sp, #20
   12b96:	bd90      	pop	{r4, r7, pc}
   12b98:	0001cc1c 	.word	0x0001cc1c
   12b9c:	00012a8d 	.word	0x00012a8d

00012ba0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   12ba0:	b580      	push	{r7, lr}
   12ba2:	af00      	add	r7, sp, #0
   12ba4:	4b03      	ldr	r3, [pc, #12]	; (12bb4 <SERCOM0_Handler+0x14>)
   12ba6:	681b      	ldr	r3, [r3, #0]
   12ba8:	2000      	movs	r0, #0
   12baa:	4798      	blx	r3
   12bac:	46c0      	nop			; (mov r8, r8)
   12bae:	46bd      	mov	sp, r7
   12bb0:	bd80      	pop	{r7, pc}
   12bb2:	46c0      	nop			; (mov r8, r8)
   12bb4:	200007d0 	.word	0x200007d0

00012bb8 <SERCOM1_Handler>:
   12bb8:	b580      	push	{r7, lr}
   12bba:	af00      	add	r7, sp, #0
   12bbc:	4b03      	ldr	r3, [pc, #12]	; (12bcc <SERCOM1_Handler+0x14>)
   12bbe:	685b      	ldr	r3, [r3, #4]
   12bc0:	2001      	movs	r0, #1
   12bc2:	4798      	blx	r3
   12bc4:	46c0      	nop			; (mov r8, r8)
   12bc6:	46bd      	mov	sp, r7
   12bc8:	bd80      	pop	{r7, pc}
   12bca:	46c0      	nop			; (mov r8, r8)
   12bcc:	200007d0 	.word	0x200007d0

00012bd0 <SERCOM2_Handler>:
   12bd0:	b580      	push	{r7, lr}
   12bd2:	af00      	add	r7, sp, #0
   12bd4:	4b03      	ldr	r3, [pc, #12]	; (12be4 <SERCOM2_Handler+0x14>)
   12bd6:	689b      	ldr	r3, [r3, #8]
   12bd8:	2002      	movs	r0, #2
   12bda:	4798      	blx	r3
   12bdc:	46c0      	nop			; (mov r8, r8)
   12bde:	46bd      	mov	sp, r7
   12be0:	bd80      	pop	{r7, pc}
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	200007d0 	.word	0x200007d0

00012be8 <SERCOM3_Handler>:
   12be8:	b580      	push	{r7, lr}
   12bea:	af00      	add	r7, sp, #0
   12bec:	4b03      	ldr	r3, [pc, #12]	; (12bfc <SERCOM3_Handler+0x14>)
   12bee:	68db      	ldr	r3, [r3, #12]
   12bf0:	2003      	movs	r0, #3
   12bf2:	4798      	blx	r3
   12bf4:	46c0      	nop			; (mov r8, r8)
   12bf6:	46bd      	mov	sp, r7
   12bf8:	bd80      	pop	{r7, pc}
   12bfa:	46c0      	nop			; (mov r8, r8)
   12bfc:	200007d0 	.word	0x200007d0

00012c00 <SERCOM4_Handler>:
   12c00:	b580      	push	{r7, lr}
   12c02:	af00      	add	r7, sp, #0
   12c04:	4b03      	ldr	r3, [pc, #12]	; (12c14 <SERCOM4_Handler+0x14>)
   12c06:	691b      	ldr	r3, [r3, #16]
   12c08:	2004      	movs	r0, #4
   12c0a:	4798      	blx	r3
   12c0c:	46c0      	nop			; (mov r8, r8)
   12c0e:	46bd      	mov	sp, r7
   12c10:	bd80      	pop	{r7, pc}
   12c12:	46c0      	nop			; (mov r8, r8)
   12c14:	200007d0 	.word	0x200007d0

00012c18 <SERCOM5_Handler>:
   12c18:	b580      	push	{r7, lr}
   12c1a:	af00      	add	r7, sp, #0
   12c1c:	4b03      	ldr	r3, [pc, #12]	; (12c2c <SERCOM5_Handler+0x14>)
   12c1e:	695b      	ldr	r3, [r3, #20]
   12c20:	2005      	movs	r0, #5
   12c22:	4798      	blx	r3
   12c24:	46c0      	nop			; (mov r8, r8)
   12c26:	46bd      	mov	sp, r7
   12c28:	bd80      	pop	{r7, pc}
   12c2a:	46c0      	nop			; (mov r8, r8)
   12c2c:	200007d0 	.word	0x200007d0

00012c30 <system_pinmux_get_config_defaults>:
{
   12c30:	b580      	push	{r7, lr}
   12c32:	b082      	sub	sp, #8
   12c34:	af00      	add	r7, sp, #0
   12c36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12c38:	687b      	ldr	r3, [r7, #4]
   12c3a:	2280      	movs	r2, #128	; 0x80
   12c3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12c3e:	687b      	ldr	r3, [r7, #4]
   12c40:	2200      	movs	r2, #0
   12c42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12c44:	687b      	ldr	r3, [r7, #4]
   12c46:	2201      	movs	r2, #1
   12c48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12c4a:	687b      	ldr	r3, [r7, #4]
   12c4c:	2200      	movs	r2, #0
   12c4e:	70da      	strb	r2, [r3, #3]
}
   12c50:	46c0      	nop			; (mov r8, r8)
   12c52:	46bd      	mov	sp, r7
   12c54:	b002      	add	sp, #8
   12c56:	bd80      	pop	{r7, pc}

00012c58 <system_pinmux_get_group_from_gpio_pin>:
{
   12c58:	b580      	push	{r7, lr}
   12c5a:	b084      	sub	sp, #16
   12c5c:	af00      	add	r7, sp, #0
   12c5e:	0002      	movs	r2, r0
   12c60:	1dfb      	adds	r3, r7, #7
   12c62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12c64:	230f      	movs	r3, #15
   12c66:	18fb      	adds	r3, r7, r3
   12c68:	1dfa      	adds	r2, r7, #7
   12c6a:	7812      	ldrb	r2, [r2, #0]
   12c6c:	09d2      	lsrs	r2, r2, #7
   12c6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12c70:	230e      	movs	r3, #14
   12c72:	18fb      	adds	r3, r7, r3
   12c74:	1dfa      	adds	r2, r7, #7
   12c76:	7812      	ldrb	r2, [r2, #0]
   12c78:	0952      	lsrs	r2, r2, #5
   12c7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12c7c:	4b0d      	ldr	r3, [pc, #52]	; (12cb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   12c7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   12c80:	230f      	movs	r3, #15
   12c82:	18fb      	adds	r3, r7, r3
   12c84:	781b      	ldrb	r3, [r3, #0]
   12c86:	2b00      	cmp	r3, #0
   12c88:	d10f      	bne.n	12caa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   12c8a:	230f      	movs	r3, #15
   12c8c:	18fb      	adds	r3, r7, r3
   12c8e:	781b      	ldrb	r3, [r3, #0]
   12c90:	009b      	lsls	r3, r3, #2
   12c92:	2210      	movs	r2, #16
   12c94:	4694      	mov	ip, r2
   12c96:	44bc      	add	ip, r7
   12c98:	4463      	add	r3, ip
   12c9a:	3b08      	subs	r3, #8
   12c9c:	681a      	ldr	r2, [r3, #0]
   12c9e:	230e      	movs	r3, #14
   12ca0:	18fb      	adds	r3, r7, r3
   12ca2:	781b      	ldrb	r3, [r3, #0]
   12ca4:	01db      	lsls	r3, r3, #7
   12ca6:	18d3      	adds	r3, r2, r3
   12ca8:	e000      	b.n	12cac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   12caa:	2300      	movs	r3, #0
}
   12cac:	0018      	movs	r0, r3
   12cae:	46bd      	mov	sp, r7
   12cb0:	b004      	add	sp, #16
   12cb2:	bd80      	pop	{r7, pc}
   12cb4:	40002800 	.word	0x40002800

00012cb8 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   12cb8:	b580      	push	{r7, lr}
   12cba:	b086      	sub	sp, #24
   12cbc:	af00      	add	r7, sp, #0
   12cbe:	0002      	movs	r2, r0
   12cc0:	1dfb      	adds	r3, r7, #7
   12cc2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12cc4:	1dfb      	adds	r3, r7, #7
   12cc6:	781b      	ldrb	r3, [r3, #0]
   12cc8:	0018      	movs	r0, r3
   12cca:	4b19      	ldr	r3, [pc, #100]	; (12d30 <system_pinmux_pin_get_mux_position+0x78>)
   12ccc:	4798      	blx	r3
   12cce:	0003      	movs	r3, r0
   12cd0:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   12cd2:	1dfb      	adds	r3, r7, #7
   12cd4:	781b      	ldrb	r3, [r3, #0]
   12cd6:	221f      	movs	r2, #31
   12cd8:	4013      	ands	r3, r2
   12cda:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   12cdc:	697a      	ldr	r2, [r7, #20]
   12cde:	2140      	movs	r1, #64	; 0x40
   12ce0:	693b      	ldr	r3, [r7, #16]
   12ce2:	18d3      	adds	r3, r2, r3
   12ce4:	185b      	adds	r3, r3, r1
   12ce6:	781b      	ldrb	r3, [r3, #0]
   12ce8:	b2db      	uxtb	r3, r3
   12cea:	001a      	movs	r2, r3
   12cec:	2301      	movs	r3, #1
   12cee:	4013      	ands	r3, r2
   12cf0:	d101      	bne.n	12cf6 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   12cf2:	2380      	movs	r3, #128	; 0x80
   12cf4:	e018      	b.n	12d28 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   12cf6:	693b      	ldr	r3, [r7, #16]
   12cf8:	085b      	lsrs	r3, r3, #1
   12cfa:	697a      	ldr	r2, [r7, #20]
   12cfc:	2130      	movs	r1, #48	; 0x30
   12cfe:	18d3      	adds	r3, r2, r3
   12d00:	185b      	adds	r3, r3, r1
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	b2db      	uxtb	r3, r3
   12d06:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   12d08:	693b      	ldr	r3, [r7, #16]
   12d0a:	2201      	movs	r2, #1
   12d0c:	4013      	ands	r3, r2
   12d0e:	d006      	beq.n	12d1e <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   12d10:	68fb      	ldr	r3, [r7, #12]
   12d12:	091b      	lsrs	r3, r3, #4
   12d14:	b2db      	uxtb	r3, r3
   12d16:	220f      	movs	r2, #15
   12d18:	4013      	ands	r3, r2
   12d1a:	b2db      	uxtb	r3, r3
   12d1c:	e004      	b.n	12d28 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   12d1e:	68fb      	ldr	r3, [r7, #12]
   12d20:	b2db      	uxtb	r3, r3
   12d22:	220f      	movs	r2, #15
   12d24:	4013      	ands	r3, r2
   12d26:	b2db      	uxtb	r3, r3
	}
}
   12d28:	0018      	movs	r0, r3
   12d2a:	46bd      	mov	sp, r7
   12d2c:	b006      	add	sp, #24
   12d2e:	bd80      	pop	{r7, pc}
   12d30:	00012c59 	.word	0x00012c59

00012d34 <port_get_group_from_gpio_pin>:
{
   12d34:	b580      	push	{r7, lr}
   12d36:	b082      	sub	sp, #8
   12d38:	af00      	add	r7, sp, #0
   12d3a:	0002      	movs	r2, r0
   12d3c:	1dfb      	adds	r3, r7, #7
   12d3e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12d40:	1dfb      	adds	r3, r7, #7
   12d42:	781b      	ldrb	r3, [r3, #0]
   12d44:	0018      	movs	r0, r3
   12d46:	4b03      	ldr	r3, [pc, #12]	; (12d54 <port_get_group_from_gpio_pin+0x20>)
   12d48:	4798      	blx	r3
   12d4a:	0003      	movs	r3, r0
}
   12d4c:	0018      	movs	r0, r3
   12d4e:	46bd      	mov	sp, r7
   12d50:	b002      	add	sp, #8
   12d52:	bd80      	pop	{r7, pc}
   12d54:	00012c59 	.word	0x00012c59

00012d58 <port_pin_set_output_level>:
{
   12d58:	b580      	push	{r7, lr}
   12d5a:	b084      	sub	sp, #16
   12d5c:	af00      	add	r7, sp, #0
   12d5e:	0002      	movs	r2, r0
   12d60:	1dfb      	adds	r3, r7, #7
   12d62:	701a      	strb	r2, [r3, #0]
   12d64:	1dbb      	adds	r3, r7, #6
   12d66:	1c0a      	adds	r2, r1, #0
   12d68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12d6a:	1dfb      	adds	r3, r7, #7
   12d6c:	781b      	ldrb	r3, [r3, #0]
   12d6e:	0018      	movs	r0, r3
   12d70:	4b0d      	ldr	r3, [pc, #52]	; (12da8 <port_pin_set_output_level+0x50>)
   12d72:	4798      	blx	r3
   12d74:	0003      	movs	r3, r0
   12d76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12d78:	1dfb      	adds	r3, r7, #7
   12d7a:	781b      	ldrb	r3, [r3, #0]
   12d7c:	221f      	movs	r2, #31
   12d7e:	4013      	ands	r3, r2
   12d80:	2201      	movs	r2, #1
   12d82:	409a      	lsls	r2, r3
   12d84:	0013      	movs	r3, r2
   12d86:	60bb      	str	r3, [r7, #8]
	if (level) {
   12d88:	1dbb      	adds	r3, r7, #6
   12d8a:	781b      	ldrb	r3, [r3, #0]
   12d8c:	2b00      	cmp	r3, #0
   12d8e:	d003      	beq.n	12d98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   12d90:	68fb      	ldr	r3, [r7, #12]
   12d92:	68ba      	ldr	r2, [r7, #8]
   12d94:	619a      	str	r2, [r3, #24]
}
   12d96:	e002      	b.n	12d9e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   12d98:	68fb      	ldr	r3, [r7, #12]
   12d9a:	68ba      	ldr	r2, [r7, #8]
   12d9c:	615a      	str	r2, [r3, #20]
}
   12d9e:	46c0      	nop			; (mov r8, r8)
   12da0:	46bd      	mov	sp, r7
   12da2:	b004      	add	sp, #16
   12da4:	bd80      	pop	{r7, pc}
   12da6:	46c0      	nop			; (mov r8, r8)
   12da8:	00012d35 	.word	0x00012d35

00012dac <system_gclk_chan_get_config_defaults>:
{
   12dac:	b580      	push	{r7, lr}
   12dae:	b082      	sub	sp, #8
   12db0:	af00      	add	r7, sp, #0
   12db2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12db4:	687b      	ldr	r3, [r7, #4]
   12db6:	2200      	movs	r2, #0
   12db8:	701a      	strb	r2, [r3, #0]
}
   12dba:	46c0      	nop			; (mov r8, r8)
   12dbc:	46bd      	mov	sp, r7
   12dbe:	b002      	add	sp, #8
   12dc0:	bd80      	pop	{r7, pc}
	...

00012dc4 <system_apb_clock_set_mask>:
{
   12dc4:	b580      	push	{r7, lr}
   12dc6:	b082      	sub	sp, #8
   12dc8:	af00      	add	r7, sp, #0
   12dca:	0002      	movs	r2, r0
   12dcc:	6039      	str	r1, [r7, #0]
   12dce:	1dfb      	adds	r3, r7, #7
   12dd0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12dd2:	1dfb      	adds	r3, r7, #7
   12dd4:	781b      	ldrb	r3, [r3, #0]
   12dd6:	2b04      	cmp	r3, #4
   12dd8:	d827      	bhi.n	12e2a <system_apb_clock_set_mask+0x66>
   12dda:	009a      	lsls	r2, r3, #2
   12ddc:	4b16      	ldr	r3, [pc, #88]	; (12e38 <system_apb_clock_set_mask+0x74>)
   12dde:	18d3      	adds	r3, r2, r3
   12de0:	681b      	ldr	r3, [r3, #0]
   12de2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   12de4:	4b15      	ldr	r3, [pc, #84]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12de6:	4a15      	ldr	r2, [pc, #84]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12de8:	6951      	ldr	r1, [r2, #20]
   12dea:	683a      	ldr	r2, [r7, #0]
   12dec:	430a      	orrs	r2, r1
   12dee:	615a      	str	r2, [r3, #20]
			break;
   12df0:	e01d      	b.n	12e2e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   12df2:	4b12      	ldr	r3, [pc, #72]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12df4:	4a11      	ldr	r2, [pc, #68]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12df6:	6991      	ldr	r1, [r2, #24]
   12df8:	683a      	ldr	r2, [r7, #0]
   12dfa:	430a      	orrs	r2, r1
   12dfc:	619a      	str	r2, [r3, #24]
			break;
   12dfe:	e016      	b.n	12e2e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   12e00:	4b0e      	ldr	r3, [pc, #56]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e02:	4a0e      	ldr	r2, [pc, #56]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e04:	69d1      	ldr	r1, [r2, #28]
   12e06:	683a      	ldr	r2, [r7, #0]
   12e08:	430a      	orrs	r2, r1
   12e0a:	61da      	str	r2, [r3, #28]
			break;
   12e0c:	e00f      	b.n	12e2e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   12e0e:	4b0b      	ldr	r3, [pc, #44]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e10:	4a0a      	ldr	r2, [pc, #40]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e12:	6a11      	ldr	r1, [r2, #32]
   12e14:	683a      	ldr	r2, [r7, #0]
   12e16:	430a      	orrs	r2, r1
   12e18:	621a      	str	r2, [r3, #32]
			break;
   12e1a:	e008      	b.n	12e2e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   12e1c:	4b07      	ldr	r3, [pc, #28]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e1e:	4a07      	ldr	r2, [pc, #28]	; (12e3c <system_apb_clock_set_mask+0x78>)
   12e20:	6a51      	ldr	r1, [r2, #36]	; 0x24
   12e22:	683a      	ldr	r2, [r7, #0]
   12e24:	430a      	orrs	r2, r1
   12e26:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   12e28:	e001      	b.n	12e2e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   12e2a:	2317      	movs	r3, #23
   12e2c:	e000      	b.n	12e30 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   12e2e:	2300      	movs	r3, #0
}
   12e30:	0018      	movs	r0, r3
   12e32:	46bd      	mov	sp, r7
   12e34:	b002      	add	sp, #8
   12e36:	bd80      	pop	{r7, pc}
   12e38:	0001cc24 	.word	0x0001cc24
   12e3c:	40000400 	.word	0x40000400

00012e40 <system_is_debugger_present>:
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   12e44:	4b05      	ldr	r3, [pc, #20]	; (12e5c <system_is_debugger_present+0x1c>)
   12e46:	789b      	ldrb	r3, [r3, #2]
   12e48:	b2db      	uxtb	r3, r3
   12e4a:	001a      	movs	r2, r3
   12e4c:	2302      	movs	r3, #2
   12e4e:	4013      	ands	r3, r2
   12e50:	1e5a      	subs	r2, r3, #1
   12e52:	4193      	sbcs	r3, r2
   12e54:	b2db      	uxtb	r3, r3
}
   12e56:	0018      	movs	r0, r3
   12e58:	46bd      	mov	sp, r7
   12e5a:	bd80      	pop	{r7, pc}
   12e5c:	41002000 	.word	0x41002000

00012e60 <spi_is_ready_to_write>:
{
   12e60:	b580      	push	{r7, lr}
   12e62:	b084      	sub	sp, #16
   12e64:	af00      	add	r7, sp, #0
   12e66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	681b      	ldr	r3, [r3, #0]
   12e6c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12e6e:	68fb      	ldr	r3, [r7, #12]
   12e70:	7e1b      	ldrb	r3, [r3, #24]
   12e72:	b2db      	uxtb	r3, r3
   12e74:	001a      	movs	r2, r3
   12e76:	2301      	movs	r3, #1
   12e78:	4013      	ands	r3, r2
   12e7a:	1e5a      	subs	r2, r3, #1
   12e7c:	4193      	sbcs	r3, r2
   12e7e:	b2db      	uxtb	r3, r3
}
   12e80:	0018      	movs	r0, r3
   12e82:	46bd      	mov	sp, r7
   12e84:	b004      	add	sp, #16
   12e86:	bd80      	pop	{r7, pc}

00012e88 <spi_is_ready_to_read>:
{
   12e88:	b580      	push	{r7, lr}
   12e8a:	b084      	sub	sp, #16
   12e8c:	af00      	add	r7, sp, #0
   12e8e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12e90:	687b      	ldr	r3, [r7, #4]
   12e92:	681b      	ldr	r3, [r3, #0]
   12e94:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   12e96:	68fb      	ldr	r3, [r7, #12]
   12e98:	7e1b      	ldrb	r3, [r3, #24]
   12e9a:	b2db      	uxtb	r3, r3
   12e9c:	001a      	movs	r2, r3
   12e9e:	2304      	movs	r3, #4
   12ea0:	4013      	ands	r3, r2
   12ea2:	1e5a      	subs	r2, r3, #1
   12ea4:	4193      	sbcs	r3, r2
   12ea6:	b2db      	uxtb	r3, r3
}
   12ea8:	0018      	movs	r0, r3
   12eaa:	46bd      	mov	sp, r7
   12eac:	b004      	add	sp, #16
   12eae:	bd80      	pop	{r7, pc}

00012eb0 <spi_write>:
{
   12eb0:	b580      	push	{r7, lr}
   12eb2:	b084      	sub	sp, #16
   12eb4:	af00      	add	r7, sp, #0
   12eb6:	6078      	str	r0, [r7, #4]
   12eb8:	000a      	movs	r2, r1
   12eba:	1cbb      	adds	r3, r7, #2
   12ebc:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12ebe:	687b      	ldr	r3, [r7, #4]
   12ec0:	681b      	ldr	r3, [r3, #0]
   12ec2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   12ec4:	687b      	ldr	r3, [r7, #4]
   12ec6:	0018      	movs	r0, r3
   12ec8:	4b0a      	ldr	r3, [pc, #40]	; (12ef4 <spi_write+0x44>)
   12eca:	4798      	blx	r3
   12ecc:	0003      	movs	r3, r0
   12ece:	001a      	movs	r2, r3
   12ed0:	2301      	movs	r3, #1
   12ed2:	4053      	eors	r3, r2
   12ed4:	b2db      	uxtb	r3, r3
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d001      	beq.n	12ede <spi_write+0x2e>
		return STATUS_BUSY;
   12eda:	2305      	movs	r3, #5
   12edc:	e006      	b.n	12eec <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12ede:	1cbb      	adds	r3, r7, #2
   12ee0:	881b      	ldrh	r3, [r3, #0]
   12ee2:	05db      	lsls	r3, r3, #23
   12ee4:	0dda      	lsrs	r2, r3, #23
   12ee6:	68fb      	ldr	r3, [r7, #12]
   12ee8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   12eea:	2300      	movs	r3, #0
}
   12eec:	0018      	movs	r0, r3
   12eee:	46bd      	mov	sp, r7
   12ef0:	b004      	add	sp, #16
   12ef2:	bd80      	pop	{r7, pc}
   12ef4:	00012e61 	.word	0x00012e61

00012ef8 <spi_read>:
{
   12ef8:	b580      	push	{r7, lr}
   12efa:	b084      	sub	sp, #16
   12efc:	af00      	add	r7, sp, #0
   12efe:	6078      	str	r0, [r7, #4]
   12f00:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12f02:	687b      	ldr	r3, [r7, #4]
   12f04:	681b      	ldr	r3, [r3, #0]
   12f06:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	0018      	movs	r0, r3
   12f0c:	4b1b      	ldr	r3, [pc, #108]	; (12f7c <spi_read+0x84>)
   12f0e:	4798      	blx	r3
   12f10:	0003      	movs	r3, r0
   12f12:	001a      	movs	r2, r3
   12f14:	2301      	movs	r3, #1
   12f16:	4053      	eors	r3, r2
   12f18:	b2db      	uxtb	r3, r3
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d001      	beq.n	12f22 <spi_read+0x2a>
		return STATUS_ERR_IO;
   12f1e:	2310      	movs	r3, #16
   12f20:	e027      	b.n	12f72 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   12f22:	230f      	movs	r3, #15
   12f24:	18fb      	adds	r3, r7, r3
   12f26:	2200      	movs	r2, #0
   12f28:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12f2a:	68bb      	ldr	r3, [r7, #8]
   12f2c:	8b5b      	ldrh	r3, [r3, #26]
   12f2e:	b29b      	uxth	r3, r3
   12f30:	001a      	movs	r2, r3
   12f32:	2304      	movs	r3, #4
   12f34:	4013      	ands	r3, r2
   12f36:	d006      	beq.n	12f46 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   12f38:	230f      	movs	r3, #15
   12f3a:	18fb      	adds	r3, r7, r3
   12f3c:	221e      	movs	r2, #30
   12f3e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   12f40:	68bb      	ldr	r3, [r7, #8]
   12f42:	2204      	movs	r2, #4
   12f44:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12f46:	687b      	ldr	r3, [r7, #4]
   12f48:	799b      	ldrb	r3, [r3, #6]
   12f4a:	2b01      	cmp	r3, #1
   12f4c:	d108      	bne.n	12f60 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12f4e:	68bb      	ldr	r3, [r7, #8]
   12f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f52:	b29b      	uxth	r3, r3
   12f54:	05db      	lsls	r3, r3, #23
   12f56:	0ddb      	lsrs	r3, r3, #23
   12f58:	b29a      	uxth	r2, r3
   12f5a:	683b      	ldr	r3, [r7, #0]
   12f5c:	801a      	strh	r2, [r3, #0]
   12f5e:	e005      	b.n	12f6c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12f60:	68bb      	ldr	r3, [r7, #8]
   12f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f64:	b2db      	uxtb	r3, r3
   12f66:	b29a      	uxth	r2, r3
   12f68:	683b      	ldr	r3, [r7, #0]
   12f6a:	801a      	strh	r2, [r3, #0]
	return retval;
   12f6c:	230f      	movs	r3, #15
   12f6e:	18fb      	adds	r3, r7, r3
   12f70:	781b      	ldrb	r3, [r3, #0]
}
   12f72:	0018      	movs	r0, r3
   12f74:	46bd      	mov	sp, r7
   12f76:	b004      	add	sp, #16
   12f78:	bd80      	pop	{r7, pc}
   12f7a:	46c0      	nop			; (mov r8, r8)
   12f7c:	00012e89 	.word	0x00012e89

00012f80 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12f80:	b590      	push	{r4, r7, lr}
   12f82:	b093      	sub	sp, #76	; 0x4c
   12f84:	af00      	add	r7, sp, #0
   12f86:	6078      	str	r0, [r7, #4]
   12f88:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	681b      	ldr	r3, [r3, #0]
   12f8e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12f90:	687b      	ldr	r3, [r7, #4]
   12f92:	681b      	ldr	r3, [r3, #0]
   12f94:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12f96:	231c      	movs	r3, #28
   12f98:	18fb      	adds	r3, r7, r3
   12f9a:	0018      	movs	r0, r3
   12f9c:	4b75      	ldr	r3, [pc, #468]	; (13174 <_spi_set_config+0x1f4>)
   12f9e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12fa0:	231c      	movs	r3, #28
   12fa2:	18fb      	adds	r3, r7, r3
   12fa4:	2200      	movs	r2, #0
   12fa6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   12fa8:	683b      	ldr	r3, [r7, #0]
   12faa:	781b      	ldrb	r3, [r3, #0]
   12fac:	2b00      	cmp	r3, #0
   12fae:	d103      	bne.n	12fb8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   12fb0:	231c      	movs	r3, #28
   12fb2:	18fb      	adds	r3, r7, r3
   12fb4:	2200      	movs	r2, #0
   12fb6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12fb8:	683b      	ldr	r3, [r7, #0]
   12fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   12fbc:	230c      	movs	r3, #12
   12fbe:	18fb      	adds	r3, r7, r3
   12fc0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12fc2:	683b      	ldr	r3, [r7, #0]
   12fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   12fc6:	230c      	movs	r3, #12
   12fc8:	18fb      	adds	r3, r7, r3
   12fca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   12fd0:	230c      	movs	r3, #12
   12fd2:	18fb      	adds	r3, r7, r3
   12fd4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   12fd6:	683b      	ldr	r3, [r7, #0]
   12fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   12fda:	230c      	movs	r3, #12
   12fdc:	18fb      	adds	r3, r7, r3
   12fde:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12fe0:	2347      	movs	r3, #71	; 0x47
   12fe2:	18fb      	adds	r3, r7, r3
   12fe4:	2200      	movs	r2, #0
   12fe6:	701a      	strb	r2, [r3, #0]
   12fe8:	e02c      	b.n	13044 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12fea:	2347      	movs	r3, #71	; 0x47
   12fec:	18fb      	adds	r3, r7, r3
   12fee:	781a      	ldrb	r2, [r3, #0]
   12ff0:	230c      	movs	r3, #12
   12ff2:	18fb      	adds	r3, r7, r3
   12ff4:	0092      	lsls	r2, r2, #2
   12ff6:	58d3      	ldr	r3, [r2, r3]
   12ff8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d109      	bne.n	13014 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13000:	2347      	movs	r3, #71	; 0x47
   13002:	18fb      	adds	r3, r7, r3
   13004:	781a      	ldrb	r2, [r3, #0]
   13006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13008:	0011      	movs	r1, r2
   1300a:	0018      	movs	r0, r3
   1300c:	4b5a      	ldr	r3, [pc, #360]	; (13178 <_spi_set_config+0x1f8>)
   1300e:	4798      	blx	r3
   13010:	0003      	movs	r3, r0
   13012:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13016:	3301      	adds	r3, #1
   13018:	d00d      	beq.n	13036 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1301a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1301c:	b2da      	uxtb	r2, r3
   1301e:	231c      	movs	r3, #28
   13020:	18fb      	adds	r3, r7, r3
   13022:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13026:	0c1b      	lsrs	r3, r3, #16
   13028:	b2db      	uxtb	r3, r3
   1302a:	221c      	movs	r2, #28
   1302c:	18ba      	adds	r2, r7, r2
   1302e:	0011      	movs	r1, r2
   13030:	0018      	movs	r0, r3
   13032:	4b52      	ldr	r3, [pc, #328]	; (1317c <_spi_set_config+0x1fc>)
   13034:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   13036:	2347      	movs	r3, #71	; 0x47
   13038:	18fb      	adds	r3, r7, r3
   1303a:	781a      	ldrb	r2, [r3, #0]
   1303c:	2347      	movs	r3, #71	; 0x47
   1303e:	18fb      	adds	r3, r7, r3
   13040:	3201      	adds	r2, #1
   13042:	701a      	strb	r2, [r3, #0]
   13044:	2347      	movs	r3, #71	; 0x47
   13046:	18fb      	adds	r3, r7, r3
   13048:	781b      	ldrb	r3, [r3, #0]
   1304a:	2b03      	cmp	r3, #3
   1304c:	d9cd      	bls.n	12fea <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   1304e:	683b      	ldr	r3, [r7, #0]
   13050:	781a      	ldrb	r2, [r3, #0]
   13052:	687b      	ldr	r3, [r7, #4]
   13054:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   13056:	683b      	ldr	r3, [r7, #0]
   13058:	7c1a      	ldrb	r2, [r3, #16]
   1305a:	687b      	ldr	r3, [r7, #4]
   1305c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   1305e:	683b      	ldr	r3, [r7, #0]
   13060:	7c9a      	ldrb	r2, [r3, #18]
   13062:	687b      	ldr	r3, [r7, #4]
   13064:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   13066:	683b      	ldr	r3, [r7, #0]
   13068:	7d1a      	ldrb	r2, [r3, #20]
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1306e:	230a      	movs	r3, #10
   13070:	18fb      	adds	r3, r7, r3
   13072:	2200      	movs	r2, #0
   13074:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   13076:	2300      	movs	r3, #0
   13078:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   1307a:	2300      	movs	r3, #0
   1307c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   1307e:	683b      	ldr	r3, [r7, #0]
   13080:	781b      	ldrb	r3, [r3, #0]
   13082:	2b01      	cmp	r3, #1
   13084:	d129      	bne.n	130da <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13086:	687b      	ldr	r3, [r7, #4]
   13088:	681b      	ldr	r3, [r3, #0]
   1308a:	0018      	movs	r0, r3
   1308c:	4b3c      	ldr	r3, [pc, #240]	; (13180 <_spi_set_config+0x200>)
   1308e:	4798      	blx	r3
   13090:	0003      	movs	r3, r0
   13092:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13096:	3312      	adds	r3, #18
   13098:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1309c:	b2db      	uxtb	r3, r3
   1309e:	0018      	movs	r0, r3
   130a0:	4b38      	ldr	r3, [pc, #224]	; (13184 <_spi_set_config+0x204>)
   130a2:	4798      	blx	r3
   130a4:	0003      	movs	r3, r0
   130a6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   130a8:	683b      	ldr	r3, [r7, #0]
   130aa:	699b      	ldr	r3, [r3, #24]
   130ac:	2223      	movs	r2, #35	; 0x23
   130ae:	18bc      	adds	r4, r7, r2
   130b0:	220a      	movs	r2, #10
   130b2:	18ba      	adds	r2, r7, r2
   130b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   130b6:	0018      	movs	r0, r3
   130b8:	4b33      	ldr	r3, [pc, #204]	; (13188 <_spi_set_config+0x208>)
   130ba:	4798      	blx	r3
   130bc:	0003      	movs	r3, r0
   130be:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   130c0:	2323      	movs	r3, #35	; 0x23
   130c2:	18fb      	adds	r3, r7, r3
   130c4:	781b      	ldrb	r3, [r3, #0]
   130c6:	2b00      	cmp	r3, #0
   130c8:	d001      	beq.n	130ce <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   130ca:	2317      	movs	r3, #23
   130cc:	e04e      	b.n	1316c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   130ce:	230a      	movs	r3, #10
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	881b      	ldrh	r3, [r3, #0]
   130d4:	b2da      	uxtb	r2, r3
   130d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130d8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   130da:	683b      	ldr	r3, [r7, #0]
   130dc:	685b      	ldr	r3, [r3, #4]
   130de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   130e0:	4313      	orrs	r3, r2
   130e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   130e4:	683b      	ldr	r3, [r7, #0]
   130e6:	689b      	ldr	r3, [r3, #8]
   130e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   130ea:	4313      	orrs	r3, r2
   130ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   130ee:	683b      	ldr	r3, [r7, #0]
   130f0:	68db      	ldr	r3, [r3, #12]
   130f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   130f4:	4313      	orrs	r3, r2
   130f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   130f8:	683b      	ldr	r3, [r7, #0]
   130fa:	7c1b      	ldrb	r3, [r3, #16]
   130fc:	001a      	movs	r2, r3
   130fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13100:	4313      	orrs	r3, r2
   13102:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13104:	683b      	ldr	r3, [r7, #0]
   13106:	7c5b      	ldrb	r3, [r3, #17]
   13108:	2b00      	cmp	r3, #0
   1310a:	d103      	bne.n	13114 <_spi_set_config+0x194>
   1310c:	4b1f      	ldr	r3, [pc, #124]	; (1318c <_spi_set_config+0x20c>)
   1310e:	4798      	blx	r3
   13110:	1e03      	subs	r3, r0, #0
   13112:	d003      	beq.n	1311c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   13114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13116:	2280      	movs	r2, #128	; 0x80
   13118:	4313      	orrs	r3, r2
   1311a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   1311c:	683b      	ldr	r3, [r7, #0]
   1311e:	7c9b      	ldrb	r3, [r3, #18]
   13120:	2b00      	cmp	r3, #0
   13122:	d004      	beq.n	1312e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   13124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13126:	2280      	movs	r2, #128	; 0x80
   13128:	0292      	lsls	r2, r2, #10
   1312a:	4313      	orrs	r3, r2
   1312c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   1312e:	683b      	ldr	r3, [r7, #0]
   13130:	7cdb      	ldrb	r3, [r3, #19]
   13132:	2b00      	cmp	r3, #0
   13134:	d004      	beq.n	13140 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   13136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13138:	2280      	movs	r2, #128	; 0x80
   1313a:	0092      	lsls	r2, r2, #2
   1313c:	4313      	orrs	r3, r2
   1313e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   13140:	683b      	ldr	r3, [r7, #0]
   13142:	7d1b      	ldrb	r3, [r3, #20]
   13144:	2b00      	cmp	r3, #0
   13146:	d004      	beq.n	13152 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   13148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1314a:	2280      	movs	r2, #128	; 0x80
   1314c:	0192      	lsls	r2, r2, #6
   1314e:	4313      	orrs	r3, r2
   13150:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   13152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13154:	681a      	ldr	r2, [r3, #0]
   13156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13158:	431a      	orrs	r2, r3
   1315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1315c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   1315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13160:	685a      	ldr	r2, [r3, #4]
   13162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13164:	431a      	orrs	r2, r3
   13166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13168:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   1316a:	2300      	movs	r3, #0
}
   1316c:	0018      	movs	r0, r3
   1316e:	46bd      	mov	sp, r7
   13170:	b013      	add	sp, #76	; 0x4c
   13172:	bd90      	pop	{r4, r7, pc}
   13174:	00012c31 	.word	0x00012c31
   13178:	000128d1 	.word	0x000128d1
   1317c:	00015391 	.word	0x00015391
   13180:	00012a8d 	.word	0x00012a8d
   13184:	00015159 	.word	0x00015159
   13188:	00012607 	.word	0x00012607
   1318c:	00012e41 	.word	0x00012e41

00013190 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   13190:	b590      	push	{r4, r7, lr}
   13192:	b091      	sub	sp, #68	; 0x44
   13194:	af00      	add	r7, sp, #0
   13196:	6078      	str	r0, [r7, #4]
   13198:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1319a:	687b      	ldr	r3, [r7, #4]
   1319c:	681b      	ldr	r3, [r3, #0]
   1319e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   131a0:	687b      	ldr	r3, [r7, #4]
   131a2:	681b      	ldr	r3, [r3, #0]
   131a4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   131a6:	683b      	ldr	r3, [r7, #0]
   131a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   131aa:	2310      	movs	r3, #16
   131ac:	18fb      	adds	r3, r7, r3
   131ae:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   131b0:	683b      	ldr	r3, [r7, #0]
   131b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   131b4:	2310      	movs	r3, #16
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   131ba:	683b      	ldr	r3, [r7, #0]
   131bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   131be:	2310      	movs	r3, #16
   131c0:	18fb      	adds	r3, r7, r3
   131c2:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   131c4:	683b      	ldr	r3, [r7, #0]
   131c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   131c8:	2310      	movs	r3, #16
   131ca:	18fb      	adds	r3, r7, r3
   131cc:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   131ce:	233f      	movs	r3, #63	; 0x3f
   131d0:	18fb      	adds	r3, r7, r3
   131d2:	2200      	movs	r2, #0
   131d4:	701a      	strb	r2, [r3, #0]
   131d6:	e030      	b.n	1323a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   131d8:	233f      	movs	r3, #63	; 0x3f
   131da:	18fb      	adds	r3, r7, r3
   131dc:	781a      	ldrb	r2, [r3, #0]
   131de:	2310      	movs	r3, #16
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	0092      	lsls	r2, r2, #2
   131e4:	58d3      	ldr	r3, [r2, r3]
   131e6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   131e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   131ea:	2b00      	cmp	r3, #0
   131ec:	d109      	bne.n	13202 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   131ee:	233f      	movs	r3, #63	; 0x3f
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	781a      	ldrb	r2, [r3, #0]
   131f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   131f6:	0011      	movs	r1, r2
   131f8:	0018      	movs	r0, r3
   131fa:	4b56      	ldr	r3, [pc, #344]	; (13354 <_spi_check_config+0x1c4>)
   131fc:	4798      	blx	r3
   131fe:	0003      	movs	r3, r0
   13200:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   13202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13204:	3301      	adds	r3, #1
   13206:	d010      	beq.n	1322a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   13208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1320a:	041b      	lsls	r3, r3, #16
   1320c:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13210:	0c1b      	lsrs	r3, r3, #16
   13212:	b2db      	uxtb	r3, r3
   13214:	0018      	movs	r0, r3
   13216:	4b50      	ldr	r3, [pc, #320]	; (13358 <_spi_check_config+0x1c8>)
   13218:	4798      	blx	r3
   1321a:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   1321c:	429c      	cmp	r4, r3
   1321e:	d005      	beq.n	1322c <_spi_check_config+0x9c>
			module->hw = NULL;
   13220:	687b      	ldr	r3, [r7, #4]
   13222:	2200      	movs	r2, #0
   13224:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   13226:	231c      	movs	r3, #28
   13228:	e08f      	b.n	1334a <_spi_check_config+0x1ba>
			continue;
   1322a:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   1322c:	233f      	movs	r3, #63	; 0x3f
   1322e:	18fb      	adds	r3, r7, r3
   13230:	781a      	ldrb	r2, [r3, #0]
   13232:	233f      	movs	r3, #63	; 0x3f
   13234:	18fb      	adds	r3, r7, r3
   13236:	3201      	adds	r2, #1
   13238:	701a      	strb	r2, [r3, #0]
   1323a:	233f      	movs	r3, #63	; 0x3f
   1323c:	18fb      	adds	r3, r7, r3
   1323e:	781b      	ldrb	r3, [r3, #0]
   13240:	2b03      	cmp	r3, #3
   13242:	d9c9      	bls.n	131d8 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   13244:	2011      	movs	r0, #17
   13246:	4b45      	ldr	r3, [pc, #276]	; (1335c <_spi_check_config+0x1cc>)
   13248:	4798      	blx	r3
   1324a:	0003      	movs	r3, r0
   1324c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   1324e:	2300      	movs	r3, #0
   13250:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   13252:	2300      	movs	r3, #0
   13254:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   13256:	683b      	ldr	r3, [r7, #0]
   13258:	781b      	ldrb	r3, [r3, #0]
   1325a:	2b01      	cmp	r3, #1
   1325c:	d121      	bne.n	132a2 <_spi_check_config+0x112>
		enum status_code error_code = _sercom_get_sync_baud_val(
   1325e:	683b      	ldr	r3, [r7, #0]
   13260:	699b      	ldr	r3, [r3, #24]
   13262:	2223      	movs	r2, #35	; 0x23
   13264:	18bc      	adds	r4, r7, r2
   13266:	220e      	movs	r2, #14
   13268:	18ba      	adds	r2, r7, r2
   1326a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1326c:	0018      	movs	r0, r3
   1326e:	4b3c      	ldr	r3, [pc, #240]	; (13360 <_spi_check_config+0x1d0>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   13276:	2323      	movs	r3, #35	; 0x23
   13278:	18fb      	adds	r3, r7, r3
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	2b00      	cmp	r3, #0
   1327e:	d001      	beq.n	13284 <_spi_check_config+0xf4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   13280:	2317      	movs	r3, #23
   13282:	e062      	b.n	1334a <_spi_check_config+0x1ba>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   13284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13286:	7b1b      	ldrb	r3, [r3, #12]
   13288:	b2da      	uxtb	r2, r3
   1328a:	230e      	movs	r3, #14
   1328c:	18fb      	adds	r3, r7, r3
   1328e:	881b      	ldrh	r3, [r3, #0]
   13290:	b2db      	uxtb	r3, r3
   13292:	429a      	cmp	r2, r3
   13294:	d001      	beq.n	1329a <_spi_check_config+0x10a>
			return STATUS_ERR_DENIED;
   13296:	231c      	movs	r3, #28
   13298:	e057      	b.n	1334a <_spi_check_config+0x1ba>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   1329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1329c:	220c      	movs	r2, #12
   1329e:	4313      	orrs	r3, r2
   132a0:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   132a2:	683b      	ldr	r3, [r7, #0]
   132a4:	685b      	ldr	r3, [r3, #4]
   132a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   132a8:	4313      	orrs	r3, r2
   132aa:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   132ac:	683b      	ldr	r3, [r7, #0]
   132ae:	689b      	ldr	r3, [r3, #8]
   132b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   132b2:	4313      	orrs	r3, r2
   132b4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   132b6:	683b      	ldr	r3, [r7, #0]
   132b8:	68db      	ldr	r3, [r3, #12]
   132ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   132bc:	4313      	orrs	r3, r2
   132be:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   132c0:	683b      	ldr	r3, [r7, #0]
   132c2:	7c1b      	ldrb	r3, [r3, #16]
   132c4:	001a      	movs	r2, r3
   132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132c8:	4313      	orrs	r3, r2
   132ca:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   132cc:	683b      	ldr	r3, [r7, #0]
   132ce:	7c5b      	ldrb	r3, [r3, #17]
   132d0:	2b00      	cmp	r3, #0
   132d2:	d003      	beq.n	132dc <_spi_check_config+0x14c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   132d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132d6:	2280      	movs	r2, #128	; 0x80
   132d8:	4313      	orrs	r3, r2
   132da:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   132dc:	683b      	ldr	r3, [r7, #0]
   132de:	7c9b      	ldrb	r3, [r3, #18]
   132e0:	2b00      	cmp	r3, #0
   132e2:	d004      	beq.n	132ee <_spi_check_config+0x15e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   132e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132e6:	2280      	movs	r2, #128	; 0x80
   132e8:	0292      	lsls	r2, r2, #10
   132ea:	4313      	orrs	r3, r2
   132ec:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   132ee:	683b      	ldr	r3, [r7, #0]
   132f0:	7cdb      	ldrb	r3, [r3, #19]
   132f2:	2b00      	cmp	r3, #0
   132f4:	d004      	beq.n	13300 <_spi_check_config+0x170>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132f8:	2280      	movs	r2, #128	; 0x80
   132fa:	0092      	lsls	r2, r2, #2
   132fc:	4313      	orrs	r3, r2
   132fe:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   13300:	683b      	ldr	r3, [r7, #0]
   13302:	7d1b      	ldrb	r3, [r3, #20]
   13304:	2b00      	cmp	r3, #0
   13306:	d004      	beq.n	13312 <_spi_check_config+0x182>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   13308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1330a:	2280      	movs	r2, #128	; 0x80
   1330c:	0192      	lsls	r2, r2, #6
   1330e:	4313      	orrs	r3, r2
   13310:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   13312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13314:	2202      	movs	r2, #2
   13316:	4313      	orrs	r3, r2
   13318:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   1331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1331c:	681a      	ldr	r2, [r3, #0]
   1331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13320:	429a      	cmp	r2, r3
   13322:	d10e      	bne.n	13342 <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
   13324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13326:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   13328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1332a:	429a      	cmp	r2, r3
   1332c:	d109      	bne.n	13342 <_spi_check_config+0x1b2>
		module->mode           = config->mode;
   1332e:	683b      	ldr	r3, [r7, #0]
   13330:	781a      	ldrb	r2, [r3, #0]
   13332:	687b      	ldr	r3, [r7, #4]
   13334:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   13336:	683b      	ldr	r3, [r7, #0]
   13338:	7c1a      	ldrb	r2, [r3, #16]
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   1333e:	2300      	movs	r3, #0
   13340:	e003      	b.n	1334a <_spi_check_config+0x1ba>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   13342:	687b      	ldr	r3, [r7, #4]
   13344:	2200      	movs	r2, #0
   13346:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   13348:	231c      	movs	r3, #28
}
   1334a:	0018      	movs	r0, r3
   1334c:	46bd      	mov	sp, r7
   1334e:	b011      	add	sp, #68	; 0x44
   13350:	bd90      	pop	{r4, r7, pc}
   13352:	46c0      	nop			; (mov r8, r8)
   13354:	000128d1 	.word	0x000128d1
   13358:	00012cb9 	.word	0x00012cb9
   1335c:	00015159 	.word	0x00015159
   13360:	00012607 	.word	0x00012607

00013364 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   13364:	b580      	push	{r7, lr}
   13366:	b08a      	sub	sp, #40	; 0x28
   13368:	af00      	add	r7, sp, #0
   1336a:	60f8      	str	r0, [r7, #12]
   1336c:	60b9      	str	r1, [r7, #8]
   1336e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13370:	68fb      	ldr	r3, [r7, #12]
   13372:	68ba      	ldr	r2, [r7, #8]
   13374:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   13376:	68fb      	ldr	r3, [r7, #12]
   13378:	681b      	ldr	r3, [r3, #0]
   1337a:	61fb      	str	r3, [r7, #28]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1337c:	69fb      	ldr	r3, [r7, #28]
   1337e:	681b      	ldr	r3, [r3, #0]
   13380:	2202      	movs	r2, #2
   13382:	4013      	ands	r3, r2
   13384:	d007      	beq.n	13396 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   13386:	687a      	ldr	r2, [r7, #4]
   13388:	68fb      	ldr	r3, [r7, #12]
   1338a:	0011      	movs	r1, r2
   1338c:	0018      	movs	r0, r3
   1338e:	4b33      	ldr	r3, [pc, #204]	; (1345c <spi_init+0xf8>)
   13390:	4798      	blx	r3
   13392:	0003      	movs	r3, r0
   13394:	e05e      	b.n	13454 <spi_init+0xf0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   13396:	69fb      	ldr	r3, [r7, #28]
   13398:	681b      	ldr	r3, [r3, #0]
   1339a:	2201      	movs	r2, #1
   1339c:	4013      	ands	r3, r2
   1339e:	d001      	beq.n	133a4 <spi_init+0x40>
		return STATUS_BUSY;
   133a0:	2305      	movs	r3, #5
   133a2:	e057      	b.n	13454 <spi_init+0xf0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   133a4:	68fb      	ldr	r3, [r7, #12]
   133a6:	681b      	ldr	r3, [r3, #0]
   133a8:	0018      	movs	r0, r3
   133aa:	4b2d      	ldr	r3, [pc, #180]	; (13460 <spi_init+0xfc>)
   133ac:	4798      	blx	r3
   133ae:	0003      	movs	r3, r0
   133b0:	61bb      	str	r3, [r7, #24]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   133b2:	69bb      	ldr	r3, [r7, #24]
   133b4:	2b05      	cmp	r3, #5
   133b6:	d104      	bne.n	133c2 <spi_init+0x5e>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   133b8:	2301      	movs	r3, #1
   133ba:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
   133bc:	2318      	movs	r3, #24
   133be:	623b      	str	r3, [r7, #32]
   133c0:	e004      	b.n	133cc <spi_init+0x68>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   133c2:	69bb      	ldr	r3, [r7, #24]
   133c4:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   133c6:	69bb      	ldr	r3, [r7, #24]
   133c8:	3312      	adds	r3, #18
   133ca:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   133cc:	69bb      	ldr	r3, [r7, #24]
   133ce:	2b05      	cmp	r3, #5
   133d0:	d108      	bne.n	133e4 <spi_init+0x80>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   133d2:	2201      	movs	r2, #1
   133d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133d6:	409a      	lsls	r2, r3
   133d8:	0013      	movs	r3, r2
   133da:	0019      	movs	r1, r3
   133dc:	2003      	movs	r0, #3
   133de:	4b21      	ldr	r3, [pc, #132]	; (13464 <spi_init+0x100>)
   133e0:	4798      	blx	r3
   133e2:	e007      	b.n	133f4 <spi_init+0x90>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   133e4:	2201      	movs	r2, #1
   133e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133e8:	409a      	lsls	r2, r3
   133ea:	0013      	movs	r3, r2
   133ec:	0019      	movs	r1, r3
   133ee:	2002      	movs	r0, #2
   133f0:	4b1c      	ldr	r3, [pc, #112]	; (13464 <spi_init+0x100>)
   133f2:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   133f4:	2314      	movs	r3, #20
   133f6:	18fb      	adds	r3, r7, r3
   133f8:	0018      	movs	r0, r3
   133fa:	4b1b      	ldr	r3, [pc, #108]	; (13468 <spi_init+0x104>)
   133fc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   133fe:	687b      	ldr	r3, [r7, #4]
   13400:	2224      	movs	r2, #36	; 0x24
   13402:	5c9a      	ldrb	r2, [r3, r2]
   13404:	2314      	movs	r3, #20
   13406:	18fb      	adds	r3, r7, r3
   13408:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1340a:	6a3b      	ldr	r3, [r7, #32]
   1340c:	b2db      	uxtb	r3, r3
   1340e:	2214      	movs	r2, #20
   13410:	18ba      	adds	r2, r7, r2
   13412:	0011      	movs	r1, r2
   13414:	0018      	movs	r0, r3
   13416:	4b15      	ldr	r3, [pc, #84]	; (1346c <spi_init+0x108>)
   13418:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1341a:	6a3b      	ldr	r3, [r7, #32]
   1341c:	b2db      	uxtb	r3, r3
   1341e:	0018      	movs	r0, r3
   13420:	4b13      	ldr	r3, [pc, #76]	; (13470 <spi_init+0x10c>)
   13422:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13424:	687b      	ldr	r3, [r7, #4]
   13426:	2224      	movs	r2, #36	; 0x24
   13428:	5c9b      	ldrb	r3, [r3, r2]
   1342a:	2100      	movs	r1, #0
   1342c:	0018      	movs	r0, r3
   1342e:	4b11      	ldr	r3, [pc, #68]	; (13474 <spi_init+0x110>)
   13430:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   13432:	687b      	ldr	r3, [r7, #4]
   13434:	781b      	ldrb	r3, [r3, #0]
   13436:	2b01      	cmp	r3, #1
   13438:	d105      	bne.n	13446 <spi_init+0xe2>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1343a:	69fb      	ldr	r3, [r7, #28]
   1343c:	681b      	ldr	r3, [r3, #0]
   1343e:	220c      	movs	r2, #12
   13440:	431a      	orrs	r2, r3
   13442:	69fb      	ldr	r3, [r7, #28]
   13444:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   13446:	687a      	ldr	r2, [r7, #4]
   13448:	68fb      	ldr	r3, [r7, #12]
   1344a:	0011      	movs	r1, r2
   1344c:	0018      	movs	r0, r3
   1344e:	4b0a      	ldr	r3, [pc, #40]	; (13478 <spi_init+0x114>)
   13450:	4798      	blx	r3
   13452:	0003      	movs	r3, r0
}
   13454:	0018      	movs	r0, r3
   13456:	46bd      	mov	sp, r7
   13458:	b00a      	add	sp, #40	; 0x28
   1345a:	bd80      	pop	{r7, pc}
   1345c:	00013191 	.word	0x00013191
   13460:	00012a8d 	.word	0x00012a8d
   13464:	00012dc5 	.word	0x00012dc5
   13468:	00012dad 	.word	0x00012dad
   1346c:	00015069 	.word	0x00015069
   13470:	000150a9 	.word	0x000150a9
   13474:	00012845 	.word	0x00012845
   13478:	00012f81 	.word	0x00012f81

0001347c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1347c:	b580      	push	{r7, lr}
   1347e:	b086      	sub	sp, #24
   13480:	af00      	add	r7, sp, #0
   13482:	60f8      	str	r0, [r7, #12]
   13484:	60b9      	str	r1, [r7, #8]
   13486:	1dfb      	adds	r3, r7, #7
   13488:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	795b      	ldrb	r3, [r3, #5]
   1348e:	2b01      	cmp	r3, #1
   13490:	d001      	beq.n	13496 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13492:	2315      	movs	r3, #21
   13494:	e05c      	b.n	13550 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   13496:	68fb      	ldr	r3, [r7, #12]
   13498:	7a1b      	ldrb	r3, [r3, #8]
   1349a:	2201      	movs	r2, #1
   1349c:	4053      	eors	r3, r2
   1349e:	b2db      	uxtb	r3, r3
   134a0:	2b00      	cmp	r3, #0
   134a2:	d054      	beq.n	1354e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   134a4:	1dfb      	adds	r3, r7, #7
   134a6:	781b      	ldrb	r3, [r3, #0]
   134a8:	2b00      	cmp	r3, #0
   134aa:	d04a      	beq.n	13542 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   134ac:	68bb      	ldr	r3, [r7, #8]
   134ae:	785b      	ldrb	r3, [r3, #1]
   134b0:	2b00      	cmp	r3, #0
   134b2:	d03f      	beq.n	13534 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   134b4:	68fb      	ldr	r3, [r7, #12]
   134b6:	0018      	movs	r0, r3
   134b8:	4b27      	ldr	r3, [pc, #156]	; (13558 <spi_select_slave+0xdc>)
   134ba:	4798      	blx	r3
   134bc:	0003      	movs	r3, r0
   134be:	001a      	movs	r2, r3
   134c0:	2301      	movs	r3, #1
   134c2:	4053      	eors	r3, r2
   134c4:	b2db      	uxtb	r3, r3
   134c6:	2b00      	cmp	r3, #0
   134c8:	d007      	beq.n	134da <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   134ca:	68bb      	ldr	r3, [r7, #8]
   134cc:	781b      	ldrb	r3, [r3, #0]
   134ce:	2101      	movs	r1, #1
   134d0:	0018      	movs	r0, r3
   134d2:	4b22      	ldr	r3, [pc, #136]	; (1355c <spi_select_slave+0xe0>)
   134d4:	4798      	blx	r3
					return STATUS_BUSY;
   134d6:	2305      	movs	r3, #5
   134d8:	e03a      	b.n	13550 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   134da:	68bb      	ldr	r3, [r7, #8]
   134dc:	781b      	ldrb	r3, [r3, #0]
   134de:	2100      	movs	r1, #0
   134e0:	0018      	movs	r0, r3
   134e2:	4b1e      	ldr	r3, [pc, #120]	; (1355c <spi_select_slave+0xe0>)
   134e4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   134e6:	68bb      	ldr	r3, [r7, #8]
   134e8:	789b      	ldrb	r3, [r3, #2]
   134ea:	b29a      	uxth	r2, r3
   134ec:	68fb      	ldr	r3, [r7, #12]
   134ee:	0011      	movs	r1, r2
   134f0:	0018      	movs	r0, r3
   134f2:	4b1b      	ldr	r3, [pc, #108]	; (13560 <spi_select_slave+0xe4>)
   134f4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   134f6:	68fb      	ldr	r3, [r7, #12]
   134f8:	79db      	ldrb	r3, [r3, #7]
   134fa:	2201      	movs	r2, #1
   134fc:	4053      	eors	r3, r2
   134fe:	b2db      	uxtb	r3, r3
   13500:	2b00      	cmp	r3, #0
   13502:	d024      	beq.n	1354e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   13504:	46c0      	nop			; (mov r8, r8)
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	0018      	movs	r0, r3
   1350a:	4b16      	ldr	r3, [pc, #88]	; (13564 <spi_select_slave+0xe8>)
   1350c:	4798      	blx	r3
   1350e:	0003      	movs	r3, r0
   13510:	001a      	movs	r2, r3
   13512:	2301      	movs	r3, #1
   13514:	4053      	eors	r3, r2
   13516:	b2db      	uxtb	r3, r3
   13518:	2b00      	cmp	r3, #0
   1351a:	d1f4      	bne.n	13506 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   1351c:	2316      	movs	r3, #22
   1351e:	18fb      	adds	r3, r7, r3
   13520:	2200      	movs	r2, #0
   13522:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   13524:	2316      	movs	r3, #22
   13526:	18fa      	adds	r2, r7, r3
   13528:	68fb      	ldr	r3, [r7, #12]
   1352a:	0011      	movs	r1, r2
   1352c:	0018      	movs	r0, r3
   1352e:	4b0e      	ldr	r3, [pc, #56]	; (13568 <spi_select_slave+0xec>)
   13530:	4798      	blx	r3
   13532:	e00c      	b.n	1354e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   13534:	68bb      	ldr	r3, [r7, #8]
   13536:	781b      	ldrb	r3, [r3, #0]
   13538:	2100      	movs	r1, #0
   1353a:	0018      	movs	r0, r3
   1353c:	4b07      	ldr	r3, [pc, #28]	; (1355c <spi_select_slave+0xe0>)
   1353e:	4798      	blx	r3
   13540:	e005      	b.n	1354e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   13542:	68bb      	ldr	r3, [r7, #8]
   13544:	781b      	ldrb	r3, [r3, #0]
   13546:	2101      	movs	r1, #1
   13548:	0018      	movs	r0, r3
   1354a:	4b04      	ldr	r3, [pc, #16]	; (1355c <spi_select_slave+0xe0>)
   1354c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   1354e:	2300      	movs	r3, #0
}
   13550:	0018      	movs	r0, r3
   13552:	46bd      	mov	sp, r7
   13554:	b006      	add	sp, #24
   13556:	bd80      	pop	{r7, pc}
   13558:	00012e61 	.word	0x00012e61
   1355c:	00012d59 	.word	0x00012d59
   13560:	00012eb1 	.word	0x00012eb1
   13564:	00012e89 	.word	0x00012e89
   13568:	00012ef9 	.word	0x00012ef9

0001356c <system_gclk_chan_get_config_defaults>:
{
   1356c:	b580      	push	{r7, lr}
   1356e:	b082      	sub	sp, #8
   13570:	af00      	add	r7, sp, #0
   13572:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13574:	687b      	ldr	r3, [r7, #4]
   13576:	2200      	movs	r2, #0
   13578:	701a      	strb	r2, [r3, #0]
}
   1357a:	46c0      	nop			; (mov r8, r8)
   1357c:	46bd      	mov	sp, r7
   1357e:	b002      	add	sp, #8
   13580:	bd80      	pop	{r7, pc}
	...

00013584 <system_apb_clock_set_mask>:
{
   13584:	b580      	push	{r7, lr}
   13586:	b082      	sub	sp, #8
   13588:	af00      	add	r7, sp, #0
   1358a:	0002      	movs	r2, r0
   1358c:	6039      	str	r1, [r7, #0]
   1358e:	1dfb      	adds	r3, r7, #7
   13590:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13592:	1dfb      	adds	r3, r7, #7
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	2b04      	cmp	r3, #4
   13598:	d827      	bhi.n	135ea <system_apb_clock_set_mask+0x66>
   1359a:	009a      	lsls	r2, r3, #2
   1359c:	4b16      	ldr	r3, [pc, #88]	; (135f8 <system_apb_clock_set_mask+0x74>)
   1359e:	18d3      	adds	r3, r2, r3
   135a0:	681b      	ldr	r3, [r3, #0]
   135a2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   135a4:	4b15      	ldr	r3, [pc, #84]	; (135fc <system_apb_clock_set_mask+0x78>)
   135a6:	4a15      	ldr	r2, [pc, #84]	; (135fc <system_apb_clock_set_mask+0x78>)
   135a8:	6951      	ldr	r1, [r2, #20]
   135aa:	683a      	ldr	r2, [r7, #0]
   135ac:	430a      	orrs	r2, r1
   135ae:	615a      	str	r2, [r3, #20]
			break;
   135b0:	e01d      	b.n	135ee <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   135b2:	4b12      	ldr	r3, [pc, #72]	; (135fc <system_apb_clock_set_mask+0x78>)
   135b4:	4a11      	ldr	r2, [pc, #68]	; (135fc <system_apb_clock_set_mask+0x78>)
   135b6:	6991      	ldr	r1, [r2, #24]
   135b8:	683a      	ldr	r2, [r7, #0]
   135ba:	430a      	orrs	r2, r1
   135bc:	619a      	str	r2, [r3, #24]
			break;
   135be:	e016      	b.n	135ee <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   135c0:	4b0e      	ldr	r3, [pc, #56]	; (135fc <system_apb_clock_set_mask+0x78>)
   135c2:	4a0e      	ldr	r2, [pc, #56]	; (135fc <system_apb_clock_set_mask+0x78>)
   135c4:	69d1      	ldr	r1, [r2, #28]
   135c6:	683a      	ldr	r2, [r7, #0]
   135c8:	430a      	orrs	r2, r1
   135ca:	61da      	str	r2, [r3, #28]
			break;
   135cc:	e00f      	b.n	135ee <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   135ce:	4b0b      	ldr	r3, [pc, #44]	; (135fc <system_apb_clock_set_mask+0x78>)
   135d0:	4a0a      	ldr	r2, [pc, #40]	; (135fc <system_apb_clock_set_mask+0x78>)
   135d2:	6a11      	ldr	r1, [r2, #32]
   135d4:	683a      	ldr	r2, [r7, #0]
   135d6:	430a      	orrs	r2, r1
   135d8:	621a      	str	r2, [r3, #32]
			break;
   135da:	e008      	b.n	135ee <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   135dc:	4b07      	ldr	r3, [pc, #28]	; (135fc <system_apb_clock_set_mask+0x78>)
   135de:	4a07      	ldr	r2, [pc, #28]	; (135fc <system_apb_clock_set_mask+0x78>)
   135e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
   135e2:	683a      	ldr	r2, [r7, #0]
   135e4:	430a      	orrs	r2, r1
   135e6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   135e8:	e001      	b.n	135ee <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   135ea:	2317      	movs	r3, #23
   135ec:	e000      	b.n	135f0 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   135ee:	2300      	movs	r3, #0
}
   135f0:	0018      	movs	r0, r3
   135f2:	46bd      	mov	sp, r7
   135f4:	b002      	add	sp, #8
   135f6:	bd80      	pop	{r7, pc}
   135f8:	0001cc38 	.word	0x0001cc38
   135fc:	40000400 	.word	0x40000400

00013600 <system_pinmux_get_config_defaults>:
{
   13600:	b580      	push	{r7, lr}
   13602:	b082      	sub	sp, #8
   13604:	af00      	add	r7, sp, #0
   13606:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13608:	687b      	ldr	r3, [r7, #4]
   1360a:	2280      	movs	r2, #128	; 0x80
   1360c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1360e:	687b      	ldr	r3, [r7, #4]
   13610:	2200      	movs	r2, #0
   13612:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13614:	687b      	ldr	r3, [r7, #4]
   13616:	2201      	movs	r2, #1
   13618:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1361a:	687b      	ldr	r3, [r7, #4]
   1361c:	2200      	movs	r2, #0
   1361e:	70da      	strb	r2, [r3, #3]
}
   13620:	46c0      	nop			; (mov r8, r8)
   13622:	46bd      	mov	sp, r7
   13624:	b002      	add	sp, #8
   13626:	bd80      	pop	{r7, pc}

00013628 <system_is_debugger_present>:
{
   13628:	b580      	push	{r7, lr}
   1362a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1362c:	4b05      	ldr	r3, [pc, #20]	; (13644 <system_is_debugger_present+0x1c>)
   1362e:	789b      	ldrb	r3, [r3, #2]
   13630:	b2db      	uxtb	r3, r3
   13632:	001a      	movs	r2, r3
   13634:	2302      	movs	r3, #2
   13636:	4013      	ands	r3, r2
   13638:	1e5a      	subs	r2, r3, #1
   1363a:	4193      	sbcs	r3, r2
   1363c:	b2db      	uxtb	r3, r3
}
   1363e:	0018      	movs	r0, r3
   13640:	46bd      	mov	sp, r7
   13642:	bd80      	pop	{r7, pc}
   13644:	41002000 	.word	0x41002000

00013648 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   13648:	b580      	push	{r7, lr}
   1364a:	b084      	sub	sp, #16
   1364c:	af00      	add	r7, sp, #0
   1364e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   13650:	687b      	ldr	r3, [r7, #4]
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   13656:	68fb      	ldr	r3, [r7, #12]
   13658:	69db      	ldr	r3, [r3, #28]
   1365a:	1e5a      	subs	r2, r3, #1
   1365c:	4193      	sbcs	r3, r2
   1365e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   13660:	0018      	movs	r0, r3
   13662:	46bd      	mov	sp, r7
   13664:	b004      	add	sp, #16
   13666:	bd80      	pop	{r7, pc}

00013668 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   13668:	b580      	push	{r7, lr}
   1366a:	b082      	sub	sp, #8
   1366c:	af00      	add	r7, sp, #0
   1366e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   13670:	46c0      	nop			; (mov r8, r8)
   13672:	687b      	ldr	r3, [r7, #4]
   13674:	0018      	movs	r0, r3
   13676:	4b04      	ldr	r3, [pc, #16]	; (13688 <_usart_wait_for_sync+0x20>)
   13678:	4798      	blx	r3
   1367a:	1e03      	subs	r3, r0, #0
   1367c:	d1f9      	bne.n	13672 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1367e:	46c0      	nop			; (mov r8, r8)
   13680:	46bd      	mov	sp, r7
   13682:	b002      	add	sp, #8
   13684:	bd80      	pop	{r7, pc}
   13686:	46c0      	nop			; (mov r8, r8)
   13688:	00013649 	.word	0x00013649

0001368c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   1368c:	b5b0      	push	{r4, r5, r7, lr}
   1368e:	b08c      	sub	sp, #48	; 0x30
   13690:	af02      	add	r7, sp, #8
   13692:	6078      	str	r0, [r7, #4]
   13694:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	681b      	ldr	r3, [r3, #0]
   1369a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	681b      	ldr	r3, [r3, #0]
   136a0:	0018      	movs	r0, r3
   136a2:	4bab      	ldr	r3, [pc, #684]	; (13950 <_usart_set_config+0x2c4>)
   136a4:	4798      	blx	r3
   136a6:	0003      	movs	r3, r0
   136a8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   136aa:	697b      	ldr	r3, [r7, #20]
   136ac:	3312      	adds	r3, #18
   136ae:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   136b0:	2300      	movs	r3, #0
   136b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   136b4:	2300      	movs	r3, #0
   136b6:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   136b8:	230a      	movs	r3, #10
   136ba:	18fb      	adds	r3, r7, r3
   136bc:	2200      	movs	r2, #0
   136be:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   136c0:	231f      	movs	r3, #31
   136c2:	18fb      	adds	r3, r7, r3
   136c4:	2200      	movs	r2, #0
   136c6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   136c8:	231e      	movs	r3, #30
   136ca:	18fb      	adds	r3, r7, r3
   136cc:	2210      	movs	r2, #16
   136ce:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   136d0:	683b      	ldr	r3, [r7, #0]
   136d2:	8a1b      	ldrh	r3, [r3, #16]
   136d4:	2280      	movs	r2, #128	; 0x80
   136d6:	01d2      	lsls	r2, r2, #7
   136d8:	4293      	cmp	r3, r2
   136da:	d01c      	beq.n	13716 <_usart_set_config+0x8a>
   136dc:	2280      	movs	r2, #128	; 0x80
   136de:	01d2      	lsls	r2, r2, #7
   136e0:	4293      	cmp	r3, r2
   136e2:	dc06      	bgt.n	136f2 <_usart_set_config+0x66>
   136e4:	2b00      	cmp	r3, #0
   136e6:	d00d      	beq.n	13704 <_usart_set_config+0x78>
   136e8:	2280      	movs	r2, #128	; 0x80
   136ea:	0192      	lsls	r2, r2, #6
   136ec:	4293      	cmp	r3, r2
   136ee:	d024      	beq.n	1373a <_usart_set_config+0xae>
   136f0:	e035      	b.n	1375e <_usart_set_config+0xd2>
   136f2:	22c0      	movs	r2, #192	; 0xc0
   136f4:	01d2      	lsls	r2, r2, #7
   136f6:	4293      	cmp	r3, r2
   136f8:	d028      	beq.n	1374c <_usart_set_config+0xc0>
   136fa:	2280      	movs	r2, #128	; 0x80
   136fc:	0212      	lsls	r2, r2, #8
   136fe:	4293      	cmp	r3, r2
   13700:	d012      	beq.n	13728 <_usart_set_config+0x9c>
   13702:	e02c      	b.n	1375e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13704:	231f      	movs	r3, #31
   13706:	18fb      	adds	r3, r7, r3
   13708:	2200      	movs	r2, #0
   1370a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1370c:	231e      	movs	r3, #30
   1370e:	18fb      	adds	r3, r7, r3
   13710:	2210      	movs	r2, #16
   13712:	701a      	strb	r2, [r3, #0]
			break;
   13714:	e023      	b.n	1375e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13716:	231f      	movs	r3, #31
   13718:	18fb      	adds	r3, r7, r3
   1371a:	2200      	movs	r2, #0
   1371c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1371e:	231e      	movs	r3, #30
   13720:	18fb      	adds	r3, r7, r3
   13722:	2208      	movs	r2, #8
   13724:	701a      	strb	r2, [r3, #0]
			break;
   13726:	e01a      	b.n	1375e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13728:	231f      	movs	r3, #31
   1372a:	18fb      	adds	r3, r7, r3
   1372c:	2200      	movs	r2, #0
   1372e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   13730:	231e      	movs	r3, #30
   13732:	18fb      	adds	r3, r7, r3
   13734:	2203      	movs	r2, #3
   13736:	701a      	strb	r2, [r3, #0]
			break;
   13738:	e011      	b.n	1375e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1373a:	231f      	movs	r3, #31
   1373c:	18fb      	adds	r3, r7, r3
   1373e:	2201      	movs	r2, #1
   13740:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13742:	231e      	movs	r3, #30
   13744:	18fb      	adds	r3, r7, r3
   13746:	2210      	movs	r2, #16
   13748:	701a      	strb	r2, [r3, #0]
			break;
   1374a:	e008      	b.n	1375e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1374c:	231f      	movs	r3, #31
   1374e:	18fb      	adds	r3, r7, r3
   13750:	2201      	movs	r2, #1
   13752:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13754:	231e      	movs	r3, #30
   13756:	18fb      	adds	r3, r7, r3
   13758:	2208      	movs	r2, #8
   1375a:	701a      	strb	r2, [r3, #0]
			break;
   1375c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   1375e:	683b      	ldr	r3, [r7, #0]
   13760:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   13762:	683b      	ldr	r3, [r7, #0]
   13764:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   13766:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13768:	683b      	ldr	r3, [r7, #0]
   1376a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   1376c:	4313      	orrs	r3, r2
		config->sample_rate |
   1376e:	683a      	ldr	r2, [r7, #0]
   13770:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   13772:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   13774:	683a      	ldr	r2, [r7, #0]
   13776:	7e12      	ldrb	r2, [r2, #24]
   13778:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   1377a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1377c:	683a      	ldr	r2, [r7, #0]
   1377e:	2126      	movs	r1, #38	; 0x26
   13780:	5c52      	ldrb	r2, [r2, r1]
   13782:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   13784:	4313      	orrs	r3, r2
   13786:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   13788:	231d      	movs	r3, #29
   1378a:	18fb      	adds	r3, r7, r3
   1378c:	2200      	movs	r2, #0
   1378e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   13790:	683b      	ldr	r3, [r7, #0]
   13792:	685b      	ldr	r3, [r3, #4]
   13794:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   13796:	68fb      	ldr	r3, [r7, #12]
   13798:	2b00      	cmp	r3, #0
   1379a:	d01e      	beq.n	137da <_usart_set_config+0x14e>
   1379c:	2280      	movs	r2, #128	; 0x80
   1379e:	0552      	lsls	r2, r2, #21
   137a0:	4293      	cmp	r3, r2
   137a2:	d14f      	bne.n	13844 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   137a4:	683b      	ldr	r3, [r7, #0]
   137a6:	2227      	movs	r2, #39	; 0x27
   137a8:	5c9b      	ldrb	r3, [r3, r2]
   137aa:	2201      	movs	r2, #1
   137ac:	4053      	eors	r3, r2
   137ae:	b2db      	uxtb	r3, r3
   137b0:	2b00      	cmp	r3, #0
   137b2:	d046      	beq.n	13842 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   137b4:	683b      	ldr	r3, [r7, #0]
   137b6:	6a1d      	ldr	r5, [r3, #32]
   137b8:	693b      	ldr	r3, [r7, #16]
   137ba:	b2db      	uxtb	r3, r3
   137bc:	0018      	movs	r0, r3
   137be:	4b65      	ldr	r3, [pc, #404]	; (13954 <_usart_set_config+0x2c8>)
   137c0:	4798      	blx	r3
   137c2:	0001      	movs	r1, r0
   137c4:	231d      	movs	r3, #29
   137c6:	18fc      	adds	r4, r7, r3
   137c8:	230a      	movs	r3, #10
   137ca:	18fb      	adds	r3, r7, r3
   137cc:	001a      	movs	r2, r3
   137ce:	0028      	movs	r0, r5
   137d0:	4b61      	ldr	r3, [pc, #388]	; (13958 <_usart_set_config+0x2cc>)
   137d2:	4798      	blx	r3
   137d4:	0003      	movs	r3, r0
   137d6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   137d8:	e033      	b.n	13842 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   137da:	683b      	ldr	r3, [r7, #0]
   137dc:	2227      	movs	r2, #39	; 0x27
   137de:	5c9b      	ldrb	r3, [r3, r2]
   137e0:	2b00      	cmp	r3, #0
   137e2:	d014      	beq.n	1380e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   137e4:	683b      	ldr	r3, [r7, #0]
   137e6:	6a18      	ldr	r0, [r3, #32]
   137e8:	683b      	ldr	r3, [r7, #0]
   137ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   137ec:	231d      	movs	r3, #29
   137ee:	18fc      	adds	r4, r7, r3
   137f0:	231f      	movs	r3, #31
   137f2:	18fb      	adds	r3, r7, r3
   137f4:	781d      	ldrb	r5, [r3, #0]
   137f6:	230a      	movs	r3, #10
   137f8:	18fa      	adds	r2, r7, r3
   137fa:	231e      	movs	r3, #30
   137fc:	18fb      	adds	r3, r7, r3
   137fe:	781b      	ldrb	r3, [r3, #0]
   13800:	9300      	str	r3, [sp, #0]
   13802:	002b      	movs	r3, r5
   13804:	4d55      	ldr	r5, [pc, #340]	; (1395c <_usart_set_config+0x2d0>)
   13806:	47a8      	blx	r5
   13808:	0003      	movs	r3, r0
   1380a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   1380c:	e01a      	b.n	13844 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   1380e:	683b      	ldr	r3, [r7, #0]
   13810:	6a1d      	ldr	r5, [r3, #32]
   13812:	693b      	ldr	r3, [r7, #16]
   13814:	b2db      	uxtb	r3, r3
   13816:	0018      	movs	r0, r3
   13818:	4b4e      	ldr	r3, [pc, #312]	; (13954 <_usart_set_config+0x2c8>)
   1381a:	4798      	blx	r3
				status_code =
   1381c:	231d      	movs	r3, #29
   1381e:	18fc      	adds	r4, r7, r3
   13820:	231f      	movs	r3, #31
   13822:	18fb      	adds	r3, r7, r3
   13824:	7819      	ldrb	r1, [r3, #0]
   13826:	230a      	movs	r3, #10
   13828:	18fa      	adds	r2, r7, r3
   1382a:	231e      	movs	r3, #30
   1382c:	18fb      	adds	r3, r7, r3
   1382e:	781b      	ldrb	r3, [r3, #0]
   13830:	9300      	str	r3, [sp, #0]
   13832:	000b      	movs	r3, r1
   13834:	0001      	movs	r1, r0
   13836:	0028      	movs	r0, r5
   13838:	4d48      	ldr	r5, [pc, #288]	; (1395c <_usart_set_config+0x2d0>)
   1383a:	47a8      	blx	r5
   1383c:	0003      	movs	r3, r0
   1383e:	7023      	strb	r3, [r4, #0]
			break;
   13840:	e000      	b.n	13844 <_usart_set_config+0x1b8>
			break;
   13842:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   13844:	231d      	movs	r3, #29
   13846:	18fb      	adds	r3, r7, r3
   13848:	781b      	ldrb	r3, [r3, #0]
   1384a:	2b00      	cmp	r3, #0
   1384c:	d003      	beq.n	13856 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   1384e:	231d      	movs	r3, #29
   13850:	18fb      	adds	r3, r7, r3
   13852:	781b      	ldrb	r3, [r3, #0]
   13854:	e077      	b.n	13946 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   13856:	683b      	ldr	r3, [r7, #0]
   13858:	7e5b      	ldrb	r3, [r3, #25]
   1385a:	2b00      	cmp	r3, #0
   1385c:	d003      	beq.n	13866 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1385e:	683b      	ldr	r3, [r7, #0]
   13860:	7e9a      	ldrb	r2, [r3, #26]
   13862:	69bb      	ldr	r3, [r7, #24]
   13864:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13866:	687b      	ldr	r3, [r7, #4]
   13868:	0018      	movs	r0, r3
   1386a:	4b3d      	ldr	r3, [pc, #244]	; (13960 <_usart_set_config+0x2d4>)
   1386c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   1386e:	230a      	movs	r3, #10
   13870:	18fb      	adds	r3, r7, r3
   13872:	881a      	ldrh	r2, [r3, #0]
   13874:	69bb      	ldr	r3, [r7, #24]
   13876:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   13878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1387a:	68fb      	ldr	r3, [r7, #12]
   1387c:	4313      	orrs	r3, r2
   1387e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   13880:	683b      	ldr	r3, [r7, #0]
   13882:	2227      	movs	r2, #39	; 0x27
   13884:	5c9b      	ldrb	r3, [r3, r2]
   13886:	2201      	movs	r2, #1
   13888:	4053      	eors	r3, r2
   1388a:	b2db      	uxtb	r3, r3
   1388c:	2b00      	cmp	r3, #0
   1388e:	d003      	beq.n	13898 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   13890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13892:	2204      	movs	r2, #4
   13894:	4313      	orrs	r3, r2
   13896:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13898:	683b      	ldr	r3, [r7, #0]
   1389a:	7e5b      	ldrb	r3, [r3, #25]
   1389c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1389e:	683b      	ldr	r3, [r7, #0]
   138a0:	7f1b      	ldrb	r3, [r3, #28]
   138a2:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   138a4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   138a6:	683b      	ldr	r3, [r7, #0]
   138a8:	7f5b      	ldrb	r3, [r3, #29]
   138aa:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   138ac:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   138ae:	683b      	ldr	r3, [r7, #0]
   138b0:	2124      	movs	r1, #36	; 0x24
   138b2:	5c5b      	ldrb	r3, [r3, r1]
   138b4:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   138b6:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   138b8:	683b      	ldr	r3, [r7, #0]
   138ba:	2125      	movs	r1, #37	; 0x25
   138bc:	5c5b      	ldrb	r3, [r3, r1]
   138be:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   138c0:	4313      	orrs	r3, r2
	ctrlb =  
   138c2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   138c4:	683b      	ldr	r3, [r7, #0]
   138c6:	7a9b      	ldrb	r3, [r3, #10]
   138c8:	001a      	movs	r2, r3
   138ca:	6a3b      	ldr	r3, [r7, #32]
   138cc:	4313      	orrs	r3, r2
   138ce:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   138d0:	683b      	ldr	r3, [r7, #0]
   138d2:	7adb      	ldrb	r3, [r3, #11]
   138d4:	001a      	movs	r2, r3
   138d6:	6a3b      	ldr	r3, [r7, #32]
   138d8:	4313      	orrs	r3, r2
   138da:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   138dc:	683b      	ldr	r3, [r7, #0]
   138de:	891b      	ldrh	r3, [r3, #8]
   138e0:	2bff      	cmp	r3, #255	; 0xff
   138e2:	d00b      	beq.n	138fc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138e6:	2280      	movs	r2, #128	; 0x80
   138e8:	0452      	lsls	r2, r2, #17
   138ea:	4313      	orrs	r3, r2
   138ec:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   138ee:	683b      	ldr	r3, [r7, #0]
   138f0:	891b      	ldrh	r3, [r3, #8]
   138f2:	001a      	movs	r2, r3
   138f4:	6a3b      	ldr	r3, [r7, #32]
   138f6:	4313      	orrs	r3, r2
   138f8:	623b      	str	r3, [r7, #32]
   138fa:	e008      	b.n	1390e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   138fc:	683b      	ldr	r3, [r7, #0]
   138fe:	7edb      	ldrb	r3, [r3, #27]
   13900:	2b00      	cmp	r3, #0
   13902:	d004      	beq.n	1390e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   13904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13906:	2280      	movs	r2, #128	; 0x80
   13908:	04d2      	lsls	r2, r2, #19
   1390a:	4313      	orrs	r3, r2
   1390c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1390e:	683b      	ldr	r3, [r7, #0]
   13910:	222c      	movs	r2, #44	; 0x2c
   13912:	5c9b      	ldrb	r3, [r3, r2]
   13914:	2b00      	cmp	r3, #0
   13916:	d103      	bne.n	13920 <_usart_set_config+0x294>
   13918:	4b12      	ldr	r3, [pc, #72]	; (13964 <_usart_set_config+0x2d8>)
   1391a:	4798      	blx	r3
   1391c:	1e03      	subs	r3, r0, #0
   1391e:	d003      	beq.n	13928 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   13920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13922:	2280      	movs	r2, #128	; 0x80
   13924:	4313      	orrs	r3, r2
   13926:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13928:	687b      	ldr	r3, [r7, #4]
   1392a:	0018      	movs	r0, r3
   1392c:	4b0c      	ldr	r3, [pc, #48]	; (13960 <_usart_set_config+0x2d4>)
   1392e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   13930:	69bb      	ldr	r3, [r7, #24]
   13932:	6a3a      	ldr	r2, [r7, #32]
   13934:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13936:	687b      	ldr	r3, [r7, #4]
   13938:	0018      	movs	r0, r3
   1393a:	4b09      	ldr	r3, [pc, #36]	; (13960 <_usart_set_config+0x2d4>)
   1393c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   1393e:	69bb      	ldr	r3, [r7, #24]
   13940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13942:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   13944:	2300      	movs	r3, #0
}
   13946:	0018      	movs	r0, r3
   13948:	46bd      	mov	sp, r7
   1394a:	b00a      	add	sp, #40	; 0x28
   1394c:	bdb0      	pop	{r4, r5, r7, pc}
   1394e:	46c0      	nop			; (mov r8, r8)
   13950:	00012a8d 	.word	0x00012a8d
   13954:	00015159 	.word	0x00015159
   13958:	00012607 	.word	0x00012607
   1395c:	00012685 	.word	0x00012685
   13960:	00013669 	.word	0x00013669
   13964:	00013629 	.word	0x00013629

00013968 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   13968:	b590      	push	{r4, r7, lr}
   1396a:	b093      	sub	sp, #76	; 0x4c
   1396c:	af00      	add	r7, sp, #0
   1396e:	60f8      	str	r0, [r7, #12]
   13970:	60b9      	str	r1, [r7, #8]
   13972:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   13974:	2333      	movs	r3, #51	; 0x33
   13976:	18fb      	adds	r3, r7, r3
   13978:	2200      	movs	r2, #0
   1397a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1397c:	68fb      	ldr	r3, [r7, #12]
   1397e:	68ba      	ldr	r2, [r7, #8]
   13980:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13982:	68fb      	ldr	r3, [r7, #12]
   13984:	681b      	ldr	r3, [r3, #0]
   13986:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13988:	68fb      	ldr	r3, [r7, #12]
   1398a:	681b      	ldr	r3, [r3, #0]
   1398c:	0018      	movs	r0, r3
   1398e:	4b8f      	ldr	r3, [pc, #572]	; (13bcc <usart_init+0x264>)
   13990:	4798      	blx	r3
   13992:	0003      	movs	r3, r0
   13994:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   13996:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13998:	2b05      	cmp	r3, #5
   1399a:	d104      	bne.n	139a6 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   1399c:	2301      	movs	r3, #1
   1399e:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   139a0:	2318      	movs	r3, #24
   139a2:	643b      	str	r3, [r7, #64]	; 0x40
   139a4:	e004      	b.n	139b0 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139a8:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   139aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139ac:	3312      	adds	r3, #18
   139ae:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   139b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   139b2:	681b      	ldr	r3, [r3, #0]
   139b4:	2201      	movs	r2, #1
   139b6:	4013      	ands	r3, r2
   139b8:	d001      	beq.n	139be <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   139ba:	2305      	movs	r3, #5
   139bc:	e102      	b.n	13bc4 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   139be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   139c0:	681b      	ldr	r3, [r3, #0]
   139c2:	2202      	movs	r2, #2
   139c4:	4013      	ands	r3, r2
   139c6:	d001      	beq.n	139cc <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   139c8:	231c      	movs	r3, #28
   139ca:	e0fb      	b.n	13bc4 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139ce:	2b05      	cmp	r3, #5
   139d0:	d108      	bne.n	139e4 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   139d2:	2201      	movs	r2, #1
   139d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   139d6:	409a      	lsls	r2, r3
   139d8:	0013      	movs	r3, r2
   139da:	0019      	movs	r1, r3
   139dc:	2003      	movs	r0, #3
   139de:	4b7c      	ldr	r3, [pc, #496]	; (13bd0 <usart_init+0x268>)
   139e0:	4798      	blx	r3
   139e2:	e007      	b.n	139f4 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   139e4:	2201      	movs	r2, #1
   139e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   139e8:	409a      	lsls	r2, r3
   139ea:	0013      	movs	r3, r2
   139ec:	0019      	movs	r1, r3
   139ee:	2002      	movs	r0, #2
   139f0:	4b77      	ldr	r3, [pc, #476]	; (13bd0 <usart_init+0x268>)
   139f2:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   139f4:	2324      	movs	r3, #36	; 0x24
   139f6:	18fb      	adds	r3, r7, r3
   139f8:	0018      	movs	r0, r3
   139fa:	4b76      	ldr	r3, [pc, #472]	; (13bd4 <usart_init+0x26c>)
   139fc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   139fe:	687b      	ldr	r3, [r7, #4]
   13a00:	222d      	movs	r2, #45	; 0x2d
   13a02:	5c9a      	ldrb	r2, [r3, r2]
   13a04:	2324      	movs	r3, #36	; 0x24
   13a06:	18fb      	adds	r3, r7, r3
   13a08:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13a0c:	b2db      	uxtb	r3, r3
   13a0e:	2224      	movs	r2, #36	; 0x24
   13a10:	18ba      	adds	r2, r7, r2
   13a12:	0011      	movs	r1, r2
   13a14:	0018      	movs	r0, r3
   13a16:	4b70      	ldr	r3, [pc, #448]	; (13bd8 <usart_init+0x270>)
   13a18:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13a1c:	b2db      	uxtb	r3, r3
   13a1e:	0018      	movs	r0, r3
   13a20:	4b6e      	ldr	r3, [pc, #440]	; (13bdc <usart_init+0x274>)
   13a22:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13a24:	687b      	ldr	r3, [r7, #4]
   13a26:	222d      	movs	r2, #45	; 0x2d
   13a28:	5c9b      	ldrb	r3, [r3, r2]
   13a2a:	2100      	movs	r1, #0
   13a2c:	0018      	movs	r0, r3
   13a2e:	4b6c      	ldr	r3, [pc, #432]	; (13be0 <usart_init+0x278>)
   13a30:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   13a32:	687b      	ldr	r3, [r7, #4]
   13a34:	7ada      	ldrb	r2, [r3, #11]
   13a36:	68fb      	ldr	r3, [r7, #12]
   13a38:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   13a3a:	687b      	ldr	r3, [r7, #4]
   13a3c:	2224      	movs	r2, #36	; 0x24
   13a3e:	5c9a      	ldrb	r2, [r3, r2]
   13a40:	68fb      	ldr	r3, [r7, #12]
   13a42:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	2225      	movs	r2, #37	; 0x25
   13a48:	5c9a      	ldrb	r2, [r3, r2]
   13a4a:	68fb      	ldr	r3, [r7, #12]
   13a4c:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	7eda      	ldrb	r2, [r3, #27]
   13a52:	68fb      	ldr	r3, [r7, #12]
   13a54:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   13a56:	687b      	ldr	r3, [r7, #4]
   13a58:	7f1a      	ldrb	r2, [r3, #28]
   13a5a:	68fb      	ldr	r3, [r7, #12]
   13a5c:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   13a5e:	2333      	movs	r3, #51	; 0x33
   13a60:	18fc      	adds	r4, r7, r3
   13a62:	687a      	ldr	r2, [r7, #4]
   13a64:	68fb      	ldr	r3, [r7, #12]
   13a66:	0011      	movs	r1, r2
   13a68:	0018      	movs	r0, r3
   13a6a:	4b5e      	ldr	r3, [pc, #376]	; (13be4 <usart_init+0x27c>)
   13a6c:	4798      	blx	r3
   13a6e:	0003      	movs	r3, r0
   13a70:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   13a72:	2333      	movs	r3, #51	; 0x33
   13a74:	18fb      	adds	r3, r7, r3
   13a76:	781b      	ldrb	r3, [r3, #0]
   13a78:	2b00      	cmp	r3, #0
   13a7a:	d003      	beq.n	13a84 <usart_init+0x11c>
		return status_code;
   13a7c:	2333      	movs	r3, #51	; 0x33
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	781b      	ldrb	r3, [r3, #0]
   13a82:	e09f      	b.n	13bc4 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13a84:	2320      	movs	r3, #32
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	0018      	movs	r0, r3
   13a8a:	4b57      	ldr	r3, [pc, #348]	; (13be8 <usart_init+0x280>)
   13a8c:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13a8e:	2320      	movs	r3, #32
   13a90:	18fb      	adds	r3, r7, r3
   13a92:	2200      	movs	r2, #0
   13a94:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   13a96:	2320      	movs	r3, #32
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	2200      	movs	r2, #0
   13a9c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   13aa2:	2310      	movs	r3, #16
   13aa4:	18fb      	adds	r3, r7, r3
   13aa6:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   13aac:	2310      	movs	r3, #16
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   13ab2:	687b      	ldr	r3, [r7, #4]
   13ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   13ab6:	2310      	movs	r3, #16
   13ab8:	18fb      	adds	r3, r7, r3
   13aba:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   13ac0:	2310      	movs	r3, #16
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13ac6:	233f      	movs	r3, #63	; 0x3f
   13ac8:	18fb      	adds	r3, r7, r3
   13aca:	2200      	movs	r2, #0
   13acc:	701a      	strb	r2, [r3, #0]
   13ace:	e02c      	b.n	13b2a <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13ad0:	233f      	movs	r3, #63	; 0x3f
   13ad2:	18fb      	adds	r3, r7, r3
   13ad4:	781a      	ldrb	r2, [r3, #0]
   13ad6:	2310      	movs	r3, #16
   13ad8:	18fb      	adds	r3, r7, r3
   13ada:	0092      	lsls	r2, r2, #2
   13adc:	58d3      	ldr	r3, [r2, r3]
   13ade:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   13ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13ae2:	2b00      	cmp	r3, #0
   13ae4:	d109      	bne.n	13afa <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13ae6:	233f      	movs	r3, #63	; 0x3f
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	781a      	ldrb	r2, [r3, #0]
   13aec:	68bb      	ldr	r3, [r7, #8]
   13aee:	0011      	movs	r1, r2
   13af0:	0018      	movs	r0, r3
   13af2:	4b3e      	ldr	r3, [pc, #248]	; (13bec <usart_init+0x284>)
   13af4:	4798      	blx	r3
   13af6:	0003      	movs	r3, r0
   13af8:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13afc:	3301      	adds	r3, #1
   13afe:	d00d      	beq.n	13b1c <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13b02:	b2da      	uxtb	r2, r3
   13b04:	2320      	movs	r3, #32
   13b06:	18fb      	adds	r3, r7, r3
   13b08:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13b0c:	0c1b      	lsrs	r3, r3, #16
   13b0e:	b2db      	uxtb	r3, r3
   13b10:	2220      	movs	r2, #32
   13b12:	18ba      	adds	r2, r7, r2
   13b14:	0011      	movs	r1, r2
   13b16:	0018      	movs	r0, r3
   13b18:	4b35      	ldr	r3, [pc, #212]	; (13bf0 <usart_init+0x288>)
   13b1a:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   13b1c:	233f      	movs	r3, #63	; 0x3f
   13b1e:	18fb      	adds	r3, r7, r3
   13b20:	781a      	ldrb	r2, [r3, #0]
   13b22:	233f      	movs	r3, #63	; 0x3f
   13b24:	18fb      	adds	r3, r7, r3
   13b26:	3201      	adds	r2, #1
   13b28:	701a      	strb	r2, [r3, #0]
   13b2a:	233f      	movs	r3, #63	; 0x3f
   13b2c:	18fb      	adds	r3, r7, r3
   13b2e:	781b      	ldrb	r3, [r3, #0]
   13b30:	2b03      	cmp	r3, #3
   13b32:	d9cd      	bls.n	13ad0 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13b34:	2300      	movs	r3, #0
   13b36:	637b      	str	r3, [r7, #52]	; 0x34
   13b38:	e00a      	b.n	13b50 <usart_init+0x1e8>
		module->callback[i]            = NULL;
   13b3a:	68fa      	ldr	r2, [r7, #12]
   13b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b3e:	3302      	adds	r3, #2
   13b40:	009b      	lsls	r3, r3, #2
   13b42:	18d3      	adds	r3, r2, r3
   13b44:	3304      	adds	r3, #4
   13b46:	2200      	movs	r2, #0
   13b48:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b4c:	3301      	adds	r3, #1
   13b4e:	637b      	str	r3, [r7, #52]	; 0x34
   13b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b52:	2b05      	cmp	r3, #5
   13b54:	d9f1      	bls.n	13b3a <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
   13b56:	68fb      	ldr	r3, [r7, #12]
   13b58:	2200      	movs	r2, #0
   13b5a:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   13b5c:	68fb      	ldr	r3, [r7, #12]
   13b5e:	2200      	movs	r2, #0
   13b60:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   13b62:	68fb      	ldr	r3, [r7, #12]
   13b64:	2200      	movs	r2, #0
   13b66:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   13b68:	68fb      	ldr	r3, [r7, #12]
   13b6a:	2200      	movs	r2, #0
   13b6c:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   13b6e:	68fb      	ldr	r3, [r7, #12]
   13b70:	2230      	movs	r2, #48	; 0x30
   13b72:	2100      	movs	r1, #0
   13b74:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   13b76:	68fb      	ldr	r3, [r7, #12]
   13b78:	2231      	movs	r2, #49	; 0x31
   13b7a:	2100      	movs	r1, #0
   13b7c:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   13b7e:	68fb      	ldr	r3, [r7, #12]
   13b80:	2232      	movs	r2, #50	; 0x32
   13b82:	2100      	movs	r1, #0
   13b84:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   13b86:	68fb      	ldr	r3, [r7, #12]
   13b88:	2233      	movs	r2, #51	; 0x33
   13b8a:	2100      	movs	r1, #0
   13b8c:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13b8e:	68fb      	ldr	r3, [r7, #12]
   13b90:	681b      	ldr	r3, [r3, #0]
   13b92:	2227      	movs	r2, #39	; 0x27
   13b94:	18bc      	adds	r4, r7, r2
   13b96:	0018      	movs	r0, r3
   13b98:	4b0c      	ldr	r3, [pc, #48]	; (13bcc <usart_init+0x264>)
   13b9a:	4798      	blx	r3
   13b9c:	0003      	movs	r3, r0
   13b9e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   13ba0:	4a14      	ldr	r2, [pc, #80]	; (13bf4 <usart_init+0x28c>)
   13ba2:	2327      	movs	r3, #39	; 0x27
   13ba4:	18fb      	adds	r3, r7, r3
   13ba6:	781b      	ldrb	r3, [r3, #0]
   13ba8:	0011      	movs	r1, r2
   13baa:	0018      	movs	r0, r3
   13bac:	4b12      	ldr	r3, [pc, #72]	; (13bf8 <usart_init+0x290>)
   13bae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13bb0:	2327      	movs	r3, #39	; 0x27
   13bb2:	18fb      	adds	r3, r7, r3
   13bb4:	781a      	ldrb	r2, [r3, #0]
   13bb6:	4b11      	ldr	r3, [pc, #68]	; (13bfc <usart_init+0x294>)
   13bb8:	0092      	lsls	r2, r2, #2
   13bba:	68f9      	ldr	r1, [r7, #12]
   13bbc:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   13bbe:	2333      	movs	r3, #51	; 0x33
   13bc0:	18fb      	adds	r3, r7, r3
   13bc2:	781b      	ldrb	r3, [r3, #0]
}
   13bc4:	0018      	movs	r0, r3
   13bc6:	46bd      	mov	sp, r7
   13bc8:	b013      	add	sp, #76	; 0x4c
   13bca:	bd90      	pop	{r4, r7, pc}
   13bcc:	00012a8d 	.word	0x00012a8d
   13bd0:	00013585 	.word	0x00013585
   13bd4:	0001356d 	.word	0x0001356d
   13bd8:	00015069 	.word	0x00015069
   13bdc:	000150a9 	.word	0x000150a9
   13be0:	00012845 	.word	0x00012845
   13be4:	0001368d 	.word	0x0001368d
   13be8:	00013601 	.word	0x00013601
   13bec:	000128d1 	.word	0x000128d1
   13bf0:	00015391 	.word	0x00015391
   13bf4:	00013e9d 	.word	0x00013e9d
   13bf8:	00012af1 	.word	0x00012af1
   13bfc:	200015d4 	.word	0x200015d4

00013c00 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   13c00:	b580      	push	{r7, lr}
   13c02:	b084      	sub	sp, #16
   13c04:	af00      	add	r7, sp, #0
   13c06:	6078      	str	r0, [r7, #4]
   13c08:	000a      	movs	r2, r1
   13c0a:	1cbb      	adds	r3, r7, #2
   13c0c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13c0e:	687b      	ldr	r3, [r7, #4]
   13c10:	681b      	ldr	r3, [r3, #0]
   13c12:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   13c14:	687b      	ldr	r3, [r7, #4]
   13c16:	79db      	ldrb	r3, [r3, #7]
   13c18:	2201      	movs	r2, #1
   13c1a:	4053      	eors	r3, r2
   13c1c:	b2db      	uxtb	r3, r3
   13c1e:	2b00      	cmp	r3, #0
   13c20:	d001      	beq.n	13c26 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   13c22:	231c      	movs	r3, #28
   13c24:	e017      	b.n	13c56 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   13c26:	687b      	ldr	r3, [r7, #4]
   13c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   13c2a:	b29b      	uxth	r3, r3
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d001      	beq.n	13c34 <usart_write_wait+0x34>
		return STATUS_BUSY;
   13c30:	2305      	movs	r3, #5
   13c32:	e010      	b.n	13c56 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13c34:	687b      	ldr	r3, [r7, #4]
   13c36:	0018      	movs	r0, r3
   13c38:	4b09      	ldr	r3, [pc, #36]	; (13c60 <usart_write_wait+0x60>)
   13c3a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   13c3c:	68fb      	ldr	r3, [r7, #12]
   13c3e:	1cba      	adds	r2, r7, #2
   13c40:	8812      	ldrh	r2, [r2, #0]
   13c42:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   13c44:	46c0      	nop			; (mov r8, r8)
   13c46:	68fb      	ldr	r3, [r7, #12]
   13c48:	7e1b      	ldrb	r3, [r3, #24]
   13c4a:	b2db      	uxtb	r3, r3
   13c4c:	001a      	movs	r2, r3
   13c4e:	2302      	movs	r3, #2
   13c50:	4013      	ands	r3, r2
   13c52:	d0f8      	beq.n	13c46 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   13c54:	2300      	movs	r3, #0
}
   13c56:	0018      	movs	r0, r3
   13c58:	46bd      	mov	sp, r7
   13c5a:	b004      	add	sp, #16
   13c5c:	bd80      	pop	{r7, pc}
   13c5e:	46c0      	nop			; (mov r8, r8)
   13c60:	00013669 	.word	0x00013669

00013c64 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   13c64:	b580      	push	{r7, lr}
   13c66:	b084      	sub	sp, #16
   13c68:	af00      	add	r7, sp, #0
   13c6a:	6078      	str	r0, [r7, #4]
   13c6c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13c6e:	687b      	ldr	r3, [r7, #4]
   13c70:	681b      	ldr	r3, [r3, #0]
   13c72:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	799b      	ldrb	r3, [r3, #6]
   13c78:	2201      	movs	r2, #1
   13c7a:	4053      	eors	r3, r2
   13c7c:	b2db      	uxtb	r3, r3
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d001      	beq.n	13c86 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   13c82:	231c      	movs	r3, #28
   13c84:	e05e      	b.n	13d44 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   13c86:	687b      	ldr	r3, [r7, #4]
   13c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   13c8a:	b29b      	uxth	r3, r3
   13c8c:	2b00      	cmp	r3, #0
   13c8e:	d001      	beq.n	13c94 <usart_read_wait+0x30>
		return STATUS_BUSY;
   13c90:	2305      	movs	r3, #5
   13c92:	e057      	b.n	13d44 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   13c94:	68fb      	ldr	r3, [r7, #12]
   13c96:	7e1b      	ldrb	r3, [r3, #24]
   13c98:	b2db      	uxtb	r3, r3
   13c9a:	001a      	movs	r2, r3
   13c9c:	2304      	movs	r3, #4
   13c9e:	4013      	ands	r3, r2
   13ca0:	d101      	bne.n	13ca6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   13ca2:	2305      	movs	r3, #5
   13ca4:	e04e      	b.n	13d44 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13ca6:	687b      	ldr	r3, [r7, #4]
   13ca8:	0018      	movs	r0, r3
   13caa:	4b28      	ldr	r3, [pc, #160]	; (13d4c <usart_read_wait+0xe8>)
   13cac:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   13cae:	68fb      	ldr	r3, [r7, #12]
   13cb0:	8b5b      	ldrh	r3, [r3, #26]
   13cb2:	b29b      	uxth	r3, r3
   13cb4:	b2da      	uxtb	r2, r3
   13cb6:	230b      	movs	r3, #11
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	213f      	movs	r1, #63	; 0x3f
   13cbc:	400a      	ands	r2, r1
   13cbe:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   13cc0:	230b      	movs	r3, #11
   13cc2:	18fb      	adds	r3, r7, r3
   13cc4:	781b      	ldrb	r3, [r3, #0]
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d036      	beq.n	13d38 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   13cca:	230b      	movs	r3, #11
   13ccc:	18fb      	adds	r3, r7, r3
   13cce:	781b      	ldrb	r3, [r3, #0]
   13cd0:	2202      	movs	r2, #2
   13cd2:	4013      	ands	r3, r2
   13cd4:	d004      	beq.n	13ce0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   13cd6:	68fb      	ldr	r3, [r7, #12]
   13cd8:	2202      	movs	r2, #2
   13cda:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   13cdc:	231a      	movs	r3, #26
   13cde:	e031      	b.n	13d44 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   13ce0:	230b      	movs	r3, #11
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	781b      	ldrb	r3, [r3, #0]
   13ce6:	2204      	movs	r2, #4
   13ce8:	4013      	ands	r3, r2
   13cea:	d004      	beq.n	13cf6 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   13cec:	68fb      	ldr	r3, [r7, #12]
   13cee:	2204      	movs	r2, #4
   13cf0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   13cf2:	231e      	movs	r3, #30
   13cf4:	e026      	b.n	13d44 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   13cf6:	230b      	movs	r3, #11
   13cf8:	18fb      	adds	r3, r7, r3
   13cfa:	781b      	ldrb	r3, [r3, #0]
   13cfc:	2201      	movs	r2, #1
   13cfe:	4013      	ands	r3, r2
   13d00:	d004      	beq.n	13d0c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   13d02:	68fb      	ldr	r3, [r7, #12]
   13d04:	2201      	movs	r2, #1
   13d06:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   13d08:	2313      	movs	r3, #19
   13d0a:	e01b      	b.n	13d44 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   13d0c:	230b      	movs	r3, #11
   13d0e:	18fb      	adds	r3, r7, r3
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2210      	movs	r2, #16
   13d14:	4013      	ands	r3, r2
   13d16:	d004      	beq.n	13d22 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   13d18:	68fb      	ldr	r3, [r7, #12]
   13d1a:	2210      	movs	r2, #16
   13d1c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   13d1e:	2342      	movs	r3, #66	; 0x42
   13d20:	e010      	b.n	13d44 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   13d22:	230b      	movs	r3, #11
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	781b      	ldrb	r3, [r3, #0]
   13d28:	2220      	movs	r2, #32
   13d2a:	4013      	ands	r3, r2
   13d2c:	d004      	beq.n	13d38 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   13d2e:	68fb      	ldr	r3, [r7, #12]
   13d30:	2220      	movs	r2, #32
   13d32:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   13d34:	2341      	movs	r3, #65	; 0x41
   13d36:	e005      	b.n	13d44 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   13d38:	68fb      	ldr	r3, [r7, #12]
   13d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   13d3c:	b29a      	uxth	r2, r3
   13d3e:	683b      	ldr	r3, [r7, #0]
   13d40:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   13d42:	2300      	movs	r3, #0
}
   13d44:	0018      	movs	r0, r3
   13d46:	46bd      	mov	sp, r7
   13d48:	b004      	add	sp, #16
   13d4a:	bd80      	pop	{r7, pc}
   13d4c:	00013669 	.word	0x00013669

00013d50 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   13d50:	b590      	push	{r4, r7, lr}
   13d52:	b089      	sub	sp, #36	; 0x24
   13d54:	af00      	add	r7, sp, #0
   13d56:	60f8      	str	r0, [r7, #12]
   13d58:	60b9      	str	r1, [r7, #8]
   13d5a:	1dbb      	adds	r3, r7, #6
   13d5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   13d5e:	1dbb      	adds	r3, r7, #6
   13d60:	881b      	ldrh	r3, [r3, #0]
   13d62:	2b00      	cmp	r3, #0
   13d64:	d101      	bne.n	13d6a <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   13d66:	2317      	movs	r3, #23
   13d68:	e06d      	b.n	13e46 <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   13d6a:	68fb      	ldr	r3, [r7, #12]
   13d6c:	799b      	ldrb	r3, [r3, #6]
   13d6e:	2201      	movs	r2, #1
   13d70:	4053      	eors	r3, r2
   13d72:	b2db      	uxtb	r3, r3
   13d74:	2b00      	cmp	r3, #0
   13d76:	d001      	beq.n	13d7c <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   13d78:	231c      	movs	r3, #28
   13d7a:	e064      	b.n	13e46 <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13d7c:	68fb      	ldr	r3, [r7, #12]
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
   13d82:	231e      	movs	r3, #30
   13d84:	18fb      	adds	r3, r7, r3
   13d86:	2200      	movs	r2, #0
   13d88:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
   13d8a:	e054      	b.n	13e36 <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   13d8c:	2300      	movs	r3, #0
   13d8e:	61bb      	str	r3, [r7, #24]
   13d90:	e00f      	b.n	13db2 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
   13d92:	697b      	ldr	r3, [r7, #20]
   13d94:	7e1b      	ldrb	r3, [r3, #24]
   13d96:	b2db      	uxtb	r3, r3
   13d98:	001a      	movs	r2, r3
   13d9a:	2304      	movs	r3, #4
   13d9c:	4013      	ands	r3, r2
   13d9e:	d10d      	bne.n	13dbc <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
   13da0:	69bb      	ldr	r3, [r7, #24]
   13da2:	4a2b      	ldr	r2, [pc, #172]	; (13e50 <usart_read_buffer_wait+0x100>)
   13da4:	4293      	cmp	r3, r2
   13da6:	d101      	bne.n	13dac <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
   13da8:	2312      	movs	r3, #18
   13daa:	e04c      	b.n	13e46 <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   13dac:	69bb      	ldr	r3, [r7, #24]
   13dae:	3301      	adds	r3, #1
   13db0:	61bb      	str	r3, [r7, #24]
   13db2:	69bb      	ldr	r3, [r7, #24]
   13db4:	4a26      	ldr	r2, [pc, #152]	; (13e50 <usart_read_buffer_wait+0x100>)
   13db6:	4293      	cmp	r3, r2
   13db8:	d9eb      	bls.n	13d92 <usart_read_buffer_wait+0x42>
   13dba:	e000      	b.n	13dbe <usart_read_buffer_wait+0x6e>
				break;
   13dbc:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
   13dbe:	2310      	movs	r3, #16
   13dc0:	18fb      	adds	r3, r7, r3
   13dc2:	2200      	movs	r2, #0
   13dc4:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
   13dc6:	2313      	movs	r3, #19
   13dc8:	18fc      	adds	r4, r7, r3
   13dca:	2310      	movs	r3, #16
   13dcc:	18fa      	adds	r2, r7, r3
   13dce:	68fb      	ldr	r3, [r7, #12]
   13dd0:	0011      	movs	r1, r2
   13dd2:	0018      	movs	r0, r3
   13dd4:	4b1f      	ldr	r3, [pc, #124]	; (13e54 <usart_read_buffer_wait+0x104>)
   13dd6:	4798      	blx	r3
   13dd8:	0003      	movs	r3, r0
   13dda:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   13ddc:	2313      	movs	r3, #19
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	781b      	ldrb	r3, [r3, #0]
   13de2:	2b00      	cmp	r3, #0
   13de4:	d003      	beq.n	13dee <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
   13de6:	2313      	movs	r3, #19
   13de8:	18fb      	adds	r3, r7, r3
   13dea:	781b      	ldrb	r3, [r3, #0]
   13dec:	e02b      	b.n	13e46 <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   13dee:	231e      	movs	r3, #30
   13df0:	18fb      	adds	r3, r7, r3
   13df2:	881b      	ldrh	r3, [r3, #0]
   13df4:	221e      	movs	r2, #30
   13df6:	18ba      	adds	r2, r7, r2
   13df8:	1c59      	adds	r1, r3, #1
   13dfa:	8011      	strh	r1, [r2, #0]
   13dfc:	001a      	movs	r2, r3
   13dfe:	68bb      	ldr	r3, [r7, #8]
   13e00:	189b      	adds	r3, r3, r2
   13e02:	2210      	movs	r2, #16
   13e04:	18ba      	adds	r2, r7, r2
   13e06:	8812      	ldrh	r2, [r2, #0]
   13e08:	b2d2      	uxtb	r2, r2
   13e0a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   13e0c:	68fb      	ldr	r3, [r7, #12]
   13e0e:	795b      	ldrb	r3, [r3, #5]
   13e10:	2b01      	cmp	r3, #1
   13e12:	d110      	bne.n	13e36 <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
   13e14:	231e      	movs	r3, #30
   13e16:	18fb      	adds	r3, r7, r3
   13e18:	881b      	ldrh	r3, [r3, #0]
   13e1a:	221e      	movs	r2, #30
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	1c59      	adds	r1, r3, #1
   13e20:	8011      	strh	r1, [r2, #0]
   13e22:	001a      	movs	r2, r3
   13e24:	68bb      	ldr	r3, [r7, #8]
   13e26:	189b      	adds	r3, r3, r2
   13e28:	2210      	movs	r2, #16
   13e2a:	18ba      	adds	r2, r7, r2
   13e2c:	8812      	ldrh	r2, [r2, #0]
   13e2e:	0a12      	lsrs	r2, r2, #8
   13e30:	b292      	uxth	r2, r2
   13e32:	b2d2      	uxtb	r2, r2
   13e34:	701a      	strb	r2, [r3, #0]
	while (length--) {
   13e36:	1dbb      	adds	r3, r7, #6
   13e38:	881b      	ldrh	r3, [r3, #0]
   13e3a:	1dba      	adds	r2, r7, #6
   13e3c:	1e59      	subs	r1, r3, #1
   13e3e:	8011      	strh	r1, [r2, #0]
   13e40:	2b00      	cmp	r3, #0
   13e42:	d1a3      	bne.n	13d8c <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
   13e44:	2300      	movs	r3, #0
}
   13e46:	0018      	movs	r0, r3
   13e48:	46bd      	mov	sp, r7
   13e4a:	b009      	add	sp, #36	; 0x24
   13e4c:	bd90      	pop	{r4, r7, pc}
   13e4e:	46c0      	nop			; (mov r8, r8)
   13e50:	0000ffff 	.word	0x0000ffff
   13e54:	00013c65 	.word	0x00013c65

00013e58 <usart_is_syncing>:
{
   13e58:	b580      	push	{r7, lr}
   13e5a:	b084      	sub	sp, #16
   13e5c:	af00      	add	r7, sp, #0
   13e5e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   13e60:	687b      	ldr	r3, [r7, #4]
   13e62:	681b      	ldr	r3, [r3, #0]
   13e64:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   13e66:	68fb      	ldr	r3, [r7, #12]
   13e68:	69db      	ldr	r3, [r3, #28]
   13e6a:	1e5a      	subs	r2, r3, #1
   13e6c:	4193      	sbcs	r3, r2
   13e6e:	b2db      	uxtb	r3, r3
}
   13e70:	0018      	movs	r0, r3
   13e72:	46bd      	mov	sp, r7
   13e74:	b004      	add	sp, #16
   13e76:	bd80      	pop	{r7, pc}

00013e78 <_usart_wait_for_sync>:
{
   13e78:	b580      	push	{r7, lr}
   13e7a:	b082      	sub	sp, #8
   13e7c:	af00      	add	r7, sp, #0
   13e7e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   13e80:	46c0      	nop			; (mov r8, r8)
   13e82:	687b      	ldr	r3, [r7, #4]
   13e84:	0018      	movs	r0, r3
   13e86:	4b04      	ldr	r3, [pc, #16]	; (13e98 <_usart_wait_for_sync+0x20>)
   13e88:	4798      	blx	r3
   13e8a:	1e03      	subs	r3, r0, #0
   13e8c:	d1f9      	bne.n	13e82 <_usart_wait_for_sync+0xa>
}
   13e8e:	46c0      	nop			; (mov r8, r8)
   13e90:	46bd      	mov	sp, r7
   13e92:	b002      	add	sp, #8
   13e94:	bd80      	pop	{r7, pc}
   13e96:	46c0      	nop			; (mov r8, r8)
   13e98:	00013e59 	.word	0x00013e59

00013e9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   13e9c:	b580      	push	{r7, lr}
   13e9e:	b088      	sub	sp, #32
   13ea0:	af00      	add	r7, sp, #0
   13ea2:	0002      	movs	r2, r0
   13ea4:	1dfb      	adds	r3, r7, #7
   13ea6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   13ea8:	1dfb      	adds	r3, r7, #7
   13eaa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   13eac:	4ba3      	ldr	r3, [pc, #652]	; (1413c <_usart_interrupt_handler+0x2a0>)
   13eae:	0092      	lsls	r2, r2, #2
   13eb0:	58d3      	ldr	r3, [r2, r3]
   13eb2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   13eb4:	69bb      	ldr	r3, [r7, #24]
   13eb6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   13eb8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   13eba:	69bb      	ldr	r3, [r7, #24]
   13ebc:	0018      	movs	r0, r3
   13ebe:	4ba0      	ldr	r3, [pc, #640]	; (14140 <_usart_interrupt_handler+0x2a4>)
   13ec0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   13ec2:	697b      	ldr	r3, [r7, #20]
   13ec4:	7e1b      	ldrb	r3, [r3, #24]
   13ec6:	b2da      	uxtb	r2, r3
   13ec8:	2312      	movs	r3, #18
   13eca:	18fb      	adds	r3, r7, r3
   13ecc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   13ece:	697b      	ldr	r3, [r7, #20]
   13ed0:	7d9b      	ldrb	r3, [r3, #22]
   13ed2:	b2db      	uxtb	r3, r3
   13ed4:	b29a      	uxth	r2, r3
   13ed6:	2312      	movs	r3, #18
   13ed8:	18fb      	adds	r3, r7, r3
   13eda:	2112      	movs	r1, #18
   13edc:	1879      	adds	r1, r7, r1
   13ede:	8809      	ldrh	r1, [r1, #0]
   13ee0:	400a      	ands	r2, r1
   13ee2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   13ee4:	69bb      	ldr	r3, [r7, #24]
   13ee6:	2230      	movs	r2, #48	; 0x30
   13ee8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   13eea:	69ba      	ldr	r2, [r7, #24]
   13eec:	2131      	movs	r1, #49	; 0x31
   13eee:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   13ef0:	4013      	ands	r3, r2
   13ef2:	b2da      	uxtb	r2, r3
   13ef4:	2310      	movs	r3, #16
   13ef6:	18fb      	adds	r3, r7, r3
   13ef8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   13efa:	2312      	movs	r3, #18
   13efc:	18fb      	adds	r3, r7, r3
   13efe:	881b      	ldrh	r3, [r3, #0]
   13f00:	2201      	movs	r2, #1
   13f02:	4013      	ands	r3, r2
   13f04:	d044      	beq.n	13f90 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   13f06:	69bb      	ldr	r3, [r7, #24]
   13f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   13f0a:	b29b      	uxth	r3, r3
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	d03c      	beq.n	13f8a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   13f10:	69bb      	ldr	r3, [r7, #24]
   13f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f14:	781b      	ldrb	r3, [r3, #0]
   13f16:	b2da      	uxtb	r2, r3
   13f18:	231c      	movs	r3, #28
   13f1a:	18fb      	adds	r3, r7, r3
   13f1c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   13f1e:	69bb      	ldr	r3, [r7, #24]
   13f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f22:	1c5a      	adds	r2, r3, #1
   13f24:	69bb      	ldr	r3, [r7, #24]
   13f26:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   13f28:	69bb      	ldr	r3, [r7, #24]
   13f2a:	795b      	ldrb	r3, [r3, #5]
   13f2c:	2b01      	cmp	r3, #1
   13f2e:	d113      	bne.n	13f58 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   13f30:	69bb      	ldr	r3, [r7, #24]
   13f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f34:	781b      	ldrb	r3, [r3, #0]
   13f36:	b2db      	uxtb	r3, r3
   13f38:	021b      	lsls	r3, r3, #8
   13f3a:	b21a      	sxth	r2, r3
   13f3c:	231c      	movs	r3, #28
   13f3e:	18fb      	adds	r3, r7, r3
   13f40:	2100      	movs	r1, #0
   13f42:	5e5b      	ldrsh	r3, [r3, r1]
   13f44:	4313      	orrs	r3, r2
   13f46:	b21a      	sxth	r2, r3
   13f48:	231c      	movs	r3, #28
   13f4a:	18fb      	adds	r3, r7, r3
   13f4c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   13f4e:	69bb      	ldr	r3, [r7, #24]
   13f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f52:	1c5a      	adds	r2, r3, #1
   13f54:	69bb      	ldr	r3, [r7, #24]
   13f56:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   13f58:	231c      	movs	r3, #28
   13f5a:	18fb      	adds	r3, r7, r3
   13f5c:	881b      	ldrh	r3, [r3, #0]
   13f5e:	05db      	lsls	r3, r3, #23
   13f60:	0ddb      	lsrs	r3, r3, #23
   13f62:	b29a      	uxth	r2, r3
   13f64:	697b      	ldr	r3, [r7, #20]
   13f66:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   13f68:	69bb      	ldr	r3, [r7, #24]
   13f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   13f6c:	b29b      	uxth	r3, r3
   13f6e:	3b01      	subs	r3, #1
   13f70:	b29b      	uxth	r3, r3
   13f72:	69ba      	ldr	r2, [r7, #24]
   13f74:	1c19      	adds	r1, r3, #0
   13f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
   13f78:	2b00      	cmp	r3, #0
   13f7a:	d109      	bne.n	13f90 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   13f7c:	697b      	ldr	r3, [r7, #20]
   13f7e:	2201      	movs	r2, #1
   13f80:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   13f82:	697b      	ldr	r3, [r7, #20]
   13f84:	2202      	movs	r2, #2
   13f86:	759a      	strb	r2, [r3, #22]
   13f88:	e002      	b.n	13f90 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   13f8a:	697b      	ldr	r3, [r7, #20]
   13f8c:	2201      	movs	r2, #1
   13f8e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   13f90:	2312      	movs	r3, #18
   13f92:	18fb      	adds	r3, r7, r3
   13f94:	881b      	ldrh	r3, [r3, #0]
   13f96:	2202      	movs	r2, #2
   13f98:	4013      	ands	r3, r2
   13f9a:	d011      	beq.n	13fc0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   13f9c:	697b      	ldr	r3, [r7, #20]
   13f9e:	2202      	movs	r2, #2
   13fa0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   13fa2:	69bb      	ldr	r3, [r7, #24]
   13fa4:	2233      	movs	r2, #51	; 0x33
   13fa6:	2100      	movs	r1, #0
   13fa8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   13faa:	2310      	movs	r3, #16
   13fac:	18fb      	adds	r3, r7, r3
   13fae:	881b      	ldrh	r3, [r3, #0]
   13fb0:	2201      	movs	r2, #1
   13fb2:	4013      	ands	r3, r2
   13fb4:	d004      	beq.n	13fc0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   13fb6:	69bb      	ldr	r3, [r7, #24]
   13fb8:	68db      	ldr	r3, [r3, #12]
   13fba:	69ba      	ldr	r2, [r7, #24]
   13fbc:	0010      	movs	r0, r2
   13fbe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   13fc0:	2312      	movs	r3, #18
   13fc2:	18fb      	adds	r3, r7, r3
   13fc4:	881b      	ldrh	r3, [r3, #0]
   13fc6:	2204      	movs	r2, #4
   13fc8:	4013      	ands	r3, r2
   13fca:	d100      	bne.n	13fce <_usart_interrupt_handler+0x132>
   13fcc:	e0bd      	b.n	1414a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   13fce:	69bb      	ldr	r3, [r7, #24]
   13fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   13fd2:	b29b      	uxth	r3, r3
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	d100      	bne.n	13fda <_usart_interrupt_handler+0x13e>
   13fd8:	e0b4      	b.n	14144 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   13fda:	697b      	ldr	r3, [r7, #20]
   13fdc:	8b5b      	ldrh	r3, [r3, #26]
   13fde:	b29b      	uxth	r3, r3
   13fe0:	b2da      	uxtb	r2, r3
   13fe2:	231f      	movs	r3, #31
   13fe4:	18fb      	adds	r3, r7, r3
   13fe6:	213f      	movs	r1, #63	; 0x3f
   13fe8:	400a      	ands	r2, r1
   13fea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   13fec:	231f      	movs	r3, #31
   13fee:	18fb      	adds	r3, r7, r3
   13ff0:	781b      	ldrb	r3, [r3, #0]
   13ff2:	2208      	movs	r2, #8
   13ff4:	4013      	ands	r3, r2
   13ff6:	d007      	beq.n	14008 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   13ff8:	231f      	movs	r3, #31
   13ffa:	18fb      	adds	r3, r7, r3
   13ffc:	221f      	movs	r2, #31
   13ffe:	18ba      	adds	r2, r7, r2
   14000:	7812      	ldrb	r2, [r2, #0]
   14002:	2108      	movs	r1, #8
   14004:	438a      	bics	r2, r1
   14006:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   14008:	231f      	movs	r3, #31
   1400a:	18fb      	adds	r3, r7, r3
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	2b00      	cmp	r3, #0
   14010:	d050      	beq.n	140b4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   14012:	231f      	movs	r3, #31
   14014:	18fb      	adds	r3, r7, r3
   14016:	781b      	ldrb	r3, [r3, #0]
   14018:	2202      	movs	r2, #2
   1401a:	4013      	ands	r3, r2
   1401c:	d007      	beq.n	1402e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1401e:	69bb      	ldr	r3, [r7, #24]
   14020:	2232      	movs	r2, #50	; 0x32
   14022:	211a      	movs	r1, #26
   14024:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   14026:	697b      	ldr	r3, [r7, #20]
   14028:	2202      	movs	r2, #2
   1402a:	835a      	strh	r2, [r3, #26]
   1402c:	e036      	b.n	1409c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1402e:	231f      	movs	r3, #31
   14030:	18fb      	adds	r3, r7, r3
   14032:	781b      	ldrb	r3, [r3, #0]
   14034:	2204      	movs	r2, #4
   14036:	4013      	ands	r3, r2
   14038:	d007      	beq.n	1404a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1403a:	69bb      	ldr	r3, [r7, #24]
   1403c:	2232      	movs	r2, #50	; 0x32
   1403e:	211e      	movs	r1, #30
   14040:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   14042:	697b      	ldr	r3, [r7, #20]
   14044:	2204      	movs	r2, #4
   14046:	835a      	strh	r2, [r3, #26]
   14048:	e028      	b.n	1409c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1404a:	231f      	movs	r3, #31
   1404c:	18fb      	adds	r3, r7, r3
   1404e:	781b      	ldrb	r3, [r3, #0]
   14050:	2201      	movs	r2, #1
   14052:	4013      	ands	r3, r2
   14054:	d007      	beq.n	14066 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   14056:	69bb      	ldr	r3, [r7, #24]
   14058:	2232      	movs	r2, #50	; 0x32
   1405a:	2113      	movs	r1, #19
   1405c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1405e:	697b      	ldr	r3, [r7, #20]
   14060:	2201      	movs	r2, #1
   14062:	835a      	strh	r2, [r3, #26]
   14064:	e01a      	b.n	1409c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   14066:	231f      	movs	r3, #31
   14068:	18fb      	adds	r3, r7, r3
   1406a:	781b      	ldrb	r3, [r3, #0]
   1406c:	2210      	movs	r2, #16
   1406e:	4013      	ands	r3, r2
   14070:	d007      	beq.n	14082 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   14072:	69bb      	ldr	r3, [r7, #24]
   14074:	2232      	movs	r2, #50	; 0x32
   14076:	2142      	movs	r1, #66	; 0x42
   14078:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1407a:	697b      	ldr	r3, [r7, #20]
   1407c:	2210      	movs	r2, #16
   1407e:	835a      	strh	r2, [r3, #26]
   14080:	e00c      	b.n	1409c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   14082:	231f      	movs	r3, #31
   14084:	18fb      	adds	r3, r7, r3
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	2220      	movs	r2, #32
   1408a:	4013      	ands	r3, r2
   1408c:	d006      	beq.n	1409c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1408e:	69bb      	ldr	r3, [r7, #24]
   14090:	2232      	movs	r2, #50	; 0x32
   14092:	2141      	movs	r1, #65	; 0x41
   14094:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   14096:	697b      	ldr	r3, [r7, #20]
   14098:	2220      	movs	r2, #32
   1409a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   1409c:	2310      	movs	r3, #16
   1409e:	18fb      	adds	r3, r7, r3
   140a0:	881b      	ldrh	r3, [r3, #0]
   140a2:	2204      	movs	r2, #4
   140a4:	4013      	ands	r3, r2
				if (callback_status
   140a6:	d050      	beq.n	1414a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   140a8:	69bb      	ldr	r3, [r7, #24]
   140aa:	695b      	ldr	r3, [r3, #20]
   140ac:	69ba      	ldr	r2, [r7, #24]
   140ae:	0010      	movs	r0, r2
   140b0:	4798      	blx	r3
   140b2:	e04a      	b.n	1414a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   140b4:	697b      	ldr	r3, [r7, #20]
   140b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   140b8:	b29a      	uxth	r2, r3
   140ba:	230e      	movs	r3, #14
   140bc:	18fb      	adds	r3, r7, r3
   140be:	05d2      	lsls	r2, r2, #23
   140c0:	0dd2      	lsrs	r2, r2, #23
   140c2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   140c4:	69bb      	ldr	r3, [r7, #24]
   140c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   140c8:	220e      	movs	r2, #14
   140ca:	18ba      	adds	r2, r7, r2
   140cc:	8812      	ldrh	r2, [r2, #0]
   140ce:	b2d2      	uxtb	r2, r2
   140d0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   140d2:	69bb      	ldr	r3, [r7, #24]
   140d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   140d6:	1c5a      	adds	r2, r3, #1
   140d8:	69bb      	ldr	r3, [r7, #24]
   140da:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   140dc:	69bb      	ldr	r3, [r7, #24]
   140de:	795b      	ldrb	r3, [r3, #5]
   140e0:	2b01      	cmp	r3, #1
   140e2:	d10d      	bne.n	14100 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   140e4:	69bb      	ldr	r3, [r7, #24]
   140e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   140e8:	220e      	movs	r2, #14
   140ea:	18ba      	adds	r2, r7, r2
   140ec:	8812      	ldrh	r2, [r2, #0]
   140ee:	0a12      	lsrs	r2, r2, #8
   140f0:	b292      	uxth	r2, r2
   140f2:	b2d2      	uxtb	r2, r2
   140f4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   140f6:	69bb      	ldr	r3, [r7, #24]
   140f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   140fa:	1c5a      	adds	r2, r3, #1
   140fc:	69bb      	ldr	r3, [r7, #24]
   140fe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   14100:	69bb      	ldr	r3, [r7, #24]
   14102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14104:	b29b      	uxth	r3, r3
   14106:	3b01      	subs	r3, #1
   14108:	b29b      	uxth	r3, r3
   1410a:	69ba      	ldr	r2, [r7, #24]
   1410c:	1c19      	adds	r1, r3, #0
   1410e:	8591      	strh	r1, [r2, #44]	; 0x2c
   14110:	2b00      	cmp	r3, #0
   14112:	d11a      	bne.n	1414a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14114:	697b      	ldr	r3, [r7, #20]
   14116:	2204      	movs	r2, #4
   14118:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1411a:	69bb      	ldr	r3, [r7, #24]
   1411c:	2232      	movs	r2, #50	; 0x32
   1411e:	2100      	movs	r1, #0
   14120:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   14122:	2310      	movs	r3, #16
   14124:	18fb      	adds	r3, r7, r3
   14126:	881b      	ldrh	r3, [r3, #0]
   14128:	2202      	movs	r2, #2
   1412a:	4013      	ands	r3, r2
					if (callback_status
   1412c:	d00d      	beq.n	1414a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1412e:	69bb      	ldr	r3, [r7, #24]
   14130:	691b      	ldr	r3, [r3, #16]
   14132:	69ba      	ldr	r2, [r7, #24]
   14134:	0010      	movs	r0, r2
   14136:	4798      	blx	r3
   14138:	e007      	b.n	1414a <_usart_interrupt_handler+0x2ae>
   1413a:	46c0      	nop			; (mov r8, r8)
   1413c:	200015d4 	.word	0x200015d4
   14140:	00013e79 	.word	0x00013e79
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14144:	697b      	ldr	r3, [r7, #20]
   14146:	2204      	movs	r2, #4
   14148:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1414a:	2312      	movs	r3, #18
   1414c:	18fb      	adds	r3, r7, r3
   1414e:	881b      	ldrh	r3, [r3, #0]
   14150:	2210      	movs	r2, #16
   14152:	4013      	ands	r3, r2
   14154:	d010      	beq.n	14178 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   14156:	697b      	ldr	r3, [r7, #20]
   14158:	2210      	movs	r2, #16
   1415a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1415c:	697b      	ldr	r3, [r7, #20]
   1415e:	2210      	movs	r2, #16
   14160:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   14162:	2310      	movs	r3, #16
   14164:	18fb      	adds	r3, r7, r3
   14166:	881b      	ldrh	r3, [r3, #0]
   14168:	2210      	movs	r2, #16
   1416a:	4013      	ands	r3, r2
   1416c:	d004      	beq.n	14178 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1416e:	69bb      	ldr	r3, [r7, #24]
   14170:	69db      	ldr	r3, [r3, #28]
   14172:	69ba      	ldr	r2, [r7, #24]
   14174:	0010      	movs	r0, r2
   14176:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   14178:	2312      	movs	r3, #18
   1417a:	18fb      	adds	r3, r7, r3
   1417c:	881b      	ldrh	r3, [r3, #0]
   1417e:	2220      	movs	r2, #32
   14180:	4013      	ands	r3, r2
   14182:	d010      	beq.n	141a6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   14184:	697b      	ldr	r3, [r7, #20]
   14186:	2220      	movs	r2, #32
   14188:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1418a:	697b      	ldr	r3, [r7, #20]
   1418c:	2220      	movs	r2, #32
   1418e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   14190:	2310      	movs	r3, #16
   14192:	18fb      	adds	r3, r7, r3
   14194:	881b      	ldrh	r3, [r3, #0]
   14196:	2208      	movs	r2, #8
   14198:	4013      	ands	r3, r2
   1419a:	d004      	beq.n	141a6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1419c:	69bb      	ldr	r3, [r7, #24]
   1419e:	699b      	ldr	r3, [r3, #24]
   141a0:	69ba      	ldr	r2, [r7, #24]
   141a2:	0010      	movs	r0, r2
   141a4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   141a6:	2312      	movs	r3, #18
   141a8:	18fb      	adds	r3, r7, r3
   141aa:	881b      	ldrh	r3, [r3, #0]
   141ac:	2208      	movs	r2, #8
   141ae:	4013      	ands	r3, r2
   141b0:	d010      	beq.n	141d4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   141b2:	697b      	ldr	r3, [r7, #20]
   141b4:	2208      	movs	r2, #8
   141b6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   141b8:	697b      	ldr	r3, [r7, #20]
   141ba:	2208      	movs	r2, #8
   141bc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   141be:	2310      	movs	r3, #16
   141c0:	18fb      	adds	r3, r7, r3
   141c2:	881b      	ldrh	r3, [r3, #0]
   141c4:	2220      	movs	r2, #32
   141c6:	4013      	ands	r3, r2
   141c8:	d004      	beq.n	141d4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   141ca:	69bb      	ldr	r3, [r7, #24]
   141cc:	6a1b      	ldr	r3, [r3, #32]
   141ce:	69ba      	ldr	r2, [r7, #24]
   141d0:	0010      	movs	r0, r2
   141d2:	4798      	blx	r3
		}
	}
#endif
}
   141d4:	46c0      	nop			; (mov r8, r8)
   141d6:	46bd      	mov	sp, r7
   141d8:	b008      	add	sp, #32
   141da:	bd80      	pop	{r7, pc}

000141dc <system_gclk_gen_get_config_defaults>:
{
   141dc:	b580      	push	{r7, lr}
   141de:	b082      	sub	sp, #8
   141e0:	af00      	add	r7, sp, #0
   141e2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   141e4:	687b      	ldr	r3, [r7, #4]
   141e6:	2201      	movs	r2, #1
   141e8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   141ea:	687b      	ldr	r3, [r7, #4]
   141ec:	2200      	movs	r2, #0
   141ee:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   141f0:	687b      	ldr	r3, [r7, #4]
   141f2:	2206      	movs	r2, #6
   141f4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   141f6:	687b      	ldr	r3, [r7, #4]
   141f8:	2200      	movs	r2, #0
   141fa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   141fc:	687b      	ldr	r3, [r7, #4]
   141fe:	2200      	movs	r2, #0
   14200:	725a      	strb	r2, [r3, #9]
}
   14202:	46c0      	nop			; (mov r8, r8)
   14204:	46bd      	mov	sp, r7
   14206:	b002      	add	sp, #8
   14208:	bd80      	pop	{r7, pc}

0001420a <system_gclk_chan_get_config_defaults>:
{
   1420a:	b580      	push	{r7, lr}
   1420c:	b082      	sub	sp, #8
   1420e:	af00      	add	r7, sp, #0
   14210:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14212:	687b      	ldr	r3, [r7, #4]
   14214:	2200      	movs	r2, #0
   14216:	701a      	strb	r2, [r3, #0]
}
   14218:	46c0      	nop			; (mov r8, r8)
   1421a:	46bd      	mov	sp, r7
   1421c:	b002      	add	sp, #8
   1421e:	bd80      	pop	{r7, pc}

00014220 <system_clock_source_xosc32k_get_config_defaults>:
{
   14220:	b580      	push	{r7, lr}
   14222:	b082      	sub	sp, #8
   14224:	af00      	add	r7, sp, #0
   14226:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   14228:	687b      	ldr	r3, [r7, #4]
   1422a:	2200      	movs	r2, #0
   1422c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   1422e:	687b      	ldr	r3, [r7, #4]
   14230:	2202      	movs	r2, #2
   14232:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
   14234:	687b      	ldr	r3, [r7, #4]
   14236:	2280      	movs	r2, #128	; 0x80
   14238:	0212      	lsls	r2, r2, #8
   1423a:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
   1423c:	687b      	ldr	r3, [r7, #4]
   1423e:	2200      	movs	r2, #0
   14240:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
   14242:	687b      	ldr	r3, [r7, #4]
   14244:	2201      	movs	r2, #1
   14246:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
   14248:	687b      	ldr	r3, [r7, #4]
   1424a:	2200      	movs	r2, #0
   1424c:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
   1424e:	687b      	ldr	r3, [r7, #4]
   14250:	2201      	movs	r2, #1
   14252:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
   14254:	687b      	ldr	r3, [r7, #4]
   14256:	2200      	movs	r2, #0
   14258:	729a      	strb	r2, [r3, #10]
}
   1425a:	46c0      	nop			; (mov r8, r8)
   1425c:	46bd      	mov	sp, r7
   1425e:	b002      	add	sp, #8
   14260:	bd80      	pop	{r7, pc}

00014262 <system_clock_source_osc16m_get_config_defaults>:
{
   14262:	b580      	push	{r7, lr}
   14264:	b082      	sub	sp, #8
   14266:	af00      	add	r7, sp, #0
   14268:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
   1426a:	687b      	ldr	r3, [r7, #4]
   1426c:	2200      	movs	r2, #0
   1426e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   14270:	687b      	ldr	r3, [r7, #4]
   14272:	2200      	movs	r2, #0
   14274:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   14276:	687b      	ldr	r3, [r7, #4]
   14278:	2201      	movs	r2, #1
   1427a:	709a      	strb	r2, [r3, #2]
}
   1427c:	46c0      	nop			; (mov r8, r8)
   1427e:	46bd      	mov	sp, r7
   14280:	b002      	add	sp, #8
   14282:	bd80      	pop	{r7, pc}

00014284 <system_clock_source_dfll_get_config_defaults>:
{
   14284:	b580      	push	{r7, lr}
   14286:	b082      	sub	sp, #8
   14288:	af00      	add	r7, sp, #0
   1428a:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   1428c:	687b      	ldr	r3, [r7, #4]
   1428e:	2200      	movs	r2, #0
   14290:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   14292:	687b      	ldr	r3, [r7, #4]
   14294:	2200      	movs	r2, #0
   14296:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14298:	687b      	ldr	r3, [r7, #4]
   1429a:	2200      	movs	r2, #0
   1429c:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   1429e:	687b      	ldr	r3, [r7, #4]
   142a0:	2200      	movs	r2, #0
   142a2:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   142a4:	687b      	ldr	r3, [r7, #4]
   142a6:	2200      	movs	r2, #0
   142a8:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
   142aa:	687b      	ldr	r3, [r7, #4]
   142ac:	2201      	movs	r2, #1
   142ae:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
   142b0:	687b      	ldr	r3, [r7, #4]
   142b2:	2200      	movs	r2, #0
   142b4:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   142b6:	687b      	ldr	r3, [r7, #4]
   142b8:	2207      	movs	r2, #7
   142ba:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
   142bc:	687b      	ldr	r3, [r7, #4]
   142be:	223f      	movs	r2, #63	; 0x3f
   142c0:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
   142c2:	687b      	ldr	r3, [r7, #4]
   142c4:	2201      	movs	r2, #1
   142c6:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
   142c8:	687b      	ldr	r3, [r7, #4]
   142ca:	2201      	movs	r2, #1
   142cc:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
   142ce:	687b      	ldr	r3, [r7, #4]
   142d0:	220c      	movs	r2, #12
   142d2:	825a      	strh	r2, [r3, #18]
}
   142d4:	46c0      	nop			; (mov r8, r8)
   142d6:	46bd      	mov	sp, r7
   142d8:	b002      	add	sp, #8
   142da:	bd80      	pop	{r7, pc}

000142dc <system_main_clock_set_failure_detect>:
{
   142dc:	b580      	push	{r7, lr}
   142de:	b082      	sub	sp, #8
   142e0:	af00      	add	r7, sp, #0
   142e2:	0002      	movs	r2, r0
   142e4:	1dfb      	adds	r3, r7, #7
   142e6:	701a      	strb	r2, [r3, #0]
}
   142e8:	46c0      	nop			; (mov r8, r8)
   142ea:	46bd      	mov	sp, r7
   142ec:	b002      	add	sp, #8
   142ee:	bd80      	pop	{r7, pc}

000142f0 <system_cpu_clock_set_divider>:
{
   142f0:	b580      	push	{r7, lr}
   142f2:	b082      	sub	sp, #8
   142f4:	af00      	add	r7, sp, #0
   142f6:	0002      	movs	r2, r0
   142f8:	1dfb      	adds	r3, r7, #7
   142fa:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   142fc:	4a05      	ldr	r2, [pc, #20]	; (14314 <system_cpu_clock_set_divider+0x24>)
   142fe:	1dfb      	adds	r3, r7, #7
   14300:	781b      	ldrb	r3, [r3, #0]
   14302:	2101      	movs	r1, #1
   14304:	4099      	lsls	r1, r3
   14306:	000b      	movs	r3, r1
   14308:	b2db      	uxtb	r3, r3
   1430a:	7113      	strb	r3, [r2, #4]
}
   1430c:	46c0      	nop			; (mov r8, r8)
   1430e:	46bd      	mov	sp, r7
   14310:	b002      	add	sp, #8
   14312:	bd80      	pop	{r7, pc}
   14314:	40000400 	.word	0x40000400

00014318 <system_low_power_clock_set_divider>:
{
   14318:	b580      	push	{r7, lr}
   1431a:	b082      	sub	sp, #8
   1431c:	af00      	add	r7, sp, #0
   1431e:	0002      	movs	r2, r0
   14320:	1dfb      	adds	r3, r7, #7
   14322:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   14324:	4a05      	ldr	r2, [pc, #20]	; (1433c <system_low_power_clock_set_divider+0x24>)
   14326:	1dfb      	adds	r3, r7, #7
   14328:	781b      	ldrb	r3, [r3, #0]
   1432a:	2101      	movs	r1, #1
   1432c:	4099      	lsls	r1, r3
   1432e:	000b      	movs	r3, r1
   14330:	b2db      	uxtb	r3, r3
   14332:	7153      	strb	r3, [r2, #5]
}
   14334:	46c0      	nop			; (mov r8, r8)
   14336:	46bd      	mov	sp, r7
   14338:	b002      	add	sp, #8
   1433a:	bd80      	pop	{r7, pc}
   1433c:	40000400 	.word	0x40000400

00014340 <system_backup_clock_set_divider>:
{
   14340:	b580      	push	{r7, lr}
   14342:	b082      	sub	sp, #8
   14344:	af00      	add	r7, sp, #0
   14346:	0002      	movs	r2, r0
   14348:	1dfb      	adds	r3, r7, #7
   1434a:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   1434c:	4a05      	ldr	r2, [pc, #20]	; (14364 <system_backup_clock_set_divider+0x24>)
   1434e:	1dfb      	adds	r3, r7, #7
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	2101      	movs	r1, #1
   14354:	4099      	lsls	r1, r3
   14356:	000b      	movs	r3, r1
   14358:	b2db      	uxtb	r3, r3
   1435a:	7193      	strb	r3, [r2, #6]
}
   1435c:	46c0      	nop			; (mov r8, r8)
   1435e:	46bd      	mov	sp, r7
   14360:	b002      	add	sp, #8
   14362:	bd80      	pop	{r7, pc}
   14364:	40000400 	.word	0x40000400

00014368 <system_cpu_clock_get_hz>:
{
   14368:	b580      	push	{r7, lr}
   1436a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   1436c:	2000      	movs	r0, #0
   1436e:	4b07      	ldr	r3, [pc, #28]	; (1438c <system_cpu_clock_get_hz+0x24>)
   14370:	4798      	blx	r3
   14372:	0002      	movs	r2, r0
   14374:	4b06      	ldr	r3, [pc, #24]	; (14390 <system_cpu_clock_get_hz+0x28>)
   14376:	791b      	ldrb	r3, [r3, #4]
   14378:	b2db      	uxtb	r3, r3
   1437a:	0019      	movs	r1, r3
   1437c:	4b05      	ldr	r3, [pc, #20]	; (14394 <system_cpu_clock_get_hz+0x2c>)
   1437e:	0010      	movs	r0, r2
   14380:	4798      	blx	r3
   14382:	0003      	movs	r3, r0
}
   14384:	0018      	movs	r0, r3
   14386:	46bd      	mov	sp, r7
   14388:	bd80      	pop	{r7, pc}
   1438a:	46c0      	nop			; (mov r8, r8)
   1438c:	00014fa9 	.word	0x00014fa9
   14390:	40000400 	.word	0x40000400
   14394:	00017e9d 	.word	0x00017e9d

00014398 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   14398:	b580      	push	{r7, lr}
   1439a:	b082      	sub	sp, #8
   1439c:	af00      	add	r7, sp, #0
   1439e:	0002      	movs	r2, r0
   143a0:	1dfb      	adds	r3, r7, #7
   143a2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   143a4:	4a08      	ldr	r2, [pc, #32]	; (143c8 <system_flash_set_waitstates+0x30>)
   143a6:	1dfb      	adds	r3, r7, #7
   143a8:	781b      	ldrb	r3, [r3, #0]
   143aa:	210f      	movs	r1, #15
   143ac:	400b      	ands	r3, r1
   143ae:	b2d9      	uxtb	r1, r3
   143b0:	6853      	ldr	r3, [r2, #4]
   143b2:	200f      	movs	r0, #15
   143b4:	4001      	ands	r1, r0
   143b6:	0049      	lsls	r1, r1, #1
   143b8:	201e      	movs	r0, #30
   143ba:	4383      	bics	r3, r0
   143bc:	430b      	orrs	r3, r1
   143be:	6053      	str	r3, [r2, #4]
}
   143c0:	46c0      	nop			; (mov r8, r8)
   143c2:	46bd      	mov	sp, r7
   143c4:	b002      	add	sp, #8
   143c6:	bd80      	pop	{r7, pc}
   143c8:	41004000 	.word	0x41004000

000143cc <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
   143cc:	b580      	push	{r7, lr}
   143ce:	b082      	sub	sp, #8
   143d0:	af00      	add	r7, sp, #0
   143d2:	0002      	movs	r2, r0
   143d4:	1dfb      	adds	r3, r7, #7
   143d6:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   143d8:	2380      	movs	r3, #128	; 0x80
   143da:	05db      	lsls	r3, r3, #23
   143dc:	789b      	ldrb	r3, [r3, #2]
   143de:	b2db      	uxtb	r3, r3
   143e0:	1dfa      	adds	r2, r7, #7
   143e2:	7812      	ldrb	r2, [r2, #0]
   143e4:	429a      	cmp	r2, r3
   143e6:	d101      	bne.n	143ec <system_switch_performance_level+0x20>
		return STATUS_OK;
   143e8:	2300      	movs	r3, #0
   143ea:	e010      	b.n	1440e <system_switch_performance_level+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   143ec:	2380      	movs	r3, #128	; 0x80
   143ee:	05db      	lsls	r3, r3, #23
   143f0:	2201      	movs	r2, #1
   143f2:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
   143f4:	2380      	movs	r3, #128	; 0x80
   143f6:	05db      	lsls	r3, r3, #23
   143f8:	1dfa      	adds	r2, r7, #7
   143fa:	7812      	ldrb	r2, [r2, #0]
   143fc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	2380      	movs	r3, #128	; 0x80
   14402:	05db      	lsls	r3, r3, #23
   14404:	799b      	ldrb	r3, [r3, #6]
   14406:	b2db      	uxtb	r3, r3
   14408:	2b00      	cmp	r3, #0
   1440a:	d0f9      	beq.n	14400 <system_switch_performance_level+0x34>
		;
	}
	return STATUS_OK;
   1440c:	2300      	movs	r3, #0
}
   1440e:	0018      	movs	r0, r3
   14410:	46bd      	mov	sp, r7
   14412:	b002      	add	sp, #8
   14414:	bd80      	pop	{r7, pc}
	...

00014418 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   14418:	b580      	push	{r7, lr}
   1441a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   1441c:	46c0      	nop			; (mov r8, r8)
   1441e:	4b04      	ldr	r3, [pc, #16]	; (14430 <_system_dfll_wait_for_sync+0x18>)
   14420:	68da      	ldr	r2, [r3, #12]
   14422:	2380      	movs	r3, #128	; 0x80
   14424:	005b      	lsls	r3, r3, #1
   14426:	4013      	ands	r3, r2
   14428:	d0f9      	beq.n	1441e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   1442a:	46c0      	nop			; (mov r8, r8)
   1442c:	46bd      	mov	sp, r7
   1442e:	bd80      	pop	{r7, pc}
   14430:	40000c00 	.word	0x40000c00

00014434 <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
   14434:	b580      	push	{r7, lr}
   14436:	b084      	sub	sp, #16
   14438:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
   1443a:	1d3b      	adds	r3, r7, #4
   1443c:	0018      	movs	r0, r3
   1443e:	4b22      	ldr	r3, [pc, #136]	; (144c8 <_system_clock_source_osc16m_freq_sel+0x94>)
   14440:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   14442:	1d3b      	adds	r3, r7, #4
   14444:	2203      	movs	r2, #3
   14446:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
   14448:	1d3b      	adds	r3, r7, #4
   1444a:	0019      	movs	r1, r3
   1444c:	2000      	movs	r0, #0
   1444e:	4b1f      	ldr	r3, [pc, #124]	; (144cc <_system_clock_source_osc16m_freq_sel+0x98>)
   14450:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
   14452:	2006      	movs	r0, #6
   14454:	4b1e      	ldr	r3, [pc, #120]	; (144d0 <_system_clock_source_osc16m_freq_sel+0x9c>)
   14456:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
   14458:	003b      	movs	r3, r7
   1445a:	0018      	movs	r0, r3
   1445c:	4b1d      	ldr	r3, [pc, #116]	; (144d4 <_system_clock_source_osc16m_freq_sel+0xa0>)
   1445e:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
   14460:	003b      	movs	r3, r7
   14462:	2201      	movs	r2, #1
   14464:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
   14466:	003b      	movs	r3, r7
   14468:	2200      	movs	r2, #0
   1446a:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   1446c:	003b      	movs	r3, r7
   1446e:	2200      	movs	r2, #0
   14470:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
   14472:	003b      	movs	r3, r7
   14474:	0018      	movs	r0, r3
   14476:	4b18      	ldr	r3, [pc, #96]	; (144d8 <_system_clock_source_osc16m_freq_sel+0xa4>)
   14478:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
   1447a:	2006      	movs	r0, #6
   1447c:	4b17      	ldr	r3, [pc, #92]	; (144dc <_system_clock_source_osc16m_freq_sel+0xa8>)
   1447e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
   14480:	46c0      	nop			; (mov r8, r8)
   14482:	2006      	movs	r0, #6
   14484:	4b16      	ldr	r3, [pc, #88]	; (144e0 <_system_clock_source_osc16m_freq_sel+0xac>)
   14486:	4798      	blx	r3
   14488:	0003      	movs	r3, r0
   1448a:	001a      	movs	r2, r3
   1448c:	2301      	movs	r3, #1
   1448e:	4053      	eors	r3, r2
   14490:	b2db      	uxtb	r3, r3
   14492:	2b00      	cmp	r3, #0
   14494:	d1f5      	bne.n	14482 <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
   14496:	1d3b      	adds	r3, r7, #4
   14498:	0018      	movs	r0, r3
   1449a:	4b0b      	ldr	r3, [pc, #44]	; (144c8 <_system_clock_source_osc16m_freq_sel+0x94>)
   1449c:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
   1449e:	1d3b      	adds	r3, r7, #4
   144a0:	2206      	movs	r2, #6
   144a2:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
   144a4:	1d3b      	adds	r3, r7, #4
   144a6:	0019      	movs	r1, r3
   144a8:	2000      	movs	r0, #0
   144aa:	4b08      	ldr	r3, [pc, #32]	; (144cc <_system_clock_source_osc16m_freq_sel+0x98>)
   144ac:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
   144ae:	490d      	ldr	r1, [pc, #52]	; (144e4 <_system_clock_source_osc16m_freq_sel+0xb0>)
   144b0:	4b0c      	ldr	r3, [pc, #48]	; (144e4 <_system_clock_source_osc16m_freq_sel+0xb0>)
   144b2:	7d1b      	ldrb	r3, [r3, #20]
   144b4:	b2db      	uxtb	r3, r3
   144b6:	2280      	movs	r2, #128	; 0x80
   144b8:	4252      	negs	r2, r2
   144ba:	4313      	orrs	r3, r2
   144bc:	b2db      	uxtb	r3, r3
   144be:	750b      	strb	r3, [r1, #20]
	}
}
   144c0:	46c0      	nop			; (mov r8, r8)
   144c2:	46bd      	mov	sp, r7
   144c4:	b004      	add	sp, #16
   144c6:	bd80      	pop	{r7, pc}
   144c8:	000141dd 	.word	0x000141dd
   144cc:	00014e3d 	.word	0x00014e3d
   144d0:	00014901 	.word	0x00014901
   144d4:	00014263 	.word	0x00014263
   144d8:	000145ed 	.word	0x000145ed
   144dc:	00014841 	.word	0x00014841
   144e0:	000149ad 	.word	0x000149ad
   144e4:	40000c00 	.word	0x40000c00

000144e8 <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   144ec:	4b0c      	ldr	r3, [pc, #48]	; (14520 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   144ee:	2202      	movs	r2, #2
   144f0:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   144f2:	4b0c      	ldr	r3, [pc, #48]	; (14524 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   144f4:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   144f6:	4a0a      	ldr	r2, [pc, #40]	; (14520 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   144f8:	4b0b      	ldr	r3, [pc, #44]	; (14528 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   144fa:	689b      	ldr	r3, [r3, #8]
   144fc:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   144fe:	4a08      	ldr	r2, [pc, #32]	; (14520 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14500:	4b09      	ldr	r3, [pc, #36]	; (14528 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14502:	685b      	ldr	r3, [r3, #4]
   14504:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
   14506:	4b06      	ldr	r3, [pc, #24]	; (14520 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14508:	2200      	movs	r2, #0
   1450a:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   1450c:	4b05      	ldr	r3, [pc, #20]	; (14524 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1450e:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   14510:	4a03      	ldr	r2, [pc, #12]	; (14520 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14512:	4b05      	ldr	r3, [pc, #20]	; (14528 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14514:	681b      	ldr	r3, [r3, #0]
   14516:	b29b      	uxth	r3, r3
   14518:	8313      	strh	r3, [r2, #24]
}
   1451a:	46c0      	nop			; (mov r8, r8)
   1451c:	46bd      	mov	sp, r7
   1451e:	bd80      	pop	{r7, pc}
   14520:	40000c00 	.word	0x40000c00
   14524:	00014419 	.word	0x00014419
   14528:	200007e8 	.word	0x200007e8

0001452c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b082      	sub	sp, #8
   14530:	af00      	add	r7, sp, #0
   14532:	0002      	movs	r2, r0
   14534:	1dfb      	adds	r3, r7, #7
   14536:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   14538:	1dfb      	adds	r3, r7, #7
   1453a:	781b      	ldrb	r3, [r3, #0]
   1453c:	2b08      	cmp	r3, #8
   1453e:	d842      	bhi.n	145c6 <system_clock_source_get_hz+0x9a>
   14540:	009a      	lsls	r2, r3, #2
   14542:	4b23      	ldr	r3, [pc, #140]	; (145d0 <system_clock_source_get_hz+0xa4>)
   14544:	18d3      	adds	r3, r2, r3
   14546:	681b      	ldr	r3, [r3, #0]
   14548:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1454a:	4b22      	ldr	r3, [pc, #136]	; (145d4 <system_clock_source_get_hz+0xa8>)
   1454c:	691b      	ldr	r3, [r3, #16]
   1454e:	e03b      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   14550:	4b21      	ldr	r3, [pc, #132]	; (145d8 <system_clock_source_get_hz+0xac>)
   14552:	7d1b      	ldrb	r3, [r3, #20]
   14554:	071b      	lsls	r3, r3, #28
   14556:	0f9b      	lsrs	r3, r3, #30
   14558:	b2db      	uxtb	r3, r3
   1455a:	3301      	adds	r3, #1
   1455c:	001a      	movs	r2, r3
   1455e:	4b1f      	ldr	r3, [pc, #124]	; (145dc <system_clock_source_get_hz+0xb0>)
   14560:	4353      	muls	r3, r2
   14562:	e031      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   14564:	2380      	movs	r3, #128	; 0x80
   14566:	021b      	lsls	r3, r3, #8
   14568:	e02e      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   1456a:	2380      	movs	r3, #128	; 0x80
   1456c:	021b      	lsls	r3, r3, #8
   1456e:	e02b      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   14570:	4b18      	ldr	r3, [pc, #96]	; (145d4 <system_clock_source_get_hz+0xa8>)
   14572:	695b      	ldr	r3, [r3, #20]
   14574:	e028      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   14576:	4b17      	ldr	r3, [pc, #92]	; (145d4 <system_clock_source_get_hz+0xa8>)
   14578:	681b      	ldr	r3, [r3, #0]
   1457a:	2202      	movs	r2, #2
   1457c:	4013      	ands	r3, r2
   1457e:	d101      	bne.n	14584 <system_clock_source_get_hz+0x58>
			return 0;
   14580:	2300      	movs	r3, #0
   14582:	e021      	b.n	145c8 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   14584:	4b16      	ldr	r3, [pc, #88]	; (145e0 <system_clock_source_get_hz+0xb4>)
   14586:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   14588:	4b12      	ldr	r3, [pc, #72]	; (145d4 <system_clock_source_get_hz+0xa8>)
   1458a:	681b      	ldr	r3, [r3, #0]
   1458c:	2224      	movs	r2, #36	; 0x24
   1458e:	4013      	ands	r3, r2
   14590:	2b04      	cmp	r3, #4
   14592:	d109      	bne.n	145a8 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   14594:	2000      	movs	r0, #0
   14596:	4b13      	ldr	r3, [pc, #76]	; (145e4 <system_clock_source_get_hz+0xb8>)
   14598:	4798      	blx	r3
   1459a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   1459c:	4b0d      	ldr	r3, [pc, #52]	; (145d4 <system_clock_source_get_hz+0xa8>)
   1459e:	689b      	ldr	r3, [r3, #8]
   145a0:	041b      	lsls	r3, r3, #16
   145a2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   145a4:	4353      	muls	r3, r2
   145a6:	e00f      	b.n	145c8 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
   145a8:	4b0f      	ldr	r3, [pc, #60]	; (145e8 <system_clock_source_get_hz+0xbc>)
   145aa:	e00d      	b.n	145c8 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   145ac:	4a0a      	ldr	r2, [pc, #40]	; (145d8 <system_clock_source_get_hz+0xac>)
   145ae:	2328      	movs	r3, #40	; 0x28
   145b0:	5cd3      	ldrb	r3, [r2, r3]
   145b2:	b2db      	uxtb	r3, r3
   145b4:	001a      	movs	r2, r3
   145b6:	2302      	movs	r3, #2
   145b8:	4013      	ands	r3, r2
   145ba:	d101      	bne.n	145c0 <system_clock_source_get_hz+0x94>
			return 0;
   145bc:	2300      	movs	r3, #0
   145be:	e003      	b.n	145c8 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
   145c0:	4b04      	ldr	r3, [pc, #16]	; (145d4 <system_clock_source_get_hz+0xa8>)
   145c2:	68db      	ldr	r3, [r3, #12]
   145c4:	e000      	b.n	145c8 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
   145c6:	2300      	movs	r3, #0
	}
}
   145c8:	0018      	movs	r0, r3
   145ca:	46bd      	mov	sp, r7
   145cc:	b002      	add	sp, #8
   145ce:	bd80      	pop	{r7, pc}
   145d0:	0001cc4c 	.word	0x0001cc4c
   145d4:	200007e8 	.word	0x200007e8
   145d8:	40000c00 	.word	0x40000c00
   145dc:	003d0900 	.word	0x003d0900
   145e0:	00014419 	.word	0x00014419
   145e4:	00015159 	.word	0x00015159
   145e8:	02dc6c00 	.word	0x02dc6c00

000145ec <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
   145ec:	b580      	push	{r7, lr}
   145ee:	b084      	sub	sp, #16
   145f0:	af00      	add	r7, sp, #0
   145f2:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
   145f4:	4a1c      	ldr	r2, [pc, #112]	; (14668 <system_clock_source_osc16m_set_config+0x7c>)
   145f6:	230c      	movs	r3, #12
   145f8:	18fb      	adds	r3, r7, r3
   145fa:	7d12      	ldrb	r2, [r2, #20]
   145fc:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
   145fe:	687b      	ldr	r3, [r7, #4]
   14600:	781b      	ldrb	r3, [r3, #0]
   14602:	1c1a      	adds	r2, r3, #0
   14604:	2303      	movs	r3, #3
   14606:	4013      	ands	r3, r2
   14608:	b2da      	uxtb	r2, r3
   1460a:	230c      	movs	r3, #12
   1460c:	18fb      	adds	r3, r7, r3
   1460e:	2103      	movs	r1, #3
   14610:	400a      	ands	r2, r1
   14612:	0090      	lsls	r0, r2, #2
   14614:	781a      	ldrb	r2, [r3, #0]
   14616:	210c      	movs	r1, #12
   14618:	438a      	bics	r2, r1
   1461a:	1c11      	adds	r1, r2, #0
   1461c:	1c02      	adds	r2, r0, #0
   1461e:	430a      	orrs	r2, r1
   14620:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   14622:	687b      	ldr	r3, [r7, #4]
   14624:	789a      	ldrb	r2, [r3, #2]
   14626:	230c      	movs	r3, #12
   14628:	18fb      	adds	r3, r7, r3
   1462a:	01d0      	lsls	r0, r2, #7
   1462c:	781a      	ldrb	r2, [r3, #0]
   1462e:	217f      	movs	r1, #127	; 0x7f
   14630:	400a      	ands	r2, r1
   14632:	1c11      	adds	r1, r2, #0
   14634:	1c02      	adds	r2, r0, #0
   14636:	430a      	orrs	r2, r1
   14638:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1463a:	687b      	ldr	r3, [r7, #4]
   1463c:	785a      	ldrb	r2, [r3, #1]
   1463e:	230c      	movs	r3, #12
   14640:	18fb      	adds	r3, r7, r3
   14642:	2101      	movs	r1, #1
   14644:	400a      	ands	r2, r1
   14646:	0190      	lsls	r0, r2, #6
   14648:	781a      	ldrb	r2, [r3, #0]
   1464a:	2140      	movs	r1, #64	; 0x40
   1464c:	438a      	bics	r2, r1
   1464e:	1c11      	adds	r1, r2, #0
   14650:	1c02      	adds	r2, r0, #0
   14652:	430a      	orrs	r2, r1
   14654:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
   14656:	4a04      	ldr	r2, [pc, #16]	; (14668 <system_clock_source_osc16m_set_config+0x7c>)
   14658:	230c      	movs	r3, #12
   1465a:	18fb      	adds	r3, r7, r3
   1465c:	781b      	ldrb	r3, [r3, #0]
   1465e:	7513      	strb	r3, [r2, #20]
}
   14660:	46c0      	nop			; (mov r8, r8)
   14662:	46bd      	mov	sp, r7
   14664:	b004      	add	sp, #16
   14666:	bd80      	pop	{r7, pc}
   14668:	40000c00 	.word	0x40000c00

0001466c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   1466c:	b580      	push	{r7, lr}
   1466e:	b084      	sub	sp, #16
   14670:	af00      	add	r7, sp, #0
   14672:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   14674:	4b3a      	ldr	r3, [pc, #232]	; (14760 <system_clock_source_xosc32k_set_config+0xf4>)
   14676:	695b      	ldr	r3, [r3, #20]
   14678:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
   1467a:	687b      	ldr	r3, [r7, #4]
   1467c:	785b      	ldrb	r3, [r3, #1]
   1467e:	1c1a      	adds	r2, r3, #0
   14680:	2307      	movs	r3, #7
   14682:	4013      	ands	r3, r2
   14684:	b2da      	uxtb	r2, r3
   14686:	230d      	movs	r3, #13
   14688:	18fb      	adds	r3, r7, r3
   1468a:	2107      	movs	r1, #7
   1468c:	400a      	ands	r2, r1
   1468e:	0010      	movs	r0, r2
   14690:	781a      	ldrb	r2, [r3, #0]
   14692:	2107      	movs	r1, #7
   14694:	438a      	bics	r2, r1
   14696:	1c11      	adds	r1, r2, #0
   14698:	1c02      	adds	r2, r0, #0
   1469a:	430a      	orrs	r2, r1
   1469c:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1469e:	687b      	ldr	r3, [r7, #4]
   146a0:	781b      	ldrb	r3, [r3, #0]
   146a2:	2b00      	cmp	r3, #0
   146a4:	d106      	bne.n	146b4 <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
   146a6:	230c      	movs	r3, #12
   146a8:	18fb      	adds	r3, r7, r3
   146aa:	781a      	ldrb	r2, [r3, #0]
   146ac:	2104      	movs	r1, #4
   146ae:	430a      	orrs	r2, r1
   146b0:	701a      	strb	r2, [r3, #0]
   146b2:	e005      	b.n	146c0 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
   146b4:	230c      	movs	r3, #12
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	781a      	ldrb	r2, [r3, #0]
   146ba:	2104      	movs	r1, #4
   146bc:	438a      	bics	r2, r1
   146be:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
   146c0:	687b      	ldr	r3, [r7, #4]
   146c2:	789a      	ldrb	r2, [r3, #2]
   146c4:	230c      	movs	r3, #12
   146c6:	18fb      	adds	r3, r7, r3
   146c8:	2101      	movs	r1, #1
   146ca:	400a      	ands	r2, r1
   146cc:	0110      	lsls	r0, r2, #4
   146ce:	781a      	ldrb	r2, [r3, #0]
   146d0:	2110      	movs	r1, #16
   146d2:	438a      	bics	r2, r1
   146d4:	1c11      	adds	r1, r2, #0
   146d6:	1c02      	adds	r2, r0, #0
   146d8:	430a      	orrs	r2, r1
   146da:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   146dc:	687b      	ldr	r3, [r7, #4]
   146de:	78da      	ldrb	r2, [r3, #3]
   146e0:	230c      	movs	r3, #12
   146e2:	18fb      	adds	r3, r7, r3
   146e4:	2101      	movs	r1, #1
   146e6:	400a      	ands	r2, r1
   146e8:	00d0      	lsls	r0, r2, #3
   146ea:	781a      	ldrb	r2, [r3, #0]
   146ec:	2108      	movs	r1, #8
   146ee:	438a      	bics	r2, r1
   146f0:	1c11      	adds	r1, r2, #0
   146f2:	1c02      	adds	r2, r0, #0
   146f4:	430a      	orrs	r2, r1
   146f6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   146f8:	687b      	ldr	r3, [r7, #4]
   146fa:	7a5a      	ldrb	r2, [r3, #9]
   146fc:	230c      	movs	r3, #12
   146fe:	18fb      	adds	r3, r7, r3
   14700:	01d0      	lsls	r0, r2, #7
   14702:	781a      	ldrb	r2, [r3, #0]
   14704:	217f      	movs	r1, #127	; 0x7f
   14706:	400a      	ands	r2, r1
   14708:	1c11      	adds	r1, r2, #0
   1470a:	1c02      	adds	r2, r0, #0
   1470c:	430a      	orrs	r2, r1
   1470e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	7a1a      	ldrb	r2, [r3, #8]
   14714:	230c      	movs	r3, #12
   14716:	18fb      	adds	r3, r7, r3
   14718:	2101      	movs	r1, #1
   1471a:	400a      	ands	r2, r1
   1471c:	0190      	lsls	r0, r2, #6
   1471e:	781a      	ldrb	r2, [r3, #0]
   14720:	2140      	movs	r1, #64	; 0x40
   14722:	438a      	bics	r2, r1
   14724:	1c11      	adds	r1, r2, #0
   14726:	1c02      	adds	r2, r0, #0
   14728:	430a      	orrs	r2, r1
   1472a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	7a9a      	ldrb	r2, [r3, #10]
   14730:	230d      	movs	r3, #13
   14732:	18fb      	adds	r3, r7, r3
   14734:	2101      	movs	r1, #1
   14736:	400a      	ands	r2, r1
   14738:	0110      	lsls	r0, r2, #4
   1473a:	781a      	ldrb	r2, [r3, #0]
   1473c:	2110      	movs	r1, #16
   1473e:	438a      	bics	r2, r1
   14740:	1c11      	adds	r1, r2, #0
   14742:	1c02      	adds	r2, r0, #0
   14744:	430a      	orrs	r2, r1
   14746:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   14748:	687b      	ldr	r3, [r7, #4]
   1474a:	685a      	ldr	r2, [r3, #4]
   1474c:	4b05      	ldr	r3, [pc, #20]	; (14764 <system_clock_source_xosc32k_set_config+0xf8>)
   1474e:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
   14750:	4b03      	ldr	r3, [pc, #12]	; (14760 <system_clock_source_xosc32k_set_config+0xf4>)
   14752:	68fa      	ldr	r2, [r7, #12]
   14754:	615a      	str	r2, [r3, #20]
}
   14756:	46c0      	nop			; (mov r8, r8)
   14758:	46bd      	mov	sp, r7
   1475a:	b004      	add	sp, #16
   1475c:	bd80      	pop	{r7, pc}
   1475e:	46c0      	nop			; (mov r8, r8)
   14760:	40001000 	.word	0x40001000
   14764:	200007e8 	.word	0x200007e8

00014768 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   14768:	b580      	push	{r7, lr}
   1476a:	b082      	sub	sp, #8
   1476c:	af00      	add	r7, sp, #0
   1476e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14770:	687b      	ldr	r3, [r7, #4]
   14772:	7a9b      	ldrb	r3, [r3, #10]
   14774:	029b      	lsls	r3, r3, #10
   14776:	041b      	lsls	r3, r3, #16
   14778:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   1477a:	687b      	ldr	r3, [r7, #4]
   1477c:	899b      	ldrh	r3, [r3, #12]
   1477e:	059b      	lsls	r3, r3, #22
   14780:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14782:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   14784:	4b2c      	ldr	r3, [pc, #176]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   14786:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   14788:	687b      	ldr	r3, [r7, #4]
   1478a:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
   1478c:	687b      	ldr	r3, [r7, #4]
   1478e:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
   14790:	4313      	orrs	r3, r2
   14792:	b2db      	uxtb	r3, r3
   14794:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
   1479a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   1479c:	687a      	ldr	r2, [r7, #4]
   1479e:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
   147a0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   147a2:	687b      	ldr	r3, [r7, #4]
   147a4:	785b      	ldrb	r3, [r3, #1]
   147a6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   147a8:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	789b      	ldrb	r3, [r3, #2]
   147ae:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   147b0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   147b2:	4b21      	ldr	r3, [pc, #132]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   147b4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   147b6:	687b      	ldr	r3, [r7, #4]
   147b8:	781b      	ldrb	r3, [r3, #0]
   147ba:	2b04      	cmp	r3, #4
   147bc:	d116      	bne.n	147ec <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	7b9b      	ldrb	r3, [r3, #14]
   147c2:	069b      	lsls	r3, r3, #26
   147c4:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   147c6:	687b      	ldr	r3, [r7, #4]
   147c8:	8a1b      	ldrh	r3, [r3, #16]
   147ca:	041b      	lsls	r3, r3, #16
   147cc:	0019      	movs	r1, r3
   147ce:	4b1b      	ldr	r3, [pc, #108]	; (1483c <system_clock_source_dfll_set_config+0xd4>)
   147d0:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   147d2:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   147d4:	687a      	ldr	r2, [r7, #4]
   147d6:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   147d8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   147da:	4b17      	ldr	r3, [pc, #92]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   147dc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   147de:	4b16      	ldr	r3, [pc, #88]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   147e0:	681b      	ldr	r3, [r3, #0]
   147e2:	687a      	ldr	r2, [r7, #4]
   147e4:	7812      	ldrb	r2, [r2, #0]
   147e6:	431a      	orrs	r2, r3
   147e8:	4b13      	ldr	r3, [pc, #76]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   147ea:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   147ec:	687b      	ldr	r3, [r7, #4]
   147ee:	781b      	ldrb	r3, [r3, #0]
   147f0:	2b20      	cmp	r3, #32
   147f2:	d11c      	bne.n	1482e <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   147f4:	687b      	ldr	r3, [r7, #4]
   147f6:	7b9b      	ldrb	r3, [r3, #14]
   147f8:	069b      	lsls	r3, r3, #26
   147fa:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   147fc:	687b      	ldr	r3, [r7, #4]
   147fe:	8a1b      	ldrh	r3, [r3, #16]
   14800:	041b      	lsls	r3, r3, #16
   14802:	0019      	movs	r1, r3
   14804:	4b0d      	ldr	r3, [pc, #52]	; (1483c <system_clock_source_dfll_set_config+0xd4>)
   14806:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14808:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   1480a:	687a      	ldr	r2, [r7, #4]
   1480c:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1480e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   14810:	4b09      	ldr	r3, [pc, #36]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   14812:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   14814:	4b08      	ldr	r3, [pc, #32]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   14816:	681b      	ldr	r3, [r3, #0]
   14818:	687a      	ldr	r2, [r7, #4]
   1481a:	7812      	ldrb	r2, [r2, #0]
   1481c:	2104      	movs	r1, #4
   1481e:	430a      	orrs	r2, r1
   14820:	b2d2      	uxtb	r2, r2
   14822:	4313      	orrs	r3, r2
   14824:	2280      	movs	r2, #128	; 0x80
   14826:	00d2      	lsls	r2, r2, #3
   14828:	431a      	orrs	r2, r3
   1482a:	4b03      	ldr	r3, [pc, #12]	; (14838 <system_clock_source_dfll_set_config+0xd0>)
   1482c:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
   1482e:	46c0      	nop			; (mov r8, r8)
   14830:	46bd      	mov	sp, r7
   14832:	b002      	add	sp, #8
   14834:	bd80      	pop	{r7, pc}
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	200007e8 	.word	0x200007e8
   1483c:	03ff0000 	.word	0x03ff0000

00014840 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   14840:	b580      	push	{r7, lr}
   14842:	b082      	sub	sp, #8
   14844:	af00      	add	r7, sp, #0
   14846:	0002      	movs	r2, r0
   14848:	1dfb      	adds	r3, r7, #7
   1484a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1484c:	1dfb      	adds	r3, r7, #7
   1484e:	781b      	ldrb	r3, [r3, #0]
   14850:	2b08      	cmp	r3, #8
   14852:	d844      	bhi.n	148de <system_clock_source_enable+0x9e>
   14854:	009a      	lsls	r2, r3, #2
   14856:	4b25      	ldr	r3, [pc, #148]	; (148ec <system_clock_source_enable+0xac>)
   14858:	18d3      	adds	r3, r2, r3
   1485a:	681b      	ldr	r3, [r3, #0]
   1485c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   1485e:	4a24      	ldr	r2, [pc, #144]	; (148f0 <system_clock_source_enable+0xb0>)
   14860:	4b23      	ldr	r3, [pc, #140]	; (148f0 <system_clock_source_enable+0xb0>)
   14862:	7d1b      	ldrb	r3, [r3, #20]
   14864:	b2db      	uxtb	r3, r3
   14866:	2102      	movs	r1, #2
   14868:	430b      	orrs	r3, r1
   1486a:	b2db      	uxtb	r3, r3
   1486c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   1486e:	2300      	movs	r3, #0
   14870:	e038      	b.n	148e4 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   14872:	4b20      	ldr	r3, [pc, #128]	; (148f4 <system_clock_source_enable+0xb4>)
   14874:	4a1f      	ldr	r2, [pc, #124]	; (148f4 <system_clock_source_enable+0xb4>)
   14876:	6992      	ldr	r2, [r2, #24]
   14878:	2102      	movs	r1, #2
   1487a:	430a      	orrs	r2, r1
   1487c:	619a      	str	r2, [r3, #24]
		break;
   1487e:	e030      	b.n	148e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   14880:	4a1b      	ldr	r2, [pc, #108]	; (148f0 <system_clock_source_enable+0xb0>)
   14882:	4b1b      	ldr	r3, [pc, #108]	; (148f0 <system_clock_source_enable+0xb0>)
   14884:	8a1b      	ldrh	r3, [r3, #16]
   14886:	b29b      	uxth	r3, r3
   14888:	2102      	movs	r1, #2
   1488a:	430b      	orrs	r3, r1
   1488c:	b29b      	uxth	r3, r3
   1488e:	8213      	strh	r3, [r2, #16]
		break;
   14890:	e027      	b.n	148e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   14892:	4b18      	ldr	r3, [pc, #96]	; (148f4 <system_clock_source_enable+0xb4>)
   14894:	4a17      	ldr	r2, [pc, #92]	; (148f4 <system_clock_source_enable+0xb4>)
   14896:	6952      	ldr	r2, [r2, #20]
   14898:	2102      	movs	r1, #2
   1489a:	430a      	orrs	r2, r1
   1489c:	615a      	str	r2, [r3, #20]
		break;
   1489e:	e020      	b.n	148e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   148a0:	4b15      	ldr	r3, [pc, #84]	; (148f8 <system_clock_source_enable+0xb8>)
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	2202      	movs	r2, #2
   148a6:	431a      	orrs	r2, r3
   148a8:	4b13      	ldr	r3, [pc, #76]	; (148f8 <system_clock_source_enable+0xb8>)
   148aa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   148ac:	4b13      	ldr	r3, [pc, #76]	; (148fc <system_clock_source_enable+0xbc>)
   148ae:	4798      	blx	r3
		break;
   148b0:	e017      	b.n	148e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   148b2:	4a0f      	ldr	r2, [pc, #60]	; (148f0 <system_clock_source_enable+0xb0>)
   148b4:	490e      	ldr	r1, [pc, #56]	; (148f0 <system_clock_source_enable+0xb0>)
   148b6:	2328      	movs	r3, #40	; 0x28
   148b8:	5ccb      	ldrb	r3, [r1, r3]
   148ba:	b2db      	uxtb	r3, r3
   148bc:	2102      	movs	r1, #2
   148be:	430b      	orrs	r3, r1
   148c0:	b2d9      	uxtb	r1, r3
   148c2:	2328      	movs	r3, #40	; 0x28
   148c4:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   148c6:	46c0      	nop			; (mov r8, r8)
   148c8:	4a09      	ldr	r2, [pc, #36]	; (148f0 <system_clock_source_enable+0xb0>)
   148ca:	2338      	movs	r3, #56	; 0x38
   148cc:	5cd3      	ldrb	r3, [r2, r3]
   148ce:	b2db      	uxtb	r3, r3
   148d0:	001a      	movs	r2, r3
   148d2:	2302      	movs	r3, #2
   148d4:	4013      	ands	r3, r2
   148d6:	d1f7      	bne.n	148c8 <system_clock_source_enable+0x88>
		}
		break;
   148d8:	e003      	b.n	148e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   148da:	2300      	movs	r3, #0
   148dc:	e002      	b.n	148e4 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   148de:	2317      	movs	r3, #23
   148e0:	e000      	b.n	148e4 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
   148e2:	2300      	movs	r3, #0
}
   148e4:	0018      	movs	r0, r3
   148e6:	46bd      	mov	sp, r7
   148e8:	b002      	add	sp, #8
   148ea:	bd80      	pop	{r7, pc}
   148ec:	0001cc70 	.word	0x0001cc70
   148f0:	40000c00 	.word	0x40000c00
   148f4:	40001000 	.word	0x40001000
   148f8:	200007e8 	.word	0x200007e8
   148fc:	000144e9 	.word	0x000144e9

00014900 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
   14900:	b580      	push	{r7, lr}
   14902:	b082      	sub	sp, #8
   14904:	af00      	add	r7, sp, #0
   14906:	0002      	movs	r2, r0
   14908:	1dfb      	adds	r3, r7, #7
   1490a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1490c:	1dfb      	adds	r3, r7, #7
   1490e:	781b      	ldrb	r3, [r3, #0]
   14910:	2b08      	cmp	r3, #8
   14912:	d83c      	bhi.n	1498e <system_clock_source_disable+0x8e>
   14914:	009a      	lsls	r2, r3, #2
   14916:	4b21      	ldr	r3, [pc, #132]	; (1499c <system_clock_source_disable+0x9c>)
   14918:	18d3      	adds	r3, r2, r3
   1491a:	681b      	ldr	r3, [r3, #0]
   1491c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   1491e:	4a20      	ldr	r2, [pc, #128]	; (149a0 <system_clock_source_disable+0xa0>)
   14920:	4b1f      	ldr	r3, [pc, #124]	; (149a0 <system_clock_source_disable+0xa0>)
   14922:	7d1b      	ldrb	r3, [r3, #20]
   14924:	b2db      	uxtb	r3, r3
   14926:	2102      	movs	r1, #2
   14928:	438b      	bics	r3, r1
   1492a:	b2db      	uxtb	r3, r3
   1492c:	7513      	strb	r3, [r2, #20]
		break;
   1492e:	e030      	b.n	14992 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   14930:	4b1c      	ldr	r3, [pc, #112]	; (149a4 <system_clock_source_disable+0xa4>)
   14932:	4a1c      	ldr	r2, [pc, #112]	; (149a4 <system_clock_source_disable+0xa4>)
   14934:	6992      	ldr	r2, [r2, #24]
   14936:	2102      	movs	r1, #2
   14938:	438a      	bics	r2, r1
   1493a:	619a      	str	r2, [r3, #24]
		break;
   1493c:	e029      	b.n	14992 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   1493e:	4a18      	ldr	r2, [pc, #96]	; (149a0 <system_clock_source_disable+0xa0>)
   14940:	4b17      	ldr	r3, [pc, #92]	; (149a0 <system_clock_source_disable+0xa0>)
   14942:	8a1b      	ldrh	r3, [r3, #16]
   14944:	b29b      	uxth	r3, r3
   14946:	2102      	movs	r1, #2
   14948:	438b      	bics	r3, r1
   1494a:	b29b      	uxth	r3, r3
   1494c:	8213      	strh	r3, [r2, #16]
		break;
   1494e:	e020      	b.n	14992 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   14950:	4b14      	ldr	r3, [pc, #80]	; (149a4 <system_clock_source_disable+0xa4>)
   14952:	4a14      	ldr	r2, [pc, #80]	; (149a4 <system_clock_source_disable+0xa4>)
   14954:	6952      	ldr	r2, [r2, #20]
   14956:	2102      	movs	r1, #2
   14958:	438a      	bics	r2, r1
   1495a:	615a      	str	r2, [r3, #20]
		break;
   1495c:	e019      	b.n	14992 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   1495e:	4b12      	ldr	r3, [pc, #72]	; (149a8 <system_clock_source_disable+0xa8>)
   14960:	681b      	ldr	r3, [r3, #0]
   14962:	2202      	movs	r2, #2
   14964:	4393      	bics	r3, r2
   14966:	001a      	movs	r2, r3
   14968:	4b0f      	ldr	r3, [pc, #60]	; (149a8 <system_clock_source_disable+0xa8>)
   1496a:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1496c:	4a0c      	ldr	r2, [pc, #48]	; (149a0 <system_clock_source_disable+0xa0>)
   1496e:	4b0e      	ldr	r3, [pc, #56]	; (149a8 <system_clock_source_disable+0xa8>)
   14970:	681b      	ldr	r3, [r3, #0]
   14972:	b29b      	uxth	r3, r3
   14974:	8313      	strh	r3, [r2, #24]
		break;
   14976:	e00c      	b.n	14992 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   14978:	4a09      	ldr	r2, [pc, #36]	; (149a0 <system_clock_source_disable+0xa0>)
   1497a:	4909      	ldr	r1, [pc, #36]	; (149a0 <system_clock_source_disable+0xa0>)
   1497c:	2328      	movs	r3, #40	; 0x28
   1497e:	5ccb      	ldrb	r3, [r1, r3]
   14980:	b2db      	uxtb	r3, r3
   14982:	2102      	movs	r1, #2
   14984:	438b      	bics	r3, r1
   14986:	b2d9      	uxtb	r1, r3
   14988:	2328      	movs	r3, #40	; 0x28
   1498a:	54d1      	strb	r1, [r2, r3]
		break;
   1498c:	e001      	b.n	14992 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1498e:	2317      	movs	r3, #23
   14990:	e000      	b.n	14994 <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
   14992:	2300      	movs	r3, #0
}
   14994:	0018      	movs	r0, r3
   14996:	46bd      	mov	sp, r7
   14998:	b002      	add	sp, #8
   1499a:	bd80      	pop	{r7, pc}
   1499c:	0001cc94 	.word	0x0001cc94
   149a0:	40000c00 	.word	0x40000c00
   149a4:	40001000 	.word	0x40001000
   149a8:	200007e8 	.word	0x200007e8

000149ac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   149ac:	b580      	push	{r7, lr}
   149ae:	b084      	sub	sp, #16
   149b0:	af00      	add	r7, sp, #0
   149b2:	0002      	movs	r2, r0
   149b4:	1dfb      	adds	r3, r7, #7
   149b6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   149b8:	2300      	movs	r3, #0
   149ba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   149bc:	1dfb      	adds	r3, r7, #7
   149be:	781b      	ldrb	r3, [r3, #0]
   149c0:	2b08      	cmp	r3, #8
   149c2:	d84f      	bhi.n	14a64 <system_clock_source_is_ready+0xb8>
   149c4:	009a      	lsls	r2, r3, #2
   149c6:	4b2a      	ldr	r3, [pc, #168]	; (14a70 <system_clock_source_is_ready+0xc4>)
   149c8:	18d3      	adds	r3, r2, r3
   149ca:	681b      	ldr	r3, [r3, #0]
   149cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
   149ce:	2310      	movs	r3, #16
   149d0:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   149d2:	4b28      	ldr	r3, [pc, #160]	; (14a74 <system_clock_source_is_ready+0xc8>)
   149d4:	68db      	ldr	r3, [r3, #12]
   149d6:	68fa      	ldr	r2, [r7, #12]
   149d8:	401a      	ands	r2, r3
   149da:	68fb      	ldr	r3, [r7, #12]
   149dc:	1ad3      	subs	r3, r2, r3
   149de:	425a      	negs	r2, r3
   149e0:	4153      	adcs	r3, r2
   149e2:	b2db      	uxtb	r3, r3
   149e4:	e03f      	b.n	14a66 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
   149e6:	2302      	movs	r3, #2
   149e8:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   149ea:	4b23      	ldr	r3, [pc, #140]	; (14a78 <system_clock_source_is_ready+0xcc>)
   149ec:	68db      	ldr	r3, [r3, #12]
   149ee:	68fa      	ldr	r2, [r7, #12]
   149f0:	401a      	ands	r2, r3
   149f2:	68fb      	ldr	r3, [r7, #12]
   149f4:	1ad3      	subs	r3, r2, r3
   149f6:	425a      	negs	r2, r3
   149f8:	4153      	adcs	r3, r2
   149fa:	b2db      	uxtb	r3, r3
   149fc:	e033      	b.n	14a66 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
   149fe:	2301      	movs	r3, #1
   14a00:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   14a02:	4b1c      	ldr	r3, [pc, #112]	; (14a74 <system_clock_source_is_ready+0xc8>)
   14a04:	68db      	ldr	r3, [r3, #12]
   14a06:	68fa      	ldr	r2, [r7, #12]
   14a08:	401a      	ands	r2, r3
   14a0a:	68fb      	ldr	r3, [r7, #12]
   14a0c:	1ad3      	subs	r3, r2, r3
   14a0e:	425a      	negs	r2, r3
   14a10:	4153      	adcs	r3, r2
   14a12:	b2db      	uxtb	r3, r3
   14a14:	e027      	b.n	14a66 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
   14a16:	2301      	movs	r3, #1
   14a18:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   14a1a:	4b17      	ldr	r3, [pc, #92]	; (14a78 <system_clock_source_is_ready+0xcc>)
   14a1c:	68db      	ldr	r3, [r3, #12]
   14a1e:	68fa      	ldr	r2, [r7, #12]
   14a20:	401a      	ands	r2, r3
   14a22:	68fb      	ldr	r3, [r7, #12]
   14a24:	1ad3      	subs	r3, r2, r3
   14a26:	425a      	negs	r2, r3
   14a28:	4153      	adcs	r3, r2
   14a2a:	b2db      	uxtb	r3, r3
   14a2c:	e01b      	b.n	14a66 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
   14a2e:	23d0      	movs	r3, #208	; 0xd0
   14a30:	011b      	lsls	r3, r3, #4
   14a32:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   14a34:	4b0f      	ldr	r3, [pc, #60]	; (14a74 <system_clock_source_is_ready+0xc8>)
   14a36:	68db      	ldr	r3, [r3, #12]
   14a38:	68fa      	ldr	r2, [r7, #12]
   14a3a:	401a      	ands	r2, r3
   14a3c:	68fb      	ldr	r3, [r7, #12]
   14a3e:	1ad3      	subs	r3, r2, r3
   14a40:	425a      	negs	r2, r3
   14a42:	4153      	adcs	r3, r2
   14a44:	b2db      	uxtb	r3, r3
   14a46:	e00e      	b.n	14a66 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
   14a48:	4a0a      	ldr	r2, [pc, #40]	; (14a74 <system_clock_source_is_ready+0xc8>)
   14a4a:	233c      	movs	r3, #60	; 0x3c
   14a4c:	5cd3      	ldrb	r3, [r2, r3]
   14a4e:	b2db      	uxtb	r3, r3
   14a50:	001a      	movs	r2, r3
   14a52:	2303      	movs	r3, #3
   14a54:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   14a56:	3b03      	subs	r3, #3
   14a58:	425a      	negs	r2, r3
   14a5a:	4153      	adcs	r3, r2
   14a5c:	b2db      	uxtb	r3, r3
   14a5e:	e002      	b.n	14a66 <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   14a60:	2301      	movs	r3, #1
   14a62:	e000      	b.n	14a66 <system_clock_source_is_ready+0xba>

	default:
		return false;
   14a64:	2300      	movs	r3, #0
	}
}
   14a66:	0018      	movs	r0, r3
   14a68:	46bd      	mov	sp, r7
   14a6a:	b004      	add	sp, #16
   14a6c:	bd80      	pop	{r7, pc}
   14a6e:	46c0      	nop			; (mov r8, r8)
   14a70:	0001ccb8 	.word	0x0001ccb8
   14a74:	40000c00 	.word	0x40000c00
   14a78:	40001000 	.word	0x40001000

00014a7c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   14a7c:	b580      	push	{r7, lr}
   14a7e:	b0aa      	sub	sp, #168	; 0xa8
   14a80:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   14a82:	4b90      	ldr	r3, [pc, #576]	; (14cc4 <system_clock_init+0x248>)
   14a84:	2280      	movs	r2, #128	; 0x80
   14a86:	0052      	lsls	r2, r2, #1
   14a88:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   14a8a:	4b8f      	ldr	r3, [pc, #572]	; (14cc8 <system_clock_init+0x24c>)
   14a8c:	2203      	movs	r2, #3
   14a8e:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   14a90:	2002      	movs	r0, #2
   14a92:	4b8e      	ldr	r3, [pc, #568]	; (14ccc <system_clock_init+0x250>)
   14a94:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
   14a96:	2002      	movs	r0, #2
   14a98:	4b8d      	ldr	r3, [pc, #564]	; (14cd0 <system_clock_init+0x254>)
   14a9a:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   14a9c:	2394      	movs	r3, #148	; 0x94
   14a9e:	18fb      	adds	r3, r7, r3
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b8c      	ldr	r3, [pc, #560]	; (14cd4 <system_clock_init+0x258>)
   14aa4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   14aa6:	2394      	movs	r3, #148	; 0x94
   14aa8:	18fb      	adds	r3, r7, r3
   14aaa:	2280      	movs	r2, #128	; 0x80
   14aac:	0212      	lsls	r2, r2, #8
   14aae:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   14ab0:	2394      	movs	r3, #148	; 0x94
   14ab2:	18fb      	adds	r3, r7, r3
   14ab4:	2200      	movs	r2, #0
   14ab6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   14ab8:	2394      	movs	r3, #148	; 0x94
   14aba:	18fb      	adds	r3, r7, r3
   14abc:	2204      	movs	r2, #4
   14abe:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   14ac0:	2394      	movs	r3, #148	; 0x94
   14ac2:	18fb      	adds	r3, r7, r3
   14ac4:	2200      	movs	r2, #0
   14ac6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   14ac8:	2394      	movs	r3, #148	; 0x94
   14aca:	18fb      	adds	r3, r7, r3
   14acc:	2201      	movs	r2, #1
   14ace:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
   14ad0:	2394      	movs	r3, #148	; 0x94
   14ad2:	18fb      	adds	r3, r7, r3
   14ad4:	2200      	movs	r2, #0
   14ad6:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   14ad8:	2394      	movs	r3, #148	; 0x94
   14ada:	18fb      	adds	r3, r7, r3
   14adc:	2201      	movs	r2, #1
   14ade:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   14ae0:	2394      	movs	r3, #148	; 0x94
   14ae2:	18fb      	adds	r3, r7, r3
   14ae4:	0018      	movs	r0, r3
   14ae6:	4b7c      	ldr	r3, [pc, #496]	; (14cd8 <system_clock_init+0x25c>)
   14ae8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   14aea:	2005      	movs	r0, #5
   14aec:	4b7b      	ldr	r3, [pc, #492]	; (14cdc <system_clock_init+0x260>)
   14aee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   14af0:	46c0      	nop			; (mov r8, r8)
   14af2:	2005      	movs	r0, #5
   14af4:	4b7a      	ldr	r3, [pc, #488]	; (14ce0 <system_clock_init+0x264>)
   14af6:	4798      	blx	r3
   14af8:	0003      	movs	r3, r0
   14afa:	001a      	movs	r2, r3
   14afc:	2301      	movs	r3, #1
   14afe:	4053      	eors	r3, r2
   14b00:	b2db      	uxtb	r3, r3
   14b02:	2b00      	cmp	r3, #0
   14b04:	d1f5      	bne.n	14af2 <system_clock_init+0x76>
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
   14b06:	4b77      	ldr	r3, [pc, #476]	; (14ce4 <system_clock_init+0x268>)
   14b08:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   14b0a:	2380      	movs	r3, #128	; 0x80
   14b0c:	18fb      	adds	r3, r7, r3
   14b0e:	0018      	movs	r0, r3
   14b10:	4b75      	ldr	r3, [pc, #468]	; (14ce8 <system_clock_init+0x26c>)
   14b12:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   14b14:	2380      	movs	r3, #128	; 0x80
   14b16:	18fb      	adds	r3, r7, r3
   14b18:	2204      	movs	r2, #4
   14b1a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   14b1c:	2380      	movs	r3, #128	; 0x80
   14b1e:	18fb      	adds	r3, r7, r3
   14b20:	2200      	movs	r2, #0
   14b22:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
   14b24:	2380      	movs	r3, #128	; 0x80
   14b26:	18fb      	adds	r3, r7, r3
   14b28:	2200      	movs	r2, #0
   14b2a:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   14b2c:	4b6f      	ldr	r3, [pc, #444]	; (14cec <system_clock_init+0x270>)
   14b2e:	681b      	ldr	r3, [r3, #0]
   14b30:	0e9b      	lsrs	r3, r3, #26
   14b32:	22a4      	movs	r2, #164	; 0xa4
   14b34:	18ba      	adds	r2, r7, r2
   14b36:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
   14b38:	23a4      	movs	r3, #164	; 0xa4
   14b3a:	18fb      	adds	r3, r7, r3
   14b3c:	681b      	ldr	r3, [r3, #0]
   14b3e:	2b3f      	cmp	r3, #63	; 0x3f
   14b40:	d103      	bne.n	14b4a <system_clock_init+0xce>
		coarse = 0x1f;
   14b42:	231f      	movs	r3, #31
   14b44:	22a4      	movs	r2, #164	; 0xa4
   14b46:	18ba      	adds	r2, r7, r2
   14b48:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
   14b4a:	23a4      	movs	r3, #164	; 0xa4
   14b4c:	18fb      	adds	r3, r7, r3
   14b4e:	681b      	ldr	r3, [r3, #0]
   14b50:	b2da      	uxtb	r2, r3
   14b52:	2380      	movs	r3, #128	; 0x80
   14b54:	18fb      	adds	r3, r7, r3
   14b56:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   14b58:	2380      	movs	r3, #128	; 0x80
   14b5a:	18fb      	adds	r3, r7, r3
   14b5c:	2200      	movs	r2, #0
   14b5e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   14b60:	2380      	movs	r3, #128	; 0x80
   14b62:	18fb      	adds	r3, r7, r3
   14b64:	2200      	movs	r2, #0
   14b66:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   14b68:	2380      	movs	r3, #128	; 0x80
   14b6a:	18fb      	adds	r3, r7, r3
   14b6c:	2200      	movs	r2, #0
   14b6e:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14b70:	2380      	movs	r3, #128	; 0x80
   14b72:	18fb      	adds	r3, r7, r3
   14b74:	2200      	movs	r2, #0
   14b76:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   14b78:	2380      	movs	r3, #128	; 0x80
   14b7a:	18fb      	adds	r3, r7, r3
   14b7c:	4a5c      	ldr	r2, [pc, #368]	; (14cf0 <system_clock_init+0x274>)
   14b7e:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   14b80:	2380      	movs	r3, #128	; 0x80
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	2203      	movs	r2, #3
   14b86:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   14b88:	2380      	movs	r3, #128	; 0x80
   14b8a:	18fb      	adds	r3, r7, r3
   14b8c:	221f      	movs	r2, #31
   14b8e:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   14b90:	2380      	movs	r3, #128	; 0x80
   14b92:	18fb      	adds	r3, r7, r3
   14b94:	0018      	movs	r0, r3
   14b96:	4b57      	ldr	r3, [pc, #348]	; (14cf4 <system_clock_init+0x278>)
   14b98:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   14b9a:	4b57      	ldr	r3, [pc, #348]	; (14cf8 <system_clock_init+0x27c>)
   14b9c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   14b9e:	2368      	movs	r3, #104	; 0x68
   14ba0:	18fb      	adds	r3, r7, r3
   14ba2:	0018      	movs	r0, r3
   14ba4:	4b55      	ldr	r3, [pc, #340]	; (14cfc <system_clock_init+0x280>)
   14ba6:	4798      	blx	r3
   14ba8:	2368      	movs	r3, #104	; 0x68
   14baa:	18fb      	adds	r3, r7, r3
   14bac:	2205      	movs	r2, #5
   14bae:	701a      	strb	r2, [r3, #0]
   14bb0:	2368      	movs	r3, #104	; 0x68
   14bb2:	18fb      	adds	r3, r7, r3
   14bb4:	2220      	movs	r2, #32
   14bb6:	605a      	str	r2, [r3, #4]
   14bb8:	2368      	movs	r3, #104	; 0x68
   14bba:	18fb      	adds	r3, r7, r3
   14bbc:	2200      	movs	r2, #0
   14bbe:	721a      	strb	r2, [r3, #8]
   14bc0:	2368      	movs	r3, #104	; 0x68
   14bc2:	18fb      	adds	r3, r7, r3
   14bc4:	2200      	movs	r2, #0
   14bc6:	725a      	strb	r2, [r3, #9]
   14bc8:	2368      	movs	r3, #104	; 0x68
   14bca:	18fb      	adds	r3, r7, r3
   14bcc:	0019      	movs	r1, r3
   14bce:	2001      	movs	r0, #1
   14bd0:	4b4b      	ldr	r3, [pc, #300]	; (14d00 <system_clock_init+0x284>)
   14bd2:	4798      	blx	r3
   14bd4:	2001      	movs	r0, #1
   14bd6:	4b4b      	ldr	r3, [pc, #300]	; (14d04 <system_clock_init+0x288>)
   14bd8:	4798      	blx	r3
   14bda:	2350      	movs	r3, #80	; 0x50
   14bdc:	18fb      	adds	r3, r7, r3
   14bde:	0018      	movs	r0, r3
   14be0:	4b46      	ldr	r3, [pc, #280]	; (14cfc <system_clock_init+0x280>)
   14be2:	4798      	blx	r3
   14be4:	2350      	movs	r3, #80	; 0x50
   14be6:	18fb      	adds	r3, r7, r3
   14be8:	2207      	movs	r2, #7
   14bea:	701a      	strb	r2, [r3, #0]
   14bec:	2350      	movs	r3, #80	; 0x50
   14bee:	18fb      	adds	r3, r7, r3
   14bf0:	2201      	movs	r2, #1
   14bf2:	605a      	str	r2, [r3, #4]
   14bf4:	2350      	movs	r3, #80	; 0x50
   14bf6:	18fb      	adds	r3, r7, r3
   14bf8:	2200      	movs	r2, #0
   14bfa:	721a      	strb	r2, [r3, #8]
   14bfc:	2350      	movs	r3, #80	; 0x50
   14bfe:	18fb      	adds	r3, r7, r3
   14c00:	2200      	movs	r2, #0
   14c02:	725a      	strb	r2, [r3, #9]
   14c04:	2350      	movs	r3, #80	; 0x50
   14c06:	18fb      	adds	r3, r7, r3
   14c08:	0019      	movs	r1, r3
   14c0a:	2003      	movs	r0, #3
   14c0c:	4b3c      	ldr	r3, [pc, #240]	; (14d00 <system_clock_init+0x284>)
   14c0e:	4798      	blx	r3
   14c10:	2003      	movs	r0, #3
   14c12:	4b3c      	ldr	r3, [pc, #240]	; (14d04 <system_clock_init+0x288>)
   14c14:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   14c16:	2310      	movs	r3, #16
   14c18:	18fb      	adds	r3, r7, r3
   14c1a:	0018      	movs	r0, r3
   14c1c:	4b3a      	ldr	r3, [pc, #232]	; (14d08 <system_clock_init+0x28c>)
   14c1e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   14c20:	2310      	movs	r3, #16
   14c22:	18fb      	adds	r3, r7, r3
   14c24:	2201      	movs	r2, #1
   14c26:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   14c28:	2310      	movs	r3, #16
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	0019      	movs	r1, r3
   14c2e:	2000      	movs	r0, #0
   14c30:	4b36      	ldr	r3, [pc, #216]	; (14d0c <system_clock_init+0x290>)
   14c32:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
   14c34:	2000      	movs	r0, #0
   14c36:	4b36      	ldr	r3, [pc, #216]	; (14d10 <system_clock_init+0x294>)
   14c38:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   14c3a:	2007      	movs	r0, #7
   14c3c:	4b27      	ldr	r3, [pc, #156]	; (14cdc <system_clock_init+0x260>)
   14c3e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   14c40:	46c0      	nop			; (mov r8, r8)
   14c42:	2007      	movs	r0, #7
   14c44:	4b26      	ldr	r3, [pc, #152]	; (14ce0 <system_clock_init+0x264>)
   14c46:	4798      	blx	r3
   14c48:	0003      	movs	r3, r0
   14c4a:	001a      	movs	r2, r3
   14c4c:	2301      	movs	r3, #1
   14c4e:	4053      	eors	r3, r2
   14c50:	b2db      	uxtb	r3, r3
   14c52:	2b00      	cmp	r3, #0
   14c54:	d1f5      	bne.n	14c42 <system_clock_init+0x1c6>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
   14c56:	2000      	movs	r0, #0
   14c58:	4b2e      	ldr	r3, [pc, #184]	; (14d14 <system_clock_init+0x298>)
   14c5a:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
   14c5c:	2000      	movs	r0, #0
   14c5e:	4b2e      	ldr	r3, [pc, #184]	; (14d18 <system_clock_init+0x29c>)
   14c60:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   14c62:	2000      	movs	r0, #0
   14c64:	4b2d      	ldr	r3, [pc, #180]	; (14d1c <system_clock_init+0x2a0>)
   14c66:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
   14c68:	2000      	movs	r0, #0
   14c6a:	4b2d      	ldr	r3, [pc, #180]	; (14d20 <system_clock_init+0x2a4>)
   14c6c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   14c6e:	1d3b      	adds	r3, r7, #4
   14c70:	0018      	movs	r0, r3
   14c72:	4b22      	ldr	r3, [pc, #136]	; (14cfc <system_clock_init+0x280>)
   14c74:	4798      	blx	r3
   14c76:	1d3b      	adds	r3, r7, #4
   14c78:	2207      	movs	r2, #7
   14c7a:	701a      	strb	r2, [r3, #0]
   14c7c:	1d3b      	adds	r3, r7, #4
   14c7e:	2201      	movs	r2, #1
   14c80:	605a      	str	r2, [r3, #4]
   14c82:	1d3b      	adds	r3, r7, #4
   14c84:	2201      	movs	r2, #1
   14c86:	721a      	strb	r2, [r3, #8]
   14c88:	1d3b      	adds	r3, r7, #4
   14c8a:	2200      	movs	r2, #0
   14c8c:	725a      	strb	r2, [r3, #9]
   14c8e:	1d3b      	adds	r3, r7, #4
   14c90:	0019      	movs	r1, r3
   14c92:	2000      	movs	r0, #0
   14c94:	4b1a      	ldr	r3, [pc, #104]	; (14d00 <system_clock_init+0x284>)
   14c96:	4798      	blx	r3
   14c98:	2000      	movs	r0, #0
   14c9a:	4b1a      	ldr	r3, [pc, #104]	; (14d04 <system_clock_init+0x288>)
   14c9c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
   14c9e:	4b21      	ldr	r3, [pc, #132]	; (14d24 <system_clock_init+0x2a8>)
   14ca0:	4798      	blx	r3
   14ca2:	0003      	movs	r3, r0
   14ca4:	22a0      	movs	r2, #160	; 0xa0
   14ca6:	18ba      	adds	r2, r7, r2
   14ca8:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
   14caa:	23a0      	movs	r3, #160	; 0xa0
   14cac:	18fb      	adds	r3, r7, r3
   14cae:	681b      	ldr	r3, [r3, #0]
   14cb0:	4a1d      	ldr	r2, [pc, #116]	; (14d28 <system_clock_init+0x2ac>)
   14cb2:	4293      	cmp	r3, r2
   14cb4:	d802      	bhi.n	14cbc <system_clock_init+0x240>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
   14cb6:	2000      	movs	r0, #0
   14cb8:	4b05      	ldr	r3, [pc, #20]	; (14cd0 <system_clock_init+0x254>)
   14cba:	4798      	blx	r3
	}
}
   14cbc:	46c0      	nop			; (mov r8, r8)
   14cbe:	46bd      	mov	sp, r7
   14cc0:	b02a      	add	sp, #168	; 0xa8
   14cc2:	bd80      	pop	{r7, pc}
   14cc4:	40000c00 	.word	0x40000c00
   14cc8:	40001400 	.word	0x40001400
   14ccc:	00014399 	.word	0x00014399
   14cd0:	000143cd 	.word	0x000143cd
   14cd4:	00014221 	.word	0x00014221
   14cd8:	0001466d 	.word	0x0001466d
   14cdc:	00014841 	.word	0x00014841
   14ce0:	000149ad 	.word	0x000149ad
   14ce4:	00014435 	.word	0x00014435
   14ce8:	00014285 	.word	0x00014285
   14cec:	00806020 	.word	0x00806020
   14cf0:	ffffb71b 	.word	0xffffb71b
   14cf4:	00014769 	.word	0x00014769
   14cf8:	00014e0d 	.word	0x00014e0d
   14cfc:	000141dd 	.word	0x000141dd
   14d00:	00014e3d 	.word	0x00014e3d
   14d04:	00014f4d 	.word	0x00014f4d
   14d08:	0001420b 	.word	0x0001420b
   14d0c:	00015069 	.word	0x00015069
   14d10:	000150a9 	.word	0x000150a9
   14d14:	00014341 	.word	0x00014341
   14d18:	00014319 	.word	0x00014319
   14d1c:	000142f1 	.word	0x000142f1
   14d20:	000142dd 	.word	0x000142dd
   14d24:	00014369 	.word	0x00014369
   14d28:	00b71b00 	.word	0x00b71b00

00014d2c <system_apb_clock_set_mask>:
{
   14d2c:	b580      	push	{r7, lr}
   14d2e:	b082      	sub	sp, #8
   14d30:	af00      	add	r7, sp, #0
   14d32:	0002      	movs	r2, r0
   14d34:	6039      	str	r1, [r7, #0]
   14d36:	1dfb      	adds	r3, r7, #7
   14d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14d3a:	1dfb      	adds	r3, r7, #7
   14d3c:	781b      	ldrb	r3, [r3, #0]
   14d3e:	2b04      	cmp	r3, #4
   14d40:	d827      	bhi.n	14d92 <system_apb_clock_set_mask+0x66>
   14d42:	009a      	lsls	r2, r3, #2
   14d44:	4b16      	ldr	r3, [pc, #88]	; (14da0 <system_apb_clock_set_mask+0x74>)
   14d46:	18d3      	adds	r3, r2, r3
   14d48:	681b      	ldr	r3, [r3, #0]
   14d4a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   14d4c:	4b15      	ldr	r3, [pc, #84]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d4e:	4a15      	ldr	r2, [pc, #84]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d50:	6951      	ldr	r1, [r2, #20]
   14d52:	683a      	ldr	r2, [r7, #0]
   14d54:	430a      	orrs	r2, r1
   14d56:	615a      	str	r2, [r3, #20]
			break;
   14d58:	e01d      	b.n	14d96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   14d5a:	4b12      	ldr	r3, [pc, #72]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d5c:	4a11      	ldr	r2, [pc, #68]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d5e:	6991      	ldr	r1, [r2, #24]
   14d60:	683a      	ldr	r2, [r7, #0]
   14d62:	430a      	orrs	r2, r1
   14d64:	619a      	str	r2, [r3, #24]
			break;
   14d66:	e016      	b.n	14d96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   14d68:	4b0e      	ldr	r3, [pc, #56]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d6a:	4a0e      	ldr	r2, [pc, #56]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d6c:	69d1      	ldr	r1, [r2, #28]
   14d6e:	683a      	ldr	r2, [r7, #0]
   14d70:	430a      	orrs	r2, r1
   14d72:	61da      	str	r2, [r3, #28]
			break;
   14d74:	e00f      	b.n	14d96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   14d76:	4b0b      	ldr	r3, [pc, #44]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d78:	4a0a      	ldr	r2, [pc, #40]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d7a:	6a11      	ldr	r1, [r2, #32]
   14d7c:	683a      	ldr	r2, [r7, #0]
   14d7e:	430a      	orrs	r2, r1
   14d80:	621a      	str	r2, [r3, #32]
			break;
   14d82:	e008      	b.n	14d96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   14d84:	4b07      	ldr	r3, [pc, #28]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d86:	4a07      	ldr	r2, [pc, #28]	; (14da4 <system_apb_clock_set_mask+0x78>)
   14d88:	6a51      	ldr	r1, [r2, #36]	; 0x24
   14d8a:	683a      	ldr	r2, [r7, #0]
   14d8c:	430a      	orrs	r2, r1
   14d8e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   14d90:	e001      	b.n	14d96 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   14d92:	2317      	movs	r3, #23
   14d94:	e000      	b.n	14d98 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   14d96:	2300      	movs	r3, #0
}
   14d98:	0018      	movs	r0, r3
   14d9a:	46bd      	mov	sp, r7
   14d9c:	b002      	add	sp, #8
   14d9e:	bd80      	pop	{r7, pc}
   14da0:	0001ccdc 	.word	0x0001ccdc
   14da4:	40000400 	.word	0x40000400

00014da8 <system_interrupt_enter_critical_section>:
{
   14da8:	b580      	push	{r7, lr}
   14daa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14dac:	4b02      	ldr	r3, [pc, #8]	; (14db8 <system_interrupt_enter_critical_section+0x10>)
   14dae:	4798      	blx	r3
}
   14db0:	46c0      	nop			; (mov r8, r8)
   14db2:	46bd      	mov	sp, r7
   14db4:	bd80      	pop	{r7, pc}
   14db6:	46c0      	nop			; (mov r8, r8)
   14db8:	00010dbd 	.word	0x00010dbd

00014dbc <system_interrupt_leave_critical_section>:
{
   14dbc:	b580      	push	{r7, lr}
   14dbe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   14dc0:	4b02      	ldr	r3, [pc, #8]	; (14dcc <system_interrupt_leave_critical_section+0x10>)
   14dc2:	4798      	blx	r3
}
   14dc4:	46c0      	nop			; (mov r8, r8)
   14dc6:	46bd      	mov	sp, r7
   14dc8:	bd80      	pop	{r7, pc}
   14dca:	46c0      	nop			; (mov r8, r8)
   14dcc:	00010e11 	.word	0x00010e11

00014dd0 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
   14dd0:	b580      	push	{r7, lr}
   14dd2:	b082      	sub	sp, #8
   14dd4:	af00      	add	r7, sp, #0
   14dd6:	0002      	movs	r2, r0
   14dd8:	1dfb      	adds	r3, r7, #7
   14dda:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   14ddc:	4b09      	ldr	r3, [pc, #36]	; (14e04 <system_gclk_is_syncing+0x34>)
   14dde:	685b      	ldr	r3, [r3, #4]
   14de0:	1dfa      	adds	r2, r7, #7
   14de2:	7812      	ldrb	r2, [r2, #0]
   14de4:	2101      	movs	r1, #1
   14de6:	4091      	lsls	r1, r2
   14de8:	000a      	movs	r2, r1
   14dea:	0092      	lsls	r2, r2, #2
   14dec:	4013      	ands	r3, r2
   14dee:	4a06      	ldr	r2, [pc, #24]	; (14e08 <system_gclk_is_syncing+0x38>)
   14df0:	4013      	ands	r3, r2
   14df2:	d001      	beq.n	14df8 <system_gclk_is_syncing+0x28>
		 return true;
   14df4:	2301      	movs	r3, #1
   14df6:	e000      	b.n	14dfa <system_gclk_is_syncing+0x2a>
	}

	 return false;
   14df8:	2300      	movs	r3, #0
}
   14dfa:	0018      	movs	r0, r3
   14dfc:	46bd      	mov	sp, r7
   14dfe:	b002      	add	sp, #8
   14e00:	bd80      	pop	{r7, pc}
   14e02:	46c0      	nop			; (mov r8, r8)
   14e04:	40001800 	.word	0x40001800
   14e08:	000007fc 	.word	0x000007fc

00014e0c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   14e0c:	b580      	push	{r7, lr}
   14e0e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
   14e10:	2140      	movs	r1, #64	; 0x40
   14e12:	2000      	movs	r0, #0
   14e14:	4b07      	ldr	r3, [pc, #28]	; (14e34 <system_gclk_init+0x28>)
   14e16:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   14e18:	4b07      	ldr	r3, [pc, #28]	; (14e38 <system_gclk_init+0x2c>)
   14e1a:	2201      	movs	r2, #1
   14e1c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   14e1e:	46c0      	nop			; (mov r8, r8)
   14e20:	4b05      	ldr	r3, [pc, #20]	; (14e38 <system_gclk_init+0x2c>)
   14e22:	781b      	ldrb	r3, [r3, #0]
   14e24:	b2db      	uxtb	r3, r3
   14e26:	001a      	movs	r2, r3
   14e28:	2301      	movs	r3, #1
   14e2a:	4013      	ands	r3, r2
   14e2c:	d1f8      	bne.n	14e20 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   14e2e:	46c0      	nop			; (mov r8, r8)
   14e30:	46bd      	mov	sp, r7
   14e32:	bd80      	pop	{r7, pc}
   14e34:	00014d2d 	.word	0x00014d2d
   14e38:	40001800 	.word	0x40001800

00014e3c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   14e3c:	b580      	push	{r7, lr}
   14e3e:	b086      	sub	sp, #24
   14e40:	af00      	add	r7, sp, #0
   14e42:	0002      	movs	r2, r0
   14e44:	6039      	str	r1, [r7, #0]
   14e46:	1dfb      	adds	r3, r7, #7
   14e48:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   14e4a:	683b      	ldr	r3, [r7, #0]
   14e4c:	781b      	ldrb	r3, [r3, #0]
   14e4e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   14e50:	683b      	ldr	r3, [r7, #0]
   14e52:	785b      	ldrb	r3, [r3, #1]
   14e54:	2b00      	cmp	r3, #0
   14e56:	d004      	beq.n	14e62 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   14e58:	697b      	ldr	r3, [r7, #20]
   14e5a:	2280      	movs	r2, #128	; 0x80
   14e5c:	00d2      	lsls	r2, r2, #3
   14e5e:	4313      	orrs	r3, r2
   14e60:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   14e62:	683b      	ldr	r3, [r7, #0]
   14e64:	7a5b      	ldrb	r3, [r3, #9]
   14e66:	2b00      	cmp	r3, #0
   14e68:	d004      	beq.n	14e74 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   14e6a:	697b      	ldr	r3, [r7, #20]
   14e6c:	2280      	movs	r2, #128	; 0x80
   14e6e:	0112      	lsls	r2, r2, #4
   14e70:	4313      	orrs	r3, r2
   14e72:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   14e74:	683b      	ldr	r3, [r7, #0]
   14e76:	685b      	ldr	r3, [r3, #4]
   14e78:	2b01      	cmp	r3, #1
   14e7a:	d92c      	bls.n	14ed6 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   14e7c:	683b      	ldr	r3, [r7, #0]
   14e7e:	685a      	ldr	r2, [r3, #4]
   14e80:	683b      	ldr	r3, [r7, #0]
   14e82:	685b      	ldr	r3, [r3, #4]
   14e84:	3b01      	subs	r3, #1
   14e86:	4013      	ands	r3, r2
   14e88:	d11a      	bne.n	14ec0 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   14e8a:	2300      	movs	r3, #0
   14e8c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   14e8e:	2302      	movs	r3, #2
   14e90:	60fb      	str	r3, [r7, #12]
   14e92:	e005      	b.n	14ea0 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
   14e94:	693b      	ldr	r3, [r7, #16]
   14e96:	3301      	adds	r3, #1
   14e98:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
   14e9a:	68fb      	ldr	r3, [r7, #12]
   14e9c:	005b      	lsls	r3, r3, #1
   14e9e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
   14ea0:	683b      	ldr	r3, [r7, #0]
   14ea2:	685a      	ldr	r2, [r3, #4]
   14ea4:	68fb      	ldr	r3, [r7, #12]
   14ea6:	429a      	cmp	r2, r3
   14ea8:	d8f4      	bhi.n	14e94 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
   14eaa:	693b      	ldr	r3, [r7, #16]
   14eac:	041b      	lsls	r3, r3, #16
   14eae:	697a      	ldr	r2, [r7, #20]
   14eb0:	4313      	orrs	r3, r2
   14eb2:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   14eb4:	697b      	ldr	r3, [r7, #20]
   14eb6:	2280      	movs	r2, #128	; 0x80
   14eb8:	0152      	lsls	r2, r2, #5
   14eba:	4313      	orrs	r3, r2
   14ebc:	617b      	str	r3, [r7, #20]
   14ebe:	e00a      	b.n	14ed6 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   14ec0:	683b      	ldr	r3, [r7, #0]
   14ec2:	685b      	ldr	r3, [r3, #4]
   14ec4:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
   14ec6:	697a      	ldr	r2, [r7, #20]
   14ec8:	4313      	orrs	r3, r2
   14eca:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   14ecc:	697b      	ldr	r3, [r7, #20]
   14ece:	2280      	movs	r2, #128	; 0x80
   14ed0:	0092      	lsls	r2, r2, #2
   14ed2:	4313      	orrs	r3, r2
   14ed4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   14ed6:	683b      	ldr	r3, [r7, #0]
   14ed8:	7a1b      	ldrb	r3, [r3, #8]
   14eda:	2b00      	cmp	r3, #0
   14edc:	d004      	beq.n	14ee8 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   14ede:	697b      	ldr	r3, [r7, #20]
   14ee0:	2280      	movs	r2, #128	; 0x80
   14ee2:	0192      	lsls	r2, r2, #6
   14ee4:	4313      	orrs	r3, r2
   14ee6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
   14ee8:	46c0      	nop			; (mov r8, r8)
   14eea:	1dfb      	adds	r3, r7, #7
   14eec:	781b      	ldrb	r3, [r3, #0]
   14eee:	0018      	movs	r0, r3
   14ef0:	4b12      	ldr	r3, [pc, #72]	; (14f3c <system_gclk_gen_set_config+0x100>)
   14ef2:	4798      	blx	r3
   14ef4:	1e03      	subs	r3, r0, #0
   14ef6:	d1f8      	bne.n	14eea <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14ef8:	4b11      	ldr	r3, [pc, #68]	; (14f40 <system_gclk_gen_set_config+0x104>)
   14efa:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   14efc:	4811      	ldr	r0, [pc, #68]	; (14f44 <system_gclk_gen_set_config+0x108>)
   14efe:	1dfb      	adds	r3, r7, #7
   14f00:	781b      	ldrb	r3, [r3, #0]
   14f02:	4910      	ldr	r1, [pc, #64]	; (14f44 <system_gclk_gen_set_config+0x108>)
   14f04:	1dfa      	adds	r2, r7, #7
   14f06:	7812      	ldrb	r2, [r2, #0]
   14f08:	3208      	adds	r2, #8
   14f0a:	0092      	lsls	r2, r2, #2
   14f0c:	5851      	ldr	r1, [r2, r1]
   14f0e:	2280      	movs	r2, #128	; 0x80
   14f10:	0052      	lsls	r2, r2, #1
   14f12:	4011      	ands	r1, r2
   14f14:	697a      	ldr	r2, [r7, #20]
   14f16:	430a      	orrs	r2, r1
   14f18:	3308      	adds	r3, #8
   14f1a:	009b      	lsls	r3, r3, #2
   14f1c:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
   14f1e:	46c0      	nop			; (mov r8, r8)
   14f20:	1dfb      	adds	r3, r7, #7
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	0018      	movs	r0, r3
   14f26:	4b05      	ldr	r3, [pc, #20]	; (14f3c <system_gclk_gen_set_config+0x100>)
   14f28:	4798      	blx	r3
   14f2a:	1e03      	subs	r3, r0, #0
   14f2c:	d1f8      	bne.n	14f20 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
   14f2e:	4b06      	ldr	r3, [pc, #24]	; (14f48 <system_gclk_gen_set_config+0x10c>)
   14f30:	4798      	blx	r3
}
   14f32:	46c0      	nop			; (mov r8, r8)
   14f34:	46bd      	mov	sp, r7
   14f36:	b006      	add	sp, #24
   14f38:	bd80      	pop	{r7, pc}
   14f3a:	46c0      	nop			; (mov r8, r8)
   14f3c:	00014dd1 	.word	0x00014dd1
   14f40:	00014da9 	.word	0x00014da9
   14f44:	40001800 	.word	0x40001800
   14f48:	00014dbd 	.word	0x00014dbd

00014f4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   14f4c:	b580      	push	{r7, lr}
   14f4e:	b082      	sub	sp, #8
   14f50:	af00      	add	r7, sp, #0
   14f52:	0002      	movs	r2, r0
   14f54:	1dfb      	adds	r3, r7, #7
   14f56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   14f58:	46c0      	nop			; (mov r8, r8)
   14f5a:	1dfb      	adds	r3, r7, #7
   14f5c:	781b      	ldrb	r3, [r3, #0]
   14f5e:	0018      	movs	r0, r3
   14f60:	4b0d      	ldr	r3, [pc, #52]	; (14f98 <system_gclk_gen_enable+0x4c>)
   14f62:	4798      	blx	r3
   14f64:	1e03      	subs	r3, r0, #0
   14f66:	d1f8      	bne.n	14f5a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14f68:	4b0c      	ldr	r3, [pc, #48]	; (14f9c <system_gclk_gen_enable+0x50>)
   14f6a:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   14f6c:	480c      	ldr	r0, [pc, #48]	; (14fa0 <system_gclk_gen_enable+0x54>)
   14f6e:	1dfb      	adds	r3, r7, #7
   14f70:	781b      	ldrb	r3, [r3, #0]
   14f72:	490b      	ldr	r1, [pc, #44]	; (14fa0 <system_gclk_gen_enable+0x54>)
   14f74:	1dfa      	adds	r2, r7, #7
   14f76:	7812      	ldrb	r2, [r2, #0]
   14f78:	3208      	adds	r2, #8
   14f7a:	0092      	lsls	r2, r2, #2
   14f7c:	5852      	ldr	r2, [r2, r1]
   14f7e:	2180      	movs	r1, #128	; 0x80
   14f80:	0049      	lsls	r1, r1, #1
   14f82:	430a      	orrs	r2, r1
   14f84:	3308      	adds	r3, #8
   14f86:	009b      	lsls	r3, r3, #2
   14f88:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
   14f8a:	4b06      	ldr	r3, [pc, #24]	; (14fa4 <system_gclk_gen_enable+0x58>)
   14f8c:	4798      	blx	r3
}
   14f8e:	46c0      	nop			; (mov r8, r8)
   14f90:	46bd      	mov	sp, r7
   14f92:	b002      	add	sp, #8
   14f94:	bd80      	pop	{r7, pc}
   14f96:	46c0      	nop			; (mov r8, r8)
   14f98:	00014dd1 	.word	0x00014dd1
   14f9c:	00014da9 	.word	0x00014da9
   14fa0:	40001800 	.word	0x40001800
   14fa4:	00014dbd 	.word	0x00014dbd

00014fa8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   14fa8:	b580      	push	{r7, lr}
   14faa:	b086      	sub	sp, #24
   14fac:	af00      	add	r7, sp, #0
   14fae:	0002      	movs	r2, r0
   14fb0:	1dfb      	adds	r3, r7, #7
   14fb2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   14fb4:	46c0      	nop			; (mov r8, r8)
   14fb6:	1dfb      	adds	r3, r7, #7
   14fb8:	781b      	ldrb	r3, [r3, #0]
   14fba:	0018      	movs	r0, r3
   14fbc:	4b24      	ldr	r3, [pc, #144]	; (15050 <system_gclk_gen_get_hz+0xa8>)
   14fbe:	4798      	blx	r3
   14fc0:	1e03      	subs	r3, r0, #0
   14fc2:	d1f8      	bne.n	14fb6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14fc4:	4b23      	ldr	r3, [pc, #140]	; (15054 <system_gclk_gen_get_hz+0xac>)
   14fc6:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   14fc8:	4a23      	ldr	r2, [pc, #140]	; (15058 <system_gclk_gen_get_hz+0xb0>)
   14fca:	1dfb      	adds	r3, r7, #7
   14fcc:	781b      	ldrb	r3, [r3, #0]
   14fce:	3308      	adds	r3, #8
   14fd0:	009b      	lsls	r3, r3, #2
   14fd2:	589b      	ldr	r3, [r3, r2]
   14fd4:	071b      	lsls	r3, r3, #28
   14fd6:	0f1b      	lsrs	r3, r3, #28
   14fd8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   14fda:	0018      	movs	r0, r3
   14fdc:	4b1f      	ldr	r3, [pc, #124]	; (1505c <system_gclk_gen_get_hz+0xb4>)
   14fde:	4798      	blx	r3
   14fe0:	0003      	movs	r3, r0
   14fe2:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   14fe4:	4a1c      	ldr	r2, [pc, #112]	; (15058 <system_gclk_gen_get_hz+0xb0>)
   14fe6:	1dfb      	adds	r3, r7, #7
   14fe8:	781b      	ldrb	r3, [r3, #0]
   14fea:	3308      	adds	r3, #8
   14fec:	009b      	lsls	r3, r3, #2
   14fee:	589b      	ldr	r3, [r3, r2]
   14ff0:	04db      	lsls	r3, r3, #19
   14ff2:	0fdb      	lsrs	r3, r3, #31
   14ff4:	b2da      	uxtb	r2, r3
   14ff6:	2313      	movs	r3, #19
   14ff8:	18fb      	adds	r3, r7, r3
   14ffa:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   14ffc:	4a16      	ldr	r2, [pc, #88]	; (15058 <system_gclk_gen_get_hz+0xb0>)
   14ffe:	1dfb      	adds	r3, r7, #7
   15000:	781b      	ldrb	r3, [r3, #0]
   15002:	3308      	adds	r3, #8
   15004:	009b      	lsls	r3, r3, #2
   15006:	589b      	ldr	r3, [r3, r2]
   15008:	0c1b      	lsrs	r3, r3, #16
   1500a:	b29b      	uxth	r3, r3
   1500c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1500e:	4b14      	ldr	r3, [pc, #80]	; (15060 <system_gclk_gen_get_hz+0xb8>)
   15010:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   15012:	2313      	movs	r3, #19
   15014:	18fb      	adds	r3, r7, r3
   15016:	781b      	ldrb	r3, [r3, #0]
   15018:	2b00      	cmp	r3, #0
   1501a:	d109      	bne.n	15030 <system_gclk_gen_get_hz+0x88>
   1501c:	68fb      	ldr	r3, [r7, #12]
   1501e:	2b01      	cmp	r3, #1
   15020:	d906      	bls.n	15030 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
   15022:	4b10      	ldr	r3, [pc, #64]	; (15064 <system_gclk_gen_get_hz+0xbc>)
   15024:	68f9      	ldr	r1, [r7, #12]
   15026:	6978      	ldr	r0, [r7, #20]
   15028:	4798      	blx	r3
   1502a:	0003      	movs	r3, r0
   1502c:	617b      	str	r3, [r7, #20]
   1502e:	e00a      	b.n	15046 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
   15030:	2313      	movs	r3, #19
   15032:	18fb      	adds	r3, r7, r3
   15034:	781b      	ldrb	r3, [r3, #0]
   15036:	2b00      	cmp	r3, #0
   15038:	d005      	beq.n	15046 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
   1503a:	68fb      	ldr	r3, [r7, #12]
   1503c:	3301      	adds	r3, #1
   1503e:	697a      	ldr	r2, [r7, #20]
   15040:	40da      	lsrs	r2, r3
   15042:	0013      	movs	r3, r2
   15044:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   15046:	697b      	ldr	r3, [r7, #20]
}
   15048:	0018      	movs	r0, r3
   1504a:	46bd      	mov	sp, r7
   1504c:	b006      	add	sp, #24
   1504e:	bd80      	pop	{r7, pc}
   15050:	00014dd1 	.word	0x00014dd1
   15054:	00014da9 	.word	0x00014da9
   15058:	40001800 	.word	0x40001800
   1505c:	0001452d 	.word	0x0001452d
   15060:	00014dbd 	.word	0x00014dbd
   15064:	00017e9d 	.word	0x00017e9d

00015068 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   15068:	b580      	push	{r7, lr}
   1506a:	b082      	sub	sp, #8
   1506c:	af00      	add	r7, sp, #0
   1506e:	0002      	movs	r2, r0
   15070:	6039      	str	r1, [r7, #0]
   15072:	1dfb      	adds	r3, r7, #7
   15074:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   15076:	1dfb      	adds	r3, r7, #7
   15078:	781b      	ldrb	r3, [r3, #0]
   1507a:	0018      	movs	r0, r3
   1507c:	4b08      	ldr	r3, [pc, #32]	; (150a0 <system_gclk_chan_set_config+0x38>)
   1507e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   15080:	4908      	ldr	r1, [pc, #32]	; (150a4 <system_gclk_chan_set_config+0x3c>)
   15082:	1dfb      	adds	r3, r7, #7
   15084:	781b      	ldrb	r3, [r3, #0]
   15086:	683a      	ldr	r2, [r7, #0]
   15088:	7812      	ldrb	r2, [r2, #0]
   1508a:	0010      	movs	r0, r2
   1508c:	220f      	movs	r2, #15
   1508e:	4002      	ands	r2, r0
   15090:	3320      	adds	r3, #32
   15092:	009b      	lsls	r3, r3, #2
   15094:	505a      	str	r2, [r3, r1]


}
   15096:	46c0      	nop			; (mov r8, r8)
   15098:	46bd      	mov	sp, r7
   1509a:	b002      	add	sp, #8
   1509c:	bd80      	pop	{r7, pc}
   1509e:	46c0      	nop			; (mov r8, r8)
   150a0:	00015101 	.word	0x00015101
   150a4:	40001800 	.word	0x40001800

000150a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   150a8:	b580      	push	{r7, lr}
   150aa:	b082      	sub	sp, #8
   150ac:	af00      	add	r7, sp, #0
   150ae:	0002      	movs	r2, r0
   150b0:	1dfb      	adds	r3, r7, #7
   150b2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   150b4:	4b0f      	ldr	r3, [pc, #60]	; (150f4 <system_gclk_chan_enable+0x4c>)
   150b6:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   150b8:	490f      	ldr	r1, [pc, #60]	; (150f8 <system_gclk_chan_enable+0x50>)
   150ba:	1dfb      	adds	r3, r7, #7
   150bc:	781b      	ldrb	r3, [r3, #0]
   150be:	480e      	ldr	r0, [pc, #56]	; (150f8 <system_gclk_chan_enable+0x50>)
   150c0:	1dfa      	adds	r2, r7, #7
   150c2:	7812      	ldrb	r2, [r2, #0]
   150c4:	3220      	adds	r2, #32
   150c6:	0092      	lsls	r2, r2, #2
   150c8:	5812      	ldr	r2, [r2, r0]
   150ca:	2040      	movs	r0, #64	; 0x40
   150cc:	4302      	orrs	r2, r0
   150ce:	3320      	adds	r3, #32
   150d0:	009b      	lsls	r3, r3, #2
   150d2:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   150d4:	46c0      	nop			; (mov r8, r8)
   150d6:	4a08      	ldr	r2, [pc, #32]	; (150f8 <system_gclk_chan_enable+0x50>)
   150d8:	1dfb      	adds	r3, r7, #7
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	3320      	adds	r3, #32
   150de:	009b      	lsls	r3, r3, #2
   150e0:	589b      	ldr	r3, [r3, r2]
   150e2:	2240      	movs	r2, #64	; 0x40
   150e4:	4013      	ands	r3, r2
   150e6:	d0f6      	beq.n	150d6 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   150e8:	4b04      	ldr	r3, [pc, #16]	; (150fc <system_gclk_chan_enable+0x54>)
   150ea:	4798      	blx	r3
}
   150ec:	46c0      	nop			; (mov r8, r8)
   150ee:	46bd      	mov	sp, r7
   150f0:	b002      	add	sp, #8
   150f2:	bd80      	pop	{r7, pc}
   150f4:	00014da9 	.word	0x00014da9
   150f8:	40001800 	.word	0x40001800
   150fc:	00014dbd 	.word	0x00014dbd

00015100 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   15100:	b580      	push	{r7, lr}
   15102:	b082      	sub	sp, #8
   15104:	af00      	add	r7, sp, #0
   15106:	0002      	movs	r2, r0
   15108:	1dfb      	adds	r3, r7, #7
   1510a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1510c:	4b0f      	ldr	r3, [pc, #60]	; (1514c <system_gclk_chan_disable+0x4c>)
   1510e:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   15110:	490f      	ldr	r1, [pc, #60]	; (15150 <system_gclk_chan_disable+0x50>)
   15112:	1dfb      	adds	r3, r7, #7
   15114:	781b      	ldrb	r3, [r3, #0]
   15116:	480e      	ldr	r0, [pc, #56]	; (15150 <system_gclk_chan_disable+0x50>)
   15118:	1dfa      	adds	r2, r7, #7
   1511a:	7812      	ldrb	r2, [r2, #0]
   1511c:	3220      	adds	r2, #32
   1511e:	0092      	lsls	r2, r2, #2
   15120:	5812      	ldr	r2, [r2, r0]
   15122:	2040      	movs	r0, #64	; 0x40
   15124:	4382      	bics	r2, r0
   15126:	3320      	adds	r3, #32
   15128:	009b      	lsls	r3, r3, #2
   1512a:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   1512c:	46c0      	nop			; (mov r8, r8)
   1512e:	4a08      	ldr	r2, [pc, #32]	; (15150 <system_gclk_chan_disable+0x50>)
   15130:	1dfb      	adds	r3, r7, #7
   15132:	781b      	ldrb	r3, [r3, #0]
   15134:	3320      	adds	r3, #32
   15136:	009b      	lsls	r3, r3, #2
   15138:	589b      	ldr	r3, [r3, r2]
   1513a:	2240      	movs	r2, #64	; 0x40
   1513c:	4013      	ands	r3, r2
   1513e:	d1f6      	bne.n	1512e <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   15140:	4b04      	ldr	r3, [pc, #16]	; (15154 <system_gclk_chan_disable+0x54>)
   15142:	4798      	blx	r3
}
   15144:	46c0      	nop			; (mov r8, r8)
   15146:	46bd      	mov	sp, r7
   15148:	b002      	add	sp, #8
   1514a:	bd80      	pop	{r7, pc}
   1514c:	00014da9 	.word	0x00014da9
   15150:	40001800 	.word	0x40001800
   15154:	00014dbd 	.word	0x00014dbd

00015158 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   15158:	b580      	push	{r7, lr}
   1515a:	b084      	sub	sp, #16
   1515c:	af00      	add	r7, sp, #0
   1515e:	0002      	movs	r2, r0
   15160:	1dfb      	adds	r3, r7, #7
   15162:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   15164:	4b0d      	ldr	r3, [pc, #52]	; (1519c <system_gclk_chan_get_hz+0x44>)
   15166:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   15168:	4a0d      	ldr	r2, [pc, #52]	; (151a0 <system_gclk_chan_get_hz+0x48>)
   1516a:	1dfb      	adds	r3, r7, #7
   1516c:	781b      	ldrb	r3, [r3, #0]
   1516e:	3320      	adds	r3, #32
   15170:	009b      	lsls	r3, r3, #2
   15172:	589b      	ldr	r3, [r3, r2]
   15174:	071b      	lsls	r3, r3, #28
   15176:	0f1b      	lsrs	r3, r3, #28
   15178:	b2da      	uxtb	r2, r3
   1517a:	230f      	movs	r3, #15
   1517c:	18fb      	adds	r3, r7, r3
   1517e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
   15180:	4b08      	ldr	r3, [pc, #32]	; (151a4 <system_gclk_chan_get_hz+0x4c>)
   15182:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   15184:	230f      	movs	r3, #15
   15186:	18fb      	adds	r3, r7, r3
   15188:	781b      	ldrb	r3, [r3, #0]
   1518a:	0018      	movs	r0, r3
   1518c:	4b06      	ldr	r3, [pc, #24]	; (151a8 <system_gclk_chan_get_hz+0x50>)
   1518e:	4798      	blx	r3
   15190:	0003      	movs	r3, r0
}
   15192:	0018      	movs	r0, r3
   15194:	46bd      	mov	sp, r7
   15196:	b004      	add	sp, #16
   15198:	bd80      	pop	{r7, pc}
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	00014da9 	.word	0x00014da9
   151a0:	40001800 	.word	0x40001800
   151a4:	00014dbd 	.word	0x00014dbd
   151a8:	00014fa9 	.word	0x00014fa9

000151ac <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   151ac:	b580      	push	{r7, lr}
   151ae:	b084      	sub	sp, #16
   151b0:	af00      	add	r7, sp, #0
   151b2:	0002      	movs	r2, r0
   151b4:	1dfb      	adds	r3, r7, #7
   151b6:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   151b8:	230f      	movs	r3, #15
   151ba:	18fb      	adds	r3, r7, r3
   151bc:	2200      	movs	r2, #0
   151be:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   151c0:	1dfb      	adds	r3, r7, #7
   151c2:	781b      	ldrb	r3, [r3, #0]
   151c4:	2b7f      	cmp	r3, #127	; 0x7f
   151c6:	d80b      	bhi.n	151e0 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   151c8:	4a13      	ldr	r2, [pc, #76]	; (15218 <system_interrupt_clear_pending+0x6c>)
   151ca:	1dfb      	adds	r3, r7, #7
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	b25b      	sxtb	r3, r3
   151d0:	2101      	movs	r1, #1
   151d2:	4099      	lsls	r1, r3
   151d4:	000b      	movs	r3, r1
   151d6:	0019      	movs	r1, r3
   151d8:	23c0      	movs	r3, #192	; 0xc0
   151da:	005b      	lsls	r3, r3, #1
   151dc:	50d1      	str	r1, [r2, r3]
   151de:	e014      	b.n	1520a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   151e0:	1dfb      	adds	r3, r7, #7
   151e2:	781b      	ldrb	r3, [r3, #0]
   151e4:	b25b      	sxtb	r3, r3
   151e6:	330e      	adds	r3, #14
   151e8:	d101      	bne.n	151ee <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   151ea:	2317      	movs	r3, #23
   151ec:	e010      	b.n	15210 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   151ee:	1dfb      	adds	r3, r7, #7
   151f0:	781b      	ldrb	r3, [r3, #0]
   151f2:	b25b      	sxtb	r3, r3
   151f4:	3301      	adds	r3, #1
   151f6:	d104      	bne.n	15202 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   151f8:	4b08      	ldr	r3, [pc, #32]	; (1521c <system_interrupt_clear_pending+0x70>)
   151fa:	2280      	movs	r2, #128	; 0x80
   151fc:	0492      	lsls	r2, r2, #18
   151fe:	605a      	str	r2, [r3, #4]
   15200:	e003      	b.n	1520a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   15202:	230f      	movs	r3, #15
   15204:	18fb      	adds	r3, r7, r3
   15206:	2217      	movs	r2, #23
   15208:	701a      	strb	r2, [r3, #0]
	}

	return status;
   1520a:	230f      	movs	r3, #15
   1520c:	18fb      	adds	r3, r7, r3
   1520e:	781b      	ldrb	r3, [r3, #0]
}
   15210:	0018      	movs	r0, r3
   15212:	46bd      	mov	sp, r7
   15214:	b004      	add	sp, #16
   15216:	bd80      	pop	{r7, pc}
   15218:	e000e100 	.word	0xe000e100
   1521c:	e000ed00 	.word	0xe000ed00

00015220 <system_pinmux_get_group_from_gpio_pin>:
{
   15220:	b580      	push	{r7, lr}
   15222:	b084      	sub	sp, #16
   15224:	af00      	add	r7, sp, #0
   15226:	0002      	movs	r2, r0
   15228:	1dfb      	adds	r3, r7, #7
   1522a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1522c:	230f      	movs	r3, #15
   1522e:	18fb      	adds	r3, r7, r3
   15230:	1dfa      	adds	r2, r7, #7
   15232:	7812      	ldrb	r2, [r2, #0]
   15234:	09d2      	lsrs	r2, r2, #7
   15236:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15238:	230e      	movs	r3, #14
   1523a:	18fb      	adds	r3, r7, r3
   1523c:	1dfa      	adds	r2, r7, #7
   1523e:	7812      	ldrb	r2, [r2, #0]
   15240:	0952      	lsrs	r2, r2, #5
   15242:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15244:	4b0d      	ldr	r3, [pc, #52]	; (1527c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15246:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   15248:	230f      	movs	r3, #15
   1524a:	18fb      	adds	r3, r7, r3
   1524c:	781b      	ldrb	r3, [r3, #0]
   1524e:	2b00      	cmp	r3, #0
   15250:	d10f      	bne.n	15272 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15252:	230f      	movs	r3, #15
   15254:	18fb      	adds	r3, r7, r3
   15256:	781b      	ldrb	r3, [r3, #0]
   15258:	009b      	lsls	r3, r3, #2
   1525a:	2210      	movs	r2, #16
   1525c:	4694      	mov	ip, r2
   1525e:	44bc      	add	ip, r7
   15260:	4463      	add	r3, ip
   15262:	3b08      	subs	r3, #8
   15264:	681a      	ldr	r2, [r3, #0]
   15266:	230e      	movs	r3, #14
   15268:	18fb      	adds	r3, r7, r3
   1526a:	781b      	ldrb	r3, [r3, #0]
   1526c:	01db      	lsls	r3, r3, #7
   1526e:	18d3      	adds	r3, r2, r3
   15270:	e000      	b.n	15274 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15272:	2300      	movs	r3, #0
}
   15274:	0018      	movs	r0, r3
   15276:	46bd      	mov	sp, r7
   15278:	b004      	add	sp, #16
   1527a:	bd80      	pop	{r7, pc}
   1527c:	40002800 	.word	0x40002800

00015280 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   15280:	b580      	push	{r7, lr}
   15282:	b088      	sub	sp, #32
   15284:	af00      	add	r7, sp, #0
   15286:	60f8      	str	r0, [r7, #12]
   15288:	60b9      	str	r1, [r7, #8]
   1528a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   1528c:	2300      	movs	r3, #0
   1528e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   15290:	687b      	ldr	r3, [r7, #4]
   15292:	78db      	ldrb	r3, [r3, #3]
   15294:	2201      	movs	r2, #1
   15296:	4053      	eors	r3, r2
   15298:	b2db      	uxtb	r3, r3
   1529a:	2b00      	cmp	r3, #0
   1529c:	d035      	beq.n	1530a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1529e:	687b      	ldr	r3, [r7, #4]
   152a0:	781b      	ldrb	r3, [r3, #0]
   152a2:	2b80      	cmp	r3, #128	; 0x80
   152a4:	d00b      	beq.n	152be <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   152a6:	69fb      	ldr	r3, [r7, #28]
   152a8:	2280      	movs	r2, #128	; 0x80
   152aa:	0252      	lsls	r2, r2, #9
   152ac:	4313      	orrs	r3, r2
   152ae:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   152b0:	687b      	ldr	r3, [r7, #4]
   152b2:	781b      	ldrb	r3, [r3, #0]
   152b4:	061b      	lsls	r3, r3, #24
   152b6:	001a      	movs	r2, r3
   152b8:	69fb      	ldr	r3, [r7, #28]
   152ba:	4313      	orrs	r3, r2
   152bc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   152be:	687b      	ldr	r3, [r7, #4]
   152c0:	785b      	ldrb	r3, [r3, #1]
   152c2:	2b00      	cmp	r3, #0
   152c4:	d003      	beq.n	152ce <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   152c6:	687b      	ldr	r3, [r7, #4]
   152c8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   152ca:	2b02      	cmp	r3, #2
   152cc:	d110      	bne.n	152f0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   152ce:	69fb      	ldr	r3, [r7, #28]
   152d0:	2280      	movs	r2, #128	; 0x80
   152d2:	0292      	lsls	r2, r2, #10
   152d4:	4313      	orrs	r3, r2
   152d6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   152d8:	687b      	ldr	r3, [r7, #4]
   152da:	789b      	ldrb	r3, [r3, #2]
   152dc:	2b00      	cmp	r3, #0
   152de:	d004      	beq.n	152ea <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   152e0:	69fb      	ldr	r3, [r7, #28]
   152e2:	2280      	movs	r2, #128	; 0x80
   152e4:	02d2      	lsls	r2, r2, #11
   152e6:	4313      	orrs	r3, r2
   152e8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   152ea:	68fb      	ldr	r3, [r7, #12]
   152ec:	68ba      	ldr	r2, [r7, #8]
   152ee:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   152f0:	687b      	ldr	r3, [r7, #4]
   152f2:	785b      	ldrb	r3, [r3, #1]
   152f4:	2b01      	cmp	r3, #1
   152f6:	d003      	beq.n	15300 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   152f8:	687b      	ldr	r3, [r7, #4]
   152fa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   152fc:	2b02      	cmp	r3, #2
   152fe:	d107      	bne.n	15310 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   15300:	69fb      	ldr	r3, [r7, #28]
   15302:	4a22      	ldr	r2, [pc, #136]	; (1538c <_system_pinmux_config+0x10c>)
   15304:	4013      	ands	r3, r2
   15306:	61fb      	str	r3, [r7, #28]
   15308:	e002      	b.n	15310 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   1530a:	68fb      	ldr	r3, [r7, #12]
   1530c:	68ba      	ldr	r2, [r7, #8]
   1530e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   15310:	68bb      	ldr	r3, [r7, #8]
   15312:	041b      	lsls	r3, r3, #16
   15314:	0c1b      	lsrs	r3, r3, #16
   15316:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   15318:	68bb      	ldr	r3, [r7, #8]
   1531a:	0c1b      	lsrs	r3, r3, #16
   1531c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1531e:	69ba      	ldr	r2, [r7, #24]
   15320:	69fb      	ldr	r3, [r7, #28]
   15322:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   15324:	22a0      	movs	r2, #160	; 0xa0
   15326:	05d2      	lsls	r2, r2, #23
   15328:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1532a:	68fb      	ldr	r3, [r7, #12]
   1532c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1532e:	697a      	ldr	r2, [r7, #20]
   15330:	69fb      	ldr	r3, [r7, #28]
   15332:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   15334:	22d0      	movs	r2, #208	; 0xd0
   15336:	0612      	lsls	r2, r2, #24
   15338:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1533a:	68fb      	ldr	r3, [r7, #12]
   1533c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1533e:	687b      	ldr	r3, [r7, #4]
   15340:	78db      	ldrb	r3, [r3, #3]
   15342:	2201      	movs	r2, #1
   15344:	4053      	eors	r3, r2
   15346:	b2db      	uxtb	r3, r3
   15348:	2b00      	cmp	r3, #0
   1534a:	d01a      	beq.n	15382 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1534c:	69fa      	ldr	r2, [r7, #28]
   1534e:	2380      	movs	r3, #128	; 0x80
   15350:	02db      	lsls	r3, r3, #11
   15352:	4013      	ands	r3, r2
   15354:	d00a      	beq.n	1536c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   15356:	687b      	ldr	r3, [r7, #4]
   15358:	789b      	ldrb	r3, [r3, #2]
   1535a:	2b01      	cmp	r3, #1
   1535c:	d103      	bne.n	15366 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1535e:	68fb      	ldr	r3, [r7, #12]
   15360:	68ba      	ldr	r2, [r7, #8]
   15362:	619a      	str	r2, [r3, #24]
   15364:	e002      	b.n	1536c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   15366:	68fb      	ldr	r3, [r7, #12]
   15368:	68ba      	ldr	r2, [r7, #8]
   1536a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1536c:	687b      	ldr	r3, [r7, #4]
   1536e:	785b      	ldrb	r3, [r3, #1]
   15370:	2b01      	cmp	r3, #1
   15372:	d003      	beq.n	1537c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15374:	687b      	ldr	r3, [r7, #4]
   15376:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15378:	2b02      	cmp	r3, #2
   1537a:	d102      	bne.n	15382 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1537c:	68fb      	ldr	r3, [r7, #12]
   1537e:	68ba      	ldr	r2, [r7, #8]
   15380:	609a      	str	r2, [r3, #8]
		}
	}
}
   15382:	46c0      	nop			; (mov r8, r8)
   15384:	46bd      	mov	sp, r7
   15386:	b008      	add	sp, #32
   15388:	bd80      	pop	{r7, pc}
   1538a:	46c0      	nop			; (mov r8, r8)
   1538c:	fffbffff 	.word	0xfffbffff

00015390 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   15390:	b580      	push	{r7, lr}
   15392:	b084      	sub	sp, #16
   15394:	af00      	add	r7, sp, #0
   15396:	0002      	movs	r2, r0
   15398:	6039      	str	r1, [r7, #0]
   1539a:	1dfb      	adds	r3, r7, #7
   1539c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1539e:	1dfb      	adds	r3, r7, #7
   153a0:	781b      	ldrb	r3, [r3, #0]
   153a2:	0018      	movs	r0, r3
   153a4:	4b0a      	ldr	r3, [pc, #40]	; (153d0 <system_pinmux_pin_set_config+0x40>)
   153a6:	4798      	blx	r3
   153a8:	0003      	movs	r3, r0
   153aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   153ac:	1dfb      	adds	r3, r7, #7
   153ae:	781b      	ldrb	r3, [r3, #0]
   153b0:	221f      	movs	r2, #31
   153b2:	4013      	ands	r3, r2
   153b4:	2201      	movs	r2, #1
   153b6:	409a      	lsls	r2, r3
   153b8:	0013      	movs	r3, r2
   153ba:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   153bc:	683a      	ldr	r2, [r7, #0]
   153be:	68b9      	ldr	r1, [r7, #8]
   153c0:	68fb      	ldr	r3, [r7, #12]
   153c2:	0018      	movs	r0, r3
   153c4:	4b03      	ldr	r3, [pc, #12]	; (153d4 <system_pinmux_pin_set_config+0x44>)
   153c6:	4798      	blx	r3
}
   153c8:	46c0      	nop			; (mov r8, r8)
   153ca:	46bd      	mov	sp, r7
   153cc:	b004      	add	sp, #16
   153ce:	bd80      	pop	{r7, pc}
   153d0:	00015221 	.word	0x00015221
   153d4:	00015281 	.word	0x00015281

000153d8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   153d8:	b580      	push	{r7, lr}
   153da:	af00      	add	r7, sp, #0
	return;
   153dc:	46c0      	nop			; (mov r8, r8)
}
   153de:	46bd      	mov	sp, r7
   153e0:	bd80      	pop	{r7, pc}
	...

000153e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   153e4:	b580      	push	{r7, lr}
   153e6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   153e8:	4b06      	ldr	r3, [pc, #24]	; (15404 <system_init+0x20>)
   153ea:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   153ec:	4b06      	ldr	r3, [pc, #24]	; (15408 <system_init+0x24>)
   153ee:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   153f0:	4b06      	ldr	r3, [pc, #24]	; (1540c <system_init+0x28>)
   153f2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   153f4:	4b06      	ldr	r3, [pc, #24]	; (15410 <system_init+0x2c>)
   153f6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   153f8:	4b06      	ldr	r3, [pc, #24]	; (15414 <system_init+0x30>)
   153fa:	4798      	blx	r3
}
   153fc:	46c0      	nop			; (mov r8, r8)
   153fe:	46bd      	mov	sp, r7
   15400:	bd80      	pop	{r7, pc}
   15402:	46c0      	nop			; (mov r8, r8)
   15404:	00014a7d 	.word	0x00014a7d
   15408:	00010f75 	.word	0x00010f75
   1540c:	000153d9 	.word	0x000153d9
   15410:	0001144d 	.word	0x0001144d
   15414:	000153d9 	.word	0x000153d9

00015418 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
   15418:	b580      	push	{r7, lr}
   1541a:	af00      	add	r7, sp, #0
   1541c:	2000      	movs	r0, #0
   1541e:	4b02      	ldr	r3, [pc, #8]	; (15428 <TC0_Handler+0x10>)
   15420:	4798      	blx	r3
   15422:	46c0      	nop			; (mov r8, r8)
   15424:	46bd      	mov	sp, r7
   15426:	bd80      	pop	{r7, pc}
   15428:	00015455 	.word	0x00015455

0001542c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
   1542c:	b580      	push	{r7, lr}
   1542e:	af00      	add	r7, sp, #0
   15430:	2001      	movs	r0, #1
   15432:	4b02      	ldr	r3, [pc, #8]	; (1543c <TC1_Handler+0x10>)
   15434:	4798      	blx	r3
   15436:	46c0      	nop			; (mov r8, r8)
   15438:	46bd      	mov	sp, r7
   1543a:	bd80      	pop	{r7, pc}
   1543c:	00015455 	.word	0x00015455

00015440 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
   15440:	b580      	push	{r7, lr}
   15442:	af00      	add	r7, sp, #0
   15444:	2002      	movs	r0, #2
   15446:	4b02      	ldr	r3, [pc, #8]	; (15450 <TC4_Handler+0x10>)
   15448:	4798      	blx	r3
   1544a:	46c0      	nop			; (mov r8, r8)
   1544c:	46bd      	mov	sp, r7
   1544e:	bd80      	pop	{r7, pc}
   15450:	00015455 	.word	0x00015455

00015454 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   15454:	b580      	push	{r7, lr}
   15456:	b084      	sub	sp, #16
   15458:	af00      	add	r7, sp, #0
   1545a:	0002      	movs	r2, r0
   1545c:	1dfb      	adds	r3, r7, #7
   1545e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   15460:	1dfb      	adds	r3, r7, #7
   15462:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   15464:	4b28      	ldr	r3, [pc, #160]	; (15508 <_tc_interrupt_handler+0xb4>)
   15466:	0092      	lsls	r2, r2, #2
   15468:	58d3      	ldr	r3, [r2, r3]
   1546a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1546c:	68fb      	ldr	r3, [r7, #12]
   1546e:	681b      	ldr	r3, [r3, #0]
   15470:	7a9b      	ldrb	r3, [r3, #10]
   15472:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   15474:	68fa      	ldr	r2, [r7, #12]
   15476:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15478:	4013      	ands	r3, r2
   1547a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1547c:	68fb      	ldr	r3, [r7, #12]
   1547e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15480:	230b      	movs	r3, #11
   15482:	18fb      	adds	r3, r7, r3
   15484:	400a      	ands	r2, r1
   15486:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   15488:	230b      	movs	r3, #11
   1548a:	18fb      	adds	r3, r7, r3
   1548c:	781b      	ldrb	r3, [r3, #0]
   1548e:	2201      	movs	r2, #1
   15490:	4013      	ands	r3, r2
   15492:	d008      	beq.n	154a6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   15494:	68fb      	ldr	r3, [r7, #12]
   15496:	689b      	ldr	r3, [r3, #8]
   15498:	68fa      	ldr	r2, [r7, #12]
   1549a:	0010      	movs	r0, r2
   1549c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1549e:	68fb      	ldr	r3, [r7, #12]
   154a0:	681b      	ldr	r3, [r3, #0]
   154a2:	2201      	movs	r2, #1
   154a4:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   154a6:	230b      	movs	r3, #11
   154a8:	18fb      	adds	r3, r7, r3
   154aa:	781b      	ldrb	r3, [r3, #0]
   154ac:	2202      	movs	r2, #2
   154ae:	4013      	ands	r3, r2
   154b0:	d008      	beq.n	154c4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   154b2:	68fb      	ldr	r3, [r7, #12]
   154b4:	68db      	ldr	r3, [r3, #12]
   154b6:	68fa      	ldr	r2, [r7, #12]
   154b8:	0010      	movs	r0, r2
   154ba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   154bc:	68fb      	ldr	r3, [r7, #12]
   154be:	681b      	ldr	r3, [r3, #0]
   154c0:	2202      	movs	r2, #2
   154c2:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   154c4:	230b      	movs	r3, #11
   154c6:	18fb      	adds	r3, r7, r3
   154c8:	781b      	ldrb	r3, [r3, #0]
   154ca:	2210      	movs	r2, #16
   154cc:	4013      	ands	r3, r2
   154ce:	d008      	beq.n	154e2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   154d0:	68fb      	ldr	r3, [r7, #12]
   154d2:	691b      	ldr	r3, [r3, #16]
   154d4:	68fa      	ldr	r2, [r7, #12]
   154d6:	0010      	movs	r0, r2
   154d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   154da:	68fb      	ldr	r3, [r7, #12]
   154dc:	681b      	ldr	r3, [r3, #0]
   154de:	2210      	movs	r2, #16
   154e0:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   154e2:	230b      	movs	r3, #11
   154e4:	18fb      	adds	r3, r7, r3
   154e6:	781b      	ldrb	r3, [r3, #0]
   154e8:	2220      	movs	r2, #32
   154ea:	4013      	ands	r3, r2
   154ec:	d008      	beq.n	15500 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   154ee:	68fb      	ldr	r3, [r7, #12]
   154f0:	695b      	ldr	r3, [r3, #20]
   154f2:	68fa      	ldr	r2, [r7, #12]
   154f4:	0010      	movs	r0, r2
   154f6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   154f8:	68fb      	ldr	r3, [r7, #12]
   154fa:	681b      	ldr	r3, [r3, #0]
   154fc:	2220      	movs	r2, #32
   154fe:	729a      	strb	r2, [r3, #10]
	}
}
   15500:	46c0      	nop			; (mov r8, r8)
   15502:	46bd      	mov	sp, r7
   15504:	b004      	add	sp, #16
   15506:	bd80      	pop	{r7, pc}
   15508:	200015ec 	.word	0x200015ec

0001550c <system_gclk_chan_get_config_defaults>:
{
   1550c:	b580      	push	{r7, lr}
   1550e:	b082      	sub	sp, #8
   15510:	af00      	add	r7, sp, #0
   15512:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15514:	687b      	ldr	r3, [r7, #4]
   15516:	2200      	movs	r2, #0
   15518:	701a      	strb	r2, [r3, #0]
}
   1551a:	46c0      	nop			; (mov r8, r8)
   1551c:	46bd      	mov	sp, r7
   1551e:	b002      	add	sp, #8
   15520:	bd80      	pop	{r7, pc}
	...

00015524 <system_apb_clock_set_mask>:
{
   15524:	b580      	push	{r7, lr}
   15526:	b082      	sub	sp, #8
   15528:	af00      	add	r7, sp, #0
   1552a:	0002      	movs	r2, r0
   1552c:	6039      	str	r1, [r7, #0]
   1552e:	1dfb      	adds	r3, r7, #7
   15530:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15532:	1dfb      	adds	r3, r7, #7
   15534:	781b      	ldrb	r3, [r3, #0]
   15536:	2b04      	cmp	r3, #4
   15538:	d827      	bhi.n	1558a <system_apb_clock_set_mask+0x66>
   1553a:	009a      	lsls	r2, r3, #2
   1553c:	4b16      	ldr	r3, [pc, #88]	; (15598 <system_apb_clock_set_mask+0x74>)
   1553e:	18d3      	adds	r3, r2, r3
   15540:	681b      	ldr	r3, [r3, #0]
   15542:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   15544:	4b15      	ldr	r3, [pc, #84]	; (1559c <system_apb_clock_set_mask+0x78>)
   15546:	4a15      	ldr	r2, [pc, #84]	; (1559c <system_apb_clock_set_mask+0x78>)
   15548:	6951      	ldr	r1, [r2, #20]
   1554a:	683a      	ldr	r2, [r7, #0]
   1554c:	430a      	orrs	r2, r1
   1554e:	615a      	str	r2, [r3, #20]
			break;
   15550:	e01d      	b.n	1558e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   15552:	4b12      	ldr	r3, [pc, #72]	; (1559c <system_apb_clock_set_mask+0x78>)
   15554:	4a11      	ldr	r2, [pc, #68]	; (1559c <system_apb_clock_set_mask+0x78>)
   15556:	6991      	ldr	r1, [r2, #24]
   15558:	683a      	ldr	r2, [r7, #0]
   1555a:	430a      	orrs	r2, r1
   1555c:	619a      	str	r2, [r3, #24]
			break;
   1555e:	e016      	b.n	1558e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   15560:	4b0e      	ldr	r3, [pc, #56]	; (1559c <system_apb_clock_set_mask+0x78>)
   15562:	4a0e      	ldr	r2, [pc, #56]	; (1559c <system_apb_clock_set_mask+0x78>)
   15564:	69d1      	ldr	r1, [r2, #28]
   15566:	683a      	ldr	r2, [r7, #0]
   15568:	430a      	orrs	r2, r1
   1556a:	61da      	str	r2, [r3, #28]
			break;
   1556c:	e00f      	b.n	1558e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   1556e:	4b0b      	ldr	r3, [pc, #44]	; (1559c <system_apb_clock_set_mask+0x78>)
   15570:	4a0a      	ldr	r2, [pc, #40]	; (1559c <system_apb_clock_set_mask+0x78>)
   15572:	6a11      	ldr	r1, [r2, #32]
   15574:	683a      	ldr	r2, [r7, #0]
   15576:	430a      	orrs	r2, r1
   15578:	621a      	str	r2, [r3, #32]
			break;
   1557a:	e008      	b.n	1558e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   1557c:	4b07      	ldr	r3, [pc, #28]	; (1559c <system_apb_clock_set_mask+0x78>)
   1557e:	4a07      	ldr	r2, [pc, #28]	; (1559c <system_apb_clock_set_mask+0x78>)
   15580:	6a51      	ldr	r1, [r2, #36]	; 0x24
   15582:	683a      	ldr	r2, [r7, #0]
   15584:	430a      	orrs	r2, r1
   15586:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   15588:	e001      	b.n	1558e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   1558a:	2317      	movs	r3, #23
   1558c:	e000      	b.n	15590 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   1558e:	2300      	movs	r3, #0
}
   15590:	0018      	movs	r0, r3
   15592:	46bd      	mov	sp, r7
   15594:	b002      	add	sp, #8
   15596:	bd80      	pop	{r7, pc}
   15598:	0001ccf0 	.word	0x0001ccf0
   1559c:	40000400 	.word	0x40000400

000155a0 <system_pinmux_get_config_defaults>:
{
   155a0:	b580      	push	{r7, lr}
   155a2:	b082      	sub	sp, #8
   155a4:	af00      	add	r7, sp, #0
   155a6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   155a8:	687b      	ldr	r3, [r7, #4]
   155aa:	2280      	movs	r2, #128	; 0x80
   155ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   155ae:	687b      	ldr	r3, [r7, #4]
   155b0:	2200      	movs	r2, #0
   155b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   155b4:	687b      	ldr	r3, [r7, #4]
   155b6:	2201      	movs	r2, #1
   155b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   155ba:	687b      	ldr	r3, [r7, #4]
   155bc:	2200      	movs	r2, #0
   155be:	70da      	strb	r2, [r3, #3]
}
   155c0:	46c0      	nop			; (mov r8, r8)
   155c2:	46bd      	mov	sp, r7
   155c4:	b002      	add	sp, #8
   155c6:	bd80      	pop	{r7, pc}

000155c8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
   155c8:	b580      	push	{r7, lr}
   155ca:	b084      	sub	sp, #16
   155cc:	af00      	add	r7, sp, #0
   155ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   155d0:	687b      	ldr	r3, [r7, #4]
   155d2:	681b      	ldr	r3, [r3, #0]
   155d4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
   155d6:	68fb      	ldr	r3, [r7, #12]
   155d8:	691b      	ldr	r3, [r3, #16]
   155da:	1e5a      	subs	r2, r3, #1
   155dc:	4193      	sbcs	r3, r2
   155de:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
   155e0:	0018      	movs	r0, r3
   155e2:	46bd      	mov	sp, r7
   155e4:	b004      	add	sp, #16
   155e6:	bd80      	pop	{r7, pc}

000155e8 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
   155e8:	b580      	push	{r7, lr}
   155ea:	b084      	sub	sp, #16
   155ec:	af00      	add	r7, sp, #0
   155ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   155f0:	687b      	ldr	r3, [r7, #4]
   155f2:	681b      	ldr	r3, [r3, #0]
   155f4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   155f6:	46c0      	nop			; (mov r8, r8)
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	0018      	movs	r0, r3
   155fc:	4b0a      	ldr	r3, [pc, #40]	; (15628 <tc_disable+0x40>)
   155fe:	4798      	blx	r3
   15600:	1e03      	subs	r3, r0, #0
   15602:	d1f9      	bne.n	155f8 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   15604:	68fb      	ldr	r3, [r7, #12]
   15606:	2233      	movs	r2, #51	; 0x33
   15608:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   1560a:	68fb      	ldr	r3, [r7, #12]
   1560c:	2233      	movs	r2, #51	; 0x33
   1560e:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   15610:	68fb      	ldr	r3, [r7, #12]
   15612:	681b      	ldr	r3, [r3, #0]
   15614:	2202      	movs	r2, #2
   15616:	4393      	bics	r3, r2
   15618:	001a      	movs	r2, r3
   1561a:	68fb      	ldr	r3, [r7, #12]
   1561c:	601a      	str	r2, [r3, #0]
}
   1561e:	46c0      	nop			; (mov r8, r8)
   15620:	46bd      	mov	sp, r7
   15622:	b004      	add	sp, #16
   15624:	bd80      	pop	{r7, pc}
   15626:	46c0      	nop			; (mov r8, r8)
   15628:	000155c9 	.word	0x000155c9

0001562c <tc_sync_read_count>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_sync_read_count(
		const struct tc_module *const module_inst)
{
   1562c:	b580      	push	{r7, lr}
   1562e:	b084      	sub	sp, #16
   15630:	af00      	add	r7, sp, #0
   15632:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   15634:	687b      	ldr	r3, [r7, #4]
   15636:	681b      	ldr	r3, [r3, #0]
   15638:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   1563a:	46c0      	nop			; (mov r8, r8)
   1563c:	687b      	ldr	r3, [r7, #4]
   1563e:	0018      	movs	r0, r3
   15640:	4b0a      	ldr	r3, [pc, #40]	; (1566c <tc_sync_read_count+0x40>)
   15642:	4798      	blx	r3
   15644:	1e03      	subs	r3, r0, #0
   15646:	d1f9      	bne.n	1563c <tc_sync_read_count+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   15648:	68fb      	ldr	r3, [r7, #12]
   1564a:	2200      	movs	r2, #0
   1564c:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
   1564e:	46c0      	nop			; (mov r8, r8)
   15650:	687b      	ldr	r3, [r7, #4]
   15652:	0018      	movs	r0, r3
   15654:	4b05      	ldr	r3, [pc, #20]	; (1566c <tc_sync_read_count+0x40>)
   15656:	4798      	blx	r3
   15658:	1e03      	subs	r3, r0, #0
   1565a:	d1f9      	bne.n	15650 <tc_sync_read_count+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
   1565c:	68fb      	ldr	r3, [r7, #12]
   1565e:	2280      	movs	r2, #128	; 0x80
   15660:	715a      	strb	r2, [r3, #5]
}
   15662:	46c0      	nop			; (mov r8, r8)
   15664:	46bd      	mov	sp, r7
   15666:	b004      	add	sp, #16
   15668:	bd80      	pop	{r7, pc}
   1566a:	46c0      	nop			; (mov r8, r8)
   1566c:	000155c9 	.word	0x000155c9

00015670 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
   15670:	b590      	push	{r4, r7, lr}
   15672:	b087      	sub	sp, #28
   15674:	af00      	add	r7, sp, #0
   15676:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   15678:	2308      	movs	r3, #8
   1567a:	18fb      	adds	r3, r7, r3
   1567c:	4a0d      	ldr	r2, [pc, #52]	; (156b4 <_tc_get_inst_index+0x44>)
   1567e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15680:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   15682:	2300      	movs	r3, #0
   15684:	617b      	str	r3, [r7, #20]
   15686:	e00d      	b.n	156a4 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
   15688:	2308      	movs	r3, #8
   1568a:	18fb      	adds	r3, r7, r3
   1568c:	697a      	ldr	r2, [r7, #20]
   1568e:	0092      	lsls	r2, r2, #2
   15690:	58d2      	ldr	r2, [r2, r3]
   15692:	687b      	ldr	r3, [r7, #4]
   15694:	429a      	cmp	r2, r3
   15696:	d102      	bne.n	1569e <_tc_get_inst_index+0x2e>
			return i;
   15698:	697b      	ldr	r3, [r7, #20]
   1569a:	b2db      	uxtb	r3, r3
   1569c:	e006      	b.n	156ac <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1569e:	697b      	ldr	r3, [r7, #20]
   156a0:	3301      	adds	r3, #1
   156a2:	617b      	str	r3, [r7, #20]
   156a4:	697b      	ldr	r3, [r7, #20]
   156a6:	2b02      	cmp	r3, #2
   156a8:	d9ee      	bls.n	15688 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   156aa:	2300      	movs	r3, #0
}
   156ac:	0018      	movs	r0, r3
   156ae:	46bd      	mov	sp, r7
   156b0:	b007      	add	sp, #28
   156b2:	bd90      	pop	{r4, r7, pc}
   156b4:	0001cd04 	.word	0x0001cd04

000156b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
   156b8:	b590      	push	{r4, r7, lr}
   156ba:	b091      	sub	sp, #68	; 0x44
   156bc:	af00      	add	r7, sp, #0
   156be:	60f8      	str	r0, [r7, #12]
   156c0:	60b9      	str	r1, [r7, #8]
   156c2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
   156c4:	2300      	movs	r3, #0
   156c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
   156c8:	233b      	movs	r3, #59	; 0x3b
   156ca:	18fb      	adds	r3, r7, r3
   156cc:	2200      	movs	r2, #0
   156ce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
   156d0:	2337      	movs	r3, #55	; 0x37
   156d2:	18fc      	adds	r4, r7, r3
   156d4:	68bb      	ldr	r3, [r7, #8]
   156d6:	0018      	movs	r0, r3
   156d8:	4bd4      	ldr	r3, [pc, #848]	; (15a2c <tc_init+0x374>)
   156da:	4798      	blx	r3
   156dc:	0003      	movs	r3, r0
   156de:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
   156e0:	2334      	movs	r3, #52	; 0x34
   156e2:	18fb      	adds	r3, r7, r3
   156e4:	4ad2      	ldr	r2, [pc, #840]	; (15a30 <tc_init+0x378>)
   156e6:	8811      	ldrh	r1, [r2, #0]
   156e8:	8019      	strh	r1, [r3, #0]
   156ea:	7892      	ldrb	r2, [r2, #2]
   156ec:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
   156ee:	231c      	movs	r3, #28
   156f0:	18fb      	adds	r3, r7, r3
   156f2:	4ad0      	ldr	r2, [pc, #832]	; (15a34 <tc_init+0x37c>)
   156f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   156f6:	c313      	stmia	r3!, {r0, r1, r4}
   156f8:	ca13      	ldmia	r2!, {r0, r1, r4}
   156fa:	c313      	stmia	r3!, {r0, r1, r4}
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   156fc:	233a      	movs	r3, #58	; 0x3a
   156fe:	18fb      	adds	r3, r7, r3
   15700:	2200      	movs	r2, #0
   15702:	701a      	strb	r2, [r3, #0]
   15704:	e00e      	b.n	15724 <tc_init+0x6c>
		module_inst->callback[i]        = NULL;
   15706:	233a      	movs	r3, #58	; 0x3a
   15708:	18fb      	adds	r3, r7, r3
   1570a:	781a      	ldrb	r2, [r3, #0]
   1570c:	68fb      	ldr	r3, [r7, #12]
   1570e:	3202      	adds	r2, #2
   15710:	0092      	lsls	r2, r2, #2
   15712:	2100      	movs	r1, #0
   15714:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   15716:	233a      	movs	r3, #58	; 0x3a
   15718:	18fb      	adds	r3, r7, r3
   1571a:	781a      	ldrb	r2, [r3, #0]
   1571c:	233a      	movs	r3, #58	; 0x3a
   1571e:	18fb      	adds	r3, r7, r3
   15720:	3201      	adds	r2, #1
   15722:	701a      	strb	r2, [r3, #0]
   15724:	233a      	movs	r3, #58	; 0x3a
   15726:	18fb      	adds	r3, r7, r3
   15728:	781b      	ldrb	r3, [r3, #0]
   1572a:	2b03      	cmp	r3, #3
   1572c:	d9eb      	bls.n	15706 <tc_init+0x4e>
	}
	module_inst->register_callback_mask     = 0x00;
   1572e:	68fb      	ldr	r3, [r7, #12]
   15730:	2200      	movs	r2, #0
   15732:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
   15734:	68fb      	ldr	r3, [r7, #12]
   15736:	2200      	movs	r2, #0
   15738:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
   1573a:	2337      	movs	r3, #55	; 0x37
   1573c:	18fb      	adds	r3, r7, r3
   1573e:	781a      	ldrb	r2, [r3, #0]
   15740:	4bbd      	ldr	r3, [pc, #756]	; (15a38 <tc_init+0x380>)
   15742:	0092      	lsls	r2, r2, #2
   15744:	68f9      	ldr	r1, [r7, #12]
   15746:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
   15748:	68fb      	ldr	r3, [r7, #12]
   1574a:	68ba      	ldr	r2, [r7, #8]
   1574c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1574e:	687b      	ldr	r3, [r7, #4]
   15750:	2234      	movs	r2, #52	; 0x34
   15752:	5c9a      	ldrb	r2, [r3, r2]
   15754:	68fb      	ldr	r3, [r7, #12]
   15756:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   15758:	687b      	ldr	r3, [r7, #4]
   1575a:	78db      	ldrb	r3, [r3, #3]
   1575c:	2b08      	cmp	r3, #8
   1575e:	d107      	bne.n	15770 <tc_init+0xb8>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
   15760:	2337      	movs	r3, #55	; 0x37
   15762:	18fb      	adds	r3, r7, r3
   15764:	781b      	ldrb	r3, [r3, #0]
   15766:	2201      	movs	r2, #1
   15768:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   1576a:	d001      	beq.n	15770 <tc_init+0xb8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1576c:	2317      	movs	r3, #23
   1576e:	e1ec      	b.n	15b4a <tc_init+0x492>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	78da      	ldrb	r2, [r3, #3]
   15774:	68fb      	ldr	r3, [r7, #12]
   15776:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   15778:	68bb      	ldr	r3, [r7, #8]
   1577a:	681b      	ldr	r3, [r3, #0]
   1577c:	2201      	movs	r2, #1
   1577e:	4013      	ands	r3, r2
   15780:	d001      	beq.n	15786 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   15782:	2305      	movs	r3, #5
   15784:	e1e1      	b.n	15b4a <tc_init+0x492>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   15786:	68bb      	ldr	r3, [r7, #8]
   15788:	7adb      	ldrb	r3, [r3, #11]
   1578a:	b2db      	uxtb	r3, r3
   1578c:	001a      	movs	r2, r3
   1578e:	2302      	movs	r3, #2
   15790:	4013      	ands	r3, r2
   15792:	d001      	beq.n	15798 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
   15794:	231c      	movs	r3, #28
   15796:	e1d8      	b.n	15b4a <tc_init+0x492>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
   15798:	68bb      	ldr	r3, [r7, #8]
   1579a:	681b      	ldr	r3, [r3, #0]
   1579c:	2202      	movs	r2, #2
   1579e:	4013      	ands	r3, r2
   157a0:	d001      	beq.n	157a6 <tc_init+0xee>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   157a2:	231c      	movs	r3, #28
   157a4:	e1d1      	b.n	15b4a <tc_init+0x492>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
   157a6:	687b      	ldr	r3, [r7, #4]
   157a8:	7c1b      	ldrb	r3, [r3, #16]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d017      	beq.n	157de <tc_init+0x126>
		system_pinmux_get_config_defaults(&pin_config);
   157ae:	2318      	movs	r3, #24
   157b0:	18fb      	adds	r3, r7, r3
   157b2:	0018      	movs	r0, r3
   157b4:	4ba1      	ldr	r3, [pc, #644]	; (15a3c <tc_init+0x384>)
   157b6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   157b8:	687b      	ldr	r3, [r7, #4]
   157ba:	699b      	ldr	r3, [r3, #24]
   157bc:	b2da      	uxtb	r2, r3
   157be:	2318      	movs	r3, #24
   157c0:	18fb      	adds	r3, r7, r3
   157c2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   157c4:	2318      	movs	r3, #24
   157c6:	18fb      	adds	r3, r7, r3
   157c8:	2201      	movs	r2, #1
   157ca:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
   157cc:	687b      	ldr	r3, [r7, #4]
   157ce:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
   157d0:	b2db      	uxtb	r3, r3
   157d2:	2218      	movs	r2, #24
   157d4:	18ba      	adds	r2, r7, r2
   157d6:	0011      	movs	r1, r2
   157d8:	0018      	movs	r0, r3
   157da:	4b99      	ldr	r3, [pc, #612]	; (15a40 <tc_init+0x388>)
   157dc:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
   157de:	687b      	ldr	r3, [r7, #4]
   157e0:	7f1b      	ldrb	r3, [r3, #28]
   157e2:	2b00      	cmp	r3, #0
   157e4:	d017      	beq.n	15816 <tc_init+0x15e>
		system_pinmux_get_config_defaults(&pin_config);
   157e6:	2318      	movs	r3, #24
   157e8:	18fb      	adds	r3, r7, r3
   157ea:	0018      	movs	r0, r3
   157ec:	4b93      	ldr	r3, [pc, #588]	; (15a3c <tc_init+0x384>)
   157ee:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   157f4:	b2da      	uxtb	r2, r3
   157f6:	2318      	movs	r3, #24
   157f8:	18fb      	adds	r3, r7, r3
   157fa:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   157fc:	2318      	movs	r3, #24
   157fe:	18fb      	adds	r3, r7, r3
   15800:	2201      	movs	r2, #1
   15802:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
   15804:	687b      	ldr	r3, [r7, #4]
   15806:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
   15808:	b2db      	uxtb	r3, r3
   1580a:	2218      	movs	r2, #24
   1580c:	18ba      	adds	r2, r7, r2
   1580e:	0011      	movs	r1, r2
   15810:	0018      	movs	r0, r3
   15812:	4b8b      	ldr	r3, [pc, #556]	; (15a40 <tc_init+0x388>)
   15814:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   15816:	2337      	movs	r3, #55	; 0x37
   15818:	18fb      	adds	r3, r7, r3
   1581a:	781b      	ldrb	r3, [r3, #0]
   1581c:	005a      	lsls	r2, r3, #1
   1581e:	231c      	movs	r3, #28
   15820:	18fb      	adds	r3, r7, r3
   15822:	0092      	lsls	r2, r2, #2
   15824:	58d3      	ldr	r3, [r2, r3]
   15826:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
   15828:	2337      	movs	r3, #55	; 0x37
   1582a:	18fb      	adds	r3, r7, r3
   1582c:	781b      	ldrb	r3, [r3, #0]
   1582e:	005b      	lsls	r3, r3, #1
   15830:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   15832:	231c      	movs	r3, #28
   15834:	18fb      	adds	r3, r7, r3
   15836:	0092      	lsls	r2, r2, #2
   15838:	58d3      	ldr	r3, [r2, r3]
   1583a:	0019      	movs	r1, r3
   1583c:	4b81      	ldr	r3, [pc, #516]	; (15a44 <tc_init+0x38c>)
   1583e:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   15840:	687b      	ldr	r3, [r7, #4]
   15842:	78db      	ldrb	r3, [r3, #3]
   15844:	2b08      	cmp	r3, #8
   15846:	d11c      	bne.n	15882 <tc_init+0x1ca>
   15848:	2337      	movs	r3, #55	; 0x37
   1584a:	18fb      	adds	r3, r7, r3
   1584c:	781b      	ldrb	r3, [r3, #0]
   1584e:	3301      	adds	r3, #1
   15850:	2b02      	cmp	r3, #2
   15852:	dc16      	bgt.n	15882 <tc_init+0x1ca>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   15854:	2337      	movs	r3, #55	; 0x37
   15856:	18fb      	adds	r3, r7, r3
   15858:	781b      	ldrb	r3, [r3, #0]
   1585a:	3301      	adds	r3, #1
   1585c:	005a      	lsls	r2, r3, #1
   1585e:	231c      	movs	r3, #28
   15860:	18fb      	adds	r3, r7, r3
   15862:	0092      	lsls	r2, r2, #2
   15864:	58d3      	ldr	r3, [r2, r3]
   15866:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
   15868:	2337      	movs	r3, #55	; 0x37
   1586a:	18fb      	adds	r3, r7, r3
   1586c:	781b      	ldrb	r3, [r3, #0]
   1586e:	3301      	adds	r3, #1
   15870:	005b      	lsls	r3, r3, #1
   15872:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   15874:	231c      	movs	r3, #28
   15876:	18fb      	adds	r3, r7, r3
   15878:	0092      	lsls	r2, r2, #2
   1587a:	58d3      	ldr	r3, [r2, r3]
   1587c:	0019      	movs	r1, r3
   1587e:	4b71      	ldr	r3, [pc, #452]	; (15a44 <tc_init+0x38c>)
   15880:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   15882:	2314      	movs	r3, #20
   15884:	18fb      	adds	r3, r7, r3
   15886:	0018      	movs	r0, r3
   15888:	4b6f      	ldr	r3, [pc, #444]	; (15a48 <tc_init+0x390>)
   1588a:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
   1588c:	687b      	ldr	r3, [r7, #4]
   1588e:	781a      	ldrb	r2, [r3, #0]
   15890:	2314      	movs	r3, #20
   15892:	18fb      	adds	r3, r7, r3
   15894:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
   15896:	2337      	movs	r3, #55	; 0x37
   15898:	18fb      	adds	r3, r7, r3
   1589a:	781b      	ldrb	r3, [r3, #0]
   1589c:	2234      	movs	r2, #52	; 0x34
   1589e:	18ba      	adds	r2, r7, r2
   158a0:	5cd3      	ldrb	r3, [r2, r3]
   158a2:	2214      	movs	r2, #20
   158a4:	18ba      	adds	r2, r7, r2
   158a6:	0011      	movs	r1, r2
   158a8:	0018      	movs	r0, r3
   158aa:	4b68      	ldr	r3, [pc, #416]	; (15a4c <tc_init+0x394>)
   158ac:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
   158ae:	2337      	movs	r3, #55	; 0x37
   158b0:	18fb      	adds	r3, r7, r3
   158b2:	781b      	ldrb	r3, [r3, #0]
   158b4:	2234      	movs	r2, #52	; 0x34
   158b6:	18ba      	adds	r2, r7, r2
   158b8:	5cd3      	ldrb	r3, [r2, r3]
   158ba:	0018      	movs	r0, r3
   158bc:	4b64      	ldr	r3, [pc, #400]	; (15a50 <tc_init+0x398>)
   158be:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
   158c0:	687b      	ldr	r3, [r7, #4]
   158c2:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
   158c4:	687b      	ldr	r3, [r7, #4]
   158c6:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
   158c8:	4313      	orrs	r3, r2
   158ca:	b2db      	uxtb	r3, r3
   158cc:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
   158ce:	687b      	ldr	r3, [r7, #4]
   158d0:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
   158d2:	4313      	orrs	r3, r2
   158d4:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   158d6:	2339      	movs	r3, #57	; 0x39
   158d8:	18fb      	adds	r3, r7, r3
   158da:	2200      	movs	r2, #0
   158dc:	701a      	strb	r2, [r3, #0]
   158de:	e018      	b.n	15912 <tc_init+0x25a>
		if (config->enable_capture_on_channel[i] == true) {
   158e0:	2339      	movs	r3, #57	; 0x39
   158e2:	18fb      	adds	r3, r7, r3
   158e4:	781b      	ldrb	r3, [r3, #0]
   158e6:	687a      	ldr	r2, [r7, #4]
   158e8:	18d3      	adds	r3, r2, r3
   158ea:	7a5b      	ldrb	r3, [r3, #9]
   158ec:	2b00      	cmp	r3, #0
   158ee:	d009      	beq.n	15904 <tc_init+0x24c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   158f0:	2339      	movs	r3, #57	; 0x39
   158f2:	18fb      	adds	r3, r7, r3
   158f4:	781b      	ldrb	r3, [r3, #0]
   158f6:	2280      	movs	r2, #128	; 0x80
   158f8:	0252      	lsls	r2, r2, #9
   158fa:	409a      	lsls	r2, r3
   158fc:	0013      	movs	r3, r2
   158fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15900:	4313      	orrs	r3, r2
   15902:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   15904:	2339      	movs	r3, #57	; 0x39
   15906:	18fb      	adds	r3, r7, r3
   15908:	781a      	ldrb	r2, [r3, #0]
   1590a:	2339      	movs	r3, #57	; 0x39
   1590c:	18fb      	adds	r3, r7, r3
   1590e:	3201      	adds	r2, #1
   15910:	701a      	strb	r2, [r3, #0]
   15912:	2339      	movs	r3, #57	; 0x39
   15914:	18fb      	adds	r3, r7, r3
   15916:	781b      	ldrb	r3, [r3, #0]
   15918:	2b01      	cmp	r3, #1
   1591a:	d9e1      	bls.n	158e0 <tc_init+0x228>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   1591c:	2338      	movs	r3, #56	; 0x38
   1591e:	18fb      	adds	r3, r7, r3
   15920:	2200      	movs	r2, #0
   15922:	701a      	strb	r2, [r3, #0]
   15924:	e018      	b.n	15958 <tc_init+0x2a0>
		if (config->enable_capture_on_IO[i] == true) {
   15926:	2338      	movs	r3, #56	; 0x38
   15928:	18fb      	adds	r3, r7, r3
   1592a:	781b      	ldrb	r3, [r3, #0]
   1592c:	687a      	ldr	r2, [r7, #4]
   1592e:	18d3      	adds	r3, r2, r3
   15930:	7adb      	ldrb	r3, [r3, #11]
   15932:	2b00      	cmp	r3, #0
   15934:	d009      	beq.n	1594a <tc_init+0x292>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   15936:	2338      	movs	r3, #56	; 0x38
   15938:	18fb      	adds	r3, r7, r3
   1593a:	781b      	ldrb	r3, [r3, #0]
   1593c:	2280      	movs	r2, #128	; 0x80
   1593e:	0352      	lsls	r2, r2, #13
   15940:	409a      	lsls	r2, r3
   15942:	0013      	movs	r3, r2
   15944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15946:	4313      	orrs	r3, r2
   15948:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   1594a:	2338      	movs	r3, #56	; 0x38
   1594c:	18fb      	adds	r3, r7, r3
   1594e:	781a      	ldrb	r2, [r3, #0]
   15950:	2338      	movs	r3, #56	; 0x38
   15952:	18fb      	adds	r3, r7, r3
   15954:	3201      	adds	r2, #1
   15956:	701a      	strb	r2, [r3, #0]
   15958:	2338      	movs	r3, #56	; 0x38
   1595a:	18fb      	adds	r3, r7, r3
   1595c:	781b      	ldrb	r3, [r3, #0]
   1595e:	2b01      	cmp	r3, #1
   15960:	d9e1      	bls.n	15926 <tc_init+0x26e>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   15962:	687b      	ldr	r3, [r7, #4]
   15964:	785b      	ldrb	r3, [r3, #1]
   15966:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   15968:	687b      	ldr	r3, [r7, #4]
   1596a:	789b      	ldrb	r3, [r3, #2]
   1596c:	01db      	lsls	r3, r3, #7
   1596e:	4313      	orrs	r3, r2
   15970:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   15972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15974:	4313      	orrs	r3, r2
   15976:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   15978:	46c0      	nop			; (mov r8, r8)
   1597a:	68fb      	ldr	r3, [r7, #12]
   1597c:	0018      	movs	r0, r3
   1597e:	4b35      	ldr	r3, [pc, #212]	; (15a54 <tc_init+0x39c>)
   15980:	4798      	blx	r3
   15982:	1e03      	subs	r3, r0, #0
   15984:	d1f9      	bne.n	1597a <tc_init+0x2c2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
   15986:	68bb      	ldr	r3, [r7, #8]
   15988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1598a:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   1598c:	46c0      	nop			; (mov r8, r8)
   1598e:	68fb      	ldr	r3, [r7, #12]
   15990:	0018      	movs	r0, r3
   15992:	4b30      	ldr	r3, [pc, #192]	; (15a54 <tc_init+0x39c>)
   15994:	4798      	blx	r3
   15996:	1e03      	subs	r3, r0, #0
   15998:	d1f9      	bne.n	1598e <tc_init+0x2d6>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
   1599a:	687b      	ldr	r3, [r7, #4]
   1599c:	799a      	ldrb	r2, [r3, #6]
   1599e:	68bb      	ldr	r3, [r7, #8]
   159a0:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
   159a2:	687b      	ldr	r3, [r7, #4]
   159a4:	7b5b      	ldrb	r3, [r3, #13]
   159a6:	2b00      	cmp	r3, #0
   159a8:	d003      	beq.n	159b2 <tc_init+0x2fa>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
   159aa:	233b      	movs	r3, #59	; 0x3b
   159ac:	18fb      	adds	r3, r7, r3
   159ae:	2204      	movs	r2, #4
   159b0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
   159b2:	687b      	ldr	r3, [r7, #4]
   159b4:	7b9b      	ldrb	r3, [r3, #14]
   159b6:	2b00      	cmp	r3, #0
   159b8:	d007      	beq.n	159ca <tc_init+0x312>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
   159ba:	233b      	movs	r3, #59	; 0x3b
   159bc:	18fb      	adds	r3, r7, r3
   159be:	223b      	movs	r2, #59	; 0x3b
   159c0:	18ba      	adds	r2, r7, r2
   159c2:	7812      	ldrb	r2, [r2, #0]
   159c4:	2101      	movs	r1, #1
   159c6:	430a      	orrs	r2, r1
   159c8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
   159ca:	46c0      	nop			; (mov r8, r8)
   159cc:	68fb      	ldr	r3, [r7, #12]
   159ce:	0018      	movs	r0, r3
   159d0:	4b20      	ldr	r3, [pc, #128]	; (15a54 <tc_init+0x39c>)
   159d2:	4798      	blx	r3
   159d4:	1e03      	subs	r3, r0, #0
   159d6:	d1f9      	bne.n	159cc <tc_init+0x314>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
   159d8:	68bb      	ldr	r3, [r7, #8]
   159da:	22ff      	movs	r2, #255	; 0xff
   159dc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
   159de:	233b      	movs	r3, #59	; 0x3b
   159e0:	18fb      	adds	r3, r7, r3
   159e2:	781b      	ldrb	r3, [r3, #0]
   159e4:	2b00      	cmp	r3, #0
   159e6:	d00b      	beq.n	15a00 <tc_init+0x348>
		while (tc_is_syncing(module_inst)) {
   159e8:	46c0      	nop			; (mov r8, r8)
   159ea:	68fb      	ldr	r3, [r7, #12]
   159ec:	0018      	movs	r0, r3
   159ee:	4b19      	ldr	r3, [pc, #100]	; (15a54 <tc_init+0x39c>)
   159f0:	4798      	blx	r3
   159f2:	1e03      	subs	r3, r0, #0
   159f4:	d1f9      	bne.n	159ea <tc_init+0x332>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
   159f6:	68bb      	ldr	r3, [r7, #8]
   159f8:	223b      	movs	r2, #59	; 0x3b
   159fa:	18ba      	adds	r2, r7, r2
   159fc:	7812      	ldrb	r2, [r2, #0]
   159fe:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	7a1a      	ldrb	r2, [r3, #8]
   15a04:	68bb      	ldr	r3, [r7, #8]
   15a06:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   15a08:	46c0      	nop			; (mov r8, r8)
   15a0a:	68fb      	ldr	r3, [r7, #12]
   15a0c:	0018      	movs	r0, r3
   15a0e:	4b11      	ldr	r3, [pc, #68]	; (15a54 <tc_init+0x39c>)
   15a10:	4798      	blx	r3
   15a12:	1e03      	subs	r3, r0, #0
   15a14:	d1f9      	bne.n	15a0a <tc_init+0x352>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
   15a16:	68fb      	ldr	r3, [r7, #12]
   15a18:	791b      	ldrb	r3, [r3, #4]
   15a1a:	2b04      	cmp	r3, #4
   15a1c:	d01c      	beq.n	15a58 <tc_init+0x3a0>
   15a1e:	2b08      	cmp	r3, #8
   15a20:	d100      	bne.n	15a24 <tc_init+0x36c>
   15a22:	e06e      	b.n	15b02 <tc_init+0x44a>
   15a24:	2b00      	cmp	r3, #0
   15a26:	d049      	beq.n	15abc <tc_init+0x404>
   15a28:	e08e      	b.n	15b48 <tc_init+0x490>
   15a2a:	46c0      	nop			; (mov r8, r8)
   15a2c:	00015671 	.word	0x00015671
   15a30:	0001cd10 	.word	0x0001cd10
   15a34:	0001cd14 	.word	0x0001cd14
   15a38:	200015ec 	.word	0x200015ec
   15a3c:	000155a1 	.word	0x000155a1
   15a40:	00015391 	.word	0x00015391
   15a44:	00015525 	.word	0x00015525
   15a48:	0001550d 	.word	0x0001550d
   15a4c:	00015069 	.word	0x00015069
   15a50:	000150a9 	.word	0x000150a9
   15a54:	000155c9 	.word	0x000155c9
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
   15a58:	46c0      	nop			; (mov r8, r8)
   15a5a:	68fb      	ldr	r3, [r7, #12]
   15a5c:	0018      	movs	r0, r3
   15a5e:	4b3d      	ldr	r3, [pc, #244]	; (15b54 <tc_init+0x49c>)
   15a60:	4798      	blx	r3
   15a62:	1e03      	subs	r3, r0, #0
   15a64:	d1f9      	bne.n	15a5a <tc_init+0x3a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
   15a66:	687b      	ldr	r3, [r7, #4]
   15a68:	2228      	movs	r2, #40	; 0x28
   15a6a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
   15a6c:	68bb      	ldr	r3, [r7, #8]
   15a6e:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
   15a70:	46c0      	nop			; (mov r8, r8)
   15a72:	68fb      	ldr	r3, [r7, #12]
   15a74:	0018      	movs	r0, r3
   15a76:	4b37      	ldr	r3, [pc, #220]	; (15b54 <tc_init+0x49c>)
   15a78:	4798      	blx	r3
   15a7a:	1e03      	subs	r3, r0, #0
   15a7c:	d1f9      	bne.n	15a72 <tc_init+0x3ba>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
   15a7e:	687b      	ldr	r3, [r7, #4]
   15a80:	2229      	movs	r2, #41	; 0x29
   15a82:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
   15a84:	68bb      	ldr	r3, [r7, #8]
   15a86:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
   15a88:	46c0      	nop			; (mov r8, r8)
   15a8a:	68fb      	ldr	r3, [r7, #12]
   15a8c:	0018      	movs	r0, r3
   15a8e:	4b31      	ldr	r3, [pc, #196]	; (15b54 <tc_init+0x49c>)
   15a90:	4798      	blx	r3
   15a92:	1e03      	subs	r3, r0, #0
   15a94:	d1f9      	bne.n	15a8a <tc_init+0x3d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
   15a96:	687b      	ldr	r3, [r7, #4]
   15a98:	222a      	movs	r2, #42	; 0x2a
   15a9a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
   15a9c:	68bb      	ldr	r3, [r7, #8]
   15a9e:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   15aa0:	46c0      	nop			; (mov r8, r8)
   15aa2:	68fb      	ldr	r3, [r7, #12]
   15aa4:	0018      	movs	r0, r3
   15aa6:	4b2b      	ldr	r3, [pc, #172]	; (15b54 <tc_init+0x49c>)
   15aa8:	4798      	blx	r3
   15aaa:	1e03      	subs	r3, r0, #0
   15aac:	d1f9      	bne.n	15aa2 <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
   15aae:	687b      	ldr	r3, [r7, #4]
   15ab0:	222b      	movs	r2, #43	; 0x2b
   15ab2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
   15ab4:	68bb      	ldr	r3, [r7, #8]
   15ab6:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
   15ab8:	2300      	movs	r3, #0
   15aba:	e046      	b.n	15b4a <tc_init+0x492>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
   15abc:	46c0      	nop			; (mov r8, r8)
   15abe:	68fb      	ldr	r3, [r7, #12]
   15ac0:	0018      	movs	r0, r3
   15ac2:	4b24      	ldr	r3, [pc, #144]	; (15b54 <tc_init+0x49c>)
   15ac4:	4798      	blx	r3
   15ac6:	1e03      	subs	r3, r0, #0
   15ac8:	d1f9      	bne.n	15abe <tc_init+0x406>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
   15aca:	687b      	ldr	r3, [r7, #4]
   15acc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   15ace:	68bb      	ldr	r3, [r7, #8]
   15ad0:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
   15ad2:	46c0      	nop			; (mov r8, r8)
   15ad4:	68fb      	ldr	r3, [r7, #12]
   15ad6:	0018      	movs	r0, r3
   15ad8:	4b1e      	ldr	r3, [pc, #120]	; (15b54 <tc_init+0x49c>)
   15ada:	4798      	blx	r3
   15adc:	1e03      	subs	r3, r0, #0
   15ade:	d1f9      	bne.n	15ad4 <tc_init+0x41c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
   15ae0:	687b      	ldr	r3, [r7, #4]
   15ae2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
   15ae4:	68bb      	ldr	r3, [r7, #8]
   15ae6:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   15ae8:	46c0      	nop			; (mov r8, r8)
   15aea:	68fb      	ldr	r3, [r7, #12]
   15aec:	0018      	movs	r0, r3
   15aee:	4b19      	ldr	r3, [pc, #100]	; (15b54 <tc_init+0x49c>)
   15af0:	4798      	blx	r3
   15af2:	1e03      	subs	r3, r0, #0
   15af4:	d1f9      	bne.n	15aea <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
   15af6:	687b      	ldr	r3, [r7, #4]
   15af8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
   15afa:	68bb      	ldr	r3, [r7, #8]
   15afc:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
   15afe:	2300      	movs	r3, #0
   15b00:	e023      	b.n	15b4a <tc_init+0x492>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
   15b02:	46c0      	nop			; (mov r8, r8)
   15b04:	68fb      	ldr	r3, [r7, #12]
   15b06:	0018      	movs	r0, r3
   15b08:	4b12      	ldr	r3, [pc, #72]	; (15b54 <tc_init+0x49c>)
   15b0a:	4798      	blx	r3
   15b0c:	1e03      	subs	r3, r0, #0
   15b0e:	d1f9      	bne.n	15b04 <tc_init+0x44c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
   15b10:	687b      	ldr	r3, [r7, #4]
   15b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15b14:	68bb      	ldr	r3, [r7, #8]
   15b16:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
   15b18:	46c0      	nop			; (mov r8, r8)
   15b1a:	68fb      	ldr	r3, [r7, #12]
   15b1c:	0018      	movs	r0, r3
   15b1e:	4b0d      	ldr	r3, [pc, #52]	; (15b54 <tc_init+0x49c>)
   15b20:	4798      	blx	r3
   15b22:	1e03      	subs	r3, r0, #0
   15b24:	d1f9      	bne.n	15b1a <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
   15b26:	687b      	ldr	r3, [r7, #4]
   15b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
   15b2a:	68bb      	ldr	r3, [r7, #8]
   15b2c:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   15b2e:	46c0      	nop			; (mov r8, r8)
   15b30:	68fb      	ldr	r3, [r7, #12]
   15b32:	0018      	movs	r0, r3
   15b34:	4b07      	ldr	r3, [pc, #28]	; (15b54 <tc_init+0x49c>)
   15b36:	4798      	blx	r3
   15b38:	1e03      	subs	r3, r0, #0
   15b3a:	d1f9      	bne.n	15b30 <tc_init+0x478>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
   15b3c:	687b      	ldr	r3, [r7, #4]
   15b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
   15b40:	68bb      	ldr	r3, [r7, #8]
   15b42:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
   15b44:	2300      	movs	r3, #0
   15b46:	e000      	b.n	15b4a <tc_init+0x492>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
   15b48:	2317      	movs	r3, #23
}
   15b4a:	0018      	movs	r0, r3
   15b4c:	46bd      	mov	sp, r7
   15b4e:	b011      	add	sp, #68	; 0x44
   15b50:	bd90      	pop	{r4, r7, pc}
   15b52:	46c0      	nop			; (mov r8, r8)
   15b54:	000155c9 	.word	0x000155c9

00015b58 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
   15b58:	b580      	push	{r7, lr}
   15b5a:	b084      	sub	sp, #16
   15b5c:	af00      	add	r7, sp, #0
   15b5e:	6078      	str	r0, [r7, #4]
   15b60:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
   15b62:	687b      	ldr	r3, [r7, #4]
   15b64:	681b      	ldr	r3, [r3, #0]
   15b66:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   15b68:	46c0      	nop			; (mov r8, r8)
   15b6a:	687b      	ldr	r3, [r7, #4]
   15b6c:	0018      	movs	r0, r3
   15b6e:	4b11      	ldr	r3, [pc, #68]	; (15bb4 <tc_set_count_value+0x5c>)
   15b70:	4798      	blx	r3
   15b72:	1e03      	subs	r3, r0, #0
   15b74:	d1f9      	bne.n	15b6a <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
   15b76:	687b      	ldr	r3, [r7, #4]
   15b78:	791b      	ldrb	r3, [r3, #4]
   15b7a:	2b04      	cmp	r3, #4
   15b7c:	d004      	beq.n	15b88 <tc_set_count_value+0x30>
   15b7e:	2b08      	cmp	r3, #8
   15b80:	d00e      	beq.n	15ba0 <tc_set_count_value+0x48>
   15b82:	2b00      	cmp	r3, #0
   15b84:	d006      	beq.n	15b94 <tc_set_count_value+0x3c>
   15b86:	e010      	b.n	15baa <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
   15b88:	683b      	ldr	r3, [r7, #0]
   15b8a:	b2da      	uxtb	r2, r3
   15b8c:	68fb      	ldr	r3, [r7, #12]
   15b8e:	751a      	strb	r2, [r3, #20]
			return STATUS_OK;
   15b90:	2300      	movs	r3, #0
   15b92:	e00b      	b.n	15bac <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
   15b94:	683b      	ldr	r3, [r7, #0]
   15b96:	b29a      	uxth	r2, r3
   15b98:	68fb      	ldr	r3, [r7, #12]
   15b9a:	829a      	strh	r2, [r3, #20]
			return STATUS_OK;
   15b9c:	2300      	movs	r3, #0
   15b9e:	e005      	b.n	15bac <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
   15ba0:	68fb      	ldr	r3, [r7, #12]
   15ba2:	683a      	ldr	r2, [r7, #0]
   15ba4:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
   15ba6:	2300      	movs	r3, #0
   15ba8:	e000      	b.n	15bac <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
   15baa:	2317      	movs	r3, #23
	}
}
   15bac:	0018      	movs	r0, r3
   15bae:	46bd      	mov	sp, r7
   15bb0:	b004      	add	sp, #16
   15bb2:	bd80      	pop	{r7, pc}
   15bb4:	000155c9 	.word	0x000155c9

00015bb8 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
   15bb8:	b580      	push	{r7, lr}
   15bba:	b084      	sub	sp, #16
   15bbc:	af00      	add	r7, sp, #0
   15bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Read synchronization */
	tc_sync_read_count(module_inst);
   15bc0:	687b      	ldr	r3, [r7, #4]
   15bc2:	0018      	movs	r0, r3
   15bc4:	4b12      	ldr	r3, [pc, #72]	; (15c10 <tc_get_count_value+0x58>)
   15bc6:	4798      	blx	r3
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	681b      	ldr	r3, [r3, #0]
   15bcc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   15bce:	46c0      	nop			; (mov r8, r8)
   15bd0:	687b      	ldr	r3, [r7, #4]
   15bd2:	0018      	movs	r0, r3
   15bd4:	4b0f      	ldr	r3, [pc, #60]	; (15c14 <tc_get_count_value+0x5c>)
   15bd6:	4798      	blx	r3
   15bd8:	1e03      	subs	r3, r0, #0
   15bda:	d1f9      	bne.n	15bd0 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
   15bdc:	687b      	ldr	r3, [r7, #4]
   15bde:	791b      	ldrb	r3, [r3, #4]
   15be0:	2b04      	cmp	r3, #4
   15be2:	d004      	beq.n	15bee <tc_get_count_value+0x36>
   15be4:	2b08      	cmp	r3, #8
   15be6:	d00a      	beq.n	15bfe <tc_get_count_value+0x46>
   15be8:	2b00      	cmp	r3, #0
   15bea:	d004      	beq.n	15bf6 <tc_get_count_value+0x3e>
   15bec:	e00a      	b.n	15c04 <tc_get_count_value+0x4c>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
   15bee:	68fb      	ldr	r3, [r7, #12]
   15bf0:	7d1b      	ldrb	r3, [r3, #20]
   15bf2:	b2db      	uxtb	r3, r3
   15bf4:	e007      	b.n	15c06 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
   15bf6:	68fb      	ldr	r3, [r7, #12]
   15bf8:	8a9b      	ldrh	r3, [r3, #20]
   15bfa:	b29b      	uxth	r3, r3
   15bfc:	e003      	b.n	15c06 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
   15bfe:	68fb      	ldr	r3, [r7, #12]
   15c00:	695b      	ldr	r3, [r3, #20]
   15c02:	e000      	b.n	15c06 <tc_get_count_value+0x4e>
	}

	Assert(false);
	return 0;
   15c04:	2300      	movs	r3, #0
}
   15c06:	0018      	movs	r0, r3
   15c08:	46bd      	mov	sp, r7
   15c0a:	b004      	add	sp, #16
   15c0c:	bd80      	pop	{r7, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	0001562d 	.word	0x0001562d
   15c14:	000155c9 	.word	0x000155c9

00015c18 <tc_reset>:
 *                                     the function. Only use reset on master
 *                                     TC
 */
enum status_code tc_reset(
		const struct tc_module *const module_inst)
{
   15c18:	b580      	push	{r7, lr}
   15c1a:	b084      	sub	sp, #16
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	681b      	ldr	r3, [r3, #0]
   15c24:	60fb      	str	r3, [r7, #12]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
   15c26:	68fb      	ldr	r3, [r7, #12]
   15c28:	7adb      	ldrb	r3, [r3, #11]
   15c2a:	b2db      	uxtb	r3, r3
   15c2c:	001a      	movs	r2, r3
   15c2e:	2302      	movs	r3, #2
   15c30:	4013      	ands	r3, r2
   15c32:	d001      	beq.n	15c38 <tc_reset+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   15c34:	2315      	movs	r3, #21
   15c36:	e016      	b.n	15c66 <tc_reset+0x4e>
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
   15c38:	68fb      	ldr	r3, [r7, #12]
   15c3a:	681b      	ldr	r3, [r3, #0]
   15c3c:	2202      	movs	r2, #2
   15c3e:	4013      	ands	r3, r2
   15c40:	d00a      	beq.n	15c58 <tc_reset+0x40>
		tc_disable(module_inst);
   15c42:	687b      	ldr	r3, [r7, #4]
   15c44:	0018      	movs	r0, r3
   15c46:	4b0a      	ldr	r3, [pc, #40]	; (15c70 <tc_reset+0x58>)
   15c48:	4798      	blx	r3
		while (tc_is_syncing(module_inst)) {
   15c4a:	46c0      	nop			; (mov r8, r8)
   15c4c:	687b      	ldr	r3, [r7, #4]
   15c4e:	0018      	movs	r0, r3
   15c50:	4b08      	ldr	r3, [pc, #32]	; (15c74 <tc_reset+0x5c>)
   15c52:	4798      	blx	r3
   15c54:	1e03      	subs	r3, r0, #0
   15c56:	d1f9      	bne.n	15c4c <tc_reset+0x34>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
   15c58:	68fb      	ldr	r3, [r7, #12]
   15c5a:	681b      	ldr	r3, [r3, #0]
   15c5c:	2201      	movs	r2, #1
   15c5e:	431a      	orrs	r2, r3
   15c60:	68fb      	ldr	r3, [r7, #12]
   15c62:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   15c64:	2300      	movs	r3, #0
}
   15c66:	0018      	movs	r0, r3
   15c68:	46bd      	mov	sp, r7
   15c6a:	b004      	add	sp, #16
   15c6c:	bd80      	pop	{r7, pc}
   15c6e:	46c0      	nop			; (mov r8, r8)
   15c70:	000155e9 	.word	0x000155e9
   15c74:	000155c9 	.word	0x000155c9

00015c78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   15c78:	b580      	push	{r7, lr}
   15c7a:	b082      	sub	sp, #8
   15c7c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   15c7e:	4b19      	ldr	r3, [pc, #100]	; (15ce4 <Reset_Handler+0x6c>)
   15c80:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   15c82:	4b19      	ldr	r3, [pc, #100]	; (15ce8 <Reset_Handler+0x70>)
   15c84:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   15c86:	687a      	ldr	r2, [r7, #4]
   15c88:	683b      	ldr	r3, [r7, #0]
   15c8a:	429a      	cmp	r2, r3
   15c8c:	d00c      	beq.n	15ca8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   15c8e:	e007      	b.n	15ca0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   15c90:	683b      	ldr	r3, [r7, #0]
   15c92:	1d1a      	adds	r2, r3, #4
   15c94:	603a      	str	r2, [r7, #0]
   15c96:	687a      	ldr	r2, [r7, #4]
   15c98:	1d11      	adds	r1, r2, #4
   15c9a:	6079      	str	r1, [r7, #4]
   15c9c:	6812      	ldr	r2, [r2, #0]
   15c9e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   15ca0:	683a      	ldr	r2, [r7, #0]
   15ca2:	4b12      	ldr	r3, [pc, #72]	; (15cec <Reset_Handler+0x74>)
   15ca4:	429a      	cmp	r2, r3
   15ca6:	d3f3      	bcc.n	15c90 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   15ca8:	4b11      	ldr	r3, [pc, #68]	; (15cf0 <Reset_Handler+0x78>)
   15caa:	603b      	str	r3, [r7, #0]
   15cac:	e004      	b.n	15cb8 <Reset_Handler+0x40>
                *pDest++ = 0;
   15cae:	683b      	ldr	r3, [r7, #0]
   15cb0:	1d1a      	adds	r2, r3, #4
   15cb2:	603a      	str	r2, [r7, #0]
   15cb4:	2200      	movs	r2, #0
   15cb6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   15cb8:	683a      	ldr	r2, [r7, #0]
   15cba:	4b0e      	ldr	r3, [pc, #56]	; (15cf4 <Reset_Handler+0x7c>)
   15cbc:	429a      	cmp	r2, r3
   15cbe:	d3f6      	bcc.n	15cae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   15cc0:	4b0d      	ldr	r3, [pc, #52]	; (15cf8 <Reset_Handler+0x80>)
   15cc2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   15cc4:	4b0d      	ldr	r3, [pc, #52]	; (15cfc <Reset_Handler+0x84>)
   15cc6:	687a      	ldr	r2, [r7, #4]
   15cc8:	21ff      	movs	r1, #255	; 0xff
   15cca:	438a      	bics	r2, r1
   15ccc:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   15cce:	4a0c      	ldr	r2, [pc, #48]	; (15d00 <Reset_Handler+0x88>)
   15cd0:	6853      	ldr	r3, [r2, #4]
   15cd2:	2180      	movs	r1, #128	; 0x80
   15cd4:	430b      	orrs	r3, r1
   15cd6:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   15cd8:	4b0a      	ldr	r3, [pc, #40]	; (15d04 <Reset_Handler+0x8c>)
   15cda:	4798      	blx	r3

        /* Branch to main function */
        main();
   15cdc:	4b0a      	ldr	r3, [pc, #40]	; (15d08 <Reset_Handler+0x90>)
   15cde:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   15ce0:	e7fe      	b.n	15ce0 <Reset_Handler+0x68>
   15ce2:	46c0      	nop			; (mov r8, r8)
   15ce4:	0001d630 	.word	0x0001d630
   15ce8:	20000000 	.word	0x20000000
   15cec:	20000598 	.word	0x20000598
   15cf0:	20000598 	.word	0x20000598
   15cf4:	20001858 	.word	0x20001858
   15cf8:	00000000 	.word	0x00000000
   15cfc:	e000ed00 	.word	0xe000ed00
   15d00:	41004000 	.word	0x41004000
   15d04:	00019da5 	.word	0x00019da5
   15d08:	00016569 	.word	0x00016569

00015d0c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   15d0c:	b580      	push	{r7, lr}
   15d0e:	af00      	add	r7, sp, #0
        while (1) {
   15d10:	e7fe      	b.n	15d10 <Dummy_Handler+0x4>
	...

00015d14 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   15d14:	b580      	push	{r7, lr}
   15d16:	b086      	sub	sp, #24
   15d18:	af00      	add	r7, sp, #0
   15d1a:	60f8      	str	r0, [r7, #12]
   15d1c:	60b9      	str	r1, [r7, #8]
   15d1e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   15d20:	2300      	movs	r3, #0
   15d22:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   15d24:	68fb      	ldr	r3, [r7, #12]
   15d26:	2b00      	cmp	r3, #0
   15d28:	d012      	beq.n	15d50 <_read+0x3c>
		return -1;
   15d2a:	2301      	movs	r3, #1
   15d2c:	425b      	negs	r3, r3
   15d2e:	e013      	b.n	15d58 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   15d30:	4b0b      	ldr	r3, [pc, #44]	; (15d60 <_read+0x4c>)
   15d32:	681a      	ldr	r2, [r3, #0]
   15d34:	4b0b      	ldr	r3, [pc, #44]	; (15d64 <_read+0x50>)
   15d36:	681b      	ldr	r3, [r3, #0]
   15d38:	68b9      	ldr	r1, [r7, #8]
   15d3a:	0018      	movs	r0, r3
   15d3c:	4790      	blx	r2
		ptr++;
   15d3e:	68bb      	ldr	r3, [r7, #8]
   15d40:	3301      	adds	r3, #1
   15d42:	60bb      	str	r3, [r7, #8]
		nChars++;
   15d44:	697b      	ldr	r3, [r7, #20]
   15d46:	3301      	adds	r3, #1
   15d48:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   15d4a:	687b      	ldr	r3, [r7, #4]
   15d4c:	3b01      	subs	r3, #1
   15d4e:	607b      	str	r3, [r7, #4]
   15d50:	687b      	ldr	r3, [r7, #4]
   15d52:	2b00      	cmp	r3, #0
   15d54:	dcec      	bgt.n	15d30 <_read+0x1c>
	}
	return nChars;
   15d56:	697b      	ldr	r3, [r7, #20]
}
   15d58:	0018      	movs	r0, r3
   15d5a:	46bd      	mov	sp, r7
   15d5c:	b006      	add	sp, #24
   15d5e:	bd80      	pop	{r7, pc}
   15d60:	200015f8 	.word	0x200015f8
   15d64:	20001600 	.word	0x20001600

00015d68 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   15d68:	b580      	push	{r7, lr}
   15d6a:	b086      	sub	sp, #24
   15d6c:	af00      	add	r7, sp, #0
   15d6e:	60f8      	str	r0, [r7, #12]
   15d70:	60b9      	str	r1, [r7, #8]
   15d72:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   15d74:	2300      	movs	r3, #0
   15d76:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   15d78:	68fb      	ldr	r3, [r7, #12]
   15d7a:	2b01      	cmp	r3, #1
   15d7c:	d01d      	beq.n	15dba <_write+0x52>
   15d7e:	68fb      	ldr	r3, [r7, #12]
   15d80:	2b02      	cmp	r3, #2
   15d82:	d01a      	beq.n	15dba <_write+0x52>
   15d84:	68fb      	ldr	r3, [r7, #12]
   15d86:	2b03      	cmp	r3, #3
   15d88:	d017      	beq.n	15dba <_write+0x52>
		return -1;
   15d8a:	2301      	movs	r3, #1
   15d8c:	425b      	negs	r3, r3
   15d8e:	e018      	b.n	15dc2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   15d90:	4b0e      	ldr	r3, [pc, #56]	; (15dcc <_write+0x64>)
   15d92:	681a      	ldr	r2, [r3, #0]
   15d94:	4b0e      	ldr	r3, [pc, #56]	; (15dd0 <_write+0x68>)
   15d96:	6818      	ldr	r0, [r3, #0]
   15d98:	68bb      	ldr	r3, [r7, #8]
   15d9a:	1c59      	adds	r1, r3, #1
   15d9c:	60b9      	str	r1, [r7, #8]
   15d9e:	781b      	ldrb	r3, [r3, #0]
   15da0:	0019      	movs	r1, r3
   15da2:	4790      	blx	r2
   15da4:	1e03      	subs	r3, r0, #0
   15da6:	da02      	bge.n	15dae <_write+0x46>
			return -1;
   15da8:	2301      	movs	r3, #1
   15daa:	425b      	negs	r3, r3
   15dac:	e009      	b.n	15dc2 <_write+0x5a>
		}
		++nChars;
   15dae:	697b      	ldr	r3, [r7, #20]
   15db0:	3301      	adds	r3, #1
   15db2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	3b01      	subs	r3, #1
   15db8:	607b      	str	r3, [r7, #4]
   15dba:	687b      	ldr	r3, [r7, #4]
   15dbc:	2b00      	cmp	r3, #0
   15dbe:	d1e7      	bne.n	15d90 <_write+0x28>
	}
	return nChars;
   15dc0:	697b      	ldr	r3, [r7, #20]
}
   15dc2:	0018      	movs	r0, r3
   15dc4:	46bd      	mov	sp, r7
   15dc6:	b006      	add	sp, #24
   15dc8:	bd80      	pop	{r7, pc}
   15dca:	46c0      	nop			; (mov r8, r8)
   15dcc:	200015fc 	.word	0x200015fc
   15dd0:	20001600 	.word	0x20001600

00015dd4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   15dd4:	b580      	push	{r7, lr}
   15dd6:	b084      	sub	sp, #16
   15dd8:	af00      	add	r7, sp, #0
   15dda:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   15ddc:	4b0a      	ldr	r3, [pc, #40]	; (15e08 <_sbrk+0x34>)
   15dde:	681b      	ldr	r3, [r3, #0]
   15de0:	2b00      	cmp	r3, #0
   15de2:	d102      	bne.n	15dea <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   15de4:	4b08      	ldr	r3, [pc, #32]	; (15e08 <_sbrk+0x34>)
   15de6:	4a09      	ldr	r2, [pc, #36]	; (15e0c <_sbrk+0x38>)
   15de8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   15dea:	4b07      	ldr	r3, [pc, #28]	; (15e08 <_sbrk+0x34>)
   15dec:	681b      	ldr	r3, [r3, #0]
   15dee:	60fb      	str	r3, [r7, #12]

	heap += incr;
   15df0:	4b05      	ldr	r3, [pc, #20]	; (15e08 <_sbrk+0x34>)
   15df2:	681a      	ldr	r2, [r3, #0]
   15df4:	687b      	ldr	r3, [r7, #4]
   15df6:	18d2      	adds	r2, r2, r3
   15df8:	4b03      	ldr	r3, [pc, #12]	; (15e08 <_sbrk+0x34>)
   15dfa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   15dfc:	68fb      	ldr	r3, [r7, #12]
}
   15dfe:	0018      	movs	r0, r3
   15e00:	46bd      	mov	sp, r7
   15e02:	b004      	add	sp, #16
   15e04:	bd80      	pop	{r7, pc}
   15e06:	46c0      	nop			; (mov r8, r8)
   15e08:	20000800 	.word	0x20000800
   15e0c:	20003858 	.word	0x20003858

00015e10 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   15e10:	b580      	push	{r7, lr}
   15e12:	b082      	sub	sp, #8
   15e14:	af00      	add	r7, sp, #0
   15e16:	6078      	str	r0, [r7, #4]
	return -1;
   15e18:	2301      	movs	r3, #1
   15e1a:	425b      	negs	r3, r3
}
   15e1c:	0018      	movs	r0, r3
   15e1e:	46bd      	mov	sp, r7
   15e20:	b002      	add	sp, #8
   15e22:	bd80      	pop	{r7, pc}

00015e24 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   15e24:	b580      	push	{r7, lr}
   15e26:	b082      	sub	sp, #8
   15e28:	af00      	add	r7, sp, #0
   15e2a:	6078      	str	r0, [r7, #4]
   15e2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   15e2e:	683b      	ldr	r3, [r7, #0]
   15e30:	2280      	movs	r2, #128	; 0x80
   15e32:	0192      	lsls	r2, r2, #6
   15e34:	605a      	str	r2, [r3, #4]

	return 0;
   15e36:	2300      	movs	r3, #0
}
   15e38:	0018      	movs	r0, r3
   15e3a:	46bd      	mov	sp, r7
   15e3c:	b002      	add	sp, #8
   15e3e:	bd80      	pop	{r7, pc}

00015e40 <_isatty>:

extern int _isatty(int file)
{
   15e40:	b580      	push	{r7, lr}
   15e42:	b082      	sub	sp, #8
   15e44:	af00      	add	r7, sp, #0
   15e46:	6078      	str	r0, [r7, #4]
	return 1;
   15e48:	2301      	movs	r3, #1
}
   15e4a:	0018      	movs	r0, r3
   15e4c:	46bd      	mov	sp, r7
   15e4e:	b002      	add	sp, #8
   15e50:	bd80      	pop	{r7, pc}

00015e52 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   15e52:	b580      	push	{r7, lr}
   15e54:	b084      	sub	sp, #16
   15e56:	af00      	add	r7, sp, #0
   15e58:	60f8      	str	r0, [r7, #12]
   15e5a:	60b9      	str	r1, [r7, #8]
   15e5c:	607a      	str	r2, [r7, #4]
	return 0;
   15e5e:	2300      	movs	r3, #0
}
   15e60:	0018      	movs	r0, r3
   15e62:	46bd      	mov	sp, r7
   15e64:	b004      	add	sp, #16
   15e66:	bd80      	pop	{r7, pc}

00015e68 <system_interrupt_enable>:
{
   15e68:	b580      	push	{r7, lr}
   15e6a:	b082      	sub	sp, #8
   15e6c:	af00      	add	r7, sp, #0
   15e6e:	0002      	movs	r2, r0
   15e70:	1dfb      	adds	r3, r7, #7
   15e72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15e74:	4b06      	ldr	r3, [pc, #24]	; (15e90 <system_interrupt_enable+0x28>)
   15e76:	1dfa      	adds	r2, r7, #7
   15e78:	7812      	ldrb	r2, [r2, #0]
   15e7a:	0011      	movs	r1, r2
   15e7c:	221f      	movs	r2, #31
   15e7e:	400a      	ands	r2, r1
   15e80:	2101      	movs	r1, #1
   15e82:	4091      	lsls	r1, r2
   15e84:	000a      	movs	r2, r1
   15e86:	601a      	str	r2, [r3, #0]
}
   15e88:	46c0      	nop			; (mov r8, r8)
   15e8a:	46bd      	mov	sp, r7
   15e8c:	b002      	add	sp, #8
   15e8e:	bd80      	pop	{r7, pc}
   15e90:	e000e100 	.word	0xe000e100

00015e94 <usart_is_syncing>:
{
   15e94:	b580      	push	{r7, lr}
   15e96:	b084      	sub	sp, #16
   15e98:	af00      	add	r7, sp, #0
   15e9a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15e9c:	687b      	ldr	r3, [r7, #4]
   15e9e:	681b      	ldr	r3, [r3, #0]
   15ea0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   15ea2:	68fb      	ldr	r3, [r7, #12]
   15ea4:	69db      	ldr	r3, [r3, #28]
   15ea6:	1e5a      	subs	r2, r3, #1
   15ea8:	4193      	sbcs	r3, r2
   15eaa:	b2db      	uxtb	r3, r3
}
   15eac:	0018      	movs	r0, r3
   15eae:	46bd      	mov	sp, r7
   15eb0:	b004      	add	sp, #16
   15eb2:	bd80      	pop	{r7, pc}

00015eb4 <_usart_wait_for_sync>:
{
   15eb4:	b580      	push	{r7, lr}
   15eb6:	b082      	sub	sp, #8
   15eb8:	af00      	add	r7, sp, #0
   15eba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   15ebc:	46c0      	nop			; (mov r8, r8)
   15ebe:	687b      	ldr	r3, [r7, #4]
   15ec0:	0018      	movs	r0, r3
   15ec2:	4b04      	ldr	r3, [pc, #16]	; (15ed4 <_usart_wait_for_sync+0x20>)
   15ec4:	4798      	blx	r3
   15ec6:	1e03      	subs	r3, r0, #0
   15ec8:	d1f9      	bne.n	15ebe <_usart_wait_for_sync+0xa>
}
   15eca:	46c0      	nop			; (mov r8, r8)
   15ecc:	46bd      	mov	sp, r7
   15ece:	b002      	add	sp, #8
   15ed0:	bd80      	pop	{r7, pc}
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	00015e95 	.word	0x00015e95

00015ed8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   15ed8:	b580      	push	{r7, lr}
   15eda:	b082      	sub	sp, #8
   15edc:	af00      	add	r7, sp, #0
   15ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15ee0:	687b      	ldr	r3, [r7, #4]
   15ee2:	2280      	movs	r2, #128	; 0x80
   15ee4:	05d2      	lsls	r2, r2, #23
   15ee6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   15ee8:	687b      	ldr	r3, [r7, #4]
   15eea:	2200      	movs	r2, #0
   15eec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   15eee:	687b      	ldr	r3, [r7, #4]
   15ef0:	22ff      	movs	r2, #255	; 0xff
   15ef2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   15ef4:	687b      	ldr	r3, [r7, #4]
   15ef6:	2200      	movs	r2, #0
   15ef8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   15efa:	687b      	ldr	r3, [r7, #4]
   15efc:	2200      	movs	r2, #0
   15efe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   15f00:	687b      	ldr	r3, [r7, #4]
   15f02:	2296      	movs	r2, #150	; 0x96
   15f04:	0192      	lsls	r2, r2, #6
   15f06:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   15f08:	687b      	ldr	r3, [r7, #4]
   15f0a:	2224      	movs	r2, #36	; 0x24
   15f0c:	2101      	movs	r1, #1
   15f0e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   15f10:	687b      	ldr	r3, [r7, #4]
   15f12:	2225      	movs	r2, #37	; 0x25
   15f14:	2101      	movs	r1, #1
   15f16:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   15f18:	687b      	ldr	r3, [r7, #4]
   15f1a:	2226      	movs	r2, #38	; 0x26
   15f1c:	2100      	movs	r1, #0
   15f1e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	2227      	movs	r2, #39	; 0x27
   15f24:	2100      	movs	r1, #0
   15f26:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   15f28:	687b      	ldr	r3, [r7, #4]
   15f2a:	2200      	movs	r2, #0
   15f2c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   15f2e:	687b      	ldr	r3, [r7, #4]
   15f30:	2288      	movs	r2, #136	; 0x88
   15f32:	0352      	lsls	r2, r2, #13
   15f34:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   15f36:	687b      	ldr	r3, [r7, #4]
   15f38:	222c      	movs	r2, #44	; 0x2c
   15f3a:	2100      	movs	r1, #0
   15f3c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   15f3e:	687b      	ldr	r3, [r7, #4]
   15f40:	222d      	movs	r2, #45	; 0x2d
   15f42:	2100      	movs	r1, #0
   15f44:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15f46:	687b      	ldr	r3, [r7, #4]
   15f48:	2200      	movs	r2, #0
   15f4a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15f4c:	687b      	ldr	r3, [r7, #4]
   15f4e:	2200      	movs	r2, #0
   15f50:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   15f52:	687b      	ldr	r3, [r7, #4]
   15f54:	2200      	movs	r2, #0
   15f56:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   15f58:	687b      	ldr	r3, [r7, #4]
   15f5a:	2200      	movs	r2, #0
   15f5c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	2200      	movs	r2, #0
   15f62:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	2200      	movs	r2, #0
   15f68:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   15f6a:	687b      	ldr	r3, [r7, #4]
   15f6c:	2200      	movs	r2, #0
   15f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   15f70:	687b      	ldr	r3, [r7, #4]
   15f72:	2200      	movs	r2, #0
   15f74:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   15f76:	687b      	ldr	r3, [r7, #4]
   15f78:	2200      	movs	r2, #0
   15f7a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   15f7c:	687b      	ldr	r3, [r7, #4]
   15f7e:	2200      	movs	r2, #0
   15f80:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   15f82:	687b      	ldr	r3, [r7, #4]
   15f84:	2213      	movs	r2, #19
   15f86:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   15f88:	687b      	ldr	r3, [r7, #4]
   15f8a:	2200      	movs	r2, #0
   15f8c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   15f8e:	46c0      	nop			; (mov r8, r8)
   15f90:	46bd      	mov	sp, r7
   15f92:	b002      	add	sp, #8
   15f94:	bd80      	pop	{r7, pc}
	...

00015f98 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   15f98:	b580      	push	{r7, lr}
   15f9a:	b084      	sub	sp, #16
   15f9c:	af00      	add	r7, sp, #0
   15f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15fa6:	687b      	ldr	r3, [r7, #4]
   15fa8:	681b      	ldr	r3, [r3, #0]
   15faa:	0018      	movs	r0, r3
   15fac:	4b09      	ldr	r3, [pc, #36]	; (15fd4 <usart_enable+0x3c>)
   15fae:	4798      	blx	r3
   15fb0:	0003      	movs	r3, r0
   15fb2:	0018      	movs	r0, r3
   15fb4:	4b08      	ldr	r3, [pc, #32]	; (15fd8 <usart_enable+0x40>)
   15fb6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	0018      	movs	r0, r3
   15fbc:	4b07      	ldr	r3, [pc, #28]	; (15fdc <usart_enable+0x44>)
   15fbe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   15fc0:	68fb      	ldr	r3, [r7, #12]
   15fc2:	681b      	ldr	r3, [r3, #0]
   15fc4:	2202      	movs	r2, #2
   15fc6:	431a      	orrs	r2, r3
   15fc8:	68fb      	ldr	r3, [r7, #12]
   15fca:	601a      	str	r2, [r3, #0]
}
   15fcc:	46c0      	nop			; (mov r8, r8)
   15fce:	46bd      	mov	sp, r7
   15fd0:	b004      	add	sp, #16
   15fd2:	bd80      	pop	{r7, pc}
   15fd4:	00012b5d 	.word	0x00012b5d
   15fd8:	00015e69 	.word	0x00015e69
   15fdc:	00015eb5 	.word	0x00015eb5

00015fe0 <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   15fe0:	b580      	push	{r7, lr}
   15fe2:	b084      	sub	sp, #16
   15fe4:	af00      	add	r7, sp, #0
   15fe6:	6078      	str	r0, [r7, #4]
   15fe8:	000a      	movs	r2, r1
   15fea:	1cfb      	adds	r3, r7, #3
   15fec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15fee:	687b      	ldr	r3, [r7, #4]
   15ff0:	681b      	ldr	r3, [r3, #0]
   15ff2:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	0018      	movs	r0, r3
   15ff8:	4b13      	ldr	r3, [pc, #76]	; (16048 <usart_enable_transceiver+0x68>)
   15ffa:	4798      	blx	r3

	switch (transceiver_type) {
   15ffc:	1cfb      	adds	r3, r7, #3
   15ffe:	781b      	ldrb	r3, [r3, #0]
   16000:	2b00      	cmp	r3, #0
   16002:	d002      	beq.n	1600a <usart_enable_transceiver+0x2a>
   16004:	2b01      	cmp	r3, #1
   16006:	d00b      	beq.n	16020 <usart_enable_transceiver+0x40>
   16008:	e015      	b.n	16036 <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
   1600a:	68fb      	ldr	r3, [r7, #12]
   1600c:	685b      	ldr	r3, [r3, #4]
   1600e:	2280      	movs	r2, #128	; 0x80
   16010:	0292      	lsls	r2, r2, #10
   16012:	431a      	orrs	r2, r3
   16014:	68fb      	ldr	r3, [r7, #12]
   16016:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
   16018:	687b      	ldr	r3, [r7, #4]
   1601a:	2201      	movs	r2, #1
   1601c:	719a      	strb	r2, [r3, #6]
			break;
   1601e:	e00a      	b.n	16036 <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
   16020:	68fb      	ldr	r3, [r7, #12]
   16022:	685b      	ldr	r3, [r3, #4]
   16024:	2280      	movs	r2, #128	; 0x80
   16026:	0252      	lsls	r2, r2, #9
   16028:	431a      	orrs	r2, r3
   1602a:	68fb      	ldr	r3, [r7, #12]
   1602c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
   1602e:	687b      	ldr	r3, [r7, #4]
   16030:	2201      	movs	r2, #1
   16032:	71da      	strb	r2, [r3, #7]
			break;
   16034:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
   16036:	687b      	ldr	r3, [r7, #4]
   16038:	0018      	movs	r0, r3
   1603a:	4b03      	ldr	r3, [pc, #12]	; (16048 <usart_enable_transceiver+0x68>)
   1603c:	4798      	blx	r3
}
   1603e:	46c0      	nop			; (mov r8, r8)
   16040:	46bd      	mov	sp, r7
   16042:	b004      	add	sp, #16
   16044:	bd80      	pop	{r7, pc}
   16046:	46c0      	nop			; (mov r8, r8)
   16048:	00015eb5 	.word	0x00015eb5

0001604c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   1604c:	b580      	push	{r7, lr}
   1604e:	b084      	sub	sp, #16
   16050:	af00      	add	r7, sp, #0
   16052:	60f8      	str	r0, [r7, #12]
   16054:	60b9      	str	r1, [r7, #8]
   16056:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   16058:	687a      	ldr	r2, [r7, #4]
   1605a:	68b9      	ldr	r1, [r7, #8]
   1605c:	68fb      	ldr	r3, [r7, #12]
   1605e:	0018      	movs	r0, r3
   16060:	4b05      	ldr	r3, [pc, #20]	; (16078 <usart_serial_init+0x2c>)
   16062:	4798      	blx	r3
   16064:	1e03      	subs	r3, r0, #0
   16066:	d101      	bne.n	1606c <usart_serial_init+0x20>
		return true;
   16068:	2301      	movs	r3, #1
   1606a:	e000      	b.n	1606e <usart_serial_init+0x22>
	}
	else {
		return false;
   1606c:	2300      	movs	r3, #0
	}
}
   1606e:	0018      	movs	r0, r3
   16070:	46bd      	mov	sp, r7
   16072:	b004      	add	sp, #16
   16074:	bd80      	pop	{r7, pc}
   16076:	46c0      	nop			; (mov r8, r8)
   16078:	00013969 	.word	0x00013969

0001607c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   1607c:	b580      	push	{r7, lr}
   1607e:	b082      	sub	sp, #8
   16080:	af00      	add	r7, sp, #0
   16082:	6078      	str	r0, [r7, #4]
   16084:	000a      	movs	r2, r1
   16086:	1cfb      	adds	r3, r7, #3
   16088:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   1608a:	46c0      	nop			; (mov r8, r8)
   1608c:	1cfb      	adds	r3, r7, #3
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	b29a      	uxth	r2, r3
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	0011      	movs	r1, r2
   16096:	0018      	movs	r0, r3
   16098:	4b04      	ldr	r3, [pc, #16]	; (160ac <usart_serial_putchar+0x30>)
   1609a:	4798      	blx	r3
   1609c:	1e03      	subs	r3, r0, #0
   1609e:	d1f5      	bne.n	1608c <usart_serial_putchar+0x10>

	return STATUS_OK;
   160a0:	2300      	movs	r3, #0
}
   160a2:	0018      	movs	r0, r3
   160a4:	46bd      	mov	sp, r7
   160a6:	b002      	add	sp, #8
   160a8:	bd80      	pop	{r7, pc}
   160aa:	46c0      	nop			; (mov r8, r8)
   160ac:	00013c01 	.word	0x00013c01

000160b0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   160b0:	b580      	push	{r7, lr}
   160b2:	b084      	sub	sp, #16
   160b4:	af00      	add	r7, sp, #0
   160b6:	6078      	str	r0, [r7, #4]
   160b8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   160ba:	230e      	movs	r3, #14
   160bc:	18fb      	adds	r3, r7, r3
   160be:	2200      	movs	r2, #0
   160c0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   160c2:	46c0      	nop			; (mov r8, r8)
   160c4:	230e      	movs	r3, #14
   160c6:	18fa      	adds	r2, r7, r3
   160c8:	687b      	ldr	r3, [r7, #4]
   160ca:	0011      	movs	r1, r2
   160cc:	0018      	movs	r0, r3
   160ce:	4b07      	ldr	r3, [pc, #28]	; (160ec <usart_serial_getchar+0x3c>)
   160d0:	4798      	blx	r3
   160d2:	1e03      	subs	r3, r0, #0
   160d4:	d1f6      	bne.n	160c4 <usart_serial_getchar+0x14>

	*c = temp;
   160d6:	230e      	movs	r3, #14
   160d8:	18fb      	adds	r3, r7, r3
   160da:	881b      	ldrh	r3, [r3, #0]
   160dc:	b2da      	uxtb	r2, r3
   160de:	683b      	ldr	r3, [r7, #0]
   160e0:	701a      	strb	r2, [r3, #0]
}
   160e2:	46c0      	nop			; (mov r8, r8)
   160e4:	46bd      	mov	sp, r7
   160e6:	b004      	add	sp, #16
   160e8:	bd80      	pop	{r7, pc}
   160ea:	46c0      	nop			; (mov r8, r8)
   160ec:	00013c65 	.word	0x00013c65

000160f0 <usart_serial_read_packet>:
 */
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   160f0:	b580      	push	{r7, lr}
   160f2:	b084      	sub	sp, #16
   160f4:	af00      	add	r7, sp, #0
   160f6:	60f8      	str	r0, [r7, #12]
   160f8:	60b9      	str	r1, [r7, #8]
   160fa:	1dbb      	adds	r3, r7, #6
   160fc:	801a      	strh	r2, [r3, #0]
	return usart_read_buffer_wait(module, rx_data, length);
   160fe:	1dbb      	adds	r3, r7, #6
   16100:	881a      	ldrh	r2, [r3, #0]
   16102:	68b9      	ldr	r1, [r7, #8]
   16104:	68fb      	ldr	r3, [r7, #12]
   16106:	0018      	movs	r0, r3
   16108:	4b03      	ldr	r3, [pc, #12]	; (16118 <usart_serial_read_packet+0x28>)
   1610a:	4798      	blx	r3
   1610c:	0003      	movs	r3, r0
}
   1610e:	0018      	movs	r0, r3
   16110:	46bd      	mov	sp, r7
   16112:	b004      	add	sp, #16
   16114:	bd80      	pop	{r7, pc}
   16116:	46c0      	nop			; (mov r8, r8)
   16118:	00013d51 	.word	0x00013d51

0001611c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   1611c:	b580      	push	{r7, lr}
   1611e:	b084      	sub	sp, #16
   16120:	af00      	add	r7, sp, #0
   16122:	60f8      	str	r0, [r7, #12]
   16124:	60b9      	str	r1, [r7, #8]
   16126:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   16128:	4b10      	ldr	r3, [pc, #64]	; (1616c <stdio_serial_init+0x50>)
   1612a:	68fa      	ldr	r2, [r7, #12]
   1612c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   1612e:	4b10      	ldr	r3, [pc, #64]	; (16170 <stdio_serial_init+0x54>)
   16130:	4a10      	ldr	r2, [pc, #64]	; (16174 <stdio_serial_init+0x58>)
   16132:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16134:	4b10      	ldr	r3, [pc, #64]	; (16178 <stdio_serial_init+0x5c>)
   16136:	4a11      	ldr	r2, [pc, #68]	; (1617c <stdio_serial_init+0x60>)
   16138:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   1613a:	687a      	ldr	r2, [r7, #4]
   1613c:	68b9      	ldr	r1, [r7, #8]
   1613e:	68fb      	ldr	r3, [r7, #12]
   16140:	0018      	movs	r0, r3
   16142:	4b0f      	ldr	r3, [pc, #60]	; (16180 <stdio_serial_init+0x64>)
   16144:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   16146:	4b0f      	ldr	r3, [pc, #60]	; (16184 <stdio_serial_init+0x68>)
   16148:	681b      	ldr	r3, [r3, #0]
   1614a:	689b      	ldr	r3, [r3, #8]
   1614c:	2100      	movs	r1, #0
   1614e:	0018      	movs	r0, r3
   16150:	4b0d      	ldr	r3, [pc, #52]	; (16188 <stdio_serial_init+0x6c>)
   16152:	4798      	blx	r3
	setbuf(stdin, NULL);
   16154:	4b0b      	ldr	r3, [pc, #44]	; (16184 <stdio_serial_init+0x68>)
   16156:	681b      	ldr	r3, [r3, #0]
   16158:	685b      	ldr	r3, [r3, #4]
   1615a:	2100      	movs	r1, #0
   1615c:	0018      	movs	r0, r3
   1615e:	4b0a      	ldr	r3, [pc, #40]	; (16188 <stdio_serial_init+0x6c>)
   16160:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   16162:	46c0      	nop			; (mov r8, r8)
   16164:	46bd      	mov	sp, r7
   16166:	b004      	add	sp, #16
   16168:	bd80      	pop	{r7, pc}
   1616a:	46c0      	nop			; (mov r8, r8)
   1616c:	20001600 	.word	0x20001600
   16170:	200015fc 	.word	0x200015fc
   16174:	0001607d 	.word	0x0001607d
   16178:	200015f8 	.word	0x200015f8
   1617c:	000160b1 	.word	0x000160b1
   16180:	0001604d 	.word	0x0001604d
   16184:	20000534 	.word	0x20000534
   16188:	0001a155 	.word	0x0001a155

0001618c <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
   1618c:	b580      	push	{r7, lr}
   1618e:	b090      	sub	sp, #64	; 0x40
   16190:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
   16192:	003b      	movs	r3, r7
   16194:	0018      	movs	r0, r3
   16196:	4b1e      	ldr	r3, [pc, #120]	; (16210 <sio2host_init+0x84>)
   16198:	4798      	blx	r3
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
   1619a:	003b      	movs	r3, r7
   1619c:	2280      	movs	r2, #128	; 0x80
   1619e:	0352      	lsls	r2, r2, #13
   161a0:	60da      	str	r2, [r3, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
   161a2:	003b      	movs	r3, r7
   161a4:	4a1b      	ldr	r2, [pc, #108]	; (16214 <sio2host_init+0x88>)
   161a6:	631a      	str	r2, [r3, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
   161a8:	003b      	movs	r3, r7
   161aa:	4a1b      	ldr	r2, [pc, #108]	; (16218 <sio2host_init+0x8c>)
   161ac:	635a      	str	r2, [r3, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
   161ae:	003b      	movs	r3, r7
   161b0:	2201      	movs	r2, #1
   161b2:	4252      	negs	r2, r2
   161b4:	639a      	str	r2, [r3, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
   161b6:	003b      	movs	r3, r7
   161b8:	2201      	movs	r2, #1
   161ba:	4252      	negs	r2, r2
   161bc:	63da      	str	r2, [r3, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
   161be:	003b      	movs	r3, r7
   161c0:	22e1      	movs	r2, #225	; 0xe1
   161c2:	0252      	lsls	r2, r2, #9
   161c4:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&host_uart_module, USART_HOST, &host_uart_config);
   161c6:	003a      	movs	r2, r7
   161c8:	2384      	movs	r3, #132	; 0x84
   161ca:	05d9      	lsls	r1, r3, #23
   161cc:	4b13      	ldr	r3, [pc, #76]	; (1621c <sio2host_init+0x90>)
   161ce:	0018      	movs	r0, r3
   161d0:	4b13      	ldr	r3, [pc, #76]	; (16220 <sio2host_init+0x94>)
   161d2:	4798      	blx	r3
	usart_enable(&host_uart_module);
   161d4:	4b11      	ldr	r3, [pc, #68]	; (1621c <sio2host_init+0x90>)
   161d6:	0018      	movs	r0, r3
   161d8:	4b12      	ldr	r3, [pc, #72]	; (16224 <sio2host_init+0x98>)
   161da:	4798      	blx	r3
	/* Enable transceivers */
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
   161dc:	4b0f      	ldr	r3, [pc, #60]	; (1621c <sio2host_init+0x90>)
   161de:	2101      	movs	r1, #1
   161e0:	0018      	movs	r0, r3
   161e2:	4b11      	ldr	r3, [pc, #68]	; (16228 <sio2host_init+0x9c>)
   161e4:	4798      	blx	r3
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
   161e6:	4b0d      	ldr	r3, [pc, #52]	; (1621c <sio2host_init+0x90>)
   161e8:	2100      	movs	r1, #0
   161ea:	0018      	movs	r0, r3
   161ec:	4b0e      	ldr	r3, [pc, #56]	; (16228 <sio2host_init+0x9c>)
   161ee:	4798      	blx	r3
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
   161f0:	4b0e      	ldr	r3, [pc, #56]	; (1622c <sio2host_init+0xa0>)
   161f2:	0019      	movs	r1, r3
   161f4:	2000      	movs	r0, #0
   161f6:	4b0e      	ldr	r3, [pc, #56]	; (16230 <sio2host_init+0xa4>)
   161f8:	4798      	blx	r3
   161fa:	2384      	movs	r3, #132	; 0x84
   161fc:	05db      	lsls	r3, r3, #23
   161fe:	2204      	movs	r2, #4
   16200:	759a      	strb	r2, [r3, #22]
   16202:	2008      	movs	r0, #8
   16204:	4b0b      	ldr	r3, [pc, #44]	; (16234 <sio2host_init+0xa8>)
   16206:	4798      	blx	r3
}
   16208:	46c0      	nop			; (mov r8, r8)
   1620a:	46bd      	mov	sp, r7
   1620c:	b010      	add	sp, #64	; 0x40
   1620e:	bd80      	pop	{r7, pc}
   16210:	00015ed9 	.word	0x00015ed9
   16214:	00040003 	.word	0x00040003
   16218:	00050003 	.word	0x00050003
   1621c:	20000804 	.word	0x20000804
   16220:	0001611d 	.word	0x0001611d
   16224:	00015f99 	.word	0x00015f99
   16228:	00015fe1 	.word	0x00015fe1
   1622c:	00016239 	.word	0x00016239
   16230:	00012af1 	.word	0x00012af1
   16234:	00015e69 	.word	0x00015e69

00016238 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   16238:	b580      	push	{r7, lr}
   1623a:	b084      	sub	sp, #16
   1623c:	af00      	add	r7, sp, #0
   1623e:	0002      	movs	r2, r0
   16240:	1dfb      	adds	r3, r7, #7
   16242:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
   16244:	230f      	movs	r3, #15
   16246:	18f9      	adds	r1, r7, r3
   16248:	4b15      	ldr	r3, [pc, #84]	; (162a0 <USART_HOST_ISR_VECT+0x68>)
   1624a:	2201      	movs	r2, #1
   1624c:	0018      	movs	r0, r3
   1624e:	4b15      	ldr	r3, [pc, #84]	; (162a4 <USART_HOST_ISR_VECT+0x6c>)
   16250:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   16252:	b672      	cpsid	i
   16254:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   16258:	4b13      	ldr	r3, [pc, #76]	; (162a8 <USART_HOST_ISR_VECT+0x70>)
   1625a:	2200      	movs	r2, #0
   1625c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   1625e:	4b13      	ldr	r3, [pc, #76]	; (162ac <USART_HOST_ISR_VECT+0x74>)
   16260:	781b      	ldrb	r3, [r3, #0]
   16262:	001a      	movs	r2, r3
   16264:	230f      	movs	r3, #15
   16266:	18fb      	adds	r3, r7, r3
   16268:	7819      	ldrb	r1, [r3, #0]
   1626a:	4b11      	ldr	r3, [pc, #68]	; (162b0 <USART_HOST_ISR_VECT+0x78>)
   1626c:	5499      	strb	r1, [r3, r2]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   1626e:	4b0f      	ldr	r3, [pc, #60]	; (162ac <USART_HOST_ISR_VECT+0x74>)
   16270:	781b      	ldrb	r3, [r3, #0]
   16272:	2b9b      	cmp	r3, #155	; 0x9b
   16274:	d103      	bne.n	1627e <USART_HOST_ISR_VECT+0x46>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   16276:	4b0d      	ldr	r3, [pc, #52]	; (162ac <USART_HOST_ISR_VECT+0x74>)
   16278:	2200      	movs	r2, #0
   1627a:	701a      	strb	r2, [r3, #0]
   1627c:	e005      	b.n	1628a <USART_HOST_ISR_VECT+0x52>
	} else {
		serial_rx_buf_tail++;
   1627e:	4b0b      	ldr	r3, [pc, #44]	; (162ac <USART_HOST_ISR_VECT+0x74>)
   16280:	781b      	ldrb	r3, [r3, #0]
   16282:	3301      	adds	r3, #1
   16284:	b2da      	uxtb	r2, r3
   16286:	4b09      	ldr	r3, [pc, #36]	; (162ac <USART_HOST_ISR_VECT+0x74>)
   16288:	701a      	strb	r2, [r3, #0]
	}

	cpu_irq_enable();
   1628a:	4b07      	ldr	r3, [pc, #28]	; (162a8 <USART_HOST_ISR_VECT+0x70>)
   1628c:	2201      	movs	r2, #1
   1628e:	701a      	strb	r2, [r3, #0]
   16290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   16294:	b662      	cpsie	i
}
   16296:	46c0      	nop			; (mov r8, r8)
   16298:	46bd      	mov	sp, r7
   1629a:	b004      	add	sp, #16
   1629c:	bd80      	pop	{r7, pc}
   1629e:	46c0      	nop			; (mov r8, r8)
   162a0:	20000804 	.word	0x20000804
   162a4:	000160f1 	.word	0x000160f1
   162a8:	200004b0 	.word	0x200004b0
   162ac:	200008d4 	.word	0x200008d4
   162b0:	20000838 	.word	0x20000838

000162b4 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   162b4:	b580      	push	{r7, lr}
   162b6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   162b8:	2000      	movs	r0, #0
   162ba:	4b07      	ldr	r3, [pc, #28]	; (162d8 <system_cpu_clock_get_hz+0x24>)
   162bc:	4798      	blx	r3
   162be:	0002      	movs	r2, r0
   162c0:	4b06      	ldr	r3, [pc, #24]	; (162dc <system_cpu_clock_get_hz+0x28>)
   162c2:	791b      	ldrb	r3, [r3, #4]
   162c4:	b2db      	uxtb	r3, r3
   162c6:	0019      	movs	r1, r3
   162c8:	4b05      	ldr	r3, [pc, #20]	; (162e0 <system_cpu_clock_get_hz+0x2c>)
   162ca:	0010      	movs	r0, r2
   162cc:	4798      	blx	r3
   162ce:	0003      	movs	r3, r0

}
   162d0:	0018      	movs	r0, r3
   162d2:	46bd      	mov	sp, r7
   162d4:	bd80      	pop	{r7, pc}
   162d6:	46c0      	nop			; (mov r8, r8)
   162d8:	00014fa9 	.word	0x00014fa9
   162dc:	40000400 	.word	0x40000400
   162e0:	00017e9d 	.word	0x00017e9d

000162e4 <system_pinmux_get_group_from_gpio_pin>:
{
   162e4:	b580      	push	{r7, lr}
   162e6:	b084      	sub	sp, #16
   162e8:	af00      	add	r7, sp, #0
   162ea:	0002      	movs	r2, r0
   162ec:	1dfb      	adds	r3, r7, #7
   162ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   162f0:	230f      	movs	r3, #15
   162f2:	18fb      	adds	r3, r7, r3
   162f4:	1dfa      	adds	r2, r7, #7
   162f6:	7812      	ldrb	r2, [r2, #0]
   162f8:	09d2      	lsrs	r2, r2, #7
   162fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   162fc:	230e      	movs	r3, #14
   162fe:	18fb      	adds	r3, r7, r3
   16300:	1dfa      	adds	r2, r7, #7
   16302:	7812      	ldrb	r2, [r2, #0]
   16304:	0952      	lsrs	r2, r2, #5
   16306:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16308:	4b0d      	ldr	r3, [pc, #52]	; (16340 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1630a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1630c:	230f      	movs	r3, #15
   1630e:	18fb      	adds	r3, r7, r3
   16310:	781b      	ldrb	r3, [r3, #0]
   16312:	2b00      	cmp	r3, #0
   16314:	d10f      	bne.n	16336 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16316:	230f      	movs	r3, #15
   16318:	18fb      	adds	r3, r7, r3
   1631a:	781b      	ldrb	r3, [r3, #0]
   1631c:	009b      	lsls	r3, r3, #2
   1631e:	2210      	movs	r2, #16
   16320:	4694      	mov	ip, r2
   16322:	44bc      	add	ip, r7
   16324:	4463      	add	r3, ip
   16326:	3b08      	subs	r3, #8
   16328:	681a      	ldr	r2, [r3, #0]
   1632a:	230e      	movs	r3, #14
   1632c:	18fb      	adds	r3, r7, r3
   1632e:	781b      	ldrb	r3, [r3, #0]
   16330:	01db      	lsls	r3, r3, #7
   16332:	18d3      	adds	r3, r2, r3
   16334:	e000      	b.n	16338 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16336:	2300      	movs	r3, #0
}
   16338:	0018      	movs	r0, r3
   1633a:	46bd      	mov	sp, r7
   1633c:	b004      	add	sp, #16
   1633e:	bd80      	pop	{r7, pc}
   16340:	40002800 	.word	0x40002800

00016344 <port_get_group_from_gpio_pin>:
{
   16344:	b580      	push	{r7, lr}
   16346:	b082      	sub	sp, #8
   16348:	af00      	add	r7, sp, #0
   1634a:	0002      	movs	r2, r0
   1634c:	1dfb      	adds	r3, r7, #7
   1634e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16350:	1dfb      	adds	r3, r7, #7
   16352:	781b      	ldrb	r3, [r3, #0]
   16354:	0018      	movs	r0, r3
   16356:	4b03      	ldr	r3, [pc, #12]	; (16364 <port_get_group_from_gpio_pin+0x20>)
   16358:	4798      	blx	r3
   1635a:	0003      	movs	r3, r0
}
   1635c:	0018      	movs	r0, r3
   1635e:	46bd      	mov	sp, r7
   16360:	b002      	add	sp, #8
   16362:	bd80      	pop	{r7, pc}
   16364:	000162e5 	.word	0x000162e5

00016368 <port_pin_set_output_level>:
{
   16368:	b580      	push	{r7, lr}
   1636a:	b084      	sub	sp, #16
   1636c:	af00      	add	r7, sp, #0
   1636e:	0002      	movs	r2, r0
   16370:	1dfb      	adds	r3, r7, #7
   16372:	701a      	strb	r2, [r3, #0]
   16374:	1dbb      	adds	r3, r7, #6
   16376:	1c0a      	adds	r2, r1, #0
   16378:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1637a:	1dfb      	adds	r3, r7, #7
   1637c:	781b      	ldrb	r3, [r3, #0]
   1637e:	0018      	movs	r0, r3
   16380:	4b0d      	ldr	r3, [pc, #52]	; (163b8 <port_pin_set_output_level+0x50>)
   16382:	4798      	blx	r3
   16384:	0003      	movs	r3, r0
   16386:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16388:	1dfb      	adds	r3, r7, #7
   1638a:	781b      	ldrb	r3, [r3, #0]
   1638c:	221f      	movs	r2, #31
   1638e:	4013      	ands	r3, r2
   16390:	2201      	movs	r2, #1
   16392:	409a      	lsls	r2, r3
   16394:	0013      	movs	r3, r2
   16396:	60bb      	str	r3, [r7, #8]
	if (level) {
   16398:	1dbb      	adds	r3, r7, #6
   1639a:	781b      	ldrb	r3, [r3, #0]
   1639c:	2b00      	cmp	r3, #0
   1639e:	d003      	beq.n	163a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   163a0:	68fb      	ldr	r3, [r7, #12]
   163a2:	68ba      	ldr	r2, [r7, #8]
   163a4:	619a      	str	r2, [r3, #24]
}
   163a6:	e002      	b.n	163ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   163a8:	68fb      	ldr	r3, [r7, #12]
   163aa:	68ba      	ldr	r2, [r7, #8]
   163ac:	615a      	str	r2, [r3, #20]
}
   163ae:	46c0      	nop			; (mov r8, r8)
   163b0:	46bd      	mov	sp, r7
   163b2:	b004      	add	sp, #16
   163b4:	bd80      	pop	{r7, pc}
   163b6:	46c0      	nop			; (mov r8, r8)
   163b8:	00016345 	.word	0x00016345

000163bc <port_pin_toggle_output_level>:
{
   163bc:	b580      	push	{r7, lr}
   163be:	b084      	sub	sp, #16
   163c0:	af00      	add	r7, sp, #0
   163c2:	0002      	movs	r2, r0
   163c4:	1dfb      	adds	r3, r7, #7
   163c6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   163c8:	1dfb      	adds	r3, r7, #7
   163ca:	781b      	ldrb	r3, [r3, #0]
   163cc:	0018      	movs	r0, r3
   163ce:	4b09      	ldr	r3, [pc, #36]	; (163f4 <port_pin_toggle_output_level+0x38>)
   163d0:	4798      	blx	r3
   163d2:	0003      	movs	r3, r0
   163d4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   163d6:	1dfb      	adds	r3, r7, #7
   163d8:	781b      	ldrb	r3, [r3, #0]
   163da:	221f      	movs	r2, #31
   163dc:	4013      	ands	r3, r2
   163de:	2201      	movs	r2, #1
   163e0:	409a      	lsls	r2, r3
   163e2:	0013      	movs	r3, r2
   163e4:	60bb      	str	r3, [r7, #8]
	port_base->OUTTGL.reg = pin_mask;
   163e6:	68fb      	ldr	r3, [r7, #12]
   163e8:	68ba      	ldr	r2, [r7, #8]
   163ea:	61da      	str	r2, [r3, #28]
}
   163ec:	46c0      	nop			; (mov r8, r8)
   163ee:	46bd      	mov	sp, r7
   163f0:	b004      	add	sp, #16
   163f2:	bd80      	pop	{r7, pc}
   163f4:	00016345 	.word	0x00016345

000163f8 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
   163f8:	b580      	push	{r7, lr}
   163fa:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
   163fc:	4b02      	ldr	r3, [pc, #8]	; (16408 <system_get_reset_cause+0x10>)
   163fe:	781b      	ldrb	r3, [r3, #0]
   16400:	b2db      	uxtb	r3, r3
}
   16402:	0018      	movs	r0, r3
   16404:	46bd      	mov	sp, r7
   16406:	bd80      	pop	{r7, pc}
   16408:	40000800 	.word	0x40000800

0001640c <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
   1640c:	b580      	push	{r7, lr}
   1640e:	b082      	sub	sp, #8
   16410:	af00      	add	r7, sp, #0
   16412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
   16414:	687b      	ldr	r3, [r7, #4]
   16416:	2200      	movs	r2, #0
   16418:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
   1641a:	687b      	ldr	r3, [r7, #4]
   1641c:	2201      	movs	r2, #1
   1641e:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
   16420:	687b      	ldr	r3, [r7, #4]
   16422:	220c      	movs	r2, #12
   16424:	709a      	strb	r2, [r3, #2]
	config->window_period        = WDT_PERIOD_NONE;
   16426:	687b      	ldr	r3, [r7, #4]
   16428:	2200      	movs	r2, #0
   1642a:	70da      	strb	r2, [r3, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
   1642c:	687b      	ldr	r3, [r7, #4]
   1642e:	2200      	movs	r2, #0
   16430:	711a      	strb	r2, [r3, #4]
}
   16432:	46c0      	nop			; (mov r8, r8)
   16434:	46bd      	mov	sp, r7
   16436:	b002      	add	sp, #8
   16438:	bd80      	pop	{r7, pc}
	...

0001643c <print_reset_causes>:
	}
	}
}

static void print_reset_causes(void)
{
   1643c:	b590      	push	{r4, r7, lr}
   1643e:	b083      	sub	sp, #12
   16440:	af00      	add	r7, sp, #0
	enum system_reset_cause rcause = system_get_reset_cause();
   16442:	1dfc      	adds	r4, r7, #7
   16444:	4b20      	ldr	r3, [pc, #128]	; (164c8 <print_reset_causes+0x8c>)
   16446:	4798      	blx	r3
   16448:	0003      	movs	r3, r0
   1644a:	7023      	strb	r3, [r4, #0]
	printf("\r\nLast reset cause: ");
   1644c:	4b1f      	ldr	r3, [pc, #124]	; (164cc <print_reset_causes+0x90>)
   1644e:	0018      	movs	r0, r3
   16450:	4b1f      	ldr	r3, [pc, #124]	; (164d0 <print_reset_causes+0x94>)
   16452:	4798      	blx	r3
	if(rcause & (1 << 6)) {
   16454:	1dfb      	adds	r3, r7, #7
   16456:	781b      	ldrb	r3, [r3, #0]
   16458:	2240      	movs	r2, #64	; 0x40
   1645a:	4013      	ands	r3, r2
   1645c:	d003      	beq.n	16466 <print_reset_causes+0x2a>
		printf("System Reset Request\r\n");
   1645e:	4b1d      	ldr	r3, [pc, #116]	; (164d4 <print_reset_causes+0x98>)
   16460:	0018      	movs	r0, r3
   16462:	4b1d      	ldr	r3, [pc, #116]	; (164d8 <print_reset_causes+0x9c>)
   16464:	4798      	blx	r3
	}
	if(rcause & (1 << 5)) {
   16466:	1dfb      	adds	r3, r7, #7
   16468:	781b      	ldrb	r3, [r3, #0]
   1646a:	2220      	movs	r2, #32
   1646c:	4013      	ands	r3, r2
   1646e:	d003      	beq.n	16478 <print_reset_causes+0x3c>
		printf("Watchdog Reset\r\n");
   16470:	4b1a      	ldr	r3, [pc, #104]	; (164dc <print_reset_causes+0xa0>)
   16472:	0018      	movs	r0, r3
   16474:	4b18      	ldr	r3, [pc, #96]	; (164d8 <print_reset_causes+0x9c>)
   16476:	4798      	blx	r3
	}
	if(rcause & (1 << 4)) {
   16478:	1dfb      	adds	r3, r7, #7
   1647a:	781b      	ldrb	r3, [r3, #0]
   1647c:	2210      	movs	r2, #16
   1647e:	4013      	ands	r3, r2
   16480:	d003      	beq.n	1648a <print_reset_causes+0x4e>
		printf("External Reset\r\n");
   16482:	4b17      	ldr	r3, [pc, #92]	; (164e0 <print_reset_causes+0xa4>)
   16484:	0018      	movs	r0, r3
   16486:	4b14      	ldr	r3, [pc, #80]	; (164d8 <print_reset_causes+0x9c>)
   16488:	4798      	blx	r3
	}
	if(rcause & (1 << 2)) {
   1648a:	1dfb      	adds	r3, r7, #7
   1648c:	781b      	ldrb	r3, [r3, #0]
   1648e:	2204      	movs	r2, #4
   16490:	4013      	ands	r3, r2
   16492:	d003      	beq.n	1649c <print_reset_causes+0x60>
		printf("Brown Out 33 Detector Reset\r\n");
   16494:	4b13      	ldr	r3, [pc, #76]	; (164e4 <print_reset_causes+0xa8>)
   16496:	0018      	movs	r0, r3
   16498:	4b0f      	ldr	r3, [pc, #60]	; (164d8 <print_reset_causes+0x9c>)
   1649a:	4798      	blx	r3
	}
	if(rcause & (1 << 1)) {
   1649c:	1dfb      	adds	r3, r7, #7
   1649e:	781b      	ldrb	r3, [r3, #0]
   164a0:	2202      	movs	r2, #2
   164a2:	4013      	ands	r3, r2
   164a4:	d003      	beq.n	164ae <print_reset_causes+0x72>
		printf("Brown Out 12 Detector Reset\r\n");
   164a6:	4b10      	ldr	r3, [pc, #64]	; (164e8 <print_reset_causes+0xac>)
   164a8:	0018      	movs	r0, r3
   164aa:	4b0b      	ldr	r3, [pc, #44]	; (164d8 <print_reset_causes+0x9c>)
   164ac:	4798      	blx	r3
	}
	if(rcause & (1 << 0)) {
   164ae:	1dfb      	adds	r3, r7, #7
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	2201      	movs	r2, #1
   164b4:	4013      	ands	r3, r2
   164b6:	d003      	beq.n	164c0 <print_reset_causes+0x84>
		printf("Power-On Reset\r\n");
   164b8:	4b0c      	ldr	r3, [pc, #48]	; (164ec <print_reset_causes+0xb0>)
   164ba:	0018      	movs	r0, r3
   164bc:	4b06      	ldr	r3, [pc, #24]	; (164d8 <print_reset_causes+0x9c>)
   164be:	4798      	blx	r3
	}
}
   164c0:	46c0      	nop			; (mov r8, r8)
   164c2:	46bd      	mov	sp, r7
   164c4:	b003      	add	sp, #12
   164c6:	bd90      	pop	{r4, r7, pc}
   164c8:	000163f9 	.word	0x000163f9
   164cc:	0001cdb8 	.word	0x0001cdb8
   164d0:	0001a001 	.word	0x0001a001
   164d4:	0001cdd0 	.word	0x0001cdd0
   164d8:	0001a11d 	.word	0x0001a11d
   164dc:	0001cde8 	.word	0x0001cde8
   164e0:	0001cdf8 	.word	0x0001cdf8
   164e4:	0001ce08 	.word	0x0001ce08
   164e8:	0001ce28 	.word	0x0001ce28
   164ec:	0001ce48 	.word	0x0001ce48

000164f0 <watchdog_early_warning_callback>:


// Watch Dog Timer Support
//! [setup]
static void watchdog_early_warning_callback(void)
{
   164f0:	b580      	push	{r7, lr}
   164f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   164f4:	2100      	movs	r1, #0
   164f6:	2013      	movs	r0, #19
   164f8:	4b02      	ldr	r3, [pc, #8]	; (16504 <watchdog_early_warning_callback+0x14>)
   164fa:	4798      	blx	r3
}
   164fc:	46c0      	nop			; (mov r8, r8)
   164fe:	46bd      	mov	sp, r7
   16500:	bd80      	pop	{r7, pc}
   16502:	46c0      	nop			; (mov r8, r8)
   16504:	00016369 	.word	0x00016369

00016508 <configure_wdt>:
static void configure_wdt(void)
{
   16508:	b580      	push	{r7, lr}
   1650a:	b082      	sub	sp, #8
   1650c:	af00      	add	r7, sp, #0
		* with the default module settings. */
	//! [setup_1]
	struct wdt_conf config_wdt;
	//! [setup_1]
	//! [setup_2]
	wdt_get_config_defaults(&config_wdt);
   1650e:	003b      	movs	r3, r7
   16510:	0018      	movs	r0, r3
   16512:	4b09      	ldr	r3, [pc, #36]	; (16538 <configure_wdt+0x30>)
   16514:	4798      	blx	r3
	//! [setup_2]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
   16516:	003b      	movs	r3, r7
   16518:	2200      	movs	r2, #0
   1651a:	701a      	strb	r2, [r3, #0]
#if !((SAML21) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34))
	config_wdt.clock_source         = GCLK_GENERATOR_1;
#endif
	config_wdt.timeout_period       = WDT_PERIOD_16384CLK;
   1651c:	003b      	movs	r3, r7
   1651e:	220c      	movs	r2, #12
   16520:	709a      	strb	r2, [r3, #2]
	config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
   16522:	003b      	movs	r3, r7
   16524:	220b      	movs	r2, #11
   16526:	711a      	strb	r2, [r3, #4]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
   16528:	003b      	movs	r3, r7
   1652a:	0018      	movs	r0, r3
   1652c:	4b03      	ldr	r3, [pc, #12]	; (1653c <configure_wdt+0x34>)
   1652e:	4798      	blx	r3
	//! [setup_4]
}
   16530:	46c0      	nop			; (mov r8, r8)
   16532:	46bd      	mov	sp, r7
   16534:	b002      	add	sp, #8
   16536:	bd80      	pop	{r7, pc}
   16538:	0001640d 	.word	0x0001640d
   1653c:	00005fa5 	.word	0x00005fa5

00016540 <configure_wdt_callbacks>:
 static void configure_wdt_callbacks(void)
{
   16540:	b580      	push	{r7, lr}
   16542:	af00      	add	r7, sp, #0
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
   16544:	4b05      	ldr	r3, [pc, #20]	; (1655c <configure_wdt_callbacks+0x1c>)
   16546:	2100      	movs	r1, #0
   16548:	0018      	movs	r0, r3
   1654a:	4b05      	ldr	r3, [pc, #20]	; (16560 <configure_wdt_callbacks+0x20>)
   1654c:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
   1654e:	2000      	movs	r0, #0
   16550:	4b04      	ldr	r3, [pc, #16]	; (16564 <configure_wdt_callbacks+0x24>)
   16552:	4798      	blx	r3
	//! [setup_6]
}
   16554:	46c0      	nop			; (mov r8, r8)
   16556:	46bd      	mov	sp, r7
   16558:	bd80      	pop	{r7, pc}
   1655a:	46c0      	nop			; (mov r8, r8)
   1655c:	000164f1 	.word	0x000164f1
   16560:	00006151 	.word	0x00006151
   16564:	00006181 	.word	0x00006181

00016568 <main>:
	}
}
char str[16];
uint8_t count10Secs;
int main ( void )
{
   16568:	b590      	push	{r4, r7, lr}
   1656a:	b089      	sub	sp, #36	; 0x24
   1656c:	af00      	add	r7, sp, #0
	uint8_t i , TxCount = 0 , button_press;
   1656e:	231f      	movs	r3, #31
   16570:	18fb      	adds	r3, r7, r3
   16572:	2200      	movs	r2, #0
   16574:	701a      	strb	r2, [r3, #0]
	uint8_t connection_index = 0xFF, TxSynCount2 = 0;
   16576:	231e      	movs	r3, #30
   16578:	18fb      	adds	r3, r7, r3
   1657a:	22ff      	movs	r2, #255	; 0xff
   1657c:	701a      	strb	r2, [r3, #0]
   1657e:	231d      	movs	r3, #29
   16580:	18fb      	adds	r3, r7, r3
   16582:	2200      	movs	r2, #0
   16584:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	//int8_t ret;
	Cloud_RC ret = CLOUD_RC_NONE_ERROR;
   16586:	231c      	movs	r3, #28
   16588:	18fb      	adds	r3, r7, r3
   1658a:	2200      	movs	r2, #0
   1658c:	701a      	strb	r2, [r3, #0]
	rtc_init();
   1658e:	4b56      	ldr	r3, [pc, #344]	; (166e8 <main+0x180>)
   16590:	4798      	blx	r3
	delay_init();
   16592:	4b56      	ldr	r3, [pc, #344]	; (166ec <main+0x184>)
   16594:	4798      	blx	r3
	/* Initialize the board. */
	system_init();
   16596:	4b56      	ldr	r3, [pc, #344]	; (166f0 <main+0x188>)
   16598:	4798      	blx	r3
	/* Initialize the UART console. */
	sio2host_init();
   1659a:	4b56      	ldr	r3, [pc, #344]	; (166f4 <main+0x18c>)
   1659c:	4798      	blx	r3
	/* Timer Used for MiWi Tick. */
	configure_tc();
   1659e:	4b56      	ldr	r3, [pc, #344]	; (166f8 <main+0x190>)
   165a0:	4798      	blx	r3
	/* MiWi Protocol Init, Radio Init */
	MiApp_ProtocolInit(false);
   165a2:	2000      	movs	r0, #0
   165a4:	4b55      	ldr	r3, [pc, #340]	; (166fc <main+0x194>)
   165a6:	4798      	blx	r3
	// Set the Channel
	MiApp_SetChannel(APP_CHANNEL_SEL);
   165a8:	2005      	movs	r0, #5
   165aa:	4b55      	ldr	r3, [pc, #340]	; (16700 <main+0x198>)
   165ac:	4798      	blx	r3
	printf(STRING_HEADER);
   165ae:	4b55      	ldr	r3, [pc, #340]	; (16704 <main+0x19c>)
   165b0:	0018      	movs	r0, r3
   165b2:	4b55      	ldr	r3, [pc, #340]	; (16708 <main+0x1a0>)
   165b4:	4798      	blx	r3
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
   165b6:	2000      	movs	r0, #0
   165b8:	4b54      	ldr	r3, [pc, #336]	; (1670c <main+0x1a4>)
   165ba:	4798      	blx	r3
	// Enable Transceiver Interrupt
	ENABLE_TRX_IRQ();
   165bc:	2100      	movs	r1, #0
   165be:	2000      	movs	r0, #0
   165c0:	4b53      	ldr	r3, [pc, #332]	; (16710 <main+0x1a8>)
   165c2:	4798      	blx	r3
	// Enable All cpu interrupts
	cpu_irq_enable();
   165c4:	4b53      	ldr	r3, [pc, #332]	; (16714 <main+0x1ac>)
   165c6:	2201      	movs	r2, #1
   165c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   165ca:	f3bf 8f5f 	dmb	sy
   165ce:	b662      	cpsie	i
	sio2host_init();
   165d0:	4b48      	ldr	r3, [pc, #288]	; (166f4 <main+0x18c>)
   165d2:	4798      	blx	r3
	print_reset_causes();
   165d4:	4b50      	ldr	r3, [pc, #320]	; (16718 <main+0x1b0>)
   165d6:	4798      	blx	r3
	connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
   165d8:	231e      	movs	r3, #30
   165da:	18fc      	adds	r4, r7, r3
   165dc:	2100      	movs	r1, #0
   165de:	20ff      	movs	r0, #255	; 0xff
   165e0:	4b4e      	ldr	r3, [pc, #312]	; (1671c <main+0x1b4>)
   165e2:	4798      	blx	r3
   165e4:	0003      	movs	r3, r0
   165e6:	7023      	strb	r3, [r4, #0]
	MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
   165e8:	2200      	movs	r2, #0
   165ea:	210a      	movs	r1, #10
   165ec:	2000      	movs	r0, #0
   165ee:	4b4c      	ldr	r3, [pc, #304]	; (16720 <main+0x1b8>)
   165f0:	4798      	blx	r3
	LED_On(LED1);
   165f2:	2100      	movs	r1, #0
   165f4:	2012      	movs	r0, #18
   165f6:	4b4b      	ldr	r3, [pc, #300]	; (16724 <main+0x1bc>)
   165f8:	4798      	blx	r3
	/* Initialize the BSP. */
	nm_bsp_init();
   165fa:	4b4b      	ldr	r3, [pc, #300]	; (16728 <main+0x1c0>)
   165fc:	4798      	blx	r3
	DBG_LOG("Initializing WSN  Device\r\n");
   165fe:	4b4b      	ldr	r3, [pc, #300]	; (1672c <main+0x1c4>)
   16600:	0018      	movs	r0, r3
   16602:	4b41      	ldr	r3, [pc, #260]	; (16708 <main+0x1a0>)
   16604:	4798      	blx	r3
   16606:	4b4a      	ldr	r3, [pc, #296]	; (16730 <main+0x1c8>)
   16608:	0018      	movs	r0, r3
   1660a:	4b3f      	ldr	r3, [pc, #252]	; (16708 <main+0x1a0>)
   1660c:	4798      	blx	r3
	DBG_LOG("cpu_freq=%d\n",(int)system_cpu_clock_get_hz());
   1660e:	4b47      	ldr	r3, [pc, #284]	; (1672c <main+0x1c4>)
   16610:	0018      	movs	r0, r3
   16612:	4b3d      	ldr	r3, [pc, #244]	; (16708 <main+0x1a0>)
   16614:	4798      	blx	r3
   16616:	4b47      	ldr	r3, [pc, #284]	; (16734 <main+0x1cc>)
   16618:	4798      	blx	r3
   1661a:	0003      	movs	r3, r0
   1661c:	001a      	movs	r2, r3
   1661e:	4b46      	ldr	r3, [pc, #280]	; (16738 <main+0x1d0>)
   16620:	0011      	movs	r1, r2
   16622:	0018      	movs	r0, r3
   16624:	4b45      	ldr	r3, [pc, #276]	; (1673c <main+0x1d4>)
   16626:	4798      	blx	r3
	wifiCryptoInit();
   16628:	4b45      	ldr	r3, [pc, #276]	; (16740 <main+0x1d8>)
   1662a:	4798      	blx	r3
	configure_wdt();
   1662c:	4b45      	ldr	r3, [pc, #276]	; (16744 <main+0x1dc>)
   1662e:	4798      	blx	r3
	configure_wdt_callbacks();
   16630:	4b45      	ldr	r3, [pc, #276]	; (16748 <main+0x1e0>)
   16632:	4798      	blx	r3
	while (1) {
	m2m_wifi_handle_events(NULL);
   16634:	2000      	movs	r0, #0
   16636:	4b45      	ldr	r3, [pc, #276]	; (1674c <main+0x1e4>)
   16638:	4798      	blx	r3
	wdt_reset_count();
   1663a:	4b45      	ldr	r3, [pc, #276]	; (16750 <main+0x1e8>)
   1663c:	4798      	blx	r3
	if (MiApp_MessageAvailable())
   1663e:	4b45      	ldr	r3, [pc, #276]	; (16754 <main+0x1ec>)
   16640:	4798      	blx	r3
   16642:	1e03      	subs	r3, r0, #0
   16644:	d04b      	beq.n	166de <main+0x176>
	{
		// if received a data packet toggle led
		LED_Toggle(LED1);
   16646:	2012      	movs	r0, #18
   16648:	4b43      	ldr	r3, [pc, #268]	; (16758 <main+0x1f0>)
   1664a:	4798      	blx	r3
			#if defined (PC)
		#endif
		memset(miwiNodeLocation,0,sizeof(miwiNodeLocation));
   1664c:	4b43      	ldr	r3, [pc, #268]	; (1675c <main+0x1f4>)
   1664e:	221e      	movs	r2, #30
   16650:	2100      	movs	r1, #0
   16652:	0018      	movs	r0, r3
   16654:	4b42      	ldr	r3, [pc, #264]	; (16760 <main+0x1f8>)
   16656:	4798      	blx	r3
		strcat(miwiNodeLocation, "Node");
   16658:	4b40      	ldr	r3, [pc, #256]	; (1675c <main+0x1f4>)
   1665a:	0018      	movs	r0, r3
   1665c:	4b41      	ldr	r3, [pc, #260]	; (16764 <main+0x1fc>)
   1665e:	4798      	blx	r3
   16660:	0003      	movs	r3, r0
   16662:	001a      	movs	r2, r3
   16664:	4b3d      	ldr	r3, [pc, #244]	; (1675c <main+0x1f4>)
   16666:	18d2      	adds	r2, r2, r3
   16668:	4b3f      	ldr	r3, [pc, #252]	; (16768 <main+0x200>)
   1666a:	0010      	movs	r0, r2
   1666c:	0019      	movs	r1, r3
   1666e:	2305      	movs	r3, #5
   16670:	001a      	movs	r2, r3
   16672:	4b3e      	ldr	r3, [pc, #248]	; (1676c <main+0x204>)
   16674:	4798      	blx	r3
		strcat (miwiNodeLocation,itoa(rxMessage.Payload[0], str , 10));
   16676:	4b3e      	ldr	r3, [pc, #248]	; (16770 <main+0x208>)
   16678:	689b      	ldr	r3, [r3, #8]
   1667a:	781b      	ldrb	r3, [r3, #0]
   1667c:	0018      	movs	r0, r3
   1667e:	4b3d      	ldr	r3, [pc, #244]	; (16774 <main+0x20c>)
   16680:	220a      	movs	r2, #10
   16682:	0019      	movs	r1, r3
   16684:	4b3c      	ldr	r3, [pc, #240]	; (16778 <main+0x210>)
   16686:	4798      	blx	r3
   16688:	0002      	movs	r2, r0
   1668a:	4b34      	ldr	r3, [pc, #208]	; (1675c <main+0x1f4>)
   1668c:	0011      	movs	r1, r2
   1668e:	0018      	movs	r0, r3
   16690:	4b3a      	ldr	r3, [pc, #232]	; (1677c <main+0x214>)
   16692:	4798      	blx	r3
		printf("Node Id:%s\r\n",miwiNodeLocation);
   16694:	4a31      	ldr	r2, [pc, #196]	; (1675c <main+0x1f4>)
   16696:	4b3a      	ldr	r3, [pc, #232]	; (16780 <main+0x218>)
   16698:	0011      	movs	r1, r2
   1669a:	0018      	movs	r0, r3
   1669c:	4b27      	ldr	r3, [pc, #156]	; (1673c <main+0x1d4>)
   1669e:	4798      	blx	r3
		miwiNodeTemp = rxMessage.Payload[1];
   166a0:	4b33      	ldr	r3, [pc, #204]	; (16770 <main+0x208>)
   166a2:	689b      	ldr	r3, [r3, #8]
   166a4:	3301      	adds	r3, #1
   166a6:	781b      	ldrb	r3, [r3, #0]
   166a8:	001a      	movs	r2, r3
   166aa:	4b36      	ldr	r3, [pc, #216]	; (16784 <main+0x21c>)
   166ac:	601a      	str	r2, [r3, #0]
		miwiNodeRssi = rxMessage.PacketRSSI;
   166ae:	4b30      	ldr	r3, [pc, #192]	; (16770 <main+0x208>)
   166b0:	7b5b      	ldrb	r3, [r3, #13]
   166b2:	001a      	movs	r2, r3
   166b4:	4b34      	ldr	r3, [pc, #208]	; (16788 <main+0x220>)
   166b6:	601a      	str	r2, [r3, #0]
		miwiNewDataArrived = true;
   166b8:	4b34      	ldr	r3, [pc, #208]	; (1678c <main+0x224>)
   166ba:	2201      	movs	r2, #1
   166bc:	701a      	strb	r2, [r3, #0]
		printf("NodeId: %d, Temp:%d,  RSSI: %d\r\n",rxMessage.Payload[0], rxMessage.Payload[1], rxMessage.PacketRSSI);
   166be:	4b2c      	ldr	r3, [pc, #176]	; (16770 <main+0x208>)
   166c0:	689b      	ldr	r3, [r3, #8]
   166c2:	781b      	ldrb	r3, [r3, #0]
   166c4:	0019      	movs	r1, r3
   166c6:	4b2a      	ldr	r3, [pc, #168]	; (16770 <main+0x208>)
   166c8:	689b      	ldr	r3, [r3, #8]
   166ca:	3301      	adds	r3, #1
   166cc:	781b      	ldrb	r3, [r3, #0]
   166ce:	001a      	movs	r2, r3
   166d0:	4b27      	ldr	r3, [pc, #156]	; (16770 <main+0x208>)
   166d2:	7b5b      	ldrb	r3, [r3, #13]
   166d4:	482e      	ldr	r0, [pc, #184]	; (16790 <main+0x228>)
   166d6:	4c19      	ldr	r4, [pc, #100]	; (1673c <main+0x1d4>)
   166d8:	47a0      	blx	r4
		// Function MiApp_DiscardMessage is used to release the current
		//  received packet.
		// After calling this function, the stack can start to process the
		//  next received frame
		/*******************************************************************/
		MiApp_DiscardMessage();
   166da:	4b2e      	ldr	r3, [pc, #184]	; (16794 <main+0x22c>)
   166dc:	4798      	blx	r3
				env_sensor_execute();
			}
		#endif
	}

		cloud_mqtt_yield(100);
   166de:	2064      	movs	r0, #100	; 0x64
   166e0:	4b2d      	ldr	r3, [pc, #180]	; (16798 <main+0x230>)
   166e2:	4798      	blx	r3
	m2m_wifi_handle_events(NULL);
   166e4:	e7a6      	b.n	16634 <main+0xcc>
   166e6:	46c0      	nop			; (mov r8, r8)
   166e8:	00016b91 	.word	0x00016b91
   166ec:	00010d05 	.word	0x00010d05
   166f0:	000153e5 	.word	0x000153e5
   166f4:	0001618d 	.word	0x0001618d
   166f8:	00016f59 	.word	0x00016f59
   166fc:	000102dd 	.word	0x000102dd
   16700:	0001090d 	.word	0x0001090d
   16704:	0001ce58 	.word	0x0001ce58
   16708:	0001a11d 	.word	0x0001a11d
   1670c:	00010b2d 	.word	0x00010b2d
   16710:	000111bd 	.word	0x000111bd
   16714:	200004b0 	.word	0x200004b0
   16718:	0001643d 	.word	0x0001643d
   1671c:	0001077d 	.word	0x0001077d
   16720:	00010715 	.word	0x00010715
   16724:	00016369 	.word	0x00016369
   16728:	0000028d 	.word	0x0000028d
   1672c:	0001cebc 	.word	0x0001cebc
   16730:	0001cec0 	.word	0x0001cec0
   16734:	000162b5 	.word	0x000162b5
   16738:	0001cedc 	.word	0x0001cedc
   1673c:	0001a001 	.word	0x0001a001
   16740:	00017b39 	.word	0x00017b39
   16744:	00016509 	.word	0x00016509
   16748:	00016541 	.word	0x00016541
   1674c:	0000234d 	.word	0x0000234d
   16750:	000060dd 	.word	0x000060dd
   16754:	00010949 	.word	0x00010949
   16758:	000163bd 	.word	0x000163bd
   1675c:	20001614 	.word	0x20001614
   16760:	00019ea1 	.word	0x00019ea1
   16764:	0001a3e3 	.word	0x0001a3e3
   16768:	0001ceec 	.word	0x0001ceec
   1676c:	00019e6b 	.word	0x00019e6b
   16770:	20001580 	.word	0x20001580
   16774:	200016b8 	.word	0x200016b8
   16778:	00019e1d 	.word	0x00019e1d
   1677c:	0001a39d 	.word	0x0001a39d
   16780:	0001cef4 	.word	0x0001cef4
   16784:	200016c8 	.word	0x200016c8
   16788:	20001604 	.word	0x20001604
   1678c:	200004b1 	.word	0x200004b1
   16790:	0001cf04 	.word	0x0001cf04
   16794:	000108ed 	.word	0x000108ed
   16798:	0000b5b1 	.word	0x0000b5b1

0001679c <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   1679c:	b580      	push	{r7, lr}
   1679e:	b084      	sub	sp, #16
   167a0:	af00      	add	r7, sp, #0
   167a2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   167a4:	687b      	ldr	r3, [r7, #4]
   167a6:	22b0      	movs	r2, #176	; 0xb0
   167a8:	0112      	lsls	r2, r2, #4
   167aa:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   167ac:	687b      	ldr	r3, [r7, #4]
   167ae:	2201      	movs	r2, #1
   167b0:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   167b2:	687b      	ldr	r3, [r7, #4]
   167b4:	2200      	movs	r2, #0
   167b6:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
   167b8:	687b      	ldr	r3, [r7, #4]
   167ba:	2201      	movs	r2, #1
   167bc:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   167be:	230f      	movs	r3, #15
   167c0:	18fb      	adds	r3, r7, r3
   167c2:	2200      	movs	r2, #0
   167c4:	701a      	strb	r2, [r3, #0]
   167c6:	e00e      	b.n	167e6 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   167c8:	230f      	movs	r3, #15
   167ca:	18fb      	adds	r3, r7, r3
   167cc:	781a      	ldrb	r2, [r3, #0]
   167ce:	687b      	ldr	r3, [r7, #4]
   167d0:	3202      	adds	r2, #2
   167d2:	0092      	lsls	r2, r2, #2
   167d4:	2100      	movs	r1, #0
   167d6:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   167d8:	230f      	movs	r3, #15
   167da:	18fb      	adds	r3, r7, r3
   167dc:	781a      	ldrb	r2, [r3, #0]
   167de:	230f      	movs	r3, #15
   167e0:	18fb      	adds	r3, r7, r3
   167e2:	3201      	adds	r2, #1
   167e4:	701a      	strb	r2, [r3, #0]
   167e6:	230f      	movs	r3, #15
   167e8:	18fb      	adds	r3, r7, r3
   167ea:	781b      	ldrb	r3, [r3, #0]
   167ec:	2b01      	cmp	r3, #1
   167ee:	d9eb      	bls.n	167c8 <rtc_count_get_config_defaults+0x2c>
	}
}
   167f0:	46c0      	nop			; (mov r8, r8)
   167f2:	46bd      	mov	sp, r7
   167f4:	b004      	add	sp, #16
   167f6:	bd80      	pop	{r7, pc}

000167f8 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   167f8:	b580      	push	{r7, lr}
   167fa:	b086      	sub	sp, #24
   167fc:	af00      	add	r7, sp, #0
   167fe:	6078      	str	r0, [r7, #4]
   16800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   16802:	687b      	ldr	r3, [r7, #4]
   16804:	681b      	ldr	r3, [r3, #0]
   16806:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   16808:	2300      	movs	r3, #0
   1680a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   1680c:	683b      	ldr	r3, [r7, #0]
   1680e:	781b      	ldrb	r3, [r3, #0]
   16810:	2b00      	cmp	r3, #0
   16812:	d004      	beq.n	1681e <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   16814:	697b      	ldr	r3, [r7, #20]
   16816:	2280      	movs	r2, #128	; 0x80
   16818:	0212      	lsls	r2, r2, #8
   1681a:	4313      	orrs	r3, r2
   1681c:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1681e:	2313      	movs	r3, #19
   16820:	18fb      	adds	r3, r7, r3
   16822:	2200      	movs	r2, #0
   16824:	701a      	strb	r2, [r3, #0]
   16826:	e01c      	b.n	16862 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   16828:	2313      	movs	r3, #19
   1682a:	18fb      	adds	r3, r7, r3
   1682c:	781b      	ldrb	r3, [r3, #0]
   1682e:	683a      	ldr	r2, [r7, #0]
   16830:	18d3      	adds	r3, r2, r3
   16832:	785b      	ldrb	r3, [r3, #1]
   16834:	2b00      	cmp	r3, #0
   16836:	d00d      	beq.n	16854 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   16838:	2313      	movs	r3, #19
   1683a:	18fb      	adds	r3, r7, r3
   1683c:	781b      	ldrb	r3, [r3, #0]
   1683e:	2201      	movs	r2, #1
   16840:	409a      	lsls	r2, r3
   16842:	0013      	movs	r3, r2
   16844:	021b      	lsls	r3, r3, #8
   16846:	001a      	movs	r2, r3
   16848:	2380      	movs	r3, #128	; 0x80
   1684a:	005b      	lsls	r3, r3, #1
   1684c:	4013      	ands	r3, r2
   1684e:	697a      	ldr	r2, [r7, #20]
   16850:	4313      	orrs	r3, r2
   16852:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   16854:	2313      	movs	r3, #19
   16856:	18fb      	adds	r3, r7, r3
   16858:	781a      	ldrb	r2, [r3, #0]
   1685a:	2313      	movs	r3, #19
   1685c:	18fb      	adds	r3, r7, r3
   1685e:	3201      	adds	r2, #1
   16860:	701a      	strb	r2, [r3, #0]
   16862:	2313      	movs	r3, #19
   16864:	18fb      	adds	r3, r7, r3
   16866:	781b      	ldrb	r3, [r3, #0]
   16868:	2b01      	cmp	r3, #1
   1686a:	d9dd      	bls.n	16828 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   1686c:	2312      	movs	r3, #18
   1686e:	18fb      	adds	r3, r7, r3
   16870:	2200      	movs	r2, #0
   16872:	701a      	strb	r2, [r3, #0]
   16874:	e01a      	b.n	168ac <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   16876:	2312      	movs	r3, #18
   16878:	18fb      	adds	r3, r7, r3
   1687a:	781b      	ldrb	r3, [r3, #0]
   1687c:	683a      	ldr	r2, [r7, #0]
   1687e:	18d3      	adds	r3, r2, r3
   16880:	78db      	ldrb	r3, [r3, #3]
   16882:	2b00      	cmp	r3, #0
   16884:	d00b      	beq.n	1689e <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   16886:	2312      	movs	r3, #18
   16888:	18fb      	adds	r3, r7, r3
   1688a:	781b      	ldrb	r3, [r3, #0]
   1688c:	2201      	movs	r2, #1
   1688e:	409a      	lsls	r2, r3
   16890:	0013      	movs	r3, r2
   16892:	001a      	movs	r2, r3
   16894:	23ff      	movs	r3, #255	; 0xff
   16896:	4013      	ands	r3, r2
   16898:	697a      	ldr	r2, [r7, #20]
   1689a:	4313      	orrs	r3, r2
   1689c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   1689e:	2312      	movs	r3, #18
   168a0:	18fb      	adds	r3, r7, r3
   168a2:	781a      	ldrb	r2, [r3, #0]
   168a4:	2312      	movs	r3, #18
   168a6:	18fb      	adds	r3, r7, r3
   168a8:	3201      	adds	r2, #1
   168aa:	701a      	strb	r2, [r3, #0]
   168ac:	2312      	movs	r3, #18
   168ae:	18fb      	adds	r3, r7, r3
   168b0:	781b      	ldrb	r3, [r3, #0]
   168b2:	2b07      	cmp	r3, #7
   168b4:	d9df      	bls.n	16876 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   168b6:	68fb      	ldr	r3, [r7, #12]
   168b8:	685a      	ldr	r2, [r3, #4]
   168ba:	697b      	ldr	r3, [r7, #20]
   168bc:	431a      	orrs	r2, r3
   168be:	68fb      	ldr	r3, [r7, #12]
   168c0:	605a      	str	r2, [r3, #4]
}
   168c2:	46c0      	nop			; (mov r8, r8)
   168c4:	46bd      	mov	sp, r7
   168c6:	b006      	add	sp, #24
   168c8:	bd80      	pop	{r7, pc}
	...

000168cc <rtc_overflow_callback>:
uint8_t sec60Count = 0;
/*! \brief RTC timer overflow callback
 *
 */
void rtc_overflow_callback(void)
{
   168cc:	b580      	push	{r7, lr}
   168ce:	b082      	sub	sp, #8
   168d0:	af00      	add	r7, sp, #0
	uint16_t power_led_period = POWER_LED_PERIOD;
   168d2:	1dbb      	adds	r3, r7, #6
   168d4:	4a5d      	ldr	r2, [pc, #372]	; (16a4c <rtc_overflow_callback+0x180>)
   168d6:	801a      	strh	r2, [r3, #0]
	
	/* Do something on RTC overflow here */
	rtc_count_clear_compare_match(&rtc_instance,RTC_COUNT_COMPARE_0);
   168d8:	4b5d      	ldr	r3, [pc, #372]	; (16a50 <rtc_overflow_callback+0x184>)
   168da:	2100      	movs	r1, #0
   168dc:	0018      	movs	r0, r3
   168de:	4b5d      	ldr	r3, [pc, #372]	; (16a54 <rtc_overflow_callback+0x188>)
   168e0:	4798      	blx	r3
	//touch_time.time_to_measure_touch = 1u;

	/* 20ms tick */
	rtc_timer++;
   168e2:	4b5d      	ldr	r3, [pc, #372]	; (16a58 <rtc_overflow_callback+0x18c>)
   168e4:	681b      	ldr	r3, [r3, #0]
   168e6:	1c5a      	adds	r2, r3, #1
   168e8:	4b5b      	ldr	r3, [pc, #364]	; (16a58 <rtc_overflow_callback+0x18c>)
   168ea:	601a      	str	r2, [r3, #0]
	ms_ticks +=20;
   168ec:	4b5b      	ldr	r3, [pc, #364]	; (16a5c <rtc_overflow_callback+0x190>)
   168ee:	681b      	ldr	r3, [r3, #0]
   168f0:	3314      	adds	r3, #20
   168f2:	001a      	movs	r2, r3
   168f4:	4b59      	ldr	r3, [pc, #356]	; (16a5c <rtc_overflow_callback+0x190>)
   168f6:	601a      	str	r2, [r3, #0]
	
	tick_bhi = 1;
   168f8:	4b59      	ldr	r3, [pc, #356]	; (16a60 <rtc_overflow_callback+0x194>)
   168fa:	2201      	movs	r2, #1
   168fc:	701a      	strb	r2, [r3, #0]

	if(rtc_timer % 3000 == 0)
   168fe:	4b56      	ldr	r3, [pc, #344]	; (16a58 <rtc_overflow_callback+0x18c>)
   16900:	681a      	ldr	r2, [r3, #0]
   16902:	4b58      	ldr	r3, [pc, #352]	; (16a64 <rtc_overflow_callback+0x198>)
   16904:	4951      	ldr	r1, [pc, #324]	; (16a4c <rtc_overflow_callback+0x180>)
   16906:	0010      	movs	r0, r2
   16908:	4798      	blx	r3
   1690a:	1e0b      	subs	r3, r1, #0
   1690c:	d108      	bne.n	16920 <rtc_overflow_callback+0x54>
	{
		
		tick_60second = 1;
   1690e:	4b56      	ldr	r3, [pc, #344]	; (16a68 <rtc_overflow_callback+0x19c>)
   16910:	2201      	movs	r2, #1
   16912:	701a      	strb	r2, [r3, #0]
		sec60Count++;
   16914:	4b55      	ldr	r3, [pc, #340]	; (16a6c <rtc_overflow_callback+0x1a0>)
   16916:	781b      	ldrb	r3, [r3, #0]
   16918:	3301      	adds	r3, #1
   1691a:	b2da      	uxtb	r2, r3
   1691c:	4b53      	ldr	r3, [pc, #332]	; (16a6c <rtc_overflow_callback+0x1a0>)
   1691e:	701a      	strb	r2, [r3, #0]
		
	}
	if(sec60Count == 60)
   16920:	4b52      	ldr	r3, [pc, #328]	; (16a6c <rtc_overflow_callback+0x1a0>)
   16922:	781b      	ldrb	r3, [r3, #0]
   16924:	2b3c      	cmp	r3, #60	; 0x3c
   16926:	d10d      	bne.n	16944 <rtc_overflow_callback+0x78>
	{
		printf("sec60count= %d\r\n",sec60Count);
   16928:	4b50      	ldr	r3, [pc, #320]	; (16a6c <rtc_overflow_callback+0x1a0>)
   1692a:	781b      	ldrb	r3, [r3, #0]
   1692c:	001a      	movs	r2, r3
   1692e:	4b50      	ldr	r3, [pc, #320]	; (16a70 <rtc_overflow_callback+0x1a4>)
   16930:	0011      	movs	r1, r2
   16932:	0018      	movs	r0, r3
   16934:	4b4f      	ldr	r3, [pc, #316]	; (16a74 <rtc_overflow_callback+0x1a8>)
   16936:	4798      	blx	r3
		tick_1min = 1;
   16938:	4b4f      	ldr	r3, [pc, #316]	; (16a78 <rtc_overflow_callback+0x1ac>)
   1693a:	2201      	movs	r2, #1
   1693c:	701a      	strb	r2, [r3, #0]
		sec60Count = 0;
   1693e:	4b4b      	ldr	r3, [pc, #300]	; (16a6c <rtc_overflow_callback+0x1a0>)
   16940:	2200      	movs	r2, #0
   16942:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 500 == 0)
   16944:	4b44      	ldr	r3, [pc, #272]	; (16a58 <rtc_overflow_callback+0x18c>)
   16946:	6818      	ldr	r0, [r3, #0]
   16948:	4b46      	ldr	r3, [pc, #280]	; (16a64 <rtc_overflow_callback+0x198>)
   1694a:	22fa      	movs	r2, #250	; 0xfa
   1694c:	0051      	lsls	r1, r2, #1
   1694e:	4798      	blx	r3
   16950:	1e0b      	subs	r3, r1, #0
   16952:	d102      	bne.n	1695a <rtc_overflow_callback+0x8e>
	{
		tick_10second = 1;
   16954:	4b49      	ldr	r3, [pc, #292]	; (16a7c <rtc_overflow_callback+0x1b0>)
   16956:	2201      	movs	r2, #1
   16958:	701a      	strb	r2, [r3, #0]
	}	

	if(rtc_timer % 1000 == 0)
   1695a:	4b3f      	ldr	r3, [pc, #252]	; (16a58 <rtc_overflow_callback+0x18c>)
   1695c:	6818      	ldr	r0, [r3, #0]
   1695e:	4b41      	ldr	r3, [pc, #260]	; (16a64 <rtc_overflow_callback+0x198>)
   16960:	22fa      	movs	r2, #250	; 0xfa
   16962:	0091      	lsls	r1, r2, #2
   16964:	4798      	blx	r3
   16966:	1e0b      	subs	r3, r1, #0
   16968:	d102      	bne.n	16970 <rtc_overflow_callback+0xa4>
	{
		tick_20second = 1;
   1696a:	4b45      	ldr	r3, [pc, #276]	; (16a80 <rtc_overflow_callback+0x1b4>)
   1696c:	2201      	movs	r2, #1
   1696e:	701a      	strb	r2, [r3, #0]
	}

	if(rtc_timer % 1500 == 0)
   16970:	4b39      	ldr	r3, [pc, #228]	; (16a58 <rtc_overflow_callback+0x18c>)
   16972:	681a      	ldr	r2, [r3, #0]
   16974:	4b3b      	ldr	r3, [pc, #236]	; (16a64 <rtc_overflow_callback+0x198>)
   16976:	4943      	ldr	r1, [pc, #268]	; (16a84 <rtc_overflow_callback+0x1b8>)
   16978:	0010      	movs	r0, r2
   1697a:	4798      	blx	r3
   1697c:	1e0b      	subs	r3, r1, #0
   1697e:	d102      	bne.n	16986 <rtc_overflow_callback+0xba>
	{
		tick_30second = 1;
   16980:	4b41      	ldr	r3, [pc, #260]	; (16a88 <rtc_overflow_callback+0x1bc>)
   16982:	2201      	movs	r2, #1
   16984:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % env_sensor_period == 0)
   16986:	4b34      	ldr	r3, [pc, #208]	; (16a58 <rtc_overflow_callback+0x18c>)
   16988:	681a      	ldr	r2, [r3, #0]
   1698a:	4b40      	ldr	r3, [pc, #256]	; (16a8c <rtc_overflow_callback+0x1c0>)
   1698c:	781b      	ldrb	r3, [r3, #0]
   1698e:	0019      	movs	r1, r3
   16990:	4b34      	ldr	r3, [pc, #208]	; (16a64 <rtc_overflow_callback+0x198>)
   16992:	0010      	movs	r0, r2
   16994:	4798      	blx	r3
   16996:	1e0b      	subs	r3, r1, #0
   16998:	d102      	bne.n	169a0 <rtc_overflow_callback+0xd4>
	{
		tick_env_sensor = 1;
   1699a:	4b3d      	ldr	r3, [pc, #244]	; (16a90 <rtc_overflow_callback+0x1c4>)
   1699c:	2201      	movs	r2, #1
   1699e:	701a      	strb	r2, [r3, #0]
	}


	if(rtc_timer % 250 == 0)
   169a0:	4b2d      	ldr	r3, [pc, #180]	; (16a58 <rtc_overflow_callback+0x18c>)
   169a2:	681a      	ldr	r2, [r3, #0]
   169a4:	4b2f      	ldr	r3, [pc, #188]	; (16a64 <rtc_overflow_callback+0x198>)
   169a6:	21fa      	movs	r1, #250	; 0xfa
   169a8:	0010      	movs	r0, r2
   169aa:	4798      	blx	r3
   169ac:	1e0b      	subs	r3, r1, #0
   169ae:	d102      	bne.n	169b6 <rtc_overflow_callback+0xea>
	{
		tick_5second = 1;
   169b0:	4b38      	ldr	r3, [pc, #224]	; (16a94 <rtc_overflow_callback+0x1c8>)
   169b2:	2201      	movs	r2, #1
   169b4:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 100 == 0)
   169b6:	4b28      	ldr	r3, [pc, #160]	; (16a58 <rtc_overflow_callback+0x18c>)
   169b8:	681a      	ldr	r2, [r3, #0]
   169ba:	4b2a      	ldr	r3, [pc, #168]	; (16a64 <rtc_overflow_callback+0x198>)
   169bc:	2164      	movs	r1, #100	; 0x64
   169be:	0010      	movs	r0, r2
   169c0:	4798      	blx	r3
   169c2:	1e0b      	subs	r3, r1, #0
   169c4:	d102      	bne.n	169cc <rtc_overflow_callback+0x100>
	{
		tick_2second = 1;
   169c6:	4b34      	ldr	r3, [pc, #208]	; (16a98 <rtc_overflow_callback+0x1cc>)
   169c8:	2201      	movs	r2, #1
   169ca:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 50 == 0)
   169cc:	4b22      	ldr	r3, [pc, #136]	; (16a58 <rtc_overflow_callback+0x18c>)
   169ce:	681a      	ldr	r2, [r3, #0]
   169d0:	4b24      	ldr	r3, [pc, #144]	; (16a64 <rtc_overflow_callback+0x198>)
   169d2:	2132      	movs	r1, #50	; 0x32
   169d4:	0010      	movs	r0, r2
   169d6:	4798      	blx	r3
   169d8:	1e0b      	subs	r3, r1, #0
   169da:	d10c      	bne.n	169f6 <rtc_overflow_callback+0x12a>
	{
		tick_1second = 1;
   169dc:	4b2f      	ldr	r3, [pc, #188]	; (16a9c <rtc_overflow_callback+0x1d0>)
   169de:	2201      	movs	r2, #1
   169e0:	701a      	strb	r2, [r3, #0]
		if (rotation_data_timer)
   169e2:	4b2f      	ldr	r3, [pc, #188]	; (16aa0 <rtc_overflow_callback+0x1d4>)
   169e4:	781b      	ldrb	r3, [r3, #0]
   169e6:	2b00      	cmp	r3, #0
   169e8:	d005      	beq.n	169f6 <rtc_overflow_callback+0x12a>
			rotation_data_timer--;
   169ea:	4b2d      	ldr	r3, [pc, #180]	; (16aa0 <rtc_overflow_callback+0x1d4>)
   169ec:	781b      	ldrb	r3, [r3, #0]
   169ee:	3b01      	subs	r3, #1
   169f0:	b2da      	uxtb	r2, r3
   169f2:	4b2b      	ldr	r3, [pc, #172]	; (16aa0 <rtc_overflow_callback+0x1d4>)
   169f4:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 25 == 0)
   169f6:	4b18      	ldr	r3, [pc, #96]	; (16a58 <rtc_overflow_callback+0x18c>)
   169f8:	681a      	ldr	r2, [r3, #0]
   169fa:	4b1a      	ldr	r3, [pc, #104]	; (16a64 <rtc_overflow_callback+0x198>)
   169fc:	2119      	movs	r1, #25
   169fe:	0010      	movs	r0, r2
   16a00:	4798      	blx	r3
   16a02:	1e0b      	subs	r3, r1, #0
   16a04:	d105      	bne.n	16a12 <rtc_overflow_callback+0x146>
	{
		//if (gu8LedMode == LED_MODE_BLINK_NORMAL)
			//toggleLED();
		tick_rotation_data = 1;
   16a06:	4b27      	ldr	r3, [pc, #156]	; (16aa4 <rtc_overflow_callback+0x1d8>)
   16a08:	2201      	movs	r2, #1
   16a0a:	701a      	strb	r2, [r3, #0]
		tick_500ms = 1;
   16a0c:	4b26      	ldr	r3, [pc, #152]	; (16aa8 <rtc_overflow_callback+0x1dc>)
   16a0e:	2201      	movs	r2, #1
   16a10:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 5 == 0)
   16a12:	4b11      	ldr	r3, [pc, #68]	; (16a58 <rtc_overflow_callback+0x18c>)
   16a14:	681a      	ldr	r2, [r3, #0]
   16a16:	4b13      	ldr	r3, [pc, #76]	; (16a64 <rtc_overflow_callback+0x198>)
   16a18:	2105      	movs	r1, #5
   16a1a:	0010      	movs	r0, r2
   16a1c:	4798      	blx	r3
   16a1e:	1e0b      	subs	r3, r1, #0
   16a20:	d102      	bne.n	16a28 <rtc_overflow_callback+0x15c>
	{
		//if (gu8LedMode == LED_MODE_BLINK_FAST)
			//toggleLED();
		tick_100ms = 1;
   16a22:	4b22      	ldr	r3, [pc, #136]	; (16aac <rtc_overflow_callback+0x1e0>)
   16a24:	2201      	movs	r2, #1
   16a26:	701a      	strb	r2, [r3, #0]
	}
	
	
	/* power LED handling */
	power_led_timer++;
   16a28:	4b21      	ldr	r3, [pc, #132]	; (16ab0 <rtc_overflow_callback+0x1e4>)
   16a2a:	881b      	ldrh	r3, [r3, #0]
   16a2c:	3301      	adds	r3, #1
   16a2e:	b29a      	uxth	r2, r3
   16a30:	4b1f      	ldr	r3, [pc, #124]	; (16ab0 <rtc_overflow_callback+0x1e4>)
   16a32:	801a      	strh	r2, [r3, #0]
	
	if(low_battery_flag == 1)
   16a34:	4b1f      	ldr	r3, [pc, #124]	; (16ab4 <rtc_overflow_callback+0x1e8>)
   16a36:	781b      	ldrb	r3, [r3, #0]
   16a38:	2b00      	cmp	r3, #0
   16a3a:	d003      	beq.n	16a44 <rtc_overflow_callback+0x178>
	{
		power_led_period = POWER_LED_LOW_BATTERY_PERIOD; 	
   16a3c:	1dbb      	adds	r3, r7, #6
   16a3e:	22fa      	movs	r2, #250	; 0xfa
   16a40:	0052      	lsls	r2, r2, #1
   16a42:	801a      	strh	r2, [r3, #0]
	}
	
	
}
   16a44:	46c0      	nop			; (mov r8, r8)
   16a46:	46bd      	mov	sp, r7
   16a48:	b002      	add	sp, #8
   16a4a:	bd80      	pop	{r7, pc}
   16a4c:	00000bb8 	.word	0x00000bb8
   16a50:	20001750 	.word	0x20001750
   16a54:	000056c9 	.word	0x000056c9
   16a58:	2000178c 	.word	0x2000178c
   16a5c:	200008d8 	.word	0x200008d8
   16a60:	20001790 	.word	0x20001790
   16a64:	00017fa9 	.word	0x00017fa9
   16a68:	2000174c 	.word	0x2000174c
   16a6c:	200008dd 	.word	0x200008dd
   16a70:	0001cf28 	.word	0x0001cf28
   16a74:	0001a001 	.word	0x0001a001
   16a78:	2000174d 	.word	0x2000174d
   16a7c:	20001796 	.word	0x20001796
   16a80:	20001795 	.word	0x20001795
   16a84:	000005dc 	.word	0x000005dc
   16a88:	20001792 	.word	0x20001792
   16a8c:	200004b2 	.word	0x200004b2
   16a90:	20001799 	.word	0x20001799
   16a94:	2000178a 	.word	0x2000178a
   16a98:	2000179b 	.word	0x2000179b
   16a9c:	20001794 	.word	0x20001794
   16aa0:	20001797 	.word	0x20001797
   16aa4:	20001793 	.word	0x20001793
   16aa8:	20001798 	.word	0x20001798
   16aac:	20001791 	.word	0x20001791
   16ab0:	20001788 	.word	0x20001788
   16ab4:	200008dc 	.word	0x200008dc

00016ab8 <configure_rtc_callbacks>:

/*! \brief Configure the RTC timer callback
 *
 */
void configure_rtc_callbacks(void)
{
   16ab8:	b580      	push	{r7, lr}
   16aba:	af00      	add	r7, sp, #0
	/* register callback */
	rtc_count_register_callback(&rtc_instance,
   16abc:	4906      	ldr	r1, [pc, #24]	; (16ad8 <configure_rtc_callbacks+0x20>)
   16abe:	4b07      	ldr	r3, [pc, #28]	; (16adc <configure_rtc_callbacks+0x24>)
   16ac0:	2208      	movs	r2, #8
   16ac2:	0018      	movs	r0, r3
   16ac4:	4b06      	ldr	r3, [pc, #24]	; (16ae0 <configure_rtc_callbacks+0x28>)
   16ac6:	4798      	blx	r3
			rtc_overflow_callback, RTC_COUNT_CALLBACK_COMPARE_0);
	/* Enable callback */
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_COMPARE_0);
   16ac8:	4b04      	ldr	r3, [pc, #16]	; (16adc <configure_rtc_callbacks+0x24>)
   16aca:	2108      	movs	r1, #8
   16acc:	0018      	movs	r0, r3
   16ace:	4b05      	ldr	r3, [pc, #20]	; (16ae4 <configure_rtc_callbacks+0x2c>)
   16ad0:	4798      	blx	r3
}
   16ad2:	46c0      	nop			; (mov r8, r8)
   16ad4:	46bd      	mov	sp, r7
   16ad6:	bd80      	pop	{r7, pc}
   16ad8:	000168cd 	.word	0x000168cd
   16adc:	20001750 	.word	0x20001750
   16ae0:	00005731 	.word	0x00005731
   16ae4:	000057e5 	.word	0x000057e5

00016ae8 <configure_rtc_count>:
	}

	return false;
}
void configure_rtc_count(void)
{
   16ae8:	b580      	push	{r7, lr}
   16aea:	b088      	sub	sp, #32
   16aec:	af00      	add	r7, sp, #0
	volatile uint16_t temp;
	
	struct rtc_count_events config_rtc_event
   16aee:	2310      	movs	r3, #16
   16af0:	18fb      	adds	r3, r7, r3
   16af2:	0018      	movs	r0, r3
   16af4:	230b      	movs	r3, #11
   16af6:	001a      	movs	r2, r3
   16af8:	2100      	movs	r1, #0
   16afa:	4b1d      	ldr	r3, [pc, #116]	; (16b70 <configure_rtc_count+0x88>)
   16afc:	4798      	blx	r3
   16afe:	2310      	movs	r3, #16
   16b00:	18fb      	adds	r3, r7, r3
   16b02:	2201      	movs	r2, #1
   16b04:	729a      	strb	r2, [r3, #10]
		 = { .generate_event_on_periodic[(7u)] = true };
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
   16b06:	003b      	movs	r3, r7
   16b08:	0018      	movs	r0, r3
   16b0a:	4b1a      	ldr	r3, [pc, #104]	; (16b74 <configure_rtc_count+0x8c>)
   16b0c:	4798      	blx	r3

	config_rtc_count.prescaler           = RTC_MODE0_CTRLA_PRESCALER_DIV1;
   16b0e:	003b      	movs	r3, r7
   16b10:	2280      	movs	r2, #128	; 0x80
   16b12:	0052      	lsls	r2, r2, #1
   16b14:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_32BIT;
   16b16:	003b      	movs	r3, r7
   16b18:	2201      	movs	r2, #1
   16b1a:	709a      	strb	r2, [r3, #2]
	config_rtc_count.clear_on_match =true;
   16b1c:	003b      	movs	r3, r7
   16b1e:	2201      	movs	r2, #1
   16b20:	70da      	strb	r2, [r3, #3]

	/* initialize rtc */
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
   16b22:	003a      	movs	r2, r7
   16b24:	4914      	ldr	r1, [pc, #80]	; (16b78 <configure_rtc_count+0x90>)
   16b26:	4b15      	ldr	r3, [pc, #84]	; (16b7c <configure_rtc_count+0x94>)
   16b28:	0018      	movs	r0, r3
   16b2a:	4b15      	ldr	r3, [pc, #84]	; (16b80 <configure_rtc_count+0x98>)
   16b2c:	4798      	blx	r3

	/* Enable RTC events */
	config_rtc_event.generate_event_on_periodic[(7u)] = true;
   16b2e:	2310      	movs	r3, #16
   16b30:	18fb      	adds	r3, r7, r3
   16b32:	2201      	movs	r2, #1
   16b34:	729a      	strb	r2, [r3, #10]
	
	rtc_count_enable_events(&rtc_instance, &config_rtc_event);
   16b36:	2310      	movs	r3, #16
   16b38:	18fa      	adds	r2, r7, r3
   16b3a:	4b10      	ldr	r3, [pc, #64]	; (16b7c <configure_rtc_count+0x94>)
   16b3c:	0011      	movs	r1, r2
   16b3e:	0018      	movs	r0, r3
   16b40:	4b10      	ldr	r3, [pc, #64]	; (16b84 <configure_rtc_count+0x9c>)
   16b42:	4798      	blx	r3

	temp = TIME_PERIOD_1MSEC * 20u;
   16b44:	231e      	movs	r3, #30
   16b46:	18fb      	adds	r3, r7, r3
   16b48:	2214      	movs	r2, #20
   16b4a:	801a      	strh	r2, [r3, #0]

	rtc_count_set_compare(&rtc_instance,temp,RTC_COUNT_COMPARE_0);
   16b4c:	231e      	movs	r3, #30
   16b4e:	18fb      	adds	r3, r7, r3
   16b50:	881b      	ldrh	r3, [r3, #0]
   16b52:	b29b      	uxth	r3, r3
   16b54:	0019      	movs	r1, r3
   16b56:	4b09      	ldr	r3, [pc, #36]	; (16b7c <configure_rtc_count+0x94>)
   16b58:	2200      	movs	r2, #0
   16b5a:	0018      	movs	r0, r3
   16b5c:	4b0a      	ldr	r3, [pc, #40]	; (16b88 <configure_rtc_count+0xa0>)
   16b5e:	4798      	blx	r3

	/* enable rtc */
	rtc_count_enable(&rtc_instance);
   16b60:	4b06      	ldr	r3, [pc, #24]	; (16b7c <configure_rtc_count+0x94>)
   16b62:	0018      	movs	r0, r3
   16b64:	4b09      	ldr	r3, [pc, #36]	; (16b8c <configure_rtc_count+0xa4>)
   16b66:	4798      	blx	r3

}
   16b68:	46c0      	nop			; (mov r8, r8)
   16b6a:	46bd      	mov	sp, r7
   16b6c:	b008      	add	sp, #32
   16b6e:	bd80      	pop	{r7, pc}
   16b70:	00019ea1 	.word	0x00019ea1
   16b74:	0001679d 	.word	0x0001679d
   16b78:	40002000 	.word	0x40002000
   16b7c:	20001750 	.word	0x20001750
   16b80:	000055cd 	.word	0x000055cd
   16b84:	000167f9 	.word	0x000167f9
   16b88:	00005631 	.word	0x00005631
   16b8c:	000053b9 	.word	0x000053b9

00016b90 <rtc_init>:

/*! \brief Initialize RTC timer
 *
 */
void rtc_init(void)
{
   16b90:	b580      	push	{r7, lr}
   16b92:	af00      	add	r7, sp, #0
	/* Configure and enable RTC */
	configure_rtc_count();
   16b94:	4b03      	ldr	r3, [pc, #12]	; (16ba4 <rtc_init+0x14>)
   16b96:	4798      	blx	r3

	/* Configure and enable callback */
	configure_rtc_callbacks();
   16b98:	4b03      	ldr	r3, [pc, #12]	; (16ba8 <rtc_init+0x18>)
   16b9a:	4798      	blx	r3
}
   16b9c:	46c0      	nop			; (mov r8, r8)
   16b9e:	46bd      	mov	sp, r7
   16ba0:	bd80      	pop	{r7, pc}
   16ba2:	46c0      	nop			; (mov r8, r8)
   16ba4:	00016ae9 	.word	0x00016ae9
   16ba8:	00016ab9 	.word	0x00016ab9

00016bac <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
   16bac:	b580      	push	{r7, lr}
   16bae:	b086      	sub	sp, #24
   16bb0:	af00      	add	r7, sp, #0
   16bb2:	6078      	str	r0, [r7, #4]
   16bb4:	0008      	movs	r0, r1
   16bb6:	0011      	movs	r1, r2
   16bb8:	1cfb      	adds	r3, r7, #3
   16bba:	1c02      	adds	r2, r0, #0
   16bbc:	701a      	strb	r2, [r3, #0]
   16bbe:	1cbb      	adds	r3, r7, #2
   16bc0:	1c0a      	adds	r2, r1, #0
   16bc2:	701a      	strb	r2, [r3, #0]
	if (key != NULL) {
   16bc4:	687b      	ldr	r3, [r7, #4]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d01c      	beq.n	16c04 <sal_aes_setup+0x58>
		/* Setup key. */
		dec_initialized = false;
   16bca:	4b5e      	ldr	r3, [pc, #376]	; (16d44 <sal_aes_setup+0x198>)
   16bcc:	2200      	movs	r2, #0
   16bce:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
   16bd0:	4b5d      	ldr	r3, [pc, #372]	; (16d48 <sal_aes_setup+0x19c>)
   16bd2:	2202      	movs	r2, #2
   16bd4:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
   16bd6:	4a5d      	ldr	r2, [pc, #372]	; (16d4c <sal_aes_setup+0x1a0>)
   16bd8:	687b      	ldr	r3, [r7, #4]
   16bda:	0010      	movs	r0, r2
   16bdc:	0019      	movs	r1, r3
   16bde:	2310      	movs	r3, #16
   16be0:	001a      	movs	r2, r3
   16be2:	4b5b      	ldr	r3, [pc, #364]	; (16d50 <sal_aes_setup+0x1a4>)
   16be4:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   16be6:	4b5b      	ldr	r3, [pc, #364]	; (16d54 <sal_aes_setup+0x1a8>)
   16be8:	2210      	movs	r2, #16
   16bea:	701a      	strb	r2, [r3, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
   16bec:	4b5a      	ldr	r3, [pc, #360]	; (16d58 <sal_aes_setup+0x1ac>)
   16bee:	6879      	ldr	r1, [r7, #4]
   16bf0:	2210      	movs	r2, #16
   16bf2:	0018      	movs	r0, r3
   16bf4:	4b56      	ldr	r3, [pc, #344]	; (16d50 <sal_aes_setup+0x1a4>)
   16bf6:	4798      	blx	r3

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
   16bf8:	4b56      	ldr	r3, [pc, #344]	; (16d54 <sal_aes_setup+0x1a8>)
   16bfa:	2211      	movs	r2, #17
   16bfc:	0019      	movs	r1, r3
   16bfe:	2083      	movs	r0, #131	; 0x83
   16c00:	4b56      	ldr	r3, [pc, #344]	; (16d5c <sal_aes_setup+0x1b0>)
   16c02:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
   16c04:	1cbb      	adds	r3, r7, #2
   16c06:	781b      	ldrb	r3, [r3, #0]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d002      	beq.n	16c12 <sal_aes_setup+0x66>
   16c0c:	2b01      	cmp	r3, #1
   16c0e:	d016      	beq.n	16c3e <sal_aes_setup+0x92>
   16c10:	e053      	b.n	16cba <sal_aes_setup+0x10e>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
   16c12:	4b4d      	ldr	r3, [pc, #308]	; (16d48 <sal_aes_setup+0x19c>)
   16c14:	781b      	ldrb	r3, [r3, #0]
   16c16:	2b01      	cmp	r3, #1
   16c18:	d151      	bne.n	16cbe <sal_aes_setup+0x112>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   16c1a:	4b4e      	ldr	r3, [pc, #312]	; (16d54 <sal_aes_setup+0x1a8>)
   16c1c:	2210      	movs	r2, #16
   16c1e:	701a      	strb	r2, [r3, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
   16c20:	4a4d      	ldr	r2, [pc, #308]	; (16d58 <sal_aes_setup+0x1ac>)
   16c22:	4b4a      	ldr	r3, [pc, #296]	; (16d4c <sal_aes_setup+0x1a0>)
   16c24:	0010      	movs	r0, r2
   16c26:	0019      	movs	r1, r3
   16c28:	2310      	movs	r3, #16
   16c2a:	001a      	movs	r2, r3
   16c2c:	4b48      	ldr	r3, [pc, #288]	; (16d50 <sal_aes_setup+0x1a4>)
   16c2e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
   16c30:	4b48      	ldr	r3, [pc, #288]	; (16d54 <sal_aes_setup+0x1a8>)
   16c32:	2211      	movs	r2, #17
   16c34:	0019      	movs	r1, r3
   16c36:	2083      	movs	r0, #131	; 0x83
   16c38:	4b48      	ldr	r3, [pc, #288]	; (16d5c <sal_aes_setup+0x1b0>)
   16c3a:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
   16c3c:	e03f      	b.n	16cbe <sal_aes_setup+0x112>

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
   16c3e:	4b42      	ldr	r3, [pc, #264]	; (16d48 <sal_aes_setup+0x19c>)
   16c40:	781b      	ldrb	r3, [r3, #0]
   16c42:	2b01      	cmp	r3, #1
   16c44:	d03d      	beq.n	16cc2 <sal_aes_setup+0x116>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   16c46:	4b43      	ldr	r3, [pc, #268]	; (16d54 <sal_aes_setup+0x1a8>)
   16c48:	2210      	movs	r2, #16
   16c4a:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
   16c4c:	4b3d      	ldr	r3, [pc, #244]	; (16d44 <sal_aes_setup+0x198>)
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	2201      	movs	r2, #1
   16c52:	4053      	eors	r3, r2
   16c54:	b2db      	uxtb	r3, r3
   16c56:	2b00      	cmp	r3, #0
   16c58:	d01d      	beq.n	16c96 <sal_aes_setup+0xea>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
   16c5a:	4b3e      	ldr	r3, [pc, #248]	; (16d54 <sal_aes_setup+0x1a8>)
   16c5c:	2200      	movs	r2, #0
   16c5e:	701a      	strb	r2, [r3, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
   16c60:	4b3c      	ldr	r3, [pc, #240]	; (16d54 <sal_aes_setup+0x1a8>)
   16c62:	2280      	movs	r2, #128	; 0x80
   16c64:	745a      	strb	r2, [r3, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
   16c66:	4b3e      	ldr	r3, [pc, #248]	; (16d60 <sal_aes_setup+0x1b4>)
   16c68:	2201      	movs	r2, #1
   16c6a:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
   16c6c:	2308      	movs	r3, #8
   16c6e:	18fb      	adds	r3, r7, r3
   16c70:	2100      	movs	r1, #0
   16c72:	0018      	movs	r0, r3
   16c74:	4b3b      	ldr	r3, [pc, #236]	; (16d64 <sal_aes_setup+0x1b8>)
   16c76:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   16c78:	4b36      	ldr	r3, [pc, #216]	; (16d54 <sal_aes_setup+0x1a8>)
   16c7a:	2210      	movs	r2, #16
   16c7c:	701a      	strb	r2, [r3, #0]
				trx_sram_write(
   16c7e:	4b35      	ldr	r3, [pc, #212]	; (16d54 <sal_aes_setup+0x1a8>)
   16c80:	2201      	movs	r2, #1
   16c82:	0019      	movs	r1, r3
   16c84:	2083      	movs	r0, #131	; 0x83
   16c86:	4b35      	ldr	r3, [pc, #212]	; (16d5c <sal_aes_setup+0x1b0>)
   16c88:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
   16c8a:	4b37      	ldr	r3, [pc, #220]	; (16d68 <sal_aes_setup+0x1bc>)
   16c8c:	2210      	movs	r2, #16
   16c8e:	0019      	movs	r1, r3
   16c90:	2084      	movs	r0, #132	; 0x84
   16c92:	4b36      	ldr	r3, [pc, #216]	; (16d6c <sal_aes_setup+0x1c0>)
   16c94:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
   16c96:	4a30      	ldr	r2, [pc, #192]	; (16d58 <sal_aes_setup+0x1ac>)
   16c98:	4b33      	ldr	r3, [pc, #204]	; (16d68 <sal_aes_setup+0x1bc>)
   16c9a:	0010      	movs	r0, r2
   16c9c:	0019      	movs	r1, r3
   16c9e:	2310      	movs	r3, #16
   16ca0:	001a      	movs	r2, r3
   16ca2:	4b2b      	ldr	r3, [pc, #172]	; (16d50 <sal_aes_setup+0x1a4>)
   16ca4:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
   16ca6:	4b2b      	ldr	r3, [pc, #172]	; (16d54 <sal_aes_setup+0x1a8>)
   16ca8:	2211      	movs	r2, #17
   16caa:	0019      	movs	r1, r3
   16cac:	2083      	movs	r0, #131	; 0x83
   16cae:	4b2b      	ldr	r3, [pc, #172]	; (16d5c <sal_aes_setup+0x1b0>)
   16cb0:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
   16cb2:	4b24      	ldr	r3, [pc, #144]	; (16d44 <sal_aes_setup+0x198>)
   16cb4:	2201      	movs	r2, #1
   16cb6:	701a      	strb	r2, [r3, #0]
		}

		break;
   16cb8:	e003      	b.n	16cc2 <sal_aes_setup+0x116>

	default:
		return false;
   16cba:	2300      	movs	r3, #0
   16cbc:	e03d      	b.n	16d3a <sal_aes_setup+0x18e>
		break;
   16cbe:	46c0      	nop			; (mov r8, r8)
   16cc0:	e000      	b.n	16cc4 <sal_aes_setup+0x118>
		break;
   16cc2:	46c0      	nop			; (mov r8, r8)
	}

	last_dir = dir;
   16cc4:	4b20      	ldr	r3, [pc, #128]	; (16d48 <sal_aes_setup+0x19c>)
   16cc6:	1cba      	adds	r2, r7, #2
   16cc8:	7812      	ldrb	r2, [r2, #0]
   16cca:	701a      	strb	r2, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
   16ccc:	1cfb      	adds	r3, r7, #3
   16cce:	781b      	ldrb	r3, [r3, #0]
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d001      	beq.n	16cd8 <sal_aes_setup+0x12c>
   16cd4:	2b02      	cmp	r3, #2
   16cd6:	d12f      	bne.n	16d38 <sal_aes_setup+0x18c>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
   16cd8:	1cfb      	adds	r3, r7, #3
   16cda:	781b      	ldrb	r3, [r3, #0]
   16cdc:	011b      	lsls	r3, r3, #4
   16cde:	b25b      	sxtb	r3, r3
   16ce0:	2270      	movs	r2, #112	; 0x70
   16ce2:	4013      	ands	r3, r2
   16ce4:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir);
   16ce6:	1cbb      	adds	r3, r7, #2
   16ce8:	781b      	ldrb	r3, [r3, #0]
   16cea:	00db      	lsls	r3, r3, #3
   16cec:	b25b      	sxtb	r3, r3
   16cee:	2108      	movs	r1, #8
   16cf0:	400b      	ands	r3, r1
   16cf2:	b25b      	sxtb	r3, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
   16cf4:	4313      	orrs	r3, r2
   16cf6:	b25b      	sxtb	r3, r3
   16cf8:	b2da      	uxtb	r2, r3
   16cfa:	4b16      	ldr	r3, [pc, #88]	; (16d54 <sal_aes_setup+0x1a8>)
   16cfc:	701a      	strb	r2, [r3, #0]
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   16cfe:	1cfb      	adds	r3, r7, #3
   16d00:	781b      	ldrb	r3, [r3, #0]
   16d02:	011b      	lsls	r3, r3, #4
   16d04:	b25b      	sxtb	r3, r3
   16d06:	2270      	movs	r2, #112	; 0x70
   16d08:	4013      	ands	r3, r2
   16d0a:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir) |
   16d0c:	1cbb      	adds	r3, r7, #2
   16d0e:	781b      	ldrb	r3, [r3, #0]
   16d10:	00db      	lsls	r3, r3, #3
   16d12:	b25b      	sxtb	r3, r3
   16d14:	2108      	movs	r1, #8
   16d16:	400b      	ands	r3, r1
   16d18:	b25b      	sxtb	r3, r3
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   16d1a:	4313      	orrs	r3, r2
   16d1c:	b25b      	sxtb	r3, r3
				SR_MASK(SR_AES_DIR, dir) |
   16d1e:	2280      	movs	r2, #128	; 0x80
   16d20:	4252      	negs	r2, r2
   16d22:	4313      	orrs	r3, r2
   16d24:	b25b      	sxtb	r3, r3
   16d26:	b2da      	uxtb	r2, r3
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   16d28:	4b0a      	ldr	r3, [pc, #40]	; (16d54 <sal_aes_setup+0x1a8>)
   16d2a:	745a      	strb	r2, [r3, #17]
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;
   16d2c:	46c0      	nop			; (mov r8, r8)

	default:
		return (false);
	}

	setup_flag = true;
   16d2e:	4b0c      	ldr	r3, [pc, #48]	; (16d60 <sal_aes_setup+0x1b4>)
   16d30:	2201      	movs	r2, #1
   16d32:	701a      	strb	r2, [r3, #0]

	return (true);
   16d34:	2301      	movs	r3, #1
   16d36:	e000      	b.n	16d3a <sal_aes_setup+0x18e>
		return (false);
   16d38:	2300      	movs	r3, #0
}
   16d3a:	0018      	movs	r0, r3
   16d3c:	46bd      	mov	sp, r7
   16d3e:	b006      	add	sp, #24
   16d40:	bd80      	pop	{r7, pc}
   16d42:	46c0      	nop			; (mov r8, r8)
   16d44:	200008df 	.word	0x200008df
   16d48:	200004b3 	.word	0x200004b3
   16d4c:	200008f4 	.word	0x200008f4
   16d50:	00019e6b 	.word	0x00019e6b
   16d54:	200008e0 	.word	0x200008e0
   16d58:	200008e1 	.word	0x200008e1
   16d5c:	00009995 	.word	0x00009995
   16d60:	200008de 	.word	0x200008de
   16d64:	00016d71 	.word	0x00016d71
   16d68:	20000904 	.word	0x20000904
   16d6c:	00009b59 	.word	0x00009b59

00016d70 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
   16d70:	b580      	push	{r7, lr}
   16d72:	b084      	sub	sp, #16
   16d74:	af00      	add	r7, sp, #0
   16d76:	6078      	str	r0, [r7, #4]
   16d78:	6039      	str	r1, [r7, #0]
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
   16d7a:	4b1a      	ldr	r3, [pc, #104]	; (16de4 <sal_aes_wrrd+0x74>)
   16d7c:	6879      	ldr	r1, [r7, #4]
   16d7e:	2210      	movs	r2, #16
   16d80:	0018      	movs	r0, r3
   16d82:	4b19      	ldr	r3, [pc, #100]	; (16de8 <sal_aes_wrrd+0x78>)
   16d84:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
   16d86:	230f      	movs	r3, #15
   16d88:	18fb      	adds	r3, r7, r3
   16d8a:	4a18      	ldr	r2, [pc, #96]	; (16dec <sal_aes_wrrd+0x7c>)
   16d8c:	7c52      	ldrb	r2, [r2, #17]
   16d8e:	701a      	strb	r2, [r3, #0]

	if (setup_flag) {
   16d90:	4b17      	ldr	r3, [pc, #92]	; (16df0 <sal_aes_wrrd+0x80>)
   16d92:	781b      	ldrb	r3, [r3, #0]
   16d94:	2b00      	cmp	r3, #0
   16d96:	d009      	beq.n	16dac <sal_aes_wrrd+0x3c>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
   16d98:	4b14      	ldr	r3, [pc, #80]	; (16dec <sal_aes_wrrd+0x7c>)
   16d9a:	2212      	movs	r2, #18
   16d9c:	0019      	movs	r1, r3
   16d9e:	2083      	movs	r0, #131	; 0x83
   16da0:	4b14      	ldr	r3, [pc, #80]	; (16df4 <sal_aes_wrrd+0x84>)
   16da2:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
   16da4:	4b12      	ldr	r3, [pc, #72]	; (16df0 <sal_aes_wrrd+0x80>)
   16da6:	2200      	movs	r2, #0
   16da8:	701a      	strb	r2, [r3, #0]
   16daa:	e005      	b.n	16db8 <sal_aes_wrrd+0x48>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
   16dac:	4b0d      	ldr	r3, [pc, #52]	; (16de4 <sal_aes_wrrd+0x74>)
   16dae:	2211      	movs	r2, #17
   16db0:	0019      	movs	r1, r3
   16db2:	2084      	movs	r0, #132	; 0x84
   16db4:	4b0f      	ldr	r3, [pc, #60]	; (16df4 <sal_aes_wrrd+0x84>)
   16db6:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
   16db8:	683b      	ldr	r3, [r7, #0]
   16dba:	2b00      	cmp	r3, #0
   16dbc:	d005      	beq.n	16dca <sal_aes_wrrd+0x5a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
   16dbe:	4909      	ldr	r1, [pc, #36]	; (16de4 <sal_aes_wrrd+0x74>)
   16dc0:	683b      	ldr	r3, [r7, #0]
   16dc2:	2210      	movs	r2, #16
   16dc4:	0018      	movs	r0, r3
   16dc6:	4b08      	ldr	r3, [pc, #32]	; (16de8 <sal_aes_wrrd+0x78>)
   16dc8:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
   16dca:	4b08      	ldr	r3, [pc, #32]	; (16dec <sal_aes_wrrd+0x7c>)
   16dcc:	220f      	movs	r2, #15
   16dce:	18ba      	adds	r2, r7, r2
   16dd0:	7812      	ldrb	r2, [r2, #0]
   16dd2:	745a      	strb	r2, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
   16dd4:	2018      	movs	r0, #24
   16dd6:	4b08      	ldr	r3, [pc, #32]	; (16df8 <sal_aes_wrrd+0x88>)
   16dd8:	4798      	blx	r3
}
   16dda:	46c0      	nop			; (mov r8, r8)
   16ddc:	46bd      	mov	sp, r7
   16dde:	b004      	add	sp, #16
   16de0:	bd80      	pop	{r7, pc}
   16de2:	46c0      	nop			; (mov r8, r8)
   16de4:	200008e1 	.word	0x200008e1
   16de8:	00019e6b 	.word	0x00019e6b
   16dec:	200008e0 	.word	0x200008e0
   16df0:	200008de 	.word	0x200008de
   16df4:	00009d31 	.word	0x00009d31
   16df8:	00010d5d 	.word	0x00010d5d

00016dfc <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
   16dfc:	b580      	push	{r7, lr}
   16dfe:	b082      	sub	sp, #8
   16e00:	af00      	add	r7, sp, #0
   16e02:	6078      	str	r0, [r7, #4]
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
   16e04:	687b      	ldr	r3, [r7, #4]
   16e06:	2210      	movs	r2, #16
   16e08:	0019      	movs	r1, r3
   16e0a:	2084      	movs	r0, #132	; 0x84
   16e0c:	4b02      	ldr	r3, [pc, #8]	; (16e18 <sal_aes_read+0x1c>)
   16e0e:	4798      	blx	r3
			AES_BLOCKSIZE);
}
   16e10:	46c0      	nop			; (mov r8, r8)
   16e12:	46bd      	mov	sp, r7
   16e14:	b002      	add	sp, #8
   16e16:	bd80      	pop	{r7, pc}
   16e18:	00009b59 	.word	0x00009b59

00016e1c <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
   16e1c:	b580      	push	{r7, lr}
   16e1e:	b084      	sub	sp, #16
   16e20:	af00      	add	r7, sp, #0
   16e22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	681b      	ldr	r3, [r3, #0]
   16e28:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
   16e2a:	68fb      	ldr	r3, [r7, #12]
   16e2c:	691b      	ldr	r3, [r3, #16]
   16e2e:	1e5a      	subs	r2, r3, #1
   16e30:	4193      	sbcs	r3, r2
   16e32:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
   16e34:	0018      	movs	r0, r3
   16e36:	46bd      	mov	sp, r7
   16e38:	b004      	add	sp, #16
   16e3a:	bd80      	pop	{r7, pc}

00016e3c <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
   16e3c:	b580      	push	{r7, lr}
   16e3e:	b082      	sub	sp, #8
   16e40:	af00      	add	r7, sp, #0
   16e42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
   16e44:	687b      	ldr	r3, [r7, #4]
   16e46:	2200      	movs	r2, #0
   16e48:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   16e4a:	687b      	ldr	r3, [r7, #4]
   16e4c:	2200      	movs	r2, #0
   16e4e:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   16e50:	687b      	ldr	r3, [r7, #4]
   16e52:	2200      	movs	r2, #0
   16e54:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16e56:	687b      	ldr	r3, [r7, #4]
   16e58:	2200      	movs	r2, #0
   16e5a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   16e5c:	687b      	ldr	r3, [r7, #4]
   16e5e:	2200      	movs	r2, #0
   16e60:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
   16e62:	687b      	ldr	r3, [r7, #4]
   16e64:	2200      	movs	r2, #0
   16e66:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
   16e68:	687b      	ldr	r3, [r7, #4]
   16e6a:	2200      	movs	r2, #0
   16e6c:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   16e6e:	687b      	ldr	r3, [r7, #4]
   16e70:	2200      	movs	r2, #0
   16e72:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	2200      	movs	r2, #0
   16e78:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16e7a:	687b      	ldr	r3, [r7, #4]
   16e7c:	2200      	movs	r2, #0
   16e7e:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16e80:	687b      	ldr	r3, [r7, #4]
   16e82:	2200      	movs	r2, #0
   16e84:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16e86:	687b      	ldr	r3, [r7, #4]
   16e88:	2200      	movs	r2, #0
   16e8a:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	2200      	movs	r2, #0
   16e90:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
   16e92:	687b      	ldr	r3, [r7, #4]
   16e94:	2200      	movs	r2, #0
   16e96:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16e98:	687b      	ldr	r3, [r7, #4]
   16e9a:	2200      	movs	r2, #0
   16e9c:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   16e9e:	687b      	ldr	r3, [r7, #4]
   16ea0:	2200      	movs	r2, #0
   16ea2:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16ea4:	687b      	ldr	r3, [r7, #4]
   16ea6:	2200      	movs	r2, #0
   16ea8:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   16eaa:	687b      	ldr	r3, [r7, #4]
   16eac:	2200      	movs	r2, #0
   16eae:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16eb0:	687b      	ldr	r3, [r7, #4]
   16eb2:	2200      	movs	r2, #0
   16eb4:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   16eb6:	687b      	ldr	r3, [r7, #4]
   16eb8:	2200      	movs	r2, #0
   16eba:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
   16ebc:	687b      	ldr	r3, [r7, #4]
   16ebe:	2200      	movs	r2, #0
   16ec0:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16ec2:	687b      	ldr	r3, [r7, #4]
   16ec4:	2200      	movs	r2, #0
   16ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16ec8:	687b      	ldr	r3, [r7, #4]
   16eca:	2200      	movs	r2, #0
   16ecc:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
   16ece:	687b      	ldr	r3, [r7, #4]
   16ed0:	2234      	movs	r2, #52	; 0x34
   16ed2:	2100      	movs	r1, #0
   16ed4:	5499      	strb	r1, [r3, r2]
#endif

}
   16ed6:	46c0      	nop			; (mov r8, r8)
   16ed8:	46bd      	mov	sp, r7
   16eda:	b002      	add	sp, #8
   16edc:	bd80      	pop	{r7, pc}
	...

00016ee0 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
   16ee0:	b580      	push	{r7, lr}
   16ee2:	b084      	sub	sp, #16
   16ee4:	af00      	add	r7, sp, #0
   16ee6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16ee8:	687b      	ldr	r3, [r7, #4]
   16eea:	681b      	ldr	r3, [r3, #0]
   16eec:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16eee:	46c0      	nop			; (mov r8, r8)
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	0018      	movs	r0, r3
   16ef4:	4b06      	ldr	r3, [pc, #24]	; (16f10 <tc_enable+0x30>)
   16ef6:	4798      	blx	r3
   16ef8:	1e03      	subs	r3, r0, #0
   16efa:	d1f9      	bne.n	16ef0 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16efc:	68fb      	ldr	r3, [r7, #12]
   16efe:	681b      	ldr	r3, [r3, #0]
   16f00:	2202      	movs	r2, #2
   16f02:	431a      	orrs	r2, r3
   16f04:	68fb      	ldr	r3, [r7, #12]
   16f06:	601a      	str	r2, [r3, #0]
}
   16f08:	46c0      	nop			; (mov r8, r8)
   16f0a:	46bd      	mov	sp, r7
   16f0c:	b004      	add	sp, #16
   16f0e:	bd80      	pop	{r7, pc}
   16f10:	00016e1d 	.word	0x00016e1d

00016f14 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
   16f14:	b580      	push	{r7, lr}
   16f16:	b084      	sub	sp, #16
   16f18:	af00      	add	r7, sp, #0
   16f1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16f1c:	687b      	ldr	r3, [r7, #4]
   16f1e:	681b      	ldr	r3, [r3, #0]
   16f20:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16f22:	46c0      	nop			; (mov r8, r8)
   16f24:	687b      	ldr	r3, [r7, #4]
   16f26:	0018      	movs	r0, r3
   16f28:	4b0a      	ldr	r3, [pc, #40]	; (16f54 <tc_start_counter+0x40>)
   16f2a:	4798      	blx	r3
   16f2c:	1e03      	subs	r3, r0, #0
   16f2e:	d1f9      	bne.n	16f24 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16f30:	68fb      	ldr	r3, [r7, #12]
   16f32:	2200      	movs	r2, #0
   16f34:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
   16f36:	46c0      	nop			; (mov r8, r8)
   16f38:	687b      	ldr	r3, [r7, #4]
   16f3a:	0018      	movs	r0, r3
   16f3c:	4b05      	ldr	r3, [pc, #20]	; (16f54 <tc_start_counter+0x40>)
   16f3e:	4798      	blx	r3
   16f40:	1e03      	subs	r3, r0, #0
   16f42:	d1f9      	bne.n	16f38 <tc_start_counter+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   16f44:	68fb      	ldr	r3, [r7, #12]
   16f46:	2220      	movs	r2, #32
   16f48:	715a      	strb	r2, [r3, #5]
}
   16f4a:	46c0      	nop			; (mov r8, r8)
   16f4c:	46bd      	mov	sp, r7
   16f4e:	b004      	add	sp, #16
   16f50:	bd80      	pop	{r7, pc}
   16f52:	46c0      	nop			; (mov r8, r8)
   16f54:	00016e1d 	.word	0x00016e1d

00016f58 <configure_tc>:
struct tc_module tc_instance;


//! [setup]
void configure_tc(void)
{
   16f58:	b580      	push	{r7, lr}
   16f5a:	b08e      	sub	sp, #56	; 0x38
   16f5c:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
   16f5e:	4b14      	ldr	r3, [pc, #80]	; (16fb0 <configure_tc+0x58>)
   16f60:	0018      	movs	r0, r3
   16f62:	4b14      	ldr	r3, [pc, #80]	; (16fb4 <configure_tc+0x5c>)
   16f64:	4798      	blx	r3
	tc_get_config_defaults(&config_tc);
   16f66:	003b      	movs	r3, r7
   16f68:	0018      	movs	r0, r3
   16f6a:	4b13      	ldr	r3, [pc, #76]	; (16fb8 <configure_tc+0x60>)
   16f6c:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
   16f6e:	003b      	movs	r3, r7
   16f70:	2208      	movs	r2, #8
   16f72:	70da      	strb	r2, [r3, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
   16f74:	003b      	movs	r3, r7
   16f76:	2201      	movs	r2, #1
   16f78:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV4;
   16f7a:	003b      	movs	r3, r7
   16f7c:	2280      	movs	r2, #128	; 0x80
   16f7e:	0092      	lsls	r2, r2, #2
   16f80:	809a      	strh	r2, [r3, #4]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
   16f82:	003a      	movs	r2, r7
   16f84:	490d      	ldr	r1, [pc, #52]	; (16fbc <configure_tc+0x64>)
   16f86:	4b0a      	ldr	r3, [pc, #40]	; (16fb0 <configure_tc+0x58>)
   16f88:	0018      	movs	r0, r3
   16f8a:	4b0d      	ldr	r3, [pc, #52]	; (16fc0 <configure_tc+0x68>)
   16f8c:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
   16f8e:	4b08      	ldr	r3, [pc, #32]	; (16fb0 <configure_tc+0x58>)
   16f90:	0018      	movs	r0, r3
   16f92:	4b0c      	ldr	r3, [pc, #48]	; (16fc4 <configure_tc+0x6c>)
   16f94:	4798      	blx	r3
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
   16f96:	4b06      	ldr	r3, [pc, #24]	; (16fb0 <configure_tc+0x58>)
   16f98:	2100      	movs	r1, #0
   16f9a:	0018      	movs	r0, r3
   16f9c:	4b0a      	ldr	r3, [pc, #40]	; (16fc8 <configure_tc+0x70>)
   16f9e:	4798      	blx	r3
		
	/* Start timer */
	tc_start_counter(&tc_instance);
   16fa0:	4b03      	ldr	r3, [pc, #12]	; (16fb0 <configure_tc+0x58>)
   16fa2:	0018      	movs	r0, r3
   16fa4:	4b09      	ldr	r3, [pc, #36]	; (16fcc <configure_tc+0x74>)
   16fa6:	4798      	blx	r3
}
   16fa8:	46c0      	nop			; (mov r8, r8)
   16faa:	46bd      	mov	sp, r7
   16fac:	b00e      	add	sp, #56	; 0x38
   16fae:	bd80      	pop	{r7, pc}
   16fb0:	200017a0 	.word	0x200017a0
   16fb4:	00015c19 	.word	0x00015c19
   16fb8:	00016e3d 	.word	0x00016e3d
   16fbc:	43000800 	.word	0x43000800
   16fc0:	000156b9 	.word	0x000156b9
   16fc4:	00016ee1 	.word	0x00016ee1
   16fc8:	00015b59 	.word	0x00015b59
   16fcc:	00016f15 	.word	0x00016f15

00016fd0 <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

uint32_t MiWi_TickGet(void)
{
   16fd0:	b580      	push	{r7, lr}
   16fd2:	b082      	sub	sp, #8
   16fd4:	af00      	add	r7, sp, #0
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
   16fd6:	4b05      	ldr	r3, [pc, #20]	; (16fec <MiWi_TickGet+0x1c>)
   16fd8:	0018      	movs	r0, r3
   16fda:	4b05      	ldr	r3, [pc, #20]	; (16ff0 <MiWi_TickGet+0x20>)
   16fdc:	4798      	blx	r3
   16fde:	0003      	movs	r3, r0
   16fe0:	607b      	str	r3, [r7, #4]
	return count.Val;
   16fe2:	687b      	ldr	r3, [r7, #4]
   16fe4:	0018      	movs	r0, r3
   16fe6:	46bd      	mov	sp, r7
   16fe8:	b002      	add	sp, #8
   16fea:	bd80      	pop	{r7, pc}
   16fec:	200017a0 	.word	0x200017a0
   16ff0:	00015bb9 	.word	0x00015bb9

00016ff4 <register_env_sensor_udpate_callback_handler>:
int16_t gi16Disp_temperature;
uint8_t gu8Disp_humidity;
uint32_t gu32Disp_uv;
uint16_t gu16Disp_pressure;
void register_env_sensor_udpate_callback_handler(void* cb)
{
   16ff4:	b580      	push	{r7, lr}
   16ff6:	b082      	sub	sp, #8
   16ff8:	af00      	add	r7, sp, #0
   16ffa:	6078      	str	r0, [r7, #4]
	env_sensor_update_cb = cb;
   16ffc:	687a      	ldr	r2, [r7, #4]
   16ffe:	4b03      	ldr	r3, [pc, #12]	; (1700c <register_env_sensor_udpate_callback_handler+0x18>)
   17000:	601a      	str	r2, [r3, #0]
}
   17002:	46c0      	nop			; (mov r8, r8)
   17004:	46bd      	mov	sp, r7
   17006:	b002      	add	sp, #8
   17008:	bd80      	pop	{r7, pc}
   1700a:	46c0      	nop			; (mov r8, r8)
   1700c:	20000980 	.word	0x20000980

00017010 <MiWiSensorCallbackHandler>:
	cloud_mqtt_publish(gPublish_Channel,item);
	cJSON_Delete(item);
}

static void MiWiSensorCallbackHandler(environment_data_t sensor_data, unsigned char flag)
{
   17010:	b590      	push	{r4, r7, lr}
   17012:	b0ab      	sub	sp, #172	; 0xac
   17014:	af00      	add	r7, sp, #0
   17016:	1d3c      	adds	r4, r7, #4
   17018:	6020      	str	r0, [r4, #0]
   1701a:	6061      	str	r1, [r4, #4]
   1701c:	60a2      	str	r2, [r4, #8]
   1701e:	001a      	movs	r2, r3
   17020:	1cfb      	adds	r3, r7, #3
   17022:	701a      	strb	r2, [r3, #0]
	cJSON* item;
	NodeInfo node_info[4];
	int8_t cnt = 0;
   17024:	23a7      	movs	r3, #167	; 0xa7
   17026:	18fb      	adds	r3, r7, r3
   17028:	2200      	movs	r2, #0
   1702a:	701a      	strb	r2, [r3, #0]

	if (flag & TEMP_UPDATE_BIT)
   1702c:	1cfb      	adds	r3, r7, #3
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	2201      	movs	r2, #1
   17032:	4013      	ands	r3, r2
   17034:	d02a      	beq.n	1708c <MiWiSensorCallbackHandler+0x7c>
	{
		strcpy(node_info[cnt].dataType,MIWI_TEMP_DATATYPE_NAME);
   17036:	23a7      	movs	r3, #167	; 0xa7
   17038:	18fb      	adds	r3, r7, r3
   1703a:	2200      	movs	r2, #0
   1703c:	569a      	ldrsb	r2, [r3, r2]
   1703e:	2310      	movs	r3, #16
   17040:	18f9      	adds	r1, r7, r3
   17042:	0013      	movs	r3, r2
   17044:	00db      	lsls	r3, r3, #3
   17046:	189b      	adds	r3, r3, r2
   17048:	009b      	lsls	r3, r3, #2
   1704a:	18ca      	adds	r2, r1, r3
   1704c:	4b4f      	ldr	r3, [pc, #316]	; (1718c <MiWiSensorCallbackHandler+0x17c>)
   1704e:	0010      	movs	r0, r2
   17050:	0019      	movs	r1, r3
   17052:	230c      	movs	r3, #12
   17054:	001a      	movs	r2, r3
   17056:	4b4e      	ldr	r3, [pc, #312]	; (17190 <MiWiSensorCallbackHandler+0x180>)
   17058:	4798      	blx	r3
		node_info[cnt].value = miwiNodeTemp;
   1705a:	23a7      	movs	r3, #167	; 0xa7
   1705c:	18fb      	adds	r3, r7, r3
   1705e:	2200      	movs	r2, #0
   17060:	569a      	ldrsb	r2, [r3, r2]
   17062:	4b4c      	ldr	r3, [pc, #304]	; (17194 <MiWiSensorCallbackHandler+0x184>)
   17064:	6819      	ldr	r1, [r3, #0]
   17066:	2310      	movs	r3, #16
   17068:	18f8      	adds	r0, r7, r3
   1706a:	0013      	movs	r3, r2
   1706c:	00db      	lsls	r3, r3, #3
   1706e:	189b      	adds	r3, r3, r2
   17070:	009b      	lsls	r3, r3, #2
   17072:	18c3      	adds	r3, r0, r3
   17074:	3320      	adds	r3, #32
   17076:	6019      	str	r1, [r3, #0]
		cnt++;
   17078:	23a7      	movs	r3, #167	; 0xa7
   1707a:	18fb      	adds	r3, r7, r3
   1707c:	781b      	ldrb	r3, [r3, #0]
   1707e:	b25b      	sxtb	r3, r3
   17080:	b2db      	uxtb	r3, r3
   17082:	3301      	adds	r3, #1
   17084:	b2da      	uxtb	r2, r3
   17086:	23a7      	movs	r3, #167	; 0xa7
   17088:	18fb      	adds	r3, r7, r3
   1708a:	701a      	strb	r2, [r3, #0]
	}
	if (flag & UV_UPDATE_BIT)
   1708c:	1cfb      	adds	r3, r7, #3
   1708e:	781b      	ldrb	r3, [r3, #0]
   17090:	2204      	movs	r2, #4
   17092:	4013      	ands	r3, r2
   17094:	d02a      	beq.n	170ec <MiWiSensorCallbackHandler+0xdc>
	{
		strcpy(node_info[cnt].dataType,MIWI_RSSI_DATATYPE_NAME);
   17096:	23a7      	movs	r3, #167	; 0xa7
   17098:	18fb      	adds	r3, r7, r3
   1709a:	2200      	movs	r2, #0
   1709c:	569a      	ldrsb	r2, [r3, r2]
   1709e:	2310      	movs	r3, #16
   170a0:	18f9      	adds	r1, r7, r3
   170a2:	0013      	movs	r3, r2
   170a4:	00db      	lsls	r3, r3, #3
   170a6:	189b      	adds	r3, r3, r2
   170a8:	009b      	lsls	r3, r3, #2
   170aa:	18ca      	adds	r2, r1, r3
   170ac:	4b3a      	ldr	r3, [pc, #232]	; (17198 <MiWiSensorCallbackHandler+0x188>)
   170ae:	0010      	movs	r0, r2
   170b0:	0019      	movs	r1, r3
   170b2:	2305      	movs	r3, #5
   170b4:	001a      	movs	r2, r3
   170b6:	4b36      	ldr	r3, [pc, #216]	; (17190 <MiWiSensorCallbackHandler+0x180>)
   170b8:	4798      	blx	r3
		node_info[cnt].value = miwiNodeRssi;
   170ba:	23a7      	movs	r3, #167	; 0xa7
   170bc:	18fb      	adds	r3, r7, r3
   170be:	2200      	movs	r2, #0
   170c0:	569a      	ldrsb	r2, [r3, r2]
   170c2:	4b36      	ldr	r3, [pc, #216]	; (1719c <MiWiSensorCallbackHandler+0x18c>)
   170c4:	6819      	ldr	r1, [r3, #0]
   170c6:	2310      	movs	r3, #16
   170c8:	18f8      	adds	r0, r7, r3
   170ca:	0013      	movs	r3, r2
   170cc:	00db      	lsls	r3, r3, #3
   170ce:	189b      	adds	r3, r3, r2
   170d0:	009b      	lsls	r3, r3, #2
   170d2:	18c3      	adds	r3, r0, r3
   170d4:	3320      	adds	r3, #32
   170d6:	6019      	str	r1, [r3, #0]
		cnt++;
   170d8:	23a7      	movs	r3, #167	; 0xa7
   170da:	18fb      	adds	r3, r7, r3
   170dc:	781b      	ldrb	r3, [r3, #0]
   170de:	b25b      	sxtb	r3, r3
   170e0:	b2db      	uxtb	r3, r3
   170e2:	3301      	adds	r3, #1
   170e4:	b2da      	uxtb	r2, r3
   170e6:	23a7      	movs	r3, #167	; 0xa7
   170e8:	18fb      	adds	r3, r7, r3
   170ea:	701a      	strb	r2, [r3, #0]
	}
	if (flag & PRESSURE_UPDATE_BIT)
   170ec:	1cfb      	adds	r3, r7, #3
   170ee:	781b      	ldrb	r3, [r3, #0]
   170f0:	2208      	movs	r2, #8
   170f2:	4013      	ands	r3, r2
   170f4:	d02a      	beq.n	1714c <MiWiSensorCallbackHandler+0x13c>
	{
		strcpy(node_info[cnt].dataType,MIWI_BATTERY_DATATYPE_NAME);
   170f6:	23a7      	movs	r3, #167	; 0xa7
   170f8:	18fb      	adds	r3, r7, r3
   170fa:	2200      	movs	r2, #0
   170fc:	569a      	ldrsb	r2, [r3, r2]
   170fe:	2310      	movs	r3, #16
   17100:	18f9      	adds	r1, r7, r3
   17102:	0013      	movs	r3, r2
   17104:	00db      	lsls	r3, r3, #3
   17106:	189b      	adds	r3, r3, r2
   17108:	009b      	lsls	r3, r3, #2
   1710a:	18ca      	adds	r2, r1, r3
   1710c:	4b24      	ldr	r3, [pc, #144]	; (171a0 <MiWiSensorCallbackHandler+0x190>)
   1710e:	0010      	movs	r0, r2
   17110:	0019      	movs	r1, r3
   17112:	2308      	movs	r3, #8
   17114:	001a      	movs	r2, r3
   17116:	4b1e      	ldr	r3, [pc, #120]	; (17190 <MiWiSensorCallbackHandler+0x180>)
   17118:	4798      	blx	r3
		node_info[cnt].value = miwiNodeBatteryStatus;
   1711a:	23a7      	movs	r3, #167	; 0xa7
   1711c:	18fb      	adds	r3, r7, r3
   1711e:	2200      	movs	r2, #0
   17120:	569a      	ldrsb	r2, [r3, r2]
   17122:	4b20      	ldr	r3, [pc, #128]	; (171a4 <MiWiSensorCallbackHandler+0x194>)
   17124:	6819      	ldr	r1, [r3, #0]
   17126:	2310      	movs	r3, #16
   17128:	18f8      	adds	r0, r7, r3
   1712a:	0013      	movs	r3, r2
   1712c:	00db      	lsls	r3, r3, #3
   1712e:	189b      	adds	r3, r3, r2
   17130:	009b      	lsls	r3, r3, #2
   17132:	18c3      	adds	r3, r0, r3
   17134:	3320      	adds	r3, #32
   17136:	6019      	str	r1, [r3, #0]
		cnt++;
   17138:	23a7      	movs	r3, #167	; 0xa7
   1713a:	18fb      	adds	r3, r7, r3
   1713c:	781b      	ldrb	r3, [r3, #0]
   1713e:	b25b      	sxtb	r3, r3
   17140:	b2db      	uxtb	r3, r3
   17142:	3301      	adds	r3, #1
   17144:	b2da      	uxtb	r2, r3
   17146:	23a7      	movs	r3, #167	; 0xa7
   17148:	18fb      	adds	r3, r7, r3
   1714a:	701a      	strb	r2, [r3, #0]
	}
	
	item = iot_message_reportInfo(DEVICE_TYPE, gAwsMqttClientId, cnt, &node_info);
   1714c:	23a7      	movs	r3, #167	; 0xa7
   1714e:	18fb      	adds	r3, r7, r3
   17150:	2200      	movs	r2, #0
   17152:	569a      	ldrsb	r2, [r3, r2]
   17154:	2310      	movs	r3, #16
   17156:	18fb      	adds	r3, r7, r3
   17158:	4913      	ldr	r1, [pc, #76]	; (171a8 <MiWiSensorCallbackHandler+0x198>)
   1715a:	4814      	ldr	r0, [pc, #80]	; (171ac <MiWiSensorCallbackHandler+0x19c>)
   1715c:	4c14      	ldr	r4, [pc, #80]	; (171b0 <MiWiSensorCallbackHandler+0x1a0>)
   1715e:	47a0      	blx	r4
   17160:	0003      	movs	r3, r0
   17162:	22a0      	movs	r2, #160	; 0xa0
   17164:	18ba      	adds	r2, r7, r2
   17166:	6013      	str	r3, [r2, #0]
	cloud_mqtt_publish(gPublish_Channel,item);
   17168:	23a0      	movs	r3, #160	; 0xa0
   1716a:	18fb      	adds	r3, r7, r3
   1716c:	681a      	ldr	r2, [r3, #0]
   1716e:	4b11      	ldr	r3, [pc, #68]	; (171b4 <MiWiSensorCallbackHandler+0x1a4>)
   17170:	0011      	movs	r1, r2
   17172:	0018      	movs	r0, r3
   17174:	4b10      	ldr	r3, [pc, #64]	; (171b8 <MiWiSensorCallbackHandler+0x1a8>)
   17176:	4798      	blx	r3
	cJSON_Delete(item);
   17178:	23a0      	movs	r3, #160	; 0xa0
   1717a:	18fb      	adds	r3, r7, r3
   1717c:	681b      	ldr	r3, [r3, #0]
   1717e:	0018      	movs	r0, r3
   17180:	4b0e      	ldr	r3, [pc, #56]	; (171bc <MiWiSensorCallbackHandler+0x1ac>)
   17182:	4798      	blx	r3
}
   17184:	46c0      	nop			; (mov r8, r8)
   17186:	46bd      	mov	sp, r7
   17188:	b02b      	add	sp, #172	; 0xac
   1718a:	bd90      	pop	{r4, r7, pc}
   1718c:	0001cf88 	.word	0x0001cf88
   17190:	00019e6b 	.word	0x00019e6b
   17194:	200016c8 	.word	0x200016c8
   17198:	0001cf94 	.word	0x0001cf94
   1719c:	20001604 	.word	0x20001604
   171a0:	0001cf9c 	.word	0x0001cf9c
   171a4:	20001610 	.word	0x20001610
   171a8:	200004b8 	.word	0x200004b8
   171ac:	0001cf5c 	.word	0x0001cf5c
   171b0:	00010b79 	.word	0x00010b79
   171b4:	20000c04 	.word	0x20000c04
   171b8:	0000b5e5 	.word	0x0000b5e5
   171bc:	0000a075 	.word	0x0000a075

000171c0 <start_AP_app>:
	}
	return;
}

static void start_AP_app(void)
{
   171c0:	b580      	push	{r7, lr}
   171c2:	b086      	sub	sp, #24
   171c4:	af00      	add	r7, sp, #0
	struct sockaddr_in	addr;
	int ret = -1;
   171c6:	2301      	movs	r3, #1
   171c8:	425b      	negs	r3, r3
   171ca:	617b      	str	r3, [r7, #20]
	
	/* TCP Server. */
	if(provServerSocket == -1) {
   171cc:	4b39      	ldr	r3, [pc, #228]	; (172b4 <start_AP_app+0xf4>)
   171ce:	781b      	ldrb	r3, [r3, #0]
   171d0:	b25b      	sxtb	r3, r3
   171d2:	3301      	adds	r3, #1
   171d4:	d162      	bne.n	1729c <start_AP_app+0xdc>
		if((provServerSocket = socket(AF_INET, SOCK_STREAM, 0)) >= 0) {
   171d6:	2200      	movs	r2, #0
   171d8:	2101      	movs	r1, #1
   171da:	2002      	movs	r0, #2
   171dc:	4b36      	ldr	r3, [pc, #216]	; (172b8 <start_AP_app+0xf8>)
   171de:	4798      	blx	r3
   171e0:	0003      	movs	r3, r0
   171e2:	001a      	movs	r2, r3
   171e4:	4b33      	ldr	r3, [pc, #204]	; (172b4 <start_AP_app+0xf4>)
   171e6:	701a      	strb	r2, [r3, #0]
   171e8:	4b32      	ldr	r3, [pc, #200]	; (172b4 <start_AP_app+0xf4>)
   171ea:	781b      	ldrb	r3, [r3, #0]
   171ec:	b25b      	sxtb	r3, r3
   171ee:	2b00      	cmp	r3, #0
   171f0:	db48      	blt.n	17284 <start_AP_app+0xc4>
			// Initialize socket address structure.
			addr.sin_family      = AF_INET;
   171f2:	1d3b      	adds	r3, r7, #4
   171f4:	2202      	movs	r2, #2
   171f6:	801a      	strh	r2, [r3, #0]
			addr.sin_port        = _htons(AP_TCP_SERVER_PORT);
   171f8:	1d3b      	adds	r3, r7, #4
   171fa:	4a30      	ldr	r2, [pc, #192]	; (172bc <start_AP_app+0xfc>)
   171fc:	805a      	strh	r2, [r3, #2]
			addr.sin_addr.s_addr = 0;
   171fe:	1d3b      	adds	r3, r7, #4
   17200:	2200      	movs	r2, #0
   17202:	605a      	str	r2, [r3, #4]

			if((ret = bind(provServerSocket, (struct sockaddr*)&addr, sizeof(addr))) == 0) {
   17204:	4b2b      	ldr	r3, [pc, #172]	; (172b4 <start_AP_app+0xf4>)
   17206:	781b      	ldrb	r3, [r3, #0]
   17208:	b25b      	sxtb	r3, r3
   1720a:	1d39      	adds	r1, r7, #4
   1720c:	2210      	movs	r2, #16
   1720e:	0018      	movs	r0, r3
   17210:	4b2b      	ldr	r3, [pc, #172]	; (172c0 <start_AP_app+0x100>)
   17212:	4798      	blx	r3
   17214:	0003      	movs	r3, r0
   17216:	617b      	str	r3, [r7, #20]
   17218:	697b      	ldr	r3, [r7, #20]
   1721a:	2b00      	cmp	r3, #0
   1721c:	d10b      	bne.n	17236 <start_AP_app+0x76>
				M2M_INFO("[AP] TCP socket bind success!\r\n");
   1721e:	4b29      	ldr	r3, [pc, #164]	; (172c4 <start_AP_app+0x104>)
   17220:	0018      	movs	r0, r3
   17222:	4b29      	ldr	r3, [pc, #164]	; (172c8 <start_AP_app+0x108>)
   17224:	4798      	blx	r3
   17226:	4b29      	ldr	r3, [pc, #164]	; (172cc <start_AP_app+0x10c>)
   17228:	0018      	movs	r0, r3
   1722a:	4b29      	ldr	r3, [pc, #164]	; (172d0 <start_AP_app+0x110>)
   1722c:	4798      	blx	r3
   1722e:	200d      	movs	r0, #13
   17230:	4b28      	ldr	r3, [pc, #160]	; (172d4 <start_AP_app+0x114>)
   17232:	4798      	blx	r3
   17234:	e03a      	b.n	172ac <start_AP_app+0xec>
			}
			else {
				M2M_INFO("[AP] Bind Failed. Error code = %d\r\n", ret);
   17236:	4b23      	ldr	r3, [pc, #140]	; (172c4 <start_AP_app+0x104>)
   17238:	0018      	movs	r0, r3
   1723a:	4b23      	ldr	r3, [pc, #140]	; (172c8 <start_AP_app+0x108>)
   1723c:	4798      	blx	r3
   1723e:	697a      	ldr	r2, [r7, #20]
   17240:	4b25      	ldr	r3, [pc, #148]	; (172d8 <start_AP_app+0x118>)
   17242:	0011      	movs	r1, r2
   17244:	0018      	movs	r0, r3
   17246:	4b20      	ldr	r3, [pc, #128]	; (172c8 <start_AP_app+0x108>)
   17248:	4798      	blx	r3
   1724a:	200d      	movs	r0, #13
   1724c:	4b21      	ldr	r3, [pc, #132]	; (172d4 <start_AP_app+0x114>)
   1724e:	4798      	blx	r3
				close(provServerSocket);
   17250:	4b18      	ldr	r3, [pc, #96]	; (172b4 <start_AP_app+0xf4>)
   17252:	781b      	ldrb	r3, [r3, #0]
   17254:	b25b      	sxtb	r3, r3
   17256:	0018      	movs	r0, r3
   17258:	4b20      	ldr	r3, [pc, #128]	; (172dc <start_AP_app+0x11c>)
   1725a:	4798      	blx	r3
				M2M_INFO("[AP] TCP server socket %d closed!\r\n", provServerSocket);
   1725c:	4b19      	ldr	r3, [pc, #100]	; (172c4 <start_AP_app+0x104>)
   1725e:	0018      	movs	r0, r3
   17260:	4b19      	ldr	r3, [pc, #100]	; (172c8 <start_AP_app+0x108>)
   17262:	4798      	blx	r3
   17264:	4b13      	ldr	r3, [pc, #76]	; (172b4 <start_AP_app+0xf4>)
   17266:	781b      	ldrb	r3, [r3, #0]
   17268:	b25b      	sxtb	r3, r3
   1726a:	001a      	movs	r2, r3
   1726c:	4b1c      	ldr	r3, [pc, #112]	; (172e0 <start_AP_app+0x120>)
   1726e:	0011      	movs	r1, r2
   17270:	0018      	movs	r0, r3
   17272:	4b15      	ldr	r3, [pc, #84]	; (172c8 <start_AP_app+0x108>)
   17274:	4798      	blx	r3
   17276:	200d      	movs	r0, #13
   17278:	4b16      	ldr	r3, [pc, #88]	; (172d4 <start_AP_app+0x114>)
   1727a:	4798      	blx	r3
				provServerSocket = -1;
   1727c:	4b0d      	ldr	r3, [pc, #52]	; (172b4 <start_AP_app+0xf4>)
   1727e:	22ff      	movs	r2, #255	; 0xff
   17280:	701a      	strb	r2, [r3, #0]
   17282:	e013      	b.n	172ac <start_AP_app+0xec>
			}
		}
		else {
			M2M_INFO("[AP] TCP Server Socket Creation Failed\r\n");
   17284:	4b0f      	ldr	r3, [pc, #60]	; (172c4 <start_AP_app+0x104>)
   17286:	0018      	movs	r0, r3
   17288:	4b0f      	ldr	r3, [pc, #60]	; (172c8 <start_AP_app+0x108>)
   1728a:	4798      	blx	r3
   1728c:	4b15      	ldr	r3, [pc, #84]	; (172e4 <start_AP_app+0x124>)
   1728e:	0018      	movs	r0, r3
   17290:	4b0f      	ldr	r3, [pc, #60]	; (172d0 <start_AP_app+0x110>)
   17292:	4798      	blx	r3
   17294:	200d      	movs	r0, #13
   17296:	4b0f      	ldr	r3, [pc, #60]	; (172d4 <start_AP_app+0x114>)
   17298:	4798      	blx	r3
   1729a:	e007      	b.n	172ac <start_AP_app+0xec>
			return;
		}
	}
	else {
		accept(provServerSocket, NULL, 0);
   1729c:	4b05      	ldr	r3, [pc, #20]	; (172b4 <start_AP_app+0xf4>)
   1729e:	781b      	ldrb	r3, [r3, #0]
   172a0:	b25b      	sxtb	r3, r3
   172a2:	2200      	movs	r2, #0
   172a4:	2100      	movs	r1, #0
   172a6:	0018      	movs	r0, r3
   172a8:	4b0f      	ldr	r3, [pc, #60]	; (172e8 <start_AP_app+0x128>)
   172aa:	4798      	blx	r3
	}
}
   172ac:	46bd      	mov	sp, r7
   172ae:	b006      	add	sp, #24
   172b0:	bd80      	pop	{r7, pc}
   172b2:	46c0      	nop			; (mov r8, r8)
   172b4:	2000051d 	.word	0x2000051d
   172b8:	00004c51 	.word	0x00004c51
   172bc:	ffffc322 	.word	0xffffc322
   172c0:	00004e61 	.word	0x00004e61
   172c4:	0001cfcc 	.word	0x0001cfcc
   172c8:	0001a001 	.word	0x0001a001
   172cc:	0001cfd8 	.word	0x0001cfd8
   172d0:	0001a11d 	.word	0x0001a11d
   172d4:	0001a035 	.word	0x0001a035
   172d8:	0001cff8 	.word	0x0001cff8
   172dc:	00004fb5 	.word	0x00004fb5
   172e0:	0001d01c 	.word	0x0001d01c
   172e4:	0001d040 	.word	0x0001d040
   172e8:	00004f5d 	.word	0x00004f5d

000172ec <bin2hex>:
	
}


static const char* bin2hex(const void* data, size_t data_size)
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b084      	sub	sp, #16
   172f0:	af00      	add	r7, sp, #0
   172f2:	6078      	str	r0, [r7, #4]
   172f4:	6039      	str	r1, [r7, #0]
	static char buf[256];
	static char hex[] = "0123456789abcdef";
	const uint8_t* data8 = data;
   172f6:	687b      	ldr	r3, [r7, #4]
   172f8:	60fb      	str	r3, [r7, #12]
	
	if (data_size*2 > sizeof(buf)-1)
   172fa:	683b      	ldr	r3, [r7, #0]
   172fc:	005b      	lsls	r3, r3, #1
   172fe:	2bff      	cmp	r3, #255	; 0xff
   17300:	d901      	bls.n	17306 <bin2hex+0x1a>
	return "[buf too small]";
   17302:	4b18      	ldr	r3, [pc, #96]	; (17364 <bin2hex+0x78>)
   17304:	e029      	b.n	1735a <bin2hex+0x6e>
	
	for (size_t i = 0; i < data_size; i++)
   17306:	2300      	movs	r3, #0
   17308:	60bb      	str	r3, [r7, #8]
   1730a:	e01c      	b.n	17346 <bin2hex+0x5a>
	{
		buf[i*2 + 0] = hex[(*data8) >> 4];
   1730c:	68bb      	ldr	r3, [r7, #8]
   1730e:	005b      	lsls	r3, r3, #1
   17310:	68fa      	ldr	r2, [r7, #12]
   17312:	7812      	ldrb	r2, [r2, #0]
   17314:	0912      	lsrs	r2, r2, #4
   17316:	b2d2      	uxtb	r2, r2
   17318:	0011      	movs	r1, r2
   1731a:	4a13      	ldr	r2, [pc, #76]	; (17368 <bin2hex+0x7c>)
   1731c:	5c51      	ldrb	r1, [r2, r1]
   1731e:	4a13      	ldr	r2, [pc, #76]	; (1736c <bin2hex+0x80>)
   17320:	54d1      	strb	r1, [r2, r3]
		buf[i*2 + 1] = hex[(*data8) & 0xF];
   17322:	68bb      	ldr	r3, [r7, #8]
   17324:	005b      	lsls	r3, r3, #1
   17326:	3301      	adds	r3, #1
   17328:	68fa      	ldr	r2, [r7, #12]
   1732a:	7812      	ldrb	r2, [r2, #0]
   1732c:	0011      	movs	r1, r2
   1732e:	220f      	movs	r2, #15
   17330:	400a      	ands	r2, r1
   17332:	490d      	ldr	r1, [pc, #52]	; (17368 <bin2hex+0x7c>)
   17334:	5c89      	ldrb	r1, [r1, r2]
   17336:	4a0d      	ldr	r2, [pc, #52]	; (1736c <bin2hex+0x80>)
   17338:	54d1      	strb	r1, [r2, r3]
		data8++;
   1733a:	68fb      	ldr	r3, [r7, #12]
   1733c:	3301      	adds	r3, #1
   1733e:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < data_size; i++)
   17340:	68bb      	ldr	r3, [r7, #8]
   17342:	3301      	adds	r3, #1
   17344:	60bb      	str	r3, [r7, #8]
   17346:	68ba      	ldr	r2, [r7, #8]
   17348:	683b      	ldr	r3, [r7, #0]
   1734a:	429a      	cmp	r2, r3
   1734c:	d3de      	bcc.n	1730c <bin2hex+0x20>
	}
	buf[data_size*2] = 0;
   1734e:	683b      	ldr	r3, [r7, #0]
   17350:	005b      	lsls	r3, r3, #1
   17352:	4a06      	ldr	r2, [pc, #24]	; (1736c <bin2hex+0x80>)
   17354:	2100      	movs	r1, #0
   17356:	54d1      	strb	r1, [r2, r3]
	
	return buf;
   17358:	4b04      	ldr	r3, [pc, #16]	; (1736c <bin2hex+0x80>)
}
   1735a:	0018      	movs	r0, r3
   1735c:	46bd      	mov	sp, r7
   1735e:	b004      	add	sp, #16
   17360:	bd80      	pop	{r7, pc}
   17362:	46c0      	nop			; (mov r8, r8)
   17364:	0001d0d0 	.word	0x0001d0d0
   17368:	20000520 	.word	0x20000520
   1736c:	20000988 	.word	0x20000988

00017370 <eccPrintInfo>:

static int eccPrintInfo(void)
{
   17370:	b590      	push	{r4, r7, lr}
   17372:	b085      	sub	sp, #20
   17374:	af00      	add	r7, sp, #0
	ATCA_STATUS atca_status;
	uint8_t sn[9];
	uint8_t dev_rev[4];

	atca_status = atcab_read_serial_number(sn);
   17376:	230f      	movs	r3, #15
   17378:	18fc      	adds	r4, r7, r3
   1737a:	1d3b      	adds	r3, r7, #4
   1737c:	0018      	movs	r0, r3
   1737e:	4b26      	ldr	r3, [pc, #152]	; (17418 <eccPrintInfo+0xa8>)
   17380:	4798      	blx	r3
   17382:	0003      	movs	r3, r0
   17384:	7023      	strb	r3, [r4, #0]
	if (atca_status)
   17386:	230f      	movs	r3, #15
   17388:	18fb      	adds	r3, r7, r3
   1738a:	781b      	ldrb	r3, [r3, #0]
   1738c:	2b00      	cmp	r3, #0
   1738e:	d00b      	beq.n	173a8 <eccPrintInfo+0x38>
	{
		printf("atcab_read_serial_number() failed with ret=0x%08X\r\n", atca_status);
   17390:	230f      	movs	r3, #15
   17392:	18fb      	adds	r3, r7, r3
   17394:	781a      	ldrb	r2, [r3, #0]
   17396:	4b21      	ldr	r3, [pc, #132]	; (1741c <eccPrintInfo+0xac>)
   17398:	0011      	movs	r1, r2
   1739a:	0018      	movs	r0, r3
   1739c:	4b20      	ldr	r3, [pc, #128]	; (17420 <eccPrintInfo+0xb0>)
   1739e:	4798      	blx	r3
		return atca_status;
   173a0:	230f      	movs	r3, #15
   173a2:	18fb      	adds	r3, r7, r3
   173a4:	781b      	ldrb	r3, [r3, #0]
   173a6:	e033      	b.n	17410 <eccPrintInfo+0xa0>
	}
	
	atca_status = atcab_info(dev_rev);
   173a8:	230f      	movs	r3, #15
   173aa:	18fc      	adds	r4, r7, r3
   173ac:	003b      	movs	r3, r7
   173ae:	0018      	movs	r0, r3
   173b0:	4b1c      	ldr	r3, [pc, #112]	; (17424 <eccPrintInfo+0xb4>)
   173b2:	4798      	blx	r3
   173b4:	0003      	movs	r3, r0
   173b6:	7023      	strb	r3, [r4, #0]
	if (atca_status)
   173b8:	230f      	movs	r3, #15
   173ba:	18fb      	adds	r3, r7, r3
   173bc:	781b      	ldrb	r3, [r3, #0]
   173be:	2b00      	cmp	r3, #0
   173c0:	d00b      	beq.n	173da <eccPrintInfo+0x6a>
	{
		printf("atcab_info() failed with ret=0x%08X\r\n", atca_status);
   173c2:	230f      	movs	r3, #15
   173c4:	18fb      	adds	r3, r7, r3
   173c6:	781a      	ldrb	r2, [r3, #0]
   173c8:	4b17      	ldr	r3, [pc, #92]	; (17428 <eccPrintInfo+0xb8>)
   173ca:	0011      	movs	r1, r2
   173cc:	0018      	movs	r0, r3
   173ce:	4b14      	ldr	r3, [pc, #80]	; (17420 <eccPrintInfo+0xb0>)
   173d0:	4798      	blx	r3
		return atca_status;
   173d2:	230f      	movs	r3, #15
   173d4:	18fb      	adds	r3, r7, r3
   173d6:	781b      	ldrb	r3, [r3, #0]
   173d8:	e01a      	b.n	17410 <eccPrintInfo+0xa0>
	}

	printf("Crypto Device:\r\n");
   173da:	4b14      	ldr	r3, [pc, #80]	; (1742c <eccPrintInfo+0xbc>)
   173dc:	0018      	movs	r0, r3
   173de:	4b14      	ldr	r3, [pc, #80]	; (17430 <eccPrintInfo+0xc0>)
   173e0:	4798      	blx	r3
	printf("  SN:          %s\r\n", bin2hex(sn, sizeof(sn)));
   173e2:	1d3b      	adds	r3, r7, #4
   173e4:	2109      	movs	r1, #9
   173e6:	0018      	movs	r0, r3
   173e8:	4b12      	ldr	r3, [pc, #72]	; (17434 <eccPrintInfo+0xc4>)
   173ea:	4798      	blx	r3
   173ec:	0002      	movs	r2, r0
   173ee:	4b12      	ldr	r3, [pc, #72]	; (17438 <eccPrintInfo+0xc8>)
   173f0:	0011      	movs	r1, r2
   173f2:	0018      	movs	r0, r3
   173f4:	4b0a      	ldr	r3, [pc, #40]	; (17420 <eccPrintInfo+0xb0>)
   173f6:	4798      	blx	r3
	printf("  DevRev:      %s\r\n", bin2hex(dev_rev, sizeof(dev_rev)));
   173f8:	003b      	movs	r3, r7
   173fa:	2104      	movs	r1, #4
   173fc:	0018      	movs	r0, r3
   173fe:	4b0d      	ldr	r3, [pc, #52]	; (17434 <eccPrintInfo+0xc4>)
   17400:	4798      	blx	r3
   17402:	0002      	movs	r2, r0
   17404:	4b0d      	ldr	r3, [pc, #52]	; (1743c <eccPrintInfo+0xcc>)
   17406:	0011      	movs	r1, r2
   17408:	0018      	movs	r0, r3
   1740a:	4b05      	ldr	r3, [pc, #20]	; (17420 <eccPrintInfo+0xb0>)
   1740c:	4798      	blx	r3

	return 0;
   1740e:	2300      	movs	r3, #0
}
   17410:	0018      	movs	r0, r3
   17412:	46bd      	mov	sp, r7
   17414:	b005      	add	sp, #20
   17416:	bd90      	pop	{r4, r7, pc}
   17418:	0000c705 	.word	0x0000c705
   1741c:	0001d0e0 	.word	0x0001d0e0
   17420:	0001a001 	.word	0x0001a001
   17424:	0000c01d 	.word	0x0000c01d
   17428:	0001d114 	.word	0x0001d114
   1742c:	0001d13c 	.word	0x0001d13c
   17430:	0001a11d 	.word	0x0001a11d
   17434:	000172ed 	.word	0x000172ed
   17438:	0001d14c 	.word	0x0001d14c
   1743c:	0001d160 	.word	0x0001d160

00017440 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   17440:	b590      	push	{r4, r7, lr}
   17442:	b087      	sub	sp, #28
   17444:	af02      	add	r7, sp, #8
   17446:	0002      	movs	r2, r0
   17448:	6039      	str	r1, [r7, #0]
   1744a:	1dfb      	adds	r3, r7, #7
   1744c:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   1744e:	1dfb      	adds	r3, r7, #7
   17450:	781b      	ldrb	r3, [r3, #0]
   17452:	2b2c      	cmp	r3, #44	; 0x2c
   17454:	d004      	beq.n	17460 <wifi_cb+0x20>
   17456:	2b32      	cmp	r3, #50	; 0x32
   17458:	d02a      	beq.n	174b0 <wifi_cb+0x70>
   1745a:	2b1b      	cmp	r3, #27
   1745c:	d04d      	beq.n	174fa <wifi_cb+0xba>
		wifi_states = WIFI_TASK_CONNECT_CLOUD;
	}

	default:
	{
		break;
   1745e:	e058      	b.n	17512 <wifi_cb+0xd2>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   17460:	683b      	ldr	r3, [r7, #0]
   17462:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   17464:	68fb      	ldr	r3, [r7, #12]
   17466:	781b      	ldrb	r3, [r3, #0]
   17468:	2b01      	cmp	r3, #1
   1746a:	d106      	bne.n	1747a <wifi_cb+0x3a>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
   1746c:	4b2b      	ldr	r3, [pc, #172]	; (1751c <wifi_cb+0xdc>)
   1746e:	0018      	movs	r0, r3
   17470:	4b2b      	ldr	r3, [pc, #172]	; (17520 <wifi_cb+0xe0>)
   17472:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   17474:	4b2b      	ldr	r3, [pc, #172]	; (17524 <wifi_cb+0xe4>)
   17476:	4798      	blx	r3
		break;
   17478:	e04a      	b.n	17510 <wifi_cb+0xd0>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1747a:	68fb      	ldr	r3, [r7, #12]
   1747c:	781b      	ldrb	r3, [r3, #0]
   1747e:	2b00      	cmp	r3, #0
   17480:	d146      	bne.n	17510 <wifi_cb+0xd0>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
   17482:	4b29      	ldr	r3, [pc, #164]	; (17528 <wifi_cb+0xe8>)
   17484:	0018      	movs	r0, r3
   17486:	4b26      	ldr	r3, [pc, #152]	; (17520 <wifi_cb+0xe0>)
   17488:	4798      	blx	r3
			gbConnectedWifi = false;
   1748a:	4b28      	ldr	r3, [pc, #160]	; (1752c <wifi_cb+0xec>)
   1748c:	2200      	movs	r2, #0
   1748e:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)gDefaultSSID, strlen((char *)gDefaultSSID), 
   17490:	4b27      	ldr	r3, [pc, #156]	; (17530 <wifi_cb+0xf0>)
   17492:	0018      	movs	r0, r3
   17494:	4b27      	ldr	r3, [pc, #156]	; (17534 <wifi_cb+0xf4>)
   17496:	4798      	blx	r3
   17498:	0003      	movs	r3, r0
   1749a:	b2d9      	uxtb	r1, r3
   1749c:	4b26      	ldr	r3, [pc, #152]	; (17538 <wifi_cb+0xf8>)
   1749e:	781a      	ldrb	r2, [r3, #0]
   174a0:	4c26      	ldr	r4, [pc, #152]	; (1753c <wifi_cb+0xfc>)
   174a2:	4823      	ldr	r0, [pc, #140]	; (17530 <wifi_cb+0xf0>)
   174a4:	23ff      	movs	r3, #255	; 0xff
   174a6:	9300      	str	r3, [sp, #0]
   174a8:	0023      	movs	r3, r4
   174aa:	4c25      	ldr	r4, [pc, #148]	; (17540 <wifi_cb+0x100>)
   174ac:	47a0      	blx	r4
		break;
   174ae:	e02f      	b.n	17510 <wifi_cb+0xd0>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   174b0:	683b      	ldr	r3, [r7, #0]
   174b2:	60bb      	str	r3, [r7, #8]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   174b4:	68bb      	ldr	r3, [r7, #8]
   174b6:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   174b8:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   174ba:	68bb      	ldr	r3, [r7, #8]
   174bc:	3301      	adds	r3, #1
   174be:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   174c0:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   174c2:	68bb      	ldr	r3, [r7, #8]
   174c4:	3302      	adds	r3, #2
   174c6:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   174c8:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   174ca:	68bb      	ldr	r3, [r7, #8]
   174cc:	3303      	adds	r3, #3
   174ce:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   174d0:	481c      	ldr	r0, [pc, #112]	; (17544 <wifi_cb+0x104>)
   174d2:	9300      	str	r3, [sp, #0]
   174d4:	0023      	movs	r3, r4
   174d6:	4c1c      	ldr	r4, [pc, #112]	; (17548 <wifi_cb+0x108>)
   174d8:	47a0      	blx	r4
		gbConnectedWifi = true;
   174da:	4b14      	ldr	r3, [pc, #80]	; (1752c <wifi_cb+0xec>)
   174dc:	2201      	movs	r2, #1
   174de:	701a      	strb	r2, [r3, #0]
		if (gu8WiFiMode == APP_AP)
   174e0:	4b1a      	ldr	r3, [pc, #104]	; (1754c <wifi_cb+0x10c>)
   174e2:	781b      	ldrb	r3, [r3, #0]
   174e4:	2b01      	cmp	r3, #1
   174e6:	d105      	bne.n	174f4 <wifi_cb+0xb4>
			start_AP_app();
   174e8:	4b19      	ldr	r3, [pc, #100]	; (17550 <wifi_cb+0x110>)
   174ea:	4798      	blx	r3
			wifi_states = WIFI_TASK_AP_CONNECTED;
   174ec:	4b19      	ldr	r3, [pc, #100]	; (17554 <wifi_cb+0x114>)
   174ee:	2208      	movs	r2, #8
   174f0:	701a      	strb	r2, [r3, #0]
		break;
   174f2:	e00e      	b.n	17512 <wifi_cb+0xd2>
			m2m_wifi_get_sytem_time();
   174f4:	4b18      	ldr	r3, [pc, #96]	; (17558 <wifi_cb+0x118>)
   174f6:	4798      	blx	r3
		break;
   174f8:	e00b      	b.n	17512 <wifi_cb+0xd2>
		printf("Received time\r\n");
   174fa:	4b18      	ldr	r3, [pc, #96]	; (1755c <wifi_cb+0x11c>)
   174fc:	0018      	movs	r0, r3
   174fe:	4b08      	ldr	r3, [pc, #32]	; (17520 <wifi_cb+0xe0>)
   17500:	4798      	blx	r3
		receivedTime = true;
   17502:	4b17      	ldr	r3, [pc, #92]	; (17560 <wifi_cb+0x120>)
   17504:	2201      	movs	r2, #1
   17506:	701a      	strb	r2, [r3, #0]
		wifi_states = WIFI_TASK_CONNECT_CLOUD;
   17508:	4b12      	ldr	r3, [pc, #72]	; (17554 <wifi_cb+0x114>)
   1750a:	2202      	movs	r2, #2
   1750c:	701a      	strb	r2, [r3, #0]
		break;
   1750e:	e000      	b.n	17512 <wifi_cb+0xd2>
		break;
   17510:	46c0      	nop			; (mov r8, r8)
	}
	}
}
   17512:	46c0      	nop			; (mov r8, r8)
   17514:	46bd      	mov	sp, r7
   17516:	b005      	add	sp, #20
   17518:	bd90      	pop	{r4, r7, pc}
   1751a:	46c0      	nop			; (mov r8, r8)
   1751c:	0001d174 	.word	0x0001d174
   17520:	0001a11d 	.word	0x0001a11d
   17524:	00002831 	.word	0x00002831
   17528:	0001d1ac 	.word	0x0001d1ac
   1752c:	2000097d 	.word	0x2000097d
   17530:	20000918 	.word	0x20000918
   17534:	0001a3e3 	.word	0x0001a3e3
   17538:	20000939 	.word	0x20000939
   1753c:	2000093c 	.word	0x2000093c
   17540:	00002369 	.word	0x00002369
   17544:	0001d1e4 	.word	0x0001d1e4
   17548:	0001a001 	.word	0x0001a001
   1754c:	20000984 	.word	0x20000984
   17550:	000171c1 	.word	0x000171c1
   17554:	2000051c 	.word	0x2000051c
   17558:	0000283d 	.word	0x0000283d
   1755c:	0001d21c 	.word	0x0001d21c
   17560:	2000097e 	.word	0x2000097e

00017564 <ecdh_derive_client_shared_secret>:

static sint8 ecdh_derive_client_shared_secret(tstrECPoint *server_public_key,
uint8 *ecdh_shared_secret,
tstrECPoint *client_public_Key)
{
   17564:	b580      	push	{r7, lr}
   17566:	b086      	sub	sp, #24
   17568:	af00      	add	r7, sp, #0
   1756a:	60f8      	str	r0, [r7, #12]
   1756c:	60b9      	str	r1, [r7, #8]
   1756e:	607a      	str	r2, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   17570:	2317      	movs	r3, #23
   17572:	18fb      	adds	r3, r7, r3
   17574:	22f4      	movs	r2, #244	; 0xf4
   17576:	701a      	strb	r2, [r3, #0]
	
	if ((g_ecdh_key_slot_index < 0) ||
   17578:	4b1a      	ldr	r3, [pc, #104]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   1757a:	681b      	ldr	r3, [r3, #0]
   1757c:	2b00      	cmp	r3, #0
   1757e:	d002      	beq.n	17586 <ecdh_derive_client_shared_secret+0x22>
	(g_ecdh_key_slot_index >= (sizeof(g_ecdh_key_slot) / sizeof(g_ecdh_key_slot[0]))))
	{
		g_ecdh_key_slot_index = 0;
   17580:	4b18      	ldr	r3, [pc, #96]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   17582:	2200      	movs	r2, #0
   17584:	601a      	str	r2, [r3, #0]
	}
	
	if (atcatls_create_key(g_ecdh_key_slot[g_ecdh_key_slot_index], client_public_Key->X) == ATCA_SUCCESS)
   17586:	4b17      	ldr	r3, [pc, #92]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   17588:	681a      	ldr	r2, [r3, #0]
   1758a:	4b17      	ldr	r3, [pc, #92]	; (175e8 <ecdh_derive_client_shared_secret+0x84>)
   1758c:	0052      	lsls	r2, r2, #1
   1758e:	5ad3      	ldrh	r3, [r2, r3]
   17590:	b2db      	uxtb	r3, r3
   17592:	687a      	ldr	r2, [r7, #4]
   17594:	0011      	movs	r1, r2
   17596:	0018      	movs	r0, r3
   17598:	4b14      	ldr	r3, [pc, #80]	; (175ec <ecdh_derive_client_shared_secret+0x88>)
   1759a:	4798      	blx	r3
   1759c:	1e03      	subs	r3, r0, #0
   1759e:	d118      	bne.n	175d2 <ecdh_derive_client_shared_secret+0x6e>
	{
		client_public_Key->u16Size = 32;
   175a0:	687b      	ldr	r3, [r7, #4]
   175a2:	2240      	movs	r2, #64	; 0x40
   175a4:	2120      	movs	r1, #32
   175a6:	5299      	strh	r1, [r3, r2]
		if (atcab_ecdh(g_ecdh_key_slot[g_ecdh_key_slot_index], server_public_key->X,
   175a8:	4b0e      	ldr	r3, [pc, #56]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   175aa:	681a      	ldr	r2, [r3, #0]
   175ac:	4b0e      	ldr	r3, [pc, #56]	; (175e8 <ecdh_derive_client_shared_secret+0x84>)
   175ae:	0052      	lsls	r2, r2, #1
   175b0:	5ad3      	ldrh	r3, [r2, r3]
   175b2:	68f9      	ldr	r1, [r7, #12]
   175b4:	68ba      	ldr	r2, [r7, #8]
   175b6:	0018      	movs	r0, r3
   175b8:	4b0d      	ldr	r3, [pc, #52]	; (175f0 <ecdh_derive_client_shared_secret+0x8c>)
   175ba:	4798      	blx	r3
   175bc:	1e03      	subs	r3, r0, #0
   175be:	d108      	bne.n	175d2 <ecdh_derive_client_shared_secret+0x6e>
		ecdh_shared_secret) == ATCA_SUCCESS)
		{
			status = M2M_SUCCESS;
   175c0:	2317      	movs	r3, #23
   175c2:	18fb      	adds	r3, r7, r3
   175c4:	2200      	movs	r2, #0
   175c6:	701a      	strb	r2, [r3, #0]
			g_ecdh_key_slot_index++;
   175c8:	4b06      	ldr	r3, [pc, #24]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   175ca:	681b      	ldr	r3, [r3, #0]
   175cc:	1c5a      	adds	r2, r3, #1
   175ce:	4b05      	ldr	r3, [pc, #20]	; (175e4 <ecdh_derive_client_shared_secret+0x80>)
   175d0:	601a      	str	r2, [r3, #0]
		}
	}
	
	return status;
   175d2:	2317      	movs	r3, #23
   175d4:	18fb      	adds	r3, r7, r3
   175d6:	781b      	ldrb	r3, [r3, #0]
   175d8:	b25b      	sxtb	r3, r3
}
   175da:	0018      	movs	r0, r3
   175dc:	46bd      	mov	sp, r7
   175de:	b006      	add	sp, #24
   175e0:	bd80      	pop	{r7, pc}
   175e2:	46c0      	nop			; (mov r8, r8)
   175e4:	20000914 	.word	0x20000914
   175e8:	200004b4 	.word	0x200004b4
   175ec:	0000dd11 	.word	0x0000dd11
   175f0:	0000ca39 	.word	0x0000ca39

000175f4 <ecdh_derive_key_pair>:

static sint8 ecdh_derive_key_pair(tstrECPoint *server_public_key)
{
   175f4:	b580      	push	{r7, lr}
   175f6:	b084      	sub	sp, #16
   175f8:	af00      	add	r7, sp, #0
   175fa:	6078      	str	r0, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   175fc:	230f      	movs	r3, #15
   175fe:	18fb      	adds	r3, r7, r3
   17600:	22f4      	movs	r2, #244	; 0xf4
   17602:	701a      	strb	r2, [r3, #0]
	
	if ((g_ecdh_key_slot_index < 0) ||
   17604:	4b18      	ldr	r3, [pc, #96]	; (17668 <ecdh_derive_key_pair+0x74>)
   17606:	681b      	ldr	r3, [r3, #0]
   17608:	2b00      	cmp	r3, #0
   1760a:	d002      	beq.n	17612 <ecdh_derive_key_pair+0x1e>
	(g_ecdh_key_slot_index >= (sizeof(g_ecdh_key_slot) / sizeof(g_ecdh_key_slot[0]))))
	{
		g_ecdh_key_slot_index = 0;
   1760c:	4b16      	ldr	r3, [pc, #88]	; (17668 <ecdh_derive_key_pair+0x74>)
   1760e:	2200      	movs	r2, #0
   17610:	601a      	str	r2, [r3, #0]
	}

	if(atcatls_create_key(g_ecdh_key_slot[g_ecdh_key_slot_index], server_public_key->X) == ATCA_SUCCESS)
   17612:	4b15      	ldr	r3, [pc, #84]	; (17668 <ecdh_derive_key_pair+0x74>)
   17614:	681a      	ldr	r2, [r3, #0]
   17616:	4b15      	ldr	r3, [pc, #84]	; (1766c <ecdh_derive_key_pair+0x78>)
   17618:	0052      	lsls	r2, r2, #1
   1761a:	5ad3      	ldrh	r3, [r2, r3]
   1761c:	b2db      	uxtb	r3, r3
   1761e:	687a      	ldr	r2, [r7, #4]
   17620:	0011      	movs	r1, r2
   17622:	0018      	movs	r0, r3
   17624:	4b12      	ldr	r3, [pc, #72]	; (17670 <ecdh_derive_key_pair+0x7c>)
   17626:	4798      	blx	r3
   17628:	1e03      	subs	r3, r0, #0
   1762a:	d114      	bne.n	17656 <ecdh_derive_key_pair+0x62>
	{
		server_public_key->u16Size      = 32;
   1762c:	687b      	ldr	r3, [r7, #4]
   1762e:	2240      	movs	r2, #64	; 0x40
   17630:	2120      	movs	r1, #32
   17632:	5299      	strh	r1, [r3, r2]
		server_public_key->u16PrivKeyID = g_ecdh_key_slot[g_ecdh_key_slot_index];
   17634:	4b0c      	ldr	r3, [pc, #48]	; (17668 <ecdh_derive_key_pair+0x74>)
   17636:	681a      	ldr	r2, [r3, #0]
   17638:	4b0c      	ldr	r3, [pc, #48]	; (1766c <ecdh_derive_key_pair+0x78>)
   1763a:	0052      	lsls	r2, r2, #1
   1763c:	5ad1      	ldrh	r1, [r2, r3]
   1763e:	687b      	ldr	r3, [r7, #4]
   17640:	2242      	movs	r2, #66	; 0x42
   17642:	5299      	strh	r1, [r3, r2]

		g_ecdh_key_slot_index++;
   17644:	4b08      	ldr	r3, [pc, #32]	; (17668 <ecdh_derive_key_pair+0x74>)
   17646:	681b      	ldr	r3, [r3, #0]
   17648:	1c5a      	adds	r2, r3, #1
   1764a:	4b07      	ldr	r3, [pc, #28]	; (17668 <ecdh_derive_key_pair+0x74>)
   1764c:	601a      	str	r2, [r3, #0]

		status = M2M_SUCCESS;
   1764e:	230f      	movs	r3, #15
   17650:	18fb      	adds	r3, r7, r3
   17652:	2200      	movs	r2, #0
   17654:	701a      	strb	r2, [r3, #0]
	}

	return status;
   17656:	230f      	movs	r3, #15
   17658:	18fb      	adds	r3, r7, r3
   1765a:	781b      	ldrb	r3, [r3, #0]
   1765c:	b25b      	sxtb	r3, r3
}
   1765e:	0018      	movs	r0, r3
   17660:	46bd      	mov	sp, r7
   17662:	b004      	add	sp, #16
   17664:	bd80      	pop	{r7, pc}
   17666:	46c0      	nop			; (mov r8, r8)
   17668:	20000914 	.word	0x20000914
   1766c:	200004b4 	.word	0x200004b4
   17670:	0000dd11 	.word	0x0000dd11

00017674 <ecdsa_process_sign_verify_request>:

static sint8 ecdsa_process_sign_verify_request(uint32 number_of_signatures)
{
   17674:	b5b0      	push	{r4, r5, r7, lr}
   17676:	b0be      	sub	sp, #248	; 0xf8
   17678:	af00      	add	r7, sp, #0
   1767a:	6078      	str	r0, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   1767c:	23f7      	movs	r3, #247	; 0xf7
   1767e:	18fb      	adds	r3, r7, r3
   17680:	22f4      	movs	r2, #244	; 0xf4
   17682:	701a      	strb	r2, [r3, #0]
	tstrECPoint	Key;
	uint32 index = 0;
   17684:	2300      	movs	r3, #0
   17686:	22f0      	movs	r2, #240	; 0xf0
   17688:	18ba      	adds	r2, r7, r2
   1768a:	6013      	str	r3, [r2, #0]
	uint8 signature[80];
	uint8 hash[80] = {0};
   1768c:	230c      	movs	r3, #12
   1768e:	18fb      	adds	r3, r7, r3
   17690:	0018      	movs	r0, r3
   17692:	2350      	movs	r3, #80	; 0x50
   17694:	001a      	movs	r2, r3
   17696:	2100      	movs	r1, #0
   17698:	4b34      	ldr	r3, [pc, #208]	; (1776c <ecdsa_process_sign_verify_request+0xf8>)
   1769a:	4798      	blx	r3
	uint16 curve_type = 0;
   1769c:	230a      	movs	r3, #10
   1769e:	18fb      	adds	r3, r7, r3
   176a0:	2200      	movs	r2, #0
   176a2:	801a      	strh	r2, [r3, #0]
	
	for(index = 0; index < number_of_signatures; index++)
   176a4:	2300      	movs	r3, #0
   176a6:	22f0      	movs	r2, #240	; 0xf0
   176a8:	18ba      	adds	r2, r7, r2
   176aa:	6013      	str	r3, [r2, #0]
   176ac:	e04f      	b.n	1774e <ecdsa_process_sign_verify_request+0xda>
	{
		status = m2m_ssl_retrieve_cert(&curve_type, hash, signature, &Key);
   176ae:	23f7      	movs	r3, #247	; 0xf7
   176b0:	18fc      	adds	r4, r7, r3
   176b2:	23ac      	movs	r3, #172	; 0xac
   176b4:	18fb      	adds	r3, r7, r3
   176b6:	225c      	movs	r2, #92	; 0x5c
   176b8:	18ba      	adds	r2, r7, r2
   176ba:	210c      	movs	r1, #12
   176bc:	1879      	adds	r1, r7, r1
   176be:	200a      	movs	r0, #10
   176c0:	1838      	adds	r0, r7, r0
   176c2:	4d2b      	ldr	r5, [pc, #172]	; (17770 <ecdsa_process_sign_verify_request+0xfc>)
   176c4:	47a8      	blx	r5
   176c6:	0003      	movs	r3, r0
   176c8:	7023      	strb	r3, [r4, #0]
		if (status != M2M_SUCCESS)
   176ca:	23f7      	movs	r3, #247	; 0xf7
   176cc:	18fb      	adds	r3, r7, r3
   176ce:	781b      	ldrb	r3, [r3, #0]
   176d0:	b25b      	sxtb	r3, r3
   176d2:	2b00      	cmp	r3, #0
   176d4:	d017      	beq.n	17706 <ecdsa_process_sign_verify_request+0x92>
		{
			M2M_ERR("m2m_ssl_retrieve_cert() failed with ret=%d", status);
   176d6:	23ae      	movs	r3, #174	; 0xae
   176d8:	009a      	lsls	r2, r3, #2
   176da:	4926      	ldr	r1, [pc, #152]	; (17774 <ecdsa_process_sign_verify_request+0x100>)
   176dc:	4b26      	ldr	r3, [pc, #152]	; (17778 <ecdsa_process_sign_verify_request+0x104>)
   176de:	0018      	movs	r0, r3
   176e0:	4b26      	ldr	r3, [pc, #152]	; (1777c <ecdsa_process_sign_verify_request+0x108>)
   176e2:	4798      	blx	r3
   176e4:	23f7      	movs	r3, #247	; 0xf7
   176e6:	18fb      	adds	r3, r7, r3
   176e8:	2200      	movs	r2, #0
   176ea:	569a      	ldrsb	r2, [r3, r2]
   176ec:	4b24      	ldr	r3, [pc, #144]	; (17780 <ecdsa_process_sign_verify_request+0x10c>)
   176ee:	0011      	movs	r1, r2
   176f0:	0018      	movs	r0, r3
   176f2:	4b22      	ldr	r3, [pc, #136]	; (1777c <ecdsa_process_sign_verify_request+0x108>)
   176f4:	4798      	blx	r3
   176f6:	200d      	movs	r0, #13
   176f8:	4b22      	ldr	r3, [pc, #136]	; (17784 <ecdsa_process_sign_verify_request+0x110>)
   176fa:	4798      	blx	r3
			return status;
   176fc:	23f7      	movs	r3, #247	; 0xf7
   176fe:	18fb      	adds	r3, r7, r3
   17700:	781b      	ldrb	r3, [r3, #0]
   17702:	b25b      	sxtb	r3, r3
   17704:	e02d      	b.n	17762 <ecdsa_process_sign_verify_request+0xee>
		}

		if(curve_type == EC_SECP256R1)
   17706:	230a      	movs	r3, #10
   17708:	18fb      	adds	r3, r7, r3
   1770a:	881b      	ldrh	r3, [r3, #0]
   1770c:	2b17      	cmp	r3, #23
   1770e:	d117      	bne.n	17740 <ecdsa_process_sign_verify_request+0xcc>
		{
			bool is_verified = false;
   17710:	2309      	movs	r3, #9
   17712:	18fb      	adds	r3, r7, r3
   17714:	2200      	movs	r2, #0
   17716:	701a      	strb	r2, [r3, #0]
			status = atcatls_verify(hash, signature, Key.X, &is_verified);
   17718:	2309      	movs	r3, #9
   1771a:	18fb      	adds	r3, r7, r3
   1771c:	22ac      	movs	r2, #172	; 0xac
   1771e:	18ba      	adds	r2, r7, r2
   17720:	215c      	movs	r1, #92	; 0x5c
   17722:	1879      	adds	r1, r7, r1
   17724:	200c      	movs	r0, #12
   17726:	1838      	adds	r0, r7, r0
   17728:	4c17      	ldr	r4, [pc, #92]	; (17788 <ecdsa_process_sign_verify_request+0x114>)
   1772a:	47a0      	blx	r4
   1772c:	0003      	movs	r3, r0
   1772e:	001a      	movs	r2, r3
   17730:	23f7      	movs	r3, #247	; 0xf7
   17732:	18fb      	adds	r3, r7, r3
   17734:	701a      	strb	r2, [r3, #0]
			status = M2M_SUCCESS;
   17736:	23f7      	movs	r3, #247	; 0xf7
   17738:	18fb      	adds	r3, r7, r3
   1773a:	2200      	movs	r2, #0
   1773c:	701a      	strb	r2, [r3, #0]
   1773e:	e00c      	b.n	1775a <ecdsa_process_sign_verify_request+0xe6>
	for(index = 0; index < number_of_signatures; index++)
   17740:	23f0      	movs	r3, #240	; 0xf0
   17742:	18fb      	adds	r3, r7, r3
   17744:	681b      	ldr	r3, [r3, #0]
   17746:	3301      	adds	r3, #1
   17748:	22f0      	movs	r2, #240	; 0xf0
   1774a:	18ba      	adds	r2, r7, r2
   1774c:	6013      	str	r3, [r2, #0]
   1774e:	23f0      	movs	r3, #240	; 0xf0
   17750:	18fb      	adds	r3, r7, r3
   17752:	681a      	ldr	r2, [r3, #0]
   17754:	687b      	ldr	r3, [r7, #4]
   17756:	429a      	cmp	r2, r3
   17758:	d3a9      	bcc.n	176ae <ecdsa_process_sign_verify_request+0x3a>
				m2m_ssl_stop_processing_certs();
				break;
			}
		}
	}
	return status;
   1775a:	23f7      	movs	r3, #247	; 0xf7
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	781b      	ldrb	r3, [r3, #0]
   17760:	b25b      	sxtb	r3, r3
}
   17762:	0018      	movs	r0, r3
   17764:	46bd      	mov	sp, r7
   17766:	b03e      	add	sp, #248	; 0xf8
   17768:	bdb0      	pop	{r4, r5, r7, pc}
   1776a:	46c0      	nop			; (mov r8, r8)
   1776c:	00019ea1 	.word	0x00019ea1
   17770:	00001a3d 	.word	0x00001a3d
   17774:	0001d48c 	.word	0x0001d48c
   17778:	0001d22c 	.word	0x0001d22c
   1777c:	0001a001 	.word	0x0001a001
   17780:	0001d240 	.word	0x0001d240
   17784:	0001a035 	.word	0x0001a035
   17788:	0000dcb1 	.word	0x0000dcb1

0001778c <ecdsa_process_sign_gen_request>:

static sint8 ecdsa_process_sign_gen_request(tstrEcdsaSignReqInfo *sign_request,
uint8 *signature,
uint16 *signature_size)
{
   1778c:	b590      	push	{r4, r7, lr}
   1778e:	b08f      	sub	sp, #60	; 0x3c
   17790:	af00      	add	r7, sp, #0
   17792:	60f8      	str	r0, [r7, #12]
   17794:	60b9      	str	r1, [r7, #8]
   17796:	607a      	str	r2, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   17798:	2337      	movs	r3, #55	; 0x37
   1779a:	18fb      	adds	r3, r7, r3
   1779c:	22f4      	movs	r2, #244	; 0xf4
   1779e:	701a      	strb	r2, [r3, #0]
	uint8 hash[32];
	
	status = m2m_ssl_retrieve_hash(hash, sign_request->u16HashSz);
   177a0:	68fb      	ldr	r3, [r7, #12]
   177a2:	885a      	ldrh	r2, [r3, #2]
   177a4:	2337      	movs	r3, #55	; 0x37
   177a6:	18fc      	adds	r4, r7, r3
   177a8:	2314      	movs	r3, #20
   177aa:	18fb      	adds	r3, r7, r3
   177ac:	0011      	movs	r1, r2
   177ae:	0018      	movs	r0, r3
   177b0:	4b1d      	ldr	r3, [pc, #116]	; (17828 <ecdsa_process_sign_gen_request+0x9c>)
   177b2:	4798      	blx	r3
   177b4:	0003      	movs	r3, r0
   177b6:	7023      	strb	r3, [r4, #0]
	if (status != M2M_SUCCESS)
   177b8:	2337      	movs	r3, #55	; 0x37
   177ba:	18fb      	adds	r3, r7, r3
   177bc:	781b      	ldrb	r3, [r3, #0]
   177be:	b25b      	sxtb	r3, r3
   177c0:	2b00      	cmp	r3, #0
   177c2:	d016      	beq.n	177f2 <ecdsa_process_sign_gen_request+0x66>
	{
		M2M_ERR("m2m_ssl_retrieve_hash() failed with ret=%d", status);
   177c4:	4a19      	ldr	r2, [pc, #100]	; (1782c <ecdsa_process_sign_gen_request+0xa0>)
   177c6:	491a      	ldr	r1, [pc, #104]	; (17830 <ecdsa_process_sign_gen_request+0xa4>)
   177c8:	4b1a      	ldr	r3, [pc, #104]	; (17834 <ecdsa_process_sign_gen_request+0xa8>)
   177ca:	0018      	movs	r0, r3
   177cc:	4b1a      	ldr	r3, [pc, #104]	; (17838 <ecdsa_process_sign_gen_request+0xac>)
   177ce:	4798      	blx	r3
   177d0:	2337      	movs	r3, #55	; 0x37
   177d2:	18fb      	adds	r3, r7, r3
   177d4:	2200      	movs	r2, #0
   177d6:	569a      	ldrsb	r2, [r3, r2]
   177d8:	4b18      	ldr	r3, [pc, #96]	; (1783c <ecdsa_process_sign_gen_request+0xb0>)
   177da:	0011      	movs	r1, r2
   177dc:	0018      	movs	r0, r3
   177de:	4b16      	ldr	r3, [pc, #88]	; (17838 <ecdsa_process_sign_gen_request+0xac>)
   177e0:	4798      	blx	r3
   177e2:	200d      	movs	r0, #13
   177e4:	4b16      	ldr	r3, [pc, #88]	; (17840 <ecdsa_process_sign_gen_request+0xb4>)
   177e6:	4798      	blx	r3
		return status;
   177e8:	2337      	movs	r3, #55	; 0x37
   177ea:	18fb      	adds	r3, r7, r3
   177ec:	781b      	ldrb	r3, [r3, #0]
   177ee:	b25b      	sxtb	r3, r3
   177f0:	e016      	b.n	17820 <ecdsa_process_sign_gen_request+0x94>
	}

	if(sign_request->u16CurveType == EC_SECP256R1)
   177f2:	68fb      	ldr	r3, [r7, #12]
   177f4:	881b      	ldrh	r3, [r3, #0]
   177f6:	2b17      	cmp	r3, #23
   177f8:	d10e      	bne.n	17818 <ecdsa_process_sign_gen_request+0x8c>
	{
		*signature_size = 64;
   177fa:	687b      	ldr	r3, [r7, #4]
   177fc:	2240      	movs	r2, #64	; 0x40
   177fe:	801a      	strh	r2, [r3, #0]
		status = atcatls_sign(DEVICE_KEY_SLOT, hash, signature);
   17800:	68ba      	ldr	r2, [r7, #8]
   17802:	2314      	movs	r3, #20
   17804:	18fb      	adds	r3, r7, r3
   17806:	0019      	movs	r1, r3
   17808:	2000      	movs	r0, #0
   1780a:	4b0e      	ldr	r3, [pc, #56]	; (17844 <ecdsa_process_sign_gen_request+0xb8>)
   1780c:	4798      	blx	r3
   1780e:	0003      	movs	r3, r0
   17810:	001a      	movs	r2, r3
   17812:	2337      	movs	r3, #55	; 0x37
   17814:	18fb      	adds	r3, r7, r3
   17816:	701a      	strb	r2, [r3, #0]
	}

	return status;
   17818:	2337      	movs	r3, #55	; 0x37
   1781a:	18fb      	adds	r3, r7, r3
   1781c:	781b      	ldrb	r3, [r3, #0]
   1781e:	b25b      	sxtb	r3, r3
}
   17820:	0018      	movs	r0, r3
   17822:	46bd      	mov	sp, r7
   17824:	b00f      	add	sp, #60	; 0x3c
   17826:	bd90      	pop	{r4, r7, pc}
   17828:	00001c41 	.word	0x00001c41
   1782c:	000002e3 	.word	0x000002e3
   17830:	0001d4b0 	.word	0x0001d4b0
   17834:	0001d22c 	.word	0x0001d22c
   17838:	0001a001 	.word	0x0001a001
   1783c:	0001d26c 	.word	0x0001d26c
   17840:	0001a035 	.word	0x0001a035
   17844:	0000dc55 	.word	0x0000dc55

00017848 <ecdh_derive_server_shared_secret>:

static sint8 ecdh_derive_server_shared_secret(uint16 private_key_id,
tstrECPoint *client_public_key,
uint8 *ecdh_shared_secret)
{
   17848:	b590      	push	{r4, r7, lr}
   1784a:	b087      	sub	sp, #28
   1784c:	af00      	add	r7, sp, #0
   1784e:	60b9      	str	r1, [r7, #8]
   17850:	607a      	str	r2, [r7, #4]
   17852:	230e      	movs	r3, #14
   17854:	18fb      	adds	r3, r7, r3
   17856:	1c02      	adds	r2, r0, #0
   17858:	801a      	strh	r2, [r3, #0]
	uint16 key_slot	= private_key_id;
   1785a:	2314      	movs	r3, #20
   1785c:	18fb      	adds	r3, r7, r3
   1785e:	220e      	movs	r2, #14
   17860:	18ba      	adds	r2, r7, r2
   17862:	8812      	ldrh	r2, [r2, #0]
   17864:	801a      	strh	r2, [r3, #0]
	sint8 status = M2M_ERR_FAIL;
   17866:	2317      	movs	r3, #23
   17868:	18fb      	adds	r3, r7, r3
   1786a:	22f4      	movs	r2, #244	; 0xf4
   1786c:	701a      	strb	r2, [r3, #0]
	uint8 atca_status = ATCA_STATUS_UNKNOWN;
   1786e:	2313      	movs	r3, #19
   17870:	18fb      	adds	r3, r7, r3
   17872:	22d5      	movs	r2, #213	; 0xd5
   17874:	701a      	strb	r2, [r3, #0]

	atca_status = atcab_ecdh(key_slot, client_public_key->X, ecdh_shared_secret);
   17876:	68b9      	ldr	r1, [r7, #8]
   17878:	2313      	movs	r3, #19
   1787a:	18fc      	adds	r4, r7, r3
   1787c:	687a      	ldr	r2, [r7, #4]
   1787e:	2314      	movs	r3, #20
   17880:	18fb      	adds	r3, r7, r3
   17882:	881b      	ldrh	r3, [r3, #0]
   17884:	0018      	movs	r0, r3
   17886:	4b13      	ldr	r3, [pc, #76]	; (178d4 <ecdh_derive_server_shared_secret+0x8c>)
   17888:	4798      	blx	r3
   1788a:	0003      	movs	r3, r0
   1788c:	7023      	strb	r3, [r4, #0]
	if(atca_status == ATCA_SUCCESS)
   1788e:	2313      	movs	r3, #19
   17890:	18fb      	adds	r3, r7, r3
   17892:	781b      	ldrb	r3, [r3, #0]
   17894:	2b00      	cmp	r3, #0
   17896:	d104      	bne.n	178a2 <ecdh_derive_server_shared_secret+0x5a>
	{
		status = M2M_SUCCESS;
   17898:	2317      	movs	r3, #23
   1789a:	18fb      	adds	r3, r7, r3
   1789c:	2200      	movs	r2, #0
   1789e:	701a      	strb	r2, [r3, #0]
   178a0:	e010      	b.n	178c4 <ecdh_derive_server_shared_secret+0x7c>
	}
	else
	{
		M2M_INFO("__SLOT = %u, Err = %X\n", key_slot, atca_status);
   178a2:	4b0d      	ldr	r3, [pc, #52]	; (178d8 <ecdh_derive_server_shared_secret+0x90>)
   178a4:	0018      	movs	r0, r3
   178a6:	4b0d      	ldr	r3, [pc, #52]	; (178dc <ecdh_derive_server_shared_secret+0x94>)
   178a8:	4798      	blx	r3
   178aa:	2314      	movs	r3, #20
   178ac:	18fb      	adds	r3, r7, r3
   178ae:	8819      	ldrh	r1, [r3, #0]
   178b0:	2313      	movs	r3, #19
   178b2:	18fb      	adds	r3, r7, r3
   178b4:	781a      	ldrb	r2, [r3, #0]
   178b6:	4b0a      	ldr	r3, [pc, #40]	; (178e0 <ecdh_derive_server_shared_secret+0x98>)
   178b8:	0018      	movs	r0, r3
   178ba:	4b08      	ldr	r3, [pc, #32]	; (178dc <ecdh_derive_server_shared_secret+0x94>)
   178bc:	4798      	blx	r3
   178be:	200d      	movs	r0, #13
   178c0:	4b08      	ldr	r3, [pc, #32]	; (178e4 <ecdh_derive_server_shared_secret+0x9c>)
   178c2:	4798      	blx	r3
	}
	
	return status;
   178c4:	2317      	movs	r3, #23
   178c6:	18fb      	adds	r3, r7, r3
   178c8:	781b      	ldrb	r3, [r3, #0]
   178ca:	b25b      	sxtb	r3, r3
}
   178cc:	0018      	movs	r0, r3
   178ce:	46bd      	mov	sp, r7
   178d0:	b007      	add	sp, #28
   178d2:	bd90      	pop	{r4, r7, pc}
   178d4:	0000ca39 	.word	0x0000ca39
   178d8:	0001cfcc 	.word	0x0001cfcc
   178dc:	0001a001 	.word	0x0001a001
   178e0:	0001d298 	.word	0x0001d298
   178e4:	0001a035 	.word	0x0001a035

000178e8 <eccProcessREQ>:

static void eccProcessREQ(tstrEccReqInfo *ecc_request)
{
   178e8:	b580      	push	{r7, lr}
   178ea:	b0b4      	sub	sp, #208	; 0xd0
   178ec:	af00      	add	r7, sp, #0
   178ee:	6078      	str	r0, [r7, #4]
	tstrEccReqInfo ecc_response;
	uint8 signature[80];
	uint16 response_data_size = 0;
   178f0:	230a      	movs	r3, #10
   178f2:	18fb      	adds	r3, r7, r3
   178f4:	2200      	movs	r2, #0
   178f6:	801a      	strh	r2, [r3, #0]
	uint8 *response_data_buffer = NULL;
   178f8:	2300      	movs	r3, #0
   178fa:	22cc      	movs	r2, #204	; 0xcc
   178fc:	18ba      	adds	r2, r7, r2
   178fe:	6013      	str	r3, [r2, #0]
	
	ecc_response.u16Status = 1;
   17900:	235c      	movs	r3, #92	; 0x5c
   17902:	18fb      	adds	r3, r7, r3
   17904:	2201      	movs	r2, #1
   17906:	805a      	strh	r2, [r3, #2]

	switch (ecc_request->u16REQ)
   17908:	687b      	ldr	r3, [r7, #4]
   1790a:	881b      	ldrh	r3, [r3, #0]
   1790c:	2b05      	cmp	r3, #5
   1790e:	d854      	bhi.n	179ba <eccProcessREQ+0xd2>
   17910:	009a      	lsls	r2, r3, #2
   17912:	4b3a      	ldr	r3, [pc, #232]	; (179fc <eccProcessREQ+0x114>)
   17914:	18d3      	adds	r3, r2, r3
   17916:	681b      	ldr	r3, [r3, #0]
   17918:	469f      	mov	pc, r3
	{
		case ECC_REQ_CLIENT_ECDH:
		ecc_response.u16Status = ecdh_derive_client_shared_secret(&(ecc_request->strEcdhREQ.strPubKey),
   1791a:	687b      	ldr	r3, [r7, #4]
   1791c:	330c      	adds	r3, #12
   1791e:	0018      	movs	r0, r3
   17920:	235c      	movs	r3, #92	; 0x5c
   17922:	18fb      	adds	r3, r7, r3
   17924:	330c      	adds	r3, #12
   17926:	001a      	movs	r2, r3
   17928:	235c      	movs	r3, #92	; 0x5c
   1792a:	18fb      	adds	r3, r7, r3
   1792c:	3350      	adds	r3, #80	; 0x50
   1792e:	0019      	movs	r1, r3
   17930:	4b33      	ldr	r3, [pc, #204]	; (17a00 <eccProcessREQ+0x118>)
   17932:	4798      	blx	r3
   17934:	0003      	movs	r3, r0
   17936:	b29a      	uxth	r2, r3
   17938:	235c      	movs	r3, #92	; 0x5c
   1793a:	18fb      	adds	r3, r7, r3
   1793c:	805a      	strh	r2, [r3, #2]
		ecc_response.strEcdhREQ.au8Key,
		&ecc_response.strEcdhREQ.strPubKey);
		break;
   1793e:	e03d      	b.n	179bc <eccProcessREQ+0xd4>

		case ECC_REQ_GEN_KEY:
		ecc_response.u16Status = ecdh_derive_key_pair(&ecc_response.strEcdhREQ.strPubKey);
   17940:	235c      	movs	r3, #92	; 0x5c
   17942:	18fb      	adds	r3, r7, r3
   17944:	330c      	adds	r3, #12
   17946:	0018      	movs	r0, r3
   17948:	4b2e      	ldr	r3, [pc, #184]	; (17a04 <eccProcessREQ+0x11c>)
   1794a:	4798      	blx	r3
   1794c:	0003      	movs	r3, r0
   1794e:	b29a      	uxth	r2, r3
   17950:	235c      	movs	r3, #92	; 0x5c
   17952:	18fb      	adds	r3, r7, r3
   17954:	805a      	strh	r2, [r3, #2]
		break;
   17956:	e031      	b.n	179bc <eccProcessREQ+0xd4>

		case ECC_REQ_SERVER_ECDH:
		ecc_response.u16Status = ecdh_derive_server_shared_secret(ecc_request->strEcdhREQ.strPubKey.u16PrivKeyID,
   17958:	687b      	ldr	r3, [r7, #4]
   1795a:	224e      	movs	r2, #78	; 0x4e
   1795c:	5a98      	ldrh	r0, [r3, r2]
   1795e:	687b      	ldr	r3, [r7, #4]
   17960:	330c      	adds	r3, #12
   17962:	0019      	movs	r1, r3
   17964:	235c      	movs	r3, #92	; 0x5c
   17966:	18fb      	adds	r3, r7, r3
   17968:	3350      	adds	r3, #80	; 0x50
   1796a:	001a      	movs	r2, r3
   1796c:	4b26      	ldr	r3, [pc, #152]	; (17a08 <eccProcessREQ+0x120>)
   1796e:	4798      	blx	r3
   17970:	0003      	movs	r3, r0
   17972:	b29a      	uxth	r2, r3
   17974:	235c      	movs	r3, #92	; 0x5c
   17976:	18fb      	adds	r3, r7, r3
   17978:	805a      	strh	r2, [r3, #2]
		&(ecc_request->strEcdhREQ.strPubKey),
		ecc_response.strEcdhREQ.au8Key);
		break;
   1797a:	e01f      	b.n	179bc <eccProcessREQ+0xd4>
		
		case ECC_REQ_SIGN_VERIFY:
		ecc_response.u16Status = ecdsa_process_sign_verify_request(ecc_request->strEcdsaVerifyREQ.u32nSig);
   1797c:	687b      	ldr	r3, [r7, #4]
   1797e:	68db      	ldr	r3, [r3, #12]
   17980:	0018      	movs	r0, r3
   17982:	4b22      	ldr	r3, [pc, #136]	; (17a0c <eccProcessREQ+0x124>)
   17984:	4798      	blx	r3
   17986:	0003      	movs	r3, r0
   17988:	b29a      	uxth	r2, r3
   1798a:	235c      	movs	r3, #92	; 0x5c
   1798c:	18fb      	adds	r3, r7, r3
   1798e:	805a      	strh	r2, [r3, #2]
		break;
   17990:	e014      	b.n	179bc <eccProcessREQ+0xd4>
		
		case ECC_REQ_SIGN_GEN:
		ecc_response.u16Status = ecdsa_process_sign_gen_request(&(ecc_request->strEcdsaSignREQ), signature,
   17992:	687b      	ldr	r3, [r7, #4]
   17994:	330c      	adds	r3, #12
   17996:	220a      	movs	r2, #10
   17998:	18ba      	adds	r2, r7, r2
   1799a:	210c      	movs	r1, #12
   1799c:	1879      	adds	r1, r7, r1
   1799e:	0018      	movs	r0, r3
   179a0:	4b1b      	ldr	r3, [pc, #108]	; (17a10 <eccProcessREQ+0x128>)
   179a2:	4798      	blx	r3
   179a4:	0003      	movs	r3, r0
   179a6:	b29a      	uxth	r2, r3
   179a8:	235c      	movs	r3, #92	; 0x5c
   179aa:	18fb      	adds	r3, r7, r3
   179ac:	805a      	strh	r2, [r3, #2]
		&response_data_size);
		response_data_buffer = signature;
   179ae:	230c      	movs	r3, #12
   179b0:	18fb      	adds	r3, r7, r3
   179b2:	22cc      	movs	r2, #204	; 0xcc
   179b4:	18ba      	adds	r2, r7, r2
   179b6:	6013      	str	r3, [r2, #0]
		break;
   179b8:	e000      	b.n	179bc <eccProcessREQ+0xd4>
		
		default:
		// Do nothing
		break;
   179ba:	46c0      	nop			; (mov r8, r8)
	}
	
	ecc_response.u16REQ      = ecc_request->u16REQ;
   179bc:	687b      	ldr	r3, [r7, #4]
   179be:	881a      	ldrh	r2, [r3, #0]
   179c0:	235c      	movs	r3, #92	; 0x5c
   179c2:	18fb      	adds	r3, r7, r3
   179c4:	801a      	strh	r2, [r3, #0]
	ecc_response.u32UserData = ecc_request->u32UserData;
   179c6:	687b      	ldr	r3, [r7, #4]
   179c8:	685a      	ldr	r2, [r3, #4]
   179ca:	235c      	movs	r3, #92	; 0x5c
   179cc:	18fb      	adds	r3, r7, r3
   179ce:	605a      	str	r2, [r3, #4]
	ecc_response.u32SeqNo    = ecc_request->u32SeqNo;
   179d0:	687b      	ldr	r3, [r7, #4]
   179d2:	689a      	ldr	r2, [r3, #8]
   179d4:	235c      	movs	r3, #92	; 0x5c
   179d6:	18fb      	adds	r3, r7, r3
   179d8:	609a      	str	r2, [r3, #8]

	m2m_ssl_ecc_process_done();
   179da:	4b0e      	ldr	r3, [pc, #56]	; (17a14 <eccProcessREQ+0x12c>)
   179dc:	4798      	blx	r3
	m2m_ssl_handshake_rsp(&ecc_response, response_data_buffer, response_data_size);
   179de:	230a      	movs	r3, #10
   179e0:	18fb      	adds	r3, r7, r3
   179e2:	881a      	ldrh	r2, [r3, #0]
   179e4:	23cc      	movs	r3, #204	; 0xcc
   179e6:	18fb      	adds	r3, r7, r3
   179e8:	6819      	ldr	r1, [r3, #0]
   179ea:	235c      	movs	r3, #92	; 0x5c
   179ec:	18fb      	adds	r3, r7, r3
   179ee:	0018      	movs	r0, r3
   179f0:	4b09      	ldr	r3, [pc, #36]	; (17a18 <eccProcessREQ+0x130>)
   179f2:	4798      	blx	r3
}
   179f4:	46c0      	nop			; (mov r8, r8)
   179f6:	46bd      	mov	sp, r7
   179f8:	b034      	add	sp, #208	; 0xd0
   179fa:	bd80      	pop	{r7, pc}
   179fc:	0001d474 	.word	0x0001d474
   17a00:	00017565 	.word	0x00017565
   17a04:	000175f5 	.word	0x000175f5
   17a08:	00017849 	.word	0x00017849
   17a0c:	00017675 	.word	0x00017675
   17a10:	0001778d 	.word	0x0001778d
   17a14:	00001cc5 	.word	0x00001cc5
   17a18:	000019f1 	.word	0x000019f1

00017a1c <ssl_cb>:



static void ssl_cb(uint8 u8MsgType, void * pvMsg)
{
   17a1c:	b580      	push	{r7, lr}
   17a1e:	b084      	sub	sp, #16
   17a20:	af00      	add	r7, sp, #0
   17a22:	0002      	movs	r2, r0
   17a24:	6039      	str	r1, [r7, #0]
   17a26:	1dfb      	adds	r3, r7, #7
   17a28:	701a      	strb	r2, [r3, #0]
	switch(u8MsgType)
   17a2a:	1dfb      	adds	r3, r7, #7
   17a2c:	781b      	ldrb	r3, [r3, #0]
   17a2e:	2b01      	cmp	r3, #1
   17a30:	d002      	beq.n	17a38 <ssl_cb+0x1c>
   17a32:	2b06      	cmp	r3, #6
   17a34:	d007      	beq.n	17a46 <ssl_cb+0x2a>
			tstrSslSetActiveCsList *pstrCsList = (tstrSslSetActiveCsList *)pvMsg;
			M2M_INFO("ActiveCS bitmap:%04x\n", pstrCsList->u32CsBMP);
		}
		break;
	}
}
   17a36:	e017      	b.n	17a68 <ssl_cb+0x4c>
			tstrEccReqInfo *pstrEccREQ = (tstrEccReqInfo *)pvMsg;
   17a38:	683b      	ldr	r3, [r7, #0]
   17a3a:	60fb      	str	r3, [r7, #12]
			eccProcessREQ(pstrEccREQ);
   17a3c:	68fb      	ldr	r3, [r7, #12]
   17a3e:	0018      	movs	r0, r3
   17a40:	4b0b      	ldr	r3, [pc, #44]	; (17a70 <ssl_cb+0x54>)
   17a42:	4798      	blx	r3
		break;
   17a44:	e010      	b.n	17a68 <ssl_cb+0x4c>
			tstrSslSetActiveCsList *pstrCsList = (tstrSslSetActiveCsList *)pvMsg;
   17a46:	683b      	ldr	r3, [r7, #0]
   17a48:	60bb      	str	r3, [r7, #8]
			M2M_INFO("ActiveCS bitmap:%04x\n", pstrCsList->u32CsBMP);
   17a4a:	4b0a      	ldr	r3, [pc, #40]	; (17a74 <ssl_cb+0x58>)
   17a4c:	0018      	movs	r0, r3
   17a4e:	4b0a      	ldr	r3, [pc, #40]	; (17a78 <ssl_cb+0x5c>)
   17a50:	4798      	blx	r3
   17a52:	68bb      	ldr	r3, [r7, #8]
   17a54:	681a      	ldr	r2, [r3, #0]
   17a56:	4b09      	ldr	r3, [pc, #36]	; (17a7c <ssl_cb+0x60>)
   17a58:	0011      	movs	r1, r2
   17a5a:	0018      	movs	r0, r3
   17a5c:	4b06      	ldr	r3, [pc, #24]	; (17a78 <ssl_cb+0x5c>)
   17a5e:	4798      	blx	r3
   17a60:	200d      	movs	r0, #13
   17a62:	4b07      	ldr	r3, [pc, #28]	; (17a80 <ssl_cb+0x64>)
   17a64:	4798      	blx	r3
		break;
   17a66:	46c0      	nop			; (mov r8, r8)
}
   17a68:	46c0      	nop			; (mov r8, r8)
   17a6a:	46bd      	mov	sp, r7
   17a6c:	b004      	add	sp, #16
   17a6e:	bd80      	pop	{r7, pc}
   17a70:	000178e9 	.word	0x000178e9
   17a74:	0001cfcc 	.word	0x0001cfcc
   17a78:	0001a001 	.word	0x0001a001
   17a7c:	0001d2b0 	.word	0x0001d2b0
   17a80:	0001a035 	.word	0x0001a035

00017a84 <cryptoauthlib_init>:
 *
 * \return  The status of the CryptoAuthLib initialization
 *            ATCA_SUCCESS - Returned on a successful CryptoAuthLib initialization
 */
ATCA_STATUS cryptoauthlib_init(void)
{
   17a84:	b590      	push	{r4, r7, lr}
   17a86:	b083      	sub	sp, #12
   17a88:	af00      	add	r7, sp, #0
    ATCA_STATUS status = ATCA_NO_DEVICES;
   17a8a:	1dfb      	adds	r3, r7, #7
   17a8c:	22f9      	movs	r2, #249	; 0xf9
   17a8e:	701a      	strb	r2, [r3, #0]
    bool device_locked = false;
   17a90:	1dbb      	adds	r3, r7, #6
   17a92:	2200      	movs	r2, #0
   17a94:	701a      	strb	r2, [r3, #0]
    uint8_t revision[INFO_SIZE];
    
    // Initialize the CryptoAuthLib library
    cfg_ateccx08a_i2c_default.atcai2c.slave_address = AWS_ECC508A_I2C_ADDRESS;
   17a96:	4b1e      	ldr	r3, [pc, #120]	; (17b10 <cryptoauthlib_init+0x8c>)
   17a98:	22b0      	movs	r2, #176	; 0xb0
   17a9a:	711a      	strb	r2, [r3, #4]
    
    do 
    {
        status = atcab_init(&cfg_ateccx08a_i2c_default);
   17a9c:	1dfc      	adds	r4, r7, #7
   17a9e:	4b1c      	ldr	r3, [pc, #112]	; (17b10 <cryptoauthlib_init+0x8c>)
   17aa0:	0018      	movs	r0, r3
   17aa2:	4b1c      	ldr	r3, [pc, #112]	; (17b14 <cryptoauthlib_init+0x90>)
   17aa4:	4798      	blx	r3
   17aa6:	0003      	movs	r3, r0
   17aa8:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   17aaa:	1dfb      	adds	r3, r7, #7
   17aac:	781b      	ldrb	r3, [r3, #0]
   17aae:	2b00      	cmp	r3, #0
   17ab0:	d004      	beq.n	17abc <cryptoauthlib_init+0x38>
        {
            printf("The CryptoAuthLib library failed to initialize.");
   17ab2:	4b19      	ldr	r3, [pc, #100]	; (17b18 <cryptoauthlib_init+0x94>)
   17ab4:	0018      	movs	r0, r3
   17ab6:	4b19      	ldr	r3, [pc, #100]	; (17b1c <cryptoauthlib_init+0x98>)
   17ab8:	4798      	blx	r3
            
            // Break the do/while loop
            break;
   17aba:	e023      	b.n	17b04 <cryptoauthlib_init+0x80>
        }

        // Force the ATECC508A to sleep
        atcab_wakeup();
   17abc:	4b18      	ldr	r3, [pc, #96]	; (17b20 <cryptoauthlib_init+0x9c>)
   17abe:	4798      	blx	r3
        atcab_sleep();
   17ac0:	4b18      	ldr	r3, [pc, #96]	; (17b24 <cryptoauthlib_init+0xa0>)
   17ac2:	4798      	blx	r3
        
        // Check to make sure the ATECC508A Config zone is locked    
	    status = atcab_is_locked(LOCK_ZONE_CONFIG, &device_locked);
   17ac4:	1dfc      	adds	r4, r7, #7
   17ac6:	1dbb      	adds	r3, r7, #6
   17ac8:	0019      	movs	r1, r3
   17aca:	2000      	movs	r0, #0
   17acc:	4b16      	ldr	r3, [pc, #88]	; (17b28 <cryptoauthlib_init+0xa4>)
   17ace:	4798      	blx	r3
   17ad0:	0003      	movs	r3, r0
   17ad2:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   17ad4:	1dfb      	adds	r3, r7, #7
   17ad6:	781b      	ldrb	r3, [r3, #0]
   17ad8:	2b00      	cmp	r3, #0
   17ada:	d004      	beq.n	17ae6 <cryptoauthlib_init+0x62>
        {
            printf("The ATECC508A device is not configured correctly.");
   17adc:	4b13      	ldr	r3, [pc, #76]	; (17b2c <cryptoauthlib_init+0xa8>)
   17ade:	0018      	movs	r0, r3
   17ae0:	4b0e      	ldr	r3, [pc, #56]	; (17b1c <cryptoauthlib_init+0x98>)
   17ae2:	4798      	blx	r3
            
            // Break the do/while loop
            break;
   17ae4:	e00e      	b.n	17b04 <cryptoauthlib_init+0x80>
        }
		
		if(!device_locked)
   17ae6:	1dbb      	adds	r3, r7, #6
   17ae8:	781b      	ldrb	r3, [r3, #0]
   17aea:	2201      	movs	r2, #1
   17aec:	4053      	eors	r3, r2
   17aee:	b2db      	uxtb	r3, r3
   17af0:	2b00      	cmp	r3, #0
   17af2:	d004      	beq.n	17afe <cryptoauthlib_init+0x7a>
        {
	        printf("The ATECC508A device data zone is no configured. \r\n");
   17af4:	4b0e      	ldr	r3, [pc, #56]	; (17b30 <cryptoauthlib_init+0xac>)
   17af6:	0018      	movs	r0, r3
   17af8:	4b0e      	ldr	r3, [pc, #56]	; (17b34 <cryptoauthlib_init+0xb0>)
   17afa:	4798      	blx	r3
	        // Break the do/while loop
	        break;
   17afc:	e002      	b.n	17b04 <cryptoauthlib_init+0x80>
        }

		
        status = ATCA_SUCCESS;
   17afe:	1dfb      	adds	r3, r7, #7
   17b00:	2200      	movs	r2, #0
   17b02:	701a      	strb	r2, [r3, #0]
    } while (false);    
    
    return status;
   17b04:	1dfb      	adds	r3, r7, #7
   17b06:	781b      	ldrb	r3, [r3, #0]
}
   17b08:	0018      	movs	r0, r3
   17b0a:	46bd      	mov	sp, r7
   17b0c:	b003      	add	sp, #12
   17b0e:	bd90      	pop	{r4, r7, pc}
   17b10:	2000040c 	.word	0x2000040c
   17b14:	0000bed5 	.word	0x0000bed5
   17b18:	0001d2c8 	.word	0x0001d2c8
   17b1c:	0001a001 	.word	0x0001a001
   17b20:	0000bf79 	.word	0x0000bf79
   17b24:	0000bfd9 	.word	0x0000bfd9
   17b28:	0000cce9 	.word	0x0000cce9
   17b2c:	0001d2f8 	.word	0x0001d2f8
   17b30:	0001d32c 	.word	0x0001d32c
   17b34:	0001a11d 	.word	0x0001a11d

00017b38 <wifiCryptoInit>:

int wifiCryptoInit(void)
{	
   17b38:	b590      	push	{r4, r7, lr}
   17b3a:	b08b      	sub	sp, #44	; 0x2c
   17b3c:	af02      	add	r7, sp, #8
	int8_t ret;
	ATCA_STATUS atca_status;


	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17b3e:	1d3b      	adds	r3, r7, #4
   17b40:	2218      	movs	r2, #24
   17b42:	2100      	movs	r1, #0
   17b44:	0018      	movs	r0, r3
   17b46:	4b66      	ldr	r3, [pc, #408]	; (17ce0 <wifiCryptoInit+0x1a8>)
   17b48:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   17b4a:	1d3b      	adds	r3, r7, #4
   17b4c:	4a65      	ldr	r2, [pc, #404]	; (17ce4 <wifiCryptoInit+0x1ac>)
   17b4e:	601a      	str	r2, [r3, #0]

	// Initialize the WINC1500 
	ret = m2m_wifi_init(&param);
   17b50:	231f      	movs	r3, #31
   17b52:	18fc      	adds	r4, r7, r3
   17b54:	1d3b      	adds	r3, r7, #4
   17b56:	0018      	movs	r0, r3
   17b58:	4b63      	ldr	r3, [pc, #396]	; (17ce8 <wifiCryptoInit+0x1b0>)
   17b5a:	4798      	blx	r3
   17b5c:	0003      	movs	r3, r0
   17b5e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   17b60:	231f      	movs	r3, #31
   17b62:	18fb      	adds	r3, r7, r3
   17b64:	781b      	ldrb	r3, [r3, #0]
   17b66:	b25b      	sxtb	r3, r3
   17b68:	2b00      	cmp	r3, #0
   17b6a:	d009      	beq.n	17b80 <wifiCryptoInit+0x48>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   17b6c:	231f      	movs	r3, #31
   17b6e:	18fb      	adds	r3, r7, r3
   17b70:	2200      	movs	r2, #0
   17b72:	569a      	ldrsb	r2, [r3, r2]
   17b74:	4b5d      	ldr	r3, [pc, #372]	; (17cec <wifiCryptoInit+0x1b4>)
   17b76:	0011      	movs	r1, r2
   17b78:	0018      	movs	r0, r3
   17b7a:	4b5d      	ldr	r3, [pc, #372]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17b7c:	4798      	blx	r3
		while (1) {
   17b7e:	e7fe      	b.n	17b7e <wifiCryptoInit+0x46>
		}
	}

	// Initialize the ECC608
	atca_status = cryptoauthlib_init();
   17b80:	231e      	movs	r3, #30
   17b82:	18fc      	adds	r4, r7, r3
   17b84:	4b5b      	ldr	r3, [pc, #364]	; (17cf4 <wifiCryptoInit+0x1bc>)
   17b86:	4798      	blx	r3
   17b88:	0003      	movs	r3, r0
   17b8a:	7023      	strb	r3, [r4, #0]
	if (atca_status == ATCACERT_E_SUCCESS)
   17b8c:	231e      	movs	r3, #30
   17b8e:	18fb      	adds	r3, r7, r3
   17b90:	781b      	ldrb	r3, [r3, #0]
   17b92:	2b00      	cmp	r3, #0
   17b94:	d105      	bne.n	17ba2 <wifiCryptoInit+0x6a>
	{
		atca_status = eccPrintInfo();
   17b96:	4b58      	ldr	r3, [pc, #352]	; (17cf8 <wifiCryptoInit+0x1c0>)
   17b98:	4798      	blx	r3
   17b9a:	0002      	movs	r2, r0
   17b9c:	231e      	movs	r3, #30
   17b9e:	18fb      	adds	r3, r7, r3
   17ba0:	701a      	strb	r2, [r3, #0]
	}
	
	// Initialize the WINC1500 SSL module
	ret = m2m_ssl_init(ssl_cb);
   17ba2:	231f      	movs	r3, #31
   17ba4:	18fc      	adds	r4, r7, r3
   17ba6:	4b55      	ldr	r3, [pc, #340]	; (17cfc <wifiCryptoInit+0x1c4>)
   17ba8:	0018      	movs	r0, r3
   17baa:	4b55      	ldr	r3, [pc, #340]	; (17d00 <wifiCryptoInit+0x1c8>)
   17bac:	4798      	blx	r3
   17bae:	0003      	movs	r3, r0
   17bb0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS)
   17bb2:	231f      	movs	r3, #31
   17bb4:	18fb      	adds	r3, r7, r3
   17bb6:	781b      	ldrb	r3, [r3, #0]
   17bb8:	b25b      	sxtb	r3, r3
   17bba:	2b00      	cmp	r3, #0
   17bbc:	d009      	beq.n	17bd2 <wifiCryptoInit+0x9a>
	{
		printf("main: m2m_ssl_init call error!(%d)\r\n", ret);
   17bbe:	231f      	movs	r3, #31
   17bc0:	18fb      	adds	r3, r7, r3
   17bc2:	2200      	movs	r2, #0
   17bc4:	569a      	ldrsb	r2, [r3, r2]
   17bc6:	4b4f      	ldr	r3, [pc, #316]	; (17d04 <wifiCryptoInit+0x1cc>)
   17bc8:	0011      	movs	r1, r2
   17bca:	0018      	movs	r0, r3
   17bcc:	4b48      	ldr	r3, [pc, #288]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17bce:	4798      	blx	r3
		while (1) {
   17bd0:	e7fe      	b.n	17bd0 <wifiCryptoInit+0x98>
		}
	}


	// Set the active WINC1500 TLS cipher suites to ECC only
	ret = m2m_ssl_set_active_ciphersuites(SSL_ECC_ONLY_CIPHERS);
   17bd2:	231f      	movs	r3, #31
   17bd4:	18fc      	adds	r4, r7, r3
   17bd6:	23a0      	movs	r3, #160	; 0xa0
   17bd8:	021b      	lsls	r3, r3, #8
   17bda:	0018      	movs	r0, r3
   17bdc:	4b4a      	ldr	r3, [pc, #296]	; (17d08 <wifiCryptoInit+0x1d0>)
   17bde:	4798      	blx	r3
   17be0:	0003      	movs	r3, r0
   17be2:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS)
   17be4:	231f      	movs	r3, #31
   17be6:	18fb      	adds	r3, r7, r3
   17be8:	781b      	ldrb	r3, [r3, #0]
   17bea:	b25b      	sxtb	r3, r3
   17bec:	2b00      	cmp	r3, #0
   17bee:	d009      	beq.n	17c04 <wifiCryptoInit+0xcc>
	{
		printf("main: m2m_ssl_set_active_ciphersuites call error!(%d)\r\n", ret);
   17bf0:	231f      	movs	r3, #31
   17bf2:	18fb      	adds	r3, r7, r3
   17bf4:	2200      	movs	r2, #0
   17bf6:	569a      	ldrsb	r2, [r3, r2]
   17bf8:	4b44      	ldr	r3, [pc, #272]	; (17d0c <wifiCryptoInit+0x1d4>)
   17bfa:	0011      	movs	r1, r2
   17bfc:	0018      	movs	r0, r3
   17bfe:	4b3c      	ldr	r3, [pc, #240]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17c00:	4798      	blx	r3
		while (1) {
   17c02:	e7fe      	b.n	17c02 <wifiCryptoInit+0xca>
		}
	}


	// Prepare the MQTT topic
	gAwsMqttClientId[20*2] = 0; // Add terminating null
   17c04:	4b42      	ldr	r3, [pc, #264]	; (17d10 <wifiCryptoInit+0x1d8>)
   17c06:	2228      	movs	r2, #40	; 0x28
   17c08:	2100      	movs	r1, #0
   17c0a:	5499      	strb	r1, [r3, r2]

	// Make the thing name the same as the MQTT client ID
	memcpy(g_thing_name, gAwsMqttClientId, min(sizeof(g_thing_name), sizeof(gAwsMqttClientId)));
   17c0c:	4a41      	ldr	r2, [pc, #260]	; (17d14 <wifiCryptoInit+0x1dc>)
   17c0e:	4b40      	ldr	r3, [pc, #256]	; (17d10 <wifiCryptoInit+0x1d8>)
   17c10:	0010      	movs	r0, r2
   17c12:	0019      	movs	r1, r3
   17c14:	2364      	movs	r3, #100	; 0x64
   17c16:	001a      	movs	r2, r3
   17c18:	4b3f      	ldr	r3, [pc, #252]	; (17d18 <wifiCryptoInit+0x1e0>)
   17c1a:	4798      	blx	r3
	g_thing_name[sizeof(g_thing_name)-1] = 0; // Ensure a terminating null
   17c1c:	4b3d      	ldr	r3, [pc, #244]	; (17d14 <wifiCryptoInit+0x1dc>)
   17c1e:	2280      	movs	r2, #128	; 0x80
   17c20:	2100      	movs	r1, #0
   17c22:	5499      	strb	r1, [r3, r2]
	
	printf("Thing name = %s\r\n", g_thing_name);
   17c24:	4a3b      	ldr	r2, [pc, #236]	; (17d14 <wifiCryptoInit+0x1dc>)
   17c26:	4b3d      	ldr	r3, [pc, #244]	; (17d1c <wifiCryptoInit+0x1e4>)
   17c28:	0011      	movs	r1, r2
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b30      	ldr	r3, [pc, #192]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17c2e:	4798      	blx	r3

	//Generate MQTT Topic
	cloud_create_topic(gSubscribe_Channel, DEVICE_TYPE, gAwsMqttClientId, SUBSCRIBE_TOPIC);
   17c30:	4b3b      	ldr	r3, [pc, #236]	; (17d20 <wifiCryptoInit+0x1e8>)
   17c32:	4a37      	ldr	r2, [pc, #220]	; (17d10 <wifiCryptoInit+0x1d8>)
   17c34:	493b      	ldr	r1, [pc, #236]	; (17d24 <wifiCryptoInit+0x1ec>)
   17c36:	483c      	ldr	r0, [pc, #240]	; (17d28 <wifiCryptoInit+0x1f0>)
   17c38:	4c3c      	ldr	r4, [pc, #240]	; (17d2c <wifiCryptoInit+0x1f4>)
   17c3a:	47a0      	blx	r4
	cloud_create_topic(gPublish_Channel, DEVICE_TYPE, gAwsMqttClientId, SUBSCRIBE_TOPIC);
   17c3c:	4b38      	ldr	r3, [pc, #224]	; (17d20 <wifiCryptoInit+0x1e8>)
   17c3e:	4a34      	ldr	r2, [pc, #208]	; (17d10 <wifiCryptoInit+0x1d8>)
   17c40:	4938      	ldr	r1, [pc, #224]	; (17d24 <wifiCryptoInit+0x1ec>)
   17c42:	483b      	ldr	r0, [pc, #236]	; (17d30 <wifiCryptoInit+0x1f8>)
   17c44:	4c39      	ldr	r4, [pc, #228]	; (17d2c <wifiCryptoInit+0x1f4>)
   17c46:	47a0      	blx	r4
	DBG_LOG("gSubscribe_Channel: %s\r\n", gSubscribe_Channel);
   17c48:	4b3a      	ldr	r3, [pc, #232]	; (17d34 <wifiCryptoInit+0x1fc>)
   17c4a:	0018      	movs	r0, r3
   17c4c:	4b3a      	ldr	r3, [pc, #232]	; (17d38 <wifiCryptoInit+0x200>)
   17c4e:	4798      	blx	r3
   17c50:	4a35      	ldr	r2, [pc, #212]	; (17d28 <wifiCryptoInit+0x1f0>)
   17c52:	4b3a      	ldr	r3, [pc, #232]	; (17d3c <wifiCryptoInit+0x204>)
   17c54:	0011      	movs	r1, r2
   17c56:	0018      	movs	r0, r3
   17c58:	4b25      	ldr	r3, [pc, #148]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17c5a:	4798      	blx	r3
	DBG_LOG("gPublish_Channel: %s\r\n", gPublish_Channel);
   17c5c:	4b35      	ldr	r3, [pc, #212]	; (17d34 <wifiCryptoInit+0x1fc>)
   17c5e:	0018      	movs	r0, r3
   17c60:	4b35      	ldr	r3, [pc, #212]	; (17d38 <wifiCryptoInit+0x200>)
   17c62:	4798      	blx	r3
   17c64:	4a32      	ldr	r2, [pc, #200]	; (17d30 <wifiCryptoInit+0x1f8>)
   17c66:	4b36      	ldr	r3, [pc, #216]	; (17d40 <wifiCryptoInit+0x208>)
   17c68:	0011      	movs	r1, r2
   17c6a:	0018      	movs	r0, r3
   17c6c:	4b20      	ldr	r3, [pc, #128]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17c6e:	4798      	blx	r3

	//Set Wi-Fi AP credintials
	memcpy(gDefaultSSID, MAIN_WLAN_SSID, strlen(MAIN_WLAN_SSID));
   17c70:	4934      	ldr	r1, [pc, #208]	; (17d44 <wifiCryptoInit+0x20c>)
   17c72:	4b35      	ldr	r3, [pc, #212]	; (17d48 <wifiCryptoInit+0x210>)
   17c74:	2207      	movs	r2, #7
   17c76:	0018      	movs	r0, r3
   17c78:	4b27      	ldr	r3, [pc, #156]	; (17d18 <wifiCryptoInit+0x1e0>)
   17c7a:	4798      	blx	r3
	memcpy(gDefaultKey, MAIN_WLAN_PSK, strlen(MAIN_WLAN_PSK));
   17c7c:	4933      	ldr	r1, [pc, #204]	; (17d4c <wifiCryptoInit+0x214>)
   17c7e:	4b34      	ldr	r3, [pc, #208]	; (17d50 <wifiCryptoInit+0x218>)
   17c80:	2209      	movs	r2, #9
   17c82:	0018      	movs	r0, r3
   17c84:	4b24      	ldr	r3, [pc, #144]	; (17d18 <wifiCryptoInit+0x1e0>)
   17c86:	4798      	blx	r3
	gAuthType = MAIN_WLAN_AUTH;
   17c88:	4b32      	ldr	r3, [pc, #200]	; (17d54 <wifiCryptoInit+0x21c>)
   17c8a:	2202      	movs	r2, #2
   17c8c:	701a      	strb	r2, [r3, #0]
	gDefaultSSID[strlen(MAIN_WLAN_SSID)]=0;
   17c8e:	4b2e      	ldr	r3, [pc, #184]	; (17d48 <wifiCryptoInit+0x210>)
   17c90:	2200      	movs	r2, #0
   17c92:	71da      	strb	r2, [r3, #7]
	gDefaultKey[strlen(MAIN_WLAN_PSK)]=0;
   17c94:	4b2e      	ldr	r3, [pc, #184]	; (17d50 <wifiCryptoInit+0x218>)
   17c96:	2200      	movs	r2, #0
   17c98:	725a      	strb	r2, [r3, #9]
	
	register_env_sensor_udpate_callback_handler(MiWiSensorCallbackHandler);
   17c9a:	4b2f      	ldr	r3, [pc, #188]	; (17d58 <wifiCryptoInit+0x220>)
   17c9c:	0018      	movs	r0, r3
   17c9e:	4b2f      	ldr	r3, [pc, #188]	; (17d5c <wifiCryptoInit+0x224>)
   17ca0:	4798      	blx	r3

	DBG_LOG("connecting AP, ssid = %s , pwd= %s\n", (char *)gDefaultSSID,(char *)gDefaultKey);
   17ca2:	4b24      	ldr	r3, [pc, #144]	; (17d34 <wifiCryptoInit+0x1fc>)
   17ca4:	0018      	movs	r0, r3
   17ca6:	4b24      	ldr	r3, [pc, #144]	; (17d38 <wifiCryptoInit+0x200>)
   17ca8:	4798      	blx	r3
   17caa:	4a29      	ldr	r2, [pc, #164]	; (17d50 <wifiCryptoInit+0x218>)
   17cac:	4926      	ldr	r1, [pc, #152]	; (17d48 <wifiCryptoInit+0x210>)
   17cae:	4b2c      	ldr	r3, [pc, #176]	; (17d60 <wifiCryptoInit+0x228>)
   17cb0:	0018      	movs	r0, r3
   17cb2:	4b0f      	ldr	r3, [pc, #60]	; (17cf0 <wifiCryptoInit+0x1b8>)
   17cb4:	4798      	blx	r3
	m2m_wifi_connect((char *)gDefaultSSID, strlen(gDefaultSSID), gAuthType, (char *)gDefaultKey, M2M_WIFI_CH_ALL);
   17cb6:	4b24      	ldr	r3, [pc, #144]	; (17d48 <wifiCryptoInit+0x210>)
   17cb8:	0018      	movs	r0, r3
   17cba:	4b2a      	ldr	r3, [pc, #168]	; (17d64 <wifiCryptoInit+0x22c>)
   17cbc:	4798      	blx	r3
   17cbe:	0003      	movs	r3, r0
   17cc0:	b2d9      	uxtb	r1, r3
   17cc2:	4b24      	ldr	r3, [pc, #144]	; (17d54 <wifiCryptoInit+0x21c>)
   17cc4:	781a      	ldrb	r2, [r3, #0]
   17cc6:	4c22      	ldr	r4, [pc, #136]	; (17d50 <wifiCryptoInit+0x218>)
   17cc8:	481f      	ldr	r0, [pc, #124]	; (17d48 <wifiCryptoInit+0x210>)
   17cca:	23ff      	movs	r3, #255	; 0xff
   17ccc:	9300      	str	r3, [sp, #0]
   17cce:	0023      	movs	r3, r4
   17cd0:	4c25      	ldr	r4, [pc, #148]	; (17d68 <wifiCryptoInit+0x230>)
   17cd2:	47a0      	blx	r4
}
   17cd4:	46c0      	nop			; (mov r8, r8)
   17cd6:	0018      	movs	r0, r3
   17cd8:	46bd      	mov	sp, r7
   17cda:	b009      	add	sp, #36	; 0x24
   17cdc:	bd90      	pop	{r4, r7, pc}
   17cde:	46c0      	nop			; (mov r8, r8)
   17ce0:	00019ea1 	.word	0x00019ea1
   17ce4:	00017441 	.word	0x00017441
   17ce8:	00002161 	.word	0x00002161
   17cec:	0001d360 	.word	0x0001d360
   17cf0:	0001a001 	.word	0x0001a001
   17cf4:	00017a85 	.word	0x00017a85
   17cf8:	00017371 	.word	0x00017371
   17cfc:	00017a1d 	.word	0x00017a1d
   17d00:	00001d25 	.word	0x00001d25
   17d04:	0001d388 	.word	0x0001d388
   17d08:	00001cd9 	.word	0x00001cd9
   17d0c:	0001d3b0 	.word	0x0001d3b0
   17d10:	200004b8 	.word	0x200004b8
   17d14:	200017c0 	.word	0x200017c0
   17d18:	00019e6b 	.word	0x00019e6b
   17d1c:	0001d3e8 	.word	0x0001d3e8
   17d20:	0001d3fc 	.word	0x0001d3fc
   17d24:	0001cf5c 	.word	0x0001cf5c
   17d28:	20000d30 	.word	0x20000d30
   17d2c:	0000b619 	.word	0x0000b619
   17d30:	20000c04 	.word	0x20000c04
   17d34:	0001d068 	.word	0x0001d068
   17d38:	0001a11d 	.word	0x0001a11d
   17d3c:	0001d408 	.word	0x0001d408
   17d40:	0001d424 	.word	0x0001d424
   17d44:	0001d43c 	.word	0x0001d43c
   17d48:	20000918 	.word	0x20000918
   17d4c:	0001d444 	.word	0x0001d444
   17d50:	2000093c 	.word	0x2000093c
   17d54:	20000939 	.word	0x20000939
   17d58:	00017011 	.word	0x00017011
   17d5c:	00016ff5 	.word	0x00016ff5
   17d60:	0001d450 	.word	0x0001d450
   17d64:	0001a3e3 	.word	0x0001a3e3
   17d68:	00002369 	.word	0x00002369

00017d6c <floor>:
   17d6c:	4a45      	ldr	r2, [pc, #276]	; (17e84 <floor+0x118>)
   17d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d70:	4657      	mov	r7, sl
   17d72:	4692      	mov	sl, r2
   17d74:	004b      	lsls	r3, r1, #1
   17d76:	0d5b      	lsrs	r3, r3, #21
   17d78:	449a      	add	sl, r3
   17d7a:	464e      	mov	r6, r9
   17d7c:	4645      	mov	r5, r8
   17d7e:	46de      	mov	lr, fp
   17d80:	4652      	mov	r2, sl
   17d82:	b5e0      	push	{r5, r6, r7, lr}
   17d84:	000c      	movs	r4, r1
   17d86:	0005      	movs	r5, r0
   17d88:	000e      	movs	r6, r1
   17d8a:	4689      	mov	r9, r1
   17d8c:	0007      	movs	r7, r0
   17d8e:	2a13      	cmp	r2, #19
   17d90:	dc22      	bgt.n	17dd8 <floor+0x6c>
   17d92:	2a00      	cmp	r2, #0
   17d94:	db47      	blt.n	17e26 <floor+0xba>
   17d96:	4652      	mov	r2, sl
   17d98:	4b3b      	ldr	r3, [pc, #236]	; (17e88 <floor+0x11c>)
   17d9a:	4113      	asrs	r3, r2
   17d9c:	4698      	mov	r8, r3
   17d9e:	000b      	movs	r3, r1
   17da0:	4642      	mov	r2, r8
   17da2:	4013      	ands	r3, r2
   17da4:	4303      	orrs	r3, r0
   17da6:	d011      	beq.n	17dcc <floor+0x60>
   17da8:	4a38      	ldr	r2, [pc, #224]	; (17e8c <floor+0x120>)
   17daa:	4b39      	ldr	r3, [pc, #228]	; (17e90 <floor+0x124>)
   17dac:	f000 fa54 	bl	18258 <__aeabi_dadd>
   17db0:	2200      	movs	r2, #0
   17db2:	2300      	movs	r3, #0
   17db4:	f000 fa12 	bl	181dc <__aeabi_dcmpgt>
   17db8:	2800      	cmp	r0, #0
   17dba:	d005      	beq.n	17dc8 <floor+0x5c>
   17dbc:	2c00      	cmp	r4, #0
   17dbe:	db41      	blt.n	17e44 <floor+0xd8>
   17dc0:	464e      	mov	r6, r9
   17dc2:	4643      	mov	r3, r8
   17dc4:	2700      	movs	r7, #0
   17dc6:	439e      	bics	r6, r3
   17dc8:	0038      	movs	r0, r7
   17dca:	0031      	movs	r1, r6
   17dcc:	bc3c      	pop	{r2, r3, r4, r5}
   17dce:	4690      	mov	r8, r2
   17dd0:	4699      	mov	r9, r3
   17dd2:	46a2      	mov	sl, r4
   17dd4:	46ab      	mov	fp, r5
   17dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17dd8:	4652      	mov	r2, sl
   17dda:	2a33      	cmp	r2, #51	; 0x33
   17ddc:	dd08      	ble.n	17df0 <floor+0x84>
   17dde:	2380      	movs	r3, #128	; 0x80
   17de0:	00db      	lsls	r3, r3, #3
   17de2:	459a      	cmp	sl, r3
   17de4:	d1f2      	bne.n	17dcc <floor+0x60>
   17de6:	0002      	movs	r2, r0
   17de8:	000b      	movs	r3, r1
   17dea:	f000 fa35 	bl	18258 <__aeabi_dadd>
   17dee:	e7ed      	b.n	17dcc <floor+0x60>
   17df0:	4a28      	ldr	r2, [pc, #160]	; (17e94 <floor+0x128>)
   17df2:	4694      	mov	ip, r2
   17df4:	2201      	movs	r2, #1
   17df6:	4463      	add	r3, ip
   17df8:	4252      	negs	r2, r2
   17dfa:	40da      	lsrs	r2, r3
   17dfc:	4693      	mov	fp, r2
   17dfe:	4202      	tst	r2, r0
   17e00:	d0e4      	beq.n	17dcc <floor+0x60>
   17e02:	4a22      	ldr	r2, [pc, #136]	; (17e8c <floor+0x120>)
   17e04:	4b22      	ldr	r3, [pc, #136]	; (17e90 <floor+0x124>)
   17e06:	f000 fa27 	bl	18258 <__aeabi_dadd>
   17e0a:	2200      	movs	r2, #0
   17e0c:	2300      	movs	r3, #0
   17e0e:	f000 f9e5 	bl	181dc <__aeabi_dcmpgt>
   17e12:	2800      	cmp	r0, #0
   17e14:	d0d8      	beq.n	17dc8 <floor+0x5c>
   17e16:	2c00      	cmp	r4, #0
   17e18:	db1a      	blt.n	17e50 <floor+0xe4>
   17e1a:	465b      	mov	r3, fp
   17e1c:	464e      	mov	r6, r9
   17e1e:	439f      	bics	r7, r3
   17e20:	0038      	movs	r0, r7
   17e22:	0031      	movs	r1, r6
   17e24:	e7d2      	b.n	17dcc <floor+0x60>
   17e26:	4a19      	ldr	r2, [pc, #100]	; (17e8c <floor+0x120>)
   17e28:	4b19      	ldr	r3, [pc, #100]	; (17e90 <floor+0x124>)
   17e2a:	f000 fa15 	bl	18258 <__aeabi_dadd>
   17e2e:	2200      	movs	r2, #0
   17e30:	2300      	movs	r3, #0
   17e32:	f000 f9d3 	bl	181dc <__aeabi_dcmpgt>
   17e36:	2800      	cmp	r0, #0
   17e38:	d0c6      	beq.n	17dc8 <floor+0x5c>
   17e3a:	2c00      	cmp	r4, #0
   17e3c:	db16      	blt.n	17e6c <floor+0x100>
   17e3e:	2700      	movs	r7, #0
   17e40:	2600      	movs	r6, #0
   17e42:	e7c1      	b.n	17dc8 <floor+0x5c>
   17e44:	2380      	movs	r3, #128	; 0x80
   17e46:	4652      	mov	r2, sl
   17e48:	035b      	lsls	r3, r3, #13
   17e4a:	4113      	asrs	r3, r2
   17e4c:	4499      	add	r9, r3
   17e4e:	e7b7      	b.n	17dc0 <floor+0x54>
   17e50:	4653      	mov	r3, sl
   17e52:	2b14      	cmp	r3, #20
   17e54:	d012      	beq.n	17e7c <floor+0x110>
   17e56:	2334      	movs	r3, #52	; 0x34
   17e58:	4652      	mov	r2, sl
   17e5a:	2701      	movs	r7, #1
   17e5c:	1a9b      	subs	r3, r3, r2
   17e5e:	409f      	lsls	r7, r3
   17e60:	197f      	adds	r7, r7, r5
   17e62:	42af      	cmp	r7, r5
   17e64:	419b      	sbcs	r3, r3
   17e66:	425b      	negs	r3, r3
   17e68:	4499      	add	r9, r3
   17e6a:	e7d6      	b.n	17e1a <floor+0xae>
   17e6c:	0064      	lsls	r4, r4, #1
   17e6e:	0864      	lsrs	r4, r4, #1
   17e70:	4325      	orrs	r5, r4
   17e72:	2700      	movs	r7, #0
   17e74:	2d00      	cmp	r5, #0
   17e76:	d0a7      	beq.n	17dc8 <floor+0x5c>
   17e78:	4e07      	ldr	r6, [pc, #28]	; (17e98 <floor+0x12c>)
   17e7a:	e7a5      	b.n	17dc8 <floor+0x5c>
   17e7c:	3b13      	subs	r3, #19
   17e7e:	469c      	mov	ip, r3
   17e80:	44e1      	add	r9, ip
   17e82:	e7ca      	b.n	17e1a <floor+0xae>
   17e84:	fffffc01 	.word	0xfffffc01
   17e88:	000fffff 	.word	0x000fffff
   17e8c:	8800759c 	.word	0x8800759c
   17e90:	7e37e43c 	.word	0x7e37e43c
   17e94:	fffffbed 	.word	0xfffffbed
   17e98:	bff00000 	.word	0xbff00000

00017e9c <__udivsi3>:
   17e9c:	2200      	movs	r2, #0
   17e9e:	0843      	lsrs	r3, r0, #1
   17ea0:	428b      	cmp	r3, r1
   17ea2:	d374      	bcc.n	17f8e <__udivsi3+0xf2>
   17ea4:	0903      	lsrs	r3, r0, #4
   17ea6:	428b      	cmp	r3, r1
   17ea8:	d35f      	bcc.n	17f6a <__udivsi3+0xce>
   17eaa:	0a03      	lsrs	r3, r0, #8
   17eac:	428b      	cmp	r3, r1
   17eae:	d344      	bcc.n	17f3a <__udivsi3+0x9e>
   17eb0:	0b03      	lsrs	r3, r0, #12
   17eb2:	428b      	cmp	r3, r1
   17eb4:	d328      	bcc.n	17f08 <__udivsi3+0x6c>
   17eb6:	0c03      	lsrs	r3, r0, #16
   17eb8:	428b      	cmp	r3, r1
   17eba:	d30d      	bcc.n	17ed8 <__udivsi3+0x3c>
   17ebc:	22ff      	movs	r2, #255	; 0xff
   17ebe:	0209      	lsls	r1, r1, #8
   17ec0:	ba12      	rev	r2, r2
   17ec2:	0c03      	lsrs	r3, r0, #16
   17ec4:	428b      	cmp	r3, r1
   17ec6:	d302      	bcc.n	17ece <__udivsi3+0x32>
   17ec8:	1212      	asrs	r2, r2, #8
   17eca:	0209      	lsls	r1, r1, #8
   17ecc:	d065      	beq.n	17f9a <__udivsi3+0xfe>
   17ece:	0b03      	lsrs	r3, r0, #12
   17ed0:	428b      	cmp	r3, r1
   17ed2:	d319      	bcc.n	17f08 <__udivsi3+0x6c>
   17ed4:	e000      	b.n	17ed8 <__udivsi3+0x3c>
   17ed6:	0a09      	lsrs	r1, r1, #8
   17ed8:	0bc3      	lsrs	r3, r0, #15
   17eda:	428b      	cmp	r3, r1
   17edc:	d301      	bcc.n	17ee2 <__udivsi3+0x46>
   17ede:	03cb      	lsls	r3, r1, #15
   17ee0:	1ac0      	subs	r0, r0, r3
   17ee2:	4152      	adcs	r2, r2
   17ee4:	0b83      	lsrs	r3, r0, #14
   17ee6:	428b      	cmp	r3, r1
   17ee8:	d301      	bcc.n	17eee <__udivsi3+0x52>
   17eea:	038b      	lsls	r3, r1, #14
   17eec:	1ac0      	subs	r0, r0, r3
   17eee:	4152      	adcs	r2, r2
   17ef0:	0b43      	lsrs	r3, r0, #13
   17ef2:	428b      	cmp	r3, r1
   17ef4:	d301      	bcc.n	17efa <__udivsi3+0x5e>
   17ef6:	034b      	lsls	r3, r1, #13
   17ef8:	1ac0      	subs	r0, r0, r3
   17efa:	4152      	adcs	r2, r2
   17efc:	0b03      	lsrs	r3, r0, #12
   17efe:	428b      	cmp	r3, r1
   17f00:	d301      	bcc.n	17f06 <__udivsi3+0x6a>
   17f02:	030b      	lsls	r3, r1, #12
   17f04:	1ac0      	subs	r0, r0, r3
   17f06:	4152      	adcs	r2, r2
   17f08:	0ac3      	lsrs	r3, r0, #11
   17f0a:	428b      	cmp	r3, r1
   17f0c:	d301      	bcc.n	17f12 <__udivsi3+0x76>
   17f0e:	02cb      	lsls	r3, r1, #11
   17f10:	1ac0      	subs	r0, r0, r3
   17f12:	4152      	adcs	r2, r2
   17f14:	0a83      	lsrs	r3, r0, #10
   17f16:	428b      	cmp	r3, r1
   17f18:	d301      	bcc.n	17f1e <__udivsi3+0x82>
   17f1a:	028b      	lsls	r3, r1, #10
   17f1c:	1ac0      	subs	r0, r0, r3
   17f1e:	4152      	adcs	r2, r2
   17f20:	0a43      	lsrs	r3, r0, #9
   17f22:	428b      	cmp	r3, r1
   17f24:	d301      	bcc.n	17f2a <__udivsi3+0x8e>
   17f26:	024b      	lsls	r3, r1, #9
   17f28:	1ac0      	subs	r0, r0, r3
   17f2a:	4152      	adcs	r2, r2
   17f2c:	0a03      	lsrs	r3, r0, #8
   17f2e:	428b      	cmp	r3, r1
   17f30:	d301      	bcc.n	17f36 <__udivsi3+0x9a>
   17f32:	020b      	lsls	r3, r1, #8
   17f34:	1ac0      	subs	r0, r0, r3
   17f36:	4152      	adcs	r2, r2
   17f38:	d2cd      	bcs.n	17ed6 <__udivsi3+0x3a>
   17f3a:	09c3      	lsrs	r3, r0, #7
   17f3c:	428b      	cmp	r3, r1
   17f3e:	d301      	bcc.n	17f44 <__udivsi3+0xa8>
   17f40:	01cb      	lsls	r3, r1, #7
   17f42:	1ac0      	subs	r0, r0, r3
   17f44:	4152      	adcs	r2, r2
   17f46:	0983      	lsrs	r3, r0, #6
   17f48:	428b      	cmp	r3, r1
   17f4a:	d301      	bcc.n	17f50 <__udivsi3+0xb4>
   17f4c:	018b      	lsls	r3, r1, #6
   17f4e:	1ac0      	subs	r0, r0, r3
   17f50:	4152      	adcs	r2, r2
   17f52:	0943      	lsrs	r3, r0, #5
   17f54:	428b      	cmp	r3, r1
   17f56:	d301      	bcc.n	17f5c <__udivsi3+0xc0>
   17f58:	014b      	lsls	r3, r1, #5
   17f5a:	1ac0      	subs	r0, r0, r3
   17f5c:	4152      	adcs	r2, r2
   17f5e:	0903      	lsrs	r3, r0, #4
   17f60:	428b      	cmp	r3, r1
   17f62:	d301      	bcc.n	17f68 <__udivsi3+0xcc>
   17f64:	010b      	lsls	r3, r1, #4
   17f66:	1ac0      	subs	r0, r0, r3
   17f68:	4152      	adcs	r2, r2
   17f6a:	08c3      	lsrs	r3, r0, #3
   17f6c:	428b      	cmp	r3, r1
   17f6e:	d301      	bcc.n	17f74 <__udivsi3+0xd8>
   17f70:	00cb      	lsls	r3, r1, #3
   17f72:	1ac0      	subs	r0, r0, r3
   17f74:	4152      	adcs	r2, r2
   17f76:	0883      	lsrs	r3, r0, #2
   17f78:	428b      	cmp	r3, r1
   17f7a:	d301      	bcc.n	17f80 <__udivsi3+0xe4>
   17f7c:	008b      	lsls	r3, r1, #2
   17f7e:	1ac0      	subs	r0, r0, r3
   17f80:	4152      	adcs	r2, r2
   17f82:	0843      	lsrs	r3, r0, #1
   17f84:	428b      	cmp	r3, r1
   17f86:	d301      	bcc.n	17f8c <__udivsi3+0xf0>
   17f88:	004b      	lsls	r3, r1, #1
   17f8a:	1ac0      	subs	r0, r0, r3
   17f8c:	4152      	adcs	r2, r2
   17f8e:	1a41      	subs	r1, r0, r1
   17f90:	d200      	bcs.n	17f94 <__udivsi3+0xf8>
   17f92:	4601      	mov	r1, r0
   17f94:	4152      	adcs	r2, r2
   17f96:	4610      	mov	r0, r2
   17f98:	4770      	bx	lr
   17f9a:	e7ff      	b.n	17f9c <__udivsi3+0x100>
   17f9c:	b501      	push	{r0, lr}
   17f9e:	2000      	movs	r0, #0
   17fa0:	f000 f8f0 	bl	18184 <__aeabi_idiv0>
   17fa4:	bd02      	pop	{r1, pc}
   17fa6:	46c0      	nop			; (mov r8, r8)

00017fa8 <__aeabi_uidivmod>:
   17fa8:	2900      	cmp	r1, #0
   17faa:	d0f7      	beq.n	17f9c <__udivsi3+0x100>
   17fac:	e776      	b.n	17e9c <__udivsi3>
   17fae:	4770      	bx	lr

00017fb0 <__divsi3>:
   17fb0:	4603      	mov	r3, r0
   17fb2:	430b      	orrs	r3, r1
   17fb4:	d47f      	bmi.n	180b6 <__divsi3+0x106>
   17fb6:	2200      	movs	r2, #0
   17fb8:	0843      	lsrs	r3, r0, #1
   17fba:	428b      	cmp	r3, r1
   17fbc:	d374      	bcc.n	180a8 <__divsi3+0xf8>
   17fbe:	0903      	lsrs	r3, r0, #4
   17fc0:	428b      	cmp	r3, r1
   17fc2:	d35f      	bcc.n	18084 <__divsi3+0xd4>
   17fc4:	0a03      	lsrs	r3, r0, #8
   17fc6:	428b      	cmp	r3, r1
   17fc8:	d344      	bcc.n	18054 <__divsi3+0xa4>
   17fca:	0b03      	lsrs	r3, r0, #12
   17fcc:	428b      	cmp	r3, r1
   17fce:	d328      	bcc.n	18022 <__divsi3+0x72>
   17fd0:	0c03      	lsrs	r3, r0, #16
   17fd2:	428b      	cmp	r3, r1
   17fd4:	d30d      	bcc.n	17ff2 <__divsi3+0x42>
   17fd6:	22ff      	movs	r2, #255	; 0xff
   17fd8:	0209      	lsls	r1, r1, #8
   17fda:	ba12      	rev	r2, r2
   17fdc:	0c03      	lsrs	r3, r0, #16
   17fde:	428b      	cmp	r3, r1
   17fe0:	d302      	bcc.n	17fe8 <__divsi3+0x38>
   17fe2:	1212      	asrs	r2, r2, #8
   17fe4:	0209      	lsls	r1, r1, #8
   17fe6:	d065      	beq.n	180b4 <__divsi3+0x104>
   17fe8:	0b03      	lsrs	r3, r0, #12
   17fea:	428b      	cmp	r3, r1
   17fec:	d319      	bcc.n	18022 <__divsi3+0x72>
   17fee:	e000      	b.n	17ff2 <__divsi3+0x42>
   17ff0:	0a09      	lsrs	r1, r1, #8
   17ff2:	0bc3      	lsrs	r3, r0, #15
   17ff4:	428b      	cmp	r3, r1
   17ff6:	d301      	bcc.n	17ffc <__divsi3+0x4c>
   17ff8:	03cb      	lsls	r3, r1, #15
   17ffa:	1ac0      	subs	r0, r0, r3
   17ffc:	4152      	adcs	r2, r2
   17ffe:	0b83      	lsrs	r3, r0, #14
   18000:	428b      	cmp	r3, r1
   18002:	d301      	bcc.n	18008 <__divsi3+0x58>
   18004:	038b      	lsls	r3, r1, #14
   18006:	1ac0      	subs	r0, r0, r3
   18008:	4152      	adcs	r2, r2
   1800a:	0b43      	lsrs	r3, r0, #13
   1800c:	428b      	cmp	r3, r1
   1800e:	d301      	bcc.n	18014 <__divsi3+0x64>
   18010:	034b      	lsls	r3, r1, #13
   18012:	1ac0      	subs	r0, r0, r3
   18014:	4152      	adcs	r2, r2
   18016:	0b03      	lsrs	r3, r0, #12
   18018:	428b      	cmp	r3, r1
   1801a:	d301      	bcc.n	18020 <__divsi3+0x70>
   1801c:	030b      	lsls	r3, r1, #12
   1801e:	1ac0      	subs	r0, r0, r3
   18020:	4152      	adcs	r2, r2
   18022:	0ac3      	lsrs	r3, r0, #11
   18024:	428b      	cmp	r3, r1
   18026:	d301      	bcc.n	1802c <__divsi3+0x7c>
   18028:	02cb      	lsls	r3, r1, #11
   1802a:	1ac0      	subs	r0, r0, r3
   1802c:	4152      	adcs	r2, r2
   1802e:	0a83      	lsrs	r3, r0, #10
   18030:	428b      	cmp	r3, r1
   18032:	d301      	bcc.n	18038 <__divsi3+0x88>
   18034:	028b      	lsls	r3, r1, #10
   18036:	1ac0      	subs	r0, r0, r3
   18038:	4152      	adcs	r2, r2
   1803a:	0a43      	lsrs	r3, r0, #9
   1803c:	428b      	cmp	r3, r1
   1803e:	d301      	bcc.n	18044 <__divsi3+0x94>
   18040:	024b      	lsls	r3, r1, #9
   18042:	1ac0      	subs	r0, r0, r3
   18044:	4152      	adcs	r2, r2
   18046:	0a03      	lsrs	r3, r0, #8
   18048:	428b      	cmp	r3, r1
   1804a:	d301      	bcc.n	18050 <__divsi3+0xa0>
   1804c:	020b      	lsls	r3, r1, #8
   1804e:	1ac0      	subs	r0, r0, r3
   18050:	4152      	adcs	r2, r2
   18052:	d2cd      	bcs.n	17ff0 <__divsi3+0x40>
   18054:	09c3      	lsrs	r3, r0, #7
   18056:	428b      	cmp	r3, r1
   18058:	d301      	bcc.n	1805e <__divsi3+0xae>
   1805a:	01cb      	lsls	r3, r1, #7
   1805c:	1ac0      	subs	r0, r0, r3
   1805e:	4152      	adcs	r2, r2
   18060:	0983      	lsrs	r3, r0, #6
   18062:	428b      	cmp	r3, r1
   18064:	d301      	bcc.n	1806a <__divsi3+0xba>
   18066:	018b      	lsls	r3, r1, #6
   18068:	1ac0      	subs	r0, r0, r3
   1806a:	4152      	adcs	r2, r2
   1806c:	0943      	lsrs	r3, r0, #5
   1806e:	428b      	cmp	r3, r1
   18070:	d301      	bcc.n	18076 <__divsi3+0xc6>
   18072:	014b      	lsls	r3, r1, #5
   18074:	1ac0      	subs	r0, r0, r3
   18076:	4152      	adcs	r2, r2
   18078:	0903      	lsrs	r3, r0, #4
   1807a:	428b      	cmp	r3, r1
   1807c:	d301      	bcc.n	18082 <__divsi3+0xd2>
   1807e:	010b      	lsls	r3, r1, #4
   18080:	1ac0      	subs	r0, r0, r3
   18082:	4152      	adcs	r2, r2
   18084:	08c3      	lsrs	r3, r0, #3
   18086:	428b      	cmp	r3, r1
   18088:	d301      	bcc.n	1808e <__divsi3+0xde>
   1808a:	00cb      	lsls	r3, r1, #3
   1808c:	1ac0      	subs	r0, r0, r3
   1808e:	4152      	adcs	r2, r2
   18090:	0883      	lsrs	r3, r0, #2
   18092:	428b      	cmp	r3, r1
   18094:	d301      	bcc.n	1809a <__divsi3+0xea>
   18096:	008b      	lsls	r3, r1, #2
   18098:	1ac0      	subs	r0, r0, r3
   1809a:	4152      	adcs	r2, r2
   1809c:	0843      	lsrs	r3, r0, #1
   1809e:	428b      	cmp	r3, r1
   180a0:	d301      	bcc.n	180a6 <__divsi3+0xf6>
   180a2:	004b      	lsls	r3, r1, #1
   180a4:	1ac0      	subs	r0, r0, r3
   180a6:	4152      	adcs	r2, r2
   180a8:	1a41      	subs	r1, r0, r1
   180aa:	d200      	bcs.n	180ae <__divsi3+0xfe>
   180ac:	4601      	mov	r1, r0
   180ae:	4152      	adcs	r2, r2
   180b0:	4610      	mov	r0, r2
   180b2:	4770      	bx	lr
   180b4:	e05d      	b.n	18172 <__divsi3+0x1c2>
   180b6:	0fca      	lsrs	r2, r1, #31
   180b8:	d000      	beq.n	180bc <__divsi3+0x10c>
   180ba:	4249      	negs	r1, r1
   180bc:	1003      	asrs	r3, r0, #32
   180be:	d300      	bcc.n	180c2 <__divsi3+0x112>
   180c0:	4240      	negs	r0, r0
   180c2:	4053      	eors	r3, r2
   180c4:	2200      	movs	r2, #0
   180c6:	469c      	mov	ip, r3
   180c8:	0903      	lsrs	r3, r0, #4
   180ca:	428b      	cmp	r3, r1
   180cc:	d32d      	bcc.n	1812a <__divsi3+0x17a>
   180ce:	0a03      	lsrs	r3, r0, #8
   180d0:	428b      	cmp	r3, r1
   180d2:	d312      	bcc.n	180fa <__divsi3+0x14a>
   180d4:	22fc      	movs	r2, #252	; 0xfc
   180d6:	0189      	lsls	r1, r1, #6
   180d8:	ba12      	rev	r2, r2
   180da:	0a03      	lsrs	r3, r0, #8
   180dc:	428b      	cmp	r3, r1
   180de:	d30c      	bcc.n	180fa <__divsi3+0x14a>
   180e0:	0189      	lsls	r1, r1, #6
   180e2:	1192      	asrs	r2, r2, #6
   180e4:	428b      	cmp	r3, r1
   180e6:	d308      	bcc.n	180fa <__divsi3+0x14a>
   180e8:	0189      	lsls	r1, r1, #6
   180ea:	1192      	asrs	r2, r2, #6
   180ec:	428b      	cmp	r3, r1
   180ee:	d304      	bcc.n	180fa <__divsi3+0x14a>
   180f0:	0189      	lsls	r1, r1, #6
   180f2:	d03a      	beq.n	1816a <__divsi3+0x1ba>
   180f4:	1192      	asrs	r2, r2, #6
   180f6:	e000      	b.n	180fa <__divsi3+0x14a>
   180f8:	0989      	lsrs	r1, r1, #6
   180fa:	09c3      	lsrs	r3, r0, #7
   180fc:	428b      	cmp	r3, r1
   180fe:	d301      	bcc.n	18104 <__divsi3+0x154>
   18100:	01cb      	lsls	r3, r1, #7
   18102:	1ac0      	subs	r0, r0, r3
   18104:	4152      	adcs	r2, r2
   18106:	0983      	lsrs	r3, r0, #6
   18108:	428b      	cmp	r3, r1
   1810a:	d301      	bcc.n	18110 <__divsi3+0x160>
   1810c:	018b      	lsls	r3, r1, #6
   1810e:	1ac0      	subs	r0, r0, r3
   18110:	4152      	adcs	r2, r2
   18112:	0943      	lsrs	r3, r0, #5
   18114:	428b      	cmp	r3, r1
   18116:	d301      	bcc.n	1811c <__divsi3+0x16c>
   18118:	014b      	lsls	r3, r1, #5
   1811a:	1ac0      	subs	r0, r0, r3
   1811c:	4152      	adcs	r2, r2
   1811e:	0903      	lsrs	r3, r0, #4
   18120:	428b      	cmp	r3, r1
   18122:	d301      	bcc.n	18128 <__divsi3+0x178>
   18124:	010b      	lsls	r3, r1, #4
   18126:	1ac0      	subs	r0, r0, r3
   18128:	4152      	adcs	r2, r2
   1812a:	08c3      	lsrs	r3, r0, #3
   1812c:	428b      	cmp	r3, r1
   1812e:	d301      	bcc.n	18134 <__divsi3+0x184>
   18130:	00cb      	lsls	r3, r1, #3
   18132:	1ac0      	subs	r0, r0, r3
   18134:	4152      	adcs	r2, r2
   18136:	0883      	lsrs	r3, r0, #2
   18138:	428b      	cmp	r3, r1
   1813a:	d301      	bcc.n	18140 <__divsi3+0x190>
   1813c:	008b      	lsls	r3, r1, #2
   1813e:	1ac0      	subs	r0, r0, r3
   18140:	4152      	adcs	r2, r2
   18142:	d2d9      	bcs.n	180f8 <__divsi3+0x148>
   18144:	0843      	lsrs	r3, r0, #1
   18146:	428b      	cmp	r3, r1
   18148:	d301      	bcc.n	1814e <__divsi3+0x19e>
   1814a:	004b      	lsls	r3, r1, #1
   1814c:	1ac0      	subs	r0, r0, r3
   1814e:	4152      	adcs	r2, r2
   18150:	1a41      	subs	r1, r0, r1
   18152:	d200      	bcs.n	18156 <__divsi3+0x1a6>
   18154:	4601      	mov	r1, r0
   18156:	4663      	mov	r3, ip
   18158:	4152      	adcs	r2, r2
   1815a:	105b      	asrs	r3, r3, #1
   1815c:	4610      	mov	r0, r2
   1815e:	d301      	bcc.n	18164 <__divsi3+0x1b4>
   18160:	4240      	negs	r0, r0
   18162:	2b00      	cmp	r3, #0
   18164:	d500      	bpl.n	18168 <__divsi3+0x1b8>
   18166:	4249      	negs	r1, r1
   18168:	4770      	bx	lr
   1816a:	4663      	mov	r3, ip
   1816c:	105b      	asrs	r3, r3, #1
   1816e:	d300      	bcc.n	18172 <__divsi3+0x1c2>
   18170:	4240      	negs	r0, r0
   18172:	b501      	push	{r0, lr}
   18174:	2000      	movs	r0, #0
   18176:	f000 f805 	bl	18184 <__aeabi_idiv0>
   1817a:	bd02      	pop	{r1, pc}

0001817c <__aeabi_idivmod>:
   1817c:	2900      	cmp	r1, #0
   1817e:	d0f8      	beq.n	18172 <__divsi3+0x1c2>
   18180:	e716      	b.n	17fb0 <__divsi3>
   18182:	4770      	bx	lr

00018184 <__aeabi_idiv0>:
   18184:	4770      	bx	lr
   18186:	46c0      	nop			; (mov r8, r8)

00018188 <__aeabi_cdrcmple>:
   18188:	4684      	mov	ip, r0
   1818a:	1c10      	adds	r0, r2, #0
   1818c:	4662      	mov	r2, ip
   1818e:	468c      	mov	ip, r1
   18190:	1c19      	adds	r1, r3, #0
   18192:	4663      	mov	r3, ip
   18194:	e000      	b.n	18198 <__aeabi_cdcmpeq>
   18196:	46c0      	nop			; (mov r8, r8)

00018198 <__aeabi_cdcmpeq>:
   18198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1819a:	f000 ff3f 	bl	1901c <__ledf2>
   1819e:	2800      	cmp	r0, #0
   181a0:	d401      	bmi.n	181a6 <__aeabi_cdcmpeq+0xe>
   181a2:	2100      	movs	r1, #0
   181a4:	42c8      	cmn	r0, r1
   181a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000181a8 <__aeabi_dcmpeq>:
   181a8:	b510      	push	{r4, lr}
   181aa:	f000 fe99 	bl	18ee0 <__eqdf2>
   181ae:	4240      	negs	r0, r0
   181b0:	3001      	adds	r0, #1
   181b2:	bd10      	pop	{r4, pc}

000181b4 <__aeabi_dcmplt>:
   181b4:	b510      	push	{r4, lr}
   181b6:	f000 ff31 	bl	1901c <__ledf2>
   181ba:	2800      	cmp	r0, #0
   181bc:	db01      	blt.n	181c2 <__aeabi_dcmplt+0xe>
   181be:	2000      	movs	r0, #0
   181c0:	bd10      	pop	{r4, pc}
   181c2:	2001      	movs	r0, #1
   181c4:	bd10      	pop	{r4, pc}
   181c6:	46c0      	nop			; (mov r8, r8)

000181c8 <__aeabi_dcmple>:
   181c8:	b510      	push	{r4, lr}
   181ca:	f000 ff27 	bl	1901c <__ledf2>
   181ce:	2800      	cmp	r0, #0
   181d0:	dd01      	ble.n	181d6 <__aeabi_dcmple+0xe>
   181d2:	2000      	movs	r0, #0
   181d4:	bd10      	pop	{r4, pc}
   181d6:	2001      	movs	r0, #1
   181d8:	bd10      	pop	{r4, pc}
   181da:	46c0      	nop			; (mov r8, r8)

000181dc <__aeabi_dcmpgt>:
   181dc:	b510      	push	{r4, lr}
   181de:	f000 feb9 	bl	18f54 <__gedf2>
   181e2:	2800      	cmp	r0, #0
   181e4:	dc01      	bgt.n	181ea <__aeabi_dcmpgt+0xe>
   181e6:	2000      	movs	r0, #0
   181e8:	bd10      	pop	{r4, pc}
   181ea:	2001      	movs	r0, #1
   181ec:	bd10      	pop	{r4, pc}
   181ee:	46c0      	nop			; (mov r8, r8)

000181f0 <__aeabi_dcmpge>:
   181f0:	b510      	push	{r4, lr}
   181f2:	f000 feaf 	bl	18f54 <__gedf2>
   181f6:	2800      	cmp	r0, #0
   181f8:	da01      	bge.n	181fe <__aeabi_dcmpge+0xe>
   181fa:	2000      	movs	r0, #0
   181fc:	bd10      	pop	{r4, pc}
   181fe:	2001      	movs	r0, #1
   18200:	bd10      	pop	{r4, pc}
   18202:	46c0      	nop			; (mov r8, r8)

00018204 <__aeabi_lmul>:
   18204:	b5f0      	push	{r4, r5, r6, r7, lr}
   18206:	46ce      	mov	lr, r9
   18208:	4647      	mov	r7, r8
   1820a:	0415      	lsls	r5, r2, #16
   1820c:	0c2d      	lsrs	r5, r5, #16
   1820e:	002e      	movs	r6, r5
   18210:	b580      	push	{r7, lr}
   18212:	0407      	lsls	r7, r0, #16
   18214:	0c14      	lsrs	r4, r2, #16
   18216:	0c3f      	lsrs	r7, r7, #16
   18218:	4699      	mov	r9, r3
   1821a:	0c03      	lsrs	r3, r0, #16
   1821c:	437e      	muls	r6, r7
   1821e:	435d      	muls	r5, r3
   18220:	4367      	muls	r7, r4
   18222:	4363      	muls	r3, r4
   18224:	197f      	adds	r7, r7, r5
   18226:	0c34      	lsrs	r4, r6, #16
   18228:	19e4      	adds	r4, r4, r7
   1822a:	469c      	mov	ip, r3
   1822c:	42a5      	cmp	r5, r4
   1822e:	d903      	bls.n	18238 <__aeabi_lmul+0x34>
   18230:	2380      	movs	r3, #128	; 0x80
   18232:	025b      	lsls	r3, r3, #9
   18234:	4698      	mov	r8, r3
   18236:	44c4      	add	ip, r8
   18238:	464b      	mov	r3, r9
   1823a:	4351      	muls	r1, r2
   1823c:	4343      	muls	r3, r0
   1823e:	0436      	lsls	r6, r6, #16
   18240:	0c36      	lsrs	r6, r6, #16
   18242:	0c25      	lsrs	r5, r4, #16
   18244:	0424      	lsls	r4, r4, #16
   18246:	4465      	add	r5, ip
   18248:	19a4      	adds	r4, r4, r6
   1824a:	1859      	adds	r1, r3, r1
   1824c:	1949      	adds	r1, r1, r5
   1824e:	0020      	movs	r0, r4
   18250:	bc0c      	pop	{r2, r3}
   18252:	4690      	mov	r8, r2
   18254:	4699      	mov	r9, r3
   18256:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018258 <__aeabi_dadd>:
   18258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1825a:	4645      	mov	r5, r8
   1825c:	46de      	mov	lr, fp
   1825e:	4657      	mov	r7, sl
   18260:	464e      	mov	r6, r9
   18262:	030c      	lsls	r4, r1, #12
   18264:	b5e0      	push	{r5, r6, r7, lr}
   18266:	004e      	lsls	r6, r1, #1
   18268:	0fc9      	lsrs	r1, r1, #31
   1826a:	4688      	mov	r8, r1
   1826c:	000d      	movs	r5, r1
   1826e:	0a61      	lsrs	r1, r4, #9
   18270:	0f44      	lsrs	r4, r0, #29
   18272:	430c      	orrs	r4, r1
   18274:	00c7      	lsls	r7, r0, #3
   18276:	0319      	lsls	r1, r3, #12
   18278:	0058      	lsls	r0, r3, #1
   1827a:	0fdb      	lsrs	r3, r3, #31
   1827c:	469b      	mov	fp, r3
   1827e:	0a4b      	lsrs	r3, r1, #9
   18280:	0f51      	lsrs	r1, r2, #29
   18282:	430b      	orrs	r3, r1
   18284:	0d76      	lsrs	r6, r6, #21
   18286:	0d40      	lsrs	r0, r0, #21
   18288:	0019      	movs	r1, r3
   1828a:	00d2      	lsls	r2, r2, #3
   1828c:	45d8      	cmp	r8, fp
   1828e:	d100      	bne.n	18292 <__aeabi_dadd+0x3a>
   18290:	e0ae      	b.n	183f0 <__aeabi_dadd+0x198>
   18292:	1a35      	subs	r5, r6, r0
   18294:	2d00      	cmp	r5, #0
   18296:	dc00      	bgt.n	1829a <__aeabi_dadd+0x42>
   18298:	e0f6      	b.n	18488 <__aeabi_dadd+0x230>
   1829a:	2800      	cmp	r0, #0
   1829c:	d10f      	bne.n	182be <__aeabi_dadd+0x66>
   1829e:	4313      	orrs	r3, r2
   182a0:	d100      	bne.n	182a4 <__aeabi_dadd+0x4c>
   182a2:	e0db      	b.n	1845c <__aeabi_dadd+0x204>
   182a4:	1e6b      	subs	r3, r5, #1
   182a6:	2b00      	cmp	r3, #0
   182a8:	d000      	beq.n	182ac <__aeabi_dadd+0x54>
   182aa:	e137      	b.n	1851c <__aeabi_dadd+0x2c4>
   182ac:	1aba      	subs	r2, r7, r2
   182ae:	4297      	cmp	r7, r2
   182b0:	41bf      	sbcs	r7, r7
   182b2:	1a64      	subs	r4, r4, r1
   182b4:	427f      	negs	r7, r7
   182b6:	1be4      	subs	r4, r4, r7
   182b8:	2601      	movs	r6, #1
   182ba:	0017      	movs	r7, r2
   182bc:	e024      	b.n	18308 <__aeabi_dadd+0xb0>
   182be:	4bc6      	ldr	r3, [pc, #792]	; (185d8 <__aeabi_dadd+0x380>)
   182c0:	429e      	cmp	r6, r3
   182c2:	d04d      	beq.n	18360 <__aeabi_dadd+0x108>
   182c4:	2380      	movs	r3, #128	; 0x80
   182c6:	041b      	lsls	r3, r3, #16
   182c8:	4319      	orrs	r1, r3
   182ca:	2d38      	cmp	r5, #56	; 0x38
   182cc:	dd00      	ble.n	182d0 <__aeabi_dadd+0x78>
   182ce:	e107      	b.n	184e0 <__aeabi_dadd+0x288>
   182d0:	2d1f      	cmp	r5, #31
   182d2:	dd00      	ble.n	182d6 <__aeabi_dadd+0x7e>
   182d4:	e138      	b.n	18548 <__aeabi_dadd+0x2f0>
   182d6:	2020      	movs	r0, #32
   182d8:	1b43      	subs	r3, r0, r5
   182da:	469a      	mov	sl, r3
   182dc:	000b      	movs	r3, r1
   182de:	4650      	mov	r0, sl
   182e0:	4083      	lsls	r3, r0
   182e2:	4699      	mov	r9, r3
   182e4:	0013      	movs	r3, r2
   182e6:	4648      	mov	r0, r9
   182e8:	40eb      	lsrs	r3, r5
   182ea:	4318      	orrs	r0, r3
   182ec:	0003      	movs	r3, r0
   182ee:	4650      	mov	r0, sl
   182f0:	4082      	lsls	r2, r0
   182f2:	1e50      	subs	r0, r2, #1
   182f4:	4182      	sbcs	r2, r0
   182f6:	40e9      	lsrs	r1, r5
   182f8:	431a      	orrs	r2, r3
   182fa:	1aba      	subs	r2, r7, r2
   182fc:	1a61      	subs	r1, r4, r1
   182fe:	4297      	cmp	r7, r2
   18300:	41a4      	sbcs	r4, r4
   18302:	0017      	movs	r7, r2
   18304:	4264      	negs	r4, r4
   18306:	1b0c      	subs	r4, r1, r4
   18308:	0223      	lsls	r3, r4, #8
   1830a:	d562      	bpl.n	183d2 <__aeabi_dadd+0x17a>
   1830c:	0264      	lsls	r4, r4, #9
   1830e:	0a65      	lsrs	r5, r4, #9
   18310:	2d00      	cmp	r5, #0
   18312:	d100      	bne.n	18316 <__aeabi_dadd+0xbe>
   18314:	e0df      	b.n	184d6 <__aeabi_dadd+0x27e>
   18316:	0028      	movs	r0, r5
   18318:	f001 fd26 	bl	19d68 <__clzsi2>
   1831c:	0003      	movs	r3, r0
   1831e:	3b08      	subs	r3, #8
   18320:	2b1f      	cmp	r3, #31
   18322:	dd00      	ble.n	18326 <__aeabi_dadd+0xce>
   18324:	e0d2      	b.n	184cc <__aeabi_dadd+0x274>
   18326:	2220      	movs	r2, #32
   18328:	003c      	movs	r4, r7
   1832a:	1ad2      	subs	r2, r2, r3
   1832c:	409d      	lsls	r5, r3
   1832e:	40d4      	lsrs	r4, r2
   18330:	409f      	lsls	r7, r3
   18332:	4325      	orrs	r5, r4
   18334:	429e      	cmp	r6, r3
   18336:	dd00      	ble.n	1833a <__aeabi_dadd+0xe2>
   18338:	e0c4      	b.n	184c4 <__aeabi_dadd+0x26c>
   1833a:	1b9e      	subs	r6, r3, r6
   1833c:	1c73      	adds	r3, r6, #1
   1833e:	2b1f      	cmp	r3, #31
   18340:	dd00      	ble.n	18344 <__aeabi_dadd+0xec>
   18342:	e0f1      	b.n	18528 <__aeabi_dadd+0x2d0>
   18344:	2220      	movs	r2, #32
   18346:	0038      	movs	r0, r7
   18348:	0029      	movs	r1, r5
   1834a:	1ad2      	subs	r2, r2, r3
   1834c:	40d8      	lsrs	r0, r3
   1834e:	4091      	lsls	r1, r2
   18350:	4097      	lsls	r7, r2
   18352:	002c      	movs	r4, r5
   18354:	4301      	orrs	r1, r0
   18356:	1e78      	subs	r0, r7, #1
   18358:	4187      	sbcs	r7, r0
   1835a:	40dc      	lsrs	r4, r3
   1835c:	2600      	movs	r6, #0
   1835e:	430f      	orrs	r7, r1
   18360:	077b      	lsls	r3, r7, #29
   18362:	d009      	beq.n	18378 <__aeabi_dadd+0x120>
   18364:	230f      	movs	r3, #15
   18366:	403b      	ands	r3, r7
   18368:	2b04      	cmp	r3, #4
   1836a:	d005      	beq.n	18378 <__aeabi_dadd+0x120>
   1836c:	1d3b      	adds	r3, r7, #4
   1836e:	42bb      	cmp	r3, r7
   18370:	41bf      	sbcs	r7, r7
   18372:	427f      	negs	r7, r7
   18374:	19e4      	adds	r4, r4, r7
   18376:	001f      	movs	r7, r3
   18378:	0223      	lsls	r3, r4, #8
   1837a:	d52c      	bpl.n	183d6 <__aeabi_dadd+0x17e>
   1837c:	4b96      	ldr	r3, [pc, #600]	; (185d8 <__aeabi_dadd+0x380>)
   1837e:	3601      	adds	r6, #1
   18380:	429e      	cmp	r6, r3
   18382:	d100      	bne.n	18386 <__aeabi_dadd+0x12e>
   18384:	e09a      	b.n	184bc <__aeabi_dadd+0x264>
   18386:	4645      	mov	r5, r8
   18388:	4b94      	ldr	r3, [pc, #592]	; (185dc <__aeabi_dadd+0x384>)
   1838a:	08ff      	lsrs	r7, r7, #3
   1838c:	401c      	ands	r4, r3
   1838e:	0760      	lsls	r0, r4, #29
   18390:	0576      	lsls	r6, r6, #21
   18392:	0264      	lsls	r4, r4, #9
   18394:	4307      	orrs	r7, r0
   18396:	0b24      	lsrs	r4, r4, #12
   18398:	0d76      	lsrs	r6, r6, #21
   1839a:	2100      	movs	r1, #0
   1839c:	0324      	lsls	r4, r4, #12
   1839e:	0b23      	lsrs	r3, r4, #12
   183a0:	0d0c      	lsrs	r4, r1, #20
   183a2:	4a8f      	ldr	r2, [pc, #572]	; (185e0 <__aeabi_dadd+0x388>)
   183a4:	0524      	lsls	r4, r4, #20
   183a6:	431c      	orrs	r4, r3
   183a8:	4014      	ands	r4, r2
   183aa:	0533      	lsls	r3, r6, #20
   183ac:	4323      	orrs	r3, r4
   183ae:	005b      	lsls	r3, r3, #1
   183b0:	07ed      	lsls	r5, r5, #31
   183b2:	085b      	lsrs	r3, r3, #1
   183b4:	432b      	orrs	r3, r5
   183b6:	0038      	movs	r0, r7
   183b8:	0019      	movs	r1, r3
   183ba:	bc3c      	pop	{r2, r3, r4, r5}
   183bc:	4690      	mov	r8, r2
   183be:	4699      	mov	r9, r3
   183c0:	46a2      	mov	sl, r4
   183c2:	46ab      	mov	fp, r5
   183c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183c6:	4664      	mov	r4, ip
   183c8:	4304      	orrs	r4, r0
   183ca:	d100      	bne.n	183ce <__aeabi_dadd+0x176>
   183cc:	e211      	b.n	187f2 <__aeabi_dadd+0x59a>
   183ce:	0004      	movs	r4, r0
   183d0:	4667      	mov	r7, ip
   183d2:	077b      	lsls	r3, r7, #29
   183d4:	d1c6      	bne.n	18364 <__aeabi_dadd+0x10c>
   183d6:	4645      	mov	r5, r8
   183d8:	0760      	lsls	r0, r4, #29
   183da:	08ff      	lsrs	r7, r7, #3
   183dc:	4307      	orrs	r7, r0
   183de:	08e4      	lsrs	r4, r4, #3
   183e0:	4b7d      	ldr	r3, [pc, #500]	; (185d8 <__aeabi_dadd+0x380>)
   183e2:	429e      	cmp	r6, r3
   183e4:	d030      	beq.n	18448 <__aeabi_dadd+0x1f0>
   183e6:	0324      	lsls	r4, r4, #12
   183e8:	0576      	lsls	r6, r6, #21
   183ea:	0b24      	lsrs	r4, r4, #12
   183ec:	0d76      	lsrs	r6, r6, #21
   183ee:	e7d4      	b.n	1839a <__aeabi_dadd+0x142>
   183f0:	1a33      	subs	r3, r6, r0
   183f2:	469a      	mov	sl, r3
   183f4:	2b00      	cmp	r3, #0
   183f6:	dd78      	ble.n	184ea <__aeabi_dadd+0x292>
   183f8:	2800      	cmp	r0, #0
   183fa:	d031      	beq.n	18460 <__aeabi_dadd+0x208>
   183fc:	4876      	ldr	r0, [pc, #472]	; (185d8 <__aeabi_dadd+0x380>)
   183fe:	4286      	cmp	r6, r0
   18400:	d0ae      	beq.n	18360 <__aeabi_dadd+0x108>
   18402:	2080      	movs	r0, #128	; 0x80
   18404:	0400      	lsls	r0, r0, #16
   18406:	4301      	orrs	r1, r0
   18408:	4653      	mov	r3, sl
   1840a:	2b38      	cmp	r3, #56	; 0x38
   1840c:	dc00      	bgt.n	18410 <__aeabi_dadd+0x1b8>
   1840e:	e0e9      	b.n	185e4 <__aeabi_dadd+0x38c>
   18410:	430a      	orrs	r2, r1
   18412:	1e51      	subs	r1, r2, #1
   18414:	418a      	sbcs	r2, r1
   18416:	2100      	movs	r1, #0
   18418:	19d2      	adds	r2, r2, r7
   1841a:	42ba      	cmp	r2, r7
   1841c:	41bf      	sbcs	r7, r7
   1841e:	1909      	adds	r1, r1, r4
   18420:	427c      	negs	r4, r7
   18422:	0017      	movs	r7, r2
   18424:	190c      	adds	r4, r1, r4
   18426:	0223      	lsls	r3, r4, #8
   18428:	d5d3      	bpl.n	183d2 <__aeabi_dadd+0x17a>
   1842a:	4b6b      	ldr	r3, [pc, #428]	; (185d8 <__aeabi_dadd+0x380>)
   1842c:	3601      	adds	r6, #1
   1842e:	429e      	cmp	r6, r3
   18430:	d100      	bne.n	18434 <__aeabi_dadd+0x1dc>
   18432:	e13a      	b.n	186aa <__aeabi_dadd+0x452>
   18434:	2001      	movs	r0, #1
   18436:	4b69      	ldr	r3, [pc, #420]	; (185dc <__aeabi_dadd+0x384>)
   18438:	401c      	ands	r4, r3
   1843a:	087b      	lsrs	r3, r7, #1
   1843c:	4007      	ands	r7, r0
   1843e:	431f      	orrs	r7, r3
   18440:	07e0      	lsls	r0, r4, #31
   18442:	4307      	orrs	r7, r0
   18444:	0864      	lsrs	r4, r4, #1
   18446:	e78b      	b.n	18360 <__aeabi_dadd+0x108>
   18448:	0023      	movs	r3, r4
   1844a:	433b      	orrs	r3, r7
   1844c:	d100      	bne.n	18450 <__aeabi_dadd+0x1f8>
   1844e:	e1cb      	b.n	187e8 <__aeabi_dadd+0x590>
   18450:	2280      	movs	r2, #128	; 0x80
   18452:	0312      	lsls	r2, r2, #12
   18454:	4314      	orrs	r4, r2
   18456:	0324      	lsls	r4, r4, #12
   18458:	0b24      	lsrs	r4, r4, #12
   1845a:	e79e      	b.n	1839a <__aeabi_dadd+0x142>
   1845c:	002e      	movs	r6, r5
   1845e:	e77f      	b.n	18360 <__aeabi_dadd+0x108>
   18460:	0008      	movs	r0, r1
   18462:	4310      	orrs	r0, r2
   18464:	d100      	bne.n	18468 <__aeabi_dadd+0x210>
   18466:	e0b4      	b.n	185d2 <__aeabi_dadd+0x37a>
   18468:	1e58      	subs	r0, r3, #1
   1846a:	2800      	cmp	r0, #0
   1846c:	d000      	beq.n	18470 <__aeabi_dadd+0x218>
   1846e:	e0de      	b.n	1862e <__aeabi_dadd+0x3d6>
   18470:	18ba      	adds	r2, r7, r2
   18472:	42ba      	cmp	r2, r7
   18474:	419b      	sbcs	r3, r3
   18476:	1864      	adds	r4, r4, r1
   18478:	425b      	negs	r3, r3
   1847a:	18e4      	adds	r4, r4, r3
   1847c:	0017      	movs	r7, r2
   1847e:	2601      	movs	r6, #1
   18480:	0223      	lsls	r3, r4, #8
   18482:	d5a6      	bpl.n	183d2 <__aeabi_dadd+0x17a>
   18484:	2602      	movs	r6, #2
   18486:	e7d5      	b.n	18434 <__aeabi_dadd+0x1dc>
   18488:	2d00      	cmp	r5, #0
   1848a:	d16e      	bne.n	1856a <__aeabi_dadd+0x312>
   1848c:	1c70      	adds	r0, r6, #1
   1848e:	0540      	lsls	r0, r0, #21
   18490:	0d40      	lsrs	r0, r0, #21
   18492:	2801      	cmp	r0, #1
   18494:	dc00      	bgt.n	18498 <__aeabi_dadd+0x240>
   18496:	e0f9      	b.n	1868c <__aeabi_dadd+0x434>
   18498:	1ab8      	subs	r0, r7, r2
   1849a:	4684      	mov	ip, r0
   1849c:	4287      	cmp	r7, r0
   1849e:	4180      	sbcs	r0, r0
   184a0:	1ae5      	subs	r5, r4, r3
   184a2:	4240      	negs	r0, r0
   184a4:	1a2d      	subs	r5, r5, r0
   184a6:	0228      	lsls	r0, r5, #8
   184a8:	d400      	bmi.n	184ac <__aeabi_dadd+0x254>
   184aa:	e089      	b.n	185c0 <__aeabi_dadd+0x368>
   184ac:	1bd7      	subs	r7, r2, r7
   184ae:	42ba      	cmp	r2, r7
   184b0:	4192      	sbcs	r2, r2
   184b2:	1b1c      	subs	r4, r3, r4
   184b4:	4252      	negs	r2, r2
   184b6:	1aa5      	subs	r5, r4, r2
   184b8:	46d8      	mov	r8, fp
   184ba:	e729      	b.n	18310 <__aeabi_dadd+0xb8>
   184bc:	4645      	mov	r5, r8
   184be:	2400      	movs	r4, #0
   184c0:	2700      	movs	r7, #0
   184c2:	e76a      	b.n	1839a <__aeabi_dadd+0x142>
   184c4:	4c45      	ldr	r4, [pc, #276]	; (185dc <__aeabi_dadd+0x384>)
   184c6:	1af6      	subs	r6, r6, r3
   184c8:	402c      	ands	r4, r5
   184ca:	e749      	b.n	18360 <__aeabi_dadd+0x108>
   184cc:	003d      	movs	r5, r7
   184ce:	3828      	subs	r0, #40	; 0x28
   184d0:	4085      	lsls	r5, r0
   184d2:	2700      	movs	r7, #0
   184d4:	e72e      	b.n	18334 <__aeabi_dadd+0xdc>
   184d6:	0038      	movs	r0, r7
   184d8:	f001 fc46 	bl	19d68 <__clzsi2>
   184dc:	3020      	adds	r0, #32
   184de:	e71d      	b.n	1831c <__aeabi_dadd+0xc4>
   184e0:	430a      	orrs	r2, r1
   184e2:	1e51      	subs	r1, r2, #1
   184e4:	418a      	sbcs	r2, r1
   184e6:	2100      	movs	r1, #0
   184e8:	e707      	b.n	182fa <__aeabi_dadd+0xa2>
   184ea:	2b00      	cmp	r3, #0
   184ec:	d000      	beq.n	184f0 <__aeabi_dadd+0x298>
   184ee:	e0f3      	b.n	186d8 <__aeabi_dadd+0x480>
   184f0:	1c70      	adds	r0, r6, #1
   184f2:	0543      	lsls	r3, r0, #21
   184f4:	0d5b      	lsrs	r3, r3, #21
   184f6:	2b01      	cmp	r3, #1
   184f8:	dc00      	bgt.n	184fc <__aeabi_dadd+0x2a4>
   184fa:	e0ad      	b.n	18658 <__aeabi_dadd+0x400>
   184fc:	4b36      	ldr	r3, [pc, #216]	; (185d8 <__aeabi_dadd+0x380>)
   184fe:	4298      	cmp	r0, r3
   18500:	d100      	bne.n	18504 <__aeabi_dadd+0x2ac>
   18502:	e0d1      	b.n	186a8 <__aeabi_dadd+0x450>
   18504:	18ba      	adds	r2, r7, r2
   18506:	42ba      	cmp	r2, r7
   18508:	41bf      	sbcs	r7, r7
   1850a:	1864      	adds	r4, r4, r1
   1850c:	427f      	negs	r7, r7
   1850e:	19e4      	adds	r4, r4, r7
   18510:	07e7      	lsls	r7, r4, #31
   18512:	0852      	lsrs	r2, r2, #1
   18514:	4317      	orrs	r7, r2
   18516:	0864      	lsrs	r4, r4, #1
   18518:	0006      	movs	r6, r0
   1851a:	e721      	b.n	18360 <__aeabi_dadd+0x108>
   1851c:	482e      	ldr	r0, [pc, #184]	; (185d8 <__aeabi_dadd+0x380>)
   1851e:	4285      	cmp	r5, r0
   18520:	d100      	bne.n	18524 <__aeabi_dadd+0x2cc>
   18522:	e093      	b.n	1864c <__aeabi_dadd+0x3f4>
   18524:	001d      	movs	r5, r3
   18526:	e6d0      	b.n	182ca <__aeabi_dadd+0x72>
   18528:	0029      	movs	r1, r5
   1852a:	3e1f      	subs	r6, #31
   1852c:	40f1      	lsrs	r1, r6
   1852e:	2b20      	cmp	r3, #32
   18530:	d100      	bne.n	18534 <__aeabi_dadd+0x2dc>
   18532:	e08d      	b.n	18650 <__aeabi_dadd+0x3f8>
   18534:	2240      	movs	r2, #64	; 0x40
   18536:	1ad3      	subs	r3, r2, r3
   18538:	409d      	lsls	r5, r3
   1853a:	432f      	orrs	r7, r5
   1853c:	1e7d      	subs	r5, r7, #1
   1853e:	41af      	sbcs	r7, r5
   18540:	2400      	movs	r4, #0
   18542:	430f      	orrs	r7, r1
   18544:	2600      	movs	r6, #0
   18546:	e744      	b.n	183d2 <__aeabi_dadd+0x17a>
   18548:	002b      	movs	r3, r5
   1854a:	0008      	movs	r0, r1
   1854c:	3b20      	subs	r3, #32
   1854e:	40d8      	lsrs	r0, r3
   18550:	0003      	movs	r3, r0
   18552:	2d20      	cmp	r5, #32
   18554:	d100      	bne.n	18558 <__aeabi_dadd+0x300>
   18556:	e07d      	b.n	18654 <__aeabi_dadd+0x3fc>
   18558:	2040      	movs	r0, #64	; 0x40
   1855a:	1b45      	subs	r5, r0, r5
   1855c:	40a9      	lsls	r1, r5
   1855e:	430a      	orrs	r2, r1
   18560:	1e51      	subs	r1, r2, #1
   18562:	418a      	sbcs	r2, r1
   18564:	2100      	movs	r1, #0
   18566:	431a      	orrs	r2, r3
   18568:	e6c7      	b.n	182fa <__aeabi_dadd+0xa2>
   1856a:	2e00      	cmp	r6, #0
   1856c:	d050      	beq.n	18610 <__aeabi_dadd+0x3b8>
   1856e:	4e1a      	ldr	r6, [pc, #104]	; (185d8 <__aeabi_dadd+0x380>)
   18570:	42b0      	cmp	r0, r6
   18572:	d057      	beq.n	18624 <__aeabi_dadd+0x3cc>
   18574:	2680      	movs	r6, #128	; 0x80
   18576:	426b      	negs	r3, r5
   18578:	4699      	mov	r9, r3
   1857a:	0436      	lsls	r6, r6, #16
   1857c:	4334      	orrs	r4, r6
   1857e:	464b      	mov	r3, r9
   18580:	2b38      	cmp	r3, #56	; 0x38
   18582:	dd00      	ble.n	18586 <__aeabi_dadd+0x32e>
   18584:	e0d6      	b.n	18734 <__aeabi_dadd+0x4dc>
   18586:	2b1f      	cmp	r3, #31
   18588:	dd00      	ble.n	1858c <__aeabi_dadd+0x334>
   1858a:	e135      	b.n	187f8 <__aeabi_dadd+0x5a0>
   1858c:	2620      	movs	r6, #32
   1858e:	1af5      	subs	r5, r6, r3
   18590:	0026      	movs	r6, r4
   18592:	40ae      	lsls	r6, r5
   18594:	46b2      	mov	sl, r6
   18596:	003e      	movs	r6, r7
   18598:	40de      	lsrs	r6, r3
   1859a:	46ac      	mov	ip, r5
   1859c:	0035      	movs	r5, r6
   1859e:	4656      	mov	r6, sl
   185a0:	432e      	orrs	r6, r5
   185a2:	4665      	mov	r5, ip
   185a4:	40af      	lsls	r7, r5
   185a6:	1e7d      	subs	r5, r7, #1
   185a8:	41af      	sbcs	r7, r5
   185aa:	40dc      	lsrs	r4, r3
   185ac:	4337      	orrs	r7, r6
   185ae:	1bd7      	subs	r7, r2, r7
   185b0:	42ba      	cmp	r2, r7
   185b2:	4192      	sbcs	r2, r2
   185b4:	1b0c      	subs	r4, r1, r4
   185b6:	4252      	negs	r2, r2
   185b8:	1aa4      	subs	r4, r4, r2
   185ba:	0006      	movs	r6, r0
   185bc:	46d8      	mov	r8, fp
   185be:	e6a3      	b.n	18308 <__aeabi_dadd+0xb0>
   185c0:	4664      	mov	r4, ip
   185c2:	4667      	mov	r7, ip
   185c4:	432c      	orrs	r4, r5
   185c6:	d000      	beq.n	185ca <__aeabi_dadd+0x372>
   185c8:	e6a2      	b.n	18310 <__aeabi_dadd+0xb8>
   185ca:	2500      	movs	r5, #0
   185cc:	2600      	movs	r6, #0
   185ce:	2700      	movs	r7, #0
   185d0:	e706      	b.n	183e0 <__aeabi_dadd+0x188>
   185d2:	001e      	movs	r6, r3
   185d4:	e6c4      	b.n	18360 <__aeabi_dadd+0x108>
   185d6:	46c0      	nop			; (mov r8, r8)
   185d8:	000007ff 	.word	0x000007ff
   185dc:	ff7fffff 	.word	0xff7fffff
   185e0:	800fffff 	.word	0x800fffff
   185e4:	2b1f      	cmp	r3, #31
   185e6:	dc63      	bgt.n	186b0 <__aeabi_dadd+0x458>
   185e8:	2020      	movs	r0, #32
   185ea:	1ac3      	subs	r3, r0, r3
   185ec:	0008      	movs	r0, r1
   185ee:	4098      	lsls	r0, r3
   185f0:	469c      	mov	ip, r3
   185f2:	4683      	mov	fp, r0
   185f4:	4653      	mov	r3, sl
   185f6:	0010      	movs	r0, r2
   185f8:	40d8      	lsrs	r0, r3
   185fa:	0003      	movs	r3, r0
   185fc:	4658      	mov	r0, fp
   185fe:	4318      	orrs	r0, r3
   18600:	4663      	mov	r3, ip
   18602:	409a      	lsls	r2, r3
   18604:	1e53      	subs	r3, r2, #1
   18606:	419a      	sbcs	r2, r3
   18608:	4653      	mov	r3, sl
   1860a:	4302      	orrs	r2, r0
   1860c:	40d9      	lsrs	r1, r3
   1860e:	e703      	b.n	18418 <__aeabi_dadd+0x1c0>
   18610:	0026      	movs	r6, r4
   18612:	433e      	orrs	r6, r7
   18614:	d006      	beq.n	18624 <__aeabi_dadd+0x3cc>
   18616:	43eb      	mvns	r3, r5
   18618:	4699      	mov	r9, r3
   1861a:	2b00      	cmp	r3, #0
   1861c:	d0c7      	beq.n	185ae <__aeabi_dadd+0x356>
   1861e:	4e94      	ldr	r6, [pc, #592]	; (18870 <__aeabi_dadd+0x618>)
   18620:	42b0      	cmp	r0, r6
   18622:	d1ac      	bne.n	1857e <__aeabi_dadd+0x326>
   18624:	000c      	movs	r4, r1
   18626:	0017      	movs	r7, r2
   18628:	0006      	movs	r6, r0
   1862a:	46d8      	mov	r8, fp
   1862c:	e698      	b.n	18360 <__aeabi_dadd+0x108>
   1862e:	4b90      	ldr	r3, [pc, #576]	; (18870 <__aeabi_dadd+0x618>)
   18630:	459a      	cmp	sl, r3
   18632:	d00b      	beq.n	1864c <__aeabi_dadd+0x3f4>
   18634:	4682      	mov	sl, r0
   18636:	e6e7      	b.n	18408 <__aeabi_dadd+0x1b0>
   18638:	2800      	cmp	r0, #0
   1863a:	d000      	beq.n	1863e <__aeabi_dadd+0x3e6>
   1863c:	e09e      	b.n	1877c <__aeabi_dadd+0x524>
   1863e:	0018      	movs	r0, r3
   18640:	4310      	orrs	r0, r2
   18642:	d100      	bne.n	18646 <__aeabi_dadd+0x3ee>
   18644:	e0e9      	b.n	1881a <__aeabi_dadd+0x5c2>
   18646:	001c      	movs	r4, r3
   18648:	0017      	movs	r7, r2
   1864a:	46d8      	mov	r8, fp
   1864c:	4e88      	ldr	r6, [pc, #544]	; (18870 <__aeabi_dadd+0x618>)
   1864e:	e687      	b.n	18360 <__aeabi_dadd+0x108>
   18650:	2500      	movs	r5, #0
   18652:	e772      	b.n	1853a <__aeabi_dadd+0x2e2>
   18654:	2100      	movs	r1, #0
   18656:	e782      	b.n	1855e <__aeabi_dadd+0x306>
   18658:	0023      	movs	r3, r4
   1865a:	433b      	orrs	r3, r7
   1865c:	2e00      	cmp	r6, #0
   1865e:	d000      	beq.n	18662 <__aeabi_dadd+0x40a>
   18660:	e0ab      	b.n	187ba <__aeabi_dadd+0x562>
   18662:	2b00      	cmp	r3, #0
   18664:	d100      	bne.n	18668 <__aeabi_dadd+0x410>
   18666:	e0e7      	b.n	18838 <__aeabi_dadd+0x5e0>
   18668:	000b      	movs	r3, r1
   1866a:	4313      	orrs	r3, r2
   1866c:	d100      	bne.n	18670 <__aeabi_dadd+0x418>
   1866e:	e677      	b.n	18360 <__aeabi_dadd+0x108>
   18670:	18ba      	adds	r2, r7, r2
   18672:	42ba      	cmp	r2, r7
   18674:	41bf      	sbcs	r7, r7
   18676:	1864      	adds	r4, r4, r1
   18678:	427f      	negs	r7, r7
   1867a:	19e4      	adds	r4, r4, r7
   1867c:	0223      	lsls	r3, r4, #8
   1867e:	d400      	bmi.n	18682 <__aeabi_dadd+0x42a>
   18680:	e0f2      	b.n	18868 <__aeabi_dadd+0x610>
   18682:	4b7c      	ldr	r3, [pc, #496]	; (18874 <__aeabi_dadd+0x61c>)
   18684:	0017      	movs	r7, r2
   18686:	401c      	ands	r4, r3
   18688:	0006      	movs	r6, r0
   1868a:	e669      	b.n	18360 <__aeabi_dadd+0x108>
   1868c:	0020      	movs	r0, r4
   1868e:	4338      	orrs	r0, r7
   18690:	2e00      	cmp	r6, #0
   18692:	d1d1      	bne.n	18638 <__aeabi_dadd+0x3e0>
   18694:	2800      	cmp	r0, #0
   18696:	d15b      	bne.n	18750 <__aeabi_dadd+0x4f8>
   18698:	001c      	movs	r4, r3
   1869a:	4314      	orrs	r4, r2
   1869c:	d100      	bne.n	186a0 <__aeabi_dadd+0x448>
   1869e:	e0a8      	b.n	187f2 <__aeabi_dadd+0x59a>
   186a0:	001c      	movs	r4, r3
   186a2:	0017      	movs	r7, r2
   186a4:	46d8      	mov	r8, fp
   186a6:	e65b      	b.n	18360 <__aeabi_dadd+0x108>
   186a8:	0006      	movs	r6, r0
   186aa:	2400      	movs	r4, #0
   186ac:	2700      	movs	r7, #0
   186ae:	e697      	b.n	183e0 <__aeabi_dadd+0x188>
   186b0:	4650      	mov	r0, sl
   186b2:	000b      	movs	r3, r1
   186b4:	3820      	subs	r0, #32
   186b6:	40c3      	lsrs	r3, r0
   186b8:	4699      	mov	r9, r3
   186ba:	4653      	mov	r3, sl
   186bc:	2b20      	cmp	r3, #32
   186be:	d100      	bne.n	186c2 <__aeabi_dadd+0x46a>
   186c0:	e095      	b.n	187ee <__aeabi_dadd+0x596>
   186c2:	2340      	movs	r3, #64	; 0x40
   186c4:	4650      	mov	r0, sl
   186c6:	1a1b      	subs	r3, r3, r0
   186c8:	4099      	lsls	r1, r3
   186ca:	430a      	orrs	r2, r1
   186cc:	1e51      	subs	r1, r2, #1
   186ce:	418a      	sbcs	r2, r1
   186d0:	464b      	mov	r3, r9
   186d2:	2100      	movs	r1, #0
   186d4:	431a      	orrs	r2, r3
   186d6:	e69f      	b.n	18418 <__aeabi_dadd+0x1c0>
   186d8:	2e00      	cmp	r6, #0
   186da:	d130      	bne.n	1873e <__aeabi_dadd+0x4e6>
   186dc:	0026      	movs	r6, r4
   186de:	433e      	orrs	r6, r7
   186e0:	d067      	beq.n	187b2 <__aeabi_dadd+0x55a>
   186e2:	43db      	mvns	r3, r3
   186e4:	469a      	mov	sl, r3
   186e6:	2b00      	cmp	r3, #0
   186e8:	d01c      	beq.n	18724 <__aeabi_dadd+0x4cc>
   186ea:	4e61      	ldr	r6, [pc, #388]	; (18870 <__aeabi_dadd+0x618>)
   186ec:	42b0      	cmp	r0, r6
   186ee:	d060      	beq.n	187b2 <__aeabi_dadd+0x55a>
   186f0:	4653      	mov	r3, sl
   186f2:	2b38      	cmp	r3, #56	; 0x38
   186f4:	dd00      	ble.n	186f8 <__aeabi_dadd+0x4a0>
   186f6:	e096      	b.n	18826 <__aeabi_dadd+0x5ce>
   186f8:	2b1f      	cmp	r3, #31
   186fa:	dd00      	ble.n	186fe <__aeabi_dadd+0x4a6>
   186fc:	e09f      	b.n	1883e <__aeabi_dadd+0x5e6>
   186fe:	2620      	movs	r6, #32
   18700:	1af3      	subs	r3, r6, r3
   18702:	0026      	movs	r6, r4
   18704:	409e      	lsls	r6, r3
   18706:	469c      	mov	ip, r3
   18708:	46b3      	mov	fp, r6
   1870a:	4653      	mov	r3, sl
   1870c:	003e      	movs	r6, r7
   1870e:	40de      	lsrs	r6, r3
   18710:	0033      	movs	r3, r6
   18712:	465e      	mov	r6, fp
   18714:	431e      	orrs	r6, r3
   18716:	4663      	mov	r3, ip
   18718:	409f      	lsls	r7, r3
   1871a:	1e7b      	subs	r3, r7, #1
   1871c:	419f      	sbcs	r7, r3
   1871e:	4653      	mov	r3, sl
   18720:	40dc      	lsrs	r4, r3
   18722:	4337      	orrs	r7, r6
   18724:	18bf      	adds	r7, r7, r2
   18726:	4297      	cmp	r7, r2
   18728:	4192      	sbcs	r2, r2
   1872a:	1864      	adds	r4, r4, r1
   1872c:	4252      	negs	r2, r2
   1872e:	18a4      	adds	r4, r4, r2
   18730:	0006      	movs	r6, r0
   18732:	e678      	b.n	18426 <__aeabi_dadd+0x1ce>
   18734:	4327      	orrs	r7, r4
   18736:	1e7c      	subs	r4, r7, #1
   18738:	41a7      	sbcs	r7, r4
   1873a:	2400      	movs	r4, #0
   1873c:	e737      	b.n	185ae <__aeabi_dadd+0x356>
   1873e:	4e4c      	ldr	r6, [pc, #304]	; (18870 <__aeabi_dadd+0x618>)
   18740:	42b0      	cmp	r0, r6
   18742:	d036      	beq.n	187b2 <__aeabi_dadd+0x55a>
   18744:	2680      	movs	r6, #128	; 0x80
   18746:	425b      	negs	r3, r3
   18748:	0436      	lsls	r6, r6, #16
   1874a:	469a      	mov	sl, r3
   1874c:	4334      	orrs	r4, r6
   1874e:	e7cf      	b.n	186f0 <__aeabi_dadd+0x498>
   18750:	0018      	movs	r0, r3
   18752:	4310      	orrs	r0, r2
   18754:	d100      	bne.n	18758 <__aeabi_dadd+0x500>
   18756:	e603      	b.n	18360 <__aeabi_dadd+0x108>
   18758:	1ab8      	subs	r0, r7, r2
   1875a:	4684      	mov	ip, r0
   1875c:	4567      	cmp	r7, ip
   1875e:	41ad      	sbcs	r5, r5
   18760:	1ae0      	subs	r0, r4, r3
   18762:	426d      	negs	r5, r5
   18764:	1b40      	subs	r0, r0, r5
   18766:	0205      	lsls	r5, r0, #8
   18768:	d400      	bmi.n	1876c <__aeabi_dadd+0x514>
   1876a:	e62c      	b.n	183c6 <__aeabi_dadd+0x16e>
   1876c:	1bd7      	subs	r7, r2, r7
   1876e:	42ba      	cmp	r2, r7
   18770:	4192      	sbcs	r2, r2
   18772:	1b1c      	subs	r4, r3, r4
   18774:	4252      	negs	r2, r2
   18776:	1aa4      	subs	r4, r4, r2
   18778:	46d8      	mov	r8, fp
   1877a:	e5f1      	b.n	18360 <__aeabi_dadd+0x108>
   1877c:	0018      	movs	r0, r3
   1877e:	4310      	orrs	r0, r2
   18780:	d100      	bne.n	18784 <__aeabi_dadd+0x52c>
   18782:	e763      	b.n	1864c <__aeabi_dadd+0x3f4>
   18784:	08f8      	lsrs	r0, r7, #3
   18786:	0767      	lsls	r7, r4, #29
   18788:	4307      	orrs	r7, r0
   1878a:	2080      	movs	r0, #128	; 0x80
   1878c:	08e4      	lsrs	r4, r4, #3
   1878e:	0300      	lsls	r0, r0, #12
   18790:	4204      	tst	r4, r0
   18792:	d008      	beq.n	187a6 <__aeabi_dadd+0x54e>
   18794:	08dd      	lsrs	r5, r3, #3
   18796:	4205      	tst	r5, r0
   18798:	d105      	bne.n	187a6 <__aeabi_dadd+0x54e>
   1879a:	08d2      	lsrs	r2, r2, #3
   1879c:	0759      	lsls	r1, r3, #29
   1879e:	4311      	orrs	r1, r2
   187a0:	000f      	movs	r7, r1
   187a2:	002c      	movs	r4, r5
   187a4:	46d8      	mov	r8, fp
   187a6:	0f7b      	lsrs	r3, r7, #29
   187a8:	00e4      	lsls	r4, r4, #3
   187aa:	431c      	orrs	r4, r3
   187ac:	00ff      	lsls	r7, r7, #3
   187ae:	4e30      	ldr	r6, [pc, #192]	; (18870 <__aeabi_dadd+0x618>)
   187b0:	e5d6      	b.n	18360 <__aeabi_dadd+0x108>
   187b2:	000c      	movs	r4, r1
   187b4:	0017      	movs	r7, r2
   187b6:	0006      	movs	r6, r0
   187b8:	e5d2      	b.n	18360 <__aeabi_dadd+0x108>
   187ba:	2b00      	cmp	r3, #0
   187bc:	d038      	beq.n	18830 <__aeabi_dadd+0x5d8>
   187be:	000b      	movs	r3, r1
   187c0:	4313      	orrs	r3, r2
   187c2:	d100      	bne.n	187c6 <__aeabi_dadd+0x56e>
   187c4:	e742      	b.n	1864c <__aeabi_dadd+0x3f4>
   187c6:	08f8      	lsrs	r0, r7, #3
   187c8:	0767      	lsls	r7, r4, #29
   187ca:	4307      	orrs	r7, r0
   187cc:	2080      	movs	r0, #128	; 0x80
   187ce:	08e4      	lsrs	r4, r4, #3
   187d0:	0300      	lsls	r0, r0, #12
   187d2:	4204      	tst	r4, r0
   187d4:	d0e7      	beq.n	187a6 <__aeabi_dadd+0x54e>
   187d6:	08cb      	lsrs	r3, r1, #3
   187d8:	4203      	tst	r3, r0
   187da:	d1e4      	bne.n	187a6 <__aeabi_dadd+0x54e>
   187dc:	08d2      	lsrs	r2, r2, #3
   187de:	0749      	lsls	r1, r1, #29
   187e0:	4311      	orrs	r1, r2
   187e2:	000f      	movs	r7, r1
   187e4:	001c      	movs	r4, r3
   187e6:	e7de      	b.n	187a6 <__aeabi_dadd+0x54e>
   187e8:	2700      	movs	r7, #0
   187ea:	2400      	movs	r4, #0
   187ec:	e5d5      	b.n	1839a <__aeabi_dadd+0x142>
   187ee:	2100      	movs	r1, #0
   187f0:	e76b      	b.n	186ca <__aeabi_dadd+0x472>
   187f2:	2500      	movs	r5, #0
   187f4:	2700      	movs	r7, #0
   187f6:	e5f3      	b.n	183e0 <__aeabi_dadd+0x188>
   187f8:	464e      	mov	r6, r9
   187fa:	0025      	movs	r5, r4
   187fc:	3e20      	subs	r6, #32
   187fe:	40f5      	lsrs	r5, r6
   18800:	464b      	mov	r3, r9
   18802:	002e      	movs	r6, r5
   18804:	2b20      	cmp	r3, #32
   18806:	d02d      	beq.n	18864 <__aeabi_dadd+0x60c>
   18808:	2540      	movs	r5, #64	; 0x40
   1880a:	1aed      	subs	r5, r5, r3
   1880c:	40ac      	lsls	r4, r5
   1880e:	4327      	orrs	r7, r4
   18810:	1e7c      	subs	r4, r7, #1
   18812:	41a7      	sbcs	r7, r4
   18814:	2400      	movs	r4, #0
   18816:	4337      	orrs	r7, r6
   18818:	e6c9      	b.n	185ae <__aeabi_dadd+0x356>
   1881a:	2480      	movs	r4, #128	; 0x80
   1881c:	2500      	movs	r5, #0
   1881e:	0324      	lsls	r4, r4, #12
   18820:	4e13      	ldr	r6, [pc, #76]	; (18870 <__aeabi_dadd+0x618>)
   18822:	2700      	movs	r7, #0
   18824:	e5dc      	b.n	183e0 <__aeabi_dadd+0x188>
   18826:	4327      	orrs	r7, r4
   18828:	1e7c      	subs	r4, r7, #1
   1882a:	41a7      	sbcs	r7, r4
   1882c:	2400      	movs	r4, #0
   1882e:	e779      	b.n	18724 <__aeabi_dadd+0x4cc>
   18830:	000c      	movs	r4, r1
   18832:	0017      	movs	r7, r2
   18834:	4e0e      	ldr	r6, [pc, #56]	; (18870 <__aeabi_dadd+0x618>)
   18836:	e593      	b.n	18360 <__aeabi_dadd+0x108>
   18838:	000c      	movs	r4, r1
   1883a:	0017      	movs	r7, r2
   1883c:	e590      	b.n	18360 <__aeabi_dadd+0x108>
   1883e:	4656      	mov	r6, sl
   18840:	0023      	movs	r3, r4
   18842:	3e20      	subs	r6, #32
   18844:	40f3      	lsrs	r3, r6
   18846:	4699      	mov	r9, r3
   18848:	4653      	mov	r3, sl
   1884a:	2b20      	cmp	r3, #32
   1884c:	d00e      	beq.n	1886c <__aeabi_dadd+0x614>
   1884e:	2340      	movs	r3, #64	; 0x40
   18850:	4656      	mov	r6, sl
   18852:	1b9b      	subs	r3, r3, r6
   18854:	409c      	lsls	r4, r3
   18856:	4327      	orrs	r7, r4
   18858:	1e7c      	subs	r4, r7, #1
   1885a:	41a7      	sbcs	r7, r4
   1885c:	464b      	mov	r3, r9
   1885e:	2400      	movs	r4, #0
   18860:	431f      	orrs	r7, r3
   18862:	e75f      	b.n	18724 <__aeabi_dadd+0x4cc>
   18864:	2400      	movs	r4, #0
   18866:	e7d2      	b.n	1880e <__aeabi_dadd+0x5b6>
   18868:	0017      	movs	r7, r2
   1886a:	e5b2      	b.n	183d2 <__aeabi_dadd+0x17a>
   1886c:	2400      	movs	r4, #0
   1886e:	e7f2      	b.n	18856 <__aeabi_dadd+0x5fe>
   18870:	000007ff 	.word	0x000007ff
   18874:	ff7fffff 	.word	0xff7fffff

00018878 <__aeabi_ddiv>:
   18878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1887a:	4657      	mov	r7, sl
   1887c:	4645      	mov	r5, r8
   1887e:	46de      	mov	lr, fp
   18880:	464e      	mov	r6, r9
   18882:	b5e0      	push	{r5, r6, r7, lr}
   18884:	004c      	lsls	r4, r1, #1
   18886:	030e      	lsls	r6, r1, #12
   18888:	b087      	sub	sp, #28
   1888a:	4683      	mov	fp, r0
   1888c:	4692      	mov	sl, r2
   1888e:	001d      	movs	r5, r3
   18890:	4680      	mov	r8, r0
   18892:	0b36      	lsrs	r6, r6, #12
   18894:	0d64      	lsrs	r4, r4, #21
   18896:	0fcf      	lsrs	r7, r1, #31
   18898:	2c00      	cmp	r4, #0
   1889a:	d04f      	beq.n	1893c <__aeabi_ddiv+0xc4>
   1889c:	4b6f      	ldr	r3, [pc, #444]	; (18a5c <__aeabi_ddiv+0x1e4>)
   1889e:	429c      	cmp	r4, r3
   188a0:	d035      	beq.n	1890e <__aeabi_ddiv+0x96>
   188a2:	2380      	movs	r3, #128	; 0x80
   188a4:	0f42      	lsrs	r2, r0, #29
   188a6:	041b      	lsls	r3, r3, #16
   188a8:	00f6      	lsls	r6, r6, #3
   188aa:	4313      	orrs	r3, r2
   188ac:	4333      	orrs	r3, r6
   188ae:	4699      	mov	r9, r3
   188b0:	00c3      	lsls	r3, r0, #3
   188b2:	4698      	mov	r8, r3
   188b4:	4b6a      	ldr	r3, [pc, #424]	; (18a60 <__aeabi_ddiv+0x1e8>)
   188b6:	2600      	movs	r6, #0
   188b8:	469c      	mov	ip, r3
   188ba:	2300      	movs	r3, #0
   188bc:	4464      	add	r4, ip
   188be:	9303      	str	r3, [sp, #12]
   188c0:	032b      	lsls	r3, r5, #12
   188c2:	0b1b      	lsrs	r3, r3, #12
   188c4:	469b      	mov	fp, r3
   188c6:	006b      	lsls	r3, r5, #1
   188c8:	0fed      	lsrs	r5, r5, #31
   188ca:	4650      	mov	r0, sl
   188cc:	0d5b      	lsrs	r3, r3, #21
   188ce:	9501      	str	r5, [sp, #4]
   188d0:	d05e      	beq.n	18990 <__aeabi_ddiv+0x118>
   188d2:	4a62      	ldr	r2, [pc, #392]	; (18a5c <__aeabi_ddiv+0x1e4>)
   188d4:	4293      	cmp	r3, r2
   188d6:	d053      	beq.n	18980 <__aeabi_ddiv+0x108>
   188d8:	465a      	mov	r2, fp
   188da:	00d1      	lsls	r1, r2, #3
   188dc:	2280      	movs	r2, #128	; 0x80
   188de:	0f40      	lsrs	r0, r0, #29
   188e0:	0412      	lsls	r2, r2, #16
   188e2:	4302      	orrs	r2, r0
   188e4:	430a      	orrs	r2, r1
   188e6:	4693      	mov	fp, r2
   188e8:	4652      	mov	r2, sl
   188ea:	00d1      	lsls	r1, r2, #3
   188ec:	4a5c      	ldr	r2, [pc, #368]	; (18a60 <__aeabi_ddiv+0x1e8>)
   188ee:	4694      	mov	ip, r2
   188f0:	2200      	movs	r2, #0
   188f2:	4463      	add	r3, ip
   188f4:	0038      	movs	r0, r7
   188f6:	4068      	eors	r0, r5
   188f8:	4684      	mov	ip, r0
   188fa:	9002      	str	r0, [sp, #8]
   188fc:	1ae4      	subs	r4, r4, r3
   188fe:	4316      	orrs	r6, r2
   18900:	2e0f      	cmp	r6, #15
   18902:	d900      	bls.n	18906 <__aeabi_ddiv+0x8e>
   18904:	e0b4      	b.n	18a70 <__aeabi_ddiv+0x1f8>
   18906:	4b57      	ldr	r3, [pc, #348]	; (18a64 <__aeabi_ddiv+0x1ec>)
   18908:	00b6      	lsls	r6, r6, #2
   1890a:	599b      	ldr	r3, [r3, r6]
   1890c:	469f      	mov	pc, r3
   1890e:	0003      	movs	r3, r0
   18910:	4333      	orrs	r3, r6
   18912:	4699      	mov	r9, r3
   18914:	d16c      	bne.n	189f0 <__aeabi_ddiv+0x178>
   18916:	2300      	movs	r3, #0
   18918:	4698      	mov	r8, r3
   1891a:	3302      	adds	r3, #2
   1891c:	2608      	movs	r6, #8
   1891e:	9303      	str	r3, [sp, #12]
   18920:	e7ce      	b.n	188c0 <__aeabi_ddiv+0x48>
   18922:	46cb      	mov	fp, r9
   18924:	4641      	mov	r1, r8
   18926:	9a03      	ldr	r2, [sp, #12]
   18928:	9701      	str	r7, [sp, #4]
   1892a:	2a02      	cmp	r2, #2
   1892c:	d165      	bne.n	189fa <__aeabi_ddiv+0x182>
   1892e:	9b01      	ldr	r3, [sp, #4]
   18930:	4c4a      	ldr	r4, [pc, #296]	; (18a5c <__aeabi_ddiv+0x1e4>)
   18932:	469c      	mov	ip, r3
   18934:	2300      	movs	r3, #0
   18936:	2200      	movs	r2, #0
   18938:	4698      	mov	r8, r3
   1893a:	e06b      	b.n	18a14 <__aeabi_ddiv+0x19c>
   1893c:	0003      	movs	r3, r0
   1893e:	4333      	orrs	r3, r6
   18940:	4699      	mov	r9, r3
   18942:	d04e      	beq.n	189e2 <__aeabi_ddiv+0x16a>
   18944:	2e00      	cmp	r6, #0
   18946:	d100      	bne.n	1894a <__aeabi_ddiv+0xd2>
   18948:	e1bc      	b.n	18cc4 <__aeabi_ddiv+0x44c>
   1894a:	0030      	movs	r0, r6
   1894c:	f001 fa0c 	bl	19d68 <__clzsi2>
   18950:	0003      	movs	r3, r0
   18952:	3b0b      	subs	r3, #11
   18954:	2b1c      	cmp	r3, #28
   18956:	dd00      	ble.n	1895a <__aeabi_ddiv+0xe2>
   18958:	e1ac      	b.n	18cb4 <__aeabi_ddiv+0x43c>
   1895a:	221d      	movs	r2, #29
   1895c:	1ad3      	subs	r3, r2, r3
   1895e:	465a      	mov	r2, fp
   18960:	0001      	movs	r1, r0
   18962:	40da      	lsrs	r2, r3
   18964:	3908      	subs	r1, #8
   18966:	408e      	lsls	r6, r1
   18968:	0013      	movs	r3, r2
   1896a:	4333      	orrs	r3, r6
   1896c:	4699      	mov	r9, r3
   1896e:	465b      	mov	r3, fp
   18970:	408b      	lsls	r3, r1
   18972:	4698      	mov	r8, r3
   18974:	2300      	movs	r3, #0
   18976:	4c3c      	ldr	r4, [pc, #240]	; (18a68 <__aeabi_ddiv+0x1f0>)
   18978:	2600      	movs	r6, #0
   1897a:	1a24      	subs	r4, r4, r0
   1897c:	9303      	str	r3, [sp, #12]
   1897e:	e79f      	b.n	188c0 <__aeabi_ddiv+0x48>
   18980:	4651      	mov	r1, sl
   18982:	465a      	mov	r2, fp
   18984:	4311      	orrs	r1, r2
   18986:	d129      	bne.n	189dc <__aeabi_ddiv+0x164>
   18988:	2200      	movs	r2, #0
   1898a:	4693      	mov	fp, r2
   1898c:	3202      	adds	r2, #2
   1898e:	e7b1      	b.n	188f4 <__aeabi_ddiv+0x7c>
   18990:	4659      	mov	r1, fp
   18992:	4301      	orrs	r1, r0
   18994:	d01e      	beq.n	189d4 <__aeabi_ddiv+0x15c>
   18996:	465b      	mov	r3, fp
   18998:	2b00      	cmp	r3, #0
   1899a:	d100      	bne.n	1899e <__aeabi_ddiv+0x126>
   1899c:	e19e      	b.n	18cdc <__aeabi_ddiv+0x464>
   1899e:	4658      	mov	r0, fp
   189a0:	f001 f9e2 	bl	19d68 <__clzsi2>
   189a4:	0003      	movs	r3, r0
   189a6:	3b0b      	subs	r3, #11
   189a8:	2b1c      	cmp	r3, #28
   189aa:	dd00      	ble.n	189ae <__aeabi_ddiv+0x136>
   189ac:	e18f      	b.n	18cce <__aeabi_ddiv+0x456>
   189ae:	0002      	movs	r2, r0
   189b0:	4659      	mov	r1, fp
   189b2:	3a08      	subs	r2, #8
   189b4:	4091      	lsls	r1, r2
   189b6:	468b      	mov	fp, r1
   189b8:	211d      	movs	r1, #29
   189ba:	1acb      	subs	r3, r1, r3
   189bc:	4651      	mov	r1, sl
   189be:	40d9      	lsrs	r1, r3
   189c0:	000b      	movs	r3, r1
   189c2:	4659      	mov	r1, fp
   189c4:	430b      	orrs	r3, r1
   189c6:	4651      	mov	r1, sl
   189c8:	469b      	mov	fp, r3
   189ca:	4091      	lsls	r1, r2
   189cc:	4b26      	ldr	r3, [pc, #152]	; (18a68 <__aeabi_ddiv+0x1f0>)
   189ce:	2200      	movs	r2, #0
   189d0:	1a1b      	subs	r3, r3, r0
   189d2:	e78f      	b.n	188f4 <__aeabi_ddiv+0x7c>
   189d4:	2300      	movs	r3, #0
   189d6:	2201      	movs	r2, #1
   189d8:	469b      	mov	fp, r3
   189da:	e78b      	b.n	188f4 <__aeabi_ddiv+0x7c>
   189dc:	4651      	mov	r1, sl
   189de:	2203      	movs	r2, #3
   189e0:	e788      	b.n	188f4 <__aeabi_ddiv+0x7c>
   189e2:	2300      	movs	r3, #0
   189e4:	4698      	mov	r8, r3
   189e6:	3301      	adds	r3, #1
   189e8:	2604      	movs	r6, #4
   189ea:	2400      	movs	r4, #0
   189ec:	9303      	str	r3, [sp, #12]
   189ee:	e767      	b.n	188c0 <__aeabi_ddiv+0x48>
   189f0:	2303      	movs	r3, #3
   189f2:	46b1      	mov	r9, r6
   189f4:	9303      	str	r3, [sp, #12]
   189f6:	260c      	movs	r6, #12
   189f8:	e762      	b.n	188c0 <__aeabi_ddiv+0x48>
   189fa:	2a03      	cmp	r2, #3
   189fc:	d100      	bne.n	18a00 <__aeabi_ddiv+0x188>
   189fe:	e25c      	b.n	18eba <__aeabi_ddiv+0x642>
   18a00:	9b01      	ldr	r3, [sp, #4]
   18a02:	2a01      	cmp	r2, #1
   18a04:	d000      	beq.n	18a08 <__aeabi_ddiv+0x190>
   18a06:	e1e4      	b.n	18dd2 <__aeabi_ddiv+0x55a>
   18a08:	4013      	ands	r3, r2
   18a0a:	469c      	mov	ip, r3
   18a0c:	2300      	movs	r3, #0
   18a0e:	2400      	movs	r4, #0
   18a10:	2200      	movs	r2, #0
   18a12:	4698      	mov	r8, r3
   18a14:	2100      	movs	r1, #0
   18a16:	0312      	lsls	r2, r2, #12
   18a18:	0b13      	lsrs	r3, r2, #12
   18a1a:	0d0a      	lsrs	r2, r1, #20
   18a1c:	0512      	lsls	r2, r2, #20
   18a1e:	431a      	orrs	r2, r3
   18a20:	0523      	lsls	r3, r4, #20
   18a22:	4c12      	ldr	r4, [pc, #72]	; (18a6c <__aeabi_ddiv+0x1f4>)
   18a24:	4640      	mov	r0, r8
   18a26:	4022      	ands	r2, r4
   18a28:	4313      	orrs	r3, r2
   18a2a:	4662      	mov	r2, ip
   18a2c:	005b      	lsls	r3, r3, #1
   18a2e:	07d2      	lsls	r2, r2, #31
   18a30:	085b      	lsrs	r3, r3, #1
   18a32:	4313      	orrs	r3, r2
   18a34:	0019      	movs	r1, r3
   18a36:	b007      	add	sp, #28
   18a38:	bc3c      	pop	{r2, r3, r4, r5}
   18a3a:	4690      	mov	r8, r2
   18a3c:	4699      	mov	r9, r3
   18a3e:	46a2      	mov	sl, r4
   18a40:	46ab      	mov	fp, r5
   18a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a44:	2300      	movs	r3, #0
   18a46:	2280      	movs	r2, #128	; 0x80
   18a48:	469c      	mov	ip, r3
   18a4a:	0312      	lsls	r2, r2, #12
   18a4c:	4698      	mov	r8, r3
   18a4e:	4c03      	ldr	r4, [pc, #12]	; (18a5c <__aeabi_ddiv+0x1e4>)
   18a50:	e7e0      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18a52:	2300      	movs	r3, #0
   18a54:	4c01      	ldr	r4, [pc, #4]	; (18a5c <__aeabi_ddiv+0x1e4>)
   18a56:	2200      	movs	r2, #0
   18a58:	4698      	mov	r8, r3
   18a5a:	e7db      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18a5c:	000007ff 	.word	0x000007ff
   18a60:	fffffc01 	.word	0xfffffc01
   18a64:	0001d4d0 	.word	0x0001d4d0
   18a68:	fffffc0d 	.word	0xfffffc0d
   18a6c:	800fffff 	.word	0x800fffff
   18a70:	45d9      	cmp	r9, fp
   18a72:	d900      	bls.n	18a76 <__aeabi_ddiv+0x1fe>
   18a74:	e139      	b.n	18cea <__aeabi_ddiv+0x472>
   18a76:	d100      	bne.n	18a7a <__aeabi_ddiv+0x202>
   18a78:	e134      	b.n	18ce4 <__aeabi_ddiv+0x46c>
   18a7a:	2300      	movs	r3, #0
   18a7c:	4646      	mov	r6, r8
   18a7e:	464d      	mov	r5, r9
   18a80:	469a      	mov	sl, r3
   18a82:	3c01      	subs	r4, #1
   18a84:	465b      	mov	r3, fp
   18a86:	0e0a      	lsrs	r2, r1, #24
   18a88:	021b      	lsls	r3, r3, #8
   18a8a:	431a      	orrs	r2, r3
   18a8c:	020b      	lsls	r3, r1, #8
   18a8e:	0c17      	lsrs	r7, r2, #16
   18a90:	9303      	str	r3, [sp, #12]
   18a92:	0413      	lsls	r3, r2, #16
   18a94:	0c1b      	lsrs	r3, r3, #16
   18a96:	0039      	movs	r1, r7
   18a98:	0028      	movs	r0, r5
   18a9a:	4690      	mov	r8, r2
   18a9c:	9301      	str	r3, [sp, #4]
   18a9e:	f7ff f9fd 	bl	17e9c <__udivsi3>
   18aa2:	0002      	movs	r2, r0
   18aa4:	9b01      	ldr	r3, [sp, #4]
   18aa6:	4683      	mov	fp, r0
   18aa8:	435a      	muls	r2, r3
   18aaa:	0028      	movs	r0, r5
   18aac:	0039      	movs	r1, r7
   18aae:	4691      	mov	r9, r2
   18ab0:	f7ff fa7a 	bl	17fa8 <__aeabi_uidivmod>
   18ab4:	0c35      	lsrs	r5, r6, #16
   18ab6:	0409      	lsls	r1, r1, #16
   18ab8:	430d      	orrs	r5, r1
   18aba:	45a9      	cmp	r9, r5
   18abc:	d90d      	bls.n	18ada <__aeabi_ddiv+0x262>
   18abe:	465b      	mov	r3, fp
   18ac0:	4445      	add	r5, r8
   18ac2:	3b01      	subs	r3, #1
   18ac4:	45a8      	cmp	r8, r5
   18ac6:	d900      	bls.n	18aca <__aeabi_ddiv+0x252>
   18ac8:	e13a      	b.n	18d40 <__aeabi_ddiv+0x4c8>
   18aca:	45a9      	cmp	r9, r5
   18acc:	d800      	bhi.n	18ad0 <__aeabi_ddiv+0x258>
   18ace:	e137      	b.n	18d40 <__aeabi_ddiv+0x4c8>
   18ad0:	2302      	movs	r3, #2
   18ad2:	425b      	negs	r3, r3
   18ad4:	469c      	mov	ip, r3
   18ad6:	4445      	add	r5, r8
   18ad8:	44e3      	add	fp, ip
   18ada:	464b      	mov	r3, r9
   18adc:	1aeb      	subs	r3, r5, r3
   18ade:	0039      	movs	r1, r7
   18ae0:	0018      	movs	r0, r3
   18ae2:	9304      	str	r3, [sp, #16]
   18ae4:	f7ff f9da 	bl	17e9c <__udivsi3>
   18ae8:	9b01      	ldr	r3, [sp, #4]
   18aea:	0005      	movs	r5, r0
   18aec:	4343      	muls	r3, r0
   18aee:	0039      	movs	r1, r7
   18af0:	9804      	ldr	r0, [sp, #16]
   18af2:	4699      	mov	r9, r3
   18af4:	f7ff fa58 	bl	17fa8 <__aeabi_uidivmod>
   18af8:	0433      	lsls	r3, r6, #16
   18afa:	0409      	lsls	r1, r1, #16
   18afc:	0c1b      	lsrs	r3, r3, #16
   18afe:	430b      	orrs	r3, r1
   18b00:	4599      	cmp	r9, r3
   18b02:	d909      	bls.n	18b18 <__aeabi_ddiv+0x2a0>
   18b04:	4443      	add	r3, r8
   18b06:	1e6a      	subs	r2, r5, #1
   18b08:	4598      	cmp	r8, r3
   18b0a:	d900      	bls.n	18b0e <__aeabi_ddiv+0x296>
   18b0c:	e11a      	b.n	18d44 <__aeabi_ddiv+0x4cc>
   18b0e:	4599      	cmp	r9, r3
   18b10:	d800      	bhi.n	18b14 <__aeabi_ddiv+0x29c>
   18b12:	e117      	b.n	18d44 <__aeabi_ddiv+0x4cc>
   18b14:	3d02      	subs	r5, #2
   18b16:	4443      	add	r3, r8
   18b18:	464a      	mov	r2, r9
   18b1a:	1a9b      	subs	r3, r3, r2
   18b1c:	465a      	mov	r2, fp
   18b1e:	0412      	lsls	r2, r2, #16
   18b20:	432a      	orrs	r2, r5
   18b22:	9903      	ldr	r1, [sp, #12]
   18b24:	4693      	mov	fp, r2
   18b26:	0c10      	lsrs	r0, r2, #16
   18b28:	0c0a      	lsrs	r2, r1, #16
   18b2a:	4691      	mov	r9, r2
   18b2c:	0409      	lsls	r1, r1, #16
   18b2e:	465a      	mov	r2, fp
   18b30:	0c09      	lsrs	r1, r1, #16
   18b32:	464e      	mov	r6, r9
   18b34:	000d      	movs	r5, r1
   18b36:	0412      	lsls	r2, r2, #16
   18b38:	0c12      	lsrs	r2, r2, #16
   18b3a:	4345      	muls	r5, r0
   18b3c:	9105      	str	r1, [sp, #20]
   18b3e:	4351      	muls	r1, r2
   18b40:	4372      	muls	r2, r6
   18b42:	4370      	muls	r0, r6
   18b44:	1952      	adds	r2, r2, r5
   18b46:	0c0e      	lsrs	r6, r1, #16
   18b48:	18b2      	adds	r2, r6, r2
   18b4a:	4295      	cmp	r5, r2
   18b4c:	d903      	bls.n	18b56 <__aeabi_ddiv+0x2de>
   18b4e:	2580      	movs	r5, #128	; 0x80
   18b50:	026d      	lsls	r5, r5, #9
   18b52:	46ac      	mov	ip, r5
   18b54:	4460      	add	r0, ip
   18b56:	0c15      	lsrs	r5, r2, #16
   18b58:	0409      	lsls	r1, r1, #16
   18b5a:	0412      	lsls	r2, r2, #16
   18b5c:	0c09      	lsrs	r1, r1, #16
   18b5e:	1828      	adds	r0, r5, r0
   18b60:	1852      	adds	r2, r2, r1
   18b62:	4283      	cmp	r3, r0
   18b64:	d200      	bcs.n	18b68 <__aeabi_ddiv+0x2f0>
   18b66:	e0ce      	b.n	18d06 <__aeabi_ddiv+0x48e>
   18b68:	d100      	bne.n	18b6c <__aeabi_ddiv+0x2f4>
   18b6a:	e0c8      	b.n	18cfe <__aeabi_ddiv+0x486>
   18b6c:	1a1d      	subs	r5, r3, r0
   18b6e:	4653      	mov	r3, sl
   18b70:	1a9e      	subs	r6, r3, r2
   18b72:	45b2      	cmp	sl, r6
   18b74:	4192      	sbcs	r2, r2
   18b76:	4252      	negs	r2, r2
   18b78:	1aab      	subs	r3, r5, r2
   18b7a:	469a      	mov	sl, r3
   18b7c:	4598      	cmp	r8, r3
   18b7e:	d100      	bne.n	18b82 <__aeabi_ddiv+0x30a>
   18b80:	e117      	b.n	18db2 <__aeabi_ddiv+0x53a>
   18b82:	0039      	movs	r1, r7
   18b84:	0018      	movs	r0, r3
   18b86:	f7ff f989 	bl	17e9c <__udivsi3>
   18b8a:	9b01      	ldr	r3, [sp, #4]
   18b8c:	0005      	movs	r5, r0
   18b8e:	4343      	muls	r3, r0
   18b90:	0039      	movs	r1, r7
   18b92:	4650      	mov	r0, sl
   18b94:	9304      	str	r3, [sp, #16]
   18b96:	f7ff fa07 	bl	17fa8 <__aeabi_uidivmod>
   18b9a:	9804      	ldr	r0, [sp, #16]
   18b9c:	040b      	lsls	r3, r1, #16
   18b9e:	0c31      	lsrs	r1, r6, #16
   18ba0:	4319      	orrs	r1, r3
   18ba2:	4288      	cmp	r0, r1
   18ba4:	d909      	bls.n	18bba <__aeabi_ddiv+0x342>
   18ba6:	4441      	add	r1, r8
   18ba8:	1e6b      	subs	r3, r5, #1
   18baa:	4588      	cmp	r8, r1
   18bac:	d900      	bls.n	18bb0 <__aeabi_ddiv+0x338>
   18bae:	e107      	b.n	18dc0 <__aeabi_ddiv+0x548>
   18bb0:	4288      	cmp	r0, r1
   18bb2:	d800      	bhi.n	18bb6 <__aeabi_ddiv+0x33e>
   18bb4:	e104      	b.n	18dc0 <__aeabi_ddiv+0x548>
   18bb6:	3d02      	subs	r5, #2
   18bb8:	4441      	add	r1, r8
   18bba:	9b04      	ldr	r3, [sp, #16]
   18bbc:	1acb      	subs	r3, r1, r3
   18bbe:	0018      	movs	r0, r3
   18bc0:	0039      	movs	r1, r7
   18bc2:	9304      	str	r3, [sp, #16]
   18bc4:	f7ff f96a 	bl	17e9c <__udivsi3>
   18bc8:	9b01      	ldr	r3, [sp, #4]
   18bca:	4682      	mov	sl, r0
   18bcc:	4343      	muls	r3, r0
   18bce:	0039      	movs	r1, r7
   18bd0:	9804      	ldr	r0, [sp, #16]
   18bd2:	9301      	str	r3, [sp, #4]
   18bd4:	f7ff f9e8 	bl	17fa8 <__aeabi_uidivmod>
   18bd8:	9801      	ldr	r0, [sp, #4]
   18bda:	040b      	lsls	r3, r1, #16
   18bdc:	0431      	lsls	r1, r6, #16
   18bde:	0c09      	lsrs	r1, r1, #16
   18be0:	4319      	orrs	r1, r3
   18be2:	4288      	cmp	r0, r1
   18be4:	d90d      	bls.n	18c02 <__aeabi_ddiv+0x38a>
   18be6:	4653      	mov	r3, sl
   18be8:	4441      	add	r1, r8
   18bea:	3b01      	subs	r3, #1
   18bec:	4588      	cmp	r8, r1
   18bee:	d900      	bls.n	18bf2 <__aeabi_ddiv+0x37a>
   18bf0:	e0e8      	b.n	18dc4 <__aeabi_ddiv+0x54c>
   18bf2:	4288      	cmp	r0, r1
   18bf4:	d800      	bhi.n	18bf8 <__aeabi_ddiv+0x380>
   18bf6:	e0e5      	b.n	18dc4 <__aeabi_ddiv+0x54c>
   18bf8:	2302      	movs	r3, #2
   18bfa:	425b      	negs	r3, r3
   18bfc:	469c      	mov	ip, r3
   18bfe:	4441      	add	r1, r8
   18c00:	44e2      	add	sl, ip
   18c02:	9b01      	ldr	r3, [sp, #4]
   18c04:	042d      	lsls	r5, r5, #16
   18c06:	1ace      	subs	r6, r1, r3
   18c08:	4651      	mov	r1, sl
   18c0a:	4329      	orrs	r1, r5
   18c0c:	9d05      	ldr	r5, [sp, #20]
   18c0e:	464f      	mov	r7, r9
   18c10:	002a      	movs	r2, r5
   18c12:	040b      	lsls	r3, r1, #16
   18c14:	0c08      	lsrs	r0, r1, #16
   18c16:	0c1b      	lsrs	r3, r3, #16
   18c18:	435a      	muls	r2, r3
   18c1a:	4345      	muls	r5, r0
   18c1c:	437b      	muls	r3, r7
   18c1e:	4378      	muls	r0, r7
   18c20:	195b      	adds	r3, r3, r5
   18c22:	0c17      	lsrs	r7, r2, #16
   18c24:	18fb      	adds	r3, r7, r3
   18c26:	429d      	cmp	r5, r3
   18c28:	d903      	bls.n	18c32 <__aeabi_ddiv+0x3ba>
   18c2a:	2580      	movs	r5, #128	; 0x80
   18c2c:	026d      	lsls	r5, r5, #9
   18c2e:	46ac      	mov	ip, r5
   18c30:	4460      	add	r0, ip
   18c32:	0c1d      	lsrs	r5, r3, #16
   18c34:	0412      	lsls	r2, r2, #16
   18c36:	041b      	lsls	r3, r3, #16
   18c38:	0c12      	lsrs	r2, r2, #16
   18c3a:	1828      	adds	r0, r5, r0
   18c3c:	189b      	adds	r3, r3, r2
   18c3e:	4286      	cmp	r6, r0
   18c40:	d200      	bcs.n	18c44 <__aeabi_ddiv+0x3cc>
   18c42:	e093      	b.n	18d6c <__aeabi_ddiv+0x4f4>
   18c44:	d100      	bne.n	18c48 <__aeabi_ddiv+0x3d0>
   18c46:	e08e      	b.n	18d66 <__aeabi_ddiv+0x4ee>
   18c48:	2301      	movs	r3, #1
   18c4a:	4319      	orrs	r1, r3
   18c4c:	4ba0      	ldr	r3, [pc, #640]	; (18ed0 <__aeabi_ddiv+0x658>)
   18c4e:	18e3      	adds	r3, r4, r3
   18c50:	2b00      	cmp	r3, #0
   18c52:	dc00      	bgt.n	18c56 <__aeabi_ddiv+0x3de>
   18c54:	e099      	b.n	18d8a <__aeabi_ddiv+0x512>
   18c56:	074a      	lsls	r2, r1, #29
   18c58:	d000      	beq.n	18c5c <__aeabi_ddiv+0x3e4>
   18c5a:	e09e      	b.n	18d9a <__aeabi_ddiv+0x522>
   18c5c:	465a      	mov	r2, fp
   18c5e:	01d2      	lsls	r2, r2, #7
   18c60:	d506      	bpl.n	18c70 <__aeabi_ddiv+0x3f8>
   18c62:	465a      	mov	r2, fp
   18c64:	4b9b      	ldr	r3, [pc, #620]	; (18ed4 <__aeabi_ddiv+0x65c>)
   18c66:	401a      	ands	r2, r3
   18c68:	2380      	movs	r3, #128	; 0x80
   18c6a:	4693      	mov	fp, r2
   18c6c:	00db      	lsls	r3, r3, #3
   18c6e:	18e3      	adds	r3, r4, r3
   18c70:	4a99      	ldr	r2, [pc, #612]	; (18ed8 <__aeabi_ddiv+0x660>)
   18c72:	4293      	cmp	r3, r2
   18c74:	dd68      	ble.n	18d48 <__aeabi_ddiv+0x4d0>
   18c76:	2301      	movs	r3, #1
   18c78:	9a02      	ldr	r2, [sp, #8]
   18c7a:	4c98      	ldr	r4, [pc, #608]	; (18edc <__aeabi_ddiv+0x664>)
   18c7c:	401a      	ands	r2, r3
   18c7e:	2300      	movs	r3, #0
   18c80:	4694      	mov	ip, r2
   18c82:	4698      	mov	r8, r3
   18c84:	2200      	movs	r2, #0
   18c86:	e6c5      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18c88:	2280      	movs	r2, #128	; 0x80
   18c8a:	464b      	mov	r3, r9
   18c8c:	0312      	lsls	r2, r2, #12
   18c8e:	4213      	tst	r3, r2
   18c90:	d00a      	beq.n	18ca8 <__aeabi_ddiv+0x430>
   18c92:	465b      	mov	r3, fp
   18c94:	4213      	tst	r3, r2
   18c96:	d106      	bne.n	18ca6 <__aeabi_ddiv+0x42e>
   18c98:	431a      	orrs	r2, r3
   18c9a:	0312      	lsls	r2, r2, #12
   18c9c:	0b12      	lsrs	r2, r2, #12
   18c9e:	46ac      	mov	ip, r5
   18ca0:	4688      	mov	r8, r1
   18ca2:	4c8e      	ldr	r4, [pc, #568]	; (18edc <__aeabi_ddiv+0x664>)
   18ca4:	e6b6      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18ca6:	464b      	mov	r3, r9
   18ca8:	431a      	orrs	r2, r3
   18caa:	0312      	lsls	r2, r2, #12
   18cac:	0b12      	lsrs	r2, r2, #12
   18cae:	46bc      	mov	ip, r7
   18cb0:	4c8a      	ldr	r4, [pc, #552]	; (18edc <__aeabi_ddiv+0x664>)
   18cb2:	e6af      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18cb4:	0003      	movs	r3, r0
   18cb6:	465a      	mov	r2, fp
   18cb8:	3b28      	subs	r3, #40	; 0x28
   18cba:	409a      	lsls	r2, r3
   18cbc:	2300      	movs	r3, #0
   18cbe:	4691      	mov	r9, r2
   18cc0:	4698      	mov	r8, r3
   18cc2:	e657      	b.n	18974 <__aeabi_ddiv+0xfc>
   18cc4:	4658      	mov	r0, fp
   18cc6:	f001 f84f 	bl	19d68 <__clzsi2>
   18cca:	3020      	adds	r0, #32
   18ccc:	e640      	b.n	18950 <__aeabi_ddiv+0xd8>
   18cce:	0003      	movs	r3, r0
   18cd0:	4652      	mov	r2, sl
   18cd2:	3b28      	subs	r3, #40	; 0x28
   18cd4:	409a      	lsls	r2, r3
   18cd6:	2100      	movs	r1, #0
   18cd8:	4693      	mov	fp, r2
   18cda:	e677      	b.n	189cc <__aeabi_ddiv+0x154>
   18cdc:	f001 f844 	bl	19d68 <__clzsi2>
   18ce0:	3020      	adds	r0, #32
   18ce2:	e65f      	b.n	189a4 <__aeabi_ddiv+0x12c>
   18ce4:	4588      	cmp	r8, r1
   18ce6:	d200      	bcs.n	18cea <__aeabi_ddiv+0x472>
   18ce8:	e6c7      	b.n	18a7a <__aeabi_ddiv+0x202>
   18cea:	464b      	mov	r3, r9
   18cec:	07de      	lsls	r6, r3, #31
   18cee:	085d      	lsrs	r5, r3, #1
   18cf0:	4643      	mov	r3, r8
   18cf2:	085b      	lsrs	r3, r3, #1
   18cf4:	431e      	orrs	r6, r3
   18cf6:	4643      	mov	r3, r8
   18cf8:	07db      	lsls	r3, r3, #31
   18cfa:	469a      	mov	sl, r3
   18cfc:	e6c2      	b.n	18a84 <__aeabi_ddiv+0x20c>
   18cfe:	2500      	movs	r5, #0
   18d00:	4592      	cmp	sl, r2
   18d02:	d300      	bcc.n	18d06 <__aeabi_ddiv+0x48e>
   18d04:	e733      	b.n	18b6e <__aeabi_ddiv+0x2f6>
   18d06:	9e03      	ldr	r6, [sp, #12]
   18d08:	4659      	mov	r1, fp
   18d0a:	46b4      	mov	ip, r6
   18d0c:	44e2      	add	sl, ip
   18d0e:	45b2      	cmp	sl, r6
   18d10:	41ad      	sbcs	r5, r5
   18d12:	426d      	negs	r5, r5
   18d14:	4445      	add	r5, r8
   18d16:	18eb      	adds	r3, r5, r3
   18d18:	3901      	subs	r1, #1
   18d1a:	4598      	cmp	r8, r3
   18d1c:	d207      	bcs.n	18d2e <__aeabi_ddiv+0x4b6>
   18d1e:	4298      	cmp	r0, r3
   18d20:	d900      	bls.n	18d24 <__aeabi_ddiv+0x4ac>
   18d22:	e07f      	b.n	18e24 <__aeabi_ddiv+0x5ac>
   18d24:	d100      	bne.n	18d28 <__aeabi_ddiv+0x4b0>
   18d26:	e0bc      	b.n	18ea2 <__aeabi_ddiv+0x62a>
   18d28:	1a1d      	subs	r5, r3, r0
   18d2a:	468b      	mov	fp, r1
   18d2c:	e71f      	b.n	18b6e <__aeabi_ddiv+0x2f6>
   18d2e:	4598      	cmp	r8, r3
   18d30:	d1fa      	bne.n	18d28 <__aeabi_ddiv+0x4b0>
   18d32:	9d03      	ldr	r5, [sp, #12]
   18d34:	4555      	cmp	r5, sl
   18d36:	d9f2      	bls.n	18d1e <__aeabi_ddiv+0x4a6>
   18d38:	4643      	mov	r3, r8
   18d3a:	468b      	mov	fp, r1
   18d3c:	1a1d      	subs	r5, r3, r0
   18d3e:	e716      	b.n	18b6e <__aeabi_ddiv+0x2f6>
   18d40:	469b      	mov	fp, r3
   18d42:	e6ca      	b.n	18ada <__aeabi_ddiv+0x262>
   18d44:	0015      	movs	r5, r2
   18d46:	e6e7      	b.n	18b18 <__aeabi_ddiv+0x2a0>
   18d48:	465a      	mov	r2, fp
   18d4a:	08c9      	lsrs	r1, r1, #3
   18d4c:	0752      	lsls	r2, r2, #29
   18d4e:	430a      	orrs	r2, r1
   18d50:	055b      	lsls	r3, r3, #21
   18d52:	4690      	mov	r8, r2
   18d54:	0d5c      	lsrs	r4, r3, #21
   18d56:	465a      	mov	r2, fp
   18d58:	2301      	movs	r3, #1
   18d5a:	9902      	ldr	r1, [sp, #8]
   18d5c:	0252      	lsls	r2, r2, #9
   18d5e:	4019      	ands	r1, r3
   18d60:	0b12      	lsrs	r2, r2, #12
   18d62:	468c      	mov	ip, r1
   18d64:	e656      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18d66:	2b00      	cmp	r3, #0
   18d68:	d100      	bne.n	18d6c <__aeabi_ddiv+0x4f4>
   18d6a:	e76f      	b.n	18c4c <__aeabi_ddiv+0x3d4>
   18d6c:	4446      	add	r6, r8
   18d6e:	1e4a      	subs	r2, r1, #1
   18d70:	45b0      	cmp	r8, r6
   18d72:	d929      	bls.n	18dc8 <__aeabi_ddiv+0x550>
   18d74:	0011      	movs	r1, r2
   18d76:	4286      	cmp	r6, r0
   18d78:	d000      	beq.n	18d7c <__aeabi_ddiv+0x504>
   18d7a:	e765      	b.n	18c48 <__aeabi_ddiv+0x3d0>
   18d7c:	9a03      	ldr	r2, [sp, #12]
   18d7e:	4293      	cmp	r3, r2
   18d80:	d000      	beq.n	18d84 <__aeabi_ddiv+0x50c>
   18d82:	e761      	b.n	18c48 <__aeabi_ddiv+0x3d0>
   18d84:	e762      	b.n	18c4c <__aeabi_ddiv+0x3d4>
   18d86:	2101      	movs	r1, #1
   18d88:	4249      	negs	r1, r1
   18d8a:	2001      	movs	r0, #1
   18d8c:	1ac2      	subs	r2, r0, r3
   18d8e:	2a38      	cmp	r2, #56	; 0x38
   18d90:	dd21      	ble.n	18dd6 <__aeabi_ddiv+0x55e>
   18d92:	9b02      	ldr	r3, [sp, #8]
   18d94:	4003      	ands	r3, r0
   18d96:	469c      	mov	ip, r3
   18d98:	e638      	b.n	18a0c <__aeabi_ddiv+0x194>
   18d9a:	220f      	movs	r2, #15
   18d9c:	400a      	ands	r2, r1
   18d9e:	2a04      	cmp	r2, #4
   18da0:	d100      	bne.n	18da4 <__aeabi_ddiv+0x52c>
   18da2:	e75b      	b.n	18c5c <__aeabi_ddiv+0x3e4>
   18da4:	000a      	movs	r2, r1
   18da6:	1d11      	adds	r1, r2, #4
   18da8:	4291      	cmp	r1, r2
   18daa:	4192      	sbcs	r2, r2
   18dac:	4252      	negs	r2, r2
   18dae:	4493      	add	fp, r2
   18db0:	e754      	b.n	18c5c <__aeabi_ddiv+0x3e4>
   18db2:	4b47      	ldr	r3, [pc, #284]	; (18ed0 <__aeabi_ddiv+0x658>)
   18db4:	18e3      	adds	r3, r4, r3
   18db6:	2b00      	cmp	r3, #0
   18db8:	dde5      	ble.n	18d86 <__aeabi_ddiv+0x50e>
   18dba:	2201      	movs	r2, #1
   18dbc:	4252      	negs	r2, r2
   18dbe:	e7f2      	b.n	18da6 <__aeabi_ddiv+0x52e>
   18dc0:	001d      	movs	r5, r3
   18dc2:	e6fa      	b.n	18bba <__aeabi_ddiv+0x342>
   18dc4:	469a      	mov	sl, r3
   18dc6:	e71c      	b.n	18c02 <__aeabi_ddiv+0x38a>
   18dc8:	42b0      	cmp	r0, r6
   18dca:	d839      	bhi.n	18e40 <__aeabi_ddiv+0x5c8>
   18dcc:	d06e      	beq.n	18eac <__aeabi_ddiv+0x634>
   18dce:	0011      	movs	r1, r2
   18dd0:	e73a      	b.n	18c48 <__aeabi_ddiv+0x3d0>
   18dd2:	9302      	str	r3, [sp, #8]
   18dd4:	e73a      	b.n	18c4c <__aeabi_ddiv+0x3d4>
   18dd6:	2a1f      	cmp	r2, #31
   18dd8:	dc3c      	bgt.n	18e54 <__aeabi_ddiv+0x5dc>
   18dda:	2320      	movs	r3, #32
   18ddc:	1a9b      	subs	r3, r3, r2
   18dde:	000c      	movs	r4, r1
   18de0:	4658      	mov	r0, fp
   18de2:	4099      	lsls	r1, r3
   18de4:	4098      	lsls	r0, r3
   18de6:	1e4b      	subs	r3, r1, #1
   18de8:	4199      	sbcs	r1, r3
   18dea:	465b      	mov	r3, fp
   18dec:	40d4      	lsrs	r4, r2
   18dee:	40d3      	lsrs	r3, r2
   18df0:	4320      	orrs	r0, r4
   18df2:	4308      	orrs	r0, r1
   18df4:	001a      	movs	r2, r3
   18df6:	0743      	lsls	r3, r0, #29
   18df8:	d009      	beq.n	18e0e <__aeabi_ddiv+0x596>
   18dfa:	230f      	movs	r3, #15
   18dfc:	4003      	ands	r3, r0
   18dfe:	2b04      	cmp	r3, #4
   18e00:	d005      	beq.n	18e0e <__aeabi_ddiv+0x596>
   18e02:	0001      	movs	r1, r0
   18e04:	1d08      	adds	r0, r1, #4
   18e06:	4288      	cmp	r0, r1
   18e08:	419b      	sbcs	r3, r3
   18e0a:	425b      	negs	r3, r3
   18e0c:	18d2      	adds	r2, r2, r3
   18e0e:	0213      	lsls	r3, r2, #8
   18e10:	d53a      	bpl.n	18e88 <__aeabi_ddiv+0x610>
   18e12:	2301      	movs	r3, #1
   18e14:	9a02      	ldr	r2, [sp, #8]
   18e16:	2401      	movs	r4, #1
   18e18:	401a      	ands	r2, r3
   18e1a:	2300      	movs	r3, #0
   18e1c:	4694      	mov	ip, r2
   18e1e:	4698      	mov	r8, r3
   18e20:	2200      	movs	r2, #0
   18e22:	e5f7      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18e24:	2102      	movs	r1, #2
   18e26:	4249      	negs	r1, r1
   18e28:	468c      	mov	ip, r1
   18e2a:	9d03      	ldr	r5, [sp, #12]
   18e2c:	44e3      	add	fp, ip
   18e2e:	46ac      	mov	ip, r5
   18e30:	44e2      	add	sl, ip
   18e32:	45aa      	cmp	sl, r5
   18e34:	41ad      	sbcs	r5, r5
   18e36:	426d      	negs	r5, r5
   18e38:	4445      	add	r5, r8
   18e3a:	18ed      	adds	r5, r5, r3
   18e3c:	1a2d      	subs	r5, r5, r0
   18e3e:	e696      	b.n	18b6e <__aeabi_ddiv+0x2f6>
   18e40:	1e8a      	subs	r2, r1, #2
   18e42:	9903      	ldr	r1, [sp, #12]
   18e44:	004d      	lsls	r5, r1, #1
   18e46:	428d      	cmp	r5, r1
   18e48:	4189      	sbcs	r1, r1
   18e4a:	4249      	negs	r1, r1
   18e4c:	4441      	add	r1, r8
   18e4e:	1876      	adds	r6, r6, r1
   18e50:	9503      	str	r5, [sp, #12]
   18e52:	e78f      	b.n	18d74 <__aeabi_ddiv+0x4fc>
   18e54:	201f      	movs	r0, #31
   18e56:	4240      	negs	r0, r0
   18e58:	1ac3      	subs	r3, r0, r3
   18e5a:	4658      	mov	r0, fp
   18e5c:	40d8      	lsrs	r0, r3
   18e5e:	0003      	movs	r3, r0
   18e60:	2a20      	cmp	r2, #32
   18e62:	d028      	beq.n	18eb6 <__aeabi_ddiv+0x63e>
   18e64:	2040      	movs	r0, #64	; 0x40
   18e66:	465d      	mov	r5, fp
   18e68:	1a82      	subs	r2, r0, r2
   18e6a:	4095      	lsls	r5, r2
   18e6c:	4329      	orrs	r1, r5
   18e6e:	1e4a      	subs	r2, r1, #1
   18e70:	4191      	sbcs	r1, r2
   18e72:	4319      	orrs	r1, r3
   18e74:	2307      	movs	r3, #7
   18e76:	2200      	movs	r2, #0
   18e78:	400b      	ands	r3, r1
   18e7a:	d009      	beq.n	18e90 <__aeabi_ddiv+0x618>
   18e7c:	230f      	movs	r3, #15
   18e7e:	2200      	movs	r2, #0
   18e80:	400b      	ands	r3, r1
   18e82:	0008      	movs	r0, r1
   18e84:	2b04      	cmp	r3, #4
   18e86:	d1bd      	bne.n	18e04 <__aeabi_ddiv+0x58c>
   18e88:	0001      	movs	r1, r0
   18e8a:	0753      	lsls	r3, r2, #29
   18e8c:	0252      	lsls	r2, r2, #9
   18e8e:	0b12      	lsrs	r2, r2, #12
   18e90:	08c9      	lsrs	r1, r1, #3
   18e92:	4319      	orrs	r1, r3
   18e94:	2301      	movs	r3, #1
   18e96:	4688      	mov	r8, r1
   18e98:	9902      	ldr	r1, [sp, #8]
   18e9a:	2400      	movs	r4, #0
   18e9c:	4019      	ands	r1, r3
   18e9e:	468c      	mov	ip, r1
   18ea0:	e5b8      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18ea2:	4552      	cmp	r2, sl
   18ea4:	d8be      	bhi.n	18e24 <__aeabi_ddiv+0x5ac>
   18ea6:	468b      	mov	fp, r1
   18ea8:	2500      	movs	r5, #0
   18eaa:	e660      	b.n	18b6e <__aeabi_ddiv+0x2f6>
   18eac:	9d03      	ldr	r5, [sp, #12]
   18eae:	429d      	cmp	r5, r3
   18eb0:	d3c6      	bcc.n	18e40 <__aeabi_ddiv+0x5c8>
   18eb2:	0011      	movs	r1, r2
   18eb4:	e762      	b.n	18d7c <__aeabi_ddiv+0x504>
   18eb6:	2500      	movs	r5, #0
   18eb8:	e7d8      	b.n	18e6c <__aeabi_ddiv+0x5f4>
   18eba:	2280      	movs	r2, #128	; 0x80
   18ebc:	465b      	mov	r3, fp
   18ebe:	0312      	lsls	r2, r2, #12
   18ec0:	431a      	orrs	r2, r3
   18ec2:	9b01      	ldr	r3, [sp, #4]
   18ec4:	0312      	lsls	r2, r2, #12
   18ec6:	0b12      	lsrs	r2, r2, #12
   18ec8:	469c      	mov	ip, r3
   18eca:	4688      	mov	r8, r1
   18ecc:	4c03      	ldr	r4, [pc, #12]	; (18edc <__aeabi_ddiv+0x664>)
   18ece:	e5a1      	b.n	18a14 <__aeabi_ddiv+0x19c>
   18ed0:	000003ff 	.word	0x000003ff
   18ed4:	feffffff 	.word	0xfeffffff
   18ed8:	000007fe 	.word	0x000007fe
   18edc:	000007ff 	.word	0x000007ff

00018ee0 <__eqdf2>:
   18ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ee2:	464f      	mov	r7, r9
   18ee4:	4646      	mov	r6, r8
   18ee6:	46d6      	mov	lr, sl
   18ee8:	005c      	lsls	r4, r3, #1
   18eea:	b5c0      	push	{r6, r7, lr}
   18eec:	031f      	lsls	r7, r3, #12
   18eee:	0fdb      	lsrs	r3, r3, #31
   18ef0:	469a      	mov	sl, r3
   18ef2:	4b17      	ldr	r3, [pc, #92]	; (18f50 <__eqdf2+0x70>)
   18ef4:	030e      	lsls	r6, r1, #12
   18ef6:	004d      	lsls	r5, r1, #1
   18ef8:	4684      	mov	ip, r0
   18efa:	4680      	mov	r8, r0
   18efc:	0b36      	lsrs	r6, r6, #12
   18efe:	0d6d      	lsrs	r5, r5, #21
   18f00:	0fc9      	lsrs	r1, r1, #31
   18f02:	4691      	mov	r9, r2
   18f04:	0b3f      	lsrs	r7, r7, #12
   18f06:	0d64      	lsrs	r4, r4, #21
   18f08:	2001      	movs	r0, #1
   18f0a:	429d      	cmp	r5, r3
   18f0c:	d008      	beq.n	18f20 <__eqdf2+0x40>
   18f0e:	429c      	cmp	r4, r3
   18f10:	d001      	beq.n	18f16 <__eqdf2+0x36>
   18f12:	42a5      	cmp	r5, r4
   18f14:	d00b      	beq.n	18f2e <__eqdf2+0x4e>
   18f16:	bc1c      	pop	{r2, r3, r4}
   18f18:	4690      	mov	r8, r2
   18f1a:	4699      	mov	r9, r3
   18f1c:	46a2      	mov	sl, r4
   18f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f20:	4663      	mov	r3, ip
   18f22:	4333      	orrs	r3, r6
   18f24:	d1f7      	bne.n	18f16 <__eqdf2+0x36>
   18f26:	42ac      	cmp	r4, r5
   18f28:	d1f5      	bne.n	18f16 <__eqdf2+0x36>
   18f2a:	433a      	orrs	r2, r7
   18f2c:	d1f3      	bne.n	18f16 <__eqdf2+0x36>
   18f2e:	2001      	movs	r0, #1
   18f30:	42be      	cmp	r6, r7
   18f32:	d1f0      	bne.n	18f16 <__eqdf2+0x36>
   18f34:	45c8      	cmp	r8, r9
   18f36:	d1ee      	bne.n	18f16 <__eqdf2+0x36>
   18f38:	4551      	cmp	r1, sl
   18f3a:	d007      	beq.n	18f4c <__eqdf2+0x6c>
   18f3c:	2d00      	cmp	r5, #0
   18f3e:	d1ea      	bne.n	18f16 <__eqdf2+0x36>
   18f40:	4663      	mov	r3, ip
   18f42:	431e      	orrs	r6, r3
   18f44:	0030      	movs	r0, r6
   18f46:	1e46      	subs	r6, r0, #1
   18f48:	41b0      	sbcs	r0, r6
   18f4a:	e7e4      	b.n	18f16 <__eqdf2+0x36>
   18f4c:	2000      	movs	r0, #0
   18f4e:	e7e2      	b.n	18f16 <__eqdf2+0x36>
   18f50:	000007ff 	.word	0x000007ff

00018f54 <__gedf2>:
   18f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f56:	4645      	mov	r5, r8
   18f58:	46de      	mov	lr, fp
   18f5a:	4657      	mov	r7, sl
   18f5c:	464e      	mov	r6, r9
   18f5e:	b5e0      	push	{r5, r6, r7, lr}
   18f60:	031f      	lsls	r7, r3, #12
   18f62:	0b3d      	lsrs	r5, r7, #12
   18f64:	4f2c      	ldr	r7, [pc, #176]	; (19018 <__gedf2+0xc4>)
   18f66:	030e      	lsls	r6, r1, #12
   18f68:	004c      	lsls	r4, r1, #1
   18f6a:	46ab      	mov	fp, r5
   18f6c:	005d      	lsls	r5, r3, #1
   18f6e:	4684      	mov	ip, r0
   18f70:	0b36      	lsrs	r6, r6, #12
   18f72:	0d64      	lsrs	r4, r4, #21
   18f74:	0fc9      	lsrs	r1, r1, #31
   18f76:	4690      	mov	r8, r2
   18f78:	0d6d      	lsrs	r5, r5, #21
   18f7a:	0fdb      	lsrs	r3, r3, #31
   18f7c:	42bc      	cmp	r4, r7
   18f7e:	d02a      	beq.n	18fd6 <__gedf2+0x82>
   18f80:	4f25      	ldr	r7, [pc, #148]	; (19018 <__gedf2+0xc4>)
   18f82:	42bd      	cmp	r5, r7
   18f84:	d02d      	beq.n	18fe2 <__gedf2+0x8e>
   18f86:	2c00      	cmp	r4, #0
   18f88:	d10f      	bne.n	18faa <__gedf2+0x56>
   18f8a:	4330      	orrs	r0, r6
   18f8c:	0007      	movs	r7, r0
   18f8e:	4681      	mov	r9, r0
   18f90:	4278      	negs	r0, r7
   18f92:	4178      	adcs	r0, r7
   18f94:	b2c0      	uxtb	r0, r0
   18f96:	2d00      	cmp	r5, #0
   18f98:	d117      	bne.n	18fca <__gedf2+0x76>
   18f9a:	465f      	mov	r7, fp
   18f9c:	433a      	orrs	r2, r7
   18f9e:	d114      	bne.n	18fca <__gedf2+0x76>
   18fa0:	464b      	mov	r3, r9
   18fa2:	2000      	movs	r0, #0
   18fa4:	2b00      	cmp	r3, #0
   18fa6:	d00a      	beq.n	18fbe <__gedf2+0x6a>
   18fa8:	e006      	b.n	18fb8 <__gedf2+0x64>
   18faa:	2d00      	cmp	r5, #0
   18fac:	d102      	bne.n	18fb4 <__gedf2+0x60>
   18fae:	4658      	mov	r0, fp
   18fb0:	4302      	orrs	r2, r0
   18fb2:	d001      	beq.n	18fb8 <__gedf2+0x64>
   18fb4:	4299      	cmp	r1, r3
   18fb6:	d018      	beq.n	18fea <__gedf2+0x96>
   18fb8:	4248      	negs	r0, r1
   18fba:	2101      	movs	r1, #1
   18fbc:	4308      	orrs	r0, r1
   18fbe:	bc3c      	pop	{r2, r3, r4, r5}
   18fc0:	4690      	mov	r8, r2
   18fc2:	4699      	mov	r9, r3
   18fc4:	46a2      	mov	sl, r4
   18fc6:	46ab      	mov	fp, r5
   18fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18fca:	2800      	cmp	r0, #0
   18fcc:	d0f2      	beq.n	18fb4 <__gedf2+0x60>
   18fce:	2001      	movs	r0, #1
   18fd0:	3b01      	subs	r3, #1
   18fd2:	4318      	orrs	r0, r3
   18fd4:	e7f3      	b.n	18fbe <__gedf2+0x6a>
   18fd6:	0037      	movs	r7, r6
   18fd8:	4307      	orrs	r7, r0
   18fda:	d0d1      	beq.n	18f80 <__gedf2+0x2c>
   18fdc:	2002      	movs	r0, #2
   18fde:	4240      	negs	r0, r0
   18fe0:	e7ed      	b.n	18fbe <__gedf2+0x6a>
   18fe2:	465f      	mov	r7, fp
   18fe4:	4317      	orrs	r7, r2
   18fe6:	d0ce      	beq.n	18f86 <__gedf2+0x32>
   18fe8:	e7f8      	b.n	18fdc <__gedf2+0x88>
   18fea:	42ac      	cmp	r4, r5
   18fec:	dce4      	bgt.n	18fb8 <__gedf2+0x64>
   18fee:	da03      	bge.n	18ff8 <__gedf2+0xa4>
   18ff0:	1e48      	subs	r0, r1, #1
   18ff2:	2101      	movs	r1, #1
   18ff4:	4308      	orrs	r0, r1
   18ff6:	e7e2      	b.n	18fbe <__gedf2+0x6a>
   18ff8:	455e      	cmp	r6, fp
   18ffa:	d8dd      	bhi.n	18fb8 <__gedf2+0x64>
   18ffc:	d006      	beq.n	1900c <__gedf2+0xb8>
   18ffe:	2000      	movs	r0, #0
   19000:	455e      	cmp	r6, fp
   19002:	d2dc      	bcs.n	18fbe <__gedf2+0x6a>
   19004:	2301      	movs	r3, #1
   19006:	1e48      	subs	r0, r1, #1
   19008:	4318      	orrs	r0, r3
   1900a:	e7d8      	b.n	18fbe <__gedf2+0x6a>
   1900c:	45c4      	cmp	ip, r8
   1900e:	d8d3      	bhi.n	18fb8 <__gedf2+0x64>
   19010:	2000      	movs	r0, #0
   19012:	45c4      	cmp	ip, r8
   19014:	d3f6      	bcc.n	19004 <__gedf2+0xb0>
   19016:	e7d2      	b.n	18fbe <__gedf2+0x6a>
   19018:	000007ff 	.word	0x000007ff

0001901c <__ledf2>:
   1901c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1901e:	464e      	mov	r6, r9
   19020:	4645      	mov	r5, r8
   19022:	46de      	mov	lr, fp
   19024:	4657      	mov	r7, sl
   19026:	005c      	lsls	r4, r3, #1
   19028:	b5e0      	push	{r5, r6, r7, lr}
   1902a:	031f      	lsls	r7, r3, #12
   1902c:	0fdb      	lsrs	r3, r3, #31
   1902e:	4699      	mov	r9, r3
   19030:	4b2a      	ldr	r3, [pc, #168]	; (190dc <__ledf2+0xc0>)
   19032:	030e      	lsls	r6, r1, #12
   19034:	004d      	lsls	r5, r1, #1
   19036:	0fc9      	lsrs	r1, r1, #31
   19038:	4684      	mov	ip, r0
   1903a:	0b36      	lsrs	r6, r6, #12
   1903c:	0d6d      	lsrs	r5, r5, #21
   1903e:	468b      	mov	fp, r1
   19040:	4690      	mov	r8, r2
   19042:	0b3f      	lsrs	r7, r7, #12
   19044:	0d64      	lsrs	r4, r4, #21
   19046:	429d      	cmp	r5, r3
   19048:	d020      	beq.n	1908c <__ledf2+0x70>
   1904a:	4b24      	ldr	r3, [pc, #144]	; (190dc <__ledf2+0xc0>)
   1904c:	429c      	cmp	r4, r3
   1904e:	d022      	beq.n	19096 <__ledf2+0x7a>
   19050:	2d00      	cmp	r5, #0
   19052:	d112      	bne.n	1907a <__ledf2+0x5e>
   19054:	4330      	orrs	r0, r6
   19056:	4243      	negs	r3, r0
   19058:	4143      	adcs	r3, r0
   1905a:	b2db      	uxtb	r3, r3
   1905c:	2c00      	cmp	r4, #0
   1905e:	d01f      	beq.n	190a0 <__ledf2+0x84>
   19060:	2b00      	cmp	r3, #0
   19062:	d00c      	beq.n	1907e <__ledf2+0x62>
   19064:	464b      	mov	r3, r9
   19066:	2001      	movs	r0, #1
   19068:	3b01      	subs	r3, #1
   1906a:	4303      	orrs	r3, r0
   1906c:	0018      	movs	r0, r3
   1906e:	bc3c      	pop	{r2, r3, r4, r5}
   19070:	4690      	mov	r8, r2
   19072:	4699      	mov	r9, r3
   19074:	46a2      	mov	sl, r4
   19076:	46ab      	mov	fp, r5
   19078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1907a:	2c00      	cmp	r4, #0
   1907c:	d016      	beq.n	190ac <__ledf2+0x90>
   1907e:	45cb      	cmp	fp, r9
   19080:	d017      	beq.n	190b2 <__ledf2+0x96>
   19082:	465b      	mov	r3, fp
   19084:	4259      	negs	r1, r3
   19086:	2301      	movs	r3, #1
   19088:	430b      	orrs	r3, r1
   1908a:	e7ef      	b.n	1906c <__ledf2+0x50>
   1908c:	0031      	movs	r1, r6
   1908e:	2302      	movs	r3, #2
   19090:	4301      	orrs	r1, r0
   19092:	d1eb      	bne.n	1906c <__ledf2+0x50>
   19094:	e7d9      	b.n	1904a <__ledf2+0x2e>
   19096:	0039      	movs	r1, r7
   19098:	2302      	movs	r3, #2
   1909a:	4311      	orrs	r1, r2
   1909c:	d1e6      	bne.n	1906c <__ledf2+0x50>
   1909e:	e7d7      	b.n	19050 <__ledf2+0x34>
   190a0:	433a      	orrs	r2, r7
   190a2:	d1dd      	bne.n	19060 <__ledf2+0x44>
   190a4:	2300      	movs	r3, #0
   190a6:	2800      	cmp	r0, #0
   190a8:	d0e0      	beq.n	1906c <__ledf2+0x50>
   190aa:	e7ea      	b.n	19082 <__ledf2+0x66>
   190ac:	433a      	orrs	r2, r7
   190ae:	d1e6      	bne.n	1907e <__ledf2+0x62>
   190b0:	e7e7      	b.n	19082 <__ledf2+0x66>
   190b2:	42a5      	cmp	r5, r4
   190b4:	dce5      	bgt.n	19082 <__ledf2+0x66>
   190b6:	db05      	blt.n	190c4 <__ledf2+0xa8>
   190b8:	42be      	cmp	r6, r7
   190ba:	d8e2      	bhi.n	19082 <__ledf2+0x66>
   190bc:	d007      	beq.n	190ce <__ledf2+0xb2>
   190be:	2300      	movs	r3, #0
   190c0:	42be      	cmp	r6, r7
   190c2:	d2d3      	bcs.n	1906c <__ledf2+0x50>
   190c4:	4659      	mov	r1, fp
   190c6:	2301      	movs	r3, #1
   190c8:	3901      	subs	r1, #1
   190ca:	430b      	orrs	r3, r1
   190cc:	e7ce      	b.n	1906c <__ledf2+0x50>
   190ce:	45c4      	cmp	ip, r8
   190d0:	d8d7      	bhi.n	19082 <__ledf2+0x66>
   190d2:	2300      	movs	r3, #0
   190d4:	45c4      	cmp	ip, r8
   190d6:	d3f5      	bcc.n	190c4 <__ledf2+0xa8>
   190d8:	e7c8      	b.n	1906c <__ledf2+0x50>
   190da:	46c0      	nop			; (mov r8, r8)
   190dc:	000007ff 	.word	0x000007ff

000190e0 <__aeabi_dmul>:
   190e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   190e2:	4657      	mov	r7, sl
   190e4:	4645      	mov	r5, r8
   190e6:	46de      	mov	lr, fp
   190e8:	464e      	mov	r6, r9
   190ea:	b5e0      	push	{r5, r6, r7, lr}
   190ec:	030c      	lsls	r4, r1, #12
   190ee:	4698      	mov	r8, r3
   190f0:	004e      	lsls	r6, r1, #1
   190f2:	0b23      	lsrs	r3, r4, #12
   190f4:	b087      	sub	sp, #28
   190f6:	0007      	movs	r7, r0
   190f8:	4692      	mov	sl, r2
   190fa:	469b      	mov	fp, r3
   190fc:	0d76      	lsrs	r6, r6, #21
   190fe:	0fcd      	lsrs	r5, r1, #31
   19100:	2e00      	cmp	r6, #0
   19102:	d06b      	beq.n	191dc <__aeabi_dmul+0xfc>
   19104:	4b6d      	ldr	r3, [pc, #436]	; (192bc <__aeabi_dmul+0x1dc>)
   19106:	429e      	cmp	r6, r3
   19108:	d035      	beq.n	19176 <__aeabi_dmul+0x96>
   1910a:	2480      	movs	r4, #128	; 0x80
   1910c:	465b      	mov	r3, fp
   1910e:	0f42      	lsrs	r2, r0, #29
   19110:	0424      	lsls	r4, r4, #16
   19112:	00db      	lsls	r3, r3, #3
   19114:	4314      	orrs	r4, r2
   19116:	431c      	orrs	r4, r3
   19118:	00c3      	lsls	r3, r0, #3
   1911a:	4699      	mov	r9, r3
   1911c:	4b68      	ldr	r3, [pc, #416]	; (192c0 <__aeabi_dmul+0x1e0>)
   1911e:	46a3      	mov	fp, r4
   19120:	469c      	mov	ip, r3
   19122:	2300      	movs	r3, #0
   19124:	2700      	movs	r7, #0
   19126:	4466      	add	r6, ip
   19128:	9302      	str	r3, [sp, #8]
   1912a:	4643      	mov	r3, r8
   1912c:	031c      	lsls	r4, r3, #12
   1912e:	005a      	lsls	r2, r3, #1
   19130:	0fdb      	lsrs	r3, r3, #31
   19132:	4650      	mov	r0, sl
   19134:	0b24      	lsrs	r4, r4, #12
   19136:	0d52      	lsrs	r2, r2, #21
   19138:	4698      	mov	r8, r3
   1913a:	d100      	bne.n	1913e <__aeabi_dmul+0x5e>
   1913c:	e076      	b.n	1922c <__aeabi_dmul+0x14c>
   1913e:	4b5f      	ldr	r3, [pc, #380]	; (192bc <__aeabi_dmul+0x1dc>)
   19140:	429a      	cmp	r2, r3
   19142:	d06d      	beq.n	19220 <__aeabi_dmul+0x140>
   19144:	2380      	movs	r3, #128	; 0x80
   19146:	0f41      	lsrs	r1, r0, #29
   19148:	041b      	lsls	r3, r3, #16
   1914a:	430b      	orrs	r3, r1
   1914c:	495c      	ldr	r1, [pc, #368]	; (192c0 <__aeabi_dmul+0x1e0>)
   1914e:	00e4      	lsls	r4, r4, #3
   19150:	468c      	mov	ip, r1
   19152:	431c      	orrs	r4, r3
   19154:	00c3      	lsls	r3, r0, #3
   19156:	2000      	movs	r0, #0
   19158:	4462      	add	r2, ip
   1915a:	4641      	mov	r1, r8
   1915c:	18b6      	adds	r6, r6, r2
   1915e:	4069      	eors	r1, r5
   19160:	1c72      	adds	r2, r6, #1
   19162:	9101      	str	r1, [sp, #4]
   19164:	4694      	mov	ip, r2
   19166:	4307      	orrs	r7, r0
   19168:	2f0f      	cmp	r7, #15
   1916a:	d900      	bls.n	1916e <__aeabi_dmul+0x8e>
   1916c:	e0b0      	b.n	192d0 <__aeabi_dmul+0x1f0>
   1916e:	4a55      	ldr	r2, [pc, #340]	; (192c4 <__aeabi_dmul+0x1e4>)
   19170:	00bf      	lsls	r7, r7, #2
   19172:	59d2      	ldr	r2, [r2, r7]
   19174:	4697      	mov	pc, r2
   19176:	465b      	mov	r3, fp
   19178:	4303      	orrs	r3, r0
   1917a:	4699      	mov	r9, r3
   1917c:	d000      	beq.n	19180 <__aeabi_dmul+0xa0>
   1917e:	e087      	b.n	19290 <__aeabi_dmul+0x1b0>
   19180:	2300      	movs	r3, #0
   19182:	469b      	mov	fp, r3
   19184:	3302      	adds	r3, #2
   19186:	2708      	movs	r7, #8
   19188:	9302      	str	r3, [sp, #8]
   1918a:	e7ce      	b.n	1912a <__aeabi_dmul+0x4a>
   1918c:	4642      	mov	r2, r8
   1918e:	9201      	str	r2, [sp, #4]
   19190:	2802      	cmp	r0, #2
   19192:	d067      	beq.n	19264 <__aeabi_dmul+0x184>
   19194:	2803      	cmp	r0, #3
   19196:	d100      	bne.n	1919a <__aeabi_dmul+0xba>
   19198:	e20e      	b.n	195b8 <__aeabi_dmul+0x4d8>
   1919a:	2801      	cmp	r0, #1
   1919c:	d000      	beq.n	191a0 <__aeabi_dmul+0xc0>
   1919e:	e162      	b.n	19466 <__aeabi_dmul+0x386>
   191a0:	2300      	movs	r3, #0
   191a2:	2400      	movs	r4, #0
   191a4:	2200      	movs	r2, #0
   191a6:	4699      	mov	r9, r3
   191a8:	9901      	ldr	r1, [sp, #4]
   191aa:	4001      	ands	r1, r0
   191ac:	b2cd      	uxtb	r5, r1
   191ae:	2100      	movs	r1, #0
   191b0:	0312      	lsls	r2, r2, #12
   191b2:	0d0b      	lsrs	r3, r1, #20
   191b4:	0b12      	lsrs	r2, r2, #12
   191b6:	051b      	lsls	r3, r3, #20
   191b8:	4313      	orrs	r3, r2
   191ba:	4a43      	ldr	r2, [pc, #268]	; (192c8 <__aeabi_dmul+0x1e8>)
   191bc:	0524      	lsls	r4, r4, #20
   191be:	4013      	ands	r3, r2
   191c0:	431c      	orrs	r4, r3
   191c2:	0064      	lsls	r4, r4, #1
   191c4:	07ed      	lsls	r5, r5, #31
   191c6:	0864      	lsrs	r4, r4, #1
   191c8:	432c      	orrs	r4, r5
   191ca:	4648      	mov	r0, r9
   191cc:	0021      	movs	r1, r4
   191ce:	b007      	add	sp, #28
   191d0:	bc3c      	pop	{r2, r3, r4, r5}
   191d2:	4690      	mov	r8, r2
   191d4:	4699      	mov	r9, r3
   191d6:	46a2      	mov	sl, r4
   191d8:	46ab      	mov	fp, r5
   191da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191dc:	4303      	orrs	r3, r0
   191de:	4699      	mov	r9, r3
   191e0:	d04f      	beq.n	19282 <__aeabi_dmul+0x1a2>
   191e2:	465b      	mov	r3, fp
   191e4:	2b00      	cmp	r3, #0
   191e6:	d100      	bne.n	191ea <__aeabi_dmul+0x10a>
   191e8:	e189      	b.n	194fe <__aeabi_dmul+0x41e>
   191ea:	4658      	mov	r0, fp
   191ec:	f000 fdbc 	bl	19d68 <__clzsi2>
   191f0:	0003      	movs	r3, r0
   191f2:	3b0b      	subs	r3, #11
   191f4:	2b1c      	cmp	r3, #28
   191f6:	dd00      	ble.n	191fa <__aeabi_dmul+0x11a>
   191f8:	e17a      	b.n	194f0 <__aeabi_dmul+0x410>
   191fa:	221d      	movs	r2, #29
   191fc:	1ad3      	subs	r3, r2, r3
   191fe:	003a      	movs	r2, r7
   19200:	0001      	movs	r1, r0
   19202:	465c      	mov	r4, fp
   19204:	40da      	lsrs	r2, r3
   19206:	3908      	subs	r1, #8
   19208:	408c      	lsls	r4, r1
   1920a:	0013      	movs	r3, r2
   1920c:	408f      	lsls	r7, r1
   1920e:	4323      	orrs	r3, r4
   19210:	469b      	mov	fp, r3
   19212:	46b9      	mov	r9, r7
   19214:	2300      	movs	r3, #0
   19216:	4e2d      	ldr	r6, [pc, #180]	; (192cc <__aeabi_dmul+0x1ec>)
   19218:	2700      	movs	r7, #0
   1921a:	1a36      	subs	r6, r6, r0
   1921c:	9302      	str	r3, [sp, #8]
   1921e:	e784      	b.n	1912a <__aeabi_dmul+0x4a>
   19220:	4653      	mov	r3, sl
   19222:	4323      	orrs	r3, r4
   19224:	d12a      	bne.n	1927c <__aeabi_dmul+0x19c>
   19226:	2400      	movs	r4, #0
   19228:	2002      	movs	r0, #2
   1922a:	e796      	b.n	1915a <__aeabi_dmul+0x7a>
   1922c:	4653      	mov	r3, sl
   1922e:	4323      	orrs	r3, r4
   19230:	d020      	beq.n	19274 <__aeabi_dmul+0x194>
   19232:	2c00      	cmp	r4, #0
   19234:	d100      	bne.n	19238 <__aeabi_dmul+0x158>
   19236:	e157      	b.n	194e8 <__aeabi_dmul+0x408>
   19238:	0020      	movs	r0, r4
   1923a:	f000 fd95 	bl	19d68 <__clzsi2>
   1923e:	0003      	movs	r3, r0
   19240:	3b0b      	subs	r3, #11
   19242:	2b1c      	cmp	r3, #28
   19244:	dd00      	ble.n	19248 <__aeabi_dmul+0x168>
   19246:	e149      	b.n	194dc <__aeabi_dmul+0x3fc>
   19248:	211d      	movs	r1, #29
   1924a:	1acb      	subs	r3, r1, r3
   1924c:	4651      	mov	r1, sl
   1924e:	0002      	movs	r2, r0
   19250:	40d9      	lsrs	r1, r3
   19252:	4653      	mov	r3, sl
   19254:	3a08      	subs	r2, #8
   19256:	4094      	lsls	r4, r2
   19258:	4093      	lsls	r3, r2
   1925a:	430c      	orrs	r4, r1
   1925c:	4a1b      	ldr	r2, [pc, #108]	; (192cc <__aeabi_dmul+0x1ec>)
   1925e:	1a12      	subs	r2, r2, r0
   19260:	2000      	movs	r0, #0
   19262:	e77a      	b.n	1915a <__aeabi_dmul+0x7a>
   19264:	2501      	movs	r5, #1
   19266:	9b01      	ldr	r3, [sp, #4]
   19268:	4c14      	ldr	r4, [pc, #80]	; (192bc <__aeabi_dmul+0x1dc>)
   1926a:	401d      	ands	r5, r3
   1926c:	2300      	movs	r3, #0
   1926e:	2200      	movs	r2, #0
   19270:	4699      	mov	r9, r3
   19272:	e79c      	b.n	191ae <__aeabi_dmul+0xce>
   19274:	2400      	movs	r4, #0
   19276:	2200      	movs	r2, #0
   19278:	2001      	movs	r0, #1
   1927a:	e76e      	b.n	1915a <__aeabi_dmul+0x7a>
   1927c:	4653      	mov	r3, sl
   1927e:	2003      	movs	r0, #3
   19280:	e76b      	b.n	1915a <__aeabi_dmul+0x7a>
   19282:	2300      	movs	r3, #0
   19284:	469b      	mov	fp, r3
   19286:	3301      	adds	r3, #1
   19288:	2704      	movs	r7, #4
   1928a:	2600      	movs	r6, #0
   1928c:	9302      	str	r3, [sp, #8]
   1928e:	e74c      	b.n	1912a <__aeabi_dmul+0x4a>
   19290:	2303      	movs	r3, #3
   19292:	4681      	mov	r9, r0
   19294:	270c      	movs	r7, #12
   19296:	9302      	str	r3, [sp, #8]
   19298:	e747      	b.n	1912a <__aeabi_dmul+0x4a>
   1929a:	2280      	movs	r2, #128	; 0x80
   1929c:	2300      	movs	r3, #0
   1929e:	2500      	movs	r5, #0
   192a0:	0312      	lsls	r2, r2, #12
   192a2:	4699      	mov	r9, r3
   192a4:	4c05      	ldr	r4, [pc, #20]	; (192bc <__aeabi_dmul+0x1dc>)
   192a6:	e782      	b.n	191ae <__aeabi_dmul+0xce>
   192a8:	465c      	mov	r4, fp
   192aa:	464b      	mov	r3, r9
   192ac:	9802      	ldr	r0, [sp, #8]
   192ae:	e76f      	b.n	19190 <__aeabi_dmul+0xb0>
   192b0:	465c      	mov	r4, fp
   192b2:	464b      	mov	r3, r9
   192b4:	9501      	str	r5, [sp, #4]
   192b6:	9802      	ldr	r0, [sp, #8]
   192b8:	e76a      	b.n	19190 <__aeabi_dmul+0xb0>
   192ba:	46c0      	nop			; (mov r8, r8)
   192bc:	000007ff 	.word	0x000007ff
   192c0:	fffffc01 	.word	0xfffffc01
   192c4:	0001d510 	.word	0x0001d510
   192c8:	800fffff 	.word	0x800fffff
   192cc:	fffffc0d 	.word	0xfffffc0d
   192d0:	464a      	mov	r2, r9
   192d2:	4649      	mov	r1, r9
   192d4:	0c17      	lsrs	r7, r2, #16
   192d6:	0c1a      	lsrs	r2, r3, #16
   192d8:	041b      	lsls	r3, r3, #16
   192da:	0c1b      	lsrs	r3, r3, #16
   192dc:	0408      	lsls	r0, r1, #16
   192de:	0019      	movs	r1, r3
   192e0:	0c00      	lsrs	r0, r0, #16
   192e2:	4341      	muls	r1, r0
   192e4:	0015      	movs	r5, r2
   192e6:	4688      	mov	r8, r1
   192e8:	0019      	movs	r1, r3
   192ea:	437d      	muls	r5, r7
   192ec:	4379      	muls	r1, r7
   192ee:	9503      	str	r5, [sp, #12]
   192f0:	4689      	mov	r9, r1
   192f2:	0029      	movs	r1, r5
   192f4:	0015      	movs	r5, r2
   192f6:	4345      	muls	r5, r0
   192f8:	444d      	add	r5, r9
   192fa:	9502      	str	r5, [sp, #8]
   192fc:	4645      	mov	r5, r8
   192fe:	0c2d      	lsrs	r5, r5, #16
   19300:	46aa      	mov	sl, r5
   19302:	9d02      	ldr	r5, [sp, #8]
   19304:	4455      	add	r5, sl
   19306:	45a9      	cmp	r9, r5
   19308:	d906      	bls.n	19318 <__aeabi_dmul+0x238>
   1930a:	468a      	mov	sl, r1
   1930c:	2180      	movs	r1, #128	; 0x80
   1930e:	0249      	lsls	r1, r1, #9
   19310:	4689      	mov	r9, r1
   19312:	44ca      	add	sl, r9
   19314:	4651      	mov	r1, sl
   19316:	9103      	str	r1, [sp, #12]
   19318:	0c29      	lsrs	r1, r5, #16
   1931a:	9104      	str	r1, [sp, #16]
   1931c:	4641      	mov	r1, r8
   1931e:	0409      	lsls	r1, r1, #16
   19320:	042d      	lsls	r5, r5, #16
   19322:	0c09      	lsrs	r1, r1, #16
   19324:	4688      	mov	r8, r1
   19326:	0029      	movs	r1, r5
   19328:	0c25      	lsrs	r5, r4, #16
   1932a:	0424      	lsls	r4, r4, #16
   1932c:	4441      	add	r1, r8
   1932e:	0c24      	lsrs	r4, r4, #16
   19330:	9105      	str	r1, [sp, #20]
   19332:	0021      	movs	r1, r4
   19334:	4341      	muls	r1, r0
   19336:	4688      	mov	r8, r1
   19338:	0021      	movs	r1, r4
   1933a:	4379      	muls	r1, r7
   1933c:	468a      	mov	sl, r1
   1933e:	4368      	muls	r0, r5
   19340:	4641      	mov	r1, r8
   19342:	4450      	add	r0, sl
   19344:	4681      	mov	r9, r0
   19346:	0c08      	lsrs	r0, r1, #16
   19348:	4448      	add	r0, r9
   1934a:	436f      	muls	r7, r5
   1934c:	4582      	cmp	sl, r0
   1934e:	d903      	bls.n	19358 <__aeabi_dmul+0x278>
   19350:	2180      	movs	r1, #128	; 0x80
   19352:	0249      	lsls	r1, r1, #9
   19354:	4689      	mov	r9, r1
   19356:	444f      	add	r7, r9
   19358:	0c01      	lsrs	r1, r0, #16
   1935a:	4689      	mov	r9, r1
   1935c:	0039      	movs	r1, r7
   1935e:	4449      	add	r1, r9
   19360:	9102      	str	r1, [sp, #8]
   19362:	4641      	mov	r1, r8
   19364:	040f      	lsls	r7, r1, #16
   19366:	9904      	ldr	r1, [sp, #16]
   19368:	0c3f      	lsrs	r7, r7, #16
   1936a:	4688      	mov	r8, r1
   1936c:	0400      	lsls	r0, r0, #16
   1936e:	19c0      	adds	r0, r0, r7
   19370:	4480      	add	r8, r0
   19372:	4641      	mov	r1, r8
   19374:	9104      	str	r1, [sp, #16]
   19376:	4659      	mov	r1, fp
   19378:	0c0f      	lsrs	r7, r1, #16
   1937a:	0409      	lsls	r1, r1, #16
   1937c:	0c09      	lsrs	r1, r1, #16
   1937e:	4688      	mov	r8, r1
   19380:	4359      	muls	r1, r3
   19382:	468a      	mov	sl, r1
   19384:	0039      	movs	r1, r7
   19386:	4351      	muls	r1, r2
   19388:	4689      	mov	r9, r1
   1938a:	4641      	mov	r1, r8
   1938c:	434a      	muls	r2, r1
   1938e:	4651      	mov	r1, sl
   19390:	0c09      	lsrs	r1, r1, #16
   19392:	468b      	mov	fp, r1
   19394:	437b      	muls	r3, r7
   19396:	18d2      	adds	r2, r2, r3
   19398:	445a      	add	r2, fp
   1939a:	4293      	cmp	r3, r2
   1939c:	d903      	bls.n	193a6 <__aeabi_dmul+0x2c6>
   1939e:	2380      	movs	r3, #128	; 0x80
   193a0:	025b      	lsls	r3, r3, #9
   193a2:	469b      	mov	fp, r3
   193a4:	44d9      	add	r9, fp
   193a6:	4651      	mov	r1, sl
   193a8:	0409      	lsls	r1, r1, #16
   193aa:	0c09      	lsrs	r1, r1, #16
   193ac:	468a      	mov	sl, r1
   193ae:	4641      	mov	r1, r8
   193b0:	4361      	muls	r1, r4
   193b2:	437c      	muls	r4, r7
   193b4:	0c13      	lsrs	r3, r2, #16
   193b6:	0412      	lsls	r2, r2, #16
   193b8:	444b      	add	r3, r9
   193ba:	4452      	add	r2, sl
   193bc:	46a1      	mov	r9, r4
   193be:	468a      	mov	sl, r1
   193c0:	003c      	movs	r4, r7
   193c2:	4641      	mov	r1, r8
   193c4:	436c      	muls	r4, r5
   193c6:	434d      	muls	r5, r1
   193c8:	4651      	mov	r1, sl
   193ca:	444d      	add	r5, r9
   193cc:	0c0f      	lsrs	r7, r1, #16
   193ce:	197d      	adds	r5, r7, r5
   193d0:	45a9      	cmp	r9, r5
   193d2:	d903      	bls.n	193dc <__aeabi_dmul+0x2fc>
   193d4:	2180      	movs	r1, #128	; 0x80
   193d6:	0249      	lsls	r1, r1, #9
   193d8:	4688      	mov	r8, r1
   193da:	4444      	add	r4, r8
   193dc:	9f04      	ldr	r7, [sp, #16]
   193de:	9903      	ldr	r1, [sp, #12]
   193e0:	46b8      	mov	r8, r7
   193e2:	4441      	add	r1, r8
   193e4:	468b      	mov	fp, r1
   193e6:	4583      	cmp	fp, r0
   193e8:	4180      	sbcs	r0, r0
   193ea:	4241      	negs	r1, r0
   193ec:	4688      	mov	r8, r1
   193ee:	4651      	mov	r1, sl
   193f0:	0408      	lsls	r0, r1, #16
   193f2:	042f      	lsls	r7, r5, #16
   193f4:	0c00      	lsrs	r0, r0, #16
   193f6:	183f      	adds	r7, r7, r0
   193f8:	4658      	mov	r0, fp
   193fa:	9902      	ldr	r1, [sp, #8]
   193fc:	1810      	adds	r0, r2, r0
   193fe:	4689      	mov	r9, r1
   19400:	4290      	cmp	r0, r2
   19402:	4192      	sbcs	r2, r2
   19404:	444f      	add	r7, r9
   19406:	46ba      	mov	sl, r7
   19408:	4252      	negs	r2, r2
   1940a:	4699      	mov	r9, r3
   1940c:	4693      	mov	fp, r2
   1940e:	44c2      	add	sl, r8
   19410:	44d1      	add	r9, sl
   19412:	44cb      	add	fp, r9
   19414:	428f      	cmp	r7, r1
   19416:	41bf      	sbcs	r7, r7
   19418:	45c2      	cmp	sl, r8
   1941a:	4189      	sbcs	r1, r1
   1941c:	4599      	cmp	r9, r3
   1941e:	419b      	sbcs	r3, r3
   19420:	4593      	cmp	fp, r2
   19422:	4192      	sbcs	r2, r2
   19424:	427f      	negs	r7, r7
   19426:	4249      	negs	r1, r1
   19428:	0c2d      	lsrs	r5, r5, #16
   1942a:	4252      	negs	r2, r2
   1942c:	430f      	orrs	r7, r1
   1942e:	425b      	negs	r3, r3
   19430:	4313      	orrs	r3, r2
   19432:	197f      	adds	r7, r7, r5
   19434:	18ff      	adds	r7, r7, r3
   19436:	465b      	mov	r3, fp
   19438:	193c      	adds	r4, r7, r4
   1943a:	0ddb      	lsrs	r3, r3, #23
   1943c:	9a05      	ldr	r2, [sp, #20]
   1943e:	0264      	lsls	r4, r4, #9
   19440:	431c      	orrs	r4, r3
   19442:	0243      	lsls	r3, r0, #9
   19444:	4313      	orrs	r3, r2
   19446:	1e5d      	subs	r5, r3, #1
   19448:	41ab      	sbcs	r3, r5
   1944a:	465a      	mov	r2, fp
   1944c:	0dc0      	lsrs	r0, r0, #23
   1944e:	4303      	orrs	r3, r0
   19450:	0252      	lsls	r2, r2, #9
   19452:	4313      	orrs	r3, r2
   19454:	01e2      	lsls	r2, r4, #7
   19456:	d556      	bpl.n	19506 <__aeabi_dmul+0x426>
   19458:	2001      	movs	r0, #1
   1945a:	085a      	lsrs	r2, r3, #1
   1945c:	4003      	ands	r3, r0
   1945e:	4313      	orrs	r3, r2
   19460:	07e2      	lsls	r2, r4, #31
   19462:	4313      	orrs	r3, r2
   19464:	0864      	lsrs	r4, r4, #1
   19466:	485a      	ldr	r0, [pc, #360]	; (195d0 <__aeabi_dmul+0x4f0>)
   19468:	4460      	add	r0, ip
   1946a:	2800      	cmp	r0, #0
   1946c:	dd4d      	ble.n	1950a <__aeabi_dmul+0x42a>
   1946e:	075a      	lsls	r2, r3, #29
   19470:	d009      	beq.n	19486 <__aeabi_dmul+0x3a6>
   19472:	220f      	movs	r2, #15
   19474:	401a      	ands	r2, r3
   19476:	2a04      	cmp	r2, #4
   19478:	d005      	beq.n	19486 <__aeabi_dmul+0x3a6>
   1947a:	1d1a      	adds	r2, r3, #4
   1947c:	429a      	cmp	r2, r3
   1947e:	419b      	sbcs	r3, r3
   19480:	425b      	negs	r3, r3
   19482:	18e4      	adds	r4, r4, r3
   19484:	0013      	movs	r3, r2
   19486:	01e2      	lsls	r2, r4, #7
   19488:	d504      	bpl.n	19494 <__aeabi_dmul+0x3b4>
   1948a:	2080      	movs	r0, #128	; 0x80
   1948c:	4a51      	ldr	r2, [pc, #324]	; (195d4 <__aeabi_dmul+0x4f4>)
   1948e:	00c0      	lsls	r0, r0, #3
   19490:	4014      	ands	r4, r2
   19492:	4460      	add	r0, ip
   19494:	4a50      	ldr	r2, [pc, #320]	; (195d8 <__aeabi_dmul+0x4f8>)
   19496:	4290      	cmp	r0, r2
   19498:	dd00      	ble.n	1949c <__aeabi_dmul+0x3bc>
   1949a:	e6e3      	b.n	19264 <__aeabi_dmul+0x184>
   1949c:	2501      	movs	r5, #1
   1949e:	08db      	lsrs	r3, r3, #3
   194a0:	0762      	lsls	r2, r4, #29
   194a2:	431a      	orrs	r2, r3
   194a4:	0264      	lsls	r4, r4, #9
   194a6:	9b01      	ldr	r3, [sp, #4]
   194a8:	4691      	mov	r9, r2
   194aa:	0b22      	lsrs	r2, r4, #12
   194ac:	0544      	lsls	r4, r0, #21
   194ae:	0d64      	lsrs	r4, r4, #21
   194b0:	401d      	ands	r5, r3
   194b2:	e67c      	b.n	191ae <__aeabi_dmul+0xce>
   194b4:	2280      	movs	r2, #128	; 0x80
   194b6:	4659      	mov	r1, fp
   194b8:	0312      	lsls	r2, r2, #12
   194ba:	4211      	tst	r1, r2
   194bc:	d008      	beq.n	194d0 <__aeabi_dmul+0x3f0>
   194be:	4214      	tst	r4, r2
   194c0:	d106      	bne.n	194d0 <__aeabi_dmul+0x3f0>
   194c2:	4322      	orrs	r2, r4
   194c4:	0312      	lsls	r2, r2, #12
   194c6:	0b12      	lsrs	r2, r2, #12
   194c8:	4645      	mov	r5, r8
   194ca:	4699      	mov	r9, r3
   194cc:	4c43      	ldr	r4, [pc, #268]	; (195dc <__aeabi_dmul+0x4fc>)
   194ce:	e66e      	b.n	191ae <__aeabi_dmul+0xce>
   194d0:	465b      	mov	r3, fp
   194d2:	431a      	orrs	r2, r3
   194d4:	0312      	lsls	r2, r2, #12
   194d6:	0b12      	lsrs	r2, r2, #12
   194d8:	4c40      	ldr	r4, [pc, #256]	; (195dc <__aeabi_dmul+0x4fc>)
   194da:	e668      	b.n	191ae <__aeabi_dmul+0xce>
   194dc:	0003      	movs	r3, r0
   194de:	4654      	mov	r4, sl
   194e0:	3b28      	subs	r3, #40	; 0x28
   194e2:	409c      	lsls	r4, r3
   194e4:	2300      	movs	r3, #0
   194e6:	e6b9      	b.n	1925c <__aeabi_dmul+0x17c>
   194e8:	f000 fc3e 	bl	19d68 <__clzsi2>
   194ec:	3020      	adds	r0, #32
   194ee:	e6a6      	b.n	1923e <__aeabi_dmul+0x15e>
   194f0:	0003      	movs	r3, r0
   194f2:	3b28      	subs	r3, #40	; 0x28
   194f4:	409f      	lsls	r7, r3
   194f6:	2300      	movs	r3, #0
   194f8:	46bb      	mov	fp, r7
   194fa:	4699      	mov	r9, r3
   194fc:	e68a      	b.n	19214 <__aeabi_dmul+0x134>
   194fe:	f000 fc33 	bl	19d68 <__clzsi2>
   19502:	3020      	adds	r0, #32
   19504:	e674      	b.n	191f0 <__aeabi_dmul+0x110>
   19506:	46b4      	mov	ip, r6
   19508:	e7ad      	b.n	19466 <__aeabi_dmul+0x386>
   1950a:	2501      	movs	r5, #1
   1950c:	1a2a      	subs	r2, r5, r0
   1950e:	2a38      	cmp	r2, #56	; 0x38
   19510:	dd06      	ble.n	19520 <__aeabi_dmul+0x440>
   19512:	9b01      	ldr	r3, [sp, #4]
   19514:	2400      	movs	r4, #0
   19516:	401d      	ands	r5, r3
   19518:	2300      	movs	r3, #0
   1951a:	2200      	movs	r2, #0
   1951c:	4699      	mov	r9, r3
   1951e:	e646      	b.n	191ae <__aeabi_dmul+0xce>
   19520:	2a1f      	cmp	r2, #31
   19522:	dc21      	bgt.n	19568 <__aeabi_dmul+0x488>
   19524:	2520      	movs	r5, #32
   19526:	0020      	movs	r0, r4
   19528:	1aad      	subs	r5, r5, r2
   1952a:	001e      	movs	r6, r3
   1952c:	40ab      	lsls	r3, r5
   1952e:	40a8      	lsls	r0, r5
   19530:	40d6      	lsrs	r6, r2
   19532:	1e5d      	subs	r5, r3, #1
   19534:	41ab      	sbcs	r3, r5
   19536:	4330      	orrs	r0, r6
   19538:	4318      	orrs	r0, r3
   1953a:	40d4      	lsrs	r4, r2
   1953c:	0743      	lsls	r3, r0, #29
   1953e:	d009      	beq.n	19554 <__aeabi_dmul+0x474>
   19540:	230f      	movs	r3, #15
   19542:	4003      	ands	r3, r0
   19544:	2b04      	cmp	r3, #4
   19546:	d005      	beq.n	19554 <__aeabi_dmul+0x474>
   19548:	0003      	movs	r3, r0
   1954a:	1d18      	adds	r0, r3, #4
   1954c:	4298      	cmp	r0, r3
   1954e:	419b      	sbcs	r3, r3
   19550:	425b      	negs	r3, r3
   19552:	18e4      	adds	r4, r4, r3
   19554:	0223      	lsls	r3, r4, #8
   19556:	d521      	bpl.n	1959c <__aeabi_dmul+0x4bc>
   19558:	2501      	movs	r5, #1
   1955a:	9b01      	ldr	r3, [sp, #4]
   1955c:	2401      	movs	r4, #1
   1955e:	401d      	ands	r5, r3
   19560:	2300      	movs	r3, #0
   19562:	2200      	movs	r2, #0
   19564:	4699      	mov	r9, r3
   19566:	e622      	b.n	191ae <__aeabi_dmul+0xce>
   19568:	251f      	movs	r5, #31
   1956a:	0021      	movs	r1, r4
   1956c:	426d      	negs	r5, r5
   1956e:	1a28      	subs	r0, r5, r0
   19570:	40c1      	lsrs	r1, r0
   19572:	0008      	movs	r0, r1
   19574:	2a20      	cmp	r2, #32
   19576:	d01d      	beq.n	195b4 <__aeabi_dmul+0x4d4>
   19578:	355f      	adds	r5, #95	; 0x5f
   1957a:	1aaa      	subs	r2, r5, r2
   1957c:	4094      	lsls	r4, r2
   1957e:	4323      	orrs	r3, r4
   19580:	1e5c      	subs	r4, r3, #1
   19582:	41a3      	sbcs	r3, r4
   19584:	2507      	movs	r5, #7
   19586:	4303      	orrs	r3, r0
   19588:	401d      	ands	r5, r3
   1958a:	2200      	movs	r2, #0
   1958c:	2d00      	cmp	r5, #0
   1958e:	d009      	beq.n	195a4 <__aeabi_dmul+0x4c4>
   19590:	220f      	movs	r2, #15
   19592:	2400      	movs	r4, #0
   19594:	401a      	ands	r2, r3
   19596:	0018      	movs	r0, r3
   19598:	2a04      	cmp	r2, #4
   1959a:	d1d6      	bne.n	1954a <__aeabi_dmul+0x46a>
   1959c:	0003      	movs	r3, r0
   1959e:	0765      	lsls	r5, r4, #29
   195a0:	0264      	lsls	r4, r4, #9
   195a2:	0b22      	lsrs	r2, r4, #12
   195a4:	08db      	lsrs	r3, r3, #3
   195a6:	432b      	orrs	r3, r5
   195a8:	2501      	movs	r5, #1
   195aa:	4699      	mov	r9, r3
   195ac:	9b01      	ldr	r3, [sp, #4]
   195ae:	2400      	movs	r4, #0
   195b0:	401d      	ands	r5, r3
   195b2:	e5fc      	b.n	191ae <__aeabi_dmul+0xce>
   195b4:	2400      	movs	r4, #0
   195b6:	e7e2      	b.n	1957e <__aeabi_dmul+0x49e>
   195b8:	2280      	movs	r2, #128	; 0x80
   195ba:	2501      	movs	r5, #1
   195bc:	0312      	lsls	r2, r2, #12
   195be:	4322      	orrs	r2, r4
   195c0:	9901      	ldr	r1, [sp, #4]
   195c2:	0312      	lsls	r2, r2, #12
   195c4:	0b12      	lsrs	r2, r2, #12
   195c6:	400d      	ands	r5, r1
   195c8:	4699      	mov	r9, r3
   195ca:	4c04      	ldr	r4, [pc, #16]	; (195dc <__aeabi_dmul+0x4fc>)
   195cc:	e5ef      	b.n	191ae <__aeabi_dmul+0xce>
   195ce:	46c0      	nop			; (mov r8, r8)
   195d0:	000003ff 	.word	0x000003ff
   195d4:	feffffff 	.word	0xfeffffff
   195d8:	000007fe 	.word	0x000007fe
   195dc:	000007ff 	.word	0x000007ff

000195e0 <__aeabi_dsub>:
   195e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   195e2:	4646      	mov	r6, r8
   195e4:	46d6      	mov	lr, sl
   195e6:	464f      	mov	r7, r9
   195e8:	030c      	lsls	r4, r1, #12
   195ea:	b5c0      	push	{r6, r7, lr}
   195ec:	0fcd      	lsrs	r5, r1, #31
   195ee:	004e      	lsls	r6, r1, #1
   195f0:	0a61      	lsrs	r1, r4, #9
   195f2:	0f44      	lsrs	r4, r0, #29
   195f4:	430c      	orrs	r4, r1
   195f6:	00c1      	lsls	r1, r0, #3
   195f8:	0058      	lsls	r0, r3, #1
   195fa:	0d40      	lsrs	r0, r0, #21
   195fc:	4684      	mov	ip, r0
   195fe:	468a      	mov	sl, r1
   19600:	000f      	movs	r7, r1
   19602:	0319      	lsls	r1, r3, #12
   19604:	0f50      	lsrs	r0, r2, #29
   19606:	0a49      	lsrs	r1, r1, #9
   19608:	4301      	orrs	r1, r0
   1960a:	48c6      	ldr	r0, [pc, #792]	; (19924 <__aeabi_dsub+0x344>)
   1960c:	0d76      	lsrs	r6, r6, #21
   1960e:	46a8      	mov	r8, r5
   19610:	0fdb      	lsrs	r3, r3, #31
   19612:	00d2      	lsls	r2, r2, #3
   19614:	4584      	cmp	ip, r0
   19616:	d100      	bne.n	1961a <__aeabi_dsub+0x3a>
   19618:	e0d8      	b.n	197cc <__aeabi_dsub+0x1ec>
   1961a:	2001      	movs	r0, #1
   1961c:	4043      	eors	r3, r0
   1961e:	42ab      	cmp	r3, r5
   19620:	d100      	bne.n	19624 <__aeabi_dsub+0x44>
   19622:	e0a6      	b.n	19772 <__aeabi_dsub+0x192>
   19624:	4660      	mov	r0, ip
   19626:	1a35      	subs	r5, r6, r0
   19628:	2d00      	cmp	r5, #0
   1962a:	dc00      	bgt.n	1962e <__aeabi_dsub+0x4e>
   1962c:	e105      	b.n	1983a <__aeabi_dsub+0x25a>
   1962e:	2800      	cmp	r0, #0
   19630:	d110      	bne.n	19654 <__aeabi_dsub+0x74>
   19632:	000b      	movs	r3, r1
   19634:	4313      	orrs	r3, r2
   19636:	d100      	bne.n	1963a <__aeabi_dsub+0x5a>
   19638:	e0d7      	b.n	197ea <__aeabi_dsub+0x20a>
   1963a:	1e6b      	subs	r3, r5, #1
   1963c:	2b00      	cmp	r3, #0
   1963e:	d000      	beq.n	19642 <__aeabi_dsub+0x62>
   19640:	e14b      	b.n	198da <__aeabi_dsub+0x2fa>
   19642:	4653      	mov	r3, sl
   19644:	1a9f      	subs	r7, r3, r2
   19646:	45ba      	cmp	sl, r7
   19648:	4180      	sbcs	r0, r0
   1964a:	1a64      	subs	r4, r4, r1
   1964c:	4240      	negs	r0, r0
   1964e:	1a24      	subs	r4, r4, r0
   19650:	2601      	movs	r6, #1
   19652:	e01e      	b.n	19692 <__aeabi_dsub+0xb2>
   19654:	4bb3      	ldr	r3, [pc, #716]	; (19924 <__aeabi_dsub+0x344>)
   19656:	429e      	cmp	r6, r3
   19658:	d048      	beq.n	196ec <__aeabi_dsub+0x10c>
   1965a:	2380      	movs	r3, #128	; 0x80
   1965c:	041b      	lsls	r3, r3, #16
   1965e:	4319      	orrs	r1, r3
   19660:	2d38      	cmp	r5, #56	; 0x38
   19662:	dd00      	ble.n	19666 <__aeabi_dsub+0x86>
   19664:	e119      	b.n	1989a <__aeabi_dsub+0x2ba>
   19666:	2d1f      	cmp	r5, #31
   19668:	dd00      	ble.n	1966c <__aeabi_dsub+0x8c>
   1966a:	e14c      	b.n	19906 <__aeabi_dsub+0x326>
   1966c:	2320      	movs	r3, #32
   1966e:	000f      	movs	r7, r1
   19670:	1b5b      	subs	r3, r3, r5
   19672:	0010      	movs	r0, r2
   19674:	409a      	lsls	r2, r3
   19676:	409f      	lsls	r7, r3
   19678:	40e8      	lsrs	r0, r5
   1967a:	1e53      	subs	r3, r2, #1
   1967c:	419a      	sbcs	r2, r3
   1967e:	40e9      	lsrs	r1, r5
   19680:	4307      	orrs	r7, r0
   19682:	4317      	orrs	r7, r2
   19684:	4653      	mov	r3, sl
   19686:	1bdf      	subs	r7, r3, r7
   19688:	1a61      	subs	r1, r4, r1
   1968a:	45ba      	cmp	sl, r7
   1968c:	41a4      	sbcs	r4, r4
   1968e:	4264      	negs	r4, r4
   19690:	1b0c      	subs	r4, r1, r4
   19692:	0223      	lsls	r3, r4, #8
   19694:	d400      	bmi.n	19698 <__aeabi_dsub+0xb8>
   19696:	e0c5      	b.n	19824 <__aeabi_dsub+0x244>
   19698:	0264      	lsls	r4, r4, #9
   1969a:	0a65      	lsrs	r5, r4, #9
   1969c:	2d00      	cmp	r5, #0
   1969e:	d100      	bne.n	196a2 <__aeabi_dsub+0xc2>
   196a0:	e0f6      	b.n	19890 <__aeabi_dsub+0x2b0>
   196a2:	0028      	movs	r0, r5
   196a4:	f000 fb60 	bl	19d68 <__clzsi2>
   196a8:	0003      	movs	r3, r0
   196aa:	3b08      	subs	r3, #8
   196ac:	2b1f      	cmp	r3, #31
   196ae:	dd00      	ble.n	196b2 <__aeabi_dsub+0xd2>
   196b0:	e0e9      	b.n	19886 <__aeabi_dsub+0x2a6>
   196b2:	2220      	movs	r2, #32
   196b4:	003c      	movs	r4, r7
   196b6:	1ad2      	subs	r2, r2, r3
   196b8:	409d      	lsls	r5, r3
   196ba:	40d4      	lsrs	r4, r2
   196bc:	409f      	lsls	r7, r3
   196be:	4325      	orrs	r5, r4
   196c0:	429e      	cmp	r6, r3
   196c2:	dd00      	ble.n	196c6 <__aeabi_dsub+0xe6>
   196c4:	e0db      	b.n	1987e <__aeabi_dsub+0x29e>
   196c6:	1b9e      	subs	r6, r3, r6
   196c8:	1c73      	adds	r3, r6, #1
   196ca:	2b1f      	cmp	r3, #31
   196cc:	dd00      	ble.n	196d0 <__aeabi_dsub+0xf0>
   196ce:	e10a      	b.n	198e6 <__aeabi_dsub+0x306>
   196d0:	2220      	movs	r2, #32
   196d2:	0038      	movs	r0, r7
   196d4:	1ad2      	subs	r2, r2, r3
   196d6:	0029      	movs	r1, r5
   196d8:	4097      	lsls	r7, r2
   196da:	002c      	movs	r4, r5
   196dc:	4091      	lsls	r1, r2
   196de:	40d8      	lsrs	r0, r3
   196e0:	1e7a      	subs	r2, r7, #1
   196e2:	4197      	sbcs	r7, r2
   196e4:	40dc      	lsrs	r4, r3
   196e6:	2600      	movs	r6, #0
   196e8:	4301      	orrs	r1, r0
   196ea:	430f      	orrs	r7, r1
   196ec:	077b      	lsls	r3, r7, #29
   196ee:	d009      	beq.n	19704 <__aeabi_dsub+0x124>
   196f0:	230f      	movs	r3, #15
   196f2:	403b      	ands	r3, r7
   196f4:	2b04      	cmp	r3, #4
   196f6:	d005      	beq.n	19704 <__aeabi_dsub+0x124>
   196f8:	1d3b      	adds	r3, r7, #4
   196fa:	42bb      	cmp	r3, r7
   196fc:	41bf      	sbcs	r7, r7
   196fe:	427f      	negs	r7, r7
   19700:	19e4      	adds	r4, r4, r7
   19702:	001f      	movs	r7, r3
   19704:	0223      	lsls	r3, r4, #8
   19706:	d525      	bpl.n	19754 <__aeabi_dsub+0x174>
   19708:	4b86      	ldr	r3, [pc, #536]	; (19924 <__aeabi_dsub+0x344>)
   1970a:	3601      	adds	r6, #1
   1970c:	429e      	cmp	r6, r3
   1970e:	d100      	bne.n	19712 <__aeabi_dsub+0x132>
   19710:	e0af      	b.n	19872 <__aeabi_dsub+0x292>
   19712:	4b85      	ldr	r3, [pc, #532]	; (19928 <__aeabi_dsub+0x348>)
   19714:	2501      	movs	r5, #1
   19716:	401c      	ands	r4, r3
   19718:	4643      	mov	r3, r8
   1971a:	0762      	lsls	r2, r4, #29
   1971c:	08ff      	lsrs	r7, r7, #3
   1971e:	0264      	lsls	r4, r4, #9
   19720:	0576      	lsls	r6, r6, #21
   19722:	4317      	orrs	r7, r2
   19724:	0b24      	lsrs	r4, r4, #12
   19726:	0d76      	lsrs	r6, r6, #21
   19728:	401d      	ands	r5, r3
   1972a:	2100      	movs	r1, #0
   1972c:	0324      	lsls	r4, r4, #12
   1972e:	0b23      	lsrs	r3, r4, #12
   19730:	0d0c      	lsrs	r4, r1, #20
   19732:	4a7e      	ldr	r2, [pc, #504]	; (1992c <__aeabi_dsub+0x34c>)
   19734:	0524      	lsls	r4, r4, #20
   19736:	431c      	orrs	r4, r3
   19738:	4014      	ands	r4, r2
   1973a:	0533      	lsls	r3, r6, #20
   1973c:	4323      	orrs	r3, r4
   1973e:	005b      	lsls	r3, r3, #1
   19740:	07ed      	lsls	r5, r5, #31
   19742:	085b      	lsrs	r3, r3, #1
   19744:	432b      	orrs	r3, r5
   19746:	0038      	movs	r0, r7
   19748:	0019      	movs	r1, r3
   1974a:	bc1c      	pop	{r2, r3, r4}
   1974c:	4690      	mov	r8, r2
   1974e:	4699      	mov	r9, r3
   19750:	46a2      	mov	sl, r4
   19752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19754:	2501      	movs	r5, #1
   19756:	4643      	mov	r3, r8
   19758:	0762      	lsls	r2, r4, #29
   1975a:	08ff      	lsrs	r7, r7, #3
   1975c:	4317      	orrs	r7, r2
   1975e:	08e4      	lsrs	r4, r4, #3
   19760:	401d      	ands	r5, r3
   19762:	4b70      	ldr	r3, [pc, #448]	; (19924 <__aeabi_dsub+0x344>)
   19764:	429e      	cmp	r6, r3
   19766:	d036      	beq.n	197d6 <__aeabi_dsub+0x1f6>
   19768:	0324      	lsls	r4, r4, #12
   1976a:	0576      	lsls	r6, r6, #21
   1976c:	0b24      	lsrs	r4, r4, #12
   1976e:	0d76      	lsrs	r6, r6, #21
   19770:	e7db      	b.n	1972a <__aeabi_dsub+0x14a>
   19772:	4663      	mov	r3, ip
   19774:	1af3      	subs	r3, r6, r3
   19776:	2b00      	cmp	r3, #0
   19778:	dc00      	bgt.n	1977c <__aeabi_dsub+0x19c>
   1977a:	e094      	b.n	198a6 <__aeabi_dsub+0x2c6>
   1977c:	4660      	mov	r0, ip
   1977e:	2800      	cmp	r0, #0
   19780:	d035      	beq.n	197ee <__aeabi_dsub+0x20e>
   19782:	4868      	ldr	r0, [pc, #416]	; (19924 <__aeabi_dsub+0x344>)
   19784:	4286      	cmp	r6, r0
   19786:	d0b1      	beq.n	196ec <__aeabi_dsub+0x10c>
   19788:	2780      	movs	r7, #128	; 0x80
   1978a:	043f      	lsls	r7, r7, #16
   1978c:	4339      	orrs	r1, r7
   1978e:	2b38      	cmp	r3, #56	; 0x38
   19790:	dc00      	bgt.n	19794 <__aeabi_dsub+0x1b4>
   19792:	e0fd      	b.n	19990 <__aeabi_dsub+0x3b0>
   19794:	430a      	orrs	r2, r1
   19796:	0017      	movs	r7, r2
   19798:	2100      	movs	r1, #0
   1979a:	1e7a      	subs	r2, r7, #1
   1979c:	4197      	sbcs	r7, r2
   1979e:	4457      	add	r7, sl
   197a0:	4557      	cmp	r7, sl
   197a2:	4180      	sbcs	r0, r0
   197a4:	1909      	adds	r1, r1, r4
   197a6:	4244      	negs	r4, r0
   197a8:	190c      	adds	r4, r1, r4
   197aa:	0223      	lsls	r3, r4, #8
   197ac:	d53a      	bpl.n	19824 <__aeabi_dsub+0x244>
   197ae:	4b5d      	ldr	r3, [pc, #372]	; (19924 <__aeabi_dsub+0x344>)
   197b0:	3601      	adds	r6, #1
   197b2:	429e      	cmp	r6, r3
   197b4:	d100      	bne.n	197b8 <__aeabi_dsub+0x1d8>
   197b6:	e14b      	b.n	19a50 <__aeabi_dsub+0x470>
   197b8:	2201      	movs	r2, #1
   197ba:	4b5b      	ldr	r3, [pc, #364]	; (19928 <__aeabi_dsub+0x348>)
   197bc:	401c      	ands	r4, r3
   197be:	087b      	lsrs	r3, r7, #1
   197c0:	4017      	ands	r7, r2
   197c2:	431f      	orrs	r7, r3
   197c4:	07e2      	lsls	r2, r4, #31
   197c6:	4317      	orrs	r7, r2
   197c8:	0864      	lsrs	r4, r4, #1
   197ca:	e78f      	b.n	196ec <__aeabi_dsub+0x10c>
   197cc:	0008      	movs	r0, r1
   197ce:	4310      	orrs	r0, r2
   197d0:	d000      	beq.n	197d4 <__aeabi_dsub+0x1f4>
   197d2:	e724      	b.n	1961e <__aeabi_dsub+0x3e>
   197d4:	e721      	b.n	1961a <__aeabi_dsub+0x3a>
   197d6:	0023      	movs	r3, r4
   197d8:	433b      	orrs	r3, r7
   197da:	d100      	bne.n	197de <__aeabi_dsub+0x1fe>
   197dc:	e1b9      	b.n	19b52 <__aeabi_dsub+0x572>
   197de:	2280      	movs	r2, #128	; 0x80
   197e0:	0312      	lsls	r2, r2, #12
   197e2:	4314      	orrs	r4, r2
   197e4:	0324      	lsls	r4, r4, #12
   197e6:	0b24      	lsrs	r4, r4, #12
   197e8:	e79f      	b.n	1972a <__aeabi_dsub+0x14a>
   197ea:	002e      	movs	r6, r5
   197ec:	e77e      	b.n	196ec <__aeabi_dsub+0x10c>
   197ee:	0008      	movs	r0, r1
   197f0:	4310      	orrs	r0, r2
   197f2:	d100      	bne.n	197f6 <__aeabi_dsub+0x216>
   197f4:	e0ca      	b.n	1998c <__aeabi_dsub+0x3ac>
   197f6:	1e58      	subs	r0, r3, #1
   197f8:	4684      	mov	ip, r0
   197fa:	2800      	cmp	r0, #0
   197fc:	d000      	beq.n	19800 <__aeabi_dsub+0x220>
   197fe:	e0e7      	b.n	199d0 <__aeabi_dsub+0x3f0>
   19800:	4452      	add	r2, sl
   19802:	4552      	cmp	r2, sl
   19804:	4180      	sbcs	r0, r0
   19806:	1864      	adds	r4, r4, r1
   19808:	4240      	negs	r0, r0
   1980a:	1824      	adds	r4, r4, r0
   1980c:	0017      	movs	r7, r2
   1980e:	2601      	movs	r6, #1
   19810:	0223      	lsls	r3, r4, #8
   19812:	d507      	bpl.n	19824 <__aeabi_dsub+0x244>
   19814:	2602      	movs	r6, #2
   19816:	e7cf      	b.n	197b8 <__aeabi_dsub+0x1d8>
   19818:	4664      	mov	r4, ip
   1981a:	432c      	orrs	r4, r5
   1981c:	d100      	bne.n	19820 <__aeabi_dsub+0x240>
   1981e:	e1b3      	b.n	19b88 <__aeabi_dsub+0x5a8>
   19820:	002c      	movs	r4, r5
   19822:	4667      	mov	r7, ip
   19824:	077b      	lsls	r3, r7, #29
   19826:	d000      	beq.n	1982a <__aeabi_dsub+0x24a>
   19828:	e762      	b.n	196f0 <__aeabi_dsub+0x110>
   1982a:	0763      	lsls	r3, r4, #29
   1982c:	08ff      	lsrs	r7, r7, #3
   1982e:	431f      	orrs	r7, r3
   19830:	2501      	movs	r5, #1
   19832:	4643      	mov	r3, r8
   19834:	08e4      	lsrs	r4, r4, #3
   19836:	401d      	ands	r5, r3
   19838:	e793      	b.n	19762 <__aeabi_dsub+0x182>
   1983a:	2d00      	cmp	r5, #0
   1983c:	d178      	bne.n	19930 <__aeabi_dsub+0x350>
   1983e:	1c75      	adds	r5, r6, #1
   19840:	056d      	lsls	r5, r5, #21
   19842:	0d6d      	lsrs	r5, r5, #21
   19844:	2d01      	cmp	r5, #1
   19846:	dc00      	bgt.n	1984a <__aeabi_dsub+0x26a>
   19848:	e0f2      	b.n	19a30 <__aeabi_dsub+0x450>
   1984a:	4650      	mov	r0, sl
   1984c:	1a80      	subs	r0, r0, r2
   1984e:	4582      	cmp	sl, r0
   19850:	41bf      	sbcs	r7, r7
   19852:	1a65      	subs	r5, r4, r1
   19854:	427f      	negs	r7, r7
   19856:	1bed      	subs	r5, r5, r7
   19858:	4684      	mov	ip, r0
   1985a:	0228      	lsls	r0, r5, #8
   1985c:	d400      	bmi.n	19860 <__aeabi_dsub+0x280>
   1985e:	e08c      	b.n	1997a <__aeabi_dsub+0x39a>
   19860:	4650      	mov	r0, sl
   19862:	1a17      	subs	r7, r2, r0
   19864:	42ba      	cmp	r2, r7
   19866:	4192      	sbcs	r2, r2
   19868:	1b0c      	subs	r4, r1, r4
   1986a:	4255      	negs	r5, r2
   1986c:	1b65      	subs	r5, r4, r5
   1986e:	4698      	mov	r8, r3
   19870:	e714      	b.n	1969c <__aeabi_dsub+0xbc>
   19872:	2501      	movs	r5, #1
   19874:	4643      	mov	r3, r8
   19876:	2400      	movs	r4, #0
   19878:	401d      	ands	r5, r3
   1987a:	2700      	movs	r7, #0
   1987c:	e755      	b.n	1972a <__aeabi_dsub+0x14a>
   1987e:	4c2a      	ldr	r4, [pc, #168]	; (19928 <__aeabi_dsub+0x348>)
   19880:	1af6      	subs	r6, r6, r3
   19882:	402c      	ands	r4, r5
   19884:	e732      	b.n	196ec <__aeabi_dsub+0x10c>
   19886:	003d      	movs	r5, r7
   19888:	3828      	subs	r0, #40	; 0x28
   1988a:	4085      	lsls	r5, r0
   1988c:	2700      	movs	r7, #0
   1988e:	e717      	b.n	196c0 <__aeabi_dsub+0xe0>
   19890:	0038      	movs	r0, r7
   19892:	f000 fa69 	bl	19d68 <__clzsi2>
   19896:	3020      	adds	r0, #32
   19898:	e706      	b.n	196a8 <__aeabi_dsub+0xc8>
   1989a:	430a      	orrs	r2, r1
   1989c:	0017      	movs	r7, r2
   1989e:	2100      	movs	r1, #0
   198a0:	1e7a      	subs	r2, r7, #1
   198a2:	4197      	sbcs	r7, r2
   198a4:	e6ee      	b.n	19684 <__aeabi_dsub+0xa4>
   198a6:	2b00      	cmp	r3, #0
   198a8:	d000      	beq.n	198ac <__aeabi_dsub+0x2cc>
   198aa:	e0e5      	b.n	19a78 <__aeabi_dsub+0x498>
   198ac:	1c73      	adds	r3, r6, #1
   198ae:	469c      	mov	ip, r3
   198b0:	055b      	lsls	r3, r3, #21
   198b2:	0d5b      	lsrs	r3, r3, #21
   198b4:	2b01      	cmp	r3, #1
   198b6:	dc00      	bgt.n	198ba <__aeabi_dsub+0x2da>
   198b8:	e09f      	b.n	199fa <__aeabi_dsub+0x41a>
   198ba:	4b1a      	ldr	r3, [pc, #104]	; (19924 <__aeabi_dsub+0x344>)
   198bc:	459c      	cmp	ip, r3
   198be:	d100      	bne.n	198c2 <__aeabi_dsub+0x2e2>
   198c0:	e0c5      	b.n	19a4e <__aeabi_dsub+0x46e>
   198c2:	4452      	add	r2, sl
   198c4:	4552      	cmp	r2, sl
   198c6:	4180      	sbcs	r0, r0
   198c8:	1864      	adds	r4, r4, r1
   198ca:	4240      	negs	r0, r0
   198cc:	1824      	adds	r4, r4, r0
   198ce:	07e7      	lsls	r7, r4, #31
   198d0:	0852      	lsrs	r2, r2, #1
   198d2:	4317      	orrs	r7, r2
   198d4:	0864      	lsrs	r4, r4, #1
   198d6:	4666      	mov	r6, ip
   198d8:	e708      	b.n	196ec <__aeabi_dsub+0x10c>
   198da:	4812      	ldr	r0, [pc, #72]	; (19924 <__aeabi_dsub+0x344>)
   198dc:	4285      	cmp	r5, r0
   198de:	d100      	bne.n	198e2 <__aeabi_dsub+0x302>
   198e0:	e085      	b.n	199ee <__aeabi_dsub+0x40e>
   198e2:	001d      	movs	r5, r3
   198e4:	e6bc      	b.n	19660 <__aeabi_dsub+0x80>
   198e6:	0029      	movs	r1, r5
   198e8:	3e1f      	subs	r6, #31
   198ea:	40f1      	lsrs	r1, r6
   198ec:	2b20      	cmp	r3, #32
   198ee:	d100      	bne.n	198f2 <__aeabi_dsub+0x312>
   198f0:	e07f      	b.n	199f2 <__aeabi_dsub+0x412>
   198f2:	2240      	movs	r2, #64	; 0x40
   198f4:	1ad3      	subs	r3, r2, r3
   198f6:	409d      	lsls	r5, r3
   198f8:	432f      	orrs	r7, r5
   198fa:	1e7d      	subs	r5, r7, #1
   198fc:	41af      	sbcs	r7, r5
   198fe:	2400      	movs	r4, #0
   19900:	430f      	orrs	r7, r1
   19902:	2600      	movs	r6, #0
   19904:	e78e      	b.n	19824 <__aeabi_dsub+0x244>
   19906:	002b      	movs	r3, r5
   19908:	000f      	movs	r7, r1
   1990a:	3b20      	subs	r3, #32
   1990c:	40df      	lsrs	r7, r3
   1990e:	2d20      	cmp	r5, #32
   19910:	d071      	beq.n	199f6 <__aeabi_dsub+0x416>
   19912:	2340      	movs	r3, #64	; 0x40
   19914:	1b5d      	subs	r5, r3, r5
   19916:	40a9      	lsls	r1, r5
   19918:	430a      	orrs	r2, r1
   1991a:	1e51      	subs	r1, r2, #1
   1991c:	418a      	sbcs	r2, r1
   1991e:	2100      	movs	r1, #0
   19920:	4317      	orrs	r7, r2
   19922:	e6af      	b.n	19684 <__aeabi_dsub+0xa4>
   19924:	000007ff 	.word	0x000007ff
   19928:	ff7fffff 	.word	0xff7fffff
   1992c:	800fffff 	.word	0x800fffff
   19930:	2e00      	cmp	r6, #0
   19932:	d03e      	beq.n	199b2 <__aeabi_dsub+0x3d2>
   19934:	4eb3      	ldr	r6, [pc, #716]	; (19c04 <__aeabi_dsub+0x624>)
   19936:	45b4      	cmp	ip, r6
   19938:	d045      	beq.n	199c6 <__aeabi_dsub+0x3e6>
   1993a:	2680      	movs	r6, #128	; 0x80
   1993c:	0436      	lsls	r6, r6, #16
   1993e:	426d      	negs	r5, r5
   19940:	4334      	orrs	r4, r6
   19942:	2d38      	cmp	r5, #56	; 0x38
   19944:	dd00      	ble.n	19948 <__aeabi_dsub+0x368>
   19946:	e0a8      	b.n	19a9a <__aeabi_dsub+0x4ba>
   19948:	2d1f      	cmp	r5, #31
   1994a:	dd00      	ble.n	1994e <__aeabi_dsub+0x36e>
   1994c:	e11f      	b.n	19b8e <__aeabi_dsub+0x5ae>
   1994e:	2620      	movs	r6, #32
   19950:	0027      	movs	r7, r4
   19952:	4650      	mov	r0, sl
   19954:	1b76      	subs	r6, r6, r5
   19956:	40b7      	lsls	r7, r6
   19958:	40e8      	lsrs	r0, r5
   1995a:	4307      	orrs	r7, r0
   1995c:	4650      	mov	r0, sl
   1995e:	40b0      	lsls	r0, r6
   19960:	1e46      	subs	r6, r0, #1
   19962:	41b0      	sbcs	r0, r6
   19964:	40ec      	lsrs	r4, r5
   19966:	4338      	orrs	r0, r7
   19968:	1a17      	subs	r7, r2, r0
   1996a:	42ba      	cmp	r2, r7
   1996c:	4192      	sbcs	r2, r2
   1996e:	1b0c      	subs	r4, r1, r4
   19970:	4252      	negs	r2, r2
   19972:	1aa4      	subs	r4, r4, r2
   19974:	4666      	mov	r6, ip
   19976:	4698      	mov	r8, r3
   19978:	e68b      	b.n	19692 <__aeabi_dsub+0xb2>
   1997a:	4664      	mov	r4, ip
   1997c:	4667      	mov	r7, ip
   1997e:	432c      	orrs	r4, r5
   19980:	d000      	beq.n	19984 <__aeabi_dsub+0x3a4>
   19982:	e68b      	b.n	1969c <__aeabi_dsub+0xbc>
   19984:	2500      	movs	r5, #0
   19986:	2600      	movs	r6, #0
   19988:	2700      	movs	r7, #0
   1998a:	e6ea      	b.n	19762 <__aeabi_dsub+0x182>
   1998c:	001e      	movs	r6, r3
   1998e:	e6ad      	b.n	196ec <__aeabi_dsub+0x10c>
   19990:	2b1f      	cmp	r3, #31
   19992:	dc60      	bgt.n	19a56 <__aeabi_dsub+0x476>
   19994:	2720      	movs	r7, #32
   19996:	1af8      	subs	r0, r7, r3
   19998:	000f      	movs	r7, r1
   1999a:	4684      	mov	ip, r0
   1999c:	4087      	lsls	r7, r0
   1999e:	0010      	movs	r0, r2
   199a0:	40d8      	lsrs	r0, r3
   199a2:	4307      	orrs	r7, r0
   199a4:	4660      	mov	r0, ip
   199a6:	4082      	lsls	r2, r0
   199a8:	1e50      	subs	r0, r2, #1
   199aa:	4182      	sbcs	r2, r0
   199ac:	40d9      	lsrs	r1, r3
   199ae:	4317      	orrs	r7, r2
   199b0:	e6f5      	b.n	1979e <__aeabi_dsub+0x1be>
   199b2:	0026      	movs	r6, r4
   199b4:	4650      	mov	r0, sl
   199b6:	4306      	orrs	r6, r0
   199b8:	d005      	beq.n	199c6 <__aeabi_dsub+0x3e6>
   199ba:	43ed      	mvns	r5, r5
   199bc:	2d00      	cmp	r5, #0
   199be:	d0d3      	beq.n	19968 <__aeabi_dsub+0x388>
   199c0:	4e90      	ldr	r6, [pc, #576]	; (19c04 <__aeabi_dsub+0x624>)
   199c2:	45b4      	cmp	ip, r6
   199c4:	d1bd      	bne.n	19942 <__aeabi_dsub+0x362>
   199c6:	000c      	movs	r4, r1
   199c8:	0017      	movs	r7, r2
   199ca:	4666      	mov	r6, ip
   199cc:	4698      	mov	r8, r3
   199ce:	e68d      	b.n	196ec <__aeabi_dsub+0x10c>
   199d0:	488c      	ldr	r0, [pc, #560]	; (19c04 <__aeabi_dsub+0x624>)
   199d2:	4283      	cmp	r3, r0
   199d4:	d00b      	beq.n	199ee <__aeabi_dsub+0x40e>
   199d6:	4663      	mov	r3, ip
   199d8:	e6d9      	b.n	1978e <__aeabi_dsub+0x1ae>
   199da:	2d00      	cmp	r5, #0
   199dc:	d000      	beq.n	199e0 <__aeabi_dsub+0x400>
   199de:	e096      	b.n	19b0e <__aeabi_dsub+0x52e>
   199e0:	0008      	movs	r0, r1
   199e2:	4310      	orrs	r0, r2
   199e4:	d100      	bne.n	199e8 <__aeabi_dsub+0x408>
   199e6:	e0e2      	b.n	19bae <__aeabi_dsub+0x5ce>
   199e8:	000c      	movs	r4, r1
   199ea:	0017      	movs	r7, r2
   199ec:	4698      	mov	r8, r3
   199ee:	4e85      	ldr	r6, [pc, #532]	; (19c04 <__aeabi_dsub+0x624>)
   199f0:	e67c      	b.n	196ec <__aeabi_dsub+0x10c>
   199f2:	2500      	movs	r5, #0
   199f4:	e780      	b.n	198f8 <__aeabi_dsub+0x318>
   199f6:	2100      	movs	r1, #0
   199f8:	e78e      	b.n	19918 <__aeabi_dsub+0x338>
   199fa:	0023      	movs	r3, r4
   199fc:	4650      	mov	r0, sl
   199fe:	4303      	orrs	r3, r0
   19a00:	2e00      	cmp	r6, #0
   19a02:	d000      	beq.n	19a06 <__aeabi_dsub+0x426>
   19a04:	e0a8      	b.n	19b58 <__aeabi_dsub+0x578>
   19a06:	2b00      	cmp	r3, #0
   19a08:	d100      	bne.n	19a0c <__aeabi_dsub+0x42c>
   19a0a:	e0de      	b.n	19bca <__aeabi_dsub+0x5ea>
   19a0c:	000b      	movs	r3, r1
   19a0e:	4313      	orrs	r3, r2
   19a10:	d100      	bne.n	19a14 <__aeabi_dsub+0x434>
   19a12:	e66b      	b.n	196ec <__aeabi_dsub+0x10c>
   19a14:	4452      	add	r2, sl
   19a16:	4552      	cmp	r2, sl
   19a18:	4180      	sbcs	r0, r0
   19a1a:	1864      	adds	r4, r4, r1
   19a1c:	4240      	negs	r0, r0
   19a1e:	1824      	adds	r4, r4, r0
   19a20:	0017      	movs	r7, r2
   19a22:	0223      	lsls	r3, r4, #8
   19a24:	d400      	bmi.n	19a28 <__aeabi_dsub+0x448>
   19a26:	e6fd      	b.n	19824 <__aeabi_dsub+0x244>
   19a28:	4b77      	ldr	r3, [pc, #476]	; (19c08 <__aeabi_dsub+0x628>)
   19a2a:	4666      	mov	r6, ip
   19a2c:	401c      	ands	r4, r3
   19a2e:	e65d      	b.n	196ec <__aeabi_dsub+0x10c>
   19a30:	0025      	movs	r5, r4
   19a32:	4650      	mov	r0, sl
   19a34:	4305      	orrs	r5, r0
   19a36:	2e00      	cmp	r6, #0
   19a38:	d1cf      	bne.n	199da <__aeabi_dsub+0x3fa>
   19a3a:	2d00      	cmp	r5, #0
   19a3c:	d14f      	bne.n	19ade <__aeabi_dsub+0x4fe>
   19a3e:	000c      	movs	r4, r1
   19a40:	4314      	orrs	r4, r2
   19a42:	d100      	bne.n	19a46 <__aeabi_dsub+0x466>
   19a44:	e0a0      	b.n	19b88 <__aeabi_dsub+0x5a8>
   19a46:	000c      	movs	r4, r1
   19a48:	0017      	movs	r7, r2
   19a4a:	4698      	mov	r8, r3
   19a4c:	e64e      	b.n	196ec <__aeabi_dsub+0x10c>
   19a4e:	4666      	mov	r6, ip
   19a50:	2400      	movs	r4, #0
   19a52:	2700      	movs	r7, #0
   19a54:	e685      	b.n	19762 <__aeabi_dsub+0x182>
   19a56:	001f      	movs	r7, r3
   19a58:	0008      	movs	r0, r1
   19a5a:	3f20      	subs	r7, #32
   19a5c:	40f8      	lsrs	r0, r7
   19a5e:	0007      	movs	r7, r0
   19a60:	2b20      	cmp	r3, #32
   19a62:	d100      	bne.n	19a66 <__aeabi_dsub+0x486>
   19a64:	e08e      	b.n	19b84 <__aeabi_dsub+0x5a4>
   19a66:	2040      	movs	r0, #64	; 0x40
   19a68:	1ac3      	subs	r3, r0, r3
   19a6a:	4099      	lsls	r1, r3
   19a6c:	430a      	orrs	r2, r1
   19a6e:	1e51      	subs	r1, r2, #1
   19a70:	418a      	sbcs	r2, r1
   19a72:	2100      	movs	r1, #0
   19a74:	4317      	orrs	r7, r2
   19a76:	e692      	b.n	1979e <__aeabi_dsub+0x1be>
   19a78:	2e00      	cmp	r6, #0
   19a7a:	d114      	bne.n	19aa6 <__aeabi_dsub+0x4c6>
   19a7c:	0026      	movs	r6, r4
   19a7e:	4650      	mov	r0, sl
   19a80:	4306      	orrs	r6, r0
   19a82:	d062      	beq.n	19b4a <__aeabi_dsub+0x56a>
   19a84:	43db      	mvns	r3, r3
   19a86:	2b00      	cmp	r3, #0
   19a88:	d15c      	bne.n	19b44 <__aeabi_dsub+0x564>
   19a8a:	1887      	adds	r7, r0, r2
   19a8c:	4297      	cmp	r7, r2
   19a8e:	4192      	sbcs	r2, r2
   19a90:	1864      	adds	r4, r4, r1
   19a92:	4252      	negs	r2, r2
   19a94:	18a4      	adds	r4, r4, r2
   19a96:	4666      	mov	r6, ip
   19a98:	e687      	b.n	197aa <__aeabi_dsub+0x1ca>
   19a9a:	4650      	mov	r0, sl
   19a9c:	4320      	orrs	r0, r4
   19a9e:	1e44      	subs	r4, r0, #1
   19aa0:	41a0      	sbcs	r0, r4
   19aa2:	2400      	movs	r4, #0
   19aa4:	e760      	b.n	19968 <__aeabi_dsub+0x388>
   19aa6:	4e57      	ldr	r6, [pc, #348]	; (19c04 <__aeabi_dsub+0x624>)
   19aa8:	45b4      	cmp	ip, r6
   19aaa:	d04e      	beq.n	19b4a <__aeabi_dsub+0x56a>
   19aac:	2680      	movs	r6, #128	; 0x80
   19aae:	0436      	lsls	r6, r6, #16
   19ab0:	425b      	negs	r3, r3
   19ab2:	4334      	orrs	r4, r6
   19ab4:	2b38      	cmp	r3, #56	; 0x38
   19ab6:	dd00      	ble.n	19aba <__aeabi_dsub+0x4da>
   19ab8:	e07f      	b.n	19bba <__aeabi_dsub+0x5da>
   19aba:	2b1f      	cmp	r3, #31
   19abc:	dd00      	ble.n	19ac0 <__aeabi_dsub+0x4e0>
   19abe:	e08b      	b.n	19bd8 <__aeabi_dsub+0x5f8>
   19ac0:	2620      	movs	r6, #32
   19ac2:	0027      	movs	r7, r4
   19ac4:	4650      	mov	r0, sl
   19ac6:	1af6      	subs	r6, r6, r3
   19ac8:	40b7      	lsls	r7, r6
   19aca:	40d8      	lsrs	r0, r3
   19acc:	4307      	orrs	r7, r0
   19ace:	4650      	mov	r0, sl
   19ad0:	40b0      	lsls	r0, r6
   19ad2:	1e46      	subs	r6, r0, #1
   19ad4:	41b0      	sbcs	r0, r6
   19ad6:	4307      	orrs	r7, r0
   19ad8:	40dc      	lsrs	r4, r3
   19ada:	18bf      	adds	r7, r7, r2
   19adc:	e7d6      	b.n	19a8c <__aeabi_dsub+0x4ac>
   19ade:	000d      	movs	r5, r1
   19ae0:	4315      	orrs	r5, r2
   19ae2:	d100      	bne.n	19ae6 <__aeabi_dsub+0x506>
   19ae4:	e602      	b.n	196ec <__aeabi_dsub+0x10c>
   19ae6:	4650      	mov	r0, sl
   19ae8:	1a80      	subs	r0, r0, r2
   19aea:	4582      	cmp	sl, r0
   19aec:	41bf      	sbcs	r7, r7
   19aee:	1a65      	subs	r5, r4, r1
   19af0:	427f      	negs	r7, r7
   19af2:	1bed      	subs	r5, r5, r7
   19af4:	4684      	mov	ip, r0
   19af6:	0228      	lsls	r0, r5, #8
   19af8:	d400      	bmi.n	19afc <__aeabi_dsub+0x51c>
   19afa:	e68d      	b.n	19818 <__aeabi_dsub+0x238>
   19afc:	4650      	mov	r0, sl
   19afe:	1a17      	subs	r7, r2, r0
   19b00:	42ba      	cmp	r2, r7
   19b02:	4192      	sbcs	r2, r2
   19b04:	1b0c      	subs	r4, r1, r4
   19b06:	4252      	negs	r2, r2
   19b08:	1aa4      	subs	r4, r4, r2
   19b0a:	4698      	mov	r8, r3
   19b0c:	e5ee      	b.n	196ec <__aeabi_dsub+0x10c>
   19b0e:	000d      	movs	r5, r1
   19b10:	4315      	orrs	r5, r2
   19b12:	d100      	bne.n	19b16 <__aeabi_dsub+0x536>
   19b14:	e76b      	b.n	199ee <__aeabi_dsub+0x40e>
   19b16:	4650      	mov	r0, sl
   19b18:	0767      	lsls	r7, r4, #29
   19b1a:	08c0      	lsrs	r0, r0, #3
   19b1c:	4307      	orrs	r7, r0
   19b1e:	2080      	movs	r0, #128	; 0x80
   19b20:	08e4      	lsrs	r4, r4, #3
   19b22:	0300      	lsls	r0, r0, #12
   19b24:	4204      	tst	r4, r0
   19b26:	d007      	beq.n	19b38 <__aeabi_dsub+0x558>
   19b28:	08cd      	lsrs	r5, r1, #3
   19b2a:	4205      	tst	r5, r0
   19b2c:	d104      	bne.n	19b38 <__aeabi_dsub+0x558>
   19b2e:	002c      	movs	r4, r5
   19b30:	4698      	mov	r8, r3
   19b32:	08d7      	lsrs	r7, r2, #3
   19b34:	0749      	lsls	r1, r1, #29
   19b36:	430f      	orrs	r7, r1
   19b38:	0f7b      	lsrs	r3, r7, #29
   19b3a:	00e4      	lsls	r4, r4, #3
   19b3c:	431c      	orrs	r4, r3
   19b3e:	00ff      	lsls	r7, r7, #3
   19b40:	4e30      	ldr	r6, [pc, #192]	; (19c04 <__aeabi_dsub+0x624>)
   19b42:	e5d3      	b.n	196ec <__aeabi_dsub+0x10c>
   19b44:	4e2f      	ldr	r6, [pc, #188]	; (19c04 <__aeabi_dsub+0x624>)
   19b46:	45b4      	cmp	ip, r6
   19b48:	d1b4      	bne.n	19ab4 <__aeabi_dsub+0x4d4>
   19b4a:	000c      	movs	r4, r1
   19b4c:	0017      	movs	r7, r2
   19b4e:	4666      	mov	r6, ip
   19b50:	e5cc      	b.n	196ec <__aeabi_dsub+0x10c>
   19b52:	2700      	movs	r7, #0
   19b54:	2400      	movs	r4, #0
   19b56:	e5e8      	b.n	1972a <__aeabi_dsub+0x14a>
   19b58:	2b00      	cmp	r3, #0
   19b5a:	d039      	beq.n	19bd0 <__aeabi_dsub+0x5f0>
   19b5c:	000b      	movs	r3, r1
   19b5e:	4313      	orrs	r3, r2
   19b60:	d100      	bne.n	19b64 <__aeabi_dsub+0x584>
   19b62:	e744      	b.n	199ee <__aeabi_dsub+0x40e>
   19b64:	08c0      	lsrs	r0, r0, #3
   19b66:	0767      	lsls	r7, r4, #29
   19b68:	4307      	orrs	r7, r0
   19b6a:	2080      	movs	r0, #128	; 0x80
   19b6c:	08e4      	lsrs	r4, r4, #3
   19b6e:	0300      	lsls	r0, r0, #12
   19b70:	4204      	tst	r4, r0
   19b72:	d0e1      	beq.n	19b38 <__aeabi_dsub+0x558>
   19b74:	08cb      	lsrs	r3, r1, #3
   19b76:	4203      	tst	r3, r0
   19b78:	d1de      	bne.n	19b38 <__aeabi_dsub+0x558>
   19b7a:	08d7      	lsrs	r7, r2, #3
   19b7c:	0749      	lsls	r1, r1, #29
   19b7e:	430f      	orrs	r7, r1
   19b80:	001c      	movs	r4, r3
   19b82:	e7d9      	b.n	19b38 <__aeabi_dsub+0x558>
   19b84:	2100      	movs	r1, #0
   19b86:	e771      	b.n	19a6c <__aeabi_dsub+0x48c>
   19b88:	2500      	movs	r5, #0
   19b8a:	2700      	movs	r7, #0
   19b8c:	e5e9      	b.n	19762 <__aeabi_dsub+0x182>
   19b8e:	002e      	movs	r6, r5
   19b90:	0027      	movs	r7, r4
   19b92:	3e20      	subs	r6, #32
   19b94:	40f7      	lsrs	r7, r6
   19b96:	2d20      	cmp	r5, #32
   19b98:	d02f      	beq.n	19bfa <__aeabi_dsub+0x61a>
   19b9a:	2640      	movs	r6, #64	; 0x40
   19b9c:	1b75      	subs	r5, r6, r5
   19b9e:	40ac      	lsls	r4, r5
   19ba0:	4650      	mov	r0, sl
   19ba2:	4320      	orrs	r0, r4
   19ba4:	1e44      	subs	r4, r0, #1
   19ba6:	41a0      	sbcs	r0, r4
   19ba8:	2400      	movs	r4, #0
   19baa:	4338      	orrs	r0, r7
   19bac:	e6dc      	b.n	19968 <__aeabi_dsub+0x388>
   19bae:	2480      	movs	r4, #128	; 0x80
   19bb0:	2500      	movs	r5, #0
   19bb2:	0324      	lsls	r4, r4, #12
   19bb4:	4e13      	ldr	r6, [pc, #76]	; (19c04 <__aeabi_dsub+0x624>)
   19bb6:	2700      	movs	r7, #0
   19bb8:	e5d3      	b.n	19762 <__aeabi_dsub+0x182>
   19bba:	4650      	mov	r0, sl
   19bbc:	4320      	orrs	r0, r4
   19bbe:	0007      	movs	r7, r0
   19bc0:	1e78      	subs	r0, r7, #1
   19bc2:	4187      	sbcs	r7, r0
   19bc4:	2400      	movs	r4, #0
   19bc6:	18bf      	adds	r7, r7, r2
   19bc8:	e760      	b.n	19a8c <__aeabi_dsub+0x4ac>
   19bca:	000c      	movs	r4, r1
   19bcc:	0017      	movs	r7, r2
   19bce:	e58d      	b.n	196ec <__aeabi_dsub+0x10c>
   19bd0:	000c      	movs	r4, r1
   19bd2:	0017      	movs	r7, r2
   19bd4:	4e0b      	ldr	r6, [pc, #44]	; (19c04 <__aeabi_dsub+0x624>)
   19bd6:	e589      	b.n	196ec <__aeabi_dsub+0x10c>
   19bd8:	001e      	movs	r6, r3
   19bda:	0027      	movs	r7, r4
   19bdc:	3e20      	subs	r6, #32
   19bde:	40f7      	lsrs	r7, r6
   19be0:	2b20      	cmp	r3, #32
   19be2:	d00c      	beq.n	19bfe <__aeabi_dsub+0x61e>
   19be4:	2640      	movs	r6, #64	; 0x40
   19be6:	1af3      	subs	r3, r6, r3
   19be8:	409c      	lsls	r4, r3
   19bea:	4650      	mov	r0, sl
   19bec:	4320      	orrs	r0, r4
   19bee:	1e44      	subs	r4, r0, #1
   19bf0:	41a0      	sbcs	r0, r4
   19bf2:	4307      	orrs	r7, r0
   19bf4:	2400      	movs	r4, #0
   19bf6:	18bf      	adds	r7, r7, r2
   19bf8:	e748      	b.n	19a8c <__aeabi_dsub+0x4ac>
   19bfa:	2400      	movs	r4, #0
   19bfc:	e7d0      	b.n	19ba0 <__aeabi_dsub+0x5c0>
   19bfe:	2400      	movs	r4, #0
   19c00:	e7f3      	b.n	19bea <__aeabi_dsub+0x60a>
   19c02:	46c0      	nop			; (mov r8, r8)
   19c04:	000007ff 	.word	0x000007ff
   19c08:	ff7fffff 	.word	0xff7fffff

00019c0c <__aeabi_d2iz>:
   19c0c:	b530      	push	{r4, r5, lr}
   19c0e:	4d13      	ldr	r5, [pc, #76]	; (19c5c <__aeabi_d2iz+0x50>)
   19c10:	030a      	lsls	r2, r1, #12
   19c12:	004b      	lsls	r3, r1, #1
   19c14:	0b12      	lsrs	r2, r2, #12
   19c16:	0d5b      	lsrs	r3, r3, #21
   19c18:	0fc9      	lsrs	r1, r1, #31
   19c1a:	2400      	movs	r4, #0
   19c1c:	42ab      	cmp	r3, r5
   19c1e:	dd10      	ble.n	19c42 <__aeabi_d2iz+0x36>
   19c20:	4c0f      	ldr	r4, [pc, #60]	; (19c60 <__aeabi_d2iz+0x54>)
   19c22:	42a3      	cmp	r3, r4
   19c24:	dc0f      	bgt.n	19c46 <__aeabi_d2iz+0x3a>
   19c26:	2480      	movs	r4, #128	; 0x80
   19c28:	4d0e      	ldr	r5, [pc, #56]	; (19c64 <__aeabi_d2iz+0x58>)
   19c2a:	0364      	lsls	r4, r4, #13
   19c2c:	4322      	orrs	r2, r4
   19c2e:	1aed      	subs	r5, r5, r3
   19c30:	2d1f      	cmp	r5, #31
   19c32:	dd0b      	ble.n	19c4c <__aeabi_d2iz+0x40>
   19c34:	480c      	ldr	r0, [pc, #48]	; (19c68 <__aeabi_d2iz+0x5c>)
   19c36:	1ac3      	subs	r3, r0, r3
   19c38:	40da      	lsrs	r2, r3
   19c3a:	4254      	negs	r4, r2
   19c3c:	2900      	cmp	r1, #0
   19c3e:	d100      	bne.n	19c42 <__aeabi_d2iz+0x36>
   19c40:	0014      	movs	r4, r2
   19c42:	0020      	movs	r0, r4
   19c44:	bd30      	pop	{r4, r5, pc}
   19c46:	4b09      	ldr	r3, [pc, #36]	; (19c6c <__aeabi_d2iz+0x60>)
   19c48:	18cc      	adds	r4, r1, r3
   19c4a:	e7fa      	b.n	19c42 <__aeabi_d2iz+0x36>
   19c4c:	4c08      	ldr	r4, [pc, #32]	; (19c70 <__aeabi_d2iz+0x64>)
   19c4e:	40e8      	lsrs	r0, r5
   19c50:	46a4      	mov	ip, r4
   19c52:	4463      	add	r3, ip
   19c54:	409a      	lsls	r2, r3
   19c56:	4302      	orrs	r2, r0
   19c58:	e7ef      	b.n	19c3a <__aeabi_d2iz+0x2e>
   19c5a:	46c0      	nop			; (mov r8, r8)
   19c5c:	000003fe 	.word	0x000003fe
   19c60:	0000041d 	.word	0x0000041d
   19c64:	00000433 	.word	0x00000433
   19c68:	00000413 	.word	0x00000413
   19c6c:	7fffffff 	.word	0x7fffffff
   19c70:	fffffbed 	.word	0xfffffbed

00019c74 <__aeabi_i2d>:
   19c74:	b570      	push	{r4, r5, r6, lr}
   19c76:	2800      	cmp	r0, #0
   19c78:	d030      	beq.n	19cdc <__aeabi_i2d+0x68>
   19c7a:	17c3      	asrs	r3, r0, #31
   19c7c:	18c4      	adds	r4, r0, r3
   19c7e:	405c      	eors	r4, r3
   19c80:	0fc5      	lsrs	r5, r0, #31
   19c82:	0020      	movs	r0, r4
   19c84:	f000 f870 	bl	19d68 <__clzsi2>
   19c88:	4b17      	ldr	r3, [pc, #92]	; (19ce8 <__aeabi_i2d+0x74>)
   19c8a:	4a18      	ldr	r2, [pc, #96]	; (19cec <__aeabi_i2d+0x78>)
   19c8c:	1a1b      	subs	r3, r3, r0
   19c8e:	1ad2      	subs	r2, r2, r3
   19c90:	2a1f      	cmp	r2, #31
   19c92:	dd18      	ble.n	19cc6 <__aeabi_i2d+0x52>
   19c94:	4a16      	ldr	r2, [pc, #88]	; (19cf0 <__aeabi_i2d+0x7c>)
   19c96:	1ad2      	subs	r2, r2, r3
   19c98:	4094      	lsls	r4, r2
   19c9a:	2200      	movs	r2, #0
   19c9c:	0324      	lsls	r4, r4, #12
   19c9e:	055b      	lsls	r3, r3, #21
   19ca0:	0b24      	lsrs	r4, r4, #12
   19ca2:	0d5b      	lsrs	r3, r3, #21
   19ca4:	2100      	movs	r1, #0
   19ca6:	0010      	movs	r0, r2
   19ca8:	0324      	lsls	r4, r4, #12
   19caa:	0d0a      	lsrs	r2, r1, #20
   19cac:	0b24      	lsrs	r4, r4, #12
   19cae:	0512      	lsls	r2, r2, #20
   19cb0:	4322      	orrs	r2, r4
   19cb2:	4c10      	ldr	r4, [pc, #64]	; (19cf4 <__aeabi_i2d+0x80>)
   19cb4:	051b      	lsls	r3, r3, #20
   19cb6:	4022      	ands	r2, r4
   19cb8:	4313      	orrs	r3, r2
   19cba:	005b      	lsls	r3, r3, #1
   19cbc:	07ed      	lsls	r5, r5, #31
   19cbe:	085b      	lsrs	r3, r3, #1
   19cc0:	432b      	orrs	r3, r5
   19cc2:	0019      	movs	r1, r3
   19cc4:	bd70      	pop	{r4, r5, r6, pc}
   19cc6:	0021      	movs	r1, r4
   19cc8:	4091      	lsls	r1, r2
   19cca:	000a      	movs	r2, r1
   19ccc:	210b      	movs	r1, #11
   19cce:	1a08      	subs	r0, r1, r0
   19cd0:	40c4      	lsrs	r4, r0
   19cd2:	055b      	lsls	r3, r3, #21
   19cd4:	0324      	lsls	r4, r4, #12
   19cd6:	0b24      	lsrs	r4, r4, #12
   19cd8:	0d5b      	lsrs	r3, r3, #21
   19cda:	e7e3      	b.n	19ca4 <__aeabi_i2d+0x30>
   19cdc:	2500      	movs	r5, #0
   19cde:	2300      	movs	r3, #0
   19ce0:	2400      	movs	r4, #0
   19ce2:	2200      	movs	r2, #0
   19ce4:	e7de      	b.n	19ca4 <__aeabi_i2d+0x30>
   19ce6:	46c0      	nop			; (mov r8, r8)
   19ce8:	0000041e 	.word	0x0000041e
   19cec:	00000433 	.word	0x00000433
   19cf0:	00000413 	.word	0x00000413
   19cf4:	800fffff 	.word	0x800fffff

00019cf8 <__aeabi_ui2d>:
   19cf8:	b510      	push	{r4, lr}
   19cfa:	1e04      	subs	r4, r0, #0
   19cfc:	d028      	beq.n	19d50 <__aeabi_ui2d+0x58>
   19cfe:	f000 f833 	bl	19d68 <__clzsi2>
   19d02:	4b15      	ldr	r3, [pc, #84]	; (19d58 <__aeabi_ui2d+0x60>)
   19d04:	4a15      	ldr	r2, [pc, #84]	; (19d5c <__aeabi_ui2d+0x64>)
   19d06:	1a1b      	subs	r3, r3, r0
   19d08:	1ad2      	subs	r2, r2, r3
   19d0a:	2a1f      	cmp	r2, #31
   19d0c:	dd15      	ble.n	19d3a <__aeabi_ui2d+0x42>
   19d0e:	4a14      	ldr	r2, [pc, #80]	; (19d60 <__aeabi_ui2d+0x68>)
   19d10:	1ad2      	subs	r2, r2, r3
   19d12:	4094      	lsls	r4, r2
   19d14:	2200      	movs	r2, #0
   19d16:	0324      	lsls	r4, r4, #12
   19d18:	055b      	lsls	r3, r3, #21
   19d1a:	0b24      	lsrs	r4, r4, #12
   19d1c:	0d5b      	lsrs	r3, r3, #21
   19d1e:	2100      	movs	r1, #0
   19d20:	0010      	movs	r0, r2
   19d22:	0324      	lsls	r4, r4, #12
   19d24:	0d0a      	lsrs	r2, r1, #20
   19d26:	0b24      	lsrs	r4, r4, #12
   19d28:	0512      	lsls	r2, r2, #20
   19d2a:	4322      	orrs	r2, r4
   19d2c:	4c0d      	ldr	r4, [pc, #52]	; (19d64 <__aeabi_ui2d+0x6c>)
   19d2e:	051b      	lsls	r3, r3, #20
   19d30:	4022      	ands	r2, r4
   19d32:	4313      	orrs	r3, r2
   19d34:	005b      	lsls	r3, r3, #1
   19d36:	0859      	lsrs	r1, r3, #1
   19d38:	bd10      	pop	{r4, pc}
   19d3a:	0021      	movs	r1, r4
   19d3c:	4091      	lsls	r1, r2
   19d3e:	000a      	movs	r2, r1
   19d40:	210b      	movs	r1, #11
   19d42:	1a08      	subs	r0, r1, r0
   19d44:	40c4      	lsrs	r4, r0
   19d46:	055b      	lsls	r3, r3, #21
   19d48:	0324      	lsls	r4, r4, #12
   19d4a:	0b24      	lsrs	r4, r4, #12
   19d4c:	0d5b      	lsrs	r3, r3, #21
   19d4e:	e7e6      	b.n	19d1e <__aeabi_ui2d+0x26>
   19d50:	2300      	movs	r3, #0
   19d52:	2400      	movs	r4, #0
   19d54:	2200      	movs	r2, #0
   19d56:	e7e2      	b.n	19d1e <__aeabi_ui2d+0x26>
   19d58:	0000041e 	.word	0x0000041e
   19d5c:	00000433 	.word	0x00000433
   19d60:	00000413 	.word	0x00000413
   19d64:	800fffff 	.word	0x800fffff

00019d68 <__clzsi2>:
   19d68:	211c      	movs	r1, #28
   19d6a:	2301      	movs	r3, #1
   19d6c:	041b      	lsls	r3, r3, #16
   19d6e:	4298      	cmp	r0, r3
   19d70:	d301      	bcc.n	19d76 <__clzsi2+0xe>
   19d72:	0c00      	lsrs	r0, r0, #16
   19d74:	3910      	subs	r1, #16
   19d76:	0a1b      	lsrs	r3, r3, #8
   19d78:	4298      	cmp	r0, r3
   19d7a:	d301      	bcc.n	19d80 <__clzsi2+0x18>
   19d7c:	0a00      	lsrs	r0, r0, #8
   19d7e:	3908      	subs	r1, #8
   19d80:	091b      	lsrs	r3, r3, #4
   19d82:	4298      	cmp	r0, r3
   19d84:	d301      	bcc.n	19d8a <__clzsi2+0x22>
   19d86:	0900      	lsrs	r0, r0, #4
   19d88:	3904      	subs	r1, #4
   19d8a:	a202      	add	r2, pc, #8	; (adr r2, 19d94 <__clzsi2+0x2c>)
   19d8c:	5c10      	ldrb	r0, [r2, r0]
   19d8e:	1840      	adds	r0, r0, r1
   19d90:	4770      	bx	lr
   19d92:	46c0      	nop			; (mov r8, r8)
   19d94:	02020304 	.word	0x02020304
   19d98:	01010101 	.word	0x01010101
	...

00019da4 <__libc_init_array>:
   19da4:	b570      	push	{r4, r5, r6, lr}
   19da6:	2600      	movs	r6, #0
   19da8:	4d0c      	ldr	r5, [pc, #48]	; (19ddc <__libc_init_array+0x38>)
   19daa:	4c0d      	ldr	r4, [pc, #52]	; (19de0 <__libc_init_array+0x3c>)
   19dac:	1b64      	subs	r4, r4, r5
   19dae:	10a4      	asrs	r4, r4, #2
   19db0:	42a6      	cmp	r6, r4
   19db2:	d109      	bne.n	19dc8 <__libc_init_array+0x24>
   19db4:	2600      	movs	r6, #0
   19db6:	f003 fc2b 	bl	1d610 <_init>
   19dba:	4d0a      	ldr	r5, [pc, #40]	; (19de4 <__libc_init_array+0x40>)
   19dbc:	4c0a      	ldr	r4, [pc, #40]	; (19de8 <__libc_init_array+0x44>)
   19dbe:	1b64      	subs	r4, r4, r5
   19dc0:	10a4      	asrs	r4, r4, #2
   19dc2:	42a6      	cmp	r6, r4
   19dc4:	d105      	bne.n	19dd2 <__libc_init_array+0x2e>
   19dc6:	bd70      	pop	{r4, r5, r6, pc}
   19dc8:	00b3      	lsls	r3, r6, #2
   19dca:	58eb      	ldr	r3, [r5, r3]
   19dcc:	4798      	blx	r3
   19dce:	3601      	adds	r6, #1
   19dd0:	e7ee      	b.n	19db0 <__libc_init_array+0xc>
   19dd2:	00b3      	lsls	r3, r6, #2
   19dd4:	58eb      	ldr	r3, [r5, r3]
   19dd6:	4798      	blx	r3
   19dd8:	3601      	adds	r6, #1
   19dda:	e7f2      	b.n	19dc2 <__libc_init_array+0x1e>
   19ddc:	0001d61c 	.word	0x0001d61c
   19de0:	0001d61c 	.word	0x0001d61c
   19de4:	0001d61c 	.word	0x0001d61c
   19de8:	0001d620 	.word	0x0001d620

00019dec <__itoa>:
   19dec:	1e93      	subs	r3, r2, #2
   19dee:	b510      	push	{r4, lr}
   19df0:	000c      	movs	r4, r1
   19df2:	2b22      	cmp	r3, #34	; 0x22
   19df4:	d904      	bls.n	19e00 <__itoa+0x14>
   19df6:	2300      	movs	r3, #0
   19df8:	001c      	movs	r4, r3
   19dfa:	700b      	strb	r3, [r1, #0]
   19dfc:	0020      	movs	r0, r4
   19dfe:	bd10      	pop	{r4, pc}
   19e00:	2a0a      	cmp	r2, #10
   19e02:	d109      	bne.n	19e18 <__itoa+0x2c>
   19e04:	2800      	cmp	r0, #0
   19e06:	da07      	bge.n	19e18 <__itoa+0x2c>
   19e08:	232d      	movs	r3, #45	; 0x2d
   19e0a:	700b      	strb	r3, [r1, #0]
   19e0c:	2101      	movs	r1, #1
   19e0e:	4240      	negs	r0, r0
   19e10:	1861      	adds	r1, r4, r1
   19e12:	f000 faff 	bl	1a414 <__utoa>
   19e16:	e7f1      	b.n	19dfc <__itoa+0x10>
   19e18:	2100      	movs	r1, #0
   19e1a:	e7f9      	b.n	19e10 <__itoa+0x24>

00019e1c <itoa>:
   19e1c:	b510      	push	{r4, lr}
   19e1e:	f7ff ffe5 	bl	19dec <__itoa>
   19e22:	bd10      	pop	{r4, pc}

00019e24 <malloc>:
   19e24:	b510      	push	{r4, lr}
   19e26:	4b03      	ldr	r3, [pc, #12]	; (19e34 <malloc+0x10>)
   19e28:	0001      	movs	r1, r0
   19e2a:	6818      	ldr	r0, [r3, #0]
   19e2c:	f000 f88a 	bl	19f44 <_malloc_r>
   19e30:	bd10      	pop	{r4, pc}
   19e32:	46c0      	nop			; (mov r8, r8)
   19e34:	20000534 	.word	0x20000534

00019e38 <free>:
   19e38:	b510      	push	{r4, lr}
   19e3a:	4b03      	ldr	r3, [pc, #12]	; (19e48 <free+0x10>)
   19e3c:	0001      	movs	r1, r0
   19e3e:	6818      	ldr	r0, [r3, #0]
   19e40:	f000 f836 	bl	19eb0 <_free_r>
   19e44:	bd10      	pop	{r4, pc}
   19e46:	46c0      	nop			; (mov r8, r8)
   19e48:	20000534 	.word	0x20000534

00019e4c <memcmp>:
   19e4c:	b530      	push	{r4, r5, lr}
   19e4e:	2400      	movs	r4, #0
   19e50:	42a2      	cmp	r2, r4
   19e52:	d101      	bne.n	19e58 <memcmp+0xc>
   19e54:	2000      	movs	r0, #0
   19e56:	e005      	b.n	19e64 <memcmp+0x18>
   19e58:	5d03      	ldrb	r3, [r0, r4]
   19e5a:	1c65      	adds	r5, r4, #1
   19e5c:	5d0c      	ldrb	r4, [r1, r4]
   19e5e:	42a3      	cmp	r3, r4
   19e60:	d001      	beq.n	19e66 <memcmp+0x1a>
   19e62:	1b18      	subs	r0, r3, r4
   19e64:	bd30      	pop	{r4, r5, pc}
   19e66:	002c      	movs	r4, r5
   19e68:	e7f2      	b.n	19e50 <memcmp+0x4>

00019e6a <memcpy>:
   19e6a:	2300      	movs	r3, #0
   19e6c:	b510      	push	{r4, lr}
   19e6e:	429a      	cmp	r2, r3
   19e70:	d100      	bne.n	19e74 <memcpy+0xa>
   19e72:	bd10      	pop	{r4, pc}
   19e74:	5ccc      	ldrb	r4, [r1, r3]
   19e76:	54c4      	strb	r4, [r0, r3]
   19e78:	3301      	adds	r3, #1
   19e7a:	e7f8      	b.n	19e6e <memcpy+0x4>

00019e7c <memmove>:
   19e7c:	b510      	push	{r4, lr}
   19e7e:	4288      	cmp	r0, r1
   19e80:	d902      	bls.n	19e88 <memmove+0xc>
   19e82:	188b      	adds	r3, r1, r2
   19e84:	4298      	cmp	r0, r3
   19e86:	d308      	bcc.n	19e9a <memmove+0x1e>
   19e88:	2300      	movs	r3, #0
   19e8a:	429a      	cmp	r2, r3
   19e8c:	d007      	beq.n	19e9e <memmove+0x22>
   19e8e:	5ccc      	ldrb	r4, [r1, r3]
   19e90:	54c4      	strb	r4, [r0, r3]
   19e92:	3301      	adds	r3, #1
   19e94:	e7f9      	b.n	19e8a <memmove+0xe>
   19e96:	5c8b      	ldrb	r3, [r1, r2]
   19e98:	5483      	strb	r3, [r0, r2]
   19e9a:	3a01      	subs	r2, #1
   19e9c:	d2fb      	bcs.n	19e96 <memmove+0x1a>
   19e9e:	bd10      	pop	{r4, pc}

00019ea0 <memset>:
   19ea0:	0003      	movs	r3, r0
   19ea2:	1882      	adds	r2, r0, r2
   19ea4:	4293      	cmp	r3, r2
   19ea6:	d100      	bne.n	19eaa <memset+0xa>
   19ea8:	4770      	bx	lr
   19eaa:	7019      	strb	r1, [r3, #0]
   19eac:	3301      	adds	r3, #1
   19eae:	e7f9      	b.n	19ea4 <memset+0x4>

00019eb0 <_free_r>:
   19eb0:	b570      	push	{r4, r5, r6, lr}
   19eb2:	0005      	movs	r5, r0
   19eb4:	2900      	cmp	r1, #0
   19eb6:	d010      	beq.n	19eda <_free_r+0x2a>
   19eb8:	1f0c      	subs	r4, r1, #4
   19eba:	6823      	ldr	r3, [r4, #0]
   19ebc:	2b00      	cmp	r3, #0
   19ebe:	da00      	bge.n	19ec2 <_free_r+0x12>
   19ec0:	18e4      	adds	r4, r4, r3
   19ec2:	0028      	movs	r0, r5
   19ec4:	f000 fde0 	bl	1aa88 <__malloc_lock>
   19ec8:	4a1d      	ldr	r2, [pc, #116]	; (19f40 <_free_r+0x90>)
   19eca:	6813      	ldr	r3, [r2, #0]
   19ecc:	2b00      	cmp	r3, #0
   19ece:	d105      	bne.n	19edc <_free_r+0x2c>
   19ed0:	6063      	str	r3, [r4, #4]
   19ed2:	6014      	str	r4, [r2, #0]
   19ed4:	0028      	movs	r0, r5
   19ed6:	f000 fdd8 	bl	1aa8a <__malloc_unlock>
   19eda:	bd70      	pop	{r4, r5, r6, pc}
   19edc:	42a3      	cmp	r3, r4
   19ede:	d909      	bls.n	19ef4 <_free_r+0x44>
   19ee0:	6821      	ldr	r1, [r4, #0]
   19ee2:	1860      	adds	r0, r4, r1
   19ee4:	4283      	cmp	r3, r0
   19ee6:	d1f3      	bne.n	19ed0 <_free_r+0x20>
   19ee8:	6818      	ldr	r0, [r3, #0]
   19eea:	685b      	ldr	r3, [r3, #4]
   19eec:	1841      	adds	r1, r0, r1
   19eee:	6021      	str	r1, [r4, #0]
   19ef0:	e7ee      	b.n	19ed0 <_free_r+0x20>
   19ef2:	0013      	movs	r3, r2
   19ef4:	685a      	ldr	r2, [r3, #4]
   19ef6:	2a00      	cmp	r2, #0
   19ef8:	d001      	beq.n	19efe <_free_r+0x4e>
   19efa:	42a2      	cmp	r2, r4
   19efc:	d9f9      	bls.n	19ef2 <_free_r+0x42>
   19efe:	6819      	ldr	r1, [r3, #0]
   19f00:	1858      	adds	r0, r3, r1
   19f02:	42a0      	cmp	r0, r4
   19f04:	d10b      	bne.n	19f1e <_free_r+0x6e>
   19f06:	6820      	ldr	r0, [r4, #0]
   19f08:	1809      	adds	r1, r1, r0
   19f0a:	1858      	adds	r0, r3, r1
   19f0c:	6019      	str	r1, [r3, #0]
   19f0e:	4282      	cmp	r2, r0
   19f10:	d1e0      	bne.n	19ed4 <_free_r+0x24>
   19f12:	6810      	ldr	r0, [r2, #0]
   19f14:	6852      	ldr	r2, [r2, #4]
   19f16:	1841      	adds	r1, r0, r1
   19f18:	6019      	str	r1, [r3, #0]
   19f1a:	605a      	str	r2, [r3, #4]
   19f1c:	e7da      	b.n	19ed4 <_free_r+0x24>
   19f1e:	42a0      	cmp	r0, r4
   19f20:	d902      	bls.n	19f28 <_free_r+0x78>
   19f22:	230c      	movs	r3, #12
   19f24:	602b      	str	r3, [r5, #0]
   19f26:	e7d5      	b.n	19ed4 <_free_r+0x24>
   19f28:	6821      	ldr	r1, [r4, #0]
   19f2a:	1860      	adds	r0, r4, r1
   19f2c:	4282      	cmp	r2, r0
   19f2e:	d103      	bne.n	19f38 <_free_r+0x88>
   19f30:	6810      	ldr	r0, [r2, #0]
   19f32:	6852      	ldr	r2, [r2, #4]
   19f34:	1841      	adds	r1, r0, r1
   19f36:	6021      	str	r1, [r4, #0]
   19f38:	6062      	str	r2, [r4, #4]
   19f3a:	605c      	str	r4, [r3, #4]
   19f3c:	e7ca      	b.n	19ed4 <_free_r+0x24>
   19f3e:	46c0      	nop			; (mov r8, r8)
   19f40:	20000a88 	.word	0x20000a88

00019f44 <_malloc_r>:
   19f44:	2303      	movs	r3, #3
   19f46:	b570      	push	{r4, r5, r6, lr}
   19f48:	1ccd      	adds	r5, r1, #3
   19f4a:	439d      	bics	r5, r3
   19f4c:	3508      	adds	r5, #8
   19f4e:	0006      	movs	r6, r0
   19f50:	2d0c      	cmp	r5, #12
   19f52:	d21e      	bcs.n	19f92 <_malloc_r+0x4e>
   19f54:	250c      	movs	r5, #12
   19f56:	42a9      	cmp	r1, r5
   19f58:	d81d      	bhi.n	19f96 <_malloc_r+0x52>
   19f5a:	0030      	movs	r0, r6
   19f5c:	f000 fd94 	bl	1aa88 <__malloc_lock>
   19f60:	4a25      	ldr	r2, [pc, #148]	; (19ff8 <_malloc_r+0xb4>)
   19f62:	6814      	ldr	r4, [r2, #0]
   19f64:	0021      	movs	r1, r4
   19f66:	2900      	cmp	r1, #0
   19f68:	d119      	bne.n	19f9e <_malloc_r+0x5a>
   19f6a:	4c24      	ldr	r4, [pc, #144]	; (19ffc <_malloc_r+0xb8>)
   19f6c:	6823      	ldr	r3, [r4, #0]
   19f6e:	2b00      	cmp	r3, #0
   19f70:	d103      	bne.n	19f7a <_malloc_r+0x36>
   19f72:	0030      	movs	r0, r6
   19f74:	f000 f8dc 	bl	1a130 <_sbrk_r>
   19f78:	6020      	str	r0, [r4, #0]
   19f7a:	0029      	movs	r1, r5
   19f7c:	0030      	movs	r0, r6
   19f7e:	f000 f8d7 	bl	1a130 <_sbrk_r>
   19f82:	1c43      	adds	r3, r0, #1
   19f84:	d12c      	bne.n	19fe0 <_malloc_r+0x9c>
   19f86:	230c      	movs	r3, #12
   19f88:	0030      	movs	r0, r6
   19f8a:	6033      	str	r3, [r6, #0]
   19f8c:	f000 fd7d 	bl	1aa8a <__malloc_unlock>
   19f90:	e003      	b.n	19f9a <_malloc_r+0x56>
   19f92:	2d00      	cmp	r5, #0
   19f94:	dadf      	bge.n	19f56 <_malloc_r+0x12>
   19f96:	230c      	movs	r3, #12
   19f98:	6033      	str	r3, [r6, #0]
   19f9a:	2000      	movs	r0, #0
   19f9c:	bd70      	pop	{r4, r5, r6, pc}
   19f9e:	680b      	ldr	r3, [r1, #0]
   19fa0:	1b5b      	subs	r3, r3, r5
   19fa2:	d41a      	bmi.n	19fda <_malloc_r+0x96>
   19fa4:	2b0b      	cmp	r3, #11
   19fa6:	d903      	bls.n	19fb0 <_malloc_r+0x6c>
   19fa8:	600b      	str	r3, [r1, #0]
   19faa:	18cc      	adds	r4, r1, r3
   19fac:	6025      	str	r5, [r4, #0]
   19fae:	e003      	b.n	19fb8 <_malloc_r+0x74>
   19fb0:	428c      	cmp	r4, r1
   19fb2:	d10e      	bne.n	19fd2 <_malloc_r+0x8e>
   19fb4:	6863      	ldr	r3, [r4, #4]
   19fb6:	6013      	str	r3, [r2, #0]
   19fb8:	0030      	movs	r0, r6
   19fba:	f000 fd66 	bl	1aa8a <__malloc_unlock>
   19fbe:	0020      	movs	r0, r4
   19fc0:	2207      	movs	r2, #7
   19fc2:	300b      	adds	r0, #11
   19fc4:	1d23      	adds	r3, r4, #4
   19fc6:	4390      	bics	r0, r2
   19fc8:	1ac3      	subs	r3, r0, r3
   19fca:	d0e7      	beq.n	19f9c <_malloc_r+0x58>
   19fcc:	425a      	negs	r2, r3
   19fce:	50e2      	str	r2, [r4, r3]
   19fd0:	e7e4      	b.n	19f9c <_malloc_r+0x58>
   19fd2:	684b      	ldr	r3, [r1, #4]
   19fd4:	6063      	str	r3, [r4, #4]
   19fd6:	000c      	movs	r4, r1
   19fd8:	e7ee      	b.n	19fb8 <_malloc_r+0x74>
   19fda:	000c      	movs	r4, r1
   19fdc:	6849      	ldr	r1, [r1, #4]
   19fde:	e7c2      	b.n	19f66 <_malloc_r+0x22>
   19fe0:	2303      	movs	r3, #3
   19fe2:	1cc4      	adds	r4, r0, #3
   19fe4:	439c      	bics	r4, r3
   19fe6:	42a0      	cmp	r0, r4
   19fe8:	d0e0      	beq.n	19fac <_malloc_r+0x68>
   19fea:	1a21      	subs	r1, r4, r0
   19fec:	0030      	movs	r0, r6
   19fee:	f000 f89f 	bl	1a130 <_sbrk_r>
   19ff2:	1c43      	adds	r3, r0, #1
   19ff4:	d1da      	bne.n	19fac <_malloc_r+0x68>
   19ff6:	e7c6      	b.n	19f86 <_malloc_r+0x42>
   19ff8:	20000a88 	.word	0x20000a88
   19ffc:	20000a8c 	.word	0x20000a8c

0001a000 <iprintf>:
   1a000:	b40f      	push	{r0, r1, r2, r3}
   1a002:	4b0b      	ldr	r3, [pc, #44]	; (1a030 <iprintf+0x30>)
   1a004:	b513      	push	{r0, r1, r4, lr}
   1a006:	681c      	ldr	r4, [r3, #0]
   1a008:	2c00      	cmp	r4, #0
   1a00a:	d005      	beq.n	1a018 <iprintf+0x18>
   1a00c:	69a3      	ldr	r3, [r4, #24]
   1a00e:	2b00      	cmp	r3, #0
   1a010:	d102      	bne.n	1a018 <iprintf+0x18>
   1a012:	0020      	movs	r0, r4
   1a014:	f000 fc22 	bl	1a85c <__sinit>
   1a018:	ab05      	add	r3, sp, #20
   1a01a:	9a04      	ldr	r2, [sp, #16]
   1a01c:	68a1      	ldr	r1, [r4, #8]
   1a01e:	0020      	movs	r0, r4
   1a020:	9301      	str	r3, [sp, #4]
   1a022:	f000 fec1 	bl	1ada8 <_vfiprintf_r>
   1a026:	bc16      	pop	{r1, r2, r4}
   1a028:	bc08      	pop	{r3}
   1a02a:	b004      	add	sp, #16
   1a02c:	4718      	bx	r3
   1a02e:	46c0      	nop			; (mov r8, r8)
   1a030:	20000534 	.word	0x20000534

0001a034 <putchar>:
   1a034:	4b08      	ldr	r3, [pc, #32]	; (1a058 <putchar+0x24>)
   1a036:	b570      	push	{r4, r5, r6, lr}
   1a038:	681c      	ldr	r4, [r3, #0]
   1a03a:	0005      	movs	r5, r0
   1a03c:	2c00      	cmp	r4, #0
   1a03e:	d005      	beq.n	1a04c <putchar+0x18>
   1a040:	69a3      	ldr	r3, [r4, #24]
   1a042:	2b00      	cmp	r3, #0
   1a044:	d102      	bne.n	1a04c <putchar+0x18>
   1a046:	0020      	movs	r0, r4
   1a048:	f000 fc08 	bl	1a85c <__sinit>
   1a04c:	0029      	movs	r1, r5
   1a04e:	68a2      	ldr	r2, [r4, #8]
   1a050:	0020      	movs	r0, r4
   1a052:	f001 f94d 	bl	1b2f0 <_putc_r>
   1a056:	bd70      	pop	{r4, r5, r6, pc}
   1a058:	20000534 	.word	0x20000534

0001a05c <_puts_r>:
   1a05c:	b570      	push	{r4, r5, r6, lr}
   1a05e:	0005      	movs	r5, r0
   1a060:	000e      	movs	r6, r1
   1a062:	2800      	cmp	r0, #0
   1a064:	d004      	beq.n	1a070 <_puts_r+0x14>
   1a066:	6983      	ldr	r3, [r0, #24]
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d101      	bne.n	1a070 <_puts_r+0x14>
   1a06c:	f000 fbf6 	bl	1a85c <__sinit>
   1a070:	69ab      	ldr	r3, [r5, #24]
   1a072:	68ac      	ldr	r4, [r5, #8]
   1a074:	2b00      	cmp	r3, #0
   1a076:	d102      	bne.n	1a07e <_puts_r+0x22>
   1a078:	0028      	movs	r0, r5
   1a07a:	f000 fbef 	bl	1a85c <__sinit>
   1a07e:	4b24      	ldr	r3, [pc, #144]	; (1a110 <_puts_r+0xb4>)
   1a080:	429c      	cmp	r4, r3
   1a082:	d10f      	bne.n	1a0a4 <_puts_r+0x48>
   1a084:	686c      	ldr	r4, [r5, #4]
   1a086:	89a3      	ldrh	r3, [r4, #12]
   1a088:	071b      	lsls	r3, r3, #28
   1a08a:	d502      	bpl.n	1a092 <_puts_r+0x36>
   1a08c:	6923      	ldr	r3, [r4, #16]
   1a08e:	2b00      	cmp	r3, #0
   1a090:	d120      	bne.n	1a0d4 <_puts_r+0x78>
   1a092:	0021      	movs	r1, r4
   1a094:	0028      	movs	r0, r5
   1a096:	f000 fa61 	bl	1a55c <__swsetup_r>
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d01a      	beq.n	1a0d4 <_puts_r+0x78>
   1a09e:	2001      	movs	r0, #1
   1a0a0:	4240      	negs	r0, r0
   1a0a2:	bd70      	pop	{r4, r5, r6, pc}
   1a0a4:	4b1b      	ldr	r3, [pc, #108]	; (1a114 <_puts_r+0xb8>)
   1a0a6:	429c      	cmp	r4, r3
   1a0a8:	d101      	bne.n	1a0ae <_puts_r+0x52>
   1a0aa:	68ac      	ldr	r4, [r5, #8]
   1a0ac:	e7eb      	b.n	1a086 <_puts_r+0x2a>
   1a0ae:	4b1a      	ldr	r3, [pc, #104]	; (1a118 <_puts_r+0xbc>)
   1a0b0:	429c      	cmp	r4, r3
   1a0b2:	d1e8      	bne.n	1a086 <_puts_r+0x2a>
   1a0b4:	68ec      	ldr	r4, [r5, #12]
   1a0b6:	e7e6      	b.n	1a086 <_puts_r+0x2a>
   1a0b8:	3b01      	subs	r3, #1
   1a0ba:	3601      	adds	r6, #1
   1a0bc:	60a3      	str	r3, [r4, #8]
   1a0be:	2b00      	cmp	r3, #0
   1a0c0:	da04      	bge.n	1a0cc <_puts_r+0x70>
   1a0c2:	69a2      	ldr	r2, [r4, #24]
   1a0c4:	4293      	cmp	r3, r2
   1a0c6:	db16      	blt.n	1a0f6 <_puts_r+0x9a>
   1a0c8:	290a      	cmp	r1, #10
   1a0ca:	d014      	beq.n	1a0f6 <_puts_r+0x9a>
   1a0cc:	6823      	ldr	r3, [r4, #0]
   1a0ce:	1c5a      	adds	r2, r3, #1
   1a0d0:	6022      	str	r2, [r4, #0]
   1a0d2:	7019      	strb	r1, [r3, #0]
   1a0d4:	7831      	ldrb	r1, [r6, #0]
   1a0d6:	68a3      	ldr	r3, [r4, #8]
   1a0d8:	2900      	cmp	r1, #0
   1a0da:	d1ed      	bne.n	1a0b8 <_puts_r+0x5c>
   1a0dc:	3b01      	subs	r3, #1
   1a0de:	60a3      	str	r3, [r4, #8]
   1a0e0:	2b00      	cmp	r3, #0
   1a0e2:	da0f      	bge.n	1a104 <_puts_r+0xa8>
   1a0e4:	0022      	movs	r2, r4
   1a0e6:	310a      	adds	r1, #10
   1a0e8:	0028      	movs	r0, r5
   1a0ea:	f000 f9cd 	bl	1a488 <__swbuf_r>
   1a0ee:	1c43      	adds	r3, r0, #1
   1a0f0:	d0d5      	beq.n	1a09e <_puts_r+0x42>
   1a0f2:	200a      	movs	r0, #10
   1a0f4:	e7d5      	b.n	1a0a2 <_puts_r+0x46>
   1a0f6:	0022      	movs	r2, r4
   1a0f8:	0028      	movs	r0, r5
   1a0fa:	f000 f9c5 	bl	1a488 <__swbuf_r>
   1a0fe:	1c43      	adds	r3, r0, #1
   1a100:	d1e8      	bne.n	1a0d4 <_puts_r+0x78>
   1a102:	e7cc      	b.n	1a09e <_puts_r+0x42>
   1a104:	200a      	movs	r0, #10
   1a106:	6823      	ldr	r3, [r4, #0]
   1a108:	1c5a      	adds	r2, r3, #1
   1a10a:	6022      	str	r2, [r4, #0]
   1a10c:	7018      	strb	r0, [r3, #0]
   1a10e:	e7c8      	b.n	1a0a2 <_puts_r+0x46>
   1a110:	0001d59c 	.word	0x0001d59c
   1a114:	0001d5bc 	.word	0x0001d5bc
   1a118:	0001d57c 	.word	0x0001d57c

0001a11c <puts>:
   1a11c:	b510      	push	{r4, lr}
   1a11e:	4b03      	ldr	r3, [pc, #12]	; (1a12c <puts+0x10>)
   1a120:	0001      	movs	r1, r0
   1a122:	6818      	ldr	r0, [r3, #0]
   1a124:	f7ff ff9a 	bl	1a05c <_puts_r>
   1a128:	bd10      	pop	{r4, pc}
   1a12a:	46c0      	nop			; (mov r8, r8)
   1a12c:	20000534 	.word	0x20000534

0001a130 <_sbrk_r>:
   1a130:	2300      	movs	r3, #0
   1a132:	b570      	push	{r4, r5, r6, lr}
   1a134:	4c06      	ldr	r4, [pc, #24]	; (1a150 <_sbrk_r+0x20>)
   1a136:	0005      	movs	r5, r0
   1a138:	0008      	movs	r0, r1
   1a13a:	6023      	str	r3, [r4, #0]
   1a13c:	f7fb fe4a 	bl	15dd4 <_sbrk>
   1a140:	1c43      	adds	r3, r0, #1
   1a142:	d103      	bne.n	1a14c <_sbrk_r+0x1c>
   1a144:	6823      	ldr	r3, [r4, #0]
   1a146:	2b00      	cmp	r3, #0
   1a148:	d000      	beq.n	1a14c <_sbrk_r+0x1c>
   1a14a:	602b      	str	r3, [r5, #0]
   1a14c:	bd70      	pop	{r4, r5, r6, pc}
   1a14e:	46c0      	nop			; (mov r8, r8)
   1a150:	20001854 	.word	0x20001854

0001a154 <setbuf>:
   1a154:	424a      	negs	r2, r1
   1a156:	414a      	adcs	r2, r1
   1a158:	2380      	movs	r3, #128	; 0x80
   1a15a:	b510      	push	{r4, lr}
   1a15c:	0052      	lsls	r2, r2, #1
   1a15e:	00db      	lsls	r3, r3, #3
   1a160:	f000 f802 	bl	1a168 <setvbuf>
   1a164:	bd10      	pop	{r4, pc}
	...

0001a168 <setvbuf>:
   1a168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a16a:	001d      	movs	r5, r3
   1a16c:	4b4f      	ldr	r3, [pc, #316]	; (1a2ac <setvbuf+0x144>)
   1a16e:	b085      	sub	sp, #20
   1a170:	681e      	ldr	r6, [r3, #0]
   1a172:	0004      	movs	r4, r0
   1a174:	000f      	movs	r7, r1
   1a176:	9200      	str	r2, [sp, #0]
   1a178:	2e00      	cmp	r6, #0
   1a17a:	d005      	beq.n	1a188 <setvbuf+0x20>
   1a17c:	69b3      	ldr	r3, [r6, #24]
   1a17e:	2b00      	cmp	r3, #0
   1a180:	d102      	bne.n	1a188 <setvbuf+0x20>
   1a182:	0030      	movs	r0, r6
   1a184:	f000 fb6a 	bl	1a85c <__sinit>
   1a188:	4b49      	ldr	r3, [pc, #292]	; (1a2b0 <setvbuf+0x148>)
   1a18a:	429c      	cmp	r4, r3
   1a18c:	d150      	bne.n	1a230 <setvbuf+0xc8>
   1a18e:	6874      	ldr	r4, [r6, #4]
   1a190:	9b00      	ldr	r3, [sp, #0]
   1a192:	2b02      	cmp	r3, #2
   1a194:	d005      	beq.n	1a1a2 <setvbuf+0x3a>
   1a196:	2b01      	cmp	r3, #1
   1a198:	d900      	bls.n	1a19c <setvbuf+0x34>
   1a19a:	e084      	b.n	1a2a6 <setvbuf+0x13e>
   1a19c:	2d00      	cmp	r5, #0
   1a19e:	da00      	bge.n	1a1a2 <setvbuf+0x3a>
   1a1a0:	e081      	b.n	1a2a6 <setvbuf+0x13e>
   1a1a2:	0021      	movs	r1, r4
   1a1a4:	0030      	movs	r0, r6
   1a1a6:	f000 faeb 	bl	1a780 <_fflush_r>
   1a1aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1a1ac:	2900      	cmp	r1, #0
   1a1ae:	d008      	beq.n	1a1c2 <setvbuf+0x5a>
   1a1b0:	0023      	movs	r3, r4
   1a1b2:	3344      	adds	r3, #68	; 0x44
   1a1b4:	4299      	cmp	r1, r3
   1a1b6:	d002      	beq.n	1a1be <setvbuf+0x56>
   1a1b8:	0030      	movs	r0, r6
   1a1ba:	f7ff fe79 	bl	19eb0 <_free_r>
   1a1be:	2300      	movs	r3, #0
   1a1c0:	6363      	str	r3, [r4, #52]	; 0x34
   1a1c2:	2300      	movs	r3, #0
   1a1c4:	61a3      	str	r3, [r4, #24]
   1a1c6:	6063      	str	r3, [r4, #4]
   1a1c8:	89a3      	ldrh	r3, [r4, #12]
   1a1ca:	061b      	lsls	r3, r3, #24
   1a1cc:	d503      	bpl.n	1a1d6 <setvbuf+0x6e>
   1a1ce:	6921      	ldr	r1, [r4, #16]
   1a1d0:	0030      	movs	r0, r6
   1a1d2:	f7ff fe6d 	bl	19eb0 <_free_r>
   1a1d6:	89a3      	ldrh	r3, [r4, #12]
   1a1d8:	4a36      	ldr	r2, [pc, #216]	; (1a2b4 <setvbuf+0x14c>)
   1a1da:	4013      	ands	r3, r2
   1a1dc:	81a3      	strh	r3, [r4, #12]
   1a1de:	9b00      	ldr	r3, [sp, #0]
   1a1e0:	2b02      	cmp	r3, #2
   1a1e2:	d05a      	beq.n	1a29a <setvbuf+0x132>
   1a1e4:	ab03      	add	r3, sp, #12
   1a1e6:	aa02      	add	r2, sp, #8
   1a1e8:	0021      	movs	r1, r4
   1a1ea:	0030      	movs	r0, r6
   1a1ec:	f000 fbe0 	bl	1a9b0 <__swhatbuf_r>
   1a1f0:	89a3      	ldrh	r3, [r4, #12]
   1a1f2:	4318      	orrs	r0, r3
   1a1f4:	81a0      	strh	r0, [r4, #12]
   1a1f6:	2d00      	cmp	r5, #0
   1a1f8:	d124      	bne.n	1a244 <setvbuf+0xdc>
   1a1fa:	9d02      	ldr	r5, [sp, #8]
   1a1fc:	0028      	movs	r0, r5
   1a1fe:	f7ff fe11 	bl	19e24 <malloc>
   1a202:	9501      	str	r5, [sp, #4]
   1a204:	1e07      	subs	r7, r0, #0
   1a206:	d142      	bne.n	1a28e <setvbuf+0x126>
   1a208:	9b02      	ldr	r3, [sp, #8]
   1a20a:	9301      	str	r3, [sp, #4]
   1a20c:	42ab      	cmp	r3, r5
   1a20e:	d139      	bne.n	1a284 <setvbuf+0x11c>
   1a210:	2001      	movs	r0, #1
   1a212:	4240      	negs	r0, r0
   1a214:	2302      	movs	r3, #2
   1a216:	89a2      	ldrh	r2, [r4, #12]
   1a218:	4313      	orrs	r3, r2
   1a21a:	81a3      	strh	r3, [r4, #12]
   1a21c:	2300      	movs	r3, #0
   1a21e:	60a3      	str	r3, [r4, #8]
   1a220:	0023      	movs	r3, r4
   1a222:	3347      	adds	r3, #71	; 0x47
   1a224:	6023      	str	r3, [r4, #0]
   1a226:	6123      	str	r3, [r4, #16]
   1a228:	2301      	movs	r3, #1
   1a22a:	6163      	str	r3, [r4, #20]
   1a22c:	b005      	add	sp, #20
   1a22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a230:	4b21      	ldr	r3, [pc, #132]	; (1a2b8 <setvbuf+0x150>)
   1a232:	429c      	cmp	r4, r3
   1a234:	d101      	bne.n	1a23a <setvbuf+0xd2>
   1a236:	68b4      	ldr	r4, [r6, #8]
   1a238:	e7aa      	b.n	1a190 <setvbuf+0x28>
   1a23a:	4b20      	ldr	r3, [pc, #128]	; (1a2bc <setvbuf+0x154>)
   1a23c:	429c      	cmp	r4, r3
   1a23e:	d1a7      	bne.n	1a190 <setvbuf+0x28>
   1a240:	68f4      	ldr	r4, [r6, #12]
   1a242:	e7a5      	b.n	1a190 <setvbuf+0x28>
   1a244:	2f00      	cmp	r7, #0
   1a246:	d0d9      	beq.n	1a1fc <setvbuf+0x94>
   1a248:	69b3      	ldr	r3, [r6, #24]
   1a24a:	2b00      	cmp	r3, #0
   1a24c:	d102      	bne.n	1a254 <setvbuf+0xec>
   1a24e:	0030      	movs	r0, r6
   1a250:	f000 fb04 	bl	1a85c <__sinit>
   1a254:	9b00      	ldr	r3, [sp, #0]
   1a256:	2b01      	cmp	r3, #1
   1a258:	d103      	bne.n	1a262 <setvbuf+0xfa>
   1a25a:	89a3      	ldrh	r3, [r4, #12]
   1a25c:	9a00      	ldr	r2, [sp, #0]
   1a25e:	431a      	orrs	r2, r3
   1a260:	81a2      	strh	r2, [r4, #12]
   1a262:	2008      	movs	r0, #8
   1a264:	89a3      	ldrh	r3, [r4, #12]
   1a266:	6027      	str	r7, [r4, #0]
   1a268:	6127      	str	r7, [r4, #16]
   1a26a:	6165      	str	r5, [r4, #20]
   1a26c:	4018      	ands	r0, r3
   1a26e:	d018      	beq.n	1a2a2 <setvbuf+0x13a>
   1a270:	2001      	movs	r0, #1
   1a272:	4018      	ands	r0, r3
   1a274:	2300      	movs	r3, #0
   1a276:	4298      	cmp	r0, r3
   1a278:	d011      	beq.n	1a29e <setvbuf+0x136>
   1a27a:	426d      	negs	r5, r5
   1a27c:	60a3      	str	r3, [r4, #8]
   1a27e:	61a5      	str	r5, [r4, #24]
   1a280:	0018      	movs	r0, r3
   1a282:	e7d3      	b.n	1a22c <setvbuf+0xc4>
   1a284:	9801      	ldr	r0, [sp, #4]
   1a286:	f7ff fdcd 	bl	19e24 <malloc>
   1a28a:	1e07      	subs	r7, r0, #0
   1a28c:	d0c0      	beq.n	1a210 <setvbuf+0xa8>
   1a28e:	2380      	movs	r3, #128	; 0x80
   1a290:	89a2      	ldrh	r2, [r4, #12]
   1a292:	9d01      	ldr	r5, [sp, #4]
   1a294:	4313      	orrs	r3, r2
   1a296:	81a3      	strh	r3, [r4, #12]
   1a298:	e7d6      	b.n	1a248 <setvbuf+0xe0>
   1a29a:	2000      	movs	r0, #0
   1a29c:	e7ba      	b.n	1a214 <setvbuf+0xac>
   1a29e:	60a5      	str	r5, [r4, #8]
   1a2a0:	e7c4      	b.n	1a22c <setvbuf+0xc4>
   1a2a2:	60a0      	str	r0, [r4, #8]
   1a2a4:	e7c2      	b.n	1a22c <setvbuf+0xc4>
   1a2a6:	2001      	movs	r0, #1
   1a2a8:	4240      	negs	r0, r0
   1a2aa:	e7bf      	b.n	1a22c <setvbuf+0xc4>
   1a2ac:	20000534 	.word	0x20000534
   1a2b0:	0001d59c 	.word	0x0001d59c
   1a2b4:	fffff35c 	.word	0xfffff35c
   1a2b8:	0001d5bc 	.word	0x0001d5bc
   1a2bc:	0001d57c 	.word	0x0001d57c

0001a2c0 <siprintf>:
   1a2c0:	b40e      	push	{r1, r2, r3}
   1a2c2:	b510      	push	{r4, lr}
   1a2c4:	b09d      	sub	sp, #116	; 0x74
   1a2c6:	a902      	add	r1, sp, #8
   1a2c8:	9002      	str	r0, [sp, #8]
   1a2ca:	6108      	str	r0, [r1, #16]
   1a2cc:	480b      	ldr	r0, [pc, #44]	; (1a2fc <siprintf+0x3c>)
   1a2ce:	2482      	movs	r4, #130	; 0x82
   1a2d0:	6088      	str	r0, [r1, #8]
   1a2d2:	6148      	str	r0, [r1, #20]
   1a2d4:	2001      	movs	r0, #1
   1a2d6:	4240      	negs	r0, r0
   1a2d8:	ab1f      	add	r3, sp, #124	; 0x7c
   1a2da:	81c8      	strh	r0, [r1, #14]
   1a2dc:	4808      	ldr	r0, [pc, #32]	; (1a300 <siprintf+0x40>)
   1a2de:	cb04      	ldmia	r3!, {r2}
   1a2e0:	00a4      	lsls	r4, r4, #2
   1a2e2:	6800      	ldr	r0, [r0, #0]
   1a2e4:	9301      	str	r3, [sp, #4]
   1a2e6:	818c      	strh	r4, [r1, #12]
   1a2e8:	f000 fc32 	bl	1ab50 <_svfiprintf_r>
   1a2ec:	2300      	movs	r3, #0
   1a2ee:	9a02      	ldr	r2, [sp, #8]
   1a2f0:	7013      	strb	r3, [r2, #0]
   1a2f2:	b01d      	add	sp, #116	; 0x74
   1a2f4:	bc10      	pop	{r4}
   1a2f6:	bc08      	pop	{r3}
   1a2f8:	b003      	add	sp, #12
   1a2fa:	4718      	bx	r3
   1a2fc:	7fffffff 	.word	0x7fffffff
   1a300:	20000534 	.word	0x20000534

0001a304 <__sread>:
   1a304:	b570      	push	{r4, r5, r6, lr}
   1a306:	000c      	movs	r4, r1
   1a308:	250e      	movs	r5, #14
   1a30a:	5f49      	ldrsh	r1, [r1, r5]
   1a30c:	f001 f826 	bl	1b35c <_read_r>
   1a310:	2800      	cmp	r0, #0
   1a312:	db03      	blt.n	1a31c <__sread+0x18>
   1a314:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a316:	181b      	adds	r3, r3, r0
   1a318:	6563      	str	r3, [r4, #84]	; 0x54
   1a31a:	bd70      	pop	{r4, r5, r6, pc}
   1a31c:	89a3      	ldrh	r3, [r4, #12]
   1a31e:	4a02      	ldr	r2, [pc, #8]	; (1a328 <__sread+0x24>)
   1a320:	4013      	ands	r3, r2
   1a322:	81a3      	strh	r3, [r4, #12]
   1a324:	e7f9      	b.n	1a31a <__sread+0x16>
   1a326:	46c0      	nop			; (mov r8, r8)
   1a328:	ffffefff 	.word	0xffffefff

0001a32c <__swrite>:
   1a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a32e:	001f      	movs	r7, r3
   1a330:	898b      	ldrh	r3, [r1, #12]
   1a332:	0005      	movs	r5, r0
   1a334:	000c      	movs	r4, r1
   1a336:	0016      	movs	r6, r2
   1a338:	05db      	lsls	r3, r3, #23
   1a33a:	d505      	bpl.n	1a348 <__swrite+0x1c>
   1a33c:	230e      	movs	r3, #14
   1a33e:	5ec9      	ldrsh	r1, [r1, r3]
   1a340:	2200      	movs	r2, #0
   1a342:	2302      	movs	r3, #2
   1a344:	f000 fb20 	bl	1a988 <_lseek_r>
   1a348:	89a3      	ldrh	r3, [r4, #12]
   1a34a:	4a05      	ldr	r2, [pc, #20]	; (1a360 <__swrite+0x34>)
   1a34c:	0028      	movs	r0, r5
   1a34e:	4013      	ands	r3, r2
   1a350:	81a3      	strh	r3, [r4, #12]
   1a352:	0032      	movs	r2, r6
   1a354:	230e      	movs	r3, #14
   1a356:	5ee1      	ldrsh	r1, [r4, r3]
   1a358:	003b      	movs	r3, r7
   1a35a:	f000 f8eb 	bl	1a534 <_write_r>
   1a35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a360:	ffffefff 	.word	0xffffefff

0001a364 <__sseek>:
   1a364:	b570      	push	{r4, r5, r6, lr}
   1a366:	000c      	movs	r4, r1
   1a368:	250e      	movs	r5, #14
   1a36a:	5f49      	ldrsh	r1, [r1, r5]
   1a36c:	f000 fb0c 	bl	1a988 <_lseek_r>
   1a370:	89a3      	ldrh	r3, [r4, #12]
   1a372:	1c42      	adds	r2, r0, #1
   1a374:	d103      	bne.n	1a37e <__sseek+0x1a>
   1a376:	4a05      	ldr	r2, [pc, #20]	; (1a38c <__sseek+0x28>)
   1a378:	4013      	ands	r3, r2
   1a37a:	81a3      	strh	r3, [r4, #12]
   1a37c:	bd70      	pop	{r4, r5, r6, pc}
   1a37e:	2280      	movs	r2, #128	; 0x80
   1a380:	0152      	lsls	r2, r2, #5
   1a382:	4313      	orrs	r3, r2
   1a384:	81a3      	strh	r3, [r4, #12]
   1a386:	6560      	str	r0, [r4, #84]	; 0x54
   1a388:	e7f8      	b.n	1a37c <__sseek+0x18>
   1a38a:	46c0      	nop			; (mov r8, r8)
   1a38c:	ffffefff 	.word	0xffffefff

0001a390 <__sclose>:
   1a390:	b510      	push	{r4, lr}
   1a392:	230e      	movs	r3, #14
   1a394:	5ec9      	ldrsh	r1, [r1, r3]
   1a396:	f000 f957 	bl	1a648 <_close_r>
   1a39a:	bd10      	pop	{r4, pc}

0001a39c <strcat>:
   1a39c:	0002      	movs	r2, r0
   1a39e:	b510      	push	{r4, lr}
   1a3a0:	7813      	ldrb	r3, [r2, #0]
   1a3a2:	2b00      	cmp	r3, #0
   1a3a4:	d105      	bne.n	1a3b2 <strcat+0x16>
   1a3a6:	5ccc      	ldrb	r4, [r1, r3]
   1a3a8:	54d4      	strb	r4, [r2, r3]
   1a3aa:	3301      	adds	r3, #1
   1a3ac:	2c00      	cmp	r4, #0
   1a3ae:	d1fa      	bne.n	1a3a6 <strcat+0xa>
   1a3b0:	bd10      	pop	{r4, pc}
   1a3b2:	3201      	adds	r2, #1
   1a3b4:	e7f4      	b.n	1a3a0 <strcat+0x4>

0001a3b6 <strchr>:
   1a3b6:	b2c9      	uxtb	r1, r1
   1a3b8:	7803      	ldrb	r3, [r0, #0]
   1a3ba:	2b00      	cmp	r3, #0
   1a3bc:	d004      	beq.n	1a3c8 <strchr+0x12>
   1a3be:	4299      	cmp	r1, r3
   1a3c0:	d100      	bne.n	1a3c4 <strchr+0xe>
   1a3c2:	4770      	bx	lr
   1a3c4:	3001      	adds	r0, #1
   1a3c6:	e7f7      	b.n	1a3b8 <strchr+0x2>
   1a3c8:	424b      	negs	r3, r1
   1a3ca:	4159      	adcs	r1, r3
   1a3cc:	4249      	negs	r1, r1
   1a3ce:	4008      	ands	r0, r1
   1a3d0:	e7f7      	b.n	1a3c2 <strchr+0xc>

0001a3d2 <strcpy>:
   1a3d2:	1c03      	adds	r3, r0, #0
   1a3d4:	780a      	ldrb	r2, [r1, #0]
   1a3d6:	3101      	adds	r1, #1
   1a3d8:	701a      	strb	r2, [r3, #0]
   1a3da:	3301      	adds	r3, #1
   1a3dc:	2a00      	cmp	r2, #0
   1a3de:	d1f9      	bne.n	1a3d4 <strcpy+0x2>
   1a3e0:	4770      	bx	lr

0001a3e2 <strlen>:
   1a3e2:	2300      	movs	r3, #0
   1a3e4:	5cc2      	ldrb	r2, [r0, r3]
   1a3e6:	3301      	adds	r3, #1
   1a3e8:	2a00      	cmp	r2, #0
   1a3ea:	d1fb      	bne.n	1a3e4 <strlen+0x2>
   1a3ec:	1e58      	subs	r0, r3, #1
   1a3ee:	4770      	bx	lr

0001a3f0 <strncmp>:
   1a3f0:	2300      	movs	r3, #0
   1a3f2:	b530      	push	{r4, r5, lr}
   1a3f4:	429a      	cmp	r2, r3
   1a3f6:	d00a      	beq.n	1a40e <strncmp+0x1e>
   1a3f8:	3a01      	subs	r2, #1
   1a3fa:	5cc4      	ldrb	r4, [r0, r3]
   1a3fc:	5ccd      	ldrb	r5, [r1, r3]
   1a3fe:	42ac      	cmp	r4, r5
   1a400:	d104      	bne.n	1a40c <strncmp+0x1c>
   1a402:	429a      	cmp	r2, r3
   1a404:	d002      	beq.n	1a40c <strncmp+0x1c>
   1a406:	3301      	adds	r3, #1
   1a408:	2c00      	cmp	r4, #0
   1a40a:	d1f6      	bne.n	1a3fa <strncmp+0xa>
   1a40c:	1b63      	subs	r3, r4, r5
   1a40e:	0018      	movs	r0, r3
   1a410:	bd30      	pop	{r4, r5, pc}
	...

0001a414 <__utoa>:
   1a414:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a416:	0017      	movs	r7, r2
   1a418:	b08f      	sub	sp, #60	; 0x3c
   1a41a:	2225      	movs	r2, #37	; 0x25
   1a41c:	0006      	movs	r6, r0
   1a41e:	000d      	movs	r5, r1
   1a420:	a804      	add	r0, sp, #16
   1a422:	4918      	ldr	r1, [pc, #96]	; (1a484 <__utoa+0x70>)
   1a424:	f7ff fd21 	bl	19e6a <memcpy>
   1a428:	aa04      	add	r2, sp, #16
   1a42a:	1ebb      	subs	r3, r7, #2
   1a42c:	2400      	movs	r4, #0
   1a42e:	9203      	str	r2, [sp, #12]
   1a430:	2b22      	cmp	r3, #34	; 0x22
   1a432:	d905      	bls.n	1a440 <__utoa+0x2c>
   1a434:	702c      	strb	r4, [r5, #0]
   1a436:	0025      	movs	r5, r4
   1a438:	0028      	movs	r0, r5
   1a43a:	b00f      	add	sp, #60	; 0x3c
   1a43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a43e:	9c01      	ldr	r4, [sp, #4]
   1a440:	1c63      	adds	r3, r4, #1
   1a442:	9301      	str	r3, [sp, #4]
   1a444:	18eb      	adds	r3, r5, r3
   1a446:	9300      	str	r3, [sp, #0]
   1a448:	0030      	movs	r0, r6
   1a44a:	3b01      	subs	r3, #1
   1a44c:	0039      	movs	r1, r7
   1a44e:	9302      	str	r3, [sp, #8]
   1a450:	f7fd fdaa 	bl	17fa8 <__aeabi_uidivmod>
   1a454:	9b03      	ldr	r3, [sp, #12]
   1a456:	9a02      	ldr	r2, [sp, #8]
   1a458:	5c5b      	ldrb	r3, [r3, r1]
   1a45a:	0030      	movs	r0, r6
   1a45c:	7013      	strb	r3, [r2, #0]
   1a45e:	0039      	movs	r1, r7
   1a460:	f7fd fd1c 	bl	17e9c <__udivsi3>
   1a464:	1e06      	subs	r6, r0, #0
   1a466:	d1ea      	bne.n	1a43e <__utoa+0x2a>
   1a468:	9b00      	ldr	r3, [sp, #0]
   1a46a:	7018      	strb	r0, [r3, #0]
   1a46c:	002b      	movs	r3, r5
   1a46e:	1b5a      	subs	r2, r3, r5
   1a470:	4294      	cmp	r4, r2
   1a472:	dde1      	ble.n	1a438 <__utoa+0x24>
   1a474:	781a      	ldrb	r2, [r3, #0]
   1a476:	5d29      	ldrb	r1, [r5, r4]
   1a478:	7019      	strb	r1, [r3, #0]
   1a47a:	552a      	strb	r2, [r5, r4]
   1a47c:	3301      	adds	r3, #1
   1a47e:	3c01      	subs	r4, #1
   1a480:	e7f5      	b.n	1a46e <__utoa+0x5a>
   1a482:	46c0      	nop			; (mov r8, r8)
   1a484:	0001d554 	.word	0x0001d554

0001a488 <__swbuf_r>:
   1a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a48a:	0005      	movs	r5, r0
   1a48c:	000e      	movs	r6, r1
   1a48e:	0014      	movs	r4, r2
   1a490:	2800      	cmp	r0, #0
   1a492:	d004      	beq.n	1a49e <__swbuf_r+0x16>
   1a494:	6983      	ldr	r3, [r0, #24]
   1a496:	2b00      	cmp	r3, #0
   1a498:	d101      	bne.n	1a49e <__swbuf_r+0x16>
   1a49a:	f000 f9df 	bl	1a85c <__sinit>
   1a49e:	4b22      	ldr	r3, [pc, #136]	; (1a528 <__swbuf_r+0xa0>)
   1a4a0:	429c      	cmp	r4, r3
   1a4a2:	d12d      	bne.n	1a500 <__swbuf_r+0x78>
   1a4a4:	686c      	ldr	r4, [r5, #4]
   1a4a6:	69a3      	ldr	r3, [r4, #24]
   1a4a8:	60a3      	str	r3, [r4, #8]
   1a4aa:	89a3      	ldrh	r3, [r4, #12]
   1a4ac:	071b      	lsls	r3, r3, #28
   1a4ae:	d531      	bpl.n	1a514 <__swbuf_r+0x8c>
   1a4b0:	6923      	ldr	r3, [r4, #16]
   1a4b2:	2b00      	cmp	r3, #0
   1a4b4:	d02e      	beq.n	1a514 <__swbuf_r+0x8c>
   1a4b6:	6823      	ldr	r3, [r4, #0]
   1a4b8:	6922      	ldr	r2, [r4, #16]
   1a4ba:	b2f7      	uxtb	r7, r6
   1a4bc:	1a98      	subs	r0, r3, r2
   1a4be:	6963      	ldr	r3, [r4, #20]
   1a4c0:	b2f6      	uxtb	r6, r6
   1a4c2:	4298      	cmp	r0, r3
   1a4c4:	db05      	blt.n	1a4d2 <__swbuf_r+0x4a>
   1a4c6:	0021      	movs	r1, r4
   1a4c8:	0028      	movs	r0, r5
   1a4ca:	f000 f959 	bl	1a780 <_fflush_r>
   1a4ce:	2800      	cmp	r0, #0
   1a4d0:	d126      	bne.n	1a520 <__swbuf_r+0x98>
   1a4d2:	68a3      	ldr	r3, [r4, #8]
   1a4d4:	3001      	adds	r0, #1
   1a4d6:	3b01      	subs	r3, #1
   1a4d8:	60a3      	str	r3, [r4, #8]
   1a4da:	6823      	ldr	r3, [r4, #0]
   1a4dc:	1c5a      	adds	r2, r3, #1
   1a4de:	6022      	str	r2, [r4, #0]
   1a4e0:	701f      	strb	r7, [r3, #0]
   1a4e2:	6963      	ldr	r3, [r4, #20]
   1a4e4:	4298      	cmp	r0, r3
   1a4e6:	d004      	beq.n	1a4f2 <__swbuf_r+0x6a>
   1a4e8:	89a3      	ldrh	r3, [r4, #12]
   1a4ea:	07db      	lsls	r3, r3, #31
   1a4ec:	d51a      	bpl.n	1a524 <__swbuf_r+0x9c>
   1a4ee:	2e0a      	cmp	r6, #10
   1a4f0:	d118      	bne.n	1a524 <__swbuf_r+0x9c>
   1a4f2:	0021      	movs	r1, r4
   1a4f4:	0028      	movs	r0, r5
   1a4f6:	f000 f943 	bl	1a780 <_fflush_r>
   1a4fa:	2800      	cmp	r0, #0
   1a4fc:	d012      	beq.n	1a524 <__swbuf_r+0x9c>
   1a4fe:	e00f      	b.n	1a520 <__swbuf_r+0x98>
   1a500:	4b0a      	ldr	r3, [pc, #40]	; (1a52c <__swbuf_r+0xa4>)
   1a502:	429c      	cmp	r4, r3
   1a504:	d101      	bne.n	1a50a <__swbuf_r+0x82>
   1a506:	68ac      	ldr	r4, [r5, #8]
   1a508:	e7cd      	b.n	1a4a6 <__swbuf_r+0x1e>
   1a50a:	4b09      	ldr	r3, [pc, #36]	; (1a530 <__swbuf_r+0xa8>)
   1a50c:	429c      	cmp	r4, r3
   1a50e:	d1ca      	bne.n	1a4a6 <__swbuf_r+0x1e>
   1a510:	68ec      	ldr	r4, [r5, #12]
   1a512:	e7c8      	b.n	1a4a6 <__swbuf_r+0x1e>
   1a514:	0021      	movs	r1, r4
   1a516:	0028      	movs	r0, r5
   1a518:	f000 f820 	bl	1a55c <__swsetup_r>
   1a51c:	2800      	cmp	r0, #0
   1a51e:	d0ca      	beq.n	1a4b6 <__swbuf_r+0x2e>
   1a520:	2601      	movs	r6, #1
   1a522:	4276      	negs	r6, r6
   1a524:	0030      	movs	r0, r6
   1a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a528:	0001d59c 	.word	0x0001d59c
   1a52c:	0001d5bc 	.word	0x0001d5bc
   1a530:	0001d57c 	.word	0x0001d57c

0001a534 <_write_r>:
   1a534:	b570      	push	{r4, r5, r6, lr}
   1a536:	0005      	movs	r5, r0
   1a538:	0008      	movs	r0, r1
   1a53a:	0011      	movs	r1, r2
   1a53c:	2200      	movs	r2, #0
   1a53e:	4c06      	ldr	r4, [pc, #24]	; (1a558 <_write_r+0x24>)
   1a540:	6022      	str	r2, [r4, #0]
   1a542:	001a      	movs	r2, r3
   1a544:	f7fb fc10 	bl	15d68 <_write>
   1a548:	1c43      	adds	r3, r0, #1
   1a54a:	d103      	bne.n	1a554 <_write_r+0x20>
   1a54c:	6823      	ldr	r3, [r4, #0]
   1a54e:	2b00      	cmp	r3, #0
   1a550:	d000      	beq.n	1a554 <_write_r+0x20>
   1a552:	602b      	str	r3, [r5, #0]
   1a554:	bd70      	pop	{r4, r5, r6, pc}
   1a556:	46c0      	nop			; (mov r8, r8)
   1a558:	20001854 	.word	0x20001854

0001a55c <__swsetup_r>:
   1a55c:	4b36      	ldr	r3, [pc, #216]	; (1a638 <__swsetup_r+0xdc>)
   1a55e:	b570      	push	{r4, r5, r6, lr}
   1a560:	681d      	ldr	r5, [r3, #0]
   1a562:	0006      	movs	r6, r0
   1a564:	000c      	movs	r4, r1
   1a566:	2d00      	cmp	r5, #0
   1a568:	d005      	beq.n	1a576 <__swsetup_r+0x1a>
   1a56a:	69ab      	ldr	r3, [r5, #24]
   1a56c:	2b00      	cmp	r3, #0
   1a56e:	d102      	bne.n	1a576 <__swsetup_r+0x1a>
   1a570:	0028      	movs	r0, r5
   1a572:	f000 f973 	bl	1a85c <__sinit>
   1a576:	4b31      	ldr	r3, [pc, #196]	; (1a63c <__swsetup_r+0xe0>)
   1a578:	429c      	cmp	r4, r3
   1a57a:	d10f      	bne.n	1a59c <__swsetup_r+0x40>
   1a57c:	686c      	ldr	r4, [r5, #4]
   1a57e:	230c      	movs	r3, #12
   1a580:	5ee2      	ldrsh	r2, [r4, r3]
   1a582:	b293      	uxth	r3, r2
   1a584:	0719      	lsls	r1, r3, #28
   1a586:	d42d      	bmi.n	1a5e4 <__swsetup_r+0x88>
   1a588:	06d9      	lsls	r1, r3, #27
   1a58a:	d411      	bmi.n	1a5b0 <__swsetup_r+0x54>
   1a58c:	2309      	movs	r3, #9
   1a58e:	2001      	movs	r0, #1
   1a590:	6033      	str	r3, [r6, #0]
   1a592:	3337      	adds	r3, #55	; 0x37
   1a594:	4313      	orrs	r3, r2
   1a596:	81a3      	strh	r3, [r4, #12]
   1a598:	4240      	negs	r0, r0
   1a59a:	bd70      	pop	{r4, r5, r6, pc}
   1a59c:	4b28      	ldr	r3, [pc, #160]	; (1a640 <__swsetup_r+0xe4>)
   1a59e:	429c      	cmp	r4, r3
   1a5a0:	d101      	bne.n	1a5a6 <__swsetup_r+0x4a>
   1a5a2:	68ac      	ldr	r4, [r5, #8]
   1a5a4:	e7eb      	b.n	1a57e <__swsetup_r+0x22>
   1a5a6:	4b27      	ldr	r3, [pc, #156]	; (1a644 <__swsetup_r+0xe8>)
   1a5a8:	429c      	cmp	r4, r3
   1a5aa:	d1e8      	bne.n	1a57e <__swsetup_r+0x22>
   1a5ac:	68ec      	ldr	r4, [r5, #12]
   1a5ae:	e7e6      	b.n	1a57e <__swsetup_r+0x22>
   1a5b0:	075b      	lsls	r3, r3, #29
   1a5b2:	d513      	bpl.n	1a5dc <__swsetup_r+0x80>
   1a5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1a5b6:	2900      	cmp	r1, #0
   1a5b8:	d008      	beq.n	1a5cc <__swsetup_r+0x70>
   1a5ba:	0023      	movs	r3, r4
   1a5bc:	3344      	adds	r3, #68	; 0x44
   1a5be:	4299      	cmp	r1, r3
   1a5c0:	d002      	beq.n	1a5c8 <__swsetup_r+0x6c>
   1a5c2:	0030      	movs	r0, r6
   1a5c4:	f7ff fc74 	bl	19eb0 <_free_r>
   1a5c8:	2300      	movs	r3, #0
   1a5ca:	6363      	str	r3, [r4, #52]	; 0x34
   1a5cc:	2224      	movs	r2, #36	; 0x24
   1a5ce:	89a3      	ldrh	r3, [r4, #12]
   1a5d0:	4393      	bics	r3, r2
   1a5d2:	81a3      	strh	r3, [r4, #12]
   1a5d4:	2300      	movs	r3, #0
   1a5d6:	6063      	str	r3, [r4, #4]
   1a5d8:	6923      	ldr	r3, [r4, #16]
   1a5da:	6023      	str	r3, [r4, #0]
   1a5dc:	2308      	movs	r3, #8
   1a5de:	89a2      	ldrh	r2, [r4, #12]
   1a5e0:	4313      	orrs	r3, r2
   1a5e2:	81a3      	strh	r3, [r4, #12]
   1a5e4:	6923      	ldr	r3, [r4, #16]
   1a5e6:	2b00      	cmp	r3, #0
   1a5e8:	d10b      	bne.n	1a602 <__swsetup_r+0xa6>
   1a5ea:	21a0      	movs	r1, #160	; 0xa0
   1a5ec:	2280      	movs	r2, #128	; 0x80
   1a5ee:	89a3      	ldrh	r3, [r4, #12]
   1a5f0:	0089      	lsls	r1, r1, #2
   1a5f2:	0092      	lsls	r2, r2, #2
   1a5f4:	400b      	ands	r3, r1
   1a5f6:	4293      	cmp	r3, r2
   1a5f8:	d003      	beq.n	1a602 <__swsetup_r+0xa6>
   1a5fa:	0021      	movs	r1, r4
   1a5fc:	0030      	movs	r0, r6
   1a5fe:	f000 f9ff 	bl	1aa00 <__smakebuf_r>
   1a602:	2301      	movs	r3, #1
   1a604:	89a2      	ldrh	r2, [r4, #12]
   1a606:	4013      	ands	r3, r2
   1a608:	d011      	beq.n	1a62e <__swsetup_r+0xd2>
   1a60a:	2300      	movs	r3, #0
   1a60c:	60a3      	str	r3, [r4, #8]
   1a60e:	6963      	ldr	r3, [r4, #20]
   1a610:	425b      	negs	r3, r3
   1a612:	61a3      	str	r3, [r4, #24]
   1a614:	2000      	movs	r0, #0
   1a616:	6923      	ldr	r3, [r4, #16]
   1a618:	4283      	cmp	r3, r0
   1a61a:	d1be      	bne.n	1a59a <__swsetup_r+0x3e>
   1a61c:	230c      	movs	r3, #12
   1a61e:	5ee2      	ldrsh	r2, [r4, r3]
   1a620:	0613      	lsls	r3, r2, #24
   1a622:	d5ba      	bpl.n	1a59a <__swsetup_r+0x3e>
   1a624:	2340      	movs	r3, #64	; 0x40
   1a626:	4313      	orrs	r3, r2
   1a628:	81a3      	strh	r3, [r4, #12]
   1a62a:	3801      	subs	r0, #1
   1a62c:	e7b5      	b.n	1a59a <__swsetup_r+0x3e>
   1a62e:	0792      	lsls	r2, r2, #30
   1a630:	d400      	bmi.n	1a634 <__swsetup_r+0xd8>
   1a632:	6963      	ldr	r3, [r4, #20]
   1a634:	60a3      	str	r3, [r4, #8]
   1a636:	e7ed      	b.n	1a614 <__swsetup_r+0xb8>
   1a638:	20000534 	.word	0x20000534
   1a63c:	0001d59c 	.word	0x0001d59c
   1a640:	0001d5bc 	.word	0x0001d5bc
   1a644:	0001d57c 	.word	0x0001d57c

0001a648 <_close_r>:
   1a648:	2300      	movs	r3, #0
   1a64a:	b570      	push	{r4, r5, r6, lr}
   1a64c:	4c06      	ldr	r4, [pc, #24]	; (1a668 <_close_r+0x20>)
   1a64e:	0005      	movs	r5, r0
   1a650:	0008      	movs	r0, r1
   1a652:	6023      	str	r3, [r4, #0]
   1a654:	f7fb fbdc 	bl	15e10 <_close>
   1a658:	1c43      	adds	r3, r0, #1
   1a65a:	d103      	bne.n	1a664 <_close_r+0x1c>
   1a65c:	6823      	ldr	r3, [r4, #0]
   1a65e:	2b00      	cmp	r3, #0
   1a660:	d000      	beq.n	1a664 <_close_r+0x1c>
   1a662:	602b      	str	r3, [r5, #0]
   1a664:	bd70      	pop	{r4, r5, r6, pc}
   1a666:	46c0      	nop			; (mov r8, r8)
   1a668:	20001854 	.word	0x20001854

0001a66c <__sflush_r>:
   1a66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a66e:	898a      	ldrh	r2, [r1, #12]
   1a670:	0005      	movs	r5, r0
   1a672:	000c      	movs	r4, r1
   1a674:	0713      	lsls	r3, r2, #28
   1a676:	d460      	bmi.n	1a73a <__sflush_r+0xce>
   1a678:	684b      	ldr	r3, [r1, #4]
   1a67a:	2b00      	cmp	r3, #0
   1a67c:	dc04      	bgt.n	1a688 <__sflush_r+0x1c>
   1a67e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1a680:	2b00      	cmp	r3, #0
   1a682:	dc01      	bgt.n	1a688 <__sflush_r+0x1c>
   1a684:	2000      	movs	r0, #0
   1a686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1a688:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1a68a:	2f00      	cmp	r7, #0
   1a68c:	d0fa      	beq.n	1a684 <__sflush_r+0x18>
   1a68e:	2300      	movs	r3, #0
   1a690:	682e      	ldr	r6, [r5, #0]
   1a692:	602b      	str	r3, [r5, #0]
   1a694:	2380      	movs	r3, #128	; 0x80
   1a696:	015b      	lsls	r3, r3, #5
   1a698:	401a      	ands	r2, r3
   1a69a:	d034      	beq.n	1a706 <__sflush_r+0x9a>
   1a69c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1a69e:	89a3      	ldrh	r3, [r4, #12]
   1a6a0:	075b      	lsls	r3, r3, #29
   1a6a2:	d506      	bpl.n	1a6b2 <__sflush_r+0x46>
   1a6a4:	6863      	ldr	r3, [r4, #4]
   1a6a6:	1ac0      	subs	r0, r0, r3
   1a6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	d001      	beq.n	1a6b2 <__sflush_r+0x46>
   1a6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1a6b0:	1ac0      	subs	r0, r0, r3
   1a6b2:	0002      	movs	r2, r0
   1a6b4:	6a21      	ldr	r1, [r4, #32]
   1a6b6:	2300      	movs	r3, #0
   1a6b8:	0028      	movs	r0, r5
   1a6ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1a6bc:	47b8      	blx	r7
   1a6be:	89a1      	ldrh	r1, [r4, #12]
   1a6c0:	1c43      	adds	r3, r0, #1
   1a6c2:	d106      	bne.n	1a6d2 <__sflush_r+0x66>
   1a6c4:	682b      	ldr	r3, [r5, #0]
   1a6c6:	2b1d      	cmp	r3, #29
   1a6c8:	d831      	bhi.n	1a72e <__sflush_r+0xc2>
   1a6ca:	4a2c      	ldr	r2, [pc, #176]	; (1a77c <__sflush_r+0x110>)
   1a6cc:	40da      	lsrs	r2, r3
   1a6ce:	07d3      	lsls	r3, r2, #31
   1a6d0:	d52d      	bpl.n	1a72e <__sflush_r+0xc2>
   1a6d2:	2300      	movs	r3, #0
   1a6d4:	6063      	str	r3, [r4, #4]
   1a6d6:	6923      	ldr	r3, [r4, #16]
   1a6d8:	6023      	str	r3, [r4, #0]
   1a6da:	04cb      	lsls	r3, r1, #19
   1a6dc:	d505      	bpl.n	1a6ea <__sflush_r+0x7e>
   1a6de:	1c43      	adds	r3, r0, #1
   1a6e0:	d102      	bne.n	1a6e8 <__sflush_r+0x7c>
   1a6e2:	682b      	ldr	r3, [r5, #0]
   1a6e4:	2b00      	cmp	r3, #0
   1a6e6:	d100      	bne.n	1a6ea <__sflush_r+0x7e>
   1a6e8:	6560      	str	r0, [r4, #84]	; 0x54
   1a6ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1a6ec:	602e      	str	r6, [r5, #0]
   1a6ee:	2900      	cmp	r1, #0
   1a6f0:	d0c8      	beq.n	1a684 <__sflush_r+0x18>
   1a6f2:	0023      	movs	r3, r4
   1a6f4:	3344      	adds	r3, #68	; 0x44
   1a6f6:	4299      	cmp	r1, r3
   1a6f8:	d002      	beq.n	1a700 <__sflush_r+0x94>
   1a6fa:	0028      	movs	r0, r5
   1a6fc:	f7ff fbd8 	bl	19eb0 <_free_r>
   1a700:	2000      	movs	r0, #0
   1a702:	6360      	str	r0, [r4, #52]	; 0x34
   1a704:	e7bf      	b.n	1a686 <__sflush_r+0x1a>
   1a706:	2301      	movs	r3, #1
   1a708:	6a21      	ldr	r1, [r4, #32]
   1a70a:	0028      	movs	r0, r5
   1a70c:	47b8      	blx	r7
   1a70e:	1c43      	adds	r3, r0, #1
   1a710:	d1c5      	bne.n	1a69e <__sflush_r+0x32>
   1a712:	682b      	ldr	r3, [r5, #0]
   1a714:	2b00      	cmp	r3, #0
   1a716:	d0c2      	beq.n	1a69e <__sflush_r+0x32>
   1a718:	2b1d      	cmp	r3, #29
   1a71a:	d001      	beq.n	1a720 <__sflush_r+0xb4>
   1a71c:	2b16      	cmp	r3, #22
   1a71e:	d101      	bne.n	1a724 <__sflush_r+0xb8>
   1a720:	602e      	str	r6, [r5, #0]
   1a722:	e7af      	b.n	1a684 <__sflush_r+0x18>
   1a724:	2340      	movs	r3, #64	; 0x40
   1a726:	89a2      	ldrh	r2, [r4, #12]
   1a728:	4313      	orrs	r3, r2
   1a72a:	81a3      	strh	r3, [r4, #12]
   1a72c:	e7ab      	b.n	1a686 <__sflush_r+0x1a>
   1a72e:	2340      	movs	r3, #64	; 0x40
   1a730:	430b      	orrs	r3, r1
   1a732:	2001      	movs	r0, #1
   1a734:	81a3      	strh	r3, [r4, #12]
   1a736:	4240      	negs	r0, r0
   1a738:	e7a5      	b.n	1a686 <__sflush_r+0x1a>
   1a73a:	690f      	ldr	r7, [r1, #16]
   1a73c:	2f00      	cmp	r7, #0
   1a73e:	d0a1      	beq.n	1a684 <__sflush_r+0x18>
   1a740:	680b      	ldr	r3, [r1, #0]
   1a742:	600f      	str	r7, [r1, #0]
   1a744:	1bdb      	subs	r3, r3, r7
   1a746:	9301      	str	r3, [sp, #4]
   1a748:	2300      	movs	r3, #0
   1a74a:	0792      	lsls	r2, r2, #30
   1a74c:	d100      	bne.n	1a750 <__sflush_r+0xe4>
   1a74e:	694b      	ldr	r3, [r1, #20]
   1a750:	60a3      	str	r3, [r4, #8]
   1a752:	9b01      	ldr	r3, [sp, #4]
   1a754:	2b00      	cmp	r3, #0
   1a756:	dc00      	bgt.n	1a75a <__sflush_r+0xee>
   1a758:	e794      	b.n	1a684 <__sflush_r+0x18>
   1a75a:	9b01      	ldr	r3, [sp, #4]
   1a75c:	003a      	movs	r2, r7
   1a75e:	6a21      	ldr	r1, [r4, #32]
   1a760:	0028      	movs	r0, r5
   1a762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a764:	47b0      	blx	r6
   1a766:	2800      	cmp	r0, #0
   1a768:	dc03      	bgt.n	1a772 <__sflush_r+0x106>
   1a76a:	2340      	movs	r3, #64	; 0x40
   1a76c:	89a2      	ldrh	r2, [r4, #12]
   1a76e:	4313      	orrs	r3, r2
   1a770:	e7df      	b.n	1a732 <__sflush_r+0xc6>
   1a772:	9b01      	ldr	r3, [sp, #4]
   1a774:	183f      	adds	r7, r7, r0
   1a776:	1a1b      	subs	r3, r3, r0
   1a778:	9301      	str	r3, [sp, #4]
   1a77a:	e7ea      	b.n	1a752 <__sflush_r+0xe6>
   1a77c:	20400001 	.word	0x20400001

0001a780 <_fflush_r>:
   1a780:	690b      	ldr	r3, [r1, #16]
   1a782:	b570      	push	{r4, r5, r6, lr}
   1a784:	0005      	movs	r5, r0
   1a786:	000c      	movs	r4, r1
   1a788:	2b00      	cmp	r3, #0
   1a78a:	d101      	bne.n	1a790 <_fflush_r+0x10>
   1a78c:	2000      	movs	r0, #0
   1a78e:	bd70      	pop	{r4, r5, r6, pc}
   1a790:	2800      	cmp	r0, #0
   1a792:	d004      	beq.n	1a79e <_fflush_r+0x1e>
   1a794:	6983      	ldr	r3, [r0, #24]
   1a796:	2b00      	cmp	r3, #0
   1a798:	d101      	bne.n	1a79e <_fflush_r+0x1e>
   1a79a:	f000 f85f 	bl	1a85c <__sinit>
   1a79e:	4b0b      	ldr	r3, [pc, #44]	; (1a7cc <_fflush_r+0x4c>)
   1a7a0:	429c      	cmp	r4, r3
   1a7a2:	d109      	bne.n	1a7b8 <_fflush_r+0x38>
   1a7a4:	686c      	ldr	r4, [r5, #4]
   1a7a6:	220c      	movs	r2, #12
   1a7a8:	5ea3      	ldrsh	r3, [r4, r2]
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	d0ee      	beq.n	1a78c <_fflush_r+0xc>
   1a7ae:	0021      	movs	r1, r4
   1a7b0:	0028      	movs	r0, r5
   1a7b2:	f7ff ff5b 	bl	1a66c <__sflush_r>
   1a7b6:	e7ea      	b.n	1a78e <_fflush_r+0xe>
   1a7b8:	4b05      	ldr	r3, [pc, #20]	; (1a7d0 <_fflush_r+0x50>)
   1a7ba:	429c      	cmp	r4, r3
   1a7bc:	d101      	bne.n	1a7c2 <_fflush_r+0x42>
   1a7be:	68ac      	ldr	r4, [r5, #8]
   1a7c0:	e7f1      	b.n	1a7a6 <_fflush_r+0x26>
   1a7c2:	4b04      	ldr	r3, [pc, #16]	; (1a7d4 <_fflush_r+0x54>)
   1a7c4:	429c      	cmp	r4, r3
   1a7c6:	d1ee      	bne.n	1a7a6 <_fflush_r+0x26>
   1a7c8:	68ec      	ldr	r4, [r5, #12]
   1a7ca:	e7ec      	b.n	1a7a6 <_fflush_r+0x26>
   1a7cc:	0001d59c 	.word	0x0001d59c
   1a7d0:	0001d5bc 	.word	0x0001d5bc
   1a7d4:	0001d57c 	.word	0x0001d57c

0001a7d8 <_cleanup_r>:
   1a7d8:	b510      	push	{r4, lr}
   1a7da:	4902      	ldr	r1, [pc, #8]	; (1a7e4 <_cleanup_r+0xc>)
   1a7dc:	f000 f8b2 	bl	1a944 <_fwalk_reent>
   1a7e0:	bd10      	pop	{r4, pc}
   1a7e2:	46c0      	nop			; (mov r8, r8)
   1a7e4:	0001a781 	.word	0x0001a781

0001a7e8 <std.isra.0>:
   1a7e8:	2300      	movs	r3, #0
   1a7ea:	b510      	push	{r4, lr}
   1a7ec:	0004      	movs	r4, r0
   1a7ee:	6003      	str	r3, [r0, #0]
   1a7f0:	6043      	str	r3, [r0, #4]
   1a7f2:	6083      	str	r3, [r0, #8]
   1a7f4:	8181      	strh	r1, [r0, #12]
   1a7f6:	6643      	str	r3, [r0, #100]	; 0x64
   1a7f8:	81c2      	strh	r2, [r0, #14]
   1a7fa:	6103      	str	r3, [r0, #16]
   1a7fc:	6143      	str	r3, [r0, #20]
   1a7fe:	6183      	str	r3, [r0, #24]
   1a800:	0019      	movs	r1, r3
   1a802:	2208      	movs	r2, #8
   1a804:	305c      	adds	r0, #92	; 0x5c
   1a806:	f7ff fb4b 	bl	19ea0 <memset>
   1a80a:	4b05      	ldr	r3, [pc, #20]	; (1a820 <std.isra.0+0x38>)
   1a80c:	6224      	str	r4, [r4, #32]
   1a80e:	6263      	str	r3, [r4, #36]	; 0x24
   1a810:	4b04      	ldr	r3, [pc, #16]	; (1a824 <std.isra.0+0x3c>)
   1a812:	62a3      	str	r3, [r4, #40]	; 0x28
   1a814:	4b04      	ldr	r3, [pc, #16]	; (1a828 <std.isra.0+0x40>)
   1a816:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a818:	4b04      	ldr	r3, [pc, #16]	; (1a82c <std.isra.0+0x44>)
   1a81a:	6323      	str	r3, [r4, #48]	; 0x30
   1a81c:	bd10      	pop	{r4, pc}
   1a81e:	46c0      	nop			; (mov r8, r8)
   1a820:	0001a305 	.word	0x0001a305
   1a824:	0001a32d 	.word	0x0001a32d
   1a828:	0001a365 	.word	0x0001a365
   1a82c:	0001a391 	.word	0x0001a391

0001a830 <__sfmoreglue>:
   1a830:	b570      	push	{r4, r5, r6, lr}
   1a832:	2568      	movs	r5, #104	; 0x68
   1a834:	1e4a      	subs	r2, r1, #1
   1a836:	4355      	muls	r5, r2
   1a838:	000e      	movs	r6, r1
   1a83a:	0029      	movs	r1, r5
   1a83c:	3174      	adds	r1, #116	; 0x74
   1a83e:	f7ff fb81 	bl	19f44 <_malloc_r>
   1a842:	1e04      	subs	r4, r0, #0
   1a844:	d008      	beq.n	1a858 <__sfmoreglue+0x28>
   1a846:	2100      	movs	r1, #0
   1a848:	002a      	movs	r2, r5
   1a84a:	6001      	str	r1, [r0, #0]
   1a84c:	6046      	str	r6, [r0, #4]
   1a84e:	300c      	adds	r0, #12
   1a850:	60a0      	str	r0, [r4, #8]
   1a852:	3268      	adds	r2, #104	; 0x68
   1a854:	f7ff fb24 	bl	19ea0 <memset>
   1a858:	0020      	movs	r0, r4
   1a85a:	bd70      	pop	{r4, r5, r6, pc}

0001a85c <__sinit>:
   1a85c:	6983      	ldr	r3, [r0, #24]
   1a85e:	b513      	push	{r0, r1, r4, lr}
   1a860:	0004      	movs	r4, r0
   1a862:	2b00      	cmp	r3, #0
   1a864:	d128      	bne.n	1a8b8 <__sinit+0x5c>
   1a866:	6483      	str	r3, [r0, #72]	; 0x48
   1a868:	64c3      	str	r3, [r0, #76]	; 0x4c
   1a86a:	6503      	str	r3, [r0, #80]	; 0x50
   1a86c:	4b13      	ldr	r3, [pc, #76]	; (1a8bc <__sinit+0x60>)
   1a86e:	4a14      	ldr	r2, [pc, #80]	; (1a8c0 <__sinit+0x64>)
   1a870:	681b      	ldr	r3, [r3, #0]
   1a872:	6282      	str	r2, [r0, #40]	; 0x28
   1a874:	9301      	str	r3, [sp, #4]
   1a876:	4298      	cmp	r0, r3
   1a878:	d101      	bne.n	1a87e <__sinit+0x22>
   1a87a:	2301      	movs	r3, #1
   1a87c:	6183      	str	r3, [r0, #24]
   1a87e:	0020      	movs	r0, r4
   1a880:	f000 f820 	bl	1a8c4 <__sfp>
   1a884:	6060      	str	r0, [r4, #4]
   1a886:	0020      	movs	r0, r4
   1a888:	f000 f81c 	bl	1a8c4 <__sfp>
   1a88c:	60a0      	str	r0, [r4, #8]
   1a88e:	0020      	movs	r0, r4
   1a890:	f000 f818 	bl	1a8c4 <__sfp>
   1a894:	2200      	movs	r2, #0
   1a896:	60e0      	str	r0, [r4, #12]
   1a898:	2104      	movs	r1, #4
   1a89a:	6860      	ldr	r0, [r4, #4]
   1a89c:	f7ff ffa4 	bl	1a7e8 <std.isra.0>
   1a8a0:	2201      	movs	r2, #1
   1a8a2:	2109      	movs	r1, #9
   1a8a4:	68a0      	ldr	r0, [r4, #8]
   1a8a6:	f7ff ff9f 	bl	1a7e8 <std.isra.0>
   1a8aa:	2202      	movs	r2, #2
   1a8ac:	2112      	movs	r1, #18
   1a8ae:	68e0      	ldr	r0, [r4, #12]
   1a8b0:	f7ff ff9a 	bl	1a7e8 <std.isra.0>
   1a8b4:	2301      	movs	r3, #1
   1a8b6:	61a3      	str	r3, [r4, #24]
   1a8b8:	bd13      	pop	{r0, r1, r4, pc}
   1a8ba:	46c0      	nop			; (mov r8, r8)
   1a8bc:	0001d550 	.word	0x0001d550
   1a8c0:	0001a7d9 	.word	0x0001a7d9

0001a8c4 <__sfp>:
   1a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8c6:	4b1e      	ldr	r3, [pc, #120]	; (1a940 <__sfp+0x7c>)
   1a8c8:	0007      	movs	r7, r0
   1a8ca:	681e      	ldr	r6, [r3, #0]
   1a8cc:	69b3      	ldr	r3, [r6, #24]
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	d102      	bne.n	1a8d8 <__sfp+0x14>
   1a8d2:	0030      	movs	r0, r6
   1a8d4:	f7ff ffc2 	bl	1a85c <__sinit>
   1a8d8:	3648      	adds	r6, #72	; 0x48
   1a8da:	68b4      	ldr	r4, [r6, #8]
   1a8dc:	6873      	ldr	r3, [r6, #4]
   1a8de:	3b01      	subs	r3, #1
   1a8e0:	d504      	bpl.n	1a8ec <__sfp+0x28>
   1a8e2:	6833      	ldr	r3, [r6, #0]
   1a8e4:	2b00      	cmp	r3, #0
   1a8e6:	d007      	beq.n	1a8f8 <__sfp+0x34>
   1a8e8:	6836      	ldr	r6, [r6, #0]
   1a8ea:	e7f6      	b.n	1a8da <__sfp+0x16>
   1a8ec:	220c      	movs	r2, #12
   1a8ee:	5ea5      	ldrsh	r5, [r4, r2]
   1a8f0:	2d00      	cmp	r5, #0
   1a8f2:	d00d      	beq.n	1a910 <__sfp+0x4c>
   1a8f4:	3468      	adds	r4, #104	; 0x68
   1a8f6:	e7f2      	b.n	1a8de <__sfp+0x1a>
   1a8f8:	2104      	movs	r1, #4
   1a8fa:	0038      	movs	r0, r7
   1a8fc:	f7ff ff98 	bl	1a830 <__sfmoreglue>
   1a900:	6030      	str	r0, [r6, #0]
   1a902:	2800      	cmp	r0, #0
   1a904:	d1f0      	bne.n	1a8e8 <__sfp+0x24>
   1a906:	230c      	movs	r3, #12
   1a908:	0004      	movs	r4, r0
   1a90a:	603b      	str	r3, [r7, #0]
   1a90c:	0020      	movs	r0, r4
   1a90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a910:	2301      	movs	r3, #1
   1a912:	0020      	movs	r0, r4
   1a914:	425b      	negs	r3, r3
   1a916:	81e3      	strh	r3, [r4, #14]
   1a918:	3302      	adds	r3, #2
   1a91a:	81a3      	strh	r3, [r4, #12]
   1a91c:	6665      	str	r5, [r4, #100]	; 0x64
   1a91e:	6025      	str	r5, [r4, #0]
   1a920:	60a5      	str	r5, [r4, #8]
   1a922:	6065      	str	r5, [r4, #4]
   1a924:	6125      	str	r5, [r4, #16]
   1a926:	6165      	str	r5, [r4, #20]
   1a928:	61a5      	str	r5, [r4, #24]
   1a92a:	2208      	movs	r2, #8
   1a92c:	0029      	movs	r1, r5
   1a92e:	305c      	adds	r0, #92	; 0x5c
   1a930:	f7ff fab6 	bl	19ea0 <memset>
   1a934:	6365      	str	r5, [r4, #52]	; 0x34
   1a936:	63a5      	str	r5, [r4, #56]	; 0x38
   1a938:	64a5      	str	r5, [r4, #72]	; 0x48
   1a93a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1a93c:	e7e6      	b.n	1a90c <__sfp+0x48>
   1a93e:	46c0      	nop			; (mov r8, r8)
   1a940:	0001d550 	.word	0x0001d550

0001a944 <_fwalk_reent>:
   1a944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a946:	0004      	movs	r4, r0
   1a948:	0007      	movs	r7, r0
   1a94a:	2600      	movs	r6, #0
   1a94c:	9101      	str	r1, [sp, #4]
   1a94e:	3448      	adds	r4, #72	; 0x48
   1a950:	2c00      	cmp	r4, #0
   1a952:	d101      	bne.n	1a958 <_fwalk_reent+0x14>
   1a954:	0030      	movs	r0, r6
   1a956:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1a958:	6863      	ldr	r3, [r4, #4]
   1a95a:	68a5      	ldr	r5, [r4, #8]
   1a95c:	9300      	str	r3, [sp, #0]
   1a95e:	9b00      	ldr	r3, [sp, #0]
   1a960:	3b01      	subs	r3, #1
   1a962:	9300      	str	r3, [sp, #0]
   1a964:	d501      	bpl.n	1a96a <_fwalk_reent+0x26>
   1a966:	6824      	ldr	r4, [r4, #0]
   1a968:	e7f2      	b.n	1a950 <_fwalk_reent+0xc>
   1a96a:	89ab      	ldrh	r3, [r5, #12]
   1a96c:	2b01      	cmp	r3, #1
   1a96e:	d908      	bls.n	1a982 <_fwalk_reent+0x3e>
   1a970:	220e      	movs	r2, #14
   1a972:	5eab      	ldrsh	r3, [r5, r2]
   1a974:	3301      	adds	r3, #1
   1a976:	d004      	beq.n	1a982 <_fwalk_reent+0x3e>
   1a978:	0029      	movs	r1, r5
   1a97a:	0038      	movs	r0, r7
   1a97c:	9b01      	ldr	r3, [sp, #4]
   1a97e:	4798      	blx	r3
   1a980:	4306      	orrs	r6, r0
   1a982:	3568      	adds	r5, #104	; 0x68
   1a984:	e7eb      	b.n	1a95e <_fwalk_reent+0x1a>
	...

0001a988 <_lseek_r>:
   1a988:	b570      	push	{r4, r5, r6, lr}
   1a98a:	0005      	movs	r5, r0
   1a98c:	0008      	movs	r0, r1
   1a98e:	0011      	movs	r1, r2
   1a990:	2200      	movs	r2, #0
   1a992:	4c06      	ldr	r4, [pc, #24]	; (1a9ac <_lseek_r+0x24>)
   1a994:	6022      	str	r2, [r4, #0]
   1a996:	001a      	movs	r2, r3
   1a998:	f7fb fa5b 	bl	15e52 <_lseek>
   1a99c:	1c43      	adds	r3, r0, #1
   1a99e:	d103      	bne.n	1a9a8 <_lseek_r+0x20>
   1a9a0:	6823      	ldr	r3, [r4, #0]
   1a9a2:	2b00      	cmp	r3, #0
   1a9a4:	d000      	beq.n	1a9a8 <_lseek_r+0x20>
   1a9a6:	602b      	str	r3, [r5, #0]
   1a9a8:	bd70      	pop	{r4, r5, r6, pc}
   1a9aa:	46c0      	nop			; (mov r8, r8)
   1a9ac:	20001854 	.word	0x20001854

0001a9b0 <__swhatbuf_r>:
   1a9b0:	b570      	push	{r4, r5, r6, lr}
   1a9b2:	000e      	movs	r6, r1
   1a9b4:	001d      	movs	r5, r3
   1a9b6:	230e      	movs	r3, #14
   1a9b8:	5ec9      	ldrsh	r1, [r1, r3]
   1a9ba:	b090      	sub	sp, #64	; 0x40
   1a9bc:	0014      	movs	r4, r2
   1a9be:	2900      	cmp	r1, #0
   1a9c0:	da07      	bge.n	1a9d2 <__swhatbuf_r+0x22>
   1a9c2:	2300      	movs	r3, #0
   1a9c4:	602b      	str	r3, [r5, #0]
   1a9c6:	89b3      	ldrh	r3, [r6, #12]
   1a9c8:	061b      	lsls	r3, r3, #24
   1a9ca:	d411      	bmi.n	1a9f0 <__swhatbuf_r+0x40>
   1a9cc:	2380      	movs	r3, #128	; 0x80
   1a9ce:	00db      	lsls	r3, r3, #3
   1a9d0:	e00f      	b.n	1a9f2 <__swhatbuf_r+0x42>
   1a9d2:	aa01      	add	r2, sp, #4
   1a9d4:	f000 fcd6 	bl	1b384 <_fstat_r>
   1a9d8:	2800      	cmp	r0, #0
   1a9da:	dbf2      	blt.n	1a9c2 <__swhatbuf_r+0x12>
   1a9dc:	22f0      	movs	r2, #240	; 0xf0
   1a9de:	9b02      	ldr	r3, [sp, #8]
   1a9e0:	0212      	lsls	r2, r2, #8
   1a9e2:	4013      	ands	r3, r2
   1a9e4:	4a05      	ldr	r2, [pc, #20]	; (1a9fc <__swhatbuf_r+0x4c>)
   1a9e6:	189b      	adds	r3, r3, r2
   1a9e8:	425a      	negs	r2, r3
   1a9ea:	4153      	adcs	r3, r2
   1a9ec:	602b      	str	r3, [r5, #0]
   1a9ee:	e7ed      	b.n	1a9cc <__swhatbuf_r+0x1c>
   1a9f0:	2340      	movs	r3, #64	; 0x40
   1a9f2:	2000      	movs	r0, #0
   1a9f4:	6023      	str	r3, [r4, #0]
   1a9f6:	b010      	add	sp, #64	; 0x40
   1a9f8:	bd70      	pop	{r4, r5, r6, pc}
   1a9fa:	46c0      	nop			; (mov r8, r8)
   1a9fc:	ffffe000 	.word	0xffffe000

0001aa00 <__smakebuf_r>:
   1aa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aa02:	2602      	movs	r6, #2
   1aa04:	898b      	ldrh	r3, [r1, #12]
   1aa06:	0005      	movs	r5, r0
   1aa08:	000c      	movs	r4, r1
   1aa0a:	4233      	tst	r3, r6
   1aa0c:	d006      	beq.n	1aa1c <__smakebuf_r+0x1c>
   1aa0e:	0023      	movs	r3, r4
   1aa10:	3347      	adds	r3, #71	; 0x47
   1aa12:	6023      	str	r3, [r4, #0]
   1aa14:	6123      	str	r3, [r4, #16]
   1aa16:	2301      	movs	r3, #1
   1aa18:	6163      	str	r3, [r4, #20]
   1aa1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1aa1c:	ab01      	add	r3, sp, #4
   1aa1e:	466a      	mov	r2, sp
   1aa20:	f7ff ffc6 	bl	1a9b0 <__swhatbuf_r>
   1aa24:	9900      	ldr	r1, [sp, #0]
   1aa26:	0007      	movs	r7, r0
   1aa28:	0028      	movs	r0, r5
   1aa2a:	f7ff fa8b 	bl	19f44 <_malloc_r>
   1aa2e:	2800      	cmp	r0, #0
   1aa30:	d108      	bne.n	1aa44 <__smakebuf_r+0x44>
   1aa32:	220c      	movs	r2, #12
   1aa34:	5ea3      	ldrsh	r3, [r4, r2]
   1aa36:	059a      	lsls	r2, r3, #22
   1aa38:	d4ef      	bmi.n	1aa1a <__smakebuf_r+0x1a>
   1aa3a:	2203      	movs	r2, #3
   1aa3c:	4393      	bics	r3, r2
   1aa3e:	431e      	orrs	r6, r3
   1aa40:	81a6      	strh	r6, [r4, #12]
   1aa42:	e7e4      	b.n	1aa0e <__smakebuf_r+0xe>
   1aa44:	4b0f      	ldr	r3, [pc, #60]	; (1aa84 <__smakebuf_r+0x84>)
   1aa46:	62ab      	str	r3, [r5, #40]	; 0x28
   1aa48:	2380      	movs	r3, #128	; 0x80
   1aa4a:	89a2      	ldrh	r2, [r4, #12]
   1aa4c:	6020      	str	r0, [r4, #0]
   1aa4e:	4313      	orrs	r3, r2
   1aa50:	81a3      	strh	r3, [r4, #12]
   1aa52:	9b00      	ldr	r3, [sp, #0]
   1aa54:	6120      	str	r0, [r4, #16]
   1aa56:	6163      	str	r3, [r4, #20]
   1aa58:	9b01      	ldr	r3, [sp, #4]
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d00d      	beq.n	1aa7a <__smakebuf_r+0x7a>
   1aa5e:	230e      	movs	r3, #14
   1aa60:	5ee1      	ldrsh	r1, [r4, r3]
   1aa62:	0028      	movs	r0, r5
   1aa64:	f000 fca0 	bl	1b3a8 <_isatty_r>
   1aa68:	2800      	cmp	r0, #0
   1aa6a:	d006      	beq.n	1aa7a <__smakebuf_r+0x7a>
   1aa6c:	2203      	movs	r2, #3
   1aa6e:	89a3      	ldrh	r3, [r4, #12]
   1aa70:	4393      	bics	r3, r2
   1aa72:	001a      	movs	r2, r3
   1aa74:	2301      	movs	r3, #1
   1aa76:	4313      	orrs	r3, r2
   1aa78:	81a3      	strh	r3, [r4, #12]
   1aa7a:	89a0      	ldrh	r0, [r4, #12]
   1aa7c:	4338      	orrs	r0, r7
   1aa7e:	81a0      	strh	r0, [r4, #12]
   1aa80:	e7cb      	b.n	1aa1a <__smakebuf_r+0x1a>
   1aa82:	46c0      	nop			; (mov r8, r8)
   1aa84:	0001a7d9 	.word	0x0001a7d9

0001aa88 <__malloc_lock>:
   1aa88:	4770      	bx	lr

0001aa8a <__malloc_unlock>:
   1aa8a:	4770      	bx	lr

0001aa8c <__ssputs_r>:
   1aa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa8e:	688e      	ldr	r6, [r1, #8]
   1aa90:	b085      	sub	sp, #20
   1aa92:	0007      	movs	r7, r0
   1aa94:	000c      	movs	r4, r1
   1aa96:	9203      	str	r2, [sp, #12]
   1aa98:	9301      	str	r3, [sp, #4]
   1aa9a:	429e      	cmp	r6, r3
   1aa9c:	d839      	bhi.n	1ab12 <__ssputs_r+0x86>
   1aa9e:	2390      	movs	r3, #144	; 0x90
   1aaa0:	898a      	ldrh	r2, [r1, #12]
   1aaa2:	00db      	lsls	r3, r3, #3
   1aaa4:	421a      	tst	r2, r3
   1aaa6:	d034      	beq.n	1ab12 <__ssputs_r+0x86>
   1aaa8:	2503      	movs	r5, #3
   1aaaa:	6909      	ldr	r1, [r1, #16]
   1aaac:	6823      	ldr	r3, [r4, #0]
   1aaae:	1a5b      	subs	r3, r3, r1
   1aab0:	9302      	str	r3, [sp, #8]
   1aab2:	6963      	ldr	r3, [r4, #20]
   1aab4:	9802      	ldr	r0, [sp, #8]
   1aab6:	435d      	muls	r5, r3
   1aab8:	0feb      	lsrs	r3, r5, #31
   1aaba:	195d      	adds	r5, r3, r5
   1aabc:	9b01      	ldr	r3, [sp, #4]
   1aabe:	106d      	asrs	r5, r5, #1
   1aac0:	3301      	adds	r3, #1
   1aac2:	181b      	adds	r3, r3, r0
   1aac4:	42ab      	cmp	r3, r5
   1aac6:	d900      	bls.n	1aaca <__ssputs_r+0x3e>
   1aac8:	001d      	movs	r5, r3
   1aaca:	0553      	lsls	r3, r2, #21
   1aacc:	d532      	bpl.n	1ab34 <__ssputs_r+0xa8>
   1aace:	0029      	movs	r1, r5
   1aad0:	0038      	movs	r0, r7
   1aad2:	f7ff fa37 	bl	19f44 <_malloc_r>
   1aad6:	1e06      	subs	r6, r0, #0
   1aad8:	d109      	bne.n	1aaee <__ssputs_r+0x62>
   1aada:	230c      	movs	r3, #12
   1aadc:	603b      	str	r3, [r7, #0]
   1aade:	2340      	movs	r3, #64	; 0x40
   1aae0:	2001      	movs	r0, #1
   1aae2:	89a2      	ldrh	r2, [r4, #12]
   1aae4:	4240      	negs	r0, r0
   1aae6:	4313      	orrs	r3, r2
   1aae8:	81a3      	strh	r3, [r4, #12]
   1aaea:	b005      	add	sp, #20
   1aaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aaee:	9a02      	ldr	r2, [sp, #8]
   1aaf0:	6921      	ldr	r1, [r4, #16]
   1aaf2:	f7ff f9ba 	bl	19e6a <memcpy>
   1aaf6:	89a3      	ldrh	r3, [r4, #12]
   1aaf8:	4a14      	ldr	r2, [pc, #80]	; (1ab4c <__ssputs_r+0xc0>)
   1aafa:	401a      	ands	r2, r3
   1aafc:	2380      	movs	r3, #128	; 0x80
   1aafe:	4313      	orrs	r3, r2
   1ab00:	81a3      	strh	r3, [r4, #12]
   1ab02:	9b02      	ldr	r3, [sp, #8]
   1ab04:	6126      	str	r6, [r4, #16]
   1ab06:	18f6      	adds	r6, r6, r3
   1ab08:	6026      	str	r6, [r4, #0]
   1ab0a:	6165      	str	r5, [r4, #20]
   1ab0c:	9e01      	ldr	r6, [sp, #4]
   1ab0e:	1aed      	subs	r5, r5, r3
   1ab10:	60a5      	str	r5, [r4, #8]
   1ab12:	9b01      	ldr	r3, [sp, #4]
   1ab14:	42b3      	cmp	r3, r6
   1ab16:	d200      	bcs.n	1ab1a <__ssputs_r+0x8e>
   1ab18:	001e      	movs	r6, r3
   1ab1a:	0032      	movs	r2, r6
   1ab1c:	9903      	ldr	r1, [sp, #12]
   1ab1e:	6820      	ldr	r0, [r4, #0]
   1ab20:	f7ff f9ac 	bl	19e7c <memmove>
   1ab24:	68a3      	ldr	r3, [r4, #8]
   1ab26:	2000      	movs	r0, #0
   1ab28:	1b9b      	subs	r3, r3, r6
   1ab2a:	60a3      	str	r3, [r4, #8]
   1ab2c:	6823      	ldr	r3, [r4, #0]
   1ab2e:	199e      	adds	r6, r3, r6
   1ab30:	6026      	str	r6, [r4, #0]
   1ab32:	e7da      	b.n	1aaea <__ssputs_r+0x5e>
   1ab34:	002a      	movs	r2, r5
   1ab36:	0038      	movs	r0, r7
   1ab38:	f000 fc53 	bl	1b3e2 <_realloc_r>
   1ab3c:	1e06      	subs	r6, r0, #0
   1ab3e:	d1e0      	bne.n	1ab02 <__ssputs_r+0x76>
   1ab40:	6921      	ldr	r1, [r4, #16]
   1ab42:	0038      	movs	r0, r7
   1ab44:	f7ff f9b4 	bl	19eb0 <_free_r>
   1ab48:	e7c7      	b.n	1aada <__ssputs_r+0x4e>
   1ab4a:	46c0      	nop			; (mov r8, r8)
   1ab4c:	fffffb7f 	.word	0xfffffb7f

0001ab50 <_svfiprintf_r>:
   1ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab52:	b09f      	sub	sp, #124	; 0x7c
   1ab54:	9002      	str	r0, [sp, #8]
   1ab56:	9305      	str	r3, [sp, #20]
   1ab58:	898b      	ldrh	r3, [r1, #12]
   1ab5a:	000f      	movs	r7, r1
   1ab5c:	0016      	movs	r6, r2
   1ab5e:	061b      	lsls	r3, r3, #24
   1ab60:	d511      	bpl.n	1ab86 <_svfiprintf_r+0x36>
   1ab62:	690b      	ldr	r3, [r1, #16]
   1ab64:	2b00      	cmp	r3, #0
   1ab66:	d10e      	bne.n	1ab86 <_svfiprintf_r+0x36>
   1ab68:	2140      	movs	r1, #64	; 0x40
   1ab6a:	f7ff f9eb 	bl	19f44 <_malloc_r>
   1ab6e:	6038      	str	r0, [r7, #0]
   1ab70:	6138      	str	r0, [r7, #16]
   1ab72:	2800      	cmp	r0, #0
   1ab74:	d105      	bne.n	1ab82 <_svfiprintf_r+0x32>
   1ab76:	230c      	movs	r3, #12
   1ab78:	9a02      	ldr	r2, [sp, #8]
   1ab7a:	3801      	subs	r0, #1
   1ab7c:	6013      	str	r3, [r2, #0]
   1ab7e:	b01f      	add	sp, #124	; 0x7c
   1ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab82:	2340      	movs	r3, #64	; 0x40
   1ab84:	617b      	str	r3, [r7, #20]
   1ab86:	2300      	movs	r3, #0
   1ab88:	ad06      	add	r5, sp, #24
   1ab8a:	616b      	str	r3, [r5, #20]
   1ab8c:	3320      	adds	r3, #32
   1ab8e:	766b      	strb	r3, [r5, #25]
   1ab90:	3310      	adds	r3, #16
   1ab92:	76ab      	strb	r3, [r5, #26]
   1ab94:	0034      	movs	r4, r6
   1ab96:	7823      	ldrb	r3, [r4, #0]
   1ab98:	2b00      	cmp	r3, #0
   1ab9a:	d147      	bne.n	1ac2c <_svfiprintf_r+0xdc>
   1ab9c:	1ba3      	subs	r3, r4, r6
   1ab9e:	9304      	str	r3, [sp, #16]
   1aba0:	d00d      	beq.n	1abbe <_svfiprintf_r+0x6e>
   1aba2:	1ba3      	subs	r3, r4, r6
   1aba4:	0032      	movs	r2, r6
   1aba6:	0039      	movs	r1, r7
   1aba8:	9802      	ldr	r0, [sp, #8]
   1abaa:	f7ff ff6f 	bl	1aa8c <__ssputs_r>
   1abae:	1c43      	adds	r3, r0, #1
   1abb0:	d100      	bne.n	1abb4 <_svfiprintf_r+0x64>
   1abb2:	e0b5      	b.n	1ad20 <_svfiprintf_r+0x1d0>
   1abb4:	696a      	ldr	r2, [r5, #20]
   1abb6:	9b04      	ldr	r3, [sp, #16]
   1abb8:	4694      	mov	ip, r2
   1abba:	4463      	add	r3, ip
   1abbc:	616b      	str	r3, [r5, #20]
   1abbe:	7823      	ldrb	r3, [r4, #0]
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d100      	bne.n	1abc6 <_svfiprintf_r+0x76>
   1abc4:	e0ac      	b.n	1ad20 <_svfiprintf_r+0x1d0>
   1abc6:	2201      	movs	r2, #1
   1abc8:	2300      	movs	r3, #0
   1abca:	4252      	negs	r2, r2
   1abcc:	606a      	str	r2, [r5, #4]
   1abce:	a902      	add	r1, sp, #8
   1abd0:	3254      	adds	r2, #84	; 0x54
   1abd2:	1852      	adds	r2, r2, r1
   1abd4:	3401      	adds	r4, #1
   1abd6:	602b      	str	r3, [r5, #0]
   1abd8:	60eb      	str	r3, [r5, #12]
   1abda:	60ab      	str	r3, [r5, #8]
   1abdc:	7013      	strb	r3, [r2, #0]
   1abde:	65ab      	str	r3, [r5, #88]	; 0x58
   1abe0:	4e58      	ldr	r6, [pc, #352]	; (1ad44 <_svfiprintf_r+0x1f4>)
   1abe2:	2205      	movs	r2, #5
   1abe4:	7821      	ldrb	r1, [r4, #0]
   1abe6:	0030      	movs	r0, r6
   1abe8:	f000 fbf0 	bl	1b3cc <memchr>
   1abec:	1c62      	adds	r2, r4, #1
   1abee:	2800      	cmp	r0, #0
   1abf0:	d120      	bne.n	1ac34 <_svfiprintf_r+0xe4>
   1abf2:	6829      	ldr	r1, [r5, #0]
   1abf4:	06cb      	lsls	r3, r1, #27
   1abf6:	d504      	bpl.n	1ac02 <_svfiprintf_r+0xb2>
   1abf8:	2353      	movs	r3, #83	; 0x53
   1abfa:	ae02      	add	r6, sp, #8
   1abfc:	3020      	adds	r0, #32
   1abfe:	199b      	adds	r3, r3, r6
   1ac00:	7018      	strb	r0, [r3, #0]
   1ac02:	070b      	lsls	r3, r1, #28
   1ac04:	d504      	bpl.n	1ac10 <_svfiprintf_r+0xc0>
   1ac06:	2353      	movs	r3, #83	; 0x53
   1ac08:	202b      	movs	r0, #43	; 0x2b
   1ac0a:	ae02      	add	r6, sp, #8
   1ac0c:	199b      	adds	r3, r3, r6
   1ac0e:	7018      	strb	r0, [r3, #0]
   1ac10:	7823      	ldrb	r3, [r4, #0]
   1ac12:	2b2a      	cmp	r3, #42	; 0x2a
   1ac14:	d016      	beq.n	1ac44 <_svfiprintf_r+0xf4>
   1ac16:	2000      	movs	r0, #0
   1ac18:	210a      	movs	r1, #10
   1ac1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac1c:	7822      	ldrb	r2, [r4, #0]
   1ac1e:	3a30      	subs	r2, #48	; 0x30
   1ac20:	2a09      	cmp	r2, #9
   1ac22:	d955      	bls.n	1acd0 <_svfiprintf_r+0x180>
   1ac24:	2800      	cmp	r0, #0
   1ac26:	d015      	beq.n	1ac54 <_svfiprintf_r+0x104>
   1ac28:	9309      	str	r3, [sp, #36]	; 0x24
   1ac2a:	e013      	b.n	1ac54 <_svfiprintf_r+0x104>
   1ac2c:	2b25      	cmp	r3, #37	; 0x25
   1ac2e:	d0b5      	beq.n	1ab9c <_svfiprintf_r+0x4c>
   1ac30:	3401      	adds	r4, #1
   1ac32:	e7b0      	b.n	1ab96 <_svfiprintf_r+0x46>
   1ac34:	2301      	movs	r3, #1
   1ac36:	1b80      	subs	r0, r0, r6
   1ac38:	4083      	lsls	r3, r0
   1ac3a:	6829      	ldr	r1, [r5, #0]
   1ac3c:	0014      	movs	r4, r2
   1ac3e:	430b      	orrs	r3, r1
   1ac40:	602b      	str	r3, [r5, #0]
   1ac42:	e7cd      	b.n	1abe0 <_svfiprintf_r+0x90>
   1ac44:	9b05      	ldr	r3, [sp, #20]
   1ac46:	1d18      	adds	r0, r3, #4
   1ac48:	681b      	ldr	r3, [r3, #0]
   1ac4a:	9005      	str	r0, [sp, #20]
   1ac4c:	2b00      	cmp	r3, #0
   1ac4e:	db39      	blt.n	1acc4 <_svfiprintf_r+0x174>
   1ac50:	9309      	str	r3, [sp, #36]	; 0x24
   1ac52:	0014      	movs	r4, r2
   1ac54:	7823      	ldrb	r3, [r4, #0]
   1ac56:	2b2e      	cmp	r3, #46	; 0x2e
   1ac58:	d10b      	bne.n	1ac72 <_svfiprintf_r+0x122>
   1ac5a:	7863      	ldrb	r3, [r4, #1]
   1ac5c:	1c62      	adds	r2, r4, #1
   1ac5e:	2b2a      	cmp	r3, #42	; 0x2a
   1ac60:	d13e      	bne.n	1ace0 <_svfiprintf_r+0x190>
   1ac62:	9b05      	ldr	r3, [sp, #20]
   1ac64:	3402      	adds	r4, #2
   1ac66:	1d1a      	adds	r2, r3, #4
   1ac68:	681b      	ldr	r3, [r3, #0]
   1ac6a:	9205      	str	r2, [sp, #20]
   1ac6c:	2b00      	cmp	r3, #0
   1ac6e:	db34      	blt.n	1acda <_svfiprintf_r+0x18a>
   1ac70:	9307      	str	r3, [sp, #28]
   1ac72:	4e35      	ldr	r6, [pc, #212]	; (1ad48 <_svfiprintf_r+0x1f8>)
   1ac74:	7821      	ldrb	r1, [r4, #0]
   1ac76:	2203      	movs	r2, #3
   1ac78:	0030      	movs	r0, r6
   1ac7a:	f000 fba7 	bl	1b3cc <memchr>
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d006      	beq.n	1ac90 <_svfiprintf_r+0x140>
   1ac82:	2340      	movs	r3, #64	; 0x40
   1ac84:	1b80      	subs	r0, r0, r6
   1ac86:	4083      	lsls	r3, r0
   1ac88:	682a      	ldr	r2, [r5, #0]
   1ac8a:	3401      	adds	r4, #1
   1ac8c:	4313      	orrs	r3, r2
   1ac8e:	602b      	str	r3, [r5, #0]
   1ac90:	7821      	ldrb	r1, [r4, #0]
   1ac92:	2206      	movs	r2, #6
   1ac94:	482d      	ldr	r0, [pc, #180]	; (1ad4c <_svfiprintf_r+0x1fc>)
   1ac96:	1c66      	adds	r6, r4, #1
   1ac98:	7629      	strb	r1, [r5, #24]
   1ac9a:	f000 fb97 	bl	1b3cc <memchr>
   1ac9e:	2800      	cmp	r0, #0
   1aca0:	d046      	beq.n	1ad30 <_svfiprintf_r+0x1e0>
   1aca2:	4b2b      	ldr	r3, [pc, #172]	; (1ad50 <_svfiprintf_r+0x200>)
   1aca4:	2b00      	cmp	r3, #0
   1aca6:	d12f      	bne.n	1ad08 <_svfiprintf_r+0x1b8>
   1aca8:	6829      	ldr	r1, [r5, #0]
   1acaa:	9b05      	ldr	r3, [sp, #20]
   1acac:	2207      	movs	r2, #7
   1acae:	05c9      	lsls	r1, r1, #23
   1acb0:	d528      	bpl.n	1ad04 <_svfiprintf_r+0x1b4>
   1acb2:	189b      	adds	r3, r3, r2
   1acb4:	4393      	bics	r3, r2
   1acb6:	3308      	adds	r3, #8
   1acb8:	9305      	str	r3, [sp, #20]
   1acba:	696b      	ldr	r3, [r5, #20]
   1acbc:	9a03      	ldr	r2, [sp, #12]
   1acbe:	189b      	adds	r3, r3, r2
   1acc0:	616b      	str	r3, [r5, #20]
   1acc2:	e767      	b.n	1ab94 <_svfiprintf_r+0x44>
   1acc4:	425b      	negs	r3, r3
   1acc6:	60eb      	str	r3, [r5, #12]
   1acc8:	2302      	movs	r3, #2
   1acca:	430b      	orrs	r3, r1
   1accc:	602b      	str	r3, [r5, #0]
   1acce:	e7c0      	b.n	1ac52 <_svfiprintf_r+0x102>
   1acd0:	434b      	muls	r3, r1
   1acd2:	3401      	adds	r4, #1
   1acd4:	189b      	adds	r3, r3, r2
   1acd6:	2001      	movs	r0, #1
   1acd8:	e7a0      	b.n	1ac1c <_svfiprintf_r+0xcc>
   1acda:	2301      	movs	r3, #1
   1acdc:	425b      	negs	r3, r3
   1acde:	e7c7      	b.n	1ac70 <_svfiprintf_r+0x120>
   1ace0:	2300      	movs	r3, #0
   1ace2:	0014      	movs	r4, r2
   1ace4:	200a      	movs	r0, #10
   1ace6:	001a      	movs	r2, r3
   1ace8:	606b      	str	r3, [r5, #4]
   1acea:	7821      	ldrb	r1, [r4, #0]
   1acec:	3930      	subs	r1, #48	; 0x30
   1acee:	2909      	cmp	r1, #9
   1acf0:	d903      	bls.n	1acfa <_svfiprintf_r+0x1aa>
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d0bd      	beq.n	1ac72 <_svfiprintf_r+0x122>
   1acf6:	9207      	str	r2, [sp, #28]
   1acf8:	e7bb      	b.n	1ac72 <_svfiprintf_r+0x122>
   1acfa:	4342      	muls	r2, r0
   1acfc:	3401      	adds	r4, #1
   1acfe:	1852      	adds	r2, r2, r1
   1ad00:	2301      	movs	r3, #1
   1ad02:	e7f2      	b.n	1acea <_svfiprintf_r+0x19a>
   1ad04:	3307      	adds	r3, #7
   1ad06:	e7d5      	b.n	1acb4 <_svfiprintf_r+0x164>
   1ad08:	ab05      	add	r3, sp, #20
   1ad0a:	9300      	str	r3, [sp, #0]
   1ad0c:	003a      	movs	r2, r7
   1ad0e:	4b11      	ldr	r3, [pc, #68]	; (1ad54 <_svfiprintf_r+0x204>)
   1ad10:	0029      	movs	r1, r5
   1ad12:	9802      	ldr	r0, [sp, #8]
   1ad14:	e000      	b.n	1ad18 <_svfiprintf_r+0x1c8>
   1ad16:	bf00      	nop
   1ad18:	9003      	str	r0, [sp, #12]
   1ad1a:	9b03      	ldr	r3, [sp, #12]
   1ad1c:	3301      	adds	r3, #1
   1ad1e:	d1cc      	bne.n	1acba <_svfiprintf_r+0x16a>
   1ad20:	89bb      	ldrh	r3, [r7, #12]
   1ad22:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ad24:	065b      	lsls	r3, r3, #25
   1ad26:	d400      	bmi.n	1ad2a <_svfiprintf_r+0x1da>
   1ad28:	e729      	b.n	1ab7e <_svfiprintf_r+0x2e>
   1ad2a:	2001      	movs	r0, #1
   1ad2c:	4240      	negs	r0, r0
   1ad2e:	e726      	b.n	1ab7e <_svfiprintf_r+0x2e>
   1ad30:	ab05      	add	r3, sp, #20
   1ad32:	9300      	str	r3, [sp, #0]
   1ad34:	003a      	movs	r2, r7
   1ad36:	4b07      	ldr	r3, [pc, #28]	; (1ad54 <_svfiprintf_r+0x204>)
   1ad38:	0029      	movs	r1, r5
   1ad3a:	9802      	ldr	r0, [sp, #8]
   1ad3c:	f000 f9be 	bl	1b0bc <_printf_i>
   1ad40:	e7ea      	b.n	1ad18 <_svfiprintf_r+0x1c8>
   1ad42:	46c0      	nop			; (mov r8, r8)
   1ad44:	0001d5dc 	.word	0x0001d5dc
   1ad48:	0001d5e2 	.word	0x0001d5e2
   1ad4c:	0001d5e6 	.word	0x0001d5e6
   1ad50:	00000000 	.word	0x00000000
   1ad54:	0001aa8d 	.word	0x0001aa8d

0001ad58 <__sfputc_r>:
   1ad58:	6893      	ldr	r3, [r2, #8]
   1ad5a:	b510      	push	{r4, lr}
   1ad5c:	3b01      	subs	r3, #1
   1ad5e:	6093      	str	r3, [r2, #8]
   1ad60:	2b00      	cmp	r3, #0
   1ad62:	da05      	bge.n	1ad70 <__sfputc_r+0x18>
   1ad64:	6994      	ldr	r4, [r2, #24]
   1ad66:	42a3      	cmp	r3, r4
   1ad68:	db08      	blt.n	1ad7c <__sfputc_r+0x24>
   1ad6a:	b2cb      	uxtb	r3, r1
   1ad6c:	2b0a      	cmp	r3, #10
   1ad6e:	d005      	beq.n	1ad7c <__sfputc_r+0x24>
   1ad70:	6813      	ldr	r3, [r2, #0]
   1ad72:	1c58      	adds	r0, r3, #1
   1ad74:	6010      	str	r0, [r2, #0]
   1ad76:	7019      	strb	r1, [r3, #0]
   1ad78:	b2c8      	uxtb	r0, r1
   1ad7a:	bd10      	pop	{r4, pc}
   1ad7c:	f7ff fb84 	bl	1a488 <__swbuf_r>
   1ad80:	e7fb      	b.n	1ad7a <__sfputc_r+0x22>

0001ad82 <__sfputs_r>:
   1ad82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad84:	0006      	movs	r6, r0
   1ad86:	000f      	movs	r7, r1
   1ad88:	0014      	movs	r4, r2
   1ad8a:	18d5      	adds	r5, r2, r3
   1ad8c:	42ac      	cmp	r4, r5
   1ad8e:	d101      	bne.n	1ad94 <__sfputs_r+0x12>
   1ad90:	2000      	movs	r0, #0
   1ad92:	e007      	b.n	1ada4 <__sfputs_r+0x22>
   1ad94:	7821      	ldrb	r1, [r4, #0]
   1ad96:	003a      	movs	r2, r7
   1ad98:	0030      	movs	r0, r6
   1ad9a:	f7ff ffdd 	bl	1ad58 <__sfputc_r>
   1ad9e:	3401      	adds	r4, #1
   1ada0:	1c43      	adds	r3, r0, #1
   1ada2:	d1f3      	bne.n	1ad8c <__sfputs_r+0xa>
   1ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001ada8 <_vfiprintf_r>:
   1ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adaa:	b09f      	sub	sp, #124	; 0x7c
   1adac:	0006      	movs	r6, r0
   1adae:	000f      	movs	r7, r1
   1adb0:	0014      	movs	r4, r2
   1adb2:	9305      	str	r3, [sp, #20]
   1adb4:	2800      	cmp	r0, #0
   1adb6:	d004      	beq.n	1adc2 <_vfiprintf_r+0x1a>
   1adb8:	6983      	ldr	r3, [r0, #24]
   1adba:	2b00      	cmp	r3, #0
   1adbc:	d101      	bne.n	1adc2 <_vfiprintf_r+0x1a>
   1adbe:	f7ff fd4d 	bl	1a85c <__sinit>
   1adc2:	4b7f      	ldr	r3, [pc, #508]	; (1afc0 <_vfiprintf_r+0x218>)
   1adc4:	429f      	cmp	r7, r3
   1adc6:	d15c      	bne.n	1ae82 <_vfiprintf_r+0xda>
   1adc8:	6877      	ldr	r7, [r6, #4]
   1adca:	89bb      	ldrh	r3, [r7, #12]
   1adcc:	071b      	lsls	r3, r3, #28
   1adce:	d562      	bpl.n	1ae96 <_vfiprintf_r+0xee>
   1add0:	693b      	ldr	r3, [r7, #16]
   1add2:	2b00      	cmp	r3, #0
   1add4:	d05f      	beq.n	1ae96 <_vfiprintf_r+0xee>
   1add6:	2300      	movs	r3, #0
   1add8:	ad06      	add	r5, sp, #24
   1adda:	616b      	str	r3, [r5, #20]
   1addc:	3320      	adds	r3, #32
   1adde:	766b      	strb	r3, [r5, #25]
   1ade0:	3310      	adds	r3, #16
   1ade2:	76ab      	strb	r3, [r5, #26]
   1ade4:	9402      	str	r4, [sp, #8]
   1ade6:	9c02      	ldr	r4, [sp, #8]
   1ade8:	7823      	ldrb	r3, [r4, #0]
   1adea:	2b00      	cmp	r3, #0
   1adec:	d15d      	bne.n	1aeaa <_vfiprintf_r+0x102>
   1adee:	9b02      	ldr	r3, [sp, #8]
   1adf0:	1ae3      	subs	r3, r4, r3
   1adf2:	9304      	str	r3, [sp, #16]
   1adf4:	d00d      	beq.n	1ae12 <_vfiprintf_r+0x6a>
   1adf6:	9b04      	ldr	r3, [sp, #16]
   1adf8:	9a02      	ldr	r2, [sp, #8]
   1adfa:	0039      	movs	r1, r7
   1adfc:	0030      	movs	r0, r6
   1adfe:	f7ff ffc0 	bl	1ad82 <__sfputs_r>
   1ae02:	1c43      	adds	r3, r0, #1
   1ae04:	d100      	bne.n	1ae08 <_vfiprintf_r+0x60>
   1ae06:	e0cc      	b.n	1afa2 <_vfiprintf_r+0x1fa>
   1ae08:	696a      	ldr	r2, [r5, #20]
   1ae0a:	9b04      	ldr	r3, [sp, #16]
   1ae0c:	4694      	mov	ip, r2
   1ae0e:	4463      	add	r3, ip
   1ae10:	616b      	str	r3, [r5, #20]
   1ae12:	7823      	ldrb	r3, [r4, #0]
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d100      	bne.n	1ae1a <_vfiprintf_r+0x72>
   1ae18:	e0c3      	b.n	1afa2 <_vfiprintf_r+0x1fa>
   1ae1a:	2201      	movs	r2, #1
   1ae1c:	2300      	movs	r3, #0
   1ae1e:	4252      	negs	r2, r2
   1ae20:	606a      	str	r2, [r5, #4]
   1ae22:	a902      	add	r1, sp, #8
   1ae24:	3254      	adds	r2, #84	; 0x54
   1ae26:	1852      	adds	r2, r2, r1
   1ae28:	3401      	adds	r4, #1
   1ae2a:	602b      	str	r3, [r5, #0]
   1ae2c:	60eb      	str	r3, [r5, #12]
   1ae2e:	60ab      	str	r3, [r5, #8]
   1ae30:	7013      	strb	r3, [r2, #0]
   1ae32:	65ab      	str	r3, [r5, #88]	; 0x58
   1ae34:	7821      	ldrb	r1, [r4, #0]
   1ae36:	2205      	movs	r2, #5
   1ae38:	4862      	ldr	r0, [pc, #392]	; (1afc4 <_vfiprintf_r+0x21c>)
   1ae3a:	f000 fac7 	bl	1b3cc <memchr>
   1ae3e:	1c63      	adds	r3, r4, #1
   1ae40:	469c      	mov	ip, r3
   1ae42:	2800      	cmp	r0, #0
   1ae44:	d135      	bne.n	1aeb2 <_vfiprintf_r+0x10a>
   1ae46:	6829      	ldr	r1, [r5, #0]
   1ae48:	06cb      	lsls	r3, r1, #27
   1ae4a:	d504      	bpl.n	1ae56 <_vfiprintf_r+0xae>
   1ae4c:	2353      	movs	r3, #83	; 0x53
   1ae4e:	aa02      	add	r2, sp, #8
   1ae50:	3020      	adds	r0, #32
   1ae52:	189b      	adds	r3, r3, r2
   1ae54:	7018      	strb	r0, [r3, #0]
   1ae56:	070b      	lsls	r3, r1, #28
   1ae58:	d504      	bpl.n	1ae64 <_vfiprintf_r+0xbc>
   1ae5a:	2353      	movs	r3, #83	; 0x53
   1ae5c:	202b      	movs	r0, #43	; 0x2b
   1ae5e:	aa02      	add	r2, sp, #8
   1ae60:	189b      	adds	r3, r3, r2
   1ae62:	7018      	strb	r0, [r3, #0]
   1ae64:	7823      	ldrb	r3, [r4, #0]
   1ae66:	2b2a      	cmp	r3, #42	; 0x2a
   1ae68:	d02c      	beq.n	1aec4 <_vfiprintf_r+0x11c>
   1ae6a:	2000      	movs	r0, #0
   1ae6c:	210a      	movs	r1, #10
   1ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae70:	7822      	ldrb	r2, [r4, #0]
   1ae72:	3a30      	subs	r2, #48	; 0x30
   1ae74:	2a09      	cmp	r2, #9
   1ae76:	d800      	bhi.n	1ae7a <_vfiprintf_r+0xd2>
   1ae78:	e06b      	b.n	1af52 <_vfiprintf_r+0x1aa>
   1ae7a:	2800      	cmp	r0, #0
   1ae7c:	d02a      	beq.n	1aed4 <_vfiprintf_r+0x12c>
   1ae7e:	9309      	str	r3, [sp, #36]	; 0x24
   1ae80:	e028      	b.n	1aed4 <_vfiprintf_r+0x12c>
   1ae82:	4b51      	ldr	r3, [pc, #324]	; (1afc8 <_vfiprintf_r+0x220>)
   1ae84:	429f      	cmp	r7, r3
   1ae86:	d101      	bne.n	1ae8c <_vfiprintf_r+0xe4>
   1ae88:	68b7      	ldr	r7, [r6, #8]
   1ae8a:	e79e      	b.n	1adca <_vfiprintf_r+0x22>
   1ae8c:	4b4f      	ldr	r3, [pc, #316]	; (1afcc <_vfiprintf_r+0x224>)
   1ae8e:	429f      	cmp	r7, r3
   1ae90:	d19b      	bne.n	1adca <_vfiprintf_r+0x22>
   1ae92:	68f7      	ldr	r7, [r6, #12]
   1ae94:	e799      	b.n	1adca <_vfiprintf_r+0x22>
   1ae96:	0039      	movs	r1, r7
   1ae98:	0030      	movs	r0, r6
   1ae9a:	f7ff fb5f 	bl	1a55c <__swsetup_r>
   1ae9e:	2800      	cmp	r0, #0
   1aea0:	d099      	beq.n	1add6 <_vfiprintf_r+0x2e>
   1aea2:	2001      	movs	r0, #1
   1aea4:	4240      	negs	r0, r0
   1aea6:	b01f      	add	sp, #124	; 0x7c
   1aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aeaa:	2b25      	cmp	r3, #37	; 0x25
   1aeac:	d09f      	beq.n	1adee <_vfiprintf_r+0x46>
   1aeae:	3401      	adds	r4, #1
   1aeb0:	e79a      	b.n	1ade8 <_vfiprintf_r+0x40>
   1aeb2:	4b44      	ldr	r3, [pc, #272]	; (1afc4 <_vfiprintf_r+0x21c>)
   1aeb4:	6829      	ldr	r1, [r5, #0]
   1aeb6:	1ac0      	subs	r0, r0, r3
   1aeb8:	2301      	movs	r3, #1
   1aeba:	4083      	lsls	r3, r0
   1aebc:	430b      	orrs	r3, r1
   1aebe:	602b      	str	r3, [r5, #0]
   1aec0:	4664      	mov	r4, ip
   1aec2:	e7b7      	b.n	1ae34 <_vfiprintf_r+0x8c>
   1aec4:	9b05      	ldr	r3, [sp, #20]
   1aec6:	1d18      	adds	r0, r3, #4
   1aec8:	681b      	ldr	r3, [r3, #0]
   1aeca:	9005      	str	r0, [sp, #20]
   1aecc:	2b00      	cmp	r3, #0
   1aece:	db3a      	blt.n	1af46 <_vfiprintf_r+0x19e>
   1aed0:	9309      	str	r3, [sp, #36]	; 0x24
   1aed2:	4664      	mov	r4, ip
   1aed4:	7823      	ldrb	r3, [r4, #0]
   1aed6:	2b2e      	cmp	r3, #46	; 0x2e
   1aed8:	d10b      	bne.n	1aef2 <_vfiprintf_r+0x14a>
   1aeda:	7863      	ldrb	r3, [r4, #1]
   1aedc:	1c62      	adds	r2, r4, #1
   1aede:	2b2a      	cmp	r3, #42	; 0x2a
   1aee0:	d13f      	bne.n	1af62 <_vfiprintf_r+0x1ba>
   1aee2:	9b05      	ldr	r3, [sp, #20]
   1aee4:	3402      	adds	r4, #2
   1aee6:	1d1a      	adds	r2, r3, #4
   1aee8:	681b      	ldr	r3, [r3, #0]
   1aeea:	9205      	str	r2, [sp, #20]
   1aeec:	2b00      	cmp	r3, #0
   1aeee:	db35      	blt.n	1af5c <_vfiprintf_r+0x1b4>
   1aef0:	9307      	str	r3, [sp, #28]
   1aef2:	7821      	ldrb	r1, [r4, #0]
   1aef4:	2203      	movs	r2, #3
   1aef6:	4836      	ldr	r0, [pc, #216]	; (1afd0 <_vfiprintf_r+0x228>)
   1aef8:	f000 fa68 	bl	1b3cc <memchr>
   1aefc:	2800      	cmp	r0, #0
   1aefe:	d007      	beq.n	1af10 <_vfiprintf_r+0x168>
   1af00:	4b33      	ldr	r3, [pc, #204]	; (1afd0 <_vfiprintf_r+0x228>)
   1af02:	682a      	ldr	r2, [r5, #0]
   1af04:	1ac0      	subs	r0, r0, r3
   1af06:	2340      	movs	r3, #64	; 0x40
   1af08:	4083      	lsls	r3, r0
   1af0a:	4313      	orrs	r3, r2
   1af0c:	602b      	str	r3, [r5, #0]
   1af0e:	3401      	adds	r4, #1
   1af10:	7821      	ldrb	r1, [r4, #0]
   1af12:	1c63      	adds	r3, r4, #1
   1af14:	2206      	movs	r2, #6
   1af16:	482f      	ldr	r0, [pc, #188]	; (1afd4 <_vfiprintf_r+0x22c>)
   1af18:	9302      	str	r3, [sp, #8]
   1af1a:	7629      	strb	r1, [r5, #24]
   1af1c:	f000 fa56 	bl	1b3cc <memchr>
   1af20:	2800      	cmp	r0, #0
   1af22:	d044      	beq.n	1afae <_vfiprintf_r+0x206>
   1af24:	4b2c      	ldr	r3, [pc, #176]	; (1afd8 <_vfiprintf_r+0x230>)
   1af26:	2b00      	cmp	r3, #0
   1af28:	d12f      	bne.n	1af8a <_vfiprintf_r+0x1e2>
   1af2a:	6829      	ldr	r1, [r5, #0]
   1af2c:	9b05      	ldr	r3, [sp, #20]
   1af2e:	2207      	movs	r2, #7
   1af30:	05c9      	lsls	r1, r1, #23
   1af32:	d528      	bpl.n	1af86 <_vfiprintf_r+0x1de>
   1af34:	189b      	adds	r3, r3, r2
   1af36:	4393      	bics	r3, r2
   1af38:	3308      	adds	r3, #8
   1af3a:	9305      	str	r3, [sp, #20]
   1af3c:	696b      	ldr	r3, [r5, #20]
   1af3e:	9a03      	ldr	r2, [sp, #12]
   1af40:	189b      	adds	r3, r3, r2
   1af42:	616b      	str	r3, [r5, #20]
   1af44:	e74f      	b.n	1ade6 <_vfiprintf_r+0x3e>
   1af46:	425b      	negs	r3, r3
   1af48:	60eb      	str	r3, [r5, #12]
   1af4a:	2302      	movs	r3, #2
   1af4c:	430b      	orrs	r3, r1
   1af4e:	602b      	str	r3, [r5, #0]
   1af50:	e7bf      	b.n	1aed2 <_vfiprintf_r+0x12a>
   1af52:	434b      	muls	r3, r1
   1af54:	3401      	adds	r4, #1
   1af56:	189b      	adds	r3, r3, r2
   1af58:	2001      	movs	r0, #1
   1af5a:	e789      	b.n	1ae70 <_vfiprintf_r+0xc8>
   1af5c:	2301      	movs	r3, #1
   1af5e:	425b      	negs	r3, r3
   1af60:	e7c6      	b.n	1aef0 <_vfiprintf_r+0x148>
   1af62:	2300      	movs	r3, #0
   1af64:	0014      	movs	r4, r2
   1af66:	200a      	movs	r0, #10
   1af68:	001a      	movs	r2, r3
   1af6a:	606b      	str	r3, [r5, #4]
   1af6c:	7821      	ldrb	r1, [r4, #0]
   1af6e:	3930      	subs	r1, #48	; 0x30
   1af70:	2909      	cmp	r1, #9
   1af72:	d903      	bls.n	1af7c <_vfiprintf_r+0x1d4>
   1af74:	2b00      	cmp	r3, #0
   1af76:	d0bc      	beq.n	1aef2 <_vfiprintf_r+0x14a>
   1af78:	9207      	str	r2, [sp, #28]
   1af7a:	e7ba      	b.n	1aef2 <_vfiprintf_r+0x14a>
   1af7c:	4342      	muls	r2, r0
   1af7e:	3401      	adds	r4, #1
   1af80:	1852      	adds	r2, r2, r1
   1af82:	2301      	movs	r3, #1
   1af84:	e7f2      	b.n	1af6c <_vfiprintf_r+0x1c4>
   1af86:	3307      	adds	r3, #7
   1af88:	e7d5      	b.n	1af36 <_vfiprintf_r+0x18e>
   1af8a:	ab05      	add	r3, sp, #20
   1af8c:	9300      	str	r3, [sp, #0]
   1af8e:	003a      	movs	r2, r7
   1af90:	4b12      	ldr	r3, [pc, #72]	; (1afdc <_vfiprintf_r+0x234>)
   1af92:	0029      	movs	r1, r5
   1af94:	0030      	movs	r0, r6
   1af96:	e000      	b.n	1af9a <_vfiprintf_r+0x1f2>
   1af98:	bf00      	nop
   1af9a:	9003      	str	r0, [sp, #12]
   1af9c:	9b03      	ldr	r3, [sp, #12]
   1af9e:	3301      	adds	r3, #1
   1afa0:	d1cc      	bne.n	1af3c <_vfiprintf_r+0x194>
   1afa2:	89bb      	ldrh	r3, [r7, #12]
   1afa4:	065b      	lsls	r3, r3, #25
   1afa6:	d500      	bpl.n	1afaa <_vfiprintf_r+0x202>
   1afa8:	e77b      	b.n	1aea2 <_vfiprintf_r+0xfa>
   1afaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1afac:	e77b      	b.n	1aea6 <_vfiprintf_r+0xfe>
   1afae:	ab05      	add	r3, sp, #20
   1afb0:	9300      	str	r3, [sp, #0]
   1afb2:	003a      	movs	r2, r7
   1afb4:	4b09      	ldr	r3, [pc, #36]	; (1afdc <_vfiprintf_r+0x234>)
   1afb6:	0029      	movs	r1, r5
   1afb8:	0030      	movs	r0, r6
   1afba:	f000 f87f 	bl	1b0bc <_printf_i>
   1afbe:	e7ec      	b.n	1af9a <_vfiprintf_r+0x1f2>
   1afc0:	0001d59c 	.word	0x0001d59c
   1afc4:	0001d5dc 	.word	0x0001d5dc
   1afc8:	0001d5bc 	.word	0x0001d5bc
   1afcc:	0001d57c 	.word	0x0001d57c
   1afd0:	0001d5e2 	.word	0x0001d5e2
   1afd4:	0001d5e6 	.word	0x0001d5e6
   1afd8:	00000000 	.word	0x00000000
   1afdc:	0001ad83 	.word	0x0001ad83

0001afe0 <_printf_common>:
   1afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1afe2:	0015      	movs	r5, r2
   1afe4:	9301      	str	r3, [sp, #4]
   1afe6:	688a      	ldr	r2, [r1, #8]
   1afe8:	690b      	ldr	r3, [r1, #16]
   1afea:	9000      	str	r0, [sp, #0]
   1afec:	000c      	movs	r4, r1
   1afee:	4293      	cmp	r3, r2
   1aff0:	da00      	bge.n	1aff4 <_printf_common+0x14>
   1aff2:	0013      	movs	r3, r2
   1aff4:	0022      	movs	r2, r4
   1aff6:	602b      	str	r3, [r5, #0]
   1aff8:	3243      	adds	r2, #67	; 0x43
   1affa:	7812      	ldrb	r2, [r2, #0]
   1affc:	2a00      	cmp	r2, #0
   1affe:	d001      	beq.n	1b004 <_printf_common+0x24>
   1b000:	3301      	adds	r3, #1
   1b002:	602b      	str	r3, [r5, #0]
   1b004:	6823      	ldr	r3, [r4, #0]
   1b006:	069b      	lsls	r3, r3, #26
   1b008:	d502      	bpl.n	1b010 <_printf_common+0x30>
   1b00a:	682b      	ldr	r3, [r5, #0]
   1b00c:	3302      	adds	r3, #2
   1b00e:	602b      	str	r3, [r5, #0]
   1b010:	2706      	movs	r7, #6
   1b012:	6823      	ldr	r3, [r4, #0]
   1b014:	401f      	ands	r7, r3
   1b016:	d027      	beq.n	1b068 <_printf_common+0x88>
   1b018:	0023      	movs	r3, r4
   1b01a:	3343      	adds	r3, #67	; 0x43
   1b01c:	781b      	ldrb	r3, [r3, #0]
   1b01e:	1e5a      	subs	r2, r3, #1
   1b020:	4193      	sbcs	r3, r2
   1b022:	6822      	ldr	r2, [r4, #0]
   1b024:	0692      	lsls	r2, r2, #26
   1b026:	d430      	bmi.n	1b08a <_printf_common+0xaa>
   1b028:	0022      	movs	r2, r4
   1b02a:	9901      	ldr	r1, [sp, #4]
   1b02c:	3243      	adds	r2, #67	; 0x43
   1b02e:	9800      	ldr	r0, [sp, #0]
   1b030:	9e08      	ldr	r6, [sp, #32]
   1b032:	47b0      	blx	r6
   1b034:	1c43      	adds	r3, r0, #1
   1b036:	d025      	beq.n	1b084 <_printf_common+0xa4>
   1b038:	2306      	movs	r3, #6
   1b03a:	6820      	ldr	r0, [r4, #0]
   1b03c:	682a      	ldr	r2, [r5, #0]
   1b03e:	68e1      	ldr	r1, [r4, #12]
   1b040:	4003      	ands	r3, r0
   1b042:	2500      	movs	r5, #0
   1b044:	2b04      	cmp	r3, #4
   1b046:	d103      	bne.n	1b050 <_printf_common+0x70>
   1b048:	1a8d      	subs	r5, r1, r2
   1b04a:	43eb      	mvns	r3, r5
   1b04c:	17db      	asrs	r3, r3, #31
   1b04e:	401d      	ands	r5, r3
   1b050:	68a3      	ldr	r3, [r4, #8]
   1b052:	6922      	ldr	r2, [r4, #16]
   1b054:	4293      	cmp	r3, r2
   1b056:	dd01      	ble.n	1b05c <_printf_common+0x7c>
   1b058:	1a9b      	subs	r3, r3, r2
   1b05a:	18ed      	adds	r5, r5, r3
   1b05c:	2700      	movs	r7, #0
   1b05e:	42bd      	cmp	r5, r7
   1b060:	d120      	bne.n	1b0a4 <_printf_common+0xc4>
   1b062:	2000      	movs	r0, #0
   1b064:	e010      	b.n	1b088 <_printf_common+0xa8>
   1b066:	3701      	adds	r7, #1
   1b068:	68e3      	ldr	r3, [r4, #12]
   1b06a:	682a      	ldr	r2, [r5, #0]
   1b06c:	1a9b      	subs	r3, r3, r2
   1b06e:	429f      	cmp	r7, r3
   1b070:	dad2      	bge.n	1b018 <_printf_common+0x38>
   1b072:	0022      	movs	r2, r4
   1b074:	2301      	movs	r3, #1
   1b076:	3219      	adds	r2, #25
   1b078:	9901      	ldr	r1, [sp, #4]
   1b07a:	9800      	ldr	r0, [sp, #0]
   1b07c:	9e08      	ldr	r6, [sp, #32]
   1b07e:	47b0      	blx	r6
   1b080:	1c43      	adds	r3, r0, #1
   1b082:	d1f0      	bne.n	1b066 <_printf_common+0x86>
   1b084:	2001      	movs	r0, #1
   1b086:	4240      	negs	r0, r0
   1b088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b08a:	2030      	movs	r0, #48	; 0x30
   1b08c:	18e1      	adds	r1, r4, r3
   1b08e:	3143      	adds	r1, #67	; 0x43
   1b090:	7008      	strb	r0, [r1, #0]
   1b092:	0021      	movs	r1, r4
   1b094:	1c5a      	adds	r2, r3, #1
   1b096:	3145      	adds	r1, #69	; 0x45
   1b098:	7809      	ldrb	r1, [r1, #0]
   1b09a:	18a2      	adds	r2, r4, r2
   1b09c:	3243      	adds	r2, #67	; 0x43
   1b09e:	3302      	adds	r3, #2
   1b0a0:	7011      	strb	r1, [r2, #0]
   1b0a2:	e7c1      	b.n	1b028 <_printf_common+0x48>
   1b0a4:	0022      	movs	r2, r4
   1b0a6:	2301      	movs	r3, #1
   1b0a8:	321a      	adds	r2, #26
   1b0aa:	9901      	ldr	r1, [sp, #4]
   1b0ac:	9800      	ldr	r0, [sp, #0]
   1b0ae:	9e08      	ldr	r6, [sp, #32]
   1b0b0:	47b0      	blx	r6
   1b0b2:	1c43      	adds	r3, r0, #1
   1b0b4:	d0e6      	beq.n	1b084 <_printf_common+0xa4>
   1b0b6:	3701      	adds	r7, #1
   1b0b8:	e7d1      	b.n	1b05e <_printf_common+0x7e>
	...

0001b0bc <_printf_i>:
   1b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0be:	b08b      	sub	sp, #44	; 0x2c
   1b0c0:	9206      	str	r2, [sp, #24]
   1b0c2:	000a      	movs	r2, r1
   1b0c4:	3243      	adds	r2, #67	; 0x43
   1b0c6:	9307      	str	r3, [sp, #28]
   1b0c8:	9005      	str	r0, [sp, #20]
   1b0ca:	9204      	str	r2, [sp, #16]
   1b0cc:	7e0a      	ldrb	r2, [r1, #24]
   1b0ce:	000c      	movs	r4, r1
   1b0d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b0d2:	2a6e      	cmp	r2, #110	; 0x6e
   1b0d4:	d100      	bne.n	1b0d8 <_printf_i+0x1c>
   1b0d6:	e08f      	b.n	1b1f8 <_printf_i+0x13c>
   1b0d8:	d817      	bhi.n	1b10a <_printf_i+0x4e>
   1b0da:	2a63      	cmp	r2, #99	; 0x63
   1b0dc:	d02c      	beq.n	1b138 <_printf_i+0x7c>
   1b0de:	d808      	bhi.n	1b0f2 <_printf_i+0x36>
   1b0e0:	2a00      	cmp	r2, #0
   1b0e2:	d100      	bne.n	1b0e6 <_printf_i+0x2a>
   1b0e4:	e099      	b.n	1b21a <_printf_i+0x15e>
   1b0e6:	2a58      	cmp	r2, #88	; 0x58
   1b0e8:	d054      	beq.n	1b194 <_printf_i+0xd8>
   1b0ea:	0026      	movs	r6, r4
   1b0ec:	3642      	adds	r6, #66	; 0x42
   1b0ee:	7032      	strb	r2, [r6, #0]
   1b0f0:	e029      	b.n	1b146 <_printf_i+0x8a>
   1b0f2:	2a64      	cmp	r2, #100	; 0x64
   1b0f4:	d001      	beq.n	1b0fa <_printf_i+0x3e>
   1b0f6:	2a69      	cmp	r2, #105	; 0x69
   1b0f8:	d1f7      	bne.n	1b0ea <_printf_i+0x2e>
   1b0fa:	6821      	ldr	r1, [r4, #0]
   1b0fc:	681a      	ldr	r2, [r3, #0]
   1b0fe:	0608      	lsls	r0, r1, #24
   1b100:	d523      	bpl.n	1b14a <_printf_i+0x8e>
   1b102:	1d11      	adds	r1, r2, #4
   1b104:	6019      	str	r1, [r3, #0]
   1b106:	6815      	ldr	r5, [r2, #0]
   1b108:	e025      	b.n	1b156 <_printf_i+0x9a>
   1b10a:	2a73      	cmp	r2, #115	; 0x73
   1b10c:	d100      	bne.n	1b110 <_printf_i+0x54>
   1b10e:	e088      	b.n	1b222 <_printf_i+0x166>
   1b110:	d808      	bhi.n	1b124 <_printf_i+0x68>
   1b112:	2a6f      	cmp	r2, #111	; 0x6f
   1b114:	d029      	beq.n	1b16a <_printf_i+0xae>
   1b116:	2a70      	cmp	r2, #112	; 0x70
   1b118:	d1e7      	bne.n	1b0ea <_printf_i+0x2e>
   1b11a:	2220      	movs	r2, #32
   1b11c:	6809      	ldr	r1, [r1, #0]
   1b11e:	430a      	orrs	r2, r1
   1b120:	6022      	str	r2, [r4, #0]
   1b122:	e003      	b.n	1b12c <_printf_i+0x70>
   1b124:	2a75      	cmp	r2, #117	; 0x75
   1b126:	d020      	beq.n	1b16a <_printf_i+0xae>
   1b128:	2a78      	cmp	r2, #120	; 0x78
   1b12a:	d1de      	bne.n	1b0ea <_printf_i+0x2e>
   1b12c:	0022      	movs	r2, r4
   1b12e:	2178      	movs	r1, #120	; 0x78
   1b130:	3245      	adds	r2, #69	; 0x45
   1b132:	7011      	strb	r1, [r2, #0]
   1b134:	4a6c      	ldr	r2, [pc, #432]	; (1b2e8 <_printf_i+0x22c>)
   1b136:	e030      	b.n	1b19a <_printf_i+0xde>
   1b138:	000e      	movs	r6, r1
   1b13a:	681a      	ldr	r2, [r3, #0]
   1b13c:	3642      	adds	r6, #66	; 0x42
   1b13e:	1d11      	adds	r1, r2, #4
   1b140:	6019      	str	r1, [r3, #0]
   1b142:	6813      	ldr	r3, [r2, #0]
   1b144:	7033      	strb	r3, [r6, #0]
   1b146:	2301      	movs	r3, #1
   1b148:	e079      	b.n	1b23e <_printf_i+0x182>
   1b14a:	0649      	lsls	r1, r1, #25
   1b14c:	d5d9      	bpl.n	1b102 <_printf_i+0x46>
   1b14e:	1d11      	adds	r1, r2, #4
   1b150:	6019      	str	r1, [r3, #0]
   1b152:	2300      	movs	r3, #0
   1b154:	5ed5      	ldrsh	r5, [r2, r3]
   1b156:	2d00      	cmp	r5, #0
   1b158:	da03      	bge.n	1b162 <_printf_i+0xa6>
   1b15a:	232d      	movs	r3, #45	; 0x2d
   1b15c:	9a04      	ldr	r2, [sp, #16]
   1b15e:	426d      	negs	r5, r5
   1b160:	7013      	strb	r3, [r2, #0]
   1b162:	4b62      	ldr	r3, [pc, #392]	; (1b2ec <_printf_i+0x230>)
   1b164:	270a      	movs	r7, #10
   1b166:	9303      	str	r3, [sp, #12]
   1b168:	e02f      	b.n	1b1ca <_printf_i+0x10e>
   1b16a:	6820      	ldr	r0, [r4, #0]
   1b16c:	6819      	ldr	r1, [r3, #0]
   1b16e:	0605      	lsls	r5, r0, #24
   1b170:	d503      	bpl.n	1b17a <_printf_i+0xbe>
   1b172:	1d08      	adds	r0, r1, #4
   1b174:	6018      	str	r0, [r3, #0]
   1b176:	680d      	ldr	r5, [r1, #0]
   1b178:	e005      	b.n	1b186 <_printf_i+0xca>
   1b17a:	0640      	lsls	r0, r0, #25
   1b17c:	d5f9      	bpl.n	1b172 <_printf_i+0xb6>
   1b17e:	680d      	ldr	r5, [r1, #0]
   1b180:	1d08      	adds	r0, r1, #4
   1b182:	6018      	str	r0, [r3, #0]
   1b184:	b2ad      	uxth	r5, r5
   1b186:	4b59      	ldr	r3, [pc, #356]	; (1b2ec <_printf_i+0x230>)
   1b188:	2708      	movs	r7, #8
   1b18a:	9303      	str	r3, [sp, #12]
   1b18c:	2a6f      	cmp	r2, #111	; 0x6f
   1b18e:	d018      	beq.n	1b1c2 <_printf_i+0x106>
   1b190:	270a      	movs	r7, #10
   1b192:	e016      	b.n	1b1c2 <_printf_i+0x106>
   1b194:	3145      	adds	r1, #69	; 0x45
   1b196:	700a      	strb	r2, [r1, #0]
   1b198:	4a54      	ldr	r2, [pc, #336]	; (1b2ec <_printf_i+0x230>)
   1b19a:	9203      	str	r2, [sp, #12]
   1b19c:	681a      	ldr	r2, [r3, #0]
   1b19e:	6821      	ldr	r1, [r4, #0]
   1b1a0:	1d10      	adds	r0, r2, #4
   1b1a2:	6018      	str	r0, [r3, #0]
   1b1a4:	6815      	ldr	r5, [r2, #0]
   1b1a6:	0608      	lsls	r0, r1, #24
   1b1a8:	d522      	bpl.n	1b1f0 <_printf_i+0x134>
   1b1aa:	07cb      	lsls	r3, r1, #31
   1b1ac:	d502      	bpl.n	1b1b4 <_printf_i+0xf8>
   1b1ae:	2320      	movs	r3, #32
   1b1b0:	4319      	orrs	r1, r3
   1b1b2:	6021      	str	r1, [r4, #0]
   1b1b4:	2710      	movs	r7, #16
   1b1b6:	2d00      	cmp	r5, #0
   1b1b8:	d103      	bne.n	1b1c2 <_printf_i+0x106>
   1b1ba:	2320      	movs	r3, #32
   1b1bc:	6822      	ldr	r2, [r4, #0]
   1b1be:	439a      	bics	r2, r3
   1b1c0:	6022      	str	r2, [r4, #0]
   1b1c2:	0023      	movs	r3, r4
   1b1c4:	2200      	movs	r2, #0
   1b1c6:	3343      	adds	r3, #67	; 0x43
   1b1c8:	701a      	strb	r2, [r3, #0]
   1b1ca:	6863      	ldr	r3, [r4, #4]
   1b1cc:	60a3      	str	r3, [r4, #8]
   1b1ce:	2b00      	cmp	r3, #0
   1b1d0:	db5c      	blt.n	1b28c <_printf_i+0x1d0>
   1b1d2:	2204      	movs	r2, #4
   1b1d4:	6821      	ldr	r1, [r4, #0]
   1b1d6:	4391      	bics	r1, r2
   1b1d8:	6021      	str	r1, [r4, #0]
   1b1da:	2d00      	cmp	r5, #0
   1b1dc:	d158      	bne.n	1b290 <_printf_i+0x1d4>
   1b1de:	9e04      	ldr	r6, [sp, #16]
   1b1e0:	2b00      	cmp	r3, #0
   1b1e2:	d064      	beq.n	1b2ae <_printf_i+0x1f2>
   1b1e4:	0026      	movs	r6, r4
   1b1e6:	9b03      	ldr	r3, [sp, #12]
   1b1e8:	3642      	adds	r6, #66	; 0x42
   1b1ea:	781b      	ldrb	r3, [r3, #0]
   1b1ec:	7033      	strb	r3, [r6, #0]
   1b1ee:	e05e      	b.n	1b2ae <_printf_i+0x1f2>
   1b1f0:	0648      	lsls	r0, r1, #25
   1b1f2:	d5da      	bpl.n	1b1aa <_printf_i+0xee>
   1b1f4:	b2ad      	uxth	r5, r5
   1b1f6:	e7d8      	b.n	1b1aa <_printf_i+0xee>
   1b1f8:	6809      	ldr	r1, [r1, #0]
   1b1fa:	681a      	ldr	r2, [r3, #0]
   1b1fc:	0608      	lsls	r0, r1, #24
   1b1fe:	d505      	bpl.n	1b20c <_printf_i+0x150>
   1b200:	1d11      	adds	r1, r2, #4
   1b202:	6019      	str	r1, [r3, #0]
   1b204:	6813      	ldr	r3, [r2, #0]
   1b206:	6962      	ldr	r2, [r4, #20]
   1b208:	601a      	str	r2, [r3, #0]
   1b20a:	e006      	b.n	1b21a <_printf_i+0x15e>
   1b20c:	0649      	lsls	r1, r1, #25
   1b20e:	d5f7      	bpl.n	1b200 <_printf_i+0x144>
   1b210:	1d11      	adds	r1, r2, #4
   1b212:	6019      	str	r1, [r3, #0]
   1b214:	6813      	ldr	r3, [r2, #0]
   1b216:	8aa2      	ldrh	r2, [r4, #20]
   1b218:	801a      	strh	r2, [r3, #0]
   1b21a:	2300      	movs	r3, #0
   1b21c:	9e04      	ldr	r6, [sp, #16]
   1b21e:	6123      	str	r3, [r4, #16]
   1b220:	e054      	b.n	1b2cc <_printf_i+0x210>
   1b222:	681a      	ldr	r2, [r3, #0]
   1b224:	1d11      	adds	r1, r2, #4
   1b226:	6019      	str	r1, [r3, #0]
   1b228:	6816      	ldr	r6, [r2, #0]
   1b22a:	2100      	movs	r1, #0
   1b22c:	6862      	ldr	r2, [r4, #4]
   1b22e:	0030      	movs	r0, r6
   1b230:	f000 f8cc 	bl	1b3cc <memchr>
   1b234:	2800      	cmp	r0, #0
   1b236:	d001      	beq.n	1b23c <_printf_i+0x180>
   1b238:	1b80      	subs	r0, r0, r6
   1b23a:	6060      	str	r0, [r4, #4]
   1b23c:	6863      	ldr	r3, [r4, #4]
   1b23e:	6123      	str	r3, [r4, #16]
   1b240:	2300      	movs	r3, #0
   1b242:	9a04      	ldr	r2, [sp, #16]
   1b244:	7013      	strb	r3, [r2, #0]
   1b246:	e041      	b.n	1b2cc <_printf_i+0x210>
   1b248:	6923      	ldr	r3, [r4, #16]
   1b24a:	0032      	movs	r2, r6
   1b24c:	9906      	ldr	r1, [sp, #24]
   1b24e:	9805      	ldr	r0, [sp, #20]
   1b250:	9d07      	ldr	r5, [sp, #28]
   1b252:	47a8      	blx	r5
   1b254:	1c43      	adds	r3, r0, #1
   1b256:	d043      	beq.n	1b2e0 <_printf_i+0x224>
   1b258:	6823      	ldr	r3, [r4, #0]
   1b25a:	2500      	movs	r5, #0
   1b25c:	079b      	lsls	r3, r3, #30
   1b25e:	d40f      	bmi.n	1b280 <_printf_i+0x1c4>
   1b260:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b262:	68e0      	ldr	r0, [r4, #12]
   1b264:	4298      	cmp	r0, r3
   1b266:	da3d      	bge.n	1b2e4 <_printf_i+0x228>
   1b268:	0018      	movs	r0, r3
   1b26a:	e03b      	b.n	1b2e4 <_printf_i+0x228>
   1b26c:	0022      	movs	r2, r4
   1b26e:	2301      	movs	r3, #1
   1b270:	3219      	adds	r2, #25
   1b272:	9906      	ldr	r1, [sp, #24]
   1b274:	9805      	ldr	r0, [sp, #20]
   1b276:	9e07      	ldr	r6, [sp, #28]
   1b278:	47b0      	blx	r6
   1b27a:	1c43      	adds	r3, r0, #1
   1b27c:	d030      	beq.n	1b2e0 <_printf_i+0x224>
   1b27e:	3501      	adds	r5, #1
   1b280:	68e3      	ldr	r3, [r4, #12]
   1b282:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b284:	1a9b      	subs	r3, r3, r2
   1b286:	429d      	cmp	r5, r3
   1b288:	dbf0      	blt.n	1b26c <_printf_i+0x1b0>
   1b28a:	e7e9      	b.n	1b260 <_printf_i+0x1a4>
   1b28c:	2d00      	cmp	r5, #0
   1b28e:	d0a9      	beq.n	1b1e4 <_printf_i+0x128>
   1b290:	9e04      	ldr	r6, [sp, #16]
   1b292:	0028      	movs	r0, r5
   1b294:	0039      	movs	r1, r7
   1b296:	f7fc fe87 	bl	17fa8 <__aeabi_uidivmod>
   1b29a:	9b03      	ldr	r3, [sp, #12]
   1b29c:	3e01      	subs	r6, #1
   1b29e:	5c5b      	ldrb	r3, [r3, r1]
   1b2a0:	0028      	movs	r0, r5
   1b2a2:	7033      	strb	r3, [r6, #0]
   1b2a4:	0039      	movs	r1, r7
   1b2a6:	f7fc fdf9 	bl	17e9c <__udivsi3>
   1b2aa:	1e05      	subs	r5, r0, #0
   1b2ac:	d1f1      	bne.n	1b292 <_printf_i+0x1d6>
   1b2ae:	2f08      	cmp	r7, #8
   1b2b0:	d109      	bne.n	1b2c6 <_printf_i+0x20a>
   1b2b2:	6823      	ldr	r3, [r4, #0]
   1b2b4:	07db      	lsls	r3, r3, #31
   1b2b6:	d506      	bpl.n	1b2c6 <_printf_i+0x20a>
   1b2b8:	6863      	ldr	r3, [r4, #4]
   1b2ba:	6922      	ldr	r2, [r4, #16]
   1b2bc:	4293      	cmp	r3, r2
   1b2be:	dc02      	bgt.n	1b2c6 <_printf_i+0x20a>
   1b2c0:	2330      	movs	r3, #48	; 0x30
   1b2c2:	3e01      	subs	r6, #1
   1b2c4:	7033      	strb	r3, [r6, #0]
   1b2c6:	9b04      	ldr	r3, [sp, #16]
   1b2c8:	1b9b      	subs	r3, r3, r6
   1b2ca:	6123      	str	r3, [r4, #16]
   1b2cc:	9b07      	ldr	r3, [sp, #28]
   1b2ce:	aa09      	add	r2, sp, #36	; 0x24
   1b2d0:	9300      	str	r3, [sp, #0]
   1b2d2:	0021      	movs	r1, r4
   1b2d4:	9b06      	ldr	r3, [sp, #24]
   1b2d6:	9805      	ldr	r0, [sp, #20]
   1b2d8:	f7ff fe82 	bl	1afe0 <_printf_common>
   1b2dc:	1c43      	adds	r3, r0, #1
   1b2de:	d1b3      	bne.n	1b248 <_printf_i+0x18c>
   1b2e0:	2001      	movs	r0, #1
   1b2e2:	4240      	negs	r0, r0
   1b2e4:	b00b      	add	sp, #44	; 0x2c
   1b2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2e8:	0001d5fe 	.word	0x0001d5fe
   1b2ec:	0001d5ed 	.word	0x0001d5ed

0001b2f0 <_putc_r>:
   1b2f0:	b570      	push	{r4, r5, r6, lr}
   1b2f2:	0006      	movs	r6, r0
   1b2f4:	000d      	movs	r5, r1
   1b2f6:	0014      	movs	r4, r2
   1b2f8:	2800      	cmp	r0, #0
   1b2fa:	d004      	beq.n	1b306 <_putc_r+0x16>
   1b2fc:	6983      	ldr	r3, [r0, #24]
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	d101      	bne.n	1b306 <_putc_r+0x16>
   1b302:	f7ff faab 	bl	1a85c <__sinit>
   1b306:	4b12      	ldr	r3, [pc, #72]	; (1b350 <_putc_r+0x60>)
   1b308:	429c      	cmp	r4, r3
   1b30a:	d111      	bne.n	1b330 <_putc_r+0x40>
   1b30c:	6874      	ldr	r4, [r6, #4]
   1b30e:	68a3      	ldr	r3, [r4, #8]
   1b310:	3b01      	subs	r3, #1
   1b312:	60a3      	str	r3, [r4, #8]
   1b314:	2b00      	cmp	r3, #0
   1b316:	da05      	bge.n	1b324 <_putc_r+0x34>
   1b318:	69a2      	ldr	r2, [r4, #24]
   1b31a:	4293      	cmp	r3, r2
   1b31c:	db12      	blt.n	1b344 <_putc_r+0x54>
   1b31e:	b2eb      	uxtb	r3, r5
   1b320:	2b0a      	cmp	r3, #10
   1b322:	d00f      	beq.n	1b344 <_putc_r+0x54>
   1b324:	6823      	ldr	r3, [r4, #0]
   1b326:	b2e8      	uxtb	r0, r5
   1b328:	1c5a      	adds	r2, r3, #1
   1b32a:	6022      	str	r2, [r4, #0]
   1b32c:	701d      	strb	r5, [r3, #0]
   1b32e:	bd70      	pop	{r4, r5, r6, pc}
   1b330:	4b08      	ldr	r3, [pc, #32]	; (1b354 <_putc_r+0x64>)
   1b332:	429c      	cmp	r4, r3
   1b334:	d101      	bne.n	1b33a <_putc_r+0x4a>
   1b336:	68b4      	ldr	r4, [r6, #8]
   1b338:	e7e9      	b.n	1b30e <_putc_r+0x1e>
   1b33a:	4b07      	ldr	r3, [pc, #28]	; (1b358 <_putc_r+0x68>)
   1b33c:	429c      	cmp	r4, r3
   1b33e:	d1e6      	bne.n	1b30e <_putc_r+0x1e>
   1b340:	68f4      	ldr	r4, [r6, #12]
   1b342:	e7e4      	b.n	1b30e <_putc_r+0x1e>
   1b344:	0022      	movs	r2, r4
   1b346:	0029      	movs	r1, r5
   1b348:	0030      	movs	r0, r6
   1b34a:	f7ff f89d 	bl	1a488 <__swbuf_r>
   1b34e:	e7ee      	b.n	1b32e <_putc_r+0x3e>
   1b350:	0001d59c 	.word	0x0001d59c
   1b354:	0001d5bc 	.word	0x0001d5bc
   1b358:	0001d57c 	.word	0x0001d57c

0001b35c <_read_r>:
   1b35c:	b570      	push	{r4, r5, r6, lr}
   1b35e:	0005      	movs	r5, r0
   1b360:	0008      	movs	r0, r1
   1b362:	0011      	movs	r1, r2
   1b364:	2200      	movs	r2, #0
   1b366:	4c06      	ldr	r4, [pc, #24]	; (1b380 <_read_r+0x24>)
   1b368:	6022      	str	r2, [r4, #0]
   1b36a:	001a      	movs	r2, r3
   1b36c:	f7fa fcd2 	bl	15d14 <_read>
   1b370:	1c43      	adds	r3, r0, #1
   1b372:	d103      	bne.n	1b37c <_read_r+0x20>
   1b374:	6823      	ldr	r3, [r4, #0]
   1b376:	2b00      	cmp	r3, #0
   1b378:	d000      	beq.n	1b37c <_read_r+0x20>
   1b37a:	602b      	str	r3, [r5, #0]
   1b37c:	bd70      	pop	{r4, r5, r6, pc}
   1b37e:	46c0      	nop			; (mov r8, r8)
   1b380:	20001854 	.word	0x20001854

0001b384 <_fstat_r>:
   1b384:	2300      	movs	r3, #0
   1b386:	b570      	push	{r4, r5, r6, lr}
   1b388:	4c06      	ldr	r4, [pc, #24]	; (1b3a4 <_fstat_r+0x20>)
   1b38a:	0005      	movs	r5, r0
   1b38c:	0008      	movs	r0, r1
   1b38e:	0011      	movs	r1, r2
   1b390:	6023      	str	r3, [r4, #0]
   1b392:	f7fa fd47 	bl	15e24 <_fstat>
   1b396:	1c43      	adds	r3, r0, #1
   1b398:	d103      	bne.n	1b3a2 <_fstat_r+0x1e>
   1b39a:	6823      	ldr	r3, [r4, #0]
   1b39c:	2b00      	cmp	r3, #0
   1b39e:	d000      	beq.n	1b3a2 <_fstat_r+0x1e>
   1b3a0:	602b      	str	r3, [r5, #0]
   1b3a2:	bd70      	pop	{r4, r5, r6, pc}
   1b3a4:	20001854 	.word	0x20001854

0001b3a8 <_isatty_r>:
   1b3a8:	2300      	movs	r3, #0
   1b3aa:	b570      	push	{r4, r5, r6, lr}
   1b3ac:	4c06      	ldr	r4, [pc, #24]	; (1b3c8 <_isatty_r+0x20>)
   1b3ae:	0005      	movs	r5, r0
   1b3b0:	0008      	movs	r0, r1
   1b3b2:	6023      	str	r3, [r4, #0]
   1b3b4:	f7fa fd44 	bl	15e40 <_isatty>
   1b3b8:	1c43      	adds	r3, r0, #1
   1b3ba:	d103      	bne.n	1b3c4 <_isatty_r+0x1c>
   1b3bc:	6823      	ldr	r3, [r4, #0]
   1b3be:	2b00      	cmp	r3, #0
   1b3c0:	d000      	beq.n	1b3c4 <_isatty_r+0x1c>
   1b3c2:	602b      	str	r3, [r5, #0]
   1b3c4:	bd70      	pop	{r4, r5, r6, pc}
   1b3c6:	46c0      	nop			; (mov r8, r8)
   1b3c8:	20001854 	.word	0x20001854

0001b3cc <memchr>:
   1b3cc:	b2c9      	uxtb	r1, r1
   1b3ce:	1882      	adds	r2, r0, r2
   1b3d0:	4290      	cmp	r0, r2
   1b3d2:	d101      	bne.n	1b3d8 <memchr+0xc>
   1b3d4:	2000      	movs	r0, #0
   1b3d6:	4770      	bx	lr
   1b3d8:	7803      	ldrb	r3, [r0, #0]
   1b3da:	428b      	cmp	r3, r1
   1b3dc:	d0fb      	beq.n	1b3d6 <memchr+0xa>
   1b3de:	3001      	adds	r0, #1
   1b3e0:	e7f6      	b.n	1b3d0 <memchr+0x4>

0001b3e2 <_realloc_r>:
   1b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3e4:	0007      	movs	r7, r0
   1b3e6:	000d      	movs	r5, r1
   1b3e8:	0016      	movs	r6, r2
   1b3ea:	2900      	cmp	r1, #0
   1b3ec:	d105      	bne.n	1b3fa <_realloc_r+0x18>
   1b3ee:	0011      	movs	r1, r2
   1b3f0:	f7fe fda8 	bl	19f44 <_malloc_r>
   1b3f4:	0004      	movs	r4, r0
   1b3f6:	0020      	movs	r0, r4
   1b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3fa:	2a00      	cmp	r2, #0
   1b3fc:	d103      	bne.n	1b406 <_realloc_r+0x24>
   1b3fe:	f7fe fd57 	bl	19eb0 <_free_r>
   1b402:	0034      	movs	r4, r6
   1b404:	e7f7      	b.n	1b3f6 <_realloc_r+0x14>
   1b406:	f000 f812 	bl	1b42e <_malloc_usable_size_r>
   1b40a:	002c      	movs	r4, r5
   1b40c:	4286      	cmp	r6, r0
   1b40e:	d9f2      	bls.n	1b3f6 <_realloc_r+0x14>
   1b410:	0031      	movs	r1, r6
   1b412:	0038      	movs	r0, r7
   1b414:	f7fe fd96 	bl	19f44 <_malloc_r>
   1b418:	1e04      	subs	r4, r0, #0
   1b41a:	d0ec      	beq.n	1b3f6 <_realloc_r+0x14>
   1b41c:	0029      	movs	r1, r5
   1b41e:	0032      	movs	r2, r6
   1b420:	f7fe fd23 	bl	19e6a <memcpy>
   1b424:	0029      	movs	r1, r5
   1b426:	0038      	movs	r0, r7
   1b428:	f7fe fd42 	bl	19eb0 <_free_r>
   1b42c:	e7e3      	b.n	1b3f6 <_realloc_r+0x14>

0001b42e <_malloc_usable_size_r>:
   1b42e:	1f0b      	subs	r3, r1, #4
   1b430:	681b      	ldr	r3, [r3, #0]
   1b432:	1f18      	subs	r0, r3, #4
   1b434:	2b00      	cmp	r3, #0
   1b436:	da01      	bge.n	1b43c <_malloc_usable_size_r+0xe>
   1b438:	580b      	ldr	r3, [r1, r0]
   1b43a:	18c0      	adds	r0, r0, r3
   1b43c:	4770      	bx	lr
   1b43e:	0000      	movs	r0, r0
   1b440:	50504128 	.word	0x50504128
   1b444:	52452829 	.word	0x52452829
   1b448:	255b2952 	.word	0x255b2952
   1b44c:	255b5d73 	.word	0x255b5d73
   1b450:	00005d64 	.word	0x00005d64
   1b454:	61766e69 	.word	0x61766e69
   1b458:	6564696c 	.word	0x6564696c
   1b45c:	636f6920 	.word	0x636f6920
   1b460:	6320746c 	.word	0x6320746c
   1b464:	0000646d 	.word	0x0000646d

0001b468 <__FUNCTION__.14704>:
   1b468:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1b478:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1b488:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1b498:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1b4a8:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1b4b8:	74207075 63206568 00706968 66696828     up the chip.(hif
   1b4c8:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1b4d8:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   1b4e8:	66696828 64612029 73657264 75622073     (hif) address bu
   1b4f8:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   1b508:	70757272 20646574 6b636170 53207465     rrupted packet S
   1b518:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   1b528:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   1b538:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   1b548:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   1b558:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1b568:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1b578:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1b588:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1b598:	69676572 72657473 00006465 70797243     registered..Cryp
   1b5a8:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1b5b8:	7220746f 73696765 65726574 00000064     ot registered...
   1b5c8:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1b5d8:	6f6e2073 65722074 74736967 64657265     s not registered
   1b5e8:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   1b5f8:	72672064 2070756f 00004449 66696828     d group ID..(hif
   1b608:	6f682029 61207473 64207070 276e6469     ) host app didn'
   1b618:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   1b628:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   1b638:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   1b648:	61462029 2065736c 65746e69 70757272     ) False interrup
   1b658:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1b668:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1b678:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1b688:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1b698:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1b6a8:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1b6b8:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1b6c8:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1b6d8:	75716552 65747365 69532064 6920657a     Requested Size i
   1b6e8:	616c2073 72656772 61687420 6874206e     s larger than th
   1b6f8:	65722065 65766963 75622064 72656666     e recived buffer
   1b708:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   1b718:	00000000 20505041 75716552 65747365     ....APP Requeste
   1b728:	64412064 73657264 65622073 646e6f79     d Address beyond
   1b738:	65687420 63657220 64657669 66756220      the recived buf
   1b748:	20726566 72646461 20737365 20646e61     fer address and 
   1b758:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1b768:	0000000a 00001894 00001864 0000185c     ........d...\...
   1b778:	00001874 0000186c 0000188c 0000187c     t...l.......|...
   1b788:	00001884                                ....

0001b78c <__FUNCTION__.13353>:
   1b78c:	5f666968 646e6573 00000000              hif_send....

0001b798 <__FUNCTION__.13363>:
   1b798:	5f666968 00727369                       hif_isr.

0001b7a0 <__FUNCTION__.13369>:
   1b7a0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001b7b0 <__FUNCTION__.13381>:
   1b7b0:	5f666968 65636572 00657669              hif_receive.

0001b7bc <__FUNCTION__.13397>:
   1b7bc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1b7cc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1b7dc:	00005d64 6f727245 65722072 76696563     d]..Error receiv
   1b7ec:	20676e69 204c5353 6d6f7266 65687420     ing SSL from the
   1b7fc:	46494820 00000000 5f666968 69676572      HIF....hif_regi
   1b80c:	72657473 2862635f 61662029 64656c69     ster_cb() failed
   1b81c:	74697720 65722068 64253d74 00000000      with ret=%d....

0001b82c <__FUNCTION__.13368>:
   1b82c:	5f6d326d 5f6c7373 00006263              m2m_ssl_cb..

0001b838 <__FUNCTION__.13414>:
   1b838:	5f6d326d 5f6c7373 74696e69 00000000     m2m_ssl_init....
   1b848:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1b858:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1b868:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   1b878:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1b888:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   1b898:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   1b8a8:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1b8b8:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1b8c8:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1b8d8:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1b8e8:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1b8f8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   1b908:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   1b918:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   1b928:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   1b938:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1b948:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1b958:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1b968:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1b978:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1b988:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1b998:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1b9a8:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1b9b8:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1b9c8:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1b9d8:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   1b9e8:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1b9f8:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1ba08:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1ba18:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1ba28:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1ba38:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1ba48:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1ba58:	0000000a 313a3831 30303a32 00000000     ....18:12:00....
   1ba68:	20677541 32203620 00383130 76697244     Aug  6 2018.Driv
   1ba78:	62207265 746c6975 20746120 25097325     er built at %s.%
   1ba88:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1ba98:	7277616d 65562065 6f697372 0000006e     mawre Version...
   1baa8:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   1bab8:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   1bac8:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   1bad8:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   1bae8:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   1baf8:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   1bb08:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   1bb18:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   1bb28:	53502074 656b204b 656c2079 6874676e     t PSK key length
   1bb38:	00000000 65646e75 656e6966 65732064     ....undefined se
   1bb48:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   1bb58:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   1bb68:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   1bb78:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   1bb88:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   1bb98:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   1bba8:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   1bbb8:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   1bbc8:	66754220 20726566 65637865 64656465      Buffer exceeded
   1bbd8:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1bbe8:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1bbf8:	00000000                                ....

0001bbfc <__FUNCTION__.13332>:
   1bbfc:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001bc08 <__FUNCTION__.13361>:
   1bc08:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001bc18 <__FUNCTION__.13389>:
   1bc18:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1bc28:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   1bc38:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   1bc48:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   1bc58:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   1bc68:	20656874 70696863 00000000 50504128     the chip....(APP
   1bc78:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   1bc88:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   1bc98:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   1bca8:	6c616974 00657a69                       tialize.

0001bcb0 <__FUNCTION__.13195>:
   1bcb0:	70696863 6b61775f 00000065              chip_wake...

0001bcbc <__FUNCTION__.13244>:
   1bcbc:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   1bccc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1bcdc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1bcec:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   1bcfc:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   1bd0c:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   1bd1c:	6e65206f 656c6261 746e6920 75727265     o enable interru
   1bd2c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   1bd3c:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   1bd4c:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   1bd5c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   1bd6c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   1bd7c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   1bd8c:	75622074 00000073                       t bus...

0001bd94 <__FUNCTION__.13242>:
   1bd94:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001bda0 <__FUNCTION__.13249>:
   1bda0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0001bdb0 <crc7_syndrome_table>:
   1bdb0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1bdc0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1bdd0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1bde0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1bdf0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1be00:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1be10:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1be20:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1be30:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1be40:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1be50:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1be60:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1be70:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1be80:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1be90:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1bea0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1beb0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1bec0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   1bed0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1bee0:	73756220 72726520 2e2e726f 0000002e      bus error......
   1bef0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bf00:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   1bf10:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bf20:	61642064 72206174 6f707365 2065736e     d data response 
   1bf30:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   1bf40:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bf50:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1bf60:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1bf70:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1bf80:	656c6961 61642064 72206174 6f707365     ailed data respo
   1bf90:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1bfa0:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1bfb0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1bfc0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1bfd0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1bfe0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1bff0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1c000:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1c010:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1c020:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1c030:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1c040:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1c050:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   1c060:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1c070:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c080:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1c090:	69727720 202c6574 20737562 6f727265      write, bus erro
   1c0a0:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   1c0b0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1c0c0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   1c0d0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1c0e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1c0f0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   1c100:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1c110:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1c120:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1c130:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   1c140:	00000000 65736552 6e612074 65722064     ....Reset and re
   1c150:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1c160:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1c170:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1c180:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1c190:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1c1a0:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1c1b0:	69727720 62206574 6b636f6c 30252820      write block (%0
   1c1c0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1c1d0:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   1c1e0:	61746164 69727720 2e2e6574 0000002e     data write......
   1c1f0:	65736552 6e612074 65722064 20797274     Reset and retry 
   1c200:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1c210:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1c220:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1c230:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1c240:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1c250:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1c260:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1c270:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1c280:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1c290:	6e612074 65722064 20797274 25206425     t and retry %d %
   1c2a0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1c2b0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1c2c0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1c2d0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c2e0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1c2f0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1c300:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1c310:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1c320:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1c330:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c340:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1c350:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   1c360:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   1c370:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   1c380:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c390:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1c3a0:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   1c3b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1c3c0:	6e692064 6e726574 77206c61 65746972     d internal write
   1c3d0:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1c3e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c3f0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1c400:	64692070 002e2e2e 00003948 00003948     p id....H9..H9..
   1c410:	000039d8 0000389c 000038e2 00003904     .9...8...8...9..
   1c420:	0000398a 0000398a 00003a44 00003870     .9...9..D:..p8..
   1c430:	00003a9e 00003a9e 00003a9e 00003a9e     .:...:...:...:..
   1c440:	00003926                                &9..

0001c444 <__FUNCTION__.12543>:
   1c444:	5f697073 00646d63                       spi_cmd.

0001c44c <__FUNCTION__.12550>:
   1c44c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001c45c <__FUNCTION__.12559>:
   1c45c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001c468 <__FUNCTION__.12575>:
   1c468:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001c478 <__FUNCTION__.12590>:
   1c478:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001c488 <__FUNCTION__.12602>:
   1c488:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001c498 <__FUNCTION__.12613>:
   1c498:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001c4a8 <__FUNCTION__.12625>:
   1c4a8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001c4b8 <__FUNCTION__.12638>:
   1c4b8:	735f6d6e 725f6970 00646165              nm_spi_read.

0001c4c4 <__FUNCTION__.12663>:
   1c4c4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   1c4d4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1c4e4:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1c4f4:	25207465 65732064 6f697373 4449206e     et %d session ID
   1c504:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1c514:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1c524:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1c534:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1c544:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1c554:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   1c564:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   1c574:	204c5353 6b636f53 00007465 000052dc     SSL Socket...R..
   1c584:	000052ea 000052f8 00005306 00005314     .R...R...S...S..
   1c594:	00005efc 00005f0a 00005f18 00005f26     .^..._..._..&_..
   1c5a4:	00005f34 00006fe4 00006fe4 00006fea     4_...o...o...o..
   1c5b4:	00006f9e 00006fea 00006fb4 00006fe4     .o...o...o...o..
   1c5c4:	00006fea 00006fe4 00006fea 00006fe4     .o...o...o...o..
   1c5d4:	00006fea 00006fe4 00006fca 5454514d     .o...o...o..MQTT
   1c5e4:	00000000 7349514d 00007064 00007dd6     ....MQIsdp...}..
   1c5f4:	00007dde 00007de6 00007dee 00007df6     .}...}...}...}..
   1c604:	00007dfe 0000873a 0000884a 00008740     .}..:...J...@...
   1c614:	00008752 00008764 00008776 00008788     R...d...v.......
   1c624:	0000879a 000087ac 000087be 000087d2     ................
   1c634:	000087e6 000087fa 0000880e 00008822     ............"...
   1c644:	00008836 00000030 00006425 66302e25     6...0...%d..%.0f
   1c654:	00000000 00006525 00006625 00002222     ....%e..%f..""..
   1c664:	0c085c22 00090d0a 34302575 00000078     "\......u%04x...
   1c674:	6c6c756e 00000000 736c6166 00000065     null....false...
   1c684:	65757274 00000000 00005d5b 0000a806     true....[]......
   1c694:	0000a82e 0000a7de 0000a856 0000a868     ........V...h...
   1c6a4:	0000a87a 0000a88c 0000a8c4 0000a8d2     z...............
   1c6b4:	0000a8b6 0000a8e0 0000a8f0 0000a900     ................
   1c6c4:	0000a912 5454514d 73694420 6e6e6f63     ....MQTT Disconn
   1c6d4:	00746365 6f747541 63655220 656e6e6f     ect.Auto Reconne
   1c6e4:	69207463 6e652073 656c6261 52202c64     ct is enabled, R
   1c6f4:	6e6f6365 7463656e 20676e69 65747461     econnecting atte
   1c704:	2074706d 6c6c6977 61747320 6e207472     mpt will start n
   1c714:	0000776f 6f747541 63655220 656e6e6f     ow..Auto Reconne
   1c724:	6e207463 6520746f 6c62616e 202e6465     ct not enabled. 
   1c734:	72617453 676e6974 6e616d20 206c6175     Starting manual 
   1c744:	6f636572 63656e6e 2e2e2e74 00000000     reconnect.......
   1c754:	756e614d 52206c61 6e6f6365 7463656e     Manual Reconnect
   1c764:	63755320 73736563 006c7566 756e614d      Successful.Manu
   1c774:	52206c61 6e6f6365 7463656e 69614620     al Reconnect Fai
   1c784:	2064656c 6425202d 00000000 73627553     led - %d....Subs
   1c794:	62697263 61632065 61626c6c 00006b63     cribe callback..
   1c7a4:	732a2e25 2a2e2509 00000073 00000d0a     %.*s.%.*s.......
   1c7b4:	5f737761 5f746f69 7474716d 6275705f     aws_iot_mqtt_pub
   1c7c4:	6873696c 65202928 726f7272 6372202c     lish() error, rc
   1c7d4:	25203d20 00000a64 5f737761 5f746f69      = %d...aws_iot_
   1c7e4:	7474716d 75702020 73696c62 75732068     mqtt  publish su
   1c7f4:	73656363 21212173 0000000d 6e6e6f43     ccess!!!....Conn
   1c804:	69746365 2e2e676e 0000002e 6f727245     ecting......Erro
   1c814:	64252872 6f632029 63656e6e 676e6974     r(%d) connecting
   1c824:	206f7420 253a7325 00000064 62616e55      to %s:%d...Unab
   1c834:	7420656c 6573206f 75412074 52206f74     le to set Auto R
   1c844:	6e6f6365 7463656e 206f7420 65757274     econnect to true
   1c854:	25202d20 00000064 73627553 62697263      - %d...Subscrib
   1c864:	2e676e69 00002e2e 6f727245 75732072     ing.....Error su
   1c874:	72637362 6e696269 64252067 00000a0d     bscribing %d....
   1c884:	73627553 70697263 6e6f6974 63757320     Subscription suc
   1c894:	73736563 0000000d 63694d2f 68636f72     cess..../Microch
   1c8a4:	572f7069 445f4e53 2f6f6d65 6957694d     ip/WSN_Demo/MiWi
   1c8b4:	00000000 636e6977 30303531 2f746f49     ....winc1500Iot/
   1c8c4:	252f7325 00000073 0000b8b2 0000b8ba     %s/%s...........
   1c8d4:	0000b8c2 0000b8ca 0000b8d2 0000b8d2     ................
   1c8e4:	0000b8d2 0000b8ca 40030004 0000d20c     ...........@....
   1c8f4:	0000d250 0000d250 0000d250 0000d250     P...P...P...P...
   1c904:	0000d250 0000d2ac 0000d2c2 0000d2c2     P...............
   1c914:	0000d2c2 0000d2c2 0000d2c2 6b636170     ............pack
   1c924:	73207465 20646e65 6f727265 00000d72     et send error...
   1c934:	6d6d6f63 20646e61 70736572 65736e6f     command response
   1c944:	72726520 000d726f 01100080 08000200      error..........
   1c954:	09000200 00050400 43331104 0000d58e     ..........3C....
   1c964:	0000d5a6 0000d5bc 0000d5d2 0000d5e8     ................
   1c974:	0000d5fe 0000d86c 0000d884 0000d89a     ....l...........
   1c984:	0000d8b0 0000d8c6 0000d8dc 0000fea6     ................
   1c994:	00010046 0001025a 0001025a 0001025a     F...Z...Z...Z...
   1c9a4:	0001025a 0000ffc8 0001025a 0001025a     Z.......Z...Z...
   1c9b4:	0001025a 0001025a 0001025a 0001025a     Z...Z...Z...Z...
   1c9c4:	0001025a 0001025a 0001025a 00010178     Z...Z...Z...x...
   1c9d4:	000101d8 0001025a 0001025a 0001025a     ....Z...Z...Z...
   1c9e4:	0001025a 000101ba 6f727245 68772072     Z.......Error wh
   1c9f4:	64206e65 646f6365 736a2065 203a6e6f     en decode json: 
   1ca04:	5d73255b 0000000a 6d6d6f63 00646e61     [%s]....command.
   1ca14:	20474244 6d6d6f63 20646e61 7325203d     DBG command = %s
   1ca24:	0000000a 61647075 00006574 6f666e69     ....update..info
   1ca34:	00000000 61746164 65707954 00000000     ....dataType....
   1ca44:	756c6176 00000065 20474244 706d6574     value...DBG temp
   1ca54:	25203d20 000a0d64 4163616d 00726464      = %d...macAddr.
   1ca64:	20646441 65646f4e 73255b20 00000a5d     Add Node [%s]...
   1ca74:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   1ca84:	78323025 78323025 00000000 72616573     %02x%02x....sear
   1ca94:	00006863 00746567 72616573 65526863     ch..get.searchRe
   1caa4:	00007073 6f706572 6c417472 666e496c     sp..reportAllInf
   1cab4:	0000006f 6f706572 6e497472 00006f66     o...reportInfo..
   1cac4:	6f706572 69447472 6e6f6373 7463656e     reportDisconnect
   1cad4:	00000000 746e6f63 006c6f72 63627573     ....control.subc
   1cae4:	616d6d6f 0000646e 4e646461 0065646f     ommand..addNode.
   1caf4:	33746567 6f6c5064 74614474 00000061     get3dPlotData...
   1cb04:	6f636564 2d2d6564 2d2d2d2d 73250a2d     decode-------.%s
   1cb14:	0000000a 25203d6a 00000a64 20474244     ....j= %d...DBG 
   1cb24:	20646d63 7325203d 616d202c 203d2063     cmd = %s, mac = 
   1cb34:	202c7325 6f666e69 25203d20 00000a73     %s, info = %s...
   1cb44:	6e6f736a 6f6c4332 61446475 6d206174     json2CloudData m
   1cb54:	6f6c6c61 61662063 00006c69 6976696c     alloc fail..livi
   1cb64:	7220676e 006d6f6f 4c766564 7461636f     ng room.devLocat
   1cb74:	006e6f69 54766564 00657079 706d6574     ion.devType.temp
   1cb84:	00000000 00007675 56302e33 00000000     ....uv..3.0V....
   1cb94:	74746142 00797265 49535352 00000000     Battery.RSSI....
   1cba4:	706d6554 74617265 00657275 69676572     Temperature.regi
   1cbb4:	61727473 6e6f6974 00000000 65646f6e     stration....node
   1cbc4:	00004449 49207325 00000a6e 4e646e65     ID..%s In...endN
   1cbd4:	4965646f 006f666e 000112f0 000112fe     odeInfo.........
   1cbe4:	0001130c 0001131a 00011328 00011828     ........(...(...
   1cbf4:	00011836 00011844 00011852 00011860     6...D...R...`...
   1cc04:	42000000 42000400 42000800 42000c00     ...B...B...B...B
   1cc14:	42001000 43000400 0b0a0908 00000d0c     ...B...C........
   1cc24:	00012de4 00012df2 00012e00 00012e0e     .-...-..........
   1cc34:	00012e1c 000135a4 000135b2 000135c0     .....5...5...5..
   1cc44:	000135ce 000135dc 0001454a 000145c6     .5...5..JE...E..
   1cc54:	000145c6 0001456a 00014564 00014570     .E..jE..dE..pE..
   1cc64:	00014550 00014576 000145ac 00014880     PE..vE...E...H..
   1cc74:	000148de 000148de 000148da 00014872     .H...H...H..rH..
   1cc84:	00014892 0001485e 000148a0 000148b2     .H..^H...H...H..
   1cc94:	0001493e 0001498e 0001498e 0001498e     >I...I...I...I..
   1cca4:	00014930 00014950 0001491e 0001495e     0I..PI...I..^I..
   1ccb4:	00014978 000149fe 00014a64 00014a64     xI...I..dJ..dJ..
   1ccc4:	00014a60 000149e6 00014a16 000149ce     `J...I...J...I..
   1ccd4:	00014a2e 00014a48 00014d4c 00014d5a     .J..HJ..LM..ZM..
   1cce4:	00014d68 00014d76 00014d84 00015544     hM..vM...M..DU..
   1ccf4:	00015552 00015560 0001556e 0001557c     RU..`U..nU..|U..
   1cd04:	42002000 42002400 43000800 001d1b1b     . .B.$.B...C....
   1cd14:	00000002 00000100 00000002 00000200     ................
   1cd24:	00000003 00000004 5d64255b 49535320     ........[%d] SSI
   1cd34:	73253a44 00000a0d 5453414d 00535245     D:%s....MASTERS.
   1cd44:	6e756f46 73252064 000a0d20 7263696d     Found %s ...micr
   1cd54:	6968636f 00000070 206e6163 20746f6e     ochip...can not 
   1cd64:	646e6966 20504120 0a0d7325 00000000     find AP %s......
   1cd74:	462d6957 69642069 6e6f6373 7463656e     Wi-Fi disconnect
   1cd84:	000d6465 462d6957 6f632069 63656e6e     ed..Wi-Fi connec
   1cd94:	0d646574 00000000 462d6957 50492069     ted.....Wi-Fi IP
   1cda4:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
   1cdb4:	0000000a 614c0a0d 72207473 74657365     ......Last reset
   1cdc4:	75616320 203a6573 00000000 74737953      cause: ....Syst
   1cdd4:	52206d65 74657365 71655220 74736575     em Reset Request
   1cde4:	0000000d 63746157 676f6468 73655220     ....Watchdog Res
   1cdf4:	000d7465 65747845 6c616e72 73655220     et..External Res
   1ce04:	000d7465 776f7242 754f206e 33332074     et..Brown Out 33
   1ce14:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1ce24:	00000000 776f7242 754f206e 32312074     ....Brown Out 12
   1ce34:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1ce44:	00000000 65776f50 6e4f2d72 73655220     ....Power-On Res
   1ce54:	000d7465 57202d2d 31434e49 20303035     et..-- WINC1500 
   1ce64:	73205041 206e6163 6d617865 20656c70     AP scan example 
   1ce74:	0a0d2d2d 53202d2d 33524d41 50585f30     --..-- SAMR30_XP
   1ce84:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
   1ce94:	6f43202d 6c69706d 203a6465 20636544     - Compiled: Dec 
   1cea4:	32203032 20383130 343a3232 34323a35     20 2018 22:45:24
   1ceb4:	0d2d2d20 00000000 0000000d 74696e49      --.........Init
   1cec4:	696c6169 676e697a 4e535720 65442020     ializing WSN  De
   1ced4:	65636976 0000000d 5f757063 71657266     vice....cpu_freq
   1cee4:	0a64253d 00000000 65646f4e 00000000     =%d.....Node....
   1cef4:	65646f4e 3a644920 0a0d7325 00000000     Node Id:%s......
   1cf04:	65646f4e 203a6449 202c6425 706d6554     NodeId: %d, Temp
   1cf14:	2c64253a 53522020 203a4953 0a0d6425     :%d,  RSSI: %d..
   1cf24:	00000000 36636573 756f6330 203d746e     ....sec60count= 
   1cf34:	0a0d6425 00000000 5f775f72 00726f63     %d......r_w_cor.
   1cf44:	5f785f72 00726f63 5f795f72 00726f63     r_x_cor.r_y_cor.
   1cf54:	5f7a5f72 00726f63 69666977 736e6553     r_z_cor.wifiSens
   1cf64:	6f42726f 00647261 706d6574 00000000     orBoard.temp....
   1cf74:	006d7568 00007675 73657270 65727573     hum.uv..pressure
   1cf84:	00000000 706d6554 74617265 00657275     ....Temperature.
   1cf94:	49535352 00000000 74746142 00797265     RSSI....Battery.
   1cfa4:	5d50415b 50435420 72657320 20726576     [AP] TCP server 
   1cfb4:	6b636f73 25207465 6c632064 6465736f     socket %d closed
   1cfc4:	21642520 00000a0d 50504128 4e492829      %d!....(APP)(IN
   1cfd4:	00294f46 5d50415b 50435420 636f7320     FO).[AP] TCP soc
   1cfe4:	2074656b 646e6962 63757320 73736563     ket bind success
   1cff4:	00000d21 5d50415b 6e694220 61462064     !...[AP] Bind Fa
   1d004:	64656c69 7245202e 20726f72 65646f63     iled. Error code
   1d014:	25203d20 000a0d64 5d50415b 50435420      = %d...[AP] TCP
   1d024:	72657320 20726576 6b636f73 25207465      server socket %
   1d034:	6c632064 6465736f 000a0d21 5d50415b     d closed!...[AP]
   1d044:	50435420 72655320 20726576 6b636f53      TCP Server Sock
   1d054:	43207465 74616572 206e6f69 6c696146     et Creation Fail
   1d064:	000d6465 0000000d 646e6573 74616420     ed......send dat
   1d074:	6c202c61 3d206e65 0d642520 0000000a     a, len = %d.....
   1d084:	646e6573 0d212120 00000000 44495353     send !!.....SSID
   1d094:	6e656c20 0d64253d 0000000a 44495353      len=%d.....SSID
   1d0a4:	73253d20 00000a0d 74697257 6f632065      =%s....Write co
   1d0b4:	6769666e 67617020 00000d65 20474244     nfig page...DBG 
   1d0c4:	44495353 0d73253d 0000000a 6675625b     SSID=%s.....[buf
   1d0d4:	6f6f7420 616d7320 005d6c6c 61637461      too small].atca
   1d0e4:	65725f62 735f6461 61697265 756e5f6c     b_read_serial_nu
   1d0f4:	7265626d 66202928 656c6961 69772064     mber() failed wi
   1d104:	72206874 303d7465 38302578 000a0d58     th ret=0x%08X...
   1d114:	61637461 6e695f62 29286f66 69616620     atcab_info() fai
   1d124:	2064656c 68746977 74657220 2578303d     led with ret=0x%
   1d134:	0d583830 0000000a 70797243 44206f74     08X.....Crypto D
   1d144:	63697665 000d3a65 4e532020 2020203a     evice:..  SN:   
   1d154:	20202020 25202020 000a0d73 65442020            %s...  De
   1d164:	76655276 2020203a 25202020 000a0d73     vRev:      %s...
   1d174:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   1d184:	45525f49 435f5053 535f4e4f 45544154     I_RESP_CON_STATE
   1d194:	4148435f 4445474e 4f43203a 43454e4e     _CHANGED: CONNEC
   1d1a4:	0d444554 00000000 69666977 3a62635f     TED.....wifi_cb:
   1d1b4:	4d324d20 4649575f 45525f49 435f5053      M2M_WIFI_RESP_C
   1d1c4:	535f4e4f 45544154 4148435f 4445474e     ON_STATE_CHANGED
   1d1d4:	4944203a 4e4f4353 5443454e 000d4445     : DISCONNECTED..
   1d1e4:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   1d1f4:	45525f49 48445f51 435f5043 3a464e4f     I_REQ_DHCP_CONF:
   1d204:	20504920 25207369 75252e75 2e75252e      IP is %u.%u.%u.
   1d214:	0a0d7525 00000000 65636552 64657669     %u......Received
   1d224:	6d697420 00000d65 50504128 52452829      time...(APP)(ER
   1d234:	255b2952 255b5d73 00005d64 5f6d326d     R)[%s][%d]..m2m_
   1d244:	5f6c7373 72746572 65766569 7265635f     ssl_retrieve_cer
   1d254:	20292874 6c696166 77206465 20687469     t() failed with 
   1d264:	3d746572 00006425 5f6d326d 5f6c7373     ret=%d..m2m_ssl_
   1d274:	72746572 65766569 7361685f 20292868     retrieve_hash() 
   1d284:	6c696166 77206465 20687469 3d746572     failed with ret=
   1d294:	00006425 4c535f5f 3d20544f 2c752520     %d..__SLOT = %u,
   1d2a4:	72724520 25203d20 00000a58 69746341      Err = %X...Acti
   1d2b4:	53436576 74696220 3a70616d 78343025     veCS bitmap:%04x
   1d2c4:	0000000a 20656854 70797243 75416f74     ....The CryptoAu
   1d2d4:	694c6874 696c2062 72617262 61662079     thLib library fa
   1d2e4:	64656c69 206f7420 74696e69 696c6169     iled to initiali
   1d2f4:	002e657a 20656854 43455441 38303543     ze..The ATECC508
   1d304:	65642041 65636976 20736920 20746f6e     A device is not 
   1d314:	666e6f63 72756769 63206465 6572726f     configured corre
   1d324:	796c7463 0000002e 20656854 43455441     ctly....The ATEC
   1d334:	38303543 65642041 65636976 74616420     C508A device dat
   1d344:	6f7a2061 6920656e 6f6e2073 6e6f6320     a zone is no con
   1d354:	75676966 2e646572 00000d20 6e69616d     figured. ...main
   1d364:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   1d374:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
   1d384:	0000000a 6e69616d 326d203a 73735f6d     ....main: m2m_ss
   1d394:	6e695f6c 63207469 206c6c61 6f727265     l_init call erro
   1d3a4:	25282172 0a0d2964 00000000 6e69616d     r!(%d)......main
   1d3b4:	326d203a 73735f6d 65735f6c 63615f74     : m2m_ssl_set_ac
   1d3c4:	65766974 7069635f 73726568 65746975     tive_ciphersuite
   1d3d4:	61632073 65206c6c 726f7272 64252821     s call error!(%d
   1d3e4:	000a0d29 6e696854 616e2067 3d20656d     )...Thing name =
   1d3f4:	0d732520 0000000a 61746164 746e6f43      %s.....dataCont
   1d404:	006c6f72 62755367 69726373 435f6562     rol.gSubscribe_C
   1d414:	6e6e6168 203a6c65 0a0d7325 00000000     hannel: %s......
   1d424:	62755067 6873696c 6168435f 6c656e6e     gPublish_Channel
   1d434:	7325203a 00000a0d 5453414d 00535245     : %s....MASTERS.
   1d444:	7263696d 6968636f 00000070 6e6e6f63     microchip...conn
   1d454:	69746365 4120676e 73202c50 20646973     ecting AP, ssid 
   1d464:	7325203d 70202c20 203d6477 000a7325     = %s , pwd= %s..
   1d474:	000179ba 0001791a 00017958 00017940     .y...y..Xy..@y..
   1d484:	00017992 0001797c                       .y..|y..

0001d48c <__FUNCTION__.17510>:
   1d48c:	73646365 72705f61 7365636f 69735f73     ecdsa_process_si
   1d49c:	765f6e67 66697265 65725f79 73657571     gn_verify_reques
   1d4ac:	00000074                                t...

0001d4b0 <__FUNCTION__.17522>:
   1d4b0:	73646365 72705f61 7365636f 69735f73     ecdsa_process_si
   1d4c0:	675f6e67 725f6e65 65757165 00007473     gn_gen_request..
   1d4d0:	00018a70 00018a52 00018a0c 0001892a     p...R.......*...
   1d4e0:	00018a0c 00018a44 00018a0c 0001892a     ....D.......*...
   1d4f0:	00018a52 00018a52 00018a44 0001892a     R...R...D...*...
   1d500:	00018922 00018922 00018922 00018c88     "..."...".......
   1d510:	000192d0 00019190 00019190 0001918c     ................
   1d520:	000192a8 000192a8 0001929a 0001918c     ................
   1d530:	000192a8 0001929a 000192a8 0001918c     ................
   1d540:	000192b0 000192b0 000192b0 000194b4     ................

0001d550 <_global_impure_ptr>:
   1d550:	20000538 33323130 37363534 62613938     8.. 0123456789ab
   1d560:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   1d570:	76757473 7a797877 00000000              stuvwxyz....

0001d57c <__sf_fake_stderr>:
	...

0001d59c <__sf_fake_stdin>:
	...

0001d5bc <__sf_fake_stdout>:
	...
   1d5dc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1d5ec:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1d5fc:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1d60c:	00006665                                ef..

0001d610 <_init>:
   1d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d612:	46c0      	nop			; (mov r8, r8)
   1d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1d616:	bc08      	pop	{r3}
   1d618:	469e      	mov	lr, r3
   1d61a:	4770      	bx	lr

0001d61c <__init_array_start>:
   1d61c:	000000dd 	.word	0x000000dd

0001d620 <_fini>:
   1d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d622:	46c0      	nop			; (mov r8, r8)
   1d624:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1d626:	bc08      	pop	{r3}
   1d628:	469e      	mov	lr, r3
   1d62a:	4770      	bx	lr

0001d62c <__fini_array_start>:
   1d62c:	000000b5 	.word	0x000000b5
