
APPS_WSN_DEMO9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001f500  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000006a0  20000000  0001f500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000306a0  2**0
                  CONTENTS
  3 .bss          000020a8  200006a0  0001fba0  000306a0  2**2
                  ALLOC
  4 .stack        00002000  20002748  00021c48  000306a0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a0324  00000000  00000000  00030721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ce57  00000000  00000000  000d0a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e091  00000000  00000000  000dd89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002718  00000000  00000000  000eb92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000023e0  00000000  00000000  000ee045  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030f50  00000000  00000000  000f0425  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00035eea  00000000  00000000  00121375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000af773  00000000  00000000  0015725f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000094ac  00000000  00000000  002069d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 47 00 20 e9 75 01 00 7d 76 01 00 7d 76 01 00     HG. .u..}v..}v..
	...
      2c:	7d 76 01 00 00 00 00 00 00 00 00 00 7d 76 01 00     }v..........}v..
      3c:	7d 76 01 00 7d 76 01 00 e9 6d 00 00 11 66 00 00     }v..}v...m...f..
      4c:	bd 2b 01 00 7d 76 01 00 7d 76 01 00 7d 76 01 00     .+..}v..}v..}v..
      5c:	7d 76 01 00 11 45 01 00 29 45 01 00 41 45 01 00     }v...E..)E..AE..
      6c:	59 45 01 00 71 45 01 00 89 45 01 00 7d 76 01 00     YE..qE...E..}v..
      7c:	7d 76 01 00 7d 76 01 00 89 6d 01 00 9d 6d 01 00     }v..}v...m...m..
	...
      94:	b1 6d 01 00 7d 76 01 00 7d 76 01 00 00 00 00 00     .m..}v..}v......
      a4:	7d 76 01 00 00 00 00 00 00 00 00 00 00 00 00 00     }v..............

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200006a0 	.word	0x200006a0
      d4:	00000000 	.word	0x00000000
      d8:	0001f500 	.word	0x0001f500

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200006a4 	.word	0x200006a4
     108:	0001f500 	.word	0x0001f500
     10c:	0001f500 	.word	0x0001f500
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	40002800 	.word	0x40002800

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     210:	b580      	push	{r7, lr}
     212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <system_interrupt_enable_global+0x18>)
     216:	2201      	movs	r2, #1
     218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     21a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
}
     220:	46c0      	nop			; (mov r8, r8)
     222:	46bd      	mov	sp, r7
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	200005b8 	.word	0x200005b8

0000022c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     22c:	b580      	push	{r7, lr}
     22e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     230:	4b04      	ldr	r3, [pc, #16]	; (244 <chip_isr+0x18>)
     232:	681b      	ldr	r3, [r3, #0]
     234:	2b00      	cmp	r3, #0
     236:	d002      	beq.n	23e <chip_isr+0x12>
		gpfIsr();
     238:	4b02      	ldr	r3, [pc, #8]	; (244 <chip_isr+0x18>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4798      	blx	r3
	}
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	bd80      	pop	{r7, pc}
     244:	200006bc 	.word	0x200006bc

00000248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0018      	movs	r0, r3
     252:	4b0c      	ldr	r3, [pc, #48]	; (284 <init_chip_pins+0x3c>)
     254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     256:	1d3b      	adds	r3, r7, #4
     258:	2201      	movs	r2, #1
     25a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     25c:	1d3b      	adds	r3, r7, #4
     25e:	0019      	movs	r1, r3
     260:	200d      	movs	r0, #13
     262:	4b09      	ldr	r3, [pc, #36]	; (288 <init_chip_pins+0x40>)
     264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	2017      	movs	r0, #23
     26c:	4b06      	ldr	r3, [pc, #24]	; (288 <init_chip_pins+0x40>)
     26e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     270:	1d3b      	adds	r3, r7, #4
     272:	0019      	movs	r1, r3
     274:	201c      	movs	r0, #28
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <init_chip_pins+0x40>)
     278:	4798      	blx	r3
	

}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00000199 	.word	0x00000199
     288:	00013101 	.word	0x00013101

0000028c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     28c:	b580      	push	{r7, lr}
     28e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     290:	4b0c      	ldr	r3, [pc, #48]	; (2c4 <nm_bsp_init+0x38>)
     292:	2200      	movs	r2, #0
     294:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     296:	4b0c      	ldr	r3, [pc, #48]	; (2c8 <nm_bsp_init+0x3c>)
     298:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     29a:	4b0c      	ldr	r3, [pc, #48]	; (2cc <nm_bsp_init+0x40>)
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	2201      	movs	r2, #1
     2a0:	4013      	ands	r3, r2
     2a2:	d004      	beq.n	2ae <nm_bsp_init+0x22>
     2a4:	4b09      	ldr	r3, [pc, #36]	; (2cc <nm_bsp_init+0x40>)
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	4013      	ands	r3, r2
     2ac:	d101      	bne.n	2b2 <nm_bsp_init+0x26>
	    delay_init();
     2ae:	4b08      	ldr	r3, [pc, #32]	; (2d0 <nm_bsp_init+0x44>)
     2b0:	4798      	blx	r3
    } // Changes

	/* Perform chip reset. */
	nm_bsp_reset();
     2b2:	4b08      	ldr	r3, [pc, #32]	; (2d4 <nm_bsp_init+0x48>)
     2b4:	4798      	blx	r3

	system_interrupt_enable_global();
     2b6:	4b08      	ldr	r3, [pc, #32]	; (2d8 <nm_bsp_init+0x4c>)
     2b8:	4798      	blx	r3

	return M2M_SUCCESS;
     2ba:	2300      	movs	r3, #0
}
     2bc:	0018      	movs	r0, r3
     2be:	46bd      	mov	sp, r7
     2c0:	bd80      	pop	{r7, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	200006bc 	.word	0x200006bc
     2c8:	00000249 	.word	0x00000249
     2cc:	e000e010 	.word	0xe000e010
     2d0:	00012675 	.word	0x00012675
     2d4:	000002dd 	.word	0x000002dd
     2d8:	00000211 	.word	0x00000211

000002dc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     2dc:	b580      	push	{r7, lr}
     2de:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     2e0:	2100      	movs	r1, #0
     2e2:	2017      	movs	r0, #23
     2e4:	4b0c      	ldr	r3, [pc, #48]	; (318 <nm_bsp_reset+0x3c>)
     2e6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     2e8:	2100      	movs	r1, #0
     2ea:	200d      	movs	r0, #13
     2ec:	4b0a      	ldr	r3, [pc, #40]	; (318 <nm_bsp_reset+0x3c>)
     2ee:	4798      	blx	r3
	nm_bsp_sleep(100);
     2f0:	2064      	movs	r0, #100	; 0x64
     2f2:	4b0a      	ldr	r3, [pc, #40]	; (31c <nm_bsp_reset+0x40>)
     2f4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     2f6:	2101      	movs	r1, #1
     2f8:	2017      	movs	r0, #23
     2fa:	4b07      	ldr	r3, [pc, #28]	; (318 <nm_bsp_reset+0x3c>)
     2fc:	4798      	blx	r3
	nm_bsp_sleep(10);
     2fe:	200a      	movs	r0, #10
     300:	4b06      	ldr	r3, [pc, #24]	; (31c <nm_bsp_reset+0x40>)
     302:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     304:	2101      	movs	r1, #1
     306:	200d      	movs	r0, #13
     308:	4b03      	ldr	r3, [pc, #12]	; (318 <nm_bsp_reset+0x3c>)
     30a:	4798      	blx	r3
	nm_bsp_sleep(10);
     30c:	200a      	movs	r0, #10
     30e:	4b03      	ldr	r3, [pc, #12]	; (31c <nm_bsp_reset+0x40>)
     310:	4798      	blx	r3
}
     312:	46c0      	nop			; (mov r8, r8)
     314:	46bd      	mov	sp, r7
     316:	bd80      	pop	{r7, pc}
     318:	000001bd 	.word	0x000001bd
     31c:	00000321 	.word	0x00000321

00000320 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     328:	e002      	b.n	330 <nm_bsp_sleep+0x10>
		delay_ms(1);
     32a:	2001      	movs	r0, #1
     32c:	4b05      	ldr	r3, [pc, #20]	; (344 <nm_bsp_sleep+0x24>)
     32e:	4798      	blx	r3
	while (u32TimeMsec--) {
     330:	687b      	ldr	r3, [r7, #4]
     332:	1e5a      	subs	r2, r3, #1
     334:	607a      	str	r2, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d1f7      	bne.n	32a <nm_bsp_sleep+0xa>
	}
}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	46bd      	mov	sp, r7
     33e:	b002      	add	sp, #8
     340:	bd80      	pop	{r7, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	000126fd 	.word	0x000126fd

00000348 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     348:	b580      	push	{r7, lr}
     34a:	b086      	sub	sp, #24
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     350:	4b19      	ldr	r3, [pc, #100]	; (3b8 <nm_bsp_register_isr+0x70>)
     352:	687a      	ldr	r2, [r7, #4]
     354:	601a      	str	r2, [r3, #0]
	
	extint_chan_get_config_defaults(&config_extint_chan);
     356:	230c      	movs	r3, #12
     358:	18fb      	adds	r3, r7, r3
     35a:	0018      	movs	r0, r3
     35c:	4b17      	ldr	r3, [pc, #92]	; (3bc <nm_bsp_register_isr+0x74>)
     35e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	2216      	movs	r2, #22
     366:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     368:	230c      	movs	r3, #12
     36a:	18fb      	adds	r3, r7, r3
     36c:	2200      	movs	r2, #0
     36e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     370:	230c      	movs	r3, #12
     372:	18fb      	adds	r3, r7, r3
     374:	2201      	movs	r2, #1
     376:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	config_extint_chan.enable_async_edge_detection = false;
     378:	230c      	movs	r3, #12
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	725a      	strb	r2, [r3, #9]
	#else
	config_extint_chan.wake_if_sleeping    = true;
	#endif
	config_extint_chan.filter_input_signal = false;
     380:	230c      	movs	r3, #12
     382:	18fb      	adds	r3, r7, r3
     384:	2200      	movs	r2, #0
     386:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     388:	230c      	movs	r3, #12
     38a:	18fb      	adds	r3, r7, r3
     38c:	2202      	movs	r2, #2
     38e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     390:	230c      	movs	r3, #12
     392:	18fb      	adds	r3, r7, r3
     394:	0019      	movs	r1, r3
     396:	2006      	movs	r0, #6
     398:	4b09      	ldr	r3, [pc, #36]	; (3c0 <nm_bsp_register_isr+0x78>)
     39a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <nm_bsp_register_isr+0x7c>)
     39e:	2200      	movs	r2, #0
     3a0:	2106      	movs	r1, #6
     3a2:	0018      	movs	r0, r3
     3a4:	4b08      	ldr	r3, [pc, #32]	; (3c8 <nm_bsp_register_isr+0x80>)
     3a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3a8:	2100      	movs	r1, #0
     3aa:	2006      	movs	r0, #6
     3ac:	4b07      	ldr	r3, [pc, #28]	; (3cc <nm_bsp_register_isr+0x84>)
     3ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     3b0:	46c0      	nop			; (mov r8, r8)
     3b2:	46bd      	mov	sp, r7
     3b4:	b006      	add	sp, #24
     3b6:	bd80      	pop	{r7, pc}
     3b8:	200006bc 	.word	0x200006bc
     3bc:	00012f91 	.word	0x00012f91
     3c0:	00012fc5 	.word	0x00012fc5
     3c4:	0000022d 	.word	0x0000022d
     3c8:	00012ac9 	.word	0x00012ac9
     3cc:	00012b2d 	.word	0x00012b2d

000003d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	0002      	movs	r2, r0
     3d8:	1dfb      	adds	r3, r7, #7
     3da:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     3dc:	1dfb      	adds	r3, r7, #7
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d004      	beq.n	3ee <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     3e4:	2100      	movs	r1, #0
     3e6:	2006      	movs	r0, #6
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <nm_bsp_interrupt_ctrl+0x30>)
     3ea:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     3ec:	e003      	b.n	3f6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     3ee:	2100      	movs	r1, #0
     3f0:	2006      	movs	r0, #6
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <nm_bsp_interrupt_ctrl+0x34>)
     3f4:	4798      	blx	r3
}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	00012b2d 	.word	0x00012b2d
     404:	00012b75 	.word	0x00012b75

00000408 <system_pinmux_get_group_from_gpio_pin>:
{
     408:	b580      	push	{r7, lr}
     40a:	b084      	sub	sp, #16
     40c:	af00      	add	r7, sp, #0
     40e:	0002      	movs	r2, r0
     410:	1dfb      	adds	r3, r7, #7
     412:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     414:	230f      	movs	r3, #15
     416:	18fb      	adds	r3, r7, r3
     418:	1dfa      	adds	r2, r7, #7
     41a:	7812      	ldrb	r2, [r2, #0]
     41c:	09d2      	lsrs	r2, r2, #7
     41e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     420:	230e      	movs	r3, #14
     422:	18fb      	adds	r3, r7, r3
     424:	1dfa      	adds	r2, r7, #7
     426:	7812      	ldrb	r2, [r2, #0]
     428:	0952      	lsrs	r2, r2, #5
     42a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     42c:	4b0d      	ldr	r3, [pc, #52]	; (464 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     42e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     430:	230f      	movs	r3, #15
     432:	18fb      	adds	r3, r7, r3
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d10f      	bne.n	45a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     43a:	230f      	movs	r3, #15
     43c:	18fb      	adds	r3, r7, r3
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	009b      	lsls	r3, r3, #2
     442:	2210      	movs	r2, #16
     444:	4694      	mov	ip, r2
     446:	44bc      	add	ip, r7
     448:	4463      	add	r3, ip
     44a:	3b08      	subs	r3, #8
     44c:	681a      	ldr	r2, [r3, #0]
     44e:	230e      	movs	r3, #14
     450:	18fb      	adds	r3, r7, r3
     452:	781b      	ldrb	r3, [r3, #0]
     454:	01db      	lsls	r3, r3, #7
     456:	18d3      	adds	r3, r2, r3
     458:	e000      	b.n	45c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     45a:	2300      	movs	r3, #0
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}
     464:	40002800 	.word	0x40002800

00000468 <port_get_group_from_gpio_pin>:
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	0002      	movs	r2, r0
     470:	1dfb      	adds	r3, r7, #7
     472:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     474:	1dfb      	adds	r3, r7, #7
     476:	781b      	ldrb	r3, [r3, #0]
     478:	0018      	movs	r0, r3
     47a:	4b03      	ldr	r3, [pc, #12]	; (488 <port_get_group_from_gpio_pin+0x20>)
     47c:	4798      	blx	r3
     47e:	0003      	movs	r3, r0
}
     480:	0018      	movs	r0, r3
     482:	46bd      	mov	sp, r7
     484:	b002      	add	sp, #8
     486:	bd80      	pop	{r7, pc}
     488:	00000409 	.word	0x00000409

0000048c <port_get_config_defaults>:
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     494:	687b      	ldr	r3, [r7, #4]
     496:	2200      	movs	r2, #0
     498:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2201      	movs	r2, #1
     49e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	2200      	movs	r2, #0
     4a4:	709a      	strb	r2, [r3, #2]
}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	46bd      	mov	sp, r7
     4aa:	b002      	add	sp, #8
     4ac:	bd80      	pop	{r7, pc}
	...

000004b0 <port_pin_set_output_level>:
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	0002      	movs	r2, r0
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	701a      	strb	r2, [r3, #0]
     4bc:	1dbb      	adds	r3, r7, #6
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     4c2:	1dfb      	adds	r3, r7, #7
     4c4:	781b      	ldrb	r3, [r3, #0]
     4c6:	0018      	movs	r0, r3
     4c8:	4b0d      	ldr	r3, [pc, #52]	; (500 <port_pin_set_output_level+0x50>)
     4ca:	4798      	blx	r3
     4cc:	0003      	movs	r3, r0
     4ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	221f      	movs	r2, #31
     4d6:	4013      	ands	r3, r2
     4d8:	2201      	movs	r2, #1
     4da:	409a      	lsls	r2, r3
     4dc:	0013      	movs	r3, r2
     4de:	60bb      	str	r3, [r7, #8]
	if (level) {
     4e0:	1dbb      	adds	r3, r7, #6
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d003      	beq.n	4f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     4e8:	68fb      	ldr	r3, [r7, #12]
     4ea:	68ba      	ldr	r2, [r7, #8]
     4ec:	619a      	str	r2, [r3, #24]
}
     4ee:	e002      	b.n	4f6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     4f0:	68fb      	ldr	r3, [r7, #12]
     4f2:	68ba      	ldr	r2, [r7, #8]
     4f4:	615a      	str	r2, [r3, #20]
}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	46bd      	mov	sp, r7
     4fa:	b004      	add	sp, #16
     4fc:	bd80      	pop	{r7, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00000469 	.word	0x00000469

00000504 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     504:	b580      	push	{r7, lr}
     506:	b084      	sub	sp, #16
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	681b      	ldr	r3, [r3, #0]
     510:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     512:	68fb      	ldr	r3, [r7, #12]
     514:	69db      	ldr	r3, [r3, #28]
     516:	1e5a      	subs	r2, r3, #1
     518:	4193      	sbcs	r3, r2
     51a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     51c:	0018      	movs	r0, r3
     51e:	46bd      	mov	sp, r7
     520:	b004      	add	sp, #16
     522:	bd80      	pop	{r7, pc}

00000524 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     524:	b580      	push	{r7, lr}
     526:	b082      	sub	sp, #8
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	2201      	movs	r2, #1
     530:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     532:	687b      	ldr	r3, [r7, #4]
     534:	2200      	movs	r2, #0
     536:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     538:	687b      	ldr	r3, [r7, #4]
     53a:	2200      	movs	r2, #0
     53c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	22c0      	movs	r2, #192	; 0xc0
     542:	0392      	lsls	r2, r2, #14
     544:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     546:	687b      	ldr	r3, [r7, #4]
     548:	2200      	movs	r2, #0
     54a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	2200      	movs	r2, #0
     550:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     552:	687b      	ldr	r3, [r7, #4]
     554:	2201      	movs	r2, #1
     556:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     558:	687b      	ldr	r3, [r7, #4]
     55a:	2201      	movs	r2, #1
     55c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     55e:	687b      	ldr	r3, [r7, #4]
     560:	2200      	movs	r2, #0
     562:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     564:	687b      	ldr	r3, [r7, #4]
     566:	2224      	movs	r2, #36	; 0x24
     568:	2100      	movs	r1, #0
     56a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	3318      	adds	r3, #24
     570:	220c      	movs	r2, #12
     572:	2100      	movs	r1, #0
     574:	0018      	movs	r0, r3
     576:	4b0a      	ldr	r3, [pc, #40]	; (5a0 <spi_get_config_defaults+0x7c>)
     578:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     57a:	687b      	ldr	r3, [r7, #4]
     57c:	4a09      	ldr	r2, [pc, #36]	; (5a4 <spi_get_config_defaults+0x80>)
     57e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     580:	687b      	ldr	r3, [r7, #4]
     582:	2200      	movs	r2, #0
     584:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     586:	687b      	ldr	r3, [r7, #4]
     588:	2200      	movs	r2, #0
     58a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	2200      	movs	r2, #0
     590:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     592:	687b      	ldr	r3, [r7, #4]
     594:	2200      	movs	r2, #0
     596:	635a      	str	r2, [r3, #52]	; 0x34

};
     598:	46c0      	nop			; (mov r8, r8)
     59a:	46bd      	mov	sp, r7
     59c:	b002      	add	sp, #8
     59e:	bd80      	pop	{r7, pc}
     5a0:	0001baed 	.word	0x0001baed
     5a4:	000186a0 	.word	0x000186a0

000005a8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	220a      	movs	r2, #10
     5b4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	2200      	movs	r2, #0
     5ba:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	2200      	movs	r2, #0
     5c0:	709a      	strb	r2, [r3, #2]
}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	46bd      	mov	sp, r7
     5c6:	b002      	add	sp, #8
     5c8:	bd80      	pop	{r7, pc}
	...

000005cc <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     5cc:	b580      	push	{r7, lr}
     5ce:	b084      	sub	sp, #16
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
     5d4:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	781a      	ldrb	r2, [r3, #0]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	785a      	ldrb	r2, [r3, #1]
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     5e6:	683b      	ldr	r3, [r7, #0]
     5e8:	789a      	ldrb	r2, [r3, #2]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     5ee:	230c      	movs	r3, #12
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	0018      	movs	r0, r3
     5f4:	4b0b      	ldr	r3, [pc, #44]	; (624 <spi_attach_slave+0x58>)
     5f6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     5f8:	230c      	movs	r3, #12
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	2201      	movs	r2, #1
     5fe:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     600:	687b      	ldr	r3, [r7, #4]
     602:	781b      	ldrb	r3, [r3, #0]
     604:	220c      	movs	r2, #12
     606:	18ba      	adds	r2, r7, r2
     608:	0011      	movs	r1, r2
     60a:	0018      	movs	r0, r3
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <spi_attach_slave+0x5c>)
     60e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     610:	687b      	ldr	r3, [r7, #4]
     612:	781b      	ldrb	r3, [r3, #0]
     614:	2101      	movs	r1, #1
     616:	0018      	movs	r0, r3
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <spi_attach_slave+0x60>)
     61a:	4798      	blx	r3
}
     61c:	46c0      	nop			; (mov r8, r8)
     61e:	46bd      	mov	sp, r7
     620:	b004      	add	sp, #16
     622:	bd80      	pop	{r7, pc}
     624:	0000048d 	.word	0x0000048d
     628:	00013101 	.word	0x00013101
     62c:	000004b1 	.word	0x000004b1

00000630 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     638:	687b      	ldr	r3, [r7, #4]
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     63e:	46c0      	nop			; (mov r8, r8)
     640:	687b      	ldr	r3, [r7, #4]
     642:	0018      	movs	r0, r3
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <spi_enable+0x30>)
     646:	4798      	blx	r3
     648:	1e03      	subs	r3, r0, #0
     64a:	d1f9      	bne.n	640 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     64c:	68fb      	ldr	r3, [r7, #12]
     64e:	681b      	ldr	r3, [r3, #0]
     650:	2202      	movs	r2, #2
     652:	431a      	orrs	r2, r3
     654:	68fb      	ldr	r3, [r7, #12]
     656:	601a      	str	r2, [r3, #0]
}
     658:	46c0      	nop			; (mov r8, r8)
     65a:	46bd      	mov	sp, r7
     65c:	b004      	add	sp, #16
     65e:	bd80      	pop	{r7, pc}
     660:	00000505 	.word	0x00000505

00000664 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     672:	46c0      	nop			; (mov r8, r8)
     674:	687b      	ldr	r3, [r7, #4]
     676:	0018      	movs	r0, r3
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <spi_disable+0x40>)
     67a:	4798      	blx	r3
     67c:	1e03      	subs	r3, r0, #0
     67e:	d1f9      	bne.n	674 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     680:	68fb      	ldr	r3, [r7, #12]
     682:	228f      	movs	r2, #143	; 0x8f
     684:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     686:	68fb      	ldr	r3, [r7, #12]
     688:	228f      	movs	r2, #143	; 0x8f
     68a:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     68c:	68fb      	ldr	r3, [r7, #12]
     68e:	681b      	ldr	r3, [r3, #0]
     690:	2202      	movs	r2, #2
     692:	4393      	bics	r3, r2
     694:	001a      	movs	r2, r3
     696:	68fb      	ldr	r3, [r7, #12]
     698:	601a      	str	r2, [r3, #0]
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b004      	add	sp, #16
     6a0:	bd80      	pop	{r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00000505 	.word	0x00000505

000006a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b084      	sub	sp, #16
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	7e1b      	ldrb	r3, [r3, #24]
     6ba:	b2db      	uxtb	r3, r3
     6bc:	001a      	movs	r2, r3
     6be:	2302      	movs	r3, #2
     6c0:	4013      	ands	r3, r2
     6c2:	1e5a      	subs	r2, r3, #1
     6c4:	4193      	sbcs	r3, r2
     6c6:	b2db      	uxtb	r3, r3
}
     6c8:	0018      	movs	r0, r3
     6ca:	46bd      	mov	sp, r7
     6cc:	b004      	add	sp, #16
     6ce:	bd80      	pop	{r7, pc}

000006d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b084      	sub	sp, #16
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6de:	68fb      	ldr	r3, [r7, #12]
     6e0:	7e1b      	ldrb	r3, [r3, #24]
     6e2:	b2db      	uxtb	r3, r3
     6e4:	001a      	movs	r2, r3
     6e6:	2301      	movs	r3, #1
     6e8:	4013      	ands	r3, r2
     6ea:	1e5a      	subs	r2, r3, #1
     6ec:	4193      	sbcs	r3, r2
     6ee:	b2db      	uxtb	r3, r3
}
     6f0:	0018      	movs	r0, r3
     6f2:	46bd      	mov	sp, r7
     6f4:	b004      	add	sp, #16
     6f6:	bd80      	pop	{r7, pc}

000006f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     6f8:	b580      	push	{r7, lr}
     6fa:	b084      	sub	sp, #16
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     700:	687b      	ldr	r3, [r7, #4]
     702:	681b      	ldr	r3, [r3, #0]
     704:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     706:	68fb      	ldr	r3, [r7, #12]
     708:	7e1b      	ldrb	r3, [r3, #24]
     70a:	b2db      	uxtb	r3, r3
     70c:	001a      	movs	r2, r3
     70e:	2304      	movs	r3, #4
     710:	4013      	ands	r3, r2
     712:	1e5a      	subs	r2, r3, #1
     714:	4193      	sbcs	r3, r2
     716:	b2db      	uxtb	r3, r3
}
     718:	0018      	movs	r0, r3
     71a:	46bd      	mov	sp, r7
     71c:	b004      	add	sp, #16
     71e:	bd80      	pop	{r7, pc}

00000720 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     720:	b580      	push	{r7, lr}
     722:	b084      	sub	sp, #16
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	000a      	movs	r2, r1
     72a:	1cbb      	adds	r3, r7, #2
     72c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     734:	687b      	ldr	r3, [r7, #4]
     736:	0018      	movs	r0, r3
     738:	4b0a      	ldr	r3, [pc, #40]	; (764 <spi_write+0x44>)
     73a:	4798      	blx	r3
     73c:	0003      	movs	r3, r0
     73e:	001a      	movs	r2, r3
     740:	2301      	movs	r3, #1
     742:	4053      	eors	r3, r2
     744:	b2db      	uxtb	r3, r3
     746:	2b00      	cmp	r3, #0
     748:	d001      	beq.n	74e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     74a:	2305      	movs	r3, #5
     74c:	e006      	b.n	75c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     74e:	1cbb      	adds	r3, r7, #2
     750:	881b      	ldrh	r3, [r3, #0]
     752:	05db      	lsls	r3, r3, #23
     754:	0dda      	lsrs	r2, r3, #23
     756:	68fb      	ldr	r3, [r7, #12]
     758:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     75a:	2300      	movs	r3, #0
}
     75c:	0018      	movs	r0, r3
     75e:	46bd      	mov	sp, r7
     760:	b004      	add	sp, #16
     762:	bd80      	pop	{r7, pc}
     764:	000006d1 	.word	0x000006d1

00000768 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     768:	b580      	push	{r7, lr}
     76a:	b084      	sub	sp, #16
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
     770:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     772:	687b      	ldr	r3, [r7, #4]
     774:	681b      	ldr	r3, [r3, #0]
     776:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     778:	687b      	ldr	r3, [r7, #4]
     77a:	0018      	movs	r0, r3
     77c:	4b1b      	ldr	r3, [pc, #108]	; (7ec <spi_read+0x84>)
     77e:	4798      	blx	r3
     780:	0003      	movs	r3, r0
     782:	001a      	movs	r2, r3
     784:	2301      	movs	r3, #1
     786:	4053      	eors	r3, r2
     788:	b2db      	uxtb	r3, r3
     78a:	2b00      	cmp	r3, #0
     78c:	d001      	beq.n	792 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     78e:	2310      	movs	r3, #16
     790:	e027      	b.n	7e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     792:	230f      	movs	r3, #15
     794:	18fb      	adds	r3, r7, r3
     796:	2200      	movs	r2, #0
     798:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     79a:	68bb      	ldr	r3, [r7, #8]
     79c:	8b5b      	ldrh	r3, [r3, #26]
     79e:	b29b      	uxth	r3, r3
     7a0:	001a      	movs	r2, r3
     7a2:	2304      	movs	r3, #4
     7a4:	4013      	ands	r3, r2
     7a6:	d006      	beq.n	7b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     7a8:	230f      	movs	r3, #15
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	221e      	movs	r2, #30
     7ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     7b0:	68bb      	ldr	r3, [r7, #8]
     7b2:	2204      	movs	r2, #4
     7b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	799b      	ldrb	r3, [r3, #6]
     7ba:	2b01      	cmp	r3, #1
     7bc:	d108      	bne.n	7d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     7be:	68bb      	ldr	r3, [r7, #8]
     7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7c2:	b29b      	uxth	r3, r3
     7c4:	05db      	lsls	r3, r3, #23
     7c6:	0ddb      	lsrs	r3, r3, #23
     7c8:	b29a      	uxth	r2, r3
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	801a      	strh	r2, [r3, #0]
     7ce:	e005      	b.n	7dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     7d0:	68bb      	ldr	r3, [r7, #8]
     7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7d4:	b2db      	uxtb	r3, r3
     7d6:	b29a      	uxth	r2, r3
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     7dc:	230f      	movs	r3, #15
     7de:	18fb      	adds	r3, r7, r3
     7e0:	781b      	ldrb	r3, [r3, #0]
}
     7e2:	0018      	movs	r0, r3
     7e4:	46bd      	mov	sp, r7
     7e6:	b004      	add	sp, #16
     7e8:	bd80      	pop	{r7, pc}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	000006f9 	.word	0x000006f9

000007f0 <spi_rw>:

struct spi_module master_wifi;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b086      	sub	sp, #24
     7f4:	af00      	add	r7, sp, #0
     7f6:	60f8      	str	r0, [r7, #12]
     7f8:	60b9      	str	r1, [r7, #8]
     7fa:	1dbb      	adds	r3, r7, #6
     7fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     7fe:	2313      	movs	r3, #19
     800:	18fb      	adds	r3, r7, r3
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     806:	2317      	movs	r3, #23
     808:	18fb      	adds	r3, r7, r3
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
     80e:	2316      	movs	r3, #22
     810:	18fb      	adds	r3, r7, r3
     812:	2200      	movs	r2, #0
     814:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     816:	2314      	movs	r3, #20
     818:	18fb      	adds	r3, r7, r3
     81a:	2200      	movs	r2, #0
     81c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     81e:	2310      	movs	r3, #16
     820:	18fb      	adds	r3, r7, r3
     822:	2200      	movs	r2, #0
     824:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     826:	68fb      	ldr	r3, [r7, #12]
     828:	2b00      	cmp	r3, #0
     82a:	d107      	bne.n	83c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     82c:	2313      	movs	r3, #19
     82e:	18fb      	adds	r3, r7, r3
     830:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     832:	2317      	movs	r3, #23
     834:	18fb      	adds	r3, r7, r3
     836:	2201      	movs	r2, #1
     838:	701a      	strb	r2, [r3, #0]
     83a:	e00d      	b.n	858 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     83c:	68bb      	ldr	r3, [r7, #8]
     83e:	2b00      	cmp	r3, #0
     840:	d107      	bne.n	852 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     842:	2313      	movs	r3, #19
     844:	18fb      	adds	r3, r7, r3
     846:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     848:	2316      	movs	r3, #22
     84a:	18fb      	adds	r3, r7, r3
     84c:	2201      	movs	r2, #1
     84e:	701a      	strb	r2, [r3, #0]
     850:	e002      	b.n	858 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     852:	2306      	movs	r3, #6
     854:	425b      	negs	r3, r3
     856:	e06a      	b.n	92e <spi_rw+0x13e>
	}

	spi_select_slave(&master_wifi, &slave_inst, true);
     858:	4937      	ldr	r1, [pc, #220]	; (938 <spi_rw+0x148>)
     85a:	4b38      	ldr	r3, [pc, #224]	; (93c <spi_rw+0x14c>)
     85c:	2201      	movs	r2, #1
     85e:	0018      	movs	r0, r3
     860:	4b37      	ldr	r3, [pc, #220]	; (940 <spi_rw+0x150>)
     862:	4798      	blx	r3

	while (u16Sz) {
     864:	e04c      	b.n	900 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     866:	68fb      	ldr	r3, [r7, #12]
     868:	781a      	ldrb	r2, [r3, #0]
     86a:	2314      	movs	r3, #20
     86c:	18fb      	adds	r3, r7, r3
     86e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master_wifi))
     870:	46c0      	nop			; (mov r8, r8)
     872:	4b32      	ldr	r3, [pc, #200]	; (93c <spi_rw+0x14c>)
     874:	0018      	movs	r0, r3
     876:	4b33      	ldr	r3, [pc, #204]	; (944 <spi_rw+0x154>)
     878:	4798      	blx	r3
     87a:	0003      	movs	r3, r0
     87c:	001a      	movs	r2, r3
     87e:	2301      	movs	r3, #1
     880:	4053      	eors	r3, r2
     882:	b2db      	uxtb	r3, r3
     884:	2b00      	cmp	r3, #0
     886:	d1f4      	bne.n	872 <spi_rw+0x82>
			;
		while(spi_write(&master_wifi, txd_data) != STATUS_OK)
     888:	46c0      	nop			; (mov r8, r8)
     88a:	2314      	movs	r3, #20
     88c:	18fb      	adds	r3, r7, r3
     88e:	881a      	ldrh	r2, [r3, #0]
     890:	4b2a      	ldr	r3, [pc, #168]	; (93c <spi_rw+0x14c>)
     892:	0011      	movs	r1, r2
     894:	0018      	movs	r0, r3
     896:	4b2c      	ldr	r3, [pc, #176]	; (948 <spi_rw+0x158>)
     898:	4798      	blx	r3
     89a:	1e03      	subs	r3, r0, #0
     89c:	d1f5      	bne.n	88a <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master_wifi))
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	4b26      	ldr	r3, [pc, #152]	; (93c <spi_rw+0x14c>)
     8a2:	0018      	movs	r0, r3
     8a4:	4b29      	ldr	r3, [pc, #164]	; (94c <spi_rw+0x15c>)
     8a6:	4798      	blx	r3
     8a8:	0003      	movs	r3, r0
     8aa:	001a      	movs	r2, r3
     8ac:	2301      	movs	r3, #1
     8ae:	4053      	eors	r3, r2
     8b0:	b2db      	uxtb	r3, r3
     8b2:	2b00      	cmp	r3, #0
     8b4:	d1f4      	bne.n	8a0 <spi_rw+0xb0>
			;
		while (spi_read(&master_wifi, &rxd_data) != STATUS_OK)
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	2310      	movs	r3, #16
     8ba:	18fa      	adds	r2, r7, r3
     8bc:	4b1f      	ldr	r3, [pc, #124]	; (93c <spi_rw+0x14c>)
     8be:	0011      	movs	r1, r2
     8c0:	0018      	movs	r0, r3
     8c2:	4b23      	ldr	r3, [pc, #140]	; (950 <spi_rw+0x160>)
     8c4:	4798      	blx	r3
     8c6:	1e03      	subs	r3, r0, #0
     8c8:	d1f6      	bne.n	8b8 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     8ca:	2310      	movs	r3, #16
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	881b      	ldrh	r3, [r3, #0]
     8d0:	b2da      	uxtb	r2, r3
     8d2:	68bb      	ldr	r3, [r7, #8]
     8d4:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     8d6:	1dbb      	adds	r3, r7, #6
     8d8:	881a      	ldrh	r2, [r3, #0]
     8da:	1dbb      	adds	r3, r7, #6
     8dc:	3a01      	subs	r2, #1
     8de:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     8e0:	2316      	movs	r3, #22
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d102      	bne.n	8f0 <spi_rw+0x100>
			pu8Miso++;
     8ea:	68bb      	ldr	r3, [r7, #8]
     8ec:	3301      	adds	r3, #1
     8ee:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     8f0:	2317      	movs	r3, #23
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d102      	bne.n	900 <spi_rw+0x110>
			pu8Mosi++;
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	3301      	adds	r3, #1
     8fe:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     900:	1dbb      	adds	r3, r7, #6
     902:	881b      	ldrh	r3, [r3, #0]
     904:	2b00      	cmp	r3, #0
     906:	d1ae      	bne.n	866 <spi_rw+0x76>
	}

	while (!spi_is_write_complete(&master_wifi))
     908:	46c0      	nop			; (mov r8, r8)
     90a:	4b0c      	ldr	r3, [pc, #48]	; (93c <spi_rw+0x14c>)
     90c:	0018      	movs	r0, r3
     90e:	4b11      	ldr	r3, [pc, #68]	; (954 <spi_rw+0x164>)
     910:	4798      	blx	r3
     912:	0003      	movs	r3, r0
     914:	001a      	movs	r2, r3
     916:	2301      	movs	r3, #1
     918:	4053      	eors	r3, r2
     91a:	b2db      	uxtb	r3, r3
     91c:	2b00      	cmp	r3, #0
     91e:	d1f4      	bne.n	90a <spi_rw+0x11a>
		;

	spi_select_slave(&master_wifi, &slave_inst, false);
     920:	4905      	ldr	r1, [pc, #20]	; (938 <spi_rw+0x148>)
     922:	4b06      	ldr	r3, [pc, #24]	; (93c <spi_rw+0x14c>)
     924:	2200      	movs	r2, #0
     926:	0018      	movs	r0, r3
     928:	4b05      	ldr	r3, [pc, #20]	; (940 <spi_rw+0x150>)
     92a:	4798      	blx	r3

	return M2M_SUCCESS;
     92c:	2300      	movs	r3, #0
}
     92e:	0018      	movs	r0, r3
     930:	46bd      	mov	sp, r7
     932:	b006      	add	sp, #24
     934:	bd80      	pop	{r7, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	20001984 	.word	0x20001984
     93c:	20001988 	.word	0x20001988
     940:	00014ded 	.word	0x00014ded
     944:	000006d1 	.word	0x000006d1
     948:	00000721 	.word	0x00000721
     94c:	000006f9 	.word	0x000006f9
     950:	00000769 	.word	0x00000769
     954:	000006a9 	.word	0x000006a9

00000958 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     958:	b580      	push	{r7, lr}
     95a:	b092      	sub	sp, #72	; 0x48
     95c:	af00      	add	r7, sp, #0
     95e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     960:	2347      	movs	r3, #71	; 0x47
     962:	18fb      	adds	r3, r7, r3
     964:	2200      	movs	r2, #0
     966:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	0018      	movs	r0, r3
     96e:	4b29      	ldr	r3, [pc, #164]	; (a14 <nm_bus_init+0xbc>)
     970:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     972:	2308      	movs	r3, #8
     974:	18fb      	adds	r3, r7, r3
     976:	2223      	movs	r2, #35	; 0x23
     978:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     97a:	2308      	movs	r3, #8
     97c:	18fa      	adds	r2, r7, r3
     97e:	4b26      	ldr	r3, [pc, #152]	; (a18 <nm_bus_init+0xc0>)
     980:	0011      	movs	r1, r2
     982:	0018      	movs	r0, r3
     984:	4b25      	ldr	r3, [pc, #148]	; (a1c <nm_bus_init+0xc4>)
     986:	4798      	blx	r3
	spi_get_config_defaults(&config);
     988:	230c      	movs	r3, #12
     98a:	18fb      	adds	r3, r7, r3
     98c:	0018      	movs	r0, r3
     98e:	4b24      	ldr	r3, [pc, #144]	; (a20 <nm_bus_init+0xc8>)
     990:	4798      	blx	r3
	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     992:	230c      	movs	r3, #12
     994:	18fb      	adds	r3, r7, r3
     996:	0018      	movs	r0, r3
     998:	4b21      	ldr	r3, [pc, #132]	; (a20 <nm_bus_init+0xc8>)
     99a:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     99c:	230c      	movs	r3, #12
     99e:	18fb      	adds	r3, r7, r3
     9a0:	2280      	movs	r2, #128	; 0x80
     9a2:	0252      	lsls	r2, r2, #9
     9a4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     9a6:	230c      	movs	r3, #12
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	4a1e      	ldr	r2, [pc, #120]	; (a24 <nm_bus_init+0xcc>)
     9ac:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     9ae:	230c      	movs	r3, #12
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2201      	movs	r2, #1
     9b4:	4252      	negs	r2, r2
     9b6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     9b8:	230c      	movs	r3, #12
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	4a1a      	ldr	r2, [pc, #104]	; (a28 <nm_bus_init+0xd0>)
     9be:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     9c0:	230c      	movs	r3, #12
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	4a19      	ldr	r2, [pc, #100]	; (a2c <nm_bus_init+0xd4>)
     9c6:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     9c8:	230c      	movs	r3, #12
     9ca:	18fb      	adds	r3, r7, r3
     9cc:	2200      	movs	r2, #0
     9ce:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     9d0:	230c      	movs	r3, #12
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	4a16      	ldr	r2, [pc, #88]	; (a30 <nm_bus_init+0xd8>)
     9d6:	619a      	str	r2, [r3, #24]
	if (spi_init(&master_wifi, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     9d8:	230c      	movs	r3, #12
     9da:	18fa      	adds	r2, r7, r3
     9dc:	4915      	ldr	r1, [pc, #84]	; (a34 <nm_bus_init+0xdc>)
     9de:	4b16      	ldr	r3, [pc, #88]	; (a38 <nm_bus_init+0xe0>)
     9e0:	0018      	movs	r0, r3
     9e2:	4b16      	ldr	r3, [pc, #88]	; (a3c <nm_bus_init+0xe4>)
     9e4:	4798      	blx	r3
     9e6:	1e03      	subs	r3, r0, #0
     9e8:	d002      	beq.n	9f0 <nm_bus_init+0x98>
		return M2M_ERR_BUS_FAIL;
     9ea:	2306      	movs	r3, #6
     9ec:	425b      	negs	r3, r3
     9ee:	e00c      	b.n	a0a <nm_bus_init+0xb2>
	}

	/* Enable the SPI master. */
	spi_enable(&master_wifi);
     9f0:	4b11      	ldr	r3, [pc, #68]	; (a38 <nm_bus_init+0xe0>)
     9f2:	0018      	movs	r0, r3
     9f4:	4b12      	ldr	r3, [pc, #72]	; (a40 <nm_bus_init+0xe8>)
     9f6:	4798      	blx	r3

	nm_bsp_reset();
     9f8:	4b12      	ldr	r3, [pc, #72]	; (a44 <nm_bus_init+0xec>)
     9fa:	4798      	blx	r3
	nm_bsp_sleep(1);
     9fc:	2001      	movs	r0, #1
     9fe:	4b12      	ldr	r3, [pc, #72]	; (a48 <nm_bus_init+0xf0>)
     a00:	4798      	blx	r3
#endif
	return result;
     a02:	2347      	movs	r3, #71	; 0x47
     a04:	18fb      	adds	r3, r7, r3
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	b25b      	sxtb	r3, r3
}
     a0a:	0018      	movs	r0, r3
     a0c:	46bd      	mov	sp, r7
     a0e:	b012      	add	sp, #72	; 0x48
     a10:	bd80      	pop	{r7, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	000005a9 	.word	0x000005a9
     a18:	20001984 	.word	0x20001984
     a1c:	000005cd 	.word	0x000005cd
     a20:	00000525 	.word	0x00000525
     a24:	00220003 	.word	0x00220003
     a28:	00360003 	.word	0x00360003
     a2c:	00370003 	.word	0x00370003
     a30:	00b71b00 	.word	0x00b71b00
     a34:	43000400 	.word	0x43000400
     a38:	20001988 	.word	0x20001988
     a3c:	00014cd5 	.word	0x00014cd5
     a40:	00000631 	.word	0x00000631
     a44:	000002dd 	.word	0x000002dd
     a48:	00000321 	.word	0x00000321

00000a4c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     a4c:	b590      	push	{r4, r7, lr}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	0002      	movs	r2, r0
     a54:	6039      	str	r1, [r7, #0]
     a56:	1dfb      	adds	r3, r7, #7
     a58:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     a5a:	230f      	movs	r3, #15
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	2200      	movs	r2, #0
     a60:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     a62:	1dfb      	adds	r3, r7, #7
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b03      	cmp	r3, #3
     a68:	d10f      	bne.n	a8a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     a6a:	683b      	ldr	r3, [r7, #0]
     a6c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     a6e:	68bb      	ldr	r3, [r7, #8]
     a70:	6818      	ldr	r0, [r3, #0]
     a72:	68bb      	ldr	r3, [r7, #8]
     a74:	6859      	ldr	r1, [r3, #4]
     a76:	68bb      	ldr	r3, [r7, #8]
     a78:	891b      	ldrh	r3, [r3, #8]
     a7a:	220f      	movs	r2, #15
     a7c:	18bc      	adds	r4, r7, r2
     a7e:	001a      	movs	r2, r3
     a80:	4b10      	ldr	r3, [pc, #64]	; (ac4 <nm_bus_ioctl+0x78>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
     a86:	7023      	strb	r3, [r4, #0]
		}
		break;
     a88:	e013      	b.n	ab2 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     a8a:	230f      	movs	r3, #15
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	22ff      	movs	r2, #255	; 0xff
     a90:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     a92:	230e      	movs	r3, #14
     a94:	33ff      	adds	r3, #255	; 0xff
     a96:	001a      	movs	r2, r3
     a98:	490b      	ldr	r1, [pc, #44]	; (ac8 <nm_bus_ioctl+0x7c>)
     a9a:	4b0c      	ldr	r3, [pc, #48]	; (acc <nm_bus_ioctl+0x80>)
     a9c:	0018      	movs	r0, r3
     a9e:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <nm_bus_ioctl+0x84>)
     aa0:	4798      	blx	r3
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <nm_bus_ioctl+0x88>)
     aa4:	0018      	movs	r0, r3
     aa6:	4b0c      	ldr	r3, [pc, #48]	; (ad8 <nm_bus_ioctl+0x8c>)
     aa8:	4798      	blx	r3
     aaa:	200d      	movs	r0, #13
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <nm_bus_ioctl+0x90>)
     aae:	4798      	blx	r3
			break;
     ab0:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     ab2:	230f      	movs	r3, #15
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	b25b      	sxtb	r3, r3
}
     aba:	0018      	movs	r0, r3
     abc:	46bd      	mov	sp, r7
     abe:	b005      	add	sp, #20
     ac0:	bd90      	pop	{r4, r7, pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	000007f1 	.word	0x000007f1
     ac8:	0001d0b4 	.word	0x0001d0b4
     acc:	0001d08c 	.word	0x0001d08c
     ad0:	0001bc4d 	.word	0x0001bc4d
     ad4:	0001d0a0 	.word	0x0001d0a0
     ad8:	0001bd69 	.word	0x0001bd69
     adc:	0001bc81 	.word	0x0001bc81

00000ae0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	b082      	sub	sp, #8
     ae4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     ae6:	1dfb      	adds	r3, r7, #7
     ae8:	2200      	movs	r2, #0
     aea:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     aec:	1d3b      	adds	r3, r7, #4
     aee:	0018      	movs	r0, r3
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <nm_bus_deinit+0x38>)
     af2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     af4:	1d3b      	adds	r3, r7, #4
     af6:	2200      	movs	r2, #0
     af8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     afa:	1d3b      	adds	r3, r7, #4
     afc:	2200      	movs	r2, #0
     afe:	705a      	strb	r2, [r3, #1]

#ifdef CONF_WINC_USE_I2C
	i2c_master_disable(&i2c_master_instance);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master_wifi);
     b00:	4b06      	ldr	r3, [pc, #24]	; (b1c <nm_bus_deinit+0x3c>)
     b02:	0018      	movs	r0, r3
     b04:	4b06      	ldr	r3, [pc, #24]	; (b20 <nm_bus_deinit+0x40>)
     b06:	4798      	blx	r3
#endif /* CONF_WINC_USE_SPI */
	return result;
     b08:	1dfb      	adds	r3, r7, #7
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	b25b      	sxtb	r3, r3
}
     b0e:	0018      	movs	r0, r3
     b10:	46bd      	mov	sp, r7
     b12:	b002      	add	sp, #8
     b14:	bd80      	pop	{r7, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	0000048d 	.word	0x0000048d
     b1c:	20001988 	.word	0x20001988
     b20:	00000665 	.word	0x00000665

00000b24 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     b24:	b580      	push	{r7, lr}
     b26:	b084      	sub	sp, #16
     b28:	af00      	add	r7, sp, #0
     b2a:	60f8      	str	r0, [r7, #12]
     b2c:	60b9      	str	r1, [r7, #8]
     b2e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	2b00      	cmp	r3, #0
     b34:	d010      	beq.n	b58 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     b36:	68bb      	ldr	r3, [r7, #8]
     b38:	781a      	ldrb	r2, [r3, #0]
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	701a      	strb	r2, [r3, #0]
		pDst++;
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	3301      	adds	r3, #1
     b42:	60fb      	str	r3, [r7, #12]
		pSrc++;
     b44:	68bb      	ldr	r3, [r7, #8]
     b46:	3301      	adds	r3, #1
     b48:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	3b01      	subs	r3, #1
     b4e:	607b      	str	r3, [r7, #4]
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	2b00      	cmp	r3, #0
     b54:	d1ef      	bne.n	b36 <m2m_memcpy+0x12>
     b56:	e000      	b.n	b5a <m2m_memcpy+0x36>
	if(sz == 0) return;
     b58:	46c0      	nop			; (mov r8, r8)
}
     b5a:	46bd      	mov	sp, r7
     b5c:	b004      	add	sp, #16
     b5e:	bd80      	pop	{r7, pc}

00000b60 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     b60:	b580      	push	{r7, lr}
     b62:	b084      	sub	sp, #16
     b64:	af00      	add	r7, sp, #0
     b66:	60f8      	str	r0, [r7, #12]
     b68:	607a      	str	r2, [r7, #4]
     b6a:	230b      	movs	r3, #11
     b6c:	18fb      	adds	r3, r7, r3
     b6e:	1c0a      	adds	r2, r1, #0
     b70:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	2b00      	cmp	r3, #0
     b76:	d00e      	beq.n	b96 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     b78:	68fb      	ldr	r3, [r7, #12]
     b7a:	220b      	movs	r2, #11
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	7812      	ldrb	r2, [r2, #0]
     b80:	701a      	strb	r2, [r3, #0]
		pBuf++;
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	3301      	adds	r3, #1
     b86:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	3b01      	subs	r3, #1
     b8c:	607b      	str	r3, [r7, #4]
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	2b00      	cmp	r3, #0
     b92:	d1f1      	bne.n	b78 <m2m_memset+0x18>
     b94:	e000      	b.n	b98 <m2m_memset+0x38>
	if(sz == 0) return;
     b96:	46c0      	nop			; (mov r8, r8)
}
     b98:	46bd      	mov	sp, r7
     b9a:	b004      	add	sp, #16
     b9c:	bd80      	pop	{r7, pc}

00000b9e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     b9e:	b580      	push	{r7, lr}
     ba0:	b084      	sub	sp, #16
     ba2:	af00      	add	r7, sp, #0
     ba4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     ba6:	230e      	movs	r3, #14
     ba8:	18fb      	adds	r3, r7, r3
     baa:	2200      	movs	r2, #0
     bac:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     bae:	e009      	b.n	bc4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     bb0:	230e      	movs	r3, #14
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	881a      	ldrh	r2, [r3, #0]
     bb6:	230e      	movs	r3, #14
     bb8:	18fb      	adds	r3, r7, r3
     bba:	3201      	adds	r2, #1
     bbc:	801a      	strh	r2, [r3, #0]
		pcStr++;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	3301      	adds	r3, #1
     bc2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d1f1      	bne.n	bb0 <m2m_strlen+0x12>
	}
	return u16StrLen;
     bcc:	230e      	movs	r3, #14
     bce:	18fb      	adds	r3, r7, r3
     bd0:	881b      	ldrh	r3, [r3, #0]
}
     bd2:	0018      	movs	r0, r3
     bd4:	46bd      	mov	sp, r7
     bd6:	b004      	add	sp, #16
     bd8:	bd80      	pop	{r7, pc}
	...

00000bdc <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     bdc:	b580      	push	{r7, lr}
     bde:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <isr+0x18>)
     be2:	78db      	ldrb	r3, [r3, #3]
     be4:	b2db      	uxtb	r3, r3
     be6:	3301      	adds	r3, #1
     be8:	b2da      	uxtb	r2, r3
     bea:	4b02      	ldr	r3, [pc, #8]	; (bf4 <isr+0x18>)
     bec:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	46bd      	mov	sp, r7
     bf2:	bd80      	pop	{r7, pc}
     bf4:	20001994 	.word	0x20001994

00000bf8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     bf8:	b590      	push	{r4, r7, lr}
     bfa:	b083      	sub	sp, #12
     bfc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     bfe:	1dfb      	adds	r3, r7, #7
     c00:	2200      	movs	r2, #0
     c02:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     c04:	4b14      	ldr	r3, [pc, #80]	; (c58 <hif_set_rx_done+0x60>)
     c06:	2200      	movs	r2, #0
     c08:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     c0a:	2001      	movs	r0, #1
     c0c:	4b13      	ldr	r3, [pc, #76]	; (c5c <hif_set_rx_done+0x64>)
     c0e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     c10:	1dfc      	adds	r4, r7, #7
     c12:	003b      	movs	r3, r7
     c14:	4a12      	ldr	r2, [pc, #72]	; (c60 <hif_set_rx_done+0x68>)
     c16:	0019      	movs	r1, r3
     c18:	0010      	movs	r0, r2
     c1a:	4b12      	ldr	r3, [pc, #72]	; (c64 <hif_set_rx_done+0x6c>)
     c1c:	4798      	blx	r3
     c1e:	0003      	movs	r3, r0
     c20:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     c22:	1dfb      	adds	r3, r7, #7
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	b25b      	sxtb	r3, r3
     c28:	2b00      	cmp	r3, #0
     c2a:	d10d      	bne.n	c48 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     c2c:	683b      	ldr	r3, [r7, #0]
     c2e:	2202      	movs	r2, #2
     c30:	4313      	orrs	r3, r2
     c32:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	1dfc      	adds	r4, r7, #7
     c38:	4a09      	ldr	r2, [pc, #36]	; (c60 <hif_set_rx_done+0x68>)
     c3a:	0019      	movs	r1, r3
     c3c:	0010      	movs	r0, r2
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <hif_set_rx_done+0x70>)
     c40:	4798      	blx	r3
     c42:	0003      	movs	r3, r0
     c44:	7023      	strb	r3, [r4, #0]
     c46:	e000      	b.n	c4a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     c48:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     c4a:	1dfb      	adds	r3, r7, #7
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	b25b      	sxtb	r3, r3

}
     c50:	0018      	movs	r0, r3
     c52:	46bd      	mov	sp, r7
     c54:	b003      	add	sp, #12
     c56:	bd90      	pop	{r4, r7, pc}
     c58:	20001994 	.word	0x20001994
     c5c:	000003d1 	.word	0x000003d1
     c60:	00001070 	.word	0x00001070
     c64:	00003095 	.word	0x00003095
     c68:	000030b9 	.word	0x000030b9

00000c6c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b082      	sub	sp, #8
     c70:	af00      	add	r7, sp, #0
     c72:	603a      	str	r2, [r7, #0]
     c74:	1dfb      	adds	r3, r7, #7
     c76:	1c02      	adds	r2, r0, #0
     c78:	701a      	strb	r2, [r3, #0]
     c7a:	1d3b      	adds	r3, r7, #4
     c7c:	1c0a      	adds	r2, r1, #0
     c7e:	801a      	strh	r2, [r3, #0]


}
     c80:	46c0      	nop			; (mov r8, r8)
     c82:	46bd      	mov	sp, r7
     c84:	b002      	add	sp, #8
     c86:	bd80      	pop	{r7, pc}

00000c88 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     c88:	b590      	push	{r4, r7, lr}
     c8a:	b083      	sub	sp, #12
     c8c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     c8e:	1dfb      	adds	r3, r7, #7
     c90:	2200      	movs	r2, #0
     c92:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     c94:	4b16      	ldr	r3, [pc, #88]	; (cf0 <hif_chip_wake+0x68>)
     c96:	789b      	ldrb	r3, [r3, #2]
     c98:	b2db      	uxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d003      	beq.n	ca6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	b25b      	sxtb	r3, r3
     ca4:	e01f      	b.n	ce6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     ca6:	4b12      	ldr	r3, [pc, #72]	; (cf0 <hif_chip_wake+0x68>)
     ca8:	785b      	ldrb	r3, [r3, #1]
     caa:	b2db      	uxtb	r3, r3
     cac:	2b00      	cmp	r3, #0
     cae:	d10e      	bne.n	cce <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <hif_chip_wake+0x68>)
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	b2db      	uxtb	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	d009      	beq.n	cce <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     cba:	1dfc      	adds	r4, r7, #7
     cbc:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <hif_chip_wake+0x6c>)
     cbe:	4798      	blx	r3
     cc0:	0003      	movs	r3, r0
     cc2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     cc4:	1dfb      	adds	r3, r7, #7
     cc6:	781b      	ldrb	r3, [r3, #0]
     cc8:	b25b      	sxtb	r3, r3
     cca:	2b00      	cmp	r3, #0
     ccc:	d107      	bne.n	cde <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     cce:	4b08      	ldr	r3, [pc, #32]	; (cf0 <hif_chip_wake+0x68>)
     cd0:	785b      	ldrb	r3, [r3, #1]
     cd2:	b2db      	uxtb	r3, r3
     cd4:	3301      	adds	r3, #1
     cd6:	b2da      	uxtb	r2, r3
     cd8:	4b05      	ldr	r3, [pc, #20]	; (cf0 <hif_chip_wake+0x68>)
     cda:	705a      	strb	r2, [r3, #1]
     cdc:	e000      	b.n	ce0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     cde:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	b25b      	sxtb	r3, r3
}
     ce6:	0018      	movs	r0, r3
     ce8:	46bd      	mov	sp, r7
     cea:	b003      	add	sp, #12
     cec:	bd90      	pop	{r4, r7, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	20001994 	.word	0x20001994
     cf4:	00002b69 	.word	0x00002b69

00000cf8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <hif_chip_sleep_sc+0x24>)
     cfe:	785b      	ldrb	r3, [r3, #1]
     d00:	b2db      	uxtb	r3, r3
     d02:	2b00      	cmp	r3, #0
     d04:	d006      	beq.n	d14 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     d06:	4b05      	ldr	r3, [pc, #20]	; (d1c <hif_chip_sleep_sc+0x24>)
     d08:	785b      	ldrb	r3, [r3, #1]
     d0a:	b2db      	uxtb	r3, r3
     d0c:	3b01      	subs	r3, #1
     d0e:	b2da      	uxtb	r2, r3
     d10:	4b02      	ldr	r3, [pc, #8]	; (d1c <hif_chip_sleep_sc+0x24>)
     d12:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     d14:	2300      	movs	r3, #0
}
     d16:	0018      	movs	r0, r3
     d18:	46bd      	mov	sp, r7
     d1a:	bd80      	pop	{r7, pc}
     d1c:	20001994 	.word	0x20001994

00000d20 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     d20:	b590      	push	{r4, r7, lr}
     d22:	b083      	sub	sp, #12
     d24:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     d26:	1dfb      	adds	r3, r7, #7
     d28:	2200      	movs	r2, #0
     d2a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     d2c:	4b10      	ldr	r3, [pc, #64]	; (d70 <hif_chip_sleep+0x50>)
     d2e:	785b      	ldrb	r3, [r3, #1]
     d30:	b2db      	uxtb	r3, r3
     d32:	2b00      	cmp	r3, #0
     d34:	d006      	beq.n	d44 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     d36:	4b0e      	ldr	r3, [pc, #56]	; (d70 <hif_chip_sleep+0x50>)
     d38:	785b      	ldrb	r3, [r3, #1]
     d3a:	b2db      	uxtb	r3, r3
     d3c:	3b01      	subs	r3, #1
     d3e:	b2da      	uxtb	r2, r3
     d40:	4b0b      	ldr	r3, [pc, #44]	; (d70 <hif_chip_sleep+0x50>)
     d42:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     d44:	4b0a      	ldr	r3, [pc, #40]	; (d70 <hif_chip_sleep+0x50>)
     d46:	785b      	ldrb	r3, [r3, #1]
     d48:	b2db      	uxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d109      	bne.n	d62 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <hif_chip_sleep+0x50>)
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	2b00      	cmp	r3, #0
     d56:	d004      	beq.n	d62 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     d58:	1dfc      	adds	r4, r7, #7
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <hif_chip_sleep+0x54>)
     d5c:	4798      	blx	r3
     d5e:	0003      	movs	r3, r0
     d60:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     d62:	1dfb      	adds	r3, r7, #7
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	b25b      	sxtb	r3, r3
}
     d68:	0018      	movs	r0, r3
     d6a:	46bd      	mov	sp, r7
     d6c:	b003      	add	sp, #12
     d6e:	bd90      	pop	{r4, r7, pc}
     d70:	20001994 	.word	0x20001994
     d74:	00002a91 	.word	0x00002a91

00000d78 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     d78:	b580      	push	{r7, lr}
     d7a:	b082      	sub	sp, #8
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     d80:	4b09      	ldr	r3, [pc, #36]	; (da8 <hif_init+0x30>)
     d82:	2228      	movs	r2, #40	; 0x28
     d84:	2100      	movs	r1, #0
     d86:	0018      	movs	r0, r3
     d88:	4b08      	ldr	r3, [pc, #32]	; (dac <hif_init+0x34>)
     d8a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     d8c:	4b08      	ldr	r3, [pc, #32]	; (db0 <hif_init+0x38>)
     d8e:	0018      	movs	r0, r3
     d90:	4b08      	ldr	r3, [pc, #32]	; (db4 <hif_init+0x3c>)
     d92:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     d94:	4b08      	ldr	r3, [pc, #32]	; (db8 <hif_init+0x40>)
     d96:	0019      	movs	r1, r3
     d98:	2003      	movs	r0, #3
     d9a:	4b08      	ldr	r3, [pc, #32]	; (dbc <hif_init+0x44>)
     d9c:	4798      	blx	r3
	return M2M_SUCCESS;
     d9e:	2300      	movs	r3, #0
}
     da0:	0018      	movs	r0, r3
     da2:	46bd      	mov	sp, r7
     da4:	b002      	add	sp, #8
     da6:	bd80      	pop	{r7, pc}
     da8:	20001994 	.word	0x20001994
     dac:	00000b61 	.word	0x00000b61
     db0:	00000bdd 	.word	0x00000bdd
     db4:	00000349 	.word	0x00000349
     db8:	00000c6d 	.word	0x00000c6d
     dbc:	00001835 	.word	0x00001835

00000dc0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     dc0:	b590      	push	{r4, r7, lr}
     dc2:	b089      	sub	sp, #36	; 0x24
     dc4:	af00      	add	r7, sp, #0
     dc6:	0004      	movs	r4, r0
     dc8:	0008      	movs	r0, r1
     dca:	603a      	str	r2, [r7, #0]
     dcc:	0019      	movs	r1, r3
     dce:	1dfb      	adds	r3, r7, #7
     dd0:	1c22      	adds	r2, r4, #0
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	1dbb      	adds	r3, r7, #6
     dd6:	1c02      	adds	r2, r0, #0
     dd8:	701a      	strb	r2, [r3, #0]
     dda:	1d3b      	adds	r3, r7, #4
     ddc:	1c0a      	adds	r2, r1, #0
     dde:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     de0:	231f      	movs	r3, #31
     de2:	18fb      	adds	r3, r7, r3
     de4:	22ff      	movs	r2, #255	; 0xff
     de6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     de8:	1dbb      	adds	r3, r7, #6
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	227f      	movs	r2, #127	; 0x7f
     dee:	4013      	ands	r3, r2
     df0:	b2da      	uxtb	r2, r3
     df2:	2318      	movs	r3, #24
     df4:	18fb      	adds	r3, r7, r3
     df6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     df8:	2318      	movs	r3, #24
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	1dfa      	adds	r2, r7, #7
     dfe:	7812      	ldrb	r2, [r2, #0]
     e00:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     e02:	2318      	movs	r3, #24
     e04:	18fb      	adds	r3, r7, r3
     e06:	2208      	movs	r2, #8
     e08:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e0c:	2b00      	cmp	r3, #0
     e0e:	d011      	beq.n	e34 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     e10:	2318      	movs	r3, #24
     e12:	18fb      	adds	r3, r7, r3
     e14:	885b      	ldrh	r3, [r3, #2]
     e16:	b29a      	uxth	r2, r3
     e18:	2338      	movs	r3, #56	; 0x38
     e1a:	18f9      	adds	r1, r7, r3
     e1c:	2334      	movs	r3, #52	; 0x34
     e1e:	18fb      	adds	r3, r7, r3
     e20:	8809      	ldrh	r1, [r1, #0]
     e22:	881b      	ldrh	r3, [r3, #0]
     e24:	18cb      	adds	r3, r1, r3
     e26:	b29b      	uxth	r3, r3
     e28:	18d3      	adds	r3, r2, r3
     e2a:	b29a      	uxth	r2, r3
     e2c:	2318      	movs	r3, #24
     e2e:	18fb      	adds	r3, r7, r3
     e30:	805a      	strh	r2, [r3, #2]
     e32:	e00a      	b.n	e4a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     e34:	2318      	movs	r3, #24
     e36:	18fb      	adds	r3, r7, r3
     e38:	885b      	ldrh	r3, [r3, #2]
     e3a:	b29a      	uxth	r2, r3
     e3c:	1d3b      	adds	r3, r7, #4
     e3e:	881b      	ldrh	r3, [r3, #0]
     e40:	18d3      	adds	r3, r2, r3
     e42:	b29a      	uxth	r2, r3
     e44:	2318      	movs	r3, #24
     e46:	18fb      	adds	r3, r7, r3
     e48:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     e4a:	231f      	movs	r3, #31
     e4c:	18fc      	adds	r4, r7, r3
     e4e:	4bb0      	ldr	r3, [pc, #704]	; (1110 <hif_send+0x350>)
     e50:	4798      	blx	r3
     e52:	0003      	movs	r3, r0
     e54:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     e56:	231f      	movs	r3, #31
     e58:	18fb      	adds	r3, r7, r3
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	b25b      	sxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d000      	beq.n	e64 <hif_send+0xa4>
     e62:	e127      	b.n	10b4 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     e64:	2300      	movs	r3, #0
     e66:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     e68:	230e      	movs	r3, #14
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	2200      	movs	r2, #0
     e6e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     e70:	2300      	movs	r3, #0
     e72:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     e74:	1dfb      	adds	r3, r7, #7
     e76:	781a      	ldrb	r2, [r3, #0]
     e78:	697b      	ldr	r3, [r7, #20]
     e7a:	4313      	orrs	r3, r2
     e7c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     e7e:	1dbb      	adds	r3, r7, #6
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	021a      	lsls	r2, r3, #8
     e84:	697b      	ldr	r3, [r7, #20]
     e86:	4313      	orrs	r3, r2
     e88:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     e8a:	2318      	movs	r3, #24
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	885b      	ldrh	r3, [r3, #2]
     e90:	b29b      	uxth	r3, r3
     e92:	041a      	lsls	r2, r3, #16
     e94:	697b      	ldr	r3, [r7, #20]
     e96:	4313      	orrs	r3, r2
     e98:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     e9a:	697b      	ldr	r3, [r7, #20]
     e9c:	221f      	movs	r2, #31
     e9e:	18bc      	adds	r4, r7, r2
     ea0:	4a9c      	ldr	r2, [pc, #624]	; (1114 <hif_send+0x354>)
     ea2:	0019      	movs	r1, r3
     ea4:	0010      	movs	r0, r2
     ea6:	4b9c      	ldr	r3, [pc, #624]	; (1118 <hif_send+0x358>)
     ea8:	4798      	blx	r3
     eaa:	0003      	movs	r3, r0
     eac:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     eae:	231f      	movs	r3, #31
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	b25b      	sxtb	r3, r3
     eb6:	2b00      	cmp	r3, #0
     eb8:	d000      	beq.n	ebc <hif_send+0xfc>
     eba:	e116      	b.n	10ea <hif_send+0x32a>

		reg = 0UL;
     ebc:	2300      	movs	r3, #0
     ebe:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
     ec0:	697b      	ldr	r3, [r7, #20]
     ec2:	2202      	movs	r2, #2
     ec4:	4313      	orrs	r3, r2
     ec6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     ec8:	697b      	ldr	r3, [r7, #20]
     eca:	221f      	movs	r2, #31
     ecc:	18bc      	adds	r4, r7, r2
     ece:	4a93      	ldr	r2, [pc, #588]	; (111c <hif_send+0x35c>)
     ed0:	0019      	movs	r1, r3
     ed2:	0010      	movs	r0, r2
     ed4:	4b90      	ldr	r3, [pc, #576]	; (1118 <hif_send+0x358>)
     ed6:	4798      	blx	r3
     ed8:	0003      	movs	r3, r0
     eda:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     edc:	231f      	movs	r3, #31
     ede:	18fb      	adds	r3, r7, r3
     ee0:	781b      	ldrb	r3, [r3, #0]
     ee2:	b25b      	sxtb	r3, r3
     ee4:	2b00      	cmp	r3, #0
     ee6:	d000      	beq.n	eea <hif_send+0x12a>
     ee8:	e101      	b.n	10ee <hif_send+0x32e>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     eea:	2300      	movs	r3, #0
     eec:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     eee:	230e      	movs	r3, #14
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	2200      	movs	r2, #0
     ef4:	801a      	strh	r2, [r3, #0]
     ef6:	e04f      	b.n	f98 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     ef8:	231f      	movs	r3, #31
     efa:	18fc      	adds	r4, r7, r3
     efc:	2314      	movs	r3, #20
     efe:	18fb      	adds	r3, r7, r3
     f00:	4a86      	ldr	r2, [pc, #536]	; (111c <hif_send+0x35c>)
     f02:	0019      	movs	r1, r3
     f04:	0010      	movs	r0, r2
     f06:	4b86      	ldr	r3, [pc, #536]	; (1120 <hif_send+0x360>)
     f08:	4798      	blx	r3
     f0a:	0003      	movs	r3, r0
     f0c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     f0e:	231f      	movs	r3, #31
     f10:	18fb      	adds	r3, r7, r3
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	b25b      	sxtb	r3, r3
     f16:	2b00      	cmp	r3, #0
     f18:	d146      	bne.n	fa8 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     f1a:	230e      	movs	r3, #14
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	881b      	ldrh	r3, [r3, #0]
     f20:	b29a      	uxth	r2, r3
     f22:	23f4      	movs	r3, #244	; 0xf4
     f24:	33ff      	adds	r3, #255	; 0xff
     f26:	429a      	cmp	r2, r3
     f28:	d915      	bls.n	f56 <hif_send+0x196>
				if(cnt < 501) {
     f2a:	230e      	movs	r3, #14
     f2c:	18fb      	adds	r3, r7, r3
     f2e:	881b      	ldrh	r3, [r3, #0]
     f30:	b29a      	uxth	r2, r3
     f32:	23fa      	movs	r3, #250	; 0xfa
     f34:	005b      	lsls	r3, r3, #1
     f36:	429a      	cmp	r2, r3
     f38:	d80a      	bhi.n	f50 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
     f3a:	4b7a      	ldr	r3, [pc, #488]	; (1124 <hif_send+0x364>)
     f3c:	0018      	movs	r0, r3
     f3e:	4b7a      	ldr	r3, [pc, #488]	; (1128 <hif_send+0x368>)
     f40:	4798      	blx	r3
     f42:	4b7a      	ldr	r3, [pc, #488]	; (112c <hif_send+0x36c>)
     f44:	0018      	movs	r0, r3
     f46:	4b7a      	ldr	r3, [pc, #488]	; (1130 <hif_send+0x370>)
     f48:	4798      	blx	r3
     f4a:	200d      	movs	r0, #13
     f4c:	4b79      	ldr	r3, [pc, #484]	; (1134 <hif_send+0x374>)
     f4e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
     f50:	2001      	movs	r0, #1
     f52:	4b79      	ldr	r3, [pc, #484]	; (1138 <hif_send+0x378>)
     f54:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
     f56:	697b      	ldr	r3, [r7, #20]
     f58:	2202      	movs	r2, #2
     f5a:	4013      	ands	r3, r2
     f5c:	d113      	bne.n	f86 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     f5e:	231f      	movs	r3, #31
     f60:	18fc      	adds	r4, r7, r3
     f62:	2310      	movs	r3, #16
     f64:	18fb      	adds	r3, r7, r3
     f66:	4a75      	ldr	r2, [pc, #468]	; (113c <hif_send+0x37c>)
     f68:	0019      	movs	r1, r3
     f6a:	0010      	movs	r0, r2
     f6c:	4b6c      	ldr	r3, [pc, #432]	; (1120 <hif_send+0x360>)
     f6e:	4798      	blx	r3
     f70:	0003      	movs	r3, r0
     f72:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
     f74:	231f      	movs	r3, #31
     f76:	18fb      	adds	r3, r7, r3
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	b25b      	sxtb	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d015      	beq.n	fac <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     f80:	2300      	movs	r3, #0
     f82:	613b      	str	r3, [r7, #16]
					goto ERR1;
     f84:	e0ba      	b.n	10fc <hif_send+0x33c>
		for(cnt = 0; cnt < 1000; cnt ++)
     f86:	230e      	movs	r3, #14
     f88:	18fb      	adds	r3, r7, r3
     f8a:	881b      	ldrh	r3, [r3, #0]
     f8c:	b29b      	uxth	r3, r3
     f8e:	3301      	adds	r3, #1
     f90:	b29a      	uxth	r2, r3
     f92:	230e      	movs	r3, #14
     f94:	18fb      	adds	r3, r7, r3
     f96:	801a      	strh	r2, [r3, #0]
     f98:	230e      	movs	r3, #14
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	881b      	ldrh	r3, [r3, #0]
     f9e:	b29b      	uxth	r3, r3
     fa0:	4a67      	ldr	r2, [pc, #412]	; (1140 <hif_send+0x380>)
     fa2:	4293      	cmp	r3, r2
     fa4:	d9a8      	bls.n	ef8 <hif_send+0x138>
     fa6:	e002      	b.n	fae <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
     fa8:	46c0      	nop			; (mov r8, r8)
     faa:	e000      	b.n	fae <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
     fac:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
     fae:	693b      	ldr	r3, [r7, #16]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d100      	bne.n	fb6 <hif_send+0x1f6>
     fb4:	e073      	b.n	109e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     fb6:	693b      	ldr	r3, [r7, #16]
     fb8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     fba:	2318      	movs	r3, #24
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	885b      	ldrh	r3, [r3, #2]
     fc0:	b29a      	uxth	r2, r3
     fc2:	2318      	movs	r3, #24
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	221f      	movs	r2, #31
     fcc:	18bc      	adds	r4, r7, r2
     fce:	2218      	movs	r2, #24
     fd0:	18b9      	adds	r1, r7, r2
     fd2:	2208      	movs	r2, #8
     fd4:	0018      	movs	r0, r3
     fd6:	4b5b      	ldr	r3, [pc, #364]	; (1144 <hif_send+0x384>)
     fd8:	4798      	blx	r3
     fda:	0003      	movs	r3, r0
     fdc:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
     fde:	231f      	movs	r3, #31
     fe0:	18fb      	adds	r3, r7, r3
     fe2:	781b      	ldrb	r3, [r3, #0]
     fe4:	b25b      	sxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	d000      	beq.n	fec <hif_send+0x22c>
     fea:	e082      	b.n	10f2 <hif_send+0x332>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     fec:	68bb      	ldr	r3, [r7, #8]
     fee:	3308      	adds	r3, #8
     ff0:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
     ff2:	683b      	ldr	r3, [r7, #0]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d015      	beq.n	1024 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     ff8:	68b8      	ldr	r0, [r7, #8]
     ffa:	1d3b      	adds	r3, r7, #4
     ffc:	881a      	ldrh	r2, [r3, #0]
     ffe:	231f      	movs	r3, #31
    1000:	18fc      	adds	r4, r7, r3
    1002:	683b      	ldr	r3, [r7, #0]
    1004:	0019      	movs	r1, r3
    1006:	4b4f      	ldr	r3, [pc, #316]	; (1144 <hif_send+0x384>)
    1008:	4798      	blx	r3
    100a:	0003      	movs	r3, r0
    100c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    100e:	231f      	movs	r3, #31
    1010:	18fb      	adds	r3, r7, r3
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	b25b      	sxtb	r3, r3
    1016:	2b00      	cmp	r3, #0
    1018:	d16d      	bne.n	10f6 <hif_send+0x336>
				u32CurrAddr += u16CtrlBufSize;
    101a:	1d3b      	adds	r3, r7, #4
    101c:	881a      	ldrh	r2, [r3, #0]
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	18d3      	adds	r3, r2, r3
    1022:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    1024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1026:	2b00      	cmp	r3, #0
    1028:	d021      	beq.n	106e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    102a:	2338      	movs	r3, #56	; 0x38
    102c:	18fb      	adds	r3, r7, r3
    102e:	881a      	ldrh	r2, [r3, #0]
    1030:	1d3b      	adds	r3, r7, #4
    1032:	881b      	ldrh	r3, [r3, #0]
    1034:	1ad3      	subs	r3, r2, r3
    1036:	001a      	movs	r2, r3
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	18d3      	adds	r3, r2, r3
    103c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    103e:	68b8      	ldr	r0, [r7, #8]
    1040:	2334      	movs	r3, #52	; 0x34
    1042:	18fb      	adds	r3, r7, r3
    1044:	881a      	ldrh	r2, [r3, #0]
    1046:	231f      	movs	r3, #31
    1048:	18fc      	adds	r4, r7, r3
    104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104c:	0019      	movs	r1, r3
    104e:	4b3d      	ldr	r3, [pc, #244]	; (1144 <hif_send+0x384>)
    1050:	4798      	blx	r3
    1052:	0003      	movs	r3, r0
    1054:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    1056:	231f      	movs	r3, #31
    1058:	18fb      	adds	r3, r7, r3
    105a:	781b      	ldrb	r3, [r3, #0]
    105c:	b25b      	sxtb	r3, r3
    105e:	2b00      	cmp	r3, #0
    1060:	d14b      	bne.n	10fa <hif_send+0x33a>
				u32CurrAddr += u16DataSize;
    1062:	2334      	movs	r3, #52	; 0x34
    1064:	18fb      	adds	r3, r7, r3
    1066:	881a      	ldrh	r2, [r3, #0]
    1068:	68bb      	ldr	r3, [r7, #8]
    106a:	18d3      	adds	r3, r2, r3
    106c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    106e:	693b      	ldr	r3, [r7, #16]
    1070:	009b      	lsls	r3, r3, #2
    1072:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    1074:	697b      	ldr	r3, [r7, #20]
    1076:	2202      	movs	r2, #2
    1078:	4313      	orrs	r3, r2
    107a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    107c:	697b      	ldr	r3, [r7, #20]
    107e:	221f      	movs	r2, #31
    1080:	18bc      	adds	r4, r7, r2
    1082:	4a31      	ldr	r2, [pc, #196]	; (1148 <hif_send+0x388>)
    1084:	0019      	movs	r1, r3
    1086:	0010      	movs	r0, r2
    1088:	4b23      	ldr	r3, [pc, #140]	; (1118 <hif_send+0x358>)
    108a:	4798      	blx	r3
    108c:	0003      	movs	r3, r0
    108e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1090:	231f      	movs	r3, #31
    1092:	18fb      	adds	r3, r7, r3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	b25b      	sxtb	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	d01b      	beq.n	10d4 <hif_send+0x314>
    109c:	e02e      	b.n	10fc <hif_send+0x33c>
		}
		else
		{
			ret = hif_chip_sleep();
    109e:	231f      	movs	r3, #31
    10a0:	18fc      	adds	r4, r7, r3
    10a2:	4b2a      	ldr	r3, [pc, #168]	; (114c <hif_send+0x38c>)
    10a4:	4798      	blx	r3
    10a6:	0003      	movs	r3, r0
    10a8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    10aa:	231f      	movs	r3, #31
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	22fd      	movs	r2, #253	; 0xfd
    10b0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    10b2:	e025      	b.n	1100 <hif_send+0x340>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    10b4:	2398      	movs	r3, #152	; 0x98
    10b6:	33ff      	adds	r3, #255	; 0xff
    10b8:	001a      	movs	r2, r3
    10ba:	4925      	ldr	r1, [pc, #148]	; (1150 <hif_send+0x390>)
    10bc:	4b25      	ldr	r3, [pc, #148]	; (1154 <hif_send+0x394>)
    10be:	0018      	movs	r0, r3
    10c0:	4b19      	ldr	r3, [pc, #100]	; (1128 <hif_send+0x368>)
    10c2:	4798      	blx	r3
    10c4:	4b24      	ldr	r3, [pc, #144]	; (1158 <hif_send+0x398>)
    10c6:	0018      	movs	r0, r3
    10c8:	4b19      	ldr	r3, [pc, #100]	; (1130 <hif_send+0x370>)
    10ca:	4798      	blx	r3
    10cc:	200d      	movs	r0, #13
    10ce:	4b19      	ldr	r3, [pc, #100]	; (1134 <hif_send+0x374>)
    10d0:	4798      	blx	r3
		goto ERR2;
    10d2:	e015      	b.n	1100 <hif_send+0x340>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    10d4:	231f      	movs	r3, #31
    10d6:	18fc      	adds	r4, r7, r3
    10d8:	4b1c      	ldr	r3, [pc, #112]	; (114c <hif_send+0x38c>)
    10da:	4798      	blx	r3
    10dc:	0003      	movs	r3, r0
    10de:	7023      	strb	r3, [r4, #0]
	return ret;
    10e0:	231f      	movs	r3, #31
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	781b      	ldrb	r3, [r3, #0]
    10e6:	b25b      	sxtb	r3, r3
    10e8:	e00e      	b.n	1108 <hif_send+0x348>
		if(M2M_SUCCESS != ret) goto ERR1;
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	e006      	b.n	10fc <hif_send+0x33c>
		if(M2M_SUCCESS != ret) goto ERR1;
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	e004      	b.n	10fc <hif_send+0x33c>
			if(M2M_SUCCESS != ret) goto ERR1;
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	e002      	b.n	10fc <hif_send+0x33c>
				if(M2M_SUCCESS != ret) goto ERR1;
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	e000      	b.n	10fc <hif_send+0x33c>
				if(M2M_SUCCESS != ret) goto ERR1;
    10fa:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    10fc:	4b17      	ldr	r3, [pc, #92]	; (115c <hif_send+0x39c>)
    10fe:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    1100:	231f      	movs	r3, #31
    1102:	18fb      	adds	r3, r7, r3
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	b25b      	sxtb	r3, r3
}
    1108:	0018      	movs	r0, r3
    110a:	46bd      	mov	sp, r7
    110c:	b009      	add	sp, #36	; 0x24
    110e:	bd90      	pop	{r4, r7, pc}
    1110:	00000c89 	.word	0x00000c89
    1114:	0000108c 	.word	0x0000108c
    1118:	000030b9 	.word	0x000030b9
    111c:	00001078 	.word	0x00001078
    1120:	00003095 	.word	0x00003095
    1124:	0001d0c4 	.word	0x0001d0c4
    1128:	0001bc4d 	.word	0x0001bc4d
    112c:	0001d0d0 	.word	0x0001d0d0
    1130:	0001bd69 	.word	0x0001bd69
    1134:	0001bc81 	.word	0x0001bc81
    1138:	00000321 	.word	0x00000321
    113c:	00150400 	.word	0x00150400
    1140:	000003e7 	.word	0x000003e7
    1144:	00003201 	.word	0x00003201
    1148:	0000106c 	.word	0x0000106c
    114c:	00000d21 	.word	0x00000d21
    1150:	0001d3d8 	.word	0x0001d3d8
    1154:	0001d0e0 	.word	0x0001d0e0
    1158:	0001d0f4 	.word	0x0001d0f4
    115c:	00000cf9 	.word	0x00000cf9

00001160 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1160:	b590      	push	{r4, r7, lr}
    1162:	b087      	sub	sp, #28
    1164:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    1166:	230f      	movs	r3, #15
    1168:	18fb      	adds	r3, r7, r3
    116a:	2200      	movs	r2, #0
    116c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    116e:	230f      	movs	r3, #15
    1170:	18fc      	adds	r4, r7, r3
    1172:	2308      	movs	r3, #8
    1174:	18fb      	adds	r3, r7, r3
    1176:	4ad8      	ldr	r2, [pc, #864]	; (14d8 <hif_isr+0x378>)
    1178:	0019      	movs	r1, r3
    117a:	0010      	movs	r0, r2
    117c:	4bd7      	ldr	r3, [pc, #860]	; (14dc <hif_isr+0x37c>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
    1182:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1184:	230f      	movs	r3, #15
    1186:	18fb      	adds	r3, r7, r3
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	b25b      	sxtb	r3, r3
    118c:	2b00      	cmp	r3, #0
    118e:	d000      	beq.n	1192 <hif_isr+0x32>
    1190:	e215      	b.n	15be <hif_isr+0x45e>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1192:	68bb      	ldr	r3, [r7, #8]
    1194:	2201      	movs	r2, #1
    1196:	4013      	ands	r3, r2
    1198:	d100      	bne.n	119c <hif_isr+0x3c>
    119a:	e1fc      	b.n	1596 <hif_isr+0x436>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    119c:	2000      	movs	r0, #0
    119e:	4bd0      	ldr	r3, [pc, #832]	; (14e0 <hif_isr+0x380>)
    11a0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	2201      	movs	r2, #1
    11a6:	4393      	bics	r3, r2
    11a8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    11aa:	68bb      	ldr	r3, [r7, #8]
    11ac:	220f      	movs	r2, #15
    11ae:	18bc      	adds	r4, r7, r2
    11b0:	4ac9      	ldr	r2, [pc, #804]	; (14d8 <hif_isr+0x378>)
    11b2:	0019      	movs	r1, r3
    11b4:	0010      	movs	r0, r2
    11b6:	4bcb      	ldr	r3, [pc, #812]	; (14e4 <hif_isr+0x384>)
    11b8:	4798      	blx	r3
    11ba:	0003      	movs	r3, r0
    11bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    11be:	230f      	movs	r3, #15
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	b25b      	sxtb	r3, r3
    11c6:	2b00      	cmp	r3, #0
    11c8:	d000      	beq.n	11cc <hif_isr+0x6c>
    11ca:	e206      	b.n	15da <hif_isr+0x47a>
			gstrHifCxt.u8HifRXDone = 1;
    11cc:	4bc6      	ldr	r3, [pc, #792]	; (14e8 <hif_isr+0x388>)
    11ce:	2201      	movs	r2, #1
    11d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    11d2:	68bb      	ldr	r3, [r7, #8]
    11d4:	089b      	lsrs	r3, r3, #2
    11d6:	b29a      	uxth	r2, r3
    11d8:	230c      	movs	r3, #12
    11da:	18fb      	adds	r3, r7, r3
    11dc:	0512      	lsls	r2, r2, #20
    11de:	0d12      	lsrs	r2, r2, #20
    11e0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    11e2:	230c      	movs	r3, #12
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	881b      	ldrh	r3, [r3, #0]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d100      	bne.n	11ee <hif_isr+0x8e>
    11ec:	e1c1      	b.n	1572 <hif_isr+0x412>
				uint32 address = 0;
    11ee:	2300      	movs	r3, #0
    11f0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    11f2:	230f      	movs	r3, #15
    11f4:	18fc      	adds	r4, r7, r3
    11f6:	003b      	movs	r3, r7
    11f8:	4abc      	ldr	r2, [pc, #752]	; (14ec <hif_isr+0x38c>)
    11fa:	0019      	movs	r1, r3
    11fc:	0010      	movs	r0, r2
    11fe:	4bb7      	ldr	r3, [pc, #732]	; (14dc <hif_isr+0x37c>)
    1200:	4798      	blx	r3
    1202:	0003      	movs	r3, r0
    1204:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1206:	230f      	movs	r3, #15
    1208:	18fb      	adds	r3, r7, r3
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	b25b      	sxtb	r3, r3
    120e:	2b00      	cmp	r3, #0
    1210:	d011      	beq.n	1236 <hif_isr+0xd6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1212:	23e4      	movs	r3, #228	; 0xe4
    1214:	005a      	lsls	r2, r3, #1
    1216:	49b6      	ldr	r1, [pc, #728]	; (14f0 <hif_isr+0x390>)
    1218:	4bb6      	ldr	r3, [pc, #728]	; (14f4 <hif_isr+0x394>)
    121a:	0018      	movs	r0, r3
    121c:	4bb6      	ldr	r3, [pc, #728]	; (14f8 <hif_isr+0x398>)
    121e:	4798      	blx	r3
    1220:	4bb6      	ldr	r3, [pc, #728]	; (14fc <hif_isr+0x39c>)
    1222:	0018      	movs	r0, r3
    1224:	4bb6      	ldr	r3, [pc, #728]	; (1500 <hif_isr+0x3a0>)
    1226:	4798      	blx	r3
    1228:	200d      	movs	r0, #13
    122a:	4bb6      	ldr	r3, [pc, #728]	; (1504 <hif_isr+0x3a4>)
    122c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    122e:	2001      	movs	r0, #1
    1230:	4bab      	ldr	r3, [pc, #684]	; (14e0 <hif_isr+0x380>)
    1232:	4798      	blx	r3
					goto ERR1;
    1234:	e1d2      	b.n	15dc <hif_isr+0x47c>
				}
				gstrHifCxt.u32RxAddr = address;
    1236:	683a      	ldr	r2, [r7, #0]
    1238:	4bab      	ldr	r3, [pc, #684]	; (14e8 <hif_isr+0x388>)
    123a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    123c:	230c      	movs	r3, #12
    123e:	18fb      	adds	r3, r7, r3
    1240:	881a      	ldrh	r2, [r3, #0]
    1242:	4ba9      	ldr	r3, [pc, #676]	; (14e8 <hif_isr+0x388>)
    1244:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1246:	683b      	ldr	r3, [r7, #0]
    1248:	220f      	movs	r2, #15
    124a:	18bc      	adds	r4, r7, r2
    124c:	1d39      	adds	r1, r7, #4
    124e:	2204      	movs	r2, #4
    1250:	0018      	movs	r0, r3
    1252:	4bad      	ldr	r3, [pc, #692]	; (1508 <hif_isr+0x3a8>)
    1254:	4798      	blx	r3
    1256:	0003      	movs	r3, r0
    1258:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    125a:	1d3b      	adds	r3, r7, #4
    125c:	885b      	ldrh	r3, [r3, #2]
    125e:	b29a      	uxth	r2, r3
    1260:	1d3b      	adds	r3, r7, #4
    1262:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    1264:	230f      	movs	r3, #15
    1266:	18fb      	adds	r3, r7, r3
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	b25b      	sxtb	r3, r3
    126c:	2b00      	cmp	r3, #0
    126e:	d011      	beq.n	1294 <hif_isr+0x134>
				{
					M2M_ERR("(hif) address bus fail\n");
    1270:	23e9      	movs	r3, #233	; 0xe9
    1272:	005a      	lsls	r2, r3, #1
    1274:	499e      	ldr	r1, [pc, #632]	; (14f0 <hif_isr+0x390>)
    1276:	4b9f      	ldr	r3, [pc, #636]	; (14f4 <hif_isr+0x394>)
    1278:	0018      	movs	r0, r3
    127a:	4b9f      	ldr	r3, [pc, #636]	; (14f8 <hif_isr+0x398>)
    127c:	4798      	blx	r3
    127e:	4ba3      	ldr	r3, [pc, #652]	; (150c <hif_isr+0x3ac>)
    1280:	0018      	movs	r0, r3
    1282:	4b9f      	ldr	r3, [pc, #636]	; (1500 <hif_isr+0x3a0>)
    1284:	4798      	blx	r3
    1286:	200d      	movs	r0, #13
    1288:	4b9e      	ldr	r3, [pc, #632]	; (1504 <hif_isr+0x3a4>)
    128a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    128c:	2001      	movs	r0, #1
    128e:	4b94      	ldr	r3, [pc, #592]	; (14e0 <hif_isr+0x380>)
    1290:	4798      	blx	r3
					goto ERR1;
    1292:	e1a3      	b.n	15dc <hif_isr+0x47c>
				}
				if(strHif.u16Length != size)
    1294:	1d3b      	adds	r3, r7, #4
    1296:	885b      	ldrh	r3, [r3, #2]
    1298:	b29b      	uxth	r3, r3
    129a:	220c      	movs	r2, #12
    129c:	18ba      	adds	r2, r7, r2
    129e:	8812      	ldrh	r2, [r2, #0]
    12a0:	429a      	cmp	r2, r3
    12a2:	d02e      	beq.n	1302 <hif_isr+0x1a2>
				{
					if((size - strHif.u16Length) > 4)
    12a4:	230c      	movs	r3, #12
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	881b      	ldrh	r3, [r3, #0]
    12aa:	1d3a      	adds	r2, r7, #4
    12ac:	8852      	ldrh	r2, [r2, #2]
    12ae:	b292      	uxth	r2, r2
    12b0:	1a9b      	subs	r3, r3, r2
    12b2:	2b04      	cmp	r3, #4
    12b4:	dd25      	ble.n	1302 <hif_isr+0x1a2>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    12b6:	23dc      	movs	r3, #220	; 0xdc
    12b8:	33ff      	adds	r3, #255	; 0xff
    12ba:	001a      	movs	r2, r3
    12bc:	498c      	ldr	r1, [pc, #560]	; (14f0 <hif_isr+0x390>)
    12be:	4b8d      	ldr	r3, [pc, #564]	; (14f4 <hif_isr+0x394>)
    12c0:	0018      	movs	r0, r3
    12c2:	4b8d      	ldr	r3, [pc, #564]	; (14f8 <hif_isr+0x398>)
    12c4:	4798      	blx	r3
    12c6:	230c      	movs	r3, #12
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	8819      	ldrh	r1, [r3, #0]
    12cc:	1d3b      	adds	r3, r7, #4
    12ce:	885b      	ldrh	r3, [r3, #2]
    12d0:	b29b      	uxth	r3, r3
    12d2:	001a      	movs	r2, r3
    12d4:	1d3b      	adds	r3, r7, #4
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b2db      	uxtb	r3, r3
    12da:	001c      	movs	r4, r3
    12dc:	1d3b      	adds	r3, r7, #4
    12de:	785b      	ldrb	r3, [r3, #1]
    12e0:	b2db      	uxtb	r3, r3
    12e2:	488b      	ldr	r0, [pc, #556]	; (1510 <hif_isr+0x3b0>)
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	0023      	movs	r3, r4
    12e8:	4c83      	ldr	r4, [pc, #524]	; (14f8 <hif_isr+0x398>)
    12ea:	47a0      	blx	r4
    12ec:	200d      	movs	r0, #13
    12ee:	4b85      	ldr	r3, [pc, #532]	; (1504 <hif_isr+0x3a4>)
    12f0:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    12f2:	2001      	movs	r0, #1
    12f4:	4b7a      	ldr	r3, [pc, #488]	; (14e0 <hif_isr+0x380>)
    12f6:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    12f8:	230f      	movs	r3, #15
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	22fa      	movs	r2, #250	; 0xfa
    12fe:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1300:	e16c      	b.n	15dc <hif_isr+0x47c>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1302:	1d3b      	adds	r3, r7, #4
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	b2db      	uxtb	r3, r3
    1308:	2b01      	cmp	r3, #1
    130a:	d121      	bne.n	1350 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    130c:	4b76      	ldr	r3, [pc, #472]	; (14e8 <hif_isr+0x388>)
    130e:	68db      	ldr	r3, [r3, #12]
    1310:	2b00      	cmp	r3, #0
    1312:	d00d      	beq.n	1330 <hif_isr+0x1d0>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1314:	4b74      	ldr	r3, [pc, #464]	; (14e8 <hif_isr+0x388>)
    1316:	68db      	ldr	r3, [r3, #12]
    1318:	1d3a      	adds	r2, r7, #4
    131a:	7852      	ldrb	r2, [r2, #1]
    131c:	b2d0      	uxtb	r0, r2
    131e:	1d3a      	adds	r2, r7, #4
    1320:	8852      	ldrh	r2, [r2, #2]
    1322:	b292      	uxth	r2, r2
    1324:	3a08      	subs	r2, #8
    1326:	b291      	uxth	r1, r2
    1328:	683a      	ldr	r2, [r7, #0]
    132a:	3208      	adds	r2, #8
    132c:	4798      	blx	r3
    132e:	e0ff      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    1330:	23e8      	movs	r3, #232	; 0xe8
    1332:	33ff      	adds	r3, #255	; 0xff
    1334:	001a      	movs	r2, r3
    1336:	496e      	ldr	r1, [pc, #440]	; (14f0 <hif_isr+0x390>)
    1338:	4b6e      	ldr	r3, [pc, #440]	; (14f4 <hif_isr+0x394>)
    133a:	0018      	movs	r0, r3
    133c:	4b6e      	ldr	r3, [pc, #440]	; (14f8 <hif_isr+0x398>)
    133e:	4798      	blx	r3
    1340:	4b74      	ldr	r3, [pc, #464]	; (1514 <hif_isr+0x3b4>)
    1342:	0018      	movs	r0, r3
    1344:	4b6e      	ldr	r3, [pc, #440]	; (1500 <hif_isr+0x3a0>)
    1346:	4798      	blx	r3
    1348:	200d      	movs	r0, #13
    134a:	4b6e      	ldr	r3, [pc, #440]	; (1504 <hif_isr+0x3a4>)
    134c:	4798      	blx	r3
    134e:	e0ef      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1350:	1d3b      	adds	r3, r7, #4
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	b2db      	uxtb	r3, r3
    1356:	2b02      	cmp	r3, #2
    1358:	d121      	bne.n	139e <hif_isr+0x23e>
				{
					if(gstrHifCxt.pfIpCb)
    135a:	4b63      	ldr	r3, [pc, #396]	; (14e8 <hif_isr+0x388>)
    135c:	691b      	ldr	r3, [r3, #16]
    135e:	2b00      	cmp	r3, #0
    1360:	d00d      	beq.n	137e <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1362:	4b61      	ldr	r3, [pc, #388]	; (14e8 <hif_isr+0x388>)
    1364:	691b      	ldr	r3, [r3, #16]
    1366:	1d3a      	adds	r2, r7, #4
    1368:	7852      	ldrb	r2, [r2, #1]
    136a:	b2d0      	uxtb	r0, r2
    136c:	1d3a      	adds	r2, r7, #4
    136e:	8852      	ldrh	r2, [r2, #2]
    1370:	b292      	uxth	r2, r2
    1372:	3a08      	subs	r2, #8
    1374:	b291      	uxth	r1, r2
    1376:	683a      	ldr	r2, [r7, #0]
    1378:	3208      	adds	r2, #8
    137a:	4798      	blx	r3
    137c:	e0d8      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    137e:	23f0      	movs	r3, #240	; 0xf0
    1380:	33ff      	adds	r3, #255	; 0xff
    1382:	001a      	movs	r2, r3
    1384:	495a      	ldr	r1, [pc, #360]	; (14f0 <hif_isr+0x390>)
    1386:	4b5b      	ldr	r3, [pc, #364]	; (14f4 <hif_isr+0x394>)
    1388:	0018      	movs	r0, r3
    138a:	4b5b      	ldr	r3, [pc, #364]	; (14f8 <hif_isr+0x398>)
    138c:	4798      	blx	r3
    138e:	4b62      	ldr	r3, [pc, #392]	; (1518 <hif_isr+0x3b8>)
    1390:	0018      	movs	r0, r3
    1392:	4b5b      	ldr	r3, [pc, #364]	; (1500 <hif_isr+0x3a0>)
    1394:	4798      	blx	r3
    1396:	200d      	movs	r0, #13
    1398:	4b5a      	ldr	r3, [pc, #360]	; (1504 <hif_isr+0x3a4>)
    139a:	4798      	blx	r3
    139c:	e0c8      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    139e:	1d3b      	adds	r3, r7, #4
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	2b04      	cmp	r3, #4
    13a6:	d121      	bne.n	13ec <hif_isr+0x28c>
				{
					if(gstrHifCxt.pfOtaCb)
    13a8:	4b4f      	ldr	r3, [pc, #316]	; (14e8 <hif_isr+0x388>)
    13aa:	695b      	ldr	r3, [r3, #20]
    13ac:	2b00      	cmp	r3, #0
    13ae:	d00d      	beq.n	13cc <hif_isr+0x26c>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13b0:	4b4d      	ldr	r3, [pc, #308]	; (14e8 <hif_isr+0x388>)
    13b2:	695b      	ldr	r3, [r3, #20]
    13b4:	1d3a      	adds	r2, r7, #4
    13b6:	7852      	ldrb	r2, [r2, #1]
    13b8:	b2d0      	uxtb	r0, r2
    13ba:	1d3a      	adds	r2, r7, #4
    13bc:	8852      	ldrh	r2, [r2, #2]
    13be:	b292      	uxth	r2, r2
    13c0:	3a08      	subs	r2, #8
    13c2:	b291      	uxth	r1, r2
    13c4:	683a      	ldr	r2, [r7, #0]
    13c6:	3208      	adds	r2, #8
    13c8:	4798      	blx	r3
    13ca:	e0b1      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    13cc:	23f8      	movs	r3, #248	; 0xf8
    13ce:	33ff      	adds	r3, #255	; 0xff
    13d0:	001a      	movs	r2, r3
    13d2:	4947      	ldr	r1, [pc, #284]	; (14f0 <hif_isr+0x390>)
    13d4:	4b47      	ldr	r3, [pc, #284]	; (14f4 <hif_isr+0x394>)
    13d6:	0018      	movs	r0, r3
    13d8:	4b47      	ldr	r3, [pc, #284]	; (14f8 <hif_isr+0x398>)
    13da:	4798      	blx	r3
    13dc:	4b4f      	ldr	r3, [pc, #316]	; (151c <hif_isr+0x3bc>)
    13de:	0018      	movs	r0, r3
    13e0:	4b47      	ldr	r3, [pc, #284]	; (1500 <hif_isr+0x3a0>)
    13e2:	4798      	blx	r3
    13e4:	200d      	movs	r0, #13
    13e6:	4b47      	ldr	r3, [pc, #284]	; (1504 <hif_isr+0x3a4>)
    13e8:	4798      	blx	r3
    13ea:	e0a1      	b.n	1530 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    13ec:	1d3b      	adds	r3, r7, #4
    13ee:	781b      	ldrb	r3, [r3, #0]
    13f0:	b2db      	uxtb	r3, r3
    13f2:	2b06      	cmp	r3, #6
    13f4:	d120      	bne.n	1438 <hif_isr+0x2d8>
				{
					if(gstrHifCxt.pfCryptoCb)
    13f6:	4b3c      	ldr	r3, [pc, #240]	; (14e8 <hif_isr+0x388>)
    13f8:	6a1b      	ldr	r3, [r3, #32]
    13fa:	2b00      	cmp	r3, #0
    13fc:	d00d      	beq.n	141a <hif_isr+0x2ba>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13fe:	4b3a      	ldr	r3, [pc, #232]	; (14e8 <hif_isr+0x388>)
    1400:	6a1b      	ldr	r3, [r3, #32]
    1402:	1d3a      	adds	r2, r7, #4
    1404:	7852      	ldrb	r2, [r2, #1]
    1406:	b2d0      	uxtb	r0, r2
    1408:	1d3a      	adds	r2, r7, #4
    140a:	8852      	ldrh	r2, [r2, #2]
    140c:	b292      	uxth	r2, r2
    140e:	3a08      	subs	r2, #8
    1410:	b291      	uxth	r1, r2
    1412:	683a      	ldr	r2, [r7, #0]
    1414:	3208      	adds	r2, #8
    1416:	4798      	blx	r3
    1418:	e08a      	b.n	1530 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    141a:	2380      	movs	r3, #128	; 0x80
    141c:	009a      	lsls	r2, r3, #2
    141e:	4934      	ldr	r1, [pc, #208]	; (14f0 <hif_isr+0x390>)
    1420:	4b34      	ldr	r3, [pc, #208]	; (14f4 <hif_isr+0x394>)
    1422:	0018      	movs	r0, r3
    1424:	4b34      	ldr	r3, [pc, #208]	; (14f8 <hif_isr+0x398>)
    1426:	4798      	blx	r3
    1428:	4b3d      	ldr	r3, [pc, #244]	; (1520 <hif_isr+0x3c0>)
    142a:	0018      	movs	r0, r3
    142c:	4b34      	ldr	r3, [pc, #208]	; (1500 <hif_isr+0x3a0>)
    142e:	4798      	blx	r3
    1430:	200d      	movs	r0, #13
    1432:	4b34      	ldr	r3, [pc, #208]	; (1504 <hif_isr+0x3a4>)
    1434:	4798      	blx	r3
    1436:	e07b      	b.n	1530 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1438:	1d3b      	adds	r3, r7, #4
    143a:	781b      	ldrb	r3, [r3, #0]
    143c:	b2db      	uxtb	r3, r3
    143e:	2b07      	cmp	r3, #7
    1440:	d11f      	bne.n	1482 <hif_isr+0x322>
				{
					if(gstrHifCxt.pfSigmaCb)
    1442:	4b29      	ldr	r3, [pc, #164]	; (14e8 <hif_isr+0x388>)
    1444:	699b      	ldr	r3, [r3, #24]
    1446:	2b00      	cmp	r3, #0
    1448:	d00d      	beq.n	1466 <hif_isr+0x306>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    144a:	4b27      	ldr	r3, [pc, #156]	; (14e8 <hif_isr+0x388>)
    144c:	699b      	ldr	r3, [r3, #24]
    144e:	1d3a      	adds	r2, r7, #4
    1450:	7852      	ldrb	r2, [r2, #1]
    1452:	b2d0      	uxtb	r0, r2
    1454:	1d3a      	adds	r2, r7, #4
    1456:	8852      	ldrh	r2, [r2, #2]
    1458:	b292      	uxth	r2, r2
    145a:	3a08      	subs	r2, #8
    145c:	b291      	uxth	r1, r2
    145e:	683a      	ldr	r2, [r7, #0]
    1460:	3208      	adds	r2, #8
    1462:	4798      	blx	r3
    1464:	e064      	b.n	1530 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    1466:	4a2f      	ldr	r2, [pc, #188]	; (1524 <hif_isr+0x3c4>)
    1468:	4921      	ldr	r1, [pc, #132]	; (14f0 <hif_isr+0x390>)
    146a:	4b22      	ldr	r3, [pc, #136]	; (14f4 <hif_isr+0x394>)
    146c:	0018      	movs	r0, r3
    146e:	4b22      	ldr	r3, [pc, #136]	; (14f8 <hif_isr+0x398>)
    1470:	4798      	blx	r3
    1472:	4b2d      	ldr	r3, [pc, #180]	; (1528 <hif_isr+0x3c8>)
    1474:	0018      	movs	r0, r3
    1476:	4b22      	ldr	r3, [pc, #136]	; (1500 <hif_isr+0x3a0>)
    1478:	4798      	blx	r3
    147a:	200d      	movs	r0, #13
    147c:	4b21      	ldr	r3, [pc, #132]	; (1504 <hif_isr+0x3a4>)
    147e:	4798      	blx	r3
    1480:	e056      	b.n	1530 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1482:	1d3b      	adds	r3, r7, #4
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	b2db      	uxtb	r3, r3
    1488:	2b05      	cmp	r3, #5
    148a:	d111      	bne.n	14b0 <hif_isr+0x350>
				{
				    if(gstrHifCxt.pfSslCb)
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <hif_isr+0x388>)
    148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1490:	2b00      	cmp	r3, #0
    1492:	d04d      	beq.n	1530 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1494:	4b14      	ldr	r3, [pc, #80]	; (14e8 <hif_isr+0x388>)
    1496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1498:	1d3a      	adds	r2, r7, #4
    149a:	7852      	ldrb	r2, [r2, #1]
    149c:	b2d0      	uxtb	r0, r2
    149e:	1d3a      	adds	r2, r7, #4
    14a0:	8852      	ldrh	r2, [r2, #2]
    14a2:	b292      	uxth	r2, r2
    14a4:	3a08      	subs	r2, #8
    14a6:	b291      	uxth	r1, r2
    14a8:	683a      	ldr	r2, [r7, #0]
    14aa:	3208      	adds	r2, #8
    14ac:	4798      	blx	r3
    14ae:	e03f      	b.n	1530 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    14b0:	2384      	movs	r3, #132	; 0x84
    14b2:	009a      	lsls	r2, r3, #2
    14b4:	490e      	ldr	r1, [pc, #56]	; (14f0 <hif_isr+0x390>)
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <hif_isr+0x394>)
    14b8:	0018      	movs	r0, r3
    14ba:	4b0f      	ldr	r3, [pc, #60]	; (14f8 <hif_isr+0x398>)
    14bc:	4798      	blx	r3
    14be:	4b1b      	ldr	r3, [pc, #108]	; (152c <hif_isr+0x3cc>)
    14c0:	0018      	movs	r0, r3
    14c2:	4b0f      	ldr	r3, [pc, #60]	; (1500 <hif_isr+0x3a0>)
    14c4:	4798      	blx	r3
    14c6:	200d      	movs	r0, #13
    14c8:	4b0e      	ldr	r3, [pc, #56]	; (1504 <hif_isr+0x3a4>)
    14ca:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    14cc:	230f      	movs	r3, #15
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	22fa      	movs	r2, #250	; 0xfa
    14d2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    14d4:	e082      	b.n	15dc <hif_isr+0x47c>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001070 	.word	0x00001070
    14dc:	00003095 	.word	0x00003095
    14e0:	000003d1 	.word	0x000003d1
    14e4:	000030b9 	.word	0x000030b9
    14e8:	20001994 	.word	0x20001994
    14ec:	00001084 	.word	0x00001084
    14f0:	0001d3e4 	.word	0x0001d3e4
    14f4:	0001d0e0 	.word	0x0001d0e0
    14f8:	0001bc4d 	.word	0x0001bc4d
    14fc:	0001d110 	.word	0x0001d110
    1500:	0001bd69 	.word	0x0001bd69
    1504:	0001bc81 	.word	0x0001bc81
    1508:	00003109 	.word	0x00003109
    150c:	0001d134 	.word	0x0001d134
    1510:	0001d14c 	.word	0x0001d14c
    1514:	0001d18c 	.word	0x0001d18c
    1518:	0001d1ac 	.word	0x0001d1ac
    151c:	0001d1d0 	.word	0x0001d1d0
    1520:	0001d1f0 	.word	0x0001d1f0
    1524:	00000207 	.word	0x00000207
    1528:	0001d214 	.word	0x0001d214
    152c:	0001d238 	.word	0x0001d238
				}
				if(gstrHifCxt.u8HifRXDone)
    1530:	4b2e      	ldr	r3, [pc, #184]	; (15ec <hif_isr+0x48c>)
    1532:	789b      	ldrb	r3, [r3, #2]
    1534:	b2db      	uxtb	r3, r3
    1536:	2b00      	cmp	r3, #0
    1538:	d050      	beq.n	15dc <hif_isr+0x47c>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    153a:	4a2d      	ldr	r2, [pc, #180]	; (15f0 <hif_isr+0x490>)
    153c:	492d      	ldr	r1, [pc, #180]	; (15f4 <hif_isr+0x494>)
    153e:	4b2e      	ldr	r3, [pc, #184]	; (15f8 <hif_isr+0x498>)
    1540:	0018      	movs	r0, r3
    1542:	4b2e      	ldr	r3, [pc, #184]	; (15fc <hif_isr+0x49c>)
    1544:	4798      	blx	r3
    1546:	1d3b      	adds	r3, r7, #4
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	b2db      	uxtb	r3, r3
    154c:	0019      	movs	r1, r3
    154e:	1d3b      	adds	r3, r7, #4
    1550:	785b      	ldrb	r3, [r3, #1]
    1552:	b2db      	uxtb	r3, r3
    1554:	001a      	movs	r2, r3
    1556:	4b2a      	ldr	r3, [pc, #168]	; (1600 <hif_isr+0x4a0>)
    1558:	0018      	movs	r0, r3
    155a:	4b28      	ldr	r3, [pc, #160]	; (15fc <hif_isr+0x49c>)
    155c:	4798      	blx	r3
    155e:	200d      	movs	r0, #13
    1560:	4b28      	ldr	r3, [pc, #160]	; (1604 <hif_isr+0x4a4>)
    1562:	4798      	blx	r3
					ret = hif_set_rx_done();
    1564:	230f      	movs	r3, #15
    1566:	18fc      	adds	r4, r7, r3
    1568:	4b27      	ldr	r3, [pc, #156]	; (1608 <hif_isr+0x4a8>)
    156a:	4798      	blx	r3
    156c:	0003      	movs	r3, r0
    156e:	7023      	strb	r3, [r4, #0]
    1570:	e034      	b.n	15dc <hif_isr+0x47c>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    1572:	4a26      	ldr	r2, [pc, #152]	; (160c <hif_isr+0x4ac>)
    1574:	491f      	ldr	r1, [pc, #124]	; (15f4 <hif_isr+0x494>)
    1576:	4b20      	ldr	r3, [pc, #128]	; (15f8 <hif_isr+0x498>)
    1578:	0018      	movs	r0, r3
    157a:	4b20      	ldr	r3, [pc, #128]	; (15fc <hif_isr+0x49c>)
    157c:	4798      	blx	r3
    157e:	4b24      	ldr	r3, [pc, #144]	; (1610 <hif_isr+0x4b0>)
    1580:	0018      	movs	r0, r3
    1582:	4b24      	ldr	r3, [pc, #144]	; (1614 <hif_isr+0x4b4>)
    1584:	4798      	blx	r3
    1586:	200d      	movs	r0, #13
    1588:	4b1e      	ldr	r3, [pc, #120]	; (1604 <hif_isr+0x4a4>)
    158a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    158c:	230f      	movs	r3, #15
    158e:	18fb      	adds	r3, r7, r3
    1590:	22fe      	movs	r2, #254	; 0xfe
    1592:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1594:	e022      	b.n	15dc <hif_isr+0x47c>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1596:	4a20      	ldr	r2, [pc, #128]	; (1618 <hif_isr+0x4b8>)
    1598:	4916      	ldr	r1, [pc, #88]	; (15f4 <hif_isr+0x494>)
    159a:	4b17      	ldr	r3, [pc, #92]	; (15f8 <hif_isr+0x498>)
    159c:	0018      	movs	r0, r3
    159e:	4b17      	ldr	r3, [pc, #92]	; (15fc <hif_isr+0x49c>)
    15a0:	4798      	blx	r3
    15a2:	68ba      	ldr	r2, [r7, #8]
    15a4:	4b1d      	ldr	r3, [pc, #116]	; (161c <hif_isr+0x4bc>)
    15a6:	0011      	movs	r1, r2
    15a8:	0018      	movs	r0, r3
    15aa:	4b14      	ldr	r3, [pc, #80]	; (15fc <hif_isr+0x49c>)
    15ac:	4798      	blx	r3
    15ae:	200d      	movs	r0, #13
    15b0:	4b14      	ldr	r3, [pc, #80]	; (1604 <hif_isr+0x4a4>)
    15b2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    15b4:	230f      	movs	r3, #15
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	22f4      	movs	r2, #244	; 0xf4
    15ba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    15bc:	e00e      	b.n	15dc <hif_isr+0x47c>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    15be:	4a18      	ldr	r2, [pc, #96]	; (1620 <hif_isr+0x4c0>)
    15c0:	490c      	ldr	r1, [pc, #48]	; (15f4 <hif_isr+0x494>)
    15c2:	4b0d      	ldr	r3, [pc, #52]	; (15f8 <hif_isr+0x498>)
    15c4:	0018      	movs	r0, r3
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <hif_isr+0x49c>)
    15c8:	4798      	blx	r3
    15ca:	4b16      	ldr	r3, [pc, #88]	; (1624 <hif_isr+0x4c4>)
    15cc:	0018      	movs	r0, r3
    15ce:	4b11      	ldr	r3, [pc, #68]	; (1614 <hif_isr+0x4b4>)
    15d0:	4798      	blx	r3
    15d2:	200d      	movs	r0, #13
    15d4:	4b0b      	ldr	r3, [pc, #44]	; (1604 <hif_isr+0x4a4>)
    15d6:	4798      	blx	r3
		goto ERR1;
    15d8:	e000      	b.n	15dc <hif_isr+0x47c>
			if(ret != M2M_SUCCESS)goto ERR1;
    15da:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    15dc:	230f      	movs	r3, #15
    15de:	18fb      	adds	r3, r7, r3
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	b25b      	sxtb	r3, r3
}
    15e4:	0018      	movs	r0, r3
    15e6:	46bd      	mov	sp, r7
    15e8:	b005      	add	sp, #20
    15ea:	bd90      	pop	{r4, r7, pc}
    15ec:	20001994 	.word	0x20001994
    15f0:	00000216 	.word	0x00000216
    15f4:	0001d3e4 	.word	0x0001d3e4
    15f8:	0001d0e0 	.word	0x0001d0e0
    15fc:	0001bc4d 	.word	0x0001bc4d
    1600:	0001d250 	.word	0x0001d250
    1604:	0001bc81 	.word	0x0001bc81
    1608:	00000bf9 	.word	0x00000bf9
    160c:	0000021d 	.word	0x0000021d
    1610:	0001d27c 	.word	0x0001d27c
    1614:	0001bd69 	.word	0x0001bd69
    1618:	00000225 	.word	0x00000225
    161c:	0001d290 	.word	0x0001d290
    1620:	0000022e 	.word	0x0000022e
    1624:	0001d2ac 	.word	0x0001d2ac

00001628 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1628:	b590      	push	{r4, r7, lr}
    162a:	b083      	sub	sp, #12
    162c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    162e:	1dfb      	adds	r3, r7, #7
    1630:	2200      	movs	r2, #0
    1632:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    1634:	e023      	b.n	167e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1636:	4b18      	ldr	r3, [pc, #96]	; (1698 <hif_handle_isr+0x70>)
    1638:	78db      	ldrb	r3, [r3, #3]
    163a:	b2db      	uxtb	r3, r3
    163c:	3b01      	subs	r3, #1
    163e:	b2da      	uxtb	r2, r3
    1640:	4b15      	ldr	r3, [pc, #84]	; (1698 <hif_handle_isr+0x70>)
    1642:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    1644:	1dfc      	adds	r4, r7, #7
    1646:	4b15      	ldr	r3, [pc, #84]	; (169c <hif_handle_isr+0x74>)
    1648:	4798      	blx	r3
    164a:	0003      	movs	r3, r0
    164c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    164e:	1dfb      	adds	r3, r7, #7
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	b25b      	sxtb	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	d100      	bne.n	165a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1658:	e011      	b.n	167e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    165a:	4a11      	ldr	r2, [pc, #68]	; (16a0 <hif_handle_isr+0x78>)
    165c:	4911      	ldr	r1, [pc, #68]	; (16a4 <hif_handle_isr+0x7c>)
    165e:	4b12      	ldr	r3, [pc, #72]	; (16a8 <hif_handle_isr+0x80>)
    1660:	0018      	movs	r0, r3
    1662:	4b12      	ldr	r3, [pc, #72]	; (16ac <hif_handle_isr+0x84>)
    1664:	4798      	blx	r3
    1666:	1dfb      	adds	r3, r7, #7
    1668:	2200      	movs	r2, #0
    166a:	569a      	ldrsb	r2, [r3, r2]
    166c:	4b10      	ldr	r3, [pc, #64]	; (16b0 <hif_handle_isr+0x88>)
    166e:	0011      	movs	r1, r2
    1670:	0018      	movs	r0, r3
    1672:	4b0e      	ldr	r3, [pc, #56]	; (16ac <hif_handle_isr+0x84>)
    1674:	4798      	blx	r3
    1676:	200d      	movs	r0, #13
    1678:	4b0e      	ldr	r3, [pc, #56]	; (16b4 <hif_handle_isr+0x8c>)
    167a:	4798      	blx	r3
			ret = hif_isr();
    167c:	e7e2      	b.n	1644 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    167e:	4b06      	ldr	r3, [pc, #24]	; (1698 <hif_handle_isr+0x70>)
    1680:	78db      	ldrb	r3, [r3, #3]
    1682:	b2db      	uxtb	r3, r3
    1684:	2b00      	cmp	r3, #0
    1686:	d1d6      	bne.n	1636 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1688:	1dfb      	adds	r3, r7, #7
    168a:	781b      	ldrb	r3, [r3, #0]
    168c:	b25b      	sxtb	r3, r3
}
    168e:	0018      	movs	r0, r3
    1690:	46bd      	mov	sp, r7
    1692:	b003      	add	sp, #12
    1694:	bd90      	pop	{r4, r7, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	20001994 	.word	0x20001994
    169c:	00001161 	.word	0x00001161
    16a0:	0000024b 	.word	0x0000024b
    16a4:	0001d3ec 	.word	0x0001d3ec
    16a8:	0001d0e0 	.word	0x0001d0e0
    16ac:	0001bc4d 	.word	0x0001bc4d
    16b0:	0001d2d0 	.word	0x0001d2d0
    16b4:	0001bc81 	.word	0x0001bc81

000016b8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    16b8:	b590      	push	{r4, r7, lr}
    16ba:	b087      	sub	sp, #28
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	0019      	movs	r1, r3
    16c4:	1dbb      	adds	r3, r7, #6
    16c6:	801a      	strh	r2, [r3, #0]
    16c8:	1d7b      	adds	r3, r7, #5
    16ca:	1c0a      	adds	r2, r1, #0
    16cc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    16ce:	2317      	movs	r3, #23
    16d0:	18fb      	adds	r3, r7, r3
    16d2:	2200      	movs	r2, #0
    16d4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    16d6:	68fb      	ldr	r3, [r7, #12]
    16d8:	2b00      	cmp	r3, #0
    16da:	d006      	beq.n	16ea <hif_receive+0x32>
    16dc:	68bb      	ldr	r3, [r7, #8]
    16de:	2b00      	cmp	r3, #0
    16e0:	d003      	beq.n	16ea <hif_receive+0x32>
    16e2:	1dbb      	adds	r3, r7, #6
    16e4:	881b      	ldrh	r3, [r3, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d11d      	bne.n	1726 <hif_receive+0x6e>
	{
		if(isDone)
    16ea:	1d7b      	adds	r3, r7, #5
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d006      	beq.n	1700 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    16f2:	2317      	movs	r3, #23
    16f4:	18fc      	adds	r4, r7, r3
    16f6:	4b43      	ldr	r3, [pc, #268]	; (1804 <hif_receive+0x14c>)
    16f8:	4798      	blx	r3
    16fa:	0003      	movs	r3, r0
    16fc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    16fe:	e079      	b.n	17f4 <hif_receive+0x13c>
			ret = M2M_ERR_FAIL;
    1700:	2317      	movs	r3, #23
    1702:	18fb      	adds	r3, r7, r3
    1704:	22f4      	movs	r2, #244	; 0xf4
    1706:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1708:	239b      	movs	r3, #155	; 0x9b
    170a:	009a      	lsls	r2, r3, #2
    170c:	493e      	ldr	r1, [pc, #248]	; (1808 <hif_receive+0x150>)
    170e:	4b3f      	ldr	r3, [pc, #252]	; (180c <hif_receive+0x154>)
    1710:	0018      	movs	r0, r3
    1712:	4b3f      	ldr	r3, [pc, #252]	; (1810 <hif_receive+0x158>)
    1714:	4798      	blx	r3
    1716:	4b3f      	ldr	r3, [pc, #252]	; (1814 <hif_receive+0x15c>)
    1718:	0018      	movs	r0, r3
    171a:	4b3f      	ldr	r3, [pc, #252]	; (1818 <hif_receive+0x160>)
    171c:	4798      	blx	r3
    171e:	200d      	movs	r0, #13
    1720:	4b3e      	ldr	r3, [pc, #248]	; (181c <hif_receive+0x164>)
    1722:	4798      	blx	r3
		goto ERR1;
    1724:	e066      	b.n	17f4 <hif_receive+0x13c>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    1726:	1dbb      	adds	r3, r7, #6
    1728:	881a      	ldrh	r2, [r3, #0]
    172a:	4b3d      	ldr	r3, [pc, #244]	; (1820 <hif_receive+0x168>)
    172c:	689b      	ldr	r3, [r3, #8]
    172e:	429a      	cmp	r2, r3
    1730:	d916      	bls.n	1760 <hif_receive+0xa8>
	{
		ret = M2M_ERR_FAIL;
    1732:	2317      	movs	r3, #23
    1734:	18fb      	adds	r3, r7, r3
    1736:	22f4      	movs	r2, #244	; 0xf4
    1738:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    173a:	239d      	movs	r3, #157	; 0x9d
    173c:	009a      	lsls	r2, r3, #2
    173e:	4932      	ldr	r1, [pc, #200]	; (1808 <hif_receive+0x150>)
    1740:	4b32      	ldr	r3, [pc, #200]	; (180c <hif_receive+0x154>)
    1742:	0018      	movs	r0, r3
    1744:	4b32      	ldr	r3, [pc, #200]	; (1810 <hif_receive+0x158>)
    1746:	4798      	blx	r3
    1748:	1dbb      	adds	r3, r7, #6
    174a:	8819      	ldrh	r1, [r3, #0]
    174c:	4b34      	ldr	r3, [pc, #208]	; (1820 <hif_receive+0x168>)
    174e:	689a      	ldr	r2, [r3, #8]
    1750:	4b34      	ldr	r3, [pc, #208]	; (1824 <hif_receive+0x16c>)
    1752:	0018      	movs	r0, r3
    1754:	4b2e      	ldr	r3, [pc, #184]	; (1810 <hif_receive+0x158>)
    1756:	4798      	blx	r3
    1758:	200d      	movs	r0, #13
    175a:	4b30      	ldr	r3, [pc, #192]	; (181c <hif_receive+0x164>)
    175c:	4798      	blx	r3
		goto ERR1;
    175e:	e049      	b.n	17f4 <hif_receive+0x13c>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1760:	4b2f      	ldr	r3, [pc, #188]	; (1820 <hif_receive+0x168>)
    1762:	685a      	ldr	r2, [r3, #4]
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	429a      	cmp	r2, r3
    1768:	d80a      	bhi.n	1780 <hif_receive+0xc8>
    176a:	1dbb      	adds	r3, r7, #6
    176c:	881a      	ldrh	r2, [r3, #0]
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	18d2      	adds	r2, r2, r3
    1772:	4b2b      	ldr	r3, [pc, #172]	; (1820 <hif_receive+0x168>)
    1774:	6859      	ldr	r1, [r3, #4]
    1776:	4b2a      	ldr	r3, [pc, #168]	; (1820 <hif_receive+0x168>)
    1778:	689b      	ldr	r3, [r3, #8]
    177a:	18cb      	adds	r3, r1, r3
    177c:	429a      	cmp	r2, r3
    177e:	d911      	bls.n	17a4 <hif_receive+0xec>
	{
		ret = M2M_ERR_FAIL;
    1780:	2317      	movs	r3, #23
    1782:	18fb      	adds	r3, r7, r3
    1784:	22f4      	movs	r2, #244	; 0xf4
    1786:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1788:	4a27      	ldr	r2, [pc, #156]	; (1828 <hif_receive+0x170>)
    178a:	491f      	ldr	r1, [pc, #124]	; (1808 <hif_receive+0x150>)
    178c:	4b1f      	ldr	r3, [pc, #124]	; (180c <hif_receive+0x154>)
    178e:	0018      	movs	r0, r3
    1790:	4b1f      	ldr	r3, [pc, #124]	; (1810 <hif_receive+0x158>)
    1792:	4798      	blx	r3
    1794:	4b25      	ldr	r3, [pc, #148]	; (182c <hif_receive+0x174>)
    1796:	0018      	movs	r0, r3
    1798:	4b1f      	ldr	r3, [pc, #124]	; (1818 <hif_receive+0x160>)
    179a:	4798      	blx	r3
    179c:	200d      	movs	r0, #13
    179e:	4b1f      	ldr	r3, [pc, #124]	; (181c <hif_receive+0x164>)
    17a0:	4798      	blx	r3
		goto ERR1;
    17a2:	e027      	b.n	17f4 <hif_receive+0x13c>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    17a4:	1dbb      	adds	r3, r7, #6
    17a6:	881a      	ldrh	r2, [r3, #0]
    17a8:	2317      	movs	r3, #23
    17aa:	18fc      	adds	r4, r7, r3
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	0018      	movs	r0, r3
    17b2:	4b1f      	ldr	r3, [pc, #124]	; (1830 <hif_receive+0x178>)
    17b4:	4798      	blx	r3
    17b6:	0003      	movs	r3, r0
    17b8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    17ba:	2317      	movs	r3, #23
    17bc:	18fb      	adds	r3, r7, r3
    17be:	781b      	ldrb	r3, [r3, #0]
    17c0:	b25b      	sxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	d115      	bne.n	17f2 <hif_receive+0x13a>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    17c6:	4b16      	ldr	r3, [pc, #88]	; (1820 <hif_receive+0x168>)
    17c8:	685a      	ldr	r2, [r3, #4]
    17ca:	4b15      	ldr	r3, [pc, #84]	; (1820 <hif_receive+0x168>)
    17cc:	689b      	ldr	r3, [r3, #8]
    17ce:	18d2      	adds	r2, r2, r3
    17d0:	1dbb      	adds	r3, r7, #6
    17d2:	8819      	ldrh	r1, [r3, #0]
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	18cb      	adds	r3, r1, r3
    17d8:	429a      	cmp	r2, r3
    17da:	d003      	beq.n	17e4 <hif_receive+0x12c>
    17dc:	1d7b      	adds	r3, r7, #5
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d007      	beq.n	17f4 <hif_receive+0x13c>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    17e4:	2317      	movs	r3, #23
    17e6:	18fc      	adds	r4, r7, r3
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <hif_receive+0x14c>)
    17ea:	4798      	blx	r3
    17ec:	0003      	movs	r3, r0
    17ee:	7023      	strb	r3, [r4, #0]
    17f0:	e000      	b.n	17f4 <hif_receive+0x13c>
	if(ret != M2M_SUCCESS)goto ERR1;
    17f2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    17f4:	2317      	movs	r3, #23
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	b25b      	sxtb	r3, r3
}
    17fc:	0018      	movs	r0, r3
    17fe:	46bd      	mov	sp, r7
    1800:	b007      	add	sp, #28
    1802:	bd90      	pop	{r4, r7, pc}
    1804:	00000bf9 	.word	0x00000bf9
    1808:	0001d3fc 	.word	0x0001d3fc
    180c:	0001d0e0 	.word	0x0001d0e0
    1810:	0001bc4d 	.word	0x0001bc4d
    1814:	0001d300 	.word	0x0001d300
    1818:	0001bd69 	.word	0x0001bd69
    181c:	0001bc81 	.word	0x0001bc81
    1820:	20001994 	.word	0x20001994
    1824:	0001d320 	.word	0x0001d320
    1828:	0000027a 	.word	0x0000027a
    182c:	0001d368 	.word	0x0001d368
    1830:	00003109 	.word	0x00003109

00001834 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1834:	b580      	push	{r7, lr}
    1836:	b084      	sub	sp, #16
    1838:	af00      	add	r7, sp, #0
    183a:	0002      	movs	r2, r0
    183c:	6039      	str	r1, [r7, #0]
    183e:	1dfb      	adds	r3, r7, #7
    1840:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1842:	230f      	movs	r3, #15
    1844:	18fb      	adds	r3, r7, r3
    1846:	2200      	movs	r2, #0
    1848:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    184a:	1dfb      	adds	r3, r7, #7
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	2b07      	cmp	r3, #7
    1850:	d820      	bhi.n	1894 <hif_register_cb+0x60>
    1852:	009a      	lsls	r2, r3, #2
    1854:	4b1e      	ldr	r3, [pc, #120]	; (18d0 <hif_register_cb+0x9c>)
    1856:	18d3      	adds	r3, r2, r3
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    185c:	4b1d      	ldr	r3, [pc, #116]	; (18d4 <hif_register_cb+0xa0>)
    185e:	683a      	ldr	r2, [r7, #0]
    1860:	611a      	str	r2, [r3, #16]
			break;
    1862:	e02c      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1864:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <hif_register_cb+0xa0>)
    1866:	683a      	ldr	r2, [r7, #0]
    1868:	60da      	str	r2, [r3, #12]
			break;
    186a:	e028      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    186c:	4b19      	ldr	r3, [pc, #100]	; (18d4 <hif_register_cb+0xa0>)
    186e:	683a      	ldr	r2, [r7, #0]
    1870:	615a      	str	r2, [r3, #20]
			break;
    1872:	e024      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1874:	4b17      	ldr	r3, [pc, #92]	; (18d4 <hif_register_cb+0xa0>)
    1876:	683a      	ldr	r2, [r7, #0]
    1878:	61da      	str	r2, [r3, #28]
			break;
    187a:	e020      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    187c:	4b15      	ldr	r3, [pc, #84]	; (18d4 <hif_register_cb+0xa0>)
    187e:	683a      	ldr	r2, [r7, #0]
    1880:	621a      	str	r2, [r3, #32]
			break;
    1882:	e01c      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1884:	4b13      	ldr	r3, [pc, #76]	; (18d4 <hif_register_cb+0xa0>)
    1886:	683a      	ldr	r2, [r7, #0]
    1888:	619a      	str	r2, [r3, #24]
			break;
    188a:	e018      	b.n	18be <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    188c:	4b11      	ldr	r3, [pc, #68]	; (18d4 <hif_register_cb+0xa0>)
    188e:	683a      	ldr	r2, [r7, #0]
    1890:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1892:	e014      	b.n	18be <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1894:	4a10      	ldr	r2, [pc, #64]	; (18d8 <hif_register_cb+0xa4>)
    1896:	4911      	ldr	r1, [pc, #68]	; (18dc <hif_register_cb+0xa8>)
    1898:	4b11      	ldr	r3, [pc, #68]	; (18e0 <hif_register_cb+0xac>)
    189a:	0018      	movs	r0, r3
    189c:	4b11      	ldr	r3, [pc, #68]	; (18e4 <hif_register_cb+0xb0>)
    189e:	4798      	blx	r3
    18a0:	1dfb      	adds	r3, r7, #7
    18a2:	781a      	ldrb	r2, [r3, #0]
    18a4:	4b10      	ldr	r3, [pc, #64]	; (18e8 <hif_register_cb+0xb4>)
    18a6:	0011      	movs	r1, r2
    18a8:	0018      	movs	r0, r3
    18aa:	4b0e      	ldr	r3, [pc, #56]	; (18e4 <hif_register_cb+0xb0>)
    18ac:	4798      	blx	r3
    18ae:	200d      	movs	r0, #13
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <hif_register_cb+0xb8>)
    18b2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    18b4:	230f      	movs	r3, #15
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	22f4      	movs	r2, #244	; 0xf4
    18ba:	701a      	strb	r2, [r3, #0]
			break;
    18bc:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    18be:	230f      	movs	r3, #15
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	b25b      	sxtb	r3, r3
}
    18c6:	0018      	movs	r0, r3
    18c8:	46bd      	mov	sp, r7
    18ca:	b004      	add	sp, #16
    18cc:	bd80      	pop	{r7, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	0001d3b8 	.word	0x0001d3b8
    18d4:	20001994 	.word	0x20001994
    18d8:	000002b2 	.word	0x000002b2
    18dc:	0001d408 	.word	0x0001d408
    18e0:	0001d0e0 	.word	0x0001d0e0
    18e4:	0001bc4d 	.word	0x0001bc4d
    18e8:	0001d3ac 	.word	0x0001d3ac
    18ec:	0001bc81 	.word	0x0001bc81

000018f0 <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    18f0:	b5b0      	push	{r4, r5, r7, lr}
    18f2:	b0a0      	sub	sp, #128	; 0x80
    18f4:	af00      	add	r7, sp, #0
    18f6:	603a      	str	r2, [r7, #0]
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	1c02      	adds	r2, r0, #0
    18fc:	701a      	strb	r2, [r3, #0]
    18fe:	1d3b      	adds	r3, r7, #4
    1900:	1c0a      	adds	r2, r1, #0
    1902:	801a      	strh	r2, [r3, #0]
	sint8 s8tmp = M2M_SUCCESS;
    1904:	237f      	movs	r3, #127	; 0x7f
    1906:	18fb      	adds	r3, r7, r3
    1908:	2200      	movs	r2, #0
    190a:	701a      	strb	r2, [r3, #0]
	switch(u8OpCode)
    190c:	1dfb      	adds	r3, r7, #7
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2b01      	cmp	r3, #1
    1912:	d002      	beq.n	191a <m2m_ssl_cb+0x2a>
    1914:	2b06      	cmp	r3, #6
    1916:	d022      	beq.n	195e <m2m_ssl_cb+0x6e>
    1918:	e041      	b.n	199e <m2m_ssl_cb+0xae>
	{
		case M2M_SSL_REQ_ECC:
		{
			tstrEccReqInfo strEccREQ;
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
    191a:	237f      	movs	r3, #127	; 0x7f
    191c:	18fc      	adds	r4, r7, r3
    191e:	2308      	movs	r3, #8
    1920:	18f9      	adds	r1, r7, r3
    1922:	6838      	ldr	r0, [r7, #0]
    1924:	2300      	movs	r3, #0
    1926:	2270      	movs	r2, #112	; 0x70
    1928:	4d28      	ldr	r5, [pc, #160]	; (19cc <m2m_ssl_cb+0xdc>)
    192a:	47a8      	blx	r5
    192c:	0003      	movs	r3, r0
    192e:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    1930:	237f      	movs	r3, #127	; 0x7f
    1932:	18fb      	adds	r3, r7, r3
    1934:	781b      	ldrb	r3, [r3, #0]
    1936:	b25b      	sxtb	r3, r3
    1938:	2b00      	cmp	r3, #0
    193a:	d12d      	bne.n	1998 <m2m_ssl_cb+0xa8>
			{
				if (gpfAppSSLCb)
    193c:	4b24      	ldr	r3, [pc, #144]	; (19d0 <m2m_ssl_cb+0xe0>)
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	2b00      	cmp	r3, #0
    1942:	d029      	beq.n	1998 <m2m_ssl_cb+0xa8>
				{
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	3370      	adds	r3, #112	; 0x70
    1948:	001a      	movs	r2, r3
    194a:	4b22      	ldr	r3, [pc, #136]	; (19d4 <m2m_ssl_cb+0xe4>)
    194c:	601a      	str	r2, [r3, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
    194e:	4b20      	ldr	r3, [pc, #128]	; (19d0 <m2m_ssl_cb+0xe0>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	2208      	movs	r2, #8
    1954:	18ba      	adds	r2, r7, r2
    1956:	0011      	movs	r1, r2
    1958:	2001      	movs	r0, #1
    195a:	4798      	blx	r3
				}
			}
		}
		break;
    195c:	e01c      	b.n	1998 <m2m_ssl_cb+0xa8>
		case M2M_SSL_RESP_SET_CS_LIST:
		{
			tstrSslSetActiveCsList strCsList;
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
    195e:	237f      	movs	r3, #127	; 0x7f
    1960:	18fc      	adds	r4, r7, r3
    1962:	2378      	movs	r3, #120	; 0x78
    1964:	18f9      	adds	r1, r7, r3
    1966:	6838      	ldr	r0, [r7, #0]
    1968:	2300      	movs	r3, #0
    196a:	2204      	movs	r2, #4
    196c:	4d17      	ldr	r5, [pc, #92]	; (19cc <m2m_ssl_cb+0xdc>)
    196e:	47a8      	blx	r5
    1970:	0003      	movs	r3, r0
    1972:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    1974:	237f      	movs	r3, #127	; 0x7f
    1976:	18fb      	adds	r3, r7, r3
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	b25b      	sxtb	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d10d      	bne.n	199c <m2m_ssl_cb+0xac>
			{
				if (gpfAppSSLCb)
    1980:	4b13      	ldr	r3, [pc, #76]	; (19d0 <m2m_ssl_cb+0xe0>)
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	2b00      	cmp	r3, #0
    1986:	d009      	beq.n	199c <m2m_ssl_cb+0xac>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
    1988:	4b11      	ldr	r3, [pc, #68]	; (19d0 <m2m_ssl_cb+0xe0>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2278      	movs	r2, #120	; 0x78
    198e:	18ba      	adds	r2, r7, r2
    1990:	0011      	movs	r1, r2
    1992:	2006      	movs	r0, #6
    1994:	4798      	blx	r3
			}
		}
		break;
    1996:	e001      	b.n	199c <m2m_ssl_cb+0xac>
		break;
    1998:	46c0      	nop			; (mov r8, r8)
    199a:	e000      	b.n	199e <m2m_ssl_cb+0xae>
		break;
    199c:	46c0      	nop			; (mov r8, r8)
	}
	if(s8tmp != M2M_SUCCESS)
    199e:	237f      	movs	r3, #127	; 0x7f
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	b25b      	sxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	d00c      	beq.n	19c4 <m2m_ssl_cb+0xd4>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
    19aa:	490b      	ldr	r1, [pc, #44]	; (19d8 <m2m_ssl_cb+0xe8>)
    19ac:	4b0b      	ldr	r3, [pc, #44]	; (19dc <m2m_ssl_cb+0xec>)
    19ae:	226b      	movs	r2, #107	; 0x6b
    19b0:	0018      	movs	r0, r3
    19b2:	4b0b      	ldr	r3, [pc, #44]	; (19e0 <m2m_ssl_cb+0xf0>)
    19b4:	4798      	blx	r3
    19b6:	4b0b      	ldr	r3, [pc, #44]	; (19e4 <m2m_ssl_cb+0xf4>)
    19b8:	0018      	movs	r0, r3
    19ba:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <m2m_ssl_cb+0xf8>)
    19bc:	4798      	blx	r3
    19be:	200d      	movs	r0, #13
    19c0:	4b0a      	ldr	r3, [pc, #40]	; (19ec <m2m_ssl_cb+0xfc>)
    19c2:	4798      	blx	r3
	}
}
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	b020      	add	sp, #128	; 0x80
    19ca:	bdb0      	pop	{r4, r5, r7, pc}
    19cc:	000016b9 	.word	0x000016b9
    19d0:	200006c0 	.word	0x200006c0
    19d4:	200006c4 	.word	0x200006c4
    19d8:	0001d478 	.word	0x0001d478
    19dc:	0001d418 	.word	0x0001d418
    19e0:	0001bc4d 	.word	0x0001bc4d
    19e4:	0001d42c 	.word	0x0001d42c
    19e8:	0001bd69 	.word	0x0001bd69
    19ec:	0001bc81 	.word	0x0001bc81

000019f0 <m2m_ssl_handshake_rsp>:
	@param [in]	u16RspDataSz
				Response data size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_handshake_rsp(tstrEccReqInfo* strECCResp, uint8* pu8RspDataBuff, uint16 u16RspDataSz)
{
    19f0:	b5b0      	push	{r4, r5, r7, lr}
    19f2:	b08a      	sub	sp, #40	; 0x28
    19f4:	af04      	add	r7, sp, #16
    19f6:	60f8      	str	r0, [r7, #12]
    19f8:	60b9      	str	r1, [r7, #8]
    19fa:	1dbb      	adds	r3, r7, #6
    19fc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    19fe:	2317      	movs	r3, #23
    1a00:	18fb      	adds	r3, r7, r3
    1a02:	2200      	movs	r2, #0
    1a04:	701a      	strb	r2, [r3, #0]
	
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, (M2M_SSL_RESP_ECC | M2M_REQ_DATA_PKT), (uint8*)strECCResp, sizeof(tstrEccReqInfo), pu8RspDataBuff, u16RspDataSz, sizeof(tstrEccReqInfo));
    1a06:	2317      	movs	r3, #23
    1a08:	18fc      	adds	r4, r7, r3
    1a0a:	68fa      	ldr	r2, [r7, #12]
    1a0c:	2370      	movs	r3, #112	; 0x70
    1a0e:	9302      	str	r3, [sp, #8]
    1a10:	1dbb      	adds	r3, r7, #6
    1a12:	881b      	ldrh	r3, [r3, #0]
    1a14:	9301      	str	r3, [sp, #4]
    1a16:	68bb      	ldr	r3, [r7, #8]
    1a18:	9300      	str	r3, [sp, #0]
    1a1a:	2370      	movs	r3, #112	; 0x70
    1a1c:	2182      	movs	r1, #130	; 0x82
    1a1e:	2005      	movs	r0, #5
    1a20:	4d05      	ldr	r5, [pc, #20]	; (1a38 <m2m_ssl_handshake_rsp+0x48>)
    1a22:	47a8      	blx	r5
    1a24:	0003      	movs	r3, r0
    1a26:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    1a28:	2317      	movs	r3, #23
    1a2a:	18fb      	adds	r3, r7, r3
    1a2c:	781b      	ldrb	r3, [r3, #0]
    1a2e:	b25b      	sxtb	r3, r3
}
    1a30:	0018      	movs	r0, r3
    1a32:	46bd      	mov	sp, r7
    1a34:	b006      	add	sp, #24
    1a36:	bdb0      	pop	{r4, r5, r7, pc}
    1a38:	00000dc1 	.word	0x00000dc1

00001a3c <m2m_ssl_retrieve_cert>:
	@param [in]	pu8Key
				Pointer to the certificate Key.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_cert(uint16* pu16CurveType, uint8* pu8Hash, uint8* pu8Sig, tstrECPoint* pu8Key)
{
    1a3c:	b590      	push	{r4, r7, lr}
    1a3e:	b087      	sub	sp, #28
    1a40:	af00      	add	r7, sp, #0
    1a42:	60f8      	str	r0, [r7, #12]
    1a44:	60b9      	str	r1, [r7, #8]
    1a46:	607a      	str	r2, [r7, #4]
    1a48:	603b      	str	r3, [r7, #0]
	uint8	bSetRxDone	= 1;
    1a4a:	2317      	movs	r3, #23
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	2201      	movs	r2, #1
    1a50:	701a      	strb	r2, [r3, #0]
	uint16	u16HashSz, u16SigSz, u16KeySz;
	sint8	s8Ret = M2M_SUCCESS;
    1a52:	2316      	movs	r3, #22
    1a54:	18fb      	adds	r3, r7, r3
    1a56:	2200      	movs	r2, #0
    1a58:	701a      	strb	r2, [r3, #0]

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
    1a5a:	4b77      	ldr	r3, [pc, #476]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d102      	bne.n	1a68 <m2m_ssl_retrieve_cert+0x2c>
    1a62:	230c      	movs	r3, #12
    1a64:	425b      	negs	r3, r3
    1a66:	e0e3      	b.n	1c30 <m2m_ssl_retrieve_cert+0x1f4>
	
	if(hif_receive(gu32HIFAddr, (uint8*)pu16CurveType, 2, 0) != M2M_SUCCESS) goto __ERR;
    1a68:	4b73      	ldr	r3, [pc, #460]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a6a:	6818      	ldr	r0, [r3, #0]
    1a6c:	68f9      	ldr	r1, [r7, #12]
    1a6e:	2300      	movs	r3, #0
    1a70:	2202      	movs	r2, #2
    1a72:	4c72      	ldr	r4, [pc, #456]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1a74:	47a0      	blx	r4
    1a76:	1e03      	subs	r3, r0, #0
    1a78:	d000      	beq.n	1a7c <m2m_ssl_retrieve_cert+0x40>
    1a7a:	e0b9      	b.n	1bf0 <m2m_ssl_retrieve_cert+0x1b4>
	gu32HIFAddr += 2;
    1a7c:	4b6e      	ldr	r3, [pc, #440]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	1c9a      	adds	r2, r3, #2
    1a82:	4b6d      	ldr	r3, [pc, #436]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a84:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16KeySz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1a86:	4b6c      	ldr	r3, [pc, #432]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a88:	6818      	ldr	r0, [r3, #0]
    1a8a:	2310      	movs	r3, #16
    1a8c:	18f9      	adds	r1, r7, r3
    1a8e:	2300      	movs	r3, #0
    1a90:	2202      	movs	r2, #2
    1a92:	4c6a      	ldr	r4, [pc, #424]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1a94:	47a0      	blx	r4
    1a96:	1e03      	subs	r3, r0, #0
    1a98:	d000      	beq.n	1a9c <m2m_ssl_retrieve_cert+0x60>
    1a9a:	e0ab      	b.n	1bf4 <m2m_ssl_retrieve_cert+0x1b8>
	gu32HIFAddr += 2;
    1a9c:	4b66      	ldr	r3, [pc, #408]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	1c9a      	adds	r2, r3, #2
    1aa2:	4b65      	ldr	r3, [pc, #404]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1aa4:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16HashSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1aa6:	4b64      	ldr	r3, [pc, #400]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1aa8:	6818      	ldr	r0, [r3, #0]
    1aaa:	2314      	movs	r3, #20
    1aac:	18f9      	adds	r1, r7, r3
    1aae:	2300      	movs	r3, #0
    1ab0:	2202      	movs	r2, #2
    1ab2:	4c62      	ldr	r4, [pc, #392]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ab4:	47a0      	blx	r4
    1ab6:	1e03      	subs	r3, r0, #0
    1ab8:	d000      	beq.n	1abc <m2m_ssl_retrieve_cert+0x80>
    1aba:	e09d      	b.n	1bf8 <m2m_ssl_retrieve_cert+0x1bc>
	gu32HIFAddr += 2;
    1abc:	4b5e      	ldr	r3, [pc, #376]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	1c9a      	adds	r2, r3, #2
    1ac2:	4b5d      	ldr	r3, [pc, #372]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ac4:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, (uint8*)&u16SigSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1ac6:	4b5c      	ldr	r3, [pc, #368]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ac8:	6818      	ldr	r0, [r3, #0]
    1aca:	2312      	movs	r3, #18
    1acc:	18f9      	adds	r1, r7, r3
    1ace:	2300      	movs	r3, #0
    1ad0:	2202      	movs	r2, #2
    1ad2:	4c5a      	ldr	r4, [pc, #360]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ad4:	47a0      	blx	r4
    1ad6:	1e03      	subs	r3, r0, #0
    1ad8:	d000      	beq.n	1adc <m2m_ssl_retrieve_cert+0xa0>
    1ada:	e08f      	b.n	1bfc <m2m_ssl_retrieve_cert+0x1c0>
	gu32HIFAddr += 2;
    1adc:	4b56      	ldr	r3, [pc, #344]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	1c9a      	adds	r2, r3, #2
    1ae2:	4b55      	ldr	r3, [pc, #340]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1ae4:	601a      	str	r2, [r3, #0]

	(*pu16CurveType)= _htons((*pu16CurveType));
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	881b      	ldrh	r3, [r3, #0]
    1aea:	021b      	lsls	r3, r3, #8
    1aec:	b21a      	sxth	r2, r3
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	881b      	ldrh	r3, [r3, #0]
    1af2:	0a1b      	lsrs	r3, r3, #8
    1af4:	b29b      	uxth	r3, r3
    1af6:	b21b      	sxth	r3, r3
    1af8:	4313      	orrs	r3, r2
    1afa:	b21b      	sxth	r3, r3
    1afc:	b29a      	uxth	r2, r3
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	801a      	strh	r2, [r3, #0]
	pu8Key->u16Size	= _htons(u16KeySz);
    1b02:	2310      	movs	r3, #16
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	881b      	ldrh	r3, [r3, #0]
    1b08:	021b      	lsls	r3, r3, #8
    1b0a:	b21a      	sxth	r2, r3
    1b0c:	2310      	movs	r3, #16
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	881b      	ldrh	r3, [r3, #0]
    1b12:	0a1b      	lsrs	r3, r3, #8
    1b14:	b29b      	uxth	r3, r3
    1b16:	b21b      	sxth	r3, r3
    1b18:	4313      	orrs	r3, r2
    1b1a:	b21b      	sxth	r3, r3
    1b1c:	b299      	uxth	r1, r3
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	2240      	movs	r2, #64	; 0x40
    1b22:	5299      	strh	r1, [r3, r2]
	u16HashSz		= _htons(u16HashSz);
    1b24:	2314      	movs	r3, #20
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	881b      	ldrh	r3, [r3, #0]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	b21a      	sxth	r2, r3
    1b2e:	2314      	movs	r3, #20
    1b30:	18fb      	adds	r3, r7, r3
    1b32:	881b      	ldrh	r3, [r3, #0]
    1b34:	0a1b      	lsrs	r3, r3, #8
    1b36:	b29b      	uxth	r3, r3
    1b38:	b21b      	sxth	r3, r3
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b21b      	sxth	r3, r3
    1b3e:	b29a      	uxth	r2, r3
    1b40:	2314      	movs	r3, #20
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	801a      	strh	r2, [r3, #0]
	u16SigSz		= _htons(u16SigSz);
    1b46:	2312      	movs	r3, #18
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	021b      	lsls	r3, r3, #8
    1b4e:	b21a      	sxth	r2, r3
    1b50:	2312      	movs	r3, #18
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	881b      	ldrh	r3, [r3, #0]
    1b56:	0a1b      	lsrs	r3, r3, #8
    1b58:	b29b      	uxth	r3, r3
    1b5a:	b21b      	sxth	r3, r3
    1b5c:	4313      	orrs	r3, r2
    1b5e:	b21b      	sxth	r3, r3
    1b60:	b29a      	uxth	r2, r3
    1b62:	2312      	movs	r3, #18
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	801a      	strh	r2, [r3, #0]
	
	if(hif_receive(gu32HIFAddr, pu8Key->X, pu8Key->u16Size * 2, 0) != M2M_SUCCESS) goto __ERR;
    1b68:	4b33      	ldr	r3, [pc, #204]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b6a:	6818      	ldr	r0, [r3, #0]
    1b6c:	6839      	ldr	r1, [r7, #0]
    1b6e:	683b      	ldr	r3, [r7, #0]
    1b70:	2240      	movs	r2, #64	; 0x40
    1b72:	5a9b      	ldrh	r3, [r3, r2]
    1b74:	18db      	adds	r3, r3, r3
    1b76:	b29a      	uxth	r2, r3
    1b78:	2300      	movs	r3, #0
    1b7a:	4c30      	ldr	r4, [pc, #192]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1b7c:	47a0      	blx	r4
    1b7e:	1e03      	subs	r3, r0, #0
    1b80:	d13e      	bne.n	1c00 <m2m_ssl_retrieve_cert+0x1c4>
	gu32HIFAddr += (pu8Key->u16Size * 2);
    1b82:	683b      	ldr	r3, [r7, #0]
    1b84:	2240      	movs	r2, #64	; 0x40
    1b86:	5a9b      	ldrh	r3, [r3, r2]
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	001a      	movs	r2, r3
    1b8c:	4b2a      	ldr	r3, [pc, #168]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	18d2      	adds	r2, r2, r3
    1b92:	4b29      	ldr	r3, [pc, #164]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b94:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1b96:	4b28      	ldr	r3, [pc, #160]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1b98:	6818      	ldr	r0, [r3, #0]
    1b9a:	2314      	movs	r3, #20
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	881a      	ldrh	r2, [r3, #0]
    1ba0:	68b9      	ldr	r1, [r7, #8]
    1ba2:	2300      	movs	r3, #0
    1ba4:	4c25      	ldr	r4, [pc, #148]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1ba6:	47a0      	blx	r4
    1ba8:	1e03      	subs	r3, r0, #0
    1baa:	d12b      	bne.n	1c04 <m2m_ssl_retrieve_cert+0x1c8>
	gu32HIFAddr += u16HashSz;
    1bac:	2314      	movs	r3, #20
    1bae:	18fb      	adds	r3, r7, r3
    1bb0:	881b      	ldrh	r3, [r3, #0]
    1bb2:	001a      	movs	r2, r3
    1bb4:	4b20      	ldr	r3, [pc, #128]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	18d2      	adds	r2, r2, r3
    1bba:	4b1f      	ldr	r3, [pc, #124]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bbc:	601a      	str	r2, [r3, #0]

	if(hif_receive(gu32HIFAddr, pu8Sig, u16SigSz, 0) != M2M_SUCCESS) goto __ERR;
    1bbe:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bc0:	6818      	ldr	r0, [r3, #0]
    1bc2:	2312      	movs	r3, #18
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	881a      	ldrh	r2, [r3, #0]
    1bc8:	6879      	ldr	r1, [r7, #4]
    1bca:	2300      	movs	r3, #0
    1bcc:	4c1b      	ldr	r4, [pc, #108]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1bce:	47a0      	blx	r4
    1bd0:	1e03      	subs	r3, r0, #0
    1bd2:	d119      	bne.n	1c08 <m2m_ssl_retrieve_cert+0x1cc>
	gu32HIFAddr += u16SigSz;
    1bd4:	2312      	movs	r3, #18
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	001a      	movs	r2, r3
    1bdc:	4b16      	ldr	r3, [pc, #88]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1bde:	681b      	ldr	r3, [r3, #0]
    1be0:	18d2      	adds	r2, r2, r3
    1be2:	4b15      	ldr	r3, [pc, #84]	; (1c38 <m2m_ssl_retrieve_cert+0x1fc>)
    1be4:	601a      	str	r2, [r3, #0]
	
	bSetRxDone = 0;
    1be6:	2317      	movs	r3, #23
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	2200      	movs	r2, #0
    1bec:	701a      	strb	r2, [r3, #0]
    1bee:	e00c      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)pu16CurveType, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	e00a      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16KeySz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	e008      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16HashSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	e006      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, (uint8*)&u16SigSz, 2, 0) != M2M_SUCCESS) goto __ERR;
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	e004      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Key->X, pu8Key->u16Size * 2, 0) != M2M_SUCCESS) goto __ERR;
    1c00:	46c0      	nop			; (mov r8, r8)
    1c02:	e002      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c04:	46c0      	nop			; (mov r8, r8)
    1c06:	e000      	b.n	1c0a <m2m_ssl_retrieve_cert+0x1ce>
	if(hif_receive(gu32HIFAddr, pu8Sig, u16SigSz, 0) != M2M_SUCCESS) goto __ERR;
    1c08:	46c0      	nop			; (mov r8, r8)

__ERR:
	if(bSetRxDone)
    1c0a:	2317      	movs	r3, #23
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	781b      	ldrb	r3, [r3, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d009      	beq.n	1c28 <m2m_ssl_retrieve_cert+0x1ec>
	{
		s8Ret = M2M_ERR_FAIL;
    1c14:	2316      	movs	r3, #22
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	22f4      	movs	r2, #244	; 0xf4
    1c1a:	701a      	strb	r2, [r3, #0]
		hif_receive(0, NULL, 0, 1);
    1c1c:	2301      	movs	r3, #1
    1c1e:	2200      	movs	r2, #0
    1c20:	2100      	movs	r1, #0
    1c22:	2000      	movs	r0, #0
    1c24:	4c05      	ldr	r4, [pc, #20]	; (1c3c <m2m_ssl_retrieve_cert+0x200>)
    1c26:	47a0      	blx	r4
	}
	return s8Ret;
    1c28:	2316      	movs	r3, #22
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	b25b      	sxtb	r3, r3
}
    1c30:	0018      	movs	r0, r3
    1c32:	46bd      	mov	sp, r7
    1c34:	b007      	add	sp, #28
    1c36:	bd90      	pop	{r4, r7, pc}
    1c38:	200006c4 	.word	0x200006c4
    1c3c:	000016b9 	.word	0x000016b9

00001c40 <m2m_ssl_retrieve_hash>:
	@param [in]	u16HashSz
				Hash size.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_retrieve_hash(uint8* pu8Hash, uint16 u16HashSz)
{
    1c40:	b590      	push	{r4, r7, lr}
    1c42:	b085      	sub	sp, #20
    1c44:	af00      	add	r7, sp, #0
    1c46:	6078      	str	r0, [r7, #4]
    1c48:	000a      	movs	r2, r1
    1c4a:	1cbb      	adds	r3, r7, #2
    1c4c:	801a      	strh	r2, [r3, #0]
	uint8	bSetRxDone	= 1;
    1c4e:	230f      	movs	r3, #15
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	2201      	movs	r2, #1
    1c54:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = M2M_SUCCESS;
    1c56:	230e      	movs	r3, #14
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	2200      	movs	r2, #0
    1c5c:	701a      	strb	r2, [r3, #0]

	if(gu32HIFAddr == 0) return M2M_ERR_FAIL;
    1c5e:	4b17      	ldr	r3, [pc, #92]	; (1cbc <m2m_ssl_retrieve_hash+0x7c>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d102      	bne.n	1c6c <m2m_ssl_retrieve_hash+0x2c>
    1c66:	230c      	movs	r3, #12
    1c68:	425b      	negs	r3, r3
    1c6a:	e022      	b.n	1cb2 <m2m_ssl_retrieve_hash+0x72>

	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c6c:	4b13      	ldr	r3, [pc, #76]	; (1cbc <m2m_ssl_retrieve_hash+0x7c>)
    1c6e:	6818      	ldr	r0, [r3, #0]
    1c70:	1cbb      	adds	r3, r7, #2
    1c72:	881a      	ldrh	r2, [r3, #0]
    1c74:	6879      	ldr	r1, [r7, #4]
    1c76:	2300      	movs	r3, #0
    1c78:	4c11      	ldr	r4, [pc, #68]	; (1cc0 <m2m_ssl_retrieve_hash+0x80>)
    1c7a:	47a0      	blx	r4
    1c7c:	1e03      	subs	r3, r0, #0
    1c7e:	d104      	bne.n	1c8a <m2m_ssl_retrieve_hash+0x4a>
	
	bSetRxDone = 0;
    1c80:	230f      	movs	r3, #15
    1c82:	18fb      	adds	r3, r7, r3
    1c84:	2200      	movs	r2, #0
    1c86:	701a      	strb	r2, [r3, #0]
    1c88:	e000      	b.n	1c8c <m2m_ssl_retrieve_hash+0x4c>
	if(hif_receive(gu32HIFAddr, pu8Hash, u16HashSz, 0) != M2M_SUCCESS) goto __ERR;
    1c8a:	46c0      	nop			; (mov r8, r8)

__ERR:
	if(bSetRxDone)
    1c8c:	230f      	movs	r3, #15
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d009      	beq.n	1caa <m2m_ssl_retrieve_hash+0x6a>
	{
		s8Ret = M2M_ERR_FAIL;
    1c96:	230e      	movs	r3, #14
    1c98:	18fb      	adds	r3, r7, r3
    1c9a:	22f4      	movs	r2, #244	; 0xf4
    1c9c:	701a      	strb	r2, [r3, #0]
		hif_receive(0, NULL, 0, 1);
    1c9e:	2301      	movs	r3, #1
    1ca0:	2200      	movs	r2, #0
    1ca2:	2100      	movs	r1, #0
    1ca4:	2000      	movs	r0, #0
    1ca6:	4c06      	ldr	r4, [pc, #24]	; (1cc0 <m2m_ssl_retrieve_hash+0x80>)
    1ca8:	47a0      	blx	r4
	}
	return s8Ret;
    1caa:	230e      	movs	r3, #14
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	b25b      	sxtb	r3, r3
}
    1cb2:	0018      	movs	r0, r3
    1cb4:	46bd      	mov	sp, r7
    1cb6:	b005      	add	sp, #20
    1cb8:	bd90      	pop	{r4, r7, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	200006c4 	.word	0x200006c4
    1cc0:	000016b9 	.word	0x000016b9

00001cc4 <m2m_ssl_ecc_process_done>:
/*!
	@fn	\	m2m_ssl_ecc_process_done(void)
	@brief	Stops receiving from the HIF
*/
NMI_API void m2m_ssl_ecc_process_done(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0
	gu32HIFAddr = 0;
    1cc8:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <m2m_ssl_ecc_process_done+0x10>)
    1cca:	2200      	movs	r2, #0
    1ccc:	601a      	str	r2, [r3, #0]
}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	46bd      	mov	sp, r7
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	200006c4 	.word	0x200006c4

00001cd8 <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    1cd8:	b5b0      	push	{r4, r5, r7, lr}
    1cda:	b088      	sub	sp, #32
    1cdc:	af04      	add	r7, sp, #16
    1cde:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    1ce0:	230f      	movs	r3, #15
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	2200      	movs	r2, #0
    1ce6:	701a      	strb	r2, [r3, #0]
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	60bb      	str	r3, [r7, #8]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    1cec:	230f      	movs	r3, #15
    1cee:	18fc      	adds	r4, r7, r3
    1cf0:	2308      	movs	r3, #8
    1cf2:	18fa      	adds	r2, r7, r3
    1cf4:	2300      	movs	r3, #0
    1cf6:	9302      	str	r3, [sp, #8]
    1cf8:	2300      	movs	r3, #0
    1cfa:	9301      	str	r3, [sp, #4]
    1cfc:	2300      	movs	r3, #0
    1cfe:	9300      	str	r3, [sp, #0]
    1d00:	2304      	movs	r3, #4
    1d02:	2105      	movs	r1, #5
    1d04:	2005      	movs	r0, #5
    1d06:	4d06      	ldr	r5, [pc, #24]	; (1d20 <m2m_ssl_set_active_ciphersuites+0x48>)
    1d08:	47a8      	blx	r5
    1d0a:	0003      	movs	r3, r0
    1d0c:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    1d0e:	230f      	movs	r3, #15
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	b25b      	sxtb	r3, r3
}
    1d16:	0018      	movs	r0, r3
    1d18:	46bd      	mov	sp, r7
    1d1a:	b004      	add	sp, #16
    1d1c:	bdb0      	pop	{r4, r5, r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00000dc1 	.word	0x00000dc1

00001d24 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
    1d24:	b590      	push	{r4, r7, lr}
    1d26:	b085      	sub	sp, #20
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    1d2c:	230f      	movs	r3, #15
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	2200      	movs	r2, #0
    1d32:	701a      	strb	r2, [r3, #0]

	gpfAppSSLCb = pfAppSSLCb;
    1d34:	4b18      	ldr	r3, [pc, #96]	; (1d98 <m2m_ssl_init+0x74>)
    1d36:	687a      	ldr	r2, [r7, #4]
    1d38:	601a      	str	r2, [r3, #0]
	gu32HIFAddr = 0;
    1d3a:	4b18      	ldr	r3, [pc, #96]	; (1d9c <m2m_ssl_init+0x78>)
    1d3c:	2200      	movs	r2, #0
    1d3e:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
    1d40:	230f      	movs	r3, #15
    1d42:	18fc      	adds	r4, r7, r3
    1d44:	4b16      	ldr	r3, [pc, #88]	; (1da0 <m2m_ssl_init+0x7c>)
    1d46:	0019      	movs	r1, r3
    1d48:	2005      	movs	r0, #5
    1d4a:	4b16      	ldr	r3, [pc, #88]	; (1da4 <m2m_ssl_init+0x80>)
    1d4c:	4798      	blx	r3
    1d4e:	0003      	movs	r3, r0
    1d50:	7023      	strb	r3, [r4, #0]
	if (s8Ret != M2M_SUCCESS)
    1d52:	230f      	movs	r3, #15
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	b25b      	sxtb	r3, r3
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d013      	beq.n	1d86 <m2m_ssl_init+0x62>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
    1d5e:	2330      	movs	r3, #48	; 0x30
    1d60:	33ff      	adds	r3, #255	; 0xff
    1d62:	001a      	movs	r2, r3
    1d64:	4910      	ldr	r1, [pc, #64]	; (1da8 <m2m_ssl_init+0x84>)
    1d66:	4b11      	ldr	r3, [pc, #68]	; (1dac <m2m_ssl_init+0x88>)
    1d68:	0018      	movs	r0, r3
    1d6a:	4b11      	ldr	r3, [pc, #68]	; (1db0 <m2m_ssl_init+0x8c>)
    1d6c:	4798      	blx	r3
    1d6e:	230f      	movs	r3, #15
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	2200      	movs	r2, #0
    1d74:	569a      	ldrsb	r2, [r3, r2]
    1d76:	4b0f      	ldr	r3, [pc, #60]	; (1db4 <m2m_ssl_init+0x90>)
    1d78:	0011      	movs	r1, r2
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b0c      	ldr	r3, [pc, #48]	; (1db0 <m2m_ssl_init+0x8c>)
    1d7e:	4798      	blx	r3
    1d80:	200d      	movs	r0, #13
    1d82:	4b0d      	ldr	r3, [pc, #52]	; (1db8 <m2m_ssl_init+0x94>)
    1d84:	4798      	blx	r3
	}
	return s8Ret;
    1d86:	230f      	movs	r3, #15
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	b25b      	sxtb	r3, r3
    1d8e:	0018      	movs	r0, r3
    1d90:	46bd      	mov	sp, r7
    1d92:	b005      	add	sp, #20
    1d94:	bd90      	pop	{r4, r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	200006c0 	.word	0x200006c0
    1d9c:	200006c4 	.word	0x200006c4
    1da0:	000018f1 	.word	0x000018f1
    1da4:	00001835 	.word	0x00001835
    1da8:	0001d484 	.word	0x0001d484
    1dac:	0001d418 	.word	0x0001d418
    1db0:	0001bc4d 	.word	0x0001bc4d
    1db4:	0001d450 	.word	0x0001d450
    1db8:	0001bc81 	.word	0x0001bc81

00001dbc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1dbc:	b590      	push	{r4, r7, lr}
    1dbe:	b0ad      	sub	sp, #180	; 0xb4
    1dc0:	af02      	add	r7, sp, #8
    1dc2:	603a      	str	r2, [r7, #0]
    1dc4:	1dfb      	adds	r3, r7, #7
    1dc6:	1c02      	adds	r2, r0, #0
    1dc8:	701a      	strb	r2, [r3, #0]
    1dca:	1d3b      	adds	r3, r7, #4
    1dcc:	1c0a      	adds	r2, r1, #0
    1dce:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	2b2c      	cmp	r3, #44	; 0x2c
    1dd6:	d116      	bne.n	1e06 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1dd8:	239c      	movs	r3, #156	; 0x9c
    1dda:	18f9      	adds	r1, r7, r3
    1ddc:	6838      	ldr	r0, [r7, #0]
    1dde:	2300      	movs	r3, #0
    1de0:	2204      	movs	r2, #4
    1de2:	4cc6      	ldr	r4, [pc, #792]	; (20fc <STACK_SIZE+0xfc>)
    1de4:	47a0      	blx	r4
    1de6:	1e03      	subs	r3, r0, #0
    1de8:	d000      	beq.n	1dec <m2m_wifi_cb+0x30>
    1dea:	e1aa      	b.n	2142 <STACK_SIZE+0x142>
		{
			if (gpfAppWifiCb)
    1dec:	4bc4      	ldr	r3, [pc, #784]	; (2100 <STACK_SIZE+0x100>)
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d100      	bne.n	1df6 <m2m_wifi_cb+0x3a>
    1df4:	e1a5      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1df6:	4bc2      	ldr	r3, [pc, #776]	; (2100 <STACK_SIZE+0x100>)
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	229c      	movs	r2, #156	; 0x9c
    1dfc:	18ba      	adds	r2, r7, r2
    1dfe:	0011      	movs	r1, r2
    1e00:	202c      	movs	r0, #44	; 0x2c
    1e02:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1e04:	e19d      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	2b1b      	cmp	r3, #27
    1e0c:	d116      	bne.n	1e3c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1e0e:	2394      	movs	r3, #148	; 0x94
    1e10:	18f9      	adds	r1, r7, r3
    1e12:	6838      	ldr	r0, [r7, #0]
    1e14:	2300      	movs	r3, #0
    1e16:	2208      	movs	r2, #8
    1e18:	4cb8      	ldr	r4, [pc, #736]	; (20fc <STACK_SIZE+0xfc>)
    1e1a:	47a0      	blx	r4
    1e1c:	1e03      	subs	r3, r0, #0
    1e1e:	d000      	beq.n	1e22 <m2m_wifi_cb+0x66>
    1e20:	e18f      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1e22:	4bb7      	ldr	r3, [pc, #732]	; (2100 <STACK_SIZE+0x100>)
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d100      	bne.n	1e2c <m2m_wifi_cb+0x70>
    1e2a:	e18a      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1e2c:	4bb4      	ldr	r3, [pc, #720]	; (2100 <STACK_SIZE+0x100>)
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	2294      	movs	r2, #148	; 0x94
    1e32:	18ba      	adds	r2, r7, r2
    1e34:	0011      	movs	r1, r2
    1e36:	201b      	movs	r0, #27
    1e38:	4798      	blx	r3
}
    1e3a:	e182      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1e3c:	1dfb      	adds	r3, r7, #7
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	2b06      	cmp	r3, #6
    1e42:	d116      	bne.n	1e72 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1e44:	2308      	movs	r3, #8
    1e46:	18f9      	adds	r1, r7, r3
    1e48:	6838      	ldr	r0, [r7, #0]
    1e4a:	2301      	movs	r3, #1
    1e4c:	2233      	movs	r2, #51	; 0x33
    1e4e:	4cab      	ldr	r4, [pc, #684]	; (20fc <STACK_SIZE+0xfc>)
    1e50:	47a0      	blx	r4
    1e52:	1e03      	subs	r3, r0, #0
    1e54:	d000      	beq.n	1e58 <m2m_wifi_cb+0x9c>
    1e56:	e174      	b.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    1e58:	4ba9      	ldr	r3, [pc, #676]	; (2100 <STACK_SIZE+0x100>)
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d100      	bne.n	1e62 <m2m_wifi_cb+0xa6>
    1e60:	e16f      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1e62:	4ba7      	ldr	r3, [pc, #668]	; (2100 <STACK_SIZE+0x100>)
    1e64:	681b      	ldr	r3, [r3, #0]
    1e66:	2208      	movs	r2, #8
    1e68:	18ba      	adds	r2, r7, r2
    1e6a:	0011      	movs	r1, r2
    1e6c:	2006      	movs	r0, #6
    1e6e:	4798      	blx	r3
}
    1e70:	e167      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1e72:	1dfb      	adds	r3, r7, #7
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b0e      	cmp	r3, #14
    1e78:	d100      	bne.n	1e7c <m2m_wifi_cb+0xc0>
    1e7a:	e162      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1e7c:	1dfb      	adds	r3, r7, #7
    1e7e:	781b      	ldrb	r3, [r3, #0]
    1e80:	2b32      	cmp	r3, #50	; 0x32
    1e82:	d116      	bne.n	1eb2 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1e84:	2380      	movs	r3, #128	; 0x80
    1e86:	18f9      	adds	r1, r7, r3
    1e88:	6838      	ldr	r0, [r7, #0]
    1e8a:	2300      	movs	r3, #0
    1e8c:	2214      	movs	r2, #20
    1e8e:	4c9b      	ldr	r4, [pc, #620]	; (20fc <STACK_SIZE+0xfc>)
    1e90:	47a0      	blx	r4
    1e92:	1e03      	subs	r3, r0, #0
    1e94:	d000      	beq.n	1e98 <m2m_wifi_cb+0xdc>
    1e96:	e154      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1e98:	4b99      	ldr	r3, [pc, #612]	; (2100 <STACK_SIZE+0x100>)
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d100      	bne.n	1ea2 <m2m_wifi_cb+0xe6>
    1ea0:	e14f      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1ea2:	4b97      	ldr	r3, [pc, #604]	; (2100 <STACK_SIZE+0x100>)
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	18ba      	adds	r2, r7, r2
    1eaa:	0011      	movs	r1, r2
    1eac:	2032      	movs	r0, #50	; 0x32
    1eae:	4798      	blx	r3
}
    1eb0:	e147      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1eb2:	1dfb      	adds	r3, r7, #7
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	2b2f      	cmp	r3, #47	; 0x2f
    1eb8:	d11d      	bne.n	1ef6 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1eba:	2308      	movs	r3, #8
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	2264      	movs	r2, #100	; 0x64
    1ec0:	2100      	movs	r1, #0
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b8f      	ldr	r3, [pc, #572]	; (2104 <STACK_SIZE+0x104>)
    1ec6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1ec8:	2308      	movs	r3, #8
    1eca:	18f9      	adds	r1, r7, r3
    1ecc:	6838      	ldr	r0, [r7, #0]
    1ece:	2300      	movs	r3, #0
    1ed0:	2264      	movs	r2, #100	; 0x64
    1ed2:	4c8a      	ldr	r4, [pc, #552]	; (20fc <STACK_SIZE+0xfc>)
    1ed4:	47a0      	blx	r4
    1ed6:	1e03      	subs	r3, r0, #0
    1ed8:	d000      	beq.n	1edc <m2m_wifi_cb+0x120>
    1eda:	e132      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1edc:	4b88      	ldr	r3, [pc, #544]	; (2100 <STACK_SIZE+0x100>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d100      	bne.n	1ee6 <m2m_wifi_cb+0x12a>
    1ee4:	e12d      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ee6:	4b86      	ldr	r3, [pc, #536]	; (2100 <STACK_SIZE+0x100>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2208      	movs	r2, #8
    1eec:	18ba      	adds	r2, r7, r2
    1eee:	0011      	movs	r1, r2
    1ef0:	202f      	movs	r0, #47	; 0x2f
    1ef2:	4798      	blx	r3
}
    1ef4:	e125      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1ef6:	1dfb      	adds	r3, r7, #7
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	2b34      	cmp	r3, #52	; 0x34
    1efc:	d12e      	bne.n	1f5c <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1efe:	237c      	movs	r3, #124	; 0x7c
    1f00:	18f9      	adds	r1, r7, r3
    1f02:	6838      	ldr	r0, [r7, #0]
    1f04:	2300      	movs	r3, #0
    1f06:	2204      	movs	r2, #4
    1f08:	4c7c      	ldr	r4, [pc, #496]	; (20fc <STACK_SIZE+0xfc>)
    1f0a:	47a0      	blx	r4
    1f0c:	1e03      	subs	r3, r0, #0
    1f0e:	d000      	beq.n	1f12 <m2m_wifi_cb+0x156>
    1f10:	e117      	b.n	2142 <STACK_SIZE+0x142>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1f12:	4b7d      	ldr	r3, [pc, #500]	; (2108 <STACK_SIZE+0x108>)
    1f14:	0018      	movs	r0, r3
    1f16:	4b7d      	ldr	r3, [pc, #500]	; (210c <STACK_SIZE+0x10c>)
    1f18:	4798      	blx	r3
    1f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f1c:	0e1b      	lsrs	r3, r3, #24
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	0019      	movs	r1, r3
    1f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f24:	0c1b      	lsrs	r3, r3, #16
    1f26:	b2db      	uxtb	r3, r3
    1f28:	001a      	movs	r2, r3
    1f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f2c:	0a1b      	lsrs	r3, r3, #8
    1f2e:	b2db      	uxtb	r3, r3
    1f30:	001c      	movs	r4, r3
    1f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f34:	b2db      	uxtb	r3, r3
    1f36:	4876      	ldr	r0, [pc, #472]	; (2110 <STACK_SIZE+0x110>)
    1f38:	9300      	str	r3, [sp, #0]
    1f3a:	0023      	movs	r3, r4
    1f3c:	4c73      	ldr	r4, [pc, #460]	; (210c <STACK_SIZE+0x10c>)
    1f3e:	47a0      	blx	r4
    1f40:	200d      	movs	r0, #13
    1f42:	4b74      	ldr	r3, [pc, #464]	; (2114 <STACK_SIZE+0x114>)
    1f44:	4798      	blx	r3
			if (gpfAppWifiCb)
    1f46:	4b6e      	ldr	r3, [pc, #440]	; (2100 <STACK_SIZE+0x100>)
    1f48:	681b      	ldr	r3, [r3, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d100      	bne.n	1f50 <m2m_wifi_cb+0x194>
    1f4e:	e0f8      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1f50:	4b6b      	ldr	r3, [pc, #428]	; (2100 <STACK_SIZE+0x100>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	2100      	movs	r1, #0
    1f56:	2034      	movs	r0, #52	; 0x34
    1f58:	4798      	blx	r3
}
    1f5a:	e0f2      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1f5c:	1dfb      	adds	r3, r7, #7
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b11      	cmp	r3, #17
    1f62:	d11e      	bne.n	1fa2 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1f64:	4b6c      	ldr	r3, [pc, #432]	; (2118 <STACK_SIZE+0x118>)
    1f66:	2200      	movs	r2, #0
    1f68:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1f6a:	2378      	movs	r3, #120	; 0x78
    1f6c:	18f9      	adds	r1, r7, r3
    1f6e:	6838      	ldr	r0, [r7, #0]
    1f70:	2300      	movs	r3, #0
    1f72:	2204      	movs	r2, #4
    1f74:	4c61      	ldr	r4, [pc, #388]	; (20fc <STACK_SIZE+0xfc>)
    1f76:	47a0      	blx	r4
    1f78:	1e03      	subs	r3, r0, #0
    1f7a:	d000      	beq.n	1f7e <m2m_wifi_cb+0x1c2>
    1f7c:	e0e1      	b.n	2142 <STACK_SIZE+0x142>
			gu8ChNum = strState.u8NumofCh;
    1f7e:	2378      	movs	r3, #120	; 0x78
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	781a      	ldrb	r2, [r3, #0]
    1f84:	4b65      	ldr	r3, [pc, #404]	; (211c <STACK_SIZE+0x11c>)
    1f86:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1f88:	4b5d      	ldr	r3, [pc, #372]	; (2100 <STACK_SIZE+0x100>)
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d100      	bne.n	1f92 <m2m_wifi_cb+0x1d6>
    1f90:	e0d7      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1f92:	4b5b      	ldr	r3, [pc, #364]	; (2100 <STACK_SIZE+0x100>)
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	2278      	movs	r2, #120	; 0x78
    1f98:	18ba      	adds	r2, r7, r2
    1f9a:	0011      	movs	r1, r2
    1f9c:	2011      	movs	r0, #17
    1f9e:	4798      	blx	r3
}
    1fa0:	e0cf      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1fa2:	1dfb      	adds	r3, r7, #7
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2b13      	cmp	r3, #19
    1fa8:	d116      	bne.n	1fd8 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1faa:	2308      	movs	r3, #8
    1fac:	18f9      	adds	r1, r7, r3
    1fae:	6838      	ldr	r0, [r7, #0]
    1fb0:	2300      	movs	r3, #0
    1fb2:	222c      	movs	r2, #44	; 0x2c
    1fb4:	4c51      	ldr	r4, [pc, #324]	; (20fc <STACK_SIZE+0xfc>)
    1fb6:	47a0      	blx	r4
    1fb8:	1e03      	subs	r3, r0, #0
    1fba:	d000      	beq.n	1fbe <m2m_wifi_cb+0x202>
    1fbc:	e0c1      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1fbe:	4b50      	ldr	r3, [pc, #320]	; (2100 <STACK_SIZE+0x100>)
    1fc0:	681b      	ldr	r3, [r3, #0]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d100      	bne.n	1fc8 <m2m_wifi_cb+0x20c>
    1fc6:	e0bc      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1fc8:	4b4d      	ldr	r3, [pc, #308]	; (2100 <STACK_SIZE+0x100>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2208      	movs	r2, #8
    1fce:	18ba      	adds	r2, r7, r2
    1fd0:	0011      	movs	r1, r2
    1fd2:	2013      	movs	r0, #19
    1fd4:	4798      	blx	r3
}
    1fd6:	e0b4      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2b04      	cmp	r3, #4
    1fde:	d116      	bne.n	200e <STACK_SIZE+0xe>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1fe0:	23a0      	movs	r3, #160	; 0xa0
    1fe2:	18f9      	adds	r1, r7, r3
    1fe4:	6838      	ldr	r0, [r7, #0]
    1fe6:	2300      	movs	r3, #0
    1fe8:	2204      	movs	r2, #4
    1fea:	4c44      	ldr	r4, [pc, #272]	; (20fc <STACK_SIZE+0xfc>)
    1fec:	47a0      	blx	r4
    1fee:	1e03      	subs	r3, r0, #0
    1ff0:	d000      	beq.n	1ff4 <m2m_wifi_cb+0x238>
    1ff2:	e0a6      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    1ff4:	4b42      	ldr	r3, [pc, #264]	; (2100 <STACK_SIZE+0x100>)
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d100      	bne.n	1ffe <m2m_wifi_cb+0x242>
    1ffc:	e0a1      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1ffe:	4b40      	ldr	r3, [pc, #256]	; (2100 <STACK_SIZE+0x100>)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	22a0      	movs	r2, #160	; 0xa0
    2004:	18ba      	adds	r2, r7, r2
    2006:	0011      	movs	r1, r2
    2008:	2004      	movs	r0, #4
    200a:	4798      	blx	r3
}
    200c:	e099      	b.n	2142 <STACK_SIZE+0x142>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    200e:	1dfb      	adds	r3, r7, #7
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	2b65      	cmp	r3, #101	; 0x65
    2014:	d116      	bne.n	2044 <STACK_SIZE+0x44>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2016:	23a0      	movs	r3, #160	; 0xa0
    2018:	18f9      	adds	r1, r7, r3
    201a:	6838      	ldr	r0, [r7, #0]
    201c:	2300      	movs	r3, #0
    201e:	2204      	movs	r2, #4
    2020:	4c36      	ldr	r4, [pc, #216]	; (20fc <STACK_SIZE+0xfc>)
    2022:	47a0      	blx	r4
    2024:	1e03      	subs	r3, r0, #0
    2026:	d000      	beq.n	202a <STACK_SIZE+0x2a>
    2028:	e08b      	b.n	2142 <STACK_SIZE+0x142>
			if (gpfAppWifiCb)
    202a:	4b35      	ldr	r3, [pc, #212]	; (2100 <STACK_SIZE+0x100>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e086      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2034:	4b32      	ldr	r3, [pc, #200]	; (2100 <STACK_SIZE+0x100>)
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	22a0      	movs	r2, #160	; 0xa0
    203a:	18ba      	adds	r2, r7, r2
    203c:	0011      	movs	r1, r2
    203e:	2065      	movs	r0, #101	; 0x65
    2040:	4798      	blx	r3
}
    2042:	e07e      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2044:	1dfb      	adds	r3, r7, #7
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	2b09      	cmp	r3, #9
    204a:	d116      	bne.n	207a <STACK_SIZE+0x7a>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    204c:	2308      	movs	r3, #8
    204e:	18f9      	adds	r1, r7, r3
    2050:	6838      	ldr	r0, [r7, #0]
    2052:	2301      	movs	r3, #1
    2054:	2264      	movs	r2, #100	; 0x64
    2056:	4c29      	ldr	r4, [pc, #164]	; (20fc <STACK_SIZE+0xfc>)
    2058:	47a0      	blx	r4
    205a:	1e03      	subs	r3, r0, #0
    205c:	d000      	beq.n	2060 <STACK_SIZE+0x60>
    205e:	e070      	b.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    2060:	4b27      	ldr	r3, [pc, #156]	; (2100 <STACK_SIZE+0x100>)
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	2b00      	cmp	r3, #0
    2066:	d100      	bne.n	206a <STACK_SIZE+0x6a>
    2068:	e06b      	b.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    206a:	4b25      	ldr	r3, [pc, #148]	; (2100 <STACK_SIZE+0x100>)
    206c:	681b      	ldr	r3, [r3, #0]
    206e:	2208      	movs	r2, #8
    2070:	18ba      	adds	r2, r7, r2
    2072:	0011      	movs	r1, r2
    2074:	2009      	movs	r0, #9
    2076:	4798      	blx	r3
}
    2078:	e063      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    207a:	1dfb      	adds	r3, r7, #7
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b2a      	cmp	r3, #42	; 0x2a
    2080:	d114      	bne.n	20ac <STACK_SIZE+0xac>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2082:	2374      	movs	r3, #116	; 0x74
    2084:	18f9      	adds	r1, r7, r3
    2086:	6838      	ldr	r0, [r7, #0]
    2088:	2301      	movs	r3, #1
    208a:	2204      	movs	r2, #4
    208c:	4c1b      	ldr	r4, [pc, #108]	; (20fc <STACK_SIZE+0xfc>)
    208e:	47a0      	blx	r4
    2090:	1e03      	subs	r3, r0, #0
    2092:	d156      	bne.n	2142 <STACK_SIZE+0x142>
			if(gpfAppWifiCb)
    2094:	4b1a      	ldr	r3, [pc, #104]	; (2100 <STACK_SIZE+0x100>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	d052      	beq.n	2142 <STACK_SIZE+0x142>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    209c:	4b18      	ldr	r3, [pc, #96]	; (2100 <STACK_SIZE+0x100>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	2274      	movs	r2, #116	; 0x74
    20a2:	18ba      	adds	r2, r7, r2
    20a4:	0011      	movs	r1, r2
    20a6:	202a      	movs	r0, #42	; 0x2a
    20a8:	4798      	blx	r3
}
    20aa:	e04a      	b.n	2142 <STACK_SIZE+0x142>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    20ac:	1dfb      	adds	r3, r7, #7
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	2b20      	cmp	r3, #32
    20b2:	d135      	bne.n	2120 <STACK_SIZE+0x120>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    20b4:	236c      	movs	r3, #108	; 0x6c
    20b6:	18f9      	adds	r1, r7, r3
    20b8:	6838      	ldr	r0, [r7, #0]
    20ba:	2300      	movs	r3, #0
    20bc:	2208      	movs	r2, #8
    20be:	4c0f      	ldr	r4, [pc, #60]	; (20fc <STACK_SIZE+0xfc>)
    20c0:	47a0      	blx	r4
    20c2:	1e03      	subs	r3, r0, #0
    20c4:	d13d      	bne.n	2142 <STACK_SIZE+0x142>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    20c6:	683b      	ldr	r3, [r7, #0]
    20c8:	3308      	adds	r3, #8
    20ca:	0018      	movs	r0, r3
    20cc:	236c      	movs	r3, #108	; 0x6c
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	6819      	ldr	r1, [r3, #0]
    20d2:	236c      	movs	r3, #108	; 0x6c
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	889a      	ldrh	r2, [r3, #4]
    20d8:	2301      	movs	r3, #1
    20da:	4c08      	ldr	r4, [pc, #32]	; (20fc <STACK_SIZE+0xfc>)
    20dc:	47a0      	blx	r4
    20de:	1e03      	subs	r3, r0, #0
    20e0:	d12f      	bne.n	2142 <STACK_SIZE+0x142>
				if(gpfAppWifiCb)
    20e2:	4b07      	ldr	r3, [pc, #28]	; (2100 <STACK_SIZE+0x100>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d02b      	beq.n	2142 <STACK_SIZE+0x142>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <STACK_SIZE+0x100>)
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	226c      	movs	r2, #108	; 0x6c
    20f0:	18ba      	adds	r2, r7, r2
    20f2:	0011      	movs	r1, r2
    20f4:	2020      	movs	r0, #32
    20f6:	4798      	blx	r3
}
    20f8:	e023      	b.n	2142 <STACK_SIZE+0x142>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	000016b9 	.word	0x000016b9
    2100:	200006cc 	.word	0x200006cc
    2104:	00000b61 	.word	0x00000b61
    2108:	0001d494 	.word	0x0001d494
    210c:	0001bc4d 	.word	0x0001bc4d
    2110:	0001d4a0 	.word	0x0001d4a0
    2114:	0001bc81 	.word	0x0001bc81
    2118:	200006c9 	.word	0x200006c9
    211c:	200006c8 	.word	0x200006c8
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    2120:	2392      	movs	r3, #146	; 0x92
    2122:	005a      	lsls	r2, r3, #1
    2124:	4909      	ldr	r1, [pc, #36]	; (214c <STACK_SIZE+0x14c>)
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <STACK_SIZE+0x150>)
    2128:	0018      	movs	r0, r3
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <STACK_SIZE+0x154>)
    212c:	4798      	blx	r3
    212e:	1dfb      	adds	r3, r7, #7
    2130:	781a      	ldrb	r2, [r3, #0]
    2132:	4b09      	ldr	r3, [pc, #36]	; (2158 <STACK_SIZE+0x158>)
    2134:	0011      	movs	r1, r2
    2136:	0018      	movs	r0, r3
    2138:	4b06      	ldr	r3, [pc, #24]	; (2154 <STACK_SIZE+0x154>)
    213a:	4798      	blx	r3
    213c:	200d      	movs	r0, #13
    213e:	4b07      	ldr	r3, [pc, #28]	; (215c <STACK_SIZE+0x15c>)
    2140:	4798      	blx	r3
}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	46bd      	mov	sp, r7
    2146:	b02b      	add	sp, #172	; 0xac
    2148:	bd90      	pop	{r4, r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	0001d848 	.word	0x0001d848
    2150:	0001d4c0 	.word	0x0001d4c0
    2154:	0001bc4d 	.word	0x0001bc4d
    2158:	0001d4d4 	.word	0x0001d4d4
    215c:	0001bc81 	.word	0x0001bc81

00002160 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2160:	b590      	push	{r4, r7, lr}
    2162:	b091      	sub	sp, #68	; 0x44
    2164:	af02      	add	r7, sp, #8
    2166:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    2168:	2337      	movs	r3, #55	; 0x37
    216a:	18fb      	adds	r3, r7, r3
    216c:	2200      	movs	r2, #0
    216e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2170:	230b      	movs	r3, #11
    2172:	18fb      	adds	r3, r7, r3
    2174:	2201      	movs	r2, #1
    2176:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	2b00      	cmp	r3, #0
    217c:	d104      	bne.n	2188 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    217e:	2337      	movs	r3, #55	; 0x37
    2180:	18fb      	adds	r3, r7, r3
    2182:	22f4      	movs	r2, #244	; 0xf4
    2184:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    2186:	e0ad      	b.n	22e4 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	681a      	ldr	r2, [r3, #0]
    218c:	4b59      	ldr	r3, [pc, #356]	; (22f4 <m2m_wifi_init+0x194>)
    218e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    2190:	4b59      	ldr	r3, [pc, #356]	; (22f8 <m2m_wifi_init+0x198>)
    2192:	2200      	movs	r2, #0
    2194:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    2196:	2337      	movs	r3, #55	; 0x37
    2198:	18fc      	adds	r4, r7, r3
    219a:	230b      	movs	r3, #11
    219c:	18fb      	adds	r3, r7, r3
    219e:	0018      	movs	r0, r3
    21a0:	4b56      	ldr	r3, [pc, #344]	; (22fc <m2m_wifi_init+0x19c>)
    21a2:	4798      	blx	r3
    21a4:	0003      	movs	r3, r0
    21a6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    21a8:	2337      	movs	r3, #55	; 0x37
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	b25b      	sxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	d000      	beq.n	21b6 <m2m_wifi_init+0x56>
    21b4:	e093      	b.n	22de <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    21b6:	2337      	movs	r3, #55	; 0x37
    21b8:	18fc      	adds	r4, r7, r3
    21ba:	2000      	movs	r0, #0
    21bc:	4b50      	ldr	r3, [pc, #320]	; (2300 <m2m_wifi_init+0x1a0>)
    21be:	4798      	blx	r3
    21c0:	0003      	movs	r3, r0
    21c2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    21c4:	2337      	movs	r3, #55	; 0x37
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b25b      	sxtb	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	d000      	beq.n	21d2 <m2m_wifi_init+0x72>
    21d0:	e080      	b.n	22d4 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    21d2:	4b4c      	ldr	r3, [pc, #304]	; (2304 <m2m_wifi_init+0x1a4>)
    21d4:	0019      	movs	r1, r3
    21d6:	2001      	movs	r0, #1
    21d8:	4b4b      	ldr	r3, [pc, #300]	; (2308 <m2m_wifi_init+0x1a8>)
    21da:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    21dc:	2337      	movs	r3, #55	; 0x37
    21de:	18fc      	adds	r4, r7, r3
    21e0:	230c      	movs	r3, #12
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	0018      	movs	r0, r3
    21e6:	4b49      	ldr	r3, [pc, #292]	; (230c <m2m_wifi_init+0x1ac>)
    21e8:	4798      	blx	r3
    21ea:	0003      	movs	r3, r0
    21ec:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    21ee:	4b48      	ldr	r3, [pc, #288]	; (2310 <m2m_wifi_init+0x1b0>)
    21f0:	0018      	movs	r0, r3
    21f2:	4b48      	ldr	r3, [pc, #288]	; (2314 <m2m_wifi_init+0x1b4>)
    21f4:	4798      	blx	r3
    21f6:	230c      	movs	r3, #12
    21f8:	18fb      	adds	r3, r7, r3
    21fa:	791b      	ldrb	r3, [r3, #4]
    21fc:	0019      	movs	r1, r3
    21fe:	230c      	movs	r3, #12
    2200:	18fb      	adds	r3, r7, r3
    2202:	795b      	ldrb	r3, [r3, #5]
    2204:	001a      	movs	r2, r3
    2206:	230c      	movs	r3, #12
    2208:	18fb      	adds	r3, r7, r3
    220a:	799b      	ldrb	r3, [r3, #6]
    220c:	001c      	movs	r4, r3
    220e:	230c      	movs	r3, #12
    2210:	18fb      	adds	r3, r7, r3
    2212:	8c1b      	ldrh	r3, [r3, #32]
    2214:	4840      	ldr	r0, [pc, #256]	; (2318 <m2m_wifi_init+0x1b8>)
    2216:	9300      	str	r3, [sp, #0]
    2218:	0023      	movs	r3, r4
    221a:	4c3e      	ldr	r4, [pc, #248]	; (2314 <m2m_wifi_init+0x1b4>)
    221c:	47a0      	blx	r4
    221e:	200d      	movs	r0, #13
    2220:	4b3e      	ldr	r3, [pc, #248]	; (231c <m2m_wifi_init+0x1bc>)
    2222:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2224:	4b3a      	ldr	r3, [pc, #232]	; (2310 <m2m_wifi_init+0x1b0>)
    2226:	0018      	movs	r0, r3
    2228:	4b3a      	ldr	r3, [pc, #232]	; (2314 <m2m_wifi_init+0x1b4>)
    222a:	4798      	blx	r3
    222c:	230c      	movs	r3, #12
    222e:	18fb      	adds	r3, r7, r3
    2230:	3316      	adds	r3, #22
    2232:	001a      	movs	r2, r3
    2234:	230c      	movs	r3, #12
    2236:	18fb      	adds	r3, r7, r3
    2238:	330a      	adds	r3, #10
    223a:	0019      	movs	r1, r3
    223c:	4b38      	ldr	r3, [pc, #224]	; (2320 <m2m_wifi_init+0x1c0>)
    223e:	0018      	movs	r0, r3
    2240:	4b34      	ldr	r3, [pc, #208]	; (2314 <m2m_wifi_init+0x1b4>)
    2242:	4798      	blx	r3
    2244:	200d      	movs	r0, #13
    2246:	4b35      	ldr	r3, [pc, #212]	; (231c <m2m_wifi_init+0x1bc>)
    2248:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    224a:	4b31      	ldr	r3, [pc, #196]	; (2310 <m2m_wifi_init+0x1b0>)
    224c:	0018      	movs	r0, r3
    224e:	4b31      	ldr	r3, [pc, #196]	; (2314 <m2m_wifi_init+0x1b4>)
    2250:	4798      	blx	r3
    2252:	230c      	movs	r3, #12
    2254:	18fb      	adds	r3, r7, r3
    2256:	79db      	ldrb	r3, [r3, #7]
    2258:	0019      	movs	r1, r3
    225a:	230c      	movs	r3, #12
    225c:	18fb      	adds	r3, r7, r3
    225e:	7a1b      	ldrb	r3, [r3, #8]
    2260:	001a      	movs	r2, r3
    2262:	230c      	movs	r3, #12
    2264:	18fb      	adds	r3, r7, r3
    2266:	7a5b      	ldrb	r3, [r3, #9]
    2268:	482e      	ldr	r0, [pc, #184]	; (2324 <m2m_wifi_init+0x1c4>)
    226a:	4c2a      	ldr	r4, [pc, #168]	; (2314 <m2m_wifi_init+0x1b4>)
    226c:	47a0      	blx	r4
    226e:	200d      	movs	r0, #13
    2270:	4b2a      	ldr	r3, [pc, #168]	; (231c <m2m_wifi_init+0x1bc>)
    2272:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2274:	4b26      	ldr	r3, [pc, #152]	; (2310 <m2m_wifi_init+0x1b0>)
    2276:	0018      	movs	r0, r3
    2278:	4b26      	ldr	r3, [pc, #152]	; (2314 <m2m_wifi_init+0x1b4>)
    227a:	4798      	blx	r3
    227c:	482a      	ldr	r0, [pc, #168]	; (2328 <m2m_wifi_init+0x1c8>)
    227e:	2304      	movs	r3, #4
    2280:	2205      	movs	r2, #5
    2282:	2113      	movs	r1, #19
    2284:	4c23      	ldr	r4, [pc, #140]	; (2314 <m2m_wifi_init+0x1b4>)
    2286:	47a0      	blx	r4
    2288:	200d      	movs	r0, #13
    228a:	4b24      	ldr	r3, [pc, #144]	; (231c <m2m_wifi_init+0x1bc>)
    228c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    228e:	4b20      	ldr	r3, [pc, #128]	; (2310 <m2m_wifi_init+0x1b0>)
    2290:	0018      	movs	r0, r3
    2292:	4b20      	ldr	r3, [pc, #128]	; (2314 <m2m_wifi_init+0x1b4>)
    2294:	4798      	blx	r3
    2296:	4a25      	ldr	r2, [pc, #148]	; (232c <m2m_wifi_init+0x1cc>)
    2298:	4925      	ldr	r1, [pc, #148]	; (2330 <m2m_wifi_init+0x1d0>)
    229a:	4b26      	ldr	r3, [pc, #152]	; (2334 <m2m_wifi_init+0x1d4>)
    229c:	0018      	movs	r0, r3
    229e:	4b1d      	ldr	r3, [pc, #116]	; (2314 <m2m_wifi_init+0x1b4>)
    22a0:	4798      	blx	r3
    22a2:	200d      	movs	r0, #13
    22a4:	4b1d      	ldr	r3, [pc, #116]	; (231c <m2m_wifi_init+0x1bc>)
    22a6:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    22a8:	2337      	movs	r3, #55	; 0x37
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	b25b      	sxtb	r3, r3
    22b0:	330d      	adds	r3, #13
    22b2:	d116      	bne.n	22e2 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    22b4:	23e8      	movs	r3, #232	; 0xe8
    22b6:	33ff      	adds	r3, #255	; 0xff
    22b8:	001a      	movs	r2, r3
    22ba:	491f      	ldr	r1, [pc, #124]	; (2338 <m2m_wifi_init+0x1d8>)
    22bc:	4b1f      	ldr	r3, [pc, #124]	; (233c <m2m_wifi_init+0x1dc>)
    22be:	0018      	movs	r0, r3
    22c0:	4b14      	ldr	r3, [pc, #80]	; (2314 <m2m_wifi_init+0x1b4>)
    22c2:	4798      	blx	r3
    22c4:	4b1e      	ldr	r3, [pc, #120]	; (2340 <m2m_wifi_init+0x1e0>)
    22c6:	0018      	movs	r0, r3
    22c8:	4b1e      	ldr	r3, [pc, #120]	; (2344 <m2m_wifi_init+0x1e4>)
    22ca:	4798      	blx	r3
    22cc:	200d      	movs	r0, #13
    22ce:	4b13      	ldr	r3, [pc, #76]	; (231c <m2m_wifi_init+0x1bc>)
    22d0:	4798      	blx	r3
	}

	goto _EXIT0;
    22d2:	e006      	b.n	22e2 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    22d4:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    22d6:	2000      	movs	r0, #0
    22d8:	4b1b      	ldr	r3, [pc, #108]	; (2348 <m2m_wifi_init+0x1e8>)
    22da:	4798      	blx	r3
    22dc:	e002      	b.n	22e4 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	e000      	b.n	22e4 <m2m_wifi_init+0x184>
	goto _EXIT0;
    22e2:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    22e4:	2337      	movs	r3, #55	; 0x37
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	b25b      	sxtb	r3, r3
}
    22ec:	0018      	movs	r0, r3
    22ee:	46bd      	mov	sp, r7
    22f0:	b00f      	add	sp, #60	; 0x3c
    22f2:	bd90      	pop	{r4, r7, pc}
    22f4:	200006cc 	.word	0x200006cc
    22f8:	200006c9 	.word	0x200006c9
    22fc:	00003499 	.word	0x00003499
    2300:	00000d79 	.word	0x00000d79
    2304:	00001dbd 	.word	0x00001dbd
    2308:	00001835 	.word	0x00001835
    230c:	000032cd 	.word	0x000032cd
    2310:	0001d494 	.word	0x0001d494
    2314:	0001bc4d 	.word	0x0001bc4d
    2318:	0001d628 	.word	0x0001d628
    231c:	0001bc81 	.word	0x0001bc81
    2320:	0001d650 	.word	0x0001d650
    2324:	0001d66c 	.word	0x0001d66c
    2328:	0001d690 	.word	0x0001d690
    232c:	0001d6a8 	.word	0x0001d6a8
    2330:	0001d6b4 	.word	0x0001d6b4
    2334:	0001d6c0 	.word	0x0001d6c0
    2338:	0001d854 	.word	0x0001d854
    233c:	0001d4c0 	.word	0x0001d4c0
    2340:	0001d6d8 	.word	0x0001d6d8
    2344:	0001bd69 	.word	0x0001bd69
    2348:	0000362d 	.word	0x0000362d

0000234c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    234c:	b580      	push	{r7, lr}
    234e:	b082      	sub	sp, #8
    2350:	af00      	add	r7, sp, #0
    2352:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <m2m_wifi_handle_events+0x18>)
    2356:	4798      	blx	r3
    2358:	0003      	movs	r3, r0
}
    235a:	0018      	movs	r0, r3
    235c:	46bd      	mov	sp, r7
    235e:	b002      	add	sp, #8
    2360:	bd80      	pop	{r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	00001629 	.word	0x00001629

00002368 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2368:	b590      	push	{r4, r7, lr}
    236a:	b087      	sub	sp, #28
    236c:	af02      	add	r7, sp, #8
    236e:	60f8      	str	r0, [r7, #12]
    2370:	0008      	movs	r0, r1
    2372:	0011      	movs	r1, r2
    2374:	607b      	str	r3, [r7, #4]
    2376:	230b      	movs	r3, #11
    2378:	18fb      	adds	r3, r7, r3
    237a:	1c02      	adds	r2, r0, #0
    237c:	701a      	strb	r2, [r3, #0]
    237e:	230a      	movs	r3, #10
    2380:	18fb      	adds	r3, r7, r3
    2382:	1c0a      	adds	r2, r1, #0
    2384:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2386:	687c      	ldr	r4, [r7, #4]
    2388:	230a      	movs	r3, #10
    238a:	18fb      	adds	r3, r7, r3
    238c:	781a      	ldrb	r2, [r3, #0]
    238e:	230b      	movs	r3, #11
    2390:	18fb      	adds	r3, r7, r3
    2392:	7819      	ldrb	r1, [r3, #0]
    2394:	68f8      	ldr	r0, [r7, #12]
    2396:	2300      	movs	r3, #0
    2398:	9301      	str	r3, [sp, #4]
    239a:	2320      	movs	r3, #32
    239c:	18fb      	adds	r3, r7, r3
    239e:	881b      	ldrh	r3, [r3, #0]
    23a0:	9300      	str	r3, [sp, #0]
    23a2:	0023      	movs	r3, r4
    23a4:	4c03      	ldr	r4, [pc, #12]	; (23b4 <m2m_wifi_connect+0x4c>)
    23a6:	47a0      	blx	r4
    23a8:	0003      	movs	r3, r0
}
    23aa:	0018      	movs	r0, r3
    23ac:	46bd      	mov	sp, r7
    23ae:	b005      	add	sp, #20
    23b0:	bd90      	pop	{r4, r7, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	000023b9 	.word	0x000023b9

000023b8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    23b8:	b5b0      	push	{r4, r5, r7, lr}
    23ba:	b0aa      	sub	sp, #168	; 0xa8
    23bc:	af04      	add	r7, sp, #16
    23be:	60f8      	str	r0, [r7, #12]
    23c0:	0008      	movs	r0, r1
    23c2:	0011      	movs	r1, r2
    23c4:	607b      	str	r3, [r7, #4]
    23c6:	230b      	movs	r3, #11
    23c8:	18fb      	adds	r3, r7, r3
    23ca:	1c02      	adds	r2, r0, #0
    23cc:	701a      	strb	r2, [r3, #0]
    23ce:	230a      	movs	r3, #10
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	1c0a      	adds	r2, r1, #0
    23d4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    23d6:	2397      	movs	r3, #151	; 0x97
    23d8:	18fb      	adds	r3, r7, r3
    23da:	2200      	movs	r2, #0
    23dc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    23de:	230a      	movs	r3, #10
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	2b01      	cmp	r3, #1
    23e6:	d100      	bne.n	23ea <m2m_wifi_connect_sc+0x32>
    23e8:	e083      	b.n	24f2 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d111      	bne.n	2414 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    23f0:	4adb      	ldr	r2, [pc, #876]	; (2760 <m2m_wifi_connect_sc+0x3a8>)
    23f2:	49dc      	ldr	r1, [pc, #880]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    23f4:	4bdc      	ldr	r3, [pc, #880]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    23f6:	0018      	movs	r0, r3
    23f8:	4bdc      	ldr	r3, [pc, #880]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    23fa:	4798      	blx	r3
    23fc:	4bdc      	ldr	r3, [pc, #880]	; (2770 <m2m_wifi_connect_sc+0x3b8>)
    23fe:	0018      	movs	r0, r3
    2400:	4bdc      	ldr	r3, [pc, #880]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2402:	4798      	blx	r3
    2404:	200d      	movs	r0, #13
    2406:	4bdc      	ldr	r3, [pc, #880]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2408:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    240a:	2397      	movs	r3, #151	; 0x97
    240c:	18fb      	adds	r3, r7, r3
    240e:	22f4      	movs	r2, #244	; 0xf4
    2410:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2412:	e1f5      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2414:	230a      	movs	r3, #10
    2416:	18fb      	adds	r3, r7, r3
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	2b02      	cmp	r3, #2
    241c:	d169      	bne.n	24f2 <m2m_wifi_connect_sc+0x13a>
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	0018      	movs	r0, r3
    2422:	4bd6      	ldr	r3, [pc, #856]	; (277c <m2m_wifi_connect_sc+0x3c4>)
    2424:	4798      	blx	r3
    2426:	0003      	movs	r3, r0
    2428:	2b40      	cmp	r3, #64	; 0x40
    242a:	d162      	bne.n	24f2 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    242c:	2396      	movs	r3, #150	; 0x96
    242e:	18fb      	adds	r3, r7, r3
    2430:	2200      	movs	r2, #0
    2432:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	2290      	movs	r2, #144	; 0x90
    2438:	18ba      	adds	r2, r7, r2
    243a:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    243c:	e054      	b.n	24e8 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    243e:	2396      	movs	r3, #150	; 0x96
    2440:	18fb      	adds	r3, r7, r3
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	2290      	movs	r2, #144	; 0x90
    2446:	18ba      	adds	r2, r7, r2
    2448:	6812      	ldr	r2, [r2, #0]
    244a:	18d3      	adds	r3, r2, r3
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	2b2f      	cmp	r3, #47	; 0x2f
    2450:	d931      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    2452:	2396      	movs	r3, #150	; 0x96
    2454:	18fb      	adds	r3, r7, r3
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	2290      	movs	r2, #144	; 0x90
    245a:	18ba      	adds	r2, r7, r2
    245c:	6812      	ldr	r2, [r2, #0]
    245e:	18d3      	adds	r3, r2, r3
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b39      	cmp	r3, #57	; 0x39
    2464:	d909      	bls.n	247a <m2m_wifi_connect_sc+0xc2>
    2466:	2396      	movs	r3, #150	; 0x96
    2468:	18fb      	adds	r3, r7, r3
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	2290      	movs	r2, #144	; 0x90
    246e:	18ba      	adds	r2, r7, r2
    2470:	6812      	ldr	r2, [r2, #0]
    2472:	18d3      	adds	r3, r2, r3
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	2b40      	cmp	r3, #64	; 0x40
    2478:	d91d      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    247a:	2396      	movs	r3, #150	; 0x96
    247c:	18fb      	adds	r3, r7, r3
    247e:	781b      	ldrb	r3, [r3, #0]
    2480:	2290      	movs	r2, #144	; 0x90
    2482:	18ba      	adds	r2, r7, r2
    2484:	6812      	ldr	r2, [r2, #0]
    2486:	18d3      	adds	r3, r2, r3
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	2b46      	cmp	r3, #70	; 0x46
    248c:	d909      	bls.n	24a2 <m2m_wifi_connect_sc+0xea>
    248e:	2396      	movs	r3, #150	; 0x96
    2490:	18fb      	adds	r3, r7, r3
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	2290      	movs	r2, #144	; 0x90
    2496:	18ba      	adds	r2, r7, r2
    2498:	6812      	ldr	r2, [r2, #0]
    249a:	18d3      	adds	r3, r2, r3
    249c:	781b      	ldrb	r3, [r3, #0]
    249e:	2b60      	cmp	r3, #96	; 0x60
    24a0:	d909      	bls.n	24b6 <m2m_wifi_connect_sc+0xfe>
    24a2:	2396      	movs	r3, #150	; 0x96
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	2290      	movs	r2, #144	; 0x90
    24aa:	18ba      	adds	r2, r7, r2
    24ac:	6812      	ldr	r2, [r2, #0]
    24ae:	18d3      	adds	r3, r2, r3
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	2b66      	cmp	r3, #102	; 0x66
    24b4:	d911      	bls.n	24da <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    24b6:	4ab2      	ldr	r2, [pc, #712]	; (2780 <m2m_wifi_connect_sc+0x3c8>)
    24b8:	49aa      	ldr	r1, [pc, #680]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    24ba:	4bab      	ldr	r3, [pc, #684]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    24bc:	0018      	movs	r0, r3
    24be:	4bab      	ldr	r3, [pc, #684]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    24c0:	4798      	blx	r3
    24c2:	4bb0      	ldr	r3, [pc, #704]	; (2784 <m2m_wifi_connect_sc+0x3cc>)
    24c4:	0018      	movs	r0, r3
    24c6:	4bab      	ldr	r3, [pc, #684]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    24c8:	4798      	blx	r3
    24ca:	200d      	movs	r0, #13
    24cc:	4baa      	ldr	r3, [pc, #680]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    24ce:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    24d0:	2397      	movs	r3, #151	; 0x97
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	22f4      	movs	r2, #244	; 0xf4
    24d6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    24d8:	e192      	b.n	2800 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    24da:	2396      	movs	r3, #150	; 0x96
    24dc:	18fb      	adds	r3, r7, r3
    24de:	781a      	ldrb	r2, [r3, #0]
    24e0:	2396      	movs	r3, #150	; 0x96
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	3201      	adds	r2, #1
    24e6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    24e8:	2396      	movs	r3, #150	; 0x96
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	781b      	ldrb	r3, [r3, #0]
    24ee:	2b3f      	cmp	r3, #63	; 0x3f
    24f0:	d9a5      	bls.n	243e <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    24f2:	230b      	movs	r3, #11
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d004      	beq.n	2506 <m2m_wifi_connect_sc+0x14e>
    24fc:	230b      	movs	r3, #11
    24fe:	18fb      	adds	r3, r7, r3
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	2b20      	cmp	r3, #32
    2504:	d911      	bls.n	252a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    2506:	4aa0      	ldr	r2, [pc, #640]	; (2788 <m2m_wifi_connect_sc+0x3d0>)
    2508:	4996      	ldr	r1, [pc, #600]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    250a:	4b97      	ldr	r3, [pc, #604]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    250c:	0018      	movs	r0, r3
    250e:	4b97      	ldr	r3, [pc, #604]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2510:	4798      	blx	r3
    2512:	4b9e      	ldr	r3, [pc, #632]	; (278c <m2m_wifi_connect_sc+0x3d4>)
    2514:	0018      	movs	r0, r3
    2516:	4b97      	ldr	r3, [pc, #604]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2518:	4798      	blx	r3
    251a:	200d      	movs	r0, #13
    251c:	4b96      	ldr	r3, [pc, #600]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    251e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2520:	2397      	movs	r3, #151	; 0x97
    2522:	18fb      	adds	r3, r7, r3
    2524:	22f4      	movs	r2, #244	; 0xf4
    2526:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2528:	e16a      	b.n	2800 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    252a:	23a8      	movs	r3, #168	; 0xa8
    252c:	18fb      	adds	r3, r7, r3
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	2b00      	cmp	r3, #0
    2532:	d004      	beq.n	253e <m2m_wifi_connect_sc+0x186>
    2534:	23a8      	movs	r3, #168	; 0xa8
    2536:	18fb      	adds	r3, r7, r3
    2538:	881b      	ldrh	r3, [r3, #0]
    253a:	2b0e      	cmp	r3, #14
    253c:	d917      	bls.n	256e <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    253e:	23a8      	movs	r3, #168	; 0xa8
    2540:	18fb      	adds	r3, r7, r3
    2542:	881b      	ldrh	r3, [r3, #0]
    2544:	2bff      	cmp	r3, #255	; 0xff
    2546:	d012      	beq.n	256e <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    2548:	238d      	movs	r3, #141	; 0x8d
    254a:	009a      	lsls	r2, r3, #2
    254c:	4985      	ldr	r1, [pc, #532]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    254e:	4b86      	ldr	r3, [pc, #536]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    2550:	0018      	movs	r0, r3
    2552:	4b86      	ldr	r3, [pc, #536]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2554:	4798      	blx	r3
    2556:	4b8e      	ldr	r3, [pc, #568]	; (2790 <m2m_wifi_connect_sc+0x3d8>)
    2558:	0018      	movs	r0, r3
    255a:	4b86      	ldr	r3, [pc, #536]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    255c:	4798      	blx	r3
    255e:	200d      	movs	r0, #13
    2560:	4b85      	ldr	r3, [pc, #532]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2562:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2564:	2397      	movs	r3, #151	; 0x97
    2566:	18fb      	adds	r3, r7, r3
    2568:	22f4      	movs	r2, #244	; 0xf4
    256a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    256c:	e148      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    256e:	230b      	movs	r3, #11
    2570:	18fb      	adds	r3, r7, r3
    2572:	781a      	ldrb	r2, [r3, #0]
    2574:	68f9      	ldr	r1, [r7, #12]
    2576:	2314      	movs	r3, #20
    2578:	18fb      	adds	r3, r7, r3
    257a:	3346      	adds	r3, #70	; 0x46
    257c:	0018      	movs	r0, r3
    257e:	4b85      	ldr	r3, [pc, #532]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    2580:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2582:	230b      	movs	r3, #11
    2584:	18fb      	adds	r3, r7, r3
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2214      	movs	r2, #20
    258a:	18ba      	adds	r2, r7, r2
    258c:	2146      	movs	r1, #70	; 0x46
    258e:	18d3      	adds	r3, r2, r3
    2590:	185b      	adds	r3, r3, r1
    2592:	2200      	movs	r2, #0
    2594:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2596:	2314      	movs	r3, #20
    2598:	18fb      	adds	r3, r7, r3
    259a:	22a8      	movs	r2, #168	; 0xa8
    259c:	18ba      	adds	r2, r7, r2
    259e:	2144      	movs	r1, #68	; 0x44
    25a0:	8812      	ldrh	r2, [r2, #0]
    25a2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    25a4:	23ac      	movs	r3, #172	; 0xac
    25a6:	18fb      	adds	r3, r7, r3
    25a8:	781b      	ldrb	r3, [r3, #0]
    25aa:	1e5a      	subs	r2, r3, #1
    25ac:	4193      	sbcs	r3, r2
    25ae:	b2db      	uxtb	r3, r3
    25b0:	0019      	movs	r1, r3
    25b2:	2314      	movs	r3, #20
    25b4:	18fb      	adds	r3, r7, r3
    25b6:	2267      	movs	r2, #103	; 0x67
    25b8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    25ba:	2314      	movs	r3, #20
    25bc:	18fb      	adds	r3, r7, r3
    25be:	228c      	movs	r2, #140	; 0x8c
    25c0:	18ba      	adds	r2, r7, r2
    25c2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    25c4:	238c      	movs	r3, #140	; 0x8c
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	220a      	movs	r2, #10
    25cc:	18ba      	adds	r2, r7, r2
    25ce:	2141      	movs	r1, #65	; 0x41
    25d0:	7812      	ldrb	r2, [r2, #0]
    25d2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    25d4:	230a      	movs	r3, #10
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	2b03      	cmp	r3, #3
    25dc:	d000      	beq.n	25e0 <m2m_wifi_connect_sc+0x228>
    25de:	e07a      	b.n	26d6 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	2288      	movs	r2, #136	; 0x88
    25e4:	18ba      	adds	r2, r7, r2
    25e6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    25e8:	238c      	movs	r3, #140	; 0x8c
    25ea:	18fb      	adds	r3, r7, r3
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	2284      	movs	r2, #132	; 0x84
    25f0:	18ba      	adds	r2, r7, r2
    25f2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    25f4:	2388      	movs	r3, #136	; 0x88
    25f6:	18fb      	adds	r3, r7, r3
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	3b01      	subs	r3, #1
    25fe:	b2da      	uxtb	r2, r3
    2600:	2384      	movs	r3, #132	; 0x84
    2602:	18fb      	adds	r3, r7, r3
    2604:	681b      	ldr	r3, [r3, #0]
    2606:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2608:	2384      	movs	r3, #132	; 0x84
    260a:	18fb      	adds	r3, r7, r3
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	781b      	ldrb	r3, [r3, #0]
    2610:	2b03      	cmp	r3, #3
    2612:	d917      	bls.n	2644 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2614:	4a60      	ldr	r2, [pc, #384]	; (2798 <m2m_wifi_connect_sc+0x3e0>)
    2616:	4953      	ldr	r1, [pc, #332]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2618:	4b53      	ldr	r3, [pc, #332]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    261a:	0018      	movs	r0, r3
    261c:	4b53      	ldr	r3, [pc, #332]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    261e:	4798      	blx	r3
    2620:	2384      	movs	r3, #132	; 0x84
    2622:	18fb      	adds	r3, r7, r3
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	001a      	movs	r2, r3
    262a:	4b5c      	ldr	r3, [pc, #368]	; (279c <m2m_wifi_connect_sc+0x3e4>)
    262c:	0011      	movs	r1, r2
    262e:	0018      	movs	r0, r3
    2630:	4b4e      	ldr	r3, [pc, #312]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    2632:	4798      	blx	r3
    2634:	200d      	movs	r0, #13
    2636:	4b50      	ldr	r3, [pc, #320]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2638:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    263a:	2397      	movs	r3, #151	; 0x97
    263c:	18fb      	adds	r3, r7, r3
    263e:	22f4      	movs	r2, #244	; 0xf4
    2640:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2642:	e0dd      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2644:	2388      	movs	r3, #136	; 0x88
    2646:	18fb      	adds	r3, r7, r3
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	785b      	ldrb	r3, [r3, #1]
    264c:	3b01      	subs	r3, #1
    264e:	b2da      	uxtb	r2, r3
    2650:	2384      	movs	r3, #132	; 0x84
    2652:	18fb      	adds	r3, r7, r3
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2658:	2384      	movs	r3, #132	; 0x84
    265a:	18fb      	adds	r3, r7, r3
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	785b      	ldrb	r3, [r3, #1]
    2660:	2b0a      	cmp	r3, #10
    2662:	d01d      	beq.n	26a0 <m2m_wifi_connect_sc+0x2e8>
    2664:	2384      	movs	r3, #132	; 0x84
    2666:	18fb      	adds	r3, r7, r3
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	2b1a      	cmp	r3, #26
    266e:	d017      	beq.n	26a0 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2670:	4a4b      	ldr	r2, [pc, #300]	; (27a0 <m2m_wifi_connect_sc+0x3e8>)
    2672:	493c      	ldr	r1, [pc, #240]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2674:	4b3c      	ldr	r3, [pc, #240]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    2676:	0018      	movs	r0, r3
    2678:	4b3c      	ldr	r3, [pc, #240]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    267a:	4798      	blx	r3
    267c:	2384      	movs	r3, #132	; 0x84
    267e:	18fb      	adds	r3, r7, r3
    2680:	681b      	ldr	r3, [r3, #0]
    2682:	785b      	ldrb	r3, [r3, #1]
    2684:	001a      	movs	r2, r3
    2686:	4b47      	ldr	r3, [pc, #284]	; (27a4 <m2m_wifi_connect_sc+0x3ec>)
    2688:	0011      	movs	r1, r2
    268a:	0018      	movs	r0, r3
    268c:	4b37      	ldr	r3, [pc, #220]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    268e:	4798      	blx	r3
    2690:	200d      	movs	r0, #13
    2692:	4b39      	ldr	r3, [pc, #228]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    2694:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2696:	2397      	movs	r3, #151	; 0x97
    2698:	18fb      	adds	r3, r7, r3
    269a:	22f4      	movs	r2, #244	; 0xf4
    269c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    269e:	e0af      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    26a0:	2384      	movs	r3, #132	; 0x84
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	1c98      	adds	r0, r3, #2
    26a8:	2388      	movs	r3, #136	; 0x88
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	1c99      	adds	r1, r3, #2
    26b0:	2388      	movs	r3, #136	; 0x88
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	785b      	ldrb	r3, [r3, #1]
    26b8:	001a      	movs	r2, r3
    26ba:	4b36      	ldr	r3, [pc, #216]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    26bc:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    26be:	2388      	movs	r3, #136	; 0x88
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	681b      	ldr	r3, [r3, #0]
    26c4:	785b      	ldrb	r3, [r3, #1]
    26c6:	001a      	movs	r2, r3
    26c8:	2384      	movs	r3, #132	; 0x84
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	189b      	adds	r3, r3, r2
    26d0:	2200      	movs	r2, #0
    26d2:	709a      	strb	r2, [r3, #2]
    26d4:	e083      	b.n	27de <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    26d6:	230a      	movs	r3, #10
    26d8:	18fb      	adds	r3, r7, r3
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	2b02      	cmp	r3, #2
    26de:	d130      	bne.n	2742 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    26e0:	2382      	movs	r3, #130	; 0x82
    26e2:	18fc      	adds	r4, r7, r3
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	0018      	movs	r0, r3
    26e8:	4b24      	ldr	r3, [pc, #144]	; (277c <m2m_wifi_connect_sc+0x3c4>)
    26ea:	4798      	blx	r3
    26ec:	0003      	movs	r3, r0
    26ee:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    26f0:	2382      	movs	r3, #130	; 0x82
    26f2:	18fb      	adds	r3, r7, r3
    26f4:	881b      	ldrh	r3, [r3, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d004      	beq.n	2704 <m2m_wifi_connect_sc+0x34c>
    26fa:	2382      	movs	r3, #130	; 0x82
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	881b      	ldrh	r3, [r3, #0]
    2700:	2b40      	cmp	r3, #64	; 0x40
    2702:	d911      	bls.n	2728 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    2704:	4a28      	ldr	r2, [pc, #160]	; (27a8 <m2m_wifi_connect_sc+0x3f0>)
    2706:	4917      	ldr	r1, [pc, #92]	; (2764 <m2m_wifi_connect_sc+0x3ac>)
    2708:	4b17      	ldr	r3, [pc, #92]	; (2768 <m2m_wifi_connect_sc+0x3b0>)
    270a:	0018      	movs	r0, r3
    270c:	4b17      	ldr	r3, [pc, #92]	; (276c <m2m_wifi_connect_sc+0x3b4>)
    270e:	4798      	blx	r3
    2710:	4b26      	ldr	r3, [pc, #152]	; (27ac <m2m_wifi_connect_sc+0x3f4>)
    2712:	0018      	movs	r0, r3
    2714:	4b17      	ldr	r3, [pc, #92]	; (2774 <m2m_wifi_connect_sc+0x3bc>)
    2716:	4798      	blx	r3
    2718:	200d      	movs	r0, #13
    271a:	4b17      	ldr	r3, [pc, #92]	; (2778 <m2m_wifi_connect_sc+0x3c0>)
    271c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    271e:	2397      	movs	r3, #151	; 0x97
    2720:	18fb      	adds	r3, r7, r3
    2722:	22f4      	movs	r2, #244	; 0xf4
    2724:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2726:	e06b      	b.n	2800 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2728:	238c      	movs	r3, #140	; 0x8c
    272a:	18fb      	adds	r3, r7, r3
    272c:	6818      	ldr	r0, [r3, #0]
    272e:	2382      	movs	r3, #130	; 0x82
    2730:	18fb      	adds	r3, r7, r3
    2732:	881b      	ldrh	r3, [r3, #0]
    2734:	3301      	adds	r3, #1
    2736:	001a      	movs	r2, r3
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	0019      	movs	r1, r3
    273c:	4b15      	ldr	r3, [pc, #84]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    273e:	4798      	blx	r3
    2740:	e04d      	b.n	27de <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2742:	230a      	movs	r3, #10
    2744:	18fb      	adds	r3, r7, r3
    2746:	781b      	ldrb	r3, [r3, #0]
    2748:	2b04      	cmp	r3, #4
    274a:	d131      	bne.n	27b0 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    274c:	238c      	movs	r3, #140	; 0x8c
    274e:	18fb      	adds	r3, r7, r3
    2750:	681b      	ldr	r3, [r3, #0]
    2752:	6879      	ldr	r1, [r7, #4]
    2754:	223e      	movs	r2, #62	; 0x3e
    2756:	0018      	movs	r0, r3
    2758:	4b0e      	ldr	r3, [pc, #56]	; (2794 <m2m_wifi_connect_sc+0x3dc>)
    275a:	4798      	blx	r3
    275c:	e03f      	b.n	27de <m2m_wifi_connect_sc+0x426>
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00000215 	.word	0x00000215
    2764:	0001d864 	.word	0x0001d864
    2768:	0001d4c0 	.word	0x0001d4c0
    276c:	0001bc4d 	.word	0x0001bc4d
    2770:	0001d6f4 	.word	0x0001d6f4
    2774:	0001bd69 	.word	0x0001bd69
    2778:	0001bc81 	.word	0x0001bc81
    277c:	00000b9f 	.word	0x00000b9f
    2780:	00000221 	.word	0x00000221
    2784:	0001d708 	.word	0x0001d708
    2788:	0000022b 	.word	0x0000022b
    278c:	0001d714 	.word	0x0001d714
    2790:	0001d728 	.word	0x0001d728
    2794:	00000b25 	.word	0x00000b25
    2798:	0000024b 	.word	0x0000024b
    279c:	0001d734 	.word	0x0001d734
    27a0:	00000252 	.word	0x00000252
    27a4:	0001d750 	.word	0x0001d750
    27a8:	00000261 	.word	0x00000261
    27ac:	0001d76c 	.word	0x0001d76c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    27b0:	230a      	movs	r3, #10
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2b01      	cmp	r3, #1
    27b8:	d011      	beq.n	27de <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    27ba:	4a15      	ldr	r2, [pc, #84]	; (2810 <m2m_wifi_connect_sc+0x458>)
    27bc:	4915      	ldr	r1, [pc, #84]	; (2814 <m2m_wifi_connect_sc+0x45c>)
    27be:	4b16      	ldr	r3, [pc, #88]	; (2818 <m2m_wifi_connect_sc+0x460>)
    27c0:	0018      	movs	r0, r3
    27c2:	4b16      	ldr	r3, [pc, #88]	; (281c <m2m_wifi_connect_sc+0x464>)
    27c4:	4798      	blx	r3
    27c6:	4b16      	ldr	r3, [pc, #88]	; (2820 <m2m_wifi_connect_sc+0x468>)
    27c8:	0018      	movs	r0, r3
    27ca:	4b16      	ldr	r3, [pc, #88]	; (2824 <m2m_wifi_connect_sc+0x46c>)
    27cc:	4798      	blx	r3
    27ce:	200d      	movs	r0, #13
    27d0:	4b15      	ldr	r3, [pc, #84]	; (2828 <m2m_wifi_connect_sc+0x470>)
    27d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    27d4:	2397      	movs	r3, #151	; 0x97
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	22f4      	movs	r2, #244	; 0xf4
    27da:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    27dc:	e010      	b.n	2800 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    27de:	2397      	movs	r3, #151	; 0x97
    27e0:	18fc      	adds	r4, r7, r3
    27e2:	2314      	movs	r3, #20
    27e4:	18fa      	adds	r2, r7, r3
    27e6:	2300      	movs	r3, #0
    27e8:	9302      	str	r3, [sp, #8]
    27ea:	2300      	movs	r3, #0
    27ec:	9301      	str	r3, [sp, #4]
    27ee:	2300      	movs	r3, #0
    27f0:	9300      	str	r3, [sp, #0]
    27f2:	236c      	movs	r3, #108	; 0x6c
    27f4:	2128      	movs	r1, #40	; 0x28
    27f6:	2001      	movs	r0, #1
    27f8:	4d0c      	ldr	r5, [pc, #48]	; (282c <m2m_wifi_connect_sc+0x474>)
    27fa:	47a8      	blx	r5
    27fc:	0003      	movs	r3, r0
    27fe:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2800:	2397      	movs	r3, #151	; 0x97
    2802:	18fb      	adds	r3, r7, r3
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	b25b      	sxtb	r3, r3
}
    2808:	0018      	movs	r0, r3
    280a:	46bd      	mov	sp, r7
    280c:	b026      	add	sp, #152	; 0x98
    280e:	bdb0      	pop	{r4, r5, r7, pc}
    2810:	00000271 	.word	0x00000271
    2814:	0001d864 	.word	0x0001d864
    2818:	0001d4c0 	.word	0x0001d4c0
    281c:	0001bc4d 	.word	0x0001bc4d
    2820:	0001d788 	.word	0x0001d788
    2824:	0001bd69 	.word	0x0001bd69
    2828:	0001bc81 	.word	0x0001bc81
    282c:	00000dc1 	.word	0x00000dc1

00002830 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    2830:	b580      	push	{r7, lr}
    2832:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    2834:	2300      	movs	r3, #0
}
    2836:	0018      	movs	r0, r3
    2838:	46bd      	mov	sp, r7
    283a:	bd80      	pop	{r7, pc}

0000283c <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
    283c:	b590      	push	{r4, r7, lr}
    283e:	b085      	sub	sp, #20
    2840:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    2842:	2300      	movs	r3, #0
    2844:	9302      	str	r3, [sp, #8]
    2846:	2300      	movs	r3, #0
    2848:	9301      	str	r3, [sp, #4]
    284a:	2300      	movs	r3, #0
    284c:	9300      	str	r3, [sp, #0]
    284e:	2300      	movs	r3, #0
    2850:	2200      	movs	r2, #0
    2852:	211a      	movs	r1, #26
    2854:	2001      	movs	r0, #1
    2856:	4c03      	ldr	r4, [pc, #12]	; (2864 <m2m_wifi_get_sytem_time+0x28>)
    2858:	47a0      	blx	r4
    285a:	0003      	movs	r3, r0
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b001      	add	sp, #4
    2862:	bd90      	pop	{r4, r7, pc}
    2864:	00000dc1 	.word	0x00000dc1

00002868 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2868:	b590      	push	{r4, r7, lr}
    286a:	b087      	sub	sp, #28
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2870:	2317      	movs	r3, #23
    2872:	18fb      	adds	r3, r7, r3
    2874:	2200      	movs	r2, #0
    2876:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    287c:	693b      	ldr	r3, [r7, #16]
    287e:	2280      	movs	r2, #128	; 0x80
    2880:	0052      	lsls	r2, r2, #1
    2882:	4313      	orrs	r3, r2
    2884:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2886:	693a      	ldr	r2, [r7, #16]
    2888:	23a5      	movs	r3, #165	; 0xa5
    288a:	015b      	lsls	r3, r3, #5
    288c:	0011      	movs	r1, r2
    288e:	0018      	movs	r0, r3
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <chip_apply_conf+0x74>)
    2892:	4798      	blx	r3
		if(val32 != 0) {		
    2894:	693b      	ldr	r3, [r7, #16]
    2896:	2b00      	cmp	r3, #0
    2898:	d018      	beq.n	28cc <chip_apply_conf+0x64>
			uint32 reg = 0;
    289a:	2300      	movs	r3, #0
    289c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    289e:	2317      	movs	r3, #23
    28a0:	18fc      	adds	r4, r7, r3
    28a2:	230c      	movs	r3, #12
    28a4:	18fa      	adds	r2, r7, r3
    28a6:	23a5      	movs	r3, #165	; 0xa5
    28a8:	015b      	lsls	r3, r3, #5
    28aa:	0011      	movs	r1, r2
    28ac:	0018      	movs	r0, r3
    28ae:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <chip_apply_conf+0x78>)
    28b0:	4798      	blx	r3
    28b2:	0003      	movs	r3, r0
    28b4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    28b6:	2317      	movs	r3, #23
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	b25b      	sxtb	r3, r3
    28be:	2b00      	cmp	r3, #0
    28c0:	d1e1      	bne.n	2886 <chip_apply_conf+0x1e>
				if(reg == val32)
    28c2:	68fa      	ldr	r2, [r7, #12]
    28c4:	693b      	ldr	r3, [r7, #16]
    28c6:	429a      	cmp	r2, r3
    28c8:	d002      	beq.n	28d0 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    28ca:	e7dc      	b.n	2886 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    28cc:	46c0      	nop			; (mov r8, r8)
    28ce:	e000      	b.n	28d2 <chip_apply_conf+0x6a>
					break;
    28d0:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    28d2:	2300      	movs	r3, #0
}
    28d4:	0018      	movs	r0, r3
    28d6:	46bd      	mov	sp, r7
    28d8:	b007      	add	sp, #28
    28da:	bd90      	pop	{r4, r7, pc}
    28dc:	000030b9 	.word	0x000030b9
    28e0:	00003095 	.word	0x00003095

000028e4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    28e4:	b590      	push	{r4, r7, lr}
    28e6:	b083      	sub	sp, #12
    28e8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    28ea:	2300      	movs	r3, #0
    28ec:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    28ee:	1dfb      	adds	r3, r7, #7
    28f0:	2200      	movs	r2, #0
    28f2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    28f4:	1dfc      	adds	r4, r7, #7
    28f6:	003b      	movs	r3, r7
    28f8:	4a24      	ldr	r2, [pc, #144]	; (298c <enable_interrupts+0xa8>)
    28fa:	0019      	movs	r1, r3
    28fc:	0010      	movs	r0, r2
    28fe:	4b24      	ldr	r3, [pc, #144]	; (2990 <enable_interrupts+0xac>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
    2904:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2906:	1dfb      	adds	r3, r7, #7
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	b25b      	sxtb	r3, r3
    290c:	2b00      	cmp	r3, #0
    290e:	d131      	bne.n	2974 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    2910:	683b      	ldr	r3, [r7, #0]
    2912:	2280      	movs	r2, #128	; 0x80
    2914:	0052      	lsls	r2, r2, #1
    2916:	4313      	orrs	r3, r2
    2918:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    291a:	683b      	ldr	r3, [r7, #0]
    291c:	1dfc      	adds	r4, r7, #7
    291e:	4a1b      	ldr	r2, [pc, #108]	; (298c <enable_interrupts+0xa8>)
    2920:	0019      	movs	r1, r3
    2922:	0010      	movs	r0, r2
    2924:	4b1b      	ldr	r3, [pc, #108]	; (2994 <enable_interrupts+0xb0>)
    2926:	4798      	blx	r3
    2928:	0003      	movs	r3, r0
    292a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    292c:	1dfb      	adds	r3, r7, #7
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	b25b      	sxtb	r3, r3
    2932:	2b00      	cmp	r3, #0
    2934:	d120      	bne.n	2978 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2936:	1dfc      	adds	r4, r7, #7
    2938:	003a      	movs	r2, r7
    293a:	23d0      	movs	r3, #208	; 0xd0
    293c:	015b      	lsls	r3, r3, #5
    293e:	0011      	movs	r1, r2
    2940:	0018      	movs	r0, r3
    2942:	4b13      	ldr	r3, [pc, #76]	; (2990 <enable_interrupts+0xac>)
    2944:	4798      	blx	r3
    2946:	0003      	movs	r3, r0
    2948:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    294a:	1dfb      	adds	r3, r7, #7
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	b25b      	sxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d113      	bne.n	297c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	0252      	lsls	r2, r2, #9
    295a:	4313      	orrs	r3, r2
    295c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    295e:	683a      	ldr	r2, [r7, #0]
    2960:	1dfc      	adds	r4, r7, #7
    2962:	23d0      	movs	r3, #208	; 0xd0
    2964:	015b      	lsls	r3, r3, #5
    2966:	0011      	movs	r1, r2
    2968:	0018      	movs	r0, r3
    296a:	4b0a      	ldr	r3, [pc, #40]	; (2994 <enable_interrupts+0xb0>)
    296c:	4798      	blx	r3
    296e:	0003      	movs	r3, r0
    2970:	7023      	strb	r3, [r4, #0]
    2972:	e004      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2974:	46c0      	nop			; (mov r8, r8)
    2976:	e002      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	e000      	b.n	297e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    297c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    297e:	1dfb      	adds	r3, r7, #7
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	b25b      	sxtb	r3, r3
}
    2984:	0018      	movs	r0, r3
    2986:	46bd      	mov	sp, r7
    2988:	b003      	add	sp, #12
    298a:	bd90      	pop	{r4, r7, pc}
    298c:	00001408 	.word	0x00001408
    2990:	00003095 	.word	0x00003095
    2994:	000030b9 	.word	0x000030b9

00002998 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2998:	b580      	push	{r7, lr}
    299a:	b082      	sub	sp, #8
    299c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    299e:	4b32      	ldr	r3, [pc, #200]	; (2a68 <nmi_get_chipid+0xd0>)
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d159      	bne.n	2a5a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    29a6:	4a30      	ldr	r2, [pc, #192]	; (2a68 <nmi_get_chipid+0xd0>)
    29a8:	2380      	movs	r3, #128	; 0x80
    29aa:	015b      	lsls	r3, r3, #5
    29ac:	0011      	movs	r1, r2
    29ae:	0018      	movs	r0, r3
    29b0:	4b2e      	ldr	r3, [pc, #184]	; (2a6c <nmi_get_chipid+0xd4>)
    29b2:	4798      	blx	r3
    29b4:	1e03      	subs	r3, r0, #0
    29b6:	d004      	beq.n	29c2 <nmi_get_chipid+0x2a>
			chipid = 0;
    29b8:	4b2b      	ldr	r3, [pc, #172]	; (2a68 <nmi_get_chipid+0xd0>)
    29ba:	2200      	movs	r2, #0
    29bc:	601a      	str	r2, [r3, #0]
			return 0;
    29be:	2300      	movs	r3, #0
    29c0:	e04d      	b.n	2a5e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    29c2:	1d3b      	adds	r3, r7, #4
    29c4:	4a2a      	ldr	r2, [pc, #168]	; (2a70 <nmi_get_chipid+0xd8>)
    29c6:	0019      	movs	r1, r3
    29c8:	0010      	movs	r0, r2
    29ca:	4b28      	ldr	r3, [pc, #160]	; (2a6c <nmi_get_chipid+0xd4>)
    29cc:	4798      	blx	r3
    29ce:	1e03      	subs	r3, r0, #0
    29d0:	d004      	beq.n	29dc <nmi_get_chipid+0x44>
			chipid = 0;
    29d2:	4b25      	ldr	r3, [pc, #148]	; (2a68 <nmi_get_chipid+0xd0>)
    29d4:	2200      	movs	r2, #0
    29d6:	601a      	str	r2, [r3, #0]
			return 0;
    29d8:	2300      	movs	r3, #0
    29da:	e040      	b.n	2a5e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    29dc:	4b22      	ldr	r3, [pc, #136]	; (2a68 <nmi_get_chipid+0xd0>)
    29de:	681b      	ldr	r3, [r3, #0]
    29e0:	4a24      	ldr	r2, [pc, #144]	; (2a74 <nmi_get_chipid+0xdc>)
    29e2:	4293      	cmp	r3, r2
    29e4:	d106      	bne.n	29f4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	2b01      	cmp	r3, #1
    29ea:	d029      	beq.n	2a40 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    29ec:	4b1e      	ldr	r3, [pc, #120]	; (2a68 <nmi_get_chipid+0xd0>)
    29ee:	4a22      	ldr	r2, [pc, #136]	; (2a78 <nmi_get_chipid+0xe0>)
    29f0:	601a      	str	r2, [r3, #0]
    29f2:	e025      	b.n	2a40 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    29f4:	4b1c      	ldr	r3, [pc, #112]	; (2a68 <nmi_get_chipid+0xd0>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	4a20      	ldr	r2, [pc, #128]	; (2a7c <nmi_get_chipid+0xe4>)
    29fa:	4293      	cmp	r3, r2
    29fc:	d10d      	bne.n	2a1a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2b03      	cmp	r3, #3
    2a02:	d01d      	beq.n	2a40 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	2b04      	cmp	r3, #4
    2a08:	d103      	bne.n	2a12 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    2a0a:	4b17      	ldr	r3, [pc, #92]	; (2a68 <nmi_get_chipid+0xd0>)
    2a0c:	4a1c      	ldr	r2, [pc, #112]	; (2a80 <nmi_get_chipid+0xe8>)
    2a0e:	601a      	str	r2, [r3, #0]
    2a10:	e016      	b.n	2a40 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    2a12:	4b15      	ldr	r3, [pc, #84]	; (2a68 <nmi_get_chipid+0xd0>)
    2a14:	4a1b      	ldr	r2, [pc, #108]	; (2a84 <nmi_get_chipid+0xec>)
    2a16:	601a      	str	r2, [r3, #0]
    2a18:	e012      	b.n	2a40 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    2a1a:	4b13      	ldr	r3, [pc, #76]	; (2a68 <nmi_get_chipid+0xd0>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	4a1a      	ldr	r2, [pc, #104]	; (2a88 <nmi_get_chipid+0xf0>)
    2a20:	4293      	cmp	r3, r2
    2a22:	d10d      	bne.n	2a40 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2a24:	4a10      	ldr	r2, [pc, #64]	; (2a68 <nmi_get_chipid+0xd0>)
    2a26:	23ec      	movs	r3, #236	; 0xec
    2a28:	039b      	lsls	r3, r3, #14
    2a2a:	0011      	movs	r1, r2
    2a2c:	0018      	movs	r0, r3
    2a2e:	4b0f      	ldr	r3, [pc, #60]	; (2a6c <nmi_get_chipid+0xd4>)
    2a30:	4798      	blx	r3
    2a32:	1e03      	subs	r3, r0, #0
    2a34:	d004      	beq.n	2a40 <nmi_get_chipid+0xa8>
			chipid = 0;
    2a36:	4b0c      	ldr	r3, [pc, #48]	; (2a68 <nmi_get_chipid+0xd0>)
    2a38:	2200      	movs	r2, #0
    2a3a:	601a      	str	r2, [r3, #0]
			return 0;
    2a3c:	2300      	movs	r3, #0
    2a3e:	e00e      	b.n	2a5e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    2a40:	4b09      	ldr	r3, [pc, #36]	; (2a68 <nmi_get_chipid+0xd0>)
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	4a11      	ldr	r2, [pc, #68]	; (2a8c <nmi_get_chipid+0xf4>)
    2a46:	401a      	ands	r2, r3
    2a48:	4b07      	ldr	r3, [pc, #28]	; (2a68 <nmi_get_chipid+0xd0>)
    2a4a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2a4c:	4b06      	ldr	r3, [pc, #24]	; (2a68 <nmi_get_chipid+0xd0>)
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	22a0      	movs	r2, #160	; 0xa0
    2a52:	02d2      	lsls	r2, r2, #11
    2a54:	431a      	orrs	r2, r3
    2a56:	4b04      	ldr	r3, [pc, #16]	; (2a68 <nmi_get_chipid+0xd0>)
    2a58:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2a5a:	4b03      	ldr	r3, [pc, #12]	; (2a68 <nmi_get_chipid+0xd0>)
    2a5c:	681b      	ldr	r3, [r3, #0]
}
    2a5e:	0018      	movs	r0, r3
    2a60:	46bd      	mov	sp, r7
    2a62:	b002      	add	sp, #8
    2a64:	bd80      	pop	{r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	200006d0 	.word	0x200006d0
    2a6c:	00003095 	.word	0x00003095
    2a70:	000013f4 	.word	0x000013f4
    2a74:	001002a0 	.word	0x001002a0
    2a78:	001002a1 	.word	0x001002a1
    2a7c:	001002b0 	.word	0x001002b0
    2a80:	001002b1 	.word	0x001002b1
    2a84:	001002b2 	.word	0x001002b2
    2a88:	001000f0 	.word	0x001000f0
    2a8c:	fff0ffff 	.word	0xfff0ffff

00002a90 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2a90:	b590      	push	{r4, r7, lr}
    2a92:	b083      	sub	sp, #12
    2a94:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2a96:	1dfb      	adds	r3, r7, #7
    2a98:	2200      	movs	r2, #0
    2a9a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2a9c:	1dfc      	adds	r4, r7, #7
    2a9e:	003b      	movs	r3, r7
    2aa0:	0019      	movs	r1, r3
    2aa2:	2010      	movs	r0, #16
    2aa4:	4b2e      	ldr	r3, [pc, #184]	; (2b60 <chip_sleep+0xd0>)
    2aa6:	4798      	blx	r3
    2aa8:	0003      	movs	r3, r0
    2aaa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2aac:	1dfb      	adds	r3, r7, #7
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	b25b      	sxtb	r3, r3
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d145      	bne.n	2b42 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    2ab6:	683b      	ldr	r3, [r7, #0]
    2ab8:	2201      	movs	r2, #1
    2aba:	4013      	ands	r3, r2
    2abc:	d000      	beq.n	2ac0 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2abe:	e7ed      	b.n	2a9c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2ac0:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2ac2:	1dfc      	adds	r4, r7, #7
    2ac4:	003b      	movs	r3, r7
    2ac6:	0019      	movs	r1, r3
    2ac8:	2001      	movs	r0, #1
    2aca:	4b25      	ldr	r3, [pc, #148]	; (2b60 <chip_sleep+0xd0>)
    2acc:	4798      	blx	r3
    2ace:	0003      	movs	r3, r0
    2ad0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2ad2:	1dfb      	adds	r3, r7, #7
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	b25b      	sxtb	r3, r3
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d134      	bne.n	2b46 <chip_sleep+0xb6>
	if(reg & NBIT1)
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	2202      	movs	r2, #2
    2ae0:	4013      	ands	r3, r2
    2ae2:	d010      	beq.n	2b06 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    2ae4:	683b      	ldr	r3, [r7, #0]
    2ae6:	2202      	movs	r2, #2
    2ae8:	4393      	bics	r3, r2
    2aea:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	1dfc      	adds	r4, r7, #7
    2af0:	0019      	movs	r1, r3
    2af2:	2001      	movs	r0, #1
    2af4:	4b1b      	ldr	r3, [pc, #108]	; (2b64 <chip_sleep+0xd4>)
    2af6:	4798      	blx	r3
    2af8:	0003      	movs	r3, r0
    2afa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    2afc:	1dfb      	adds	r3, r7, #7
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	b25b      	sxtb	r3, r3
    2b02:	2b00      	cmp	r3, #0
    2b04:	d121      	bne.n	2b4a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2b06:	1dfc      	adds	r4, r7, #7
    2b08:	003b      	movs	r3, r7
    2b0a:	0019      	movs	r1, r3
    2b0c:	200b      	movs	r0, #11
    2b0e:	4b14      	ldr	r3, [pc, #80]	; (2b60 <chip_sleep+0xd0>)
    2b10:	4798      	blx	r3
    2b12:	0003      	movs	r3, r0
    2b14:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2b16:	1dfb      	adds	r3, r7, #7
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	b25b      	sxtb	r3, r3
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d116      	bne.n	2b4e <chip_sleep+0xbe>
	if(reg & NBIT0)
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	2201      	movs	r2, #1
    2b24:	4013      	ands	r3, r2
    2b26:	d013      	beq.n	2b50 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    2b28:	683b      	ldr	r3, [r7, #0]
    2b2a:	2201      	movs	r2, #1
    2b2c:	4393      	bics	r3, r2
    2b2e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2b30:	683b      	ldr	r3, [r7, #0]
    2b32:	1dfc      	adds	r4, r7, #7
    2b34:	0019      	movs	r1, r3
    2b36:	200b      	movs	r0, #11
    2b38:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <chip_sleep+0xd4>)
    2b3a:	4798      	blx	r3
    2b3c:	0003      	movs	r3, r0
    2b3e:	7023      	strb	r3, [r4, #0]
    2b40:	e006      	b.n	2b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	e004      	b.n	2b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	e002      	b.n	2b50 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	e000      	b.n	2b50 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    2b4e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    2b50:	1dfb      	adds	r3, r7, #7
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	b25b      	sxtb	r3, r3
}
    2b56:	0018      	movs	r0, r3
    2b58:	46bd      	mov	sp, r7
    2b5a:	b003      	add	sp, #12
    2b5c:	bd90      	pop	{r4, r7, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	00003095 	.word	0x00003095
    2b64:	000030b9 	.word	0x000030b9

00002b68 <chip_wake>:
sint8 chip_wake(void)
{
    2b68:	b590      	push	{r4, r7, lr}
    2b6a:	b085      	sub	sp, #20
    2b6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2b6e:	230f      	movs	r3, #15
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2b76:	2300      	movs	r3, #0
    2b78:	607b      	str	r3, [r7, #4]
    2b7a:	2300      	movs	r3, #0
    2b7c:	603b      	str	r3, [r7, #0]
    2b7e:	2300      	movs	r3, #0
    2b80:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2b82:	230f      	movs	r3, #15
    2b84:	18fc      	adds	r4, r7, r3
    2b86:	1d3b      	adds	r3, r7, #4
    2b88:	0019      	movs	r1, r3
    2b8a:	200b      	movs	r0, #11
    2b8c:	4b4c      	ldr	r3, [pc, #304]	; (2cc0 <chip_wake+0x158>)
    2b8e:	4798      	blx	r3
    2b90:	0003      	movs	r3, r0
    2b92:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2b94:	230f      	movs	r3, #15
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	b25b      	sxtb	r3, r3
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d000      	beq.n	2ba2 <chip_wake+0x3a>
    2ba0:	e07f      	b.n	2ca2 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	2201      	movs	r2, #1
    2ba6:	4013      	ands	r3, r2
    2ba8:	d110      	bne.n	2bcc <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	2201      	movs	r2, #1
    2bae:	4313      	orrs	r3, r2
    2bb0:	220f      	movs	r2, #15
    2bb2:	18bc      	adds	r4, r7, r2
    2bb4:	0019      	movs	r1, r3
    2bb6:	200b      	movs	r0, #11
    2bb8:	4b42      	ldr	r3, [pc, #264]	; (2cc4 <chip_wake+0x15c>)
    2bba:	4798      	blx	r3
    2bbc:	0003      	movs	r3, r0
    2bbe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2bc0:	230f      	movs	r3, #15
    2bc2:	18fb      	adds	r3, r7, r3
    2bc4:	781b      	ldrb	r3, [r3, #0]
    2bc6:	b25b      	sxtb	r3, r3
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d16c      	bne.n	2ca6 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2bcc:	230f      	movs	r3, #15
    2bce:	18fc      	adds	r4, r7, r3
    2bd0:	1d3b      	adds	r3, r7, #4
    2bd2:	0019      	movs	r1, r3
    2bd4:	2001      	movs	r0, #1
    2bd6:	4b3a      	ldr	r3, [pc, #232]	; (2cc0 <chip_wake+0x158>)
    2bd8:	4798      	blx	r3
    2bda:	0003      	movs	r3, r0
    2bdc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2bde:	230f      	movs	r3, #15
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	b25b      	sxtb	r3, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	d15f      	bne.n	2caa <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	2202      	movs	r2, #2
    2bee:	4013      	ands	r3, r2
    2bf0:	d110      	bne.n	2c14 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	2202      	movs	r2, #2
    2bf6:	4313      	orrs	r3, r2
    2bf8:	220f      	movs	r2, #15
    2bfa:	18bc      	adds	r4, r7, r2
    2bfc:	0019      	movs	r1, r3
    2bfe:	2001      	movs	r0, #1
    2c00:	4b30      	ldr	r3, [pc, #192]	; (2cc4 <chip_wake+0x15c>)
    2c02:	4798      	blx	r3
    2c04:	0003      	movs	r3, r0
    2c06:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2c08:	230f      	movs	r3, #15
    2c0a:	18fb      	adds	r3, r7, r3
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	b25b      	sxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d14c      	bne.n	2cae <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2c14:	230f      	movs	r3, #15
    2c16:	18fc      	adds	r4, r7, r3
    2c18:	003b      	movs	r3, r7
    2c1a:	0019      	movs	r1, r3
    2c1c:	200f      	movs	r0, #15
    2c1e:	4b28      	ldr	r3, [pc, #160]	; (2cc0 <chip_wake+0x158>)
    2c20:	4798      	blx	r3
    2c22:	0003      	movs	r3, r0
    2c24:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    2c26:	230f      	movs	r3, #15
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	b25b      	sxtb	r3, r3
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d013      	beq.n	2c5a <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    2c32:	23aa      	movs	r3, #170	; 0xaa
    2c34:	005a      	lsls	r2, r3, #1
    2c36:	4924      	ldr	r1, [pc, #144]	; (2cc8 <chip_wake+0x160>)
    2c38:	4b24      	ldr	r3, [pc, #144]	; (2ccc <chip_wake+0x164>)
    2c3a:	0018      	movs	r0, r3
    2c3c:	4b24      	ldr	r3, [pc, #144]	; (2cd0 <chip_wake+0x168>)
    2c3e:	4798      	blx	r3
    2c40:	230f      	movs	r3, #15
    2c42:	18fb      	adds	r3, r7, r3
    2c44:	2100      	movs	r1, #0
    2c46:	5659      	ldrsb	r1, [r3, r1]
    2c48:	683a      	ldr	r2, [r7, #0]
    2c4a:	4b22      	ldr	r3, [pc, #136]	; (2cd4 <chip_wake+0x16c>)
    2c4c:	0018      	movs	r0, r3
    2c4e:	4b20      	ldr	r3, [pc, #128]	; (2cd0 <chip_wake+0x168>)
    2c50:	4798      	blx	r3
    2c52:	200d      	movs	r0, #13
    2c54:	4b20      	ldr	r3, [pc, #128]	; (2cd8 <chip_wake+0x170>)
    2c56:	4798      	blx	r3
			goto _WAKE_EXIT;
    2c58:	e02a      	b.n	2cb0 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    2c5a:	683b      	ldr	r3, [r7, #0]
    2c5c:	2204      	movs	r2, #4
    2c5e:	4013      	ands	r3, r2
    2c60:	d11b      	bne.n	2c9a <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    2c62:	2002      	movs	r0, #2
    2c64:	4b1d      	ldr	r3, [pc, #116]	; (2cdc <chip_wake+0x174>)
    2c66:	4798      	blx	r3
		trials++;
    2c68:	68bb      	ldr	r3, [r7, #8]
    2c6a:	3301      	adds	r3, #1
    2c6c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2c6e:	68bb      	ldr	r3, [r7, #8]
    2c70:	2b04      	cmp	r3, #4
    2c72:	d9cf      	bls.n	2c14 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2c74:	23af      	movs	r3, #175	; 0xaf
    2c76:	005a      	lsls	r2, r3, #1
    2c78:	4913      	ldr	r1, [pc, #76]	; (2cc8 <chip_wake+0x160>)
    2c7a:	4b14      	ldr	r3, [pc, #80]	; (2ccc <chip_wake+0x164>)
    2c7c:	0018      	movs	r0, r3
    2c7e:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <chip_wake+0x168>)
    2c80:	4798      	blx	r3
    2c82:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <chip_wake+0x178>)
    2c84:	0018      	movs	r0, r3
    2c86:	4b17      	ldr	r3, [pc, #92]	; (2ce4 <chip_wake+0x17c>)
    2c88:	4798      	blx	r3
    2c8a:	200d      	movs	r0, #13
    2c8c:	4b12      	ldr	r3, [pc, #72]	; (2cd8 <chip_wake+0x170>)
    2c8e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2c90:	230f      	movs	r3, #15
    2c92:	18fb      	adds	r3, r7, r3
    2c94:	22fc      	movs	r2, #252	; 0xfc
    2c96:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2c98:	e00a      	b.n	2cb0 <chip_wake+0x148>
			break;
    2c9a:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2c9c:	4b12      	ldr	r3, [pc, #72]	; (2ce8 <chip_wake+0x180>)
    2c9e:	4798      	blx	r3
    2ca0:	e006      	b.n	2cb0 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	e004      	b.n	2cb0 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	e002      	b.n	2cb0 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	e000      	b.n	2cb0 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2cae:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2cb0:	230f      	movs	r3, #15
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	b25b      	sxtb	r3, r3
}
    2cb8:	0018      	movs	r0, r3
    2cba:	46bd      	mov	sp, r7
    2cbc:	b005      	add	sp, #20
    2cbe:	bd90      	pop	{r4, r7, pc}
    2cc0:	00003095 	.word	0x00003095
    2cc4:	000030b9 	.word	0x000030b9
    2cc8:	0001d8fc 	.word	0x0001d8fc
    2ccc:	0001d878 	.word	0x0001d878
    2cd0:	0001bc4d 	.word	0x0001bc4d
    2cd4:	0001d88c 	.word	0x0001d88c
    2cd8:	0001bc81 	.word	0x0001bc81
    2cdc:	00000321 	.word	0x00000321
    2ce0:	0001d8a4 	.word	0x0001d8a4
    2ce4:	0001bd69 	.word	0x0001bd69
    2ce8:	00003055 	.word	0x00003055

00002cec <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2cec:	b580      	push	{r7, lr}
    2cee:	b088      	sub	sp, #32
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	0002      	movs	r2, r0
    2cf4:	1dfb      	adds	r3, r7, #7
    2cf6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2cf8:	2313      	movs	r3, #19
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	2200      	movs	r2, #0
    2cfe:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2d00:	2300      	movs	r3, #0
    2d02:	61fb      	str	r3, [r7, #28]
    2d04:	2300      	movs	r3, #0
    2d06:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    2d08:	2300      	movs	r3, #0
    2d0a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    2d0c:	4b4a      	ldr	r3, [pc, #296]	; (2e38 <wait_for_bootrom+0x14c>)
    2d0e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    2d10:	2300      	movs	r3, #0
    2d12:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2d14:	4b49      	ldr	r3, [pc, #292]	; (2e3c <wait_for_bootrom+0x150>)
    2d16:	0018      	movs	r0, r3
    2d18:	4b49      	ldr	r3, [pc, #292]	; (2e40 <wait_for_bootrom+0x154>)
    2d1a:	4798      	blx	r3
    2d1c:	0003      	movs	r3, r0
    2d1e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    2d20:	69fb      	ldr	r3, [r7, #28]
    2d22:	2b00      	cmp	r3, #0
    2d24:	db03      	blt.n	2d2e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2d26:	2001      	movs	r0, #1
    2d28:	4b46      	ldr	r3, [pc, #280]	; (2e44 <wait_for_bootrom+0x158>)
    2d2a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2d2c:	e7f2      	b.n	2d14 <wait_for_bootrom+0x28>
			break;
    2d2e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2d30:	4b45      	ldr	r3, [pc, #276]	; (2e48 <wait_for_bootrom+0x15c>)
    2d32:	0018      	movs	r0, r3
    2d34:	4b42      	ldr	r3, [pc, #264]	; (2e40 <wait_for_bootrom+0x154>)
    2d36:	4798      	blx	r3
    2d38:	0003      	movs	r3, r0
    2d3a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    2d3c:	69fb      	ldr	r3, [r7, #28]
    2d3e:	2201      	movs	r2, #1
    2d40:	4013      	ands	r3, r2
    2d42:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2d44:	69fb      	ldr	r3, [r7, #28]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d112      	bne.n	2d70 <wait_for_bootrom+0x84>
	{
		reg = 0;
    2d4a:	2300      	movs	r3, #0
    2d4c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    2d4e:	e00b      	b.n	2d68 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    2d50:	2001      	movs	r0, #1
    2d52:	4b3c      	ldr	r3, [pc, #240]	; (2e44 <wait_for_bootrom+0x158>)
    2d54:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    2d56:	4b3d      	ldr	r3, [pc, #244]	; (2e4c <wait_for_bootrom+0x160>)
    2d58:	0018      	movs	r0, r3
    2d5a:	4b39      	ldr	r3, [pc, #228]	; (2e40 <wait_for_bootrom+0x154>)
    2d5c:	4798      	blx	r3
    2d5e:	0003      	movs	r3, r0
    2d60:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    2d62:	69bb      	ldr	r3, [r7, #24]
    2d64:	3301      	adds	r3, #1
    2d66:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    2d68:	69fb      	ldr	r3, [r7, #28]
    2d6a:	4a39      	ldr	r2, [pc, #228]	; (2e50 <wait_for_bootrom+0x164>)
    2d6c:	4293      	cmp	r3, r2
    2d6e:	d1ef      	bne.n	2d50 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2d70:	1dfb      	adds	r3, r7, #7
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	2b02      	cmp	r3, #2
    2d76:	d10d      	bne.n	2d94 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2d78:	4a36      	ldr	r2, [pc, #216]	; (2e54 <wait_for_bootrom+0x168>)
    2d7a:	4b37      	ldr	r3, [pc, #220]	; (2e58 <wait_for_bootrom+0x16c>)
    2d7c:	0011      	movs	r1, r2
    2d7e:	0018      	movs	r0, r3
    2d80:	4b36      	ldr	r3, [pc, #216]	; (2e5c <wait_for_bootrom+0x170>)
    2d82:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2d84:	2380      	movs	r3, #128	; 0x80
    2d86:	035b      	lsls	r3, r3, #13
    2d88:	4a35      	ldr	r2, [pc, #212]	; (2e60 <wait_for_bootrom+0x174>)
    2d8a:	0019      	movs	r1, r3
    2d8c:	0010      	movs	r0, r2
    2d8e:	4b33      	ldr	r3, [pc, #204]	; (2e5c <wait_for_bootrom+0x170>)
    2d90:	4798      	blx	r3
    2d92:	e022      	b.n	2dda <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2d94:	1dfb      	adds	r3, r7, #7
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	2b03      	cmp	r3, #3
    2d9a:	d10b      	bne.n	2db4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2d9c:	4a2d      	ldr	r2, [pc, #180]	; (2e54 <wait_for_bootrom+0x168>)
    2d9e:	4b2e      	ldr	r3, [pc, #184]	; (2e58 <wait_for_bootrom+0x16c>)
    2da0:	0011      	movs	r1, r2
    2da2:	0018      	movs	r0, r3
    2da4:	4b2d      	ldr	r3, [pc, #180]	; (2e5c <wait_for_bootrom+0x170>)
    2da6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2da8:	4b2d      	ldr	r3, [pc, #180]	; (2e60 <wait_for_bootrom+0x174>)
    2daa:	2100      	movs	r1, #0
    2dac:	0018      	movs	r0, r3
    2dae:	4b2b      	ldr	r3, [pc, #172]	; (2e5c <wait_for_bootrom+0x170>)
    2db0:	4798      	blx	r3
    2db2:	e012      	b.n	2dda <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2db4:	1dfb      	adds	r3, r7, #7
    2db6:	781b      	ldrb	r3, [r3, #0]
    2db8:	2b04      	cmp	r3, #4
    2dba:	d108      	bne.n	2dce <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2dbc:	2380      	movs	r3, #128	; 0x80
    2dbe:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2dc0:	68fb      	ldr	r3, [r7, #12]
    2dc2:	4a27      	ldr	r2, [pc, #156]	; (2e60 <wait_for_bootrom+0x174>)
    2dc4:	0019      	movs	r1, r3
    2dc6:	0010      	movs	r0, r2
    2dc8:	4b24      	ldr	r3, [pc, #144]	; (2e5c <wait_for_bootrom+0x170>)
    2dca:	4798      	blx	r3
    2dcc:	e005      	b.n	2dda <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	4a23      	ldr	r2, [pc, #140]	; (2e60 <wait_for_bootrom+0x174>)
    2dd2:	0019      	movs	r1, r3
    2dd4:	0010      	movs	r0, r2
    2dd6:	4b21      	ldr	r3, [pc, #132]	; (2e5c <wait_for_bootrom+0x170>)
    2dd8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2dda:	4b22      	ldr	r3, [pc, #136]	; (2e64 <wait_for_bootrom+0x178>)
    2ddc:	4798      	blx	r3
    2dde:	0003      	movs	r3, r0
    2de0:	051b      	lsls	r3, r3, #20
    2de2:	0d1b      	lsrs	r3, r3, #20
    2de4:	4a20      	ldr	r2, [pc, #128]	; (2e68 <wait_for_bootrom+0x17c>)
    2de6:	4293      	cmp	r3, r2
    2de8:	d906      	bls.n	2df8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2dea:	697b      	ldr	r3, [r7, #20]
    2dec:	2202      	movs	r2, #2
    2dee:	4313      	orrs	r3, r2
    2df0:	0018      	movs	r0, r3
    2df2:	4b1e      	ldr	r3, [pc, #120]	; (2e6c <wait_for_bootrom+0x180>)
    2df4:	4798      	blx	r3
    2df6:	e003      	b.n	2e00 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    2df8:	697b      	ldr	r3, [r7, #20]
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b1b      	ldr	r3, [pc, #108]	; (2e6c <wait_for_bootrom+0x180>)
    2dfe:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2e00:	4b1b      	ldr	r3, [pc, #108]	; (2e70 <wait_for_bootrom+0x184>)
    2e02:	0018      	movs	r0, r3
    2e04:	4b1b      	ldr	r3, [pc, #108]	; (2e74 <wait_for_bootrom+0x188>)
    2e06:	4798      	blx	r3
    2e08:	68fa      	ldr	r2, [r7, #12]
    2e0a:	4b1b      	ldr	r3, [pc, #108]	; (2e78 <wait_for_bootrom+0x18c>)
    2e0c:	0011      	movs	r1, r2
    2e0e:	0018      	movs	r0, r3
    2e10:	4b18      	ldr	r3, [pc, #96]	; (2e74 <wait_for_bootrom+0x188>)
    2e12:	4798      	blx	r3
    2e14:	200d      	movs	r0, #13
    2e16:	4b19      	ldr	r3, [pc, #100]	; (2e7c <wait_for_bootrom+0x190>)
    2e18:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2e1a:	4a19      	ldr	r2, [pc, #100]	; (2e80 <wait_for_bootrom+0x194>)
    2e1c:	4b0b      	ldr	r3, [pc, #44]	; (2e4c <wait_for_bootrom+0x160>)
    2e1e:	0011      	movs	r1, r2
    2e20:	0018      	movs	r0, r3
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <wait_for_bootrom+0x170>)
    2e24:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2e26:	2313      	movs	r3, #19
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	b25b      	sxtb	r3, r3
}
    2e2e:	0018      	movs	r0, r3
    2e30:	46bd      	mov	sp, r7
    2e32:	b008      	add	sp, #32
    2e34:	bd80      	pop	{r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	13541354 	.word	0x13541354
    2e3c:	00001014 	.word	0x00001014
    2e40:	00003075 	.word	0x00003075
    2e44:	00000321 	.word	0x00000321
    2e48:	000207bc 	.word	0x000207bc
    2e4c:	000c000c 	.word	0x000c000c
    2e50:	10add09e 	.word	0x10add09e
    2e54:	3c1cd57d 	.word	0x3c1cd57d
    2e58:	000207ac 	.word	0x000207ac
    2e5c:	000030b9 	.word	0x000030b9
    2e60:	0000108c 	.word	0x0000108c
    2e64:	00002999 	.word	0x00002999
    2e68:	0000039f 	.word	0x0000039f
    2e6c:	00002869 	.word	0x00002869
    2e70:	0001d8c0 	.word	0x0001d8c0
    2e74:	0001bc4d 	.word	0x0001bc4d
    2e78:	0001d8cc 	.word	0x0001d8cc
    2e7c:	0001bc81 	.word	0x0001bc81
    2e80:	ef522f61 	.word	0xef522f61

00002e84 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2e84:	b580      	push	{r7, lr}
    2e86:	b088      	sub	sp, #32
    2e88:	af00      	add	r7, sp, #0
    2e8a:	0002      	movs	r2, r0
    2e8c:	1dfb      	adds	r3, r7, #7
    2e8e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2e90:	231f      	movs	r3, #31
    2e92:	18fb      	adds	r3, r7, r3
    2e94:	2200      	movs	r2, #0
    2e96:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2e98:	2300      	movs	r3, #0
    2e9a:	61bb      	str	r3, [r7, #24]
    2e9c:	2300      	movs	r3, #0
    2e9e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2ea0:	2301      	movs	r3, #1
    2ea2:	425b      	negs	r3, r3
    2ea4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2ea6:	4b1d      	ldr	r3, [pc, #116]	; (2f1c <wait_for_firmware_start+0x98>)
    2ea8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2eaa:	4b1d      	ldr	r3, [pc, #116]	; (2f20 <wait_for_firmware_start+0x9c>)
    2eac:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2eae:	1dfb      	adds	r3, r7, #7
    2eb0:	781b      	ldrb	r3, [r3, #0]
    2eb2:	2b02      	cmp	r3, #2
    2eb4:	d003      	beq.n	2ebe <wait_for_firmware_start+0x3a>
    2eb6:	1dfb      	adds	r3, r7, #7
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b03      	cmp	r3, #3
    2ebc:	d119      	bne.n	2ef2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2ebe:	4b19      	ldr	r3, [pc, #100]	; (2f24 <wait_for_firmware_start+0xa0>)
    2ec0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2ec2:	4b19      	ldr	r3, [pc, #100]	; (2f28 <wait_for_firmware_start+0xa4>)
    2ec4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2ec6:	e014      	b.n	2ef2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2ec8:	2002      	movs	r0, #2
    2eca:	4b18      	ldr	r3, [pc, #96]	; (2f2c <wait_for_firmware_start+0xa8>)
    2ecc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2ece:	68fb      	ldr	r3, [r7, #12]
    2ed0:	0018      	movs	r0, r3
    2ed2:	4b17      	ldr	r3, [pc, #92]	; (2f30 <wait_for_firmware_start+0xac>)
    2ed4:	4798      	blx	r3
    2ed6:	0003      	movs	r3, r0
    2ed8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2eda:	697b      	ldr	r3, [r7, #20]
    2edc:	3301      	adds	r3, #1
    2ede:	617b      	str	r3, [r7, #20]
    2ee0:	697a      	ldr	r2, [r7, #20]
    2ee2:	693b      	ldr	r3, [r7, #16]
    2ee4:	429a      	cmp	r2, r3
    2ee6:	d304      	bcc.n	2ef2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2ee8:	231f      	movs	r3, #31
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	22fb      	movs	r2, #251	; 0xfb
    2eee:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2ef0:	e00c      	b.n	2f0c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2ef2:	68ba      	ldr	r2, [r7, #8]
    2ef4:	69bb      	ldr	r3, [r7, #24]
    2ef6:	429a      	cmp	r2, r3
    2ef8:	d1e6      	bne.n	2ec8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2efa:	68bb      	ldr	r3, [r7, #8]
    2efc:	4a08      	ldr	r2, [pc, #32]	; (2f20 <wait_for_firmware_start+0x9c>)
    2efe:	4293      	cmp	r3, r2
    2f00:	d104      	bne.n	2f0c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2f02:	4b06      	ldr	r3, [pc, #24]	; (2f1c <wait_for_firmware_start+0x98>)
    2f04:	2100      	movs	r1, #0
    2f06:	0018      	movs	r0, r3
    2f08:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <wait_for_firmware_start+0xb0>)
    2f0a:	4798      	blx	r3
	}
ERR:
	return ret;
    2f0c:	231f      	movs	r3, #31
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	b25b      	sxtb	r3, r3
}
    2f14:	0018      	movs	r0, r3
    2f16:	46bd      	mov	sp, r7
    2f18:	b008      	add	sp, #32
    2f1a:	bd80      	pop	{r7, pc}
    2f1c:	0000108c 	.word	0x0000108c
    2f20:	02532636 	.word	0x02532636
    2f24:	000207ac 	.word	0x000207ac
    2f28:	d75dc1c3 	.word	0xd75dc1c3
    2f2c:	00000321 	.word	0x00000321
    2f30:	00003075 	.word	0x00003075
    2f34:	000030b9 	.word	0x000030b9

00002f38 <chip_deinit>:

sint8 chip_deinit(void)
{
    2f38:	b590      	push	{r4, r7, lr}
    2f3a:	b083      	sub	sp, #12
    2f3c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2f3e:	2300      	movs	r3, #0
    2f40:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2f42:	1dfc      	adds	r4, r7, #7
    2f44:	003a      	movs	r2, r7
    2f46:	23a0      	movs	r3, #160	; 0xa0
    2f48:	015b      	lsls	r3, r3, #5
    2f4a:	0011      	movs	r1, r2
    2f4c:	0018      	movs	r0, r3
    2f4e:	4b1f      	ldr	r3, [pc, #124]	; (2fcc <chip_deinit+0x94>)
    2f50:	4798      	blx	r3
    2f52:	0003      	movs	r3, r0
    2f54:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2f56:	1dfb      	adds	r3, r7, #7
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25b      	sxtb	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d00d      	beq.n	2f7c <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2f60:	4a1b      	ldr	r2, [pc, #108]	; (2fd0 <chip_deinit+0x98>)
    2f62:	491c      	ldr	r1, [pc, #112]	; (2fd4 <chip_deinit+0x9c>)
    2f64:	4b1c      	ldr	r3, [pc, #112]	; (2fd8 <chip_deinit+0xa0>)
    2f66:	0018      	movs	r0, r3
    2f68:	4b1c      	ldr	r3, [pc, #112]	; (2fdc <chip_deinit+0xa4>)
    2f6a:	4798      	blx	r3
    2f6c:	4b1c      	ldr	r3, [pc, #112]	; (2fe0 <chip_deinit+0xa8>)
    2f6e:	0018      	movs	r0, r3
    2f70:	4b1c      	ldr	r3, [pc, #112]	; (2fe4 <chip_deinit+0xac>)
    2f72:	4798      	blx	r3
    2f74:	200d      	movs	r0, #13
    2f76:	4b1c      	ldr	r3, [pc, #112]	; (2fe8 <chip_deinit+0xb0>)
    2f78:	4798      	blx	r3
		goto ERR1;
    2f7a:	e020      	b.n	2fbe <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2f7c:	683b      	ldr	r3, [r7, #0]
    2f7e:	4a1b      	ldr	r2, [pc, #108]	; (2fec <chip_deinit+0xb4>)
    2f80:	4013      	ands	r3, r2
    2f82:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2f84:	683a      	ldr	r2, [r7, #0]
    2f86:	1dfc      	adds	r4, r7, #7
    2f88:	23a0      	movs	r3, #160	; 0xa0
    2f8a:	015b      	lsls	r3, r3, #5
    2f8c:	0011      	movs	r1, r2
    2f8e:	0018      	movs	r0, r3
    2f90:	4b17      	ldr	r3, [pc, #92]	; (2ff0 <chip_deinit+0xb8>)
    2f92:	4798      	blx	r3
    2f94:	0003      	movs	r3, r0
    2f96:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2f98:	1dfb      	adds	r3, r7, #7
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	b25b      	sxtb	r3, r3
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d00d      	beq.n	2fbe <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2fa2:	4a14      	ldr	r2, [pc, #80]	; (2ff4 <chip_deinit+0xbc>)
    2fa4:	490b      	ldr	r1, [pc, #44]	; (2fd4 <chip_deinit+0x9c>)
    2fa6:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <chip_deinit+0xa0>)
    2fa8:	0018      	movs	r0, r3
    2faa:	4b0c      	ldr	r3, [pc, #48]	; (2fdc <chip_deinit+0xa4>)
    2fac:	4798      	blx	r3
    2fae:	4b0c      	ldr	r3, [pc, #48]	; (2fe0 <chip_deinit+0xa8>)
    2fb0:	0018      	movs	r0, r3
    2fb2:	4b0c      	ldr	r3, [pc, #48]	; (2fe4 <chip_deinit+0xac>)
    2fb4:	4798      	blx	r3
    2fb6:	200d      	movs	r0, #13
    2fb8:	4b0b      	ldr	r3, [pc, #44]	; (2fe8 <chip_deinit+0xb0>)
    2fba:	4798      	blx	r3
		goto ERR1;
    2fbc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2fbe:	1dfb      	adds	r3, r7, #7
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	b25b      	sxtb	r3, r3
}
    2fc4:	0018      	movs	r0, r3
    2fc6:	46bd      	mov	sp, r7
    2fc8:	b003      	add	sp, #12
    2fca:	bd90      	pop	{r4, r7, pc}
    2fcc:	00003095 	.word	0x00003095
    2fd0:	00000205 	.word	0x00000205
    2fd4:	0001d908 	.word	0x0001d908
    2fd8:	0001d878 	.word	0x0001d878
    2fdc:	0001bc4d 	.word	0x0001bc4d
    2fe0:	0001d8e4 	.word	0x0001d8e4
    2fe4:	0001bd69 	.word	0x0001bd69
    2fe8:	0001bc81 	.word	0x0001bc81
    2fec:	fffffbff 	.word	0xfffffbff
    2ff0:	000030b9 	.word	0x000030b9
    2ff4:	0000020b 	.word	0x0000020b

00002ff8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2ff8:	b590      	push	{r4, r7, lr}
    2ffa:	b085      	sub	sp, #20
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3000:	230f      	movs	r3, #15
    3002:	18fb      	adds	r3, r7, r3
    3004:	2200      	movs	r2, #0
    3006:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    3008:	230f      	movs	r3, #15
    300a:	18fc      	adds	r4, r7, r3
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	0018      	movs	r0, r3
    3010:	4b05      	ldr	r3, [pc, #20]	; (3028 <nm_bus_iface_init+0x30>)
    3012:	4798      	blx	r3
    3014:	0003      	movs	r3, r0
    3016:	7023      	strb	r3, [r4, #0]
	return ret;
    3018:	230f      	movs	r3, #15
    301a:	18fb      	adds	r3, r7, r3
    301c:	781b      	ldrb	r3, [r3, #0]
    301e:	b25b      	sxtb	r3, r3
}
    3020:	0018      	movs	r0, r3
    3022:	46bd      	mov	sp, r7
    3024:	b005      	add	sp, #20
    3026:	bd90      	pop	{r4, r7, pc}
    3028:	00000959 	.word	0x00000959

0000302c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    302c:	b590      	push	{r4, r7, lr}
    302e:	b083      	sub	sp, #12
    3030:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3032:	1dfb      	adds	r3, r7, #7
    3034:	2200      	movs	r2, #0
    3036:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    3038:	1dfc      	adds	r4, r7, #7
    303a:	4b05      	ldr	r3, [pc, #20]	; (3050 <nm_bus_iface_deinit+0x24>)
    303c:	4798      	blx	r3
    303e:	0003      	movs	r3, r0
    3040:	7023      	strb	r3, [r4, #0]

	return ret;
    3042:	1dfb      	adds	r3, r7, #7
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	b25b      	sxtb	r3, r3
}
    3048:	0018      	movs	r0, r3
    304a:	46bd      	mov	sp, r7
    304c:	b003      	add	sp, #12
    304e:	bd90      	pop	{r4, r7, pc}
    3050:	00000ae1 	.word	0x00000ae1

00003054 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    3054:	b580      	push	{r7, lr}
    3056:	b082      	sub	sp, #8
    3058:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    305a:	1dfb      	adds	r3, r7, #7
    305c:	2200      	movs	r2, #0
    305e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    3060:	4b03      	ldr	r3, [pc, #12]	; (3070 <nm_bus_reset+0x1c>)
    3062:	4798      	blx	r3
    3064:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    3066:	0018      	movs	r0, r3
    3068:	46bd      	mov	sp, r7
    306a:	b002      	add	sp, #8
    306c:	bd80      	pop	{r7, pc}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	0000496d 	.word	0x0000496d

00003074 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    3074:	b580      	push	{r7, lr}
    3076:	b082      	sub	sp, #8
    3078:	af00      	add	r7, sp, #0
    307a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	0018      	movs	r0, r3
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <nm_read_reg+0x1c>)
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    3086:	0018      	movs	r0, r3
    3088:	46bd      	mov	sp, r7
    308a:	b002      	add	sp, #8
    308c:	bd80      	pop	{r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	00004905 	.word	0x00004905

00003094 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    309e:	683a      	ldr	r2, [r7, #0]
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	0011      	movs	r1, r2
    30a4:	0018      	movs	r0, r3
    30a6:	4b03      	ldr	r3, [pc, #12]	; (30b4 <nm_read_reg_with_ret+0x20>)
    30a8:	4798      	blx	r3
    30aa:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    30ac:	0018      	movs	r0, r3
    30ae:	46bd      	mov	sp, r7
    30b0:	b002      	add	sp, #8
    30b2:	bd80      	pop	{r7, pc}
    30b4:	00004b01 	.word	0x00004b01

000030b8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
    30c0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    30c2:	683a      	ldr	r2, [r7, #0]
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	0011      	movs	r1, r2
    30c8:	0018      	movs	r0, r3
    30ca:	4b03      	ldr	r3, [pc, #12]	; (30d8 <nm_write_reg+0x20>)
    30cc:	4798      	blx	r3
    30ce:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    30d0:	0018      	movs	r0, r3
    30d2:	46bd      	mov	sp, r7
    30d4:	b002      	add	sp, #8
    30d6:	bd80      	pop	{r7, pc}
    30d8:	00004b51 	.word	0x00004b51

000030dc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b084      	sub	sp, #16
    30e0:	af00      	add	r7, sp, #0
    30e2:	60f8      	str	r0, [r7, #12]
    30e4:	60b9      	str	r1, [r7, #8]
    30e6:	1dbb      	adds	r3, r7, #6
    30e8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    30ea:	1dbb      	adds	r3, r7, #6
    30ec:	881a      	ldrh	r2, [r3, #0]
    30ee:	68b9      	ldr	r1, [r7, #8]
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	0018      	movs	r0, r3
    30f4:	4b03      	ldr	r3, [pc, #12]	; (3104 <p_nm_read_block+0x28>)
    30f6:	4798      	blx	r3
    30f8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b004      	add	sp, #16
    3100:	bd80      	pop	{r7, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	00004ba1 	.word	0x00004ba1

00003108 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3108:	b580      	push	{r7, lr}
    310a:	b086      	sub	sp, #24
    310c:	af00      	add	r7, sp, #0
    310e:	60f8      	str	r0, [r7, #12]
    3110:	60b9      	str	r1, [r7, #8]
    3112:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    3114:	4b2d      	ldr	r3, [pc, #180]	; (31cc <nm_read_block+0xc4>)
    3116:	881a      	ldrh	r2, [r3, #0]
    3118:	2310      	movs	r3, #16
    311a:	18fb      	adds	r3, r7, r3
    311c:	3a08      	subs	r2, #8
    311e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3120:	2300      	movs	r3, #0
    3122:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    3124:	2313      	movs	r3, #19
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    312c:	2310      	movs	r3, #16
    312e:	18fb      	adds	r3, r7, r3
    3130:	881a      	ldrh	r2, [r3, #0]
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	429a      	cmp	r2, r3
    3136:	d313      	bcc.n	3160 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3138:	68ba      	ldr	r2, [r7, #8]
    313a:	697b      	ldr	r3, [r7, #20]
    313c:	18d1      	adds	r1, r2, r3
    313e:	687b      	ldr	r3, [r7, #4]
    3140:	b29a      	uxth	r2, r3
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	0018      	movs	r0, r3
    3146:	4b22      	ldr	r3, [pc, #136]	; (31d0 <nm_read_block+0xc8>)
    3148:	4798      	blx	r3
    314a:	0003      	movs	r3, r0
    314c:	b2da      	uxtb	r2, r3
    314e:	2313      	movs	r3, #19
    3150:	18fb      	adds	r3, r7, r3
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	18d3      	adds	r3, r2, r3
    3156:	b2da      	uxtb	r2, r3
    3158:	2313      	movs	r3, #19
    315a:	18fb      	adds	r3, r7, r3
    315c:	701a      	strb	r2, [r3, #0]
			break;
    315e:	e02d      	b.n	31bc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3160:	68ba      	ldr	r2, [r7, #8]
    3162:	697b      	ldr	r3, [r7, #20]
    3164:	18d1      	adds	r1, r2, r3
    3166:	2310      	movs	r3, #16
    3168:	18fb      	adds	r3, r7, r3
    316a:	881a      	ldrh	r2, [r3, #0]
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	0018      	movs	r0, r3
    3170:	4b17      	ldr	r3, [pc, #92]	; (31d0 <nm_read_block+0xc8>)
    3172:	4798      	blx	r3
    3174:	0003      	movs	r3, r0
    3176:	b2da      	uxtb	r2, r3
    3178:	2313      	movs	r3, #19
    317a:	18fb      	adds	r3, r7, r3
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	18d3      	adds	r3, r2, r3
    3180:	b2da      	uxtb	r2, r3
    3182:	2313      	movs	r3, #19
    3184:	18fb      	adds	r3, r7, r3
    3186:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3188:	2313      	movs	r3, #19
    318a:	18fb      	adds	r3, r7, r3
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	b25b      	sxtb	r3, r3
    3190:	2b00      	cmp	r3, #0
    3192:	d112      	bne.n	31ba <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    3194:	2310      	movs	r3, #16
    3196:	18fb      	adds	r3, r7, r3
    3198:	881b      	ldrh	r3, [r3, #0]
    319a:	687a      	ldr	r2, [r7, #4]
    319c:	1ad3      	subs	r3, r2, r3
    319e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    31a0:	2310      	movs	r3, #16
    31a2:	18fb      	adds	r3, r7, r3
    31a4:	881b      	ldrh	r3, [r3, #0]
    31a6:	697a      	ldr	r2, [r7, #20]
    31a8:	18d3      	adds	r3, r2, r3
    31aa:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    31ac:	2310      	movs	r3, #16
    31ae:	18fb      	adds	r3, r7, r3
    31b0:	881b      	ldrh	r3, [r3, #0]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	18d3      	adds	r3, r2, r3
    31b6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    31b8:	e7b8      	b.n	312c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    31ba:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    31bc:	2313      	movs	r3, #19
    31be:	18fb      	adds	r3, r7, r3
    31c0:	781b      	ldrb	r3, [r3, #0]
    31c2:	b25b      	sxtb	r3, r3
}
    31c4:	0018      	movs	r0, r3
    31c6:	46bd      	mov	sp, r7
    31c8:	b006      	add	sp, #24
    31ca:	bd80      	pop	{r7, pc}
    31cc:	20000000 	.word	0x20000000
    31d0:	000030dd 	.word	0x000030dd

000031d4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b084      	sub	sp, #16
    31d8:	af00      	add	r7, sp, #0
    31da:	60f8      	str	r0, [r7, #12]
    31dc:	60b9      	str	r1, [r7, #8]
    31de:	1dbb      	adds	r3, r7, #6
    31e0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    31e2:	1dbb      	adds	r3, r7, #6
    31e4:	881a      	ldrh	r2, [r3, #0]
    31e6:	68b9      	ldr	r1, [r7, #8]
    31e8:	68fb      	ldr	r3, [r7, #12]
    31ea:	0018      	movs	r0, r3
    31ec:	4b03      	ldr	r3, [pc, #12]	; (31fc <p_nm_write_block+0x28>)
    31ee:	4798      	blx	r3
    31f0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    31f2:	0018      	movs	r0, r3
    31f4:	46bd      	mov	sp, r7
    31f6:	b004      	add	sp, #16
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00004bf9 	.word	0x00004bf9

00003200 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    3200:	b580      	push	{r7, lr}
    3202:	b086      	sub	sp, #24
    3204:	af00      	add	r7, sp, #0
    3206:	60f8      	str	r0, [r7, #12]
    3208:	60b9      	str	r1, [r7, #8]
    320a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    320c:	4b2d      	ldr	r3, [pc, #180]	; (32c4 <nm_write_block+0xc4>)
    320e:	881a      	ldrh	r2, [r3, #0]
    3210:	2310      	movs	r3, #16
    3212:	18fb      	adds	r3, r7, r3
    3214:	3a08      	subs	r2, #8
    3216:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    3218:	2300      	movs	r3, #0
    321a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    321c:	2313      	movs	r3, #19
    321e:	18fb      	adds	r3, r7, r3
    3220:	2200      	movs	r2, #0
    3222:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    3224:	2310      	movs	r3, #16
    3226:	18fb      	adds	r3, r7, r3
    3228:	881a      	ldrh	r2, [r3, #0]
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	429a      	cmp	r2, r3
    322e:	d313      	bcc.n	3258 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    3230:	68ba      	ldr	r2, [r7, #8]
    3232:	697b      	ldr	r3, [r7, #20]
    3234:	18d1      	adds	r1, r2, r3
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	b29a      	uxth	r2, r3
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	0018      	movs	r0, r3
    323e:	4b22      	ldr	r3, [pc, #136]	; (32c8 <nm_write_block+0xc8>)
    3240:	4798      	blx	r3
    3242:	0003      	movs	r3, r0
    3244:	b2da      	uxtb	r2, r3
    3246:	2313      	movs	r3, #19
    3248:	18fb      	adds	r3, r7, r3
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	18d3      	adds	r3, r2, r3
    324e:	b2da      	uxtb	r2, r3
    3250:	2313      	movs	r3, #19
    3252:	18fb      	adds	r3, r7, r3
    3254:	701a      	strb	r2, [r3, #0]
			break;
    3256:	e02d      	b.n	32b4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    3258:	68ba      	ldr	r2, [r7, #8]
    325a:	697b      	ldr	r3, [r7, #20]
    325c:	18d1      	adds	r1, r2, r3
    325e:	2310      	movs	r3, #16
    3260:	18fb      	adds	r3, r7, r3
    3262:	881a      	ldrh	r2, [r3, #0]
    3264:	68fb      	ldr	r3, [r7, #12]
    3266:	0018      	movs	r0, r3
    3268:	4b17      	ldr	r3, [pc, #92]	; (32c8 <nm_write_block+0xc8>)
    326a:	4798      	blx	r3
    326c:	0003      	movs	r3, r0
    326e:	b2da      	uxtb	r2, r3
    3270:	2313      	movs	r3, #19
    3272:	18fb      	adds	r3, r7, r3
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	18d3      	adds	r3, r2, r3
    3278:	b2da      	uxtb	r2, r3
    327a:	2313      	movs	r3, #19
    327c:	18fb      	adds	r3, r7, r3
    327e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    3280:	2313      	movs	r3, #19
    3282:	18fb      	adds	r3, r7, r3
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	b25b      	sxtb	r3, r3
    3288:	2b00      	cmp	r3, #0
    328a:	d112      	bne.n	32b2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    328c:	2310      	movs	r3, #16
    328e:	18fb      	adds	r3, r7, r3
    3290:	881b      	ldrh	r3, [r3, #0]
    3292:	687a      	ldr	r2, [r7, #4]
    3294:	1ad3      	subs	r3, r2, r3
    3296:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    3298:	2310      	movs	r3, #16
    329a:	18fb      	adds	r3, r7, r3
    329c:	881b      	ldrh	r3, [r3, #0]
    329e:	697a      	ldr	r2, [r7, #20]
    32a0:	18d3      	adds	r3, r2, r3
    32a2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    32a4:	2310      	movs	r3, #16
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	881b      	ldrh	r3, [r3, #0]
    32aa:	68fa      	ldr	r2, [r7, #12]
    32ac:	18d3      	adds	r3, r2, r3
    32ae:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    32b0:	e7b8      	b.n	3224 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    32b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    32b4:	2313      	movs	r3, #19
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	781b      	ldrb	r3, [r3, #0]
    32ba:	b25b      	sxtb	r3, r3
}
    32bc:	0018      	movs	r0, r3
    32be:	46bd      	mov	sp, r7
    32c0:	b006      	add	sp, #24
    32c2:	bd80      	pop	{r7, pc}
    32c4:	20000000 	.word	0x20000000
    32c8:	000031d5 	.word	0x000031d5

000032cc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    32cc:	b590      	push	{r4, r7, lr}
    32ce:	b089      	sub	sp, #36	; 0x24
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    32d4:	2300      	movs	r3, #0
    32d6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    32d8:	231f      	movs	r3, #31
    32da:	18fb      	adds	r3, r7, r3
    32dc:	2200      	movs	r2, #0
    32de:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    32e0:	230c      	movs	r3, #12
    32e2:	18fb      	adds	r3, r7, r3
    32e4:	0018      	movs	r0, r3
    32e6:	2308      	movs	r3, #8
    32e8:	001a      	movs	r2, r3
    32ea:	2100      	movs	r1, #0
    32ec:	4b64      	ldr	r3, [pc, #400]	; (3480 <nm_get_firmware_full_info+0x1b4>)
    32ee:	4798      	blx	r3
	if (pstrRev != NULL)
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	2b00      	cmp	r3, #0
    32f4:	d100      	bne.n	32f8 <nm_get_firmware_full_info+0x2c>
    32f6:	e0ba      	b.n	346e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	2228      	movs	r2, #40	; 0x28
    32fc:	2100      	movs	r1, #0
    32fe:	0018      	movs	r0, r3
    3300:	4b60      	ldr	r3, [pc, #384]	; (3484 <nm_get_firmware_full_info+0x1b8>)
    3302:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    3304:	231f      	movs	r3, #31
    3306:	18fc      	adds	r4, r7, r3
    3308:	2314      	movs	r3, #20
    330a:	18fb      	adds	r3, r7, r3
    330c:	4a5e      	ldr	r2, [pc, #376]	; (3488 <nm_get_firmware_full_info+0x1bc>)
    330e:	0019      	movs	r1, r3
    3310:	0010      	movs	r0, r2
    3312:	4b5e      	ldr	r3, [pc, #376]	; (348c <nm_get_firmware_full_info+0x1c0>)
    3314:	4798      	blx	r3
    3316:	0003      	movs	r3, r0
    3318:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    331a:	231f      	movs	r3, #31
    331c:	18fb      	adds	r3, r7, r3
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	b25b      	sxtb	r3, r3
    3322:	2b00      	cmp	r3, #0
    3324:	d000      	beq.n	3328 <nm_get_firmware_full_info+0x5c>
    3326:	e0a2      	b.n	346e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    3328:	697b      	ldr	r3, [r7, #20]
    332a:	2b00      	cmp	r3, #0
    332c:	d100      	bne.n	3330 <nm_get_firmware_full_info+0x64>
    332e:	e09a      	b.n	3466 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    3330:	697b      	ldr	r3, [r7, #20]
    3332:	22c0      	movs	r2, #192	; 0xc0
    3334:	0292      	lsls	r2, r2, #10
    3336:	4313      	orrs	r3, r2
    3338:	221f      	movs	r2, #31
    333a:	18bc      	adds	r4, r7, r2
    333c:	220c      	movs	r2, #12
    333e:	18b9      	adds	r1, r7, r2
    3340:	2208      	movs	r2, #8
    3342:	0018      	movs	r0, r3
    3344:	4b52      	ldr	r3, [pc, #328]	; (3490 <nm_get_firmware_full_info+0x1c4>)
    3346:	4798      	blx	r3
    3348:	0003      	movs	r3, r0
    334a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    334c:	231f      	movs	r3, #31
    334e:	18fb      	adds	r3, r7, r3
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	b25b      	sxtb	r3, r3
    3354:	2b00      	cmp	r3, #0
    3356:	d000      	beq.n	335a <nm_get_firmware_full_info+0x8e>
    3358:	e089      	b.n	346e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    335a:	230c      	movs	r3, #12
    335c:	18fb      	adds	r3, r7, r3
    335e:	685b      	ldr	r3, [r3, #4]
    3360:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    3362:	697b      	ldr	r3, [r7, #20]
    3364:	041b      	lsls	r3, r3, #16
    3366:	0c1b      	lsrs	r3, r3, #16
    3368:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    336a:	697b      	ldr	r3, [r7, #20]
    336c:	2b00      	cmp	r3, #0
    336e:	d100      	bne.n	3372 <nm_get_firmware_full_info+0xa6>
    3370:	e074      	b.n	345c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    3372:	697b      	ldr	r3, [r7, #20]
    3374:	22c0      	movs	r2, #192	; 0xc0
    3376:	0292      	lsls	r2, r2, #10
    3378:	4313      	orrs	r3, r2
    337a:	221f      	movs	r2, #31
    337c:	18bc      	adds	r4, r7, r2
    337e:	6879      	ldr	r1, [r7, #4]
    3380:	2228      	movs	r2, #40	; 0x28
    3382:	0018      	movs	r0, r3
    3384:	4b42      	ldr	r3, [pc, #264]	; (3490 <nm_get_firmware_full_info+0x1c4>)
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    338c:	231f      	movs	r3, #31
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	b25b      	sxtb	r3, r3
    3394:	2b00      	cmp	r3, #0
    3396:	d16a      	bne.n	346e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	791b      	ldrb	r3, [r3, #4]
    339c:	021b      	lsls	r3, r3, #8
    339e:	b21a      	sxth	r2, r3
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	795b      	ldrb	r3, [r3, #5]
    33a4:	011b      	lsls	r3, r3, #4
    33a6:	b21b      	sxth	r3, r3
    33a8:	21ff      	movs	r1, #255	; 0xff
    33aa:	400b      	ands	r3, r1
    33ac:	b21b      	sxth	r3, r3
    33ae:	4313      	orrs	r3, r2
    33b0:	b21a      	sxth	r2, r3
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	799b      	ldrb	r3, [r3, #6]
    33b6:	b21b      	sxth	r3, r3
    33b8:	210f      	movs	r1, #15
    33ba:	400b      	ands	r3, r1
    33bc:	b21b      	sxth	r3, r3
    33be:	4313      	orrs	r3, r2
    33c0:	b21a      	sxth	r2, r3
    33c2:	231c      	movs	r3, #28
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    33c8:	231a      	movs	r3, #26
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	4a31      	ldr	r2, [pc, #196]	; (3494 <nm_get_firmware_full_info+0x1c8>)
    33ce:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	79db      	ldrb	r3, [r3, #7]
    33d4:	021b      	lsls	r3, r3, #8
    33d6:	b21a      	sxth	r2, r3
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	7a1b      	ldrb	r3, [r3, #8]
    33dc:	011b      	lsls	r3, r3, #4
    33de:	b21b      	sxth	r3, r3
    33e0:	21ff      	movs	r1, #255	; 0xff
    33e2:	400b      	ands	r3, r1
    33e4:	b21b      	sxth	r3, r3
    33e6:	4313      	orrs	r3, r2
    33e8:	b21a      	sxth	r2, r3
    33ea:	687b      	ldr	r3, [r7, #4]
    33ec:	7a5b      	ldrb	r3, [r3, #9]
    33ee:	b21b      	sxth	r3, r3
    33f0:	210f      	movs	r1, #15
    33f2:	400b      	ands	r3, r1
    33f4:	b21b      	sxth	r3, r3
    33f6:	4313      	orrs	r3, r2
    33f8:	b21a      	sxth	r2, r3
    33fa:	2318      	movs	r3, #24
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3400:	231c      	movs	r3, #28
    3402:	18fb      	adds	r3, r7, r3
    3404:	881b      	ldrh	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d009      	beq.n	341e <nm_get_firmware_full_info+0x152>
    340a:	2318      	movs	r3, #24
    340c:	18fb      	adds	r3, r7, r3
    340e:	881b      	ldrh	r3, [r3, #0]
    3410:	2b00      	cmp	r3, #0
    3412:	d004      	beq.n	341e <nm_get_firmware_full_info+0x152>
    3414:	2318      	movs	r3, #24
    3416:	18fb      	adds	r3, r7, r3
    3418:	881b      	ldrh	r3, [r3, #0]
    341a:	2b00      	cmp	r3, #0
    341c:	d104      	bne.n	3428 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    341e:	231f      	movs	r3, #31
    3420:	18fb      	adds	r3, r7, r3
    3422:	22f4      	movs	r2, #244	; 0xf4
    3424:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3426:	e022      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    3428:	231a      	movs	r3, #26
    342a:	18fa      	adds	r2, r7, r3
    342c:	2318      	movs	r3, #24
    342e:	18fb      	adds	r3, r7, r3
    3430:	8812      	ldrh	r2, [r2, #0]
    3432:	881b      	ldrh	r3, [r3, #0]
    3434:	429a      	cmp	r2, r3
    3436:	d204      	bcs.n	3442 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    3438:	231f      	movs	r3, #31
    343a:	18fb      	adds	r3, r7, r3
    343c:	22f3      	movs	r2, #243	; 0xf3
    343e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    3440:	e015      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    3442:	231a      	movs	r3, #26
    3444:	18fa      	adds	r2, r7, r3
    3446:	231c      	movs	r3, #28
    3448:	18fb      	adds	r3, r7, r3
    344a:	8812      	ldrh	r2, [r2, #0]
    344c:	881b      	ldrh	r3, [r3, #0]
    344e:	429a      	cmp	r2, r3
    3450:	d90d      	bls.n	346e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    3452:	231f      	movs	r3, #31
    3454:	18fb      	adds	r3, r7, r3
    3456:	22f3      	movs	r2, #243	; 0xf3
    3458:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    345a:	e008      	b.n	346e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    345c:	231f      	movs	r3, #31
    345e:	18fb      	adds	r3, r7, r3
    3460:	22f4      	movs	r2, #244	; 0xf4
    3462:	701a      	strb	r2, [r3, #0]
    3464:	e003      	b.n	346e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    3466:	231f      	movs	r3, #31
    3468:	18fb      	adds	r3, r7, r3
    346a:	22f4      	movs	r2, #244	; 0xf4
    346c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    346e:	231f      	movs	r3, #31
    3470:	18fb      	adds	r3, r7, r3
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	b25b      	sxtb	r3, r3
}
    3476:	0018      	movs	r0, r3
    3478:	46bd      	mov	sp, r7
    347a:	b009      	add	sp, #36	; 0x24
    347c:	bd90      	pop	{r4, r7, pc}
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	0001baed 	.word	0x0001baed
    3484:	00000b61 	.word	0x00000b61
    3488:	000c0008 	.word	0x000c0008
    348c:	00003095 	.word	0x00003095
    3490:	00003109 	.word	0x00003109
    3494:	00001354 	.word	0x00001354

00003498 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3498:	b590      	push	{r4, r7, lr}
    349a:	b085      	sub	sp, #20
    349c:	af00      	add	r7, sp, #0
    349e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    34a0:	230f      	movs	r3, #15
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	2200      	movs	r2, #0
    34a6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d013      	beq.n	34d6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    34ae:	230e      	movs	r3, #14
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	687a      	ldr	r2, [r7, #4]
    34b4:	7812      	ldrb	r2, [r2, #0]
    34b6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    34b8:	230e      	movs	r3, #14
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	2b00      	cmp	r3, #0
    34c0:	d004      	beq.n	34cc <nm_drv_init+0x34>
    34c2:	230e      	movs	r3, #14
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	781b      	ldrb	r3, [r3, #0]
    34c8:	2b04      	cmp	r3, #4
    34ca:	d908      	bls.n	34de <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    34cc:	230e      	movs	r3, #14
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2201      	movs	r2, #1
    34d2:	701a      	strb	r2, [r3, #0]
    34d4:	e003      	b.n	34de <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    34d6:	230e      	movs	r3, #14
    34d8:	18fb      	adds	r3, r7, r3
    34da:	2201      	movs	r2, #1
    34dc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    34de:	230f      	movs	r3, #15
    34e0:	18fc      	adds	r4, r7, r3
    34e2:	2000      	movs	r0, #0
    34e4:	4b41      	ldr	r3, [pc, #260]	; (35ec <nm_drv_init+0x154>)
    34e6:	4798      	blx	r3
    34e8:	0003      	movs	r3, r0
    34ea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    34ec:	230f      	movs	r3, #15
    34ee:	18fb      	adds	r3, r7, r3
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	b25b      	sxtb	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00f      	beq.n	3518 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    34f8:	2328      	movs	r3, #40	; 0x28
    34fa:	33ff      	adds	r3, #255	; 0xff
    34fc:	001a      	movs	r2, r3
    34fe:	493c      	ldr	r1, [pc, #240]	; (35f0 <nm_drv_init+0x158>)
    3500:	4b3c      	ldr	r3, [pc, #240]	; (35f4 <nm_drv_init+0x15c>)
    3502:	0018      	movs	r0, r3
    3504:	4b3c      	ldr	r3, [pc, #240]	; (35f8 <nm_drv_init+0x160>)
    3506:	4798      	blx	r3
    3508:	4b3c      	ldr	r3, [pc, #240]	; (35fc <nm_drv_init+0x164>)
    350a:	0018      	movs	r0, r3
    350c:	4b3c      	ldr	r3, [pc, #240]	; (3600 <nm_drv_init+0x168>)
    350e:	4798      	blx	r3
    3510:	200d      	movs	r0, #13
    3512:	4b3c      	ldr	r3, [pc, #240]	; (3604 <nm_drv_init+0x16c>)
    3514:	4798      	blx	r3
		goto ERR1;
    3516:	e060      	b.n	35da <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    3518:	4b3b      	ldr	r3, [pc, #236]	; (3608 <nm_drv_init+0x170>)
    351a:	0018      	movs	r0, r3
    351c:	4b36      	ldr	r3, [pc, #216]	; (35f8 <nm_drv_init+0x160>)
    351e:	4798      	blx	r3
    3520:	4b3a      	ldr	r3, [pc, #232]	; (360c <nm_drv_init+0x174>)
    3522:	4798      	blx	r3
    3524:	0002      	movs	r2, r0
    3526:	4b3a      	ldr	r3, [pc, #232]	; (3610 <nm_drv_init+0x178>)
    3528:	0011      	movs	r1, r2
    352a:	0018      	movs	r0, r3
    352c:	4b32      	ldr	r3, [pc, #200]	; (35f8 <nm_drv_init+0x160>)
    352e:	4798      	blx	r3
    3530:	200d      	movs	r0, #13
    3532:	4b34      	ldr	r3, [pc, #208]	; (3604 <nm_drv_init+0x16c>)
    3534:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    3536:	4b37      	ldr	r3, [pc, #220]	; (3614 <nm_drv_init+0x17c>)
    3538:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    353a:	230f      	movs	r3, #15
    353c:	18fc      	adds	r4, r7, r3
    353e:	230e      	movs	r3, #14
    3540:	18fb      	adds	r3, r7, r3
    3542:	781b      	ldrb	r3, [r3, #0]
    3544:	0018      	movs	r0, r3
    3546:	4b34      	ldr	r3, [pc, #208]	; (3618 <nm_drv_init+0x180>)
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    354e:	230f      	movs	r3, #15
    3550:	18fb      	adds	r3, r7, r3
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	b25b      	sxtb	r3, r3
    3556:	2b00      	cmp	r3, #0
    3558:	d13a      	bne.n	35d0 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    355a:	230f      	movs	r3, #15
    355c:	18fc      	adds	r4, r7, r3
    355e:	230e      	movs	r3, #14
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	0018      	movs	r0, r3
    3566:	4b2d      	ldr	r3, [pc, #180]	; (361c <nm_drv_init+0x184>)
    3568:	4798      	blx	r3
    356a:	0003      	movs	r3, r0
    356c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    356e:	230f      	movs	r3, #15
    3570:	18fb      	adds	r3, r7, r3
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	b25b      	sxtb	r3, r3
    3576:	2b00      	cmp	r3, #0
    3578:	d12c      	bne.n	35d4 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    357a:	230e      	movs	r3, #14
    357c:	18fb      	adds	r3, r7, r3
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	2b02      	cmp	r3, #2
    3582:	d02a      	beq.n	35da <nm_drv_init+0x142>
    3584:	230e      	movs	r3, #14
    3586:	18fb      	adds	r3, r7, r3
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b03      	cmp	r3, #3
    358c:	d025      	beq.n	35da <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    358e:	230f      	movs	r3, #15
    3590:	18fc      	adds	r4, r7, r3
    3592:	4b23      	ldr	r3, [pc, #140]	; (3620 <nm_drv_init+0x188>)
    3594:	4798      	blx	r3
    3596:	0003      	movs	r3, r0
    3598:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    359a:	230f      	movs	r3, #15
    359c:	18fb      	adds	r3, r7, r3
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	b25b      	sxtb	r3, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	d00f      	beq.n	35c6 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    35a6:	2356      	movs	r3, #86	; 0x56
    35a8:	33ff      	adds	r3, #255	; 0xff
    35aa:	001a      	movs	r2, r3
    35ac:	4910      	ldr	r1, [pc, #64]	; (35f0 <nm_drv_init+0x158>)
    35ae:	4b11      	ldr	r3, [pc, #68]	; (35f4 <nm_drv_init+0x15c>)
    35b0:	0018      	movs	r0, r3
    35b2:	4b11      	ldr	r3, [pc, #68]	; (35f8 <nm_drv_init+0x160>)
    35b4:	4798      	blx	r3
    35b6:	4b1b      	ldr	r3, [pc, #108]	; (3624 <nm_drv_init+0x18c>)
    35b8:	0018      	movs	r0, r3
    35ba:	4b11      	ldr	r3, [pc, #68]	; (3600 <nm_drv_init+0x168>)
    35bc:	4798      	blx	r3
    35be:	200d      	movs	r0, #13
    35c0:	4b10      	ldr	r3, [pc, #64]	; (3604 <nm_drv_init+0x16c>)
    35c2:	4798      	blx	r3
		goto ERR2;
    35c4:	e007      	b.n	35d6 <nm_drv_init+0x13e>
	}
	return ret;
    35c6:	230f      	movs	r3, #15
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	781b      	ldrb	r3, [r3, #0]
    35cc:	b25b      	sxtb	r3, r3
    35ce:	e008      	b.n	35e2 <nm_drv_init+0x14a>
		goto ERR2;
    35d0:	46c0      	nop			; (mov r8, r8)
    35d2:	e000      	b.n	35d6 <nm_drv_init+0x13e>
		goto ERR2;
    35d4:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    35d6:	4b14      	ldr	r3, [pc, #80]	; (3628 <nm_drv_init+0x190>)
    35d8:	4798      	blx	r3
ERR1:
	return ret;
    35da:	230f      	movs	r3, #15
    35dc:	18fb      	adds	r3, r7, r3
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	b25b      	sxtb	r3, r3
}
    35e2:	0018      	movs	r0, r3
    35e4:	46bd      	mov	sp, r7
    35e6:	b005      	add	sp, #20
    35e8:	bd90      	pop	{r4, r7, pc}
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	00002ff9 	.word	0x00002ff9
    35f0:	0001d9e0 	.word	0x0001d9e0
    35f4:	0001d914 	.word	0x0001d914
    35f8:	0001bc4d 	.word	0x0001bc4d
    35fc:	0001d928 	.word	0x0001d928
    3600:	0001bd69 	.word	0x0001bd69
    3604:	0001bc81 	.word	0x0001bc81
    3608:	0001d944 	.word	0x0001d944
    360c:	00002999 	.word	0x00002999
    3610:	0001d950 	.word	0x0001d950
    3614:	0000499d 	.word	0x0000499d
    3618:	00002ced 	.word	0x00002ced
    361c:	00002e85 	.word	0x00002e85
    3620:	000028e5 	.word	0x000028e5
    3624:	0001d960 	.word	0x0001d960
    3628:	0000302d 	.word	0x0000302d

0000362c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    362c:	b590      	push	{r4, r7, lr}
    362e:	b085      	sub	sp, #20
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3634:	230f      	movs	r3, #15
    3636:	18fc      	adds	r4, r7, r3
    3638:	4b2d      	ldr	r3, [pc, #180]	; (36f0 <nm_drv_deinit+0xc4>)
    363a:	4798      	blx	r3
    363c:	0003      	movs	r3, r0
    363e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3640:	230f      	movs	r3, #15
    3642:	18fb      	adds	r3, r7, r3
    3644:	781b      	ldrb	r3, [r3, #0]
    3646:	b25b      	sxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d00e      	beq.n	366a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    364c:	23b6      	movs	r3, #182	; 0xb6
    364e:	005a      	lsls	r2, r3, #1
    3650:	4928      	ldr	r1, [pc, #160]	; (36f4 <nm_drv_deinit+0xc8>)
    3652:	4b29      	ldr	r3, [pc, #164]	; (36f8 <nm_drv_deinit+0xcc>)
    3654:	0018      	movs	r0, r3
    3656:	4b29      	ldr	r3, [pc, #164]	; (36fc <nm_drv_deinit+0xd0>)
    3658:	4798      	blx	r3
    365a:	4b29      	ldr	r3, [pc, #164]	; (3700 <nm_drv_deinit+0xd4>)
    365c:	0018      	movs	r0, r3
    365e:	4b29      	ldr	r3, [pc, #164]	; (3704 <nm_drv_deinit+0xd8>)
    3660:	4798      	blx	r3
    3662:	200d      	movs	r0, #13
    3664:	4b28      	ldr	r3, [pc, #160]	; (3708 <nm_drv_deinit+0xdc>)
    3666:	4798      	blx	r3
		goto ERR1;
    3668:	e03a      	b.n	36e0 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    366a:	230f      	movs	r3, #15
    366c:	18fc      	adds	r4, r7, r3
    366e:	2000      	movs	r0, #0
    3670:	4b26      	ldr	r3, [pc, #152]	; (370c <nm_drv_deinit+0xe0>)
    3672:	4798      	blx	r3
    3674:	0003      	movs	r3, r0
    3676:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3678:	230f      	movs	r3, #15
    367a:	18fb      	adds	r3, r7, r3
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	b25b      	sxtb	r3, r3
    3680:	2b00      	cmp	r3, #0
    3682:	d00f      	beq.n	36a4 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3684:	2374      	movs	r3, #116	; 0x74
    3686:	33ff      	adds	r3, #255	; 0xff
    3688:	001a      	movs	r2, r3
    368a:	491a      	ldr	r1, [pc, #104]	; (36f4 <nm_drv_deinit+0xc8>)
    368c:	4b1a      	ldr	r3, [pc, #104]	; (36f8 <nm_drv_deinit+0xcc>)
    368e:	0018      	movs	r0, r3
    3690:	4b1a      	ldr	r3, [pc, #104]	; (36fc <nm_drv_deinit+0xd0>)
    3692:	4798      	blx	r3
    3694:	4b1e      	ldr	r3, [pc, #120]	; (3710 <nm_drv_deinit+0xe4>)
    3696:	0018      	movs	r0, r3
    3698:	4b1a      	ldr	r3, [pc, #104]	; (3704 <nm_drv_deinit+0xd8>)
    369a:	4798      	blx	r3
    369c:	200d      	movs	r0, #13
    369e:	4b1a      	ldr	r3, [pc, #104]	; (3708 <nm_drv_deinit+0xdc>)
    36a0:	4798      	blx	r3
		goto ERR1;
    36a2:	e01d      	b.n	36e0 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    36a4:	230f      	movs	r3, #15
    36a6:	18fc      	adds	r4, r7, r3
    36a8:	4b1a      	ldr	r3, [pc, #104]	; (3714 <nm_drv_deinit+0xe8>)
    36aa:	4798      	blx	r3
    36ac:	0003      	movs	r3, r0
    36ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    36b0:	230f      	movs	r3, #15
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	781b      	ldrb	r3, [r3, #0]
    36b6:	b25b      	sxtb	r3, r3
    36b8:	2b00      	cmp	r3, #0
    36ba:	d00f      	beq.n	36dc <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    36bc:	237a      	movs	r3, #122	; 0x7a
    36be:	33ff      	adds	r3, #255	; 0xff
    36c0:	001a      	movs	r2, r3
    36c2:	490c      	ldr	r1, [pc, #48]	; (36f4 <nm_drv_deinit+0xc8>)
    36c4:	4b0c      	ldr	r3, [pc, #48]	; (36f8 <nm_drv_deinit+0xcc>)
    36c6:	0018      	movs	r0, r3
    36c8:	4b0c      	ldr	r3, [pc, #48]	; (36fc <nm_drv_deinit+0xd0>)
    36ca:	4798      	blx	r3
    36cc:	4b12      	ldr	r3, [pc, #72]	; (3718 <nm_drv_deinit+0xec>)
    36ce:	0018      	movs	r0, r3
    36d0:	4b0c      	ldr	r3, [pc, #48]	; (3704 <nm_drv_deinit+0xd8>)
    36d2:	4798      	blx	r3
    36d4:	200d      	movs	r0, #13
    36d6:	4b0c      	ldr	r3, [pc, #48]	; (3708 <nm_drv_deinit+0xdc>)
    36d8:	4798      	blx	r3
		goto ERR1;
    36da:	e001      	b.n	36e0 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    36dc:	4b0f      	ldr	r3, [pc, #60]	; (371c <nm_drv_deinit+0xf0>)
    36de:	4798      	blx	r3
#endif

ERR1:
	return ret;
    36e0:	230f      	movs	r3, #15
    36e2:	18fb      	adds	r3, r7, r3
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	b25b      	sxtb	r3, r3
}
    36e8:	0018      	movs	r0, r3
    36ea:	46bd      	mov	sp, r7
    36ec:	b005      	add	sp, #20
    36ee:	bd90      	pop	{r4, r7, pc}
    36f0:	00002f39 	.word	0x00002f39
    36f4:	0001d9ec 	.word	0x0001d9ec
    36f8:	0001d914 	.word	0x0001d914
    36fc:	0001bc4d 	.word	0x0001bc4d
    3700:	0001d980 	.word	0x0001d980
    3704:	0001bd69 	.word	0x0001bd69
    3708:	0001bc81 	.word	0x0001bc81
    370c:	00005e1d 	.word	0x00005e1d
    3710:	0001d9a0 	.word	0x0001d9a0
    3714:	0000302d 	.word	0x0000302d
    3718:	0001d9c4 	.word	0x0001d9c4
    371c:	00004ae9 	.word	0x00004ae9

00003720 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    3720:	b580      	push	{r7, lr}
    3722:	b086      	sub	sp, #24
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	000a      	movs	r2, r1
    372a:	1cbb      	adds	r3, r7, #2
    372c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    372e:	230c      	movs	r3, #12
    3730:	18fb      	adds	r3, r7, r3
    3732:	2200      	movs	r2, #0
    3734:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3736:	230c      	movs	r3, #12
    3738:	18fb      	adds	r3, r7, r3
    373a:	687a      	ldr	r2, [r7, #4]
    373c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    373e:	230c      	movs	r3, #12
    3740:	18fb      	adds	r3, r7, r3
    3742:	1cba      	adds	r2, r7, #2
    3744:	8812      	ldrh	r2, [r2, #0]
    3746:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3748:	230c      	movs	r3, #12
    374a:	18fb      	adds	r3, r7, r3
    374c:	0019      	movs	r1, r3
    374e:	2003      	movs	r0, #3
    3750:	4b03      	ldr	r3, [pc, #12]	; (3760 <nmi_spi_read+0x40>)
    3752:	4798      	blx	r3
    3754:	0003      	movs	r3, r0
}
    3756:	0018      	movs	r0, r3
    3758:	46bd      	mov	sp, r7
    375a:	b006      	add	sp, #24
    375c:	bd80      	pop	{r7, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	00000a4d 	.word	0x00000a4d

00003764 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3764:	b580      	push	{r7, lr}
    3766:	b086      	sub	sp, #24
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
    376c:	000a      	movs	r2, r1
    376e:	1cbb      	adds	r3, r7, #2
    3770:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3772:	230c      	movs	r3, #12
    3774:	18fb      	adds	r3, r7, r3
    3776:	687a      	ldr	r2, [r7, #4]
    3778:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    377a:	230c      	movs	r3, #12
    377c:	18fb      	adds	r3, r7, r3
    377e:	2200      	movs	r2, #0
    3780:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3782:	230c      	movs	r3, #12
    3784:	18fb      	adds	r3, r7, r3
    3786:	1cba      	adds	r2, r7, #2
    3788:	8812      	ldrh	r2, [r2, #0]
    378a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    378c:	230c      	movs	r3, #12
    378e:	18fb      	adds	r3, r7, r3
    3790:	0019      	movs	r1, r3
    3792:	2003      	movs	r0, #3
    3794:	4b03      	ldr	r3, [pc, #12]	; (37a4 <nmi_spi_write+0x40>)
    3796:	4798      	blx	r3
    3798:	0003      	movs	r3, r0
}
    379a:	0018      	movs	r0, r3
    379c:	46bd      	mov	sp, r7
    379e:	b006      	add	sp, #24
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	00000a4d 	.word	0x00000a4d

000037a8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b082      	sub	sp, #8
    37ac:	af00      	add	r7, sp, #0
    37ae:	0002      	movs	r2, r0
    37b0:	1dfb      	adds	r3, r7, #7
    37b2:	701a      	strb	r2, [r3, #0]
    37b4:	1dbb      	adds	r3, r7, #6
    37b6:	1c0a      	adds	r2, r1, #0
    37b8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    37ba:	1dfb      	adds	r3, r7, #7
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	005a      	lsls	r2, r3, #1
    37c0:	1dbb      	adds	r3, r7, #6
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	4053      	eors	r3, r2
    37c6:	4a03      	ldr	r2, [pc, #12]	; (37d4 <crc7_byte+0x2c>)
    37c8:	5cd3      	ldrb	r3, [r2, r3]
}
    37ca:	0018      	movs	r0, r3
    37cc:	46bd      	mov	sp, r7
    37ce:	b002      	add	sp, #8
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	0001d9fc 	.word	0x0001d9fc

000037d8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b085      	sub	sp, #20
    37dc:	af00      	add	r7, sp, #0
    37de:	60b9      	str	r1, [r7, #8]
    37e0:	607a      	str	r2, [r7, #4]
    37e2:	230f      	movs	r3, #15
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	1c02      	adds	r2, r0, #0
    37e8:	701a      	strb	r2, [r3, #0]
	while (len--)
    37ea:	e00e      	b.n	380a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    37ec:	68bb      	ldr	r3, [r7, #8]
    37ee:	1c5a      	adds	r2, r3, #1
    37f0:	60ba      	str	r2, [r7, #8]
    37f2:	781a      	ldrb	r2, [r3, #0]
    37f4:	230f      	movs	r3, #15
    37f6:	18fc      	adds	r4, r7, r3
    37f8:	230f      	movs	r3, #15
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	0011      	movs	r1, r2
    3800:	0018      	movs	r0, r3
    3802:	4b08      	ldr	r3, [pc, #32]	; (3824 <crc7+0x4c>)
    3804:	4798      	blx	r3
    3806:	0003      	movs	r3, r0
    3808:	7023      	strb	r3, [r4, #0]
	while (len--)
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	1e5a      	subs	r2, r3, #1
    380e:	607a      	str	r2, [r7, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d1eb      	bne.n	37ec <crc7+0x14>
	return crc;
    3814:	230f      	movs	r3, #15
    3816:	18fb      	adds	r3, r7, r3
    3818:	781b      	ldrb	r3, [r3, #0]
}
    381a:	0018      	movs	r0, r3
    381c:	46bd      	mov	sp, r7
    381e:	b005      	add	sp, #20
    3820:	bd90      	pop	{r4, r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	000037a9 	.word	0x000037a9

00003828 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3828:	b590      	push	{r4, r7, lr}
    382a:	b089      	sub	sp, #36	; 0x24
    382c:	af00      	add	r7, sp, #0
    382e:	60b9      	str	r1, [r7, #8]
    3830:	607a      	str	r2, [r7, #4]
    3832:	603b      	str	r3, [r7, #0]
    3834:	230f      	movs	r3, #15
    3836:	18fb      	adds	r3, r7, r3
    3838:	1c02      	adds	r2, r0, #0
    383a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    383c:	231f      	movs	r3, #31
    383e:	18fb      	adds	r3, r7, r3
    3840:	2205      	movs	r2, #5
    3842:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3844:	231e      	movs	r3, #30
    3846:	18fb      	adds	r3, r7, r3
    3848:	2201      	movs	r2, #1
    384a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    384c:	2314      	movs	r3, #20
    384e:	18fb      	adds	r3, r7, r3
    3850:	220f      	movs	r2, #15
    3852:	18ba      	adds	r2, r7, r2
    3854:	7812      	ldrb	r2, [r2, #0]
    3856:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3858:	230f      	movs	r3, #15
    385a:	18fb      	adds	r3, r7, r3
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	3bc1      	subs	r3, #193	; 0xc1
    3860:	2b0e      	cmp	r3, #14
    3862:	d900      	bls.n	3866 <spi_cmd+0x3e>
    3864:	e11b      	b.n	3a9e <spi_cmd+0x276>
    3866:	009a      	lsls	r2, r3, #2
    3868:	4bb6      	ldr	r3, [pc, #728]	; (3b44 <spi_cmd+0x31c>)
    386a:	18d3      	adds	r3, r2, r3
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3870:	68bb      	ldr	r3, [r7, #8]
    3872:	0c1b      	lsrs	r3, r3, #16
    3874:	b2da      	uxtb	r2, r3
    3876:	2314      	movs	r3, #20
    3878:	18fb      	adds	r3, r7, r3
    387a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    387c:	68bb      	ldr	r3, [r7, #8]
    387e:	0a1b      	lsrs	r3, r3, #8
    3880:	b2da      	uxtb	r2, r3
    3882:	2314      	movs	r3, #20
    3884:	18fb      	adds	r3, r7, r3
    3886:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3888:	68bb      	ldr	r3, [r7, #8]
    388a:	b2da      	uxtb	r2, r3
    388c:	2314      	movs	r3, #20
    388e:	18fb      	adds	r3, r7, r3
    3890:	70da      	strb	r2, [r3, #3]
		len = 5;
    3892:	231f      	movs	r3, #31
    3894:	18fb      	adds	r3, r7, r3
    3896:	2205      	movs	r2, #5
    3898:	701a      	strb	r2, [r3, #0]
		break;
    389a:	e105      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    389c:	68bb      	ldr	r3, [r7, #8]
    389e:	0a1b      	lsrs	r3, r3, #8
    38a0:	b2da      	uxtb	r2, r3
    38a2:	2314      	movs	r3, #20
    38a4:	18fb      	adds	r3, r7, r3
    38a6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    38a8:	2330      	movs	r3, #48	; 0x30
    38aa:	18fb      	adds	r3, r7, r3
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d009      	beq.n	38c6 <spi_cmd+0x9e>
    38b2:	2314      	movs	r3, #20
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	785b      	ldrb	r3, [r3, #1]
    38b8:	2280      	movs	r2, #128	; 0x80
    38ba:	4252      	negs	r2, r2
    38bc:	4313      	orrs	r3, r2
    38be:	b2da      	uxtb	r2, r3
    38c0:	2314      	movs	r3, #20
    38c2:	18fb      	adds	r3, r7, r3
    38c4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    38c6:	68bb      	ldr	r3, [r7, #8]
    38c8:	b2da      	uxtb	r2, r3
    38ca:	2314      	movs	r3, #20
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    38d0:	2314      	movs	r3, #20
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	2200      	movs	r2, #0
    38d6:	70da      	strb	r2, [r3, #3]
		len = 5;
    38d8:	231f      	movs	r3, #31
    38da:	18fb      	adds	r3, r7, r3
    38dc:	2205      	movs	r2, #5
    38de:	701a      	strb	r2, [r3, #0]
		break;
    38e0:	e0e2      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    38e2:	2314      	movs	r3, #20
    38e4:	18fb      	adds	r3, r7, r3
    38e6:	2200      	movs	r2, #0
    38e8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    38ea:	2314      	movs	r3, #20
    38ec:	18fb      	adds	r3, r7, r3
    38ee:	2200      	movs	r2, #0
    38f0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    38f2:	2314      	movs	r3, #20
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	2200      	movs	r2, #0
    38f8:	70da      	strb	r2, [r3, #3]
		len = 5;
    38fa:	231f      	movs	r3, #31
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	2205      	movs	r2, #5
    3900:	701a      	strb	r2, [r3, #0]
		break;
    3902:	e0d1      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3904:	2314      	movs	r3, #20
    3906:	18fb      	adds	r3, r7, r3
    3908:	2200      	movs	r2, #0
    390a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    390c:	2314      	movs	r3, #20
    390e:	18fb      	adds	r3, r7, r3
    3910:	2200      	movs	r2, #0
    3912:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3914:	2314      	movs	r3, #20
    3916:	18fb      	adds	r3, r7, r3
    3918:	2200      	movs	r2, #0
    391a:	70da      	strb	r2, [r3, #3]
		len = 5;
    391c:	231f      	movs	r3, #31
    391e:	18fb      	adds	r3, r7, r3
    3920:	2205      	movs	r2, #5
    3922:	701a      	strb	r2, [r3, #0]
		break;
    3924:	e0c0      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    3926:	2314      	movs	r3, #20
    3928:	18fb      	adds	r3, r7, r3
    392a:	22ff      	movs	r2, #255	; 0xff
    392c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    392e:	2314      	movs	r3, #20
    3930:	18fb      	adds	r3, r7, r3
    3932:	22ff      	movs	r2, #255	; 0xff
    3934:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3936:	2314      	movs	r3, #20
    3938:	18fb      	adds	r3, r7, r3
    393a:	22ff      	movs	r2, #255	; 0xff
    393c:	70da      	strb	r2, [r3, #3]
		len = 5;
    393e:	231f      	movs	r3, #31
    3940:	18fb      	adds	r3, r7, r3
    3942:	2205      	movs	r2, #5
    3944:	701a      	strb	r2, [r3, #0]
		break;
    3946:	e0af      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3948:	68bb      	ldr	r3, [r7, #8]
    394a:	0c1b      	lsrs	r3, r3, #16
    394c:	b2da      	uxtb	r2, r3
    394e:	2314      	movs	r3, #20
    3950:	18fb      	adds	r3, r7, r3
    3952:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3954:	68bb      	ldr	r3, [r7, #8]
    3956:	0a1b      	lsrs	r3, r3, #8
    3958:	b2da      	uxtb	r2, r3
    395a:	2314      	movs	r3, #20
    395c:	18fb      	adds	r3, r7, r3
    395e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3960:	68bb      	ldr	r3, [r7, #8]
    3962:	b2da      	uxtb	r2, r3
    3964:	2314      	movs	r3, #20
    3966:	18fb      	adds	r3, r7, r3
    3968:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    396a:	683b      	ldr	r3, [r7, #0]
    396c:	0a1b      	lsrs	r3, r3, #8
    396e:	b2da      	uxtb	r2, r3
    3970:	2314      	movs	r3, #20
    3972:	18fb      	adds	r3, r7, r3
    3974:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3976:	683b      	ldr	r3, [r7, #0]
    3978:	b2da      	uxtb	r2, r3
    397a:	2314      	movs	r3, #20
    397c:	18fb      	adds	r3, r7, r3
    397e:	715a      	strb	r2, [r3, #5]
		len = 7;
    3980:	231f      	movs	r3, #31
    3982:	18fb      	adds	r3, r7, r3
    3984:	2207      	movs	r2, #7
    3986:	701a      	strb	r2, [r3, #0]
		break;
    3988:	e08e      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    398a:	68bb      	ldr	r3, [r7, #8]
    398c:	0c1b      	lsrs	r3, r3, #16
    398e:	b2da      	uxtb	r2, r3
    3990:	2314      	movs	r3, #20
    3992:	18fb      	adds	r3, r7, r3
    3994:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3996:	68bb      	ldr	r3, [r7, #8]
    3998:	0a1b      	lsrs	r3, r3, #8
    399a:	b2da      	uxtb	r2, r3
    399c:	2314      	movs	r3, #20
    399e:	18fb      	adds	r3, r7, r3
    39a0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    39a2:	68bb      	ldr	r3, [r7, #8]
    39a4:	b2da      	uxtb	r2, r3
    39a6:	2314      	movs	r3, #20
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	0c1b      	lsrs	r3, r3, #16
    39b0:	b2da      	uxtb	r2, r3
    39b2:	2314      	movs	r3, #20
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	0a1b      	lsrs	r3, r3, #8
    39bc:	b2da      	uxtb	r2, r3
    39be:	2314      	movs	r3, #20
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    39c4:	683b      	ldr	r3, [r7, #0]
    39c6:	b2da      	uxtb	r2, r3
    39c8:	2314      	movs	r3, #20
    39ca:	18fb      	adds	r3, r7, r3
    39cc:	719a      	strb	r2, [r3, #6]
		len = 8;
    39ce:	231f      	movs	r3, #31
    39d0:	18fb      	adds	r3, r7, r3
    39d2:	2208      	movs	r2, #8
    39d4:	701a      	strb	r2, [r3, #0]
		break;
    39d6:	e067      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    39d8:	68bb      	ldr	r3, [r7, #8]
    39da:	0a1b      	lsrs	r3, r3, #8
    39dc:	b2da      	uxtb	r2, r3
    39de:	2314      	movs	r3, #20
    39e0:	18fb      	adds	r3, r7, r3
    39e2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    39e4:	2330      	movs	r3, #48	; 0x30
    39e6:	18fb      	adds	r3, r7, r3
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d009      	beq.n	3a02 <spi_cmd+0x1da>
    39ee:	2314      	movs	r3, #20
    39f0:	18fb      	adds	r3, r7, r3
    39f2:	785b      	ldrb	r3, [r3, #1]
    39f4:	2280      	movs	r2, #128	; 0x80
    39f6:	4252      	negs	r2, r2
    39f8:	4313      	orrs	r3, r2
    39fa:	b2da      	uxtb	r2, r3
    39fc:	2314      	movs	r3, #20
    39fe:	18fb      	adds	r3, r7, r3
    3a00:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3a02:	68bb      	ldr	r3, [r7, #8]
    3a04:	b2da      	uxtb	r2, r3
    3a06:	2314      	movs	r3, #20
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	0e1b      	lsrs	r3, r3, #24
    3a10:	b2da      	uxtb	r2, r3
    3a12:	2314      	movs	r3, #20
    3a14:	18fb      	adds	r3, r7, r3
    3a16:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	0c1b      	lsrs	r3, r3, #16
    3a1c:	b2da      	uxtb	r2, r3
    3a1e:	2314      	movs	r3, #20
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	0a1b      	lsrs	r3, r3, #8
    3a28:	b2da      	uxtb	r2, r3
    3a2a:	2314      	movs	r3, #20
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	b2da      	uxtb	r2, r3
    3a34:	2314      	movs	r3, #20
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	719a      	strb	r2, [r3, #6]
		len = 8;
    3a3a:	231f      	movs	r3, #31
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	2208      	movs	r2, #8
    3a40:	701a      	strb	r2, [r3, #0]
		break;
    3a42:	e031      	b.n	3aa8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3a44:	68bb      	ldr	r3, [r7, #8]
    3a46:	0c1b      	lsrs	r3, r3, #16
    3a48:	b2da      	uxtb	r2, r3
    3a4a:	2314      	movs	r3, #20
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3a50:	68bb      	ldr	r3, [r7, #8]
    3a52:	0a1b      	lsrs	r3, r3, #8
    3a54:	b2da      	uxtb	r2, r3
    3a56:	2314      	movs	r3, #20
    3a58:	18fb      	adds	r3, r7, r3
    3a5a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3a5c:	68bb      	ldr	r3, [r7, #8]
    3a5e:	b2da      	uxtb	r2, r3
    3a60:	2314      	movs	r3, #20
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	0e1b      	lsrs	r3, r3, #24
    3a6a:	b2da      	uxtb	r2, r3
    3a6c:	2314      	movs	r3, #20
    3a6e:	18fb      	adds	r3, r7, r3
    3a70:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	0c1b      	lsrs	r3, r3, #16
    3a76:	b2da      	uxtb	r2, r3
    3a78:	2314      	movs	r3, #20
    3a7a:	18fb      	adds	r3, r7, r3
    3a7c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	0a1b      	lsrs	r3, r3, #8
    3a82:	b2da      	uxtb	r2, r3
    3a84:	2314      	movs	r3, #20
    3a86:	18fb      	adds	r3, r7, r3
    3a88:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	b2da      	uxtb	r2, r3
    3a8e:	2314      	movs	r3, #20
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	71da      	strb	r2, [r3, #7]
		len = 9;
    3a94:	231f      	movs	r3, #31
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	2209      	movs	r2, #9
    3a9a:	701a      	strb	r2, [r3, #0]
		break;
    3a9c:	e004      	b.n	3aa8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3a9e:	231e      	movs	r3, #30
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	2200      	movs	r2, #0
    3aa4:	701a      	strb	r2, [r3, #0]
		break;
    3aa6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3aa8:	231e      	movs	r3, #30
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	b25b      	sxtb	r3, r3
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d03f      	beq.n	3b34 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3ab4:	4b24      	ldr	r3, [pc, #144]	; (3b48 <spi_cmd+0x320>)
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d115      	bne.n	3ae8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3abc:	231f      	movs	r3, #31
    3abe:	18fb      	adds	r3, r7, r3
    3ac0:	781b      	ldrb	r3, [r3, #0]
    3ac2:	1e5c      	subs	r4, r3, #1
    3ac4:	231f      	movs	r3, #31
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	3b01      	subs	r3, #1
    3acc:	001a      	movs	r2, r3
    3ace:	2314      	movs	r3, #20
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	0019      	movs	r1, r3
    3ad4:	207f      	movs	r0, #127	; 0x7f
    3ad6:	4b1d      	ldr	r3, [pc, #116]	; (3b4c <spi_cmd+0x324>)
    3ad8:	4798      	blx	r3
    3ada:	0003      	movs	r3, r0
    3adc:	18db      	adds	r3, r3, r3
    3ade:	b2da      	uxtb	r2, r3
    3ae0:	2314      	movs	r3, #20
    3ae2:	18fb      	adds	r3, r7, r3
    3ae4:	551a      	strb	r2, [r3, r4]
    3ae6:	e006      	b.n	3af6 <spi_cmd+0x2ce>
		else
			len-=1;
    3ae8:	231f      	movs	r3, #31
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	221f      	movs	r2, #31
    3aee:	18ba      	adds	r2, r7, r2
    3af0:	7812      	ldrb	r2, [r2, #0]
    3af2:	3a01      	subs	r2, #1
    3af4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3af6:	231f      	movs	r3, #31
    3af8:	18fb      	adds	r3, r7, r3
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	b29a      	uxth	r2, r3
    3afe:	2314      	movs	r3, #20
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	0011      	movs	r1, r2
    3b04:	0018      	movs	r0, r3
    3b06:	4b12      	ldr	r3, [pc, #72]	; (3b50 <spi_cmd+0x328>)
    3b08:	4798      	blx	r3
    3b0a:	1e03      	subs	r3, r0, #0
    3b0c:	d012      	beq.n	3b34 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3b0e:	2328      	movs	r3, #40	; 0x28
    3b10:	33ff      	adds	r3, #255	; 0xff
    3b12:	001a      	movs	r2, r3
    3b14:	490f      	ldr	r1, [pc, #60]	; (3b54 <spi_cmd+0x32c>)
    3b16:	4b10      	ldr	r3, [pc, #64]	; (3b58 <spi_cmd+0x330>)
    3b18:	0018      	movs	r0, r3
    3b1a:	4b10      	ldr	r3, [pc, #64]	; (3b5c <spi_cmd+0x334>)
    3b1c:	4798      	blx	r3
    3b1e:	4b10      	ldr	r3, [pc, #64]	; (3b60 <spi_cmd+0x338>)
    3b20:	0018      	movs	r0, r3
    3b22:	4b10      	ldr	r3, [pc, #64]	; (3b64 <spi_cmd+0x33c>)
    3b24:	4798      	blx	r3
    3b26:	200d      	movs	r0, #13
    3b28:	4b0f      	ldr	r3, [pc, #60]	; (3b68 <spi_cmd+0x340>)
    3b2a:	4798      	blx	r3
			result = N_FAIL;
    3b2c:	231e      	movs	r3, #30
    3b2e:	18fb      	adds	r3, r7, r3
    3b30:	2200      	movs	r2, #0
    3b32:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    3b34:	231e      	movs	r3, #30
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	b25b      	sxtb	r3, r3
}
    3b3c:	0018      	movs	r0, r3
    3b3e:	46bd      	mov	sp, r7
    3b40:	b009      	add	sp, #36	; 0x24
    3b42:	bd90      	pop	{r4, r7, pc}
    3b44:	0001e054 	.word	0x0001e054
    3b48:	200006d4 	.word	0x200006d4
    3b4c:	000037d9 	.word	0x000037d9
    3b50:	00003765 	.word	0x00003765
    3b54:	0001e090 	.word	0x0001e090
    3b58:	0001dafc 	.word	0x0001dafc
    3b5c:	0001bc4d 	.word	0x0001bc4d
    3b60:	0001db10 	.word	0x0001db10
    3b64:	0001bd69 	.word	0x0001bd69
    3b68:	0001bc81 	.word	0x0001bc81

00003b6c <spi_data_rsp>:
 sint8 spi_data_rsp(uint8 cmd)
{
    3b6c:	b590      	push	{r4, r7, lr}
    3b6e:	b085      	sub	sp, #20
    3b70:	af00      	add	r7, sp, #0
    3b72:	0002      	movs	r2, r0
    3b74:	1dfb      	adds	r3, r7, #7
    3b76:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3b78:	230e      	movs	r3, #14
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	2201      	movs	r2, #1
    3b7e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3b80:	4b31      	ldr	r3, [pc, #196]	; (3c48 <spi_data_rsp+0xdc>)
    3b82:	781b      	ldrb	r3, [r3, #0]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d104      	bne.n	3b92 <spi_data_rsp+0x26>
		len = 2;
    3b88:	230f      	movs	r3, #15
    3b8a:	18fb      	adds	r3, r7, r3
    3b8c:	2202      	movs	r2, #2
    3b8e:	701a      	strb	r2, [r3, #0]
    3b90:	e003      	b.n	3b9a <spi_data_rsp+0x2e>
	else
		len = 3;
    3b92:	230f      	movs	r3, #15
    3b94:	18fb      	adds	r3, r7, r3
    3b96:	2203      	movs	r2, #3
    3b98:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3b9a:	230f      	movs	r3, #15
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	b29a      	uxth	r2, r3
    3ba2:	2308      	movs	r3, #8
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	0011      	movs	r1, r2
    3ba8:	0018      	movs	r0, r3
    3baa:	4b28      	ldr	r3, [pc, #160]	; (3c4c <spi_data_rsp+0xe0>)
    3bac:	4798      	blx	r3
    3bae:	1e03      	subs	r3, r0, #0
    3bb0:	d012      	beq.n	3bd8 <spi_data_rsp+0x6c>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3bb2:	239d      	movs	r3, #157	; 0x9d
    3bb4:	005a      	lsls	r2, r3, #1
    3bb6:	4926      	ldr	r1, [pc, #152]	; (3c50 <spi_data_rsp+0xe4>)
    3bb8:	4b26      	ldr	r3, [pc, #152]	; (3c54 <spi_data_rsp+0xe8>)
    3bba:	0018      	movs	r0, r3
    3bbc:	4b26      	ldr	r3, [pc, #152]	; (3c58 <spi_data_rsp+0xec>)
    3bbe:	4798      	blx	r3
    3bc0:	4b26      	ldr	r3, [pc, #152]	; (3c5c <spi_data_rsp+0xf0>)
    3bc2:	0018      	movs	r0, r3
    3bc4:	4b26      	ldr	r3, [pc, #152]	; (3c60 <spi_data_rsp+0xf4>)
    3bc6:	4798      	blx	r3
    3bc8:	200d      	movs	r0, #13
    3bca:	4b26      	ldr	r3, [pc, #152]	; (3c64 <spi_data_rsp+0xf8>)
    3bcc:	4798      	blx	r3
		result = N_FAIL;
    3bce:	230e      	movs	r3, #14
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	2200      	movs	r2, #0
    3bd4:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3bd6:	e02f      	b.n	3c38 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3bd8:	230f      	movs	r3, #15
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	781b      	ldrb	r3, [r3, #0]
    3bde:	3b01      	subs	r3, #1
    3be0:	2208      	movs	r2, #8
    3be2:	18ba      	adds	r2, r7, r2
    3be4:	5cd3      	ldrb	r3, [r2, r3]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d108      	bne.n	3bfc <spi_data_rsp+0x90>
    3bea:	230f      	movs	r3, #15
    3bec:	18fb      	adds	r3, r7, r3
    3bee:	781b      	ldrb	r3, [r3, #0]
    3bf0:	3b02      	subs	r3, #2
    3bf2:	2208      	movs	r2, #8
    3bf4:	18ba      	adds	r2, r7, r2
    3bf6:	5cd3      	ldrb	r3, [r2, r3]
    3bf8:	2bc3      	cmp	r3, #195	; 0xc3
    3bfa:	d01d      	beq.n	3c38 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3bfc:	2342      	movs	r3, #66	; 0x42
    3bfe:	33ff      	adds	r3, #255	; 0xff
    3c00:	001a      	movs	r2, r3
    3c02:	4913      	ldr	r1, [pc, #76]	; (3c50 <spi_data_rsp+0xe4>)
    3c04:	4b13      	ldr	r3, [pc, #76]	; (3c54 <spi_data_rsp+0xe8>)
    3c06:	0018      	movs	r0, r3
    3c08:	4b13      	ldr	r3, [pc, #76]	; (3c58 <spi_data_rsp+0xec>)
    3c0a:	4798      	blx	r3
    3c0c:	2308      	movs	r3, #8
    3c0e:	18fb      	adds	r3, r7, r3
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	0019      	movs	r1, r3
    3c14:	2308      	movs	r3, #8
    3c16:	18fb      	adds	r3, r7, r3
    3c18:	785b      	ldrb	r3, [r3, #1]
    3c1a:	001a      	movs	r2, r3
    3c1c:	2308      	movs	r3, #8
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	789b      	ldrb	r3, [r3, #2]
    3c22:	4811      	ldr	r0, [pc, #68]	; (3c68 <spi_data_rsp+0xfc>)
    3c24:	4c0c      	ldr	r4, [pc, #48]	; (3c58 <spi_data_rsp+0xec>)
    3c26:	47a0      	blx	r4
    3c28:	200d      	movs	r0, #13
    3c2a:	4b0e      	ldr	r3, [pc, #56]	; (3c64 <spi_data_rsp+0xf8>)
    3c2c:	4798      	blx	r3
		result = N_FAIL;
    3c2e:	230e      	movs	r3, #14
    3c30:	18fb      	adds	r3, r7, r3
    3c32:	2200      	movs	r2, #0
    3c34:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3c36:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    3c38:	230e      	movs	r3, #14
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	b25b      	sxtb	r3, r3
}
    3c40:	0018      	movs	r0, r3
    3c42:	46bd      	mov	sp, r7
    3c44:	b005      	add	sp, #20
    3c46:	bd90      	pop	{r4, r7, pc}
    3c48:	200006d4 	.word	0x200006d4
    3c4c:	00003721 	.word	0x00003721
    3c50:	0001e098 	.word	0x0001e098
    3c54:	0001dafc 	.word	0x0001dafc
    3c58:	0001bc4d 	.word	0x0001bc4d
    3c5c:	0001db3c 	.word	0x0001db3c
    3c60:	0001bd69 	.word	0x0001bd69
    3c64:	0001bc81 	.word	0x0001bc81
    3c68:	0001db5c 	.word	0x0001db5c

00003c6c <spi_cmd_rsp>:

 sint8 spi_cmd_rsp(uint8 cmd)
{
    3c6c:	b580      	push	{r7, lr}
    3c6e:	b084      	sub	sp, #16
    3c70:	af00      	add	r7, sp, #0
    3c72:	0002      	movs	r2, r0
    3c74:	1dfb      	adds	r3, r7, #7
    3c76:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3c78:	230f      	movs	r3, #15
    3c7a:	18fb      	adds	r3, r7, r3
    3c7c:	2201      	movs	r2, #1
    3c7e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3c80:	1dfb      	adds	r3, r7, #7
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	2bcf      	cmp	r3, #207	; 0xcf
    3c86:	d007      	beq.n	3c98 <spi_cmd_rsp+0x2c>
    3c88:	1dfb      	adds	r3, r7, #7
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	2bc5      	cmp	r3, #197	; 0xc5
    3c8e:	d003      	beq.n	3c98 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3c90:	1dfb      	adds	r3, r7, #7
    3c92:	781b      	ldrb	r3, [r3, #0]
    3c94:	2bc6      	cmp	r3, #198	; 0xc6
    3c96:	d10c      	bne.n	3cb2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3c98:	230d      	movs	r3, #13
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	2101      	movs	r1, #1
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b3a      	ldr	r3, [pc, #232]	; (3d8c <spi_cmd_rsp+0x120>)
    3ca2:	4798      	blx	r3
    3ca4:	1e03      	subs	r3, r0, #0
    3ca6:	d004      	beq.n	3cb2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3ca8:	230f      	movs	r3, #15
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3cb0:	e063      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3cb2:	230e      	movs	r3, #14
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	220a      	movs	r2, #10
    3cb8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3cba:	230d      	movs	r3, #13
    3cbc:	18fb      	adds	r3, r7, r3
    3cbe:	2101      	movs	r1, #1
    3cc0:	0018      	movs	r0, r3
    3cc2:	4b32      	ldr	r3, [pc, #200]	; (3d8c <spi_cmd_rsp+0x120>)
    3cc4:	4798      	blx	r3
    3cc6:	1e03      	subs	r3, r0, #0
    3cc8:	d013      	beq.n	3cf2 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3cca:	2362      	movs	r3, #98	; 0x62
    3ccc:	33ff      	adds	r3, #255	; 0xff
    3cce:	001a      	movs	r2, r3
    3cd0:	492f      	ldr	r1, [pc, #188]	; (3d90 <spi_cmd_rsp+0x124>)
    3cd2:	4b30      	ldr	r3, [pc, #192]	; (3d94 <spi_cmd_rsp+0x128>)
    3cd4:	0018      	movs	r0, r3
    3cd6:	4b30      	ldr	r3, [pc, #192]	; (3d98 <spi_cmd_rsp+0x12c>)
    3cd8:	4798      	blx	r3
    3cda:	4b30      	ldr	r3, [pc, #192]	; (3d9c <spi_cmd_rsp+0x130>)
    3cdc:	0018      	movs	r0, r3
    3cde:	4b30      	ldr	r3, [pc, #192]	; (3da0 <spi_cmd_rsp+0x134>)
    3ce0:	4798      	blx	r3
    3ce2:	200d      	movs	r0, #13
    3ce4:	4b2f      	ldr	r3, [pc, #188]	; (3da4 <spi_cmd_rsp+0x138>)
    3ce6:	4798      	blx	r3
			result = N_FAIL;
    3ce8:	230f      	movs	r3, #15
    3cea:	18fb      	adds	r3, r7, r3
    3cec:	2200      	movs	r2, #0
    3cee:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3cf0:	e043      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3cf2:	230d      	movs	r3, #13
    3cf4:	18fb      	adds	r3, r7, r3
    3cf6:	781b      	ldrb	r3, [r3, #0]
    3cf8:	1dfa      	adds	r2, r7, #7
    3cfa:	7812      	ldrb	r2, [r2, #0]
    3cfc:	429a      	cmp	r2, r3
    3cfe:	d00b      	beq.n	3d18 <spi_cmd_rsp+0xac>
    3d00:	230e      	movs	r3, #14
    3d02:	18fb      	adds	r3, r7, r3
    3d04:	781b      	ldrb	r3, [r3, #0]
    3d06:	b25b      	sxtb	r3, r3
    3d08:	b2da      	uxtb	r2, r3
    3d0a:	3a01      	subs	r2, #1
    3d0c:	b2d1      	uxtb	r1, r2
    3d0e:	220e      	movs	r2, #14
    3d10:	18ba      	adds	r2, r7, r2
    3d12:	7011      	strb	r1, [r2, #0]
    3d14:	2b00      	cmp	r3, #0
    3d16:	dcd0      	bgt.n	3cba <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3d18:	230e      	movs	r3, #14
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	220a      	movs	r2, #10
    3d1e:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3d20:	230d      	movs	r3, #13
    3d22:	18fb      	adds	r3, r7, r3
    3d24:	2101      	movs	r1, #1
    3d26:	0018      	movs	r0, r3
    3d28:	4b18      	ldr	r3, [pc, #96]	; (3d8c <spi_cmd_rsp+0x120>)
    3d2a:	4798      	blx	r3
    3d2c:	1e03      	subs	r3, r0, #0
    3d2e:	d013      	beq.n	3d58 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3d30:	2370      	movs	r3, #112	; 0x70
    3d32:	33ff      	adds	r3, #255	; 0xff
    3d34:	001a      	movs	r2, r3
    3d36:	4916      	ldr	r1, [pc, #88]	; (3d90 <spi_cmd_rsp+0x124>)
    3d38:	4b16      	ldr	r3, [pc, #88]	; (3d94 <spi_cmd_rsp+0x128>)
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b16      	ldr	r3, [pc, #88]	; (3d98 <spi_cmd_rsp+0x12c>)
    3d3e:	4798      	blx	r3
    3d40:	4b16      	ldr	r3, [pc, #88]	; (3d9c <spi_cmd_rsp+0x130>)
    3d42:	0018      	movs	r0, r3
    3d44:	4b16      	ldr	r3, [pc, #88]	; (3da0 <spi_cmd_rsp+0x134>)
    3d46:	4798      	blx	r3
    3d48:	200d      	movs	r0, #13
    3d4a:	4b16      	ldr	r3, [pc, #88]	; (3da4 <spi_cmd_rsp+0x138>)
    3d4c:	4798      	blx	r3
			result = N_FAIL;
    3d4e:	230f      	movs	r3, #15
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	2200      	movs	r2, #0
    3d54:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3d56:	e010      	b.n	3d7a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3d58:	230d      	movs	r3, #13
    3d5a:	18fb      	adds	r3, r7, r3
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d00b      	beq.n	3d7a <spi_cmd_rsp+0x10e>
    3d62:	230e      	movs	r3, #14
    3d64:	18fb      	adds	r3, r7, r3
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	b25b      	sxtb	r3, r3
    3d6a:	b2da      	uxtb	r2, r3
    3d6c:	3a01      	subs	r2, #1
    3d6e:	b2d1      	uxtb	r1, r2
    3d70:	220e      	movs	r2, #14
    3d72:	18ba      	adds	r2, r7, r2
    3d74:	7011      	strb	r1, [r2, #0]
    3d76:	2b00      	cmp	r3, #0
    3d78:	dcd2      	bgt.n	3d20 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    3d7a:	230f      	movs	r3, #15
    3d7c:	18fb      	adds	r3, r7, r3
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	b25b      	sxtb	r3, r3
}
    3d82:	0018      	movs	r0, r3
    3d84:	46bd      	mov	sp, r7
    3d86:	b004      	add	sp, #16
    3d88:	bd80      	pop	{r7, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00003721 	.word	0x00003721
    3d90:	0001e0a8 	.word	0x0001e0a8
    3d94:	0001dafc 	.word	0x0001dafc
    3d98:	0001bc4d 	.word	0x0001bc4d
    3d9c:	0001db8c 	.word	0x0001db8c
    3da0:	0001bd69 	.word	0x0001bd69
    3da4:	0001bc81 	.word	0x0001bc81

00003da8 <spi_data_read>:
_error_:
	return result;
}
#endif
 sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3da8:	b580      	push	{r7, lr}
    3daa:	b086      	sub	sp, #24
    3dac:	af00      	add	r7, sp, #0
    3dae:	6078      	str	r0, [r7, #4]
    3db0:	0008      	movs	r0, r1
    3db2:	0011      	movs	r1, r2
    3db4:	1cbb      	adds	r3, r7, #2
    3db6:	1c02      	adds	r2, r0, #0
    3db8:	801a      	strh	r2, [r3, #0]
    3dba:	1c7b      	adds	r3, r7, #1
    3dbc:	1c0a      	adds	r2, r1, #0
    3dbe:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3dc0:	2311      	movs	r3, #17
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	2201      	movs	r2, #1
    3dc6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3dc8:	2314      	movs	r3, #20
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	2200      	movs	r2, #0
    3dce:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3dd0:	1cbb      	adds	r3, r7, #2
    3dd2:	881a      	ldrh	r2, [r3, #0]
    3dd4:	2380      	movs	r3, #128	; 0x80
    3dd6:	019b      	lsls	r3, r3, #6
    3dd8:	429a      	cmp	r2, r3
    3dda:	d805      	bhi.n	3de8 <spi_data_read+0x40>
			nbytes = sz;
    3ddc:	2312      	movs	r3, #18
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	1cba      	adds	r2, r7, #2
    3de2:	8812      	ldrh	r2, [r2, #0]
    3de4:	801a      	strh	r2, [r3, #0]
    3de6:	e004      	b.n	3df2 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3de8:	2312      	movs	r3, #18
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	2280      	movs	r2, #128	; 0x80
    3dee:	0192      	lsls	r2, r2, #6
    3df0:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    3df2:	2316      	movs	r3, #22
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	220a      	movs	r2, #10
    3df8:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3dfa:	230b      	movs	r3, #11
    3dfc:	18fb      	adds	r3, r7, r3
    3dfe:	2101      	movs	r1, #1
    3e00:	0018      	movs	r0, r3
    3e02:	4b5b      	ldr	r3, [pc, #364]	; (3f70 <spi_data_read+0x1c8>)
    3e04:	4798      	blx	r3
    3e06:	1e03      	subs	r3, r0, #0
    3e08:	d011      	beq.n	3e2e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3e0a:	4a5a      	ldr	r2, [pc, #360]	; (3f74 <spi_data_read+0x1cc>)
    3e0c:	495a      	ldr	r1, [pc, #360]	; (3f78 <spi_data_read+0x1d0>)
    3e0e:	4b5b      	ldr	r3, [pc, #364]	; (3f7c <spi_data_read+0x1d4>)
    3e10:	0018      	movs	r0, r3
    3e12:	4b5b      	ldr	r3, [pc, #364]	; (3f80 <spi_data_read+0x1d8>)
    3e14:	4798      	blx	r3
    3e16:	4b5b      	ldr	r3, [pc, #364]	; (3f84 <spi_data_read+0x1dc>)
    3e18:	0018      	movs	r0, r3
    3e1a:	4b5b      	ldr	r3, [pc, #364]	; (3f88 <spi_data_read+0x1e0>)
    3e1c:	4798      	blx	r3
    3e1e:	200d      	movs	r0, #13
    3e20:	4b5a      	ldr	r3, [pc, #360]	; (3f8c <spi_data_read+0x1e4>)
    3e22:	4798      	blx	r3
				result = N_FAIL;
    3e24:	2311      	movs	r3, #17
    3e26:	18fb      	adds	r3, r7, r3
    3e28:	2200      	movs	r2, #0
    3e2a:	701a      	strb	r2, [r3, #0]
				break;
    3e2c:	e017      	b.n	3e5e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    3e2e:	230b      	movs	r3, #11
    3e30:	18fb      	adds	r3, r7, r3
    3e32:	781b      	ldrb	r3, [r3, #0]
    3e34:	091b      	lsrs	r3, r3, #4
    3e36:	b2db      	uxtb	r3, r3
    3e38:	001a      	movs	r2, r3
    3e3a:	230f      	movs	r3, #15
    3e3c:	4013      	ands	r3, r2
    3e3e:	2b0f      	cmp	r3, #15
    3e40:	d00c      	beq.n	3e5c <spi_data_read+0xb4>
				break;
		} while (retry--);
    3e42:	2316      	movs	r3, #22
    3e44:	18fb      	adds	r3, r7, r3
    3e46:	2200      	movs	r2, #0
    3e48:	5e9b      	ldrsh	r3, [r3, r2]
    3e4a:	b29a      	uxth	r2, r3
    3e4c:	3a01      	subs	r2, #1
    3e4e:	b291      	uxth	r1, r2
    3e50:	2216      	movs	r2, #22
    3e52:	18ba      	adds	r2, r7, r2
    3e54:	8011      	strh	r1, [r2, #0]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d1cf      	bne.n	3dfa <spi_data_read+0x52>
    3e5a:	e000      	b.n	3e5e <spi_data_read+0xb6>
				break;
    3e5c:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3e5e:	2311      	movs	r3, #17
    3e60:	18fb      	adds	r3, r7, r3
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	b25b      	sxtb	r3, r3
    3e66:	2b00      	cmp	r3, #0
    3e68:	d100      	bne.n	3e6c <spi_data_read+0xc4>
    3e6a:	e078      	b.n	3f5e <spi_data_read+0x1b6>
			break;

		if (retry <= 0) {
    3e6c:	2316      	movs	r3, #22
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	2200      	movs	r2, #0
    3e72:	5e9b      	ldrsh	r3, [r3, r2]
    3e74:	2b00      	cmp	r3, #0
    3e76:	dc16      	bgt.n	3ea6 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3e78:	4a45      	ldr	r2, [pc, #276]	; (3f90 <spi_data_read+0x1e8>)
    3e7a:	493f      	ldr	r1, [pc, #252]	; (3f78 <spi_data_read+0x1d0>)
    3e7c:	4b3f      	ldr	r3, [pc, #252]	; (3f7c <spi_data_read+0x1d4>)
    3e7e:	0018      	movs	r0, r3
    3e80:	4b3f      	ldr	r3, [pc, #252]	; (3f80 <spi_data_read+0x1d8>)
    3e82:	4798      	blx	r3
    3e84:	230b      	movs	r3, #11
    3e86:	18fb      	adds	r3, r7, r3
    3e88:	781b      	ldrb	r3, [r3, #0]
    3e8a:	001a      	movs	r2, r3
    3e8c:	4b41      	ldr	r3, [pc, #260]	; (3f94 <spi_data_read+0x1ec>)
    3e8e:	0011      	movs	r1, r2
    3e90:	0018      	movs	r0, r3
    3e92:	4b3b      	ldr	r3, [pc, #236]	; (3f80 <spi_data_read+0x1d8>)
    3e94:	4798      	blx	r3
    3e96:	200d      	movs	r0, #13
    3e98:	4b3c      	ldr	r3, [pc, #240]	; (3f8c <spi_data_read+0x1e4>)
    3e9a:	4798      	blx	r3
			result = N_FAIL;
    3e9c:	2311      	movs	r3, #17
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	2200      	movs	r2, #0
    3ea2:	701a      	strb	r2, [r3, #0]
			break;
    3ea4:	e05c      	b.n	3f60 <spi_data_read+0x1b8>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3ea6:	2314      	movs	r3, #20
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	2200      	movs	r2, #0
    3eac:	5e9b      	ldrsh	r3, [r3, r2]
    3eae:	687a      	ldr	r2, [r7, #4]
    3eb0:	18d2      	adds	r2, r2, r3
    3eb2:	2312      	movs	r3, #18
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	881b      	ldrh	r3, [r3, #0]
    3eb8:	0019      	movs	r1, r3
    3eba:	0010      	movs	r0, r2
    3ebc:	4b2c      	ldr	r3, [pc, #176]	; (3f70 <spi_data_read+0x1c8>)
    3ebe:	4798      	blx	r3
    3ec0:	1e03      	subs	r3, r0, #0
    3ec2:	d011      	beq.n	3ee8 <spi_data_read+0x140>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3ec4:	4a34      	ldr	r2, [pc, #208]	; (3f98 <spi_data_read+0x1f0>)
    3ec6:	492c      	ldr	r1, [pc, #176]	; (3f78 <spi_data_read+0x1d0>)
    3ec8:	4b2c      	ldr	r3, [pc, #176]	; (3f7c <spi_data_read+0x1d4>)
    3eca:	0018      	movs	r0, r3
    3ecc:	4b2c      	ldr	r3, [pc, #176]	; (3f80 <spi_data_read+0x1d8>)
    3ece:	4798      	blx	r3
    3ed0:	4b32      	ldr	r3, [pc, #200]	; (3f9c <spi_data_read+0x1f4>)
    3ed2:	0018      	movs	r0, r3
    3ed4:	4b2c      	ldr	r3, [pc, #176]	; (3f88 <spi_data_read+0x1e0>)
    3ed6:	4798      	blx	r3
    3ed8:	200d      	movs	r0, #13
    3eda:	4b2c      	ldr	r3, [pc, #176]	; (3f8c <spi_data_read+0x1e4>)
    3edc:	4798      	blx	r3
			result = N_FAIL;
    3ede:	2311      	movs	r3, #17
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	2200      	movs	r2, #0
    3ee4:	701a      	strb	r2, [r3, #0]
			break;
    3ee6:	e03b      	b.n	3f60 <spi_data_read+0x1b8>
		}
		if(!clockless)
    3ee8:	1c7b      	adds	r3, r7, #1
    3eea:	781b      	ldrb	r3, [r3, #0]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d11d      	bne.n	3f2c <spi_data_read+0x184>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3ef0:	4b2b      	ldr	r3, [pc, #172]	; (3fa0 <spi_data_read+0x1f8>)
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d119      	bne.n	3f2c <spi_data_read+0x184>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3ef8:	230c      	movs	r3, #12
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	2102      	movs	r1, #2
    3efe:	0018      	movs	r0, r3
    3f00:	4b1b      	ldr	r3, [pc, #108]	; (3f70 <spi_data_read+0x1c8>)
    3f02:	4798      	blx	r3
    3f04:	1e03      	subs	r3, r0, #0
    3f06:	d011      	beq.n	3f2c <spi_data_read+0x184>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3f08:	4a26      	ldr	r2, [pc, #152]	; (3fa4 <spi_data_read+0x1fc>)
    3f0a:	491b      	ldr	r1, [pc, #108]	; (3f78 <spi_data_read+0x1d0>)
    3f0c:	4b1b      	ldr	r3, [pc, #108]	; (3f7c <spi_data_read+0x1d4>)
    3f0e:	0018      	movs	r0, r3
    3f10:	4b1b      	ldr	r3, [pc, #108]	; (3f80 <spi_data_read+0x1d8>)
    3f12:	4798      	blx	r3
    3f14:	4b24      	ldr	r3, [pc, #144]	; (3fa8 <spi_data_read+0x200>)
    3f16:	0018      	movs	r0, r3
    3f18:	4b1b      	ldr	r3, [pc, #108]	; (3f88 <spi_data_read+0x1e0>)
    3f1a:	4798      	blx	r3
    3f1c:	200d      	movs	r0, #13
    3f1e:	4b1b      	ldr	r3, [pc, #108]	; (3f8c <spi_data_read+0x1e4>)
    3f20:	4798      	blx	r3
					result = N_FAIL;
    3f22:	2311      	movs	r3, #17
    3f24:	18fb      	adds	r3, r7, r3
    3f26:	2200      	movs	r2, #0
    3f28:	701a      	strb	r2, [r3, #0]
					break;
    3f2a:	e019      	b.n	3f60 <spi_data_read+0x1b8>
				}
			}
		}
		ix += nbytes;
    3f2c:	2314      	movs	r3, #20
    3f2e:	18fb      	adds	r3, r7, r3
    3f30:	881a      	ldrh	r2, [r3, #0]
    3f32:	2312      	movs	r3, #18
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	881b      	ldrh	r3, [r3, #0]
    3f38:	18d3      	adds	r3, r2, r3
    3f3a:	b29a      	uxth	r2, r3
    3f3c:	2314      	movs	r3, #20
    3f3e:	18fb      	adds	r3, r7, r3
    3f40:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3f42:	2312      	movs	r3, #18
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	881a      	ldrh	r2, [r3, #0]
    3f48:	1cbb      	adds	r3, r7, #2
    3f4a:	1cb9      	adds	r1, r7, #2
    3f4c:	8809      	ldrh	r1, [r1, #0]
    3f4e:	1a8a      	subs	r2, r1, r2
    3f50:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3f52:	1cbb      	adds	r3, r7, #2
    3f54:	881b      	ldrh	r3, [r3, #0]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d000      	beq.n	3f5c <spi_data_read+0x1b4>
    3f5a:	e739      	b.n	3dd0 <spi_data_read+0x28>
    3f5c:	e000      	b.n	3f60 <spi_data_read+0x1b8>
			break;
    3f5e:	46c0      	nop			; (mov r8, r8)

	return result;
    3f60:	2311      	movs	r3, #17
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	b25b      	sxtb	r3, r3
}
    3f68:	0018      	movs	r0, r3
    3f6a:	46bd      	mov	sp, r7
    3f6c:	b006      	add	sp, #24
    3f6e:	bd80      	pop	{r7, pc}
    3f70:	00003721 	.word	0x00003721
    3f74:	000002fe 	.word	0x000002fe
    3f78:	0001e0b4 	.word	0x0001e0b4
    3f7c:	0001dafc 	.word	0x0001dafc
    3f80:	0001bc4d 	.word	0x0001bc4d
    3f84:	0001dbc0 	.word	0x0001dbc0
    3f88:	0001bd69 	.word	0x0001bd69
    3f8c:	0001bc81 	.word	0x0001bc81
    3f90:	0000030a 	.word	0x0000030a
    3f94:	0001dbf4 	.word	0x0001dbf4
    3f98:	00000313 	.word	0x00000313
    3f9c:	0001dc24 	.word	0x0001dc24
    3fa0:	200006d4 	.word	0x200006d4
    3fa4:	0000031e 	.word	0x0000031e
    3fa8:	0001dc54 	.word	0x0001dc54

00003fac <spi_data_write>:

 sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b086      	sub	sp, #24
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	000a      	movs	r2, r1
    3fb6:	1cbb      	adds	r3, r7, #2
    3fb8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3fba:	2313      	movs	r3, #19
    3fbc:	18fb      	adds	r3, r7, r3
    3fbe:	2201      	movs	r2, #1
    3fc0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3fc2:	230c      	movs	r3, #12
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	2200      	movs	r2, #0
    3fc8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3fca:	2316      	movs	r3, #22
    3fcc:	18fb      	adds	r3, r7, r3
    3fce:	2200      	movs	r2, #0
    3fd0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3fd2:	1cbb      	adds	r3, r7, #2
    3fd4:	881a      	ldrh	r2, [r3, #0]
    3fd6:	2380      	movs	r3, #128	; 0x80
    3fd8:	019b      	lsls	r3, r3, #6
    3fda:	429a      	cmp	r2, r3
    3fdc:	d805      	bhi.n	3fea <spi_data_write+0x3e>
			nbytes = sz;
    3fde:	2314      	movs	r3, #20
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	1cba      	adds	r2, r7, #2
    3fe4:	8812      	ldrh	r2, [r2, #0]
    3fe6:	801a      	strh	r2, [r3, #0]
    3fe8:	e004      	b.n	3ff4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3fea:	2314      	movs	r3, #20
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	2280      	movs	r2, #128	; 0x80
    3ff0:	0192      	lsls	r2, r2, #6
    3ff2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3ff4:	2311      	movs	r3, #17
    3ff6:	18fb      	adds	r3, r7, r3
    3ff8:	22f0      	movs	r2, #240	; 0xf0
    3ffa:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3ffc:	2316      	movs	r3, #22
    3ffe:	18fb      	adds	r3, r7, r3
    4000:	2200      	movs	r2, #0
    4002:	5e9b      	ldrsh	r3, [r3, r2]
    4004:	2b00      	cmp	r3, #0
    4006:	d10f      	bne.n	4028 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    4008:	1cbb      	adds	r3, r7, #2
    400a:	881a      	ldrh	r2, [r3, #0]
    400c:	2380      	movs	r3, #128	; 0x80
    400e:	019b      	lsls	r3, r3, #6
    4010:	429a      	cmp	r2, r3
    4012:	d804      	bhi.n	401e <spi_data_write+0x72>
				order = 0x3;
    4014:	2312      	movs	r3, #18
    4016:	18fb      	adds	r3, r7, r3
    4018:	2203      	movs	r2, #3
    401a:	701a      	strb	r2, [r3, #0]
    401c:	e013      	b.n	4046 <spi_data_write+0x9a>
			else
				order = 0x1;
    401e:	2312      	movs	r3, #18
    4020:	18fb      	adds	r3, r7, r3
    4022:	2201      	movs	r2, #1
    4024:	701a      	strb	r2, [r3, #0]
    4026:	e00e      	b.n	4046 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    4028:	1cbb      	adds	r3, r7, #2
    402a:	881a      	ldrh	r2, [r3, #0]
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	019b      	lsls	r3, r3, #6
    4030:	429a      	cmp	r2, r3
    4032:	d804      	bhi.n	403e <spi_data_write+0x92>
				order = 0x3;
    4034:	2312      	movs	r3, #18
    4036:	18fb      	adds	r3, r7, r3
    4038:	2203      	movs	r2, #3
    403a:	701a      	strb	r2, [r3, #0]
    403c:	e003      	b.n	4046 <spi_data_write+0x9a>
			else
				order = 0x2;
    403e:	2312      	movs	r3, #18
    4040:	18fb      	adds	r3, r7, r3
    4042:	2202      	movs	r2, #2
    4044:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    4046:	2311      	movs	r3, #17
    4048:	18fb      	adds	r3, r7, r3
    404a:	781a      	ldrb	r2, [r3, #0]
    404c:	2312      	movs	r3, #18
    404e:	18fb      	adds	r3, r7, r3
    4050:	781b      	ldrb	r3, [r3, #0]
    4052:	4313      	orrs	r3, r2
    4054:	b2da      	uxtb	r2, r3
    4056:	2311      	movs	r3, #17
    4058:	18fb      	adds	r3, r7, r3
    405a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    405c:	2311      	movs	r3, #17
    405e:	18fb      	adds	r3, r7, r3
    4060:	2101      	movs	r1, #1
    4062:	0018      	movs	r0, r3
    4064:	4b3a      	ldr	r3, [pc, #232]	; (4150 <spi_data_write+0x1a4>)
    4066:	4798      	blx	r3
    4068:	1e03      	subs	r3, r0, #0
    406a:	d011      	beq.n	4090 <spi_data_write+0xe4>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    406c:	4a39      	ldr	r2, [pc, #228]	; (4154 <spi_data_write+0x1a8>)
    406e:	493a      	ldr	r1, [pc, #232]	; (4158 <spi_data_write+0x1ac>)
    4070:	4b3a      	ldr	r3, [pc, #232]	; (415c <spi_data_write+0x1b0>)
    4072:	0018      	movs	r0, r3
    4074:	4b3a      	ldr	r3, [pc, #232]	; (4160 <spi_data_write+0x1b4>)
    4076:	4798      	blx	r3
    4078:	4b3a      	ldr	r3, [pc, #232]	; (4164 <spi_data_write+0x1b8>)
    407a:	0018      	movs	r0, r3
    407c:	4b3a      	ldr	r3, [pc, #232]	; (4168 <spi_data_write+0x1bc>)
    407e:	4798      	blx	r3
    4080:	200d      	movs	r0, #13
    4082:	4b3a      	ldr	r3, [pc, #232]	; (416c <spi_data_write+0x1c0>)
    4084:	4798      	blx	r3
			result = N_FAIL;
    4086:	2313      	movs	r3, #19
    4088:	18fb      	adds	r3, r7, r3
    408a:	2200      	movs	r2, #0
    408c:	701a      	strb	r2, [r3, #0]
			break;
    408e:	e057      	b.n	4140 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    4090:	2316      	movs	r3, #22
    4092:	18fb      	adds	r3, r7, r3
    4094:	2200      	movs	r2, #0
    4096:	5e9b      	ldrsh	r3, [r3, r2]
    4098:	687a      	ldr	r2, [r7, #4]
    409a:	18d2      	adds	r2, r2, r3
    409c:	2314      	movs	r3, #20
    409e:	18fb      	adds	r3, r7, r3
    40a0:	881b      	ldrh	r3, [r3, #0]
    40a2:	0019      	movs	r1, r3
    40a4:	0010      	movs	r0, r2
    40a6:	4b2a      	ldr	r3, [pc, #168]	; (4150 <spi_data_write+0x1a4>)
    40a8:	4798      	blx	r3
    40aa:	1e03      	subs	r3, r0, #0
    40ac:	d012      	beq.n	40d4 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    40ae:	23d6      	movs	r3, #214	; 0xd6
    40b0:	009a      	lsls	r2, r3, #2
    40b2:	4929      	ldr	r1, [pc, #164]	; (4158 <spi_data_write+0x1ac>)
    40b4:	4b29      	ldr	r3, [pc, #164]	; (415c <spi_data_write+0x1b0>)
    40b6:	0018      	movs	r0, r3
    40b8:	4b29      	ldr	r3, [pc, #164]	; (4160 <spi_data_write+0x1b4>)
    40ba:	4798      	blx	r3
    40bc:	4b2c      	ldr	r3, [pc, #176]	; (4170 <spi_data_write+0x1c4>)
    40be:	0018      	movs	r0, r3
    40c0:	4b29      	ldr	r3, [pc, #164]	; (4168 <spi_data_write+0x1bc>)
    40c2:	4798      	blx	r3
    40c4:	200d      	movs	r0, #13
    40c6:	4b29      	ldr	r3, [pc, #164]	; (416c <spi_data_write+0x1c0>)
    40c8:	4798      	blx	r3
			result = N_FAIL;
    40ca:	2313      	movs	r3, #19
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	2200      	movs	r2, #0
    40d0:	701a      	strb	r2, [r3, #0]
			break;
    40d2:	e035      	b.n	4140 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    40d4:	4b27      	ldr	r3, [pc, #156]	; (4174 <spi_data_write+0x1c8>)
    40d6:	781b      	ldrb	r3, [r3, #0]
    40d8:	2b00      	cmp	r3, #0
    40da:	d119      	bne.n	4110 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    40dc:	230c      	movs	r3, #12
    40de:	18fb      	adds	r3, r7, r3
    40e0:	2102      	movs	r1, #2
    40e2:	0018      	movs	r0, r3
    40e4:	4b1a      	ldr	r3, [pc, #104]	; (4150 <spi_data_write+0x1a4>)
    40e6:	4798      	blx	r3
    40e8:	1e03      	subs	r3, r0, #0
    40ea:	d011      	beq.n	4110 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    40ec:	4a22      	ldr	r2, [pc, #136]	; (4178 <spi_data_write+0x1cc>)
    40ee:	491a      	ldr	r1, [pc, #104]	; (4158 <spi_data_write+0x1ac>)
    40f0:	4b1a      	ldr	r3, [pc, #104]	; (415c <spi_data_write+0x1b0>)
    40f2:	0018      	movs	r0, r3
    40f4:	4b1a      	ldr	r3, [pc, #104]	; (4160 <spi_data_write+0x1b4>)
    40f6:	4798      	blx	r3
    40f8:	4b20      	ldr	r3, [pc, #128]	; (417c <spi_data_write+0x1d0>)
    40fa:	0018      	movs	r0, r3
    40fc:	4b1a      	ldr	r3, [pc, #104]	; (4168 <spi_data_write+0x1bc>)
    40fe:	4798      	blx	r3
    4100:	200d      	movs	r0, #13
    4102:	4b1a      	ldr	r3, [pc, #104]	; (416c <spi_data_write+0x1c0>)
    4104:	4798      	blx	r3
				result = N_FAIL;
    4106:	2313      	movs	r3, #19
    4108:	18fb      	adds	r3, r7, r3
    410a:	2200      	movs	r2, #0
    410c:	701a      	strb	r2, [r3, #0]
				break;
    410e:	e017      	b.n	4140 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    4110:	2316      	movs	r3, #22
    4112:	18fb      	adds	r3, r7, r3
    4114:	881a      	ldrh	r2, [r3, #0]
    4116:	2314      	movs	r3, #20
    4118:	18fb      	adds	r3, r7, r3
    411a:	881b      	ldrh	r3, [r3, #0]
    411c:	18d3      	adds	r3, r2, r3
    411e:	b29a      	uxth	r2, r3
    4120:	2316      	movs	r3, #22
    4122:	18fb      	adds	r3, r7, r3
    4124:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    4126:	1cbb      	adds	r3, r7, #2
    4128:	1cb9      	adds	r1, r7, #2
    412a:	2214      	movs	r2, #20
    412c:	18ba      	adds	r2, r7, r2
    412e:	8809      	ldrh	r1, [r1, #0]
    4130:	8812      	ldrh	r2, [r2, #0]
    4132:	1a8a      	subs	r2, r1, r2
    4134:	801a      	strh	r2, [r3, #0]
	} while (sz);
    4136:	1cbb      	adds	r3, r7, #2
    4138:	881b      	ldrh	r3, [r3, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d000      	beq.n	4140 <spi_data_write+0x194>
    413e:	e748      	b.n	3fd2 <spi_data_write+0x26>


	return result;
    4140:	2313      	movs	r3, #19
    4142:	18fb      	adds	r3, r7, r3
    4144:	781b      	ldrb	r3, [r3, #0]
    4146:	b25b      	sxtb	r3, r3
}
    4148:	0018      	movs	r0, r3
    414a:	46bd      	mov	sp, r7
    414c:	b006      	add	sp, #24
    414e:	bd80      	pop	{r7, pc}
    4150:	00003765 	.word	0x00003765
    4154:	0000034f 	.word	0x0000034f
    4158:	0001e0c4 	.word	0x0001e0c4
    415c:	0001dafc 	.word	0x0001dafc
    4160:	0001bc4d 	.word	0x0001bc4d
    4164:	0001dc88 	.word	0x0001dc88
    4168:	0001bd69 	.word	0x0001bd69
    416c:	0001bc81 	.word	0x0001bc81
    4170:	0001dcc0 	.word	0x0001dcc0
    4174:	200006d4 	.word	0x200006d4
    4178:	00000362 	.word	0x00000362
    417c:	0001dcf4 	.word	0x0001dcf4

00004180 <spi_write_reg>:
	Spi interfaces

********************************************/

 sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4180:	b5b0      	push	{r4, r5, r7, lr}
    4182:	b086      	sub	sp, #24
    4184:	af02      	add	r7, sp, #8
    4186:	6078      	str	r0, [r7, #4]
    4188:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    418a:	230f      	movs	r3, #15
    418c:	18fb      	adds	r3, r7, r3
    418e:	220a      	movs	r2, #10
    4190:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4192:	230e      	movs	r3, #14
    4194:	18fb      	adds	r3, r7, r3
    4196:	2201      	movs	r2, #1
    4198:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    419a:	230d      	movs	r3, #13
    419c:	18fb      	adds	r3, r7, r3
    419e:	22c9      	movs	r2, #201	; 0xc9
    41a0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    41a2:	230c      	movs	r3, #12
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	2200      	movs	r2, #0
    41a8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	2b30      	cmp	r3, #48	; 0x30
    41ae:	d808      	bhi.n	41c2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    41b0:	230d      	movs	r3, #13
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	22c3      	movs	r2, #195	; 0xc3
    41b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    41b8:	230c      	movs	r3, #12
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	2201      	movs	r2, #1
    41be:	701a      	strb	r2, [r3, #0]
    41c0:	e007      	b.n	41d2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    41c2:	230d      	movs	r3, #13
    41c4:	18fb      	adds	r3, r7, r3
    41c6:	22c9      	movs	r2, #201	; 0xc9
    41c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    41ca:	230c      	movs	r3, #12
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	2200      	movs	r2, #0
    41d0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    41d2:	230e      	movs	r3, #14
    41d4:	18fc      	adds	r4, r7, r3
    41d6:	683a      	ldr	r2, [r7, #0]
    41d8:	6879      	ldr	r1, [r7, #4]
    41da:	230d      	movs	r3, #13
    41dc:	18fb      	adds	r3, r7, r3
    41de:	7818      	ldrb	r0, [r3, #0]
    41e0:	230c      	movs	r3, #12
    41e2:	18fb      	adds	r3, r7, r3
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	9300      	str	r3, [sp, #0]
    41e8:	2304      	movs	r3, #4
    41ea:	4d3b      	ldr	r5, [pc, #236]	; (42d8 <spi_write_reg+0x158>)
    41ec:	47a8      	blx	r5
    41ee:	0003      	movs	r3, r0
    41f0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41f2:	230e      	movs	r3, #14
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b25b      	sxtb	r3, r3
    41fa:	2b01      	cmp	r3, #1
    41fc:	d00f      	beq.n	421e <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    41fe:	4a37      	ldr	r2, [pc, #220]	; (42dc <spi_write_reg+0x15c>)
    4200:	4937      	ldr	r1, [pc, #220]	; (42e0 <spi_write_reg+0x160>)
    4202:	4b38      	ldr	r3, [pc, #224]	; (42e4 <spi_write_reg+0x164>)
    4204:	0018      	movs	r0, r3
    4206:	4b38      	ldr	r3, [pc, #224]	; (42e8 <spi_write_reg+0x168>)
    4208:	4798      	blx	r3
    420a:	687a      	ldr	r2, [r7, #4]
    420c:	4b37      	ldr	r3, [pc, #220]	; (42ec <spi_write_reg+0x16c>)
    420e:	0011      	movs	r1, r2
    4210:	0018      	movs	r0, r3
    4212:	4b35      	ldr	r3, [pc, #212]	; (42e8 <spi_write_reg+0x168>)
    4214:	4798      	blx	r3
    4216:	200d      	movs	r0, #13
    4218:	4b35      	ldr	r3, [pc, #212]	; (42f0 <spi_write_reg+0x170>)
    421a:	4798      	blx	r3
		goto _FAIL_;
    421c:	e01f      	b.n	425e <spi_write_reg+0xde>
	}

	result = spi_cmd_rsp(cmd);
    421e:	230e      	movs	r3, #14
    4220:	18fc      	adds	r4, r7, r3
    4222:	230d      	movs	r3, #13
    4224:	18fb      	adds	r3, r7, r3
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	0018      	movs	r0, r3
    422a:	4b32      	ldr	r3, [pc, #200]	; (42f4 <spi_write_reg+0x174>)
    422c:	4798      	blx	r3
    422e:	0003      	movs	r3, r0
    4230:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4232:	230e      	movs	r3, #14
    4234:	18fb      	adds	r3, r7, r3
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	b25b      	sxtb	r3, r3
    423a:	2b01      	cmp	r3, #1
    423c:	d00f      	beq.n	425e <spi_write_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    423e:	4a2e      	ldr	r2, [pc, #184]	; (42f8 <spi_write_reg+0x178>)
    4240:	4927      	ldr	r1, [pc, #156]	; (42e0 <spi_write_reg+0x160>)
    4242:	4b28      	ldr	r3, [pc, #160]	; (42e4 <spi_write_reg+0x164>)
    4244:	0018      	movs	r0, r3
    4246:	4b28      	ldr	r3, [pc, #160]	; (42e8 <spi_write_reg+0x168>)
    4248:	4798      	blx	r3
    424a:	687a      	ldr	r2, [r7, #4]
    424c:	4b2b      	ldr	r3, [pc, #172]	; (42fc <spi_write_reg+0x17c>)
    424e:	0011      	movs	r1, r2
    4250:	0018      	movs	r0, r3
    4252:	4b25      	ldr	r3, [pc, #148]	; (42e8 <spi_write_reg+0x168>)
    4254:	4798      	blx	r3
    4256:	200d      	movs	r0, #13
    4258:	4b25      	ldr	r3, [pc, #148]	; (42f0 <spi_write_reg+0x170>)
    425a:	4798      	blx	r3
		goto _FAIL_;
    425c:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    425e:	230e      	movs	r3, #14
    4260:	18fb      	adds	r3, r7, r3
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	b25b      	sxtb	r3, r3
    4266:	2b01      	cmp	r3, #1
    4268:	d02e      	beq.n	42c8 <spi_write_reg+0x148>
	{
		nm_bsp_sleep(1);
    426a:	2001      	movs	r0, #1
    426c:	4b24      	ldr	r3, [pc, #144]	; (4300 <spi_write_reg+0x180>)
    426e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4270:	2300      	movs	r3, #0
    4272:	9300      	str	r3, [sp, #0]
    4274:	2300      	movs	r3, #0
    4276:	2200      	movs	r2, #0
    4278:	2100      	movs	r1, #0
    427a:	20cf      	movs	r0, #207	; 0xcf
    427c:	4c16      	ldr	r4, [pc, #88]	; (42d8 <spi_write_reg+0x158>)
    427e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4280:	20cf      	movs	r0, #207	; 0xcf
    4282:	4b1c      	ldr	r3, [pc, #112]	; (42f4 <spi_write_reg+0x174>)
    4284:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    4286:	4a1f      	ldr	r2, [pc, #124]	; (4304 <spi_write_reg+0x184>)
    4288:	4915      	ldr	r1, [pc, #84]	; (42e0 <spi_write_reg+0x160>)
    428a:	4b16      	ldr	r3, [pc, #88]	; (42e4 <spi_write_reg+0x164>)
    428c:	0018      	movs	r0, r3
    428e:	4b16      	ldr	r3, [pc, #88]	; (42e8 <spi_write_reg+0x168>)
    4290:	4798      	blx	r3
    4292:	230f      	movs	r3, #15
    4294:	18fb      	adds	r3, r7, r3
    4296:	7819      	ldrb	r1, [r3, #0]
    4298:	683b      	ldr	r3, [r7, #0]
    429a:	687a      	ldr	r2, [r7, #4]
    429c:	481a      	ldr	r0, [pc, #104]	; (4308 <spi_write_reg+0x188>)
    429e:	4c12      	ldr	r4, [pc, #72]	; (42e8 <spi_write_reg+0x168>)
    42a0:	47a0      	blx	r4
    42a2:	200d      	movs	r0, #13
    42a4:	4b12      	ldr	r3, [pc, #72]	; (42f0 <spi_write_reg+0x170>)
    42a6:	4798      	blx	r3
		nm_bsp_sleep(1);
    42a8:	2001      	movs	r0, #1
    42aa:	4b15      	ldr	r3, [pc, #84]	; (4300 <spi_write_reg+0x180>)
    42ac:	4798      	blx	r3
		retry--;
    42ae:	230f      	movs	r3, #15
    42b0:	18fb      	adds	r3, r7, r3
    42b2:	781a      	ldrb	r2, [r3, #0]
    42b4:	230f      	movs	r3, #15
    42b6:	18fb      	adds	r3, r7, r3
    42b8:	3a01      	subs	r2, #1
    42ba:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    42bc:	230f      	movs	r3, #15
    42be:	18fb      	adds	r3, r7, r3
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d000      	beq.n	42c8 <spi_write_reg+0x148>
    42c6:	e770      	b.n	41aa <spi_write_reg+0x2a>
	}

	return result;
    42c8:	230e      	movs	r3, #14
    42ca:	18fb      	adds	r3, r7, r3
    42cc:	781b      	ldrb	r3, [r3, #0]
    42ce:	b25b      	sxtb	r3, r3
}
    42d0:	0018      	movs	r0, r3
    42d2:	46bd      	mov	sp, r7
    42d4:	b004      	add	sp, #16
    42d6:	bdb0      	pop	{r4, r5, r7, pc}
    42d8:	00003829 	.word	0x00003829
    42dc:	00000395 	.word	0x00000395
    42e0:	0001e0d4 	.word	0x0001e0d4
    42e4:	0001dafc 	.word	0x0001dafc
    42e8:	0001bc4d 	.word	0x0001bc4d
    42ec:	0001dd2c 	.word	0x0001dd2c
    42f0:	0001bc81 	.word	0x0001bc81
    42f4:	00003c6d 	.word	0x00003c6d
    42f8:	0000039b 	.word	0x0000039b
    42fc:	0001dd58 	.word	0x0001dd58
    4300:	00000321 	.word	0x00000321
    4304:	000003ae 	.word	0x000003ae
    4308:	0001dd90 	.word	0x0001dd90

0000430c <nm_spi_write>:

 sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    430c:	b5b0      	push	{r4, r5, r7, lr}
    430e:	b088      	sub	sp, #32
    4310:	af02      	add	r7, sp, #8
    4312:	60f8      	str	r0, [r7, #12]
    4314:	60b9      	str	r1, [r7, #8]
    4316:	1dbb      	adds	r3, r7, #6
    4318:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    431a:	2316      	movs	r3, #22
    431c:	18fb      	adds	r3, r7, r3
    431e:	220a      	movs	r2, #10
    4320:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    4322:	2315      	movs	r3, #21
    4324:	18fb      	adds	r3, r7, r3
    4326:	22c7      	movs	r2, #199	; 0xc7
    4328:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    432a:	1dbb      	adds	r3, r7, #6
    432c:	881b      	ldrh	r3, [r3, #0]
    432e:	2b01      	cmp	r3, #1
    4330:	d102      	bne.n	4338 <nm_spi_write+0x2c>
		size = 2;
    4332:	1dbb      	adds	r3, r7, #6
    4334:	2202      	movs	r2, #2
    4336:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    4338:	1dbb      	adds	r3, r7, #6
    433a:	881a      	ldrh	r2, [r3, #0]
    433c:	2317      	movs	r3, #23
    433e:	18fc      	adds	r4, r7, r3
    4340:	68f9      	ldr	r1, [r7, #12]
    4342:	2315      	movs	r3, #21
    4344:	18fb      	adds	r3, r7, r3
    4346:	7818      	ldrb	r0, [r3, #0]
    4348:	2300      	movs	r3, #0
    434a:	9300      	str	r3, [sp, #0]
    434c:	0013      	movs	r3, r2
    434e:	2200      	movs	r2, #0
    4350:	4d5a      	ldr	r5, [pc, #360]	; (44bc <nm_spi_write+0x1b0>)
    4352:	47a8      	blx	r5
    4354:	0003      	movs	r3, r0
    4356:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4358:	2317      	movs	r3, #23
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	b25b      	sxtb	r3, r3
    4360:	2b01      	cmp	r3, #1
    4362:	d00f      	beq.n	4384 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    4364:	4a56      	ldr	r2, [pc, #344]	; (44c0 <nm_spi_write+0x1b4>)
    4366:	4957      	ldr	r1, [pc, #348]	; (44c4 <nm_spi_write+0x1b8>)
    4368:	4b57      	ldr	r3, [pc, #348]	; (44c8 <nm_spi_write+0x1bc>)
    436a:	0018      	movs	r0, r3
    436c:	4b57      	ldr	r3, [pc, #348]	; (44cc <nm_spi_write+0x1c0>)
    436e:	4798      	blx	r3
    4370:	68fa      	ldr	r2, [r7, #12]
    4372:	4b57      	ldr	r3, [pc, #348]	; (44d0 <nm_spi_write+0x1c4>)
    4374:	0011      	movs	r1, r2
    4376:	0018      	movs	r0, r3
    4378:	4b54      	ldr	r3, [pc, #336]	; (44cc <nm_spi_write+0x1c0>)
    437a:	4798      	blx	r3
    437c:	200d      	movs	r0, #13
    437e:	4b55      	ldr	r3, [pc, #340]	; (44d4 <nm_spi_write+0x1c8>)
    4380:	4798      	blx	r3
		goto _FAIL_;
    4382:	e05c      	b.n	443e <nm_spi_write+0x132>
	}

	result = spi_cmd_rsp(cmd);
    4384:	2317      	movs	r3, #23
    4386:	18fc      	adds	r4, r7, r3
    4388:	2315      	movs	r3, #21
    438a:	18fb      	adds	r3, r7, r3
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	0018      	movs	r0, r3
    4390:	4b51      	ldr	r3, [pc, #324]	; (44d8 <nm_spi_write+0x1cc>)
    4392:	4798      	blx	r3
    4394:	0003      	movs	r3, r0
    4396:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4398:	2317      	movs	r3, #23
    439a:	18fb      	adds	r3, r7, r3
    439c:	781b      	ldrb	r3, [r3, #0]
    439e:	b25b      	sxtb	r3, r3
    43a0:	2b01      	cmp	r3, #1
    43a2:	d00f      	beq.n	43c4 <nm_spi_write+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    43a4:	4a4d      	ldr	r2, [pc, #308]	; (44dc <nm_spi_write+0x1d0>)
    43a6:	4947      	ldr	r1, [pc, #284]	; (44c4 <nm_spi_write+0x1b8>)
    43a8:	4b47      	ldr	r3, [pc, #284]	; (44c8 <nm_spi_write+0x1bc>)
    43aa:	0018      	movs	r0, r3
    43ac:	4b47      	ldr	r3, [pc, #284]	; (44cc <nm_spi_write+0x1c0>)
    43ae:	4798      	blx	r3
    43b0:	68fa      	ldr	r2, [r7, #12]
    43b2:	4b4b      	ldr	r3, [pc, #300]	; (44e0 <nm_spi_write+0x1d4>)
    43b4:	0011      	movs	r1, r2
    43b6:	0018      	movs	r0, r3
    43b8:	4b44      	ldr	r3, [pc, #272]	; (44cc <nm_spi_write+0x1c0>)
    43ba:	4798      	blx	r3
    43bc:	200d      	movs	r0, #13
    43be:	4b45      	ldr	r3, [pc, #276]	; (44d4 <nm_spi_write+0x1c8>)
    43c0:	4798      	blx	r3
		goto _FAIL_;
    43c2:	e03c      	b.n	443e <nm_spi_write+0x132>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    43c4:	2317      	movs	r3, #23
    43c6:	18fc      	adds	r4, r7, r3
    43c8:	1dbb      	adds	r3, r7, #6
    43ca:	881a      	ldrh	r2, [r3, #0]
    43cc:	68bb      	ldr	r3, [r7, #8]
    43ce:	0011      	movs	r1, r2
    43d0:	0018      	movs	r0, r3
    43d2:	4b44      	ldr	r3, [pc, #272]	; (44e4 <nm_spi_write+0x1d8>)
    43d4:	4798      	blx	r3
    43d6:	0003      	movs	r3, r0
    43d8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    43da:	2317      	movs	r3, #23
    43dc:	18fb      	adds	r3, r7, r3
    43de:	781b      	ldrb	r3, [r3, #0]
    43e0:	b25b      	sxtb	r3, r3
    43e2:	2b01      	cmp	r3, #1
    43e4:	d00d      	beq.n	4402 <nm_spi_write+0xf6>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    43e6:	4a40      	ldr	r2, [pc, #256]	; (44e8 <nm_spi_write+0x1dc>)
    43e8:	4936      	ldr	r1, [pc, #216]	; (44c4 <nm_spi_write+0x1b8>)
    43ea:	4b37      	ldr	r3, [pc, #220]	; (44c8 <nm_spi_write+0x1bc>)
    43ec:	0018      	movs	r0, r3
    43ee:	4b37      	ldr	r3, [pc, #220]	; (44cc <nm_spi_write+0x1c0>)
    43f0:	4798      	blx	r3
    43f2:	4b3e      	ldr	r3, [pc, #248]	; (44ec <nm_spi_write+0x1e0>)
    43f4:	0018      	movs	r0, r3
    43f6:	4b3e      	ldr	r3, [pc, #248]	; (44f0 <nm_spi_write+0x1e4>)
    43f8:	4798      	blx	r3
    43fa:	200d      	movs	r0, #13
    43fc:	4b35      	ldr	r3, [pc, #212]	; (44d4 <nm_spi_write+0x1c8>)
    43fe:	4798      	blx	r3
		goto _FAIL_;
    4400:	e01d      	b.n	443e <nm_spi_write+0x132>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    4402:	2317      	movs	r3, #23
    4404:	18fc      	adds	r4, r7, r3
    4406:	2315      	movs	r3, #21
    4408:	18fb      	adds	r3, r7, r3
    440a:	781b      	ldrb	r3, [r3, #0]
    440c:	0018      	movs	r0, r3
    440e:	4b39      	ldr	r3, [pc, #228]	; (44f4 <nm_spi_write+0x1e8>)
    4410:	4798      	blx	r3
    4412:	0003      	movs	r3, r0
    4414:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4416:	2317      	movs	r3, #23
    4418:	18fb      	adds	r3, r7, r3
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	b25b      	sxtb	r3, r3
    441e:	2b01      	cmp	r3, #1
    4420:	d00d      	beq.n	443e <nm_spi_write+0x132>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4422:	4a35      	ldr	r2, [pc, #212]	; (44f8 <nm_spi_write+0x1ec>)
    4424:	4927      	ldr	r1, [pc, #156]	; (44c4 <nm_spi_write+0x1b8>)
    4426:	4b28      	ldr	r3, [pc, #160]	; (44c8 <nm_spi_write+0x1bc>)
    4428:	0018      	movs	r0, r3
    442a:	4b28      	ldr	r3, [pc, #160]	; (44cc <nm_spi_write+0x1c0>)
    442c:	4798      	blx	r3
    442e:	4b2f      	ldr	r3, [pc, #188]	; (44ec <nm_spi_write+0x1e0>)
    4430:	0018      	movs	r0, r3
    4432:	4b2f      	ldr	r3, [pc, #188]	; (44f0 <nm_spi_write+0x1e4>)
    4434:	4798      	blx	r3
    4436:	200d      	movs	r0, #13
    4438:	4b26      	ldr	r3, [pc, #152]	; (44d4 <nm_spi_write+0x1c8>)
    443a:	4798      	blx	r3
		goto _FAIL_;
    443c:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    443e:	2317      	movs	r3, #23
    4440:	18fb      	adds	r3, r7, r3
    4442:	781b      	ldrb	r3, [r3, #0]
    4444:	b25b      	sxtb	r3, r3
    4446:	2b01      	cmp	r3, #1
    4448:	d02f      	beq.n	44aa <nm_spi_write+0x19e>
	{
		nm_bsp_sleep(1);
    444a:	2001      	movs	r0, #1
    444c:	4b2b      	ldr	r3, [pc, #172]	; (44fc <nm_spi_write+0x1f0>)
    444e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4450:	2300      	movs	r3, #0
    4452:	9300      	str	r3, [sp, #0]
    4454:	2300      	movs	r3, #0
    4456:	2200      	movs	r2, #0
    4458:	2100      	movs	r1, #0
    445a:	20cf      	movs	r0, #207	; 0xcf
    445c:	4c17      	ldr	r4, [pc, #92]	; (44bc <nm_spi_write+0x1b0>)
    445e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4460:	20cf      	movs	r0, #207	; 0xcf
    4462:	4b1d      	ldr	r3, [pc, #116]	; (44d8 <nm_spi_write+0x1cc>)
    4464:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    4466:	4a26      	ldr	r2, [pc, #152]	; (4500 <nm_spi_write+0x1f4>)
    4468:	4916      	ldr	r1, [pc, #88]	; (44c4 <nm_spi_write+0x1b8>)
    446a:	4b17      	ldr	r3, [pc, #92]	; (44c8 <nm_spi_write+0x1bc>)
    446c:	0018      	movs	r0, r3
    446e:	4b17      	ldr	r3, [pc, #92]	; (44cc <nm_spi_write+0x1c0>)
    4470:	4798      	blx	r3
    4472:	2316      	movs	r3, #22
    4474:	18fb      	adds	r3, r7, r3
    4476:	7819      	ldrb	r1, [r3, #0]
    4478:	1dbb      	adds	r3, r7, #6
    447a:	881b      	ldrh	r3, [r3, #0]
    447c:	68fa      	ldr	r2, [r7, #12]
    447e:	4821      	ldr	r0, [pc, #132]	; (4504 <nm_spi_write+0x1f8>)
    4480:	4c12      	ldr	r4, [pc, #72]	; (44cc <nm_spi_write+0x1c0>)
    4482:	47a0      	blx	r4
    4484:	200d      	movs	r0, #13
    4486:	4b13      	ldr	r3, [pc, #76]	; (44d4 <nm_spi_write+0x1c8>)
    4488:	4798      	blx	r3
		nm_bsp_sleep(1);
    448a:	2001      	movs	r0, #1
    448c:	4b1b      	ldr	r3, [pc, #108]	; (44fc <nm_spi_write+0x1f0>)
    448e:	4798      	blx	r3
		retry--;
    4490:	2316      	movs	r3, #22
    4492:	18fb      	adds	r3, r7, r3
    4494:	781a      	ldrb	r2, [r3, #0]
    4496:	2316      	movs	r3, #22
    4498:	18fb      	adds	r3, r7, r3
    449a:	3a01      	subs	r2, #1
    449c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    449e:	2316      	movs	r3, #22
    44a0:	18fb      	adds	r3, r7, r3
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d000      	beq.n	44aa <nm_spi_write+0x19e>
    44a8:	e73f      	b.n	432a <nm_spi_write+0x1e>
	}


	return result;
    44aa:	2317      	movs	r3, #23
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	b25b      	sxtb	r3, r3
}
    44b2:	0018      	movs	r0, r3
    44b4:	46bd      	mov	sp, r7
    44b6:	b006      	add	sp, #24
    44b8:	bdb0      	pop	{r4, r5, r7, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00003829 	.word	0x00003829
    44c0:	000003c9 	.word	0x000003c9
    44c4:	0001e0e4 	.word	0x0001e0e4
    44c8:	0001dafc 	.word	0x0001dafc
    44cc:	0001bc4d 	.word	0x0001bc4d
    44d0:	0001ddac 	.word	0x0001ddac
    44d4:	0001bc81 	.word	0x0001bc81
    44d8:	00003c6d 	.word	0x00003c6d
    44dc:	000003cf 	.word	0x000003cf
    44e0:	0001dddc 	.word	0x0001dddc
    44e4:	00003fad 	.word	0x00003fad
    44e8:	000003df 	.word	0x000003df
    44ec:	0001de14 	.word	0x0001de14
    44f0:	0001bd69 	.word	0x0001bd69
    44f4:	00003b6d 	.word	0x00003b6d
    44f8:	000003e7 	.word	0x000003e7
    44fc:	00000321 	.word	0x00000321
    4500:	000003f1 	.word	0x000003f1
    4504:	0001de3c 	.word	0x0001de3c

00004508 <spi_read_reg>:
 sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4508:	b5b0      	push	{r4, r5, r7, lr}
    450a:	b086      	sub	sp, #24
    450c:	af02      	add	r7, sp, #8
    450e:	6078      	str	r0, [r7, #4]
    4510:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    4512:	230f      	movs	r3, #15
    4514:	18fb      	adds	r3, r7, r3
    4516:	220a      	movs	r2, #10
    4518:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    451a:	230e      	movs	r3, #14
    451c:	18fb      	adds	r3, r7, r3
    451e:	2201      	movs	r2, #1
    4520:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    4522:	230d      	movs	r3, #13
    4524:	18fb      	adds	r3, r7, r3
    4526:	22ca      	movs	r2, #202	; 0xca
    4528:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    452a:	230c      	movs	r3, #12
    452c:	18fb      	adds	r3, r7, r3
    452e:	2200      	movs	r2, #0
    4530:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	2bff      	cmp	r3, #255	; 0xff
    4536:	d808      	bhi.n	454a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    4538:	230d      	movs	r3, #13
    453a:	18fb      	adds	r3, r7, r3
    453c:	22c4      	movs	r2, #196	; 0xc4
    453e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    4540:	230c      	movs	r3, #12
    4542:	18fb      	adds	r3, r7, r3
    4544:	2201      	movs	r2, #1
    4546:	701a      	strb	r2, [r3, #0]
    4548:	e007      	b.n	455a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    454a:	230d      	movs	r3, #13
    454c:	18fb      	adds	r3, r7, r3
    454e:	22ca      	movs	r2, #202	; 0xca
    4550:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    4552:	230c      	movs	r3, #12
    4554:	18fb      	adds	r3, r7, r3
    4556:	2200      	movs	r2, #0
    4558:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    455a:	230e      	movs	r3, #14
    455c:	18fc      	adds	r4, r7, r3
    455e:	6879      	ldr	r1, [r7, #4]
    4560:	230d      	movs	r3, #13
    4562:	18fb      	adds	r3, r7, r3
    4564:	7818      	ldrb	r0, [r3, #0]
    4566:	230c      	movs	r3, #12
    4568:	18fb      	adds	r3, r7, r3
    456a:	781b      	ldrb	r3, [r3, #0]
    456c:	9300      	str	r3, [sp, #0]
    456e:	2304      	movs	r3, #4
    4570:	2200      	movs	r2, #0
    4572:	4d56      	ldr	r5, [pc, #344]	; (46cc <spi_read_reg+0x1c4>)
    4574:	47a8      	blx	r5
    4576:	0003      	movs	r3, r0
    4578:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    457a:	230e      	movs	r3, #14
    457c:	18fb      	adds	r3, r7, r3
    457e:	781b      	ldrb	r3, [r3, #0]
    4580:	b25b      	sxtb	r3, r3
    4582:	2b01      	cmp	r3, #1
    4584:	d00f      	beq.n	45a6 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4586:	4a52      	ldr	r2, [pc, #328]	; (46d0 <spi_read_reg+0x1c8>)
    4588:	4952      	ldr	r1, [pc, #328]	; (46d4 <spi_read_reg+0x1cc>)
    458a:	4b53      	ldr	r3, [pc, #332]	; (46d8 <spi_read_reg+0x1d0>)
    458c:	0018      	movs	r0, r3
    458e:	4b53      	ldr	r3, [pc, #332]	; (46dc <spi_read_reg+0x1d4>)
    4590:	4798      	blx	r3
    4592:	687a      	ldr	r2, [r7, #4]
    4594:	4b52      	ldr	r3, [pc, #328]	; (46e0 <spi_read_reg+0x1d8>)
    4596:	0011      	movs	r1, r2
    4598:	0018      	movs	r0, r3
    459a:	4b50      	ldr	r3, [pc, #320]	; (46dc <spi_read_reg+0x1d4>)
    459c:	4798      	blx	r3
    459e:	200d      	movs	r0, #13
    45a0:	4b50      	ldr	r3, [pc, #320]	; (46e4 <spi_read_reg+0x1dc>)
    45a2:	4798      	blx	r3
		goto _FAIL_;
    45a4:	e055      	b.n	4652 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    45a6:	230e      	movs	r3, #14
    45a8:	18fc      	adds	r4, r7, r3
    45aa:	230d      	movs	r3, #13
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	0018      	movs	r0, r3
    45b2:	4b4d      	ldr	r3, [pc, #308]	; (46e8 <spi_read_reg+0x1e0>)
    45b4:	4798      	blx	r3
    45b6:	0003      	movs	r3, r0
    45b8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    45ba:	230e      	movs	r3, #14
    45bc:	18fb      	adds	r3, r7, r3
    45be:	781b      	ldrb	r3, [r3, #0]
    45c0:	b25b      	sxtb	r3, r3
    45c2:	2b01      	cmp	r3, #1
    45c4:	d00f      	beq.n	45e6 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    45c6:	4a49      	ldr	r2, [pc, #292]	; (46ec <spi_read_reg+0x1e4>)
    45c8:	4942      	ldr	r1, [pc, #264]	; (46d4 <spi_read_reg+0x1cc>)
    45ca:	4b43      	ldr	r3, [pc, #268]	; (46d8 <spi_read_reg+0x1d0>)
    45cc:	0018      	movs	r0, r3
    45ce:	4b43      	ldr	r3, [pc, #268]	; (46dc <spi_read_reg+0x1d4>)
    45d0:	4798      	blx	r3
    45d2:	687a      	ldr	r2, [r7, #4]
    45d4:	4b46      	ldr	r3, [pc, #280]	; (46f0 <spi_read_reg+0x1e8>)
    45d6:	0011      	movs	r1, r2
    45d8:	0018      	movs	r0, r3
    45da:	4b40      	ldr	r3, [pc, #256]	; (46dc <spi_read_reg+0x1d4>)
    45dc:	4798      	blx	r3
    45de:	200d      	movs	r0, #13
    45e0:	4b40      	ldr	r3, [pc, #256]	; (46e4 <spi_read_reg+0x1dc>)
    45e2:	4798      	blx	r3
		goto _FAIL_;
    45e4:	e035      	b.n	4652 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    45e6:	230e      	movs	r3, #14
    45e8:	18fc      	adds	r4, r7, r3
    45ea:	230c      	movs	r3, #12
    45ec:	18fb      	adds	r3, r7, r3
    45ee:	781a      	ldrb	r2, [r3, #0]
    45f0:	2308      	movs	r3, #8
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	2104      	movs	r1, #4
    45f6:	0018      	movs	r0, r3
    45f8:	4b3e      	ldr	r3, [pc, #248]	; (46f4 <spi_read_reg+0x1ec>)
    45fa:	4798      	blx	r3
    45fc:	0003      	movs	r3, r0
    45fe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4600:	230e      	movs	r3, #14
    4602:	18fb      	adds	r3, r7, r3
    4604:	781b      	ldrb	r3, [r3, #0]
    4606:	b25b      	sxtb	r3, r3
    4608:	2b01      	cmp	r3, #1
    460a:	d00d      	beq.n	4628 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    460c:	4a3a      	ldr	r2, [pc, #232]	; (46f8 <spi_read_reg+0x1f0>)
    460e:	4931      	ldr	r1, [pc, #196]	; (46d4 <spi_read_reg+0x1cc>)
    4610:	4b31      	ldr	r3, [pc, #196]	; (46d8 <spi_read_reg+0x1d0>)
    4612:	0018      	movs	r0, r3
    4614:	4b31      	ldr	r3, [pc, #196]	; (46dc <spi_read_reg+0x1d4>)
    4616:	4798      	blx	r3
    4618:	4b38      	ldr	r3, [pc, #224]	; (46fc <spi_read_reg+0x1f4>)
    461a:	0018      	movs	r0, r3
    461c:	4b38      	ldr	r3, [pc, #224]	; (4700 <spi_read_reg+0x1f8>)
    461e:	4798      	blx	r3
    4620:	200d      	movs	r0, #13
    4622:	4b30      	ldr	r3, [pc, #192]	; (46e4 <spi_read_reg+0x1dc>)
    4624:	4798      	blx	r3
		goto _FAIL_;
    4626:	e014      	b.n	4652 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    4628:	2308      	movs	r3, #8
    462a:	18fb      	adds	r3, r7, r3
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    4630:	2308      	movs	r3, #8
    4632:	18fb      	adds	r3, r7, r3
    4634:	785b      	ldrb	r3, [r3, #1]
    4636:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    4638:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    463a:	2308      	movs	r3, #8
    463c:	18fb      	adds	r3, r7, r3
    463e:	789b      	ldrb	r3, [r3, #2]
    4640:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    4642:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    4644:	2308      	movs	r3, #8
    4646:	18fb      	adds	r3, r7, r3
    4648:	78db      	ldrb	r3, [r3, #3]
    464a:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    464c:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    464e:	683b      	ldr	r3, [r7, #0]
    4650:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    4652:	230e      	movs	r3, #14
    4654:	18fb      	adds	r3, r7, r3
    4656:	781b      	ldrb	r3, [r3, #0]
    4658:	b25b      	sxtb	r3, r3
    465a:	2b01      	cmp	r3, #1
    465c:	d02e      	beq.n	46bc <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    465e:	2001      	movs	r0, #1
    4660:	4b28      	ldr	r3, [pc, #160]	; (4704 <spi_read_reg+0x1fc>)
    4662:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4664:	2300      	movs	r3, #0
    4666:	9300      	str	r3, [sp, #0]
    4668:	2300      	movs	r3, #0
    466a:	2200      	movs	r2, #0
    466c:	2100      	movs	r1, #0
    466e:	20cf      	movs	r0, #207	; 0xcf
    4670:	4c16      	ldr	r4, [pc, #88]	; (46cc <spi_read_reg+0x1c4>)
    4672:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4674:	20cf      	movs	r0, #207	; 0xcf
    4676:	4b1c      	ldr	r3, [pc, #112]	; (46e8 <spi_read_reg+0x1e0>)
    4678:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    467a:	4a23      	ldr	r2, [pc, #140]	; (4708 <spi_read_reg+0x200>)
    467c:	4915      	ldr	r1, [pc, #84]	; (46d4 <spi_read_reg+0x1cc>)
    467e:	4b16      	ldr	r3, [pc, #88]	; (46d8 <spi_read_reg+0x1d0>)
    4680:	0018      	movs	r0, r3
    4682:	4b16      	ldr	r3, [pc, #88]	; (46dc <spi_read_reg+0x1d4>)
    4684:	4798      	blx	r3
    4686:	230f      	movs	r3, #15
    4688:	18fb      	adds	r3, r7, r3
    468a:	7819      	ldrb	r1, [r3, #0]
    468c:	687a      	ldr	r2, [r7, #4]
    468e:	4b1f      	ldr	r3, [pc, #124]	; (470c <spi_read_reg+0x204>)
    4690:	0018      	movs	r0, r3
    4692:	4b12      	ldr	r3, [pc, #72]	; (46dc <spi_read_reg+0x1d4>)
    4694:	4798      	blx	r3
    4696:	200d      	movs	r0, #13
    4698:	4b12      	ldr	r3, [pc, #72]	; (46e4 <spi_read_reg+0x1dc>)
    469a:	4798      	blx	r3
		nm_bsp_sleep(1);
    469c:	2001      	movs	r0, #1
    469e:	4b19      	ldr	r3, [pc, #100]	; (4704 <spi_read_reg+0x1fc>)
    46a0:	4798      	blx	r3
		retry--;
    46a2:	230f      	movs	r3, #15
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	781a      	ldrb	r2, [r3, #0]
    46a8:	230f      	movs	r3, #15
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	3a01      	subs	r2, #1
    46ae:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    46b0:	230f      	movs	r3, #15
    46b2:	18fb      	adds	r3, r7, r3
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d000      	beq.n	46bc <spi_read_reg+0x1b4>
    46ba:	e73a      	b.n	4532 <spi_read_reg+0x2a>
	}
		
	return result;
    46bc:	230e      	movs	r3, #14
    46be:	18fb      	adds	r3, r7, r3
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	b25b      	sxtb	r3, r3
}
    46c4:	0018      	movs	r0, r3
    46c6:	46bd      	mov	sp, r7
    46c8:	b004      	add	sp, #16
    46ca:	bdb0      	pop	{r4, r5, r7, pc}
    46cc:	00003829 	.word	0x00003829
    46d0:	00000415 	.word	0x00000415
    46d4:	0001e0f4 	.word	0x0001e0f4
    46d8:	0001dafc 	.word	0x0001dafc
    46dc:	0001bc4d 	.word	0x0001bc4d
    46e0:	0001de58 	.word	0x0001de58
    46e4:	0001bc81 	.word	0x0001bc81
    46e8:	00003c6d 	.word	0x00003c6d
    46ec:	0000041b 	.word	0x0000041b
    46f0:	0001de84 	.word	0x0001de84
    46f4:	00003da9 	.word	0x00003da9
    46f8:	00000422 	.word	0x00000422
    46fc:	0001deb8 	.word	0x0001deb8
    4700:	0001bd69 	.word	0x0001bd69
    4704:	00000321 	.word	0x00000321
    4708:	0000043a 	.word	0x0000043a
    470c:	0001ded8 	.word	0x0001ded8

00004710 <nm_spi_read>:

 sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4710:	b5b0      	push	{r4, r5, r7, lr}
    4712:	b088      	sub	sp, #32
    4714:	af02      	add	r7, sp, #8
    4716:	60f8      	str	r0, [r7, #12]
    4718:	60b9      	str	r1, [r7, #8]
    471a:	1dbb      	adds	r3, r7, #6
    471c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    471e:	2314      	movs	r3, #20
    4720:	18fb      	adds	r3, r7, r3
    4722:	22c8      	movs	r2, #200	; 0xc8
    4724:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    4726:	2316      	movs	r3, #22
    4728:	18fb      	adds	r3, r7, r3
    472a:	220a      	movs	r2, #10
    472c:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    472e:	2315      	movs	r3, #21
    4730:	18fb      	adds	r3, r7, r3
    4732:	2200      	movs	r2, #0
    4734:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    4736:	1dbb      	adds	r3, r7, #6
    4738:	881b      	ldrh	r3, [r3, #0]
    473a:	2b01      	cmp	r3, #1
    473c:	d106      	bne.n	474c <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    473e:	1dbb      	adds	r3, r7, #6
    4740:	2202      	movs	r2, #2
    4742:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    4744:	2315      	movs	r3, #21
    4746:	18fb      	adds	r3, r7, r3
    4748:	2201      	movs	r2, #1
    474a:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    474c:	1dbb      	adds	r3, r7, #6
    474e:	881a      	ldrh	r2, [r3, #0]
    4750:	2317      	movs	r3, #23
    4752:	18fc      	adds	r4, r7, r3
    4754:	68f9      	ldr	r1, [r7, #12]
    4756:	2314      	movs	r3, #20
    4758:	18fb      	adds	r3, r7, r3
    475a:	7818      	ldrb	r0, [r3, #0]
    475c:	2300      	movs	r3, #0
    475e:	9300      	str	r3, [sp, #0]
    4760:	0013      	movs	r3, r2
    4762:	2200      	movs	r2, #0
    4764:	4d56      	ldr	r5, [pc, #344]	; (48c0 <nm_spi_read+0x1b0>)
    4766:	47a8      	blx	r5
    4768:	0003      	movs	r3, r0
    476a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    476c:	2317      	movs	r3, #23
    476e:	18fb      	adds	r3, r7, r3
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	b25b      	sxtb	r3, r3
    4774:	2b01      	cmp	r3, #1
    4776:	d00f      	beq.n	4798 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    4778:	4a52      	ldr	r2, [pc, #328]	; (48c4 <nm_spi_read+0x1b4>)
    477a:	4953      	ldr	r1, [pc, #332]	; (48c8 <nm_spi_read+0x1b8>)
    477c:	4b53      	ldr	r3, [pc, #332]	; (48cc <nm_spi_read+0x1bc>)
    477e:	0018      	movs	r0, r3
    4780:	4b53      	ldr	r3, [pc, #332]	; (48d0 <nm_spi_read+0x1c0>)
    4782:	4798      	blx	r3
    4784:	68fa      	ldr	r2, [r7, #12]
    4786:	4b53      	ldr	r3, [pc, #332]	; (48d4 <nm_spi_read+0x1c4>)
    4788:	0011      	movs	r1, r2
    478a:	0018      	movs	r0, r3
    478c:	4b50      	ldr	r3, [pc, #320]	; (48d0 <nm_spi_read+0x1c0>)
    478e:	4798      	blx	r3
    4790:	200d      	movs	r0, #13
    4792:	4b51      	ldr	r3, [pc, #324]	; (48d8 <nm_spi_read+0x1c8>)
    4794:	4798      	blx	r3
		goto _FAIL_;
    4796:	e055      	b.n	4844 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4798:	2317      	movs	r3, #23
    479a:	18fc      	adds	r4, r7, r3
    479c:	2314      	movs	r3, #20
    479e:	18fb      	adds	r3, r7, r3
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	0018      	movs	r0, r3
    47a4:	4b4d      	ldr	r3, [pc, #308]	; (48dc <nm_spi_read+0x1cc>)
    47a6:	4798      	blx	r3
    47a8:	0003      	movs	r3, r0
    47aa:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    47ac:	2317      	movs	r3, #23
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	b25b      	sxtb	r3, r3
    47b4:	2b01      	cmp	r3, #1
    47b6:	d00f      	beq.n	47d8 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    47b8:	4a49      	ldr	r2, [pc, #292]	; (48e0 <nm_spi_read+0x1d0>)
    47ba:	4943      	ldr	r1, [pc, #268]	; (48c8 <nm_spi_read+0x1b8>)
    47bc:	4b43      	ldr	r3, [pc, #268]	; (48cc <nm_spi_read+0x1bc>)
    47be:	0018      	movs	r0, r3
    47c0:	4b43      	ldr	r3, [pc, #268]	; (48d0 <nm_spi_read+0x1c0>)
    47c2:	4798      	blx	r3
    47c4:	68fa      	ldr	r2, [r7, #12]
    47c6:	4b47      	ldr	r3, [pc, #284]	; (48e4 <nm_spi_read+0x1d4>)
    47c8:	0011      	movs	r1, r2
    47ca:	0018      	movs	r0, r3
    47cc:	4b40      	ldr	r3, [pc, #256]	; (48d0 <nm_spi_read+0x1c0>)
    47ce:	4798      	blx	r3
    47d0:	200d      	movs	r0, #13
    47d2:	4b41      	ldr	r3, [pc, #260]	; (48d8 <nm_spi_read+0x1c8>)
    47d4:	4798      	blx	r3
		goto _FAIL_;
    47d6:	e035      	b.n	4844 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    47d8:	2315      	movs	r3, #21
    47da:	18fb      	adds	r3, r7, r3
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	2b00      	cmp	r3, #0
    47e0:	d011      	beq.n	4806 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    47e2:	2317      	movs	r3, #23
    47e4:	18fc      	adds	r4, r7, r3
    47e6:	1dbb      	adds	r3, r7, #6
    47e8:	8819      	ldrh	r1, [r3, #0]
    47ea:	2310      	movs	r3, #16
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	2200      	movs	r2, #0
    47f0:	0018      	movs	r0, r3
    47f2:	4b3d      	ldr	r3, [pc, #244]	; (48e8 <nm_spi_read+0x1d8>)
    47f4:	4798      	blx	r3
    47f6:	0003      	movs	r3, r0
    47f8:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    47fa:	2310      	movs	r3, #16
    47fc:	18fb      	adds	r3, r7, r3
    47fe:	781a      	ldrb	r2, [r3, #0]
    4800:	68bb      	ldr	r3, [r7, #8]
    4802:	701a      	strb	r2, [r3, #0]
    4804:	e00a      	b.n	481c <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    4806:	2317      	movs	r3, #23
    4808:	18fc      	adds	r4, r7, r3
    480a:	1dbb      	adds	r3, r7, #6
    480c:	8819      	ldrh	r1, [r3, #0]
    480e:	68bb      	ldr	r3, [r7, #8]
    4810:	2200      	movs	r2, #0
    4812:	0018      	movs	r0, r3
    4814:	4b34      	ldr	r3, [pc, #208]	; (48e8 <nm_spi_read+0x1d8>)
    4816:	4798      	blx	r3
    4818:	0003      	movs	r3, r0
    481a:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    481c:	2317      	movs	r3, #23
    481e:	18fb      	adds	r3, r7, r3
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	b25b      	sxtb	r3, r3
    4824:	2b01      	cmp	r3, #1
    4826:	d00d      	beq.n	4844 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    4828:	4a30      	ldr	r2, [pc, #192]	; (48ec <nm_spi_read+0x1dc>)
    482a:	4927      	ldr	r1, [pc, #156]	; (48c8 <nm_spi_read+0x1b8>)
    482c:	4b27      	ldr	r3, [pc, #156]	; (48cc <nm_spi_read+0x1bc>)
    482e:	0018      	movs	r0, r3
    4830:	4b27      	ldr	r3, [pc, #156]	; (48d0 <nm_spi_read+0x1c0>)
    4832:	4798      	blx	r3
    4834:	4b2e      	ldr	r3, [pc, #184]	; (48f0 <nm_spi_read+0x1e0>)
    4836:	0018      	movs	r0, r3
    4838:	4b2e      	ldr	r3, [pc, #184]	; (48f4 <nm_spi_read+0x1e4>)
    483a:	4798      	blx	r3
    483c:	200d      	movs	r0, #13
    483e:	4b26      	ldr	r3, [pc, #152]	; (48d8 <nm_spi_read+0x1c8>)
    4840:	4798      	blx	r3
		goto _FAIL_;
    4842:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    4844:	2317      	movs	r3, #23
    4846:	18fb      	adds	r3, r7, r3
    4848:	781b      	ldrb	r3, [r3, #0]
    484a:	b25b      	sxtb	r3, r3
    484c:	2b01      	cmp	r3, #1
    484e:	d02f      	beq.n	48b0 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    4850:	2001      	movs	r0, #1
    4852:	4b29      	ldr	r3, [pc, #164]	; (48f8 <nm_spi_read+0x1e8>)
    4854:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4856:	2300      	movs	r3, #0
    4858:	9300      	str	r3, [sp, #0]
    485a:	2300      	movs	r3, #0
    485c:	2200      	movs	r2, #0
    485e:	2100      	movs	r1, #0
    4860:	20cf      	movs	r0, #207	; 0xcf
    4862:	4c17      	ldr	r4, [pc, #92]	; (48c0 <nm_spi_read+0x1b0>)
    4864:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    4866:	20cf      	movs	r0, #207	; 0xcf
    4868:	4b1c      	ldr	r3, [pc, #112]	; (48dc <nm_spi_read+0x1cc>)
    486a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    486c:	4a23      	ldr	r2, [pc, #140]	; (48fc <nm_spi_read+0x1ec>)
    486e:	4916      	ldr	r1, [pc, #88]	; (48c8 <nm_spi_read+0x1b8>)
    4870:	4b16      	ldr	r3, [pc, #88]	; (48cc <nm_spi_read+0x1bc>)
    4872:	0018      	movs	r0, r3
    4874:	4b16      	ldr	r3, [pc, #88]	; (48d0 <nm_spi_read+0x1c0>)
    4876:	4798      	blx	r3
    4878:	2316      	movs	r3, #22
    487a:	18fb      	adds	r3, r7, r3
    487c:	7819      	ldrb	r1, [r3, #0]
    487e:	1dbb      	adds	r3, r7, #6
    4880:	881b      	ldrh	r3, [r3, #0]
    4882:	68fa      	ldr	r2, [r7, #12]
    4884:	481e      	ldr	r0, [pc, #120]	; (4900 <nm_spi_read+0x1f0>)
    4886:	4c12      	ldr	r4, [pc, #72]	; (48d0 <nm_spi_read+0x1c0>)
    4888:	47a0      	blx	r4
    488a:	200d      	movs	r0, #13
    488c:	4b12      	ldr	r3, [pc, #72]	; (48d8 <nm_spi_read+0x1c8>)
    488e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4890:	2001      	movs	r0, #1
    4892:	4b19      	ldr	r3, [pc, #100]	; (48f8 <nm_spi_read+0x1e8>)
    4894:	4798      	blx	r3
		retry--;
    4896:	2316      	movs	r3, #22
    4898:	18fb      	adds	r3, r7, r3
    489a:	781a      	ldrb	r2, [r3, #0]
    489c:	2316      	movs	r3, #22
    489e:	18fb      	adds	r3, r7, r3
    48a0:	3a01      	subs	r2, #1
    48a2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    48a4:	2316      	movs	r3, #22
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	781b      	ldrb	r3, [r3, #0]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d000      	beq.n	48b0 <nm_spi_read+0x1a0>
    48ae:	e742      	b.n	4736 <nm_spi_read+0x26>
	}

	return result;
    48b0:	2317      	movs	r3, #23
    48b2:	18fb      	adds	r3, r7, r3
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	b25b      	sxtb	r3, r3
}
    48b8:	0018      	movs	r0, r3
    48ba:	46bd      	mov	sp, r7
    48bc:	b006      	add	sp, #24
    48be:	bdb0      	pop	{r4, r5, r7, pc}
    48c0:	00003829 	.word	0x00003829
    48c4:	0000045b 	.word	0x0000045b
    48c8:	0001e104 	.word	0x0001e104
    48cc:	0001dafc 	.word	0x0001dafc
    48d0:	0001bc4d 	.word	0x0001bc4d
    48d4:	0001def0 	.word	0x0001def0
    48d8:	0001bc81 	.word	0x0001bc81
    48dc:	00003c6d 	.word	0x00003c6d
    48e0:	00000461 	.word	0x00000461
    48e4:	0001df20 	.word	0x0001df20
    48e8:	00003da9 	.word	0x00003da9
    48ec:	00000471 	.word	0x00000471
    48f0:	0001df58 	.word	0x0001df58
    48f4:	0001bd69 	.word	0x0001bd69
    48f8:	00000321 	.word	0x00000321
    48fc:	00000482 	.word	0x00000482
    4900:	0001de3c 	.word	0x0001de3c

00004904 <nm_spi_read_reg>:
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4904:	b580      	push	{r7, lr}
    4906:	b084      	sub	sp, #16
    4908:	af00      	add	r7, sp, #0
    490a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    490c:	230c      	movs	r3, #12
    490e:	18fa      	adds	r2, r7, r3
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	0011      	movs	r1, r2
    4914:	0018      	movs	r0, r3
    4916:	4b03      	ldr	r3, [pc, #12]	; (4924 <nm_spi_read_reg+0x20>)
    4918:	4798      	blx	r3

	return u32Val;
    491a:	68fb      	ldr	r3, [r7, #12]
}
    491c:	0018      	movs	r0, r3
    491e:	46bd      	mov	sp, r7
    4920:	b004      	add	sp, #16
    4922:	bd80      	pop	{r7, pc}
    4924:	00004509 	.word	0x00004509

00004928 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4928:	b580      	push	{r7, lr}
    492a:	b082      	sub	sp, #8
    492c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    492e:	4b0c      	ldr	r3, [pc, #48]	; (4960 <spi_init_pkt_sz+0x38>)
    4930:	0018      	movs	r0, r3
    4932:	4b0c      	ldr	r3, [pc, #48]	; (4964 <spi_init_pkt_sz+0x3c>)
    4934:	4798      	blx	r3
    4936:	0003      	movs	r3, r0
    4938:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	2270      	movs	r2, #112	; 0x70
    493e:	4393      	bics	r3, r2
    4940:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	2250      	movs	r2, #80	; 0x50
    4946:	4313      	orrs	r3, r2
    4948:	607b      	str	r3, [r7, #4]
    494a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	4a04      	ldr	r2, [pc, #16]	; (4960 <spi_init_pkt_sz+0x38>)
    4950:	0019      	movs	r1, r3
    4952:	0010      	movs	r0, r2
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <spi_init_pkt_sz+0x40>)
    4956:	4798      	blx	r3
}
    4958:	46c0      	nop			; (mov r8, r8)
    495a:	46bd      	mov	sp, r7
    495c:	b002      	add	sp, #8
    495e:	bd80      	pop	{r7, pc}
    4960:	0000e824 	.word	0x0000e824
    4964:	00004905 	.word	0x00004905
    4968:	00004b51 	.word	0x00004b51

0000496c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    496c:	b590      	push	{r4, r7, lr}
    496e:	b083      	sub	sp, #12
    4970:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4972:	2300      	movs	r3, #0
    4974:	9300      	str	r3, [sp, #0]
    4976:	2300      	movs	r3, #0
    4978:	2200      	movs	r2, #0
    497a:	2100      	movs	r1, #0
    497c:	20cf      	movs	r0, #207	; 0xcf
    497e:	4c05      	ldr	r4, [pc, #20]	; (4994 <nm_spi_reset+0x28>)
    4980:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    4982:	20cf      	movs	r0, #207	; 0xcf
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <nm_spi_reset+0x2c>)
    4986:	4798      	blx	r3
	return M2M_SUCCESS;
    4988:	2300      	movs	r3, #0
}
    498a:	0018      	movs	r0, r3
    498c:	46bd      	mov	sp, r7
    498e:	b001      	add	sp, #4
    4990:	bd90      	pop	{r4, r7, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	00003829 	.word	0x00003829
    4998:	00003c6d 	.word	0x00003c6d

0000499c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    49a6:	4b3e      	ldr	r3, [pc, #248]	; (4aa0 <nm_spi_init+0x104>)
    49a8:	2200      	movs	r2, #0
    49aa:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    49ac:	003b      	movs	r3, r7
    49ae:	4a3d      	ldr	r2, [pc, #244]	; (4aa4 <nm_spi_init+0x108>)
    49b0:	0019      	movs	r1, r3
    49b2:	0010      	movs	r0, r2
    49b4:	4b3c      	ldr	r3, [pc, #240]	; (4aa8 <nm_spi_init+0x10c>)
    49b6:	4798      	blx	r3
    49b8:	1e03      	subs	r3, r0, #0
    49ba:	d126      	bne.n	4a0a <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    49bc:	4b38      	ldr	r3, [pc, #224]	; (4aa0 <nm_spi_init+0x104>)
    49be:	2201      	movs	r2, #1
    49c0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    49c2:	4a3a      	ldr	r2, [pc, #232]	; (4aac <nm_spi_init+0x110>)
    49c4:	493a      	ldr	r1, [pc, #232]	; (4ab0 <nm_spi_init+0x114>)
    49c6:	4b3b      	ldr	r3, [pc, #236]	; (4ab4 <nm_spi_init+0x118>)
    49c8:	0018      	movs	r0, r3
    49ca:	4b3b      	ldr	r3, [pc, #236]	; (4ab8 <nm_spi_init+0x11c>)
    49cc:	4798      	blx	r3
    49ce:	4b3b      	ldr	r3, [pc, #236]	; (4abc <nm_spi_init+0x120>)
    49d0:	0018      	movs	r0, r3
    49d2:	4b3b      	ldr	r3, [pc, #236]	; (4ac0 <nm_spi_init+0x124>)
    49d4:	4798      	blx	r3
    49d6:	200d      	movs	r0, #13
    49d8:	4b3a      	ldr	r3, [pc, #232]	; (4ac4 <nm_spi_init+0x128>)
    49da:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    49dc:	003b      	movs	r3, r7
    49de:	4a31      	ldr	r2, [pc, #196]	; (4aa4 <nm_spi_init+0x108>)
    49e0:	0019      	movs	r1, r3
    49e2:	0010      	movs	r0, r2
    49e4:	4b30      	ldr	r3, [pc, #192]	; (4aa8 <nm_spi_init+0x10c>)
    49e6:	4798      	blx	r3
    49e8:	1e03      	subs	r3, r0, #0
    49ea:	d10e      	bne.n	4a0a <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    49ec:	4a36      	ldr	r2, [pc, #216]	; (4ac8 <nm_spi_init+0x12c>)
    49ee:	4930      	ldr	r1, [pc, #192]	; (4ab0 <nm_spi_init+0x114>)
    49f0:	4b30      	ldr	r3, [pc, #192]	; (4ab4 <nm_spi_init+0x118>)
    49f2:	0018      	movs	r0, r3
    49f4:	4b30      	ldr	r3, [pc, #192]	; (4ab8 <nm_spi_init+0x11c>)
    49f6:	4798      	blx	r3
    49f8:	4b34      	ldr	r3, [pc, #208]	; (4acc <nm_spi_init+0x130>)
    49fa:	0018      	movs	r0, r3
    49fc:	4b30      	ldr	r3, [pc, #192]	; (4ac0 <nm_spi_init+0x124>)
    49fe:	4798      	blx	r3
    4a00:	200d      	movs	r0, #13
    4a02:	4b30      	ldr	r3, [pc, #192]	; (4ac4 <nm_spi_init+0x128>)
    4a04:	4798      	blx	r3
			return 0;
    4a06:	2300      	movs	r3, #0
    4a08:	e045      	b.n	4a96 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    4a0a:	4b25      	ldr	r3, [pc, #148]	; (4aa0 <nm_spi_init+0x104>)
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d125      	bne.n	4a5e <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    4a12:	683b      	ldr	r3, [r7, #0]
    4a14:	220c      	movs	r2, #12
    4a16:	4393      	bics	r3, r2
    4a18:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	2270      	movs	r2, #112	; 0x70
    4a1e:	4393      	bics	r3, r2
    4a20:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	2250      	movs	r2, #80	; 0x50
    4a26:	4313      	orrs	r3, r2
    4a28:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4a2a:	683b      	ldr	r3, [r7, #0]
    4a2c:	4a1d      	ldr	r2, [pc, #116]	; (4aa4 <nm_spi_init+0x108>)
    4a2e:	0019      	movs	r1, r3
    4a30:	0010      	movs	r0, r2
    4a32:	4b27      	ldr	r3, [pc, #156]	; (4ad0 <nm_spi_init+0x134>)
    4a34:	4798      	blx	r3
    4a36:	1e03      	subs	r3, r0, #0
    4a38:	d10e      	bne.n	4a58 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    4a3a:	4a26      	ldr	r2, [pc, #152]	; (4ad4 <nm_spi_init+0x138>)
    4a3c:	491c      	ldr	r1, [pc, #112]	; (4ab0 <nm_spi_init+0x114>)
    4a3e:	4b1d      	ldr	r3, [pc, #116]	; (4ab4 <nm_spi_init+0x118>)
    4a40:	0018      	movs	r0, r3
    4a42:	4b1d      	ldr	r3, [pc, #116]	; (4ab8 <nm_spi_init+0x11c>)
    4a44:	4798      	blx	r3
    4a46:	4b24      	ldr	r3, [pc, #144]	; (4ad8 <nm_spi_init+0x13c>)
    4a48:	0018      	movs	r0, r3
    4a4a:	4b1d      	ldr	r3, [pc, #116]	; (4ac0 <nm_spi_init+0x124>)
    4a4c:	4798      	blx	r3
    4a4e:	200d      	movs	r0, #13
    4a50:	4b1c      	ldr	r3, [pc, #112]	; (4ac4 <nm_spi_init+0x128>)
    4a52:	4798      	blx	r3
			return 0;
    4a54:	2300      	movs	r3, #0
    4a56:	e01e      	b.n	4a96 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    4a58:	4b11      	ldr	r3, [pc, #68]	; (4aa0 <nm_spi_init+0x104>)
    4a5a:	2201      	movs	r2, #1
    4a5c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    4a5e:	1d3a      	adds	r2, r7, #4
    4a60:	2380      	movs	r3, #128	; 0x80
    4a62:	015b      	lsls	r3, r3, #5
    4a64:	0011      	movs	r1, r2
    4a66:	0018      	movs	r0, r3
    4a68:	4b0f      	ldr	r3, [pc, #60]	; (4aa8 <nm_spi_init+0x10c>)
    4a6a:	4798      	blx	r3
    4a6c:	1e03      	subs	r3, r0, #0
    4a6e:	d10f      	bne.n	4a90 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    4a70:	4a1a      	ldr	r2, [pc, #104]	; (4adc <nm_spi_init+0x140>)
    4a72:	490f      	ldr	r1, [pc, #60]	; (4ab0 <nm_spi_init+0x114>)
    4a74:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <nm_spi_init+0x118>)
    4a76:	0018      	movs	r0, r3
    4a78:	4b0f      	ldr	r3, [pc, #60]	; (4ab8 <nm_spi_init+0x11c>)
    4a7a:	4798      	blx	r3
    4a7c:	4b18      	ldr	r3, [pc, #96]	; (4ae0 <nm_spi_init+0x144>)
    4a7e:	0018      	movs	r0, r3
    4a80:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <nm_spi_init+0x124>)
    4a82:	4798      	blx	r3
    4a84:	200d      	movs	r0, #13
    4a86:	4b0f      	ldr	r3, [pc, #60]	; (4ac4 <nm_spi_init+0x128>)
    4a88:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    4a8a:	2306      	movs	r3, #6
    4a8c:	425b      	negs	r3, r3
    4a8e:	e002      	b.n	4a96 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    4a90:	4b14      	ldr	r3, [pc, #80]	; (4ae4 <nm_spi_init+0x148>)
    4a92:	4798      	blx	r3


	return M2M_SUCCESS;
    4a94:	2300      	movs	r3, #0
}
    4a96:	0018      	movs	r0, r3
    4a98:	46bd      	mov	sp, r7
    4a9a:	b002      	add	sp, #8
    4a9c:	bd80      	pop	{r7, pc}
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	200006d4 	.word	0x200006d4
    4aa4:	0000e824 	.word	0x0000e824
    4aa8:	00004509 	.word	0x00004509
    4aac:	000004cc 	.word	0x000004cc
    4ab0:	0001e110 	.word	0x0001e110
    4ab4:	0001dafc 	.word	0x0001dafc
    4ab8:	0001bc4d 	.word	0x0001bc4d
    4abc:	0001df80 	.word	0x0001df80
    4ac0:	0001bd69 	.word	0x0001bd69
    4ac4:	0001bc81 	.word	0x0001bc81
    4ac8:	000004cf 	.word	0x000004cf
    4acc:	0001dfd0 	.word	0x0001dfd0
    4ad0:	00004181 	.word	0x00004181
    4ad4:	000004d9 	.word	0x000004d9
    4ad8:	0001dffc 	.word	0x0001dffc
    4adc:	000004e3 	.word	0x000004e3
    4ae0:	0001e030 	.word	0x0001e030
    4ae4:	00004929 	.word	0x00004929

00004ae8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4ae8:	b580      	push	{r7, lr}
    4aea:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4aec:	4b03      	ldr	r3, [pc, #12]	; (4afc <nm_spi_deinit+0x14>)
    4aee:	2200      	movs	r2, #0
    4af0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4af2:	2300      	movs	r3, #0
}
    4af4:	0018      	movs	r0, r3
    4af6:	46bd      	mov	sp, r7
    4af8:	bd80      	pop	{r7, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	200006d4 	.word	0x200006d4

00004b00 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4b00:	b590      	push	{r4, r7, lr}
    4b02:	b085      	sub	sp, #20
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
    4b08:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4b0a:	230f      	movs	r3, #15
    4b0c:	18fc      	adds	r4, r7, r3
    4b0e:	683a      	ldr	r2, [r7, #0]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	0011      	movs	r1, r2
    4b14:	0018      	movs	r0, r3
    4b16:	4b0d      	ldr	r3, [pc, #52]	; (4b4c <nm_spi_read_reg_with_ret+0x4c>)
    4b18:	4798      	blx	r3
    4b1a:	0003      	movs	r3, r0
    4b1c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4b1e:	230f      	movs	r3, #15
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	b25b      	sxtb	r3, r3
    4b26:	2b01      	cmp	r3, #1
    4b28:	d104      	bne.n	4b34 <nm_spi_read_reg_with_ret+0x34>
    4b2a:	230f      	movs	r3, #15
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	2200      	movs	r2, #0
    4b30:	701a      	strb	r2, [r3, #0]
    4b32:	e003      	b.n	4b3c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4b34:	230f      	movs	r3, #15
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	22fa      	movs	r2, #250	; 0xfa
    4b3a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4b3c:	230f      	movs	r3, #15
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	781b      	ldrb	r3, [r3, #0]
    4b42:	b25b      	sxtb	r3, r3
}
    4b44:	0018      	movs	r0, r3
    4b46:	46bd      	mov	sp, r7
    4b48:	b005      	add	sp, #20
    4b4a:	bd90      	pop	{r4, r7, pc}
    4b4c:	00004509 	.word	0x00004509

00004b50 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4b50:	b590      	push	{r4, r7, lr}
    4b52:	b085      	sub	sp, #20
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
    4b58:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4b5a:	230f      	movs	r3, #15
    4b5c:	18fc      	adds	r4, r7, r3
    4b5e:	683a      	ldr	r2, [r7, #0]
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	0011      	movs	r1, r2
    4b64:	0018      	movs	r0, r3
    4b66:	4b0d      	ldr	r3, [pc, #52]	; (4b9c <nm_spi_write_reg+0x4c>)
    4b68:	4798      	blx	r3
    4b6a:	0003      	movs	r3, r0
    4b6c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4b6e:	230f      	movs	r3, #15
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	781b      	ldrb	r3, [r3, #0]
    4b74:	b25b      	sxtb	r3, r3
    4b76:	2b01      	cmp	r3, #1
    4b78:	d104      	bne.n	4b84 <nm_spi_write_reg+0x34>
    4b7a:	230f      	movs	r3, #15
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	2200      	movs	r2, #0
    4b80:	701a      	strb	r2, [r3, #0]
    4b82:	e003      	b.n	4b8c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4b84:	230f      	movs	r3, #15
    4b86:	18fb      	adds	r3, r7, r3
    4b88:	22fa      	movs	r2, #250	; 0xfa
    4b8a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4b8c:	230f      	movs	r3, #15
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	b25b      	sxtb	r3, r3
}
    4b94:	0018      	movs	r0, r3
    4b96:	46bd      	mov	sp, r7
    4b98:	b005      	add	sp, #20
    4b9a:	bd90      	pop	{r4, r7, pc}
    4b9c:	00004181 	.word	0x00004181

00004ba0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4ba0:	b590      	push	{r4, r7, lr}
    4ba2:	b087      	sub	sp, #28
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	60f8      	str	r0, [r7, #12]
    4ba8:	60b9      	str	r1, [r7, #8]
    4baa:	1dbb      	adds	r3, r7, #6
    4bac:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4bae:	2317      	movs	r3, #23
    4bb0:	18fc      	adds	r4, r7, r3
    4bb2:	1dbb      	adds	r3, r7, #6
    4bb4:	881a      	ldrh	r2, [r3, #0]
    4bb6:	68b9      	ldr	r1, [r7, #8]
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	0018      	movs	r0, r3
    4bbc:	4b0d      	ldr	r3, [pc, #52]	; (4bf4 <nm_spi_read_block+0x54>)
    4bbe:	4798      	blx	r3
    4bc0:	0003      	movs	r3, r0
    4bc2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4bc4:	2317      	movs	r3, #23
    4bc6:	18fb      	adds	r3, r7, r3
    4bc8:	781b      	ldrb	r3, [r3, #0]
    4bca:	b25b      	sxtb	r3, r3
    4bcc:	2b01      	cmp	r3, #1
    4bce:	d104      	bne.n	4bda <nm_spi_read_block+0x3a>
    4bd0:	2317      	movs	r3, #23
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	2200      	movs	r2, #0
    4bd6:	701a      	strb	r2, [r3, #0]
    4bd8:	e003      	b.n	4be2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4bda:	2317      	movs	r3, #23
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	22fa      	movs	r2, #250	; 0xfa
    4be0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4be2:	2317      	movs	r3, #23
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	781b      	ldrb	r3, [r3, #0]
    4be8:	b25b      	sxtb	r3, r3
}
    4bea:	0018      	movs	r0, r3
    4bec:	46bd      	mov	sp, r7
    4bee:	b007      	add	sp, #28
    4bf0:	bd90      	pop	{r4, r7, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	00004711 	.word	0x00004711

00004bf8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4bf8:	b590      	push	{r4, r7, lr}
    4bfa:	b087      	sub	sp, #28
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	60b9      	str	r1, [r7, #8]
    4c02:	1dbb      	adds	r3, r7, #6
    4c04:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    4c06:	2317      	movs	r3, #23
    4c08:	18fc      	adds	r4, r7, r3
    4c0a:	1dbb      	adds	r3, r7, #6
    4c0c:	881a      	ldrh	r2, [r3, #0]
    4c0e:	68b9      	ldr	r1, [r7, #8]
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	0018      	movs	r0, r3
    4c14:	4b0d      	ldr	r3, [pc, #52]	; (4c4c <nm_spi_write_block+0x54>)
    4c16:	4798      	blx	r3
    4c18:	0003      	movs	r3, r0
    4c1a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4c1c:	2317      	movs	r3, #23
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	b25b      	sxtb	r3, r3
    4c24:	2b01      	cmp	r3, #1
    4c26:	d104      	bne.n	4c32 <nm_spi_write_block+0x3a>
    4c28:	2317      	movs	r3, #23
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	2200      	movs	r2, #0
    4c2e:	701a      	strb	r2, [r3, #0]
    4c30:	e003      	b.n	4c3a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4c32:	2317      	movs	r3, #23
    4c34:	18fb      	adds	r3, r7, r3
    4c36:	22fa      	movs	r2, #250	; 0xfa
    4c38:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4c3a:	2317      	movs	r3, #23
    4c3c:	18fb      	adds	r3, r7, r3
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	b25b      	sxtb	r3, r3
}
    4c42:	0018      	movs	r0, r3
    4c44:	46bd      	mov	sp, r7
    4c46:	b007      	add	sp, #28
    4c48:	bd90      	pop	{r4, r7, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	0000430d 	.word	0x0000430d

00004c50 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    4c50:	b590      	push	{r4, r7, lr}
    4c52:	b089      	sub	sp, #36	; 0x24
    4c54:	af00      	add	r7, sp, #0
    4c56:	60b9      	str	r1, [r7, #8]
    4c58:	0011      	movs	r1, r2
    4c5a:	607b      	str	r3, [r7, #4]
    4c5c:	230f      	movs	r3, #15
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	1c02      	adds	r2, r0, #0
    4c62:	701a      	strb	r2, [r3, #0]
    4c64:	230e      	movs	r3, #14
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	1c0a      	adds	r2, r1, #0
    4c6a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    4c6c:	2330      	movs	r3, #48	; 0x30
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	881b      	ldrh	r3, [r3, #0]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d100      	bne.n	4c78 <Socket_ReadSocketData+0x28>
    4c76:	e0d6      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
    4c78:	230f      	movs	r3, #15
    4c7a:	18fb      	adds	r3, r7, r3
    4c7c:	2200      	movs	r2, #0
    4c7e:	569a      	ldrsb	r2, [r3, r2]
    4c80:	4b6b      	ldr	r3, [pc, #428]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4c82:	0112      	lsls	r2, r2, #4
    4c84:	58d3      	ldr	r3, [r2, r3]
    4c86:	2b00      	cmp	r3, #0
    4c88:	d100      	bne.n	4c8c <Socket_ReadSocketData+0x3c>
    4c8a:	e0cc      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
    4c8c:	230f      	movs	r3, #15
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	781b      	ldrb	r3, [r3, #0]
    4c92:	b25b      	sxtb	r3, r3
    4c94:	4a66      	ldr	r2, [pc, #408]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4c96:	011b      	lsls	r3, r3, #4
    4c98:	18d3      	adds	r3, r2, r3
    4c9a:	3304      	adds	r3, #4
    4c9c:	881b      	ldrh	r3, [r3, #0]
    4c9e:	b29b      	uxth	r3, r3
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d100      	bne.n	4ca6 <Socket_ReadSocketData+0x56>
    4ca4:	e0bf      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
    4ca6:	230f      	movs	r3, #15
    4ca8:	18fb      	adds	r3, r7, r3
    4caa:	781b      	ldrb	r3, [r3, #0]
    4cac:	b25b      	sxtb	r3, r3
    4cae:	4a60      	ldr	r2, [pc, #384]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4cb0:	011b      	lsls	r3, r3, #4
    4cb2:	18d3      	adds	r3, r2, r3
    4cb4:	330a      	adds	r3, #10
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	b2db      	uxtb	r3, r3
    4cba:	2b01      	cmp	r3, #1
    4cbc:	d000      	beq.n	4cc0 <Socket_ReadSocketData+0x70>
    4cbe:	e0b2      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4cc4:	68bb      	ldr	r3, [r7, #8]
    4cc6:	2230      	movs	r2, #48	; 0x30
    4cc8:	18ba      	adds	r2, r7, r2
    4cca:	8812      	ldrh	r2, [r2, #0]
    4ccc:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    4cce:	2319      	movs	r3, #25
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	2201      	movs	r2, #1
    4cd4:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4cd6:	231a      	movs	r3, #26
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	2230      	movs	r2, #48	; 0x30
    4cdc:	18ba      	adds	r2, r7, r2
    4cde:	8812      	ldrh	r2, [r2, #0]
    4ce0:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    4ce2:	230f      	movs	r3, #15
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	781b      	ldrb	r3, [r3, #0]
    4ce8:	b25b      	sxtb	r3, r3
    4cea:	4a51      	ldr	r2, [pc, #324]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4cec:	011b      	lsls	r3, r3, #4
    4cee:	18d3      	adds	r3, r2, r3
    4cf0:	3304      	adds	r3, #4
    4cf2:	881b      	ldrh	r3, [r3, #0]
    4cf4:	b29b      	uxth	r3, r3
    4cf6:	221a      	movs	r2, #26
    4cf8:	18ba      	adds	r2, r7, r2
    4cfa:	8812      	ldrh	r2, [r2, #0]
    4cfc:	1ad3      	subs	r3, r2, r3
    4cfe:	b29a      	uxth	r2, r3
    4d00:	2316      	movs	r3, #22
    4d02:	18fb      	adds	r3, r7, r3
    4d04:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    4d06:	2316      	movs	r3, #22
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	2200      	movs	r2, #0
    4d0c:	5e9b      	ldrsh	r3, [r3, r2]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	dd0f      	ble.n	4d32 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    4d12:	2319      	movs	r3, #25
    4d14:	18fb      	adds	r3, r7, r3
    4d16:	2200      	movs	r2, #0
    4d18:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    4d1a:	230f      	movs	r3, #15
    4d1c:	18fb      	adds	r3, r7, r3
    4d1e:	2200      	movs	r2, #0
    4d20:	569a      	ldrsb	r2, [r3, r2]
    4d22:	231a      	movs	r3, #26
    4d24:	18fb      	adds	r3, r7, r3
    4d26:	4942      	ldr	r1, [pc, #264]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4d28:	0112      	lsls	r2, r2, #4
    4d2a:	188a      	adds	r2, r1, r2
    4d2c:	3204      	adds	r2, #4
    4d2e:	8812      	ldrh	r2, [r2, #0]
    4d30:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    4d32:	230f      	movs	r3, #15
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	2200      	movs	r2, #0
    4d38:	569a      	ldrsb	r2, [r3, r2]
    4d3a:	4b3d      	ldr	r3, [pc, #244]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4d3c:	0112      	lsls	r2, r2, #4
    4d3e:	58d1      	ldr	r1, [r2, r3]
    4d40:	2319      	movs	r3, #25
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	781c      	ldrb	r4, [r3, #0]
    4d46:	231a      	movs	r3, #26
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	881a      	ldrh	r2, [r3, #0]
    4d4c:	69f8      	ldr	r0, [r7, #28]
    4d4e:	0023      	movs	r3, r4
    4d50:	4c38      	ldr	r4, [pc, #224]	; (4e34 <Socket_ReadSocketData+0x1e4>)
    4d52:	47a0      	blx	r4
    4d54:	1e03      	subs	r3, r0, #0
    4d56:	d14f      	bne.n	4df8 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    4d58:	230f      	movs	r3, #15
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	2200      	movs	r2, #0
    4d5e:	569a      	ldrsb	r2, [r3, r2]
    4d60:	4b33      	ldr	r3, [pc, #204]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4d62:	0112      	lsls	r2, r2, #4
    4d64:	58d2      	ldr	r2, [r2, r3]
    4d66:	68bb      	ldr	r3, [r7, #8]
    4d68:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    4d6a:	231a      	movs	r3, #26
    4d6c:	18fb      	adds	r3, r7, r3
    4d6e:	2200      	movs	r2, #0
    4d70:	5e9a      	ldrsh	r2, [r3, r2]
    4d72:	68bb      	ldr	r3, [r7, #8]
    4d74:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    4d76:	68bb      	ldr	r3, [r7, #8]
    4d78:	88da      	ldrh	r2, [r3, #6]
    4d7a:	231a      	movs	r3, #26
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	881b      	ldrh	r3, [r3, #0]
    4d80:	1ad3      	subs	r3, r2, r3
    4d82:	b29a      	uxth	r2, r3
    4d84:	68bb      	ldr	r3, [r7, #8]
    4d86:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4d88:	4b2b      	ldr	r3, [pc, #172]	; (4e38 <Socket_ReadSocketData+0x1e8>)
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d00b      	beq.n	4da8 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4d90:	4b29      	ldr	r3, [pc, #164]	; (4e38 <Socket_ReadSocketData+0x1e8>)
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	68bc      	ldr	r4, [r7, #8]
    4d96:	220e      	movs	r2, #14
    4d98:	18ba      	adds	r2, r7, r2
    4d9a:	7811      	ldrb	r1, [r2, #0]
    4d9c:	220f      	movs	r2, #15
    4d9e:	18ba      	adds	r2, r7, r2
    4da0:	2000      	movs	r0, #0
    4da2:	5610      	ldrsb	r0, [r2, r0]
    4da4:	0022      	movs	r2, r4
    4da6:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4da8:	2330      	movs	r3, #48	; 0x30
    4daa:	18f9      	adds	r1, r7, r3
    4dac:	2330      	movs	r3, #48	; 0x30
    4dae:	18fa      	adds	r2, r7, r3
    4db0:	231a      	movs	r3, #26
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	8812      	ldrh	r2, [r2, #0]
    4db6:	881b      	ldrh	r3, [r3, #0]
    4db8:	1ad3      	subs	r3, r2, r3
    4dba:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4dbc:	231a      	movs	r3, #26
    4dbe:	18fb      	adds	r3, r7, r3
    4dc0:	881b      	ldrh	r3, [r3, #0]
    4dc2:	69fa      	ldr	r2, [r7, #28]
    4dc4:	18d3      	adds	r3, r2, r3
    4dc6:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4dc8:	230f      	movs	r3, #15
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	781b      	ldrb	r3, [r3, #0]
    4dce:	b25b      	sxtb	r3, r3
    4dd0:	4a17      	ldr	r2, [pc, #92]	; (4e30 <Socket_ReadSocketData+0x1e0>)
    4dd2:	011b      	lsls	r3, r3, #4
    4dd4:	18d3      	adds	r3, r2, r3
    4dd6:	330a      	adds	r3, #10
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	b2db      	uxtb	r3, r3
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d11b      	bne.n	4e18 <Socket_ReadSocketData+0x1c8>
    4de0:	2330      	movs	r3, #48	; 0x30
    4de2:	18fb      	adds	r3, r7, r3
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	2b00      	cmp	r3, #0
    4de8:	d016      	beq.n	4e18 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4dea:	2301      	movs	r3, #1
    4dec:	2200      	movs	r2, #0
    4dee:	2100      	movs	r1, #0
    4df0:	2000      	movs	r0, #0
    4df2:	4c10      	ldr	r4, [pc, #64]	; (4e34 <Socket_ReadSocketData+0x1e4>)
    4df4:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    4df6:	e016      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    4df8:	4b10      	ldr	r3, [pc, #64]	; (4e3c <Socket_ReadSocketData+0x1ec>)
    4dfa:	0018      	movs	r0, r3
    4dfc:	4b10      	ldr	r3, [pc, #64]	; (4e40 <Socket_ReadSocketData+0x1f0>)
    4dfe:	4798      	blx	r3
    4e00:	2330      	movs	r3, #48	; 0x30
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	881a      	ldrh	r2, [r3, #0]
    4e06:	4b0f      	ldr	r3, [pc, #60]	; (4e44 <Socket_ReadSocketData+0x1f4>)
    4e08:	0011      	movs	r1, r2
    4e0a:	0018      	movs	r0, r3
    4e0c:	4b0c      	ldr	r3, [pc, #48]	; (4e40 <Socket_ReadSocketData+0x1f0>)
    4e0e:	4798      	blx	r3
    4e10:	200d      	movs	r0, #13
    4e12:	4b0d      	ldr	r3, [pc, #52]	; (4e48 <Socket_ReadSocketData+0x1f8>)
    4e14:	4798      	blx	r3
				break;
    4e16:	e006      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    4e18:	2330      	movs	r3, #48	; 0x30
    4e1a:	18fb      	adds	r3, r7, r3
    4e1c:	881b      	ldrh	r3, [r3, #0]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d000      	beq.n	4e24 <Socket_ReadSocketData+0x1d4>
    4e22:	e754      	b.n	4cce <Socket_ReadSocketData+0x7e>
	}
}
    4e24:	e7ff      	b.n	4e26 <Socket_ReadSocketData+0x1d6>
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	46bd      	mov	sp, r7
    4e2a:	b009      	add	sp, #36	; 0x24
    4e2c:	bd90      	pop	{r4, r7, pc}
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	200019c0 	.word	0x200019c0
    4e34:	000016b9 	.word	0x000016b9
    4e38:	20001a70 	.word	0x20001a70
    4e3c:	0001e11c 	.word	0x0001e11c
    4e40:	0001bc4d 	.word	0x0001bc4d
    4e44:	0001e128 	.word	0x0001e128
    4e48:	0001bc81 	.word	0x0001bc81

00004e4c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4e4c:	b590      	push	{r4, r7, lr}
    4e4e:	b0bb      	sub	sp, #236	; 0xec
    4e50:	af02      	add	r7, sp, #8
    4e52:	603a      	str	r2, [r7, #0]
    4e54:	1dfb      	adds	r3, r7, #7
    4e56:	1c02      	adds	r2, r0, #0
    4e58:	701a      	strb	r2, [r3, #0]
    4e5a:	1d3b      	adds	r3, r7, #4
    4e5c:	1c0a      	adds	r2, r1, #0
    4e5e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4e60:	1dfb      	adds	r3, r7, #7
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	2b41      	cmp	r3, #65	; 0x41
    4e66:	d003      	beq.n	4e70 <m2m_ip_cb+0x24>
    4e68:	1dfb      	adds	r3, r7, #7
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	2b54      	cmp	r3, #84	; 0x54
    4e6e:	d120      	bne.n	4eb2 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4e70:	23cc      	movs	r3, #204	; 0xcc
    4e72:	18f9      	adds	r1, r7, r3
    4e74:	6838      	ldr	r0, [r7, #0]
    4e76:	2300      	movs	r3, #0
    4e78:	2204      	movs	r2, #4
    4e7a:	4c98      	ldr	r4, [pc, #608]	; (50dc <m2m_ip_cb+0x290>)
    4e7c:	47a0      	blx	r4
    4e7e:	1e03      	subs	r3, r0, #0
    4e80:	d000      	beq.n	4e84 <m2m_ip_cb+0x38>
    4e82:	e275      	b.n	5370 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4e84:	23cc      	movs	r3, #204	; 0xcc
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	2201      	movs	r2, #1
    4e8a:	569a      	ldrsb	r2, [r3, r2]
    4e8c:	23c8      	movs	r3, #200	; 0xc8
    4e8e:	18fb      	adds	r3, r7, r3
    4e90:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4e92:	4b93      	ldr	r3, [pc, #588]	; (50e0 <m2m_ip_cb+0x294>)
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	2b00      	cmp	r3, #0
    4e98:	d100      	bne.n	4e9c <m2m_ip_cb+0x50>
    4e9a:	e269      	b.n	5370 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4e9c:	4b90      	ldr	r3, [pc, #576]	; (50e0 <m2m_ip_cb+0x294>)
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	22cc      	movs	r2, #204	; 0xcc
    4ea2:	18ba      	adds	r2, r7, r2
    4ea4:	2000      	movs	r0, #0
    4ea6:	5610      	ldrsb	r0, [r2, r0]
    4ea8:	22c8      	movs	r2, #200	; 0xc8
    4eaa:	18ba      	adds	r2, r7, r2
    4eac:	2101      	movs	r1, #1
    4eae:	4798      	blx	r3
	{
    4eb0:	e25e      	b.n	5370 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4eb2:	1dfb      	adds	r3, r7, #7
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	2b42      	cmp	r3, #66	; 0x42
    4eb8:	d120      	bne.n	4efc <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4eba:	23c4      	movs	r3, #196	; 0xc4
    4ebc:	18f9      	adds	r1, r7, r3
    4ebe:	6838      	ldr	r0, [r7, #0]
    4ec0:	2300      	movs	r3, #0
    4ec2:	2204      	movs	r2, #4
    4ec4:	4c85      	ldr	r4, [pc, #532]	; (50dc <m2m_ip_cb+0x290>)
    4ec6:	47a0      	blx	r4
    4ec8:	1e03      	subs	r3, r0, #0
    4eca:	d000      	beq.n	4ece <m2m_ip_cb+0x82>
    4ecc:	e257      	b.n	537e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4ece:	23c4      	movs	r3, #196	; 0xc4
    4ed0:	18fb      	adds	r3, r7, r3
    4ed2:	2201      	movs	r2, #1
    4ed4:	569a      	ldrsb	r2, [r3, r2]
    4ed6:	23c0      	movs	r3, #192	; 0xc0
    4ed8:	18fb      	adds	r3, r7, r3
    4eda:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4edc:	4b80      	ldr	r3, [pc, #512]	; (50e0 <m2m_ip_cb+0x294>)
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d100      	bne.n	4ee6 <m2m_ip_cb+0x9a>
    4ee4:	e24b      	b.n	537e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4ee6:	4b7e      	ldr	r3, [pc, #504]	; (50e0 <m2m_ip_cb+0x294>)
    4ee8:	681b      	ldr	r3, [r3, #0]
    4eea:	22c4      	movs	r2, #196	; 0xc4
    4eec:	18ba      	adds	r2, r7, r2
    4eee:	2000      	movs	r0, #0
    4ef0:	5610      	ldrsb	r0, [r2, r0]
    4ef2:	22c0      	movs	r2, #192	; 0xc0
    4ef4:	18ba      	adds	r2, r7, r2
    4ef6:	2102      	movs	r1, #2
    4ef8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4efa:	e240      	b.n	537e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4efc:	1dfb      	adds	r3, r7, #7
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	2b43      	cmp	r3, #67	; 0x43
    4f02:	d000      	beq.n	4f06 <m2m_ip_cb+0xba>
    4f04:	e086      	b.n	5014 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4f06:	23b4      	movs	r3, #180	; 0xb4
    4f08:	18f9      	adds	r1, r7, r3
    4f0a:	6838      	ldr	r0, [r7, #0]
    4f0c:	2300      	movs	r3, #0
    4f0e:	220c      	movs	r2, #12
    4f10:	4c72      	ldr	r4, [pc, #456]	; (50dc <m2m_ip_cb+0x290>)
    4f12:	47a0      	blx	r4
    4f14:	1e03      	subs	r3, r0, #0
    4f16:	d000      	beq.n	4f1a <m2m_ip_cb+0xce>
    4f18:	e231      	b.n	537e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4f1a:	23b4      	movs	r3, #180	; 0xb4
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	7a5b      	ldrb	r3, [r3, #9]
    4f20:	b25b      	sxtb	r3, r3
    4f22:	2b00      	cmp	r3, #0
    4f24:	db4f      	blt.n	4fc6 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4f26:	23b4      	movs	r3, #180	; 0xb4
    4f28:	18fb      	adds	r3, r7, r3
    4f2a:	7a5b      	ldrb	r3, [r3, #9]
    4f2c:	b25b      	sxtb	r3, r3
    4f2e:	0018      	movs	r0, r3
    4f30:	23b4      	movs	r3, #180	; 0xb4
    4f32:	18fb      	adds	r3, r7, r3
    4f34:	7a1b      	ldrb	r3, [r3, #8]
    4f36:	b25b      	sxtb	r3, r3
    4f38:	4a6a      	ldr	r2, [pc, #424]	; (50e4 <m2m_ip_cb+0x298>)
    4f3a:	011b      	lsls	r3, r3, #4
    4f3c:	18d3      	adds	r3, r2, r3
    4f3e:	330b      	adds	r3, #11
    4f40:	781b      	ldrb	r3, [r3, #0]
    4f42:	b2d9      	uxtb	r1, r3
    4f44:	4a67      	ldr	r2, [pc, #412]	; (50e4 <m2m_ip_cb+0x298>)
    4f46:	0103      	lsls	r3, r0, #4
    4f48:	18d3      	adds	r3, r2, r3
    4f4a:	330b      	adds	r3, #11
    4f4c:	1c0a      	adds	r2, r1, #0
    4f4e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4f50:	23b4      	movs	r3, #180	; 0xb4
    4f52:	18fb      	adds	r3, r7, r3
    4f54:	7a5b      	ldrb	r3, [r3, #9]
    4f56:	b25b      	sxtb	r3, r3
    4f58:	4a62      	ldr	r2, [pc, #392]	; (50e4 <m2m_ip_cb+0x298>)
    4f5a:	011b      	lsls	r3, r3, #4
    4f5c:	18d3      	adds	r3, r2, r3
    4f5e:	330a      	adds	r3, #10
    4f60:	2201      	movs	r2, #1
    4f62:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4f64:	23b4      	movs	r3, #180	; 0xb4
    4f66:	18fb      	adds	r3, r7, r3
    4f68:	7a5b      	ldrb	r3, [r3, #9]
    4f6a:	b25b      	sxtb	r3, r3
    4f6c:	0018      	movs	r0, r3
    4f6e:	23b4      	movs	r3, #180	; 0xb4
    4f70:	18fb      	adds	r3, r7, r3
    4f72:	895b      	ldrh	r3, [r3, #10]
    4f74:	3b08      	subs	r3, #8
    4f76:	b299      	uxth	r1, r3
    4f78:	4a5a      	ldr	r2, [pc, #360]	; (50e4 <m2m_ip_cb+0x298>)
    4f7a:	0103      	lsls	r3, r0, #4
    4f7c:	18d3      	adds	r3, r2, r3
    4f7e:	3308      	adds	r3, #8
    4f80:	1c0a      	adds	r2, r1, #0
    4f82:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4f84:	4b58      	ldr	r3, [pc, #352]	; (50e8 <m2m_ip_cb+0x29c>)
    4f86:	881b      	ldrh	r3, [r3, #0]
    4f88:	b29b      	uxth	r3, r3
    4f8a:	3301      	adds	r3, #1
    4f8c:	b29a      	uxth	r2, r3
    4f8e:	4b56      	ldr	r3, [pc, #344]	; (50e8 <m2m_ip_cb+0x29c>)
    4f90:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4f92:	4b55      	ldr	r3, [pc, #340]	; (50e8 <m2m_ip_cb+0x29c>)
    4f94:	881b      	ldrh	r3, [r3, #0]
    4f96:	b29b      	uxth	r3, r3
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d106      	bne.n	4faa <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4f9c:	4b52      	ldr	r3, [pc, #328]	; (50e8 <m2m_ip_cb+0x29c>)
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	b29b      	uxth	r3, r3
    4fa2:	3301      	adds	r3, #1
    4fa4:	b29a      	uxth	r2, r3
    4fa6:	4b50      	ldr	r3, [pc, #320]	; (50e8 <m2m_ip_cb+0x29c>)
    4fa8:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4faa:	23b4      	movs	r3, #180	; 0xb4
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	7a5b      	ldrb	r3, [r3, #9]
    4fb0:	b25b      	sxtb	r3, r3
    4fb2:	0018      	movs	r0, r3
    4fb4:	4b4c      	ldr	r3, [pc, #304]	; (50e8 <m2m_ip_cb+0x29c>)
    4fb6:	881b      	ldrh	r3, [r3, #0]
    4fb8:	b299      	uxth	r1, r3
    4fba:	4a4a      	ldr	r2, [pc, #296]	; (50e4 <m2m_ip_cb+0x298>)
    4fbc:	0103      	lsls	r3, r0, #4
    4fbe:	18d3      	adds	r3, r2, r3
    4fc0:	3306      	adds	r3, #6
    4fc2:	1c0a      	adds	r2, r1, #0
    4fc4:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4fc6:	23b4      	movs	r3, #180	; 0xb4
    4fc8:	18fb      	adds	r3, r7, r3
    4fca:	2209      	movs	r2, #9
    4fcc:	569a      	ldrsb	r2, [r3, r2]
    4fce:	23a0      	movs	r3, #160	; 0xa0
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4fd4:	23a0      	movs	r3, #160	; 0xa0
    4fd6:	18fb      	adds	r3, r7, r3
    4fd8:	2202      	movs	r2, #2
    4fda:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4fdc:	23b4      	movs	r3, #180	; 0xb4
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	885a      	ldrh	r2, [r3, #2]
    4fe2:	23a0      	movs	r3, #160	; 0xa0
    4fe4:	18fb      	adds	r3, r7, r3
    4fe6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4fe8:	23b4      	movs	r3, #180	; 0xb4
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	685a      	ldr	r2, [r3, #4]
    4fee:	23a0      	movs	r3, #160	; 0xa0
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4ff4:	4b3a      	ldr	r3, [pc, #232]	; (50e0 <m2m_ip_cb+0x294>)
    4ff6:	681b      	ldr	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d100      	bne.n	4ffe <m2m_ip_cb+0x1b2>
    4ffc:	e1bf      	b.n	537e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4ffe:	4b38      	ldr	r3, [pc, #224]	; (50e0 <m2m_ip_cb+0x294>)
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	22b4      	movs	r2, #180	; 0xb4
    5004:	18ba      	adds	r2, r7, r2
    5006:	2008      	movs	r0, #8
    5008:	5610      	ldrsb	r0, [r2, r0]
    500a:	22a0      	movs	r2, #160	; 0xa0
    500c:	18ba      	adds	r2, r7, r2
    500e:	2104      	movs	r1, #4
    5010:	4798      	blx	r3
}
    5012:	e1b4      	b.n	537e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    5014:	1dfb      	adds	r3, r7, #7
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	2b44      	cmp	r3, #68	; 0x44
    501a:	d003      	beq.n	5024 <m2m_ip_cb+0x1d8>
    501c:	1dfb      	adds	r3, r7, #7
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	2b4b      	cmp	r3, #75	; 0x4b
    5022:	d13d      	bne.n	50a0 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    5024:	239c      	movs	r3, #156	; 0x9c
    5026:	18f9      	adds	r1, r7, r3
    5028:	6838      	ldr	r0, [r7, #0]
    502a:	2300      	movs	r3, #0
    502c:	2204      	movs	r2, #4
    502e:	4c2b      	ldr	r4, [pc, #172]	; (50dc <m2m_ip_cb+0x290>)
    5030:	47a0      	blx	r4
    5032:	1e03      	subs	r3, r0, #0
    5034:	d000      	beq.n	5038 <m2m_ip_cb+0x1ec>
    5036:	e19d      	b.n	5374 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    5038:	239c      	movs	r3, #156	; 0x9c
    503a:	18fb      	adds	r3, r7, r3
    503c:	2200      	movs	r2, #0
    503e:	569a      	ldrsb	r2, [r3, r2]
    5040:	2398      	movs	r3, #152	; 0x98
    5042:	18fb      	adds	r3, r7, r3
    5044:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    5046:	239c      	movs	r3, #156	; 0x9c
    5048:	18fb      	adds	r3, r7, r3
    504a:	2201      	movs	r2, #1
    504c:	569a      	ldrsb	r2, [r3, r2]
    504e:	2398      	movs	r3, #152	; 0x98
    5050:	18fb      	adds	r3, r7, r3
    5052:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    5054:	239c      	movs	r3, #156	; 0x9c
    5056:	18fb      	adds	r3, r7, r3
    5058:	785b      	ldrb	r3, [r3, #1]
    505a:	b25b      	sxtb	r3, r3
    505c:	2b00      	cmp	r3, #0
    505e:	d10f      	bne.n	5080 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    5060:	239c      	movs	r3, #156	; 0x9c
    5062:	18fb      	adds	r3, r7, r3
    5064:	781b      	ldrb	r3, [r3, #0]
    5066:	b25b      	sxtb	r3, r3
    5068:	0018      	movs	r0, r3
    506a:	239c      	movs	r3, #156	; 0x9c
    506c:	18fb      	adds	r3, r7, r3
    506e:	885b      	ldrh	r3, [r3, #2]
    5070:	3b08      	subs	r3, #8
    5072:	b299      	uxth	r1, r3
    5074:	4a1b      	ldr	r2, [pc, #108]	; (50e4 <m2m_ip_cb+0x298>)
    5076:	0103      	lsls	r3, r0, #4
    5078:	18d3      	adds	r3, r2, r3
    507a:	3308      	adds	r3, #8
    507c:	1c0a      	adds	r2, r1, #0
    507e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    5080:	4b17      	ldr	r3, [pc, #92]	; (50e0 <m2m_ip_cb+0x294>)
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	2b00      	cmp	r3, #0
    5086:	d100      	bne.n	508a <m2m_ip_cb+0x23e>
    5088:	e174      	b.n	5374 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    508a:	4b15      	ldr	r3, [pc, #84]	; (50e0 <m2m_ip_cb+0x294>)
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	229c      	movs	r2, #156	; 0x9c
    5090:	18ba      	adds	r2, r7, r2
    5092:	2000      	movs	r0, #0
    5094:	5610      	ldrsb	r0, [r2, r0]
    5096:	2298      	movs	r2, #152	; 0x98
    5098:	18ba      	adds	r2, r7, r2
    509a:	2105      	movs	r1, #5
    509c:	4798      	blx	r3
	{
    509e:	e169      	b.n	5374 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    50a0:	1dfb      	adds	r3, r7, #7
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	2b4a      	cmp	r3, #74	; 0x4a
    50a6:	d123      	bne.n	50f0 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    50a8:	230c      	movs	r3, #12
    50aa:	18f9      	adds	r1, r7, r3
    50ac:	6838      	ldr	r0, [r7, #0]
    50ae:	2300      	movs	r3, #0
    50b0:	2244      	movs	r2, #68	; 0x44
    50b2:	4c0a      	ldr	r4, [pc, #40]	; (50dc <m2m_ip_cb+0x290>)
    50b4:	47a0      	blx	r4
    50b6:	1e03      	subs	r3, r0, #0
    50b8:	d000      	beq.n	50bc <m2m_ip_cb+0x270>
    50ba:	e160      	b.n	537e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    50bc:	4b0b      	ldr	r3, [pc, #44]	; (50ec <m2m_ip_cb+0x2a0>)
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	2b00      	cmp	r3, #0
    50c2:	d100      	bne.n	50c6 <m2m_ip_cb+0x27a>
    50c4:	e15b      	b.n	537e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    50c6:	4b09      	ldr	r3, [pc, #36]	; (50ec <m2m_ip_cb+0x2a0>)
    50c8:	681a      	ldr	r2, [r3, #0]
    50ca:	230c      	movs	r3, #12
    50cc:	18fb      	adds	r3, r7, r3
    50ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
    50d0:	230c      	movs	r3, #12
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	0018      	movs	r0, r3
    50d6:	4790      	blx	r2
}
    50d8:	e151      	b.n	537e <m2m_ip_cb+0x532>
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	000016b9 	.word	0x000016b9
    50e0:	20001a70 	.word	0x20001a70
    50e4:	200019c0 	.word	0x200019c0
    50e8:	200006d6 	.word	0x200006d6
    50ec:	20001a78 	.word	0x20001a78
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    50f0:	1dfb      	adds	r3, r7, #7
    50f2:	781b      	ldrb	r3, [r3, #0]
    50f4:	2b46      	cmp	r3, #70	; 0x46
    50f6:	d008      	beq.n	510a <m2m_ip_cb+0x2be>
    50f8:	1dfb      	adds	r3, r7, #7
    50fa:	781b      	ldrb	r3, [r3, #0]
    50fc:	2b48      	cmp	r3, #72	; 0x48
    50fe:	d004      	beq.n	510a <m2m_ip_cb+0x2be>
    5100:	1dfb      	adds	r3, r7, #7
    5102:	781b      	ldrb	r3, [r3, #0]
    5104:	2b4d      	cmp	r3, #77	; 0x4d
    5106:	d000      	beq.n	510a <m2m_ip_cb+0x2be>
    5108:	e0b4      	b.n	5274 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    510a:	23df      	movs	r3, #223	; 0xdf
    510c:	18fb      	adds	r3, r7, r3
    510e:	2206      	movs	r2, #6
    5110:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    5112:	1dfb      	adds	r3, r7, #7
    5114:	781b      	ldrb	r3, [r3, #0]
    5116:	2b48      	cmp	r3, #72	; 0x48
    5118:	d103      	bne.n	5122 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    511a:	23df      	movs	r3, #223	; 0xdf
    511c:	18fb      	adds	r3, r7, r3
    511e:	2209      	movs	r2, #9
    5120:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    5122:	23d8      	movs	r3, #216	; 0xd8
    5124:	18fb      	adds	r3, r7, r3
    5126:	2210      	movs	r2, #16
    5128:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    512a:	23d8      	movs	r3, #216	; 0xd8
    512c:	18fb      	adds	r3, r7, r3
    512e:	881a      	ldrh	r2, [r3, #0]
    5130:	2388      	movs	r3, #136	; 0x88
    5132:	18f9      	adds	r1, r7, r3
    5134:	6838      	ldr	r0, [r7, #0]
    5136:	2300      	movs	r3, #0
    5138:	4c93      	ldr	r4, [pc, #588]	; (5388 <m2m_ip_cb+0x53c>)
    513a:	47a0      	blx	r4
    513c:	1e03      	subs	r3, r0, #0
    513e:	d000      	beq.n	5142 <m2m_ip_cb+0x2f6>
    5140:	e11a      	b.n	5378 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    5142:	23d6      	movs	r3, #214	; 0xd6
    5144:	18fb      	adds	r3, r7, r3
    5146:	2200      	movs	r2, #0
    5148:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    514a:	23d5      	movs	r3, #213	; 0xd5
    514c:	18fb      	adds	r3, r7, r3
    514e:	2288      	movs	r2, #136	; 0x88
    5150:	18ba      	adds	r2, r7, r2
    5152:	7b12      	ldrb	r2, [r2, #12]
    5154:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    5156:	23d6      	movs	r3, #214	; 0xd6
    5158:	18fb      	adds	r3, r7, r3
    515a:	2288      	movs	r2, #136	; 0x88
    515c:	18ba      	adds	r2, r7, r2
    515e:	89d2      	ldrh	r2, [r2, #14]
    5160:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    5162:	23d5      	movs	r3, #213	; 0xd5
    5164:	18fb      	adds	r3, r7, r3
    5166:	781b      	ldrb	r3, [r3, #0]
    5168:	b25b      	sxtb	r3, r3
    516a:	4a88      	ldr	r2, [pc, #544]	; (538c <m2m_ip_cb+0x540>)
    516c:	011b      	lsls	r3, r3, #4
    516e:	18d3      	adds	r3, r2, r3
    5170:	330c      	adds	r3, #12
    5172:	2200      	movs	r2, #0
    5174:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    5176:	23d2      	movs	r3, #210	; 0xd2
    5178:	18fb      	adds	r3, r7, r3
    517a:	2288      	movs	r2, #136	; 0x88
    517c:	18ba      	adds	r2, r7, r2
    517e:	8912      	ldrh	r2, [r2, #8]
    5180:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    5182:	23d0      	movs	r3, #208	; 0xd0
    5184:	18fb      	adds	r3, r7, r3
    5186:	2288      	movs	r2, #136	; 0x88
    5188:	18ba      	adds	r2, r7, r2
    518a:	8952      	ldrh	r2, [r2, #10]
    518c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    518e:	2388      	movs	r3, #136	; 0x88
    5190:	18fb      	adds	r3, r7, r3
    5192:	885a      	ldrh	r2, [r3, #2]
    5194:	2370      	movs	r3, #112	; 0x70
    5196:	18fb      	adds	r3, r7, r3
    5198:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    519a:	2388      	movs	r3, #136	; 0x88
    519c:	18fb      	adds	r3, r7, r3
    519e:	685a      	ldr	r2, [r3, #4]
    51a0:	2370      	movs	r3, #112	; 0x70
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    51a6:	23d5      	movs	r3, #213	; 0xd5
    51a8:	18fb      	adds	r3, r7, r3
    51aa:	781b      	ldrb	r3, [r3, #0]
    51ac:	b25b      	sxtb	r3, r3
    51ae:	4a77      	ldr	r2, [pc, #476]	; (538c <m2m_ip_cb+0x540>)
    51b0:	011b      	lsls	r3, r3, #4
    51b2:	18d3      	adds	r3, r2, r3
    51b4:	3306      	adds	r3, #6
    51b6:	881b      	ldrh	r3, [r3, #0]
    51b8:	b29b      	uxth	r3, r3
    51ba:	22d6      	movs	r2, #214	; 0xd6
    51bc:	18ba      	adds	r2, r7, r2
    51be:	8812      	ldrh	r2, [r2, #0]
    51c0:	429a      	cmp	r2, r3
    51c2:	d148      	bne.n	5256 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    51c4:	23d2      	movs	r3, #210	; 0xd2
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	2200      	movs	r2, #0
    51ca:	5e9b      	ldrsh	r3, [r3, r2]
    51cc:	2b00      	cmp	r3, #0
    51ce:	dd25      	ble.n	521c <m2m_ip_cb+0x3d0>
    51d0:	23d2      	movs	r3, #210	; 0xd2
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	2200      	movs	r2, #0
    51d6:	5e9a      	ldrsh	r2, [r3, r2]
    51d8:	1d3b      	adds	r3, r7, #4
    51da:	881b      	ldrh	r3, [r3, #0]
    51dc:	429a      	cmp	r2, r3
    51de:	da1d      	bge.n	521c <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    51e0:	23d0      	movs	r3, #208	; 0xd0
    51e2:	18fb      	adds	r3, r7, r3
    51e4:	881b      	ldrh	r3, [r3, #0]
    51e6:	683a      	ldr	r2, [r7, #0]
    51e8:	18d3      	adds	r3, r2, r3
    51ea:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    51ec:	23d8      	movs	r3, #216	; 0xd8
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	22d2      	movs	r2, #210	; 0xd2
    51f2:	18ba      	adds	r2, r7, r2
    51f4:	8812      	ldrh	r2, [r2, #0]
    51f6:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    51f8:	683c      	ldr	r4, [r7, #0]
    51fa:	23df      	movs	r3, #223	; 0xdf
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	781a      	ldrb	r2, [r3, #0]
    5200:	2370      	movs	r3, #112	; 0x70
    5202:	18f9      	adds	r1, r7, r3
    5204:	23d5      	movs	r3, #213	; 0xd5
    5206:	18fb      	adds	r3, r7, r3
    5208:	2000      	movs	r0, #0
    520a:	5618      	ldrsb	r0, [r3, r0]
    520c:	23d8      	movs	r3, #216	; 0xd8
    520e:	18fb      	adds	r3, r7, r3
    5210:	881b      	ldrh	r3, [r3, #0]
    5212:	9300      	str	r3, [sp, #0]
    5214:	0023      	movs	r3, r4
    5216:	4c5e      	ldr	r4, [pc, #376]	; (5390 <m2m_ip_cb+0x544>)
    5218:	47a0      	blx	r4
	{
    521a:	e0ad      	b.n	5378 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    521c:	2370      	movs	r3, #112	; 0x70
    521e:	18fb      	adds	r3, r7, r3
    5220:	22d2      	movs	r2, #210	; 0xd2
    5222:	18ba      	adds	r2, r7, r2
    5224:	8812      	ldrh	r2, [r2, #0]
    5226:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    5228:	2370      	movs	r3, #112	; 0x70
    522a:	18fb      	adds	r3, r7, r3
    522c:	2200      	movs	r2, #0
    522e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    5230:	4b58      	ldr	r3, [pc, #352]	; (5394 <m2m_ip_cb+0x548>)
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	2b00      	cmp	r3, #0
    5236:	d100      	bne.n	523a <m2m_ip_cb+0x3ee>
    5238:	e09e      	b.n	5378 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    523a:	4b56      	ldr	r3, [pc, #344]	; (5394 <m2m_ip_cb+0x548>)
    523c:	681b      	ldr	r3, [r3, #0]
    523e:	2270      	movs	r2, #112	; 0x70
    5240:	18bc      	adds	r4, r7, r2
    5242:	22df      	movs	r2, #223	; 0xdf
    5244:	18ba      	adds	r2, r7, r2
    5246:	7811      	ldrb	r1, [r2, #0]
    5248:	22d5      	movs	r2, #213	; 0xd5
    524a:	18ba      	adds	r2, r7, r2
    524c:	2000      	movs	r0, #0
    524e:	5610      	ldrsb	r0, [r2, r0]
    5250:	0022      	movs	r2, r4
    5252:	4798      	blx	r3
	{
    5254:	e090      	b.n	5378 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    5256:	23d8      	movs	r3, #216	; 0xd8
    5258:	18fa      	adds	r2, r7, r3
    525a:	1d3b      	adds	r3, r7, #4
    525c:	8812      	ldrh	r2, [r2, #0]
    525e:	881b      	ldrh	r3, [r3, #0]
    5260:	429a      	cmp	r2, r3
    5262:	d300      	bcc.n	5266 <m2m_ip_cb+0x41a>
    5264:	e088      	b.n	5378 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    5266:	2301      	movs	r3, #1
    5268:	2200      	movs	r2, #0
    526a:	2100      	movs	r1, #0
    526c:	2000      	movs	r0, #0
    526e:	4c46      	ldr	r4, [pc, #280]	; (5388 <m2m_ip_cb+0x53c>)
    5270:	47a0      	blx	r4
	{
    5272:	e081      	b.n	5378 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    5274:	1dfb      	adds	r3, r7, #7
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	2b45      	cmp	r3, #69	; 0x45
    527a:	d007      	beq.n	528c <m2m_ip_cb+0x440>
    527c:	1dfb      	adds	r3, r7, #7
    527e:	781b      	ldrb	r3, [r3, #0]
    5280:	2b47      	cmp	r3, #71	; 0x47
    5282:	d003      	beq.n	528c <m2m_ip_cb+0x440>
    5284:	1dfb      	adds	r3, r7, #7
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	2b4c      	cmp	r3, #76	; 0x4c
    528a:	d14c      	bne.n	5326 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    528c:	23de      	movs	r3, #222	; 0xde
    528e:	18fb      	adds	r3, r7, r3
    5290:	2207      	movs	r2, #7
    5292:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    5294:	1dfb      	adds	r3, r7, #7
    5296:	781b      	ldrb	r3, [r3, #0]
    5298:	2b47      	cmp	r3, #71	; 0x47
    529a:	d103      	bne.n	52a4 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    529c:	23de      	movs	r3, #222	; 0xde
    529e:	18fb      	adds	r3, r7, r3
    52a0:	2208      	movs	r2, #8
    52a2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    52a4:	2364      	movs	r3, #100	; 0x64
    52a6:	18f9      	adds	r1, r7, r3
    52a8:	6838      	ldr	r0, [r7, #0]
    52aa:	2300      	movs	r3, #0
    52ac:	2208      	movs	r2, #8
    52ae:	4c36      	ldr	r4, [pc, #216]	; (5388 <m2m_ip_cb+0x53c>)
    52b0:	47a0      	blx	r4
    52b2:	1e03      	subs	r3, r0, #0
    52b4:	d162      	bne.n	537c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    52b6:	23dc      	movs	r3, #220	; 0xdc
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	2200      	movs	r2, #0
    52bc:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    52be:	23db      	movs	r3, #219	; 0xdb
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	2264      	movs	r2, #100	; 0x64
    52c4:	18ba      	adds	r2, r7, r2
    52c6:	7812      	ldrb	r2, [r2, #0]
    52c8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    52ca:	23dc      	movs	r3, #220	; 0xdc
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	2264      	movs	r2, #100	; 0x64
    52d0:	18ba      	adds	r2, r7, r2
    52d2:	8892      	ldrh	r2, [r2, #4]
    52d4:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    52d6:	2364      	movs	r3, #100	; 0x64
    52d8:	18fb      	adds	r3, r7, r3
    52da:	2202      	movs	r2, #2
    52dc:	5e9a      	ldrsh	r2, [r3, r2]
    52de:	236e      	movs	r3, #110	; 0x6e
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    52e4:	23db      	movs	r3, #219	; 0xdb
    52e6:	18fb      	adds	r3, r7, r3
    52e8:	781b      	ldrb	r3, [r3, #0]
    52ea:	b25b      	sxtb	r3, r3
    52ec:	4a27      	ldr	r2, [pc, #156]	; (538c <m2m_ip_cb+0x540>)
    52ee:	011b      	lsls	r3, r3, #4
    52f0:	18d3      	adds	r3, r2, r3
    52f2:	3306      	adds	r3, #6
    52f4:	881b      	ldrh	r3, [r3, #0]
    52f6:	b29b      	uxth	r3, r3
    52f8:	22dc      	movs	r2, #220	; 0xdc
    52fa:	18ba      	adds	r2, r7, r2
    52fc:	8812      	ldrh	r2, [r2, #0]
    52fe:	429a      	cmp	r2, r3
    5300:	d13c      	bne.n	537c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    5302:	4b24      	ldr	r3, [pc, #144]	; (5394 <m2m_ip_cb+0x548>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d038      	beq.n	537c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    530a:	4b22      	ldr	r3, [pc, #136]	; (5394 <m2m_ip_cb+0x548>)
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	226e      	movs	r2, #110	; 0x6e
    5310:	18bc      	adds	r4, r7, r2
    5312:	22de      	movs	r2, #222	; 0xde
    5314:	18ba      	adds	r2, r7, r2
    5316:	7811      	ldrb	r1, [r2, #0]
    5318:	22db      	movs	r2, #219	; 0xdb
    531a:	18ba      	adds	r2, r7, r2
    531c:	2000      	movs	r0, #0
    531e:	5610      	ldrsb	r0, [r2, r0]
    5320:	0022      	movs	r2, r4
    5322:	4798      	blx	r3
	{
    5324:	e02a      	b.n	537c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    5326:	1dfb      	adds	r3, r7, #7
    5328:	781b      	ldrb	r3, [r3, #0]
    532a:	2b52      	cmp	r3, #82	; 0x52
    532c:	d127      	bne.n	537e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    532e:	2350      	movs	r3, #80	; 0x50
    5330:	18f9      	adds	r1, r7, r3
    5332:	6838      	ldr	r0, [r7, #0]
    5334:	2301      	movs	r3, #1
    5336:	2214      	movs	r2, #20
    5338:	4c13      	ldr	r4, [pc, #76]	; (5388 <m2m_ip_cb+0x53c>)
    533a:	47a0      	blx	r4
    533c:	1e03      	subs	r3, r0, #0
    533e:	d11e      	bne.n	537e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    5340:	2350      	movs	r3, #80	; 0x50
    5342:	18fb      	adds	r3, r7, r3
    5344:	685b      	ldr	r3, [r3, #4]
    5346:	001a      	movs	r2, r3
    5348:	4b13      	ldr	r3, [pc, #76]	; (5398 <m2m_ip_cb+0x54c>)
    534a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    534c:	4b12      	ldr	r3, [pc, #72]	; (5398 <m2m_ip_cb+0x54c>)
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	2b00      	cmp	r3, #0
    5352:	d014      	beq.n	537e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    5354:	4b10      	ldr	r3, [pc, #64]	; (5398 <m2m_ip_cb+0x54c>)
    5356:	681c      	ldr	r4, [r3, #0]
    5358:	2350      	movs	r3, #80	; 0x50
    535a:	18fb      	adds	r3, r7, r3
    535c:	6818      	ldr	r0, [r3, #0]
    535e:	2350      	movs	r3, #80	; 0x50
    5360:	18fb      	adds	r3, r7, r3
    5362:	6899      	ldr	r1, [r3, #8]
    5364:	2350      	movs	r3, #80	; 0x50
    5366:	18fb      	adds	r3, r7, r3
    5368:	7c1b      	ldrb	r3, [r3, #16]
    536a:	001a      	movs	r2, r3
    536c:	47a0      	blx	r4
}
    536e:	e006      	b.n	537e <m2m_ip_cb+0x532>
	{
    5370:	46c0      	nop			; (mov r8, r8)
    5372:	e004      	b.n	537e <m2m_ip_cb+0x532>
	{
    5374:	46c0      	nop			; (mov r8, r8)
    5376:	e002      	b.n	537e <m2m_ip_cb+0x532>
	{
    5378:	46c0      	nop			; (mov r8, r8)
    537a:	e000      	b.n	537e <m2m_ip_cb+0x532>
	{
    537c:	46c0      	nop			; (mov r8, r8)
}
    537e:	46c0      	nop			; (mov r8, r8)
    5380:	46bd      	mov	sp, r7
    5382:	b039      	add	sp, #228	; 0xe4
    5384:	bd90      	pop	{r4, r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	000016b9 	.word	0x000016b9
    538c:	200019c0 	.word	0x200019c0
    5390:	00004c51 	.word	0x00004c51
    5394:	20001a70 	.word	0x20001a70
    5398:	20001a74 	.word	0x20001a74

0000539c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    539c:	b580      	push	{r7, lr}
    539e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    53a0:	4b0c      	ldr	r3, [pc, #48]	; (53d4 <socketInit+0x38>)
    53a2:	781b      	ldrb	r3, [r3, #0]
    53a4:	b2db      	uxtb	r3, r3
    53a6:	2b00      	cmp	r3, #0
    53a8:	d110      	bne.n	53cc <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    53aa:	4b0b      	ldr	r3, [pc, #44]	; (53d8 <socketInit+0x3c>)
    53ac:	22b0      	movs	r2, #176	; 0xb0
    53ae:	2100      	movs	r1, #0
    53b0:	0018      	movs	r0, r3
    53b2:	4b0a      	ldr	r3, [pc, #40]	; (53dc <socketInit+0x40>)
    53b4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    53b6:	4b0a      	ldr	r3, [pc, #40]	; (53e0 <socketInit+0x44>)
    53b8:	0019      	movs	r1, r3
    53ba:	2002      	movs	r0, #2
    53bc:	4b09      	ldr	r3, [pc, #36]	; (53e4 <socketInit+0x48>)
    53be:	4798      	blx	r3
		gbSocketInit	= 1;
    53c0:	4b04      	ldr	r3, [pc, #16]	; (53d4 <socketInit+0x38>)
    53c2:	2201      	movs	r2, #1
    53c4:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    53c6:	4b08      	ldr	r3, [pc, #32]	; (53e8 <socketInit+0x4c>)
    53c8:	2200      	movs	r2, #0
    53ca:	801a      	strh	r2, [r3, #0]
	}
}
    53cc:	46c0      	nop			; (mov r8, r8)
    53ce:	46bd      	mov	sp, r7
    53d0:	bd80      	pop	{r7, pc}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	200006d8 	.word	0x200006d8
    53d8:	200019c0 	.word	0x200019c0
    53dc:	00000b61 	.word	0x00000b61
    53e0:	00004e4d 	.word	0x00004e4d
    53e4:	00001835 	.word	0x00001835
    53e8:	200006d6 	.word	0x200006d6

000053ec <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    53ec:	b580      	push	{r7, lr}
    53ee:	b082      	sub	sp, #8
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
    53f4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    53f6:	4b05      	ldr	r3, [pc, #20]	; (540c <registerSocketCallback+0x20>)
    53f8:	687a      	ldr	r2, [r7, #4]
    53fa:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    53fc:	4b04      	ldr	r3, [pc, #16]	; (5410 <registerSocketCallback+0x24>)
    53fe:	683a      	ldr	r2, [r7, #0]
    5400:	601a      	str	r2, [r3, #0]
}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	46bd      	mov	sp, r7
    5406:	b002      	add	sp, #8
    5408:	bd80      	pop	{r7, pc}
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	20001a70 	.word	0x20001a70
    5410:	20001a78 	.word	0x20001a78

00005414 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    5414:	b590      	push	{r4, r7, lr}
    5416:	b08d      	sub	sp, #52	; 0x34
    5418:	af04      	add	r7, sp, #16
    541a:	0004      	movs	r4, r0
    541c:	0008      	movs	r0, r1
    541e:	0011      	movs	r1, r2
    5420:	1dbb      	adds	r3, r7, #6
    5422:	1c22      	adds	r2, r4, #0
    5424:	801a      	strh	r2, [r3, #0]
    5426:	1d7b      	adds	r3, r7, #5
    5428:	1c02      	adds	r2, r0, #0
    542a:	701a      	strb	r2, [r3, #0]
    542c:	1d3b      	adds	r3, r7, #4
    542e:	1c0a      	adds	r2, r1, #0
    5430:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    5432:	231f      	movs	r3, #31
    5434:	18fb      	adds	r3, r7, r3
    5436:	22ff      	movs	r2, #255	; 0xff
    5438:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    543a:	1dbb      	adds	r3, r7, #6
    543c:	881b      	ldrh	r3, [r3, #0]
    543e:	2b02      	cmp	r3, #2
    5440:	d000      	beq.n	5444 <socket+0x30>
    5442:	e0cd      	b.n	55e0 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    5444:	1d7b      	adds	r3, r7, #5
    5446:	781b      	ldrb	r3, [r3, #0]
    5448:	2b01      	cmp	r3, #1
    544a:	d135      	bne.n	54b8 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    544c:	231e      	movs	r3, #30
    544e:	18fb      	adds	r3, r7, r3
    5450:	2200      	movs	r2, #0
    5452:	701a      	strb	r2, [r3, #0]
    5454:	e02a      	b.n	54ac <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    5456:	2317      	movs	r3, #23
    5458:	18fb      	adds	r3, r7, r3
    545a:	4a65      	ldr	r2, [pc, #404]	; (55f0 <socket+0x1dc>)
    545c:	7812      	ldrb	r2, [r2, #0]
    545e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    5460:	4b63      	ldr	r3, [pc, #396]	; (55f0 <socket+0x1dc>)
    5462:	781b      	ldrb	r3, [r3, #0]
    5464:	b2db      	uxtb	r3, r3
    5466:	011a      	lsls	r2, r3, #4
    5468:	4b62      	ldr	r3, [pc, #392]	; (55f4 <socket+0x1e0>)
    546a:	18d3      	adds	r3, r2, r3
    546c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    546e:	4b60      	ldr	r3, [pc, #384]	; (55f0 <socket+0x1dc>)
    5470:	781b      	ldrb	r3, [r3, #0]
    5472:	b2db      	uxtb	r3, r3
    5474:	1c5a      	adds	r2, r3, #1
    5476:	4b60      	ldr	r3, [pc, #384]	; (55f8 <socket+0x1e4>)
    5478:	2107      	movs	r1, #7
    547a:	0010      	movs	r0, r2
    547c:	4798      	blx	r3
    547e:	000b      	movs	r3, r1
    5480:	b2da      	uxtb	r2, r3
    5482:	4b5b      	ldr	r3, [pc, #364]	; (55f0 <socket+0x1dc>)
    5484:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5486:	69bb      	ldr	r3, [r7, #24]
    5488:	7a9b      	ldrb	r3, [r3, #10]
    548a:	b2db      	uxtb	r3, r3
    548c:	2b00      	cmp	r3, #0
    548e:	d106      	bne.n	549e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    5490:	231f      	movs	r3, #31
    5492:	18fb      	adds	r3, r7, r3
    5494:	2217      	movs	r2, #23
    5496:	18ba      	adds	r2, r7, r2
    5498:	7812      	ldrb	r2, [r2, #0]
    549a:	701a      	strb	r2, [r3, #0]
					break;
    549c:	e04c      	b.n	5538 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    549e:	231e      	movs	r3, #30
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	781a      	ldrb	r2, [r3, #0]
    54a4:	231e      	movs	r3, #30
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	3201      	adds	r2, #1
    54aa:	701a      	strb	r2, [r3, #0]
    54ac:	231e      	movs	r3, #30
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	781b      	ldrb	r3, [r3, #0]
    54b2:	2b06      	cmp	r3, #6
    54b4:	d9cf      	bls.n	5456 <socket+0x42>
    54b6:	e03f      	b.n	5538 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    54b8:	1d7b      	adds	r3, r7, #5
    54ba:	781b      	ldrb	r3, [r3, #0]
    54bc:	2b02      	cmp	r3, #2
    54be:	d13b      	bne.n	5538 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    54c0:	4b4e      	ldr	r3, [pc, #312]	; (55fc <socket+0x1e8>)
    54c2:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    54c4:	231e      	movs	r3, #30
    54c6:	18fb      	adds	r3, r7, r3
    54c8:	2200      	movs	r2, #0
    54ca:	701a      	strb	r2, [r3, #0]
    54cc:	e02f      	b.n	552e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    54ce:	2317      	movs	r3, #23
    54d0:	18fb      	adds	r3, r7, r3
    54d2:	4a4b      	ldr	r2, [pc, #300]	; (5600 <socket+0x1ec>)
    54d4:	7812      	ldrb	r2, [r2, #0]
    54d6:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    54d8:	4b49      	ldr	r3, [pc, #292]	; (5600 <socket+0x1ec>)
    54da:	781b      	ldrb	r3, [r3, #0]
    54dc:	b2db      	uxtb	r3, r3
    54de:	011b      	lsls	r3, r3, #4
    54e0:	693a      	ldr	r2, [r7, #16]
    54e2:	18d3      	adds	r3, r2, r3
    54e4:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    54e6:	4b46      	ldr	r3, [pc, #280]	; (5600 <socket+0x1ec>)
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	b2db      	uxtb	r3, r3
    54ec:	3301      	adds	r3, #1
    54ee:	4a45      	ldr	r2, [pc, #276]	; (5604 <socket+0x1f0>)
    54f0:	4013      	ands	r3, r2
    54f2:	d504      	bpl.n	54fe <socket+0xea>
    54f4:	3b01      	subs	r3, #1
    54f6:	2204      	movs	r2, #4
    54f8:	4252      	negs	r2, r2
    54fa:	4313      	orrs	r3, r2
    54fc:	3301      	adds	r3, #1
    54fe:	b2da      	uxtb	r2, r3
    5500:	4b3f      	ldr	r3, [pc, #252]	; (5600 <socket+0x1ec>)
    5502:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5504:	69bb      	ldr	r3, [r7, #24]
    5506:	7a9b      	ldrb	r3, [r3, #10]
    5508:	b2db      	uxtb	r3, r3
    550a:	2b00      	cmp	r3, #0
    550c:	d108      	bne.n	5520 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    550e:	2317      	movs	r3, #23
    5510:	18fb      	adds	r3, r7, r3
    5512:	781b      	ldrb	r3, [r3, #0]
    5514:	3307      	adds	r3, #7
    5516:	b2da      	uxtb	r2, r3
    5518:	231f      	movs	r3, #31
    551a:	18fb      	adds	r3, r7, r3
    551c:	701a      	strb	r2, [r3, #0]
					break;
    551e:	e00b      	b.n	5538 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5520:	231e      	movs	r3, #30
    5522:	18fb      	adds	r3, r7, r3
    5524:	781a      	ldrb	r2, [r3, #0]
    5526:	231e      	movs	r3, #30
    5528:	18fb      	adds	r3, r7, r3
    552a:	3201      	adds	r2, #1
    552c:	701a      	strb	r2, [r3, #0]
    552e:	231e      	movs	r3, #30
    5530:	18fb      	adds	r3, r7, r3
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	2b03      	cmp	r3, #3
    5536:	d9ca      	bls.n	54ce <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    5538:	231f      	movs	r3, #31
    553a:	18fb      	adds	r3, r7, r3
    553c:	781b      	ldrb	r3, [r3, #0]
    553e:	2b7f      	cmp	r3, #127	; 0x7f
    5540:	d84e      	bhi.n	55e0 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    5542:	69bb      	ldr	r3, [r7, #24]
    5544:	2210      	movs	r2, #16
    5546:	2100      	movs	r1, #0
    5548:	0018      	movs	r0, r3
    554a:	4b2f      	ldr	r3, [pc, #188]	; (5608 <socket+0x1f4>)
    554c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    554e:	69bb      	ldr	r3, [r7, #24]
    5550:	2201      	movs	r2, #1
    5552:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    5554:	4b2d      	ldr	r3, [pc, #180]	; (560c <socket+0x1f8>)
    5556:	881b      	ldrh	r3, [r3, #0]
    5558:	b29b      	uxth	r3, r3
    555a:	3301      	adds	r3, #1
    555c:	b29a      	uxth	r2, r3
    555e:	4b2b      	ldr	r3, [pc, #172]	; (560c <socket+0x1f8>)
    5560:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    5562:	4b2a      	ldr	r3, [pc, #168]	; (560c <socket+0x1f8>)
    5564:	881b      	ldrh	r3, [r3, #0]
    5566:	b29b      	uxth	r3, r3
    5568:	2b00      	cmp	r3, #0
    556a:	d106      	bne.n	557a <socket+0x166>
				++gu16SessionID;
    556c:	4b27      	ldr	r3, [pc, #156]	; (560c <socket+0x1f8>)
    556e:	881b      	ldrh	r3, [r3, #0]
    5570:	b29b      	uxth	r3, r3
    5572:	3301      	adds	r3, #1
    5574:	b29a      	uxth	r2, r3
    5576:	4b25      	ldr	r3, [pc, #148]	; (560c <socket+0x1f8>)
    5578:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    557a:	4b24      	ldr	r3, [pc, #144]	; (560c <socket+0x1f8>)
    557c:	881b      	ldrh	r3, [r3, #0]
    557e:	b29a      	uxth	r2, r3
    5580:	69bb      	ldr	r3, [r7, #24]
    5582:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5584:	4b22      	ldr	r3, [pc, #136]	; (5610 <socket+0x1fc>)
    5586:	0018      	movs	r0, r3
    5588:	4b22      	ldr	r3, [pc, #136]	; (5614 <socket+0x200>)
    558a:	4798      	blx	r3
    558c:	231f      	movs	r3, #31
    558e:	18fb      	adds	r3, r7, r3
    5590:	2100      	movs	r1, #0
    5592:	5659      	ldrsb	r1, [r3, r1]
    5594:	4b1d      	ldr	r3, [pc, #116]	; (560c <socket+0x1f8>)
    5596:	881b      	ldrh	r3, [r3, #0]
    5598:	b29b      	uxth	r3, r3
    559a:	001a      	movs	r2, r3
    559c:	4b1e      	ldr	r3, [pc, #120]	; (5618 <socket+0x204>)
    559e:	0018      	movs	r0, r3
    55a0:	4b1c      	ldr	r3, [pc, #112]	; (5614 <socket+0x200>)
    55a2:	4798      	blx	r3
    55a4:	200d      	movs	r0, #13
    55a6:	4b1d      	ldr	r3, [pc, #116]	; (561c <socket+0x208>)
    55a8:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    55aa:	1d3b      	adds	r3, r7, #4
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	2201      	movs	r2, #1
    55b0:	4013      	ands	r3, r2
    55b2:	d015      	beq.n	55e0 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    55b4:	230c      	movs	r3, #12
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	221f      	movs	r2, #31
    55ba:	18ba      	adds	r2, r7, r2
    55bc:	7812      	ldrb	r2, [r2, #0]
    55be:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    55c0:	69bb      	ldr	r3, [r7, #24]
    55c2:	2221      	movs	r2, #33	; 0x21
    55c4:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    55c6:	230c      	movs	r3, #12
    55c8:	18fa      	adds	r2, r7, r3
    55ca:	2300      	movs	r3, #0
    55cc:	9302      	str	r3, [sp, #8]
    55ce:	2300      	movs	r3, #0
    55d0:	9301      	str	r3, [sp, #4]
    55d2:	2300      	movs	r3, #0
    55d4:	9300      	str	r3, [sp, #0]
    55d6:	2304      	movs	r3, #4
    55d8:	2150      	movs	r1, #80	; 0x50
    55da:	2002      	movs	r0, #2
    55dc:	4c10      	ldr	r4, [pc, #64]	; (5620 <socket+0x20c>)
    55de:	47a0      	blx	r4
			}
		}
	}
	return sock;
    55e0:	231f      	movs	r3, #31
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	781b      	ldrb	r3, [r3, #0]
    55e6:	b25b      	sxtb	r3, r3
}
    55e8:	0018      	movs	r0, r3
    55ea:	46bd      	mov	sp, r7
    55ec:	b009      	add	sp, #36	; 0x24
    55ee:	bd90      	pop	{r4, r7, pc}
    55f0:	200006d9 	.word	0x200006d9
    55f4:	200019c0 	.word	0x200019c0
    55f8:	00019dc9 	.word	0x00019dc9
    55fc:	20001a30 	.word	0x20001a30
    5600:	200006da 	.word	0x200006da
    5604:	80000003 	.word	0x80000003
    5608:	00000b61 	.word	0x00000b61
    560c:	200006d6 	.word	0x200006d6
    5610:	0001e11c 	.word	0x0001e11c
    5614:	0001bc4d 	.word	0x0001bc4d
    5618:	0001e13c 	.word	0x0001e13c
    561c:	0001bc81 	.word	0x0001bc81
    5620:	00000dc1 	.word	0x00000dc1

00005624 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    5624:	b5b0      	push	{r4, r5, r7, lr}
    5626:	b08a      	sub	sp, #40	; 0x28
    5628:	af04      	add	r7, sp, #16
    562a:	6039      	str	r1, [r7, #0]
    562c:	0011      	movs	r1, r2
    562e:	1dfb      	adds	r3, r7, #7
    5630:	1c02      	adds	r2, r0, #0
    5632:	701a      	strb	r2, [r3, #0]
    5634:	1dbb      	adds	r3, r7, #6
    5636:	1c0a      	adds	r2, r1, #0
    5638:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    563a:	2317      	movs	r3, #23
    563c:	18fb      	adds	r3, r7, r3
    563e:	22fa      	movs	r2, #250	; 0xfa
    5640:	701a      	strb	r2, [r3, #0]
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    5642:	683b      	ldr	r3, [r7, #0]
    5644:	2b00      	cmp	r3, #0
    5646:	d05c      	beq.n	5702 <bind+0xde>
    5648:	1dfb      	adds	r3, r7, #7
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	2b7f      	cmp	r3, #127	; 0x7f
    564e:	d858      	bhi.n	5702 <bind+0xde>
    5650:	1dfb      	adds	r3, r7, #7
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	b25b      	sxtb	r3, r3
    5656:	4a2f      	ldr	r2, [pc, #188]	; (5714 <bind+0xf0>)
    5658:	011b      	lsls	r3, r3, #4
    565a:	18d3      	adds	r3, r2, r3
    565c:	330a      	adds	r3, #10
    565e:	781b      	ldrb	r3, [r3, #0]
    5660:	b2db      	uxtb	r3, r3
    5662:	2b01      	cmp	r3, #1
    5664:	d14d      	bne.n	5702 <bind+0xde>
    5666:	1dbb      	adds	r3, r7, #6
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	2b00      	cmp	r3, #0
    566c:	d049      	beq.n	5702 <bind+0xde>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
    566e:	2316      	movs	r3, #22
    5670:	18fb      	adds	r3, r7, r3
    5672:	2241      	movs	r2, #65	; 0x41
    5674:	701a      	strb	r2, [r3, #0]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5676:	1dfb      	adds	r3, r7, #7
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	b25b      	sxtb	r3, r3
    567c:	4a25      	ldr	r2, [pc, #148]	; (5714 <bind+0xf0>)
    567e:	011b      	lsls	r3, r3, #4
    5680:	18d3      	adds	r3, r2, r3
    5682:	330b      	adds	r3, #11
    5684:	781b      	ldrb	r3, [r3, #0]
    5686:	b2db      	uxtb	r3, r3
    5688:	001a      	movs	r2, r3
    568a:	2301      	movs	r3, #1
    568c:	4013      	ands	r3, r2
    568e:	d003      	beq.n	5698 <bind+0x74>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    5690:	2316      	movs	r3, #22
    5692:	18fb      	adds	r3, r7, r3
    5694:	2254      	movs	r2, #84	; 0x54
    5696:	701a      	strb	r2, [r3, #0]
		}

		/* Build the bind request. */
		strBind.sock = sock;
    5698:	2308      	movs	r3, #8
    569a:	18fb      	adds	r3, r7, r3
    569c:	1dfa      	adds	r2, r7, #7
    569e:	7812      	ldrb	r2, [r2, #0]
    56a0:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    56a2:	6839      	ldr	r1, [r7, #0]
    56a4:	2308      	movs	r3, #8
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	2208      	movs	r2, #8
    56aa:	0018      	movs	r0, r3
    56ac:	4b1a      	ldr	r3, [pc, #104]	; (5718 <bind+0xf4>)
    56ae:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    56b0:	1dfb      	adds	r3, r7, #7
    56b2:	781b      	ldrb	r3, [r3, #0]
    56b4:	b25b      	sxtb	r3, r3
    56b6:	4a17      	ldr	r2, [pc, #92]	; (5714 <bind+0xf0>)
    56b8:	011b      	lsls	r3, r3, #4
    56ba:	18d3      	adds	r3, r2, r3
    56bc:	3306      	adds	r3, #6
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	b29a      	uxth	r2, r3
    56c2:	2308      	movs	r3, #8
    56c4:	18fb      	adds	r3, r7, r3
    56c6:	815a      	strh	r2, [r3, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    56c8:	2317      	movs	r3, #23
    56ca:	18fc      	adds	r4, r7, r3
    56cc:	2308      	movs	r3, #8
    56ce:	18fa      	adds	r2, r7, r3
    56d0:	2316      	movs	r3, #22
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	7819      	ldrb	r1, [r3, #0]
    56d6:	2300      	movs	r3, #0
    56d8:	9302      	str	r3, [sp, #8]
    56da:	2300      	movs	r3, #0
    56dc:	9301      	str	r3, [sp, #4]
    56de:	2300      	movs	r3, #0
    56e0:	9300      	str	r3, [sp, #0]
    56e2:	230c      	movs	r3, #12
    56e4:	2002      	movs	r0, #2
    56e6:	4d0d      	ldr	r5, [pc, #52]	; (571c <bind+0xf8>)
    56e8:	47a8      	blx	r5
    56ea:	0003      	movs	r3, r0
    56ec:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    56ee:	2317      	movs	r3, #23
    56f0:	18fb      	adds	r3, r7, r3
    56f2:	781b      	ldrb	r3, [r3, #0]
    56f4:	b25b      	sxtb	r3, r3
    56f6:	2b00      	cmp	r3, #0
    56f8:	d003      	beq.n	5702 <bind+0xde>
		{
			s8Ret = SOCK_ERR_INVALID;
    56fa:	2317      	movs	r3, #23
    56fc:	18fb      	adds	r3, r7, r3
    56fe:	22f7      	movs	r2, #247	; 0xf7
    5700:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    5702:	2317      	movs	r3, #23
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	b25b      	sxtb	r3, r3
}
    570a:	0018      	movs	r0, r3
    570c:	46bd      	mov	sp, r7
    570e:	b006      	add	sp, #24
    5710:	bdb0      	pop	{r4, r5, r7, pc}
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	200019c0 	.word	0x200019c0
    5718:	00000b25 	.word	0x00000b25
    571c:	00000dc1 	.word	0x00000dc1

00005720 <accept>:

Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
    5720:	b580      	push	{r7, lr}
    5722:	b086      	sub	sp, #24
    5724:	af00      	add	r7, sp, #0
    5726:	60b9      	str	r1, [r7, #8]
    5728:	607a      	str	r2, [r7, #4]
    572a:	230f      	movs	r3, #15
    572c:	18fb      	adds	r3, r7, r3
    572e:	1c02      	adds	r2, r0, #0
    5730:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5732:	2317      	movs	r3, #23
    5734:	18fb      	adds	r3, r7, r3
    5736:	22fa      	movs	r2, #250	; 0xfa
    5738:	701a      	strb	r2, [r3, #0]
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    573a:	230f      	movs	r3, #15
    573c:	18fb      	adds	r3, r7, r3
    573e:	781b      	ldrb	r3, [r3, #0]
    5740:	2b7f      	cmp	r3, #127	; 0x7f
    5742:	d80f      	bhi.n	5764 <accept+0x44>
    5744:	230f      	movs	r3, #15
    5746:	18fb      	adds	r3, r7, r3
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	b25b      	sxtb	r3, r3
    574c:	4a09      	ldr	r2, [pc, #36]	; (5774 <accept+0x54>)
    574e:	011b      	lsls	r3, r3, #4
    5750:	18d3      	adds	r3, r2, r3
    5752:	330a      	adds	r3, #10
    5754:	781b      	ldrb	r3, [r3, #0]
    5756:	b2db      	uxtb	r3, r3
    5758:	2b01      	cmp	r3, #1
    575a:	d103      	bne.n	5764 <accept+0x44>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    575c:	2317      	movs	r3, #23
    575e:	18fb      	adds	r3, r7, r3
    5760:	2200      	movs	r2, #0
    5762:	701a      	strb	r2, [r3, #0]
	}
	return s8Ret;
    5764:	2317      	movs	r3, #23
    5766:	18fb      	adds	r3, r7, r3
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	b25b      	sxtb	r3, r3
}
    576c:	0018      	movs	r0, r3
    576e:	46bd      	mov	sp, r7
    5770:	b006      	add	sp, #24
    5772:	bd80      	pop	{r7, pc}
    5774:	200019c0 	.word	0x200019c0

00005778 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    5778:	b5b0      	push	{r4, r5, r7, lr}
    577a:	b08a      	sub	sp, #40	; 0x28
    577c:	af04      	add	r7, sp, #16
    577e:	6039      	str	r1, [r7, #0]
    5780:	0011      	movs	r1, r2
    5782:	1dfb      	adds	r3, r7, #7
    5784:	1c02      	adds	r2, r0, #0
    5786:	701a      	strb	r2, [r3, #0]
    5788:	1dbb      	adds	r3, r7, #6
    578a:	1c0a      	adds	r2, r1, #0
    578c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    578e:	2317      	movs	r3, #23
    5790:	18fb      	adds	r3, r7, r3
    5792:	22fa      	movs	r2, #250	; 0xfa
    5794:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    5796:	1dfb      	adds	r3, r7, #7
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	2b7f      	cmp	r3, #127	; 0x7f
    579c:	d867      	bhi.n	586e <connect+0xf6>
    579e:	683b      	ldr	r3, [r7, #0]
    57a0:	2b00      	cmp	r3, #0
    57a2:	d064      	beq.n	586e <connect+0xf6>
    57a4:	1dfb      	adds	r3, r7, #7
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	b25b      	sxtb	r3, r3
    57aa:	4a35      	ldr	r2, [pc, #212]	; (5880 <connect+0x108>)
    57ac:	011b      	lsls	r3, r3, #4
    57ae:	18d3      	adds	r3, r2, r3
    57b0:	330a      	adds	r3, #10
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b2db      	uxtb	r3, r3
    57b6:	2b01      	cmp	r3, #1
    57b8:	d159      	bne.n	586e <connect+0xf6>
    57ba:	1dbb      	adds	r3, r7, #6
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	2b00      	cmp	r3, #0
    57c0:	d055      	beq.n	586e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    57c2:	2316      	movs	r3, #22
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	2244      	movs	r2, #68	; 0x44
    57c8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    57ca:	1dfb      	adds	r3, r7, #7
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	b25b      	sxtb	r3, r3
    57d0:	4a2b      	ldr	r2, [pc, #172]	; (5880 <connect+0x108>)
    57d2:	011b      	lsls	r3, r3, #4
    57d4:	18d3      	adds	r3, r2, r3
    57d6:	330b      	adds	r3, #11
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	b2db      	uxtb	r3, r3
    57dc:	001a      	movs	r2, r3
    57de:	2301      	movs	r3, #1
    57e0:	4013      	ands	r3, r2
    57e2:	d00f      	beq.n	5804 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    57e4:	2316      	movs	r3, #22
    57e6:	18fb      	adds	r3, r7, r3
    57e8:	224b      	movs	r2, #75	; 0x4b
    57ea:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    57ec:	1dfb      	adds	r3, r7, #7
    57ee:	781b      	ldrb	r3, [r3, #0]
    57f0:	b25b      	sxtb	r3, r3
    57f2:	4a23      	ldr	r2, [pc, #140]	; (5880 <connect+0x108>)
    57f4:	011b      	lsls	r3, r3, #4
    57f6:	18d3      	adds	r3, r2, r3
    57f8:	330b      	adds	r3, #11
    57fa:	781b      	ldrb	r3, [r3, #0]
    57fc:	b2da      	uxtb	r2, r3
    57fe:	2308      	movs	r3, #8
    5800:	18fb      	adds	r3, r7, r3
    5802:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5804:	2308      	movs	r3, #8
    5806:	18fb      	adds	r3, r7, r3
    5808:	1dfa      	adds	r2, r7, #7
    580a:	7812      	ldrb	r2, [r2, #0]
    580c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    580e:	6839      	ldr	r1, [r7, #0]
    5810:	2308      	movs	r3, #8
    5812:	18fb      	adds	r3, r7, r3
    5814:	2208      	movs	r2, #8
    5816:	0018      	movs	r0, r3
    5818:	4b1a      	ldr	r3, [pc, #104]	; (5884 <connect+0x10c>)
    581a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    581c:	1dfb      	adds	r3, r7, #7
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	b25b      	sxtb	r3, r3
    5822:	4a17      	ldr	r2, [pc, #92]	; (5880 <connect+0x108>)
    5824:	011b      	lsls	r3, r3, #4
    5826:	18d3      	adds	r3, r2, r3
    5828:	3306      	adds	r3, #6
    582a:	881b      	ldrh	r3, [r3, #0]
    582c:	b29a      	uxth	r2, r3
    582e:	2308      	movs	r3, #8
    5830:	18fb      	adds	r3, r7, r3
    5832:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    5834:	2317      	movs	r3, #23
    5836:	18fc      	adds	r4, r7, r3
    5838:	2308      	movs	r3, #8
    583a:	18fa      	adds	r2, r7, r3
    583c:	2316      	movs	r3, #22
    583e:	18fb      	adds	r3, r7, r3
    5840:	7819      	ldrb	r1, [r3, #0]
    5842:	2300      	movs	r3, #0
    5844:	9302      	str	r3, [sp, #8]
    5846:	2300      	movs	r3, #0
    5848:	9301      	str	r3, [sp, #4]
    584a:	2300      	movs	r3, #0
    584c:	9300      	str	r3, [sp, #0]
    584e:	230c      	movs	r3, #12
    5850:	2002      	movs	r0, #2
    5852:	4d0d      	ldr	r5, [pc, #52]	; (5888 <connect+0x110>)
    5854:	47a8      	blx	r5
    5856:	0003      	movs	r3, r0
    5858:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    585a:	2317      	movs	r3, #23
    585c:	18fb      	adds	r3, r7, r3
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	b25b      	sxtb	r3, r3
    5862:	2b00      	cmp	r3, #0
    5864:	d003      	beq.n	586e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    5866:	2317      	movs	r3, #23
    5868:	18fb      	adds	r3, r7, r3
    586a:	22f7      	movs	r2, #247	; 0xf7
    586c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    586e:	2317      	movs	r3, #23
    5870:	18fb      	adds	r3, r7, r3
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	b25b      	sxtb	r3, r3
}
    5876:	0018      	movs	r0, r3
    5878:	46bd      	mov	sp, r7
    587a:	b006      	add	sp, #24
    587c:	bdb0      	pop	{r4, r5, r7, pc}
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	200019c0 	.word	0x200019c0
    5884:	00000b25 	.word	0x00000b25
    5888:	00000dc1 	.word	0x00000dc1

0000588c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    588c:	b590      	push	{r4, r7, lr}
    588e:	b08f      	sub	sp, #60	; 0x3c
    5890:	af04      	add	r7, sp, #16
    5892:	0004      	movs	r4, r0
    5894:	60b9      	str	r1, [r7, #8]
    5896:	0010      	movs	r0, r2
    5898:	0019      	movs	r1, r3
    589a:	230f      	movs	r3, #15
    589c:	18fb      	adds	r3, r7, r3
    589e:	1c22      	adds	r2, r4, #0
    58a0:	701a      	strb	r2, [r3, #0]
    58a2:	230c      	movs	r3, #12
    58a4:	18fb      	adds	r3, r7, r3
    58a6:	1c02      	adds	r2, r0, #0
    58a8:	801a      	strh	r2, [r3, #0]
    58aa:	1dbb      	adds	r3, r7, #6
    58ac:	1c0a      	adds	r2, r1, #0
    58ae:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    58b0:	2326      	movs	r3, #38	; 0x26
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	2206      	movs	r2, #6
    58b6:	4252      	negs	r2, r2
    58b8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    58ba:	230f      	movs	r3, #15
    58bc:	18fb      	adds	r3, r7, r3
    58be:	781b      	ldrb	r3, [r3, #0]
    58c0:	2b7f      	cmp	r3, #127	; 0x7f
    58c2:	d900      	bls.n	58c6 <send+0x3a>
    58c4:	e087      	b.n	59d6 <send+0x14a>
    58c6:	68bb      	ldr	r3, [r7, #8]
    58c8:	2b00      	cmp	r3, #0
    58ca:	d100      	bne.n	58ce <send+0x42>
    58cc:	e083      	b.n	59d6 <send+0x14a>
    58ce:	230c      	movs	r3, #12
    58d0:	18fb      	adds	r3, r7, r3
    58d2:	881a      	ldrh	r2, [r3, #0]
    58d4:	23af      	movs	r3, #175	; 0xaf
    58d6:	00db      	lsls	r3, r3, #3
    58d8:	429a      	cmp	r2, r3
    58da:	d900      	bls.n	58de <send+0x52>
    58dc:	e07b      	b.n	59d6 <send+0x14a>
    58de:	230f      	movs	r3, #15
    58e0:	18fb      	adds	r3, r7, r3
    58e2:	781b      	ldrb	r3, [r3, #0]
    58e4:	b25b      	sxtb	r3, r3
    58e6:	4a40      	ldr	r2, [pc, #256]	; (59e8 <send+0x15c>)
    58e8:	011b      	lsls	r3, r3, #4
    58ea:	18d3      	adds	r3, r2, r3
    58ec:	330a      	adds	r3, #10
    58ee:	781b      	ldrb	r3, [r3, #0]
    58f0:	b2db      	uxtb	r3, r3
    58f2:	2b01      	cmp	r3, #1
    58f4:	d16f      	bne.n	59d6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    58f6:	2323      	movs	r3, #35	; 0x23
    58f8:	18fb      	adds	r3, r7, r3
    58fa:	2245      	movs	r2, #69	; 0x45
    58fc:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    58fe:	2324      	movs	r3, #36	; 0x24
    5900:	18fb      	adds	r3, r7, r3
    5902:	2250      	movs	r2, #80	; 0x50
    5904:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    5906:	2310      	movs	r3, #16
    5908:	18fb      	adds	r3, r7, r3
    590a:	220f      	movs	r2, #15
    590c:	18ba      	adds	r2, r7, r2
    590e:	7812      	ldrb	r2, [r2, #0]
    5910:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    5912:	2310      	movs	r3, #16
    5914:	18fb      	adds	r3, r7, r3
    5916:	220c      	movs	r2, #12
    5918:	18ba      	adds	r2, r7, r2
    591a:	8812      	ldrh	r2, [r2, #0]
    591c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    591e:	230f      	movs	r3, #15
    5920:	18fb      	adds	r3, r7, r3
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	b25b      	sxtb	r3, r3
    5926:	4a30      	ldr	r2, [pc, #192]	; (59e8 <send+0x15c>)
    5928:	011b      	lsls	r3, r3, #4
    592a:	18d3      	adds	r3, r2, r3
    592c:	3306      	adds	r3, #6
    592e:	881b      	ldrh	r3, [r3, #0]
    5930:	b29a      	uxth	r2, r3
    5932:	2310      	movs	r3, #16
    5934:	18fb      	adds	r3, r7, r3
    5936:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    5938:	230f      	movs	r3, #15
    593a:	18fb      	adds	r3, r7, r3
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	b25b      	sxtb	r3, r3
    5940:	2b06      	cmp	r3, #6
    5942:	dd03      	ble.n	594c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    5944:	2324      	movs	r3, #36	; 0x24
    5946:	18fb      	adds	r3, r7, r3
    5948:	2244      	movs	r2, #68	; 0x44
    594a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    594c:	230f      	movs	r3, #15
    594e:	18fb      	adds	r3, r7, r3
    5950:	781b      	ldrb	r3, [r3, #0]
    5952:	b25b      	sxtb	r3, r3
    5954:	4a24      	ldr	r2, [pc, #144]	; (59e8 <send+0x15c>)
    5956:	011b      	lsls	r3, r3, #4
    5958:	18d3      	adds	r3, r2, r3
    595a:	330b      	adds	r3, #11
    595c:	781b      	ldrb	r3, [r3, #0]
    595e:	b2db      	uxtb	r3, r3
    5960:	001a      	movs	r2, r3
    5962:	2301      	movs	r3, #1
    5964:	4013      	ands	r3, r2
    5966:	d00f      	beq.n	5988 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    5968:	2323      	movs	r3, #35	; 0x23
    596a:	18fb      	adds	r3, r7, r3
    596c:	224c      	movs	r2, #76	; 0x4c
    596e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    5970:	230f      	movs	r3, #15
    5972:	18fb      	adds	r3, r7, r3
    5974:	2200      	movs	r2, #0
    5976:	569a      	ldrsb	r2, [r3, r2]
    5978:	2324      	movs	r3, #36	; 0x24
    597a:	18fb      	adds	r3, r7, r3
    597c:	491a      	ldr	r1, [pc, #104]	; (59e8 <send+0x15c>)
    597e:	0112      	lsls	r2, r2, #4
    5980:	188a      	adds	r2, r1, r2
    5982:	3208      	adds	r2, #8
    5984:	8812      	ldrh	r2, [r2, #0]
    5986:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    5988:	2323      	movs	r3, #35	; 0x23
    598a:	18fb      	adds	r3, r7, r3
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	2280      	movs	r2, #128	; 0x80
    5990:	4252      	negs	r2, r2
    5992:	4313      	orrs	r3, r2
    5994:	b2d9      	uxtb	r1, r3
    5996:	2310      	movs	r3, #16
    5998:	18fa      	adds	r2, r7, r3
    599a:	2324      	movs	r3, #36	; 0x24
    599c:	18fb      	adds	r3, r7, r3
    599e:	881b      	ldrh	r3, [r3, #0]
    59a0:	9302      	str	r3, [sp, #8]
    59a2:	230c      	movs	r3, #12
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	881b      	ldrh	r3, [r3, #0]
    59a8:	9301      	str	r3, [sp, #4]
    59aa:	68bb      	ldr	r3, [r7, #8]
    59ac:	9300      	str	r3, [sp, #0]
    59ae:	2310      	movs	r3, #16
    59b0:	2002      	movs	r0, #2
    59b2:	4c0e      	ldr	r4, [pc, #56]	; (59ec <send+0x160>)
    59b4:	47a0      	blx	r4
    59b6:	0003      	movs	r3, r0
    59b8:	001a      	movs	r2, r3
    59ba:	2326      	movs	r3, #38	; 0x26
    59bc:	18fb      	adds	r3, r7, r3
    59be:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    59c0:	2326      	movs	r3, #38	; 0x26
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2200      	movs	r2, #0
    59c6:	5e9b      	ldrsh	r3, [r3, r2]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d004      	beq.n	59d6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    59cc:	2326      	movs	r3, #38	; 0x26
    59ce:	18fb      	adds	r3, r7, r3
    59d0:	220e      	movs	r2, #14
    59d2:	4252      	negs	r2, r2
    59d4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    59d6:	2326      	movs	r3, #38	; 0x26
    59d8:	18fb      	adds	r3, r7, r3
    59da:	2200      	movs	r2, #0
    59dc:	5e9b      	ldrsh	r3, [r3, r2]
}
    59de:	0018      	movs	r0, r3
    59e0:	46bd      	mov	sp, r7
    59e2:	b00b      	add	sp, #44	; 0x2c
    59e4:	bd90      	pop	{r4, r7, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	200019c0 	.word	0x200019c0
    59ec:	00000dc1 	.word	0x00000dc1

000059f0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    59f0:	b590      	push	{r4, r7, lr}
    59f2:	b08d      	sub	sp, #52	; 0x34
    59f4:	af04      	add	r7, sp, #16
    59f6:	60b9      	str	r1, [r7, #8]
    59f8:	0011      	movs	r1, r2
    59fa:	607b      	str	r3, [r7, #4]
    59fc:	230f      	movs	r3, #15
    59fe:	18fb      	adds	r3, r7, r3
    5a00:	1c02      	adds	r2, r0, #0
    5a02:	701a      	strb	r2, [r3, #0]
    5a04:	230c      	movs	r3, #12
    5a06:	18fb      	adds	r3, r7, r3
    5a08:	1c0a      	adds	r2, r1, #0
    5a0a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5a0c:	231e      	movs	r3, #30
    5a0e:	18fb      	adds	r3, r7, r3
    5a10:	2206      	movs	r2, #6
    5a12:	4252      	negs	r2, r2
    5a14:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5a16:	230f      	movs	r3, #15
    5a18:	18fb      	adds	r3, r7, r3
    5a1a:	781b      	ldrb	r3, [r3, #0]
    5a1c:	2b7f      	cmp	r3, #127	; 0x7f
    5a1e:	d900      	bls.n	5a22 <recv+0x32>
    5a20:	e099      	b.n	5b56 <recv+0x166>
    5a22:	68bb      	ldr	r3, [r7, #8]
    5a24:	2b00      	cmp	r3, #0
    5a26:	d100      	bne.n	5a2a <recv+0x3a>
    5a28:	e095      	b.n	5b56 <recv+0x166>
    5a2a:	230c      	movs	r3, #12
    5a2c:	18fb      	adds	r3, r7, r3
    5a2e:	881b      	ldrh	r3, [r3, #0]
    5a30:	2b00      	cmp	r3, #0
    5a32:	d100      	bne.n	5a36 <recv+0x46>
    5a34:	e08f      	b.n	5b56 <recv+0x166>
    5a36:	230f      	movs	r3, #15
    5a38:	18fb      	adds	r3, r7, r3
    5a3a:	781b      	ldrb	r3, [r3, #0]
    5a3c:	b25b      	sxtb	r3, r3
    5a3e:	4a4a      	ldr	r2, [pc, #296]	; (5b68 <recv+0x178>)
    5a40:	011b      	lsls	r3, r3, #4
    5a42:	18d3      	adds	r3, r2, r3
    5a44:	330a      	adds	r3, #10
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	b2db      	uxtb	r3, r3
    5a4a:	2b01      	cmp	r3, #1
    5a4c:	d000      	beq.n	5a50 <recv+0x60>
    5a4e:	e082      	b.n	5b56 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5a50:	231e      	movs	r3, #30
    5a52:	18fb      	adds	r3, r7, r3
    5a54:	2200      	movs	r2, #0
    5a56:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    5a58:	230f      	movs	r3, #15
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	2200      	movs	r2, #0
    5a5e:	569a      	ldrsb	r2, [r3, r2]
    5a60:	4b41      	ldr	r3, [pc, #260]	; (5b68 <recv+0x178>)
    5a62:	0112      	lsls	r2, r2, #4
    5a64:	68b9      	ldr	r1, [r7, #8]
    5a66:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    5a68:	230f      	movs	r3, #15
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	781b      	ldrb	r3, [r3, #0]
    5a6e:	b25b      	sxtb	r3, r3
    5a70:	4a3d      	ldr	r2, [pc, #244]	; (5b68 <recv+0x178>)
    5a72:	011b      	lsls	r3, r3, #4
    5a74:	18d3      	adds	r3, r2, r3
    5a76:	3304      	adds	r3, #4
    5a78:	220c      	movs	r2, #12
    5a7a:	18ba      	adds	r2, r7, r2
    5a7c:	8812      	ldrh	r2, [r2, #0]
    5a7e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    5a80:	230f      	movs	r3, #15
    5a82:	18fb      	adds	r3, r7, r3
    5a84:	781b      	ldrb	r3, [r3, #0]
    5a86:	b25b      	sxtb	r3, r3
    5a88:	4a37      	ldr	r2, [pc, #220]	; (5b68 <recv+0x178>)
    5a8a:	011b      	lsls	r3, r3, #4
    5a8c:	18d3      	adds	r3, r2, r3
    5a8e:	330c      	adds	r3, #12
    5a90:	781b      	ldrb	r3, [r3, #0]
    5a92:	b2db      	uxtb	r3, r3
    5a94:	2b00      	cmp	r3, #0
    5a96:	d15e      	bne.n	5b56 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    5a98:	231d      	movs	r3, #29
    5a9a:	18fb      	adds	r3, r7, r3
    5a9c:	2246      	movs	r2, #70	; 0x46
    5a9e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    5aa0:	230f      	movs	r3, #15
    5aa2:	18fb      	adds	r3, r7, r3
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	b25b      	sxtb	r3, r3
    5aa8:	4a2f      	ldr	r2, [pc, #188]	; (5b68 <recv+0x178>)
    5aaa:	011b      	lsls	r3, r3, #4
    5aac:	18d3      	adds	r3, r2, r3
    5aae:	330c      	adds	r3, #12
    5ab0:	2201      	movs	r2, #1
    5ab2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5ab4:	230f      	movs	r3, #15
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	781b      	ldrb	r3, [r3, #0]
    5aba:	b25b      	sxtb	r3, r3
    5abc:	4a2a      	ldr	r2, [pc, #168]	; (5b68 <recv+0x178>)
    5abe:	011b      	lsls	r3, r3, #4
    5ac0:	18d3      	adds	r3, r2, r3
    5ac2:	330b      	adds	r3, #11
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	b2db      	uxtb	r3, r3
    5ac8:	001a      	movs	r2, r3
    5aca:	2301      	movs	r3, #1
    5acc:	4013      	ands	r3, r2
    5ace:	d003      	beq.n	5ad8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5ad0:	231d      	movs	r3, #29
    5ad2:	18fb      	adds	r3, r7, r3
    5ad4:	224d      	movs	r2, #77	; 0x4d
    5ad6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	2b00      	cmp	r3, #0
    5adc:	d105      	bne.n	5aea <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5ade:	2314      	movs	r3, #20
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	2201      	movs	r2, #1
    5ae4:	4252      	negs	r2, r2
    5ae6:	601a      	str	r2, [r3, #0]
    5ae8:	e003      	b.n	5af2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5aea:	2314      	movs	r3, #20
    5aec:	18fb      	adds	r3, r7, r3
    5aee:	687a      	ldr	r2, [r7, #4]
    5af0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5af2:	2314      	movs	r3, #20
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	220f      	movs	r2, #15
    5af8:	18ba      	adds	r2, r7, r2
    5afa:	7812      	ldrb	r2, [r2, #0]
    5afc:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5afe:	230f      	movs	r3, #15
    5b00:	18fb      	adds	r3, r7, r3
    5b02:	781b      	ldrb	r3, [r3, #0]
    5b04:	b25b      	sxtb	r3, r3
    5b06:	4a18      	ldr	r2, [pc, #96]	; (5b68 <recv+0x178>)
    5b08:	011b      	lsls	r3, r3, #4
    5b0a:	18d3      	adds	r3, r2, r3
    5b0c:	3306      	adds	r3, #6
    5b0e:	881b      	ldrh	r3, [r3, #0]
    5b10:	b29a      	uxth	r2, r3
    5b12:	2314      	movs	r3, #20
    5b14:	18fb      	adds	r3, r7, r3
    5b16:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5b18:	2314      	movs	r3, #20
    5b1a:	18fa      	adds	r2, r7, r3
    5b1c:	231d      	movs	r3, #29
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	7819      	ldrb	r1, [r3, #0]
    5b22:	2300      	movs	r3, #0
    5b24:	9302      	str	r3, [sp, #8]
    5b26:	2300      	movs	r3, #0
    5b28:	9301      	str	r3, [sp, #4]
    5b2a:	2300      	movs	r3, #0
    5b2c:	9300      	str	r3, [sp, #0]
    5b2e:	2308      	movs	r3, #8
    5b30:	2002      	movs	r0, #2
    5b32:	4c0e      	ldr	r4, [pc, #56]	; (5b6c <recv+0x17c>)
    5b34:	47a0      	blx	r4
    5b36:	0003      	movs	r3, r0
    5b38:	001a      	movs	r2, r3
    5b3a:	231e      	movs	r3, #30
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5b40:	231e      	movs	r3, #30
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	2200      	movs	r2, #0
    5b46:	5e9b      	ldrsh	r3, [r3, r2]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d004      	beq.n	5b56 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5b4c:	231e      	movs	r3, #30
    5b4e:	18fb      	adds	r3, r7, r3
    5b50:	220e      	movs	r2, #14
    5b52:	4252      	negs	r2, r2
    5b54:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    5b56:	231e      	movs	r3, #30
    5b58:	18fb      	adds	r3, r7, r3
    5b5a:	2200      	movs	r2, #0
    5b5c:	5e9b      	ldrsh	r3, [r3, r2]
}
    5b5e:	0018      	movs	r0, r3
    5b60:	46bd      	mov	sp, r7
    5b62:	b009      	add	sp, #36	; 0x24
    5b64:	bd90      	pop	{r4, r7, pc}
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	200019c0 	.word	0x200019c0
    5b6c:	00000dc1 	.word	0x00000dc1

00005b70 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5b70:	b5b0      	push	{r4, r5, r7, lr}
    5b72:	b088      	sub	sp, #32
    5b74:	af04      	add	r7, sp, #16
    5b76:	0002      	movs	r2, r0
    5b78:	1dfb      	adds	r3, r7, #7
    5b7a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    5b7c:	230f      	movs	r3, #15
    5b7e:	18fb      	adds	r3, r7, r3
    5b80:	22fa      	movs	r2, #250	; 0xfa
    5b82:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    5b84:	4b42      	ldr	r3, [pc, #264]	; (5c90 <close+0x120>)
    5b86:	0018      	movs	r0, r3
    5b88:	4b42      	ldr	r3, [pc, #264]	; (5c94 <close+0x124>)
    5b8a:	4798      	blx	r3
    5b8c:	1dfb      	adds	r3, r7, #7
    5b8e:	2200      	movs	r2, #0
    5b90:	569a      	ldrsb	r2, [r3, r2]
    5b92:	4b41      	ldr	r3, [pc, #260]	; (5c98 <close+0x128>)
    5b94:	0011      	movs	r1, r2
    5b96:	0018      	movs	r0, r3
    5b98:	4b3e      	ldr	r3, [pc, #248]	; (5c94 <close+0x124>)
    5b9a:	4798      	blx	r3
    5b9c:	200d      	movs	r0, #13
    5b9e:	4b3f      	ldr	r3, [pc, #252]	; (5c9c <close+0x12c>)
    5ba0:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    5ba2:	1dfb      	adds	r3, r7, #7
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	2b7f      	cmp	r3, #127	; 0x7f
    5ba8:	d86a      	bhi.n	5c80 <close+0x110>
    5baa:	1dfb      	adds	r3, r7, #7
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	b25b      	sxtb	r3, r3
    5bb0:	4a3b      	ldr	r2, [pc, #236]	; (5ca0 <close+0x130>)
    5bb2:	011b      	lsls	r3, r3, #4
    5bb4:	18d3      	adds	r3, r2, r3
    5bb6:	330a      	adds	r3, #10
    5bb8:	781b      	ldrb	r3, [r3, #0]
    5bba:	b2db      	uxtb	r3, r3
    5bbc:	2b01      	cmp	r3, #1
    5bbe:	d15f      	bne.n	5c80 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    5bc0:	230e      	movs	r3, #14
    5bc2:	18fb      	adds	r3, r7, r3
    5bc4:	2249      	movs	r2, #73	; 0x49
    5bc6:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    5bc8:	2308      	movs	r3, #8
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	1dfa      	adds	r2, r7, #7
    5bce:	7812      	ldrb	r2, [r2, #0]
    5bd0:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5bd2:	1dfb      	adds	r3, r7, #7
    5bd4:	781b      	ldrb	r3, [r3, #0]
    5bd6:	b25b      	sxtb	r3, r3
    5bd8:	4a31      	ldr	r2, [pc, #196]	; (5ca0 <close+0x130>)
    5bda:	011b      	lsls	r3, r3, #4
    5bdc:	18d3      	adds	r3, r2, r3
    5bde:	3306      	adds	r3, #6
    5be0:	881b      	ldrh	r3, [r3, #0]
    5be2:	b29a      	uxth	r2, r3
    5be4:	2308      	movs	r3, #8
    5be6:	18fb      	adds	r3, r7, r3
    5be8:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5bea:	1dfb      	adds	r3, r7, #7
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	b25b      	sxtb	r3, r3
    5bf0:	4a2b      	ldr	r2, [pc, #172]	; (5ca0 <close+0x130>)
    5bf2:	011b      	lsls	r3, r3, #4
    5bf4:	18d3      	adds	r3, r2, r3
    5bf6:	330a      	adds	r3, #10
    5bf8:	2200      	movs	r2, #0
    5bfa:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5bfc:	1dfb      	adds	r3, r7, #7
    5bfe:	781b      	ldrb	r3, [r3, #0]
    5c00:	b25b      	sxtb	r3, r3
    5c02:	4a27      	ldr	r2, [pc, #156]	; (5ca0 <close+0x130>)
    5c04:	011b      	lsls	r3, r3, #4
    5c06:	18d3      	adds	r3, r2, r3
    5c08:	3306      	adds	r3, #6
    5c0a:	2200      	movs	r2, #0
    5c0c:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5c0e:	1dfb      	adds	r3, r7, #7
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	b25b      	sxtb	r3, r3
    5c14:	4a22      	ldr	r2, [pc, #136]	; (5ca0 <close+0x130>)
    5c16:	011b      	lsls	r3, r3, #4
    5c18:	18d3      	adds	r3, r2, r3
    5c1a:	330b      	adds	r3, #11
    5c1c:	781b      	ldrb	r3, [r3, #0]
    5c1e:	b2db      	uxtb	r3, r3
    5c20:	001a      	movs	r2, r3
    5c22:	2301      	movs	r3, #1
    5c24:	4013      	ands	r3, r2
    5c26:	d003      	beq.n	5c30 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5c28:	230e      	movs	r3, #14
    5c2a:	18fb      	adds	r3, r7, r3
    5c2c:	224e      	movs	r2, #78	; 0x4e
    5c2e:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5c30:	230f      	movs	r3, #15
    5c32:	18fc      	adds	r4, r7, r3
    5c34:	2308      	movs	r3, #8
    5c36:	18fa      	adds	r2, r7, r3
    5c38:	230e      	movs	r3, #14
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	7819      	ldrb	r1, [r3, #0]
    5c3e:	2300      	movs	r3, #0
    5c40:	9302      	str	r3, [sp, #8]
    5c42:	2300      	movs	r3, #0
    5c44:	9301      	str	r3, [sp, #4]
    5c46:	2300      	movs	r3, #0
    5c48:	9300      	str	r3, [sp, #0]
    5c4a:	2304      	movs	r3, #4
    5c4c:	2002      	movs	r0, #2
    5c4e:	4d15      	ldr	r5, [pc, #84]	; (5ca4 <close+0x134>)
    5c50:	47a8      	blx	r5
    5c52:	0003      	movs	r3, r0
    5c54:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5c56:	230f      	movs	r3, #15
    5c58:	18fb      	adds	r3, r7, r3
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	b25b      	sxtb	r3, r3
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d003      	beq.n	5c6a <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    5c62:	230f      	movs	r3, #15
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	22f7      	movs	r2, #247	; 0xf7
    5c68:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    5c6a:	1dfb      	adds	r3, r7, #7
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	b25b      	sxtb	r3, r3
    5c70:	011a      	lsls	r2, r3, #4
    5c72:	4b0b      	ldr	r3, [pc, #44]	; (5ca0 <close+0x130>)
    5c74:	18d3      	adds	r3, r2, r3
    5c76:	2210      	movs	r2, #16
    5c78:	2100      	movs	r1, #0
    5c7a:	0018      	movs	r0, r3
    5c7c:	4b0a      	ldr	r3, [pc, #40]	; (5ca8 <close+0x138>)
    5c7e:	4798      	blx	r3
	}
	return s8Ret;
    5c80:	230f      	movs	r3, #15
    5c82:	18fb      	adds	r3, r7, r3
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	b25b      	sxtb	r3, r3
}
    5c88:	0018      	movs	r0, r3
    5c8a:	46bd      	mov	sp, r7
    5c8c:	b004      	add	sp, #16
    5c8e:	bdb0      	pop	{r4, r5, r7, pc}
    5c90:	0001e11c 	.word	0x0001e11c
    5c94:	0001bc4d 	.word	0x0001bc4d
    5c98:	0001e158 	.word	0x0001e158
    5c9c:	0001bc81 	.word	0x0001bc81
    5ca0:	200019c0 	.word	0x200019c0
    5ca4:	00000dc1 	.word	0x00000dc1
    5ca8:	00000b61 	.word	0x00000b61

00005cac <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    5cac:	b5b0      	push	{r4, r5, r7, lr}
    5cae:	b088      	sub	sp, #32
    5cb0:	af04      	add	r7, sp, #16
    5cb2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5cb4:	230f      	movs	r3, #15
    5cb6:	18fb      	adds	r3, r7, r3
    5cb8:	22fa      	movs	r2, #250	; 0xfa
    5cba:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	0018      	movs	r0, r3
    5cc0:	4b14      	ldr	r3, [pc, #80]	; (5d14 <gethostbyname+0x68>)
    5cc2:	4798      	blx	r3
    5cc4:	0003      	movs	r3, r0
    5cc6:	001a      	movs	r2, r3
    5cc8:	230e      	movs	r3, #14
    5cca:	18fb      	adds	r3, r7, r3
    5ccc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    5cce:	230e      	movs	r3, #14
    5cd0:	18fb      	adds	r3, r7, r3
    5cd2:	781b      	ldrb	r3, [r3, #0]
    5cd4:	2b40      	cmp	r3, #64	; 0x40
    5cd6:	d815      	bhi.n	5d04 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5cd8:	230e      	movs	r3, #14
    5cda:	18fb      	adds	r3, r7, r3
    5cdc:	781b      	ldrb	r3, [r3, #0]
    5cde:	b29b      	uxth	r3, r3
    5ce0:	3301      	adds	r3, #1
    5ce2:	b299      	uxth	r1, r3
    5ce4:	230f      	movs	r3, #15
    5ce6:	18fc      	adds	r4, r7, r3
    5ce8:	687a      	ldr	r2, [r7, #4]
    5cea:	2300      	movs	r3, #0
    5cec:	9302      	str	r3, [sp, #8]
    5cee:	2300      	movs	r3, #0
    5cf0:	9301      	str	r3, [sp, #4]
    5cf2:	2300      	movs	r3, #0
    5cf4:	9300      	str	r3, [sp, #0]
    5cf6:	000b      	movs	r3, r1
    5cf8:	214a      	movs	r1, #74	; 0x4a
    5cfa:	2002      	movs	r0, #2
    5cfc:	4d06      	ldr	r5, [pc, #24]	; (5d18 <gethostbyname+0x6c>)
    5cfe:	47a8      	blx	r5
    5d00:	0003      	movs	r3, r0
    5d02:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5d04:	230f      	movs	r3, #15
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	b25b      	sxtb	r3, r3
}
    5d0c:	0018      	movs	r0, r3
    5d0e:	46bd      	mov	sp, r7
    5d10:	b004      	add	sp, #16
    5d12:	bdb0      	pop	{r4, r5, r7, pc}
    5d14:	00000b9f 	.word	0x00000b9f
    5d18:	00000dc1 	.word	0x00000dc1

00005d1c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b082      	sub	sp, #8
    5d20:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5d22:	003b      	movs	r3, r7
    5d24:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	22b9      	movs	r2, #185	; 0xb9
    5d2a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5d2c:	4b13      	ldr	r3, [pc, #76]	; (5d7c <spi_flash_enter_low_power_mode+0x60>)
    5d2e:	2100      	movs	r1, #0
    5d30:	0018      	movs	r0, r3
    5d32:	4b13      	ldr	r3, [pc, #76]	; (5d80 <spi_flash_enter_low_power_mode+0x64>)
    5d34:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5d36:	687b      	ldr	r3, [r7, #4]
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	001a      	movs	r2, r3
    5d3c:	4b11      	ldr	r3, [pc, #68]	; (5d84 <spi_flash_enter_low_power_mode+0x68>)
    5d3e:	0011      	movs	r1, r2
    5d40:	0018      	movs	r0, r3
    5d42:	4b0f      	ldr	r3, [pc, #60]	; (5d80 <spi_flash_enter_low_power_mode+0x64>)
    5d44:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5d46:	4b10      	ldr	r3, [pc, #64]	; (5d88 <spi_flash_enter_low_power_mode+0x6c>)
    5d48:	2101      	movs	r1, #1
    5d4a:	0018      	movs	r0, r3
    5d4c:	4b0c      	ldr	r3, [pc, #48]	; (5d80 <spi_flash_enter_low_power_mode+0x64>)
    5d4e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5d50:	4b0e      	ldr	r3, [pc, #56]	; (5d8c <spi_flash_enter_low_power_mode+0x70>)
    5d52:	2100      	movs	r1, #0
    5d54:	0018      	movs	r0, r3
    5d56:	4b0a      	ldr	r3, [pc, #40]	; (5d80 <spi_flash_enter_low_power_mode+0x64>)
    5d58:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5d5a:	4b0d      	ldr	r3, [pc, #52]	; (5d90 <spi_flash_enter_low_power_mode+0x74>)
    5d5c:	2181      	movs	r1, #129	; 0x81
    5d5e:	0018      	movs	r0, r3
    5d60:	4b07      	ldr	r3, [pc, #28]	; (5d80 <spi_flash_enter_low_power_mode+0x64>)
    5d62:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5d64:	46c0      	nop			; (mov r8, r8)
    5d66:	4b0b      	ldr	r3, [pc, #44]	; (5d94 <spi_flash_enter_low_power_mode+0x78>)
    5d68:	0018      	movs	r0, r3
    5d6a:	4b0b      	ldr	r3, [pc, #44]	; (5d98 <spi_flash_enter_low_power_mode+0x7c>)
    5d6c:	4798      	blx	r3
    5d6e:	0003      	movs	r3, r0
    5d70:	2b01      	cmp	r3, #1
    5d72:	d1f8      	bne.n	5d66 <spi_flash_enter_low_power_mode+0x4a>
}
    5d74:	46c0      	nop			; (mov r8, r8)
    5d76:	46bd      	mov	sp, r7
    5d78:	b002      	add	sp, #8
    5d7a:	bd80      	pop	{r7, pc}
    5d7c:	00010208 	.word	0x00010208
    5d80:	000030b9 	.word	0x000030b9
    5d84:	0001020c 	.word	0x0001020c
    5d88:	00010214 	.word	0x00010214
    5d8c:	0001021c 	.word	0x0001021c
    5d90:	00010204 	.word	0x00010204
    5d94:	00010218 	.word	0x00010218
    5d98:	00003075 	.word	0x00003075

00005d9c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b082      	sub	sp, #8
    5da0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5da2:	003b      	movs	r3, r7
    5da4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	22ab      	movs	r2, #171	; 0xab
    5daa:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5dac:	4b13      	ldr	r3, [pc, #76]	; (5dfc <spi_flash_leave_low_power_mode+0x60>)
    5dae:	2100      	movs	r1, #0
    5db0:	0018      	movs	r0, r3
    5db2:	4b13      	ldr	r3, [pc, #76]	; (5e00 <spi_flash_leave_low_power_mode+0x64>)
    5db4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5db6:	687b      	ldr	r3, [r7, #4]
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	001a      	movs	r2, r3
    5dbc:	4b11      	ldr	r3, [pc, #68]	; (5e04 <spi_flash_leave_low_power_mode+0x68>)
    5dbe:	0011      	movs	r1, r2
    5dc0:	0018      	movs	r0, r3
    5dc2:	4b0f      	ldr	r3, [pc, #60]	; (5e00 <spi_flash_leave_low_power_mode+0x64>)
    5dc4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5dc6:	4b10      	ldr	r3, [pc, #64]	; (5e08 <spi_flash_leave_low_power_mode+0x6c>)
    5dc8:	2101      	movs	r1, #1
    5dca:	0018      	movs	r0, r3
    5dcc:	4b0c      	ldr	r3, [pc, #48]	; (5e00 <spi_flash_leave_low_power_mode+0x64>)
    5dce:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5dd0:	4b0e      	ldr	r3, [pc, #56]	; (5e0c <spi_flash_leave_low_power_mode+0x70>)
    5dd2:	2100      	movs	r1, #0
    5dd4:	0018      	movs	r0, r3
    5dd6:	4b0a      	ldr	r3, [pc, #40]	; (5e00 <spi_flash_leave_low_power_mode+0x64>)
    5dd8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    5dda:	4b0d      	ldr	r3, [pc, #52]	; (5e10 <spi_flash_leave_low_power_mode+0x74>)
    5ddc:	2181      	movs	r1, #129	; 0x81
    5dde:	0018      	movs	r0, r3
    5de0:	4b07      	ldr	r3, [pc, #28]	; (5e00 <spi_flash_leave_low_power_mode+0x64>)
    5de2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5de4:	46c0      	nop			; (mov r8, r8)
    5de6:	4b0b      	ldr	r3, [pc, #44]	; (5e14 <spi_flash_leave_low_power_mode+0x78>)
    5de8:	0018      	movs	r0, r3
    5dea:	4b0b      	ldr	r3, [pc, #44]	; (5e18 <spi_flash_leave_low_power_mode+0x7c>)
    5dec:	4798      	blx	r3
    5dee:	0003      	movs	r3, r0
    5df0:	2b01      	cmp	r3, #1
    5df2:	d1f8      	bne.n	5de6 <spi_flash_leave_low_power_mode+0x4a>
}
    5df4:	46c0      	nop			; (mov r8, r8)
    5df6:	46bd      	mov	sp, r7
    5df8:	b002      	add	sp, #8
    5dfa:	bd80      	pop	{r7, pc}
    5dfc:	00010208 	.word	0x00010208
    5e00:	000030b9 	.word	0x000030b9
    5e04:	0001020c 	.word	0x0001020c
    5e08:	00010214 	.word	0x00010214
    5e0c:	0001021c 	.word	0x0001021c
    5e10:	00010204 	.word	0x00010204
    5e14:	00010218 	.word	0x00010218
    5e18:	00003075 	.word	0x00003075

00005e1c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5e1c:	b590      	push	{r4, r7, lr}
    5e1e:	b085      	sub	sp, #20
    5e20:	af00      	add	r7, sp, #0
    5e22:	0002      	movs	r2, r0
    5e24:	1dfb      	adds	r3, r7, #7
    5e26:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5e28:	230f      	movs	r3, #15
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	2200      	movs	r2, #0
    5e2e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5e30:	4b24      	ldr	r3, [pc, #144]	; (5ec4 <spi_flash_enable+0xa8>)
    5e32:	4798      	blx	r3
    5e34:	0003      	movs	r3, r0
    5e36:	051b      	lsls	r3, r3, #20
    5e38:	0d1b      	lsrs	r3, r3, #20
    5e3a:	4a23      	ldr	r2, [pc, #140]	; (5ec8 <spi_flash_enable+0xac>)
    5e3c:	4293      	cmp	r3, r2
    5e3e:	d938      	bls.n	5eb2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5e40:	230f      	movs	r3, #15
    5e42:	18fc      	adds	r4, r7, r3
    5e44:	2308      	movs	r3, #8
    5e46:	18fb      	adds	r3, r7, r3
    5e48:	4a20      	ldr	r2, [pc, #128]	; (5ecc <spi_flash_enable+0xb0>)
    5e4a:	0019      	movs	r1, r3
    5e4c:	0010      	movs	r0, r2
    5e4e:	4b20      	ldr	r3, [pc, #128]	; (5ed0 <spi_flash_enable+0xb4>)
    5e50:	4798      	blx	r3
    5e52:	0003      	movs	r3, r0
    5e54:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    5e56:	230f      	movs	r3, #15
    5e58:	18fb      	adds	r3, r7, r3
    5e5a:	781b      	ldrb	r3, [r3, #0]
    5e5c:	b25b      	sxtb	r3, r3
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d126      	bne.n	5eb0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5e62:	68bb      	ldr	r3, [r7, #8]
    5e64:	4a1b      	ldr	r2, [pc, #108]	; (5ed4 <spi_flash_enable+0xb8>)
    5e66:	4013      	ands	r3, r2
    5e68:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5e6a:	68bb      	ldr	r3, [r7, #8]
    5e6c:	4a1a      	ldr	r2, [pc, #104]	; (5ed8 <spi_flash_enable+0xbc>)
    5e6e:	4313      	orrs	r3, r2
    5e70:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5e72:	68bb      	ldr	r3, [r7, #8]
    5e74:	4a15      	ldr	r2, [pc, #84]	; (5ecc <spi_flash_enable+0xb0>)
    5e76:	0019      	movs	r1, r3
    5e78:	0010      	movs	r0, r2
    5e7a:	4b18      	ldr	r3, [pc, #96]	; (5edc <spi_flash_enable+0xc0>)
    5e7c:	4798      	blx	r3
		if(enable) {
    5e7e:	1dfb      	adds	r3, r7, #7
    5e80:	781b      	ldrb	r3, [r3, #0]
    5e82:	2b00      	cmp	r3, #0
    5e84:	d002      	beq.n	5e8c <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    5e86:	4b16      	ldr	r3, [pc, #88]	; (5ee0 <spi_flash_enable+0xc4>)
    5e88:	4798      	blx	r3
    5e8a:	e001      	b.n	5e90 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5e8c:	4b15      	ldr	r3, [pc, #84]	; (5ee4 <spi_flash_enable+0xc8>)
    5e8e:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5e90:	68bb      	ldr	r3, [r7, #8]
    5e92:	4a10      	ldr	r2, [pc, #64]	; (5ed4 <spi_flash_enable+0xb8>)
    5e94:	4013      	ands	r3, r2
    5e96:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5e98:	68bb      	ldr	r3, [r7, #8]
    5e9a:	2280      	movs	r2, #128	; 0x80
    5e9c:	0252      	lsls	r2, r2, #9
    5e9e:	4313      	orrs	r3, r2
    5ea0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5ea2:	68bb      	ldr	r3, [r7, #8]
    5ea4:	4a09      	ldr	r2, [pc, #36]	; (5ecc <spi_flash_enable+0xb0>)
    5ea6:	0019      	movs	r1, r3
    5ea8:	0010      	movs	r0, r2
    5eaa:	4b0c      	ldr	r3, [pc, #48]	; (5edc <spi_flash_enable+0xc0>)
    5eac:	4798      	blx	r3
    5eae:	e000      	b.n	5eb2 <spi_flash_enable+0x96>
			goto ERR1;
    5eb0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5eb2:	230f      	movs	r3, #15
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	781b      	ldrb	r3, [r3, #0]
    5eb8:	b25b      	sxtb	r3, r3
}
    5eba:	0018      	movs	r0, r3
    5ebc:	46bd      	mov	sp, r7
    5ebe:	b005      	add	sp, #20
    5ec0:	bd90      	pop	{r4, r7, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	00002999 	.word	0x00002999
    5ec8:	0000039f 	.word	0x0000039f
    5ecc:	00001410 	.word	0x00001410
    5ed0:	00003095 	.word	0x00003095
    5ed4:	f8888fff 	.word	0xf8888fff
    5ed8:	01111000 	.word	0x01111000
    5edc:	000030b9 	.word	0x000030b9
    5ee0:	00005d9d 	.word	0x00005d9d
    5ee4:	00005d1d 	.word	0x00005d1d

00005ee8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b082      	sub	sp, #8
    5eec:	af00      	add	r7, sp, #0
    5eee:	0002      	movs	r2, r0
    5ef0:	6039      	str	r1, [r7, #0]
    5ef2:	1dfb      	adds	r3, r7, #7
    5ef4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5ef6:	1dfb      	adds	r3, r7, #7
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	2b04      	cmp	r3, #4
    5efc:	d827      	bhi.n	5f4e <system_apb_clock_set_mask+0x66>
    5efe:	009a      	lsls	r2, r3, #2
    5f00:	4b16      	ldr	r3, [pc, #88]	; (5f5c <system_apb_clock_set_mask+0x74>)
    5f02:	18d3      	adds	r3, r2, r3
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    5f08:	4b15      	ldr	r3, [pc, #84]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f0a:	4a15      	ldr	r2, [pc, #84]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f0c:	6951      	ldr	r1, [r2, #20]
    5f0e:	683a      	ldr	r2, [r7, #0]
    5f10:	430a      	orrs	r2, r1
    5f12:	615a      	str	r2, [r3, #20]
			break;
    5f14:	e01d      	b.n	5f52 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    5f16:	4b12      	ldr	r3, [pc, #72]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f18:	4a11      	ldr	r2, [pc, #68]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f1a:	6991      	ldr	r1, [r2, #24]
    5f1c:	683a      	ldr	r2, [r7, #0]
    5f1e:	430a      	orrs	r2, r1
    5f20:	619a      	str	r2, [r3, #24]
			break;
    5f22:	e016      	b.n	5f52 <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    5f24:	4b0e      	ldr	r3, [pc, #56]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f26:	4a0e      	ldr	r2, [pc, #56]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f28:	69d1      	ldr	r1, [r2, #28]
    5f2a:	683a      	ldr	r2, [r7, #0]
    5f2c:	430a      	orrs	r2, r1
    5f2e:	61da      	str	r2, [r3, #28]
			break;
    5f30:	e00f      	b.n	5f52 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5f32:	4b0b      	ldr	r3, [pc, #44]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f34:	4a0a      	ldr	r2, [pc, #40]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f36:	6a11      	ldr	r1, [r2, #32]
    5f38:	683a      	ldr	r2, [r7, #0]
    5f3a:	430a      	orrs	r2, r1
    5f3c:	621a      	str	r2, [r3, #32]
			break;
    5f3e:	e008      	b.n	5f52 <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
    5f40:	4b07      	ldr	r3, [pc, #28]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f42:	4a07      	ldr	r2, [pc, #28]	; (5f60 <system_apb_clock_set_mask+0x78>)
    5f44:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5f46:	683a      	ldr	r2, [r7, #0]
    5f48:	430a      	orrs	r2, r1
    5f4a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    5f4c:	e001      	b.n	5f52 <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5f4e:	2317      	movs	r3, #23
    5f50:	e000      	b.n	5f54 <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
    5f52:	2300      	movs	r3, #0
}
    5f54:	0018      	movs	r0, r3
    5f56:	46bd      	mov	sp, r7
    5f58:	b002      	add	sp, #8
    5f5a:	bd80      	pop	{r7, pc}
    5f5c:	0001e1cc 	.word	0x0001e1cc
    5f60:	40000400 	.word	0x40000400

00005f64 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b082      	sub	sp, #8
    5f68:	af00      	add	r7, sp, #0
    5f6a:	0002      	movs	r2, r0
    5f6c:	1dfb      	adds	r3, r7, #7
    5f6e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f70:	4b06      	ldr	r3, [pc, #24]	; (5f8c <system_interrupt_enable+0x28>)
    5f72:	1dfa      	adds	r2, r7, #7
    5f74:	7812      	ldrb	r2, [r2, #0]
    5f76:	0011      	movs	r1, r2
    5f78:	221f      	movs	r2, #31
    5f7a:	400a      	ands	r2, r1
    5f7c:	2101      	movs	r1, #1
    5f7e:	4091      	lsls	r1, r2
    5f80:	000a      	movs	r2, r1
    5f82:	601a      	str	r2, [r3, #0]
}
    5f84:	46c0      	nop			; (mov r8, r8)
    5f86:	46bd      	mov	sp, r7
    5f88:	b002      	add	sp, #8
    5f8a:	bd80      	pop	{r7, pc}
    5f8c:	e000e100 	.word	0xe000e100

00005f90 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    5f90:	b580      	push	{r7, lr}
    5f92:	b082      	sub	sp, #8
    5f94:	af00      	add	r7, sp, #0
    5f96:	0002      	movs	r2, r0
    5f98:	1dfb      	adds	r3, r7, #7
    5f9a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f9c:	4a07      	ldr	r2, [pc, #28]	; (5fbc <system_interrupt_disable+0x2c>)
    5f9e:	1dfb      	adds	r3, r7, #7
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	0019      	movs	r1, r3
    5fa4:	231f      	movs	r3, #31
    5fa6:	400b      	ands	r3, r1
    5fa8:	2101      	movs	r1, #1
    5faa:	4099      	lsls	r1, r3
    5fac:	000b      	movs	r3, r1
    5fae:	0019      	movs	r1, r3
    5fb0:	2380      	movs	r3, #128	; 0x80
    5fb2:	50d1      	str	r1, [r2, r3]
}
    5fb4:	46c0      	nop			; (mov r8, r8)
    5fb6:	46bd      	mov	sp, r7
    5fb8:	b002      	add	sp, #8
    5fba:	bd80      	pop	{r7, pc}
    5fbc:	e000e100 	.word	0xe000e100

00005fc0 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b084      	sub	sp, #16
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    5fce:	68fb      	ldr	r3, [r7, #12]
    5fd0:	691b      	ldr	r3, [r3, #16]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d001      	beq.n	5fda <rtc_count_is_syncing+0x1a>
		return true;
    5fd6:	2301      	movs	r3, #1
    5fd8:	e000      	b.n	5fdc <rtc_count_is_syncing+0x1c>
	}

	return false;
    5fda:	2300      	movs	r3, #0
}
    5fdc:	0018      	movs	r0, r3
    5fde:	46bd      	mov	sp, r7
    5fe0:	b004      	add	sp, #16
    5fe2:	bd80      	pop	{r7, pc}

00005fe4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b084      	sub	sp, #16
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	681b      	ldr	r3, [r3, #0]
    5ff0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    5ff2:	2002      	movs	r0, #2
    5ff4:	4b0d      	ldr	r3, [pc, #52]	; (602c <rtc_count_enable+0x48>)
    5ff6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    5ff8:	46c0      	nop			; (mov r8, r8)
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	0018      	movs	r0, r3
    5ffe:	4b0c      	ldr	r3, [pc, #48]	; (6030 <rtc_count_enable+0x4c>)
    6000:	4798      	blx	r3
    6002:	1e03      	subs	r3, r0, #0
    6004:	d1f9      	bne.n	5ffa <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    6006:	68fb      	ldr	r3, [r7, #12]
    6008:	881b      	ldrh	r3, [r3, #0]
    600a:	b29b      	uxth	r3, r3
    600c:	2202      	movs	r2, #2
    600e:	4313      	orrs	r3, r2
    6010:	b29a      	uxth	r2, r3
    6012:	68fb      	ldr	r3, [r7, #12]
    6014:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    6016:	46c0      	nop			; (mov r8, r8)
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	0018      	movs	r0, r3
    601c:	4b04      	ldr	r3, [pc, #16]	; (6030 <rtc_count_enable+0x4c>)
    601e:	4798      	blx	r3
    6020:	1e03      	subs	r3, r0, #0
    6022:	d1f9      	bne.n	6018 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
    6024:	46c0      	nop			; (mov r8, r8)
    6026:	46bd      	mov	sp, r7
    6028:	b004      	add	sp, #16
    602a:	bd80      	pop	{r7, pc}
    602c:	00005f65 	.word	0x00005f65
    6030:	00005fc1 	.word	0x00005fc1

00006034 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    6034:	b580      	push	{r7, lr}
    6036:	b084      	sub	sp, #16
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	681b      	ldr	r3, [r3, #0]
    6040:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    6042:	2002      	movs	r0, #2
    6044:	4b10      	ldr	r3, [pc, #64]	; (6088 <rtc_count_disable+0x54>)
    6046:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    6048:	46c0      	nop			; (mov r8, r8)
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	0018      	movs	r0, r3
    604e:	4b0f      	ldr	r3, [pc, #60]	; (608c <rtc_count_disable+0x58>)
    6050:	4798      	blx	r3
    6052:	1e03      	subs	r3, r0, #0
    6054:	d1f9      	bne.n	604a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    6056:	68fb      	ldr	r3, [r7, #12]
    6058:	4a0d      	ldr	r2, [pc, #52]	; (6090 <rtc_count_disable+0x5c>)
    605a:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    605c:	68fb      	ldr	r3, [r7, #12]
    605e:	4a0c      	ldr	r2, [pc, #48]	; (6090 <rtc_count_disable+0x5c>)
    6060:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6062:	68fb      	ldr	r3, [r7, #12]
    6064:	881b      	ldrh	r3, [r3, #0]
    6066:	b29b      	uxth	r3, r3
    6068:	2202      	movs	r2, #2
    606a:	4393      	bics	r3, r2
    606c:	b29a      	uxth	r2, r3
    606e:	68fb      	ldr	r3, [r7, #12]
    6070:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	0018      	movs	r0, r3
    6078:	4b04      	ldr	r3, [pc, #16]	; (608c <rtc_count_disable+0x58>)
    607a:	4798      	blx	r3
    607c:	1e03      	subs	r3, r0, #0
    607e:	d1f9      	bne.n	6074 <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
    6080:	46c0      	nop			; (mov r8, r8)
    6082:	46bd      	mov	sp, r7
    6084:	b004      	add	sp, #16
    6086:	bd80      	pop	{r7, pc}
    6088:	00005f91 	.word	0x00005f91
    608c:	00005fc1 	.word	0x00005fc1
    6090:	ffff81ff 	.word	0xffff81ff

00006094 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    6094:	b580      	push	{r7, lr}
    6096:	b084      	sub	sp, #16
    6098:	af00      	add	r7, sp, #0
    609a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	681b      	ldr	r3, [r3, #0]
    60a0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	0018      	movs	r0, r3
    60a6:	4b11      	ldr	r3, [pc, #68]	; (60ec <rtc_count_reset+0x58>)
    60a8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    60aa:	687b      	ldr	r3, [r7, #4]
    60ac:	2200      	movs	r2, #0
    60ae:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	2200      	movs	r2, #0
    60b4:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	687b      	ldr	r3, [r7, #4]
    60ba:	0018      	movs	r0, r3
    60bc:	4b0c      	ldr	r3, [pc, #48]	; (60f0 <rtc_count_reset+0x5c>)
    60be:	4798      	blx	r3
    60c0:	1e03      	subs	r3, r0, #0
    60c2:	d1f9      	bne.n	60b8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    60c4:	68fb      	ldr	r3, [r7, #12]
    60c6:	881b      	ldrh	r3, [r3, #0]
    60c8:	b29b      	uxth	r3, r3
    60ca:	2201      	movs	r2, #1
    60cc:	4313      	orrs	r3, r2
    60ce:	b29a      	uxth	r2, r3
    60d0:	68fb      	ldr	r3, [r7, #12]
    60d2:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    60d4:	46c0      	nop			; (mov r8, r8)
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	0018      	movs	r0, r3
    60da:	4b05      	ldr	r3, [pc, #20]	; (60f0 <rtc_count_reset+0x5c>)
    60dc:	4798      	blx	r3
    60de:	1e03      	subs	r3, r0, #0
    60e0:	d1f9      	bne.n	60d6 <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
    60e2:	46c0      	nop			; (mov r8, r8)
    60e4:	46bd      	mov	sp, r7
    60e6:	b004      	add	sp, #16
    60e8:	bd80      	pop	{r7, pc}
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	00006035 	.word	0x00006035
    60f0:	00005fc1 	.word	0x00005fc1

000060f4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b084      	sub	sp, #16
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
    60fc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    6104:	683b      	ldr	r3, [r7, #0]
    6106:	791b      	ldrb	r3, [r3, #4]
    6108:	b29b      	uxth	r3, r3
    610a:	03db      	lsls	r3, r3, #15
    610c:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
    610e:	683b      	ldr	r3, [r7, #0]
    6110:	881b      	ldrh	r3, [r3, #0]
    6112:	4313      	orrs	r3, r2
    6114:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    6116:	68bb      	ldr	r3, [r7, #8]
    6118:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    611a:	683b      	ldr	r3, [r7, #0]
    611c:	789b      	ldrb	r3, [r3, #2]
    611e:	2b00      	cmp	r3, #0
    6120:	d032      	beq.n	6188 <_rtc_count_set_config+0x94>
    6122:	2b01      	cmp	r3, #1
    6124:	d15e      	bne.n	61e4 <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    6126:	68bb      	ldr	r3, [r7, #8]
    6128:	881b      	ldrh	r3, [r3, #0]
    612a:	b29a      	uxth	r2, r3
    612c:	68bb      	ldr	r3, [r7, #8]
    612e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	78db      	ldrb	r3, [r3, #3]
    6134:	2b00      	cmp	r3, #0
    6136:	d007      	beq.n	6148 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    6138:	68bb      	ldr	r3, [r7, #8]
    613a:	881b      	ldrh	r3, [r3, #0]
    613c:	b29b      	uxth	r3, r3
    613e:	2280      	movs	r2, #128	; 0x80
    6140:	4313      	orrs	r3, r2
    6142:	b29a      	uxth	r2, r3
    6144:	68bb      	ldr	r3, [r7, #8]
    6146:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    6148:	230f      	movs	r3, #15
    614a:	18fb      	adds	r3, r7, r3
    614c:	2200      	movs	r2, #0
    614e:	701a      	strb	r2, [r3, #0]
    6150:	e014      	b.n	617c <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
    6152:	230f      	movs	r3, #15
    6154:	18fb      	adds	r3, r7, r3
    6156:	781a      	ldrb	r2, [r3, #0]
    6158:	683b      	ldr	r3, [r7, #0]
    615a:	3202      	adds	r2, #2
    615c:	0092      	lsls	r2, r2, #2
    615e:	58d1      	ldr	r1, [r2, r3]
    6160:	230f      	movs	r3, #15
    6162:	18fb      	adds	r3, r7, r3
    6164:	781a      	ldrb	r2, [r3, #0]
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	0018      	movs	r0, r3
    616a:	4b22      	ldr	r3, [pc, #136]	; (61f4 <_rtc_count_set_config+0x100>)
    616c:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    616e:	230f      	movs	r3, #15
    6170:	18fb      	adds	r3, r7, r3
    6172:	781a      	ldrb	r2, [r3, #0]
    6174:	230f      	movs	r3, #15
    6176:	18fb      	adds	r3, r7, r3
    6178:	3201      	adds	r2, #1
    617a:	701a      	strb	r2, [r3, #0]
    617c:	230f      	movs	r3, #15
    617e:	18fb      	adds	r3, r7, r3
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	2b00      	cmp	r3, #0
    6184:	d0e5      	beq.n	6152 <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
    6186:	e02f      	b.n	61e8 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    6188:	68bb      	ldr	r3, [r7, #8]
    618a:	881b      	ldrh	r3, [r3, #0]
    618c:	b29b      	uxth	r3, r3
    618e:	2204      	movs	r2, #4
    6190:	4313      	orrs	r3, r2
    6192:	b29a      	uxth	r2, r3
    6194:	68bb      	ldr	r3, [r7, #8]
    6196:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    6198:	683b      	ldr	r3, [r7, #0]
    619a:	78db      	ldrb	r3, [r3, #3]
    619c:	2b00      	cmp	r3, #0
    619e:	d001      	beq.n	61a4 <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    61a0:	2317      	movs	r3, #23
    61a2:	e022      	b.n	61ea <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    61a4:	230e      	movs	r3, #14
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	2200      	movs	r2, #0
    61aa:	701a      	strb	r2, [r3, #0]
    61ac:	e014      	b.n	61d8 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
    61ae:	230e      	movs	r3, #14
    61b0:	18fb      	adds	r3, r7, r3
    61b2:	781a      	ldrb	r2, [r3, #0]
    61b4:	683b      	ldr	r3, [r7, #0]
    61b6:	3202      	adds	r2, #2
    61b8:	0092      	lsls	r2, r2, #2
    61ba:	58d1      	ldr	r1, [r2, r3]
    61bc:	230e      	movs	r3, #14
    61be:	18fb      	adds	r3, r7, r3
    61c0:	781a      	ldrb	r2, [r3, #0]
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	0018      	movs	r0, r3
    61c6:	4b0b      	ldr	r3, [pc, #44]	; (61f4 <_rtc_count_set_config+0x100>)
    61c8:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    61ca:	230e      	movs	r3, #14
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	781a      	ldrb	r2, [r3, #0]
    61d0:	230e      	movs	r3, #14
    61d2:	18fb      	adds	r3, r7, r3
    61d4:	3201      	adds	r2, #1
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	230e      	movs	r3, #14
    61da:	18fb      	adds	r3, r7, r3
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	2b01      	cmp	r3, #1
    61e0:	d9e5      	bls.n	61ae <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
    61e2:	e001      	b.n	61e8 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    61e4:	2317      	movs	r3, #23
    61e6:	e000      	b.n	61ea <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    61e8:	2300      	movs	r3, #0
}
    61ea:	0018      	movs	r0, r3
    61ec:	46bd      	mov	sp, r7
    61ee:	b004      	add	sp, #16
    61f0:	bd80      	pop	{r7, pc}
    61f2:	46c0      	nop			; (mov r8, r8)
    61f4:	0000625d 	.word	0x0000625d

000061f8 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b084      	sub	sp, #16
    61fc:	af00      	add	r7, sp, #0
    61fe:	60f8      	str	r0, [r7, #12]
    6200:	60b9      	str	r1, [r7, #8]
    6202:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6204:	68fb      	ldr	r3, [r7, #12]
    6206:	68ba      	ldr	r2, [r7, #8]
    6208:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
    620a:	2380      	movs	r3, #128	; 0x80
    620c:	005b      	lsls	r3, r3, #1
    620e:	0019      	movs	r1, r3
    6210:	2000      	movs	r0, #0
    6212:	4b0d      	ldr	r3, [pc, #52]	; (6248 <rtc_count_init+0x50>)
    6214:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    6216:	4b0d      	ldr	r3, [pc, #52]	; (624c <rtc_count_init+0x54>)
    6218:	2200      	movs	r2, #0
    621a:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    621c:	68fb      	ldr	r3, [r7, #12]
    621e:	0018      	movs	r0, r3
    6220:	4b0b      	ldr	r3, [pc, #44]	; (6250 <rtc_count_init+0x58>)
    6222:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	789a      	ldrb	r2, [r3, #2]
    6228:	68fb      	ldr	r3, [r7, #12]
    622a:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    622c:	4b09      	ldr	r3, [pc, #36]	; (6254 <rtc_count_init+0x5c>)
    622e:	68fa      	ldr	r2, [r7, #12]
    6230:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    6232:	687a      	ldr	r2, [r7, #4]
    6234:	68fb      	ldr	r3, [r7, #12]
    6236:	0011      	movs	r1, r2
    6238:	0018      	movs	r0, r3
    623a:	4b07      	ldr	r3, [pc, #28]	; (6258 <rtc_count_init+0x60>)
    623c:	4798      	blx	r3
    623e:	0003      	movs	r3, r0
}
    6240:	0018      	movs	r0, r3
    6242:	46bd      	mov	sp, r7
    6244:	b004      	add	sp, #16
    6246:	bd80      	pop	{r7, pc}
    6248:	00005ee9 	.word	0x00005ee9
    624c:	40001000 	.word	0x40001000
    6250:	00006095 	.word	0x00006095
    6254:	20001a7c 	.word	0x20001a7c
    6258:	000060f5 	.word	0x000060f5

0000625c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    625c:	b580      	push	{r7, lr}
    625e:	b086      	sub	sp, #24
    6260:	af00      	add	r7, sp, #0
    6262:	60f8      	str	r0, [r7, #12]
    6264:	60b9      	str	r1, [r7, #8]
    6266:	1dfb      	adds	r3, r7, #7
    6268:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    626a:	68fb      	ldr	r3, [r7, #12]
    626c:	681b      	ldr	r3, [r3, #0]
    626e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    6270:	46c0      	nop			; (mov r8, r8)
    6272:	68fb      	ldr	r3, [r7, #12]
    6274:	0018      	movs	r0, r3
    6276:	4b1d      	ldr	r3, [pc, #116]	; (62ec <rtc_count_set_compare+0x90>)
    6278:	4798      	blx	r3
    627a:	1e03      	subs	r3, r0, #0
    627c:	d1f9      	bne.n	6272 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    627e:	68fb      	ldr	r3, [r7, #12]
    6280:	791b      	ldrb	r3, [r3, #4]
    6282:	2b00      	cmp	r3, #0
    6284:	d00f      	beq.n	62a6 <rtc_count_set_compare+0x4a>
    6286:	2b01      	cmp	r3, #1
    6288:	d122      	bne.n	62d0 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    628a:	1dfb      	adds	r3, r7, #7
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	2b01      	cmp	r3, #1
    6290:	d901      	bls.n	6296 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    6292:	2317      	movs	r3, #23
    6294:	e026      	b.n	62e4 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    6296:	1dfb      	adds	r3, r7, #7
    6298:	781a      	ldrb	r2, [r3, #0]
    629a:	697b      	ldr	r3, [r7, #20]
    629c:	3208      	adds	r2, #8
    629e:	0092      	lsls	r2, r2, #2
    62a0:	68b9      	ldr	r1, [r7, #8]
    62a2:	50d1      	str	r1, [r2, r3]

			break;
    62a4:	e016      	b.n	62d4 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    62a6:	1dfb      	adds	r3, r7, #7
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	2b02      	cmp	r3, #2
    62ac:	d901      	bls.n	62b2 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    62ae:	2317      	movs	r3, #23
    62b0:	e018      	b.n	62e4 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    62b2:	68bb      	ldr	r3, [r7, #8]
    62b4:	4a0e      	ldr	r2, [pc, #56]	; (62f0 <rtc_count_set_compare+0x94>)
    62b6:	4293      	cmp	r3, r2
    62b8:	d901      	bls.n	62be <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    62ba:	2317      	movs	r3, #23
    62bc:	e012      	b.n	62e4 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    62be:	1dfb      	adds	r3, r7, #7
    62c0:	781a      	ldrb	r2, [r3, #0]
    62c2:	68bb      	ldr	r3, [r7, #8]
    62c4:	b299      	uxth	r1, r3
    62c6:	697b      	ldr	r3, [r7, #20]
    62c8:	3210      	adds	r2, #16
    62ca:	0052      	lsls	r2, r2, #1
    62cc:	52d1      	strh	r1, [r2, r3]

			break;
    62ce:	e001      	b.n	62d4 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    62d0:	231a      	movs	r3, #26
    62d2:	e007      	b.n	62e4 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    62d4:	46c0      	nop			; (mov r8, r8)
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	0018      	movs	r0, r3
    62da:	4b04      	ldr	r3, [pc, #16]	; (62ec <rtc_count_set_compare+0x90>)
    62dc:	4798      	blx	r3
    62de:	1e03      	subs	r3, r0, #0
    62e0:	d1f9      	bne.n	62d6 <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    62e2:	2300      	movs	r3, #0
}
    62e4:	0018      	movs	r0, r3
    62e6:	46bd      	mov	sp, r7
    62e8:	b006      	add	sp, #24
    62ea:	bd80      	pop	{r7, pc}
    62ec:	00005fc1 	.word	0x00005fc1
    62f0:	0000ffff 	.word	0x0000ffff

000062f4 <rtc_count_clear_compare_match>:
 * \retval STATUS_ERR_BAD_FORMAT   If the module was not initialized in a mode
 */
enum status_code rtc_count_clear_compare_match(
		struct rtc_module *const module,
		const enum rtc_count_compare comp_index)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
    62fc:	000a      	movs	r2, r1
    62fe:	1cfb      	adds	r3, r7, #3
    6300:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	60fb      	str	r3, [r7, #12]

	/* Check sanity. */
	switch (module->mode){
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	791b      	ldrb	r3, [r3, #4]
    630c:	2b00      	cmp	r3, #0
    630e:	d007      	beq.n	6320 <rtc_count_clear_compare_match+0x2c>
    6310:	2b01      	cmp	r3, #1
    6312:	d10b      	bne.n	632c <rtc_count_clear_compare_match+0x38>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_COMP32_NUM) {
    6314:	1cfb      	adds	r3, r7, #3
    6316:	781b      	ldrb	r3, [r3, #0]
    6318:	2b01      	cmp	r3, #1
    631a:	d909      	bls.n	6330 <rtc_count_clear_compare_match+0x3c>
				return STATUS_ERR_INVALID_ARG;
    631c:	2317      	movs	r3, #23
    631e:	e019      	b.n	6354 <rtc_count_clear_compare_match+0x60>

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
    6320:	1cfb      	adds	r3, r7, #3
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	2b02      	cmp	r3, #2
    6326:	d905      	bls.n	6334 <rtc_count_clear_compare_match+0x40>
				return STATUS_ERR_INVALID_ARG;
    6328:	2317      	movs	r3, #23
    632a:	e013      	b.n	6354 <rtc_count_clear_compare_match+0x60>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    632c:	231a      	movs	r3, #26
    632e:	e011      	b.n	6354 <rtc_count_clear_compare_match+0x60>
			break;
    6330:	46c0      	nop			; (mov r8, r8)
    6332:	e000      	b.n	6336 <rtc_count_clear_compare_match+0x42>
			break;
    6334:	46c0      	nop			; (mov r8, r8)
	}

	/* Clear INTFLAG. */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << comp_index);
    6336:	1cfb      	adds	r3, r7, #3
    6338:	781b      	ldrb	r3, [r3, #0]
    633a:	2201      	movs	r2, #1
    633c:	409a      	lsls	r2, r3
    633e:	0013      	movs	r3, r2
    6340:	b29b      	uxth	r3, r3
    6342:	021b      	lsls	r3, r3, #8
    6344:	b29a      	uxth	r2, r3
    6346:	23c0      	movs	r3, #192	; 0xc0
    6348:	009b      	lsls	r3, r3, #2
    634a:	4013      	ands	r3, r2
    634c:	b29a      	uxth	r2, r3
    634e:	68fb      	ldr	r3, [r7, #12]
    6350:	819a      	strh	r2, [r3, #12]

	return STATUS_OK;
    6352:	2300      	movs	r3, #0
}
    6354:	0018      	movs	r0, r3
    6356:	46bd      	mov	sp, r7
    6358:	b004      	add	sp, #16
    635a:	bd80      	pop	{r7, pc}

0000635c <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
    635c:	b580      	push	{r7, lr}
    635e:	b086      	sub	sp, #24
    6360:	af00      	add	r7, sp, #0
    6362:	60f8      	str	r0, [r7, #12]
    6364:	60b9      	str	r1, [r7, #8]
    6366:	1dfb      	adds	r3, r7, #7
    6368:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
    636a:	2317      	movs	r3, #23
    636c:	18fb      	adds	r3, r7, r3
    636e:	2200      	movs	r2, #0
    6370:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    6372:	1dfb      	adds	r3, r7, #7
    6374:	781b      	ldrb	r3, [r3, #0]
    6376:	2b0a      	cmp	r3, #10
    6378:	d003      	beq.n	6382 <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    637a:	1dfb      	adds	r3, r7, #7
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	2b07      	cmp	r3, #7
    6380:	d804      	bhi.n	638c <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
    6382:	2317      	movs	r3, #23
    6384:	18fb      	adds	r3, r7, r3
    6386:	2200      	movs	r2, #0
    6388:	701a      	strb	r2, [r3, #0]
    638a:	e01f      	b.n	63cc <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    638c:	68fb      	ldr	r3, [r7, #12]
    638e:	791b      	ldrb	r3, [r3, #4]
    6390:	2b00      	cmp	r3, #0
    6392:	d00a      	beq.n	63aa <rtc_count_register_callback+0x4e>
    6394:	2b01      	cmp	r3, #1
    6396:	d111      	bne.n	63bc <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    6398:	1dfb      	adds	r3, r7, #7
    639a:	781b      	ldrb	r3, [r3, #0]
    639c:	2b09      	cmp	r3, #9
    639e:	d912      	bls.n	63c6 <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
    63a0:	2317      	movs	r3, #23
    63a2:	18fb      	adds	r3, r7, r3
    63a4:	2217      	movs	r2, #23
    63a6:	701a      	strb	r2, [r3, #0]
			}

			break;
    63a8:	e00d      	b.n	63c6 <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    63aa:	1dfb      	adds	r3, r7, #7
    63ac:	781b      	ldrb	r3, [r3, #0]
    63ae:	2b0a      	cmp	r3, #10
    63b0:	d90b      	bls.n	63ca <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
    63b2:	2317      	movs	r3, #23
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	2217      	movs	r2, #23
    63b8:	701a      	strb	r2, [r3, #0]
			}
			break;
    63ba:	e006      	b.n	63ca <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
    63bc:	2317      	movs	r3, #23
    63be:	18fb      	adds	r3, r7, r3
    63c0:	2217      	movs	r2, #23
    63c2:	701a      	strb	r2, [r3, #0]
    63c4:	e002      	b.n	63cc <rtc_count_register_callback+0x70>
			break;
    63c6:	46c0      	nop			; (mov r8, r8)
    63c8:	e000      	b.n	63cc <rtc_count_register_callback+0x70>
			break;
    63ca:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
    63cc:	2317      	movs	r3, #23
    63ce:	18fb      	adds	r3, r7, r3
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	2b00      	cmp	r3, #0
    63d4:	d115      	bne.n	6402 <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
    63d6:	1dfb      	adds	r3, r7, #7
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	68fb      	ldr	r3, [r7, #12]
    63dc:	3202      	adds	r2, #2
    63de:	0092      	lsls	r2, r2, #2
    63e0:	68b9      	ldr	r1, [r7, #8]
    63e2:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    63e4:	68fb      	ldr	r3, [r7, #12]
    63e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    63e8:	b29b      	uxth	r3, r3
    63ea:	b21a      	sxth	r2, r3
    63ec:	1dfb      	adds	r3, r7, #7
    63ee:	781b      	ldrb	r3, [r3, #0]
    63f0:	2101      	movs	r1, #1
    63f2:	4099      	lsls	r1, r3
    63f4:	000b      	movs	r3, r1
    63f6:	b21b      	sxth	r3, r3
    63f8:	4313      	orrs	r3, r2
    63fa:	b21b      	sxth	r3, r3
    63fc:	b29a      	uxth	r2, r3
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
    6402:	2317      	movs	r3, #23
    6404:	18fb      	adds	r3, r7, r3
    6406:	781b      	ldrb	r3, [r3, #0]
}
    6408:	0018      	movs	r0, r3
    640a:	46bd      	mov	sp, r7
    640c:	b006      	add	sp, #24
    640e:	bd80      	pop	{r7, pc}

00006410 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    6410:	b580      	push	{r7, lr}
    6412:	b084      	sub	sp, #16
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	000a      	movs	r2, r1
    641a:	1cfb      	adds	r3, r7, #3
    641c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	681b      	ldr	r3, [r3, #0]
    6422:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    6424:	1cfb      	adds	r3, r7, #3
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	2b0a      	cmp	r3, #10
    642a:	d103      	bne.n	6434 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    642c:	68fb      	ldr	r3, [r7, #12]
    642e:	4a1a      	ldr	r2, [pc, #104]	; (6498 <rtc_count_enable_callback+0x88>)
    6430:	815a      	strh	r2, [r3, #10]
    6432:	e01e      	b.n	6472 <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    6434:	1cfb      	adds	r3, r7, #3
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	2b07      	cmp	r3, #7
    643a:	d80b      	bhi.n	6454 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    643c:	1cfb      	adds	r3, r7, #3
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	2201      	movs	r2, #1
    6442:	409a      	lsls	r2, r3
    6444:	0013      	movs	r3, r2
    6446:	b29b      	uxth	r3, r3
    6448:	22ff      	movs	r2, #255	; 0xff
    644a:	4013      	ands	r3, r2
    644c:	b29a      	uxth	r2, r3
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	815a      	strh	r2, [r3, #10]
    6452:	e00e      	b.n	6472 <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    6454:	1cfb      	adds	r3, r7, #3
    6456:	781b      	ldrb	r3, [r3, #0]
    6458:	3b08      	subs	r3, #8
    645a:	2201      	movs	r2, #1
    645c:	409a      	lsls	r2, r3
    645e:	0013      	movs	r3, r2
    6460:	b29b      	uxth	r3, r3
    6462:	021b      	lsls	r3, r3, #8
    6464:	b29a      	uxth	r2, r3
    6466:	23c0      	movs	r3, #192	; 0xc0
    6468:	009b      	lsls	r3, r3, #2
    646a:	4013      	ands	r3, r2
    646c:	b29a      	uxth	r2, r3
    646e:	68fb      	ldr	r3, [r7, #12]
    6470:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    6472:	687b      	ldr	r3, [r7, #4]
    6474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    6476:	b29b      	uxth	r3, r3
    6478:	b21a      	sxth	r2, r3
    647a:	1cfb      	adds	r3, r7, #3
    647c:	781b      	ldrb	r3, [r3, #0]
    647e:	2101      	movs	r1, #1
    6480:	4099      	lsls	r1, r3
    6482:	000b      	movs	r3, r1
    6484:	b21b      	sxth	r3, r3
    6486:	4313      	orrs	r3, r2
    6488:	b21b      	sxth	r3, r3
    648a:	b29a      	uxth	r2, r3
    648c:	687b      	ldr	r3, [r7, #4]
    648e:	86da      	strh	r2, [r3, #54]	; 0x36
}
    6490:	46c0      	nop			; (mov r8, r8)
    6492:	46bd      	mov	sp, r7
    6494:	b004      	add	sp, #16
    6496:	bd80      	pop	{r7, pc}
    6498:	ffff8000 	.word	0xffff8000

0000649c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    649c:	b580      	push	{r7, lr}
    649e:	b086      	sub	sp, #24
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    64a4:	4b58      	ldr	r3, [pc, #352]	; (6608 <_rtc_interrupt_handler+0x16c>)
    64a6:	687a      	ldr	r2, [r7, #4]
    64a8:	0092      	lsls	r2, r2, #2
    64aa:	58d3      	ldr	r3, [r2, r3]
    64ac:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    64ae:	693b      	ldr	r3, [r7, #16]
    64b0:	681b      	ldr	r3, [r3, #0]
    64b2:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    64b4:	230a      	movs	r3, #10
    64b6:	18fb      	adds	r3, r7, r3
    64b8:	693a      	ldr	r2, [r7, #16]
    64ba:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    64bc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    64be:	693b      	ldr	r3, [r7, #16]
    64c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    64c2:	b29a      	uxth	r2, r3
    64c4:	230a      	movs	r3, #10
    64c6:	18fb      	adds	r3, r7, r3
    64c8:	210a      	movs	r1, #10
    64ca:	1879      	adds	r1, r7, r1
    64cc:	8809      	ldrh	r1, [r1, #0]
    64ce:	400a      	ands	r2, r1
    64d0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    64d2:	2308      	movs	r3, #8
    64d4:	18fb      	adds	r3, r7, r3
    64d6:	68fa      	ldr	r2, [r7, #12]
    64d8:	8992      	ldrh	r2, [r2, #12]
    64da:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    64dc:	68fb      	ldr	r3, [r7, #12]
    64de:	895b      	ldrh	r3, [r3, #10]
    64e0:	b29a      	uxth	r2, r3
    64e2:	2308      	movs	r3, #8
    64e4:	18fb      	adds	r3, r7, r3
    64e6:	2108      	movs	r1, #8
    64e8:	1879      	adds	r1, r7, r1
    64ea:	8809      	ldrh	r1, [r1, #0]
    64ec:	400a      	ands	r2, r1
    64ee:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    64f0:	2308      	movs	r3, #8
    64f2:	18fb      	adds	r3, r7, r3
    64f4:	2200      	movs	r2, #0
    64f6:	5e9b      	ldrsh	r3, [r3, r2]
    64f8:	2b00      	cmp	r3, #0
    64fa:	da0d      	bge.n	6518 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    64fc:	230a      	movs	r3, #10
    64fe:	18fb      	adds	r3, r7, r3
    6500:	881a      	ldrh	r2, [r3, #0]
    6502:	2380      	movs	r3, #128	; 0x80
    6504:	00db      	lsls	r3, r3, #3
    6506:	4013      	ands	r3, r2
    6508:	d002      	beq.n	6510 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    650a:	693b      	ldr	r3, [r7, #16]
    650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    650e:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    6510:	68fb      	ldr	r3, [r7, #12]
    6512:	4a3e      	ldr	r2, [pc, #248]	; (660c <_rtc_interrupt_handler+0x170>)
    6514:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    6516:	e072      	b.n	65fe <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    6518:	2308      	movs	r3, #8
    651a:	18fb      	adds	r3, r7, r3
    651c:	881b      	ldrh	r3, [r3, #0]
    651e:	22ff      	movs	r2, #255	; 0xff
    6520:	4013      	ands	r3, r2
    6522:	d041      	beq.n	65a8 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    6524:	2317      	movs	r3, #23
    6526:	18fb      	adds	r3, r7, r3
    6528:	2200      	movs	r2, #0
    652a:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    652c:	2317      	movs	r3, #23
    652e:	18fb      	adds	r3, r7, r3
    6530:	2200      	movs	r2, #0
    6532:	701a      	strb	r2, [r3, #0]
    6534:	e032      	b.n	659c <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    6536:	2308      	movs	r3, #8
    6538:	18fb      	adds	r3, r7, r3
    653a:	881b      	ldrh	r3, [r3, #0]
    653c:	2217      	movs	r2, #23
    653e:	18ba      	adds	r2, r7, r2
    6540:	7812      	ldrb	r2, [r2, #0]
    6542:	2101      	movs	r1, #1
    6544:	4091      	lsls	r1, r2
    6546:	000a      	movs	r2, r1
    6548:	4013      	ands	r3, r2
    654a:	22ff      	movs	r2, #255	; 0xff
    654c:	4013      	ands	r3, r2
    654e:	d012      	beq.n	6576 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    6550:	230a      	movs	r3, #10
    6552:	18fb      	adds	r3, r7, r3
    6554:	881a      	ldrh	r2, [r3, #0]
    6556:	2317      	movs	r3, #23
    6558:	18fb      	adds	r3, r7, r3
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	411a      	asrs	r2, r3
    655e:	0013      	movs	r3, r2
    6560:	2201      	movs	r2, #1
    6562:	4013      	ands	r3, r2
    6564:	d007      	beq.n	6576 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    6566:	2317      	movs	r3, #23
    6568:	18fb      	adds	r3, r7, r3
    656a:	781a      	ldrb	r2, [r3, #0]
    656c:	693b      	ldr	r3, [r7, #16]
    656e:	3202      	adds	r2, #2
    6570:	0092      	lsls	r2, r2, #2
    6572:	58d3      	ldr	r3, [r2, r3]
    6574:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6576:	2317      	movs	r3, #23
    6578:	18fb      	adds	r3, r7, r3
    657a:	781b      	ldrb	r3, [r3, #0]
    657c:	2201      	movs	r2, #1
    657e:	409a      	lsls	r2, r3
    6580:	0013      	movs	r3, r2
    6582:	b29b      	uxth	r3, r3
    6584:	22ff      	movs	r2, #255	; 0xff
    6586:	4013      	ands	r3, r2
    6588:	b29a      	uxth	r2, r3
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    658e:	2317      	movs	r3, #23
    6590:	18fb      	adds	r3, r7, r3
    6592:	781a      	ldrb	r2, [r3, #0]
    6594:	2317      	movs	r3, #23
    6596:	18fb      	adds	r3, r7, r3
    6598:	3201      	adds	r2, #1
    659a:	701a      	strb	r2, [r3, #0]
    659c:	2317      	movs	r3, #23
    659e:	18fb      	adds	r3, r7, r3
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2b07      	cmp	r3, #7
    65a4:	d9c7      	bls.n	6536 <_rtc_interrupt_handler+0x9a>
}
    65a6:	e02a      	b.n	65fe <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    65a8:	2308      	movs	r3, #8
    65aa:	18fb      	adds	r3, r7, r3
    65ac:	881a      	ldrh	r2, [r3, #0]
    65ae:	2380      	movs	r3, #128	; 0x80
    65b0:	005b      	lsls	r3, r3, #1
    65b2:	4013      	ands	r3, r2
    65b4:	d00e      	beq.n	65d4 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    65b6:	230a      	movs	r3, #10
    65b8:	18fb      	adds	r3, r7, r3
    65ba:	881a      	ldrh	r2, [r3, #0]
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	005b      	lsls	r3, r3, #1
    65c0:	4013      	ands	r3, r2
    65c2:	d002      	beq.n	65ca <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    65c4:	693b      	ldr	r3, [r7, #16]
    65c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65c8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    65ca:	68fb      	ldr	r3, [r7, #12]
    65cc:	2280      	movs	r2, #128	; 0x80
    65ce:	0052      	lsls	r2, r2, #1
    65d0:	819a      	strh	r2, [r3, #12]
}
    65d2:	e014      	b.n	65fe <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    65d4:	2308      	movs	r3, #8
    65d6:	18fb      	adds	r3, r7, r3
    65d8:	881a      	ldrh	r2, [r3, #0]
    65da:	2380      	movs	r3, #128	; 0x80
    65dc:	009b      	lsls	r3, r3, #2
    65de:	4013      	ands	r3, r2
    65e0:	d00d      	beq.n	65fe <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    65e2:	230a      	movs	r3, #10
    65e4:	18fb      	adds	r3, r7, r3
    65e6:	881a      	ldrh	r2, [r3, #0]
    65e8:	2380      	movs	r3, #128	; 0x80
    65ea:	009b      	lsls	r3, r3, #2
    65ec:	4013      	ands	r3, r2
    65ee:	d002      	beq.n	65f6 <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    65f0:	693b      	ldr	r3, [r7, #16]
    65f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    65f4:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    65f6:	68fb      	ldr	r3, [r7, #12]
    65f8:	2280      	movs	r2, #128	; 0x80
    65fa:	0092      	lsls	r2, r2, #2
    65fc:	819a      	strh	r2, [r3, #12]
}
    65fe:	46c0      	nop			; (mov r8, r8)
    6600:	46bd      	mov	sp, r7
    6602:	b006      	add	sp, #24
    6604:	bd80      	pop	{r7, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	20001a7c 	.word	0x20001a7c
    660c:	ffff8000 	.word	0xffff8000

00006610 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6610:	b580      	push	{r7, lr}
    6612:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    6614:	2000      	movs	r0, #0
    6616:	4b02      	ldr	r3, [pc, #8]	; (6620 <RTC_Handler+0x10>)
    6618:	4798      	blx	r3
}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	46bd      	mov	sp, r7
    661e:	bd80      	pop	{r7, pc}
    6620:	0000649d 	.word	0x0000649d

00006624 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    6624:	b580      	push	{r7, lr}
    6626:	b084      	sub	sp, #16
    6628:	af00      	add	r7, sp, #0
    662a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6632:	68fb      	ldr	r3, [r7, #12]
    6634:	69db      	ldr	r3, [r3, #28]
    6636:	2207      	movs	r2, #7
    6638:	4013      	ands	r3, r2
    663a:	1e5a      	subs	r2, r3, #1
    663c:	4193      	sbcs	r3, r2
    663e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    6640:	0018      	movs	r0, r3
    6642:	46bd      	mov	sp, r7
    6644:	b004      	add	sp, #16
    6646:	bd80      	pop	{r7, pc}

00006648 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    6648:	b580      	push	{r7, lr}
    664a:	b082      	sub	sp, #8
    664c:	af00      	add	r7, sp, #0
    664e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    6650:	46c0      	nop			; (mov r8, r8)
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	0018      	movs	r0, r3
    6656:	4b04      	ldr	r3, [pc, #16]	; (6668 <_i2c_master_wait_for_sync+0x20>)
    6658:	4798      	blx	r3
    665a:	1e03      	subs	r3, r0, #0
    665c:	d1f9      	bne.n	6652 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    665e:	46c0      	nop			; (mov r8, r8)
    6660:	46bd      	mov	sp, r7
    6662:	b002      	add	sp, #8
    6664:	bd80      	pop	{r7, pc}
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	00006625 	.word	0x00006625

0000666c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    666c:	b580      	push	{r7, lr}
    666e:	b084      	sub	sp, #16
    6670:	af00      	add	r7, sp, #0
    6672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	011b      	lsls	r3, r3, #4
    6680:	0fdb      	lsrs	r3, r3, #31
    6682:	b2db      	uxtb	r3, r3
    6684:	001a      	movs	r2, r3
    6686:	230b      	movs	r3, #11
    6688:	18fb      	adds	r3, r7, r3
    668a:	1e51      	subs	r1, r2, #1
    668c:	418a      	sbcs	r2, r1
    668e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    6690:	2308      	movs	r3, #8
    6692:	18fb      	adds	r3, r7, r3
    6694:	687a      	ldr	r2, [r7, #4]
    6696:	8b52      	ldrh	r2, [r2, #26]
    6698:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	8b9b      	ldrh	r3, [r3, #28]
    669e:	b29a      	uxth	r2, r3
    66a0:	2308      	movs	r3, #8
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	2108      	movs	r1, #8
    66a6:	1879      	adds	r1, r7, r1
    66a8:	8809      	ldrh	r1, [r1, #0]
    66aa:	1a8a      	subs	r2, r1, r2
    66ac:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	8b9b      	ldrh	r3, [r3, #28]
    66b2:	b29b      	uxth	r3, r3
    66b4:	3b01      	subs	r3, #1
    66b6:	b29a      	uxth	r2, r3
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    66bc:	230b      	movs	r3, #11
    66be:	18fb      	adds	r3, r7, r3
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	2b00      	cmp	r3, #0
    66c4:	d010      	beq.n	66e8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	7adb      	ldrb	r3, [r3, #11]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d01c      	beq.n	6708 <_i2c_master_read+0x9c>
    66ce:	687b      	ldr	r3, [r7, #4]
    66d0:	8b9b      	ldrh	r3, [r3, #28]
    66d2:	b29b      	uxth	r3, r3
    66d4:	2b01      	cmp	r3, #1
    66d6:	d117      	bne.n	6708 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    66d8:	68fb      	ldr	r3, [r7, #12]
    66da:	685b      	ldr	r3, [r3, #4]
    66dc:	2280      	movs	r2, #128	; 0x80
    66de:	02d2      	lsls	r2, r2, #11
    66e0:	431a      	orrs	r2, r3
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	605a      	str	r2, [r3, #4]
    66e6:	e00f      	b.n	6708 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	7adb      	ldrb	r3, [r3, #11]
    66ec:	2b00      	cmp	r3, #0
    66ee:	d00b      	beq.n	6708 <_i2c_master_read+0x9c>
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	8b9b      	ldrh	r3, [r3, #28]
    66f4:	b29b      	uxth	r3, r3
    66f6:	2b00      	cmp	r3, #0
    66f8:	d106      	bne.n	6708 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    66fa:	68fb      	ldr	r3, [r7, #12]
    66fc:	685b      	ldr	r3, [r3, #4]
    66fe:	2280      	movs	r2, #128	; 0x80
    6700:	02d2      	lsls	r2, r2, #11
    6702:	431a      	orrs	r2, r3
    6704:	68fb      	ldr	r3, [r7, #12]
    6706:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	8b9b      	ldrh	r3, [r3, #28]
    670c:	b29b      	uxth	r3, r3
    670e:	2b00      	cmp	r3, #0
    6710:	d10e      	bne.n	6730 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	7a9b      	ldrb	r3, [r3, #10]
    6716:	2b00      	cmp	r3, #0
    6718:	d00a      	beq.n	6730 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	0018      	movs	r0, r3
    671e:	4b0e      	ldr	r3, [pc, #56]	; (6758 <_i2c_master_read+0xec>)
    6720:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6722:	68fb      	ldr	r3, [r7, #12]
    6724:	685b      	ldr	r3, [r3, #4]
    6726:	22c0      	movs	r2, #192	; 0xc0
    6728:	0292      	lsls	r2, r2, #10
    672a:	431a      	orrs	r2, r3
    672c:	68fb      	ldr	r3, [r7, #12]
    672e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	0018      	movs	r0, r3
    6734:	4b08      	ldr	r3, [pc, #32]	; (6758 <_i2c_master_read+0xec>)
    6736:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	6a1a      	ldr	r2, [r3, #32]
    673c:	2308      	movs	r3, #8
    673e:	18fb      	adds	r3, r7, r3
    6740:	881b      	ldrh	r3, [r3, #0]
    6742:	18d3      	adds	r3, r2, r3
    6744:	68fa      	ldr	r2, [r7, #12]
    6746:	2128      	movs	r1, #40	; 0x28
    6748:	5c52      	ldrb	r2, [r2, r1]
    674a:	b2d2      	uxtb	r2, r2
    674c:	701a      	strb	r2, [r3, #0]
}
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	46bd      	mov	sp, r7
    6752:	b004      	add	sp, #16
    6754:	bd80      	pop	{r7, pc}
    6756:	46c0      	nop			; (mov r8, r8)
    6758:	00006649 	.word	0x00006649

0000675c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    675c:	b580      	push	{r7, lr}
    675e:	b084      	sub	sp, #16
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6764:	687b      	ldr	r3, [r7, #4]
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    676a:	68fb      	ldr	r3, [r7, #12]
    676c:	8b5b      	ldrh	r3, [r3, #26]
    676e:	b29b      	uxth	r3, r3
    6770:	001a      	movs	r2, r3
    6772:	2304      	movs	r3, #4
    6774:	4013      	ands	r3, r2
    6776:	d004      	beq.n	6782 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	2225      	movs	r2, #37	; 0x25
    677c:	211e      	movs	r1, #30
    677e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    6780:	e024      	b.n	67cc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    6782:	230a      	movs	r3, #10
    6784:	18fb      	adds	r3, r7, r3
    6786:	687a      	ldr	r2, [r7, #4]
    6788:	8b52      	ldrh	r2, [r2, #26]
    678a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	8b9b      	ldrh	r3, [r3, #28]
    6790:	b29a      	uxth	r2, r3
    6792:	230a      	movs	r3, #10
    6794:	18fb      	adds	r3, r7, r3
    6796:	210a      	movs	r1, #10
    6798:	1879      	adds	r1, r7, r1
    679a:	8809      	ldrh	r1, [r1, #0]
    679c:	1a8a      	subs	r2, r1, r2
    679e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	8b9b      	ldrh	r3, [r3, #28]
    67a4:	b29b      	uxth	r3, r3
    67a6:	3b01      	subs	r3, #1
    67a8:	b29a      	uxth	r2, r3
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	0018      	movs	r0, r3
    67b2:	4b08      	ldr	r3, [pc, #32]	; (67d4 <_i2c_master_write+0x78>)
    67b4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	6a1a      	ldr	r2, [r3, #32]
    67ba:	230a      	movs	r3, #10
    67bc:	18fb      	adds	r3, r7, r3
    67be:	881b      	ldrh	r3, [r3, #0]
    67c0:	18d3      	adds	r3, r2, r3
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	b2d9      	uxtb	r1, r3
    67c6:	68fb      	ldr	r3, [r7, #12]
    67c8:	2228      	movs	r2, #40	; 0x28
    67ca:	5499      	strb	r1, [r3, r2]
}
    67cc:	46bd      	mov	sp, r7
    67ce:	b004      	add	sp, #16
    67d0:	bd80      	pop	{r7, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	00006649 	.word	0x00006649

000067d8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    67d8:	b580      	push	{r7, lr}
    67da:	b084      	sub	sp, #16
    67dc:	af00      	add	r7, sp, #0
    67de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	681b      	ldr	r3, [r3, #0]
    67e4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    67e6:	68fb      	ldr	r3, [r7, #12]
    67e8:	7e1b      	ldrb	r3, [r3, #24]
    67ea:	b2db      	uxtb	r3, r3
    67ec:	001a      	movs	r2, r3
    67ee:	2301      	movs	r3, #1
    67f0:	4013      	ands	r3, r2
    67f2:	d00e      	beq.n	6812 <_i2c_master_async_address_response+0x3a>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    67f4:	68fb      	ldr	r3, [r7, #12]
    67f6:	2201      	movs	r2, #1
    67f8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    67fa:	68fb      	ldr	r3, [r7, #12]
    67fc:	8b5b      	ldrh	r3, [r3, #26]
    67fe:	b29b      	uxth	r3, r3
    6800:	001a      	movs	r2, r3
    6802:	2302      	movs	r3, #2
    6804:	4013      	ands	r3, r2
    6806:	d021      	beq.n	684c <_i2c_master_async_address_response+0x74>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	2225      	movs	r2, #37	; 0x25
    680c:	2141      	movs	r1, #65	; 0x41
    680e:	5499      	strb	r1, [r3, r2]
    6810:	e01c      	b.n	684c <_i2c_master_async_address_response+0x74>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6812:	68fb      	ldr	r3, [r7, #12]
    6814:	8b5b      	ldrh	r3, [r3, #26]
    6816:	b29b      	uxth	r3, r3
    6818:	001a      	movs	r2, r3
    681a:	2304      	movs	r3, #4
    681c:	4013      	ands	r3, r2
    681e:	d015      	beq.n	684c <_i2c_master_async_address_response+0x74>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	2225      	movs	r2, #37	; 0x25
    6824:	2118      	movs	r1, #24
    6826:	5499      	strb	r1, [r3, r2]
		module->buffer_remaining = 0;
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	2200      	movs	r2, #0
    682c:	839a      	strh	r2, [r3, #28]

		if (module->send_stop) {
    682e:	687b      	ldr	r3, [r7, #4]
    6830:	7a9b      	ldrb	r3, [r3, #10]
    6832:	2b00      	cmp	r3, #0
    6834:	d00a      	beq.n	684c <_i2c_master_async_address_response+0x74>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	0018      	movs	r0, r3
    683a:	4b13      	ldr	r3, [pc, #76]	; (6888 <_i2c_master_async_address_response+0xb0>)
    683c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    683e:	68fb      	ldr	r3, [r7, #12]
    6840:	685b      	ldr	r3, [r3, #4]
    6842:	22c0      	movs	r2, #192	; 0xc0
    6844:	0292      	lsls	r2, r2, #10
    6846:	431a      	orrs	r2, r3
    6848:	68fb      	ldr	r3, [r7, #12]
    684a:	605a      	str	r2, [r3, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	8b9b      	ldrh	r3, [r3, #28]
    6850:	b29a      	uxth	r2, r3
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	2225      	movs	r2, #37	; 0x25
    685a:	5c9b      	ldrb	r3, [r3, r2]
    685c:	b2db      	uxtb	r3, r3
    685e:	2b05      	cmp	r3, #5
    6860:	d10e      	bne.n	6880 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	2224      	movs	r2, #36	; 0x24
    6866:	5c9b      	ldrb	r3, [r3, r2]
    6868:	b2db      	uxtb	r3, r3
    686a:	2b00      	cmp	r3, #0
    686c:	d104      	bne.n	6878 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	0018      	movs	r0, r3
    6872:	4b06      	ldr	r3, [pc, #24]	; (688c <_i2c_master_async_address_response+0xb4>)
    6874:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    6876:	e003      	b.n	6880 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	0018      	movs	r0, r3
    687c:	4b04      	ldr	r3, [pc, #16]	; (6890 <_i2c_master_async_address_response+0xb8>)
    687e:	4798      	blx	r3
}
    6880:	46c0      	nop			; (mov r8, r8)
    6882:	46bd      	mov	sp, r7
    6884:	b004      	add	sp, #16
    6886:	bd80      	pop	{r7, pc}
    6888:	00006649 	.word	0x00006649
    688c:	0000675d 	.word	0x0000675d
    6890:	0000666d 	.word	0x0000666d

00006894 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    6894:	b580      	push	{r7, lr}
    6896:	b086      	sub	sp, #24
    6898:	af00      	add	r7, sp, #0
    689a:	0002      	movs	r2, r0
    689c:	1dfb      	adds	r3, r7, #7
    689e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    68a0:	1dfb      	adds	r3, r7, #7
    68a2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    68a4:	4b93      	ldr	r3, [pc, #588]	; (6af4 <_i2c_master_interrupt_handler+0x260>)
    68a6:	0092      	lsls	r2, r2, #2
    68a8:	58d3      	ldr	r3, [r2, r3]
    68aa:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    68ac:	697b      	ldr	r3, [r7, #20]
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    68b2:	693b      	ldr	r3, [r7, #16]
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	011b      	lsls	r3, r3, #4
    68b8:	0fdb      	lsrs	r3, r3, #31
    68ba:	b2db      	uxtb	r3, r3
    68bc:	001a      	movs	r2, r3
    68be:	230f      	movs	r3, #15
    68c0:	18fb      	adds	r3, r7, r3
    68c2:	1e51      	subs	r1, r2, #1
    68c4:	418a      	sbcs	r2, r1
    68c6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    68c8:	230e      	movs	r3, #14
    68ca:	18fb      	adds	r3, r7, r3
    68cc:	697a      	ldr	r2, [r7, #20]
    68ce:	7e52      	ldrb	r2, [r2, #25]
    68d0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    68d2:	697b      	ldr	r3, [r7, #20]
    68d4:	7e1b      	ldrb	r3, [r3, #24]
    68d6:	b2da      	uxtb	r2, r3
    68d8:	230e      	movs	r3, #14
    68da:	18fb      	adds	r3, r7, r3
    68dc:	210e      	movs	r1, #14
    68de:	1879      	adds	r1, r7, r1
    68e0:	7809      	ldrb	r1, [r1, #0]
    68e2:	400a      	ands	r2, r1
    68e4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	8b5b      	ldrh	r3, [r3, #26]
    68ea:	b29b      	uxth	r3, r3
    68ec:	2b00      	cmp	r3, #0
    68ee:	d109      	bne.n	6904 <_i2c_master_interrupt_handler+0x70>
    68f0:	697b      	ldr	r3, [r7, #20]
    68f2:	8b9b      	ldrh	r3, [r3, #28]
    68f4:	b29b      	uxth	r3, r3
    68f6:	2b00      	cmp	r3, #0
    68f8:	d004      	beq.n	6904 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    68fa:	697b      	ldr	r3, [r7, #20]
    68fc:	0018      	movs	r0, r3
    68fe:	4b7e      	ldr	r3, [pc, #504]	; (6af8 <_i2c_master_interrupt_handler+0x264>)
    6900:	4798      	blx	r3
    6902:	e070      	b.n	69e6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	8b5b      	ldrh	r3, [r3, #26]
    6908:	b29b      	uxth	r3, r3
    690a:	2b00      	cmp	r3, #0
    690c:	d039      	beq.n	6982 <_i2c_master_interrupt_handler+0xee>
    690e:	697b      	ldr	r3, [r7, #20]
    6910:	8b9b      	ldrh	r3, [r3, #28]
    6912:	b29b      	uxth	r3, r3
    6914:	2b00      	cmp	r3, #0
    6916:	d134      	bne.n	6982 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    6918:	697b      	ldr	r3, [r7, #20]
    691a:	2225      	movs	r2, #37	; 0x25
    691c:	5c9b      	ldrb	r3, [r3, r2]
    691e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    6920:	2b05      	cmp	r3, #5
    6922:	d12e      	bne.n	6982 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    6924:	697b      	ldr	r3, [r7, #20]
    6926:	2224      	movs	r2, #36	; 0x24
    6928:	5c9b      	ldrb	r3, [r3, r2]
    692a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    692c:	2b00      	cmp	r3, #0
    692e:	d128      	bne.n	6982 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    6930:	693b      	ldr	r3, [r7, #16]
    6932:	2203      	movs	r2, #3
    6934:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    6936:	697b      	ldr	r3, [r7, #20]
    6938:	2200      	movs	r2, #0
    693a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    693c:	697b      	ldr	r3, [r7, #20]
    693e:	2225      	movs	r2, #37	; 0x25
    6940:	2100      	movs	r1, #0
    6942:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	7a9b      	ldrb	r3, [r3, #10]
    6948:	2b00      	cmp	r3, #0
    694a:	d00b      	beq.n	6964 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    694c:	697b      	ldr	r3, [r7, #20]
    694e:	0018      	movs	r0, r3
    6950:	4b6a      	ldr	r3, [pc, #424]	; (6afc <_i2c_master_interrupt_handler+0x268>)
    6952:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6954:	693b      	ldr	r3, [r7, #16]
    6956:	685b      	ldr	r3, [r3, #4]
    6958:	22c0      	movs	r2, #192	; 0xc0
    695a:	0292      	lsls	r2, r2, #10
    695c:	431a      	orrs	r2, r3
    695e:	693b      	ldr	r3, [r7, #16]
    6960:	605a      	str	r2, [r3, #4]
    6962:	e002      	b.n	696a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6964:	693b      	ldr	r3, [r7, #16]
    6966:	2201      	movs	r2, #1
    6968:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    696a:	230e      	movs	r3, #14
    696c:	18fb      	adds	r3, r7, r3
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	2201      	movs	r2, #1
    6972:	4013      	ands	r3, r2
    6974:	d037      	beq.n	69e6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    6976:	697b      	ldr	r3, [r7, #20]
    6978:	68db      	ldr	r3, [r3, #12]
    697a:	697a      	ldr	r2, [r7, #20]
    697c:	0010      	movs	r0, r2
    697e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    6980:	e031      	b.n	69e6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    6982:	697b      	ldr	r3, [r7, #20]
    6984:	8b5b      	ldrh	r3, [r3, #26]
    6986:	b29b      	uxth	r3, r3
    6988:	2b00      	cmp	r3, #0
    698a:	d02c      	beq.n	69e6 <_i2c_master_interrupt_handler+0x152>
    698c:	697b      	ldr	r3, [r7, #20]
    698e:	8b9b      	ldrh	r3, [r3, #28]
    6990:	b29b      	uxth	r3, r3
    6992:	2b00      	cmp	r3, #0
    6994:	d027      	beq.n	69e6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    6996:	693b      	ldr	r3, [r7, #16]
    6998:	8b5b      	ldrh	r3, [r3, #26]
    699a:	b29b      	uxth	r3, r3
    699c:	001a      	movs	r2, r3
    699e:	2320      	movs	r3, #32
    69a0:	4013      	ands	r3, r2
    69a2:	d111      	bne.n	69c8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    69a4:	230f      	movs	r3, #15
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	2201      	movs	r2, #1
    69ac:	4053      	eors	r3, r2
    69ae:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    69b0:	2b00      	cmp	r3, #0
    69b2:	d104      	bne.n	69be <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    69b4:	697b      	ldr	r3, [r7, #20]
    69b6:	8b9b      	ldrh	r3, [r3, #28]
    69b8:	b29b      	uxth	r3, r3
    69ba:	2b01      	cmp	r3, #1
    69bc:	d004      	beq.n	69c8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    69be:	697b      	ldr	r3, [r7, #20]
    69c0:	2225      	movs	r2, #37	; 0x25
    69c2:	2141      	movs	r1, #65	; 0x41
    69c4:	5499      	strb	r1, [r3, r2]
    69c6:	e00e      	b.n	69e6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    69c8:	697b      	ldr	r3, [r7, #20]
    69ca:	2224      	movs	r2, #36	; 0x24
    69cc:	5c9b      	ldrb	r3, [r3, r2]
    69ce:	b2db      	uxtb	r3, r3
    69d0:	2b00      	cmp	r3, #0
    69d2:	d104      	bne.n	69de <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    69d4:	697b      	ldr	r3, [r7, #20]
    69d6:	0018      	movs	r0, r3
    69d8:	4b49      	ldr	r3, [pc, #292]	; (6b00 <_i2c_master_interrupt_handler+0x26c>)
    69da:	4798      	blx	r3
    69dc:	e003      	b.n	69e6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    69de:	697b      	ldr	r3, [r7, #20]
    69e0:	0018      	movs	r0, r3
    69e2:	4b48      	ldr	r3, [pc, #288]	; (6b04 <_i2c_master_interrupt_handler+0x270>)
    69e4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    69e6:	697b      	ldr	r3, [r7, #20]
    69e8:	8b5b      	ldrh	r3, [r3, #26]
    69ea:	b29b      	uxth	r3, r3
    69ec:	2b00      	cmp	r3, #0
    69ee:	d047      	beq.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
    69f0:	697b      	ldr	r3, [r7, #20]
    69f2:	8b9b      	ldrh	r3, [r3, #28]
    69f4:	b29b      	uxth	r3, r3
    69f6:	2b00      	cmp	r3, #0
    69f8:	d142      	bne.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    69fa:	697b      	ldr	r3, [r7, #20]
    69fc:	2225      	movs	r2, #37	; 0x25
    69fe:	5c9b      	ldrb	r3, [r3, r2]
    6a00:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    6a02:	2b05      	cmp	r3, #5
    6a04:	d13c      	bne.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    6a06:	697b      	ldr	r3, [r7, #20]
    6a08:	2224      	movs	r2, #36	; 0x24
    6a0a:	5c9b      	ldrb	r3, [r3, r2]
    6a0c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    6a0e:	2b01      	cmp	r3, #1
    6a10:	d136      	bne.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6a12:	693b      	ldr	r3, [r7, #16]
    6a14:	7e1b      	ldrb	r3, [r3, #24]
    6a16:	b2db      	uxtb	r3, r3
    6a18:	001a      	movs	r2, r3
    6a1a:	2302      	movs	r3, #2
    6a1c:	4013      	ands	r3, r2
    6a1e:	d002      	beq.n	6a26 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6a20:	693b      	ldr	r3, [r7, #16]
    6a22:	2202      	movs	r2, #2
    6a24:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    6a26:	693b      	ldr	r3, [r7, #16]
    6a28:	2203      	movs	r2, #3
    6a2a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    6a2c:	697b      	ldr	r3, [r7, #20]
    6a2e:	2200      	movs	r2, #0
    6a30:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    6a32:	697b      	ldr	r3, [r7, #20]
    6a34:	2225      	movs	r2, #37	; 0x25
    6a36:	2100      	movs	r1, #0
    6a38:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    6a3a:	230e      	movs	r3, #14
    6a3c:	18fb      	adds	r3, r7, r3
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	2202      	movs	r2, #2
    6a42:	4013      	ands	r3, r2
    6a44:	d00b      	beq.n	6a5e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    6a46:	697b      	ldr	r3, [r7, #20]
    6a48:	2224      	movs	r2, #36	; 0x24
    6a4a:	5c9b      	ldrb	r3, [r3, r2]
    6a4c:	b2db      	uxtb	r3, r3
    6a4e:	2b01      	cmp	r3, #1
    6a50:	d105      	bne.n	6a5e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    6a52:	697b      	ldr	r3, [r7, #20]
    6a54:	691b      	ldr	r3, [r3, #16]
    6a56:	697a      	ldr	r2, [r7, #20]
    6a58:	0010      	movs	r0, r2
    6a5a:	4798      	blx	r3
    6a5c:	e010      	b.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    6a5e:	230e      	movs	r3, #14
    6a60:	18fb      	adds	r3, r7, r3
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	2201      	movs	r2, #1
    6a66:	4013      	ands	r3, r2
    6a68:	d00a      	beq.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    6a6a:	697b      	ldr	r3, [r7, #20]
    6a6c:	2224      	movs	r2, #36	; 0x24
    6a6e:	5c9b      	ldrb	r3, [r3, r2]
    6a70:	b2db      	uxtb	r3, r3
    6a72:	2b00      	cmp	r3, #0
    6a74:	d104      	bne.n	6a80 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    6a76:	697b      	ldr	r3, [r7, #20]
    6a78:	68db      	ldr	r3, [r3, #12]
    6a7a:	697a      	ldr	r2, [r7, #20]
    6a7c:	0010      	movs	r0, r2
    6a7e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    6a80:	697b      	ldr	r3, [r7, #20]
    6a82:	2225      	movs	r2, #37	; 0x25
    6a84:	5c9b      	ldrb	r3, [r3, r2]
    6a86:	b2db      	uxtb	r3, r3
    6a88:	2b05      	cmp	r3, #5
    6a8a:	d02e      	beq.n	6aea <_i2c_master_interrupt_handler+0x256>
    6a8c:	697b      	ldr	r3, [r7, #20]
    6a8e:	2225      	movs	r2, #37	; 0x25
    6a90:	5c9b      	ldrb	r3, [r3, r2]
    6a92:	b2db      	uxtb	r3, r3
    6a94:	2b00      	cmp	r3, #0
    6a96:	d028      	beq.n	6aea <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    6a98:	693b      	ldr	r3, [r7, #16]
    6a9a:	2203      	movs	r2, #3
    6a9c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    6a9e:	697b      	ldr	r3, [r7, #20]
    6aa0:	2200      	movs	r2, #0
    6aa2:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    6aa4:	697b      	ldr	r3, [r7, #20]
    6aa6:	2200      	movs	r2, #0
    6aa8:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    6aaa:	697b      	ldr	r3, [r7, #20]
    6aac:	2225      	movs	r2, #37	; 0x25
    6aae:	5c9b      	ldrb	r3, [r3, r2]
    6ab0:	b2db      	uxtb	r3, r3
    6ab2:	2b41      	cmp	r3, #65	; 0x41
    6ab4:	d00e      	beq.n	6ad4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    6ab6:	697b      	ldr	r3, [r7, #20]
    6ab8:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    6aba:	2b00      	cmp	r3, #0
    6abc:	d00a      	beq.n	6ad4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    6abe:	697b      	ldr	r3, [r7, #20]
    6ac0:	0018      	movs	r0, r3
    6ac2:	4b0e      	ldr	r3, [pc, #56]	; (6afc <_i2c_master_interrupt_handler+0x268>)
    6ac4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    6ac6:	693b      	ldr	r3, [r7, #16]
    6ac8:	685b      	ldr	r3, [r3, #4]
    6aca:	22e0      	movs	r2, #224	; 0xe0
    6acc:	02d2      	lsls	r2, r2, #11
    6ace:	431a      	orrs	r2, r3
    6ad0:	693b      	ldr	r3, [r7, #16]
    6ad2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    6ad4:	230e      	movs	r3, #14
    6ad6:	18fb      	adds	r3, r7, r3
    6ad8:	781b      	ldrb	r3, [r3, #0]
    6ada:	2204      	movs	r2, #4
    6adc:	4013      	ands	r3, r2
    6ade:	d004      	beq.n	6aea <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    6ae0:	697b      	ldr	r3, [r7, #20]
    6ae2:	695b      	ldr	r3, [r3, #20]
    6ae4:	697a      	ldr	r2, [r7, #20]
    6ae6:	0010      	movs	r0, r2
    6ae8:	4798      	blx	r3
		}
	}
}
    6aea:	46c0      	nop			; (mov r8, r8)
    6aec:	46bd      	mov	sp, r7
    6aee:	b006      	add	sp, #24
    6af0:	bd80      	pop	{r7, pc}
    6af2:	46c0      	nop			; (mov r8, r8)
    6af4:	200024c8 	.word	0x200024c8
    6af8:	000067d9 	.word	0x000067d9
    6afc:	00006649 	.word	0x00006649
    6b00:	0000675d 	.word	0x0000675d
    6b04:	0000666d 	.word	0x0000666d

00006b08 <system_apb_clock_set_mask>:
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b082      	sub	sp, #8
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	0002      	movs	r2, r0
    6b10:	6039      	str	r1, [r7, #0]
    6b12:	1dfb      	adds	r3, r7, #7
    6b14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6b16:	1dfb      	adds	r3, r7, #7
    6b18:	781b      	ldrb	r3, [r3, #0]
    6b1a:	2b04      	cmp	r3, #4
    6b1c:	d827      	bhi.n	6b6e <system_apb_clock_set_mask+0x66>
    6b1e:	009a      	lsls	r2, r3, #2
    6b20:	4b16      	ldr	r3, [pc, #88]	; (6b7c <system_apb_clock_set_mask+0x74>)
    6b22:	18d3      	adds	r3, r2, r3
    6b24:	681b      	ldr	r3, [r3, #0]
    6b26:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6b28:	4b15      	ldr	r3, [pc, #84]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b2a:	4a15      	ldr	r2, [pc, #84]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b2c:	6951      	ldr	r1, [r2, #20]
    6b2e:	683a      	ldr	r2, [r7, #0]
    6b30:	430a      	orrs	r2, r1
    6b32:	615a      	str	r2, [r3, #20]
			break;
    6b34:	e01d      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    6b36:	4b12      	ldr	r3, [pc, #72]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b38:	4a11      	ldr	r2, [pc, #68]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b3a:	6991      	ldr	r1, [r2, #24]
    6b3c:	683a      	ldr	r2, [r7, #0]
    6b3e:	430a      	orrs	r2, r1
    6b40:	619a      	str	r2, [r3, #24]
			break;
    6b42:	e016      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    6b44:	4b0e      	ldr	r3, [pc, #56]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b46:	4a0e      	ldr	r2, [pc, #56]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b48:	69d1      	ldr	r1, [r2, #28]
    6b4a:	683a      	ldr	r2, [r7, #0]
    6b4c:	430a      	orrs	r2, r1
    6b4e:	61da      	str	r2, [r3, #28]
			break;
    6b50:	e00f      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    6b52:	4b0b      	ldr	r3, [pc, #44]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b54:	4a0a      	ldr	r2, [pc, #40]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b56:	6a11      	ldr	r1, [r2, #32]
    6b58:	683a      	ldr	r2, [r7, #0]
    6b5a:	430a      	orrs	r2, r1
    6b5c:	621a      	str	r2, [r3, #32]
			break;
    6b5e:	e008      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    6b60:	4b07      	ldr	r3, [pc, #28]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b62:	4a07      	ldr	r2, [pc, #28]	; (6b80 <system_apb_clock_set_mask+0x78>)
    6b64:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6b66:	683a      	ldr	r2, [r7, #0]
    6b68:	430a      	orrs	r2, r1
    6b6a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    6b6c:	e001      	b.n	6b72 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    6b6e:	2317      	movs	r3, #23
    6b70:	e000      	b.n	6b74 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    6b72:	2300      	movs	r3, #0
}
    6b74:	0018      	movs	r0, r3
    6b76:	46bd      	mov	sp, r7
    6b78:	b002      	add	sp, #8
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	0001e1e0 	.word	0x0001e1e0
    6b80:	40000400 	.word	0x40000400

00006b84 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    6b84:	b580      	push	{r7, lr}
    6b86:	b082      	sub	sp, #8
    6b88:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6b8a:	4b06      	ldr	r3, [pc, #24]	; (6ba4 <wdt_is_syncing+0x20>)
    6b8c:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	689b      	ldr	r3, [r3, #8]
    6b92:	2b00      	cmp	r3, #0
    6b94:	d001      	beq.n	6b9a <wdt_is_syncing+0x16>
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
#endif
		return true;
    6b96:	2301      	movs	r3, #1
    6b98:	e000      	b.n	6b9c <wdt_is_syncing+0x18>
	}

	return false;
    6b9a:	2300      	movs	r3, #0
}
    6b9c:	0018      	movs	r0, r3
    6b9e:	46bd      	mov	sp, r7
    6ba0:	b002      	add	sp, #8
    6ba2:	bd80      	pop	{r7, pc}
    6ba4:	40001c00 	.word	0x40001c00

00006ba8 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b082      	sub	sp, #8
    6bac:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6bae:	4b07      	ldr	r3, [pc, #28]	; (6bcc <wdt_is_locked+0x24>)
    6bb0:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	b2db      	uxtb	r3, r3
    6bb8:	001a      	movs	r2, r3
    6bba:	2380      	movs	r3, #128	; 0x80
    6bbc:	4013      	ands	r3, r2
    6bbe:	1e5a      	subs	r2, r3, #1
    6bc0:	4193      	sbcs	r3, r2
    6bc2:	b2db      	uxtb	r3, r3
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
#endif
}
    6bc4:	0018      	movs	r0, r3
    6bc6:	46bd      	mov	sp, r7
    6bc8:	b002      	add	sp, #8
    6bca:	bd80      	pop	{r7, pc}
    6bcc:	40001c00 	.word	0x40001c00

00006bd0 <wdt_set_config>:
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    6bd0:	b580      	push	{r7, lr}
    6bd2:	b084      	sub	sp, #16
    6bd4:	af00      	add	r7, sp, #0
    6bd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    6bd8:	4b47      	ldr	r3, [pc, #284]	; (6cf8 <wdt_set_config+0x128>)
    6bda:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_WDT);
    6bdc:	2180      	movs	r1, #128	; 0x80
    6bde:	2000      	movs	r0, #0
    6be0:	4b46      	ldr	r3, [pc, #280]	; (6cfc <wdt_set_config+0x12c>)
    6be2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    6be4:	4b46      	ldr	r3, [pc, #280]	; (6d00 <wdt_set_config+0x130>)
    6be6:	4798      	blx	r3
    6be8:	1e03      	subs	r3, r0, #0
    6bea:	d001      	beq.n	6bf0 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    6bec:	2310      	movs	r3, #16
    6bee:	e07e      	b.n	6cee <wdt_set_config+0x11e>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	789b      	ldrb	r3, [r3, #2]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d101      	bne.n	6bfc <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    6bf8:	2317      	movs	r3, #23
    6bfa:	e078      	b.n	6cee <wdt_set_config+0x11e>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    6bfc:	687b      	ldr	r3, [r7, #4]
    6bfe:	789a      	ldrb	r2, [r3, #2]
    6c00:	687b      	ldr	r3, [r7, #4]
    6c02:	78db      	ldrb	r3, [r3, #3]
    6c04:	429a      	cmp	r2, r3
    6c06:	d305      	bcc.n	6c14 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	789a      	ldrb	r2, [r3, #2]
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	791b      	ldrb	r3, [r3, #4]
	if ((config->timeout_period < config->window_period) ||
    6c10:	429a      	cmp	r2, r3
    6c12:	d201      	bcs.n	6c18 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    6c14:	2317      	movs	r3, #23
    6c16:	e06a      	b.n	6cee <wdt_set_config+0x11e>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    6c18:	68bb      	ldr	r3, [r7, #8]
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	b2db      	uxtb	r3, r3
    6c1e:	2202      	movs	r2, #2
    6c20:	4393      	bics	r3, r2
    6c22:	b2da      	uxtb	r2, r3
    6c24:	68bb      	ldr	r3, [r7, #8]
    6c26:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    6c28:	46c0      	nop			; (mov r8, r8)
    6c2a:	4b36      	ldr	r3, [pc, #216]	; (6d04 <wdt_set_config+0x134>)
    6c2c:	4798      	blx	r3
    6c2e:	1e03      	subs	r3, r0, #0
    6c30:	d1fb      	bne.n	6c2a <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	785b      	ldrb	r3, [r3, #1]
    6c36:	2201      	movs	r2, #1
    6c38:	4053      	eors	r3, r2
    6c3a:	b2db      	uxtb	r3, r3
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d001      	beq.n	6c44 <wdt_set_config+0x74>
		return STATUS_OK;
    6c40:	2300      	movs	r3, #0
    6c42:	e054      	b.n	6cee <wdt_set_config+0x11e>
	}

	uint32_t new_config = 0;
    6c44:	2300      	movs	r3, #0
    6c46:	60fb      	str	r3, [r7, #12]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	789b      	ldrb	r3, [r3, #2]
    6c4c:	3b01      	subs	r3, #1
    6c4e:	001a      	movs	r2, r3
    6c50:	68fb      	ldr	r3, [r7, #12]
    6c52:	4313      	orrs	r3, r2
    6c54:	60fb      	str	r3, [r7, #12]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	78db      	ldrb	r3, [r3, #3]
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d010      	beq.n	6c80 <wdt_set_config+0xb0>
		WDT_module->CTRLA.reg |= WDT_CTRLA_WEN;
    6c5e:	68bb      	ldr	r3, [r7, #8]
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	b2db      	uxtb	r3, r3
    6c64:	2204      	movs	r2, #4
    6c66:	4313      	orrs	r3, r2
    6c68:	b2da      	uxtb	r2, r3
    6c6a:	68bb      	ldr	r3, [r7, #8]
    6c6c:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	78db      	ldrb	r3, [r3, #3]
    6c72:	3b01      	subs	r3, #1
    6c74:	011b      	lsls	r3, r3, #4
    6c76:	001a      	movs	r2, r3
    6c78:	68fb      	ldr	r3, [r7, #12]
    6c7a:	4313      	orrs	r3, r2
    6c7c:	60fb      	str	r3, [r7, #12]
    6c7e:	e007      	b.n	6c90 <wdt_set_config+0xc0>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRLA.reg &= ~WDT_CTRLA_WEN;
    6c80:	68bb      	ldr	r3, [r7, #8]
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	b2db      	uxtb	r3, r3
    6c86:	2204      	movs	r2, #4
    6c88:	4393      	bics	r3, r2
    6c8a:	b2da      	uxtb	r2, r3
    6c8c:	68bb      	ldr	r3, [r7, #8]
    6c8e:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    6c90:	46c0      	nop			; (mov r8, r8)
    6c92:	4b1c      	ldr	r3, [pc, #112]	; (6d04 <wdt_set_config+0x134>)
    6c94:	4798      	blx	r3
    6c96:	1e03      	subs	r3, r0, #0
    6c98:	d1fb      	bne.n	6c92 <wdt_set_config+0xc2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    6c9a:	68fb      	ldr	r3, [r7, #12]
    6c9c:	b2da      	uxtb	r2, r3
    6c9e:	68bb      	ldr	r3, [r7, #8]
    6ca0:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	791b      	ldrb	r3, [r3, #4]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d005      	beq.n	6cb6 <wdt_set_config+0xe6>
		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	791b      	ldrb	r3, [r3, #4]
    6cae:	3b01      	subs	r3, #1
    6cb0:	b2da      	uxtb	r2, r3
    6cb2:	68bb      	ldr	r3, [r7, #8]
    6cb4:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	2b00      	cmp	r3, #0
    6cbc:	d009      	beq.n	6cd2 <wdt_set_config+0x102>
		WDT_module->CTRLA.reg |= WDT_CTRLA_ALWAYSON;
    6cbe:	68bb      	ldr	r3, [r7, #8]
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	b2db      	uxtb	r3, r3
    6cc4:	2280      	movs	r2, #128	; 0x80
    6cc6:	4252      	negs	r2, r2
    6cc8:	4313      	orrs	r3, r2
    6cca:	b2da      	uxtb	r2, r3
    6ccc:	68bb      	ldr	r3, [r7, #8]
    6cce:	701a      	strb	r2, [r3, #0]
    6cd0:	e007      	b.n	6ce2 <wdt_set_config+0x112>
	} else {
		WDT_module->CTRLA.reg |= WDT_CTRLA_ENABLE;
    6cd2:	68bb      	ldr	r3, [r7, #8]
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	b2db      	uxtb	r3, r3
    6cd8:	2202      	movs	r2, #2
    6cda:	4313      	orrs	r3, r2
    6cdc:	b2da      	uxtb	r2, r3
    6cde:	68bb      	ldr	r3, [r7, #8]
    6ce0:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    6ce2:	46c0      	nop			; (mov r8, r8)
    6ce4:	4b07      	ldr	r3, [pc, #28]	; (6d04 <wdt_set_config+0x134>)
    6ce6:	4798      	blx	r3
    6ce8:	1e03      	subs	r3, r0, #0
    6cea:	d1fb      	bne.n	6ce4 <wdt_set_config+0x114>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    6cec:	2300      	movs	r3, #0
}
    6cee:	0018      	movs	r0, r3
    6cf0:	46bd      	mov	sp, r7
    6cf2:	b004      	add	sp, #16
    6cf4:	bd80      	pop	{r7, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)
    6cf8:	40001c00 	.word	0x40001c00
    6cfc:	00006b09 	.word	0x00006b09
    6d00:	00006ba9 	.word	0x00006ba9
    6d04:	00006b85 	.word	0x00006b85

00006d08 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b082      	sub	sp, #8
    6d0c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6d0e:	4b07      	ldr	r3, [pc, #28]	; (6d2c <wdt_reset_count+0x24>)
    6d10:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	22a5      	movs	r2, #165	; 0xa5
    6d16:	731a      	strb	r2, [r3, #12]

	while (wdt_is_syncing()) {
    6d18:	46c0      	nop			; (mov r8, r8)
    6d1a:	4b05      	ldr	r3, [pc, #20]	; (6d30 <wdt_reset_count+0x28>)
    6d1c:	4798      	blx	r3
    6d1e:	1e03      	subs	r3, r0, #0
    6d20:	d1fb      	bne.n	6d1a <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6d22:	46c0      	nop			; (mov r8, r8)
    6d24:	46bd      	mov	sp, r7
    6d26:	b002      	add	sp, #8
    6d28:	bd80      	pop	{r7, pc}
    6d2a:	46c0      	nop			; (mov r8, r8)
    6d2c:	40001c00 	.word	0x40001c00
    6d30:	00006b85 	.word	0x00006b85

00006d34 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    6d34:	b580      	push	{r7, lr}
    6d36:	b082      	sub	sp, #8
    6d38:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6d3a:	4b04      	ldr	r3, [pc, #16]	; (6d4c <wdt_clear_early_warning+0x18>)
    6d3c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	2201      	movs	r2, #1
    6d42:	719a      	strb	r2, [r3, #6]
}
    6d44:	46c0      	nop			; (mov r8, r8)
    6d46:	46bd      	mov	sp, r7
    6d48:	b002      	add	sp, #8
    6d4a:	bd80      	pop	{r7, pc}
    6d4c:	40001c00 	.word	0x40001c00

00006d50 <system_interrupt_enable>:
{
    6d50:	b580      	push	{r7, lr}
    6d52:	b082      	sub	sp, #8
    6d54:	af00      	add	r7, sp, #0
    6d56:	0002      	movs	r2, r0
    6d58:	1dfb      	adds	r3, r7, #7
    6d5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6d5c:	4b06      	ldr	r3, [pc, #24]	; (6d78 <system_interrupt_enable+0x28>)
    6d5e:	1dfa      	adds	r2, r7, #7
    6d60:	7812      	ldrb	r2, [r2, #0]
    6d62:	0011      	movs	r1, r2
    6d64:	221f      	movs	r2, #31
    6d66:	400a      	ands	r2, r1
    6d68:	2101      	movs	r1, #1
    6d6a:	4091      	lsls	r1, r2
    6d6c:	000a      	movs	r2, r1
    6d6e:	601a      	str	r2, [r3, #0]
}
    6d70:	46c0      	nop			; (mov r8, r8)
    6d72:	46bd      	mov	sp, r7
    6d74:	b002      	add	sp, #8
    6d76:	bd80      	pop	{r7, pc}
    6d78:	e000e100 	.word	0xe000e100

00006d7c <wdt_register_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_register_callback(
		const wdt_callback_t callback,
		const enum wdt_callback type)
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	b082      	sub	sp, #8
    6d80:	af00      	add	r7, sp, #0
    6d82:	6078      	str	r0, [r7, #4]
    6d84:	000a      	movs	r2, r1
    6d86:	1cfb      	adds	r3, r7, #3
    6d88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
    6d8a:	1cfb      	adds	r3, r7, #3
    6d8c:	781b      	ldrb	r3, [r3, #0]
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d104      	bne.n	6d9c <wdt_register_callback+0x20>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
    6d92:	4b05      	ldr	r3, [pc, #20]	; (6da8 <wdt_register_callback+0x2c>)
    6d94:	687a      	ldr	r2, [r7, #4]
    6d96:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
    6d98:	2300      	movs	r3, #0
    6d9a:	e000      	b.n	6d9e <wdt_register_callback+0x22>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6d9c:	2317      	movs	r3, #23
	}
}
    6d9e:	0018      	movs	r0, r3
    6da0:	46bd      	mov	sp, r7
    6da2:	b002      	add	sp, #8
    6da4:	bd80      	pop	{r7, pc}
    6da6:	46c0      	nop			; (mov r8, r8)
    6da8:	20001a80 	.word	0x20001a80

00006dac <wdt_enable_callback>:
 * \retval STATUS_OK               The callback was enabled successfully
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
    6dac:	b580      	push	{r7, lr}
    6dae:	b084      	sub	sp, #16
    6db0:	af00      	add	r7, sp, #0
    6db2:	0002      	movs	r2, r0
    6db4:	1dfb      	adds	r3, r7, #7
    6db6:	701a      	strb	r2, [r3, #0]
	Wdt *const WDT_module = WDT;
    6db8:	4b09      	ldr	r3, [pc, #36]	; (6de0 <wdt_enable_callback+0x34>)
    6dba:	60fb      	str	r3, [r7, #12]

	switch (type)
    6dbc:	1dfb      	adds	r3, r7, #7
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d107      	bne.n	6dd4 <wdt_enable_callback+0x28>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
    6dc4:	68fb      	ldr	r3, [r7, #12]
    6dc6:	2201      	movs	r2, #1
    6dc8:	715a      	strb	r2, [r3, #5]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
    6dca:	2001      	movs	r0, #1
    6dcc:	4b05      	ldr	r3, [pc, #20]	; (6de4 <wdt_enable_callback+0x38>)
    6dce:	4798      	blx	r3
		return STATUS_OK;
    6dd0:	2300      	movs	r3, #0
    6dd2:	e000      	b.n	6dd6 <wdt_enable_callback+0x2a>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6dd4:	2317      	movs	r3, #23
	}
}
    6dd6:	0018      	movs	r0, r3
    6dd8:	46bd      	mov	sp, r7
    6dda:	b004      	add	sp, #16
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	40001c00 	.word	0x40001c00
    6de4:	00006d51 	.word	0x00006d51

00006de8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    6de8:	b580      	push	{r7, lr}
    6dea:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    6dec:	4b05      	ldr	r3, [pc, #20]	; (6e04 <WDT_Handler+0x1c>)
    6dee:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    6df0:	4b05      	ldr	r3, [pc, #20]	; (6e08 <WDT_Handler+0x20>)
    6df2:	681b      	ldr	r3, [r3, #0]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d002      	beq.n	6dfe <WDT_Handler+0x16>
		wdt_early_warning_callback();
    6df8:	4b03      	ldr	r3, [pc, #12]	; (6e08 <WDT_Handler+0x20>)
    6dfa:	681b      	ldr	r3, [r3, #0]
    6dfc:	4798      	blx	r3
	}
}
    6dfe:	46c0      	nop			; (mov r8, r8)
    6e00:	46bd      	mov	sp, r7
    6e02:	bd80      	pop	{r7, pc}
    6e04:	00006d35 	.word	0x00006d35
    6e08:	20001a80 	.word	0x20001a80

00006e0c <pahoDisconnectHandler>:
	}

	((iot_message_handler)(md->applicationHandler))(params);
}

void pahoDisconnectHandler(void) {
    6e0c:	b580      	push	{r7, lr}
    6e0e:	af00      	add	r7, sp, #0
	if(NULL != clientDisconnectHandler) {
    6e10:	4b04      	ldr	r3, [pc, #16]	; (6e24 <pahoDisconnectHandler+0x18>)
    6e12:	681b      	ldr	r3, [r3, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d002      	beq.n	6e1e <pahoDisconnectHandler+0x12>
		clientDisconnectHandler();
    6e18:	4b02      	ldr	r3, [pc, #8]	; (6e24 <pahoDisconnectHandler+0x18>)
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	4798      	blx	r3
	}
}
    6e1e:	46c0      	nop			; (mov r8, r8)
    6e20:	46bd      	mov	sp, r7
    6e22:	bd80      	pop	{r7, pc}
    6e24:	200007fc 	.word	0x200007fc

00006e28 <aws_iot_mqtt_connect>:

static bool isPowerCycle = true;

IoT_Error_t aws_iot_mqtt_connect(MQTTConnectParams *pParams) {
    6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2a:	b0a7      	sub	sp, #156	; 0x9c
    6e2c:	af06      	add	r7, sp, #24
    6e2e:	6078      	str	r0, [r7, #4]
	IoT_Error_t rc = NONE_ERROR;
    6e30:	237f      	movs	r3, #127	; 0x7f
    6e32:	18fb      	adds	r3, r7, r3
    6e34:	2200      	movs	r2, #0
    6e36:	701a      	strb	r2, [r3, #0]
	MQTTReturnCode pahoRc = SUCCESS;
    6e38:	237e      	movs	r3, #126	; 0x7e
    6e3a:	18fb      	adds	r3, r7, r3
    6e3c:	2200      	movs	r2, #0
    6e3e:	701a      	strb	r2, [r3, #0]

	if(NULL == pParams || NULL == pParams->pClientID || NULL == pParams->pHostURL) {
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	2b00      	cmp	r3, #0
    6e44:	d007      	beq.n	6e56 <aws_iot_mqtt_connect+0x2e>
    6e46:	687b      	ldr	r3, [r7, #4]
    6e48:	699b      	ldr	r3, [r3, #24]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d003      	beq.n	6e56 <aws_iot_mqtt_connect+0x2e>
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	685b      	ldr	r3, [r3, #4]
    6e52:	2b00      	cmp	r3, #0
    6e54:	d102      	bne.n	6e5c <aws_iot_mqtt_connect+0x34>
		return NULL_VALUE_ERROR;
    6e56:	2302      	movs	r3, #2
    6e58:	425b      	negs	r3, r3
    6e5a:	e0dd      	b.n	7018 <aws_iot_mqtt_connect+0x1f0>
	}

	TLSConnectParams TLSParams;
	TLSParams.DestinationPort = pParams->port;
    6e5c:	687b      	ldr	r3, [r7, #4]
    6e5e:	891b      	ldrh	r3, [r3, #8]
    6e60:	001a      	movs	r2, r3
    6e62:	2360      	movs	r3, #96	; 0x60
    6e64:	18fb      	adds	r3, r7, r3
    6e66:	611a      	str	r2, [r3, #16]
	TLSParams.pDestinationURL = pParams->pHostURL;
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	685a      	ldr	r2, [r3, #4]
    6e6c:	2360      	movs	r3, #96	; 0x60
    6e6e:	18fb      	adds	r3, r7, r3
    6e70:	60da      	str	r2, [r3, #12]
	TLSParams.pDeviceCertLocation = pParams->pDeviceCertLocation;
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	691a      	ldr	r2, [r3, #16]
    6e76:	2360      	movs	r3, #96	; 0x60
    6e78:	18fb      	adds	r3, r7, r3
    6e7a:	605a      	str	r2, [r3, #4]
	TLSParams.pDevicePrivateKeyLocation = pParams->pDevicePrivateKeyLocation;
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	695a      	ldr	r2, [r3, #20]
    6e80:	2360      	movs	r3, #96	; 0x60
    6e82:	18fb      	adds	r3, r7, r3
    6e84:	609a      	str	r2, [r3, #8]
	TLSParams.pRootCALocation = pParams->pRootCALocation;
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	68da      	ldr	r2, [r3, #12]
    6e8a:	2360      	movs	r3, #96	; 0x60
    6e8c:	18fb      	adds	r3, r7, r3
    6e8e:	601a      	str	r2, [r3, #0]
	TLSParams.timeout_ms = pParams->tlsHandshakeTimeout_ms;
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    6e94:	2360      	movs	r3, #96	; 0x60
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	615a      	str	r2, [r3, #20]
	TLSParams.ServerVerificationFlag = pParams->isSSLHostnameVerify;
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2240      	movs	r2, #64	; 0x40
    6e9e:	5c9b      	ldrb	r3, [r3, r2]
    6ea0:	001a      	movs	r2, r3
    6ea2:	2360      	movs	r3, #96	; 0x60
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	761a      	strb	r2, [r3, #24]

	// This implementation assumes you are not going to switch between cleansession 1 to 0
	// As we don't have a default subscription handler support in the MQTT client every time a device power cycles it has to re-subscribe to let the MQTT client to pass the message up to the application callback.
	// The default message handler will be implemented in the future revisions.
	if(pParams->isCleansession || isPowerCycle){
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	2228      	movs	r2, #40	; 0x28
    6eac:	5c9b      	ldrb	r3, [r3, r2]
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d103      	bne.n	6eba <aws_iot_mqtt_connect+0x92>
    6eb2:	4b5b      	ldr	r3, [pc, #364]	; (7020 <aws_iot_mqtt_connect+0x1f8>)
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d026      	beq.n	6f08 <aws_iot_mqtt_connect+0xe0>
		pahoRc = MQTTClient(&c, (unsigned int)(pParams->mqttCommandTimeout_ms), writebuf,
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	781b      	ldrb	r3, [r3, #0]
    6ec2:	227e      	movs	r2, #126	; 0x7e
    6ec4:	18bc      	adds	r4, r7, r2
    6ec6:	2280      	movs	r2, #128	; 0x80
    6ec8:	00d6      	lsls	r6, r2, #3
    6eca:	4d56      	ldr	r5, [pc, #344]	; (7024 <aws_iot_mqtt_connect+0x1fc>)
    6ecc:	4856      	ldr	r0, [pc, #344]	; (7028 <aws_iot_mqtt_connect+0x200>)
    6ece:	2260      	movs	r2, #96	; 0x60
    6ed0:	18ba      	adds	r2, r7, r2
    6ed2:	9204      	str	r2, [sp, #16]
    6ed4:	4a55      	ldr	r2, [pc, #340]	; (702c <aws_iot_mqtt_connect+0x204>)
    6ed6:	9203      	str	r2, [sp, #12]
    6ed8:	9302      	str	r3, [sp, #8]
    6eda:	2380      	movs	r3, #128	; 0x80
    6edc:	00db      	lsls	r3, r3, #3
    6ede:	9301      	str	r3, [sp, #4]
    6ee0:	4b53      	ldr	r3, [pc, #332]	; (7030 <aws_iot_mqtt_connect+0x208>)
    6ee2:	9300      	str	r3, [sp, #0]
    6ee4:	0033      	movs	r3, r6
    6ee6:	002a      	movs	r2, r5
    6ee8:	4d52      	ldr	r5, [pc, #328]	; (7034 <aws_iot_mqtt_connect+0x20c>)
    6eea:	47a8      	blx	r5
    6eec:	0003      	movs	r3, r0
    6eee:	7023      	strb	r3, [r4, #0]
				   AWS_IOT_MQTT_TX_BUF_LEN, readbuf, AWS_IOT_MQTT_RX_BUF_LEN,
				   pParams->enableAutoReconnect, iot_tls_init, &TLSParams);
		if(SUCCESS != pahoRc) {
    6ef0:	237e      	movs	r3, #126	; 0x7e
    6ef2:	18fb      	adds	r3, r7, r3
    6ef4:	781b      	ldrb	r3, [r3, #0]
    6ef6:	b25b      	sxtb	r3, r3
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d002      	beq.n	6f02 <aws_iot_mqtt_connect+0xda>
			return CONNECTION_ERROR;
    6efc:	2303      	movs	r3, #3
    6efe:	425b      	negs	r3, r3
    6f00:	e08a      	b.n	7018 <aws_iot_mqtt_connect+0x1f0>
		}
		isPowerCycle = false;
    6f02:	4b47      	ldr	r3, [pc, #284]	; (7020 <aws_iot_mqtt_connect+0x1f8>)
    6f04:	2200      	movs	r2, #0
    6f06:	701a      	strb	r2, [r3, #0]
	}

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    6f08:	230c      	movs	r3, #12
    6f0a:	18fa      	adds	r2, r7, r3
    6f0c:	4b4a      	ldr	r3, [pc, #296]	; (7038 <aws_iot_mqtt_connect+0x210>)
    6f0e:	0010      	movs	r0, r2
    6f10:	0019      	movs	r1, r3
    6f12:	2354      	movs	r3, #84	; 0x54
    6f14:	001a      	movs	r2, r3
    6f16:	4b49      	ldr	r3, [pc, #292]	; (703c <aws_iot_mqtt_connect+0x214>)
    6f18:	4798      	blx	r3

	data.willFlag = pParams->isWillMsgPresent;
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	2229      	movs	r2, #41	; 0x29
    6f1e:	5c9b      	ldrb	r3, [r3, r2]
    6f20:	001a      	movs	r2, r3
    6f22:	230c      	movs	r3, #12
    6f24:	18fb      	adds	r3, r7, r3
    6f26:	75da      	strb	r2, [r3, #23]
	// compatible type for MQTT_Ver_t
	switch (pParams->MQTTVersion) {
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	2224      	movs	r2, #36	; 0x24
    6f2c:	5c9b      	ldrb	r3, [r3, r2]
    6f2e:	2b03      	cmp	r3, #3
    6f30:	d002      	beq.n	6f38 <aws_iot_mqtt_connect+0x110>
    6f32:	2b04      	cmp	r3, #4
    6f34:	d005      	beq.n	6f42 <aws_iot_mqtt_connect+0x11a>
    6f36:	e009      	b.n	6f4c <aws_iot_mqtt_connect+0x124>
	case MQTT_3_1:
		data.MQTTVersion = (unsigned char) (3);
    6f38:	230c      	movs	r3, #12
    6f3a:	18fb      	adds	r3, r7, r3
    6f3c:	2203      	movs	r2, #3
    6f3e:	715a      	strb	r2, [r3, #5]
		break;
    6f40:	e008      	b.n	6f54 <aws_iot_mqtt_connect+0x12c>
	case MQTT_3_1_1:
		data.MQTTVersion = (unsigned char) (4);
    6f42:	230c      	movs	r3, #12
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	2204      	movs	r2, #4
    6f48:	715a      	strb	r2, [r3, #5]
		break;
    6f4a:	e003      	b.n	6f54 <aws_iot_mqtt_connect+0x12c>
	default:
		data.MQTTVersion = (unsigned char) (4); // default MQTT version = 3.1.1
    6f4c:	230c      	movs	r3, #12
    6f4e:	18fb      	adds	r3, r7, r3
    6f50:	2204      	movs	r2, #4
    6f52:	715a      	strb	r2, [r3, #5]
	}

	// register our disconnect handler, save customer's handler
	setDisconnectHandler(&c, pahoDisconnectHandler);
    6f54:	4a3a      	ldr	r2, [pc, #232]	; (7040 <aws_iot_mqtt_connect+0x218>)
    6f56:	4b34      	ldr	r3, [pc, #208]	; (7028 <aws_iot_mqtt_connect+0x200>)
    6f58:	0011      	movs	r1, r2
    6f5a:	0018      	movs	r0, r3
    6f5c:	4b39      	ldr	r3, [pc, #228]	; (7044 <aws_iot_mqtt_connect+0x21c>)
    6f5e:	4798      	blx	r3
	clientDisconnectHandler = pParams->disconnectHandler;
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6f64:	4b38      	ldr	r3, [pc, #224]	; (7048 <aws_iot_mqtt_connect+0x220>)
    6f66:	601a      	str	r2, [r3, #0]

	data.clientID.cstring = pParams->pClientID;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	699a      	ldr	r2, [r3, #24]
    6f6c:	230c      	movs	r3, #12
    6f6e:	18fb      	adds	r3, r7, r3
    6f70:	609a      	str	r2, [r3, #8]
	data.username.cstring = pParams->pUserName;
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	69da      	ldr	r2, [r3, #28]
    6f76:	230c      	movs	r3, #12
    6f78:	18fb      	adds	r3, r7, r3
    6f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	data.password.cstring = pParams->pPassword;
    6f7c:	687b      	ldr	r3, [r7, #4]
    6f7e:	6a1a      	ldr	r2, [r3, #32]
    6f80:	230c      	movs	r3, #12
    6f82:	18fb      	adds	r3, r7, r3
    6f84:	649a      	str	r2, [r3, #72]	; 0x48
	data.will.topicName.cstring = (char*)pParams->will.pTopicName;
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6f8a:	230c      	movs	r3, #12
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	621a      	str	r2, [r3, #32]
	data.will.message.cstring = (char*)pParams->will.pMessage;
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6f94:	230c      	movs	r3, #12
    6f96:	18fb      	adds	r3, r7, r3
    6f98:	62da      	str	r2, [r3, #44]	; 0x2c
	data.will.qos = pParams->will.qos;
    6f9a:	687b      	ldr	r3, [r7, #4]
    6f9c:	2235      	movs	r2, #53	; 0x35
    6f9e:	5c99      	ldrb	r1, [r3, r2]
    6fa0:	230c      	movs	r3, #12
    6fa2:	18fb      	adds	r3, r7, r3
    6fa4:	2239      	movs	r2, #57	; 0x39
    6fa6:	5499      	strb	r1, [r3, r2]
	data.will.retained = pParams->will.isRetained;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	2234      	movs	r2, #52	; 0x34
    6fac:	5c9b      	ldrb	r3, [r3, r2]
    6fae:	0019      	movs	r1, r3
    6fb0:	230c      	movs	r3, #12
    6fb2:	18fb      	adds	r3, r7, r3
    6fb4:	2238      	movs	r2, #56	; 0x38
    6fb6:	5499      	strb	r1, [r3, r2]
	data.keepAliveInterval = pParams->KeepAliveInterval_sec;
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6fbc:	230c      	movs	r3, #12
    6fbe:	18fb      	adds	r3, r7, r3
    6fc0:	829a      	strh	r2, [r3, #20]
	data.cleansession = pParams->isCleansession;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	2228      	movs	r2, #40	; 0x28
    6fc6:	5c9b      	ldrb	r3, [r3, r2]
    6fc8:	001a      	movs	r2, r3
    6fca:	230c      	movs	r3, #12
    6fcc:	18fb      	adds	r3, r7, r3
    6fce:	759a      	strb	r2, [r3, #22]

	pahoRc = MQTTConnect(&c, &data);
    6fd0:	237e      	movs	r3, #126	; 0x7e
    6fd2:	18fc      	adds	r4, r7, r3
    6fd4:	230c      	movs	r3, #12
    6fd6:	18fa      	adds	r2, r7, r3
    6fd8:	4b13      	ldr	r3, [pc, #76]	; (7028 <aws_iot_mqtt_connect+0x200>)
    6fda:	0011      	movs	r1, r2
    6fdc:	0018      	movs	r0, r3
    6fde:	4b1b      	ldr	r3, [pc, #108]	; (704c <aws_iot_mqtt_connect+0x224>)
    6fe0:	4798      	blx	r3
    6fe2:	0003      	movs	r3, r0
    6fe4:	7023      	strb	r3, [r4, #0]
	if(MQTT_NETWORK_ALREADY_CONNECTED_ERROR == pahoRc) {
    6fe6:	237e      	movs	r3, #126	; 0x7e
    6fe8:	18fb      	adds	r3, r7, r3
    6fea:	781b      	ldrb	r3, [r3, #0]
    6fec:	b25b      	sxtb	r3, r3
    6fee:	3305      	adds	r3, #5
    6ff0:	d104      	bne.n	6ffc <aws_iot_mqtt_connect+0x1d4>
		rc = NETWORK_ALREADY_CONNECTED;
    6ff2:	237f      	movs	r3, #127	; 0x7f
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	22e6      	movs	r2, #230	; 0xe6
    6ff8:	701a      	strb	r2, [r3, #0]
    6ffa:	e009      	b.n	7010 <aws_iot_mqtt_connect+0x1e8>
	} else if(SUCCESS != pahoRc) {
    6ffc:	237e      	movs	r3, #126	; 0x7e
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	781b      	ldrb	r3, [r3, #0]
    7002:	b25b      	sxtb	r3, r3
    7004:	2b00      	cmp	r3, #0
    7006:	d003      	beq.n	7010 <aws_iot_mqtt_connect+0x1e8>
		rc = CONNECTION_ERROR;
    7008:	237f      	movs	r3, #127	; 0x7f
    700a:	18fb      	adds	r3, r7, r3
    700c:	22fd      	movs	r2, #253	; 0xfd
    700e:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    7010:	237f      	movs	r3, #127	; 0x7f
    7012:	18fb      	adds	r3, r7, r3
    7014:	781b      	ldrb	r3, [r3, #0]
    7016:	b25b      	sxtb	r3, r3
}
    7018:	0018      	movs	r0, r3
    701a:	46bd      	mov	sp, r7
    701c:	b021      	add	sp, #132	; 0x84
    701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7020:	20000002 	.word	0x20000002
    7024:	20000800 	.word	0x20000800
    7028:	200006dc 	.word	0x200006dc
    702c:	000075e1 	.word	0x000075e1
    7030:	20000c00 	.word	0x20000c00
    7034:	00007b7d 	.word	0x00007b7d
    7038:	0001e220 	.word	0x0001e220
    703c:	0001bab7 	.word	0x0001bab7
    7040:	00006e0d 	.word	0x00006e0d
    7044:	00009053 	.word	0x00009053
    7048:	200007fc 	.word	0x200007fc
    704c:	000088f5 	.word	0x000088f5

00007050 <aws_iot_mqtt_publish>:
			rc = SUBSCRIBE_ERROR;
	}
	return rc;
}

IoT_Error_t aws_iot_mqtt_publish(MQTTPublishParams *pParams) {
    7050:	b580      	push	{r7, lr}
    7052:	b088      	sub	sp, #32
    7054:	af00      	add	r7, sp, #0
    7056:	6078      	str	r0, [r7, #4]
	IoT_Error_t rc = NONE_ERROR;
    7058:	231f      	movs	r3, #31
    705a:	18fb      	adds	r3, r7, r3
    705c:	2200      	movs	r2, #0
    705e:	701a      	strb	r2, [r3, #0]

	MQTTMessage Message;
	Message.dup = pParams->MessageParams.isDuplicate;
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	799b      	ldrb	r3, [r3, #6]
    7064:	001a      	movs	r2, r3
    7066:	230c      	movs	r3, #12
    7068:	18fb      	adds	r3, r7, r3
    706a:	709a      	strb	r2, [r3, #2]
	Message.id = pParams->MessageParams.id;
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	891a      	ldrh	r2, [r3, #8]
    7070:	230c      	movs	r3, #12
    7072:	18fb      	adds	r3, r7, r3
    7074:	809a      	strh	r2, [r3, #4]
	Message.payload = pParams->MessageParams.pPayload;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	68da      	ldr	r2, [r3, #12]
    707a:	230c      	movs	r3, #12
    707c:	18fb      	adds	r3, r7, r3
    707e:	609a      	str	r2, [r3, #8]
	Message.payloadlen = pParams->MessageParams.PayloadLen;
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	691a      	ldr	r2, [r3, #16]
    7084:	230c      	movs	r3, #12
    7086:	18fb      	adds	r3, r7, r3
    7088:	60da      	str	r2, [r3, #12]
	Message.qos = (enum QoS)pParams->MessageParams.qos;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	791a      	ldrb	r2, [r3, #4]
    708e:	230c      	movs	r3, #12
    7090:	18fb      	adds	r3, r7, r3
    7092:	701a      	strb	r2, [r3, #0]
	Message.retained = pParams->MessageParams.isRetained;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	795b      	ldrb	r3, [r3, #5]
    7098:	001a      	movs	r2, r3
    709a:	230c      	movs	r3, #12
    709c:	18fb      	adds	r3, r7, r3
    709e:	705a      	strb	r2, [r3, #1]

	if(0 != MQTTPublish(&c, pParams->pTopic, &Message)){
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	6819      	ldr	r1, [r3, #0]
    70a4:	230c      	movs	r3, #12
    70a6:	18fa      	adds	r2, r7, r3
    70a8:	4b08      	ldr	r3, [pc, #32]	; (70cc <aws_iot_mqtt_publish+0x7c>)
    70aa:	0018      	movs	r0, r3
    70ac:	4b08      	ldr	r3, [pc, #32]	; (70d0 <aws_iot_mqtt_publish+0x80>)
    70ae:	4798      	blx	r3
    70b0:	1e03      	subs	r3, r0, #0
    70b2:	d003      	beq.n	70bc <aws_iot_mqtt_publish+0x6c>
		rc = PUBLISH_ERROR;
    70b4:	231f      	movs	r3, #31
    70b6:	18fb      	adds	r3, r7, r3
    70b8:	22fb      	movs	r2, #251	; 0xfb
    70ba:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    70bc:	231f      	movs	r3, #31
    70be:	18fb      	adds	r3, r7, r3
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	b25b      	sxtb	r3, r3
}
    70c4:	0018      	movs	r0, r3
    70c6:	46bd      	mov	sp, r7
    70c8:	b008      	add	sp, #32
    70ca:	bd80      	pop	{r7, pc}
    70cc:	200006dc 	.word	0x200006dc
    70d0:	00008cf5 	.word	0x00008cf5

000070d4 <aws_iot_mqtt_yield>:
	}

	return rc;
}

IoT_Error_t aws_iot_mqtt_yield(int timeout) {
    70d4:	b590      	push	{r4, r7, lr}
    70d6:	b085      	sub	sp, #20
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
	MQTTReturnCode pahoRc = MQTTYield(&c, timeout);
    70dc:	687a      	ldr	r2, [r7, #4]
    70de:	230e      	movs	r3, #14
    70e0:	18fc      	adds	r4, r7, r3
    70e2:	4b37      	ldr	r3, [pc, #220]	; (71c0 <aws_iot_mqtt_yield+0xec>)
    70e4:	0011      	movs	r1, r2
    70e6:	0018      	movs	r0, r3
    70e8:	4b36      	ldr	r3, [pc, #216]	; (71c4 <aws_iot_mqtt_yield+0xf0>)
    70ea:	4798      	blx	r3
    70ec:	0003      	movs	r3, r0
    70ee:	7023      	strb	r3, [r4, #0]
	IoT_Error_t rc = NONE_ERROR;
    70f0:	230f      	movs	r3, #15
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	2200      	movs	r2, #0
    70f6:	701a      	strb	r2, [r3, #0]
	if(MQTT_NETWORK_RECONNECTED == pahoRc){
    70f8:	230e      	movs	r3, #14
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	b25b      	sxtb	r3, r3
    7100:	2b01      	cmp	r3, #1
    7102:	d104      	bne.n	710e <aws_iot_mqtt_yield+0x3a>
		rc = RECONNECT_SUCCESSFUL;
    7104:	230f      	movs	r3, #15
    7106:	18fb      	adds	r3, r7, r3
    7108:	2201      	movs	r2, #1
    710a:	701a      	strb	r2, [r3, #0]
    710c:	e050      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(SUCCESS == pahoRc){
    710e:	230e      	movs	r3, #14
    7110:	18fb      	adds	r3, r7, r3
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	b25b      	sxtb	r3, r3
    7116:	2b00      	cmp	r3, #0
    7118:	d104      	bne.n	7124 <aws_iot_mqtt_yield+0x50>
		rc = NONE_ERROR;
    711a:	230f      	movs	r3, #15
    711c:	18fb      	adds	r3, r7, r3
    711e:	2200      	movs	r2, #0
    7120:	701a      	strb	r2, [r3, #0]
    7122:	e045      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_NULL_VALUE_ERROR == pahoRc) {
    7124:	230e      	movs	r3, #14
    7126:	18fb      	adds	r3, r7, r3
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	b25b      	sxtb	r3, r3
    712c:	3306      	adds	r3, #6
    712e:	d104      	bne.n	713a <aws_iot_mqtt_yield+0x66>
		rc = NULL_VALUE_ERROR;
    7130:	230f      	movs	r3, #15
    7132:	18fb      	adds	r3, r7, r3
    7134:	22fe      	movs	r2, #254	; 0xfe
    7136:	701a      	strb	r2, [r3, #0]
    7138:	e03a      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_NETWORK_DISCONNECTED_ERROR == pahoRc) {
    713a:	230e      	movs	r3, #14
    713c:	18fb      	adds	r3, r7, r3
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	b25b      	sxtb	r3, r3
    7142:	3304      	adds	r3, #4
    7144:	d104      	bne.n	7150 <aws_iot_mqtt_yield+0x7c>
		rc = NETWORK_DISCONNECTED;
    7146:	230f      	movs	r3, #15
    7148:	18fb      	adds	r3, r7, r3
    714a:	22e9      	movs	r2, #233	; 0xe9
    714c:	701a      	strb	r2, [r3, #0]
    714e:	e02f      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_RECONNECT_TIMED_OUT == pahoRc) {
    7150:	230e      	movs	r3, #14
    7152:	18fb      	adds	r3, r7, r3
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	b25b      	sxtb	r3, r3
    7158:	3308      	adds	r3, #8
    715a:	d104      	bne.n	7166 <aws_iot_mqtt_yield+0x92>
		rc = NETWORK_RECONNECT_TIMED_OUT;
    715c:	230f      	movs	r3, #15
    715e:	18fb      	adds	r3, r7, r3
    7160:	22e8      	movs	r2, #232	; 0xe8
    7162:	701a      	strb	r2, [r3, #0]
    7164:	e024      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_ATTEMPTING_RECONNECT == pahoRc) {
    7166:	230e      	movs	r3, #14
    7168:	18fb      	adds	r3, r7, r3
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	b25b      	sxtb	r3, r3
    716e:	2b03      	cmp	r3, #3
    7170:	d104      	bne.n	717c <aws_iot_mqtt_yield+0xa8>
		rc = NETWORK_ATTEMPTING_RECONNECT;
    7172:	230f      	movs	r3, #15
    7174:	18fb      	adds	r3, r7, r3
    7176:	22e7      	movs	r2, #231	; 0xe7
    7178:	701a      	strb	r2, [r3, #0]
    717a:	e019      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTT_BUFFER_RX_MESSAGE_INVALID == pahoRc){
    717c:	230e      	movs	r3, #14
    717e:	18fb      	adds	r3, r7, r3
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	b25b      	sxtb	r3, r3
    7184:	3312      	adds	r3, #18
    7186:	d104      	bne.n	7192 <aws_iot_mqtt_yield+0xbe>
		rc = RX_MESSAGE_INVALID;
    7188:	230f      	movs	r3, #15
    718a:	18fb      	adds	r3, r7, r3
    718c:	22e5      	movs	r2, #229	; 0xe5
    718e:	701a      	strb	r2, [r3, #0]
    7190:	e00e      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else if(MQTTPACKET_BUFFER_TOO_SHORT == pahoRc){
    7192:	230e      	movs	r3, #14
    7194:	18fb      	adds	r3, r7, r3
    7196:	781b      	ldrb	r3, [r3, #0]
    7198:	b25b      	sxtb	r3, r3
    719a:	3309      	adds	r3, #9
    719c:	d104      	bne.n	71a8 <aws_iot_mqtt_yield+0xd4>
		rc = RX_MESSAGE_BIGGER_THAN_MQTT_RX_BUF;
    719e:	230f      	movs	r3, #15
    71a0:	18fb      	adds	r3, r7, r3
    71a2:	22e4      	movs	r2, #228	; 0xe4
    71a4:	701a      	strb	r2, [r3, #0]
    71a6:	e003      	b.n	71b0 <aws_iot_mqtt_yield+0xdc>
	} else {
		rc = YIELD_ERROR;
    71a8:	230f      	movs	r3, #15
    71aa:	18fb      	adds	r3, r7, r3
    71ac:	22f9      	movs	r2, #249	; 0xf9
    71ae:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    71b0:	230f      	movs	r3, #15
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	781b      	ldrb	r3, [r3, #0]
    71b6:	b25b      	sxtb	r3, r3
}
    71b8:	0018      	movs	r0, r3
    71ba:	46bd      	mov	sp, r7
    71bc:	b005      	add	sp, #20
    71be:	bd90      	pop	{r4, r7, pc}
    71c0:	200006dc 	.word	0x200006dc
    71c4:	000086f1 	.word	0x000086f1

000071c8 <aws_iot_mqtt_attempt_reconnect>:

IoT_Error_t aws_iot_mqtt_attempt_reconnect() {
    71c8:	b590      	push	{r4, r7, lr}
    71ca:	b083      	sub	sp, #12
    71cc:	af00      	add	r7, sp, #0
	MQTTReturnCode pahoRc = MQTTAttemptReconnect(&c);
    71ce:	1dbc      	adds	r4, r7, #6
    71d0:	4b1f      	ldr	r3, [pc, #124]	; (7250 <aws_iot_mqtt_attempt_reconnect+0x88>)
    71d2:	0018      	movs	r0, r3
    71d4:	4b1f      	ldr	r3, [pc, #124]	; (7254 <aws_iot_mqtt_attempt_reconnect+0x8c>)
    71d6:	4798      	blx	r3
    71d8:	0003      	movs	r3, r0
    71da:	7023      	strb	r3, [r4, #0]
	IoT_Error_t rc = RECONNECT_SUCCESSFUL;
    71dc:	1dfb      	adds	r3, r7, #7
    71de:	2201      	movs	r2, #1
    71e0:	701a      	strb	r2, [r3, #0]
	if(MQTT_NETWORK_RECONNECTED == pahoRc){
    71e2:	1dbb      	adds	r3, r7, #6
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	b25b      	sxtb	r3, r3
    71e8:	2b01      	cmp	r3, #1
    71ea:	d103      	bne.n	71f4 <aws_iot_mqtt_attempt_reconnect+0x2c>
		rc = RECONNECT_SUCCESSFUL;
    71ec:	1dfb      	adds	r3, r7, #7
    71ee:	2201      	movs	r2, #1
    71f0:	701a      	strb	r2, [r3, #0]
    71f2:	e026      	b.n	7242 <aws_iot_mqtt_attempt_reconnect+0x7a>
	} else if(MQTT_NULL_VALUE_ERROR == pahoRc) {
    71f4:	1dbb      	adds	r3, r7, #6
    71f6:	781b      	ldrb	r3, [r3, #0]
    71f8:	b25b      	sxtb	r3, r3
    71fa:	3306      	adds	r3, #6
    71fc:	d103      	bne.n	7206 <aws_iot_mqtt_attempt_reconnect+0x3e>
		rc = NULL_VALUE_ERROR;
    71fe:	1dfb      	adds	r3, r7, #7
    7200:	22fe      	movs	r2, #254	; 0xfe
    7202:	701a      	strb	r2, [r3, #0]
    7204:	e01d      	b.n	7242 <aws_iot_mqtt_attempt_reconnect+0x7a>
	} else if(MQTT_NETWORK_DISCONNECTED_ERROR == pahoRc) {
    7206:	1dbb      	adds	r3, r7, #6
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	b25b      	sxtb	r3, r3
    720c:	3304      	adds	r3, #4
    720e:	d103      	bne.n	7218 <aws_iot_mqtt_attempt_reconnect+0x50>
		rc = NETWORK_DISCONNECTED;
    7210:	1dfb      	adds	r3, r7, #7
    7212:	22e9      	movs	r2, #233	; 0xe9
    7214:	701a      	strb	r2, [r3, #0]
    7216:	e014      	b.n	7242 <aws_iot_mqtt_attempt_reconnect+0x7a>
	} else if(MQTT_RECONNECT_TIMED_OUT == pahoRc) {
    7218:	1dbb      	adds	r3, r7, #6
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	b25b      	sxtb	r3, r3
    721e:	3308      	adds	r3, #8
    7220:	d103      	bne.n	722a <aws_iot_mqtt_attempt_reconnect+0x62>
		rc = NETWORK_RECONNECT_TIMED_OUT;
    7222:	1dfb      	adds	r3, r7, #7
    7224:	22e8      	movs	r2, #232	; 0xe8
    7226:	701a      	strb	r2, [r3, #0]
    7228:	e00b      	b.n	7242 <aws_iot_mqtt_attempt_reconnect+0x7a>
	} else if(MQTT_NETWORK_ALREADY_CONNECTED_ERROR == pahoRc) {
    722a:	1dbb      	adds	r3, r7, #6
    722c:	781b      	ldrb	r3, [r3, #0]
    722e:	b25b      	sxtb	r3, r3
    7230:	3305      	adds	r3, #5
    7232:	d103      	bne.n	723c <aws_iot_mqtt_attempt_reconnect+0x74>
		rc = NETWORK_ALREADY_CONNECTED;
    7234:	1dfb      	adds	r3, r7, #7
    7236:	22e6      	movs	r2, #230	; 0xe6
    7238:	701a      	strb	r2, [r3, #0]
    723a:	e002      	b.n	7242 <aws_iot_mqtt_attempt_reconnect+0x7a>
	} else {
		rc = GENERIC_ERROR;
    723c:	1dfb      	adds	r3, r7, #7
    723e:	22ff      	movs	r2, #255	; 0xff
    7240:	701a      	strb	r2, [r3, #0]
	}

	return rc;
    7242:	1dfb      	adds	r3, r7, #7
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	b25b      	sxtb	r3, r3
}
    7248:	0018      	movs	r0, r3
    724a:	46bd      	mov	sp, r7
    724c:	b003      	add	sp, #12
    724e:	bd90      	pop	{r4, r7, pc}
    7250:	200006dc 	.word	0x200006dc
    7254:	0000819d 	.word	0x0000819d

00007258 <aws_iot_mqtt_autoreconnect_set_status>:

IoT_Error_t aws_iot_mqtt_autoreconnect_set_status(bool value) {
    7258:	b590      	push	{r4, r7, lr}
    725a:	b085      	sub	sp, #20
    725c:	af00      	add	r7, sp, #0
    725e:	0002      	movs	r2, r0
    7260:	1dfb      	adds	r3, r7, #7
    7262:	701a      	strb	r2, [r3, #0]
	MQTTReturnCode rc = setAutoReconnectEnabled(&c, (uint8_t) value);
    7264:	1dfb      	adds	r3, r7, #7
    7266:	781a      	ldrb	r2, [r3, #0]
    7268:	230f      	movs	r3, #15
    726a:	18fc      	adds	r4, r7, r3
    726c:	4b0a      	ldr	r3, [pc, #40]	; (7298 <aws_iot_mqtt_autoreconnect_set_status+0x40>)
    726e:	0011      	movs	r1, r2
    7270:	0018      	movs	r0, r3
    7272:	4b0a      	ldr	r3, [pc, #40]	; (729c <aws_iot_mqtt_autoreconnect_set_status+0x44>)
    7274:	4798      	blx	r3
    7276:	0003      	movs	r3, r0
    7278:	7023      	strb	r3, [r4, #0]

	if(MQTT_NULL_VALUE_ERROR == rc) {
    727a:	230f      	movs	r3, #15
    727c:	18fb      	adds	r3, r7, r3
    727e:	781b      	ldrb	r3, [r3, #0]
    7280:	b25b      	sxtb	r3, r3
    7282:	3306      	adds	r3, #6
    7284:	d102      	bne.n	728c <aws_iot_mqtt_autoreconnect_set_status+0x34>
		return NULL_VALUE_ERROR;
    7286:	2302      	movs	r3, #2
    7288:	425b      	negs	r3, r3
    728a:	e000      	b.n	728e <aws_iot_mqtt_autoreconnect_set_status+0x36>
	}

	return NONE_ERROR;
    728c:	2300      	movs	r3, #0
}
    728e:	0018      	movs	r0, r3
    7290:	46bd      	mov	sp, r7
    7292:	b005      	add	sp, #20
    7294:	bd90      	pop	{r4, r7, pc}
    7296:	46c0      	nop			; (mov r8, r8)
    7298:	200006dc 	.word	0x200006dc
    729c:	00009083 	.word	0x00009083

000072a0 <aws_iot_is_autoreconnect_enabled>:

bool aws_iot_is_mqtt_connected(void) {
	return MQTTIsConnected(&c);
}

bool aws_iot_is_autoreconnect_enabled(void) {
    72a0:	b580      	push	{r7, lr}
    72a2:	af00      	add	r7, sp, #0
	return MQTTIsAutoReconnectEnabled(&c);
    72a4:	4b05      	ldr	r3, [pc, #20]	; (72bc <aws_iot_is_autoreconnect_enabled+0x1c>)
    72a6:	0018      	movs	r0, r3
    72a8:	4b05      	ldr	r3, [pc, #20]	; (72c0 <aws_iot_is_autoreconnect_enabled+0x20>)
    72aa:	4798      	blx	r3
    72ac:	0003      	movs	r3, r0
    72ae:	1e5a      	subs	r2, r3, #1
    72b0:	4193      	sbcs	r3, r2
    72b2:	b2db      	uxtb	r3, r3
}
    72b4:	0018      	movs	r0, r3
    72b6:	46bd      	mov	sp, r7
    72b8:	bd80      	pop	{r7, pc}
    72ba:	46c0      	nop			; (mov r8, r8)
    72bc:	200006dc 	.word	0x200006dc
    72c0:	00009035 	.word	0x00009035

000072c4 <getTimeInMillis>:

#include "timer_d21.h"
#include "stdio.h"
#include "AWS_SDK/aws_iot_src/protocol/mqtt/aws_iot_embedded_client_wrapper/timer_interface.h"
static uint32_t getTimeInMillis(void)
{
    72c4:	b580      	push	{r7, lr}
    72c6:	af00      	add	r7, sp, #0
	return ms_ticks;
    72c8:	4b02      	ldr	r3, [pc, #8]	; (72d4 <getTimeInMillis+0x10>)
    72ca:	681b      	ldr	r3, [r3, #0]
}
    72cc:	0018      	movs	r0, r3
    72ce:	46bd      	mov	sp, r7
    72d0:	bd80      	pop	{r7, pc}
    72d2:	46c0      	nop			; (mov r8, r8)
    72d4:	200017ac 	.word	0x200017ac

000072d8 <expired>:

char expired(Timer *timer)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b082      	sub	sp, #8
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
	return ((timer->end_time > 0)
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	681b      	ldr	r3, [r3, #0]
	&& ((getTimeInMillis() + timer->offset) > timer->end_time));
    72e4:	2b00      	cmp	r3, #0
    72e6:	d00b      	beq.n	7300 <expired+0x28>
    72e8:	4b08      	ldr	r3, [pc, #32]	; (730c <expired+0x34>)
    72ea:	4798      	blx	r3
    72ec:	0002      	movs	r2, r0
    72ee:	687b      	ldr	r3, [r7, #4]
    72f0:	685b      	ldr	r3, [r3, #4]
    72f2:	18d2      	adds	r2, r2, r3
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	681b      	ldr	r3, [r3, #0]
    72f8:	429a      	cmp	r2, r3
    72fa:	d901      	bls.n	7300 <expired+0x28>
    72fc:	2301      	movs	r3, #1
    72fe:	e000      	b.n	7302 <expired+0x2a>
    7300:	2300      	movs	r3, #0
    7302:	b2db      	uxtb	r3, r3
}
    7304:	0018      	movs	r0, r3
    7306:	46bd      	mov	sp, r7
    7308:	b002      	add	sp, #8
    730a:	bd80      	pop	{r7, pc}
    730c:	000072c5 	.word	0x000072c5

00007310 <countdown_ms>:

void countdown_ms(Timer *timer, unsigned int timeout)
{
    7310:	b580      	push	{r7, lr}
    7312:	b084      	sub	sp, #16
    7314:	af00      	add	r7, sp, #0
    7316:	6078      	str	r0, [r7, #4]
    7318:	6039      	str	r1, [r7, #0]
	uint32_t timems = getTimeInMillis();
    731a:	4b10      	ldr	r3, [pc, #64]	; (735c <countdown_ms+0x4c>)
    731c:	4798      	blx	r3
    731e:	0003      	movs	r3, r0
    7320:	60fb      	str	r3, [r7, #12]

	timer->end_time = timems + timeout;
    7322:	68fa      	ldr	r2, [r7, #12]
    7324:	683b      	ldr	r3, [r7, #0]
    7326:	18d2      	adds	r2, r2, r3
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	601a      	str	r2, [r3, #0]

	if (timer->end_time < timems) {
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	681a      	ldr	r2, [r3, #0]
    7330:	68fb      	ldr	r3, [r7, #12]
    7332:	429a      	cmp	r2, r3
    7334:	d20b      	bcs.n	734e <countdown_ms+0x3e>
		timer->offset = ~0 - timems + 1;
    7336:	68fb      	ldr	r3, [r7, #12]
    7338:	425a      	negs	r2, r3
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	605a      	str	r2, [r3, #4]
		timer->end_time += timer->offset;
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	681a      	ldr	r2, [r3, #0]
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	685b      	ldr	r3, [r3, #4]
    7346:	18d2      	adds	r2, r2, r3
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	601a      	str	r2, [r3, #0]
	}
	else {
		timer->offset = 0;
	}
}
    734c:	e002      	b.n	7354 <countdown_ms+0x44>
		timer->offset = 0;
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	2200      	movs	r2, #0
    7352:	605a      	str	r2, [r3, #4]
}
    7354:	46c0      	nop			; (mov r8, r8)
    7356:	46bd      	mov	sp, r7
    7358:	b004      	add	sp, #16
    735a:	bd80      	pop	{r7, pc}
    735c:	000072c5 	.word	0x000072c5

00007360 <countdown>:

void countdown(Timer *timer, unsigned int timeout)
{
    7360:	b580      	push	{r7, lr}
    7362:	b084      	sub	sp, #16
    7364:	af00      	add	r7, sp, #0
    7366:	6078      	str	r0, [r7, #4]
    7368:	6039      	str	r1, [r7, #0]
	uint32_t timems = getTimeInMillis();
    736a:	4b12      	ldr	r3, [pc, #72]	; (73b4 <countdown+0x54>)
    736c:	4798      	blx	r3
    736e:	0003      	movs	r3, r0
    7370:	60fb      	str	r3, [r7, #12]

	timer->end_time = timems + (timeout * 1000);
    7372:	683b      	ldr	r3, [r7, #0]
    7374:	22fa      	movs	r2, #250	; 0xfa
    7376:	0092      	lsls	r2, r2, #2
    7378:	435a      	muls	r2, r3
    737a:	68fb      	ldr	r3, [r7, #12]
    737c:	18d2      	adds	r2, r2, r3
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	601a      	str	r2, [r3, #0]

	if (timer->end_time < timems) {
    7382:	687b      	ldr	r3, [r7, #4]
    7384:	681a      	ldr	r2, [r3, #0]
    7386:	68fb      	ldr	r3, [r7, #12]
    7388:	429a      	cmp	r2, r3
    738a:	d20b      	bcs.n	73a4 <countdown+0x44>
		timer->offset = ~0 - timems + 1;
    738c:	68fb      	ldr	r3, [r7, #12]
    738e:	425a      	negs	r2, r3
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	605a      	str	r2, [r3, #4]
		timer->end_time += timer->offset;
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	681a      	ldr	r2, [r3, #0]
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	685b      	ldr	r3, [r3, #4]
    739c:	18d2      	adds	r2, r2, r3
    739e:	687b      	ldr	r3, [r7, #4]
    73a0:	601a      	str	r2, [r3, #0]
	}
	else {
		timer->offset = 0;
	}
}
    73a2:	e002      	b.n	73aa <countdown+0x4a>
		timer->offset = 0;
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	2200      	movs	r2, #0
    73a8:	605a      	str	r2, [r3, #4]
}
    73aa:	46c0      	nop			; (mov r8, r8)
    73ac:	46bd      	mov	sp, r7
    73ae:	b004      	add	sp, #16
    73b0:	bd80      	pop	{r7, pc}
    73b2:	46c0      	nop			; (mov r8, r8)
    73b4:	000072c5 	.word	0x000072c5

000073b8 <left_ms>:

int left_ms(Timer *timer)
{
    73b8:	b590      	push	{r4, r7, lr}
    73ba:	b085      	sub	sp, #20
    73bc:	af00      	add	r7, sp, #0
    73be:	6078      	str	r0, [r7, #4]
	int diff = timer->end_time - (getTimeInMillis() + timer->offset);
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	681c      	ldr	r4, [r3, #0]
    73c4:	4b07      	ldr	r3, [pc, #28]	; (73e4 <left_ms+0x2c>)
    73c6:	4798      	blx	r3
    73c8:	0002      	movs	r2, r0
    73ca:	687b      	ldr	r3, [r7, #4]
    73cc:	685b      	ldr	r3, [r3, #4]
    73ce:	18d3      	adds	r3, r2, r3
    73d0:	1ae3      	subs	r3, r4, r3
    73d2:	60fb      	str	r3, [r7, #12]
	return (diff > 0 ? diff : 0);
    73d4:	68fb      	ldr	r3, [r7, #12]
    73d6:	2b00      	cmp	r3, #0
    73d8:	da00      	bge.n	73dc <left_ms+0x24>
    73da:	2300      	movs	r3, #0
}
    73dc:	0018      	movs	r0, r3
    73de:	46bd      	mov	sp, r7
    73e0:	b005      	add	sp, #20
    73e2:	bd90      	pop	{r4, r7, pc}
    73e4:	000072c5 	.word	0x000072c5

000073e8 <InitTimer>:

void InitTimer(Timer *timer)
{
    73e8:	b580      	push	{r7, lr}
    73ea:	b082      	sub	sp, #8
    73ec:	af00      	add	r7, sp, #0
    73ee:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	2200      	movs	r2, #0
    73f4:	601a      	str	r2, [r3, #0]
	timer->offset = 0;
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	2200      	movs	r2, #0
    73fa:	605a      	str	r2, [r3, #4]
    73fc:	46c0      	nop			; (mov r8, r8)
    73fe:	46bd      	mov	sp, r7
    7400:	b002      	add	sp, #8
    7402:	bd80      	pop	{r7, pc}

00007404 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    7404:	b590      	push	{r4, r7, lr}
    7406:	b085      	sub	sp, #20
    7408:	af02      	add	r7, sp, #8
    740a:	6078      	str	r0, [r7, #4]
    740c:	6039      	str	r1, [r7, #0]
	state = DNS_REQUEST;
    740e:	4b14      	ldr	r3, [pc, #80]	; (7460 <resolve_cb+0x5c>)
    7410:	2219      	movs	r2, #25
    7412:	701a      	strb	r2, [r3, #0]
	gu32HostIp = hostIp;
    7414:	4b13      	ldr	r3, [pc, #76]	; (7464 <resolve_cb+0x60>)
    7416:	683a      	ldr	r2, [r7, #0]
    7418:	601a      	str	r2, [r3, #0]
	gbHostIpByName = true;
    741a:	4b13      	ldr	r3, [pc, #76]	; (7468 <resolve_cb+0x64>)
    741c:	2201      	movs	r2, #1
    741e:	701a      	strb	r2, [r3, #0]
	printf("Host IP is %d.%d.%d.%d\r\n", (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    7420:	683b      	ldr	r3, [r7, #0]
    7422:	22ff      	movs	r2, #255	; 0xff
    7424:	4013      	ands	r3, r2
    7426:	0019      	movs	r1, r3
    7428:	683b      	ldr	r3, [r7, #0]
    742a:	0a1b      	lsrs	r3, r3, #8
    742c:	001a      	movs	r2, r3
    742e:	23ff      	movs	r3, #255	; 0xff
    7430:	401a      	ands	r2, r3
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    7432:	683b      	ldr	r3, [r7, #0]
    7434:	0c1b      	lsrs	r3, r3, #16
    7436:	0018      	movs	r0, r3
	printf("Host IP is %d.%d.%d.%d\r\n", (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    7438:	23ff      	movs	r3, #255	; 0xff
    743a:	4018      	ands	r0, r3
    743c:	0004      	movs	r4, r0
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    743e:	683b      	ldr	r3, [r7, #0]
    7440:	0e1b      	lsrs	r3, r3, #24
	printf("Host IP is %d.%d.%d.%d\r\n", (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    7442:	480a      	ldr	r0, [pc, #40]	; (746c <resolve_cb+0x68>)
    7444:	9300      	str	r3, [sp, #0]
    7446:	0023      	movs	r3, r4
    7448:	4c09      	ldr	r4, [pc, #36]	; (7470 <resolve_cb+0x6c>)
    744a:	47a0      	blx	r4
	printf("Host Name is %s\r\n", hostName);
    744c:	687a      	ldr	r2, [r7, #4]
    744e:	4b09      	ldr	r3, [pc, #36]	; (7474 <resolve_cb+0x70>)
    7450:	0011      	movs	r1, r2
    7452:	0018      	movs	r0, r3
    7454:	4b06      	ldr	r3, [pc, #24]	; (7470 <resolve_cb+0x6c>)
    7456:	4798      	blx	r3
}
    7458:	46c0      	nop			; (mov r8, r8)
    745a:	46bd      	mov	sp, r7
    745c:	b003      	add	sp, #12
    745e:	bd90      	pop	{r4, r7, pc}
    7460:	20000003 	.word	0x20000003
    7464:	20001004 	.word	0x20001004
    7468:	20001001 	.word	0x20001001
    746c:	0001e2ec 	.word	0x0001e2ec
    7470:	0001bc4d 	.word	0x0001bc4d
    7474:	0001e308 	.word	0x0001e308

00007478 <socket_cb>:
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    7478:	b580      	push	{r7, lr}
    747a:	b086      	sub	sp, #24
    747c:	af00      	add	r7, sp, #0
    747e:	603a      	str	r2, [r7, #0]
    7480:	1dfb      	adds	r3, r7, #7
    7482:	1c02      	adds	r2, r0, #0
    7484:	701a      	strb	r2, [r3, #0]
    7486:	1dbb      	adds	r3, r7, #6
    7488:	1c0a      	adds	r2, r1, #0
    748a:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
    748c:	1dbb      	adds	r3, r7, #6
    748e:	781b      	ldrb	r3, [r3, #0]
    7490:	2b06      	cmp	r3, #6
    7492:	d054      	beq.n	753e <socket_cb+0xc6>
    7494:	2b07      	cmp	r3, #7
    7496:	d02b      	beq.n	74f0 <socket_cb+0x78>
    7498:	2b05      	cmp	r3, #5
    749a:	d000      	beq.n	749e <socket_cb+0x26>
			}
			
		}
		
		default:
		break;
    749c:	e06b      	b.n	7576 <socket_cb+0xfe>
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    749e:	683b      	ldr	r3, [r7, #0]
    74a0:	617b      	str	r3, [r7, #20]
			if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
    74a2:	697b      	ldr	r3, [r7, #20]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d011      	beq.n	74cc <socket_cb+0x54>
    74a8:	697b      	ldr	r3, [r7, #20]
    74aa:	785b      	ldrb	r3, [r3, #1]
    74ac:	b25b      	sxtb	r3, r3
    74ae:	2b00      	cmp	r3, #0
    74b0:	db0c      	blt.n	74cc <socket_cb+0x54>
				state = u8Msg;
    74b2:	1dbb      	adds	r3, r7, #6
    74b4:	2200      	movs	r2, #0
    74b6:	569a      	ldrsb	r2, [r3, r2]
    74b8:	4b31      	ldr	r3, [pc, #196]	; (7580 <socket_cb+0x108>)
    74ba:	701a      	strb	r2, [r3, #0]
				err = 0;
    74bc:	4b31      	ldr	r3, [pc, #196]	; (7584 <socket_cb+0x10c>)
    74be:	2200      	movs	r2, #0
    74c0:	701a      	strb	r2, [r3, #0]
				printf("Successfully connected.\r\n");
    74c2:	4b31      	ldr	r3, [pc, #196]	; (7588 <socket_cb+0x110>)
    74c4:	0018      	movs	r0, r3
    74c6:	4b31      	ldr	r3, [pc, #196]	; (758c <socket_cb+0x114>)
    74c8:	4798      	blx	r3
		break;
    74ca:	e055      	b.n	7578 <socket_cb+0x100>
				state = u8Msg;
    74cc:	1dbb      	adds	r3, r7, #6
    74ce:	2200      	movs	r2, #0
    74d0:	569a      	ldrsb	r2, [r3, r2]
    74d2:	4b2b      	ldr	r3, [pc, #172]	; (7580 <socket_cb+0x108>)
    74d4:	701a      	strb	r2, [r3, #0]
				err = -1;
    74d6:	4b2b      	ldr	r3, [pc, #172]	; (7584 <socket_cb+0x10c>)
    74d8:	22ff      	movs	r2, #255	; 0xff
    74da:	701a      	strb	r2, [r3, #0]
				printf("Connect error! code(%d)\r\n", pstrConnect->s8Error);
    74dc:	697b      	ldr	r3, [r7, #20]
    74de:	785b      	ldrb	r3, [r3, #1]
    74e0:	b25b      	sxtb	r3, r3
    74e2:	001a      	movs	r2, r3
    74e4:	4b2a      	ldr	r3, [pc, #168]	; (7590 <socket_cb+0x118>)
    74e6:	0011      	movs	r1, r2
    74e8:	0018      	movs	r0, r3
    74ea:	4b2a      	ldr	r3, [pc, #168]	; (7594 <socket_cb+0x11c>)
    74ec:	4798      	blx	r3
		break;
    74ee:	e043      	b.n	7578 <socket_cb+0x100>
			sint16 s16SentBytes = *((sint16*)pvMsg);
    74f0:	2312      	movs	r3, #18
    74f2:	18fb      	adds	r3, r7, r3
    74f4:	683a      	ldr	r2, [r7, #0]
    74f6:	8812      	ldrh	r2, [r2, #0]
    74f8:	801a      	strh	r2, [r3, #0]
			state = u8Msg;
    74fa:	1dbb      	adds	r3, r7, #6
    74fc:	2200      	movs	r2, #0
    74fe:	569a      	ldrsb	r2, [r3, r2]
    7500:	4b1f      	ldr	r3, [pc, #124]	; (7580 <socket_cb+0x108>)
    7502:	701a      	strb	r2, [r3, #0]
			if(s16SentBytes < 0)
    7504:	2312      	movs	r3, #18
    7506:	18fb      	adds	r3, r7, r3
    7508:	2200      	movs	r2, #0
    750a:	5e9b      	ldrsh	r3, [r3, r2]
    750c:	2b00      	cmp	r3, #0
    750e:	da0c      	bge.n	752a <socket_cb+0xb2>
				err = -1;
    7510:	4b1c      	ldr	r3, [pc, #112]	; (7584 <socket_cb+0x10c>)
    7512:	22ff      	movs	r2, #255	; 0xff
    7514:	701a      	strb	r2, [r3, #0]
				printf("Socket send error:%d\r\n",s16SentBytes);
    7516:	2312      	movs	r3, #18
    7518:	18fb      	adds	r3, r7, r3
    751a:	2200      	movs	r2, #0
    751c:	5e9a      	ldrsh	r2, [r3, r2]
    751e:	4b1e      	ldr	r3, [pc, #120]	; (7598 <socket_cb+0x120>)
    7520:	0011      	movs	r1, r2
    7522:	0018      	movs	r0, r3
    7524:	4b1b      	ldr	r3, [pc, #108]	; (7594 <socket_cb+0x11c>)
    7526:	4798      	blx	r3
		break;
    7528:	e026      	b.n	7578 <socket_cb+0x100>
				err = 0;
    752a:	4b16      	ldr	r3, [pc, #88]	; (7584 <socket_cb+0x10c>)
    752c:	2200      	movs	r2, #0
    752e:	701a      	strb	r2, [r3, #0]
				sent_bytes = s16SentBytes;
    7530:	2312      	movs	r3, #18
    7532:	18fb      	adds	r3, r7, r3
    7534:	2200      	movs	r2, #0
    7536:	5e9a      	ldrsh	r2, [r3, r2]
    7538:	4b18      	ldr	r3, [pc, #96]	; (759c <socket_cb+0x124>)
    753a:	601a      	str	r2, [r3, #0]
		break;
    753c:	e01c      	b.n	7578 <socket_cb+0x100>
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    753e:	683b      	ldr	r3, [r7, #0]
    7540:	60fb      	str	r3, [r7, #12]
			state = u8Msg;				
    7542:	1dbb      	adds	r3, r7, #6
    7544:	2200      	movs	r2, #0
    7546:	569a      	ldrsb	r2, [r3, r2]
    7548:	4b0d      	ldr	r3, [pc, #52]	; (7580 <socket_cb+0x108>)
    754a:	701a      	strb	r2, [r3, #0]
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    754c:	68fb      	ldr	r3, [r7, #12]
    754e:	2b00      	cmp	r3, #0
    7550:	d00e      	beq.n	7570 <socket_cb+0xf8>
    7552:	68fb      	ldr	r3, [r7, #12]
    7554:	2204      	movs	r2, #4
    7556:	5e9b      	ldrsh	r3, [r3, r2]
    7558:	2b00      	cmp	r3, #0
    755a:	dd09      	ble.n	7570 <socket_cb+0xf8>
				received_bytes = pstrRecv->s16BufferSize;
    755c:	68fb      	ldr	r3, [r7, #12]
    755e:	2204      	movs	r2, #4
    7560:	5e9b      	ldrsh	r3, [r3, r2]
    7562:	001a      	movs	r2, r3
    7564:	4b0e      	ldr	r3, [pc, #56]	; (75a0 <socket_cb+0x128>)
    7566:	601a      	str	r2, [r3, #0]
				err = 0;
    7568:	4b06      	ldr	r3, [pc, #24]	; (7584 <socket_cb+0x10c>)
    756a:	2200      	movs	r2, #0
    756c:	701a      	strb	r2, [r3, #0]
		break;
    756e:	e002      	b.n	7576 <socket_cb+0xfe>
				err = -1;
    7570:	4b04      	ldr	r3, [pc, #16]	; (7584 <socket_cb+0x10c>)
    7572:	22ff      	movs	r2, #255	; 0xff
    7574:	701a      	strb	r2, [r3, #0]
		break;
    7576:	46c0      	nop			; (mov r8, r8)
	}
}
    7578:	46c0      	nop			; (mov r8, r8)
    757a:	46bd      	mov	sp, r7
    757c:	b006      	add	sp, #24
    757e:	bd80      	pop	{r7, pc}
    7580:	20000003 	.word	0x20000003
    7584:	20001000 	.word	0x20001000
    7588:	0001e31c 	.word	0x0001e31c
    758c:	0001bd69 	.word	0x0001bd69
    7590:	0001e338 	.word	0x0001e338
    7594:	0001bc4d 	.word	0x0001bc4d
    7598:	0001e354 	.word	0x0001e354
    759c:	20001008 	.word	0x20001008
    75a0:	2000100c 	.word	0x2000100c

000075a4 <wait_for_event>:

static void wait_for_event(uint8_t msg)
{
    75a4:	b580      	push	{r7, lr}
    75a6:	b082      	sub	sp, #8
    75a8:	af00      	add	r7, sp, #0
    75aa:	0002      	movs	r2, r0
    75ac:	1dfb      	adds	r3, r7, #7
    75ae:	701a      	strb	r2, [r3, #0]
	state = -1;
    75b0:	4b09      	ldr	r3, [pc, #36]	; (75d8 <wait_for_event+0x34>)
    75b2:	22ff      	movs	r2, #255	; 0xff
    75b4:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		m2m_wifi_handle_events(NULL);
    75b6:	2000      	movs	r0, #0
    75b8:	4b08      	ldr	r3, [pc, #32]	; (75dc <wait_for_event+0x38>)
    75ba:	4798      	blx	r3
		if(state == msg)
    75bc:	4b06      	ldr	r3, [pc, #24]	; (75d8 <wait_for_event+0x34>)
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	b25b      	sxtb	r3, r3
    75c2:	001a      	movs	r2, r3
    75c4:	1dfb      	adds	r3, r7, #7
    75c6:	781b      	ldrb	r3, [r3, #0]
    75c8:	429a      	cmp	r2, r3
    75ca:	d000      	beq.n	75ce <wait_for_event+0x2a>
		m2m_wifi_handle_events(NULL);
    75cc:	e7f3      	b.n	75b6 <wait_for_event+0x12>
		{
			return;
    75ce:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    75d0:	46bd      	mov	sp, r7
    75d2:	b002      	add	sp, #8
    75d4:	bd80      	pop	{r7, pc}
    75d6:	46c0      	nop			; (mov r8, r8)
    75d8:	20000003 	.word	0x20000003
    75dc:	0000234d 	.word	0x0000234d

000075e0 <iot_tls_init>:

int iot_tls_init(Network *pNetwork) {
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	
	if(pNetwork == NULL) {
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	2b00      	cmp	r3, #0
    75ec:	d102      	bne.n	75f4 <iot_tls_init+0x14>
		return NULL_VALUE_ERROR;
    75ee:	2302      	movs	r3, #2
    75f0:	425b      	negs	r3, r3
    75f2:	e01e      	b.n	7632 <iot_tls_init+0x52>
	}
	
	pNetwork->my_socket = -1;
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	2201      	movs	r2, #1
    75f8:	4252      	negs	r2, r2
    75fa:	601a      	str	r2, [r3, #0]
	pNetwork->connect = iot_tls_connect;
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	4a0f      	ldr	r2, [pc, #60]	; (763c <iot_tls_init+0x5c>)
    7600:	605a      	str	r2, [r3, #4]
	pNetwork->mqttread = iot_tls_read;
    7602:	687b      	ldr	r3, [r7, #4]
    7604:	4a0e      	ldr	r2, [pc, #56]	; (7640 <iot_tls_init+0x60>)
    7606:	609a      	str	r2, [r3, #8]
	pNetwork->mqttwrite = iot_tls_write;
    7608:	687b      	ldr	r3, [r7, #4]
    760a:	4a0e      	ldr	r2, [pc, #56]	; (7644 <iot_tls_init+0x64>)
    760c:	60da      	str	r2, [r3, #12]
	pNetwork->disconnect = iot_tls_disconnect;
    760e:	687b      	ldr	r3, [r7, #4]
    7610:	4a0d      	ldr	r2, [pc, #52]	; (7648 <iot_tls_init+0x68>)
    7612:	611a      	str	r2, [r3, #16]
	pNetwork->isConnected = iot_tls_is_connected;
    7614:	687b      	ldr	r3, [r7, #4]
    7616:	4a0d      	ldr	r2, [pc, #52]	; (764c <iot_tls_init+0x6c>)
    7618:	615a      	str	r2, [r3, #20]
	pNetwork->destroy = iot_tls_destroy;
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	4a0c      	ldr	r2, [pc, #48]	; (7650 <iot_tls_init+0x70>)
    761e:	619a      	str	r2, [r3, #24]
	
	/* Initialize Socket module */
	socketInit();
    7620:	4b0c      	ldr	r3, [pc, #48]	; (7654 <iot_tls_init+0x74>)
    7622:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
    7624:	4a0c      	ldr	r2, [pc, #48]	; (7658 <iot_tls_init+0x78>)
    7626:	4b0d      	ldr	r3, [pc, #52]	; (765c <iot_tls_init+0x7c>)
    7628:	0011      	movs	r1, r2
    762a:	0018      	movs	r0, r3
    762c:	4b0c      	ldr	r3, [pc, #48]	; (7660 <iot_tls_init+0x80>)
    762e:	4798      	blx	r3

	
	return NONE_ERROR;
    7630:	2300      	movs	r3, #0
}
    7632:	0018      	movs	r0, r3
    7634:	46bd      	mov	sp, r7
    7636:	b002      	add	sp, #8
    7638:	bd80      	pop	{r7, pc}
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	00007679 	.word	0x00007679
    7640:	00007865 	.word	0x00007865
    7644:	000077c5 	.word	0x000077c5
    7648:	00007985 	.word	0x00007985
    764c:	00007665 	.word	0x00007665
    7650:	000079b5 	.word	0x000079b5
    7654:	0000539d 	.word	0x0000539d
    7658:	00007405 	.word	0x00007405
    765c:	00007479 	.word	0x00007479
    7660:	000053ed 	.word	0x000053ed

00007664 <iot_tls_is_connected>:

int iot_tls_is_connected(Network *pNetwork) {
    7664:	b580      	push	{r7, lr}
    7666:	b082      	sub	sp, #8
    7668:	af00      	add	r7, sp, #0
    766a:	6078      	str	r0, [r7, #4]
	/* Use this to add implementation which can check for physical layer disconnect */
	return 1;
    766c:	2301      	movs	r3, #1
}
    766e:	0018      	movs	r0, r3
    7670:	46bd      	mov	sp, r7
    7672:	b002      	add	sp, #8
    7674:	bd80      	pop	{r7, pc}
	...

00007678 <iot_tls_connect>:

int iot_tls_connect(Network *pNetwork, TLSConnectParams params) {
    7678:	b084      	sub	sp, #16
    767a:	b590      	push	{r4, r7, lr}
    767c:	b089      	sub	sp, #36	; 0x24
    767e:	af00      	add	r7, sp, #0
    7680:	6078      	str	r0, [r7, #4]
    7682:	2004      	movs	r0, #4
    7684:	2430      	movs	r4, #48	; 0x30
    7686:	46a4      	mov	ip, r4
    7688:	44bc      	add	ip, r7
    768a:	4460      	add	r0, ip
    768c:	6001      	str	r1, [r0, #0]
    768e:	6042      	str	r2, [r0, #4]
    7690:	6083      	str	r3, [r0, #8]
	IoT_Error_t ret = TCP_CONNECT_ERROR;
    7692:	231f      	movs	r3, #31
    7694:	18fb      	adds	r3, r7, r3
    7696:	22f8      	movs	r2, #248	; 0xf8
    7698:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr;
	SOCKET tls_socket = -1;
    769a:	231e      	movs	r3, #30
    769c:	18fb      	adds	r3, r7, r3
    769e:	22ff      	movs	r2, #255	; 0xff
    76a0:	701a      	strb	r2, [r3, #0]
	
	gethostbyname((uint8_t*)params.pDestinationURL);
    76a2:	2304      	movs	r3, #4
    76a4:	2230      	movs	r2, #48	; 0x30
    76a6:	4694      	mov	ip, r2
    76a8:	44bc      	add	ip, r7
    76aa:	4463      	add	r3, ip
    76ac:	68db      	ldr	r3, [r3, #12]
    76ae:	0018      	movs	r0, r3
    76b0:	4b3d      	ldr	r3, [pc, #244]	; (77a8 <iot_tls_connect+0x130>)
    76b2:	4798      	blx	r3
	wait_for_event(DNS_REQUEST);
    76b4:	2019      	movs	r0, #25
    76b6:	4b3d      	ldr	r3, [pc, #244]	; (77ac <iot_tls_connect+0x134>)
    76b8:	4798      	blx	r3
	if(gu32HostIp != 0)
    76ba:	4b3d      	ldr	r3, [pc, #244]	; (77b0 <iot_tls_connect+0x138>)
    76bc:	681b      	ldr	r3, [r3, #0]
    76be:	2b00      	cmp	r3, #0
    76c0:	d062      	beq.n	7788 <iot_tls_connect+0x110>
	{
		addr.sin_family = AF_INET;
    76c2:	230c      	movs	r3, #12
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	2202      	movs	r2, #2
    76c8:	801a      	strh	r2, [r3, #0]
		addr.sin_addr.s_addr = gu32HostIp;
    76ca:	4b39      	ldr	r3, [pc, #228]	; (77b0 <iot_tls_connect+0x138>)
    76cc:	681a      	ldr	r2, [r3, #0]
    76ce:	230c      	movs	r3, #12
    76d0:	18fb      	adds	r3, r7, r3
    76d2:	605a      	str	r2, [r3, #4]
		addr.sin_port = _htons(params.DestinationPort);	
    76d4:	2304      	movs	r3, #4
    76d6:	2230      	movs	r2, #48	; 0x30
    76d8:	4694      	mov	ip, r2
    76da:	44bc      	add	ip, r7
    76dc:	4463      	add	r3, ip
    76de:	691b      	ldr	r3, [r3, #16]
    76e0:	b29b      	uxth	r3, r3
    76e2:	021b      	lsls	r3, r3, #8
    76e4:	b21a      	sxth	r2, r3
    76e6:	2304      	movs	r3, #4
    76e8:	2130      	movs	r1, #48	; 0x30
    76ea:	468c      	mov	ip, r1
    76ec:	44bc      	add	ip, r7
    76ee:	4463      	add	r3, ip
    76f0:	691b      	ldr	r3, [r3, #16]
    76f2:	b29b      	uxth	r3, r3
    76f4:	0a1b      	lsrs	r3, r3, #8
    76f6:	b29b      	uxth	r3, r3
    76f8:	b21b      	sxth	r3, r3
    76fa:	4313      	orrs	r3, r2
    76fc:	b21b      	sxth	r3, r3
    76fe:	b29a      	uxth	r2, r3
    7700:	230c      	movs	r3, #12
    7702:	18fb      	adds	r3, r7, r3
    7704:	805a      	strh	r2, [r3, #2]
		//sslSetActiveCipherSuites(SSL_ENABLE_ALL_SUITES & ~(SSL_ENABLE_RSA_GCM_SUITES|SSL_ENABLE_DHE_GCM_SUITES
		//							|SSL_ENABLE_ECDHE_GCM_SUITES | SSL_ENABLE_ECDHE_SHA256_SUITES | SSL_ENABLE_ECDHE_SHA_SUITES));
		if ((tls_socket = socket(AF_INET, SOCK_STREAM,SOCKET_FLAGS_SSL)) < 0) 
    7706:	231e      	movs	r3, #30
    7708:	18fc      	adds	r4, r7, r3
    770a:	2201      	movs	r2, #1
    770c:	2101      	movs	r1, #1
    770e:	2002      	movs	r0, #2
    7710:	4b28      	ldr	r3, [pc, #160]	; (77b4 <iot_tls_connect+0x13c>)
    7712:	4798      	blx	r3
    7714:	0003      	movs	r3, r0
    7716:	7023      	strb	r3, [r4, #0]
    7718:	231e      	movs	r3, #30
    771a:	18fb      	adds	r3, r7, r3
    771c:	781b      	ldrb	r3, [r3, #0]
    771e:	2b7f      	cmp	r3, #127	; 0x7f
    7720:	d902      	bls.n	7728 <iot_tls_connect+0xb0>
		{
			return SSL_CONNECT_ERROR;
    7722:	2309      	movs	r3, #9
    7724:	425b      	negs	r3, r3
    7726:	e037      	b.n	7798 <iot_tls_connect+0x120>
		}
		/* Connect server */
		if(connect(tls_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) < 0)
    7728:	230c      	movs	r3, #12
    772a:	18f9      	adds	r1, r7, r3
    772c:	231e      	movs	r3, #30
    772e:	18fb      	adds	r3, r7, r3
    7730:	781b      	ldrb	r3, [r3, #0]
    7732:	b25b      	sxtb	r3, r3
    7734:	2210      	movs	r2, #16
    7736:	0018      	movs	r0, r3
    7738:	4b1f      	ldr	r3, [pc, #124]	; (77b8 <iot_tls_connect+0x140>)
    773a:	4798      	blx	r3
    773c:	1e03      	subs	r3, r0, #0
    773e:	da0d      	bge.n	775c <iot_tls_connect+0xe4>
		{
			pNetwork->my_socket = -1;
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	2201      	movs	r2, #1
    7744:	4252      	negs	r2, r2
    7746:	601a      	str	r2, [r3, #0]
			close(tls_socket);
    7748:	231e      	movs	r3, #30
    774a:	18fb      	adds	r3, r7, r3
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	b25b      	sxtb	r3, r3
    7750:	0018      	movs	r0, r3
    7752:	4b1a      	ldr	r3, [pc, #104]	; (77bc <iot_tls_connect+0x144>)
    7754:	4798      	blx	r3
			return SSL_CONNECT_ERROR;
    7756:	2309      	movs	r3, #9
    7758:	425b      	negs	r3, r3
    775a:	e01d      	b.n	7798 <iot_tls_connect+0x120>
		}
		wait_for_event(SOCKET_MSG_CONNECT);
    775c:	2005      	movs	r0, #5
    775e:	4b13      	ldr	r3, [pc, #76]	; (77ac <iot_tls_connect+0x134>)
    7760:	4798      	blx	r3
		if(err == 0)
    7762:	4b17      	ldr	r3, [pc, #92]	; (77c0 <iot_tls_connect+0x148>)
    7764:	781b      	ldrb	r3, [r3, #0]
    7766:	b25b      	sxtb	r3, r3
    7768:	2b00      	cmp	r3, #0
    776a:	d10a      	bne.n	7782 <iot_tls_connect+0x10a>
		{
			pNetwork->my_socket = tls_socket;
    776c:	231e      	movs	r3, #30
    776e:	18fb      	adds	r3, r7, r3
    7770:	2200      	movs	r2, #0
    7772:	569a      	ldrsb	r2, [r3, r2]
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	601a      	str	r2, [r3, #0]
			ret = NONE_ERROR;
    7778:	231f      	movs	r3, #31
    777a:	18fb      	adds	r3, r7, r3
    777c:	2200      	movs	r2, #0
    777e:	701a      	strb	r2, [r3, #0]
    7780:	e006      	b.n	7790 <iot_tls_connect+0x118>
		}
		else
		{
			return SSL_CONNECT_ERROR;
    7782:	2309      	movs	r3, #9
    7784:	425b      	negs	r3, r3
    7786:	e007      	b.n	7798 <iot_tls_connect+0x120>
		}
	}
	else
	{
		ret = SSL_CONNECT_ERROR;
    7788:	231f      	movs	r3, #31
    778a:	18fb      	adds	r3, r7, r3
    778c:	22f7      	movs	r2, #247	; 0xf7
    778e:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    7790:	231f      	movs	r3, #31
    7792:	18fb      	adds	r3, r7, r3
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	b25b      	sxtb	r3, r3
}
    7798:	0018      	movs	r0, r3
    779a:	46bd      	mov	sp, r7
    779c:	b009      	add	sp, #36	; 0x24
    779e:	bc90      	pop	{r4, r7}
    77a0:	bc08      	pop	{r3}
    77a2:	b004      	add	sp, #16
    77a4:	4718      	bx	r3
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	00005cad 	.word	0x00005cad
    77ac:	000075a5 	.word	0x000075a5
    77b0:	20001004 	.word	0x20001004
    77b4:	00005415 	.word	0x00005415
    77b8:	00005779 	.word	0x00005779
    77bc:	00005b71 	.word	0x00005b71
    77c0:	20001000 	.word	0x20001000

000077c4 <iot_tls_write>:

int iot_tls_write(Network *pNetwork, unsigned char *pMsg, int len, int timeout_ms) {
    77c4:	b590      	push	{r4, r7, lr}
    77c6:	b089      	sub	sp, #36	; 0x24
    77c8:	af00      	add	r7, sp, #0
    77ca:	60f8      	str	r0, [r7, #12]
    77cc:	60b9      	str	r1, [r7, #8]
    77ce:	607a      	str	r2, [r7, #4]
    77d0:	603b      	str	r3, [r7, #0]
	SOCKET tls_sock = -1;
    77d2:	231f      	movs	r3, #31
    77d4:	18fb      	adds	r3, r7, r3
    77d6:	22ff      	movs	r2, #255	; 0xff
    77d8:	701a      	strb	r2, [r3, #0]
	int ret = 0, i = 0;
    77da:	2300      	movs	r3, #0
    77dc:	61bb      	str	r3, [r7, #24]
    77de:	2300      	movs	r3, #0
    77e0:	617b      	str	r3, [r7, #20]

	if (pNetwork == NULL || pMsg == NULL || pNetwork->my_socket < 0
    77e2:	68fb      	ldr	r3, [r7, #12]
    77e4:	2b00      	cmp	r3, #0
    77e6:	d009      	beq.n	77fc <iot_tls_write+0x38>
    77e8:	68bb      	ldr	r3, [r7, #8]
    77ea:	2b00      	cmp	r3, #0
    77ec:	d006      	beq.n	77fc <iot_tls_write+0x38>
    77ee:	68fb      	ldr	r3, [r7, #12]
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	2b00      	cmp	r3, #0
    77f4:	db02      	blt.n	77fc <iot_tls_write+0x38>
	|| timeout_ms == 0) {
    77f6:	683b      	ldr	r3, [r7, #0]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d102      	bne.n	7802 <iot_tls_write+0x3e>
		return (NULL_VALUE_ERROR);
    77fc:	2302      	movs	r3, #2
    77fe:	425b      	negs	r3, r3
    7800:	e023      	b.n	784a <iot_tls_write+0x86>
	}

	tls_sock = (SOCKET)pNetwork->my_socket;
    7802:	68fb      	ldr	r3, [r7, #12]
    7804:	681a      	ldr	r2, [r3, #0]
    7806:	231f      	movs	r3, #31
    7808:	18fb      	adds	r3, r7, r3
    780a:	701a      	strb	r2, [r3, #0]
		printf("%02x:",pMsg[i]);
	}
	printf("\n");
#endif
   
	ret = send(tls_sock, pMsg, len, 0);
    780c:	687b      	ldr	r3, [r7, #4]
    780e:	b29a      	uxth	r2, r3
    7810:	68b9      	ldr	r1, [r7, #8]
    7812:	231f      	movs	r3, #31
    7814:	18fb      	adds	r3, r7, r3
    7816:	2000      	movs	r0, #0
    7818:	5618      	ldrsb	r0, [r3, r0]
    781a:	2300      	movs	r3, #0
    781c:	4c0d      	ldr	r4, [pc, #52]	; (7854 <iot_tls_write+0x90>)
    781e:	47a0      	blx	r4
    7820:	0003      	movs	r3, r0
    7822:	61bb      	str	r3, [r7, #24]
	if( ret < 0)
    7824:	69bb      	ldr	r3, [r7, #24]
    7826:	2b00      	cmp	r3, #0
    7828:	da02      	bge.n	7830 <iot_tls_write+0x6c>
	{
		return SSL_WRITE_ERROR;
    782a:	230c      	movs	r3, #12
    782c:	425b      	negs	r3, r3
    782e:	e00c      	b.n	784a <iot_tls_write+0x86>
	}
	wait_for_event(SOCKET_MSG_SEND);
    7830:	2007      	movs	r0, #7
    7832:	4b09      	ldr	r3, [pc, #36]	; (7858 <iot_tls_write+0x94>)
    7834:	4798      	blx	r3
	if (err == 0) {
    7836:	4b09      	ldr	r3, [pc, #36]	; (785c <iot_tls_write+0x98>)
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	b25b      	sxtb	r3, r3
    783c:	2b00      	cmp	r3, #0
    783e:	d102      	bne.n	7846 <iot_tls_write+0x82>
		return (sent_bytes);
    7840:	4b07      	ldr	r3, [pc, #28]	; (7860 <iot_tls_write+0x9c>)
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	e001      	b.n	784a <iot_tls_write+0x86>
	}
	return (SSL_WRITE_ERROR);
    7846:	230c      	movs	r3, #12
    7848:	425b      	negs	r3, r3
}
    784a:	0018      	movs	r0, r3
    784c:	46bd      	mov	sp, r7
    784e:	b009      	add	sp, #36	; 0x24
    7850:	bd90      	pop	{r4, r7, pc}
    7852:	46c0      	nop			; (mov r8, r8)
    7854:	0000588d 	.word	0x0000588d
    7858:	000075a5 	.word	0x000075a5
    785c:	20001000 	.word	0x20001000
    7860:	20001008 	.word	0x20001008

00007864 <iot_tls_read>:
volatile uint32_t ms_ticks;
int iot_tls_read(Network *pNetwork, unsigned char *pMsg, int len, int timeout_ms) {
    7864:	b590      	push	{r4, r7, lr}
    7866:	b089      	sub	sp, #36	; 0x24
    7868:	af00      	add	r7, sp, #0
    786a:	60f8      	str	r0, [r7, #12]
    786c:	60b9      	str	r1, [r7, #8]
    786e:	607a      	str	r2, [r7, #4]
    7870:	603b      	str	r3, [r7, #0]
	 int ret = 0,i = 0;
    7872:	2300      	movs	r3, #0
    7874:	61fb      	str	r3, [r7, #28]
    7876:	2300      	movs	r3, #0
    7878:	61bb      	str	r3, [r7, #24]
	 SOCKET tls_socket = NULL;
    787a:	2317      	movs	r3, #23
    787c:	18fb      	adds	r3, r7, r3
    787e:	2200      	movs	r2, #0
    7880:	701a      	strb	r2, [r3, #0]
	 if (pNetwork == NULL || pMsg == NULL || pNetwork->my_socket < 0
    7882:	68fb      	ldr	r3, [r7, #12]
    7884:	2b00      	cmp	r3, #0
    7886:	d009      	beq.n	789c <iot_tls_read+0x38>
    7888:	68bb      	ldr	r3, [r7, #8]
    788a:	2b00      	cmp	r3, #0
    788c:	d006      	beq.n	789c <iot_tls_read+0x38>
    788e:	68fb      	ldr	r3, [r7, #12]
    7890:	681b      	ldr	r3, [r3, #0]
    7892:	2b00      	cmp	r3, #0
    7894:	db02      	blt.n	789c <iot_tls_read+0x38>
		 	 || timeout_ms == 0) {
    7896:	683b      	ldr	r3, [r7, #0]
    7898:	2b00      	cmp	r3, #0
    789a:	d109      	bne.n	78b0 <iot_tls_read+0x4c>
		if(timeout_ms == 0 && received_bytes != 0){
    789c:	683b      	ldr	r3, [r7, #0]
    789e:	2b00      	cmp	r3, #0
    78a0:	d103      	bne.n	78aa <iot_tls_read+0x46>
    78a2:	4b30      	ldr	r3, [pc, #192]	; (7964 <iot_tls_read+0x100>)
    78a4:	681b      	ldr	r3, [r3, #0]
    78a6:	2b00      	cmp	r3, #0
    78a8:	d102      	bne.n	78b0 <iot_tls_read+0x4c>
			
		}
		else{
			return (NULL_VALUE_ERROR);
    78aa:	2302      	movs	r3, #2
    78ac:	425b      	negs	r3, r3
    78ae:	e055      	b.n	795c <iot_tls_read+0xf8>
		}
	 }
	 tls_socket = (SOCKET)pNetwork->my_socket;
    78b0:	68fb      	ldr	r3, [r7, #12]
    78b2:	681a      	ldr	r2, [r3, #0]
    78b4:	2317      	movs	r3, #23
    78b6:	18fb      	adds	r3, r7, r3
    78b8:	701a      	strb	r2, [r3, #0]
	 if(received_bytes == 0)
    78ba:	4b2a      	ldr	r3, [pc, #168]	; (7964 <iot_tls_read+0x100>)
    78bc:	681b      	ldr	r3, [r3, #0]
    78be:	2b00      	cmp	r3, #0
    78c0:	d138      	bne.n	7934 <iot_tls_read+0xd0>
	 {
		buf_ptr = &gau8SocketTestBuffer;
    78c2:	4b29      	ldr	r3, [pc, #164]	; (7968 <iot_tls_read+0x104>)
    78c4:	4a29      	ldr	r2, [pc, #164]	; (796c <iot_tls_read+0x108>)
    78c6:	601a      	str	r2, [r3, #0]
		received_bytes = 0;
    78c8:	4b26      	ldr	r3, [pc, #152]	; (7964 <iot_tls_read+0x100>)
    78ca:	2200      	movs	r2, #0
    78cc:	601a      	str	r2, [r3, #0]
		ret = recv(tls_socket, gau8SocketTestBuffer,sizeof(gau8SocketTestBuffer), timeout_ms);	
    78ce:	683a      	ldr	r2, [r7, #0]
    78d0:	4c27      	ldr	r4, [pc, #156]	; (7970 <iot_tls_read+0x10c>)
    78d2:	4926      	ldr	r1, [pc, #152]	; (796c <iot_tls_read+0x108>)
    78d4:	2317      	movs	r3, #23
    78d6:	18fb      	adds	r3, r7, r3
    78d8:	2000      	movs	r0, #0
    78da:	5618      	ldrsb	r0, [r3, r0]
    78dc:	0013      	movs	r3, r2
    78de:	0022      	movs	r2, r4
    78e0:	4c24      	ldr	r4, [pc, #144]	; (7974 <iot_tls_read+0x110>)
    78e2:	47a0      	blx	r4
    78e4:	0003      	movs	r3, r0
    78e6:	61fb      	str	r3, [r7, #28]
		if( ret < 0)
    78e8:	69fb      	ldr	r3, [r7, #28]
    78ea:	2b00      	cmp	r3, #0
    78ec:	da02      	bge.n	78f4 <iot_tls_read+0x90>
		{
			return SSL_READ_ERROR;
    78ee:	2314      	movs	r3, #20
    78f0:	425b      	negs	r3, r3
    78f2:	e033      	b.n	795c <iot_tls_read+0xf8>
		}
		wait_for_event(SOCKET_MSG_RECV);
    78f4:	2006      	movs	r0, #6
    78f6:	4b20      	ldr	r3, [pc, #128]	; (7978 <iot_tls_read+0x114>)
    78f8:	4798      	blx	r3
		 if (err == -1) {
    78fa:	4b20      	ldr	r3, [pc, #128]	; (797c <iot_tls_read+0x118>)
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	b25b      	sxtb	r3, r3
    7900:	3301      	adds	r3, #1
    7902:	d102      	bne.n	790a <iot_tls_read+0xa6>
			 return SSL_READ_ERROR;
    7904:	2314      	movs	r3, #20
    7906:	425b      	negs	r3, r3
    7908:	e028      	b.n	795c <iot_tls_read+0xf8>
		 }
		 else{
			 memcpy(pMsg,buf_ptr,len);
    790a:	4b17      	ldr	r3, [pc, #92]	; (7968 <iot_tls_read+0x104>)
    790c:	6819      	ldr	r1, [r3, #0]
    790e:	687a      	ldr	r2, [r7, #4]
    7910:	68bb      	ldr	r3, [r7, #8]
    7912:	0018      	movs	r0, r3
    7914:	4b1a      	ldr	r3, [pc, #104]	; (7980 <iot_tls_read+0x11c>)
    7916:	4798      	blx	r3
			 received_bytes -= len;
    7918:	4b12      	ldr	r3, [pc, #72]	; (7964 <iot_tls_read+0x100>)
    791a:	681a      	ldr	r2, [r3, #0]
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	1ad2      	subs	r2, r2, r3
    7920:	4b10      	ldr	r3, [pc, #64]	; (7964 <iot_tls_read+0x100>)
    7922:	601a      	str	r2, [r3, #0]
			 buf_ptr += len;
    7924:	4b10      	ldr	r3, [pc, #64]	; (7968 <iot_tls_read+0x104>)
    7926:	681a      	ldr	r2, [r3, #0]
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	18d2      	adds	r2, r2, r3
    792c:	4b0e      	ldr	r3, [pc, #56]	; (7968 <iot_tls_read+0x104>)
    792e:	601a      	str	r2, [r3, #0]
				  printf("%02x:",pMsg[i]);
			  }
			  printf("\n");
#endif
			 
			 return len;
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	e013      	b.n	795c <iot_tls_read+0xf8>
		 }
	 }
	 else{
		 memcpy(pMsg,buf_ptr,len);
    7934:	4b0c      	ldr	r3, [pc, #48]	; (7968 <iot_tls_read+0x104>)
    7936:	6819      	ldr	r1, [r3, #0]
    7938:	687a      	ldr	r2, [r7, #4]
    793a:	68bb      	ldr	r3, [r7, #8]
    793c:	0018      	movs	r0, r3
    793e:	4b10      	ldr	r3, [pc, #64]	; (7980 <iot_tls_read+0x11c>)
    7940:	4798      	blx	r3
		 received_bytes -= len;
    7942:	4b08      	ldr	r3, [pc, #32]	; (7964 <iot_tls_read+0x100>)
    7944:	681a      	ldr	r2, [r3, #0]
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	1ad2      	subs	r2, r2, r3
    794a:	4b06      	ldr	r3, [pc, #24]	; (7964 <iot_tls_read+0x100>)
    794c:	601a      	str	r2, [r3, #0]
		 buf_ptr += len;
    794e:	4b06      	ldr	r3, [pc, #24]	; (7968 <iot_tls_read+0x104>)
    7950:	681a      	ldr	r2, [r3, #0]
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	18d2      	adds	r2, r2, r3
    7956:	4b04      	ldr	r3, [pc, #16]	; (7968 <iot_tls_read+0x104>)
    7958:	601a      	str	r2, [r3, #0]
			  printf("%02x:",pMsg[i]);
		  }
		  printf("\n");
#endif
		 
		 return len;		 
    795a:	687b      	ldr	r3, [r7, #4]
	 }
	 return (SSL_READ_ERROR);
}
    795c:	0018      	movs	r0, r3
    795e:	46bd      	mov	sp, r7
    7960:	b009      	add	sp, #36	; 0x24
    7962:	bd90      	pop	{r4, r7, pc}
    7964:	2000100c 	.word	0x2000100c
    7968:	20000004 	.word	0x20000004
    796c:	20001010 	.word	0x20001010
    7970:	000005b4 	.word	0x000005b4
    7974:	000059f1 	.word	0x000059f1
    7978:	000075a5 	.word	0x000075a5
    797c:	20001000 	.word	0x20001000
    7980:	0001bab7 	.word	0x0001bab7

00007984 <iot_tls_disconnect>:

void iot_tls_disconnect(Network *pNetwork) {
    7984:	b580      	push	{r7, lr}
    7986:	b082      	sub	sp, #8
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
	if (pNetwork == NULL || pNetwork->my_socket < 0) {
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	2b00      	cmp	r3, #0
    7990:	d00a      	beq.n	79a8 <iot_tls_disconnect+0x24>
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	2b00      	cmp	r3, #0
    7998:	db06      	blt.n	79a8 <iot_tls_disconnect+0x24>
		return;
	}
	close(pNetwork->my_socket);
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	b25b      	sxtb	r3, r3
    79a0:	0018      	movs	r0, r3
    79a2:	4b03      	ldr	r3, [pc, #12]	; (79b0 <iot_tls_disconnect+0x2c>)
    79a4:	4798      	blx	r3
    79a6:	e000      	b.n	79aa <iot_tls_disconnect+0x26>
		return;
    79a8:	46c0      	nop			; (mov r8, r8)
}
    79aa:	46bd      	mov	sp, r7
    79ac:	b002      	add	sp, #8
    79ae:	bd80      	pop	{r7, pc}
    79b0:	00005b71 	.word	0x00005b71

000079b4 <iot_tls_destroy>:

int iot_tls_destroy(Network *pNetwork) {
    79b4:	b580      	push	{r7, lr}
    79b6:	b082      	sub	sp, #8
    79b8:	af00      	add	r7, sp, #0
    79ba:	6078      	str	r0, [r7, #4]
	
	 if (pNetwork == NULL) {
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	2b00      	cmp	r3, #0
    79c0:	d102      	bne.n	79c8 <iot_tls_destroy+0x14>
		 return (NULL_VALUE_ERROR);
    79c2:	2302      	movs	r3, #2
    79c4:	425b      	negs	r3, r3
    79c6:	e00c      	b.n	79e2 <iot_tls_destroy+0x2e>
	 }

	 pNetwork->my_socket = 0;
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	2200      	movs	r2, #0
    79cc:	601a      	str	r2, [r3, #0]
	 pNetwork->mqttread = NULL;
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	2200      	movs	r2, #0
    79d2:	609a      	str	r2, [r3, #8]
	 pNetwork->mqttwrite = NULL;
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	2200      	movs	r2, #0
    79d8:	60da      	str	r2, [r3, #12]
	 pNetwork->disconnect = NULL;
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	2200      	movs	r2, #0
    79de:	611a      	str	r2, [r3, #16]

	 return (NONE_ERROR);
    79e0:	2300      	movs	r3, #0
}
    79e2:	0018      	movs	r0, r3
    79e4:	46bd      	mov	sp, r7
    79e6:	b002      	add	sp, #8
    79e8:	bd80      	pop	{r7, pc}

000079ea <NewMessageData>:
#include "timer_d21.h"
#include <string.h>

static void MQTTForceDisconnect(Client *c);

void NewMessageData(MessageData *md, MQTTString *aTopicName, MQTTMessage *aMessage, pApplicationHandler_t applicationHandler) {
    79ea:	b580      	push	{r7, lr}
    79ec:	b084      	sub	sp, #16
    79ee:	af00      	add	r7, sp, #0
    79f0:	60f8      	str	r0, [r7, #12]
    79f2:	60b9      	str	r1, [r7, #8]
    79f4:	607a      	str	r2, [r7, #4]
    79f6:	603b      	str	r3, [r7, #0]
    md->topicName = aTopicName;
    79f8:	68fb      	ldr	r3, [r7, #12]
    79fa:	68ba      	ldr	r2, [r7, #8]
    79fc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
    79fe:	68fb      	ldr	r3, [r7, #12]
    7a00:	687a      	ldr	r2, [r7, #4]
    7a02:	601a      	str	r2, [r3, #0]
    md->applicationHandler = applicationHandler;
    7a04:	68fb      	ldr	r3, [r7, #12]
    7a06:	683a      	ldr	r2, [r7, #0]
    7a08:	609a      	str	r2, [r3, #8]
}
    7a0a:	46c0      	nop			; (mov r8, r8)
    7a0c:	46bd      	mov	sp, r7
    7a0e:	b004      	add	sp, #16
    7a10:	bd80      	pop	{r7, pc}
	...

00007a14 <getNextPacketId>:

uint16_t getNextPacketId(Client *c) {
    7a14:	b580      	push	{r7, lr}
    7a16:	b082      	sub	sp, #8
    7a18:	af00      	add	r7, sp, #0
    7a1a:	6078      	str	r0, [r7, #4]
    return c->nextPacketId = (uint16_t)((MAX_PACKET_ID == c->nextPacketId) ? 1 : (c->nextPacketId + 1));
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	889b      	ldrh	r3, [r3, #4]
    7a20:	4a08      	ldr	r2, [pc, #32]	; (7a44 <getNextPacketId+0x30>)
    7a22:	4293      	cmp	r3, r2
    7a24:	d004      	beq.n	7a30 <getNextPacketId+0x1c>
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	889b      	ldrh	r3, [r3, #4]
    7a2a:	3301      	adds	r3, #1
    7a2c:	b29a      	uxth	r2, r3
    7a2e:	e000      	b.n	7a32 <getNextPacketId+0x1e>
    7a30:	2201      	movs	r2, #1
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	809a      	strh	r2, [r3, #4]
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	889b      	ldrh	r3, [r3, #4]
}
    7a3a:	0018      	movs	r0, r3
    7a3c:	46bd      	mov	sp, r7
    7a3e:	b002      	add	sp, #8
    7a40:	bd80      	pop	{r7, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	0000ffff 	.word	0x0000ffff

00007a48 <sendPacket>:

MQTTReturnCode sendPacket(Client *c, uint32_t length, Timer *timer) {
    7a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a4a:	46c6      	mov	lr, r8
    7a4c:	b500      	push	{lr}
    7a4e:	b086      	sub	sp, #24
    7a50:	af00      	add	r7, sp, #0
    7a52:	60f8      	str	r0, [r7, #12]
    7a54:	60b9      	str	r1, [r7, #8]
    7a56:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    7a58:	68fb      	ldr	r3, [r7, #12]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d002      	beq.n	7a64 <sendPacket+0x1c>
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	2b00      	cmp	r3, #0
    7a62:	d102      	bne.n	7a6a <sendPacket+0x22>
        return MQTT_NULL_VALUE_ERROR;
    7a64:	2306      	movs	r3, #6
    7a66:	425b      	negs	r3, r3
    7a68:	e03d      	b.n	7ae6 <sendPacket+0x9e>
    }

    int32_t sentLen = 0;
    7a6a:	2300      	movs	r3, #0
    7a6c:	613b      	str	r3, [r7, #16]
    uint32_t sent = 0;
    7a6e:	2300      	movs	r3, #0
    7a70:	617b      	str	r3, [r7, #20]

    if(length >= c->bufSize) {
    7a72:	68fb      	ldr	r3, [r7, #12]
    7a74:	699a      	ldr	r2, [r3, #24]
    7a76:	68bb      	ldr	r3, [r7, #8]
    7a78:	429a      	cmp	r2, r3
    7a7a:	d820      	bhi.n	7abe <sendPacket+0x76>
    	return MQTTPACKET_BUFFER_TOO_SHORT;
    7a7c:	2309      	movs	r3, #9
    7a7e:	425b      	negs	r3, r3
    7a80:	e031      	b.n	7ae6 <sendPacket+0x9e>
    }

    while(sent < length && !expired(timer)) {
        sentLen = c->networkStack.mqttwrite(&(c->networkStack), &c->buf[sent], (int)length, left_ms(timer));
    7a82:	68fb      	ldr	r3, [r7, #12]
    7a84:	22a4      	movs	r2, #164	; 0xa4
    7a86:	589c      	ldr	r4, [r3, r2]
    7a88:	68fb      	ldr	r3, [r7, #12]
    7a8a:	3398      	adds	r3, #152	; 0x98
    7a8c:	001d      	movs	r5, r3
    7a8e:	68fb      	ldr	r3, [r7, #12]
    7a90:	6a1a      	ldr	r2, [r3, #32]
    7a92:	697b      	ldr	r3, [r7, #20]
    7a94:	18d6      	adds	r6, r2, r3
    7a96:	68bb      	ldr	r3, [r7, #8]
    7a98:	4698      	mov	r8, r3
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	0018      	movs	r0, r3
    7a9e:	4b15      	ldr	r3, [pc, #84]	; (7af4 <sendPacket+0xac>)
    7aa0:	4798      	blx	r3
    7aa2:	0003      	movs	r3, r0
    7aa4:	4642      	mov	r2, r8
    7aa6:	0031      	movs	r1, r6
    7aa8:	0028      	movs	r0, r5
    7aaa:	47a0      	blx	r4
    7aac:	0003      	movs	r3, r0
    7aae:	613b      	str	r3, [r7, #16]
        if(sentLen < 0) {
    7ab0:	693b      	ldr	r3, [r7, #16]
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	db0e      	blt.n	7ad4 <sendPacket+0x8c>
            /* there was an error writing the data */
            break;
        }
        sent = sent + (uint32_t)sentLen;
    7ab6:	693b      	ldr	r3, [r7, #16]
    7ab8:	697a      	ldr	r2, [r7, #20]
    7aba:	18d3      	adds	r3, r2, r3
    7abc:	617b      	str	r3, [r7, #20]
    while(sent < length && !expired(timer)) {
    7abe:	697a      	ldr	r2, [r7, #20]
    7ac0:	68bb      	ldr	r3, [r7, #8]
    7ac2:	429a      	cmp	r2, r3
    7ac4:	d207      	bcs.n	7ad6 <sendPacket+0x8e>
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	0018      	movs	r0, r3
    7aca:	4b0b      	ldr	r3, [pc, #44]	; (7af8 <sendPacket+0xb0>)
    7acc:	4798      	blx	r3
    7ace:	1e03      	subs	r3, r0, #0
    7ad0:	d0d7      	beq.n	7a82 <sendPacket+0x3a>
    7ad2:	e000      	b.n	7ad6 <sendPacket+0x8e>
            break;
    7ad4:	46c0      	nop			; (mov r8, r8)
    }

    if(sent == length) {
    7ad6:	697a      	ldr	r2, [r7, #20]
    7ad8:	68bb      	ldr	r3, [r7, #8]
    7ada:	429a      	cmp	r2, r3
    7adc:	d101      	bne.n	7ae2 <sendPacket+0x9a>
        /* record the fact that we have successfully sent the packet */
        //countdown(&c->pingTimer, c->keepAliveInterval);
        return SUCCESS;
    7ade:	2300      	movs	r3, #0
    7ae0:	e001      	b.n	7ae6 <sendPacket+0x9e>
    }

    return FAILURE;
    7ae2:	2301      	movs	r3, #1
    7ae4:	425b      	negs	r3, r3
}
    7ae6:	0018      	movs	r0, r3
    7ae8:	46bd      	mov	sp, r7
    7aea:	b006      	add	sp, #24
    7aec:	bc04      	pop	{r2}
    7aee:	4690      	mov	r8, r2
    7af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7af2:	46c0      	nop			; (mov r8, r8)
    7af4:	000073b9 	.word	0x000073b9
    7af8:	000072d9 	.word	0x000072d9

00007afc <copyMQTTConnectData>:

void copyMQTTConnectData(MQTTPacket_connectData *destination, MQTTPacket_connectData *source) {
    7afc:	b580      	push	{r7, lr}
    7afe:	b082      	sub	sp, #8
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
    7b04:	6039      	str	r1, [r7, #0]
    if(NULL == destination || NULL == source) {
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d033      	beq.n	7b74 <copyMQTTConnectData+0x78>
    7b0c:	683b      	ldr	r3, [r7, #0]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d030      	beq.n	7b74 <copyMQTTConnectData+0x78>
        return;
    }
    destination->willFlag = source->willFlag;
    7b12:	683b      	ldr	r3, [r7, #0]
    7b14:	7dda      	ldrb	r2, [r3, #23]
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	75da      	strb	r2, [r3, #23]
    destination->MQTTVersion = source->MQTTVersion;
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	795a      	ldrb	r2, [r3, #5]
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	715a      	strb	r2, [r3, #5]
    destination->clientID.cstring = source->clientID.cstring;
    7b22:	683b      	ldr	r3, [r7, #0]
    7b24:	689a      	ldr	r2, [r3, #8]
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	609a      	str	r2, [r3, #8]
    destination->username.cstring = source->username.cstring;
    7b2a:	683b      	ldr	r3, [r7, #0]
    7b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	63da      	str	r2, [r3, #60]	; 0x3c
    destination->password.cstring = source->password.cstring;
    7b32:	683b      	ldr	r3, [r7, #0]
    7b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    7b36:	687b      	ldr	r3, [r7, #4]
    7b38:	649a      	str	r2, [r3, #72]	; 0x48
    destination->will.topicName.cstring = source->will.topicName.cstring;
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	6a1a      	ldr	r2, [r3, #32]
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	621a      	str	r2, [r3, #32]
    destination->will.message.cstring = source->will.message.cstring;
    7b42:	683b      	ldr	r3, [r7, #0]
    7b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	62da      	str	r2, [r3, #44]	; 0x2c
    destination->will.qos = source->will.qos;
    7b4a:	683b      	ldr	r3, [r7, #0]
    7b4c:	2239      	movs	r2, #57	; 0x39
    7b4e:	5c99      	ldrb	r1, [r3, r2]
    7b50:	687b      	ldr	r3, [r7, #4]
    7b52:	2239      	movs	r2, #57	; 0x39
    7b54:	5499      	strb	r1, [r3, r2]
    destination->will.retained = source->will.retained;
    7b56:	683b      	ldr	r3, [r7, #0]
    7b58:	2238      	movs	r2, #56	; 0x38
    7b5a:	5c99      	ldrb	r1, [r3, r2]
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	2238      	movs	r2, #56	; 0x38
    7b60:	5499      	strb	r1, [r3, r2]
    destination->keepAliveInterval = source->keepAliveInterval;
    7b62:	683b      	ldr	r3, [r7, #0]
    7b64:	8a9a      	ldrh	r2, [r3, #20]
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	829a      	strh	r2, [r3, #20]
    destination->cleansession = source->cleansession;
    7b6a:	683b      	ldr	r3, [r7, #0]
    7b6c:	7d9a      	ldrb	r2, [r3, #22]
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	759a      	strb	r2, [r3, #22]
    7b72:	e000      	b.n	7b76 <copyMQTTConnectData+0x7a>
        return;
    7b74:	46c0      	nop			; (mov r8, r8)
}
    7b76:	46bd      	mov	sp, r7
    7b78:	b002      	add	sp, #8
    7b7a:	bd80      	pop	{r7, pc}

00007b7c <MQTTClient>:

MQTTReturnCode MQTTClient(Client *c, uint32_t commandTimeoutMs,
                          unsigned char *buf, size_t bufSize, unsigned char *readbuf,
                          size_t readBufSize, uint8_t enableAutoReconnect,
                          networkInitHandler_t networkInitHandler,
                          TLSConnectParams *tlsConnectParams) {
    7b7c:	b580      	push	{r7, lr}
    7b7e:	b09a      	sub	sp, #104	; 0x68
    7b80:	af00      	add	r7, sp, #0
    7b82:	60f8      	str	r0, [r7, #12]
    7b84:	60b9      	str	r1, [r7, #8]
    7b86:	607a      	str	r2, [r7, #4]
    7b88:	603b      	str	r3, [r7, #0]
    if(NULL == c || NULL == tlsConnectParams || NULL == buf || NULL == readbuf
    7b8a:	68fb      	ldr	r3, [r7, #12]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d00d      	beq.n	7bac <MQTTClient+0x30>
    7b90:	2380      	movs	r3, #128	; 0x80
    7b92:	18fb      	adds	r3, r7, r3
    7b94:	681b      	ldr	r3, [r3, #0]
    7b96:	2b00      	cmp	r3, #0
    7b98:	d008      	beq.n	7bac <MQTTClient+0x30>
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d005      	beq.n	7bac <MQTTClient+0x30>
    7ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d002      	beq.n	7bac <MQTTClient+0x30>
       || NULL == networkInitHandler) {
    7ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d102      	bne.n	7bb2 <MQTTClient+0x36>
        return MQTT_NULL_VALUE_ERROR;
    7bac:	2306      	movs	r3, #6
    7bae:	425b      	negs	r3, r3
    7bb0:	e09e      	b.n	7cf0 <MQTTClient+0x174>
    }

    uint32_t i;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    7bb2:	2310      	movs	r3, #16
    7bb4:	18fa      	adds	r2, r7, r3
    7bb6:	4b50      	ldr	r3, [pc, #320]	; (7cf8 <MQTTClient+0x17c>)
    7bb8:	0010      	movs	r0, r2
    7bba:	0019      	movs	r1, r3
    7bbc:	2354      	movs	r3, #84	; 0x54
    7bbe:	001a      	movs	r2, r3
    7bc0:	4b4e      	ldr	r3, [pc, #312]	; (7cfc <MQTTClient+0x180>)
    7bc2:	4798      	blx	r3

    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    7bc4:	2300      	movs	r3, #0
    7bc6:	667b      	str	r3, [r7, #100]	; 0x64
    7bc8:	e022      	b.n	7c10 <MQTTClient+0x94>
        c->messageHandlers[i].topicFilter = NULL;
    7bca:	68fa      	ldr	r2, [r7, #12]
    7bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7bce:	330c      	adds	r3, #12
    7bd0:	011b      	lsls	r3, r3, #4
    7bd2:	18d3      	adds	r3, r2, r3
    7bd4:	3304      	adds	r3, #4
    7bd6:	2200      	movs	r2, #0
    7bd8:	601a      	str	r2, [r3, #0]
        c->messageHandlers[i].fp = NULL;
    7bda:	68fa      	ldr	r2, [r7, #12]
    7bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7bde:	330c      	adds	r3, #12
    7be0:	011b      	lsls	r3, r3, #4
    7be2:	18d3      	adds	r3, r2, r3
    7be4:	3308      	adds	r3, #8
    7be6:	2200      	movs	r2, #0
    7be8:	601a      	str	r2, [r3, #0]
        c->messageHandlers[i].applicationHandler = NULL;
    7bea:	68fa      	ldr	r2, [r7, #12]
    7bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7bee:	21cc      	movs	r1, #204	; 0xcc
    7bf0:	011b      	lsls	r3, r3, #4
    7bf2:	18d3      	adds	r3, r2, r3
    7bf4:	185b      	adds	r3, r3, r1
    7bf6:	2200      	movs	r2, #0
    7bf8:	601a      	str	r2, [r3, #0]
        c->messageHandlers[i].qos = 0;
    7bfa:	68fa      	ldr	r2, [r7, #12]
    7bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7bfe:	21d0      	movs	r1, #208	; 0xd0
    7c00:	011b      	lsls	r3, r3, #4
    7c02:	18d3      	adds	r3, r2, r3
    7c04:	185b      	adds	r3, r3, r1
    7c06:	2200      	movs	r2, #0
    7c08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    7c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7c0c:	3301      	adds	r3, #1
    7c0e:	667b      	str	r3, [r7, #100]	; 0x64
    7c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7c12:	2b04      	cmp	r3, #4
    7c14:	d9d9      	bls.n	7bca <MQTTClient+0x4e>
    }

    c->commandTimeoutMs = commandTimeoutMs;
    7c16:	68fb      	ldr	r3, [r7, #12]
    7c18:	68ba      	ldr	r2, [r7, #8]
    7c1a:	609a      	str	r2, [r3, #8]
    c->buf = buf;
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	687a      	ldr	r2, [r7, #4]
    7c20:	621a      	str	r2, [r3, #32]
    c->bufSize = bufSize;
    7c22:	68fb      	ldr	r3, [r7, #12]
    7c24:	683a      	ldr	r2, [r7, #0]
    7c26:	619a      	str	r2, [r3, #24]
    c->readbuf = readbuf;
    7c28:	68fb      	ldr	r3, [r7, #12]
    7c2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    7c2c:	625a      	str	r2, [r3, #36]	; 0x24
    c->readBufSize = readBufSize;
    7c2e:	68fb      	ldr	r3, [r7, #12]
    7c30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    7c32:	61da      	str	r2, [r3, #28]
    c->isConnected = 0;
    7c34:	68fb      	ldr	r3, [r7, #12]
    7c36:	2200      	movs	r2, #0
    7c38:	701a      	strb	r2, [r3, #0]
    c->isPingOutstanding = 0;
    7c3a:	68fb      	ldr	r3, [r7, #12]
    7c3c:	2200      	movs	r2, #0
    7c3e:	709a      	strb	r2, [r3, #2]
    c->wasManuallyDisconnected = 0;
    7c40:	68fb      	ldr	r3, [r7, #12]
    7c42:	2200      	movs	r2, #0
    7c44:	705a      	strb	r2, [r3, #1]
    c->counterNetworkDisconnected = 0;
    7c46:	68fb      	ldr	r3, [r7, #12]
    7c48:	2200      	movs	r2, #0
    7c4a:	615a      	str	r2, [r3, #20]
    c->isAutoReconnectEnabled = enableAutoReconnect;
    7c4c:	68fb      	ldr	r3, [r7, #12]
    7c4e:	2278      	movs	r2, #120	; 0x78
    7c50:	18ba      	adds	r2, r7, r2
    7c52:	7812      	ldrb	r2, [r2, #0]
    7c54:	70da      	strb	r2, [r3, #3]
    c->defaultMessageHandler = NULL;
    7c56:	68fa      	ldr	r2, [r7, #12]
    7c58:	238a      	movs	r3, #138	; 0x8a
    7c5a:	005b      	lsls	r3, r3, #1
    7c5c:	2100      	movs	r1, #0
    7c5e:	50d1      	str	r1, [r2, r3]
    c->disconnectHandler = NULL;
    7c60:	68fa      	ldr	r2, [r7, #12]
    7c62:	238c      	movs	r3, #140	; 0x8c
    7c64:	005b      	lsls	r3, r3, #1
    7c66:	2100      	movs	r1, #0
    7c68:	50d1      	str	r1, [r2, r3]
    copyMQTTConnectData(&(c->options), &default_options);
    7c6a:	68fb      	ldr	r3, [r7, #12]
    7c6c:	3344      	adds	r3, #68	; 0x44
    7c6e:	2210      	movs	r2, #16
    7c70:	18ba      	adds	r2, r7, r2
    7c72:	0011      	movs	r1, r2
    7c74:	0018      	movs	r0, r3
    7c76:	4b22      	ldr	r3, [pc, #136]	; (7d00 <MQTTClient+0x184>)
    7c78:	4798      	blx	r3

    c->networkInitHandler = networkInitHandler;
    7c7a:	68fa      	ldr	r2, [r7, #12]
    7c7c:	238e      	movs	r3, #142	; 0x8e
    7c7e:	005b      	lsls	r3, r3, #1
    7c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    7c82:	50d1      	str	r1, [r2, r3]

    c->tlsConnectParams.DestinationPort = tlsConnectParams->DestinationPort;
    7c84:	2380      	movs	r3, #128	; 0x80
    7c86:	18fb      	adds	r3, r7, r3
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	691a      	ldr	r2, [r3, #16]
    7c8c:	68fb      	ldr	r3, [r7, #12]
    7c8e:	639a      	str	r2, [r3, #56]	; 0x38
    c->tlsConnectParams.pDestinationURL = tlsConnectParams->pDestinationURL;
    7c90:	2380      	movs	r3, #128	; 0x80
    7c92:	18fb      	adds	r3, r7, r3
    7c94:	681b      	ldr	r3, [r3, #0]
    7c96:	68da      	ldr	r2, [r3, #12]
    7c98:	68fb      	ldr	r3, [r7, #12]
    7c9a:	635a      	str	r2, [r3, #52]	; 0x34
    c->tlsConnectParams.pDeviceCertLocation = tlsConnectParams->pDeviceCertLocation;
    7c9c:	2380      	movs	r3, #128	; 0x80
    7c9e:	18fb      	adds	r3, r7, r3
    7ca0:	681b      	ldr	r3, [r3, #0]
    7ca2:	685a      	ldr	r2, [r3, #4]
    7ca4:	68fb      	ldr	r3, [r7, #12]
    7ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    c->tlsConnectParams.pDevicePrivateKeyLocation = tlsConnectParams->pDevicePrivateKeyLocation;
    7ca8:	2380      	movs	r3, #128	; 0x80
    7caa:	18fb      	adds	r3, r7, r3
    7cac:	681b      	ldr	r3, [r3, #0]
    7cae:	689a      	ldr	r2, [r3, #8]
    7cb0:	68fb      	ldr	r3, [r7, #12]
    7cb2:	631a      	str	r2, [r3, #48]	; 0x30
    c->tlsConnectParams.pRootCALocation = tlsConnectParams->pRootCALocation;
    7cb4:	2380      	movs	r3, #128	; 0x80
    7cb6:	18fb      	adds	r3, r7, r3
    7cb8:	681b      	ldr	r3, [r3, #0]
    7cba:	681a      	ldr	r2, [r3, #0]
    7cbc:	68fb      	ldr	r3, [r7, #12]
    7cbe:	629a      	str	r2, [r3, #40]	; 0x28
    c->tlsConnectParams.timeout_ms = tlsConnectParams->timeout_ms;
    7cc0:	2380      	movs	r3, #128	; 0x80
    7cc2:	18fb      	adds	r3, r7, r3
    7cc4:	681b      	ldr	r3, [r3, #0]
    7cc6:	695a      	ldr	r2, [r3, #20]
    7cc8:	68fb      	ldr	r3, [r7, #12]
    7cca:	63da      	str	r2, [r3, #60]	; 0x3c
    c->tlsConnectParams.ServerVerificationFlag = tlsConnectParams->ServerVerificationFlag;
    7ccc:	2380      	movs	r3, #128	; 0x80
    7cce:	18fb      	adds	r3, r7, r3
    7cd0:	681b      	ldr	r3, [r3, #0]
    7cd2:	7e19      	ldrb	r1, [r3, #24]
    7cd4:	68fb      	ldr	r3, [r7, #12]
    7cd6:	2240      	movs	r2, #64	; 0x40
    7cd8:	5499      	strb	r1, [r3, r2]

    InitTimer(&(c->pingTimer));
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	33b4      	adds	r3, #180	; 0xb4
    7cde:	0018      	movs	r0, r3
    7ce0:	4b08      	ldr	r3, [pc, #32]	; (7d04 <MQTTClient+0x188>)
    7ce2:	4798      	blx	r3
    InitTimer(&(c->reconnectDelayTimer));
    7ce4:	68fb      	ldr	r3, [r7, #12]
    7ce6:	33bc      	adds	r3, #188	; 0xbc
    7ce8:	0018      	movs	r0, r3
    7cea:	4b06      	ldr	r3, [pc, #24]	; (7d04 <MQTTClient+0x188>)
    7cec:	4798      	blx	r3

    return SUCCESS;
    7cee:	2300      	movs	r3, #0
}
    7cf0:	0018      	movs	r0, r3
    7cf2:	46bd      	mov	sp, r7
    7cf4:	b01a      	add	sp, #104	; 0x68
    7cf6:	bd80      	pop	{r7, pc}
    7cf8:	0001e36c 	.word	0x0001e36c
    7cfc:	0001bab7 	.word	0x0001bab7
    7d00:	00007afd 	.word	0x00007afd
    7d04:	000073e9 	.word	0x000073e9

00007d08 <decodePacket>:

MQTTReturnCode decodePacket(Client *c, uint32_t *value, uint32_t timeout) {
    7d08:	b590      	push	{r4, r7, lr}
    7d0a:	b089      	sub	sp, #36	; 0x24
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	60f8      	str	r0, [r7, #12]
    7d10:	60b9      	str	r1, [r7, #8]
    7d12:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == value) {
    7d14:	68fb      	ldr	r3, [r7, #12]
    7d16:	2b00      	cmp	r3, #0
    7d18:	d002      	beq.n	7d20 <decodePacket+0x18>
    7d1a:	68bb      	ldr	r3, [r7, #8]
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d102      	bne.n	7d26 <decodePacket+0x1e>
        return MQTT_NULL_VALUE_ERROR;
    7d20:	2306      	movs	r3, #6
    7d22:	425b      	negs	r3, r3
    7d24:	e03a      	b.n	7d9c <decodePacket+0x94>
    }

    unsigned char i;
    uint32_t multiplier = 1;
    7d26:	2301      	movs	r3, #1
    7d28:	61fb      	str	r3, [r7, #28]
    uint32_t len = 0;
    7d2a:	2300      	movs	r3, #0
    7d2c:	61bb      	str	r3, [r7, #24]
    const uint32_t MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
    7d2e:	2304      	movs	r3, #4
    7d30:	617b      	str	r3, [r7, #20]

    *value = 0;
    7d32:	68bb      	ldr	r3, [r7, #8]
    7d34:	2200      	movs	r2, #0
    7d36:	601a      	str	r2, [r3, #0]

    do {
        if(++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    7d38:	69bb      	ldr	r3, [r7, #24]
    7d3a:	3301      	adds	r3, #1
    7d3c:	61bb      	str	r3, [r7, #24]
    7d3e:	69ba      	ldr	r2, [r7, #24]
    7d40:	697b      	ldr	r3, [r7, #20]
    7d42:	429a      	cmp	r2, r3
    7d44:	d902      	bls.n	7d4c <decodePacket+0x44>
            /* bad data */
            return MQTTPACKET_READ_ERROR;
    7d46:	230a      	movs	r3, #10
    7d48:	425b      	negs	r3, r3
    7d4a:	e027      	b.n	7d9c <decodePacket+0x94>
        }

        if((c->networkStack.mqttread(&(c->networkStack), &i, 1, (int)timeout)) != 1) {
    7d4c:	68fb      	ldr	r3, [r7, #12]
    7d4e:	22a0      	movs	r2, #160	; 0xa0
    7d50:	589c      	ldr	r4, [r3, r2]
    7d52:	68fb      	ldr	r3, [r7, #12]
    7d54:	3398      	adds	r3, #152	; 0x98
    7d56:	0018      	movs	r0, r3
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	2213      	movs	r2, #19
    7d5c:	18b9      	adds	r1, r7, r2
    7d5e:	2201      	movs	r2, #1
    7d60:	47a0      	blx	r4
    7d62:	0003      	movs	r3, r0
    7d64:	2b01      	cmp	r3, #1
    7d66:	d002      	beq.n	7d6e <decodePacket+0x66>
            /* The value argument is the important value. len is just used temporarily
             * and never used by the calling function for anything else */
            return FAILURE;
    7d68:	2301      	movs	r3, #1
    7d6a:	425b      	negs	r3, r3
    7d6c:	e016      	b.n	7d9c <decodePacket+0x94>
        }

        *value += ((i & 127) * multiplier);
    7d6e:	68bb      	ldr	r3, [r7, #8]
    7d70:	681a      	ldr	r2, [r3, #0]
    7d72:	2313      	movs	r3, #19
    7d74:	18fb      	adds	r3, r7, r3
    7d76:	781b      	ldrb	r3, [r3, #0]
    7d78:	0019      	movs	r1, r3
    7d7a:	237f      	movs	r3, #127	; 0x7f
    7d7c:	400b      	ands	r3, r1
    7d7e:	69f9      	ldr	r1, [r7, #28]
    7d80:	434b      	muls	r3, r1
    7d82:	18d2      	adds	r2, r2, r3
    7d84:	68bb      	ldr	r3, [r7, #8]
    7d86:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
    7d88:	69fb      	ldr	r3, [r7, #28]
    7d8a:	01db      	lsls	r3, r3, #7
    7d8c:	61fb      	str	r3, [r7, #28]
    }while((i & 128) != 0);
    7d8e:	2313      	movs	r3, #19
    7d90:	18fb      	adds	r3, r7, r3
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	b25b      	sxtb	r3, r3
    7d96:	2b00      	cmp	r3, #0
    7d98:	dbce      	blt.n	7d38 <decodePacket+0x30>

    /* The value argument is the important value. len is just used temporarily
     * and never used by the calling function for anything else */
    return SUCCESS;
    7d9a:	2300      	movs	r3, #0
}
    7d9c:	0018      	movs	r0, r3
    7d9e:	46bd      	mov	sp, r7
    7da0:	b009      	add	sp, #36	; 0x24
    7da2:	bd90      	pop	{r4, r7, pc}

00007da4 <readPacket>:

MQTTReturnCode readPacket(Client *c, Timer *timer, uint8_t *packet_type) {
    7da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7da6:	46c6      	mov	lr, r8
    7da8:	b500      	push	{lr}
    7daa:	b08c      	sub	sp, #48	; 0x30
    7dac:	af00      	add	r7, sp, #0
    7dae:	60f8      	str	r0, [r7, #12]
    7db0:	60b9      	str	r1, [r7, #8]
    7db2:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    7db4:	68fb      	ldr	r3, [r7, #12]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d002      	beq.n	7dc0 <readPacket+0x1c>
    7dba:	68bb      	ldr	r3, [r7, #8]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d102      	bne.n	7dc6 <readPacket+0x22>
        return MQTT_NULL_VALUE_ERROR;
    7dc0:	2306      	movs	r3, #6
    7dc2:	425b      	negs	r3, r3
    7dc4:	e0b6      	b.n	7f34 <readPacket+0x190>
    }

    MQTTHeader header = {0};
    7dc6:	2300      	movs	r3, #0
    7dc8:	61bb      	str	r3, [r7, #24]
    uint32_t len = 0;
    7dca:	2300      	movs	r3, #0
    7dcc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_len = 0;
    7dce:	2300      	movs	r3, #0
    7dd0:	617b      	str	r3, [r7, #20]
    uint32_t total_bytes_read = 0;
    7dd2:	2300      	movs	r3, #0
    7dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bytes_to_be_read = 0;
    7dd6:	2300      	movs	r3, #0
    7dd8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t ret_val = 0;
    7dda:	2300      	movs	r3, #0
    7ddc:	623b      	str	r3, [r7, #32]

    /* 1. read the header byte.  This has the packet type in it */
    if(1 != c->networkStack.mqttread(&(c->networkStack), c->readbuf, 1, left_ms(timer))) {
    7dde:	68fb      	ldr	r3, [r7, #12]
    7de0:	22a0      	movs	r2, #160	; 0xa0
    7de2:	589c      	ldr	r4, [r3, r2]
    7de4:	68fb      	ldr	r3, [r7, #12]
    7de6:	3398      	adds	r3, #152	; 0x98
    7de8:	001d      	movs	r5, r3
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    7dee:	68bb      	ldr	r3, [r7, #8]
    7df0:	0018      	movs	r0, r3
    7df2:	4b53      	ldr	r3, [pc, #332]	; (7f40 <readPacket+0x19c>)
    7df4:	4798      	blx	r3
    7df6:	0003      	movs	r3, r0
    7df8:	2201      	movs	r2, #1
    7dfa:	0031      	movs	r1, r6
    7dfc:	0028      	movs	r0, r5
    7dfe:	47a0      	blx	r4
    7e00:	0003      	movs	r3, r0
    7e02:	2b01      	cmp	r3, #1
    7e04:	d001      	beq.n	7e0a <readPacket+0x66>
        /* If a network disconnect has occurred it would have been caught by keepalive already.
         * If nothing is found at this point means there was nothing to read. Not 100% correct,
         * but the only way to be sure is to pass proper error codes from the network stack
         * which the mbedtls/openssl implementations do not return */
        return MQTT_NOTHING_TO_READ;
    7e06:	2302      	movs	r3, #2
    7e08:	e094      	b.n	7f34 <readPacket+0x190>
    }

    len = 1;
    7e0a:	2301      	movs	r3, #1
    7e0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* 2. read the remaining length.  This is variable in itself */
    MQTTReturnCode rc = decodePacket(c, &rem_len, (uint32_t)left_ms(timer));
    7e0e:	68bb      	ldr	r3, [r7, #8]
    7e10:	0018      	movs	r0, r3
    7e12:	4b4b      	ldr	r3, [pc, #300]	; (7f40 <readPacket+0x19c>)
    7e14:	4798      	blx	r3
    7e16:	0003      	movs	r3, r0
    7e18:	001a      	movs	r2, r3
    7e1a:	231f      	movs	r3, #31
    7e1c:	18fc      	adds	r4, r7, r3
    7e1e:	2314      	movs	r3, #20
    7e20:	18f9      	adds	r1, r7, r3
    7e22:	68fb      	ldr	r3, [r7, #12]
    7e24:	0018      	movs	r0, r3
    7e26:	4b47      	ldr	r3, [pc, #284]	; (7f44 <readPacket+0x1a0>)
    7e28:	4798      	blx	r3
    7e2a:	0003      	movs	r3, r0
    7e2c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    7e2e:	231f      	movs	r3, #31
    7e30:	18fb      	adds	r3, r7, r3
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	b25b      	sxtb	r3, r3
    7e36:	2b00      	cmp	r3, #0
    7e38:	d004      	beq.n	7e44 <readPacket+0xa0>
        return rc;
    7e3a:	231f      	movs	r3, #31
    7e3c:	18fb      	adds	r3, r7, r3
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	b25b      	sxtb	r3, r3
    7e42:	e077      	b.n	7f34 <readPacket+0x190>
    }

    /* if the buffer is too short then the message will be dropped silently */
	if (rem_len >= c->readBufSize) {
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	69da      	ldr	r2, [r3, #28]
    7e48:	697b      	ldr	r3, [r7, #20]
    7e4a:	429a      	cmp	r2, r3
    7e4c:	d837      	bhi.n	7ebe <readPacket+0x11a>
		bytes_to_be_read = c->readBufSize;
    7e4e:	68fb      	ldr	r3, [r7, #12]
    7e50:	69db      	ldr	r3, [r3, #28]
    7e52:	62bb      	str	r3, [r7, #40]	; 0x28
		do {
			ret_val = c->networkStack.mqttread(&(c->networkStack), c->readbuf, bytes_to_be_read, left_ms(timer));
    7e54:	68fb      	ldr	r3, [r7, #12]
    7e56:	22a0      	movs	r2, #160	; 0xa0
    7e58:	589c      	ldr	r4, [r3, r2]
    7e5a:	68fb      	ldr	r3, [r7, #12]
    7e5c:	3398      	adds	r3, #152	; 0x98
    7e5e:	001d      	movs	r5, r3
    7e60:	68fb      	ldr	r3, [r7, #12]
    7e62:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    7e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e66:	4698      	mov	r8, r3
    7e68:	68bb      	ldr	r3, [r7, #8]
    7e6a:	0018      	movs	r0, r3
    7e6c:	4b34      	ldr	r3, [pc, #208]	; (7f40 <readPacket+0x19c>)
    7e6e:	4798      	blx	r3
    7e70:	0003      	movs	r3, r0
    7e72:	4642      	mov	r2, r8
    7e74:	0031      	movs	r1, r6
    7e76:	0028      	movs	r0, r5
    7e78:	47a0      	blx	r4
    7e7a:	0003      	movs	r3, r0
    7e7c:	623b      	str	r3, [r7, #32]
			if (ret_val > 0) {
    7e7e:	6a3b      	ldr	r3, [r7, #32]
    7e80:	2b00      	cmp	r3, #0
    7e82:	dd12      	ble.n	7eaa <readPacket+0x106>
				total_bytes_read += ret_val;
    7e84:	6a3b      	ldr	r3, [r7, #32]
    7e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7e88:	18d3      	adds	r3, r2, r3
    7e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				if((rem_len - total_bytes_read) >= c->readBufSize){
    7e8c:	697a      	ldr	r2, [r7, #20]
    7e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e90:	1ad2      	subs	r2, r2, r3
    7e92:	68fb      	ldr	r3, [r7, #12]
    7e94:	69db      	ldr	r3, [r3, #28]
    7e96:	429a      	cmp	r2, r3
    7e98:	d303      	bcc.n	7ea2 <readPacket+0xfe>
					bytes_to_be_read = c->readBufSize;
    7e9a:	68fb      	ldr	r3, [r7, #12]
    7e9c:	69db      	ldr	r3, [r3, #28]
    7e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    7ea0:	e003      	b.n	7eaa <readPacket+0x106>
				}
				else{
					bytes_to_be_read = rem_len - total_bytes_read;
    7ea2:	697a      	ldr	r2, [r7, #20]
    7ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ea6:	1ad3      	subs	r3, r2, r3
    7ea8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
		} while (total_bytes_read < rem_len && ret_val > 0);
    7eaa:	697b      	ldr	r3, [r7, #20]
    7eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7eae:	429a      	cmp	r2, r3
    7eb0:	d202      	bcs.n	7eb8 <readPacket+0x114>
    7eb2:	6a3b      	ldr	r3, [r7, #32]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	dccd      	bgt.n	7e54 <readPacket+0xb0>
		return MQTTPACKET_BUFFER_TOO_SHORT;
    7eb8:	2309      	movs	r3, #9
    7eba:	425b      	negs	r3, r3
    7ebc:	e03a      	b.n	7f34 <readPacket+0x190>
	}

    /* put the original remaining length back into the buffer */
    len += MQTTPacket_encode(c->readbuf + 1, rem_len);
    7ebe:	68fb      	ldr	r3, [r7, #12]
    7ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ec2:	3301      	adds	r3, #1
    7ec4:	697a      	ldr	r2, [r7, #20]
    7ec6:	0011      	movs	r1, r2
    7ec8:	0018      	movs	r0, r3
    7eca:	4b1f      	ldr	r3, [pc, #124]	; (7f48 <readPacket+0x1a4>)
    7ecc:	4798      	blx	r3
    7ece:	0002      	movs	r2, r0
    7ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ed2:	189b      	adds	r3, r3, r2
    7ed4:	627b      	str	r3, [r7, #36]	; 0x24

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if(rem_len > 0 && (c->networkStack.mqttread(&(c->networkStack), c->readbuf + len, (int)rem_len, left_ms(timer)) != (int)rem_len)) {
    7ed6:	697b      	ldr	r3, [r7, #20]
    7ed8:	2b00      	cmp	r3, #0
    7eda:	d01b      	beq.n	7f14 <readPacket+0x170>
    7edc:	68fb      	ldr	r3, [r7, #12]
    7ede:	22a0      	movs	r2, #160	; 0xa0
    7ee0:	589c      	ldr	r4, [r3, r2]
    7ee2:	68fb      	ldr	r3, [r7, #12]
    7ee4:	3398      	adds	r3, #152	; 0x98
    7ee6:	001d      	movs	r5, r3
    7ee8:	68fb      	ldr	r3, [r7, #12]
    7eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7eee:	18d6      	adds	r6, r2, r3
    7ef0:	697b      	ldr	r3, [r7, #20]
    7ef2:	603b      	str	r3, [r7, #0]
    7ef4:	68bb      	ldr	r3, [r7, #8]
    7ef6:	0018      	movs	r0, r3
    7ef8:	4b11      	ldr	r3, [pc, #68]	; (7f40 <readPacket+0x19c>)
    7efa:	4798      	blx	r3
    7efc:	0003      	movs	r3, r0
    7efe:	683a      	ldr	r2, [r7, #0]
    7f00:	0031      	movs	r1, r6
    7f02:	0028      	movs	r0, r5
    7f04:	47a0      	blx	r4
    7f06:	0002      	movs	r2, r0
    7f08:	697b      	ldr	r3, [r7, #20]
    7f0a:	429a      	cmp	r2, r3
    7f0c:	d002      	beq.n	7f14 <readPacket+0x170>
        return FAILURE;
    7f0e:	2301      	movs	r3, #1
    7f10:	425b      	negs	r3, r3
    7f12:	e00f      	b.n	7f34 <readPacket+0x190>
    }

    header.byte = c->readbuf[0];
    7f14:	68fb      	ldr	r3, [r7, #12]
    7f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f18:	781a      	ldrb	r2, [r3, #0]
    7f1a:	2318      	movs	r3, #24
    7f1c:	18fb      	adds	r3, r7, r3
    7f1e:	701a      	strb	r2, [r3, #0]
    *packet_type = header.bits.type;
    7f20:	2318      	movs	r3, #24
    7f22:	18fb      	adds	r3, r7, r3
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	061b      	lsls	r3, r3, #24
    7f28:	0f1b      	lsrs	r3, r3, #28
    7f2a:	b2db      	uxtb	r3, r3
    7f2c:	001a      	movs	r2, r3
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	701a      	strb	r2, [r3, #0]

    return SUCCESS;
    7f32:	2300      	movs	r3, #0
}
    7f34:	0018      	movs	r0, r3
    7f36:	46bd      	mov	sp, r7
    7f38:	b00c      	add	sp, #48	; 0x30
    7f3a:	bc04      	pop	{r2}
    7f3c:	4690      	mov	r8, r2
    7f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f40:	000073b9 	.word	0x000073b9
    7f44:	00007d09 	.word	0x00007d09
    7f48:	000098e1 	.word	0x000098e1

00007f4c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char *topicFilter, MQTTString *topicName) {
    7f4c:	b580      	push	{r7, lr}
    7f4e:	b086      	sub	sp, #24
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
    7f54:	6039      	str	r1, [r7, #0]
    if(NULL == topicFilter || NULL == topicName) {
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	2b00      	cmp	r3, #0
    7f5a:	d002      	beq.n	7f62 <isTopicMatched+0x16>
    7f5c:	683b      	ldr	r3, [r7, #0]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d101      	bne.n	7f66 <isTopicMatched+0x1a>
        return MQTT_NULL_VALUE_ERROR;
    7f62:	23fa      	movs	r3, #250	; 0xfa
    7f64:	e05c      	b.n	8020 <isTopicMatched+0xd4>
    }

    char *curf = topicFilter;
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	617b      	str	r3, [r7, #20]
    char *curn = topicName->lenstring.data;
    7f6a:	683b      	ldr	r3, [r7, #0]
    7f6c:	689b      	ldr	r3, [r3, #8]
    7f6e:	613b      	str	r3, [r7, #16]
    char *curn_end = curn + topicName->lenstring.len;
    7f70:	683b      	ldr	r3, [r7, #0]
    7f72:	685b      	ldr	r3, [r3, #4]
    7f74:	693a      	ldr	r2, [r7, #16]
    7f76:	18d3      	adds	r3, r2, r3
    7f78:	60bb      	str	r3, [r7, #8]

    while(*curf && (curn < curn_end)) {
    7f7a:	e039      	b.n	7ff0 <isTopicMatched+0xa4>
        if(*curn == '/' && *curf != '/') {
    7f7c:	693b      	ldr	r3, [r7, #16]
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2b2f      	cmp	r3, #47	; 0x2f
    7f82:	d103      	bne.n	7f8c <isTopicMatched+0x40>
    7f84:	697b      	ldr	r3, [r7, #20]
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	2b2f      	cmp	r3, #47	; 0x2f
    7f8a:	d13a      	bne.n	8002 <isTopicMatched+0xb6>
            break;
        }
        if(*curf != '+' && *curf != '#' && *curf != *curn) {
    7f8c:	697b      	ldr	r3, [r7, #20]
    7f8e:	781b      	ldrb	r3, [r3, #0]
    7f90:	2b2b      	cmp	r3, #43	; 0x2b
    7f92:	d009      	beq.n	7fa8 <isTopicMatched+0x5c>
    7f94:	697b      	ldr	r3, [r7, #20]
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	2b23      	cmp	r3, #35	; 0x23
    7f9a:	d005      	beq.n	7fa8 <isTopicMatched+0x5c>
    7f9c:	697b      	ldr	r3, [r7, #20]
    7f9e:	781a      	ldrb	r2, [r3, #0]
    7fa0:	693b      	ldr	r3, [r7, #16]
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	429a      	cmp	r2, r3
    7fa6:	d12e      	bne.n	8006 <isTopicMatched+0xba>
            break;
        }
        if(*curf == '+') {
    7fa8:	697b      	ldr	r3, [r7, #20]
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	2b2b      	cmp	r3, #43	; 0x2b
    7fae:	d112      	bne.n	7fd6 <isTopicMatched+0x8a>
            /* skip until we meet the next separator, or end of string */
            char *nextpos = curn + 1;
    7fb0:	693b      	ldr	r3, [r7, #16]
    7fb2:	3301      	adds	r3, #1
    7fb4:	60fb      	str	r3, [r7, #12]
            while(nextpos < curn_end && *nextpos != '/')
    7fb6:	e005      	b.n	7fc4 <isTopicMatched+0x78>
                nextpos = ++curn + 1;
    7fb8:	693b      	ldr	r3, [r7, #16]
    7fba:	3301      	adds	r3, #1
    7fbc:	613b      	str	r3, [r7, #16]
    7fbe:	693b      	ldr	r3, [r7, #16]
    7fc0:	3301      	adds	r3, #1
    7fc2:	60fb      	str	r3, [r7, #12]
            while(nextpos < curn_end && *nextpos != '/')
    7fc4:	68fa      	ldr	r2, [r7, #12]
    7fc6:	68bb      	ldr	r3, [r7, #8]
    7fc8:	429a      	cmp	r2, r3
    7fca:	d20b      	bcs.n	7fe4 <isTopicMatched+0x98>
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	781b      	ldrb	r3, [r3, #0]
    7fd0:	2b2f      	cmp	r3, #47	; 0x2f
    7fd2:	d1f1      	bne.n	7fb8 <isTopicMatched+0x6c>
    7fd4:	e006      	b.n	7fe4 <isTopicMatched+0x98>
        } else if(*curf == '#') {
    7fd6:	697b      	ldr	r3, [r7, #20]
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	2b23      	cmp	r3, #35	; 0x23
    7fdc:	d102      	bne.n	7fe4 <isTopicMatched+0x98>
            /* skip until end of string */
            curn = curn_end - 1;
    7fde:	68bb      	ldr	r3, [r7, #8]
    7fe0:	3b01      	subs	r3, #1
    7fe2:	613b      	str	r3, [r7, #16]
        }

        curf++;
    7fe4:	697b      	ldr	r3, [r7, #20]
    7fe6:	3301      	adds	r3, #1
    7fe8:	617b      	str	r3, [r7, #20]
        curn++;
    7fea:	693b      	ldr	r3, [r7, #16]
    7fec:	3301      	adds	r3, #1
    7fee:	613b      	str	r3, [r7, #16]
    while(*curf && (curn < curn_end)) {
    7ff0:	697b      	ldr	r3, [r7, #20]
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d007      	beq.n	8008 <isTopicMatched+0xbc>
    7ff8:	693a      	ldr	r2, [r7, #16]
    7ffa:	68bb      	ldr	r3, [r7, #8]
    7ffc:	429a      	cmp	r2, r3
    7ffe:	d3bd      	bcc.n	7f7c <isTopicMatched+0x30>
    8000:	e002      	b.n	8008 <isTopicMatched+0xbc>
            break;
    8002:	46c0      	nop			; (mov r8, r8)
    8004:	e000      	b.n	8008 <isTopicMatched+0xbc>
            break;
    8006:	46c0      	nop			; (mov r8, r8)
    };

    return (curn == curn_end) && (*curf == '\0');
    8008:	693a      	ldr	r2, [r7, #16]
    800a:	68bb      	ldr	r3, [r7, #8]
    800c:	429a      	cmp	r2, r3
    800e:	d105      	bne.n	801c <isTopicMatched+0xd0>
    8010:	697b      	ldr	r3, [r7, #20]
    8012:	781b      	ldrb	r3, [r3, #0]
    8014:	2b00      	cmp	r3, #0
    8016:	d101      	bne.n	801c <isTopicMatched+0xd0>
    8018:	2301      	movs	r3, #1
    801a:	e000      	b.n	801e <isTopicMatched+0xd2>
    801c:	2300      	movs	r3, #0
    801e:	b2db      	uxtb	r3, r3
}
    8020:	0018      	movs	r0, r3
    8022:	46bd      	mov	sp, r7
    8024:	b006      	add	sp, #24
    8026:	bd80      	pop	{r7, pc}

00008028 <deliverMessage>:

MQTTReturnCode deliverMessage(Client *c, MQTTString *topicName, MQTTMessage *message) {
    8028:	b590      	push	{r4, r7, lr}
    802a:	b089      	sub	sp, #36	; 0x24
    802c:	af00      	add	r7, sp, #0
    802e:	60f8      	str	r0, [r7, #12]
    8030:	60b9      	str	r1, [r7, #8]
    8032:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == topicName || NULL == message) {
    8034:	68fb      	ldr	r3, [r7, #12]
    8036:	2b00      	cmp	r3, #0
    8038:	d005      	beq.n	8046 <deliverMessage+0x1e>
    803a:	68bb      	ldr	r3, [r7, #8]
    803c:	2b00      	cmp	r3, #0
    803e:	d002      	beq.n	8046 <deliverMessage+0x1e>
    8040:	687b      	ldr	r3, [r7, #4]
    8042:	2b00      	cmp	r3, #0
    8044:	d102      	bne.n	804c <deliverMessage+0x24>
        return MQTT_NULL_VALUE_ERROR;
    8046:	2306      	movs	r3, #6
    8048:	425b      	negs	r3, r3
    804a:	e069      	b.n	8120 <deliverMessage+0xf8>

    uint32_t i;
    MessageData md;

    // we have to find the right message handler - indexed by topic
    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    804c:	2300      	movs	r3, #0
    804e:	61fb      	str	r3, [r7, #28]
    8050:	e04a      	b.n	80e8 <deliverMessage+0xc0>
        if((c->messageHandlers[i].topicFilter != 0)
    8052:	68fa      	ldr	r2, [r7, #12]
    8054:	69fb      	ldr	r3, [r7, #28]
    8056:	330c      	adds	r3, #12
    8058:	011b      	lsls	r3, r3, #4
    805a:	18d3      	adds	r3, r2, r3
    805c:	3304      	adds	r3, #4
    805e:	681b      	ldr	r3, [r3, #0]
    8060:	2b00      	cmp	r3, #0
    8062:	d03e      	beq.n	80e2 <deliverMessage+0xba>
           && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    8064:	68fa      	ldr	r2, [r7, #12]
    8066:	69fb      	ldr	r3, [r7, #28]
    8068:	330c      	adds	r3, #12
    806a:	011b      	lsls	r3, r3, #4
    806c:	18d3      	adds	r3, r2, r3
    806e:	3304      	adds	r3, #4
    8070:	681a      	ldr	r2, [r3, #0]
    8072:	68bb      	ldr	r3, [r7, #8]
    8074:	0011      	movs	r1, r2
    8076:	0018      	movs	r0, r3
    8078:	4b2b      	ldr	r3, [pc, #172]	; (8128 <deliverMessage+0x100>)
    807a:	4798      	blx	r3
    807c:	1e03      	subs	r3, r0, #0
    807e:	d10d      	bne.n	809c <deliverMessage+0x74>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName))) {
    8080:	68fa      	ldr	r2, [r7, #12]
    8082:	69fb      	ldr	r3, [r7, #28]
    8084:	330c      	adds	r3, #12
    8086:	011b      	lsls	r3, r3, #4
    8088:	18d3      	adds	r3, r2, r3
    808a:	3304      	adds	r3, #4
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	68ba      	ldr	r2, [r7, #8]
    8090:	0011      	movs	r1, r2
    8092:	0018      	movs	r0, r3
    8094:	4b25      	ldr	r3, [pc, #148]	; (812c <deliverMessage+0x104>)
    8096:	4798      	blx	r3
    8098:	1e03      	subs	r3, r0, #0
           && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    809a:	d022      	beq.n	80e2 <deliverMessage+0xba>
            if(c->messageHandlers[i].fp != NULL) {
    809c:	68fa      	ldr	r2, [r7, #12]
    809e:	69fb      	ldr	r3, [r7, #28]
    80a0:	330c      	adds	r3, #12
    80a2:	011b      	lsls	r3, r3, #4
    80a4:	18d3      	adds	r3, r2, r3
    80a6:	3308      	adds	r3, #8
    80a8:	681b      	ldr	r3, [r3, #0]
    80aa:	2b00      	cmp	r3, #0
    80ac:	d019      	beq.n	80e2 <deliverMessage+0xba>
                NewMessageData(&md, topicName, message, c->messageHandlers[i].applicationHandler);
    80ae:	68fa      	ldr	r2, [r7, #12]
    80b0:	69fb      	ldr	r3, [r7, #28]
    80b2:	21cc      	movs	r1, #204	; 0xcc
    80b4:	011b      	lsls	r3, r3, #4
    80b6:	18d3      	adds	r3, r2, r3
    80b8:	185b      	adds	r3, r3, r1
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	687a      	ldr	r2, [r7, #4]
    80be:	68b9      	ldr	r1, [r7, #8]
    80c0:	2010      	movs	r0, #16
    80c2:	1838      	adds	r0, r7, r0
    80c4:	4c1a      	ldr	r4, [pc, #104]	; (8130 <deliverMessage+0x108>)
    80c6:	47a0      	blx	r4
                c->messageHandlers[i].fp(&md);
    80c8:	68fa      	ldr	r2, [r7, #12]
    80ca:	69fb      	ldr	r3, [r7, #28]
    80cc:	330c      	adds	r3, #12
    80ce:	011b      	lsls	r3, r3, #4
    80d0:	18d3      	adds	r3, r2, r3
    80d2:	3308      	adds	r3, #8
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	2210      	movs	r2, #16
    80d8:	18ba      	adds	r2, r7, r2
    80da:	0010      	movs	r0, r2
    80dc:	4798      	blx	r3
                return SUCCESS;
    80de:	2300      	movs	r3, #0
    80e0:	e01e      	b.n	8120 <deliverMessage+0xf8>
    for(i = 0; i < MAX_MESSAGE_HANDLERS; ++i) {
    80e2:	69fb      	ldr	r3, [r7, #28]
    80e4:	3301      	adds	r3, #1
    80e6:	61fb      	str	r3, [r7, #28]
    80e8:	69fb      	ldr	r3, [r7, #28]
    80ea:	2b04      	cmp	r3, #4
    80ec:	d9b1      	bls.n	8052 <deliverMessage+0x2a>
            }
        }
    }

    if(NULL != c->defaultMessageHandler) {
    80ee:	68fa      	ldr	r2, [r7, #12]
    80f0:	238a      	movs	r3, #138	; 0x8a
    80f2:	005b      	lsls	r3, r3, #1
    80f4:	58d3      	ldr	r3, [r2, r3]
    80f6:	2b00      	cmp	r3, #0
    80f8:	d010      	beq.n	811c <deliverMessage+0xf4>
        NewMessageData(&md, topicName, message, NULL);
    80fa:	687a      	ldr	r2, [r7, #4]
    80fc:	68b9      	ldr	r1, [r7, #8]
    80fe:	2310      	movs	r3, #16
    8100:	18f8      	adds	r0, r7, r3
    8102:	2300      	movs	r3, #0
    8104:	4c0a      	ldr	r4, [pc, #40]	; (8130 <deliverMessage+0x108>)
    8106:	47a0      	blx	r4
        c->defaultMessageHandler(&md);
    8108:	68fa      	ldr	r2, [r7, #12]
    810a:	238a      	movs	r3, #138	; 0x8a
    810c:	005b      	lsls	r3, r3, #1
    810e:	58d3      	ldr	r3, [r2, r3]
    8110:	2210      	movs	r2, #16
    8112:	18ba      	adds	r2, r7, r2
    8114:	0010      	movs	r0, r2
    8116:	4798      	blx	r3
        return SUCCESS;
    8118:	2300      	movs	r3, #0
    811a:	e001      	b.n	8120 <deliverMessage+0xf8>
    }

    /* Message handler not found for topic */
    return FAILURE;
    811c:	2301      	movs	r3, #1
    811e:	425b      	negs	r3, r3
}
    8120:	0018      	movs	r0, r3
    8122:	46bd      	mov	sp, r7
    8124:	b009      	add	sp, #36	; 0x24
    8126:	bd90      	pop	{r4, r7, pc}
    8128:	00009dd5 	.word	0x00009dd5
    812c:	00007f4d 	.word	0x00007f4d
    8130:	000079eb 	.word	0x000079eb

00008134 <handleDisconnect>:

MQTTReturnCode handleDisconnect(Client *c) {
    8134:	b590      	push	{r4, r7, lr}
    8136:	b085      	sub	sp, #20
    8138:	af00      	add	r7, sp, #0
    813a:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    813c:	687b      	ldr	r3, [r7, #4]
    813e:	2b00      	cmp	r3, #0
    8140:	d102      	bne.n	8148 <handleDisconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    8142:	2306      	movs	r3, #6
    8144:	425b      	negs	r3, r3
    8146:	e021      	b.n	818c <handleDisconnect+0x58>
    }

    MQTTReturnCode rc = MQTTDisconnect(c);
    8148:	230f      	movs	r3, #15
    814a:	18fc      	adds	r4, r7, r3
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	0018      	movs	r0, r3
    8150:	4b10      	ldr	r3, [pc, #64]	; (8194 <handleDisconnect+0x60>)
    8152:	4798      	blx	r3
    8154:	0003      	movs	r3, r0
    8156:	7023      	strb	r3, [r4, #0]
    if(rc != SUCCESS){
    8158:	230f      	movs	r3, #15
    815a:	18fb      	adds	r3, r7, r3
    815c:	781b      	ldrb	r3, [r3, #0]
    815e:	b25b      	sxtb	r3, r3
    8160:	2b00      	cmp	r3, #0
    8162:	d003      	beq.n	816c <handleDisconnect+0x38>
    	// If the sendPacket prevents us from sending a disconnect packet then we have to clean the stack
    	MQTTForceDisconnect(c);
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	0018      	movs	r0, r3
    8168:	4b0b      	ldr	r3, [pc, #44]	; (8198 <handleDisconnect+0x64>)
    816a:	4798      	blx	r3
    }

    if(NULL != c->disconnectHandler) {
    816c:	687a      	ldr	r2, [r7, #4]
    816e:	238c      	movs	r3, #140	; 0x8c
    8170:	005b      	lsls	r3, r3, #1
    8172:	58d3      	ldr	r3, [r2, r3]
    8174:	2b00      	cmp	r3, #0
    8176:	d004      	beq.n	8182 <handleDisconnect+0x4e>
        c->disconnectHandler();
    8178:	687a      	ldr	r2, [r7, #4]
    817a:	238c      	movs	r3, #140	; 0x8c
    817c:	005b      	lsls	r3, r3, #1
    817e:	58d3      	ldr	r3, [r2, r3]
    8180:	4798      	blx	r3
    }

    /* Reset to 0 since this was not a manual disconnect */
    c->wasManuallyDisconnected = 0;
    8182:	687b      	ldr	r3, [r7, #4]
    8184:	2200      	movs	r2, #0
    8186:	705a      	strb	r2, [r3, #1]
    return MQTT_NETWORK_DISCONNECTED_ERROR;
    8188:	2304      	movs	r3, #4
    818a:	425b      	negs	r3, r3
}
    818c:	0018      	movs	r0, r3
    818e:	46bd      	mov	sp, r7
    8190:	b005      	add	sp, #20
    8192:	bd90      	pop	{r4, r7, pc}
    8194:	00008f2d 	.word	0x00008f2d
    8198:	00008ef9 	.word	0x00008ef9

0000819c <MQTTAttemptReconnect>:

MQTTReturnCode MQTTAttemptReconnect(Client *c) {
    819c:	b590      	push	{r4, r7, lr}
    819e:	b085      	sub	sp, #20
    81a0:	af00      	add	r7, sp, #0
    81a2:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    81a4:	687b      	ldr	r3, [r7, #4]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d102      	bne.n	81b0 <MQTTAttemptReconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    81aa:	2306      	movs	r3, #6
    81ac:	425b      	negs	r3, r3
    81ae:	e02d      	b.n	820c <MQTTAttemptReconnect+0x70>
    }

    if(1 == c->isConnected) {
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	781b      	ldrb	r3, [r3, #0]
    81b4:	2b01      	cmp	r3, #1
    81b6:	d102      	bne.n	81be <MQTTAttemptReconnect+0x22>
        return MQTT_NETWORK_ALREADY_CONNECTED_ERROR;
    81b8:	2305      	movs	r3, #5
    81ba:	425b      	negs	r3, r3
    81bc:	e026      	b.n	820c <MQTTAttemptReconnect+0x70>
    }

    MQTTReturnCode rc = MQTT_ATTEMPTING_RECONNECT;
    81be:	230f      	movs	r3, #15
    81c0:	18fb      	adds	r3, r7, r3
    81c2:	2203      	movs	r2, #3
    81c4:	701a      	strb	r2, [r3, #0]

    /* Ignoring return code. failures expected if network is disconnected */
    rc = MQTTConnect(c, NULL);
    81c6:	230f      	movs	r3, #15
    81c8:	18fc      	adds	r4, r7, r3
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	2100      	movs	r1, #0
    81ce:	0018      	movs	r0, r3
    81d0:	4b10      	ldr	r3, [pc, #64]	; (8214 <MQTTAttemptReconnect+0x78>)
    81d2:	4798      	blx	r3
    81d4:	0003      	movs	r3, r0
    81d6:	7023      	strb	r3, [r4, #0]

    /* If still disconnected handle disconnect */
    if(0 == c->isConnected) {
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	2b00      	cmp	r3, #0
    81de:	d101      	bne.n	81e4 <MQTTAttemptReconnect+0x48>
        return MQTT_ATTEMPTING_RECONNECT;
    81e0:	2303      	movs	r3, #3
    81e2:	e013      	b.n	820c <MQTTAttemptReconnect+0x70>
    }

    rc = MQTTResubscribe(c);
    81e4:	230f      	movs	r3, #15
    81e6:	18fc      	adds	r4, r7, r3
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	0018      	movs	r0, r3
    81ec:	4b0a      	ldr	r3, [pc, #40]	; (8218 <MQTTAttemptReconnect+0x7c>)
    81ee:	4798      	blx	r3
    81f0:	0003      	movs	r3, r0
    81f2:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    81f4:	230f      	movs	r3, #15
    81f6:	18fb      	adds	r3, r7, r3
    81f8:	781b      	ldrb	r3, [r3, #0]
    81fa:	b25b      	sxtb	r3, r3
    81fc:	2b00      	cmp	r3, #0
    81fe:	d004      	beq.n	820a <MQTTAttemptReconnect+0x6e>
        return rc;
    8200:	230f      	movs	r3, #15
    8202:	18fb      	adds	r3, r7, r3
    8204:	781b      	ldrb	r3, [r3, #0]
    8206:	b25b      	sxtb	r3, r3
    8208:	e000      	b.n	820c <MQTTAttemptReconnect+0x70>
    }

    return MQTT_NETWORK_RECONNECTED;
    820a:	2301      	movs	r3, #1
}
    820c:	0018      	movs	r0, r3
    820e:	46bd      	mov	sp, r7
    8210:	b005      	add	sp, #20
    8212:	bd90      	pop	{r4, r7, pc}
    8214:	000088f5 	.word	0x000088f5
    8218:	00008b21 	.word	0x00008b21

0000821c <handleReconnect>:

MQTTReturnCode handleReconnect(Client *c) {
    821c:	b590      	push	{r4, r7, lr}
    821e:	b085      	sub	sp, #20
    8220:	af00      	add	r7, sp, #0
    8222:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    8224:	687b      	ldr	r3, [r7, #4]
    8226:	2b00      	cmp	r3, #0
    8228:	d102      	bne.n	8230 <handleReconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    822a:	2306      	movs	r3, #6
    822c:	425b      	negs	r3, r3
    822e:	e051      	b.n	82d4 <handleReconnect+0xb8>
    }

    if(!expired(&(c->reconnectDelayTimer))) {
    8230:	687b      	ldr	r3, [r7, #4]
    8232:	33bc      	adds	r3, #188	; 0xbc
    8234:	0018      	movs	r0, r3
    8236:	4b29      	ldr	r3, [pc, #164]	; (82dc <handleReconnect+0xc0>)
    8238:	4798      	blx	r3
    823a:	1e03      	subs	r3, r0, #0
    823c:	d101      	bne.n	8242 <handleReconnect+0x26>
        /* Timer has not expired. Not time to attempt reconnect yet.
         * Return attempting reconnect */
        return MQTT_ATTEMPTING_RECONNECT;
    823e:	2303      	movs	r3, #3
    8240:	e048      	b.n	82d4 <handleReconnect+0xb8>
    }

    int8_t isPhysicalLayerConnected = 1;
    8242:	230f      	movs	r3, #15
    8244:	18fb      	adds	r3, r7, r3
    8246:	2201      	movs	r2, #1
    8248:	701a      	strb	r2, [r3, #0]
    if(NULL != c->networkStack.isConnected) {
    824a:	687b      	ldr	r3, [r7, #4]
    824c:	22ac      	movs	r2, #172	; 0xac
    824e:	589b      	ldr	r3, [r3, r2]
    8250:	2b00      	cmp	r3, #0
    8252:	d00a      	beq.n	826a <handleReconnect+0x4e>
        isPhysicalLayerConnected = (int8_t)c->networkStack.isConnected(&(c->networkStack));
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	22ac      	movs	r2, #172	; 0xac
    8258:	589b      	ldr	r3, [r3, r2]
    825a:	687a      	ldr	r2, [r7, #4]
    825c:	3298      	adds	r2, #152	; 0x98
    825e:	0010      	movs	r0, r2
    8260:	4798      	blx	r3
    8262:	0002      	movs	r2, r0
    8264:	230f      	movs	r3, #15
    8266:	18fb      	adds	r3, r7, r3
    8268:	701a      	strb	r2, [r3, #0]
    }

    MQTTReturnCode rc = MQTT_NETWORK_RECONNECTED;
    826a:	230e      	movs	r3, #14
    826c:	18fb      	adds	r3, r7, r3
    826e:	2201      	movs	r2, #1
    8270:	701a      	strb	r2, [r3, #0]
    if(isPhysicalLayerConnected) {
    8272:	230f      	movs	r3, #15
    8274:	18fb      	adds	r3, r7, r3
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	b25b      	sxtb	r3, r3
    827a:	2b00      	cmp	r3, #0
    827c:	d00f      	beq.n	829e <handleReconnect+0x82>
        rc = MQTTAttemptReconnect(c);
    827e:	230e      	movs	r3, #14
    8280:	18fc      	adds	r4, r7, r3
    8282:	687b      	ldr	r3, [r7, #4]
    8284:	0018      	movs	r0, r3
    8286:	4b16      	ldr	r3, [pc, #88]	; (82e0 <handleReconnect+0xc4>)
    8288:	4798      	blx	r3
    828a:	0003      	movs	r3, r0
    828c:	7023      	strb	r3, [r4, #0]
        if(MQTT_NETWORK_RECONNECTED == rc) {
    828e:	230e      	movs	r3, #14
    8290:	18fb      	adds	r3, r7, r3
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	b25b      	sxtb	r3, r3
    8296:	2b01      	cmp	r3, #1
    8298:	d101      	bne.n	829e <handleReconnect+0x82>
            return MQTT_NETWORK_RECONNECTED;
    829a:	2301      	movs	r3, #1
    829c:	e01a      	b.n	82d4 <handleReconnect+0xb8>
        }
    }

    c->currentReconnectWaitInterval *= 2;
    829e:	687b      	ldr	r3, [r7, #4]
    82a0:	691b      	ldr	r3, [r3, #16]
    82a2:	005a      	lsls	r2, r3, #1
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	611a      	str	r2, [r3, #16]

    if(MAX_RECONNECT_WAIT_INTERVAL < c->currentReconnectWaitInterval) {
    82a8:	687b      	ldr	r3, [r7, #4]
    82aa:	691a      	ldr	r2, [r3, #16]
    82ac:	23fa      	movs	r3, #250	; 0xfa
    82ae:	015b      	lsls	r3, r3, #5
    82b0:	429a      	cmp	r2, r3
    82b2:	d902      	bls.n	82ba <handleReconnect+0x9e>
        return MQTT_RECONNECT_TIMED_OUT;
    82b4:	2308      	movs	r3, #8
    82b6:	425b      	negs	r3, r3
    82b8:	e00c      	b.n	82d4 <handleReconnect+0xb8>
    }
    countdown_ms(&(c->reconnectDelayTimer), c->currentReconnectWaitInterval);
    82ba:	687b      	ldr	r3, [r7, #4]
    82bc:	33bc      	adds	r3, #188	; 0xbc
    82be:	001a      	movs	r2, r3
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	691b      	ldr	r3, [r3, #16]
    82c4:	0019      	movs	r1, r3
    82c6:	0010      	movs	r0, r2
    82c8:	4b06      	ldr	r3, [pc, #24]	; (82e4 <handleReconnect+0xc8>)
    82ca:	4798      	blx	r3
    return rc;
    82cc:	230e      	movs	r3, #14
    82ce:	18fb      	adds	r3, r7, r3
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	b25b      	sxtb	r3, r3
}
    82d4:	0018      	movs	r0, r3
    82d6:	46bd      	mov	sp, r7
    82d8:	b005      	add	sp, #20
    82da:	bd90      	pop	{r4, r7, pc}
    82dc:	000072d9 	.word	0x000072d9
    82e0:	0000819d 	.word	0x0000819d
    82e4:	00007311 	.word	0x00007311

000082e8 <keepalive>:

MQTTReturnCode keepalive(Client *c) {
    82e8:	b590      	push	{r4, r7, lr}
    82ea:	b087      	sub	sp, #28
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d102      	bne.n	82fc <keepalive+0x14>
        return MQTT_NULL_VALUE_ERROR;
    82f6:	2306      	movs	r3, #6
    82f8:	425b      	negs	r3, r3
    82fa:	e068      	b.n	83ce <keepalive+0xe6>
    }

	if(0 == c->keepAliveInterval) {
    82fc:	687b      	ldr	r3, [r7, #4]
    82fe:	68db      	ldr	r3, [r3, #12]
    8300:	2b00      	cmp	r3, #0
    8302:	d101      	bne.n	8308 <keepalive+0x20>
		return SUCCESS;
    8304:	2300      	movs	r3, #0
    8306:	e062      	b.n	83ce <keepalive+0xe6>
	}

	if(!expired(&c->pingTimer)) {
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	33b4      	adds	r3, #180	; 0xb4
    830c:	0018      	movs	r0, r3
    830e:	4b32      	ldr	r3, [pc, #200]	; (83d8 <keepalive+0xf0>)
    8310:	4798      	blx	r3
    8312:	1e03      	subs	r3, r0, #0
    8314:	d101      	bne.n	831a <keepalive+0x32>
        return SUCCESS;
    8316:	2300      	movs	r3, #0
    8318:	e059      	b.n	83ce <keepalive+0xe6>
    }

    if(c->isPingOutstanding) {
    831a:	687b      	ldr	r3, [r7, #4]
    831c:	789b      	ldrb	r3, [r3, #2]
    831e:	2b00      	cmp	r3, #0
    8320:	d005      	beq.n	832e <keepalive+0x46>
        return handleDisconnect(c);
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	0018      	movs	r0, r3
    8326:	4b2d      	ldr	r3, [pc, #180]	; (83dc <keepalive+0xf4>)
    8328:	4798      	blx	r3
    832a:	0003      	movs	r3, r0
    832c:	e04f      	b.n	83ce <keepalive+0xe6>
    }

    /* there is no ping outstanding - send one */
    MQTTReturnCode rc = SUCCESS;
    832e:	2317      	movs	r3, #23
    8330:	18fb      	adds	r3, r7, r3
    8332:	2200      	movs	r2, #0
    8334:	701a      	strb	r2, [r3, #0]
    Timer timer;
    InitTimer(&timer);
    8336:	230c      	movs	r3, #12
    8338:	18fb      	adds	r3, r7, r3
    833a:	0018      	movs	r0, r3
    833c:	4b28      	ldr	r3, [pc, #160]	; (83e0 <keepalive+0xf8>)
    833e:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    8340:	687b      	ldr	r3, [r7, #4]
    8342:	689a      	ldr	r2, [r3, #8]
    8344:	230c      	movs	r3, #12
    8346:	18fb      	adds	r3, r7, r3
    8348:	0011      	movs	r1, r2
    834a:	0018      	movs	r0, r3
    834c:	4b25      	ldr	r3, [pc, #148]	; (83e4 <keepalive+0xfc>)
    834e:	4798      	blx	r3
    uint32_t serialized_len = 0;
    8350:	2300      	movs	r3, #0
    8352:	60bb      	str	r3, [r7, #8]
    rc = MQTTSerialize_pingreq(c->buf, c->bufSize, &serialized_len);
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	6a18      	ldr	r0, [r3, #32]
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	699b      	ldr	r3, [r3, #24]
    835c:	2217      	movs	r2, #23
    835e:	18bc      	adds	r4, r7, r2
    8360:	2208      	movs	r2, #8
    8362:	18ba      	adds	r2, r7, r2
    8364:	0019      	movs	r1, r3
    8366:	4b20      	ldr	r3, [pc, #128]	; (83e8 <keepalive+0x100>)
    8368:	4798      	blx	r3
    836a:	0003      	movs	r3, r0
    836c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    836e:	2317      	movs	r3, #23
    8370:	18fb      	adds	r3, r7, r3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	b25b      	sxtb	r3, r3
    8376:	2b00      	cmp	r3, #0
    8378:	d004      	beq.n	8384 <keepalive+0x9c>
        return rc;
    837a:	2317      	movs	r3, #23
    837c:	18fb      	adds	r3, r7, r3
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	b25b      	sxtb	r3, r3
    8382:	e024      	b.n	83ce <keepalive+0xe6>
    }

    /* send the ping packet */
    rc = sendPacket(c, serialized_len, &timer);
    8384:	68b9      	ldr	r1, [r7, #8]
    8386:	2317      	movs	r3, #23
    8388:	18fc      	adds	r4, r7, r3
    838a:	230c      	movs	r3, #12
    838c:	18fa      	adds	r2, r7, r3
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	0018      	movs	r0, r3
    8392:	4b16      	ldr	r3, [pc, #88]	; (83ec <keepalive+0x104>)
    8394:	4798      	blx	r3
    8396:	0003      	movs	r3, r0
    8398:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    839a:	2317      	movs	r3, #23
    839c:	18fb      	adds	r3, r7, r3
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	b25b      	sxtb	r3, r3
    83a2:	2b00      	cmp	r3, #0
    83a4:	d005      	beq.n	83b2 <keepalive+0xca>
    	//If sending a PING fails we can no longer determine if we are connected.  In this case we decide we are disconnected and begin reconnection attempts
        return handleDisconnect(c);
    83a6:	687b      	ldr	r3, [r7, #4]
    83a8:	0018      	movs	r0, r3
    83aa:	4b0c      	ldr	r3, [pc, #48]	; (83dc <keepalive+0xf4>)
    83ac:	4798      	blx	r3
    83ae:	0003      	movs	r3, r0
    83b0:	e00d      	b.n	83ce <keepalive+0xe6>
    }

    c->isPingOutstanding = 1;
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	2201      	movs	r2, #1
    83b6:	709a      	strb	r2, [r3, #2]
    /* start a timer to wait for PINGRESP from server */
    countdown(&c->pingTimer, c->keepAliveInterval / 2);
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	33b4      	adds	r3, #180	; 0xb4
    83bc:	001a      	movs	r2, r3
    83be:	687b      	ldr	r3, [r7, #4]
    83c0:	68db      	ldr	r3, [r3, #12]
    83c2:	085b      	lsrs	r3, r3, #1
    83c4:	0019      	movs	r1, r3
    83c6:	0010      	movs	r0, r2
    83c8:	4b09      	ldr	r3, [pc, #36]	; (83f0 <keepalive+0x108>)
    83ca:	4798      	blx	r3

    return SUCCESS;
    83cc:	2300      	movs	r3, #0
}
    83ce:	0018      	movs	r0, r3
    83d0:	46bd      	mov	sp, r7
    83d2:	b007      	add	sp, #28
    83d4:	bd90      	pop	{r4, r7, pc}
    83d6:	46c0      	nop			; (mov r8, r8)
    83d8:	000072d9 	.word	0x000072d9
    83dc:	00008135 	.word	0x00008135
    83e0:	000073e9 	.word	0x000073e9
    83e4:	00007311 	.word	0x00007311
    83e8:	0000965d 	.word	0x0000965d
    83ec:	00007a49 	.word	0x00007a49
    83f0:	00007361 	.word	0x00007361

000083f4 <handlePublish>:

MQTTReturnCode handlePublish(Client *c, Timer *timer) {
    83f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f6:	b093      	sub	sp, #76	; 0x4c
    83f8:	af06      	add	r7, sp, #24
    83fa:	6078      	str	r0, [r7, #4]
    83fc:	6039      	str	r1, [r7, #0]
    MQTTString topicName;
    MQTTMessage msg;
    MQTTReturnCode rc;
    uint32_t len = 0;
    83fe:	2300      	movs	r3, #0
    8400:	60fb      	str	r3, [r7, #12]

    rc = MQTTDeserialize_publish((unsigned char *) &msg.dup, (QoS *) &msg.qos, (unsigned char *) &msg.retained,
    8402:	687b      	ldr	r3, [r7, #4]
    8404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8406:	687b      	ldr	r3, [r7, #4]
    8408:	69db      	ldr	r3, [r3, #28]
    840a:	212f      	movs	r1, #47	; 0x2f
    840c:	187c      	adds	r4, r7, r1
    840e:	2110      	movs	r1, #16
    8410:	1879      	adds	r1, r7, r1
    8412:	3104      	adds	r1, #4
    8414:	468c      	mov	ip, r1
    8416:	2110      	movs	r1, #16
    8418:	1879      	adds	r1, r7, r1
    841a:	1c4e      	adds	r6, r1, #1
    841c:	2110      	movs	r1, #16
    841e:	187d      	adds	r5, r7, r1
    8420:	2110      	movs	r1, #16
    8422:	1879      	adds	r1, r7, r1
    8424:	1c88      	adds	r0, r1, #2
    8426:	9304      	str	r3, [sp, #16]
    8428:	9203      	str	r2, [sp, #12]
    842a:	2310      	movs	r3, #16
    842c:	18fb      	adds	r3, r7, r3
    842e:	330c      	adds	r3, #12
    8430:	9302      	str	r3, [sp, #8]
    8432:	2310      	movs	r3, #16
    8434:	18fb      	adds	r3, r7, r3
    8436:	3308      	adds	r3, #8
    8438:	9301      	str	r3, [sp, #4]
    843a:	2320      	movs	r3, #32
    843c:	18fb      	adds	r3, r7, r3
    843e:	9300      	str	r3, [sp, #0]
    8440:	4663      	mov	r3, ip
    8442:	0032      	movs	r2, r6
    8444:	0029      	movs	r1, r5
    8446:	4d3f      	ldr	r5, [pc, #252]	; (8544 <handlePublish+0x150>)
    8448:	47a8      	blx	r5
    844a:	0003      	movs	r3, r0
    844c:	7023      	strb	r3, [r4, #0]
                                 (uint16_t *)&msg.id, &topicName,
                                 (unsigned char **) &msg.payload, (uint32_t *) &msg.payloadlen, c->readbuf,
                                 c->readBufSize);
    if(SUCCESS != rc) {
    844e:	232f      	movs	r3, #47	; 0x2f
    8450:	18fb      	adds	r3, r7, r3
    8452:	781b      	ldrb	r3, [r3, #0]
    8454:	b25b      	sxtb	r3, r3
    8456:	2b00      	cmp	r3, #0
    8458:	d004      	beq.n	8464 <handlePublish+0x70>
        return rc;
    845a:	232f      	movs	r3, #47	; 0x2f
    845c:	18fb      	adds	r3, r7, r3
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	b25b      	sxtb	r3, r3
    8462:	e06a      	b.n	853a <handlePublish+0x146>
    }

    rc = deliverMessage(c, &topicName, &msg);
    8464:	232f      	movs	r3, #47	; 0x2f
    8466:	18fc      	adds	r4, r7, r3
    8468:	2310      	movs	r3, #16
    846a:	18fa      	adds	r2, r7, r3
    846c:	2320      	movs	r3, #32
    846e:	18f9      	adds	r1, r7, r3
    8470:	687b      	ldr	r3, [r7, #4]
    8472:	0018      	movs	r0, r3
    8474:	4b34      	ldr	r3, [pc, #208]	; (8548 <handlePublish+0x154>)
    8476:	4798      	blx	r3
    8478:	0003      	movs	r3, r0
    847a:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    847c:	232f      	movs	r3, #47	; 0x2f
    847e:	18fb      	adds	r3, r7, r3
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	b25b      	sxtb	r3, r3
    8484:	2b00      	cmp	r3, #0
    8486:	d004      	beq.n	8492 <handlePublish+0x9e>
        return rc;
    8488:	232f      	movs	r3, #47	; 0x2f
    848a:	18fb      	adds	r3, r7, r3
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	b25b      	sxtb	r3, r3
    8490:	e053      	b.n	853a <handlePublish+0x146>
    }

    if(QOS0 == msg.qos) {
    8492:	2310      	movs	r3, #16
    8494:	18fb      	adds	r3, r7, r3
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	2b00      	cmp	r3, #0
    849a:	d101      	bne.n	84a0 <handlePublish+0xac>
        /* No further processing required for QOS0 */
        return SUCCESS;
    849c:	2300      	movs	r3, #0
    849e:	e04c      	b.n	853a <handlePublish+0x146>
    }

    if(QOS1 == msg.qos) {
    84a0:	2310      	movs	r3, #16
    84a2:	18fb      	adds	r3, r7, r3
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	2b01      	cmp	r3, #1
    84a8:	d113      	bne.n	84d2 <handlePublish+0xde>
        rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBACK, 0, msg.id, &len);
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	6a18      	ldr	r0, [r3, #32]
    84ae:	687b      	ldr	r3, [r7, #4]
    84b0:	6999      	ldr	r1, [r3, #24]
    84b2:	2310      	movs	r3, #16
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	889b      	ldrh	r3, [r3, #4]
    84b8:	222f      	movs	r2, #47	; 0x2f
    84ba:	18bc      	adds	r4, r7, r2
    84bc:	220c      	movs	r2, #12
    84be:	18ba      	adds	r2, r7, r2
    84c0:	9201      	str	r2, [sp, #4]
    84c2:	9300      	str	r3, [sp, #0]
    84c4:	2300      	movs	r3, #0
    84c6:	2204      	movs	r2, #4
    84c8:	4d20      	ldr	r5, [pc, #128]	; (854c <handlePublish+0x158>)
    84ca:	47a8      	blx	r5
    84cc:	0003      	movs	r3, r0
    84ce:	7023      	strb	r3, [r4, #0]
    84d0:	e012      	b.n	84f8 <handlePublish+0x104>
    } else { /* Message is not QOS0 or 1 means only option left is QOS2 */
        rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBREC, 0, msg.id, &len);
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	6a18      	ldr	r0, [r3, #32]
    84d6:	687b      	ldr	r3, [r7, #4]
    84d8:	6999      	ldr	r1, [r3, #24]
    84da:	2310      	movs	r3, #16
    84dc:	18fb      	adds	r3, r7, r3
    84de:	889b      	ldrh	r3, [r3, #4]
    84e0:	222f      	movs	r2, #47	; 0x2f
    84e2:	18bc      	adds	r4, r7, r2
    84e4:	220c      	movs	r2, #12
    84e6:	18ba      	adds	r2, r7, r2
    84e8:	9201      	str	r2, [sp, #4]
    84ea:	9300      	str	r3, [sp, #0]
    84ec:	2300      	movs	r3, #0
    84ee:	2205      	movs	r2, #5
    84f0:	4d16      	ldr	r5, [pc, #88]	; (854c <handlePublish+0x158>)
    84f2:	47a8      	blx	r5
    84f4:	0003      	movs	r3, r0
    84f6:	7023      	strb	r3, [r4, #0]
    }

    if(SUCCESS != rc) {
    84f8:	232f      	movs	r3, #47	; 0x2f
    84fa:	18fb      	adds	r3, r7, r3
    84fc:	781b      	ldrb	r3, [r3, #0]
    84fe:	b25b      	sxtb	r3, r3
    8500:	2b00      	cmp	r3, #0
    8502:	d004      	beq.n	850e <handlePublish+0x11a>
        return rc;
    8504:	232f      	movs	r3, #47	; 0x2f
    8506:	18fb      	adds	r3, r7, r3
    8508:	781b      	ldrb	r3, [r3, #0]
    850a:	b25b      	sxtb	r3, r3
    850c:	e015      	b.n	853a <handlePublish+0x146>
    }

    rc = sendPacket(c, len, timer);
    850e:	68f9      	ldr	r1, [r7, #12]
    8510:	232f      	movs	r3, #47	; 0x2f
    8512:	18fc      	adds	r4, r7, r3
    8514:	683a      	ldr	r2, [r7, #0]
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	0018      	movs	r0, r3
    851a:	4b0d      	ldr	r3, [pc, #52]	; (8550 <handlePublish+0x15c>)
    851c:	4798      	blx	r3
    851e:	0003      	movs	r3, r0
    8520:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8522:	232f      	movs	r3, #47	; 0x2f
    8524:	18fb      	adds	r3, r7, r3
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	b25b      	sxtb	r3, r3
    852a:	2b00      	cmp	r3, #0
    852c:	d004      	beq.n	8538 <handlePublish+0x144>
        return rc;
    852e:	232f      	movs	r3, #47	; 0x2f
    8530:	18fb      	adds	r3, r7, r3
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	b25b      	sxtb	r3, r3
    8536:	e000      	b.n	853a <handlePublish+0x146>
    }

    return SUCCESS;
    8538:	2300      	movs	r3, #0
}
    853a:	0018      	movs	r0, r3
    853c:	46bd      	mov	sp, r7
    853e:	b00d      	add	sp, #52	; 0x34
    8540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8542:	46c0      	nop			; (mov r8, r8)
    8544:	00009685 	.word	0x00009685
    8548:	00008029 	.word	0x00008029
    854c:	0000a1f1 	.word	0x0000a1f1
    8550:	00007a49 	.word	0x00007a49

00008554 <handlePubrec>:

MQTTReturnCode handlePubrec(Client *c, Timer *timer) {
    8554:	b5b0      	push	{r4, r5, r7, lr}
    8556:	b088      	sub	sp, #32
    8558:	af02      	add	r7, sp, #8
    855a:	6078      	str	r0, [r7, #4]
    855c:	6039      	str	r1, [r7, #0]
    uint16_t packet_id;
    unsigned char dup, type;
    MQTTReturnCode rc;
    rc = MQTTDeserialize_ack(&type, &dup, &packet_id, c->readbuf, c->readBufSize);
    855e:	687b      	ldr	r3, [r7, #4]
    8560:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	69db      	ldr	r3, [r3, #28]
    8566:	2217      	movs	r2, #23
    8568:	18bc      	adds	r4, r7, r2
    856a:	2214      	movs	r2, #20
    856c:	18ba      	adds	r2, r7, r2
    856e:	2113      	movs	r1, #19
    8570:	1879      	adds	r1, r7, r1
    8572:	2012      	movs	r0, #18
    8574:	1838      	adds	r0, r7, r0
    8576:	9300      	str	r3, [sp, #0]
    8578:	002b      	movs	r3, r5
    857a:	4d23      	ldr	r5, [pc, #140]	; (8608 <handlePubrec+0xb4>)
    857c:	47a8      	blx	r5
    857e:	0003      	movs	r3, r0
    8580:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8582:	2317      	movs	r3, #23
    8584:	18fb      	adds	r3, r7, r3
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	b25b      	sxtb	r3, r3
    858a:	2b00      	cmp	r3, #0
    858c:	d004      	beq.n	8598 <handlePubrec+0x44>
        return rc;
    858e:	2317      	movs	r3, #23
    8590:	18fb      	adds	r3, r7, r3
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	b25b      	sxtb	r3, r3
    8596:	e033      	b.n	8600 <handlePubrec+0xac>
    }

    uint32_t len;
    rc = MQTTSerialize_ack(c->buf, c->bufSize, PUBREL, 0, packet_id, &len);
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	6a18      	ldr	r0, [r3, #32]
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	6999      	ldr	r1, [r3, #24]
    85a0:	2314      	movs	r3, #20
    85a2:	18fb      	adds	r3, r7, r3
    85a4:	881b      	ldrh	r3, [r3, #0]
    85a6:	2217      	movs	r2, #23
    85a8:	18bc      	adds	r4, r7, r2
    85aa:	220c      	movs	r2, #12
    85ac:	18ba      	adds	r2, r7, r2
    85ae:	9201      	str	r2, [sp, #4]
    85b0:	9300      	str	r3, [sp, #0]
    85b2:	2300      	movs	r3, #0
    85b4:	2206      	movs	r2, #6
    85b6:	4d15      	ldr	r5, [pc, #84]	; (860c <handlePubrec+0xb8>)
    85b8:	47a8      	blx	r5
    85ba:	0003      	movs	r3, r0
    85bc:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    85be:	2317      	movs	r3, #23
    85c0:	18fb      	adds	r3, r7, r3
    85c2:	781b      	ldrb	r3, [r3, #0]
    85c4:	b25b      	sxtb	r3, r3
    85c6:	2b00      	cmp	r3, #0
    85c8:	d004      	beq.n	85d4 <handlePubrec+0x80>
        return rc;
    85ca:	2317      	movs	r3, #23
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	b25b      	sxtb	r3, r3
    85d2:	e015      	b.n	8600 <handlePubrec+0xac>
    }

    /* send the PUBREL packet */
    rc = sendPacket(c, len, timer);
    85d4:	68f9      	ldr	r1, [r7, #12]
    85d6:	2317      	movs	r3, #23
    85d8:	18fc      	adds	r4, r7, r3
    85da:	683a      	ldr	r2, [r7, #0]
    85dc:	687b      	ldr	r3, [r7, #4]
    85de:	0018      	movs	r0, r3
    85e0:	4b0b      	ldr	r3, [pc, #44]	; (8610 <handlePubrec+0xbc>)
    85e2:	4798      	blx	r3
    85e4:	0003      	movs	r3, r0
    85e6:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    85e8:	2317      	movs	r3, #23
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	b25b      	sxtb	r3, r3
    85f0:	2b00      	cmp	r3, #0
    85f2:	d004      	beq.n	85fe <handlePubrec+0xaa>
        /* there was a problem */
        return rc;
    85f4:	2317      	movs	r3, #23
    85f6:	18fb      	adds	r3, r7, r3
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	b25b      	sxtb	r3, r3
    85fc:	e000      	b.n	8600 <handlePubrec+0xac>
    }

    return SUCCESS;
    85fe:	2300      	movs	r3, #0
}
    8600:	0018      	movs	r0, r3
    8602:	46bd      	mov	sp, r7
    8604:	b006      	add	sp, #24
    8606:	bdb0      	pop	{r4, r5, r7, pc}
    8608:	000097dd 	.word	0x000097dd
    860c:	0000a1f1 	.word	0x0000a1f1
    8610:	00007a49 	.word	0x00007a49

00008614 <cycle>:

MQTTReturnCode cycle(Client *c, Timer *timer, uint8_t *packet_type) {
    8614:	b590      	push	{r4, r7, lr}
    8616:	b087      	sub	sp, #28
    8618:	af00      	add	r7, sp, #0
    861a:	60f8      	str	r0, [r7, #12]
    861c:	60b9      	str	r1, [r7, #8]
    861e:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == timer) {
    8620:	68fb      	ldr	r3, [r7, #12]
    8622:	2b00      	cmp	r3, #0
    8624:	d002      	beq.n	862c <cycle+0x18>
    8626:	68bb      	ldr	r3, [r7, #8]
    8628:	2b00      	cmp	r3, #0
    862a:	d102      	bne.n	8632 <cycle+0x1e>
        return MQTT_NULL_VALUE_ERROR;
    862c:	2306      	movs	r3, #6
    862e:	425b      	negs	r3, r3
    8630:	e050      	b.n	86d4 <cycle+0xc0>
    }

    /* read the socket, see what work is due */
    MQTTReturnCode rc = readPacket(c, timer, packet_type);
    8632:	2317      	movs	r3, #23
    8634:	18fc      	adds	r4, r7, r3
    8636:	687a      	ldr	r2, [r7, #4]
    8638:	68b9      	ldr	r1, [r7, #8]
    863a:	68fb      	ldr	r3, [r7, #12]
    863c:	0018      	movs	r0, r3
    863e:	4b27      	ldr	r3, [pc, #156]	; (86dc <cycle+0xc8>)
    8640:	4798      	blx	r3
    8642:	0003      	movs	r3, r0
    8644:	7023      	strb	r3, [r4, #0]
    if(MQTT_NOTHING_TO_READ == rc) {
    8646:	2317      	movs	r3, #23
    8648:	18fb      	adds	r3, r7, r3
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	b25b      	sxtb	r3, r3
    864e:	2b02      	cmp	r3, #2
    8650:	d101      	bne.n	8656 <cycle+0x42>
        /* Nothing to read, not a cycle failure */
        return SUCCESS;
    8652:	2300      	movs	r3, #0
    8654:	e03e      	b.n	86d4 <cycle+0xc0>
    }
    if(SUCCESS != rc) {
    8656:	2317      	movs	r3, #23
    8658:	18fb      	adds	r3, r7, r3
    865a:	781b      	ldrb	r3, [r3, #0]
    865c:	b25b      	sxtb	r3, r3
    865e:	2b00      	cmp	r3, #0
    8660:	d004      	beq.n	866c <cycle+0x58>
        return rc;
    8662:	2317      	movs	r3, #23
    8664:	18fb      	adds	r3, r7, r3
    8666:	781b      	ldrb	r3, [r3, #0]
    8668:	b25b      	sxtb	r3, r3
    866a:	e033      	b.n	86d4 <cycle+0xc0>
    }

    switch(*packet_type) {
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	781b      	ldrb	r3, [r3, #0]
    8670:	2b0d      	cmp	r3, #13
    8672:	d827      	bhi.n	86c4 <cycle+0xb0>
    8674:	009a      	lsls	r2, r3, #2
    8676:	4b1a      	ldr	r3, [pc, #104]	; (86e0 <cycle+0xcc>)
    8678:	18d3      	adds	r3, r2, r3
    867a:	681b      	ldr	r3, [r3, #0]
    867c:	469f      	mov	pc, r3
        case PUBACK:
        case SUBACK:
        case UNSUBACK:
            break;
        case PUBLISH: {
            rc = handlePublish(c, timer);
    867e:	2317      	movs	r3, #23
    8680:	18fc      	adds	r4, r7, r3
    8682:	68ba      	ldr	r2, [r7, #8]
    8684:	68fb      	ldr	r3, [r7, #12]
    8686:	0011      	movs	r1, r2
    8688:	0018      	movs	r0, r3
    868a:	4b16      	ldr	r3, [pc, #88]	; (86e4 <cycle+0xd0>)
    868c:	4798      	blx	r3
    868e:	0003      	movs	r3, r0
    8690:	7023      	strb	r3, [r4, #0]
            break;
    8692:	e01b      	b.n	86cc <cycle+0xb8>
        }
        case PUBREC: {
            rc = handlePubrec(c, timer);
    8694:	2317      	movs	r3, #23
    8696:	18fc      	adds	r4, r7, r3
    8698:	68ba      	ldr	r2, [r7, #8]
    869a:	68fb      	ldr	r3, [r7, #12]
    869c:	0011      	movs	r1, r2
    869e:	0018      	movs	r0, r3
    86a0:	4b11      	ldr	r3, [pc, #68]	; (86e8 <cycle+0xd4>)
    86a2:	4798      	blx	r3
    86a4:	0003      	movs	r3, r0
    86a6:	7023      	strb	r3, [r4, #0]
            break;
    86a8:	e010      	b.n	86cc <cycle+0xb8>
        }
        case PUBCOMP:
            break;
        case PINGRESP: {
            c->isPingOutstanding = 0;
    86aa:	68fb      	ldr	r3, [r7, #12]
    86ac:	2200      	movs	r2, #0
    86ae:	709a      	strb	r2, [r3, #2]
            countdown(&c->pingTimer, c->keepAliveInterval);
    86b0:	68fb      	ldr	r3, [r7, #12]
    86b2:	33b4      	adds	r3, #180	; 0xb4
    86b4:	001a      	movs	r2, r3
    86b6:	68fb      	ldr	r3, [r7, #12]
    86b8:	68db      	ldr	r3, [r3, #12]
    86ba:	0019      	movs	r1, r3
    86bc:	0010      	movs	r0, r2
    86be:	4b0b      	ldr	r3, [pc, #44]	; (86ec <cycle+0xd8>)
    86c0:	4798      	blx	r3
            break;
    86c2:	e003      	b.n	86cc <cycle+0xb8>
        }
        default: {
            /* Either unknown packet type or Failure occurred
             * Should not happen */
        	return MQTT_BUFFER_RX_MESSAGE_INVALID;
    86c4:	2312      	movs	r3, #18
    86c6:	425b      	negs	r3, r3
    86c8:	e004      	b.n	86d4 <cycle+0xc0>
            break;
    86ca:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }

    return rc;
    86cc:	2317      	movs	r3, #23
    86ce:	18fb      	adds	r3, r7, r3
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	b25b      	sxtb	r3, r3
}
    86d4:	0018      	movs	r0, r3
    86d6:	46bd      	mov	sp, r7
    86d8:	b007      	add	sp, #28
    86da:	bd90      	pop	{r4, r7, pc}
    86dc:	00007da5 	.word	0x00007da5
    86e0:	0001e3c0 	.word	0x0001e3c0
    86e4:	000083f5 	.word	0x000083f5
    86e8:	00008555 	.word	0x00008555
    86ec:	00007361 	.word	0x00007361

000086f0 <MQTTYield>:

MQTTReturnCode MQTTYield(Client *c, uint32_t timeout_ms) {
    86f0:	b590      	push	{r4, r7, lr}
    86f2:	b087      	sub	sp, #28
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
    86f8:	6039      	str	r1, [r7, #0]
    if(NULL == c) {
    86fa:	687b      	ldr	r3, [r7, #4]
    86fc:	2b00      	cmp	r3, #0
    86fe:	d102      	bne.n	8706 <MQTTYield+0x16>
        return MQTT_NULL_VALUE_ERROR;
    8700:	2306      	movs	r3, #6
    8702:	425b      	negs	r3, r3
    8704:	e08d      	b.n	8822 <MQTTYield+0x132>
    }

    /* Check if network was manually disconnected */
    if(0 == c->isConnected && 1 == c->wasManuallyDisconnected) {
    8706:	687b      	ldr	r3, [r7, #4]
    8708:	781b      	ldrb	r3, [r3, #0]
    870a:	2b00      	cmp	r3, #0
    870c:	d105      	bne.n	871a <MQTTYield+0x2a>
    870e:	687b      	ldr	r3, [r7, #4]
    8710:	785b      	ldrb	r3, [r3, #1]
    8712:	2b01      	cmp	r3, #1
    8714:	d101      	bne.n	871a <MQTTYield+0x2a>
        return MQTT_NETWORK_MANUALLY_DISCONNECTED;
    8716:	2305      	movs	r3, #5
    8718:	e083      	b.n	8822 <MQTTYield+0x132>
    }

    /* Check if network is disconnected and auto-reconnect is not enabled */
    if(0 == c->isConnected && 0 == c->isAutoReconnectEnabled) {
    871a:	687b      	ldr	r3, [r7, #4]
    871c:	781b      	ldrb	r3, [r3, #0]
    871e:	2b00      	cmp	r3, #0
    8720:	d106      	bne.n	8730 <MQTTYield+0x40>
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	78db      	ldrb	r3, [r3, #3]
    8726:	2b00      	cmp	r3, #0
    8728:	d102      	bne.n	8730 <MQTTYield+0x40>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    872a:	2304      	movs	r3, #4
    872c:	425b      	negs	r3, r3
    872e:	e078      	b.n	8822 <MQTTYield+0x132>
    }

    MQTTReturnCode rc = SUCCESS;
    8730:	2317      	movs	r3, #23
    8732:	18fb      	adds	r3, r7, r3
    8734:	2200      	movs	r2, #0
    8736:	701a      	strb	r2, [r3, #0]
    Timer timer;
    InitTimer(&timer);
    8738:	230c      	movs	r3, #12
    873a:	18fb      	adds	r3, r7, r3
    873c:	0018      	movs	r0, r3
    873e:	4b3b      	ldr	r3, [pc, #236]	; (882c <MQTTYield+0x13c>)
    8740:	4798      	blx	r3
    uint8_t packet_type;
    countdown_ms(&timer, timeout_ms);
    8742:	683a      	ldr	r2, [r7, #0]
    8744:	230c      	movs	r3, #12
    8746:	18fb      	adds	r3, r7, r3
    8748:	0011      	movs	r1, r2
    874a:	0018      	movs	r0, r3
    874c:	4b38      	ldr	r3, [pc, #224]	; (8830 <MQTTYield+0x140>)
    874e:	4798      	blx	r3

    while(!expired(&timer)) {
    8750:	e058      	b.n	8804 <MQTTYield+0x114>
        if(0 == c->isConnected) {
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	2b00      	cmp	r3, #0
    8758:	d113      	bne.n	8782 <MQTTYield+0x92>
            if(MAX_RECONNECT_WAIT_INTERVAL < c->currentReconnectWaitInterval) {
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	691a      	ldr	r2, [r3, #16]
    875e:	23fa      	movs	r3, #250	; 0xfa
    8760:	015b      	lsls	r3, r3, #5
    8762:	429a      	cmp	r2, r3
    8764:	d904      	bls.n	8770 <MQTTYield+0x80>
                rc = MQTT_RECONNECT_TIMED_OUT;
    8766:	2317      	movs	r3, #23
    8768:	18fb      	adds	r3, r7, r3
    876a:	22f8      	movs	r2, #248	; 0xf8
    876c:	701a      	strb	r2, [r3, #0]
                break;
    876e:	e054      	b.n	881a <MQTTYield+0x12a>
            }
            rc = handleReconnect(c);
    8770:	2317      	movs	r3, #23
    8772:	18fc      	adds	r4, r7, r3
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	0018      	movs	r0, r3
    8778:	4b2e      	ldr	r3, [pc, #184]	; (8834 <MQTTYield+0x144>)
    877a:	4798      	blx	r3
    877c:	0003      	movs	r3, r0
    877e:	7023      	strb	r3, [r4, #0]
            /* Network reconnect attempted, check if yield timer expired before
             * doing anything else */
            continue;
    8780:	e040      	b.n	8804 <MQTTYield+0x114>
        }

        rc = cycle(c, &timer, &packet_type);
    8782:	2317      	movs	r3, #23
    8784:	18fc      	adds	r4, r7, r3
    8786:	230b      	movs	r3, #11
    8788:	18fa      	adds	r2, r7, r3
    878a:	230c      	movs	r3, #12
    878c:	18f9      	adds	r1, r7, r3
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	0018      	movs	r0, r3
    8792:	4b29      	ldr	r3, [pc, #164]	; (8838 <MQTTYield+0x148>)
    8794:	4798      	blx	r3
    8796:	0003      	movs	r3, r0
    8798:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    879a:	2317      	movs	r3, #23
    879c:	18fb      	adds	r3, r7, r3
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	b25b      	sxtb	r3, r3
    87a2:	2b00      	cmp	r3, #0
    87a4:	d136      	bne.n	8814 <MQTTYield+0x124>
            break;
        }

        rc = keepalive(c);
    87a6:	2317      	movs	r3, #23
    87a8:	18fc      	adds	r4, r7, r3
    87aa:	687b      	ldr	r3, [r7, #4]
    87ac:	0018      	movs	r0, r3
    87ae:	4b23      	ldr	r3, [pc, #140]	; (883c <MQTTYield+0x14c>)
    87b0:	4798      	blx	r3
    87b2:	0003      	movs	r3, r0
    87b4:	7023      	strb	r3, [r4, #0]
        if(MQTT_NETWORK_DISCONNECTED_ERROR == rc && 1 == c->isAutoReconnectEnabled) {
    87b6:	2317      	movs	r3, #23
    87b8:	18fb      	adds	r3, r7, r3
    87ba:	781b      	ldrb	r3, [r3, #0]
    87bc:	b25b      	sxtb	r3, r3
    87be:	3304      	adds	r3, #4
    87c0:	d11a      	bne.n	87f8 <MQTTYield+0x108>
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	78db      	ldrb	r3, [r3, #3]
    87c6:	2b01      	cmp	r3, #1
    87c8:	d116      	bne.n	87f8 <MQTTYield+0x108>
            c->currentReconnectWaitInterval = MIN_RECONNECT_WAIT_INTERVAL;
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	22fa      	movs	r2, #250	; 0xfa
    87ce:	0092      	lsls	r2, r2, #2
    87d0:	611a      	str	r2, [r3, #16]
            countdown_ms(&(c->reconnectDelayTimer), c->currentReconnectWaitInterval);
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	33bc      	adds	r3, #188	; 0xbc
    87d6:	001a      	movs	r2, r3
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	691b      	ldr	r3, [r3, #16]
    87dc:	0019      	movs	r1, r3
    87de:	0010      	movs	r0, r2
    87e0:	4b13      	ldr	r3, [pc, #76]	; (8830 <MQTTYield+0x140>)
    87e2:	4798      	blx	r3
            c->counterNetworkDisconnected++;
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	695b      	ldr	r3, [r3, #20]
    87e8:	1c5a      	adds	r2, r3, #1
    87ea:	687b      	ldr	r3, [r7, #4]
    87ec:	615a      	str	r2, [r3, #20]
            /* Depending on timer values, it is possible that yield timer has expired
             * Set to rc to attempting reconnect to inform client that autoreconnect
             * attempt has started */
            rc = MQTT_ATTEMPTING_RECONNECT;
    87ee:	2317      	movs	r3, #23
    87f0:	18fb      	adds	r3, r7, r3
    87f2:	2203      	movs	r2, #3
    87f4:	701a      	strb	r2, [r3, #0]
    87f6:	e005      	b.n	8804 <MQTTYield+0x114>
        } else if(SUCCESS != rc) {
    87f8:	2317      	movs	r3, #23
    87fa:	18fb      	adds	r3, r7, r3
    87fc:	781b      	ldrb	r3, [r3, #0]
    87fe:	b25b      	sxtb	r3, r3
    8800:	2b00      	cmp	r3, #0
    8802:	d109      	bne.n	8818 <MQTTYield+0x128>
    while(!expired(&timer)) {
    8804:	230c      	movs	r3, #12
    8806:	18fb      	adds	r3, r7, r3
    8808:	0018      	movs	r0, r3
    880a:	4b0d      	ldr	r3, [pc, #52]	; (8840 <MQTTYield+0x150>)
    880c:	4798      	blx	r3
    880e:	1e03      	subs	r3, r0, #0
    8810:	d09f      	beq.n	8752 <MQTTYield+0x62>
    8812:	e002      	b.n	881a <MQTTYield+0x12a>
            break;
    8814:	46c0      	nop			; (mov r8, r8)
    8816:	e000      	b.n	881a <MQTTYield+0x12a>
            break;
    8818:	46c0      	nop			; (mov r8, r8)
        }
    }

    return rc;
    881a:	2317      	movs	r3, #23
    881c:	18fb      	adds	r3, r7, r3
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	b25b      	sxtb	r3, r3
}
    8822:	0018      	movs	r0, r3
    8824:	46bd      	mov	sp, r7
    8826:	b007      	add	sp, #28
    8828:	bd90      	pop	{r4, r7, pc}
    882a:	46c0      	nop			; (mov r8, r8)
    882c:	000073e9 	.word	0x000073e9
    8830:	00007311 	.word	0x00007311
    8834:	0000821d 	.word	0x0000821d
    8838:	00008615 	.word	0x00008615
    883c:	000082e9 	.word	0x000082e9
    8840:	000072d9 	.word	0x000072d9

00008844 <waitfor>:

/* only used in single-threaded mode where one command at a time is in process */
MQTTReturnCode waitfor(Client *c, uint8_t packet_type, Timer *timer) {
    8844:	b590      	push	{r4, r7, lr}
    8846:	b087      	sub	sp, #28
    8848:	af00      	add	r7, sp, #0
    884a:	60f8      	str	r0, [r7, #12]
    884c:	607a      	str	r2, [r7, #4]
    884e:	230b      	movs	r3, #11
    8850:	18fb      	adds	r3, r7, r3
    8852:	1c0a      	adds	r2, r1, #0
    8854:	701a      	strb	r2, [r3, #0]
    if(NULL == c || NULL == timer) {
    8856:	68fb      	ldr	r3, [r7, #12]
    8858:	2b00      	cmp	r3, #0
    885a:	d002      	beq.n	8862 <waitfor+0x1e>
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	2b00      	cmp	r3, #0
    8860:	d102      	bne.n	8868 <waitfor+0x24>
        return MQTT_NULL_VALUE_ERROR;
    8862:	2306      	movs	r3, #6
    8864:	425b      	negs	r3, r3
    8866:	e03d      	b.n	88e4 <waitfor+0xa0>
    }

    MQTTReturnCode rc = FAILURE;
    8868:	2317      	movs	r3, #23
    886a:	18fb      	adds	r3, r7, r3
    886c:	22ff      	movs	r2, #255	; 0xff
    886e:	701a      	strb	r2, [r3, #0]
    uint8_t read_packet_type = 0;
    8870:	2316      	movs	r3, #22
    8872:	18fb      	adds	r3, r7, r3
    8874:	2200      	movs	r2, #0
    8876:	701a      	strb	r2, [r3, #0]
    do {
        if(expired(timer)) {
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	0018      	movs	r0, r3
    887c:	4b1b      	ldr	r3, [pc, #108]	; (88ec <waitfor+0xa8>)
    887e:	4798      	blx	r3
    8880:	1e03      	subs	r3, r0, #0
    8882:	d119      	bne.n	88b8 <waitfor+0x74>
            /* we timed out */
            break;
        }
        rc = cycle(c, timer, &read_packet_type);
    8884:	2317      	movs	r3, #23
    8886:	18fc      	adds	r4, r7, r3
    8888:	2316      	movs	r3, #22
    888a:	18fa      	adds	r2, r7, r3
    888c:	6879      	ldr	r1, [r7, #4]
    888e:	68fb      	ldr	r3, [r7, #12]
    8890:	0018      	movs	r0, r3
    8892:	4b17      	ldr	r3, [pc, #92]	; (88f0 <waitfor+0xac>)
    8894:	4798      	blx	r3
    8896:	0003      	movs	r3, r0
    8898:	7023      	strb	r3, [r4, #0]
    }while(MQTT_NETWORK_DISCONNECTED_ERROR != rc  && read_packet_type != packet_type);
    889a:	2317      	movs	r3, #23
    889c:	18fb      	adds	r3, r7, r3
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	b25b      	sxtb	r3, r3
    88a2:	3304      	adds	r3, #4
    88a4:	d009      	beq.n	88ba <waitfor+0x76>
    88a6:	2316      	movs	r3, #22
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	781b      	ldrb	r3, [r3, #0]
    88ac:	220b      	movs	r2, #11
    88ae:	18ba      	adds	r2, r7, r2
    88b0:	7812      	ldrb	r2, [r2, #0]
    88b2:	429a      	cmp	r2, r3
    88b4:	d1e0      	bne.n	8878 <waitfor+0x34>
    88b6:	e000      	b.n	88ba <waitfor+0x76>
            break;
    88b8:	46c0      	nop			; (mov r8, r8)

    if(MQTT_NETWORK_DISCONNECTED_ERROR != rc && read_packet_type != packet_type) {
    88ba:	2317      	movs	r3, #23
    88bc:	18fb      	adds	r3, r7, r3
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	b25b      	sxtb	r3, r3
    88c2:	3304      	adds	r3, #4
    88c4:	d00a      	beq.n	88dc <waitfor+0x98>
    88c6:	2316      	movs	r3, #22
    88c8:	18fb      	adds	r3, r7, r3
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	220b      	movs	r2, #11
    88ce:	18ba      	adds	r2, r7, r2
    88d0:	7812      	ldrb	r2, [r2, #0]
    88d2:	429a      	cmp	r2, r3
    88d4:	d002      	beq.n	88dc <waitfor+0x98>
        return FAILURE;
    88d6:	2301      	movs	r3, #1
    88d8:	425b      	negs	r3, r3
    88da:	e003      	b.n	88e4 <waitfor+0xa0>
    }

    /* Something failed or we didn't receive the expected packet, return error code */
    return rc;
    88dc:	2317      	movs	r3, #23
    88de:	18fb      	adds	r3, r7, r3
    88e0:	781b      	ldrb	r3, [r3, #0]
    88e2:	b25b      	sxtb	r3, r3
}
    88e4:	0018      	movs	r0, r3
    88e6:	46bd      	mov	sp, r7
    88e8:	b007      	add	sp, #28
    88ea:	bd90      	pop	{r4, r7, pc}
    88ec:	000072d9 	.word	0x000072d9
    88f0:	00008615 	.word	0x00008615

000088f4 <MQTTConnect>:

MQTTReturnCode MQTTConnect(Client *c, MQTTPacket_connectData *options) {
    88f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    88f6:	b08d      	sub	sp, #52	; 0x34
    88f8:	af04      	add	r7, sp, #16
    88fa:	6078      	str	r0, [r7, #4]
    88fc:	6039      	str	r1, [r7, #0]
    if(NULL == c) {
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	2b00      	cmp	r3, #0
    8902:	d102      	bne.n	890a <MQTTConnect+0x16>
        return MQTT_NULL_VALUE_ERROR;
    8904:	2306      	movs	r3, #6
    8906:	425b      	negs	r3, r3
    8908:	e0d8      	b.n	8abc <MQTTConnect+0x1c8>
    }

    Timer connect_timer;
    MQTTReturnCode connack_rc = FAILURE;
    890a:	2313      	movs	r3, #19
    890c:	18fb      	adds	r3, r7, r3
    890e:	22ff      	movs	r2, #255	; 0xff
    8910:	701a      	strb	r2, [r3, #0]
    char sessionPresent = 0;
    8912:	2312      	movs	r3, #18
    8914:	18fb      	adds	r3, r7, r3
    8916:	2200      	movs	r2, #0
    8918:	701a      	strb	r2, [r3, #0]
    uint32_t len = 0;
    891a:	2300      	movs	r3, #0
    891c:	60fb      	str	r3, [r7, #12]
    MQTTReturnCode rc = FAILURE;
    891e:	231f      	movs	r3, #31
    8920:	18fb      	adds	r3, r7, r3
    8922:	22ff      	movs	r2, #255	; 0xff
    8924:	701a      	strb	r2, [r3, #0]

    InitTimer(&connect_timer);
    8926:	2314      	movs	r3, #20
    8928:	18fb      	adds	r3, r7, r3
    892a:	0018      	movs	r0, r3
    892c:	4b65      	ldr	r3, [pc, #404]	; (8ac4 <MQTTConnect+0x1d0>)
    892e:	4798      	blx	r3
    countdown_ms(&connect_timer, c->commandTimeoutMs);
    8930:	687b      	ldr	r3, [r7, #4]
    8932:	689a      	ldr	r2, [r3, #8]
    8934:	2314      	movs	r3, #20
    8936:	18fb      	adds	r3, r7, r3
    8938:	0011      	movs	r1, r2
    893a:	0018      	movs	r0, r3
    893c:	4b62      	ldr	r3, [pc, #392]	; (8ac8 <MQTTConnect+0x1d4>)
    893e:	4798      	blx	r3

    if(c->isConnected) {
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	2b00      	cmp	r3, #0
    8946:	d002      	beq.n	894e <MQTTConnect+0x5a>
        /* Don't send connect packet again if we are already connected */
        return MQTT_NETWORK_ALREADY_CONNECTED_ERROR;
    8948:	2305      	movs	r3, #5
    894a:	425b      	negs	r3, r3
    894c:	e0b6      	b.n	8abc <MQTTConnect+0x1c8>
    }

    if(NULL != options) {
    894e:	683b      	ldr	r3, [r7, #0]
    8950:	2b00      	cmp	r3, #0
    8952:	d006      	beq.n	8962 <MQTTConnect+0x6e>
        /* override default options if new options were supplied */
        copyMQTTConnectData(&(c->options), options);
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	3344      	adds	r3, #68	; 0x44
    8958:	683a      	ldr	r2, [r7, #0]
    895a:	0011      	movs	r1, r2
    895c:	0018      	movs	r0, r3
    895e:	4b5b      	ldr	r3, [pc, #364]	; (8acc <MQTTConnect+0x1d8>)
    8960:	4798      	blx	r3
    }

    c->networkInitHandler(&(c->networkStack));
    8962:	687a      	ldr	r2, [r7, #4]
    8964:	238e      	movs	r3, #142	; 0x8e
    8966:	005b      	lsls	r3, r3, #1
    8968:	58d3      	ldr	r3, [r2, r3]
    896a:	687a      	ldr	r2, [r7, #4]
    896c:	3298      	adds	r2, #152	; 0x98
    896e:	0010      	movs	r0, r2
    8970:	4798      	blx	r3
    rc = c->networkStack.connect(&(c->networkStack), c->tlsConnectParams);
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	229c      	movs	r2, #156	; 0x9c
    8976:	589c      	ldr	r4, [r3, r2]
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	3398      	adds	r3, #152	; 0x98
    897c:	469c      	mov	ip, r3
    897e:	687b      	ldr	r3, [r7, #4]
    8980:	466a      	mov	r2, sp
    8982:	0011      	movs	r1, r2
    8984:	001a      	movs	r2, r3
    8986:	3234      	adds	r2, #52	; 0x34
    8988:	ca61      	ldmia	r2!, {r0, r5, r6}
    898a:	c161      	stmia	r1!, {r0, r5, r6}
    898c:	6812      	ldr	r2, [r2, #0]
    898e:	600a      	str	r2, [r1, #0]
    8990:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8996:	4660      	mov	r0, ip
    8998:	47a0      	blx	r4
    899a:	0002      	movs	r2, r0
    899c:	231f      	movs	r3, #31
    899e:	18fb      	adds	r3, r7, r3
    89a0:	701a      	strb	r2, [r3, #0]
    if(0 != rc) {
    89a2:	231f      	movs	r3, #31
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	b25b      	sxtb	r3, r3
    89aa:	2b00      	cmp	r3, #0
    89ac:	d002      	beq.n	89b4 <MQTTConnect+0xc0>
        /* TLS Connect failed, return error */
        return FAILURE;
    89ae:	2301      	movs	r3, #1
    89b0:	425b      	negs	r3, r3
    89b2:	e083      	b.n	8abc <MQTTConnect+0x1c8>
    }

    c->keepAliveInterval = c->options.keepAliveInterval;
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	2258      	movs	r2, #88	; 0x58
    89b8:	5a9b      	ldrh	r3, [r3, r2]
    89ba:	001a      	movs	r2, r3
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	60da      	str	r2, [r3, #12]
    rc = MQTTSerialize_connect(c->buf, c->bufSize, &(c->options), &len);
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	6a18      	ldr	r0, [r3, #32]
    89c4:	687b      	ldr	r3, [r7, #4]
    89c6:	6999      	ldr	r1, [r3, #24]
    89c8:	687b      	ldr	r3, [r7, #4]
    89ca:	3344      	adds	r3, #68	; 0x44
    89cc:	001a      	movs	r2, r3
    89ce:	231f      	movs	r3, #31
    89d0:	18fc      	adds	r4, r7, r3
    89d2:	230c      	movs	r3, #12
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	4d3e      	ldr	r5, [pc, #248]	; (8ad0 <MQTTConnect+0x1dc>)
    89d8:	47a8      	blx	r5
    89da:	0003      	movs	r3, r0
    89dc:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc || 0 >= len) {
    89de:	231f      	movs	r3, #31
    89e0:	18fb      	adds	r3, r7, r3
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	b25b      	sxtb	r3, r3
    89e6:	2b00      	cmp	r3, #0
    89e8:	d102      	bne.n	89f0 <MQTTConnect+0xfc>
    89ea:	68fb      	ldr	r3, [r7, #12]
    89ec:	2b00      	cmp	r3, #0
    89ee:	d102      	bne.n	89f6 <MQTTConnect+0x102>
        return FAILURE;
    89f0:	2301      	movs	r3, #1
    89f2:	425b      	negs	r3, r3
    89f4:	e062      	b.n	8abc <MQTTConnect+0x1c8>
    }

    /* send the connect packet */
    rc = sendPacket(c, len, &connect_timer);
    89f6:	68f9      	ldr	r1, [r7, #12]
    89f8:	231f      	movs	r3, #31
    89fa:	18fc      	adds	r4, r7, r3
    89fc:	2314      	movs	r3, #20
    89fe:	18fa      	adds	r2, r7, r3
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	0018      	movs	r0, r3
    8a04:	4b33      	ldr	r3, [pc, #204]	; (8ad4 <MQTTConnect+0x1e0>)
    8a06:	4798      	blx	r3
    8a08:	0003      	movs	r3, r0
    8a0a:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8a0c:	231f      	movs	r3, #31
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	b25b      	sxtb	r3, r3
    8a14:	2b00      	cmp	r3, #0
    8a16:	d004      	beq.n	8a22 <MQTTConnect+0x12e>
        return rc;
    8a18:	231f      	movs	r3, #31
    8a1a:	18fb      	adds	r3, r7, r3
    8a1c:	781b      	ldrb	r3, [r3, #0]
    8a1e:	b25b      	sxtb	r3, r3
    8a20:	e04c      	b.n	8abc <MQTTConnect+0x1c8>
    }

    /* this will be a blocking call, wait for the CONNACK */
    rc = waitfor(c, CONNACK, &connect_timer);
    8a22:	231f      	movs	r3, #31
    8a24:	18fc      	adds	r4, r7, r3
    8a26:	2314      	movs	r3, #20
    8a28:	18fa      	adds	r2, r7, r3
    8a2a:	687b      	ldr	r3, [r7, #4]
    8a2c:	2102      	movs	r1, #2
    8a2e:	0018      	movs	r0, r3
    8a30:	4b29      	ldr	r3, [pc, #164]	; (8ad8 <MQTTConnect+0x1e4>)
    8a32:	4798      	blx	r3
    8a34:	0003      	movs	r3, r0
    8a36:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8a38:	231f      	movs	r3, #31
    8a3a:	18fb      	adds	r3, r7, r3
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	b25b      	sxtb	r3, r3
    8a40:	2b00      	cmp	r3, #0
    8a42:	d004      	beq.n	8a4e <MQTTConnect+0x15a>
        return rc;
    8a44:	231f      	movs	r3, #31
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	b25b      	sxtb	r3, r3
    8a4c:	e036      	b.n	8abc <MQTTConnect+0x1c8>
    }

    /* Received CONNACK, check the return code */
    rc = MQTTDeserialize_connack((unsigned char *)&sessionPresent, &connack_rc, c->readbuf, c->readBufSize);
    8a4e:	687b      	ldr	r3, [r7, #4]
    8a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	69db      	ldr	r3, [r3, #28]
    8a56:	211f      	movs	r1, #31
    8a58:	187c      	adds	r4, r7, r1
    8a5a:	2113      	movs	r1, #19
    8a5c:	1879      	adds	r1, r7, r1
    8a5e:	2012      	movs	r0, #18
    8a60:	1838      	adds	r0, r7, r0
    8a62:	4d1e      	ldr	r5, [pc, #120]	; (8adc <MQTTConnect+0x1e8>)
    8a64:	47a8      	blx	r5
    8a66:	0003      	movs	r3, r0
    8a68:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8a6a:	231f      	movs	r3, #31
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	781b      	ldrb	r3, [r3, #0]
    8a70:	b25b      	sxtb	r3, r3
    8a72:	2b00      	cmp	r3, #0
    8a74:	d004      	beq.n	8a80 <MQTTConnect+0x18c>
        return rc;
    8a76:	231f      	movs	r3, #31
    8a78:	18fb      	adds	r3, r7, r3
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	b25b      	sxtb	r3, r3
    8a7e:	e01d      	b.n	8abc <MQTTConnect+0x1c8>
    }

    if(MQTT_CONNACK_CONNECTION_ACCEPTED != connack_rc) {
    8a80:	2313      	movs	r3, #19
    8a82:	18fb      	adds	r3, r7, r3
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	b25b      	sxtb	r3, r3
    8a88:	2b04      	cmp	r3, #4
    8a8a:	d004      	beq.n	8a96 <MQTTConnect+0x1a2>
        return connack_rc;
    8a8c:	2313      	movs	r3, #19
    8a8e:	18fb      	adds	r3, r7, r3
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	b25b      	sxtb	r3, r3
    8a94:	e012      	b.n	8abc <MQTTConnect+0x1c8>
    }

    c->isConnected = 1;
    8a96:	687b      	ldr	r3, [r7, #4]
    8a98:	2201      	movs	r2, #1
    8a9a:	701a      	strb	r2, [r3, #0]
    c->wasManuallyDisconnected = 0;
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	2200      	movs	r2, #0
    8aa0:	705a      	strb	r2, [r3, #1]
    c->isPingOutstanding = 0;
    8aa2:	687b      	ldr	r3, [r7, #4]
    8aa4:	2200      	movs	r2, #0
    8aa6:	709a      	strb	r2, [r3, #2]
    countdown(&c->pingTimer, c->keepAliveInterval);
    8aa8:	687b      	ldr	r3, [r7, #4]
    8aaa:	33b4      	adds	r3, #180	; 0xb4
    8aac:	001a      	movs	r2, r3
    8aae:	687b      	ldr	r3, [r7, #4]
    8ab0:	68db      	ldr	r3, [r3, #12]
    8ab2:	0019      	movs	r1, r3
    8ab4:	0010      	movs	r0, r2
    8ab6:	4b0a      	ldr	r3, [pc, #40]	; (8ae0 <MQTTConnect+0x1ec>)
    8ab8:	4798      	blx	r3

    return SUCCESS;
    8aba:	2300      	movs	r3, #0
}
    8abc:	0018      	movs	r0, r3
    8abe:	46bd      	mov	sp, r7
    8ac0:	b009      	add	sp, #36	; 0x24
    8ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ac4:	000073e9 	.word	0x000073e9
    8ac8:	00007311 	.word	0x00007311
    8acc:	00007afd 	.word	0x00007afd
    8ad0:	00009175 	.word	0x00009175
    8ad4:	00007a49 	.word	0x00007a49
    8ad8:	00008845 	.word	0x00008845
    8adc:	0000941d 	.word	0x0000941d
    8ae0:	00007361 	.word	0x00007361

00008ae4 <GetFreeMessageHandlerIndex>:

/* Return MAX_MESSAGE_HANDLERS value if no free index is available */
uint32_t GetFreeMessageHandlerIndex(Client *c) {
    8ae4:	b580      	push	{r7, lr}
    8ae6:	b084      	sub	sp, #16
    8ae8:	af00      	add	r7, sp, #0
    8aea:	6078      	str	r0, [r7, #4]
    uint32_t itr;
    for(itr = 0; itr < MAX_MESSAGE_HANDLERS; itr++) {
    8aec:	2300      	movs	r3, #0
    8aee:	60fb      	str	r3, [r7, #12]
    8af0:	e00b      	b.n	8b0a <GetFreeMessageHandlerIndex+0x26>
        if(c->messageHandlers[itr].topicFilter == NULL) {
    8af2:	687a      	ldr	r2, [r7, #4]
    8af4:	68fb      	ldr	r3, [r7, #12]
    8af6:	330c      	adds	r3, #12
    8af8:	011b      	lsls	r3, r3, #4
    8afa:	18d3      	adds	r3, r2, r3
    8afc:	3304      	adds	r3, #4
    8afe:	681b      	ldr	r3, [r3, #0]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d006      	beq.n	8b12 <GetFreeMessageHandlerIndex+0x2e>
    for(itr = 0; itr < MAX_MESSAGE_HANDLERS; itr++) {
    8b04:	68fb      	ldr	r3, [r7, #12]
    8b06:	3301      	adds	r3, #1
    8b08:	60fb      	str	r3, [r7, #12]
    8b0a:	68fb      	ldr	r3, [r7, #12]
    8b0c:	2b04      	cmp	r3, #4
    8b0e:	d9f0      	bls.n	8af2 <GetFreeMessageHandlerIndex+0xe>
    8b10:	e000      	b.n	8b14 <GetFreeMessageHandlerIndex+0x30>
            break;
    8b12:	46c0      	nop			; (mov r8, r8)
        }
    }

    return itr;
    8b14:	68fb      	ldr	r3, [r7, #12]
}
    8b16:	0018      	movs	r0, r3
    8b18:	46bd      	mov	sp, r7
    8b1a:	b004      	add	sp, #16
    8b1c:	bd80      	pop	{r7, pc}
	...

00008b20 <MQTTResubscribe>:
    c->messageHandlers[indexOfFreeMessageHandler].qos = qos;

    return SUCCESS;
}

MQTTReturnCode MQTTResubscribe(Client *c) {
    8b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b22:	b093      	sub	sp, #76	; 0x4c
    8b24:	af04      	add	r7, sp, #16
    8b26:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d102      	bne.n	8b34 <MQTTResubscribe+0x14>
        return MQTT_NULL_VALUE_ERROR;
    8b2e:	2306      	movs	r3, #6
    8b30:	425b      	negs	r3, r3
    8b32:	e0cb      	b.n	8ccc <MQTTResubscribe+0x1ac>
    }

    if(!c->isConnected) {
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	781b      	ldrb	r3, [r3, #0]
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d102      	bne.n	8b42 <MQTTResubscribe+0x22>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    8b3c:	2304      	movs	r3, #4
    8b3e:	425b      	negs	r3, r3
    8b40:	e0c4      	b.n	8ccc <MQTTResubscribe+0x1ac>
    }

    MQTTReturnCode rc = FAILURE;
    8b42:	2333      	movs	r3, #51	; 0x33
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	22ff      	movs	r2, #255	; 0xff
    8b48:	701a      	strb	r2, [r3, #0]
    Timer timer;
    uint32_t len = 0;
    8b4a:	2300      	movs	r3, #0
    8b4c:	623b      	str	r3, [r7, #32]
    uint32_t count = 0;
    8b4e:	2300      	movs	r3, #0
    8b50:	61fb      	str	r3, [r7, #28]
    QoS grantedQoS[3] = {QOS0, QOS0, QOS0};
    8b52:	2318      	movs	r3, #24
    8b54:	18fb      	adds	r3, r7, r3
    8b56:	2200      	movs	r2, #0
    8b58:	701a      	strb	r2, [r3, #0]
    8b5a:	2318      	movs	r3, #24
    8b5c:	18fb      	adds	r3, r7, r3
    8b5e:	2200      	movs	r2, #0
    8b60:	705a      	strb	r2, [r3, #1]
    8b62:	2318      	movs	r3, #24
    8b64:	18fb      	adds	r3, r7, r3
    8b66:	2200      	movs	r2, #0
    8b68:	709a      	strb	r2, [r3, #2]
    uint16_t packetId;
    uint32_t existingSubCount = GetFreeMessageHandlerIndex(c);
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	0018      	movs	r0, r3
    8b6e:	4b59      	ldr	r3, [pc, #356]	; (8cd4 <MQTTResubscribe+0x1b4>)
    8b70:	4798      	blx	r3
    8b72:	0003      	movs	r3, r0
    8b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t itr = 0;
    8b76:	2300      	movs	r3, #0
    8b78:	637b      	str	r3, [r7, #52]	; 0x34

    for(itr = 0; itr < existingSubCount; itr++) {
    8b7a:	2300      	movs	r3, #0
    8b7c:	637b      	str	r3, [r7, #52]	; 0x34
    8b7e:	e09f      	b.n	8cc0 <MQTTResubscribe+0x1a0>
        MQTTString topic = MQTTString_initializer;
    8b80:	2308      	movs	r3, #8
    8b82:	18fb      	adds	r3, r7, r3
    8b84:	2200      	movs	r2, #0
    8b86:	601a      	str	r2, [r3, #0]
    8b88:	2308      	movs	r3, #8
    8b8a:	18fb      	adds	r3, r7, r3
    8b8c:	2200      	movs	r2, #0
    8b8e:	605a      	str	r2, [r3, #4]
    8b90:	2308      	movs	r3, #8
    8b92:	18fb      	adds	r3, r7, r3
    8b94:	2200      	movs	r2, #0
    8b96:	609a      	str	r2, [r3, #8]
        topic.cstring = (char *)c->messageHandlers[itr].topicFilter;
    8b98:	687a      	ldr	r2, [r7, #4]
    8b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b9c:	330c      	adds	r3, #12
    8b9e:	011b      	lsls	r3, r3, #4
    8ba0:	18d3      	adds	r3, r2, r3
    8ba2:	3304      	adds	r3, #4
    8ba4:	681a      	ldr	r2, [r3, #0]
    8ba6:	2308      	movs	r3, #8
    8ba8:	18fb      	adds	r3, r7, r3
    8baa:	601a      	str	r2, [r3, #0]

        InitTimer(&timer);
    8bac:	2324      	movs	r3, #36	; 0x24
    8bae:	18fb      	adds	r3, r7, r3
    8bb0:	0018      	movs	r0, r3
    8bb2:	4b49      	ldr	r3, [pc, #292]	; (8cd8 <MQTTResubscribe+0x1b8>)
    8bb4:	4798      	blx	r3
        countdown_ms(&timer, c->commandTimeoutMs);
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	689a      	ldr	r2, [r3, #8]
    8bba:	2324      	movs	r3, #36	; 0x24
    8bbc:	18fb      	adds	r3, r7, r3
    8bbe:	0011      	movs	r1, r2
    8bc0:	0018      	movs	r0, r3
    8bc2:	4b46      	ldr	r3, [pc, #280]	; (8cdc <MQTTResubscribe+0x1bc>)
    8bc4:	4798      	blx	r3

        rc = MQTTSerialize_subscribe(c->buf, c->bufSize, 0, getNextPacketId(c), 1,
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	6a1d      	ldr	r5, [r3, #32]
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	699e      	ldr	r6, [r3, #24]
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	0018      	movs	r0, r3
    8bd2:	4b43      	ldr	r3, [pc, #268]	; (8ce0 <MQTTResubscribe+0x1c0>)
    8bd4:	4798      	blx	r3
    8bd6:	0003      	movs	r3, r0
    8bd8:	0019      	movs	r1, r3
    8bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8bdc:	011b      	lsls	r3, r3, #4
    8bde:	33c8      	adds	r3, #200	; 0xc8
    8be0:	687a      	ldr	r2, [r7, #4]
    8be2:	18d3      	adds	r3, r2, r3
    8be4:	3308      	adds	r3, #8
    8be6:	2233      	movs	r2, #51	; 0x33
    8be8:	18bc      	adds	r4, r7, r2
    8bea:	2220      	movs	r2, #32
    8bec:	18ba      	adds	r2, r7, r2
    8bee:	9203      	str	r2, [sp, #12]
    8bf0:	9302      	str	r3, [sp, #8]
    8bf2:	2308      	movs	r3, #8
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	9301      	str	r3, [sp, #4]
    8bf8:	2301      	movs	r3, #1
    8bfa:	9300      	str	r3, [sp, #0]
    8bfc:	000b      	movs	r3, r1
    8bfe:	2200      	movs	r2, #0
    8c00:	0031      	movs	r1, r6
    8c02:	0028      	movs	r0, r5
    8c04:	4d37      	ldr	r5, [pc, #220]	; (8ce4 <MQTTResubscribe+0x1c4>)
    8c06:	47a8      	blx	r5
    8c08:	0003      	movs	r3, r0
    8c0a:	7023      	strb	r3, [r4, #0]
                                     &topic, &(c->messageHandlers[itr].qos), &len);
        if(SUCCESS != rc) {
    8c0c:	2333      	movs	r3, #51	; 0x33
    8c0e:	18fb      	adds	r3, r7, r3
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	b25b      	sxtb	r3, r3
    8c14:	2b00      	cmp	r3, #0
    8c16:	d004      	beq.n	8c22 <MQTTResubscribe+0x102>
            return rc;
    8c18:	2333      	movs	r3, #51	; 0x33
    8c1a:	18fb      	adds	r3, r7, r3
    8c1c:	781b      	ldrb	r3, [r3, #0]
    8c1e:	b25b      	sxtb	r3, r3
    8c20:	e054      	b.n	8ccc <MQTTResubscribe+0x1ac>
        }

        /* send the subscribe packet */
        rc = sendPacket(c, len, &timer);
    8c22:	6a39      	ldr	r1, [r7, #32]
    8c24:	2333      	movs	r3, #51	; 0x33
    8c26:	18fc      	adds	r4, r7, r3
    8c28:	2324      	movs	r3, #36	; 0x24
    8c2a:	18fa      	adds	r2, r7, r3
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	0018      	movs	r0, r3
    8c30:	4b2d      	ldr	r3, [pc, #180]	; (8ce8 <MQTTResubscribe+0x1c8>)
    8c32:	4798      	blx	r3
    8c34:	0003      	movs	r3, r0
    8c36:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8c38:	2333      	movs	r3, #51	; 0x33
    8c3a:	18fb      	adds	r3, r7, r3
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	b25b      	sxtb	r3, r3
    8c40:	2b00      	cmp	r3, #0
    8c42:	d004      	beq.n	8c4e <MQTTResubscribe+0x12e>
            return rc;
    8c44:	2333      	movs	r3, #51	; 0x33
    8c46:	18fb      	adds	r3, r7, r3
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	b25b      	sxtb	r3, r3
    8c4c:	e03e      	b.n	8ccc <MQTTResubscribe+0x1ac>
        }

        /* wait for suback */
        rc = waitfor(c, SUBACK, &timer);
    8c4e:	2333      	movs	r3, #51	; 0x33
    8c50:	18fc      	adds	r4, r7, r3
    8c52:	2324      	movs	r3, #36	; 0x24
    8c54:	18fa      	adds	r2, r7, r3
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	2109      	movs	r1, #9
    8c5a:	0018      	movs	r0, r3
    8c5c:	4b23      	ldr	r3, [pc, #140]	; (8cec <MQTTResubscribe+0x1cc>)
    8c5e:	4798      	blx	r3
    8c60:	0003      	movs	r3, r0
    8c62:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8c64:	2333      	movs	r3, #51	; 0x33
    8c66:	18fb      	adds	r3, r7, r3
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	b25b      	sxtb	r3, r3
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d004      	beq.n	8c7a <MQTTResubscribe+0x15a>
            return rc;
    8c70:	2333      	movs	r3, #51	; 0x33
    8c72:	18fb      	adds	r3, r7, r3
    8c74:	781b      	ldrb	r3, [r3, #0]
    8c76:	b25b      	sxtb	r3, r3
    8c78:	e028      	b.n	8ccc <MQTTResubscribe+0x1ac>
        }

        /* Granted QoS can be 0, 1 or 2 */
        rc = MQTTDeserialize_suback(&packetId, 1, &count, grantedQoS, c->readbuf, c->readBufSize);
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8c7e:	687b      	ldr	r3, [r7, #4]
    8c80:	69db      	ldr	r3, [r3, #28]
    8c82:	2133      	movs	r1, #51	; 0x33
    8c84:	187c      	adds	r4, r7, r1
    8c86:	2118      	movs	r1, #24
    8c88:	187d      	adds	r5, r7, r1
    8c8a:	211c      	movs	r1, #28
    8c8c:	1879      	adds	r1, r7, r1
    8c8e:	2016      	movs	r0, #22
    8c90:	1838      	adds	r0, r7, r0
    8c92:	9301      	str	r3, [sp, #4]
    8c94:	9200      	str	r2, [sp, #0]
    8c96:	002b      	movs	r3, r5
    8c98:	000a      	movs	r2, r1
    8c9a:	2101      	movs	r1, #1
    8c9c:	4d14      	ldr	r5, [pc, #80]	; (8cf0 <MQTTResubscribe+0x1d0>)
    8c9e:	47a8      	blx	r5
    8ca0:	0003      	movs	r3, r0
    8ca2:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8ca4:	2333      	movs	r3, #51	; 0x33
    8ca6:	18fb      	adds	r3, r7, r3
    8ca8:	781b      	ldrb	r3, [r3, #0]
    8caa:	b25b      	sxtb	r3, r3
    8cac:	2b00      	cmp	r3, #0
    8cae:	d004      	beq.n	8cba <MQTTResubscribe+0x19a>
            return rc;
    8cb0:	2333      	movs	r3, #51	; 0x33
    8cb2:	18fb      	adds	r3, r7, r3
    8cb4:	781b      	ldrb	r3, [r3, #0]
    8cb6:	b25b      	sxtb	r3, r3
    8cb8:	e008      	b.n	8ccc <MQTTResubscribe+0x1ac>
    for(itr = 0; itr < existingSubCount; itr++) {
    8cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8cbc:	3301      	adds	r3, #1
    8cbe:	637b      	str	r3, [r7, #52]	; 0x34
    8cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8cc4:	429a      	cmp	r2, r3
    8cc6:	d200      	bcs.n	8cca <MQTTResubscribe+0x1aa>
    8cc8:	e75a      	b.n	8b80 <MQTTResubscribe+0x60>
        }
    }

    return SUCCESS;
    8cca:	2300      	movs	r3, #0
}
    8ccc:	0018      	movs	r0, r3
    8cce:	46bd      	mov	sp, r7
    8cd0:	b00f      	add	sp, #60	; 0x3c
    8cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cd4:	00008ae5 	.word	0x00008ae5
    8cd8:	000073e9 	.word	0x000073e9
    8cdc:	00007311 	.word	0x00007311
    8ce0:	00007a15 	.word	0x00007a15
    8ce4:	0000a32d 	.word	0x0000a32d
    8ce8:	00007a49 	.word	0x00007a49
    8cec:	00008845 	.word	0x00008845
    8cf0:	0000a471 	.word	0x0000a471

00008cf4 <MQTTPublish>:
    }

    return SUCCESS;
}

MQTTReturnCode MQTTPublish(Client *c, const char *topicName, MQTTMessage *message) {
    8cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cf6:	46d6      	mov	lr, sl
    8cf8:	464f      	mov	r7, r9
    8cfa:	4646      	mov	r6, r8
    8cfc:	b5c0      	push	{r6, r7, lr}
    8cfe:	b094      	sub	sp, #80	; 0x50
    8d00:	af08      	add	r7, sp, #32
    8d02:	60f8      	str	r0, [r7, #12]
    8d04:	60b9      	str	r1, [r7, #8]
    8d06:	607a      	str	r2, [r7, #4]
    if(NULL == c || NULL == topicName || NULL == message) {
    8d08:	68fb      	ldr	r3, [r7, #12]
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d005      	beq.n	8d1a <MQTTPublish+0x26>
    8d0e:	68bb      	ldr	r3, [r7, #8]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d002      	beq.n	8d1a <MQTTPublish+0x26>
    8d14:	687b      	ldr	r3, [r7, #4]
    8d16:	2b00      	cmp	r3, #0
    8d18:	d102      	bne.n	8d20 <MQTTPublish+0x2c>
        return MQTT_NULL_VALUE_ERROR;
    8d1a:	2306      	movs	r3, #6
    8d1c:	425b      	negs	r3, r3
    8d1e:	e0d4      	b.n	8eca <MQTTPublish+0x1d6>
    }

    if(!c->isConnected) {
    8d20:	68fb      	ldr	r3, [r7, #12]
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d102      	bne.n	8d2e <MQTTPublish+0x3a>
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    8d28:	2304      	movs	r3, #4
    8d2a:	425b      	negs	r3, r3
    8d2c:	e0cd      	b.n	8eca <MQTTPublish+0x1d6>
    }

    Timer timer;
    MQTTString topic = MQTTString_initializer;
    8d2e:	2318      	movs	r3, #24
    8d30:	18fb      	adds	r3, r7, r3
    8d32:	2200      	movs	r2, #0
    8d34:	601a      	str	r2, [r3, #0]
    8d36:	2318      	movs	r3, #24
    8d38:	18fb      	adds	r3, r7, r3
    8d3a:	2200      	movs	r2, #0
    8d3c:	605a      	str	r2, [r3, #4]
    8d3e:	2318      	movs	r3, #24
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	2200      	movs	r2, #0
    8d44:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
    8d46:	2318      	movs	r3, #24
    8d48:	18fb      	adds	r3, r7, r3
    8d4a:	68ba      	ldr	r2, [r7, #8]
    8d4c:	601a      	str	r2, [r3, #0]
    uint32_t len = 0;
    8d4e:	2300      	movs	r3, #0
    8d50:	617b      	str	r3, [r7, #20]
    uint8_t waitForAck = 0;
    8d52:	232f      	movs	r3, #47	; 0x2f
    8d54:	18fb      	adds	r3, r7, r3
    8d56:	2200      	movs	r2, #0
    8d58:	701a      	strb	r2, [r3, #0]
    uint8_t packetType = PUBACK;
    8d5a:	232e      	movs	r3, #46	; 0x2e
    8d5c:	18fb      	adds	r3, r7, r3
    8d5e:	2204      	movs	r2, #4
    8d60:	701a      	strb	r2, [r3, #0]
    uint16_t packet_id;
    unsigned char dup, type;
    MQTTReturnCode rc = FAILURE;
    8d62:	232d      	movs	r3, #45	; 0x2d
    8d64:	18fb      	adds	r3, r7, r3
    8d66:	22ff      	movs	r2, #255	; 0xff
    8d68:	701a      	strb	r2, [r3, #0]

    InitTimer(&timer);
    8d6a:	2324      	movs	r3, #36	; 0x24
    8d6c:	18fb      	adds	r3, r7, r3
    8d6e:	0018      	movs	r0, r3
    8d70:	4b5a      	ldr	r3, [pc, #360]	; (8edc <MQTTPublish+0x1e8>)
    8d72:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    8d74:	68fb      	ldr	r3, [r7, #12]
    8d76:	689a      	ldr	r2, [r3, #8]
    8d78:	2324      	movs	r3, #36	; 0x24
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	0011      	movs	r1, r2
    8d7e:	0018      	movs	r0, r3
    8d80:	4b57      	ldr	r3, [pc, #348]	; (8ee0 <MQTTPublish+0x1ec>)
    8d82:	4798      	blx	r3

    if(QOS1 == message->qos || QOS2 == message->qos) {
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	781b      	ldrb	r3, [r3, #0]
    8d88:	2b01      	cmp	r3, #1
    8d8a:	d003      	beq.n	8d94 <MQTTPublish+0xa0>
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	2b02      	cmp	r3, #2
    8d92:	d113      	bne.n	8dbc <MQTTPublish+0xc8>
        message->id = getNextPacketId(c);
    8d94:	68fb      	ldr	r3, [r7, #12]
    8d96:	0018      	movs	r0, r3
    8d98:	4b52      	ldr	r3, [pc, #328]	; (8ee4 <MQTTPublish+0x1f0>)
    8d9a:	4798      	blx	r3
    8d9c:	0003      	movs	r3, r0
    8d9e:	001a      	movs	r2, r3
    8da0:	687b      	ldr	r3, [r7, #4]
    8da2:	809a      	strh	r2, [r3, #4]
        waitForAck = 1;
    8da4:	232f      	movs	r3, #47	; 0x2f
    8da6:	18fb      	adds	r3, r7, r3
    8da8:	2201      	movs	r2, #1
    8daa:	701a      	strb	r2, [r3, #0]
        if(QOS2 == message->qos) {
    8dac:	687b      	ldr	r3, [r7, #4]
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	2b02      	cmp	r3, #2
    8db2:	d103      	bne.n	8dbc <MQTTPublish+0xc8>
            packetType = PUBCOMP;
    8db4:	232e      	movs	r3, #46	; 0x2e
    8db6:	18fb      	adds	r3, r7, r3
    8db8:	2207      	movs	r2, #7
    8dba:	701a      	strb	r2, [r3, #0]
        }
    }

    rc = MQTTSerialize_publish(c->buf, c->bufSize, 0, message->qos, message->retained, message->id,
    8dbc:	68fb      	ldr	r3, [r7, #12]
    8dbe:	6a1e      	ldr	r6, [r3, #32]
    8dc0:	68fb      	ldr	r3, [r7, #12]
    8dc2:	699b      	ldr	r3, [r3, #24]
    8dc4:	469c      	mov	ip, r3
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	4698      	mov	r8, r3
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	785b      	ldrb	r3, [r3, #1]
    8dd0:	4699      	mov	r9, r3
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	889b      	ldrh	r3, [r3, #4]
    8dd6:	469a      	mov	sl, r3
              topic, (unsigned char*)message->payload, message->payloadlen, &len);
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	689a      	ldr	r2, [r3, #8]
    rc = MQTTSerialize_publish(c->buf, c->bufSize, 0, message->qos, message->retained, message->id,
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	68db      	ldr	r3, [r3, #12]
    8de0:	242d      	movs	r4, #45	; 0x2d
    8de2:	193c      	adds	r4, r7, r4
    8de4:	2514      	movs	r5, #20
    8de6:	197d      	adds	r5, r7, r5
    8de8:	9507      	str	r5, [sp, #28]
    8dea:	9306      	str	r3, [sp, #24]
    8dec:	9205      	str	r2, [sp, #20]
    8dee:	2318      	movs	r3, #24
    8df0:	18fa      	adds	r2, r7, r3
    8df2:	2308      	movs	r3, #8
    8df4:	446b      	add	r3, sp
    8df6:	ca23      	ldmia	r2!, {r0, r1, r5}
    8df8:	c323      	stmia	r3!, {r0, r1, r5}
    8dfa:	4653      	mov	r3, sl
    8dfc:	9301      	str	r3, [sp, #4]
    8dfe:	464b      	mov	r3, r9
    8e00:	9300      	str	r3, [sp, #0]
    8e02:	4643      	mov	r3, r8
    8e04:	2200      	movs	r2, #0
    8e06:	4661      	mov	r1, ip
    8e08:	0030      	movs	r0, r6
    8e0a:	4d37      	ldr	r5, [pc, #220]	; (8ee8 <MQTTPublish+0x1f4>)
    8e0c:	47a8      	blx	r5
    8e0e:	0003      	movs	r3, r0
    8e10:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8e12:	232d      	movs	r3, #45	; 0x2d
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	b25b      	sxtb	r3, r3
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d004      	beq.n	8e28 <MQTTPublish+0x134>
        return rc;
    8e1e:	232d      	movs	r3, #45	; 0x2d
    8e20:	18fb      	adds	r3, r7, r3
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	b25b      	sxtb	r3, r3
    8e26:	e050      	b.n	8eca <MQTTPublish+0x1d6>
    }

    /* send the publish packet */
    rc = sendPacket(c, len, &timer);
    8e28:	6979      	ldr	r1, [r7, #20]
    8e2a:	232d      	movs	r3, #45	; 0x2d
    8e2c:	18fc      	adds	r4, r7, r3
    8e2e:	2324      	movs	r3, #36	; 0x24
    8e30:	18fa      	adds	r2, r7, r3
    8e32:	68fb      	ldr	r3, [r7, #12]
    8e34:	0018      	movs	r0, r3
    8e36:	4b2d      	ldr	r3, [pc, #180]	; (8eec <MQTTPublish+0x1f8>)
    8e38:	4798      	blx	r3
    8e3a:	0003      	movs	r3, r0
    8e3c:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8e3e:	232d      	movs	r3, #45	; 0x2d
    8e40:	18fb      	adds	r3, r7, r3
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	b25b      	sxtb	r3, r3
    8e46:	2b00      	cmp	r3, #0
    8e48:	d004      	beq.n	8e54 <MQTTPublish+0x160>
        return rc;
    8e4a:	232d      	movs	r3, #45	; 0x2d
    8e4c:	18fb      	adds	r3, r7, r3
    8e4e:	781b      	ldrb	r3, [r3, #0]
    8e50:	b25b      	sxtb	r3, r3
    8e52:	e03a      	b.n	8eca <MQTTPublish+0x1d6>
    }

    /* Wait for ack if QoS1 or QoS2 */
    if(1 == waitForAck) {
    8e54:	232f      	movs	r3, #47	; 0x2f
    8e56:	18fb      	adds	r3, r7, r3
    8e58:	781b      	ldrb	r3, [r3, #0]
    8e5a:	2b01      	cmp	r3, #1
    8e5c:	d134      	bne.n	8ec8 <MQTTPublish+0x1d4>
        rc = waitfor(c, packetType, &timer);
    8e5e:	232d      	movs	r3, #45	; 0x2d
    8e60:	18fc      	adds	r4, r7, r3
    8e62:	2324      	movs	r3, #36	; 0x24
    8e64:	18fa      	adds	r2, r7, r3
    8e66:	232e      	movs	r3, #46	; 0x2e
    8e68:	18fb      	adds	r3, r7, r3
    8e6a:	7819      	ldrb	r1, [r3, #0]
    8e6c:	68fb      	ldr	r3, [r7, #12]
    8e6e:	0018      	movs	r0, r3
    8e70:	4b1f      	ldr	r3, [pc, #124]	; (8ef0 <MQTTPublish+0x1fc>)
    8e72:	4798      	blx	r3
    8e74:	0003      	movs	r3, r0
    8e76:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8e78:	232d      	movs	r3, #45	; 0x2d
    8e7a:	18fb      	adds	r3, r7, r3
    8e7c:	781b      	ldrb	r3, [r3, #0]
    8e7e:	b25b      	sxtb	r3, r3
    8e80:	2b00      	cmp	r3, #0
    8e82:	d004      	beq.n	8e8e <MQTTPublish+0x19a>
            return rc;
    8e84:	232d      	movs	r3, #45	; 0x2d
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	781b      	ldrb	r3, [r3, #0]
    8e8a:	b25b      	sxtb	r3, r3
    8e8c:	e01d      	b.n	8eca <MQTTPublish+0x1d6>
        }

        rc = MQTTDeserialize_ack(&type, &dup, &packet_id, c->readbuf, c->readBufSize);
    8e8e:	68fb      	ldr	r3, [r7, #12]
    8e90:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8e92:	68fb      	ldr	r3, [r7, #12]
    8e94:	69db      	ldr	r3, [r3, #28]
    8e96:	222d      	movs	r2, #45	; 0x2d
    8e98:	18bc      	adds	r4, r7, r2
    8e9a:	2212      	movs	r2, #18
    8e9c:	18ba      	adds	r2, r7, r2
    8e9e:	2111      	movs	r1, #17
    8ea0:	1879      	adds	r1, r7, r1
    8ea2:	2010      	movs	r0, #16
    8ea4:	1838      	adds	r0, r7, r0
    8ea6:	9300      	str	r3, [sp, #0]
    8ea8:	002b      	movs	r3, r5
    8eaa:	4d12      	ldr	r5, [pc, #72]	; (8ef4 <MQTTPublish+0x200>)
    8eac:	47a8      	blx	r5
    8eae:	0003      	movs	r3, r0
    8eb0:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8eb2:	232d      	movs	r3, #45	; 0x2d
    8eb4:	18fb      	adds	r3, r7, r3
    8eb6:	781b      	ldrb	r3, [r3, #0]
    8eb8:	b25b      	sxtb	r3, r3
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d004      	beq.n	8ec8 <MQTTPublish+0x1d4>
            return rc;
    8ebe:	232d      	movs	r3, #45	; 0x2d
    8ec0:	18fb      	adds	r3, r7, r3
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	b25b      	sxtb	r3, r3
    8ec6:	e000      	b.n	8eca <MQTTPublish+0x1d6>
        }
    }

    return SUCCESS;
    8ec8:	2300      	movs	r3, #0
}
    8eca:	0018      	movs	r0, r3
    8ecc:	46bd      	mov	sp, r7
    8ece:	b00c      	add	sp, #48	; 0x30
    8ed0:	bc1c      	pop	{r2, r3, r4}
    8ed2:	4690      	mov	r8, r2
    8ed4:	4699      	mov	r9, r3
    8ed6:	46a2      	mov	sl, r4
    8ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	000073e9 	.word	0x000073e9
    8ee0:	00007311 	.word	0x00007311
    8ee4:	00007a15 	.word	0x00007a15
    8ee8:	0000a0a1 	.word	0x0000a0a1
    8eec:	00007a49 	.word	0x00007a49
    8ef0:	00008845 	.word	0x00008845
    8ef4:	000097dd 	.word	0x000097dd

00008ef8 <MQTTForceDisconnect>:
/**
 * This is for the case when the sendPacket Fails.
 */
static void MQTTForceDisconnect(Client *c){
    8ef8:	b580      	push	{r7, lr}
    8efa:	b082      	sub	sp, #8
    8efc:	af00      	add	r7, sp, #0
    8efe:	6078      	str	r0, [r7, #4]
	c->isConnected = 0;
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	2200      	movs	r2, #0
    8f04:	701a      	strb	r2, [r3, #0]
	c->networkStack.disconnect(&(c->networkStack));
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	22a8      	movs	r2, #168	; 0xa8
    8f0a:	589b      	ldr	r3, [r3, r2]
    8f0c:	687a      	ldr	r2, [r7, #4]
    8f0e:	3298      	adds	r2, #152	; 0x98
    8f10:	0010      	movs	r0, r2
    8f12:	4798      	blx	r3
	c->networkStack.destroy(&(c->networkStack));
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	22b0      	movs	r2, #176	; 0xb0
    8f18:	589b      	ldr	r3, [r3, r2]
    8f1a:	687a      	ldr	r2, [r7, #4]
    8f1c:	3298      	adds	r2, #152	; 0x98
    8f1e:	0010      	movs	r0, r2
    8f20:	4798      	blx	r3
}
    8f22:	46c0      	nop			; (mov r8, r8)
    8f24:	46bd      	mov	sp, r7
    8f26:	b002      	add	sp, #8
    8f28:	bd80      	pop	{r7, pc}
	...

00008f2c <MQTTDisconnect>:

MQTTReturnCode MQTTDisconnect(Client *c) {
    8f2c:	b590      	push	{r4, r7, lr}
    8f2e:	b087      	sub	sp, #28
    8f30:	af00      	add	r7, sp, #0
    8f32:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2b00      	cmp	r3, #0
    8f38:	d102      	bne.n	8f40 <MQTTDisconnect+0x14>
        return MQTT_NULL_VALUE_ERROR;
    8f3a:	2306      	movs	r3, #6
    8f3c:	425b      	negs	r3, r3
    8f3e:	e06c      	b.n	901a <MQTTDisconnect+0xee>
    }

    if(0 == c->isConnected) {
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	781b      	ldrb	r3, [r3, #0]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d102      	bne.n	8f4e <MQTTDisconnect+0x22>
        /* Network is already disconnected. Do nothing */
        return MQTT_NETWORK_DISCONNECTED_ERROR;
    8f48:	2304      	movs	r3, #4
    8f4a:	425b      	negs	r3, r3
    8f4c:	e065      	b.n	901a <MQTTDisconnect+0xee>
    }

    MQTTReturnCode rc = FAILURE;
    8f4e:	2317      	movs	r3, #23
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	22ff      	movs	r2, #255	; 0xff
    8f54:	701a      	strb	r2, [r3, #0]
    /* We might wait for incomplete incoming publishes to complete */
    Timer timer;
    uint32_t serialized_len = 0;
    8f56:	2300      	movs	r3, #0
    8f58:	60bb      	str	r3, [r7, #8]
    rc = MQTTSerialize_disconnect(c->buf, c->bufSize, &serialized_len);
    8f5a:	687b      	ldr	r3, [r7, #4]
    8f5c:	6a18      	ldr	r0, [r3, #32]
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	699b      	ldr	r3, [r3, #24]
    8f62:	2217      	movs	r2, #23
    8f64:	18bc      	adds	r4, r7, r2
    8f66:	2208      	movs	r2, #8
    8f68:	18ba      	adds	r2, r7, r2
    8f6a:	0019      	movs	r1, r3
    8f6c:	4b2d      	ldr	r3, [pc, #180]	; (9024 <MQTTDisconnect+0xf8>)
    8f6e:	4798      	blx	r3
    8f70:	0003      	movs	r3, r0
    8f72:	7023      	strb	r3, [r4, #0]
    if(SUCCESS != rc) {
    8f74:	2317      	movs	r3, #23
    8f76:	18fb      	adds	r3, r7, r3
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	b25b      	sxtb	r3, r3
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d004      	beq.n	8f8a <MQTTDisconnect+0x5e>
        return rc;
    8f80:	2317      	movs	r3, #23
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	b25b      	sxtb	r3, r3
    8f88:	e047      	b.n	901a <MQTTDisconnect+0xee>
    }

    InitTimer(&timer);
    8f8a:	230c      	movs	r3, #12
    8f8c:	18fb      	adds	r3, r7, r3
    8f8e:	0018      	movs	r0, r3
    8f90:	4b25      	ldr	r3, [pc, #148]	; (9028 <MQTTDisconnect+0xfc>)
    8f92:	4798      	blx	r3
    countdown_ms(&timer, c->commandTimeoutMs);
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	689a      	ldr	r2, [r3, #8]
    8f98:	230c      	movs	r3, #12
    8f9a:	18fb      	adds	r3, r7, r3
    8f9c:	0011      	movs	r1, r2
    8f9e:	0018      	movs	r0, r3
    8fa0:	4b22      	ldr	r3, [pc, #136]	; (902c <MQTTDisconnect+0x100>)
    8fa2:	4798      	blx	r3

    /* send the disconnect packet */
    if(serialized_len > 0) {
    8fa4:	68bb      	ldr	r3, [r7, #8]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d015      	beq.n	8fd6 <MQTTDisconnect+0xaa>
        rc = sendPacket(c, serialized_len, &timer);
    8faa:	68b9      	ldr	r1, [r7, #8]
    8fac:	2317      	movs	r3, #23
    8fae:	18fc      	adds	r4, r7, r3
    8fb0:	230c      	movs	r3, #12
    8fb2:	18fa      	adds	r2, r7, r3
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	0018      	movs	r0, r3
    8fb8:	4b1d      	ldr	r3, [pc, #116]	; (9030 <MQTTDisconnect+0x104>)
    8fba:	4798      	blx	r3
    8fbc:	0003      	movs	r3, r0
    8fbe:	7023      	strb	r3, [r4, #0]
        if(SUCCESS != rc) {
    8fc0:	2317      	movs	r3, #23
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	b25b      	sxtb	r3, r3
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d004      	beq.n	8fd6 <MQTTDisconnect+0xaa>
            return rc;
    8fcc:	2317      	movs	r3, #23
    8fce:	18fb      	adds	r3, r7, r3
    8fd0:	781b      	ldrb	r3, [r3, #0]
    8fd2:	b25b      	sxtb	r3, r3
    8fd4:	e021      	b.n	901a <MQTTDisconnect+0xee>
        }
    }

    /* Clean network stack */
    c->networkStack.disconnect(&(c->networkStack));
    8fd6:	687b      	ldr	r3, [r7, #4]
    8fd8:	22a8      	movs	r2, #168	; 0xa8
    8fda:	589b      	ldr	r3, [r3, r2]
    8fdc:	687a      	ldr	r2, [r7, #4]
    8fde:	3298      	adds	r2, #152	; 0x98
    8fe0:	0010      	movs	r0, r2
    8fe2:	4798      	blx	r3
    rc = c->networkStack.destroy(&(c->networkStack));
    8fe4:	687b      	ldr	r3, [r7, #4]
    8fe6:	22b0      	movs	r2, #176	; 0xb0
    8fe8:	589b      	ldr	r3, [r3, r2]
    8fea:	687a      	ldr	r2, [r7, #4]
    8fec:	3298      	adds	r2, #152	; 0x98
    8fee:	0010      	movs	r0, r2
    8ff0:	4798      	blx	r3
    8ff2:	0002      	movs	r2, r0
    8ff4:	2317      	movs	r3, #23
    8ff6:	18fb      	adds	r3, r7, r3
    8ff8:	701a      	strb	r2, [r3, #0]
    if(0 != rc) {
    8ffa:	2317      	movs	r3, #23
    8ffc:	18fb      	adds	r3, r7, r3
    8ffe:	781b      	ldrb	r3, [r3, #0]
    9000:	b25b      	sxtb	r3, r3
    9002:	2b00      	cmp	r3, #0
    9004:	d002      	beq.n	900c <MQTTDisconnect+0xe0>
        /* TLS Destroy failed, return error */
        return FAILURE;
    9006:	2301      	movs	r3, #1
    9008:	425b      	negs	r3, r3
    900a:	e006      	b.n	901a <MQTTDisconnect+0xee>
    }

    c->isConnected = 0;
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	2200      	movs	r2, #0
    9010:	701a      	strb	r2, [r3, #0]

    /* Always set to 1 whenever disconnect is called. Keepalive resets to 0 */
    c->wasManuallyDisconnected = 1;
    9012:	687b      	ldr	r3, [r7, #4]
    9014:	2201      	movs	r2, #1
    9016:	705a      	strb	r2, [r3, #1]

    return SUCCESS;
    9018:	2300      	movs	r3, #0
}
    901a:	0018      	movs	r0, r3
    901c:	46bd      	mov	sp, r7
    901e:	b007      	add	sp, #28
    9020:	bd90      	pop	{r4, r7, pc}
    9022:	46c0      	nop			; (mov r8, r8)
    9024:	00009635 	.word	0x00009635
    9028:	000073e9 	.word	0x000073e9
    902c:	00007311 	.word	0x00007311
    9030:	00007a49 	.word	0x00007a49

00009034 <MQTTIsAutoReconnectEnabled>:
    }

    return c->isConnected;
}

uint8_t MQTTIsAutoReconnectEnabled(Client *c) {
    9034:	b580      	push	{r7, lr}
    9036:	b082      	sub	sp, #8
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
    if(NULL == c) {
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	2b00      	cmp	r3, #0
    9040:	d101      	bne.n	9046 <MQTTIsAutoReconnectEnabled+0x12>
        return 0;
    9042:	2300      	movs	r3, #0
    9044:	e001      	b.n	904a <MQTTIsAutoReconnectEnabled+0x16>
    }

    return c->isAutoReconnectEnabled;
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	78db      	ldrb	r3, [r3, #3]
}
    904a:	0018      	movs	r0, r3
    904c:	46bd      	mov	sp, r7
    904e:	b002      	add	sp, #8
    9050:	bd80      	pop	{r7, pc}

00009052 <setDisconnectHandler>:

MQTTReturnCode setDisconnectHandler(Client *c, disconnectHandler_t disconnectHandler) {
    9052:	b580      	push	{r7, lr}
    9054:	b082      	sub	sp, #8
    9056:	af00      	add	r7, sp, #0
    9058:	6078      	str	r0, [r7, #4]
    905a:	6039      	str	r1, [r7, #0]
    if(NULL == c || NULL == disconnectHandler) {
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	2b00      	cmp	r3, #0
    9060:	d002      	beq.n	9068 <setDisconnectHandler+0x16>
    9062:	683b      	ldr	r3, [r7, #0]
    9064:	2b00      	cmp	r3, #0
    9066:	d102      	bne.n	906e <setDisconnectHandler+0x1c>
        return MQTT_NULL_VALUE_ERROR;
    9068:	2306      	movs	r3, #6
    906a:	425b      	negs	r3, r3
    906c:	e005      	b.n	907a <setDisconnectHandler+0x28>
    }

    c->disconnectHandler = disconnectHandler;
    906e:	687a      	ldr	r2, [r7, #4]
    9070:	238c      	movs	r3, #140	; 0x8c
    9072:	005b      	lsls	r3, r3, #1
    9074:	6839      	ldr	r1, [r7, #0]
    9076:	50d1      	str	r1, [r2, r3]
    return SUCCESS;
    9078:	2300      	movs	r3, #0
}
    907a:	0018      	movs	r0, r3
    907c:	46bd      	mov	sp, r7
    907e:	b002      	add	sp, #8
    9080:	bd80      	pop	{r7, pc}

00009082 <setAutoReconnectEnabled>:

MQTTReturnCode setAutoReconnectEnabled(Client *c, uint8_t value) {
    9082:	b580      	push	{r7, lr}
    9084:	b082      	sub	sp, #8
    9086:	af00      	add	r7, sp, #0
    9088:	6078      	str	r0, [r7, #4]
    908a:	000a      	movs	r2, r1
    908c:	1cfb      	adds	r3, r7, #3
    908e:	701a      	strb	r2, [r3, #0]
    if(NULL == c) {
    9090:	687b      	ldr	r3, [r7, #4]
    9092:	2b00      	cmp	r3, #0
    9094:	d102      	bne.n	909c <setAutoReconnectEnabled+0x1a>
        return FAILURE;
    9096:	2301      	movs	r3, #1
    9098:	425b      	negs	r3, r3
    909a:	e004      	b.n	90a6 <setAutoReconnectEnabled+0x24>
    }
    c->isAutoReconnectEnabled = value;
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	1cfa      	adds	r2, r7, #3
    90a0:	7812      	ldrb	r2, [r2, #0]
    90a2:	70da      	strb	r2, [r3, #3]
    return SUCCESS;
    90a4:	2300      	movs	r3, #0
}
    90a6:	0018      	movs	r0, r3
    90a8:	46bd      	mov	sp, r7
    90aa:	b002      	add	sp, #8
    90ac:	bd80      	pop	{r7, pc}
	...

000090b0 <MQTTSerialize_GetConnectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @param the length of buffer needed to contain the serialized version of the packet
  * @return MQTTReturnCode indicating function execution status
  */
size_t MQTTSerialize_GetConnectLength(MQTTPacket_connectData *options) {
    90b0:	b590      	push	{r4, r7, lr}
    90b2:	b085      	sub	sp, #20
    90b4:	af00      	add	r7, sp, #0
    90b6:	6078      	str	r0, [r7, #4]
	FUNC_ENTRY;

	size_t len = 0;
    90b8:	2300      	movs	r3, #0
    90ba:	60fb      	str	r3, [r7, #12]
	/* variable depending on MQTT or MQIsdp */
	if(3 == options->MQTTVersion) {
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	795b      	ldrb	r3, [r3, #5]
    90c0:	2b03      	cmp	r3, #3
    90c2:	d102      	bne.n	90ca <MQTTSerialize_GetConnectLength+0x1a>
		len = 12;
    90c4:	230c      	movs	r3, #12
    90c6:	60fb      	str	r3, [r7, #12]
    90c8:	e005      	b.n	90d6 <MQTTSerialize_GetConnectLength+0x26>
	} else if(4 == options->MQTTVersion) {
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	795b      	ldrb	r3, [r3, #5]
    90ce:	2b04      	cmp	r3, #4
    90d0:	d101      	bne.n	90d6 <MQTTSerialize_GetConnectLength+0x26>
		len = 10;
    90d2:	230a      	movs	r3, #10
    90d4:	60fb      	str	r3, [r7, #12]
	}

	len += MQTTstrlen(options->clientID) + 2;
    90d6:	687b      	ldr	r3, [r7, #4]
    90d8:	6898      	ldr	r0, [r3, #8]
    90da:	68d9      	ldr	r1, [r3, #12]
    90dc:	691a      	ldr	r2, [r3, #16]
    90de:	4b24      	ldr	r3, [pc, #144]	; (9170 <MQTTSerialize_GetConnectLength+0xc0>)
    90e0:	4798      	blx	r3
    90e2:	0003      	movs	r3, r0
    90e4:	3302      	adds	r3, #2
    90e6:	68fa      	ldr	r2, [r7, #12]
    90e8:	18d3      	adds	r3, r2, r3
    90ea:	60fb      	str	r3, [r7, #12]

	if(options->willFlag) {
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	7ddb      	ldrb	r3, [r3, #23]
    90f0:	2b00      	cmp	r3, #0
    90f2:	d012      	beq.n	911a <MQTTSerialize_GetConnectLength+0x6a>
		len += MQTTstrlen(options->will.topicName) + 2 + MQTTstrlen(options->will.message) + 2;
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	6a18      	ldr	r0, [r3, #32]
    90f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
    90fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    90fc:	4b1c      	ldr	r3, [pc, #112]	; (9170 <MQTTSerialize_GetConnectLength+0xc0>)
    90fe:	4798      	blx	r3
    9100:	0004      	movs	r4, r0
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    9106:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    910a:	4b19      	ldr	r3, [pc, #100]	; (9170 <MQTTSerialize_GetConnectLength+0xc0>)
    910c:	4798      	blx	r3
    910e:	0003      	movs	r3, r0
    9110:	18e3      	adds	r3, r4, r3
    9112:	3304      	adds	r3, #4
    9114:	68fa      	ldr	r2, [r7, #12]
    9116:	18d3      	adds	r3, r2, r3
    9118:	60fb      	str	r3, [r7, #12]
	}

	if(options->username.cstring || options->username.lenstring.data) {
    911a:	687b      	ldr	r3, [r7, #4]
    911c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    911e:	2b00      	cmp	r3, #0
    9120:	d103      	bne.n	912a <MQTTSerialize_GetConnectLength+0x7a>
    9122:	687b      	ldr	r3, [r7, #4]
    9124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9126:	2b00      	cmp	r3, #0
    9128:	d00a      	beq.n	9140 <MQTTSerialize_GetConnectLength+0x90>
		len += MQTTstrlen(options->username) + 2;
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    912e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    9130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9132:	4b0f      	ldr	r3, [pc, #60]	; (9170 <MQTTSerialize_GetConnectLength+0xc0>)
    9134:	4798      	blx	r3
    9136:	0003      	movs	r3, r0
    9138:	3302      	adds	r3, #2
    913a:	68fa      	ldr	r2, [r7, #12]
    913c:	18d3      	adds	r3, r2, r3
    913e:	60fb      	str	r3, [r7, #12]
	}

	if(options->password.cstring || options->password.lenstring.data) {
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9144:	2b00      	cmp	r3, #0
    9146:	d103      	bne.n	9150 <MQTTSerialize_GetConnectLength+0xa0>
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    914c:	2b00      	cmp	r3, #0
    914e:	d00a      	beq.n	9166 <MQTTSerialize_GetConnectLength+0xb6>
		len += MQTTstrlen(options->password) + 2;
    9150:	687b      	ldr	r3, [r7, #4]
    9152:	6c98      	ldr	r0, [r3, #72]	; 0x48
    9154:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    9156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    9158:	4b05      	ldr	r3, [pc, #20]	; (9170 <MQTTSerialize_GetConnectLength+0xc0>)
    915a:	4798      	blx	r3
    915c:	0003      	movs	r3, r0
    915e:	3302      	adds	r3, #2
    9160:	68fa      	ldr	r2, [r7, #12]
    9162:	18d3      	adds	r3, r2, r3
    9164:	60fb      	str	r3, [r7, #12]
	}

	FUNC_EXIT_RC(len);
	return len;
    9166:	68fb      	ldr	r3, [r7, #12]
}
    9168:	0018      	movs	r0, r3
    916a:	46bd      	mov	sp, r7
    916c:	b005      	add	sp, #20
    916e:	bd90      	pop	{r4, r7, pc}
    9170:	00009d95 	.word	0x00009d95

00009174 <MQTTSerialize_connect>:
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_connect(unsigned char *buf, size_t buflen,
									 MQTTPacket_connectData *options,
									 uint32_t *serialized_len) {
    9174:	b5b0      	push	{r4, r5, r7, lr}
    9176:	b08c      	sub	sp, #48	; 0x30
    9178:	af02      	add	r7, sp, #8
    917a:	60f8      	str	r0, [r7, #12]
    917c:	60b9      	str	r1, [r7, #8]
    917e:	607a      	str	r2, [r7, #4]
    9180:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == options || NULL == serialized_len) {
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	2b00      	cmp	r3, #0
    9186:	d005      	beq.n	9194 <MQTTSerialize_connect+0x20>
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	2b00      	cmp	r3, #0
    918c:	d002      	beq.n	9194 <MQTTSerialize_connect+0x20>
    918e:	683b      	ldr	r3, [r7, #0]
    9190:	2b00      	cmp	r3, #0
    9192:	d102      	bne.n	919a <MQTTSerialize_connect+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    9194:	2306      	movs	r3, #6
    9196:	425b      	negs	r3, r3
    9198:	e128      	b.n	93ec <MQTTSerialize_connect+0x278>
	}

	unsigned char *ptr = buf;
    919a:	68fb      	ldr	r3, [r7, #12]
    919c:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
    919e:	2300      	movs	r3, #0
    91a0:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
    91a2:	2300      	movs	r3, #0
    91a4:	617b      	str	r3, [r7, #20]
	size_t len = 0;
    91a6:	2300      	movs	r3, #0
    91a8:	627b      	str	r3, [r7, #36]	; 0x24

	len = MQTTSerialize_GetConnectLength(options);
    91aa:	687b      	ldr	r3, [r7, #4]
    91ac:	0018      	movs	r0, r3
    91ae:	4b91      	ldr	r3, [pc, #580]	; (93f4 <MQTTSerialize_connect+0x280>)
    91b0:	4798      	blx	r3
    91b2:	0003      	movs	r3, r0
    91b4:	627b      	str	r3, [r7, #36]	; 0x24
	if(MQTTPacket_len(len) > buflen) {
    91b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91b8:	0018      	movs	r0, r3
    91ba:	4b8f      	ldr	r3, [pc, #572]	; (93f8 <MQTTSerialize_connect+0x284>)
    91bc:	4798      	blx	r3
    91be:	0002      	movs	r2, r0
    91c0:	68bb      	ldr	r3, [r7, #8]
    91c2:	429a      	cmp	r2, r3
    91c4:	d902      	bls.n	91cc <MQTTSerialize_connect+0x58>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    91c6:	2309      	movs	r3, #9
    91c8:	425b      	negs	r3, r3
    91ca:	e10f      	b.n	93ec <MQTTSerialize_connect+0x278>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, CONNECT, QOS0, 0, 0);
    91cc:	2323      	movs	r3, #35	; 0x23
    91ce:	18fc      	adds	r4, r7, r3
    91d0:	2318      	movs	r3, #24
    91d2:	18f8      	adds	r0, r7, r3
    91d4:	2300      	movs	r3, #0
    91d6:	9300      	str	r3, [sp, #0]
    91d8:	2300      	movs	r3, #0
    91da:	2200      	movs	r2, #0
    91dc:	2101      	movs	r1, #1
    91de:	4d87      	ldr	r5, [pc, #540]	; (93fc <MQTTSerialize_connect+0x288>)
    91e0:	47a8      	blx	r5
    91e2:	0003      	movs	r3, r0
    91e4:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    91e6:	2323      	movs	r3, #35	; 0x23
    91e8:	18fb      	adds	r3, r7, r3
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	b25b      	sxtb	r3, r3
    91ee:	2b00      	cmp	r3, #0
    91f0:	d004      	beq.n	91fc <MQTTSerialize_connect+0x88>
		FUNC_EXIT_RC(rc);
		return rc;
    91f2:	2323      	movs	r3, #35	; 0x23
    91f4:	18fb      	adds	r3, r7, r3
    91f6:	781b      	ldrb	r3, [r3, #0]
    91f8:	b25b      	sxtb	r3, r3
    91fa:	e0f7      	b.n	93ec <MQTTSerialize_connect+0x278>
	}

	writeChar(&ptr, header.byte); /* write header */
    91fc:	2318      	movs	r3, #24
    91fe:	18fb      	adds	r3, r7, r3
    9200:	781a      	ldrb	r2, [r3, #0]
    9202:	231c      	movs	r3, #28
    9204:	18fb      	adds	r3, r7, r3
    9206:	0011      	movs	r1, r2
    9208:	0018      	movs	r0, r3
    920a:	4b7d      	ldr	r3, [pc, #500]	; (9400 <MQTTSerialize_connect+0x28c>)
    920c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    920e:	69fb      	ldr	r3, [r7, #28]
    9210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9212:	0011      	movs	r1, r2
    9214:	0018      	movs	r0, r3
    9216:	4b7b      	ldr	r3, [pc, #492]	; (9404 <MQTTSerialize_connect+0x290>)
    9218:	4798      	blx	r3
    921a:	0002      	movs	r2, r0
    921c:	69fb      	ldr	r3, [r7, #28]
    921e:	189b      	adds	r3, r3, r2
    9220:	61fb      	str	r3, [r7, #28]

	if(4 == options->MQTTVersion) {
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	795b      	ldrb	r3, [r3, #5]
    9226:	2b04      	cmp	r3, #4
    9228:	d10d      	bne.n	9246 <MQTTSerialize_connect+0xd2>
		writeCString(&ptr, "MQTT");
    922a:	4a77      	ldr	r2, [pc, #476]	; (9408 <MQTTSerialize_connect+0x294>)
    922c:	231c      	movs	r3, #28
    922e:	18fb      	adds	r3, r7, r3
    9230:	0011      	movs	r1, r2
    9232:	0018      	movs	r0, r3
    9234:	4b75      	ldr	r3, [pc, #468]	; (940c <MQTTSerialize_connect+0x298>)
    9236:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    9238:	231c      	movs	r3, #28
    923a:	18fb      	adds	r3, r7, r3
    923c:	2104      	movs	r1, #4
    923e:	0018      	movs	r0, r3
    9240:	4b6f      	ldr	r3, [pc, #444]	; (9400 <MQTTSerialize_connect+0x28c>)
    9242:	4798      	blx	r3
    9244:	e00c      	b.n	9260 <MQTTSerialize_connect+0xec>
	} else {
		writeCString(&ptr, "MQIsdp");
    9246:	4a72      	ldr	r2, [pc, #456]	; (9410 <MQTTSerialize_connect+0x29c>)
    9248:	231c      	movs	r3, #28
    924a:	18fb      	adds	r3, r7, r3
    924c:	0011      	movs	r1, r2
    924e:	0018      	movs	r0, r3
    9250:	4b6e      	ldr	r3, [pc, #440]	; (940c <MQTTSerialize_connect+0x298>)
    9252:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    9254:	231c      	movs	r3, #28
    9256:	18fb      	adds	r3, r7, r3
    9258:	2103      	movs	r1, #3
    925a:	0018      	movs	r0, r3
    925c:	4b68      	ldr	r3, [pc, #416]	; (9400 <MQTTSerialize_connect+0x28c>)
    925e:	4798      	blx	r3
	}

	flags.all = 0;
    9260:	2314      	movs	r3, #20
    9262:	18fb      	adds	r3, r7, r3
    9264:	2200      	movs	r2, #0
    9266:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = (options->cleansession) ? 1 : 0;
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	7d9b      	ldrb	r3, [r3, #22]
    926c:	1e5a      	subs	r2, r3, #1
    926e:	4193      	sbcs	r3, r2
    9270:	b2da      	uxtb	r2, r3
    9272:	2314      	movs	r3, #20
    9274:	18fb      	adds	r3, r7, r3
    9276:	2101      	movs	r1, #1
    9278:	400a      	ands	r2, r1
    927a:	1890      	adds	r0, r2, r2
    927c:	781a      	ldrb	r2, [r3, #0]
    927e:	2102      	movs	r1, #2
    9280:	438a      	bics	r2, r1
    9282:	1c11      	adds	r1, r2, #0
    9284:	1c02      	adds	r2, r0, #0
    9286:	430a      	orrs	r2, r1
    9288:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	7ddb      	ldrb	r3, [r3, #23]
    928e:	1e5a      	subs	r2, r3, #1
    9290:	4193      	sbcs	r3, r2
    9292:	b2da      	uxtb	r2, r3
    9294:	2314      	movs	r3, #20
    9296:	18fb      	adds	r3, r7, r3
    9298:	2101      	movs	r1, #1
    929a:	400a      	ands	r2, r1
    929c:	0090      	lsls	r0, r2, #2
    929e:	781a      	ldrb	r2, [r3, #0]
    92a0:	2104      	movs	r1, #4
    92a2:	438a      	bics	r2, r1
    92a4:	1c11      	adds	r1, r2, #0
    92a6:	1c02      	adds	r2, r0, #0
    92a8:	430a      	orrs	r2, r1
    92aa:	701a      	strb	r2, [r3, #0]
	if(flags.bits.will) {
    92ac:	2314      	movs	r3, #20
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2204      	movs	r2, #4
    92b4:	4013      	ands	r3, r2
    92b6:	b2db      	uxtb	r3, r3
    92b8:	2b00      	cmp	r3, #0
    92ba:	d024      	beq.n	9306 <MQTTSerialize_connect+0x192>
		flags.bits.willQoS = options->will.qos;
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	2239      	movs	r2, #57	; 0x39
    92c0:	5c9b      	ldrb	r3, [r3, r2]
    92c2:	1c1a      	adds	r2, r3, #0
    92c4:	2303      	movs	r3, #3
    92c6:	4013      	ands	r3, r2
    92c8:	b2da      	uxtb	r2, r3
    92ca:	2314      	movs	r3, #20
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	2103      	movs	r1, #3
    92d0:	400a      	ands	r2, r1
    92d2:	00d0      	lsls	r0, r2, #3
    92d4:	781a      	ldrb	r2, [r3, #0]
    92d6:	2118      	movs	r1, #24
    92d8:	438a      	bics	r2, r1
    92da:	1c11      	adds	r1, r2, #0
    92dc:	1c02      	adds	r2, r0, #0
    92de:	430a      	orrs	r2, r1
    92e0:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = (options->will.retained) ? 1 : 0;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	2238      	movs	r2, #56	; 0x38
    92e6:	5c9b      	ldrb	r3, [r3, r2]
    92e8:	1e5a      	subs	r2, r3, #1
    92ea:	4193      	sbcs	r3, r2
    92ec:	b2da      	uxtb	r2, r3
    92ee:	2314      	movs	r3, #20
    92f0:	18fb      	adds	r3, r7, r3
    92f2:	2101      	movs	r1, #1
    92f4:	400a      	ands	r2, r1
    92f6:	0150      	lsls	r0, r2, #5
    92f8:	781a      	ldrb	r2, [r3, #0]
    92fa:	2120      	movs	r1, #32
    92fc:	438a      	bics	r2, r1
    92fe:	1c11      	adds	r1, r2, #0
    9300:	1c02      	adds	r2, r0, #0
    9302:	430a      	orrs	r2, r1
    9304:	701a      	strb	r2, [r3, #0]
	}

	if(options->username.cstring || options->username.lenstring.data) {
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    930a:	2b00      	cmp	r3, #0
    930c:	d103      	bne.n	9316 <MQTTSerialize_connect+0x1a2>
    930e:	687b      	ldr	r3, [r7, #4]
    9310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9312:	2b00      	cmp	r3, #0
    9314:	d006      	beq.n	9324 <MQTTSerialize_connect+0x1b0>
		flags.bits.username = 1;
    9316:	2314      	movs	r3, #20
    9318:	18fb      	adds	r3, r7, r3
    931a:	781a      	ldrb	r2, [r3, #0]
    931c:	2180      	movs	r1, #128	; 0x80
    931e:	4249      	negs	r1, r1
    9320:	430a      	orrs	r2, r1
    9322:	701a      	strb	r2, [r3, #0]
	}

	if(options->password.cstring || options->password.lenstring.data) {
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9328:	2b00      	cmp	r3, #0
    932a:	d103      	bne.n	9334 <MQTTSerialize_connect+0x1c0>
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    9330:	2b00      	cmp	r3, #0
    9332:	d005      	beq.n	9340 <MQTTSerialize_connect+0x1cc>
		flags.bits.password = 1;
    9334:	2314      	movs	r3, #20
    9336:	18fb      	adds	r3, r7, r3
    9338:	781a      	ldrb	r2, [r3, #0]
    933a:	2140      	movs	r1, #64	; 0x40
    933c:	430a      	orrs	r2, r1
    933e:	701a      	strb	r2, [r3, #0]
	}

	writeChar(&ptr, flags.all);
    9340:	2314      	movs	r3, #20
    9342:	18fb      	adds	r3, r7, r3
    9344:	781a      	ldrb	r2, [r3, #0]
    9346:	231c      	movs	r3, #28
    9348:	18fb      	adds	r3, r7, r3
    934a:	0011      	movs	r1, r2
    934c:	0018      	movs	r0, r3
    934e:	4b2c      	ldr	r3, [pc, #176]	; (9400 <MQTTSerialize_connect+0x28c>)
    9350:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	8a9b      	ldrh	r3, [r3, #20]
    9356:	001a      	movs	r2, r3
    9358:	231c      	movs	r3, #28
    935a:	18fb      	adds	r3, r7, r3
    935c:	0011      	movs	r1, r2
    935e:	0018      	movs	r0, r3
    9360:	4b2c      	ldr	r3, [pc, #176]	; (9414 <MQTTSerialize_connect+0x2a0>)
    9362:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	221c      	movs	r2, #28
    9368:	18b8      	adds	r0, r7, r2
    936a:	6899      	ldr	r1, [r3, #8]
    936c:	68da      	ldr	r2, [r3, #12]
    936e:	691b      	ldr	r3, [r3, #16]
    9370:	4c29      	ldr	r4, [pc, #164]	; (9418 <MQTTSerialize_connect+0x2a4>)
    9372:	47a0      	blx	r4
	if(options->willFlag) {
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	7ddb      	ldrb	r3, [r3, #23]
    9378:	2b00      	cmp	r3, #0
    937a:	d00f      	beq.n	939c <MQTTSerialize_connect+0x228>
		writeMQTTString(&ptr, options->will.topicName);
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	221c      	movs	r2, #28
    9380:	18b8      	adds	r0, r7, r2
    9382:	6a19      	ldr	r1, [r3, #32]
    9384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9388:	4c23      	ldr	r4, [pc, #140]	; (9418 <MQTTSerialize_connect+0x2a4>)
    938a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	221c      	movs	r2, #28
    9390:	18b8      	adds	r0, r7, r2
    9392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    9394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9398:	4c1f      	ldr	r4, [pc, #124]	; (9418 <MQTTSerialize_connect+0x2a4>)
    939a:	47a0      	blx	r4
	}

	if(flags.bits.username) {
    939c:	2314      	movs	r3, #20
    939e:	18fb      	adds	r3, r7, r3
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	227f      	movs	r2, #127	; 0x7f
    93a4:	4393      	bics	r3, r2
    93a6:	b2db      	uxtb	r3, r3
    93a8:	2b00      	cmp	r3, #0
    93aa:	d007      	beq.n	93bc <MQTTSerialize_connect+0x248>
		writeMQTTString(&ptr, options->username);
    93ac:	687b      	ldr	r3, [r7, #4]
    93ae:	221c      	movs	r2, #28
    93b0:	18b8      	adds	r0, r7, r2
    93b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    93b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    93b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    93b8:	4c17      	ldr	r4, [pc, #92]	; (9418 <MQTTSerialize_connect+0x2a4>)
    93ba:	47a0      	blx	r4
	}

	if(flags.bits.password) {
    93bc:	2314      	movs	r3, #20
    93be:	18fb      	adds	r3, r7, r3
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	2240      	movs	r2, #64	; 0x40
    93c4:	4013      	ands	r3, r2
    93c6:	b2db      	uxtb	r3, r3
    93c8:	2b00      	cmp	r3, #0
    93ca:	d007      	beq.n	93dc <MQTTSerialize_connect+0x268>
		writeMQTTString(&ptr, options->password);
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	221c      	movs	r2, #28
    93d0:	18b8      	adds	r0, r7, r2
    93d2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    93d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    93d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    93d8:	4c0f      	ldr	r4, [pc, #60]	; (9418 <MQTTSerialize_connect+0x2a4>)
    93da:	47a0      	blx	r4
	}

	*serialized_len = (uint32_t)(ptr - buf);
    93dc:	69fb      	ldr	r3, [r7, #28]
    93de:	001a      	movs	r2, r3
    93e0:	68fb      	ldr	r3, [r7, #12]
    93e2:	1ad3      	subs	r3, r2, r3
    93e4:	001a      	movs	r2, r3
    93e6:	683b      	ldr	r3, [r7, #0]
    93e8:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    93ea:	2300      	movs	r3, #0
}
    93ec:	0018      	movs	r0, r3
    93ee:	46bd      	mov	sp, r7
    93f0:	b00a      	add	sp, #40	; 0x28
    93f2:	bdb0      	pop	{r4, r5, r7, pc}
    93f4:	000090b1 	.word	0x000090b1
    93f8:	000099c5 	.word	0x000099c5
    93fc:	00009e4d 	.word	0x00009e4d
    9400:	00009b45 	.word	0x00009b45
    9404:	000098e1 	.word	0x000098e1
    9408:	0001e3f8 	.word	0x0001e3f8
    940c:	00009c49 	.word	0x00009c49
    9410:	0001e400 	.word	0x0001e400
    9414:	00009bb5 	.word	0x00009bb5
    9418:	00009c99 	.word	0x00009c99

0000941c <MQTTDeserialize_connack>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTDeserialize_connack(unsigned char *sessionPresent,
									   MQTTReturnCode *connack_rc,
									   unsigned char *buf, size_t buflen) {
    941c:	b590      	push	{r4, r7, lr}
    941e:	b08d      	sub	sp, #52	; 0x34
    9420:	af00      	add	r7, sp, #0
    9422:	60f8      	str	r0, [r7, #12]
    9424:	60b9      	str	r1, [r7, #8]
    9426:	607a      	str	r2, [r7, #4]
    9428:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == sessionPresent || NULL == connack_rc || NULL == buf) {
    942a:	68fb      	ldr	r3, [r7, #12]
    942c:	2b00      	cmp	r3, #0
    942e:	d005      	beq.n	943c <MQTTDeserialize_connack+0x20>
    9430:	68bb      	ldr	r3, [r7, #8]
    9432:	2b00      	cmp	r3, #0
    9434:	d002      	beq.n	943c <MQTTDeserialize_connack+0x20>
    9436:	687b      	ldr	r3, [r7, #4]
    9438:	2b00      	cmp	r3, #0
    943a:	d102      	bne.n	9442 <MQTTDeserialize_connack+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    943c:	2306      	movs	r3, #6
    943e:	425b      	negs	r3, r3
    9440:	e094      	b.n	956c <MQTTDeserialize_connack+0x150>
	}

	/* CONNACK header size is fixed at two bytes for fixed and 2 bytes for variable,
	 * using that as minimum size
	 * MQTT v3.1.1 Specification 3.2.1 */
	if(4 > buflen) {
    9442:	683b      	ldr	r3, [r7, #0]
    9444:	2b03      	cmp	r3, #3
    9446:	d802      	bhi.n	944e <MQTTDeserialize_connack+0x32>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    9448:	2309      	movs	r3, #9
    944a:	425b      	negs	r3, r3
    944c:	e08e      	b.n	956c <MQTTDeserialize_connack+0x150>
	}

	MQTTHeader header = {0};
    944e:	2300      	movs	r3, #0
    9450:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned char *curdata = buf;
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	623b      	str	r3, [r7, #32]
	unsigned char *enddata = NULL;
    9456:	2300      	movs	r3, #0
    9458:	62fb      	str	r3, [r7, #44]	; 0x2c
	MQTTReturnCode rc = FAILURE;
    945a:	232b      	movs	r3, #43	; 0x2b
    945c:	18fb      	adds	r3, r7, r3
    945e:	22ff      	movs	r2, #255	; 0xff
    9460:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    9462:	2300      	movs	r3, #0
    9464:	61fb      	str	r3, [r7, #28]
	uint32_t readBytesLen = 0;
    9466:	2300      	movs	r3, #0
    9468:	61bb      	str	r3, [r7, #24]
	MQTTConnackFlags flags = {0};
    946a:	2300      	movs	r3, #0
    946c:	617b      	str	r3, [r7, #20]

	header.byte = readChar(&curdata);
    946e:	2320      	movs	r3, #32
    9470:	18fb      	adds	r3, r7, r3
    9472:	0018      	movs	r0, r3
    9474:	4b3f      	ldr	r3, [pc, #252]	; (9574 <MQTTDeserialize_connack+0x158>)
    9476:	4798      	blx	r3
    9478:	0003      	movs	r3, r0
    947a:	001a      	movs	r2, r3
    947c:	2324      	movs	r3, #36	; 0x24
    947e:	18fb      	adds	r3, r7, r3
    9480:	701a      	strb	r2, [r3, #0]
	if(CONNACK != header.bits.type) {
    9482:	2324      	movs	r3, #36	; 0x24
    9484:	18fb      	adds	r3, r7, r3
    9486:	781b      	ldrb	r3, [r3, #0]
    9488:	220f      	movs	r2, #15
    948a:	4393      	bics	r3, r2
    948c:	b2db      	uxtb	r3, r3
    948e:	2b20      	cmp	r3, #32
    9490:	d002      	beq.n	9498 <MQTTDeserialize_connack+0x7c>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    9492:	2301      	movs	r3, #1
    9494:	425b      	negs	r3, r3
    9496:	e069      	b.n	956c <MQTTDeserialize_connack+0x150>
	}

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    9498:	6a3b      	ldr	r3, [r7, #32]
    949a:	222b      	movs	r2, #43	; 0x2b
    949c:	18bc      	adds	r4, r7, r2
    949e:	2218      	movs	r2, #24
    94a0:	18ba      	adds	r2, r7, r2
    94a2:	211c      	movs	r1, #28
    94a4:	1879      	adds	r1, r7, r1
    94a6:	0018      	movs	r0, r3
    94a8:	4b33      	ldr	r3, [pc, #204]	; (9578 <MQTTDeserialize_connack+0x15c>)
    94aa:	4798      	blx	r3
    94ac:	0003      	movs	r3, r0
    94ae:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    94b0:	232b      	movs	r3, #43	; 0x2b
    94b2:	18fb      	adds	r3, r7, r3
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	b25b      	sxtb	r3, r3
    94b8:	2b00      	cmp	r3, #0
    94ba:	d004      	beq.n	94c6 <MQTTDeserialize_connack+0xaa>
		FUNC_EXIT_RC(rc);
		return rc;
    94bc:	232b      	movs	r3, #43	; 0x2b
    94be:	18fb      	adds	r3, r7, r3
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	b25b      	sxtb	r3, r3
    94c4:	e052      	b.n	956c <MQTTDeserialize_connack+0x150>
	}

	curdata += (readBytesLen);
    94c6:	6a3a      	ldr	r2, [r7, #32]
    94c8:	69bb      	ldr	r3, [r7, #24]
    94ca:	18d3      	adds	r3, r2, r3
    94cc:	623b      	str	r3, [r7, #32]
	enddata = curdata + decodedLen;
    94ce:	6a3a      	ldr	r2, [r7, #32]
    94d0:	69fb      	ldr	r3, [r7, #28]
    94d2:	18d3      	adds	r3, r2, r3
    94d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(enddata - curdata < 2) {
    94d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94d8:	6a3a      	ldr	r2, [r7, #32]
    94da:	1a9b      	subs	r3, r3, r2
    94dc:	2b01      	cmp	r3, #1
    94de:	dc02      	bgt.n	94e6 <MQTTDeserialize_connack+0xca>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    94e0:	2301      	movs	r3, #1
    94e2:	425b      	negs	r3, r3
    94e4:	e042      	b.n	956c <MQTTDeserialize_connack+0x150>
	}

	flags.all = readChar(&curdata);
    94e6:	2320      	movs	r3, #32
    94e8:	18fb      	adds	r3, r7, r3
    94ea:	0018      	movs	r0, r3
    94ec:	4b21      	ldr	r3, [pc, #132]	; (9574 <MQTTDeserialize_connack+0x158>)
    94ee:	4798      	blx	r3
    94f0:	0003      	movs	r3, r0
    94f2:	001a      	movs	r2, r3
    94f4:	2314      	movs	r3, #20
    94f6:	18fb      	adds	r3, r7, r3
    94f8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
    94fa:	2314      	movs	r3, #20
    94fc:	18fb      	adds	r3, r7, r3
    94fe:	781b      	ldrb	r3, [r3, #0]
    9500:	061b      	lsls	r3, r3, #24
    9502:	0fdb      	lsrs	r3, r3, #31
    9504:	b2db      	uxtb	r3, r3
    9506:	001a      	movs	r2, r3
    9508:	68fb      	ldr	r3, [r7, #12]
    950a:	701a      	strb	r2, [r3, #0]
	unsigned char connack_rc_char = readChar(&curdata);
    950c:	232a      	movs	r3, #42	; 0x2a
    950e:	18fc      	adds	r4, r7, r3
    9510:	2320      	movs	r3, #32
    9512:	18fb      	adds	r3, r7, r3
    9514:	0018      	movs	r0, r3
    9516:	4b17      	ldr	r3, [pc, #92]	; (9574 <MQTTDeserialize_connack+0x158>)
    9518:	4798      	blx	r3
    951a:	0003      	movs	r3, r0
    951c:	7023      	strb	r3, [r4, #0]
	switch(connack_rc_char) {
    951e:	232a      	movs	r3, #42	; 0x2a
    9520:	18fb      	adds	r3, r7, r3
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	2b05      	cmp	r3, #5
    9526:	d81c      	bhi.n	9562 <MQTTDeserialize_connack+0x146>
    9528:	009a      	lsls	r2, r3, #2
    952a:	4b14      	ldr	r3, [pc, #80]	; (957c <MQTTDeserialize_connack+0x160>)
    952c:	18d3      	adds	r3, r2, r3
    952e:	681b      	ldr	r3, [r3, #0]
    9530:	469f      	mov	pc, r3
		case CONNACK_CONNECTION_ACCEPTED:
			*connack_rc = MQTT_CONNACK_CONNECTION_ACCEPTED;
    9532:	68bb      	ldr	r3, [r7, #8]
    9534:	2204      	movs	r2, #4
    9536:	701a      	strb	r2, [r3, #0]
			break;
    9538:	e017      	b.n	956a <MQTTDeserialize_connack+0x14e>
		case CONANCK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR:
			*connack_rc = MQTT_CONANCK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR;
    953a:	68bb      	ldr	r3, [r7, #8]
    953c:	22f3      	movs	r2, #243	; 0xf3
    953e:	701a      	strb	r2, [r3, #0]
			break;
    9540:	e013      	b.n	956a <MQTTDeserialize_connack+0x14e>
		case CONNACK_IDENTIFIER_REJECTED_ERROR:
			*connack_rc = MQTT_CONNACK_IDENTIFIER_REJECTED_ERROR;
    9542:	68bb      	ldr	r3, [r7, #8]
    9544:	22f2      	movs	r2, #242	; 0xf2
    9546:	701a      	strb	r2, [r3, #0]
			break;
    9548:	e00f      	b.n	956a <MQTTDeserialize_connack+0x14e>
		case CONNACK_SERVER_UNAVAILABLE_ERROR:
			*connack_rc = MQTT_CONNACK_SERVER_UNAVAILABLE_ERROR;
    954a:	68bb      	ldr	r3, [r7, #8]
    954c:	22f1      	movs	r2, #241	; 0xf1
    954e:	701a      	strb	r2, [r3, #0]
			break;
    9550:	e00b      	b.n	956a <MQTTDeserialize_connack+0x14e>
		case CONNACK_BAD_USERDATA_ERROR:
			*connack_rc = MQTT_CONNACK_BAD_USERDATA_ERROR;
    9552:	68bb      	ldr	r3, [r7, #8]
    9554:	22f0      	movs	r2, #240	; 0xf0
    9556:	701a      	strb	r2, [r3, #0]
			break;
    9558:	e007      	b.n	956a <MQTTDeserialize_connack+0x14e>
		case CONNACK_NOT_AUTHORIZED_ERROR:
			*connack_rc = MQTT_CONNACK_NOT_AUTHORIZED_ERROR;
    955a:	68bb      	ldr	r3, [r7, #8]
    955c:	22ef      	movs	r2, #239	; 0xef
    955e:	701a      	strb	r2, [r3, #0]
			break;
    9560:	e003      	b.n	956a <MQTTDeserialize_connack+0x14e>
		default:
			*connack_rc = MQTT_CONNACK_UNKNOWN_ERROR;
    9562:	68bb      	ldr	r3, [r7, #8]
    9564:	22f4      	movs	r2, #244	; 0xf4
    9566:	701a      	strb	r2, [r3, #0]
			break;
    9568:	46c0      	nop			; (mov r8, r8)
	}

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    956a:	2300      	movs	r3, #0
}
    956c:	0018      	movs	r0, r3
    956e:	46bd      	mov	sp, r7
    9570:	b00d      	add	sp, #52	; 0x34
    9572:	bd90      	pop	{r4, r7, pc}
    9574:	00009b19 	.word	0x00009b19
    9578:	00009a55 	.word	0x00009a55
    957c:	0001e408 	.word	0x0001e408

00009580 <MQTTSerialize_zero>:
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_zero(unsigned char *buf, size_t buflen,
								  unsigned char packetType,
								  uint32_t *serialized_length) {
    9580:	b5b0      	push	{r4, r5, r7, lr}
    9582:	b08a      	sub	sp, #40	; 0x28
    9584:	af02      	add	r7, sp, #8
    9586:	60f8      	str	r0, [r7, #12]
    9588:	60b9      	str	r1, [r7, #8]
    958a:	603b      	str	r3, [r7, #0]
    958c:	1dfb      	adds	r3, r7, #7
    958e:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == serialized_length) {
    9590:	68fb      	ldr	r3, [r7, #12]
    9592:	2b00      	cmp	r3, #0
    9594:	d002      	beq.n	959c <MQTTSerialize_zero+0x1c>
    9596:	683b      	ldr	r3, [r7, #0]
    9598:	2b00      	cmp	r3, #0
    959a:	d102      	bne.n	95a2 <MQTTSerialize_zero+0x22>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    959c:	2306      	movs	r3, #6
    959e:	425b      	negs	r3, r3
    95a0:	e03d      	b.n	961e <MQTTSerialize_zero+0x9e>
	}

	/* Buffer should have at least 2 bytes for the header */
	if(4 > buflen) {
    95a2:	68bb      	ldr	r3, [r7, #8]
    95a4:	2b03      	cmp	r3, #3
    95a6:	d802      	bhi.n	95ae <MQTTSerialize_zero+0x2e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    95a8:	2309      	movs	r3, #9
    95aa:	425b      	negs	r3, r3
    95ac:	e037      	b.n	961e <MQTTSerialize_zero+0x9e>
	}

	MQTTHeader header = {0};
    95ae:	2300      	movs	r3, #0
    95b0:	61bb      	str	r3, [r7, #24]
	unsigned char *ptr = buf;
    95b2:	68fb      	ldr	r3, [r7, #12]
    95b4:	617b      	str	r3, [r7, #20]

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, packetType, QOS0, 0, 0);
    95b6:	1dfb      	adds	r3, r7, #7
    95b8:	2100      	movs	r1, #0
    95ba:	5659      	ldrsb	r1, [r3, r1]
    95bc:	231f      	movs	r3, #31
    95be:	18fc      	adds	r4, r7, r3
    95c0:	2318      	movs	r3, #24
    95c2:	18f8      	adds	r0, r7, r3
    95c4:	2300      	movs	r3, #0
    95c6:	9300      	str	r3, [sp, #0]
    95c8:	2300      	movs	r3, #0
    95ca:	2200      	movs	r2, #0
    95cc:	4d16      	ldr	r5, [pc, #88]	; (9628 <MQTTSerialize_zero+0xa8>)
    95ce:	47a8      	blx	r5
    95d0:	0003      	movs	r3, r0
    95d2:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    95d4:	231f      	movs	r3, #31
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	b25b      	sxtb	r3, r3
    95dc:	2b00      	cmp	r3, #0
    95de:	d004      	beq.n	95ea <MQTTSerialize_zero+0x6a>
		FUNC_EXIT_RC(rc);
		return rc;
    95e0:	231f      	movs	r3, #31
    95e2:	18fb      	adds	r3, r7, r3
    95e4:	781b      	ldrb	r3, [r3, #0]
    95e6:	b25b      	sxtb	r3, r3
    95e8:	e019      	b.n	961e <MQTTSerialize_zero+0x9e>
	}

	/* write header */
	writeChar(&ptr, header.byte);
    95ea:	2318      	movs	r3, #24
    95ec:	18fb      	adds	r3, r7, r3
    95ee:	781a      	ldrb	r2, [r3, #0]
    95f0:	2314      	movs	r3, #20
    95f2:	18fb      	adds	r3, r7, r3
    95f4:	0011      	movs	r1, r2
    95f6:	0018      	movs	r0, r3
    95f8:	4b0c      	ldr	r3, [pc, #48]	; (962c <MQTTSerialize_zero+0xac>)
    95fa:	4798      	blx	r3

	/* write remaining length */
	ptr += MQTTPacket_encode(ptr, 0);
    95fc:	697b      	ldr	r3, [r7, #20]
    95fe:	2100      	movs	r1, #0
    9600:	0018      	movs	r0, r3
    9602:	4b0b      	ldr	r3, [pc, #44]	; (9630 <MQTTSerialize_zero+0xb0>)
    9604:	4798      	blx	r3
    9606:	0002      	movs	r2, r0
    9608:	697b      	ldr	r3, [r7, #20]
    960a:	189b      	adds	r3, r3, r2
    960c:	617b      	str	r3, [r7, #20]
	*serialized_length = (uint32_t)(ptr - buf);
    960e:	697b      	ldr	r3, [r7, #20]
    9610:	001a      	movs	r2, r3
    9612:	68fb      	ldr	r3, [r7, #12]
    9614:	1ad3      	subs	r3, r2, r3
    9616:	001a      	movs	r2, r3
    9618:	683b      	ldr	r3, [r7, #0]
    961a:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    961c:	2300      	movs	r3, #0
}
    961e:	0018      	movs	r0, r3
    9620:	46bd      	mov	sp, r7
    9622:	b008      	add	sp, #32
    9624:	bdb0      	pop	{r4, r5, r7, pc}
    9626:	46c0      	nop			; (mov r8, r8)
    9628:	00009e4d 	.word	0x00009e4d
    962c:	00009b45 	.word	0x00009b45
    9630:	000098e1 	.word	0x000098e1

00009634 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_disconnect(unsigned char *buf, size_t buflen,
										uint32_t *serialized_length) {
    9634:	b590      	push	{r4, r7, lr}
    9636:	b085      	sub	sp, #20
    9638:	af00      	add	r7, sp, #0
    963a:	60f8      	str	r0, [r7, #12]
    963c:	60b9      	str	r1, [r7, #8]
    963e:	607a      	str	r2, [r7, #4]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT, serialized_length);
    9640:	687b      	ldr	r3, [r7, #4]
    9642:	68b9      	ldr	r1, [r7, #8]
    9644:	68f8      	ldr	r0, [r7, #12]
    9646:	220e      	movs	r2, #14
    9648:	4c03      	ldr	r4, [pc, #12]	; (9658 <MQTTSerialize_disconnect+0x24>)
    964a:	47a0      	blx	r4
    964c:	0003      	movs	r3, r0
}
    964e:	0018      	movs	r0, r3
    9650:	46bd      	mov	sp, r7
    9652:	b005      	add	sp, #20
    9654:	bd90      	pop	{r4, r7, pc}
    9656:	46c0      	nop			; (mov r8, r8)
    9658:	00009581 	.word	0x00009581

0000965c <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param serialized length
  * @return MQTTReturnCode indicating function execution status
  */
MQTTReturnCode MQTTSerialize_pingreq(unsigned char *buf, size_t buflen,
									 uint32_t *serialized_length) {
    965c:	b590      	push	{r4, r7, lr}
    965e:	b085      	sub	sp, #20
    9660:	af00      	add	r7, sp, #0
    9662:	60f8      	str	r0, [r7, #12]
    9664:	60b9      	str	r1, [r7, #8]
    9666:	607a      	str	r2, [r7, #4]
	return MQTTSerialize_zero(buf, buflen, PINGREQ, serialized_length);
    9668:	687b      	ldr	r3, [r7, #4]
    966a:	68b9      	ldr	r1, [r7, #8]
    966c:	68f8      	ldr	r0, [r7, #12]
    966e:	220c      	movs	r2, #12
    9670:	4c03      	ldr	r4, [pc, #12]	; (9680 <MQTTSerialize_pingreq+0x24>)
    9672:	47a0      	blx	r4
    9674:	0003      	movs	r3, r0
}
    9676:	0018      	movs	r0, r3
    9678:	46bd      	mov	sp, r7
    967a:	b005      	add	sp, #20
    967c:	bd90      	pop	{r4, r7, pc}
    967e:	46c0      	nop			; (mov r8, r8)
    9680:	00009581 	.word	0x00009581

00009684 <MQTTDeserialize_publish>:
  * @return error code.  1 is success
  */
MQTTReturnCode MQTTDeserialize_publish(unsigned char *dup, QoS *qos,
									   unsigned char *retained, uint16_t *packetid,
									   MQTTString* topicName, unsigned char **payload,
									   uint32_t *payloadlen, unsigned char *buf, size_t buflen) {
    9684:	b590      	push	{r4, r7, lr}
    9686:	b08b      	sub	sp, #44	; 0x2c
    9688:	af00      	add	r7, sp, #0
    968a:	60f8      	str	r0, [r7, #12]
    968c:	60b9      	str	r1, [r7, #8]
    968e:	607a      	str	r2, [r7, #4]
    9690:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == dup || NULL == qos || NULL == retained || NULL == packetid) {
    9692:	68fb      	ldr	r3, [r7, #12]
    9694:	2b00      	cmp	r3, #0
    9696:	d008      	beq.n	96aa <MQTTDeserialize_publish+0x26>
    9698:	68bb      	ldr	r3, [r7, #8]
    969a:	2b00      	cmp	r3, #0
    969c:	d005      	beq.n	96aa <MQTTDeserialize_publish+0x26>
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	2b00      	cmp	r3, #0
    96a2:	d002      	beq.n	96aa <MQTTDeserialize_publish+0x26>
    96a4:	683b      	ldr	r3, [r7, #0]
    96a6:	2b00      	cmp	r3, #0
    96a8:	d102      	bne.n	96b0 <MQTTDeserialize_publish+0x2c>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    96aa:	2301      	movs	r3, #1
    96ac:	425b      	negs	r3, r3
    96ae:	e089      	b.n	97c4 <MQTTDeserialize_publish+0x140>
	 * Fixed header is two bytes.
	 * Variable header size depends on QoS And Topic Name.
	 * QoS level 0 doesn't have a message identifier (0 - 2 bytes)
	 * Topic Name length fields decide size of topic name field (at least 2 bytes)
	 * MQTT v3.1.1 Specification 3.3.1 */
	if(4 > buflen) {
    96b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    96b2:	2b03      	cmp	r3, #3
    96b4:	d802      	bhi.n	96bc <MQTTDeserialize_publish+0x38>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    96b6:	2309      	movs	r3, #9
    96b8:	425b      	negs	r3, r3
    96ba:	e083      	b.n	97c4 <MQTTDeserialize_publish+0x140>
	}

	MQTTHeader header = {0};
    96bc:	2300      	movs	r3, #0
    96be:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    96c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    96c2:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    96c4:	2300      	movs	r3, #0
    96c6:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTReturnCode rc = FAILURE;
    96c8:	2323      	movs	r3, #35	; 0x23
    96ca:	18fb      	adds	r3, r7, r3
    96cc:	22ff      	movs	r2, #255	; 0xff
    96ce:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    96d0:	2300      	movs	r3, #0
    96d2:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    96d4:	2300      	movs	r3, #0
    96d6:	613b      	str	r3, [r7, #16]

	header.byte = readChar(&curdata);
    96d8:	2318      	movs	r3, #24
    96da:	18fb      	adds	r3, r7, r3
    96dc:	0018      	movs	r0, r3
    96de:	4b3b      	ldr	r3, [pc, #236]	; (97cc <MQTTDeserialize_publish+0x148>)
    96e0:	4798      	blx	r3
    96e2:	0003      	movs	r3, r0
    96e4:	001a      	movs	r2, r3
    96e6:	231c      	movs	r3, #28
    96e8:	18fb      	adds	r3, r7, r3
    96ea:	701a      	strb	r2, [r3, #0]
	if(PUBLISH != header.bits.type) {
    96ec:	231c      	movs	r3, #28
    96ee:	18fb      	adds	r3, r7, r3
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	220f      	movs	r2, #15
    96f4:	4393      	bics	r3, r2
    96f6:	b2db      	uxtb	r3, r3
    96f8:	2b30      	cmp	r3, #48	; 0x30
    96fa:	d002      	beq.n	9702 <MQTTDeserialize_publish+0x7e>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    96fc:	2301      	movs	r3, #1
    96fe:	425b      	negs	r3, r3
    9700:	e060      	b.n	97c4 <MQTTDeserialize_publish+0x140>
	}

	*dup = header.bits.dup;
    9702:	231c      	movs	r3, #28
    9704:	18fb      	adds	r3, r7, r3
    9706:	781b      	ldrb	r3, [r3, #0]
    9708:	071b      	lsls	r3, r3, #28
    970a:	0fdb      	lsrs	r3, r3, #31
    970c:	b2db      	uxtb	r3, r3
    970e:	001a      	movs	r2, r3
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	701a      	strb	r2, [r3, #0]
	*qos = (QoS)header.bits.qos;
    9714:	231c      	movs	r3, #28
    9716:	18fb      	adds	r3, r7, r3
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	075b      	lsls	r3, r3, #29
    971c:	0f9b      	lsrs	r3, r3, #30
    971e:	b2db      	uxtb	r3, r3
    9720:	001a      	movs	r2, r3
    9722:	68bb      	ldr	r3, [r7, #8]
    9724:	701a      	strb	r2, [r3, #0]
	*retained = header.bits.retain;
    9726:	231c      	movs	r3, #28
    9728:	18fb      	adds	r3, r7, r3
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	07db      	lsls	r3, r3, #31
    972e:	0fdb      	lsrs	r3, r3, #31
    9730:	b2db      	uxtb	r3, r3
    9732:	001a      	movs	r2, r3
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	701a      	strb	r2, [r3, #0]

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    9738:	69bb      	ldr	r3, [r7, #24]
    973a:	2223      	movs	r2, #35	; 0x23
    973c:	18bc      	adds	r4, r7, r2
    973e:	2210      	movs	r2, #16
    9740:	18ba      	adds	r2, r7, r2
    9742:	2114      	movs	r1, #20
    9744:	1879      	adds	r1, r7, r1
    9746:	0018      	movs	r0, r3
    9748:	4b21      	ldr	r3, [pc, #132]	; (97d0 <MQTTDeserialize_publish+0x14c>)
    974a:	4798      	blx	r3
    974c:	0003      	movs	r3, r0
    974e:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    9750:	2323      	movs	r3, #35	; 0x23
    9752:	18fb      	adds	r3, r7, r3
    9754:	781b      	ldrb	r3, [r3, #0]
    9756:	b25b      	sxtb	r3, r3
    9758:	2b00      	cmp	r3, #0
    975a:	d004      	beq.n	9766 <MQTTDeserialize_publish+0xe2>
		FUNC_EXIT_RC(rc);
		return rc;
    975c:	2323      	movs	r3, #35	; 0x23
    975e:	18fb      	adds	r3, r7, r3
    9760:	781b      	ldrb	r3, [r3, #0]
    9762:	b25b      	sxtb	r3, r3
    9764:	e02e      	b.n	97c4 <MQTTDeserialize_publish+0x140>
	}
	curdata += (readBytesLen);
    9766:	69ba      	ldr	r2, [r7, #24]
    9768:	693b      	ldr	r3, [r7, #16]
    976a:	18d3      	adds	r3, r2, r3
    976c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    976e:	69ba      	ldr	r2, [r7, #24]
    9770:	697b      	ldr	r3, [r7, #20]
    9772:	18d3      	adds	r3, r2, r3
    9774:	627b      	str	r3, [r7, #36]	; 0x24

	/* do we have enough data to read the protocol version byte? */
	if(SUCCESS != readMQTTLenString(topicName, &curdata, enddata) || (0 > (enddata - curdata))) {
    9776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9778:	2318      	movs	r3, #24
    977a:	18f9      	adds	r1, r7, r3
    977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    977e:	0018      	movs	r0, r3
    9780:	4b14      	ldr	r3, [pc, #80]	; (97d4 <MQTTDeserialize_publish+0x150>)
    9782:	4798      	blx	r3
    9784:	1e03      	subs	r3, r0, #0
    9786:	d103      	bne.n	9790 <MQTTDeserialize_publish+0x10c>
    9788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    978a:	69ba      	ldr	r2, [r7, #24]
    978c:	1a9b      	subs	r3, r3, r2
    978e:	d502      	bpl.n	9796 <MQTTDeserialize_publish+0x112>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    9790:	2301      	movs	r3, #1
    9792:	425b      	negs	r3, r3
    9794:	e016      	b.n	97c4 <MQTTDeserialize_publish+0x140>
	}

	if(QOS0 != *qos) {
    9796:	68bb      	ldr	r3, [r7, #8]
    9798:	781b      	ldrb	r3, [r3, #0]
    979a:	2b00      	cmp	r3, #0
    979c:	d008      	beq.n	97b0 <MQTTDeserialize_publish+0x12c>
		*packetid = readPacketId(&curdata);
    979e:	2318      	movs	r3, #24
    97a0:	18fb      	adds	r3, r7, r3
    97a2:	0018      	movs	r0, r3
    97a4:	4b0c      	ldr	r3, [pc, #48]	; (97d8 <MQTTDeserialize_publish+0x154>)
    97a6:	4798      	blx	r3
    97a8:	0003      	movs	r3, r0
    97aa:	001a      	movs	r2, r3
    97ac:	683b      	ldr	r3, [r7, #0]
    97ae:	801a      	strh	r2, [r3, #0]
	}

	*payloadlen = (uint32_t)(enddata - curdata);
    97b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97b2:	69ba      	ldr	r2, [r7, #24]
    97b4:	1a9b      	subs	r3, r3, r2
    97b6:	001a      	movs	r2, r3
    97b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    97ba:	601a      	str	r2, [r3, #0]
	*payload = curdata;
    97bc:	69ba      	ldr	r2, [r7, #24]
    97be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97c0:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    97c2:	2300      	movs	r3, #0
}
    97c4:	0018      	movs	r0, r3
    97c6:	46bd      	mov	sp, r7
    97c8:	b00b      	add	sp, #44	; 0x2c
    97ca:	bd90      	pop	{r4, r7, pc}
    97cc:	00009b19 	.word	0x00009b19
    97d0:	00009a55 	.word	0x00009a55
    97d4:	00009d1d 	.word	0x00009d1d
    97d8:	00009ac3 	.word	0x00009ac3

000097dc <MQTTDeserialize_ack>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
MQTTReturnCode MQTTDeserialize_ack(unsigned char *packettype, unsigned char *dup,
								   uint16_t *packetid, unsigned char *buf,
								   size_t buflen) {
    97dc:	b590      	push	{r4, r7, lr}
    97de:	b08b      	sub	sp, #44	; 0x2c
    97e0:	af00      	add	r7, sp, #0
    97e2:	60f8      	str	r0, [r7, #12]
    97e4:	60b9      	str	r1, [r7, #8]
    97e6:	607a      	str	r2, [r7, #4]
    97e8:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == packettype || NULL == dup || NULL == packetid || NULL == buf) {
    97ea:	68fb      	ldr	r3, [r7, #12]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d008      	beq.n	9802 <MQTTDeserialize_ack+0x26>
    97f0:	68bb      	ldr	r3, [r7, #8]
    97f2:	2b00      	cmp	r3, #0
    97f4:	d005      	beq.n	9802 <MQTTDeserialize_ack+0x26>
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d002      	beq.n	9802 <MQTTDeserialize_ack+0x26>
    97fc:	683b      	ldr	r3, [r7, #0]
    97fe:	2b00      	cmp	r3, #0
    9800:	d102      	bne.n	9808 <MQTTDeserialize_ack+0x2c>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    9802:	2306      	movs	r3, #6
    9804:	425b      	negs	r3, r3
    9806:	e060      	b.n	98ca <MQTTDeserialize_ack+0xee>
	}

	/* PUBACK fixed header size is two bytes, variable header is 2 bytes, MQTT v3.1.1 Specification 3.4.1 */
	if(4 > buflen) {
    9808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    980a:	2b03      	cmp	r3, #3
    980c:	d802      	bhi.n	9814 <MQTTDeserialize_ack+0x38>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    980e:	2309      	movs	r3, #9
    9810:	425b      	negs	r3, r3
    9812:	e05a      	b.n	98ca <MQTTDeserialize_ack+0xee>
	}

	MQTTReturnCode rc = FAILURE;
    9814:	2327      	movs	r3, #39	; 0x27
    9816:	18fb      	adds	r3, r7, r3
    9818:	22ff      	movs	r2, #255	; 0xff
    981a:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
    981c:	2300      	movs	r3, #0
    981e:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    9820:	683b      	ldr	r3, [r7, #0]
    9822:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    9824:	2300      	movs	r3, #0
    9826:	623b      	str	r3, [r7, #32]
	uint32_t decodedLen = 0;
    9828:	2300      	movs	r3, #0
    982a:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    982c:	2300      	movs	r3, #0
    982e:	613b      	str	r3, [r7, #16]

	header.byte = readChar(&curdata);
    9830:	2318      	movs	r3, #24
    9832:	18fb      	adds	r3, r7, r3
    9834:	0018      	movs	r0, r3
    9836:	4b27      	ldr	r3, [pc, #156]	; (98d4 <MQTTDeserialize_ack+0xf8>)
    9838:	4798      	blx	r3
    983a:	0003      	movs	r3, r0
    983c:	001a      	movs	r2, r3
    983e:	231c      	movs	r3, #28
    9840:	18fb      	adds	r3, r7, r3
    9842:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
    9844:	231c      	movs	r3, #28
    9846:	18fb      	adds	r3, r7, r3
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	071b      	lsls	r3, r3, #28
    984c:	0fdb      	lsrs	r3, r3, #31
    984e:	b2db      	uxtb	r3, r3
    9850:	001a      	movs	r2, r3
    9852:	68bb      	ldr	r3, [r7, #8]
    9854:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
    9856:	231c      	movs	r3, #28
    9858:	18fb      	adds	r3, r7, r3
    985a:	781b      	ldrb	r3, [r3, #0]
    985c:	061b      	lsls	r3, r3, #24
    985e:	0f1b      	lsrs	r3, r3, #28
    9860:	b2db      	uxtb	r3, r3
    9862:	001a      	movs	r2, r3
    9864:	68fb      	ldr	r3, [r7, #12]
    9866:	701a      	strb	r2, [r3, #0]

	/* read remaining length */
	rc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    9868:	69bb      	ldr	r3, [r7, #24]
    986a:	2227      	movs	r2, #39	; 0x27
    986c:	18bc      	adds	r4, r7, r2
    986e:	2210      	movs	r2, #16
    9870:	18ba      	adds	r2, r7, r2
    9872:	2114      	movs	r1, #20
    9874:	1879      	adds	r1, r7, r1
    9876:	0018      	movs	r0, r3
    9878:	4b17      	ldr	r3, [pc, #92]	; (98d8 <MQTTDeserialize_ack+0xfc>)
    987a:	4798      	blx	r3
    987c:	0003      	movs	r3, r0
    987e:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    9880:	2327      	movs	r3, #39	; 0x27
    9882:	18fb      	adds	r3, r7, r3
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	b25b      	sxtb	r3, r3
    9888:	2b00      	cmp	r3, #0
    988a:	d004      	beq.n	9896 <MQTTDeserialize_ack+0xba>
		FUNC_EXIT_RC(rc);
		return rc;
    988c:	2327      	movs	r3, #39	; 0x27
    988e:	18fb      	adds	r3, r7, r3
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	b25b      	sxtb	r3, r3
    9894:	e019      	b.n	98ca <MQTTDeserialize_ack+0xee>
	}
	curdata += (readBytesLen);
    9896:	69ba      	ldr	r2, [r7, #24]
    9898:	693b      	ldr	r3, [r7, #16]
    989a:	18d3      	adds	r3, r2, r3
    989c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    989e:	69ba      	ldr	r2, [r7, #24]
    98a0:	697b      	ldr	r3, [r7, #20]
    98a2:	18d3      	adds	r3, r2, r3
    98a4:	623b      	str	r3, [r7, #32]

	if(enddata - curdata < 2) {
    98a6:	6a3b      	ldr	r3, [r7, #32]
    98a8:	69ba      	ldr	r2, [r7, #24]
    98aa:	1a9b      	subs	r3, r3, r2
    98ac:	2b01      	cmp	r3, #1
    98ae:	dc02      	bgt.n	98b6 <MQTTDeserialize_ack+0xda>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    98b0:	2301      	movs	r3, #1
    98b2:	425b      	negs	r3, r3
    98b4:	e009      	b.n	98ca <MQTTDeserialize_ack+0xee>
	}

	*packetid = readPacketId(&curdata);
    98b6:	2318      	movs	r3, #24
    98b8:	18fb      	adds	r3, r7, r3
    98ba:	0018      	movs	r0, r3
    98bc:	4b07      	ldr	r3, [pc, #28]	; (98dc <MQTTDeserialize_ack+0x100>)
    98be:	4798      	blx	r3
    98c0:	0003      	movs	r3, r0
    98c2:	001a      	movs	r2, r3
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	801a      	strh	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    98c8:	2300      	movs	r3, #0
    98ca:	0018      	movs	r0, r3
    98cc:	46bd      	mov	sp, r7
    98ce:	b00b      	add	sp, #44	; 0x2c
    98d0:	bd90      	pop	{r4, r7, pc}
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	00009b19 	.word	0x00009b19
    98d8:	00009a55 	.word	0x00009a55
    98dc:	00009ac3 	.word	0x00009ac3

000098e0 <MQTTPacket_encode>:
 * Encodes the message length according to the MQTT algorithm
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
uint32_t MQTTPacket_encode(unsigned char *buf, size_t length) {
    98e0:	b580      	push	{r7, lr}
    98e2:	b084      	sub	sp, #16
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
    98e8:	6039      	str	r1, [r7, #0]
	uint32_t outLen = 0;
    98ea:	2300      	movs	r3, #0
    98ec:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do {
		int16_t d = length % 128;
    98ee:	683b      	ldr	r3, [r7, #0]
    98f0:	b21a      	sxth	r2, r3
    98f2:	230a      	movs	r3, #10
    98f4:	18fb      	adds	r3, r7, r3
    98f6:	217f      	movs	r1, #127	; 0x7f
    98f8:	400a      	ands	r2, r1
    98fa:	801a      	strh	r2, [r3, #0]
		length /= 128;
    98fc:	683b      	ldr	r3, [r7, #0]
    98fe:	09db      	lsrs	r3, r3, #7
    9900:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if(length > 0) {
    9902:	683b      	ldr	r3, [r7, #0]
    9904:	2b00      	cmp	r3, #0
    9906:	d007      	beq.n	9918 <MQTTPacket_encode+0x38>
			d |= 0x80;
    9908:	230a      	movs	r3, #10
    990a:	18fb      	adds	r3, r7, r3
    990c:	220a      	movs	r2, #10
    990e:	18ba      	adds	r2, r7, r2
    9910:	8812      	ldrh	r2, [r2, #0]
    9912:	2180      	movs	r1, #128	; 0x80
    9914:	430a      	orrs	r2, r1
    9916:	801a      	strh	r2, [r3, #0]
		}
		buf[outLen++] = (unsigned char)d;
    9918:	68fb      	ldr	r3, [r7, #12]
    991a:	1c5a      	adds	r2, r3, #1
    991c:	60fa      	str	r2, [r7, #12]
    991e:	687a      	ldr	r2, [r7, #4]
    9920:	18d3      	adds	r3, r2, r3
    9922:	220a      	movs	r2, #10
    9924:	18ba      	adds	r2, r7, r2
    9926:	8812      	ldrh	r2, [r2, #0]
    9928:	b2d2      	uxtb	r2, r2
    992a:	701a      	strb	r2, [r3, #0]
	}while(length > 0);
    992c:	683b      	ldr	r3, [r7, #0]
    992e:	2b00      	cmp	r3, #0
    9930:	d1dd      	bne.n	98ee <MQTTPacket_encode+0xe>

	FUNC_EXIT_RC(outLen);
	return outLen;
    9932:	68fb      	ldr	r3, [r7, #12]
}
    9934:	0018      	movs	r0, r3
    9936:	46bd      	mov	sp, r7
    9938:	b004      	add	sp, #16
    993a:	bd80      	pop	{r7, pc}

0000993c <MQTTPacket_decode>:
 * Decodes the message length according to the MQTT algorithm
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
MQTTReturnCode MQTTPacket_decode(uint32_t (*getcharfn)(unsigned char *, uint32_t), uint32_t *value, uint32_t *readBytesLen) {
    993c:	b580      	push	{r7, lr}
    993e:	b088      	sub	sp, #32
    9940:	af00      	add	r7, sp, #0
    9942:	60f8      	str	r0, [r7, #12]
    9944:	60b9      	str	r1, [r7, #8]
    9946:	607a      	str	r2, [r7, #4]
	unsigned char c;
	uint32_t multiplier = 1;
    9948:	2301      	movs	r3, #1
    994a:	61fb      	str	r3, [r7, #28]
	uint32_t len = 0;
    994c:	2300      	movs	r3, #0
    994e:	61bb      	str	r3, [r7, #24]
	uint32_t getLen = 0;
    9950:	2300      	movs	r3, #0
    9952:	617b      	str	r3, [r7, #20]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
    9954:	68bb      	ldr	r3, [r7, #8]
    9956:	2200      	movs	r2, #0
    9958:	601a      	str	r2, [r3, #0]
	do {
		if(++len > MAX_NO_OF_REMAINING_LENGTH_BYTES) {
    995a:	69bb      	ldr	r3, [r7, #24]
    995c:	3301      	adds	r3, #1
    995e:	61bb      	str	r3, [r7, #24]
    9960:	69bb      	ldr	r3, [r7, #24]
    9962:	2b04      	cmp	r3, #4
    9964:	d902      	bls.n	996c <MQTTPacket_decode+0x30>
			/* bad data */
			FUNC_EXIT_RC(MQTTPACKET_READ_ERROR);
			return MQTTPACKET_READ_ERROR;
    9966:	230a      	movs	r3, #10
    9968:	425b      	negs	r3, r3
    996a:	e027      	b.n	99bc <MQTTPacket_decode+0x80>
		}
		getLen = (*getcharfn)(&c, 1);
    996c:	2313      	movs	r3, #19
    996e:	18fa      	adds	r2, r7, r3
    9970:	68fb      	ldr	r3, [r7, #12]
    9972:	2101      	movs	r1, #1
    9974:	0010      	movs	r0, r2
    9976:	4798      	blx	r3
    9978:	0003      	movs	r3, r0
    997a:	617b      	str	r3, [r7, #20]
		if(1 != getLen) {
    997c:	697b      	ldr	r3, [r7, #20]
    997e:	2b01      	cmp	r3, #1
    9980:	d002      	beq.n	9988 <MQTTPacket_decode+0x4c>
			FUNC_EXIT_RC(FAILURE);
			return FAILURE;
    9982:	2301      	movs	r3, #1
    9984:	425b      	negs	r3, r3
    9986:	e019      	b.n	99bc <MQTTPacket_decode+0x80>
		}
		*value += (c & 127) * multiplier;
    9988:	68bb      	ldr	r3, [r7, #8]
    998a:	681a      	ldr	r2, [r3, #0]
    998c:	2313      	movs	r3, #19
    998e:	18fb      	adds	r3, r7, r3
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	0019      	movs	r1, r3
    9994:	237f      	movs	r3, #127	; 0x7f
    9996:	400b      	ands	r3, r1
    9998:	69f9      	ldr	r1, [r7, #28]
    999a:	434b      	muls	r3, r1
    999c:	18d2      	adds	r2, r2, r3
    999e:	68bb      	ldr	r3, [r7, #8]
    99a0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
    99a2:	69fb      	ldr	r3, [r7, #28]
    99a4:	01db      	lsls	r3, r3, #7
    99a6:	61fb      	str	r3, [r7, #28]
	}while((c & 128) != 0);
    99a8:	2313      	movs	r3, #19
    99aa:	18fb      	adds	r3, r7, r3
    99ac:	781b      	ldrb	r3, [r3, #0]
    99ae:	b25b      	sxtb	r3, r3
    99b0:	2b00      	cmp	r3, #0
    99b2:	dbd2      	blt.n	995a <MQTTPacket_decode+0x1e>

	*readBytesLen = len;
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	69ba      	ldr	r2, [r7, #24]
    99b8:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    99ba:	2300      	movs	r3, #0
}
    99bc:	0018      	movs	r0, r3
    99be:	46bd      	mov	sp, r7
    99c0:	b008      	add	sp, #32
    99c2:	bd80      	pop	{r7, pc}

000099c4 <MQTTPacket_len>:

size_t MQTTPacket_len(size_t rem_len) {
    99c4:	b580      	push	{r7, lr}
    99c6:	b082      	sub	sp, #8
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	3301      	adds	r3, #1
    99d0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if(rem_len < 128) {
    99d2:	687b      	ldr	r3, [r7, #4]
    99d4:	2b7f      	cmp	r3, #127	; 0x7f
    99d6:	d803      	bhi.n	99e0 <MQTTPacket_len+0x1c>
		rem_len += 1;
    99d8:	687b      	ldr	r3, [r7, #4]
    99da:	3301      	adds	r3, #1
    99dc:	607b      	str	r3, [r7, #4]
    99de:	e012      	b.n	9a06 <MQTTPacket_len+0x42>
	} else if (rem_len < 16384) {
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	4a0b      	ldr	r2, [pc, #44]	; (9a10 <MQTTPacket_len+0x4c>)
    99e4:	4293      	cmp	r3, r2
    99e6:	d803      	bhi.n	99f0 <MQTTPacket_len+0x2c>
		rem_len += 2;
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	3302      	adds	r3, #2
    99ec:	607b      	str	r3, [r7, #4]
    99ee:	e00a      	b.n	9a06 <MQTTPacket_len+0x42>
	} else if (rem_len < 2097151) {
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	4a08      	ldr	r2, [pc, #32]	; (9a14 <MQTTPacket_len+0x50>)
    99f4:	4293      	cmp	r3, r2
    99f6:	d803      	bhi.n	9a00 <MQTTPacket_len+0x3c>
		rem_len += 3;
    99f8:	687b      	ldr	r3, [r7, #4]
    99fa:	3303      	adds	r3, #3
    99fc:	607b      	str	r3, [r7, #4]
    99fe:	e002      	b.n	9a06 <MQTTPacket_len+0x42>
	} else {
		rem_len += 4;
    9a00:	687b      	ldr	r3, [r7, #4]
    9a02:	3304      	adds	r3, #4
    9a04:	607b      	str	r3, [r7, #4]
	}

	return rem_len;
    9a06:	687b      	ldr	r3, [r7, #4]
}
    9a08:	0018      	movs	r0, r3
    9a0a:	46bd      	mov	sp, r7
    9a0c:	b002      	add	sp, #8
    9a0e:	bd80      	pop	{r7, pc}
    9a10:	00003fff 	.word	0x00003fff
    9a14:	001ffffe 	.word	0x001ffffe

00009a18 <bufchar>:

static unsigned char *bufptr;

uint32_t bufchar(unsigned char *c, uint32_t count) {
    9a18:	b580      	push	{r7, lr}
    9a1a:	b084      	sub	sp, #16
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
    9a20:	6039      	str	r1, [r7, #0]
	uint32_t i;

	for(i = 0; i < count; ++i) {
    9a22:	2300      	movs	r3, #0
    9a24:	60fb      	str	r3, [r7, #12]
    9a26:	e00a      	b.n	9a3e <bufchar+0x26>
		*c = *bufptr++;
    9a28:	4b09      	ldr	r3, [pc, #36]	; (9a50 <bufchar+0x38>)
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	1c59      	adds	r1, r3, #1
    9a2e:	4a08      	ldr	r2, [pc, #32]	; (9a50 <bufchar+0x38>)
    9a30:	6011      	str	r1, [r2, #0]
    9a32:	781a      	ldrb	r2, [r3, #0]
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < count; ++i) {
    9a38:	68fb      	ldr	r3, [r7, #12]
    9a3a:	3301      	adds	r3, #1
    9a3c:	60fb      	str	r3, [r7, #12]
    9a3e:	68fa      	ldr	r2, [r7, #12]
    9a40:	683b      	ldr	r3, [r7, #0]
    9a42:	429a      	cmp	r2, r3
    9a44:	d3f0      	bcc.n	9a28 <bufchar+0x10>
	}

	return count;
    9a46:	683b      	ldr	r3, [r7, #0]
}
    9a48:	0018      	movs	r0, r3
    9a4a:	46bd      	mov	sp, r7
    9a4c:	b004      	add	sp, #16
    9a4e:	bd80      	pop	{r7, pc}
    9a50:	200015c4 	.word	0x200015c4

00009a54 <MQTTPacket_decodeBuf>:

MQTTReturnCode MQTTPacket_decodeBuf(unsigned char *buf, uint32_t *value, uint32_t *readBytesLen) {
    9a54:	b580      	push	{r7, lr}
    9a56:	b084      	sub	sp, #16
    9a58:	af00      	add	r7, sp, #0
    9a5a:	60f8      	str	r0, [r7, #12]
    9a5c:	60b9      	str	r1, [r7, #8]
    9a5e:	607a      	str	r2, [r7, #4]
	bufptr = buf;
    9a60:	4b06      	ldr	r3, [pc, #24]	; (9a7c <MQTTPacket_decodeBuf+0x28>)
    9a62:	68fa      	ldr	r2, [r7, #12]
    9a64:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value, readBytesLen);
    9a66:	687a      	ldr	r2, [r7, #4]
    9a68:	68b9      	ldr	r1, [r7, #8]
    9a6a:	4b05      	ldr	r3, [pc, #20]	; (9a80 <MQTTPacket_decodeBuf+0x2c>)
    9a6c:	0018      	movs	r0, r3
    9a6e:	4b05      	ldr	r3, [pc, #20]	; (9a84 <MQTTPacket_decodeBuf+0x30>)
    9a70:	4798      	blx	r3
    9a72:	0003      	movs	r3, r0
}
    9a74:	0018      	movs	r0, r3
    9a76:	46bd      	mov	sp, r7
    9a78:	b004      	add	sp, #16
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	200015c4 	.word	0x200015c4
    9a80:	00009a19 	.word	0x00009a19
    9a84:	0000993d 	.word	0x0000993d

00009a88 <readSizeT>:
/**
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
size_t readSizeT(unsigned char **pptr) {
    9a88:	b580      	push	{r7, lr}
    9a8a:	b086      	sub	sp, #24
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	6078      	str	r0, [r7, #4]
	unsigned char *ptr = *pptr;
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	617b      	str	r3, [r7, #20]
	size_t firstByte = (size_t)(*ptr);
    9a96:	697b      	ldr	r3, [r7, #20]
    9a98:	781b      	ldrb	r3, [r3, #0]
    9a9a:	613b      	str	r3, [r7, #16]
	size_t secondByte = (size_t)(*(ptr+1));
    9a9c:	697b      	ldr	r3, [r7, #20]
    9a9e:	3301      	adds	r3, #1
    9aa0:	781b      	ldrb	r3, [r3, #0]
    9aa2:	60fb      	str	r3, [r7, #12]
	size_t size = 256 * firstByte + secondByte;
    9aa4:	693b      	ldr	r3, [r7, #16]
    9aa6:	021a      	lsls	r2, r3, #8
    9aa8:	68fb      	ldr	r3, [r7, #12]
    9aaa:	18d3      	adds	r3, r2, r3
    9aac:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	681b      	ldr	r3, [r3, #0]
    9ab2:	1c9a      	adds	r2, r3, #2
    9ab4:	687b      	ldr	r3, [r7, #4]
    9ab6:	601a      	str	r2, [r3, #0]
	return size;
    9ab8:	68bb      	ldr	r3, [r7, #8]
}
    9aba:	0018      	movs	r0, r3
    9abc:	46bd      	mov	sp, r7
    9abe:	b006      	add	sp, #24
    9ac0:	bd80      	pop	{r7, pc}

00009ac2 <readPacketId>:
/**
 * Calculates uint16 packet id from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the value calculated
 */
uint16_t readPacketId(unsigned char **pptr) {
    9ac2:	b580      	push	{r7, lr}
    9ac4:	b084      	sub	sp, #16
    9ac6:	af00      	add	r7, sp, #0
    9ac8:	6078      	str	r0, [r7, #4]
	unsigned char *ptr = *pptr;
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	681b      	ldr	r3, [r3, #0]
    9ace:	60fb      	str	r3, [r7, #12]
	uint8_t firstByte = (uint8_t)(*ptr);
    9ad0:	230b      	movs	r3, #11
    9ad2:	18fb      	adds	r3, r7, r3
    9ad4:	68fa      	ldr	r2, [r7, #12]
    9ad6:	7812      	ldrb	r2, [r2, #0]
    9ad8:	701a      	strb	r2, [r3, #0]
	uint8_t secondByte = (uint8_t)(*(ptr + 1));
    9ada:	230a      	movs	r3, #10
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	68fa      	ldr	r2, [r7, #12]
    9ae0:	7852      	ldrb	r2, [r2, #1]
    9ae2:	701a      	strb	r2, [r3, #0]
	uint16_t len = (uint16_t)(secondByte + (256 * firstByte));
    9ae4:	230a      	movs	r3, #10
    9ae6:	18fb      	adds	r3, r7, r3
    9ae8:	781b      	ldrb	r3, [r3, #0]
    9aea:	b299      	uxth	r1, r3
    9aec:	230b      	movs	r3, #11
    9aee:	18fb      	adds	r3, r7, r3
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	b29b      	uxth	r3, r3
    9af4:	021b      	lsls	r3, r3, #8
    9af6:	b29a      	uxth	r2, r3
    9af8:	2308      	movs	r3, #8
    9afa:	18fb      	adds	r3, r7, r3
    9afc:	188a      	adds	r2, r1, r2
    9afe:	801a      	strh	r2, [r3, #0]
	*pptr += 2;
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	681b      	ldr	r3, [r3, #0]
    9b04:	1c9a      	adds	r2, r3, #2
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	601a      	str	r2, [r3, #0]
	return len;
    9b0a:	2308      	movs	r3, #8
    9b0c:	18fb      	adds	r3, r7, r3
    9b0e:	881b      	ldrh	r3, [r3, #0]
}
    9b10:	0018      	movs	r0, r3
    9b12:	46bd      	mov	sp, r7
    9b14:	b004      	add	sp, #16
    9b16:	bd80      	pop	{r7, pc}

00009b18 <readChar>:
/**
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
unsigned char readChar(unsigned char **pptr) {
    9b18:	b580      	push	{r7, lr}
    9b1a:	b084      	sub	sp, #16
    9b1c:	af00      	add	r7, sp, #0
    9b1e:	6078      	str	r0, [r7, #4]
	unsigned char c = **pptr;
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	681a      	ldr	r2, [r3, #0]
    9b24:	230f      	movs	r3, #15
    9b26:	18fb      	adds	r3, r7, r3
    9b28:	7812      	ldrb	r2, [r2, #0]
    9b2a:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	681b      	ldr	r3, [r3, #0]
    9b30:	1c5a      	adds	r2, r3, #1
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	601a      	str	r2, [r3, #0]
	return c;
    9b36:	230f      	movs	r3, #15
    9b38:	18fb      	adds	r3, r7, r3
    9b3a:	781b      	ldrb	r3, [r3, #0]
}
    9b3c:	0018      	movs	r0, r3
    9b3e:	46bd      	mov	sp, r7
    9b40:	b004      	add	sp, #16
    9b42:	bd80      	pop	{r7, pc}

00009b44 <writeChar>:
/**
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char **pptr, unsigned char c) {
    9b44:	b580      	push	{r7, lr}
    9b46:	b082      	sub	sp, #8
    9b48:	af00      	add	r7, sp, #0
    9b4a:	6078      	str	r0, [r7, #4]
    9b4c:	000a      	movs	r2, r1
    9b4e:	1cfb      	adds	r3, r7, #3
    9b50:	701a      	strb	r2, [r3, #0]
	**pptr = c;
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	681b      	ldr	r3, [r3, #0]
    9b56:	1cfa      	adds	r2, r7, #3
    9b58:	7812      	ldrb	r2, [r2, #0]
    9b5a:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9b5c:	687b      	ldr	r3, [r7, #4]
    9b5e:	681b      	ldr	r3, [r3, #0]
    9b60:	1c5a      	adds	r2, r3, #1
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	601a      	str	r2, [r3, #0]
}
    9b66:	46c0      	nop			; (mov r8, r8)
    9b68:	46bd      	mov	sp, r7
    9b6a:	b002      	add	sp, #8
    9b6c:	bd80      	pop	{r7, pc}

00009b6e <writePacketId>:
/**
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writePacketId(unsigned char** pptr, uint16_t anInt) {
    9b6e:	b580      	push	{r7, lr}
    9b70:	b082      	sub	sp, #8
    9b72:	af00      	add	r7, sp, #0
    9b74:	6078      	str	r0, [r7, #4]
    9b76:	000a      	movs	r2, r1
    9b78:	1cbb      	adds	r3, r7, #2
    9b7a:	801a      	strh	r2, [r3, #0]
	**pptr = (unsigned char)(anInt / 256);
    9b7c:	687b      	ldr	r3, [r7, #4]
    9b7e:	681b      	ldr	r3, [r3, #0]
    9b80:	1cba      	adds	r2, r7, #2
    9b82:	8812      	ldrh	r2, [r2, #0]
    9b84:	0a12      	lsrs	r2, r2, #8
    9b86:	b292      	uxth	r2, r2
    9b88:	b2d2      	uxtb	r2, r2
    9b8a:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	1c5a      	adds	r2, r3, #1
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	681b      	ldr	r3, [r3, #0]
    9b9a:	1cba      	adds	r2, r7, #2
    9b9c:	8812      	ldrh	r2, [r2, #0]
    9b9e:	b2d2      	uxtb	r2, r2
    9ba0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	681b      	ldr	r3, [r3, #0]
    9ba6:	1c5a      	adds	r2, r3, #1
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	601a      	str	r2, [r3, #0]
}
    9bac:	46c0      	nop			; (mov r8, r8)
    9bae:	46bd      	mov	sp, r7
    9bb0:	b002      	add	sp, #8
    9bb2:	bd80      	pop	{r7, pc}

00009bb4 <writeInt>:
/**
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char **pptr, int32_t anInt) {
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	6078      	str	r0, [r7, #4]
    9bbc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	681a      	ldr	r2, [r3, #0]
    9bc2:	683b      	ldr	r3, [r7, #0]
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	da00      	bge.n	9bca <writeInt+0x16>
    9bc8:	33ff      	adds	r3, #255	; 0xff
    9bca:	121b      	asrs	r3, r3, #8
    9bcc:	b2db      	uxtb	r3, r3
    9bce:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
    9bd0:	687b      	ldr	r3, [r7, #4]
    9bd2:	681b      	ldr	r3, [r3, #0]
    9bd4:	1c5a      	adds	r2, r3, #1
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	681a      	ldr	r2, [r3, #0]
    9bde:	683b      	ldr	r3, [r7, #0]
    9be0:	4908      	ldr	r1, [pc, #32]	; (9c04 <writeInt+0x50>)
    9be2:	400b      	ands	r3, r1
    9be4:	d503      	bpl.n	9bee <writeInt+0x3a>
    9be6:	3b01      	subs	r3, #1
    9be8:	4907      	ldr	r1, [pc, #28]	; (9c08 <writeInt+0x54>)
    9bea:	430b      	orrs	r3, r1
    9bec:	3301      	adds	r3, #1
    9bee:	b2db      	uxtb	r3, r3
    9bf0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	681b      	ldr	r3, [r3, #0]
    9bf6:	1c5a      	adds	r2, r3, #1
    9bf8:	687b      	ldr	r3, [r7, #4]
    9bfa:	601a      	str	r2, [r3, #0]
}
    9bfc:	46c0      	nop			; (mov r8, r8)
    9bfe:	46bd      	mov	sp, r7
    9c00:	b002      	add	sp, #8
    9c02:	bd80      	pop	{r7, pc}
    9c04:	800000ff 	.word	0x800000ff
    9c08:	ffffff00 	.word	0xffffff00

00009c0c <writeSizeT>:
/**
 * Writes size as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeSizeT(unsigned char **pptr, size_t size) {
    9c0c:	b580      	push	{r7, lr}
    9c0e:	b082      	sub	sp, #8
    9c10:	af00      	add	r7, sp, #0
    9c12:	6078      	str	r0, [r7, #4]
    9c14:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(size / 256);
    9c16:	687b      	ldr	r3, [r7, #4]
    9c18:	681b      	ldr	r3, [r3, #0]
    9c1a:	683a      	ldr	r2, [r7, #0]
    9c1c:	0a12      	lsrs	r2, r2, #8
    9c1e:	b2d2      	uxtb	r2, r2
    9c20:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	681b      	ldr	r3, [r3, #0]
    9c26:	1c5a      	adds	r2, r3, #1
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(size % 256);
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	683a      	ldr	r2, [r7, #0]
    9c32:	b2d2      	uxtb	r2, r2
    9c34:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	681b      	ldr	r3, [r3, #0]
    9c3a:	1c5a      	adds	r2, r3, #1
    9c3c:	687b      	ldr	r3, [r7, #4]
    9c3e:	601a      	str	r2, [r3, #0]
}
    9c40:	46c0      	nop			; (mov r8, r8)
    9c42:	46bd      	mov	sp, r7
    9c44:	b002      	add	sp, #8
    9c46:	bd80      	pop	{r7, pc}

00009c48 <writeCString>:
/**
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char **pptr, const char *string) {
    9c48:	b580      	push	{r7, lr}
    9c4a:	b084      	sub	sp, #16
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
    9c50:	6039      	str	r1, [r7, #0]
	size_t len = strlen(string);
    9c52:	683b      	ldr	r3, [r7, #0]
    9c54:	0018      	movs	r0, r3
    9c56:	4b0d      	ldr	r3, [pc, #52]	; (9c8c <writeCString+0x44>)
    9c58:	4798      	blx	r3
    9c5a:	0003      	movs	r3, r0
    9c5c:	60fb      	str	r3, [r7, #12]
	writeSizeT(pptr, len);
    9c5e:	68fa      	ldr	r2, [r7, #12]
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	0011      	movs	r1, r2
    9c64:	0018      	movs	r0, r3
    9c66:	4b0a      	ldr	r3, [pc, #40]	; (9c90 <writeCString+0x48>)
    9c68:	4798      	blx	r3
	memcpy(*pptr, string, len);
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	681b      	ldr	r3, [r3, #0]
    9c6e:	68fa      	ldr	r2, [r7, #12]
    9c70:	6839      	ldr	r1, [r7, #0]
    9c72:	0018      	movs	r0, r3
    9c74:	4b07      	ldr	r3, [pc, #28]	; (9c94 <writeCString+0x4c>)
    9c76:	4798      	blx	r3
	*pptr += len;
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	681a      	ldr	r2, [r3, #0]
    9c7c:	68fb      	ldr	r3, [r7, #12]
    9c7e:	18d2      	adds	r2, r2, r3
    9c80:	687b      	ldr	r3, [r7, #4]
    9c82:	601a      	str	r2, [r3, #0]
}
    9c84:	46c0      	nop			; (mov r8, r8)
    9c86:	46bd      	mov	sp, r7
    9c88:	b004      	add	sp, #16
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	0001c02f 	.word	0x0001c02f
    9c90:	00009c0d 	.word	0x00009c0d
    9c94:	0001bab7 	.word	0x0001bab7

00009c98 <writeMQTTString>:

void writeMQTTString(unsigned char **pptr, MQTTString mqttstring) {
    9c98:	b580      	push	{r7, lr}
    9c9a:	b084      	sub	sp, #16
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	60f8      	str	r0, [r7, #12]
    9ca0:	0038      	movs	r0, r7
    9ca2:	6001      	str	r1, [r0, #0]
    9ca4:	6042      	str	r2, [r0, #4]
    9ca6:	6083      	str	r3, [r0, #8]
	if(mqttstring.lenstring.len > 0) {
    9ca8:	003b      	movs	r3, r7
    9caa:	685b      	ldr	r3, [r3, #4]
    9cac:	2b00      	cmp	r3, #0
    9cae:	d017      	beq.n	9ce0 <writeMQTTString+0x48>
		writeSizeT(pptr, mqttstring.lenstring.len);
    9cb0:	003b      	movs	r3, r7
    9cb2:	685a      	ldr	r2, [r3, #4]
    9cb4:	68fb      	ldr	r3, [r7, #12]
    9cb6:	0011      	movs	r1, r2
    9cb8:	0018      	movs	r0, r3
    9cba:	4b14      	ldr	r3, [pc, #80]	; (9d0c <writeMQTTString+0x74>)
    9cbc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    9cbe:	68fb      	ldr	r3, [r7, #12]
    9cc0:	6818      	ldr	r0, [r3, #0]
    9cc2:	003b      	movs	r3, r7
    9cc4:	6899      	ldr	r1, [r3, #8]
    9cc6:	003b      	movs	r3, r7
    9cc8:	685b      	ldr	r3, [r3, #4]
    9cca:	001a      	movs	r2, r3
    9ccc:	4b10      	ldr	r3, [pc, #64]	; (9d10 <writeMQTTString+0x78>)
    9cce:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    9cd0:	68fb      	ldr	r3, [r7, #12]
    9cd2:	681a      	ldr	r2, [r3, #0]
    9cd4:	003b      	movs	r3, r7
    9cd6:	685b      	ldr	r3, [r3, #4]
    9cd8:	18d2      	adds	r2, r2, r3
    9cda:	68fb      	ldr	r3, [r7, #12]
    9cdc:	601a      	str	r2, [r3, #0]
	} else if (mqttstring.cstring) {
		writeCString(pptr, mqttstring.cstring);
	} else {
		writeInt(pptr, 0);
	}
}
    9cde:	e010      	b.n	9d02 <writeMQTTString+0x6a>
	} else if (mqttstring.cstring) {
    9ce0:	003b      	movs	r3, r7
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d007      	beq.n	9cf8 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
    9ce8:	003b      	movs	r3, r7
    9cea:	681a      	ldr	r2, [r3, #0]
    9cec:	68fb      	ldr	r3, [r7, #12]
    9cee:	0011      	movs	r1, r2
    9cf0:	0018      	movs	r0, r3
    9cf2:	4b08      	ldr	r3, [pc, #32]	; (9d14 <writeMQTTString+0x7c>)
    9cf4:	4798      	blx	r3
}
    9cf6:	e004      	b.n	9d02 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	2100      	movs	r1, #0
    9cfc:	0018      	movs	r0, r3
    9cfe:	4b06      	ldr	r3, [pc, #24]	; (9d18 <writeMQTTString+0x80>)
    9d00:	4798      	blx	r3
}
    9d02:	46c0      	nop			; (mov r8, r8)
    9d04:	46bd      	mov	sp, r7
    9d06:	b004      	add	sp, #16
    9d08:	bd80      	pop	{r7, pc}
    9d0a:	46c0      	nop			; (mov r8, r8)
    9d0c:	00009c0d 	.word	0x00009c0d
    9d10:	0001bab7 	.word	0x0001bab7
    9d14:	00009c49 	.word	0x00009c49
    9d18:	00009bb5 	.word	0x00009bb5

00009d1c <readMQTTLenString>:
 * @param mqttstring the MQTTString structure into which the data is to be read
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return SUCCESS if successful, FAILURE if not
 */
MQTTReturnCode readMQTTLenString(MQTTString *mqttstring, unsigned char **pptr, unsigned char *enddata) {
    9d1c:	b580      	push	{r7, lr}
    9d1e:	b086      	sub	sp, #24
    9d20:	af00      	add	r7, sp, #0
    9d22:	60f8      	str	r0, [r7, #12]
    9d24:	60b9      	str	r1, [r7, #8]
    9d26:	607a      	str	r2, [r7, #4]
	MQTTReturnCode rc = FAILURE;
    9d28:	2317      	movs	r3, #23
    9d2a:	18fb      	adds	r3, r7, r3
    9d2c:	22ff      	movs	r2, #255	; 0xff
    9d2e:	701a      	strb	r2, [r3, #0]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	/* enough length to read the integer? */
	if(enddata - (*pptr) > 1) {
    9d30:	687a      	ldr	r2, [r7, #4]
    9d32:	68bb      	ldr	r3, [r7, #8]
    9d34:	681b      	ldr	r3, [r3, #0]
    9d36:	1ad3      	subs	r3, r2, r3
    9d38:	2b01      	cmp	r3, #1
    9d3a:	dd1d      	ble.n	9d78 <readMQTTLenString+0x5c>
		mqttstring->lenstring.len = readSizeT(pptr); /* increments pptr to point past length */
    9d3c:	68bb      	ldr	r3, [r7, #8]
    9d3e:	0018      	movs	r0, r3
    9d40:	4b13      	ldr	r3, [pc, #76]	; (9d90 <readMQTTLenString+0x74>)
    9d42:	4798      	blx	r3
    9d44:	0002      	movs	r2, r0
    9d46:	68fb      	ldr	r3, [r7, #12]
    9d48:	605a      	str	r2, [r3, #4]
		if(&(*pptr)[mqttstring->lenstring.len] <= enddata) {
    9d4a:	68bb      	ldr	r3, [r7, #8]
    9d4c:	681a      	ldr	r2, [r3, #0]
    9d4e:	68fb      	ldr	r3, [r7, #12]
    9d50:	685b      	ldr	r3, [r3, #4]
    9d52:	18d2      	adds	r2, r2, r3
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	429a      	cmp	r2, r3
    9d58:	d80e      	bhi.n	9d78 <readMQTTLenString+0x5c>
			mqttstring->lenstring.data = (char*)*pptr;
    9d5a:	68bb      	ldr	r3, [r7, #8]
    9d5c:	681a      	ldr	r2, [r3, #0]
    9d5e:	68fb      	ldr	r3, [r7, #12]
    9d60:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
    9d62:	68bb      	ldr	r3, [r7, #8]
    9d64:	681a      	ldr	r2, [r3, #0]
    9d66:	68fb      	ldr	r3, [r7, #12]
    9d68:	685b      	ldr	r3, [r3, #4]
    9d6a:	18d2      	adds	r2, r2, r3
    9d6c:	68bb      	ldr	r3, [r7, #8]
    9d6e:	601a      	str	r2, [r3, #0]
			rc = SUCCESS;
    9d70:	2317      	movs	r3, #23
    9d72:	18fb      	adds	r3, r7, r3
    9d74:	2200      	movs	r2, #0
    9d76:	701a      	strb	r2, [r3, #0]
		}
	}
	mqttstring->cstring = NULL;
    9d78:	68fb      	ldr	r3, [r7, #12]
    9d7a:	2200      	movs	r2, #0
    9d7c:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(rc);
	return rc;
    9d7e:	2317      	movs	r3, #23
    9d80:	18fb      	adds	r3, r7, r3
    9d82:	781b      	ldrb	r3, [r3, #0]
    9d84:	b25b      	sxtb	r3, r3
}
    9d86:	0018      	movs	r0, r3
    9d88:	46bd      	mov	sp, r7
    9d8a:	b006      	add	sp, #24
    9d8c:	bd80      	pop	{r7, pc}
    9d8e:	46c0      	nop			; (mov r8, r8)
    9d90:	00009a89 	.word	0x00009a89

00009d94 <MQTTstrlen>:
/**
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
size_t MQTTstrlen(MQTTString mqttstring) {
    9d94:	b580      	push	{r7, lr}
    9d96:	b086      	sub	sp, #24
    9d98:	af00      	add	r7, sp, #0
    9d9a:	1d3b      	adds	r3, r7, #4
    9d9c:	6018      	str	r0, [r3, #0]
    9d9e:	6059      	str	r1, [r3, #4]
    9da0:	609a      	str	r2, [r3, #8]
	size_t len = 0;
    9da2:	2300      	movs	r3, #0
    9da4:	617b      	str	r3, [r7, #20]

	if(mqttstring.cstring) {
    9da6:	1d3b      	adds	r3, r7, #4
    9da8:	681b      	ldr	r3, [r3, #0]
    9daa:	2b00      	cmp	r3, #0
    9dac:	d007      	beq.n	9dbe <MQTTstrlen+0x2a>
		len = strlen(mqttstring.cstring);
    9dae:	1d3b      	adds	r3, r7, #4
    9db0:	681b      	ldr	r3, [r3, #0]
    9db2:	0018      	movs	r0, r3
    9db4:	4b06      	ldr	r3, [pc, #24]	; (9dd0 <MQTTstrlen+0x3c>)
    9db6:	4798      	blx	r3
    9db8:	0003      	movs	r3, r0
    9dba:	617b      	str	r3, [r7, #20]
    9dbc:	e002      	b.n	9dc4 <MQTTstrlen+0x30>
	} else {
		len = mqttstring.lenstring.len;
    9dbe:	1d3b      	adds	r3, r7, #4
    9dc0:	685b      	ldr	r3, [r3, #4]
    9dc2:	617b      	str	r3, [r7, #20]
	}

	return len;
    9dc4:	697b      	ldr	r3, [r7, #20]
}
    9dc6:	0018      	movs	r0, r3
    9dc8:	46bd      	mov	sp, r7
    9dca:	b006      	add	sp, #24
    9dcc:	bd80      	pop	{r7, pc}
    9dce:	46c0      	nop			; (mov r8, r8)
    9dd0:	0001c02f 	.word	0x0001c02f

00009dd4 <MQTTPacket_equals>:
 * Compares an MQTTString to a C string
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
uint8_t MQTTPacket_equals(MQTTString *a, char *bptr) {
    9dd4:	b580      	push	{r7, lr}
    9dd6:	b086      	sub	sp, #24
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	6039      	str	r1, [r7, #0]
	size_t alen = 0;
    9dde:	2300      	movs	r3, #0
    9de0:	617b      	str	r3, [r7, #20]
	size_t	blen = 0;
    9de2:	2300      	movs	r3, #0
    9de4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if(a->cstring) {
    9de6:	687b      	ldr	r3, [r7, #4]
    9de8:	681b      	ldr	r3, [r3, #0]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d00a      	beq.n	9e04 <MQTTPacket_equals+0x30>
		aptr = a->cstring;
    9dee:	687b      	ldr	r3, [r7, #4]
    9df0:	681b      	ldr	r3, [r3, #0]
    9df2:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
    9df4:	687b      	ldr	r3, [r7, #4]
    9df6:	681b      	ldr	r3, [r3, #0]
    9df8:	0018      	movs	r0, r3
    9dfa:	4b12      	ldr	r3, [pc, #72]	; (9e44 <MQTTPacket_equals+0x70>)
    9dfc:	4798      	blx	r3
    9dfe:	0003      	movs	r3, r0
    9e00:	617b      	str	r3, [r7, #20]
    9e02:	e005      	b.n	9e10 <MQTTPacket_equals+0x3c>
	} else {
		aptr = a->lenstring.data;
    9e04:	687b      	ldr	r3, [r7, #4]
    9e06:	689b      	ldr	r3, [r3, #8]
    9e08:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	685b      	ldr	r3, [r3, #4]
    9e0e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
    9e10:	683b      	ldr	r3, [r7, #0]
    9e12:	0018      	movs	r0, r3
    9e14:	4b0b      	ldr	r3, [pc, #44]	; (9e44 <MQTTPacket_equals+0x70>)
    9e16:	4798      	blx	r3
    9e18:	0003      	movs	r3, r0
    9e1a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    9e1c:	697a      	ldr	r2, [r7, #20]
    9e1e:	68fb      	ldr	r3, [r7, #12]
    9e20:	429a      	cmp	r2, r3
    9e22:	d109      	bne.n	9e38 <MQTTPacket_equals+0x64>
    9e24:	697a      	ldr	r2, [r7, #20]
    9e26:	6839      	ldr	r1, [r7, #0]
    9e28:	693b      	ldr	r3, [r7, #16]
    9e2a:	0018      	movs	r0, r3
    9e2c:	4b06      	ldr	r3, [pc, #24]	; (9e48 <MQTTPacket_equals+0x74>)
    9e2e:	4798      	blx	r3
    9e30:	1e03      	subs	r3, r0, #0
    9e32:	d101      	bne.n	9e38 <MQTTPacket_equals+0x64>
    9e34:	2301      	movs	r3, #1
    9e36:	e000      	b.n	9e3a <MQTTPacket_equals+0x66>
    9e38:	2300      	movs	r3, #0
    9e3a:	b2db      	uxtb	r3, r3
}
    9e3c:	0018      	movs	r0, r3
    9e3e:	46bd      	mov	sp, r7
    9e40:	b006      	add	sp, #24
    9e42:	bd80      	pop	{r7, pc}
    9e44:	0001c02f 	.word	0x0001c02f
    9e48:	0001c03d 	.word	0x0001c03d

00009e4c <MQTTPacket_InitHeader>:
 * always initialized using the proper mappings. No Endianness issues here since
 * the individual fields are all less than a byte. Also generates no warnings since
 * all fields are initialized using hex constants
 */
MQTTReturnCode MQTTPacket_InitHeader(MQTTHeader *header, MessageTypes message_type,
						   QoS qos, uint8_t dup, uint8_t retained) {
    9e4c:	b590      	push	{r4, r7, lr}
    9e4e:	b083      	sub	sp, #12
    9e50:	af00      	add	r7, sp, #0
    9e52:	6078      	str	r0, [r7, #4]
    9e54:	000c      	movs	r4, r1
    9e56:	0010      	movs	r0, r2
    9e58:	0019      	movs	r1, r3
    9e5a:	1cfb      	adds	r3, r7, #3
    9e5c:	1c22      	adds	r2, r4, #0
    9e5e:	701a      	strb	r2, [r3, #0]
    9e60:	1cbb      	adds	r3, r7, #2
    9e62:	1c02      	adds	r2, r0, #0
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	1c7b      	adds	r3, r7, #1
    9e68:	1c0a      	adds	r2, r1, #0
    9e6a:	701a      	strb	r2, [r3, #0]
	if(NULL == header) {
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d102      	bne.n	9e78 <MQTTPacket_InitHeader+0x2c>
		return MQTT_NULL_VALUE_ERROR;
    9e72:	2306      	movs	r3, #6
    9e74:	425b      	negs	r3, r3
    9e76:	e0e3      	b.n	a040 <MQTTPacket_InitHeader+0x1f4>
	}

	/* Set all bits to zero */
	header->byte = 0;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	2200      	movs	r2, #0
    9e7c:	701a      	strb	r2, [r3, #0]
	switch(message_type) {
    9e7e:	1cfb      	adds	r3, r7, #3
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	b25b      	sxtb	r3, r3
    9e84:	3301      	adds	r3, #1
    9e86:	2b0f      	cmp	r3, #15
    9e88:	d900      	bls.n	9e8c <MQTTPacket_InitHeader+0x40>
    9e8a:	e08c      	b.n	9fa6 <MQTTPacket_InitHeader+0x15a>
    9e8c:	009a      	lsls	r2, r3, #2
    9e8e:	4b6e      	ldr	r3, [pc, #440]	; (a048 <MQTTPacket_InitHeader+0x1fc>)
    9e90:	18d3      	adds	r3, r2, r3
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	469f      	mov	pc, r3
		case UNKNOWN:
			/* Should never happen */
			return MQTT_UNKNOWN_ERROR;
    9e96:	2303      	movs	r3, #3
    9e98:	425b      	negs	r3, r3
    9e9a:	e0d1      	b.n	a040 <MQTTPacket_InitHeader+0x1f4>
		case CONNECT:
			header->bits.type = 0x01;
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	781a      	ldrb	r2, [r3, #0]
    9ea0:	210f      	movs	r1, #15
    9ea2:	400a      	ands	r2, r1
    9ea4:	1c11      	adds	r1, r2, #0
    9ea6:	2210      	movs	r2, #16
    9ea8:	430a      	orrs	r2, r1
    9eaa:	701a      	strb	r2, [r3, #0]
			break;
    9eac:	e07e      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case CONNACK:
			header->bits.type = 0x02;
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	781a      	ldrb	r2, [r3, #0]
    9eb2:	210f      	movs	r1, #15
    9eb4:	400a      	ands	r2, r1
    9eb6:	1c11      	adds	r1, r2, #0
    9eb8:	2220      	movs	r2, #32
    9eba:	430a      	orrs	r2, r1
    9ebc:	701a      	strb	r2, [r3, #0]
			break;
    9ebe:	e075      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PUBLISH:
			header->bits.type = 0x03;
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	781a      	ldrb	r2, [r3, #0]
    9ec4:	210f      	movs	r1, #15
    9ec6:	400a      	ands	r2, r1
    9ec8:	1c11      	adds	r1, r2, #0
    9eca:	2230      	movs	r2, #48	; 0x30
    9ecc:	430a      	orrs	r2, r1
    9ece:	701a      	strb	r2, [r3, #0]
			break;
    9ed0:	e06c      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PUBACK:
			header->bits.type = 0x04;
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	781a      	ldrb	r2, [r3, #0]
    9ed6:	210f      	movs	r1, #15
    9ed8:	400a      	ands	r2, r1
    9eda:	1c11      	adds	r1, r2, #0
    9edc:	2240      	movs	r2, #64	; 0x40
    9ede:	430a      	orrs	r2, r1
    9ee0:	701a      	strb	r2, [r3, #0]
			break;
    9ee2:	e063      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PUBREC:
			header->bits.type = 0x05;
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	781a      	ldrb	r2, [r3, #0]
    9ee8:	210f      	movs	r1, #15
    9eea:	400a      	ands	r2, r1
    9eec:	1c11      	adds	r1, r2, #0
    9eee:	2250      	movs	r2, #80	; 0x50
    9ef0:	430a      	orrs	r2, r1
    9ef2:	701a      	strb	r2, [r3, #0]
			break;
    9ef4:	e05a      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PUBREL:
			header->bits.type = 0x06;
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	781a      	ldrb	r2, [r3, #0]
    9efa:	210f      	movs	r1, #15
    9efc:	400a      	ands	r2, r1
    9efe:	1c11      	adds	r1, r2, #0
    9f00:	2260      	movs	r2, #96	; 0x60
    9f02:	430a      	orrs	r2, r1
    9f04:	701a      	strb	r2, [r3, #0]
			break;
    9f06:	e051      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PUBCOMP:
			header->bits.type = 0x07;
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	781a      	ldrb	r2, [r3, #0]
    9f0c:	210f      	movs	r1, #15
    9f0e:	400a      	ands	r2, r1
    9f10:	1c11      	adds	r1, r2, #0
    9f12:	2270      	movs	r2, #112	; 0x70
    9f14:	430a      	orrs	r2, r1
    9f16:	701a      	strb	r2, [r3, #0]
			break;
    9f18:	e048      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case SUBSCRIBE:
			header->bits.type = 0x08;
    9f1a:	687b      	ldr	r3, [r7, #4]
    9f1c:	781a      	ldrb	r2, [r3, #0]
    9f1e:	210f      	movs	r1, #15
    9f20:	400a      	ands	r2, r1
    9f22:	1c11      	adds	r1, r2, #0
    9f24:	2280      	movs	r2, #128	; 0x80
    9f26:	4252      	negs	r2, r2
    9f28:	430a      	orrs	r2, r1
    9f2a:	701a      	strb	r2, [r3, #0]
			break;
    9f2c:	e03e      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case SUBACK:
			header->bits.type = 0x09;
    9f2e:	687b      	ldr	r3, [r7, #4]
    9f30:	781a      	ldrb	r2, [r3, #0]
    9f32:	210f      	movs	r1, #15
    9f34:	400a      	ands	r2, r1
    9f36:	1c11      	adds	r1, r2, #0
    9f38:	2270      	movs	r2, #112	; 0x70
    9f3a:	4252      	negs	r2, r2
    9f3c:	430a      	orrs	r2, r1
    9f3e:	701a      	strb	r2, [r3, #0]
			break;
    9f40:	e034      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case UNSUBSCRIBE:
			header->bits.type = 0x0A;
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	781a      	ldrb	r2, [r3, #0]
    9f46:	210f      	movs	r1, #15
    9f48:	400a      	ands	r2, r1
    9f4a:	1c11      	adds	r1, r2, #0
    9f4c:	2260      	movs	r2, #96	; 0x60
    9f4e:	4252      	negs	r2, r2
    9f50:	430a      	orrs	r2, r1
    9f52:	701a      	strb	r2, [r3, #0]
			break;
    9f54:	e02a      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case UNSUBACK:
			header->bits.type = 0x0B;
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	781a      	ldrb	r2, [r3, #0]
    9f5a:	210f      	movs	r1, #15
    9f5c:	400a      	ands	r2, r1
    9f5e:	1c11      	adds	r1, r2, #0
    9f60:	2250      	movs	r2, #80	; 0x50
    9f62:	4252      	negs	r2, r2
    9f64:	430a      	orrs	r2, r1
    9f66:	701a      	strb	r2, [r3, #0]
			break;
    9f68:	e020      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PINGREQ:
			header->bits.type = 0x0C;
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	781a      	ldrb	r2, [r3, #0]
    9f6e:	210f      	movs	r1, #15
    9f70:	400a      	ands	r2, r1
    9f72:	1c11      	adds	r1, r2, #0
    9f74:	2240      	movs	r2, #64	; 0x40
    9f76:	4252      	negs	r2, r2
    9f78:	430a      	orrs	r2, r1
    9f7a:	701a      	strb	r2, [r3, #0]
			break;
    9f7c:	e016      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case PINGRESP:
			header->bits.type = 0x0D;
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	781a      	ldrb	r2, [r3, #0]
    9f82:	210f      	movs	r1, #15
    9f84:	400a      	ands	r2, r1
    9f86:	1c11      	adds	r1, r2, #0
    9f88:	2230      	movs	r2, #48	; 0x30
    9f8a:	4252      	negs	r2, r2
    9f8c:	430a      	orrs	r2, r1
    9f8e:	701a      	strb	r2, [r3, #0]
			break;
    9f90:	e00c      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		case DISCONNECT:
			header->bits.type = 0x0E;
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	781a      	ldrb	r2, [r3, #0]
    9f96:	210f      	movs	r1, #15
    9f98:	400a      	ands	r2, r1
    9f9a:	1c11      	adds	r1, r2, #0
    9f9c:	2220      	movs	r2, #32
    9f9e:	4252      	negs	r2, r2
    9fa0:	430a      	orrs	r2, r1
    9fa2:	701a      	strb	r2, [r3, #0]
			break;
    9fa4:	e002      	b.n	9fac <MQTTPacket_InitHeader+0x160>
		default:
			/* Should never happen */
			return MQTT_UNKNOWN_ERROR;
    9fa6:	2303      	movs	r3, #3
    9fa8:	425b      	negs	r3, r3
    9faa:	e049      	b.n	a040 <MQTTPacket_InitHeader+0x1f4>
	}

	header->bits.dup = (1 == dup) ? 0x01 : 0x00;
    9fac:	1c7b      	adds	r3, r7, #1
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	3b01      	subs	r3, #1
    9fb2:	425a      	negs	r2, r3
    9fb4:	4153      	adcs	r3, r2
    9fb6:	b2da      	uxtb	r2, r3
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	2101      	movs	r1, #1
    9fbc:	400a      	ands	r2, r1
    9fbe:	00d0      	lsls	r0, r2, #3
    9fc0:	781a      	ldrb	r2, [r3, #0]
    9fc2:	2108      	movs	r1, #8
    9fc4:	438a      	bics	r2, r1
    9fc6:	1c11      	adds	r1, r2, #0
    9fc8:	1c02      	adds	r2, r0, #0
    9fca:	430a      	orrs	r2, r1
    9fcc:	701a      	strb	r2, [r3, #0]
	switch(qos) {
    9fce:	1cbb      	adds	r3, r7, #2
    9fd0:	781b      	ldrb	r3, [r3, #0]
    9fd2:	2b01      	cmp	r3, #1
    9fd4:	d009      	beq.n	9fea <MQTTPacket_InitHeader+0x19e>
    9fd6:	2b02      	cmp	r3, #2
    9fd8:	d010      	beq.n	9ffc <MQTTPacket_InitHeader+0x1b0>
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d117      	bne.n	a00e <MQTTPacket_InitHeader+0x1c2>
		case QOS0:
			header->bits.qos = 0x00;
    9fde:	687b      	ldr	r3, [r7, #4]
    9fe0:	781a      	ldrb	r2, [r3, #0]
    9fe2:	2106      	movs	r1, #6
    9fe4:	438a      	bics	r2, r1
    9fe6:	701a      	strb	r2, [r3, #0]
			break;
    9fe8:	e017      	b.n	a01a <MQTTPacket_InitHeader+0x1ce>
		case QOS1:
			header->bits.qos = 0x01;
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	781a      	ldrb	r2, [r3, #0]
    9fee:	2106      	movs	r1, #6
    9ff0:	438a      	bics	r2, r1
    9ff2:	1c11      	adds	r1, r2, #0
    9ff4:	2202      	movs	r2, #2
    9ff6:	430a      	orrs	r2, r1
    9ff8:	701a      	strb	r2, [r3, #0]
			break;
    9ffa:	e00e      	b.n	a01a <MQTTPacket_InitHeader+0x1ce>
		case QOS2:
			header->bits.qos = 0x02;
    9ffc:	687b      	ldr	r3, [r7, #4]
    9ffe:	781a      	ldrb	r2, [r3, #0]
    a000:	2106      	movs	r1, #6
    a002:	438a      	bics	r2, r1
    a004:	1c11      	adds	r1, r2, #0
    a006:	2204      	movs	r2, #4
    a008:	430a      	orrs	r2, r1
    a00a:	701a      	strb	r2, [r3, #0]
			break;
    a00c:	e005      	b.n	a01a <MQTTPacket_InitHeader+0x1ce>
		default:
			/* Using QOS0 as default */
			header->bits.qos = 0x00;
    a00e:	687b      	ldr	r3, [r7, #4]
    a010:	781a      	ldrb	r2, [r3, #0]
    a012:	2106      	movs	r1, #6
    a014:	438a      	bics	r2, r1
    a016:	701a      	strb	r2, [r3, #0]
			break;
    a018:	46c0      	nop			; (mov r8, r8)
	}

	header->bits.retain = (1 == retained) ? 0x01 : 0x00;
    a01a:	2318      	movs	r3, #24
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	3b01      	subs	r3, #1
    a022:	425a      	negs	r2, r3
    a024:	4153      	adcs	r3, r2
    a026:	b2da      	uxtb	r2, r3
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	2101      	movs	r1, #1
    a02c:	400a      	ands	r2, r1
    a02e:	0010      	movs	r0, r2
    a030:	781a      	ldrb	r2, [r3, #0]
    a032:	2101      	movs	r1, #1
    a034:	438a      	bics	r2, r1
    a036:	1c11      	adds	r1, r2, #0
    a038:	1c02      	adds	r2, r0, #0
    a03a:	430a      	orrs	r2, r1
    a03c:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
    a03e:	2300      	movs	r3, #0
}
    a040:	0018      	movs	r0, r3
    a042:	46bd      	mov	sp, r7
    a044:	b003      	add	sp, #12
    a046:	bd90      	pop	{r4, r7, pc}
    a048:	0001e420 	.word	0x0001e420

0000a04c <MQTTSerialize_GetPublishLength>:
  * @param qos the MQTT QoS of the publish (packetid is omitted for QoS 0)
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
size_t MQTTSerialize_GetPublishLength(uint8_t qos, MQTTString topicName, size_t payloadlen) {
    a04c:	b590      	push	{r4, r7, lr}
    a04e:	b087      	sub	sp, #28
    a050:	af00      	add	r7, sp, #0
    a052:	0004      	movs	r4, r0
    a054:	0038      	movs	r0, r7
    a056:	6001      	str	r1, [r0, #0]
    a058:	6042      	str	r2, [r0, #4]
    a05a:	6083      	str	r3, [r0, #8]
    a05c:	230f      	movs	r3, #15
    a05e:	18fb      	adds	r3, r7, r3
    a060:	1c22      	adds	r2, r4, #0
    a062:	701a      	strb	r2, [r3, #0]
	size_t len = 0;
    a064:	2300      	movs	r3, #0
    a066:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    a068:	003b      	movs	r3, r7
    a06a:	6818      	ldr	r0, [r3, #0]
    a06c:	6859      	ldr	r1, [r3, #4]
    a06e:	689a      	ldr	r2, [r3, #8]
    a070:	4b0a      	ldr	r3, [pc, #40]	; (a09c <MQTTSerialize_GetPublishLength+0x50>)
    a072:	4798      	blx	r3
    a074:	0002      	movs	r2, r0
    a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a078:	18d3      	adds	r3, r2, r3
    a07a:	3302      	adds	r3, #2
    a07c:	697a      	ldr	r2, [r7, #20]
    a07e:	18d3      	adds	r3, r2, r3
    a080:	617b      	str	r3, [r7, #20]
	if(qos > 0) {
    a082:	230f      	movs	r3, #15
    a084:	18fb      	adds	r3, r7, r3
    a086:	781b      	ldrb	r3, [r3, #0]
    a088:	2b00      	cmp	r3, #0
    a08a:	d002      	beq.n	a092 <MQTTSerialize_GetPublishLength+0x46>
		len += 2; /* packetid */
    a08c:	697b      	ldr	r3, [r7, #20]
    a08e:	3302      	adds	r3, #2
    a090:	617b      	str	r3, [r7, #20]
	}
	return len;
    a092:	697b      	ldr	r3, [r7, #20]
}
    a094:	0018      	movs	r0, r3
    a096:	46bd      	mov	sp, r7
    a098:	b007      	add	sp, #28
    a09a:	bd90      	pop	{r4, r7, pc}
    a09c:	00009d95 	.word	0x00009d95

0000a0a0 <MQTTSerialize_publish>:
  * @return the length of the serialized data.  <= 0 indicates error
  */
MQTTReturnCode MQTTSerialize_publish(unsigned char *buf, size_t buflen, uint8_t dup,
						  QoS qos, uint8_t retained, uint16_t packetid,
						  MQTTString topicName, unsigned char *payload, size_t payloadlen,
						  uint32_t *serialized_len) {
    a0a0:	b5b0      	push	{r4, r5, r7, lr}
    a0a2:	b08a      	sub	sp, #40	; 0x28
    a0a4:	af02      	add	r7, sp, #8
    a0a6:	60f8      	str	r0, [r7, #12]
    a0a8:	60b9      	str	r1, [r7, #8]
    a0aa:	0019      	movs	r1, r3
    a0ac:	1dfb      	adds	r3, r7, #7
    a0ae:	701a      	strb	r2, [r3, #0]
    a0b0:	1dbb      	adds	r3, r7, #6
    a0b2:	1c0a      	adds	r2, r1, #0
    a0b4:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == payload || NULL == serialized_len) {
    a0b6:	68fb      	ldr	r3, [r7, #12]
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d005      	beq.n	a0c8 <MQTTSerialize_publish+0x28>
    a0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d002      	beq.n	a0c8 <MQTTSerialize_publish+0x28>
    a0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d102      	bne.n	a0ce <MQTTSerialize_publish+0x2e>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    a0c8:	2306      	movs	r3, #6
    a0ca:	425b      	negs	r3, r3
    a0cc:	e07b      	b.n	a1c6 <MQTTSerialize_publish+0x126>
	}

	unsigned char *ptr = buf;
    a0ce:	68fb      	ldr	r3, [r7, #12]
    a0d0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
    a0d2:	2300      	movs	r3, #0
    a0d4:	613b      	str	r3, [r7, #16]
	size_t rem_len = 0;
    a0d6:	2300      	movs	r3, #0
    a0d8:	61fb      	str	r3, [r7, #28]

	rem_len = MQTTSerialize_GetPublishLength(qos, topicName, payloadlen);
    a0da:	2308      	movs	r3, #8
    a0dc:	2230      	movs	r2, #48	; 0x30
    a0de:	4694      	mov	ip, r2
    a0e0:	44bc      	add	ip, r7
    a0e2:	4463      	add	r3, ip
    a0e4:	1dba      	adds	r2, r7, #6
    a0e6:	7810      	ldrb	r0, [r2, #0]
    a0e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a0ea:	9200      	str	r2, [sp, #0]
    a0ec:	6819      	ldr	r1, [r3, #0]
    a0ee:	685a      	ldr	r2, [r3, #4]
    a0f0:	689b      	ldr	r3, [r3, #8]
    a0f2:	4c37      	ldr	r4, [pc, #220]	; (a1d0 <MQTTSerialize_publish+0x130>)
    a0f4:	47a0      	blx	r4
    a0f6:	0003      	movs	r3, r0
    a0f8:	61fb      	str	r3, [r7, #28]
	if(MQTTPacket_len(rem_len) > buflen) {
    a0fa:	69fb      	ldr	r3, [r7, #28]
    a0fc:	0018      	movs	r0, r3
    a0fe:	4b35      	ldr	r3, [pc, #212]	; (a1d4 <MQTTSerialize_publish+0x134>)
    a100:	4798      	blx	r3
    a102:	0002      	movs	r2, r0
    a104:	68bb      	ldr	r3, [r7, #8]
    a106:	429a      	cmp	r2, r3
    a108:	d902      	bls.n	a110 <MQTTSerialize_publish+0x70>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    a10a:	2309      	movs	r3, #9
    a10c:	425b      	negs	r3, r3
    a10e:	e05a      	b.n	a1c6 <MQTTSerialize_publish+0x126>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, PUBLISH, qos, dup, retained);
    a110:	231b      	movs	r3, #27
    a112:	18fc      	adds	r4, r7, r3
    a114:	1dfb      	adds	r3, r7, #7
    a116:	7819      	ldrb	r1, [r3, #0]
    a118:	1dbb      	adds	r3, r7, #6
    a11a:	781a      	ldrb	r2, [r3, #0]
    a11c:	2310      	movs	r3, #16
    a11e:	18f8      	adds	r0, r7, r3
    a120:	2330      	movs	r3, #48	; 0x30
    a122:	18fb      	adds	r3, r7, r3
    a124:	781b      	ldrb	r3, [r3, #0]
    a126:	9300      	str	r3, [sp, #0]
    a128:	000b      	movs	r3, r1
    a12a:	2103      	movs	r1, #3
    a12c:	4d2a      	ldr	r5, [pc, #168]	; (a1d8 <MQTTSerialize_publish+0x138>)
    a12e:	47a8      	blx	r5
    a130:	0003      	movs	r3, r0
    a132:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    a134:	231b      	movs	r3, #27
    a136:	18fb      	adds	r3, r7, r3
    a138:	781b      	ldrb	r3, [r3, #0]
    a13a:	b25b      	sxtb	r3, r3
    a13c:	2b00      	cmp	r3, #0
    a13e:	d004      	beq.n	a14a <MQTTSerialize_publish+0xaa>
		FUNC_EXIT_RC(rc);
		return rc;
    a140:	231b      	movs	r3, #27
    a142:	18fb      	adds	r3, r7, r3
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	b25b      	sxtb	r3, r3
    a148:	e03d      	b.n	a1c6 <MQTTSerialize_publish+0x126>
	}
	writeChar(&ptr, header.byte); /* write header */
    a14a:	2310      	movs	r3, #16
    a14c:	18fb      	adds	r3, r7, r3
    a14e:	781a      	ldrb	r2, [r3, #0]
    a150:	2314      	movs	r3, #20
    a152:	18fb      	adds	r3, r7, r3
    a154:	0011      	movs	r1, r2
    a156:	0018      	movs	r0, r3
    a158:	4b20      	ldr	r3, [pc, #128]	; (a1dc <MQTTSerialize_publish+0x13c>)
    a15a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    a15c:	697b      	ldr	r3, [r7, #20]
    a15e:	69fa      	ldr	r2, [r7, #28]
    a160:	0011      	movs	r1, r2
    a162:	0018      	movs	r0, r3
    a164:	4b1e      	ldr	r3, [pc, #120]	; (a1e0 <MQTTSerialize_publish+0x140>)
    a166:	4798      	blx	r3
    a168:	0002      	movs	r2, r0
    a16a:	697b      	ldr	r3, [r7, #20]
    a16c:	189b      	adds	r3, r3, r2
    a16e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
    a170:	2308      	movs	r3, #8
    a172:	2230      	movs	r2, #48	; 0x30
    a174:	4694      	mov	ip, r2
    a176:	44bc      	add	ip, r7
    a178:	4463      	add	r3, ip
    a17a:	2214      	movs	r2, #20
    a17c:	18b8      	adds	r0, r7, r2
    a17e:	6819      	ldr	r1, [r3, #0]
    a180:	685a      	ldr	r2, [r3, #4]
    a182:	689b      	ldr	r3, [r3, #8]
    a184:	4c17      	ldr	r4, [pc, #92]	; (a1e4 <MQTTSerialize_publish+0x144>)
    a186:	47a0      	blx	r4

	if(qos > 0) {
    a188:	1dbb      	adds	r3, r7, #6
    a18a:	781b      	ldrb	r3, [r3, #0]
    a18c:	2b00      	cmp	r3, #0
    a18e:	d008      	beq.n	a1a2 <MQTTSerialize_publish+0x102>
		writeInt(&ptr, packetid);
    a190:	2334      	movs	r3, #52	; 0x34
    a192:	18fb      	adds	r3, r7, r3
    a194:	881a      	ldrh	r2, [r3, #0]
    a196:	2314      	movs	r3, #20
    a198:	18fb      	adds	r3, r7, r3
    a19a:	0011      	movs	r1, r2
    a19c:	0018      	movs	r0, r3
    a19e:	4b12      	ldr	r3, [pc, #72]	; (a1e8 <MQTTSerialize_publish+0x148>)
    a1a0:	4798      	blx	r3
	}

	memcpy(ptr, payload, payloadlen);
    a1a2:	697b      	ldr	r3, [r7, #20]
    a1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    a1a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    a1a8:	0018      	movs	r0, r3
    a1aa:	4b10      	ldr	r3, [pc, #64]	; (a1ec <MQTTSerialize_publish+0x14c>)
    a1ac:	4798      	blx	r3
	ptr += payloadlen;
    a1ae:	697a      	ldr	r2, [r7, #20]
    a1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a1b2:	18d3      	adds	r3, r2, r3
    a1b4:	617b      	str	r3, [r7, #20]

	*serialized_len = (uint32_t)(ptr - buf);
    a1b6:	697b      	ldr	r3, [r7, #20]
    a1b8:	001a      	movs	r2, r3
    a1ba:	68fb      	ldr	r3, [r7, #12]
    a1bc:	1ad3      	subs	r3, r2, r3
    a1be:	001a      	movs	r2, r3
    a1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a1c2:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    a1c4:	2300      	movs	r3, #0
}
    a1c6:	0018      	movs	r0, r3
    a1c8:	46bd      	mov	sp, r7
    a1ca:	b008      	add	sp, #32
    a1cc:	bdb0      	pop	{r4, r5, r7, pc}
    a1ce:	46c0      	nop			; (mov r8, r8)
    a1d0:	0000a04d 	.word	0x0000a04d
    a1d4:	000099c5 	.word	0x000099c5
    a1d8:	00009e4d 	.word	0x00009e4d
    a1dc:	00009b45 	.word	0x00009b45
    a1e0:	000098e1 	.word	0x000098e1
    a1e4:	00009c99 	.word	0x00009c99
    a1e8:	00009bb5 	.word	0x00009bb5
    a1ec:	0001bab7 	.word	0x0001bab7

0000a1f0 <MQTTSerialize_ack>:
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
MQTTReturnCode MQTTSerialize_ack(unsigned char *buf, size_t buflen,
					  unsigned char type, uint8_t dup, uint16_t packetid,
					  uint32_t *serialized_len) {
    a1f0:	b5b0      	push	{r4, r5, r7, lr}
    a1f2:	b08a      	sub	sp, #40	; 0x28
    a1f4:	af02      	add	r7, sp, #8
    a1f6:	60f8      	str	r0, [r7, #12]
    a1f8:	60b9      	str	r1, [r7, #8]
    a1fa:	0019      	movs	r1, r3
    a1fc:	1dfb      	adds	r3, r7, #7
    a1fe:	701a      	strb	r2, [r3, #0]
    a200:	1dbb      	adds	r3, r7, #6
    a202:	1c0a      	adds	r2, r1, #0
    a204:	701a      	strb	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || serialized_len == NULL) {
    a206:	68fb      	ldr	r3, [r7, #12]
    a208:	2b00      	cmp	r3, #0
    a20a:	d002      	beq.n	a212 <MQTTSerialize_ack+0x22>
    a20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a20e:	2b00      	cmp	r3, #0
    a210:	d102      	bne.n	a218 <MQTTSerialize_ack+0x28>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    a212:	2306      	movs	r3, #6
    a214:	425b      	negs	r3, r3
    a216:	e053      	b.n	a2c0 <MQTTSerialize_ack+0xd0>
	}

	MQTTHeader header = {0};
    a218:	2300      	movs	r3, #0
    a21a:	61bb      	str	r3, [r7, #24]
	unsigned char *ptr = buf;
    a21c:	68fb      	ldr	r3, [r7, #12]
    a21e:	617b      	str	r3, [r7, #20]

	/* Minimum byte length required by ACK headers is
	 * 2 for fixed and 2 for variable part */
	if(4 > buflen) {
    a220:	68bb      	ldr	r3, [r7, #8]
    a222:	2b03      	cmp	r3, #3
    a224:	d802      	bhi.n	a22c <MQTTSerialize_ack+0x3c>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    a226:	2309      	movs	r3, #9
    a228:	425b      	negs	r3, r3
    a22a:	e049      	b.n	a2c0 <MQTTSerialize_ack+0xd0>
	}

	QoS requestQoS = (PUBREL == type) ? QOS1 : QOS0;
    a22c:	1dfb      	adds	r3, r7, #7
    a22e:	781b      	ldrb	r3, [r3, #0]
    a230:	3b06      	subs	r3, #6
    a232:	425a      	negs	r2, r3
    a234:	4153      	adcs	r3, r2
    a236:	b2da      	uxtb	r2, r3
    a238:	231f      	movs	r3, #31
    a23a:	18fb      	adds	r3, r7, r3
    a23c:	701a      	strb	r2, [r3, #0]
	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, type, requestQoS, dup, 0);
    a23e:	1dfb      	adds	r3, r7, #7
    a240:	2100      	movs	r1, #0
    a242:	5659      	ldrsb	r1, [r3, r1]
    a244:	231e      	movs	r3, #30
    a246:	18fc      	adds	r4, r7, r3
    a248:	1dbb      	adds	r3, r7, #6
    a24a:	781d      	ldrb	r5, [r3, #0]
    a24c:	231f      	movs	r3, #31
    a24e:	18fb      	adds	r3, r7, r3
    a250:	781a      	ldrb	r2, [r3, #0]
    a252:	2318      	movs	r3, #24
    a254:	18f8      	adds	r0, r7, r3
    a256:	2300      	movs	r3, #0
    a258:	9300      	str	r3, [sp, #0]
    a25a:	002b      	movs	r3, r5
    a25c:	4d1a      	ldr	r5, [pc, #104]	; (a2c8 <MQTTSerialize_ack+0xd8>)
    a25e:	47a8      	blx	r5
    a260:	0003      	movs	r3, r0
    a262:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    a264:	231e      	movs	r3, #30
    a266:	18fb      	adds	r3, r7, r3
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	b25b      	sxtb	r3, r3
    a26c:	2b00      	cmp	r3, #0
    a26e:	d004      	beq.n	a27a <MQTTSerialize_ack+0x8a>
		FUNC_EXIT_RC(rc);
		return rc;
    a270:	231e      	movs	r3, #30
    a272:	18fb      	adds	r3, r7, r3
    a274:	781b      	ldrb	r3, [r3, #0]
    a276:	b25b      	sxtb	r3, r3
    a278:	e022      	b.n	a2c0 <MQTTSerialize_ack+0xd0>
	}
	writeChar(&ptr, header.byte); /* write header */
    a27a:	2318      	movs	r3, #24
    a27c:	18fb      	adds	r3, r7, r3
    a27e:	781a      	ldrb	r2, [r3, #0]
    a280:	2314      	movs	r3, #20
    a282:	18fb      	adds	r3, r7, r3
    a284:	0011      	movs	r1, r2
    a286:	0018      	movs	r0, r3
    a288:	4b10      	ldr	r3, [pc, #64]	; (a2cc <MQTTSerialize_ack+0xdc>)
    a28a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    a28c:	697b      	ldr	r3, [r7, #20]
    a28e:	2102      	movs	r1, #2
    a290:	0018      	movs	r0, r3
    a292:	4b0f      	ldr	r3, [pc, #60]	; (a2d0 <MQTTSerialize_ack+0xe0>)
    a294:	4798      	blx	r3
    a296:	0002      	movs	r2, r0
    a298:	697b      	ldr	r3, [r7, #20]
    a29a:	189b      	adds	r3, r3, r2
    a29c:	617b      	str	r3, [r7, #20]
	writePacketId(&ptr, packetid);
    a29e:	2330      	movs	r3, #48	; 0x30
    a2a0:	18fb      	adds	r3, r7, r3
    a2a2:	881a      	ldrh	r2, [r3, #0]
    a2a4:	2314      	movs	r3, #20
    a2a6:	18fb      	adds	r3, r7, r3
    a2a8:	0011      	movs	r1, r2
    a2aa:	0018      	movs	r0, r3
    a2ac:	4b09      	ldr	r3, [pc, #36]	; (a2d4 <MQTTSerialize_ack+0xe4>)
    a2ae:	4798      	blx	r3
	*serialized_len = (uint32_t)(ptr - buf);
    a2b0:	697b      	ldr	r3, [r7, #20]
    a2b2:	001a      	movs	r2, r3
    a2b4:	68fb      	ldr	r3, [r7, #12]
    a2b6:	1ad3      	subs	r3, r2, r3
    a2b8:	001a      	movs	r2, r3
    a2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a2bc:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    a2be:	2300      	movs	r3, #0
}
    a2c0:	0018      	movs	r0, r3
    a2c2:	46bd      	mov	sp, r7
    a2c4:	b008      	add	sp, #32
    a2c6:	bdb0      	pop	{r4, r5, r7, pc}
    a2c8:	00009e4d 	.word	0x00009e4d
    a2cc:	00009b45 	.word	0x00009b45
    a2d0:	000098e1 	.word	0x000098e1
    a2d4:	00009b6f 	.word	0x00009b6f

0000a2d8 <MQTTSerialize_GetSubscribePacketLength>:
  * Determines the length of the MQTT subscribe packet that would be produced using the supplied parameters
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
size_t MQTTSerialize_GetSubscribePacketLength(uint32_t count, MQTTString topicFilters[]) {
    a2d8:	b580      	push	{r7, lr}
    a2da:	b084      	sub	sp, #16
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
    a2e0:	6039      	str	r1, [r7, #0]
	size_t i;
	size_t len = 2; /* packetid */
    a2e2:	2302      	movs	r3, #2
    a2e4:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < count; ++i) {
    a2e6:	2300      	movs	r3, #0
    a2e8:	60fb      	str	r3, [r7, #12]
    a2ea:	e014      	b.n	a316 <MQTTSerialize_GetSubscribePacketLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    a2ec:	68fa      	ldr	r2, [r7, #12]
    a2ee:	0013      	movs	r3, r2
    a2f0:	005b      	lsls	r3, r3, #1
    a2f2:	189b      	adds	r3, r3, r2
    a2f4:	009b      	lsls	r3, r3, #2
    a2f6:	001a      	movs	r2, r3
    a2f8:	683b      	ldr	r3, [r7, #0]
    a2fa:	189b      	adds	r3, r3, r2
    a2fc:	6818      	ldr	r0, [r3, #0]
    a2fe:	6859      	ldr	r1, [r3, #4]
    a300:	689a      	ldr	r2, [r3, #8]
    a302:	4b09      	ldr	r3, [pc, #36]	; (a328 <MQTTSerialize_GetSubscribePacketLength+0x50>)
    a304:	4798      	blx	r3
    a306:	0003      	movs	r3, r0
    a308:	3303      	adds	r3, #3
    a30a:	68ba      	ldr	r2, [r7, #8]
    a30c:	18d3      	adds	r3, r2, r3
    a30e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; ++i) {
    a310:	68fb      	ldr	r3, [r7, #12]
    a312:	3301      	adds	r3, #1
    a314:	60fb      	str	r3, [r7, #12]
    a316:	68fa      	ldr	r2, [r7, #12]
    a318:	687b      	ldr	r3, [r7, #4]
    a31a:	429a      	cmp	r2, r3
    a31c:	d3e6      	bcc.n	a2ec <MQTTSerialize_GetSubscribePacketLength+0x14>
	}

	return len;
    a31e:	68bb      	ldr	r3, [r7, #8]
}
    a320:	0018      	movs	r0, r3
    a322:	46bd      	mov	sp, r7
    a324:	b004      	add	sp, #16
    a326:	bd80      	pop	{r7, pc}
    a328:	00009d95 	.word	0x00009d95

0000a32c <MQTTSerialize_subscribe>:
  * @return the length of the serialized data.  <= 0 indicates error
  */
MQTTReturnCode MQTTSerialize_subscribe(unsigned char *buf, size_t buflen,
									   unsigned char dup, uint16_t packetid, uint32_t count,
									   MQTTString topicFilters[], QoS requestedQoSs[],
									   uint32_t *serialized_len) {									
    a32c:	b5b0      	push	{r4, r5, r7, lr}
    a32e:	b08c      	sub	sp, #48	; 0x30
    a330:	af02      	add	r7, sp, #8
    a332:	60f8      	str	r0, [r7, #12]
    a334:	60b9      	str	r1, [r7, #8]
    a336:	0019      	movs	r1, r3
    a338:	1dfb      	adds	r3, r7, #7
    a33a:	701a      	strb	r2, [r3, #0]
    a33c:	1d3b      	adds	r3, r7, #4
    a33e:	1c0a      	adds	r2, r1, #0
    a340:	801a      	strh	r2, [r3, #0]
	FUNC_ENTRY;
	if(NULL == buf || NULL == serialized_len) {
    a342:	68fb      	ldr	r3, [r7, #12]
    a344:	2b00      	cmp	r3, #0
    a346:	d002      	beq.n	a34e <MQTTSerialize_subscribe+0x22>
    a348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a34a:	2b00      	cmp	r3, #0
    a34c:	d102      	bne.n	a354 <MQTTSerialize_subscribe+0x28>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    a34e:	2306      	movs	r3, #6
    a350:	425b      	negs	r3, r3
    a352:	e07a      	b.n	a44a <MQTTSerialize_subscribe+0x11e>
	}

	unsigned char *ptr = buf;
    a354:	68fb      	ldr	r3, [r7, #12]
    a356:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
    a358:	2300      	movs	r3, #0
    a35a:	617b      	str	r3, [r7, #20]
	size_t rem_len = 0;
    a35c:	2300      	movs	r3, #0
    a35e:	623b      	str	r3, [r7, #32]
	uint32_t i = 0;
    a360:	2300      	movs	r3, #0
    a362:	627b      	str	r3, [r7, #36]	; 0x24

	if(MQTTPacket_len(rem_len = MQTTSerialize_GetSubscribePacketLength(count, topicFilters)) > buflen) {
    a364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a368:	0011      	movs	r1, r2
    a36a:	0018      	movs	r0, r3
    a36c:	4b39      	ldr	r3, [pc, #228]	; (a454 <MQTTSerialize_subscribe+0x128>)
    a36e:	4798      	blx	r3
    a370:	0003      	movs	r3, r0
    a372:	623b      	str	r3, [r7, #32]
    a374:	6a3b      	ldr	r3, [r7, #32]
    a376:	0018      	movs	r0, r3
    a378:	4b37      	ldr	r3, [pc, #220]	; (a458 <MQTTSerialize_subscribe+0x12c>)
    a37a:	4798      	blx	r3
    a37c:	0002      	movs	r2, r0
    a37e:	68bb      	ldr	r3, [r7, #8]
    a380:	429a      	cmp	r2, r3
    a382:	d902      	bls.n	a38a <MQTTSerialize_subscribe+0x5e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    a384:	2309      	movs	r3, #9
    a386:	425b      	negs	r3, r3
    a388:	e05f      	b.n	a44a <MQTTSerialize_subscribe+0x11e>
	}

	MQTTReturnCode rc = MQTTPacket_InitHeader(&header, SUBSCRIBE, 1, dup, 0);
    a38a:	231f      	movs	r3, #31
    a38c:	18fc      	adds	r4, r7, r3
    a38e:	1dfb      	adds	r3, r7, #7
    a390:	781a      	ldrb	r2, [r3, #0]
    a392:	2314      	movs	r3, #20
    a394:	18f8      	adds	r0, r7, r3
    a396:	2300      	movs	r3, #0
    a398:	9300      	str	r3, [sp, #0]
    a39a:	0013      	movs	r3, r2
    a39c:	2201      	movs	r2, #1
    a39e:	2108      	movs	r1, #8
    a3a0:	4d2e      	ldr	r5, [pc, #184]	; (a45c <MQTTSerialize_subscribe+0x130>)
    a3a2:	47a8      	blx	r5
    a3a4:	0003      	movs	r3, r0
    a3a6:	7023      	strb	r3, [r4, #0]
	if(SUCCESS != rc) {
    a3a8:	231f      	movs	r3, #31
    a3aa:	18fb      	adds	r3, r7, r3
    a3ac:	781b      	ldrb	r3, [r3, #0]
    a3ae:	b25b      	sxtb	r3, r3
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d004      	beq.n	a3be <MQTTSerialize_subscribe+0x92>
		FUNC_EXIT_RC(rc);
		return rc;
    a3b4:	231f      	movs	r3, #31
    a3b6:	18fb      	adds	r3, r7, r3
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	b25b      	sxtb	r3, r3
    a3bc:	e045      	b.n	a44a <MQTTSerialize_subscribe+0x11e>
	}
	/* write header */
	writeChar(&ptr, header.byte);
    a3be:	2314      	movs	r3, #20
    a3c0:	18fb      	adds	r3, r7, r3
    a3c2:	781a      	ldrb	r2, [r3, #0]
    a3c4:	2318      	movs	r3, #24
    a3c6:	18fb      	adds	r3, r7, r3
    a3c8:	0011      	movs	r1, r2
    a3ca:	0018      	movs	r0, r3
    a3cc:	4b24      	ldr	r3, [pc, #144]	; (a460 <MQTTSerialize_subscribe+0x134>)
    a3ce:	4798      	blx	r3

	/* write remaining length */
	ptr += MQTTPacket_encode(ptr, rem_len);
    a3d0:	69bb      	ldr	r3, [r7, #24]
    a3d2:	6a3a      	ldr	r2, [r7, #32]
    a3d4:	0011      	movs	r1, r2
    a3d6:	0018      	movs	r0, r3
    a3d8:	4b22      	ldr	r3, [pc, #136]	; (a464 <MQTTSerialize_subscribe+0x138>)
    a3da:	4798      	blx	r3
    a3dc:	0002      	movs	r2, r0
    a3de:	69bb      	ldr	r3, [r7, #24]
    a3e0:	189b      	adds	r3, r3, r2
    a3e2:	61bb      	str	r3, [r7, #24]

	writePacketId(&ptr, packetid);
    a3e4:	1d3b      	adds	r3, r7, #4
    a3e6:	881a      	ldrh	r2, [r3, #0]
    a3e8:	2318      	movs	r3, #24
    a3ea:	18fb      	adds	r3, r7, r3
    a3ec:	0011      	movs	r1, r2
    a3ee:	0018      	movs	r0, r3
    a3f0:	4b1d      	ldr	r3, [pc, #116]	; (a468 <MQTTSerialize_subscribe+0x13c>)
    a3f2:	4798      	blx	r3

	for(i = 0; i < count; ++i) {
    a3f4:	2300      	movs	r3, #0
    a3f6:	627b      	str	r3, [r7, #36]	; 0x24
    a3f8:	e01b      	b.n	a432 <MQTTSerialize_subscribe+0x106>
		writeMQTTString(&ptr, topicFilters[i]);
    a3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a3fc:	0013      	movs	r3, r2
    a3fe:	005b      	lsls	r3, r3, #1
    a400:	189b      	adds	r3, r3, r2
    a402:	009b      	lsls	r3, r3, #2
    a404:	001a      	movs	r2, r3
    a406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a408:	189b      	adds	r3, r3, r2
    a40a:	2218      	movs	r2, #24
    a40c:	18b8      	adds	r0, r7, r2
    a40e:	6819      	ldr	r1, [r3, #0]
    a410:	685a      	ldr	r2, [r3, #4]
    a412:	689b      	ldr	r3, [r3, #8]
    a414:	4c15      	ldr	r4, [pc, #84]	; (a46c <MQTTSerialize_subscribe+0x140>)
    a416:	47a0      	blx	r4
		writeChar(&ptr, (unsigned char)requestedQoSs[i]);
    a418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a41c:	18d3      	adds	r3, r2, r3
    a41e:	781a      	ldrb	r2, [r3, #0]
    a420:	2318      	movs	r3, #24
    a422:	18fb      	adds	r3, r7, r3
    a424:	0011      	movs	r1, r2
    a426:	0018      	movs	r0, r3
    a428:	4b0d      	ldr	r3, [pc, #52]	; (a460 <MQTTSerialize_subscribe+0x134>)
    a42a:	4798      	blx	r3
	for(i = 0; i < count; ++i) {
    a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a42e:	3301      	adds	r3, #1
    a430:	627b      	str	r3, [r7, #36]	; 0x24
    a432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a436:	429a      	cmp	r2, r3
    a438:	d3df      	bcc.n	a3fa <MQTTSerialize_subscribe+0xce>
	}

	*serialized_len = (uint32_t)(ptr - buf);
    a43a:	69bb      	ldr	r3, [r7, #24]
    a43c:	001a      	movs	r2, r3
    a43e:	68fb      	ldr	r3, [r7, #12]
    a440:	1ad3      	subs	r3, r2, r3
    a442:	001a      	movs	r2, r3
    a444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a446:	601a      	str	r2, [r3, #0]

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    a448:	2300      	movs	r3, #0
}
    a44a:	0018      	movs	r0, r3
    a44c:	46bd      	mov	sp, r7
    a44e:	b00a      	add	sp, #40	; 0x28
    a450:	bdb0      	pop	{r4, r5, r7, pc}
    a452:	46c0      	nop			; (mov r8, r8)
    a454:	0000a2d9 	.word	0x0000a2d9
    a458:	000099c5 	.word	0x000099c5
    a45c:	00009e4d 	.word	0x00009e4d
    a460:	00009b45 	.word	0x00009b45
    a464:	000098e1 	.word	0x000098e1
    a468:	00009b6f 	.word	0x00009b6f
    a46c:	00009c99 	.word	0x00009c99

0000a470 <MQTTDeserialize_suback>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
MQTTReturnCode MQTTDeserialize_suback(uint16_t *packetid, uint32_t maxcount,
									  uint32_t *count, QoS grantedQoSs[],
									  unsigned char *buf, size_t buflen) {
    a470:	b590      	push	{r4, r7, lr}
    a472:	b08b      	sub	sp, #44	; 0x2c
    a474:	af00      	add	r7, sp, #0
    a476:	60f8      	str	r0, [r7, #12]
    a478:	60b9      	str	r1, [r7, #8]
    a47a:	607a      	str	r2, [r7, #4]
    a47c:	603b      	str	r3, [r7, #0]
	FUNC_ENTRY;
	if(NULL == packetid || NULL == count || NULL == grantedQoSs) {
    a47e:	68fb      	ldr	r3, [r7, #12]
    a480:	2b00      	cmp	r3, #0
    a482:	d005      	beq.n	a490 <MQTTDeserialize_suback+0x20>
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	2b00      	cmp	r3, #0
    a488:	d002      	beq.n	a490 <MQTTDeserialize_suback+0x20>
    a48a:	683b      	ldr	r3, [r7, #0]
    a48c:	2b00      	cmp	r3, #0
    a48e:	d102      	bne.n	a496 <MQTTDeserialize_suback+0x26>
		FUNC_EXIT_RC(MQTT_NULL_VALUE_ERROR);
		return MQTT_NULL_VALUE_ERROR;
    a490:	2306      	movs	r3, #6
    a492:	425b      	negs	r3, r3
    a494:	e077      	b.n	a586 <MQTTDeserialize_suback+0x116>
	}

	MQTTHeader header = {0};
    a496:	2300      	movs	r3, #0
    a498:	61fb      	str	r3, [r7, #28]
	unsigned char *curdata = buf;
    a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a49c:	61bb      	str	r3, [r7, #24]
	unsigned char *enddata = NULL;
    a49e:	2300      	movs	r3, #0
    a4a0:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTReturnCode decodeRc = FAILURE;
    a4a2:	2323      	movs	r3, #35	; 0x23
    a4a4:	18fb      	adds	r3, r7, r3
    a4a6:	22ff      	movs	r2, #255	; 0xff
    a4a8:	701a      	strb	r2, [r3, #0]
	uint32_t decodedLen = 0;
    a4aa:	2300      	movs	r3, #0
    a4ac:	617b      	str	r3, [r7, #20]
	uint32_t readBytesLen = 0;
    a4ae:	2300      	movs	r3, #0
    a4b0:	613b      	str	r3, [r7, #16]

	/* SUBACK header size is 4 bytes for header and at least one byte for QoS payload
	 * Need at least a 5 bytes buffer. MQTT3.1.1 specification 3.9
	 */
	if(5 > buflen) {
    a4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a4b4:	2b04      	cmp	r3, #4
    a4b6:	d802      	bhi.n	a4be <MQTTDeserialize_suback+0x4e>
		FUNC_EXIT_RC(MQTTPACKET_BUFFER_TOO_SHORT);
		return MQTTPACKET_BUFFER_TOO_SHORT;
    a4b8:	2309      	movs	r3, #9
    a4ba:	425b      	negs	r3, r3
    a4bc:	e063      	b.n	a586 <MQTTDeserialize_suback+0x116>
	}

	header.byte = readChar(&curdata);
    a4be:	2318      	movs	r3, #24
    a4c0:	18fb      	adds	r3, r7, r3
    a4c2:	0018      	movs	r0, r3
    a4c4:	4b32      	ldr	r3, [pc, #200]	; (a590 <MQTTDeserialize_suback+0x120>)
    a4c6:	4798      	blx	r3
    a4c8:	0003      	movs	r3, r0
    a4ca:	001a      	movs	r2, r3
    a4cc:	231c      	movs	r3, #28
    a4ce:	18fb      	adds	r3, r7, r3
    a4d0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK) {
    a4d2:	231c      	movs	r3, #28
    a4d4:	18fb      	adds	r3, r7, r3
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	220f      	movs	r2, #15
    a4da:	4393      	bics	r3, r2
    a4dc:	b2db      	uxtb	r3, r3
    a4de:	2b90      	cmp	r3, #144	; 0x90
    a4e0:	d002      	beq.n	a4e8 <MQTTDeserialize_suback+0x78>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    a4e2:	2301      	movs	r3, #1
    a4e4:	425b      	negs	r3, r3
    a4e6:	e04e      	b.n	a586 <MQTTDeserialize_suback+0x116>
	}

	/* read remaining length */
	decodeRc = MQTTPacket_decodeBuf(curdata, &decodedLen, &readBytesLen);
    a4e8:	69bb      	ldr	r3, [r7, #24]
    a4ea:	2223      	movs	r2, #35	; 0x23
    a4ec:	18bc      	adds	r4, r7, r2
    a4ee:	2210      	movs	r2, #16
    a4f0:	18ba      	adds	r2, r7, r2
    a4f2:	2114      	movs	r1, #20
    a4f4:	1879      	adds	r1, r7, r1
    a4f6:	0018      	movs	r0, r3
    a4f8:	4b26      	ldr	r3, [pc, #152]	; (a594 <MQTTDeserialize_suback+0x124>)
    a4fa:	4798      	blx	r3
    a4fc:	0003      	movs	r3, r0
    a4fe:	7023      	strb	r3, [r4, #0]
	if(decodeRc != SUCCESS) {
    a500:	2323      	movs	r3, #35	; 0x23
    a502:	18fb      	adds	r3, r7, r3
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	b25b      	sxtb	r3, r3
    a508:	2b00      	cmp	r3, #0
    a50a:	d004      	beq.n	a516 <MQTTDeserialize_suback+0xa6>
		return decodeRc;
    a50c:	2323      	movs	r3, #35	; 0x23
    a50e:	18fb      	adds	r3, r7, r3
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	b25b      	sxtb	r3, r3
    a514:	e037      	b.n	a586 <MQTTDeserialize_suback+0x116>
	}

	curdata += (readBytesLen);
    a516:	69ba      	ldr	r2, [r7, #24]
    a518:	693b      	ldr	r3, [r7, #16]
    a51a:	18d3      	adds	r3, r2, r3
    a51c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + decodedLen;
    a51e:	69ba      	ldr	r2, [r7, #24]
    a520:	697b      	ldr	r3, [r7, #20]
    a522:	18d3      	adds	r3, r2, r3
    a524:	627b      	str	r3, [r7, #36]	; 0x24
	if (enddata - curdata < 2) {
    a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a528:	69ba      	ldr	r2, [r7, #24]
    a52a:	1a9b      	subs	r3, r3, r2
    a52c:	2b01      	cmp	r3, #1
    a52e:	dc02      	bgt.n	a536 <MQTTDeserialize_suback+0xc6>
		FUNC_EXIT_RC(FAILURE);
		return FAILURE;
    a530:	2301      	movs	r3, #1
    a532:	425b      	negs	r3, r3
    a534:	e027      	b.n	a586 <MQTTDeserialize_suback+0x116>
	}

	*packetid = readPacketId(&curdata);
    a536:	2318      	movs	r3, #24
    a538:	18fb      	adds	r3, r7, r3
    a53a:	0018      	movs	r0, r3
    a53c:	4b16      	ldr	r3, [pc, #88]	; (a598 <MQTTDeserialize_suback+0x128>)
    a53e:	4798      	blx	r3
    a540:	0003      	movs	r3, r0
    a542:	001a      	movs	r2, r3
    a544:	68fb      	ldr	r3, [r7, #12]
    a546:	801a      	strh	r2, [r3, #0]

	*count = 0;
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	2200      	movs	r2, #0
    a54c:	601a      	str	r2, [r3, #0]
	while(curdata < enddata) {
    a54e:	e015      	b.n	a57c <MQTTDeserialize_suback+0x10c>
		if(*count > maxcount) {
    a550:	687b      	ldr	r3, [r7, #4]
    a552:	681a      	ldr	r2, [r3, #0]
    a554:	68bb      	ldr	r3, [r7, #8]
    a556:	429a      	cmp	r2, r3
    a558:	d902      	bls.n	a560 <MQTTDeserialize_suback+0xf0>
			FUNC_EXIT_RC(FAILURE);
			return FAILURE;
    a55a:	2301      	movs	r3, #1
    a55c:	425b      	negs	r3, r3
    a55e:	e012      	b.n	a586 <MQTTDeserialize_suback+0x116>
		}
		grantedQoSs[(*count)++] = (QoS)readChar(&curdata);
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	681b      	ldr	r3, [r3, #0]
    a564:	1c59      	adds	r1, r3, #1
    a566:	687a      	ldr	r2, [r7, #4]
    a568:	6011      	str	r1, [r2, #0]
    a56a:	683a      	ldr	r2, [r7, #0]
    a56c:	18d4      	adds	r4, r2, r3
    a56e:	2318      	movs	r3, #24
    a570:	18fb      	adds	r3, r7, r3
    a572:	0018      	movs	r0, r3
    a574:	4b06      	ldr	r3, [pc, #24]	; (a590 <MQTTDeserialize_suback+0x120>)
    a576:	4798      	blx	r3
    a578:	0003      	movs	r3, r0
    a57a:	7023      	strb	r3, [r4, #0]
	while(curdata < enddata) {
    a57c:	69ba      	ldr	r2, [r7, #24]
    a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a580:	429a      	cmp	r2, r3
    a582:	d3e5      	bcc.n	a550 <MQTTDeserialize_suback+0xe0>
	}

	FUNC_EXIT_RC(SUCCESS);
	return SUCCESS;
    a584:	2300      	movs	r3, #0
}
    a586:	0018      	movs	r0, r3
    a588:	46bd      	mov	sp, r7
    a58a:	b00b      	add	sp, #44	; 0x2c
    a58c:	bd90      	pop	{r4, r7, pc}
    a58e:	46c0      	nop			; (mov r8, r8)
    a590:	00009b19 	.word	0x00009b19
    a594:	00009a55 	.word	0x00009a55
    a598:	00009ac3 	.word	0x00009ac3

0000a59c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    a59c:	b580      	push	{r7, lr}
    a59e:	b082      	sub	sp, #8
    a5a0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a5a2:	f3ef 8310 	mrs	r3, PRIMASK
    a5a6:	607b      	str	r3, [r7, #4]
  return(result);
    a5a8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a5aa:	425a      	negs	r2, r3
    a5ac:	4153      	adcs	r3, r2
    a5ae:	b2db      	uxtb	r3, r3
    a5b0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a5b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    a5b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a5b8:	4b03      	ldr	r3, [pc, #12]	; (a5c8 <cpu_irq_save+0x2c>)
    a5ba:	2200      	movs	r2, #0
    a5bc:	701a      	strb	r2, [r3, #0]
	return flags;
    a5be:	683b      	ldr	r3, [r7, #0]
}
    a5c0:	0018      	movs	r0, r3
    a5c2:	46bd      	mov	sp, r7
    a5c4:	b002      	add	sp, #8
    a5c6:	bd80      	pop	{r7, pc}
    a5c8:	200005b8 	.word	0x200005b8

0000a5cc <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	b082      	sub	sp, #8
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	6078      	str	r0, [r7, #4]
	return (flags);
    a5d4:	687b      	ldr	r3, [r7, #4]
    a5d6:	1e5a      	subs	r2, r3, #1
    a5d8:	4193      	sbcs	r3, r2
    a5da:	b2db      	uxtb	r3, r3
}
    a5dc:	0018      	movs	r0, r3
    a5de:	46bd      	mov	sp, r7
    a5e0:	b002      	add	sp, #8
    a5e2:	bd80      	pop	{r7, pc}

0000a5e4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b082      	sub	sp, #8
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	0018      	movs	r0, r3
    a5f0:	4b06      	ldr	r3, [pc, #24]	; (a60c <cpu_irq_restore+0x28>)
    a5f2:	4798      	blx	r3
    a5f4:	1e03      	subs	r3, r0, #0
    a5f6:	d005      	beq.n	a604 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    a5f8:	4b05      	ldr	r3, [pc, #20]	; (a610 <cpu_irq_restore+0x2c>)
    a5fa:	2201      	movs	r2, #1
    a5fc:	701a      	strb	r2, [r3, #0]
    a5fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a602:	b662      	cpsie	i
}
    a604:	46c0      	nop			; (mov r8, r8)
    a606:	46bd      	mov	sp, r7
    a608:	b002      	add	sp, #8
    a60a:	bd80      	pop	{r7, pc}
    a60c:	0000a5cd 	.word	0x0000a5cd
    a610:	200005b8 	.word	0x200005b8

0000a614 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a614:	b580      	push	{r7, lr}
    a616:	b084      	sub	sp, #16
    a618:	af00      	add	r7, sp, #0
    a61a:	0002      	movs	r2, r0
    a61c:	1dfb      	adds	r3, r7, #7
    a61e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a620:	230f      	movs	r3, #15
    a622:	18fb      	adds	r3, r7, r3
    a624:	1dfa      	adds	r2, r7, #7
    a626:	7812      	ldrb	r2, [r2, #0]
    a628:	09d2      	lsrs	r2, r2, #7
    a62a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a62c:	230e      	movs	r3, #14
    a62e:	18fb      	adds	r3, r7, r3
    a630:	1dfa      	adds	r2, r7, #7
    a632:	7812      	ldrb	r2, [r2, #0]
    a634:	0952      	lsrs	r2, r2, #5
    a636:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a638:	4b0d      	ldr	r3, [pc, #52]	; (a670 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a63a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a63c:	230f      	movs	r3, #15
    a63e:	18fb      	adds	r3, r7, r3
    a640:	781b      	ldrb	r3, [r3, #0]
    a642:	2b00      	cmp	r3, #0
    a644:	d10f      	bne.n	a666 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a646:	230f      	movs	r3, #15
    a648:	18fb      	adds	r3, r7, r3
    a64a:	781b      	ldrb	r3, [r3, #0]
    a64c:	009b      	lsls	r3, r3, #2
    a64e:	2210      	movs	r2, #16
    a650:	4694      	mov	ip, r2
    a652:	44bc      	add	ip, r7
    a654:	4463      	add	r3, ip
    a656:	3b08      	subs	r3, #8
    a658:	681a      	ldr	r2, [r3, #0]
    a65a:	230e      	movs	r3, #14
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	01db      	lsls	r3, r3, #7
    a662:	18d3      	adds	r3, r2, r3
    a664:	e000      	b.n	a668 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a666:	2300      	movs	r3, #0
	}
}
    a668:	0018      	movs	r0, r3
    a66a:	46bd      	mov	sp, r7
    a66c:	b004      	add	sp, #16
    a66e:	bd80      	pop	{r7, pc}
    a670:	40002800 	.word	0x40002800

0000a674 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a674:	b580      	push	{r7, lr}
    a676:	b082      	sub	sp, #8
    a678:	af00      	add	r7, sp, #0
    a67a:	0002      	movs	r2, r0
    a67c:	1dfb      	adds	r3, r7, #7
    a67e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a680:	1dfb      	adds	r3, r7, #7
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	0018      	movs	r0, r3
    a686:	4b03      	ldr	r3, [pc, #12]	; (a694 <port_get_group_from_gpio_pin+0x20>)
    a688:	4798      	blx	r3
    a68a:	0003      	movs	r3, r0
}
    a68c:	0018      	movs	r0, r3
    a68e:	46bd      	mov	sp, r7
    a690:	b002      	add	sp, #8
    a692:	bd80      	pop	{r7, pc}
    a694:	0000a615 	.word	0x0000a615

0000a698 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    a698:	b580      	push	{r7, lr}
    a69a:	b082      	sub	sp, #8
    a69c:	af00      	add	r7, sp, #0
    a69e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	2200      	movs	r2, #0
    a6a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	2201      	movs	r2, #1
    a6aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	2200      	movs	r2, #0
    a6b0:	709a      	strb	r2, [r3, #2]
}
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	46bd      	mov	sp, r7
    a6b6:	b002      	add	sp, #8
    a6b8:	bd80      	pop	{r7, pc}
	...

0000a6bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    a6bc:	b580      	push	{r7, lr}
    a6be:	b084      	sub	sp, #16
    a6c0:	af00      	add	r7, sp, #0
    a6c2:	0002      	movs	r2, r0
    a6c4:	1dfb      	adds	r3, r7, #7
    a6c6:	701a      	strb	r2, [r3, #0]
    a6c8:	1dbb      	adds	r3, r7, #6
    a6ca:	1c0a      	adds	r2, r1, #0
    a6cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a6ce:	1dfb      	adds	r3, r7, #7
    a6d0:	781b      	ldrb	r3, [r3, #0]
    a6d2:	0018      	movs	r0, r3
    a6d4:	4b0d      	ldr	r3, [pc, #52]	; (a70c <port_pin_set_output_level+0x50>)
    a6d6:	4798      	blx	r3
    a6d8:	0003      	movs	r3, r0
    a6da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a6dc:	1dfb      	adds	r3, r7, #7
    a6de:	781b      	ldrb	r3, [r3, #0]
    a6e0:	221f      	movs	r2, #31
    a6e2:	4013      	ands	r3, r2
    a6e4:	2201      	movs	r2, #1
    a6e6:	409a      	lsls	r2, r3
    a6e8:	0013      	movs	r3, r2
    a6ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    a6ec:	1dbb      	adds	r3, r7, #6
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d003      	beq.n	a6fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    a6f4:	68fb      	ldr	r3, [r7, #12]
    a6f6:	68ba      	ldr	r2, [r7, #8]
    a6f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    a6fa:	e002      	b.n	a702 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    a6fc:	68fb      	ldr	r3, [r7, #12]
    a6fe:	68ba      	ldr	r2, [r7, #8]
    a700:	615a      	str	r2, [r3, #20]
}
    a702:	46c0      	nop			; (mov r8, r8)
    a704:	46bd      	mov	sp, r7
    a706:	b004      	add	sp, #16
    a708:	bd80      	pop	{r7, pc}
    a70a:	46c0      	nop			; (mov r8, r8)
    a70c:	0000a675 	.word	0x0000a675

0000a710 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    a710:	b580      	push	{r7, lr}
    a712:	b084      	sub	sp, #16
    a714:	af00      	add	r7, sp, #0
    a716:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    a71e:	68fb      	ldr	r3, [r7, #12]
    a720:	69db      	ldr	r3, [r3, #28]
    a722:	1e5a      	subs	r2, r3, #1
    a724:	4193      	sbcs	r3, r2
    a726:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    a728:	0018      	movs	r0, r3
    a72a:	46bd      	mov	sp, r7
    a72c:	b004      	add	sp, #16
    a72e:	bd80      	pop	{r7, pc}

0000a730 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    a730:	b580      	push	{r7, lr}
    a732:	b082      	sub	sp, #8
    a734:	af00      	add	r7, sp, #0
    a736:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	2201      	movs	r2, #1
    a73c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    a73e:	687b      	ldr	r3, [r7, #4]
    a740:	2200      	movs	r2, #0
    a742:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	2200      	movs	r2, #0
    a748:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    a74a:	687b      	ldr	r3, [r7, #4]
    a74c:	22c0      	movs	r2, #192	; 0xc0
    a74e:	0392      	lsls	r2, r2, #14
    a750:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    a752:	687b      	ldr	r3, [r7, #4]
    a754:	2200      	movs	r2, #0
    a756:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    a758:	687b      	ldr	r3, [r7, #4]
    a75a:	2200      	movs	r2, #0
    a75c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    a75e:	687b      	ldr	r3, [r7, #4]
    a760:	2201      	movs	r2, #1
    a762:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    a764:	687b      	ldr	r3, [r7, #4]
    a766:	2201      	movs	r2, #1
    a768:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    a76a:	687b      	ldr	r3, [r7, #4]
    a76c:	2200      	movs	r2, #0
    a76e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    a770:	687b      	ldr	r3, [r7, #4]
    a772:	2224      	movs	r2, #36	; 0x24
    a774:	2100      	movs	r1, #0
    a776:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    a778:	687b      	ldr	r3, [r7, #4]
    a77a:	3318      	adds	r3, #24
    a77c:	220c      	movs	r2, #12
    a77e:	2100      	movs	r1, #0
    a780:	0018      	movs	r0, r3
    a782:	4b0a      	ldr	r3, [pc, #40]	; (a7ac <spi_get_config_defaults+0x7c>)
    a784:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	4a09      	ldr	r2, [pc, #36]	; (a7b0 <spi_get_config_defaults+0x80>)
    a78a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    a78c:	687b      	ldr	r3, [r7, #4]
    a78e:	2200      	movs	r2, #0
    a790:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	2200      	movs	r2, #0
    a796:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	2200      	movs	r2, #0
    a79c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	2200      	movs	r2, #0
    a7a2:	635a      	str	r2, [r3, #52]	; 0x34

};
    a7a4:	46c0      	nop			; (mov r8, r8)
    a7a6:	46bd      	mov	sp, r7
    a7a8:	b002      	add	sp, #8
    a7aa:	bd80      	pop	{r7, pc}
    a7ac:	0001baed 	.word	0x0001baed
    a7b0:	000186a0 	.word	0x000186a0

0000a7b4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    a7bc:	687b      	ldr	r3, [r7, #4]
    a7be:	220a      	movs	r2, #10
    a7c0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	2200      	movs	r2, #0
    a7c6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	2200      	movs	r2, #0
    a7cc:	709a      	strb	r2, [r3, #2]
}
    a7ce:	46c0      	nop			; (mov r8, r8)
    a7d0:	46bd      	mov	sp, r7
    a7d2:	b002      	add	sp, #8
    a7d4:	bd80      	pop	{r7, pc}
	...

0000a7d8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b084      	sub	sp, #16
    a7dc:	af00      	add	r7, sp, #0
    a7de:	6078      	str	r0, [r7, #4]
    a7e0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    a7e2:	683b      	ldr	r3, [r7, #0]
    a7e4:	781a      	ldrb	r2, [r3, #0]
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    a7ea:	683b      	ldr	r3, [r7, #0]
    a7ec:	785a      	ldrb	r2, [r3, #1]
    a7ee:	687b      	ldr	r3, [r7, #4]
    a7f0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    a7f2:	683b      	ldr	r3, [r7, #0]
    a7f4:	789a      	ldrb	r2, [r3, #2]
    a7f6:	687b      	ldr	r3, [r7, #4]
    a7f8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    a7fa:	230c      	movs	r3, #12
    a7fc:	18fb      	adds	r3, r7, r3
    a7fe:	0018      	movs	r0, r3
    a800:	4b0b      	ldr	r3, [pc, #44]	; (a830 <spi_attach_slave+0x58>)
    a802:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    a804:	230c      	movs	r3, #12
    a806:	18fb      	adds	r3, r7, r3
    a808:	2201      	movs	r2, #1
    a80a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	781b      	ldrb	r3, [r3, #0]
    a810:	220c      	movs	r2, #12
    a812:	18ba      	adds	r2, r7, r2
    a814:	0011      	movs	r1, r2
    a816:	0018      	movs	r0, r3
    a818:	4b06      	ldr	r3, [pc, #24]	; (a834 <spi_attach_slave+0x5c>)
    a81a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	781b      	ldrb	r3, [r3, #0]
    a820:	2101      	movs	r1, #1
    a822:	0018      	movs	r0, r3
    a824:	4b04      	ldr	r3, [pc, #16]	; (a838 <spi_attach_slave+0x60>)
    a826:	4798      	blx	r3
}
    a828:	46c0      	nop			; (mov r8, r8)
    a82a:	46bd      	mov	sp, r7
    a82c:	b004      	add	sp, #16
    a82e:	bd80      	pop	{r7, pc}
    a830:	0000a699 	.word	0x0000a699
    a834:	00013101 	.word	0x00013101
    a838:	0000a6bd 	.word	0x0000a6bd

0000a83c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b084      	sub	sp, #16
    a840:	af00      	add	r7, sp, #0
    a842:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a844:	687b      	ldr	r3, [r7, #4]
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	0018      	movs	r0, r3
    a850:	4b06      	ldr	r3, [pc, #24]	; (a86c <spi_enable+0x30>)
    a852:	4798      	blx	r3
    a854:	1e03      	subs	r3, r0, #0
    a856:	d1f9      	bne.n	a84c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a858:	68fb      	ldr	r3, [r7, #12]
    a85a:	681b      	ldr	r3, [r3, #0]
    a85c:	2202      	movs	r2, #2
    a85e:	431a      	orrs	r2, r3
    a860:	68fb      	ldr	r3, [r7, #12]
    a862:	601a      	str	r2, [r3, #0]
}
    a864:	46c0      	nop			; (mov r8, r8)
    a866:	46bd      	mov	sp, r7
    a868:	b004      	add	sp, #16
    a86a:	bd80      	pop	{r7, pc}
    a86c:	0000a711 	.word	0x0000a711

0000a870 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    a870:	b580      	push	{r7, lr}
    a872:	b084      	sub	sp, #16
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a878:	687b      	ldr	r3, [r7, #4]
    a87a:	681b      	ldr	r3, [r3, #0]
    a87c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    a87e:	68fb      	ldr	r3, [r7, #12]
    a880:	7e1b      	ldrb	r3, [r3, #24]
    a882:	b2db      	uxtb	r3, r3
    a884:	001a      	movs	r2, r3
    a886:	2302      	movs	r3, #2
    a888:	4013      	ands	r3, r2
    a88a:	1e5a      	subs	r2, r3, #1
    a88c:	4193      	sbcs	r3, r2
    a88e:	b2db      	uxtb	r3, r3
}
    a890:	0018      	movs	r0, r3
    a892:	46bd      	mov	sp, r7
    a894:	b004      	add	sp, #16
    a896:	bd80      	pop	{r7, pc}

0000a898 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    a898:	b580      	push	{r7, lr}
    a89a:	b084      	sub	sp, #16
    a89c:	af00      	add	r7, sp, #0
    a89e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a8a0:	687b      	ldr	r3, [r7, #4]
    a8a2:	681b      	ldr	r3, [r3, #0]
    a8a4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    a8a6:	68fb      	ldr	r3, [r7, #12]
    a8a8:	7e1b      	ldrb	r3, [r3, #24]
    a8aa:	b2db      	uxtb	r3, r3
    a8ac:	001a      	movs	r2, r3
    a8ae:	2301      	movs	r3, #1
    a8b0:	4013      	ands	r3, r2
    a8b2:	1e5a      	subs	r2, r3, #1
    a8b4:	4193      	sbcs	r3, r2
    a8b6:	b2db      	uxtb	r3, r3
}
    a8b8:	0018      	movs	r0, r3
    a8ba:	46bd      	mov	sp, r7
    a8bc:	b004      	add	sp, #16
    a8be:	bd80      	pop	{r7, pc}

0000a8c0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	b084      	sub	sp, #16
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	681b      	ldr	r3, [r3, #0]
    a8cc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    a8ce:	68fb      	ldr	r3, [r7, #12]
    a8d0:	7e1b      	ldrb	r3, [r3, #24]
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	001a      	movs	r2, r3
    a8d6:	2304      	movs	r3, #4
    a8d8:	4013      	ands	r3, r2
    a8da:	1e5a      	subs	r2, r3, #1
    a8dc:	4193      	sbcs	r3, r2
    a8de:	b2db      	uxtb	r3, r3
}
    a8e0:	0018      	movs	r0, r3
    a8e2:	46bd      	mov	sp, r7
    a8e4:	b004      	add	sp, #16
    a8e6:	bd80      	pop	{r7, pc}

0000a8e8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    a8e8:	b580      	push	{r7, lr}
    a8ea:	b084      	sub	sp, #16
    a8ec:	af00      	add	r7, sp, #0
    a8ee:	6078      	str	r0, [r7, #4]
    a8f0:	000a      	movs	r2, r1
    a8f2:	1cbb      	adds	r3, r7, #2
    a8f4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a8f6:	687b      	ldr	r3, [r7, #4]
    a8f8:	681b      	ldr	r3, [r3, #0]
    a8fa:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	0018      	movs	r0, r3
    a900:	4b0a      	ldr	r3, [pc, #40]	; (a92c <spi_write+0x44>)
    a902:	4798      	blx	r3
    a904:	0003      	movs	r3, r0
    a906:	001a      	movs	r2, r3
    a908:	2301      	movs	r3, #1
    a90a:	4053      	eors	r3, r2
    a90c:	b2db      	uxtb	r3, r3
    a90e:	2b00      	cmp	r3, #0
    a910:	d001      	beq.n	a916 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    a912:	2305      	movs	r3, #5
    a914:	e006      	b.n	a924 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    a916:	1cbb      	adds	r3, r7, #2
    a918:	881b      	ldrh	r3, [r3, #0]
    a91a:	05db      	lsls	r3, r3, #23
    a91c:	0dda      	lsrs	r2, r3, #23
    a91e:	68fb      	ldr	r3, [r7, #12]
    a920:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    a922:	2300      	movs	r3, #0
}
    a924:	0018      	movs	r0, r3
    a926:	46bd      	mov	sp, r7
    a928:	b004      	add	sp, #16
    a92a:	bd80      	pop	{r7, pc}
    a92c:	0000a899 	.word	0x0000a899

0000a930 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    a930:	b580      	push	{r7, lr}
    a932:	b084      	sub	sp, #16
    a934:	af00      	add	r7, sp, #0
    a936:	6078      	str	r0, [r7, #4]
    a938:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a93a:	687b      	ldr	r3, [r7, #4]
    a93c:	681b      	ldr	r3, [r3, #0]
    a93e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    a940:	687b      	ldr	r3, [r7, #4]
    a942:	0018      	movs	r0, r3
    a944:	4b1b      	ldr	r3, [pc, #108]	; (a9b4 <spi_read+0x84>)
    a946:	4798      	blx	r3
    a948:	0003      	movs	r3, r0
    a94a:	001a      	movs	r2, r3
    a94c:	2301      	movs	r3, #1
    a94e:	4053      	eors	r3, r2
    a950:	b2db      	uxtb	r3, r3
    a952:	2b00      	cmp	r3, #0
    a954:	d001      	beq.n	a95a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    a956:	2310      	movs	r3, #16
    a958:	e027      	b.n	a9aa <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    a95a:	230f      	movs	r3, #15
    a95c:	18fb      	adds	r3, r7, r3
    a95e:	2200      	movs	r2, #0
    a960:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a962:	68bb      	ldr	r3, [r7, #8]
    a964:	8b5b      	ldrh	r3, [r3, #26]
    a966:	b29b      	uxth	r3, r3
    a968:	001a      	movs	r2, r3
    a96a:	2304      	movs	r3, #4
    a96c:	4013      	ands	r3, r2
    a96e:	d006      	beq.n	a97e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    a970:	230f      	movs	r3, #15
    a972:	18fb      	adds	r3, r7, r3
    a974:	221e      	movs	r2, #30
    a976:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a978:	68bb      	ldr	r3, [r7, #8]
    a97a:	2204      	movs	r2, #4
    a97c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a97e:	687b      	ldr	r3, [r7, #4]
    a980:	799b      	ldrb	r3, [r3, #6]
    a982:	2b01      	cmp	r3, #1
    a984:	d108      	bne.n	a998 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    a986:	68bb      	ldr	r3, [r7, #8]
    a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a98a:	b29b      	uxth	r3, r3
    a98c:	05db      	lsls	r3, r3, #23
    a98e:	0ddb      	lsrs	r3, r3, #23
    a990:	b29a      	uxth	r2, r3
    a992:	683b      	ldr	r3, [r7, #0]
    a994:	801a      	strh	r2, [r3, #0]
    a996:	e005      	b.n	a9a4 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    a998:	68bb      	ldr	r3, [r7, #8]
    a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a99c:	b2db      	uxtb	r3, r3
    a99e:	b29a      	uxth	r2, r3
    a9a0:	683b      	ldr	r3, [r7, #0]
    a9a2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    a9a4:	230f      	movs	r3, #15
    a9a6:	18fb      	adds	r3, r7, r3
    a9a8:	781b      	ldrb	r3, [r3, #0]
}
    a9aa:	0018      	movs	r0, r3
    a9ac:	46bd      	mov	sp, r7
    a9ae:	b004      	add	sp, #16
    a9b0:	bd80      	pop	{r7, pc}
    a9b2:	46c0      	nop			; (mov r8, r8)
    a9b4:	0000a8c1 	.word	0x0000a8c1

0000a9b8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b084      	sub	sp, #16
    a9bc:	af00      	add	r7, sp, #0
    a9be:	0002      	movs	r2, r0
    a9c0:	1dfb      	adds	r3, r7, #7
    a9c2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    a9c4:	230f      	movs	r3, #15
    a9c6:	18fb      	adds	r3, r7, r3
    a9c8:	1dfa      	adds	r2, r7, #7
    a9ca:	7812      	ldrb	r2, [r2, #0]
    a9cc:	0952      	lsrs	r2, r2, #5
    a9ce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    a9d0:	230f      	movs	r3, #15
    a9d2:	18fb      	adds	r3, r7, r3
    a9d4:	781b      	ldrb	r3, [r3, #0]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d10c      	bne.n	a9f4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    a9da:	4b09      	ldr	r3, [pc, #36]	; (aa00 <_extint_get_eic_from_channel+0x48>)
    a9dc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    a9de:	230f      	movs	r3, #15
    a9e0:	18fb      	adds	r3, r7, r3
    a9e2:	781b      	ldrb	r3, [r3, #0]
    a9e4:	009b      	lsls	r3, r3, #2
    a9e6:	2210      	movs	r2, #16
    a9e8:	4694      	mov	ip, r2
    a9ea:	44bc      	add	ip, r7
    a9ec:	4463      	add	r3, ip
    a9ee:	3b08      	subs	r3, #8
    a9f0:	681b      	ldr	r3, [r3, #0]
    a9f2:	e000      	b.n	a9f6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    a9f4:	2300      	movs	r3, #0
	}
}
    a9f6:	0018      	movs	r0, r3
    a9f8:	46bd      	mov	sp, r7
    a9fa:	b004      	add	sp, #16
    a9fc:	bd80      	pop	{r7, pc}
    a9fe:	46c0      	nop			; (mov r8, r8)
    aa00:	40002400 	.word	0x40002400

0000aa04 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    aa04:	b580      	push	{r7, lr}
    aa06:	b084      	sub	sp, #16
    aa08:	af00      	add	r7, sp, #0
    aa0a:	0002      	movs	r2, r0
    aa0c:	1dfb      	adds	r3, r7, #7
    aa0e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    aa10:	1dfb      	adds	r3, r7, #7
    aa12:	781b      	ldrb	r3, [r3, #0]
    aa14:	0018      	movs	r0, r3
    aa16:	4b09      	ldr	r3, [pc, #36]	; (aa3c <extint_chan_clear_detected+0x38>)
    aa18:	4798      	blx	r3
    aa1a:	0003      	movs	r3, r0
    aa1c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    aa1e:	1dfb      	adds	r3, r7, #7
    aa20:	781b      	ldrb	r3, [r3, #0]
    aa22:	221f      	movs	r2, #31
    aa24:	4013      	ands	r3, r2
    aa26:	2201      	movs	r2, #1
    aa28:	409a      	lsls	r2, r3
    aa2a:	0013      	movs	r3, r2
    aa2c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    aa2e:	68fb      	ldr	r3, [r7, #12]
    aa30:	68ba      	ldr	r2, [r7, #8]
    aa32:	615a      	str	r2, [r3, #20]
}
    aa34:	46c0      	nop			; (mov r8, r8)
    aa36:	46bd      	mov	sp, r7
    aa38:	b004      	add	sp, #16
    aa3a:	bd80      	pop	{r7, pc}
    aa3c:	0000a9b9 	.word	0x0000a9b9

0000aa40 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    aa40:	b580      	push	{r7, lr}
    aa42:	af00      	add	r7, sp, #0
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
    aa44:	2000      	movs	r0, #0
    aa46:	4b03      	ldr	r3, [pc, #12]	; (aa54 <AT86RFX_ISR+0x14>)
    aa48:	4798      	blx	r3
	PHY_PacketReceieved();
    aa4a:	4b03      	ldr	r3, [pc, #12]	; (aa58 <AT86RFX_ISR+0x18>)
    aa4c:	4798      	blx	r3

}
    aa4e:	46c0      	nop			; (mov r8, r8)
    aa50:	46bd      	mov	sp, r7
    aa52:	bd80      	pop	{r7, pc}
    aa54:	0000aa05 	.word	0x0000aa05
    aa58:	000114c9 	.word	0x000114c9

0000aa5c <trx_spi_init>:

void trx_spi_init(void)
{
    aa5c:	b580      	push	{r7, lr}
    aa5e:	b084      	sub	sp, #16
    aa60:	af00      	add	r7, sp, #0
	/* Initialize SPI in master_1 mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    aa62:	4b2a      	ldr	r3, [pc, #168]	; (ab0c <trx_spi_init+0xb0>)
    aa64:	0018      	movs	r0, r3
    aa66:	4b2a      	ldr	r3, [pc, #168]	; (ab10 <trx_spi_init+0xb4>)
    aa68:	4798      	blx	r3
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    aa6a:	4b28      	ldr	r3, [pc, #160]	; (ab0c <trx_spi_init+0xb0>)
    aa6c:	223f      	movs	r2, #63	; 0x3f
    aa6e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    aa70:	4a26      	ldr	r2, [pc, #152]	; (ab0c <trx_spi_init+0xb0>)
    aa72:	4b28      	ldr	r3, [pc, #160]	; (ab14 <trx_spi_init+0xb8>)
    aa74:	0011      	movs	r1, r2
    aa76:	0018      	movs	r0, r3
    aa78:	4b27      	ldr	r3, [pc, #156]	; (ab18 <trx_spi_init+0xbc>)
    aa7a:	4798      	blx	r3
	spi_get_config_defaults(&config);
    aa7c:	4b27      	ldr	r3, [pc, #156]	; (ab1c <trx_spi_init+0xc0>)
    aa7e:	0018      	movs	r0, r3
    aa80:	4b27      	ldr	r3, [pc, #156]	; (ab20 <trx_spi_init+0xc4>)
    aa82:	4798      	blx	r3
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    aa84:	4b25      	ldr	r3, [pc, #148]	; (ab1c <trx_spi_init+0xc0>)
    aa86:	2280      	movs	r2, #128	; 0x80
    aa88:	0252      	lsls	r2, r2, #9
    aa8a:	60da      	str	r2, [r3, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    aa8c:	4b23      	ldr	r3, [pc, #140]	; (ab1c <trx_spi_init+0xc0>)
    aa8e:	4a25      	ldr	r2, [pc, #148]	; (ab24 <trx_spi_init+0xc8>)
    aa90:	619a      	str	r2, [r3, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    aa92:	4b22      	ldr	r3, [pc, #136]	; (ab1c <trx_spi_init+0xc0>)
    aa94:	4a24      	ldr	r2, [pc, #144]	; (ab28 <trx_spi_init+0xcc>)
    aa96:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    aa98:	4b20      	ldr	r3, [pc, #128]	; (ab1c <trx_spi_init+0xc0>)
    aa9a:	2201      	movs	r2, #1
    aa9c:	4252      	negs	r2, r2
    aa9e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    aaa0:	4b1e      	ldr	r3, [pc, #120]	; (ab1c <trx_spi_init+0xc0>)
    aaa2:	4a22      	ldr	r2, [pc, #136]	; (ab2c <trx_spi_init+0xd0>)
    aaa4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    aaa6:	4b1d      	ldr	r3, [pc, #116]	; (ab1c <trx_spi_init+0xc0>)
    aaa8:	4a21      	ldr	r2, [pc, #132]	; (ab30 <trx_spi_init+0xd4>)
    aaaa:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&master_1, AT86RFX_SPI, &config);
    aaac:	4a1b      	ldr	r2, [pc, #108]	; (ab1c <trx_spi_init+0xc0>)
    aaae:	4921      	ldr	r1, [pc, #132]	; (ab34 <trx_spi_init+0xd8>)
    aab0:	4b21      	ldr	r3, [pc, #132]	; (ab38 <trx_spi_init+0xdc>)
    aab2:	0018      	movs	r0, r3
    aab4:	4b21      	ldr	r3, [pc, #132]	; (ab3c <trx_spi_init+0xe0>)
    aab6:	4798      	blx	r3
	spi_enable(&master_1);
    aab8:	4b1f      	ldr	r3, [pc, #124]	; (ab38 <trx_spi_init+0xdc>)
    aaba:	0018      	movs	r0, r3
    aabc:	4b20      	ldr	r3, [pc, #128]	; (ab40 <trx_spi_init+0xe4>)
    aabe:	4798      	blx	r3

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    aac0:	1d3b      	adds	r3, r7, #4
    aac2:	0018      	movs	r0, r3
    aac4:	4b1f      	ldr	r3, [pc, #124]	; (ab44 <trx_spi_init+0xe8>)
    aac6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    aac8:	1d3b      	adds	r3, r7, #4
    aaca:	2220      	movs	r2, #32
    aacc:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    aace:	1d3b      	adds	r3, r7, #4
    aad0:	2280      	movs	r2, #128	; 0x80
    aad2:	0392      	lsls	r2, r2, #14
    aad4:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    aad6:	1d3b      	adds	r3, r7, #4
    aad8:	2202      	movs	r2, #2
    aada:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    aadc:	1d3b      	adds	r3, r7, #4
    aade:	2200      	movs	r2, #0
    aae0:	725a      	strb	r2, [r3, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    aae2:	1d3b      	adds	r3, r7, #4
    aae4:	2200      	movs	r2, #0
    aae6:	729a      	strb	r2, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    aae8:	1d3b      	adds	r3, r7, #4
    aaea:	2201      	movs	r2, #1
    aaec:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    aaee:	1d3b      	adds	r3, r7, #4
    aaf0:	0019      	movs	r1, r3
    aaf2:	2000      	movs	r0, #0
    aaf4:	4b14      	ldr	r3, [pc, #80]	; (ab48 <trx_spi_init+0xec>)
    aaf6:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    aaf8:	4b14      	ldr	r3, [pc, #80]	; (ab4c <trx_spi_init+0xf0>)
    aafa:	2200      	movs	r2, #0
    aafc:	2100      	movs	r1, #0
    aafe:	0018      	movs	r0, r3
    ab00:	4b13      	ldr	r3, [pc, #76]	; (ab50 <trx_spi_init+0xf4>)
    ab02:	4798      	blx	r3
	spi_master_1_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    ab04:	46c0      	nop			; (mov r8, r8)
    ab06:	46bd      	mov	sp, r7
    ab08:	b004      	add	sp, #16
    ab0a:	bd80      	pop	{r7, pc}
    ab0c:	20001a94 	.word	0x20001a94
    ab10:	0000a7b5 	.word	0x0000a7b5
    ab14:	20001a98 	.word	0x20001a98
    ab18:	0000a7d9 	.word	0x0000a7d9
    ab1c:	20001a9c 	.word	0x20001a9c
    ab20:	0000a731 	.word	0x0000a731
    ab24:	003d0900 	.word	0x003d0900
    ab28:	00530005 	.word	0x00530005
    ab2c:	003e0005 	.word	0x003e0005
    ab30:	00520005 	.word	0x00520005
    ab34:	42001000 	.word	0x42001000
    ab38:	20001a84 	.word	0x20001a84
    ab3c:	00014cd5 	.word	0x00014cd5
    ab40:	0000a83d 	.word	0x0000a83d
    ab44:	00012f91 	.word	0x00012f91
    ab48:	00012fc5 	.word	0x00012fc5
    ab4c:	0000aa41 	.word	0x0000aa41
    ab50:	00012ac9 	.word	0x00012ac9

0000ab54 <PhyReset>:

void PhyReset(void)
{
    ab54:	b580      	push	{r7, lr}
    ab56:	af00      	add	r7, sp, #0
	/* Ensure control lines have correct levels. */
	RST_HIGH();
    ab58:	2101      	movs	r1, #1
    ab5a:	202f      	movs	r0, #47	; 0x2f
    ab5c:	4b0c      	ldr	r3, [pc, #48]	; (ab90 <PhyReset+0x3c>)
    ab5e:	4798      	blx	r3
	SLP_TR_LOW();
    ab60:	2100      	movs	r1, #0
    ab62:	2014      	movs	r0, #20
    ab64:	4b0a      	ldr	r3, [pc, #40]	; (ab90 <PhyReset+0x3c>)
    ab66:	4798      	blx	r3

	/* Wait typical time of timer TR1. */
	delay_us(330);
    ab68:	23a5      	movs	r3, #165	; 0xa5
    ab6a:	005b      	lsls	r3, r3, #1
    ab6c:	0018      	movs	r0, r3
    ab6e:	4b09      	ldr	r3, [pc, #36]	; (ab94 <PhyReset+0x40>)
    ab70:	4798      	blx	r3

	RST_LOW();
    ab72:	2100      	movs	r1, #0
    ab74:	202f      	movs	r0, #47	; 0x2f
    ab76:	4b06      	ldr	r3, [pc, #24]	; (ab90 <PhyReset+0x3c>)
    ab78:	4798      	blx	r3
	delay_us(10);
    ab7a:	200a      	movs	r0, #10
    ab7c:	4b05      	ldr	r3, [pc, #20]	; (ab94 <PhyReset+0x40>)
    ab7e:	4798      	blx	r3
	RST_HIGH();
    ab80:	2101      	movs	r1, #1
    ab82:	202f      	movs	r0, #47	; 0x2f
    ab84:	4b02      	ldr	r3, [pc, #8]	; (ab90 <PhyReset+0x3c>)
    ab86:	4798      	blx	r3
}
    ab88:	46c0      	nop			; (mov r8, r8)
    ab8a:	46bd      	mov	sp, r7
    ab8c:	bd80      	pop	{r7, pc}
    ab8e:	46c0      	nop			; (mov r8, r8)
    ab90:	0000a6bd 	.word	0x0000a6bd
    ab94:	000126cd 	.word	0x000126cd

0000ab98 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    ab98:	b580      	push	{r7, lr}
    ab9a:	b084      	sub	sp, #16
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	0002      	movs	r2, r0
    aba0:	1dfb      	adds	r3, r7, #7
    aba2:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    aba4:	230c      	movs	r3, #12
    aba6:	18fb      	adds	r3, r7, r3
    aba8:	2200      	movs	r2, #0
    abaa:	801a      	strh	r2, [r3, #0]
	uint8_t register_value = 0;
#endif

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    abac:	4b44      	ldr	r3, [pc, #272]	; (acc0 <trx_reg_read+0x128>)
    abae:	4798      	blx	r3
    abb0:	0002      	movs	r2, r0
    abb2:	230f      	movs	r3, #15
    abb4:	18fb      	adds	r3, r7, r3
    abb6:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
    abb8:	1dfb      	adds	r3, r7, #7
    abba:	1dfa      	adds	r2, r7, #7
    abbc:	7812      	ldrb	r2, [r2, #0]
    abbe:	2180      	movs	r1, #128	; 0x80
    abc0:	4249      	negs	r1, r1
    abc2:	430a      	orrs	r2, r1
    abc4:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    abc6:	493f      	ldr	r1, [pc, #252]	; (acc4 <trx_reg_read+0x12c>)
    abc8:	4b3f      	ldr	r3, [pc, #252]	; (acc8 <trx_reg_read+0x130>)
    abca:	2201      	movs	r2, #1
    abcc:	0018      	movs	r0, r3
    abce:	4b3f      	ldr	r3, [pc, #252]	; (accc <trx_reg_read+0x134>)
    abd0:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    abd2:	46c0      	nop			; (mov r8, r8)
    abd4:	4b3c      	ldr	r3, [pc, #240]	; (acc8 <trx_reg_read+0x130>)
    abd6:	0018      	movs	r0, r3
    abd8:	4b3d      	ldr	r3, [pc, #244]	; (acd0 <trx_reg_read+0x138>)
    abda:	4798      	blx	r3
    abdc:	0003      	movs	r3, r0
    abde:	001a      	movs	r2, r3
    abe0:	2301      	movs	r3, #1
    abe2:	4053      	eors	r3, r2
    abe4:	b2db      	uxtb	r3, r3
    abe6:	2b00      	cmp	r3, #0
    abe8:	d1f4      	bne.n	abd4 <trx_reg_read+0x3c>
	}
	spi_write(&master_1, addr);
    abea:	1dfb      	adds	r3, r7, #7
    abec:	781b      	ldrb	r3, [r3, #0]
    abee:	b29a      	uxth	r2, r3
    abf0:	4b35      	ldr	r3, [pc, #212]	; (acc8 <trx_reg_read+0x130>)
    abf2:	0011      	movs	r1, r2
    abf4:	0018      	movs	r0, r3
    abf6:	4b37      	ldr	r3, [pc, #220]	; (acd4 <trx_reg_read+0x13c>)
    abf8:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    abfa:	46c0      	nop			; (mov r8, r8)
    abfc:	4b32      	ldr	r3, [pc, #200]	; (acc8 <trx_reg_read+0x130>)
    abfe:	0018      	movs	r0, r3
    ac00:	4b35      	ldr	r3, [pc, #212]	; (acd8 <trx_reg_read+0x140>)
    ac02:	4798      	blx	r3
    ac04:	0003      	movs	r3, r0
    ac06:	001a      	movs	r2, r3
    ac08:	2301      	movs	r3, #1
    ac0a:	4053      	eors	r3, r2
    ac0c:	b2db      	uxtb	r3, r3
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d1f4      	bne.n	abfc <trx_reg_read+0x64>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    ac12:	46c0      	nop			; (mov r8, r8)
    ac14:	4b2c      	ldr	r3, [pc, #176]	; (acc8 <trx_reg_read+0x130>)
    ac16:	0018      	movs	r0, r3
    ac18:	4b30      	ldr	r3, [pc, #192]	; (acdc <trx_reg_read+0x144>)
    ac1a:	4798      	blx	r3
    ac1c:	0003      	movs	r3, r0
    ac1e:	001a      	movs	r2, r3
    ac20:	2301      	movs	r3, #1
    ac22:	4053      	eors	r3, r2
    ac24:	b2db      	uxtb	r3, r3
    ac26:	2b00      	cmp	r3, #0
    ac28:	d1f4      	bne.n	ac14 <trx_reg_read+0x7c>
	}
	spi_read(&master_1, &dummy_read);
    ac2a:	4a2d      	ldr	r2, [pc, #180]	; (ace0 <trx_reg_read+0x148>)
    ac2c:	4b26      	ldr	r3, [pc, #152]	; (acc8 <trx_reg_read+0x130>)
    ac2e:	0011      	movs	r1, r2
    ac30:	0018      	movs	r0, r3
    ac32:	4b2c      	ldr	r3, [pc, #176]	; (ace4 <trx_reg_read+0x14c>)
    ac34:	4798      	blx	r3

	while (!spi_is_ready_to_write(&master_1)) {
    ac36:	46c0      	nop			; (mov r8, r8)
    ac38:	4b23      	ldr	r3, [pc, #140]	; (acc8 <trx_reg_read+0x130>)
    ac3a:	0018      	movs	r0, r3
    ac3c:	4b24      	ldr	r3, [pc, #144]	; (acd0 <trx_reg_read+0x138>)
    ac3e:	4798      	blx	r3
    ac40:	0003      	movs	r3, r0
    ac42:	001a      	movs	r2, r3
    ac44:	2301      	movs	r3, #1
    ac46:	4053      	eors	r3, r2
    ac48:	b2db      	uxtb	r3, r3
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d1f4      	bne.n	ac38 <trx_reg_read+0xa0>
	}
	spi_write(&master_1, 0);
    ac4e:	4b1e      	ldr	r3, [pc, #120]	; (acc8 <trx_reg_read+0x130>)
    ac50:	2100      	movs	r1, #0
    ac52:	0018      	movs	r0, r3
    ac54:	4b1f      	ldr	r3, [pc, #124]	; (acd4 <trx_reg_read+0x13c>)
    ac56:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    ac58:	46c0      	nop			; (mov r8, r8)
    ac5a:	4b1b      	ldr	r3, [pc, #108]	; (acc8 <trx_reg_read+0x130>)
    ac5c:	0018      	movs	r0, r3
    ac5e:	4b1e      	ldr	r3, [pc, #120]	; (acd8 <trx_reg_read+0x140>)
    ac60:	4798      	blx	r3
    ac62:	0003      	movs	r3, r0
    ac64:	001a      	movs	r2, r3
    ac66:	2301      	movs	r3, #1
    ac68:	4053      	eors	r3, r2
    ac6a:	b2db      	uxtb	r3, r3
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d1f4      	bne.n	ac5a <trx_reg_read+0xc2>
	}
	while (!spi_is_ready_to_read(&master_1)) {
    ac70:	46c0      	nop			; (mov r8, r8)
    ac72:	4b15      	ldr	r3, [pc, #84]	; (acc8 <trx_reg_read+0x130>)
    ac74:	0018      	movs	r0, r3
    ac76:	4b19      	ldr	r3, [pc, #100]	; (acdc <trx_reg_read+0x144>)
    ac78:	4798      	blx	r3
    ac7a:	0003      	movs	r3, r0
    ac7c:	001a      	movs	r2, r3
    ac7e:	2301      	movs	r3, #1
    ac80:	4053      	eors	r3, r2
    ac82:	b2db      	uxtb	r3, r3
    ac84:	2b00      	cmp	r3, #0
    ac86:	d1f4      	bne.n	ac72 <trx_reg_read+0xda>
	}
	spi_read(&master_1, &register_value);
    ac88:	230c      	movs	r3, #12
    ac8a:	18fa      	adds	r2, r7, r3
    ac8c:	4b0e      	ldr	r3, [pc, #56]	; (acc8 <trx_reg_read+0x130>)
    ac8e:	0011      	movs	r1, r2
    ac90:	0018      	movs	r0, r3
    ac92:	4b14      	ldr	r3, [pc, #80]	; (ace4 <trx_reg_read+0x14c>)
    ac94:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    ac96:	490b      	ldr	r1, [pc, #44]	; (acc4 <trx_reg_read+0x12c>)
    ac98:	4b0b      	ldr	r3, [pc, #44]	; (acc8 <trx_reg_read+0x130>)
    ac9a:	2200      	movs	r2, #0
    ac9c:	0018      	movs	r0, r3
    ac9e:	4b0b      	ldr	r3, [pc, #44]	; (accc <trx_reg_read+0x134>)
    aca0:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    aca2:	230f      	movs	r3, #15
    aca4:	18fb      	adds	r3, r7, r3
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	0018      	movs	r0, r3
    acaa:	4b0f      	ldr	r3, [pc, #60]	; (ace8 <trx_reg_read+0x150>)
    acac:	4798      	blx	r3

	return register_value;
    acae:	230c      	movs	r3, #12
    acb0:	18fb      	adds	r3, r7, r3
    acb2:	881b      	ldrh	r3, [r3, #0]
    acb4:	b2db      	uxtb	r3, r3
}
    acb6:	0018      	movs	r0, r3
    acb8:	46bd      	mov	sp, r7
    acba:	b004      	add	sp, #16
    acbc:	bd80      	pop	{r7, pc}
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	0000a59d 	.word	0x0000a59d
    acc4:	20001a98 	.word	0x20001a98
    acc8:	20001a84 	.word	0x20001a84
    accc:	00014ded 	.word	0x00014ded
    acd0:	0000a899 	.word	0x0000a899
    acd4:	0000a8e9 	.word	0x0000a8e9
    acd8:	0000a871 	.word	0x0000a871
    acdc:	0000a8c1 	.word	0x0000a8c1
    ace0:	20001a90 	.word	0x20001a90
    ace4:	0000a931 	.word	0x0000a931
    ace8:	0000a5e5 	.word	0x0000a5e5

0000acec <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    acec:	b580      	push	{r7, lr}
    acee:	b084      	sub	sp, #16
    acf0:	af00      	add	r7, sp, #0
    acf2:	0002      	movs	r2, r0
    acf4:	1dfb      	adds	r3, r7, #7
    acf6:	701a      	strb	r2, [r3, #0]
    acf8:	1dbb      	adds	r3, r7, #6
    acfa:	1c0a      	adds	r2, r1, #0
    acfc:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    acfe:	4b43      	ldr	r3, [pc, #268]	; (ae0c <trx_reg_write+0x120>)
    ad00:	4798      	blx	r3
    ad02:	0002      	movs	r2, r0
    ad04:	230f      	movs	r3, #15
    ad06:	18fb      	adds	r3, r7, r3
    ad08:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
    ad0a:	1dfb      	adds	r3, r7, #7
    ad0c:	1dfa      	adds	r2, r7, #7
    ad0e:	7812      	ldrb	r2, [r2, #0]
    ad10:	2140      	movs	r1, #64	; 0x40
    ad12:	4249      	negs	r1, r1
    ad14:	430a      	orrs	r2, r1
    ad16:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    ad18:	493d      	ldr	r1, [pc, #244]	; (ae10 <trx_reg_write+0x124>)
    ad1a:	4b3e      	ldr	r3, [pc, #248]	; (ae14 <trx_reg_write+0x128>)
    ad1c:	2201      	movs	r2, #1
    ad1e:	0018      	movs	r0, r3
    ad20:	4b3d      	ldr	r3, [pc, #244]	; (ae18 <trx_reg_write+0x12c>)
    ad22:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    ad24:	46c0      	nop			; (mov r8, r8)
    ad26:	4b3b      	ldr	r3, [pc, #236]	; (ae14 <trx_reg_write+0x128>)
    ad28:	0018      	movs	r0, r3
    ad2a:	4b3c      	ldr	r3, [pc, #240]	; (ae1c <trx_reg_write+0x130>)
    ad2c:	4798      	blx	r3
    ad2e:	0003      	movs	r3, r0
    ad30:	001a      	movs	r2, r3
    ad32:	2301      	movs	r3, #1
    ad34:	4053      	eors	r3, r2
    ad36:	b2db      	uxtb	r3, r3
    ad38:	2b00      	cmp	r3, #0
    ad3a:	d1f4      	bne.n	ad26 <trx_reg_write+0x3a>
	}
	spi_write(&master_1, addr);
    ad3c:	1dfb      	adds	r3, r7, #7
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	b29a      	uxth	r2, r3
    ad42:	4b34      	ldr	r3, [pc, #208]	; (ae14 <trx_reg_write+0x128>)
    ad44:	0011      	movs	r1, r2
    ad46:	0018      	movs	r0, r3
    ad48:	4b35      	ldr	r3, [pc, #212]	; (ae20 <trx_reg_write+0x134>)
    ad4a:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    ad4c:	46c0      	nop			; (mov r8, r8)
    ad4e:	4b31      	ldr	r3, [pc, #196]	; (ae14 <trx_reg_write+0x128>)
    ad50:	0018      	movs	r0, r3
    ad52:	4b34      	ldr	r3, [pc, #208]	; (ae24 <trx_reg_write+0x138>)
    ad54:	4798      	blx	r3
    ad56:	0003      	movs	r3, r0
    ad58:	001a      	movs	r2, r3
    ad5a:	2301      	movs	r3, #1
    ad5c:	4053      	eors	r3, r2
    ad5e:	b2db      	uxtb	r3, r3
    ad60:	2b00      	cmp	r3, #0
    ad62:	d1f4      	bne.n	ad4e <trx_reg_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    ad64:	46c0      	nop			; (mov r8, r8)
    ad66:	4b2b      	ldr	r3, [pc, #172]	; (ae14 <trx_reg_write+0x128>)
    ad68:	0018      	movs	r0, r3
    ad6a:	4b2f      	ldr	r3, [pc, #188]	; (ae28 <trx_reg_write+0x13c>)
    ad6c:	4798      	blx	r3
    ad6e:	0003      	movs	r3, r0
    ad70:	001a      	movs	r2, r3
    ad72:	2301      	movs	r3, #1
    ad74:	4053      	eors	r3, r2
    ad76:	b2db      	uxtb	r3, r3
    ad78:	2b00      	cmp	r3, #0
    ad7a:	d1f4      	bne.n	ad66 <trx_reg_write+0x7a>
	}
	spi_read(&master_1, &dummy_read);
    ad7c:	4a2b      	ldr	r2, [pc, #172]	; (ae2c <trx_reg_write+0x140>)
    ad7e:	4b25      	ldr	r3, [pc, #148]	; (ae14 <trx_reg_write+0x128>)
    ad80:	0011      	movs	r1, r2
    ad82:	0018      	movs	r0, r3
    ad84:	4b2a      	ldr	r3, [pc, #168]	; (ae30 <trx_reg_write+0x144>)
    ad86:	4798      	blx	r3

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master_1)) {
    ad88:	46c0      	nop			; (mov r8, r8)
    ad8a:	4b22      	ldr	r3, [pc, #136]	; (ae14 <trx_reg_write+0x128>)
    ad8c:	0018      	movs	r0, r3
    ad8e:	4b23      	ldr	r3, [pc, #140]	; (ae1c <trx_reg_write+0x130>)
    ad90:	4798      	blx	r3
    ad92:	0003      	movs	r3, r0
    ad94:	001a      	movs	r2, r3
    ad96:	2301      	movs	r3, #1
    ad98:	4053      	eors	r3, r2
    ad9a:	b2db      	uxtb	r3, r3
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d1f4      	bne.n	ad8a <trx_reg_write+0x9e>
	}
	spi_write(&master_1, data);
    ada0:	1dbb      	adds	r3, r7, #6
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	b29a      	uxth	r2, r3
    ada6:	4b1b      	ldr	r3, [pc, #108]	; (ae14 <trx_reg_write+0x128>)
    ada8:	0011      	movs	r1, r2
    adaa:	0018      	movs	r0, r3
    adac:	4b1c      	ldr	r3, [pc, #112]	; (ae20 <trx_reg_write+0x134>)
    adae:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    adb0:	46c0      	nop			; (mov r8, r8)
    adb2:	4b18      	ldr	r3, [pc, #96]	; (ae14 <trx_reg_write+0x128>)
    adb4:	0018      	movs	r0, r3
    adb6:	4b1b      	ldr	r3, [pc, #108]	; (ae24 <trx_reg_write+0x138>)
    adb8:	4798      	blx	r3
    adba:	0003      	movs	r3, r0
    adbc:	001a      	movs	r2, r3
    adbe:	2301      	movs	r3, #1
    adc0:	4053      	eors	r3, r2
    adc2:	b2db      	uxtb	r3, r3
    adc4:	2b00      	cmp	r3, #0
    adc6:	d1f4      	bne.n	adb2 <trx_reg_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    adc8:	46c0      	nop			; (mov r8, r8)
    adca:	4b12      	ldr	r3, [pc, #72]	; (ae14 <trx_reg_write+0x128>)
    adcc:	0018      	movs	r0, r3
    adce:	4b16      	ldr	r3, [pc, #88]	; (ae28 <trx_reg_write+0x13c>)
    add0:	4798      	blx	r3
    add2:	0003      	movs	r3, r0
    add4:	001a      	movs	r2, r3
    add6:	2301      	movs	r3, #1
    add8:	4053      	eors	r3, r2
    adda:	b2db      	uxtb	r3, r3
    addc:	2b00      	cmp	r3, #0
    adde:	d1f4      	bne.n	adca <trx_reg_write+0xde>
	}
	spi_read(&master_1, &dummy_read);
    ade0:	4a12      	ldr	r2, [pc, #72]	; (ae2c <trx_reg_write+0x140>)
    ade2:	4b0c      	ldr	r3, [pc, #48]	; (ae14 <trx_reg_write+0x128>)
    ade4:	0011      	movs	r1, r2
    ade6:	0018      	movs	r0, r3
    ade8:	4b11      	ldr	r3, [pc, #68]	; (ae30 <trx_reg_write+0x144>)
    adea:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    adec:	4908      	ldr	r1, [pc, #32]	; (ae10 <trx_reg_write+0x124>)
    adee:	4b09      	ldr	r3, [pc, #36]	; (ae14 <trx_reg_write+0x128>)
    adf0:	2200      	movs	r2, #0
    adf2:	0018      	movs	r0, r3
    adf4:	4b08      	ldr	r3, [pc, #32]	; (ae18 <trx_reg_write+0x12c>)
    adf6:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    adf8:	230f      	movs	r3, #15
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	781b      	ldrb	r3, [r3, #0]
    adfe:	0018      	movs	r0, r3
    ae00:	4b0c      	ldr	r3, [pc, #48]	; (ae34 <trx_reg_write+0x148>)
    ae02:	4798      	blx	r3
}
    ae04:	46c0      	nop			; (mov r8, r8)
    ae06:	46bd      	mov	sp, r7
    ae08:	b004      	add	sp, #16
    ae0a:	bd80      	pop	{r7, pc}
    ae0c:	0000a59d 	.word	0x0000a59d
    ae10:	20001a98 	.word	0x20001a98
    ae14:	20001a84 	.word	0x20001a84
    ae18:	00014ded 	.word	0x00014ded
    ae1c:	0000a899 	.word	0x0000a899
    ae20:	0000a8e9 	.word	0x0000a8e9
    ae24:	0000a871 	.word	0x0000a871
    ae28:	0000a8c1 	.word	0x0000a8c1
    ae2c:	20001a90 	.word	0x20001a90
    ae30:	0000a931 	.word	0x0000a931
    ae34:	0000a5e5 	.word	0x0000a5e5

0000ae38 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b084      	sub	sp, #16
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
    ae40:	000a      	movs	r2, r1
    ae42:	1cfb      	adds	r3, r7, #3
    ae44:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    ae46:	4b49      	ldr	r3, [pc, #292]	; (af6c <trx_frame_read+0x134>)
    ae48:	4798      	blx	r3
    ae4a:	0002      	movs	r2, r0
    ae4c:	230f      	movs	r3, #15
    ae4e:	18fb      	adds	r3, r7, r3
    ae50:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    ae52:	4947      	ldr	r1, [pc, #284]	; (af70 <trx_frame_read+0x138>)
    ae54:	4b47      	ldr	r3, [pc, #284]	; (af74 <trx_frame_read+0x13c>)
    ae56:	2201      	movs	r2, #1
    ae58:	0018      	movs	r0, r3
    ae5a:	4b47      	ldr	r3, [pc, #284]	; (af78 <trx_frame_read+0x140>)
    ae5c:	4798      	blx	r3

	temp = TRX_CMD_FR;
    ae5e:	230c      	movs	r3, #12
    ae60:	18fb      	adds	r3, r7, r3
    ae62:	2220      	movs	r2, #32
    ae64:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    ae66:	46c0      	nop			; (mov r8, r8)
    ae68:	4b42      	ldr	r3, [pc, #264]	; (af74 <trx_frame_read+0x13c>)
    ae6a:	0018      	movs	r0, r3
    ae6c:	4b43      	ldr	r3, [pc, #268]	; (af7c <trx_frame_read+0x144>)
    ae6e:	4798      	blx	r3
    ae70:	0003      	movs	r3, r0
    ae72:	001a      	movs	r2, r3
    ae74:	2301      	movs	r3, #1
    ae76:	4053      	eors	r3, r2
    ae78:	b2db      	uxtb	r3, r3
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d1f4      	bne.n	ae68 <trx_frame_read+0x30>
	}
	spi_write(&master_1, temp);
    ae7e:	230c      	movs	r3, #12
    ae80:	18fb      	adds	r3, r7, r3
    ae82:	881a      	ldrh	r2, [r3, #0]
    ae84:	4b3b      	ldr	r3, [pc, #236]	; (af74 <trx_frame_read+0x13c>)
    ae86:	0011      	movs	r1, r2
    ae88:	0018      	movs	r0, r3
    ae8a:	4b3d      	ldr	r3, [pc, #244]	; (af80 <trx_frame_read+0x148>)
    ae8c:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    ae8e:	46c0      	nop			; (mov r8, r8)
    ae90:	4b38      	ldr	r3, [pc, #224]	; (af74 <trx_frame_read+0x13c>)
    ae92:	0018      	movs	r0, r3
    ae94:	4b3b      	ldr	r3, [pc, #236]	; (af84 <trx_frame_read+0x14c>)
    ae96:	4798      	blx	r3
    ae98:	0003      	movs	r3, r0
    ae9a:	001a      	movs	r2, r3
    ae9c:	2301      	movs	r3, #1
    ae9e:	4053      	eors	r3, r2
    aea0:	b2db      	uxtb	r3, r3
    aea2:	2b00      	cmp	r3, #0
    aea4:	d1f4      	bne.n	ae90 <trx_frame_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    aea6:	46c0      	nop			; (mov r8, r8)
    aea8:	4b32      	ldr	r3, [pc, #200]	; (af74 <trx_frame_read+0x13c>)
    aeaa:	0018      	movs	r0, r3
    aeac:	4b36      	ldr	r3, [pc, #216]	; (af88 <trx_frame_read+0x150>)
    aeae:	4798      	blx	r3
    aeb0:	0003      	movs	r3, r0
    aeb2:	001a      	movs	r2, r3
    aeb4:	2301      	movs	r3, #1
    aeb6:	4053      	eors	r3, r2
    aeb8:	b2db      	uxtb	r3, r3
    aeba:	2b00      	cmp	r3, #0
    aebc:	d1f4      	bne.n	aea8 <trx_frame_read+0x70>
	}
	spi_read(&master_1, &dummy_read);
    aebe:	4a33      	ldr	r2, [pc, #204]	; (af8c <trx_frame_read+0x154>)
    aec0:	4b2c      	ldr	r3, [pc, #176]	; (af74 <trx_frame_read+0x13c>)
    aec2:	0011      	movs	r1, r2
    aec4:	0018      	movs	r0, r3
    aec6:	4b32      	ldr	r3, [pc, #200]	; (af90 <trx_frame_read+0x158>)
    aec8:	4798      	blx	r3

	while (length--) {
    aeca:	e038      	b.n	af3e <trx_frame_read+0x106>
		while (!spi_is_ready_to_write(&master_1)) {
    aecc:	46c0      	nop			; (mov r8, r8)
    aece:	4b29      	ldr	r3, [pc, #164]	; (af74 <trx_frame_read+0x13c>)
    aed0:	0018      	movs	r0, r3
    aed2:	4b2a      	ldr	r3, [pc, #168]	; (af7c <trx_frame_read+0x144>)
    aed4:	4798      	blx	r3
    aed6:	0003      	movs	r3, r0
    aed8:	001a      	movs	r2, r3
    aeda:	2301      	movs	r3, #1
    aedc:	4053      	eors	r3, r2
    aede:	b2db      	uxtb	r3, r3
    aee0:	2b00      	cmp	r3, #0
    aee2:	d1f4      	bne.n	aece <trx_frame_read+0x96>
		}
		spi_write(&master_1, 0);
    aee4:	4b23      	ldr	r3, [pc, #140]	; (af74 <trx_frame_read+0x13c>)
    aee6:	2100      	movs	r1, #0
    aee8:	0018      	movs	r0, r3
    aeea:	4b25      	ldr	r3, [pc, #148]	; (af80 <trx_frame_read+0x148>)
    aeec:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	4b20      	ldr	r3, [pc, #128]	; (af74 <trx_frame_read+0x13c>)
    aef2:	0018      	movs	r0, r3
    aef4:	4b23      	ldr	r3, [pc, #140]	; (af84 <trx_frame_read+0x14c>)
    aef6:	4798      	blx	r3
    aef8:	0003      	movs	r3, r0
    aefa:	001a      	movs	r2, r3
    aefc:	2301      	movs	r3, #1
    aefe:	4053      	eors	r3, r2
    af00:	b2db      	uxtb	r3, r3
    af02:	2b00      	cmp	r3, #0
    af04:	d1f4      	bne.n	aef0 <trx_frame_read+0xb8>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	4b1a      	ldr	r3, [pc, #104]	; (af74 <trx_frame_read+0x13c>)
    af0a:	0018      	movs	r0, r3
    af0c:	4b1e      	ldr	r3, [pc, #120]	; (af88 <trx_frame_read+0x150>)
    af0e:	4798      	blx	r3
    af10:	0003      	movs	r3, r0
    af12:	001a      	movs	r2, r3
    af14:	2301      	movs	r3, #1
    af16:	4053      	eors	r3, r2
    af18:	b2db      	uxtb	r3, r3
    af1a:	2b00      	cmp	r3, #0
    af1c:	d1f4      	bne.n	af08 <trx_frame_read+0xd0>
		}
		spi_read(&master_1, &temp);
    af1e:	230c      	movs	r3, #12
    af20:	18fa      	adds	r2, r7, r3
    af22:	4b14      	ldr	r3, [pc, #80]	; (af74 <trx_frame_read+0x13c>)
    af24:	0011      	movs	r1, r2
    af26:	0018      	movs	r0, r3
    af28:	4b19      	ldr	r3, [pc, #100]	; (af90 <trx_frame_read+0x158>)
    af2a:	4798      	blx	r3
		*data = temp;
    af2c:	230c      	movs	r3, #12
    af2e:	18fb      	adds	r3, r7, r3
    af30:	881b      	ldrh	r3, [r3, #0]
    af32:	b2da      	uxtb	r2, r3
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	701a      	strb	r2, [r3, #0]
		data++;
    af38:	687b      	ldr	r3, [r7, #4]
    af3a:	3301      	adds	r3, #1
    af3c:	607b      	str	r3, [r7, #4]
	while (length--) {
    af3e:	1cfb      	adds	r3, r7, #3
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	1cfa      	adds	r2, r7, #3
    af44:	1e59      	subs	r1, r3, #1
    af46:	7011      	strb	r1, [r2, #0]
    af48:	2b00      	cmp	r3, #0
    af4a:	d1bf      	bne.n	aecc <trx_frame_read+0x94>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    af4c:	4908      	ldr	r1, [pc, #32]	; (af70 <trx_frame_read+0x138>)
    af4e:	4b09      	ldr	r3, [pc, #36]	; (af74 <trx_frame_read+0x13c>)
    af50:	2200      	movs	r2, #0
    af52:	0018      	movs	r0, r3
    af54:	4b08      	ldr	r3, [pc, #32]	; (af78 <trx_frame_read+0x140>)
    af56:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    af58:	230f      	movs	r3, #15
    af5a:	18fb      	adds	r3, r7, r3
    af5c:	781b      	ldrb	r3, [r3, #0]
    af5e:	0018      	movs	r0, r3
    af60:	4b0c      	ldr	r3, [pc, #48]	; (af94 <trx_frame_read+0x15c>)
    af62:	4798      	blx	r3
}
    af64:	46c0      	nop			; (mov r8, r8)
    af66:	46bd      	mov	sp, r7
    af68:	b004      	add	sp, #16
    af6a:	bd80      	pop	{r7, pc}
    af6c:	0000a59d 	.word	0x0000a59d
    af70:	20001a98 	.word	0x20001a98
    af74:	20001a84 	.word	0x20001a84
    af78:	00014ded 	.word	0x00014ded
    af7c:	0000a899 	.word	0x0000a899
    af80:	0000a8e9 	.word	0x0000a8e9
    af84:	0000a871 	.word	0x0000a871
    af88:	0000a8c1 	.word	0x0000a8c1
    af8c:	20001a90 	.word	0x20001a90
    af90:	0000a931 	.word	0x0000a931
    af94:	0000a5e5 	.word	0x0000a5e5

0000af98 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    af98:	b580      	push	{r7, lr}
    af9a:	b084      	sub	sp, #16
    af9c:	af00      	add	r7, sp, #0
    af9e:	6078      	str	r0, [r7, #4]
    afa0:	000a      	movs	r2, r1
    afa2:	1cfb      	adds	r3, r7, #3
    afa4:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    afa6:	4b47      	ldr	r3, [pc, #284]	; (b0c4 <trx_frame_write+0x12c>)
    afa8:	4798      	blx	r3
    afaa:	0002      	movs	r2, r0
    afac:	230f      	movs	r3, #15
    afae:	18fb      	adds	r3, r7, r3
    afb0:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    afb2:	4945      	ldr	r1, [pc, #276]	; (b0c8 <trx_frame_write+0x130>)
    afb4:	4b45      	ldr	r3, [pc, #276]	; (b0cc <trx_frame_write+0x134>)
    afb6:	2201      	movs	r2, #1
    afb8:	0018      	movs	r0, r3
    afba:	4b45      	ldr	r3, [pc, #276]	; (b0d0 <trx_frame_write+0x138>)
    afbc:	4798      	blx	r3

	temp = TRX_CMD_FW;
    afbe:	230e      	movs	r3, #14
    afc0:	18fb      	adds	r3, r7, r3
    afc2:	2260      	movs	r2, #96	; 0x60
    afc4:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    afc6:	46c0      	nop			; (mov r8, r8)
    afc8:	4b40      	ldr	r3, [pc, #256]	; (b0cc <trx_frame_write+0x134>)
    afca:	0018      	movs	r0, r3
    afcc:	4b41      	ldr	r3, [pc, #260]	; (b0d4 <trx_frame_write+0x13c>)
    afce:	4798      	blx	r3
    afd0:	0003      	movs	r3, r0
    afd2:	001a      	movs	r2, r3
    afd4:	2301      	movs	r3, #1
    afd6:	4053      	eors	r3, r2
    afd8:	b2db      	uxtb	r3, r3
    afda:	2b00      	cmp	r3, #0
    afdc:	d1f4      	bne.n	afc8 <trx_frame_write+0x30>
	}
	spi_write(&master_1, temp);
    afde:	230e      	movs	r3, #14
    afe0:	18fb      	adds	r3, r7, r3
    afe2:	781b      	ldrb	r3, [r3, #0]
    afe4:	b29a      	uxth	r2, r3
    afe6:	4b39      	ldr	r3, [pc, #228]	; (b0cc <trx_frame_write+0x134>)
    afe8:	0011      	movs	r1, r2
    afea:	0018      	movs	r0, r3
    afec:	4b3a      	ldr	r3, [pc, #232]	; (b0d8 <trx_frame_write+0x140>)
    afee:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    aff0:	46c0      	nop			; (mov r8, r8)
    aff2:	4b36      	ldr	r3, [pc, #216]	; (b0cc <trx_frame_write+0x134>)
    aff4:	0018      	movs	r0, r3
    aff6:	4b39      	ldr	r3, [pc, #228]	; (b0dc <trx_frame_write+0x144>)
    aff8:	4798      	blx	r3
    affa:	0003      	movs	r3, r0
    affc:	001a      	movs	r2, r3
    affe:	2301      	movs	r3, #1
    b000:	4053      	eors	r3, r2
    b002:	b2db      	uxtb	r3, r3
    b004:	2b00      	cmp	r3, #0
    b006:	d1f4      	bne.n	aff2 <trx_frame_write+0x5a>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b008:	46c0      	nop			; (mov r8, r8)
    b00a:	4b30      	ldr	r3, [pc, #192]	; (b0cc <trx_frame_write+0x134>)
    b00c:	0018      	movs	r0, r3
    b00e:	4b34      	ldr	r3, [pc, #208]	; (b0e0 <trx_frame_write+0x148>)
    b010:	4798      	blx	r3
    b012:	0003      	movs	r3, r0
    b014:	001a      	movs	r2, r3
    b016:	2301      	movs	r3, #1
    b018:	4053      	eors	r3, r2
    b01a:	b2db      	uxtb	r3, r3
    b01c:	2b00      	cmp	r3, #0
    b01e:	d1f4      	bne.n	b00a <trx_frame_write+0x72>
	}
	spi_read(&master_1, &dummy_read);
    b020:	4a30      	ldr	r2, [pc, #192]	; (b0e4 <trx_frame_write+0x14c>)
    b022:	4b2a      	ldr	r3, [pc, #168]	; (b0cc <trx_frame_write+0x134>)
    b024:	0011      	movs	r1, r2
    b026:	0018      	movs	r0, r3
    b028:	4b2f      	ldr	r3, [pc, #188]	; (b0e8 <trx_frame_write+0x150>)
    b02a:	4798      	blx	r3
	while (length--) {
    b02c:	e033      	b.n	b096 <trx_frame_write+0xfe>
		while (!spi_is_ready_to_write(&master_1)) {
    b02e:	46c0      	nop			; (mov r8, r8)
    b030:	4b26      	ldr	r3, [pc, #152]	; (b0cc <trx_frame_write+0x134>)
    b032:	0018      	movs	r0, r3
    b034:	4b27      	ldr	r3, [pc, #156]	; (b0d4 <trx_frame_write+0x13c>)
    b036:	4798      	blx	r3
    b038:	0003      	movs	r3, r0
    b03a:	001a      	movs	r2, r3
    b03c:	2301      	movs	r3, #1
    b03e:	4053      	eors	r3, r2
    b040:	b2db      	uxtb	r3, r3
    b042:	2b00      	cmp	r3, #0
    b044:	d1f4      	bne.n	b030 <trx_frame_write+0x98>
		}
		spi_write(&master_1, *data++);
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	1c5a      	adds	r2, r3, #1
    b04a:	607a      	str	r2, [r7, #4]
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	b29a      	uxth	r2, r3
    b050:	4b1e      	ldr	r3, [pc, #120]	; (b0cc <trx_frame_write+0x134>)
    b052:	0011      	movs	r1, r2
    b054:	0018      	movs	r0, r3
    b056:	4b20      	ldr	r3, [pc, #128]	; (b0d8 <trx_frame_write+0x140>)
    b058:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    b05a:	46c0      	nop			; (mov r8, r8)
    b05c:	4b1b      	ldr	r3, [pc, #108]	; (b0cc <trx_frame_write+0x134>)
    b05e:	0018      	movs	r0, r3
    b060:	4b1e      	ldr	r3, [pc, #120]	; (b0dc <trx_frame_write+0x144>)
    b062:	4798      	blx	r3
    b064:	0003      	movs	r3, r0
    b066:	001a      	movs	r2, r3
    b068:	2301      	movs	r3, #1
    b06a:	4053      	eors	r3, r2
    b06c:	b2db      	uxtb	r3, r3
    b06e:	2b00      	cmp	r3, #0
    b070:	d1f4      	bne.n	b05c <trx_frame_write+0xc4>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	4b15      	ldr	r3, [pc, #84]	; (b0cc <trx_frame_write+0x134>)
    b076:	0018      	movs	r0, r3
    b078:	4b19      	ldr	r3, [pc, #100]	; (b0e0 <trx_frame_write+0x148>)
    b07a:	4798      	blx	r3
    b07c:	0003      	movs	r3, r0
    b07e:	001a      	movs	r2, r3
    b080:	2301      	movs	r3, #1
    b082:	4053      	eors	r3, r2
    b084:	b2db      	uxtb	r3, r3
    b086:	2b00      	cmp	r3, #0
    b088:	d1f4      	bne.n	b074 <trx_frame_write+0xdc>
		}
		spi_read(&master_1, &dummy_read);
    b08a:	4a16      	ldr	r2, [pc, #88]	; (b0e4 <trx_frame_write+0x14c>)
    b08c:	4b0f      	ldr	r3, [pc, #60]	; (b0cc <trx_frame_write+0x134>)
    b08e:	0011      	movs	r1, r2
    b090:	0018      	movs	r0, r3
    b092:	4b15      	ldr	r3, [pc, #84]	; (b0e8 <trx_frame_write+0x150>)
    b094:	4798      	blx	r3
	while (length--) {
    b096:	1cfb      	adds	r3, r7, #3
    b098:	781b      	ldrb	r3, [r3, #0]
    b09a:	1cfa      	adds	r2, r7, #3
    b09c:	1e59      	subs	r1, r3, #1
    b09e:	7011      	strb	r1, [r2, #0]
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d1c4      	bne.n	b02e <trx_frame_write+0x96>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    b0a4:	4908      	ldr	r1, [pc, #32]	; (b0c8 <trx_frame_write+0x130>)
    b0a6:	4b09      	ldr	r3, [pc, #36]	; (b0cc <trx_frame_write+0x134>)
    b0a8:	2200      	movs	r2, #0
    b0aa:	0018      	movs	r0, r3
    b0ac:	4b08      	ldr	r3, [pc, #32]	; (b0d0 <trx_frame_write+0x138>)
    b0ae:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    b0b0:	230f      	movs	r3, #15
    b0b2:	18fb      	adds	r3, r7, r3
    b0b4:	781b      	ldrb	r3, [r3, #0]
    b0b6:	0018      	movs	r0, r3
    b0b8:	4b0c      	ldr	r3, [pc, #48]	; (b0ec <trx_frame_write+0x154>)
    b0ba:	4798      	blx	r3
}
    b0bc:	46c0      	nop			; (mov r8, r8)
    b0be:	46bd      	mov	sp, r7
    b0c0:	b004      	add	sp, #16
    b0c2:	bd80      	pop	{r7, pc}
    b0c4:	0000a59d 	.word	0x0000a59d
    b0c8:	20001a98 	.word	0x20001a98
    b0cc:	20001a84 	.word	0x20001a84
    b0d0:	00014ded 	.word	0x00014ded
    b0d4:	0000a899 	.word	0x0000a899
    b0d8:	0000a8e9 	.word	0x0000a8e9
    b0dc:	0000a871 	.word	0x0000a871
    b0e0:	0000a8c1 	.word	0x0000a8c1
    b0e4:	20001a90 	.word	0x20001a90
    b0e8:	0000a931 	.word	0x0000a931
    b0ec:	0000a5e5 	.word	0x0000a5e5

0000b0f0 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    b0f0:	b580      	push	{r7, lr}
    b0f2:	b084      	sub	sp, #16
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	6039      	str	r1, [r7, #0]
    b0f8:	0011      	movs	r1, r2
    b0fa:	1dfb      	adds	r3, r7, #7
    b0fc:	1c02      	adds	r2, r0, #0
    b0fe:	701a      	strb	r2, [r3, #0]
    b100:	1dbb      	adds	r3, r7, #6
    b102:	1c0a      	adds	r2, r1, #0
    b104:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    b106:	4b60      	ldr	r3, [pc, #384]	; (b288 <trx_sram_write+0x198>)
    b108:	4798      	blx	r3
    b10a:	0002      	movs	r2, r0
    b10c:	230f      	movs	r3, #15
    b10e:	18fb      	adds	r3, r7, r3
    b110:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    b112:	495e      	ldr	r1, [pc, #376]	; (b28c <trx_sram_write+0x19c>)
    b114:	4b5e      	ldr	r3, [pc, #376]	; (b290 <trx_sram_write+0x1a0>)
    b116:	2201      	movs	r2, #1
    b118:	0018      	movs	r0, r3
    b11a:	4b5e      	ldr	r3, [pc, #376]	; (b294 <trx_sram_write+0x1a4>)
    b11c:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    b11e:	230e      	movs	r3, #14
    b120:	18fb      	adds	r3, r7, r3
    b122:	2240      	movs	r2, #64	; 0x40
    b124:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    b126:	46c0      	nop			; (mov r8, r8)
    b128:	4b59      	ldr	r3, [pc, #356]	; (b290 <trx_sram_write+0x1a0>)
    b12a:	0018      	movs	r0, r3
    b12c:	4b5a      	ldr	r3, [pc, #360]	; (b298 <trx_sram_write+0x1a8>)
    b12e:	4798      	blx	r3
    b130:	0003      	movs	r3, r0
    b132:	001a      	movs	r2, r3
    b134:	2301      	movs	r3, #1
    b136:	4053      	eors	r3, r2
    b138:	b2db      	uxtb	r3, r3
    b13a:	2b00      	cmp	r3, #0
    b13c:	d1f4      	bne.n	b128 <trx_sram_write+0x38>
	}
	spi_write(&master_1, temp);
    b13e:	230e      	movs	r3, #14
    b140:	18fb      	adds	r3, r7, r3
    b142:	781b      	ldrb	r3, [r3, #0]
    b144:	b29a      	uxth	r2, r3
    b146:	4b52      	ldr	r3, [pc, #328]	; (b290 <trx_sram_write+0x1a0>)
    b148:	0011      	movs	r1, r2
    b14a:	0018      	movs	r0, r3
    b14c:	4b53      	ldr	r3, [pc, #332]	; (b29c <trx_sram_write+0x1ac>)
    b14e:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b150:	46c0      	nop			; (mov r8, r8)
    b152:	4b4f      	ldr	r3, [pc, #316]	; (b290 <trx_sram_write+0x1a0>)
    b154:	0018      	movs	r0, r3
    b156:	4b52      	ldr	r3, [pc, #328]	; (b2a0 <trx_sram_write+0x1b0>)
    b158:	4798      	blx	r3
    b15a:	0003      	movs	r3, r0
    b15c:	001a      	movs	r2, r3
    b15e:	2301      	movs	r3, #1
    b160:	4053      	eors	r3, r2
    b162:	b2db      	uxtb	r3, r3
    b164:	2b00      	cmp	r3, #0
    b166:	d1f4      	bne.n	b152 <trx_sram_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b168:	46c0      	nop			; (mov r8, r8)
    b16a:	4b49      	ldr	r3, [pc, #292]	; (b290 <trx_sram_write+0x1a0>)
    b16c:	0018      	movs	r0, r3
    b16e:	4b4d      	ldr	r3, [pc, #308]	; (b2a4 <trx_sram_write+0x1b4>)
    b170:	4798      	blx	r3
    b172:	0003      	movs	r3, r0
    b174:	001a      	movs	r2, r3
    b176:	2301      	movs	r3, #1
    b178:	4053      	eors	r3, r2
    b17a:	b2db      	uxtb	r3, r3
    b17c:	2b00      	cmp	r3, #0
    b17e:	d1f4      	bne.n	b16a <trx_sram_write+0x7a>
	}
	spi_read(&master_1, &dummy_read);
    b180:	4a49      	ldr	r2, [pc, #292]	; (b2a8 <trx_sram_write+0x1b8>)
    b182:	4b43      	ldr	r3, [pc, #268]	; (b290 <trx_sram_write+0x1a0>)
    b184:	0011      	movs	r1, r2
    b186:	0018      	movs	r0, r3
    b188:	4b48      	ldr	r3, [pc, #288]	; (b2ac <trx_sram_write+0x1bc>)
    b18a:	4798      	blx	r3

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master_1)) {
    b18c:	46c0      	nop			; (mov r8, r8)
    b18e:	4b40      	ldr	r3, [pc, #256]	; (b290 <trx_sram_write+0x1a0>)
    b190:	0018      	movs	r0, r3
    b192:	4b41      	ldr	r3, [pc, #260]	; (b298 <trx_sram_write+0x1a8>)
    b194:	4798      	blx	r3
    b196:	0003      	movs	r3, r0
    b198:	001a      	movs	r2, r3
    b19a:	2301      	movs	r3, #1
    b19c:	4053      	eors	r3, r2
    b19e:	b2db      	uxtb	r3, r3
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d1f4      	bne.n	b18e <trx_sram_write+0x9e>
	}
	spi_write(&master_1, addr);
    b1a4:	1dfb      	adds	r3, r7, #7
    b1a6:	781b      	ldrb	r3, [r3, #0]
    b1a8:	b29a      	uxth	r2, r3
    b1aa:	4b39      	ldr	r3, [pc, #228]	; (b290 <trx_sram_write+0x1a0>)
    b1ac:	0011      	movs	r1, r2
    b1ae:	0018      	movs	r0, r3
    b1b0:	4b3a      	ldr	r3, [pc, #232]	; (b29c <trx_sram_write+0x1ac>)
    b1b2:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b1b4:	46c0      	nop			; (mov r8, r8)
    b1b6:	4b36      	ldr	r3, [pc, #216]	; (b290 <trx_sram_write+0x1a0>)
    b1b8:	0018      	movs	r0, r3
    b1ba:	4b39      	ldr	r3, [pc, #228]	; (b2a0 <trx_sram_write+0x1b0>)
    b1bc:	4798      	blx	r3
    b1be:	0003      	movs	r3, r0
    b1c0:	001a      	movs	r2, r3
    b1c2:	2301      	movs	r3, #1
    b1c4:	4053      	eors	r3, r2
    b1c6:	b2db      	uxtb	r3, r3
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d1f4      	bne.n	b1b6 <trx_sram_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b1cc:	46c0      	nop			; (mov r8, r8)
    b1ce:	4b30      	ldr	r3, [pc, #192]	; (b290 <trx_sram_write+0x1a0>)
    b1d0:	0018      	movs	r0, r3
    b1d2:	4b34      	ldr	r3, [pc, #208]	; (b2a4 <trx_sram_write+0x1b4>)
    b1d4:	4798      	blx	r3
    b1d6:	0003      	movs	r3, r0
    b1d8:	001a      	movs	r2, r3
    b1da:	2301      	movs	r3, #1
    b1dc:	4053      	eors	r3, r2
    b1de:	b2db      	uxtb	r3, r3
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d1f4      	bne.n	b1ce <trx_sram_write+0xde>
	}
	spi_read(&master_1, &dummy_read);
    b1e4:	4a30      	ldr	r2, [pc, #192]	; (b2a8 <trx_sram_write+0x1b8>)
    b1e6:	4b2a      	ldr	r3, [pc, #168]	; (b290 <trx_sram_write+0x1a0>)
    b1e8:	0011      	movs	r1, r2
    b1ea:	0018      	movs	r0, r3
    b1ec:	4b2f      	ldr	r3, [pc, #188]	; (b2ac <trx_sram_write+0x1bc>)
    b1ee:	4798      	blx	r3

	while (length--) {
    b1f0:	e033      	b.n	b25a <trx_sram_write+0x16a>
		while (!spi_is_ready_to_write(&master_1)) {
    b1f2:	46c0      	nop			; (mov r8, r8)
    b1f4:	4b26      	ldr	r3, [pc, #152]	; (b290 <trx_sram_write+0x1a0>)
    b1f6:	0018      	movs	r0, r3
    b1f8:	4b27      	ldr	r3, [pc, #156]	; (b298 <trx_sram_write+0x1a8>)
    b1fa:	4798      	blx	r3
    b1fc:	0003      	movs	r3, r0
    b1fe:	001a      	movs	r2, r3
    b200:	2301      	movs	r3, #1
    b202:	4053      	eors	r3, r2
    b204:	b2db      	uxtb	r3, r3
    b206:	2b00      	cmp	r3, #0
    b208:	d1f4      	bne.n	b1f4 <trx_sram_write+0x104>
		}
		spi_write(&master_1, *data++);
    b20a:	683b      	ldr	r3, [r7, #0]
    b20c:	1c5a      	adds	r2, r3, #1
    b20e:	603a      	str	r2, [r7, #0]
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	b29a      	uxth	r2, r3
    b214:	4b1e      	ldr	r3, [pc, #120]	; (b290 <trx_sram_write+0x1a0>)
    b216:	0011      	movs	r1, r2
    b218:	0018      	movs	r0, r3
    b21a:	4b20      	ldr	r3, [pc, #128]	; (b29c <trx_sram_write+0x1ac>)
    b21c:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    b21e:	46c0      	nop			; (mov r8, r8)
    b220:	4b1b      	ldr	r3, [pc, #108]	; (b290 <trx_sram_write+0x1a0>)
    b222:	0018      	movs	r0, r3
    b224:	4b1e      	ldr	r3, [pc, #120]	; (b2a0 <trx_sram_write+0x1b0>)
    b226:	4798      	blx	r3
    b228:	0003      	movs	r3, r0
    b22a:	001a      	movs	r2, r3
    b22c:	2301      	movs	r3, #1
    b22e:	4053      	eors	r3, r2
    b230:	b2db      	uxtb	r3, r3
    b232:	2b00      	cmp	r3, #0
    b234:	d1f4      	bne.n	b220 <trx_sram_write+0x130>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	4b15      	ldr	r3, [pc, #84]	; (b290 <trx_sram_write+0x1a0>)
    b23a:	0018      	movs	r0, r3
    b23c:	4b19      	ldr	r3, [pc, #100]	; (b2a4 <trx_sram_write+0x1b4>)
    b23e:	4798      	blx	r3
    b240:	0003      	movs	r3, r0
    b242:	001a      	movs	r2, r3
    b244:	2301      	movs	r3, #1
    b246:	4053      	eors	r3, r2
    b248:	b2db      	uxtb	r3, r3
    b24a:	2b00      	cmp	r3, #0
    b24c:	d1f4      	bne.n	b238 <trx_sram_write+0x148>
		}
		spi_read(&master_1, &dummy_read);
    b24e:	4a16      	ldr	r2, [pc, #88]	; (b2a8 <trx_sram_write+0x1b8>)
    b250:	4b0f      	ldr	r3, [pc, #60]	; (b290 <trx_sram_write+0x1a0>)
    b252:	0011      	movs	r1, r2
    b254:	0018      	movs	r0, r3
    b256:	4b15      	ldr	r3, [pc, #84]	; (b2ac <trx_sram_write+0x1bc>)
    b258:	4798      	blx	r3
	while (length--) {
    b25a:	1dbb      	adds	r3, r7, #6
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	1dba      	adds	r2, r7, #6
    b260:	1e59      	subs	r1, r3, #1
    b262:	7011      	strb	r1, [r2, #0]
    b264:	2b00      	cmp	r3, #0
    b266:	d1c4      	bne.n	b1f2 <trx_sram_write+0x102>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    b268:	4908      	ldr	r1, [pc, #32]	; (b28c <trx_sram_write+0x19c>)
    b26a:	4b09      	ldr	r3, [pc, #36]	; (b290 <trx_sram_write+0x1a0>)
    b26c:	2200      	movs	r2, #0
    b26e:	0018      	movs	r0, r3
    b270:	4b08      	ldr	r3, [pc, #32]	; (b294 <trx_sram_write+0x1a4>)
    b272:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    b274:	230f      	movs	r3, #15
    b276:	18fb      	adds	r3, r7, r3
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	0018      	movs	r0, r3
    b27c:	4b0c      	ldr	r3, [pc, #48]	; (b2b0 <trx_sram_write+0x1c0>)
    b27e:	4798      	blx	r3
}
    b280:	46c0      	nop			; (mov r8, r8)
    b282:	46bd      	mov	sp, r7
    b284:	b004      	add	sp, #16
    b286:	bd80      	pop	{r7, pc}
    b288:	0000a59d 	.word	0x0000a59d
    b28c:	20001a98 	.word	0x20001a98
    b290:	20001a84 	.word	0x20001a84
    b294:	00014ded 	.word	0x00014ded
    b298:	0000a899 	.word	0x0000a899
    b29c:	0000a8e9 	.word	0x0000a8e9
    b2a0:	0000a871 	.word	0x0000a871
    b2a4:	0000a8c1 	.word	0x0000a8c1
    b2a8:	20001a90 	.word	0x20001a90
    b2ac:	0000a931 	.word	0x0000a931
    b2b0:	0000a5e5 	.word	0x0000a5e5

0000b2b4 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    b2b4:	b580      	push	{r7, lr}
    b2b6:	b084      	sub	sp, #16
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	6039      	str	r1, [r7, #0]
    b2bc:	0011      	movs	r1, r2
    b2be:	1dfb      	adds	r3, r7, #7
    b2c0:	1c02      	adds	r2, r0, #0
    b2c2:	701a      	strb	r2, [r3, #0]
    b2c4:	1dbb      	adds	r3, r7, #6
    b2c6:	1c0a      	adds	r2, r1, #0
    b2c8:	701a      	strb	r2, [r3, #0]
	delay_us(1); /* wap_rf4ce */
    b2ca:	2001      	movs	r0, #1
    b2cc:	4b63      	ldr	r3, [pc, #396]	; (b45c <trx_sram_read+0x1a8>)
    b2ce:	4798      	blx	r3

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    b2d0:	4b63      	ldr	r3, [pc, #396]	; (b460 <trx_sram_read+0x1ac>)
    b2d2:	4798      	blx	r3
    b2d4:	0002      	movs	r2, r0
    b2d6:	230f      	movs	r3, #15
    b2d8:	18fb      	adds	r3, r7, r3
    b2da:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    b2dc:	4961      	ldr	r1, [pc, #388]	; (b464 <trx_sram_read+0x1b0>)
    b2de:	4b62      	ldr	r3, [pc, #392]	; (b468 <trx_sram_read+0x1b4>)
    b2e0:	2201      	movs	r2, #1
    b2e2:	0018      	movs	r0, r3
    b2e4:	4b61      	ldr	r3, [pc, #388]	; (b46c <trx_sram_read+0x1b8>)
    b2e6:	4798      	blx	r3

	temp = TRX_CMD_SR;
    b2e8:	230c      	movs	r3, #12
    b2ea:	18fb      	adds	r3, r7, r3
    b2ec:	2200      	movs	r2, #0
    b2ee:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master_1)) {
    b2f0:	46c0      	nop			; (mov r8, r8)
    b2f2:	4b5d      	ldr	r3, [pc, #372]	; (b468 <trx_sram_read+0x1b4>)
    b2f4:	0018      	movs	r0, r3
    b2f6:	4b5e      	ldr	r3, [pc, #376]	; (b470 <trx_sram_read+0x1bc>)
    b2f8:	4798      	blx	r3
    b2fa:	0003      	movs	r3, r0
    b2fc:	001a      	movs	r2, r3
    b2fe:	2301      	movs	r3, #1
    b300:	4053      	eors	r3, r2
    b302:	b2db      	uxtb	r3, r3
    b304:	2b00      	cmp	r3, #0
    b306:	d1f4      	bne.n	b2f2 <trx_sram_read+0x3e>
	}
	spi_write(&master_1, temp);
    b308:	230c      	movs	r3, #12
    b30a:	18fb      	adds	r3, r7, r3
    b30c:	881a      	ldrh	r2, [r3, #0]
    b30e:	4b56      	ldr	r3, [pc, #344]	; (b468 <trx_sram_read+0x1b4>)
    b310:	0011      	movs	r1, r2
    b312:	0018      	movs	r0, r3
    b314:	4b57      	ldr	r3, [pc, #348]	; (b474 <trx_sram_read+0x1c0>)
    b316:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b318:	46c0      	nop			; (mov r8, r8)
    b31a:	4b53      	ldr	r3, [pc, #332]	; (b468 <trx_sram_read+0x1b4>)
    b31c:	0018      	movs	r0, r3
    b31e:	4b56      	ldr	r3, [pc, #344]	; (b478 <trx_sram_read+0x1c4>)
    b320:	4798      	blx	r3
    b322:	0003      	movs	r3, r0
    b324:	001a      	movs	r2, r3
    b326:	2301      	movs	r3, #1
    b328:	4053      	eors	r3, r2
    b32a:	b2db      	uxtb	r3, r3
    b32c:	2b00      	cmp	r3, #0
    b32e:	d1f4      	bne.n	b31a <trx_sram_read+0x66>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b330:	46c0      	nop			; (mov r8, r8)
    b332:	4b4d      	ldr	r3, [pc, #308]	; (b468 <trx_sram_read+0x1b4>)
    b334:	0018      	movs	r0, r3
    b336:	4b51      	ldr	r3, [pc, #324]	; (b47c <trx_sram_read+0x1c8>)
    b338:	4798      	blx	r3
    b33a:	0003      	movs	r3, r0
    b33c:	001a      	movs	r2, r3
    b33e:	2301      	movs	r3, #1
    b340:	4053      	eors	r3, r2
    b342:	b2db      	uxtb	r3, r3
    b344:	2b00      	cmp	r3, #0
    b346:	d1f4      	bne.n	b332 <trx_sram_read+0x7e>
	}
	spi_read(&master_1, &dummy_read);
    b348:	4a4d      	ldr	r2, [pc, #308]	; (b480 <trx_sram_read+0x1cc>)
    b34a:	4b47      	ldr	r3, [pc, #284]	; (b468 <trx_sram_read+0x1b4>)
    b34c:	0011      	movs	r1, r2
    b34e:	0018      	movs	r0, r3
    b350:	4b4c      	ldr	r3, [pc, #304]	; (b484 <trx_sram_read+0x1d0>)
    b352:	4798      	blx	r3

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master_1)) {
    b354:	46c0      	nop			; (mov r8, r8)
    b356:	4b44      	ldr	r3, [pc, #272]	; (b468 <trx_sram_read+0x1b4>)
    b358:	0018      	movs	r0, r3
    b35a:	4b45      	ldr	r3, [pc, #276]	; (b470 <trx_sram_read+0x1bc>)
    b35c:	4798      	blx	r3
    b35e:	0003      	movs	r3, r0
    b360:	001a      	movs	r2, r3
    b362:	2301      	movs	r3, #1
    b364:	4053      	eors	r3, r2
    b366:	b2db      	uxtb	r3, r3
    b368:	2b00      	cmp	r3, #0
    b36a:	d1f4      	bne.n	b356 <trx_sram_read+0xa2>
	}
	spi_write(&master_1, addr);
    b36c:	1dfb      	adds	r3, r7, #7
    b36e:	781b      	ldrb	r3, [r3, #0]
    b370:	b29a      	uxth	r2, r3
    b372:	4b3d      	ldr	r3, [pc, #244]	; (b468 <trx_sram_read+0x1b4>)
    b374:	0011      	movs	r1, r2
    b376:	0018      	movs	r0, r3
    b378:	4b3e      	ldr	r3, [pc, #248]	; (b474 <trx_sram_read+0x1c0>)
    b37a:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b37c:	46c0      	nop			; (mov r8, r8)
    b37e:	4b3a      	ldr	r3, [pc, #232]	; (b468 <trx_sram_read+0x1b4>)
    b380:	0018      	movs	r0, r3
    b382:	4b3d      	ldr	r3, [pc, #244]	; (b478 <trx_sram_read+0x1c4>)
    b384:	4798      	blx	r3
    b386:	0003      	movs	r3, r0
    b388:	001a      	movs	r2, r3
    b38a:	2301      	movs	r3, #1
    b38c:	4053      	eors	r3, r2
    b38e:	b2db      	uxtb	r3, r3
    b390:	2b00      	cmp	r3, #0
    b392:	d1f4      	bne.n	b37e <trx_sram_read+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b394:	46c0      	nop			; (mov r8, r8)
    b396:	4b34      	ldr	r3, [pc, #208]	; (b468 <trx_sram_read+0x1b4>)
    b398:	0018      	movs	r0, r3
    b39a:	4b38      	ldr	r3, [pc, #224]	; (b47c <trx_sram_read+0x1c8>)
    b39c:	4798      	blx	r3
    b39e:	0003      	movs	r3, r0
    b3a0:	001a      	movs	r2, r3
    b3a2:	2301      	movs	r3, #1
    b3a4:	4053      	eors	r3, r2
    b3a6:	b2db      	uxtb	r3, r3
    b3a8:	2b00      	cmp	r3, #0
    b3aa:	d1f4      	bne.n	b396 <trx_sram_read+0xe2>
	}
	spi_read(&master_1, &dummy_read);
    b3ac:	4a34      	ldr	r2, [pc, #208]	; (b480 <trx_sram_read+0x1cc>)
    b3ae:	4b2e      	ldr	r3, [pc, #184]	; (b468 <trx_sram_read+0x1b4>)
    b3b0:	0011      	movs	r1, r2
    b3b2:	0018      	movs	r0, r3
    b3b4:	4b33      	ldr	r3, [pc, #204]	; (b484 <trx_sram_read+0x1d0>)
    b3b6:	4798      	blx	r3

	/* Upload the received byte in the user provided location */
	while (length--) {
    b3b8:	e038      	b.n	b42c <trx_sram_read+0x178>
		while (!spi_is_ready_to_write(&master_1)) {
    b3ba:	46c0      	nop			; (mov r8, r8)
    b3bc:	4b2a      	ldr	r3, [pc, #168]	; (b468 <trx_sram_read+0x1b4>)
    b3be:	0018      	movs	r0, r3
    b3c0:	4b2b      	ldr	r3, [pc, #172]	; (b470 <trx_sram_read+0x1bc>)
    b3c2:	4798      	blx	r3
    b3c4:	0003      	movs	r3, r0
    b3c6:	001a      	movs	r2, r3
    b3c8:	2301      	movs	r3, #1
    b3ca:	4053      	eors	r3, r2
    b3cc:	b2db      	uxtb	r3, r3
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d1f4      	bne.n	b3bc <trx_sram_read+0x108>
		}
		spi_write(&master_1, 0);
    b3d2:	4b25      	ldr	r3, [pc, #148]	; (b468 <trx_sram_read+0x1b4>)
    b3d4:	2100      	movs	r1, #0
    b3d6:	0018      	movs	r0, r3
    b3d8:	4b26      	ldr	r3, [pc, #152]	; (b474 <trx_sram_read+0x1c0>)
    b3da:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    b3dc:	46c0      	nop			; (mov r8, r8)
    b3de:	4b22      	ldr	r3, [pc, #136]	; (b468 <trx_sram_read+0x1b4>)
    b3e0:	0018      	movs	r0, r3
    b3e2:	4b25      	ldr	r3, [pc, #148]	; (b478 <trx_sram_read+0x1c4>)
    b3e4:	4798      	blx	r3
    b3e6:	0003      	movs	r3, r0
    b3e8:	001a      	movs	r2, r3
    b3ea:	2301      	movs	r3, #1
    b3ec:	4053      	eors	r3, r2
    b3ee:	b2db      	uxtb	r3, r3
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	d1f4      	bne.n	b3de <trx_sram_read+0x12a>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master_1)) {
    b3f4:	46c0      	nop			; (mov r8, r8)
    b3f6:	4b1c      	ldr	r3, [pc, #112]	; (b468 <trx_sram_read+0x1b4>)
    b3f8:	0018      	movs	r0, r3
    b3fa:	4b20      	ldr	r3, [pc, #128]	; (b47c <trx_sram_read+0x1c8>)
    b3fc:	4798      	blx	r3
    b3fe:	0003      	movs	r3, r0
    b400:	001a      	movs	r2, r3
    b402:	2301      	movs	r3, #1
    b404:	4053      	eors	r3, r2
    b406:	b2db      	uxtb	r3, r3
    b408:	2b00      	cmp	r3, #0
    b40a:	d1f4      	bne.n	b3f6 <trx_sram_read+0x142>
		}
		spi_read(&master_1, &temp);
    b40c:	230c      	movs	r3, #12
    b40e:	18fa      	adds	r2, r7, r3
    b410:	4b15      	ldr	r3, [pc, #84]	; (b468 <trx_sram_read+0x1b4>)
    b412:	0011      	movs	r1, r2
    b414:	0018      	movs	r0, r3
    b416:	4b1b      	ldr	r3, [pc, #108]	; (b484 <trx_sram_read+0x1d0>)
    b418:	4798      	blx	r3
		*data = temp;
    b41a:	230c      	movs	r3, #12
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	881b      	ldrh	r3, [r3, #0]
    b420:	b2da      	uxtb	r2, r3
    b422:	683b      	ldr	r3, [r7, #0]
    b424:	701a      	strb	r2, [r3, #0]
		data++;
    b426:	683b      	ldr	r3, [r7, #0]
    b428:	3301      	adds	r3, #1
    b42a:	603b      	str	r3, [r7, #0]
	while (length--) {
    b42c:	1dbb      	adds	r3, r7, #6
    b42e:	781b      	ldrb	r3, [r3, #0]
    b430:	1dba      	adds	r2, r7, #6
    b432:	1e59      	subs	r1, r3, #1
    b434:	7011      	strb	r1, [r2, #0]
    b436:	2b00      	cmp	r3, #0
    b438:	d1bf      	bne.n	b3ba <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    b43a:	490a      	ldr	r1, [pc, #40]	; (b464 <trx_sram_read+0x1b0>)
    b43c:	4b0a      	ldr	r3, [pc, #40]	; (b468 <trx_sram_read+0x1b4>)
    b43e:	2200      	movs	r2, #0
    b440:	0018      	movs	r0, r3
    b442:	4b0a      	ldr	r3, [pc, #40]	; (b46c <trx_sram_read+0x1b8>)
    b444:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    b446:	230f      	movs	r3, #15
    b448:	18fb      	adds	r3, r7, r3
    b44a:	781b      	ldrb	r3, [r3, #0]
    b44c:	0018      	movs	r0, r3
    b44e:	4b0e      	ldr	r3, [pc, #56]	; (b488 <trx_sram_read+0x1d4>)
    b450:	4798      	blx	r3
}
    b452:	46c0      	nop			; (mov r8, r8)
    b454:	46bd      	mov	sp, r7
    b456:	b004      	add	sp, #16
    b458:	bd80      	pop	{r7, pc}
    b45a:	46c0      	nop			; (mov r8, r8)
    b45c:	000126cd 	.word	0x000126cd
    b460:	0000a59d 	.word	0x0000a59d
    b464:	20001a98 	.word	0x20001a98
    b468:	20001a84 	.word	0x20001a84
    b46c:	00014ded 	.word	0x00014ded
    b470:	0000a899 	.word	0x0000a899
    b474:	0000a8e9 	.word	0x0000a8e9
    b478:	0000a871 	.word	0x0000a871
    b47c:	0000a8c1 	.word	0x0000a8c1
    b480:	20001a90 	.word	0x20001a90
    b484:	0000a931 	.word	0x0000a931
    b488:	0000a5e5 	.word	0x0000a5e5

0000b48c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    b48c:	b580      	push	{r7, lr}
    b48e:	b084      	sub	sp, #16
    b490:	af00      	add	r7, sp, #0
    b492:	6039      	str	r1, [r7, #0]
    b494:	0011      	movs	r1, r2
    b496:	1dfb      	adds	r3, r7, #7
    b498:	1c02      	adds	r2, r0, #0
    b49a:	701a      	strb	r2, [r3, #0]
    b49c:	1dbb      	adds	r3, r7, #6
    b49e:	1c0a      	adds	r2, r1, #0
    b4a0:	701a      	strb	r2, [r3, #0]
	uint8_t *odata;
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
    b4a2:	2308      	movs	r3, #8
    b4a4:	18fb      	adds	r3, r7, r3
    b4a6:	2200      	movs	r2, #0
    b4a8:	801a      	strh	r2, [r3, #0]
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    b4aa:	2001      	movs	r0, #1
    b4ac:	4b9a      	ldr	r3, [pc, #616]	; (b718 <trx_aes_wrrd+0x28c>)
    b4ae:	4798      	blx	r3

	ENTER_TRX_REGION();
    b4b0:	2100      	movs	r1, #0
    b4b2:	2000      	movs	r0, #0
    b4b4:	4b99      	ldr	r3, [pc, #612]	; (b71c <trx_aes_wrrd+0x290>)
    b4b6:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master_1, &slave, true);
    b4b8:	4999      	ldr	r1, [pc, #612]	; (b720 <trx_aes_wrrd+0x294>)
    b4ba:	4b9a      	ldr	r3, [pc, #616]	; (b724 <trx_aes_wrrd+0x298>)
    b4bc:	2201      	movs	r2, #1
    b4be:	0018      	movs	r0, r3
    b4c0:	4b99      	ldr	r3, [pc, #612]	; (b728 <trx_aes_wrrd+0x29c>)
    b4c2:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    b4c4:	230b      	movs	r3, #11
    b4c6:	18fb      	adds	r3, r7, r3
    b4c8:	2240      	movs	r2, #64	; 0x40
    b4ca:	701a      	strb	r2, [r3, #0]

	while (!spi_is_ready_to_write(&master_1)) {
    b4cc:	46c0      	nop			; (mov r8, r8)
    b4ce:	4b95      	ldr	r3, [pc, #596]	; (b724 <trx_aes_wrrd+0x298>)
    b4d0:	0018      	movs	r0, r3
    b4d2:	4b96      	ldr	r3, [pc, #600]	; (b72c <trx_aes_wrrd+0x2a0>)
    b4d4:	4798      	blx	r3
    b4d6:	0003      	movs	r3, r0
    b4d8:	001a      	movs	r2, r3
    b4da:	2301      	movs	r3, #1
    b4dc:	4053      	eors	r3, r2
    b4de:	b2db      	uxtb	r3, r3
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d1f4      	bne.n	b4ce <trx_aes_wrrd+0x42>
	}
	spi_write(&master_1, temp);
    b4e4:	230b      	movs	r3, #11
    b4e6:	18fb      	adds	r3, r7, r3
    b4e8:	781b      	ldrb	r3, [r3, #0]
    b4ea:	b29a      	uxth	r2, r3
    b4ec:	4b8d      	ldr	r3, [pc, #564]	; (b724 <trx_aes_wrrd+0x298>)
    b4ee:	0011      	movs	r1, r2
    b4f0:	0018      	movs	r0, r3
    b4f2:	4b8f      	ldr	r3, [pc, #572]	; (b730 <trx_aes_wrrd+0x2a4>)
    b4f4:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	4b8a      	ldr	r3, [pc, #552]	; (b724 <trx_aes_wrrd+0x298>)
    b4fa:	0018      	movs	r0, r3
    b4fc:	4b8d      	ldr	r3, [pc, #564]	; (b734 <trx_aes_wrrd+0x2a8>)
    b4fe:	4798      	blx	r3
    b500:	0003      	movs	r3, r0
    b502:	001a      	movs	r2, r3
    b504:	2301      	movs	r3, #1
    b506:	4053      	eors	r3, r2
    b508:	b2db      	uxtb	r3, r3
    b50a:	2b00      	cmp	r3, #0
    b50c:	d1f4      	bne.n	b4f8 <trx_aes_wrrd+0x6c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b50e:	46c0      	nop			; (mov r8, r8)
    b510:	4b84      	ldr	r3, [pc, #528]	; (b724 <trx_aes_wrrd+0x298>)
    b512:	0018      	movs	r0, r3
    b514:	4b88      	ldr	r3, [pc, #544]	; (b738 <trx_aes_wrrd+0x2ac>)
    b516:	4798      	blx	r3
    b518:	0003      	movs	r3, r0
    b51a:	001a      	movs	r2, r3
    b51c:	2301      	movs	r3, #1
    b51e:	4053      	eors	r3, r2
    b520:	b2db      	uxtb	r3, r3
    b522:	2b00      	cmp	r3, #0
    b524:	d1f4      	bne.n	b510 <trx_aes_wrrd+0x84>
	}
	spi_read(&master_1, &dummy_read);
    b526:	4a85      	ldr	r2, [pc, #532]	; (b73c <trx_aes_wrrd+0x2b0>)
    b528:	4b7e      	ldr	r3, [pc, #504]	; (b724 <trx_aes_wrrd+0x298>)
    b52a:	0011      	movs	r1, r2
    b52c:	0018      	movs	r0, r3
    b52e:	4b84      	ldr	r3, [pc, #528]	; (b740 <trx_aes_wrrd+0x2b4>)
    b530:	4798      	blx	r3

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master_1)) {
    b532:	46c0      	nop			; (mov r8, r8)
    b534:	4b7b      	ldr	r3, [pc, #492]	; (b724 <trx_aes_wrrd+0x298>)
    b536:	0018      	movs	r0, r3
    b538:	4b7c      	ldr	r3, [pc, #496]	; (b72c <trx_aes_wrrd+0x2a0>)
    b53a:	4798      	blx	r3
    b53c:	0003      	movs	r3, r0
    b53e:	001a      	movs	r2, r3
    b540:	2301      	movs	r3, #1
    b542:	4053      	eors	r3, r2
    b544:	b2db      	uxtb	r3, r3
    b546:	2b00      	cmp	r3, #0
    b548:	d1f4      	bne.n	b534 <trx_aes_wrrd+0xa8>
	}
	spi_write(&master_1, addr);
    b54a:	1dfb      	adds	r3, r7, #7
    b54c:	781b      	ldrb	r3, [r3, #0]
    b54e:	b29a      	uxth	r2, r3
    b550:	4b74      	ldr	r3, [pc, #464]	; (b724 <trx_aes_wrrd+0x298>)
    b552:	0011      	movs	r1, r2
    b554:	0018      	movs	r0, r3
    b556:	4b76      	ldr	r3, [pc, #472]	; (b730 <trx_aes_wrrd+0x2a4>)
    b558:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b55a:	46c0      	nop			; (mov r8, r8)
    b55c:	4b71      	ldr	r3, [pc, #452]	; (b724 <trx_aes_wrrd+0x298>)
    b55e:	0018      	movs	r0, r3
    b560:	4b74      	ldr	r3, [pc, #464]	; (b734 <trx_aes_wrrd+0x2a8>)
    b562:	4798      	blx	r3
    b564:	0003      	movs	r3, r0
    b566:	001a      	movs	r2, r3
    b568:	2301      	movs	r3, #1
    b56a:	4053      	eors	r3, r2
    b56c:	b2db      	uxtb	r3, r3
    b56e:	2b00      	cmp	r3, #0
    b570:	d1f4      	bne.n	b55c <trx_aes_wrrd+0xd0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b572:	46c0      	nop			; (mov r8, r8)
    b574:	4b6b      	ldr	r3, [pc, #428]	; (b724 <trx_aes_wrrd+0x298>)
    b576:	0018      	movs	r0, r3
    b578:	4b6f      	ldr	r3, [pc, #444]	; (b738 <trx_aes_wrrd+0x2ac>)
    b57a:	4798      	blx	r3
    b57c:	0003      	movs	r3, r0
    b57e:	001a      	movs	r2, r3
    b580:	2301      	movs	r3, #1
    b582:	4053      	eors	r3, r2
    b584:	b2db      	uxtb	r3, r3
    b586:	2b00      	cmp	r3, #0
    b588:	d1f4      	bne.n	b574 <trx_aes_wrrd+0xe8>
	}
	spi_read(&master_1, &dummy_read);
    b58a:	4a6c      	ldr	r2, [pc, #432]	; (b73c <trx_aes_wrrd+0x2b0>)
    b58c:	4b65      	ldr	r3, [pc, #404]	; (b724 <trx_aes_wrrd+0x298>)
    b58e:	0011      	movs	r1, r2
    b590:	0018      	movs	r0, r3
    b592:	4b6b      	ldr	r3, [pc, #428]	; (b740 <trx_aes_wrrd+0x2b4>)
    b594:	4798      	blx	r3

	/* now transfer data */
	odata = idata;
    b596:	683b      	ldr	r3, [r7, #0]
    b598:	60fb      	str	r3, [r7, #12]

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master_1)) {
    b59a:	46c0      	nop			; (mov r8, r8)
    b59c:	4b61      	ldr	r3, [pc, #388]	; (b724 <trx_aes_wrrd+0x298>)
    b59e:	0018      	movs	r0, r3
    b5a0:	4b62      	ldr	r3, [pc, #392]	; (b72c <trx_aes_wrrd+0x2a0>)
    b5a2:	4798      	blx	r3
    b5a4:	0003      	movs	r3, r0
    b5a6:	001a      	movs	r2, r3
    b5a8:	2301      	movs	r3, #1
    b5aa:	4053      	eors	r3, r2
    b5ac:	b2db      	uxtb	r3, r3
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	d1f4      	bne.n	b59c <trx_aes_wrrd+0x110>
	}
	spi_write(&master_1, *idata++);
    b5b2:	683b      	ldr	r3, [r7, #0]
    b5b4:	1c5a      	adds	r2, r3, #1
    b5b6:	603a      	str	r2, [r7, #0]
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	b29a      	uxth	r2, r3
    b5bc:	4b59      	ldr	r3, [pc, #356]	; (b724 <trx_aes_wrrd+0x298>)
    b5be:	0011      	movs	r1, r2
    b5c0:	0018      	movs	r0, r3
    b5c2:	4b5b      	ldr	r3, [pc, #364]	; (b730 <trx_aes_wrrd+0x2a4>)
    b5c4:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	4b56      	ldr	r3, [pc, #344]	; (b724 <trx_aes_wrrd+0x298>)
    b5ca:	0018      	movs	r0, r3
    b5cc:	4b59      	ldr	r3, [pc, #356]	; (b734 <trx_aes_wrrd+0x2a8>)
    b5ce:	4798      	blx	r3
    b5d0:	0003      	movs	r3, r0
    b5d2:	001a      	movs	r2, r3
    b5d4:	2301      	movs	r3, #1
    b5d6:	4053      	eors	r3, r2
    b5d8:	b2db      	uxtb	r3, r3
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d1f4      	bne.n	b5c8 <trx_aes_wrrd+0x13c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master_1)) {
    b5de:	46c0      	nop			; (mov r8, r8)
    b5e0:	4b50      	ldr	r3, [pc, #320]	; (b724 <trx_aes_wrrd+0x298>)
    b5e2:	0018      	movs	r0, r3
    b5e4:	4b54      	ldr	r3, [pc, #336]	; (b738 <trx_aes_wrrd+0x2ac>)
    b5e6:	4798      	blx	r3
    b5e8:	0003      	movs	r3, r0
    b5ea:	001a      	movs	r2, r3
    b5ec:	2301      	movs	r3, #1
    b5ee:	4053      	eors	r3, r2
    b5f0:	b2db      	uxtb	r3, r3
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d1f4      	bne.n	b5e0 <trx_aes_wrrd+0x154>
	}
	spi_read(&master_1, &dummy_read);
    b5f6:	4a51      	ldr	r2, [pc, #324]	; (b73c <trx_aes_wrrd+0x2b0>)
    b5f8:	4b4a      	ldr	r3, [pc, #296]	; (b724 <trx_aes_wrrd+0x298>)
    b5fa:	0011      	movs	r1, r2
    b5fc:	0018      	movs	r0, r3
    b5fe:	4b50      	ldr	r3, [pc, #320]	; (b740 <trx_aes_wrrd+0x2b4>)
    b600:	4798      	blx	r3

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    b602:	e041      	b.n	b688 <trx_aes_wrrd+0x1fc>
		while (!spi_is_ready_to_write(&master_1)) {
    b604:	46c0      	nop			; (mov r8, r8)
    b606:	4b47      	ldr	r3, [pc, #284]	; (b724 <trx_aes_wrrd+0x298>)
    b608:	0018      	movs	r0, r3
    b60a:	4b48      	ldr	r3, [pc, #288]	; (b72c <trx_aes_wrrd+0x2a0>)
    b60c:	4798      	blx	r3
    b60e:	0003      	movs	r3, r0
    b610:	001a      	movs	r2, r3
    b612:	2301      	movs	r3, #1
    b614:	4053      	eors	r3, r2
    b616:	b2db      	uxtb	r3, r3
    b618:	2b00      	cmp	r3, #0
    b61a:	d1f4      	bne.n	b606 <trx_aes_wrrd+0x17a>
		}
		spi_write(&master_1, *idata++);
    b61c:	683b      	ldr	r3, [r7, #0]
    b61e:	1c5a      	adds	r2, r3, #1
    b620:	603a      	str	r2, [r7, #0]
    b622:	781b      	ldrb	r3, [r3, #0]
    b624:	b29a      	uxth	r2, r3
    b626:	4b3f      	ldr	r3, [pc, #252]	; (b724 <trx_aes_wrrd+0x298>)
    b628:	0011      	movs	r1, r2
    b62a:	0018      	movs	r0, r3
    b62c:	4b40      	ldr	r3, [pc, #256]	; (b730 <trx_aes_wrrd+0x2a4>)
    b62e:	4798      	blx	r3
		while (!spi_is_write_complete(&master_1)) {
    b630:	46c0      	nop			; (mov r8, r8)
    b632:	4b3c      	ldr	r3, [pc, #240]	; (b724 <trx_aes_wrrd+0x298>)
    b634:	0018      	movs	r0, r3
    b636:	4b3f      	ldr	r3, [pc, #252]	; (b734 <trx_aes_wrrd+0x2a8>)
    b638:	4798      	blx	r3
    b63a:	0003      	movs	r3, r0
    b63c:	001a      	movs	r2, r3
    b63e:	2301      	movs	r3, #1
    b640:	4053      	eors	r3, r2
    b642:	b2db      	uxtb	r3, r3
    b644:	2b00      	cmp	r3, #0
    b646:	d1f4      	bne.n	b632 <trx_aes_wrrd+0x1a6>
		}
		while (!spi_is_ready_to_read(&master_1)) {
    b648:	46c0      	nop			; (mov r8, r8)
    b64a:	4b36      	ldr	r3, [pc, #216]	; (b724 <trx_aes_wrrd+0x298>)
    b64c:	0018      	movs	r0, r3
    b64e:	4b3a      	ldr	r3, [pc, #232]	; (b738 <trx_aes_wrrd+0x2ac>)
    b650:	4798      	blx	r3
    b652:	0003      	movs	r3, r0
    b654:	001a      	movs	r2, r3
    b656:	2301      	movs	r3, #1
    b658:	4053      	eors	r3, r2
    b65a:	b2db      	uxtb	r3, r3
    b65c:	2b00      	cmp	r3, #0
    b65e:	d1f4      	bne.n	b64a <trx_aes_wrrd+0x1be>
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master_1, &odata_var);
    b660:	2308      	movs	r3, #8
    b662:	18fa      	adds	r2, r7, r3
    b664:	4b2f      	ldr	r3, [pc, #188]	; (b724 <trx_aes_wrrd+0x298>)
    b666:	0011      	movs	r1, r2
    b668:	0018      	movs	r0, r3
    b66a:	4b35      	ldr	r3, [pc, #212]	; (b740 <trx_aes_wrrd+0x2b4>)
    b66c:	4798      	blx	r3
		*odata++ = (uint8_t)odata_var;
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	1c5a      	adds	r2, r3, #1
    b672:	60fa      	str	r2, [r7, #12]
    b674:	2208      	movs	r2, #8
    b676:	18ba      	adds	r2, r7, r2
    b678:	8812      	ldrh	r2, [r2, #0]
    b67a:	b2d2      	uxtb	r2, r2
    b67c:	701a      	strb	r2, [r3, #0]
#else
		spi_read(&master_1, (uint16_t *)odata++);
#endif
		length--;
    b67e:	1dbb      	adds	r3, r7, #6
    b680:	781a      	ldrb	r2, [r3, #0]
    b682:	1dbb      	adds	r3, r7, #6
    b684:	3a01      	subs	r2, #1
    b686:	701a      	strb	r2, [r3, #0]
	while (length > 0) {
    b688:	1dbb      	adds	r3, r7, #6
    b68a:	781b      	ldrb	r3, [r3, #0]
    b68c:	2b00      	cmp	r3, #0
    b68e:	d1b9      	bne.n	b604 <trx_aes_wrrd+0x178>
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master_1)) {
    b690:	46c0      	nop			; (mov r8, r8)
    b692:	4b24      	ldr	r3, [pc, #144]	; (b724 <trx_aes_wrrd+0x298>)
    b694:	0018      	movs	r0, r3
    b696:	4b25      	ldr	r3, [pc, #148]	; (b72c <trx_aes_wrrd+0x2a0>)
    b698:	4798      	blx	r3
    b69a:	0003      	movs	r3, r0
    b69c:	001a      	movs	r2, r3
    b69e:	2301      	movs	r3, #1
    b6a0:	4053      	eors	r3, r2
    b6a2:	b2db      	uxtb	r3, r3
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d1f4      	bne.n	b692 <trx_aes_wrrd+0x206>
	}
	spi_write(&master_1, 0);
    b6a8:	4b1e      	ldr	r3, [pc, #120]	; (b724 <trx_aes_wrrd+0x298>)
    b6aa:	2100      	movs	r1, #0
    b6ac:	0018      	movs	r0, r3
    b6ae:	4b20      	ldr	r3, [pc, #128]	; (b730 <trx_aes_wrrd+0x2a4>)
    b6b0:	4798      	blx	r3
	while (!spi_is_write_complete(&master_1)) {
    b6b2:	46c0      	nop			; (mov r8, r8)
    b6b4:	4b1b      	ldr	r3, [pc, #108]	; (b724 <trx_aes_wrrd+0x298>)
    b6b6:	0018      	movs	r0, r3
    b6b8:	4b1e      	ldr	r3, [pc, #120]	; (b734 <trx_aes_wrrd+0x2a8>)
    b6ba:	4798      	blx	r3
    b6bc:	0003      	movs	r3, r0
    b6be:	001a      	movs	r2, r3
    b6c0:	2301      	movs	r3, #1
    b6c2:	4053      	eors	r3, r2
    b6c4:	b2db      	uxtb	r3, r3
    b6c6:	2b00      	cmp	r3, #0
    b6c8:	d1f4      	bne.n	b6b4 <trx_aes_wrrd+0x228>
	}
	while (!spi_is_ready_to_read(&master_1)) {
    b6ca:	46c0      	nop			; (mov r8, r8)
    b6cc:	4b15      	ldr	r3, [pc, #84]	; (b724 <trx_aes_wrrd+0x298>)
    b6ce:	0018      	movs	r0, r3
    b6d0:	4b19      	ldr	r3, [pc, #100]	; (b738 <trx_aes_wrrd+0x2ac>)
    b6d2:	4798      	blx	r3
    b6d4:	0003      	movs	r3, r0
    b6d6:	001a      	movs	r2, r3
    b6d8:	2301      	movs	r3, #1
    b6da:	4053      	eors	r3, r2
    b6dc:	b2db      	uxtb	r3, r3
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d1f4      	bne.n	b6cc <trx_aes_wrrd+0x240>
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master_1, &odata_var);
    b6e2:	2308      	movs	r3, #8
    b6e4:	18fa      	adds	r2, r7, r3
    b6e6:	4b0f      	ldr	r3, [pc, #60]	; (b724 <trx_aes_wrrd+0x298>)
    b6e8:	0011      	movs	r1, r2
    b6ea:	0018      	movs	r0, r3
    b6ec:	4b14      	ldr	r3, [pc, #80]	; (b740 <trx_aes_wrrd+0x2b4>)
    b6ee:	4798      	blx	r3
	*odata = (uint8_t)odata_var;
    b6f0:	2308      	movs	r3, #8
    b6f2:	18fb      	adds	r3, r7, r3
    b6f4:	881b      	ldrh	r3, [r3, #0]
    b6f6:	b2da      	uxtb	r2, r3
    b6f8:	68fb      	ldr	r3, [r7, #12]
    b6fa:	701a      	strb	r2, [r3, #0]
#else
	spi_read(&master_1, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master_1, &slave, false);
    b6fc:	4908      	ldr	r1, [pc, #32]	; (b720 <trx_aes_wrrd+0x294>)
    b6fe:	4b09      	ldr	r3, [pc, #36]	; (b724 <trx_aes_wrrd+0x298>)
    b700:	2200      	movs	r2, #0
    b702:	0018      	movs	r0, r3
    b704:	4b08      	ldr	r3, [pc, #32]	; (b728 <trx_aes_wrrd+0x29c>)
    b706:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    b708:	2100      	movs	r1, #0
    b70a:	2000      	movs	r0, #0
    b70c:	4b0d      	ldr	r3, [pc, #52]	; (b744 <trx_aes_wrrd+0x2b8>)
    b70e:	4798      	blx	r3
}
    b710:	46c0      	nop			; (mov r8, r8)
    b712:	46bd      	mov	sp, r7
    b714:	b004      	add	sp, #16
    b716:	bd80      	pop	{r7, pc}
    b718:	000126cd 	.word	0x000126cd
    b71c:	00012b75 	.word	0x00012b75
    b720:	20001a98 	.word	0x20001a98
    b724:	20001a84 	.word	0x20001a84
    b728:	00014ded 	.word	0x00014ded
    b72c:	0000a899 	.word	0x0000a899
    b730:	0000a8e9 	.word	0x0000a8e9
    b734:	0000a871 	.word	0x0000a871
    b738:	0000a8c1 	.word	0x0000a8c1
    b73c:	20001a90 	.word	0x20001a90
    b740:	0000a931 	.word	0x0000a931
    b744:	00012b2d 	.word	0x00012b2d

0000b748 <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
    b748:	b580      	push	{r7, lr}
    b74a:	b084      	sub	sp, #16
    b74c:	af00      	add	r7, sp, #0
    b74e:	6078      	str	r0, [r7, #4]
      size_t len;
      char* copy;

      len = strlen(str) + 1;
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	0018      	movs	r0, r3
    b754:	4b0d      	ldr	r3, [pc, #52]	; (b78c <cJSON_strdup+0x44>)
    b756:	4798      	blx	r3
    b758:	0003      	movs	r3, r0
    b75a:	3301      	adds	r3, #1
    b75c:	60fb      	str	r3, [r7, #12]
      if (!(copy = (char*)cJSON_malloc(len))) return 0;
    b75e:	4b0c      	ldr	r3, [pc, #48]	; (b790 <cJSON_strdup+0x48>)
    b760:	681b      	ldr	r3, [r3, #0]
    b762:	68fa      	ldr	r2, [r7, #12]
    b764:	0010      	movs	r0, r2
    b766:	4798      	blx	r3
    b768:	0003      	movs	r3, r0
    b76a:	60bb      	str	r3, [r7, #8]
    b76c:	68bb      	ldr	r3, [r7, #8]
    b76e:	2b00      	cmp	r3, #0
    b770:	d101      	bne.n	b776 <cJSON_strdup+0x2e>
    b772:	2300      	movs	r3, #0
    b774:	e006      	b.n	b784 <cJSON_strdup+0x3c>
      memcpy(copy,str,len);
    b776:	68fa      	ldr	r2, [r7, #12]
    b778:	6879      	ldr	r1, [r7, #4]
    b77a:	68bb      	ldr	r3, [r7, #8]
    b77c:	0018      	movs	r0, r3
    b77e:	4b05      	ldr	r3, [pc, #20]	; (b794 <cJSON_strdup+0x4c>)
    b780:	4798      	blx	r3
      return copy;
    b782:	68bb      	ldr	r3, [r7, #8]
}
    b784:	0018      	movs	r0, r3
    b786:	46bd      	mov	sp, r7
    b788:	b004      	add	sp, #16
    b78a:	bd80      	pop	{r7, pc}
    b78c:	0001c02f 	.word	0x0001c02f
    b790:	20000008 	.word	0x20000008
    b794:	0001bab7 	.word	0x0001bab7

0000b798 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
    b798:	b580      	push	{r7, lr}
    b79a:	b082      	sub	sp, #8
    b79c:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
    b79e:	4b0a      	ldr	r3, [pc, #40]	; (b7c8 <cJSON_New_Item+0x30>)
    b7a0:	681b      	ldr	r3, [r3, #0]
    b7a2:	2028      	movs	r0, #40	; 0x28
    b7a4:	4798      	blx	r3
    b7a6:	0003      	movs	r3, r0
    b7a8:	607b      	str	r3, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d005      	beq.n	b7bc <cJSON_New_Item+0x24>
    b7b0:	687b      	ldr	r3, [r7, #4]
    b7b2:	2228      	movs	r2, #40	; 0x28
    b7b4:	2100      	movs	r1, #0
    b7b6:	0018      	movs	r0, r3
    b7b8:	4b04      	ldr	r3, [pc, #16]	; (b7cc <cJSON_New_Item+0x34>)
    b7ba:	4798      	blx	r3
	return node;
    b7bc:	687b      	ldr	r3, [r7, #4]
}
    b7be:	0018      	movs	r0, r3
    b7c0:	46bd      	mov	sp, r7
    b7c2:	b002      	add	sp, #8
    b7c4:	bd80      	pop	{r7, pc}
    b7c6:	46c0      	nop			; (mov r8, r8)
    b7c8:	20000008 	.word	0x20000008
    b7cc:	0001baed 	.word	0x0001baed

0000b7d0 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
    b7d0:	b580      	push	{r7, lr}
    b7d2:	b084      	sub	sp, #16
    b7d4:	af00      	add	r7, sp, #0
    b7d6:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
    b7d8:	e038      	b.n	b84c <cJSON_Delete+0x7c>
	{
		next=c->next;
    b7da:	687b      	ldr	r3, [r7, #4]
    b7dc:	681b      	ldr	r3, [r3, #0]
    b7de:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
    b7e0:	687b      	ldr	r3, [r7, #4]
    b7e2:	68da      	ldr	r2, [r3, #12]
    b7e4:	2380      	movs	r3, #128	; 0x80
    b7e6:	005b      	lsls	r3, r3, #1
    b7e8:	4013      	ands	r3, r2
    b7ea:	d108      	bne.n	b7fe <cJSON_Delete+0x2e>
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	689b      	ldr	r3, [r3, #8]
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d004      	beq.n	b7fe <cJSON_Delete+0x2e>
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	689b      	ldr	r3, [r3, #8]
    b7f8:	0018      	movs	r0, r3
    b7fa:	f7ff ffe9 	bl	b7d0 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
    b7fe:	687b      	ldr	r3, [r7, #4]
    b800:	68da      	ldr	r2, [r3, #12]
    b802:	2380      	movs	r3, #128	; 0x80
    b804:	005b      	lsls	r3, r3, #1
    b806:	4013      	ands	r3, r2
    b808:	d109      	bne.n	b81e <cJSON_Delete+0x4e>
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	691b      	ldr	r3, [r3, #16]
    b80e:	2b00      	cmp	r3, #0
    b810:	d005      	beq.n	b81e <cJSON_Delete+0x4e>
    b812:	4b12      	ldr	r3, [pc, #72]	; (b85c <cJSON_Delete+0x8c>)
    b814:	681a      	ldr	r2, [r3, #0]
    b816:	687b      	ldr	r3, [r7, #4]
    b818:	691b      	ldr	r3, [r3, #16]
    b81a:	0018      	movs	r0, r3
    b81c:	4790      	blx	r2
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
    b81e:	687b      	ldr	r3, [r7, #4]
    b820:	68da      	ldr	r2, [r3, #12]
    b822:	2380      	movs	r3, #128	; 0x80
    b824:	009b      	lsls	r3, r3, #2
    b826:	4013      	ands	r3, r2
    b828:	d109      	bne.n	b83e <cJSON_Delete+0x6e>
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	6a1b      	ldr	r3, [r3, #32]
    b82e:	2b00      	cmp	r3, #0
    b830:	d005      	beq.n	b83e <cJSON_Delete+0x6e>
    b832:	4b0a      	ldr	r3, [pc, #40]	; (b85c <cJSON_Delete+0x8c>)
    b834:	681a      	ldr	r2, [r3, #0]
    b836:	687b      	ldr	r3, [r7, #4]
    b838:	6a1b      	ldr	r3, [r3, #32]
    b83a:	0018      	movs	r0, r3
    b83c:	4790      	blx	r2
		cJSON_free(c);
    b83e:	4b07      	ldr	r3, [pc, #28]	; (b85c <cJSON_Delete+0x8c>)
    b840:	681b      	ldr	r3, [r3, #0]
    b842:	687a      	ldr	r2, [r7, #4]
    b844:	0010      	movs	r0, r2
    b846:	4798      	blx	r3
		c=next;
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	607b      	str	r3, [r7, #4]
	while (c)
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	2b00      	cmp	r3, #0
    b850:	d1c3      	bne.n	b7da <cJSON_Delete+0xa>
	}
}
    b852:	46c0      	nop			; (mov r8, r8)
    b854:	46bd      	mov	sp, r7
    b856:	b004      	add	sp, #16
    b858:	bd80      	pop	{r7, pc}
    b85a:	46c0      	nop			; (mov r8, r8)
    b85c:	2000000c 	.word	0x2000000c

0000b860 <pow2gt>:
	item->valueint=(int)n;
	item->type=cJSON_Number;
	return num;
}

static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
    b860:	b580      	push	{r7, lr}
    b862:	b082      	sub	sp, #8
    b864:	af00      	add	r7, sp, #0
    b866:	6078      	str	r0, [r7, #4]
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	3b01      	subs	r3, #1
    b86c:	607b      	str	r3, [r7, #4]
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	105b      	asrs	r3, r3, #1
    b872:	687a      	ldr	r2, [r7, #4]
    b874:	4313      	orrs	r3, r2
    b876:	607b      	str	r3, [r7, #4]
    b878:	687b      	ldr	r3, [r7, #4]
    b87a:	109b      	asrs	r3, r3, #2
    b87c:	687a      	ldr	r2, [r7, #4]
    b87e:	4313      	orrs	r3, r2
    b880:	607b      	str	r3, [r7, #4]
    b882:	687b      	ldr	r3, [r7, #4]
    b884:	111b      	asrs	r3, r3, #4
    b886:	687a      	ldr	r2, [r7, #4]
    b888:	4313      	orrs	r3, r2
    b88a:	607b      	str	r3, [r7, #4]
    b88c:	687b      	ldr	r3, [r7, #4]
    b88e:	121b      	asrs	r3, r3, #8
    b890:	687a      	ldr	r2, [r7, #4]
    b892:	4313      	orrs	r3, r2
    b894:	607b      	str	r3, [r7, #4]
    b896:	687b      	ldr	r3, [r7, #4]
    b898:	141b      	asrs	r3, r3, #16
    b89a:	687a      	ldr	r2, [r7, #4]
    b89c:	4313      	orrs	r3, r2
    b89e:	607b      	str	r3, [r7, #4]
    b8a0:	687b      	ldr	r3, [r7, #4]
    b8a2:	3301      	adds	r3, #1
    b8a4:	0018      	movs	r0, r3
    b8a6:	46bd      	mov	sp, r7
    b8a8:	b002      	add	sp, #8
    b8aa:	bd80      	pop	{r7, pc}

0000b8ac <ensure>:

typedef struct {char *buffer; int length; int offset; } printbuffer;

static char* ensure(printbuffer *p,int needed)
{
    b8ac:	b580      	push	{r7, lr}
    b8ae:	b084      	sub	sp, #16
    b8b0:	af00      	add	r7, sp, #0
    b8b2:	6078      	str	r0, [r7, #4]
    b8b4:	6039      	str	r1, [r7, #0]
	char *newbuffer;int newsize;
	if (!p || !p->buffer) return 0;
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d003      	beq.n	b8c4 <ensure+0x18>
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d101      	bne.n	b8c8 <ensure+0x1c>
    b8c4:	2300      	movs	r3, #0
    b8c6:	e04a      	b.n	b95e <ensure+0xb2>
	needed+=p->offset;
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	689b      	ldr	r3, [r3, #8]
    b8cc:	683a      	ldr	r2, [r7, #0]
    b8ce:	18d3      	adds	r3, r2, r3
    b8d0:	603b      	str	r3, [r7, #0]
	if (needed<=p->length) return p->buffer+p->offset;
    b8d2:	687b      	ldr	r3, [r7, #4]
    b8d4:	685a      	ldr	r2, [r3, #4]
    b8d6:	683b      	ldr	r3, [r7, #0]
    b8d8:	429a      	cmp	r2, r3
    b8da:	db05      	blt.n	b8e8 <ensure+0x3c>
    b8dc:	687b      	ldr	r3, [r7, #4]
    b8de:	681a      	ldr	r2, [r3, #0]
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	689b      	ldr	r3, [r3, #8]
    b8e4:	18d3      	adds	r3, r2, r3
    b8e6:	e03a      	b.n	b95e <ensure+0xb2>

	newsize=pow2gt(needed);
    b8e8:	683b      	ldr	r3, [r7, #0]
    b8ea:	0018      	movs	r0, r3
    b8ec:	4b1e      	ldr	r3, [pc, #120]	; (b968 <ensure+0xbc>)
    b8ee:	4798      	blx	r3
    b8f0:	0003      	movs	r3, r0
    b8f2:	60fb      	str	r3, [r7, #12]
	newbuffer=(char*)cJSON_malloc(newsize);
    b8f4:	4b1d      	ldr	r3, [pc, #116]	; (b96c <ensure+0xc0>)
    b8f6:	681b      	ldr	r3, [r3, #0]
    b8f8:	68fa      	ldr	r2, [r7, #12]
    b8fa:	0010      	movs	r0, r2
    b8fc:	4798      	blx	r3
    b8fe:	0003      	movs	r3, r0
    b900:	60bb      	str	r3, [r7, #8]
	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
    b902:	68bb      	ldr	r3, [r7, #8]
    b904:	2b00      	cmp	r3, #0
    b906:	d10d      	bne.n	b924 <ensure+0x78>
    b908:	4b19      	ldr	r3, [pc, #100]	; (b970 <ensure+0xc4>)
    b90a:	681a      	ldr	r2, [r3, #0]
    b90c:	687b      	ldr	r3, [r7, #4]
    b90e:	681b      	ldr	r3, [r3, #0]
    b910:	0018      	movs	r0, r3
    b912:	4790      	blx	r2
    b914:	687b      	ldr	r3, [r7, #4]
    b916:	2200      	movs	r2, #0
    b918:	605a      	str	r2, [r3, #4]
    b91a:	687b      	ldr	r3, [r7, #4]
    b91c:	2200      	movs	r2, #0
    b91e:	601a      	str	r2, [r3, #0]
    b920:	2300      	movs	r3, #0
    b922:	e01c      	b.n	b95e <ensure+0xb2>
	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
    b924:	68bb      	ldr	r3, [r7, #8]
    b926:	2b00      	cmp	r3, #0
    b928:	d008      	beq.n	b93c <ensure+0x90>
    b92a:	687b      	ldr	r3, [r7, #4]
    b92c:	6819      	ldr	r1, [r3, #0]
    b92e:	687b      	ldr	r3, [r7, #4]
    b930:	685b      	ldr	r3, [r3, #4]
    b932:	001a      	movs	r2, r3
    b934:	68bb      	ldr	r3, [r7, #8]
    b936:	0018      	movs	r0, r3
    b938:	4b0e      	ldr	r3, [pc, #56]	; (b974 <ensure+0xc8>)
    b93a:	4798      	blx	r3
	cJSON_free(p->buffer);
    b93c:	4b0c      	ldr	r3, [pc, #48]	; (b970 <ensure+0xc4>)
    b93e:	681a      	ldr	r2, [r3, #0]
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	681b      	ldr	r3, [r3, #0]
    b944:	0018      	movs	r0, r3
    b946:	4790      	blx	r2
	p->length=newsize;
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	68fa      	ldr	r2, [r7, #12]
    b94c:	605a      	str	r2, [r3, #4]
	p->buffer=newbuffer;
    b94e:	687b      	ldr	r3, [r7, #4]
    b950:	68ba      	ldr	r2, [r7, #8]
    b952:	601a      	str	r2, [r3, #0]
	return newbuffer+p->offset;
    b954:	687b      	ldr	r3, [r7, #4]
    b956:	689b      	ldr	r3, [r3, #8]
    b958:	001a      	movs	r2, r3
    b95a:	68bb      	ldr	r3, [r7, #8]
    b95c:	189b      	adds	r3, r3, r2
}
    b95e:	0018      	movs	r0, r3
    b960:	46bd      	mov	sp, r7
    b962:	b004      	add	sp, #16
    b964:	bd80      	pop	{r7, pc}
    b966:	46c0      	nop			; (mov r8, r8)
    b968:	0000b861 	.word	0x0000b861
    b96c:	20000008 	.word	0x20000008
    b970:	2000000c 	.word	0x2000000c
    b974:	0001bab7 	.word	0x0001bab7

0000b978 <update>:

static int update(printbuffer *p)
{
    b978:	b590      	push	{r4, r7, lr}
    b97a:	b085      	sub	sp, #20
    b97c:	af00      	add	r7, sp, #0
    b97e:	6078      	str	r0, [r7, #4]
	char *str;
	if (!p || !p->buffer) return 0;
    b980:	687b      	ldr	r3, [r7, #4]
    b982:	2b00      	cmp	r3, #0
    b984:	d003      	beq.n	b98e <update+0x16>
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	681b      	ldr	r3, [r3, #0]
    b98a:	2b00      	cmp	r3, #0
    b98c:	d101      	bne.n	b992 <update+0x1a>
    b98e:	2300      	movs	r3, #0
    b990:	e00e      	b.n	b9b0 <update+0x38>
	str=p->buffer+p->offset;
    b992:	687b      	ldr	r3, [r7, #4]
    b994:	681a      	ldr	r2, [r3, #0]
    b996:	687b      	ldr	r3, [r7, #4]
    b998:	689b      	ldr	r3, [r3, #8]
    b99a:	18d3      	adds	r3, r2, r3
    b99c:	60fb      	str	r3, [r7, #12]
	return p->offset+strlen(str);
    b99e:	687b      	ldr	r3, [r7, #4]
    b9a0:	689b      	ldr	r3, [r3, #8]
    b9a2:	001c      	movs	r4, r3
    b9a4:	68fb      	ldr	r3, [r7, #12]
    b9a6:	0018      	movs	r0, r3
    b9a8:	4b03      	ldr	r3, [pc, #12]	; (b9b8 <update+0x40>)
    b9aa:	4798      	blx	r3
    b9ac:	0003      	movs	r3, r0
    b9ae:	18e3      	adds	r3, r4, r3
}
    b9b0:	0018      	movs	r0, r3
    b9b2:	46bd      	mov	sp, r7
    b9b4:	b005      	add	sp, #20
    b9b6:	bd90      	pop	{r4, r7, pc}
    b9b8:	0001c02f 	.word	0x0001c02f

0000b9bc <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item,printbuffer *p)
{
    b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9be:	b08f      	sub	sp, #60	; 0x3c
    b9c0:	af00      	add	r7, sp, #0
    b9c2:	6278      	str	r0, [r7, #36]	; 0x24
    b9c4:	6239      	str	r1, [r7, #32]
	char *str=0;
    b9c6:	2300      	movs	r3, #0
    b9c8:	637b      	str	r3, [r7, #52]	; 0x34
	double d=item->valuedouble;
    b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b9cc:	69dc      	ldr	r4, [r3, #28]
    b9ce:	699b      	ldr	r3, [r3, #24]
    b9d0:	62bb      	str	r3, [r7, #40]	; 0x28
    b9d2:	62fc      	str	r4, [r7, #44]	; 0x2c
	if (d==0)
    b9d4:	4c6f      	ldr	r4, [pc, #444]	; (bb94 <print_number+0x1d8>)
    b9d6:	2200      	movs	r2, #0
    b9d8:	2300      	movs	r3, #0
    b9da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    b9de:	47a0      	blx	r4
    b9e0:	1e03      	subs	r3, r0, #0
    b9e2:	d01d      	beq.n	ba20 <print_number+0x64>
	{
		if (p)	str=ensure(p,2);
    b9e4:	6a3b      	ldr	r3, [r7, #32]
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	d007      	beq.n	b9fa <print_number+0x3e>
    b9ea:	6a3b      	ldr	r3, [r7, #32]
    b9ec:	2102      	movs	r1, #2
    b9ee:	0018      	movs	r0, r3
    b9f0:	4b69      	ldr	r3, [pc, #420]	; (bb98 <print_number+0x1dc>)
    b9f2:	4798      	blx	r3
    b9f4:	0003      	movs	r3, r0
    b9f6:	637b      	str	r3, [r7, #52]	; 0x34
    b9f8:	e005      	b.n	ba06 <print_number+0x4a>
		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
    b9fa:	4b68      	ldr	r3, [pc, #416]	; (bb9c <print_number+0x1e0>)
    b9fc:	681b      	ldr	r3, [r3, #0]
    b9fe:	2002      	movs	r0, #2
    ba00:	4798      	blx	r3
    ba02:	0003      	movs	r3, r0
    ba04:	637b      	str	r3, [r7, #52]	; 0x34
		if (str) strcpy(str,"0");
    ba06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d100      	bne.n	ba0e <print_number+0x52>
    ba0c:	e0bd      	b.n	bb8a <print_number+0x1ce>
    ba0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ba10:	4b63      	ldr	r3, [pc, #396]	; (bba0 <print_number+0x1e4>)
    ba12:	0010      	movs	r0, r2
    ba14:	0019      	movs	r1, r3
    ba16:	2302      	movs	r3, #2
    ba18:	001a      	movs	r2, r3
    ba1a:	4b62      	ldr	r3, [pc, #392]	; (bba4 <print_number+0x1e8>)
    ba1c:	4798      	blx	r3
    ba1e:	e0b4      	b.n	bb8a <print_number+0x1ce>
	}
	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
    ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ba22:	695a      	ldr	r2, [r3, #20]
    ba24:	4b60      	ldr	r3, [pc, #384]	; (bba8 <print_number+0x1ec>)
    ba26:	0010      	movs	r0, r2
    ba28:	4798      	blx	r3
    ba2a:	4c60      	ldr	r4, [pc, #384]	; (bbac <print_number+0x1f0>)
    ba2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba30:	47a0      	blx	r4
    ba32:	0003      	movs	r3, r0
    ba34:	000c      	movs	r4, r1
    ba36:	001a      	movs	r2, r3
    ba38:	0015      	movs	r5, r2
    ba3a:	0063      	lsls	r3, r4, #1
    ba3c:	085e      	lsrs	r6, r3, #1
    ba3e:	4c5c      	ldr	r4, [pc, #368]	; (bbb0 <print_number+0x1f4>)
    ba40:	2200      	movs	r2, #0
    ba42:	4b5c      	ldr	r3, [pc, #368]	; (bbb4 <print_number+0x1f8>)
    ba44:	0028      	movs	r0, r5
    ba46:	0031      	movs	r1, r6
    ba48:	47a0      	blx	r4
    ba4a:	1e03      	subs	r3, r0, #0
    ba4c:	d02c      	beq.n	baa8 <print_number+0xec>
    ba4e:	4c58      	ldr	r4, [pc, #352]	; (bbb0 <print_number+0x1f4>)
    ba50:	4a59      	ldr	r2, [pc, #356]	; (bbb8 <print_number+0x1fc>)
    ba52:	4b5a      	ldr	r3, [pc, #360]	; (bbbc <print_number+0x200>)
    ba54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ba58:	47a0      	blx	r4
    ba5a:	1e03      	subs	r3, r0, #0
    ba5c:	d024      	beq.n	baa8 <print_number+0xec>
    ba5e:	4c58      	ldr	r4, [pc, #352]	; (bbc0 <print_number+0x204>)
    ba60:	2200      	movs	r2, #0
    ba62:	4b58      	ldr	r3, [pc, #352]	; (bbc4 <print_number+0x208>)
    ba64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ba68:	47a0      	blx	r4
    ba6a:	1e03      	subs	r3, r0, #0
    ba6c:	d01c      	beq.n	baa8 <print_number+0xec>
	{
		if (p)	str=ensure(p,21);
    ba6e:	6a3b      	ldr	r3, [r7, #32]
    ba70:	2b00      	cmp	r3, #0
    ba72:	d007      	beq.n	ba84 <print_number+0xc8>
    ba74:	6a3b      	ldr	r3, [r7, #32]
    ba76:	2115      	movs	r1, #21
    ba78:	0018      	movs	r0, r3
    ba7a:	4b47      	ldr	r3, [pc, #284]	; (bb98 <print_number+0x1dc>)
    ba7c:	4798      	blx	r3
    ba7e:	0003      	movs	r3, r0
    ba80:	637b      	str	r3, [r7, #52]	; 0x34
    ba82:	e005      	b.n	ba90 <print_number+0xd4>
		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
    ba84:	4b45      	ldr	r3, [pc, #276]	; (bb9c <print_number+0x1e0>)
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	2015      	movs	r0, #21
    ba8a:	4798      	blx	r3
    ba8c:	0003      	movs	r3, r0
    ba8e:	637b      	str	r3, [r7, #52]	; 0x34
		if (str)	sprintf(str,"%d",item->valueint);
    ba90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ba92:	2b00      	cmp	r3, #0
    ba94:	d100      	bne.n	ba98 <print_number+0xdc>
    ba96:	e078      	b.n	bb8a <print_number+0x1ce>
    ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ba9a:	695a      	ldr	r2, [r3, #20]
    ba9c:	494a      	ldr	r1, [pc, #296]	; (bbc8 <print_number+0x20c>)
    ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    baa0:	0018      	movs	r0, r3
    baa2:	4b4a      	ldr	r3, [pc, #296]	; (bbcc <print_number+0x210>)
    baa4:	4798      	blx	r3
    baa6:	e070      	b.n	bb8a <print_number+0x1ce>
	}
	else
	{
		if (p)	str=ensure(p,64);
    baa8:	6a3b      	ldr	r3, [r7, #32]
    baaa:	2b00      	cmp	r3, #0
    baac:	d007      	beq.n	babe <print_number+0x102>
    baae:	6a3b      	ldr	r3, [r7, #32]
    bab0:	2140      	movs	r1, #64	; 0x40
    bab2:	0018      	movs	r0, r3
    bab4:	4b38      	ldr	r3, [pc, #224]	; (bb98 <print_number+0x1dc>)
    bab6:	4798      	blx	r3
    bab8:	0003      	movs	r3, r0
    baba:	637b      	str	r3, [r7, #52]	; 0x34
    babc:	e005      	b.n	baca <print_number+0x10e>
		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
    babe:	4b37      	ldr	r3, [pc, #220]	; (bb9c <print_number+0x1e0>)
    bac0:	681b      	ldr	r3, [r3, #0]
    bac2:	2040      	movs	r0, #64	; 0x40
    bac4:	4798      	blx	r3
    bac6:	0003      	movs	r3, r0
    bac8:	637b      	str	r3, [r7, #52]	; 0x34
		if (str)
    baca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bacc:	2b00      	cmp	r3, #0
    bace:	d05c      	beq.n	bb8a <print_number+0x1ce>
		{
			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
    bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bad2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    bad4:	0018      	movs	r0, r3
    bad6:	0021      	movs	r1, r4
    bad8:	4b3d      	ldr	r3, [pc, #244]	; (bbd0 <print_number+0x214>)
    bada:	4798      	blx	r3
    badc:	4c33      	ldr	r4, [pc, #204]	; (bbac <print_number+0x1f0>)
    bade:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bae2:	47a0      	blx	r4
    bae4:	0003      	movs	r3, r0
    bae6:	000c      	movs	r4, r1
    bae8:	001a      	movs	r2, r3
    baea:	61ba      	str	r2, [r7, #24]
    baec:	0063      	lsls	r3, r4, #1
    baee:	085b      	lsrs	r3, r3, #1
    baf0:	61fb      	str	r3, [r7, #28]
    baf2:	4c2f      	ldr	r4, [pc, #188]	; (bbb0 <print_number+0x1f4>)
    baf4:	2200      	movs	r2, #0
    baf6:	4b2f      	ldr	r3, [pc, #188]	; (bbb4 <print_number+0x1f8>)
    baf8:	69b8      	ldr	r0, [r7, #24]
    bafa:	69f9      	ldr	r1, [r7, #28]
    bafc:	47a0      	blx	r4
    bafe:	1e03      	subs	r3, r0, #0
    bb00:	d016      	beq.n	bb30 <print_number+0x174>
    bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb04:	613b      	str	r3, [r7, #16]
    bb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb08:	005b      	lsls	r3, r3, #1
    bb0a:	085b      	lsrs	r3, r3, #1
    bb0c:	617b      	str	r3, [r7, #20]
    bb0e:	4c31      	ldr	r4, [pc, #196]	; (bbd4 <print_number+0x218>)
    bb10:	4a31      	ldr	r2, [pc, #196]	; (bbd8 <print_number+0x21c>)
    bb12:	4b32      	ldr	r3, [pc, #200]	; (bbdc <print_number+0x220>)
    bb14:	6938      	ldr	r0, [r7, #16]
    bb16:	6979      	ldr	r1, [r7, #20]
    bb18:	47a0      	blx	r4
    bb1a:	1e03      	subs	r3, r0, #0
    bb1c:	d008      	beq.n	bb30 <print_number+0x174>
    bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb20:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    bb22:	492f      	ldr	r1, [pc, #188]	; (bbe0 <print_number+0x224>)
    bb24:	6b78      	ldr	r0, [r7, #52]	; 0x34
    bb26:	001a      	movs	r2, r3
    bb28:	0023      	movs	r3, r4
    bb2a:	4c28      	ldr	r4, [pc, #160]	; (bbcc <print_number+0x210>)
    bb2c:	47a0      	blx	r4
    bb2e:	e02c      	b.n	bb8a <print_number+0x1ce>
			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
    bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb32:	60bb      	str	r3, [r7, #8]
    bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb36:	005b      	lsls	r3, r3, #1
    bb38:	085b      	lsrs	r3, r3, #1
    bb3a:	60fb      	str	r3, [r7, #12]
    bb3c:	4c25      	ldr	r4, [pc, #148]	; (bbd4 <print_number+0x218>)
    bb3e:	4a29      	ldr	r2, [pc, #164]	; (bbe4 <print_number+0x228>)
    bb40:	4b29      	ldr	r3, [pc, #164]	; (bbe8 <print_number+0x22c>)
    bb42:	68b8      	ldr	r0, [r7, #8]
    bb44:	68f9      	ldr	r1, [r7, #12]
    bb46:	47a0      	blx	r4
    bb48:	1e03      	subs	r3, r0, #0
    bb4a:	d10d      	bne.n	bb68 <print_number+0x1ac>
    bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb4e:	603b      	str	r3, [r7, #0]
    bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb52:	005b      	lsls	r3, r3, #1
    bb54:	085b      	lsrs	r3, r3, #1
    bb56:	607b      	str	r3, [r7, #4]
    bb58:	4c24      	ldr	r4, [pc, #144]	; (bbec <print_number+0x230>)
    bb5a:	2200      	movs	r2, #0
    bb5c:	4b24      	ldr	r3, [pc, #144]	; (bbf0 <print_number+0x234>)
    bb5e:	6838      	ldr	r0, [r7, #0]
    bb60:	6879      	ldr	r1, [r7, #4]
    bb62:	47a0      	blx	r4
    bb64:	1e03      	subs	r3, r0, #0
    bb66:	d008      	beq.n	bb7a <print_number+0x1be>
    bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb6a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    bb6c:	4921      	ldr	r1, [pc, #132]	; (bbf4 <print_number+0x238>)
    bb6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    bb70:	001a      	movs	r2, r3
    bb72:	0023      	movs	r3, r4
    bb74:	4c15      	ldr	r4, [pc, #84]	; (bbcc <print_number+0x210>)
    bb76:	47a0      	blx	r4
    bb78:	e007      	b.n	bb8a <print_number+0x1ce>
			else												sprintf(str,"%f",d);
    bb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb7c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    bb7e:	491e      	ldr	r1, [pc, #120]	; (bbf8 <print_number+0x23c>)
    bb80:	6b78      	ldr	r0, [r7, #52]	; 0x34
    bb82:	001a      	movs	r2, r3
    bb84:	0023      	movs	r3, r4
    bb86:	4c11      	ldr	r4, [pc, #68]	; (bbcc <print_number+0x210>)
    bb88:	47a0      	blx	r4
		}
	}
	return str;
    bb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bb8c:	0018      	movs	r0, r3
    bb8e:	46bd      	mov	sp, r7
    bb90:	b00f      	add	sp, #60	; 0x3c
    bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb94:	00019df5 	.word	0x00019df5
    bb98:	0000b8ad 	.word	0x0000b8ad
    bb9c:	20000008 	.word	0x20000008
    bba0:	0001e460 	.word	0x0001e460
    bba4:	0001bab7 	.word	0x0001bab7
    bba8:	0001b8c1 	.word	0x0001b8c1
    bbac:	0001b22d 	.word	0x0001b22d
    bbb0:	00019e15 	.word	0x00019e15
    bbb4:	3cb00000 	.word	0x3cb00000
    bbb8:	ffc00000 	.word	0xffc00000
    bbbc:	41dfffff 	.word	0x41dfffff
    bbc0:	00019e3d 	.word	0x00019e3d
    bbc4:	c1e00000 	.word	0xc1e00000
    bbc8:	0001e464 	.word	0x0001e464
    bbcc:	0001bf0d 	.word	0x0001bf0d
    bbd0:	000199b9 	.word	0x000199b9
    bbd4:	00019e01 	.word	0x00019e01
    bbd8:	e4c2f344 	.word	0xe4c2f344
    bbdc:	4c63e9e4 	.word	0x4c63e9e4
    bbe0:	0001e468 	.word	0x0001e468
    bbe4:	a0b5ed8d 	.word	0xa0b5ed8d
    bbe8:	3eb0c6f7 	.word	0x3eb0c6f7
    bbec:	00019e29 	.word	0x00019e29
    bbf0:	41cdcd65 	.word	0x41cdcd65
    bbf4:	0001e470 	.word	0x0001e470
    bbf8:	0001e474 	.word	0x0001e474

0000bbfc <print_string_ptr>:
							0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,
							0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0,	0,0,0,0};

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str,printbuffer *p)
{
    bbfc:	b580      	push	{r7, lr}
    bbfe:	b088      	sub	sp, #32
    bc00:	af00      	add	r7, sp, #0
    bc02:	6078      	str	r0, [r7, #4]
    bc04:	6039      	str	r1, [r7, #0]
	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
    bc06:	2300      	movs	r3, #0
    bc08:	613b      	str	r3, [r7, #16]
    bc0a:	2300      	movs	r3, #0
    bc0c:	60fb      	str	r3, [r7, #12]
	
	ptr=str;while (*ptr) flag|=escapable[*ptr++];
    bc0e:	687b      	ldr	r3, [r7, #4]
    bc10:	61fb      	str	r3, [r7, #28]
    bc12:	e00a      	b.n	bc2a <print_string_ptr+0x2e>
    bc14:	69fb      	ldr	r3, [r7, #28]
    bc16:	1c5a      	adds	r2, r3, #1
    bc18:	61fa      	str	r2, [r7, #28]
    bc1a:	781b      	ldrb	r3, [r3, #0]
    bc1c:	001a      	movs	r2, r3
    bc1e:	4b9b      	ldr	r3, [pc, #620]	; (be8c <print_string_ptr+0x290>)
    bc20:	0092      	lsls	r2, r2, #2
    bc22:	58d3      	ldr	r3, [r2, r3]
    bc24:	68fa      	ldr	r2, [r7, #12]
    bc26:	4313      	orrs	r3, r2
    bc28:	60fb      	str	r3, [r7, #12]
    bc2a:	69fb      	ldr	r3, [r7, #28]
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d1f0      	bne.n	bc14 <print_string_ptr+0x18>
	if (!flag)
    bc32:	68fb      	ldr	r3, [r7, #12]
    bc34:	2b00      	cmp	r3, #0
    bc36:	d137      	bne.n	bca8 <print_string_ptr+0xac>
	{
		len=ptr-str;
    bc38:	69fa      	ldr	r2, [r7, #28]
    bc3a:	687b      	ldr	r3, [r7, #4]
    bc3c:	1ad3      	subs	r3, r2, r3
    bc3e:	613b      	str	r3, [r7, #16]
		if (p) out=ensure(p,len+3);
    bc40:	683b      	ldr	r3, [r7, #0]
    bc42:	2b00      	cmp	r3, #0
    bc44:	d009      	beq.n	bc5a <print_string_ptr+0x5e>
    bc46:	693b      	ldr	r3, [r7, #16]
    bc48:	1cda      	adds	r2, r3, #3
    bc4a:	683b      	ldr	r3, [r7, #0]
    bc4c:	0011      	movs	r1, r2
    bc4e:	0018      	movs	r0, r3
    bc50:	4b8f      	ldr	r3, [pc, #572]	; (be90 <print_string_ptr+0x294>)
    bc52:	4798      	blx	r3
    bc54:	0003      	movs	r3, r0
    bc56:	617b      	str	r3, [r7, #20]
    bc58:	e007      	b.n	bc6a <print_string_ptr+0x6e>
		else		out=(char*)cJSON_malloc(len+3);
    bc5a:	4b8e      	ldr	r3, [pc, #568]	; (be94 <print_string_ptr+0x298>)
    bc5c:	681b      	ldr	r3, [r3, #0]
    bc5e:	693a      	ldr	r2, [r7, #16]
    bc60:	3203      	adds	r2, #3
    bc62:	0010      	movs	r0, r2
    bc64:	4798      	blx	r3
    bc66:	0003      	movs	r3, r0
    bc68:	617b      	str	r3, [r7, #20]
		if (!out) return 0;
    bc6a:	697b      	ldr	r3, [r7, #20]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d101      	bne.n	bc74 <print_string_ptr+0x78>
    bc70:	2300      	movs	r3, #0
    bc72:	e106      	b.n	be82 <print_string_ptr+0x286>
		ptr2=out;*ptr2++='\"';
    bc74:	697b      	ldr	r3, [r7, #20]
    bc76:	61bb      	str	r3, [r7, #24]
    bc78:	69bb      	ldr	r3, [r7, #24]
    bc7a:	1c5a      	adds	r2, r3, #1
    bc7c:	61ba      	str	r2, [r7, #24]
    bc7e:	2222      	movs	r2, #34	; 0x22
    bc80:	701a      	strb	r2, [r3, #0]
		strcpy(ptr2,str);
    bc82:	687a      	ldr	r2, [r7, #4]
    bc84:	69bb      	ldr	r3, [r7, #24]
    bc86:	0011      	movs	r1, r2
    bc88:	0018      	movs	r0, r3
    bc8a:	4b83      	ldr	r3, [pc, #524]	; (be98 <print_string_ptr+0x29c>)
    bc8c:	4798      	blx	r3
		ptr2[len]='\"';
    bc8e:	693b      	ldr	r3, [r7, #16]
    bc90:	69ba      	ldr	r2, [r7, #24]
    bc92:	18d3      	adds	r3, r2, r3
    bc94:	2222      	movs	r2, #34	; 0x22
    bc96:	701a      	strb	r2, [r3, #0]
		ptr2[len+1]=0;
    bc98:	693b      	ldr	r3, [r7, #16]
    bc9a:	3301      	adds	r3, #1
    bc9c:	69ba      	ldr	r2, [r7, #24]
    bc9e:	18d3      	adds	r3, r2, r3
    bca0:	2200      	movs	r2, #0
    bca2:	701a      	strb	r2, [r3, #0]
		return out;
    bca4:	697b      	ldr	r3, [r7, #20]
    bca6:	e0ec      	b.n	be82 <print_string_ptr+0x286>
	}
	
	if (!str)
    bca8:	687b      	ldr	r3, [r7, #4]
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d11f      	bne.n	bcee <print_string_ptr+0xf2>
	{
		if (p)	out=ensure(p,3);
    bcae:	683b      	ldr	r3, [r7, #0]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d007      	beq.n	bcc4 <print_string_ptr+0xc8>
    bcb4:	683b      	ldr	r3, [r7, #0]
    bcb6:	2103      	movs	r1, #3
    bcb8:	0018      	movs	r0, r3
    bcba:	4b75      	ldr	r3, [pc, #468]	; (be90 <print_string_ptr+0x294>)
    bcbc:	4798      	blx	r3
    bcbe:	0003      	movs	r3, r0
    bcc0:	617b      	str	r3, [r7, #20]
    bcc2:	e005      	b.n	bcd0 <print_string_ptr+0xd4>
		else	out=(char*)cJSON_malloc(3);
    bcc4:	4b73      	ldr	r3, [pc, #460]	; (be94 <print_string_ptr+0x298>)
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	2003      	movs	r0, #3
    bcca:	4798      	blx	r3
    bccc:	0003      	movs	r3, r0
    bcce:	617b      	str	r3, [r7, #20]
		if (!out) return 0;
    bcd0:	697b      	ldr	r3, [r7, #20]
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d101      	bne.n	bcda <print_string_ptr+0xde>
    bcd6:	2300      	movs	r3, #0
    bcd8:	e0d3      	b.n	be82 <print_string_ptr+0x286>
		strcpy(out,"\"\"");
    bcda:	697a      	ldr	r2, [r7, #20]
    bcdc:	4b6f      	ldr	r3, [pc, #444]	; (be9c <print_string_ptr+0x2a0>)
    bcde:	0010      	movs	r0, r2
    bce0:	0019      	movs	r1, r3
    bce2:	2303      	movs	r3, #3
    bce4:	001a      	movs	r2, r3
    bce6:	4b6e      	ldr	r3, [pc, #440]	; (bea0 <print_string_ptr+0x2a4>)
    bce8:	4798      	blx	r3
		return out;
    bcea:	697b      	ldr	r3, [r7, #20]
    bcec:	e0c9      	b.n	be82 <print_string_ptr+0x286>
	}
	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	61fb      	str	r3, [r7, #28]
    bcf2:	e018      	b.n	bd26 <print_string_ptr+0x12a>
    bcf4:	230b      	movs	r3, #11
    bcf6:	18fb      	adds	r3, r7, r3
    bcf8:	781a      	ldrb	r2, [r3, #0]
    bcfa:	4b6a      	ldr	r3, [pc, #424]	; (bea4 <print_string_ptr+0x2a8>)
    bcfc:	0011      	movs	r1, r2
    bcfe:	0018      	movs	r0, r3
    bd00:	4b69      	ldr	r3, [pc, #420]	; (bea8 <print_string_ptr+0x2ac>)
    bd02:	4798      	blx	r3
    bd04:	1e03      	subs	r3, r0, #0
    bd06:	d003      	beq.n	bd10 <print_string_ptr+0x114>
    bd08:	693b      	ldr	r3, [r7, #16]
    bd0a:	3301      	adds	r3, #1
    bd0c:	613b      	str	r3, [r7, #16]
    bd0e:	e007      	b.n	bd20 <print_string_ptr+0x124>
    bd10:	230b      	movs	r3, #11
    bd12:	18fb      	adds	r3, r7, r3
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	2b1f      	cmp	r3, #31
    bd18:	d802      	bhi.n	bd20 <print_string_ptr+0x124>
    bd1a:	693b      	ldr	r3, [r7, #16]
    bd1c:	3305      	adds	r3, #5
    bd1e:	613b      	str	r3, [r7, #16]
    bd20:	69fb      	ldr	r3, [r7, #28]
    bd22:	3301      	adds	r3, #1
    bd24:	61fb      	str	r3, [r7, #28]
    bd26:	230b      	movs	r3, #11
    bd28:	18fb      	adds	r3, r7, r3
    bd2a:	69fa      	ldr	r2, [r7, #28]
    bd2c:	7812      	ldrb	r2, [r2, #0]
    bd2e:	701a      	strb	r2, [r3, #0]
    bd30:	230b      	movs	r3, #11
    bd32:	18fb      	adds	r3, r7, r3
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	2b00      	cmp	r3, #0
    bd38:	d005      	beq.n	bd46 <print_string_ptr+0x14a>
    bd3a:	693b      	ldr	r3, [r7, #16]
    bd3c:	3301      	adds	r3, #1
    bd3e:	613b      	str	r3, [r7, #16]
    bd40:	693b      	ldr	r3, [r7, #16]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d1d6      	bne.n	bcf4 <print_string_ptr+0xf8>
	
	if (p)	out=ensure(p,len+3);
    bd46:	683b      	ldr	r3, [r7, #0]
    bd48:	2b00      	cmp	r3, #0
    bd4a:	d009      	beq.n	bd60 <print_string_ptr+0x164>
    bd4c:	693b      	ldr	r3, [r7, #16]
    bd4e:	1cda      	adds	r2, r3, #3
    bd50:	683b      	ldr	r3, [r7, #0]
    bd52:	0011      	movs	r1, r2
    bd54:	0018      	movs	r0, r3
    bd56:	4b4e      	ldr	r3, [pc, #312]	; (be90 <print_string_ptr+0x294>)
    bd58:	4798      	blx	r3
    bd5a:	0003      	movs	r3, r0
    bd5c:	617b      	str	r3, [r7, #20]
    bd5e:	e007      	b.n	bd70 <print_string_ptr+0x174>
	else	out=(char*)cJSON_malloc(len+3);
    bd60:	4b4c      	ldr	r3, [pc, #304]	; (be94 <print_string_ptr+0x298>)
    bd62:	681b      	ldr	r3, [r3, #0]
    bd64:	693a      	ldr	r2, [r7, #16]
    bd66:	3203      	adds	r2, #3
    bd68:	0010      	movs	r0, r2
    bd6a:	4798      	blx	r3
    bd6c:	0003      	movs	r3, r0
    bd6e:	617b      	str	r3, [r7, #20]
	if (!out) return 0;
    bd70:	697b      	ldr	r3, [r7, #20]
    bd72:	2b00      	cmp	r3, #0
    bd74:	d101      	bne.n	bd7a <print_string_ptr+0x17e>
    bd76:	2300      	movs	r3, #0
    bd78:	e083      	b.n	be82 <print_string_ptr+0x286>

	ptr2=out;ptr=str;
    bd7a:	697b      	ldr	r3, [r7, #20]
    bd7c:	61bb      	str	r3, [r7, #24]
    bd7e:	687b      	ldr	r3, [r7, #4]
    bd80:	61fb      	str	r3, [r7, #28]
	*ptr2++='\"';
    bd82:	69bb      	ldr	r3, [r7, #24]
    bd84:	1c5a      	adds	r2, r3, #1
    bd86:	61ba      	str	r2, [r7, #24]
    bd88:	2222      	movs	r2, #34	; 0x22
    bd8a:	701a      	strb	r2, [r3, #0]
	while (*ptr)
    bd8c:	e06a      	b.n	be64 <print_string_ptr+0x268>
	{
		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
    bd8e:	69fb      	ldr	r3, [r7, #28]
    bd90:	781b      	ldrb	r3, [r3, #0]
    bd92:	2b1f      	cmp	r3, #31
    bd94:	d910      	bls.n	bdb8 <print_string_ptr+0x1bc>
    bd96:	69fb      	ldr	r3, [r7, #28]
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	2b22      	cmp	r3, #34	; 0x22
    bd9c:	d00c      	beq.n	bdb8 <print_string_ptr+0x1bc>
    bd9e:	69fb      	ldr	r3, [r7, #28]
    bda0:	781b      	ldrb	r3, [r3, #0]
    bda2:	2b5c      	cmp	r3, #92	; 0x5c
    bda4:	d008      	beq.n	bdb8 <print_string_ptr+0x1bc>
    bda6:	69bb      	ldr	r3, [r7, #24]
    bda8:	1c5a      	adds	r2, r3, #1
    bdaa:	61ba      	str	r2, [r7, #24]
    bdac:	69fa      	ldr	r2, [r7, #28]
    bdae:	1c51      	adds	r1, r2, #1
    bdb0:	61f9      	str	r1, [r7, #28]
    bdb2:	7812      	ldrb	r2, [r2, #0]
    bdb4:	701a      	strb	r2, [r3, #0]
    bdb6:	e055      	b.n	be64 <print_string_ptr+0x268>
		else
		{
			*ptr2++='\\';
    bdb8:	69bb      	ldr	r3, [r7, #24]
    bdba:	1c5a      	adds	r2, r3, #1
    bdbc:	61ba      	str	r2, [r7, #24]
    bdbe:	225c      	movs	r2, #92	; 0x5c
    bdc0:	701a      	strb	r2, [r3, #0]
			switch (token=*ptr++)
    bdc2:	69fb      	ldr	r3, [r7, #28]
    bdc4:	1c5a      	adds	r2, r3, #1
    bdc6:	61fa      	str	r2, [r7, #28]
    bdc8:	220b      	movs	r2, #11
    bdca:	18ba      	adds	r2, r7, r2
    bdcc:	781b      	ldrb	r3, [r3, #0]
    bdce:	7013      	strb	r3, [r2, #0]
    bdd0:	230b      	movs	r3, #11
    bdd2:	18fb      	adds	r3, r7, r3
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	2b0c      	cmp	r3, #12
    bdd8:	d020      	beq.n	be1c <print_string_ptr+0x220>
    bdda:	dc06      	bgt.n	bdea <print_string_ptr+0x1ee>
    bddc:	2b09      	cmp	r3, #9
    bdde:	d02f      	beq.n	be40 <print_string_ptr+0x244>
    bde0:	2b0a      	cmp	r3, #10
    bde2:	d021      	beq.n	be28 <print_string_ptr+0x22c>
    bde4:	2b08      	cmp	r3, #8
    bde6:	d013      	beq.n	be10 <print_string_ptr+0x214>
    bde8:	e030      	b.n	be4c <print_string_ptr+0x250>
    bdea:	2b22      	cmp	r3, #34	; 0x22
    bdec:	d00a      	beq.n	be04 <print_string_ptr+0x208>
    bdee:	2b5c      	cmp	r3, #92	; 0x5c
    bdf0:	d002      	beq.n	bdf8 <print_string_ptr+0x1fc>
    bdf2:	2b0d      	cmp	r3, #13
    bdf4:	d01e      	beq.n	be34 <print_string_ptr+0x238>
    bdf6:	e029      	b.n	be4c <print_string_ptr+0x250>
			{
				case '\\':	*ptr2++='\\';	break;
    bdf8:	69bb      	ldr	r3, [r7, #24]
    bdfa:	1c5a      	adds	r2, r3, #1
    bdfc:	61ba      	str	r2, [r7, #24]
    bdfe:	225c      	movs	r2, #92	; 0x5c
    be00:	701a      	strb	r2, [r3, #0]
    be02:	e02f      	b.n	be64 <print_string_ptr+0x268>
				case '\"':	*ptr2++='\"';	break;
    be04:	69bb      	ldr	r3, [r7, #24]
    be06:	1c5a      	adds	r2, r3, #1
    be08:	61ba      	str	r2, [r7, #24]
    be0a:	2222      	movs	r2, #34	; 0x22
    be0c:	701a      	strb	r2, [r3, #0]
    be0e:	e029      	b.n	be64 <print_string_ptr+0x268>
				case '\b':	*ptr2++='b';	break;
    be10:	69bb      	ldr	r3, [r7, #24]
    be12:	1c5a      	adds	r2, r3, #1
    be14:	61ba      	str	r2, [r7, #24]
    be16:	2262      	movs	r2, #98	; 0x62
    be18:	701a      	strb	r2, [r3, #0]
    be1a:	e023      	b.n	be64 <print_string_ptr+0x268>
				case '\f':	*ptr2++='f';	break;
    be1c:	69bb      	ldr	r3, [r7, #24]
    be1e:	1c5a      	adds	r2, r3, #1
    be20:	61ba      	str	r2, [r7, #24]
    be22:	2266      	movs	r2, #102	; 0x66
    be24:	701a      	strb	r2, [r3, #0]
    be26:	e01d      	b.n	be64 <print_string_ptr+0x268>
				case '\n':	*ptr2++='n';	break;
    be28:	69bb      	ldr	r3, [r7, #24]
    be2a:	1c5a      	adds	r2, r3, #1
    be2c:	61ba      	str	r2, [r7, #24]
    be2e:	226e      	movs	r2, #110	; 0x6e
    be30:	701a      	strb	r2, [r3, #0]
    be32:	e017      	b.n	be64 <print_string_ptr+0x268>
				case '\r':	*ptr2++='r';	break;
    be34:	69bb      	ldr	r3, [r7, #24]
    be36:	1c5a      	adds	r2, r3, #1
    be38:	61ba      	str	r2, [r7, #24]
    be3a:	2272      	movs	r2, #114	; 0x72
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	e011      	b.n	be64 <print_string_ptr+0x268>
				case '\t':	*ptr2++='t';	break;
    be40:	69bb      	ldr	r3, [r7, #24]
    be42:	1c5a      	adds	r2, r3, #1
    be44:	61ba      	str	r2, [r7, #24]
    be46:	2274      	movs	r2, #116	; 0x74
    be48:	701a      	strb	r2, [r3, #0]
    be4a:	e00b      	b.n	be64 <print_string_ptr+0x268>
				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
    be4c:	230b      	movs	r3, #11
    be4e:	18fb      	adds	r3, r7, r3
    be50:	781a      	ldrb	r2, [r3, #0]
    be52:	4916      	ldr	r1, [pc, #88]	; (beac <print_string_ptr+0x2b0>)
    be54:	69bb      	ldr	r3, [r7, #24]
    be56:	0018      	movs	r0, r3
    be58:	4b15      	ldr	r3, [pc, #84]	; (beb0 <print_string_ptr+0x2b4>)
    be5a:	4798      	blx	r3
    be5c:	69bb      	ldr	r3, [r7, #24]
    be5e:	3305      	adds	r3, #5
    be60:	61bb      	str	r3, [r7, #24]
    be62:	46c0      	nop			; (mov r8, r8)
	while (*ptr)
    be64:	69fb      	ldr	r3, [r7, #28]
    be66:	781b      	ldrb	r3, [r3, #0]
    be68:	2b00      	cmp	r3, #0
    be6a:	d190      	bne.n	bd8e <print_string_ptr+0x192>
			}
		}
	}
	*ptr2++='\"';*ptr2++=0;
    be6c:	69bb      	ldr	r3, [r7, #24]
    be6e:	1c5a      	adds	r2, r3, #1
    be70:	61ba      	str	r2, [r7, #24]
    be72:	2222      	movs	r2, #34	; 0x22
    be74:	701a      	strb	r2, [r3, #0]
    be76:	69bb      	ldr	r3, [r7, #24]
    be78:	1c5a      	adds	r2, r3, #1
    be7a:	61ba      	str	r2, [r7, #24]
    be7c:	2200      	movs	r2, #0
    be7e:	701a      	strb	r2, [r3, #0]
	return out;
    be80:	697b      	ldr	r3, [r7, #20]
}
    be82:	0018      	movs	r0, r3
    be84:	46bd      	mov	sp, r7
    be86:	b008      	add	sp, #32
    be88:	bd80      	pop	{r7, pc}
    be8a:	46c0      	nop			; (mov r8, r8)
    be8c:	20000010 	.word	0x20000010
    be90:	0000b8ad 	.word	0x0000b8ad
    be94:	20000008 	.word	0x20000008
    be98:	0001c01f 	.word	0x0001c01f
    be9c:	0001e478 	.word	0x0001e478
    bea0:	0001bab7 	.word	0x0001bab7
    bea4:	0001e47c 	.word	0x0001e47c
    bea8:	0001c003 	.word	0x0001c003
    beac:	0001e484 	.word	0x0001e484
    beb0:	0001bf0d 	.word	0x0001bf0d

0000beb4 <print_string>:
/* Invote print_string_ptr (which is useful) on an item. */
static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}
    beb4:	b580      	push	{r7, lr}
    beb6:	b082      	sub	sp, #8
    beb8:	af00      	add	r7, sp, #0
    beba:	6078      	str	r0, [r7, #4]
    bebc:	6039      	str	r1, [r7, #0]
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	691b      	ldr	r3, [r3, #16]
    bec2:	683a      	ldr	r2, [r7, #0]
    bec4:	0011      	movs	r1, r2
    bec6:	0018      	movs	r0, r3
    bec8:	4b03      	ldr	r3, [pc, #12]	; (bed8 <print_string+0x24>)
    beca:	4798      	blx	r3
    becc:	0003      	movs	r3, r0
    bece:	0018      	movs	r0, r3
    bed0:	46bd      	mov	sp, r7
    bed2:	b002      	add	sp, #8
    bed4:	bd80      	pop	{r7, pc}
    bed6:	46c0      	nop			; (mov r8, r8)
    bed8:	0000bbfd 	.word	0x0000bbfd

0000bedc <cJSON_Print>:
}
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
    bedc:	b590      	push	{r4, r7, lr}
    bede:	b083      	sub	sp, #12
    bee0:	af00      	add	r7, sp, #0
    bee2:	6078      	str	r0, [r7, #4]
    bee4:	6878      	ldr	r0, [r7, #4]
    bee6:	2300      	movs	r3, #0
    bee8:	2201      	movs	r2, #1
    beea:	2100      	movs	r1, #0
    beec:	4c03      	ldr	r4, [pc, #12]	; (befc <cJSON_Print+0x20>)
    beee:	47a0      	blx	r4
    bef0:	0003      	movs	r3, r0
    bef2:	0018      	movs	r0, r3
    bef4:	46bd      	mov	sp, r7
    bef6:	b003      	add	sp, #12
    bef8:	bd90      	pop	{r4, r7, pc}
    befa:	46c0      	nop			; (mov r8, r8)
    befc:	0000bf01 	.word	0x0000bf01

0000bf00 <print_value>:
	ep=value;return 0;	/* failure. */
}

/* Render a value to text. */
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
{
    bf00:	b590      	push	{r4, r7, lr}
    bf02:	b087      	sub	sp, #28
    bf04:	af00      	add	r7, sp, #0
    bf06:	60f8      	str	r0, [r7, #12]
    bf08:	60b9      	str	r1, [r7, #8]
    bf0a:	607a      	str	r2, [r7, #4]
    bf0c:	603b      	str	r3, [r7, #0]
	char *out=0;
    bf0e:	2300      	movs	r3, #0
    bf10:	617b      	str	r3, [r7, #20]
	if (!item) return 0;
    bf12:	68fb      	ldr	r3, [r7, #12]
    bf14:	2b00      	cmp	r3, #0
    bf16:	d101      	bne.n	bf1c <print_value+0x1c>
    bf18:	2300      	movs	r3, #0
    bf1a:	e0b7      	b.n	c08c <print_value+0x18c>
	if (p)
    bf1c:	683b      	ldr	r3, [r7, #0]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d06c      	beq.n	bffc <print_value+0xfc>
	{
		switch ((item->type)&255)
    bf22:	68fb      	ldr	r3, [r7, #12]
    bf24:	68db      	ldr	r3, [r3, #12]
    bf26:	22ff      	movs	r2, #255	; 0xff
    bf28:	4013      	ands	r3, r2
    bf2a:	2b06      	cmp	r3, #6
    bf2c:	d900      	bls.n	bf30 <print_value+0x30>
    bf2e:	e0ac      	b.n	c08a <print_value+0x18a>
    bf30:	009a      	lsls	r2, r3, #2
    bf32:	4b58      	ldr	r3, [pc, #352]	; (c094 <print_value+0x194>)
    bf34:	18d3      	adds	r3, r2, r3
    bf36:	681b      	ldr	r3, [r3, #0]
    bf38:	469f      	mov	pc, r3
		{
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
    bf3a:	683b      	ldr	r3, [r7, #0]
    bf3c:	2105      	movs	r1, #5
    bf3e:	0018      	movs	r0, r3
    bf40:	4b55      	ldr	r3, [pc, #340]	; (c098 <print_value+0x198>)
    bf42:	4798      	blx	r3
    bf44:	0003      	movs	r3, r0
    bf46:	617b      	str	r3, [r7, #20]
    bf48:	697b      	ldr	r3, [r7, #20]
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d100      	bne.n	bf50 <print_value+0x50>
    bf4e:	e097      	b.n	c080 <print_value+0x180>
    bf50:	697a      	ldr	r2, [r7, #20]
    bf52:	4b52      	ldr	r3, [pc, #328]	; (c09c <print_value+0x19c>)
    bf54:	0010      	movs	r0, r2
    bf56:	0019      	movs	r1, r3
    bf58:	2305      	movs	r3, #5
    bf5a:	001a      	movs	r2, r3
    bf5c:	4b50      	ldr	r3, [pc, #320]	; (c0a0 <print_value+0x1a0>)
    bf5e:	4798      	blx	r3
    bf60:	e08e      	b.n	c080 <print_value+0x180>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
    bf62:	683b      	ldr	r3, [r7, #0]
    bf64:	2106      	movs	r1, #6
    bf66:	0018      	movs	r0, r3
    bf68:	4b4b      	ldr	r3, [pc, #300]	; (c098 <print_value+0x198>)
    bf6a:	4798      	blx	r3
    bf6c:	0003      	movs	r3, r0
    bf6e:	617b      	str	r3, [r7, #20]
    bf70:	697b      	ldr	r3, [r7, #20]
    bf72:	2b00      	cmp	r3, #0
    bf74:	d100      	bne.n	bf78 <print_value+0x78>
    bf76:	e085      	b.n	c084 <print_value+0x184>
    bf78:	697a      	ldr	r2, [r7, #20]
    bf7a:	4b4a      	ldr	r3, [pc, #296]	; (c0a4 <print_value+0x1a4>)
    bf7c:	0010      	movs	r0, r2
    bf7e:	0019      	movs	r1, r3
    bf80:	2306      	movs	r3, #6
    bf82:	001a      	movs	r2, r3
    bf84:	4b46      	ldr	r3, [pc, #280]	; (c0a0 <print_value+0x1a0>)
    bf86:	4798      	blx	r3
    bf88:	e07c      	b.n	c084 <print_value+0x184>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
    bf8a:	683b      	ldr	r3, [r7, #0]
    bf8c:	2105      	movs	r1, #5
    bf8e:	0018      	movs	r0, r3
    bf90:	4b41      	ldr	r3, [pc, #260]	; (c098 <print_value+0x198>)
    bf92:	4798      	blx	r3
    bf94:	0003      	movs	r3, r0
    bf96:	617b      	str	r3, [r7, #20]
    bf98:	697b      	ldr	r3, [r7, #20]
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d100      	bne.n	bfa0 <print_value+0xa0>
    bf9e:	e073      	b.n	c088 <print_value+0x188>
    bfa0:	697a      	ldr	r2, [r7, #20]
    bfa2:	4b41      	ldr	r3, [pc, #260]	; (c0a8 <print_value+0x1a8>)
    bfa4:	0010      	movs	r0, r2
    bfa6:	0019      	movs	r1, r3
    bfa8:	2305      	movs	r3, #5
    bfaa:	001a      	movs	r2, r3
    bfac:	4b3c      	ldr	r3, [pc, #240]	; (c0a0 <print_value+0x1a0>)
    bfae:	4798      	blx	r3
    bfb0:	e06a      	b.n	c088 <print_value+0x188>
			case cJSON_Number:	out=print_number(item,p);break;
    bfb2:	683a      	ldr	r2, [r7, #0]
    bfb4:	68fb      	ldr	r3, [r7, #12]
    bfb6:	0011      	movs	r1, r2
    bfb8:	0018      	movs	r0, r3
    bfba:	4b3c      	ldr	r3, [pc, #240]	; (c0ac <print_value+0x1ac>)
    bfbc:	4798      	blx	r3
    bfbe:	0003      	movs	r3, r0
    bfc0:	617b      	str	r3, [r7, #20]
    bfc2:	e062      	b.n	c08a <print_value+0x18a>
			case cJSON_String:	out=print_string(item,p);break;
    bfc4:	683a      	ldr	r2, [r7, #0]
    bfc6:	68fb      	ldr	r3, [r7, #12]
    bfc8:	0011      	movs	r1, r2
    bfca:	0018      	movs	r0, r3
    bfcc:	4b38      	ldr	r3, [pc, #224]	; (c0b0 <print_value+0x1b0>)
    bfce:	4798      	blx	r3
    bfd0:	0003      	movs	r3, r0
    bfd2:	617b      	str	r3, [r7, #20]
    bfd4:	e059      	b.n	c08a <print_value+0x18a>
			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
    bfd6:	683b      	ldr	r3, [r7, #0]
    bfd8:	687a      	ldr	r2, [r7, #4]
    bfda:	68b9      	ldr	r1, [r7, #8]
    bfdc:	68f8      	ldr	r0, [r7, #12]
    bfde:	4c35      	ldr	r4, [pc, #212]	; (c0b4 <print_value+0x1b4>)
    bfe0:	47a0      	blx	r4
    bfe2:	0003      	movs	r3, r0
    bfe4:	617b      	str	r3, [r7, #20]
    bfe6:	e050      	b.n	c08a <print_value+0x18a>
			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
    bfe8:	683b      	ldr	r3, [r7, #0]
    bfea:	687a      	ldr	r2, [r7, #4]
    bfec:	68b9      	ldr	r1, [r7, #8]
    bfee:	68f8      	ldr	r0, [r7, #12]
    bff0:	4c31      	ldr	r4, [pc, #196]	; (c0b8 <print_value+0x1b8>)
    bff2:	47a0      	blx	r4
    bff4:	0003      	movs	r3, r0
    bff6:	617b      	str	r3, [r7, #20]
    bff8:	46c0      	nop			; (mov r8, r8)
    bffa:	e046      	b.n	c08a <print_value+0x18a>
		}
	}
	else
	{
		switch ((item->type)&255)
    bffc:	68fb      	ldr	r3, [r7, #12]
    bffe:	68db      	ldr	r3, [r3, #12]
    c000:	22ff      	movs	r2, #255	; 0xff
    c002:	4013      	ands	r3, r2
    c004:	2b06      	cmp	r3, #6
    c006:	d840      	bhi.n	c08a <print_value+0x18a>
    c008:	009a      	lsls	r2, r3, #2
    c00a:	4b2c      	ldr	r3, [pc, #176]	; (c0bc <print_value+0x1bc>)
    c00c:	18d3      	adds	r3, r2, r3
    c00e:	681b      	ldr	r3, [r3, #0]
    c010:	469f      	mov	pc, r3
		{
			case cJSON_NULL:	out=cJSON_strdup("null");	break;
    c012:	4b22      	ldr	r3, [pc, #136]	; (c09c <print_value+0x19c>)
    c014:	0018      	movs	r0, r3
    c016:	4b2a      	ldr	r3, [pc, #168]	; (c0c0 <print_value+0x1c0>)
    c018:	4798      	blx	r3
    c01a:	0003      	movs	r3, r0
    c01c:	617b      	str	r3, [r7, #20]
    c01e:	e034      	b.n	c08a <print_value+0x18a>
			case cJSON_False:	out=cJSON_strdup("false");break;
    c020:	4b20      	ldr	r3, [pc, #128]	; (c0a4 <print_value+0x1a4>)
    c022:	0018      	movs	r0, r3
    c024:	4b26      	ldr	r3, [pc, #152]	; (c0c0 <print_value+0x1c0>)
    c026:	4798      	blx	r3
    c028:	0003      	movs	r3, r0
    c02a:	617b      	str	r3, [r7, #20]
    c02c:	e02d      	b.n	c08a <print_value+0x18a>
			case cJSON_True:	out=cJSON_strdup("true"); break;
    c02e:	4b1e      	ldr	r3, [pc, #120]	; (c0a8 <print_value+0x1a8>)
    c030:	0018      	movs	r0, r3
    c032:	4b23      	ldr	r3, [pc, #140]	; (c0c0 <print_value+0x1c0>)
    c034:	4798      	blx	r3
    c036:	0003      	movs	r3, r0
    c038:	617b      	str	r3, [r7, #20]
    c03a:	e026      	b.n	c08a <print_value+0x18a>
			case cJSON_Number:	out=print_number(item,0);break;
    c03c:	68fb      	ldr	r3, [r7, #12]
    c03e:	2100      	movs	r1, #0
    c040:	0018      	movs	r0, r3
    c042:	4b1a      	ldr	r3, [pc, #104]	; (c0ac <print_value+0x1ac>)
    c044:	4798      	blx	r3
    c046:	0003      	movs	r3, r0
    c048:	617b      	str	r3, [r7, #20]
    c04a:	e01e      	b.n	c08a <print_value+0x18a>
			case cJSON_String:	out=print_string(item,0);break;
    c04c:	68fb      	ldr	r3, [r7, #12]
    c04e:	2100      	movs	r1, #0
    c050:	0018      	movs	r0, r3
    c052:	4b17      	ldr	r3, [pc, #92]	; (c0b0 <print_value+0x1b0>)
    c054:	4798      	blx	r3
    c056:	0003      	movs	r3, r0
    c058:	617b      	str	r3, [r7, #20]
    c05a:	e016      	b.n	c08a <print_value+0x18a>
			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
    c05c:	687a      	ldr	r2, [r7, #4]
    c05e:	68b9      	ldr	r1, [r7, #8]
    c060:	68f8      	ldr	r0, [r7, #12]
    c062:	2300      	movs	r3, #0
    c064:	4c13      	ldr	r4, [pc, #76]	; (c0b4 <print_value+0x1b4>)
    c066:	47a0      	blx	r4
    c068:	0003      	movs	r3, r0
    c06a:	617b      	str	r3, [r7, #20]
    c06c:	e00d      	b.n	c08a <print_value+0x18a>
			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
    c06e:	687a      	ldr	r2, [r7, #4]
    c070:	68b9      	ldr	r1, [r7, #8]
    c072:	68f8      	ldr	r0, [r7, #12]
    c074:	2300      	movs	r3, #0
    c076:	4c10      	ldr	r4, [pc, #64]	; (c0b8 <print_value+0x1b8>)
    c078:	47a0      	blx	r4
    c07a:	0003      	movs	r3, r0
    c07c:	617b      	str	r3, [r7, #20]
    c07e:	e004      	b.n	c08a <print_value+0x18a>
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
    c080:	46c0      	nop			; (mov r8, r8)
    c082:	e002      	b.n	c08a <print_value+0x18a>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
    c084:	46c0      	nop			; (mov r8, r8)
    c086:	e000      	b.n	c08a <print_value+0x18a>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
    c088:	46c0      	nop			; (mov r8, r8)
		}
	}
	return out;
    c08a:	697b      	ldr	r3, [r7, #20]
}
    c08c:	0018      	movs	r0, r3
    c08e:	46bd      	mov	sp, r7
    c090:	b007      	add	sp, #28
    c092:	bd90      	pop	{r4, r7, pc}
    c094:	0001e4a8 	.word	0x0001e4a8
    c098:	0000b8ad 	.word	0x0000b8ad
    c09c:	0001e48c 	.word	0x0001e48c
    c0a0:	0001bab7 	.word	0x0001bab7
    c0a4:	0001e494 	.word	0x0001e494
    c0a8:	0001e49c 	.word	0x0001e49c
    c0ac:	0000b9bd 	.word	0x0000b9bd
    c0b0:	0000beb5 	.word	0x0000beb5
    c0b4:	0000c0c5 	.word	0x0000c0c5
    c0b8:	0000c419 	.word	0x0000c419
    c0bc:	0001e4c4 	.word	0x0001e4c4
    c0c0:	0000b749 	.word	0x0000b749

0000c0c4 <print_array>:
	ep=value;return 0;	/* malformed. */
}

/* Render an array to text */
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
{
    c0c4:	b590      	push	{r4, r7, lr}
    c0c6:	b08f      	sub	sp, #60	; 0x3c
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	60f8      	str	r0, [r7, #12]
    c0cc:	60b9      	str	r1, [r7, #8]
    c0ce:	607a      	str	r2, [r7, #4]
    c0d0:	603b      	str	r3, [r7, #0]
	char **entries;
	char *out=0,*ptr,*ret;int len=5;
    c0d2:	2300      	movs	r3, #0
    c0d4:	637b      	str	r3, [r7, #52]	; 0x34
    c0d6:	2305      	movs	r3, #5
    c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	cJSON *child=item->child;
    c0da:	68fb      	ldr	r3, [r7, #12]
    c0dc:	689b      	ldr	r3, [r3, #8]
    c0de:	62bb      	str	r3, [r7, #40]	; 0x28
	int numentries=0,i=0,fail=0;
    c0e0:	2300      	movs	r3, #0
    c0e2:	627b      	str	r3, [r7, #36]	; 0x24
    c0e4:	2300      	movs	r3, #0
    c0e6:	623b      	str	r3, [r7, #32]
    c0e8:	2300      	movs	r3, #0
    c0ea:	61fb      	str	r3, [r7, #28]
	size_t tmplen=0;
    c0ec:	2300      	movs	r3, #0
    c0ee:	61bb      	str	r3, [r7, #24]
	
	/* How many entries in the array? */
	while (child) numentries++,child=child->next;
    c0f0:	e005      	b.n	c0fe <print_array+0x3a>
    c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0f4:	3301      	adds	r3, #1
    c0f6:	627b      	str	r3, [r7, #36]	; 0x24
    c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c100:	2b00      	cmp	r3, #0
    c102:	d1f6      	bne.n	c0f2 <print_array+0x2e>
	/* Explicitly handle numentries==0 */
	if (!numentries)
    c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c106:	2b00      	cmp	r3, #0
    c108:	d11d      	bne.n	c146 <print_array+0x82>
	{
		if (p)	out=ensure(p,3);
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	2b00      	cmp	r3, #0
    c10e:	d007      	beq.n	c120 <print_array+0x5c>
    c110:	683b      	ldr	r3, [r7, #0]
    c112:	2103      	movs	r1, #3
    c114:	0018      	movs	r0, r3
    c116:	4bb7      	ldr	r3, [pc, #732]	; (c3f4 <print_array+0x330>)
    c118:	4798      	blx	r3
    c11a:	0003      	movs	r3, r0
    c11c:	637b      	str	r3, [r7, #52]	; 0x34
    c11e:	e005      	b.n	c12c <print_array+0x68>
		else	out=(char*)cJSON_malloc(3);
    c120:	4bb5      	ldr	r3, [pc, #724]	; (c3f8 <print_array+0x334>)
    c122:	681b      	ldr	r3, [r3, #0]
    c124:	2003      	movs	r0, #3
    c126:	4798      	blx	r3
    c128:	0003      	movs	r3, r0
    c12a:	637b      	str	r3, [r7, #52]	; 0x34
		if (out) strcpy(out,"[]");
    c12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c12e:	2b00      	cmp	r3, #0
    c130:	d007      	beq.n	c142 <print_array+0x7e>
    c132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c134:	4bb1      	ldr	r3, [pc, #708]	; (c3fc <print_array+0x338>)
    c136:	0010      	movs	r0, r2
    c138:	0019      	movs	r1, r3
    c13a:	2303      	movs	r3, #3
    c13c:	001a      	movs	r2, r3
    c13e:	4bb0      	ldr	r3, [pc, #704]	; (c400 <print_array+0x33c>)
    c140:	4798      	blx	r3
		return out;
    c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c144:	e152      	b.n	c3ec <print_array+0x328>
	}

	if (p)
    c146:	683b      	ldr	r3, [r7, #0]
    c148:	2b00      	cmp	r3, #0
    c14a:	d100      	bne.n	c14e <print_array+0x8a>
    c14c:	e07a      	b.n	c244 <print_array+0x180>
	{
		/* Compose the output array. */
		i=p->offset;
    c14e:	683b      	ldr	r3, [r7, #0]
    c150:	689b      	ldr	r3, [r3, #8]
    c152:	623b      	str	r3, [r7, #32]
		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
    c154:	683b      	ldr	r3, [r7, #0]
    c156:	2101      	movs	r1, #1
    c158:	0018      	movs	r0, r3
    c15a:	4ba6      	ldr	r3, [pc, #664]	; (c3f4 <print_array+0x330>)
    c15c:	4798      	blx	r3
    c15e:	0003      	movs	r3, r0
    c160:	633b      	str	r3, [r7, #48]	; 0x30
    c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c164:	2b00      	cmp	r3, #0
    c166:	d101      	bne.n	c16c <print_array+0xa8>
    c168:	2300      	movs	r3, #0
    c16a:	e13f      	b.n	c3ec <print_array+0x328>
    c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c16e:	225b      	movs	r2, #91	; 0x5b
    c170:	701a      	strb	r2, [r3, #0]
    c172:	683b      	ldr	r3, [r7, #0]
    c174:	689b      	ldr	r3, [r3, #8]
    c176:	1c5a      	adds	r2, r3, #1
    c178:	683b      	ldr	r3, [r7, #0]
    c17a:	609a      	str	r2, [r3, #8]
		child=item->child;
    c17c:	68fb      	ldr	r3, [r7, #12]
    c17e:	689b      	ldr	r3, [r3, #8]
    c180:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    c182:	e03f      	b.n	c204 <print_array+0x140>
		{
			print_value(child,depth+1,fmt,p);
    c184:	68bb      	ldr	r3, [r7, #8]
    c186:	1c59      	adds	r1, r3, #1
    c188:	683b      	ldr	r3, [r7, #0]
    c18a:	687a      	ldr	r2, [r7, #4]
    c18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c18e:	4c9d      	ldr	r4, [pc, #628]	; (c404 <print_array+0x340>)
    c190:	47a0      	blx	r4
			p->offset=update(p);
    c192:	683b      	ldr	r3, [r7, #0]
    c194:	0018      	movs	r0, r3
    c196:	4b9c      	ldr	r3, [pc, #624]	; (c408 <print_array+0x344>)
    c198:	4798      	blx	r3
    c19a:	0002      	movs	r2, r0
    c19c:	683b      	ldr	r3, [r7, #0]
    c19e:	609a      	str	r2, [r3, #8]
			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
    c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1a2:	681b      	ldr	r3, [r3, #0]
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d02a      	beq.n	c1fe <print_array+0x13a>
    c1a8:	687b      	ldr	r3, [r7, #4]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d001      	beq.n	c1b2 <print_array+0xee>
    c1ae:	2302      	movs	r3, #2
    c1b0:	e000      	b.n	c1b4 <print_array+0xf0>
    c1b2:	2301      	movs	r3, #1
    c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1b8:	1c5a      	adds	r2, r3, #1
    c1ba:	683b      	ldr	r3, [r7, #0]
    c1bc:	0011      	movs	r1, r2
    c1be:	0018      	movs	r0, r3
    c1c0:	4b8c      	ldr	r3, [pc, #560]	; (c3f4 <print_array+0x330>)
    c1c2:	4798      	blx	r3
    c1c4:	0003      	movs	r3, r0
    c1c6:	633b      	str	r3, [r7, #48]	; 0x30
    c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d101      	bne.n	c1d2 <print_array+0x10e>
    c1ce:	2300      	movs	r3, #0
    c1d0:	e10c      	b.n	c3ec <print_array+0x328>
    c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c1d4:	1c5a      	adds	r2, r3, #1
    c1d6:	633a      	str	r2, [r7, #48]	; 0x30
    c1d8:	222c      	movs	r2, #44	; 0x2c
    c1da:	701a      	strb	r2, [r3, #0]
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d004      	beq.n	c1ec <print_array+0x128>
    c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c1e4:	1c5a      	adds	r2, r3, #1
    c1e6:	633a      	str	r2, [r7, #48]	; 0x30
    c1e8:	2220      	movs	r2, #32
    c1ea:	701a      	strb	r2, [r3, #0]
    c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c1ee:	2200      	movs	r2, #0
    c1f0:	701a      	strb	r2, [r3, #0]
    c1f2:	683b      	ldr	r3, [r7, #0]
    c1f4:	689a      	ldr	r2, [r3, #8]
    c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1f8:	18d2      	adds	r2, r2, r3
    c1fa:	683b      	ldr	r3, [r7, #0]
    c1fc:	609a      	str	r2, [r3, #8]
			child=child->next;
    c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c200:	681b      	ldr	r3, [r3, #0]
    c202:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c206:	2b00      	cmp	r3, #0
    c208:	d002      	beq.n	c210 <print_array+0x14c>
    c20a:	69fb      	ldr	r3, [r7, #28]
    c20c:	2b00      	cmp	r3, #0
    c20e:	d0b9      	beq.n	c184 <print_array+0xc0>
		}
		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
    c210:	683b      	ldr	r3, [r7, #0]
    c212:	2102      	movs	r1, #2
    c214:	0018      	movs	r0, r3
    c216:	4b77      	ldr	r3, [pc, #476]	; (c3f4 <print_array+0x330>)
    c218:	4798      	blx	r3
    c21a:	0003      	movs	r3, r0
    c21c:	633b      	str	r3, [r7, #48]	; 0x30
    c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c220:	2b00      	cmp	r3, #0
    c222:	d101      	bne.n	c228 <print_array+0x164>
    c224:	2300      	movs	r3, #0
    c226:	e0e1      	b.n	c3ec <print_array+0x328>
    c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c22a:	1c5a      	adds	r2, r3, #1
    c22c:	633a      	str	r2, [r7, #48]	; 0x30
    c22e:	225d      	movs	r2, #93	; 0x5d
    c230:	701a      	strb	r2, [r3, #0]
    c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c234:	2200      	movs	r2, #0
    c236:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
    c238:	683b      	ldr	r3, [r7, #0]
    c23a:	681a      	ldr	r2, [r3, #0]
    c23c:	6a3b      	ldr	r3, [r7, #32]
    c23e:	18d3      	adds	r3, r2, r3
    c240:	637b      	str	r3, [r7, #52]	; 0x34
    c242:	e0d2      	b.n	c3ea <print_array+0x326>
	}
	else
	{
		/* Allocate an array to hold the values for each */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
    c244:	4b6c      	ldr	r3, [pc, #432]	; (c3f8 <print_array+0x334>)
    c246:	681b      	ldr	r3, [r3, #0]
    c248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c24a:	0092      	lsls	r2, r2, #2
    c24c:	0010      	movs	r0, r2
    c24e:	4798      	blx	r3
    c250:	0003      	movs	r3, r0
    c252:	617b      	str	r3, [r7, #20]
		if (!entries) return 0;
    c254:	697b      	ldr	r3, [r7, #20]
    c256:	2b00      	cmp	r3, #0
    c258:	d101      	bne.n	c25e <print_array+0x19a>
    c25a:	2300      	movs	r3, #0
    c25c:	e0c6      	b.n	c3ec <print_array+0x328>
		memset(entries,0,numentries*sizeof(char*));
    c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c260:	009a      	lsls	r2, r3, #2
    c262:	697b      	ldr	r3, [r7, #20]
    c264:	2100      	movs	r1, #0
    c266:	0018      	movs	r0, r3
    c268:	4b68      	ldr	r3, [pc, #416]	; (c40c <print_array+0x348>)
    c26a:	4798      	blx	r3
		/* Retrieve all the results: */
		child=item->child;
    c26c:	68fb      	ldr	r3, [r7, #12]
    c26e:	689b      	ldr	r3, [r3, #8]
    c270:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    c272:	e029      	b.n	c2c8 <print_array+0x204>
		{
			ret=print_value(child,depth+1,fmt,0);
    c274:	68bb      	ldr	r3, [r7, #8]
    c276:	1c59      	adds	r1, r3, #1
    c278:	687a      	ldr	r2, [r7, #4]
    c27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c27c:	2300      	movs	r3, #0
    c27e:	4c61      	ldr	r4, [pc, #388]	; (c404 <print_array+0x340>)
    c280:	47a0      	blx	r4
    c282:	0003      	movs	r3, r0
    c284:	613b      	str	r3, [r7, #16]
			entries[i++]=ret;
    c286:	6a3b      	ldr	r3, [r7, #32]
    c288:	1c5a      	adds	r2, r3, #1
    c28a:	623a      	str	r2, [r7, #32]
    c28c:	009b      	lsls	r3, r3, #2
    c28e:	697a      	ldr	r2, [r7, #20]
    c290:	18d3      	adds	r3, r2, r3
    c292:	693a      	ldr	r2, [r7, #16]
    c294:	601a      	str	r2, [r3, #0]
			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
    c296:	693b      	ldr	r3, [r7, #16]
    c298:	2b00      	cmp	r3, #0
    c29a:	d010      	beq.n	c2be <print_array+0x1fa>
    c29c:	693b      	ldr	r3, [r7, #16]
    c29e:	0018      	movs	r0, r3
    c2a0:	4b5b      	ldr	r3, [pc, #364]	; (c410 <print_array+0x34c>)
    c2a2:	4798      	blx	r3
    c2a4:	0002      	movs	r2, r0
    c2a6:	687b      	ldr	r3, [r7, #4]
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	d001      	beq.n	c2b0 <print_array+0x1ec>
    c2ac:	2301      	movs	r3, #1
    c2ae:	e000      	b.n	c2b2 <print_array+0x1ee>
    c2b0:	2300      	movs	r3, #0
    c2b2:	18d2      	adds	r2, r2, r3
    c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2b6:	18d3      	adds	r3, r2, r3
    c2b8:	3302      	adds	r3, #2
    c2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    c2bc:	e001      	b.n	c2c2 <print_array+0x1fe>
    c2be:	2301      	movs	r3, #1
    c2c0:	61fb      	str	r3, [r7, #28]
			child=child->next;
    c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2c4:	681b      	ldr	r3, [r3, #0]
    c2c6:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
    c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d002      	beq.n	c2d4 <print_array+0x210>
    c2ce:	69fb      	ldr	r3, [r7, #28]
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d0cf      	beq.n	c274 <print_array+0x1b0>
		}
		
		/* If we didn't fail, try to malloc the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
    c2d4:	69fb      	ldr	r3, [r7, #28]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d106      	bne.n	c2e8 <print_array+0x224>
    c2da:	4b47      	ldr	r3, [pc, #284]	; (c3f8 <print_array+0x334>)
    c2dc:	681b      	ldr	r3, [r3, #0]
    c2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c2e0:	0010      	movs	r0, r2
    c2e2:	4798      	blx	r3
    c2e4:	0003      	movs	r3, r0
    c2e6:	637b      	str	r3, [r7, #52]	; 0x34
		/* If that fails, we fail. */
		if (!out) fail=1;
    c2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d101      	bne.n	c2f2 <print_array+0x22e>
    c2ee:	2301      	movs	r3, #1
    c2f0:	61fb      	str	r3, [r7, #28]

		/* Handle failure. */
		if (fail)
    c2f2:	69fb      	ldr	r3, [r7, #28]
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	d020      	beq.n	c33a <print_array+0x276>
		{
			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
    c2f8:	2300      	movs	r3, #0
    c2fa:	623b      	str	r3, [r7, #32]
    c2fc:	e012      	b.n	c324 <print_array+0x260>
    c2fe:	6a3b      	ldr	r3, [r7, #32]
    c300:	009b      	lsls	r3, r3, #2
    c302:	697a      	ldr	r2, [r7, #20]
    c304:	18d3      	adds	r3, r2, r3
    c306:	681b      	ldr	r3, [r3, #0]
    c308:	2b00      	cmp	r3, #0
    c30a:	d008      	beq.n	c31e <print_array+0x25a>
    c30c:	4b41      	ldr	r3, [pc, #260]	; (c414 <print_array+0x350>)
    c30e:	681a      	ldr	r2, [r3, #0]
    c310:	6a3b      	ldr	r3, [r7, #32]
    c312:	009b      	lsls	r3, r3, #2
    c314:	6979      	ldr	r1, [r7, #20]
    c316:	18cb      	adds	r3, r1, r3
    c318:	681b      	ldr	r3, [r3, #0]
    c31a:	0018      	movs	r0, r3
    c31c:	4790      	blx	r2
    c31e:	6a3b      	ldr	r3, [r7, #32]
    c320:	3301      	adds	r3, #1
    c322:	623b      	str	r3, [r7, #32]
    c324:	6a3a      	ldr	r2, [r7, #32]
    c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c328:	429a      	cmp	r2, r3
    c32a:	dbe8      	blt.n	c2fe <print_array+0x23a>
			cJSON_free(entries);
    c32c:	4b39      	ldr	r3, [pc, #228]	; (c414 <print_array+0x350>)
    c32e:	681b      	ldr	r3, [r3, #0]
    c330:	697a      	ldr	r2, [r7, #20]
    c332:	0010      	movs	r0, r2
    c334:	4798      	blx	r3
			return 0;
    c336:	2300      	movs	r3, #0
    c338:	e058      	b.n	c3ec <print_array+0x328>
		}
		
		/* Compose the output array. */
		*out='[';
    c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c33c:	225b      	movs	r2, #91	; 0x5b
    c33e:	701a      	strb	r2, [r3, #0]
		ptr=out+1;*ptr=0;
    c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c342:	3301      	adds	r3, #1
    c344:	633b      	str	r3, [r7, #48]	; 0x30
    c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c348:	2200      	movs	r2, #0
    c34a:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
    c34c:	2300      	movs	r3, #0
    c34e:	623b      	str	r3, [r7, #32]
    c350:	e038      	b.n	c3c4 <print_array+0x300>
		{
			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
    c352:	6a3b      	ldr	r3, [r7, #32]
    c354:	009b      	lsls	r3, r3, #2
    c356:	697a      	ldr	r2, [r7, #20]
    c358:	18d3      	adds	r3, r2, r3
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	0018      	movs	r0, r3
    c35e:	4b2c      	ldr	r3, [pc, #176]	; (c410 <print_array+0x34c>)
    c360:	4798      	blx	r3
    c362:	0003      	movs	r3, r0
    c364:	61bb      	str	r3, [r7, #24]
    c366:	6a3b      	ldr	r3, [r7, #32]
    c368:	009b      	lsls	r3, r3, #2
    c36a:	697a      	ldr	r2, [r7, #20]
    c36c:	18d3      	adds	r3, r2, r3
    c36e:	6819      	ldr	r1, [r3, #0]
    c370:	69ba      	ldr	r2, [r7, #24]
    c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c374:	0018      	movs	r0, r3
    c376:	4b22      	ldr	r3, [pc, #136]	; (c400 <print_array+0x33c>)
    c378:	4798      	blx	r3
    c37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c37c:	69bb      	ldr	r3, [r7, #24]
    c37e:	18d3      	adds	r3, r2, r3
    c380:	633b      	str	r3, [r7, #48]	; 0x30
			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
    c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c384:	1e5a      	subs	r2, r3, #1
    c386:	6a3b      	ldr	r3, [r7, #32]
    c388:	429a      	cmp	r2, r3
    c38a:	d00f      	beq.n	c3ac <print_array+0x2e8>
    c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c38e:	1c5a      	adds	r2, r3, #1
    c390:	633a      	str	r2, [r7, #48]	; 0x30
    c392:	222c      	movs	r2, #44	; 0x2c
    c394:	701a      	strb	r2, [r3, #0]
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	2b00      	cmp	r3, #0
    c39a:	d004      	beq.n	c3a6 <print_array+0x2e2>
    c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c39e:	1c5a      	adds	r2, r3, #1
    c3a0:	633a      	str	r2, [r7, #48]	; 0x30
    c3a2:	2220      	movs	r2, #32
    c3a4:	701a      	strb	r2, [r3, #0]
    c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3a8:	2200      	movs	r2, #0
    c3aa:	701a      	strb	r2, [r3, #0]
			cJSON_free(entries[i]);
    c3ac:	4b19      	ldr	r3, [pc, #100]	; (c414 <print_array+0x350>)
    c3ae:	681a      	ldr	r2, [r3, #0]
    c3b0:	6a3b      	ldr	r3, [r7, #32]
    c3b2:	009b      	lsls	r3, r3, #2
    c3b4:	6979      	ldr	r1, [r7, #20]
    c3b6:	18cb      	adds	r3, r1, r3
    c3b8:	681b      	ldr	r3, [r3, #0]
    c3ba:	0018      	movs	r0, r3
    c3bc:	4790      	blx	r2
		for (i=0;i<numentries;i++)
    c3be:	6a3b      	ldr	r3, [r7, #32]
    c3c0:	3301      	adds	r3, #1
    c3c2:	623b      	str	r3, [r7, #32]
    c3c4:	6a3a      	ldr	r2, [r7, #32]
    c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3c8:	429a      	cmp	r2, r3
    c3ca:	dbc2      	blt.n	c352 <print_array+0x28e>
		}
		cJSON_free(entries);
    c3cc:	4b11      	ldr	r3, [pc, #68]	; (c414 <print_array+0x350>)
    c3ce:	681b      	ldr	r3, [r3, #0]
    c3d0:	697a      	ldr	r2, [r7, #20]
    c3d2:	0010      	movs	r0, r2
    c3d4:	4798      	blx	r3
		*ptr++=']';*ptr++=0;
    c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3d8:	1c5a      	adds	r2, r3, #1
    c3da:	633a      	str	r2, [r7, #48]	; 0x30
    c3dc:	225d      	movs	r2, #93	; 0x5d
    c3de:	701a      	strb	r2, [r3, #0]
    c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3e2:	1c5a      	adds	r2, r3, #1
    c3e4:	633a      	str	r2, [r7, #48]	; 0x30
    c3e6:	2200      	movs	r2, #0
    c3e8:	701a      	strb	r2, [r3, #0]
	}
	return out;	
    c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c3ec:	0018      	movs	r0, r3
    c3ee:	46bd      	mov	sp, r7
    c3f0:	b00f      	add	sp, #60	; 0x3c
    c3f2:	bd90      	pop	{r4, r7, pc}
    c3f4:	0000b8ad 	.word	0x0000b8ad
    c3f8:	20000008 	.word	0x20000008
    c3fc:	0001e4a4 	.word	0x0001e4a4
    c400:	0001bab7 	.word	0x0001bab7
    c404:	0000bf01 	.word	0x0000bf01
    c408:	0000b979 	.word	0x0000b979
    c40c:	0001baed 	.word	0x0001baed
    c410:	0001c02f 	.word	0x0001c02f
    c414:	2000000c 	.word	0x2000000c

0000c418 <print_object>:
	ep=value;return 0;	/* malformed. */
}

/* Render an object to text. */
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
{
    c418:	b5b0      	push	{r4, r5, r7, lr}
    c41a:	b092      	sub	sp, #72	; 0x48
    c41c:	af00      	add	r7, sp, #0
    c41e:	60f8      	str	r0, [r7, #12]
    c420:	60b9      	str	r1, [r7, #8]
    c422:	607a      	str	r2, [r7, #4]
    c424:	603b      	str	r3, [r7, #0]
	char **entries=0,**names=0;
    c426:	2300      	movs	r3, #0
    c428:	627b      	str	r3, [r7, #36]	; 0x24
    c42a:	2300      	movs	r3, #0
    c42c:	623b      	str	r3, [r7, #32]
	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
    c42e:	2300      	movs	r3, #0
    c430:	647b      	str	r3, [r7, #68]	; 0x44
    c432:	2307      	movs	r3, #7
    c434:	63fb      	str	r3, [r7, #60]	; 0x3c
    c436:	2300      	movs	r3, #0
    c438:	63bb      	str	r3, [r7, #56]	; 0x38
	cJSON *child=item->child;
    c43a:	68fb      	ldr	r3, [r7, #12]
    c43c:	689b      	ldr	r3, [r3, #8]
    c43e:	633b      	str	r3, [r7, #48]	; 0x30
	int numentries=0,fail=0;
    c440:	2300      	movs	r3, #0
    c442:	62fb      	str	r3, [r7, #44]	; 0x2c
    c444:	2300      	movs	r3, #0
    c446:	62bb      	str	r3, [r7, #40]	; 0x28
	size_t tmplen=0;
    c448:	2300      	movs	r3, #0
    c44a:	61fb      	str	r3, [r7, #28]
	/* Count the number of entries. */
	while (child) numentries++,child=child->next;
    c44c:	e005      	b.n	c45a <print_object+0x42>
    c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c450:	3301      	adds	r3, #1
    c452:	62fb      	str	r3, [r7, #44]	; 0x2c
    c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c456:	681b      	ldr	r3, [r3, #0]
    c458:	633b      	str	r3, [r7, #48]	; 0x30
    c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c45c:	2b00      	cmp	r3, #0
    c45e:	d1f6      	bne.n	c44e <print_object+0x36>
	/* Explicitly handle empty object case */
	if (!numentries)
    c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c462:	2b00      	cmp	r3, #0
    c464:	d14e      	bne.n	c504 <print_object+0xec>
	{
		if (p) out=ensure(p,fmt?depth+4:3);
    c466:	683b      	ldr	r3, [r7, #0]
    c468:	2b00      	cmp	r3, #0
    c46a:	d00e      	beq.n	c48a <print_object+0x72>
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	2b00      	cmp	r3, #0
    c470:	d002      	beq.n	c478 <print_object+0x60>
    c472:	68bb      	ldr	r3, [r7, #8]
    c474:	3304      	adds	r3, #4
    c476:	e000      	b.n	c47a <print_object+0x62>
    c478:	2303      	movs	r3, #3
    c47a:	683a      	ldr	r2, [r7, #0]
    c47c:	0019      	movs	r1, r3
    c47e:	0010      	movs	r0, r2
    c480:	4bc5      	ldr	r3, [pc, #788]	; (c798 <print_object+0x380>)
    c482:	4798      	blx	r3
    c484:	0003      	movs	r3, r0
    c486:	647b      	str	r3, [r7, #68]	; 0x44
    c488:	e00c      	b.n	c4a4 <print_object+0x8c>
		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
    c48a:	4bc4      	ldr	r3, [pc, #784]	; (c79c <print_object+0x384>)
    c48c:	681b      	ldr	r3, [r3, #0]
    c48e:	687a      	ldr	r2, [r7, #4]
    c490:	2a00      	cmp	r2, #0
    c492:	d002      	beq.n	c49a <print_object+0x82>
    c494:	68ba      	ldr	r2, [r7, #8]
    c496:	3204      	adds	r2, #4
    c498:	e000      	b.n	c49c <print_object+0x84>
    c49a:	2203      	movs	r2, #3
    c49c:	0010      	movs	r0, r2
    c49e:	4798      	blx	r3
    c4a0:	0003      	movs	r3, r0
    c4a2:	647b      	str	r3, [r7, #68]	; 0x44
		if (!out)	return 0;
    c4a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	d101      	bne.n	c4ae <print_object+0x96>
    c4aa:	2300      	movs	r3, #0
    c4ac:	e282      	b.n	c9b4 <print_object+0x59c>
		ptr=out;*ptr++='{';
    c4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c4b0:	643b      	str	r3, [r7, #64]	; 0x40
    c4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4b4:	1c5a      	adds	r2, r3, #1
    c4b6:	643a      	str	r2, [r7, #64]	; 0x40
    c4b8:	227b      	movs	r2, #123	; 0x7b
    c4ba:	701a      	strb	r2, [r3, #0]
		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
    c4bc:	687b      	ldr	r3, [r7, #4]
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d014      	beq.n	c4ec <print_object+0xd4>
    c4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4c4:	1c5a      	adds	r2, r3, #1
    c4c6:	643a      	str	r2, [r7, #64]	; 0x40
    c4c8:	220a      	movs	r2, #10
    c4ca:	701a      	strb	r2, [r3, #0]
    c4cc:	2300      	movs	r3, #0
    c4ce:	63bb      	str	r3, [r7, #56]	; 0x38
    c4d0:	e007      	b.n	c4e2 <print_object+0xca>
    c4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4d4:	1c5a      	adds	r2, r3, #1
    c4d6:	643a      	str	r2, [r7, #64]	; 0x40
    c4d8:	2209      	movs	r2, #9
    c4da:	701a      	strb	r2, [r3, #0]
    c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c4de:	3301      	adds	r3, #1
    c4e0:	63bb      	str	r3, [r7, #56]	; 0x38
    c4e2:	68bb      	ldr	r3, [r7, #8]
    c4e4:	1e5a      	subs	r2, r3, #1
    c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c4e8:	429a      	cmp	r2, r3
    c4ea:	dcf2      	bgt.n	c4d2 <print_object+0xba>
		*ptr++='}';*ptr++=0;
    c4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4ee:	1c5a      	adds	r2, r3, #1
    c4f0:	643a      	str	r2, [r7, #64]	; 0x40
    c4f2:	227d      	movs	r2, #125	; 0x7d
    c4f4:	701a      	strb	r2, [r3, #0]
    c4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4f8:	1c5a      	adds	r2, r3, #1
    c4fa:	643a      	str	r2, [r7, #64]	; 0x40
    c4fc:	2200      	movs	r2, #0
    c4fe:	701a      	strb	r2, [r3, #0]
		return out;
    c500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c502:	e257      	b.n	c9b4 <print_object+0x59c>
	}
	if (p)
    c504:	683b      	ldr	r3, [r7, #0]
    c506:	2b00      	cmp	r3, #0
    c508:	d100      	bne.n	c50c <print_object+0xf4>
    c50a:	e10a      	b.n	c722 <print_object+0x30a>
	{
		/* Compose the output: */
		i=p->offset;
    c50c:	683b      	ldr	r3, [r7, #0]
    c50e:	689b      	ldr	r3, [r3, #8]
    c510:	63bb      	str	r3, [r7, #56]	; 0x38
		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
    c512:	687b      	ldr	r3, [r7, #4]
    c514:	2b00      	cmp	r3, #0
    c516:	d001      	beq.n	c51c <print_object+0x104>
    c518:	2302      	movs	r3, #2
    c51a:	e000      	b.n	c51e <print_object+0x106>
    c51c:	2301      	movs	r3, #1
    c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
    c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c522:	1c5a      	adds	r2, r3, #1
    c524:	683b      	ldr	r3, [r7, #0]
    c526:	0011      	movs	r1, r2
    c528:	0018      	movs	r0, r3
    c52a:	4b9b      	ldr	r3, [pc, #620]	; (c798 <print_object+0x380>)
    c52c:	4798      	blx	r3
    c52e:	0003      	movs	r3, r0
    c530:	643b      	str	r3, [r7, #64]	; 0x40
    c532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c534:	2b00      	cmp	r3, #0
    c536:	d101      	bne.n	c53c <print_object+0x124>
    c538:	2300      	movs	r3, #0
    c53a:	e23b      	b.n	c9b4 <print_object+0x59c>
		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
    c53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c53e:	1c5a      	adds	r2, r3, #1
    c540:	643a      	str	r2, [r7, #64]	; 0x40
    c542:	227b      	movs	r2, #123	; 0x7b
    c544:	701a      	strb	r2, [r3, #0]
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	2b00      	cmp	r3, #0
    c54a:	d004      	beq.n	c556 <print_object+0x13e>
    c54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c54e:	1c5a      	adds	r2, r3, #1
    c550:	643a      	str	r2, [r7, #64]	; 0x40
    c552:	220a      	movs	r2, #10
    c554:	701a      	strb	r2, [r3, #0]
    c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c558:	2200      	movs	r2, #0
    c55a:	701a      	strb	r2, [r3, #0]
    c55c:	683b      	ldr	r3, [r7, #0]
    c55e:	689a      	ldr	r2, [r3, #8]
    c560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c562:	18d2      	adds	r2, r2, r3
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	609a      	str	r2, [r3, #8]
		child=item->child;depth++;
    c568:	68fb      	ldr	r3, [r7, #12]
    c56a:	689b      	ldr	r3, [r3, #8]
    c56c:	633b      	str	r3, [r7, #48]	; 0x30
    c56e:	68bb      	ldr	r3, [r7, #8]
    c570:	3301      	adds	r3, #1
    c572:	60bb      	str	r3, [r7, #8]
		while (child)
    c574:	e09d      	b.n	c6b2 <print_object+0x29a>
		{
			if (fmt)
    c576:	687b      	ldr	r3, [r7, #4]
    c578:	2b00      	cmp	r3, #0
    c57a:	d021      	beq.n	c5c0 <print_object+0x1a8>
			{
				ptr=ensure(p,depth);	if (!ptr) return 0;
    c57c:	68ba      	ldr	r2, [r7, #8]
    c57e:	683b      	ldr	r3, [r7, #0]
    c580:	0011      	movs	r1, r2
    c582:	0018      	movs	r0, r3
    c584:	4b84      	ldr	r3, [pc, #528]	; (c798 <print_object+0x380>)
    c586:	4798      	blx	r3
    c588:	0003      	movs	r3, r0
    c58a:	643b      	str	r3, [r7, #64]	; 0x40
    c58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c58e:	2b00      	cmp	r3, #0
    c590:	d101      	bne.n	c596 <print_object+0x17e>
    c592:	2300      	movs	r3, #0
    c594:	e20e      	b.n	c9b4 <print_object+0x59c>
				for (j=0;j<depth;j++) *ptr++='\t';
    c596:	2300      	movs	r3, #0
    c598:	637b      	str	r3, [r7, #52]	; 0x34
    c59a:	e007      	b.n	c5ac <print_object+0x194>
    c59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c59e:	1c5a      	adds	r2, r3, #1
    c5a0:	643a      	str	r2, [r7, #64]	; 0x40
    c5a2:	2209      	movs	r2, #9
    c5a4:	701a      	strb	r2, [r3, #0]
    c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c5a8:	3301      	adds	r3, #1
    c5aa:	637b      	str	r3, [r7, #52]	; 0x34
    c5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c5ae:	68bb      	ldr	r3, [r7, #8]
    c5b0:	429a      	cmp	r2, r3
    c5b2:	dbf3      	blt.n	c59c <print_object+0x184>
				p->offset+=depth;
    c5b4:	683b      	ldr	r3, [r7, #0]
    c5b6:	689a      	ldr	r2, [r3, #8]
    c5b8:	68bb      	ldr	r3, [r7, #8]
    c5ba:	18d2      	adds	r2, r2, r3
    c5bc:	683b      	ldr	r3, [r7, #0]
    c5be:	609a      	str	r2, [r3, #8]
			}
			print_string_ptr(child->string,p);
    c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5c2:	6a1b      	ldr	r3, [r3, #32]
    c5c4:	683a      	ldr	r2, [r7, #0]
    c5c6:	0011      	movs	r1, r2
    c5c8:	0018      	movs	r0, r3
    c5ca:	4b75      	ldr	r3, [pc, #468]	; (c7a0 <print_object+0x388>)
    c5cc:	4798      	blx	r3
			p->offset=update(p);
    c5ce:	683b      	ldr	r3, [r7, #0]
    c5d0:	0018      	movs	r0, r3
    c5d2:	4b74      	ldr	r3, [pc, #464]	; (c7a4 <print_object+0x38c>)
    c5d4:	4798      	blx	r3
    c5d6:	0002      	movs	r2, r0
    c5d8:	683b      	ldr	r3, [r7, #0]
    c5da:	609a      	str	r2, [r3, #8]
			
			len=fmt?2:1;
    c5dc:	687b      	ldr	r3, [r7, #4]
    c5de:	2b00      	cmp	r3, #0
    c5e0:	d001      	beq.n	c5e6 <print_object+0x1ce>
    c5e2:	2302      	movs	r3, #2
    c5e4:	e000      	b.n	c5e8 <print_object+0x1d0>
    c5e6:	2301      	movs	r3, #1
    c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len);	if (!ptr) return 0;
    c5ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c5ec:	683b      	ldr	r3, [r7, #0]
    c5ee:	0011      	movs	r1, r2
    c5f0:	0018      	movs	r0, r3
    c5f2:	4b69      	ldr	r3, [pc, #420]	; (c798 <print_object+0x380>)
    c5f4:	4798      	blx	r3
    c5f6:	0003      	movs	r3, r0
    c5f8:	643b      	str	r3, [r7, #64]	; 0x40
    c5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d101      	bne.n	c604 <print_object+0x1ec>
    c600:	2300      	movs	r3, #0
    c602:	e1d7      	b.n	c9b4 <print_object+0x59c>
			*ptr++=':';if (fmt) *ptr++='\t';
    c604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c606:	1c5a      	adds	r2, r3, #1
    c608:	643a      	str	r2, [r7, #64]	; 0x40
    c60a:	223a      	movs	r2, #58	; 0x3a
    c60c:	701a      	strb	r2, [r3, #0]
    c60e:	687b      	ldr	r3, [r7, #4]
    c610:	2b00      	cmp	r3, #0
    c612:	d004      	beq.n	c61e <print_object+0x206>
    c614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c616:	1c5a      	adds	r2, r3, #1
    c618:	643a      	str	r2, [r7, #64]	; 0x40
    c61a:	2209      	movs	r2, #9
    c61c:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
    c61e:	683b      	ldr	r3, [r7, #0]
    c620:	689a      	ldr	r2, [r3, #8]
    c622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c624:	18d2      	adds	r2, r2, r3
    c626:	683b      	ldr	r3, [r7, #0]
    c628:	609a      	str	r2, [r3, #8]
			
			print_value(child,depth,fmt,p);
    c62a:	683b      	ldr	r3, [r7, #0]
    c62c:	687a      	ldr	r2, [r7, #4]
    c62e:	68b9      	ldr	r1, [r7, #8]
    c630:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c632:	4c5d      	ldr	r4, [pc, #372]	; (c7a8 <print_object+0x390>)
    c634:	47a0      	blx	r4
			p->offset=update(p);
    c636:	683b      	ldr	r3, [r7, #0]
    c638:	0018      	movs	r0, r3
    c63a:	4b5a      	ldr	r3, [pc, #360]	; (c7a4 <print_object+0x38c>)
    c63c:	4798      	blx	r3
    c63e:	0002      	movs	r2, r0
    c640:	683b      	ldr	r3, [r7, #0]
    c642:	609a      	str	r2, [r3, #8]

			len=(fmt?1:0)+(child->next?1:0);
    c644:	687b      	ldr	r3, [r7, #4]
    c646:	1e5a      	subs	r2, r3, #1
    c648:	4193      	sbcs	r3, r2
    c64a:	b2db      	uxtb	r3, r3
    c64c:	001a      	movs	r2, r3
    c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c650:	681b      	ldr	r3, [r3, #0]
    c652:	1e59      	subs	r1, r3, #1
    c654:	418b      	sbcs	r3, r1
    c656:	b2db      	uxtb	r3, r3
    c658:	18d3      	adds	r3, r2, r3
    c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len+1); if (!ptr) return 0;
    c65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c65e:	1c5a      	adds	r2, r3, #1
    c660:	683b      	ldr	r3, [r7, #0]
    c662:	0011      	movs	r1, r2
    c664:	0018      	movs	r0, r3
    c666:	4b4c      	ldr	r3, [pc, #304]	; (c798 <print_object+0x380>)
    c668:	4798      	blx	r3
    c66a:	0003      	movs	r3, r0
    c66c:	643b      	str	r3, [r7, #64]	; 0x40
    c66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c670:	2b00      	cmp	r3, #0
    c672:	d101      	bne.n	c678 <print_object+0x260>
    c674:	2300      	movs	r3, #0
    c676:	e19d      	b.n	c9b4 <print_object+0x59c>
			if (child->next) *ptr++=',';
    c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	2b00      	cmp	r3, #0
    c67e:	d004      	beq.n	c68a <print_object+0x272>
    c680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c682:	1c5a      	adds	r2, r3, #1
    c684:	643a      	str	r2, [r7, #64]	; 0x40
    c686:	222c      	movs	r2, #44	; 0x2c
    c688:	701a      	strb	r2, [r3, #0]
			if (fmt) *ptr++='\n';*ptr=0;
    c68a:	687b      	ldr	r3, [r7, #4]
    c68c:	2b00      	cmp	r3, #0
    c68e:	d004      	beq.n	c69a <print_object+0x282>
    c690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c692:	1c5a      	adds	r2, r3, #1
    c694:	643a      	str	r2, [r7, #64]	; 0x40
    c696:	220a      	movs	r2, #10
    c698:	701a      	strb	r2, [r3, #0]
    c69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c69c:	2200      	movs	r2, #0
    c69e:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
    c6a0:	683b      	ldr	r3, [r7, #0]
    c6a2:	689a      	ldr	r2, [r3, #8]
    c6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6a6:	18d2      	adds	r2, r2, r3
    c6a8:	683b      	ldr	r3, [r7, #0]
    c6aa:	609a      	str	r2, [r3, #8]
			child=child->next;
    c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c6ae:	681b      	ldr	r3, [r3, #0]
    c6b0:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
    c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d000      	beq.n	c6ba <print_object+0x2a2>
    c6b8:	e75d      	b.n	c576 <print_object+0x15e>
		}
		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
    c6ba:	687b      	ldr	r3, [r7, #4]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d002      	beq.n	c6c6 <print_object+0x2ae>
    c6c0:	68bb      	ldr	r3, [r7, #8]
    c6c2:	3301      	adds	r3, #1
    c6c4:	e000      	b.n	c6c8 <print_object+0x2b0>
    c6c6:	2302      	movs	r3, #2
    c6c8:	683a      	ldr	r2, [r7, #0]
    c6ca:	0019      	movs	r1, r3
    c6cc:	0010      	movs	r0, r2
    c6ce:	4b32      	ldr	r3, [pc, #200]	; (c798 <print_object+0x380>)
    c6d0:	4798      	blx	r3
    c6d2:	0003      	movs	r3, r0
    c6d4:	643b      	str	r3, [r7, #64]	; 0x40
    c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d101      	bne.n	c6e0 <print_object+0x2c8>
    c6dc:	2300      	movs	r3, #0
    c6de:	e169      	b.n	c9b4 <print_object+0x59c>
		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
    c6e0:	687b      	ldr	r3, [r7, #4]
    c6e2:	2b00      	cmp	r3, #0
    c6e4:	d00f      	beq.n	c706 <print_object+0x2ee>
    c6e6:	2300      	movs	r3, #0
    c6e8:	63bb      	str	r3, [r7, #56]	; 0x38
    c6ea:	e007      	b.n	c6fc <print_object+0x2e4>
    c6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c6ee:	1c5a      	adds	r2, r3, #1
    c6f0:	643a      	str	r2, [r7, #64]	; 0x40
    c6f2:	2209      	movs	r2, #9
    c6f4:	701a      	strb	r2, [r3, #0]
    c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6f8:	3301      	adds	r3, #1
    c6fa:	63bb      	str	r3, [r7, #56]	; 0x38
    c6fc:	68bb      	ldr	r3, [r7, #8]
    c6fe:	1e5a      	subs	r2, r3, #1
    c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c702:	429a      	cmp	r2, r3
    c704:	dcf2      	bgt.n	c6ec <print_object+0x2d4>
		*ptr++='}';*ptr=0;
    c706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c708:	1c5a      	adds	r2, r3, #1
    c70a:	643a      	str	r2, [r7, #64]	; 0x40
    c70c:	227d      	movs	r2, #125	; 0x7d
    c70e:	701a      	strb	r2, [r3, #0]
    c710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c712:	2200      	movs	r2, #0
    c714:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
    c716:	683b      	ldr	r3, [r7, #0]
    c718:	681a      	ldr	r2, [r3, #0]
    c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c71c:	18d3      	adds	r3, r2, r3
    c71e:	647b      	str	r3, [r7, #68]	; 0x44
    c720:	e147      	b.n	c9b2 <print_object+0x59a>
	}
	else
	{
		/* Allocate space for the names and the objects */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
    c722:	4b1e      	ldr	r3, [pc, #120]	; (c79c <print_object+0x384>)
    c724:	681b      	ldr	r3, [r3, #0]
    c726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c728:	0092      	lsls	r2, r2, #2
    c72a:	0010      	movs	r0, r2
    c72c:	4798      	blx	r3
    c72e:	0003      	movs	r3, r0
    c730:	627b      	str	r3, [r7, #36]	; 0x24
		if (!entries) return 0;
    c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c734:	2b00      	cmp	r3, #0
    c736:	d101      	bne.n	c73c <print_object+0x324>
    c738:	2300      	movs	r3, #0
    c73a:	e13b      	b.n	c9b4 <print_object+0x59c>
		names=(char**)cJSON_malloc(numentries*sizeof(char*));
    c73c:	4b17      	ldr	r3, [pc, #92]	; (c79c <print_object+0x384>)
    c73e:	681b      	ldr	r3, [r3, #0]
    c740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c742:	0092      	lsls	r2, r2, #2
    c744:	0010      	movs	r0, r2
    c746:	4798      	blx	r3
    c748:	0003      	movs	r3, r0
    c74a:	623b      	str	r3, [r7, #32]
		if (!names) {cJSON_free(entries);return 0;}
    c74c:	6a3b      	ldr	r3, [r7, #32]
    c74e:	2b00      	cmp	r3, #0
    c750:	d106      	bne.n	c760 <print_object+0x348>
    c752:	4b16      	ldr	r3, [pc, #88]	; (c7ac <print_object+0x394>)
    c754:	681b      	ldr	r3, [r3, #0]
    c756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c758:	0010      	movs	r0, r2
    c75a:	4798      	blx	r3
    c75c:	2300      	movs	r3, #0
    c75e:	e129      	b.n	c9b4 <print_object+0x59c>
		memset(entries,0,sizeof(char*)*numentries);
    c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c762:	009a      	lsls	r2, r3, #2
    c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c766:	2100      	movs	r1, #0
    c768:	0018      	movs	r0, r3
    c76a:	4b11      	ldr	r3, [pc, #68]	; (c7b0 <print_object+0x398>)
    c76c:	4798      	blx	r3
		memset(names,0,sizeof(char*)*numentries);
    c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c770:	009a      	lsls	r2, r3, #2
    c772:	6a3b      	ldr	r3, [r7, #32]
    c774:	2100      	movs	r1, #0
    c776:	0018      	movs	r0, r3
    c778:	4b0d      	ldr	r3, [pc, #52]	; (c7b0 <print_object+0x398>)
    c77a:	4798      	blx	r3

		/* Collect all the results into our arrays: */
		child=item->child;depth++;if (fmt) len+=depth;
    c77c:	68fb      	ldr	r3, [r7, #12]
    c77e:	689b      	ldr	r3, [r3, #8]
    c780:	633b      	str	r3, [r7, #48]	; 0x30
    c782:	68bb      	ldr	r3, [r7, #8]
    c784:	3301      	adds	r3, #1
    c786:	60bb      	str	r3, [r7, #8]
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	2b00      	cmp	r3, #0
    c78c:	d053      	beq.n	c836 <print_object+0x41e>
    c78e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c790:	68bb      	ldr	r3, [r7, #8]
    c792:	18d3      	adds	r3, r2, r3
    c794:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (child)
    c796:	e04e      	b.n	c836 <print_object+0x41e>
    c798:	0000b8ad 	.word	0x0000b8ad
    c79c:	20000008 	.word	0x20000008
    c7a0:	0000bbfd 	.word	0x0000bbfd
    c7a4:	0000b979 	.word	0x0000b979
    c7a8:	0000bf01 	.word	0x0000bf01
    c7ac:	2000000c 	.word	0x2000000c
    c7b0:	0001baed 	.word	0x0001baed
		{
			names[i]=str=print_string_ptr(child->string,0);
    c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c7b6:	009b      	lsls	r3, r3, #2
    c7b8:	6a3a      	ldr	r2, [r7, #32]
    c7ba:	18d4      	adds	r4, r2, r3
    c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c7be:	6a1b      	ldr	r3, [r3, #32]
    c7c0:	2100      	movs	r1, #0
    c7c2:	0018      	movs	r0, r3
    c7c4:	4b7d      	ldr	r3, [pc, #500]	; (c9bc <print_object+0x5a4>)
    c7c6:	4798      	blx	r3
    c7c8:	0003      	movs	r3, r0
    c7ca:	61bb      	str	r3, [r7, #24]
    c7cc:	69bb      	ldr	r3, [r7, #24]
    c7ce:	6023      	str	r3, [r4, #0]
			entries[i++]=ret=print_value(child,depth,fmt,0);
    c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c7d2:	1c5a      	adds	r2, r3, #1
    c7d4:	63ba      	str	r2, [r7, #56]	; 0x38
    c7d6:	009b      	lsls	r3, r3, #2
    c7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c7da:	18d4      	adds	r4, r2, r3
    c7dc:	687a      	ldr	r2, [r7, #4]
    c7de:	68b9      	ldr	r1, [r7, #8]
    c7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c7e2:	2300      	movs	r3, #0
    c7e4:	4d76      	ldr	r5, [pc, #472]	; (c9c0 <print_object+0x5a8>)
    c7e6:	47a8      	blx	r5
    c7e8:	0003      	movs	r3, r0
    c7ea:	617b      	str	r3, [r7, #20]
    c7ec:	697b      	ldr	r3, [r7, #20]
    c7ee:	6023      	str	r3, [r4, #0]
			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
    c7f0:	69bb      	ldr	r3, [r7, #24]
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d01a      	beq.n	c82c <print_object+0x414>
    c7f6:	697b      	ldr	r3, [r7, #20]
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d017      	beq.n	c82c <print_object+0x414>
    c7fc:	697b      	ldr	r3, [r7, #20]
    c7fe:	0018      	movs	r0, r3
    c800:	4b70      	ldr	r3, [pc, #448]	; (c9c4 <print_object+0x5ac>)
    c802:	4798      	blx	r3
    c804:	0004      	movs	r4, r0
    c806:	69bb      	ldr	r3, [r7, #24]
    c808:	0018      	movs	r0, r3
    c80a:	4b6e      	ldr	r3, [pc, #440]	; (c9c4 <print_object+0x5ac>)
    c80c:	4798      	blx	r3
    c80e:	0003      	movs	r3, r0
    c810:	18e3      	adds	r3, r4, r3
    c812:	687a      	ldr	r2, [r7, #4]
    c814:	2a00      	cmp	r2, #0
    c816:	d002      	beq.n	c81e <print_object+0x406>
    c818:	68ba      	ldr	r2, [r7, #8]
    c81a:	3202      	adds	r2, #2
    c81c:	e000      	b.n	c820 <print_object+0x408>
    c81e:	2200      	movs	r2, #0
    c820:	189a      	adds	r2, r3, r2
    c822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c824:	18d3      	adds	r3, r2, r3
    c826:	3302      	adds	r3, #2
    c828:	63fb      	str	r3, [r7, #60]	; 0x3c
    c82a:	e001      	b.n	c830 <print_object+0x418>
    c82c:	2301      	movs	r3, #1
    c82e:	62bb      	str	r3, [r7, #40]	; 0x28
			child=child->next;
    c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c832:	681b      	ldr	r3, [r3, #0]
    c834:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
    c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c838:	2b00      	cmp	r3, #0
    c83a:	d1bb      	bne.n	c7b4 <print_object+0x39c>
		}
		
		/* Try to allocate the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
    c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c83e:	2b00      	cmp	r3, #0
    c840:	d106      	bne.n	c850 <print_object+0x438>
    c842:	4b61      	ldr	r3, [pc, #388]	; (c9c8 <print_object+0x5b0>)
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c848:	0010      	movs	r0, r2
    c84a:	4798      	blx	r3
    c84c:	0003      	movs	r3, r0
    c84e:	647b      	str	r3, [r7, #68]	; 0x44
		if (!out) fail=1;
    c850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c852:	2b00      	cmp	r3, #0
    c854:	d101      	bne.n	c85a <print_object+0x442>
    c856:	2301      	movs	r3, #1
    c858:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Handle failure */
		if (fail)
    c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c85c:	2b00      	cmp	r3, #0
    c85e:	d035      	beq.n	c8cc <print_object+0x4b4>
		{
			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
    c860:	2300      	movs	r3, #0
    c862:	63bb      	str	r3, [r7, #56]	; 0x38
    c864:	e022      	b.n	c8ac <print_object+0x494>
    c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c868:	009b      	lsls	r3, r3, #2
    c86a:	6a3a      	ldr	r2, [r7, #32]
    c86c:	18d3      	adds	r3, r2, r3
    c86e:	681b      	ldr	r3, [r3, #0]
    c870:	2b00      	cmp	r3, #0
    c872:	d008      	beq.n	c886 <print_object+0x46e>
    c874:	4b55      	ldr	r3, [pc, #340]	; (c9cc <print_object+0x5b4>)
    c876:	681a      	ldr	r2, [r3, #0]
    c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c87a:	009b      	lsls	r3, r3, #2
    c87c:	6a39      	ldr	r1, [r7, #32]
    c87e:	18cb      	adds	r3, r1, r3
    c880:	681b      	ldr	r3, [r3, #0]
    c882:	0018      	movs	r0, r3
    c884:	4790      	blx	r2
    c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c888:	009b      	lsls	r3, r3, #2
    c88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c88c:	18d3      	adds	r3, r2, r3
    c88e:	681b      	ldr	r3, [r3, #0]
    c890:	2b00      	cmp	r3, #0
    c892:	d008      	beq.n	c8a6 <print_object+0x48e>
    c894:	4b4d      	ldr	r3, [pc, #308]	; (c9cc <print_object+0x5b4>)
    c896:	681a      	ldr	r2, [r3, #0]
    c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c89a:	009b      	lsls	r3, r3, #2
    c89c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c89e:	18cb      	adds	r3, r1, r3
    c8a0:	681b      	ldr	r3, [r3, #0]
    c8a2:	0018      	movs	r0, r3
    c8a4:	4790      	blx	r2
    c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c8a8:	3301      	adds	r3, #1
    c8aa:	63bb      	str	r3, [r7, #56]	; 0x38
    c8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8b0:	429a      	cmp	r2, r3
    c8b2:	dbd8      	blt.n	c866 <print_object+0x44e>
			cJSON_free(names);cJSON_free(entries);
    c8b4:	4b45      	ldr	r3, [pc, #276]	; (c9cc <print_object+0x5b4>)
    c8b6:	681b      	ldr	r3, [r3, #0]
    c8b8:	6a3a      	ldr	r2, [r7, #32]
    c8ba:	0010      	movs	r0, r2
    c8bc:	4798      	blx	r3
    c8be:	4b43      	ldr	r3, [pc, #268]	; (c9cc <print_object+0x5b4>)
    c8c0:	681b      	ldr	r3, [r3, #0]
    c8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c8c4:	0010      	movs	r0, r2
    c8c6:	4798      	blx	r3
			return 0;
    c8c8:	2300      	movs	r3, #0
    c8ca:	e073      	b.n	c9b4 <print_object+0x59c>
		}
		
		/* Compose the output: */
		*out='{';ptr=out+1;//if (fmt)*ptr++='\n';*ptr=0;
    c8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c8ce:	227b      	movs	r2, #123	; 0x7b
    c8d0:	701a      	strb	r2, [r3, #0]
    c8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c8d4:	3301      	adds	r3, #1
    c8d6:	643b      	str	r3, [r7, #64]	; 0x40
		for (i=0;i<numentries;i++)
    c8d8:	2300      	movs	r3, #0
    c8da:	63bb      	str	r3, [r7, #56]	; 0x38
    c8dc:	e051      	b.n	c982 <print_object+0x56a>
		{
		//	if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
    c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c8e0:	009b      	lsls	r3, r3, #2
    c8e2:	6a3a      	ldr	r2, [r7, #32]
    c8e4:	18d3      	adds	r3, r2, r3
    c8e6:	681b      	ldr	r3, [r3, #0]
    c8e8:	0018      	movs	r0, r3
    c8ea:	4b36      	ldr	r3, [pc, #216]	; (c9c4 <print_object+0x5ac>)
    c8ec:	4798      	blx	r3
    c8ee:	0003      	movs	r3, r0
    c8f0:	61fb      	str	r3, [r7, #28]
    c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c8f4:	009b      	lsls	r3, r3, #2
    c8f6:	6a3a      	ldr	r2, [r7, #32]
    c8f8:	18d3      	adds	r3, r2, r3
    c8fa:	6819      	ldr	r1, [r3, #0]
    c8fc:	69fa      	ldr	r2, [r7, #28]
    c8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c900:	0018      	movs	r0, r3
    c902:	4b33      	ldr	r3, [pc, #204]	; (c9d0 <print_object+0x5b8>)
    c904:	4798      	blx	r3
    c906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c908:	69fb      	ldr	r3, [r7, #28]
    c90a:	18d3      	adds	r3, r2, r3
    c90c:	643b      	str	r3, [r7, #64]	; 0x40
			*ptr++=':';//if (fmt) *ptr++='\t';
    c90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c910:	1c5a      	adds	r2, r3, #1
    c912:	643a      	str	r2, [r7, #64]	; 0x40
    c914:	223a      	movs	r2, #58	; 0x3a
    c916:	701a      	strb	r2, [r3, #0]
			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
    c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c91a:	009b      	lsls	r3, r3, #2
    c91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c91e:	18d3      	adds	r3, r2, r3
    c920:	681a      	ldr	r2, [r3, #0]
    c922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c924:	0011      	movs	r1, r2
    c926:	0018      	movs	r0, r3
    c928:	4b2a      	ldr	r3, [pc, #168]	; (c9d4 <print_object+0x5bc>)
    c92a:	4798      	blx	r3
    c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c92e:	009b      	lsls	r3, r3, #2
    c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c932:	18d3      	adds	r3, r2, r3
    c934:	681b      	ldr	r3, [r3, #0]
    c936:	0018      	movs	r0, r3
    c938:	4b22      	ldr	r3, [pc, #136]	; (c9c4 <print_object+0x5ac>)
    c93a:	4798      	blx	r3
    c93c:	0002      	movs	r2, r0
    c93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c940:	189b      	adds	r3, r3, r2
    c942:	643b      	str	r3, [r7, #64]	; 0x40
			if (i!=numentries-1) *ptr++=',';
    c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c946:	1e5a      	subs	r2, r3, #1
    c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c94a:	429a      	cmp	r2, r3
    c94c:	d004      	beq.n	c958 <print_object+0x540>
    c94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c950:	1c5a      	adds	r2, r3, #1
    c952:	643a      	str	r2, [r7, #64]	; 0x40
    c954:	222c      	movs	r2, #44	; 0x2c
    c956:	701a      	strb	r2, [r3, #0]
			//if (fmt) *ptr++='\n';*ptr=0;
			cJSON_free(names[i]);cJSON_free(entries[i]);
    c958:	4b1c      	ldr	r3, [pc, #112]	; (c9cc <print_object+0x5b4>)
    c95a:	681a      	ldr	r2, [r3, #0]
    c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c95e:	009b      	lsls	r3, r3, #2
    c960:	6a39      	ldr	r1, [r7, #32]
    c962:	18cb      	adds	r3, r1, r3
    c964:	681b      	ldr	r3, [r3, #0]
    c966:	0018      	movs	r0, r3
    c968:	4790      	blx	r2
    c96a:	4b18      	ldr	r3, [pc, #96]	; (c9cc <print_object+0x5b4>)
    c96c:	681a      	ldr	r2, [r3, #0]
    c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c970:	009b      	lsls	r3, r3, #2
    c972:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c974:	18cb      	adds	r3, r1, r3
    c976:	681b      	ldr	r3, [r3, #0]
    c978:	0018      	movs	r0, r3
    c97a:	4790      	blx	r2
		for (i=0;i<numentries;i++)
    c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c97e:	3301      	adds	r3, #1
    c980:	63bb      	str	r3, [r7, #56]	; 0x38
    c982:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c986:	429a      	cmp	r2, r3
    c988:	dba9      	blt.n	c8de <print_object+0x4c6>
		}
		
		cJSON_free(names);cJSON_free(entries);
    c98a:	4b10      	ldr	r3, [pc, #64]	; (c9cc <print_object+0x5b4>)
    c98c:	681b      	ldr	r3, [r3, #0]
    c98e:	6a3a      	ldr	r2, [r7, #32]
    c990:	0010      	movs	r0, r2
    c992:	4798      	blx	r3
    c994:	4b0d      	ldr	r3, [pc, #52]	; (c9cc <print_object+0x5b4>)
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c99a:	0010      	movs	r0, r2
    c99c:	4798      	blx	r3
		//if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
		*ptr++='}';*ptr++=0;
    c99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9a0:	1c5a      	adds	r2, r3, #1
    c9a2:	643a      	str	r2, [r7, #64]	; 0x40
    c9a4:	227d      	movs	r2, #125	; 0x7d
    c9a6:	701a      	strb	r2, [r3, #0]
    c9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9aa:	1c5a      	adds	r2, r3, #1
    c9ac:	643a      	str	r2, [r7, #64]	; 0x40
    c9ae:	2200      	movs	r2, #0
    c9b0:	701a      	strb	r2, [r3, #0]
	}
	return out;	
    c9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    c9b4:	0018      	movs	r0, r3
    c9b6:	46bd      	mov	sp, r7
    c9b8:	b012      	add	sp, #72	; 0x48
    c9ba:	bdb0      	pop	{r4, r5, r7, pc}
    c9bc:	0000bbfd 	.word	0x0000bbfd
    c9c0:	0000bf01 	.word	0x0000bf01
    c9c4:	0001c02f 	.word	0x0001c02f
    c9c8:	20000008 	.word	0x20000008
    c9cc:	2000000c 	.word	0x2000000c
    c9d0:	0001bab7 	.word	0x0001bab7
    c9d4:	0001c01f 	.word	0x0001c01f

0000c9d8 <suffix_object>:
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
    c9d8:	b580      	push	{r7, lr}
    c9da:	b082      	sub	sp, #8
    c9dc:	af00      	add	r7, sp, #0
    c9de:	6078      	str	r0, [r7, #4]
    c9e0:	6039      	str	r1, [r7, #0]
    c9e2:	687b      	ldr	r3, [r7, #4]
    c9e4:	683a      	ldr	r2, [r7, #0]
    c9e6:	601a      	str	r2, [r3, #0]
    c9e8:	683b      	ldr	r3, [r7, #0]
    c9ea:	687a      	ldr	r2, [r7, #4]
    c9ec:	605a      	str	r2, [r3, #4]
    c9ee:	46c0      	nop			; (mov r8, r8)
    c9f0:	46bd      	mov	sp, r7
    c9f2:	b002      	add	sp, #8
    c9f4:	bd80      	pop	{r7, pc}
	...

0000c9f8 <cJSON_AddItemToArray>:
/* Utility for handling references. */
static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
    c9f8:	b580      	push	{r7, lr}
    c9fa:	b084      	sub	sp, #16
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
    ca00:	6039      	str	r1, [r7, #0]
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	689b      	ldr	r3, [r3, #8]
    ca06:	60fb      	str	r3, [r7, #12]
    ca08:	683b      	ldr	r3, [r7, #0]
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d017      	beq.n	ca3e <cJSON_AddItemToArray+0x46>
    ca0e:	68fb      	ldr	r3, [r7, #12]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d106      	bne.n	ca22 <cJSON_AddItemToArray+0x2a>
    ca14:	687b      	ldr	r3, [r7, #4]
    ca16:	683a      	ldr	r2, [r7, #0]
    ca18:	609a      	str	r2, [r3, #8]
    ca1a:	e011      	b.n	ca40 <cJSON_AddItemToArray+0x48>
    ca1c:	68fb      	ldr	r3, [r7, #12]
    ca1e:	681b      	ldr	r3, [r3, #0]
    ca20:	60fb      	str	r3, [r7, #12]
    ca22:	68fb      	ldr	r3, [r7, #12]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d003      	beq.n	ca30 <cJSON_AddItemToArray+0x38>
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	681b      	ldr	r3, [r3, #0]
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d1f5      	bne.n	ca1c <cJSON_AddItemToArray+0x24>
    ca30:	683a      	ldr	r2, [r7, #0]
    ca32:	68fb      	ldr	r3, [r7, #12]
    ca34:	0011      	movs	r1, r2
    ca36:	0018      	movs	r0, r3
    ca38:	4b03      	ldr	r3, [pc, #12]	; (ca48 <cJSON_AddItemToArray+0x50>)
    ca3a:	4798      	blx	r3
    ca3c:	e000      	b.n	ca40 <cJSON_AddItemToArray+0x48>
    ca3e:	46c0      	nop			; (mov r8, r8)
    ca40:	46bd      	mov	sp, r7
    ca42:	b004      	add	sp, #16
    ca44:	bd80      	pop	{r7, pc}
    ca46:	46c0      	nop			; (mov r8, r8)
    ca48:	0000c9d9 	.word	0x0000c9d9

0000ca4c <cJSON_AddItemToObject>:
void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
    ca4c:	b580      	push	{r7, lr}
    ca4e:	b084      	sub	sp, #16
    ca50:	af00      	add	r7, sp, #0
    ca52:	60f8      	str	r0, [r7, #12]
    ca54:	60b9      	str	r1, [r7, #8]
    ca56:	607a      	str	r2, [r7, #4]
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d017      	beq.n	ca8e <cJSON_AddItemToObject+0x42>
    ca5e:	687b      	ldr	r3, [r7, #4]
    ca60:	6a1b      	ldr	r3, [r3, #32]
    ca62:	2b00      	cmp	r3, #0
    ca64:	d005      	beq.n	ca72 <cJSON_AddItemToObject+0x26>
    ca66:	4b0c      	ldr	r3, [pc, #48]	; (ca98 <cJSON_AddItemToObject+0x4c>)
    ca68:	681a      	ldr	r2, [r3, #0]
    ca6a:	687b      	ldr	r3, [r7, #4]
    ca6c:	6a1b      	ldr	r3, [r3, #32]
    ca6e:	0018      	movs	r0, r3
    ca70:	4790      	blx	r2
    ca72:	68bb      	ldr	r3, [r7, #8]
    ca74:	0018      	movs	r0, r3
    ca76:	4b09      	ldr	r3, [pc, #36]	; (ca9c <cJSON_AddItemToObject+0x50>)
    ca78:	4798      	blx	r3
    ca7a:	0002      	movs	r2, r0
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	621a      	str	r2, [r3, #32]
    ca80:	687a      	ldr	r2, [r7, #4]
    ca82:	68fb      	ldr	r3, [r7, #12]
    ca84:	0011      	movs	r1, r2
    ca86:	0018      	movs	r0, r3
    ca88:	4b05      	ldr	r3, [pc, #20]	; (caa0 <cJSON_AddItemToObject+0x54>)
    ca8a:	4798      	blx	r3
    ca8c:	e000      	b.n	ca90 <cJSON_AddItemToObject+0x44>
    ca8e:	46c0      	nop			; (mov r8, r8)
    ca90:	46bd      	mov	sp, r7
    ca92:	b004      	add	sp, #16
    ca94:	bd80      	pop	{r7, pc}
    ca96:	46c0      	nop			; (mov r8, r8)
    ca98:	2000000c 	.word	0x2000000c
    ca9c:	0000b749 	.word	0x0000b749
    caa0:	0000c9f9 	.word	0x0000c9f9

0000caa4 <cJSON_CreateNumber>:
/* Create basic types: */
cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
    caa4:	b590      	push	{r4, r7, lr}
    caa6:	b085      	sub	sp, #20
    caa8:	af00      	add	r7, sp, #0
    caaa:	6038      	str	r0, [r7, #0]
    caac:	6079      	str	r1, [r7, #4]
    caae:	4b0d      	ldr	r3, [pc, #52]	; (cae4 <cJSON_CreateNumber+0x40>)
    cab0:	4798      	blx	r3
    cab2:	0003      	movs	r3, r0
    cab4:	60fb      	str	r3, [r7, #12]
    cab6:	68fb      	ldr	r3, [r7, #12]
    cab8:	2b00      	cmp	r3, #0
    caba:	d00e      	beq.n	cada <cJSON_CreateNumber+0x36>
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	2203      	movs	r2, #3
    cac0:	60da      	str	r2, [r3, #12]
    cac2:	68fa      	ldr	r2, [r7, #12]
    cac4:	683b      	ldr	r3, [r7, #0]
    cac6:	687c      	ldr	r4, [r7, #4]
    cac8:	6193      	str	r3, [r2, #24]
    caca:	61d4      	str	r4, [r2, #28]
    cacc:	4b06      	ldr	r3, [pc, #24]	; (cae8 <cJSON_CreateNumber+0x44>)
    cace:	6838      	ldr	r0, [r7, #0]
    cad0:	6879      	ldr	r1, [r7, #4]
    cad2:	4798      	blx	r3
    cad4:	0002      	movs	r2, r0
    cad6:	68fb      	ldr	r3, [r7, #12]
    cad8:	615a      	str	r2, [r3, #20]
    cada:	68fb      	ldr	r3, [r7, #12]
    cadc:	0018      	movs	r0, r3
    cade:	46bd      	mov	sp, r7
    cae0:	b005      	add	sp, #20
    cae2:	bd90      	pop	{r4, r7, pc}
    cae4:	0000b799 	.word	0x0000b799
    cae8:	0001b859 	.word	0x0001b859

0000caec <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
    caec:	b580      	push	{r7, lr}
    caee:	b084      	sub	sp, #16
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
    caf4:	4b0a      	ldr	r3, [pc, #40]	; (cb20 <cJSON_CreateString+0x34>)
    caf6:	4798      	blx	r3
    caf8:	0003      	movs	r3, r0
    cafa:	60fb      	str	r3, [r7, #12]
    cafc:	68fb      	ldr	r3, [r7, #12]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d009      	beq.n	cb16 <cJSON_CreateString+0x2a>
    cb02:	68fb      	ldr	r3, [r7, #12]
    cb04:	2204      	movs	r2, #4
    cb06:	60da      	str	r2, [r3, #12]
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	0018      	movs	r0, r3
    cb0c:	4b05      	ldr	r3, [pc, #20]	; (cb24 <cJSON_CreateString+0x38>)
    cb0e:	4798      	blx	r3
    cb10:	0002      	movs	r2, r0
    cb12:	68fb      	ldr	r3, [r7, #12]
    cb14:	611a      	str	r2, [r3, #16]
    cb16:	68fb      	ldr	r3, [r7, #12]
    cb18:	0018      	movs	r0, r3
    cb1a:	46bd      	mov	sp, r7
    cb1c:	b004      	add	sp, #16
    cb1e:	bd80      	pop	{r7, pc}
    cb20:	0000b799 	.word	0x0000b799
    cb24:	0000b749 	.word	0x0000b749

0000cb28 <cJSON_CreateArray>:
cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
    cb28:	b580      	push	{r7, lr}
    cb2a:	b082      	sub	sp, #8
    cb2c:	af00      	add	r7, sp, #0
    cb2e:	4b07      	ldr	r3, [pc, #28]	; (cb4c <cJSON_CreateArray+0x24>)
    cb30:	4798      	blx	r3
    cb32:	0003      	movs	r3, r0
    cb34:	607b      	str	r3, [r7, #4]
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d002      	beq.n	cb42 <cJSON_CreateArray+0x1a>
    cb3c:	687b      	ldr	r3, [r7, #4]
    cb3e:	2205      	movs	r2, #5
    cb40:	60da      	str	r2, [r3, #12]
    cb42:	687b      	ldr	r3, [r7, #4]
    cb44:	0018      	movs	r0, r3
    cb46:	46bd      	mov	sp, r7
    cb48:	b002      	add	sp, #8
    cb4a:	bd80      	pop	{r7, pc}
    cb4c:	0000b799 	.word	0x0000b799

0000cb50 <cJSON_CreateObject>:
cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
    cb50:	b580      	push	{r7, lr}
    cb52:	b082      	sub	sp, #8
    cb54:	af00      	add	r7, sp, #0
    cb56:	4b07      	ldr	r3, [pc, #28]	; (cb74 <cJSON_CreateObject+0x24>)
    cb58:	4798      	blx	r3
    cb5a:	0003      	movs	r3, r0
    cb5c:	607b      	str	r3, [r7, #4]
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d002      	beq.n	cb6a <cJSON_CreateObject+0x1a>
    cb64:	687b      	ldr	r3, [r7, #4]
    cb66:	2206      	movs	r2, #6
    cb68:	60da      	str	r2, [r3, #12]
    cb6a:	687b      	ldr	r3, [r7, #4]
    cb6c:	0018      	movs	r0, r3
    cb6e:	46bd      	mov	sp, r7
    cb70:	b002      	add	sp, #8
    cb72:	bd80      	pop	{r7, pc}
    cb74:	0000b799 	.word	0x0000b799

0000cb78 <system_pinmux_get_group_from_gpio_pin>:
{
    cb78:	b580      	push	{r7, lr}
    cb7a:	b084      	sub	sp, #16
    cb7c:	af00      	add	r7, sp, #0
    cb7e:	0002      	movs	r2, r0
    cb80:	1dfb      	adds	r3, r7, #7
    cb82:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cb84:	230f      	movs	r3, #15
    cb86:	18fb      	adds	r3, r7, r3
    cb88:	1dfa      	adds	r2, r7, #7
    cb8a:	7812      	ldrb	r2, [r2, #0]
    cb8c:	09d2      	lsrs	r2, r2, #7
    cb8e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cb90:	230e      	movs	r3, #14
    cb92:	18fb      	adds	r3, r7, r3
    cb94:	1dfa      	adds	r2, r7, #7
    cb96:	7812      	ldrb	r2, [r2, #0]
    cb98:	0952      	lsrs	r2, r2, #5
    cb9a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cb9c:	4b0d      	ldr	r3, [pc, #52]	; (cbd4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cb9e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    cba0:	230f      	movs	r3, #15
    cba2:	18fb      	adds	r3, r7, r3
    cba4:	781b      	ldrb	r3, [r3, #0]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d10f      	bne.n	cbca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cbaa:	230f      	movs	r3, #15
    cbac:	18fb      	adds	r3, r7, r3
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	009b      	lsls	r3, r3, #2
    cbb2:	2210      	movs	r2, #16
    cbb4:	4694      	mov	ip, r2
    cbb6:	44bc      	add	ip, r7
    cbb8:	4463      	add	r3, ip
    cbba:	3b08      	subs	r3, #8
    cbbc:	681a      	ldr	r2, [r3, #0]
    cbbe:	230e      	movs	r3, #14
    cbc0:	18fb      	adds	r3, r7, r3
    cbc2:	781b      	ldrb	r3, [r3, #0]
    cbc4:	01db      	lsls	r3, r3, #7
    cbc6:	18d3      	adds	r3, r2, r3
    cbc8:	e000      	b.n	cbcc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    cbca:	2300      	movs	r3, #0
}
    cbcc:	0018      	movs	r0, r3
    cbce:	46bd      	mov	sp, r7
    cbd0:	b004      	add	sp, #16
    cbd2:	bd80      	pop	{r7, pc}
    cbd4:	40002800 	.word	0x40002800

0000cbd8 <port_get_group_from_gpio_pin>:
{
    cbd8:	b580      	push	{r7, lr}
    cbda:	b082      	sub	sp, #8
    cbdc:	af00      	add	r7, sp, #0
    cbde:	0002      	movs	r2, r0
    cbe0:	1dfb      	adds	r3, r7, #7
    cbe2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cbe4:	1dfb      	adds	r3, r7, #7
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	0018      	movs	r0, r3
    cbea:	4b03      	ldr	r3, [pc, #12]	; (cbf8 <port_get_group_from_gpio_pin+0x20>)
    cbec:	4798      	blx	r3
    cbee:	0003      	movs	r3, r0
}
    cbf0:	0018      	movs	r0, r3
    cbf2:	46bd      	mov	sp, r7
    cbf4:	b002      	add	sp, #8
    cbf6:	bd80      	pop	{r7, pc}
    cbf8:	0000cb79 	.word	0x0000cb79

0000cbfc <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    cbfc:	b580      	push	{r7, lr}
    cbfe:	b084      	sub	sp, #16
    cc00:	af00      	add	r7, sp, #0
    cc02:	0002      	movs	r2, r0
    cc04:	1dfb      	adds	r3, r7, #7
    cc06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    cc08:	1dfb      	adds	r3, r7, #7
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	0018      	movs	r0, r3
    cc0e:	4b09      	ldr	r3, [pc, #36]	; (cc34 <port_pin_toggle_output_level+0x38>)
    cc10:	4798      	blx	r3
    cc12:	0003      	movs	r3, r0
    cc14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cc16:	1dfb      	adds	r3, r7, #7
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	221f      	movs	r2, #31
    cc1c:	4013      	ands	r3, r2
    cc1e:	2201      	movs	r2, #1
    cc20:	409a      	lsls	r2, r3
    cc22:	0013      	movs	r3, r2
    cc24:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    cc26:	68fb      	ldr	r3, [r7, #12]
    cc28:	68ba      	ldr	r2, [r7, #8]
    cc2a:	61da      	str	r2, [r3, #28]
}
    cc2c:	46c0      	nop			; (mov r8, r8)
    cc2e:	46bd      	mov	sp, r7
    cc30:	b004      	add	sp, #16
    cc32:	bd80      	pop	{r7, pc}
    cc34:	0000cbd9 	.word	0x0000cbd9

0000cc38 <disconnectCallbackHandler>:


static void (*mqtt_subscribe_cb)(int topic_len, char* topic_name, int payload_len, char* payload);


static void disconnectCallbackHandler(void) {
    cc38:	b590      	push	{r4, r7, lr}
    cc3a:	b083      	sub	sp, #12
    cc3c:	af00      	add	r7, sp, #0
	printf("MQTT Disconnect");
    cc3e:	4b17      	ldr	r3, [pc, #92]	; (cc9c <disconnectCallbackHandler+0x64>)
    cc40:	0018      	movs	r0, r3
    cc42:	4b17      	ldr	r3, [pc, #92]	; (cca0 <disconnectCallbackHandler+0x68>)
    cc44:	4798      	blx	r3
	IoT_Error_t rc = NONE_ERROR;
    cc46:	1dfb      	adds	r3, r7, #7
    cc48:	2200      	movs	r2, #0
    cc4a:	701a      	strb	r2, [r3, #0]
	if(aws_iot_is_autoreconnect_enabled()){
    cc4c:	4b15      	ldr	r3, [pc, #84]	; (cca4 <disconnectCallbackHandler+0x6c>)
    cc4e:	4798      	blx	r3
    cc50:	1e03      	subs	r3, r0, #0
    cc52:	d004      	beq.n	cc5e <disconnectCallbackHandler+0x26>
		printf("Auto Reconnect is enabled, Reconnecting attempt will start now");
    cc54:	4b14      	ldr	r3, [pc, #80]	; (cca8 <disconnectCallbackHandler+0x70>)
    cc56:	0018      	movs	r0, r3
    cc58:	4b11      	ldr	r3, [pc, #68]	; (cca0 <disconnectCallbackHandler+0x68>)
    cc5a:	4798      	blx	r3
			printf("Manual Reconnect Successful");
			}else{
			printf("Manual Reconnect Failed - %d", rc);
		}
	}
}
    cc5c:	e01a      	b.n	cc94 <disconnectCallbackHandler+0x5c>
		printf("Auto Reconnect not enabled. Starting manual reconnect...");
    cc5e:	4b13      	ldr	r3, [pc, #76]	; (ccac <disconnectCallbackHandler+0x74>)
    cc60:	0018      	movs	r0, r3
    cc62:	4b0f      	ldr	r3, [pc, #60]	; (cca0 <disconnectCallbackHandler+0x68>)
    cc64:	4798      	blx	r3
		rc = aws_iot_mqtt_attempt_reconnect();
    cc66:	1dfc      	adds	r4, r7, #7
    cc68:	4b11      	ldr	r3, [pc, #68]	; (ccb0 <disconnectCallbackHandler+0x78>)
    cc6a:	4798      	blx	r3
    cc6c:	0003      	movs	r3, r0
    cc6e:	7023      	strb	r3, [r4, #0]
		if(RECONNECT_SUCCESSFUL == rc){
    cc70:	1dfb      	adds	r3, r7, #7
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	b25b      	sxtb	r3, r3
    cc76:	2b01      	cmp	r3, #1
    cc78:	d104      	bne.n	cc84 <disconnectCallbackHandler+0x4c>
			printf("Manual Reconnect Successful");
    cc7a:	4b0e      	ldr	r3, [pc, #56]	; (ccb4 <disconnectCallbackHandler+0x7c>)
    cc7c:	0018      	movs	r0, r3
    cc7e:	4b08      	ldr	r3, [pc, #32]	; (cca0 <disconnectCallbackHandler+0x68>)
    cc80:	4798      	blx	r3
}
    cc82:	e007      	b.n	cc94 <disconnectCallbackHandler+0x5c>
			printf("Manual Reconnect Failed - %d", rc);
    cc84:	1dfb      	adds	r3, r7, #7
    cc86:	2200      	movs	r2, #0
    cc88:	569a      	ldrsb	r2, [r3, r2]
    cc8a:	4b0b      	ldr	r3, [pc, #44]	; (ccb8 <disconnectCallbackHandler+0x80>)
    cc8c:	0011      	movs	r1, r2
    cc8e:	0018      	movs	r0, r3
    cc90:	4b03      	ldr	r3, [pc, #12]	; (cca0 <disconnectCallbackHandler+0x68>)
    cc92:	4798      	blx	r3
}
    cc94:	46c0      	nop			; (mov r8, r8)
    cc96:	46bd      	mov	sp, r7
    cc98:	b003      	add	sp, #12
    cc9a:	bd90      	pop	{r4, r7, pc}
    cc9c:	0001e4e0 	.word	0x0001e4e0
    cca0:	0001bc4d 	.word	0x0001bc4d
    cca4:	000072a1 	.word	0x000072a1
    cca8:	0001e4f0 	.word	0x0001e4f0
    ccac:	0001e530 	.word	0x0001e530
    ccb0:	000071c9 	.word	0x000071c9
    ccb4:	0001e56c 	.word	0x0001e56c
    ccb8:	0001e588 	.word	0x0001e588

0000ccbc <jsonMessagePublish>:
	return 0;
}


static void jsonMessagePublish(char* channel, cJSON *message)
{
    ccbc:	b590      	push	{r4, r7, lr}
    ccbe:	b085      	sub	sp, #20
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	6078      	str	r0, [r7, #4]
    ccc4:	6039      	str	r1, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    ccc6:	230f      	movs	r3, #15
    ccc8:	18fb      	adds	r3, r7, r3
    ccca:	2200      	movs	r2, #0
    cccc:	701a      	strb	r2, [r3, #0]
	char* out;
	out = cJSON_Print(message);
    ccce:	683b      	ldr	r3, [r7, #0]
    ccd0:	0018      	movs	r0, r3
    ccd2:	4b23      	ldr	r3, [pc, #140]	; (cd60 <jsonMessagePublish+0xa4>)
    ccd4:	4798      	blx	r3
    ccd6:	0003      	movs	r3, r0
    ccd8:	60bb      	str	r3, [r7, #8]
	Msg.qos = QOS_0;
    ccda:	4b22      	ldr	r3, [pc, #136]	; (cd64 <jsonMessagePublish+0xa8>)
    ccdc:	2200      	movs	r2, #0
    ccde:	701a      	strb	r2, [r3, #0]
	Msg.PayloadLen = strlen(out) + 1;
    cce0:	68bb      	ldr	r3, [r7, #8]
    cce2:	0018      	movs	r0, r3
    cce4:	4b20      	ldr	r3, [pc, #128]	; (cd68 <jsonMessagePublish+0xac>)
    cce6:	4798      	blx	r3
    cce8:	0003      	movs	r3, r0
    ccea:	1c5a      	adds	r2, r3, #1
    ccec:	4b1d      	ldr	r3, [pc, #116]	; (cd64 <jsonMessagePublish+0xa8>)
    ccee:	60da      	str	r2, [r3, #12]
	Msg.pPayload = (void *)out ;
    ccf0:	4b1c      	ldr	r3, [pc, #112]	; (cd64 <jsonMessagePublish+0xa8>)
    ccf2:	68ba      	ldr	r2, [r7, #8]
    ccf4:	609a      	str	r2, [r3, #8]
	Params.pTopic = (char*)channel;
    ccf6:	4b1d      	ldr	r3, [pc, #116]	; (cd6c <jsonMessagePublish+0xb0>)
    ccf8:	687a      	ldr	r2, [r7, #4]
    ccfa:	601a      	str	r2, [r3, #0]
	Params.MessageParams = Msg;
    ccfc:	4b1b      	ldr	r3, [pc, #108]	; (cd6c <jsonMessagePublish+0xb0>)
    ccfe:	4a19      	ldr	r2, [pc, #100]	; (cd64 <jsonMessagePublish+0xa8>)
    cd00:	3304      	adds	r3, #4
    cd02:	ca13      	ldmia	r2!, {r0, r1, r4}
    cd04:	c313      	stmia	r3!, {r0, r1, r4}
    cd06:	6812      	ldr	r2, [r2, #0]
    cd08:	601a      	str	r2, [r3, #0]
	rc = aws_iot_mqtt_publish(&Params);
    cd0a:	230f      	movs	r3, #15
    cd0c:	18fc      	adds	r4, r7, r3
    cd0e:	4b17      	ldr	r3, [pc, #92]	; (cd6c <jsonMessagePublish+0xb0>)
    cd10:	0018      	movs	r0, r3
    cd12:	4b17      	ldr	r3, [pc, #92]	; (cd70 <jsonMessagePublish+0xb4>)
    cd14:	4798      	blx	r3
    cd16:	0003      	movs	r3, r0
    cd18:	7023      	strb	r3, [r4, #0]
	if (rc != NONE_ERROR)
    cd1a:	230f      	movs	r3, #15
    cd1c:	18fb      	adds	r3, r7, r3
    cd1e:	781b      	ldrb	r3, [r3, #0]
    cd20:	b25b      	sxtb	r3, r3
    cd22:	2b00      	cmp	r3, #0
    cd24:	d00f      	beq.n	cd46 <jsonMessagePublish+0x8a>
	{
			printf("aws_iot_mqtt_publish() error, rc = %d\n", rc);
    cd26:	230f      	movs	r3, #15
    cd28:	18fb      	adds	r3, r7, r3
    cd2a:	2200      	movs	r2, #0
    cd2c:	569a      	ldrsb	r2, [r3, r2]
    cd2e:	4b11      	ldr	r3, [pc, #68]	; (cd74 <jsonMessagePublish+0xb8>)
    cd30:	0011      	movs	r1, r2
    cd32:	0018      	movs	r0, r3
    cd34:	4b10      	ldr	r3, [pc, #64]	; (cd78 <jsonMessagePublish+0xbc>)
    cd36:	4798      	blx	r3
			while(1)
			{
				LED_Toggle(LED0);
    cd38:	2013      	movs	r0, #19
    cd3a:	4b10      	ldr	r3, [pc, #64]	; (cd7c <jsonMessagePublish+0xc0>)
    cd3c:	4798      	blx	r3
				delay_ms(100);
    cd3e:	2064      	movs	r0, #100	; 0x64
    cd40:	4b0f      	ldr	r3, [pc, #60]	; (cd80 <jsonMessagePublish+0xc4>)
    cd42:	4798      	blx	r3
				LED_Toggle(LED0);
    cd44:	e7f8      	b.n	cd38 <jsonMessagePublish+0x7c>
			}
	}
	else
	{
		printf("aws_iot_mqtt  publish success!!!\r\n");
    cd46:	4b0f      	ldr	r3, [pc, #60]	; (cd84 <jsonMessagePublish+0xc8>)
    cd48:	0018      	movs	r0, r3
    cd4a:	4b0f      	ldr	r3, [pc, #60]	; (cd88 <jsonMessagePublish+0xcc>)
    cd4c:	4798      	blx	r3
	}

	free(out);
    cd4e:	68bb      	ldr	r3, [r7, #8]
    cd50:	0018      	movs	r0, r3
    cd52:	4b0e      	ldr	r3, [pc, #56]	; (cd8c <jsonMessagePublish+0xd0>)
    cd54:	4798      	blx	r3
	
}
    cd56:	46c0      	nop			; (mov r8, r8)
    cd58:	46bd      	mov	sp, r7
    cd5a:	b005      	add	sp, #20
    cd5c:	bd90      	pop	{r4, r7, pc}
    cd5e:	46c0      	nop			; (mov r8, r8)
    cd60:	0000bedd 	.word	0x0000bedd
    cd64:	20001ae8 	.word	0x20001ae8
    cd68:	0001c02f 	.word	0x0001c02f
    cd6c:	20001ad4 	.word	0x20001ad4
    cd70:	00007051 	.word	0x00007051
    cd74:	0001e5cc 	.word	0x0001e5cc
    cd78:	0001bc4d 	.word	0x0001bc4d
    cd7c:	0000cbfd 	.word	0x0000cbfd
    cd80:	000126fd 	.word	0x000126fd
    cd84:	0001e5f4 	.word	0x0001e5f4
    cd88:	0001bd69 	.word	0x0001bd69
    cd8c:	0001ba85 	.word	0x0001ba85

0000cd90 <cloud_connect>:

Cloud_RC cloud_connect()
{
    cd90:	b590      	push	{r4, r7, lr}
    cd92:	b083      	sub	sp, #12
    cd94:	af00      	add	r7, sp, #0
	IoT_Error_t rc = NONE_ERROR;
    cd96:	1dfb      	adds	r3, r7, #7
    cd98:	2200      	movs	r2, #0
    cd9a:	701a      	strb	r2, [r3, #0]
	
	gethostbyname((uint8_t *)HostAddress);
    cd9c:	4b49      	ldr	r3, [pc, #292]	; (cec4 <cloud_connect+0x134>)
    cd9e:	0018      	movs	r0, r3
    cda0:	4b49      	ldr	r3, [pc, #292]	; (cec8 <cloud_connect+0x138>)
    cda2:	4798      	blx	r3
	
	connectParams = MQTTConnectParamsDefault;
    cda4:	4a49      	ldr	r2, [pc, #292]	; (cecc <cloud_connect+0x13c>)
    cda6:	4b4a      	ldr	r3, [pc, #296]	; (ced0 <cloud_connect+0x140>)
    cda8:	0010      	movs	r0, r2
    cdaa:	0019      	movs	r1, r3
    cdac:	2348      	movs	r3, #72	; 0x48
    cdae:	001a      	movs	r2, r3
    cdb0:	4b48      	ldr	r3, [pc, #288]	; (ced4 <cloud_connect+0x144>)
    cdb2:	4798      	blx	r3
	subParams = MQTTSubscribeParamsDefault;
    cdb4:	4b48      	ldr	r3, [pc, #288]	; (ced8 <cloud_connect+0x148>)
    cdb6:	4a49      	ldr	r2, [pc, #292]	; (cedc <cloud_connect+0x14c>)
    cdb8:	ca13      	ldmia	r2!, {r0, r1, r4}
    cdba:	c313      	stmia	r3!, {r0, r1, r4}
	Msg = MQTTMessageParamsDefault;
    cdbc:	4b48      	ldr	r3, [pc, #288]	; (cee0 <cloud_connect+0x150>)
    cdbe:	4a49      	ldr	r2, [pc, #292]	; (cee4 <cloud_connect+0x154>)
    cdc0:	ca13      	ldmia	r2!, {r0, r1, r4}
    cdc2:	c313      	stmia	r3!, {r0, r1, r4}
    cdc4:	6812      	ldr	r2, [r2, #0]
    cdc6:	601a      	str	r2, [r3, #0]
	Params = MQTTPublishParamsDefault;
    cdc8:	4b47      	ldr	r3, [pc, #284]	; (cee8 <cloud_connect+0x158>)
    cdca:	4a48      	ldr	r2, [pc, #288]	; (ceec <cloud_connect+0x15c>)
    cdcc:	ca13      	ldmia	r2!, {r0, r1, r4}
    cdce:	c313      	stmia	r3!, {r0, r1, r4}
    cdd0:	ca03      	ldmia	r2!, {r0, r1}
    cdd2:	c303      	stmia	r3!, {r0, r1}
			
	connectParams.KeepAliveInterval_sec = 10;
    cdd4:	4b3d      	ldr	r3, [pc, #244]	; (cecc <cloud_connect+0x13c>)
    cdd6:	220a      	movs	r2, #10
    cdd8:	84da      	strh	r2, [r3, #38]	; 0x26
	connectParams.isCleansession = true;
    cdda:	4b3c      	ldr	r3, [pc, #240]	; (cecc <cloud_connect+0x13c>)
    cddc:	2228      	movs	r2, #40	; 0x28
    cdde:	2101      	movs	r1, #1
    cde0:	5499      	strb	r1, [r3, r2]
	connectParams.MQTTVersion = MQTT_3_1_1;
    cde2:	4b3a      	ldr	r3, [pc, #232]	; (cecc <cloud_connect+0x13c>)
    cde4:	2224      	movs	r2, #36	; 0x24
    cde6:	2104      	movs	r1, #4
    cde8:	5499      	strb	r1, [r3, r2]
	connectParams.pClientID = gAwsMqttClientId;
    cdea:	4b38      	ldr	r3, [pc, #224]	; (cecc <cloud_connect+0x13c>)
    cdec:	4a40      	ldr	r2, [pc, #256]	; (cef0 <cloud_connect+0x160>)
    cdee:	619a      	str	r2, [r3, #24]
	connectParams.pHostURL = HostAddress;
    cdf0:	4b36      	ldr	r3, [pc, #216]	; (cecc <cloud_connect+0x13c>)
    cdf2:	4a34      	ldr	r2, [pc, #208]	; (cec4 <cloud_connect+0x134>)
    cdf4:	605a      	str	r2, [r3, #4]
	connectParams.port = port;
    cdf6:	4b3f      	ldr	r3, [pc, #252]	; (cef4 <cloud_connect+0x164>)
    cdf8:	681b      	ldr	r3, [r3, #0]
    cdfa:	b29a      	uxth	r2, r3
    cdfc:	4b33      	ldr	r3, [pc, #204]	; (cecc <cloud_connect+0x13c>)
    cdfe:	811a      	strh	r2, [r3, #8]
	connectParams.isWillMsgPresent = false;
    ce00:	4b32      	ldr	r3, [pc, #200]	; (cecc <cloud_connect+0x13c>)
    ce02:	2229      	movs	r2, #41	; 0x29
    ce04:	2100      	movs	r1, #0
    ce06:	5499      	strb	r1, [r3, r2]
	connectParams.pRootCALocation = NULL;
    ce08:	4b30      	ldr	r3, [pc, #192]	; (cecc <cloud_connect+0x13c>)
    ce0a:	2200      	movs	r2, #0
    ce0c:	60da      	str	r2, [r3, #12]
	connectParams.pDeviceCertLocation = NULL;
    ce0e:	4b2f      	ldr	r3, [pc, #188]	; (cecc <cloud_connect+0x13c>)
    ce10:	2200      	movs	r2, #0
    ce12:	611a      	str	r2, [r3, #16]
	connectParams.pDevicePrivateKeyLocation = NULL;
    ce14:	4b2d      	ldr	r3, [pc, #180]	; (cecc <cloud_connect+0x13c>)
    ce16:	2200      	movs	r2, #0
    ce18:	615a      	str	r2, [r3, #20]
	connectParams.mqttCommandTimeout_ms = 5000;
    ce1a:	4b2c      	ldr	r3, [pc, #176]	; (cecc <cloud_connect+0x13c>)
    ce1c:	4a36      	ldr	r2, [pc, #216]	; (cef8 <cloud_connect+0x168>)
    ce1e:	639a      	str	r2, [r3, #56]	; 0x38
	connectParams.tlsHandshakeTimeout_ms = 5000;
    ce20:	4b2a      	ldr	r3, [pc, #168]	; (cecc <cloud_connect+0x13c>)
    ce22:	4a35      	ldr	r2, [pc, #212]	; (cef8 <cloud_connect+0x168>)
    ce24:	63da      	str	r2, [r3, #60]	; 0x3c
	connectParams.isSSLHostnameVerify = true; // ensure this is set to true for production
    ce26:	4b29      	ldr	r3, [pc, #164]	; (cecc <cloud_connect+0x13c>)
    ce28:	2240      	movs	r2, #64	; 0x40
    ce2a:	2101      	movs	r1, #1
    ce2c:	5499      	strb	r1, [r3, r2]
	connectParams.disconnectHandler = disconnectCallbackHandler;	
    ce2e:	4b27      	ldr	r3, [pc, #156]	; (cecc <cloud_connect+0x13c>)
    ce30:	4a32      	ldr	r2, [pc, #200]	; (cefc <cloud_connect+0x16c>)
    ce32:	645a      	str	r2, [r3, #68]	; 0x44
	if(gbConnectedWifi && receivedTime)
    ce34:	4b32      	ldr	r3, [pc, #200]	; (cf00 <cloud_connect+0x170>)
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	d03c      	beq.n	ceb6 <cloud_connect+0x126>
    ce3c:	4b31      	ldr	r3, [pc, #196]	; (cf04 <cloud_connect+0x174>)
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d038      	beq.n	ceb6 <cloud_connect+0x126>
	{
		//sslEnableCertExpirationCheck(0);
		printf("Connecting...");
    ce44:	4b30      	ldr	r3, [pc, #192]	; (cf08 <cloud_connect+0x178>)
    ce46:	0018      	movs	r0, r3
    ce48:	4b30      	ldr	r3, [pc, #192]	; (cf0c <cloud_connect+0x17c>)
    ce4a:	4798      	blx	r3
		rc = aws_iot_mqtt_connect(&connectParams);
    ce4c:	1dfc      	adds	r4, r7, #7
    ce4e:	4b1f      	ldr	r3, [pc, #124]	; (cecc <cloud_connect+0x13c>)
    ce50:	0018      	movs	r0, r3
    ce52:	4b2f      	ldr	r3, [pc, #188]	; (cf10 <cloud_connect+0x180>)
    ce54:	4798      	blx	r3
    ce56:	0003      	movs	r3, r0
    ce58:	7023      	strb	r3, [r4, #0]
		if (NONE_ERROR != rc) {
    ce5a:	1dfb      	adds	r3, r7, #7
    ce5c:	781b      	ldrb	r3, [r3, #0]
    ce5e:	b25b      	sxtb	r3, r3
    ce60:	2b00      	cmp	r3, #0
    ce62:	d00d      	beq.n	ce80 <cloud_connect+0xf0>
			printf("Error(%d) connecting to %s:%d", rc, connectParams.pHostURL, connectParams.port);
    ce64:	1dfb      	adds	r3, r7, #7
    ce66:	2100      	movs	r1, #0
    ce68:	5659      	ldrsb	r1, [r3, r1]
    ce6a:	4b18      	ldr	r3, [pc, #96]	; (cecc <cloud_connect+0x13c>)
    ce6c:	685a      	ldr	r2, [r3, #4]
    ce6e:	4b17      	ldr	r3, [pc, #92]	; (cecc <cloud_connect+0x13c>)
    ce70:	891b      	ldrh	r3, [r3, #8]
    ce72:	4828      	ldr	r0, [pc, #160]	; (cf14 <cloud_connect+0x184>)
    ce74:	4c25      	ldr	r4, [pc, #148]	; (cf0c <cloud_connect+0x17c>)
    ce76:	47a0      	blx	r4
			return rc;
    ce78:	1dfb      	adds	r3, r7, #7
    ce7a:	781b      	ldrb	r3, [r3, #0]
    ce7c:	b25b      	sxtb	r3, r3
    ce7e:	e01d      	b.n	cebc <cloud_connect+0x12c>
		/*
		* Enable Auto Reconnect functionality. Minimum and Maximum time of Exponential backoff are set in aws_iot_config.h
		*  #AWS_IOT_MQTT_MIN_RECONNECT_WAIT_INTERVAL
		*  #AWS_IOT_MQTT_MAX_RECONNECT_WAIT_INTERVAL
		*/
		rc = aws_iot_mqtt_autoreconnect_set_status(true);
    ce80:	1dfc      	adds	r4, r7, #7
    ce82:	2001      	movs	r0, #1
    ce84:	4b24      	ldr	r3, [pc, #144]	; (cf18 <cloud_connect+0x188>)
    ce86:	4798      	blx	r3
    ce88:	0003      	movs	r3, r0
    ce8a:	7023      	strb	r3, [r4, #0]
		if (NONE_ERROR != rc) {
    ce8c:	1dfb      	adds	r3, r7, #7
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	b25b      	sxtb	r3, r3
    ce92:	2b00      	cmp	r3, #0
    ce94:	d00b      	beq.n	ceae <cloud_connect+0x11e>
			printf("Unable to set Auto Reconnect to true - %d", rc);
    ce96:	1dfb      	adds	r3, r7, #7
    ce98:	2200      	movs	r2, #0
    ce9a:	569a      	ldrsb	r2, [r3, r2]
    ce9c:	4b1f      	ldr	r3, [pc, #124]	; (cf1c <cloud_connect+0x18c>)
    ce9e:	0011      	movs	r1, r2
    cea0:	0018      	movs	r0, r3
    cea2:	4b1a      	ldr	r3, [pc, #104]	; (cf0c <cloud_connect+0x17c>)
    cea4:	4798      	blx	r3
			return rc;
    cea6:	1dfb      	adds	r3, r7, #7
    cea8:	781b      	ldrb	r3, [r3, #0]
    ceaa:	b25b      	sxtb	r3, r3
    ceac:	e006      	b.n	cebc <cloud_connect+0x12c>
		}
		
		return rc;
    ceae:	1dfb      	adds	r3, r7, #7
    ceb0:	781b      	ldrb	r3, [r3, #0]
    ceb2:	b25b      	sxtb	r3, r3
    ceb4:	e002      	b.n	cebc <cloud_connect+0x12c>

	}
	return rc;
    ceb6:	1dfb      	adds	r3, r7, #7
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	b25b      	sxtb	r3, r3
}
    cebc:	0018      	movs	r0, r3
    cebe:	46bd      	mov	sp, r7
    cec0:	b003      	add	sp, #12
    cec2:	bd90      	pop	{r4, r7, pc}
    cec4:	20000410 	.word	0x20000410
    cec8:	00005cad 	.word	0x00005cad
    cecc:	20001b94 	.word	0x20001b94
    ced0:	0001e274 	.word	0x0001e274
    ced4:	0001bab7 	.word	0x0001bab7
    ced8:	20001b40 	.word	0x20001b40
    cedc:	0001e2d0 	.word	0x0001e2d0
    cee0:	20001ae8 	.word	0x20001ae8
    cee4:	0001e2dc 	.word	0x0001e2dc
    cee8:	20001ad4 	.word	0x20001ad4
    ceec:	0001e2bc 	.word	0x0001e2bc
    cef0:	200005c0 	.word	0x200005c0
    cef4:	20000510 	.word	0x20000510
    cef8:	00001388 	.word	0x00001388
    cefc:	0000cc39 	.word	0x0000cc39
    cf00:	20001851 	.word	0x20001851
    cf04:	20001852 	.word	0x20001852
    cf08:	0001e618 	.word	0x0001e618
    cf0c:	0001bc4d 	.word	0x0001bc4d
    cf10:	00006e29 	.word	0x00006e29
    cf14:	0001e628 	.word	0x0001e628
    cf18:	00007259 	.word	0x00007259
    cf1c:	0001e648 	.word	0x0001e648

0000cf20 <cloud_mqtt_yield>:

Cloud_RC cloud_mqtt_yield(int timeout)
{
    cf20:	b590      	push	{r4, r7, lr}
    cf22:	b085      	sub	sp, #20
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
	IoT_Error_t rc = NONE_ERROR;
    cf28:	230f      	movs	r3, #15
    cf2a:	18fb      	adds	r3, r7, r3
    cf2c:	2200      	movs	r2, #0
    cf2e:	701a      	strb	r2, [r3, #0]
	rc = aws_iot_mqtt_yield(timeout);
    cf30:	230f      	movs	r3, #15
    cf32:	18fc      	adds	r4, r7, r3
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	0018      	movs	r0, r3
    cf38:	4b05      	ldr	r3, [pc, #20]	; (cf50 <cloud_mqtt_yield+0x30>)
    cf3a:	4798      	blx	r3
    cf3c:	0003      	movs	r3, r0
    cf3e:	7023      	strb	r3, [r4, #0]
	return rc;
    cf40:	230f      	movs	r3, #15
    cf42:	18fb      	adds	r3, r7, r3
    cf44:	781b      	ldrb	r3, [r3, #0]
    cf46:	b25b      	sxtb	r3, r3
}
    cf48:	0018      	movs	r0, r3
    cf4a:	46bd      	mov	sp, r7
    cf4c:	b005      	add	sp, #20
    cf4e:	bd90      	pop	{r4, r7, pc}
    cf50:	000070d5 	.word	0x000070d5

0000cf54 <cloud_mqtt_publish>:

Cloud_RC cloud_mqtt_publish(char* channel, void* message)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b084      	sub	sp, #16
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
    cf5c:	6039      	str	r1, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    cf5e:	230f      	movs	r3, #15
    cf60:	18fb      	adds	r3, r7, r3
    cf62:	2200      	movs	r2, #0
    cf64:	701a      	strb	r2, [r3, #0]
	jsonMessagePublish(channel, message);
    cf66:	683a      	ldr	r2, [r7, #0]
    cf68:	687b      	ldr	r3, [r7, #4]
    cf6a:	0011      	movs	r1, r2
    cf6c:	0018      	movs	r0, r3
    cf6e:	4b05      	ldr	r3, [pc, #20]	; (cf84 <cloud_mqtt_publish+0x30>)
    cf70:	4798      	blx	r3
	
	return rc;
    cf72:	230f      	movs	r3, #15
    cf74:	18fb      	adds	r3, r7, r3
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	b25b      	sxtb	r3, r3
	
}
    cf7a:	0018      	movs	r0, r3
    cf7c:	46bd      	mov	sp, r7
    cf7e:	b004      	add	sp, #16
    cf80:	bd80      	pop	{r7, pc}
    cf82:	46c0      	nop			; (mov r8, r8)
    cf84:	0000ccbd 	.word	0x0000ccbd

0000cf88 <cloud_create_topic>:
	return rc;
	
}

Cloud_RC cloud_create_topic(char* full_path, char* device_type, char* device_id, char* topic_name)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b086      	sub	sp, #24
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	60f8      	str	r0, [r7, #12]
    cf90:	60b9      	str	r1, [r7, #8]
    cf92:	607a      	str	r2, [r7, #4]
    cf94:	603b      	str	r3, [r7, #0]
	IoT_Error_t rc = NONE_ERROR;
    cf96:	2317      	movs	r3, #23
    cf98:	18fb      	adds	r3, r7, r3
    cf9a:	2200      	movs	r2, #0
    cf9c:	701a      	strb	r2, [r3, #0]
	sprintf(full_path, "/Microchip/WSN_Demo/MiWi\0");
    cf9e:	68fa      	ldr	r2, [r7, #12]
    cfa0:	4b07      	ldr	r3, [pc, #28]	; (cfc0 <cloud_create_topic+0x38>)
    cfa2:	0010      	movs	r0, r2
    cfa4:	0019      	movs	r1, r3
    cfa6:	2319      	movs	r3, #25
    cfa8:	001a      	movs	r2, r3
    cfaa:	4b06      	ldr	r3, [pc, #24]	; (cfc4 <cloud_create_topic+0x3c>)
    cfac:	4798      	blx	r3
	
	return rc;
    cfae:	2317      	movs	r3, #23
    cfb0:	18fb      	adds	r3, r7, r3
    cfb2:	781b      	ldrb	r3, [r3, #0]
    cfb4:	b25b      	sxtb	r3, r3
	
}
    cfb6:	0018      	movs	r0, r3
    cfb8:	46bd      	mov	sp, r7
    cfba:	b006      	add	sp, #24
    cfbc:	bd80      	pop	{r7, pc}
    cfbe:	46c0      	nop			; (mov r8, r8)
    cfc0:	0001e6b4 	.word	0x0001e6b4
    cfc4:	0001bab7 	.word	0x0001bab7

0000cfc8 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    cfc8:	b590      	push	{r4, r7, lr}
    cfca:	b085      	sub	sp, #20
    cfcc:	af00      	add	r7, sp, #0
    cfce:	0002      	movs	r2, r0
    cfd0:	1dfb      	adds	r3, r7, #7
    cfd2:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    cfd4:	230b      	movs	r3, #11
    cfd6:	18fb      	adds	r3, r7, r3
    cfd8:	2200      	movs	r2, #0
    cfda:	701a      	strb	r2, [r3, #0]
    ATCACommand cacmd = (ATCACommand)malloc(sizeof(struct atca_command));
    cfdc:	2008      	movs	r0, #8
    cfde:	4b11      	ldr	r3, [pc, #68]	; (d024 <newATCACommand+0x5c>)
    cfe0:	4798      	blx	r3
    cfe2:	0003      	movs	r3, r0
    cfe4:	60fb      	str	r3, [r7, #12]

    cacmd->dt = device_type;
    cfe6:	68fb      	ldr	r3, [r7, #12]
    cfe8:	1dfa      	adds	r2, r7, #7
    cfea:	7812      	ldrb	r2, [r2, #0]
    cfec:	701a      	strb	r2, [r3, #0]
    status = atInitExecTimes(cacmd, device_type);  // setup typical execution times for this device type
    cfee:	230b      	movs	r3, #11
    cff0:	18fc      	adds	r4, r7, r3
    cff2:	1dfb      	adds	r3, r7, #7
    cff4:	781a      	ldrb	r2, [r3, #0]
    cff6:	68fb      	ldr	r3, [r7, #12]
    cff8:	0011      	movs	r1, r2
    cffa:	0018      	movs	r0, r3
    cffc:	4b0a      	ldr	r3, [pc, #40]	; (d028 <newATCACommand+0x60>)
    cffe:	4798      	blx	r3
    d000:	0003      	movs	r3, r0
    d002:	7023      	strb	r3, [r4, #0]

    if (status != ATCA_SUCCESS)
    d004:	230b      	movs	r3, #11
    d006:	18fb      	adds	r3, r7, r3
    d008:	781b      	ldrb	r3, [r3, #0]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d005      	beq.n	d01a <newATCACommand+0x52>
    {
        free(cacmd);
    d00e:	68fb      	ldr	r3, [r7, #12]
    d010:	0018      	movs	r0, r3
    d012:	4b06      	ldr	r3, [pc, #24]	; (d02c <newATCACommand+0x64>)
    d014:	4798      	blx	r3
        cacmd = NULL;
    d016:	2300      	movs	r3, #0
    d018:	60fb      	str	r3, [r7, #12]
    }

    return cacmd;
    d01a:	68fb      	ldr	r3, [r7, #12]
}
    d01c:	0018      	movs	r0, r3
    d01e:	46bd      	mov	sp, r7
    d020:	b005      	add	sp, #20
    d022:	bd90      	pop	{r4, r7, pc}
    d024:	0001ba71 	.word	0x0001ba71
    d028:	0000d295 	.word	0x0000d295
    d02c:	0001ba85 	.word	0x0001ba85

0000d030 <atECDH>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atECDH(ATCACommand cacmd, ATCAPacket *packet)
{
    d030:	b580      	push	{r7, lr}
    d032:	b082      	sub	sp, #8
    d034:	af00      	add	r7, sp, #0
    d036:	6078      	str	r0, [r7, #4]
    d038:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_ECDH;
    d03a:	683b      	ldr	r3, [r7, #0]
    d03c:	2243      	movs	r2, #67	; 0x43
    d03e:	709a      	strb	r2, [r3, #2]
    packet->txsize = ECDH_COUNT;
    d040:	683b      	ldr	r3, [r7, #0]
    d042:	2247      	movs	r2, #71	; 0x47
    d044:	705a      	strb	r2, [r3, #1]
    packet->rxsize = ECDH_RSP_SIZE;
    d046:	683b      	ldr	r3, [r7, #0]
    d048:	228a      	movs	r2, #138	; 0x8a
    d04a:	2123      	movs	r1, #35	; 0x23
    d04c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d04e:	683b      	ldr	r3, [r7, #0]
    d050:	0018      	movs	r0, r3
    d052:	4b03      	ldr	r3, [pc, #12]	; (d060 <atECDH+0x30>)
    d054:	4798      	blx	r3
    return ATCA_SUCCESS;
    d056:	2300      	movs	r3, #0
}
    d058:	0018      	movs	r0, r3
    d05a:	46bd      	mov	sp, r7
    d05c:	b002      	add	sp, #8
    d05e:	bd80      	pop	{r7, pc}
    d060:	0000d3d9 	.word	0x0000d3d9

0000d064 <atGenKey>:
 * \param[in] cacmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atGenKey(ATCACommand cacmd, ATCAPacket *packet)
{
    d064:	b580      	push	{r7, lr}
    d066:	b082      	sub	sp, #8
    d068:	af00      	add	r7, sp, #0
    d06a:	6078      	str	r0, [r7, #4]
    d06c:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    d06e:	683b      	ldr	r3, [r7, #0]
    d070:	2240      	movs	r2, #64	; 0x40
    d072:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    d074:	683b      	ldr	r3, [r7, #0]
    d076:	78db      	ldrb	r3, [r3, #3]
    d078:	001a      	movs	r2, r3
    d07a:	2310      	movs	r3, #16
    d07c:	4013      	ands	r3, r2
    d07e:	d007      	beq.n	d090 <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    d080:	683b      	ldr	r3, [r7, #0]
    d082:	220a      	movs	r2, #10
    d084:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    d086:	683b      	ldr	r3, [r7, #0]
    d088:	228a      	movs	r2, #138	; 0x8a
    d08a:	2104      	movs	r1, #4
    d08c:	5299      	strh	r1, [r3, r2]
    d08e:	e006      	b.n	d09e <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    d090:	683b      	ldr	r3, [r7, #0]
    d092:	2207      	movs	r2, #7
    d094:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    d096:	683b      	ldr	r3, [r7, #0]
    d098:	228a      	movs	r2, #138	; 0x8a
    d09a:	214b      	movs	r1, #75	; 0x4b
    d09c:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    d09e:	683b      	ldr	r3, [r7, #0]
    d0a0:	0018      	movs	r0, r3
    d0a2:	4b03      	ldr	r3, [pc, #12]	; (d0b0 <atGenKey+0x4c>)
    d0a4:	4798      	blx	r3
    return ATCA_SUCCESS;
    d0a6:	2300      	movs	r3, #0
}
    d0a8:	0018      	movs	r0, r3
    d0aa:	46bd      	mov	sp, r7
    d0ac:	b002      	add	sp, #8
    d0ae:	bd80      	pop	{r7, pc}
    d0b0:	0000d3d9 	.word	0x0000d3d9

0000d0b4 <atInfo>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atInfo(ATCACommand cacmd, ATCAPacket *packet)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
    d0bc:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    d0be:	683b      	ldr	r3, [r7, #0]
    d0c0:	2230      	movs	r2, #48	; 0x30
    d0c2:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    d0c4:	683b      	ldr	r3, [r7, #0]
    d0c6:	2207      	movs	r2, #7
    d0c8:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    d0ca:	683b      	ldr	r3, [r7, #0]
    d0cc:	228a      	movs	r2, #138	; 0x8a
    d0ce:	2107      	movs	r1, #7
    d0d0:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d0d2:	683b      	ldr	r3, [r7, #0]
    d0d4:	0018      	movs	r0, r3
    d0d6:	4b03      	ldr	r3, [pc, #12]	; (d0e4 <atInfo+0x30>)
    d0d8:	4798      	blx	r3
    return ATCA_SUCCESS;
    d0da:	2300      	movs	r3, #0
}
    d0dc:	0018      	movs	r0, r3
    d0de:	46bd      	mov	sp, r7
    d0e0:	b002      	add	sp, #8
    d0e2:	bd80      	pop	{r7, pc}
    d0e4:	0000d3d9 	.word	0x0000d3d9

0000d0e8 <atNonce>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atNonce(ATCACommand cacmd, ATCAPacket *packet)
{
    d0e8:	b580      	push	{r7, lr}
    d0ea:	b084      	sub	sp, #16
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	6078      	str	r0, [r7, #4]
    d0f0:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    int mode = packet->param1 & 0x03;
    d0f2:	683b      	ldr	r3, [r7, #0]
    d0f4:	78db      	ldrb	r3, [r3, #3]
    d0f6:	001a      	movs	r2, r3
    d0f8:	2303      	movs	r3, #3
    d0fa:	4013      	ands	r3, r2
    d0fc:	60fb      	str	r3, [r7, #12]

    packet->opcode = ATCA_NONCE;
    d0fe:	683b      	ldr	r3, [r7, #0]
    d100:	2216      	movs	r2, #22
    d102:	709a      	strb	r2, [r3, #2]

    if ( (mode == 0 || mode == 1) )         // mode[0:1] == 0 | 1 then NumIn is 20 bytes
    d104:	68fb      	ldr	r3, [r7, #12]
    d106:	2b00      	cmp	r3, #0
    d108:	d002      	beq.n	d110 <atNonce+0x28>
    d10a:	68fb      	ldr	r3, [r7, #12]
    d10c:	2b01      	cmp	r3, #1
    d10e:	d107      	bne.n	d120 <atNonce+0x38>
    {
        packet->txsize = NONCE_COUNT_SHORT; // 20 byte challenge
    d110:	683b      	ldr	r3, [r7, #0]
    d112:	221b      	movs	r2, #27
    d114:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG;
    d116:	683b      	ldr	r3, [r7, #0]
    d118:	228a      	movs	r2, #138	; 0x8a
    d11a:	2123      	movs	r1, #35	; 0x23
    d11c:	5299      	strh	r1, [r3, r2]
    d11e:	e00c      	b.n	d13a <atNonce+0x52>
    }
    else if (mode == 0x03)                  // NumIn is 32 bytes
    d120:	68fb      	ldr	r3, [r7, #12]
    d122:	2b03      	cmp	r3, #3
    d124:	d107      	bne.n	d136 <atNonce+0x4e>
    {
        packet->txsize = NONCE_COUNT_LONG;  // 32 byte challenge
    d126:	683b      	ldr	r3, [r7, #0]
    d128:	2227      	movs	r2, #39	; 0x27
    d12a:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_SHORT;
    d12c:	683b      	ldr	r3, [r7, #0]
    d12e:	228a      	movs	r2, #138	; 0x8a
    d130:	2104      	movs	r1, #4
    d132:	5299      	strh	r1, [r3, r2]
    d134:	e001      	b.n	d13a <atNonce+0x52>
    }
    else
    {
        return ATCA_BAD_PARAM;
    d136:	23e2      	movs	r3, #226	; 0xe2
    d138:	e004      	b.n	d144 <atNonce+0x5c>
    }

    atCalcCrc(packet);
    d13a:	683b      	ldr	r3, [r7, #0]
    d13c:	0018      	movs	r0, r3
    d13e:	4b03      	ldr	r3, [pc, #12]	; (d14c <atNonce+0x64>)
    d140:	4798      	blx	r3
    return ATCA_SUCCESS;
    d142:	2300      	movs	r3, #0
}
    d144:	0018      	movs	r0, r3
    d146:	46bd      	mov	sp, r7
    d148:	b004      	add	sp, #16
    d14a:	bd80      	pop	{r7, pc}
    d14c:	0000d3d9 	.word	0x0000d3d9

0000d150 <atRandom>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRandom(ATCACommand cacmd, ATCAPacket *packet)
{
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
    d156:	6078      	str	r0, [r7, #4]
    d158:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    d15a:	683b      	ldr	r3, [r7, #0]
    d15c:	221b      	movs	r2, #27
    d15e:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    d160:	683b      	ldr	r3, [r7, #0]
    d162:	2207      	movs	r2, #7
    d164:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    d166:	683b      	ldr	r3, [r7, #0]
    d168:	228a      	movs	r2, #138	; 0x8a
    d16a:	2123      	movs	r1, #35	; 0x23
    d16c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d16e:	683b      	ldr	r3, [r7, #0]
    d170:	0018      	movs	r0, r3
    d172:	4b03      	ldr	r3, [pc, #12]	; (d180 <atRandom+0x30>)
    d174:	4798      	blx	r3
    return ATCA_SUCCESS;
    d176:	2300      	movs	r3, #0
}
    d178:	0018      	movs	r0, r3
    d17a:	46bd      	mov	sp, r7
    d17c:	b002      	add	sp, #8
    d17e:	bd80      	pop	{r7, pc}
    d180:	0000d3d9 	.word	0x0000d3d9

0000d184 <atRead>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atRead(ATCACommand cacmd, ATCAPacket *packet)
{
    d184:	b580      	push	{r7, lr}
    d186:	b082      	sub	sp, #8
    d188:	af00      	add	r7, sp, #0
    d18a:	6078      	str	r0, [r7, #4]
    d18c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    d18e:	683b      	ldr	r3, [r7, #0]
    d190:	2202      	movs	r2, #2
    d192:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    d194:	683b      	ldr	r3, [r7, #0]
    d196:	2207      	movs	r2, #7
    d198:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    d19a:	683b      	ldr	r3, [r7, #0]
    d19c:	78db      	ldrb	r3, [r3, #3]
    d19e:	b25b      	sxtb	r3, r3
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	db04      	blt.n	d1ae <atRead+0x2a>
        packet->rxsize = READ_4_RSP_SIZE;
    d1a4:	683b      	ldr	r3, [r7, #0]
    d1a6:	228a      	movs	r2, #138	; 0x8a
    d1a8:	2107      	movs	r1, #7
    d1aa:	5299      	strh	r1, [r3, r2]
    d1ac:	e003      	b.n	d1b6 <atRead+0x32>
    else
        packet->rxsize = READ_32_RSP_SIZE;
    d1ae:	683b      	ldr	r3, [r7, #0]
    d1b0:	228a      	movs	r2, #138	; 0x8a
    d1b2:	2123      	movs	r1, #35	; 0x23
    d1b4:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d1b6:	683b      	ldr	r3, [r7, #0]
    d1b8:	0018      	movs	r0, r3
    d1ba:	4b03      	ldr	r3, [pc, #12]	; (d1c8 <atRead+0x44>)
    d1bc:	4798      	blx	r3
    return ATCA_SUCCESS;
    d1be:	2300      	movs	r3, #0
}
    d1c0:	0018      	movs	r0, r3
    d1c2:	46bd      	mov	sp, r7
    d1c4:	b002      	add	sp, #8
    d1c6:	bd80      	pop	{r7, pc}
    d1c8:	0000d3d9 	.word	0x0000d3d9

0000d1cc <atSign>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atSign(ATCACommand cacmd, ATCAPacket *packet)
{
    d1cc:	b580      	push	{r7, lr}
    d1ce:	b082      	sub	sp, #8
    d1d0:	af00      	add	r7, sp, #0
    d1d2:	6078      	str	r0, [r7, #4]
    d1d4:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    d1d6:	683b      	ldr	r3, [r7, #0]
    d1d8:	2241      	movs	r2, #65	; 0x41
    d1da:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    d1dc:	683b      	ldr	r3, [r7, #0]
    d1de:	2207      	movs	r2, #7
    d1e0:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    d1e2:	683b      	ldr	r3, [r7, #0]
    d1e4:	228a      	movs	r2, #138	; 0x8a
    d1e6:	2143      	movs	r1, #67	; 0x43
    d1e8:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d1ea:	683b      	ldr	r3, [r7, #0]
    d1ec:	0018      	movs	r0, r3
    d1ee:	4b03      	ldr	r3, [pc, #12]	; (d1fc <atSign+0x30>)
    d1f0:	4798      	blx	r3
    return ATCA_SUCCESS;
    d1f2:	2300      	movs	r3, #0
}
    d1f4:	0018      	movs	r0, r3
    d1f6:	46bd      	mov	sp, r7
    d1f8:	b002      	add	sp, #8
    d1fa:	bd80      	pop	{r7, pc}
    d1fc:	0000d3d9 	.word	0x0000d3d9

0000d200 <atVerify>:
 * \param[in] cacmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_STATUS
 */
ATCA_STATUS atVerify(ATCACommand cacmd, ATCAPacket *packet)
{
    d200:	b580      	push	{r7, lr}
    d202:	b082      	sub	sp, #8
    d204:	af00      	add	r7, sp, #0
    d206:	6078      	str	r0, [r7, #4]
    d208:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_VERIFY;
    d20a:	683b      	ldr	r3, [r7, #0]
    d20c:	2245      	movs	r2, #69	; 0x45
    d20e:	709a      	strb	r2, [r3, #2]

    // variable packet size based on mode
    switch (packet->param1)
    d210:	683b      	ldr	r3, [r7, #0]
    d212:	78db      	ldrb	r3, [r3, #3]
    d214:	2b07      	cmp	r3, #7
    d216:	d814      	bhi.n	d242 <atVerify+0x42>
    d218:	009a      	lsls	r2, r3, #2
    d21a:	4b11      	ldr	r3, [pc, #68]	; (d260 <atVerify+0x60>)
    d21c:	18d3      	adds	r3, r2, r3
    d21e:	681b      	ldr	r3, [r3, #0]
    d220:	469f      	mov	pc, r3
    {
    case 0:  // Stored mode
        packet->txsize = VERIFY_256_STORED_COUNT;
    d222:	683b      	ldr	r3, [r7, #0]
    d224:	2247      	movs	r2, #71	; 0x47
    d226:	705a      	strb	r2, [r3, #1]
        break;
    d228:	e00d      	b.n	d246 <atVerify+0x46>
    case 1:  // ValidateExternal mode
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
    d22a:	683b      	ldr	r3, [r7, #0]
    d22c:	2287      	movs	r2, #135	; 0x87
    d22e:	705a      	strb	r2, [r3, #1]
        break;
    d230:	e009      	b.n	d246 <atVerify+0x46>
    case 2:  // External mode
        packet->txsize = VERIFY_256_EXTERNAL_COUNT;
    d232:	683b      	ldr	r3, [r7, #0]
    d234:	2287      	movs	r2, #135	; 0x87
    d236:	705a      	strb	r2, [r3, #1]
        break;
    d238:	e005      	b.n	d246 <atVerify+0x46>
    case 3:     // Validate mode
    case 7:     // Invalidate mode
        packet->txsize = VERIFY_256_VALIDATE_COUNT;
    d23a:	683b      	ldr	r3, [r7, #0]
    d23c:	225a      	movs	r2, #90	; 0x5a
    d23e:	705a      	strb	r2, [r3, #1]
        break;
    d240:	e001      	b.n	d246 <atVerify+0x46>
    default:
        return ATCA_BAD_PARAM;
    d242:	23e2      	movs	r3, #226	; 0xe2
    d244:	e008      	b.n	d258 <atVerify+0x58>
    }
    packet->rxsize = VERIFY_RSP_SIZE;
    d246:	683b      	ldr	r3, [r7, #0]
    d248:	228a      	movs	r2, #138	; 0x8a
    d24a:	2104      	movs	r1, #4
    d24c:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    d24e:	683b      	ldr	r3, [r7, #0]
    d250:	0018      	movs	r0, r3
    d252:	4b04      	ldr	r3, [pc, #16]	; (d264 <atVerify+0x64>)
    d254:	4798      	blx	r3
    return ATCA_SUCCESS;
    d256:	2300      	movs	r3, #0
}
    d258:	0018      	movs	r0, r3
    d25a:	46bd      	mov	sp, r7
    d25c:	b002      	add	sp, #8
    d25e:	bd80      	pop	{r7, pc}
    d260:	0001e6e4 	.word	0x0001e6e4
    d264:	0000d3d9 	.word	0x0000d3d9

0000d268 <deleteATCACommand>:
/** \brief ATCACommand destructor
 * \param[in] cacmd instance of a command object
 */

void deleteATCACommand(ATCACommand *cacmd)    // destructor
{
    d268:	b580      	push	{r7, lr}
    d26a:	b082      	sub	sp, #8
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
    if (*cacmd)
    d270:	687b      	ldr	r3, [r7, #4]
    d272:	681b      	ldr	r3, [r3, #0]
    d274:	2b00      	cmp	r3, #0
    d276:	d004      	beq.n	d282 <deleteATCACommand+0x1a>
        free((void*)*cacmd);
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	681b      	ldr	r3, [r3, #0]
    d27c:	0018      	movs	r0, r3
    d27e:	4b04      	ldr	r3, [pc, #16]	; (d290 <deleteATCACommand+0x28>)
    d280:	4798      	blx	r3

    *cacmd = NULL;
    d282:	687b      	ldr	r3, [r7, #4]
    d284:	2200      	movs	r2, #0
    d286:	601a      	str	r2, [r3, #0]
}
    d288:	46c0      	nop			; (mov r8, r8)
    d28a:	46bd      	mov	sp, r7
    d28c:	b002      	add	sp, #8
    d28e:	bd80      	pop	{r7, pc}
    d290:	0001ba85 	.word	0x0001ba85

0000d294 <atInitExecTimes>:
 * \param[in] device_type - the device type - execution times vary by device type
 * \return ATCA_STATUS
 */

ATCA_STATUS atInitExecTimes(ATCACommand cacmd, ATCADeviceType device_type)
{
    d294:	b580      	push	{r7, lr}
    d296:	b082      	sub	sp, #8
    d298:	af00      	add	r7, sp, #0
    d29a:	6078      	str	r0, [r7, #4]
    d29c:	000a      	movs	r2, r1
    d29e:	1cfb      	adds	r3, r7, #3
    d2a0:	701a      	strb	r2, [r3, #0]
    switch (device_type)
    d2a2:	1cfb      	adds	r3, r7, #3
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d006      	beq.n	d2b8 <atInitExecTimes+0x24>
    d2aa:	db09      	blt.n	d2c0 <atInitExecTimes+0x2c>
    d2ac:	2b02      	cmp	r3, #2
    d2ae:	dc07      	bgt.n	d2c0 <atInitExecTimes+0x2c>
    {
    case ATECC108A:
    case ATECC508A:
        cacmd->execution_times = exectimes_x08a;
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	4a07      	ldr	r2, [pc, #28]	; (d2d0 <atInitExecTimes+0x3c>)
    d2b4:	605a      	str	r2, [r3, #4]
        break;
    d2b6:	e005      	b.n	d2c4 <atInitExecTimes+0x30>
    case ATSHA204A:
        cacmd->execution_times = exectimes_204a;
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	4a06      	ldr	r2, [pc, #24]	; (d2d4 <atInitExecTimes+0x40>)
    d2bc:	605a      	str	r2, [r3, #4]
        break;
    d2be:	e001      	b.n	d2c4 <atInitExecTimes+0x30>
    default:
        return ATCA_BAD_PARAM;
    d2c0:	23e2      	movs	r3, #226	; 0xe2
    d2c2:	e000      	b.n	d2c6 <atInitExecTimes+0x32>
        break;
    }

    return ATCA_SUCCESS;
    d2c4:	2300      	movs	r3, #0
}
    d2c6:	0018      	movs	r0, r3
    d2c8:	46bd      	mov	sp, r7
    d2ca:	b002      	add	sp, #8
    d2cc:	bd80      	pop	{r7, pc}
    d2ce:	46c0      	nop			; (mov r8, r8)
    d2d0:	20000544 	.word	0x20000544
    d2d4:	20000570 	.word	0x20000570

0000d2d8 <atGetExecTime>:
 * \param[in] cmd - the specific command for which to lookup the execution time
 * \return typical execution time in milleseconds for the given command
 */

uint16_t atGetExecTime(ATCACommand cacmd, ATCA_CmdMap cmd)
{
    d2d8:	b580      	push	{r7, lr}
    d2da:	b082      	sub	sp, #8
    d2dc:	af00      	add	r7, sp, #0
    d2de:	6078      	str	r0, [r7, #4]
    d2e0:	000a      	movs	r2, r1
    d2e2:	1cfb      	adds	r3, r7, #3
    d2e4:	701a      	strb	r2, [r3, #0]
    return cacmd->execution_times[cmd];
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	685a      	ldr	r2, [r3, #4]
    d2ea:	1cfb      	adds	r3, r7, #3
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	005b      	lsls	r3, r3, #1
    d2f0:	18d3      	adds	r3, r2, r3
    d2f2:	881b      	ldrh	r3, [r3, #0]
}
    d2f4:	0018      	movs	r0, r3
    d2f6:	46bd      	mov	sp, r7
    d2f8:	b002      	add	sp, #8
    d2fa:	bd80      	pop	{r7, pc}

0000d2fc <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	b088      	sub	sp, #32
    d300:	af00      	add	r7, sp, #0
    d302:	60f8      	str	r0, [r7, #12]
    d304:	60b9      	str	r1, [r7, #8]
    d306:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    d308:	231a      	movs	r3, #26
    d30a:	18fb      	adds	r3, r7, r3
    d30c:	2200      	movs	r2, #0
    d30e:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    d310:	2316      	movs	r3, #22
    d312:	18fb      	adds	r3, r7, r3
    d314:	4a2f      	ldr	r2, [pc, #188]	; (d3d4 <atCRC+0xd8>)
    d316:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    d318:	2300      	movs	r3, #0
    d31a:	61fb      	str	r3, [r7, #28]
    d31c:	e043      	b.n	d3a6 <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    d31e:	2319      	movs	r3, #25
    d320:	18fb      	adds	r3, r7, r3
    d322:	2201      	movs	r2, #1
    d324:	701a      	strb	r2, [r3, #0]
    d326:	e036      	b.n	d396 <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    d328:	68ba      	ldr	r2, [r7, #8]
    d32a:	69fb      	ldr	r3, [r7, #28]
    d32c:	18d3      	adds	r3, r2, r3
    d32e:	781b      	ldrb	r3, [r3, #0]
    d330:	2219      	movs	r2, #25
    d332:	18ba      	adds	r2, r7, r2
    d334:	7812      	ldrb	r2, [r2, #0]
    d336:	4013      	ands	r3, r2
    d338:	b2db      	uxtb	r3, r3
    d33a:	1e5a      	subs	r2, r3, #1
    d33c:	4193      	sbcs	r3, r2
    d33e:	b2da      	uxtb	r2, r3
    d340:	2315      	movs	r3, #21
    d342:	18fb      	adds	r3, r7, r3
    d344:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    d346:	231a      	movs	r3, #26
    d348:	18fb      	adds	r3, r7, r3
    d34a:	881b      	ldrh	r3, [r3, #0]
    d34c:	0bdb      	lsrs	r3, r3, #15
    d34e:	b29a      	uxth	r2, r3
    d350:	2314      	movs	r3, #20
    d352:	18fb      	adds	r3, r7, r3
    d354:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    d356:	231a      	movs	r3, #26
    d358:	18fa      	adds	r2, r7, r3
    d35a:	231a      	movs	r3, #26
    d35c:	18fb      	adds	r3, r7, r3
    d35e:	881b      	ldrh	r3, [r3, #0]
    d360:	18db      	adds	r3, r3, r3
    d362:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    d364:	2315      	movs	r3, #21
    d366:	18fa      	adds	r2, r7, r3
    d368:	2314      	movs	r3, #20
    d36a:	18fb      	adds	r3, r7, r3
    d36c:	7812      	ldrb	r2, [r2, #0]
    d36e:	781b      	ldrb	r3, [r3, #0]
    d370:	429a      	cmp	r2, r3
    d372:	d009      	beq.n	d388 <atCRC+0x8c>
                crc_register ^= polynom;
    d374:	231a      	movs	r3, #26
    d376:	18fb      	adds	r3, r7, r3
    d378:	221a      	movs	r2, #26
    d37a:	18b9      	adds	r1, r7, r2
    d37c:	2216      	movs	r2, #22
    d37e:	18ba      	adds	r2, r7, r2
    d380:	8809      	ldrh	r1, [r1, #0]
    d382:	8812      	ldrh	r2, [r2, #0]
    d384:	404a      	eors	r2, r1
    d386:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    d388:	2319      	movs	r3, #25
    d38a:	18fa      	adds	r2, r7, r3
    d38c:	2319      	movs	r3, #25
    d38e:	18fb      	adds	r3, r7, r3
    d390:	781b      	ldrb	r3, [r3, #0]
    d392:	18db      	adds	r3, r3, r3
    d394:	7013      	strb	r3, [r2, #0]
    d396:	2319      	movs	r3, #25
    d398:	18fb      	adds	r3, r7, r3
    d39a:	781b      	ldrb	r3, [r3, #0]
    d39c:	2b00      	cmp	r3, #0
    d39e:	d1c3      	bne.n	d328 <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    d3a0:	69fb      	ldr	r3, [r7, #28]
    d3a2:	3301      	adds	r3, #1
    d3a4:	61fb      	str	r3, [r7, #28]
    d3a6:	69fa      	ldr	r2, [r7, #28]
    d3a8:	68fb      	ldr	r3, [r7, #12]
    d3aa:	429a      	cmp	r2, r3
    d3ac:	d3b7      	bcc.n	d31e <atCRC+0x22>
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    d3ae:	231a      	movs	r3, #26
    d3b0:	18fb      	adds	r3, r7, r3
    d3b2:	881b      	ldrh	r3, [r3, #0]
    d3b4:	b2da      	uxtb	r2, r3
    d3b6:	687b      	ldr	r3, [r7, #4]
    d3b8:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    d3ba:	687b      	ldr	r3, [r7, #4]
    d3bc:	3301      	adds	r3, #1
    d3be:	221a      	movs	r2, #26
    d3c0:	18ba      	adds	r2, r7, r2
    d3c2:	8812      	ldrh	r2, [r2, #0]
    d3c4:	0a12      	lsrs	r2, r2, #8
    d3c6:	b292      	uxth	r2, r2
    d3c8:	b2d2      	uxtb	r2, r2
    d3ca:	701a      	strb	r2, [r3, #0]
}
    d3cc:	46c0      	nop			; (mov r8, r8)
    d3ce:	46bd      	mov	sp, r7
    d3d0:	b008      	add	sp, #32
    d3d2:	bd80      	pop	{r7, pc}
    d3d4:	ffff8005 	.word	0xffff8005

0000d3d8 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    d3d8:	b580      	push	{r7, lr}
    d3da:	b084      	sub	sp, #16
    d3dc:	af00      	add	r7, sp, #0
    d3de:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    d3e0:	687b      	ldr	r3, [r7, #4]
    d3e2:	785a      	ldrb	r2, [r3, #1]
    d3e4:	230f      	movs	r3, #15
    d3e6:	18fb      	adds	r3, r7, r3
    d3e8:	3a02      	subs	r2, #2
    d3ea:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	1c5a      	adds	r2, r3, #1
    d3f0:	230f      	movs	r3, #15
    d3f2:	18fb      	adds	r3, r7, r3
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	18d3      	adds	r3, r2, r3
    d3f8:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    d3fa:	230f      	movs	r3, #15
    d3fc:	18fb      	adds	r3, r7, r3
    d3fe:	7818      	ldrb	r0, [r3, #0]
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	3301      	adds	r3, #1
    d404:	68ba      	ldr	r2, [r7, #8]
    d406:	0019      	movs	r1, r3
    d408:	4b02      	ldr	r3, [pc, #8]	; (d414 <atCalcCrc+0x3c>)
    d40a:	4798      	blx	r3
}
    d40c:	46c0      	nop			; (mov r8, r8)
    d40e:	46bd      	mov	sp, r7
    d410:	b004      	add	sp, #16
    d412:	bd80      	pop	{r7, pc}
    d414:	0000d2fd 	.word	0x0000d2fd

0000d418 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return status of the consistency check
 */

uint8_t atCheckCrc(const uint8_t *response)
{
    d418:	b580      	push	{r7, lr}
    d41a:	b084      	sub	sp, #16
    d41c:	af00      	add	r7, sp, #0
    d41e:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    d420:	230f      	movs	r3, #15
    d422:	18fb      	adds	r3, r7, r3
    d424:	687a      	ldr	r2, [r7, #4]
    d426:	7812      	ldrb	r2, [r2, #0]
    d428:	701a      	strb	r2, [r3, #0]

    if (count < ATCA_CRC_SIZE)
    d42a:	230f      	movs	r3, #15
    d42c:	18fb      	adds	r3, r7, r3
    d42e:	781b      	ldrb	r3, [r3, #0]
    d430:	2b01      	cmp	r3, #1
    d432:	d801      	bhi.n	d438 <atCheckCrc+0x20>
        return ATCA_BAD_PARAM;
    d434:	23e2      	movs	r3, #226	; 0xe2
    d436:	e029      	b.n	d48c <atCheckCrc+0x74>

    count -= ATCA_CRC_SIZE;
    d438:	230f      	movs	r3, #15
    d43a:	18fb      	adds	r3, r7, r3
    d43c:	220f      	movs	r2, #15
    d43e:	18ba      	adds	r2, r7, r2
    d440:	7812      	ldrb	r2, [r2, #0]
    d442:	3a02      	subs	r2, #2
    d444:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    d446:	230f      	movs	r3, #15
    d448:	18fb      	adds	r3, r7, r3
    d44a:	781b      	ldrb	r3, [r3, #0]
    d44c:	220c      	movs	r2, #12
    d44e:	18ba      	adds	r2, r7, r2
    d450:	6879      	ldr	r1, [r7, #4]
    d452:	0018      	movs	r0, r3
    d454:	4b0f      	ldr	r3, [pc, #60]	; (d494 <atCheckCrc+0x7c>)
    d456:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_BAD_CRC;
    d458:	230c      	movs	r3, #12
    d45a:	18fb      	adds	r3, r7, r3
    d45c:	781a      	ldrb	r2, [r3, #0]
    d45e:	230f      	movs	r3, #15
    d460:	18fb      	adds	r3, r7, r3
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	6879      	ldr	r1, [r7, #4]
    d466:	18cb      	adds	r3, r1, r3
    d468:	781b      	ldrb	r3, [r3, #0]
    d46a:	429a      	cmp	r2, r3
    d46c:	d10d      	bne.n	d48a <atCheckCrc+0x72>
    d46e:	230c      	movs	r3, #12
    d470:	18fb      	adds	r3, r7, r3
    d472:	785a      	ldrb	r2, [r3, #1]
    d474:	230f      	movs	r3, #15
    d476:	18fb      	adds	r3, r7, r3
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	3301      	adds	r3, #1
    d47c:	6879      	ldr	r1, [r7, #4]
    d47e:	18cb      	adds	r3, r1, r3
    d480:	781b      	ldrb	r3, [r3, #0]
    d482:	429a      	cmp	r2, r3
    d484:	d101      	bne.n	d48a <atCheckCrc+0x72>
    d486:	2300      	movs	r3, #0
    d488:	e000      	b.n	d48c <atCheckCrc+0x74>
    d48a:	23e5      	movs	r3, #229	; 0xe5
}
    d48c:	0018      	movs	r0, r3
    d48e:	46bd      	mov	sp, r7
    d490:	b004      	add	sp, #16
    d492:	bd80      	pop	{r7, pc}
    d494:	0000d2fd 	.word	0x0000d2fd

0000d498 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_STATUS indicating type of error or no error
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    d498:	b580      	push	{r7, lr}
    d49a:	b084      	sub	sp, #16
    d49c:	af00      	add	r7, sp, #0
    d49e:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    d4a0:	230c      	movs	r3, #12
    d4a2:	18fb      	adds	r3, r7, r3
    d4a4:	4a19      	ldr	r2, [pc, #100]	; (d50c <isATCAError+0x74>)
    d4a6:	6812      	ldr	r2, [r2, #0]
    d4a8:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    d4aa:	230c      	movs	r3, #12
    d4ac:	18f9      	adds	r1, r7, r3
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	2204      	movs	r2, #4
    d4b2:	0018      	movs	r0, r3
    d4b4:	4b16      	ldr	r3, [pc, #88]	; (d510 <isATCAError+0x78>)
    d4b6:	4798      	blx	r3
    d4b8:	1e03      	subs	r3, r0, #0
    d4ba:	d101      	bne.n	d4c0 <isATCAError+0x28>
        return ATCA_SUCCESS;
    d4bc:	2300      	movs	r3, #0
    d4be:	e020      	b.n	d502 <isATCAError+0x6a>

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	781b      	ldrb	r3, [r3, #0]
    d4c4:	2b04      	cmp	r3, #4
    d4c6:	d11b      	bne.n	d500 <isATCAError+0x68>
    {
        switch (data[1])
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	3301      	adds	r3, #1
    d4cc:	781b      	ldrb	r3, [r3, #0]
    d4ce:	2b0f      	cmp	r3, #15
    d4d0:	d00e      	beq.n	d4f0 <isATCAError+0x58>
    d4d2:	dc04      	bgt.n	d4de <isATCAError+0x46>
    d4d4:	2b01      	cmp	r3, #1
    d4d6:	d007      	beq.n	d4e8 <isATCAError+0x50>
    d4d8:	2b03      	cmp	r3, #3
    d4da:	d007      	beq.n	d4ec <isATCAError+0x54>
    d4dc:	e00e      	b.n	d4fc <isATCAError+0x64>
    d4de:	2b11      	cmp	r3, #17
    d4e0:	d008      	beq.n	d4f4 <isATCAError+0x5c>
    d4e2:	2bff      	cmp	r3, #255	; 0xff
    d4e4:	d008      	beq.n	d4f8 <isATCAError+0x60>
    d4e6:	e009      	b.n	d4fc <isATCAError+0x64>
        {
        case 0x01:              // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    d4e8:	23d1      	movs	r3, #209	; 0xd1
    d4ea:	e00a      	b.n	d502 <isATCAError+0x6a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    d4ec:	23d2      	movs	r3, #210	; 0xd2
    d4ee:	e008      	b.n	d502 <isATCAError+0x6a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    d4f0:	23f4      	movs	r3, #244	; 0xf4
    d4f2:	e006      	b.n	d502 <isATCAError+0x6a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    d4f4:	23f3      	movs	r3, #243	; 0xf3
    d4f6:	e004      	b.n	d502 <isATCAError+0x6a>
            break;
        case 0xff: // bad crc found or other comm error
            return ATCA_STATUS_CRC;
    d4f8:	23d4      	movs	r3, #212	; 0xd4
    d4fa:	e002      	b.n	d502 <isATCAError+0x6a>
            break;
        default:
            return ATCA_GEN_FAIL;
    d4fc:	23e1      	movs	r3, #225	; 0xe1
    d4fe:	e000      	b.n	d502 <isATCAError+0x6a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    d500:	2300      	movs	r3, #0
    }
}
    d502:	0018      	movs	r0, r3
    d504:	46bd      	mov	sp, r7
    d506:	b004      	add	sp, #16
    d508:	bd80      	pop	{r7, pc}
    d50a:	46c0      	nop			; (mov r8, r8)
    d50c:	0001e704 	.word	0x0001e704
    d510:	0001ba99 	.word	0x0001ba99

0000d514 <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    d514:	b580      	push	{r7, lr}
    d516:	b084      	sub	sp, #16
    d518:	af00      	add	r7, sp, #0
    d51a:	6078      	str	r0, [r7, #4]
    ATCADevice cadev = NULL;
    d51c:	2300      	movs	r3, #0
    d51e:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    d520:	687b      	ldr	r3, [r7, #4]
    d522:	2b00      	cmp	r3, #0
    d524:	d101      	bne.n	d52a <newATCADevice+0x16>
        return NULL;
    d526:	2300      	movs	r3, #0
    d528:	e022      	b.n	d570 <newATCADevice+0x5c>

    cadev = (ATCADevice)malloc(sizeof(struct atca_device));
    d52a:	2008      	movs	r0, #8
    d52c:	4b12      	ldr	r3, [pc, #72]	; (d578 <newATCADevice+0x64>)
    d52e:	4798      	blx	r3
    d530:	0003      	movs	r3, r0
    d532:	60fb      	str	r3, [r7, #12]
    cadev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	785b      	ldrb	r3, [r3, #1]
    d538:	0018      	movs	r0, r3
    d53a:	4b10      	ldr	r3, [pc, #64]	; (d57c <newATCADevice+0x68>)
    d53c:	4798      	blx	r3
    d53e:	0002      	movs	r2, r0
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	601a      	str	r2, [r3, #0]
    cadev->mIface    = (ATCAIface)newATCAIface(cfg);
    d544:	687b      	ldr	r3, [r7, #4]
    d546:	0018      	movs	r0, r3
    d548:	4b0d      	ldr	r3, [pc, #52]	; (d580 <newATCADevice+0x6c>)
    d54a:	4798      	blx	r3
    d54c:	0002      	movs	r2, r0
    d54e:	68fb      	ldr	r3, [r7, #12]
    d550:	605a      	str	r2, [r3, #4]

    if (cadev->mCommands == NULL || cadev->mIface == NULL)
    d552:	68fb      	ldr	r3, [r7, #12]
    d554:	681b      	ldr	r3, [r3, #0]
    d556:	2b00      	cmp	r3, #0
    d558:	d003      	beq.n	d562 <newATCADevice+0x4e>
    d55a:	68fb      	ldr	r3, [r7, #12]
    d55c:	685b      	ldr	r3, [r3, #4]
    d55e:	2b00      	cmp	r3, #0
    d560:	d105      	bne.n	d56e <newATCADevice+0x5a>
    {
        free(cadev);
    d562:	68fb      	ldr	r3, [r7, #12]
    d564:	0018      	movs	r0, r3
    d566:	4b07      	ldr	r3, [pc, #28]	; (d584 <newATCADevice+0x70>)
    d568:	4798      	blx	r3
        cadev = NULL;
    d56a:	2300      	movs	r3, #0
    d56c:	60fb      	str	r3, [r7, #12]
    }

    return cadev;
    d56e:	68fb      	ldr	r3, [r7, #12]
}
    d570:	0018      	movs	r0, r3
    d572:	46bd      	mov	sp, r7
    d574:	b004      	add	sp, #16
    d576:	bd80      	pop	{r7, pc}
    d578:	0001ba71 	.word	0x0001ba71
    d57c:	0000cfc9 	.word	0x0000cfc9
    d580:	0000d5fd 	.word	0x0000d5fd
    d584:	0001ba85 	.word	0x0001ba85

0000d588 <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    d588:	b580      	push	{r7, lr}
    d58a:	b082      	sub	sp, #8
    d58c:	af00      	add	r7, sp, #0
    d58e:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    d590:	687b      	ldr	r3, [r7, #4]
    d592:	681b      	ldr	r3, [r3, #0]
}
    d594:	0018      	movs	r0, r3
    d596:	46bd      	mov	sp, r7
    d598:	b002      	add	sp, #8
    d59a:	bd80      	pop	{r7, pc}

0000d59c <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    d59c:	b580      	push	{r7, lr}
    d59e:	b082      	sub	sp, #8
    d5a0:	af00      	add	r7, sp, #0
    d5a2:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    d5a4:	687b      	ldr	r3, [r7, #4]
    d5a6:	685b      	ldr	r3, [r3, #4]
}
    d5a8:	0018      	movs	r0, r3
    d5aa:	46bd      	mov	sp, r7
    d5ac:	b002      	add	sp, #8
    d5ae:	bd80      	pop	{r7, pc}

0000d5b0 <deleteATCADevice>:
 * \param[in] cadev  pointer to a reference to a device
 *
 */

void deleteATCADevice(ATCADevice *cadev)   // destructor
{
    d5b0:	b580      	push	{r7, lr}
    d5b2:	b084      	sub	sp, #16
    d5b4:	af00      	add	r7, sp, #0
    d5b6:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *cadev;
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	681b      	ldr	r3, [r3, #0]
    d5bc:	60fb      	str	r3, [r7, #12]

    if (*cadev)
    d5be:	687b      	ldr	r3, [r7, #4]
    d5c0:	681b      	ldr	r3, [r3, #0]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	d00d      	beq.n	d5e2 <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    d5c6:	68fb      	ldr	r3, [r7, #12]
    d5c8:	0018      	movs	r0, r3
    d5ca:	4b09      	ldr	r3, [pc, #36]	; (d5f0 <deleteATCADevice+0x40>)
    d5cc:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    d5ce:	68fb      	ldr	r3, [r7, #12]
    d5d0:	3304      	adds	r3, #4
    d5d2:	0018      	movs	r0, r3
    d5d4:	4b07      	ldr	r3, [pc, #28]	; (d5f4 <deleteATCADevice+0x44>)
    d5d6:	4798      	blx	r3
        free((void*)*cadev);
    d5d8:	687b      	ldr	r3, [r7, #4]
    d5da:	681b      	ldr	r3, [r3, #0]
    d5dc:	0018      	movs	r0, r3
    d5de:	4b06      	ldr	r3, [pc, #24]	; (d5f8 <deleteATCADevice+0x48>)
    d5e0:	4798      	blx	r3
    }

    *cadev = NULL;
    d5e2:	687b      	ldr	r3, [r7, #4]
    d5e4:	2200      	movs	r2, #0
    d5e6:	601a      	str	r2, [r3, #0]
}
    d5e8:	46c0      	nop			; (mov r8, r8)
    d5ea:	46bd      	mov	sp, r7
    d5ec:	b004      	add	sp, #16
    d5ee:	bd80      	pop	{r7, pc}
    d5f0:	0000d269 	.word	0x0000d269
    d5f4:	0000d799 	.word	0x0000d799
    d5f8:	0001ba85 	.word	0x0001ba85

0000d5fc <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    d5fc:	b580      	push	{r7, lr}
    d5fe:	b084      	sub	sp, #16
    d600:	af00      	add	r7, sp, #0
    d602:	6078      	str	r0, [r7, #4]
    ATCAIface caiface = (ATCAIface)malloc(sizeof(struct atca_iface));
    d604:	2028      	movs	r0, #40	; 0x28
    d606:	4b0e      	ldr	r3, [pc, #56]	; (d640 <newATCAIface+0x44>)
    d608:	4798      	blx	r3
    d60a:	0003      	movs	r3, r0
    d60c:	60fb      	str	r3, [r7, #12]

    caiface->mType = cfg->iface_type;
    d60e:	687b      	ldr	r3, [r7, #4]
    d610:	781a      	ldrb	r2, [r3, #0]
    d612:	68fb      	ldr	r3, [r7, #12]
    d614:	701a      	strb	r2, [r3, #0]
    caiface->mIfaceCFG = cfg;
    d616:	68fb      	ldr	r3, [r7, #12]
    d618:	687a      	ldr	r2, [r7, #4]
    d61a:	605a      	str	r2, [r3, #4]

    if (atinit(caiface) != ATCA_SUCCESS)
    d61c:	68fb      	ldr	r3, [r7, #12]
    d61e:	0018      	movs	r0, r3
    d620:	4b08      	ldr	r3, [pc, #32]	; (d644 <newATCAIface+0x48>)
    d622:	4798      	blx	r3
    d624:	1e03      	subs	r3, r0, #0
    d626:	d005      	beq.n	d634 <newATCAIface+0x38>
    {
        free(caiface);
    d628:	68fb      	ldr	r3, [r7, #12]
    d62a:	0018      	movs	r0, r3
    d62c:	4b06      	ldr	r3, [pc, #24]	; (d648 <newATCAIface+0x4c>)
    d62e:	4798      	blx	r3
        caiface = NULL;
    d630:	2300      	movs	r3, #0
    d632:	60fb      	str	r3, [r7, #12]
    }

    return caiface;
    d634:	68fb      	ldr	r3, [r7, #12]
}
    d636:	0018      	movs	r0, r3
    d638:	46bd      	mov	sp, r7
    d63a:	b004      	add	sp, #16
    d63c:	bd80      	pop	{r7, pc}
    d63e:	46c0      	nop			; (mov r8, r8)
    d640:	0001ba71 	.word	0x0001ba71
    d644:	0000d64d 	.word	0x0000d64d
    d648:	0001ba85 	.word	0x0001ba85

0000d64c <atinit>:

// public ATCAIface methods

ATCA_STATUS atinit(ATCAIface caiface)
{
    d64c:	b590      	push	{r4, r7, lr}
    d64e:	b08d      	sub	sp, #52	; 0x34
    d650:	af00      	add	r7, sp, #0
    d652:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    d654:	232f      	movs	r3, #47	; 0x2f
    d656:	18fb      	adds	r3, r7, r3
    d658:	22f0      	movs	r2, #240	; 0xf0
    d65a:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(caiface, &hal);
    d65c:	2308      	movs	r3, #8
    d65e:	18fa      	adds	r2, r7, r3
    d660:	687b      	ldr	r3, [r7, #4]
    d662:	0011      	movs	r1, r2
    d664:	0018      	movs	r0, r3
    d666:	4b14      	ldr	r3, [pc, #80]	; (d6b8 <atinit+0x6c>)
    d668:	4798      	blx	r3

    status = caiface->atinit(&hal, caiface->mIfaceCFG);
    d66a:	687b      	ldr	r3, [r7, #4]
    d66c:	689a      	ldr	r2, [r3, #8]
    d66e:	687b      	ldr	r3, [r7, #4]
    d670:	6859      	ldr	r1, [r3, #4]
    d672:	232f      	movs	r3, #47	; 0x2f
    d674:	18fc      	adds	r4, r7, r3
    d676:	2308      	movs	r3, #8
    d678:	18fb      	adds	r3, r7, r3
    d67a:	0018      	movs	r0, r3
    d67c:	4790      	blx	r2
    d67e:	0003      	movs	r3, r0
    d680:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    d682:	232f      	movs	r3, #47	; 0x2f
    d684:	18fb      	adds	r3, r7, r3
    d686:	781b      	ldrb	r3, [r3, #0]
    d688:	2b00      	cmp	r3, #0
    d68a:	d10d      	bne.n	d6a8 <atinit+0x5c>
    {
        caiface->hal_data = hal.hal_data;
    d68c:	2308      	movs	r3, #8
    d68e:	18fb      	adds	r3, r7, r3
    d690:	6a1a      	ldr	r2, [r3, #32]
    d692:	687b      	ldr	r3, [r7, #4]
    d694:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = caiface->atpostinit(caiface);
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	68db      	ldr	r3, [r3, #12]
    d69a:	222f      	movs	r2, #47	; 0x2f
    d69c:	18bc      	adds	r4, r7, r2
    d69e:	687a      	ldr	r2, [r7, #4]
    d6a0:	0010      	movs	r0, r2
    d6a2:	4798      	blx	r3
    d6a4:	0003      	movs	r3, r0
    d6a6:	7023      	strb	r3, [r4, #0]
    }

    return status;
    d6a8:	232f      	movs	r3, #47	; 0x2f
    d6aa:	18fb      	adds	r3, r7, r3
    d6ac:	781b      	ldrb	r3, [r3, #0]
}
    d6ae:	0018      	movs	r0, r3
    d6b0:	46bd      	mov	sp, r7
    d6b2:	b00d      	add	sp, #52	; 0x34
    d6b4:	bd90      	pop	{r4, r7, pc}
    d6b6:	46c0      	nop			; (mov r8, r8)
    d6b8:	0000d7dd 	.word	0x0000d7dd

0000d6bc <atsend>:

ATCA_STATUS atsend(ATCAIface caiface, uint8_t *txdata, int txlength)
{
    d6bc:	b580      	push	{r7, lr}
    d6be:	b084      	sub	sp, #16
    d6c0:	af00      	add	r7, sp, #0
    d6c2:	60f8      	str	r0, [r7, #12]
    d6c4:	60b9      	str	r1, [r7, #8]
    d6c6:	607a      	str	r2, [r7, #4]
    return caiface->atsend(caiface, txdata, txlength);
    d6c8:	68fb      	ldr	r3, [r7, #12]
    d6ca:	691b      	ldr	r3, [r3, #16]
    d6cc:	687a      	ldr	r2, [r7, #4]
    d6ce:	68b9      	ldr	r1, [r7, #8]
    d6d0:	68f8      	ldr	r0, [r7, #12]
    d6d2:	4798      	blx	r3
    d6d4:	0003      	movs	r3, r0
}
    d6d6:	0018      	movs	r0, r3
    d6d8:	46bd      	mov	sp, r7
    d6da:	b004      	add	sp, #16
    d6dc:	bd80      	pop	{r7, pc}

0000d6de <atreceive>:

ATCA_STATUS atreceive(ATCAIface caiface, uint8_t *rxdata, uint16_t *rxlength)
{
    d6de:	b580      	push	{r7, lr}
    d6e0:	b084      	sub	sp, #16
    d6e2:	af00      	add	r7, sp, #0
    d6e4:	60f8      	str	r0, [r7, #12]
    d6e6:	60b9      	str	r1, [r7, #8]
    d6e8:	607a      	str	r2, [r7, #4]
    return caiface->atreceive(caiface, rxdata, rxlength);
    d6ea:	68fb      	ldr	r3, [r7, #12]
    d6ec:	695b      	ldr	r3, [r3, #20]
    d6ee:	687a      	ldr	r2, [r7, #4]
    d6f0:	68b9      	ldr	r1, [r7, #8]
    d6f2:	68f8      	ldr	r0, [r7, #12]
    d6f4:	4798      	blx	r3
    d6f6:	0003      	movs	r3, r0
}
    d6f8:	0018      	movs	r0, r3
    d6fa:	46bd      	mov	sp, r7
    d6fc:	b004      	add	sp, #16
    d6fe:	bd80      	pop	{r7, pc}

0000d700 <atwake>:

ATCA_STATUS atwake(ATCAIface caiface)
{
    d700:	b580      	push	{r7, lr}
    d702:	b082      	sub	sp, #8
    d704:	af00      	add	r7, sp, #0
    d706:	6078      	str	r0, [r7, #4]
    return caiface->atwake(caiface);
    d708:	687b      	ldr	r3, [r7, #4]
    d70a:	699b      	ldr	r3, [r3, #24]
    d70c:	687a      	ldr	r2, [r7, #4]
    d70e:	0010      	movs	r0, r2
    d710:	4798      	blx	r3
    d712:	0003      	movs	r3, r0
}
    d714:	0018      	movs	r0, r3
    d716:	46bd      	mov	sp, r7
    d718:	b002      	add	sp, #8
    d71a:	bd80      	pop	{r7, pc}

0000d71c <atidle>:

ATCA_STATUS atidle(ATCAIface caiface)
{
    d71c:	b590      	push	{r4, r7, lr}
    d71e:	b085      	sub	sp, #20
    d720:	af00      	add	r7, sp, #0
    d722:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atidle(caiface);
    d724:	687b      	ldr	r3, [r7, #4]
    d726:	69db      	ldr	r3, [r3, #28]
    d728:	220f      	movs	r2, #15
    d72a:	18bc      	adds	r4, r7, r2
    d72c:	687a      	ldr	r2, [r7, #4]
    d72e:	0010      	movs	r0, r2
    d730:	4798      	blx	r3
    d732:	0003      	movs	r3, r0
    d734:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    d736:	2001      	movs	r0, #1
    d738:	4b04      	ldr	r3, [pc, #16]	; (d74c <atidle+0x30>)
    d73a:	4798      	blx	r3
    return status;
    d73c:	230f      	movs	r3, #15
    d73e:	18fb      	adds	r3, r7, r3
    d740:	781b      	ldrb	r3, [r3, #0]
}
    d742:	0018      	movs	r0, r3
    d744:	46bd      	mov	sp, r7
    d746:	b005      	add	sp, #20
    d748:	bd90      	pop	{r4, r7, pc}
    d74a:	46c0      	nop			; (mov r8, r8)
    d74c:	0000f595 	.word	0x0000f595

0000d750 <atsleep>:

ATCA_STATUS atsleep(ATCAIface caiface)
{
    d750:	b590      	push	{r4, r7, lr}
    d752:	b085      	sub	sp, #20
    d754:	af00      	add	r7, sp, #0
    d756:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = caiface->atsleep(caiface);
    d758:	687b      	ldr	r3, [r7, #4]
    d75a:	6a1b      	ldr	r3, [r3, #32]
    d75c:	220f      	movs	r2, #15
    d75e:	18bc      	adds	r4, r7, r2
    d760:	687a      	ldr	r2, [r7, #4]
    d762:	0010      	movs	r0, r2
    d764:	4798      	blx	r3
    d766:	0003      	movs	r3, r0
    d768:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    d76a:	2001      	movs	r0, #1
    d76c:	4b04      	ldr	r3, [pc, #16]	; (d780 <atsleep+0x30>)
    d76e:	4798      	blx	r3
    return status;
    d770:	230f      	movs	r3, #15
    d772:	18fb      	adds	r3, r7, r3
    d774:	781b      	ldrb	r3, [r3, #0]
}
    d776:	0018      	movs	r0, r3
    d778:	46bd      	mov	sp, r7
    d77a:	b005      	add	sp, #20
    d77c:	bd90      	pop	{r4, r7, pc}
    d77e:	46c0      	nop			; (mov r8, r8)
    d780:	0000f595 	.word	0x0000f595

0000d784 <atgetifacecfg>:

ATCAIfaceCfg * atgetifacecfg(ATCAIface caiface)
{
    d784:	b580      	push	{r7, lr}
    d786:	b082      	sub	sp, #8
    d788:	af00      	add	r7, sp, #0
    d78a:	6078      	str	r0, [r7, #4]
    return caiface->mIfaceCFG;
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	685b      	ldr	r3, [r3, #4]
}
    d790:	0018      	movs	r0, r3
    d792:	46bd      	mov	sp, r7
    d794:	b002      	add	sp, #8
    d796:	bd80      	pop	{r7, pc}

0000d798 <deleteATCAIface>:
{
    return caiface->hal_data;
}

void deleteATCAIface(ATCAIface *caiface) // destructor
{
    d798:	b580      	push	{r7, lr}
    d79a:	b082      	sub	sp, #8
    d79c:	af00      	add	r7, sp, #0
    d79e:	6078      	str	r0, [r7, #4]
    if (*caiface)
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	681b      	ldr	r3, [r3, #0]
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	d00e      	beq.n	d7c6 <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*caiface)->mType, (*caiface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    d7a8:	687b      	ldr	r3, [r7, #4]
    d7aa:	681b      	ldr	r3, [r3, #0]
    d7ac:	781a      	ldrb	r2, [r3, #0]
    d7ae:	687b      	ldr	r3, [r7, #4]
    d7b0:	681b      	ldr	r3, [r3, #0]
    d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d7b4:	0019      	movs	r1, r3
    d7b6:	0010      	movs	r0, r2
    d7b8:	4b06      	ldr	r3, [pc, #24]	; (d7d4 <deleteATCAIface+0x3c>)
    d7ba:	4798      	blx	r3
        free((void*)*caiface);
    d7bc:	687b      	ldr	r3, [r7, #4]
    d7be:	681b      	ldr	r3, [r3, #0]
    d7c0:	0018      	movs	r0, r3
    d7c2:	4b05      	ldr	r3, [pc, #20]	; (d7d8 <deleteATCAIface+0x40>)
    d7c4:	4798      	blx	r3
    }

    *caiface = NULL;
    d7c6:	687b      	ldr	r3, [r7, #4]
    d7c8:	2200      	movs	r2, #0
    d7ca:	601a      	str	r2, [r3, #0]
}
    d7cc:	46c0      	nop			; (mov r8, r8)
    d7ce:	46bd      	mov	sp, r7
    d7d0:	b002      	add	sp, #8
    d7d2:	bd80      	pop	{r7, pc}
    d7d4:	0000ebf5 	.word	0x0000ebf5
    d7d8:	0001ba85 	.word	0x0001ba85

0000d7dc <_atinit>:

ATCA_STATUS _atinit(ATCAIface caiface, ATCAHAL_t *hal)
{
    d7dc:	b580      	push	{r7, lr}
    d7de:	b082      	sub	sp, #8
    d7e0:	af00      	add	r7, sp, #0
    d7e2:	6078      	str	r0, [r7, #4]
    d7e4:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(caiface->mIfaceCFG, hal);
    d7e6:	687b      	ldr	r3, [r7, #4]
    d7e8:	685b      	ldr	r3, [r3, #4]
    d7ea:	683a      	ldr	r2, [r7, #0]
    d7ec:	0011      	movs	r1, r2
    d7ee:	0018      	movs	r0, r3
    d7f0:	4b13      	ldr	r3, [pc, #76]	; (d840 <_atinit+0x64>)
    d7f2:	4798      	blx	r3
    caiface->atinit     = hal->halinit;
    d7f4:	683b      	ldr	r3, [r7, #0]
    d7f6:	681a      	ldr	r2, [r3, #0]
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	609a      	str	r2, [r3, #8]
    caiface->atpostinit = hal->halpostinit;
    d7fc:	683b      	ldr	r3, [r7, #0]
    d7fe:	685a      	ldr	r2, [r3, #4]
    d800:	687b      	ldr	r3, [r7, #4]
    d802:	60da      	str	r2, [r3, #12]
    caiface->atsend     = hal->halsend;
    d804:	683b      	ldr	r3, [r7, #0]
    d806:	689a      	ldr	r2, [r3, #8]
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	611a      	str	r2, [r3, #16]
    caiface->atreceive  = hal->halreceive;
    d80c:	683b      	ldr	r3, [r7, #0]
    d80e:	68da      	ldr	r2, [r3, #12]
    d810:	687b      	ldr	r3, [r7, #4]
    d812:	615a      	str	r2, [r3, #20]
    caiface->atwake     = hal->halwake;
    d814:	683b      	ldr	r3, [r7, #0]
    d816:	691a      	ldr	r2, [r3, #16]
    d818:	687b      	ldr	r3, [r7, #4]
    d81a:	619a      	str	r2, [r3, #24]
    caiface->atsleep    = hal->halsleep;
    d81c:	683b      	ldr	r3, [r7, #0]
    d81e:	699a      	ldr	r2, [r3, #24]
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	621a      	str	r2, [r3, #32]
    caiface->atidle     = hal->halidle;
    d824:	683b      	ldr	r3, [r7, #0]
    d826:	695a      	ldr	r2, [r3, #20]
    d828:	687b      	ldr	r3, [r7, #4]
    d82a:	61da      	str	r2, [r3, #28]
    caiface->hal_data   = hal->hal_data;
    d82c:	683b      	ldr	r3, [r7, #0]
    d82e:	6a1a      	ldr	r2, [r3, #32]
    d830:	687b      	ldr	r3, [r7, #4]
    d832:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    d834:	2300      	movs	r3, #0
}
    d836:	0018      	movs	r0, r3
    d838:	46bd      	mov	sp, r7
    d83a:	b002      	add	sp, #8
    d83c:	bd80      	pop	{r7, pc}
    d83e:	46c0      	nop			; (mov r8, r8)
    d840:	0000eb59 	.word	0x0000eb59

0000d844 <atcab_init>:
 *  \param[in] cfg is a pointer to an interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return ATCA_STATUS
 *  \see atcab_init_device()
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    d844:	b580      	push	{r7, lr}
    d846:	b082      	sub	sp, #8
    d848:	af00      	add	r7, sp, #0
    d84a:	6078      	str	r0, [r7, #4]
    if (_gDevice)       // if there's already a device created, release it
    d84c:	4b18      	ldr	r3, [pc, #96]	; (d8b0 <atcab_init+0x6c>)
    d84e:	681b      	ldr	r3, [r3, #0]
    d850:	2b00      	cmp	r3, #0
    d852:	d001      	beq.n	d858 <atcab_init+0x14>
        atcab_release();
    d854:	4b17      	ldr	r3, [pc, #92]	; (d8b4 <atcab_init+0x70>)
    d856:	4798      	blx	r3

    _gDevice = newATCADevice(cfg);
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	0018      	movs	r0, r3
    d85c:	4b16      	ldr	r3, [pc, #88]	; (d8b8 <atcab_init+0x74>)
    d85e:	4798      	blx	r3
    d860:	0002      	movs	r2, r0
    d862:	4b13      	ldr	r3, [pc, #76]	; (d8b0 <atcab_init+0x6c>)
    d864:	601a      	str	r2, [r3, #0]
    if (_gDevice == NULL)
    d866:	4b12      	ldr	r3, [pc, #72]	; (d8b0 <atcab_init+0x6c>)
    d868:	681b      	ldr	r3, [r3, #0]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d101      	bne.n	d872 <atcab_init+0x2e>
        return ATCA_GEN_FAIL;  // Device creation failed
    d86e:	23e1      	movs	r3, #225	; 0xe1
    d870:	e01a      	b.n	d8a8 <atcab_init+0x64>

    _gCommandObj = atGetCommands(_gDevice);
    d872:	4b0f      	ldr	r3, [pc, #60]	; (d8b0 <atcab_init+0x6c>)
    d874:	681b      	ldr	r3, [r3, #0]
    d876:	0018      	movs	r0, r3
    d878:	4b10      	ldr	r3, [pc, #64]	; (d8bc <atcab_init+0x78>)
    d87a:	4798      	blx	r3
    d87c:	0002      	movs	r2, r0
    d87e:	4b10      	ldr	r3, [pc, #64]	; (d8c0 <atcab_init+0x7c>)
    d880:	601a      	str	r2, [r3, #0]
    _gIface = atGetIFace(_gDevice);
    d882:	4b0b      	ldr	r3, [pc, #44]	; (d8b0 <atcab_init+0x6c>)
    d884:	681b      	ldr	r3, [r3, #0]
    d886:	0018      	movs	r0, r3
    d888:	4b0e      	ldr	r3, [pc, #56]	; (d8c4 <atcab_init+0x80>)
    d88a:	4798      	blx	r3
    d88c:	0002      	movs	r2, r0
    d88e:	4b0e      	ldr	r3, [pc, #56]	; (d8c8 <atcab_init+0x84>)
    d890:	601a      	str	r2, [r3, #0]

    if (_gCommandObj == NULL || _gIface == NULL)
    d892:	4b0b      	ldr	r3, [pc, #44]	; (d8c0 <atcab_init+0x7c>)
    d894:	681b      	ldr	r3, [r3, #0]
    d896:	2b00      	cmp	r3, #0
    d898:	d003      	beq.n	d8a2 <atcab_init+0x5e>
    d89a:	4b0b      	ldr	r3, [pc, #44]	; (d8c8 <atcab_init+0x84>)
    d89c:	681b      	ldr	r3, [r3, #0]
    d89e:	2b00      	cmp	r3, #0
    d8a0:	d101      	bne.n	d8a6 <atcab_init+0x62>
        return ATCA_GEN_FAIL;  // More of an assert to make everything was constructed properly
    d8a2:	23e1      	movs	r3, #225	; 0xe1
    d8a4:	e000      	b.n	d8a8 <atcab_init+0x64>

    return ATCA_SUCCESS;
    d8a6:	2300      	movs	r3, #0
}
    d8a8:	0018      	movs	r0, r3
    d8aa:	46bd      	mov	sp, r7
    d8ac:	b002      	add	sp, #8
    d8ae:	bd80      	pop	{r7, pc}
    d8b0:	200015c8 	.word	0x200015c8
    d8b4:	0000d8cd 	.word	0x0000d8cd
    d8b8:	0000d515 	.word	0x0000d515
    d8bc:	0000d589 	.word	0x0000d589
    d8c0:	200015cc 	.word	0x200015cc
    d8c4:	0000d59d 	.word	0x0000d59d
    d8c8:	200015d0 	.word	0x200015d0

0000d8cc <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_release(void)
{
    d8cc:	b580      	push	{r7, lr}
    d8ce:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    d8d0:	4b03      	ldr	r3, [pc, #12]	; (d8e0 <atcab_release+0x14>)
    d8d2:	0018      	movs	r0, r3
    d8d4:	4b03      	ldr	r3, [pc, #12]	; (d8e4 <atcab_release+0x18>)
    d8d6:	4798      	blx	r3
    return ATCA_SUCCESS;
    d8d8:	2300      	movs	r3, #0
}
    d8da:	0018      	movs	r0, r3
    d8dc:	46bd      	mov	sp, r7
    d8de:	bd80      	pop	{r7, pc}
    d8e0:	200015c8 	.word	0x200015c8
    d8e4:	0000d5b1 	.word	0x0000d5b1

0000d8e8 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_wakeup(void)
{
    d8e8:	b580      	push	{r7, lr}
    d8ea:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    d8ec:	4b07      	ldr	r3, [pc, #28]	; (d90c <atcab_wakeup+0x24>)
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	2b00      	cmp	r3, #0
    d8f2:	d101      	bne.n	d8f8 <atcab_wakeup+0x10>
        return ATCA_GEN_FAIL;
    d8f4:	23e1      	movs	r3, #225	; 0xe1
    d8f6:	e005      	b.n	d904 <atcab_wakeup+0x1c>

    return atwake(_gIface);
    d8f8:	4b05      	ldr	r3, [pc, #20]	; (d910 <atcab_wakeup+0x28>)
    d8fa:	681b      	ldr	r3, [r3, #0]
    d8fc:	0018      	movs	r0, r3
    d8fe:	4b05      	ldr	r3, [pc, #20]	; (d914 <atcab_wakeup+0x2c>)
    d900:	4798      	blx	r3
    d902:	0003      	movs	r3, r0
}
    d904:	0018      	movs	r0, r3
    d906:	46bd      	mov	sp, r7
    d908:	bd80      	pop	{r7, pc}
    d90a:	46c0      	nop			; (mov r8, r8)
    d90c:	200015c8 	.word	0x200015c8
    d910:	200015d0 	.word	0x200015d0
    d914:	0000d701 	.word	0x0000d701

0000d918 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_idle(void)
{
    d918:	b580      	push	{r7, lr}
    d91a:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    d91c:	4b07      	ldr	r3, [pc, #28]	; (d93c <atcab_idle+0x24>)
    d91e:	681b      	ldr	r3, [r3, #0]
    d920:	2b00      	cmp	r3, #0
    d922:	d101      	bne.n	d928 <atcab_idle+0x10>
        return ATCA_GEN_FAIL;
    d924:	23e1      	movs	r3, #225	; 0xe1
    d926:	e005      	b.n	d934 <atcab_idle+0x1c>

    return atidle(_gIface);
    d928:	4b05      	ldr	r3, [pc, #20]	; (d940 <atcab_idle+0x28>)
    d92a:	681b      	ldr	r3, [r3, #0]
    d92c:	0018      	movs	r0, r3
    d92e:	4b05      	ldr	r3, [pc, #20]	; (d944 <atcab_idle+0x2c>)
    d930:	4798      	blx	r3
    d932:	0003      	movs	r3, r0
}
    d934:	0018      	movs	r0, r3
    d936:	46bd      	mov	sp, r7
    d938:	bd80      	pop	{r7, pc}
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	200015c8 	.word	0x200015c8
    d940:	200015d0 	.word	0x200015d0
    d944:	0000d71d 	.word	0x0000d71d

0000d948 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_sleep(void)
{
    d948:	b580      	push	{r7, lr}
    d94a:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    d94c:	4b07      	ldr	r3, [pc, #28]	; (d96c <atcab_sleep+0x24>)
    d94e:	681b      	ldr	r3, [r3, #0]
    d950:	2b00      	cmp	r3, #0
    d952:	d101      	bne.n	d958 <atcab_sleep+0x10>
        return ATCA_GEN_FAIL;
    d954:	23e1      	movs	r3, #225	; 0xe1
    d956:	e005      	b.n	d964 <atcab_sleep+0x1c>

    return atsleep(_gIface);
    d958:	4b05      	ldr	r3, [pc, #20]	; (d970 <atcab_sleep+0x28>)
    d95a:	681b      	ldr	r3, [r3, #0]
    d95c:	0018      	movs	r0, r3
    d95e:	4b05      	ldr	r3, [pc, #20]	; (d974 <atcab_sleep+0x2c>)
    d960:	4798      	blx	r3
    d962:	0003      	movs	r3, r0
}
    d964:	0018      	movs	r0, r3
    d966:	46bd      	mov	sp, r7
    d968:	bd80      	pop	{r7, pc}
    d96a:	46c0      	nop			; (mov r8, r8)
    d96c:	200015c8 	.word	0x200015c8
    d970:	200015d0 	.word	0x200015d0
    d974:	0000d751 	.word	0x0000d751

0000d978 <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_STATUS
 */
static ATCA_STATUS _atcab_exit(void)
{
    d978:	b580      	push	{r7, lr}
    d97a:	af00      	add	r7, sp, #0
    return atcab_idle();
    d97c:	4b02      	ldr	r3, [pc, #8]	; (d988 <_atcab_exit+0x10>)
    d97e:	4798      	blx	r3
    d980:	0003      	movs	r3, r0
}
    d982:	0018      	movs	r0, r3
    d984:	46bd      	mov	sp, r7
    d986:	bd80      	pop	{r7, pc}
    d988:	0000d919 	.word	0x0000d919

0000d98c <atcab_info>:
 *  \param[out] revision - 4-byte storage for receiving the revision number from the device
 *  \return ATCA_STATUS
 */

ATCA_STATUS atcab_info(uint8_t *revision)
{
    d98c:	b590      	push	{r4, r7, lr}
    d98e:	b0a9      	sub	sp, #164	; 0xa4
    d990:	af00      	add	r7, sp, #0
    d992:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCA_STATUS status = ATCA_GEN_FAIL;
    d994:	239f      	movs	r3, #159	; 0x9f
    d996:	18fb      	adds	r3, r7, r3
    d998:	22e1      	movs	r2, #225	; 0xe1
    d99a:	701a      	strb	r2, [r3, #0]
    uint32_t execution_time;

    if (!_gDevice)
    d99c:	4b58      	ldr	r3, [pc, #352]	; (db00 <atcab_info+0x174>)
    d99e:	681b      	ldr	r3, [r3, #0]
    d9a0:	2b00      	cmp	r3, #0
    d9a2:	d101      	bne.n	d9a8 <atcab_info+0x1c>
        return ATCA_GEN_FAIL;
    d9a4:	23e1      	movs	r3, #225	; 0xe1
    d9a6:	e0a6      	b.n	daf6 <atcab_info+0x16a>

    // build an info command
    packet.param1 = INFO_MODE_REVISION;
    d9a8:	230c      	movs	r3, #12
    d9aa:	18fb      	adds	r3, r7, r3
    d9ac:	2200      	movs	r2, #0
    d9ae:	70da      	strb	r2, [r3, #3]
    packet.param2 = 0;
    d9b0:	230c      	movs	r3, #12
    d9b2:	18fb      	adds	r3, r7, r3
    d9b4:	2200      	movs	r2, #0
    d9b6:	809a      	strh	r2, [r3, #4]

    do
    {
        // Check the inputs
        if (revision == NULL)
    d9b8:	687b      	ldr	r3, [r7, #4]
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d104      	bne.n	d9c8 <atcab_info+0x3c>
        {
            status = ATCA_BAD_PARAM;
    d9be:	239f      	movs	r3, #159	; 0x9f
    d9c0:	18fb      	adds	r3, r7, r3
    d9c2:	22e2      	movs	r2, #226	; 0xe2
    d9c4:	701a      	strb	r2, [r3, #0]
            BREAK(status, "atcab_info: Null inputs");
    d9c6:	e08c      	b.n	dae2 <atcab_info+0x156>
        }
        if ( (status = atInfo(_gCommandObj, &packet)) != ATCA_SUCCESS)
    d9c8:	4b4e      	ldr	r3, [pc, #312]	; (db04 <atcab_info+0x178>)
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	229f      	movs	r2, #159	; 0x9f
    d9ce:	18bc      	adds	r4, r7, r2
    d9d0:	220c      	movs	r2, #12
    d9d2:	18ba      	adds	r2, r7, r2
    d9d4:	0011      	movs	r1, r2
    d9d6:	0018      	movs	r0, r3
    d9d8:	4b4b      	ldr	r3, [pc, #300]	; (db08 <atcab_info+0x17c>)
    d9da:	4798      	blx	r3
    d9dc:	0003      	movs	r3, r0
    d9de:	7023      	strb	r3, [r4, #0]
    d9e0:	239f      	movs	r3, #159	; 0x9f
    d9e2:	18fb      	adds	r3, r7, r3
    d9e4:	781b      	ldrb	r3, [r3, #0]
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	d000      	beq.n	d9ec <atcab_info+0x60>
    d9ea:	e071      	b.n	dad0 <atcab_info+0x144>
            BREAK(status, "Failed to construct Info command");

        execution_time = atGetExecTime(_gCommandObj, CMD_INFO);
    d9ec:	4b45      	ldr	r3, [pc, #276]	; (db04 <atcab_info+0x178>)
    d9ee:	681b      	ldr	r3, [r3, #0]
    d9f0:	2108      	movs	r1, #8
    d9f2:	0018      	movs	r0, r3
    d9f4:	4b45      	ldr	r3, [pc, #276]	; (db0c <atcab_info+0x180>)
    d9f6:	4798      	blx	r3
    d9f8:	0003      	movs	r3, r0
    d9fa:	2298      	movs	r2, #152	; 0x98
    d9fc:	18ba      	adds	r2, r7, r2
    d9fe:	6013      	str	r3, [r2, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    da00:	239f      	movs	r3, #159	; 0x9f
    da02:	18fc      	adds	r4, r7, r3
    da04:	4b42      	ldr	r3, [pc, #264]	; (db10 <atcab_info+0x184>)
    da06:	4798      	blx	r3
    da08:	0003      	movs	r3, r0
    da0a:	7023      	strb	r3, [r4, #0]
    da0c:	239f      	movs	r3, #159	; 0x9f
    da0e:	18fb      	adds	r3, r7, r3
    da10:	781b      	ldrb	r3, [r3, #0]
    da12:	2b00      	cmp	r3, #0
    da14:	d15e      	bne.n	dad4 <atcab_info+0x148>
            BREAK(status, "Failed to wakeup");

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    da16:	4b3f      	ldr	r3, [pc, #252]	; (db14 <atcab_info+0x188>)
    da18:	6818      	ldr	r0, [r3, #0]
    da1a:	230c      	movs	r3, #12
    da1c:	18fb      	adds	r3, r7, r3
    da1e:	785b      	ldrb	r3, [r3, #1]
    da20:	001a      	movs	r2, r3
    da22:	239f      	movs	r3, #159	; 0x9f
    da24:	18fc      	adds	r4, r7, r3
    da26:	230c      	movs	r3, #12
    da28:	18fb      	adds	r3, r7, r3
    da2a:	0019      	movs	r1, r3
    da2c:	4b3a      	ldr	r3, [pc, #232]	; (db18 <atcab_info+0x18c>)
    da2e:	4798      	blx	r3
    da30:	0003      	movs	r3, r0
    da32:	7023      	strb	r3, [r4, #0]
    da34:	239f      	movs	r3, #159	; 0x9f
    da36:	18fb      	adds	r3, r7, r3
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d14c      	bne.n	dad8 <atcab_info+0x14c>
            BREAK(status, "Failed to send Info command");

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    da3e:	2398      	movs	r3, #152	; 0x98
    da40:	18fb      	adds	r3, r7, r3
    da42:	681b      	ldr	r3, [r3, #0]
    da44:	0018      	movs	r0, r3
    da46:	4b35      	ldr	r3, [pc, #212]	; (db1c <atcab_info+0x190>)
    da48:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, &(packet.data[0]), &(packet.rxsize) )) != ATCA_SUCCESS)
    da4a:	4b32      	ldr	r3, [pc, #200]	; (db14 <atcab_info+0x188>)
    da4c:	6818      	ldr	r0, [r3, #0]
    da4e:	239f      	movs	r3, #159	; 0x9f
    da50:	18fc      	adds	r4, r7, r3
    da52:	230c      	movs	r3, #12
    da54:	18fb      	adds	r3, r7, r3
    da56:	338a      	adds	r3, #138	; 0x8a
    da58:	001a      	movs	r2, r3
    da5a:	230c      	movs	r3, #12
    da5c:	18fb      	adds	r3, r7, r3
    da5e:	3306      	adds	r3, #6
    da60:	0019      	movs	r1, r3
    da62:	4b2f      	ldr	r3, [pc, #188]	; (db20 <atcab_info+0x194>)
    da64:	4798      	blx	r3
    da66:	0003      	movs	r3, r0
    da68:	7023      	strb	r3, [r4, #0]
    da6a:	239f      	movs	r3, #159	; 0x9f
    da6c:	18fb      	adds	r3, r7, r3
    da6e:	781b      	ldrb	r3, [r3, #0]
    da70:	2b00      	cmp	r3, #0
    da72:	d133      	bne.n	dadc <atcab_info+0x150>
            BREAK(status, "Failed to receive Info command");

        // Check response size
        if (packet.rxsize < 4)
    da74:	230c      	movs	r3, #12
    da76:	18fb      	adds	r3, r7, r3
    da78:	228a      	movs	r2, #138	; 0x8a
    da7a:	5a9b      	ldrh	r3, [r3, r2]
    da7c:	2b03      	cmp	r3, #3
    da7e:	d80f      	bhi.n	daa0 <atcab_info+0x114>
        {
            if (packet.rxsize > 0)
    da80:	230c      	movs	r3, #12
    da82:	18fb      	adds	r3, r7, r3
    da84:	228a      	movs	r2, #138	; 0x8a
    da86:	5a9b      	ldrh	r3, [r3, r2]
    da88:	2b00      	cmp	r3, #0
    da8a:	d004      	beq.n	da96 <atcab_info+0x10a>
                status = ATCA_RX_FAIL;
    da8c:	239f      	movs	r3, #159	; 0x9f
    da8e:	18fb      	adds	r3, r7, r3
    da90:	22e6      	movs	r2, #230	; 0xe6
    da92:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            BREAK(status, "Info command returned error code or no resonse");
    da94:	e025      	b.n	dae2 <atcab_info+0x156>
                status = ATCA_RX_NO_RESPONSE;
    da96:	239f      	movs	r3, #159	; 0x9f
    da98:	18fb      	adds	r3, r7, r3
    da9a:	22e7      	movs	r2, #231	; 0xe7
    da9c:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Info command returned error code or no resonse");
    da9e:	e020      	b.n	dae2 <atcab_info+0x156>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    daa0:	239f      	movs	r3, #159	; 0x9f
    daa2:	18fc      	adds	r4, r7, r3
    daa4:	230c      	movs	r3, #12
    daa6:	18fb      	adds	r3, r7, r3
    daa8:	3306      	adds	r3, #6
    daaa:	0018      	movs	r0, r3
    daac:	4b1d      	ldr	r3, [pc, #116]	; (db24 <atcab_info+0x198>)
    daae:	4798      	blx	r3
    dab0:	0003      	movs	r3, r0
    dab2:	7023      	strb	r3, [r4, #0]
    dab4:	239f      	movs	r3, #159	; 0x9f
    dab6:	18fb      	adds	r3, r7, r3
    dab8:	781b      	ldrb	r3, [r3, #0]
    daba:	2b00      	cmp	r3, #0
    dabc:	d110      	bne.n	dae0 <atcab_info+0x154>
            BREAK(status, "Failed to construct Info command");

        memcpy(revision, &packet.data[1], 4);    // don't include the receive length, only payload
    dabe:	230c      	movs	r3, #12
    dac0:	18fb      	adds	r3, r7, r3
    dac2:	1dd9      	adds	r1, r3, #7
    dac4:	687b      	ldr	r3, [r7, #4]
    dac6:	2204      	movs	r2, #4
    dac8:	0018      	movs	r0, r3
    daca:	4b17      	ldr	r3, [pc, #92]	; (db28 <atcab_info+0x19c>)
    dacc:	4798      	blx	r3
    dace:	e008      	b.n	dae2 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    dad0:	46c0      	nop			; (mov r8, r8)
    dad2:	e006      	b.n	dae2 <atcab_info+0x156>
            BREAK(status, "Failed to wakeup");
    dad4:	46c0      	nop			; (mov r8, r8)
    dad6:	e004      	b.n	dae2 <atcab_info+0x156>
            BREAK(status, "Failed to send Info command");
    dad8:	46c0      	nop			; (mov r8, r8)
    dada:	e002      	b.n	dae2 <atcab_info+0x156>
            BREAK(status, "Failed to receive Info command");
    dadc:	46c0      	nop			; (mov r8, r8)
    dade:	e000      	b.n	dae2 <atcab_info+0x156>
            BREAK(status, "Failed to construct Info command");
    dae0:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    if (status != ATCA_COMM_FAIL)     // don't keep shoving more stuff at the chip if there's something wrong with comm
    dae2:	239f      	movs	r3, #159	; 0x9f
    dae4:	18fb      	adds	r3, r7, r3
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	2bf0      	cmp	r3, #240	; 0xf0
    daea:	d001      	beq.n	daf0 <atcab_info+0x164>
        _atcab_exit();
    daec:	4b0f      	ldr	r3, [pc, #60]	; (db2c <atcab_info+0x1a0>)
    daee:	4798      	blx	r3

    return status;
    daf0:	239f      	movs	r3, #159	; 0x9f
    daf2:	18fb      	adds	r3, r7, r3
    daf4:	781b      	ldrb	r3, [r3, #0]
}
    daf6:	0018      	movs	r0, r3
    daf8:	46bd      	mov	sp, r7
    dafa:	b029      	add	sp, #164	; 0xa4
    dafc:	bd90      	pop	{r4, r7, pc}
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	200015c8 	.word	0x200015c8
    db04:	200015cc 	.word	0x200015cc
    db08:	0000d0b5 	.word	0x0000d0b5
    db0c:	0000d2d9 	.word	0x0000d2d9
    db10:	0000d8e9 	.word	0x0000d8e9
    db14:	200015d0 	.word	0x200015d0
    db18:	0000d6bd 	.word	0x0000d6bd
    db1c:	0000f595 	.word	0x0000f595
    db20:	0000d6df 	.word	0x0000d6df
    db24:	0000d499 	.word	0x0000d499
    db28:	0001bab7 	.word	0x0001bab7
    db2c:	0000d979 	.word	0x0000d979

0000db30 <atcab_random>:
/** \brief Get a 32 byte random number from the CryptoAuth device
 *	\param[out] rand_out ptr to 32 bytes of storage for random number
 *	\return status of the operation
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    db30:	b590      	push	{r4, r7, lr}
    db32:	b0a7      	sub	sp, #156	; 0x9c
    db34:	af00      	add	r7, sp, #0
    db36:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    db38:	2397      	movs	r3, #151	; 0x97
    db3a:	18fb      	adds	r3, r7, r3
    db3c:	22e1      	movs	r2, #225	; 0xe1
    db3e:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    db40:	2394      	movs	r3, #148	; 0x94
    db42:	18fb      	adds	r3, r7, r3
    db44:	2200      	movs	r2, #0
    db46:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    db48:	4b5d      	ldr	r3, [pc, #372]	; (dcc0 <atcab_random+0x190>)
    db4a:	681b      	ldr	r3, [r3, #0]
    db4c:	2b00      	cmp	r3, #0
    db4e:	d101      	bne.n	db54 <atcab_random+0x24>
        return ATCA_GEN_FAIL;
    db50:	23e1      	movs	r3, #225	; 0xe1
    db52:	e0b1      	b.n	dcb8 <atcab_random+0x188>

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    db54:	2308      	movs	r3, #8
    db56:	18fb      	adds	r3, r7, r3
    db58:	2200      	movs	r2, #0
    db5a:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    db5c:	2308      	movs	r3, #8
    db5e:	18fb      	adds	r3, r7, r3
    db60:	2200      	movs	r2, #0
    db62:	809a      	strh	r2, [r3, #4]
        if ( (status = atRandom(_gCommandObj, &packet)) != ATCA_SUCCESS)
    db64:	4b57      	ldr	r3, [pc, #348]	; (dcc4 <atcab_random+0x194>)
    db66:	681b      	ldr	r3, [r3, #0]
    db68:	2297      	movs	r2, #151	; 0x97
    db6a:	18bc      	adds	r4, r7, r2
    db6c:	2208      	movs	r2, #8
    db6e:	18ba      	adds	r2, r7, r2
    db70:	0011      	movs	r1, r2
    db72:	0018      	movs	r0, r3
    db74:	4b54      	ldr	r3, [pc, #336]	; (dcc8 <atcab_random+0x198>)
    db76:	4798      	blx	r3
    db78:	0003      	movs	r3, r0
    db7a:	7023      	strb	r3, [r4, #0]
    db7c:	2397      	movs	r3, #151	; 0x97
    db7e:	18fb      	adds	r3, r7, r3
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	2b00      	cmp	r3, #0
    db84:	d000      	beq.n	db88 <atcab_random+0x58>
    db86:	e089      	b.n	dc9c <atcab_random+0x16c>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_RANDOM);
    db88:	4b4e      	ldr	r3, [pc, #312]	; (dcc4 <atcab_random+0x194>)
    db8a:	681b      	ldr	r3, [r3, #0]
    db8c:	2294      	movs	r2, #148	; 0x94
    db8e:	18bc      	adds	r4, r7, r2
    db90:	210e      	movs	r1, #14
    db92:	0018      	movs	r0, r3
    db94:	4b4d      	ldr	r3, [pc, #308]	; (dccc <atcab_random+0x19c>)
    db96:	4798      	blx	r3
    db98:	0003      	movs	r3, r0
    db9a:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    db9c:	2397      	movs	r3, #151	; 0x97
    db9e:	18fc      	adds	r4, r7, r3
    dba0:	4b4b      	ldr	r3, [pc, #300]	; (dcd0 <atcab_random+0x1a0>)
    dba2:	4798      	blx	r3
    dba4:	0003      	movs	r3, r0
    dba6:	7023      	strb	r3, [r4, #0]
    dba8:	2397      	movs	r3, #151	; 0x97
    dbaa:	18fb      	adds	r3, r7, r3
    dbac:	781b      	ldrb	r3, [r3, #0]
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d000      	beq.n	dbb4 <atcab_random+0x84>
    dbb2:	e075      	b.n	dca0 <atcab_random+0x170>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    dbb4:	4b47      	ldr	r3, [pc, #284]	; (dcd4 <atcab_random+0x1a4>)
    dbb6:	6818      	ldr	r0, [r3, #0]
    dbb8:	2308      	movs	r3, #8
    dbba:	18fb      	adds	r3, r7, r3
    dbbc:	785b      	ldrb	r3, [r3, #1]
    dbbe:	001a      	movs	r2, r3
    dbc0:	2397      	movs	r3, #151	; 0x97
    dbc2:	18fc      	adds	r4, r7, r3
    dbc4:	2308      	movs	r3, #8
    dbc6:	18fb      	adds	r3, r7, r3
    dbc8:	0019      	movs	r1, r3
    dbca:	4b43      	ldr	r3, [pc, #268]	; (dcd8 <atcab_random+0x1a8>)
    dbcc:	4798      	blx	r3
    dbce:	0003      	movs	r3, r0
    dbd0:	7023      	strb	r3, [r4, #0]
    dbd2:	2397      	movs	r3, #151	; 0x97
    dbd4:	18fb      	adds	r3, r7, r3
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d163      	bne.n	dca4 <atcab_random+0x174>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    dbdc:	2394      	movs	r3, #148	; 0x94
    dbde:	18fb      	adds	r3, r7, r3
    dbe0:	881b      	ldrh	r3, [r3, #0]
    dbe2:	0018      	movs	r0, r3
    dbe4:	4b3d      	ldr	r3, [pc, #244]	; (dcdc <atcab_random+0x1ac>)
    dbe6:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    dbe8:	4b3a      	ldr	r3, [pc, #232]	; (dcd4 <atcab_random+0x1a4>)
    dbea:	6818      	ldr	r0, [r3, #0]
    dbec:	2397      	movs	r3, #151	; 0x97
    dbee:	18fc      	adds	r4, r7, r3
    dbf0:	2308      	movs	r3, #8
    dbf2:	18fb      	adds	r3, r7, r3
    dbf4:	338a      	adds	r3, #138	; 0x8a
    dbf6:	001a      	movs	r2, r3
    dbf8:	2308      	movs	r3, #8
    dbfa:	18fb      	adds	r3, r7, r3
    dbfc:	3306      	adds	r3, #6
    dbfe:	0019      	movs	r1, r3
    dc00:	4b37      	ldr	r3, [pc, #220]	; (dce0 <atcab_random+0x1b0>)
    dc02:	4798      	blx	r3
    dc04:	0003      	movs	r3, r0
    dc06:	7023      	strb	r3, [r4, #0]
    dc08:	2397      	movs	r3, #151	; 0x97
    dc0a:	18fb      	adds	r3, r7, r3
    dc0c:	781b      	ldrb	r3, [r3, #0]
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d14a      	bne.n	dca8 <atcab_random+0x178>
            break;

        // Check response size
        if (packet.rxsize < 4)
    dc12:	2308      	movs	r3, #8
    dc14:	18fb      	adds	r3, r7, r3
    dc16:	228a      	movs	r2, #138	; 0x8a
    dc18:	5a9b      	ldrh	r3, [r3, r2]
    dc1a:	2b03      	cmp	r3, #3
    dc1c:	d80f      	bhi.n	dc3e <atcab_random+0x10e>
        {
            if (packet.rxsize > 0)
    dc1e:	2308      	movs	r3, #8
    dc20:	18fb      	adds	r3, r7, r3
    dc22:	228a      	movs	r2, #138	; 0x8a
    dc24:	5a9b      	ldrh	r3, [r3, r2]
    dc26:	2b00      	cmp	r3, #0
    dc28:	d004      	beq.n	dc34 <atcab_random+0x104>
                status = ATCA_RX_FAIL;
    dc2a:	2397      	movs	r3, #151	; 0x97
    dc2c:	18fb      	adds	r3, r7, r3
    dc2e:	22e6      	movs	r2, #230	; 0xe6
    dc30:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    dc32:	e03c      	b.n	dcae <atcab_random+0x17e>
                status = ATCA_RX_NO_RESPONSE;
    dc34:	2397      	movs	r3, #151	; 0x97
    dc36:	18fb      	adds	r3, r7, r3
    dc38:	22e7      	movs	r2, #231	; 0xe7
    dc3a:	701a      	strb	r2, [r3, #0]
            break;
    dc3c:	e037      	b.n	dcae <atcab_random+0x17e>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    dc3e:	2397      	movs	r3, #151	; 0x97
    dc40:	18fc      	adds	r4, r7, r3
    dc42:	2308      	movs	r3, #8
    dc44:	18fb      	adds	r3, r7, r3
    dc46:	3306      	adds	r3, #6
    dc48:	0018      	movs	r0, r3
    dc4a:	4b26      	ldr	r3, [pc, #152]	; (dce4 <atcab_random+0x1b4>)
    dc4c:	4798      	blx	r3
    dc4e:	0003      	movs	r3, r0
    dc50:	7023      	strb	r3, [r4, #0]
    dc52:	2397      	movs	r3, #151	; 0x97
    dc54:	18fb      	adds	r3, r7, r3
    dc56:	781b      	ldrb	r3, [r3, #0]
    dc58:	2b00      	cmp	r3, #0
    dc5a:	d127      	bne.n	dcac <atcab_random+0x17c>
            break;

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    dc5c:	2308      	movs	r3, #8
    dc5e:	18fb      	adds	r3, r7, r3
    dc60:	228a      	movs	r2, #138	; 0x8a
    dc62:	5a9a      	ldrh	r2, [r3, r2]
    dc64:	2308      	movs	r3, #8
    dc66:	18fb      	adds	r3, r7, r3
    dc68:	799b      	ldrb	r3, [r3, #6]
    dc6a:	b29b      	uxth	r3, r3
    dc6c:	429a      	cmp	r2, r3
    dc6e:	d304      	bcc.n	dc7a <atcab_random+0x14a>
    dc70:	2308      	movs	r3, #8
    dc72:	18fb      	adds	r3, r7, r3
    dc74:	799b      	ldrb	r3, [r3, #6]
    dc76:	2b23      	cmp	r3, #35	; 0x23
    dc78:	d004      	beq.n	dc84 <atcab_random+0x154>
        {
            status = ATCA_RX_FAIL;
    dc7a:	2397      	movs	r3, #151	; 0x97
    dc7c:	18fb      	adds	r3, r7, r3
    dc7e:	22e6      	movs	r2, #230	; 0xe6
    dc80:	701a      	strb	r2, [r3, #0]
            break;
    dc82:	e014      	b.n	dcae <atcab_random+0x17e>
        }

        if (rand_out)
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d011      	beq.n	dcae <atcab_random+0x17e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    dc8a:	2308      	movs	r3, #8
    dc8c:	18fb      	adds	r3, r7, r3
    dc8e:	1dd9      	adds	r1, r3, #7
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	2220      	movs	r2, #32
    dc94:	0018      	movs	r0, r3
    dc96:	4b14      	ldr	r3, [pc, #80]	; (dce8 <atcab_random+0x1b8>)
    dc98:	4798      	blx	r3
    dc9a:	e008      	b.n	dcae <atcab_random+0x17e>
            break;
    dc9c:	46c0      	nop			; (mov r8, r8)
    dc9e:	e006      	b.n	dcae <atcab_random+0x17e>
            break;
    dca0:	46c0      	nop			; (mov r8, r8)
    dca2:	e004      	b.n	dcae <atcab_random+0x17e>
            break;
    dca4:	46c0      	nop			; (mov r8, r8)
    dca6:	e002      	b.n	dcae <atcab_random+0x17e>
            break;
    dca8:	46c0      	nop			; (mov r8, r8)
    dcaa:	e000      	b.n	dcae <atcab_random+0x17e>
            break;
    dcac:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    dcae:	4b0f      	ldr	r3, [pc, #60]	; (dcec <atcab_random+0x1bc>)
    dcb0:	4798      	blx	r3
    return status;
    dcb2:	2397      	movs	r3, #151	; 0x97
    dcb4:	18fb      	adds	r3, r7, r3
    dcb6:	781b      	ldrb	r3, [r3, #0]
}
    dcb8:	0018      	movs	r0, r3
    dcba:	46bd      	mov	sp, r7
    dcbc:	b027      	add	sp, #156	; 0x9c
    dcbe:	bd90      	pop	{r4, r7, pc}
    dcc0:	200015c8 	.word	0x200015c8
    dcc4:	200015cc 	.word	0x200015cc
    dcc8:	0000d151 	.word	0x0000d151
    dccc:	0000d2d9 	.word	0x0000d2d9
    dcd0:	0000d8e9 	.word	0x0000d8e9
    dcd4:	200015d0 	.word	0x200015d0
    dcd8:	0000d6bd 	.word	0x0000d6bd
    dcdc:	0000f595 	.word	0x0000f595
    dce0:	0000d6df 	.word	0x0000d6df
    dce4:	0000d499 	.word	0x0000d499
    dce8:	0001bab7 	.word	0x0001bab7
    dcec:	0000d979 	.word	0x0000d979

0000dcf0 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
    dcf0:	b590      	push	{r4, r7, lr}
    dcf2:	b0a9      	sub	sp, #164	; 0xa4
    dcf4:	af00      	add	r7, sp, #0
    dcf6:	60ba      	str	r2, [r7, #8]
    dcf8:	607b      	str	r3, [r7, #4]
    dcfa:	230f      	movs	r3, #15
    dcfc:	18fb      	adds	r3, r7, r3
    dcfe:	1c02      	adds	r2, r0, #0
    dd00:	701a      	strb	r2, [r3, #0]
    dd02:	230c      	movs	r3, #12
    dd04:	18fb      	adds	r3, r7, r3
    dd06:	1c0a      	adds	r2, r1, #0
    dd08:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    dd0a:	239c      	movs	r3, #156	; 0x9c
    dd0c:	18fb      	adds	r3, r7, r3
    dd0e:	2200      	movs	r2, #0
    dd10:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    dd12:	239f      	movs	r3, #159	; 0x9f
    dd14:	18fb      	adds	r3, r7, r3
    dd16:	22e1      	movs	r2, #225	; 0xe1
    dd18:	701a      	strb	r2, [r3, #0]

    if (!_gDevice)
    dd1a:	4b5f      	ldr	r3, [pc, #380]	; (de98 <atcab_genkey_base+0x1a8>)
    dd1c:	681b      	ldr	r3, [r3, #0]
    dd1e:	2b00      	cmp	r3, #0
    dd20:	d101      	bne.n	dd26 <atcab_genkey_base+0x36>
        return ATCA_GEN_FAIL;
    dd22:	23e1      	movs	r3, #225	; 0xe1
    dd24:	e0b4      	b.n	de90 <atcab_genkey_base+0x1a0>

    do
    {
        // Build GenKey command
        packet.param1 = mode;
    dd26:	2310      	movs	r3, #16
    dd28:	18fb      	adds	r3, r7, r3
    dd2a:	220f      	movs	r2, #15
    dd2c:	18ba      	adds	r2, r7, r2
    dd2e:	7812      	ldrb	r2, [r2, #0]
    dd30:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    dd32:	2310      	movs	r3, #16
    dd34:	18fb      	adds	r3, r7, r3
    dd36:	220c      	movs	r2, #12
    dd38:	18ba      	adds	r2, r7, r2
    dd3a:	8812      	ldrh	r2, [r2, #0]
    dd3c:	809a      	strh	r2, [r3, #4]
        if (other_data)
    dd3e:	68bb      	ldr	r3, [r7, #8]
    dd40:	2b00      	cmp	r3, #0
    dd42:	d007      	beq.n	dd54 <atcab_genkey_base+0x64>
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
    dd44:	68b9      	ldr	r1, [r7, #8]
    dd46:	2310      	movs	r3, #16
    dd48:	18fb      	adds	r3, r7, r3
    dd4a:	3306      	adds	r3, #6
    dd4c:	2203      	movs	r2, #3
    dd4e:	0018      	movs	r0, r3
    dd50:	4b52      	ldr	r3, [pc, #328]	; (de9c <atcab_genkey_base+0x1ac>)
    dd52:	4798      	blx	r3
        if ((status = atGenKey(_gCommandObj, &packet)) != ATCA_SUCCESS)
    dd54:	4b52      	ldr	r3, [pc, #328]	; (dea0 <atcab_genkey_base+0x1b0>)
    dd56:	681b      	ldr	r3, [r3, #0]
    dd58:	229f      	movs	r2, #159	; 0x9f
    dd5a:	18bc      	adds	r4, r7, r2
    dd5c:	2210      	movs	r2, #16
    dd5e:	18ba      	adds	r2, r7, r2
    dd60:	0011      	movs	r1, r2
    dd62:	0018      	movs	r0, r3
    dd64:	4b4f      	ldr	r3, [pc, #316]	; (dea4 <atcab_genkey_base+0x1b4>)
    dd66:	4798      	blx	r3
    dd68:	0003      	movs	r3, r0
    dd6a:	7023      	strb	r3, [r4, #0]
    dd6c:	239f      	movs	r3, #159	; 0x9f
    dd6e:	18fb      	adds	r3, r7, r3
    dd70:	781b      	ldrb	r3, [r3, #0]
    dd72:	2b00      	cmp	r3, #0
    dd74:	d000      	beq.n	dd78 <atcab_genkey_base+0x88>
    dd76:	e07d      	b.n	de74 <atcab_genkey_base+0x184>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_GENKEY);
    dd78:	4b49      	ldr	r3, [pc, #292]	; (dea0 <atcab_genkey_base+0x1b0>)
    dd7a:	681b      	ldr	r3, [r3, #0]
    dd7c:	229c      	movs	r2, #156	; 0x9c
    dd7e:	18bc      	adds	r4, r7, r2
    dd80:	2106      	movs	r1, #6
    dd82:	0018      	movs	r0, r3
    dd84:	4b48      	ldr	r3, [pc, #288]	; (dea8 <atcab_genkey_base+0x1b8>)
    dd86:	4798      	blx	r3
    dd88:	0003      	movs	r3, r0
    dd8a:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    dd8c:	239f      	movs	r3, #159	; 0x9f
    dd8e:	18fc      	adds	r4, r7, r3
    dd90:	4b46      	ldr	r3, [pc, #280]	; (deac <atcab_genkey_base+0x1bc>)
    dd92:	4798      	blx	r3
    dd94:	0003      	movs	r3, r0
    dd96:	7023      	strb	r3, [r4, #0]
    dd98:	239f      	movs	r3, #159	; 0x9f
    dd9a:	18fb      	adds	r3, r7, r3
    dd9c:	781b      	ldrb	r3, [r3, #0]
    dd9e:	2b00      	cmp	r3, #0
    dda0:	d16a      	bne.n	de78 <atcab_genkey_base+0x188>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    dda2:	4b43      	ldr	r3, [pc, #268]	; (deb0 <atcab_genkey_base+0x1c0>)
    dda4:	6818      	ldr	r0, [r3, #0]
    dda6:	2310      	movs	r3, #16
    dda8:	18fb      	adds	r3, r7, r3
    ddaa:	785b      	ldrb	r3, [r3, #1]
    ddac:	001a      	movs	r2, r3
    ddae:	239f      	movs	r3, #159	; 0x9f
    ddb0:	18fc      	adds	r4, r7, r3
    ddb2:	2310      	movs	r3, #16
    ddb4:	18fb      	adds	r3, r7, r3
    ddb6:	0019      	movs	r1, r3
    ddb8:	4b3e      	ldr	r3, [pc, #248]	; (deb4 <atcab_genkey_base+0x1c4>)
    ddba:	4798      	blx	r3
    ddbc:	0003      	movs	r3, r0
    ddbe:	7023      	strb	r3, [r4, #0]
    ddc0:	239f      	movs	r3, #159	; 0x9f
    ddc2:	18fb      	adds	r3, r7, r3
    ddc4:	781b      	ldrb	r3, [r3, #0]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d158      	bne.n	de7c <atcab_genkey_base+0x18c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    ddca:	239c      	movs	r3, #156	; 0x9c
    ddcc:	18fb      	adds	r3, r7, r3
    ddce:	881b      	ldrh	r3, [r3, #0]
    ddd0:	0018      	movs	r0, r3
    ddd2:	4b39      	ldr	r3, [pc, #228]	; (deb8 <atcab_genkey_base+0x1c8>)
    ddd4:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    ddd6:	4b36      	ldr	r3, [pc, #216]	; (deb0 <atcab_genkey_base+0x1c0>)
    ddd8:	6818      	ldr	r0, [r3, #0]
    ddda:	239f      	movs	r3, #159	; 0x9f
    dddc:	18fc      	adds	r4, r7, r3
    ddde:	2310      	movs	r3, #16
    dde0:	18fb      	adds	r3, r7, r3
    dde2:	338a      	adds	r3, #138	; 0x8a
    dde4:	001a      	movs	r2, r3
    dde6:	2310      	movs	r3, #16
    dde8:	18fb      	adds	r3, r7, r3
    ddea:	3306      	adds	r3, #6
    ddec:	0019      	movs	r1, r3
    ddee:	4b33      	ldr	r3, [pc, #204]	; (debc <atcab_genkey_base+0x1cc>)
    ddf0:	4798      	blx	r3
    ddf2:	0003      	movs	r3, r0
    ddf4:	7023      	strb	r3, [r4, #0]
    ddf6:	239f      	movs	r3, #159	; 0x9f
    ddf8:	18fb      	adds	r3, r7, r3
    ddfa:	781b      	ldrb	r3, [r3, #0]
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d13f      	bne.n	de80 <atcab_genkey_base+0x190>
            break;

        // Check response size
        if (packet.rxsize < 4)
    de00:	2310      	movs	r3, #16
    de02:	18fb      	adds	r3, r7, r3
    de04:	228a      	movs	r2, #138	; 0x8a
    de06:	5a9b      	ldrh	r3, [r3, r2]
    de08:	2b03      	cmp	r3, #3
    de0a:	d80f      	bhi.n	de2c <atcab_genkey_base+0x13c>
        {
            if (packet.rxsize > 0)
    de0c:	2310      	movs	r3, #16
    de0e:	18fb      	adds	r3, r7, r3
    de10:	228a      	movs	r2, #138	; 0x8a
    de12:	5a9b      	ldrh	r3, [r3, r2]
    de14:	2b00      	cmp	r3, #0
    de16:	d004      	beq.n	de22 <atcab_genkey_base+0x132>
                status = ATCA_RX_FAIL;
    de18:	239f      	movs	r3, #159	; 0x9f
    de1a:	18fb      	adds	r3, r7, r3
    de1c:	22e6      	movs	r2, #230	; 0xe6
    de1e:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    de20:	e031      	b.n	de86 <atcab_genkey_base+0x196>
                status = ATCA_RX_NO_RESPONSE;
    de22:	239f      	movs	r3, #159	; 0x9f
    de24:	18fb      	adds	r3, r7, r3
    de26:	22e7      	movs	r2, #231	; 0xe7
    de28:	701a      	strb	r2, [r3, #0]
            break;
    de2a:	e02c      	b.n	de86 <atcab_genkey_base+0x196>
        }

        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    de2c:	239f      	movs	r3, #159	; 0x9f
    de2e:	18fc      	adds	r4, r7, r3
    de30:	2310      	movs	r3, #16
    de32:	18fb      	adds	r3, r7, r3
    de34:	3306      	adds	r3, #6
    de36:	0018      	movs	r0, r3
    de38:	4b21      	ldr	r3, [pc, #132]	; (dec0 <atcab_genkey_base+0x1d0>)
    de3a:	4798      	blx	r3
    de3c:	0003      	movs	r3, r0
    de3e:	7023      	strb	r3, [r4, #0]
    de40:	239f      	movs	r3, #159	; 0x9f
    de42:	18fb      	adds	r3, r7, r3
    de44:	781b      	ldrb	r3, [r3, #0]
    de46:	2b00      	cmp	r3, #0
    de48:	d11c      	bne.n	de84 <atcab_genkey_base+0x194>
            break;

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
    de4a:	687b      	ldr	r3, [r7, #4]
    de4c:	2b00      	cmp	r3, #0
    de4e:	d01a      	beq.n	de86 <atcab_genkey_base+0x196>
    de50:	2310      	movs	r3, #16
    de52:	18fb      	adds	r3, r7, r3
    de54:	799b      	ldrb	r3, [r3, #6]
    de56:	2b04      	cmp	r3, #4
    de58:	d915      	bls.n	de86 <atcab_genkey_base+0x196>
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    de5a:	2310      	movs	r3, #16
    de5c:	18fb      	adds	r3, r7, r3
    de5e:	799b      	ldrb	r3, [r3, #6]
    de60:	3b03      	subs	r3, #3
    de62:	001a      	movs	r2, r3
    de64:	2310      	movs	r3, #16
    de66:	18fb      	adds	r3, r7, r3
    de68:	1dd9      	adds	r1, r3, #7
    de6a:	687b      	ldr	r3, [r7, #4]
    de6c:	0018      	movs	r0, r3
    de6e:	4b0b      	ldr	r3, [pc, #44]	; (de9c <atcab_genkey_base+0x1ac>)
    de70:	4798      	blx	r3
    de72:	e008      	b.n	de86 <atcab_genkey_base+0x196>
            break;
    de74:	46c0      	nop			; (mov r8, r8)
    de76:	e006      	b.n	de86 <atcab_genkey_base+0x196>
            break;
    de78:	46c0      	nop			; (mov r8, r8)
    de7a:	e004      	b.n	de86 <atcab_genkey_base+0x196>
            break;
    de7c:	46c0      	nop			; (mov r8, r8)
    de7e:	e002      	b.n	de86 <atcab_genkey_base+0x196>
            break;
    de80:	46c0      	nop			; (mov r8, r8)
    de82:	e000      	b.n	de86 <atcab_genkey_base+0x196>
            break;
    de84:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    de86:	4b0f      	ldr	r3, [pc, #60]	; (dec4 <atcab_genkey_base+0x1d4>)
    de88:	4798      	blx	r3
    return status;
    de8a:	239f      	movs	r3, #159	; 0x9f
    de8c:	18fb      	adds	r3, r7, r3
    de8e:	781b      	ldrb	r3, [r3, #0]
}
    de90:	0018      	movs	r0, r3
    de92:	46bd      	mov	sp, r7
    de94:	b029      	add	sp, #164	; 0xa4
    de96:	bd90      	pop	{r4, r7, pc}
    de98:	200015c8 	.word	0x200015c8
    de9c:	0001bab7 	.word	0x0001bab7
    dea0:	200015cc 	.word	0x200015cc
    dea4:	0000d065 	.word	0x0000d065
    dea8:	0000d2d9 	.word	0x0000d2d9
    deac:	0000d8e9 	.word	0x0000d8e9
    deb0:	200015d0 	.word	0x200015d0
    deb4:	0000d6bd 	.word	0x0000d6bd
    deb8:	0000f595 	.word	0x0000f595
    debc:	0000d6df 	.word	0x0000d6df
    dec0:	0000d499 	.word	0x0000d499
    dec4:	0000d979 	.word	0x0000d979

0000dec8 <atcab_genkey>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    dec8:	b590      	push	{r4, r7, lr}
    deca:	b083      	sub	sp, #12
    decc:	af00      	add	r7, sp, #0
    dece:	0002      	movs	r2, r0
    ded0:	6039      	str	r1, [r7, #0]
    ded2:	1dbb      	adds	r3, r7, #6
    ded4:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    ded6:	683a      	ldr	r2, [r7, #0]
    ded8:	1dbb      	adds	r3, r7, #6
    deda:	8819      	ldrh	r1, [r3, #0]
    dedc:	0013      	movs	r3, r2
    dede:	2200      	movs	r2, #0
    dee0:	2004      	movs	r0, #4
    dee2:	4c03      	ldr	r4, [pc, #12]	; (def0 <atcab_genkey+0x28>)
    dee4:	47a0      	blx	r4
    dee6:	0003      	movs	r3, r0
}
    dee8:	0018      	movs	r0, r3
    deea:	46bd      	mov	sp, r7
    deec:	b003      	add	sp, #12
    deee:	bd90      	pop	{r4, r7, pc}
    def0:	0000dcf1 	.word	0x0000dcf1

0000def4 <atcab_challenge>:
/** \brief send a challenge to the device (a pass-through nonce)
 *  \param[in] challenge - pointer to 32 bytes of data which will be sent as the challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_challenge(const uint8_t *challenge)
{
    def4:	b590      	push	{r4, r7, lr}
    def6:	b0a7      	sub	sp, #156	; 0x9c
    def8:	af00      	add	r7, sp, #0
    defa:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    defc:	2397      	movs	r3, #151	; 0x97
    defe:	18fb      	adds	r3, r7, r3
    df00:	22e1      	movs	r2, #225	; 0xe1
    df02:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    df04:	2394      	movs	r3, #148	; 0x94
    df06:	18fb      	adds	r3, r7, r3
    df08:	2200      	movs	r2, #0
    df0a:	801a      	strh	r2, [r3, #0]

    do
    {
        // Verify the inputs
        if (challenge == NULL)
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	2b00      	cmp	r3, #0
    df10:	d104      	bne.n	df1c <atcab_challenge+0x28>
        {
            status = ATCA_BAD_PARAM;
    df12:	2397      	movs	r3, #151	; 0x97
    df14:	18fb      	adds	r3, r7, r3
    df16:	22e2      	movs	r2, #226	; 0xe2
    df18:	701a      	strb	r2, [r3, #0]
            break;
    df1a:	e08c      	b.n	e036 <atcab_challenge+0x142>
        }

        // build a nonce command (pass through mode)
        packet.param1 = NONCE_MODE_PASSTHROUGH;
    df1c:	2308      	movs	r3, #8
    df1e:	18fb      	adds	r3, r7, r3
    df20:	2203      	movs	r2, #3
    df22:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
    df24:	2308      	movs	r3, #8
    df26:	18fb      	adds	r3, r7, r3
    df28:	2200      	movs	r2, #0
    df2a:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, challenge, 32);
    df2c:	6879      	ldr	r1, [r7, #4]
    df2e:	2308      	movs	r3, #8
    df30:	18fb      	adds	r3, r7, r3
    df32:	3306      	adds	r3, #6
    df34:	2220      	movs	r2, #32
    df36:	0018      	movs	r0, r3
    df38:	4b43      	ldr	r3, [pc, #268]	; (e048 <atcab_challenge+0x154>)
    df3a:	4798      	blx	r3

        if ((status = atNonce(_gCommandObj, &packet)) != ATCA_SUCCESS)
    df3c:	4b43      	ldr	r3, [pc, #268]	; (e04c <atcab_challenge+0x158>)
    df3e:	681b      	ldr	r3, [r3, #0]
    df40:	2297      	movs	r2, #151	; 0x97
    df42:	18bc      	adds	r4, r7, r2
    df44:	2208      	movs	r2, #8
    df46:	18ba      	adds	r2, r7, r2
    df48:	0011      	movs	r1, r2
    df4a:	0018      	movs	r0, r3
    df4c:	4b40      	ldr	r3, [pc, #256]	; (e050 <atcab_challenge+0x15c>)
    df4e:	4798      	blx	r3
    df50:	0003      	movs	r3, r0
    df52:	7023      	strb	r3, [r4, #0]
    df54:	2397      	movs	r3, #151	; 0x97
    df56:	18fb      	adds	r3, r7, r3
    df58:	781b      	ldrb	r3, [r3, #0]
    df5a:	2b00      	cmp	r3, #0
    df5c:	d164      	bne.n	e028 <atcab_challenge+0x134>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_NONCE);
    df5e:	4b3b      	ldr	r3, [pc, #236]	; (e04c <atcab_challenge+0x158>)
    df60:	681b      	ldr	r3, [r3, #0]
    df62:	2294      	movs	r2, #148	; 0x94
    df64:	18bc      	adds	r4, r7, r2
    df66:	210b      	movs	r1, #11
    df68:	0018      	movs	r0, r3
    df6a:	4b3a      	ldr	r3, [pc, #232]	; (e054 <atcab_challenge+0x160>)
    df6c:	4798      	blx	r3
    df6e:	0003      	movs	r3, r0
    df70:	8023      	strh	r3, [r4, #0]

        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    df72:	2397      	movs	r3, #151	; 0x97
    df74:	18fc      	adds	r4, r7, r3
    df76:	4b38      	ldr	r3, [pc, #224]	; (e058 <atcab_challenge+0x164>)
    df78:	4798      	blx	r3
    df7a:	0003      	movs	r3, r0
    df7c:	7023      	strb	r3, [r4, #0]
    df7e:	2397      	movs	r3, #151	; 0x97
    df80:	18fb      	adds	r3, r7, r3
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	2b00      	cmp	r3, #0
    df86:	d151      	bne.n	e02c <atcab_challenge+0x138>
            break;

        // send the command
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    df88:	4b34      	ldr	r3, [pc, #208]	; (e05c <atcab_challenge+0x168>)
    df8a:	6818      	ldr	r0, [r3, #0]
    df8c:	2308      	movs	r3, #8
    df8e:	18fb      	adds	r3, r7, r3
    df90:	785b      	ldrb	r3, [r3, #1]
    df92:	001a      	movs	r2, r3
    df94:	2397      	movs	r3, #151	; 0x97
    df96:	18fc      	adds	r4, r7, r3
    df98:	2308      	movs	r3, #8
    df9a:	18fb      	adds	r3, r7, r3
    df9c:	0019      	movs	r1, r3
    df9e:	4b30      	ldr	r3, [pc, #192]	; (e060 <atcab_challenge+0x16c>)
    dfa0:	4798      	blx	r3
    dfa2:	0003      	movs	r3, r0
    dfa4:	7023      	strb	r3, [r4, #0]
    dfa6:	2397      	movs	r3, #151	; 0x97
    dfa8:	18fb      	adds	r3, r7, r3
    dfaa:	781b      	ldrb	r3, [r3, #0]
    dfac:	2b00      	cmp	r3, #0
    dfae:	d13f      	bne.n	e030 <atcab_challenge+0x13c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    dfb0:	2394      	movs	r3, #148	; 0x94
    dfb2:	18fb      	adds	r3, r7, r3
    dfb4:	881b      	ldrh	r3, [r3, #0]
    dfb6:	0018      	movs	r0, r3
    dfb8:	4b2a      	ldr	r3, [pc, #168]	; (e064 <atcab_challenge+0x170>)
    dfba:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    dfbc:	4b27      	ldr	r3, [pc, #156]	; (e05c <atcab_challenge+0x168>)
    dfbe:	6818      	ldr	r0, [r3, #0]
    dfc0:	2397      	movs	r3, #151	; 0x97
    dfc2:	18fc      	adds	r4, r7, r3
    dfc4:	2308      	movs	r3, #8
    dfc6:	18fb      	adds	r3, r7, r3
    dfc8:	338a      	adds	r3, #138	; 0x8a
    dfca:	001a      	movs	r2, r3
    dfcc:	2308      	movs	r3, #8
    dfce:	18fb      	adds	r3, r7, r3
    dfd0:	3306      	adds	r3, #6
    dfd2:	0019      	movs	r1, r3
    dfd4:	4b24      	ldr	r3, [pc, #144]	; (e068 <atcab_challenge+0x174>)
    dfd6:	4798      	blx	r3
    dfd8:	0003      	movs	r3, r0
    dfda:	7023      	strb	r3, [r4, #0]
    dfdc:	2397      	movs	r3, #151	; 0x97
    dfde:	18fb      	adds	r3, r7, r3
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	d126      	bne.n	e034 <atcab_challenge+0x140>
            break;

        // Check response size
        if (packet.rxsize < 4)
    dfe6:	2308      	movs	r3, #8
    dfe8:	18fb      	adds	r3, r7, r3
    dfea:	228a      	movs	r2, #138	; 0x8a
    dfec:	5a9b      	ldrh	r3, [r3, r2]
    dfee:	2b03      	cmp	r3, #3
    dff0:	d80f      	bhi.n	e012 <atcab_challenge+0x11e>
        {
            if (packet.rxsize > 0)
    dff2:	2308      	movs	r3, #8
    dff4:	18fb      	adds	r3, r7, r3
    dff6:	228a      	movs	r2, #138	; 0x8a
    dff8:	5a9b      	ldrh	r3, [r3, r2]
    dffa:	2b00      	cmp	r3, #0
    dffc:	d004      	beq.n	e008 <atcab_challenge+0x114>
                status = ATCA_RX_FAIL;
    dffe:	2397      	movs	r3, #151	; 0x97
    e000:	18fb      	adds	r3, r7, r3
    e002:	22e6      	movs	r2, #230	; 0xe6
    e004:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    e006:	e016      	b.n	e036 <atcab_challenge+0x142>
                status = ATCA_RX_NO_RESPONSE;
    e008:	2397      	movs	r3, #151	; 0x97
    e00a:	18fb      	adds	r3, r7, r3
    e00c:	22e7      	movs	r2, #231	; 0xe7
    e00e:	701a      	strb	r2, [r3, #0]
            break;
    e010:	e011      	b.n	e036 <atcab_challenge+0x142>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    e012:	2397      	movs	r3, #151	; 0x97
    e014:	18fc      	adds	r4, r7, r3
    e016:	2308      	movs	r3, #8
    e018:	18fb      	adds	r3, r7, r3
    e01a:	3306      	adds	r3, #6
    e01c:	0018      	movs	r0, r3
    e01e:	4b13      	ldr	r3, [pc, #76]	; (e06c <atcab_challenge+0x178>)
    e020:	4798      	blx	r3
    e022:	0003      	movs	r3, r0
    e024:	7023      	strb	r3, [r4, #0]
    e026:	e006      	b.n	e036 <atcab_challenge+0x142>
            break;
    e028:	46c0      	nop			; (mov r8, r8)
    e02a:	e004      	b.n	e036 <atcab_challenge+0x142>
            break;
    e02c:	46c0      	nop			; (mov r8, r8)
    e02e:	e002      	b.n	e036 <atcab_challenge+0x142>
            break;
    e030:	46c0      	nop			; (mov r8, r8)
    e032:	e000      	b.n	e036 <atcab_challenge+0x142>
            break;
    e034:	46c0      	nop			; (mov r8, r8)
            break;

    }
    while (0);

    _atcab_exit();
    e036:	4b0e      	ldr	r3, [pc, #56]	; (e070 <atcab_challenge+0x17c>)
    e038:	4798      	blx	r3
    return status;
    e03a:	2397      	movs	r3, #151	; 0x97
    e03c:	18fb      	adds	r3, r7, r3
    e03e:	781b      	ldrb	r3, [r3, #0]
}
    e040:	0018      	movs	r0, r3
    e042:	46bd      	mov	sp, r7
    e044:	b027      	add	sp, #156	; 0x9c
    e046:	bd90      	pop	{r4, r7, pc}
    e048:	0001bab7 	.word	0x0001bab7
    e04c:	200015cc 	.word	0x200015cc
    e050:	0000d0e9 	.word	0x0000d0e9
    e054:	0000d2d9 	.word	0x0000d2d9
    e058:	0000d8e9 	.word	0x0000d8e9
    e05c:	200015d0 	.word	0x200015d0
    e060:	0000d6bd 	.word	0x0000d6bd
    e064:	0000f595 	.word	0x0000f595
    e068:	0000d6df 	.word	0x0000d6df
    e06c:	0000d499 	.word	0x0000d499
    e070:	0000d979 	.word	0x0000d979

0000e074 <atcab_read_serial_number>:
/** \brief read the serial number of the device
 *  \param[out] serial_number  pointer to space to receive serial number. This space should be 9 bytes long
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
    e074:	b5b0      	push	{r4, r5, r7, lr}
    e076:	b08e      	sub	sp, #56	; 0x38
    e078:	af02      	add	r7, sp, #8
    e07a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    e07c:	232f      	movs	r3, #47	; 0x2f
    e07e:	18fb      	adds	r3, r7, r3
    e080:	22e1      	movs	r2, #225	; 0xe1
    e082:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	2b00      	cmp	r3, #0
    e088:	d101      	bne.n	e08e <atcab_read_serial_number+0x1a>
        return ATCA_BAD_PARAM;
    e08a:	23e2      	movs	r3, #226	; 0xe2
    e08c:	e028      	b.n	e0e0 <atcab_read_serial_number+0x6c>

    do
    {
        if ( (status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    e08e:	232f      	movs	r3, #47	; 0x2f
    e090:	18fc      	adds	r4, r7, r3
    e092:	2320      	movs	r3, #32
    e094:	9301      	str	r3, [sp, #4]
    e096:	230c      	movs	r3, #12
    e098:	18fb      	adds	r3, r7, r3
    e09a:	9300      	str	r3, [sp, #0]
    e09c:	2300      	movs	r3, #0
    e09e:	2200      	movs	r2, #0
    e0a0:	2100      	movs	r1, #0
    e0a2:	2000      	movs	r0, #0
    e0a4:	4d10      	ldr	r5, [pc, #64]	; (e0e8 <atcab_read_serial_number+0x74>)
    e0a6:	47a8      	blx	r5
    e0a8:	0003      	movs	r3, r0
    e0aa:	7023      	strb	r3, [r4, #0]
    e0ac:	232f      	movs	r3, #47	; 0x2f
    e0ae:	18fb      	adds	r3, r7, r3
    e0b0:	781b      	ldrb	r3, [r3, #0]
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d110      	bne.n	e0d8 <atcab_read_serial_number+0x64>
            break;
        memcpy(&serial_number[0], &read_buf[0], 4);
    e0b6:	230c      	movs	r3, #12
    e0b8:	18f9      	adds	r1, r7, r3
    e0ba:	687b      	ldr	r3, [r7, #4]
    e0bc:	2204      	movs	r2, #4
    e0be:	0018      	movs	r0, r3
    e0c0:	4b0a      	ldr	r3, [pc, #40]	; (e0ec <atcab_read_serial_number+0x78>)
    e0c2:	4798      	blx	r3
        memcpy(&serial_number[4], &read_buf[8], 5);
    e0c4:	687b      	ldr	r3, [r7, #4]
    e0c6:	1d18      	adds	r0, r3, #4
    e0c8:	230c      	movs	r3, #12
    e0ca:	18fb      	adds	r3, r7, r3
    e0cc:	3308      	adds	r3, #8
    e0ce:	2205      	movs	r2, #5
    e0d0:	0019      	movs	r1, r3
    e0d2:	4b06      	ldr	r3, [pc, #24]	; (e0ec <atcab_read_serial_number+0x78>)
    e0d4:	4798      	blx	r3
    e0d6:	e000      	b.n	e0da <atcab_read_serial_number+0x66>
            break;
    e0d8:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
    e0da:	232f      	movs	r3, #47	; 0x2f
    e0dc:	18fb      	adds	r3, r7, r3
    e0de:	781b      	ldrb	r3, [r3, #0]
}
    e0e0:	0018      	movs	r0, r3
    e0e2:	46bd      	mov	sp, r7
    e0e4:	b00c      	add	sp, #48	; 0x30
    e0e6:	bdb0      	pop	{r4, r5, r7, pc}
    e0e8:	0000e6f5 	.word	0x0000e6f5
    e0ec:	0001bab7 	.word	0x0001bab7

0000e0f0 <atcab_verify>:
 *                        other modes.
 *
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_verify(uint8_t mode, uint16_t key_id, const uint8_t* signature, const uint8_t* public_key, const uint8_t* other_data)
{
    e0f0:	b590      	push	{r4, r7, lr}
    e0f2:	b0a9      	sub	sp, #164	; 0xa4
    e0f4:	af00      	add	r7, sp, #0
    e0f6:	60ba      	str	r2, [r7, #8]
    e0f8:	607b      	str	r3, [r7, #4]
    e0fa:	230f      	movs	r3, #15
    e0fc:	18fb      	adds	r3, r7, r3
    e0fe:	1c02      	adds	r2, r0, #0
    e100:	701a      	strb	r2, [r3, #0]
    e102:	230c      	movs	r3, #12
    e104:	18fb      	adds	r3, r7, r3
    e106:	1c0a      	adds	r2, r1, #0
    e108:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    e10a:	239f      	movs	r3, #159	; 0x9f
    e10c:	18fb      	adds	r3, r7, r3
    e10e:	22e1      	movs	r2, #225	; 0xe1
    e110:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    e112:	239c      	movs	r3, #156	; 0x9c
    e114:	18fb      	adds	r3, r7, r3
    e116:	2200      	movs	r2, #0
    e118:	801a      	strh	r2, [r3, #0]

    if (!_gDevice)
    e11a:	4b6c      	ldr	r3, [pc, #432]	; (e2cc <atcab_verify+0x1dc>)
    e11c:	681b      	ldr	r3, [r3, #0]
    e11e:	2b00      	cmp	r3, #0
    e120:	d101      	bne.n	e126 <atcab_verify+0x36>
        return ATCA_GEN_FAIL;
    e122:	23e1      	movs	r3, #225	; 0xe1
    e124:	e0cd      	b.n	e2c2 <atcab_verify+0x1d2>

    do
    {
        if (signature == NULL)
    e126:	68bb      	ldr	r3, [r7, #8]
    e128:	2b00      	cmp	r3, #0
    e12a:	d101      	bne.n	e130 <atcab_verify+0x40>
            return ATCA_BAD_PARAM;
    e12c:	23e2      	movs	r3, #226	; 0xe2
    e12e:	e0c8      	b.n	e2c2 <atcab_verify+0x1d2>
        if (mode == VERIFY_MODE_EXTERNAL && public_key == NULL)
    e130:	230f      	movs	r3, #15
    e132:	18fb      	adds	r3, r7, r3
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	2b02      	cmp	r3, #2
    e138:	d104      	bne.n	e144 <atcab_verify+0x54>
    e13a:	687b      	ldr	r3, [r7, #4]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d101      	bne.n	e144 <atcab_verify+0x54>
            return ATCA_BAD_PARAM;
    e140:	23e2      	movs	r3, #226	; 0xe2
    e142:	e0be      	b.n	e2c2 <atcab_verify+0x1d2>
        if (mode == VERIFY_MODE_VALIDATE && other_data == NULL)
    e144:	230f      	movs	r3, #15
    e146:	18fb      	adds	r3, r7, r3
    e148:	781b      	ldrb	r3, [r3, #0]
    e14a:	2b03      	cmp	r3, #3
    e14c:	d106      	bne.n	e15c <atcab_verify+0x6c>
    e14e:	23b0      	movs	r3, #176	; 0xb0
    e150:	18fb      	adds	r3, r7, r3
    e152:	681b      	ldr	r3, [r3, #0]
    e154:	2b00      	cmp	r3, #0
    e156:	d101      	bne.n	e15c <atcab_verify+0x6c>
            return ATCA_BAD_PARAM;
    e158:	23e2      	movs	r3, #226	; 0xe2
    e15a:	e0b2      	b.n	e2c2 <atcab_verify+0x1d2>

        // Build the verify command
        packet.param1 = mode;
    e15c:	2310      	movs	r3, #16
    e15e:	18fb      	adds	r3, r7, r3
    e160:	220f      	movs	r2, #15
    e162:	18ba      	adds	r2, r7, r2
    e164:	7812      	ldrb	r2, [r2, #0]
    e166:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    e168:	2310      	movs	r3, #16
    e16a:	18fb      	adds	r3, r7, r3
    e16c:	220c      	movs	r2, #12
    e16e:	18ba      	adds	r2, r7, r2
    e170:	8812      	ldrh	r2, [r2, #0]
    e172:	809a      	strh	r2, [r3, #4]
        memcpy(&packet.data[0], signature, ATCA_SIG_SIZE);
    e174:	68b9      	ldr	r1, [r7, #8]
    e176:	2310      	movs	r3, #16
    e178:	18fb      	adds	r3, r7, r3
    e17a:	3306      	adds	r3, #6
    e17c:	2240      	movs	r2, #64	; 0x40
    e17e:	0018      	movs	r0, r3
    e180:	4b53      	ldr	r3, [pc, #332]	; (e2d0 <atcab_verify+0x1e0>)
    e182:	4798      	blx	r3
        if (mode == VERIFY_MODE_EXTERNAL)
    e184:	230f      	movs	r3, #15
    e186:	18fb      	adds	r3, r7, r3
    e188:	781b      	ldrb	r3, [r3, #0]
    e18a:	2b02      	cmp	r3, #2
    e18c:	d108      	bne.n	e1a0 <atcab_verify+0xb0>
            memcpy(&packet.data[ATCA_SIG_SIZE], public_key, ATCA_PUB_KEY_SIZE);
    e18e:	6879      	ldr	r1, [r7, #4]
    e190:	2310      	movs	r3, #16
    e192:	18fb      	adds	r3, r7, r3
    e194:	3346      	adds	r3, #70	; 0x46
    e196:	2240      	movs	r2, #64	; 0x40
    e198:	0018      	movs	r0, r3
    e19a:	4b4d      	ldr	r3, [pc, #308]	; (e2d0 <atcab_verify+0x1e0>)
    e19c:	4798      	blx	r3
    e19e:	e00e      	b.n	e1be <atcab_verify+0xce>
        else if (other_data)
    e1a0:	23b0      	movs	r3, #176	; 0xb0
    e1a2:	18fb      	adds	r3, r7, r3
    e1a4:	681b      	ldr	r3, [r3, #0]
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d009      	beq.n	e1be <atcab_verify+0xce>
            memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);
    e1aa:	23b0      	movs	r3, #176	; 0xb0
    e1ac:	18fb      	adds	r3, r7, r3
    e1ae:	6819      	ldr	r1, [r3, #0]
    e1b0:	2310      	movs	r3, #16
    e1b2:	18fb      	adds	r3, r7, r3
    e1b4:	3346      	adds	r3, #70	; 0x46
    e1b6:	2213      	movs	r2, #19
    e1b8:	0018      	movs	r0, r3
    e1ba:	4b45      	ldr	r3, [pc, #276]	; (e2d0 <atcab_verify+0x1e0>)
    e1bc:	4798      	blx	r3

        if ( (status = atVerify(_gCommandObj, &packet)) != ATCA_SUCCESS)
    e1be:	4b45      	ldr	r3, [pc, #276]	; (e2d4 <atcab_verify+0x1e4>)
    e1c0:	681b      	ldr	r3, [r3, #0]
    e1c2:	229f      	movs	r2, #159	; 0x9f
    e1c4:	18bc      	adds	r4, r7, r2
    e1c6:	2210      	movs	r2, #16
    e1c8:	18ba      	adds	r2, r7, r2
    e1ca:	0011      	movs	r1, r2
    e1cc:	0018      	movs	r0, r3
    e1ce:	4b42      	ldr	r3, [pc, #264]	; (e2d8 <atcab_verify+0x1e8>)
    e1d0:	4798      	blx	r3
    e1d2:	0003      	movs	r3, r0
    e1d4:	7023      	strb	r3, [r4, #0]
    e1d6:	239f      	movs	r3, #159	; 0x9f
    e1d8:	18fb      	adds	r3, r7, r3
    e1da:	781b      	ldrb	r3, [r3, #0]
    e1dc:	2b00      	cmp	r3, #0
    e1de:	d164      	bne.n	e2aa <atcab_verify+0x1ba>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_VERIFY);
    e1e0:	4b3c      	ldr	r3, [pc, #240]	; (e2d4 <atcab_verify+0x1e4>)
    e1e2:	681b      	ldr	r3, [r3, #0]
    e1e4:	229c      	movs	r2, #156	; 0x9c
    e1e6:	18bc      	adds	r4, r7, r2
    e1e8:	2113      	movs	r1, #19
    e1ea:	0018      	movs	r0, r3
    e1ec:	4b3b      	ldr	r3, [pc, #236]	; (e2dc <atcab_verify+0x1ec>)
    e1ee:	4798      	blx	r3
    e1f0:	0003      	movs	r3, r0
    e1f2:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    e1f4:	239f      	movs	r3, #159	; 0x9f
    e1f6:	18fc      	adds	r4, r7, r3
    e1f8:	4b39      	ldr	r3, [pc, #228]	; (e2e0 <atcab_verify+0x1f0>)
    e1fa:	4798      	blx	r3
    e1fc:	0003      	movs	r3, r0
    e1fe:	7023      	strb	r3, [r4, #0]
    e200:	239f      	movs	r3, #159	; 0x9f
    e202:	18fb      	adds	r3, r7, r3
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	2b00      	cmp	r3, #0
    e208:	d151      	bne.n	e2ae <atcab_verify+0x1be>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    e20a:	4b36      	ldr	r3, [pc, #216]	; (e2e4 <atcab_verify+0x1f4>)
    e20c:	6818      	ldr	r0, [r3, #0]
    e20e:	2310      	movs	r3, #16
    e210:	18fb      	adds	r3, r7, r3
    e212:	785b      	ldrb	r3, [r3, #1]
    e214:	001a      	movs	r2, r3
    e216:	239f      	movs	r3, #159	; 0x9f
    e218:	18fc      	adds	r4, r7, r3
    e21a:	2310      	movs	r3, #16
    e21c:	18fb      	adds	r3, r7, r3
    e21e:	0019      	movs	r1, r3
    e220:	4b31      	ldr	r3, [pc, #196]	; (e2e8 <atcab_verify+0x1f8>)
    e222:	4798      	blx	r3
    e224:	0003      	movs	r3, r0
    e226:	7023      	strb	r3, [r4, #0]
    e228:	239f      	movs	r3, #159	; 0x9f
    e22a:	18fb      	adds	r3, r7, r3
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	2b00      	cmp	r3, #0
    e230:	d13f      	bne.n	e2b2 <atcab_verify+0x1c2>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    e232:	239c      	movs	r3, #156	; 0x9c
    e234:	18fb      	adds	r3, r7, r3
    e236:	881b      	ldrh	r3, [r3, #0]
    e238:	0018      	movs	r0, r3
    e23a:	4b2c      	ldr	r3, [pc, #176]	; (e2ec <atcab_verify+0x1fc>)
    e23c:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    e23e:	4b29      	ldr	r3, [pc, #164]	; (e2e4 <atcab_verify+0x1f4>)
    e240:	6818      	ldr	r0, [r3, #0]
    e242:	239f      	movs	r3, #159	; 0x9f
    e244:	18fc      	adds	r4, r7, r3
    e246:	2310      	movs	r3, #16
    e248:	18fb      	adds	r3, r7, r3
    e24a:	338a      	adds	r3, #138	; 0x8a
    e24c:	001a      	movs	r2, r3
    e24e:	2310      	movs	r3, #16
    e250:	18fb      	adds	r3, r7, r3
    e252:	3306      	adds	r3, #6
    e254:	0019      	movs	r1, r3
    e256:	4b26      	ldr	r3, [pc, #152]	; (e2f0 <atcab_verify+0x200>)
    e258:	4798      	blx	r3
    e25a:	0003      	movs	r3, r0
    e25c:	7023      	strb	r3, [r4, #0]
    e25e:	239f      	movs	r3, #159	; 0x9f
    e260:	18fb      	adds	r3, r7, r3
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	2b00      	cmp	r3, #0
    e266:	d126      	bne.n	e2b6 <atcab_verify+0x1c6>
            break;

        // Check response size
        if (packet.rxsize < 4)
    e268:	2310      	movs	r3, #16
    e26a:	18fb      	adds	r3, r7, r3
    e26c:	228a      	movs	r2, #138	; 0x8a
    e26e:	5a9b      	ldrh	r3, [r3, r2]
    e270:	2b03      	cmp	r3, #3
    e272:	d80f      	bhi.n	e294 <atcab_verify+0x1a4>
        {
            if (packet.rxsize > 0)
    e274:	2310      	movs	r3, #16
    e276:	18fb      	adds	r3, r7, r3
    e278:	228a      	movs	r2, #138	; 0x8a
    e27a:	5a9b      	ldrh	r3, [r3, r2]
    e27c:	2b00      	cmp	r3, #0
    e27e:	d004      	beq.n	e28a <atcab_verify+0x19a>
                status = ATCA_RX_FAIL;
    e280:	239f      	movs	r3, #159	; 0x9f
    e282:	18fb      	adds	r3, r7, r3
    e284:	22e6      	movs	r2, #230	; 0xe6
    e286:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    e288:	e016      	b.n	e2b8 <atcab_verify+0x1c8>
                status = ATCA_RX_NO_RESPONSE;
    e28a:	239f      	movs	r3, #159	; 0x9f
    e28c:	18fb      	adds	r3, r7, r3
    e28e:	22e7      	movs	r2, #231	; 0xe7
    e290:	701a      	strb	r2, [r3, #0]
            break;
    e292:	e011      	b.n	e2b8 <atcab_verify+0x1c8>
        }

        status = isATCAError(packet.data);
    e294:	239f      	movs	r3, #159	; 0x9f
    e296:	18fc      	adds	r4, r7, r3
    e298:	2310      	movs	r3, #16
    e29a:	18fb      	adds	r3, r7, r3
    e29c:	3306      	adds	r3, #6
    e29e:	0018      	movs	r0, r3
    e2a0:	4b14      	ldr	r3, [pc, #80]	; (e2f4 <atcab_verify+0x204>)
    e2a2:	4798      	blx	r3
    e2a4:	0003      	movs	r3, r0
    e2a6:	7023      	strb	r3, [r4, #0]
    e2a8:	e006      	b.n	e2b8 <atcab_verify+0x1c8>
            break;
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	e004      	b.n	e2b8 <atcab_verify+0x1c8>
            break;
    e2ae:	46c0      	nop			; (mov r8, r8)
    e2b0:	e002      	b.n	e2b8 <atcab_verify+0x1c8>
            break;
    e2b2:	46c0      	nop			; (mov r8, r8)
    e2b4:	e000      	b.n	e2b8 <atcab_verify+0x1c8>
            break;
    e2b6:	46c0      	nop			; (mov r8, r8)
    }
    while (false);

    _atcab_exit();
    e2b8:	4b0f      	ldr	r3, [pc, #60]	; (e2f8 <atcab_verify+0x208>)
    e2ba:	4798      	blx	r3
    return status;
    e2bc:	239f      	movs	r3, #159	; 0x9f
    e2be:	18fb      	adds	r3, r7, r3
    e2c0:	781b      	ldrb	r3, [r3, #0]
}
    e2c2:	0018      	movs	r0, r3
    e2c4:	46bd      	mov	sp, r7
    e2c6:	b029      	add	sp, #164	; 0xa4
    e2c8:	bd90      	pop	{r4, r7, pc}
    e2ca:	46c0      	nop			; (mov r8, r8)
    e2cc:	200015c8 	.word	0x200015c8
    e2d0:	0001bab7 	.word	0x0001bab7
    e2d4:	200015cc 	.word	0x200015cc
    e2d8:	0000d201 	.word	0x0000d201
    e2dc:	0000d2d9 	.word	0x0000d2d9
    e2e0:	0000d8e9 	.word	0x0000d8e9
    e2e4:	200015d0 	.word	0x200015d0
    e2e8:	0000d6bd 	.word	0x0000d6bd
    e2ec:	0000f595 	.word	0x0000f595
    e2f0:	0000d6df 	.word	0x0000d6df
    e2f4:	0000d499 	.word	0x0000d499
    e2f8:	0000d979 	.word	0x0000d979

0000e2fc <atcab_verify_extern>:
 *
 * \return ATCA_SUCCESS on verification success or failure, because the
 *         command still completed successfully.
 */
ATCA_STATUS atcab_verify_extern(const uint8_t *message, const uint8_t *signature, const uint8_t *public_key, bool *is_verified)
{
    e2fc:	b5b0      	push	{r4, r5, r7, lr}
    e2fe:	b088      	sub	sp, #32
    e300:	af02      	add	r7, sp, #8
    e302:	60f8      	str	r0, [r7, #12]
    e304:	60b9      	str	r1, [r7, #8]
    e306:	607a      	str	r2, [r7, #4]
    e308:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    e30a:	2317      	movs	r3, #23
    e30c:	18fb      	adds	r3, r7, r3
    e30e:	22e1      	movs	r2, #225	; 0xe1
    e310:	701a      	strb	r2, [r3, #0]

    if (signature == NULL || message == NULL || public_key == NULL || is_verified == NULL)
    e312:	68bb      	ldr	r3, [r7, #8]
    e314:	2b00      	cmp	r3, #0
    e316:	d008      	beq.n	e32a <atcab_verify_extern+0x2e>
    e318:	68fb      	ldr	r3, [r7, #12]
    e31a:	2b00      	cmp	r3, #0
    e31c:	d005      	beq.n	e32a <atcab_verify_extern+0x2e>
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	2b00      	cmp	r3, #0
    e322:	d002      	beq.n	e32a <atcab_verify_extern+0x2e>
    e324:	683b      	ldr	r3, [r7, #0]
    e326:	2b00      	cmp	r3, #0
    e328:	d101      	bne.n	e32e <atcab_verify_extern+0x32>
        return ATCA_BAD_PARAM;
    e32a:	23e2      	movs	r3, #226	; 0xe2
    e32c:	e031      	b.n	e392 <atcab_verify_extern+0x96>

    do
    {
        // nonce passthrough
        if ( (status = atcab_challenge(message)) != ATCA_SUCCESS)
    e32e:	2317      	movs	r3, #23
    e330:	18fc      	adds	r4, r7, r3
    e332:	68fb      	ldr	r3, [r7, #12]
    e334:	0018      	movs	r0, r3
    e336:	4b19      	ldr	r3, [pc, #100]	; (e39c <atcab_verify_extern+0xa0>)
    e338:	4798      	blx	r3
    e33a:	0003      	movs	r3, r0
    e33c:	7023      	strb	r3, [r4, #0]
    e33e:	2317      	movs	r3, #23
    e340:	18fb      	adds	r3, r7, r3
    e342:	781b      	ldrb	r3, [r3, #0]
    e344:	2b00      	cmp	r3, #0
    e346:	d11e      	bne.n	e386 <atcab_verify_extern+0x8a>
            break;

        status = atcab_verify(VERIFY_MODE_EXTERNAL, VERIFY_KEY_P256, signature, public_key, NULL);
    e348:	2317      	movs	r3, #23
    e34a:	18fc      	adds	r4, r7, r3
    e34c:	6879      	ldr	r1, [r7, #4]
    e34e:	68ba      	ldr	r2, [r7, #8]
    e350:	2300      	movs	r3, #0
    e352:	9300      	str	r3, [sp, #0]
    e354:	000b      	movs	r3, r1
    e356:	2104      	movs	r1, #4
    e358:	2002      	movs	r0, #2
    e35a:	4d11      	ldr	r5, [pc, #68]	; (e3a0 <atcab_verify_extern+0xa4>)
    e35c:	47a8      	blx	r5
    e35e:	0003      	movs	r3, r0
    e360:	7023      	strb	r3, [r4, #0]
        *is_verified = (status == ATCA_SUCCESS);
    e362:	2317      	movs	r3, #23
    e364:	18fb      	adds	r3, r7, r3
    e366:	781b      	ldrb	r3, [r3, #0]
    e368:	425a      	negs	r2, r3
    e36a:	4153      	adcs	r3, r2
    e36c:	b2da      	uxtb	r2, r3
    e36e:	683b      	ldr	r3, [r7, #0]
    e370:	701a      	strb	r2, [r3, #0]
        if (status == ATCA_CHECKMAC_VERIFY_FAILED)
    e372:	2317      	movs	r3, #23
    e374:	18fb      	adds	r3, r7, r3
    e376:	781b      	ldrb	r3, [r3, #0]
    e378:	2bd1      	cmp	r3, #209	; 0xd1
    e37a:	d105      	bne.n	e388 <atcab_verify_extern+0x8c>
            status = ATCA_SUCCESS;  // Verify failed, but command succeeded
    e37c:	2317      	movs	r3, #23
    e37e:	18fb      	adds	r3, r7, r3
    e380:	2200      	movs	r2, #0
    e382:	701a      	strb	r2, [r3, #0]
    e384:	e000      	b.n	e388 <atcab_verify_extern+0x8c>
            break;
    e386:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    e388:	4b06      	ldr	r3, [pc, #24]	; (e3a4 <atcab_verify_extern+0xa8>)
    e38a:	4798      	blx	r3
    return status;
    e38c:	2317      	movs	r3, #23
    e38e:	18fb      	adds	r3, r7, r3
    e390:	781b      	ldrb	r3, [r3, #0]
}
    e392:	0018      	movs	r0, r3
    e394:	46bd      	mov	sp, r7
    e396:	b006      	add	sp, #24
    e398:	bdb0      	pop	{r4, r5, r7, pc}
    e39a:	46c0      	nop			; (mov r8, r8)
    e39c:	0000def5 	.word	0x0000def5
    e3a0:	0000e0f1 	.word	0x0000e0f1
    e3a4:	0000d979 	.word	0x0000d979

0000e3a8 <atcab_ecdh>:
 *                        32 bytes.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_ecdh(uint16_t key_id, const uint8_t* pubkey, uint8_t* pms)
{
    e3a8:	b590      	push	{r4, r7, lr}
    e3aa:	b0a9      	sub	sp, #164	; 0xa4
    e3ac:	af00      	add	r7, sp, #0
    e3ae:	60b9      	str	r1, [r7, #8]
    e3b0:	607a      	str	r2, [r7, #4]
    e3b2:	230e      	movs	r3, #14
    e3b4:	18fb      	adds	r3, r7, r3
    e3b6:	1c02      	adds	r2, r0, #0
    e3b8:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status;
    ATCAPacket packet;
    uint16_t execution_time = 0;
    e3ba:	239c      	movs	r3, #156	; 0x9c
    e3bc:	18fb      	adds	r3, r7, r3
    e3be:	2200      	movs	r2, #0
    e3c0:	801a      	strh	r2, [r3, #0]

    do
    {
        if (pubkey == NULL || pms == NULL)
    e3c2:	68bb      	ldr	r3, [r7, #8]
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d002      	beq.n	e3ce <atcab_ecdh+0x26>
    e3c8:	687b      	ldr	r3, [r7, #4]
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d104      	bne.n	e3d8 <atcab_ecdh+0x30>
        {
            status = ATCA_BAD_PARAM;
    e3ce:	239f      	movs	r3, #159	; 0x9f
    e3d0:	18fb      	adds	r3, r7, r3
    e3d2:	22e2      	movs	r2, #226	; 0xe2
    e3d4:	701a      	strb	r2, [r3, #0]
            break;
    e3d6:	e0a4      	b.n	e522 <atcab_ecdh+0x17a>
        }
        memset(pms, 0, ATCA_KEY_SIZE);
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	2220      	movs	r2, #32
    e3dc:	2100      	movs	r1, #0
    e3de:	0018      	movs	r0, r3
    e3e0:	4b54      	ldr	r3, [pc, #336]	; (e534 <atcab_ecdh+0x18c>)
    e3e2:	4798      	blx	r3

        // build a ecdh command
        packet.param1 = ECDH_PREFIX_MODE;
    e3e4:	2310      	movs	r3, #16
    e3e6:	18fb      	adds	r3, r7, r3
    e3e8:	2200      	movs	r2, #0
    e3ea:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    e3ec:	2310      	movs	r3, #16
    e3ee:	18fb      	adds	r3, r7, r3
    e3f0:	220e      	movs	r2, #14
    e3f2:	18ba      	adds	r2, r7, r2
    e3f4:	8812      	ldrh	r2, [r2, #0]
    e3f6:	809a      	strh	r2, [r3, #4]
        memcpy(packet.data, pubkey, ATCA_PUB_KEY_SIZE);
    e3f8:	68b9      	ldr	r1, [r7, #8]
    e3fa:	2310      	movs	r3, #16
    e3fc:	18fb      	adds	r3, r7, r3
    e3fe:	3306      	adds	r3, #6
    e400:	2240      	movs	r2, #64	; 0x40
    e402:	0018      	movs	r0, r3
    e404:	4b4c      	ldr	r3, [pc, #304]	; (e538 <atcab_ecdh+0x190>)
    e406:	4798      	blx	r3

        if ( (status = atECDH(_gCommandObj, &packet)) != ATCA_SUCCESS)
    e408:	4b4c      	ldr	r3, [pc, #304]	; (e53c <atcab_ecdh+0x194>)
    e40a:	681b      	ldr	r3, [r3, #0]
    e40c:	229f      	movs	r2, #159	; 0x9f
    e40e:	18bc      	adds	r4, r7, r2
    e410:	2210      	movs	r2, #16
    e412:	18ba      	adds	r2, r7, r2
    e414:	0011      	movs	r1, r2
    e416:	0018      	movs	r0, r3
    e418:	4b49      	ldr	r3, [pc, #292]	; (e540 <atcab_ecdh+0x198>)
    e41a:	4798      	blx	r3
    e41c:	0003      	movs	r3, r0
    e41e:	7023      	strb	r3, [r4, #0]
    e420:	239f      	movs	r3, #159	; 0x9f
    e422:	18fb      	adds	r3, r7, r3
    e424:	781b      	ldrb	r3, [r3, #0]
    e426:	2b00      	cmp	r3, #0
    e428:	d000      	beq.n	e42c <atcab_ecdh+0x84>
    e42a:	e071      	b.n	e510 <atcab_ecdh+0x168>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_ECDH);
    e42c:	4b43      	ldr	r3, [pc, #268]	; (e53c <atcab_ecdh+0x194>)
    e42e:	681b      	ldr	r3, [r3, #0]
    e430:	229c      	movs	r2, #156	; 0x9c
    e432:	18bc      	adds	r4, r7, r2
    e434:	2104      	movs	r1, #4
    e436:	0018      	movs	r0, r3
    e438:	4b42      	ldr	r3, [pc, #264]	; (e544 <atcab_ecdh+0x19c>)
    e43a:	4798      	blx	r3
    e43c:	0003      	movs	r3, r0
    e43e:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    e440:	239f      	movs	r3, #159	; 0x9f
    e442:	18fc      	adds	r4, r7, r3
    e444:	4b40      	ldr	r3, [pc, #256]	; (e548 <atcab_ecdh+0x1a0>)
    e446:	4798      	blx	r3
    e448:	0003      	movs	r3, r0
    e44a:	7023      	strb	r3, [r4, #0]
    e44c:	239f      	movs	r3, #159	; 0x9f
    e44e:	18fb      	adds	r3, r7, r3
    e450:	781b      	ldrb	r3, [r3, #0]
    e452:	2b00      	cmp	r3, #0
    e454:	d15e      	bne.n	e514 <atcab_ecdh+0x16c>
            break;

        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    e456:	4b3d      	ldr	r3, [pc, #244]	; (e54c <atcab_ecdh+0x1a4>)
    e458:	6818      	ldr	r0, [r3, #0]
    e45a:	2310      	movs	r3, #16
    e45c:	18fb      	adds	r3, r7, r3
    e45e:	785b      	ldrb	r3, [r3, #1]
    e460:	001a      	movs	r2, r3
    e462:	239f      	movs	r3, #159	; 0x9f
    e464:	18fc      	adds	r4, r7, r3
    e466:	2310      	movs	r3, #16
    e468:	18fb      	adds	r3, r7, r3
    e46a:	0019      	movs	r1, r3
    e46c:	4b38      	ldr	r3, [pc, #224]	; (e550 <atcab_ecdh+0x1a8>)
    e46e:	4798      	blx	r3
    e470:	0003      	movs	r3, r0
    e472:	7023      	strb	r3, [r4, #0]
    e474:	239f      	movs	r3, #159	; 0x9f
    e476:	18fb      	adds	r3, r7, r3
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	2b00      	cmp	r3, #0
    e47c:	d14c      	bne.n	e518 <atcab_ecdh+0x170>
            break;

        atca_delay_ms(execution_time);
    e47e:	239c      	movs	r3, #156	; 0x9c
    e480:	18fb      	adds	r3, r7, r3
    e482:	881b      	ldrh	r3, [r3, #0]
    e484:	0018      	movs	r0, r3
    e486:	4b33      	ldr	r3, [pc, #204]	; (e554 <atcab_ecdh+0x1ac>)
    e488:	4798      	blx	r3

        if ((status = atreceive(_gIface, packet.data, &packet.rxsize)) != ATCA_SUCCESS)
    e48a:	4b30      	ldr	r3, [pc, #192]	; (e54c <atcab_ecdh+0x1a4>)
    e48c:	6818      	ldr	r0, [r3, #0]
    e48e:	239f      	movs	r3, #159	; 0x9f
    e490:	18fc      	adds	r4, r7, r3
    e492:	2310      	movs	r3, #16
    e494:	18fb      	adds	r3, r7, r3
    e496:	338a      	adds	r3, #138	; 0x8a
    e498:	001a      	movs	r2, r3
    e49a:	2310      	movs	r3, #16
    e49c:	18fb      	adds	r3, r7, r3
    e49e:	3306      	adds	r3, #6
    e4a0:	0019      	movs	r1, r3
    e4a2:	4b2d      	ldr	r3, [pc, #180]	; (e558 <atcab_ecdh+0x1b0>)
    e4a4:	4798      	blx	r3
    e4a6:	0003      	movs	r3, r0
    e4a8:	7023      	strb	r3, [r4, #0]
    e4aa:	239f      	movs	r3, #159	; 0x9f
    e4ac:	18fb      	adds	r3, r7, r3
    e4ae:	781b      	ldrb	r3, [r3, #0]
    e4b0:	2b00      	cmp	r3, #0
    e4b2:	d133      	bne.n	e51c <atcab_ecdh+0x174>
            break;

        // Check response size
        if (packet.rxsize < 4)
    e4b4:	2310      	movs	r3, #16
    e4b6:	18fb      	adds	r3, r7, r3
    e4b8:	228a      	movs	r2, #138	; 0x8a
    e4ba:	5a9b      	ldrh	r3, [r3, r2]
    e4bc:	2b03      	cmp	r3, #3
    e4be:	d80f      	bhi.n	e4e0 <atcab_ecdh+0x138>
        {
            if (packet.rxsize > 0)
    e4c0:	2310      	movs	r3, #16
    e4c2:	18fb      	adds	r3, r7, r3
    e4c4:	228a      	movs	r2, #138	; 0x8a
    e4c6:	5a9b      	ldrh	r3, [r3, r2]
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d004      	beq.n	e4d6 <atcab_ecdh+0x12e>
                status = ATCA_RX_FAIL;
    e4cc:	239f      	movs	r3, #159	; 0x9f
    e4ce:	18fb      	adds	r3, r7, r3
    e4d0:	22e6      	movs	r2, #230	; 0xe6
    e4d2:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    e4d4:	e025      	b.n	e522 <atcab_ecdh+0x17a>
                status = ATCA_RX_NO_RESPONSE;
    e4d6:	239f      	movs	r3, #159	; 0x9f
    e4d8:	18fb      	adds	r3, r7, r3
    e4da:	22e7      	movs	r2, #231	; 0xe7
    e4dc:	701a      	strb	r2, [r3, #0]
            break;
    e4de:	e020      	b.n	e522 <atcab_ecdh+0x17a>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    e4e0:	239f      	movs	r3, #159	; 0x9f
    e4e2:	18fc      	adds	r4, r7, r3
    e4e4:	2310      	movs	r3, #16
    e4e6:	18fb      	adds	r3, r7, r3
    e4e8:	3306      	adds	r3, #6
    e4ea:	0018      	movs	r0, r3
    e4ec:	4b1b      	ldr	r3, [pc, #108]	; (e55c <atcab_ecdh+0x1b4>)
    e4ee:	4798      	blx	r3
    e4f0:	0003      	movs	r3, r0
    e4f2:	7023      	strb	r3, [r4, #0]
    e4f4:	239f      	movs	r3, #159	; 0x9f
    e4f6:	18fb      	adds	r3, r7, r3
    e4f8:	781b      	ldrb	r3, [r3, #0]
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	d110      	bne.n	e520 <atcab_ecdh+0x178>
            break;

        // The ECDH command may return a single byte. Then the CRC is copied into indices [1:2]
        memcpy(pms, &packet.data[ATCA_RSP_DATA_IDX], ATCA_KEY_SIZE);
    e4fe:	2310      	movs	r3, #16
    e500:	18fb      	adds	r3, r7, r3
    e502:	1dd9      	adds	r1, r3, #7
    e504:	687b      	ldr	r3, [r7, #4]
    e506:	2220      	movs	r2, #32
    e508:	0018      	movs	r0, r3
    e50a:	4b0b      	ldr	r3, [pc, #44]	; (e538 <atcab_ecdh+0x190>)
    e50c:	4798      	blx	r3
    e50e:	e008      	b.n	e522 <atcab_ecdh+0x17a>
            break;
    e510:	46c0      	nop			; (mov r8, r8)
    e512:	e006      	b.n	e522 <atcab_ecdh+0x17a>
            break;
    e514:	46c0      	nop			; (mov r8, r8)
    e516:	e004      	b.n	e522 <atcab_ecdh+0x17a>
            break;
    e518:	46c0      	nop			; (mov r8, r8)
    e51a:	e002      	b.n	e522 <atcab_ecdh+0x17a>
            break;
    e51c:	46c0      	nop			; (mov r8, r8)
    e51e:	e000      	b.n	e522 <atcab_ecdh+0x17a>
            break;
    e520:	46c0      	nop			; (mov r8, r8)

    }
    while (0);

    _atcab_exit();
    e522:	4b0f      	ldr	r3, [pc, #60]	; (e560 <atcab_ecdh+0x1b8>)
    e524:	4798      	blx	r3
    return status;
    e526:	239f      	movs	r3, #159	; 0x9f
    e528:	18fb      	adds	r3, r7, r3
    e52a:	781b      	ldrb	r3, [r3, #0]
}
    e52c:	0018      	movs	r0, r3
    e52e:	46bd      	mov	sp, r7
    e530:	b029      	add	sp, #164	; 0xa4
    e532:	bd90      	pop	{r4, r7, pc}
    e534:	0001baed 	.word	0x0001baed
    e538:	0001bab7 	.word	0x0001bab7
    e53c:	200015cc 	.word	0x200015cc
    e540:	0000d031 	.word	0x0000d031
    e544:	0000d2d9 	.word	0x0000d2d9
    e548:	0000d8e9 	.word	0x0000d8e9
    e54c:	200015d0 	.word	0x200015d0
    e550:	0000d6bd 	.word	0x0000d6bd
    e554:	0000f595 	.word	0x0000f595
    e558:	0000d6df 	.word	0x0000d6df
    e55c:	0000d499 	.word	0x0000d499
    e560:	0000d979 	.word	0x0000d979

0000e564 <atcab_get_addr>:
 *  \param[in] offset
 *  \param[in] addr
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    e564:	b5b0      	push	{r4, r5, r7, lr}
    e566:	b084      	sub	sp, #16
    e568:	af00      	add	r7, sp, #0
    e56a:	0005      	movs	r5, r0
    e56c:	000c      	movs	r4, r1
    e56e:	0010      	movs	r0, r2
    e570:	0019      	movs	r1, r3
    e572:	1dfb      	adds	r3, r7, #7
    e574:	1c2a      	adds	r2, r5, #0
    e576:	701a      	strb	r2, [r3, #0]
    e578:	1d3b      	adds	r3, r7, #4
    e57a:	1c22      	adds	r2, r4, #0
    e57c:	801a      	strh	r2, [r3, #0]
    e57e:	1dbb      	adds	r3, r7, #6
    e580:	1c02      	adds	r2, r0, #0
    e582:	701a      	strb	r2, [r3, #0]
    e584:	1cfb      	adds	r3, r7, #3
    e586:	1c0a      	adds	r2, r1, #0
    e588:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    e58a:	230f      	movs	r3, #15
    e58c:	18fb      	adds	r3, r7, r3
    e58e:	2200      	movs	r2, #0
    e590:	701a      	strb	r2, [r3, #0]
    uint8_t memzone = zone & 0x03;
    e592:	230e      	movs	r3, #14
    e594:	18fb      	adds	r3, r7, r3
    e596:	1dfa      	adds	r2, r7, #7
    e598:	7812      	ldrb	r2, [r2, #0]
    e59a:	2103      	movs	r1, #3
    e59c:	400a      	ands	r2, r1
    e59e:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
    e5a0:	6a3b      	ldr	r3, [r7, #32]
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d101      	bne.n	e5aa <atcab_get_addr+0x46>
        return ATCA_BAD_PARAM;
    e5a6:	23e2      	movs	r3, #226	; 0xe2
    e5a8:	e052      	b.n	e650 <atcab_get_addr+0xec>
    if ((memzone != ATCA_ZONE_CONFIG) && (memzone != ATCA_ZONE_DATA) && (memzone != ATCA_ZONE_OTP))
    e5aa:	230e      	movs	r3, #14
    e5ac:	18fb      	adds	r3, r7, r3
    e5ae:	781b      	ldrb	r3, [r3, #0]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d00b      	beq.n	e5cc <atcab_get_addr+0x68>
    e5b4:	230e      	movs	r3, #14
    e5b6:	18fb      	adds	r3, r7, r3
    e5b8:	781b      	ldrb	r3, [r3, #0]
    e5ba:	2b02      	cmp	r3, #2
    e5bc:	d006      	beq.n	e5cc <atcab_get_addr+0x68>
    e5be:	230e      	movs	r3, #14
    e5c0:	18fb      	adds	r3, r7, r3
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d001      	beq.n	e5cc <atcab_get_addr+0x68>
        return ATCA_BAD_PARAM;
    e5c8:	23e2      	movs	r3, #226	; 0xe2
    e5ca:	e041      	b.n	e650 <atcab_get_addr+0xec>
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    e5cc:	6a3b      	ldr	r3, [r7, #32]
    e5ce:	2200      	movs	r2, #0
    e5d0:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    e5d2:	1cfb      	adds	r3, r7, #3
    e5d4:	1cfa      	adds	r2, r7, #3
    e5d6:	7812      	ldrb	r2, [r2, #0]
    e5d8:	2107      	movs	r1, #7
    e5da:	400a      	ands	r2, r1
    e5dc:	701a      	strb	r2, [r3, #0]
        if ((memzone == ATCA_ZONE_CONFIG) || (memzone == ATCA_ZONE_OTP))
    e5de:	230e      	movs	r3, #14
    e5e0:	18fb      	adds	r3, r7, r3
    e5e2:	781b      	ldrb	r3, [r3, #0]
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	d004      	beq.n	e5f2 <atcab_get_addr+0x8e>
    e5e8:	230e      	movs	r3, #14
    e5ea:	18fb      	adds	r3, r7, r3
    e5ec:	781b      	ldrb	r3, [r3, #0]
    e5ee:	2b01      	cmp	r3, #1
    e5f0:	d110      	bne.n	e614 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
    e5f2:	1dbb      	adds	r3, r7, #6
    e5f4:	781b      	ldrb	r3, [r3, #0]
    e5f6:	b29b      	uxth	r3, r3
    e5f8:	00db      	lsls	r3, r3, #3
    e5fa:	b29a      	uxth	r2, r3
    e5fc:	6a3b      	ldr	r3, [r7, #32]
    e5fe:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
    e600:	6a3b      	ldr	r3, [r7, #32]
    e602:	881a      	ldrh	r2, [r3, #0]
    e604:	1cfb      	adds	r3, r7, #3
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	b29b      	uxth	r3, r3
    e60a:	4313      	orrs	r3, r2
    e60c:	b29a      	uxth	r2, r3
    e60e:	6a3b      	ldr	r3, [r7, #32]
    e610:	801a      	strh	r2, [r3, #0]
    e612:	e01a      	b.n	e64a <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
    e614:	1d3b      	adds	r3, r7, #4
    e616:	881b      	ldrh	r3, [r3, #0]
    e618:	00db      	lsls	r3, r3, #3
    e61a:	b29a      	uxth	r2, r3
    e61c:	6a3b      	ldr	r3, [r7, #32]
    e61e:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
    e620:	6a3b      	ldr	r3, [r7, #32]
    e622:	881a      	ldrh	r2, [r3, #0]
    e624:	1cfb      	adds	r3, r7, #3
    e626:	781b      	ldrb	r3, [r3, #0]
    e628:	b29b      	uxth	r3, r3
    e62a:	4313      	orrs	r3, r2
    e62c:	b29a      	uxth	r2, r3
    e62e:	6a3b      	ldr	r3, [r7, #32]
    e630:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
    e632:	6a3b      	ldr	r3, [r7, #32]
    e634:	881b      	ldrh	r3, [r3, #0]
    e636:	b21a      	sxth	r2, r3
    e638:	1dbb      	adds	r3, r7, #6
    e63a:	781b      	ldrb	r3, [r3, #0]
    e63c:	021b      	lsls	r3, r3, #8
    e63e:	b21b      	sxth	r3, r3
    e640:	4313      	orrs	r3, r2
    e642:	b21b      	sxth	r3, r3
    e644:	b29a      	uxth	r2, r3
    e646:	6a3b      	ldr	r3, [r7, #32]
    e648:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
    e64a:	230f      	movs	r3, #15
    e64c:	18fb      	adds	r3, r7, r3
    e64e:	781b      	ldrb	r3, [r3, #0]
}
    e650:	0018      	movs	r0, r3
    e652:	46bd      	mov	sp, r7
    e654:	b004      	add	sp, #16
    e656:	bdb0      	pop	{r4, r5, r7, pc}

0000e658 <atcab_is_locked>:
 *  \param[in]  zone      The zone to query for locked (use LOCK_ZONE_CONFIG or LOCK_ZONE_DATA)
 *  \param[out] is_locked  true if the specified zone is locked
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_is_locked(uint8_t zone, bool *is_locked)
{
    e658:	b5b0      	push	{r4, r5, r7, lr}
    e65a:	b086      	sub	sp, #24
    e65c:	af02      	add	r7, sp, #8
    e65e:	0002      	movs	r2, r0
    e660:	6039      	str	r1, [r7, #0]
    e662:	1dfb      	adds	r3, r7, #7
    e664:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_GEN_FAIL;
    e666:	230f      	movs	r3, #15
    e668:	18fb      	adds	r3, r7, r3
    e66a:	22e1      	movs	r2, #225	; 0xe1
    e66c:	701a      	strb	r2, [r3, #0]
    uint8_t data[ATCA_WORD_SIZE];

    do
    {
        if (is_locked == NULL)
    e66e:	683b      	ldr	r3, [r7, #0]
    e670:	2b00      	cmp	r3, #0
    e672:	d101      	bne.n	e678 <atcab_is_locked+0x20>
            return ATCA_BAD_PARAM;
    e674:	23e2      	movs	r3, #226	; 0xe2
    e676:	e037      	b.n	e6e8 <atcab_is_locked+0x90>

        // Read the word with the lock bytes (UserExtra, Selector, LockValue, LockConfig) (config block = 2, word offset = 5)
        if ( (ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, data, ATCA_WORD_SIZE)) != ATCA_SUCCESS)
    e678:	230f      	movs	r3, #15
    e67a:	18fc      	adds	r4, r7, r3
    e67c:	2304      	movs	r3, #4
    e67e:	9301      	str	r3, [sp, #4]
    e680:	2308      	movs	r3, #8
    e682:	18fb      	adds	r3, r7, r3
    e684:	9300      	str	r3, [sp, #0]
    e686:	2305      	movs	r3, #5
    e688:	2202      	movs	r2, #2
    e68a:	2100      	movs	r1, #0
    e68c:	2000      	movs	r0, #0
    e68e:	4d18      	ldr	r5, [pc, #96]	; (e6f0 <atcab_is_locked+0x98>)
    e690:	47a8      	blx	r5
    e692:	0003      	movs	r3, r0
    e694:	7023      	strb	r3, [r4, #0]
    e696:	230f      	movs	r3, #15
    e698:	18fb      	adds	r3, r7, r3
    e69a:	781b      	ldrb	r3, [r3, #0]
    e69c:	2b00      	cmp	r3, #0
    e69e:	d11f      	bne.n	e6e0 <atcab_is_locked+0x88>
            break;

        // Determine the index into the word_data based on the zone we are querying for
        switch (zone)
    e6a0:	1dfb      	adds	r3, r7, #7
    e6a2:	781b      	ldrb	r3, [r3, #0]
    e6a4:	2b00      	cmp	r3, #0
    e6a6:	d002      	beq.n	e6ae <atcab_is_locked+0x56>
    e6a8:	2b01      	cmp	r3, #1
    e6aa:	d00a      	beq.n	e6c2 <atcab_is_locked+0x6a>
    e6ac:	e013      	b.n	e6d6 <atcab_is_locked+0x7e>
        {
        case LOCK_ZONE_CONFIG: *is_locked = (data[3] != 0x55); break;
    e6ae:	2308      	movs	r3, #8
    e6b0:	18fb      	adds	r3, r7, r3
    e6b2:	78db      	ldrb	r3, [r3, #3]
    e6b4:	3b55      	subs	r3, #85	; 0x55
    e6b6:	1e5a      	subs	r2, r3, #1
    e6b8:	4193      	sbcs	r3, r2
    e6ba:	b2da      	uxtb	r2, r3
    e6bc:	683b      	ldr	r3, [r7, #0]
    e6be:	701a      	strb	r2, [r3, #0]
    e6c0:	e00f      	b.n	e6e2 <atcab_is_locked+0x8a>
        case LOCK_ZONE_DATA:   *is_locked = (data[2] != 0x55); break;
    e6c2:	2308      	movs	r3, #8
    e6c4:	18fb      	adds	r3, r7, r3
    e6c6:	789b      	ldrb	r3, [r3, #2]
    e6c8:	3b55      	subs	r3, #85	; 0x55
    e6ca:	1e5a      	subs	r2, r3, #1
    e6cc:	4193      	sbcs	r3, r2
    e6ce:	b2da      	uxtb	r2, r3
    e6d0:	683b      	ldr	r3, [r7, #0]
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	e005      	b.n	e6e2 <atcab_is_locked+0x8a>
        default: ret = ATCA_BAD_PARAM; break;
    e6d6:	230f      	movs	r3, #15
    e6d8:	18fb      	adds	r3, r7, r3
    e6da:	22e2      	movs	r2, #226	; 0xe2
    e6dc:	701a      	strb	r2, [r3, #0]
    e6de:	e000      	b.n	e6e2 <atcab_is_locked+0x8a>
            break;
    e6e0:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return ret;
    e6e2:	230f      	movs	r3, #15
    e6e4:	18fb      	adds	r3, r7, r3
    e6e6:	781b      	ldrb	r3, [r3, #0]
}
    e6e8:	0018      	movs	r0, r3
    e6ea:	46bd      	mov	sp, r7
    e6ec:	b004      	add	sp, #16
    e6ee:	bdb0      	pop	{r4, r5, r7, pc}
    e6f0:	0000e6f5 	.word	0x0000e6f5

0000e6f4 <atcab_read_zone>:
 *  \param[in] data
 *  \param[in] len  Must be either 4 or 32
 *  returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    e6f4:	b5b0      	push	{r4, r5, r7, lr}
    e6f6:	b0aa      	sub	sp, #168	; 0xa8
    e6f8:	af02      	add	r7, sp, #8
    e6fa:	0005      	movs	r5, r0
    e6fc:	000c      	movs	r4, r1
    e6fe:	0010      	movs	r0, r2
    e700:	0019      	movs	r1, r3
    e702:	1dfb      	adds	r3, r7, #7
    e704:	1c2a      	adds	r2, r5, #0
    e706:	701a      	strb	r2, [r3, #0]
    e708:	1d3b      	adds	r3, r7, #4
    e70a:	1c22      	adds	r2, r4, #0
    e70c:	801a      	strh	r2, [r3, #0]
    e70e:	1dbb      	adds	r3, r7, #6
    e710:	1c02      	adds	r2, r0, #0
    e712:	701a      	strb	r2, [r3, #0]
    e714:	1cfb      	adds	r3, r7, #3
    e716:	1c0a      	adds	r2, r1, #0
    e718:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    e71a:	239f      	movs	r3, #159	; 0x9f
    e71c:	18fb      	adds	r3, r7, r3
    e71e:	2200      	movs	r2, #0
    e720:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t addr;
    uint16_t execution_time = 0;
    e722:	239c      	movs	r3, #156	; 0x9c
    e724:	18fb      	adds	r3, r7, r3
    e726:	2200      	movs	r2, #0
    e728:	801a      	strh	r2, [r3, #0]

    do
    {
        // Check the input parameters
        if (data == NULL)
    e72a:	23b0      	movs	r3, #176	; 0xb0
    e72c:	18fb      	adds	r3, r7, r3
    e72e:	681b      	ldr	r3, [r3, #0]
    e730:	2b00      	cmp	r3, #0
    e732:	d101      	bne.n	e738 <atcab_read_zone+0x44>
            return ATCA_BAD_PARAM;
    e734:	23e2      	movs	r3, #226	; 0xe2
    e736:	e0d2      	b.n	e8de <atcab_read_zone+0x1ea>

        if (len != 4 && len != 32)
    e738:	23b4      	movs	r3, #180	; 0xb4
    e73a:	18fb      	adds	r3, r7, r3
    e73c:	781b      	ldrb	r3, [r3, #0]
    e73e:	2b04      	cmp	r3, #4
    e740:	d006      	beq.n	e750 <atcab_read_zone+0x5c>
    e742:	23b4      	movs	r3, #180	; 0xb4
    e744:	18fb      	adds	r3, r7, r3
    e746:	781b      	ldrb	r3, [r3, #0]
    e748:	2b20      	cmp	r3, #32
    e74a:	d001      	beq.n	e750 <atcab_read_zone+0x5c>
            return ATCA_BAD_PARAM;
    e74c:	23e2      	movs	r3, #226	; 0xe2
    e74e:	e0c6      	b.n	e8de <atcab_read_zone+0x1ea>

        // The get address function checks the remaining variables
        if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
    e750:	239f      	movs	r3, #159	; 0x9f
    e752:	18fc      	adds	r4, r7, r3
    e754:	1cfb      	adds	r3, r7, #3
    e756:	781d      	ldrb	r5, [r3, #0]
    e758:	1dbb      	adds	r3, r7, #6
    e75a:	781a      	ldrb	r2, [r3, #0]
    e75c:	1d3b      	adds	r3, r7, #4
    e75e:	8819      	ldrh	r1, [r3, #0]
    e760:	1dfb      	adds	r3, r7, #7
    e762:	7818      	ldrb	r0, [r3, #0]
    e764:	230e      	movs	r3, #14
    e766:	18fb      	adds	r3, r7, r3
    e768:	9300      	str	r3, [sp, #0]
    e76a:	002b      	movs	r3, r5
    e76c:	4d5e      	ldr	r5, [pc, #376]	; (e8e8 <atcab_read_zone+0x1f4>)
    e76e:	47a8      	blx	r5
    e770:	0003      	movs	r3, r0
    e772:	7023      	strb	r3, [r4, #0]
    e774:	239f      	movs	r3, #159	; 0x9f
    e776:	18fb      	adds	r3, r7, r3
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d000      	beq.n	e780 <atcab_read_zone+0x8c>
    e77e:	e09e      	b.n	e8be <atcab_read_zone+0x1ca>
            break;

        // If there are 32 bytes to write, then xor the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
    e780:	23b4      	movs	r3, #180	; 0xb4
    e782:	18fb      	adds	r3, r7, r3
    e784:	781b      	ldrb	r3, [r3, #0]
    e786:	2b20      	cmp	r3, #32
    e788:	d106      	bne.n	e798 <atcab_read_zone+0xa4>
            zone = zone | ATCA_ZONE_READWRITE_32;
    e78a:	1dfb      	adds	r3, r7, #7
    e78c:	1dfa      	adds	r2, r7, #7
    e78e:	7812      	ldrb	r2, [r2, #0]
    e790:	2180      	movs	r1, #128	; 0x80
    e792:	4249      	negs	r1, r1
    e794:	430a      	orrs	r2, r1
    e796:	701a      	strb	r2, [r3, #0]

        // build a read command
        packet.param1 = zone;
    e798:	2310      	movs	r3, #16
    e79a:	18fb      	adds	r3, r7, r3
    e79c:	1dfa      	adds	r2, r7, #7
    e79e:	7812      	ldrb	r2, [r2, #0]
    e7a0:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
    e7a2:	230e      	movs	r3, #14
    e7a4:	18fb      	adds	r3, r7, r3
    e7a6:	881a      	ldrh	r2, [r3, #0]
    e7a8:	2310      	movs	r3, #16
    e7aa:	18fb      	adds	r3, r7, r3
    e7ac:	809a      	strh	r2, [r3, #4]

        if ( (status = atRead(_gCommandObj, &packet)) != ATCA_SUCCESS)
    e7ae:	4b4f      	ldr	r3, [pc, #316]	; (e8ec <atcab_read_zone+0x1f8>)
    e7b0:	681b      	ldr	r3, [r3, #0]
    e7b2:	229f      	movs	r2, #159	; 0x9f
    e7b4:	18bc      	adds	r4, r7, r2
    e7b6:	2210      	movs	r2, #16
    e7b8:	18ba      	adds	r2, r7, r2
    e7ba:	0011      	movs	r1, r2
    e7bc:	0018      	movs	r0, r3
    e7be:	4b4c      	ldr	r3, [pc, #304]	; (e8f0 <atcab_read_zone+0x1fc>)
    e7c0:	4798      	blx	r3
    e7c2:	0003      	movs	r3, r0
    e7c4:	7023      	strb	r3, [r4, #0]
    e7c6:	239f      	movs	r3, #159	; 0x9f
    e7c8:	18fb      	adds	r3, r7, r3
    e7ca:	781b      	ldrb	r3, [r3, #0]
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d000      	beq.n	e7d2 <atcab_read_zone+0xde>
    e7d0:	e077      	b.n	e8c2 <atcab_read_zone+0x1ce>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_READMEM);
    e7d2:	4b46      	ldr	r3, [pc, #280]	; (e8ec <atcab_read_zone+0x1f8>)
    e7d4:	681b      	ldr	r3, [r3, #0]
    e7d6:	229c      	movs	r2, #156	; 0x9c
    e7d8:	18bc      	adds	r4, r7, r2
    e7da:	210f      	movs	r1, #15
    e7dc:	0018      	movs	r0, r3
    e7de:	4b45      	ldr	r3, [pc, #276]	; (e8f4 <atcab_read_zone+0x200>)
    e7e0:	4798      	blx	r3
    e7e2:	0003      	movs	r3, r0
    e7e4:	8023      	strh	r3, [r4, #0]

        if ( (status = atcab_wakeup()) != ATCA_SUCCESS)
    e7e6:	239f      	movs	r3, #159	; 0x9f
    e7e8:	18fc      	adds	r4, r7, r3
    e7ea:	4b43      	ldr	r3, [pc, #268]	; (e8f8 <atcab_read_zone+0x204>)
    e7ec:	4798      	blx	r3
    e7ee:	0003      	movs	r3, r0
    e7f0:	7023      	strb	r3, [r4, #0]
    e7f2:	239f      	movs	r3, #159	; 0x9f
    e7f4:	18fb      	adds	r3, r7, r3
    e7f6:	781b      	ldrb	r3, [r3, #0]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d164      	bne.n	e8c6 <atcab_read_zone+0x1d2>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    e7fc:	4b3f      	ldr	r3, [pc, #252]	; (e8fc <atcab_read_zone+0x208>)
    e7fe:	6818      	ldr	r0, [r3, #0]
    e800:	2310      	movs	r3, #16
    e802:	18fb      	adds	r3, r7, r3
    e804:	785b      	ldrb	r3, [r3, #1]
    e806:	001a      	movs	r2, r3
    e808:	239f      	movs	r3, #159	; 0x9f
    e80a:	18fc      	adds	r4, r7, r3
    e80c:	2310      	movs	r3, #16
    e80e:	18fb      	adds	r3, r7, r3
    e810:	0019      	movs	r1, r3
    e812:	4b3b      	ldr	r3, [pc, #236]	; (e900 <atcab_read_zone+0x20c>)
    e814:	4798      	blx	r3
    e816:	0003      	movs	r3, r0
    e818:	7023      	strb	r3, [r4, #0]
    e81a:	239f      	movs	r3, #159	; 0x9f
    e81c:	18fb      	adds	r3, r7, r3
    e81e:	781b      	ldrb	r3, [r3, #0]
    e820:	2b00      	cmp	r3, #0
    e822:	d152      	bne.n	e8ca <atcab_read_zone+0x1d6>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    e824:	239c      	movs	r3, #156	; 0x9c
    e826:	18fb      	adds	r3, r7, r3
    e828:	881b      	ldrh	r3, [r3, #0]
    e82a:	0018      	movs	r0, r3
    e82c:	4b35      	ldr	r3, [pc, #212]	; (e904 <atcab_read_zone+0x210>)
    e82e:	4798      	blx	r3

        // receive the response
        if ( (status = atreceive(_gIface, packet.data, &(packet.rxsize) )) != ATCA_SUCCESS)
    e830:	4b32      	ldr	r3, [pc, #200]	; (e8fc <atcab_read_zone+0x208>)
    e832:	6818      	ldr	r0, [r3, #0]
    e834:	239f      	movs	r3, #159	; 0x9f
    e836:	18fc      	adds	r4, r7, r3
    e838:	2310      	movs	r3, #16
    e83a:	18fb      	adds	r3, r7, r3
    e83c:	338a      	adds	r3, #138	; 0x8a
    e83e:	001a      	movs	r2, r3
    e840:	2310      	movs	r3, #16
    e842:	18fb      	adds	r3, r7, r3
    e844:	3306      	adds	r3, #6
    e846:	0019      	movs	r1, r3
    e848:	4b2f      	ldr	r3, [pc, #188]	; (e908 <atcab_read_zone+0x214>)
    e84a:	4798      	blx	r3
    e84c:	0003      	movs	r3, r0
    e84e:	7023      	strb	r3, [r4, #0]
    e850:	239f      	movs	r3, #159	; 0x9f
    e852:	18fb      	adds	r3, r7, r3
    e854:	781b      	ldrb	r3, [r3, #0]
    e856:	2b00      	cmp	r3, #0
    e858:	d139      	bne.n	e8ce <atcab_read_zone+0x1da>
            break;

        // Check response size
        if (packet.rxsize < 4)
    e85a:	2310      	movs	r3, #16
    e85c:	18fb      	adds	r3, r7, r3
    e85e:	228a      	movs	r2, #138	; 0x8a
    e860:	5a9b      	ldrh	r3, [r3, r2]
    e862:	2b03      	cmp	r3, #3
    e864:	d80f      	bhi.n	e886 <atcab_read_zone+0x192>
        {
            if (packet.rxsize > 0)
    e866:	2310      	movs	r3, #16
    e868:	18fb      	adds	r3, r7, r3
    e86a:	228a      	movs	r2, #138	; 0x8a
    e86c:	5a9b      	ldrh	r3, [r3, r2]
    e86e:	2b00      	cmp	r3, #0
    e870:	d004      	beq.n	e87c <atcab_read_zone+0x188>
                status = ATCA_RX_FAIL;
    e872:	239f      	movs	r3, #159	; 0x9f
    e874:	18fb      	adds	r3, r7, r3
    e876:	22e6      	movs	r2, #230	; 0xe6
    e878:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    e87a:	e02b      	b.n	e8d4 <atcab_read_zone+0x1e0>
                status = ATCA_RX_NO_RESPONSE;
    e87c:	239f      	movs	r3, #159	; 0x9f
    e87e:	18fb      	adds	r3, r7, r3
    e880:	22e7      	movs	r2, #231	; 0xe7
    e882:	701a      	strb	r2, [r3, #0]
            break;
    e884:	e026      	b.n	e8d4 <atcab_read_zone+0x1e0>
        }

        if ( (status = isATCAError(packet.data)) != ATCA_SUCCESS)
    e886:	239f      	movs	r3, #159	; 0x9f
    e888:	18fc      	adds	r4, r7, r3
    e88a:	2310      	movs	r3, #16
    e88c:	18fb      	adds	r3, r7, r3
    e88e:	3306      	adds	r3, #6
    e890:	0018      	movs	r0, r3
    e892:	4b1e      	ldr	r3, [pc, #120]	; (e90c <atcab_read_zone+0x218>)
    e894:	4798      	blx	r3
    e896:	0003      	movs	r3, r0
    e898:	7023      	strb	r3, [r4, #0]
    e89a:	239f      	movs	r3, #159	; 0x9f
    e89c:	18fb      	adds	r3, r7, r3
    e89e:	781b      	ldrb	r3, [r3, #0]
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d116      	bne.n	e8d2 <atcab_read_zone+0x1de>
            break;

        memcpy(data, &packet.data[1], len);
    e8a4:	23b4      	movs	r3, #180	; 0xb4
    e8a6:	18fb      	adds	r3, r7, r3
    e8a8:	781a      	ldrb	r2, [r3, #0]
    e8aa:	2310      	movs	r3, #16
    e8ac:	18fb      	adds	r3, r7, r3
    e8ae:	1dd9      	adds	r1, r3, #7
    e8b0:	23b0      	movs	r3, #176	; 0xb0
    e8b2:	18fb      	adds	r3, r7, r3
    e8b4:	681b      	ldr	r3, [r3, #0]
    e8b6:	0018      	movs	r0, r3
    e8b8:	4b15      	ldr	r3, [pc, #84]	; (e910 <atcab_read_zone+0x21c>)
    e8ba:	4798      	blx	r3
    e8bc:	e00a      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8be:	46c0      	nop			; (mov r8, r8)
    e8c0:	e008      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8c2:	46c0      	nop			; (mov r8, r8)
    e8c4:	e006      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8c6:	46c0      	nop			; (mov r8, r8)
    e8c8:	e004      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8ca:	46c0      	nop			; (mov r8, r8)
    e8cc:	e002      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8ce:	46c0      	nop			; (mov r8, r8)
    e8d0:	e000      	b.n	e8d4 <atcab_read_zone+0x1e0>
            break;
    e8d2:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    e8d4:	4b0f      	ldr	r3, [pc, #60]	; (e914 <atcab_read_zone+0x220>)
    e8d6:	4798      	blx	r3
    return status;
    e8d8:	239f      	movs	r3, #159	; 0x9f
    e8da:	18fb      	adds	r3, r7, r3
    e8dc:	781b      	ldrb	r3, [r3, #0]
}
    e8de:	0018      	movs	r0, r3
    e8e0:	46bd      	mov	sp, r7
    e8e2:	b028      	add	sp, #160	; 0xa0
    e8e4:	bdb0      	pop	{r4, r5, r7, pc}
    e8e6:	46c0      	nop			; (mov r8, r8)
    e8e8:	0000e565 	.word	0x0000e565
    e8ec:	200015cc 	.word	0x200015cc
    e8f0:	0000d185 	.word	0x0000d185
    e8f4:	0000d2d9 	.word	0x0000d2d9
    e8f8:	0000d8e9 	.word	0x0000d8e9
    e8fc:	200015d0 	.word	0x200015d0
    e900:	0000d6bd 	.word	0x0000d6bd
    e904:	0000f595 	.word	0x0000f595
    e908:	0000d6df 	.word	0x0000d6df
    e90c:	0000d499 	.word	0x0000d499
    e910:	0001bab7 	.word	0x0001bab7
    e914:	0000d979 	.word	0x0000d979

0000e918 <atcab_sign_base>:
 *                          curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    e918:	b590      	push	{r4, r7, lr}
    e91a:	b0a7      	sub	sp, #156	; 0x9c
    e91c:	af00      	add	r7, sp, #0
    e91e:	603a      	str	r2, [r7, #0]
    e920:	1dfb      	adds	r3, r7, #7
    e922:	1c02      	adds	r2, r0, #0
    e924:	701a      	strb	r2, [r3, #0]
    e926:	1d3b      	adds	r3, r7, #4
    e928:	1c0a      	adds	r2, r1, #0
    e92a:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    e92c:	2397      	movs	r3, #151	; 0x97
    e92e:	18fb      	adds	r3, r7, r3
    e930:	22e1      	movs	r2, #225	; 0xe1
    e932:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    uint16_t execution_time = 0;
    e934:	2394      	movs	r3, #148	; 0x94
    e936:	18fb      	adds	r3, r7, r3
    e938:	2200      	movs	r2, #0
    e93a:	801a      	strh	r2, [r3, #0]

    if (signature == NULL)
    e93c:	683b      	ldr	r3, [r7, #0]
    e93e:	2b00      	cmp	r3, #0
    e940:	d101      	bne.n	e946 <atcab_sign_base+0x2e>
        return ATCA_BAD_PARAM;
    e942:	23e2      	movs	r3, #226	; 0xe2
    e944:	e0a8      	b.n	ea98 <atcab_sign_base+0x180>

    if (!_gDevice)
    e946:	4b56      	ldr	r3, [pc, #344]	; (eaa0 <atcab_sign_base+0x188>)
    e948:	681b      	ldr	r3, [r3, #0]
    e94a:	2b00      	cmp	r3, #0
    e94c:	d101      	bne.n	e952 <atcab_sign_base+0x3a>
        return ATCA_GEN_FAIL;
    e94e:	23e1      	movs	r3, #225	; 0xe1
    e950:	e0a2      	b.n	ea98 <atcab_sign_base+0x180>

    do
    {
        // Build sign command
        packet.param1 = mode;
    e952:	2308      	movs	r3, #8
    e954:	18fb      	adds	r3, r7, r3
    e956:	1dfa      	adds	r2, r7, #7
    e958:	7812      	ldrb	r2, [r2, #0]
    e95a:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
    e95c:	2308      	movs	r3, #8
    e95e:	18fb      	adds	r3, r7, r3
    e960:	1d3a      	adds	r2, r7, #4
    e962:	8812      	ldrh	r2, [r2, #0]
    e964:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(_gCommandObj, &packet)) != ATCA_SUCCESS)
    e966:	4b4f      	ldr	r3, [pc, #316]	; (eaa4 <atcab_sign_base+0x18c>)
    e968:	681b      	ldr	r3, [r3, #0]
    e96a:	2297      	movs	r2, #151	; 0x97
    e96c:	18bc      	adds	r4, r7, r2
    e96e:	2208      	movs	r2, #8
    e970:	18ba      	adds	r2, r7, r2
    e972:	0011      	movs	r1, r2
    e974:	0018      	movs	r0, r3
    e976:	4b4c      	ldr	r3, [pc, #304]	; (eaa8 <atcab_sign_base+0x190>)
    e978:	4798      	blx	r3
    e97a:	0003      	movs	r3, r0
    e97c:	7023      	strb	r3, [r4, #0]
    e97e:	2397      	movs	r3, #151	; 0x97
    e980:	18fb      	adds	r3, r7, r3
    e982:	781b      	ldrb	r3, [r3, #0]
    e984:	2b00      	cmp	r3, #0
    e986:	d000      	beq.n	e98a <atcab_sign_base+0x72>
    e988:	e078      	b.n	ea7c <atcab_sign_base+0x164>
            break;

        execution_time = atGetExecTime(_gCommandObj, CMD_SIGN);
    e98a:	4b46      	ldr	r3, [pc, #280]	; (eaa4 <atcab_sign_base+0x18c>)
    e98c:	681b      	ldr	r3, [r3, #0]
    e98e:	2294      	movs	r2, #148	; 0x94
    e990:	18bc      	adds	r4, r7, r2
    e992:	2111      	movs	r1, #17
    e994:	0018      	movs	r0, r3
    e996:	4b45      	ldr	r3, [pc, #276]	; (eaac <atcab_sign_base+0x194>)
    e998:	4798      	blx	r3
    e99a:	0003      	movs	r3, r0
    e99c:	8023      	strh	r3, [r4, #0]

        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    e99e:	4b44      	ldr	r3, [pc, #272]	; (eab0 <atcab_sign_base+0x198>)
    e9a0:	4798      	blx	r3
    e9a2:	0003      	movs	r3, r0
    e9a4:	001a      	movs	r2, r3
    e9a6:	2397      	movs	r3, #151	; 0x97
    e9a8:	18fb      	adds	r3, r7, r3
    e9aa:	781b      	ldrb	r3, [r3, #0]
    e9ac:	4293      	cmp	r3, r2
    e9ae:	d167      	bne.n	ea80 <atcab_sign_base+0x168>
            break;

        // send the command
        if ( (status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    e9b0:	4b40      	ldr	r3, [pc, #256]	; (eab4 <atcab_sign_base+0x19c>)
    e9b2:	6818      	ldr	r0, [r3, #0]
    e9b4:	2308      	movs	r3, #8
    e9b6:	18fb      	adds	r3, r7, r3
    e9b8:	785b      	ldrb	r3, [r3, #1]
    e9ba:	001a      	movs	r2, r3
    e9bc:	2397      	movs	r3, #151	; 0x97
    e9be:	18fc      	adds	r4, r7, r3
    e9c0:	2308      	movs	r3, #8
    e9c2:	18fb      	adds	r3, r7, r3
    e9c4:	0019      	movs	r1, r3
    e9c6:	4b3c      	ldr	r3, [pc, #240]	; (eab8 <atcab_sign_base+0x1a0>)
    e9c8:	4798      	blx	r3
    e9ca:	0003      	movs	r3, r0
    e9cc:	7023      	strb	r3, [r4, #0]
    e9ce:	2397      	movs	r3, #151	; 0x97
    e9d0:	18fb      	adds	r3, r7, r3
    e9d2:	781b      	ldrb	r3, [r3, #0]
    e9d4:	2b00      	cmp	r3, #0
    e9d6:	d155      	bne.n	ea84 <atcab_sign_base+0x16c>
            break;

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(execution_time);
    e9d8:	2394      	movs	r3, #148	; 0x94
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	881b      	ldrh	r3, [r3, #0]
    e9de:	0018      	movs	r0, r3
    e9e0:	4b36      	ldr	r3, [pc, #216]	; (eabc <atcab_sign_base+0x1a4>)
    e9e2:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(_gIface, packet.data, &(packet.rxsize))) != ATCA_SUCCESS)
    e9e4:	4b33      	ldr	r3, [pc, #204]	; (eab4 <atcab_sign_base+0x19c>)
    e9e6:	6818      	ldr	r0, [r3, #0]
    e9e8:	2397      	movs	r3, #151	; 0x97
    e9ea:	18fc      	adds	r4, r7, r3
    e9ec:	2308      	movs	r3, #8
    e9ee:	18fb      	adds	r3, r7, r3
    e9f0:	338a      	adds	r3, #138	; 0x8a
    e9f2:	001a      	movs	r2, r3
    e9f4:	2308      	movs	r3, #8
    e9f6:	18fb      	adds	r3, r7, r3
    e9f8:	3306      	adds	r3, #6
    e9fa:	0019      	movs	r1, r3
    e9fc:	4b30      	ldr	r3, [pc, #192]	; (eac0 <atcab_sign_base+0x1a8>)
    e9fe:	4798      	blx	r3
    ea00:	0003      	movs	r3, r0
    ea02:	7023      	strb	r3, [r4, #0]
    ea04:	2397      	movs	r3, #151	; 0x97
    ea06:	18fb      	adds	r3, r7, r3
    ea08:	781b      	ldrb	r3, [r3, #0]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d13c      	bne.n	ea88 <atcab_sign_base+0x170>
            break;

        // Check response size
        if (packet.rxsize < 4)
    ea0e:	2308      	movs	r3, #8
    ea10:	18fb      	adds	r3, r7, r3
    ea12:	228a      	movs	r2, #138	; 0x8a
    ea14:	5a9b      	ldrh	r3, [r3, r2]
    ea16:	2b03      	cmp	r3, #3
    ea18:	d80f      	bhi.n	ea3a <atcab_sign_base+0x122>
        {
            if (packet.rxsize > 0)
    ea1a:	2308      	movs	r3, #8
    ea1c:	18fb      	adds	r3, r7, r3
    ea1e:	228a      	movs	r2, #138	; 0x8a
    ea20:	5a9b      	ldrh	r3, [r3, r2]
    ea22:	2b00      	cmp	r3, #0
    ea24:	d004      	beq.n	ea30 <atcab_sign_base+0x118>
                status = ATCA_RX_FAIL;
    ea26:	2397      	movs	r3, #151	; 0x97
    ea28:	18fb      	adds	r3, r7, r3
    ea2a:	22e6      	movs	r2, #230	; 0xe6
    ea2c:	701a      	strb	r2, [r3, #0]
            else
                status = ATCA_RX_NO_RESPONSE;
            break;
    ea2e:	e02e      	b.n	ea8e <atcab_sign_base+0x176>
                status = ATCA_RX_NO_RESPONSE;
    ea30:	2397      	movs	r3, #151	; 0x97
    ea32:	18fb      	adds	r3, r7, r3
    ea34:	22e7      	movs	r2, #231	; 0xe7
    ea36:	701a      	strb	r2, [r3, #0]
            break;
    ea38:	e029      	b.n	ea8e <atcab_sign_base+0x176>
        }

        // check for response
        if ((status = isATCAError(packet.data)) != ATCA_SUCCESS)
    ea3a:	2397      	movs	r3, #151	; 0x97
    ea3c:	18fc      	adds	r4, r7, r3
    ea3e:	2308      	movs	r3, #8
    ea40:	18fb      	adds	r3, r7, r3
    ea42:	3306      	adds	r3, #6
    ea44:	0018      	movs	r0, r3
    ea46:	4b1f      	ldr	r3, [pc, #124]	; (eac4 <atcab_sign_base+0x1ac>)
    ea48:	4798      	blx	r3
    ea4a:	0003      	movs	r3, r0
    ea4c:	7023      	strb	r3, [r4, #0]
    ea4e:	2397      	movs	r3, #151	; 0x97
    ea50:	18fb      	adds	r3, r7, r3
    ea52:	781b      	ldrb	r3, [r3, #0]
    ea54:	2b00      	cmp	r3, #0
    ea56:	d119      	bne.n	ea8c <atcab_sign_base+0x174>
            break;

        if (packet.data[ATCA_COUNT_IDX] > 4)
    ea58:	2308      	movs	r3, #8
    ea5a:	18fb      	adds	r3, r7, r3
    ea5c:	799b      	ldrb	r3, [r3, #6]
    ea5e:	2b04      	cmp	r3, #4
    ea60:	d915      	bls.n	ea8e <atcab_sign_base+0x176>
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
    ea62:	2308      	movs	r3, #8
    ea64:	18fb      	adds	r3, r7, r3
    ea66:	799b      	ldrb	r3, [r3, #6]
    ea68:	3b03      	subs	r3, #3
    ea6a:	001a      	movs	r2, r3
    ea6c:	2308      	movs	r3, #8
    ea6e:	18fb      	adds	r3, r7, r3
    ea70:	1dd9      	adds	r1, r3, #7
    ea72:	683b      	ldr	r3, [r7, #0]
    ea74:	0018      	movs	r0, r3
    ea76:	4b14      	ldr	r3, [pc, #80]	; (eac8 <atcab_sign_base+0x1b0>)
    ea78:	4798      	blx	r3
    ea7a:	e008      	b.n	ea8e <atcab_sign_base+0x176>
            break;
    ea7c:	46c0      	nop			; (mov r8, r8)
    ea7e:	e006      	b.n	ea8e <atcab_sign_base+0x176>
            break;
    ea80:	46c0      	nop			; (mov r8, r8)
    ea82:	e004      	b.n	ea8e <atcab_sign_base+0x176>
            break;
    ea84:	46c0      	nop			; (mov r8, r8)
    ea86:	e002      	b.n	ea8e <atcab_sign_base+0x176>
            break;
    ea88:	46c0      	nop			; (mov r8, r8)
    ea8a:	e000      	b.n	ea8e <atcab_sign_base+0x176>
            break;
    ea8c:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    _atcab_exit();
    ea8e:	4b0f      	ldr	r3, [pc, #60]	; (eacc <atcab_sign_base+0x1b4>)
    ea90:	4798      	blx	r3
    return status;
    ea92:	2397      	movs	r3, #151	; 0x97
    ea94:	18fb      	adds	r3, r7, r3
    ea96:	781b      	ldrb	r3, [r3, #0]
}
    ea98:	0018      	movs	r0, r3
    ea9a:	46bd      	mov	sp, r7
    ea9c:	b027      	add	sp, #156	; 0x9c
    ea9e:	bd90      	pop	{r4, r7, pc}
    eaa0:	200015c8 	.word	0x200015c8
    eaa4:	200015cc 	.word	0x200015cc
    eaa8:	0000d1cd 	.word	0x0000d1cd
    eaac:	0000d2d9 	.word	0x0000d2d9
    eab0:	0000d8e9 	.word	0x0000d8e9
    eab4:	200015d0 	.word	0x200015d0
    eab8:	0000d6bd 	.word	0x0000d6bd
    eabc:	0000f595 	.word	0x0000f595
    eac0:	0000d6df 	.word	0x0000d6df
    eac4:	0000d499 	.word	0x0000d499
    eac8:	0001bab7 	.word	0x0001bab7
    eacc:	0000d979 	.word	0x0000d979

0000ead0 <atcab_sign>:
 *                           curve.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    ead0:	b590      	push	{r4, r7, lr}
    ead2:	b087      	sub	sp, #28
    ead4:	af00      	add	r7, sp, #0
    ead6:	60b9      	str	r1, [r7, #8]
    ead8:	607a      	str	r2, [r7, #4]
    eada:	230e      	movs	r3, #14
    eadc:	18fb      	adds	r3, r7, r3
    eade:	1c02      	adds	r2, r0, #0
    eae0:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    eae2:	2317      	movs	r3, #23
    eae4:	18fb      	adds	r3, r7, r3
    eae6:	22e1      	movs	r2, #225	; 0xe1
    eae8:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ( (status = atcab_random(NULL)) != ATCA_SUCCESS)
    eaea:	2317      	movs	r3, #23
    eaec:	18fc      	adds	r4, r7, r3
    eaee:	2000      	movs	r0, #0
    eaf0:	4b16      	ldr	r3, [pc, #88]	; (eb4c <atcab_sign+0x7c>)
    eaf2:	4798      	blx	r3
    eaf4:	0003      	movs	r3, r0
    eaf6:	7023      	strb	r3, [r4, #0]
    eaf8:	2317      	movs	r3, #23
    eafa:	18fb      	adds	r3, r7, r3
    eafc:	781b      	ldrb	r3, [r3, #0]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d119      	bne.n	eb36 <atcab_sign+0x66>
            break;
        // Load message into TempKey
        if ( (status = atcab_challenge(msg)) != ATCA_SUCCESS)
    eb02:	2317      	movs	r3, #23
    eb04:	18fc      	adds	r4, r7, r3
    eb06:	68bb      	ldr	r3, [r7, #8]
    eb08:	0018      	movs	r0, r3
    eb0a:	4b11      	ldr	r3, [pc, #68]	; (eb50 <atcab_sign+0x80>)
    eb0c:	4798      	blx	r3
    eb0e:	0003      	movs	r3, r0
    eb10:	7023      	strb	r3, [r4, #0]
    eb12:	2317      	movs	r3, #23
    eb14:	18fb      	adds	r3, r7, r3
    eb16:	781b      	ldrb	r3, [r3, #0]
    eb18:	2b00      	cmp	r3, #0
    eb1a:	d10e      	bne.n	eb3a <atcab_sign+0x6a>
            break;
        // Sign the message
        if ( (status = atcab_sign_base(SIGN_MODE_EXTERNAL, key_id, signature)) != ATCA_SUCCESS)
    eb1c:	2317      	movs	r3, #23
    eb1e:	18fc      	adds	r4, r7, r3
    eb20:	687a      	ldr	r2, [r7, #4]
    eb22:	230e      	movs	r3, #14
    eb24:	18fb      	adds	r3, r7, r3
    eb26:	881b      	ldrh	r3, [r3, #0]
    eb28:	0019      	movs	r1, r3
    eb2a:	2080      	movs	r0, #128	; 0x80
    eb2c:	4b09      	ldr	r3, [pc, #36]	; (eb54 <atcab_sign+0x84>)
    eb2e:	4798      	blx	r3
    eb30:	0003      	movs	r3, r0
    eb32:	7023      	strb	r3, [r4, #0]
    eb34:	e002      	b.n	eb3c <atcab_sign+0x6c>
            break;
    eb36:	46c0      	nop			; (mov r8, r8)
    eb38:	e000      	b.n	eb3c <atcab_sign+0x6c>
            break;
    eb3a:	46c0      	nop			; (mov r8, r8)
            break;
    }
    while (0);

    return status;
    eb3c:	2317      	movs	r3, #23
    eb3e:	18fb      	adds	r3, r7, r3
    eb40:	781b      	ldrb	r3, [r3, #0]
}
    eb42:	0018      	movs	r0, r3
    eb44:	46bd      	mov	sp, r7
    eb46:	b007      	add	sp, #28
    eb48:	bd90      	pop	{r4, r7, pc}
    eb4a:	46c0      	nop			; (mov r8, r8)
    eb4c:	0000db31 	.word	0x0000db31
    eb50:	0000def5 	.word	0x0000def5
    eb54:	0000e919 	.word	0x0000e919

0000eb58 <hal_iface_init>:
 * \param[in] cfg pointer to ATCAIfaceCfg object
 * \param[in] hal pointer to ATCAHAL_t intermediate datastructure
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    eb58:	b580      	push	{r7, lr}
    eb5a:	b084      	sub	sp, #16
    eb5c:	af00      	add	r7, sp, #0
    eb5e:	6078      	str	r0, [r7, #4]
    eb60:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    eb62:	230f      	movs	r3, #15
    eb64:	18fb      	adds	r3, r7, r3
    eb66:	22f0      	movs	r2, #240	; 0xf0
    eb68:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
    eb6a:	687b      	ldr	r3, [r7, #4]
    eb6c:	781b      	ldrb	r3, [r3, #0]
    eb6e:	2b05      	cmp	r3, #5
    eb70:	d824      	bhi.n	ebbc <hal_iface_init+0x64>
    eb72:	009a      	lsls	r2, r3, #2
    eb74:	4b16      	ldr	r3, [pc, #88]	; (ebd0 <hal_iface_init+0x78>)
    eb76:	18d3      	adds	r3, r2, r3
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    eb7c:	683b      	ldr	r3, [r7, #0]
    eb7e:	4a15      	ldr	r2, [pc, #84]	; (ebd4 <hal_iface_init+0x7c>)
    eb80:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
    eb82:	683b      	ldr	r3, [r7, #0]
    eb84:	4a14      	ldr	r2, [pc, #80]	; (ebd8 <hal_iface_init+0x80>)
    eb86:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
    eb88:	683b      	ldr	r3, [r7, #0]
    eb8a:	4a14      	ldr	r2, [pc, #80]	; (ebdc <hal_iface_init+0x84>)
    eb8c:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
    eb8e:	683b      	ldr	r3, [r7, #0]
    eb90:	4a13      	ldr	r2, [pc, #76]	; (ebe0 <hal_iface_init+0x88>)
    eb92:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
    eb94:	683b      	ldr	r3, [r7, #0]
    eb96:	4a13      	ldr	r2, [pc, #76]	; (ebe4 <hal_iface_init+0x8c>)
    eb98:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
    eb9a:	683b      	ldr	r3, [r7, #0]
    eb9c:	4a12      	ldr	r2, [pc, #72]	; (ebe8 <hal_iface_init+0x90>)
    eb9e:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
    eba0:	683b      	ldr	r3, [r7, #0]
    eba2:	4a12      	ldr	r2, [pc, #72]	; (ebec <hal_iface_init+0x94>)
    eba4:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
    eba6:	683b      	ldr	r3, [r7, #0]
    eba8:	4a11      	ldr	r2, [pc, #68]	; (ebf0 <hal_iface_init+0x98>)
    ebaa:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
    ebac:	683b      	ldr	r3, [r7, #0]
    ebae:	2200      	movs	r2, #0
    ebb0:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
    ebb2:	230f      	movs	r3, #15
    ebb4:	18fb      	adds	r3, r7, r3
    ebb6:	2200      	movs	r2, #0
    ebb8:	701a      	strb	r2, [r3, #0]
        #endif
        break;
    ebba:	e002      	b.n	ebc2 <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
    ebbc:	46c0      	nop			; (mov r8, r8)
    ebbe:	e000      	b.n	ebc2 <hal_iface_init+0x6a>
        break;
    ebc0:	46c0      	nop			; (mov r8, r8)
    }
    return status;
    ebc2:	230f      	movs	r3, #15
    ebc4:	18fb      	adds	r3, r7, r3
    ebc6:	781b      	ldrb	r3, [r3, #0]
}
    ebc8:	0018      	movs	r0, r3
    ebca:	46bd      	mov	sp, r7
    ebcc:	b004      	add	sp, #16
    ebce:	bd80      	pop	{r7, pc}
    ebd0:	0001e708 	.word	0x0001e708
    ebd4:	0000ee41 	.word	0x0000ee41
    ebd8:	0000f009 	.word	0x0000f009
    ebdc:	0000f0c1 	.word	0x0000f0c1
    ebe0:	0000f01d 	.word	0x0000f01d
    ebe4:	0000f489 	.word	0x0000f489
    ebe8:	0000f2b1 	.word	0x0000f2b1
    ebec:	0000f3f9 	.word	0x0000f3f9
    ebf0:	0000f519 	.word	0x0000f519

0000ebf4 <hal_iface_release>:
 * \param[in] ifacetype - the type of physical interface to release
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType ifacetype, void *hal_data)
{
    ebf4:	b590      	push	{r4, r7, lr}
    ebf6:	b085      	sub	sp, #20
    ebf8:	af00      	add	r7, sp, #0
    ebfa:	0002      	movs	r2, r0
    ebfc:	6039      	str	r1, [r7, #0]
    ebfe:	1dfb      	adds	r3, r7, #7
    ec00:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    ec02:	230f      	movs	r3, #15
    ec04:	18fb      	adds	r3, r7, r3
    ec06:	22e1      	movs	r2, #225	; 0xe1
    ec08:	701a      	strb	r2, [r3, #0]

    switch (ifacetype)
    ec0a:	1dfb      	adds	r3, r7, #7
    ec0c:	781b      	ldrb	r3, [r3, #0]
    ec0e:	2b05      	cmp	r3, #5
    ec10:	d80d      	bhi.n	ec2e <hal_iface_release+0x3a>
    ec12:	009a      	lsls	r2, r3, #2
    ec14:	4b0b      	ldr	r3, [pc, #44]	; (ec44 <hal_iface_release+0x50>)
    ec16:	18d3      	adds	r3, r2, r3
    ec18:	681b      	ldr	r3, [r3, #0]
    ec1a:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
            #ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    ec1c:	230f      	movs	r3, #15
    ec1e:	18fc      	adds	r4, r7, r3
    ec20:	683b      	ldr	r3, [r7, #0]
    ec22:	0018      	movs	r0, r3
    ec24:	4b08      	ldr	r3, [pc, #32]	; (ec48 <hal_iface_release+0x54>)
    ec26:	4798      	blx	r3
    ec28:	0003      	movs	r3, r0
    ec2a:	7023      	strb	r3, [r4, #0]
            #endif
        break;
    ec2c:	e002      	b.n	ec34 <hal_iface_release+0x40>
#ifdef ATCA_HAL_SIM
        status = hal_sim_release(hal_data);
#endif
        break;
    default:
        break;
    ec2e:	46c0      	nop			; (mov r8, r8)
    ec30:	e000      	b.n	ec34 <hal_iface_release+0x40>
        break;
    ec32:	46c0      	nop			; (mov r8, r8)
    }

    return status;
    ec34:	230f      	movs	r3, #15
    ec36:	18fb      	adds	r3, r7, r3
    ec38:	781b      	ldrb	r3, [r3, #0]
}
    ec3a:	0018      	movs	r0, r3
    ec3c:	46bd      	mov	sp, r7
    ec3e:	b005      	add	sp, #20
    ec40:	bd90      	pop	{r4, r7, pc}
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	0001e720 	.word	0x0001e720
    ec48:	0000f519 	.word	0x0000f519

0000ec4c <system_interrupt_enable>:
{
    ec4c:	b580      	push	{r7, lr}
    ec4e:	b082      	sub	sp, #8
    ec50:	af00      	add	r7, sp, #0
    ec52:	0002      	movs	r2, r0
    ec54:	1dfb      	adds	r3, r7, #7
    ec56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ec58:	4b06      	ldr	r3, [pc, #24]	; (ec74 <system_interrupt_enable+0x28>)
    ec5a:	1dfa      	adds	r2, r7, #7
    ec5c:	7812      	ldrb	r2, [r2, #0]
    ec5e:	0011      	movs	r1, r2
    ec60:	221f      	movs	r2, #31
    ec62:	400a      	ands	r2, r1
    ec64:	2101      	movs	r1, #1
    ec66:	4091      	lsls	r1, r2
    ec68:	000a      	movs	r2, r1
    ec6a:	601a      	str	r2, [r3, #0]
}
    ec6c:	46c0      	nop			; (mov r8, r8)
    ec6e:	46bd      	mov	sp, r7
    ec70:	b002      	add	sp, #8
    ec72:	bd80      	pop	{r7, pc}
    ec74:	e000e100 	.word	0xe000e100

0000ec78 <system_interrupt_disable>:
{
    ec78:	b580      	push	{r7, lr}
    ec7a:	b082      	sub	sp, #8
    ec7c:	af00      	add	r7, sp, #0
    ec7e:	0002      	movs	r2, r0
    ec80:	1dfb      	adds	r3, r7, #7
    ec82:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ec84:	4a07      	ldr	r2, [pc, #28]	; (eca4 <system_interrupt_disable+0x2c>)
    ec86:	1dfb      	adds	r3, r7, #7
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	0019      	movs	r1, r3
    ec8c:	231f      	movs	r3, #31
    ec8e:	400b      	ands	r3, r1
    ec90:	2101      	movs	r1, #1
    ec92:	4099      	lsls	r1, r3
    ec94:	000b      	movs	r3, r1
    ec96:	0019      	movs	r1, r3
    ec98:	2380      	movs	r3, #128	; 0x80
    ec9a:	50d1      	str	r1, [r2, r3]
}
    ec9c:	46c0      	nop			; (mov r8, r8)
    ec9e:	46bd      	mov	sp, r7
    eca0:	b002      	add	sp, #8
    eca2:	bd80      	pop	{r7, pc}
    eca4:	e000e100 	.word	0xe000e100

0000eca8 <i2c_master_is_syncing>:
{
    eca8:	b580      	push	{r7, lr}
    ecaa:	b084      	sub	sp, #16
    ecac:	af00      	add	r7, sp, #0
    ecae:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	681b      	ldr	r3, [r3, #0]
    ecb4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    ecb6:	68fb      	ldr	r3, [r7, #12]
    ecb8:	69db      	ldr	r3, [r3, #28]
    ecba:	2207      	movs	r2, #7
    ecbc:	4013      	ands	r3, r2
    ecbe:	1e5a      	subs	r2, r3, #1
    ecc0:	4193      	sbcs	r3, r2
    ecc2:	b2db      	uxtb	r3, r3
}
    ecc4:	0018      	movs	r0, r3
    ecc6:	46bd      	mov	sp, r7
    ecc8:	b004      	add	sp, #16
    ecca:	bd80      	pop	{r7, pc}

0000eccc <_i2c_master_wait_for_sync>:
{
    eccc:	b580      	push	{r7, lr}
    ecce:	b082      	sub	sp, #8
    ecd0:	af00      	add	r7, sp, #0
    ecd2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    ecd4:	46c0      	nop			; (mov r8, r8)
    ecd6:	687b      	ldr	r3, [r7, #4]
    ecd8:	0018      	movs	r0, r3
    ecda:	4b04      	ldr	r3, [pc, #16]	; (ecec <_i2c_master_wait_for_sync+0x20>)
    ecdc:	4798      	blx	r3
    ecde:	1e03      	subs	r3, r0, #0
    ece0:	d1f9      	bne.n	ecd6 <_i2c_master_wait_for_sync+0xa>
}
    ece2:	46c0      	nop			; (mov r8, r8)
    ece4:	46bd      	mov	sp, r7
    ece6:	b002      	add	sp, #8
    ece8:	bd80      	pop	{r7, pc}
    ecea:	46c0      	nop			; (mov r8, r8)
    ecec:	0000eca9 	.word	0x0000eca9

0000ecf0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    ecf0:	b580      	push	{r7, lr}
    ecf2:	b082      	sub	sp, #8
    ecf4:	af00      	add	r7, sp, #0
    ecf6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    ecf8:	687b      	ldr	r3, [r7, #4]
    ecfa:	2264      	movs	r2, #100	; 0x64
    ecfc:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    ecfe:	687b      	ldr	r3, [r7, #4]
    ed00:	4a1b      	ldr	r2, [pc, #108]	; (ed70 <i2c_master_get_config_defaults+0x80>)
    ed02:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    ed04:	687b      	ldr	r3, [r7, #4]
    ed06:	2200      	movs	r2, #0
    ed08:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    ed0a:	687b      	ldr	r3, [r7, #4]
    ed0c:	2200      	movs	r2, #0
    ed0e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    ed10:	687b      	ldr	r3, [r7, #4]
    ed12:	2200      	movs	r2, #0
    ed14:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	2280      	movs	r2, #128	; 0x80
    ed1a:	0392      	lsls	r2, r2, #14
    ed1c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    ed1e:	687b      	ldr	r3, [r7, #4]
    ed20:	2201      	movs	r2, #1
    ed22:	4252      	negs	r2, r2
    ed24:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	2201      	movs	r2, #1
    ed2a:	4252      	negs	r2, r2
    ed2c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT; // Changes
    ed2e:	687b      	ldr	r3, [r7, #4]
    ed30:	2200      	movs	r2, #0
    ed32:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT; // Changes
    ed34:	687b      	ldr	r3, [r7, #4]
    ed36:	2200      	movs	r2, #0
    ed38:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    ed3a:	687b      	ldr	r3, [r7, #4]
    ed3c:	2224      	movs	r2, #36	; 0x24
    ed3e:	2100      	movs	r1, #0
    ed40:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    ed42:	687b      	ldr	r3, [r7, #4]
    ed44:	2200      	movs	r2, #0
    ed46:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    ed48:	687b      	ldr	r3, [r7, #4]
    ed4a:	222c      	movs	r2, #44	; 0x2c
    ed4c:	2100      	movs	r1, #0
    ed4e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    ed50:	687b      	ldr	r3, [r7, #4]
    ed52:	222d      	movs	r2, #45	; 0x2d
    ed54:	2100      	movs	r1, #0
    ed56:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	222e      	movs	r2, #46	; 0x2e
    ed5c:	2100      	movs	r1, #0
    ed5e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	22d7      	movs	r2, #215	; 0xd7
    ed64:	861a      	strh	r2, [r3, #48]	; 0x30
}
    ed66:	46c0      	nop			; (mov r8, r8)
    ed68:	46bd      	mov	sp, r7
    ed6a:	b002      	add	sp, #8
    ed6c:	bd80      	pop	{r7, pc}
    ed6e:	46c0      	nop			; (mov r8, r8)
    ed70:	00000d48 	.word	0x00000d48

0000ed74 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    ed74:	b580      	push	{r7, lr}
    ed76:	b084      	sub	sp, #16
    ed78:	af00      	add	r7, sp, #0
    ed7a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ed7c:	687b      	ldr	r3, [r7, #4]
    ed7e:	681b      	ldr	r3, [r3, #0]
    ed80:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    ed82:	2300      	movs	r3, #0
    ed84:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    ed86:	687b      	ldr	r3, [r7, #4]
    ed88:	0018      	movs	r0, r3
    ed8a:	4b14      	ldr	r3, [pc, #80]	; (eddc <i2c_master_enable+0x68>)
    ed8c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    ed8e:	68bb      	ldr	r3, [r7, #8]
    ed90:	681b      	ldr	r3, [r3, #0]
    ed92:	2202      	movs	r2, #2
    ed94:	431a      	orrs	r2, r3
    ed96:	68bb      	ldr	r3, [r7, #8]
    ed98:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ed9a:	687b      	ldr	r3, [r7, #4]
    ed9c:	681b      	ldr	r3, [r3, #0]
    ed9e:	0018      	movs	r0, r3
    eda0:	4b0f      	ldr	r3, [pc, #60]	; (ede0 <i2c_master_enable+0x6c>)
    eda2:	4798      	blx	r3
    eda4:	0003      	movs	r3, r0
    eda6:	0018      	movs	r0, r3
    eda8:	4b0e      	ldr	r3, [pc, #56]	; (ede4 <i2c_master_enable+0x70>)
    edaa:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    edac:	e00c      	b.n	edc8 <i2c_master_enable+0x54>
		timeout_counter++;
    edae:	68fb      	ldr	r3, [r7, #12]
    edb0:	3301      	adds	r3, #1
    edb2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    edb4:	687b      	ldr	r3, [r7, #4]
    edb6:	88db      	ldrh	r3, [r3, #6]
    edb8:	001a      	movs	r2, r3
    edba:	68fb      	ldr	r3, [r7, #12]
    edbc:	429a      	cmp	r2, r3
    edbe:	d803      	bhi.n	edc8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    edc0:	68bb      	ldr	r3, [r7, #8]
    edc2:	2210      	movs	r2, #16
    edc4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    edc6:	e006      	b.n	edd6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    edc8:	68bb      	ldr	r3, [r7, #8]
    edca:	8b5b      	ldrh	r3, [r3, #26]
    edcc:	b29b      	uxth	r3, r3
    edce:	001a      	movs	r2, r3
    edd0:	2310      	movs	r3, #16
    edd2:	4013      	ands	r3, r2
    edd4:	d0eb      	beq.n	edae <i2c_master_enable+0x3a>
		}
	}
}
    edd6:	46bd      	mov	sp, r7
    edd8:	b004      	add	sp, #16
    edda:	bd80      	pop	{r7, pc}
    eddc:	0000eccd 	.word	0x0000eccd
    ede0:	000144cd 	.word	0x000144cd
    ede4:	0000ec4d 	.word	0x0000ec4d

0000ede8 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    ede8:	b580      	push	{r7, lr}
    edea:	b084      	sub	sp, #16
    edec:	af00      	add	r7, sp, #0
    edee:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    edf0:	687b      	ldr	r3, [r7, #4]
    edf2:	681b      	ldr	r3, [r3, #0]
    edf4:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	681b      	ldr	r3, [r3, #0]
    edfa:	0018      	movs	r0, r3
    edfc:	4b0d      	ldr	r3, [pc, #52]	; (ee34 <i2c_master_disable+0x4c>)
    edfe:	4798      	blx	r3
    ee00:	0003      	movs	r3, r0
    ee02:	0018      	movs	r0, r3
    ee04:	4b0c      	ldr	r3, [pc, #48]	; (ee38 <i2c_master_disable+0x50>)
    ee06:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    ee08:	687b      	ldr	r3, [r7, #4]
    ee0a:	0018      	movs	r0, r3
    ee0c:	4b0b      	ldr	r3, [pc, #44]	; (ee3c <i2c_master_disable+0x54>)
    ee0e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    ee10:	68fb      	ldr	r3, [r7, #12]
    ee12:	2283      	movs	r2, #131	; 0x83
    ee14:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    ee16:	68fb      	ldr	r3, [r7, #12]
    ee18:	2283      	movs	r2, #131	; 0x83
    ee1a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    ee1c:	68fb      	ldr	r3, [r7, #12]
    ee1e:	681b      	ldr	r3, [r3, #0]
    ee20:	2202      	movs	r2, #2
    ee22:	4393      	bics	r3, r2
    ee24:	001a      	movs	r2, r3
    ee26:	68fb      	ldr	r3, [r7, #12]
    ee28:	601a      	str	r2, [r3, #0]

}
    ee2a:	46c0      	nop			; (mov r8, r8)
    ee2c:	46bd      	mov	sp, r7
    ee2e:	b004      	add	sp, #16
    ee30:	bd80      	pop	{r7, pc}
    ee32:	46c0      	nop			; (mov r8, r8)
    ee34:	000144cd 	.word	0x000144cd
    ee38:	0000ec79 	.word	0x0000ec79
    ee3c:	0000eccd 	.word	0x0000eccd

0000ee40 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    ee40:	b580      	push	{r7, lr}
    ee42:	b086      	sub	sp, #24
    ee44:	af00      	add	r7, sp, #0
    ee46:	6078      	str	r0, [r7, #4]
    ee48:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    ee4a:	683b      	ldr	r3, [r7, #0]
    ee4c:	795b      	ldrb	r3, [r3, #5]
    ee4e:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
    ee50:	687b      	ldr	r3, [r7, #4]
    ee52:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
    ee54:	4b5c      	ldr	r3, [pc, #368]	; (efc8 <hal_i2c_init+0x188>)
    ee56:	681b      	ldr	r3, [r3, #0]
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d10d      	bne.n	ee78 <hal_i2c_init+0x38>
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    ee5c:	2300      	movs	r3, #0
    ee5e:	617b      	str	r3, [r7, #20]
    ee60:	e007      	b.n	ee72 <hal_i2c_init+0x32>
            i2c_hal_data[i] = NULL;
    ee62:	4b5a      	ldr	r3, [pc, #360]	; (efcc <hal_i2c_init+0x18c>)
    ee64:	697a      	ldr	r2, [r7, #20]
    ee66:	0092      	lsls	r2, r2, #2
    ee68:	2100      	movs	r1, #0
    ee6a:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
    ee6c:	697b      	ldr	r3, [r7, #20]
    ee6e:	3301      	adds	r3, #1
    ee70:	617b      	str	r3, [r7, #20]
    ee72:	697b      	ldr	r3, [r7, #20]
    ee74:	2b05      	cmp	r3, #5
    ee76:	ddf4      	ble.n	ee62 <hal_i2c_init+0x22>

    i2c_bus_ref_ct++;  // total across buses
    ee78:	4b53      	ldr	r3, [pc, #332]	; (efc8 <hal_i2c_init+0x188>)
    ee7a:	681b      	ldr	r3, [r3, #0]
    ee7c:	1c5a      	adds	r2, r3, #1
    ee7e:	4b52      	ldr	r3, [pc, #328]	; (efc8 <hal_i2c_init+0x188>)
    ee80:	601a      	str	r2, [r3, #0]
    if (bus >= 0 && bus < MAX_I2C_BUSES)
    ee82:	693b      	ldr	r3, [r7, #16]
    ee84:	2b00      	cmp	r3, #0
    ee86:	da00      	bge.n	ee8a <hal_i2c_init+0x4a>
    ee88:	e099      	b.n	efbe <hal_i2c_init+0x17e>
    ee8a:	693b      	ldr	r3, [r7, #16]
    ee8c:	2b05      	cmp	r3, #5
    ee8e:	dd00      	ble.n	ee92 <hal_i2c_init+0x52>
    ee90:	e095      	b.n	efbe <hal_i2c_init+0x17e>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
    ee92:	4b4e      	ldr	r3, [pc, #312]	; (efcc <hal_i2c_init+0x18c>)
    ee94:	693a      	ldr	r2, [r7, #16]
    ee96:	0092      	lsls	r2, r2, #2
    ee98:	58d3      	ldr	r3, [r2, r3]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d000      	beq.n	eea0 <hal_i2c_init+0x60>
    ee9e:	e07f      	b.n	efa0 <hal_i2c_init+0x160>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
    eea0:	2030      	movs	r0, #48	; 0x30
    eea2:	4b4b      	ldr	r3, [pc, #300]	; (efd0 <hal_i2c_init+0x190>)
    eea4:	4798      	blx	r3
    eea6:	0003      	movs	r3, r0
    eea8:	0019      	movs	r1, r3
    eeaa:	4b48      	ldr	r3, [pc, #288]	; (efcc <hal_i2c_init+0x18c>)
    eeac:	693a      	ldr	r2, [r7, #16]
    eeae:	0092      	lsls	r2, r2, #2
    eeb0:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    eeb2:	4b46      	ldr	r3, [pc, #280]	; (efcc <hal_i2c_init+0x18c>)
    eeb4:	693a      	ldr	r2, [r7, #16]
    eeb6:	0092      	lsls	r2, r2, #2
    eeb8:	58d3      	ldr	r3, [r2, r3]
    eeba:	2201      	movs	r2, #1
    eebc:	629a      	str	r2, [r3, #40]	; 0x28
            i2c_master_get_config_defaults(&config_i2c_master);
    eebe:	4b45      	ldr	r3, [pc, #276]	; (efd4 <hal_i2c_init+0x194>)
    eec0:	0018      	movs	r0, r3
    eec2:	4b45      	ldr	r3, [pc, #276]	; (efd8 <hal_i2c_init+0x198>)
    eec4:	4798      	blx	r3
#ifdef __SAMR30G18A__
            if (bus == 1)
    eec6:	693b      	ldr	r3, [r7, #16]
    eec8:	2b01      	cmp	r3, #1
    eeca:	d105      	bne.n	eed8 <hal_i2c_init+0x98>
            {
                config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    eecc:	4b41      	ldr	r3, [pc, #260]	; (efd4 <hal_i2c_init+0x194>)
    eece:	4a43      	ldr	r2, [pc, #268]	; (efdc <hal_i2c_init+0x19c>)
    eed0:	61da      	str	r2, [r3, #28]
                config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    eed2:	4b40      	ldr	r3, [pc, #256]	; (efd4 <hal_i2c_init+0x194>)
    eed4:	4a42      	ldr	r2, [pc, #264]	; (efe0 <hal_i2c_init+0x1a0>)
    eed6:	621a      	str	r2, [r3, #32]
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    eed8:	683b      	ldr	r3, [r7, #0]
    eeda:	6898      	ldr	r0, [r3, #8]
    eedc:	4b41      	ldr	r3, [pc, #260]	; (efe4 <hal_i2c_init+0x1a4>)
    eede:	22fa      	movs	r2, #250	; 0xfa
    eee0:	0091      	lsls	r1, r2, #2
    eee2:	4798      	blx	r3
    eee4:	0003      	movs	r3, r0
    eee6:	001a      	movs	r2, r3
    eee8:	4b3a      	ldr	r3, [pc, #232]	; (efd4 <hal_i2c_init+0x194>)
    eeea:	601a      	str	r2, [r3, #0]

            switch (bus)
    eeec:	693b      	ldr	r3, [r7, #16]
    eeee:	2b05      	cmp	r3, #5
    eef0:	d848      	bhi.n	ef84 <hal_i2c_init+0x144>
    eef2:	693b      	ldr	r3, [r7, #16]
    eef4:	009a      	lsls	r2, r3, #2
    eef6:	4b3c      	ldr	r3, [pc, #240]	; (efe8 <hal_i2c_init+0x1a8>)
    eef8:	18d3      	adds	r3, r2, r3
    eefa:	681b      	ldr	r3, [r3, #0]
    eefc:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    eefe:	4b33      	ldr	r3, [pc, #204]	; (efcc <hal_i2c_init+0x18c>)
    ef00:	693a      	ldr	r2, [r7, #16]
    ef02:	0092      	lsls	r2, r2, #2
    ef04:	58d3      	ldr	r3, [r2, r3]
    ef06:	0018      	movs	r0, r3
    ef08:	4a32      	ldr	r2, [pc, #200]	; (efd4 <hal_i2c_init+0x194>)
    ef0a:	2384      	movs	r3, #132	; 0x84
    ef0c:	05db      	lsls	r3, r3, #23
    ef0e:	0019      	movs	r1, r3
    ef10:	4b36      	ldr	r3, [pc, #216]	; (efec <hal_i2c_init+0x1ac>)
    ef12:	4798      	blx	r3
    ef14:	e036      	b.n	ef84 <hal_i2c_init+0x144>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    ef16:	4b2d      	ldr	r3, [pc, #180]	; (efcc <hal_i2c_init+0x18c>)
    ef18:	693a      	ldr	r2, [r7, #16]
    ef1a:	0092      	lsls	r2, r2, #2
    ef1c:	58d3      	ldr	r3, [r2, r3]
    ef1e:	0018      	movs	r0, r3
    ef20:	4b2c      	ldr	r3, [pc, #176]	; (efd4 <hal_i2c_init+0x194>)
    ef22:	4933      	ldr	r1, [pc, #204]	; (eff0 <hal_i2c_init+0x1b0>)
    ef24:	001a      	movs	r2, r3
    ef26:	4b31      	ldr	r3, [pc, #196]	; (efec <hal_i2c_init+0x1ac>)
    ef28:	4798      	blx	r3
    ef2a:	e02b      	b.n	ef84 <hal_i2c_init+0x144>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    ef2c:	4b27      	ldr	r3, [pc, #156]	; (efcc <hal_i2c_init+0x18c>)
    ef2e:	693a      	ldr	r2, [r7, #16]
    ef30:	0092      	lsls	r2, r2, #2
    ef32:	58d3      	ldr	r3, [r2, r3]
    ef34:	0018      	movs	r0, r3
    ef36:	4b27      	ldr	r3, [pc, #156]	; (efd4 <hal_i2c_init+0x194>)
    ef38:	492e      	ldr	r1, [pc, #184]	; (eff4 <hal_i2c_init+0x1b4>)
    ef3a:	001a      	movs	r2, r3
    ef3c:	4b2b      	ldr	r3, [pc, #172]	; (efec <hal_i2c_init+0x1ac>)
    ef3e:	4798      	blx	r3
    ef40:	e020      	b.n	ef84 <hal_i2c_init+0x144>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    ef42:	4b22      	ldr	r3, [pc, #136]	; (efcc <hal_i2c_init+0x18c>)
    ef44:	693a      	ldr	r2, [r7, #16]
    ef46:	0092      	lsls	r2, r2, #2
    ef48:	58d3      	ldr	r3, [r2, r3]
    ef4a:	0018      	movs	r0, r3
    ef4c:	4b21      	ldr	r3, [pc, #132]	; (efd4 <hal_i2c_init+0x194>)
    ef4e:	492a      	ldr	r1, [pc, #168]	; (eff8 <hal_i2c_init+0x1b8>)
    ef50:	001a      	movs	r2, r3
    ef52:	4b26      	ldr	r3, [pc, #152]	; (efec <hal_i2c_init+0x1ac>)
    ef54:	4798      	blx	r3
    ef56:	e015      	b.n	ef84 <hal_i2c_init+0x144>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    ef58:	4b1c      	ldr	r3, [pc, #112]	; (efcc <hal_i2c_init+0x18c>)
    ef5a:	693a      	ldr	r2, [r7, #16]
    ef5c:	0092      	lsls	r2, r2, #2
    ef5e:	58d3      	ldr	r3, [r2, r3]
    ef60:	0018      	movs	r0, r3
    ef62:	4b1c      	ldr	r3, [pc, #112]	; (efd4 <hal_i2c_init+0x194>)
    ef64:	4925      	ldr	r1, [pc, #148]	; (effc <hal_i2c_init+0x1bc>)
    ef66:	001a      	movs	r2, r3
    ef68:	4b20      	ldr	r3, [pc, #128]	; (efec <hal_i2c_init+0x1ac>)
    ef6a:	4798      	blx	r3
    ef6c:	e00a      	b.n	ef84 <hal_i2c_init+0x144>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    ef6e:	4b17      	ldr	r3, [pc, #92]	; (efcc <hal_i2c_init+0x18c>)
    ef70:	693a      	ldr	r2, [r7, #16]
    ef72:	0092      	lsls	r2, r2, #2
    ef74:	58d3      	ldr	r3, [r2, r3]
    ef76:	0018      	movs	r0, r3
    ef78:	4b16      	ldr	r3, [pc, #88]	; (efd4 <hal_i2c_init+0x194>)
    ef7a:	4921      	ldr	r1, [pc, #132]	; (f000 <hal_i2c_init+0x1c0>)
    ef7c:	001a      	movs	r2, r3
    ef7e:	4b1b      	ldr	r3, [pc, #108]	; (efec <hal_i2c_init+0x1ac>)
    ef80:	4798      	blx	r3
    ef82:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
    ef84:	4b11      	ldr	r3, [pc, #68]	; (efcc <hal_i2c_init+0x18c>)
    ef86:	693a      	ldr	r2, [r7, #16]
    ef88:	0092      	lsls	r2, r2, #2
    ef8a:	58d3      	ldr	r3, [r2, r3]
    ef8c:	693a      	ldr	r2, [r7, #16]
    ef8e:	62da      	str	r2, [r3, #44]	; 0x2c
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    ef90:	4b0e      	ldr	r3, [pc, #56]	; (efcc <hal_i2c_init+0x18c>)
    ef92:	693a      	ldr	r2, [r7, #16]
    ef94:	0092      	lsls	r2, r2, #2
    ef96:	58d3      	ldr	r3, [r2, r3]
    ef98:	0018      	movs	r0, r3
    ef9a:	4b1a      	ldr	r3, [pc, #104]	; (f004 <hal_i2c_init+0x1c4>)
    ef9c:	4798      	blx	r3
    ef9e:	e006      	b.n	efae <hal_i2c_init+0x16e>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
    efa0:	4b0a      	ldr	r3, [pc, #40]	; (efcc <hal_i2c_init+0x18c>)
    efa2:	693a      	ldr	r2, [r7, #16]
    efa4:	0092      	lsls	r2, r2, #2
    efa6:	58d3      	ldr	r3, [r2, r3]
    efa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    efaa:	3201      	adds	r2, #1
    efac:	629a      	str	r2, [r3, #40]	; 0x28
        }

        phal->hal_data = i2c_hal_data[bus];
    efae:	4b07      	ldr	r3, [pc, #28]	; (efcc <hal_i2c_init+0x18c>)
    efb0:	693a      	ldr	r2, [r7, #16]
    efb2:	0092      	lsls	r2, r2, #2
    efb4:	58d2      	ldr	r2, [r2, r3]
    efb6:	68fb      	ldr	r3, [r7, #12]
    efb8:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
    efba:	2300      	movs	r3, #0
    efbc:	e000      	b.n	efc0 <hal_i2c_init+0x180>
    }

    return ATCA_COMM_FAIL;
    efbe:	23f0      	movs	r3, #240	; 0xf0
}
    efc0:	0018      	movs	r0, r3
    efc2:	46bd      	mov	sp, r7
    efc4:	b006      	add	sp, #24
    efc6:	bd80      	pop	{r7, pc}
    efc8:	200015d4 	.word	0x200015d4
    efcc:	20001c6c 	.word	0x20001c6c
    efd0:	0001ba71 	.word	0x0001ba71
    efd4:	200015d8 	.word	0x200015d8
    efd8:	0000ecf1 	.word	0x0000ecf1
    efdc:	00100002 	.word	0x00100002
    efe0:	00110002 	.word	0x00110002
    efe4:	00019ae9 	.word	0x00019ae9
    efe8:	0001e778 	.word	0x0001e778
    efec:	00013745 	.word	0x00013745
    eff0:	42000400 	.word	0x42000400
    eff4:	42000800 	.word	0x42000800
    eff8:	42000c00 	.word	0x42000c00
    effc:	42001000 	.word	0x42001000
    f000:	43000400 	.word	0x43000400
    f004:	0000ed75 	.word	0x0000ed75

0000f008 <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    f008:	b580      	push	{r7, lr}
    f00a:	b082      	sub	sp, #8
    f00c:	af00      	add	r7, sp, #0
    f00e:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
    f010:	2300      	movs	r3, #0
}
    f012:	0018      	movs	r0, r3
    f014:	46bd      	mov	sp, r7
    f016:	b002      	add	sp, #8
    f018:	bd80      	pop	{r7, pc}
	...

0000f01c <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    f01c:	b580      	push	{r7, lr}
    f01e:	b08a      	sub	sp, #40	; 0x28
    f020:	af00      	add	r7, sp, #0
    f022:	60f8      	str	r0, [r7, #12]
    f024:	60b9      	str	r1, [r7, #8]
    f026:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f028:	68fb      	ldr	r3, [r7, #12]
    f02a:	0018      	movs	r0, r3
    f02c:	4b21      	ldr	r3, [pc, #132]	; (f0b4 <hal_i2c_send+0x98>)
    f02e:	4798      	blx	r3
    f030:	0003      	movs	r3, r0
    f032:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f036:	795b      	ldrb	r3, [r3, #5]
    f038:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f03c:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    f03e:	085b      	lsrs	r3, r3, #1
    f040:	b2db      	uxtb	r3, r3
    f042:	b29a      	uxth	r2, r3
    f044:	2314      	movs	r3, #20
    f046:	18fb      	adds	r3, r7, r3
    f048:	801a      	strh	r2, [r3, #0]
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	b29a      	uxth	r2, r3
    f04e:	2314      	movs	r3, #20
    f050:	18fb      	adds	r3, r7, r3
    f052:	805a      	strh	r2, [r3, #2]
    f054:	2314      	movs	r3, #20
    f056:	18fb      	adds	r3, r7, r3
    f058:	68ba      	ldr	r2, [r7, #8]
    f05a:	605a      	str	r2, [r3, #4]
    f05c:	2314      	movs	r3, #20
    f05e:	18fb      	adds	r3, r7, r3
    f060:	2200      	movs	r2, #0
    f062:	721a      	strb	r2, [r3, #8]
    f064:	2314      	movs	r3, #20
    f066:	18fb      	adds	r3, r7, r3
    f068:	2200      	movs	r2, #0
    f06a:	725a      	strb	r2, [r3, #9]
    f06c:	2314      	movs	r3, #20
    f06e:	18fb      	adds	r3, r7, r3
    f070:	2200      	movs	r2, #0
    f072:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    f074:	68bb      	ldr	r3, [r7, #8]
    f076:	2203      	movs	r2, #3
    f078:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
    f07a:	687b      	ldr	r3, [r7, #4]
    f07c:	3301      	adds	r3, #1
    f07e:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	b29a      	uxth	r2, r3
    f084:	2314      	movs	r3, #20
    f086:	18fb      	adds	r3, r7, r3
    f088:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    f08a:	4b0b      	ldr	r3, [pc, #44]	; (f0b8 <hal_i2c_send+0x9c>)
    f08c:	6a3a      	ldr	r2, [r7, #32]
    f08e:	0092      	lsls	r2, r2, #2
    f090:	58d3      	ldr	r3, [r2, r3]
    f092:	001a      	movs	r2, r3
    f094:	2314      	movs	r3, #20
    f096:	18fb      	adds	r3, r7, r3
    f098:	0019      	movs	r1, r3
    f09a:	0010      	movs	r0, r2
    f09c:	4b07      	ldr	r3, [pc, #28]	; (f0bc <hal_i2c_send+0xa0>)
    f09e:	4798      	blx	r3
    f0a0:	1e03      	subs	r3, r0, #0
    f0a2:	d001      	beq.n	f0a8 <hal_i2c_send+0x8c>
        return ATCA_COMM_FAIL;
    f0a4:	23f0      	movs	r3, #240	; 0xf0
    f0a6:	e000      	b.n	f0aa <hal_i2c_send+0x8e>

    return ATCA_SUCCESS;
    f0a8:	2300      	movs	r3, #0
}
    f0aa:	0018      	movs	r0, r3
    f0ac:	46bd      	mov	sp, r7
    f0ae:	b00a      	add	sp, #40	; 0x28
    f0b0:	bd80      	pop	{r7, pc}
    f0b2:	46c0      	nop			; (mov r8, r8)
    f0b4:	0000d785 	.word	0x0000d785
    f0b8:	20001c6c 	.word	0x20001c6c
    f0bc:	00013e41 	.word	0x00013e41

0000f0c0 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    f0c0:	b580      	push	{r7, lr}
    f0c2:	b08c      	sub	sp, #48	; 0x30
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	60f8      	str	r0, [r7, #12]
    f0c8:	60b9      	str	r1, [r7, #8]
    f0ca:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f0cc:	68fb      	ldr	r3, [r7, #12]
    f0ce:	0018      	movs	r0, r3
    f0d0:	4b29      	ldr	r3, [pc, #164]	; (f178 <hal_i2c_receive+0xb8>)
    f0d2:	4798      	blx	r3
    f0d4:	0003      	movs	r3, r0
    f0d6:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0da:	795b      	ldrb	r3, [r3, #5]
    f0dc:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    f0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
    f0e4:	2301      	movs	r3, #1
    f0e6:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0ea:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    f0ec:	085b      	lsrs	r3, r3, #1
    f0ee:	b2db      	uxtb	r3, r3
    f0f0:	b29a      	uxth	r2, r3
    f0f2:	2314      	movs	r3, #20
    f0f4:	18fb      	adds	r3, r7, r3
    f0f6:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
    f0f8:	687b      	ldr	r3, [r7, #4]
    f0fa:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
    f0fc:	2314      	movs	r3, #20
    f0fe:	18fb      	adds	r3, r7, r3
    f100:	805a      	strh	r2, [r3, #2]
    f102:	2314      	movs	r3, #20
    f104:	18fb      	adds	r3, r7, r3
    f106:	68ba      	ldr	r2, [r7, #8]
    f108:	605a      	str	r2, [r3, #4]
    f10a:	2314      	movs	r3, #20
    f10c:	18fb      	adds	r3, r7, r3
    f10e:	2200      	movs	r2, #0
    f110:	721a      	strb	r2, [r3, #8]
    f112:	2314      	movs	r3, #20
    f114:	18fb      	adds	r3, r7, r3
    f116:	2200      	movs	r2, #0
    f118:	725a      	strb	r2, [r3, #9]
    f11a:	2314      	movs	r3, #20
    f11c:	18fb      	adds	r3, r7, r3
    f11e:	2200      	movs	r2, #0
    f120:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
    f122:	e00c      	b.n	f13e <hal_i2c_receive+0x7e>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    f124:	4b15      	ldr	r3, [pc, #84]	; (f17c <hal_i2c_receive+0xbc>)
    f126:	6a3a      	ldr	r2, [r7, #32]
    f128:	0092      	lsls	r2, r2, #2
    f12a:	58d3      	ldr	r3, [r2, r3]
    f12c:	001a      	movs	r2, r3
    f12e:	2314      	movs	r3, #20
    f130:	18fb      	adds	r3, r7, r3
    f132:	0019      	movs	r1, r3
    f134:	0010      	movs	r0, r2
    f136:	4b12      	ldr	r3, [pc, #72]	; (f180 <hal_i2c_receive+0xc0>)
    f138:	4798      	blx	r3
    f13a:	0003      	movs	r3, r0
    f13c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f140:	1e5a      	subs	r2, r3, #1
    f142:	62fa      	str	r2, [r7, #44]	; 0x2c
    f144:	2b00      	cmp	r3, #0
    f146:	dd02      	ble.n	f14e <hal_i2c_receive+0x8e>
    f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f14a:	2b00      	cmp	r3, #0
    f14c:	d1ea      	bne.n	f124 <hal_i2c_receive+0x64>

    if (status != STATUS_OK)
    f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f150:	2b00      	cmp	r3, #0
    f152:	d001      	beq.n	f158 <hal_i2c_receive+0x98>
        return ATCA_COMM_FAIL;
    f154:	23f0      	movs	r3, #240	; 0xf0
    f156:	e00a      	b.n	f16e <hal_i2c_receive+0xae>

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
    f158:	2314      	movs	r3, #20
    f15a:	18fb      	adds	r3, r7, r3
    f15c:	685b      	ldr	r3, [r3, #4]
    f15e:	0018      	movs	r0, r3
    f160:	4b08      	ldr	r3, [pc, #32]	; (f184 <hal_i2c_receive+0xc4>)
    f162:	4798      	blx	r3
    f164:	1e03      	subs	r3, r0, #0
    f166:	d001      	beq.n	f16c <hal_i2c_receive+0xac>
        return ATCA_COMM_FAIL;
    f168:	23f0      	movs	r3, #240	; 0xf0
    f16a:	e000      	b.n	f16e <hal_i2c_receive+0xae>

    return ATCA_SUCCESS;
    f16c:	2300      	movs	r3, #0
}
    f16e:	0018      	movs	r0, r3
    f170:	46bd      	mov	sp, r7
    f172:	b00c      	add	sp, #48	; 0x30
    f174:	bd80      	pop	{r7, pc}
    f176:	46c0      	nop			; (mov r8, r8)
    f178:	0000d785 	.word	0x0000d785
    f17c:	20001c6c 	.word	0x20001c6c
    f180:	00013c89 	.word	0x00013c89
    f184:	0000d419 	.word	0x0000d419

0000f188 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    f188:	b580      	push	{r7, lr}
    f18a:	b084      	sub	sp, #16
    f18c:	af00      	add	r7, sp, #0
    f18e:	6078      	str	r0, [r7, #4]
    f190:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	0018      	movs	r0, r3
    f196:	4b38      	ldr	r3, [pc, #224]	; (f278 <change_i2c_speed+0xf0>)
    f198:	4798      	blx	r3
    f19a:	0003      	movs	r3, r0
    f19c:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
    f19e:	68fb      	ldr	r3, [r7, #12]
    f1a0:	795b      	ldrb	r3, [r3, #5]
    f1a2:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
    f1a4:	4b35      	ldr	r3, [pc, #212]	; (f27c <change_i2c_speed+0xf4>)
    f1a6:	4a36      	ldr	r2, [pc, #216]	; (f280 <change_i2c_speed+0xf8>)
    f1a8:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
    f1aa:	6838      	ldr	r0, [r7, #0]
    f1ac:	4b35      	ldr	r3, [pc, #212]	; (f284 <change_i2c_speed+0xfc>)
    f1ae:	22fa      	movs	r2, #250	; 0xfa
    f1b0:	0091      	lsls	r1, r2, #2
    f1b2:	4798      	blx	r3
    f1b4:	0003      	movs	r3, r0
    f1b6:	001a      	movs	r2, r3
    f1b8:	4b30      	ldr	r3, [pc, #192]	; (f27c <change_i2c_speed+0xf4>)
    f1ba:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    f1bc:	4b32      	ldr	r3, [pc, #200]	; (f288 <change_i2c_speed+0x100>)
    f1be:	68ba      	ldr	r2, [r7, #8]
    f1c0:	0092      	lsls	r2, r2, #2
    f1c2:	58d3      	ldr	r3, [r2, r3]
    f1c4:	0018      	movs	r0, r3
    f1c6:	4b31      	ldr	r3, [pc, #196]	; (f28c <change_i2c_speed+0x104>)
    f1c8:	4798      	blx	r3

    switch (bus)
    f1ca:	68bb      	ldr	r3, [r7, #8]
    f1cc:	2b05      	cmp	r3, #5
    f1ce:	d848      	bhi.n	f262 <change_i2c_speed+0xda>
    f1d0:	68bb      	ldr	r3, [r7, #8]
    f1d2:	009a      	lsls	r2, r3, #2
    f1d4:	4b2e      	ldr	r3, [pc, #184]	; (f290 <change_i2c_speed+0x108>)
    f1d6:	18d3      	adds	r3, r2, r3
    f1d8:	681b      	ldr	r3, [r3, #0]
    f1da:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    f1dc:	4b2a      	ldr	r3, [pc, #168]	; (f288 <change_i2c_speed+0x100>)
    f1de:	68ba      	ldr	r2, [r7, #8]
    f1e0:	0092      	lsls	r2, r2, #2
    f1e2:	58d3      	ldr	r3, [r2, r3]
    f1e4:	0018      	movs	r0, r3
    f1e6:	4a25      	ldr	r2, [pc, #148]	; (f27c <change_i2c_speed+0xf4>)
    f1e8:	2384      	movs	r3, #132	; 0x84
    f1ea:	05db      	lsls	r3, r3, #23
    f1ec:	0019      	movs	r1, r3
    f1ee:	4b29      	ldr	r3, [pc, #164]	; (f294 <change_i2c_speed+0x10c>)
    f1f0:	4798      	blx	r3
    f1f2:	e036      	b.n	f262 <change_i2c_speed+0xda>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    f1f4:	4b24      	ldr	r3, [pc, #144]	; (f288 <change_i2c_speed+0x100>)
    f1f6:	68ba      	ldr	r2, [r7, #8]
    f1f8:	0092      	lsls	r2, r2, #2
    f1fa:	58d3      	ldr	r3, [r2, r3]
    f1fc:	0018      	movs	r0, r3
    f1fe:	4b1f      	ldr	r3, [pc, #124]	; (f27c <change_i2c_speed+0xf4>)
    f200:	4925      	ldr	r1, [pc, #148]	; (f298 <change_i2c_speed+0x110>)
    f202:	001a      	movs	r2, r3
    f204:	4b23      	ldr	r3, [pc, #140]	; (f294 <change_i2c_speed+0x10c>)
    f206:	4798      	blx	r3
    f208:	e02b      	b.n	f262 <change_i2c_speed+0xda>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    f20a:	4b1f      	ldr	r3, [pc, #124]	; (f288 <change_i2c_speed+0x100>)
    f20c:	68ba      	ldr	r2, [r7, #8]
    f20e:	0092      	lsls	r2, r2, #2
    f210:	58d3      	ldr	r3, [r2, r3]
    f212:	0018      	movs	r0, r3
    f214:	4b19      	ldr	r3, [pc, #100]	; (f27c <change_i2c_speed+0xf4>)
    f216:	4921      	ldr	r1, [pc, #132]	; (f29c <change_i2c_speed+0x114>)
    f218:	001a      	movs	r2, r3
    f21a:	4b1e      	ldr	r3, [pc, #120]	; (f294 <change_i2c_speed+0x10c>)
    f21c:	4798      	blx	r3
    f21e:	e020      	b.n	f262 <change_i2c_speed+0xda>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    f220:	4b19      	ldr	r3, [pc, #100]	; (f288 <change_i2c_speed+0x100>)
    f222:	68ba      	ldr	r2, [r7, #8]
    f224:	0092      	lsls	r2, r2, #2
    f226:	58d3      	ldr	r3, [r2, r3]
    f228:	0018      	movs	r0, r3
    f22a:	4b14      	ldr	r3, [pc, #80]	; (f27c <change_i2c_speed+0xf4>)
    f22c:	491c      	ldr	r1, [pc, #112]	; (f2a0 <change_i2c_speed+0x118>)
    f22e:	001a      	movs	r2, r3
    f230:	4b18      	ldr	r3, [pc, #96]	; (f294 <change_i2c_speed+0x10c>)
    f232:	4798      	blx	r3
    f234:	e015      	b.n	f262 <change_i2c_speed+0xda>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    f236:	4b14      	ldr	r3, [pc, #80]	; (f288 <change_i2c_speed+0x100>)
    f238:	68ba      	ldr	r2, [r7, #8]
    f23a:	0092      	lsls	r2, r2, #2
    f23c:	58d3      	ldr	r3, [r2, r3]
    f23e:	0018      	movs	r0, r3
    f240:	4b0e      	ldr	r3, [pc, #56]	; (f27c <change_i2c_speed+0xf4>)
    f242:	4918      	ldr	r1, [pc, #96]	; (f2a4 <change_i2c_speed+0x11c>)
    f244:	001a      	movs	r2, r3
    f246:	4b13      	ldr	r3, [pc, #76]	; (f294 <change_i2c_speed+0x10c>)
    f248:	4798      	blx	r3
    f24a:	e00a      	b.n	f262 <change_i2c_speed+0xda>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    f24c:	4b0e      	ldr	r3, [pc, #56]	; (f288 <change_i2c_speed+0x100>)
    f24e:	68ba      	ldr	r2, [r7, #8]
    f250:	0092      	lsls	r2, r2, #2
    f252:	58d3      	ldr	r3, [r2, r3]
    f254:	0018      	movs	r0, r3
    f256:	4b09      	ldr	r3, [pc, #36]	; (f27c <change_i2c_speed+0xf4>)
    f258:	4913      	ldr	r1, [pc, #76]	; (f2a8 <change_i2c_speed+0x120>)
    f25a:	001a      	movs	r2, r3
    f25c:	4b0d      	ldr	r3, [pc, #52]	; (f294 <change_i2c_speed+0x10c>)
    f25e:	4798      	blx	r3
    f260:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    f262:	4b09      	ldr	r3, [pc, #36]	; (f288 <change_i2c_speed+0x100>)
    f264:	68ba      	ldr	r2, [r7, #8]
    f266:	0092      	lsls	r2, r2, #2
    f268:	58d3      	ldr	r3, [r2, r3]
    f26a:	0018      	movs	r0, r3
    f26c:	4b0f      	ldr	r3, [pc, #60]	; (f2ac <change_i2c_speed+0x124>)
    f26e:	4798      	blx	r3
}
    f270:	46c0      	nop			; (mov r8, r8)
    f272:	46bd      	mov	sp, r7
    f274:	b004      	add	sp, #16
    f276:	bd80      	pop	{r7, pc}
    f278:	0000d785 	.word	0x0000d785
    f27c:	200015d8 	.word	0x200015d8
    f280:	00002710 	.word	0x00002710
    f284:	00019ae9 	.word	0x00019ae9
    f288:	20001c6c 	.word	0x20001c6c
    f28c:	0000ede9 	.word	0x0000ede9
    f290:	0001e790 	.word	0x0001e790
    f294:	00013745 	.word	0x00013745
    f298:	42000400 	.word	0x42000400
    f29c:	42000800 	.word	0x42000800
    f2a0:	42000c00 	.word	0x42000c00
    f2a4:	42001000 	.word	0x42001000
    f2a8:	43000400 	.word	0x43000400
    f2ac:	0000ed75 	.word	0x0000ed75

0000f2b0 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    f2b0:	b580      	push	{r7, lr}
    f2b2:	b08c      	sub	sp, #48	; 0x30
    f2b4:	af00      	add	r7, sp, #0
    f2b6:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	0018      	movs	r0, r3
    f2bc:	4b45      	ldr	r3, [pc, #276]	; (f3d4 <hal_i2c_wake+0x124>)
    f2be:	4798      	blx	r3
    f2c0:	0003      	movs	r3, r0
    f2c2:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
    f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2c6:	795b      	ldrb	r3, [r3, #5]
    f2c8:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
    f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
    f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2d2:	689b      	ldr	r3, [r3, #8]
    f2d4:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
    f2d6:	2301      	movs	r3, #1
    f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    f2da:	2314      	movs	r3, #20
    f2dc:	18fb      	adds	r3, r7, r3
    f2de:	4a3e      	ldr	r2, [pc, #248]	; (f3d8 <hal_i2c_wake+0x128>)
    f2e0:	6812      	ldr	r2, [r2, #0]
    f2e2:	601a      	str	r2, [r3, #0]
    if (bdrt != 100000)    // if not already at 100KHz, change it
    f2e4:	69fb      	ldr	r3, [r7, #28]
    f2e6:	4a3d      	ldr	r2, [pc, #244]	; (f3dc <hal_i2c_wake+0x12c>)
    f2e8:	4293      	cmp	r3, r2
    f2ea:	d005      	beq.n	f2f8 <hal_i2c_wake+0x48>
        change_i2c_speed(iface, 100000);
    f2ec:	4a3b      	ldr	r2, [pc, #236]	; (f3dc <hal_i2c_wake+0x12c>)
    f2ee:	687b      	ldr	r3, [r7, #4]
    f2f0:	0011      	movs	r1, r2
    f2f2:	0018      	movs	r0, r3
    f2f4:	4b3a      	ldr	r3, [pc, #232]	; (f3e0 <hal_i2c_wake+0x130>)
    f2f6:	4798      	blx	r3

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    f2f8:	2308      	movs	r3, #8
    f2fa:	18fb      	adds	r3, r7, r3
    f2fc:	2200      	movs	r2, #0
    f2fe:	801a      	strh	r2, [r3, #0]
    f300:	2308      	movs	r3, #8
    f302:	18fb      	adds	r3, r7, r3
    f304:	2200      	movs	r2, #0
    f306:	805a      	strh	r2, [r3, #2]
    f308:	2308      	movs	r3, #8
    f30a:	18fb      	adds	r3, r7, r3
    f30c:	2218      	movs	r2, #24
    f30e:	18ba      	adds	r2, r7, r2
    f310:	605a      	str	r2, [r3, #4]
    f312:	2308      	movs	r3, #8
    f314:	18fb      	adds	r3, r7, r3
    f316:	2200      	movs	r2, #0
    f318:	721a      	strb	r2, [r3, #8]
    f31a:	2308      	movs	r3, #8
    f31c:	18fb      	adds	r3, r7, r3
    f31e:	2200      	movs	r2, #0
    f320:	725a      	strb	r2, [r3, #9]
    f322:	2308      	movs	r3, #8
    f324:	18fb      	adds	r3, r7, r3
    f326:	2200      	movs	r2, #0
    f328:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
    f32a:	4b2e      	ldr	r3, [pc, #184]	; (f3e4 <hal_i2c_wake+0x134>)
    f32c:	6a3a      	ldr	r2, [r7, #32]
    f32e:	0092      	lsls	r2, r2, #2
    f330:	58d3      	ldr	r3, [r2, r3]
    f332:	001a      	movs	r2, r3
    f334:	2308      	movs	r3, #8
    f336:	18fb      	adds	r3, r7, r3
    f338:	0019      	movs	r1, r3
    f33a:	0010      	movs	r0, r2
    f33c:	4b2a      	ldr	r3, [pc, #168]	; (f3e8 <hal_i2c_wake+0x138>)
    f33e:	4798      	blx	r3

    ///atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
	atca_delay_ms(1);
    f340:	2001      	movs	r0, #1
    f342:	4b2a      	ldr	r3, [pc, #168]	; (f3ec <hal_i2c_wake+0x13c>)
    f344:	4798      	blx	r3
    packet.address = cfg->atcai2c.slave_address >> 1;
    f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f348:	791b      	ldrb	r3, [r3, #4]
    f34a:	085b      	lsrs	r3, r3, #1
    f34c:	b2db      	uxtb	r3, r3
    f34e:	b29a      	uxth	r2, r3
    f350:	2308      	movs	r3, #8
    f352:	18fb      	adds	r3, r7, r3
    f354:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
    f356:	2308      	movs	r3, #8
    f358:	18fb      	adds	r3, r7, r3
    f35a:	2204      	movs	r2, #4
    f35c:	805a      	strh	r2, [r3, #2]
    packet.data = data;
    f35e:	2308      	movs	r3, #8
    f360:	18fb      	adds	r3, r7, r3
    f362:	2218      	movs	r2, #24
    f364:	18ba      	adds	r2, r7, r2
    f366:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
    f368:	e00c      	b.n	f384 <hal_i2c_wake+0xd4>
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
    f36a:	4b1e      	ldr	r3, [pc, #120]	; (f3e4 <hal_i2c_wake+0x134>)
    f36c:	6a3a      	ldr	r2, [r7, #32]
    f36e:	0092      	lsls	r2, r2, #2
    f370:	58d3      	ldr	r3, [r2, r3]
    f372:	001a      	movs	r2, r3
    f374:	2308      	movs	r3, #8
    f376:	18fb      	adds	r3, r7, r3
    f378:	0019      	movs	r1, r3
    f37a:	0010      	movs	r0, r2
    f37c:	4b1c      	ldr	r3, [pc, #112]	; (f3f0 <hal_i2c_wake+0x140>)
    f37e:	4798      	blx	r3
    f380:	0003      	movs	r3, r0
    f382:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
    f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f386:	1e5a      	subs	r2, r3, #1
    f388:	62fa      	str	r2, [r7, #44]	; 0x2c
    f38a:	2b00      	cmp	r3, #0
    f38c:	dd02      	ble.n	f394 <hal_i2c_wake+0xe4>
    f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f390:	2b00      	cmp	r3, #0
    f392:	d1ea      	bne.n	f36a <hal_i2c_wake+0xba>

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    f394:	69fb      	ldr	r3, [r7, #28]
    f396:	4a11      	ldr	r2, [pc, #68]	; (f3dc <hal_i2c_wake+0x12c>)
    f398:	4293      	cmp	r3, r2
    f39a:	d005      	beq.n	f3a8 <hal_i2c_wake+0xf8>
        change_i2c_speed(iface, bdrt);
    f39c:	69fa      	ldr	r2, [r7, #28]
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	0011      	movs	r1, r2
    f3a2:	0018      	movs	r0, r3
    f3a4:	4b0e      	ldr	r3, [pc, #56]	; (f3e0 <hal_i2c_wake+0x130>)
    f3a6:	4798      	blx	r3

    if (status != STATUS_OK)
    f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f3aa:	2b00      	cmp	r3, #0
    f3ac:	d001      	beq.n	f3b2 <hal_i2c_wake+0x102>
        return ATCA_COMM_FAIL;
    f3ae:	23f0      	movs	r3, #240	; 0xf0
    f3b0:	e00c      	b.n	f3cc <hal_i2c_wake+0x11c>

    if (memcmp(data, expected, 4) == 0)
    f3b2:	2314      	movs	r3, #20
    f3b4:	18f9      	adds	r1, r7, r3
    f3b6:	2318      	movs	r3, #24
    f3b8:	18fb      	adds	r3, r7, r3
    f3ba:	2204      	movs	r2, #4
    f3bc:	0018      	movs	r0, r3
    f3be:	4b0d      	ldr	r3, [pc, #52]	; (f3f4 <hal_i2c_wake+0x144>)
    f3c0:	4798      	blx	r3
    f3c2:	1e03      	subs	r3, r0, #0
    f3c4:	d101      	bne.n	f3ca <hal_i2c_wake+0x11a>
        return ATCA_SUCCESS;
    f3c6:	2300      	movs	r3, #0
    f3c8:	e000      	b.n	f3cc <hal_i2c_wake+0x11c>

    return ATCA_COMM_FAIL;
    f3ca:	23f0      	movs	r3, #240	; 0xf0
}
    f3cc:	0018      	movs	r0, r3
    f3ce:	46bd      	mov	sp, r7
    f3d0:	b00c      	add	sp, #48	; 0x30
    f3d2:	bd80      	pop	{r7, pc}
    f3d4:	0000d785 	.word	0x0000d785
    f3d8:	0001e774 	.word	0x0001e774
    f3dc:	000186a0 	.word	0x000186a0
    f3e0:	0000f189 	.word	0x0000f189
    f3e4:	20001c6c 	.word	0x20001c6c
    f3e8:	00013e41 	.word	0x00013e41
    f3ec:	0000f595 	.word	0x0000f595
    f3f0:	00013c89 	.word	0x00013c89
    f3f4:	0001ba99 	.word	0x0001ba99

0000f3f8 <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b088      	sub	sp, #32
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	0018      	movs	r0, r3
    f404:	4b1d      	ldr	r3, [pc, #116]	; (f47c <hal_i2c_idle+0x84>)
    f406:	4798      	blx	r3
    f408:	0003      	movs	r3, r0
    f40a:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    f40c:	69fb      	ldr	r3, [r7, #28]
    f40e:	795b      	ldrb	r3, [r3, #5]
    f410:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    f412:	69fb      	ldr	r3, [r7, #28]
    f414:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    f416:	085b      	lsrs	r3, r3, #1
    f418:	b2db      	uxtb	r3, r3
    f41a:	b29a      	uxth	r2, r3
    f41c:	2308      	movs	r3, #8
    f41e:	18fb      	adds	r3, r7, r3
    f420:	801a      	strh	r2, [r3, #0]
    f422:	2308      	movs	r3, #8
    f424:	18fb      	adds	r3, r7, r3
    f426:	2201      	movs	r2, #1
    f428:	805a      	strh	r2, [r3, #2]
    f42a:	2308      	movs	r3, #8
    f42c:	18fb      	adds	r3, r7, r3
    f42e:	2214      	movs	r2, #20
    f430:	18ba      	adds	r2, r7, r2
    f432:	605a      	str	r2, [r3, #4]
    f434:	2308      	movs	r3, #8
    f436:	18fb      	adds	r3, r7, r3
    f438:	2200      	movs	r2, #0
    f43a:	721a      	strb	r2, [r3, #8]
    f43c:	2308      	movs	r3, #8
    f43e:	18fb      	adds	r3, r7, r3
    f440:	2200      	movs	r2, #0
    f442:	725a      	strb	r2, [r3, #9]
    f444:	2308      	movs	r3, #8
    f446:	18fb      	adds	r3, r7, r3
    f448:	2200      	movs	r2, #0
    f44a:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    f44c:	2314      	movs	r3, #20
    f44e:	18fb      	adds	r3, r7, r3
    f450:	2202      	movs	r2, #2
    f452:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    f454:	4b0a      	ldr	r3, [pc, #40]	; (f480 <hal_i2c_idle+0x88>)
    f456:	69ba      	ldr	r2, [r7, #24]
    f458:	0092      	lsls	r2, r2, #2
    f45a:	58d3      	ldr	r3, [r2, r3]
    f45c:	001a      	movs	r2, r3
    f45e:	2308      	movs	r3, #8
    f460:	18fb      	adds	r3, r7, r3
    f462:	0019      	movs	r1, r3
    f464:	0010      	movs	r0, r2
    f466:	4b07      	ldr	r3, [pc, #28]	; (f484 <hal_i2c_idle+0x8c>)
    f468:	4798      	blx	r3
    f46a:	1e03      	subs	r3, r0, #0
    f46c:	d001      	beq.n	f472 <hal_i2c_idle+0x7a>
        return ATCA_COMM_FAIL;
    f46e:	23f0      	movs	r3, #240	; 0xf0
    f470:	e000      	b.n	f474 <hal_i2c_idle+0x7c>

    return ATCA_SUCCESS;
    f472:	2300      	movs	r3, #0

}
    f474:	0018      	movs	r0, r3
    f476:	46bd      	mov	sp, r7
    f478:	b008      	add	sp, #32
    f47a:	bd80      	pop	{r7, pc}
    f47c:	0000d785 	.word	0x0000d785
    f480:	20001c6c 	.word	0x20001c6c
    f484:	00013e41 	.word	0x00013e41

0000f488 <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    f488:	b580      	push	{r7, lr}
    f48a:	b088      	sub	sp, #32
    f48c:	af00      	add	r7, sp, #0
    f48e:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    f490:	687b      	ldr	r3, [r7, #4]
    f492:	0018      	movs	r0, r3
    f494:	4b1d      	ldr	r3, [pc, #116]	; (f50c <hal_i2c_sleep+0x84>)
    f496:	4798      	blx	r3
    f498:	0003      	movs	r3, r0
    f49a:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
    f49c:	69fb      	ldr	r3, [r7, #28]
    f49e:	795b      	ldrb	r3, [r3, #5]
    f4a0:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];
    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
    f4a2:	69fb      	ldr	r3, [r7, #28]
    f4a4:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
    f4a6:	085b      	lsrs	r3, r3, #1
    f4a8:	b2db      	uxtb	r3, r3
    f4aa:	b29a      	uxth	r2, r3
    f4ac:	2308      	movs	r3, #8
    f4ae:	18fb      	adds	r3, r7, r3
    f4b0:	801a      	strh	r2, [r3, #0]
    f4b2:	2308      	movs	r3, #8
    f4b4:	18fb      	adds	r3, r7, r3
    f4b6:	2201      	movs	r2, #1
    f4b8:	805a      	strh	r2, [r3, #2]
    f4ba:	2308      	movs	r3, #8
    f4bc:	18fb      	adds	r3, r7, r3
    f4be:	2214      	movs	r2, #20
    f4c0:	18ba      	adds	r2, r7, r2
    f4c2:	605a      	str	r2, [r3, #4]
    f4c4:	2308      	movs	r3, #8
    f4c6:	18fb      	adds	r3, r7, r3
    f4c8:	2200      	movs	r2, #0
    f4ca:	721a      	strb	r2, [r3, #8]
    f4cc:	2308      	movs	r3, #8
    f4ce:	18fb      	adds	r3, r7, r3
    f4d0:	2200      	movs	r2, #0
    f4d2:	725a      	strb	r2, [r3, #9]
    f4d4:	2308      	movs	r3, #8
    f4d6:	18fb      	adds	r3, r7, r3
    f4d8:	2200      	movs	r2, #0
    f4da:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    f4dc:	2314      	movs	r3, #20
    f4de:	18fb      	adds	r3, r7, r3
    f4e0:	2201      	movs	r2, #1
    f4e2:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    f4e4:	4b0a      	ldr	r3, [pc, #40]	; (f510 <hal_i2c_sleep+0x88>)
    f4e6:	69ba      	ldr	r2, [r7, #24]
    f4e8:	0092      	lsls	r2, r2, #2
    f4ea:	58d3      	ldr	r3, [r2, r3]
    f4ec:	001a      	movs	r2, r3
    f4ee:	2308      	movs	r3, #8
    f4f0:	18fb      	adds	r3, r7, r3
    f4f2:	0019      	movs	r1, r3
    f4f4:	0010      	movs	r0, r2
    f4f6:	4b07      	ldr	r3, [pc, #28]	; (f514 <hal_i2c_sleep+0x8c>)
    f4f8:	4798      	blx	r3
    f4fa:	1e03      	subs	r3, r0, #0
    f4fc:	d001      	beq.n	f502 <hal_i2c_sleep+0x7a>
        return ATCA_COMM_FAIL;
    f4fe:	23f0      	movs	r3, #240	; 0xf0
    f500:	e000      	b.n	f504 <hal_i2c_sleep+0x7c>

    return ATCA_SUCCESS;
    f502:	2300      	movs	r3, #0
}
    f504:	0018      	movs	r0, r3
    f506:	46bd      	mov	sp, r7
    f508:	b008      	add	sp, #32
    f50a:	bd80      	pop	{r7, pc}
    f50c:	0000d785 	.word	0x0000d785
    f510:	20001c6c 	.word	0x20001c6c
    f514:	00013e41 	.word	0x00013e41

0000f518 <hal_i2c_release>:
/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    f518:	b580      	push	{r7, lr}
    f51a:	b084      	sub	sp, #16
    f51c:	af00      	add	r7, sp, #0
    f51e:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    f524:	4b17      	ldr	r3, [pc, #92]	; (f584 <hal_i2c_release+0x6c>)
    f526:	681b      	ldr	r3, [r3, #0]
    f528:	1e5a      	subs	r2, r3, #1
    f52a:	4b16      	ldr	r3, [pc, #88]	; (f584 <hal_i2c_release+0x6c>)
    f52c:	601a      	str	r2, [r3, #0]
    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
    f52e:	68fb      	ldr	r3, [r7, #12]
    f530:	2b00      	cmp	r3, #0
    f532:	d021      	beq.n	f578 <hal_i2c_release+0x60>
    f534:	68fb      	ldr	r3, [r7, #12]
    f536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f538:	1e5a      	subs	r2, r3, #1
    f53a:	68fb      	ldr	r3, [r7, #12]
    f53c:	629a      	str	r2, [r3, #40]	; 0x28
    f53e:	68fb      	ldr	r3, [r7, #12]
    f540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f542:	2b00      	cmp	r3, #0
    f544:	dc18      	bgt.n	f578 <hal_i2c_release+0x60>
    f546:	68fb      	ldr	r3, [r7, #12]
    f548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f54a:	4b0f      	ldr	r3, [pc, #60]	; (f588 <hal_i2c_release+0x70>)
    f54c:	0092      	lsls	r2, r2, #2
    f54e:	58d3      	ldr	r3, [r2, r3]
    f550:	2b00      	cmp	r3, #0
    f552:	d011      	beq.n	f578 <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
    f554:	68fb      	ldr	r3, [r7, #12]
    f556:	0018      	movs	r0, r3
    f558:	4b0c      	ldr	r3, [pc, #48]	; (f58c <hal_i2c_release+0x74>)
    f55a:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
    f55c:	68fb      	ldr	r3, [r7, #12]
    f55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f560:	4b09      	ldr	r3, [pc, #36]	; (f588 <hal_i2c_release+0x70>)
    f562:	0092      	lsls	r2, r2, #2
    f564:	58d3      	ldr	r3, [r2, r3]
    f566:	0018      	movs	r0, r3
    f568:	4b09      	ldr	r3, [pc, #36]	; (f590 <hal_i2c_release+0x78>)
    f56a:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
    f56c:	68fb      	ldr	r3, [r7, #12]
    f56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f570:	4b05      	ldr	r3, [pc, #20]	; (f588 <hal_i2c_release+0x70>)
    f572:	0092      	lsls	r2, r2, #2
    f574:	2100      	movs	r1, #0
    f576:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
    f578:	2300      	movs	r3, #0
}
    f57a:	0018      	movs	r0, r3
    f57c:	46bd      	mov	sp, r7
    f57e:	b004      	add	sp, #16
    f580:	bd80      	pop	{r7, pc}
    f582:	46c0      	nop			; (mov r8, r8)
    f584:	200015d4 	.word	0x200015d4
    f588:	20001c6c 	.word	0x20001c6c
    f58c:	0001389d 	.word	0x0001389d
    f590:	0001ba85 	.word	0x0001ba85

0000f594 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    f594:	b580      	push	{r7, lr}
    f596:	b082      	sub	sp, #8
    f598:	af00      	add	r7, sp, #0
    f59a:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
    f59c:	687b      	ldr	r3, [r7, #4]
    f59e:	2b00      	cmp	r3, #0
    f5a0:	d004      	beq.n	f5ac <atca_delay_ms+0x18>
    f5a2:	687b      	ldr	r3, [r7, #4]
    f5a4:	0018      	movs	r0, r3
    f5a6:	4b05      	ldr	r3, [pc, #20]	; (f5bc <atca_delay_ms+0x28>)
    f5a8:	4798      	blx	r3
}
    f5aa:	e002      	b.n	f5b2 <atca_delay_ms+0x1e>
    delay_ms(delay);
    f5ac:	2001      	movs	r0, #1
    f5ae:	4b04      	ldr	r3, [pc, #16]	; (f5c0 <atca_delay_ms+0x2c>)
    f5b0:	4798      	blx	r3
}
    f5b2:	46c0      	nop			; (mov r8, r8)
    f5b4:	46bd      	mov	sp, r7
    f5b6:	b002      	add	sp, #8
    f5b8:	bd80      	pop	{r7, pc}
    f5ba:	46c0      	nop			; (mov r8, r8)
    f5bc:	000126fd 	.word	0x000126fd
    f5c0:	000126cd 	.word	0x000126cd

0000f5c4 <atcatls_sign>:
 *  \param[in] message A pointer to the 32 byte message to be signed
 *  \param[out] signature A pointer that will hold the 64 byte P256 signature
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_sign(uint8_t slotid, const uint8_t *message, uint8_t *signature)
{
    f5c4:	b590      	push	{r4, r7, lr}
    f5c6:	b087      	sub	sp, #28
    f5c8:	af00      	add	r7, sp, #0
    f5ca:	60b9      	str	r1, [r7, #8]
    f5cc:	607a      	str	r2, [r7, #4]
    f5ce:	230f      	movs	r3, #15
    f5d0:	18fb      	adds	r3, r7, r3
    f5d2:	1c02      	adds	r2, r0, #0
    f5d4:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f5d6:	2317      	movs	r3, #23
    f5d8:	18fb      	adds	r3, r7, r3
    f5da:	2200      	movs	r2, #0
    f5dc:	701a      	strb	r2, [r3, #0]

    do
    {
        // Check the inputs
        if (message == NULL || signature == NULL)
    f5de:	68bb      	ldr	r3, [r7, #8]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d002      	beq.n	f5ea <atcatls_sign+0x26>
    f5e4:	687b      	ldr	r3, [r7, #4]
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d104      	bne.n	f5f4 <atcatls_sign+0x30>
        {
            status = ATCA_BAD_PARAM;
    f5ea:	2317      	movs	r3, #23
    f5ec:	18fb      	adds	r3, r7, r3
    f5ee:	22e2      	movs	r2, #226	; 0xe2
    f5f0:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Bad input parameters");
    f5f2:	e00c      	b.n	f60e <atcatls_sign+0x4a>
        }
        // Sign the message
        if ((status = atcab_sign(slotid, message, signature)) != ATCA_SUCCESS)
    f5f4:	230f      	movs	r3, #15
    f5f6:	18fb      	adds	r3, r7, r3
    f5f8:	781b      	ldrb	r3, [r3, #0]
    f5fa:	b29b      	uxth	r3, r3
    f5fc:	2217      	movs	r2, #23
    f5fe:	18bc      	adds	r4, r7, r2
    f600:	687a      	ldr	r2, [r7, #4]
    f602:	68b9      	ldr	r1, [r7, #8]
    f604:	0018      	movs	r0, r3
    f606:	4b05      	ldr	r3, [pc, #20]	; (f61c <atcatls_sign+0x58>)
    f608:	4798      	blx	r3
    f60a:	0003      	movs	r3, r0
    f60c:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Sign Failed");

    }
    while (0);

    return status;
    f60e:	2317      	movs	r3, #23
    f610:	18fb      	adds	r3, r7, r3
    f612:	781b      	ldrb	r3, [r3, #0]
}
    f614:	0018      	movs	r0, r3
    f616:	46bd      	mov	sp, r7
    f618:	b007      	add	sp, #28
    f61a:	bd90      	pop	{r4, r7, pc}
    f61c:	0000ead1 	.word	0x0000ead1

0000f620 <atcatls_verify>:
 *  \param[in] pubkey A pointer to the 64 byte P256 public key used for verificaion
 *  \param[out] verified A pointer to the boolean result of this verify operation
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_verify(const uint8_t *message, const uint8_t *signature, const uint8_t *pubkey, bool *verified)
{
    f620:	b5b0      	push	{r4, r5, r7, lr}
    f622:	b086      	sub	sp, #24
    f624:	af00      	add	r7, sp, #0
    f626:	60f8      	str	r0, [r7, #12]
    f628:	60b9      	str	r1, [r7, #8]
    f62a:	607a      	str	r2, [r7, #4]
    f62c:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f62e:	2317      	movs	r3, #23
    f630:	18fb      	adds	r3, r7, r3
    f632:	2200      	movs	r2, #0
    f634:	701a      	strb	r2, [r3, #0]

    do
    {
        // Check the inputs
        if (message == NULL || signature == NULL || pubkey == NULL || verified == NULL)
    f636:	68fb      	ldr	r3, [r7, #12]
    f638:	2b00      	cmp	r3, #0
    f63a:	d008      	beq.n	f64e <atcatls_verify+0x2e>
    f63c:	68bb      	ldr	r3, [r7, #8]
    f63e:	2b00      	cmp	r3, #0
    f640:	d005      	beq.n	f64e <atcatls_verify+0x2e>
    f642:	687b      	ldr	r3, [r7, #4]
    f644:	2b00      	cmp	r3, #0
    f646:	d002      	beq.n	f64e <atcatls_verify+0x2e>
    f648:	683b      	ldr	r3, [r7, #0]
    f64a:	2b00      	cmp	r3, #0
    f64c:	d104      	bne.n	f658 <atcatls_verify+0x38>
        {
            status = ATCA_BAD_PARAM;
    f64e:	2317      	movs	r3, #23
    f650:	18fb      	adds	r3, r7, r3
    f652:	22e2      	movs	r2, #226	; 0xe2
    f654:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Bad input parameters");
    f656:	e009      	b.n	f66c <atcatls_verify+0x4c>
        }
        // Verify the signature of the message
        if ((status = atcab_verify_extern(message, signature, pubkey, verified)) != ATCA_SUCCESS)
    f658:	2317      	movs	r3, #23
    f65a:	18fc      	adds	r4, r7, r3
    f65c:	683b      	ldr	r3, [r7, #0]
    f65e:	687a      	ldr	r2, [r7, #4]
    f660:	68b9      	ldr	r1, [r7, #8]
    f662:	68f8      	ldr	r0, [r7, #12]
    f664:	4d05      	ldr	r5, [pc, #20]	; (f67c <atcatls_verify+0x5c>)
    f666:	47a8      	blx	r5
    f668:	0003      	movs	r3, r0
    f66a:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Verify Failed");

    }
    while (0);

    return status;
    f66c:	2317      	movs	r3, #23
    f66e:	18fb      	adds	r3, r7, r3
    f670:	781b      	ldrb	r3, [r3, #0]
}
    f672:	0018      	movs	r0, r3
    f674:	46bd      	mov	sp, r7
    f676:	b006      	add	sp, #24
    f678:	bdb0      	pop	{r4, r5, r7, pc}
    f67a:	46c0      	nop			; (mov r8, r8)
    f67c:	0000e2fd 	.word	0x0000e2fd

0000f680 <atcatls_create_key>:
 *  \param[in] slotid The slot id to create the ECC private key
 *  \param[out] pubkey Pointer the public key bytes that coorespond to the private key that was created
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcatls_create_key(uint8_t slotid, uint8_t* pubkey)
{
    f680:	b590      	push	{r4, r7, lr}
    f682:	b085      	sub	sp, #20
    f684:	af00      	add	r7, sp, #0
    f686:	0002      	movs	r2, r0
    f688:	6039      	str	r1, [r7, #0]
    f68a:	1dfb      	adds	r3, r7, #7
    f68c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f68e:	230f      	movs	r3, #15
    f690:	18fb      	adds	r3, r7, r3
    f692:	2200      	movs	r2, #0
    f694:	701a      	strb	r2, [r3, #0]

    do
    {
        // Verify input parameters
        if (pubkey == NULL)
    f696:	683b      	ldr	r3, [r7, #0]
    f698:	2b00      	cmp	r3, #0
    f69a:	d104      	bne.n	f6a6 <atcatls_create_key+0x26>
        {
            status = ATCA_BAD_PARAM;
    f69c:	230f      	movs	r3, #15
    f69e:	18fb      	adds	r3, r7, r3
    f6a0:	22e2      	movs	r2, #226	; 0xe2
    f6a2:	701a      	strb	r2, [r3, #0]
            BREAK(status, "NULL inputs");
    f6a4:	e00b      	b.n	f6be <atcatls_create_key+0x3e>
        }
        // Call the Genkey command on the specified slot
        if ((status = atcab_genkey(slotid, pubkey)) != ATCA_SUCCESS)
    f6a6:	1dfb      	adds	r3, r7, #7
    f6a8:	781b      	ldrb	r3, [r3, #0]
    f6aa:	b29b      	uxth	r3, r3
    f6ac:	220f      	movs	r2, #15
    f6ae:	18bc      	adds	r4, r7, r2
    f6b0:	683a      	ldr	r2, [r7, #0]
    f6b2:	0011      	movs	r1, r2
    f6b4:	0018      	movs	r0, r3
    f6b6:	4b05      	ldr	r3, [pc, #20]	; (f6cc <atcatls_create_key+0x4c>)
    f6b8:	4798      	blx	r3
    f6ba:	0003      	movs	r3, r0
    f6bc:	7023      	strb	r3, [r4, #0]
            BREAK(status, "Create key failed");

    }
    while (0);

    return status;
    f6be:	230f      	movs	r3, #15
    f6c0:	18fb      	adds	r3, r7, r3
    f6c2:	781b      	ldrb	r3, [r3, #0]
}
    f6c4:	0018      	movs	r0, r3
    f6c6:	46bd      	mov	sp, r7
    f6c8:	b005      	add	sp, #20
    f6ca:	bd90      	pop	{r4, r7, pc}
    f6cc:	0000dec9 	.word	0x0000dec9

0000f6d0 <system_pinmux_get_group_from_gpio_pin>:
{
    f6d0:	b580      	push	{r7, lr}
    f6d2:	b084      	sub	sp, #16
    f6d4:	af00      	add	r7, sp, #0
    f6d6:	0002      	movs	r2, r0
    f6d8:	1dfb      	adds	r3, r7, #7
    f6da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    f6dc:	230f      	movs	r3, #15
    f6de:	18fb      	adds	r3, r7, r3
    f6e0:	1dfa      	adds	r2, r7, #7
    f6e2:	7812      	ldrb	r2, [r2, #0]
    f6e4:	09d2      	lsrs	r2, r2, #7
    f6e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    f6e8:	230e      	movs	r3, #14
    f6ea:	18fb      	adds	r3, r7, r3
    f6ec:	1dfa      	adds	r2, r7, #7
    f6ee:	7812      	ldrb	r2, [r2, #0]
    f6f0:	0952      	lsrs	r2, r2, #5
    f6f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    f6f4:	4b0d      	ldr	r3, [pc, #52]	; (f72c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    f6f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    f6f8:	230f      	movs	r3, #15
    f6fa:	18fb      	adds	r3, r7, r3
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d10f      	bne.n	f722 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    f702:	230f      	movs	r3, #15
    f704:	18fb      	adds	r3, r7, r3
    f706:	781b      	ldrb	r3, [r3, #0]
    f708:	009b      	lsls	r3, r3, #2
    f70a:	2210      	movs	r2, #16
    f70c:	4694      	mov	ip, r2
    f70e:	44bc      	add	ip, r7
    f710:	4463      	add	r3, ip
    f712:	3b08      	subs	r3, #8
    f714:	681a      	ldr	r2, [r3, #0]
    f716:	230e      	movs	r3, #14
    f718:	18fb      	adds	r3, r7, r3
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	01db      	lsls	r3, r3, #7
    f71e:	18d3      	adds	r3, r2, r3
    f720:	e000      	b.n	f724 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    f722:	2300      	movs	r3, #0
}
    f724:	0018      	movs	r0, r3
    f726:	46bd      	mov	sp, r7
    f728:	b004      	add	sp, #16
    f72a:	bd80      	pop	{r7, pc}
    f72c:	40002800 	.word	0x40002800

0000f730 <port_get_group_from_gpio_pin>:
{
    f730:	b580      	push	{r7, lr}
    f732:	b082      	sub	sp, #8
    f734:	af00      	add	r7, sp, #0
    f736:	0002      	movs	r2, r0
    f738:	1dfb      	adds	r3, r7, #7
    f73a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    f73c:	1dfb      	adds	r3, r7, #7
    f73e:	781b      	ldrb	r3, [r3, #0]
    f740:	0018      	movs	r0, r3
    f742:	4b03      	ldr	r3, [pc, #12]	; (f750 <port_get_group_from_gpio_pin+0x20>)
    f744:	4798      	blx	r3
    f746:	0003      	movs	r3, r0
}
    f748:	0018      	movs	r0, r3
    f74a:	46bd      	mov	sp, r7
    f74c:	b002      	add	sp, #8
    f74e:	bd80      	pop	{r7, pc}
    f750:	0000f6d1 	.word	0x0000f6d1

0000f754 <port_pin_set_output_level>:
{
    f754:	b580      	push	{r7, lr}
    f756:	b084      	sub	sp, #16
    f758:	af00      	add	r7, sp, #0
    f75a:	0002      	movs	r2, r0
    f75c:	1dfb      	adds	r3, r7, #7
    f75e:	701a      	strb	r2, [r3, #0]
    f760:	1dbb      	adds	r3, r7, #6
    f762:	1c0a      	adds	r2, r1, #0
    f764:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    f766:	1dfb      	adds	r3, r7, #7
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	0018      	movs	r0, r3
    f76c:	4b0d      	ldr	r3, [pc, #52]	; (f7a4 <port_pin_set_output_level+0x50>)
    f76e:	4798      	blx	r3
    f770:	0003      	movs	r3, r0
    f772:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f774:	1dfb      	adds	r3, r7, #7
    f776:	781b      	ldrb	r3, [r3, #0]
    f778:	221f      	movs	r2, #31
    f77a:	4013      	ands	r3, r2
    f77c:	2201      	movs	r2, #1
    f77e:	409a      	lsls	r2, r3
    f780:	0013      	movs	r3, r2
    f782:	60bb      	str	r3, [r7, #8]
	if (level) {
    f784:	1dbb      	adds	r3, r7, #6
    f786:	781b      	ldrb	r3, [r3, #0]
    f788:	2b00      	cmp	r3, #0
    f78a:	d003      	beq.n	f794 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    f78c:	68fb      	ldr	r3, [r7, #12]
    f78e:	68ba      	ldr	r2, [r7, #8]
    f790:	619a      	str	r2, [r3, #24]
}
    f792:	e002      	b.n	f79a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    f794:	68fb      	ldr	r3, [r7, #12]
    f796:	68ba      	ldr	r2, [r7, #8]
    f798:	615a      	str	r2, [r3, #20]
}
    f79a:	46c0      	nop			; (mov r8, r8)
    f79c:	46bd      	mov	sp, r7
    f79e:	b004      	add	sp, #16
    f7a0:	bd80      	pop	{r7, pc}
    f7a2:	46c0      	nop			; (mov r8, r8)
    f7a4:	0000f731 	.word	0x0000f731

0000f7a8 <PHY_DataReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Trigger to Transmit Packet
void PHY_DataReq(uint8_t* data)
{
    f7a8:	b580      	push	{r7, lr}
    f7aa:	b082      	sub	sp, #8
    f7ac:	af00      	add	r7, sp, #0
    f7ae:	6078      	str	r0, [r7, #4]
    phyTrxSetState(TRX_CMD_TX_ARET_ON);
    f7b0:	2019      	movs	r0, #25
    f7b2:	4b14      	ldr	r3, [pc, #80]	; (f804 <PHY_DataReq+0x5c>)
    f7b4:	4798      	blx	r3

    phyReadRegister(RG_IRQ_STATUS);
    f7b6:	200f      	movs	r0, #15
    f7b8:	4b13      	ldr	r3, [pc, #76]	; (f808 <PHY_DataReq+0x60>)
    f7ba:	4798      	blx	r3

    /* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
    data[1] += 2; // 2
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	3301      	adds	r3, #1
    f7c0:	687a      	ldr	r2, [r7, #4]
    f7c2:	3201      	adds	r2, #1
    f7c4:	7812      	ldrb	r2, [r2, #0]
    f7c6:	3202      	adds	r2, #2
    f7c8:	b2d2      	uxtb	r2, r2
    f7ca:	701a      	strb	r2, [r3, #0]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    f7cc:	687b      	ldr	r3, [r7, #4]
    f7ce:	1c5a      	adds	r2, r3, #1
    f7d0:	687b      	ldr	r3, [r7, #4]
    f7d2:	3301      	adds	r3, #1
    f7d4:	781b      	ldrb	r3, [r3, #0]
    f7d6:	3b01      	subs	r3, #1
    f7d8:	b2db      	uxtb	r3, r3
    f7da:	0019      	movs	r1, r3
    f7dc:	0010      	movs	r0, r2
    f7de:	4b0b      	ldr	r3, [pc, #44]	; (f80c <PHY_DataReq+0x64>)
    f7e0:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
    f7e2:	4b0b      	ldr	r3, [pc, #44]	; (f810 <PHY_DataReq+0x68>)
    f7e4:	2203      	movs	r2, #3
    f7e6:	701a      	strb	r2, [r3, #0]

    TRX_SLP_TR_HIGH();
    f7e8:	2101      	movs	r1, #1
    f7ea:	2014      	movs	r0, #20
    f7ec:	4b09      	ldr	r3, [pc, #36]	; (f814 <PHY_DataReq+0x6c>)
    f7ee:	4798      	blx	r3
  __ASM volatile ("nop");
    f7f0:	46c0      	nop			; (mov r8, r8)
    f7f2:	46c0      	nop			; (mov r8, r8)
    TRX_TRIG_DELAY();
    TRX_SLP_TR_LOW();
    f7f4:	2100      	movs	r1, #0
    f7f6:	2014      	movs	r0, #20
    f7f8:	4b06      	ldr	r3, [pc, #24]	; (f814 <PHY_DataReq+0x6c>)
    f7fa:	4798      	blx	r3
}
    f7fc:	46c0      	nop			; (mov r8, r8)
    f7fe:	46bd      	mov	sp, r7
    f800:	b002      	add	sp, #8
    f802:	bd80      	pop	{r7, pc}
    f804:	00010b3d 	.word	0x00010b3d
    f808:	00010aad 	.word	0x00010aad
    f80c:	0000af99 	.word	0x0000af99
    f810:	2000160e 	.word	0x2000160e
    f814:	0000f755 	.word	0x0000f755

0000f818 <PHY_RandomReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Random Number Generator
uint16_t PHY_RandomReq(void)
{
    f818:	b580      	push	{r7, lr}
    f81a:	b082      	sub	sp, #8
    f81c:	af00      	add	r7, sp, #0
    uint16_t rnd = 0;
    f81e:	1dbb      	adds	r3, r7, #6
    f820:	2200      	movs	r2, #0
    f822:	801a      	strh	r2, [r3, #0]
    uint8_t rndValue;

    phyTrxSetState(TRX_CMD_RX_ON);
    f824:	2006      	movs	r0, #6
    f826:	4b19      	ldr	r3, [pc, #100]	; (f88c <PHY_RandomReq+0x74>)
    f828:	4798      	blx	r3

    for (uint8_t i = 0; i < 16; i += 2) {
    f82a:	1d7b      	adds	r3, r7, #5
    f82c:	2200      	movs	r2, #0
    f82e:	701a      	strb	r2, [r3, #0]
    f830:	e01f      	b.n	f872 <PHY_RandomReq+0x5a>
        delay_cycles_us(1);
    f832:	2001      	movs	r0, #1
    f834:	4b16      	ldr	r3, [pc, #88]	; (f890 <PHY_RandomReq+0x78>)
    f836:	4798      	blx	r3
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    f838:	2006      	movs	r0, #6
    f83a:	4b16      	ldr	r3, [pc, #88]	; (f894 <PHY_RandomReq+0x7c>)
    f83c:	4798      	blx	r3
    f83e:	0003      	movs	r3, r0
    f840:	095b      	lsrs	r3, r3, #5
    f842:	b2da      	uxtb	r2, r3
    f844:	1d3b      	adds	r3, r7, #4
    f846:	2103      	movs	r1, #3
    f848:	400a      	ands	r2, r1
    f84a:	701a      	strb	r2, [r3, #0]
        rnd |= rndValue << i;
    f84c:	1d3b      	adds	r3, r7, #4
    f84e:	781a      	ldrb	r2, [r3, #0]
    f850:	1d7b      	adds	r3, r7, #5
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	409a      	lsls	r2, r3
    f856:	0013      	movs	r3, r2
    f858:	b21a      	sxth	r2, r3
    f85a:	1dbb      	adds	r3, r7, #6
    f85c:	2100      	movs	r1, #0
    f85e:	5e5b      	ldrsh	r3, [r3, r1]
    f860:	4313      	orrs	r3, r2
    f862:	b21a      	sxth	r2, r3
    f864:	1dbb      	adds	r3, r7, #6
    f866:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 16; i += 2) {
    f868:	1d7b      	adds	r3, r7, #5
    f86a:	1d7a      	adds	r2, r7, #5
    f86c:	7812      	ldrb	r2, [r2, #0]
    f86e:	3202      	adds	r2, #2
    f870:	701a      	strb	r2, [r3, #0]
    f872:	1d7b      	adds	r3, r7, #5
    f874:	781b      	ldrb	r3, [r3, #0]
    f876:	2b0f      	cmp	r3, #15
    f878:	d9db      	bls.n	f832 <PHY_RandomReq+0x1a>
    }
    phySetRxState();
    f87a:	4b07      	ldr	r3, [pc, #28]	; (f898 <PHY_RandomReq+0x80>)
    f87c:	4798      	blx	r3

    return rnd;
    f87e:	1dbb      	adds	r3, r7, #6
    f880:	881b      	ldrh	r3, [r3, #0]
}
    f882:	0018      	movs	r0, r3
    f884:	46bd      	mov	sp, r7
    f886:	b002      	add	sp, #8
    f888:	bd80      	pop	{r7, pc}
    f88a:	46c0      	nop			; (mov r8, r8)
    f88c:	00010b3d 	.word	0x00010b3d
    f890:	000126cd 	.word	0x000126cd
    f894:	00010aad 	.word	0x00010aad
    f898:	00010b0d 	.word	0x00010b0d

0000f89c <PHY_Init>:

/*************************************************************************/ /**
*****************************************************************************/
// Radio Initialization
void PHY_Init(void)
{
    f89c:	b580      	push	{r7, lr}
    f89e:	af00      	add	r7, sp, #0
    trx_spi_init();
    f8a0:	4b11      	ldr	r3, [pc, #68]	; (f8e8 <PHY_Init+0x4c>)
    f8a2:	4798      	blx	r3
    PhyReset();
    f8a4:	4b11      	ldr	r3, [pc, #68]	; (f8ec <PHY_Init+0x50>)
    f8a6:	4798      	blx	r3
    phyRxState = false;
    f8a8:	4b11      	ldr	r3, [pc, #68]	; (f8f0 <PHY_Init+0x54>)
    f8aa:	2200      	movs	r2, #0
    f8ac:	701a      	strb	r2, [r3, #0]

    phyWriteRegister(RG_IRQ_MASK, 0xFF);
    f8ae:	21ff      	movs	r1, #255	; 0xff
    f8b0:	200e      	movs	r0, #14
    f8b2:	4b10      	ldr	r3, [pc, #64]	; (f8f4 <PHY_Init+0x58>)
    f8b4:	4798      	blx	r3
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_TRX_OFF);
    f8b6:	2108      	movs	r1, #8
    f8b8:	2002      	movs	r0, #2
    f8ba:	4b0e      	ldr	r3, [pc, #56]	; (f8f4 <PHY_Init+0x58>)
    f8bc:	4798      	blx	r3
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    f8be:	2001      	movs	r0, #1
    f8c0:	4b0d      	ldr	r3, [pc, #52]	; (f8f8 <PHY_Init+0x5c>)
    f8c2:	4798      	blx	r3
    f8c4:	0003      	movs	r3, r0
    f8c6:	001a      	movs	r2, r3
    f8c8:	231f      	movs	r3, #31
    f8ca:	4013      	ands	r3, r2
    f8cc:	2b08      	cmp	r3, #8
    f8ce:	d1f2      	bne.n	f8b6 <PHY_Init+0x1a>

    phyWriteRegister(RG_TRX_CTRL_1,
    f8d0:	212e      	movs	r1, #46	; 0x2e
    f8d2:	2004      	movs	r0, #4
    f8d4:	4b07      	ldr	r3, [pc, #28]	; (f8f4 <PHY_Init+0x58>)
    f8d6:	4798      	blx	r3
        (1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) | (1 << IRQ_MASK_MODE));

    phyWriteRegister(RG_TRX_CTRL_2,
    f8d8:	21a0      	movs	r1, #160	; 0xa0
    f8da:	200c      	movs	r0, #12
    f8dc:	4b05      	ldr	r3, [pc, #20]	; (f8f4 <PHY_Init+0x58>)
    f8de:	4798      	blx	r3
        (1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    f8e0:	46c0      	nop			; (mov r8, r8)
    f8e2:	46bd      	mov	sp, r7
    f8e4:	bd80      	pop	{r7, pc}
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	0000aa5d 	.word	0x0000aa5d
    f8ec:	0000ab55 	.word	0x0000ab55
    f8f0:	20001690 	.word	0x20001690
    f8f4:	00010a7d 	.word	0x00010a7d
    f8f8:	00010aad 	.word	0x00010aad

0000f8fc <PHY_SetRxState>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Radio to Receive State
void PHY_SetRxState(bool rx)
{
    f8fc:	b580      	push	{r7, lr}
    f8fe:	b082      	sub	sp, #8
    f900:	af00      	add	r7, sp, #0
    f902:	0002      	movs	r2, r0
    f904:	1dfb      	adds	r3, r7, #7
    f906:	701a      	strb	r2, [r3, #0]
    phyRxState = rx;
    f908:	4b04      	ldr	r3, [pc, #16]	; (f91c <PHY_SetRxState+0x20>)
    f90a:	1dfa      	adds	r2, r7, #7
    f90c:	7812      	ldrb	r2, [r2, #0]
    f90e:	701a      	strb	r2, [r3, #0]
    phySetRxState();
    f910:	4b03      	ldr	r3, [pc, #12]	; (f920 <PHY_SetRxState+0x24>)
    f912:	4798      	blx	r3
}
    f914:	46c0      	nop			; (mov r8, r8)
    f916:	46bd      	mov	sp, r7
    f918:	b002      	add	sp, #8
    f91a:	bd80      	pop	{r7, pc}
    f91c:	20001690 	.word	0x20001690
    f920:	00010b0d 	.word	0x00010b0d

0000f924 <PHY_SetChannel>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Channel
void PHY_SetChannel(uint8_t channel)
{
    f924:	b580      	push	{r7, lr}
    f926:	b084      	sub	sp, #16
    f928:	af00      	add	r7, sp, #0
    f92a:	0002      	movs	r2, r0
    f92c:	1dfb      	adds	r3, r7, #7
    f92e:	701a      	strb	r2, [r3, #0]
    uint8_t reg;

    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    f930:	2008      	movs	r0, #8
    f932:	4b0c      	ldr	r3, [pc, #48]	; (f964 <PHY_SetChannel+0x40>)
    f934:	4798      	blx	r3
    f936:	0003      	movs	r3, r0
    f938:	0019      	movs	r1, r3
    f93a:	230f      	movs	r3, #15
    f93c:	18fb      	adds	r3, r7, r3
    f93e:	221f      	movs	r2, #31
    f940:	4391      	bics	r1, r2
    f942:	000a      	movs	r2, r1
    f944:	701a      	strb	r2, [r3, #0]
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    f946:	230f      	movs	r3, #15
    f948:	18fa      	adds	r2, r7, r3
    f94a:	1dfb      	adds	r3, r7, #7
    f94c:	7812      	ldrb	r2, [r2, #0]
    f94e:	781b      	ldrb	r3, [r3, #0]
    f950:	4313      	orrs	r3, r2
    f952:	b2db      	uxtb	r3, r3
    f954:	0019      	movs	r1, r3
    f956:	2008      	movs	r0, #8
    f958:	4b03      	ldr	r3, [pc, #12]	; (f968 <PHY_SetChannel+0x44>)
    f95a:	4798      	blx	r3
}
    f95c:	46c0      	nop			; (mov r8, r8)
    f95e:	46bd      	mov	sp, r7
    f960:	b004      	add	sp, #16
    f962:	bd80      	pop	{r7, pc}
    f964:	00010aad 	.word	0x00010aad
    f968:	00010a7d 	.word	0x00010a7d

0000f96c <PHY_SetPanId>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Pan ID
void PHY_SetPanId(uint16_t panId)
{
    f96c:	b580      	push	{r7, lr}
    f96e:	b084      	sub	sp, #16
    f970:	af00      	add	r7, sp, #0
    f972:	0002      	movs	r2, r0
    f974:	1dbb      	adds	r3, r7, #6
    f976:	801a      	strh	r2, [r3, #0]
    uint8_t* d = (uint8_t*)&panId;
    f978:	1dbb      	adds	r3, r7, #6
    f97a:	60fb      	str	r3, [r7, #12]
    phyWriteRegister(RG_PAN_ID_0, d[0]);
    f97c:	68fb      	ldr	r3, [r7, #12]
    f97e:	781b      	ldrb	r3, [r3, #0]
    f980:	0019      	movs	r1, r3
    f982:	2022      	movs	r0, #34	; 0x22
    f984:	4b06      	ldr	r3, [pc, #24]	; (f9a0 <PHY_SetPanId+0x34>)
    f986:	4798      	blx	r3
    phyWriteRegister(RG_PAN_ID_1, d[1]);
    f988:	68fb      	ldr	r3, [r7, #12]
    f98a:	3301      	adds	r3, #1
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	0019      	movs	r1, r3
    f990:	2023      	movs	r0, #35	; 0x23
    f992:	4b03      	ldr	r3, [pc, #12]	; (f9a0 <PHY_SetPanId+0x34>)
    f994:	4798      	blx	r3
}
    f996:	46c0      	nop			; (mov r8, r8)
    f998:	46bd      	mov	sp, r7
    f99a:	b004      	add	sp, #16
    f99c:	bd80      	pop	{r7, pc}
    f99e:	46c0      	nop			; (mov r8, r8)
    f9a0:	00010a7d 	.word	0x00010a7d

0000f9a4 <PHY_SetShortAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Set Short Address
void PHY_SetShortAddr(uint16_t addr)
{
    f9a4:	b580      	push	{r7, lr}
    f9a6:	b084      	sub	sp, #16
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	0002      	movs	r2, r0
    f9ac:	1dbb      	adds	r3, r7, #6
    f9ae:	801a      	strh	r2, [r3, #0]
    uint8_t* d = (uint8_t*)&addr;
    f9b0:	1dbb      	adds	r3, r7, #6
    f9b2:	60fb      	str	r3, [r7, #12]

    phyWriteRegister(RG_SHORT_ADDR_0, d[0]);
    f9b4:	68fb      	ldr	r3, [r7, #12]
    f9b6:	781b      	ldrb	r3, [r3, #0]
    f9b8:	0019      	movs	r1, r3
    f9ba:	2020      	movs	r0, #32
    f9bc:	4b0b      	ldr	r3, [pc, #44]	; (f9ec <PHY_SetShortAddr+0x48>)
    f9be:	4798      	blx	r3
    phyWriteRegister(RG_SHORT_ADDR_1, d[1]);
    f9c0:	68fb      	ldr	r3, [r7, #12]
    f9c2:	3301      	adds	r3, #1
    f9c4:	781b      	ldrb	r3, [r3, #0]
    f9c6:	0019      	movs	r1, r3
    f9c8:	2021      	movs	r0, #33	; 0x21
    f9ca:	4b08      	ldr	r3, [pc, #32]	; (f9ec <PHY_SetShortAddr+0x48>)
    f9cc:	4798      	blx	r3
    phyWriteRegister(RG_CSMA_SEED_0, d[0] + d[1]);
    f9ce:	68fb      	ldr	r3, [r7, #12]
    f9d0:	781a      	ldrb	r2, [r3, #0]
    f9d2:	68fb      	ldr	r3, [r7, #12]
    f9d4:	3301      	adds	r3, #1
    f9d6:	781b      	ldrb	r3, [r3, #0]
    f9d8:	18d3      	adds	r3, r2, r3
    f9da:	b2db      	uxtb	r3, r3
    f9dc:	0019      	movs	r1, r3
    f9de:	202d      	movs	r0, #45	; 0x2d
    f9e0:	4b02      	ldr	r3, [pc, #8]	; (f9ec <PHY_SetShortAddr+0x48>)
    f9e2:	4798      	blx	r3
}
    f9e4:	46c0      	nop			; (mov r8, r8)
    f9e6:	46bd      	mov	sp, r7
    f9e8:	b004      	add	sp, #16
    f9ea:	bd80      	pop	{r7, pc}
    f9ec:	00010a7d 	.word	0x00010a7d

0000f9f0 <PHY_EncryptReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Encrypt Block
void PHY_EncryptReq(uint8_t* text, uint8_t* key)
{
    f9f0:	b580      	push	{r7, lr}
    f9f2:	b082      	sub	sp, #8
    f9f4:	af00      	add	r7, sp, #0
    f9f6:	6078      	str	r0, [r7, #4]
    f9f8:	6039      	str	r1, [r7, #0]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    f9fa:	683b      	ldr	r3, [r7, #0]
    f9fc:	2200      	movs	r2, #0
    f9fe:	2100      	movs	r1, #0
    fa00:	0018      	movs	r0, r3
    fa02:	4b07      	ldr	r3, [pc, #28]	; (fa20 <PHY_EncryptReq+0x30>)
    fa04:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
    sal_aes_wrrd(text, NULL);
    fa06:	687b      	ldr	r3, [r7, #4]
    fa08:	2100      	movs	r1, #0
    fa0a:	0018      	movs	r0, r3
    fa0c:	4b05      	ldr	r3, [pc, #20]	; (fa24 <PHY_EncryptReq+0x34>)
    fa0e:	4798      	blx	r3
#else
    sal_aes_exec(text);
#endif
    sal_aes_read(text);
    fa10:	687b      	ldr	r3, [r7, #4]
    fa12:	0018      	movs	r0, r3
    fa14:	4b04      	ldr	r3, [pc, #16]	; (fa28 <PHY_EncryptReq+0x38>)
    fa16:	4798      	blx	r3
}
    fa18:	46c0      	nop			; (mov r8, r8)
    fa1a:	46bd      	mov	sp, r7
    fa1c:	b002      	add	sp, #8
    fa1e:	bd80      	pop	{r7, pc}
    fa20:	000185b1 	.word	0x000185b1
    fa24:	00018775 	.word	0x00018775
    fa28:	00018801 	.word	0x00018801

0000fa2c <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress(uint8_t* Address, uint8_t* PANID)
{
    fa2c:	b580      	push	{r7, lr}
    fa2e:	b082      	sub	sp, #8
    fa30:	af00      	add	r7, sp, #0
    fa32:	6078      	str	r0, [r7, #4]
    fa34:	6039      	str	r1, [r7, #0]
    myNetworkAddress.v[0] = Address[0];
    fa36:	687b      	ldr	r3, [r7, #4]
    fa38:	781a      	ldrb	r2, [r3, #0]
    fa3a:	4b0d      	ldr	r3, [pc, #52]	; (fa70 <MiMAC_SetAltAddress+0x44>)
    fa3c:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	785a      	ldrb	r2, [r3, #1]
    fa42:	4b0b      	ldr	r3, [pc, #44]	; (fa70 <MiMAC_SetAltAddress+0x44>)
    fa44:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
    fa46:	683b      	ldr	r3, [r7, #0]
    fa48:	781a      	ldrb	r2, [r3, #0]
    fa4a:	4b0a      	ldr	r3, [pc, #40]	; (fa74 <MiMAC_SetAltAddress+0x48>)
    fa4c:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
    fa4e:	683b      	ldr	r3, [r7, #0]
    fa50:	785a      	ldrb	r2, [r3, #1]
    fa52:	4b08      	ldr	r3, [pc, #32]	; (fa74 <MiMAC_SetAltAddress+0x48>)
    fa54:	705a      	strb	r2, [r3, #1]
    PHY_SetShortAddr(APP_ADDR);
    fa56:	2001      	movs	r0, #1
    fa58:	4b07      	ldr	r3, [pc, #28]	; (fa78 <MiMAC_SetAltAddress+0x4c>)
    fa5a:	4798      	blx	r3
    PHY_SetPanId(MY_PAN_ID);
    fa5c:	4b07      	ldr	r3, [pc, #28]	; (fa7c <MiMAC_SetAltAddress+0x50>)
    fa5e:	0018      	movs	r0, r3
    fa60:	4b07      	ldr	r3, [pc, #28]	; (fa80 <MiMAC_SetAltAddress+0x54>)
    fa62:	4798      	blx	r3
    return true;
    fa64:	2301      	movs	r3, #1
}
    fa66:	0018      	movs	r0, r3
    fa68:	46bd      	mov	sp, r7
    fa6a:	b002      	add	sp, #8
    fa6c:	bd80      	pop	{r7, pc}
    fa6e:	46c0      	nop			; (mov r8, r8)
    fa70:	20001c88 	.word	0x20001c88
    fa74:	200022fc 	.word	0x200022fc
    fa78:	0000f9a5 	.word	0x0000f9a5
    fa7c:	00001111 	.word	0x00001111
    fa80:	0000f96d 	.word	0x0000f96d

0000fa84 <mic_generator>:

#if defined(ENABLE_SECURITY)
void mic_generator(uint8_t* Payloadinfo, uint8_t len, uint8_t frame_control, API_UINT32_UNION FrameCounter, uint8_t* SourceIEEEAddress)
{
    fa84:	b580      	push	{r7, lr}
    fa86:	b0aa      	sub	sp, #168	; 0xa8
    fa88:	af00      	add	r7, sp, #0
    fa8a:	60f8      	str	r0, [r7, #12]
    fa8c:	0008      	movs	r0, r1
    fa8e:	0011      	movs	r1, r2
    fa90:	607b      	str	r3, [r7, #4]
    fa92:	230b      	movs	r3, #11
    fa94:	18fb      	adds	r3, r7, r3
    fa96:	1c02      	adds	r2, r0, #0
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	230a      	movs	r3, #10
    fa9c:	18fb      	adds	r3, r7, r3
    fa9e:	1c0a      	adds	r2, r1, #0
    faa0:	701a      	strb	r2, [r3, #0]
    uint8_t i, j, iterations, copy_packet[FRAME_BUFFER], cbc_header_with_padding[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = len / AES_BLOCKSIZE;
    faa2:	23a5      	movs	r3, #165	; 0xa5
    faa4:	18fb      	adds	r3, r7, r3
    faa6:	220b      	movs	r2, #11
    faa8:	18ba      	adds	r2, r7, r2
    faaa:	7812      	ldrb	r2, [r2, #0]
    faac:	0912      	lsrs	r2, r2, #4
    faae:	701a      	strb	r2, [r3, #0]
    if (len % AES_BLOCKSIZE != 0)
    fab0:	230b      	movs	r3, #11
    fab2:	18fb      	adds	r3, r7, r3
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	220f      	movs	r2, #15
    fab8:	4013      	ands	r3, r2
    faba:	b2db      	uxtb	r3, r3
    fabc:	2b00      	cmp	r3, #0
    fabe:	d006      	beq.n	face <mic_generator+0x4a>
        iterations++;
    fac0:	23a5      	movs	r3, #165	; 0xa5
    fac2:	18fb      	adds	r3, r7, r3
    fac4:	781a      	ldrb	r2, [r3, #0]
    fac6:	23a5      	movs	r3, #165	; 0xa5
    fac8:	18fb      	adds	r3, r7, r3
    faca:	3201      	adds	r2, #1
    facc:	701a      	strb	r2, [r3, #0]
    InitVect_in[0] = frame_control; //0x49
    face:	4b9f      	ldr	r3, [pc, #636]	; (fd4c <mic_generator+0x2c8>)
    fad0:	220a      	movs	r2, #10
    fad2:	18ba      	adds	r2, r7, r2
    fad4:	7812      	ldrb	r2, [r2, #0]
    fad6:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
    fad8:	2314      	movs	r3, #20
    fada:	18fb      	adds	r3, r7, r3
    fadc:	2200      	movs	r2, #0
    fade:	701a      	strb	r2, [r3, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
    fae0:	2314      	movs	r3, #20
    fae2:	18fb      	adds	r3, r7, r3
    fae4:	220d      	movs	r2, #13
    fae6:	705a      	strb	r2, [r3, #1]
    cbc_header_with_padding[2] = frame_control; //frame_control;
    fae8:	2314      	movs	r3, #20
    faea:	18fb      	adds	r3, r7, r3
    faec:	220a      	movs	r2, #10
    faee:	18ba      	adds	r2, r7, r2
    faf0:	7812      	ldrb	r2, [r2, #0]
    faf2:	709a      	strb	r2, [r3, #2]
    for (i = 0; i < 8; i++) {
    faf4:	23a7      	movs	r3, #167	; 0xa7
    faf6:	18fb      	adds	r3, r7, r3
    faf8:	2200      	movs	r2, #0
    fafa:	701a      	strb	r2, [r3, #0]
    fafc:	e023      	b.n	fb46 <mic_generator+0xc2>
        InitVect_in[i + 1] = SourceIEEEAddress[i];
    fafe:	23a7      	movs	r3, #167	; 0xa7
    fb00:	18fb      	adds	r3, r7, r3
    fb02:	781b      	ldrb	r3, [r3, #0]
    fb04:	3301      	adds	r3, #1
    fb06:	22a7      	movs	r2, #167	; 0xa7
    fb08:	18ba      	adds	r2, r7, r2
    fb0a:	7812      	ldrb	r2, [r2, #0]
    fb0c:	21b0      	movs	r1, #176	; 0xb0
    fb0e:	1879      	adds	r1, r7, r1
    fb10:	6809      	ldr	r1, [r1, #0]
    fb12:	188a      	adds	r2, r1, r2
    fb14:	7811      	ldrb	r1, [r2, #0]
    fb16:	4a8d      	ldr	r2, [pc, #564]	; (fd4c <mic_generator+0x2c8>)
    fb18:	54d1      	strb	r1, [r2, r3]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
    fb1a:	23a7      	movs	r3, #167	; 0xa7
    fb1c:	18fb      	adds	r3, r7, r3
    fb1e:	781b      	ldrb	r3, [r3, #0]
    fb20:	3307      	adds	r3, #7
    fb22:	22a7      	movs	r2, #167	; 0xa7
    fb24:	18ba      	adds	r2, r7, r2
    fb26:	7812      	ldrb	r2, [r2, #0]
    fb28:	21b0      	movs	r1, #176	; 0xb0
    fb2a:	1879      	adds	r1, r7, r1
    fb2c:	6809      	ldr	r1, [r1, #0]
    fb2e:	188a      	adds	r2, r1, r2
    fb30:	7811      	ldrb	r1, [r2, #0]
    fb32:	2214      	movs	r2, #20
    fb34:	18ba      	adds	r2, r7, r2
    fb36:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 8; i++) {
    fb38:	23a7      	movs	r3, #167	; 0xa7
    fb3a:	18fb      	adds	r3, r7, r3
    fb3c:	781a      	ldrb	r2, [r3, #0]
    fb3e:	23a7      	movs	r3, #167	; 0xa7
    fb40:	18fb      	adds	r3, r7, r3
    fb42:	3201      	adds	r2, #1
    fb44:	701a      	strb	r2, [r3, #0]
    fb46:	23a7      	movs	r3, #167	; 0xa7
    fb48:	18fb      	adds	r3, r7, r3
    fb4a:	781b      	ldrb	r3, [r3, #0]
    fb4c:	2b07      	cmp	r3, #7
    fb4e:	d9d6      	bls.n	fafe <mic_generator+0x7a>
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            InitVect_in[i + 1] = 0; // padding if source address is less than 8 bytes
            cbc_header_with_padding[i + 7] = 0; //
        }
    }
    for (i = 0; i < 4; i++) {
    fb50:	23a7      	movs	r3, #167	; 0xa7
    fb52:	18fb      	adds	r3, r7, r3
    fb54:	2200      	movs	r2, #0
    fb56:	701a      	strb	r2, [r3, #0]
    fb58:	e01d      	b.n	fb96 <mic_generator+0x112>
        InitVect_in[i + 9] = FrameCounter.v[i];
    fb5a:	23a7      	movs	r3, #167	; 0xa7
    fb5c:	18fb      	adds	r3, r7, r3
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	3309      	adds	r3, #9
    fb62:	22a7      	movs	r2, #167	; 0xa7
    fb64:	18ba      	adds	r2, r7, r2
    fb66:	7812      	ldrb	r2, [r2, #0]
    fb68:	1d39      	adds	r1, r7, #4
    fb6a:	5c89      	ldrb	r1, [r1, r2]
    fb6c:	4a77      	ldr	r2, [pc, #476]	; (fd4c <mic_generator+0x2c8>)
    fb6e:	54d1      	strb	r1, [r2, r3]
        cbc_header_with_padding[i + 3] = FrameCounter.v[i];
    fb70:	23a7      	movs	r3, #167	; 0xa7
    fb72:	18fb      	adds	r3, r7, r3
    fb74:	781b      	ldrb	r3, [r3, #0]
    fb76:	3303      	adds	r3, #3
    fb78:	22a7      	movs	r2, #167	; 0xa7
    fb7a:	18ba      	adds	r2, r7, r2
    fb7c:	7812      	ldrb	r2, [r2, #0]
    fb7e:	1d39      	adds	r1, r7, #4
    fb80:	5c89      	ldrb	r1, [r1, r2]
    fb82:	2214      	movs	r2, #20
    fb84:	18ba      	adds	r2, r7, r2
    fb86:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
    fb88:	23a7      	movs	r3, #167	; 0xa7
    fb8a:	18fb      	adds	r3, r7, r3
    fb8c:	781a      	ldrb	r2, [r3, #0]
    fb8e:	23a7      	movs	r3, #167	; 0xa7
    fb90:	18fb      	adds	r3, r7, r3
    fb92:	3201      	adds	r2, #1
    fb94:	701a      	strb	r2, [r3, #0]
    fb96:	23a7      	movs	r3, #167	; 0xa7
    fb98:	18fb      	adds	r3, r7, r3
    fb9a:	781b      	ldrb	r3, [r3, #0]
    fb9c:	2b03      	cmp	r3, #3
    fb9e:	d9dc      	bls.n	fb5a <mic_generator+0xd6>
    }
    //cbc_header_with_padding[14] = 0x00;  // Padding
    cbc_header_with_padding[15] = 0x00; // Padding
    fba0:	2314      	movs	r3, #20
    fba2:	18fb      	adds	r3, r7, r3
    fba4:	2200      	movs	r2, #0
    fba6:	73da      	strb	r2, [r3, #15]
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    fba8:	4b68      	ldr	r3, [pc, #416]	; (fd4c <mic_generator+0x2c8>)
    fbaa:	2204      	movs	r2, #4
    fbac:	735a      	strb	r2, [r3, #13]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
    fbae:	4b67      	ldr	r3, [pc, #412]	; (fd4c <mic_generator+0x2c8>)
    fbb0:	2200      	movs	r2, #0
    fbb2:	739a      	strb	r2, [r3, #14]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    fbb4:	4b65      	ldr	r3, [pc, #404]	; (fd4c <mic_generator+0x2c8>)
    fbb6:	220b      	movs	r2, #11
    fbb8:	18ba      	adds	r2, r7, r2
    fbba:	7812      	ldrb	r2, [r2, #0]
    fbbc:	73da      	strb	r2, [r3, #15]
    PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    fbbe:	4a64      	ldr	r2, [pc, #400]	; (fd50 <mic_generator+0x2cc>)
    fbc0:	4b62      	ldr	r3, [pc, #392]	; (fd4c <mic_generator+0x2c8>)
    fbc2:	0011      	movs	r1, r2
    fbc4:	0018      	movs	r0, r3
    fbc6:	4b63      	ldr	r3, [pc, #396]	; (fd54 <mic_generator+0x2d0>)
    fbc8:	4798      	blx	r3
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    fbca:	23a7      	movs	r3, #167	; 0xa7
    fbcc:	18fb      	adds	r3, r7, r3
    fbce:	2200      	movs	r2, #0
    fbd0:	701a      	strb	r2, [r3, #0]
    fbd2:	e012      	b.n	fbfa <mic_generator+0x176>
        copy_packet[i] = cbc_header_with_padding[i];
    fbd4:	23a7      	movs	r3, #167	; 0xa7
    fbd6:	18fb      	adds	r3, r7, r3
    fbd8:	781b      	ldrb	r3, [r3, #0]
    fbda:	22a7      	movs	r2, #167	; 0xa7
    fbdc:	18ba      	adds	r2, r7, r2
    fbde:	7812      	ldrb	r2, [r2, #0]
    fbe0:	2114      	movs	r1, #20
    fbe2:	1879      	adds	r1, r7, r1
    fbe4:	5c89      	ldrb	r1, [r1, r2]
    fbe6:	2224      	movs	r2, #36	; 0x24
    fbe8:	18ba      	adds	r2, r7, r2
    fbea:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    fbec:	23a7      	movs	r3, #167	; 0xa7
    fbee:	18fb      	adds	r3, r7, r3
    fbf0:	781a      	ldrb	r2, [r3, #0]
    fbf2:	23a7      	movs	r3, #167	; 0xa7
    fbf4:	18fb      	adds	r3, r7, r3
    fbf6:	3201      	adds	r2, #1
    fbf8:	701a      	strb	r2, [r3, #0]
    fbfa:	23a7      	movs	r3, #167	; 0xa7
    fbfc:	18fb      	adds	r3, r7, r3
    fbfe:	781b      	ldrb	r3, [r3, #0]
    fc00:	2b0f      	cmp	r3, #15
    fc02:	d9e7      	bls.n	fbd4 <mic_generator+0x150>
    }
    // Copy the Payload and Do the padding
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    fc04:	23a7      	movs	r3, #167	; 0xa7
    fc06:	18fb      	adds	r3, r7, r3
    fc08:	2210      	movs	r2, #16
    fc0a:	701a      	strb	r2, [r3, #0]
    fc0c:	e013      	b.n	fc36 <mic_generator+0x1b2>
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    fc0e:	23a7      	movs	r3, #167	; 0xa7
    fc10:	18fb      	adds	r3, r7, r3
    fc12:	781b      	ldrb	r3, [r3, #0]
    fc14:	22a7      	movs	r2, #167	; 0xa7
    fc16:	18ba      	adds	r2, r7, r2
    fc18:	7812      	ldrb	r2, [r2, #0]
    fc1a:	3a10      	subs	r2, #16
    fc1c:	68f9      	ldr	r1, [r7, #12]
    fc1e:	188a      	adds	r2, r1, r2
    fc20:	7811      	ldrb	r1, [r2, #0]
    fc22:	2224      	movs	r2, #36	; 0x24
    fc24:	18ba      	adds	r2, r7, r2
    fc26:	54d1      	strb	r1, [r2, r3]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    fc28:	23a7      	movs	r3, #167	; 0xa7
    fc2a:	18fb      	adds	r3, r7, r3
    fc2c:	781a      	ldrb	r2, [r3, #0]
    fc2e:	23a7      	movs	r3, #167	; 0xa7
    fc30:	18fb      	adds	r3, r7, r3
    fc32:	3201      	adds	r2, #1
    fc34:	701a      	strb	r2, [r3, #0]
    fc36:	23a7      	movs	r3, #167	; 0xa7
    fc38:	18fb      	adds	r3, r7, r3
    fc3a:	781a      	ldrb	r2, [r3, #0]
    fc3c:	230b      	movs	r3, #11
    fc3e:	18fb      	adds	r3, r7, r3
    fc40:	781b      	ldrb	r3, [r3, #0]
    fc42:	3310      	adds	r3, #16
    fc44:	429a      	cmp	r2, r3
    fc46:	dbe2      	blt.n	fc0e <mic_generator+0x18a>
    }
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    fc48:	23a7      	movs	r3, #167	; 0xa7
    fc4a:	18fb      	adds	r3, r7, r3
    fc4c:	220b      	movs	r2, #11
    fc4e:	18ba      	adds	r2, r7, r2
    fc50:	7812      	ldrb	r2, [r2, #0]
    fc52:	3210      	adds	r2, #16
    fc54:	701a      	strb	r2, [r3, #0]
    fc56:	e00d      	b.n	fc74 <mic_generator+0x1f0>
        copy_packet[i] = 0; // Padding
    fc58:	23a7      	movs	r3, #167	; 0xa7
    fc5a:	18fb      	adds	r3, r7, r3
    fc5c:	781b      	ldrb	r3, [r3, #0]
    fc5e:	2224      	movs	r2, #36	; 0x24
    fc60:	18ba      	adds	r2, r7, r2
    fc62:	2100      	movs	r1, #0
    fc64:	54d1      	strb	r1, [r2, r3]
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    fc66:	23a7      	movs	r3, #167	; 0xa7
    fc68:	18fb      	adds	r3, r7, r3
    fc6a:	781a      	ldrb	r2, [r3, #0]
    fc6c:	23a7      	movs	r3, #167	; 0xa7
    fc6e:	18fb      	adds	r3, r7, r3
    fc70:	3201      	adds	r2, #1
    fc72:	701a      	strb	r2, [r3, #0]
    fc74:	23a7      	movs	r3, #167	; 0xa7
    fc76:	18fb      	adds	r3, r7, r3
    fc78:	781a      	ldrb	r2, [r3, #0]
    fc7a:	23a5      	movs	r3, #165	; 0xa5
    fc7c:	18fb      	adds	r3, r7, r3
    fc7e:	781b      	ldrb	r3, [r3, #0]
    fc80:	3301      	adds	r3, #1
    fc82:	011b      	lsls	r3, r3, #4
    fc84:	429a      	cmp	r2, r3
    fc86:	dbe7      	blt.n	fc58 <mic_generator+0x1d4>
    }
    for (i = 0; i < iterations + 1; i++) {
    fc88:	23a7      	movs	r3, #167	; 0xa7
    fc8a:	18fb      	adds	r3, r7, r3
    fc8c:	2200      	movs	r2, #0
    fc8e:	701a      	strb	r2, [r3, #0]
    fc90:	e034      	b.n	fcfc <mic_generator+0x278>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    fc92:	23a6      	movs	r3, #166	; 0xa6
    fc94:	18fb      	adds	r3, r7, r3
    fc96:	2200      	movs	r2, #0
    fc98:	701a      	strb	r2, [r3, #0]
    fc9a:	e01d      	b.n	fcd8 <mic_generator+0x254>
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    fc9c:	23a6      	movs	r3, #166	; 0xa6
    fc9e:	18fb      	adds	r3, r7, r3
    fca0:	781b      	ldrb	r3, [r3, #0]
    fca2:	22a6      	movs	r2, #166	; 0xa6
    fca4:	18ba      	adds	r2, r7, r2
    fca6:	7812      	ldrb	r2, [r2, #0]
    fca8:	4928      	ldr	r1, [pc, #160]	; (fd4c <mic_generator+0x2c8>)
    fcaa:	5c89      	ldrb	r1, [r1, r2]
    fcac:	22a6      	movs	r2, #166	; 0xa6
    fcae:	18ba      	adds	r2, r7, r2
    fcb0:	7810      	ldrb	r0, [r2, #0]
    fcb2:	22a7      	movs	r2, #167	; 0xa7
    fcb4:	18ba      	adds	r2, r7, r2
    fcb6:	7812      	ldrb	r2, [r2, #0]
    fcb8:	0112      	lsls	r2, r2, #4
    fcba:	1882      	adds	r2, r0, r2
    fcbc:	2024      	movs	r0, #36	; 0x24
    fcbe:	1838      	adds	r0, r7, r0
    fcc0:	5c82      	ldrb	r2, [r0, r2]
    fcc2:	404a      	eors	r2, r1
    fcc4:	b2d1      	uxtb	r1, r2
    fcc6:	4a21      	ldr	r2, [pc, #132]	; (fd4c <mic_generator+0x2c8>)
    fcc8:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    fcca:	23a6      	movs	r3, #166	; 0xa6
    fccc:	18fb      	adds	r3, r7, r3
    fcce:	781a      	ldrb	r2, [r3, #0]
    fcd0:	23a6      	movs	r3, #166	; 0xa6
    fcd2:	18fb      	adds	r3, r7, r3
    fcd4:	3201      	adds	r2, #1
    fcd6:	701a      	strb	r2, [r3, #0]
    fcd8:	23a6      	movs	r3, #166	; 0xa6
    fcda:	18fb      	adds	r3, r7, r3
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	2b0f      	cmp	r3, #15
    fce0:	d9dc      	bls.n	fc9c <mic_generator+0x218>
        }
        PHY_EncryptReq(&InitVect_in[0], mySecurityKey);
    fce2:	4a1b      	ldr	r2, [pc, #108]	; (fd50 <mic_generator+0x2cc>)
    fce4:	4b19      	ldr	r3, [pc, #100]	; (fd4c <mic_generator+0x2c8>)
    fce6:	0011      	movs	r1, r2
    fce8:	0018      	movs	r0, r3
    fcea:	4b1a      	ldr	r3, [pc, #104]	; (fd54 <mic_generator+0x2d0>)
    fcec:	4798      	blx	r3
    for (i = 0; i < iterations + 1; i++) {
    fcee:	23a7      	movs	r3, #167	; 0xa7
    fcf0:	18fb      	adds	r3, r7, r3
    fcf2:	781a      	ldrb	r2, [r3, #0]
    fcf4:	23a7      	movs	r3, #167	; 0xa7
    fcf6:	18fb      	adds	r3, r7, r3
    fcf8:	3201      	adds	r2, #1
    fcfa:	701a      	strb	r2, [r3, #0]
    fcfc:	23a7      	movs	r3, #167	; 0xa7
    fcfe:	18fb      	adds	r3, r7, r3
    fd00:	781a      	ldrb	r2, [r3, #0]
    fd02:	23a5      	movs	r3, #165	; 0xa5
    fd04:	18fb      	adds	r3, r7, r3
    fd06:	781b      	ldrb	r3, [r3, #0]
    fd08:	3301      	adds	r3, #1
    fd0a:	429a      	cmp	r2, r3
    fd0c:	dbc1      	blt.n	fc92 <mic_generator+0x20e>
    }
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    fd0e:	23a7      	movs	r3, #167	; 0xa7
    fd10:	18fb      	adds	r3, r7, r3
    fd12:	2200      	movs	r2, #0
    fd14:	701a      	strb	r2, [r3, #0]
    fd16:	e010      	b.n	fd3a <mic_generator+0x2b6>
        CBC_mic[i] = InitVect_in[i];
    fd18:	23a7      	movs	r3, #167	; 0xa7
    fd1a:	18fb      	adds	r3, r7, r3
    fd1c:	781b      	ldrb	r3, [r3, #0]
    fd1e:	22a7      	movs	r2, #167	; 0xa7
    fd20:	18ba      	adds	r2, r7, r2
    fd22:	7812      	ldrb	r2, [r2, #0]
    fd24:	4909      	ldr	r1, [pc, #36]	; (fd4c <mic_generator+0x2c8>)
    fd26:	5c89      	ldrb	r1, [r1, r2]
    fd28:	4a0b      	ldr	r2, [pc, #44]	; (fd58 <mic_generator+0x2d4>)
    fd2a:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < AES_BLOCKSIZE; i++) {
    fd2c:	23a7      	movs	r3, #167	; 0xa7
    fd2e:	18fb      	adds	r3, r7, r3
    fd30:	781a      	ldrb	r2, [r3, #0]
    fd32:	23a7      	movs	r3, #167	; 0xa7
    fd34:	18fb      	adds	r3, r7, r3
    fd36:	3201      	adds	r2, #1
    fd38:	701a      	strb	r2, [r3, #0]
    fd3a:	23a7      	movs	r3, #167	; 0xa7
    fd3c:	18fb      	adds	r3, r7, r3
    fd3e:	781b      	ldrb	r3, [r3, #0]
    fd40:	2b0f      	cmp	r3, #15
    fd42:	d9e9      	bls.n	fd18 <mic_generator+0x294>
    }
}
    fd44:	46c0      	nop			; (mov r8, r8)
    fd46:	46bd      	mov	sp, r7
    fd48:	b02a      	add	sp, #168	; 0xa8
    fd4a:	bd80      	pop	{r7, pc}
    fd4c:	20001c98 	.word	0x20001c98
    fd50:	2000059c 	.word	0x2000059c
    fd54:	0000f9f1 	.word	0x0000f9f1
    fd58:	200022e8 	.word	0x200022e8

0000fd5c <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t* Payloadinfo, uint8_t* Payload_len, API_UINT32_UNION FrameCounter,
    uint8_t FrameControl)
{
    fd5c:	b590      	push	{r4, r7, lr}
    fd5e:	b091      	sub	sp, #68	; 0x44
    fd60:	af02      	add	r7, sp, #8
    fd62:	60f8      	str	r0, [r7, #12]
    fd64:	60b9      	str	r1, [r7, #8]
    fd66:	607a      	str	r2, [r7, #4]
    fd68:	001a      	movs	r2, r3
    fd6a:	1cfb      	adds	r3, r7, #3
    fd6c:	701a      	strb	r2, [r3, #0]
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *Payload_len / AES_BLOCKSIZE;
    fd6e:	68bb      	ldr	r3, [r7, #8]
    fd70:	781a      	ldrb	r2, [r3, #0]
    fd72:	2336      	movs	r3, #54	; 0x36
    fd74:	18fb      	adds	r3, r7, r3
    fd76:	0912      	lsrs	r2, r2, #4
    fd78:	701a      	strb	r2, [r3, #0]
    if (*Payload_len % AES_BLOCKSIZE != 0)
    fd7a:	68bb      	ldr	r3, [r7, #8]
    fd7c:	781b      	ldrb	r3, [r3, #0]
    fd7e:	220f      	movs	r2, #15
    fd80:	4013      	ands	r3, r2
    fd82:	b2db      	uxtb	r3, r3
    fd84:	2b00      	cmp	r3, #0
    fd86:	d006      	beq.n	fd96 <DataEncrypt+0x3a>
        iterations++;
    fd88:	2336      	movs	r3, #54	; 0x36
    fd8a:	18fb      	adds	r3, r7, r3
    fd8c:	781a      	ldrb	r2, [r3, #0]
    fd8e:	2336      	movs	r3, #54	; 0x36
    fd90:	18fb      	adds	r3, r7, r3
    fd92:	3201      	adds	r2, #1
    fd94:	701a      	strb	r2, [r3, #0]

    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
    fd96:	68bb      	ldr	r3, [r7, #8]
    fd98:	7819      	ldrb	r1, [r3, #0]
    fd9a:	4b82      	ldr	r3, [pc, #520]	; (ffa4 <DataEncrypt+0x248>)
    fd9c:	685b      	ldr	r3, [r3, #4]
    fd9e:	687c      	ldr	r4, [r7, #4]
    fda0:	1cfa      	adds	r2, r7, #3
    fda2:	7812      	ldrb	r2, [r2, #0]
    fda4:	68f8      	ldr	r0, [r7, #12]
    fda6:	9300      	str	r3, [sp, #0]
    fda8:	0023      	movs	r3, r4
    fdaa:	4c7f      	ldr	r4, [pc, #508]	; (ffa8 <DataEncrypt+0x24c>)
    fdac:	47a0      	blx	r4

    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    fdae:	2337      	movs	r3, #55	; 0x37
    fdb0:	18fb      	adds	r3, r7, r3
    fdb2:	68ba      	ldr	r2, [r7, #8]
    fdb4:	7812      	ldrb	r2, [r2, #0]
    fdb6:	701a      	strb	r2, [r3, #0]
    fdb8:	e00d      	b.n	fdd6 <DataEncrypt+0x7a>
        Payloadinfo[i] = 0; // Padding
    fdba:	2337      	movs	r3, #55	; 0x37
    fdbc:	18fb      	adds	r3, r7, r3
    fdbe:	781b      	ldrb	r3, [r3, #0]
    fdc0:	68fa      	ldr	r2, [r7, #12]
    fdc2:	18d3      	adds	r3, r2, r3
    fdc4:	2200      	movs	r2, #0
    fdc6:	701a      	strb	r2, [r3, #0]
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    fdc8:	2337      	movs	r3, #55	; 0x37
    fdca:	18fb      	adds	r3, r7, r3
    fdcc:	781a      	ldrb	r2, [r3, #0]
    fdce:	2337      	movs	r3, #55	; 0x37
    fdd0:	18fb      	adds	r3, r7, r3
    fdd2:	3201      	adds	r2, #1
    fdd4:	701a      	strb	r2, [r3, #0]
    fdd6:	2337      	movs	r3, #55	; 0x37
    fdd8:	18fb      	adds	r3, r7, r3
    fdda:	781a      	ldrb	r2, [r3, #0]
    fddc:	2336      	movs	r3, #54	; 0x36
    fdde:	18fb      	adds	r3, r7, r3
    fde0:	781b      	ldrb	r3, [r3, #0]
    fde2:	011b      	lsls	r3, r3, #4
    fde4:	429a      	cmp	r2, r3
    fde6:	dbe8      	blt.n	fdba <DataEncrypt+0x5e>
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
    fde8:	2314      	movs	r3, #20
    fdea:	18fb      	adds	r3, r7, r3
    fdec:	2201      	movs	r2, #1
    fdee:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    fdf0:	2337      	movs	r3, #55	; 0x37
    fdf2:	18fb      	adds	r3, r7, r3
    fdf4:	2200      	movs	r2, #0
    fdf6:	701a      	strb	r2, [r3, #0]
    fdf8:	e014      	b.n	fe24 <DataEncrypt+0xc8>
        CTR_Nonce_and_Counter[i + 1] = MACInitParams.PAddress[i];
    fdfa:	2337      	movs	r3, #55	; 0x37
    fdfc:	18fb      	adds	r3, r7, r3
    fdfe:	781b      	ldrb	r3, [r3, #0]
    fe00:	1c5a      	adds	r2, r3, #1
    fe02:	4b68      	ldr	r3, [pc, #416]	; (ffa4 <DataEncrypt+0x248>)
    fe04:	6859      	ldr	r1, [r3, #4]
    fe06:	2337      	movs	r3, #55	; 0x37
    fe08:	18fb      	adds	r3, r7, r3
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	18cb      	adds	r3, r1, r3
    fe0e:	7819      	ldrb	r1, [r3, #0]
    fe10:	2314      	movs	r3, #20
    fe12:	18fb      	adds	r3, r7, r3
    fe14:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
    fe16:	2337      	movs	r3, #55	; 0x37
    fe18:	18fb      	adds	r3, r7, r3
    fe1a:	781a      	ldrb	r2, [r3, #0]
    fe1c:	2337      	movs	r3, #55	; 0x37
    fe1e:	18fb      	adds	r3, r7, r3
    fe20:	3201      	adds	r2, #1
    fe22:	701a      	strb	r2, [r3, #0]
    fe24:	2337      	movs	r3, #55	; 0x37
    fe26:	18fb      	adds	r3, r7, r3
    fe28:	781b      	ldrb	r3, [r3, #0]
    fe2a:	2b07      	cmp	r3, #7
    fe2c:	d9e5      	bls.n	fdfa <DataEncrypt+0x9e>
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if address is less than 8 bytes
        }
    }
    // FrameCounter
    for (i = 0; i < 4; i++) {
    fe2e:	2337      	movs	r3, #55	; 0x37
    fe30:	18fb      	adds	r3, r7, r3
    fe32:	2200      	movs	r2, #0
    fe34:	701a      	strb	r2, [r3, #0]
    fe36:	e012      	b.n	fe5e <DataEncrypt+0x102>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    fe38:	2337      	movs	r3, #55	; 0x37
    fe3a:	18fb      	adds	r3, r7, r3
    fe3c:	781b      	ldrb	r3, [r3, #0]
    fe3e:	3309      	adds	r3, #9
    fe40:	2237      	movs	r2, #55	; 0x37
    fe42:	18ba      	adds	r2, r7, r2
    fe44:	7812      	ldrb	r2, [r2, #0]
    fe46:	1d39      	adds	r1, r7, #4
    fe48:	5c89      	ldrb	r1, [r1, r2]
    fe4a:	2214      	movs	r2, #20
    fe4c:	18ba      	adds	r2, r7, r2
    fe4e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
    fe50:	2337      	movs	r3, #55	; 0x37
    fe52:	18fb      	adds	r3, r7, r3
    fe54:	781a      	ldrb	r2, [r3, #0]
    fe56:	2337      	movs	r3, #55	; 0x37
    fe58:	18fb      	adds	r3, r7, r3
    fe5a:	3201      	adds	r2, #1
    fe5c:	701a      	strb	r2, [r3, #0]
    fe5e:	2337      	movs	r3, #55	; 0x37
    fe60:	18fb      	adds	r3, r7, r3
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	2b03      	cmp	r3, #3
    fe66:	d9e7      	bls.n	fe38 <DataEncrypt+0xdc>
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    fe68:	2314      	movs	r3, #20
    fe6a:	18fb      	adds	r3, r7, r3
    fe6c:	2204      	movs	r2, #4
    fe6e:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    fe70:	2314      	movs	r3, #20
    fe72:	18fb      	adds	r3, r7, r3
    fe74:	2200      	movs	r2, #0
    fe76:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    fe78:	2314      	movs	r3, #20
    fe7a:	18fb      	adds	r3, r7, r3
    fe7c:	2200      	movs	r2, #0
    fe7e:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
    fe80:	2337      	movs	r3, #55	; 0x37
    fe82:	18fb      	adds	r3, r7, r3
    fe84:	2200      	movs	r2, #0
    fe86:	701a      	strb	r2, [r3, #0]
    fe88:	e07d      	b.n	ff86 <DataEncrypt+0x22a>
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    fe8a:	2335      	movs	r3, #53	; 0x35
    fe8c:	18fb      	adds	r3, r7, r3
    fe8e:	2200      	movs	r2, #0
    fe90:	701a      	strb	r2, [r3, #0]
    fe92:	e012      	b.n	feba <DataEncrypt+0x15e>
            block[j] = CTR_Nonce_and_Counter[j];
    fe94:	2335      	movs	r3, #53	; 0x35
    fe96:	18fb      	adds	r3, r7, r3
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	2235      	movs	r2, #53	; 0x35
    fe9c:	18ba      	adds	r2, r7, r2
    fe9e:	7812      	ldrb	r2, [r2, #0]
    fea0:	2114      	movs	r1, #20
    fea2:	1879      	adds	r1, r7, r1
    fea4:	5c89      	ldrb	r1, [r1, r2]
    fea6:	2224      	movs	r2, #36	; 0x24
    fea8:	18ba      	adds	r2, r7, r2
    feaa:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    feac:	2335      	movs	r3, #53	; 0x35
    feae:	18fb      	adds	r3, r7, r3
    feb0:	781a      	ldrb	r2, [r3, #0]
    feb2:	2335      	movs	r3, #53	; 0x35
    feb4:	18fb      	adds	r3, r7, r3
    feb6:	3201      	adds	r2, #1
    feb8:	701a      	strb	r2, [r3, #0]
    feba:	2335      	movs	r3, #53	; 0x35
    febc:	18fb      	adds	r3, r7, r3
    febe:	781b      	ldrb	r3, [r3, #0]
    fec0:	2b0f      	cmp	r3, #15
    fec2:	d9e7      	bls.n	fe94 <DataEncrypt+0x138>
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
    fec4:	4a39      	ldr	r2, [pc, #228]	; (ffac <DataEncrypt+0x250>)
    fec6:	2324      	movs	r3, #36	; 0x24
    fec8:	18fb      	adds	r3, r7, r3
    feca:	0011      	movs	r1, r2
    fecc:	0018      	movs	r0, r3
    fece:	4b38      	ldr	r3, [pc, #224]	; (ffb0 <DataEncrypt+0x254>)
    fed0:	4798      	blx	r3
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    fed2:	2335      	movs	r3, #53	; 0x35
    fed4:	18fb      	adds	r3, r7, r3
    fed6:	2200      	movs	r2, #0
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	e040      	b.n	ff5e <DataEncrypt+0x202>
            if (CTR_Nonce_and_Counter[15] == 0) {
    fedc:	2314      	movs	r3, #20
    fede:	18fb      	adds	r3, r7, r3
    fee0:	7bdb      	ldrb	r3, [r3, #15]
    fee2:	2b00      	cmp	r3, #0
    fee4:	d112      	bne.n	ff0c <DataEncrypt+0x1b0>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    fee6:	2335      	movs	r3, #53	; 0x35
    fee8:	18fb      	adds	r3, r7, r3
    feea:	781b      	ldrb	r3, [r3, #0]
    feec:	2235      	movs	r2, #53	; 0x35
    feee:	18ba      	adds	r2, r7, r2
    fef0:	7812      	ldrb	r2, [r2, #0]
    fef2:	2124      	movs	r1, #36	; 0x24
    fef4:	1879      	adds	r1, r7, r1
    fef6:	5c89      	ldrb	r1, [r1, r2]
    fef8:	2235      	movs	r2, #53	; 0x35
    fefa:	18ba      	adds	r2, r7, r2
    fefc:	7812      	ldrb	r2, [r2, #0]
    fefe:	482d      	ldr	r0, [pc, #180]	; (ffb4 <DataEncrypt+0x258>)
    ff00:	5c82      	ldrb	r2, [r0, r2]
    ff02:	404a      	eors	r2, r1
    ff04:	b2d1      	uxtb	r1, r2
    ff06:	4a2c      	ldr	r2, [pc, #176]	; (ffb8 <DataEncrypt+0x25c>)
    ff08:	54d1      	strb	r1, [r2, r3]
    ff0a:	e021      	b.n	ff50 <DataEncrypt+0x1f4>
            }
            else {
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    ff0c:	2335      	movs	r3, #53	; 0x35
    ff0e:	18fb      	adds	r3, r7, r3
    ff10:	781a      	ldrb	r2, [r3, #0]
    ff12:	2337      	movs	r3, #55	; 0x37
    ff14:	18fb      	adds	r3, r7, r3
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	3b01      	subs	r3, #1
    ff1a:	011b      	lsls	r3, r3, #4
    ff1c:	18d3      	adds	r3, r2, r3
    ff1e:	001a      	movs	r2, r3
    ff20:	68fb      	ldr	r3, [r7, #12]
    ff22:	189b      	adds	r3, r3, r2
    ff24:	2235      	movs	r2, #53	; 0x35
    ff26:	18ba      	adds	r2, r7, r2
    ff28:	7812      	ldrb	r2, [r2, #0]
    ff2a:	2124      	movs	r1, #36	; 0x24
    ff2c:	1879      	adds	r1, r7, r1
    ff2e:	5c89      	ldrb	r1, [r1, r2]
    ff30:	2235      	movs	r2, #53	; 0x35
    ff32:	18ba      	adds	r2, r7, r2
    ff34:	7810      	ldrb	r0, [r2, #0]
    ff36:	2237      	movs	r2, #55	; 0x37
    ff38:	18ba      	adds	r2, r7, r2
    ff3a:	7812      	ldrb	r2, [r2, #0]
    ff3c:	3a01      	subs	r2, #1
    ff3e:	0112      	lsls	r2, r2, #4
    ff40:	1882      	adds	r2, r0, r2
    ff42:	0010      	movs	r0, r2
    ff44:	68fa      	ldr	r2, [r7, #12]
    ff46:	1812      	adds	r2, r2, r0
    ff48:	7812      	ldrb	r2, [r2, #0]
    ff4a:	404a      	eors	r2, r1
    ff4c:	b2d2      	uxtb	r2, r2
    ff4e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < AES_BLOCKSIZE; j++) {
    ff50:	2335      	movs	r3, #53	; 0x35
    ff52:	18fb      	adds	r3, r7, r3
    ff54:	781a      	ldrb	r2, [r3, #0]
    ff56:	2335      	movs	r3, #53	; 0x35
    ff58:	18fb      	adds	r3, r7, r3
    ff5a:	3201      	adds	r2, #1
    ff5c:	701a      	strb	r2, [r3, #0]
    ff5e:	2335      	movs	r3, #53	; 0x35
    ff60:	18fb      	adds	r3, r7, r3
    ff62:	781b      	ldrb	r3, [r3, #0]
    ff64:	2b0f      	cmp	r3, #15
    ff66:	d9b9      	bls.n	fedc <DataEncrypt+0x180>
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    ff68:	2314      	movs	r3, #20
    ff6a:	18fb      	adds	r3, r7, r3
    ff6c:	7bdb      	ldrb	r3, [r3, #15]
    ff6e:	3301      	adds	r3, #1
    ff70:	b2da      	uxtb	r2, r3
    ff72:	2314      	movs	r3, #20
    ff74:	18fb      	adds	r3, r7, r3
    ff76:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    ff78:	2337      	movs	r3, #55	; 0x37
    ff7a:	18fb      	adds	r3, r7, r3
    ff7c:	781a      	ldrb	r2, [r3, #0]
    ff7e:	2337      	movs	r3, #55	; 0x37
    ff80:	18fb      	adds	r3, r7, r3
    ff82:	3201      	adds	r2, #1
    ff84:	701a      	strb	r2, [r3, #0]
    ff86:	2337      	movs	r3, #55	; 0x37
    ff88:	18fb      	adds	r3, r7, r3
    ff8a:	781a      	ldrb	r2, [r3, #0]
    ff8c:	2336      	movs	r3, #54	; 0x36
    ff8e:	18fb      	adds	r3, r7, r3
    ff90:	781b      	ldrb	r3, [r3, #0]
    ff92:	3301      	adds	r3, #1
    ff94:	429a      	cmp	r2, r3
    ff96:	da00      	bge.n	ff9a <DataEncrypt+0x23e>
    ff98:	e777      	b.n	fe8a <DataEncrypt+0x12e>
    }
    return true;
    ff9a:	2301      	movs	r3, #1
}
    ff9c:	0018      	movs	r0, r3
    ff9e:	46bd      	mov	sp, r7
    ffa0:	b00f      	add	sp, #60	; 0x3c
    ffa2:	bd90      	pop	{r4, r7, pc}
    ffa4:	20001c90 	.word	0x20001c90
    ffa8:	0000fa85 	.word	0x0000fa85
    ffac:	2000059c 	.word	0x2000059c
    ffb0:	0000f9f1 	.word	0x0000f9f1
    ffb4:	200022e8 	.word	0x200022e8
    ffb8:	20001cbc 	.word	0x20001cbc

0000ffbc <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
    ffbc:	b580      	push	{r7, lr}
    ffbe:	af00      	add	r7, sp, #0
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    ffc0:	4b0e      	ldr	r3, [pc, #56]	; (fffc <validate_mic+0x40>)
    ffc2:	781a      	ldrb	r2, [r3, #0]
    ffc4:	4b0e      	ldr	r3, [pc, #56]	; (10000 <validate_mic+0x44>)
    ffc6:	781b      	ldrb	r3, [r3, #0]
    ffc8:	429a      	cmp	r2, r3
    ffca:	d111      	bne.n	fff0 <validate_mic+0x34>
    ffcc:	4b0b      	ldr	r3, [pc, #44]	; (fffc <validate_mic+0x40>)
    ffce:	785a      	ldrb	r2, [r3, #1]
    ffd0:	4b0b      	ldr	r3, [pc, #44]	; (10000 <validate_mic+0x44>)
    ffd2:	785b      	ldrb	r3, [r3, #1]
    ffd4:	429a      	cmp	r2, r3
    ffd6:	d10b      	bne.n	fff0 <validate_mic+0x34>
    ffd8:	4b08      	ldr	r3, [pc, #32]	; (fffc <validate_mic+0x40>)
    ffda:	789a      	ldrb	r2, [r3, #2]
    ffdc:	4b08      	ldr	r3, [pc, #32]	; (10000 <validate_mic+0x44>)
    ffde:	789b      	ldrb	r3, [r3, #2]
    ffe0:	429a      	cmp	r2, r3
    ffe2:	d105      	bne.n	fff0 <validate_mic+0x34>
    ffe4:	4b05      	ldr	r3, [pc, #20]	; (fffc <validate_mic+0x40>)
    ffe6:	78da      	ldrb	r2, [r3, #3]
    ffe8:	4b05      	ldr	r3, [pc, #20]	; (10000 <validate_mic+0x44>)
    ffea:	78db      	ldrb	r3, [r3, #3]
    ffec:	429a      	cmp	r2, r3
    ffee:	d001      	beq.n	fff4 <validate_mic+0x38>
        return false;
    fff0:	2300      	movs	r3, #0
    fff2:	e000      	b.n	fff6 <validate_mic+0x3a>
    }
    else {
        return true;
    fff4:	2301      	movs	r3, #1
    }
}
    fff6:	0018      	movs	r0, r3
    fff8:	46bd      	mov	sp, r7
    fffa:	bd80      	pop	{r7, pc}
    fffc:	20001cbc 	.word	0x20001cbc
   10000:	200022f8 	.word	0x200022f8

00010004 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t* Payload, uint8_t* PayloadLen, uint8_t* SourceIEEEAddress,
    API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
   10004:	b590      	push	{r4, r7, lr}
   10006:	b091      	sub	sp, #68	; 0x44
   10008:	af02      	add	r7, sp, #8
   1000a:	60f8      	str	r0, [r7, #12]
   1000c:	60b9      	str	r1, [r7, #8]
   1000e:	607a      	str	r2, [r7, #4]
   10010:	603b      	str	r3, [r7, #0]
    uint8_t i, iterations, block[AES_BLOCKSIZE], j, CTR_Nonce_and_Counter[AES_BLOCKSIZE];
    // Calculating No of blocks in the packet (1 block = 16 bytes of data)
    iterations = *PayloadLen / 16;
   10012:	68bb      	ldr	r3, [r7, #8]
   10014:	781a      	ldrb	r2, [r3, #0]
   10016:	2336      	movs	r3, #54	; 0x36
   10018:	18fb      	adds	r3, r7, r3
   1001a:	0912      	lsrs	r2, r2, #4
   1001c:	701a      	strb	r2, [r3, #0]
    if (*PayloadLen % AES_BLOCKSIZE != 0)
   1001e:	68bb      	ldr	r3, [r7, #8]
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	220f      	movs	r2, #15
   10024:	4013      	ands	r3, r2
   10026:	b2db      	uxtb	r3, r3
   10028:	2b00      	cmp	r3, #0
   1002a:	d006      	beq.n	1003a <DataDecrypt+0x36>
        iterations++;
   1002c:	2336      	movs	r3, #54	; 0x36
   1002e:	18fb      	adds	r3, r7, r3
   10030:	781a      	ldrb	r2, [r3, #0]
   10032:	2336      	movs	r3, #54	; 0x36
   10034:	18fb      	adds	r3, r7, r3
   10036:	3201      	adds	r2, #1
   10038:	701a      	strb	r2, [r3, #0]

    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
   1003a:	2337      	movs	r3, #55	; 0x37
   1003c:	18fb      	adds	r3, r7, r3
   1003e:	68ba      	ldr	r2, [r7, #8]
   10040:	7812      	ldrb	r2, [r2, #0]
   10042:	701a      	strb	r2, [r3, #0]
   10044:	e00d      	b.n	10062 <DataDecrypt+0x5e>
        Payload[i] = 0; // Padding
   10046:	2337      	movs	r3, #55	; 0x37
   10048:	18fb      	adds	r3, r7, r3
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	68fa      	ldr	r2, [r7, #12]
   1004e:	18d3      	adds	r3, r2, r3
   10050:	2200      	movs	r2, #0
   10052:	701a      	strb	r2, [r3, #0]
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
   10054:	2337      	movs	r3, #55	; 0x37
   10056:	18fb      	adds	r3, r7, r3
   10058:	781a      	ldrb	r2, [r3, #0]
   1005a:	2337      	movs	r3, #55	; 0x37
   1005c:	18fb      	adds	r3, r7, r3
   1005e:	3201      	adds	r2, #1
   10060:	701a      	strb	r2, [r3, #0]
   10062:	2337      	movs	r3, #55	; 0x37
   10064:	18fb      	adds	r3, r7, r3
   10066:	781a      	ldrb	r2, [r3, #0]
   10068:	2336      	movs	r3, #54	; 0x36
   1006a:	18fb      	adds	r3, r7, r3
   1006c:	781b      	ldrb	r3, [r3, #0]
   1006e:	011b      	lsls	r3, r3, #4
   10070:	429a      	cmp	r2, r3
   10072:	dbe8      	blt.n	10046 <DataDecrypt+0x42>
    }
    CTR_Nonce_and_Counter[0] = 0x01; // L
   10074:	2314      	movs	r3, #20
   10076:	18fb      	adds	r3, r7, r3
   10078:	2201      	movs	r2, #1
   1007a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
   1007c:	2337      	movs	r3, #55	; 0x37
   1007e:	18fb      	adds	r3, r7, r3
   10080:	2200      	movs	r2, #0
   10082:	701a      	strb	r2, [r3, #0]
   10084:	e013      	b.n	100ae <DataDecrypt+0xaa>
        CTR_Nonce_and_Counter[i + 1] = SourceIEEEAddress[i];
   10086:	2337      	movs	r3, #55	; 0x37
   10088:	18fb      	adds	r3, r7, r3
   1008a:	781b      	ldrb	r3, [r3, #0]
   1008c:	3301      	adds	r3, #1
   1008e:	2237      	movs	r2, #55	; 0x37
   10090:	18ba      	adds	r2, r7, r2
   10092:	7812      	ldrb	r2, [r2, #0]
   10094:	6879      	ldr	r1, [r7, #4]
   10096:	188a      	adds	r2, r1, r2
   10098:	7811      	ldrb	r1, [r2, #0]
   1009a:	2214      	movs	r2, #20
   1009c:	18ba      	adds	r2, r7, r2
   1009e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < MY_ADDRESS_LENGTH; i++) {
   100a0:	2337      	movs	r3, #55	; 0x37
   100a2:	18fb      	adds	r3, r7, r3
   100a4:	781a      	ldrb	r2, [r3, #0]
   100a6:	2337      	movs	r3, #55	; 0x37
   100a8:	18fb      	adds	r3, r7, r3
   100aa:	3201      	adds	r2, #1
   100ac:	701a      	strb	r2, [r3, #0]
   100ae:	2337      	movs	r3, #55	; 0x37
   100b0:	18fb      	adds	r3, r7, r3
   100b2:	781b      	ldrb	r3, [r3, #0]
   100b4:	2b07      	cmp	r3, #7
   100b6:	d9e6      	bls.n	10086 <DataDecrypt+0x82>
    if (MY_ADDRESS_LENGTH < 8) {
        for (i = MY_ADDRESS_LENGTH; i < 8; i++) {
            CTR_Nonce_and_Counter[i + 1] = 0; // padding if source address is less than 8 bytes
        }
    }
    for (i = 0; i < 4; i++) {
   100b8:	2337      	movs	r3, #55	; 0x37
   100ba:	18fb      	adds	r3, r7, r3
   100bc:	2200      	movs	r2, #0
   100be:	701a      	strb	r2, [r3, #0]
   100c0:	e012      	b.n	100e8 <DataDecrypt+0xe4>
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
   100c2:	2337      	movs	r3, #55	; 0x37
   100c4:	18fb      	adds	r3, r7, r3
   100c6:	781b      	ldrb	r3, [r3, #0]
   100c8:	3309      	adds	r3, #9
   100ca:	2237      	movs	r2, #55	; 0x37
   100cc:	18ba      	adds	r2, r7, r2
   100ce:	7812      	ldrb	r2, [r2, #0]
   100d0:	0039      	movs	r1, r7
   100d2:	5c89      	ldrb	r1, [r1, r2]
   100d4:	2214      	movs	r2, #20
   100d6:	18ba      	adds	r2, r7, r2
   100d8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
   100da:	2337      	movs	r3, #55	; 0x37
   100dc:	18fb      	adds	r3, r7, r3
   100de:	781a      	ldrb	r2, [r3, #0]
   100e0:	2337      	movs	r3, #55	; 0x37
   100e2:	18fb      	adds	r3, r7, r3
   100e4:	3201      	adds	r2, #1
   100e6:	701a      	strb	r2, [r3, #0]
   100e8:	2337      	movs	r3, #55	; 0x37
   100ea:	18fb      	adds	r3, r7, r3
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	2b03      	cmp	r3, #3
   100f0:	d9e7      	bls.n	100c2 <DataDecrypt+0xbe>
    }
    CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
   100f2:	2314      	movs	r3, #20
   100f4:	18fb      	adds	r3, r7, r3
   100f6:	2204      	movs	r2, #4
   100f8:	735a      	strb	r2, [r3, #13]
    CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
   100fa:	2314      	movs	r3, #20
   100fc:	18fb      	adds	r3, r7, r3
   100fe:	2200      	movs	r2, #0
   10100:	739a      	strb	r2, [r3, #14]
    CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
   10102:	2314      	movs	r3, #20
   10104:	18fb      	adds	r3, r7, r3
   10106:	2200      	movs	r2, #0
   10108:	73da      	strb	r2, [r3, #15]

    for (i = 0; i < iterations + 1; i++) {
   1010a:	2337      	movs	r3, #55	; 0x37
   1010c:	18fb      	adds	r3, r7, r3
   1010e:	2200      	movs	r2, #0
   10110:	701a      	strb	r2, [r3, #0]
   10112:	e076      	b.n	10202 <DataDecrypt+0x1fe>
        for (j = 0; j < 16; j++) {
   10114:	2335      	movs	r3, #53	; 0x35
   10116:	18fb      	adds	r3, r7, r3
   10118:	2200      	movs	r2, #0
   1011a:	701a      	strb	r2, [r3, #0]
   1011c:	e012      	b.n	10144 <DataDecrypt+0x140>
            block[j] = CTR_Nonce_and_Counter[j];
   1011e:	2335      	movs	r3, #53	; 0x35
   10120:	18fb      	adds	r3, r7, r3
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	2235      	movs	r2, #53	; 0x35
   10126:	18ba      	adds	r2, r7, r2
   10128:	7812      	ldrb	r2, [r2, #0]
   1012a:	2114      	movs	r1, #20
   1012c:	1879      	adds	r1, r7, r1
   1012e:	5c89      	ldrb	r1, [r1, r2]
   10130:	2224      	movs	r2, #36	; 0x24
   10132:	18ba      	adds	r2, r7, r2
   10134:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 16; j++) {
   10136:	2335      	movs	r3, #53	; 0x35
   10138:	18fb      	adds	r3, r7, r3
   1013a:	781a      	ldrb	r2, [r3, #0]
   1013c:	2335      	movs	r3, #53	; 0x35
   1013e:	18fb      	adds	r3, r7, r3
   10140:	3201      	adds	r2, #1
   10142:	701a      	strb	r2, [r3, #0]
   10144:	2335      	movs	r3, #53	; 0x35
   10146:	18fb      	adds	r3, r7, r3
   10148:	781b      	ldrb	r3, [r3, #0]
   1014a:	2b0f      	cmp	r3, #15
   1014c:	d9e7      	bls.n	1011e <DataDecrypt+0x11a>
        }
        PHY_EncryptReq(&block[0], mySecurityKey);
   1014e:	4a4f      	ldr	r2, [pc, #316]	; (1028c <DataDecrypt+0x288>)
   10150:	2324      	movs	r3, #36	; 0x24
   10152:	18fb      	adds	r3, r7, r3
   10154:	0011      	movs	r1, r2
   10156:	0018      	movs	r0, r3
   10158:	4b4d      	ldr	r3, [pc, #308]	; (10290 <DataDecrypt+0x28c>)
   1015a:	4798      	blx	r3
        for (j = 0; j < 16; j++) {
   1015c:	2335      	movs	r3, #53	; 0x35
   1015e:	18fb      	adds	r3, r7, r3
   10160:	2200      	movs	r2, #0
   10162:	701a      	strb	r2, [r3, #0]
   10164:	e039      	b.n	101da <DataDecrypt+0x1d6>
            if (CTR_Nonce_and_Counter[15] == 0) {
   10166:	2314      	movs	r3, #20
   10168:	18fb      	adds	r3, r7, r3
   1016a:	7bdb      	ldrb	r3, [r3, #15]
   1016c:	2b00      	cmp	r3, #0
   1016e:	d10b      	bne.n	10188 <DataDecrypt+0x184>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
   10170:	2335      	movs	r3, #53	; 0x35
   10172:	18fb      	adds	r3, r7, r3
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	2235      	movs	r2, #53	; 0x35
   10178:	18ba      	adds	r2, r7, r2
   1017a:	7812      	ldrb	r2, [r2, #0]
   1017c:	2124      	movs	r1, #36	; 0x24
   1017e:	1879      	adds	r1, r7, r1
   10180:	5c89      	ldrb	r1, [r1, r2]
   10182:	4a44      	ldr	r2, [pc, #272]	; (10294 <DataDecrypt+0x290>)
   10184:	54d1      	strb	r1, [r2, r3]
   10186:	e021      	b.n	101cc <DataDecrypt+0x1c8>
            }
            else {
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
   10188:	2335      	movs	r3, #53	; 0x35
   1018a:	18fb      	adds	r3, r7, r3
   1018c:	781a      	ldrb	r2, [r3, #0]
   1018e:	2337      	movs	r3, #55	; 0x37
   10190:	18fb      	adds	r3, r7, r3
   10192:	781b      	ldrb	r3, [r3, #0]
   10194:	3b01      	subs	r3, #1
   10196:	011b      	lsls	r3, r3, #4
   10198:	18d3      	adds	r3, r2, r3
   1019a:	001a      	movs	r2, r3
   1019c:	68fb      	ldr	r3, [r7, #12]
   1019e:	189b      	adds	r3, r3, r2
   101a0:	2235      	movs	r2, #53	; 0x35
   101a2:	18ba      	adds	r2, r7, r2
   101a4:	7812      	ldrb	r2, [r2, #0]
   101a6:	2124      	movs	r1, #36	; 0x24
   101a8:	1879      	adds	r1, r7, r1
   101aa:	5c89      	ldrb	r1, [r1, r2]
   101ac:	2235      	movs	r2, #53	; 0x35
   101ae:	18ba      	adds	r2, r7, r2
   101b0:	7810      	ldrb	r0, [r2, #0]
   101b2:	2237      	movs	r2, #55	; 0x37
   101b4:	18ba      	adds	r2, r7, r2
   101b6:	7812      	ldrb	r2, [r2, #0]
   101b8:	3a01      	subs	r2, #1
   101ba:	0112      	lsls	r2, r2, #4
   101bc:	1882      	adds	r2, r0, r2
   101be:	0010      	movs	r0, r2
   101c0:	68fa      	ldr	r2, [r7, #12]
   101c2:	1812      	adds	r2, r2, r0
   101c4:	7812      	ldrb	r2, [r2, #0]
   101c6:	404a      	eors	r2, r1
   101c8:	b2d2      	uxtb	r2, r2
   101ca:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 16; j++) {
   101cc:	2335      	movs	r3, #53	; 0x35
   101ce:	18fb      	adds	r3, r7, r3
   101d0:	781a      	ldrb	r2, [r3, #0]
   101d2:	2335      	movs	r3, #53	; 0x35
   101d4:	18fb      	adds	r3, r7, r3
   101d6:	3201      	adds	r2, #1
   101d8:	701a      	strb	r2, [r3, #0]
   101da:	2335      	movs	r3, #53	; 0x35
   101dc:	18fb      	adds	r3, r7, r3
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	2b0f      	cmp	r3, #15
   101e2:	d9c0      	bls.n	10166 <DataDecrypt+0x162>
            }
        }
        CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
   101e4:	2314      	movs	r3, #20
   101e6:	18fb      	adds	r3, r7, r3
   101e8:	7bdb      	ldrb	r3, [r3, #15]
   101ea:	3301      	adds	r3, #1
   101ec:	b2da      	uxtb	r2, r3
   101ee:	2314      	movs	r3, #20
   101f0:	18fb      	adds	r3, r7, r3
   101f2:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
   101f4:	2337      	movs	r3, #55	; 0x37
   101f6:	18fb      	adds	r3, r7, r3
   101f8:	781a      	ldrb	r2, [r3, #0]
   101fa:	2337      	movs	r3, #55	; 0x37
   101fc:	18fb      	adds	r3, r7, r3
   101fe:	3201      	adds	r2, #1
   10200:	701a      	strb	r2, [r3, #0]
   10202:	2337      	movs	r3, #55	; 0x37
   10204:	18fb      	adds	r3, r7, r3
   10206:	781a      	ldrb	r2, [r3, #0]
   10208:	2336      	movs	r3, #54	; 0x36
   1020a:	18fb      	adds	r3, r7, r3
   1020c:	781b      	ldrb	r3, [r3, #0]
   1020e:	3301      	adds	r3, #1
   10210:	429a      	cmp	r2, r3
   10212:	da00      	bge.n	10216 <DataDecrypt+0x212>
   10214:	e77e      	b.n	10114 <DataDecrypt+0x110>
    }
    *PayloadLen = *PayloadLen - 4;
   10216:	68bb      	ldr	r3, [r7, #8]
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	3b04      	subs	r3, #4
   1021c:	b2da      	uxtb	r2, r3
   1021e:	68bb      	ldr	r3, [r7, #8]
   10220:	701a      	strb	r2, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
   10222:	68bb      	ldr	r3, [r7, #8]
   10224:	7819      	ldrb	r1, [r3, #0]
   10226:	683c      	ldr	r4, [r7, #0]
   10228:	2348      	movs	r3, #72	; 0x48
   1022a:	18fb      	adds	r3, r7, r3
   1022c:	781a      	ldrb	r2, [r3, #0]
   1022e:	68f8      	ldr	r0, [r7, #12]
   10230:	687b      	ldr	r3, [r7, #4]
   10232:	9300      	str	r3, [sp, #0]
   10234:	0023      	movs	r3, r4
   10236:	4c18      	ldr	r4, [pc, #96]	; (10298 <DataDecrypt+0x294>)
   10238:	47a0      	blx	r4
    for (i = 0; i < 16; i++) {
   1023a:	2337      	movs	r3, #55	; 0x37
   1023c:	18fb      	adds	r3, r7, r3
   1023e:	2200      	movs	r2, #0
   10240:	701a      	strb	r2, [r3, #0]
   10242:	e017      	b.n	10274 <DataDecrypt+0x270>
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
   10244:	2337      	movs	r3, #55	; 0x37
   10246:	18fb      	adds	r3, r7, r3
   10248:	781b      	ldrb	r3, [r3, #0]
   1024a:	2237      	movs	r2, #55	; 0x37
   1024c:	18ba      	adds	r2, r7, r2
   1024e:	7812      	ldrb	r2, [r2, #0]
   10250:	4910      	ldr	r1, [pc, #64]	; (10294 <DataDecrypt+0x290>)
   10252:	5c89      	ldrb	r1, [r1, r2]
   10254:	2237      	movs	r2, #55	; 0x37
   10256:	18ba      	adds	r2, r7, r2
   10258:	7812      	ldrb	r2, [r2, #0]
   1025a:	4810      	ldr	r0, [pc, #64]	; (1029c <DataDecrypt+0x298>)
   1025c:	5c82      	ldrb	r2, [r0, r2]
   1025e:	404a      	eors	r2, r1
   10260:	b2d1      	uxtb	r1, r2
   10262:	4a0f      	ldr	r2, [pc, #60]	; (102a0 <DataDecrypt+0x29c>)
   10264:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 16; i++) {
   10266:	2337      	movs	r3, #55	; 0x37
   10268:	18fb      	adds	r3, r7, r3
   1026a:	781a      	ldrb	r2, [r3, #0]
   1026c:	2337      	movs	r3, #55	; 0x37
   1026e:	18fb      	adds	r3, r7, r3
   10270:	3201      	adds	r2, #1
   10272:	701a      	strb	r2, [r3, #0]
   10274:	2337      	movs	r3, #55	; 0x37
   10276:	18fb      	adds	r3, r7, r3
   10278:	781b      	ldrb	r3, [r3, #0]
   1027a:	2b0f      	cmp	r3, #15
   1027c:	d9e2      	bls.n	10244 <DataDecrypt+0x240>
    }
    return validate_mic();
   1027e:	4b09      	ldr	r3, [pc, #36]	; (102a4 <DataDecrypt+0x2a0>)
   10280:	4798      	blx	r3
   10282:	0003      	movs	r3, r0
}
   10284:	0018      	movs	r0, r3
   10286:	46bd      	mov	sp, r7
   10288:	b00f      	add	sp, #60	; 0x3c
   1028a:	bd90      	pop	{r4, r7, pc}
   1028c:	2000059c 	.word	0x2000059c
   10290:	0000f9f1 	.word	0x0000f9f1
   10294:	20001ca8 	.word	0x20001ca8
   10298:	0000fa85 	.word	0x0000fa85
   1029c:	200022e8 	.word	0x200022e8
   102a0:	20001cbc 	.word	0x20001cbc
   102a4:	0000ffbd 	.word	0x0000ffbd

000102a8 <MiMAC_SetChannel>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_SetChannel(uint8_t channel, uint8_t offsetFreq)
{
   102a8:	b580      	push	{r7, lr}
   102aa:	b082      	sub	sp, #8
   102ac:	af00      	add	r7, sp, #0
   102ae:	0002      	movs	r2, r0
   102b0:	1dfb      	adds	r3, r7, #7
   102b2:	701a      	strb	r2, [r3, #0]
   102b4:	1dbb      	adds	r3, r7, #6
   102b6:	1c0a      	adds	r2, r1, #0
   102b8:	701a      	strb	r2, [r3, #0]
	if (channel < 0x00 || channel > 0x0A) {
   102ba:	1dfb      	adds	r3, r7, #7
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	2b0a      	cmp	r3, #10
   102c0:	d901      	bls.n	102c6 <MiMAC_SetChannel+0x1e>
		return false;
   102c2:	2300      	movs	r3, #0
   102c4:	e009      	b.n	102da <MiMAC_SetChannel+0x32>
	}
	MACCurrentChannel = channel;
   102c6:	4b07      	ldr	r3, [pc, #28]	; (102e4 <MiMAC_SetChannel+0x3c>)
   102c8:	1dfa      	adds	r2, r7, #7
   102ca:	7812      	ldrb	r2, [r2, #0]
   102cc:	701a      	strb	r2, [r3, #0]
	PHY_SetChannel(channel);
   102ce:	1dfb      	adds	r3, r7, #7
   102d0:	781b      	ldrb	r3, [r3, #0]
   102d2:	0018      	movs	r0, r3
   102d4:	4b04      	ldr	r3, [pc, #16]	; (102e8 <MiMAC_SetChannel+0x40>)
   102d6:	4798      	blx	r3
	return true;
   102d8:	2301      	movs	r3, #1
}
   102da:	0018      	movs	r0, r3
   102dc:	46bd      	mov	sp, r7
   102de:	b002      	add	sp, #8
   102e0:	bd80      	pop	{r7, pc}
   102e2:	46c0      	nop			; (mov r8, r8)
   102e4:	200022fe 	.word	0x200022fe
   102e8:	0000f925 	.word	0x0000f925

000102ec <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
   102ec:	b590      	push	{r4, r7, lr}
   102ee:	b085      	sub	sp, #20
   102f0:	af00      	add	r7, sp, #0
   102f2:	003b      	movs	r3, r7
   102f4:	6018      	str	r0, [r3, #0]
   102f6:	6059      	str	r1, [r3, #4]
    uint8_t i;

    PHY_Init();
   102f8:	4b1f      	ldr	r3, [pc, #124]	; (10378 <MiMAC_Init+0x8c>)
   102fa:	4798      	blx	r3
    MACInitParams = initValue;
   102fc:	4b1f      	ldr	r3, [pc, #124]	; (1037c <MiMAC_Init+0x90>)
   102fe:	003a      	movs	r2, r7
   10300:	ca03      	ldmia	r2!, {r0, r1}
   10302:	c303      	stmia	r3!, {r0, r1}
    uint16_t x = PHY_RandomReq();
   10304:	230c      	movs	r3, #12
   10306:	18fc      	adds	r4, r7, r3
   10308:	4b1d      	ldr	r3, [pc, #116]	; (10380 <MiMAC_Init+0x94>)
   1030a:	4798      	blx	r3
   1030c:	0003      	movs	r3, r0
   1030e:	8023      	strh	r3, [r4, #0]
    // Set RF mode
    PHY_SetRxState(true);
   10310:	2001      	movs	r0, #1
   10312:	4b1c      	ldr	r3, [pc, #112]	; (10384 <MiMAC_Init+0x98>)
   10314:	4798      	blx	r3
    IEEESeqNum = x & 0xff;
   10316:	230c      	movs	r3, #12
   10318:	18fb      	adds	r3, r7, r3
   1031a:	881b      	ldrh	r3, [r3, #0]
   1031c:	b2da      	uxtb	r2, r3
   1031e:	4b1a      	ldr	r3, [pc, #104]	; (10388 <MiMAC_Init+0x9c>)
   10320:	701a      	strb	r2, [r3, #0]

    MACCurrentChannel = 11;
   10322:	4b1a      	ldr	r3, [pc, #104]	; (1038c <MiMAC_Init+0xa0>)
   10324:	220b      	movs	r2, #11
   10326:	701a      	strb	r2, [r3, #0]

    // Set Node Address
    PHY_SetIEEEAddr(myLongAddress);
   10328:	4b19      	ldr	r3, [pc, #100]	; (10390 <MiMAC_Init+0xa4>)
   1032a:	0018      	movs	r0, r3
   1032c:	4b19      	ldr	r3, [pc, #100]	; (10394 <MiMAC_Init+0xa8>)
   1032e:	4798      	blx	r3

    trx_status.Val = 0;
   10330:	4b19      	ldr	r3, [pc, #100]	; (10398 <MiMAC_Init+0xac>)
   10332:	2200      	movs	r2, #0
   10334:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < BANK_SIZE; i++) {
   10336:	230f      	movs	r3, #15
   10338:	18fb      	adds	r3, r7, r3
   1033a:	2200      	movs	r2, #0
   1033c:	701a      	strb	r2, [r3, #0]
   1033e:	e00e      	b.n	1035e <MiMAC_Init+0x72>
        RxBuffer[i].PayloadLen = 0;
   10340:	230f      	movs	r3, #15
   10342:	18fb      	adds	r3, r7, r3
   10344:	781a      	ldrb	r2, [r3, #0]
   10346:	4b15      	ldr	r3, [pc, #84]	; (1039c <MiMAC_Init+0xb0>)
   10348:	214e      	movs	r1, #78	; 0x4e
   1034a:	434a      	muls	r2, r1
   1034c:	2100      	movs	r1, #0
   1034e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < BANK_SIZE; i++) {
   10350:	230f      	movs	r3, #15
   10352:	18fb      	adds	r3, r7, r3
   10354:	781a      	ldrb	r2, [r3, #0]
   10356:	230f      	movs	r3, #15
   10358:	18fb      	adds	r3, r7, r3
   1035a:	3201      	adds	r2, #1
   1035c:	701a      	strb	r2, [r3, #0]
   1035e:	230f      	movs	r3, #15
   10360:	18fb      	adds	r3, r7, r3
   10362:	781b      	ldrb	r3, [r3, #0]
   10364:	2b13      	cmp	r3, #19
   10366:	d9eb      	bls.n	10340 <MiMAC_Init+0x54>
        OutgoingFrameCounter.Val = 0;
        nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        OutgoingFrameCounter.Val = 1;
    }
#else
    OutgoingFrameCounter.Val = 1;
   10368:	4b0d      	ldr	r3, [pc, #52]	; (103a0 <MiMAC_Init+0xb4>)
   1036a:	2201      	movs	r2, #1
   1036c:	601a      	str	r2, [r3, #0]
#endif
#endif

    return true;
   1036e:	2301      	movs	r3, #1
}
   10370:	0018      	movs	r0, r3
   10372:	46bd      	mov	sp, r7
   10374:	b005      	add	sp, #20
   10376:	bd90      	pop	{r4, r7, pc}
   10378:	0000f89d 	.word	0x0000f89d
   1037c:	20001c90 	.word	0x20001c90
   10380:	0000f819 	.word	0x0000f819
   10384:	0000f8fd 	.word	0x0000f8fd
   10388:	20001c84 	.word	0x20001c84
   1038c:	200022fe 	.word	0x200022fe
   10390:	2000246c 	.word	0x2000246c
   10394:	00010b95 	.word	0x00010b95
   10398:	20002300 	.word	0x20002300
   1039c:	20001ccc 	.word	0x20001ccc
   103a0:	200022e4 	.word	0x200022e4

000103a4 <MiMAC_SendPacket>:
 *
 *****************************************************************************************/
bool MiMAC_SendPacket(MAC_TRANS_PARAM transParam,
    uint8_t* MACPayload,
    uint8_t MACPayloadLen)
{
   103a4:	b590      	push	{r4, r7, lr}
   103a6:	b0a7      	sub	sp, #156	; 0x9c
   103a8:	af00      	add	r7, sp, #0
   103aa:	1d3c      	adds	r4, r7, #4
   103ac:	6020      	str	r0, [r4, #0]
   103ae:	6061      	str	r1, [r4, #4]
   103b0:	60a2      	str	r2, [r4, #8]
   103b2:	603b      	str	r3, [r7, #0]
    uint8_t headerLength;
    uint8_t loc = 0;
   103b4:	2396      	movs	r3, #150	; 0x96
   103b6:	18fb      	adds	r3, r7, r3
   103b8:	2200      	movs	r2, #0
   103ba:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
   103bc:	2395      	movs	r3, #149	; 0x95
   103be:	18fb      	adds	r3, r7, r3
   103c0:	2200      	movs	r2, #0
   103c2:	701a      	strb	r2, [r3, #0]
    uint8_t packet[FRAME_BUFFER];
    uint8_t frameControl = 0;
   103c4:	2394      	movs	r3, #148	; 0x94
   103c6:	18fb      	adds	r3, r7, r3
   103c8:	2200      	movs	r2, #0
   103ca:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
    bool IntraPAN;
#endif

    if (transParam.flags.bits.broadcast) {
   103cc:	1d3b      	adds	r3, r7, #4
   103ce:	781b      	ldrb	r3, [r3, #0]
   103d0:	2204      	movs	r2, #4
   103d2:	4013      	ands	r3, r2
   103d4:	b2db      	uxtb	r3, r3
   103d6:	2b00      	cmp	r3, #0
   103d8:	d002      	beq.n	103e0 <MiMAC_SendPacket+0x3c>
        transParam.altDestAddr = true;
   103da:	1d3b      	adds	r3, r7, #4
   103dc:	2201      	movs	r2, #1
   103de:	721a      	strb	r2, [r3, #8]
    }

    if (transParam.flags.bits.secEn) {
   103e0:	1d3b      	adds	r3, r7, #4
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	2208      	movs	r2, #8
   103e6:	4013      	ands	r3, r2
   103e8:	b2db      	uxtb	r3, r3
   103ea:	2b00      	cmp	r3, #0
   103ec:	d002      	beq.n	103f4 <MiMAC_SendPacket+0x50>
        transParam.altSrcAddr = false;
   103ee:	1d3b      	adds	r3, r7, #4
   103f0:	2200      	movs	r2, #0
   103f2:	725a      	strb	r2, [r3, #9]
        }
    }
#endif

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
   103f4:	1d3b      	adds	r3, r7, #4
   103f6:	781b      	ldrb	r3, [r3, #0]
   103f8:	2203      	movs	r2, #3
   103fa:	4013      	ands	r3, r2
   103fc:	b2db      	uxtb	r3, r3
   103fe:	2b01      	cmp	r3, #1
   10400:	d104      	bne.n	1040c <MiMAC_SendPacket+0x68>
        frameControl = 0x03;
   10402:	2394      	movs	r3, #148	; 0x94
   10404:	18fb      	adds	r3, r7, r3
   10406:	2203      	movs	r2, #3
   10408:	701a      	strb	r2, [r3, #0]
   1040a:	e00a      	b.n	10422 <MiMAC_SendPacket+0x7e>
    }
    else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA) {
   1040c:	1d3b      	adds	r3, r7, #4
   1040e:	781b      	ldrb	r3, [r3, #0]
   10410:	2203      	movs	r2, #3
   10412:	4013      	ands	r3, r2
   10414:	b2db      	uxtb	r3, r3
   10416:	2b00      	cmp	r3, #0
   10418:	d103      	bne.n	10422 <MiMAC_SendPacket+0x7e>
        frameControl = 0x01;
   1041a:	2394      	movs	r3, #148	; 0x94
   1041c:	18fb      	adds	r3, r7, r3
   1041e:	2201      	movs	r2, #1
   10420:	701a      	strb	r2, [r3, #0]
    }

// decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
   10422:	1d3b      	adds	r3, r7, #4
   10424:	895a      	ldrh	r2, [r3, #10]
   10426:	4be3      	ldr	r3, [pc, #908]	; (107b4 <MiMAC_SendPacket+0x410>)
   10428:	881b      	ldrh	r3, [r3, #0]
   1042a:	429a      	cmp	r2, r3
   1042c:	d115      	bne.n	1045a <MiMAC_SendPacket+0xb6>
   1042e:	4be1      	ldr	r3, [pc, #900]	; (107b4 <MiMAC_SendPacket+0x410>)
   10430:	881b      	ldrh	r3, [r3, #0]
   10432:	4ae1      	ldr	r2, [pc, #900]	; (107b8 <MiMAC_SendPacket+0x414>)
   10434:	4293      	cmp	r3, r2
   10436:	d010      	beq.n	1045a <MiMAC_SendPacket+0xb6>
#endif
    {
        headerLength = 5;
   10438:	2397      	movs	r3, #151	; 0x97
   1043a:	18fb      	adds	r3, r7, r3
   1043c:	2205      	movs	r2, #5
   1043e:	701a      	strb	r2, [r3, #0]
        frameControl |= 0x40;
   10440:	2394      	movs	r3, #148	; 0x94
   10442:	18fb      	adds	r3, r7, r3
   10444:	2294      	movs	r2, #148	; 0x94
   10446:	18ba      	adds	r2, r7, r2
   10448:	7812      	ldrb	r2, [r2, #0]
   1044a:	2140      	movs	r1, #64	; 0x40
   1044c:	430a      	orrs	r2, r1
   1044e:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        IntraPAN = true;
   10450:	2393      	movs	r3, #147	; 0x93
   10452:	18fb      	adds	r3, r7, r3
   10454:	2201      	movs	r2, #1
   10456:	701a      	strb	r2, [r3, #0]
   10458:	e007      	b.n	1046a <MiMAC_SendPacket+0xc6>
#endif
    }
#ifndef TARGET_SMALL
    else {
        headerLength = 7;
   1045a:	2397      	movs	r3, #151	; 0x97
   1045c:	18fb      	adds	r3, r7, r3
   1045e:	2207      	movs	r2, #7
   10460:	701a      	strb	r2, [r3, #0]
        IntraPAN = false;
   10462:	2393      	movs	r3, #147	; 0x93
   10464:	18fb      	adds	r3, r7, r3
   10466:	2200      	movs	r2, #0
   10468:	701a      	strb	r2, [r3, #0]
    }
#endif

    if (transParam.altDestAddr) {
   1046a:	1d3b      	adds	r3, r7, #4
   1046c:	7a1b      	ldrb	r3, [r3, #8]
   1046e:	2b00      	cmp	r3, #0
   10470:	d007      	beq.n	10482 <MiMAC_SendPacket+0xde>
        headerLength += 2;
   10472:	2397      	movs	r3, #151	; 0x97
   10474:	18fb      	adds	r3, r7, r3
   10476:	2297      	movs	r2, #151	; 0x97
   10478:	18ba      	adds	r2, r7, r2
   1047a:	7812      	ldrb	r2, [r2, #0]
   1047c:	3202      	adds	r2, #2
   1047e:	701a      	strb	r2, [r3, #0]
   10480:	e006      	b.n	10490 <MiMAC_SendPacket+0xec>
    }
    else {
        headerLength += 8;
   10482:	2397      	movs	r3, #151	; 0x97
   10484:	18fb      	adds	r3, r7, r3
   10486:	2297      	movs	r2, #151	; 0x97
   10488:	18ba      	adds	r2, r7, r2
   1048a:	7812      	ldrb	r2, [r2, #0]
   1048c:	3208      	adds	r2, #8
   1048e:	701a      	strb	r2, [r3, #0]
    }

    if (transParam.altSrcAddr) {
   10490:	1d3b      	adds	r3, r7, #4
   10492:	7a5b      	ldrb	r3, [r3, #9]
   10494:	2b00      	cmp	r3, #0
   10496:	d007      	beq.n	104a8 <MiMAC_SendPacket+0x104>
        headerLength += 2;
   10498:	2397      	movs	r3, #151	; 0x97
   1049a:	18fb      	adds	r3, r7, r3
   1049c:	2297      	movs	r2, #151	; 0x97
   1049e:	18ba      	adds	r2, r7, r2
   104a0:	7812      	ldrb	r2, [r2, #0]
   104a2:	3202      	adds	r2, #2
   104a4:	701a      	strb	r2, [r3, #0]
   104a6:	e006      	b.n	104b6 <MiMAC_SendPacket+0x112>
    }
    else {
        headerLength += 8;
   104a8:	2397      	movs	r3, #151	; 0x97
   104aa:	18fb      	adds	r3, r7, r3
   104ac:	2297      	movs	r2, #151	; 0x97
   104ae:	18ba      	adds	r2, r7, r2
   104b0:	7812      	ldrb	r2, [r2, #0]
   104b2:	3208      	adds	r2, #8
   104b4:	701a      	strb	r2, [r3, #0]
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
   104b6:	1d3b      	adds	r3, r7, #4
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	2220      	movs	r2, #32
   104bc:	4013      	ands	r3, r2
   104be:	b2db      	uxtb	r3, r3
   104c0:	2b00      	cmp	r3, #0
   104c2:	d00e      	beq.n	104e2 <MiMAC_SendPacket+0x13e>
   104c4:	1d3b      	adds	r3, r7, #4
   104c6:	781b      	ldrb	r3, [r3, #0]
   104c8:	2204      	movs	r2, #4
   104ca:	4013      	ands	r3, r2
   104cc:	b2db      	uxtb	r3, r3
   104ce:	2b00      	cmp	r3, #0
   104d0:	d107      	bne.n	104e2 <MiMAC_SendPacket+0x13e>
        frameControl |= 0x20;
   104d2:	2394      	movs	r3, #148	; 0x94
   104d4:	18fb      	adds	r3, r7, r3
   104d6:	2294      	movs	r2, #148	; 0x94
   104d8:	18ba      	adds	r2, r7, r2
   104da:	7812      	ldrb	r2, [r2, #0]
   104dc:	2120      	movs	r1, #32
   104de:	430a      	orrs	r2, r1
   104e0:	701a      	strb	r2, [r3, #0]
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
   104e2:	1d3b      	adds	r3, r7, #4
   104e4:	781b      	ldrb	r3, [r3, #0]
   104e6:	2203      	movs	r2, #3
   104e8:	4013      	ands	r3, r2
   104ea:	b2db      	uxtb	r3, r3
   104ec:	2b03      	cmp	r3, #3
   104ee:	d113      	bne.n	10518 <MiMAC_SendPacket+0x174>
        frameControl = 0x00;
   104f0:	2394      	movs	r3, #148	; 0x94
   104f2:	18fb      	adds	r3, r7, r3
   104f4:	2200      	movs	r2, #0
   104f6:	701a      	strb	r2, [r3, #0]
        headerLength = 7;
   104f8:	2397      	movs	r3, #151	; 0x97
   104fa:	18fb      	adds	r3, r7, r3
   104fc:	2207      	movs	r2, #7
   104fe:	701a      	strb	r2, [r3, #0]
#if !defined(TARGET_SMALL)
        IntraPAN = false;
   10500:	2393      	movs	r3, #147	; 0x93
   10502:	18fb      	adds	r3, r7, r3
   10504:	2200      	movs	r2, #0
   10506:	701a      	strb	r2, [r3, #0]
#endif
        transParam.altSrcAddr = true;
   10508:	1d3b      	adds	r3, r7, #4
   1050a:	2201      	movs	r2, #1
   1050c:	725a      	strb	r2, [r3, #9]
        transParam.flags.bits.ackReq = false;
   1050e:	1d3b      	adds	r3, r7, #4
   10510:	781a      	ldrb	r2, [r3, #0]
   10512:	2120      	movs	r1, #32
   10514:	438a      	bics	r2, r1
   10516:	701a      	strb	r2, [r3, #0]
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
   10518:	1d3b      	adds	r3, r7, #4
   1051a:	781b      	ldrb	r3, [r3, #0]
   1051c:	2208      	movs	r2, #8
   1051e:	4013      	ands	r3, r2
   10520:	b2db      	uxtb	r3, r3
   10522:	2b00      	cmp	r3, #0
   10524:	d013      	beq.n	1054e <MiMAC_SendPacket+0x1aa>
        frameControl |= 0x08;
   10526:	2394      	movs	r3, #148	; 0x94
   10528:	18fb      	adds	r3, r7, r3
   1052a:	2294      	movs	r2, #148	; 0x94
   1052c:	18ba      	adds	r2, r7, r2
   1052e:	7812      	ldrb	r2, [r2, #0]
   10530:	2108      	movs	r1, #8
   10532:	430a      	orrs	r2, r1
   10534:	701a      	strb	r2, [r3, #0]
        //DataEncrypt(MACPayload, &MACPayloadLen , 0 , 0 , 0);
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
   10536:	2394      	movs	r3, #148	; 0x94
   10538:	18fb      	adds	r3, r7, r3
   1053a:	7819      	ldrb	r1, [r3, #0]
   1053c:	4b9f      	ldr	r3, [pc, #636]	; (107bc <MiMAC_SendPacket+0x418>)
   1053e:	681a      	ldr	r2, [r3, #0]
   10540:	23a8      	movs	r3, #168	; 0xa8
   10542:	18fc      	adds	r4, r7, r3
   10544:	6838      	ldr	r0, [r7, #0]
   10546:	000b      	movs	r3, r1
   10548:	0021      	movs	r1, r4
   1054a:	4c9d      	ldr	r4, [pc, #628]	; (107c0 <MiMAC_SendPacket+0x41c>)
   1054c:	47a0      	blx	r4
    }
#endif

    // set header length
    packet[loc++] = headerLength;
   1054e:	2396      	movs	r3, #150	; 0x96
   10550:	18fb      	adds	r3, r7, r3
   10552:	781b      	ldrb	r3, [r3, #0]
   10554:	2296      	movs	r2, #150	; 0x96
   10556:	18ba      	adds	r2, r7, r2
   10558:	1c59      	adds	r1, r3, #1
   1055a:	7011      	strb	r1, [r2, #0]
   1055c:	0019      	movs	r1, r3
   1055e:	2310      	movs	r3, #16
   10560:	18fb      	adds	r3, r7, r3
   10562:	2297      	movs	r2, #151	; 0x97
   10564:	18ba      	adds	r2, r7, r2
   10566:	7812      	ldrb	r2, [r2, #0]
   10568:	545a      	strb	r2, [r3, r1]
// set packet length
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
   1056a:	1d3b      	adds	r3, r7, #4
   1056c:	781b      	ldrb	r3, [r3, #0]
   1056e:	2208      	movs	r2, #8
   10570:	4013      	ands	r3, r2
   10572:	b2db      	uxtb	r3, r3
   10574:	2b00      	cmp	r3, #0
   10576:	d015      	beq.n	105a4 <MiMAC_SendPacket+0x200>
        // 4 byte mic and 5 byte outgoing frame counter
        packet[loc++] = MACPayloadLen + headerLength + 9;
   10578:	2396      	movs	r3, #150	; 0x96
   1057a:	18fb      	adds	r3, r7, r3
   1057c:	781b      	ldrb	r3, [r3, #0]
   1057e:	2296      	movs	r2, #150	; 0x96
   10580:	18ba      	adds	r2, r7, r2
   10582:	1c59      	adds	r1, r3, #1
   10584:	7011      	strb	r1, [r2, #0]
   10586:	0019      	movs	r1, r3
   10588:	23a8      	movs	r3, #168	; 0xa8
   1058a:	18fb      	adds	r3, r7, r3
   1058c:	781a      	ldrb	r2, [r3, #0]
   1058e:	2397      	movs	r3, #151	; 0x97
   10590:	18fb      	adds	r3, r7, r3
   10592:	781b      	ldrb	r3, [r3, #0]
   10594:	18d3      	adds	r3, r2, r3
   10596:	b2db      	uxtb	r3, r3
   10598:	3309      	adds	r3, #9
   1059a:	b2da      	uxtb	r2, r3
   1059c:	2310      	movs	r3, #16
   1059e:	18fb      	adds	r3, r7, r3
   105a0:	545a      	strb	r2, [r3, r1]
   105a2:	e012      	b.n	105ca <MiMAC_SendPacket+0x226>
    }
    else
#endif
    {
        packet[loc++] = MACPayloadLen + headerLength;
   105a4:	2396      	movs	r3, #150	; 0x96
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	781b      	ldrb	r3, [r3, #0]
   105aa:	2296      	movs	r2, #150	; 0x96
   105ac:	18ba      	adds	r2, r7, r2
   105ae:	1c59      	adds	r1, r3, #1
   105b0:	7011      	strb	r1, [r2, #0]
   105b2:	0019      	movs	r1, r3
   105b4:	23a8      	movs	r3, #168	; 0xa8
   105b6:	18fb      	adds	r3, r7, r3
   105b8:	781a      	ldrb	r2, [r3, #0]
   105ba:	2397      	movs	r3, #151	; 0x97
   105bc:	18fb      	adds	r3, r7, r3
   105be:	781b      	ldrb	r3, [r3, #0]
   105c0:	18d3      	adds	r3, r2, r3
   105c2:	b2da      	uxtb	r2, r3
   105c4:	2310      	movs	r3, #16
   105c6:	18fb      	adds	r3, r7, r3
   105c8:	545a      	strb	r2, [r3, r1]
    }

    // set frame control LSB
    packet[loc++] = frameControl;
   105ca:	2396      	movs	r3, #150	; 0x96
   105cc:	18fb      	adds	r3, r7, r3
   105ce:	781b      	ldrb	r3, [r3, #0]
   105d0:	2296      	movs	r2, #150	; 0x96
   105d2:	18ba      	adds	r2, r7, r2
   105d4:	1c59      	adds	r1, r3, #1
   105d6:	7011      	strb	r1, [r2, #0]
   105d8:	0019      	movs	r1, r3
   105da:	2310      	movs	r3, #16
   105dc:	18fb      	adds	r3, r7, r3
   105de:	2294      	movs	r2, #148	; 0x94
   105e0:	18ba      	adds	r2, r7, r2
   105e2:	7812      	ldrb	r2, [r2, #0]
   105e4:	545a      	strb	r2, [r3, r1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
   105e6:	1d3b      	adds	r3, r7, #4
   105e8:	781b      	ldrb	r3, [r3, #0]
   105ea:	2203      	movs	r2, #3
   105ec:	4013      	ands	r3, r2
   105ee:	b2db      	uxtb	r3, r3
   105f0:	2b03      	cmp	r3, #3
   105f2:	d11d      	bne.n	10630 <MiMAC_SendPacket+0x28c>
        packet[loc++] = 0x80;
   105f4:	2396      	movs	r3, #150	; 0x96
   105f6:	18fb      	adds	r3, r7, r3
   105f8:	781b      	ldrb	r3, [r3, #0]
   105fa:	2296      	movs	r2, #150	; 0x96
   105fc:	18ba      	adds	r2, r7, r2
   105fe:	1c59      	adds	r1, r3, #1
   10600:	7011      	strb	r1, [r2, #0]
   10602:	001a      	movs	r2, r3
   10604:	2310      	movs	r3, #16
   10606:	18fb      	adds	r3, r7, r3
   10608:	2180      	movs	r1, #128	; 0x80
   1060a:	5499      	strb	r1, [r3, r2]
        // sequence number
        packet[loc++] = IEEESeqNum++;
   1060c:	2396      	movs	r3, #150	; 0x96
   1060e:	18fb      	adds	r3, r7, r3
   10610:	781b      	ldrb	r3, [r3, #0]
   10612:	2296      	movs	r2, #150	; 0x96
   10614:	18ba      	adds	r2, r7, r2
   10616:	1c59      	adds	r1, r3, #1
   10618:	7011      	strb	r1, [r2, #0]
   1061a:	0019      	movs	r1, r3
   1061c:	4b69      	ldr	r3, [pc, #420]	; (107c4 <MiMAC_SendPacket+0x420>)
   1061e:	781b      	ldrb	r3, [r3, #0]
   10620:	1c5a      	adds	r2, r3, #1
   10622:	b2d0      	uxtb	r0, r2
   10624:	4a67      	ldr	r2, [pc, #412]	; (107c4 <MiMAC_SendPacket+0x420>)
   10626:	7010      	strb	r0, [r2, #0]
   10628:	2210      	movs	r2, #16
   1062a:	18ba      	adds	r2, r7, r2
   1062c:	5453      	strb	r3, [r2, r1]
   1062e:	e0e9      	b.n	10804 <MiMAC_SendPacket+0x460>
    }
    else {
        if (transParam.altDestAddr && transParam.altSrcAddr) {
   10630:	1d3b      	adds	r3, r7, #4
   10632:	7a1b      	ldrb	r3, [r3, #8]
   10634:	2b00      	cmp	r3, #0
   10636:	d010      	beq.n	1065a <MiMAC_SendPacket+0x2b6>
   10638:	1d3b      	adds	r3, r7, #4
   1063a:	7a5b      	ldrb	r3, [r3, #9]
   1063c:	2b00      	cmp	r3, #0
   1063e:	d00c      	beq.n	1065a <MiMAC_SendPacket+0x2b6>
            packet[loc++] = 0x88;
   10640:	2396      	movs	r3, #150	; 0x96
   10642:	18fb      	adds	r3, r7, r3
   10644:	781b      	ldrb	r3, [r3, #0]
   10646:	2296      	movs	r2, #150	; 0x96
   10648:	18ba      	adds	r2, r7, r2
   1064a:	1c59      	adds	r1, r3, #1
   1064c:	7011      	strb	r1, [r2, #0]
   1064e:	001a      	movs	r2, r3
   10650:	2310      	movs	r3, #16
   10652:	18fb      	adds	r3, r7, r3
   10654:	2188      	movs	r1, #136	; 0x88
   10656:	5499      	strb	r1, [r3, r2]
   10658:	e03b      	b.n	106d2 <MiMAC_SendPacket+0x32e>
        }
        else if (transParam.altDestAddr && transParam.altSrcAddr == 0) {
   1065a:	1d3b      	adds	r3, r7, #4
   1065c:	7a1b      	ldrb	r3, [r3, #8]
   1065e:	2b00      	cmp	r3, #0
   10660:	d013      	beq.n	1068a <MiMAC_SendPacket+0x2e6>
   10662:	1d3b      	adds	r3, r7, #4
   10664:	7a5b      	ldrb	r3, [r3, #9]
   10666:	2201      	movs	r2, #1
   10668:	4053      	eors	r3, r2
   1066a:	b2db      	uxtb	r3, r3
   1066c:	2b00      	cmp	r3, #0
   1066e:	d00c      	beq.n	1068a <MiMAC_SendPacket+0x2e6>
            packet[loc++] = 0xC8;
   10670:	2396      	movs	r3, #150	; 0x96
   10672:	18fb      	adds	r3, r7, r3
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	2296      	movs	r2, #150	; 0x96
   10678:	18ba      	adds	r2, r7, r2
   1067a:	1c59      	adds	r1, r3, #1
   1067c:	7011      	strb	r1, [r2, #0]
   1067e:	001a      	movs	r2, r3
   10680:	2310      	movs	r3, #16
   10682:	18fb      	adds	r3, r7, r3
   10684:	21c8      	movs	r1, #200	; 0xc8
   10686:	5499      	strb	r1, [r3, r2]
   10688:	e023      	b.n	106d2 <MiMAC_SendPacket+0x32e>
        }
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
   1068a:	1d3b      	adds	r3, r7, #4
   1068c:	7a1b      	ldrb	r3, [r3, #8]
   1068e:	2201      	movs	r2, #1
   10690:	4053      	eors	r3, r2
   10692:	b2db      	uxtb	r3, r3
   10694:	2b00      	cmp	r3, #0
   10696:	d010      	beq.n	106ba <MiMAC_SendPacket+0x316>
   10698:	1d3b      	adds	r3, r7, #4
   1069a:	7a5b      	ldrb	r3, [r3, #9]
   1069c:	2b00      	cmp	r3, #0
   1069e:	d00c      	beq.n	106ba <MiMAC_SendPacket+0x316>
            packet[loc++] = 0x8C;
   106a0:	2396      	movs	r3, #150	; 0x96
   106a2:	18fb      	adds	r3, r7, r3
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	2296      	movs	r2, #150	; 0x96
   106a8:	18ba      	adds	r2, r7, r2
   106aa:	1c59      	adds	r1, r3, #1
   106ac:	7011      	strb	r1, [r2, #0]
   106ae:	001a      	movs	r2, r3
   106b0:	2310      	movs	r3, #16
   106b2:	18fb      	adds	r3, r7, r3
   106b4:	218c      	movs	r1, #140	; 0x8c
   106b6:	5499      	strb	r1, [r3, r2]
   106b8:	e00b      	b.n	106d2 <MiMAC_SendPacket+0x32e>
        }
        else {
            packet[loc++] = 0xCC;
   106ba:	2396      	movs	r3, #150	; 0x96
   106bc:	18fb      	adds	r3, r7, r3
   106be:	781b      	ldrb	r3, [r3, #0]
   106c0:	2296      	movs	r2, #150	; 0x96
   106c2:	18ba      	adds	r2, r7, r2
   106c4:	1c59      	adds	r1, r3, #1
   106c6:	7011      	strb	r1, [r2, #0]
   106c8:	001a      	movs	r2, r3
   106ca:	2310      	movs	r3, #16
   106cc:	18fb      	adds	r3, r7, r3
   106ce:	21cc      	movs	r1, #204	; 0xcc
   106d0:	5499      	strb	r1, [r3, r2]
        }

        // sequence number
        packet[loc++] = IEEESeqNum++;
   106d2:	2396      	movs	r3, #150	; 0x96
   106d4:	18fb      	adds	r3, r7, r3
   106d6:	781b      	ldrb	r3, [r3, #0]
   106d8:	2296      	movs	r2, #150	; 0x96
   106da:	18ba      	adds	r2, r7, r2
   106dc:	1c59      	adds	r1, r3, #1
   106de:	7011      	strb	r1, [r2, #0]
   106e0:	0019      	movs	r1, r3
   106e2:	4b38      	ldr	r3, [pc, #224]	; (107c4 <MiMAC_SendPacket+0x420>)
   106e4:	781b      	ldrb	r3, [r3, #0]
   106e6:	1c5a      	adds	r2, r3, #1
   106e8:	b2d0      	uxtb	r0, r2
   106ea:	4a36      	ldr	r2, [pc, #216]	; (107c4 <MiMAC_SendPacket+0x420>)
   106ec:	7010      	strb	r0, [r2, #0]
   106ee:	2210      	movs	r2, #16
   106f0:	18ba      	adds	r2, r7, r2
   106f2:	5453      	strb	r3, [r2, r1]

        // destination PANID
        packet[loc++] = transParam.DestPANID.v[0];
   106f4:	2396      	movs	r3, #150	; 0x96
   106f6:	18fb      	adds	r3, r7, r3
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	2296      	movs	r2, #150	; 0x96
   106fc:	18ba      	adds	r2, r7, r2
   106fe:	1c59      	adds	r1, r3, #1
   10700:	7011      	strb	r1, [r2, #0]
   10702:	001a      	movs	r2, r3
   10704:	1d3b      	adds	r3, r7, #4
   10706:	7a99      	ldrb	r1, [r3, #10]
   10708:	2310      	movs	r3, #16
   1070a:	18fb      	adds	r3, r7, r3
   1070c:	5499      	strb	r1, [r3, r2]
        packet[loc++] = transParam.DestPANID.v[1];
   1070e:	2396      	movs	r3, #150	; 0x96
   10710:	18fb      	adds	r3, r7, r3
   10712:	781b      	ldrb	r3, [r3, #0]
   10714:	2296      	movs	r2, #150	; 0x96
   10716:	18ba      	adds	r2, r7, r2
   10718:	1c59      	adds	r1, r3, #1
   1071a:	7011      	strb	r1, [r2, #0]
   1071c:	001a      	movs	r2, r3
   1071e:	1d3b      	adds	r3, r7, #4
   10720:	7ad9      	ldrb	r1, [r3, #11]
   10722:	2310      	movs	r3, #16
   10724:	18fb      	adds	r3, r7, r3
   10726:	5499      	strb	r1, [r3, r2]

        // destination address
        if (transParam.flags.bits.broadcast) {
   10728:	1d3b      	adds	r3, r7, #4
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	2204      	movs	r2, #4
   1072e:	4013      	ands	r3, r2
   10730:	b2db      	uxtb	r3, r3
   10732:	2b00      	cmp	r3, #0
   10734:	d018      	beq.n	10768 <MiMAC_SendPacket+0x3c4>
            packet[loc++] = 0xFF;
   10736:	2396      	movs	r3, #150	; 0x96
   10738:	18fb      	adds	r3, r7, r3
   1073a:	781b      	ldrb	r3, [r3, #0]
   1073c:	2296      	movs	r2, #150	; 0x96
   1073e:	18ba      	adds	r2, r7, r2
   10740:	1c59      	adds	r1, r3, #1
   10742:	7011      	strb	r1, [r2, #0]
   10744:	001a      	movs	r2, r3
   10746:	2310      	movs	r3, #16
   10748:	18fb      	adds	r3, r7, r3
   1074a:	21ff      	movs	r1, #255	; 0xff
   1074c:	5499      	strb	r1, [r3, r2]
            packet[loc++] = 0xFF;
   1074e:	2396      	movs	r3, #150	; 0x96
   10750:	18fb      	adds	r3, r7, r3
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	2296      	movs	r2, #150	; 0x96
   10756:	18ba      	adds	r2, r7, r2
   10758:	1c59      	adds	r1, r3, #1
   1075a:	7011      	strb	r1, [r2, #0]
   1075c:	001a      	movs	r2, r3
   1075e:	2310      	movs	r3, #16
   10760:	18fb      	adds	r3, r7, r3
   10762:	21ff      	movs	r1, #255	; 0xff
   10764:	5499      	strb	r1, [r3, r2]
   10766:	e04d      	b.n	10804 <MiMAC_SendPacket+0x460>
        }
        else {
            if (transParam.altDestAddr) {
   10768:	1d3b      	adds	r3, r7, #4
   1076a:	7a1b      	ldrb	r3, [r3, #8]
   1076c:	2b00      	cmp	r3, #0
   1076e:	d01c      	beq.n	107aa <MiMAC_SendPacket+0x406>
                packet[loc++] = transParam.DestAddress[0];
   10770:	2396      	movs	r3, #150	; 0x96
   10772:	18fb      	adds	r3, r7, r3
   10774:	781b      	ldrb	r3, [r3, #0]
   10776:	2296      	movs	r2, #150	; 0x96
   10778:	18ba      	adds	r2, r7, r2
   1077a:	1c59      	adds	r1, r3, #1
   1077c:	7011      	strb	r1, [r2, #0]
   1077e:	001a      	movs	r2, r3
   10780:	1d3b      	adds	r3, r7, #4
   10782:	685b      	ldr	r3, [r3, #4]
   10784:	7819      	ldrb	r1, [r3, #0]
   10786:	2310      	movs	r3, #16
   10788:	18fb      	adds	r3, r7, r3
   1078a:	5499      	strb	r1, [r3, r2]
                packet[loc++] = transParam.DestAddress[1];
   1078c:	2396      	movs	r3, #150	; 0x96
   1078e:	18fb      	adds	r3, r7, r3
   10790:	781b      	ldrb	r3, [r3, #0]
   10792:	2296      	movs	r2, #150	; 0x96
   10794:	18ba      	adds	r2, r7, r2
   10796:	1c59      	adds	r1, r3, #1
   10798:	7011      	strb	r1, [r2, #0]
   1079a:	001a      	movs	r2, r3
   1079c:	1d3b      	adds	r3, r7, #4
   1079e:	685b      	ldr	r3, [r3, #4]
   107a0:	7859      	ldrb	r1, [r3, #1]
   107a2:	2310      	movs	r3, #16
   107a4:	18fb      	adds	r3, r7, r3
   107a6:	5499      	strb	r1, [r3, r2]
   107a8:	e02c      	b.n	10804 <MiMAC_SendPacket+0x460>
            }
            else {
                for (i = 0; i < 8; i++) {
   107aa:	2395      	movs	r3, #149	; 0x95
   107ac:	18fb      	adds	r3, r7, r3
   107ae:	2200      	movs	r2, #0
   107b0:	701a      	strb	r2, [r3, #0]
   107b2:	e022      	b.n	107fa <MiMAC_SendPacket+0x456>
   107b4:	200022fc 	.word	0x200022fc
   107b8:	0000ffff 	.word	0x0000ffff
   107bc:	200022e4 	.word	0x200022e4
   107c0:	0000fd5d 	.word	0x0000fd5d
   107c4:	20001c84 	.word	0x20001c84
                    packet[loc++] = transParam.DestAddress[i];
   107c8:	2396      	movs	r3, #150	; 0x96
   107ca:	18fb      	adds	r3, r7, r3
   107cc:	781b      	ldrb	r3, [r3, #0]
   107ce:	2296      	movs	r2, #150	; 0x96
   107d0:	18ba      	adds	r2, r7, r2
   107d2:	1c59      	adds	r1, r3, #1
   107d4:	7011      	strb	r1, [r2, #0]
   107d6:	0019      	movs	r1, r3
   107d8:	1d3b      	adds	r3, r7, #4
   107da:	685a      	ldr	r2, [r3, #4]
   107dc:	2395      	movs	r3, #149	; 0x95
   107de:	18fb      	adds	r3, r7, r3
   107e0:	781b      	ldrb	r3, [r3, #0]
   107e2:	18d3      	adds	r3, r2, r3
   107e4:	781a      	ldrb	r2, [r3, #0]
   107e6:	2310      	movs	r3, #16
   107e8:	18fb      	adds	r3, r7, r3
   107ea:	545a      	strb	r2, [r3, r1]
                for (i = 0; i < 8; i++) {
   107ec:	2395      	movs	r3, #149	; 0x95
   107ee:	18fb      	adds	r3, r7, r3
   107f0:	781a      	ldrb	r2, [r3, #0]
   107f2:	2395      	movs	r3, #149	; 0x95
   107f4:	18fb      	adds	r3, r7, r3
   107f6:	3201      	adds	r2, #1
   107f8:	701a      	strb	r2, [r3, #0]
   107fa:	2395      	movs	r3, #149	; 0x95
   107fc:	18fb      	adds	r3, r7, r3
   107fe:	781b      	ldrb	r3, [r3, #0]
   10800:	2b07      	cmp	r3, #7
   10802:	d9e1      	bls.n	107c8 <MiMAC_SendPacket+0x424>
        }
    }

#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false) {
   10804:	2393      	movs	r3, #147	; 0x93
   10806:	18fb      	adds	r3, r7, r3
   10808:	781b      	ldrb	r3, [r3, #0]
   1080a:	2201      	movs	r2, #1
   1080c:	4053      	eors	r3, r2
   1080e:	b2db      	uxtb	r3, r3
   10810:	2b00      	cmp	r3, #0
   10812:	d019      	beq.n	10848 <MiMAC_SendPacket+0x4a4>
        packet[loc++] = MAC_PANID.v[0];
   10814:	2396      	movs	r3, #150	; 0x96
   10816:	18fb      	adds	r3, r7, r3
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	2296      	movs	r2, #150	; 0x96
   1081c:	18ba      	adds	r2, r7, r2
   1081e:	1c59      	adds	r1, r3, #1
   10820:	7011      	strb	r1, [r2, #0]
   10822:	001a      	movs	r2, r3
   10824:	4b8e      	ldr	r3, [pc, #568]	; (10a60 <MiMAC_SendPacket+0x6bc>)
   10826:	7819      	ldrb	r1, [r3, #0]
   10828:	2310      	movs	r3, #16
   1082a:	18fb      	adds	r3, r7, r3
   1082c:	5499      	strb	r1, [r3, r2]
        packet[loc++] = MAC_PANID.v[1];
   1082e:	2396      	movs	r3, #150	; 0x96
   10830:	18fb      	adds	r3, r7, r3
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	2296      	movs	r2, #150	; 0x96
   10836:	18ba      	adds	r2, r7, r2
   10838:	1c59      	adds	r1, r3, #1
   1083a:	7011      	strb	r1, [r2, #0]
   1083c:	001a      	movs	r2, r3
   1083e:	4b88      	ldr	r3, [pc, #544]	; (10a60 <MiMAC_SendPacket+0x6bc>)
   10840:	7859      	ldrb	r1, [r3, #1]
   10842:	2310      	movs	r3, #16
   10844:	18fb      	adds	r3, r7, r3
   10846:	5499      	strb	r1, [r3, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr) {
   10848:	1d3b      	adds	r3, r7, #4
   1084a:	7a5b      	ldrb	r3, [r3, #9]
   1084c:	2b00      	cmp	r3, #0
   1084e:	d01a      	beq.n	10886 <MiMAC_SendPacket+0x4e2>
        packet[loc++] = myNetworkAddress.v[0];
   10850:	2396      	movs	r3, #150	; 0x96
   10852:	18fb      	adds	r3, r7, r3
   10854:	781b      	ldrb	r3, [r3, #0]
   10856:	2296      	movs	r2, #150	; 0x96
   10858:	18ba      	adds	r2, r7, r2
   1085a:	1c59      	adds	r1, r3, #1
   1085c:	7011      	strb	r1, [r2, #0]
   1085e:	001a      	movs	r2, r3
   10860:	4b80      	ldr	r3, [pc, #512]	; (10a64 <MiMAC_SendPacket+0x6c0>)
   10862:	7819      	ldrb	r1, [r3, #0]
   10864:	2310      	movs	r3, #16
   10866:	18fb      	adds	r3, r7, r3
   10868:	5499      	strb	r1, [r3, r2]
        packet[loc++] = myNetworkAddress.v[1];
   1086a:	2396      	movs	r3, #150	; 0x96
   1086c:	18fb      	adds	r3, r7, r3
   1086e:	781b      	ldrb	r3, [r3, #0]
   10870:	2296      	movs	r2, #150	; 0x96
   10872:	18ba      	adds	r2, r7, r2
   10874:	1c59      	adds	r1, r3, #1
   10876:	7011      	strb	r1, [r2, #0]
   10878:	001a      	movs	r2, r3
   1087a:	4b7a      	ldr	r3, [pc, #488]	; (10a64 <MiMAC_SendPacket+0x6c0>)
   1087c:	7859      	ldrb	r1, [r3, #1]
   1087e:	2310      	movs	r3, #16
   10880:	18fb      	adds	r3, r7, r3
   10882:	5499      	strb	r1, [r3, r2]
   10884:	e022      	b.n	108cc <MiMAC_SendPacket+0x528>
    }
    else {
        for (i = 0; i < 8; i++) {
   10886:	2395      	movs	r3, #149	; 0x95
   10888:	18fb      	adds	r3, r7, r3
   1088a:	2200      	movs	r2, #0
   1088c:	701a      	strb	r2, [r3, #0]
   1088e:	e018      	b.n	108c2 <MiMAC_SendPacket+0x51e>
            packet[loc++] = MACInitParams.PAddress[i];
   10890:	2396      	movs	r3, #150	; 0x96
   10892:	18fb      	adds	r3, r7, r3
   10894:	781b      	ldrb	r3, [r3, #0]
   10896:	2296      	movs	r2, #150	; 0x96
   10898:	18ba      	adds	r2, r7, r2
   1089a:	1c59      	adds	r1, r3, #1
   1089c:	7011      	strb	r1, [r2, #0]
   1089e:	0019      	movs	r1, r3
   108a0:	4b71      	ldr	r3, [pc, #452]	; (10a68 <MiMAC_SendPacket+0x6c4>)
   108a2:	685a      	ldr	r2, [r3, #4]
   108a4:	2395      	movs	r3, #149	; 0x95
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	18d3      	adds	r3, r2, r3
   108ac:	781a      	ldrb	r2, [r3, #0]
   108ae:	2310      	movs	r3, #16
   108b0:	18fb      	adds	r3, r7, r3
   108b2:	545a      	strb	r2, [r3, r1]
        for (i = 0; i < 8; i++) {
   108b4:	2395      	movs	r3, #149	; 0x95
   108b6:	18fb      	adds	r3, r7, r3
   108b8:	781a      	ldrb	r2, [r3, #0]
   108ba:	2395      	movs	r3, #149	; 0x95
   108bc:	18fb      	adds	r3, r7, r3
   108be:	3201      	adds	r2, #1
   108c0:	701a      	strb	r2, [r3, #0]
   108c2:	2395      	movs	r3, #149	; 0x95
   108c4:	18fb      	adds	r3, r7, r3
   108c6:	781b      	ldrb	r3, [r3, #0]
   108c8:	2b07      	cmp	r3, #7
   108ca:	d9e1      	bls.n	10890 <MiMAC_SendPacket+0x4ec>
        }
    }
#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn) {
   108cc:	1d3b      	adds	r3, r7, #4
   108ce:	781b      	ldrb	r3, [r3, #0]
   108d0:	2208      	movs	r2, #8
   108d2:	4013      	ands	r3, r2
   108d4:	b2db      	uxtb	r3, r3
   108d6:	2b00      	cmp	r3, #0
   108d8:	d031      	beq.n	1093e <MiMAC_SendPacket+0x59a>
        // fill the additional security aux header
        for (i = 0; i < 4; i++) {
   108da:	2395      	movs	r3, #149	; 0x95
   108dc:	18fb      	adds	r3, r7, r3
   108de:	2200      	movs	r2, #0
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	e016      	b.n	10912 <MiMAC_SendPacket+0x56e>
            packet[loc++] = OutgoingFrameCounter.v[i];
   108e4:	2396      	movs	r3, #150	; 0x96
   108e6:	18fb      	adds	r3, r7, r3
   108e8:	781b      	ldrb	r3, [r3, #0]
   108ea:	2296      	movs	r2, #150	; 0x96
   108ec:	18ba      	adds	r2, r7, r2
   108ee:	1c59      	adds	r1, r3, #1
   108f0:	7011      	strb	r1, [r2, #0]
   108f2:	0019      	movs	r1, r3
   108f4:	2395      	movs	r3, #149	; 0x95
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	781b      	ldrb	r3, [r3, #0]
   108fa:	4a5c      	ldr	r2, [pc, #368]	; (10a6c <MiMAC_SendPacket+0x6c8>)
   108fc:	5cd2      	ldrb	r2, [r2, r3]
   108fe:	2310      	movs	r3, #16
   10900:	18fb      	adds	r3, r7, r3
   10902:	545a      	strb	r2, [r3, r1]
        for (i = 0; i < 4; i++) {
   10904:	2395      	movs	r3, #149	; 0x95
   10906:	18fb      	adds	r3, r7, r3
   10908:	781a      	ldrb	r2, [r3, #0]
   1090a:	2395      	movs	r3, #149	; 0x95
   1090c:	18fb      	adds	r3, r7, r3
   1090e:	3201      	adds	r2, #1
   10910:	701a      	strb	r2, [r3, #0]
   10912:	2395      	movs	r3, #149	; 0x95
   10914:	18fb      	adds	r3, r7, r3
   10916:	781b      	ldrb	r3, [r3, #0]
   10918:	2b03      	cmp	r3, #3
   1091a:	d9e3      	bls.n	108e4 <MiMAC_SendPacket+0x540>
        }
        OutgoingFrameCounter.Val++;
   1091c:	4b53      	ldr	r3, [pc, #332]	; (10a6c <MiMAC_SendPacket+0x6c8>)
   1091e:	681b      	ldr	r3, [r3, #0]
   10920:	1c5a      	adds	r2, r3, #1
   10922:	4b52      	ldr	r3, [pc, #328]	; (10a6c <MiMAC_SendPacket+0x6c8>)
   10924:	601a      	str	r2, [r3, #0]
        if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0)) {
            nvmPutOutFrameCounter(OutgoingFrameCounter.v);
        }
#endif
        //copy myKeySequenceNumber
        packet[loc++] = myKeySequenceNumber;
   10926:	2396      	movs	r3, #150	; 0x96
   10928:	18fb      	adds	r3, r7, r3
   1092a:	781b      	ldrb	r3, [r3, #0]
   1092c:	2296      	movs	r2, #150	; 0x96
   1092e:	18ba      	adds	r2, r7, r2
   10930:	1c59      	adds	r1, r3, #1
   10932:	7011      	strb	r1, [r2, #0]
   10934:	001a      	movs	r2, r3
   10936:	2100      	movs	r1, #0
   10938:	2310      	movs	r3, #16
   1093a:	18fb      	adds	r3, r7, r3
   1093c:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < MACPayloadLen; i++) {
        packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) {
   1093e:	2395      	movs	r3, #149	; 0x95
   10940:	18fb      	adds	r3, r7, r3
   10942:	2200      	movs	r2, #0
   10944:	701a      	strb	r2, [r3, #0]
   10946:	e017      	b.n	10978 <MiMAC_SendPacket+0x5d4>
        packet[loc++] = MACPayload[i];
   10948:	2396      	movs	r3, #150	; 0x96
   1094a:	18fb      	adds	r3, r7, r3
   1094c:	781b      	ldrb	r3, [r3, #0]
   1094e:	2296      	movs	r2, #150	; 0x96
   10950:	18ba      	adds	r2, r7, r2
   10952:	1c59      	adds	r1, r3, #1
   10954:	7011      	strb	r1, [r2, #0]
   10956:	0019      	movs	r1, r3
   10958:	2395      	movs	r3, #149	; 0x95
   1095a:	18fb      	adds	r3, r7, r3
   1095c:	781b      	ldrb	r3, [r3, #0]
   1095e:	683a      	ldr	r2, [r7, #0]
   10960:	18d3      	adds	r3, r2, r3
   10962:	781a      	ldrb	r2, [r3, #0]
   10964:	2310      	movs	r3, #16
   10966:	18fb      	adds	r3, r7, r3
   10968:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < MACPayloadLen; i++) {
   1096a:	2395      	movs	r3, #149	; 0x95
   1096c:	18fb      	adds	r3, r7, r3
   1096e:	781a      	ldrb	r2, [r3, #0]
   10970:	2395      	movs	r3, #149	; 0x95
   10972:	18fb      	adds	r3, r7, r3
   10974:	3201      	adds	r2, #1
   10976:	701a      	strb	r2, [r3, #0]
   10978:	23a8      	movs	r3, #168	; 0xa8
   1097a:	18fb      	adds	r3, r7, r3
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	2295      	movs	r2, #149	; 0x95
   10980:	18ba      	adds	r2, r7, r2
   10982:	7812      	ldrb	r2, [r2, #0]
   10984:	429a      	cmp	r2, r3
   10986:	d3df      	bcc.n	10948 <MiMAC_SendPacket+0x5a4>
    }
    // MIC added
    packet[loc++] = final_mic_value[0];
   10988:	2396      	movs	r3, #150	; 0x96
   1098a:	18fb      	adds	r3, r7, r3
   1098c:	781b      	ldrb	r3, [r3, #0]
   1098e:	2296      	movs	r2, #150	; 0x96
   10990:	18ba      	adds	r2, r7, r2
   10992:	1c59      	adds	r1, r3, #1
   10994:	7011      	strb	r1, [r2, #0]
   10996:	001a      	movs	r2, r3
   10998:	4b35      	ldr	r3, [pc, #212]	; (10a70 <MiMAC_SendPacket+0x6cc>)
   1099a:	7819      	ldrb	r1, [r3, #0]
   1099c:	2310      	movs	r3, #16
   1099e:	18fb      	adds	r3, r7, r3
   109a0:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[1];
   109a2:	2396      	movs	r3, #150	; 0x96
   109a4:	18fb      	adds	r3, r7, r3
   109a6:	781b      	ldrb	r3, [r3, #0]
   109a8:	2296      	movs	r2, #150	; 0x96
   109aa:	18ba      	adds	r2, r7, r2
   109ac:	1c59      	adds	r1, r3, #1
   109ae:	7011      	strb	r1, [r2, #0]
   109b0:	001a      	movs	r2, r3
   109b2:	4b2f      	ldr	r3, [pc, #188]	; (10a70 <MiMAC_SendPacket+0x6cc>)
   109b4:	7859      	ldrb	r1, [r3, #1]
   109b6:	2310      	movs	r3, #16
   109b8:	18fb      	adds	r3, r7, r3
   109ba:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[2];
   109bc:	2396      	movs	r3, #150	; 0x96
   109be:	18fb      	adds	r3, r7, r3
   109c0:	781b      	ldrb	r3, [r3, #0]
   109c2:	2296      	movs	r2, #150	; 0x96
   109c4:	18ba      	adds	r2, r7, r2
   109c6:	1c59      	adds	r1, r3, #1
   109c8:	7011      	strb	r1, [r2, #0]
   109ca:	001a      	movs	r2, r3
   109cc:	4b28      	ldr	r3, [pc, #160]	; (10a70 <MiMAC_SendPacket+0x6cc>)
   109ce:	7899      	ldrb	r1, [r3, #2]
   109d0:	2310      	movs	r3, #16
   109d2:	18fb      	adds	r3, r7, r3
   109d4:	5499      	strb	r1, [r3, r2]
    packet[loc++] = final_mic_value[3];
   109d6:	2396      	movs	r3, #150	; 0x96
   109d8:	18fb      	adds	r3, r7, r3
   109da:	781b      	ldrb	r3, [r3, #0]
   109dc:	2296      	movs	r2, #150	; 0x96
   109de:	18ba      	adds	r2, r7, r2
   109e0:	1c59      	adds	r1, r3, #1
   109e2:	7011      	strb	r1, [r2, #0]
   109e4:	001a      	movs	r2, r3
   109e6:	4b22      	ldr	r3, [pc, #136]	; (10a70 <MiMAC_SendPacket+0x6cc>)
   109e8:	78d9      	ldrb	r1, [r3, #3]
   109ea:	2310      	movs	r3, #16
   109ec:	18fb      	adds	r3, r7, r3
   109ee:	5499      	strb	r1, [r3, r2]
#endif

    trx_status.bits.TX_BUSY = 1;
   109f0:	4a20      	ldr	r2, [pc, #128]	; (10a74 <MiMAC_SendPacket+0x6d0>)
   109f2:	7813      	ldrb	r3, [r2, #0]
   109f4:	2101      	movs	r1, #1
   109f6:	430b      	orrs	r3, r1
   109f8:	7013      	strb	r3, [r2, #0]

    // set the trigger value
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
   109fa:	1d3b      	adds	r3, r7, #4
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	2220      	movs	r2, #32
   10a00:	4013      	ands	r3, r2
   10a02:	b2db      	uxtb	r3, r3
   10a04:	2b00      	cmp	r3, #0
   10a06:	d010      	beq.n	10a2a <MiMAC_SendPacket+0x686>
   10a08:	1d3b      	adds	r3, r7, #4
   10a0a:	781b      	ldrb	r3, [r3, #0]
   10a0c:	2204      	movs	r2, #4
   10a0e:	4013      	ands	r3, r2
   10a10:	b2db      	uxtb	r3, r3
   10a12:	2b00      	cmp	r3, #0
   10a14:	d109      	bne.n	10a2a <MiMAC_SendPacket+0x686>
        i = 0x05;
   10a16:	2395      	movs	r3, #149	; 0x95
   10a18:	18fb      	adds	r3, r7, r3
   10a1a:	2205      	movs	r2, #5
   10a1c:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 1;
   10a1e:	4a15      	ldr	r2, [pc, #84]	; (10a74 <MiMAC_SendPacket+0x6d0>)
   10a20:	7813      	ldrb	r3, [r2, #0]
   10a22:	2102      	movs	r1, #2
   10a24:	430b      	orrs	r3, r1
   10a26:	7013      	strb	r3, [r2, #0]
   10a28:	e008      	b.n	10a3c <MiMAC_SendPacket+0x698>
#endif
    }
    else {
        i = 0x01;
   10a2a:	2395      	movs	r3, #149	; 0x95
   10a2c:	18fb      	adds	r3, r7, r3
   10a2e:	2201      	movs	r2, #1
   10a30:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
        trx_status.bits.TX_PENDING_ACK = 0;
   10a32:	4a10      	ldr	r2, [pc, #64]	; (10a74 <MiMAC_SendPacket+0x6d0>)
   10a34:	7813      	ldrb	r3, [r2, #0]
   10a36:	2102      	movs	r1, #2
   10a38:	438b      	bics	r3, r1
   10a3a:	7013      	strb	r3, [r2, #0]
#endif
    }
    // Now Trigger the Transmission of packet
    PHY_DataReq(packet);
   10a3c:	2310      	movs	r3, #16
   10a3e:	18fb      	adds	r3, r7, r3
   10a40:	0018      	movs	r0, r3
   10a42:	4b0d      	ldr	r3, [pc, #52]	; (10a78 <MiMAC_SendPacket+0x6d4>)
   10a44:	4798      	blx	r3

    return !trx_status.bits.TX_FAIL;
   10a46:	4b0b      	ldr	r3, [pc, #44]	; (10a74 <MiMAC_SendPacket+0x6d0>)
   10a48:	781b      	ldrb	r3, [r3, #0]
   10a4a:	075b      	lsls	r3, r3, #29
   10a4c:	0fdb      	lsrs	r3, r3, #31
   10a4e:	b2db      	uxtb	r3, r3
   10a50:	2201      	movs	r2, #1
   10a52:	4053      	eors	r3, r2
   10a54:	b2db      	uxtb	r3, r3
}
   10a56:	0018      	movs	r0, r3
   10a58:	46bd      	mov	sp, r7
   10a5a:	b027      	add	sp, #156	; 0x9c
   10a5c:	bd90      	pop	{r4, r7, pc}
   10a5e:	46c0      	nop			; (mov r8, r8)
   10a60:	200022fc 	.word	0x200022fc
   10a64:	20001c88 	.word	0x20001c88
   10a68:	20001c90 	.word	0x20001c90
   10a6c:	200022e4 	.word	0x200022e4
   10a70:	20001cbc 	.word	0x20001cbc
   10a74:	20002300 	.word	0x20002300
   10a78:	0000f7a9 	.word	0x0000f7a9

00010a7c <phyWriteRegister>:
}

/*************************************************************************/ /**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
   10a7c:	b580      	push	{r7, lr}
   10a7e:	b082      	sub	sp, #8
   10a80:	af00      	add	r7, sp, #0
   10a82:	0002      	movs	r2, r0
   10a84:	1dfb      	adds	r3, r7, #7
   10a86:	701a      	strb	r2, [r3, #0]
   10a88:	1dbb      	adds	r3, r7, #6
   10a8a:	1c0a      	adds	r2, r1, #0
   10a8c:	701a      	strb	r2, [r3, #0]
    trx_reg_write(reg, value);
   10a8e:	1dbb      	adds	r3, r7, #6
   10a90:	781a      	ldrb	r2, [r3, #0]
   10a92:	1dfb      	adds	r3, r7, #7
   10a94:	781b      	ldrb	r3, [r3, #0]
   10a96:	0011      	movs	r1, r2
   10a98:	0018      	movs	r0, r3
   10a9a:	4b03      	ldr	r3, [pc, #12]	; (10aa8 <phyWriteRegister+0x2c>)
   10a9c:	4798      	blx	r3
}
   10a9e:	46c0      	nop			; (mov r8, r8)
   10aa0:	46bd      	mov	sp, r7
   10aa2:	b002      	add	sp, #8
   10aa4:	bd80      	pop	{r7, pc}
   10aa6:	46c0      	nop			; (mov r8, r8)
   10aa8:	0000aced 	.word	0x0000aced

00010aac <phyReadRegister>:

/*************************************************************************/ /**
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
   10aac:	b590      	push	{r4, r7, lr}
   10aae:	b085      	sub	sp, #20
   10ab0:	af00      	add	r7, sp, #0
   10ab2:	0002      	movs	r2, r0
   10ab4:	1dfb      	adds	r3, r7, #7
   10ab6:	701a      	strb	r2, [r3, #0]
    uint8_t value;

    value = trx_reg_read(reg);
   10ab8:	230f      	movs	r3, #15
   10aba:	18fc      	adds	r4, r7, r3
   10abc:	1dfb      	adds	r3, r7, #7
   10abe:	781b      	ldrb	r3, [r3, #0]
   10ac0:	0018      	movs	r0, r3
   10ac2:	4b05      	ldr	r3, [pc, #20]	; (10ad8 <phyReadRegister+0x2c>)
   10ac4:	4798      	blx	r3
   10ac6:	0003      	movs	r3, r0
   10ac8:	7023      	strb	r3, [r4, #0]

    return value;
   10aca:	230f      	movs	r3, #15
   10acc:	18fb      	adds	r3, r7, r3
   10ace:	781b      	ldrb	r3, [r3, #0]
}
   10ad0:	0018      	movs	r0, r3
   10ad2:	46bd      	mov	sp, r7
   10ad4:	b005      	add	sp, #20
   10ad6:	bd90      	pop	{r4, r7, pc}
   10ad8:	0000ab99 	.word	0x0000ab99

00010adc <phyWaitState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
   10adc:	b590      	push	{r4, r7, lr}
   10ade:	b083      	sub	sp, #12
   10ae0:	af00      	add	r7, sp, #0
   10ae2:	0002      	movs	r2, r0
   10ae4:	1dfb      	adds	r3, r7, #7
   10ae6:	701a      	strb	r2, [r3, #0]
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
   10ae8:	46c0      	nop			; (mov r8, r8)
   10aea:	1dfb      	adds	r3, r7, #7
   10aec:	781c      	ldrb	r4, [r3, #0]
   10aee:	2001      	movs	r0, #1
   10af0:	4b05      	ldr	r3, [pc, #20]	; (10b08 <phyWaitState+0x2c>)
   10af2:	4798      	blx	r3
   10af4:	0003      	movs	r3, r0
   10af6:	001a      	movs	r2, r3
   10af8:	231f      	movs	r3, #31
   10afa:	4013      	ands	r3, r2
   10afc:	429c      	cmp	r4, r3
   10afe:	d1f4      	bne.n	10aea <phyWaitState+0xe>
    }
}
   10b00:	46c0      	nop			; (mov r8, r8)
   10b02:	46bd      	mov	sp, r7
   10b04:	b003      	add	sp, #12
   10b06:	bd90      	pop	{r4, r7, pc}
   10b08:	00010aad 	.word	0x00010aad

00010b0c <phySetRxState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phySetRxState(void)
{
   10b0c:	b580      	push	{r7, lr}
   10b0e:	af00      	add	r7, sp, #0
    phyTrxSetState(TRX_CMD_TRX_OFF);
   10b10:	2008      	movs	r0, #8
   10b12:	4b07      	ldr	r3, [pc, #28]	; (10b30 <phySetRxState+0x24>)
   10b14:	4798      	blx	r3

    phyReadRegister(RG_IRQ_STATUS);
   10b16:	200f      	movs	r0, #15
   10b18:	4b06      	ldr	r3, [pc, #24]	; (10b34 <phySetRxState+0x28>)
   10b1a:	4798      	blx	r3

    if (phyRxState) {
   10b1c:	4b06      	ldr	r3, [pc, #24]	; (10b38 <phySetRxState+0x2c>)
   10b1e:	781b      	ldrb	r3, [r3, #0]
   10b20:	2b00      	cmp	r3, #0
   10b22:	d002      	beq.n	10b2a <phySetRxState+0x1e>
        phyTrxSetState(TRX_CMD_RX_AACK_ON);
   10b24:	2016      	movs	r0, #22
   10b26:	4b02      	ldr	r3, [pc, #8]	; (10b30 <phySetRxState+0x24>)
   10b28:	4798      	blx	r3
    }
}
   10b2a:	46c0      	nop			; (mov r8, r8)
   10b2c:	46bd      	mov	sp, r7
   10b2e:	bd80      	pop	{r7, pc}
   10b30:	00010b3d 	.word	0x00010b3d
   10b34:	00010aad 	.word	0x00010aad
   10b38:	20001690 	.word	0x20001690

00010b3c <phyTrxSetState>:

/*************************************************************************/ /**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
   10b3c:	b590      	push	{r4, r7, lr}
   10b3e:	b083      	sub	sp, #12
   10b40:	af00      	add	r7, sp, #0
   10b42:	0002      	movs	r2, r0
   10b44:	1dfb      	adds	r3, r7, #7
   10b46:	701a      	strb	r2, [r3, #0]
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
   10b48:	2103      	movs	r1, #3
   10b4a:	2002      	movs	r0, #2
   10b4c:	4b0f      	ldr	r3, [pc, #60]	; (10b8c <phyTrxSetState+0x50>)
   10b4e:	4798      	blx	r3
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
   10b50:	2001      	movs	r0, #1
   10b52:	4b0f      	ldr	r3, [pc, #60]	; (10b90 <phyTrxSetState+0x54>)
   10b54:	4798      	blx	r3
   10b56:	0003      	movs	r3, r0
   10b58:	001a      	movs	r2, r3
   10b5a:	231f      	movs	r3, #31
   10b5c:	4013      	ands	r3, r2
   10b5e:	2b08      	cmp	r3, #8
   10b60:	d1f2      	bne.n	10b48 <phyTrxSetState+0xc>

    do {
        phyWriteRegister(RG_TRX_STATE,
   10b62:	1dfb      	adds	r3, r7, #7
   10b64:	781b      	ldrb	r3, [r3, #0]
   10b66:	0019      	movs	r1, r3
   10b68:	2002      	movs	r0, #2
   10b6a:	4b08      	ldr	r3, [pc, #32]	; (10b8c <phyTrxSetState+0x50>)
   10b6c:	4798      	blx	r3
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
   10b6e:	1dfb      	adds	r3, r7, #7
   10b70:	781c      	ldrb	r4, [r3, #0]
   10b72:	2001      	movs	r0, #1
   10b74:	4b06      	ldr	r3, [pc, #24]	; (10b90 <phyTrxSetState+0x54>)
   10b76:	4798      	blx	r3
   10b78:	0003      	movs	r3, r0
   10b7a:	001a      	movs	r2, r3
   10b7c:	231f      	movs	r3, #31
   10b7e:	4013      	ands	r3, r2
   10b80:	429c      	cmp	r4, r3
   10b82:	d1ee      	bne.n	10b62 <phyTrxSetState+0x26>
}
   10b84:	46c0      	nop			; (mov r8, r8)
   10b86:	46bd      	mov	sp, r7
   10b88:	b003      	add	sp, #12
   10b8a:	bd90      	pop	{r4, r7, pc}
   10b8c:	00010a7d 	.word	0x00010a7d
   10b90:	00010aad 	.word	0x00010aad

00010b94 <PHY_SetIEEEAddr>:

/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
   10b94:	b580      	push	{r7, lr}
   10b96:	b084      	sub	sp, #16
   10b98:	af00      	add	r7, sp, #0
   10b9a:	6078      	str	r0, [r7, #4]
    uint8_t* ptr_to_reg = ieee_addr;
   10b9c:	687b      	ldr	r3, [r7, #4]
   10b9e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 8; i++) {
   10ba0:	230b      	movs	r3, #11
   10ba2:	18fb      	adds	r3, r7, r3
   10ba4:	2200      	movs	r2, #0
   10ba6:	701a      	strb	r2, [r3, #0]
   10ba8:	e014      	b.n	10bd4 <PHY_SetIEEEAddr+0x40>
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
   10baa:	230b      	movs	r3, #11
   10bac:	18fb      	adds	r3, r7, r3
   10bae:	781b      	ldrb	r3, [r3, #0]
   10bb0:	3324      	adds	r3, #36	; 0x24
   10bb2:	b2da      	uxtb	r2, r3
   10bb4:	68fb      	ldr	r3, [r7, #12]
   10bb6:	781b      	ldrb	r3, [r3, #0]
   10bb8:	0019      	movs	r1, r3
   10bba:	0010      	movs	r0, r2
   10bbc:	4b0a      	ldr	r3, [pc, #40]	; (10be8 <PHY_SetIEEEAddr+0x54>)
   10bbe:	4798      	blx	r3
        ptr_to_reg++;
   10bc0:	68fb      	ldr	r3, [r7, #12]
   10bc2:	3301      	adds	r3, #1
   10bc4:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 8; i++) {
   10bc6:	230b      	movs	r3, #11
   10bc8:	18fb      	adds	r3, r7, r3
   10bca:	781a      	ldrb	r2, [r3, #0]
   10bcc:	230b      	movs	r3, #11
   10bce:	18fb      	adds	r3, r7, r3
   10bd0:	3201      	adds	r2, #1
   10bd2:	701a      	strb	r2, [r3, #0]
   10bd4:	230b      	movs	r3, #11
   10bd6:	18fb      	adds	r3, r7, r3
   10bd8:	781b      	ldrb	r3, [r3, #0]
   10bda:	2b07      	cmp	r3, #7
   10bdc:	d9e5      	bls.n	10baa <PHY_SetIEEEAddr+0x16>
    }
}
   10bde:	46c0      	nop			; (mov r8, r8)
   10be0:	46bd      	mov	sp, r7
   10be2:	b004      	add	sp, #16
   10be4:	bd80      	pop	{r7, pc}
   10be6:	46c0      	nop			; (mov r8, r8)
   10be8:	0000aced 	.word	0x0000aced

00010bec <MiMAC_DiscardPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
   10bec:	b580      	push	{r7, lr}
   10bee:	af00      	add	r7, sp, #0
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
   10bf0:	4b07      	ldr	r3, [pc, #28]	; (10c10 <MiMAC_DiscardPacket+0x24>)
   10bf2:	781b      	ldrb	r3, [r3, #0]
   10bf4:	2b13      	cmp	r3, #19
   10bf6:	d807      	bhi.n	10c08 <MiMAC_DiscardPacket+0x1c>
        RxBuffer[BankIndex].PayloadLen = 0;
   10bf8:	4b05      	ldr	r3, [pc, #20]	; (10c10 <MiMAC_DiscardPacket+0x24>)
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	0019      	movs	r1, r3
   10bfe:	4b05      	ldr	r3, [pc, #20]	; (10c14 <MiMAC_DiscardPacket+0x28>)
   10c00:	224e      	movs	r2, #78	; 0x4e
   10c02:	434a      	muls	r2, r1
   10c04:	2100      	movs	r1, #0
   10c06:	54d1      	strb	r1, [r2, r3]
    }
}
   10c08:	46c0      	nop			; (mov r8, r8)
   10c0a:	46bd      	mov	sp, r7
   10c0c:	bd80      	pop	{r7, pc}
   10c0e:	46c0      	nop			; (mov r8, r8)
   10c10:	200005ac 	.word	0x200005ac
   10c14:	20001ccc 	.word	0x20001ccc

00010c18 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
   10c18:	b590      	push	{r4, r7, lr}
   10c1a:	b085      	sub	sp, #20
   10c1c:	af02      	add	r7, sp, #8
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
   10c1e:	4bc8      	ldr	r3, [pc, #800]	; (10f40 <MiMAC_ReceivedPacket+0x328>)
   10c20:	781b      	ldrb	r3, [r3, #0]
   10c22:	07db      	lsls	r3, r3, #31
   10c24:	0fdb      	lsrs	r3, r3, #31
   10c26:	b2db      	uxtb	r3, r3
   10c28:	2b00      	cmp	r3, #0
   10c2a:	d014      	beq.n	10c56 <MiMAC_ReceivedPacket+0x3e>
        if (failureCounter >= FAILURE_COUNTER) {
   10c2c:	4bc5      	ldr	r3, [pc, #788]	; (10f44 <MiMAC_ReceivedPacket+0x32c>)
   10c2e:	881b      	ldrh	r3, [r3, #0]
   10c30:	b29b      	uxth	r3, r3
   10c32:	2b05      	cmp	r3, #5
   10c34:	d908      	bls.n	10c48 <MiMAC_ReceivedPacket+0x30>
            failureCounter = 0;
   10c36:	4bc3      	ldr	r3, [pc, #780]	; (10f44 <MiMAC_ReceivedPacket+0x32c>)
   10c38:	2200      	movs	r2, #0
   10c3a:	801a      	strh	r2, [r3, #0]
            trx_status.bits.TX_BUSY = 0;
   10c3c:	4ac0      	ldr	r2, [pc, #768]	; (10f40 <MiMAC_ReceivedPacket+0x328>)
   10c3e:	7813      	ldrb	r3, [r2, #0]
   10c40:	2101      	movs	r1, #1
   10c42:	438b      	bics	r3, r1
   10c44:	7013      	strb	r3, [r2, #0]
   10c46:	e006      	b.n	10c56 <MiMAC_ReceivedPacket+0x3e>
        }
        else {
            failureCounter++;
   10c48:	4bbe      	ldr	r3, [pc, #760]	; (10f44 <MiMAC_ReceivedPacket+0x32c>)
   10c4a:	881b      	ldrh	r3, [r3, #0]
   10c4c:	b29b      	uxth	r3, r3
   10c4e:	3301      	adds	r3, #1
   10c50:	b29a      	uxth	r2, r3
   10c52:	4bbc      	ldr	r3, [pc, #752]	; (10f44 <MiMAC_ReceivedPacket+0x32c>)
   10c54:	801a      	strh	r2, [r3, #0]
        }
    }

    BankIndex = 0xFF;
   10c56:	4bbc      	ldr	r3, [pc, #752]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10c58:	22ff      	movs	r2, #255	; 0xff
   10c5a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < BANK_SIZE; i++) {
   10c5c:	1dfb      	adds	r3, r7, #7
   10c5e:	2200      	movs	r2, #0
   10c60:	701a      	strb	r2, [r3, #0]
   10c62:	e011      	b.n	10c88 <MiMAC_ReceivedPacket+0x70>
        if (RxBuffer[i].PayloadLen > 0) {
   10c64:	1dfb      	adds	r3, r7, #7
   10c66:	781a      	ldrb	r2, [r3, #0]
   10c68:	4bb8      	ldr	r3, [pc, #736]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10c6a:	214e      	movs	r1, #78	; 0x4e
   10c6c:	434a      	muls	r2, r1
   10c6e:	5cd3      	ldrb	r3, [r2, r3]
   10c70:	2b00      	cmp	r3, #0
   10c72:	d004      	beq.n	10c7e <MiMAC_ReceivedPacket+0x66>
            BankIndex = i;
   10c74:	4bb4      	ldr	r3, [pc, #720]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10c76:	1dfa      	adds	r2, r7, #7
   10c78:	7812      	ldrb	r2, [r2, #0]
   10c7a:	701a      	strb	r2, [r3, #0]
            break;
   10c7c:	e008      	b.n	10c90 <MiMAC_ReceivedPacket+0x78>
    for (i = 0; i < BANK_SIZE; i++) {
   10c7e:	1dfb      	adds	r3, r7, #7
   10c80:	781a      	ldrb	r2, [r3, #0]
   10c82:	1dfb      	adds	r3, r7, #7
   10c84:	3201      	adds	r2, #1
   10c86:	701a      	strb	r2, [r3, #0]
   10c88:	1dfb      	adds	r3, r7, #7
   10c8a:	781b      	ldrb	r3, [r3, #0]
   10c8c:	2b13      	cmp	r3, #19
   10c8e:	d9e9      	bls.n	10c64 <MiMAC_ReceivedPacket+0x4c>
        }
    }

    if (BankIndex < BANK_SIZE) {
   10c90:	4bad      	ldr	r3, [pc, #692]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10c92:	781b      	ldrb	r3, [r3, #0]
   10c94:	2b13      	cmp	r3, #19
   10c96:	d901      	bls.n	10c9c <MiMAC_ReceivedPacket+0x84>
   10c98:	f000 fbf9 	bl	1148e <MiMAC_ReceivedPacket+0x876>
        uint8_t addrMode;
#ifndef TARGET_SMALL
        bool bIntraPAN = true;
   10c9c:	1dbb      	adds	r3, r7, #6
   10c9e:	2201      	movs	r2, #1
   10ca0:	701a      	strb	r2, [r3, #0]

        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
   10ca2:	4ba9      	ldr	r3, [pc, #676]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10ca4:	781b      	ldrb	r3, [r3, #0]
   10ca6:	0019      	movs	r1, r3
   10ca8:	4aa8      	ldr	r2, [pc, #672]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10caa:	234e      	movs	r3, #78	; 0x4e
   10cac:	434b      	muls	r3, r1
   10cae:	18d3      	adds	r3, r2, r3
   10cb0:	3301      	adds	r3, #1
   10cb2:	781b      	ldrb	r3, [r3, #0]
   10cb4:	001a      	movs	r2, r3
   10cb6:	2340      	movs	r3, #64	; 0x40
   10cb8:	4013      	ands	r3, r2
   10cba:	d102      	bne.n	10cc2 <MiMAC_ReceivedPacket+0xaa>
            bIntraPAN = false;
   10cbc:	1dbb      	adds	r3, r7, #6
   10cbe:	2200      	movs	r2, #0
   10cc0:	701a      	strb	r2, [r3, #0]
        }
#endif
        MACRxPacket.flags.Val = 0;
   10cc2:	4ba3      	ldr	r3, [pc, #652]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10cc4:	2200      	movs	r2, #0
   10cc6:	701a      	strb	r2, [r3, #0]
        MACRxPacket.altSourceAddress = false;
   10cc8:	4ba1      	ldr	r3, [pc, #644]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10cca:	2200      	movs	r2, #0
   10ccc:	73da      	strb	r2, [r3, #15]

        //Determine the start of the MAC payload
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
   10cce:	4b9e      	ldr	r3, [pc, #632]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10cd0:	781b      	ldrb	r3, [r3, #0]
   10cd2:	0019      	movs	r1, r3
   10cd4:	4a9d      	ldr	r2, [pc, #628]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10cd6:	234e      	movs	r3, #78	; 0x4e
   10cd8:	434b      	muls	r3, r1
   10cda:	18d3      	adds	r3, r2, r3
   10cdc:	3302      	adds	r3, #2
   10cde:	781a      	ldrb	r2, [r3, #0]
   10ce0:	1d7b      	adds	r3, r7, #5
   10ce2:	2133      	movs	r1, #51	; 0x33
   10ce4:	438a      	bics	r2, r1
   10ce6:	701a      	strb	r2, [r3, #0]
        switch (addrMode) {
   10ce8:	1d7b      	adds	r3, r7, #5
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	2b88      	cmp	r3, #136	; 0x88
   10cee:	d100      	bne.n	10cf2 <MiMAC_ReceivedPacket+0xda>
   10cf0:	e176      	b.n	10fe0 <MiMAC_ReceivedPacket+0x3c8>
   10cf2:	dc06      	bgt.n	10d02 <MiMAC_ReceivedPacket+0xea>
   10cf4:	2b08      	cmp	r3, #8
   10cf6:	d100      	bne.n	10cfa <MiMAC_ReceivedPacket+0xe2>
   10cf8:	e291      	b.n	1121e <MiMAC_ReceivedPacket+0x606>
   10cfa:	2b80      	cmp	r3, #128	; 0x80
   10cfc:	d100      	bne.n	10d00 <MiMAC_ReceivedPacket+0xe8>
   10cfe:	e129      	b.n	10f54 <MiMAC_ReceivedPacket+0x33c>
   10d00:	e2bf      	b.n	11282 <MiMAC_ReceivedPacket+0x66a>
   10d02:	2bc8      	cmp	r3, #200	; 0xc8
   10d04:	d006      	beq.n	10d14 <MiMAC_ReceivedPacket+0xfc>
   10d06:	2bcc      	cmp	r3, #204	; 0xcc
   10d08:	d100      	bne.n	10d0c <MiMAC_ReceivedPacket+0xf4>
   10d0a:	e09b      	b.n	10e44 <MiMAC_ReceivedPacket+0x22c>
   10d0c:	2b8c      	cmp	r3, #140	; 0x8c
   10d0e:	d100      	bne.n	10d12 <MiMAC_ReceivedPacket+0xfa>
   10d10:	e204      	b.n	1111c <MiMAC_ReceivedPacket+0x504>
   10d12:	e2b6      	b.n	11282 <MiMAC_ReceivedPacket+0x66a>
        case 0xC8: //short dest, long source
            // for P2P only broadcast allows short destination address
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
   10d14:	4b8c      	ldr	r3, [pc, #560]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10d16:	781b      	ldrb	r3, [r3, #0]
   10d18:	0019      	movs	r1, r3
   10d1a:	4a8c      	ldr	r2, [pc, #560]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10d1c:	234e      	movs	r3, #78	; 0x4e
   10d1e:	434b      	muls	r3, r1
   10d20:	18d3      	adds	r3, r2, r3
   10d22:	3306      	adds	r3, #6
   10d24:	781b      	ldrb	r3, [r3, #0]
   10d26:	2bff      	cmp	r3, #255	; 0xff
   10d28:	d10f      	bne.n	10d4a <MiMAC_ReceivedPacket+0x132>
   10d2a:	4b87      	ldr	r3, [pc, #540]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	0019      	movs	r1, r3
   10d30:	4a86      	ldr	r2, [pc, #536]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10d32:	234e      	movs	r3, #78	; 0x4e
   10d34:	434b      	muls	r3, r1
   10d36:	18d3      	adds	r3, r2, r3
   10d38:	3307      	adds	r3, #7
   10d3a:	781b      	ldrb	r3, [r3, #0]
   10d3c:	2bff      	cmp	r3, #255	; 0xff
   10d3e:	d104      	bne.n	10d4a <MiMAC_ReceivedPacket+0x132>
                MACRxPacket.flags.bits.broadcast = 1;
   10d40:	4b83      	ldr	r3, [pc, #524]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10d42:	781a      	ldrb	r2, [r3, #0]
   10d44:	2104      	movs	r1, #4
   10d46:	430a      	orrs	r2, r1
   10d48:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
   10d4a:	4b81      	ldr	r3, [pc, #516]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10d4c:	781a      	ldrb	r2, [r3, #0]
   10d4e:	2180      	movs	r1, #128	; 0x80
   10d50:	4249      	negs	r1, r1
   10d52:	430a      	orrs	r2, r1
   10d54:	701a      	strb	r2, [r3, #0]

#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
   10d56:	1dbb      	adds	r3, r7, #6
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d038      	beq.n	10dd0 <MiMAC_ReceivedPacket+0x1b8>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
   10d5e:	4b7a      	ldr	r3, [pc, #488]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10d60:	781b      	ldrb	r3, [r3, #0]
   10d62:	0019      	movs	r1, r3
   10d64:	4a79      	ldr	r2, [pc, #484]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10d66:	234e      	movs	r3, #78	; 0x4e
   10d68:	434b      	muls	r3, r1
   10d6a:	18d3      	adds	r3, r2, r3
   10d6c:	3304      	adds	r3, #4
   10d6e:	781a      	ldrb	r2, [r3, #0]
   10d70:	4b77      	ldr	r3, [pc, #476]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10d72:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
   10d74:	4b74      	ldr	r3, [pc, #464]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10d76:	781b      	ldrb	r3, [r3, #0]
   10d78:	0019      	movs	r1, r3
   10d7a:	4a74      	ldr	r2, [pc, #464]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10d7c:	234e      	movs	r3, #78	; 0x4e
   10d7e:	434b      	muls	r3, r1
   10d80:	18d3      	adds	r3, r2, r3
   10d82:	3305      	adds	r3, #5
   10d84:	781a      	ldrb	r2, [r3, #0]
   10d86:	4b72      	ldr	r3, [pc, #456]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10d88:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
   10d8a:	4b6f      	ldr	r3, [pc, #444]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10d8c:	781b      	ldrb	r3, [r3, #0]
   10d8e:	001a      	movs	r2, r3
   10d90:	234e      	movs	r3, #78	; 0x4e
   10d92:	4353      	muls	r3, r2
   10d94:	1dda      	adds	r2, r3, #7
   10d96:	4b6d      	ldr	r3, [pc, #436]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10d98:	18d3      	adds	r3, r2, r3
   10d9a:	1c5a      	adds	r2, r3, #1
   10d9c:	4b6c      	ldr	r3, [pc, #432]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10d9e:	605a      	str	r2, [r3, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
   10da0:	4b69      	ldr	r3, [pc, #420]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10da2:	781b      	ldrb	r3, [r3, #0]
   10da4:	0019      	movs	r1, r3
   10da6:	4b69      	ldr	r3, [pc, #420]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10da8:	224e      	movs	r2, #78	; 0x4e
   10daa:	434a      	muls	r2, r1
   10dac:	5cd3      	ldrb	r3, [r2, r3]
   10dae:	3b13      	subs	r3, #19
   10db0:	b2da      	uxtb	r2, r3
   10db2:	4b67      	ldr	r3, [pc, #412]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10db4:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
   10db6:	4b64      	ldr	r3, [pc, #400]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10db8:	781b      	ldrb	r3, [r3, #0]
   10dba:	001a      	movs	r2, r3
   10dbc:	234e      	movs	r3, #78	; 0x4e
   10dbe:	4353      	muls	r3, r2
   10dc0:	330f      	adds	r3, #15
   10dc2:	001a      	movs	r2, r3
   10dc4:	4b61      	ldr	r3, [pc, #388]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10dc6:	18d3      	adds	r3, r2, r3
   10dc8:	1c5a      	adds	r2, r3, #1
   10dca:	4b61      	ldr	r3, [pc, #388]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10dcc:	609a      	str	r2, [r3, #8]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
            }
#endif

            break;
   10dce:	e25c      	b.n	1128a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
   10dd0:	4b5d      	ldr	r3, [pc, #372]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10dd2:	781b      	ldrb	r3, [r3, #0]
   10dd4:	0019      	movs	r1, r3
   10dd6:	4a5d      	ldr	r2, [pc, #372]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10dd8:	234e      	movs	r3, #78	; 0x4e
   10dda:	434b      	muls	r3, r1
   10ddc:	18d3      	adds	r3, r2, r3
   10dde:	3308      	adds	r3, #8
   10de0:	781a      	ldrb	r2, [r3, #0]
   10de2:	4b5b      	ldr	r3, [pc, #364]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10de4:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
   10de6:	4b58      	ldr	r3, [pc, #352]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	0019      	movs	r1, r3
   10dec:	4a57      	ldr	r2, [pc, #348]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10dee:	234e      	movs	r3, #78	; 0x4e
   10df0:	434b      	muls	r3, r1
   10df2:	18d3      	adds	r3, r2, r3
   10df4:	3309      	adds	r3, #9
   10df6:	781a      	ldrb	r2, [r3, #0]
   10df8:	4b55      	ldr	r3, [pc, #340]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10dfa:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
   10dfc:	4b52      	ldr	r3, [pc, #328]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10dfe:	781b      	ldrb	r3, [r3, #0]
   10e00:	001a      	movs	r2, r3
   10e02:	234e      	movs	r3, #78	; 0x4e
   10e04:	4353      	muls	r3, r2
   10e06:	3309      	adds	r3, #9
   10e08:	001a      	movs	r2, r3
   10e0a:	4b50      	ldr	r3, [pc, #320]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e0c:	18d3      	adds	r3, r2, r3
   10e0e:	1c5a      	adds	r2, r3, #1
   10e10:	4b4f      	ldr	r3, [pc, #316]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e12:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
   10e14:	4b4c      	ldr	r3, [pc, #304]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	0019      	movs	r1, r3
   10e1a:	4b4c      	ldr	r3, [pc, #304]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e1c:	224e      	movs	r2, #78	; 0x4e
   10e1e:	434a      	muls	r2, r1
   10e20:	5cd3      	ldrb	r3, [r2, r3]
   10e22:	3b15      	subs	r3, #21
   10e24:	b2da      	uxtb	r2, r3
   10e26:	4b4a      	ldr	r3, [pc, #296]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e28:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
   10e2a:	4b47      	ldr	r3, [pc, #284]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e2c:	781b      	ldrb	r3, [r3, #0]
   10e2e:	001a      	movs	r2, r3
   10e30:	234e      	movs	r3, #78	; 0x4e
   10e32:	4353      	muls	r3, r2
   10e34:	3311      	adds	r3, #17
   10e36:	001a      	movs	r2, r3
   10e38:	4b44      	ldr	r3, [pc, #272]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e3a:	18d3      	adds	r3, r2, r3
   10e3c:	1c5a      	adds	r2, r3, #1
   10e3e:	4b44      	ldr	r3, [pc, #272]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e40:	609a      	str	r2, [r3, #8]
            break;
   10e42:	e222      	b.n	1128a <MiMAC_ReceivedPacket+0x672>

        case 0xCC: // long dest, long source
            MACRxPacket.flags.bits.sourcePrsnt = 1;
   10e44:	4b42      	ldr	r3, [pc, #264]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e46:	781a      	ldrb	r2, [r3, #0]
   10e48:	2180      	movs	r1, #128	; 0x80
   10e4a:	4249      	negs	r1, r1
   10e4c:	430a      	orrs	r2, r1
   10e4e:	701a      	strb	r2, [r3, #0]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
   10e50:	1dbb      	adds	r3, r7, #6
   10e52:	781b      	ldrb	r3, [r3, #0]
   10e54:	2b00      	cmp	r3, #0
   10e56:	d039      	beq.n	10ecc <MiMAC_ReceivedPacket+0x2b4>
#endif
            {
//rxFrame.flags.bits.intraPAN = 1;
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
   10e58:	4b3b      	ldr	r3, [pc, #236]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e5a:	781b      	ldrb	r3, [r3, #0]
   10e5c:	0019      	movs	r1, r3
   10e5e:	4a3b      	ldr	r2, [pc, #236]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e60:	234e      	movs	r3, #78	; 0x4e
   10e62:	434b      	muls	r3, r1
   10e64:	18d3      	adds	r3, r2, r3
   10e66:	3304      	adds	r3, #4
   10e68:	781a      	ldrb	r2, [r3, #0]
   10e6a:	4b39      	ldr	r3, [pc, #228]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e6c:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
   10e6e:	4b36      	ldr	r3, [pc, #216]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e70:	781b      	ldrb	r3, [r3, #0]
   10e72:	0019      	movs	r1, r3
   10e74:	4a35      	ldr	r2, [pc, #212]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e76:	234e      	movs	r3, #78	; 0x4e
   10e78:	434b      	muls	r3, r1
   10e7a:	18d3      	adds	r3, r2, r3
   10e7c:	3305      	adds	r3, #5
   10e7e:	781a      	ldrb	r2, [r3, #0]
   10e80:	4b33      	ldr	r3, [pc, #204]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e82:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
   10e84:	4b30      	ldr	r3, [pc, #192]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e86:	781b      	ldrb	r3, [r3, #0]
   10e88:	001a      	movs	r2, r3
   10e8a:	234e      	movs	r3, #78	; 0x4e
   10e8c:	4353      	muls	r3, r2
   10e8e:	330d      	adds	r3, #13
   10e90:	001a      	movs	r2, r3
   10e92:	4b2e      	ldr	r3, [pc, #184]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10e94:	18d3      	adds	r3, r2, r3
   10e96:	1c5a      	adds	r2, r3, #1
   10e98:	4b2d      	ldr	r3, [pc, #180]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10e9a:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
   10e9c:	4b2a      	ldr	r3, [pc, #168]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	0019      	movs	r1, r3
   10ea2:	4b2a      	ldr	r3, [pc, #168]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10ea4:	224e      	movs	r2, #78	; 0x4e
   10ea6:	434a      	muls	r2, r1
   10ea8:	5cd3      	ldrb	r3, [r2, r3]
   10eaa:	3b19      	subs	r3, #25
   10eac:	b2da      	uxtb	r2, r3
   10eae:	4b28      	ldr	r3, [pc, #160]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10eb0:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
   10eb2:	4b25      	ldr	r3, [pc, #148]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10eb4:	781b      	ldrb	r3, [r3, #0]
   10eb6:	001a      	movs	r2, r3
   10eb8:	234e      	movs	r3, #78	; 0x4e
   10eba:	4353      	muls	r3, r2
   10ebc:	3315      	adds	r3, #21
   10ebe:	001a      	movs	r2, r3
   10ec0:	4b22      	ldr	r3, [pc, #136]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10ec2:	18d3      	adds	r3, r2, r3
   10ec4:	1c5a      	adds	r2, r3, #1
   10ec6:	4b22      	ldr	r3, [pc, #136]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10ec8:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
            }
#endif
            break;
   10eca:	e1de      	b.n	1128a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
   10ecc:	4b1e      	ldr	r3, [pc, #120]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10ece:	781b      	ldrb	r3, [r3, #0]
   10ed0:	0019      	movs	r1, r3
   10ed2:	4a1e      	ldr	r2, [pc, #120]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10ed4:	234e      	movs	r3, #78	; 0x4e
   10ed6:	434b      	muls	r3, r1
   10ed8:	18d3      	adds	r3, r2, r3
   10eda:	330e      	adds	r3, #14
   10edc:	781a      	ldrb	r2, [r3, #0]
   10ede:	4b1c      	ldr	r3, [pc, #112]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10ee0:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
   10ee2:	4b19      	ldr	r3, [pc, #100]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10ee4:	781b      	ldrb	r3, [r3, #0]
   10ee6:	0019      	movs	r1, r3
   10ee8:	4a18      	ldr	r2, [pc, #96]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10eea:	234e      	movs	r3, #78	; 0x4e
   10eec:	434b      	muls	r3, r1
   10eee:	18d3      	adds	r3, r2, r3
   10ef0:	330f      	adds	r3, #15
   10ef2:	781a      	ldrb	r2, [r3, #0]
   10ef4:	4b16      	ldr	r3, [pc, #88]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10ef6:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
   10ef8:	4b13      	ldr	r3, [pc, #76]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	001a      	movs	r2, r3
   10efe:	234e      	movs	r3, #78	; 0x4e
   10f00:	4353      	muls	r3, r2
   10f02:	330f      	adds	r3, #15
   10f04:	001a      	movs	r2, r3
   10f06:	4b11      	ldr	r3, [pc, #68]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10f08:	18d3      	adds	r3, r2, r3
   10f0a:	1c5a      	adds	r2, r3, #1
   10f0c:	4b10      	ldr	r3, [pc, #64]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10f0e:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
   10f10:	4b0d      	ldr	r3, [pc, #52]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10f12:	781b      	ldrb	r3, [r3, #0]
   10f14:	0019      	movs	r1, r3
   10f16:	4b0d      	ldr	r3, [pc, #52]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10f18:	224e      	movs	r2, #78	; 0x4e
   10f1a:	434a      	muls	r2, r1
   10f1c:	5cd3      	ldrb	r3, [r2, r3]
   10f1e:	3b1b      	subs	r3, #27
   10f20:	b2da      	uxtb	r2, r3
   10f22:	4b0b      	ldr	r3, [pc, #44]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10f24:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
   10f26:	4b08      	ldr	r3, [pc, #32]	; (10f48 <MiMAC_ReceivedPacket+0x330>)
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	001a      	movs	r2, r3
   10f2c:	234e      	movs	r3, #78	; 0x4e
   10f2e:	4353      	muls	r3, r2
   10f30:	3317      	adds	r3, #23
   10f32:	001a      	movs	r2, r3
   10f34:	4b05      	ldr	r3, [pc, #20]	; (10f4c <MiMAC_ReceivedPacket+0x334>)
   10f36:	18d3      	adds	r3, r2, r3
   10f38:	1c5a      	adds	r2, r3, #1
   10f3a:	4b05      	ldr	r3, [pc, #20]	; (10f50 <MiMAC_ReceivedPacket+0x338>)
   10f3c:	609a      	str	r2, [r3, #8]
            break;
   10f3e:	e1a4      	b.n	1128a <MiMAC_ReceivedPacket+0x672>
   10f40:	20002300 	.word	0x20002300
   10f44:	2000160c 	.word	0x2000160c
   10f48:	200005ac 	.word	0x200005ac
   10f4c:	20001ccc 	.word	0x20001ccc
   10f50:	200023d0 	.word	0x200023d0

        case 0x80: // short source only. used in beacon
        {
            MACRxPacket.flags.bits.broadcast = 1;
   10f54:	4be4      	ldr	r3, [pc, #912]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10f56:	781a      	ldrb	r2, [r3, #0]
   10f58:	2104      	movs	r1, #4
   10f5a:	430a      	orrs	r2, r1
   10f5c:	701a      	strb	r2, [r3, #0]
            MACRxPacket.flags.bits.sourcePrsnt = 1;
   10f5e:	4be2      	ldr	r3, [pc, #904]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10f60:	781a      	ldrb	r2, [r3, #0]
   10f62:	2180      	movs	r1, #128	; 0x80
   10f64:	4249      	negs	r1, r1
   10f66:	430a      	orrs	r2, r1
   10f68:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
   10f6a:	4bdf      	ldr	r3, [pc, #892]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10f6c:	2201      	movs	r2, #1
   10f6e:	73da      	strb	r2, [r3, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
   10f70:	4bde      	ldr	r3, [pc, #888]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10f72:	781b      	ldrb	r3, [r3, #0]
   10f74:	0019      	movs	r1, r3
   10f76:	4ade      	ldr	r2, [pc, #888]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10f78:	234e      	movs	r3, #78	; 0x4e
   10f7a:	434b      	muls	r3, r1
   10f7c:	18d3      	adds	r3, r2, r3
   10f7e:	3304      	adds	r3, #4
   10f80:	781a      	ldrb	r2, [r3, #0]
   10f82:	4bd9      	ldr	r3, [pc, #868]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10f84:	741a      	strb	r2, [r3, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
   10f86:	4bd9      	ldr	r3, [pc, #868]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10f88:	781b      	ldrb	r3, [r3, #0]
   10f8a:	0019      	movs	r1, r3
   10f8c:	4ad8      	ldr	r2, [pc, #864]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10f8e:	234e      	movs	r3, #78	; 0x4e
   10f90:	434b      	muls	r3, r1
   10f92:	18d3      	adds	r3, r2, r3
   10f94:	3305      	adds	r3, #5
   10f96:	781a      	ldrb	r2, [r3, #0]
   10f98:	4bd3      	ldr	r3, [pc, #844]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10f9a:	745a      	strb	r2, [r3, #17]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
   10f9c:	4bd3      	ldr	r3, [pc, #844]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10f9e:	781b      	ldrb	r3, [r3, #0]
   10fa0:	001a      	movs	r2, r3
   10fa2:	234e      	movs	r3, #78	; 0x4e
   10fa4:	4353      	muls	r3, r2
   10fa6:	1d5a      	adds	r2, r3, #5
   10fa8:	4bd1      	ldr	r3, [pc, #836]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10faa:	18d3      	adds	r3, r2, r3
   10fac:	1c5a      	adds	r2, r3, #1
   10fae:	4bce      	ldr	r3, [pc, #824]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10fb0:	605a      	str	r2, [r3, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
   10fb2:	4bce      	ldr	r3, [pc, #824]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10fb4:	781b      	ldrb	r3, [r3, #0]
   10fb6:	0019      	movs	r1, r3
   10fb8:	4bcd      	ldr	r3, [pc, #820]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10fba:	224e      	movs	r2, #78	; 0x4e
   10fbc:	434a      	muls	r2, r1
   10fbe:	5cd3      	ldrb	r3, [r2, r3]
   10fc0:	3b0b      	subs	r3, #11
   10fc2:	b2da      	uxtb	r2, r3
   10fc4:	4bc8      	ldr	r3, [pc, #800]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10fc6:	731a      	strb	r2, [r3, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
   10fc8:	4bc8      	ldr	r3, [pc, #800]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10fca:	781b      	ldrb	r3, [r3, #0]
   10fcc:	001a      	movs	r2, r3
   10fce:	234e      	movs	r3, #78	; 0x4e
   10fd0:	4353      	muls	r3, r2
   10fd2:	1dda      	adds	r2, r3, #7
   10fd4:	4bc6      	ldr	r3, [pc, #792]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10fd6:	18d3      	adds	r3, r2, r3
   10fd8:	1c5a      	adds	r2, r3, #1
   10fda:	4bc3      	ldr	r3, [pc, #780]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   10fdc:	609a      	str	r2, [r3, #8]
        } break;
   10fde:	e154      	b.n	1128a <MiMAC_ReceivedPacket+0x672>

        case 0x88: // short dest, short source
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
   10fe0:	4bc2      	ldr	r3, [pc, #776]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10fe2:	781b      	ldrb	r3, [r3, #0]
   10fe4:	0019      	movs	r1, r3
   10fe6:	4ac2      	ldr	r2, [pc, #776]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10fe8:	234e      	movs	r3, #78	; 0x4e
   10fea:	434b      	muls	r3, r1
   10fec:	18d3      	adds	r3, r2, r3
   10fee:	3306      	adds	r3, #6
   10ff0:	781b      	ldrb	r3, [r3, #0]
   10ff2:	2bff      	cmp	r3, #255	; 0xff
   10ff4:	d10f      	bne.n	11016 <MiMAC_ReceivedPacket+0x3fe>
   10ff6:	4bbd      	ldr	r3, [pc, #756]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   10ff8:	781b      	ldrb	r3, [r3, #0]
   10ffa:	0019      	movs	r1, r3
   10ffc:	4abc      	ldr	r2, [pc, #752]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   10ffe:	234e      	movs	r3, #78	; 0x4e
   11000:	434b      	muls	r3, r1
   11002:	18d3      	adds	r3, r2, r3
   11004:	3307      	adds	r3, #7
   11006:	781b      	ldrb	r3, [r3, #0]
   11008:	2bff      	cmp	r3, #255	; 0xff
   1100a:	d104      	bne.n	11016 <MiMAC_ReceivedPacket+0x3fe>
                MACRxPacket.flags.bits.broadcast = 1;
   1100c:	4bb6      	ldr	r3, [pc, #728]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1100e:	781a      	ldrb	r2, [r3, #0]
   11010:	2104      	movs	r1, #4
   11012:	430a      	orrs	r2, r1
   11014:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.flags.bits.sourcePrsnt = 1;
   11016:	4bb4      	ldr	r3, [pc, #720]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11018:	781a      	ldrb	r2, [r3, #0]
   1101a:	2180      	movs	r1, #128	; 0x80
   1101c:	4249      	negs	r1, r1
   1101e:	430a      	orrs	r2, r1
   11020:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
   11022:	4bb1      	ldr	r3, [pc, #708]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11024:	2201      	movs	r2, #1
   11026:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN == false) {
   11028:	1dbb      	adds	r3, r7, #6
   1102a:	781b      	ldrb	r3, [r3, #0]
   1102c:	2201      	movs	r2, #1
   1102e:	4053      	eors	r3, r2
   11030:	b2db      	uxtb	r3, r3
   11032:	2b00      	cmp	r3, #0
   11034:	d039      	beq.n	110aa <MiMAC_ReceivedPacket+0x492>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
   11036:	4bad      	ldr	r3, [pc, #692]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11038:	781b      	ldrb	r3, [r3, #0]
   1103a:	0019      	movs	r1, r3
   1103c:	4aac      	ldr	r2, [pc, #688]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   1103e:	234e      	movs	r3, #78	; 0x4e
   11040:	434b      	muls	r3, r1
   11042:	18d3      	adds	r3, r2, r3
   11044:	3308      	adds	r3, #8
   11046:	781a      	ldrb	r2, [r3, #0]
   11048:	4ba7      	ldr	r3, [pc, #668]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1104a:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
   1104c:	4ba7      	ldr	r3, [pc, #668]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1104e:	781b      	ldrb	r3, [r3, #0]
   11050:	0019      	movs	r1, r3
   11052:	4aa7      	ldr	r2, [pc, #668]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11054:	234e      	movs	r3, #78	; 0x4e
   11056:	434b      	muls	r3, r1
   11058:	18d3      	adds	r3, r2, r3
   1105a:	3309      	adds	r3, #9
   1105c:	781a      	ldrb	r2, [r3, #0]
   1105e:	4ba2      	ldr	r3, [pc, #648]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11060:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
   11062:	4ba2      	ldr	r3, [pc, #648]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11064:	781b      	ldrb	r3, [r3, #0]
   11066:	001a      	movs	r2, r3
   11068:	234e      	movs	r3, #78	; 0x4e
   1106a:	4353      	muls	r3, r2
   1106c:	3309      	adds	r3, #9
   1106e:	001a      	movs	r2, r3
   11070:	4b9f      	ldr	r3, [pc, #636]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11072:	18d3      	adds	r3, r2, r3
   11074:	1c5a      	adds	r2, r3, #1
   11076:	4b9c      	ldr	r3, [pc, #624]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11078:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
   1107a:	4b9c      	ldr	r3, [pc, #624]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1107c:	781b      	ldrb	r3, [r3, #0]
   1107e:	0019      	movs	r1, r3
   11080:	4b9b      	ldr	r3, [pc, #620]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11082:	224e      	movs	r2, #78	; 0x4e
   11084:	434a      	muls	r2, r1
   11086:	5cd3      	ldrb	r3, [r2, r3]
   11088:	3b0f      	subs	r3, #15
   1108a:	b2da      	uxtb	r2, r3
   1108c:	4b96      	ldr	r3, [pc, #600]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1108e:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
   11090:	4b96      	ldr	r3, [pc, #600]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11092:	781b      	ldrb	r3, [r3, #0]
   11094:	001a      	movs	r2, r3
   11096:	234e      	movs	r3, #78	; 0x4e
   11098:	4353      	muls	r3, r2
   1109a:	330b      	adds	r3, #11
   1109c:	001a      	movs	r2, r3
   1109e:	4b94      	ldr	r3, [pc, #592]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   110a0:	18d3      	adds	r3, r2, r3
   110a2:	1c5a      	adds	r2, r3, #1
   110a4:	4b90      	ldr	r3, [pc, #576]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   110a6:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
            }
        } break;
   110a8:	e0ef      	b.n	1128a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
   110aa:	4b90      	ldr	r3, [pc, #576]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   110ac:	781b      	ldrb	r3, [r3, #0]
   110ae:	0019      	movs	r1, r3
   110b0:	4a8f      	ldr	r2, [pc, #572]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   110b2:	234e      	movs	r3, #78	; 0x4e
   110b4:	434b      	muls	r3, r1
   110b6:	18d3      	adds	r3, r2, r3
   110b8:	3304      	adds	r3, #4
   110ba:	781a      	ldrb	r2, [r3, #0]
   110bc:	4b8a      	ldr	r3, [pc, #552]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   110be:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
   110c0:	4b8a      	ldr	r3, [pc, #552]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   110c2:	781b      	ldrb	r3, [r3, #0]
   110c4:	0019      	movs	r1, r3
   110c6:	4a8a      	ldr	r2, [pc, #552]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   110c8:	234e      	movs	r3, #78	; 0x4e
   110ca:	434b      	muls	r3, r1
   110cc:	18d3      	adds	r3, r2, r3
   110ce:	3305      	adds	r3, #5
   110d0:	781a      	ldrb	r2, [r3, #0]
   110d2:	4b85      	ldr	r3, [pc, #532]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   110d4:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
   110d6:	4b85      	ldr	r3, [pc, #532]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   110d8:	781b      	ldrb	r3, [r3, #0]
   110da:	001a      	movs	r2, r3
   110dc:	234e      	movs	r3, #78	; 0x4e
   110de:	4353      	muls	r3, r2
   110e0:	1dda      	adds	r2, r3, #7
   110e2:	4b83      	ldr	r3, [pc, #524]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   110e4:	18d3      	adds	r3, r2, r3
   110e6:	1c5a      	adds	r2, r3, #1
   110e8:	4b7f      	ldr	r3, [pc, #508]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   110ea:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
   110ec:	4b7f      	ldr	r3, [pc, #508]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   110ee:	781b      	ldrb	r3, [r3, #0]
   110f0:	0019      	movs	r1, r3
   110f2:	4b7f      	ldr	r3, [pc, #508]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   110f4:	224e      	movs	r2, #78	; 0x4e
   110f6:	434a      	muls	r2, r1
   110f8:	5cd3      	ldrb	r3, [r2, r3]
   110fa:	3b0d      	subs	r3, #13
   110fc:	b2da      	uxtb	r2, r3
   110fe:	4b7a      	ldr	r3, [pc, #488]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11100:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
   11102:	4b7a      	ldr	r3, [pc, #488]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11104:	781b      	ldrb	r3, [r3, #0]
   11106:	001a      	movs	r2, r3
   11108:	234e      	movs	r3, #78	; 0x4e
   1110a:	4353      	muls	r3, r2
   1110c:	3309      	adds	r3, #9
   1110e:	001a      	movs	r2, r3
   11110:	4b77      	ldr	r3, [pc, #476]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11112:	18d3      	adds	r3, r2, r3
   11114:	1c5a      	adds	r2, r3, #1
   11116:	4b74      	ldr	r3, [pc, #464]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11118:	609a      	str	r2, [r3, #8]
        } break;
   1111a:	e0b6      	b.n	1128a <MiMAC_ReceivedPacket+0x672>

        case 0x8C: // long dest, short source
        {
            MACRxPacket.flags.bits.sourcePrsnt = 1;
   1111c:	4b72      	ldr	r3, [pc, #456]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1111e:	781a      	ldrb	r2, [r3, #0]
   11120:	2180      	movs	r1, #128	; 0x80
   11122:	4249      	negs	r1, r1
   11124:	430a      	orrs	r2, r1
   11126:	701a      	strb	r2, [r3, #0]
            MACRxPacket.altSourceAddress = true;
   11128:	4b6f      	ldr	r3, [pc, #444]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1112a:	2201      	movs	r2, #1
   1112c:	73da      	strb	r2, [r3, #15]
#ifndef TARGET_SMALL
            if (bIntraPAN) // check if it is intraPAN
   1112e:	1dbb      	adds	r3, r7, #6
   11130:	781b      	ldrb	r3, [r3, #0]
   11132:	2b00      	cmp	r3, #0
   11134:	d039      	beq.n	111aa <MiMAC_ReceivedPacket+0x592>
#endif
            {
#ifndef TARGET_SMALL
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
   11136:	4b6d      	ldr	r3, [pc, #436]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11138:	781b      	ldrb	r3, [r3, #0]
   1113a:	0019      	movs	r1, r3
   1113c:	4a6c      	ldr	r2, [pc, #432]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   1113e:	234e      	movs	r3, #78	; 0x4e
   11140:	434b      	muls	r3, r1
   11142:	18d3      	adds	r3, r2, r3
   11144:	3304      	adds	r3, #4
   11146:	781a      	ldrb	r2, [r3, #0]
   11148:	4b67      	ldr	r3, [pc, #412]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1114a:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
   1114c:	4b67      	ldr	r3, [pc, #412]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1114e:	781b      	ldrb	r3, [r3, #0]
   11150:	0019      	movs	r1, r3
   11152:	4a67      	ldr	r2, [pc, #412]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11154:	234e      	movs	r3, #78	; 0x4e
   11156:	434b      	muls	r3, r1
   11158:	18d3      	adds	r3, r2, r3
   1115a:	3305      	adds	r3, #5
   1115c:	781a      	ldrb	r2, [r3, #0]
   1115e:	4b62      	ldr	r3, [pc, #392]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11160:	745a      	strb	r2, [r3, #17]
#endif
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
   11162:	4b62      	ldr	r3, [pc, #392]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11164:	781b      	ldrb	r3, [r3, #0]
   11166:	001a      	movs	r2, r3
   11168:	234e      	movs	r3, #78	; 0x4e
   1116a:	4353      	muls	r3, r2
   1116c:	330c      	adds	r3, #12
   1116e:	001a      	movs	r2, r3
   11170:	4b5f      	ldr	r3, [pc, #380]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11172:	18d3      	adds	r3, r2, r3
   11174:	1c5a      	adds	r2, r3, #1
   11176:	4b5c      	ldr	r3, [pc, #368]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11178:	605a      	str	r2, [r3, #4]

                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
   1117a:	4b5c      	ldr	r3, [pc, #368]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1117c:	781b      	ldrb	r3, [r3, #0]
   1117e:	0019      	movs	r1, r3
   11180:	4b5b      	ldr	r3, [pc, #364]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11182:	224e      	movs	r2, #78	; 0x4e
   11184:	434a      	muls	r2, r1
   11186:	5cd3      	ldrb	r3, [r2, r3]
   11188:	3b13      	subs	r3, #19
   1118a:	b2da      	uxtb	r2, r3
   1118c:	4b56      	ldr	r3, [pc, #344]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1118e:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
   11190:	4b56      	ldr	r3, [pc, #344]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	001a      	movs	r2, r3
   11196:	234e      	movs	r3, #78	; 0x4e
   11198:	4353      	muls	r3, r2
   1119a:	330f      	adds	r3, #15
   1119c:	001a      	movs	r2, r3
   1119e:	4b54      	ldr	r3, [pc, #336]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   111a0:	18d3      	adds	r3, r2, r3
   111a2:	1c5a      	adds	r2, r3, #1
   111a4:	4b50      	ldr	r3, [pc, #320]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   111a6:	609a      	str	r2, [r3, #8]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
            }
#endif
        } break;
   111a8:	e06f      	b.n	1128a <MiMAC_ReceivedPacket+0x672>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
   111aa:	4b50      	ldr	r3, [pc, #320]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   111ac:	781b      	ldrb	r3, [r3, #0]
   111ae:	0019      	movs	r1, r3
   111b0:	4a4f      	ldr	r2, [pc, #316]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   111b2:	234e      	movs	r3, #78	; 0x4e
   111b4:	434b      	muls	r3, r1
   111b6:	18d3      	adds	r3, r2, r3
   111b8:	330d      	adds	r3, #13
   111ba:	781a      	ldrb	r2, [r3, #0]
   111bc:	4b4a      	ldr	r3, [pc, #296]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   111be:	741a      	strb	r2, [r3, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
   111c0:	4b4a      	ldr	r3, [pc, #296]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   111c2:	781b      	ldrb	r3, [r3, #0]
   111c4:	0019      	movs	r1, r3
   111c6:	4a4a      	ldr	r2, [pc, #296]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   111c8:	234e      	movs	r3, #78	; 0x4e
   111ca:	434b      	muls	r3, r1
   111cc:	18d3      	adds	r3, r2, r3
   111ce:	330e      	adds	r3, #14
   111d0:	781a      	ldrb	r2, [r3, #0]
   111d2:	4b45      	ldr	r3, [pc, #276]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   111d4:	745a      	strb	r2, [r3, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
   111d6:	4b45      	ldr	r3, [pc, #276]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   111d8:	781b      	ldrb	r3, [r3, #0]
   111da:	001a      	movs	r2, r3
   111dc:	234e      	movs	r3, #78	; 0x4e
   111de:	4353      	muls	r3, r2
   111e0:	330e      	adds	r3, #14
   111e2:	001a      	movs	r2, r3
   111e4:	4b42      	ldr	r3, [pc, #264]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   111e6:	18d3      	adds	r3, r2, r3
   111e8:	1c5a      	adds	r2, r3, #1
   111ea:	4b3f      	ldr	r3, [pc, #252]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   111ec:	605a      	str	r2, [r3, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
   111ee:	4b3f      	ldr	r3, [pc, #252]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	0019      	movs	r1, r3
   111f4:	4b3e      	ldr	r3, [pc, #248]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   111f6:	224e      	movs	r2, #78	; 0x4e
   111f8:	434a      	muls	r2, r1
   111fa:	5cd3      	ldrb	r3, [r2, r3]
   111fc:	3b15      	subs	r3, #21
   111fe:	b2da      	uxtb	r2, r3
   11200:	4b39      	ldr	r3, [pc, #228]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11202:	731a      	strb	r2, [r3, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
   11204:	4b39      	ldr	r3, [pc, #228]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11206:	781b      	ldrb	r3, [r3, #0]
   11208:	001a      	movs	r2, r3
   1120a:	234e      	movs	r3, #78	; 0x4e
   1120c:	4353      	muls	r3, r2
   1120e:	3311      	adds	r3, #17
   11210:	001a      	movs	r2, r3
   11212:	4b37      	ldr	r3, [pc, #220]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11214:	18d3      	adds	r3, r2, r3
   11216:	1c5a      	adds	r2, r3, #1
   11218:	4b33      	ldr	r3, [pc, #204]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1121a:	609a      	str	r2, [r3, #8]
        } break;
   1121c:	e035      	b.n	1128a <MiMAC_ReceivedPacket+0x672>

        case 0x08: //dest-short, source-none
        {
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
   1121e:	4b33      	ldr	r3, [pc, #204]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	0019      	movs	r1, r3
   11224:	4a32      	ldr	r2, [pc, #200]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11226:	234e      	movs	r3, #78	; 0x4e
   11228:	434b      	muls	r3, r1
   1122a:	18d3      	adds	r3, r2, r3
   1122c:	3306      	adds	r3, #6
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	2bff      	cmp	r3, #255	; 0xff
   11232:	d10f      	bne.n	11254 <MiMAC_ReceivedPacket+0x63c>
   11234:	4b2d      	ldr	r3, [pc, #180]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11236:	781b      	ldrb	r3, [r3, #0]
   11238:	0019      	movs	r1, r3
   1123a:	4a2d      	ldr	r2, [pc, #180]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   1123c:	234e      	movs	r3, #78	; 0x4e
   1123e:	434b      	muls	r3, r1
   11240:	18d3      	adds	r3, r2, r3
   11242:	3307      	adds	r3, #7
   11244:	781b      	ldrb	r3, [r3, #0]
   11246:	2bff      	cmp	r3, #255	; 0xff
   11248:	d104      	bne.n	11254 <MiMAC_ReceivedPacket+0x63c>
                MACRxPacket.flags.bits.broadcast = 1;
   1124a:	4b27      	ldr	r3, [pc, #156]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1124c:	781a      	ldrb	r2, [r3, #0]
   1124e:	2104      	movs	r1, #4
   11250:	430a      	orrs	r2, r1
   11252:	701a      	strb	r2, [r3, #0]
            }
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
   11254:	4b25      	ldr	r3, [pc, #148]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   11256:	781b      	ldrb	r3, [r3, #0]
   11258:	0019      	movs	r1, r3
   1125a:	4b25      	ldr	r3, [pc, #148]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   1125c:	224e      	movs	r2, #78	; 0x4e
   1125e:	434a      	muls	r2, r1
   11260:	5cd3      	ldrb	r3, [r2, r3]
   11262:	3b0a      	subs	r3, #10
   11264:	b2da      	uxtb	r2, r3
   11266:	4b20      	ldr	r3, [pc, #128]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   11268:	731a      	strb	r2, [r3, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
   1126a:	4b20      	ldr	r3, [pc, #128]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1126c:	781b      	ldrb	r3, [r3, #0]
   1126e:	001a      	movs	r2, r3
   11270:	234e      	movs	r3, #78	; 0x4e
   11272:	4353      	muls	r3, r2
   11274:	1dda      	adds	r2, r3, #7
   11276:	4b1e      	ldr	r3, [pc, #120]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11278:	18d3      	adds	r3, r2, r3
   1127a:	1c5a      	adds	r2, r3, #1
   1127c:	4b1a      	ldr	r3, [pc, #104]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   1127e:	609a      	str	r2, [r3, #8]
        } break;
   11280:	e003      	b.n	1128a <MiMAC_ReceivedPacket+0x672>

        // all other addressing mode will not be supported in P2P
        default:
            // not valid addressing mode or no addressing info
            MiMAC_DiscardPacket();
   11282:	4b1c      	ldr	r3, [pc, #112]	; (112f4 <MiMAC_ReceivedPacket+0x6dc>)
   11284:	4798      	blx	r3
            return false;
   11286:	2300      	movs	r3, #0
   11288:	e102      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
        }

#ifdef ENABLE_SECURITY
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
   1128a:	4b18      	ldr	r3, [pc, #96]	; (112ec <MiMAC_ReceivedPacket+0x6d4>)
   1128c:	781b      	ldrb	r3, [r3, #0]
   1128e:	0019      	movs	r1, r3
   11290:	4a17      	ldr	r2, [pc, #92]	; (112f0 <MiMAC_ReceivedPacket+0x6d8>)
   11292:	234e      	movs	r3, #78	; 0x4e
   11294:	434b      	muls	r3, r1
   11296:	18d3      	adds	r3, r2, r3
   11298:	3301      	adds	r3, #1
   1129a:	781b      	ldrb	r3, [r3, #0]
   1129c:	001a      	movs	r2, r3
   1129e:	2308      	movs	r3, #8
   112a0:	4013      	ands	r3, r2
   112a2:	d100      	bne.n	112a6 <MiMAC_ReceivedPacket+0x68e>
   112a4:	e0bd      	b.n	11422 <MiMAC_ReceivedPacket+0x80a>
            API_UINT32_UNION FrameCounter;

            if (addrMode < 0xC0) {
   112a6:	1d7b      	adds	r3, r7, #5
   112a8:	781b      	ldrb	r3, [r3, #0]
   112aa:	2bbf      	cmp	r3, #191	; 0xbf
   112ac:	d803      	bhi.n	112b6 <MiMAC_ReceivedPacket+0x69e>
                MiMAC_DiscardPacket();
   112ae:	4b11      	ldr	r3, [pc, #68]	; (112f4 <MiMAC_ReceivedPacket+0x6dc>)
   112b0:	4798      	blx	r3
                return false;
   112b2:	2300      	movs	r3, #0
   112b4:	e0ec      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
            }

            FrameCounter.v[0] = MACRxPacket.Payload[0];
   112b6:	4b0c      	ldr	r3, [pc, #48]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   112b8:	689b      	ldr	r3, [r3, #8]
   112ba:	781a      	ldrb	r2, [r3, #0]
   112bc:	003b      	movs	r3, r7
   112be:	701a      	strb	r2, [r3, #0]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
   112c0:	4b09      	ldr	r3, [pc, #36]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   112c2:	689b      	ldr	r3, [r3, #8]
   112c4:	785a      	ldrb	r2, [r3, #1]
   112c6:	003b      	movs	r3, r7
   112c8:	705a      	strb	r2, [r3, #1]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
   112ca:	4b07      	ldr	r3, [pc, #28]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   112cc:	689b      	ldr	r3, [r3, #8]
   112ce:	789a      	ldrb	r2, [r3, #2]
   112d0:	003b      	movs	r3, r7
   112d2:	709a      	strb	r2, [r3, #2]
            FrameCounter.v[3] = MACRxPacket.Payload[3];
   112d4:	4b04      	ldr	r3, [pc, #16]	; (112e8 <MiMAC_ReceivedPacket+0x6d0>)
   112d6:	689b      	ldr	r3, [r3, #8]
   112d8:	78da      	ldrb	r2, [r3, #3]
   112da:	003b      	movs	r3, r7
   112dc:	70da      	strb	r2, [r3, #3]

            for (i = 0; i < CONNECTION_SIZE; i++) {
   112de:	1dfb      	adds	r3, r7, #7
   112e0:	2200      	movs	r2, #0
   112e2:	701a      	strb	r2, [r3, #0]
   112e4:	e02d      	b.n	11342 <MiMAC_ReceivedPacket+0x72a>
   112e6:	46c0      	nop			; (mov r8, r8)
   112e8:	200023d0 	.word	0x200023d0
   112ec:	200005ac 	.word	0x200005ac
   112f0:	20001ccc 	.word	0x20001ccc
   112f4:	00010bed 	.word	0x00010bed
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
   112f8:	1dfb      	adds	r3, r7, #7
   112fa:	781a      	ldrb	r2, [r3, #0]
   112fc:	4966      	ldr	r1, [pc, #408]	; (11498 <MiMAC_ReceivedPacket+0x880>)
   112fe:	2008      	movs	r0, #8
   11300:	0013      	movs	r3, r2
   11302:	009b      	lsls	r3, r3, #2
   11304:	189b      	adds	r3, r3, r2
   11306:	005b      	lsls	r3, r3, #1
   11308:	18cb      	adds	r3, r1, r3
   1130a:	181b      	adds	r3, r3, r0
   1130c:	785b      	ldrb	r3, [r3, #1]
   1130e:	061b      	lsls	r3, r3, #24
   11310:	0fdb      	lsrs	r3, r3, #31
   11312:	b2db      	uxtb	r3, r3
   11314:	2b00      	cmp	r3, #0
   11316:	d00f      	beq.n	11338 <MiMAC_ReceivedPacket+0x720>
   11318:	1dfb      	adds	r3, r7, #7
   1131a:	781a      	ldrb	r2, [r3, #0]
   1131c:	0013      	movs	r3, r2
   1131e:	009b      	lsls	r3, r3, #2
   11320:	189b      	adds	r3, r3, r2
   11322:	005b      	lsls	r3, r3, #1
   11324:	4a5c      	ldr	r2, [pc, #368]	; (11498 <MiMAC_ReceivedPacket+0x880>)
   11326:	189a      	adds	r2, r3, r2
   11328:	4b5c      	ldr	r3, [pc, #368]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1132a:	685b      	ldr	r3, [r3, #4]
   1132c:	0019      	movs	r1, r3
   1132e:	0010      	movs	r0, r2
   11330:	4b5b      	ldr	r3, [pc, #364]	; (114a0 <MiMAC_ReceivedPacket+0x888>)
   11332:	4798      	blx	r3
   11334:	1e03      	subs	r3, r0, #0
   11336:	d109      	bne.n	1134c <MiMAC_ReceivedPacket+0x734>
            for (i = 0; i < CONNECTION_SIZE; i++) {
   11338:	1dfb      	adds	r3, r7, #7
   1133a:	781a      	ldrb	r2, [r3, #0]
   1133c:	1dfb      	adds	r3, r7, #7
   1133e:	3201      	adds	r2, #1
   11340:	701a      	strb	r2, [r3, #0]
   11342:	1dfb      	adds	r3, r7, #7
   11344:	781b      	ldrb	r3, [r3, #0]
   11346:	2b13      	cmp	r3, #19
   11348:	d9d6      	bls.n	112f8 <MiMAC_ReceivedPacket+0x6e0>
   1134a:	e000      	b.n	1134e <MiMAC_ReceivedPacket+0x736>
                    break;
   1134c:	46c0      	nop			; (mov r8, r8)
                }
            }

            if (i < CONNECTION_SIZE) {
   1134e:	1dfb      	adds	r3, r7, #7
   11350:	781b      	ldrb	r3, [r3, #0]
   11352:	2b13      	cmp	r3, #19
   11354:	d811      	bhi.n	1137a <MiMAC_ReceivedPacket+0x762>
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
   11356:	1dfb      	adds	r3, r7, #7
   11358:	781a      	ldrb	r2, [r3, #0]
   1135a:	4b52      	ldr	r3, [pc, #328]	; (114a4 <MiMAC_ReceivedPacket+0x88c>)
   1135c:	0092      	lsls	r2, r2, #2
   1135e:	58d2      	ldr	r2, [r2, r3]
   11360:	683b      	ldr	r3, [r7, #0]
   11362:	429a      	cmp	r2, r3
   11364:	d903      	bls.n	1136e <MiMAC_ReceivedPacket+0x756>
                    MiMAC_DiscardPacket();
   11366:	4b50      	ldr	r3, [pc, #320]	; (114a8 <MiMAC_ReceivedPacket+0x890>)
   11368:	4798      	blx	r3
                    return false;
   1136a:	2300      	movs	r3, #0
   1136c:	e090      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
                }
                else {
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
   1136e:	1dfb      	adds	r3, r7, #7
   11370:	781a      	ldrb	r2, [r3, #0]
   11372:	6839      	ldr	r1, [r7, #0]
   11374:	4b4b      	ldr	r3, [pc, #300]	; (114a4 <MiMAC_ReceivedPacket+0x88c>)
   11376:	0092      	lsls	r2, r2, #2
   11378:	50d1      	str	r1, [r2, r3]
                }
            }

            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
   1137a:	4b48      	ldr	r3, [pc, #288]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1137c:	7b1b      	ldrb	r3, [r3, #12]
   1137e:	3b05      	subs	r3, #5
   11380:	b2da      	uxtb	r2, r3
   11382:	4b46      	ldr	r3, [pc, #280]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11384:	731a      	strb	r2, [r3, #12]

            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
   11386:	4b45      	ldr	r3, [pc, #276]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11388:	689a      	ldr	r2, [r3, #8]
   1138a:	4b44      	ldr	r3, [pc, #272]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1138c:	7b1b      	ldrb	r3, [r3, #12]
   1138e:	3301      	adds	r3, #1
   11390:	18d3      	adds	r3, r2, r3
   11392:	781a      	ldrb	r2, [r3, #0]
   11394:	4b45      	ldr	r3, [pc, #276]	; (114ac <MiMAC_ReceivedPacket+0x894>)
   11396:	701a      	strb	r2, [r3, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
   11398:	4b40      	ldr	r3, [pc, #256]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1139a:	689a      	ldr	r2, [r3, #8]
   1139c:	4b3f      	ldr	r3, [pc, #252]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1139e:	7b1b      	ldrb	r3, [r3, #12]
   113a0:	3302      	adds	r3, #2
   113a2:	18d3      	adds	r3, r2, r3
   113a4:	781a      	ldrb	r2, [r3, #0]
   113a6:	4b41      	ldr	r3, [pc, #260]	; (114ac <MiMAC_ReceivedPacket+0x894>)
   113a8:	705a      	strb	r2, [r3, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
   113aa:	4b3c      	ldr	r3, [pc, #240]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113ac:	689a      	ldr	r2, [r3, #8]
   113ae:	4b3b      	ldr	r3, [pc, #236]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113b0:	7b1b      	ldrb	r3, [r3, #12]
   113b2:	3303      	adds	r3, #3
   113b4:	18d3      	adds	r3, r2, r3
   113b6:	781a      	ldrb	r2, [r3, #0]
   113b8:	4b3c      	ldr	r3, [pc, #240]	; (114ac <MiMAC_ReceivedPacket+0x894>)
   113ba:	709a      	strb	r2, [r3, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
   113bc:	4b37      	ldr	r3, [pc, #220]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113be:	689a      	ldr	r2, [r3, #8]
   113c0:	4b36      	ldr	r3, [pc, #216]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113c2:	7b1b      	ldrb	r3, [r3, #12]
   113c4:	3304      	adds	r3, #4
   113c6:	18d3      	adds	r3, r2, r3
   113c8:	781a      	ldrb	r2, [r3, #0]
   113ca:	4b38      	ldr	r3, [pc, #224]	; (114ac <MiMAC_ReceivedPacket+0x894>)
   113cc:	70da      	strb	r2, [r3, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
   113ce:	4b33      	ldr	r3, [pc, #204]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113d0:	689b      	ldr	r3, [r3, #8]
   113d2:	1d58      	adds	r0, r3, #5
   113d4:	4b31      	ldr	r3, [pc, #196]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   113d6:	685c      	ldr	r4, [r3, #4]
   113d8:	4b35      	ldr	r3, [pc, #212]	; (114b0 <MiMAC_ReceivedPacket+0x898>)
   113da:	781b      	ldrb	r3, [r3, #0]
   113dc:	0019      	movs	r1, r3
   113de:	4a35      	ldr	r2, [pc, #212]	; (114b4 <MiMAC_ReceivedPacket+0x89c>)
   113e0:	234e      	movs	r3, #78	; 0x4e
   113e2:	434b      	muls	r3, r1
   113e4:	18d3      	adds	r3, r2, r3
   113e6:	3301      	adds	r3, #1
   113e8:	781b      	ldrb	r3, [r3, #0]
   113ea:	683a      	ldr	r2, [r7, #0]
   113ec:	4932      	ldr	r1, [pc, #200]	; (114b8 <MiMAC_ReceivedPacket+0x8a0>)
   113ee:	9300      	str	r3, [sp, #0]
   113f0:	0013      	movs	r3, r2
   113f2:	0022      	movs	r2, r4
   113f4:	4c31      	ldr	r4, [pc, #196]	; (114bc <MiMAC_ReceivedPacket+0x8a4>)
   113f6:	47a0      	blx	r4
   113f8:	0003      	movs	r3, r0
   113fa:	001a      	movs	r2, r3
   113fc:	2301      	movs	r3, #1
   113fe:	4053      	eors	r3, r2
   11400:	b2db      	uxtb	r3, r3
   11402:	2b00      	cmp	r3, #0
   11404:	d003      	beq.n	1140e <MiMAC_ReceivedPacket+0x7f6>
                MiMAC_DiscardPacket();
   11406:	4b28      	ldr	r3, [pc, #160]	; (114a8 <MiMAC_ReceivedPacket+0x890>)
   11408:	4798      	blx	r3
                return false;
   1140a:	2300      	movs	r3, #0
   1140c:	e040      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
            }

            // remove the security header from the payload
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
   1140e:	4b23      	ldr	r3, [pc, #140]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11410:	689b      	ldr	r3, [r3, #8]
   11412:	1d5a      	adds	r2, r3, #5
   11414:	4b21      	ldr	r3, [pc, #132]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11416:	609a      	str	r2, [r3, #8]
            MACRxPacket.flags.bits.secEn = 1;
   11418:	4b20      	ldr	r3, [pc, #128]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1141a:	781a      	ldrb	r2, [r3, #0]
   1141c:	2108      	movs	r1, #8
   1141e:	430a      	orrs	r2, r1
   11420:	701a      	strb	r2, [r3, #0]
#endif

        // check the frame type. Only the data and command frame type
        // are supported. Acknowledgement frame type is handled in
        // AT96RF233 transceiver hardware.
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
   11422:	4b23      	ldr	r3, [pc, #140]	; (114b0 <MiMAC_ReceivedPacket+0x898>)
   11424:	781b      	ldrb	r3, [r3, #0]
   11426:	0019      	movs	r1, r3
   11428:	4a22      	ldr	r2, [pc, #136]	; (114b4 <MiMAC_ReceivedPacket+0x89c>)
   1142a:	234e      	movs	r3, #78	; 0x4e
   1142c:	434b      	muls	r3, r1
   1142e:	18d3      	adds	r3, r2, r3
   11430:	3301      	adds	r3, #1
   11432:	781b      	ldrb	r3, [r3, #0]
   11434:	001a      	movs	r2, r3
   11436:	2307      	movs	r3, #7
   11438:	4013      	ands	r3, r2
   1143a:	2b01      	cmp	r3, #1
   1143c:	d004      	beq.n	11448 <MiMAC_ReceivedPacket+0x830>
   1143e:	2b03      	cmp	r3, #3
   11440:	d008      	beq.n	11454 <MiMAC_ReceivedPacket+0x83c>
   11442:	2b00      	cmp	r3, #0
   11444:	d00f      	beq.n	11466 <MiMAC_ReceivedPacket+0x84e>
   11446:	e014      	b.n	11472 <MiMAC_ReceivedPacket+0x85a>
        {
        case 0x01: // data frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
   11448:	4b14      	ldr	r3, [pc, #80]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   1144a:	781a      	ldrb	r2, [r3, #0]
   1144c:	2103      	movs	r1, #3
   1144e:	438a      	bics	r2, r1
   11450:	701a      	strb	r2, [r3, #0]
            break;
   11452:	e012      	b.n	1147a <MiMAC_ReceivedPacket+0x862>
        case 0x03: // command frame
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
   11454:	4b11      	ldr	r3, [pc, #68]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11456:	781a      	ldrb	r2, [r3, #0]
   11458:	2103      	movs	r1, #3
   1145a:	438a      	bics	r2, r1
   1145c:	1c11      	adds	r1, r2, #0
   1145e:	2201      	movs	r2, #1
   11460:	430a      	orrs	r2, r1
   11462:	701a      	strb	r2, [r3, #0]
            break;
   11464:	e009      	b.n	1147a <MiMAC_ReceivedPacket+0x862>
        case 0x00:
            // use reserved packet type to represent beacon packet
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
   11466:	4b0d      	ldr	r3, [pc, #52]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11468:	781a      	ldrb	r2, [r3, #0]
   1146a:	2103      	movs	r1, #3
   1146c:	430a      	orrs	r2, r1
   1146e:	701a      	strb	r2, [r3, #0]
            break;
   11470:	e003      	b.n	1147a <MiMAC_ReceivedPacket+0x862>
        default: // not support frame type
            MiMAC_DiscardPacket();
   11472:	4b0d      	ldr	r3, [pc, #52]	; (114a8 <MiMAC_ReceivedPacket+0x890>)
   11474:	4798      	blx	r3
            return false;
   11476:	2300      	movs	r3, #0
   11478:	e00a      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
        }
#ifndef TARGET_SMALL
        MACRxPacket.LQIValue = Received_LQI_Val;
   1147a:	4b11      	ldr	r3, [pc, #68]	; (114c0 <MiMAC_ReceivedPacket+0x8a8>)
   1147c:	781a      	ldrb	r2, [r3, #0]
   1147e:	4b07      	ldr	r3, [pc, #28]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11480:	739a      	strb	r2, [r3, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
   11482:	4b10      	ldr	r3, [pc, #64]	; (114c4 <MiMAC_ReceivedPacket+0x8ac>)
   11484:	781a      	ldrb	r2, [r3, #0]
   11486:	4b05      	ldr	r3, [pc, #20]	; (1149c <MiMAC_ReceivedPacket+0x884>)
   11488:	735a      	strb	r2, [r3, #13]
#endif

        return true;
   1148a:	2301      	movs	r3, #1
   1148c:	e000      	b.n	11490 <MiMAC_ReceivedPacket+0x878>
    }
    return false;
   1148e:	2300      	movs	r3, #0
}
   11490:	0018      	movs	r0, r3
   11492:	46bd      	mov	sp, r7
   11494:	b003      	add	sp, #12
   11496:	bd90      	pop	{r4, r7, pc}
   11498:	20002308 	.word	0x20002308
   1149c:	200023d0 	.word	0x200023d0
   114a0:	0001202d 	.word	0x0001202d
   114a4:	200023ec 	.word	0x200023ec
   114a8:	00010bed 	.word	0x00010bed
   114ac:	200022f8 	.word	0x200022f8
   114b0:	200005ac 	.word	0x200005ac
   114b4:	20001ccc 	.word	0x20001ccc
   114b8:	200023dc 	.word	0x200023dc
   114bc:	00010005 	.word	0x00010005
   114c0:	20001c85 	.word	0x20001c85
   114c4:	20001cb8 	.word	0x20001cb8

000114c8 <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
   114c8:	b590      	push	{r4, r7, lr}
   114ca:	b083      	sub	sp, #12
   114cc:	af00      	add	r7, sp, #0
    if (PHY_STATE_SLEEP == phyState) {
   114ce:	4b66      	ldr	r3, [pc, #408]	; (11668 <PHY_PacketReceieved+0x1a0>)
   114d0:	781b      	ldrb	r3, [r3, #0]
   114d2:	2b02      	cmp	r3, #2
   114d4:	d100      	bne.n	114d8 <PHY_PacketReceieved+0x10>
   114d6:	e0c2      	b.n	1165e <PHY_PacketReceieved+0x196>
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
   114d8:	200f      	movs	r0, #15
   114da:	4b64      	ldr	r3, [pc, #400]	; (1166c <PHY_PacketReceieved+0x1a4>)
   114dc:	4798      	blx	r3
   114de:	0003      	movs	r3, r0
   114e0:	001a      	movs	r2, r3
   114e2:	2308      	movs	r3, #8
   114e4:	4013      	ands	r3, r2
   114e6:	d100      	bne.n	114ea <PHY_PacketReceieved+0x22>
   114e8:	e0ba      	b.n	11660 <PHY_PacketReceieved+0x198>
        if (PHY_STATE_IDLE == phyState) {
   114ea:	4b5f      	ldr	r3, [pc, #380]	; (11668 <PHY_PacketReceieved+0x1a0>)
   114ec:	781b      	ldrb	r3, [r3, #0]
   114ee:	2b01      	cmp	r3, #1
   114f0:	d000      	beq.n	114f4 <PHY_PacketReceieved+0x2c>
   114f2:	e076      	b.n	115e2 <PHY_PacketReceieved+0x11a>
            uint8_t size, i, RxBank = 0xFF;
   114f4:	1dbb      	adds	r3, r7, #6
   114f6:	22ff      	movs	r2, #255	; 0xff
   114f8:	701a      	strb	r2, [r3, #0]

            for (i = 0; i < BANK_SIZE; i++) {
   114fa:	1dfb      	adds	r3, r7, #7
   114fc:	2200      	movs	r2, #0
   114fe:	701a      	strb	r2, [r3, #0]
   11500:	e011      	b.n	11526 <PHY_PacketReceieved+0x5e>
                if (RxBuffer[i].PayloadLen == 0) {
   11502:	1dfb      	adds	r3, r7, #7
   11504:	781a      	ldrb	r2, [r3, #0]
   11506:	4b5a      	ldr	r3, [pc, #360]	; (11670 <PHY_PacketReceieved+0x1a8>)
   11508:	214e      	movs	r1, #78	; 0x4e
   1150a:	434a      	muls	r2, r1
   1150c:	5cd3      	ldrb	r3, [r2, r3]
   1150e:	2b00      	cmp	r3, #0
   11510:	d104      	bne.n	1151c <PHY_PacketReceieved+0x54>
                    RxBank = i;
   11512:	1dbb      	adds	r3, r7, #6
   11514:	1dfa      	adds	r2, r7, #7
   11516:	7812      	ldrb	r2, [r2, #0]
   11518:	701a      	strb	r2, [r3, #0]
                    break;
   1151a:	e008      	b.n	1152e <PHY_PacketReceieved+0x66>
            for (i = 0; i < BANK_SIZE; i++) {
   1151c:	1dfb      	adds	r3, r7, #7
   1151e:	781a      	ldrb	r2, [r3, #0]
   11520:	1dfb      	adds	r3, r7, #7
   11522:	3201      	adds	r2, #1
   11524:	701a      	strb	r2, [r3, #0]
   11526:	1dfb      	adds	r3, r7, #7
   11528:	781b      	ldrb	r3, [r3, #0]
   1152a:	2b13      	cmp	r3, #19
   1152c:	d9e9      	bls.n	11502 <PHY_PacketReceieved+0x3a>
                }
            }
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
   1152e:	2007      	movs	r0, #7
   11530:	4b4e      	ldr	r3, [pc, #312]	; (1166c <PHY_PacketReceieved+0x1a4>)
   11532:	4798      	blx	r3
   11534:	0003      	movs	r3, r0
   11536:	3b5b      	subs	r3, #91	; 0x5b
   11538:	b2da      	uxtb	r2, r3
   1153a:	4b4e      	ldr	r3, [pc, #312]	; (11674 <PHY_PacketReceieved+0x1ac>)
   1153c:	701a      	strb	r2, [r3, #0]

            trx_frame_read(&size, 1);
   1153e:	1d3b      	adds	r3, r7, #4
   11540:	2101      	movs	r1, #1
   11542:	0018      	movs	r0, r3
   11544:	4b4c      	ldr	r3, [pc, #304]	; (11678 <PHY_PacketReceieved+0x1b0>)
   11546:	4798      	blx	r3

            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
   11548:	1d3b      	adds	r3, r7, #4
   1154a:	781b      	ldrb	r3, [r3, #0]
   1154c:	3305      	adds	r3, #5
   1154e:	b2da      	uxtb	r2, r3
   11550:	4b4a      	ldr	r3, [pc, #296]	; (1167c <PHY_PacketReceieved+0x1b4>)
   11552:	0011      	movs	r1, r2
   11554:	0018      	movs	r0, r3
   11556:	4b48      	ldr	r3, [pc, #288]	; (11678 <PHY_PacketReceieved+0x1b0>)
   11558:	4798      	blx	r3
            RxBuffer[RxBank].PayloadLen = size + 2;
   1155a:	1dbb      	adds	r3, r7, #6
   1155c:	781a      	ldrb	r2, [r3, #0]
   1155e:	1d3b      	adds	r3, r7, #4
   11560:	781b      	ldrb	r3, [r3, #0]
   11562:	3302      	adds	r3, #2
   11564:	b2d8      	uxtb	r0, r3
   11566:	4b42      	ldr	r3, [pc, #264]	; (11670 <PHY_PacketReceieved+0x1a8>)
   11568:	214e      	movs	r1, #78	; 0x4e
   1156a:	434a      	muls	r2, r1
   1156c:	1c01      	adds	r1, r0, #0
   1156e:	54d1      	strb	r1, [r2, r3]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
   11570:	1dbb      	adds	r3, r7, #6
   11572:	781a      	ldrb	r2, [r3, #0]
   11574:	4b3e      	ldr	r3, [pc, #248]	; (11670 <PHY_PacketReceieved+0x1a8>)
   11576:	214e      	movs	r1, #78	; 0x4e
   11578:	434a      	muls	r2, r1
   1157a:	5cd3      	ldrb	r3, [r2, r3]
   1157c:	2b4c      	cmp	r3, #76	; 0x4c
   1157e:	d825      	bhi.n	115cc <PHY_PacketReceieved+0x104>
                //indicate that data is now stored in the buffer
                trx_status.bits.RX_BUFFERED = 1;
   11580:	4a3f      	ldr	r2, [pc, #252]	; (11680 <PHY_PacketReceieved+0x1b8>)
   11582:	7813      	ldrb	r3, [r2, #0]
   11584:	2120      	movs	r1, #32
   11586:	430b      	orrs	r3, r1
   11588:	7013      	strb	r3, [r2, #0]

                //copy all of the data from the FIFO into the TxBuffer, plus RSSI and LQI
                for (i = 1; i <= size + 2; i++) {
   1158a:	1dfb      	adds	r3, r7, #7
   1158c:	2201      	movs	r2, #1
   1158e:	701a      	strb	r2, [r3, #0]
   11590:	e015      	b.n	115be <PHY_PacketReceieved+0xf6>
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
   11592:	1dbb      	adds	r3, r7, #6
   11594:	781a      	ldrb	r2, [r3, #0]
   11596:	1dfb      	adds	r3, r7, #7
   11598:	781b      	ldrb	r3, [r3, #0]
   1159a:	3b01      	subs	r3, #1
   1159c:	1df9      	adds	r1, r7, #7
   1159e:	7809      	ldrb	r1, [r1, #0]
   115a0:	4836      	ldr	r0, [pc, #216]	; (1167c <PHY_PacketReceieved+0x1b4>)
   115a2:	5c44      	ldrb	r4, [r0, r1]
   115a4:	4932      	ldr	r1, [pc, #200]	; (11670 <PHY_PacketReceieved+0x1a8>)
   115a6:	204e      	movs	r0, #78	; 0x4e
   115a8:	4342      	muls	r2, r0
   115aa:	188a      	adds	r2, r1, r2
   115ac:	18d3      	adds	r3, r2, r3
   115ae:	3301      	adds	r3, #1
   115b0:	1c22      	adds	r2, r4, #0
   115b2:	701a      	strb	r2, [r3, #0]
                for (i = 1; i <= size + 2; i++) {
   115b4:	1dfb      	adds	r3, r7, #7
   115b6:	781a      	ldrb	r2, [r3, #0]
   115b8:	1dfb      	adds	r3, r7, #7
   115ba:	3201      	adds	r2, #1
   115bc:	701a      	strb	r2, [r3, #0]
   115be:	1dfb      	adds	r3, r7, #7
   115c0:	781a      	ldrb	r2, [r3, #0]
   115c2:	1d3b      	adds	r3, r7, #4
   115c4:	781b      	ldrb	r3, [r3, #0]
   115c6:	3302      	adds	r3, #2
   115c8:	429a      	cmp	r2, r3
   115ca:	dde2      	ble.n	11592 <PHY_PacketReceieved+0xca>
                }
            }
            Received_LQI_Val = phyRxBuffer[i - 2];
   115cc:	1dfb      	adds	r3, r7, #7
   115ce:	781b      	ldrb	r3, [r3, #0]
   115d0:	3b02      	subs	r3, #2
   115d2:	4a2a      	ldr	r2, [pc, #168]	; (1167c <PHY_PacketReceieved+0x1b4>)
   115d4:	5cd2      	ldrb	r2, [r2, r3]
   115d6:	4b2b      	ldr	r3, [pc, #172]	; (11684 <PHY_PacketReceieved+0x1bc>)
   115d8:	701a      	strb	r2, [r3, #0]

            phyWaitState(TRX_STATUS_RX_AACK_ON);
   115da:	2016      	movs	r0, #22
   115dc:	4b2a      	ldr	r3, [pc, #168]	; (11688 <PHY_PacketReceieved+0x1c0>)
   115de:	4798      	blx	r3
   115e0:	e03e      	b.n	11660 <PHY_PacketReceieved+0x198>
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
   115e2:	4b21      	ldr	r3, [pc, #132]	; (11668 <PHY_PacketReceieved+0x1a0>)
   115e4:	781b      	ldrb	r3, [r3, #0]
   115e6:	2b03      	cmp	r3, #3
   115e8:	d13a      	bne.n	11660 <PHY_PacketReceieved+0x198>
            uint8_t status
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
   115ea:	2002      	movs	r0, #2
   115ec:	4b1f      	ldr	r3, [pc, #124]	; (1166c <PHY_PacketReceieved+0x1a4>)
   115ee:	4798      	blx	r3
   115f0:	0003      	movs	r3, r0
   115f2:	095b      	lsrs	r3, r3, #5
   115f4:	b2da      	uxtb	r2, r3
            uint8_t status
   115f6:	1d7b      	adds	r3, r7, #5
   115f8:	2107      	movs	r1, #7
   115fa:	400a      	ands	r2, r1
   115fc:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_FAIL = 0;
   115fe:	4a20      	ldr	r2, [pc, #128]	; (11680 <PHY_PacketReceieved+0x1b8>)
   11600:	7813      	ldrb	r3, [r2, #0]
   11602:	2104      	movs	r1, #4
   11604:	438b      	bics	r3, r1
   11606:	7013      	strb	r3, [r2, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
   11608:	4a1d      	ldr	r2, [pc, #116]	; (11680 <PHY_PacketReceieved+0x1b8>)
   1160a:	7813      	ldrb	r3, [r2, #0]
   1160c:	2102      	movs	r1, #2
   1160e:	438b      	bics	r3, r1
   11610:	7013      	strb	r3, [r2, #0]
            if (TRAC_STATUS_SUCCESS == status) {
   11612:	1d7b      	adds	r3, r7, #5
   11614:	781b      	ldrb	r3, [r3, #0]
   11616:	2b00      	cmp	r3, #0
   11618:	d103      	bne.n	11622 <PHY_PacketReceieved+0x15a>
                status = PHY_STATUS_SUCCESS;
   1161a:	1d7b      	adds	r3, r7, #5
   1161c:	2200      	movs	r2, #0
   1161e:	701a      	strb	r2, [r3, #0]
   11620:	e017      	b.n	11652 <PHY_PacketReceieved+0x18a>
            }
            else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status) {
   11622:	1d7b      	adds	r3, r7, #5
   11624:	781b      	ldrb	r3, [r3, #0]
   11626:	2b03      	cmp	r3, #3
   11628:	d103      	bne.n	11632 <PHY_PacketReceieved+0x16a>
                status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
   1162a:	1d7b      	adds	r3, r7, #5
   1162c:	2201      	movs	r2, #1
   1162e:	701a      	strb	r2, [r3, #0]
   11630:	e00f      	b.n	11652 <PHY_PacketReceieved+0x18a>
            }
            else if (TRAC_STATUS_NO_ACK == status) {
   11632:	1d7b      	adds	r3, r7, #5
   11634:	781b      	ldrb	r3, [r3, #0]
   11636:	2b05      	cmp	r3, #5
   11638:	d108      	bne.n	1164c <PHY_PacketReceieved+0x184>
                status = PHY_STATUS_NO_ACK;
   1163a:	1d7b      	adds	r3, r7, #5
   1163c:	2202      	movs	r2, #2
   1163e:	701a      	strb	r2, [r3, #0]
                trx_status.bits.TX_FAIL = 1;
   11640:	4a0f      	ldr	r2, [pc, #60]	; (11680 <PHY_PacketReceieved+0x1b8>)
   11642:	7813      	ldrb	r3, [r2, #0]
   11644:	2104      	movs	r1, #4
   11646:	430b      	orrs	r3, r1
   11648:	7013      	strb	r3, [r2, #0]
   1164a:	e002      	b.n	11652 <PHY_PacketReceieved+0x18a>
            }
            else {
                status = PHY_STATUS_ERROR;
   1164c:	1d7b      	adds	r3, r7, #5
   1164e:	2203      	movs	r2, #3
   11650:	701a      	strb	r2, [r3, #0]
            }

            phySetRxState();
   11652:	4b0e      	ldr	r3, [pc, #56]	; (1168c <PHY_PacketReceieved+0x1c4>)
   11654:	4798      	blx	r3
            phyState = PHY_STATE_IDLE;
   11656:	4b04      	ldr	r3, [pc, #16]	; (11668 <PHY_PacketReceieved+0x1a0>)
   11658:	2201      	movs	r2, #1
   1165a:	701a      	strb	r2, [r3, #0]
   1165c:	e000      	b.n	11660 <PHY_PacketReceieved+0x198>
        return;
   1165e:	46c0      	nop			; (mov r8, r8)
        }
    }
   11660:	46bd      	mov	sp, r7
   11662:	b003      	add	sp, #12
   11664:	bd90      	pop	{r4, r7, pc}
   11666:	46c0      	nop			; (mov r8, r8)
   11668:	2000160e 	.word	0x2000160e
   1166c:	00010aad 	.word	0x00010aad
   11670:	20001ccc 	.word	0x20001ccc
   11674:	20001cb8 	.word	0x20001cb8
   11678:	0000ae39 	.word	0x0000ae39
   1167c:	20001610 	.word	0x20001610
   11680:	20002300 	.word	0x20002300
   11684:	20001c85 	.word	0x20001c85
   11688:	00010add 	.word	0x00010add
   1168c:	00010b0d 	.word	0x00010b0d

00011690 <Total_Connections>:
/************************ VARIABLES ********************************/
uint8_t myLongAddress[8];

// Evaluate Total No of Peer Connection on a Node
uint8_t Total_Connections(void)
{
   11690:	b580      	push	{r7, lr}
   11692:	b082      	sub	sp, #8
   11694:	af00      	add	r7, sp, #0
    uint8_t count=0 , i;
   11696:	1dfb      	adds	r3, r7, #7
   11698:	2200      	movs	r2, #0
   1169a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<CONNECTION_SIZE;i++)
   1169c:	1dbb      	adds	r3, r7, #6
   1169e:	2200      	movs	r2, #0
   116a0:	701a      	strb	r2, [r3, #0]
   116a2:	e019      	b.n	116d8 <Total_Connections+0x48>
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
   116a4:	1dbb      	adds	r3, r7, #6
   116a6:	781a      	ldrb	r2, [r3, #0]
   116a8:	4910      	ldr	r1, [pc, #64]	; (116ec <Total_Connections+0x5c>)
   116aa:	2008      	movs	r0, #8
   116ac:	0013      	movs	r3, r2
   116ae:	009b      	lsls	r3, r3, #2
   116b0:	189b      	adds	r3, r3, r2
   116b2:	005b      	lsls	r3, r3, #1
   116b4:	18cb      	adds	r3, r1, r3
   116b6:	181b      	adds	r3, r3, r0
   116b8:	785b      	ldrb	r3, [r3, #1]
   116ba:	061b      	lsls	r3, r3, #24
   116bc:	0fdb      	lsrs	r3, r3, #31
   116be:	b2db      	uxtb	r3, r3
   116c0:	2b00      	cmp	r3, #0
   116c2:	d004      	beq.n	116ce <Total_Connections+0x3e>
        {
            count++;
   116c4:	1dfb      	adds	r3, r7, #7
   116c6:	781a      	ldrb	r2, [r3, #0]
   116c8:	1dfb      	adds	r3, r7, #7
   116ca:	3201      	adds	r2, #1
   116cc:	701a      	strb	r2, [r3, #0]
    for (i=0;i<CONNECTION_SIZE;i++)
   116ce:	1dbb      	adds	r3, r7, #6
   116d0:	781a      	ldrb	r2, [r3, #0]
   116d2:	1dbb      	adds	r3, r7, #6
   116d4:	3201      	adds	r2, #1
   116d6:	701a      	strb	r2, [r3, #0]
   116d8:	1dbb      	adds	r3, r7, #6
   116da:	781b      	ldrb	r3, [r3, #0]
   116dc:	2b13      	cmp	r3, #19
   116de:	d9e1      	bls.n	116a4 <Total_Connections+0x14>
        }
    #endif      
    }
    return count;
   116e0:	1dfb      	adds	r3, r7, #7
   116e2:	781b      	ldrb	r3, [r3, #0]
}
   116e4:	0018      	movs	r0, r3
   116e6:	46bd      	mov	sp, r7
   116e8:	b002      	add	sp, #8
   116ea:	bd80      	pop	{r7, pc}
   116ec:	20002308 	.word	0x20002308

000116f0 <P2PTasks>:
 * Side Effects:    The stack receives, handles, buffers, and transmits 
 *                  packets.  It also handles all of the joining 
 * 
 ********************************************************************/
void P2PTasks(void)
{
   116f0:	b590      	push	{r4, r7, lr}
   116f2:	b085      	sub	sp, #20
   116f4:	af02      	add	r7, sp, #8
            TimeSyncSlot = 0;
        }    
    #endif

  // Check if transceiver receive any message.
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
   116f6:	4bd3      	ldr	r3, [pc, #844]	; (11a44 <P2PTasks+0x354>)
   116f8:	781b      	ldrb	r3, [r3, #0]
   116fa:	071b      	lsls	r3, r3, #28
   116fc:	0fdb      	lsrs	r3, r3, #31
   116fe:	b2db      	uxtb	r3, r3
   11700:	2b00      	cmp	r3, #0
   11702:	d000      	beq.n	11706 <P2PTasks+0x16>
   11704:	e286      	b.n	11c14 <P2PTasks+0x524>
   11706:	4bd0      	ldr	r3, [pc, #832]	; (11a48 <P2PTasks+0x358>)
   11708:	4798      	blx	r3
   1170a:	1e03      	subs	r3, r0, #0
   1170c:	d100      	bne.n	11710 <P2PTasks+0x20>
   1170e:	e281      	b.n	11c14 <P2PTasks+0x524>
    {
        rxMessage.flags.Val = 0;
   11710:	4bce      	ldr	r3, [pc, #824]	; (11a4c <P2PTasks+0x35c>)
   11712:	2200      	movs	r2, #0
   11714:	701a      	strb	r2, [r3, #0]
        //rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
        
            temp_bit = MACRxPacket.flags.bits.broadcast;
   11716:	4bce      	ldr	r3, [pc, #824]	; (11a50 <P2PTasks+0x360>)
   11718:	781b      	ldrb	r3, [r3, #0]
   1171a:	075b      	lsls	r3, r3, #29
   1171c:	0fdb      	lsrs	r3, r3, #31
   1171e:	b2db      	uxtb	r3, r3
   11720:	001a      	movs	r2, r3
   11722:	4bcc      	ldr	r3, [pc, #816]	; (11a54 <P2PTasks+0x364>)
   11724:	701a      	strb	r2, [r3, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
   11726:	4bcb      	ldr	r3, [pc, #812]	; (11a54 <P2PTasks+0x364>)
   11728:	781b      	ldrb	r3, [r3, #0]
   1172a:	1c1a      	adds	r2, r3, #0
   1172c:	2303      	movs	r3, #3
   1172e:	4013      	ands	r3, r2
   11730:	b2da      	uxtb	r2, r3
   11732:	4bc6      	ldr	r3, [pc, #792]	; (11a4c <P2PTasks+0x35c>)
   11734:	2103      	movs	r1, #3
   11736:	400a      	ands	r2, r1
   11738:	0010      	movs	r0, r2
   1173a:	781a      	ldrb	r2, [r3, #0]
   1173c:	2103      	movs	r1, #3
   1173e:	438a      	bics	r2, r1
   11740:	1c11      	adds	r1, r2, #0
   11742:	1c02      	adds	r2, r0, #0
   11744:	430a      	orrs	r2, r1
   11746:	701a      	strb	r2, [r3, #0]

        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
   11748:	4bc1      	ldr	r3, [pc, #772]	; (11a50 <P2PTasks+0x360>)
   1174a:	781b      	ldrb	r3, [r3, #0]
   1174c:	071b      	lsls	r3, r3, #28
   1174e:	0fdb      	lsrs	r3, r3, #31
   11750:	b2da      	uxtb	r2, r3
   11752:	4bbe      	ldr	r3, [pc, #760]	; (11a4c <P2PTasks+0x35c>)
   11754:	2101      	movs	r1, #1
   11756:	400a      	ands	r2, r1
   11758:	00d0      	lsls	r0, r2, #3
   1175a:	781a      	ldrb	r2, [r3, #0]
   1175c:	2108      	movs	r1, #8
   1175e:	438a      	bics	r2, r1
   11760:	1c11      	adds	r1, r2, #0
   11762:	1c02      	adds	r2, r0, #0
   11764:	430a      	orrs	r2, r1
   11766:	701a      	strb	r2, [r3, #0]
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
   11768:	4bb9      	ldr	r3, [pc, #740]	; (11a50 <P2PTasks+0x360>)
   1176a:	781b      	ldrb	r3, [r3, #0]
   1176c:	2203      	movs	r2, #3
   1176e:	4013      	ands	r3, r2
   11770:	b2db      	uxtb	r3, r3
   11772:	3b01      	subs	r3, #1
   11774:	425a      	negs	r2, r3
   11776:	4153      	adcs	r3, r2
   11778:	b2da      	uxtb	r2, r3
   1177a:	4bb4      	ldr	r3, [pc, #720]	; (11a4c <P2PTasks+0x35c>)
   1177c:	2101      	movs	r1, #1
   1177e:	400a      	ands	r2, r1
   11780:	0150      	lsls	r0, r2, #5
   11782:	781a      	ldrb	r2, [r3, #0]
   11784:	2120      	movs	r1, #32
   11786:	438a      	bics	r2, r1
   11788:	1c11      	adds	r1, r2, #0
   1178a:	1c02      	adds	r2, r0, #0
   1178c:	430a      	orrs	r2, r1
   1178e:	701a      	strb	r2, [r3, #0]
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
   11790:	4baf      	ldr	r3, [pc, #700]	; (11a50 <P2PTasks+0x360>)
   11792:	781b      	ldrb	r3, [r3, #0]
   11794:	061b      	lsls	r3, r3, #24
   11796:	0fdb      	lsrs	r3, r3, #31
   11798:	b2da      	uxtb	r2, r3
   1179a:	4bac      	ldr	r3, [pc, #688]	; (11a4c <P2PTasks+0x35c>)
   1179c:	2101      	movs	r1, #1
   1179e:	400a      	ands	r2, r1
   117a0:	0190      	lsls	r0, r2, #6
   117a2:	781a      	ldrb	r2, [r3, #0]
   117a4:	2140      	movs	r1, #64	; 0x40
   117a6:	438a      	bics	r2, r1
   117a8:	1c11      	adds	r1, r2, #0
   117aa:	1c02      	adds	r2, r0, #0
   117ac:	430a      	orrs	r2, r1
   117ae:	701a      	strb	r2, [r3, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
   117b0:	4ba7      	ldr	r3, [pc, #668]	; (11a50 <P2PTasks+0x360>)
   117b2:	781b      	ldrb	r3, [r3, #0]
   117b4:	227f      	movs	r2, #127	; 0x7f
   117b6:	4393      	bics	r3, r2
   117b8:	b2db      	uxtb	r3, r3
   117ba:	2b00      	cmp	r3, #0
   117bc:	d003      	beq.n	117c6 <P2PTasks+0xd6>
        {
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
   117be:	4ba4      	ldr	r3, [pc, #656]	; (11a50 <P2PTasks+0x360>)
   117c0:	685a      	ldr	r2, [r3, #4]
   117c2:	4ba2      	ldr	r3, [pc, #648]	; (11a4c <P2PTasks+0x35c>)
   117c4:	605a      	str	r2, [r3, #4]
        }
        #if defined(IEEE_802_15_4) && !defined(TARGET_SMALL)
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
   117c6:	4ba2      	ldr	r3, [pc, #648]	; (11a50 <P2PTasks+0x360>)
   117c8:	8a1a      	ldrh	r2, [r3, #16]
   117ca:	4ba0      	ldr	r3, [pc, #640]	; (11a4c <P2PTasks+0x35c>)
   117cc:	805a      	strh	r2, [r3, #2]
        #endif

        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
   117ce:	4ba0      	ldr	r3, [pc, #640]	; (11a50 <P2PTasks+0x360>)
   117d0:	7b1a      	ldrb	r2, [r3, #12]
   117d2:	4b9e      	ldr	r3, [pc, #632]	; (11a4c <P2PTasks+0x35c>)
   117d4:	731a      	strb	r2, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
   117d6:	4b9e      	ldr	r3, [pc, #632]	; (11a50 <P2PTasks+0x360>)
   117d8:	689a      	ldr	r2, [r3, #8]
   117da:	4b9c      	ldr	r3, [pc, #624]	; (11a4c <P2PTasks+0x35c>)
   117dc:	609a      	str	r2, [r3, #8]
               
        
        /************************/
      
        #ifndef TARGET_SMALL
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
   117de:	4b9c      	ldr	r3, [pc, #624]	; (11a50 <P2PTasks+0x360>)
   117e0:	7b9a      	ldrb	r2, [r3, #14]
   117e2:	4b9a      	ldr	r3, [pc, #616]	; (11a4c <P2PTasks+0x35c>)
   117e4:	739a      	strb	r2, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
   117e6:	4b9a      	ldr	r3, [pc, #616]	; (11a50 <P2PTasks+0x360>)
   117e8:	7b5a      	ldrb	r2, [r3, #13]
   117ea:	4b98      	ldr	r3, [pc, #608]	; (11a4c <P2PTasks+0x35c>)
   117ec:	735a      	strb	r2, [r3, #13]
        #endif

        if( rxMessage.flags.bits.command )
   117ee:	4b97      	ldr	r3, [pc, #604]	; (11a4c <P2PTasks+0x35c>)
   117f0:	781b      	ldrb	r3, [r3, #0]
   117f2:	2220      	movs	r2, #32
   117f4:	4013      	ands	r3, r2
   117f6:	b2db      	uxtb	r3, r3
   117f8:	2b00      	cmp	r3, #0
   117fa:	d100      	bne.n	117fe <P2PTasks+0x10e>
   117fc:	e1ec      	b.n	11bd8 <P2PTasks+0x4e8>
        {
            // if comes here, we know it is a command frame
            switch( rxMessage.Payload[0] )
   117fe:	4b93      	ldr	r3, [pc, #588]	; (11a4c <P2PTasks+0x35c>)
   11800:	689b      	ldr	r3, [r3, #8]
   11802:	781b      	ldrb	r3, [r3, #0]
   11804:	3b81      	subs	r3, #129	; 0x81
   11806:	2b16      	cmp	r3, #22
   11808:	d900      	bls.n	1180c <P2PTasks+0x11c>
   1180a:	e1de      	b.n	11bca <P2PTasks+0x4da>
   1180c:	009a      	lsls	r2, r3, #2
   1180e:	4b92      	ldr	r3, [pc, #584]	; (11a58 <P2PTasks+0x368>)
   11810:	18d3      	adds	r3, r2, r3
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	469f      	mov	pc, r3
                            #ifdef ENABLE_SLEEP
                                MiMAC_DiscardPacket();
                                break;
                            #else
                                
                                uint8_t status = STATUS_SUCCESS;
   11816:	1dbb      	adds	r3, r7, #6
   11818:	2200      	movs	r2, #0
   1181a:	701a      	strb	r2, [r3, #0]
                                
                                // if channel does not math, it may be a 
                                // sub-harmonics signal, ignore the request
                                if( currentChannel != rxMessage.Payload[1] )
   1181c:	4b8b      	ldr	r3, [pc, #556]	; (11a4c <P2PTasks+0x35c>)
   1181e:	689b      	ldr	r3, [r3, #8]
   11820:	3301      	adds	r3, #1
   11822:	781a      	ldrb	r2, [r3, #0]
   11824:	4b8d      	ldr	r3, [pc, #564]	; (11a5c <P2PTasks+0x36c>)
   11826:	781b      	ldrb	r3, [r3, #0]
   11828:	429a      	cmp	r2, r3
   1182a:	d002      	beq.n	11832 <P2PTasks+0x142>
                                {
                                    MiMAC_DiscardPacket();
   1182c:	4b8c      	ldr	r3, [pc, #560]	; (11a60 <P2PTasks+0x370>)
   1182e:	4798      	blx	r3
                                    break;
   11830:	e1d7      	b.n	11be2 <P2PTasks+0x4f2>
                                }
                                
                                // if new connection is not allowed, ignore 
                                // the request
                                if( ConnMode == DISABLE_ALL_CONN )
   11832:	4b8c      	ldr	r3, [pc, #560]	; (11a64 <P2PTasks+0x374>)
   11834:	781b      	ldrb	r3, [r3, #0]
   11836:	2b03      	cmp	r3, #3
   11838:	d102      	bne.n	11840 <P2PTasks+0x150>
                                { 
                                    MiMAC_DiscardPacket();
   1183a:	4b89      	ldr	r3, [pc, #548]	; (11a60 <P2PTasks+0x370>)
   1183c:	4798      	blx	r3
                                    break;
   1183e:	e1d0      	b.n	11be2 <P2PTasks+0x4f2>
                                }
                                
                                #if !defined(TARGET_SMALL) && defined(IEEE_802_15_4)
                                    // if PANID does not match, ignore the request
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
   11840:	4b82      	ldr	r3, [pc, #520]	; (11a4c <P2PTasks+0x35c>)
   11842:	885b      	ldrh	r3, [r3, #2]
   11844:	4a88      	ldr	r2, [pc, #544]	; (11a68 <P2PTasks+0x378>)
   11846:	4293      	cmp	r3, r2
   11848:	d00d      	beq.n	11866 <P2PTasks+0x176>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
   1184a:	4b80      	ldr	r3, [pc, #512]	; (11a4c <P2PTasks+0x35c>)
   1184c:	885a      	ldrh	r2, [r3, #2]
   1184e:	4b87      	ldr	r3, [pc, #540]	; (11a6c <P2PTasks+0x37c>)
   11850:	881b      	ldrh	r3, [r3, #0]
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
   11852:	429a      	cmp	r2, r3
   11854:	d007      	beq.n	11866 <P2PTasks+0x176>
                                        rxMessage.PayloadSize > 2)
   11856:	4b7d      	ldr	r3, [pc, #500]	; (11a4c <P2PTasks+0x35c>)
   11858:	7b1b      	ldrb	r3, [r3, #12]
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
   1185a:	2b02      	cmp	r3, #2
   1185c:	d903      	bls.n	11866 <P2PTasks+0x176>
                                    {
                                        status = STATUS_NOT_SAME_PAN;
   1185e:	1dbb      	adds	r3, r7, #6
   11860:	22f2      	movs	r2, #242	; 0xf2
   11862:	701a      	strb	r2, [r3, #0]
   11864:	e004      	b.n	11870 <P2PTasks+0x180>
                                    else
                                #endif
                                {
                                    // request accepted, try to add the requesting
                                    // device into P2P Connection Entry
                                    status = AddConnection();
   11866:	1dbc      	adds	r4, r7, #6
   11868:	4b81      	ldr	r3, [pc, #516]	; (11a70 <P2PTasks+0x380>)
   1186a:	4798      	blx	r3
   1186c:	0003      	movs	r3, r0
   1186e:	7023      	strb	r3, [r4, #0]

                                        }
                                    }
                                #endif
							
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
   11870:	4b7c      	ldr	r3, [pc, #496]	; (11a64 <P2PTasks+0x374>)
   11872:	781b      	ldrb	r3, [r3, #0]
   11874:	2b01      	cmp	r3, #1
   11876:	d10a      	bne.n	1188e <P2PTasks+0x19e>
   11878:	1dbb      	adds	r3, r7, #6
   1187a:	781b      	ldrb	r3, [r3, #0]
   1187c:	2b01      	cmp	r3, #1
   1187e:	d006      	beq.n	1188e <P2PTasks+0x19e>
   11880:	1dbb      	adds	r3, r7, #6
   11882:	781b      	ldrb	r3, [r3, #0]
   11884:	2b02      	cmp	r3, #2
   11886:	d002      	beq.n	1188e <P2PTasks+0x19e>
                                {
                                    status = STATUS_NOT_PERMITTED;
   11888:	1dbb      	adds	r3, r7, #6
   1188a:	22f3      	movs	r2, #243	; 0xf3
   1188c:	701a      	strb	r2, [r3, #0]
                                    status = STATUS_NOT_PERMITTED;
                                }
                                    
                                
                                // prepare the P2P_CONNECTION_RESPONSE command
                                MiApp_FlushTx();
   1188e:	4b79      	ldr	r3, [pc, #484]	; (11a74 <P2PTasks+0x384>)
   11890:	2200      	movs	r2, #0
   11892:	701a      	strb	r2, [r3, #0]
                                MiApp_WriteData(CMD_P2P_CONNECTION_RESPONSE);
   11894:	4b77      	ldr	r3, [pc, #476]	; (11a74 <P2PTasks+0x384>)
   11896:	781b      	ldrb	r3, [r3, #0]
   11898:	1c5a      	adds	r2, r3, #1
   1189a:	b2d1      	uxtb	r1, r2
   1189c:	4a75      	ldr	r2, [pc, #468]	; (11a74 <P2PTasks+0x384>)
   1189e:	7011      	strb	r1, [r2, #0]
   118a0:	001a      	movs	r2, r3
   118a2:	4b75      	ldr	r3, [pc, #468]	; (11a78 <P2PTasks+0x388>)
   118a4:	2191      	movs	r1, #145	; 0x91
   118a6:	5499      	strb	r1, [r3, r2]
                                MiApp_WriteData(status);
   118a8:	4b72      	ldr	r3, [pc, #456]	; (11a74 <P2PTasks+0x384>)
   118aa:	781b      	ldrb	r3, [r3, #0]
   118ac:	1c5a      	adds	r2, r3, #1
   118ae:	b2d1      	uxtb	r1, r2
   118b0:	4a70      	ldr	r2, [pc, #448]	; (11a74 <P2PTasks+0x384>)
   118b2:	7011      	strb	r1, [r2, #0]
   118b4:	0019      	movs	r1, r3
   118b6:	4b70      	ldr	r3, [pc, #448]	; (11a78 <P2PTasks+0x388>)
   118b8:	1dba      	adds	r2, r7, #6
   118ba:	7812      	ldrb	r2, [r2, #0]
   118bc:	545a      	strb	r2, [r3, r1]
                                MiApp_WriteData(MyindexinPC);
   118be:	4b6d      	ldr	r3, [pc, #436]	; (11a74 <P2PTasks+0x384>)
   118c0:	781b      	ldrb	r3, [r3, #0]
   118c2:	1c5a      	adds	r2, r3, #1
   118c4:	b2d1      	uxtb	r1, r2
   118c6:	4a6b      	ldr	r2, [pc, #428]	; (11a74 <P2PTasks+0x384>)
   118c8:	7011      	strb	r1, [r2, #0]
   118ca:	001a      	movs	r2, r3
   118cc:	4b6b      	ldr	r3, [pc, #428]	; (11a7c <P2PTasks+0x38c>)
   118ce:	7819      	ldrb	r1, [r3, #0]
   118d0:	4b69      	ldr	r3, [pc, #420]	; (11a78 <P2PTasks+0x388>)
   118d2:	5499      	strb	r1, [r3, r2]
								#if defined (R)
									MiApp_WriteData(0xA1); // I'm a Router
								#endif
								#if defined (PC)
									MiApp_WriteData(0xB1); // I'm the PC
   118d4:	4b67      	ldr	r3, [pc, #412]	; (11a74 <P2PTasks+0x384>)
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	1c5a      	adds	r2, r3, #1
   118da:	b2d1      	uxtb	r1, r2
   118dc:	4a65      	ldr	r2, [pc, #404]	; (11a74 <P2PTasks+0x384>)
   118de:	7011      	strb	r1, [r2, #0]
   118e0:	001a      	movs	r2, r3
   118e2:	4b65      	ldr	r3, [pc, #404]	; (11a78 <P2PTasks+0x388>)
   118e4:	21b1      	movs	r1, #177	; 0xb1
   118e6:	5499      	strb	r1, [r3, r2]
								#endif
                                if( status == STATUS_SUCCESS ||
   118e8:	1dbb      	adds	r3, r7, #6
   118ea:	781b      	ldrb	r3, [r3, #0]
   118ec:	2b00      	cmp	r3, #0
   118ee:	d003      	beq.n	118f8 <P2PTasks+0x208>
   118f0:	1dbb      	adds	r3, r7, #6
   118f2:	781b      	ldrb	r3, [r3, #0]
   118f4:	2b01      	cmp	r3, #1
   118f6:	d10a      	bne.n	1190e <P2PTasks+0x21e>
                                    status == STATUS_EXISTS )
                                {
                                    MiApp_WriteData(P2PCapacityInfo);
   118f8:	4b5e      	ldr	r3, [pc, #376]	; (11a74 <P2PTasks+0x384>)
   118fa:	781b      	ldrb	r3, [r3, #0]
   118fc:	1c5a      	adds	r2, r3, #1
   118fe:	b2d1      	uxtb	r1, r2
   11900:	4a5c      	ldr	r2, [pc, #368]	; (11a74 <P2PTasks+0x384>)
   11902:	7011      	strb	r1, [r2, #0]
   11904:	001a      	movs	r2, r3
   11906:	4b5e      	ldr	r3, [pc, #376]	; (11a80 <P2PTasks+0x390>)
   11908:	7819      	ldrb	r1, [r3, #0]
   1190a:	4b5b      	ldr	r3, [pc, #364]	; (11a78 <P2PTasks+0x388>)
   1190c:	5499      	strb	r1, [r3, r2]
                                            MiApp_WriteData(AdditionalNodeID[i]);
                                        }
                                    #endif
                                }
                                
                                MiMAC_DiscardPacket();
   1190e:	4b54      	ldr	r3, [pc, #336]	; (11a60 <P2PTasks+0x370>)
   11910:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                    #endif
                                #else
                                        
                                    #if defined(IEEE_802_15_4)
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
   11912:	4b4e      	ldr	r3, [pc, #312]	; (11a4c <P2PTasks+0x35c>)
   11914:	6858      	ldr	r0, [r3, #4]
   11916:	4b4d      	ldr	r3, [pc, #308]	; (11a4c <P2PTasks+0x35c>)
   11918:	781b      	ldrb	r3, [r3, #0]
   1191a:	071b      	lsls	r3, r3, #28
   1191c:	0fdb      	lsrs	r3, r3, #31
   1191e:	b2db      	uxtb	r3, r3
   11920:	1e5a      	subs	r2, r3, #1
   11922:	4193      	sbcs	r3, r2
   11924:	b2db      	uxtb	r3, r3
   11926:	4a49      	ldr	r2, [pc, #292]	; (11a4c <P2PTasks+0x35c>)
   11928:	8851      	ldrh	r1, [r2, #2]
   1192a:	9300      	str	r3, [sp, #0]
   1192c:	2301      	movs	r3, #1
   1192e:	0002      	movs	r2, r0
   11930:	2000      	movs	r0, #0
   11932:	4c54      	ldr	r4, [pc, #336]	; (11a84 <P2PTasks+0x394>)
   11934:	47a0      	blx	r4
                                  MiMAC_DiscardPacket();
                              }
							#endif
                              
                        }
                        break; 
   11936:	e154      	b.n	11be2 <P2PTasks+0x4f2>
				#endif
                    case CMD_P2P_ACTIVE_SCAN_REQUEST:
                        {
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
   11938:	4b4a      	ldr	r3, [pc, #296]	; (11a64 <P2PTasks+0x374>)
   1193a:	781b      	ldrb	r3, [r3, #0]
   1193c:	2b02      	cmp	r3, #2
   1193e:	d902      	bls.n	11946 <P2PTasks+0x256>
                            {
                                MiMAC_DiscardPacket();
   11940:	4b47      	ldr	r3, [pc, #284]	; (11a60 <P2PTasks+0x370>)
   11942:	4798      	blx	r3
                                break;
   11944:	e14d      	b.n	11be2 <P2PTasks+0x4f2>
                            }
                            if( currentChannel != rxMessage.Payload[1] )
   11946:	4b41      	ldr	r3, [pc, #260]	; (11a4c <P2PTasks+0x35c>)
   11948:	689b      	ldr	r3, [r3, #8]
   1194a:	3301      	adds	r3, #1
   1194c:	781a      	ldrb	r2, [r3, #0]
   1194e:	4b43      	ldr	r3, [pc, #268]	; (11a5c <P2PTasks+0x36c>)
   11950:	781b      	ldrb	r3, [r3, #0]
   11952:	429a      	cmp	r2, r3
   11954:	d002      	beq.n	1195c <P2PTasks+0x26c>
                            {
                                MiMAC_DiscardPacket();
   11956:	4b42      	ldr	r3, [pc, #264]	; (11a60 <P2PTasks+0x370>)
   11958:	4798      	blx	r3
                                break;
   1195a:	e142      	b.n	11be2 <P2PTasks+0x4f2>
                            }
                            
                            MiApp_FlushTx();
   1195c:	4b45      	ldr	r3, [pc, #276]	; (11a74 <P2PTasks+0x384>)
   1195e:	2200      	movs	r2, #0
   11960:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
   11962:	4b44      	ldr	r3, [pc, #272]	; (11a74 <P2PTasks+0x384>)
   11964:	781b      	ldrb	r3, [r3, #0]
   11966:	1c5a      	adds	r2, r3, #1
   11968:	b2d1      	uxtb	r1, r2
   1196a:	4a42      	ldr	r2, [pc, #264]	; (11a74 <P2PTasks+0x384>)
   1196c:	7011      	strb	r1, [r2, #0]
   1196e:	001a      	movs	r2, r3
   11970:	4b41      	ldr	r3, [pc, #260]	; (11a78 <P2PTasks+0x388>)
   11972:	2197      	movs	r1, #151	; 0x97
   11974:	5499      	strb	r1, [r3, r2]
                            MiApp_WriteData(P2PCapacityInfo);
   11976:	4b3f      	ldr	r3, [pc, #252]	; (11a74 <P2PTasks+0x384>)
   11978:	781b      	ldrb	r3, [r3, #0]
   1197a:	1c5a      	adds	r2, r3, #1
   1197c:	b2d1      	uxtb	r1, r2
   1197e:	4a3d      	ldr	r2, [pc, #244]	; (11a74 <P2PTasks+0x384>)
   11980:	7011      	strb	r1, [r2, #0]
   11982:	001a      	movs	r2, r3
   11984:	4b3e      	ldr	r3, [pc, #248]	; (11a80 <P2PTasks+0x390>)
   11986:	7819      	ldrb	r1, [r3, #0]
   11988:	4b3b      	ldr	r3, [pc, #236]	; (11a78 <P2PTasks+0x388>)
   1198a:	5499      	strb	r1, [r3, r2]
                                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                                {
                                    MiApp_WriteData(AdditionalNodeID[i]);
                                }
                            #endif
                            MiMAC_DiscardPacket();
   1198c:	4b34      	ldr	r3, [pc, #208]	; (11a60 <P2PTasks+0x370>)
   1198e:	4798      	blx	r3
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
   11990:	4b2e      	ldr	r3, [pc, #184]	; (11a4c <P2PTasks+0x35c>)
   11992:	6858      	ldr	r0, [r3, #4]
   11994:	4b2d      	ldr	r3, [pc, #180]	; (11a4c <P2PTasks+0x35c>)
   11996:	781b      	ldrb	r3, [r3, #0]
   11998:	071b      	lsls	r3, r3, #28
   1199a:	0fdb      	lsrs	r3, r3, #31
   1199c:	b2db      	uxtb	r3, r3
   1199e:	1e5a      	subs	r2, r3, #1
   119a0:	4193      	sbcs	r3, r2
   119a2:	b2db      	uxtb	r3, r3
   119a4:	4a29      	ldr	r2, [pc, #164]	; (11a4c <P2PTasks+0x35c>)
   119a6:	8851      	ldrh	r1, [r2, #2]
   119a8:	9300      	str	r3, [sp, #0]
   119aa:	2301      	movs	r3, #1
   119ac:	0002      	movs	r2, r0
   119ae:	2000      	movs	r0, #0
   119b0:	4c34      	ldr	r4, [pc, #208]	; (11a84 <P2PTasks+0x394>)
   119b2:	47a0      	blx	r4
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif
                        }
                        break;
   119b4:	e115      	b.n	11be2 <P2PTasks+0x4f2>
                    
                    
                    #ifndef TARGET_SMALL    
                    case CMD_P2P_CONNECTION_REMOVAL_REQUEST:
                        {         
                            MiApp_FlushTx();
   119b6:	4b2f      	ldr	r3, [pc, #188]	; (11a74 <P2PTasks+0x384>)
   119b8:	2200      	movs	r2, #0
   119ba:	701a      	strb	r2, [r3, #0]
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
   119bc:	4b2d      	ldr	r3, [pc, #180]	; (11a74 <P2PTasks+0x384>)
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	1c5a      	adds	r2, r3, #1
   119c2:	b2d1      	uxtb	r1, r2
   119c4:	4a2b      	ldr	r2, [pc, #172]	; (11a74 <P2PTasks+0x384>)
   119c6:	7011      	strb	r1, [r2, #0]
   119c8:	001a      	movs	r2, r3
   119ca:	4b2b      	ldr	r3, [pc, #172]	; (11a78 <P2PTasks+0x388>)
   119cc:	2192      	movs	r1, #146	; 0x92
   119ce:	5499      	strb	r1, [r3, r2]

                            for(i = 0; i < CONNECTION_SIZE; i++)
   119d0:	1dfb      	adds	r3, r7, #7
   119d2:	2200      	movs	r2, #0
   119d4:	701a      	strb	r2, [r3, #0]
   119d6:	e060      	b.n	11a9a <P2PTasks+0x3aa>
                            {
                                // if the record is valid
                                if( ConnectionTable[i].status.bits.isValid )
   119d8:	1dfb      	adds	r3, r7, #7
   119da:	781a      	ldrb	r2, [r3, #0]
   119dc:	492a      	ldr	r1, [pc, #168]	; (11a88 <P2PTasks+0x398>)
   119de:	2008      	movs	r0, #8
   119e0:	0013      	movs	r3, r2
   119e2:	009b      	lsls	r3, r3, #2
   119e4:	189b      	adds	r3, r3, r2
   119e6:	005b      	lsls	r3, r3, #1
   119e8:	18cb      	adds	r3, r1, r3
   119ea:	181b      	adds	r3, r3, r0
   119ec:	785b      	ldrb	r3, [r3, #1]
   119ee:	061b      	lsls	r3, r3, #24
   119f0:	0fdb      	lsrs	r3, r3, #31
   119f2:	b2db      	uxtb	r3, r3
   119f4:	2b00      	cmp	r3, #0
   119f6:	d04b      	beq.n	11a90 <P2PTasks+0x3a0>
                                {
                                    // if the record is the same as the requesting device
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   119f8:	4b14      	ldr	r3, [pc, #80]	; (11a4c <P2PTasks+0x35c>)
   119fa:	6858      	ldr	r0, [r3, #4]
   119fc:	1dfb      	adds	r3, r7, #7
   119fe:	781a      	ldrb	r2, [r3, #0]
   11a00:	0013      	movs	r3, r2
   11a02:	009b      	lsls	r3, r3, #2
   11a04:	189b      	adds	r3, r3, r2
   11a06:	005b      	lsls	r3, r3, #1
   11a08:	4a1f      	ldr	r2, [pc, #124]	; (11a88 <P2PTasks+0x398>)
   11a0a:	189b      	adds	r3, r3, r2
   11a0c:	0019      	movs	r1, r3
   11a0e:	4b1f      	ldr	r3, [pc, #124]	; (11a8c <P2PTasks+0x39c>)
   11a10:	4798      	blx	r3
   11a12:	1e03      	subs	r3, r0, #0
   11a14:	d03c      	beq.n	11a90 <P2PTasks+0x3a0>
                                    {
                                        // find the record. disable the record and
                                        // set status to be SUCCESS
                                        ConnectionTable[i].status.Val = 0;
   11a16:	1dfb      	adds	r3, r7, #7
   11a18:	781a      	ldrb	r2, [r3, #0]
   11a1a:	491b      	ldr	r1, [pc, #108]	; (11a88 <P2PTasks+0x398>)
   11a1c:	0013      	movs	r3, r2
   11a1e:	009b      	lsls	r3, r3, #2
   11a20:	189b      	adds	r3, r3, r2
   11a22:	005b      	lsls	r3, r3, #1
   11a24:	18cb      	adds	r3, r1, r3
   11a26:	3309      	adds	r3, #9
   11a28:	2200      	movs	r2, #0
   11a2a:	701a      	strb	r2, [r3, #0]
                                        #if defined(ENABLE_NETWORK_FREEZER)
                                            nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                        #endif
                                        MiApp_WriteData(STATUS_SUCCESS);
   11a2c:	4b11      	ldr	r3, [pc, #68]	; (11a74 <P2PTasks+0x384>)
   11a2e:	781b      	ldrb	r3, [r3, #0]
   11a30:	1c5a      	adds	r2, r3, #1
   11a32:	b2d1      	uxtb	r1, r2
   11a34:	4a0f      	ldr	r2, [pc, #60]	; (11a74 <P2PTasks+0x384>)
   11a36:	7011      	strb	r1, [r2, #0]
   11a38:	001a      	movs	r2, r3
   11a3a:	4b0f      	ldr	r3, [pc, #60]	; (11a78 <P2PTasks+0x388>)
   11a3c:	2100      	movs	r1, #0
   11a3e:	5499      	strb	r1, [r3, r2]

                                        break;
   11a40:	e02f      	b.n	11aa2 <P2PTasks+0x3b2>
   11a42:	46c0      	nop			; (mov r8, r8)
   11a44:	20002440 	.word	0x20002440
   11a48:	00010c19 	.word	0x00010c19
   11a4c:	20002474 	.word	0x20002474
   11a50:	200023d0 	.word	0x200023d0
   11a54:	200023ea 	.word	0x200023ea
   11a58:	0001e7a8 	.word	0x0001e7a8
   11a5c:	20001691 	.word	0x20001691
   11a60:	00010bed 	.word	0x00010bed
   11a64:	200005ad 	.word	0x200005ad
   11a68:	0000ffff 	.word	0x0000ffff
   11a6c:	200023e8 	.word	0x200023e8
   11a70:	000122e1 	.word	0x000122e1
   11a74:	20002441 	.word	0x20002441
   11a78:	20002444 	.word	0x20002444
   11a7c:	2000243c 	.word	0x2000243c
   11a80:	200023e4 	.word	0x200023e4
   11a84:	00011ef5 	.word	0x00011ef5
   11a88:	20002308 	.word	0x20002308
   11a8c:	0001202d 	.word	0x0001202d
                            for(i = 0; i < CONNECTION_SIZE; i++)
   11a90:	1dfb      	adds	r3, r7, #7
   11a92:	781a      	ldrb	r2, [r3, #0]
   11a94:	1dfb      	adds	r3, r7, #7
   11a96:	3201      	adds	r2, #1
   11a98:	701a      	strb	r2, [r3, #0]
   11a9a:	1dfb      	adds	r3, r7, #7
   11a9c:	781b      	ldrb	r3, [r3, #0]
   11a9e:	2b13      	cmp	r3, #19
   11aa0:	d99a      	bls.n	119d8 <P2PTasks+0x2e8>
                                    }
                                } 
                            }

                            MiMAC_DiscardPacket();
   11aa2:	4b5e      	ldr	r3, [pc, #376]	; (11c1c <P2PTasks+0x52c>)
   11aa4:	4798      	blx	r3

                            if( i == CONNECTION_SIZE ) 
   11aa6:	1dfb      	adds	r3, r7, #7
   11aa8:	781b      	ldrb	r3, [r3, #0]
   11aaa:	2b14      	cmp	r3, #20
   11aac:	d109      	bne.n	11ac2 <P2PTasks+0x3d2>
                            {
                                // not found, the requesting device is not my peer
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
   11aae:	4b5c      	ldr	r3, [pc, #368]	; (11c20 <P2PTasks+0x530>)
   11ab0:	781b      	ldrb	r3, [r3, #0]
   11ab2:	1c5a      	adds	r2, r3, #1
   11ab4:	b2d1      	uxtb	r1, r2
   11ab6:	4a5a      	ldr	r2, [pc, #360]	; (11c20 <P2PTasks+0x530>)
   11ab8:	7011      	strb	r1, [r2, #0]
   11aba:	001a      	movs	r2, r3
   11abc:	4b59      	ldr	r3, [pc, #356]	; (11c24 <P2PTasks+0x534>)
   11abe:	21f0      	movs	r1, #240	; 0xf0
   11ac0:	5499      	strb	r1, [r3, r2]
                                #else
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #else
                                #if defined(IEEE_802_15_4)
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
   11ac2:	4b59      	ldr	r3, [pc, #356]	; (11c28 <P2PTasks+0x538>)
   11ac4:	6858      	ldr	r0, [r3, #4]
   11ac6:	4b58      	ldr	r3, [pc, #352]	; (11c28 <P2PTasks+0x538>)
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	071b      	lsls	r3, r3, #28
   11acc:	0fdb      	lsrs	r3, r3, #31
   11ace:	b2db      	uxtb	r3, r3
   11ad0:	1e5a      	subs	r2, r3, #1
   11ad2:	4193      	sbcs	r3, r2
   11ad4:	b2db      	uxtb	r3, r3
   11ad6:	4a54      	ldr	r2, [pc, #336]	; (11c28 <P2PTasks+0x538>)
   11ad8:	8851      	ldrh	r1, [r2, #2]
   11ada:	9300      	str	r3, [sp, #0]
   11adc:	2301      	movs	r3, #1
   11ade:	0002      	movs	r2, r0
   11ae0:	2000      	movs	r0, #0
   11ae2:	4c52      	ldr	r4, [pc, #328]	; (11c2c <P2PTasks+0x53c>)
   11ae4:	47a0      	blx	r4
                                    SendPacket(false, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
                                #endif
                            #endif

                        }
                            break;
   11ae6:	e07c      	b.n	11be2 <P2PTasks+0x4f2>
                    #endif
                    
                    case CMD_P2P_CONNECTION_RESPONSE:
                        {
                            switch( rxMessage.Payload[1] )
   11ae8:	4b4f      	ldr	r3, [pc, #316]	; (11c28 <P2PTasks+0x538>)
   11aea:	689b      	ldr	r3, [r3, #8]
   11aec:	3301      	adds	r3, #1
   11aee:	781b      	ldrb	r3, [r3, #0]
   11af0:	3300      	adds	r3, #0
   11af2:	2b01      	cmp	r3, #1
   11af4:	d815      	bhi.n	11b22 <P2PTasks+0x432>
                            {              
                                case STATUS_SUCCESS:
                                case STATUS_EXISTS:
                                    #if defined(IEEE_802_15_4)
                                        if( myPANID.Val == 0xFFFF )
   11af6:	4b4e      	ldr	r3, [pc, #312]	; (11c30 <P2PTasks+0x540>)
   11af8:	881b      	ldrh	r3, [r3, #0]
   11afa:	4a4e      	ldr	r2, [pc, #312]	; (11c34 <P2PTasks+0x544>)
   11afc:	4293      	cmp	r3, r2
   11afe:	d10d      	bne.n	11b1c <P2PTasks+0x42c>
                                        {
                                            myPANID.Val = rxMessage.SourcePANID.Val;
   11b00:	4b49      	ldr	r3, [pc, #292]	; (11c28 <P2PTasks+0x538>)
   11b02:	885a      	ldrh	r2, [r3, #2]
   11b04:	4b4a      	ldr	r3, [pc, #296]	; (11c30 <P2PTasks+0x540>)
   11b06:	801a      	strh	r2, [r3, #0]
                                            {
                                                uint16_t tmp = 0xFFFF;
   11b08:	1d3b      	adds	r3, r7, #4
   11b0a:	2201      	movs	r2, #1
   11b0c:	4252      	negs	r2, r2
   11b0e:	801a      	strh	r2, [r3, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   11b10:	4a47      	ldr	r2, [pc, #284]	; (11c30 <P2PTasks+0x540>)
   11b12:	1d3b      	adds	r3, r7, #4
   11b14:	0011      	movs	r1, r2
   11b16:	0018      	movs	r0, r3
   11b18:	4b47      	ldr	r3, [pc, #284]	; (11c38 <P2PTasks+0x548>)
   11b1a:	4798      	blx	r3
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutMyPANID(myPANID.v);
                                            #endif
                                        }
                                    #endif
                                    AddConnection();
   11b1c:	4b47      	ldr	r3, [pc, #284]	; (11c3c <P2PTasks+0x54c>)
   11b1e:	4798      	blx	r3
                                    
                                    #if defined(ENABLE_NETWORK_FREEZER)
                                        P2PStatus.bits.SaveConnection = 1;
                                        nvmDelayTick.Val = MiWi_TickGet();
                                    #endif
                                    break;
   11b20:	e000      	b.n	11b24 <P2PTasks+0x434>
                                default:
                                    break;
   11b22:	46c0      	nop			; (mov r8, r8)
                            }                        
                        }
                        MiMAC_DiscardPacket();
   11b24:	4b3d      	ldr	r3, [pc, #244]	; (11c1c <P2PTasks+0x52c>)
   11b26:	4798      	blx	r3
                        break; 
   11b28:	e05b      	b.n	11be2 <P2PTasks+0x4f2>
                    
                    
                    case CMD_P2P_ACTIVE_SCAN_RESPONSE:
                        {
                            if( P2PStatus.bits.Resync )
   11b2a:	4b45      	ldr	r3, [pc, #276]	; (11c40 <P2PTasks+0x550>)
   11b2c:	781b      	ldrb	r3, [r3, #0]
   11b2e:	069b      	lsls	r3, r3, #26
   11b30:	0fdb      	lsrs	r3, r3, #31
   11b32:	b2db      	uxtb	r3, r3
   11b34:	2b00      	cmp	r3, #0
   11b36:	d004      	beq.n	11b42 <P2PTasks+0x452>
                            {
                                P2PStatus.bits.Resync = 0;   
   11b38:	4a41      	ldr	r2, [pc, #260]	; (11c40 <P2PTasks+0x550>)
   11b3a:	7813      	ldrb	r3, [r2, #0]
   11b3c:	2120      	movs	r1, #32
   11b3e:	438b      	bics	r3, r1
   11b40:	7013      	strb	r3, [r2, #0]
                                        ActiveScanResultIndex++;
                                    }
                                }
                            #endif

                            MiMAC_DiscardPacket(); 
   11b42:	4b36      	ldr	r3, [pc, #216]	; (11c1c <P2PTasks+0x52c>)
   11b44:	4798      	blx	r3
                        }
                        break;                
   11b46:	e04c      	b.n	11be2 <P2PTasks+0x4f2>
                    
                    #ifndef TARGET_SMALL
                    case CMD_P2P_CONNECTION_REMOVAL_RESPONSE:
                        {
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
   11b48:	4b37      	ldr	r3, [pc, #220]	; (11c28 <P2PTasks+0x538>)
   11b4a:	689b      	ldr	r3, [r3, #8]
   11b4c:	3301      	adds	r3, #1
   11b4e:	781b      	ldrb	r3, [r3, #0]
   11b50:	2b00      	cmp	r3, #0
   11b52:	d137      	bne.n	11bc4 <P2PTasks+0x4d4>
                            {
                                for(i = 0; i < CONNECTION_SIZE; i++)
   11b54:	1dfb      	adds	r3, r7, #7
   11b56:	2200      	movs	r2, #0
   11b58:	701a      	strb	r2, [r3, #0]
   11b5a:	e02f      	b.n	11bbc <P2PTasks+0x4cc>
                                {
                                    // if the record is valid
                                    if( ConnectionTable[i].status.bits.isValid )
   11b5c:	1dfb      	adds	r3, r7, #7
   11b5e:	781a      	ldrb	r2, [r3, #0]
   11b60:	4938      	ldr	r1, [pc, #224]	; (11c44 <P2PTasks+0x554>)
   11b62:	2008      	movs	r0, #8
   11b64:	0013      	movs	r3, r2
   11b66:	009b      	lsls	r3, r3, #2
   11b68:	189b      	adds	r3, r3, r2
   11b6a:	005b      	lsls	r3, r3, #1
   11b6c:	18cb      	adds	r3, r1, r3
   11b6e:	181b      	adds	r3, r3, r0
   11b70:	785b      	ldrb	r3, [r3, #1]
   11b72:	061b      	lsls	r3, r3, #24
   11b74:	0fdb      	lsrs	r3, r3, #31
   11b76:	b2db      	uxtb	r3, r3
   11b78:	2b00      	cmp	r3, #0
   11b7a:	d01a      	beq.n	11bb2 <P2PTasks+0x4c2>
                                    {
                                        // if the record address is the same as the requesting device
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   11b7c:	4b2a      	ldr	r3, [pc, #168]	; (11c28 <P2PTasks+0x538>)
   11b7e:	6858      	ldr	r0, [r3, #4]
   11b80:	1dfb      	adds	r3, r7, #7
   11b82:	781a      	ldrb	r2, [r3, #0]
   11b84:	0013      	movs	r3, r2
   11b86:	009b      	lsls	r3, r3, #2
   11b88:	189b      	adds	r3, r3, r2
   11b8a:	005b      	lsls	r3, r3, #1
   11b8c:	4a2d      	ldr	r2, [pc, #180]	; (11c44 <P2PTasks+0x554>)
   11b8e:	189b      	adds	r3, r3, r2
   11b90:	0019      	movs	r1, r3
   11b92:	4b2d      	ldr	r3, [pc, #180]	; (11c48 <P2PTasks+0x558>)
   11b94:	4798      	blx	r3
   11b96:	1e03      	subs	r3, r0, #0
   11b98:	d00b      	beq.n	11bb2 <P2PTasks+0x4c2>
                                        {
                                            // invalidate the record
                                            ConnectionTable[i].status.Val = 0;
   11b9a:	1dfb      	adds	r3, r7, #7
   11b9c:	781a      	ldrb	r2, [r3, #0]
   11b9e:	4929      	ldr	r1, [pc, #164]	; (11c44 <P2PTasks+0x554>)
   11ba0:	0013      	movs	r3, r2
   11ba2:	009b      	lsls	r3, r3, #2
   11ba4:	189b      	adds	r3, r3, r2
   11ba6:	005b      	lsls	r3, r3, #1
   11ba8:	18cb      	adds	r3, r1, r3
   11baa:	3309      	adds	r3, #9
   11bac:	2200      	movs	r2, #0
   11bae:	701a      	strb	r2, [r3, #0]
                                            #if defined(ENABLE_NETWORK_FREEZER)
                                                nvmPutConnectionTableIndex(&(ConnectionTable[i]), i);
                                            #endif
                                            break;
   11bb0:	e008      	b.n	11bc4 <P2PTasks+0x4d4>
                                for(i = 0; i < CONNECTION_SIZE; i++)
   11bb2:	1dfb      	adds	r3, r7, #7
   11bb4:	781a      	ldrb	r2, [r3, #0]
   11bb6:	1dfb      	adds	r3, r7, #7
   11bb8:	3201      	adds	r2, #1
   11bba:	701a      	strb	r2, [r3, #0]
   11bbc:	1dfb      	adds	r3, r7, #7
   11bbe:	781b      	ldrb	r3, [r3, #0]
   11bc0:	2b13      	cmp	r3, #19
   11bc2:	d9cb      	bls.n	11b5c <P2PTasks+0x46c>
                                        }
                                    } 
                                }
                            }
                        }
                        MiMAC_DiscardPacket();
   11bc4:	4b15      	ldr	r3, [pc, #84]	; (11c1c <P2PTasks+0x52c>)
   11bc6:	4798      	blx	r3
                        break;
   11bc8:	e00b      	b.n	11be2 <P2PTasks+0x4f2>
                #endif
                
                        
                default:
                    // let upper application layer to handle undefined command frame
                    P2PStatus.bits.RxHasUserData = 1;
   11bca:	4a1d      	ldr	r2, [pc, #116]	; (11c40 <P2PTasks+0x550>)
   11bcc:	7813      	ldrb	r3, [r2, #0]
   11bce:	2108      	movs	r1, #8
   11bd0:	430b      	orrs	r3, r1
   11bd2:	7013      	strb	r3, [r2, #0]
                    break;
   11bd4:	46c0      	nop			; (mov r8, r8)
   11bd6:	e004      	b.n	11be2 <P2PTasks+0x4f2>
            }
        }
        else
        {
            P2PStatus.bits.RxHasUserData = 1;
   11bd8:	4a19      	ldr	r2, [pc, #100]	; (11c40 <P2PTasks+0x550>)
   11bda:	7813      	ldrb	r3, [r2, #0]
   11bdc:	2108      	movs	r1, #8
   11bde:	430b      	orrs	r3, r1
   11be0:	7013      	strb	r3, [r2, #0]
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
            {
                P2PStatus.bits.DataRequesting = 0;
            }
        #endif       
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
   11be2:	4b11      	ldr	r3, [pc, #68]	; (11c28 <P2PTasks+0x538>)
   11be4:	7b1b      	ldrb	r3, [r3, #12]
   11be6:	2b00      	cmp	r3, #0
   11be8:	d00d      	beq.n	11c06 <P2PTasks+0x516>
   11bea:	4b15      	ldr	r3, [pc, #84]	; (11c40 <P2PTasks+0x550>)
   11bec:	781b      	ldrb	r3, [r3, #0]
   11bee:	06db      	lsls	r3, r3, #27
   11bf0:	0fdb      	lsrs	r3, r3, #31
   11bf2:	b2db      	uxtb	r3, r3
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	d106      	bne.n	11c06 <P2PTasks+0x516>
   11bf8:	4b11      	ldr	r3, [pc, #68]	; (11c40 <P2PTasks+0x550>)
   11bfa:	781b      	ldrb	r3, [r3, #0]
   11bfc:	069b      	lsls	r3, r3, #26
   11bfe:	0fdb      	lsrs	r3, r3, #31
   11c00:	b2db      	uxtb	r3, r3
   11c02:	2b00      	cmp	r3, #0
   11c04:	d006      	beq.n	11c14 <P2PTasks+0x524>
        {
            P2PStatus.bits.RxHasUserData = 0;
   11c06:	4a0e      	ldr	r2, [pc, #56]	; (11c40 <P2PTasks+0x550>)
   11c08:	7813      	ldrb	r3, [r2, #0]
   11c0a:	2108      	movs	r1, #8
   11c0c:	438b      	bics	r3, r1
   11c0e:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
   11c10:	4b02      	ldr	r3, [pc, #8]	; (11c1c <P2PTasks+0x52c>)
   11c12:	4798      	blx	r3
        }   
            
    }   
}
   11c14:	46c0      	nop			; (mov r8, r8)
   11c16:	46bd      	mov	sp, r7
   11c18:	b003      	add	sp, #12
   11c1a:	bd90      	pop	{r4, r7, pc}
   11c1c:	00010bed 	.word	0x00010bed
   11c20:	20002441 	.word	0x20002441
   11c24:	20002444 	.word	0x20002444
   11c28:	20002474 	.word	0x20002474
   11c2c:	00011ef5 	.word	0x00011ef5
   11c30:	200023e8 	.word	0x200023e8
   11c34:	0000ffff 	.word	0x0000ffff
   11c38:	0000fa2d 	.word	0x0000fa2d
   11c3c:	000122e1 	.word	0x000122e1
   11c40:	20002440 	.word	0x20002440
   11c44:	20002308 	.word	0x20002308
   11c48:	0001202d 	.word	0x0001202d

00011c4c <MiApp_ProtocolInit>:

uint32_t addr1 =  0x0080A00C;

bool MiApp_ProtocolInit(bool bNetworkFreezer)
{
   11c4c:	b580      	push	{r7, lr}
   11c4e:	b08c      	sub	sp, #48	; 0x30
   11c50:	af00      	add	r7, sp, #0
   11c52:	0002      	movs	r2, r0
   11c54:	1dfb      	adds	r3, r7, #7
   11c56:	701a      	strb	r2, [r3, #0]
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
   11c58:	4b96      	ldr	r3, [pc, #600]	; (11eb4 <MiApp_ProtocolInit+0x268>)
   11c5a:	2200      	movs	r2, #0
   11c5c:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (uint32_t *)0x0080A00C;
   11c5e:	4b96      	ldr	r3, [pc, #600]	; (11eb8 <MiApp_ProtocolInit+0x26c>)
   11c60:	62bb      	str	r3, [r7, #40]	; 0x28
	val_1 = *ptr1;
   11c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11c64:	681b      	ldr	r3, [r3, #0]
   11c66:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *ptr = (uint32_t *)0x0080A040;
   11c68:	4b94      	ldr	r3, [pc, #592]	; (11ebc <MiApp_ProtocolInit+0x270>)
   11c6a:	623b      	str	r3, [r7, #32]
	val_2 = *ptr;
   11c6c:	6a3b      	ldr	r3, [r7, #32]
   11c6e:	681b      	ldr	r3, [r3, #0]
   11c70:	61fb      	str	r3, [r7, #28]
	ptr++;
   11c72:	6a3b      	ldr	r3, [r7, #32]
   11c74:	3304      	adds	r3, #4
   11c76:	623b      	str	r3, [r7, #32]
	val_3 = *ptr;
   11c78:	6a3b      	ldr	r3, [r7, #32]
   11c7a:	681b      	ldr	r3, [r3, #0]
   11c7c:	61bb      	str	r3, [r7, #24]
	ptr++;
   11c7e:	6a3b      	ldr	r3, [r7, #32]
   11c80:	3304      	adds	r3, #4
   11c82:	623b      	str	r3, [r7, #32]
	val_4 = *ptr;
   11c84:	6a3b      	ldr	r3, [r7, #32]
   11c86:	681b      	ldr	r3, [r3, #0]
   11c88:	617b      	str	r3, [r7, #20]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
   11c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c8c:	b2da      	uxtb	r2, r3
   11c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c90:	0a1b      	lsrs	r3, r3, #8
   11c92:	b2db      	uxtb	r3, r3
   11c94:	18d3      	adds	r3, r2, r3
   11c96:	b2da      	uxtb	r2, r3
   11c98:	4b89      	ldr	r3, [pc, #548]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11c9a:	701a      	strb	r2, [r3, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
   11c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c9e:	0c1b      	lsrs	r3, r3, #16
   11ca0:	b2da      	uxtb	r2, r3
   11ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ca4:	0e1b      	lsrs	r3, r3, #24
   11ca6:	b2db      	uxtb	r3, r3
   11ca8:	18d3      	adds	r3, r2, r3
   11caa:	b2da      	uxtb	r2, r3
   11cac:	4b84      	ldr	r3, [pc, #528]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11cae:	705a      	strb	r2, [r3, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
   11cb0:	69fb      	ldr	r3, [r7, #28]
   11cb2:	b2da      	uxtb	r2, r3
   11cb4:	69fb      	ldr	r3, [r7, #28]
   11cb6:	0a1b      	lsrs	r3, r3, #8
   11cb8:	b2db      	uxtb	r3, r3
   11cba:	18d3      	adds	r3, r2, r3
   11cbc:	b2da      	uxtb	r2, r3
   11cbe:	4b80      	ldr	r3, [pc, #512]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11cc0:	709a      	strb	r2, [r3, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
   11cc2:	69fb      	ldr	r3, [r7, #28]
   11cc4:	0c1b      	lsrs	r3, r3, #16
   11cc6:	b2da      	uxtb	r2, r3
   11cc8:	69fb      	ldr	r3, [r7, #28]
   11cca:	0e1b      	lsrs	r3, r3, #24
   11ccc:	b2db      	uxtb	r3, r3
   11cce:	18d3      	adds	r3, r2, r3
   11cd0:	b2da      	uxtb	r2, r3
   11cd2:	4b7b      	ldr	r3, [pc, #492]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11cd4:	70da      	strb	r2, [r3, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
   11cd6:	69bb      	ldr	r3, [r7, #24]
   11cd8:	b2da      	uxtb	r2, r3
   11cda:	69bb      	ldr	r3, [r7, #24]
   11cdc:	0a1b      	lsrs	r3, r3, #8
   11cde:	b2db      	uxtb	r3, r3
   11ce0:	18d3      	adds	r3, r2, r3
   11ce2:	b2da      	uxtb	r2, r3
   11ce4:	4b76      	ldr	r3, [pc, #472]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11ce6:	711a      	strb	r2, [r3, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
   11ce8:	69bb      	ldr	r3, [r7, #24]
   11cea:	0c1b      	lsrs	r3, r3, #16
   11cec:	b2da      	uxtb	r2, r3
   11cee:	69bb      	ldr	r3, [r7, #24]
   11cf0:	0e1b      	lsrs	r3, r3, #24
   11cf2:	b2db      	uxtb	r3, r3
   11cf4:	18d3      	adds	r3, r2, r3
   11cf6:	b2da      	uxtb	r2, r3
   11cf8:	4b71      	ldr	r3, [pc, #452]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11cfa:	715a      	strb	r2, [r3, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
   11cfc:	697b      	ldr	r3, [r7, #20]
   11cfe:	b2da      	uxtb	r2, r3
   11d00:	697b      	ldr	r3, [r7, #20]
   11d02:	0a1b      	lsrs	r3, r3, #8
   11d04:	b2db      	uxtb	r3, r3
   11d06:	18d3      	adds	r3, r2, r3
   11d08:	b2da      	uxtb	r2, r3
   11d0a:	4b6d      	ldr	r3, [pc, #436]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11d0c:	719a      	strb	r2, [r3, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
   11d0e:	697b      	ldr	r3, [r7, #20]
   11d10:	0c1b      	lsrs	r3, r3, #16
   11d12:	b2da      	uxtb	r2, r3
   11d14:	697b      	ldr	r3, [r7, #20]
   11d16:	0e1b      	lsrs	r3, r3, #24
   11d18:	b2db      	uxtb	r3, r3
   11d1a:	18d3      	adds	r3, r2, r3
   11d1c:	b2da      	uxtb	r2, r3
   11d1e:	4b68      	ldr	r3, [pc, #416]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11d20:	71da      	strb	r2, [r3, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
   11d22:	1dfb      	adds	r3, r7, #7
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	2201      	movs	r2, #1
   11d28:	4053      	eors	r3, r2
   11d2a:	b2db      	uxtb	r3, r3
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d03e      	beq.n	11dae <MiApp_ProtocolInit+0x162>
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
   11d30:	232f      	movs	r3, #47	; 0x2f
   11d32:	18fb      	adds	r3, r7, r3
   11d34:	2200      	movs	r2, #0
   11d36:	701a      	strb	r2, [r3, #0]
   11d38:	e034      	b.n	11da4 <MiApp_ProtocolInit+0x158>
		{
			ConnectionTable[i].status.Val = 0;
   11d3a:	232f      	movs	r3, #47	; 0x2f
   11d3c:	18fb      	adds	r3, r7, r3
   11d3e:	781a      	ldrb	r2, [r3, #0]
   11d40:	4960      	ldr	r1, [pc, #384]	; (11ec4 <MiApp_ProtocolInit+0x278>)
   11d42:	0013      	movs	r3, r2
   11d44:	009b      	lsls	r3, r3, #2
   11d46:	189b      	adds	r3, r3, r2
   11d48:	005b      	lsls	r3, r3, #1
   11d4a:	18cb      	adds	r3, r1, r3
   11d4c:	3309      	adds	r3, #9
   11d4e:	2200      	movs	r2, #0
   11d50:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[0] = 0x00;
   11d52:	232f      	movs	r3, #47	; 0x2f
   11d54:	18fb      	adds	r3, r7, r3
   11d56:	781a      	ldrb	r2, [r3, #0]
   11d58:	495a      	ldr	r1, [pc, #360]	; (11ec4 <MiApp_ProtocolInit+0x278>)
   11d5a:	0013      	movs	r3, r2
   11d5c:	009b      	lsls	r3, r3, #2
   11d5e:	189b      	adds	r3, r3, r2
   11d60:	005b      	lsls	r3, r3, #1
   11d62:	2200      	movs	r2, #0
   11d64:	545a      	strb	r2, [r3, r1]
			ConnectionTable[i].Address[1] = 0x00;
   11d66:	232f      	movs	r3, #47	; 0x2f
   11d68:	18fb      	adds	r3, r7, r3
   11d6a:	781a      	ldrb	r2, [r3, #0]
   11d6c:	4955      	ldr	r1, [pc, #340]	; (11ec4 <MiApp_ProtocolInit+0x278>)
   11d6e:	0013      	movs	r3, r2
   11d70:	009b      	lsls	r3, r3, #2
   11d72:	189b      	adds	r3, r3, r2
   11d74:	005b      	lsls	r3, r3, #1
   11d76:	18cb      	adds	r3, r1, r3
   11d78:	3301      	adds	r3, #1
   11d7a:	2200      	movs	r2, #0
   11d7c:	701a      	strb	r2, [r3, #0]
			ConnectionTable[i].Address[2] = 0x00;
   11d7e:	232f      	movs	r3, #47	; 0x2f
   11d80:	18fb      	adds	r3, r7, r3
   11d82:	781a      	ldrb	r2, [r3, #0]
   11d84:	494f      	ldr	r1, [pc, #316]	; (11ec4 <MiApp_ProtocolInit+0x278>)
   11d86:	0013      	movs	r3, r2
   11d88:	009b      	lsls	r3, r3, #2
   11d8a:	189b      	adds	r3, r3, r2
   11d8c:	005b      	lsls	r3, r3, #1
   11d8e:	18cb      	adds	r3, r1, r3
   11d90:	3302      	adds	r3, #2
   11d92:	2200      	movs	r2, #0
   11d94:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < CONNECTION_SIZE; i++)
   11d96:	232f      	movs	r3, #47	; 0x2f
   11d98:	18fb      	adds	r3, r7, r3
   11d9a:	781a      	ldrb	r2, [r3, #0]
   11d9c:	232f      	movs	r3, #47	; 0x2f
   11d9e:	18fb      	adds	r3, r7, r3
   11da0:	3201      	adds	r2, #1
   11da2:	701a      	strb	r2, [r3, #0]
   11da4:	232f      	movs	r3, #47	; 0x2f
   11da6:	18fb      	adds	r3, r7, r3
   11da8:	781b      	ldrb	r3, [r3, #0]
   11daa:	2b13      	cmp	r3, #19
   11dac:	d9c5      	bls.n	11d3a <MiApp_ProtocolInit+0xee>
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
   11dae:	4b46      	ldr	r3, [pc, #280]	; (11ec8 <MiApp_ProtocolInit+0x27c>)
   11db0:	2200      	movs	r2, #0
   11db2:	701a      	strb	r2, [r3, #0]
		indirectMessages[i].flags.Val = 0;
	}
	#endif
	
	#if defined(ENABLE_SECURITY)
	for(i = 0; i < CONNECTION_SIZE; i++)
   11db4:	232f      	movs	r3, #47	; 0x2f
   11db6:	18fb      	adds	r3, r7, r3
   11db8:	2200      	movs	r2, #0
   11dba:	701a      	strb	r2, [r3, #0]
   11dbc:	e00d      	b.n	11dda <MiApp_ProtocolInit+0x18e>
	{
		IncomingFrameCounter[i].Val = 0;
   11dbe:	232f      	movs	r3, #47	; 0x2f
   11dc0:	18fb      	adds	r3, r7, r3
   11dc2:	781a      	ldrb	r2, [r3, #0]
   11dc4:	4b41      	ldr	r3, [pc, #260]	; (11ecc <MiApp_ProtocolInit+0x280>)
   11dc6:	0092      	lsls	r2, r2, #2
   11dc8:	2100      	movs	r1, #0
   11dca:	50d1      	str	r1, [r2, r3]
	for(i = 0; i < CONNECTION_SIZE; i++)
   11dcc:	232f      	movs	r3, #47	; 0x2f
   11dce:	18fb      	adds	r3, r7, r3
   11dd0:	781a      	ldrb	r2, [r3, #0]
   11dd2:	232f      	movs	r3, #47	; 0x2f
   11dd4:	18fb      	adds	r3, r7, r3
   11dd6:	3201      	adds	r2, #1
   11dd8:	701a      	strb	r2, [r3, #0]
   11dda:	232f      	movs	r3, #47	; 0x2f
   11ddc:	18fb      	adds	r3, r7, r3
   11dde:	781b      	ldrb	r3, [r3, #0]
   11de0:	2b13      	cmp	r3, #19
   11de2:	d9ec      	bls.n	11dbe <MiApp_ProtocolInit+0x172>
	}
	#endif
	

	#if defined(IEEE_802_15_4)
		myPANID.Val = MY_PAN_ID;
   11de4:	4b3a      	ldr	r3, [pc, #232]	; (11ed0 <MiApp_ProtocolInit+0x284>)
   11de6:	4a3b      	ldr	r2, [pc, #236]	; (11ed4 <MiApp_ProtocolInit+0x288>)
   11de8:	801a      	strh	r2, [r3, #0]
	#endif

	
	initValue.PAddress = myLongAddress;
   11dea:	230c      	movs	r3, #12
   11dec:	18fb      	adds	r3, r7, r3
   11dee:	4a34      	ldr	r2, [pc, #208]	; (11ec0 <MiApp_ProtocolInit+0x274>)
   11df0:	605a      	str	r2, [r3, #4]
	initValue.actionFlags.bits.CCAEnable = 1;
   11df2:	230c      	movs	r3, #12
   11df4:	18fb      	adds	r3, r7, r3
   11df6:	781a      	ldrb	r2, [r3, #0]
   11df8:	2102      	movs	r1, #2
   11dfa:	430a      	orrs	r2, r1
   11dfc:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
   11dfe:	230c      	movs	r3, #12
   11e00:	18fb      	adds	r3, r7, r3
   11e02:	781a      	ldrb	r2, [r3, #0]
   11e04:	2178      	movs	r1, #120	; 0x78
   11e06:	438a      	bics	r2, r1
   11e08:	1c11      	adds	r1, r2, #0
   11e0a:	2240      	movs	r2, #64	; 0x40
   11e0c:	430a      	orrs	r2, r1
   11e0e:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
   11e10:	230c      	movs	r3, #12
   11e12:	18fb      	adds	r3, r7, r3
   11e14:	1dfa      	adds	r2, r7, #7
   11e16:	7812      	ldrb	r2, [r2, #0]
   11e18:	2101      	movs	r1, #1
   11e1a:	400a      	ands	r2, r1
   11e1c:	0090      	lsls	r0, r2, #2
   11e1e:	781a      	ldrb	r2, [r3, #0]
   11e20:	2104      	movs	r1, #4
   11e22:	438a      	bics	r2, r1
   11e24:	1c11      	adds	r1, r2, #0
   11e26:	1c02      	adds	r2, r0, #0
   11e28:	430a      	orrs	r2, r1
   11e2a:	701a      	strb	r2, [r3, #0]
	initValue.actionFlags.bits.RepeaterMode = 0;
   11e2c:	230c      	movs	r3, #12
   11e2e:	18fb      	adds	r3, r7, r3
   11e30:	781a      	ldrb	r2, [r3, #0]
   11e32:	2101      	movs	r1, #1
   11e34:	438a      	bics	r2, r1
   11e36:	701a      	strb	r2, [r3, #0]

	MiMAC_Init(initValue);
   11e38:	230c      	movs	r3, #12
   11e3a:	18fb      	adds	r3, r7, r3
   11e3c:	6818      	ldr	r0, [r3, #0]
   11e3e:	6859      	ldr	r1, [r3, #4]
   11e40:	4b25      	ldr	r3, [pc, #148]	; (11ed8 <MiApp_ProtocolInit+0x28c>)
   11e42:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
   11e44:	230a      	movs	r3, #10
   11e46:	18fb      	adds	r3, r7, r3
   11e48:	2201      	movs	r2, #1
   11e4a:	4252      	negs	r2, r2
   11e4c:	801a      	strh	r2, [r3, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   11e4e:	4a20      	ldr	r2, [pc, #128]	; (11ed0 <MiApp_ProtocolInit+0x284>)
   11e50:	230a      	movs	r3, #10
   11e52:	18fb      	adds	r3, r7, r3
   11e54:	0011      	movs	r1, r2
   11e56:	0018      	movs	r0, r3
   11e58:	4b20      	ldr	r3, [pc, #128]	; (11edc <MiApp_ProtocolInit+0x290>)
   11e5a:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
   11e5c:	4b20      	ldr	r3, [pc, #128]	; (11ee0 <MiApp_ProtocolInit+0x294>)
   11e5e:	781b      	ldrb	r3, [r3, #0]
   11e60:	0018      	movs	r0, r3
   11e62:	4b20      	ldr	r3, [pc, #128]	; (11ee4 <MiApp_ProtocolInit+0x298>)
   11e64:	4798      	blx	r3
	#elif defined(ENABLE_INDIRECT_MESSAGE)
	TimeSlotTick.Val = ((ONE_SECOND) * RFD_WAKEUP_INTERVAL) / TIME_SYNC_SLOTS;
	#endif
	#endif

	P2PCapacityInfo = 0;
   11e66:	4b20      	ldr	r3, [pc, #128]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e68:	2200      	movs	r2, #0
   11e6a:	701a      	strb	r2, [r3, #0]
	#if !defined(ENABLE_SLEEP)
	P2PCapacityInfo |= 0x01;
   11e6c:	4b1e      	ldr	r3, [pc, #120]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e6e:	781b      	ldrb	r3, [r3, #0]
   11e70:	2201      	movs	r2, #1
   11e72:	4313      	orrs	r3, r2
   11e74:	b2da      	uxtb	r2, r3
   11e76:	4b1c      	ldr	r3, [pc, #112]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e78:	701a      	strb	r2, [r3, #0]
	#endif
	#if defined(ENABLE_SECURITY)
	P2PCapacityInfo |= 0x08;
   11e7a:	4b1b      	ldr	r3, [pc, #108]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e7c:	781b      	ldrb	r3, [r3, #0]
   11e7e:	2208      	movs	r2, #8
   11e80:	4313      	orrs	r3, r2
   11e82:	b2da      	uxtb	r2, r3
   11e84:	4b18      	ldr	r3, [pc, #96]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e86:	701a      	strb	r2, [r3, #0]
	#endif
	P2PCapacityInfo |= (ConnMode << 4);
   11e88:	4b18      	ldr	r3, [pc, #96]	; (11eec <MiApp_ProtocolInit+0x2a0>)
   11e8a:	781b      	ldrb	r3, [r3, #0]
   11e8c:	011b      	lsls	r3, r3, #4
   11e8e:	b25a      	sxtb	r2, r3
   11e90:	4b15      	ldr	r3, [pc, #84]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e92:	781b      	ldrb	r3, [r3, #0]
   11e94:	b25b      	sxtb	r3, r3
   11e96:	4313      	orrs	r3, r2
   11e98:	b25b      	sxtb	r3, r3
   11e9a:	b2da      	uxtb	r2, r3
   11e9c:	4b12      	ldr	r3, [pc, #72]	; (11ee8 <MiApp_ProtocolInit+0x29c>)
   11e9e:	701a      	strb	r2, [r3, #0]
	ENABLE_TRX_IRQ();
   11ea0:	2100      	movs	r1, #0
   11ea2:	2000      	movs	r0, #0
   11ea4:	4b12      	ldr	r3, [pc, #72]	; (11ef0 <MiApp_ProtocolInit+0x2a4>)
   11ea6:	4798      	blx	r3
	return true;
   11ea8:	2301      	movs	r3, #1
}
   11eaa:	0018      	movs	r0, r3
   11eac:	46bd      	mov	sp, r7
   11eae:	b00c      	add	sp, #48	; 0x30
   11eb0:	bd80      	pop	{r7, pc}
   11eb2:	46c0      	nop			; (mov r8, r8)
   11eb4:	20002440 	.word	0x20002440
   11eb8:	0080a00c 	.word	0x0080a00c
   11ebc:	0080a040 	.word	0x0080a040
   11ec0:	2000246c 	.word	0x2000246c
   11ec4:	20002308 	.word	0x20002308
   11ec8:	20002441 	.word	0x20002441
   11ecc:	200023ec 	.word	0x200023ec
   11ed0:	200023e8 	.word	0x200023e8
   11ed4:	00001111 	.word	0x00001111
   11ed8:	000102ed 	.word	0x000102ed
   11edc:	0000fa2d 	.word	0x0000fa2d
   11ee0:	20001691 	.word	0x20001691
   11ee4:	0001227d 	.word	0x0001227d
   11ee8:	200023e4 	.word	0x200023e4
   11eec:	200005ad 	.word	0x200005ad
   11ef0:	00012b2d 	.word	0x00012b2d

00011ef4 <SendPacket>:
    bool SendPacket(INPUT bool Broadcast,
                    INPUT uint8_t *DestinationAddress,
                    INPUT bool isCommand,
                    INPUT bool SecurityEnabled)
#endif                                        
{ 
   11ef4:	b5b0      	push	{r4, r5, r7, lr}
   11ef6:	b088      	sub	sp, #32
   11ef8:	af02      	add	r7, sp, #8
   11efa:	0004      	movs	r4, r0
   11efc:	1d38      	adds	r0, r7, #4
   11efe:	8001      	strh	r1, [r0, #0]
   11f00:	603a      	str	r2, [r7, #0]
   11f02:	0019      	movs	r1, r3
   11f04:	1dfb      	adds	r3, r7, #7
   11f06:	1c22      	adds	r2, r4, #0
   11f08:	701a      	strb	r2, [r3, #0]
   11f0a:	1dbb      	adds	r3, r7, #6
   11f0c:	1c0a      	adds	r2, r1, #0
   11f0e:	701a      	strb	r2, [r3, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
   11f10:	2308      	movs	r3, #8
   11f12:	18fb      	adds	r3, r7, r3
   11f14:	2200      	movs	r2, #0
   11f16:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
   11f18:	1dbb      	adds	r3, r7, #6
   11f1a:	781b      	ldrb	r3, [r3, #0]
   11f1c:	1c1a      	adds	r2, r3, #0
   11f1e:	2303      	movs	r3, #3
   11f20:	4013      	ands	r3, r2
   11f22:	b2da      	uxtb	r2, r3
   11f24:	2308      	movs	r3, #8
   11f26:	18fb      	adds	r3, r7, r3
   11f28:	2103      	movs	r1, #3
   11f2a:	400a      	ands	r2, r1
   11f2c:	0010      	movs	r0, r2
   11f2e:	781a      	ldrb	r2, [r3, #0]
   11f30:	2103      	movs	r1, #3
   11f32:	438a      	bics	r2, r1
   11f34:	1c11      	adds	r1, r2, #0
   11f36:	1c02      	adds	r2, r0, #0
   11f38:	430a      	orrs	r2, r1
   11f3a:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.ackReq = (Broadcast) ? 0 : 1;
   11f3c:	1dfb      	adds	r3, r7, #7
   11f3e:	781b      	ldrb	r3, [r3, #0]
   11f40:	2201      	movs	r2, #1
   11f42:	4053      	eors	r3, r2
   11f44:	b2da      	uxtb	r2, r3
   11f46:	2308      	movs	r3, #8
   11f48:	18fb      	adds	r3, r7, r3
   11f4a:	2101      	movs	r1, #1
   11f4c:	400a      	ands	r2, r1
   11f4e:	0150      	lsls	r0, r2, #5
   11f50:	781a      	ldrb	r2, [r3, #0]
   11f52:	2120      	movs	r1, #32
   11f54:	438a      	bics	r2, r1
   11f56:	1c11      	adds	r1, r2, #0
   11f58:	1c02      	adds	r2, r0, #0
   11f5a:	430a      	orrs	r2, r1
   11f5c:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.broadcast = Broadcast;
   11f5e:	2308      	movs	r3, #8
   11f60:	18fb      	adds	r3, r7, r3
   11f62:	1dfa      	adds	r2, r7, #7
   11f64:	7812      	ldrb	r2, [r2, #0]
   11f66:	2101      	movs	r1, #1
   11f68:	400a      	ands	r2, r1
   11f6a:	0090      	lsls	r0, r2, #2
   11f6c:	781a      	ldrb	r2, [r3, #0]
   11f6e:	2104      	movs	r1, #4
   11f70:	438a      	bics	r2, r1
   11f72:	1c11      	adds	r1, r2, #0
   11f74:	1c02      	adds	r2, r0, #0
   11f76:	430a      	orrs	r2, r1
   11f78:	701a      	strb	r2, [r3, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
   11f7a:	2308      	movs	r3, #8
   11f7c:	18fb      	adds	r3, r7, r3
   11f7e:	2228      	movs	r2, #40	; 0x28
   11f80:	18ba      	adds	r2, r7, r2
   11f82:	7812      	ldrb	r2, [r2, #0]
   11f84:	2101      	movs	r1, #1
   11f86:	400a      	ands	r2, r1
   11f88:	00d0      	lsls	r0, r2, #3
   11f8a:	781a      	ldrb	r2, [r3, #0]
   11f8c:	2108      	movs	r1, #8
   11f8e:	438a      	bics	r2, r1
   11f90:	1c11      	adds	r1, r2, #0
   11f92:	1c02      	adds	r2, r0, #0
   11f94:	430a      	orrs	r2, r1
   11f96:	701a      	strb	r2, [r3, #0]
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
   11f98:	2308      	movs	r3, #8
   11f9a:	18fb      	adds	r3, r7, r3
   11f9c:	2200      	movs	r2, #0
   11f9e:	725a      	strb	r2, [r3, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
   11fa0:	1dfb      	adds	r3, r7, #7
   11fa2:	781a      	ldrb	r2, [r3, #0]
   11fa4:	2308      	movs	r3, #8
   11fa6:	18fb      	adds	r3, r7, r3
   11fa8:	721a      	strb	r2, [r3, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
   11faa:	1dfb      	adds	r3, r7, #7
   11fac:	781b      	ldrb	r3, [r3, #0]
   11fae:	2201      	movs	r2, #1
   11fb0:	4053      	eors	r3, r2
   11fb2:	b2da      	uxtb	r2, r3
   11fb4:	2308      	movs	r3, #8
   11fb6:	18fb      	adds	r3, r7, r3
   11fb8:	2101      	movs	r1, #1
   11fba:	400a      	ands	r2, r1
   11fbc:	0190      	lsls	r0, r2, #6
   11fbe:	781a      	ldrb	r2, [r3, #0]
   11fc0:	2140      	movs	r1, #64	; 0x40
   11fc2:	438a      	bics	r2, r1
   11fc4:	1c11      	adds	r1, r2, #0
   11fc6:	1c02      	adds	r2, r0, #0
   11fc8:	430a      	orrs	r2, r1
   11fca:	701a      	strb	r2, [r3, #0]
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
   11fcc:	2308      	movs	r3, #8
   11fce:	18fb      	adds	r3, r7, r3
   11fd0:	781a      	ldrb	r2, [r3, #0]
   11fd2:	2180      	movs	r1, #128	; 0x80
   11fd4:	4249      	negs	r1, r1
   11fd6:	430a      	orrs	r2, r1
   11fd8:	701a      	strb	r2, [r3, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;
   11fda:	2308      	movs	r3, #8
   11fdc:	18fb      	adds	r3, r7, r3
   11fde:	683a      	ldr	r2, [r7, #0]
   11fe0:	605a      	str	r2, [r3, #4]

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
   11fe2:	1d3b      	adds	r3, r7, #4
   11fe4:	881a      	ldrh	r2, [r3, #0]
   11fe6:	2308      	movs	r3, #8
   11fe8:	18fb      	adds	r3, r7, r3
   11fea:	815a      	strh	r2, [r3, #10]
    #endif

    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
   11fec:	4b0c      	ldr	r3, [pc, #48]	; (12020 <SendPacket+0x12c>)
   11fee:	781b      	ldrb	r3, [r3, #0]
   11ff0:	2217      	movs	r2, #23
   11ff2:	18bc      	adds	r4, r7, r2
   11ff4:	490b      	ldr	r1, [pc, #44]	; (12024 <SendPacket+0x130>)
   11ff6:	2208      	movs	r2, #8
   11ff8:	18ba      	adds	r2, r7, r2
   11ffa:	9300      	str	r3, [sp, #0]
   11ffc:	000b      	movs	r3, r1
   11ffe:	6810      	ldr	r0, [r2, #0]
   12000:	6851      	ldr	r1, [r2, #4]
   12002:	6892      	ldr	r2, [r2, #8]
   12004:	4d08      	ldr	r5, [pc, #32]	; (12028 <SendPacket+0x134>)
   12006:	47a8      	blx	r5
   12008:	0003      	movs	r3, r0
   1200a:	7023      	strb	r3, [r4, #0]
    TxData = 0;
   1200c:	4b04      	ldr	r3, [pc, #16]	; (12020 <SendPacket+0x12c>)
   1200e:	2200      	movs	r2, #0
   12010:	701a      	strb	r2, [r3, #0]
    
    return status;
   12012:	2317      	movs	r3, #23
   12014:	18fb      	adds	r3, r7, r3
   12016:	781b      	ldrb	r3, [r3, #0]
}
   12018:	0018      	movs	r0, r3
   1201a:	46bd      	mov	sp, r7
   1201c:	b006      	add	sp, #24
   1201e:	bdb0      	pop	{r4, r5, r7, pc}
   12020:	20002441 	.word	0x20002441
   12024:	20002444 	.word	0x20002444
   12028:	000103a5 	.word	0x000103a5

0001202c <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
   1202c:	b580      	push	{r7, lr}
   1202e:	b084      	sub	sp, #16
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
   12034:	6039      	str	r1, [r7, #0]
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
   12036:	230f      	movs	r3, #15
   12038:	18fb      	adds	r3, r7, r3
   1203a:	2200      	movs	r2, #0
   1203c:	701a      	strb	r2, [r3, #0]
   1203e:	e016      	b.n	1206e <isSameAddress+0x42>
    {
        if( Address1[i] != Address2[i] )
   12040:	230f      	movs	r3, #15
   12042:	18fb      	adds	r3, r7, r3
   12044:	781b      	ldrb	r3, [r3, #0]
   12046:	687a      	ldr	r2, [r7, #4]
   12048:	18d3      	adds	r3, r2, r3
   1204a:	781a      	ldrb	r2, [r3, #0]
   1204c:	230f      	movs	r3, #15
   1204e:	18fb      	adds	r3, r7, r3
   12050:	781b      	ldrb	r3, [r3, #0]
   12052:	6839      	ldr	r1, [r7, #0]
   12054:	18cb      	adds	r3, r1, r3
   12056:	781b      	ldrb	r3, [r3, #0]
   12058:	429a      	cmp	r2, r3
   1205a:	d001      	beq.n	12060 <isSameAddress+0x34>
        {
            return false;
   1205c:	2300      	movs	r3, #0
   1205e:	e00c      	b.n	1207a <isSameAddress+0x4e>
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
   12060:	230f      	movs	r3, #15
   12062:	18fb      	adds	r3, r7, r3
   12064:	781a      	ldrb	r2, [r3, #0]
   12066:	230f      	movs	r3, #15
   12068:	18fb      	adds	r3, r7, r3
   1206a:	3201      	adds	r2, #1
   1206c:	701a      	strb	r2, [r3, #0]
   1206e:	230f      	movs	r3, #15
   12070:	18fb      	adds	r3, r7, r3
   12072:	781b      	ldrb	r3, [r3, #0]
   12074:	2b07      	cmp	r3, #7
   12076:	d9e3      	bls.n	12040 <isSameAddress+0x14>
        }
    }
    return true;
   12078:	2301      	movs	r3, #1
}
   1207a:	0018      	movs	r0, r3
   1207c:	46bd      	mov	sp, r7
   1207e:	b004      	add	sp, #16
   12080:	bd80      	pop	{r7, pc}
	...

00012084 <MiApp_StartConnection>:

#if defined(ENABLE_HAND_SHAKE)
     
    bool MiApp_StartConnection(uint8_t Mode, uint8_t ScanDuration, uint32_t ChannelMap)
    {
   12084:	b580      	push	{r7, lr}
   12086:	b084      	sub	sp, #16
   12088:	af00      	add	r7, sp, #0
   1208a:	603a      	str	r2, [r7, #0]
   1208c:	1dfb      	adds	r3, r7, #7
   1208e:	1c02      	adds	r2, r0, #0
   12090:	701a      	strb	r2, [r3, #0]
   12092:	1dbb      	adds	r3, r7, #6
   12094:	1c0a      	adds	r2, r1, #0
   12096:	701a      	strb	r2, [r3, #0]
		#if defined(PROTOCOL_STAR)
			role = PanCoordinator;
		#endif
        switch(Mode)
   12098:	1dfb      	adds	r3, r7, #7
   1209a:	781b      	ldrb	r3, [r3, #0]
   1209c:	2b01      	cmp	r3, #1
   1209e:	d017      	beq.n	120d0 <MiApp_StartConnection+0x4c>
   120a0:	2b02      	cmp	r3, #2
   120a2:	d017      	beq.n	120d4 <MiApp_StartConnection+0x50>
   120a4:	2b00      	cmp	r3, #0
   120a6:	d002      	beq.n	120ae <MiApp_StartConnection+0x2a>
            case START_CONN_CS_SCN:
                // Carrier sense scan is not supported for current available transceivers
                return false;
            
            default:
                break;
   120a8:	46c0      	nop			; (mov r8, r8)
        }    
        return false;
   120aa:	2300      	movs	r3, #0
   120ac:	e013      	b.n	120d6 <MiApp_StartConnection+0x52>
                        myPANID.Val = MY_PAN_ID;
   120ae:	4b0c      	ldr	r3, [pc, #48]	; (120e0 <MiApp_StartConnection+0x5c>)
   120b0:	4a0c      	ldr	r2, [pc, #48]	; (120e4 <MiApp_StartConnection+0x60>)
   120b2:	801a      	strh	r2, [r3, #0]
                        uint16_t tmp = 0xFFFF;
   120b4:	230e      	movs	r3, #14
   120b6:	18fb      	adds	r3, r7, r3
   120b8:	2201      	movs	r2, #1
   120ba:	4252      	negs	r2, r2
   120bc:	801a      	strh	r2, [r3, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
   120be:	4a08      	ldr	r2, [pc, #32]	; (120e0 <MiApp_StartConnection+0x5c>)
   120c0:	230e      	movs	r3, #14
   120c2:	18fb      	adds	r3, r7, r3
   120c4:	0011      	movs	r1, r2
   120c6:	0018      	movs	r0, r3
   120c8:	4b07      	ldr	r3, [pc, #28]	; (120e8 <MiApp_StartConnection+0x64>)
   120ca:	4798      	blx	r3
                return true;
   120cc:	2301      	movs	r3, #1
   120ce:	e002      	b.n	120d6 <MiApp_StartConnection+0x52>
                    return false;
   120d0:	2300      	movs	r3, #0
   120d2:	e000      	b.n	120d6 <MiApp_StartConnection+0x52>
                return false;
   120d4:	2300      	movs	r3, #0
    }
   120d6:	0018      	movs	r0, r3
   120d8:	46bd      	mov	sp, r7
   120da:	b004      	add	sp, #16
   120dc:	bd80      	pop	{r7, pc}
   120de:	46c0      	nop			; (mov r8, r8)
   120e0:	200023e8 	.word	0x200023e8
   120e4:	00001111 	.word	0x00001111
   120e8:	0000fa2d 	.word	0x0000fa2d

000120ec <MiApp_EstablishConnection>:
     *      If more than one connections have been established through this function call, the
     *      return value points to the index of one of the peer devices.
     *
     *****************************************************************************************/  
    uint8_t MiApp_EstablishConnection(INPUT uint8_t ActiveScanIndex, INPUT uint8_t Mode)
    {
   120ec:	b590      	push	{r4, r7, lr}
   120ee:	b089      	sub	sp, #36	; 0x24
   120f0:	af02      	add	r7, sp, #8
   120f2:	0002      	movs	r2, r0
   120f4:	1dfb      	adds	r3, r7, #7
   120f6:	701a      	strb	r2, [r3, #0]
   120f8:	1dbb      	adds	r3, r7, #6
   120fa:	1c0a      	adds	r2, r1, #0
   120fc:	701a      	strb	r2, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
   120fe:	2315      	movs	r3, #21
   12100:	18fb      	adds	r3, r7, r3
   12102:	4a4a      	ldr	r2, [pc, #296]	; (1222c <MiApp_EstablishConnection+0x140>)
   12104:	7812      	ldrb	r2, [r2, #0]
   12106:	701a      	strb	r2, [r3, #0]
        uint8_t    retry = CONNECTION_RETRY_TIMES;
   12108:	2317      	movs	r3, #23
   1210a:	18fb      	adds	r3, r7, r3
   1210c:	2203      	movs	r2, #3
   1210e:	701a      	strb	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
   12110:	2316      	movs	r3, #22
   12112:	18fb      	adds	r3, r7, r3
   12114:	2200      	movs	r2, #0
   12116:	701a      	strb	r2, [r3, #0]
        MIWI_TICK    t1, t2;
        #if defined(PROTOCOL_STAR)
            tick1.Val = MiWi_TickGet();
        #endif
        if( Mode == CONN_MODE_INDIRECT )
   12118:	1dbb      	adds	r3, r7, #6
   1211a:	781b      	ldrb	r3, [r3, #0]
   1211c:	2b01      	cmp	r3, #1
   1211e:	d101      	bne.n	12124 <MiApp_EstablishConnection+0x38>
        {
            return 0xFF;
   12120:	23ff      	movs	r3, #255	; 0xff
   12122:	e07e      	b.n	12222 <MiApp_EstablishConnection+0x136>
        }
       
        t1.Val = MiWi_TickGet();
   12124:	4b42      	ldr	r3, [pc, #264]	; (12230 <MiApp_EstablishConnection+0x144>)
   12126:	4798      	blx	r3
   12128:	0003      	movs	r3, r0
   1212a:	613b      	str	r3, [r7, #16]

        t1.Val -= (ONE_SECOND);
   1212c:	693b      	ldr	r3, [r7, #16]
   1212e:	3b7c      	subs	r3, #124	; 0x7c
   12130:	613b      	str	r3, [r7, #16]
        ConnMode = ENABLE_ALL_CONN;
   12132:	4b3e      	ldr	r3, [pc, #248]	; (1222c <MiApp_EstablishConnection+0x140>)
   12134:	2200      	movs	r2, #0
   12136:	701a      	strb	r2, [r3, #0]
        P2PStatus.bits.SearchConnection = 1;
   12138:	4a3e      	ldr	r2, [pc, #248]	; (12234 <MiApp_EstablishConnection+0x148>)
   1213a:	7813      	ldrb	r3, [r2, #0]
   1213c:	2110      	movs	r1, #16
   1213e:	430b      	orrs	r3, r1
   12140:	7013      	strb	r3, [r2, #0]
        while( P2PStatus.bits.SearchConnection )
   12142:	e060      	b.n	12206 <MiApp_EstablishConnection+0x11a>
        {
            t2.Val = MiWi_TickGet();
   12144:	4b3a      	ldr	r3, [pc, #232]	; (12230 <MiApp_EstablishConnection+0x144>)
   12146:	4798      	blx	r3
   12148:	0003      	movs	r3, r0
   1214a:	60fb      	str	r3, [r7, #12]
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
   1214c:	68fa      	ldr	r2, [r7, #12]
   1214e:	693b      	ldr	r3, [r7, #16]
   12150:	1ad3      	subs	r3, r2, r3
   12152:	2b7c      	cmp	r3, #124	; 0x7c
   12154:	d951      	bls.n	121fa <MiApp_EstablishConnection+0x10e>
            {   
                t1.Val = t2.Val;
   12156:	68fb      	ldr	r3, [r7, #12]
   12158:	613b      	str	r3, [r7, #16]

                if( connectionInterval-- > 0 )
   1215a:	2316      	movs	r3, #22
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	781b      	ldrb	r3, [r3, #0]
   12160:	2216      	movs	r2, #22
   12162:	18ba      	adds	r2, r7, r2
   12164:	1e59      	subs	r1, r3, #1
   12166:	7011      	strb	r1, [r2, #0]
   12168:	2b00      	cmp	r3, #0
   1216a:	d006      	beq.n	1217a <MiApp_EstablishConnection+0x8e>
   1216c:	2317      	movs	r3, #23
   1216e:	18fb      	adds	r3, r7, r3
   12170:	2217      	movs	r2, #23
   12172:	18ba      	adds	r2, r7, r2
   12174:	7812      	ldrb	r2, [r2, #0]
   12176:	701a      	strb	r2, [r3, #0]
                {
                    continue;
   12178:	e045      	b.n	12206 <MiApp_EstablishConnection+0x11a>
                }
                connectionInterval = CONNECTION_INTERVAL-1;
   1217a:	2316      	movs	r3, #22
   1217c:	18fb      	adds	r3, r7, r3
   1217e:	2201      	movs	r2, #1
   12180:	701a      	strb	r2, [r3, #0]
                if( retry-- == 0 )
   12182:	2317      	movs	r3, #23
   12184:	18fb      	adds	r3, r7, r3
   12186:	781b      	ldrb	r3, [r3, #0]
   12188:	2217      	movs	r2, #23
   1218a:	18ba      	adds	r2, r7, r2
   1218c:	1e59      	subs	r1, r3, #1
   1218e:	7011      	strb	r1, [r2, #0]
   12190:	2b00      	cmp	r3, #0
   12192:	d106      	bne.n	121a2 <MiApp_EstablishConnection+0xb6>
                {

                    P2PStatus.bits.SearchConnection = 0;
   12194:	4a27      	ldr	r2, [pc, #156]	; (12234 <MiApp_EstablishConnection+0x148>)
   12196:	7813      	ldrb	r3, [r2, #0]
   12198:	2110      	movs	r1, #16
   1219a:	438b      	bics	r3, r1
   1219c:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
   1219e:	23ff      	movs	r3, #255	; 0xff
   121a0:	e03f      	b.n	12222 <MiApp_EstablishConnection+0x136>
                }
                MiApp_FlushTx();
   121a2:	4b25      	ldr	r3, [pc, #148]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121a4:	2200      	movs	r2, #0
   121a6:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
   121a8:	4b23      	ldr	r3, [pc, #140]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121aa:	781b      	ldrb	r3, [r3, #0]
   121ac:	1c5a      	adds	r2, r3, #1
   121ae:	b2d1      	uxtb	r1, r2
   121b0:	4a21      	ldr	r2, [pc, #132]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121b2:	7011      	strb	r1, [r2, #0]
   121b4:	001a      	movs	r2, r3
   121b6:	4b21      	ldr	r3, [pc, #132]	; (1223c <MiApp_EstablishConnection+0x150>)
   121b8:	2181      	movs	r1, #129	; 0x81
   121ba:	5499      	strb	r1, [r3, r2]
                MiApp_WriteData(currentChannel);
   121bc:	4b1e      	ldr	r3, [pc, #120]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121be:	781b      	ldrb	r3, [r3, #0]
   121c0:	1c5a      	adds	r2, r3, #1
   121c2:	b2d1      	uxtb	r1, r2
   121c4:	4a1c      	ldr	r2, [pc, #112]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121c6:	7011      	strb	r1, [r2, #0]
   121c8:	001a      	movs	r2, r3
   121ca:	4b1d      	ldr	r3, [pc, #116]	; (12240 <MiApp_EstablishConnection+0x154>)
   121cc:	7819      	ldrb	r1, [r3, #0]
   121ce:	4b1b      	ldr	r3, [pc, #108]	; (1223c <MiApp_EstablishConnection+0x150>)
   121d0:	5499      	strb	r1, [r3, r2]
                MiApp_WriteData(P2PCapacityInfo);
   121d2:	4b19      	ldr	r3, [pc, #100]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121d4:	781b      	ldrb	r3, [r3, #0]
   121d6:	1c5a      	adds	r2, r3, #1
   121d8:	b2d1      	uxtb	r1, r2
   121da:	4a17      	ldr	r2, [pc, #92]	; (12238 <MiApp_EstablishConnection+0x14c>)
   121dc:	7011      	strb	r1, [r2, #0]
   121de:	001a      	movs	r2, r3
   121e0:	4b18      	ldr	r3, [pc, #96]	; (12244 <MiApp_EstablishConnection+0x158>)
   121e2:	7819      	ldrb	r1, [r3, #0]
   121e4:	4b15      	ldr	r3, [pc, #84]	; (1223c <MiApp_EstablishConnection+0x150>)
   121e6:	5499      	strb	r1, [r3, r2]
                        {
                            MiApp_SetChannel( ActiveScanResults[ActiveScanIndex].Channel );
                            SendPacket(false, ActiveScanResults[ActiveScanIndex].PANID, ActiveScanResults[ActiveScanIndex].Address, true, false);
                        }
                    #else
                        SendPacket(true, myPANID, NULL, true, false);
   121e8:	4b17      	ldr	r3, [pc, #92]	; (12248 <MiApp_EstablishConnection+0x15c>)
   121ea:	8819      	ldrh	r1, [r3, #0]
   121ec:	2300      	movs	r3, #0
   121ee:	9300      	str	r3, [sp, #0]
   121f0:	2301      	movs	r3, #1
   121f2:	2200      	movs	r2, #0
   121f4:	2001      	movs	r0, #1
   121f6:	4c15      	ldr	r4, [pc, #84]	; (1224c <MiApp_EstablishConnection+0x160>)
   121f8:	47a0      	blx	r4
                        SendPacket(true, NULL, true, false);
                    #endif
                #endif
            }
    
            if( MiApp_MessageAvailable())
   121fa:	4b15      	ldr	r3, [pc, #84]	; (12250 <MiApp_EstablishConnection+0x164>)
   121fc:	4798      	blx	r3
   121fe:	1e03      	subs	r3, r0, #0
   12200:	d001      	beq.n	12206 <MiApp_EstablishConnection+0x11a>
            {
                MiApp_DiscardMessage();
   12202:	4b14      	ldr	r3, [pc, #80]	; (12254 <MiApp_EstablishConnection+0x168>)
   12204:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
   12206:	4b0b      	ldr	r3, [pc, #44]	; (12234 <MiApp_EstablishConnection+0x148>)
   12208:	781b      	ldrb	r3, [r3, #0]
   1220a:	06db      	lsls	r3, r3, #27
   1220c:	0fdb      	lsrs	r3, r3, #31
   1220e:	b2db      	uxtb	r3, r3
   12210:	2b00      	cmp	r3, #0
   12212:	d197      	bne.n	12144 <MiApp_EstablishConnection+0x58>
            }     
            //P2PTasks();
        }
      
        ConnMode = tmpConnectionMode;
   12214:	4b05      	ldr	r3, [pc, #20]	; (1222c <MiApp_EstablishConnection+0x140>)
   12216:	2215      	movs	r2, #21
   12218:	18ba      	adds	r2, r7, r2
   1221a:	7812      	ldrb	r2, [r2, #0]
   1221c:	701a      	strb	r2, [r3, #0]
			 else
			 {
				 role = EndDevice;
			 }
		#endif
        return LatestConnection;
   1221e:	4b0e      	ldr	r3, [pc, #56]	; (12258 <MiApp_EstablishConnection+0x16c>)
   12220:	781b      	ldrb	r3, [r3, #0]
        
    }
   12222:	0018      	movs	r0, r3
   12224:	46bd      	mov	sp, r7
   12226:	b007      	add	sp, #28
   12228:	bd90      	pop	{r4, r7, pc}
   1222a:	46c0      	nop			; (mov r8, r8)
   1222c:	200005ad 	.word	0x200005ad
   12230:	000189d5 	.word	0x000189d5
   12234:	20002440 	.word	0x20002440
   12238:	20002441 	.word	0x20002441
   1223c:	20002444 	.word	0x20002444
   12240:	20001691 	.word	0x20001691
   12244:	200023e4 	.word	0x200023e4
   12248:	200023e8 	.word	0x200023e8
   1224c:	00011ef5 	.word	0x00011ef5
   12250:	000122b9 	.word	0x000122b9
   12254:	0001225d 	.word	0x0001225d
   12258:	20002304 	.word	0x20002304

0001225c <MiApp_DiscardMessage>:



 
void MiApp_DiscardMessage(void)
{
   1225c:	b580      	push	{r7, lr}
   1225e:	af00      	add	r7, sp, #0
    P2PStatus.bits.RxHasUserData = 0;
   12260:	4a04      	ldr	r2, [pc, #16]	; (12274 <MiApp_DiscardMessage+0x18>)
   12262:	7813      	ldrb	r3, [r2, #0]
   12264:	2108      	movs	r1, #8
   12266:	438b      	bics	r3, r1
   12268:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
   1226a:	4b03      	ldr	r3, [pc, #12]	; (12278 <MiApp_DiscardMessage+0x1c>)
   1226c:	4798      	blx	r3
}
   1226e:	46c0      	nop			; (mov r8, r8)
   12270:	46bd      	mov	sp, r7
   12272:	bd80      	pop	{r7, pc}
   12274:	20002440 	.word	0x20002440
   12278:	00010bed 	.word	0x00010bed

0001227c <MiApp_SetChannel>:


 
bool MiApp_SetChannel(uint8_t channel)
{
   1227c:	b580      	push	{r7, lr}
   1227e:	b082      	sub	sp, #8
   12280:	af00      	add	r7, sp, #0
   12282:	0002      	movs	r2, r0
   12284:	1dfb      	adds	r3, r7, #7
   12286:	701a      	strb	r2, [r3, #0]
    if( MiMAC_SetChannel(channel, 0) )
   12288:	1dfb      	adds	r3, r7, #7
   1228a:	781b      	ldrb	r3, [r3, #0]
   1228c:	2100      	movs	r1, #0
   1228e:	0018      	movs	r0, r3
   12290:	4b07      	ldr	r3, [pc, #28]	; (122b0 <MiApp_SetChannel+0x34>)
   12292:	4798      	blx	r3
   12294:	1e03      	subs	r3, r0, #0
   12296:	d005      	beq.n	122a4 <MiApp_SetChannel+0x28>
    {
        currentChannel = channel;
   12298:	4b06      	ldr	r3, [pc, #24]	; (122b4 <MiApp_SetChannel+0x38>)
   1229a:	1dfa      	adds	r2, r7, #7
   1229c:	7812      	ldrb	r2, [r2, #0]
   1229e:	701a      	strb	r2, [r3, #0]
        #if defined(ENABLE_NETWORK_FREEZER)
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
   122a0:	2301      	movs	r3, #1
   122a2:	e000      	b.n	122a6 <MiApp_SetChannel+0x2a>
    }
    return false;
   122a4:	2300      	movs	r3, #0
}
   122a6:	0018      	movs	r0, r3
   122a8:	46bd      	mov	sp, r7
   122aa:	b002      	add	sp, #8
   122ac:	bd80      	pop	{r7, pc}
   122ae:	46c0      	nop			; (mov r8, r8)
   122b0:	000102a9 	.word	0x000102a9
   122b4:	20001691 	.word	0x20001691

000122b8 <MiApp_MessageAvailable>:


bool MiApp_MessageAvailable(void)
{ 
   122b8:	b580      	push	{r7, lr}
   122ba:	af00      	add	r7, sp, #0
    P2PTasks(); 
   122bc:	4b06      	ldr	r3, [pc, #24]	; (122d8 <MiApp_MessageAvailable+0x20>)
   122be:	4798      	blx	r3
    
    return P2PStatus.bits.RxHasUserData;
   122c0:	4b06      	ldr	r3, [pc, #24]	; (122dc <MiApp_MessageAvailable+0x24>)
   122c2:	781b      	ldrb	r3, [r3, #0]
   122c4:	071b      	lsls	r3, r3, #28
   122c6:	0fdb      	lsrs	r3, r3, #31
   122c8:	b2db      	uxtb	r3, r3
   122ca:	1e5a      	subs	r2, r3, #1
   122cc:	4193      	sbcs	r3, r2
   122ce:	b2db      	uxtb	r3, r3
}
   122d0:	0018      	movs	r0, r3
   122d2:	46bd      	mov	sp, r7
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	000116f1 	.word	0x000116f1
   122dc:	20002440 	.word	0x20002440

000122e0 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
   122e0:	b590      	push	{r4, r7, lr}
   122e2:	b083      	sub	sp, #12
   122e4:	af00      	add	r7, sp, #0
        uint8_t i;
        uint8_t status = STATUS_SUCCESS;
   122e6:	1dbb      	adds	r3, r7, #6
   122e8:	2200      	movs	r2, #0
   122ea:	701a      	strb	r2, [r3, #0]
        uint8_t connectionSlot = 0xFF;
   122ec:	1d7b      	adds	r3, r7, #5
   122ee:	22ff      	movs	r2, #255	; 0xff
   122f0:	701a      	strb	r2, [r3, #0]
                return STATUS_ACTIVE_SCAN;
            }
        #endif
        
        // loop through all entry and locate an proper slot
        for(i = 0; i < CONNECTION_SIZE; i++)
   122f2:	1dfb      	adds	r3, r7, #7
   122f4:	2200      	movs	r2, #0
   122f6:	701a      	strb	r2, [r3, #0]
   122f8:	e033      	b.n	12362 <AddConnection+0x82>
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
   122fa:	1dfb      	adds	r3, r7, #7
   122fc:	781a      	ldrb	r2, [r3, #0]
   122fe:	495d      	ldr	r1, [pc, #372]	; (12474 <AddConnection+0x194>)
   12300:	2008      	movs	r0, #8
   12302:	0013      	movs	r3, r2
   12304:	009b      	lsls	r3, r3, #2
   12306:	189b      	adds	r3, r3, r2
   12308:	005b      	lsls	r3, r3, #1
   1230a:	18cb      	adds	r3, r1, r3
   1230c:	181b      	adds	r3, r3, r0
   1230e:	785b      	ldrb	r3, [r3, #1]
   12310:	061b      	lsls	r3, r3, #24
   12312:	0fdb      	lsrs	r3, r3, #31
   12314:	b2db      	uxtb	r3, r3
   12316:	2b00      	cmp	r3, #0
   12318:	d016      	beq.n	12348 <AddConnection+0x68>
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
   1231a:	4b57      	ldr	r3, [pc, #348]	; (12478 <AddConnection+0x198>)
   1231c:	6858      	ldr	r0, [r3, #4]
   1231e:	1dfb      	adds	r3, r7, #7
   12320:	781a      	ldrb	r2, [r3, #0]
   12322:	0013      	movs	r3, r2
   12324:	009b      	lsls	r3, r3, #2
   12326:	189b      	adds	r3, r3, r2
   12328:	005b      	lsls	r3, r3, #1
   1232a:	4a52      	ldr	r2, [pc, #328]	; (12474 <AddConnection+0x194>)
   1232c:	189b      	adds	r3, r3, r2
   1232e:	0019      	movs	r1, r3
   12330:	4b52      	ldr	r3, [pc, #328]	; (1247c <AddConnection+0x19c>)
   12332:	4798      	blx	r3
   12334:	1e03      	subs	r3, r0, #0
   12336:	d00f      	beq.n	12358 <AddConnection+0x78>
                {
                    connectionSlot = i;
   12338:	1d7b      	adds	r3, r7, #5
   1233a:	1dfa      	adds	r2, r7, #7
   1233c:	7812      	ldrb	r2, [r2, #0]
   1233e:	701a      	strb	r2, [r3, #0]
                    status = STATUS_EXISTS;
   12340:	1dbb      	adds	r3, r7, #6
   12342:	2201      	movs	r2, #1
   12344:	701a      	strb	r2, [r3, #0]
                    break;
   12346:	e010      	b.n	1236a <AddConnection+0x8a>
                }
            }
            else if( connectionSlot == 0xFF )
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	781b      	ldrb	r3, [r3, #0]
   1234c:	2bff      	cmp	r3, #255	; 0xff
   1234e:	d103      	bne.n	12358 <AddConnection+0x78>
            {
                // store the first empty slot
                connectionSlot = i;
   12350:	1d7b      	adds	r3, r7, #5
   12352:	1dfa      	adds	r2, r7, #7
   12354:	7812      	ldrb	r2, [r2, #0]
   12356:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < CONNECTION_SIZE; i++)
   12358:	1dfb      	adds	r3, r7, #7
   1235a:	781a      	ldrb	r2, [r3, #0]
   1235c:	1dfb      	adds	r3, r7, #7
   1235e:	3201      	adds	r2, #1
   12360:	701a      	strb	r2, [r3, #0]
   12362:	1dfb      	adds	r3, r7, #7
   12364:	781b      	ldrb	r3, [r3, #0]
   12366:	2b13      	cmp	r3, #19
   12368:	d9c7      	bls.n	122fa <AddConnection+0x1a>
            }  
        }
            
        if( connectionSlot == 0xFF )
   1236a:	1d7b      	adds	r3, r7, #5
   1236c:	781b      	ldrb	r3, [r3, #0]
   1236e:	2bff      	cmp	r3, #255	; 0xff
   12370:	d101      	bne.n	12376 <AddConnection+0x96>
        {
            return STATUS_NOT_ENOUGH_SPACE;
   12372:	23f1      	movs	r3, #241	; 0xf1
   12374:	e079      	b.n	1246a <AddConnection+0x18a>
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
   12376:	4b42      	ldr	r3, [pc, #264]	; (12480 <AddConnection+0x1a0>)
   12378:	781b      	ldrb	r3, [r3, #0]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d002      	beq.n	12384 <AddConnection+0xa4>
            {
                return status;
   1237e:	1dbb      	adds	r3, r7, #6
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	e072      	b.n	1246a <AddConnection+0x18a>
            }
            MyindexinPC = connectionSlot;    
   12384:	4b3f      	ldr	r3, [pc, #252]	; (12484 <AddConnection+0x1a4>)
   12386:	1d7a      	adds	r2, r7, #5
   12388:	7812      	ldrb	r2, [r2, #0]
   1238a:	701a      	strb	r2, [r3, #0]
            // store the source address
            for(i = 0; i < 8; i++)
   1238c:	1dfb      	adds	r3, r7, #7
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
   12392:	e016      	b.n	123c2 <AddConnection+0xe2>
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
   12394:	1d7b      	adds	r3, r7, #5
   12396:	781a      	ldrb	r2, [r3, #0]
   12398:	1dfb      	adds	r3, r7, #7
   1239a:	7819      	ldrb	r1, [r3, #0]
   1239c:	4b36      	ldr	r3, [pc, #216]	; (12478 <AddConnection+0x198>)
   1239e:	6858      	ldr	r0, [r3, #4]
   123a0:	1dfb      	adds	r3, r7, #7
   123a2:	781b      	ldrb	r3, [r3, #0]
   123a4:	18c3      	adds	r3, r0, r3
   123a6:	781c      	ldrb	r4, [r3, #0]
   123a8:	4832      	ldr	r0, [pc, #200]	; (12474 <AddConnection+0x194>)
   123aa:	0013      	movs	r3, r2
   123ac:	009b      	lsls	r3, r3, #2
   123ae:	189b      	adds	r3, r3, r2
   123b0:	005b      	lsls	r3, r3, #1
   123b2:	18c3      	adds	r3, r0, r3
   123b4:	1c22      	adds	r2, r4, #0
   123b6:	545a      	strb	r2, [r3, r1]
            for(i = 0; i < 8; i++)
   123b8:	1dfb      	adds	r3, r7, #7
   123ba:	781a      	ldrb	r2, [r3, #0]
   123bc:	1dfb      	adds	r3, r7, #7
   123be:	3201      	adds	r2, #1
   123c0:	701a      	strb	r2, [r3, #0]
   123c2:	1dfb      	adds	r3, r7, #7
   123c4:	781b      	ldrb	r3, [r3, #0]
   123c6:	2b07      	cmp	r3, #7
   123c8:	d9e4      	bls.n	12394 <AddConnection+0xb4>
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
   123ca:	1d7b      	adds	r3, r7, #5
   123cc:	781a      	ldrb	r2, [r3, #0]
   123ce:	4929      	ldr	r1, [pc, #164]	; (12474 <AddConnection+0x194>)
   123d0:	2008      	movs	r0, #8
   123d2:	0013      	movs	r3, r2
   123d4:	009b      	lsls	r3, r3, #2
   123d6:	189b      	adds	r3, r3, r2
   123d8:	005b      	lsls	r3, r3, #1
   123da:	18cb      	adds	r3, r1, r3
   123dc:	181b      	adds	r3, r3, r0
   123de:	785a      	ldrb	r2, [r3, #1]
   123e0:	2180      	movs	r1, #128	; 0x80
   123e2:	4249      	negs	r1, r1
   123e4:	430a      	orrs	r2, r1
   123e6:	705a      	strb	r2, [r3, #1]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
   123e8:	1d7b      	adds	r3, r7, #5
   123ea:	781a      	ldrb	r2, [r3, #0]
   123ec:	4b22      	ldr	r3, [pc, #136]	; (12478 <AddConnection+0x198>)
   123ee:	689b      	ldr	r3, [r3, #8]
   123f0:	3302      	adds	r3, #2
   123f2:	781b      	ldrb	r3, [r3, #0]
   123f4:	1c19      	adds	r1, r3, #0
   123f6:	2301      	movs	r3, #1
   123f8:	400b      	ands	r3, r1
   123fa:	b2d9      	uxtb	r1, r3
   123fc:	481d      	ldr	r0, [pc, #116]	; (12474 <AddConnection+0x194>)
   123fe:	2408      	movs	r4, #8
   12400:	0013      	movs	r3, r2
   12402:	009b      	lsls	r3, r3, #2
   12404:	189b      	adds	r3, r3, r2
   12406:	005b      	lsls	r3, r3, #1
   12408:	18c3      	adds	r3, r0, r3
   1240a:	191b      	adds	r3, r3, r4
   1240c:	2201      	movs	r2, #1
   1240e:	4011      	ands	r1, r2
   12410:	0008      	movs	r0, r1
   12412:	785a      	ldrb	r2, [r3, #1]
   12414:	2101      	movs	r1, #1
   12416:	438a      	bics	r2, r1
   12418:	1c11      	adds	r1, r2, #0
   1241a:	1c02      	adds	r2, r0, #0
   1241c:	430a      	orrs	r2, r1
   1241e:	705a      	strb	r2, [r3, #1]
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
                }
            #endif
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
   12420:	1d7b      	adds	r3, r7, #5
   12422:	781a      	ldrb	r2, [r3, #0]
   12424:	4b14      	ldr	r3, [pc, #80]	; (12478 <AddConnection+0x198>)
   12426:	689b      	ldr	r3, [r3, #8]
   12428:	78d8      	ldrb	r0, [r3, #3]
   1242a:	4912      	ldr	r1, [pc, #72]	; (12474 <AddConnection+0x194>)
   1242c:	0013      	movs	r3, r2
   1242e:	009b      	lsls	r3, r3, #2
   12430:	189b      	adds	r3, r3, r2
   12432:	005b      	lsls	r3, r3, #1
   12434:	18cb      	adds	r3, r1, r3
   12436:	3308      	adds	r3, #8
   12438:	1c02      	adds	r2, r0, #0
   1243a:	701a      	strb	r2, [r3, #0]
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	781a      	ldrb	r2, [r3, #0]
   12440:	4b11      	ldr	r3, [pc, #68]	; (12488 <AddConnection+0x1a8>)
   12442:	0092      	lsls	r2, r2, #2
   12444:	2100      	movs	r1, #0
   12446:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
   12448:	4b10      	ldr	r3, [pc, #64]	; (1248c <AddConnection+0x1ac>)
   1244a:	1d7a      	adds	r2, r7, #5
   1244c:	7812      	ldrb	r2, [r2, #0]
   1244e:	701a      	strb	r2, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
   12450:	4a0f      	ldr	r2, [pc, #60]	; (12490 <AddConnection+0x1b0>)
   12452:	7813      	ldrb	r3, [r2, #0]
   12454:	2110      	movs	r1, #16
   12456:	438b      	bics	r3, r1
   12458:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
   1245a:	4b0e      	ldr	r3, [pc, #56]	; (12494 <AddConnection+0x1b4>)
   1245c:	4798      	blx	r3
   1245e:	0003      	movs	r3, r0
   12460:	001a      	movs	r2, r3
   12462:	4b0d      	ldr	r3, [pc, #52]	; (12498 <AddConnection+0x1b8>)
   12464:	701a      	strb	r2, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
   12466:	1dbb      	adds	r3, r7, #6
   12468:	781b      	ldrb	r3, [r3, #0]
    }
   1246a:	0018      	movs	r0, r3
   1246c:	46bd      	mov	sp, r7
   1246e:	b003      	add	sp, #12
   12470:	bd90      	pop	{r4, r7, pc}
   12472:	46c0      	nop			; (mov r8, r8)
   12474:	20002308 	.word	0x20002308
   12478:	20002474 	.word	0x20002474
   1247c:	0001202d 	.word	0x0001202d
   12480:	200005ad 	.word	0x200005ad
   12484:	2000243c 	.word	0x2000243c
   12488:	200023ec 	.word	0x200023ec
   1248c:	20002304 	.word	0x20002304
   12490:	20002440 	.word	0x20002440
   12494:	00011691 	.word	0x00011691
   12498:	200023eb 	.word	0x200023eb

0001249c <MiApp_ConnectionMode>:
 * Remarks:    
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
   1249c:	b580      	push	{r7, lr}
   1249e:	b082      	sub	sp, #8
   124a0:	af00      	add	r7, sp, #0
   124a2:	0002      	movs	r2, r0
   124a4:	1dfb      	adds	r3, r7, #7
   124a6:	701a      	strb	r2, [r3, #0]
    if( Mode > 3 )
   124a8:	1dfb      	adds	r3, r7, #7
   124aa:	781b      	ldrb	r3, [r3, #0]
   124ac:	2b03      	cmp	r3, #3
   124ae:	d813      	bhi.n	124d8 <MiApp_ConnectionMode+0x3c>
    {
        return;
    }
    ConnMode = Mode;
   124b0:	4b0b      	ldr	r3, [pc, #44]	; (124e0 <MiApp_ConnectionMode+0x44>)
   124b2:	1dfa      	adds	r2, r7, #7
   124b4:	7812      	ldrb	r2, [r2, #0]
   124b6:	701a      	strb	r2, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
   124b8:	4b0a      	ldr	r3, [pc, #40]	; (124e4 <MiApp_ConnectionMode+0x48>)
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	b25b      	sxtb	r3, r3
   124be:	220f      	movs	r2, #15
   124c0:	4013      	ands	r3, r2
   124c2:	b25a      	sxtb	r2, r3
   124c4:	4b06      	ldr	r3, [pc, #24]	; (124e0 <MiApp_ConnectionMode+0x44>)
   124c6:	781b      	ldrb	r3, [r3, #0]
   124c8:	011b      	lsls	r3, r3, #4
   124ca:	b25b      	sxtb	r3, r3
   124cc:	4313      	orrs	r3, r2
   124ce:	b25b      	sxtb	r3, r3
   124d0:	b2da      	uxtb	r2, r3
   124d2:	4b04      	ldr	r3, [pc, #16]	; (124e4 <MiApp_ConnectionMode+0x48>)
   124d4:	701a      	strb	r2, [r3, #0]
   124d6:	e000      	b.n	124da <MiApp_ConnectionMode+0x3e>
        return;
   124d8:	46c0      	nop			; (mov r8, r8)
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
   124da:	46bd      	mov	sp, r7
   124dc:	b002      	add	sp, #8
   124de:	bd80      	pop	{r7, pc}
   124e0:	200005ad 	.word	0x200005ad
   124e4:	200023e4 	.word	0x200023e4

000124e8 <iot_message_reportInfo>:

}


cJSON* iot_message_reportInfo(char* device_type, char* mac_addr, int report_data_num, NodeInfo data_info[])
{
   124e8:	b590      	push	{r4, r7, lr}
   124ea:	b087      	sub	sp, #28
   124ec:	af00      	add	r7, sp, #0
   124ee:	60f8      	str	r0, [r7, #12]
   124f0:	60b9      	str	r1, [r7, #8]
   124f2:	607a      	str	r2, [r7, #4]
   124f4:	603b      	str	r3, [r7, #0]
	cJSON *json2CloudData;
	cJSON *json2CloudDataArray1;
	
	json2CloudData=cJSON_CreateObject();
   124f6:	4b3f      	ldr	r3, [pc, #252]	; (125f4 <iot_message_reportInfo+0x10c>)
   124f8:	4798      	blx	r3
   124fa:	0003      	movs	r3, r0
   124fc:	617b      	str	r3, [r7, #20]
	json2CloudDataArray1=cJSON_CreateArray();
   124fe:	4b3e      	ldr	r3, [pc, #248]	; (125f8 <iot_message_reportInfo+0x110>)
   12500:	4798      	blx	r3
   12502:	0003      	movs	r3, r0
   12504:	613b      	str	r3, [r7, #16]

	if((json2CloudData == NULL) || (json2CloudDataArray1 == NULL))
   12506:	697b      	ldr	r3, [r7, #20]
   12508:	2b00      	cmp	r3, #0
   1250a:	d002      	beq.n	12512 <iot_message_reportInfo+0x2a>
   1250c:	693b      	ldr	r3, [r7, #16]
   1250e:	2b00      	cmp	r3, #0
   12510:	d104      	bne.n	1251c <iot_message_reportInfo+0x34>
	{
		printf("json2CloudData malloc fail");
   12512:	4b3a      	ldr	r3, [pc, #232]	; (125fc <iot_message_reportInfo+0x114>)
   12514:	0018      	movs	r0, r3
   12516:	4b3a      	ldr	r3, [pc, #232]	; (12600 <iot_message_reportInfo+0x118>)
   12518:	4798      	blx	r3
		while(1);
   1251a:	e7fe      	b.n	1251a <iot_message_reportInfo+0x32>
	}
	if (miwiNodeTemp > 0)
   1251c:	4b39      	ldr	r3, [pc, #228]	; (12604 <iot_message_reportInfo+0x11c>)
   1251e:	681b      	ldr	r3, [r3, #0]
   12520:	2b00      	cmp	r3, #0
   12522:	dd36      	ble.n	12592 <iot_message_reportInfo+0xaa>
	{
		cJSON_AddStringToObject(json2CloudData, MIWI_BATTERY_DATATYPE_NAME, CONST_BATTERY);
   12524:	4b38      	ldr	r3, [pc, #224]	; (12608 <iot_message_reportInfo+0x120>)
   12526:	0018      	movs	r0, r3
   12528:	4b38      	ldr	r3, [pc, #224]	; (1260c <iot_message_reportInfo+0x124>)
   1252a:	4798      	blx	r3
   1252c:	0002      	movs	r2, r0
   1252e:	4938      	ldr	r1, [pc, #224]	; (12610 <iot_message_reportInfo+0x128>)
   12530:	697b      	ldr	r3, [r7, #20]
   12532:	0018      	movs	r0, r3
   12534:	4b37      	ldr	r3, [pc, #220]	; (12614 <iot_message_reportInfo+0x12c>)
   12536:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_RSSI_DATATYPE_NAME, miwiNodeRssi);
   12538:	4b37      	ldr	r3, [pc, #220]	; (12618 <iot_message_reportInfo+0x130>)
   1253a:	681a      	ldr	r2, [r3, #0]
   1253c:	4b37      	ldr	r3, [pc, #220]	; (1261c <iot_message_reportInfo+0x134>)
   1253e:	0010      	movs	r0, r2
   12540:	4798      	blx	r3
   12542:	0003      	movs	r3, r0
   12544:	000c      	movs	r4, r1
   12546:	0018      	movs	r0, r3
   12548:	0021      	movs	r1, r4
   1254a:	4b35      	ldr	r3, [pc, #212]	; (12620 <iot_message_reportInfo+0x138>)
   1254c:	4798      	blx	r3
   1254e:	0002      	movs	r2, r0
   12550:	4934      	ldr	r1, [pc, #208]	; (12624 <iot_message_reportInfo+0x13c>)
   12552:	697b      	ldr	r3, [r7, #20]
   12554:	0018      	movs	r0, r3
   12556:	4b2f      	ldr	r3, [pc, #188]	; (12614 <iot_message_reportInfo+0x12c>)
   12558:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_TEMP_DATATYPE_NAME, miwiNodeTemp);
   1255a:	4b2a      	ldr	r3, [pc, #168]	; (12604 <iot_message_reportInfo+0x11c>)
   1255c:	681a      	ldr	r2, [r3, #0]
   1255e:	4b2f      	ldr	r3, [pc, #188]	; (1261c <iot_message_reportInfo+0x134>)
   12560:	0010      	movs	r0, r2
   12562:	4798      	blx	r3
   12564:	0003      	movs	r3, r0
   12566:	000c      	movs	r4, r1
   12568:	0018      	movs	r0, r3
   1256a:	0021      	movs	r1, r4
   1256c:	4b2c      	ldr	r3, [pc, #176]	; (12620 <iot_message_reportInfo+0x138>)
   1256e:	4798      	blx	r3
   12570:	0002      	movs	r2, r0
   12572:	492d      	ldr	r1, [pc, #180]	; (12628 <iot_message_reportInfo+0x140>)
   12574:	697b      	ldr	r3, [r7, #20]
   12576:	0018      	movs	r0, r3
   12578:	4b26      	ldr	r3, [pc, #152]	; (12614 <iot_message_reportInfo+0x12c>)
   1257a:	4798      	blx	r3
		cJSON_AddStringToObject(json2CloudData, MIWI_NODEID_DATATYPE_NAME, miwiNodeLocation);
   1257c:	4b2b      	ldr	r3, [pc, #172]	; (1262c <iot_message_reportInfo+0x144>)
   1257e:	0018      	movs	r0, r3
   12580:	4b22      	ldr	r3, [pc, #136]	; (1260c <iot_message_reportInfo+0x124>)
   12582:	4798      	blx	r3
   12584:	0002      	movs	r2, r0
   12586:	492a      	ldr	r1, [pc, #168]	; (12630 <iot_message_reportInfo+0x148>)
   12588:	697b      	ldr	r3, [r7, #20]
   1258a:	0018      	movs	r0, r3
   1258c:	4b21      	ldr	r3, [pc, #132]	; (12614 <iot_message_reportInfo+0x12c>)
   1258e:	4798      	blx	r3
   12590:	e02b      	b.n	125ea <iot_message_reportInfo+0x102>
	}
	else
	{
		cJSON_AddStringToObject(json2CloudData, MIWI_BATTERY_DATATYPE_NAME, CONST_BATTERY);
   12592:	4b1d      	ldr	r3, [pc, #116]	; (12608 <iot_message_reportInfo+0x120>)
   12594:	0018      	movs	r0, r3
   12596:	4b1d      	ldr	r3, [pc, #116]	; (1260c <iot_message_reportInfo+0x124>)
   12598:	4798      	blx	r3
   1259a:	0002      	movs	r2, r0
   1259c:	491c      	ldr	r1, [pc, #112]	; (12610 <iot_message_reportInfo+0x128>)
   1259e:	697b      	ldr	r3, [r7, #20]
   125a0:	0018      	movs	r0, r3
   125a2:	4b1c      	ldr	r3, [pc, #112]	; (12614 <iot_message_reportInfo+0x12c>)
   125a4:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_RSSI_DATATYPE_NAME, INIT_RSSI);
   125a6:	2300      	movs	r3, #0
   125a8:	4c22      	ldr	r4, [pc, #136]	; (12634 <iot_message_reportInfo+0x14c>)
   125aa:	0018      	movs	r0, r3
   125ac:	0021      	movs	r1, r4
   125ae:	4b1c      	ldr	r3, [pc, #112]	; (12620 <iot_message_reportInfo+0x138>)
   125b0:	4798      	blx	r3
   125b2:	0002      	movs	r2, r0
   125b4:	491b      	ldr	r1, [pc, #108]	; (12624 <iot_message_reportInfo+0x13c>)
   125b6:	697b      	ldr	r3, [r7, #20]
   125b8:	0018      	movs	r0, r3
   125ba:	4b16      	ldr	r3, [pc, #88]	; (12614 <iot_message_reportInfo+0x12c>)
   125bc:	4798      	blx	r3
		cJSON_AddNumberToObject(json2CloudData, MIWI_TEMP_DATATYPE_NAME, INIT_TEMP);
   125be:	2300      	movs	r3, #0
   125c0:	4c1d      	ldr	r4, [pc, #116]	; (12638 <iot_message_reportInfo+0x150>)
   125c2:	0018      	movs	r0, r3
   125c4:	0021      	movs	r1, r4
   125c6:	4b16      	ldr	r3, [pc, #88]	; (12620 <iot_message_reportInfo+0x138>)
   125c8:	4798      	blx	r3
   125ca:	0002      	movs	r2, r0
   125cc:	4916      	ldr	r1, [pc, #88]	; (12628 <iot_message_reportInfo+0x140>)
   125ce:	697b      	ldr	r3, [r7, #20]
   125d0:	0018      	movs	r0, r3
   125d2:	4b10      	ldr	r3, [pc, #64]	; (12614 <iot_message_reportInfo+0x12c>)
   125d4:	4798      	blx	r3
		cJSON_AddStringToObject(json2CloudData, MIWI_NODEID_DATATYPE_NAME, INIT_NODEID);
   125d6:	4b19      	ldr	r3, [pc, #100]	; (1263c <iot_message_reportInfo+0x154>)
   125d8:	0018      	movs	r0, r3
   125da:	4b0c      	ldr	r3, [pc, #48]	; (1260c <iot_message_reportInfo+0x124>)
   125dc:	4798      	blx	r3
   125de:	0002      	movs	r2, r0
   125e0:	4913      	ldr	r1, [pc, #76]	; (12630 <iot_message_reportInfo+0x148>)
   125e2:	697b      	ldr	r3, [r7, #20]
   125e4:	0018      	movs	r0, r3
   125e6:	4b0b      	ldr	r3, [pc, #44]	; (12614 <iot_message_reportInfo+0x12c>)
   125e8:	4798      	blx	r3
	}
	return json2CloudData;
   125ea:	697b      	ldr	r3, [r7, #20]
}
   125ec:	0018      	movs	r0, r3
   125ee:	46bd      	mov	sp, r7
   125f0:	b007      	add	sp, #28
   125f2:	bd90      	pop	{r4, r7, pc}
   125f4:	0000cb51 	.word	0x0000cb51
   125f8:	0000cb29 	.word	0x0000cb29
   125fc:	0001e95c 	.word	0x0001e95c
   12600:	0001bc4d 	.word	0x0001bc4d
   12604:	200025b8 	.word	0x200025b8
   12608:	0001e9a4 	.word	0x0001e9a4
   1260c:	0000caed 	.word	0x0000caed
   12610:	0001e9ac 	.word	0x0001e9ac
   12614:	0000ca4d 	.word	0x0000ca4d
   12618:	200024f8 	.word	0x200024f8
   1261c:	0001b8c1 	.word	0x0001b8c1
   12620:	0000caa5 	.word	0x0000caa5
   12624:	0001e9b4 	.word	0x0001e9b4
   12628:	0001e9bc 	.word	0x0001e9bc
   1262c:	20002504 	.word	0x20002504
   12630:	0001e9d8 	.word	0x0001e9d8
   12634:	c055c000 	.word	0xc055c000
   12638:	40524000 	.word	0x40524000
   1263c:	0001e9c8 	.word	0x0001e9c8

00012640 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   12640:	b580      	push	{r7, lr}
   12642:	b082      	sub	sp, #8
   12644:	af00      	add	r7, sp, #0
   12646:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   12648:	687b      	ldr	r3, [r7, #4]
   1264a:	2b00      	cmp	r3, #0
   1264c:	d00c      	beq.n	12668 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1264e:	4b08      	ldr	r3, [pc, #32]	; (12670 <delay_cycles+0x30>)
   12650:	687a      	ldr	r2, [r7, #4]
   12652:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   12654:	4b06      	ldr	r3, [pc, #24]	; (12670 <delay_cycles+0x30>)
   12656:	2200      	movs	r2, #0
   12658:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1265a:	46c0      	nop			; (mov r8, r8)
   1265c:	4b04      	ldr	r3, [pc, #16]	; (12670 <delay_cycles+0x30>)
   1265e:	681a      	ldr	r2, [r3, #0]
   12660:	2380      	movs	r3, #128	; 0x80
   12662:	025b      	lsls	r3, r3, #9
   12664:	4013      	ands	r3, r2
   12666:	d0f9      	beq.n	1265c <delay_cycles+0x1c>
		};
	}
}
   12668:	46c0      	nop			; (mov r8, r8)
   1266a:	46bd      	mov	sp, r7
   1266c:	b002      	add	sp, #8
   1266e:	bd80      	pop	{r7, pc}
   12670:	e000e010 	.word	0xe000e010

00012674 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   12674:	b580      	push	{r7, lr}
   12676:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   12678:	2000      	movs	r0, #0
   1267a:	4b0f      	ldr	r3, [pc, #60]	; (126b8 <delay_init+0x44>)
   1267c:	4798      	blx	r3
   1267e:	0002      	movs	r2, r0
   12680:	4b0e      	ldr	r3, [pc, #56]	; (126bc <delay_init+0x48>)
   12682:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   12684:	4b0d      	ldr	r3, [pc, #52]	; (126bc <delay_init+0x48>)
   12686:	6818      	ldr	r0, [r3, #0]
   12688:	4b0d      	ldr	r3, [pc, #52]	; (126c0 <delay_init+0x4c>)
   1268a:	22fa      	movs	r2, #250	; 0xfa
   1268c:	0091      	lsls	r1, r2, #2
   1268e:	4798      	blx	r3
   12690:	0003      	movs	r3, r0
   12692:	001a      	movs	r2, r3
   12694:	4b09      	ldr	r3, [pc, #36]	; (126bc <delay_init+0x48>)
   12696:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   12698:	4b08      	ldr	r3, [pc, #32]	; (126bc <delay_init+0x48>)
   1269a:	6818      	ldr	r0, [r3, #0]
   1269c:	4b08      	ldr	r3, [pc, #32]	; (126c0 <delay_init+0x4c>)
   1269e:	22fa      	movs	r2, #250	; 0xfa
   126a0:	0091      	lsls	r1, r2, #2
   126a2:	4798      	blx	r3
   126a4:	0003      	movs	r3, r0
   126a6:	001a      	movs	r2, r3
   126a8:	4b06      	ldr	r3, [pc, #24]	; (126c4 <delay_init+0x50>)
   126aa:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   126ac:	4b06      	ldr	r3, [pc, #24]	; (126c8 <delay_init+0x54>)
   126ae:	2205      	movs	r2, #5
   126b0:	601a      	str	r2, [r3, #0]
}
   126b2:	46c0      	nop			; (mov r8, r8)
   126b4:	46bd      	mov	sp, r7
   126b6:	bd80      	pop	{r7, pc}
   126b8:	00016919 	.word	0x00016919
   126bc:	200005b0 	.word	0x200005b0
   126c0:	00019ae9 	.word	0x00019ae9
   126c4:	200005b4 	.word	0x200005b4
   126c8:	e000e010 	.word	0xe000e010

000126cc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   126cc:	b580      	push	{r7, lr}
   126ce:	b082      	sub	sp, #8
   126d0:	af00      	add	r7, sp, #0
   126d2:	6078      	str	r0, [r7, #4]
	while (n--) {
   126d4:	e004      	b.n	126e0 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   126d6:	4b07      	ldr	r3, [pc, #28]	; (126f4 <delay_cycles_us+0x28>)
   126d8:	681b      	ldr	r3, [r3, #0]
   126da:	0018      	movs	r0, r3
   126dc:	4b06      	ldr	r3, [pc, #24]	; (126f8 <delay_cycles_us+0x2c>)
   126de:	4798      	blx	r3
	while (n--) {
   126e0:	687b      	ldr	r3, [r7, #4]
   126e2:	1e5a      	subs	r2, r3, #1
   126e4:	607a      	str	r2, [r7, #4]
   126e6:	2b00      	cmp	r3, #0
   126e8:	d1f5      	bne.n	126d6 <delay_cycles_us+0xa>
	}
}
   126ea:	46c0      	nop			; (mov r8, r8)
   126ec:	46bd      	mov	sp, r7
   126ee:	b002      	add	sp, #8
   126f0:	bd80      	pop	{r7, pc}
   126f2:	46c0      	nop			; (mov r8, r8)
   126f4:	200005b4 	.word	0x200005b4
   126f8:	00012641 	.word	0x00012641

000126fc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   126fc:	b580      	push	{r7, lr}
   126fe:	b082      	sub	sp, #8
   12700:	af00      	add	r7, sp, #0
   12702:	6078      	str	r0, [r7, #4]
	while (n--) {
   12704:	e004      	b.n	12710 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   12706:	4b07      	ldr	r3, [pc, #28]	; (12724 <delay_cycles_ms+0x28>)
   12708:	681b      	ldr	r3, [r3, #0]
   1270a:	0018      	movs	r0, r3
   1270c:	4b06      	ldr	r3, [pc, #24]	; (12728 <delay_cycles_ms+0x2c>)
   1270e:	4798      	blx	r3
	while (n--) {
   12710:	687b      	ldr	r3, [r7, #4]
   12712:	1e5a      	subs	r2, r3, #1
   12714:	607a      	str	r2, [r7, #4]
   12716:	2b00      	cmp	r3, #0
   12718:	d1f5      	bne.n	12706 <delay_cycles_ms+0xa>
	}
}
   1271a:	46c0      	nop			; (mov r8, r8)
   1271c:	46bd      	mov	sp, r7
   1271e:	b002      	add	sp, #8
   12720:	bd80      	pop	{r7, pc}
   12722:	46c0      	nop			; (mov r8, r8)
   12724:	200005b0 	.word	0x200005b0
   12728:	00012641 	.word	0x00012641

0001272c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   1272c:	b580      	push	{r7, lr}
   1272e:	b082      	sub	sp, #8
   12730:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   12732:	4b10      	ldr	r3, [pc, #64]	; (12774 <cpu_irq_enter_critical+0x48>)
   12734:	681b      	ldr	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d112      	bne.n	12760 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1273a:	f3ef 8310 	mrs	r3, PRIMASK
   1273e:	607b      	str	r3, [r7, #4]
  return(result);
   12740:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   12742:	2b00      	cmp	r3, #0
   12744:	d109      	bne.n	1275a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   12746:	b672      	cpsid	i
   12748:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1274c:	4b0a      	ldr	r3, [pc, #40]	; (12778 <cpu_irq_enter_critical+0x4c>)
   1274e:	2200      	movs	r2, #0
   12750:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   12752:	4b0a      	ldr	r3, [pc, #40]	; (1277c <cpu_irq_enter_critical+0x50>)
   12754:	2201      	movs	r2, #1
   12756:	701a      	strb	r2, [r3, #0]
   12758:	e002      	b.n	12760 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1275a:	4b08      	ldr	r3, [pc, #32]	; (1277c <cpu_irq_enter_critical+0x50>)
   1275c:	2200      	movs	r2, #0
   1275e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   12760:	4b04      	ldr	r3, [pc, #16]	; (12774 <cpu_irq_enter_critical+0x48>)
   12762:	681b      	ldr	r3, [r3, #0]
   12764:	1c5a      	adds	r2, r3, #1
   12766:	4b03      	ldr	r3, [pc, #12]	; (12774 <cpu_irq_enter_critical+0x48>)
   12768:	601a      	str	r2, [r3, #0]
}
   1276a:	46c0      	nop			; (mov r8, r8)
   1276c:	46bd      	mov	sp, r7
   1276e:	b002      	add	sp, #8
   12770:	bd80      	pop	{r7, pc}
   12772:	46c0      	nop			; (mov r8, r8)
   12774:	20001694 	.word	0x20001694
   12778:	200005b8 	.word	0x200005b8
   1277c:	20001698 	.word	0x20001698

00012780 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   12780:	b580      	push	{r7, lr}
   12782:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12784:	4b0b      	ldr	r3, [pc, #44]	; (127b4 <cpu_irq_leave_critical+0x34>)
   12786:	681b      	ldr	r3, [r3, #0]
   12788:	1e5a      	subs	r2, r3, #1
   1278a:	4b0a      	ldr	r3, [pc, #40]	; (127b4 <cpu_irq_leave_critical+0x34>)
   1278c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1278e:	4b09      	ldr	r3, [pc, #36]	; (127b4 <cpu_irq_leave_critical+0x34>)
   12790:	681b      	ldr	r3, [r3, #0]
   12792:	2b00      	cmp	r3, #0
   12794:	d10a      	bne.n	127ac <cpu_irq_leave_critical+0x2c>
   12796:	4b08      	ldr	r3, [pc, #32]	; (127b8 <cpu_irq_leave_critical+0x38>)
   12798:	781b      	ldrb	r3, [r3, #0]
   1279a:	b2db      	uxtb	r3, r3
   1279c:	2b00      	cmp	r3, #0
   1279e:	d005      	beq.n	127ac <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   127a0:	4b06      	ldr	r3, [pc, #24]	; (127bc <cpu_irq_leave_critical+0x3c>)
   127a2:	2201      	movs	r2, #1
   127a4:	701a      	strb	r2, [r3, #0]
   127a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   127aa:	b662      	cpsie	i
	}
}
   127ac:	46c0      	nop			; (mov r8, r8)
   127ae:	46bd      	mov	sp, r7
   127b0:	bd80      	pop	{r7, pc}
   127b2:	46c0      	nop			; (mov r8, r8)
   127b4:	20001694 	.word	0x20001694
   127b8:	20001698 	.word	0x20001698
   127bc:	200005b8 	.word	0x200005b8

000127c0 <system_pinmux_get_config_defaults>:
{
   127c0:	b580      	push	{r7, lr}
   127c2:	b082      	sub	sp, #8
   127c4:	af00      	add	r7, sp, #0
   127c6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   127c8:	687b      	ldr	r3, [r7, #4]
   127ca:	2280      	movs	r2, #128	; 0x80
   127cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   127ce:	687b      	ldr	r3, [r7, #4]
   127d0:	2200      	movs	r2, #0
   127d2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   127d4:	687b      	ldr	r3, [r7, #4]
   127d6:	2201      	movs	r2, #1
   127d8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   127da:	687b      	ldr	r3, [r7, #4]
   127dc:	2200      	movs	r2, #0
   127de:	70da      	strb	r2, [r3, #3]
}
   127e0:	46c0      	nop			; (mov r8, r8)
   127e2:	46bd      	mov	sp, r7
   127e4:	b002      	add	sp, #8
   127e6:	bd80      	pop	{r7, pc}

000127e8 <system_pinmux_get_group_from_gpio_pin>:
{
   127e8:	b580      	push	{r7, lr}
   127ea:	b084      	sub	sp, #16
   127ec:	af00      	add	r7, sp, #0
   127ee:	0002      	movs	r2, r0
   127f0:	1dfb      	adds	r3, r7, #7
   127f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   127f4:	230f      	movs	r3, #15
   127f6:	18fb      	adds	r3, r7, r3
   127f8:	1dfa      	adds	r2, r7, #7
   127fa:	7812      	ldrb	r2, [r2, #0]
   127fc:	09d2      	lsrs	r2, r2, #7
   127fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12800:	230e      	movs	r3, #14
   12802:	18fb      	adds	r3, r7, r3
   12804:	1dfa      	adds	r2, r7, #7
   12806:	7812      	ldrb	r2, [r2, #0]
   12808:	0952      	lsrs	r2, r2, #5
   1280a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1280c:	4b0d      	ldr	r3, [pc, #52]	; (12844 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1280e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   12810:	230f      	movs	r3, #15
   12812:	18fb      	adds	r3, r7, r3
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	2b00      	cmp	r3, #0
   12818:	d10f      	bne.n	1283a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1281a:	230f      	movs	r3, #15
   1281c:	18fb      	adds	r3, r7, r3
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	009b      	lsls	r3, r3, #2
   12822:	2210      	movs	r2, #16
   12824:	4694      	mov	ip, r2
   12826:	44bc      	add	ip, r7
   12828:	4463      	add	r3, ip
   1282a:	3b08      	subs	r3, #8
   1282c:	681a      	ldr	r2, [r3, #0]
   1282e:	230e      	movs	r3, #14
   12830:	18fb      	adds	r3, r7, r3
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	01db      	lsls	r3, r3, #7
   12836:	18d3      	adds	r3, r2, r3
   12838:	e000      	b.n	1283c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1283a:	2300      	movs	r3, #0
}
   1283c:	0018      	movs	r0, r3
   1283e:	46bd      	mov	sp, r7
   12840:	b004      	add	sp, #16
   12842:	bd80      	pop	{r7, pc}
   12844:	40002800 	.word	0x40002800

00012848 <port_get_group_from_gpio_pin>:
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12854:	1dfb      	adds	r3, r7, #7
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	0018      	movs	r0, r3
   1285a:	4b03      	ldr	r3, [pc, #12]	; (12868 <port_get_group_from_gpio_pin+0x20>)
   1285c:	4798      	blx	r3
   1285e:	0003      	movs	r3, r0
}
   12860:	0018      	movs	r0, r3
   12862:	46bd      	mov	sp, r7
   12864:	b002      	add	sp, #8
   12866:	bd80      	pop	{r7, pc}
   12868:	000127e9 	.word	0x000127e9

0001286c <port_get_config_defaults>:
{
   1286c:	b580      	push	{r7, lr}
   1286e:	b082      	sub	sp, #8
   12870:	af00      	add	r7, sp, #0
   12872:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   12874:	687b      	ldr	r3, [r7, #4]
   12876:	2200      	movs	r2, #0
   12878:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1287a:	687b      	ldr	r3, [r7, #4]
   1287c:	2201      	movs	r2, #1
   1287e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   12880:	687b      	ldr	r3, [r7, #4]
   12882:	2200      	movs	r2, #0
   12884:	709a      	strb	r2, [r3, #2]
}
   12886:	46c0      	nop			; (mov r8, r8)
   12888:	46bd      	mov	sp, r7
   1288a:	b002      	add	sp, #8
   1288c:	bd80      	pop	{r7, pc}
	...

00012890 <port_pin_set_output_level>:
{
   12890:	b580      	push	{r7, lr}
   12892:	b084      	sub	sp, #16
   12894:	af00      	add	r7, sp, #0
   12896:	0002      	movs	r2, r0
   12898:	1dfb      	adds	r3, r7, #7
   1289a:	701a      	strb	r2, [r3, #0]
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	1c0a      	adds	r2, r1, #0
   128a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   128a2:	1dfb      	adds	r3, r7, #7
   128a4:	781b      	ldrb	r3, [r3, #0]
   128a6:	0018      	movs	r0, r3
   128a8:	4b0d      	ldr	r3, [pc, #52]	; (128e0 <port_pin_set_output_level+0x50>)
   128aa:	4798      	blx	r3
   128ac:	0003      	movs	r3, r0
   128ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   128b0:	1dfb      	adds	r3, r7, #7
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	221f      	movs	r2, #31
   128b6:	4013      	ands	r3, r2
   128b8:	2201      	movs	r2, #1
   128ba:	409a      	lsls	r2, r3
   128bc:	0013      	movs	r3, r2
   128be:	60bb      	str	r3, [r7, #8]
	if (level) {
   128c0:	1dbb      	adds	r3, r7, #6
   128c2:	781b      	ldrb	r3, [r3, #0]
   128c4:	2b00      	cmp	r3, #0
   128c6:	d003      	beq.n	128d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   128c8:	68fb      	ldr	r3, [r7, #12]
   128ca:	68ba      	ldr	r2, [r7, #8]
   128cc:	619a      	str	r2, [r3, #24]
}
   128ce:	e002      	b.n	128d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   128d0:	68fb      	ldr	r3, [r7, #12]
   128d2:	68ba      	ldr	r2, [r7, #8]
   128d4:	615a      	str	r2, [r3, #20]
}
   128d6:	46c0      	nop			; (mov r8, r8)
   128d8:	46bd      	mov	sp, r7
   128da:	b004      	add	sp, #16
   128dc:	bd80      	pop	{r7, pc}
   128de:	46c0      	nop			; (mov r8, r8)
   128e0:	00012849 	.word	0x00012849

000128e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   128e4:	b580      	push	{r7, lr}
   128e6:	b082      	sub	sp, #8
   128e8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   128ea:	1d3b      	adds	r3, r7, #4
   128ec:	0018      	movs	r0, r3
   128ee:	4b3c      	ldr	r3, [pc, #240]	; (129e0 <system_board_init+0xfc>)
   128f0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   128f2:	1d3b      	adds	r3, r7, #4
   128f4:	2201      	movs	r2, #1
   128f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   128f8:	1d3b      	adds	r3, r7, #4
   128fa:	0019      	movs	r1, r3
   128fc:	2013      	movs	r0, #19
   128fe:	4b39      	ldr	r3, [pc, #228]	; (129e4 <system_board_init+0x100>)
   12900:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   12902:	2101      	movs	r1, #1
   12904:	2013      	movs	r0, #19
   12906:	4b38      	ldr	r3, [pc, #224]	; (129e8 <system_board_init+0x104>)
   12908:	4798      	blx	r3
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1290a:	1d3b      	adds	r3, r7, #4
   1290c:	2201      	movs	r2, #1
   1290e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
   12910:	1d3b      	adds	r3, r7, #4
   12912:	0019      	movs	r1, r3
   12914:	2012      	movs	r0, #18
   12916:	4b33      	ldr	r3, [pc, #204]	; (129e4 <system_board_init+0x100>)
   12918:	4798      	blx	r3
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
   1291a:	2101      	movs	r1, #1
   1291c:	2012      	movs	r0, #18
   1291e:	4b32      	ldr	r3, [pc, #200]	; (129e8 <system_board_init+0x104>)
   12920:	4798      	blx	r3
	//pin_conf.direction  = PORT_PIN_DIR_INPUT;
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(BUTTON_0_PIN, &pin_conf);
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
   12922:	1d3b      	adds	r3, r7, #4
   12924:	0018      	movs	r0, r3
   12926:	4b2e      	ldr	r3, [pc, #184]	; (129e0 <system_board_init+0xfc>)
   12928:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1292a:	1d3b      	adds	r3, r7, #4
   1292c:	2201      	movs	r2, #1
   1292e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
   12930:	1d3b      	adds	r3, r7, #4
   12932:	0019      	movs	r1, r3
   12934:	2052      	movs	r0, #82	; 0x52
   12936:	4b2b      	ldr	r3, [pc, #172]	; (129e4 <system_board_init+0x100>)
   12938:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
   1293a:	1d3b      	adds	r3, r7, #4
   1293c:	0019      	movs	r1, r3
   1293e:	203e      	movs	r0, #62	; 0x3e
   12940:	4b28      	ldr	r3, [pc, #160]	; (129e4 <system_board_init+0x100>)
   12942:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
   12944:	1d3b      	adds	r3, r7, #4
   12946:	0019      	movs	r1, r3
   12948:	203f      	movs	r0, #63	; 0x3f
   1294a:	4b26      	ldr	r3, [pc, #152]	; (129e4 <system_board_init+0x100>)
   1294c:	4798      	blx	r3
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
   1294e:	1d3b      	adds	r3, r7, #4
   12950:	0019      	movs	r1, r3
   12952:	202f      	movs	r0, #47	; 0x2f
   12954:	4b23      	ldr	r3, [pc, #140]	; (129e4 <system_board_init+0x100>)
   12956:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
   12958:	1d3b      	adds	r3, r7, #4
   1295a:	0019      	movs	r1, r3
   1295c:	2014      	movs	r0, #20
   1295e:	4b21      	ldr	r3, [pc, #132]	; (129e4 <system_board_init+0x100>)
   12960:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
   12962:	2101      	movs	r1, #1
   12964:	2052      	movs	r0, #82	; 0x52
   12966:	4b20      	ldr	r3, [pc, #128]	; (129e8 <system_board_init+0x104>)
   12968:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
   1296a:	2101      	movs	r1, #1
   1296c:	203e      	movs	r0, #62	; 0x3e
   1296e:	4b1e      	ldr	r3, [pc, #120]	; (129e8 <system_board_init+0x104>)
   12970:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
   12972:	2101      	movs	r1, #1
   12974:	203f      	movs	r0, #63	; 0x3f
   12976:	4b1c      	ldr	r3, [pc, #112]	; (129e8 <system_board_init+0x104>)
   12978:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
   1297a:	2101      	movs	r1, #1
   1297c:	202f      	movs	r0, #47	; 0x2f
   1297e:	4b1a      	ldr	r3, [pc, #104]	; (129e8 <system_board_init+0x104>)
   12980:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
   12982:	2101      	movs	r1, #1
   12984:	2014      	movs	r0, #20
   12986:	4b18      	ldr	r3, [pc, #96]	; (129e8 <system_board_init+0x104>)
   12988:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1298a:	1d3b      	adds	r3, r7, #4
   1298c:	2200      	movs	r2, #0
   1298e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
   12990:	1d3b      	adds	r3, r7, #4
   12992:	0019      	movs	r1, r3
   12994:	2053      	movs	r0, #83	; 0x53
   12996:	4b13      	ldr	r3, [pc, #76]	; (129e4 <system_board_init+0x100>)
   12998:	4798      	blx	r3
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
   1299a:	4b14      	ldr	r3, [pc, #80]	; (129ec <system_board_init+0x108>)
   1299c:	4a13      	ldr	r2, [pc, #76]	; (129ec <system_board_init+0x108>)
   1299e:	69d2      	ldr	r2, [r2, #28]
   129a0:	2180      	movs	r1, #128	; 0x80
   129a2:	0209      	lsls	r1, r1, #8
   129a4:	430a      	orrs	r2, r1
   129a6:	61da      	str	r2, [r3, #28]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR30 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
   129a8:	4b11      	ldr	r3, [pc, #68]	; (129f0 <system_board_init+0x10c>)
   129aa:	2204      	movs	r2, #4
   129ac:	801a      	strh	r2, [r3, #0]
	
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
   129ae:	003b      	movs	r3, r7
   129b0:	0018      	movs	r0, r3
   129b2:	4b10      	ldr	r3, [pc, #64]	; (129f4 <system_board_init+0x110>)
   129b4:	4798      	blx	r3
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
   129b6:	003b      	movs	r3, r7
   129b8:	2205      	movs	r2, #5
   129ba:	701a      	strb	r2, [r3, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
   129bc:	003b      	movs	r3, r7
   129be:	2201      	movs	r2, #1
   129c0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
   129c2:	003b      	movs	r3, r7
   129c4:	0019      	movs	r1, r3
   129c6:	2009      	movs	r0, #9
   129c8:	4b0b      	ldr	r3, [pc, #44]	; (129f8 <system_board_init+0x114>)
   129ca:	4798      	blx	r3
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
   129cc:	003b      	movs	r3, r7
   129ce:	0019      	movs	r1, r3
   129d0:	200c      	movs	r0, #12
   129d2:	4b09      	ldr	r3, [pc, #36]	; (129f8 <system_board_init+0x114>)
   129d4:	4798      	blx	r3
#endif	
}
   129d6:	46c0      	nop			; (mov r8, r8)
   129d8:	46bd      	mov	sp, r7
   129da:	b002      	add	sp, #8
   129dc:	bd80      	pop	{r7, pc}
   129de:	46c0      	nop			; (mov r8, r8)
   129e0:	0001286d 	.word	0x0001286d
   129e4:	00013101 	.word	0x00013101
   129e8:	00012891 	.word	0x00012891
   129ec:	40000400 	.word	0x40000400
   129f0:	42003c00 	.word	0x42003c00
   129f4:	000127c1 	.word	0x000127c1
   129f8:	00016d01 	.word	0x00016d01

000129fc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   129fc:	b580      	push	{r7, lr}
   129fe:	b084      	sub	sp, #16
   12a00:	af00      	add	r7, sp, #0
   12a02:	0002      	movs	r2, r0
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   12a08:	230f      	movs	r3, #15
   12a0a:	18fb      	adds	r3, r7, r3
   12a0c:	1dfa      	adds	r2, r7, #7
   12a0e:	7812      	ldrb	r2, [r2, #0]
   12a10:	0952      	lsrs	r2, r2, #5
   12a12:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   12a14:	230f      	movs	r3, #15
   12a16:	18fb      	adds	r3, r7, r3
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	2b00      	cmp	r3, #0
   12a1c:	d10c      	bne.n	12a38 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12a1e:	4b09      	ldr	r3, [pc, #36]	; (12a44 <_extint_get_eic_from_channel+0x48>)
   12a20:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   12a22:	230f      	movs	r3, #15
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	009b      	lsls	r3, r3, #2
   12a2a:	2210      	movs	r2, #16
   12a2c:	4694      	mov	ip, r2
   12a2e:	44bc      	add	ip, r7
   12a30:	4463      	add	r3, ip
   12a32:	3b08      	subs	r3, #8
   12a34:	681b      	ldr	r3, [r3, #0]
   12a36:	e000      	b.n	12a3a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   12a38:	2300      	movs	r3, #0
	}
}
   12a3a:	0018      	movs	r0, r3
   12a3c:	46bd      	mov	sp, r7
   12a3e:	b004      	add	sp, #16
   12a40:	bd80      	pop	{r7, pc}
   12a42:	46c0      	nop			; (mov r8, r8)
   12a44:	40002400 	.word	0x40002400

00012a48 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   12a48:	b580      	push	{r7, lr}
   12a4a:	b084      	sub	sp, #16
   12a4c:	af00      	add	r7, sp, #0
   12a4e:	0002      	movs	r2, r0
   12a50:	1dfb      	adds	r3, r7, #7
   12a52:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12a54:	1dfb      	adds	r3, r7, #7
   12a56:	781b      	ldrb	r3, [r3, #0]
   12a58:	0018      	movs	r0, r3
   12a5a:	4b0b      	ldr	r3, [pc, #44]	; (12a88 <extint_chan_is_detected+0x40>)
   12a5c:	4798      	blx	r3
   12a5e:	0003      	movs	r3, r0
   12a60:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   12a62:	1dfb      	adds	r3, r7, #7
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	221f      	movs	r2, #31
   12a68:	4013      	ands	r3, r2
   12a6a:	2201      	movs	r2, #1
   12a6c:	409a      	lsls	r2, r3
   12a6e:	0013      	movs	r3, r2
   12a70:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   12a72:	68fb      	ldr	r3, [r7, #12]
   12a74:	695b      	ldr	r3, [r3, #20]
   12a76:	68ba      	ldr	r2, [r7, #8]
   12a78:	4013      	ands	r3, r2
   12a7a:	1e5a      	subs	r2, r3, #1
   12a7c:	4193      	sbcs	r3, r2
   12a7e:	b2db      	uxtb	r3, r3
}
   12a80:	0018      	movs	r0, r3
   12a82:	46bd      	mov	sp, r7
   12a84:	b004      	add	sp, #16
   12a86:	bd80      	pop	{r7, pc}
   12a88:	000129fd 	.word	0x000129fd

00012a8c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b084      	sub	sp, #16
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12a98:	1dfb      	adds	r3, r7, #7
   12a9a:	781b      	ldrb	r3, [r3, #0]
   12a9c:	0018      	movs	r0, r3
   12a9e:	4b09      	ldr	r3, [pc, #36]	; (12ac4 <extint_chan_clear_detected+0x38>)
   12aa0:	4798      	blx	r3
   12aa2:	0003      	movs	r3, r0
   12aa4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   12aa6:	1dfb      	adds	r3, r7, #7
   12aa8:	781b      	ldrb	r3, [r3, #0]
   12aaa:	221f      	movs	r2, #31
   12aac:	4013      	ands	r3, r2
   12aae:	2201      	movs	r2, #1
   12ab0:	409a      	lsls	r2, r3
   12ab2:	0013      	movs	r3, r2
   12ab4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   12ab6:	68fb      	ldr	r3, [r7, #12]
   12ab8:	68ba      	ldr	r2, [r7, #8]
   12aba:	615a      	str	r2, [r3, #20]
}
   12abc:	46c0      	nop			; (mov r8, r8)
   12abe:	46bd      	mov	sp, r7
   12ac0:	b004      	add	sp, #16
   12ac2:	bd80      	pop	{r7, pc}
   12ac4:	000129fd 	.word	0x000129fd

00012ac8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12ac8:	b580      	push	{r7, lr}
   12aca:	b082      	sub	sp, #8
   12acc:	af00      	add	r7, sp, #0
   12ace:	6078      	str	r0, [r7, #4]
   12ad0:	0008      	movs	r0, r1
   12ad2:	0011      	movs	r1, r2
   12ad4:	1cfb      	adds	r3, r7, #3
   12ad6:	1c02      	adds	r2, r0, #0
   12ad8:	701a      	strb	r2, [r3, #0]
   12ada:	1cbb      	adds	r3, r7, #2
   12adc:	1c0a      	adds	r2, r1, #0
   12ade:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   12ae0:	1cbb      	adds	r3, r7, #2
   12ae2:	781b      	ldrb	r3, [r3, #0]
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d001      	beq.n	12aec <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   12ae8:	2317      	movs	r3, #23
   12aea:	e019      	b.n	12b20 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   12aec:	1cfb      	adds	r3, r7, #3
   12aee:	781a      	ldrb	r2, [r3, #0]
   12af0:	4b0d      	ldr	r3, [pc, #52]	; (12b28 <extint_register_callback+0x60>)
   12af2:	0092      	lsls	r2, r2, #2
   12af4:	58d3      	ldr	r3, [r2, r3]
   12af6:	2b00      	cmp	r3, #0
   12af8:	d107      	bne.n	12b0a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   12afa:	1cfb      	adds	r3, r7, #3
   12afc:	781a      	ldrb	r2, [r3, #0]
   12afe:	4b0a      	ldr	r3, [pc, #40]	; (12b28 <extint_register_callback+0x60>)
   12b00:	0092      	lsls	r2, r2, #2
   12b02:	6879      	ldr	r1, [r7, #4]
   12b04:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   12b06:	2300      	movs	r3, #0
   12b08:	e00a      	b.n	12b20 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   12b0a:	1cfb      	adds	r3, r7, #3
   12b0c:	781a      	ldrb	r2, [r3, #0]
   12b0e:	4b06      	ldr	r3, [pc, #24]	; (12b28 <extint_register_callback+0x60>)
   12b10:	0092      	lsls	r2, r2, #2
   12b12:	58d2      	ldr	r2, [r2, r3]
   12b14:	687b      	ldr	r3, [r7, #4]
   12b16:	429a      	cmp	r2, r3
   12b18:	d101      	bne.n	12b1e <extint_register_callback+0x56>
		return STATUS_OK;
   12b1a:	2300      	movs	r3, #0
   12b1c:	e000      	b.n	12b20 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   12b1e:	231d      	movs	r3, #29
}
   12b20:	0018      	movs	r0, r3
   12b22:	46bd      	mov	sp, r7
   12b24:	b002      	add	sp, #8
   12b26:	bd80      	pop	{r7, pc}
   12b28:	20002488 	.word	0x20002488

00012b2c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	0002      	movs	r2, r0
   12b34:	1dfb      	adds	r3, r7, #7
   12b36:	701a      	strb	r2, [r3, #0]
   12b38:	1dbb      	adds	r3, r7, #6
   12b3a:	1c0a      	adds	r2, r1, #0
   12b3c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   12b3e:	1dbb      	adds	r3, r7, #6
   12b40:	781b      	ldrb	r3, [r3, #0]
   12b42:	2b00      	cmp	r3, #0
   12b44:	d10e      	bne.n	12b64 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12b46:	1dfb      	adds	r3, r7, #7
   12b48:	781b      	ldrb	r3, [r3, #0]
   12b4a:	0018      	movs	r0, r3
   12b4c:	4b08      	ldr	r3, [pc, #32]	; (12b70 <extint_chan_enable_callback+0x44>)
   12b4e:	4798      	blx	r3
   12b50:	0003      	movs	r3, r0
   12b52:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   12b54:	1dfb      	adds	r3, r7, #7
   12b56:	781b      	ldrb	r3, [r3, #0]
   12b58:	2201      	movs	r2, #1
   12b5a:	409a      	lsls	r2, r3
   12b5c:	68fb      	ldr	r3, [r7, #12]
   12b5e:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12b60:	2300      	movs	r3, #0
   12b62:	e000      	b.n	12b66 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12b64:	2317      	movs	r3, #23
}
   12b66:	0018      	movs	r0, r3
   12b68:	46bd      	mov	sp, r7
   12b6a:	b004      	add	sp, #16
   12b6c:	bd80      	pop	{r7, pc}
   12b6e:	46c0      	nop			; (mov r8, r8)
   12b70:	000129fd 	.word	0x000129fd

00012b74 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b084      	sub	sp, #16
   12b78:	af00      	add	r7, sp, #0
   12b7a:	0002      	movs	r2, r0
   12b7c:	1dfb      	adds	r3, r7, #7
   12b7e:	701a      	strb	r2, [r3, #0]
   12b80:	1dbb      	adds	r3, r7, #6
   12b82:	1c0a      	adds	r2, r1, #0
   12b84:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   12b86:	1dbb      	adds	r3, r7, #6
   12b88:	781b      	ldrb	r3, [r3, #0]
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	d10e      	bne.n	12bac <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12b8e:	1dfb      	adds	r3, r7, #7
   12b90:	781b      	ldrb	r3, [r3, #0]
   12b92:	0018      	movs	r0, r3
   12b94:	4b08      	ldr	r3, [pc, #32]	; (12bb8 <extint_chan_disable_callback+0x44>)
   12b96:	4798      	blx	r3
   12b98:	0003      	movs	r3, r0
   12b9a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   12b9c:	1dfb      	adds	r3, r7, #7
   12b9e:	781b      	ldrb	r3, [r3, #0]
   12ba0:	2201      	movs	r2, #1
   12ba2:	409a      	lsls	r2, r3
   12ba4:	68fb      	ldr	r3, [r7, #12]
   12ba6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12ba8:	2300      	movs	r3, #0
   12baa:	e000      	b.n	12bae <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12bac:	2317      	movs	r3, #23
}
   12bae:	0018      	movs	r0, r3
   12bb0:	46bd      	mov	sp, r7
   12bb2:	b004      	add	sp, #16
   12bb4:	bd80      	pop	{r7, pc}
   12bb6:	46c0      	nop			; (mov r8, r8)
   12bb8:	000129fd 	.word	0x000129fd

00012bbc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   12bbc:	b580      	push	{r7, lr}
   12bbe:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12bc0:	4b15      	ldr	r3, [pc, #84]	; (12c18 <EIC_Handler+0x5c>)
   12bc2:	2200      	movs	r2, #0
   12bc4:	701a      	strb	r2, [r3, #0]
   12bc6:	e020      	b.n	12c0a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   12bc8:	4b13      	ldr	r3, [pc, #76]	; (12c18 <EIC_Handler+0x5c>)
   12bca:	781b      	ldrb	r3, [r3, #0]
   12bcc:	0018      	movs	r0, r3
   12bce:	4b13      	ldr	r3, [pc, #76]	; (12c1c <EIC_Handler+0x60>)
   12bd0:	4798      	blx	r3
   12bd2:	1e03      	subs	r3, r0, #0
   12bd4:	d013      	beq.n	12bfe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   12bd6:	4b10      	ldr	r3, [pc, #64]	; (12c18 <EIC_Handler+0x5c>)
   12bd8:	781b      	ldrb	r3, [r3, #0]
   12bda:	0018      	movs	r0, r3
   12bdc:	4b10      	ldr	r3, [pc, #64]	; (12c20 <EIC_Handler+0x64>)
   12bde:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   12be0:	4b0d      	ldr	r3, [pc, #52]	; (12c18 <EIC_Handler+0x5c>)
   12be2:	781b      	ldrb	r3, [r3, #0]
   12be4:	001a      	movs	r2, r3
   12be6:	4b0f      	ldr	r3, [pc, #60]	; (12c24 <EIC_Handler+0x68>)
   12be8:	0092      	lsls	r2, r2, #2
   12bea:	58d3      	ldr	r3, [r2, r3]
   12bec:	2b00      	cmp	r3, #0
   12bee:	d006      	beq.n	12bfe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   12bf0:	4b09      	ldr	r3, [pc, #36]	; (12c18 <EIC_Handler+0x5c>)
   12bf2:	781b      	ldrb	r3, [r3, #0]
   12bf4:	001a      	movs	r2, r3
   12bf6:	4b0b      	ldr	r3, [pc, #44]	; (12c24 <EIC_Handler+0x68>)
   12bf8:	0092      	lsls	r2, r2, #2
   12bfa:	58d3      	ldr	r3, [r2, r3]
   12bfc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12bfe:	4b06      	ldr	r3, [pc, #24]	; (12c18 <EIC_Handler+0x5c>)
   12c00:	781b      	ldrb	r3, [r3, #0]
   12c02:	3301      	adds	r3, #1
   12c04:	b2da      	uxtb	r2, r3
   12c06:	4b04      	ldr	r3, [pc, #16]	; (12c18 <EIC_Handler+0x5c>)
   12c08:	701a      	strb	r2, [r3, #0]
   12c0a:	4b03      	ldr	r3, [pc, #12]	; (12c18 <EIC_Handler+0x5c>)
   12c0c:	781b      	ldrb	r3, [r3, #0]
   12c0e:	2b0f      	cmp	r3, #15
   12c10:	d9da      	bls.n	12bc8 <EIC_Handler+0xc>
			}
		}
	}
}
   12c12:	46c0      	nop			; (mov r8, r8)
   12c14:	46bd      	mov	sp, r7
   12c16:	bd80      	pop	{r7, pc}
   12c18:	20002484 	.word	0x20002484
   12c1c:	00012a49 	.word	0x00012a49
   12c20:	00012a8d 	.word	0x00012a8d
   12c24:	20002488 	.word	0x20002488

00012c28 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12c28:	b580      	push	{r7, lr}
   12c2a:	b082      	sub	sp, #8
   12c2c:	af00      	add	r7, sp, #0
   12c2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12c30:	687b      	ldr	r3, [r7, #4]
   12c32:	2200      	movs	r2, #0
   12c34:	701a      	strb	r2, [r3, #0]
}
   12c36:	46c0      	nop			; (mov r8, r8)
   12c38:	46bd      	mov	sp, r7
   12c3a:	b002      	add	sp, #8
   12c3c:	bd80      	pop	{r7, pc}
	...

00012c40 <system_apb_clock_set_mask>:
{
   12c40:	b580      	push	{r7, lr}
   12c42:	b082      	sub	sp, #8
   12c44:	af00      	add	r7, sp, #0
   12c46:	0002      	movs	r2, r0
   12c48:	6039      	str	r1, [r7, #0]
   12c4a:	1dfb      	adds	r3, r7, #7
   12c4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12c4e:	1dfb      	adds	r3, r7, #7
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	2b04      	cmp	r3, #4
   12c54:	d827      	bhi.n	12ca6 <system_apb_clock_set_mask+0x66>
   12c56:	009a      	lsls	r2, r3, #2
   12c58:	4b16      	ldr	r3, [pc, #88]	; (12cb4 <system_apb_clock_set_mask+0x74>)
   12c5a:	18d3      	adds	r3, r2, r3
   12c5c:	681b      	ldr	r3, [r3, #0]
   12c5e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   12c60:	4b15      	ldr	r3, [pc, #84]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c62:	4a15      	ldr	r2, [pc, #84]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c64:	6951      	ldr	r1, [r2, #20]
   12c66:	683a      	ldr	r2, [r7, #0]
   12c68:	430a      	orrs	r2, r1
   12c6a:	615a      	str	r2, [r3, #20]
			break;
   12c6c:	e01d      	b.n	12caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   12c6e:	4b12      	ldr	r3, [pc, #72]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c70:	4a11      	ldr	r2, [pc, #68]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c72:	6991      	ldr	r1, [r2, #24]
   12c74:	683a      	ldr	r2, [r7, #0]
   12c76:	430a      	orrs	r2, r1
   12c78:	619a      	str	r2, [r3, #24]
			break;
   12c7a:	e016      	b.n	12caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   12c7c:	4b0e      	ldr	r3, [pc, #56]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c7e:	4a0e      	ldr	r2, [pc, #56]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c80:	69d1      	ldr	r1, [r2, #28]
   12c82:	683a      	ldr	r2, [r7, #0]
   12c84:	430a      	orrs	r2, r1
   12c86:	61da      	str	r2, [r3, #28]
			break;
   12c88:	e00f      	b.n	12caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   12c8a:	4b0b      	ldr	r3, [pc, #44]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c8c:	4a0a      	ldr	r2, [pc, #40]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c8e:	6a11      	ldr	r1, [r2, #32]
   12c90:	683a      	ldr	r2, [r7, #0]
   12c92:	430a      	orrs	r2, r1
   12c94:	621a      	str	r2, [r3, #32]
			break;
   12c96:	e008      	b.n	12caa <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   12c98:	4b07      	ldr	r3, [pc, #28]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c9a:	4a07      	ldr	r2, [pc, #28]	; (12cb8 <system_apb_clock_set_mask+0x78>)
   12c9c:	6a51      	ldr	r1, [r2, #36]	; 0x24
   12c9e:	683a      	ldr	r2, [r7, #0]
   12ca0:	430a      	orrs	r2, r1
   12ca2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   12ca4:	e001      	b.n	12caa <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   12ca6:	2317      	movs	r3, #23
   12ca8:	e000      	b.n	12cac <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   12caa:	2300      	movs	r3, #0
}
   12cac:	0018      	movs	r0, r3
   12cae:	46bd      	mov	sp, r7
   12cb0:	b002      	add	sp, #8
   12cb2:	bd80      	pop	{r7, pc}
   12cb4:	0001e9f4 	.word	0x0001e9f4
   12cb8:	40000400 	.word	0x40000400

00012cbc <system_pinmux_get_config_defaults>:
{
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b082      	sub	sp, #8
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	2280      	movs	r2, #128	; 0x80
   12cc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12cca:	687b      	ldr	r3, [r7, #4]
   12ccc:	2200      	movs	r2, #0
   12cce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12cd0:	687b      	ldr	r3, [r7, #4]
   12cd2:	2201      	movs	r2, #1
   12cd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	2200      	movs	r2, #0
   12cda:	70da      	strb	r2, [r3, #3]
}
   12cdc:	46c0      	nop			; (mov r8, r8)
   12cde:	46bd      	mov	sp, r7
   12ce0:	b002      	add	sp, #8
   12ce2:	bd80      	pop	{r7, pc}

00012ce4 <system_interrupt_enable>:
{
   12ce4:	b580      	push	{r7, lr}
   12ce6:	b082      	sub	sp, #8
   12ce8:	af00      	add	r7, sp, #0
   12cea:	0002      	movs	r2, r0
   12cec:	1dfb      	adds	r3, r7, #7
   12cee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cf0:	4b06      	ldr	r3, [pc, #24]	; (12d0c <system_interrupt_enable+0x28>)
   12cf2:	1dfa      	adds	r2, r7, #7
   12cf4:	7812      	ldrb	r2, [r2, #0]
   12cf6:	0011      	movs	r1, r2
   12cf8:	221f      	movs	r2, #31
   12cfa:	400a      	ands	r2, r1
   12cfc:	2101      	movs	r1, #1
   12cfe:	4091      	lsls	r1, r2
   12d00:	000a      	movs	r2, r1
   12d02:	601a      	str	r2, [r3, #0]
}
   12d04:	46c0      	nop			; (mov r8, r8)
   12d06:	46bd      	mov	sp, r7
   12d08:	b002      	add	sp, #8
   12d0a:	bd80      	pop	{r7, pc}
   12d0c:	e000e100 	.word	0xe000e100

00012d10 <_extint_get_eic_from_channel>:
{
   12d10:	b580      	push	{r7, lr}
   12d12:	b084      	sub	sp, #16
   12d14:	af00      	add	r7, sp, #0
   12d16:	0002      	movs	r2, r0
   12d18:	1dfb      	adds	r3, r7, #7
   12d1a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   12d1c:	230f      	movs	r3, #15
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	1dfa      	adds	r2, r7, #7
   12d22:	7812      	ldrb	r2, [r2, #0]
   12d24:	0952      	lsrs	r2, r2, #5
   12d26:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   12d28:	230f      	movs	r3, #15
   12d2a:	18fb      	adds	r3, r7, r3
   12d2c:	781b      	ldrb	r3, [r3, #0]
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d10c      	bne.n	12d4c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12d32:	4b09      	ldr	r3, [pc, #36]	; (12d58 <_extint_get_eic_from_channel+0x48>)
   12d34:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   12d36:	230f      	movs	r3, #15
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	781b      	ldrb	r3, [r3, #0]
   12d3c:	009b      	lsls	r3, r3, #2
   12d3e:	2210      	movs	r2, #16
   12d40:	4694      	mov	ip, r2
   12d42:	44bc      	add	ip, r7
   12d44:	4463      	add	r3, ip
   12d46:	3b08      	subs	r3, #8
   12d48:	681b      	ldr	r3, [r3, #0]
   12d4a:	e000      	b.n	12d4e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   12d4c:	2300      	movs	r3, #0
}
   12d4e:	0018      	movs	r0, r3
   12d50:	46bd      	mov	sp, r7
   12d52:	b004      	add	sp, #16
   12d54:	bd80      	pop	{r7, pc}
   12d56:	46c0      	nop			; (mov r8, r8)
   12d58:	40002400 	.word	0x40002400

00012d5c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   12d5c:	b580      	push	{r7, lr}
   12d5e:	b082      	sub	sp, #8
   12d60:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12d62:	4b15      	ldr	r3, [pc, #84]	; (12db8 <extint_is_syncing+0x5c>)
   12d64:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d66:	2300      	movs	r3, #0
   12d68:	607b      	str	r3, [r7, #4]
   12d6a:	e01c      	b.n	12da6 <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	009b      	lsls	r3, r3, #2
   12d70:	2208      	movs	r2, #8
   12d72:	4694      	mov	ip, r2
   12d74:	44bc      	add	ip, r7
   12d76:	4463      	add	r3, ip
   12d78:	3b08      	subs	r3, #8
   12d7a:	681b      	ldr	r3, [r3, #0]
   12d7c:	685b      	ldr	r3, [r3, #4]
   12d7e:	2202      	movs	r2, #2
   12d80:	4013      	ands	r3, r2
   12d82:	d10b      	bne.n	12d9c <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
   12d84:	687b      	ldr	r3, [r7, #4]
   12d86:	009b      	lsls	r3, r3, #2
   12d88:	2208      	movs	r2, #8
   12d8a:	4694      	mov	ip, r2
   12d8c:	44bc      	add	ip, r7
   12d8e:	4463      	add	r3, ip
   12d90:	3b08      	subs	r3, #8
   12d92:	681b      	ldr	r3, [r3, #0]
   12d94:	685b      	ldr	r3, [r3, #4]
   12d96:	2201      	movs	r2, #1
   12d98:	4013      	ands	r3, r2
   12d9a:	d001      	beq.n	12da0 <extint_is_syncing+0x44>
			return true;
   12d9c:	2301      	movs	r3, #1
   12d9e:	e006      	b.n	12dae <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12da0:	687b      	ldr	r3, [r7, #4]
   12da2:	3301      	adds	r3, #1
   12da4:	607b      	str	r3, [r7, #4]
   12da6:	687b      	ldr	r3, [r7, #4]
   12da8:	2b00      	cmp	r3, #0
   12daa:	d0df      	beq.n	12d6c <extint_is_syncing+0x10>
		}
	}
	return false;
   12dac:	2300      	movs	r3, #0
}
   12dae:	0018      	movs	r0, r3
   12db0:	46bd      	mov	sp, r7
   12db2:	b002      	add	sp, #8
   12db4:	bd80      	pop	{r7, pc}
   12db6:	46c0      	nop			; (mov r8, r8)
   12db8:	40002400 	.word	0x40002400

00012dbc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   12dbc:	b580      	push	{r7, lr}
   12dbe:	b086      	sub	sp, #24
   12dc0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12dc2:	4b38      	ldr	r3, [pc, #224]	; (12ea4 <_system_extint_init+0xe8>)
   12dc4:	60bb      	str	r3, [r7, #8]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
   12dc6:	2380      	movs	r3, #128	; 0x80
   12dc8:	009b      	lsls	r3, r3, #2
   12dca:	0019      	movs	r1, r3
   12dcc:	2000      	movs	r0, #0
   12dce:	4b36      	ldr	r3, [pc, #216]	; (12ea8 <_system_extint_init+0xec>)
   12dd0:	4798      	blx	r3

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12dd2:	1d3b      	adds	r3, r7, #4
   12dd4:	0018      	movs	r0, r3
   12dd6:	4b35      	ldr	r3, [pc, #212]	; (12eac <_system_extint_init+0xf0>)
   12dd8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   12dda:	1d3b      	adds	r3, r7, #4
   12ddc:	2200      	movs	r2, #0
   12dde:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   12de0:	1d3b      	adds	r3, r7, #4
   12de2:	0019      	movs	r1, r3
   12de4:	2003      	movs	r0, #3
   12de6:	4b32      	ldr	r3, [pc, #200]	; (12eb0 <_system_extint_init+0xf4>)
   12de8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   12dea:	2003      	movs	r0, #3
   12dec:	4b31      	ldr	r3, [pc, #196]	; (12eb4 <_system_extint_init+0xf8>)
   12dee:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12df0:	2300      	movs	r3, #0
   12df2:	617b      	str	r3, [r7, #20]
   12df4:	e018      	b.n	12e28 <_system_extint_init+0x6c>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	009b      	lsls	r3, r3, #2
   12dfa:	2218      	movs	r2, #24
   12dfc:	4694      	mov	ip, r2
   12dfe:	44bc      	add	ip, r7
   12e00:	4463      	add	r3, ip
   12e02:	3b10      	subs	r3, #16
   12e04:	681a      	ldr	r2, [r3, #0]
   12e06:	697b      	ldr	r3, [r7, #20]
   12e08:	009b      	lsls	r3, r3, #2
   12e0a:	2118      	movs	r1, #24
   12e0c:	468c      	mov	ip, r1
   12e0e:	44bc      	add	ip, r7
   12e10:	4463      	add	r3, ip
   12e12:	3b10      	subs	r3, #16
   12e14:	681b      	ldr	r3, [r3, #0]
   12e16:	781b      	ldrb	r3, [r3, #0]
   12e18:	b2db      	uxtb	r3, r3
   12e1a:	2101      	movs	r1, #1
   12e1c:	430b      	orrs	r3, r1
   12e1e:	b2db      	uxtb	r3, r3
   12e20:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12e22:	697b      	ldr	r3, [r7, #20]
   12e24:	3301      	adds	r3, #1
   12e26:	617b      	str	r3, [r7, #20]
   12e28:	697b      	ldr	r3, [r7, #20]
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d0e3      	beq.n	12df6 <_system_extint_init+0x3a>
	}

	while (extint_is_syncing()) {
   12e2e:	46c0      	nop			; (mov r8, r8)
   12e30:	4b21      	ldr	r3, [pc, #132]	; (12eb8 <_system_extint_init+0xfc>)
   12e32:	4798      	blx	r3
   12e34:	1e03      	subs	r3, r0, #0
   12e36:	d1fb      	bne.n	12e30 <_system_extint_init+0x74>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12e38:	2300      	movs	r3, #0
   12e3a:	613b      	str	r3, [r7, #16]
   12e3c:	e00e      	b.n	12e5c <_system_extint_init+0xa0>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
   12e3e:	693b      	ldr	r3, [r7, #16]
   12e40:	009b      	lsls	r3, r3, #2
   12e42:	2218      	movs	r2, #24
   12e44:	4694      	mov	ip, r2
   12e46:	44bc      	add	ip, r7
   12e48:	4463      	add	r3, ip
   12e4a:	3b10      	subs	r3, #16
   12e4c:	681a      	ldr	r2, [r3, #0]
   12e4e:	7813      	ldrb	r3, [r2, #0]
   12e50:	2110      	movs	r1, #16
   12e52:	438b      	bics	r3, r1
   12e54:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12e56:	693b      	ldr	r3, [r7, #16]
   12e58:	3301      	adds	r3, #1
   12e5a:	613b      	str	r3, [r7, #16]
   12e5c:	693b      	ldr	r3, [r7, #16]
   12e5e:	2b00      	cmp	r3, #0
   12e60:	d0ed      	beq.n	12e3e <_system_extint_init+0x82>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12e62:	230f      	movs	r3, #15
   12e64:	18fb      	adds	r3, r7, r3
   12e66:	2200      	movs	r2, #0
   12e68:	701a      	strb	r2, [r3, #0]
   12e6a:	e00d      	b.n	12e88 <_system_extint_init+0xcc>
		_extint_dev.callbacks[j] = NULL;
   12e6c:	230f      	movs	r3, #15
   12e6e:	18fb      	adds	r3, r7, r3
   12e70:	781a      	ldrb	r2, [r3, #0]
   12e72:	4b12      	ldr	r3, [pc, #72]	; (12ebc <_system_extint_init+0x100>)
   12e74:	0092      	lsls	r2, r2, #2
   12e76:	2100      	movs	r1, #0
   12e78:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12e7a:	230f      	movs	r3, #15
   12e7c:	18fb      	adds	r3, r7, r3
   12e7e:	781a      	ldrb	r2, [r3, #0]
   12e80:	230f      	movs	r3, #15
   12e82:	18fb      	adds	r3, r7, r3
   12e84:	3201      	adds	r2, #1
   12e86:	701a      	strb	r2, [r3, #0]
   12e88:	230f      	movs	r3, #15
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	781b      	ldrb	r3, [r3, #0]
   12e8e:	2b0f      	cmp	r3, #15
   12e90:	d9ec      	bls.n	12e6c <_system_extint_init+0xb0>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   12e92:	2003      	movs	r0, #3
   12e94:	4b0a      	ldr	r3, [pc, #40]	; (12ec0 <_system_extint_init+0x104>)
   12e96:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   12e98:	4b0a      	ldr	r3, [pc, #40]	; (12ec4 <_system_extint_init+0x108>)
   12e9a:	4798      	blx	r3
}
   12e9c:	46c0      	nop			; (mov r8, r8)
   12e9e:	46bd      	mov	sp, r7
   12ea0:	b006      	add	sp, #24
   12ea2:	bd80      	pop	{r7, pc}
   12ea4:	40002400 	.word	0x40002400
   12ea8:	00012c41 	.word	0x00012c41
   12eac:	00012c29 	.word	0x00012c29
   12eb0:	000169d9 	.word	0x000169d9
   12eb4:	00016a19 	.word	0x00016a19
   12eb8:	00012d5d 	.word	0x00012d5d
   12ebc:	20002488 	.word	0x20002488
   12ec0:	00012ce5 	.word	0x00012ce5
   12ec4:	00012ec9 	.word	0x00012ec9

00012ec8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   12ec8:	b580      	push	{r7, lr}
   12eca:	b082      	sub	sp, #8
   12ecc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12ece:	4b15      	ldr	r3, [pc, #84]	; (12f24 <_extint_enable+0x5c>)
   12ed0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12ed2:	2300      	movs	r3, #0
   12ed4:	607b      	str	r3, [r7, #4]
   12ed6:	e018      	b.n	12f0a <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
   12ed8:	687b      	ldr	r3, [r7, #4]
   12eda:	009b      	lsls	r3, r3, #2
   12edc:	2208      	movs	r2, #8
   12ede:	4694      	mov	ip, r2
   12ee0:	44bc      	add	ip, r7
   12ee2:	4463      	add	r3, ip
   12ee4:	3b08      	subs	r3, #8
   12ee6:	681a      	ldr	r2, [r3, #0]
   12ee8:	687b      	ldr	r3, [r7, #4]
   12eea:	009b      	lsls	r3, r3, #2
   12eec:	2108      	movs	r1, #8
   12eee:	468c      	mov	ip, r1
   12ef0:	44bc      	add	ip, r7
   12ef2:	4463      	add	r3, ip
   12ef4:	3b08      	subs	r3, #8
   12ef6:	681b      	ldr	r3, [r3, #0]
   12ef8:	781b      	ldrb	r3, [r3, #0]
   12efa:	b2db      	uxtb	r3, r3
   12efc:	2102      	movs	r1, #2
   12efe:	430b      	orrs	r3, r1
   12f00:	b2db      	uxtb	r3, r3
   12f02:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	3301      	adds	r3, #1
   12f08:	607b      	str	r3, [r7, #4]
   12f0a:	687b      	ldr	r3, [r7, #4]
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	d0e3      	beq.n	12ed8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   12f10:	46c0      	nop			; (mov r8, r8)
   12f12:	4b05      	ldr	r3, [pc, #20]	; (12f28 <_extint_enable+0x60>)
   12f14:	4798      	blx	r3
   12f16:	1e03      	subs	r3, r0, #0
   12f18:	d1fb      	bne.n	12f12 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   12f1a:	46c0      	nop			; (mov r8, r8)
   12f1c:	46bd      	mov	sp, r7
   12f1e:	b002      	add	sp, #8
   12f20:	bd80      	pop	{r7, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	40002400 	.word	0x40002400
   12f28:	00012d5d 	.word	0x00012d5d

00012f2c <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
   12f2c:	b580      	push	{r7, lr}
   12f2e:	b082      	sub	sp, #8
   12f30:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12f32:	4b15      	ldr	r3, [pc, #84]	; (12f88 <_extint_disable+0x5c>)
   12f34:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12f36:	2300      	movs	r3, #0
   12f38:	607b      	str	r3, [r7, #4]
   12f3a:	e018      	b.n	12f6e <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
   12f3c:	687b      	ldr	r3, [r7, #4]
   12f3e:	009b      	lsls	r3, r3, #2
   12f40:	2208      	movs	r2, #8
   12f42:	4694      	mov	ip, r2
   12f44:	44bc      	add	ip, r7
   12f46:	4463      	add	r3, ip
   12f48:	3b08      	subs	r3, #8
   12f4a:	681a      	ldr	r2, [r3, #0]
   12f4c:	687b      	ldr	r3, [r7, #4]
   12f4e:	009b      	lsls	r3, r3, #2
   12f50:	2108      	movs	r1, #8
   12f52:	468c      	mov	ip, r1
   12f54:	44bc      	add	ip, r7
   12f56:	4463      	add	r3, ip
   12f58:	3b08      	subs	r3, #8
   12f5a:	681b      	ldr	r3, [r3, #0]
   12f5c:	781b      	ldrb	r3, [r3, #0]
   12f5e:	b2db      	uxtb	r3, r3
   12f60:	2102      	movs	r1, #2
   12f62:	438b      	bics	r3, r1
   12f64:	b2db      	uxtb	r3, r3
   12f66:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12f68:	687b      	ldr	r3, [r7, #4]
   12f6a:	3301      	adds	r3, #1
   12f6c:	607b      	str	r3, [r7, #4]
   12f6e:	687b      	ldr	r3, [r7, #4]
   12f70:	2b00      	cmp	r3, #0
   12f72:	d0e3      	beq.n	12f3c <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
   12f74:	46c0      	nop			; (mov r8, r8)
   12f76:	4b05      	ldr	r3, [pc, #20]	; (12f8c <_extint_disable+0x60>)
   12f78:	4798      	blx	r3
   12f7a:	1e03      	subs	r3, r0, #0
   12f7c:	d1fb      	bne.n	12f76 <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   12f7e:	46c0      	nop			; (mov r8, r8)
   12f80:	46bd      	mov	sp, r7
   12f82:	b002      	add	sp, #8
   12f84:	bd80      	pop	{r7, pc}
   12f86:	46c0      	nop			; (mov r8, r8)
   12f88:	40002400 	.word	0x40002400
   12f8c:	00012d5d 	.word	0x00012d5d

00012f90 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   12f90:	b580      	push	{r7, lr}
   12f92:	b082      	sub	sp, #8
   12f94:	af00      	add	r7, sp, #0
   12f96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   12f98:	687b      	ldr	r3, [r7, #4]
   12f9a:	2200      	movs	r2, #0
   12f9c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   12f9e:	687b      	ldr	r3, [r7, #4]
   12fa0:	2200      	movs	r2, #0
   12fa2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	2201      	movs	r2, #1
   12fa8:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
   12faa:	687b      	ldr	r3, [r7, #4]
   12fac:	2200      	movs	r2, #0
   12fae:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   12fb0:	687b      	ldr	r3, [r7, #4]
   12fb2:	2202      	movs	r2, #2
   12fb4:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
   12fb6:	687b      	ldr	r3, [r7, #4]
   12fb8:	2200      	movs	r2, #0
   12fba:	725a      	strb	r2, [r3, #9]
}
   12fbc:	46c0      	nop			; (mov r8, r8)
   12fbe:	46bd      	mov	sp, r7
   12fc0:	b002      	add	sp, #8
   12fc2:	bd80      	pop	{r7, pc}

00012fc4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   12fc4:	b580      	push	{r7, lr}
   12fc6:	b086      	sub	sp, #24
   12fc8:	af00      	add	r7, sp, #0
   12fca:	0002      	movs	r2, r0
   12fcc:	6039      	str	r1, [r7, #0]
   12fce:	1dfb      	adds	r3, r7, #7
   12fd0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
   12fd2:	4b3c      	ldr	r3, [pc, #240]	; (130c4 <extint_chan_set_config+0x100>)
   12fd4:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12fd6:	2308      	movs	r3, #8
   12fd8:	18fb      	adds	r3, r7, r3
   12fda:	0018      	movs	r0, r3
   12fdc:	4b3a      	ldr	r3, [pc, #232]	; (130c8 <extint_chan_set_config+0x104>)
   12fde:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   12fe0:	683b      	ldr	r3, [r7, #0]
   12fe2:	685b      	ldr	r3, [r3, #4]
   12fe4:	b2da      	uxtb	r2, r3
   12fe6:	2308      	movs	r3, #8
   12fe8:	18fb      	adds	r3, r7, r3
   12fea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12fec:	2308      	movs	r3, #8
   12fee:	18fb      	adds	r3, r7, r3
   12ff0:	2200      	movs	r2, #0
   12ff2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   12ff4:	683b      	ldr	r3, [r7, #0]
   12ff6:	7a1a      	ldrb	r2, [r3, #8]
   12ff8:	2308      	movs	r3, #8
   12ffa:	18fb      	adds	r3, r7, r3
   12ffc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   12ffe:	683b      	ldr	r3, [r7, #0]
   13000:	681b      	ldr	r3, [r3, #0]
   13002:	b2db      	uxtb	r3, r3
   13004:	2208      	movs	r2, #8
   13006:	18ba      	adds	r2, r7, r2
   13008:	0011      	movs	r1, r2
   1300a:	0018      	movs	r0, r3
   1300c:	4b2f      	ldr	r3, [pc, #188]	; (130cc <extint_chan_set_config+0x108>)
   1300e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   13010:	1dfb      	adds	r3, r7, #7
   13012:	781b      	ldrb	r3, [r3, #0]
   13014:	0018      	movs	r0, r3
   13016:	4b2e      	ldr	r3, [pc, #184]	; (130d0 <extint_chan_set_config+0x10c>)
   13018:	4798      	blx	r3
   1301a:	0003      	movs	r3, r0
   1301c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1301e:	1dfb      	adds	r3, r7, #7
   13020:	781b      	ldrb	r3, [r3, #0]
   13022:	2207      	movs	r2, #7
   13024:	4013      	ands	r3, r2
   13026:	009b      	lsls	r3, r3, #2
   13028:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1302a:	683b      	ldr	r3, [r7, #0]
   1302c:	7adb      	ldrb	r3, [r3, #11]
   1302e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   13030:	683b      	ldr	r3, [r7, #0]
   13032:	7a9b      	ldrb	r3, [r3, #10]
   13034:	2b00      	cmp	r3, #0
   13036:	d003      	beq.n	13040 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
   13038:	697b      	ldr	r3, [r7, #20]
   1303a:	2208      	movs	r2, #8
   1303c:	4313      	orrs	r3, r2
   1303e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   13040:	1dfb      	adds	r3, r7, #7
   13042:	781b      	ldrb	r3, [r3, #0]
   13044:	08db      	lsrs	r3, r3, #3
   13046:	b2db      	uxtb	r3, r3
   13048:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1304a:	1dfb      	adds	r3, r7, #7
   1304c:	781b      	ldrb	r3, [r3, #0]
   1304e:	08db      	lsrs	r3, r3, #3
   13050:	b2db      	uxtb	r3, r3
   13052:	693a      	ldr	r2, [r7, #16]
   13054:	3306      	adds	r3, #6
   13056:	009b      	lsls	r3, r3, #2
   13058:	18d3      	adds	r3, r2, r3
   1305a:	3304      	adds	r3, #4
   1305c:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1305e:	210f      	movs	r1, #15
   13060:	68fa      	ldr	r2, [r7, #12]
   13062:	4091      	lsls	r1, r2
   13064:	000a      	movs	r2, r1
   13066:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   13068:	401a      	ands	r2, r3
			(new_config << config_pos);
   1306a:	6979      	ldr	r1, [r7, #20]
   1306c:	68fb      	ldr	r3, [r7, #12]
   1306e:	4099      	lsls	r1, r3
   13070:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   13072:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   13074:	6939      	ldr	r1, [r7, #16]
   13076:	1d83      	adds	r3, r0, #6
   13078:	009b      	lsls	r3, r3, #2
   1307a:	18cb      	adds	r3, r1, r3
   1307c:	3304      	adds	r3, #4
   1307e:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
   13080:	683b      	ldr	r3, [r7, #0]
   13082:	7a5b      	ldrb	r3, [r3, #9]
   13084:	2b00      	cmp	r3, #0
   13086:	d00a      	beq.n	1309e <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
   13088:	693b      	ldr	r3, [r7, #16]
   1308a:	699a      	ldr	r2, [r3, #24]
   1308c:	1dfb      	adds	r3, r7, #7
   1308e:	781b      	ldrb	r3, [r3, #0]
   13090:	2101      	movs	r1, #1
   13092:	4099      	lsls	r1, r3
   13094:	000b      	movs	r3, r1
   13096:	431a      	orrs	r2, r3
   13098:	693b      	ldr	r3, [r7, #16]
   1309a:	619a      	str	r2, [r3, #24]
   1309c:	e00c      	b.n	130b8 <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
   1309e:	693b      	ldr	r3, [r7, #16]
   130a0:	699b      	ldr	r3, [r3, #24]
   130a2:	1dfa      	adds	r2, r7, #7
   130a4:	7812      	ldrb	r2, [r2, #0]
   130a6:	2101      	movs	r1, #1
   130a8:	4091      	lsls	r1, r2
   130aa:	000a      	movs	r2, r1
   130ac:	43d2      	mvns	r2, r2
   130ae:	4013      	ands	r3, r2
   130b0:	041b      	lsls	r3, r3, #16
   130b2:	0c1a      	lsrs	r2, r3, #16
   130b4:	693b      	ldr	r3, [r7, #16]
   130b6:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
   130b8:	4b06      	ldr	r3, [pc, #24]	; (130d4 <extint_chan_set_config+0x110>)
   130ba:	4798      	blx	r3
}
   130bc:	46c0      	nop			; (mov r8, r8)
   130be:	46bd      	mov	sp, r7
   130c0:	b006      	add	sp, #24
   130c2:	bd80      	pop	{r7, pc}
   130c4:	00012f2d 	.word	0x00012f2d
   130c8:	00012cbd 	.word	0x00012cbd
   130cc:	00016d01 	.word	0x00016d01
   130d0:	00012d11 	.word	0x00012d11
   130d4:	00012ec9 	.word	0x00012ec9

000130d8 <system_pinmux_get_config_defaults>:
{
   130d8:	b580      	push	{r7, lr}
   130da:	b082      	sub	sp, #8
   130dc:	af00      	add	r7, sp, #0
   130de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   130e0:	687b      	ldr	r3, [r7, #4]
   130e2:	2280      	movs	r2, #128	; 0x80
   130e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   130e6:	687b      	ldr	r3, [r7, #4]
   130e8:	2200      	movs	r2, #0
   130ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   130ec:	687b      	ldr	r3, [r7, #4]
   130ee:	2201      	movs	r2, #1
   130f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   130f2:	687b      	ldr	r3, [r7, #4]
   130f4:	2200      	movs	r2, #0
   130f6:	70da      	strb	r2, [r3, #3]
}
   130f8:	46c0      	nop			; (mov r8, r8)
   130fa:	46bd      	mov	sp, r7
   130fc:	b002      	add	sp, #8
   130fe:	bd80      	pop	{r7, pc}

00013100 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   13100:	b580      	push	{r7, lr}
   13102:	b084      	sub	sp, #16
   13104:	af00      	add	r7, sp, #0
   13106:	0002      	movs	r2, r0
   13108:	6039      	str	r1, [r7, #0]
   1310a:	1dfb      	adds	r3, r7, #7
   1310c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1310e:	230c      	movs	r3, #12
   13110:	18fb      	adds	r3, r7, r3
   13112:	0018      	movs	r0, r3
   13114:	4b10      	ldr	r3, [pc, #64]	; (13158 <port_pin_set_config+0x58>)
   13116:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   13118:	230c      	movs	r3, #12
   1311a:	18fb      	adds	r3, r7, r3
   1311c:	2280      	movs	r2, #128	; 0x80
   1311e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   13120:	683b      	ldr	r3, [r7, #0]
   13122:	781a      	ldrb	r2, [r3, #0]
   13124:	230c      	movs	r3, #12
   13126:	18fb      	adds	r3, r7, r3
   13128:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1312a:	683b      	ldr	r3, [r7, #0]
   1312c:	785a      	ldrb	r2, [r3, #1]
   1312e:	230c      	movs	r3, #12
   13130:	18fb      	adds	r3, r7, r3
   13132:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   13134:	683b      	ldr	r3, [r7, #0]
   13136:	789a      	ldrb	r2, [r3, #2]
   13138:	230c      	movs	r3, #12
   1313a:	18fb      	adds	r3, r7, r3
   1313c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1313e:	230c      	movs	r3, #12
   13140:	18fa      	adds	r2, r7, r3
   13142:	1dfb      	adds	r3, r7, #7
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	0011      	movs	r1, r2
   13148:	0018      	movs	r0, r3
   1314a:	4b04      	ldr	r3, [pc, #16]	; (1315c <port_pin_set_config+0x5c>)
   1314c:	4798      	blx	r3
}
   1314e:	46c0      	nop			; (mov r8, r8)
   13150:	46bd      	mov	sp, r7
   13152:	b004      	add	sp, #16
   13154:	bd80      	pop	{r7, pc}
   13156:	46c0      	nop			; (mov r8, r8)
   13158:	000130d9 	.word	0x000130d9
   1315c:	00016d01 	.word	0x00016d01

00013160 <system_gclk_chan_get_config_defaults>:
{
   13160:	b580      	push	{r7, lr}
   13162:	b082      	sub	sp, #8
   13164:	af00      	add	r7, sp, #0
   13166:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13168:	687b      	ldr	r3, [r7, #4]
   1316a:	2200      	movs	r2, #0
   1316c:	701a      	strb	r2, [r3, #0]
}
   1316e:	46c0      	nop			; (mov r8, r8)
   13170:	46bd      	mov	sp, r7
   13172:	b002      	add	sp, #8
   13174:	bd80      	pop	{r7, pc}
	...

00013178 <system_apb_clock_set_mask>:
{
   13178:	b580      	push	{r7, lr}
   1317a:	b082      	sub	sp, #8
   1317c:	af00      	add	r7, sp, #0
   1317e:	0002      	movs	r2, r0
   13180:	6039      	str	r1, [r7, #0]
   13182:	1dfb      	adds	r3, r7, #7
   13184:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13186:	1dfb      	adds	r3, r7, #7
   13188:	781b      	ldrb	r3, [r3, #0]
   1318a:	2b04      	cmp	r3, #4
   1318c:	d827      	bhi.n	131de <system_apb_clock_set_mask+0x66>
   1318e:	009a      	lsls	r2, r3, #2
   13190:	4b16      	ldr	r3, [pc, #88]	; (131ec <system_apb_clock_set_mask+0x74>)
   13192:	18d3      	adds	r3, r2, r3
   13194:	681b      	ldr	r3, [r3, #0]
   13196:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   13198:	4b15      	ldr	r3, [pc, #84]	; (131f0 <system_apb_clock_set_mask+0x78>)
   1319a:	4a15      	ldr	r2, [pc, #84]	; (131f0 <system_apb_clock_set_mask+0x78>)
   1319c:	6951      	ldr	r1, [r2, #20]
   1319e:	683a      	ldr	r2, [r7, #0]
   131a0:	430a      	orrs	r2, r1
   131a2:	615a      	str	r2, [r3, #20]
			break;
   131a4:	e01d      	b.n	131e2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   131a6:	4b12      	ldr	r3, [pc, #72]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131a8:	4a11      	ldr	r2, [pc, #68]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131aa:	6991      	ldr	r1, [r2, #24]
   131ac:	683a      	ldr	r2, [r7, #0]
   131ae:	430a      	orrs	r2, r1
   131b0:	619a      	str	r2, [r3, #24]
			break;
   131b2:	e016      	b.n	131e2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   131b4:	4b0e      	ldr	r3, [pc, #56]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131b6:	4a0e      	ldr	r2, [pc, #56]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131b8:	69d1      	ldr	r1, [r2, #28]
   131ba:	683a      	ldr	r2, [r7, #0]
   131bc:	430a      	orrs	r2, r1
   131be:	61da      	str	r2, [r3, #28]
			break;
   131c0:	e00f      	b.n	131e2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   131c2:	4b0b      	ldr	r3, [pc, #44]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131c4:	4a0a      	ldr	r2, [pc, #40]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131c6:	6a11      	ldr	r1, [r2, #32]
   131c8:	683a      	ldr	r2, [r7, #0]
   131ca:	430a      	orrs	r2, r1
   131cc:	621a      	str	r2, [r3, #32]
			break;
   131ce:	e008      	b.n	131e2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   131d0:	4b07      	ldr	r3, [pc, #28]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131d2:	4a07      	ldr	r2, [pc, #28]	; (131f0 <system_apb_clock_set_mask+0x78>)
   131d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
   131d6:	683a      	ldr	r2, [r7, #0]
   131d8:	430a      	orrs	r2, r1
   131da:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   131dc:	e001      	b.n	131e2 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   131de:	2317      	movs	r3, #23
   131e0:	e000      	b.n	131e4 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   131e2:	2300      	movs	r3, #0
}
   131e4:	0018      	movs	r0, r3
   131e6:	46bd      	mov	sp, r7
   131e8:	b002      	add	sp, #8
   131ea:	bd80      	pop	{r7, pc}
   131ec:	0001ea08 	.word	0x0001ea08
   131f0:	40000400 	.word	0x40000400

000131f4 <system_pinmux_get_config_defaults>:
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b082      	sub	sp, #8
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	2280      	movs	r2, #128	; 0x80
   13200:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13202:	687b      	ldr	r3, [r7, #4]
   13204:	2200      	movs	r2, #0
   13206:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13208:	687b      	ldr	r3, [r7, #4]
   1320a:	2201      	movs	r2, #1
   1320c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1320e:	687b      	ldr	r3, [r7, #4]
   13210:	2200      	movs	r2, #0
   13212:	70da      	strb	r2, [r3, #3]
}
   13214:	46c0      	nop			; (mov r8, r8)
   13216:	46bd      	mov	sp, r7
   13218:	b002      	add	sp, #8
   1321a:	bd80      	pop	{r7, pc}

0001321c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1321c:	b580      	push	{r7, lr}
   1321e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13220:	4b05      	ldr	r3, [pc, #20]	; (13238 <system_is_debugger_present+0x1c>)
   13222:	789b      	ldrb	r3, [r3, #2]
   13224:	b2db      	uxtb	r3, r3
   13226:	001a      	movs	r2, r3
   13228:	2302      	movs	r3, #2
   1322a:	4013      	ands	r3, r2
   1322c:	1e5a      	subs	r2, r3, #1
   1322e:	4193      	sbcs	r3, r2
   13230:	b2db      	uxtb	r3, r3
}
   13232:	0018      	movs	r0, r3
   13234:	46bd      	mov	sp, r7
   13236:	bd80      	pop	{r7, pc}
   13238:	41002000 	.word	0x41002000

0001323c <system_interrupt_enter_critical_section>:
{
   1323c:	b580      	push	{r7, lr}
   1323e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13240:	4b02      	ldr	r3, [pc, #8]	; (1324c <system_interrupt_enter_critical_section+0x10>)
   13242:	4798      	blx	r3
}
   13244:	46c0      	nop			; (mov r8, r8)
   13246:	46bd      	mov	sp, r7
   13248:	bd80      	pop	{r7, pc}
   1324a:	46c0      	nop			; (mov r8, r8)
   1324c:	0001272d 	.word	0x0001272d

00013250 <system_interrupt_leave_critical_section>:
{
   13250:	b580      	push	{r7, lr}
   13252:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13254:	4b02      	ldr	r3, [pc, #8]	; (13260 <system_interrupt_leave_critical_section+0x10>)
   13256:	4798      	blx	r3
}
   13258:	46c0      	nop			; (mov r8, r8)
   1325a:	46bd      	mov	sp, r7
   1325c:	bd80      	pop	{r7, pc}
   1325e:	46c0      	nop			; (mov r8, r8)
   13260:	00012781 	.word	0x00012781

00013264 <system_interrupt_disable>:
{
   13264:	b580      	push	{r7, lr}
   13266:	b082      	sub	sp, #8
   13268:	af00      	add	r7, sp, #0
   1326a:	0002      	movs	r2, r0
   1326c:	1dfb      	adds	r3, r7, #7
   1326e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13270:	4a07      	ldr	r2, [pc, #28]	; (13290 <system_interrupt_disable+0x2c>)
   13272:	1dfb      	adds	r3, r7, #7
   13274:	781b      	ldrb	r3, [r3, #0]
   13276:	0019      	movs	r1, r3
   13278:	231f      	movs	r3, #31
   1327a:	400b      	ands	r3, r1
   1327c:	2101      	movs	r1, #1
   1327e:	4099      	lsls	r1, r3
   13280:	000b      	movs	r3, r1
   13282:	0019      	movs	r1, r3
   13284:	2380      	movs	r3, #128	; 0x80
   13286:	50d1      	str	r1, [r2, r3]
}
   13288:	46c0      	nop			; (mov r8, r8)
   1328a:	46bd      	mov	sp, r7
   1328c:	b002      	add	sp, #8
   1328e:	bd80      	pop	{r7, pc}
   13290:	e000e100 	.word	0xe000e100

00013294 <i2c_master_is_syncing>:
{
   13294:	b580      	push	{r7, lr}
   13296:	b084      	sub	sp, #16
   13298:	af00      	add	r7, sp, #0
   1329a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1329c:	687b      	ldr	r3, [r7, #4]
   1329e:	681b      	ldr	r3, [r3, #0]
   132a0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   132a2:	68fb      	ldr	r3, [r7, #12]
   132a4:	69db      	ldr	r3, [r3, #28]
   132a6:	2207      	movs	r2, #7
   132a8:	4013      	ands	r3, r2
   132aa:	1e5a      	subs	r2, r3, #1
   132ac:	4193      	sbcs	r3, r2
   132ae:	b2db      	uxtb	r3, r3
}
   132b0:	0018      	movs	r0, r3
   132b2:	46bd      	mov	sp, r7
   132b4:	b004      	add	sp, #16
   132b6:	bd80      	pop	{r7, pc}

000132b8 <_i2c_master_wait_for_sync>:
{
   132b8:	b580      	push	{r7, lr}
   132ba:	b082      	sub	sp, #8
   132bc:	af00      	add	r7, sp, #0
   132be:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   132c0:	46c0      	nop			; (mov r8, r8)
   132c2:	687b      	ldr	r3, [r7, #4]
   132c4:	0018      	movs	r0, r3
   132c6:	4b04      	ldr	r3, [pc, #16]	; (132d8 <_i2c_master_wait_for_sync+0x20>)
   132c8:	4798      	blx	r3
   132ca:	1e03      	subs	r3, r0, #0
   132cc:	d1f9      	bne.n	132c2 <_i2c_master_wait_for_sync+0xa>
}
   132ce:	46c0      	nop			; (mov r8, r8)
   132d0:	46bd      	mov	sp, r7
   132d2:	b002      	add	sp, #8
   132d4:	bd80      	pop	{r7, pc}
   132d6:	46c0      	nop			; (mov r8, r8)
   132d8:	00013295 	.word	0x00013295

000132dc <i2c_master_disable>:
{
   132dc:	b580      	push	{r7, lr}
   132de:	b084      	sub	sp, #16
   132e0:	af00      	add	r7, sp, #0
   132e2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   132e4:	687b      	ldr	r3, [r7, #4]
   132e6:	681b      	ldr	r3, [r3, #0]
   132e8:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   132ea:	687b      	ldr	r3, [r7, #4]
   132ec:	681b      	ldr	r3, [r3, #0]
   132ee:	0018      	movs	r0, r3
   132f0:	4b0d      	ldr	r3, [pc, #52]	; (13328 <i2c_master_disable+0x4c>)
   132f2:	4798      	blx	r3
   132f4:	0003      	movs	r3, r0
   132f6:	0018      	movs	r0, r3
   132f8:	4b0c      	ldr	r3, [pc, #48]	; (1332c <i2c_master_disable+0x50>)
   132fa:	4798      	blx	r3
	_i2c_master_wait_for_sync(module);
   132fc:	687b      	ldr	r3, [r7, #4]
   132fe:	0018      	movs	r0, r3
   13300:	4b0b      	ldr	r3, [pc, #44]	; (13330 <i2c_master_disable+0x54>)
   13302:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   13304:	68fb      	ldr	r3, [r7, #12]
   13306:	2283      	movs	r2, #131	; 0x83
   13308:	751a      	strb	r2, [r3, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1330a:	68fb      	ldr	r3, [r7, #12]
   1330c:	2283      	movs	r2, #131	; 0x83
   1330e:	761a      	strb	r2, [r3, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   13310:	68fb      	ldr	r3, [r7, #12]
   13312:	681b      	ldr	r3, [r3, #0]
   13314:	2202      	movs	r2, #2
   13316:	4393      	bics	r3, r2
   13318:	001a      	movs	r2, r3
   1331a:	68fb      	ldr	r3, [r7, #12]
   1331c:	601a      	str	r2, [r3, #0]
}
   1331e:	46c0      	nop			; (mov r8, r8)
   13320:	46bd      	mov	sp, r7
   13322:	b004      	add	sp, #16
   13324:	bd80      	pop	{r7, pc}
   13326:	46c0      	nop			; (mov r8, r8)
   13328:	000144cd 	.word	0x000144cd
   1332c:	00013265 	.word	0x00013265
   13330:	000132b9 	.word	0x000132b9

00013334 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   13334:	b5f0      	push	{r4, r5, r6, r7, lr}
   13336:	b097      	sub	sp, #92	; 0x5c
   13338:	af00      	add	r7, sp, #0
   1333a:	6178      	str	r0, [r7, #20]
   1333c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1333e:	2300      	movs	r3, #0
   13340:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   13342:	2300      	movs	r3, #0
   13344:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   13346:	2300      	movs	r3, #0
   13348:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1334a:	233b      	movs	r3, #59	; 0x3b
   1334c:	2210      	movs	r2, #16
   1334e:	4694      	mov	ip, r2
   13350:	44bc      	add	ip, r7
   13352:	4463      	add	r3, ip
   13354:	2200      	movs	r2, #0
   13356:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13358:	697b      	ldr	r3, [r7, #20]
   1335a:	681b      	ldr	r3, [r3, #0]
   1335c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1335e:	697b      	ldr	r3, [r7, #20]
   13360:	681b      	ldr	r3, [r3, #0]
   13362:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   13364:	2323      	movs	r3, #35	; 0x23
   13366:	2210      	movs	r2, #16
   13368:	18ba      	adds	r2, r7, r2
   1336a:	18d4      	adds	r4, r2, r3
   1336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1336e:	0018      	movs	r0, r3
   13370:	4bc0      	ldr	r3, [pc, #768]	; (13674 <_i2c_master_set_config+0x340>)
   13372:	4798      	blx	r3
   13374:	0003      	movs	r3, r0
   13376:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13378:	230c      	movs	r3, #12
   1337a:	2210      	movs	r2, #16
   1337c:	4694      	mov	ip, r2
   1337e:	44bc      	add	ip, r7
   13380:	4463      	add	r3, ip
   13382:	0018      	movs	r0, r3
   13384:	4bbc      	ldr	r3, [pc, #752]	; (13678 <_i2c_master_set_config+0x344>)
   13386:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   13388:	693b      	ldr	r3, [r7, #16]
   1338a:	69db      	ldr	r3, [r3, #28]
   1338c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1338e:	693b      	ldr	r3, [r7, #16]
   13390:	6a1b      	ldr	r3, [r3, #32]
   13392:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   13394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13396:	2b00      	cmp	r3, #0
   13398:	d106      	bne.n	133a8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1339c:	2100      	movs	r1, #0
   1339e:	0018      	movs	r0, r3
   133a0:	4bb6      	ldr	r3, [pc, #728]	; (1367c <_i2c_master_set_config+0x348>)
   133a2:	4798      	blx	r3
   133a4:	0003      	movs	r3, r0
   133a6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   133a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   133aa:	b2da      	uxtb	r2, r3
   133ac:	230c      	movs	r3, #12
   133ae:	2110      	movs	r1, #16
   133b0:	468c      	mov	ip, r1
   133b2:	44bc      	add	ip, r7
   133b4:	4463      	add	r3, ip
   133b6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   133b8:	230c      	movs	r3, #12
   133ba:	2210      	movs	r2, #16
   133bc:	4694      	mov	ip, r2
   133be:	44bc      	add	ip, r7
   133c0:	4463      	add	r3, ip
   133c2:	2202      	movs	r2, #2
   133c4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   133c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   133c8:	0c1b      	lsrs	r3, r3, #16
   133ca:	b2db      	uxtb	r3, r3
   133cc:	220c      	movs	r2, #12
   133ce:	2110      	movs	r1, #16
   133d0:	468c      	mov	ip, r1
   133d2:	44bc      	add	ip, r7
   133d4:	4462      	add	r2, ip
   133d6:	0011      	movs	r1, r2
   133d8:	0018      	movs	r0, r3
   133da:	4ba9      	ldr	r3, [pc, #676]	; (13680 <_i2c_master_set_config+0x34c>)
   133dc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   133de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   133e0:	2b00      	cmp	r3, #0
   133e2:	d106      	bne.n	133f2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   133e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   133e6:	2101      	movs	r1, #1
   133e8:	0018      	movs	r0, r3
   133ea:	4ba4      	ldr	r3, [pc, #656]	; (1367c <_i2c_master_set_config+0x348>)
   133ec:	4798      	blx	r3
   133ee:	0003      	movs	r3, r0
   133f0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   133f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   133f4:	b2da      	uxtb	r2, r3
   133f6:	230c      	movs	r3, #12
   133f8:	2110      	movs	r1, #16
   133fa:	468c      	mov	ip, r1
   133fc:	44bc      	add	ip, r7
   133fe:	4463      	add	r3, ip
   13400:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13402:	230c      	movs	r3, #12
   13404:	2210      	movs	r2, #16
   13406:	4694      	mov	ip, r2
   13408:	44bc      	add	ip, r7
   1340a:	4463      	add	r3, ip
   1340c:	2202      	movs	r2, #2
   1340e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   13410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13412:	0c1b      	lsrs	r3, r3, #16
   13414:	b2db      	uxtb	r3, r3
   13416:	220c      	movs	r2, #12
   13418:	2110      	movs	r1, #16
   1341a:	468c      	mov	ip, r1
   1341c:	44bc      	add	ip, r7
   1341e:	4462      	add	r2, ip
   13420:	0011      	movs	r1, r2
   13422:	0018      	movs	r0, r3
   13424:	4b96      	ldr	r3, [pc, #600]	; (13680 <_i2c_master_set_config+0x34c>)
   13426:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   13428:	693b      	ldr	r3, [r7, #16]
   1342a:	8a9a      	ldrh	r2, [r3, #20]
   1342c:	697b      	ldr	r3, [r7, #20]
   1342e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	8ada      	ldrh	r2, [r3, #22]
   13434:	697b      	ldr	r3, [r7, #20]
   13436:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13438:	693b      	ldr	r3, [r7, #16]
   1343a:	7e1b      	ldrb	r3, [r3, #24]
   1343c:	2b00      	cmp	r3, #0
   1343e:	d103      	bne.n	13448 <_i2c_master_set_config+0x114>
   13440:	4b90      	ldr	r3, [pc, #576]	; (13684 <_i2c_master_set_config+0x350>)
   13442:	4798      	blx	r3
   13444:	1e03      	subs	r3, r0, #0
   13446:	d002      	beq.n	1344e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   13448:	2380      	movs	r3, #128	; 0x80
   1344a:	657b      	str	r3, [r7, #84]	; 0x54
   1344c:	e001      	b.n	13452 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1344e:	2300      	movs	r3, #0
   13450:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   13452:	693b      	ldr	r3, [r7, #16]
   13454:	691b      	ldr	r3, [r3, #16]
   13456:	2b00      	cmp	r3, #0
   13458:	d004      	beq.n	13464 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1345a:	693b      	ldr	r3, [r7, #16]
   1345c:	691b      	ldr	r3, [r3, #16]
   1345e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13460:	4313      	orrs	r3, r2
   13462:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   13464:	693b      	ldr	r3, [r7, #16]
   13466:	689b      	ldr	r3, [r3, #8]
   13468:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1346a:	4313      	orrs	r3, r2
   1346c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1346e:	693b      	ldr	r3, [r7, #16]
   13470:	2224      	movs	r2, #36	; 0x24
   13472:	5c9b      	ldrb	r3, [r3, r2]
   13474:	2b00      	cmp	r3, #0
   13476:	d004      	beq.n	13482 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   13478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1347a:	2280      	movs	r2, #128	; 0x80
   1347c:	05d2      	lsls	r2, r2, #23
   1347e:	4313      	orrs	r3, r2
   13480:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   13482:	693b      	ldr	r3, [r7, #16]
   13484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13486:	2b00      	cmp	r3, #0
   13488:	d004      	beq.n	13494 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1348a:	693b      	ldr	r3, [r7, #16]
   1348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1348e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13490:	4313      	orrs	r3, r2
   13492:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   13494:	693b      	ldr	r3, [r7, #16]
   13496:	222c      	movs	r2, #44	; 0x2c
   13498:	5c9b      	ldrb	r3, [r3, r2]
   1349a:	2b00      	cmp	r3, #0
   1349c:	d105      	bne.n	134aa <_i2c_master_set_config+0x176>
   1349e:	693b      	ldr	r3, [r7, #16]
   134a0:	689a      	ldr	r2, [r3, #8]
   134a2:	2380      	movs	r3, #128	; 0x80
   134a4:	049b      	lsls	r3, r3, #18
   134a6:	429a      	cmp	r2, r3
   134a8:	d104      	bne.n	134b4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   134aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   134ac:	2280      	movs	r2, #128	; 0x80
   134ae:	0512      	lsls	r2, r2, #20
   134b0:	4313      	orrs	r3, r2
   134b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   134b4:	693b      	ldr	r3, [r7, #16]
   134b6:	222d      	movs	r2, #45	; 0x2d
   134b8:	5c9b      	ldrb	r3, [r3, r2]
   134ba:	2b00      	cmp	r3, #0
   134bc:	d004      	beq.n	134c8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   134be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   134c0:	2280      	movs	r2, #128	; 0x80
   134c2:	0412      	lsls	r2, r2, #16
   134c4:	4313      	orrs	r3, r2
   134c6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   134c8:	693b      	ldr	r3, [r7, #16]
   134ca:	222e      	movs	r2, #46	; 0x2e
   134cc:	5c9b      	ldrb	r3, [r3, r2]
   134ce:	2b00      	cmp	r3, #0
   134d0:	d004      	beq.n	134dc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   134d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   134d4:	2280      	movs	r2, #128	; 0x80
   134d6:	03d2      	lsls	r2, r2, #15
   134d8:	4313      	orrs	r3, r2
   134da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134de:	681a      	ldr	r2, [r3, #0]
   134e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   134e2:	431a      	orrs	r2, r3
   134e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134e6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   134e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134ea:	2280      	movs	r2, #128	; 0x80
   134ec:	0052      	lsls	r2, r2, #1
   134ee:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   134f0:	2323      	movs	r3, #35	; 0x23
   134f2:	2210      	movs	r2, #16
   134f4:	4694      	mov	ip, r2
   134f6:	44bc      	add	ip, r7
   134f8:	4463      	add	r3, ip
   134fa:	781b      	ldrb	r3, [r3, #0]
   134fc:	3312      	adds	r3, #18
   134fe:	b2db      	uxtb	r3, r3
   13500:	0018      	movs	r0, r3
   13502:	4b61      	ldr	r3, [pc, #388]	; (13688 <_i2c_master_set_config+0x354>)
   13504:	4798      	blx	r3
   13506:	0003      	movs	r3, r0
   13508:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1350a:	693b      	ldr	r3, [r7, #16]
   1350c:	681b      	ldr	r3, [r3, #0]
   1350e:	22fa      	movs	r2, #250	; 0xfa
   13510:	0092      	lsls	r2, r2, #2
   13512:	4353      	muls	r3, r2
   13514:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	685b      	ldr	r3, [r3, #4]
   1351a:	22fa      	movs	r2, #250	; 0xfa
   1351c:	0092      	lsls	r2, r2, #2
   1351e:	4353      	muls	r3, r2
   13520:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   13522:	693b      	ldr	r3, [r7, #16]
   13524:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13526:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   13528:	4b58      	ldr	r3, [pc, #352]	; (1368c <_i2c_master_set_config+0x358>)
   1352a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1352c:	4798      	blx	r3
   1352e:	0005      	movs	r5, r0
   13530:	000e      	movs	r6, r1
   13532:	4b56      	ldr	r3, [pc, #344]	; (1368c <_i2c_master_set_config+0x358>)
   13534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13536:	4798      	blx	r3
   13538:	60b8      	str	r0, [r7, #8]
   1353a:	60f9      	str	r1, [r7, #12]
   1353c:	4b53      	ldr	r3, [pc, #332]	; (1368c <_i2c_master_set_config+0x358>)
   1353e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13540:	4798      	blx	r3
   13542:	4c53      	ldr	r4, [pc, #332]	; (13690 <_i2c_master_set_config+0x35c>)
   13544:	4a53      	ldr	r2, [pc, #332]	; (13694 <_i2c_master_set_config+0x360>)
   13546:	4b54      	ldr	r3, [pc, #336]	; (13698 <_i2c_master_set_config+0x364>)
   13548:	47a0      	blx	r4
   1354a:	0003      	movs	r3, r0
   1354c:	000c      	movs	r4, r1
   1354e:	603b      	str	r3, [r7, #0]
   13550:	607c      	str	r4, [r7, #4]
   13552:	4b4e      	ldr	r3, [pc, #312]	; (1368c <_i2c_master_set_config+0x358>)
   13554:	6a38      	ldr	r0, [r7, #32]
   13556:	4798      	blx	r3
   13558:	0002      	movs	r2, r0
   1355a:	000b      	movs	r3, r1
   1355c:	4c4c      	ldr	r4, [pc, #304]	; (13690 <_i2c_master_set_config+0x35c>)
   1355e:	6838      	ldr	r0, [r7, #0]
   13560:	6879      	ldr	r1, [r7, #4]
   13562:	47a0      	blx	r4
   13564:	0003      	movs	r3, r0
   13566:	000c      	movs	r4, r1
   13568:	0018      	movs	r0, r3
   1356a:	0021      	movs	r1, r4
   1356c:	4c4b      	ldr	r4, [pc, #300]	; (1369c <_i2c_master_set_config+0x368>)
   1356e:	2200      	movs	r2, #0
   13570:	4b4b      	ldr	r3, [pc, #300]	; (136a0 <_i2c_master_set_config+0x36c>)
   13572:	47a0      	blx	r4
   13574:	0003      	movs	r3, r0
   13576:	000c      	movs	r4, r1
   13578:	001a      	movs	r2, r3
   1357a:	0023      	movs	r3, r4
   1357c:	4c44      	ldr	r4, [pc, #272]	; (13690 <_i2c_master_set_config+0x35c>)
   1357e:	68b8      	ldr	r0, [r7, #8]
   13580:	68f9      	ldr	r1, [r7, #12]
   13582:	47a0      	blx	r4
   13584:	0003      	movs	r3, r0
   13586:	000c      	movs	r4, r1
   13588:	001a      	movs	r2, r3
   1358a:	0023      	movs	r3, r4
   1358c:	4c45      	ldr	r4, [pc, #276]	; (136a4 <_i2c_master_set_config+0x370>)
   1358e:	0028      	movs	r0, r5
   13590:	0031      	movs	r1, r6
   13592:	47a0      	blx	r4
   13594:	0003      	movs	r3, r0
   13596:	000c      	movs	r4, r1
   13598:	001d      	movs	r5, r3
   1359a:	0026      	movs	r6, r4
   1359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1359e:	005a      	lsls	r2, r3, #1
   135a0:	4b3a      	ldr	r3, [pc, #232]	; (1368c <_i2c_master_set_config+0x358>)
   135a2:	0010      	movs	r0, r2
   135a4:	4798      	blx	r3
   135a6:	0002      	movs	r2, r0
   135a8:	000b      	movs	r3, r1
   135aa:	4c3c      	ldr	r4, [pc, #240]	; (1369c <_i2c_master_set_config+0x368>)
   135ac:	0028      	movs	r0, r5
   135ae:	0031      	movs	r1, r6
   135b0:	47a0      	blx	r4
   135b2:	0003      	movs	r3, r0
   135b4:	000c      	movs	r4, r1
   135b6:	0018      	movs	r0, r3
   135b8:	0021      	movs	r1, r4
   135ba:	4c3a      	ldr	r4, [pc, #232]	; (136a4 <_i2c_master_set_config+0x370>)
   135bc:	2200      	movs	r2, #0
   135be:	4b3a      	ldr	r3, [pc, #232]	; (136a8 <_i2c_master_set_config+0x374>)
   135c0:	47a0      	blx	r4
   135c2:	0003      	movs	r3, r0
   135c4:	000c      	movs	r4, r1
   135c6:	001d      	movs	r5, r3
   135c8:	0026      	movs	r6, r4
   135ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135cc:	005a      	lsls	r2, r3, #1
   135ce:	4b2f      	ldr	r3, [pc, #188]	; (1368c <_i2c_master_set_config+0x358>)
   135d0:	0010      	movs	r0, r2
   135d2:	4798      	blx	r3
   135d4:	0002      	movs	r2, r0
   135d6:	000b      	movs	r3, r1
   135d8:	4c34      	ldr	r4, [pc, #208]	; (136ac <_i2c_master_set_config+0x378>)
   135da:	0028      	movs	r0, r5
   135dc:	0031      	movs	r1, r6
   135de:	47a0      	blx	r4
   135e0:	0003      	movs	r3, r0
   135e2:	000c      	movs	r4, r1
   135e4:	0019      	movs	r1, r3
   135e6:	0022      	movs	r2, r4
   135e8:	4b31      	ldr	r3, [pc, #196]	; (136b0 <_i2c_master_set_config+0x37c>)
   135ea:	0008      	movs	r0, r1
   135ec:	0011      	movs	r1, r2
   135ee:	4798      	blx	r3
   135f0:	0003      	movs	r3, r0
   135f2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   135f4:	693b      	ldr	r3, [r7, #16]
   135f6:	689a      	ldr	r2, [r3, #8]
   135f8:	2380      	movs	r3, #128	; 0x80
   135fa:	049b      	lsls	r3, r3, #18
   135fc:	429a      	cmp	r2, r3
   135fe:	d16a      	bne.n	136d6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   13600:	4b22      	ldr	r3, [pc, #136]	; (1368c <_i2c_master_set_config+0x358>)
   13602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13604:	4798      	blx	r3
   13606:	4c25      	ldr	r4, [pc, #148]	; (1369c <_i2c_master_set_config+0x368>)
   13608:	0002      	movs	r2, r0
   1360a:	000b      	movs	r3, r1
   1360c:	47a0      	blx	r4
   1360e:	0003      	movs	r3, r0
   13610:	000c      	movs	r4, r1
   13612:	001d      	movs	r5, r3
   13614:	0026      	movs	r6, r4
   13616:	4b1d      	ldr	r3, [pc, #116]	; (1368c <_i2c_master_set_config+0x358>)
   13618:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1361a:	4798      	blx	r3
   1361c:	4c1c      	ldr	r4, [pc, #112]	; (13690 <_i2c_master_set_config+0x35c>)
   1361e:	2200      	movs	r2, #0
   13620:	4b24      	ldr	r3, [pc, #144]	; (136b4 <_i2c_master_set_config+0x380>)
   13622:	47a0      	blx	r4
   13624:	0003      	movs	r3, r0
   13626:	000c      	movs	r4, r1
   13628:	001a      	movs	r2, r3
   1362a:	0023      	movs	r3, r4
   1362c:	4c1f      	ldr	r4, [pc, #124]	; (136ac <_i2c_master_set_config+0x378>)
   1362e:	0028      	movs	r0, r5
   13630:	0031      	movs	r1, r6
   13632:	47a0      	blx	r4
   13634:	0003      	movs	r3, r0
   13636:	000c      	movs	r4, r1
   13638:	0018      	movs	r0, r3
   1363a:	0021      	movs	r1, r4
   1363c:	4c19      	ldr	r4, [pc, #100]	; (136a4 <_i2c_master_set_config+0x370>)
   1363e:	2200      	movs	r2, #0
   13640:	4b19      	ldr	r3, [pc, #100]	; (136a8 <_i2c_master_set_config+0x374>)
   13642:	47a0      	blx	r4
   13644:	0003      	movs	r3, r0
   13646:	000c      	movs	r4, r1
   13648:	0019      	movs	r1, r3
   1364a:	0022      	movs	r2, r4
   1364c:	4b18      	ldr	r3, [pc, #96]	; (136b0 <_i2c_master_set_config+0x37c>)
   1364e:	0008      	movs	r0, r1
   13650:	0011      	movs	r1, r2
   13652:	4798      	blx	r3
   13654:	0003      	movs	r3, r0
   13656:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   13658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1365a:	2b00      	cmp	r3, #0
   1365c:	d02e      	beq.n	136bc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1365e:	4b16      	ldr	r3, [pc, #88]	; (136b8 <_i2c_master_set_config+0x384>)
   13660:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13664:	4798      	blx	r3
   13666:	0003      	movs	r3, r0
   13668:	1e9a      	subs	r2, r3, #2
   1366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1366c:	1ad3      	subs	r3, r2, r3
   1366e:	653b      	str	r3, [r7, #80]	; 0x50
   13670:	e031      	b.n	136d6 <_i2c_master_set_config+0x3a2>
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	000143fd 	.word	0x000143fd
   13678:	000131f5 	.word	0x000131f5
   1367c:	00014241 	.word	0x00014241
   13680:	00016d01 	.word	0x00016d01
   13684:	0001321d 	.word	0x0001321d
   13688:	00016ac9 	.word	0x00016ac9
   1368c:	0001b945 	.word	0x0001b945
   13690:	0001ad2d 	.word	0x0001ad2d
   13694:	e826d695 	.word	0xe826d695
   13698:	3e112e0b 	.word	0x3e112e0b
   1369c:	00019ea5 	.word	0x00019ea5
   136a0:	40240000 	.word	0x40240000
   136a4:	0001b22d 	.word	0x0001b22d
   136a8:	3ff00000 	.word	0x3ff00000
   136ac:	0001a4c5 	.word	0x0001a4c5
   136b0:	0001b859 	.word	0x0001b859
   136b4:	40080000 	.word	0x40080000
   136b8:	00019ae9 	.word	0x00019ae9
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   136bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   136be:	005a      	lsls	r2, r3, #1
   136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136c2:	18d3      	adds	r3, r2, r3
   136c4:	1e5a      	subs	r2, r3, #1
   136c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   136c8:	0059      	lsls	r1, r3, #1
   136ca:	4b1d      	ldr	r3, [pc, #116]	; (13740 <_i2c_master_set_config+0x40c>)
   136cc:	0010      	movs	r0, r2
   136ce:	4798      	blx	r3
   136d0:	0003      	movs	r3, r0
   136d2:	3b01      	subs	r3, #1
   136d4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   136d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   136d8:	2bff      	cmp	r3, #255	; 0xff
   136da:	dc08      	bgt.n	136ee <_i2c_master_set_config+0x3ba>
   136dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   136de:	2b00      	cmp	r3, #0
   136e0:	db05      	blt.n	136ee <_i2c_master_set_config+0x3ba>
   136e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   136e4:	2bff      	cmp	r3, #255	; 0xff
   136e6:	dc02      	bgt.n	136ee <_i2c_master_set_config+0x3ba>
   136e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   136ea:	2b00      	cmp	r3, #0
   136ec:	da06      	bge.n	136fc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   136ee:	233b      	movs	r3, #59	; 0x3b
   136f0:	2210      	movs	r2, #16
   136f2:	4694      	mov	ip, r2
   136f4:	44bc      	add	ip, r7
   136f6:	4463      	add	r3, ip
   136f8:	2240      	movs	r2, #64	; 0x40
   136fa:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   136fc:	233b      	movs	r3, #59	; 0x3b
   136fe:	2210      	movs	r2, #16
   13700:	4694      	mov	ip, r2
   13702:	44bc      	add	ip, r7
   13704:	4463      	add	r3, ip
   13706:	781b      	ldrb	r3, [r3, #0]
   13708:	2b40      	cmp	r3, #64	; 0x40
   1370a:	d00e      	beq.n	1372a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1370e:	22ff      	movs	r2, #255	; 0xff
   13710:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13714:	041b      	lsls	r3, r3, #16
   13716:	0019      	movs	r1, r3
   13718:	23ff      	movs	r3, #255	; 0xff
   1371a:	041b      	lsls	r3, r3, #16
   1371c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1371e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   13722:	0612      	lsls	r2, r2, #24
   13724:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13728:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1372a:	233b      	movs	r3, #59	; 0x3b
   1372c:	2210      	movs	r2, #16
   1372e:	4694      	mov	ip, r2
   13730:	44bc      	add	ip, r7
   13732:	4463      	add	r3, ip
   13734:	781b      	ldrb	r3, [r3, #0]
}
   13736:	0018      	movs	r0, r3
   13738:	46bd      	mov	sp, r7
   1373a:	b017      	add	sp, #92	; 0x5c
   1373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1373e:	46c0      	nop			; (mov r8, r8)
   13740:	00019ae9 	.word	0x00019ae9

00013744 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   13744:	b590      	push	{r4, r7, lr}
   13746:	b08b      	sub	sp, #44	; 0x2c
   13748:	af00      	add	r7, sp, #0
   1374a:	60f8      	str	r0, [r7, #12]
   1374c:	60b9      	str	r1, [r7, #8]
   1374e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   13750:	68fb      	ldr	r3, [r7, #12]
   13752:	68ba      	ldr	r2, [r7, #8]
   13754:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13756:	68fb      	ldr	r3, [r7, #12]
   13758:	681b      	ldr	r3, [r3, #0]
   1375a:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1375c:	68fb      	ldr	r3, [r7, #12]
   1375e:	681b      	ldr	r3, [r3, #0]
   13760:	0018      	movs	r0, r3
   13762:	4b44      	ldr	r3, [pc, #272]	; (13874 <i2c_master_init+0x130>)
   13764:	4798      	blx	r3
   13766:	0003      	movs	r3, r0
   13768:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   1376a:	69bb      	ldr	r3, [r7, #24]
   1376c:	2b05      	cmp	r3, #5
   1376e:	d104      	bne.n	1377a <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   13770:	2301      	movs	r3, #1
   13772:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   13774:	2318      	movs	r3, #24
   13776:	623b      	str	r3, [r7, #32]
   13778:	e004      	b.n	13784 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   1377a:	69bb      	ldr	r3, [r7, #24]
   1377c:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1377e:	69bb      	ldr	r3, [r7, #24]
   13780:	3312      	adds	r3, #18
   13782:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   13784:	69bb      	ldr	r3, [r7, #24]
   13786:	2b05      	cmp	r3, #5
   13788:	d108      	bne.n	1379c <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   1378a:	2201      	movs	r2, #1
   1378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1378e:	409a      	lsls	r2, r3
   13790:	0013      	movs	r3, r2
   13792:	0019      	movs	r1, r3
   13794:	2003      	movs	r0, #3
   13796:	4b38      	ldr	r3, [pc, #224]	; (13878 <i2c_master_init+0x134>)
   13798:	4798      	blx	r3
   1379a:	e007      	b.n	137ac <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1379c:	2201      	movs	r2, #1
   1379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   137a0:	409a      	lsls	r2, r3
   137a2:	0013      	movs	r3, r2
   137a4:	0019      	movs	r1, r3
   137a6:	2002      	movs	r0, #2
   137a8:	4b33      	ldr	r3, [pc, #204]	; (13878 <i2c_master_init+0x134>)
   137aa:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   137ac:	2314      	movs	r3, #20
   137ae:	18fb      	adds	r3, r7, r3
   137b0:	0018      	movs	r0, r3
   137b2:	4b32      	ldr	r3, [pc, #200]	; (1387c <i2c_master_init+0x138>)
   137b4:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   137b6:	687b      	ldr	r3, [r7, #4]
   137b8:	7b1a      	ldrb	r2, [r3, #12]
   137ba:	2314      	movs	r3, #20
   137bc:	18fb      	adds	r3, r7, r3
   137be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   137c0:	6a3b      	ldr	r3, [r7, #32]
   137c2:	b2db      	uxtb	r3, r3
   137c4:	2214      	movs	r2, #20
   137c6:	18ba      	adds	r2, r7, r2
   137c8:	0011      	movs	r1, r2
   137ca:	0018      	movs	r0, r3
   137cc:	4b2c      	ldr	r3, [pc, #176]	; (13880 <i2c_master_init+0x13c>)
   137ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   137d0:	6a3b      	ldr	r3, [r7, #32]
   137d2:	b2db      	uxtb	r3, r3
   137d4:	0018      	movs	r0, r3
   137d6:	4b2b      	ldr	r3, [pc, #172]	; (13884 <i2c_master_init+0x140>)
   137d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   137da:	687b      	ldr	r3, [r7, #4]
   137dc:	7b1b      	ldrb	r3, [r3, #12]
   137de:	2100      	movs	r1, #0
   137e0:	0018      	movs	r0, r3
   137e2:	4b29      	ldr	r3, [pc, #164]	; (13888 <i2c_master_init+0x144>)
   137e4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   137e6:	69fb      	ldr	r3, [r7, #28]
   137e8:	681b      	ldr	r3, [r3, #0]
   137ea:	2202      	movs	r2, #2
   137ec:	4013      	ands	r3, r2
   137ee:	d001      	beq.n	137f4 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
   137f0:	231c      	movs	r3, #28
   137f2:	e03b      	b.n	1386c <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   137f4:	69fb      	ldr	r3, [r7, #28]
   137f6:	681b      	ldr	r3, [r3, #0]
   137f8:	2201      	movs	r2, #1
   137fa:	4013      	ands	r3, r2
   137fc:	d001      	beq.n	13802 <i2c_master_init+0xbe>
		return STATUS_BUSY;
   137fe:	2305      	movs	r3, #5
   13800:	e034      	b.n	1386c <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13802:	68fb      	ldr	r3, [r7, #12]
   13804:	681b      	ldr	r3, [r3, #0]
   13806:	2217      	movs	r2, #23
   13808:	18bc      	adds	r4, r7, r2
   1380a:	0018      	movs	r0, r3
   1380c:	4b19      	ldr	r3, [pc, #100]	; (13874 <i2c_master_init+0x130>)
   1380e:	4798      	blx	r3
   13810:	0003      	movs	r3, r0
   13812:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   13814:	4a1d      	ldr	r2, [pc, #116]	; (1388c <i2c_master_init+0x148>)
   13816:	2317      	movs	r3, #23
   13818:	18fb      	adds	r3, r7, r3
   1381a:	781b      	ldrb	r3, [r3, #0]
   1381c:	0011      	movs	r1, r2
   1381e:	0018      	movs	r0, r3
   13820:	4b1b      	ldr	r3, [pc, #108]	; (13890 <i2c_master_init+0x14c>)
   13822:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13824:	2317      	movs	r3, #23
   13826:	18fb      	adds	r3, r7, r3
   13828:	781a      	ldrb	r2, [r3, #0]
   1382a:	4b1a      	ldr	r3, [pc, #104]	; (13894 <i2c_master_init+0x150>)
   1382c:	0092      	lsls	r2, r2, #2
   1382e:	68f9      	ldr	r1, [r7, #12]
   13830:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   13832:	68fb      	ldr	r3, [r7, #12]
   13834:	2200      	movs	r2, #0
   13836:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   13838:	68fb      	ldr	r3, [r7, #12]
   1383a:	2200      	movs	r2, #0
   1383c:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   1383e:	68fb      	ldr	r3, [r7, #12]
   13840:	2200      	movs	r2, #0
   13842:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   13844:	68fb      	ldr	r3, [r7, #12]
   13846:	2200      	movs	r2, #0
   13848:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1384a:	68fb      	ldr	r3, [r7, #12]
   1384c:	2225      	movs	r2, #37	; 0x25
   1384e:	2100      	movs	r1, #0
   13850:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   13852:	68fb      	ldr	r3, [r7, #12]
   13854:	2200      	movs	r2, #0
   13856:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   13858:	69fb      	ldr	r3, [r7, #28]
   1385a:	2214      	movs	r2, #20
   1385c:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1385e:	687a      	ldr	r2, [r7, #4]
   13860:	68fb      	ldr	r3, [r7, #12]
   13862:	0011      	movs	r1, r2
   13864:	0018      	movs	r0, r3
   13866:	4b0c      	ldr	r3, [pc, #48]	; (13898 <i2c_master_init+0x154>)
   13868:	4798      	blx	r3
   1386a:	0003      	movs	r3, r0
}
   1386c:	0018      	movs	r0, r3
   1386e:	46bd      	mov	sp, r7
   13870:	b00b      	add	sp, #44	; 0x2c
   13872:	bd90      	pop	{r4, r7, pc}
   13874:	000143fd 	.word	0x000143fd
   13878:	00013179 	.word	0x00013179
   1387c:	00013161 	.word	0x00013161
   13880:	000169d9 	.word	0x000169d9
   13884:	00016a19 	.word	0x00016a19
   13888:	000141b5 	.word	0x000141b5
   1388c:	00006895 	.word	0x00006895
   13890:	00014461 	.word	0x00014461
   13894:	200024c8 	.word	0x200024c8
   13898:	00013335 	.word	0x00013335

0001389c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1389c:	b580      	push	{r7, lr}
   1389e:	b084      	sub	sp, #16
   138a0:	af00      	add	r7, sp, #0
   138a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	681b      	ldr	r3, [r3, #0]
   138a8:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   138aa:	687b      	ldr	r3, [r7, #4]
   138ac:	0018      	movs	r0, r3
   138ae:	4b0f      	ldr	r3, [pc, #60]	; (138ec <i2c_master_reset+0x50>)
   138b0:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   138b2:	687b      	ldr	r3, [r7, #4]
   138b4:	0018      	movs	r0, r3
   138b6:	4b0e      	ldr	r3, [pc, #56]	; (138f0 <i2c_master_reset+0x54>)
   138b8:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   138ba:	4b0e      	ldr	r3, [pc, #56]	; (138f4 <i2c_master_reset+0x58>)
   138bc:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   138be:	687b      	ldr	r3, [r7, #4]
   138c0:	681b      	ldr	r3, [r3, #0]
   138c2:	0018      	movs	r0, r3
   138c4:	4b0c      	ldr	r3, [pc, #48]	; (138f8 <i2c_master_reset+0x5c>)
   138c6:	4798      	blx	r3
   138c8:	0003      	movs	r3, r0
   138ca:	0018      	movs	r0, r3
   138cc:	4b0b      	ldr	r3, [pc, #44]	; (138fc <i2c_master_reset+0x60>)
   138ce:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   138d0:	4b0b      	ldr	r3, [pc, #44]	; (13900 <i2c_master_reset+0x64>)
   138d2:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   138d4:	687b      	ldr	r3, [r7, #4]
   138d6:	0018      	movs	r0, r3
   138d8:	4b04      	ldr	r3, [pc, #16]	; (138ec <i2c_master_reset+0x50>)
   138da:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   138dc:	68fb      	ldr	r3, [r7, #12]
   138de:	2201      	movs	r2, #1
   138e0:	601a      	str	r2, [r3, #0]
}
   138e2:	46c0      	nop			; (mov r8, r8)
   138e4:	46bd      	mov	sp, r7
   138e6:	b004      	add	sp, #16
   138e8:	bd80      	pop	{r7, pc}
   138ea:	46c0      	nop			; (mov r8, r8)
   138ec:	000132b9 	.word	0x000132b9
   138f0:	000132dd 	.word	0x000132dd
   138f4:	0001323d 	.word	0x0001323d
   138f8:	000144cd 	.word	0x000144cd
   138fc:	00016b1d 	.word	0x00016b1d
   13900:	00013251 	.word	0x00013251

00013904 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   13904:	b580      	push	{r7, lr}
   13906:	b084      	sub	sp, #16
   13908:	af00      	add	r7, sp, #0
   1390a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1390c:	687b      	ldr	r3, [r7, #4]
   1390e:	681b      	ldr	r3, [r3, #0]
   13910:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13912:	68fb      	ldr	r3, [r7, #12]
   13914:	7e1b      	ldrb	r3, [r3, #24]
   13916:	b2db      	uxtb	r3, r3
   13918:	001a      	movs	r2, r3
   1391a:	2302      	movs	r3, #2
   1391c:	4013      	ands	r3, r2
   1391e:	d00b      	beq.n	13938 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13920:	68fb      	ldr	r3, [r7, #12]
   13922:	2202      	movs	r2, #2
   13924:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13926:	68fb      	ldr	r3, [r7, #12]
   13928:	8b5b      	ldrh	r3, [r3, #26]
   1392a:	b29b      	uxth	r3, r3
   1392c:	001a      	movs	r2, r3
   1392e:	2302      	movs	r3, #2
   13930:	4013      	ands	r3, r2
   13932:	d011      	beq.n	13958 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   13934:	2341      	movs	r3, #65	; 0x41
   13936:	e010      	b.n	1395a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13938:	68fb      	ldr	r3, [r7, #12]
   1393a:	8b5b      	ldrh	r3, [r3, #26]
   1393c:	b29b      	uxth	r3, r3
   1393e:	001a      	movs	r2, r3
   13940:	2304      	movs	r3, #4
   13942:	4013      	ands	r3, r2
   13944:	d008      	beq.n	13958 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13946:	68fb      	ldr	r3, [r7, #12]
   13948:	685b      	ldr	r3, [r3, #4]
   1394a:	22c0      	movs	r2, #192	; 0xc0
   1394c:	0292      	lsls	r2, r2, #10
   1394e:	431a      	orrs	r2, r3
   13950:	68fb      	ldr	r3, [r7, #12]
   13952:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   13954:	2318      	movs	r3, #24
   13956:	e000      	b.n	1395a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   13958:	2300      	movs	r3, #0
}
   1395a:	0018      	movs	r0, r3
   1395c:	46bd      	mov	sp, r7
   1395e:	b004      	add	sp, #16
   13960:	bd80      	pop	{r7, pc}

00013962 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   13962:	b580      	push	{r7, lr}
   13964:	b084      	sub	sp, #16
   13966:	af00      	add	r7, sp, #0
   13968:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	681b      	ldr	r3, [r3, #0]
   1396e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   13970:	230e      	movs	r3, #14
   13972:	18fb      	adds	r3, r7, r3
   13974:	2200      	movs	r2, #0
   13976:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13978:	e00f      	b.n	1399a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1397a:	230e      	movs	r3, #14
   1397c:	18fb      	adds	r3, r7, r3
   1397e:	220e      	movs	r2, #14
   13980:	18ba      	adds	r2, r7, r2
   13982:	8812      	ldrh	r2, [r2, #0]
   13984:	3201      	adds	r2, #1
   13986:	801a      	strh	r2, [r3, #0]
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	891b      	ldrh	r3, [r3, #8]
   1398c:	220e      	movs	r2, #14
   1398e:	18ba      	adds	r2, r7, r2
   13990:	8812      	ldrh	r2, [r2, #0]
   13992:	429a      	cmp	r2, r3
   13994:	d301      	bcc.n	1399a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   13996:	2312      	movs	r3, #18
   13998:	e00e      	b.n	139b8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1399a:	68bb      	ldr	r3, [r7, #8]
   1399c:	7e1b      	ldrb	r3, [r3, #24]
   1399e:	b2db      	uxtb	r3, r3
   139a0:	001a      	movs	r2, r3
   139a2:	2301      	movs	r3, #1
   139a4:	4013      	ands	r3, r2
   139a6:	d106      	bne.n	139b6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   139a8:	68bb      	ldr	r3, [r7, #8]
   139aa:	7e1b      	ldrb	r3, [r3, #24]
   139ac:	b2db      	uxtb	r3, r3
   139ae:	001a      	movs	r2, r3
   139b0:	2302      	movs	r3, #2
   139b2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   139b4:	d0e1      	beq.n	1397a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   139b6:	2300      	movs	r3, #0
}
   139b8:	0018      	movs	r0, r3
   139ba:	46bd      	mov	sp, r7
   139bc:	b004      	add	sp, #16
   139be:	bd80      	pop	{r7, pc}

000139c0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   139c0:	b590      	push	{r4, r7, lr}
   139c2:	b085      	sub	sp, #20
   139c4:	af00      	add	r7, sp, #0
   139c6:	6078      	str	r0, [r7, #4]
   139c8:	000a      	movs	r2, r1
   139ca:	1cfb      	adds	r3, r7, #3
   139cc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   139ce:	687b      	ldr	r3, [r7, #4]
   139d0:	681b      	ldr	r3, [r3, #0]
   139d2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   139d4:	68fb      	ldr	r3, [r7, #12]
   139d6:	685b      	ldr	r3, [r3, #4]
   139d8:	2280      	movs	r2, #128	; 0x80
   139da:	02d2      	lsls	r2, r2, #11
   139dc:	431a      	orrs	r2, r3
   139de:	68fb      	ldr	r3, [r7, #12]
   139e0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   139e2:	1cfb      	adds	r3, r7, #3
   139e4:	781a      	ldrb	r2, [r3, #0]
   139e6:	68fb      	ldr	r3, [r7, #12]
   139e8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   139ea:	230b      	movs	r3, #11
   139ec:	18fc      	adds	r4, r7, r3
   139ee:	687b      	ldr	r3, [r7, #4]
   139f0:	0018      	movs	r0, r3
   139f2:	4b07      	ldr	r3, [pc, #28]	; (13a10 <_i2c_master_send_hs_master_code+0x50>)
   139f4:	4798      	blx	r3
   139f6:	0003      	movs	r3, r0
   139f8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   139fa:	68fb      	ldr	r3, [r7, #12]
   139fc:	2201      	movs	r2, #1
   139fe:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   13a00:	230b      	movs	r3, #11
   13a02:	18fb      	adds	r3, r7, r3
   13a04:	781b      	ldrb	r3, [r3, #0]
}
   13a06:	0018      	movs	r0, r3
   13a08:	46bd      	mov	sp, r7
   13a0a:	b005      	add	sp, #20
   13a0c:	bd90      	pop	{r4, r7, pc}
   13a0e:	46c0      	nop			; (mov r8, r8)
   13a10:	00013963 	.word	0x00013963

00013a14 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13a14:	b590      	push	{r4, r7, lr}
   13a16:	b087      	sub	sp, #28
   13a18:	af00      	add	r7, sp, #0
   13a1a:	6078      	str	r0, [r7, #4]
   13a1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a1e:	687b      	ldr	r3, [r7, #4]
   13a20:	681b      	ldr	r3, [r3, #0]
   13a22:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   13a24:	2314      	movs	r3, #20
   13a26:	18fb      	adds	r3, r7, r3
   13a28:	683a      	ldr	r2, [r7, #0]
   13a2a:	8852      	ldrh	r2, [r2, #2]
   13a2c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   13a2e:	2312      	movs	r3, #18
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	2200      	movs	r2, #0
   13a34:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13a36:	68fb      	ldr	r3, [r7, #12]
   13a38:	681b      	ldr	r3, [r3, #0]
   13a3a:	011b      	lsls	r3, r3, #4
   13a3c:	0fdb      	lsrs	r3, r3, #31
   13a3e:	b2db      	uxtb	r3, r3
   13a40:	001a      	movs	r2, r3
   13a42:	230b      	movs	r3, #11
   13a44:	18fb      	adds	r3, r7, r3
   13a46:	1e51      	subs	r1, r2, #1
   13a48:	418a      	sbcs	r2, r1
   13a4a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13a4c:	683b      	ldr	r3, [r7, #0]
   13a4e:	7a5b      	ldrb	r3, [r3, #9]
   13a50:	2b00      	cmp	r3, #0
   13a52:	d006      	beq.n	13a62 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13a54:	683b      	ldr	r3, [r7, #0]
   13a56:	7a9a      	ldrb	r2, [r3, #10]
   13a58:	687b      	ldr	r3, [r7, #4]
   13a5a:	0011      	movs	r1, r2
   13a5c:	0018      	movs	r0, r3
   13a5e:	4b85      	ldr	r3, [pc, #532]	; (13c74 <_i2c_master_read_packet+0x260>)
   13a60:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13a62:	68fb      	ldr	r3, [r7, #12]
   13a64:	685b      	ldr	r3, [r3, #4]
   13a66:	4a84      	ldr	r2, [pc, #528]	; (13c78 <_i2c_master_read_packet+0x264>)
   13a68:	401a      	ands	r2, r3
   13a6a:	68fb      	ldr	r3, [r7, #12]
   13a6c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   13a6e:	683b      	ldr	r3, [r7, #0]
   13a70:	7a1b      	ldrb	r3, [r3, #8]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d042      	beq.n	13afc <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13a76:	683b      	ldr	r3, [r7, #0]
   13a78:	881b      	ldrh	r3, [r3, #0]
   13a7a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13a7c:	683b      	ldr	r3, [r7, #0]
   13a7e:	7a5b      	ldrb	r3, [r3, #9]
   13a80:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13a82:	4313      	orrs	r3, r2
   13a84:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13a86:	2380      	movs	r3, #128	; 0x80
   13a88:	021b      	lsls	r3, r3, #8
   13a8a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13a8c:	68fb      	ldr	r3, [r7, #12]
   13a8e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13a90:	2317      	movs	r3, #23
   13a92:	18fc      	adds	r4, r7, r3
   13a94:	687b      	ldr	r3, [r7, #4]
   13a96:	0018      	movs	r0, r3
   13a98:	4b78      	ldr	r3, [pc, #480]	; (13c7c <_i2c_master_read_packet+0x268>)
   13a9a:	4798      	blx	r3
   13a9c:	0003      	movs	r3, r0
   13a9e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13aa0:	68fb      	ldr	r3, [r7, #12]
   13aa2:	685b      	ldr	r3, [r3, #4]
   13aa4:	4a74      	ldr	r2, [pc, #464]	; (13c78 <_i2c_master_read_packet+0x264>)
   13aa6:	401a      	ands	r2, r3
   13aa8:	68fb      	ldr	r3, [r7, #12]
   13aaa:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13aac:	2317      	movs	r3, #23
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	781b      	ldrb	r3, [r3, #0]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d107      	bne.n	13ac6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
   13ab6:	2317      	movs	r3, #23
   13ab8:	18fc      	adds	r4, r7, r3
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	0018      	movs	r0, r3
   13abe:	4b70      	ldr	r3, [pc, #448]	; (13c80 <_i2c_master_read_packet+0x26c>)
   13ac0:	4798      	blx	r3
   13ac2:	0003      	movs	r3, r0
   13ac4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13ac6:	2317      	movs	r3, #23
   13ac8:	18fb      	adds	r3, r7, r3
   13aca:	781b      	ldrb	r3, [r3, #0]
   13acc:	2b00      	cmp	r3, #0
   13ace:	d111      	bne.n	13af4 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13ad0:	683b      	ldr	r3, [r7, #0]
   13ad2:	881b      	ldrh	r3, [r3, #0]
   13ad4:	0a1b      	lsrs	r3, r3, #8
   13ad6:	b29b      	uxth	r3, r3
   13ad8:	2278      	movs	r2, #120	; 0x78
   13ada:	4313      	orrs	r3, r2
   13adc:	b29b      	uxth	r3, r3
   13ade:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13ae0:	683b      	ldr	r3, [r7, #0]
   13ae2:	7a5b      	ldrb	r3, [r3, #9]
   13ae4:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13ae6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13ae8:	2201      	movs	r2, #1
   13aea:	4313      	orrs	r3, r2
   13aec:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13aee:	68fb      	ldr	r3, [r7, #12]
   13af0:	625a      	str	r2, [r3, #36]	; 0x24
   13af2:	e00f      	b.n	13b14 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   13af4:	2317      	movs	r3, #23
   13af6:	18fb      	adds	r3, r7, r3
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	e0b6      	b.n	13c6a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13afc:	683b      	ldr	r3, [r7, #0]
   13afe:	881b      	ldrh	r3, [r3, #0]
   13b00:	005b      	lsls	r3, r3, #1
   13b02:	2201      	movs	r2, #1
   13b04:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13b06:	683b      	ldr	r3, [r7, #0]
   13b08:	7a5b      	ldrb	r3, [r3, #9]
   13b0a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13b0c:	4313      	orrs	r3, r2
   13b0e:	001a      	movs	r2, r3
   13b10:	68fb      	ldr	r3, [r7, #12]
   13b12:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   13b14:	2317      	movs	r3, #23
   13b16:	18fc      	adds	r4, r7, r3
   13b18:	687b      	ldr	r3, [r7, #4]
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b57      	ldr	r3, [pc, #348]	; (13c7c <_i2c_master_read_packet+0x268>)
   13b1e:	4798      	blx	r3
   13b20:	0003      	movs	r3, r0
   13b22:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13b24:	230b      	movs	r3, #11
   13b26:	18fb      	adds	r3, r7, r3
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	2b00      	cmp	r3, #0
   13b2c:	d00b      	beq.n	13b46 <_i2c_master_read_packet+0x132>
   13b2e:	683b      	ldr	r3, [r7, #0]
   13b30:	885b      	ldrh	r3, [r3, #2]
   13b32:	2b01      	cmp	r3, #1
   13b34:	d107      	bne.n	13b46 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13b36:	68fb      	ldr	r3, [r7, #12]
   13b38:	685b      	ldr	r3, [r3, #4]
   13b3a:	2280      	movs	r2, #128	; 0x80
   13b3c:	02d2      	lsls	r2, r2, #11
   13b3e:	431a      	orrs	r2, r3
   13b40:	68fb      	ldr	r3, [r7, #12]
   13b42:	605a      	str	r2, [r3, #4]
   13b44:	e005      	b.n	13b52 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
   13b46:	68fb      	ldr	r3, [r7, #12]
   13b48:	685b      	ldr	r3, [r3, #4]
   13b4a:	4a4b      	ldr	r2, [pc, #300]	; (13c78 <_i2c_master_read_packet+0x264>)
   13b4c:	401a      	ands	r2, r3
   13b4e:	68fb      	ldr	r3, [r7, #12]
   13b50:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   13b52:	2317      	movs	r3, #23
   13b54:	18fb      	adds	r3, r7, r3
   13b56:	781b      	ldrb	r3, [r3, #0]
   13b58:	2b00      	cmp	r3, #0
   13b5a:	d107      	bne.n	13b6c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
   13b5c:	2317      	movs	r3, #23
   13b5e:	18fc      	adds	r4, r7, r3
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	0018      	movs	r0, r3
   13b64:	4b46      	ldr	r3, [pc, #280]	; (13c80 <_i2c_master_read_packet+0x26c>)
   13b66:	4798      	blx	r3
   13b68:	0003      	movs	r3, r0
   13b6a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   13b6c:	2317      	movs	r3, #23
   13b6e:	18fb      	adds	r3, r7, r3
   13b70:	781b      	ldrb	r3, [r3, #0]
   13b72:	2b00      	cmp	r3, #0
   13b74:	d000      	beq.n	13b78 <_i2c_master_read_packet+0x164>
   13b76:	e075      	b.n	13c64 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
   13b78:	e04b      	b.n	13c12 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   13b7a:	68fb      	ldr	r3, [r7, #12]
   13b7c:	8b5b      	ldrh	r3, [r3, #26]
   13b7e:	b29b      	uxth	r3, r3
   13b80:	001a      	movs	r2, r3
   13b82:	2320      	movs	r3, #32
   13b84:	4013      	ands	r3, r2
   13b86:	d101      	bne.n	13b8c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
   13b88:	2341      	movs	r3, #65	; 0x41
   13b8a:	e06e      	b.n	13c6a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
   13b8c:	687b      	ldr	r3, [r7, #4]
   13b8e:	7adb      	ldrb	r3, [r3, #11]
   13b90:	2b00      	cmp	r3, #0
   13b92:	d01e      	beq.n	13bd2 <_i2c_master_read_packet+0x1be>
   13b94:	230b      	movs	r3, #11
   13b96:	18fb      	adds	r3, r7, r3
   13b98:	781b      	ldrb	r3, [r3, #0]
   13b9a:	2201      	movs	r2, #1
   13b9c:	4053      	eors	r3, r2
   13b9e:	b2db      	uxtb	r3, r3
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	d004      	beq.n	13bae <_i2c_master_read_packet+0x19a>
   13ba4:	2314      	movs	r3, #20
   13ba6:	18fb      	adds	r3, r7, r3
   13ba8:	881b      	ldrh	r3, [r3, #0]
   13baa:	2b00      	cmp	r3, #0
   13bac:	d009      	beq.n	13bc2 <_i2c_master_read_packet+0x1ae>
   13bae:	230b      	movs	r3, #11
   13bb0:	18fb      	adds	r3, r7, r3
   13bb2:	781b      	ldrb	r3, [r3, #0]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d00c      	beq.n	13bd2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
   13bb8:	2314      	movs	r3, #20
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	881b      	ldrh	r3, [r3, #0]
   13bbe:	2b01      	cmp	r3, #1
   13bc0:	d107      	bne.n	13bd2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13bc2:	68fb      	ldr	r3, [r7, #12]
   13bc4:	685b      	ldr	r3, [r3, #4]
   13bc6:	2280      	movs	r2, #128	; 0x80
   13bc8:	02d2      	lsls	r2, r2, #11
   13bca:	431a      	orrs	r2, r3
   13bcc:	68fb      	ldr	r3, [r7, #12]
   13bce:	605a      	str	r2, [r3, #4]
   13bd0:	e01a      	b.n	13c08 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   13bd2:	687b      	ldr	r3, [r7, #4]
   13bd4:	0018      	movs	r0, r3
   13bd6:	4b2b      	ldr	r3, [pc, #172]	; (13c84 <_i2c_master_read_packet+0x270>)
   13bd8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   13bda:	683b      	ldr	r3, [r7, #0]
   13bdc:	685a      	ldr	r2, [r3, #4]
   13bde:	2312      	movs	r3, #18
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	881b      	ldrh	r3, [r3, #0]
   13be4:	2112      	movs	r1, #18
   13be6:	1879      	adds	r1, r7, r1
   13be8:	1c58      	adds	r0, r3, #1
   13bea:	8008      	strh	r0, [r1, #0]
   13bec:	18d3      	adds	r3, r2, r3
   13bee:	68fa      	ldr	r2, [r7, #12]
   13bf0:	2128      	movs	r1, #40	; 0x28
   13bf2:	5c52      	ldrb	r2, [r2, r1]
   13bf4:	b2d2      	uxtb	r2, r2
   13bf6:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   13bf8:	2317      	movs	r3, #23
   13bfa:	18fc      	adds	r4, r7, r3
   13bfc:	687b      	ldr	r3, [r7, #4]
   13bfe:	0018      	movs	r0, r3
   13c00:	4b1e      	ldr	r3, [pc, #120]	; (13c7c <_i2c_master_read_packet+0x268>)
   13c02:	4798      	blx	r3
   13c04:	0003      	movs	r3, r0
   13c06:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   13c08:	2317      	movs	r3, #23
   13c0a:	18fb      	adds	r3, r7, r3
   13c0c:	781b      	ldrb	r3, [r3, #0]
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d109      	bne.n	13c26 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
   13c12:	2314      	movs	r3, #20
   13c14:	18fb      	adds	r3, r7, r3
   13c16:	881b      	ldrh	r3, [r3, #0]
   13c18:	2214      	movs	r2, #20
   13c1a:	18ba      	adds	r2, r7, r2
   13c1c:	1e59      	subs	r1, r3, #1
   13c1e:	8011      	strh	r1, [r2, #0]
   13c20:	2b00      	cmp	r3, #0
   13c22:	d1aa      	bne.n	13b7a <_i2c_master_read_packet+0x166>
   13c24:	e000      	b.n	13c28 <_i2c_master_read_packet+0x214>
				break;
   13c26:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   13c28:	687b      	ldr	r3, [r7, #4]
   13c2a:	7a9b      	ldrb	r3, [r3, #10]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d00a      	beq.n	13c46 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   13c30:	687b      	ldr	r3, [r7, #4]
   13c32:	0018      	movs	r0, r3
   13c34:	4b13      	ldr	r3, [pc, #76]	; (13c84 <_i2c_master_read_packet+0x270>)
   13c36:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13c38:	68fb      	ldr	r3, [r7, #12]
   13c3a:	685b      	ldr	r3, [r3, #4]
   13c3c:	22c0      	movs	r2, #192	; 0xc0
   13c3e:	0292      	lsls	r2, r2, #10
   13c40:	431a      	orrs	r2, r3
   13c42:	68fb      	ldr	r3, [r7, #12]
   13c44:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   13c46:	687b      	ldr	r3, [r7, #4]
   13c48:	0018      	movs	r0, r3
   13c4a:	4b0e      	ldr	r3, [pc, #56]	; (13c84 <_i2c_master_read_packet+0x270>)
   13c4c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   13c4e:	683b      	ldr	r3, [r7, #0]
   13c50:	685a      	ldr	r2, [r3, #4]
   13c52:	2312      	movs	r3, #18
   13c54:	18fb      	adds	r3, r7, r3
   13c56:	881b      	ldrh	r3, [r3, #0]
   13c58:	18d3      	adds	r3, r2, r3
   13c5a:	68fa      	ldr	r2, [r7, #12]
   13c5c:	2128      	movs	r1, #40	; 0x28
   13c5e:	5c52      	ldrb	r2, [r2, r1]
   13c60:	b2d2      	uxtb	r2, r2
   13c62:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   13c64:	2317      	movs	r3, #23
   13c66:	18fb      	adds	r3, r7, r3
   13c68:	781b      	ldrb	r3, [r3, #0]
}
   13c6a:	0018      	movs	r0, r3
   13c6c:	46bd      	mov	sp, r7
   13c6e:	b007      	add	sp, #28
   13c70:	bd90      	pop	{r4, r7, pc}
   13c72:	46c0      	nop			; (mov r8, r8)
   13c74:	000139c1 	.word	0x000139c1
   13c78:	fffbffff 	.word	0xfffbffff
   13c7c:	00013963 	.word	0x00013963
   13c80:	00013905 	.word	0x00013905
   13c84:	000132b9 	.word	0x000132b9

00013c88 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13c88:	b580      	push	{r7, lr}
   13c8a:	b082      	sub	sp, #8
   13c8c:	af00      	add	r7, sp, #0
   13c8e:	6078      	str	r0, [r7, #4]
   13c90:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
   13c92:	687b      	ldr	r3, [r7, #4]
   13c94:	8b9b      	ldrh	r3, [r3, #28]
   13c96:	b29b      	uxth	r3, r3
   13c98:	2b00      	cmp	r3, #0
   13c9a:	d001      	beq.n	13ca0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
   13c9c:	2305      	movs	r3, #5
   13c9e:	e00c      	b.n	13cba <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
   13ca0:	687b      	ldr	r3, [r7, #4]
   13ca2:	2201      	movs	r2, #1
   13ca4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13ca6:	687b      	ldr	r3, [r7, #4]
   13ca8:	2201      	movs	r2, #1
   13caa:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
   13cac:	683a      	ldr	r2, [r7, #0]
   13cae:	687b      	ldr	r3, [r7, #4]
   13cb0:	0011      	movs	r1, r2
   13cb2:	0018      	movs	r0, r3
   13cb4:	4b03      	ldr	r3, [pc, #12]	; (13cc4 <i2c_master_read_packet_wait+0x3c>)
   13cb6:	4798      	blx	r3
   13cb8:	0003      	movs	r3, r0
}
   13cba:	0018      	movs	r0, r3
   13cbc:	46bd      	mov	sp, r7
   13cbe:	b002      	add	sp, #8
   13cc0:	bd80      	pop	{r7, pc}
   13cc2:	46c0      	nop			; (mov r8, r8)
   13cc4:	00013a15 	.word	0x00013a15

00013cc8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13cc8:	b590      	push	{r4, r7, lr}
   13cca:	b087      	sub	sp, #28
   13ccc:	af00      	add	r7, sp, #0
   13cce:	6078      	str	r0, [r7, #4]
   13cd0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	681b      	ldr	r3, [r3, #0]
   13cd6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   13cd8:	2314      	movs	r3, #20
   13cda:	18fb      	adds	r3, r7, r3
   13cdc:	683a      	ldr	r2, [r7, #0]
   13cde:	8852      	ldrh	r2, [r2, #2]
   13ce0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   13ce2:	687b      	ldr	r3, [r7, #4]
   13ce4:	0018      	movs	r0, r3
   13ce6:	4b51      	ldr	r3, [pc, #324]	; (13e2c <_i2c_master_write_packet+0x164>)
   13ce8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13cea:	683b      	ldr	r3, [r7, #0]
   13cec:	7a5b      	ldrb	r3, [r3, #9]
   13cee:	2b00      	cmp	r3, #0
   13cf0:	d006      	beq.n	13d00 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13cf2:	683b      	ldr	r3, [r7, #0]
   13cf4:	7a9a      	ldrb	r2, [r3, #10]
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	0011      	movs	r1, r2
   13cfa:	0018      	movs	r0, r3
   13cfc:	4b4c      	ldr	r3, [pc, #304]	; (13e30 <_i2c_master_write_packet+0x168>)
   13cfe:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13d00:	68fb      	ldr	r3, [r7, #12]
   13d02:	685b      	ldr	r3, [r3, #4]
   13d04:	4a4b      	ldr	r2, [pc, #300]	; (13e34 <_i2c_master_write_packet+0x16c>)
   13d06:	401a      	ands	r2, r3
   13d08:	68fb      	ldr	r3, [r7, #12]
   13d0a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   13d0c:	683b      	ldr	r3, [r7, #0]
   13d0e:	7a1b      	ldrb	r3, [r3, #8]
   13d10:	2b00      	cmp	r3, #0
   13d12:	d00d      	beq.n	13d30 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d14:	683b      	ldr	r3, [r7, #0]
   13d16:	881b      	ldrh	r3, [r3, #0]
   13d18:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13d1a:	683b      	ldr	r3, [r7, #0]
   13d1c:	7a5b      	ldrb	r3, [r3, #9]
   13d1e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d20:	4313      	orrs	r3, r2
   13d22:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13d24:	2380      	movs	r3, #128	; 0x80
   13d26:	021b      	lsls	r3, r3, #8
   13d28:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d2a:	68fb      	ldr	r3, [r7, #12]
   13d2c:	625a      	str	r2, [r3, #36]	; 0x24
   13d2e:	e009      	b.n	13d44 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d30:	683b      	ldr	r3, [r7, #0]
   13d32:	881b      	ldrh	r3, [r3, #0]
   13d34:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13d36:	683b      	ldr	r3, [r7, #0]
   13d38:	7a5b      	ldrb	r3, [r3, #9]
   13d3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d3c:	4313      	orrs	r3, r2
   13d3e:	001a      	movs	r2, r3
   13d40:	68fb      	ldr	r3, [r7, #12]
   13d42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   13d44:	2317      	movs	r3, #23
   13d46:	18fc      	adds	r4, r7, r3
   13d48:	687b      	ldr	r3, [r7, #4]
   13d4a:	0018      	movs	r0, r3
   13d4c:	4b3a      	ldr	r3, [pc, #232]	; (13e38 <_i2c_master_write_packet+0x170>)
   13d4e:	4798      	blx	r3
   13d50:	0003      	movs	r3, r0
   13d52:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   13d54:	2317      	movs	r3, #23
   13d56:	18fb      	adds	r3, r7, r3
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d107      	bne.n	13d6e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
   13d5e:	2317      	movs	r3, #23
   13d60:	18fc      	adds	r4, r7, r3
   13d62:	687b      	ldr	r3, [r7, #4]
   13d64:	0018      	movs	r0, r3
   13d66:	4b35      	ldr	r3, [pc, #212]	; (13e3c <_i2c_master_write_packet+0x174>)
   13d68:	4798      	blx	r3
   13d6a:	0003      	movs	r3, r0
   13d6c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   13d6e:	2317      	movs	r3, #23
   13d70:	18fb      	adds	r3, r7, r3
   13d72:	781b      	ldrb	r3, [r3, #0]
   13d74:	2b00      	cmp	r3, #0
   13d76:	d152      	bne.n	13e1e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   13d78:	2312      	movs	r3, #18
   13d7a:	18fb      	adds	r3, r7, r3
   13d7c:	2200      	movs	r2, #0
   13d7e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   13d80:	e033      	b.n	13dea <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   13d82:	68fb      	ldr	r3, [r7, #12]
   13d84:	8b5b      	ldrh	r3, [r3, #26]
   13d86:	b29b      	uxth	r3, r3
   13d88:	001a      	movs	r2, r3
   13d8a:	2320      	movs	r3, #32
   13d8c:	4013      	ands	r3, r2
   13d8e:	d101      	bne.n	13d94 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
   13d90:	2341      	movs	r3, #65	; 0x41
   13d92:	e047      	b.n	13e24 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   13d94:	687b      	ldr	r3, [r7, #4]
   13d96:	0018      	movs	r0, r3
   13d98:	4b24      	ldr	r3, [pc, #144]	; (13e2c <_i2c_master_write_packet+0x164>)
   13d9a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   13d9c:	683b      	ldr	r3, [r7, #0]
   13d9e:	685a      	ldr	r2, [r3, #4]
   13da0:	2312      	movs	r3, #18
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	881b      	ldrh	r3, [r3, #0]
   13da6:	2112      	movs	r1, #18
   13da8:	1879      	adds	r1, r7, r1
   13daa:	1c58      	adds	r0, r3, #1
   13dac:	8008      	strh	r0, [r1, #0]
   13dae:	18d3      	adds	r3, r2, r3
   13db0:	7819      	ldrb	r1, [r3, #0]
   13db2:	68fb      	ldr	r3, [r7, #12]
   13db4:	2228      	movs	r2, #40	; 0x28
   13db6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   13db8:	2317      	movs	r3, #23
   13dba:	18fc      	adds	r4, r7, r3
   13dbc:	687b      	ldr	r3, [r7, #4]
   13dbe:	0018      	movs	r0, r3
   13dc0:	4b1d      	ldr	r3, [pc, #116]	; (13e38 <_i2c_master_write_packet+0x170>)
   13dc2:	4798      	blx	r3
   13dc4:	0003      	movs	r3, r0
   13dc6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   13dc8:	2317      	movs	r3, #23
   13dca:	18fb      	adds	r3, r7, r3
   13dcc:	781b      	ldrb	r3, [r3, #0]
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d115      	bne.n	13dfe <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13dd2:	68fb      	ldr	r3, [r7, #12]
   13dd4:	8b5b      	ldrh	r3, [r3, #26]
   13dd6:	b29b      	uxth	r3, r3
   13dd8:	001a      	movs	r2, r3
   13dda:	2304      	movs	r3, #4
   13ddc:	4013      	ands	r3, r2
   13dde:	d004      	beq.n	13dea <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   13de0:	2317      	movs	r3, #23
   13de2:	18fb      	adds	r3, r7, r3
   13de4:	221e      	movs	r2, #30
   13de6:	701a      	strb	r2, [r3, #0]
				break;
   13de8:	e00a      	b.n	13e00 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
   13dea:	2314      	movs	r3, #20
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	881b      	ldrh	r3, [r3, #0]
   13df0:	2214      	movs	r2, #20
   13df2:	18ba      	adds	r2, r7, r2
   13df4:	1e59      	subs	r1, r3, #1
   13df6:	8011      	strh	r1, [r2, #0]
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d1c2      	bne.n	13d82 <_i2c_master_write_packet+0xba>
   13dfc:	e000      	b.n	13e00 <_i2c_master_write_packet+0x138>
				break;
   13dfe:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   13e00:	687b      	ldr	r3, [r7, #4]
   13e02:	7a9b      	ldrb	r3, [r3, #10]
   13e04:	2b00      	cmp	r3, #0
   13e06:	d00a      	beq.n	13e1e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   13e08:	687b      	ldr	r3, [r7, #4]
   13e0a:	0018      	movs	r0, r3
   13e0c:	4b07      	ldr	r3, [pc, #28]	; (13e2c <_i2c_master_write_packet+0x164>)
   13e0e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13e10:	68fb      	ldr	r3, [r7, #12]
   13e12:	685b      	ldr	r3, [r3, #4]
   13e14:	22c0      	movs	r2, #192	; 0xc0
   13e16:	0292      	lsls	r2, r2, #10
   13e18:	431a      	orrs	r2, r3
   13e1a:	68fb      	ldr	r3, [r7, #12]
   13e1c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   13e1e:	2317      	movs	r3, #23
   13e20:	18fb      	adds	r3, r7, r3
   13e22:	781b      	ldrb	r3, [r3, #0]
}
   13e24:	0018      	movs	r0, r3
   13e26:	46bd      	mov	sp, r7
   13e28:	b007      	add	sp, #28
   13e2a:	bd90      	pop	{r4, r7, pc}
   13e2c:	000132b9 	.word	0x000132b9
   13e30:	000139c1 	.word	0x000139c1
   13e34:	fffbffff 	.word	0xfffbffff
   13e38:	00013963 	.word	0x00013963
   13e3c:	00013905 	.word	0x00013905

00013e40 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13e40:	b580      	push	{r7, lr}
   13e42:	b082      	sub	sp, #8
   13e44:	af00      	add	r7, sp, #0
   13e46:	6078      	str	r0, [r7, #4]
   13e48:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13e4a:	687b      	ldr	r3, [r7, #4]
   13e4c:	8b9b      	ldrh	r3, [r3, #28]
   13e4e:	b29b      	uxth	r3, r3
   13e50:	2b00      	cmp	r3, #0
   13e52:	d001      	beq.n	13e58 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
   13e54:	2305      	movs	r3, #5
   13e56:	e00c      	b.n	13e72 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
   13e58:	687b      	ldr	r3, [r7, #4]
   13e5a:	2201      	movs	r2, #1
   13e5c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	2201      	movs	r2, #1
   13e62:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
   13e64:	683a      	ldr	r2, [r7, #0]
   13e66:	687b      	ldr	r3, [r7, #4]
   13e68:	0011      	movs	r1, r2
   13e6a:	0018      	movs	r0, r3
   13e6c:	4b03      	ldr	r3, [pc, #12]	; (13e7c <i2c_master_write_packet_wait+0x3c>)
   13e6e:	4798      	blx	r3
   13e70:	0003      	movs	r3, r0
}
   13e72:	0018      	movs	r0, r3
   13e74:	46bd      	mov	sp, r7
   13e76:	b002      	add	sp, #8
   13e78:	bd80      	pop	{r7, pc}
   13e7a:	46c0      	nop			; (mov r8, r8)
   13e7c:	00013cc9 	.word	0x00013cc9

00013e80 <system_gclk_chan_get_config_defaults>:
{
   13e80:	b580      	push	{r7, lr}
   13e82:	b082      	sub	sp, #8
   13e84:	af00      	add	r7, sp, #0
   13e86:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13e88:	687b      	ldr	r3, [r7, #4]
   13e8a:	2200      	movs	r2, #0
   13e8c:	701a      	strb	r2, [r3, #0]
}
   13e8e:	46c0      	nop			; (mov r8, r8)
   13e90:	46bd      	mov	sp, r7
   13e92:	b002      	add	sp, #8
   13e94:	bd80      	pop	{r7, pc}

00013e96 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   13e96:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e98:	b08d      	sub	sp, #52	; 0x34
   13e9a:	af00      	add	r7, sp, #0
   13e9c:	60b8      	str	r0, [r7, #8]
   13e9e:	60f9      	str	r1, [r7, #12]
   13ea0:	603a      	str	r2, [r7, #0]
   13ea2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   13ea4:	2300      	movs	r3, #0
   13ea6:	2400      	movs	r4, #0
   13ea8:	623b      	str	r3, [r7, #32]
   13eaa:	627c      	str	r4, [r7, #36]	; 0x24
   13eac:	2300      	movs	r3, #0
   13eae:	2400      	movs	r4, #0
   13eb0:	61bb      	str	r3, [r7, #24]
   13eb2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   13eb4:	233f      	movs	r3, #63	; 0x3f
   13eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   13eb8:	e053      	b.n	13f62 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   13eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ebc:	3b20      	subs	r3, #32
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	db04      	blt.n	13ecc <long_division+0x36>
   13ec2:	2201      	movs	r2, #1
   13ec4:	409a      	lsls	r2, r3
   13ec6:	0013      	movs	r3, r2
   13ec8:	617b      	str	r3, [r7, #20]
   13eca:	e00b      	b.n	13ee4 <long_division+0x4e>
   13ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ece:	2220      	movs	r2, #32
   13ed0:	1ad3      	subs	r3, r2, r3
   13ed2:	2201      	movs	r2, #1
   13ed4:	40da      	lsrs	r2, r3
   13ed6:	0013      	movs	r3, r2
   13ed8:	2100      	movs	r1, #0
   13eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13edc:	4091      	lsls	r1, r2
   13ede:	000a      	movs	r2, r1
   13ee0:	4313      	orrs	r3, r2
   13ee2:	617b      	str	r3, [r7, #20]
   13ee4:	2201      	movs	r2, #1
   13ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13ee8:	409a      	lsls	r2, r3
   13eea:	0013      	movs	r3, r2
   13eec:	613b      	str	r3, [r7, #16]

		r = r << 1;
   13eee:	69bb      	ldr	r3, [r7, #24]
   13ef0:	69fc      	ldr	r4, [r7, #28]
   13ef2:	18db      	adds	r3, r3, r3
   13ef4:	4164      	adcs	r4, r4
   13ef6:	61bb      	str	r3, [r7, #24]
   13ef8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   13efa:	68bb      	ldr	r3, [r7, #8]
   13efc:	693a      	ldr	r2, [r7, #16]
   13efe:	401a      	ands	r2, r3
   13f00:	0015      	movs	r5, r2
   13f02:	68fb      	ldr	r3, [r7, #12]
   13f04:	697a      	ldr	r2, [r7, #20]
   13f06:	401a      	ands	r2, r3
   13f08:	0016      	movs	r6, r2
   13f0a:	002b      	movs	r3, r5
   13f0c:	4333      	orrs	r3, r6
   13f0e:	d007      	beq.n	13f20 <long_division+0x8a>
			r |= 0x01;
   13f10:	69bb      	ldr	r3, [r7, #24]
   13f12:	2201      	movs	r2, #1
   13f14:	4313      	orrs	r3, r2
   13f16:	61bb      	str	r3, [r7, #24]
   13f18:	69fb      	ldr	r3, [r7, #28]
   13f1a:	2200      	movs	r2, #0
   13f1c:	4313      	orrs	r3, r2
   13f1e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   13f20:	687a      	ldr	r2, [r7, #4]
   13f22:	69fb      	ldr	r3, [r7, #28]
   13f24:	429a      	cmp	r2, r3
   13f26:	d819      	bhi.n	13f5c <long_division+0xc6>
   13f28:	687a      	ldr	r2, [r7, #4]
   13f2a:	69fb      	ldr	r3, [r7, #28]
   13f2c:	429a      	cmp	r2, r3
   13f2e:	d103      	bne.n	13f38 <long_division+0xa2>
   13f30:	683a      	ldr	r2, [r7, #0]
   13f32:	69bb      	ldr	r3, [r7, #24]
   13f34:	429a      	cmp	r2, r3
   13f36:	d811      	bhi.n	13f5c <long_division+0xc6>
			r = r - d;
   13f38:	69b9      	ldr	r1, [r7, #24]
   13f3a:	69fa      	ldr	r2, [r7, #28]
   13f3c:	683b      	ldr	r3, [r7, #0]
   13f3e:	687c      	ldr	r4, [r7, #4]
   13f40:	1ac9      	subs	r1, r1, r3
   13f42:	41a2      	sbcs	r2, r4
   13f44:	000b      	movs	r3, r1
   13f46:	0014      	movs	r4, r2
   13f48:	61bb      	str	r3, [r7, #24]
   13f4a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   13f4c:	6a3a      	ldr	r2, [r7, #32]
   13f4e:	693b      	ldr	r3, [r7, #16]
   13f50:	4313      	orrs	r3, r2
   13f52:	623b      	str	r3, [r7, #32]
   13f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13f56:	697b      	ldr	r3, [r7, #20]
   13f58:	4313      	orrs	r3, r2
   13f5a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   13f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13f5e:	3b01      	subs	r3, #1
   13f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   13f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13f64:	2b00      	cmp	r3, #0
   13f66:	daa8      	bge.n	13eba <long_division+0x24>
		}
	}

	return q;
   13f68:	6a3b      	ldr	r3, [r7, #32]
   13f6a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   13f6c:	0018      	movs	r0, r3
   13f6e:	0021      	movs	r1, r4
   13f70:	46bd      	mov	sp, r7
   13f72:	b00d      	add	sp, #52	; 0x34
   13f74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013f76 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   13f76:	b580      	push	{r7, lr}
   13f78:	b086      	sub	sp, #24
   13f7a:	af00      	add	r7, sp, #0
   13f7c:	60f8      	str	r0, [r7, #12]
   13f7e:	60b9      	str	r1, [r7, #8]
   13f80:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   13f82:	2316      	movs	r3, #22
   13f84:	18fb      	adds	r3, r7, r3
   13f86:	2200      	movs	r2, #0
   13f88:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   13f8a:	68bb      	ldr	r3, [r7, #8]
   13f8c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   13f8e:	68bb      	ldr	r3, [r7, #8]
   13f90:	085a      	lsrs	r2, r3, #1
   13f92:	68fb      	ldr	r3, [r7, #12]
   13f94:	429a      	cmp	r2, r3
   13f96:	d201      	bcs.n	13f9c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13f98:	2340      	movs	r3, #64	; 0x40
   13f9a:	e026      	b.n	13fea <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   13f9c:	68bb      	ldr	r3, [r7, #8]
   13f9e:	085b      	lsrs	r3, r3, #1
   13fa0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   13fa2:	e00a      	b.n	13fba <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   13fa4:	693a      	ldr	r2, [r7, #16]
   13fa6:	68fb      	ldr	r3, [r7, #12]
   13fa8:	1ad3      	subs	r3, r2, r3
   13faa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   13fac:	2316      	movs	r3, #22
   13fae:	18fb      	adds	r3, r7, r3
   13fb0:	881a      	ldrh	r2, [r3, #0]
   13fb2:	2316      	movs	r3, #22
   13fb4:	18fb      	adds	r3, r7, r3
   13fb6:	3201      	adds	r2, #1
   13fb8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   13fba:	693a      	ldr	r2, [r7, #16]
   13fbc:	68fb      	ldr	r3, [r7, #12]
   13fbe:	429a      	cmp	r2, r3
   13fc0:	d2f0      	bcs.n	13fa4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   13fc2:	2316      	movs	r3, #22
   13fc4:	18fb      	adds	r3, r7, r3
   13fc6:	2216      	movs	r2, #22
   13fc8:	18ba      	adds	r2, r7, r2
   13fca:	8812      	ldrh	r2, [r2, #0]
   13fcc:	3a01      	subs	r2, #1
   13fce:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   13fd0:	2316      	movs	r3, #22
   13fd2:	18fb      	adds	r3, r7, r3
   13fd4:	881b      	ldrh	r3, [r3, #0]
   13fd6:	2bff      	cmp	r3, #255	; 0xff
   13fd8:	d901      	bls.n	13fde <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13fda:	2340      	movs	r3, #64	; 0x40
   13fdc:	e005      	b.n	13fea <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   13fde:	687b      	ldr	r3, [r7, #4]
   13fe0:	2216      	movs	r2, #22
   13fe2:	18ba      	adds	r2, r7, r2
   13fe4:	8812      	ldrh	r2, [r2, #0]
   13fe6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   13fe8:	2300      	movs	r3, #0
	}
}
   13fea:	0018      	movs	r0, r3
   13fec:	46bd      	mov	sp, r7
   13fee:	b006      	add	sp, #24
   13ff0:	bd80      	pop	{r7, pc}
	...

00013ff4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   13ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ff6:	b0a1      	sub	sp, #132	; 0x84
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ffc:	64b9      	str	r1, [r7, #72]	; 0x48
   13ffe:	647a      	str	r2, [r7, #68]	; 0x44
   14000:	2243      	movs	r2, #67	; 0x43
   14002:	18ba      	adds	r2, r7, r2
   14004:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   14006:	2300      	movs	r3, #0
   14008:	2400      	movs	r4, #0
   1400a:	673b      	str	r3, [r7, #112]	; 0x70
   1400c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1400e:	2300      	movs	r3, #0
   14010:	2400      	movs	r4, #0
   14012:	66bb      	str	r3, [r7, #104]	; 0x68
   14014:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   14016:	2300      	movs	r3, #0
   14018:	2400      	movs	r4, #0
   1401a:	67bb      	str	r3, [r7, #120]	; 0x78
   1401c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1401e:	2300      	movs	r3, #0
   14020:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   14022:	2358      	movs	r3, #88	; 0x58
   14024:	2240      	movs	r2, #64	; 0x40
   14026:	4694      	mov	ip, r2
   14028:	44bc      	add	ip, r7
   1402a:	4463      	add	r3, ip
   1402c:	781a      	ldrb	r2, [r3, #0]
   1402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14030:	435a      	muls	r2, r3
   14032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14034:	429a      	cmp	r2, r3
   14036:	d901      	bls.n	1403c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14038:	2340      	movs	r3, #64	; 0x40
   1403a:	e0b3      	b.n	141a4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1403c:	2343      	movs	r3, #67	; 0x43
   1403e:	18fb      	adds	r3, r7, r3
   14040:	781b      	ldrb	r3, [r3, #0]
   14042:	2b00      	cmp	r3, #0
   14044:	d13d      	bne.n	140c2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   14046:	2358      	movs	r3, #88	; 0x58
   14048:	2240      	movs	r2, #64	; 0x40
   1404a:	4694      	mov	ip, r2
   1404c:	44bc      	add	ip, r7
   1404e:	4463      	add	r3, ip
   14050:	781b      	ldrb	r3, [r3, #0]
   14052:	b2db      	uxtb	r3, r3
   14054:	613b      	str	r3, [r7, #16]
   14056:	2300      	movs	r3, #0
   14058:	617b      	str	r3, [r7, #20]
   1405a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1405c:	60bb      	str	r3, [r7, #8]
   1405e:	2300      	movs	r3, #0
   14060:	60fb      	str	r3, [r7, #12]
   14062:	4c52      	ldr	r4, [pc, #328]	; (141ac <_sercom_get_async_baud_val+0x1b8>)
   14064:	68ba      	ldr	r2, [r7, #8]
   14066:	68fb      	ldr	r3, [r7, #12]
   14068:	6938      	ldr	r0, [r7, #16]
   1406a:	6979      	ldr	r1, [r7, #20]
   1406c:	47a0      	blx	r4
   1406e:	0003      	movs	r3, r0
   14070:	000c      	movs	r4, r1
   14072:	001b      	movs	r3, r3
   14074:	65fb      	str	r3, [r7, #92]	; 0x5c
   14076:	2300      	movs	r3, #0
   14078:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1407c:	603b      	str	r3, [r7, #0]
   1407e:	2300      	movs	r3, #0
   14080:	607b      	str	r3, [r7, #4]
   14082:	6db8      	ldr	r0, [r7, #88]	; 0x58
   14084:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14086:	683a      	ldr	r2, [r7, #0]
   14088:	687b      	ldr	r3, [r7, #4]
   1408a:	4c49      	ldr	r4, [pc, #292]	; (141b0 <_sercom_get_async_baud_val+0x1bc>)
   1408c:	47a0      	blx	r4
   1408e:	0003      	movs	r3, r0
   14090:	000c      	movs	r4, r1
   14092:	673b      	str	r3, [r7, #112]	; 0x70
   14094:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   14096:	2100      	movs	r1, #0
   14098:	2201      	movs	r2, #1
   1409a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1409c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1409e:	1ac9      	subs	r1, r1, r3
   140a0:	41a2      	sbcs	r2, r4
   140a2:	000b      	movs	r3, r1
   140a4:	0014      	movs	r4, r2
   140a6:	66bb      	str	r3, [r7, #104]	; 0x68
   140a8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   140aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   140ac:	0c1b      	lsrs	r3, r3, #16
   140ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   140b0:	0416      	lsls	r6, r2, #16
   140b2:	431e      	orrs	r6, r3
   140b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   140b6:	041d      	lsls	r5, r3, #16
   140b8:	0033      	movs	r3, r6
   140ba:	67bb      	str	r3, [r7, #120]	; 0x78
   140bc:	2300      	movs	r3, #0
   140be:	67fb      	str	r3, [r7, #124]	; 0x7c
   140c0:	e06a      	b.n	14198 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   140c2:	2343      	movs	r3, #67	; 0x43
   140c4:	18fb      	adds	r3, r7, r3
   140c6:	781b      	ldrb	r3, [r3, #0]
   140c8:	2b01      	cmp	r3, #1
   140ca:	d165      	bne.n	14198 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   140cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   140ce:	633b      	str	r3, [r7, #48]	; 0x30
   140d0:	2300      	movs	r3, #0
   140d2:	637b      	str	r3, [r7, #52]	; 0x34
   140d4:	2358      	movs	r3, #88	; 0x58
   140d6:	2240      	movs	r2, #64	; 0x40
   140d8:	4694      	mov	ip, r2
   140da:	44bc      	add	ip, r7
   140dc:	4463      	add	r3, ip
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	b2db      	uxtb	r3, r3
   140e2:	62bb      	str	r3, [r7, #40]	; 0x28
   140e4:	2300      	movs	r3, #0
   140e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   140e8:	4c30      	ldr	r4, [pc, #192]	; (141ac <_sercom_get_async_baud_val+0x1b8>)
   140ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   140ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   140ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
   140f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   140f2:	47a0      	blx	r4
   140f4:	0003      	movs	r3, r0
   140f6:	000c      	movs	r4, r1
   140f8:	65bb      	str	r3, [r7, #88]	; 0x58
   140fa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   140fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   140fe:	623b      	str	r3, [r7, #32]
   14100:	2300      	movs	r3, #0
   14102:	627b      	str	r3, [r7, #36]	; 0x24
   14104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14106:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14108:	001a      	movs	r2, r3
   1410a:	0023      	movs	r3, r4
   1410c:	6a38      	ldr	r0, [r7, #32]
   1410e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14110:	4c27      	ldr	r4, [pc, #156]	; (141b0 <_sercom_get_async_baud_val+0x1bc>)
   14112:	47a0      	blx	r4
   14114:	0003      	movs	r3, r0
   14116:	000c      	movs	r4, r1
   14118:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1411a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1411c:	2380      	movs	r3, #128	; 0x80
   1411e:	019b      	lsls	r3, r3, #6
   14120:	429a      	cmp	r2, r3
   14122:	d901      	bls.n	14128 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14124:	2340      	movs	r3, #64	; 0x40
   14126:	e03d      	b.n	141a4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1412a:	61bb      	str	r3, [r7, #24]
   1412c:	2300      	movs	r3, #0
   1412e:	61fb      	str	r3, [r7, #28]
   14130:	69b9      	ldr	r1, [r7, #24]
   14132:	69fa      	ldr	r2, [r7, #28]
   14134:	000b      	movs	r3, r1
   14136:	0f5b      	lsrs	r3, r3, #29
   14138:	0010      	movs	r0, r2
   1413a:	00c0      	lsls	r0, r0, #3
   1413c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1413e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14140:	4318      	orrs	r0, r3
   14142:	63f8      	str	r0, [r7, #60]	; 0x3c
   14144:	000b      	movs	r3, r1
   14146:	00db      	lsls	r3, r3, #3
   14148:	63bb      	str	r3, [r7, #56]	; 0x38
   1414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1414c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1414e:	001a      	movs	r2, r3
   14150:	0023      	movs	r3, r4
   14152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14156:	4c16      	ldr	r4, [pc, #88]	; (141b0 <_sercom_get_async_baud_val+0x1bc>)
   14158:	47a0      	blx	r4
   1415a:	0003      	movs	r3, r0
   1415c:	000c      	movs	r4, r1
   1415e:	65bb      	str	r3, [r7, #88]	; 0x58
   14160:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   14162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14164:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14166:	b2d9      	uxtb	r1, r3
   14168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1416a:	b2db      	uxtb	r3, r3
   1416c:	00db      	lsls	r3, r3, #3
   1416e:	b2da      	uxtb	r2, r3
   14170:	2317      	movs	r3, #23
   14172:	2040      	movs	r0, #64	; 0x40
   14174:	4684      	mov	ip, r0
   14176:	44bc      	add	ip, r7
   14178:	4463      	add	r3, ip
   1417a:	1a8a      	subs	r2, r1, r2
   1417c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1417e:	2317      	movs	r3, #23
   14180:	2240      	movs	r2, #64	; 0x40
   14182:	4694      	mov	ip, r2
   14184:	44bc      	add	ip, r7
   14186:	4463      	add	r3, ip
   14188:	781b      	ldrb	r3, [r3, #0]
   1418a:	035b      	lsls	r3, r3, #13
   1418c:	001a      	movs	r2, r3
   1418e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14190:	4313      	orrs	r3, r2
   14192:	67bb      	str	r3, [r7, #120]	; 0x78
   14194:	2300      	movs	r3, #0
   14196:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   14198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1419a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1419c:	b29a      	uxth	r2, r3
   1419e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   141a0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   141a2:	2300      	movs	r3, #0
}
   141a4:	0018      	movs	r0, r3
   141a6:	46bd      	mov	sp, r7
   141a8:	b021      	add	sp, #132	; 0x84
   141aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   141ac:	00019e51 	.word	0x00019e51
   141b0:	00013e97 	.word	0x00013e97

000141b4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   141b4:	b580      	push	{r7, lr}
   141b6:	b084      	sub	sp, #16
   141b8:	af00      	add	r7, sp, #0
   141ba:	0002      	movs	r2, r0
   141bc:	1dfb      	adds	r3, r7, #7
   141be:	701a      	strb	r2, [r3, #0]
   141c0:	1dbb      	adds	r3, r7, #6
   141c2:	1c0a      	adds	r2, r1, #0
   141c4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   141c6:	4b1a      	ldr	r3, [pc, #104]	; (14230 <sercom_set_gclk_generator+0x7c>)
   141c8:	781b      	ldrb	r3, [r3, #0]
   141ca:	2201      	movs	r2, #1
   141cc:	4053      	eors	r3, r2
   141ce:	b2db      	uxtb	r3, r3
   141d0:	2b00      	cmp	r3, #0
   141d2:	d103      	bne.n	141dc <sercom_set_gclk_generator+0x28>
   141d4:	1dbb      	adds	r3, r7, #6
   141d6:	781b      	ldrb	r3, [r3, #0]
   141d8:	2b00      	cmp	r3, #0
   141da:	d01b      	beq.n	14214 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   141dc:	230c      	movs	r3, #12
   141de:	18fb      	adds	r3, r7, r3
   141e0:	0018      	movs	r0, r3
   141e2:	4b14      	ldr	r3, [pc, #80]	; (14234 <sercom_set_gclk_generator+0x80>)
   141e4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   141e6:	230c      	movs	r3, #12
   141e8:	18fb      	adds	r3, r7, r3
   141ea:	1dfa      	adds	r2, r7, #7
   141ec:	7812      	ldrb	r2, [r2, #0]
   141ee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   141f0:	230c      	movs	r3, #12
   141f2:	18fb      	adds	r3, r7, r3
   141f4:	0019      	movs	r1, r3
   141f6:	2011      	movs	r0, #17
   141f8:	4b0f      	ldr	r3, [pc, #60]	; (14238 <sercom_set_gclk_generator+0x84>)
   141fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   141fc:	2011      	movs	r0, #17
   141fe:	4b0f      	ldr	r3, [pc, #60]	; (1423c <sercom_set_gclk_generator+0x88>)
   14200:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   14202:	4b0b      	ldr	r3, [pc, #44]	; (14230 <sercom_set_gclk_generator+0x7c>)
   14204:	1dfa      	adds	r2, r7, #7
   14206:	7812      	ldrb	r2, [r2, #0]
   14208:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1420a:	4b09      	ldr	r3, [pc, #36]	; (14230 <sercom_set_gclk_generator+0x7c>)
   1420c:	2201      	movs	r2, #1
   1420e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   14210:	2300      	movs	r3, #0
   14212:	e008      	b.n	14226 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   14214:	4b06      	ldr	r3, [pc, #24]	; (14230 <sercom_set_gclk_generator+0x7c>)
   14216:	785b      	ldrb	r3, [r3, #1]
   14218:	1dfa      	adds	r2, r7, #7
   1421a:	7812      	ldrb	r2, [r2, #0]
   1421c:	429a      	cmp	r2, r3
   1421e:	d101      	bne.n	14224 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   14220:	2300      	movs	r3, #0
   14222:	e000      	b.n	14226 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   14224:	231d      	movs	r3, #29
}
   14226:	0018      	movs	r0, r3
   14228:	46bd      	mov	sp, r7
   1422a:	b004      	add	sp, #16
   1422c:	bd80      	pop	{r7, pc}
   1422e:	46c0      	nop			; (mov r8, r8)
   14230:	2000169c 	.word	0x2000169c
   14234:	00013e81 	.word	0x00013e81
   14238:	000169d9 	.word	0x000169d9
   1423c:	00016a19 	.word	0x00016a19

00014240 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   14240:	b580      	push	{r7, lr}
   14242:	b082      	sub	sp, #8
   14244:	af00      	add	r7, sp, #0
   14246:	6078      	str	r0, [r7, #4]
   14248:	000a      	movs	r2, r1
   1424a:	1cfb      	adds	r3, r7, #3
   1424c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1424e:	687b      	ldr	r3, [r7, #4]
   14250:	4a4e      	ldr	r2, [pc, #312]	; (1438c <_sercom_get_default_pad+0x14c>)
   14252:	4293      	cmp	r3, r2
   14254:	d040      	beq.n	142d8 <_sercom_get_default_pad+0x98>
   14256:	4a4d      	ldr	r2, [pc, #308]	; (1438c <_sercom_get_default_pad+0x14c>)
   14258:	4293      	cmp	r3, r2
   1425a:	d807      	bhi.n	1426c <_sercom_get_default_pad+0x2c>
   1425c:	2284      	movs	r2, #132	; 0x84
   1425e:	05d2      	lsls	r2, r2, #23
   14260:	4293      	cmp	r3, r2
   14262:	d00f      	beq.n	14284 <_sercom_get_default_pad+0x44>
   14264:	4a4a      	ldr	r2, [pc, #296]	; (14390 <_sercom_get_default_pad+0x150>)
   14266:	4293      	cmp	r3, r2
   14268:	d021      	beq.n	142ae <_sercom_get_default_pad+0x6e>
   1426a:	e089      	b.n	14380 <_sercom_get_default_pad+0x140>
   1426c:	4a49      	ldr	r2, [pc, #292]	; (14394 <_sercom_get_default_pad+0x154>)
   1426e:	4293      	cmp	r3, r2
   14270:	d100      	bne.n	14274 <_sercom_get_default_pad+0x34>
   14272:	e05b      	b.n	1432c <_sercom_get_default_pad+0xec>
   14274:	4a48      	ldr	r2, [pc, #288]	; (14398 <_sercom_get_default_pad+0x158>)
   14276:	4293      	cmp	r3, r2
   14278:	d100      	bne.n	1427c <_sercom_get_default_pad+0x3c>
   1427a:	e06c      	b.n	14356 <_sercom_get_default_pad+0x116>
   1427c:	4a47      	ldr	r2, [pc, #284]	; (1439c <_sercom_get_default_pad+0x15c>)
   1427e:	4293      	cmp	r3, r2
   14280:	d03f      	beq.n	14302 <_sercom_get_default_pad+0xc2>
   14282:	e07d      	b.n	14380 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   14284:	1cfb      	adds	r3, r7, #3
   14286:	781b      	ldrb	r3, [r3, #0]
   14288:	2b01      	cmp	r3, #1
   1428a:	d00a      	beq.n	142a2 <_sercom_get_default_pad+0x62>
   1428c:	dc02      	bgt.n	14294 <_sercom_get_default_pad+0x54>
   1428e:	2b00      	cmp	r3, #0
   14290:	d005      	beq.n	1429e <_sercom_get_default_pad+0x5e>
   14292:	e075      	b.n	14380 <_sercom_get_default_pad+0x140>
   14294:	2b02      	cmp	r3, #2
   14296:	d006      	beq.n	142a6 <_sercom_get_default_pad+0x66>
   14298:	2b03      	cmp	r3, #3
   1429a:	d006      	beq.n	142aa <_sercom_get_default_pad+0x6a>
   1429c:	e070      	b.n	14380 <_sercom_get_default_pad+0x140>
   1429e:	4b40      	ldr	r3, [pc, #256]	; (143a0 <_sercom_get_default_pad+0x160>)
   142a0:	e06f      	b.n	14382 <_sercom_get_default_pad+0x142>
   142a2:	4b40      	ldr	r3, [pc, #256]	; (143a4 <_sercom_get_default_pad+0x164>)
   142a4:	e06d      	b.n	14382 <_sercom_get_default_pad+0x142>
   142a6:	4b40      	ldr	r3, [pc, #256]	; (143a8 <_sercom_get_default_pad+0x168>)
   142a8:	e06b      	b.n	14382 <_sercom_get_default_pad+0x142>
   142aa:	4b40      	ldr	r3, [pc, #256]	; (143ac <_sercom_get_default_pad+0x16c>)
   142ac:	e069      	b.n	14382 <_sercom_get_default_pad+0x142>
   142ae:	1cfb      	adds	r3, r7, #3
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	2b01      	cmp	r3, #1
   142b4:	d00a      	beq.n	142cc <_sercom_get_default_pad+0x8c>
   142b6:	dc02      	bgt.n	142be <_sercom_get_default_pad+0x7e>
   142b8:	2b00      	cmp	r3, #0
   142ba:	d005      	beq.n	142c8 <_sercom_get_default_pad+0x88>
   142bc:	e060      	b.n	14380 <_sercom_get_default_pad+0x140>
   142be:	2b02      	cmp	r3, #2
   142c0:	d006      	beq.n	142d0 <_sercom_get_default_pad+0x90>
   142c2:	2b03      	cmp	r3, #3
   142c4:	d006      	beq.n	142d4 <_sercom_get_default_pad+0x94>
   142c6:	e05b      	b.n	14380 <_sercom_get_default_pad+0x140>
   142c8:	2303      	movs	r3, #3
   142ca:	e05a      	b.n	14382 <_sercom_get_default_pad+0x142>
   142cc:	4b38      	ldr	r3, [pc, #224]	; (143b0 <_sercom_get_default_pad+0x170>)
   142ce:	e058      	b.n	14382 <_sercom_get_default_pad+0x142>
   142d0:	4b38      	ldr	r3, [pc, #224]	; (143b4 <_sercom_get_default_pad+0x174>)
   142d2:	e056      	b.n	14382 <_sercom_get_default_pad+0x142>
   142d4:	4b38      	ldr	r3, [pc, #224]	; (143b8 <_sercom_get_default_pad+0x178>)
   142d6:	e054      	b.n	14382 <_sercom_get_default_pad+0x142>
   142d8:	1cfb      	adds	r3, r7, #3
   142da:	781b      	ldrb	r3, [r3, #0]
   142dc:	2b01      	cmp	r3, #1
   142de:	d00a      	beq.n	142f6 <_sercom_get_default_pad+0xb6>
   142e0:	dc02      	bgt.n	142e8 <_sercom_get_default_pad+0xa8>
   142e2:	2b00      	cmp	r3, #0
   142e4:	d005      	beq.n	142f2 <_sercom_get_default_pad+0xb2>
   142e6:	e04b      	b.n	14380 <_sercom_get_default_pad+0x140>
   142e8:	2b02      	cmp	r3, #2
   142ea:	d006      	beq.n	142fa <_sercom_get_default_pad+0xba>
   142ec:	2b03      	cmp	r3, #3
   142ee:	d006      	beq.n	142fe <_sercom_get_default_pad+0xbe>
   142f0:	e046      	b.n	14380 <_sercom_get_default_pad+0x140>
   142f2:	4b32      	ldr	r3, [pc, #200]	; (143bc <_sercom_get_default_pad+0x17c>)
   142f4:	e045      	b.n	14382 <_sercom_get_default_pad+0x142>
   142f6:	4b32      	ldr	r3, [pc, #200]	; (143c0 <_sercom_get_default_pad+0x180>)
   142f8:	e043      	b.n	14382 <_sercom_get_default_pad+0x142>
   142fa:	4b32      	ldr	r3, [pc, #200]	; (143c4 <_sercom_get_default_pad+0x184>)
   142fc:	e041      	b.n	14382 <_sercom_get_default_pad+0x142>
   142fe:	4b32      	ldr	r3, [pc, #200]	; (143c8 <_sercom_get_default_pad+0x188>)
   14300:	e03f      	b.n	14382 <_sercom_get_default_pad+0x142>
   14302:	1cfb      	adds	r3, r7, #3
   14304:	781b      	ldrb	r3, [r3, #0]
   14306:	2b01      	cmp	r3, #1
   14308:	d00a      	beq.n	14320 <_sercom_get_default_pad+0xe0>
   1430a:	dc02      	bgt.n	14312 <_sercom_get_default_pad+0xd2>
   1430c:	2b00      	cmp	r3, #0
   1430e:	d005      	beq.n	1431c <_sercom_get_default_pad+0xdc>
   14310:	e036      	b.n	14380 <_sercom_get_default_pad+0x140>
   14312:	2b02      	cmp	r3, #2
   14314:	d006      	beq.n	14324 <_sercom_get_default_pad+0xe4>
   14316:	2b03      	cmp	r3, #3
   14318:	d006      	beq.n	14328 <_sercom_get_default_pad+0xe8>
   1431a:	e031      	b.n	14380 <_sercom_get_default_pad+0x140>
   1431c:	4b2b      	ldr	r3, [pc, #172]	; (143cc <_sercom_get_default_pad+0x18c>)
   1431e:	e030      	b.n	14382 <_sercom_get_default_pad+0x142>
   14320:	4b2b      	ldr	r3, [pc, #172]	; (143d0 <_sercom_get_default_pad+0x190>)
   14322:	e02e      	b.n	14382 <_sercom_get_default_pad+0x142>
   14324:	4b2b      	ldr	r3, [pc, #172]	; (143d4 <_sercom_get_default_pad+0x194>)
   14326:	e02c      	b.n	14382 <_sercom_get_default_pad+0x142>
   14328:	4b2b      	ldr	r3, [pc, #172]	; (143d8 <_sercom_get_default_pad+0x198>)
   1432a:	e02a      	b.n	14382 <_sercom_get_default_pad+0x142>
   1432c:	1cfb      	adds	r3, r7, #3
   1432e:	781b      	ldrb	r3, [r3, #0]
   14330:	2b01      	cmp	r3, #1
   14332:	d00a      	beq.n	1434a <_sercom_get_default_pad+0x10a>
   14334:	dc02      	bgt.n	1433c <_sercom_get_default_pad+0xfc>
   14336:	2b00      	cmp	r3, #0
   14338:	d005      	beq.n	14346 <_sercom_get_default_pad+0x106>
   1433a:	e021      	b.n	14380 <_sercom_get_default_pad+0x140>
   1433c:	2b02      	cmp	r3, #2
   1433e:	d006      	beq.n	1434e <_sercom_get_default_pad+0x10e>
   14340:	2b03      	cmp	r3, #3
   14342:	d006      	beq.n	14352 <_sercom_get_default_pad+0x112>
   14344:	e01c      	b.n	14380 <_sercom_get_default_pad+0x140>
   14346:	4b25      	ldr	r3, [pc, #148]	; (143dc <_sercom_get_default_pad+0x19c>)
   14348:	e01b      	b.n	14382 <_sercom_get_default_pad+0x142>
   1434a:	4b25      	ldr	r3, [pc, #148]	; (143e0 <_sercom_get_default_pad+0x1a0>)
   1434c:	e019      	b.n	14382 <_sercom_get_default_pad+0x142>
   1434e:	4b25      	ldr	r3, [pc, #148]	; (143e4 <_sercom_get_default_pad+0x1a4>)
   14350:	e017      	b.n	14382 <_sercom_get_default_pad+0x142>
   14352:	4b25      	ldr	r3, [pc, #148]	; (143e8 <_sercom_get_default_pad+0x1a8>)
   14354:	e015      	b.n	14382 <_sercom_get_default_pad+0x142>
   14356:	1cfb      	adds	r3, r7, #3
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	2b01      	cmp	r3, #1
   1435c:	d00a      	beq.n	14374 <_sercom_get_default_pad+0x134>
   1435e:	dc02      	bgt.n	14366 <_sercom_get_default_pad+0x126>
   14360:	2b00      	cmp	r3, #0
   14362:	d005      	beq.n	14370 <_sercom_get_default_pad+0x130>
   14364:	e00c      	b.n	14380 <_sercom_get_default_pad+0x140>
   14366:	2b02      	cmp	r3, #2
   14368:	d006      	beq.n	14378 <_sercom_get_default_pad+0x138>
   1436a:	2b03      	cmp	r3, #3
   1436c:	d006      	beq.n	1437c <_sercom_get_default_pad+0x13c>
   1436e:	e007      	b.n	14380 <_sercom_get_default_pad+0x140>
   14370:	4b1e      	ldr	r3, [pc, #120]	; (143ec <_sercom_get_default_pad+0x1ac>)
   14372:	e006      	b.n	14382 <_sercom_get_default_pad+0x142>
   14374:	4b1e      	ldr	r3, [pc, #120]	; (143f0 <_sercom_get_default_pad+0x1b0>)
   14376:	e004      	b.n	14382 <_sercom_get_default_pad+0x142>
   14378:	4b1e      	ldr	r3, [pc, #120]	; (143f4 <_sercom_get_default_pad+0x1b4>)
   1437a:	e002      	b.n	14382 <_sercom_get_default_pad+0x142>
   1437c:	4b1e      	ldr	r3, [pc, #120]	; (143f8 <_sercom_get_default_pad+0x1b8>)
   1437e:	e000      	b.n	14382 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
   14380:	2300      	movs	r3, #0
}
   14382:	0018      	movs	r0, r3
   14384:	46bd      	mov	sp, r7
   14386:	b002      	add	sp, #8
   14388:	bd80      	pop	{r7, pc}
   1438a:	46c0      	nop			; (mov r8, r8)
   1438c:	42000800 	.word	0x42000800
   14390:	42000400 	.word	0x42000400
   14394:	42001000 	.word	0x42001000
   14398:	43000400 	.word	0x43000400
   1439c:	42000c00 	.word	0x42000c00
   143a0:	00040003 	.word	0x00040003
   143a4:	00050003 	.word	0x00050003
   143a8:	00060003 	.word	0x00060003
   143ac:	00070003 	.word	0x00070003
   143b0:	00010003 	.word	0x00010003
   143b4:	001e0003 	.word	0x001e0003
   143b8:	001f0003 	.word	0x001f0003
   143bc:	00080003 	.word	0x00080003
   143c0:	00090003 	.word	0x00090003
   143c4:	000a0003 	.word	0x000a0003
   143c8:	000b0003 	.word	0x000b0003
   143cc:	00100003 	.word	0x00100003
   143d0:	00110003 	.word	0x00110003
   143d4:	00120003 	.word	0x00120003
   143d8:	00130003 	.word	0x00130003
   143dc:	000c0003 	.word	0x000c0003
   143e0:	000d0003 	.word	0x000d0003
   143e4:	000e0003 	.word	0x000e0003
   143e8:	000f0003 	.word	0x000f0003
   143ec:	00160003 	.word	0x00160003
   143f0:	00170003 	.word	0x00170003
   143f4:	00180003 	.word	0x00180003
   143f8:	00190003 	.word	0x00190003

000143fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   143fc:	b590      	push	{r4, r7, lr}
   143fe:	b08b      	sub	sp, #44	; 0x2c
   14400:	af00      	add	r7, sp, #0
   14402:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   14404:	230c      	movs	r3, #12
   14406:	18fb      	adds	r3, r7, r3
   14408:	4a0f      	ldr	r2, [pc, #60]	; (14448 <_sercom_get_sercom_inst_index+0x4c>)
   1440a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1440c:	c313      	stmia	r3!, {r0, r1, r4}
   1440e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14410:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   14412:	2300      	movs	r3, #0
   14414:	627b      	str	r3, [r7, #36]	; 0x24
   14416:	e00e      	b.n	14436 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   14418:	230c      	movs	r3, #12
   1441a:	18fb      	adds	r3, r7, r3
   1441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1441e:	0092      	lsls	r2, r2, #2
   14420:	58d3      	ldr	r3, [r2, r3]
   14422:	001a      	movs	r2, r3
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	429a      	cmp	r2, r3
   14428:	d102      	bne.n	14430 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1442c:	b2db      	uxtb	r3, r3
   1442e:	e006      	b.n	1443e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   14430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14432:	3301      	adds	r3, #1
   14434:	627b      	str	r3, [r7, #36]	; 0x24
   14436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14438:	2b05      	cmp	r3, #5
   1443a:	d9ed      	bls.n	14418 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1443c:	2300      	movs	r3, #0
}
   1443e:	0018      	movs	r0, r3
   14440:	46bd      	mov	sp, r7
   14442:	b00b      	add	sp, #44	; 0x2c
   14444:	bd90      	pop	{r4, r7, pc}
   14446:	46c0      	nop			; (mov r8, r8)
   14448:	0001ea1c 	.word	0x0001ea1c

0001444c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   1444c:	b580      	push	{r7, lr}
   1444e:	b082      	sub	sp, #8
   14450:	af00      	add	r7, sp, #0
   14452:	0002      	movs	r2, r0
   14454:	1dfb      	adds	r3, r7, #7
   14456:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   14458:	46c0      	nop			; (mov r8, r8)
   1445a:	46bd      	mov	sp, r7
   1445c:	b002      	add	sp, #8
   1445e:	bd80      	pop	{r7, pc}

00014460 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	0002      	movs	r2, r0
   14468:	6039      	str	r1, [r7, #0]
   1446a:	1dfb      	adds	r3, r7, #7
   1446c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1446e:	4b13      	ldr	r3, [pc, #76]	; (144bc <_sercom_set_handler+0x5c>)
   14470:	781b      	ldrb	r3, [r3, #0]
   14472:	2201      	movs	r2, #1
   14474:	4053      	eors	r3, r2
   14476:	b2db      	uxtb	r3, r3
   14478:	2b00      	cmp	r3, #0
   1447a:	d015      	beq.n	144a8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1447c:	2300      	movs	r3, #0
   1447e:	60fb      	str	r3, [r7, #12]
   14480:	e00c      	b.n	1449c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   14482:	4b0f      	ldr	r3, [pc, #60]	; (144c0 <_sercom_set_handler+0x60>)
   14484:	68fa      	ldr	r2, [r7, #12]
   14486:	0092      	lsls	r2, r2, #2
   14488:	490e      	ldr	r1, [pc, #56]	; (144c4 <_sercom_set_handler+0x64>)
   1448a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   1448c:	4b0e      	ldr	r3, [pc, #56]	; (144c8 <_sercom_set_handler+0x68>)
   1448e:	68fa      	ldr	r2, [r7, #12]
   14490:	0092      	lsls	r2, r2, #2
   14492:	2100      	movs	r1, #0
   14494:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   14496:	68fb      	ldr	r3, [r7, #12]
   14498:	3301      	adds	r3, #1
   1449a:	60fb      	str	r3, [r7, #12]
   1449c:	68fb      	ldr	r3, [r7, #12]
   1449e:	2b05      	cmp	r3, #5
   144a0:	d9ef      	bls.n	14482 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   144a2:	4b06      	ldr	r3, [pc, #24]	; (144bc <_sercom_set_handler+0x5c>)
   144a4:	2201      	movs	r2, #1
   144a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   144a8:	1dfb      	adds	r3, r7, #7
   144aa:	781a      	ldrb	r2, [r3, #0]
   144ac:	4b04      	ldr	r3, [pc, #16]	; (144c0 <_sercom_set_handler+0x60>)
   144ae:	0092      	lsls	r2, r2, #2
   144b0:	6839      	ldr	r1, [r7, #0]
   144b2:	50d1      	str	r1, [r2, r3]
}
   144b4:	46c0      	nop			; (mov r8, r8)
   144b6:	46bd      	mov	sp, r7
   144b8:	b004      	add	sp, #16
   144ba:	bd80      	pop	{r7, pc}
   144bc:	2000169e 	.word	0x2000169e
   144c0:	200016a0 	.word	0x200016a0
   144c4:	0001444d 	.word	0x0001444d
   144c8:	200024c8 	.word	0x200024c8

000144cc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   144cc:	b590      	push	{r4, r7, lr}
   144ce:	b085      	sub	sp, #20
   144d0:	af00      	add	r7, sp, #0
   144d2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   144d4:	2308      	movs	r3, #8
   144d6:	18fb      	adds	r3, r7, r3
   144d8:	4a0b      	ldr	r2, [pc, #44]	; (14508 <_sercom_get_interrupt_vector+0x3c>)
   144da:	6811      	ldr	r1, [r2, #0]
   144dc:	6019      	str	r1, [r3, #0]
   144de:	8892      	ldrh	r2, [r2, #4]
   144e0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   144e2:	230f      	movs	r3, #15
   144e4:	18fc      	adds	r4, r7, r3
   144e6:	687b      	ldr	r3, [r7, #4]
   144e8:	0018      	movs	r0, r3
   144ea:	4b08      	ldr	r3, [pc, #32]	; (1450c <_sercom_get_interrupt_vector+0x40>)
   144ec:	4798      	blx	r3
   144ee:	0003      	movs	r3, r0
   144f0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   144f2:	230f      	movs	r3, #15
   144f4:	18fb      	adds	r3, r7, r3
   144f6:	781b      	ldrb	r3, [r3, #0]
   144f8:	2208      	movs	r2, #8
   144fa:	18ba      	adds	r2, r7, r2
   144fc:	5cd3      	ldrb	r3, [r2, r3]
   144fe:	b25b      	sxtb	r3, r3
}
   14500:	0018      	movs	r0, r3
   14502:	46bd      	mov	sp, r7
   14504:	b005      	add	sp, #20
   14506:	bd90      	pop	{r4, r7, pc}
   14508:	0001ea34 	.word	0x0001ea34
   1450c:	000143fd 	.word	0x000143fd

00014510 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   14510:	b580      	push	{r7, lr}
   14512:	af00      	add	r7, sp, #0
   14514:	4b03      	ldr	r3, [pc, #12]	; (14524 <SERCOM0_Handler+0x14>)
   14516:	681b      	ldr	r3, [r3, #0]
   14518:	2000      	movs	r0, #0
   1451a:	4798      	blx	r3
   1451c:	46c0      	nop			; (mov r8, r8)
   1451e:	46bd      	mov	sp, r7
   14520:	bd80      	pop	{r7, pc}
   14522:	46c0      	nop			; (mov r8, r8)
   14524:	200016a0 	.word	0x200016a0

00014528 <SERCOM1_Handler>:
   14528:	b580      	push	{r7, lr}
   1452a:	af00      	add	r7, sp, #0
   1452c:	4b03      	ldr	r3, [pc, #12]	; (1453c <SERCOM1_Handler+0x14>)
   1452e:	685b      	ldr	r3, [r3, #4]
   14530:	2001      	movs	r0, #1
   14532:	4798      	blx	r3
   14534:	46c0      	nop			; (mov r8, r8)
   14536:	46bd      	mov	sp, r7
   14538:	bd80      	pop	{r7, pc}
   1453a:	46c0      	nop			; (mov r8, r8)
   1453c:	200016a0 	.word	0x200016a0

00014540 <SERCOM2_Handler>:
   14540:	b580      	push	{r7, lr}
   14542:	af00      	add	r7, sp, #0
   14544:	4b03      	ldr	r3, [pc, #12]	; (14554 <SERCOM2_Handler+0x14>)
   14546:	689b      	ldr	r3, [r3, #8]
   14548:	2002      	movs	r0, #2
   1454a:	4798      	blx	r3
   1454c:	46c0      	nop			; (mov r8, r8)
   1454e:	46bd      	mov	sp, r7
   14550:	bd80      	pop	{r7, pc}
   14552:	46c0      	nop			; (mov r8, r8)
   14554:	200016a0 	.word	0x200016a0

00014558 <SERCOM3_Handler>:
   14558:	b580      	push	{r7, lr}
   1455a:	af00      	add	r7, sp, #0
   1455c:	4b03      	ldr	r3, [pc, #12]	; (1456c <SERCOM3_Handler+0x14>)
   1455e:	68db      	ldr	r3, [r3, #12]
   14560:	2003      	movs	r0, #3
   14562:	4798      	blx	r3
   14564:	46c0      	nop			; (mov r8, r8)
   14566:	46bd      	mov	sp, r7
   14568:	bd80      	pop	{r7, pc}
   1456a:	46c0      	nop			; (mov r8, r8)
   1456c:	200016a0 	.word	0x200016a0

00014570 <SERCOM4_Handler>:
   14570:	b580      	push	{r7, lr}
   14572:	af00      	add	r7, sp, #0
   14574:	4b03      	ldr	r3, [pc, #12]	; (14584 <SERCOM4_Handler+0x14>)
   14576:	691b      	ldr	r3, [r3, #16]
   14578:	2004      	movs	r0, #4
   1457a:	4798      	blx	r3
   1457c:	46c0      	nop			; (mov r8, r8)
   1457e:	46bd      	mov	sp, r7
   14580:	bd80      	pop	{r7, pc}
   14582:	46c0      	nop			; (mov r8, r8)
   14584:	200016a0 	.word	0x200016a0

00014588 <SERCOM5_Handler>:
   14588:	b580      	push	{r7, lr}
   1458a:	af00      	add	r7, sp, #0
   1458c:	4b03      	ldr	r3, [pc, #12]	; (1459c <SERCOM5_Handler+0x14>)
   1458e:	695b      	ldr	r3, [r3, #20]
   14590:	2005      	movs	r0, #5
   14592:	4798      	blx	r3
   14594:	46c0      	nop			; (mov r8, r8)
   14596:	46bd      	mov	sp, r7
   14598:	bd80      	pop	{r7, pc}
   1459a:	46c0      	nop			; (mov r8, r8)
   1459c:	200016a0 	.word	0x200016a0

000145a0 <system_pinmux_get_config_defaults>:
{
   145a0:	b580      	push	{r7, lr}
   145a2:	b082      	sub	sp, #8
   145a4:	af00      	add	r7, sp, #0
   145a6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	2280      	movs	r2, #128	; 0x80
   145ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   145ae:	687b      	ldr	r3, [r7, #4]
   145b0:	2200      	movs	r2, #0
   145b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   145b4:	687b      	ldr	r3, [r7, #4]
   145b6:	2201      	movs	r2, #1
   145b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   145ba:	687b      	ldr	r3, [r7, #4]
   145bc:	2200      	movs	r2, #0
   145be:	70da      	strb	r2, [r3, #3]
}
   145c0:	46c0      	nop			; (mov r8, r8)
   145c2:	46bd      	mov	sp, r7
   145c4:	b002      	add	sp, #8
   145c6:	bd80      	pop	{r7, pc}

000145c8 <system_pinmux_get_group_from_gpio_pin>:
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b084      	sub	sp, #16
   145cc:	af00      	add	r7, sp, #0
   145ce:	0002      	movs	r2, r0
   145d0:	1dfb      	adds	r3, r7, #7
   145d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   145d4:	230f      	movs	r3, #15
   145d6:	18fb      	adds	r3, r7, r3
   145d8:	1dfa      	adds	r2, r7, #7
   145da:	7812      	ldrb	r2, [r2, #0]
   145dc:	09d2      	lsrs	r2, r2, #7
   145de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   145e0:	230e      	movs	r3, #14
   145e2:	18fb      	adds	r3, r7, r3
   145e4:	1dfa      	adds	r2, r7, #7
   145e6:	7812      	ldrb	r2, [r2, #0]
   145e8:	0952      	lsrs	r2, r2, #5
   145ea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   145ec:	4b0d      	ldr	r3, [pc, #52]	; (14624 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   145ee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   145f0:	230f      	movs	r3, #15
   145f2:	18fb      	adds	r3, r7, r3
   145f4:	781b      	ldrb	r3, [r3, #0]
   145f6:	2b00      	cmp	r3, #0
   145f8:	d10f      	bne.n	1461a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   145fa:	230f      	movs	r3, #15
   145fc:	18fb      	adds	r3, r7, r3
   145fe:	781b      	ldrb	r3, [r3, #0]
   14600:	009b      	lsls	r3, r3, #2
   14602:	2210      	movs	r2, #16
   14604:	4694      	mov	ip, r2
   14606:	44bc      	add	ip, r7
   14608:	4463      	add	r3, ip
   1460a:	3b08      	subs	r3, #8
   1460c:	681a      	ldr	r2, [r3, #0]
   1460e:	230e      	movs	r3, #14
   14610:	18fb      	adds	r3, r7, r3
   14612:	781b      	ldrb	r3, [r3, #0]
   14614:	01db      	lsls	r3, r3, #7
   14616:	18d3      	adds	r3, r2, r3
   14618:	e000      	b.n	1461c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1461a:	2300      	movs	r3, #0
}
   1461c:	0018      	movs	r0, r3
   1461e:	46bd      	mov	sp, r7
   14620:	b004      	add	sp, #16
   14622:	bd80      	pop	{r7, pc}
   14624:	40002800 	.word	0x40002800

00014628 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   14628:	b580      	push	{r7, lr}
   1462a:	b086      	sub	sp, #24
   1462c:	af00      	add	r7, sp, #0
   1462e:	0002      	movs	r2, r0
   14630:	1dfb      	adds	r3, r7, #7
   14632:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14634:	1dfb      	adds	r3, r7, #7
   14636:	781b      	ldrb	r3, [r3, #0]
   14638:	0018      	movs	r0, r3
   1463a:	4b19      	ldr	r3, [pc, #100]	; (146a0 <system_pinmux_pin_get_mux_position+0x78>)
   1463c:	4798      	blx	r3
   1463e:	0003      	movs	r3, r0
   14640:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   14642:	1dfb      	adds	r3, r7, #7
   14644:	781b      	ldrb	r3, [r3, #0]
   14646:	221f      	movs	r2, #31
   14648:	4013      	ands	r3, r2
   1464a:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   1464c:	697a      	ldr	r2, [r7, #20]
   1464e:	2140      	movs	r1, #64	; 0x40
   14650:	693b      	ldr	r3, [r7, #16]
   14652:	18d3      	adds	r3, r2, r3
   14654:	185b      	adds	r3, r3, r1
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	b2db      	uxtb	r3, r3
   1465a:	001a      	movs	r2, r3
   1465c:	2301      	movs	r3, #1
   1465e:	4013      	ands	r3, r2
   14660:	d101      	bne.n	14666 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   14662:	2380      	movs	r3, #128	; 0x80
   14664:	e018      	b.n	14698 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   14666:	693b      	ldr	r3, [r7, #16]
   14668:	085b      	lsrs	r3, r3, #1
   1466a:	697a      	ldr	r2, [r7, #20]
   1466c:	2130      	movs	r1, #48	; 0x30
   1466e:	18d3      	adds	r3, r2, r3
   14670:	185b      	adds	r3, r3, r1
   14672:	781b      	ldrb	r3, [r3, #0]
   14674:	b2db      	uxtb	r3, r3
   14676:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   14678:	693b      	ldr	r3, [r7, #16]
   1467a:	2201      	movs	r2, #1
   1467c:	4013      	ands	r3, r2
   1467e:	d006      	beq.n	1468e <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   14680:	68fb      	ldr	r3, [r7, #12]
   14682:	091b      	lsrs	r3, r3, #4
   14684:	b2db      	uxtb	r3, r3
   14686:	220f      	movs	r2, #15
   14688:	4013      	ands	r3, r2
   1468a:	b2db      	uxtb	r3, r3
   1468c:	e004      	b.n	14698 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   1468e:	68fb      	ldr	r3, [r7, #12]
   14690:	b2db      	uxtb	r3, r3
   14692:	220f      	movs	r2, #15
   14694:	4013      	ands	r3, r2
   14696:	b2db      	uxtb	r3, r3
	}
}
   14698:	0018      	movs	r0, r3
   1469a:	46bd      	mov	sp, r7
   1469c:	b006      	add	sp, #24
   1469e:	bd80      	pop	{r7, pc}
   146a0:	000145c9 	.word	0x000145c9

000146a4 <port_get_group_from_gpio_pin>:
{
   146a4:	b580      	push	{r7, lr}
   146a6:	b082      	sub	sp, #8
   146a8:	af00      	add	r7, sp, #0
   146aa:	0002      	movs	r2, r0
   146ac:	1dfb      	adds	r3, r7, #7
   146ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   146b0:	1dfb      	adds	r3, r7, #7
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	0018      	movs	r0, r3
   146b6:	4b03      	ldr	r3, [pc, #12]	; (146c4 <port_get_group_from_gpio_pin+0x20>)
   146b8:	4798      	blx	r3
   146ba:	0003      	movs	r3, r0
}
   146bc:	0018      	movs	r0, r3
   146be:	46bd      	mov	sp, r7
   146c0:	b002      	add	sp, #8
   146c2:	bd80      	pop	{r7, pc}
   146c4:	000145c9 	.word	0x000145c9

000146c8 <port_pin_set_output_level>:
{
   146c8:	b580      	push	{r7, lr}
   146ca:	b084      	sub	sp, #16
   146cc:	af00      	add	r7, sp, #0
   146ce:	0002      	movs	r2, r0
   146d0:	1dfb      	adds	r3, r7, #7
   146d2:	701a      	strb	r2, [r3, #0]
   146d4:	1dbb      	adds	r3, r7, #6
   146d6:	1c0a      	adds	r2, r1, #0
   146d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   146da:	1dfb      	adds	r3, r7, #7
   146dc:	781b      	ldrb	r3, [r3, #0]
   146de:	0018      	movs	r0, r3
   146e0:	4b0d      	ldr	r3, [pc, #52]	; (14718 <port_pin_set_output_level+0x50>)
   146e2:	4798      	blx	r3
   146e4:	0003      	movs	r3, r0
   146e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   146e8:	1dfb      	adds	r3, r7, #7
   146ea:	781b      	ldrb	r3, [r3, #0]
   146ec:	221f      	movs	r2, #31
   146ee:	4013      	ands	r3, r2
   146f0:	2201      	movs	r2, #1
   146f2:	409a      	lsls	r2, r3
   146f4:	0013      	movs	r3, r2
   146f6:	60bb      	str	r3, [r7, #8]
	if (level) {
   146f8:	1dbb      	adds	r3, r7, #6
   146fa:	781b      	ldrb	r3, [r3, #0]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d003      	beq.n	14708 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14700:	68fb      	ldr	r3, [r7, #12]
   14702:	68ba      	ldr	r2, [r7, #8]
   14704:	619a      	str	r2, [r3, #24]
}
   14706:	e002      	b.n	1470e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14708:	68fb      	ldr	r3, [r7, #12]
   1470a:	68ba      	ldr	r2, [r7, #8]
   1470c:	615a      	str	r2, [r3, #20]
}
   1470e:	46c0      	nop			; (mov r8, r8)
   14710:	46bd      	mov	sp, r7
   14712:	b004      	add	sp, #16
   14714:	bd80      	pop	{r7, pc}
   14716:	46c0      	nop			; (mov r8, r8)
   14718:	000146a5 	.word	0x000146a5

0001471c <system_gclk_chan_get_config_defaults>:
{
   1471c:	b580      	push	{r7, lr}
   1471e:	b082      	sub	sp, #8
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14724:	687b      	ldr	r3, [r7, #4]
   14726:	2200      	movs	r2, #0
   14728:	701a      	strb	r2, [r3, #0]
}
   1472a:	46c0      	nop			; (mov r8, r8)
   1472c:	46bd      	mov	sp, r7
   1472e:	b002      	add	sp, #8
   14730:	bd80      	pop	{r7, pc}
	...

00014734 <system_apb_clock_set_mask>:
{
   14734:	b580      	push	{r7, lr}
   14736:	b082      	sub	sp, #8
   14738:	af00      	add	r7, sp, #0
   1473a:	0002      	movs	r2, r0
   1473c:	6039      	str	r1, [r7, #0]
   1473e:	1dfb      	adds	r3, r7, #7
   14740:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14742:	1dfb      	adds	r3, r7, #7
   14744:	781b      	ldrb	r3, [r3, #0]
   14746:	2b04      	cmp	r3, #4
   14748:	d827      	bhi.n	1479a <system_apb_clock_set_mask+0x66>
   1474a:	009a      	lsls	r2, r3, #2
   1474c:	4b16      	ldr	r3, [pc, #88]	; (147a8 <system_apb_clock_set_mask+0x74>)
   1474e:	18d3      	adds	r3, r2, r3
   14750:	681b      	ldr	r3, [r3, #0]
   14752:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   14754:	4b15      	ldr	r3, [pc, #84]	; (147ac <system_apb_clock_set_mask+0x78>)
   14756:	4a15      	ldr	r2, [pc, #84]	; (147ac <system_apb_clock_set_mask+0x78>)
   14758:	6951      	ldr	r1, [r2, #20]
   1475a:	683a      	ldr	r2, [r7, #0]
   1475c:	430a      	orrs	r2, r1
   1475e:	615a      	str	r2, [r3, #20]
			break;
   14760:	e01d      	b.n	1479e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   14762:	4b12      	ldr	r3, [pc, #72]	; (147ac <system_apb_clock_set_mask+0x78>)
   14764:	4a11      	ldr	r2, [pc, #68]	; (147ac <system_apb_clock_set_mask+0x78>)
   14766:	6991      	ldr	r1, [r2, #24]
   14768:	683a      	ldr	r2, [r7, #0]
   1476a:	430a      	orrs	r2, r1
   1476c:	619a      	str	r2, [r3, #24]
			break;
   1476e:	e016      	b.n	1479e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   14770:	4b0e      	ldr	r3, [pc, #56]	; (147ac <system_apb_clock_set_mask+0x78>)
   14772:	4a0e      	ldr	r2, [pc, #56]	; (147ac <system_apb_clock_set_mask+0x78>)
   14774:	69d1      	ldr	r1, [r2, #28]
   14776:	683a      	ldr	r2, [r7, #0]
   14778:	430a      	orrs	r2, r1
   1477a:	61da      	str	r2, [r3, #28]
			break;
   1477c:	e00f      	b.n	1479e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   1477e:	4b0b      	ldr	r3, [pc, #44]	; (147ac <system_apb_clock_set_mask+0x78>)
   14780:	4a0a      	ldr	r2, [pc, #40]	; (147ac <system_apb_clock_set_mask+0x78>)
   14782:	6a11      	ldr	r1, [r2, #32]
   14784:	683a      	ldr	r2, [r7, #0]
   14786:	430a      	orrs	r2, r1
   14788:	621a      	str	r2, [r3, #32]
			break;
   1478a:	e008      	b.n	1479e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   1478c:	4b07      	ldr	r3, [pc, #28]	; (147ac <system_apb_clock_set_mask+0x78>)
   1478e:	4a07      	ldr	r2, [pc, #28]	; (147ac <system_apb_clock_set_mask+0x78>)
   14790:	6a51      	ldr	r1, [r2, #36]	; 0x24
   14792:	683a      	ldr	r2, [r7, #0]
   14794:	430a      	orrs	r2, r1
   14796:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   14798:	e001      	b.n	1479e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   1479a:	2317      	movs	r3, #23
   1479c:	e000      	b.n	147a0 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   1479e:	2300      	movs	r3, #0
}
   147a0:	0018      	movs	r0, r3
   147a2:	46bd      	mov	sp, r7
   147a4:	b002      	add	sp, #8
   147a6:	bd80      	pop	{r7, pc}
   147a8:	0001ea3c 	.word	0x0001ea3c
   147ac:	40000400 	.word	0x40000400

000147b0 <system_is_debugger_present>:
{
   147b0:	b580      	push	{r7, lr}
   147b2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   147b4:	4b05      	ldr	r3, [pc, #20]	; (147cc <system_is_debugger_present+0x1c>)
   147b6:	789b      	ldrb	r3, [r3, #2]
   147b8:	b2db      	uxtb	r3, r3
   147ba:	001a      	movs	r2, r3
   147bc:	2302      	movs	r3, #2
   147be:	4013      	ands	r3, r2
   147c0:	1e5a      	subs	r2, r3, #1
   147c2:	4193      	sbcs	r3, r2
   147c4:	b2db      	uxtb	r3, r3
}
   147c6:	0018      	movs	r0, r3
   147c8:	46bd      	mov	sp, r7
   147ca:	bd80      	pop	{r7, pc}
   147cc:	41002000 	.word	0x41002000

000147d0 <spi_is_ready_to_write>:
{
   147d0:	b580      	push	{r7, lr}
   147d2:	b084      	sub	sp, #16
   147d4:	af00      	add	r7, sp, #0
   147d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	681b      	ldr	r3, [r3, #0]
   147dc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   147de:	68fb      	ldr	r3, [r7, #12]
   147e0:	7e1b      	ldrb	r3, [r3, #24]
   147e2:	b2db      	uxtb	r3, r3
   147e4:	001a      	movs	r2, r3
   147e6:	2301      	movs	r3, #1
   147e8:	4013      	ands	r3, r2
   147ea:	1e5a      	subs	r2, r3, #1
   147ec:	4193      	sbcs	r3, r2
   147ee:	b2db      	uxtb	r3, r3
}
   147f0:	0018      	movs	r0, r3
   147f2:	46bd      	mov	sp, r7
   147f4:	b004      	add	sp, #16
   147f6:	bd80      	pop	{r7, pc}

000147f8 <spi_is_ready_to_read>:
{
   147f8:	b580      	push	{r7, lr}
   147fa:	b084      	sub	sp, #16
   147fc:	af00      	add	r7, sp, #0
   147fe:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14800:	687b      	ldr	r3, [r7, #4]
   14802:	681b      	ldr	r3, [r3, #0]
   14804:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   14806:	68fb      	ldr	r3, [r7, #12]
   14808:	7e1b      	ldrb	r3, [r3, #24]
   1480a:	b2db      	uxtb	r3, r3
   1480c:	001a      	movs	r2, r3
   1480e:	2304      	movs	r3, #4
   14810:	4013      	ands	r3, r2
   14812:	1e5a      	subs	r2, r3, #1
   14814:	4193      	sbcs	r3, r2
   14816:	b2db      	uxtb	r3, r3
}
   14818:	0018      	movs	r0, r3
   1481a:	46bd      	mov	sp, r7
   1481c:	b004      	add	sp, #16
   1481e:	bd80      	pop	{r7, pc}

00014820 <spi_write>:
{
   14820:	b580      	push	{r7, lr}
   14822:	b084      	sub	sp, #16
   14824:	af00      	add	r7, sp, #0
   14826:	6078      	str	r0, [r7, #4]
   14828:	000a      	movs	r2, r1
   1482a:	1cbb      	adds	r3, r7, #2
   1482c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1482e:	687b      	ldr	r3, [r7, #4]
   14830:	681b      	ldr	r3, [r3, #0]
   14832:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   14834:	687b      	ldr	r3, [r7, #4]
   14836:	0018      	movs	r0, r3
   14838:	4b0a      	ldr	r3, [pc, #40]	; (14864 <spi_write+0x44>)
   1483a:	4798      	blx	r3
   1483c:	0003      	movs	r3, r0
   1483e:	001a      	movs	r2, r3
   14840:	2301      	movs	r3, #1
   14842:	4053      	eors	r3, r2
   14844:	b2db      	uxtb	r3, r3
   14846:	2b00      	cmp	r3, #0
   14848:	d001      	beq.n	1484e <spi_write+0x2e>
		return STATUS_BUSY;
   1484a:	2305      	movs	r3, #5
   1484c:	e006      	b.n	1485c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1484e:	1cbb      	adds	r3, r7, #2
   14850:	881b      	ldrh	r3, [r3, #0]
   14852:	05db      	lsls	r3, r3, #23
   14854:	0dda      	lsrs	r2, r3, #23
   14856:	68fb      	ldr	r3, [r7, #12]
   14858:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   1485a:	2300      	movs	r3, #0
}
   1485c:	0018      	movs	r0, r3
   1485e:	46bd      	mov	sp, r7
   14860:	b004      	add	sp, #16
   14862:	bd80      	pop	{r7, pc}
   14864:	000147d1 	.word	0x000147d1

00014868 <spi_read>:
{
   14868:	b580      	push	{r7, lr}
   1486a:	b084      	sub	sp, #16
   1486c:	af00      	add	r7, sp, #0
   1486e:	6078      	str	r0, [r7, #4]
   14870:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14872:	687b      	ldr	r3, [r7, #4]
   14874:	681b      	ldr	r3, [r3, #0]
   14876:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	0018      	movs	r0, r3
   1487c:	4b1b      	ldr	r3, [pc, #108]	; (148ec <spi_read+0x84>)
   1487e:	4798      	blx	r3
   14880:	0003      	movs	r3, r0
   14882:	001a      	movs	r2, r3
   14884:	2301      	movs	r3, #1
   14886:	4053      	eors	r3, r2
   14888:	b2db      	uxtb	r3, r3
   1488a:	2b00      	cmp	r3, #0
   1488c:	d001      	beq.n	14892 <spi_read+0x2a>
		return STATUS_ERR_IO;
   1488e:	2310      	movs	r3, #16
   14890:	e027      	b.n	148e2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   14892:	230f      	movs	r3, #15
   14894:	18fb      	adds	r3, r7, r3
   14896:	2200      	movs	r2, #0
   14898:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1489a:	68bb      	ldr	r3, [r7, #8]
   1489c:	8b5b      	ldrh	r3, [r3, #26]
   1489e:	b29b      	uxth	r3, r3
   148a0:	001a      	movs	r2, r3
   148a2:	2304      	movs	r3, #4
   148a4:	4013      	ands	r3, r2
   148a6:	d006      	beq.n	148b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   148a8:	230f      	movs	r3, #15
   148aa:	18fb      	adds	r3, r7, r3
   148ac:	221e      	movs	r2, #30
   148ae:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   148b0:	68bb      	ldr	r3, [r7, #8]
   148b2:	2204      	movs	r2, #4
   148b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   148b6:	687b      	ldr	r3, [r7, #4]
   148b8:	799b      	ldrb	r3, [r3, #6]
   148ba:	2b01      	cmp	r3, #1
   148bc:	d108      	bne.n	148d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   148be:	68bb      	ldr	r3, [r7, #8]
   148c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   148c2:	b29b      	uxth	r3, r3
   148c4:	05db      	lsls	r3, r3, #23
   148c6:	0ddb      	lsrs	r3, r3, #23
   148c8:	b29a      	uxth	r2, r3
   148ca:	683b      	ldr	r3, [r7, #0]
   148cc:	801a      	strh	r2, [r3, #0]
   148ce:	e005      	b.n	148dc <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   148d0:	68bb      	ldr	r3, [r7, #8]
   148d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   148d4:	b2db      	uxtb	r3, r3
   148d6:	b29a      	uxth	r2, r3
   148d8:	683b      	ldr	r3, [r7, #0]
   148da:	801a      	strh	r2, [r3, #0]
	return retval;
   148dc:	230f      	movs	r3, #15
   148de:	18fb      	adds	r3, r7, r3
   148e0:	781b      	ldrb	r3, [r3, #0]
}
   148e2:	0018      	movs	r0, r3
   148e4:	46bd      	mov	sp, r7
   148e6:	b004      	add	sp, #16
   148e8:	bd80      	pop	{r7, pc}
   148ea:	46c0      	nop			; (mov r8, r8)
   148ec:	000147f9 	.word	0x000147f9

000148f0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   148f0:	b590      	push	{r4, r7, lr}
   148f2:	b093      	sub	sp, #76	; 0x4c
   148f4:	af00      	add	r7, sp, #0
   148f6:	6078      	str	r0, [r7, #4]
   148f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   148fa:	687b      	ldr	r3, [r7, #4]
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   14900:	687b      	ldr	r3, [r7, #4]
   14902:	681b      	ldr	r3, [r3, #0]
   14904:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14906:	231c      	movs	r3, #28
   14908:	18fb      	adds	r3, r7, r3
   1490a:	0018      	movs	r0, r3
   1490c:	4b75      	ldr	r3, [pc, #468]	; (14ae4 <_spi_set_config+0x1f4>)
   1490e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14910:	231c      	movs	r3, #28
   14912:	18fb      	adds	r3, r7, r3
   14914:	2200      	movs	r2, #0
   14916:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   14918:	683b      	ldr	r3, [r7, #0]
   1491a:	781b      	ldrb	r3, [r3, #0]
   1491c:	2b00      	cmp	r3, #0
   1491e:	d103      	bne.n	14928 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   14920:	231c      	movs	r3, #28
   14922:	18fb      	adds	r3, r7, r3
   14924:	2200      	movs	r2, #0
   14926:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   14928:	683b      	ldr	r3, [r7, #0]
   1492a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   1492c:	230c      	movs	r3, #12
   1492e:	18fb      	adds	r3, r7, r3
   14930:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   14932:	683b      	ldr	r3, [r7, #0]
   14934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   14936:	230c      	movs	r3, #12
   14938:	18fb      	adds	r3, r7, r3
   1493a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   1493c:	683b      	ldr	r3, [r7, #0]
   1493e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   14940:	230c      	movs	r3, #12
   14942:	18fb      	adds	r3, r7, r3
   14944:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   14946:	683b      	ldr	r3, [r7, #0]
   14948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1494a:	230c      	movs	r3, #12
   1494c:	18fb      	adds	r3, r7, r3
   1494e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   14950:	2347      	movs	r3, #71	; 0x47
   14952:	18fb      	adds	r3, r7, r3
   14954:	2200      	movs	r2, #0
   14956:	701a      	strb	r2, [r3, #0]
   14958:	e02c      	b.n	149b4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1495a:	2347      	movs	r3, #71	; 0x47
   1495c:	18fb      	adds	r3, r7, r3
   1495e:	781a      	ldrb	r2, [r3, #0]
   14960:	230c      	movs	r3, #12
   14962:	18fb      	adds	r3, r7, r3
   14964:	0092      	lsls	r2, r2, #2
   14966:	58d3      	ldr	r3, [r2, r3]
   14968:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   1496a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1496c:	2b00      	cmp	r3, #0
   1496e:	d109      	bne.n	14984 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   14970:	2347      	movs	r3, #71	; 0x47
   14972:	18fb      	adds	r3, r7, r3
   14974:	781a      	ldrb	r2, [r3, #0]
   14976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14978:	0011      	movs	r1, r2
   1497a:	0018      	movs	r0, r3
   1497c:	4b5a      	ldr	r3, [pc, #360]	; (14ae8 <_spi_set_config+0x1f8>)
   1497e:	4798      	blx	r3
   14980:	0003      	movs	r3, r0
   14982:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   14984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14986:	3301      	adds	r3, #1
   14988:	d00d      	beq.n	149a6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1498c:	b2da      	uxtb	r2, r3
   1498e:	231c      	movs	r3, #28
   14990:	18fb      	adds	r3, r7, r3
   14992:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14996:	0c1b      	lsrs	r3, r3, #16
   14998:	b2db      	uxtb	r3, r3
   1499a:	221c      	movs	r2, #28
   1499c:	18ba      	adds	r2, r7, r2
   1499e:	0011      	movs	r1, r2
   149a0:	0018      	movs	r0, r3
   149a2:	4b52      	ldr	r3, [pc, #328]	; (14aec <_spi_set_config+0x1fc>)
   149a4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   149a6:	2347      	movs	r3, #71	; 0x47
   149a8:	18fb      	adds	r3, r7, r3
   149aa:	781a      	ldrb	r2, [r3, #0]
   149ac:	2347      	movs	r3, #71	; 0x47
   149ae:	18fb      	adds	r3, r7, r3
   149b0:	3201      	adds	r2, #1
   149b2:	701a      	strb	r2, [r3, #0]
   149b4:	2347      	movs	r3, #71	; 0x47
   149b6:	18fb      	adds	r3, r7, r3
   149b8:	781b      	ldrb	r3, [r3, #0]
   149ba:	2b03      	cmp	r3, #3
   149bc:	d9cd      	bls.n	1495a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   149be:	683b      	ldr	r3, [r7, #0]
   149c0:	781a      	ldrb	r2, [r3, #0]
   149c2:	687b      	ldr	r3, [r7, #4]
   149c4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   149c6:	683b      	ldr	r3, [r7, #0]
   149c8:	7c1a      	ldrb	r2, [r3, #16]
   149ca:	687b      	ldr	r3, [r7, #4]
   149cc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   149ce:	683b      	ldr	r3, [r7, #0]
   149d0:	7c9a      	ldrb	r2, [r3, #18]
   149d2:	687b      	ldr	r3, [r7, #4]
   149d4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   149d6:	683b      	ldr	r3, [r7, #0]
   149d8:	7d1a      	ldrb	r2, [r3, #20]
   149da:	687b      	ldr	r3, [r7, #4]
   149dc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   149de:	230a      	movs	r3, #10
   149e0:	18fb      	adds	r3, r7, r3
   149e2:	2200      	movs	r2, #0
   149e4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   149e6:	2300      	movs	r3, #0
   149e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   149ea:	2300      	movs	r3, #0
   149ec:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   149ee:	683b      	ldr	r3, [r7, #0]
   149f0:	781b      	ldrb	r3, [r3, #0]
   149f2:	2b01      	cmp	r3, #1
   149f4:	d129      	bne.n	14a4a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   149f6:	687b      	ldr	r3, [r7, #4]
   149f8:	681b      	ldr	r3, [r3, #0]
   149fa:	0018      	movs	r0, r3
   149fc:	4b3c      	ldr	r3, [pc, #240]	; (14af0 <_spi_set_config+0x200>)
   149fe:	4798      	blx	r3
   14a00:	0003      	movs	r3, r0
   14a02:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a06:	3312      	adds	r3, #18
   14a08:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   14a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14a0c:	b2db      	uxtb	r3, r3
   14a0e:	0018      	movs	r0, r3
   14a10:	4b38      	ldr	r3, [pc, #224]	; (14af4 <_spi_set_config+0x204>)
   14a12:	4798      	blx	r3
   14a14:	0003      	movs	r3, r0
   14a16:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   14a18:	683b      	ldr	r3, [r7, #0]
   14a1a:	699b      	ldr	r3, [r3, #24]
   14a1c:	2223      	movs	r2, #35	; 0x23
   14a1e:	18bc      	adds	r4, r7, r2
   14a20:	220a      	movs	r2, #10
   14a22:	18ba      	adds	r2, r7, r2
   14a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14a26:	0018      	movs	r0, r3
   14a28:	4b33      	ldr	r3, [pc, #204]	; (14af8 <_spi_set_config+0x208>)
   14a2a:	4798      	blx	r3
   14a2c:	0003      	movs	r3, r0
   14a2e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   14a30:	2323      	movs	r3, #35	; 0x23
   14a32:	18fb      	adds	r3, r7, r3
   14a34:	781b      	ldrb	r3, [r3, #0]
   14a36:	2b00      	cmp	r3, #0
   14a38:	d001      	beq.n	14a3e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   14a3a:	2317      	movs	r3, #23
   14a3c:	e04e      	b.n	14adc <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   14a3e:	230a      	movs	r3, #10
   14a40:	18fb      	adds	r3, r7, r3
   14a42:	881b      	ldrh	r3, [r3, #0]
   14a44:	b2da      	uxtb	r2, r3
   14a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14a48:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   14a4a:	683b      	ldr	r3, [r7, #0]
   14a4c:	685b      	ldr	r3, [r3, #4]
   14a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14a50:	4313      	orrs	r3, r2
   14a52:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   14a54:	683b      	ldr	r3, [r7, #0]
   14a56:	689b      	ldr	r3, [r3, #8]
   14a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14a5a:	4313      	orrs	r3, r2
   14a5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   14a5e:	683b      	ldr	r3, [r7, #0]
   14a60:	68db      	ldr	r3, [r3, #12]
   14a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14a64:	4313      	orrs	r3, r2
   14a66:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   14a68:	683b      	ldr	r3, [r7, #0]
   14a6a:	7c1b      	ldrb	r3, [r3, #16]
   14a6c:	001a      	movs	r2, r3
   14a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a70:	4313      	orrs	r3, r2
   14a72:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   14a74:	683b      	ldr	r3, [r7, #0]
   14a76:	7c5b      	ldrb	r3, [r3, #17]
   14a78:	2b00      	cmp	r3, #0
   14a7a:	d103      	bne.n	14a84 <_spi_set_config+0x194>
   14a7c:	4b1f      	ldr	r3, [pc, #124]	; (14afc <_spi_set_config+0x20c>)
   14a7e:	4798      	blx	r3
   14a80:	1e03      	subs	r3, r0, #0
   14a82:	d003      	beq.n	14a8c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   14a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a86:	2280      	movs	r2, #128	; 0x80
   14a88:	4313      	orrs	r3, r2
   14a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   14a8c:	683b      	ldr	r3, [r7, #0]
   14a8e:	7c9b      	ldrb	r3, [r3, #18]
   14a90:	2b00      	cmp	r3, #0
   14a92:	d004      	beq.n	14a9e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   14a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a96:	2280      	movs	r2, #128	; 0x80
   14a98:	0292      	lsls	r2, r2, #10
   14a9a:	4313      	orrs	r3, r2
   14a9c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   14a9e:	683b      	ldr	r3, [r7, #0]
   14aa0:	7cdb      	ldrb	r3, [r3, #19]
   14aa2:	2b00      	cmp	r3, #0
   14aa4:	d004      	beq.n	14ab0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   14aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14aa8:	2280      	movs	r2, #128	; 0x80
   14aaa:	0092      	lsls	r2, r2, #2
   14aac:	4313      	orrs	r3, r2
   14aae:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   14ab0:	683b      	ldr	r3, [r7, #0]
   14ab2:	7d1b      	ldrb	r3, [r3, #20]
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	d004      	beq.n	14ac2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   14ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14aba:	2280      	movs	r2, #128	; 0x80
   14abc:	0192      	lsls	r2, r2, #6
   14abe:	4313      	orrs	r3, r2
   14ac0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   14ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ac4:	681a      	ldr	r2, [r3, #0]
   14ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14ac8:	431a      	orrs	r2, r3
   14aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14acc:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   14ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ad0:	685a      	ldr	r2, [r3, #4]
   14ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14ad4:	431a      	orrs	r2, r3
   14ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ad8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   14ada:	2300      	movs	r3, #0
}
   14adc:	0018      	movs	r0, r3
   14ade:	46bd      	mov	sp, r7
   14ae0:	b013      	add	sp, #76	; 0x4c
   14ae2:	bd90      	pop	{r4, r7, pc}
   14ae4:	000145a1 	.word	0x000145a1
   14ae8:	00014241 	.word	0x00014241
   14aec:	00016d01 	.word	0x00016d01
   14af0:	000143fd 	.word	0x000143fd
   14af4:	00016ac9 	.word	0x00016ac9
   14af8:	00013f77 	.word	0x00013f77
   14afc:	000147b1 	.word	0x000147b1

00014b00 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   14b00:	b590      	push	{r4, r7, lr}
   14b02:	b091      	sub	sp, #68	; 0x44
   14b04:	af00      	add	r7, sp, #0
   14b06:	6078      	str	r0, [r7, #4]
   14b08:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   14b0a:	687b      	ldr	r3, [r7, #4]
   14b0c:	681b      	ldr	r3, [r3, #0]
   14b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   14b10:	687b      	ldr	r3, [r7, #4]
   14b12:	681b      	ldr	r3, [r3, #0]
   14b14:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   14b16:	683b      	ldr	r3, [r7, #0]
   14b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   14b1a:	2310      	movs	r3, #16
   14b1c:	18fb      	adds	r3, r7, r3
   14b1e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   14b20:	683b      	ldr	r3, [r7, #0]
   14b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   14b24:	2310      	movs	r3, #16
   14b26:	18fb      	adds	r3, r7, r3
   14b28:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   14b2a:	683b      	ldr	r3, [r7, #0]
   14b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   14b2e:	2310      	movs	r3, #16
   14b30:	18fb      	adds	r3, r7, r3
   14b32:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   14b34:	683b      	ldr	r3, [r7, #0]
   14b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   14b38:	2310      	movs	r3, #16
   14b3a:	18fb      	adds	r3, r7, r3
   14b3c:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   14b3e:	233f      	movs	r3, #63	; 0x3f
   14b40:	18fb      	adds	r3, r7, r3
   14b42:	2200      	movs	r2, #0
   14b44:	701a      	strb	r2, [r3, #0]
   14b46:	e030      	b.n	14baa <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   14b48:	233f      	movs	r3, #63	; 0x3f
   14b4a:	18fb      	adds	r3, r7, r3
   14b4c:	781a      	ldrb	r2, [r3, #0]
   14b4e:	2310      	movs	r3, #16
   14b50:	18fb      	adds	r3, r7, r3
   14b52:	0092      	lsls	r2, r2, #2
   14b54:	58d3      	ldr	r3, [r2, r3]
   14b56:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   14b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d109      	bne.n	14b72 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   14b5e:	233f      	movs	r3, #63	; 0x3f
   14b60:	18fb      	adds	r3, r7, r3
   14b62:	781a      	ldrb	r2, [r3, #0]
   14b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14b66:	0011      	movs	r1, r2
   14b68:	0018      	movs	r0, r3
   14b6a:	4b56      	ldr	r3, [pc, #344]	; (14cc4 <_spi_check_config+0x1c4>)
   14b6c:	4798      	blx	r3
   14b6e:	0003      	movs	r3, r0
   14b70:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   14b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b74:	3301      	adds	r3, #1
   14b76:	d010      	beq.n	14b9a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   14b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b7a:	041b      	lsls	r3, r3, #16
   14b7c:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   14b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b80:	0c1b      	lsrs	r3, r3, #16
   14b82:	b2db      	uxtb	r3, r3
   14b84:	0018      	movs	r0, r3
   14b86:	4b50      	ldr	r3, [pc, #320]	; (14cc8 <_spi_check_config+0x1c8>)
   14b88:	4798      	blx	r3
   14b8a:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   14b8c:	429c      	cmp	r4, r3
   14b8e:	d005      	beq.n	14b9c <_spi_check_config+0x9c>
			module->hw = NULL;
   14b90:	687b      	ldr	r3, [r7, #4]
   14b92:	2200      	movs	r2, #0
   14b94:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   14b96:	231c      	movs	r3, #28
   14b98:	e08f      	b.n	14cba <_spi_check_config+0x1ba>
			continue;
   14b9a:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   14b9c:	233f      	movs	r3, #63	; 0x3f
   14b9e:	18fb      	adds	r3, r7, r3
   14ba0:	781a      	ldrb	r2, [r3, #0]
   14ba2:	233f      	movs	r3, #63	; 0x3f
   14ba4:	18fb      	adds	r3, r7, r3
   14ba6:	3201      	adds	r2, #1
   14ba8:	701a      	strb	r2, [r3, #0]
   14baa:	233f      	movs	r3, #63	; 0x3f
   14bac:	18fb      	adds	r3, r7, r3
   14bae:	781b      	ldrb	r3, [r3, #0]
   14bb0:	2b03      	cmp	r3, #3
   14bb2:	d9c9      	bls.n	14b48 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   14bb4:	2011      	movs	r0, #17
   14bb6:	4b45      	ldr	r3, [pc, #276]	; (14ccc <_spi_check_config+0x1cc>)
   14bb8:	4798      	blx	r3
   14bba:	0003      	movs	r3, r0
   14bbc:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   14bbe:	2300      	movs	r3, #0
   14bc0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   14bc2:	2300      	movs	r3, #0
   14bc4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   14bc6:	683b      	ldr	r3, [r7, #0]
   14bc8:	781b      	ldrb	r3, [r3, #0]
   14bca:	2b01      	cmp	r3, #1
   14bcc:	d121      	bne.n	14c12 <_spi_check_config+0x112>
		enum status_code error_code = _sercom_get_sync_baud_val(
   14bce:	683b      	ldr	r3, [r7, #0]
   14bd0:	699b      	ldr	r3, [r3, #24]
   14bd2:	2223      	movs	r2, #35	; 0x23
   14bd4:	18bc      	adds	r4, r7, r2
   14bd6:	220e      	movs	r2, #14
   14bd8:	18ba      	adds	r2, r7, r2
   14bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14bdc:	0018      	movs	r0, r3
   14bde:	4b3c      	ldr	r3, [pc, #240]	; (14cd0 <_spi_check_config+0x1d0>)
   14be0:	4798      	blx	r3
   14be2:	0003      	movs	r3, r0
   14be4:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   14be6:	2323      	movs	r3, #35	; 0x23
   14be8:	18fb      	adds	r3, r7, r3
   14bea:	781b      	ldrb	r3, [r3, #0]
   14bec:	2b00      	cmp	r3, #0
   14bee:	d001      	beq.n	14bf4 <_spi_check_config+0xf4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   14bf0:	2317      	movs	r3, #23
   14bf2:	e062      	b.n	14cba <_spi_check_config+0x1ba>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   14bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14bf6:	7b1b      	ldrb	r3, [r3, #12]
   14bf8:	b2da      	uxtb	r2, r3
   14bfa:	230e      	movs	r3, #14
   14bfc:	18fb      	adds	r3, r7, r3
   14bfe:	881b      	ldrh	r3, [r3, #0]
   14c00:	b2db      	uxtb	r3, r3
   14c02:	429a      	cmp	r2, r3
   14c04:	d001      	beq.n	14c0a <_spi_check_config+0x10a>
			return STATUS_ERR_DENIED;
   14c06:	231c      	movs	r3, #28
   14c08:	e057      	b.n	14cba <_spi_check_config+0x1ba>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   14c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c0c:	220c      	movs	r2, #12
   14c0e:	4313      	orrs	r3, r2
   14c10:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   14c12:	683b      	ldr	r3, [r7, #0]
   14c14:	685b      	ldr	r3, [r3, #4]
   14c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14c18:	4313      	orrs	r3, r2
   14c1a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   14c1c:	683b      	ldr	r3, [r7, #0]
   14c1e:	689b      	ldr	r3, [r3, #8]
   14c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14c22:	4313      	orrs	r3, r2
   14c24:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   14c26:	683b      	ldr	r3, [r7, #0]
   14c28:	68db      	ldr	r3, [r3, #12]
   14c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14c2c:	4313      	orrs	r3, r2
   14c2e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   14c30:	683b      	ldr	r3, [r7, #0]
   14c32:	7c1b      	ldrb	r3, [r3, #16]
   14c34:	001a      	movs	r2, r3
   14c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c38:	4313      	orrs	r3, r2
   14c3a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   14c3c:	683b      	ldr	r3, [r7, #0]
   14c3e:	7c5b      	ldrb	r3, [r3, #17]
   14c40:	2b00      	cmp	r3, #0
   14c42:	d003      	beq.n	14c4c <_spi_check_config+0x14c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   14c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c46:	2280      	movs	r2, #128	; 0x80
   14c48:	4313      	orrs	r3, r2
   14c4a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   14c4c:	683b      	ldr	r3, [r7, #0]
   14c4e:	7c9b      	ldrb	r3, [r3, #18]
   14c50:	2b00      	cmp	r3, #0
   14c52:	d004      	beq.n	14c5e <_spi_check_config+0x15e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   14c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c56:	2280      	movs	r2, #128	; 0x80
   14c58:	0292      	lsls	r2, r2, #10
   14c5a:	4313      	orrs	r3, r2
   14c5c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   14c5e:	683b      	ldr	r3, [r7, #0]
   14c60:	7cdb      	ldrb	r3, [r3, #19]
   14c62:	2b00      	cmp	r3, #0
   14c64:	d004      	beq.n	14c70 <_spi_check_config+0x170>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   14c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c68:	2280      	movs	r2, #128	; 0x80
   14c6a:	0092      	lsls	r2, r2, #2
   14c6c:	4313      	orrs	r3, r2
   14c6e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   14c70:	683b      	ldr	r3, [r7, #0]
   14c72:	7d1b      	ldrb	r3, [r3, #20]
   14c74:	2b00      	cmp	r3, #0
   14c76:	d004      	beq.n	14c82 <_spi_check_config+0x182>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   14c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c7a:	2280      	movs	r2, #128	; 0x80
   14c7c:	0192      	lsls	r2, r2, #6
   14c7e:	4313      	orrs	r3, r2
   14c80:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   14c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c84:	2202      	movs	r2, #2
   14c86:	4313      	orrs	r3, r2
   14c88:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   14c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c8c:	681a      	ldr	r2, [r3, #0]
   14c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c90:	429a      	cmp	r2, r3
   14c92:	d10e      	bne.n	14cb2 <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
   14c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c96:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   14c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c9a:	429a      	cmp	r2, r3
   14c9c:	d109      	bne.n	14cb2 <_spi_check_config+0x1b2>
		module->mode           = config->mode;
   14c9e:	683b      	ldr	r3, [r7, #0]
   14ca0:	781a      	ldrb	r2, [r3, #0]
   14ca2:	687b      	ldr	r3, [r7, #4]
   14ca4:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   14ca6:	683b      	ldr	r3, [r7, #0]
   14ca8:	7c1a      	ldrb	r2, [r3, #16]
   14caa:	687b      	ldr	r3, [r7, #4]
   14cac:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   14cae:	2300      	movs	r3, #0
   14cb0:	e003      	b.n	14cba <_spi_check_config+0x1ba>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   14cb2:	687b      	ldr	r3, [r7, #4]
   14cb4:	2200      	movs	r2, #0
   14cb6:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   14cb8:	231c      	movs	r3, #28
}
   14cba:	0018      	movs	r0, r3
   14cbc:	46bd      	mov	sp, r7
   14cbe:	b011      	add	sp, #68	; 0x44
   14cc0:	bd90      	pop	{r4, r7, pc}
   14cc2:	46c0      	nop			; (mov r8, r8)
   14cc4:	00014241 	.word	0x00014241
   14cc8:	00014629 	.word	0x00014629
   14ccc:	00016ac9 	.word	0x00016ac9
   14cd0:	00013f77 	.word	0x00013f77

00014cd4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   14cd4:	b580      	push	{r7, lr}
   14cd6:	b08a      	sub	sp, #40	; 0x28
   14cd8:	af00      	add	r7, sp, #0
   14cda:	60f8      	str	r0, [r7, #12]
   14cdc:	60b9      	str	r1, [r7, #8]
   14cde:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14ce0:	68fb      	ldr	r3, [r7, #12]
   14ce2:	68ba      	ldr	r2, [r7, #8]
   14ce4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   14ce6:	68fb      	ldr	r3, [r7, #12]
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	61fb      	str	r3, [r7, #28]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   14cec:	69fb      	ldr	r3, [r7, #28]
   14cee:	681b      	ldr	r3, [r3, #0]
   14cf0:	2202      	movs	r2, #2
   14cf2:	4013      	ands	r3, r2
   14cf4:	d007      	beq.n	14d06 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   14cf6:	687a      	ldr	r2, [r7, #4]
   14cf8:	68fb      	ldr	r3, [r7, #12]
   14cfa:	0011      	movs	r1, r2
   14cfc:	0018      	movs	r0, r3
   14cfe:	4b33      	ldr	r3, [pc, #204]	; (14dcc <spi_init+0xf8>)
   14d00:	4798      	blx	r3
   14d02:	0003      	movs	r3, r0
   14d04:	e05e      	b.n	14dc4 <spi_init+0xf0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14d06:	69fb      	ldr	r3, [r7, #28]
   14d08:	681b      	ldr	r3, [r3, #0]
   14d0a:	2201      	movs	r2, #1
   14d0c:	4013      	ands	r3, r2
   14d0e:	d001      	beq.n	14d14 <spi_init+0x40>
		return STATUS_BUSY;
   14d10:	2305      	movs	r3, #5
   14d12:	e057      	b.n	14dc4 <spi_init+0xf0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14d14:	68fb      	ldr	r3, [r7, #12]
   14d16:	681b      	ldr	r3, [r3, #0]
   14d18:	0018      	movs	r0, r3
   14d1a:	4b2d      	ldr	r3, [pc, #180]	; (14dd0 <spi_init+0xfc>)
   14d1c:	4798      	blx	r3
   14d1e:	0003      	movs	r3, r0
   14d20:	61bb      	str	r3, [r7, #24]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   14d22:	69bb      	ldr	r3, [r7, #24]
   14d24:	2b05      	cmp	r3, #5
   14d26:	d104      	bne.n	14d32 <spi_init+0x5e>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   14d28:	2301      	movs	r3, #1
   14d2a:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
   14d2c:	2318      	movs	r3, #24
   14d2e:	623b      	str	r3, [r7, #32]
   14d30:	e004      	b.n	14d3c <spi_init+0x68>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   14d32:	69bb      	ldr	r3, [r7, #24]
   14d34:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14d36:	69bb      	ldr	r3, [r7, #24]
   14d38:	3312      	adds	r3, #18
   14d3a:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   14d3c:	69bb      	ldr	r3, [r7, #24]
   14d3e:	2b05      	cmp	r3, #5
   14d40:	d108      	bne.n	14d54 <spi_init+0x80>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   14d42:	2201      	movs	r2, #1
   14d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d46:	409a      	lsls	r2, r3
   14d48:	0013      	movs	r3, r2
   14d4a:	0019      	movs	r1, r3
   14d4c:	2003      	movs	r0, #3
   14d4e:	4b21      	ldr	r3, [pc, #132]	; (14dd4 <spi_init+0x100>)
   14d50:	4798      	blx	r3
   14d52:	e007      	b.n	14d64 <spi_init+0x90>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14d54:	2201      	movs	r2, #1
   14d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d58:	409a      	lsls	r2, r3
   14d5a:	0013      	movs	r3, r2
   14d5c:	0019      	movs	r1, r3
   14d5e:	2002      	movs	r0, #2
   14d60:	4b1c      	ldr	r3, [pc, #112]	; (14dd4 <spi_init+0x100>)
   14d62:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14d64:	2314      	movs	r3, #20
   14d66:	18fb      	adds	r3, r7, r3
   14d68:	0018      	movs	r0, r3
   14d6a:	4b1b      	ldr	r3, [pc, #108]	; (14dd8 <spi_init+0x104>)
   14d6c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   14d6e:	687b      	ldr	r3, [r7, #4]
   14d70:	2224      	movs	r2, #36	; 0x24
   14d72:	5c9a      	ldrb	r2, [r3, r2]
   14d74:	2314      	movs	r3, #20
   14d76:	18fb      	adds	r3, r7, r3
   14d78:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14d7a:	6a3b      	ldr	r3, [r7, #32]
   14d7c:	b2db      	uxtb	r3, r3
   14d7e:	2214      	movs	r2, #20
   14d80:	18ba      	adds	r2, r7, r2
   14d82:	0011      	movs	r1, r2
   14d84:	0018      	movs	r0, r3
   14d86:	4b15      	ldr	r3, [pc, #84]	; (14ddc <spi_init+0x108>)
   14d88:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14d8a:	6a3b      	ldr	r3, [r7, #32]
   14d8c:	b2db      	uxtb	r3, r3
   14d8e:	0018      	movs	r0, r3
   14d90:	4b13      	ldr	r3, [pc, #76]	; (14de0 <spi_init+0x10c>)
   14d92:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14d94:	687b      	ldr	r3, [r7, #4]
   14d96:	2224      	movs	r2, #36	; 0x24
   14d98:	5c9b      	ldrb	r3, [r3, r2]
   14d9a:	2100      	movs	r1, #0
   14d9c:	0018      	movs	r0, r3
   14d9e:	4b11      	ldr	r3, [pc, #68]	; (14de4 <spi_init+0x110>)
   14da0:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   14da2:	687b      	ldr	r3, [r7, #4]
   14da4:	781b      	ldrb	r3, [r3, #0]
   14da6:	2b01      	cmp	r3, #1
   14da8:	d105      	bne.n	14db6 <spi_init+0xe2>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   14daa:	69fb      	ldr	r3, [r7, #28]
   14dac:	681b      	ldr	r3, [r3, #0]
   14dae:	220c      	movs	r2, #12
   14db0:	431a      	orrs	r2, r3
   14db2:	69fb      	ldr	r3, [r7, #28]
   14db4:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   14db6:	687a      	ldr	r2, [r7, #4]
   14db8:	68fb      	ldr	r3, [r7, #12]
   14dba:	0011      	movs	r1, r2
   14dbc:	0018      	movs	r0, r3
   14dbe:	4b0a      	ldr	r3, [pc, #40]	; (14de8 <spi_init+0x114>)
   14dc0:	4798      	blx	r3
   14dc2:	0003      	movs	r3, r0
}
   14dc4:	0018      	movs	r0, r3
   14dc6:	46bd      	mov	sp, r7
   14dc8:	b00a      	add	sp, #40	; 0x28
   14dca:	bd80      	pop	{r7, pc}
   14dcc:	00014b01 	.word	0x00014b01
   14dd0:	000143fd 	.word	0x000143fd
   14dd4:	00014735 	.word	0x00014735
   14dd8:	0001471d 	.word	0x0001471d
   14ddc:	000169d9 	.word	0x000169d9
   14de0:	00016a19 	.word	0x00016a19
   14de4:	000141b5 	.word	0x000141b5
   14de8:	000148f1 	.word	0x000148f1

00014dec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   14dec:	b580      	push	{r7, lr}
   14dee:	b086      	sub	sp, #24
   14df0:	af00      	add	r7, sp, #0
   14df2:	60f8      	str	r0, [r7, #12]
   14df4:	60b9      	str	r1, [r7, #8]
   14df6:	1dfb      	adds	r3, r7, #7
   14df8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   14dfa:	68fb      	ldr	r3, [r7, #12]
   14dfc:	795b      	ldrb	r3, [r3, #5]
   14dfe:	2b01      	cmp	r3, #1
   14e00:	d001      	beq.n	14e06 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   14e02:	2315      	movs	r3, #21
   14e04:	e05c      	b.n	14ec0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   14e06:	68fb      	ldr	r3, [r7, #12]
   14e08:	7a1b      	ldrb	r3, [r3, #8]
   14e0a:	2201      	movs	r2, #1
   14e0c:	4053      	eors	r3, r2
   14e0e:	b2db      	uxtb	r3, r3
   14e10:	2b00      	cmp	r3, #0
   14e12:	d054      	beq.n	14ebe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   14e14:	1dfb      	adds	r3, r7, #7
   14e16:	781b      	ldrb	r3, [r3, #0]
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d04a      	beq.n	14eb2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   14e1c:	68bb      	ldr	r3, [r7, #8]
   14e1e:	785b      	ldrb	r3, [r3, #1]
   14e20:	2b00      	cmp	r3, #0
   14e22:	d03f      	beq.n	14ea4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   14e24:	68fb      	ldr	r3, [r7, #12]
   14e26:	0018      	movs	r0, r3
   14e28:	4b27      	ldr	r3, [pc, #156]	; (14ec8 <spi_select_slave+0xdc>)
   14e2a:	4798      	blx	r3
   14e2c:	0003      	movs	r3, r0
   14e2e:	001a      	movs	r2, r3
   14e30:	2301      	movs	r3, #1
   14e32:	4053      	eors	r3, r2
   14e34:	b2db      	uxtb	r3, r3
   14e36:	2b00      	cmp	r3, #0
   14e38:	d007      	beq.n	14e4a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   14e3a:	68bb      	ldr	r3, [r7, #8]
   14e3c:	781b      	ldrb	r3, [r3, #0]
   14e3e:	2101      	movs	r1, #1
   14e40:	0018      	movs	r0, r3
   14e42:	4b22      	ldr	r3, [pc, #136]	; (14ecc <spi_select_slave+0xe0>)
   14e44:	4798      	blx	r3
					return STATUS_BUSY;
   14e46:	2305      	movs	r3, #5
   14e48:	e03a      	b.n	14ec0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   14e4a:	68bb      	ldr	r3, [r7, #8]
   14e4c:	781b      	ldrb	r3, [r3, #0]
   14e4e:	2100      	movs	r1, #0
   14e50:	0018      	movs	r0, r3
   14e52:	4b1e      	ldr	r3, [pc, #120]	; (14ecc <spi_select_slave+0xe0>)
   14e54:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   14e56:	68bb      	ldr	r3, [r7, #8]
   14e58:	789b      	ldrb	r3, [r3, #2]
   14e5a:	b29a      	uxth	r2, r3
   14e5c:	68fb      	ldr	r3, [r7, #12]
   14e5e:	0011      	movs	r1, r2
   14e60:	0018      	movs	r0, r3
   14e62:	4b1b      	ldr	r3, [pc, #108]	; (14ed0 <spi_select_slave+0xe4>)
   14e64:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   14e66:	68fb      	ldr	r3, [r7, #12]
   14e68:	79db      	ldrb	r3, [r3, #7]
   14e6a:	2201      	movs	r2, #1
   14e6c:	4053      	eors	r3, r2
   14e6e:	b2db      	uxtb	r3, r3
   14e70:	2b00      	cmp	r3, #0
   14e72:	d024      	beq.n	14ebe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   14e74:	46c0      	nop			; (mov r8, r8)
   14e76:	68fb      	ldr	r3, [r7, #12]
   14e78:	0018      	movs	r0, r3
   14e7a:	4b16      	ldr	r3, [pc, #88]	; (14ed4 <spi_select_slave+0xe8>)
   14e7c:	4798      	blx	r3
   14e7e:	0003      	movs	r3, r0
   14e80:	001a      	movs	r2, r3
   14e82:	2301      	movs	r3, #1
   14e84:	4053      	eors	r3, r2
   14e86:	b2db      	uxtb	r3, r3
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d1f4      	bne.n	14e76 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   14e8c:	2316      	movs	r3, #22
   14e8e:	18fb      	adds	r3, r7, r3
   14e90:	2200      	movs	r2, #0
   14e92:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   14e94:	2316      	movs	r3, #22
   14e96:	18fa      	adds	r2, r7, r3
   14e98:	68fb      	ldr	r3, [r7, #12]
   14e9a:	0011      	movs	r1, r2
   14e9c:	0018      	movs	r0, r3
   14e9e:	4b0e      	ldr	r3, [pc, #56]	; (14ed8 <spi_select_slave+0xec>)
   14ea0:	4798      	blx	r3
   14ea2:	e00c      	b.n	14ebe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   14ea4:	68bb      	ldr	r3, [r7, #8]
   14ea6:	781b      	ldrb	r3, [r3, #0]
   14ea8:	2100      	movs	r1, #0
   14eaa:	0018      	movs	r0, r3
   14eac:	4b07      	ldr	r3, [pc, #28]	; (14ecc <spi_select_slave+0xe0>)
   14eae:	4798      	blx	r3
   14eb0:	e005      	b.n	14ebe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   14eb2:	68bb      	ldr	r3, [r7, #8]
   14eb4:	781b      	ldrb	r3, [r3, #0]
   14eb6:	2101      	movs	r1, #1
   14eb8:	0018      	movs	r0, r3
   14eba:	4b04      	ldr	r3, [pc, #16]	; (14ecc <spi_select_slave+0xe0>)
   14ebc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   14ebe:	2300      	movs	r3, #0
}
   14ec0:	0018      	movs	r0, r3
   14ec2:	46bd      	mov	sp, r7
   14ec4:	b006      	add	sp, #24
   14ec6:	bd80      	pop	{r7, pc}
   14ec8:	000147d1 	.word	0x000147d1
   14ecc:	000146c9 	.word	0x000146c9
   14ed0:	00014821 	.word	0x00014821
   14ed4:	000147f9 	.word	0x000147f9
   14ed8:	00014869 	.word	0x00014869

00014edc <system_gclk_chan_get_config_defaults>:
{
   14edc:	b580      	push	{r7, lr}
   14ede:	b082      	sub	sp, #8
   14ee0:	af00      	add	r7, sp, #0
   14ee2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14ee4:	687b      	ldr	r3, [r7, #4]
   14ee6:	2200      	movs	r2, #0
   14ee8:	701a      	strb	r2, [r3, #0]
}
   14eea:	46c0      	nop			; (mov r8, r8)
   14eec:	46bd      	mov	sp, r7
   14eee:	b002      	add	sp, #8
   14ef0:	bd80      	pop	{r7, pc}
	...

00014ef4 <system_apb_clock_set_mask>:
{
   14ef4:	b580      	push	{r7, lr}
   14ef6:	b082      	sub	sp, #8
   14ef8:	af00      	add	r7, sp, #0
   14efa:	0002      	movs	r2, r0
   14efc:	6039      	str	r1, [r7, #0]
   14efe:	1dfb      	adds	r3, r7, #7
   14f00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14f02:	1dfb      	adds	r3, r7, #7
   14f04:	781b      	ldrb	r3, [r3, #0]
   14f06:	2b04      	cmp	r3, #4
   14f08:	d827      	bhi.n	14f5a <system_apb_clock_set_mask+0x66>
   14f0a:	009a      	lsls	r2, r3, #2
   14f0c:	4b16      	ldr	r3, [pc, #88]	; (14f68 <system_apb_clock_set_mask+0x74>)
   14f0e:	18d3      	adds	r3, r2, r3
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   14f14:	4b15      	ldr	r3, [pc, #84]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f16:	4a15      	ldr	r2, [pc, #84]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f18:	6951      	ldr	r1, [r2, #20]
   14f1a:	683a      	ldr	r2, [r7, #0]
   14f1c:	430a      	orrs	r2, r1
   14f1e:	615a      	str	r2, [r3, #20]
			break;
   14f20:	e01d      	b.n	14f5e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   14f22:	4b12      	ldr	r3, [pc, #72]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f24:	4a11      	ldr	r2, [pc, #68]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f26:	6991      	ldr	r1, [r2, #24]
   14f28:	683a      	ldr	r2, [r7, #0]
   14f2a:	430a      	orrs	r2, r1
   14f2c:	619a      	str	r2, [r3, #24]
			break;
   14f2e:	e016      	b.n	14f5e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   14f30:	4b0e      	ldr	r3, [pc, #56]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f32:	4a0e      	ldr	r2, [pc, #56]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f34:	69d1      	ldr	r1, [r2, #28]
   14f36:	683a      	ldr	r2, [r7, #0]
   14f38:	430a      	orrs	r2, r1
   14f3a:	61da      	str	r2, [r3, #28]
			break;
   14f3c:	e00f      	b.n	14f5e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   14f3e:	4b0b      	ldr	r3, [pc, #44]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f40:	4a0a      	ldr	r2, [pc, #40]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f42:	6a11      	ldr	r1, [r2, #32]
   14f44:	683a      	ldr	r2, [r7, #0]
   14f46:	430a      	orrs	r2, r1
   14f48:	621a      	str	r2, [r3, #32]
			break;
   14f4a:	e008      	b.n	14f5e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   14f4c:	4b07      	ldr	r3, [pc, #28]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f4e:	4a07      	ldr	r2, [pc, #28]	; (14f6c <system_apb_clock_set_mask+0x78>)
   14f50:	6a51      	ldr	r1, [r2, #36]	; 0x24
   14f52:	683a      	ldr	r2, [r7, #0]
   14f54:	430a      	orrs	r2, r1
   14f56:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   14f58:	e001      	b.n	14f5e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   14f5a:	2317      	movs	r3, #23
   14f5c:	e000      	b.n	14f60 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   14f5e:	2300      	movs	r3, #0
}
   14f60:	0018      	movs	r0, r3
   14f62:	46bd      	mov	sp, r7
   14f64:	b002      	add	sp, #8
   14f66:	bd80      	pop	{r7, pc}
   14f68:	0001ea50 	.word	0x0001ea50
   14f6c:	40000400 	.word	0x40000400

00014f70 <system_pinmux_get_config_defaults>:
{
   14f70:	b580      	push	{r7, lr}
   14f72:	b082      	sub	sp, #8
   14f74:	af00      	add	r7, sp, #0
   14f76:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	2280      	movs	r2, #128	; 0x80
   14f7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14f7e:	687b      	ldr	r3, [r7, #4]
   14f80:	2200      	movs	r2, #0
   14f82:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	2201      	movs	r2, #1
   14f88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   14f8a:	687b      	ldr	r3, [r7, #4]
   14f8c:	2200      	movs	r2, #0
   14f8e:	70da      	strb	r2, [r3, #3]
}
   14f90:	46c0      	nop			; (mov r8, r8)
   14f92:	46bd      	mov	sp, r7
   14f94:	b002      	add	sp, #8
   14f96:	bd80      	pop	{r7, pc}

00014f98 <system_is_debugger_present>:
{
   14f98:	b580      	push	{r7, lr}
   14f9a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14f9c:	4b05      	ldr	r3, [pc, #20]	; (14fb4 <system_is_debugger_present+0x1c>)
   14f9e:	789b      	ldrb	r3, [r3, #2]
   14fa0:	b2db      	uxtb	r3, r3
   14fa2:	001a      	movs	r2, r3
   14fa4:	2302      	movs	r3, #2
   14fa6:	4013      	ands	r3, r2
   14fa8:	1e5a      	subs	r2, r3, #1
   14faa:	4193      	sbcs	r3, r2
   14fac:	b2db      	uxtb	r3, r3
}
   14fae:	0018      	movs	r0, r3
   14fb0:	46bd      	mov	sp, r7
   14fb2:	bd80      	pop	{r7, pc}
   14fb4:	41002000 	.word	0x41002000

00014fb8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	b084      	sub	sp, #16
   14fbc:	af00      	add	r7, sp, #0
   14fbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   14fc0:	687b      	ldr	r3, [r7, #4]
   14fc2:	681b      	ldr	r3, [r3, #0]
   14fc4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   14fc6:	68fb      	ldr	r3, [r7, #12]
   14fc8:	69db      	ldr	r3, [r3, #28]
   14fca:	1e5a      	subs	r2, r3, #1
   14fcc:	4193      	sbcs	r3, r2
   14fce:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   14fd0:	0018      	movs	r0, r3
   14fd2:	46bd      	mov	sp, r7
   14fd4:	b004      	add	sp, #16
   14fd6:	bd80      	pop	{r7, pc}

00014fd8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14fd8:	b580      	push	{r7, lr}
   14fda:	b082      	sub	sp, #8
   14fdc:	af00      	add	r7, sp, #0
   14fde:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   14fe0:	46c0      	nop			; (mov r8, r8)
   14fe2:	687b      	ldr	r3, [r7, #4]
   14fe4:	0018      	movs	r0, r3
   14fe6:	4b04      	ldr	r3, [pc, #16]	; (14ff8 <_usart_wait_for_sync+0x20>)
   14fe8:	4798      	blx	r3
   14fea:	1e03      	subs	r3, r0, #0
   14fec:	d1f9      	bne.n	14fe2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   14fee:	46c0      	nop			; (mov r8, r8)
   14ff0:	46bd      	mov	sp, r7
   14ff2:	b002      	add	sp, #8
   14ff4:	bd80      	pop	{r7, pc}
   14ff6:	46c0      	nop			; (mov r8, r8)
   14ff8:	00014fb9 	.word	0x00014fb9

00014ffc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   14ffc:	b5b0      	push	{r4, r5, r7, lr}
   14ffe:	b08c      	sub	sp, #48	; 0x30
   15000:	af02      	add	r7, sp, #8
   15002:	6078      	str	r0, [r7, #4]
   15004:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15006:	687b      	ldr	r3, [r7, #4]
   15008:	681b      	ldr	r3, [r3, #0]
   1500a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1500c:	687b      	ldr	r3, [r7, #4]
   1500e:	681b      	ldr	r3, [r3, #0]
   15010:	0018      	movs	r0, r3
   15012:	4bab      	ldr	r3, [pc, #684]	; (152c0 <_usart_set_config+0x2c4>)
   15014:	4798      	blx	r3
   15016:	0003      	movs	r3, r0
   15018:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1501a:	697b      	ldr	r3, [r7, #20]
   1501c:	3312      	adds	r3, #18
   1501e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   15020:	2300      	movs	r3, #0
   15022:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   15024:	2300      	movs	r3, #0
   15026:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   15028:	230a      	movs	r3, #10
   1502a:	18fb      	adds	r3, r7, r3
   1502c:	2200      	movs	r2, #0
   1502e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15030:	231f      	movs	r3, #31
   15032:	18fb      	adds	r3, r7, r3
   15034:	2200      	movs	r2, #0
   15036:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   15038:	231e      	movs	r3, #30
   1503a:	18fb      	adds	r3, r7, r3
   1503c:	2210      	movs	r2, #16
   1503e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   15040:	683b      	ldr	r3, [r7, #0]
   15042:	8a1b      	ldrh	r3, [r3, #16]
   15044:	2280      	movs	r2, #128	; 0x80
   15046:	01d2      	lsls	r2, r2, #7
   15048:	4293      	cmp	r3, r2
   1504a:	d01c      	beq.n	15086 <_usart_set_config+0x8a>
   1504c:	2280      	movs	r2, #128	; 0x80
   1504e:	01d2      	lsls	r2, r2, #7
   15050:	4293      	cmp	r3, r2
   15052:	dc06      	bgt.n	15062 <_usart_set_config+0x66>
   15054:	2b00      	cmp	r3, #0
   15056:	d00d      	beq.n	15074 <_usart_set_config+0x78>
   15058:	2280      	movs	r2, #128	; 0x80
   1505a:	0192      	lsls	r2, r2, #6
   1505c:	4293      	cmp	r3, r2
   1505e:	d024      	beq.n	150aa <_usart_set_config+0xae>
   15060:	e035      	b.n	150ce <_usart_set_config+0xd2>
   15062:	22c0      	movs	r2, #192	; 0xc0
   15064:	01d2      	lsls	r2, r2, #7
   15066:	4293      	cmp	r3, r2
   15068:	d028      	beq.n	150bc <_usart_set_config+0xc0>
   1506a:	2280      	movs	r2, #128	; 0x80
   1506c:	0212      	lsls	r2, r2, #8
   1506e:	4293      	cmp	r3, r2
   15070:	d012      	beq.n	15098 <_usart_set_config+0x9c>
   15072:	e02c      	b.n	150ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15074:	231f      	movs	r3, #31
   15076:	18fb      	adds	r3, r7, r3
   15078:	2200      	movs	r2, #0
   1507a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1507c:	231e      	movs	r3, #30
   1507e:	18fb      	adds	r3, r7, r3
   15080:	2210      	movs	r2, #16
   15082:	701a      	strb	r2, [r3, #0]
			break;
   15084:	e023      	b.n	150ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15086:	231f      	movs	r3, #31
   15088:	18fb      	adds	r3, r7, r3
   1508a:	2200      	movs	r2, #0
   1508c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1508e:	231e      	movs	r3, #30
   15090:	18fb      	adds	r3, r7, r3
   15092:	2208      	movs	r2, #8
   15094:	701a      	strb	r2, [r3, #0]
			break;
   15096:	e01a      	b.n	150ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15098:	231f      	movs	r3, #31
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	2200      	movs	r2, #0
   1509e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   150a0:	231e      	movs	r3, #30
   150a2:	18fb      	adds	r3, r7, r3
   150a4:	2203      	movs	r2, #3
   150a6:	701a      	strb	r2, [r3, #0]
			break;
   150a8:	e011      	b.n	150ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   150aa:	231f      	movs	r3, #31
   150ac:	18fb      	adds	r3, r7, r3
   150ae:	2201      	movs	r2, #1
   150b0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   150b2:	231e      	movs	r3, #30
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	2210      	movs	r2, #16
   150b8:	701a      	strb	r2, [r3, #0]
			break;
   150ba:	e008      	b.n	150ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   150bc:	231f      	movs	r3, #31
   150be:	18fb      	adds	r3, r7, r3
   150c0:	2201      	movs	r2, #1
   150c2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   150c4:	231e      	movs	r3, #30
   150c6:	18fb      	adds	r3, r7, r3
   150c8:	2208      	movs	r2, #8
   150ca:	701a      	strb	r2, [r3, #0]
			break;
   150cc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   150ce:	683b      	ldr	r3, [r7, #0]
   150d0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   150d2:	683b      	ldr	r3, [r7, #0]
   150d4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   150d6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   150d8:	683b      	ldr	r3, [r7, #0]
   150da:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   150dc:	4313      	orrs	r3, r2
		config->sample_rate |
   150de:	683a      	ldr	r2, [r7, #0]
   150e0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   150e2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   150e4:	683a      	ldr	r2, [r7, #0]
   150e6:	7e12      	ldrb	r2, [r2, #24]
   150e8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   150ea:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   150ec:	683a      	ldr	r2, [r7, #0]
   150ee:	2126      	movs	r1, #38	; 0x26
   150f0:	5c52      	ldrb	r2, [r2, r1]
   150f2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   150f4:	4313      	orrs	r3, r2
   150f6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   150f8:	231d      	movs	r3, #29
   150fa:	18fb      	adds	r3, r7, r3
   150fc:	2200      	movs	r2, #0
   150fe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   15100:	683b      	ldr	r3, [r7, #0]
   15102:	685b      	ldr	r3, [r3, #4]
   15104:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   15106:	68fb      	ldr	r3, [r7, #12]
   15108:	2b00      	cmp	r3, #0
   1510a:	d01e      	beq.n	1514a <_usart_set_config+0x14e>
   1510c:	2280      	movs	r2, #128	; 0x80
   1510e:	0552      	lsls	r2, r2, #21
   15110:	4293      	cmp	r3, r2
   15112:	d14f      	bne.n	151b4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   15114:	683b      	ldr	r3, [r7, #0]
   15116:	2227      	movs	r2, #39	; 0x27
   15118:	5c9b      	ldrb	r3, [r3, r2]
   1511a:	2201      	movs	r2, #1
   1511c:	4053      	eors	r3, r2
   1511e:	b2db      	uxtb	r3, r3
   15120:	2b00      	cmp	r3, #0
   15122:	d046      	beq.n	151b2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   15124:	683b      	ldr	r3, [r7, #0]
   15126:	6a1d      	ldr	r5, [r3, #32]
   15128:	693b      	ldr	r3, [r7, #16]
   1512a:	b2db      	uxtb	r3, r3
   1512c:	0018      	movs	r0, r3
   1512e:	4b65      	ldr	r3, [pc, #404]	; (152c4 <_usart_set_config+0x2c8>)
   15130:	4798      	blx	r3
   15132:	0001      	movs	r1, r0
   15134:	231d      	movs	r3, #29
   15136:	18fc      	adds	r4, r7, r3
   15138:	230a      	movs	r3, #10
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	001a      	movs	r2, r3
   1513e:	0028      	movs	r0, r5
   15140:	4b61      	ldr	r3, [pc, #388]	; (152c8 <_usart_set_config+0x2cc>)
   15142:	4798      	blx	r3
   15144:	0003      	movs	r3, r0
   15146:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   15148:	e033      	b.n	151b2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1514a:	683b      	ldr	r3, [r7, #0]
   1514c:	2227      	movs	r2, #39	; 0x27
   1514e:	5c9b      	ldrb	r3, [r3, r2]
   15150:	2b00      	cmp	r3, #0
   15152:	d014      	beq.n	1517e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   15154:	683b      	ldr	r3, [r7, #0]
   15156:	6a18      	ldr	r0, [r3, #32]
   15158:	683b      	ldr	r3, [r7, #0]
   1515a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   1515c:	231d      	movs	r3, #29
   1515e:	18fc      	adds	r4, r7, r3
   15160:	231f      	movs	r3, #31
   15162:	18fb      	adds	r3, r7, r3
   15164:	781d      	ldrb	r5, [r3, #0]
   15166:	230a      	movs	r3, #10
   15168:	18fa      	adds	r2, r7, r3
   1516a:	231e      	movs	r3, #30
   1516c:	18fb      	adds	r3, r7, r3
   1516e:	781b      	ldrb	r3, [r3, #0]
   15170:	9300      	str	r3, [sp, #0]
   15172:	002b      	movs	r3, r5
   15174:	4d55      	ldr	r5, [pc, #340]	; (152cc <_usart_set_config+0x2d0>)
   15176:	47a8      	blx	r5
   15178:	0003      	movs	r3, r0
   1517a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   1517c:	e01a      	b.n	151b4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   1517e:	683b      	ldr	r3, [r7, #0]
   15180:	6a1d      	ldr	r5, [r3, #32]
   15182:	693b      	ldr	r3, [r7, #16]
   15184:	b2db      	uxtb	r3, r3
   15186:	0018      	movs	r0, r3
   15188:	4b4e      	ldr	r3, [pc, #312]	; (152c4 <_usart_set_config+0x2c8>)
   1518a:	4798      	blx	r3
				status_code =
   1518c:	231d      	movs	r3, #29
   1518e:	18fc      	adds	r4, r7, r3
   15190:	231f      	movs	r3, #31
   15192:	18fb      	adds	r3, r7, r3
   15194:	7819      	ldrb	r1, [r3, #0]
   15196:	230a      	movs	r3, #10
   15198:	18fa      	adds	r2, r7, r3
   1519a:	231e      	movs	r3, #30
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	781b      	ldrb	r3, [r3, #0]
   151a0:	9300      	str	r3, [sp, #0]
   151a2:	000b      	movs	r3, r1
   151a4:	0001      	movs	r1, r0
   151a6:	0028      	movs	r0, r5
   151a8:	4d48      	ldr	r5, [pc, #288]	; (152cc <_usart_set_config+0x2d0>)
   151aa:	47a8      	blx	r5
   151ac:	0003      	movs	r3, r0
   151ae:	7023      	strb	r3, [r4, #0]
			break;
   151b0:	e000      	b.n	151b4 <_usart_set_config+0x1b8>
			break;
   151b2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   151b4:	231d      	movs	r3, #29
   151b6:	18fb      	adds	r3, r7, r3
   151b8:	781b      	ldrb	r3, [r3, #0]
   151ba:	2b00      	cmp	r3, #0
   151bc:	d003      	beq.n	151c6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   151be:	231d      	movs	r3, #29
   151c0:	18fb      	adds	r3, r7, r3
   151c2:	781b      	ldrb	r3, [r3, #0]
   151c4:	e077      	b.n	152b6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   151c6:	683b      	ldr	r3, [r7, #0]
   151c8:	7e5b      	ldrb	r3, [r3, #25]
   151ca:	2b00      	cmp	r3, #0
   151cc:	d003      	beq.n	151d6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   151ce:	683b      	ldr	r3, [r7, #0]
   151d0:	7e9a      	ldrb	r2, [r3, #26]
   151d2:	69bb      	ldr	r3, [r7, #24]
   151d4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   151d6:	687b      	ldr	r3, [r7, #4]
   151d8:	0018      	movs	r0, r3
   151da:	4b3d      	ldr	r3, [pc, #244]	; (152d0 <_usart_set_config+0x2d4>)
   151dc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   151de:	230a      	movs	r3, #10
   151e0:	18fb      	adds	r3, r7, r3
   151e2:	881a      	ldrh	r2, [r3, #0]
   151e4:	69bb      	ldr	r3, [r7, #24]
   151e6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   151e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   151ea:	68fb      	ldr	r3, [r7, #12]
   151ec:	4313      	orrs	r3, r2
   151ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   151f0:	683b      	ldr	r3, [r7, #0]
   151f2:	2227      	movs	r2, #39	; 0x27
   151f4:	5c9b      	ldrb	r3, [r3, r2]
   151f6:	2201      	movs	r2, #1
   151f8:	4053      	eors	r3, r2
   151fa:	b2db      	uxtb	r3, r3
   151fc:	2b00      	cmp	r3, #0
   151fe:	d003      	beq.n	15208 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   15200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15202:	2204      	movs	r2, #4
   15204:	4313      	orrs	r3, r2
   15206:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   15208:	683b      	ldr	r3, [r7, #0]
   1520a:	7e5b      	ldrb	r3, [r3, #25]
   1520c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1520e:	683b      	ldr	r3, [r7, #0]
   15210:	7f1b      	ldrb	r3, [r3, #28]
   15212:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   15214:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   15216:	683b      	ldr	r3, [r7, #0]
   15218:	7f5b      	ldrb	r3, [r3, #29]
   1521a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1521c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1521e:	683b      	ldr	r3, [r7, #0]
   15220:	2124      	movs	r1, #36	; 0x24
   15222:	5c5b      	ldrb	r3, [r3, r1]
   15224:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   15226:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15228:	683b      	ldr	r3, [r7, #0]
   1522a:	2125      	movs	r1, #37	; 0x25
   1522c:	5c5b      	ldrb	r3, [r3, r1]
   1522e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15230:	4313      	orrs	r3, r2
	ctrlb =  
   15232:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   15234:	683b      	ldr	r3, [r7, #0]
   15236:	7a9b      	ldrb	r3, [r3, #10]
   15238:	001a      	movs	r2, r3
   1523a:	6a3b      	ldr	r3, [r7, #32]
   1523c:	4313      	orrs	r3, r2
   1523e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   15240:	683b      	ldr	r3, [r7, #0]
   15242:	7adb      	ldrb	r3, [r3, #11]
   15244:	001a      	movs	r2, r3
   15246:	6a3b      	ldr	r3, [r7, #32]
   15248:	4313      	orrs	r3, r2
   1524a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   1524c:	683b      	ldr	r3, [r7, #0]
   1524e:	891b      	ldrh	r3, [r3, #8]
   15250:	2bff      	cmp	r3, #255	; 0xff
   15252:	d00b      	beq.n	1526c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   15254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15256:	2280      	movs	r2, #128	; 0x80
   15258:	0452      	lsls	r2, r2, #17
   1525a:	4313      	orrs	r3, r2
   1525c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   1525e:	683b      	ldr	r3, [r7, #0]
   15260:	891b      	ldrh	r3, [r3, #8]
   15262:	001a      	movs	r2, r3
   15264:	6a3b      	ldr	r3, [r7, #32]
   15266:	4313      	orrs	r3, r2
   15268:	623b      	str	r3, [r7, #32]
   1526a:	e008      	b.n	1527e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   1526c:	683b      	ldr	r3, [r7, #0]
   1526e:	7edb      	ldrb	r3, [r3, #27]
   15270:	2b00      	cmp	r3, #0
   15272:	d004      	beq.n	1527e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   15274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15276:	2280      	movs	r2, #128	; 0x80
   15278:	04d2      	lsls	r2, r2, #19
   1527a:	4313      	orrs	r3, r2
   1527c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1527e:	683b      	ldr	r3, [r7, #0]
   15280:	222c      	movs	r2, #44	; 0x2c
   15282:	5c9b      	ldrb	r3, [r3, r2]
   15284:	2b00      	cmp	r3, #0
   15286:	d103      	bne.n	15290 <_usart_set_config+0x294>
   15288:	4b12      	ldr	r3, [pc, #72]	; (152d4 <_usart_set_config+0x2d8>)
   1528a:	4798      	blx	r3
   1528c:	1e03      	subs	r3, r0, #0
   1528e:	d003      	beq.n	15298 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   15290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15292:	2280      	movs	r2, #128	; 0x80
   15294:	4313      	orrs	r3, r2
   15296:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15298:	687b      	ldr	r3, [r7, #4]
   1529a:	0018      	movs	r0, r3
   1529c:	4b0c      	ldr	r3, [pc, #48]	; (152d0 <_usart_set_config+0x2d4>)
   1529e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   152a0:	69bb      	ldr	r3, [r7, #24]
   152a2:	6a3a      	ldr	r2, [r7, #32]
   152a4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   152a6:	687b      	ldr	r3, [r7, #4]
   152a8:	0018      	movs	r0, r3
   152aa:	4b09      	ldr	r3, [pc, #36]	; (152d0 <_usart_set_config+0x2d4>)
   152ac:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   152ae:	69bb      	ldr	r3, [r7, #24]
   152b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   152b2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   152b4:	2300      	movs	r3, #0
}
   152b6:	0018      	movs	r0, r3
   152b8:	46bd      	mov	sp, r7
   152ba:	b00a      	add	sp, #40	; 0x28
   152bc:	bdb0      	pop	{r4, r5, r7, pc}
   152be:	46c0      	nop			; (mov r8, r8)
   152c0:	000143fd 	.word	0x000143fd
   152c4:	00016ac9 	.word	0x00016ac9
   152c8:	00013f77 	.word	0x00013f77
   152cc:	00013ff5 	.word	0x00013ff5
   152d0:	00014fd9 	.word	0x00014fd9
   152d4:	00014f99 	.word	0x00014f99

000152d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   152d8:	b590      	push	{r4, r7, lr}
   152da:	b093      	sub	sp, #76	; 0x4c
   152dc:	af00      	add	r7, sp, #0
   152de:	60f8      	str	r0, [r7, #12]
   152e0:	60b9      	str	r1, [r7, #8]
   152e2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   152e4:	2333      	movs	r3, #51	; 0x33
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	2200      	movs	r2, #0
   152ea:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   152ec:	68fb      	ldr	r3, [r7, #12]
   152ee:	68ba      	ldr	r2, [r7, #8]
   152f0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   152f2:	68fb      	ldr	r3, [r7, #12]
   152f4:	681b      	ldr	r3, [r3, #0]
   152f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   152f8:	68fb      	ldr	r3, [r7, #12]
   152fa:	681b      	ldr	r3, [r3, #0]
   152fc:	0018      	movs	r0, r3
   152fe:	4b8f      	ldr	r3, [pc, #572]	; (1553c <usart_init+0x264>)
   15300:	4798      	blx	r3
   15302:	0003      	movs	r3, r0
   15304:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   15306:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15308:	2b05      	cmp	r3, #5
   1530a:	d104      	bne.n	15316 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
   1530c:	2301      	movs	r3, #1
   1530e:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
   15310:	2318      	movs	r3, #24
   15312:	643b      	str	r3, [r7, #64]	; 0x40
   15314:	e004      	b.n	15320 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
   15316:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15318:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1531c:	3312      	adds	r3, #18
   1531e:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   15320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15322:	681b      	ldr	r3, [r3, #0]
   15324:	2201      	movs	r2, #1
   15326:	4013      	ands	r3, r2
   15328:	d001      	beq.n	1532e <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1532a:	2305      	movs	r3, #5
   1532c:	e102      	b.n	15534 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15330:	681b      	ldr	r3, [r3, #0]
   15332:	2202      	movs	r2, #2
   15334:	4013      	ands	r3, r2
   15336:	d001      	beq.n	1533c <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   15338:	231c      	movs	r3, #28
   1533a:	e0fb      	b.n	15534 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30)
	if (sercom_index == 5) {
   1533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1533e:	2b05      	cmp	r3, #5
   15340:	d108      	bne.n	15354 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
   15342:	2201      	movs	r2, #1
   15344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15346:	409a      	lsls	r2, r3
   15348:	0013      	movs	r3, r2
   1534a:	0019      	movs	r1, r3
   1534c:	2003      	movs	r0, #3
   1534e:	4b7c      	ldr	r3, [pc, #496]	; (15540 <usart_init+0x268>)
   15350:	4798      	blx	r3
   15352:	e007      	b.n	15364 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
   15354:	2201      	movs	r2, #1
   15356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15358:	409a      	lsls	r2, r3
   1535a:	0013      	movs	r3, r2
   1535c:	0019      	movs	r1, r3
   1535e:	2002      	movs	r0, #2
   15360:	4b77      	ldr	r3, [pc, #476]	; (15540 <usart_init+0x268>)
   15362:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15364:	2324      	movs	r3, #36	; 0x24
   15366:	18fb      	adds	r3, r7, r3
   15368:	0018      	movs	r0, r3
   1536a:	4b76      	ldr	r3, [pc, #472]	; (15544 <usart_init+0x26c>)
   1536c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1536e:	687b      	ldr	r3, [r7, #4]
   15370:	222d      	movs	r2, #45	; 0x2d
   15372:	5c9a      	ldrb	r2, [r3, r2]
   15374:	2324      	movs	r3, #36	; 0x24
   15376:	18fb      	adds	r3, r7, r3
   15378:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1537a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1537c:	b2db      	uxtb	r3, r3
   1537e:	2224      	movs	r2, #36	; 0x24
   15380:	18ba      	adds	r2, r7, r2
   15382:	0011      	movs	r1, r2
   15384:	0018      	movs	r0, r3
   15386:	4b70      	ldr	r3, [pc, #448]	; (15548 <usart_init+0x270>)
   15388:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1538a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1538c:	b2db      	uxtb	r3, r3
   1538e:	0018      	movs	r0, r3
   15390:	4b6e      	ldr	r3, [pc, #440]	; (1554c <usart_init+0x274>)
   15392:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15394:	687b      	ldr	r3, [r7, #4]
   15396:	222d      	movs	r2, #45	; 0x2d
   15398:	5c9b      	ldrb	r3, [r3, r2]
   1539a:	2100      	movs	r1, #0
   1539c:	0018      	movs	r0, r3
   1539e:	4b6c      	ldr	r3, [pc, #432]	; (15550 <usart_init+0x278>)
   153a0:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   153a2:	687b      	ldr	r3, [r7, #4]
   153a4:	7ada      	ldrb	r2, [r3, #11]
   153a6:	68fb      	ldr	r3, [r7, #12]
   153a8:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   153aa:	687b      	ldr	r3, [r7, #4]
   153ac:	2224      	movs	r2, #36	; 0x24
   153ae:	5c9a      	ldrb	r2, [r3, r2]
   153b0:	68fb      	ldr	r3, [r7, #12]
   153b2:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	2225      	movs	r2, #37	; 0x25
   153b8:	5c9a      	ldrb	r2, [r3, r2]
   153ba:	68fb      	ldr	r3, [r7, #12]
   153bc:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   153be:	687b      	ldr	r3, [r7, #4]
   153c0:	7eda      	ldrb	r2, [r3, #27]
   153c2:	68fb      	ldr	r3, [r7, #12]
   153c4:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   153c6:	687b      	ldr	r3, [r7, #4]
   153c8:	7f1a      	ldrb	r2, [r3, #28]
   153ca:	68fb      	ldr	r3, [r7, #12]
   153cc:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   153ce:	2333      	movs	r3, #51	; 0x33
   153d0:	18fc      	adds	r4, r7, r3
   153d2:	687a      	ldr	r2, [r7, #4]
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	0011      	movs	r1, r2
   153d8:	0018      	movs	r0, r3
   153da:	4b5e      	ldr	r3, [pc, #376]	; (15554 <usart_init+0x27c>)
   153dc:	4798      	blx	r3
   153de:	0003      	movs	r3, r0
   153e0:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   153e2:	2333      	movs	r3, #51	; 0x33
   153e4:	18fb      	adds	r3, r7, r3
   153e6:	781b      	ldrb	r3, [r3, #0]
   153e8:	2b00      	cmp	r3, #0
   153ea:	d003      	beq.n	153f4 <usart_init+0x11c>
		return status_code;
   153ec:	2333      	movs	r3, #51	; 0x33
   153ee:	18fb      	adds	r3, r7, r3
   153f0:	781b      	ldrb	r3, [r3, #0]
   153f2:	e09f      	b.n	15534 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   153f4:	2320      	movs	r3, #32
   153f6:	18fb      	adds	r3, r7, r3
   153f8:	0018      	movs	r0, r3
   153fa:	4b57      	ldr	r3, [pc, #348]	; (15558 <usart_init+0x280>)
   153fc:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   153fe:	2320      	movs	r3, #32
   15400:	18fb      	adds	r3, r7, r3
   15402:	2200      	movs	r2, #0
   15404:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   15406:	2320      	movs	r3, #32
   15408:	18fb      	adds	r3, r7, r3
   1540a:	2200      	movs	r2, #0
   1540c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   1540e:	687b      	ldr	r3, [r7, #4]
   15410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   15412:	2310      	movs	r3, #16
   15414:	18fb      	adds	r3, r7, r3
   15416:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1541c:	2310      	movs	r3, #16
   1541e:	18fb      	adds	r3, r7, r3
   15420:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   15422:	687b      	ldr	r3, [r7, #4]
   15424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   15426:	2310      	movs	r3, #16
   15428:	18fb      	adds	r3, r7, r3
   1542a:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1542c:	687b      	ldr	r3, [r7, #4]
   1542e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   15430:	2310      	movs	r3, #16
   15432:	18fb      	adds	r3, r7, r3
   15434:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   15436:	233f      	movs	r3, #63	; 0x3f
   15438:	18fb      	adds	r3, r7, r3
   1543a:	2200      	movs	r2, #0
   1543c:	701a      	strb	r2, [r3, #0]
   1543e:	e02c      	b.n	1549a <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   15440:	233f      	movs	r3, #63	; 0x3f
   15442:	18fb      	adds	r3, r7, r3
   15444:	781a      	ldrb	r2, [r3, #0]
   15446:	2310      	movs	r3, #16
   15448:	18fb      	adds	r3, r7, r3
   1544a:	0092      	lsls	r2, r2, #2
   1544c:	58d3      	ldr	r3, [r2, r3]
   1544e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   15450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15452:	2b00      	cmp	r3, #0
   15454:	d109      	bne.n	1546a <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15456:	233f      	movs	r3, #63	; 0x3f
   15458:	18fb      	adds	r3, r7, r3
   1545a:	781a      	ldrb	r2, [r3, #0]
   1545c:	68bb      	ldr	r3, [r7, #8]
   1545e:	0011      	movs	r1, r2
   15460:	0018      	movs	r0, r3
   15462:	4b3e      	ldr	r3, [pc, #248]	; (1555c <usart_init+0x284>)
   15464:	4798      	blx	r3
   15466:	0003      	movs	r3, r0
   15468:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1546c:	3301      	adds	r3, #1
   1546e:	d00d      	beq.n	1548c <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15472:	b2da      	uxtb	r2, r3
   15474:	2320      	movs	r3, #32
   15476:	18fb      	adds	r3, r7, r3
   15478:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1547c:	0c1b      	lsrs	r3, r3, #16
   1547e:	b2db      	uxtb	r3, r3
   15480:	2220      	movs	r2, #32
   15482:	18ba      	adds	r2, r7, r2
   15484:	0011      	movs	r1, r2
   15486:	0018      	movs	r0, r3
   15488:	4b35      	ldr	r3, [pc, #212]	; (15560 <usart_init+0x288>)
   1548a:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1548c:	233f      	movs	r3, #63	; 0x3f
   1548e:	18fb      	adds	r3, r7, r3
   15490:	781a      	ldrb	r2, [r3, #0]
   15492:	233f      	movs	r3, #63	; 0x3f
   15494:	18fb      	adds	r3, r7, r3
   15496:	3201      	adds	r2, #1
   15498:	701a      	strb	r2, [r3, #0]
   1549a:	233f      	movs	r3, #63	; 0x3f
   1549c:	18fb      	adds	r3, r7, r3
   1549e:	781b      	ldrb	r3, [r3, #0]
   154a0:	2b03      	cmp	r3, #3
   154a2:	d9cd      	bls.n	15440 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   154a4:	2300      	movs	r3, #0
   154a6:	637b      	str	r3, [r7, #52]	; 0x34
   154a8:	e00a      	b.n	154c0 <usart_init+0x1e8>
		module->callback[i]            = NULL;
   154aa:	68fa      	ldr	r2, [r7, #12]
   154ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154ae:	3302      	adds	r3, #2
   154b0:	009b      	lsls	r3, r3, #2
   154b2:	18d3      	adds	r3, r2, r3
   154b4:	3304      	adds	r3, #4
   154b6:	2200      	movs	r2, #0
   154b8:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   154ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154bc:	3301      	adds	r3, #1
   154be:	637b      	str	r3, [r7, #52]	; 0x34
   154c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154c2:	2b05      	cmp	r3, #5
   154c4:	d9f1      	bls.n	154aa <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
   154c6:	68fb      	ldr	r3, [r7, #12]
   154c8:	2200      	movs	r2, #0
   154ca:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   154cc:	68fb      	ldr	r3, [r7, #12]
   154ce:	2200      	movs	r2, #0
   154d0:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   154d2:	68fb      	ldr	r3, [r7, #12]
   154d4:	2200      	movs	r2, #0
   154d6:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   154d8:	68fb      	ldr	r3, [r7, #12]
   154da:	2200      	movs	r2, #0
   154dc:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   154de:	68fb      	ldr	r3, [r7, #12]
   154e0:	2230      	movs	r2, #48	; 0x30
   154e2:	2100      	movs	r1, #0
   154e4:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   154e6:	68fb      	ldr	r3, [r7, #12]
   154e8:	2231      	movs	r2, #49	; 0x31
   154ea:	2100      	movs	r1, #0
   154ec:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   154ee:	68fb      	ldr	r3, [r7, #12]
   154f0:	2232      	movs	r2, #50	; 0x32
   154f2:	2100      	movs	r1, #0
   154f4:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   154f6:	68fb      	ldr	r3, [r7, #12]
   154f8:	2233      	movs	r2, #51	; 0x33
   154fa:	2100      	movs	r1, #0
   154fc:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   154fe:	68fb      	ldr	r3, [r7, #12]
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	2227      	movs	r2, #39	; 0x27
   15504:	18bc      	adds	r4, r7, r2
   15506:	0018      	movs	r0, r3
   15508:	4b0c      	ldr	r3, [pc, #48]	; (1553c <usart_init+0x264>)
   1550a:	4798      	blx	r3
   1550c:	0003      	movs	r3, r0
   1550e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   15510:	4a14      	ldr	r2, [pc, #80]	; (15564 <usart_init+0x28c>)
   15512:	2327      	movs	r3, #39	; 0x27
   15514:	18fb      	adds	r3, r7, r3
   15516:	781b      	ldrb	r3, [r3, #0]
   15518:	0011      	movs	r1, r2
   1551a:	0018      	movs	r0, r3
   1551c:	4b12      	ldr	r3, [pc, #72]	; (15568 <usart_init+0x290>)
   1551e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15520:	2327      	movs	r3, #39	; 0x27
   15522:	18fb      	adds	r3, r7, r3
   15524:	781a      	ldrb	r2, [r3, #0]
   15526:	4b11      	ldr	r3, [pc, #68]	; (1556c <usart_init+0x294>)
   15528:	0092      	lsls	r2, r2, #2
   1552a:	68f9      	ldr	r1, [r7, #12]
   1552c:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   1552e:	2333      	movs	r3, #51	; 0x33
   15530:	18fb      	adds	r3, r7, r3
   15532:	781b      	ldrb	r3, [r3, #0]
}
   15534:	0018      	movs	r0, r3
   15536:	46bd      	mov	sp, r7
   15538:	b013      	add	sp, #76	; 0x4c
   1553a:	bd90      	pop	{r4, r7, pc}
   1553c:	000143fd 	.word	0x000143fd
   15540:	00014ef5 	.word	0x00014ef5
   15544:	00014edd 	.word	0x00014edd
   15548:	000169d9 	.word	0x000169d9
   1554c:	00016a19 	.word	0x00016a19
   15550:	000141b5 	.word	0x000141b5
   15554:	00014ffd 	.word	0x00014ffd
   15558:	00014f71 	.word	0x00014f71
   1555c:	00014241 	.word	0x00014241
   15560:	00016d01 	.word	0x00016d01
   15564:	0001580d 	.word	0x0001580d
   15568:	00014461 	.word	0x00014461
   1556c:	200024c8 	.word	0x200024c8

00015570 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   15570:	b580      	push	{r7, lr}
   15572:	b084      	sub	sp, #16
   15574:	af00      	add	r7, sp, #0
   15576:	6078      	str	r0, [r7, #4]
   15578:	000a      	movs	r2, r1
   1557a:	1cbb      	adds	r3, r7, #2
   1557c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1557e:	687b      	ldr	r3, [r7, #4]
   15580:	681b      	ldr	r3, [r3, #0]
   15582:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   15584:	687b      	ldr	r3, [r7, #4]
   15586:	79db      	ldrb	r3, [r3, #7]
   15588:	2201      	movs	r2, #1
   1558a:	4053      	eors	r3, r2
   1558c:	b2db      	uxtb	r3, r3
   1558e:	2b00      	cmp	r3, #0
   15590:	d001      	beq.n	15596 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   15592:	231c      	movs	r3, #28
   15594:	e017      	b.n	155c6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   15596:	687b      	ldr	r3, [r7, #4]
   15598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1559a:	b29b      	uxth	r3, r3
   1559c:	2b00      	cmp	r3, #0
   1559e:	d001      	beq.n	155a4 <usart_write_wait+0x34>
		return STATUS_BUSY;
   155a0:	2305      	movs	r3, #5
   155a2:	e010      	b.n	155c6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   155a4:	687b      	ldr	r3, [r7, #4]
   155a6:	0018      	movs	r0, r3
   155a8:	4b09      	ldr	r3, [pc, #36]	; (155d0 <usart_write_wait+0x60>)
   155aa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   155ac:	68fb      	ldr	r3, [r7, #12]
   155ae:	1cba      	adds	r2, r7, #2
   155b0:	8812      	ldrh	r2, [r2, #0]
   155b2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   155b4:	46c0      	nop			; (mov r8, r8)
   155b6:	68fb      	ldr	r3, [r7, #12]
   155b8:	7e1b      	ldrb	r3, [r3, #24]
   155ba:	b2db      	uxtb	r3, r3
   155bc:	001a      	movs	r2, r3
   155be:	2302      	movs	r3, #2
   155c0:	4013      	ands	r3, r2
   155c2:	d0f8      	beq.n	155b6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   155c4:	2300      	movs	r3, #0
}
   155c6:	0018      	movs	r0, r3
   155c8:	46bd      	mov	sp, r7
   155ca:	b004      	add	sp, #16
   155cc:	bd80      	pop	{r7, pc}
   155ce:	46c0      	nop			; (mov r8, r8)
   155d0:	00014fd9 	.word	0x00014fd9

000155d4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   155d4:	b580      	push	{r7, lr}
   155d6:	b084      	sub	sp, #16
   155d8:	af00      	add	r7, sp, #0
   155da:	6078      	str	r0, [r7, #4]
   155dc:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   155de:	687b      	ldr	r3, [r7, #4]
   155e0:	681b      	ldr	r3, [r3, #0]
   155e2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   155e4:	687b      	ldr	r3, [r7, #4]
   155e6:	799b      	ldrb	r3, [r3, #6]
   155e8:	2201      	movs	r2, #1
   155ea:	4053      	eors	r3, r2
   155ec:	b2db      	uxtb	r3, r3
   155ee:	2b00      	cmp	r3, #0
   155f0:	d001      	beq.n	155f6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   155f2:	231c      	movs	r3, #28
   155f4:	e05e      	b.n	156b4 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   155f6:	687b      	ldr	r3, [r7, #4]
   155f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   155fa:	b29b      	uxth	r3, r3
   155fc:	2b00      	cmp	r3, #0
   155fe:	d001      	beq.n	15604 <usart_read_wait+0x30>
		return STATUS_BUSY;
   15600:	2305      	movs	r3, #5
   15602:	e057      	b.n	156b4 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   15604:	68fb      	ldr	r3, [r7, #12]
   15606:	7e1b      	ldrb	r3, [r3, #24]
   15608:	b2db      	uxtb	r3, r3
   1560a:	001a      	movs	r2, r3
   1560c:	2304      	movs	r3, #4
   1560e:	4013      	ands	r3, r2
   15610:	d101      	bne.n	15616 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   15612:	2305      	movs	r3, #5
   15614:	e04e      	b.n	156b4 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15616:	687b      	ldr	r3, [r7, #4]
   15618:	0018      	movs	r0, r3
   1561a:	4b28      	ldr	r3, [pc, #160]	; (156bc <usart_read_wait+0xe8>)
   1561c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	8b5b      	ldrh	r3, [r3, #26]
   15622:	b29b      	uxth	r3, r3
   15624:	b2da      	uxtb	r2, r3
   15626:	230b      	movs	r3, #11
   15628:	18fb      	adds	r3, r7, r3
   1562a:	213f      	movs	r1, #63	; 0x3f
   1562c:	400a      	ands	r2, r1
   1562e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   15630:	230b      	movs	r3, #11
   15632:	18fb      	adds	r3, r7, r3
   15634:	781b      	ldrb	r3, [r3, #0]
   15636:	2b00      	cmp	r3, #0
   15638:	d036      	beq.n	156a8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   1563a:	230b      	movs	r3, #11
   1563c:	18fb      	adds	r3, r7, r3
   1563e:	781b      	ldrb	r3, [r3, #0]
   15640:	2202      	movs	r2, #2
   15642:	4013      	ands	r3, r2
   15644:	d004      	beq.n	15650 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	2202      	movs	r2, #2
   1564a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   1564c:	231a      	movs	r3, #26
   1564e:	e031      	b.n	156b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   15650:	230b      	movs	r3, #11
   15652:	18fb      	adds	r3, r7, r3
   15654:	781b      	ldrb	r3, [r3, #0]
   15656:	2204      	movs	r2, #4
   15658:	4013      	ands	r3, r2
   1565a:	d004      	beq.n	15666 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1565c:	68fb      	ldr	r3, [r7, #12]
   1565e:	2204      	movs	r2, #4
   15660:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   15662:	231e      	movs	r3, #30
   15664:	e026      	b.n	156b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   15666:	230b      	movs	r3, #11
   15668:	18fb      	adds	r3, r7, r3
   1566a:	781b      	ldrb	r3, [r3, #0]
   1566c:	2201      	movs	r2, #1
   1566e:	4013      	ands	r3, r2
   15670:	d004      	beq.n	1567c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   15672:	68fb      	ldr	r3, [r7, #12]
   15674:	2201      	movs	r2, #1
   15676:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   15678:	2313      	movs	r3, #19
   1567a:	e01b      	b.n	156b4 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   1567c:	230b      	movs	r3, #11
   1567e:	18fb      	adds	r3, r7, r3
   15680:	781b      	ldrb	r3, [r3, #0]
   15682:	2210      	movs	r2, #16
   15684:	4013      	ands	r3, r2
   15686:	d004      	beq.n	15692 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   15688:	68fb      	ldr	r3, [r7, #12]
   1568a:	2210      	movs	r2, #16
   1568c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   1568e:	2342      	movs	r3, #66	; 0x42
   15690:	e010      	b.n	156b4 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   15692:	230b      	movs	r3, #11
   15694:	18fb      	adds	r3, r7, r3
   15696:	781b      	ldrb	r3, [r3, #0]
   15698:	2220      	movs	r2, #32
   1569a:	4013      	ands	r3, r2
   1569c:	d004      	beq.n	156a8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1569e:	68fb      	ldr	r3, [r7, #12]
   156a0:	2220      	movs	r2, #32
   156a2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   156a4:	2341      	movs	r3, #65	; 0x41
   156a6:	e005      	b.n	156b4 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   156a8:	68fb      	ldr	r3, [r7, #12]
   156aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   156ac:	b29a      	uxth	r2, r3
   156ae:	683b      	ldr	r3, [r7, #0]
   156b0:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   156b2:	2300      	movs	r3, #0
}
   156b4:	0018      	movs	r0, r3
   156b6:	46bd      	mov	sp, r7
   156b8:	b004      	add	sp, #16
   156ba:	bd80      	pop	{r7, pc}
   156bc:	00014fd9 	.word	0x00014fd9

000156c0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   156c0:	b590      	push	{r4, r7, lr}
   156c2:	b089      	sub	sp, #36	; 0x24
   156c4:	af00      	add	r7, sp, #0
   156c6:	60f8      	str	r0, [r7, #12]
   156c8:	60b9      	str	r1, [r7, #8]
   156ca:	1dbb      	adds	r3, r7, #6
   156cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   156ce:	1dbb      	adds	r3, r7, #6
   156d0:	881b      	ldrh	r3, [r3, #0]
   156d2:	2b00      	cmp	r3, #0
   156d4:	d101      	bne.n	156da <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   156d6:	2317      	movs	r3, #23
   156d8:	e06d      	b.n	157b6 <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   156da:	68fb      	ldr	r3, [r7, #12]
   156dc:	799b      	ldrb	r3, [r3, #6]
   156de:	2201      	movs	r2, #1
   156e0:	4053      	eors	r3, r2
   156e2:	b2db      	uxtb	r3, r3
   156e4:	2b00      	cmp	r3, #0
   156e6:	d001      	beq.n	156ec <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   156e8:	231c      	movs	r3, #28
   156ea:	e064      	b.n	157b6 <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   156ec:	68fb      	ldr	r3, [r7, #12]
   156ee:	681b      	ldr	r3, [r3, #0]
   156f0:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
   156f2:	231e      	movs	r3, #30
   156f4:	18fb      	adds	r3, r7, r3
   156f6:	2200      	movs	r2, #0
   156f8:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
   156fa:	e054      	b.n	157a6 <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   156fc:	2300      	movs	r3, #0
   156fe:	61bb      	str	r3, [r7, #24]
   15700:	e00f      	b.n	15722 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
   15702:	697b      	ldr	r3, [r7, #20]
   15704:	7e1b      	ldrb	r3, [r3, #24]
   15706:	b2db      	uxtb	r3, r3
   15708:	001a      	movs	r2, r3
   1570a:	2304      	movs	r3, #4
   1570c:	4013      	ands	r3, r2
   1570e:	d10d      	bne.n	1572c <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
   15710:	69bb      	ldr	r3, [r7, #24]
   15712:	4a2b      	ldr	r2, [pc, #172]	; (157c0 <usart_read_buffer_wait+0x100>)
   15714:	4293      	cmp	r3, r2
   15716:	d101      	bne.n	1571c <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
   15718:	2312      	movs	r3, #18
   1571a:	e04c      	b.n	157b6 <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   1571c:	69bb      	ldr	r3, [r7, #24]
   1571e:	3301      	adds	r3, #1
   15720:	61bb      	str	r3, [r7, #24]
   15722:	69bb      	ldr	r3, [r7, #24]
   15724:	4a26      	ldr	r2, [pc, #152]	; (157c0 <usart_read_buffer_wait+0x100>)
   15726:	4293      	cmp	r3, r2
   15728:	d9eb      	bls.n	15702 <usart_read_buffer_wait+0x42>
   1572a:	e000      	b.n	1572e <usart_read_buffer_wait+0x6e>
				break;
   1572c:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
   1572e:	2310      	movs	r3, #16
   15730:	18fb      	adds	r3, r7, r3
   15732:	2200      	movs	r2, #0
   15734:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
   15736:	2313      	movs	r3, #19
   15738:	18fc      	adds	r4, r7, r3
   1573a:	2310      	movs	r3, #16
   1573c:	18fa      	adds	r2, r7, r3
   1573e:	68fb      	ldr	r3, [r7, #12]
   15740:	0011      	movs	r1, r2
   15742:	0018      	movs	r0, r3
   15744:	4b1f      	ldr	r3, [pc, #124]	; (157c4 <usart_read_buffer_wait+0x104>)
   15746:	4798      	blx	r3
   15748:	0003      	movs	r3, r0
   1574a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   1574c:	2313      	movs	r3, #19
   1574e:	18fb      	adds	r3, r7, r3
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	2b00      	cmp	r3, #0
   15754:	d003      	beq.n	1575e <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
   15756:	2313      	movs	r3, #19
   15758:	18fb      	adds	r3, r7, r3
   1575a:	781b      	ldrb	r3, [r3, #0]
   1575c:	e02b      	b.n	157b6 <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   1575e:	231e      	movs	r3, #30
   15760:	18fb      	adds	r3, r7, r3
   15762:	881b      	ldrh	r3, [r3, #0]
   15764:	221e      	movs	r2, #30
   15766:	18ba      	adds	r2, r7, r2
   15768:	1c59      	adds	r1, r3, #1
   1576a:	8011      	strh	r1, [r2, #0]
   1576c:	001a      	movs	r2, r3
   1576e:	68bb      	ldr	r3, [r7, #8]
   15770:	189b      	adds	r3, r3, r2
   15772:	2210      	movs	r2, #16
   15774:	18ba      	adds	r2, r7, r2
   15776:	8812      	ldrh	r2, [r2, #0]
   15778:	b2d2      	uxtb	r2, r2
   1577a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1577c:	68fb      	ldr	r3, [r7, #12]
   1577e:	795b      	ldrb	r3, [r3, #5]
   15780:	2b01      	cmp	r3, #1
   15782:	d110      	bne.n	157a6 <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
   15784:	231e      	movs	r3, #30
   15786:	18fb      	adds	r3, r7, r3
   15788:	881b      	ldrh	r3, [r3, #0]
   1578a:	221e      	movs	r2, #30
   1578c:	18ba      	adds	r2, r7, r2
   1578e:	1c59      	adds	r1, r3, #1
   15790:	8011      	strh	r1, [r2, #0]
   15792:	001a      	movs	r2, r3
   15794:	68bb      	ldr	r3, [r7, #8]
   15796:	189b      	adds	r3, r3, r2
   15798:	2210      	movs	r2, #16
   1579a:	18ba      	adds	r2, r7, r2
   1579c:	8812      	ldrh	r2, [r2, #0]
   1579e:	0a12      	lsrs	r2, r2, #8
   157a0:	b292      	uxth	r2, r2
   157a2:	b2d2      	uxtb	r2, r2
   157a4:	701a      	strb	r2, [r3, #0]
	while (length--) {
   157a6:	1dbb      	adds	r3, r7, #6
   157a8:	881b      	ldrh	r3, [r3, #0]
   157aa:	1dba      	adds	r2, r7, #6
   157ac:	1e59      	subs	r1, r3, #1
   157ae:	8011      	strh	r1, [r2, #0]
   157b0:	2b00      	cmp	r3, #0
   157b2:	d1a3      	bne.n	156fc <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
   157b4:	2300      	movs	r3, #0
}
   157b6:	0018      	movs	r0, r3
   157b8:	46bd      	mov	sp, r7
   157ba:	b009      	add	sp, #36	; 0x24
   157bc:	bd90      	pop	{r4, r7, pc}
   157be:	46c0      	nop			; (mov r8, r8)
   157c0:	0000ffff 	.word	0x0000ffff
   157c4:	000155d5 	.word	0x000155d5

000157c8 <usart_is_syncing>:
{
   157c8:	b580      	push	{r7, lr}
   157ca:	b084      	sub	sp, #16
   157cc:	af00      	add	r7, sp, #0
   157ce:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   157d0:	687b      	ldr	r3, [r7, #4]
   157d2:	681b      	ldr	r3, [r3, #0]
   157d4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   157d6:	68fb      	ldr	r3, [r7, #12]
   157d8:	69db      	ldr	r3, [r3, #28]
   157da:	1e5a      	subs	r2, r3, #1
   157dc:	4193      	sbcs	r3, r2
   157de:	b2db      	uxtb	r3, r3
}
   157e0:	0018      	movs	r0, r3
   157e2:	46bd      	mov	sp, r7
   157e4:	b004      	add	sp, #16
   157e6:	bd80      	pop	{r7, pc}

000157e8 <_usart_wait_for_sync>:
{
   157e8:	b580      	push	{r7, lr}
   157ea:	b082      	sub	sp, #8
   157ec:	af00      	add	r7, sp, #0
   157ee:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   157f0:	46c0      	nop			; (mov r8, r8)
   157f2:	687b      	ldr	r3, [r7, #4]
   157f4:	0018      	movs	r0, r3
   157f6:	4b04      	ldr	r3, [pc, #16]	; (15808 <_usart_wait_for_sync+0x20>)
   157f8:	4798      	blx	r3
   157fa:	1e03      	subs	r3, r0, #0
   157fc:	d1f9      	bne.n	157f2 <_usart_wait_for_sync+0xa>
}
   157fe:	46c0      	nop			; (mov r8, r8)
   15800:	46bd      	mov	sp, r7
   15802:	b002      	add	sp, #8
   15804:	bd80      	pop	{r7, pc}
   15806:	46c0      	nop			; (mov r8, r8)
   15808:	000157c9 	.word	0x000157c9

0001580c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1580c:	b580      	push	{r7, lr}
   1580e:	b088      	sub	sp, #32
   15810:	af00      	add	r7, sp, #0
   15812:	0002      	movs	r2, r0
   15814:	1dfb      	adds	r3, r7, #7
   15816:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   15818:	1dfb      	adds	r3, r7, #7
   1581a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   1581c:	4ba3      	ldr	r3, [pc, #652]	; (15aac <_usart_interrupt_handler+0x2a0>)
   1581e:	0092      	lsls	r2, r2, #2
   15820:	58d3      	ldr	r3, [r2, r3]
   15822:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   15824:	69bb      	ldr	r3, [r7, #24]
   15826:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   15828:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   1582a:	69bb      	ldr	r3, [r7, #24]
   1582c:	0018      	movs	r0, r3
   1582e:	4ba0      	ldr	r3, [pc, #640]	; (15ab0 <_usart_interrupt_handler+0x2a4>)
   15830:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   15832:	697b      	ldr	r3, [r7, #20]
   15834:	7e1b      	ldrb	r3, [r3, #24]
   15836:	b2da      	uxtb	r2, r3
   15838:	2312      	movs	r3, #18
   1583a:	18fb      	adds	r3, r7, r3
   1583c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1583e:	697b      	ldr	r3, [r7, #20]
   15840:	7d9b      	ldrb	r3, [r3, #22]
   15842:	b2db      	uxtb	r3, r3
   15844:	b29a      	uxth	r2, r3
   15846:	2312      	movs	r3, #18
   15848:	18fb      	adds	r3, r7, r3
   1584a:	2112      	movs	r1, #18
   1584c:	1879      	adds	r1, r7, r1
   1584e:	8809      	ldrh	r1, [r1, #0]
   15850:	400a      	ands	r2, r1
   15852:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   15854:	69bb      	ldr	r3, [r7, #24]
   15856:	2230      	movs	r2, #48	; 0x30
   15858:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1585a:	69ba      	ldr	r2, [r7, #24]
   1585c:	2131      	movs	r1, #49	; 0x31
   1585e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   15860:	4013      	ands	r3, r2
   15862:	b2da      	uxtb	r2, r3
   15864:	2310      	movs	r3, #16
   15866:	18fb      	adds	r3, r7, r3
   15868:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1586a:	2312      	movs	r3, #18
   1586c:	18fb      	adds	r3, r7, r3
   1586e:	881b      	ldrh	r3, [r3, #0]
   15870:	2201      	movs	r2, #1
   15872:	4013      	ands	r3, r2
   15874:	d044      	beq.n	15900 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   15876:	69bb      	ldr	r3, [r7, #24]
   15878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1587a:	b29b      	uxth	r3, r3
   1587c:	2b00      	cmp	r3, #0
   1587e:	d03c      	beq.n	158fa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   15880:	69bb      	ldr	r3, [r7, #24]
   15882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15884:	781b      	ldrb	r3, [r3, #0]
   15886:	b2da      	uxtb	r2, r3
   15888:	231c      	movs	r3, #28
   1588a:	18fb      	adds	r3, r7, r3
   1588c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1588e:	69bb      	ldr	r3, [r7, #24]
   15890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15892:	1c5a      	adds	r2, r3, #1
   15894:	69bb      	ldr	r3, [r7, #24]
   15896:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   15898:	69bb      	ldr	r3, [r7, #24]
   1589a:	795b      	ldrb	r3, [r3, #5]
   1589c:	2b01      	cmp	r3, #1
   1589e:	d113      	bne.n	158c8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   158a0:	69bb      	ldr	r3, [r7, #24]
   158a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	b2db      	uxtb	r3, r3
   158a8:	021b      	lsls	r3, r3, #8
   158aa:	b21a      	sxth	r2, r3
   158ac:	231c      	movs	r3, #28
   158ae:	18fb      	adds	r3, r7, r3
   158b0:	2100      	movs	r1, #0
   158b2:	5e5b      	ldrsh	r3, [r3, r1]
   158b4:	4313      	orrs	r3, r2
   158b6:	b21a      	sxth	r2, r3
   158b8:	231c      	movs	r3, #28
   158ba:	18fb      	adds	r3, r7, r3
   158bc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   158be:	69bb      	ldr	r3, [r7, #24]
   158c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   158c2:	1c5a      	adds	r2, r3, #1
   158c4:	69bb      	ldr	r3, [r7, #24]
   158c6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   158c8:	231c      	movs	r3, #28
   158ca:	18fb      	adds	r3, r7, r3
   158cc:	881b      	ldrh	r3, [r3, #0]
   158ce:	05db      	lsls	r3, r3, #23
   158d0:	0ddb      	lsrs	r3, r3, #23
   158d2:	b29a      	uxth	r2, r3
   158d4:	697b      	ldr	r3, [r7, #20]
   158d6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   158d8:	69bb      	ldr	r3, [r7, #24]
   158da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   158dc:	b29b      	uxth	r3, r3
   158de:	3b01      	subs	r3, #1
   158e0:	b29b      	uxth	r3, r3
   158e2:	69ba      	ldr	r2, [r7, #24]
   158e4:	1c19      	adds	r1, r3, #0
   158e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   158e8:	2b00      	cmp	r3, #0
   158ea:	d109      	bne.n	15900 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   158ec:	697b      	ldr	r3, [r7, #20]
   158ee:	2201      	movs	r2, #1
   158f0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   158f2:	697b      	ldr	r3, [r7, #20]
   158f4:	2202      	movs	r2, #2
   158f6:	759a      	strb	r2, [r3, #22]
   158f8:	e002      	b.n	15900 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   158fa:	697b      	ldr	r3, [r7, #20]
   158fc:	2201      	movs	r2, #1
   158fe:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   15900:	2312      	movs	r3, #18
   15902:	18fb      	adds	r3, r7, r3
   15904:	881b      	ldrh	r3, [r3, #0]
   15906:	2202      	movs	r2, #2
   15908:	4013      	ands	r3, r2
   1590a:	d011      	beq.n	15930 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1590c:	697b      	ldr	r3, [r7, #20]
   1590e:	2202      	movs	r2, #2
   15910:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   15912:	69bb      	ldr	r3, [r7, #24]
   15914:	2233      	movs	r2, #51	; 0x33
   15916:	2100      	movs	r1, #0
   15918:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1591a:	2310      	movs	r3, #16
   1591c:	18fb      	adds	r3, r7, r3
   1591e:	881b      	ldrh	r3, [r3, #0]
   15920:	2201      	movs	r2, #1
   15922:	4013      	ands	r3, r2
   15924:	d004      	beq.n	15930 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   15926:	69bb      	ldr	r3, [r7, #24]
   15928:	68db      	ldr	r3, [r3, #12]
   1592a:	69ba      	ldr	r2, [r7, #24]
   1592c:	0010      	movs	r0, r2
   1592e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   15930:	2312      	movs	r3, #18
   15932:	18fb      	adds	r3, r7, r3
   15934:	881b      	ldrh	r3, [r3, #0]
   15936:	2204      	movs	r2, #4
   15938:	4013      	ands	r3, r2
   1593a:	d100      	bne.n	1593e <_usart_interrupt_handler+0x132>
   1593c:	e0bd      	b.n	15aba <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1593e:	69bb      	ldr	r3, [r7, #24]
   15940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15942:	b29b      	uxth	r3, r3
   15944:	2b00      	cmp	r3, #0
   15946:	d100      	bne.n	1594a <_usart_interrupt_handler+0x13e>
   15948:	e0b4      	b.n	15ab4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1594a:	697b      	ldr	r3, [r7, #20]
   1594c:	8b5b      	ldrh	r3, [r3, #26]
   1594e:	b29b      	uxth	r3, r3
   15950:	b2da      	uxtb	r2, r3
   15952:	231f      	movs	r3, #31
   15954:	18fb      	adds	r3, r7, r3
   15956:	213f      	movs	r1, #63	; 0x3f
   15958:	400a      	ands	r2, r1
   1595a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1595c:	231f      	movs	r3, #31
   1595e:	18fb      	adds	r3, r7, r3
   15960:	781b      	ldrb	r3, [r3, #0]
   15962:	2208      	movs	r2, #8
   15964:	4013      	ands	r3, r2
   15966:	d007      	beq.n	15978 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   15968:	231f      	movs	r3, #31
   1596a:	18fb      	adds	r3, r7, r3
   1596c:	221f      	movs	r2, #31
   1596e:	18ba      	adds	r2, r7, r2
   15970:	7812      	ldrb	r2, [r2, #0]
   15972:	2108      	movs	r1, #8
   15974:	438a      	bics	r2, r1
   15976:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   15978:	231f      	movs	r3, #31
   1597a:	18fb      	adds	r3, r7, r3
   1597c:	781b      	ldrb	r3, [r3, #0]
   1597e:	2b00      	cmp	r3, #0
   15980:	d050      	beq.n	15a24 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   15982:	231f      	movs	r3, #31
   15984:	18fb      	adds	r3, r7, r3
   15986:	781b      	ldrb	r3, [r3, #0]
   15988:	2202      	movs	r2, #2
   1598a:	4013      	ands	r3, r2
   1598c:	d007      	beq.n	1599e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1598e:	69bb      	ldr	r3, [r7, #24]
   15990:	2232      	movs	r2, #50	; 0x32
   15992:	211a      	movs	r1, #26
   15994:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   15996:	697b      	ldr	r3, [r7, #20]
   15998:	2202      	movs	r2, #2
   1599a:	835a      	strh	r2, [r3, #26]
   1599c:	e036      	b.n	15a0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1599e:	231f      	movs	r3, #31
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	2204      	movs	r2, #4
   159a6:	4013      	ands	r3, r2
   159a8:	d007      	beq.n	159ba <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   159aa:	69bb      	ldr	r3, [r7, #24]
   159ac:	2232      	movs	r2, #50	; 0x32
   159ae:	211e      	movs	r1, #30
   159b0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   159b2:	697b      	ldr	r3, [r7, #20]
   159b4:	2204      	movs	r2, #4
   159b6:	835a      	strh	r2, [r3, #26]
   159b8:	e028      	b.n	15a0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   159ba:	231f      	movs	r3, #31
   159bc:	18fb      	adds	r3, r7, r3
   159be:	781b      	ldrb	r3, [r3, #0]
   159c0:	2201      	movs	r2, #1
   159c2:	4013      	ands	r3, r2
   159c4:	d007      	beq.n	159d6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   159c6:	69bb      	ldr	r3, [r7, #24]
   159c8:	2232      	movs	r2, #50	; 0x32
   159ca:	2113      	movs	r1, #19
   159cc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   159ce:	697b      	ldr	r3, [r7, #20]
   159d0:	2201      	movs	r2, #1
   159d2:	835a      	strh	r2, [r3, #26]
   159d4:	e01a      	b.n	15a0c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   159d6:	231f      	movs	r3, #31
   159d8:	18fb      	adds	r3, r7, r3
   159da:	781b      	ldrb	r3, [r3, #0]
   159dc:	2210      	movs	r2, #16
   159de:	4013      	ands	r3, r2
   159e0:	d007      	beq.n	159f2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   159e2:	69bb      	ldr	r3, [r7, #24]
   159e4:	2232      	movs	r2, #50	; 0x32
   159e6:	2142      	movs	r1, #66	; 0x42
   159e8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   159ea:	697b      	ldr	r3, [r7, #20]
   159ec:	2210      	movs	r2, #16
   159ee:	835a      	strh	r2, [r3, #26]
   159f0:	e00c      	b.n	15a0c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   159f2:	231f      	movs	r3, #31
   159f4:	18fb      	adds	r3, r7, r3
   159f6:	781b      	ldrb	r3, [r3, #0]
   159f8:	2220      	movs	r2, #32
   159fa:	4013      	ands	r3, r2
   159fc:	d006      	beq.n	15a0c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   159fe:	69bb      	ldr	r3, [r7, #24]
   15a00:	2232      	movs	r2, #50	; 0x32
   15a02:	2141      	movs	r1, #65	; 0x41
   15a04:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   15a06:	697b      	ldr	r3, [r7, #20]
   15a08:	2220      	movs	r2, #32
   15a0a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   15a0c:	2310      	movs	r3, #16
   15a0e:	18fb      	adds	r3, r7, r3
   15a10:	881b      	ldrh	r3, [r3, #0]
   15a12:	2204      	movs	r2, #4
   15a14:	4013      	ands	r3, r2
				if (callback_status
   15a16:	d050      	beq.n	15aba <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   15a18:	69bb      	ldr	r3, [r7, #24]
   15a1a:	695b      	ldr	r3, [r3, #20]
   15a1c:	69ba      	ldr	r2, [r7, #24]
   15a1e:	0010      	movs	r0, r2
   15a20:	4798      	blx	r3
   15a22:	e04a      	b.n	15aba <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   15a24:	697b      	ldr	r3, [r7, #20]
   15a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   15a28:	b29a      	uxth	r2, r3
   15a2a:	230e      	movs	r3, #14
   15a2c:	18fb      	adds	r3, r7, r3
   15a2e:	05d2      	lsls	r2, r2, #23
   15a30:	0dd2      	lsrs	r2, r2, #23
   15a32:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   15a34:	69bb      	ldr	r3, [r7, #24]
   15a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a38:	220e      	movs	r2, #14
   15a3a:	18ba      	adds	r2, r7, r2
   15a3c:	8812      	ldrh	r2, [r2, #0]
   15a3e:	b2d2      	uxtb	r2, r2
   15a40:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   15a42:	69bb      	ldr	r3, [r7, #24]
   15a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a46:	1c5a      	adds	r2, r3, #1
   15a48:	69bb      	ldr	r3, [r7, #24]
   15a4a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   15a4c:	69bb      	ldr	r3, [r7, #24]
   15a4e:	795b      	ldrb	r3, [r3, #5]
   15a50:	2b01      	cmp	r3, #1
   15a52:	d10d      	bne.n	15a70 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   15a54:	69bb      	ldr	r3, [r7, #24]
   15a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a58:	220e      	movs	r2, #14
   15a5a:	18ba      	adds	r2, r7, r2
   15a5c:	8812      	ldrh	r2, [r2, #0]
   15a5e:	0a12      	lsrs	r2, r2, #8
   15a60:	b292      	uxth	r2, r2
   15a62:	b2d2      	uxtb	r2, r2
   15a64:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   15a66:	69bb      	ldr	r3, [r7, #24]
   15a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a6a:	1c5a      	adds	r2, r3, #1
   15a6c:	69bb      	ldr	r3, [r7, #24]
   15a6e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   15a70:	69bb      	ldr	r3, [r7, #24]
   15a72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15a74:	b29b      	uxth	r3, r3
   15a76:	3b01      	subs	r3, #1
   15a78:	b29b      	uxth	r3, r3
   15a7a:	69ba      	ldr	r2, [r7, #24]
   15a7c:	1c19      	adds	r1, r3, #0
   15a7e:	8591      	strh	r1, [r2, #44]	; 0x2c
   15a80:	2b00      	cmp	r3, #0
   15a82:	d11a      	bne.n	15aba <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   15a84:	697b      	ldr	r3, [r7, #20]
   15a86:	2204      	movs	r2, #4
   15a88:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   15a8a:	69bb      	ldr	r3, [r7, #24]
   15a8c:	2232      	movs	r2, #50	; 0x32
   15a8e:	2100      	movs	r1, #0
   15a90:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   15a92:	2310      	movs	r3, #16
   15a94:	18fb      	adds	r3, r7, r3
   15a96:	881b      	ldrh	r3, [r3, #0]
   15a98:	2202      	movs	r2, #2
   15a9a:	4013      	ands	r3, r2
					if (callback_status
   15a9c:	d00d      	beq.n	15aba <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   15a9e:	69bb      	ldr	r3, [r7, #24]
   15aa0:	691b      	ldr	r3, [r3, #16]
   15aa2:	69ba      	ldr	r2, [r7, #24]
   15aa4:	0010      	movs	r0, r2
   15aa6:	4798      	blx	r3
   15aa8:	e007      	b.n	15aba <_usart_interrupt_handler+0x2ae>
   15aaa:	46c0      	nop			; (mov r8, r8)
   15aac:	200024c8 	.word	0x200024c8
   15ab0:	000157e9 	.word	0x000157e9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   15ab4:	697b      	ldr	r3, [r7, #20]
   15ab6:	2204      	movs	r2, #4
   15ab8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   15aba:	2312      	movs	r3, #18
   15abc:	18fb      	adds	r3, r7, r3
   15abe:	881b      	ldrh	r3, [r3, #0]
   15ac0:	2210      	movs	r2, #16
   15ac2:	4013      	ands	r3, r2
   15ac4:	d010      	beq.n	15ae8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   15ac6:	697b      	ldr	r3, [r7, #20]
   15ac8:	2210      	movs	r2, #16
   15aca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   15acc:	697b      	ldr	r3, [r7, #20]
   15ace:	2210      	movs	r2, #16
   15ad0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   15ad2:	2310      	movs	r3, #16
   15ad4:	18fb      	adds	r3, r7, r3
   15ad6:	881b      	ldrh	r3, [r3, #0]
   15ad8:	2210      	movs	r2, #16
   15ada:	4013      	ands	r3, r2
   15adc:	d004      	beq.n	15ae8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   15ade:	69bb      	ldr	r3, [r7, #24]
   15ae0:	69db      	ldr	r3, [r3, #28]
   15ae2:	69ba      	ldr	r2, [r7, #24]
   15ae4:	0010      	movs	r0, r2
   15ae6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   15ae8:	2312      	movs	r3, #18
   15aea:	18fb      	adds	r3, r7, r3
   15aec:	881b      	ldrh	r3, [r3, #0]
   15aee:	2220      	movs	r2, #32
   15af0:	4013      	ands	r3, r2
   15af2:	d010      	beq.n	15b16 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   15af4:	697b      	ldr	r3, [r7, #20]
   15af6:	2220      	movs	r2, #32
   15af8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   15afa:	697b      	ldr	r3, [r7, #20]
   15afc:	2220      	movs	r2, #32
   15afe:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   15b00:	2310      	movs	r3, #16
   15b02:	18fb      	adds	r3, r7, r3
   15b04:	881b      	ldrh	r3, [r3, #0]
   15b06:	2208      	movs	r2, #8
   15b08:	4013      	ands	r3, r2
   15b0a:	d004      	beq.n	15b16 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   15b0c:	69bb      	ldr	r3, [r7, #24]
   15b0e:	699b      	ldr	r3, [r3, #24]
   15b10:	69ba      	ldr	r2, [r7, #24]
   15b12:	0010      	movs	r0, r2
   15b14:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   15b16:	2312      	movs	r3, #18
   15b18:	18fb      	adds	r3, r7, r3
   15b1a:	881b      	ldrh	r3, [r3, #0]
   15b1c:	2208      	movs	r2, #8
   15b1e:	4013      	ands	r3, r2
   15b20:	d010      	beq.n	15b44 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   15b22:	697b      	ldr	r3, [r7, #20]
   15b24:	2208      	movs	r2, #8
   15b26:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   15b28:	697b      	ldr	r3, [r7, #20]
   15b2a:	2208      	movs	r2, #8
   15b2c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   15b2e:	2310      	movs	r3, #16
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	881b      	ldrh	r3, [r3, #0]
   15b34:	2220      	movs	r2, #32
   15b36:	4013      	ands	r3, r2
   15b38:	d004      	beq.n	15b44 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   15b3a:	69bb      	ldr	r3, [r7, #24]
   15b3c:	6a1b      	ldr	r3, [r3, #32]
   15b3e:	69ba      	ldr	r2, [r7, #24]
   15b40:	0010      	movs	r0, r2
   15b42:	4798      	blx	r3
		}
	}
#endif
}
   15b44:	46c0      	nop			; (mov r8, r8)
   15b46:	46bd      	mov	sp, r7
   15b48:	b008      	add	sp, #32
   15b4a:	bd80      	pop	{r7, pc}

00015b4c <system_gclk_gen_get_config_defaults>:
{
   15b4c:	b580      	push	{r7, lr}
   15b4e:	b082      	sub	sp, #8
   15b50:	af00      	add	r7, sp, #0
   15b52:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   15b54:	687b      	ldr	r3, [r7, #4]
   15b56:	2201      	movs	r2, #1
   15b58:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   15b5a:	687b      	ldr	r3, [r7, #4]
   15b5c:	2200      	movs	r2, #0
   15b5e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
   15b60:	687b      	ldr	r3, [r7, #4]
   15b62:	2206      	movs	r2, #6
   15b64:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   15b66:	687b      	ldr	r3, [r7, #4]
   15b68:	2200      	movs	r2, #0
   15b6a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   15b6c:	687b      	ldr	r3, [r7, #4]
   15b6e:	2200      	movs	r2, #0
   15b70:	725a      	strb	r2, [r3, #9]
}
   15b72:	46c0      	nop			; (mov r8, r8)
   15b74:	46bd      	mov	sp, r7
   15b76:	b002      	add	sp, #8
   15b78:	bd80      	pop	{r7, pc}

00015b7a <system_gclk_chan_get_config_defaults>:
{
   15b7a:	b580      	push	{r7, lr}
   15b7c:	b082      	sub	sp, #8
   15b7e:	af00      	add	r7, sp, #0
   15b80:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15b82:	687b      	ldr	r3, [r7, #4]
   15b84:	2200      	movs	r2, #0
   15b86:	701a      	strb	r2, [r3, #0]
}
   15b88:	46c0      	nop			; (mov r8, r8)
   15b8a:	46bd      	mov	sp, r7
   15b8c:	b002      	add	sp, #8
   15b8e:	bd80      	pop	{r7, pc}

00015b90 <system_clock_source_xosc32k_get_config_defaults>:
{
   15b90:	b580      	push	{r7, lr}
   15b92:	b082      	sub	sp, #8
   15b94:	af00      	add	r7, sp, #0
   15b96:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   15b98:	687b      	ldr	r3, [r7, #4]
   15b9a:	2200      	movs	r2, #0
   15b9c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   15b9e:	687b      	ldr	r3, [r7, #4]
   15ba0:	2202      	movs	r2, #2
   15ba2:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
   15ba4:	687b      	ldr	r3, [r7, #4]
   15ba6:	2280      	movs	r2, #128	; 0x80
   15ba8:	0212      	lsls	r2, r2, #8
   15baa:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
   15bac:	687b      	ldr	r3, [r7, #4]
   15bae:	2200      	movs	r2, #0
   15bb0:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
   15bb2:	687b      	ldr	r3, [r7, #4]
   15bb4:	2201      	movs	r2, #1
   15bb6:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
   15bb8:	687b      	ldr	r3, [r7, #4]
   15bba:	2200      	movs	r2, #0
   15bbc:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
   15bbe:	687b      	ldr	r3, [r7, #4]
   15bc0:	2201      	movs	r2, #1
   15bc2:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
   15bc4:	687b      	ldr	r3, [r7, #4]
   15bc6:	2200      	movs	r2, #0
   15bc8:	729a      	strb	r2, [r3, #10]
}
   15bca:	46c0      	nop			; (mov r8, r8)
   15bcc:	46bd      	mov	sp, r7
   15bce:	b002      	add	sp, #8
   15bd0:	bd80      	pop	{r7, pc}

00015bd2 <system_clock_source_osc16m_get_config_defaults>:
{
   15bd2:	b580      	push	{r7, lr}
   15bd4:	b082      	sub	sp, #8
   15bd6:	af00      	add	r7, sp, #0
   15bd8:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
   15bda:	687b      	ldr	r3, [r7, #4]
   15bdc:	2200      	movs	r2, #0
   15bde:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   15be0:	687b      	ldr	r3, [r7, #4]
   15be2:	2200      	movs	r2, #0
   15be4:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   15be6:	687b      	ldr	r3, [r7, #4]
   15be8:	2201      	movs	r2, #1
   15bea:	709a      	strb	r2, [r3, #2]
}
   15bec:	46c0      	nop			; (mov r8, r8)
   15bee:	46bd      	mov	sp, r7
   15bf0:	b002      	add	sp, #8
   15bf2:	bd80      	pop	{r7, pc}

00015bf4 <system_clock_source_dfll_get_config_defaults>:
{
   15bf4:	b580      	push	{r7, lr}
   15bf6:	b082      	sub	sp, #8
   15bf8:	af00      	add	r7, sp, #0
   15bfa:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   15bfc:	687b      	ldr	r3, [r7, #4]
   15bfe:	2200      	movs	r2, #0
   15c00:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   15c02:	687b      	ldr	r3, [r7, #4]
   15c04:	2200      	movs	r2, #0
   15c06:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   15c08:	687b      	ldr	r3, [r7, #4]
   15c0a:	2200      	movs	r2, #0
   15c0c:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   15c0e:	687b      	ldr	r3, [r7, #4]
   15c10:	2200      	movs	r2, #0
   15c12:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   15c14:	687b      	ldr	r3, [r7, #4]
   15c16:	2200      	movs	r2, #0
   15c18:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
   15c1a:	687b      	ldr	r3, [r7, #4]
   15c1c:	2201      	movs	r2, #1
   15c1e:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	2200      	movs	r2, #0
   15c24:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   15c26:	687b      	ldr	r3, [r7, #4]
   15c28:	2207      	movs	r2, #7
   15c2a:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
   15c2c:	687b      	ldr	r3, [r7, #4]
   15c2e:	223f      	movs	r2, #63	; 0x3f
   15c30:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
   15c32:	687b      	ldr	r3, [r7, #4]
   15c34:	2201      	movs	r2, #1
   15c36:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
   15c38:	687b      	ldr	r3, [r7, #4]
   15c3a:	2201      	movs	r2, #1
   15c3c:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
   15c3e:	687b      	ldr	r3, [r7, #4]
   15c40:	220c      	movs	r2, #12
   15c42:	825a      	strh	r2, [r3, #18]
}
   15c44:	46c0      	nop			; (mov r8, r8)
   15c46:	46bd      	mov	sp, r7
   15c48:	b002      	add	sp, #8
   15c4a:	bd80      	pop	{r7, pc}

00015c4c <system_main_clock_set_failure_detect>:
{
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b082      	sub	sp, #8
   15c50:	af00      	add	r7, sp, #0
   15c52:	0002      	movs	r2, r0
   15c54:	1dfb      	adds	r3, r7, #7
   15c56:	701a      	strb	r2, [r3, #0]
}
   15c58:	46c0      	nop			; (mov r8, r8)
   15c5a:	46bd      	mov	sp, r7
   15c5c:	b002      	add	sp, #8
   15c5e:	bd80      	pop	{r7, pc}

00015c60 <system_cpu_clock_set_divider>:
{
   15c60:	b580      	push	{r7, lr}
   15c62:	b082      	sub	sp, #8
   15c64:	af00      	add	r7, sp, #0
   15c66:	0002      	movs	r2, r0
   15c68:	1dfb      	adds	r3, r7, #7
   15c6a:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
   15c6c:	4a05      	ldr	r2, [pc, #20]	; (15c84 <system_cpu_clock_set_divider+0x24>)
   15c6e:	1dfb      	adds	r3, r7, #7
   15c70:	781b      	ldrb	r3, [r3, #0]
   15c72:	2101      	movs	r1, #1
   15c74:	4099      	lsls	r1, r3
   15c76:	000b      	movs	r3, r1
   15c78:	b2db      	uxtb	r3, r3
   15c7a:	7113      	strb	r3, [r2, #4]
}
   15c7c:	46c0      	nop			; (mov r8, r8)
   15c7e:	46bd      	mov	sp, r7
   15c80:	b002      	add	sp, #8
   15c82:	bd80      	pop	{r7, pc}
   15c84:	40000400 	.word	0x40000400

00015c88 <system_low_power_clock_set_divider>:
{
   15c88:	b580      	push	{r7, lr}
   15c8a:	b082      	sub	sp, #8
   15c8c:	af00      	add	r7, sp, #0
   15c8e:	0002      	movs	r2, r0
   15c90:	1dfb      	adds	r3, r7, #7
   15c92:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
   15c94:	4a05      	ldr	r2, [pc, #20]	; (15cac <system_low_power_clock_set_divider+0x24>)
   15c96:	1dfb      	adds	r3, r7, #7
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	2101      	movs	r1, #1
   15c9c:	4099      	lsls	r1, r3
   15c9e:	000b      	movs	r3, r1
   15ca0:	b2db      	uxtb	r3, r3
   15ca2:	7153      	strb	r3, [r2, #5]
}
   15ca4:	46c0      	nop			; (mov r8, r8)
   15ca6:	46bd      	mov	sp, r7
   15ca8:	b002      	add	sp, #8
   15caa:	bd80      	pop	{r7, pc}
   15cac:	40000400 	.word	0x40000400

00015cb0 <system_backup_clock_set_divider>:
{
   15cb0:	b580      	push	{r7, lr}
   15cb2:	b082      	sub	sp, #8
   15cb4:	af00      	add	r7, sp, #0
   15cb6:	0002      	movs	r2, r0
   15cb8:	1dfb      	adds	r3, r7, #7
   15cba:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
   15cbc:	4a05      	ldr	r2, [pc, #20]	; (15cd4 <system_backup_clock_set_divider+0x24>)
   15cbe:	1dfb      	adds	r3, r7, #7
   15cc0:	781b      	ldrb	r3, [r3, #0]
   15cc2:	2101      	movs	r1, #1
   15cc4:	4099      	lsls	r1, r3
   15cc6:	000b      	movs	r3, r1
   15cc8:	b2db      	uxtb	r3, r3
   15cca:	7193      	strb	r3, [r2, #6]
}
   15ccc:	46c0      	nop			; (mov r8, r8)
   15cce:	46bd      	mov	sp, r7
   15cd0:	b002      	add	sp, #8
   15cd2:	bd80      	pop	{r7, pc}
   15cd4:	40000400 	.word	0x40000400

00015cd8 <system_cpu_clock_get_hz>:
{
   15cd8:	b580      	push	{r7, lr}
   15cda:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   15cdc:	2000      	movs	r0, #0
   15cde:	4b07      	ldr	r3, [pc, #28]	; (15cfc <system_cpu_clock_get_hz+0x24>)
   15ce0:	4798      	blx	r3
   15ce2:	0002      	movs	r2, r0
   15ce4:	4b06      	ldr	r3, [pc, #24]	; (15d00 <system_cpu_clock_get_hz+0x28>)
   15ce6:	791b      	ldrb	r3, [r3, #4]
   15ce8:	b2db      	uxtb	r3, r3
   15cea:	0019      	movs	r1, r3
   15cec:	4b05      	ldr	r3, [pc, #20]	; (15d04 <system_cpu_clock_get_hz+0x2c>)
   15cee:	0010      	movs	r0, r2
   15cf0:	4798      	blx	r3
   15cf2:	0003      	movs	r3, r0
}
   15cf4:	0018      	movs	r0, r3
   15cf6:	46bd      	mov	sp, r7
   15cf8:	bd80      	pop	{r7, pc}
   15cfa:	46c0      	nop			; (mov r8, r8)
   15cfc:	00016919 	.word	0x00016919
   15d00:	40000400 	.word	0x40000400
   15d04:	00019ae9 	.word	0x00019ae9

00015d08 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   15d08:	b580      	push	{r7, lr}
   15d0a:	b082      	sub	sp, #8
   15d0c:	af00      	add	r7, sp, #0
   15d0e:	0002      	movs	r2, r0
   15d10:	1dfb      	adds	r3, r7, #7
   15d12:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   15d14:	4a08      	ldr	r2, [pc, #32]	; (15d38 <system_flash_set_waitstates+0x30>)
   15d16:	1dfb      	adds	r3, r7, #7
   15d18:	781b      	ldrb	r3, [r3, #0]
   15d1a:	210f      	movs	r1, #15
   15d1c:	400b      	ands	r3, r1
   15d1e:	b2d9      	uxtb	r1, r3
   15d20:	6853      	ldr	r3, [r2, #4]
   15d22:	200f      	movs	r0, #15
   15d24:	4001      	ands	r1, r0
   15d26:	0049      	lsls	r1, r1, #1
   15d28:	201e      	movs	r0, #30
   15d2a:	4383      	bics	r3, r0
   15d2c:	430b      	orrs	r3, r1
   15d2e:	6053      	str	r3, [r2, #4]
}
   15d30:	46c0      	nop			; (mov r8, r8)
   15d32:	46bd      	mov	sp, r7
   15d34:	b002      	add	sp, #8
   15d36:	bd80      	pop	{r7, pc}
   15d38:	41004000 	.word	0x41004000

00015d3c <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
   15d3c:	b580      	push	{r7, lr}
   15d3e:	b082      	sub	sp, #8
   15d40:	af00      	add	r7, sp, #0
   15d42:	0002      	movs	r2, r0
   15d44:	1dfb      	adds	r3, r7, #7
   15d46:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
   15d48:	2380      	movs	r3, #128	; 0x80
   15d4a:	05db      	lsls	r3, r3, #23
   15d4c:	789b      	ldrb	r3, [r3, #2]
   15d4e:	b2db      	uxtb	r3, r3
   15d50:	1dfa      	adds	r2, r7, #7
   15d52:	7812      	ldrb	r2, [r2, #0]
   15d54:	429a      	cmp	r2, r3
   15d56:	d101      	bne.n	15d5c <system_switch_performance_level+0x20>
		return STATUS_OK;
   15d58:	2300      	movs	r3, #0
   15d5a:	e010      	b.n	15d7e <system_switch_performance_level+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
   15d5c:	2380      	movs	r3, #128	; 0x80
   15d5e:	05db      	lsls	r3, r3, #23
   15d60:	2201      	movs	r2, #1
   15d62:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
   15d64:	2380      	movs	r3, #128	; 0x80
   15d66:	05db      	lsls	r3, r3, #23
   15d68:	1dfa      	adds	r2, r7, #7
   15d6a:	7812      	ldrb	r2, [r2, #0]
   15d6c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
   15d6e:	46c0      	nop			; (mov r8, r8)
   15d70:	2380      	movs	r3, #128	; 0x80
   15d72:	05db      	lsls	r3, r3, #23
   15d74:	799b      	ldrb	r3, [r3, #6]
   15d76:	b2db      	uxtb	r3, r3
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d0f9      	beq.n	15d70 <system_switch_performance_level+0x34>
		;
	}
	return STATUS_OK;
   15d7c:	2300      	movs	r3, #0
}
   15d7e:	0018      	movs	r0, r3
   15d80:	46bd      	mov	sp, r7
   15d82:	b002      	add	sp, #8
   15d84:	bd80      	pop	{r7, pc}
	...

00015d88 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   15d88:	b580      	push	{r7, lr}
   15d8a:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
   15d8c:	46c0      	nop			; (mov r8, r8)
   15d8e:	4b04      	ldr	r3, [pc, #16]	; (15da0 <_system_dfll_wait_for_sync+0x18>)
   15d90:	68da      	ldr	r2, [r3, #12]
   15d92:	2380      	movs	r3, #128	; 0x80
   15d94:	005b      	lsls	r3, r3, #1
   15d96:	4013      	ands	r3, r2
   15d98:	d0f9      	beq.n	15d8e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   15d9a:	46c0      	nop			; (mov r8, r8)
   15d9c:	46bd      	mov	sp, r7
   15d9e:	bd80      	pop	{r7, pc}
   15da0:	40000c00 	.word	0x40000c00

00015da4 <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
   15da4:	b580      	push	{r7, lr}
   15da6:	b084      	sub	sp, #16
   15da8:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
   15daa:	1d3b      	adds	r3, r7, #4
   15dac:	0018      	movs	r0, r3
   15dae:	4b22      	ldr	r3, [pc, #136]	; (15e38 <_system_clock_source_osc16m_freq_sel+0x94>)
   15db0:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
   15db2:	1d3b      	adds	r3, r7, #4
   15db4:	2203      	movs	r2, #3
   15db6:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
   15db8:	1d3b      	adds	r3, r7, #4
   15dba:	0019      	movs	r1, r3
   15dbc:	2000      	movs	r0, #0
   15dbe:	4b1f      	ldr	r3, [pc, #124]	; (15e3c <_system_clock_source_osc16m_freq_sel+0x98>)
   15dc0:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
   15dc2:	2006      	movs	r0, #6
   15dc4:	4b1e      	ldr	r3, [pc, #120]	; (15e40 <_system_clock_source_osc16m_freq_sel+0x9c>)
   15dc6:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
   15dc8:	003b      	movs	r3, r7
   15dca:	0018      	movs	r0, r3
   15dcc:	4b1d      	ldr	r3, [pc, #116]	; (15e44 <_system_clock_source_osc16m_freq_sel+0xa0>)
   15dce:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
   15dd0:	003b      	movs	r3, r7
   15dd2:	2201      	movs	r2, #1
   15dd4:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
   15dd6:	003b      	movs	r3, r7
   15dd8:	2200      	movs	r2, #0
   15dda:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
   15ddc:	003b      	movs	r3, r7
   15dde:	2200      	movs	r2, #0
   15de0:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
   15de2:	003b      	movs	r3, r7
   15de4:	0018      	movs	r0, r3
   15de6:	4b18      	ldr	r3, [pc, #96]	; (15e48 <_system_clock_source_osc16m_freq_sel+0xa4>)
   15de8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
   15dea:	2006      	movs	r0, #6
   15dec:	4b17      	ldr	r3, [pc, #92]	; (15e4c <_system_clock_source_osc16m_freq_sel+0xa8>)
   15dee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
   15df0:	46c0      	nop			; (mov r8, r8)
   15df2:	2006      	movs	r0, #6
   15df4:	4b16      	ldr	r3, [pc, #88]	; (15e50 <_system_clock_source_osc16m_freq_sel+0xac>)
   15df6:	4798      	blx	r3
   15df8:	0003      	movs	r3, r0
   15dfa:	001a      	movs	r2, r3
   15dfc:	2301      	movs	r3, #1
   15dfe:	4053      	eors	r3, r2
   15e00:	b2db      	uxtb	r3, r3
   15e02:	2b00      	cmp	r3, #0
   15e04:	d1f5      	bne.n	15df2 <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
   15e06:	1d3b      	adds	r3, r7, #4
   15e08:	0018      	movs	r0, r3
   15e0a:	4b0b      	ldr	r3, [pc, #44]	; (15e38 <_system_clock_source_osc16m_freq_sel+0x94>)
   15e0c:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
   15e0e:	1d3b      	adds	r3, r7, #4
   15e10:	2206      	movs	r2, #6
   15e12:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
   15e14:	1d3b      	adds	r3, r7, #4
   15e16:	0019      	movs	r1, r3
   15e18:	2000      	movs	r0, #0
   15e1a:	4b08      	ldr	r3, [pc, #32]	; (15e3c <_system_clock_source_osc16m_freq_sel+0x98>)
   15e1c:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
   15e1e:	490d      	ldr	r1, [pc, #52]	; (15e54 <_system_clock_source_osc16m_freq_sel+0xb0>)
   15e20:	4b0c      	ldr	r3, [pc, #48]	; (15e54 <_system_clock_source_osc16m_freq_sel+0xb0>)
   15e22:	7d1b      	ldrb	r3, [r3, #20]
   15e24:	b2db      	uxtb	r3, r3
   15e26:	2280      	movs	r2, #128	; 0x80
   15e28:	4252      	negs	r2, r2
   15e2a:	4313      	orrs	r3, r2
   15e2c:	b2db      	uxtb	r3, r3
   15e2e:	750b      	strb	r3, [r1, #20]
	}
}
   15e30:	46c0      	nop			; (mov r8, r8)
   15e32:	46bd      	mov	sp, r7
   15e34:	b004      	add	sp, #16
   15e36:	bd80      	pop	{r7, pc}
   15e38:	00015b4d 	.word	0x00015b4d
   15e3c:	000167ad 	.word	0x000167ad
   15e40:	00016271 	.word	0x00016271
   15e44:	00015bd3 	.word	0x00015bd3
   15e48:	00015f5d 	.word	0x00015f5d
   15e4c:	000161b1 	.word	0x000161b1
   15e50:	0001631d 	.word	0x0001631d
   15e54:	40000c00 	.word	0x40000c00

00015e58 <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   15e58:	b580      	push	{r7, lr}
   15e5a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
   15e5c:	4b0c      	ldr	r3, [pc, #48]	; (15e90 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15e5e:	2202      	movs	r2, #2
   15e60:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   15e62:	4b0c      	ldr	r3, [pc, #48]	; (15e94 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   15e64:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   15e66:	4a0a      	ldr	r2, [pc, #40]	; (15e90 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15e68:	4b0b      	ldr	r3, [pc, #44]	; (15e98 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15e6a:	689b      	ldr	r3, [r3, #8]
   15e6c:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15e6e:	4a08      	ldr	r2, [pc, #32]	; (15e90 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15e70:	4b09      	ldr	r3, [pc, #36]	; (15e98 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15e72:	685b      	ldr	r3, [r3, #4]
   15e74:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
   15e76:	4b06      	ldr	r3, [pc, #24]	; (15e90 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15e78:	2200      	movs	r2, #0
   15e7a:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
   15e7c:	4b05      	ldr	r3, [pc, #20]	; (15e94 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   15e7e:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   15e80:	4a03      	ldr	r2, [pc, #12]	; (15e90 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15e82:	4b05      	ldr	r3, [pc, #20]	; (15e98 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15e84:	681b      	ldr	r3, [r3, #0]
   15e86:	b29b      	uxth	r3, r3
   15e88:	8313      	strh	r3, [r2, #24]
}
   15e8a:	46c0      	nop			; (mov r8, r8)
   15e8c:	46bd      	mov	sp, r7
   15e8e:	bd80      	pop	{r7, pc}
   15e90:	40000c00 	.word	0x40000c00
   15e94:	00015d89 	.word	0x00015d89
   15e98:	200016b8 	.word	0x200016b8

00015e9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   15e9c:	b580      	push	{r7, lr}
   15e9e:	b082      	sub	sp, #8
   15ea0:	af00      	add	r7, sp, #0
   15ea2:	0002      	movs	r2, r0
   15ea4:	1dfb      	adds	r3, r7, #7
   15ea6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   15ea8:	1dfb      	adds	r3, r7, #7
   15eaa:	781b      	ldrb	r3, [r3, #0]
   15eac:	2b08      	cmp	r3, #8
   15eae:	d842      	bhi.n	15f36 <system_clock_source_get_hz+0x9a>
   15eb0:	009a      	lsls	r2, r3, #2
   15eb2:	4b23      	ldr	r3, [pc, #140]	; (15f40 <system_clock_source_get_hz+0xa4>)
   15eb4:	18d3      	adds	r3, r2, r3
   15eb6:	681b      	ldr	r3, [r3, #0]
   15eb8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   15eba:	4b22      	ldr	r3, [pc, #136]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15ebc:	691b      	ldr	r3, [r3, #16]
   15ebe:	e03b      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
   15ec0:	4b21      	ldr	r3, [pc, #132]	; (15f48 <system_clock_source_get_hz+0xac>)
   15ec2:	7d1b      	ldrb	r3, [r3, #20]
   15ec4:	071b      	lsls	r3, r3, #28
   15ec6:	0f9b      	lsrs	r3, r3, #30
   15ec8:	b2db      	uxtb	r3, r3
   15eca:	3301      	adds	r3, #1
   15ecc:	001a      	movs	r2, r3
   15ece:	4b1f      	ldr	r3, [pc, #124]	; (15f4c <system_clock_source_get_hz+0xb0>)
   15ed0:	4353      	muls	r3, r2
   15ed2:	e031      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   15ed4:	2380      	movs	r3, #128	; 0x80
   15ed6:	021b      	lsls	r3, r3, #8
   15ed8:	e02e      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   15eda:	2380      	movs	r3, #128	; 0x80
   15edc:	021b      	lsls	r3, r3, #8
   15ede:	e02b      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   15ee0:	4b18      	ldr	r3, [pc, #96]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15ee2:	695b      	ldr	r3, [r3, #20]
   15ee4:	e028      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
   15ee6:	4b17      	ldr	r3, [pc, #92]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15ee8:	681b      	ldr	r3, [r3, #0]
   15eea:	2202      	movs	r2, #2
   15eec:	4013      	ands	r3, r2
   15eee:	d101      	bne.n	15ef4 <system_clock_source_get_hz+0x58>
			return 0;
   15ef0:	2300      	movs	r3, #0
   15ef2:	e021      	b.n	15f38 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   15ef4:	4b16      	ldr	r3, [pc, #88]	; (15f50 <system_clock_source_get_hz+0xb4>)
   15ef6:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   15ef8:	4b12      	ldr	r3, [pc, #72]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15efa:	681b      	ldr	r3, [r3, #0]
   15efc:	2224      	movs	r2, #36	; 0x24
   15efe:	4013      	ands	r3, r2
   15f00:	2b04      	cmp	r3, #4
   15f02:	d109      	bne.n	15f18 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   15f04:	2000      	movs	r0, #0
   15f06:	4b13      	ldr	r3, [pc, #76]	; (15f54 <system_clock_source_get_hz+0xb8>)
   15f08:	4798      	blx	r3
   15f0a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   15f0c:	4b0d      	ldr	r3, [pc, #52]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15f0e:	689b      	ldr	r3, [r3, #8]
   15f10:	041b      	lsls	r3, r3, #16
   15f12:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
   15f14:	4353      	muls	r3, r2
   15f16:	e00f      	b.n	15f38 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
   15f18:	4b0f      	ldr	r3, [pc, #60]	; (15f58 <system_clock_source_get_hz+0xbc>)
   15f1a:	e00d      	b.n	15f38 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
   15f1c:	4a0a      	ldr	r2, [pc, #40]	; (15f48 <system_clock_source_get_hz+0xac>)
   15f1e:	2328      	movs	r3, #40	; 0x28
   15f20:	5cd3      	ldrb	r3, [r2, r3]
   15f22:	b2db      	uxtb	r3, r3
   15f24:	001a      	movs	r2, r3
   15f26:	2302      	movs	r3, #2
   15f28:	4013      	ands	r3, r2
   15f2a:	d101      	bne.n	15f30 <system_clock_source_get_hz+0x94>
			return 0;
   15f2c:	2300      	movs	r3, #0
   15f2e:	e003      	b.n	15f38 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
   15f30:	4b04      	ldr	r3, [pc, #16]	; (15f44 <system_clock_source_get_hz+0xa8>)
   15f32:	68db      	ldr	r3, [r3, #12]
   15f34:	e000      	b.n	15f38 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
   15f36:	2300      	movs	r3, #0
	}
}
   15f38:	0018      	movs	r0, r3
   15f3a:	46bd      	mov	sp, r7
   15f3c:	b002      	add	sp, #8
   15f3e:	bd80      	pop	{r7, pc}
   15f40:	0001ea64 	.word	0x0001ea64
   15f44:	200016b8 	.word	0x200016b8
   15f48:	40000c00 	.word	0x40000c00
   15f4c:	003d0900 	.word	0x003d0900
   15f50:	00015d89 	.word	0x00015d89
   15f54:	00016ac9 	.word	0x00016ac9
   15f58:	02dc6c00 	.word	0x02dc6c00

00015f5c <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b084      	sub	sp, #16
   15f60:	af00      	add	r7, sp, #0
   15f62:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
   15f64:	4a1c      	ldr	r2, [pc, #112]	; (15fd8 <system_clock_source_osc16m_set_config+0x7c>)
   15f66:	230c      	movs	r3, #12
   15f68:	18fb      	adds	r3, r7, r3
   15f6a:	7d12      	ldrb	r2, [r2, #20]
   15f6c:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
   15f6e:	687b      	ldr	r3, [r7, #4]
   15f70:	781b      	ldrb	r3, [r3, #0]
   15f72:	1c1a      	adds	r2, r3, #0
   15f74:	2303      	movs	r3, #3
   15f76:	4013      	ands	r3, r2
   15f78:	b2da      	uxtb	r2, r3
   15f7a:	230c      	movs	r3, #12
   15f7c:	18fb      	adds	r3, r7, r3
   15f7e:	2103      	movs	r1, #3
   15f80:	400a      	ands	r2, r1
   15f82:	0090      	lsls	r0, r2, #2
   15f84:	781a      	ldrb	r2, [r3, #0]
   15f86:	210c      	movs	r1, #12
   15f88:	438a      	bics	r2, r1
   15f8a:	1c11      	adds	r1, r2, #0
   15f8c:	1c02      	adds	r2, r0, #0
   15f8e:	430a      	orrs	r2, r1
   15f90:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   15f92:	687b      	ldr	r3, [r7, #4]
   15f94:	789a      	ldrb	r2, [r3, #2]
   15f96:	230c      	movs	r3, #12
   15f98:	18fb      	adds	r3, r7, r3
   15f9a:	01d0      	lsls	r0, r2, #7
   15f9c:	781a      	ldrb	r2, [r3, #0]
   15f9e:	217f      	movs	r1, #127	; 0x7f
   15fa0:	400a      	ands	r2, r1
   15fa2:	1c11      	adds	r1, r2, #0
   15fa4:	1c02      	adds	r2, r0, #0
   15fa6:	430a      	orrs	r2, r1
   15fa8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   15faa:	687b      	ldr	r3, [r7, #4]
   15fac:	785a      	ldrb	r2, [r3, #1]
   15fae:	230c      	movs	r3, #12
   15fb0:	18fb      	adds	r3, r7, r3
   15fb2:	2101      	movs	r1, #1
   15fb4:	400a      	ands	r2, r1
   15fb6:	0190      	lsls	r0, r2, #6
   15fb8:	781a      	ldrb	r2, [r3, #0]
   15fba:	2140      	movs	r1, #64	; 0x40
   15fbc:	438a      	bics	r2, r1
   15fbe:	1c11      	adds	r1, r2, #0
   15fc0:	1c02      	adds	r2, r0, #0
   15fc2:	430a      	orrs	r2, r1
   15fc4:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
   15fc6:	4a04      	ldr	r2, [pc, #16]	; (15fd8 <system_clock_source_osc16m_set_config+0x7c>)
   15fc8:	230c      	movs	r3, #12
   15fca:	18fb      	adds	r3, r7, r3
   15fcc:	781b      	ldrb	r3, [r3, #0]
   15fce:	7513      	strb	r3, [r2, #20]
}
   15fd0:	46c0      	nop			; (mov r8, r8)
   15fd2:	46bd      	mov	sp, r7
   15fd4:	b004      	add	sp, #16
   15fd6:	bd80      	pop	{r7, pc}
   15fd8:	40000c00 	.word	0x40000c00

00015fdc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   15fdc:	b580      	push	{r7, lr}
   15fde:	b084      	sub	sp, #16
   15fe0:	af00      	add	r7, sp, #0
   15fe2:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
   15fe4:	4b3a      	ldr	r3, [pc, #232]	; (160d0 <system_clock_source_xosc32k_set_config+0xf4>)
   15fe6:	695b      	ldr	r3, [r3, #20]
   15fe8:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
   15fea:	687b      	ldr	r3, [r7, #4]
   15fec:	785b      	ldrb	r3, [r3, #1]
   15fee:	1c1a      	adds	r2, r3, #0
   15ff0:	2307      	movs	r3, #7
   15ff2:	4013      	ands	r3, r2
   15ff4:	b2da      	uxtb	r2, r3
   15ff6:	230d      	movs	r3, #13
   15ff8:	18fb      	adds	r3, r7, r3
   15ffa:	2107      	movs	r1, #7
   15ffc:	400a      	ands	r2, r1
   15ffe:	0010      	movs	r0, r2
   16000:	781a      	ldrb	r2, [r3, #0]
   16002:	2107      	movs	r1, #7
   16004:	438a      	bics	r2, r1
   16006:	1c11      	adds	r1, r2, #0
   16008:	1c02      	adds	r2, r0, #0
   1600a:	430a      	orrs	r2, r1
   1600c:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1600e:	687b      	ldr	r3, [r7, #4]
   16010:	781b      	ldrb	r3, [r3, #0]
   16012:	2b00      	cmp	r3, #0
   16014:	d106      	bne.n	16024 <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
   16016:	230c      	movs	r3, #12
   16018:	18fb      	adds	r3, r7, r3
   1601a:	781a      	ldrb	r2, [r3, #0]
   1601c:	2104      	movs	r1, #4
   1601e:	430a      	orrs	r2, r1
   16020:	701a      	strb	r2, [r3, #0]
   16022:	e005      	b.n	16030 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
   16024:	230c      	movs	r3, #12
   16026:	18fb      	adds	r3, r7, r3
   16028:	781a      	ldrb	r2, [r3, #0]
   1602a:	2104      	movs	r1, #4
   1602c:	438a      	bics	r2, r1
   1602e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	789a      	ldrb	r2, [r3, #2]
   16034:	230c      	movs	r3, #12
   16036:	18fb      	adds	r3, r7, r3
   16038:	2101      	movs	r1, #1
   1603a:	400a      	ands	r2, r1
   1603c:	0110      	lsls	r0, r2, #4
   1603e:	781a      	ldrb	r2, [r3, #0]
   16040:	2110      	movs	r1, #16
   16042:	438a      	bics	r2, r1
   16044:	1c11      	adds	r1, r2, #0
   16046:	1c02      	adds	r2, r0, #0
   16048:	430a      	orrs	r2, r1
   1604a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   1604c:	687b      	ldr	r3, [r7, #4]
   1604e:	78da      	ldrb	r2, [r3, #3]
   16050:	230c      	movs	r3, #12
   16052:	18fb      	adds	r3, r7, r3
   16054:	2101      	movs	r1, #1
   16056:	400a      	ands	r2, r1
   16058:	00d0      	lsls	r0, r2, #3
   1605a:	781a      	ldrb	r2, [r3, #0]
   1605c:	2108      	movs	r1, #8
   1605e:	438a      	bics	r2, r1
   16060:	1c11      	adds	r1, r2, #0
   16062:	1c02      	adds	r2, r0, #0
   16064:	430a      	orrs	r2, r1
   16066:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   16068:	687b      	ldr	r3, [r7, #4]
   1606a:	7a5a      	ldrb	r2, [r3, #9]
   1606c:	230c      	movs	r3, #12
   1606e:	18fb      	adds	r3, r7, r3
   16070:	01d0      	lsls	r0, r2, #7
   16072:	781a      	ldrb	r2, [r3, #0]
   16074:	217f      	movs	r1, #127	; 0x7f
   16076:	400a      	ands	r2, r1
   16078:	1c11      	adds	r1, r2, #0
   1607a:	1c02      	adds	r2, r0, #0
   1607c:	430a      	orrs	r2, r1
   1607e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   16080:	687b      	ldr	r3, [r7, #4]
   16082:	7a1a      	ldrb	r2, [r3, #8]
   16084:	230c      	movs	r3, #12
   16086:	18fb      	adds	r3, r7, r3
   16088:	2101      	movs	r1, #1
   1608a:	400a      	ands	r2, r1
   1608c:	0190      	lsls	r0, r2, #6
   1608e:	781a      	ldrb	r2, [r3, #0]
   16090:	2140      	movs	r1, #64	; 0x40
   16092:	438a      	bics	r2, r1
   16094:	1c11      	adds	r1, r2, #0
   16096:	1c02      	adds	r2, r0, #0
   16098:	430a      	orrs	r2, r1
   1609a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   1609c:	687b      	ldr	r3, [r7, #4]
   1609e:	7a9a      	ldrb	r2, [r3, #10]
   160a0:	230d      	movs	r3, #13
   160a2:	18fb      	adds	r3, r7, r3
   160a4:	2101      	movs	r1, #1
   160a6:	400a      	ands	r2, r1
   160a8:	0110      	lsls	r0, r2, #4
   160aa:	781a      	ldrb	r2, [r3, #0]
   160ac:	2110      	movs	r1, #16
   160ae:	438a      	bics	r2, r1
   160b0:	1c11      	adds	r1, r2, #0
   160b2:	1c02      	adds	r2, r0, #0
   160b4:	430a      	orrs	r2, r1
   160b6:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   160b8:	687b      	ldr	r3, [r7, #4]
   160ba:	685a      	ldr	r2, [r3, #4]
   160bc:	4b05      	ldr	r3, [pc, #20]	; (160d4 <system_clock_source_xosc32k_set_config+0xf8>)
   160be:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
   160c0:	4b03      	ldr	r3, [pc, #12]	; (160d0 <system_clock_source_xosc32k_set_config+0xf4>)
   160c2:	68fa      	ldr	r2, [r7, #12]
   160c4:	615a      	str	r2, [r3, #20]
}
   160c6:	46c0      	nop			; (mov r8, r8)
   160c8:	46bd      	mov	sp, r7
   160ca:	b004      	add	sp, #16
   160cc:	bd80      	pop	{r7, pc}
   160ce:	46c0      	nop			; (mov r8, r8)
   160d0:	40001000 	.word	0x40001000
   160d4:	200016b8 	.word	0x200016b8

000160d8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   160d8:	b580      	push	{r7, lr}
   160da:	b082      	sub	sp, #8
   160dc:	af00      	add	r7, sp, #0
   160de:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   160e0:	687b      	ldr	r3, [r7, #4]
   160e2:	7a9b      	ldrb	r3, [r3, #10]
   160e4:	029b      	lsls	r3, r3, #10
   160e6:	041b      	lsls	r3, r3, #16
   160e8:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
   160ea:	687b      	ldr	r3, [r7, #4]
   160ec:	899b      	ldrh	r3, [r3, #12]
   160ee:	059b      	lsls	r3, r3, #22
   160f0:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
   160f2:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   160f4:	4b2c      	ldr	r3, [pc, #176]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   160f6:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   160f8:	687b      	ldr	r3, [r7, #4]
   160fa:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
   160fc:	687b      	ldr	r3, [r7, #4]
   160fe:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
   16100:	4313      	orrs	r3, r2
   16102:	b2db      	uxtb	r3, r3
   16104:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   16106:	687b      	ldr	r3, [r7, #4]
   16108:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
   1610a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   1610c:	687a      	ldr	r2, [r7, #4]
   1610e:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
   16110:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   16112:	687b      	ldr	r3, [r7, #4]
   16114:	785b      	ldrb	r3, [r3, #1]
   16116:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   16118:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
   1611a:	687b      	ldr	r3, [r7, #4]
   1611c:	789b      	ldrb	r3, [r3, #2]
   1611e:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
   16120:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   16122:	4b21      	ldr	r3, [pc, #132]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   16124:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   16126:	687b      	ldr	r3, [r7, #4]
   16128:	781b      	ldrb	r3, [r3, #0]
   1612a:	2b04      	cmp	r3, #4
   1612c:	d116      	bne.n	1615c <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1612e:	687b      	ldr	r3, [r7, #4]
   16130:	7b9b      	ldrb	r3, [r3, #14]
   16132:	069b      	lsls	r3, r3, #26
   16134:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   16136:	687b      	ldr	r3, [r7, #4]
   16138:	8a1b      	ldrh	r3, [r3, #16]
   1613a:	041b      	lsls	r3, r3, #16
   1613c:	0019      	movs	r1, r3
   1613e:	4b1b      	ldr	r3, [pc, #108]	; (161ac <system_clock_source_dfll_set_config+0xd4>)
   16140:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   16142:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   16144:	687a      	ldr	r2, [r7, #4]
   16146:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   16148:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   1614a:	4b17      	ldr	r3, [pc, #92]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   1614c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   1614e:	4b16      	ldr	r3, [pc, #88]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	687a      	ldr	r2, [r7, #4]
   16154:	7812      	ldrb	r2, [r2, #0]
   16156:	431a      	orrs	r2, r3
   16158:	4b13      	ldr	r3, [pc, #76]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   1615a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   1615c:	687b      	ldr	r3, [r7, #4]
   1615e:	781b      	ldrb	r3, [r3, #0]
   16160:	2b20      	cmp	r3, #32
   16162:	d11c      	bne.n	1619e <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   16164:	687b      	ldr	r3, [r7, #4]
   16166:	7b9b      	ldrb	r3, [r3, #14]
   16168:	069b      	lsls	r3, r3, #26
   1616a:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1616c:	687b      	ldr	r3, [r7, #4]
   1616e:	8a1b      	ldrh	r3, [r3, #16]
   16170:	041b      	lsls	r3, r3, #16
   16172:	0019      	movs	r1, r3
   16174:	4b0d      	ldr	r3, [pc, #52]	; (161ac <system_clock_source_dfll_set_config+0xd4>)
   16176:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   16178:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
   1617a:	687a      	ldr	r2, [r7, #4]
   1617c:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1617e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   16180:	4b09      	ldr	r3, [pc, #36]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   16182:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   16184:	4b08      	ldr	r3, [pc, #32]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   16186:	681b      	ldr	r3, [r3, #0]
   16188:	687a      	ldr	r2, [r7, #4]
   1618a:	7812      	ldrb	r2, [r2, #0]
   1618c:	2104      	movs	r1, #4
   1618e:	430a      	orrs	r2, r1
   16190:	b2d2      	uxtb	r2, r2
   16192:	4313      	orrs	r3, r2
   16194:	2280      	movs	r2, #128	; 0x80
   16196:	00d2      	lsls	r2, r2, #3
   16198:	431a      	orrs	r2, r3
   1619a:	4b03      	ldr	r3, [pc, #12]	; (161a8 <system_clock_source_dfll_set_config+0xd0>)
   1619c:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
   1619e:	46c0      	nop			; (mov r8, r8)
   161a0:	46bd      	mov	sp, r7
   161a2:	b002      	add	sp, #8
   161a4:	bd80      	pop	{r7, pc}
   161a6:	46c0      	nop			; (mov r8, r8)
   161a8:	200016b8 	.word	0x200016b8
   161ac:	03ff0000 	.word	0x03ff0000

000161b0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   161b0:	b580      	push	{r7, lr}
   161b2:	b082      	sub	sp, #8
   161b4:	af00      	add	r7, sp, #0
   161b6:	0002      	movs	r2, r0
   161b8:	1dfb      	adds	r3, r7, #7
   161ba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   161bc:	1dfb      	adds	r3, r7, #7
   161be:	781b      	ldrb	r3, [r3, #0]
   161c0:	2b08      	cmp	r3, #8
   161c2:	d844      	bhi.n	1624e <system_clock_source_enable+0x9e>
   161c4:	009a      	lsls	r2, r3, #2
   161c6:	4b25      	ldr	r3, [pc, #148]	; (1625c <system_clock_source_enable+0xac>)
   161c8:	18d3      	adds	r3, r2, r3
   161ca:	681b      	ldr	r3, [r3, #0]
   161cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
   161ce:	4a24      	ldr	r2, [pc, #144]	; (16260 <system_clock_source_enable+0xb0>)
   161d0:	4b23      	ldr	r3, [pc, #140]	; (16260 <system_clock_source_enable+0xb0>)
   161d2:	7d1b      	ldrb	r3, [r3, #20]
   161d4:	b2db      	uxtb	r3, r3
   161d6:	2102      	movs	r1, #2
   161d8:	430b      	orrs	r3, r1
   161da:	b2db      	uxtb	r3, r3
   161dc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
   161de:	2300      	movs	r3, #0
   161e0:	e038      	b.n	16254 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
   161e2:	4b20      	ldr	r3, [pc, #128]	; (16264 <system_clock_source_enable+0xb4>)
   161e4:	4a1f      	ldr	r2, [pc, #124]	; (16264 <system_clock_source_enable+0xb4>)
   161e6:	6992      	ldr	r2, [r2, #24]
   161e8:	2102      	movs	r1, #2
   161ea:	430a      	orrs	r2, r1
   161ec:	619a      	str	r2, [r3, #24]
		break;
   161ee:	e030      	b.n	16252 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
   161f0:	4a1b      	ldr	r2, [pc, #108]	; (16260 <system_clock_source_enable+0xb0>)
   161f2:	4b1b      	ldr	r3, [pc, #108]	; (16260 <system_clock_source_enable+0xb0>)
   161f4:	8a1b      	ldrh	r3, [r3, #16]
   161f6:	b29b      	uxth	r3, r3
   161f8:	2102      	movs	r1, #2
   161fa:	430b      	orrs	r3, r1
   161fc:	b29b      	uxth	r3, r3
   161fe:	8213      	strh	r3, [r2, #16]
		break;
   16200:	e027      	b.n	16252 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
   16202:	4b18      	ldr	r3, [pc, #96]	; (16264 <system_clock_source_enable+0xb4>)
   16204:	4a17      	ldr	r2, [pc, #92]	; (16264 <system_clock_source_enable+0xb4>)
   16206:	6952      	ldr	r2, [r2, #20]
   16208:	2102      	movs	r1, #2
   1620a:	430a      	orrs	r2, r1
   1620c:	615a      	str	r2, [r3, #20]
		break;
   1620e:	e020      	b.n	16252 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
   16210:	4b15      	ldr	r3, [pc, #84]	; (16268 <system_clock_source_enable+0xb8>)
   16212:	681b      	ldr	r3, [r3, #0]
   16214:	2202      	movs	r2, #2
   16216:	431a      	orrs	r2, r3
   16218:	4b13      	ldr	r3, [pc, #76]	; (16268 <system_clock_source_enable+0xb8>)
   1621a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   1621c:	4b13      	ldr	r3, [pc, #76]	; (1626c <system_clock_source_enable+0xbc>)
   1621e:	4798      	blx	r3
		break;
   16220:	e017      	b.n	16252 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
   16222:	4a0f      	ldr	r2, [pc, #60]	; (16260 <system_clock_source_enable+0xb0>)
   16224:	490e      	ldr	r1, [pc, #56]	; (16260 <system_clock_source_enable+0xb0>)
   16226:	2328      	movs	r3, #40	; 0x28
   16228:	5ccb      	ldrb	r3, [r1, r3]
   1622a:	b2db      	uxtb	r3, r3
   1622c:	2102      	movs	r1, #2
   1622e:	430b      	orrs	r3, r1
   16230:	b2d9      	uxtb	r1, r3
   16232:	2328      	movs	r3, #40	; 0x28
   16234:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
   16236:	46c0      	nop			; (mov r8, r8)
   16238:	4a09      	ldr	r2, [pc, #36]	; (16260 <system_clock_source_enable+0xb0>)
   1623a:	2338      	movs	r3, #56	; 0x38
   1623c:	5cd3      	ldrb	r3, [r2, r3]
   1623e:	b2db      	uxtb	r3, r3
   16240:	001a      	movs	r2, r3
   16242:	2302      	movs	r3, #2
   16244:	4013      	ands	r3, r2
   16246:	d1f7      	bne.n	16238 <system_clock_source_enable+0x88>
		}
		break;
   16248:	e003      	b.n	16252 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   1624a:	2300      	movs	r3, #0
   1624c:	e002      	b.n	16254 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1624e:	2317      	movs	r3, #23
   16250:	e000      	b.n	16254 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
   16252:	2300      	movs	r3, #0
}
   16254:	0018      	movs	r0, r3
   16256:	46bd      	mov	sp, r7
   16258:	b002      	add	sp, #8
   1625a:	bd80      	pop	{r7, pc}
   1625c:	0001ea88 	.word	0x0001ea88
   16260:	40000c00 	.word	0x40000c00
   16264:	40001000 	.word	0x40001000
   16268:	200016b8 	.word	0x200016b8
   1626c:	00015e59 	.word	0x00015e59

00016270 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
   16270:	b580      	push	{r7, lr}
   16272:	b082      	sub	sp, #8
   16274:	af00      	add	r7, sp, #0
   16276:	0002      	movs	r2, r0
   16278:	1dfb      	adds	r3, r7, #7
   1627a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1627c:	1dfb      	adds	r3, r7, #7
   1627e:	781b      	ldrb	r3, [r3, #0]
   16280:	2b08      	cmp	r3, #8
   16282:	d83c      	bhi.n	162fe <system_clock_source_disable+0x8e>
   16284:	009a      	lsls	r2, r3, #2
   16286:	4b21      	ldr	r3, [pc, #132]	; (1630c <system_clock_source_disable+0x9c>)
   16288:	18d3      	adds	r3, r2, r3
   1628a:	681b      	ldr	r3, [r3, #0]
   1628c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
   1628e:	4a20      	ldr	r2, [pc, #128]	; (16310 <system_clock_source_disable+0xa0>)
   16290:	4b1f      	ldr	r3, [pc, #124]	; (16310 <system_clock_source_disable+0xa0>)
   16292:	7d1b      	ldrb	r3, [r3, #20]
   16294:	b2db      	uxtb	r3, r3
   16296:	2102      	movs	r1, #2
   16298:	438b      	bics	r3, r1
   1629a:	b2db      	uxtb	r3, r3
   1629c:	7513      	strb	r3, [r2, #20]
		break;
   1629e:	e030      	b.n	16302 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
   162a0:	4b1c      	ldr	r3, [pc, #112]	; (16314 <system_clock_source_disable+0xa4>)
   162a2:	4a1c      	ldr	r2, [pc, #112]	; (16314 <system_clock_source_disable+0xa4>)
   162a4:	6992      	ldr	r2, [r2, #24]
   162a6:	2102      	movs	r1, #2
   162a8:	438a      	bics	r2, r1
   162aa:	619a      	str	r2, [r3, #24]
		break;
   162ac:	e029      	b.n	16302 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
   162ae:	4a18      	ldr	r2, [pc, #96]	; (16310 <system_clock_source_disable+0xa0>)
   162b0:	4b17      	ldr	r3, [pc, #92]	; (16310 <system_clock_source_disable+0xa0>)
   162b2:	8a1b      	ldrh	r3, [r3, #16]
   162b4:	b29b      	uxth	r3, r3
   162b6:	2102      	movs	r1, #2
   162b8:	438b      	bics	r3, r1
   162ba:	b29b      	uxth	r3, r3
   162bc:	8213      	strh	r3, [r2, #16]
		break;
   162be:	e020      	b.n	16302 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
   162c0:	4b14      	ldr	r3, [pc, #80]	; (16314 <system_clock_source_disable+0xa4>)
   162c2:	4a14      	ldr	r2, [pc, #80]	; (16314 <system_clock_source_disable+0xa4>)
   162c4:	6952      	ldr	r2, [r2, #20]
   162c6:	2102      	movs	r1, #2
   162c8:	438a      	bics	r2, r1
   162ca:	615a      	str	r2, [r3, #20]
		break;
   162cc:	e019      	b.n	16302 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
   162ce:	4b12      	ldr	r3, [pc, #72]	; (16318 <system_clock_source_disable+0xa8>)
   162d0:	681b      	ldr	r3, [r3, #0]
   162d2:	2202      	movs	r2, #2
   162d4:	4393      	bics	r3, r2
   162d6:	001a      	movs	r2, r3
   162d8:	4b0f      	ldr	r3, [pc, #60]	; (16318 <system_clock_source_disable+0xa8>)
   162da:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   162dc:	4a0c      	ldr	r2, [pc, #48]	; (16310 <system_clock_source_disable+0xa0>)
   162de:	4b0e      	ldr	r3, [pc, #56]	; (16318 <system_clock_source_disable+0xa8>)
   162e0:	681b      	ldr	r3, [r3, #0]
   162e2:	b29b      	uxth	r3, r3
   162e4:	8313      	strh	r3, [r2, #24]
		break;
   162e6:	e00c      	b.n	16302 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
   162e8:	4a09      	ldr	r2, [pc, #36]	; (16310 <system_clock_source_disable+0xa0>)
   162ea:	4909      	ldr	r1, [pc, #36]	; (16310 <system_clock_source_disable+0xa0>)
   162ec:	2328      	movs	r3, #40	; 0x28
   162ee:	5ccb      	ldrb	r3, [r1, r3]
   162f0:	b2db      	uxtb	r3, r3
   162f2:	2102      	movs	r1, #2
   162f4:	438b      	bics	r3, r1
   162f6:	b2d9      	uxtb	r1, r3
   162f8:	2328      	movs	r3, #40	; 0x28
   162fa:	54d1      	strb	r1, [r2, r3]
		break;
   162fc:	e001      	b.n	16302 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   162fe:	2317      	movs	r3, #23
   16300:	e000      	b.n	16304 <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
   16302:	2300      	movs	r3, #0
}
   16304:	0018      	movs	r0, r3
   16306:	46bd      	mov	sp, r7
   16308:	b002      	add	sp, #8
   1630a:	bd80      	pop	{r7, pc}
   1630c:	0001eaac 	.word	0x0001eaac
   16310:	40000c00 	.word	0x40000c00
   16314:	40001000 	.word	0x40001000
   16318:	200016b8 	.word	0x200016b8

0001631c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   1631c:	b580      	push	{r7, lr}
   1631e:	b084      	sub	sp, #16
   16320:	af00      	add	r7, sp, #0
   16322:	0002      	movs	r2, r0
   16324:	1dfb      	adds	r3, r7, #7
   16326:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   16328:	2300      	movs	r3, #0
   1632a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   1632c:	1dfb      	adds	r3, r7, #7
   1632e:	781b      	ldrb	r3, [r3, #0]
   16330:	2b08      	cmp	r3, #8
   16332:	d84f      	bhi.n	163d4 <system_clock_source_is_ready+0xb8>
   16334:	009a      	lsls	r2, r3, #2
   16336:	4b2a      	ldr	r3, [pc, #168]	; (163e0 <system_clock_source_is_ready+0xc4>)
   16338:	18d3      	adds	r3, r2, r3
   1633a:	681b      	ldr	r3, [r3, #0]
   1633c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
   1633e:	2310      	movs	r3, #16
   16340:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   16342:	4b28      	ldr	r3, [pc, #160]	; (163e4 <system_clock_source_is_ready+0xc8>)
   16344:	68db      	ldr	r3, [r3, #12]
   16346:	68fa      	ldr	r2, [r7, #12]
   16348:	401a      	ands	r2, r3
   1634a:	68fb      	ldr	r3, [r7, #12]
   1634c:	1ad3      	subs	r3, r2, r3
   1634e:	425a      	negs	r2, r3
   16350:	4153      	adcs	r3, r2
   16352:	b2db      	uxtb	r3, r3
   16354:	e03f      	b.n	163d6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
   16356:	2302      	movs	r3, #2
   16358:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1635a:	4b23      	ldr	r3, [pc, #140]	; (163e8 <system_clock_source_is_ready+0xcc>)
   1635c:	68db      	ldr	r3, [r3, #12]
   1635e:	68fa      	ldr	r2, [r7, #12]
   16360:	401a      	ands	r2, r3
   16362:	68fb      	ldr	r3, [r7, #12]
   16364:	1ad3      	subs	r3, r2, r3
   16366:	425a      	negs	r2, r3
   16368:	4153      	adcs	r3, r2
   1636a:	b2db      	uxtb	r3, r3
   1636c:	e033      	b.n	163d6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
   1636e:	2301      	movs	r3, #1
   16370:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   16372:	4b1c      	ldr	r3, [pc, #112]	; (163e4 <system_clock_source_is_ready+0xc8>)
   16374:	68db      	ldr	r3, [r3, #12]
   16376:	68fa      	ldr	r2, [r7, #12]
   16378:	401a      	ands	r2, r3
   1637a:	68fb      	ldr	r3, [r7, #12]
   1637c:	1ad3      	subs	r3, r2, r3
   1637e:	425a      	negs	r2, r3
   16380:	4153      	adcs	r3, r2
   16382:	b2db      	uxtb	r3, r3
   16384:	e027      	b.n	163d6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
   16386:	2301      	movs	r3, #1
   16388:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
   1638a:	4b17      	ldr	r3, [pc, #92]	; (163e8 <system_clock_source_is_ready+0xcc>)
   1638c:	68db      	ldr	r3, [r3, #12]
   1638e:	68fa      	ldr	r2, [r7, #12]
   16390:	401a      	ands	r2, r3
   16392:	68fb      	ldr	r3, [r7, #12]
   16394:	1ad3      	subs	r3, r2, r3
   16396:	425a      	negs	r2, r3
   16398:	4153      	adcs	r3, r2
   1639a:	b2db      	uxtb	r3, r3
   1639c:	e01b      	b.n	163d6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
   1639e:	23d0      	movs	r3, #208	; 0xd0
   163a0:	011b      	lsls	r3, r3, #4
   163a2:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
   163a4:	4b0f      	ldr	r3, [pc, #60]	; (163e4 <system_clock_source_is_ready+0xc8>)
   163a6:	68db      	ldr	r3, [r3, #12]
   163a8:	68fa      	ldr	r2, [r7, #12]
   163aa:	401a      	ands	r2, r3
   163ac:	68fb      	ldr	r3, [r7, #12]
   163ae:	1ad3      	subs	r3, r2, r3
   163b0:	425a      	negs	r2, r3
   163b2:	4153      	adcs	r3, r2
   163b4:	b2db      	uxtb	r3, r3
   163b6:	e00e      	b.n	163d6 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
   163b8:	4a0a      	ldr	r2, [pc, #40]	; (163e4 <system_clock_source_is_ready+0xc8>)
   163ba:	233c      	movs	r3, #60	; 0x3c
   163bc:	5cd3      	ldrb	r3, [r2, r3]
   163be:	b2db      	uxtb	r3, r3
   163c0:	001a      	movs	r2, r3
   163c2:	2303      	movs	r3, #3
   163c4:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
   163c6:	3b03      	subs	r3, #3
   163c8:	425a      	negs	r2, r3
   163ca:	4153      	adcs	r3, r2
   163cc:	b2db      	uxtb	r3, r3
   163ce:	e002      	b.n	163d6 <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   163d0:	2301      	movs	r3, #1
   163d2:	e000      	b.n	163d6 <system_clock_source_is_ready+0xba>

	default:
		return false;
   163d4:	2300      	movs	r3, #0
	}
}
   163d6:	0018      	movs	r0, r3
   163d8:	46bd      	mov	sp, r7
   163da:	b004      	add	sp, #16
   163dc:	bd80      	pop	{r7, pc}
   163de:	46c0      	nop			; (mov r8, r8)
   163e0:	0001ead0 	.word	0x0001ead0
   163e4:	40000c00 	.word	0x40000c00
   163e8:	40001000 	.word	0x40001000

000163ec <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   163ec:	b580      	push	{r7, lr}
   163ee:	b0aa      	sub	sp, #168	; 0xa8
   163f0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
   163f2:	4b90      	ldr	r3, [pc, #576]	; (16634 <system_clock_init+0x248>)
   163f4:	2280      	movs	r2, #128	; 0x80
   163f6:	0052      	lsls	r2, r2, #1
   163f8:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
   163fa:	4b8f      	ldr	r3, [pc, #572]	; (16638 <system_clock_init+0x24c>)
   163fc:	2203      	movs	r2, #3
   163fe:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   16400:	2002      	movs	r0, #2
   16402:	4b8e      	ldr	r3, [pc, #568]	; (1663c <system_clock_init+0x250>)
   16404:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
   16406:	2002      	movs	r0, #2
   16408:	4b8d      	ldr	r3, [pc, #564]	; (16640 <system_clock_init+0x254>)
   1640a:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   1640c:	2394      	movs	r3, #148	; 0x94
   1640e:	18fb      	adds	r3, r7, r3
   16410:	0018      	movs	r0, r3
   16412:	4b8c      	ldr	r3, [pc, #560]	; (16644 <system_clock_init+0x258>)
   16414:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   16416:	2394      	movs	r3, #148	; 0x94
   16418:	18fb      	adds	r3, r7, r3
   1641a:	2280      	movs	r2, #128	; 0x80
   1641c:	0212      	lsls	r2, r2, #8
   1641e:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   16420:	2394      	movs	r3, #148	; 0x94
   16422:	18fb      	adds	r3, r7, r3
   16424:	2200      	movs	r2, #0
   16426:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   16428:	2394      	movs	r3, #148	; 0x94
   1642a:	18fb      	adds	r3, r7, r3
   1642c:	2204      	movs	r2, #4
   1642e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   16430:	2394      	movs	r3, #148	; 0x94
   16432:	18fb      	adds	r3, r7, r3
   16434:	2200      	movs	r2, #0
   16436:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   16438:	2394      	movs	r3, #148	; 0x94
   1643a:	18fb      	adds	r3, r7, r3
   1643c:	2201      	movs	r2, #1
   1643e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
   16440:	2394      	movs	r3, #148	; 0x94
   16442:	18fb      	adds	r3, r7, r3
   16444:	2200      	movs	r2, #0
   16446:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   16448:	2394      	movs	r3, #148	; 0x94
   1644a:	18fb      	adds	r3, r7, r3
   1644c:	2201      	movs	r2, #1
   1644e:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   16450:	2394      	movs	r3, #148	; 0x94
   16452:	18fb      	adds	r3, r7, r3
   16454:	0018      	movs	r0, r3
   16456:	4b7c      	ldr	r3, [pc, #496]	; (16648 <system_clock_init+0x25c>)
   16458:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1645a:	2005      	movs	r0, #5
   1645c:	4b7b      	ldr	r3, [pc, #492]	; (1664c <system_clock_init+0x260>)
   1645e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   16460:	46c0      	nop			; (mov r8, r8)
   16462:	2005      	movs	r0, #5
   16464:	4b7a      	ldr	r3, [pc, #488]	; (16650 <system_clock_init+0x264>)
   16466:	4798      	blx	r3
   16468:	0003      	movs	r3, r0
   1646a:	001a      	movs	r2, r3
   1646c:	2301      	movs	r3, #1
   1646e:	4053      	eors	r3, r2
   16470:	b2db      	uxtb	r3, r3
   16472:	2b00      	cmp	r3, #0
   16474:	d1f5      	bne.n	16462 <system_clock_init+0x76>
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
   16476:	4b77      	ldr	r3, [pc, #476]	; (16654 <system_clock_init+0x268>)
   16478:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   1647a:	2380      	movs	r3, #128	; 0x80
   1647c:	18fb      	adds	r3, r7, r3
   1647e:	0018      	movs	r0, r3
   16480:	4b75      	ldr	r3, [pc, #468]	; (16658 <system_clock_init+0x26c>)
   16482:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   16484:	2380      	movs	r3, #128	; 0x80
   16486:	18fb      	adds	r3, r7, r3
   16488:	2204      	movs	r2, #4
   1648a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   1648c:	2380      	movs	r3, #128	; 0x80
   1648e:	18fb      	adds	r3, r7, r3
   16490:	2200      	movs	r2, #0
   16492:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
   16494:	2380      	movs	r3, #128	; 0x80
   16496:	18fb      	adds	r3, r7, r3
   16498:	2200      	movs	r2, #0
   1649a:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
   1649c:	4b6f      	ldr	r3, [pc, #444]	; (1665c <system_clock_init+0x270>)
   1649e:	681b      	ldr	r3, [r3, #0]
   164a0:	0e9b      	lsrs	r3, r3, #26
   164a2:	22a4      	movs	r2, #164	; 0xa4
   164a4:	18ba      	adds	r2, r7, r2
   164a6:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
   164a8:	23a4      	movs	r3, #164	; 0xa4
   164aa:	18fb      	adds	r3, r7, r3
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	2b3f      	cmp	r3, #63	; 0x3f
   164b0:	d103      	bne.n	164ba <system_clock_init+0xce>
		coarse = 0x1f;
   164b2:	231f      	movs	r3, #31
   164b4:	22a4      	movs	r2, #164	; 0xa4
   164b6:	18ba      	adds	r2, r7, r2
   164b8:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
   164ba:	23a4      	movs	r3, #164	; 0xa4
   164bc:	18fb      	adds	r3, r7, r3
   164be:	681b      	ldr	r3, [r3, #0]
   164c0:	b2da      	uxtb	r2, r3
   164c2:	2380      	movs	r3, #128	; 0x80
   164c4:	18fb      	adds	r3, r7, r3
   164c6:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   164c8:	2380      	movs	r3, #128	; 0x80
   164ca:	18fb      	adds	r3, r7, r3
   164cc:	2200      	movs	r2, #0
   164ce:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   164d0:	2380      	movs	r3, #128	; 0x80
   164d2:	18fb      	adds	r3, r7, r3
   164d4:	2200      	movs	r2, #0
   164d6:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   164d8:	2380      	movs	r3, #128	; 0x80
   164da:	18fb      	adds	r3, r7, r3
   164dc:	2200      	movs	r2, #0
   164de:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   164e0:	2380      	movs	r3, #128	; 0x80
   164e2:	18fb      	adds	r3, r7, r3
   164e4:	2200      	movs	r2, #0
   164e6:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   164e8:	2380      	movs	r3, #128	; 0x80
   164ea:	18fb      	adds	r3, r7, r3
   164ec:	4a5c      	ldr	r2, [pc, #368]	; (16660 <system_clock_init+0x274>)
   164ee:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   164f0:	2380      	movs	r3, #128	; 0x80
   164f2:	18fb      	adds	r3, r7, r3
   164f4:	2203      	movs	r2, #3
   164f6:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   164f8:	2380      	movs	r3, #128	; 0x80
   164fa:	18fb      	adds	r3, r7, r3
   164fc:	221f      	movs	r2, #31
   164fe:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   16500:	2380      	movs	r3, #128	; 0x80
   16502:	18fb      	adds	r3, r7, r3
   16504:	0018      	movs	r0, r3
   16506:	4b57      	ldr	r3, [pc, #348]	; (16664 <system_clock_init+0x278>)
   16508:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1650a:	4b57      	ldr	r3, [pc, #348]	; (16668 <system_clock_init+0x27c>)
   1650c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1650e:	2368      	movs	r3, #104	; 0x68
   16510:	18fb      	adds	r3, r7, r3
   16512:	0018      	movs	r0, r3
   16514:	4b55      	ldr	r3, [pc, #340]	; (1666c <system_clock_init+0x280>)
   16516:	4798      	blx	r3
   16518:	2368      	movs	r3, #104	; 0x68
   1651a:	18fb      	adds	r3, r7, r3
   1651c:	2205      	movs	r2, #5
   1651e:	701a      	strb	r2, [r3, #0]
   16520:	2368      	movs	r3, #104	; 0x68
   16522:	18fb      	adds	r3, r7, r3
   16524:	2220      	movs	r2, #32
   16526:	605a      	str	r2, [r3, #4]
   16528:	2368      	movs	r3, #104	; 0x68
   1652a:	18fb      	adds	r3, r7, r3
   1652c:	2200      	movs	r2, #0
   1652e:	721a      	strb	r2, [r3, #8]
   16530:	2368      	movs	r3, #104	; 0x68
   16532:	18fb      	adds	r3, r7, r3
   16534:	2200      	movs	r2, #0
   16536:	725a      	strb	r2, [r3, #9]
   16538:	2368      	movs	r3, #104	; 0x68
   1653a:	18fb      	adds	r3, r7, r3
   1653c:	0019      	movs	r1, r3
   1653e:	2001      	movs	r0, #1
   16540:	4b4b      	ldr	r3, [pc, #300]	; (16670 <system_clock_init+0x284>)
   16542:	4798      	blx	r3
   16544:	2001      	movs	r0, #1
   16546:	4b4b      	ldr	r3, [pc, #300]	; (16674 <system_clock_init+0x288>)
   16548:	4798      	blx	r3
   1654a:	2350      	movs	r3, #80	; 0x50
   1654c:	18fb      	adds	r3, r7, r3
   1654e:	0018      	movs	r0, r3
   16550:	4b46      	ldr	r3, [pc, #280]	; (1666c <system_clock_init+0x280>)
   16552:	4798      	blx	r3
   16554:	2350      	movs	r3, #80	; 0x50
   16556:	18fb      	adds	r3, r7, r3
   16558:	2207      	movs	r2, #7
   1655a:	701a      	strb	r2, [r3, #0]
   1655c:	2350      	movs	r3, #80	; 0x50
   1655e:	18fb      	adds	r3, r7, r3
   16560:	2201      	movs	r2, #1
   16562:	605a      	str	r2, [r3, #4]
   16564:	2350      	movs	r3, #80	; 0x50
   16566:	18fb      	adds	r3, r7, r3
   16568:	2200      	movs	r2, #0
   1656a:	721a      	strb	r2, [r3, #8]
   1656c:	2350      	movs	r3, #80	; 0x50
   1656e:	18fb      	adds	r3, r7, r3
   16570:	2200      	movs	r2, #0
   16572:	725a      	strb	r2, [r3, #9]
   16574:	2350      	movs	r3, #80	; 0x50
   16576:	18fb      	adds	r3, r7, r3
   16578:	0019      	movs	r1, r3
   1657a:	2003      	movs	r0, #3
   1657c:	4b3c      	ldr	r3, [pc, #240]	; (16670 <system_clock_init+0x284>)
   1657e:	4798      	blx	r3
   16580:	2003      	movs	r0, #3
   16582:	4b3c      	ldr	r3, [pc, #240]	; (16674 <system_clock_init+0x288>)
   16584:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   16586:	2310      	movs	r3, #16
   16588:	18fb      	adds	r3, r7, r3
   1658a:	0018      	movs	r0, r3
   1658c:	4b3a      	ldr	r3, [pc, #232]	; (16678 <system_clock_init+0x28c>)
   1658e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   16590:	2310      	movs	r3, #16
   16592:	18fb      	adds	r3, r7, r3
   16594:	2201      	movs	r2, #1
   16596:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   16598:	2310      	movs	r3, #16
   1659a:	18fb      	adds	r3, r7, r3
   1659c:	0019      	movs	r1, r3
   1659e:	2000      	movs	r0, #0
   165a0:	4b36      	ldr	r3, [pc, #216]	; (1667c <system_clock_init+0x290>)
   165a2:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
   165a4:	2000      	movs	r0, #0
   165a6:	4b36      	ldr	r3, [pc, #216]	; (16680 <system_clock_init+0x294>)
   165a8:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   165aa:	2007      	movs	r0, #7
   165ac:	4b27      	ldr	r3, [pc, #156]	; (1664c <system_clock_init+0x260>)
   165ae:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   165b0:	46c0      	nop			; (mov r8, r8)
   165b2:	2007      	movs	r0, #7
   165b4:	4b26      	ldr	r3, [pc, #152]	; (16650 <system_clock_init+0x264>)
   165b6:	4798      	blx	r3
   165b8:	0003      	movs	r3, r0
   165ba:	001a      	movs	r2, r3
   165bc:	2301      	movs	r3, #1
   165be:	4053      	eors	r3, r2
   165c0:	b2db      	uxtb	r3, r3
   165c2:	2b00      	cmp	r3, #0
   165c4:	d1f5      	bne.n	165b2 <system_clock_init+0x1c6>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
   165c6:	2000      	movs	r0, #0
   165c8:	4b2e      	ldr	r3, [pc, #184]	; (16684 <system_clock_init+0x298>)
   165ca:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
   165cc:	2000      	movs	r0, #0
   165ce:	4b2e      	ldr	r3, [pc, #184]	; (16688 <system_clock_init+0x29c>)
   165d0:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   165d2:	2000      	movs	r0, #0
   165d4:	4b2d      	ldr	r3, [pc, #180]	; (1668c <system_clock_init+0x2a0>)
   165d6:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
   165d8:	2000      	movs	r0, #0
   165da:	4b2d      	ldr	r3, [pc, #180]	; (16690 <system_clock_init+0x2a4>)
   165dc:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   165de:	1d3b      	adds	r3, r7, #4
   165e0:	0018      	movs	r0, r3
   165e2:	4b22      	ldr	r3, [pc, #136]	; (1666c <system_clock_init+0x280>)
   165e4:	4798      	blx	r3
   165e6:	1d3b      	adds	r3, r7, #4
   165e8:	2207      	movs	r2, #7
   165ea:	701a      	strb	r2, [r3, #0]
   165ec:	1d3b      	adds	r3, r7, #4
   165ee:	2201      	movs	r2, #1
   165f0:	605a      	str	r2, [r3, #4]
   165f2:	1d3b      	adds	r3, r7, #4
   165f4:	2201      	movs	r2, #1
   165f6:	721a      	strb	r2, [r3, #8]
   165f8:	1d3b      	adds	r3, r7, #4
   165fa:	2200      	movs	r2, #0
   165fc:	725a      	strb	r2, [r3, #9]
   165fe:	1d3b      	adds	r3, r7, #4
   16600:	0019      	movs	r1, r3
   16602:	2000      	movs	r0, #0
   16604:	4b1a      	ldr	r3, [pc, #104]	; (16670 <system_clock_init+0x284>)
   16606:	4798      	blx	r3
   16608:	2000      	movs	r0, #0
   1660a:	4b1a      	ldr	r3, [pc, #104]	; (16674 <system_clock_init+0x288>)
   1660c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
   1660e:	4b21      	ldr	r3, [pc, #132]	; (16694 <system_clock_init+0x2a8>)
   16610:	4798      	blx	r3
   16612:	0003      	movs	r3, r0
   16614:	22a0      	movs	r2, #160	; 0xa0
   16616:	18ba      	adds	r2, r7, r2
   16618:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
   1661a:	23a0      	movs	r3, #160	; 0xa0
   1661c:	18fb      	adds	r3, r7, r3
   1661e:	681b      	ldr	r3, [r3, #0]
   16620:	4a1d      	ldr	r2, [pc, #116]	; (16698 <system_clock_init+0x2ac>)
   16622:	4293      	cmp	r3, r2
   16624:	d802      	bhi.n	1662c <system_clock_init+0x240>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
   16626:	2000      	movs	r0, #0
   16628:	4b05      	ldr	r3, [pc, #20]	; (16640 <system_clock_init+0x254>)
   1662a:	4798      	blx	r3
	}
}
   1662c:	46c0      	nop			; (mov r8, r8)
   1662e:	46bd      	mov	sp, r7
   16630:	b02a      	add	sp, #168	; 0xa8
   16632:	bd80      	pop	{r7, pc}
   16634:	40000c00 	.word	0x40000c00
   16638:	40001400 	.word	0x40001400
   1663c:	00015d09 	.word	0x00015d09
   16640:	00015d3d 	.word	0x00015d3d
   16644:	00015b91 	.word	0x00015b91
   16648:	00015fdd 	.word	0x00015fdd
   1664c:	000161b1 	.word	0x000161b1
   16650:	0001631d 	.word	0x0001631d
   16654:	00015da5 	.word	0x00015da5
   16658:	00015bf5 	.word	0x00015bf5
   1665c:	00806020 	.word	0x00806020
   16660:	ffffb71b 	.word	0xffffb71b
   16664:	000160d9 	.word	0x000160d9
   16668:	0001677d 	.word	0x0001677d
   1666c:	00015b4d 	.word	0x00015b4d
   16670:	000167ad 	.word	0x000167ad
   16674:	000168bd 	.word	0x000168bd
   16678:	00015b7b 	.word	0x00015b7b
   1667c:	000169d9 	.word	0x000169d9
   16680:	00016a19 	.word	0x00016a19
   16684:	00015cb1 	.word	0x00015cb1
   16688:	00015c89 	.word	0x00015c89
   1668c:	00015c61 	.word	0x00015c61
   16690:	00015c4d 	.word	0x00015c4d
   16694:	00015cd9 	.word	0x00015cd9
   16698:	00b71b00 	.word	0x00b71b00

0001669c <system_apb_clock_set_mask>:
{
   1669c:	b580      	push	{r7, lr}
   1669e:	b082      	sub	sp, #8
   166a0:	af00      	add	r7, sp, #0
   166a2:	0002      	movs	r2, r0
   166a4:	6039      	str	r1, [r7, #0]
   166a6:	1dfb      	adds	r3, r7, #7
   166a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   166aa:	1dfb      	adds	r3, r7, #7
   166ac:	781b      	ldrb	r3, [r3, #0]
   166ae:	2b04      	cmp	r3, #4
   166b0:	d827      	bhi.n	16702 <system_apb_clock_set_mask+0x66>
   166b2:	009a      	lsls	r2, r3, #2
   166b4:	4b16      	ldr	r3, [pc, #88]	; (16710 <system_apb_clock_set_mask+0x74>)
   166b6:	18d3      	adds	r3, r2, r3
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   166bc:	4b15      	ldr	r3, [pc, #84]	; (16714 <system_apb_clock_set_mask+0x78>)
   166be:	4a15      	ldr	r2, [pc, #84]	; (16714 <system_apb_clock_set_mask+0x78>)
   166c0:	6951      	ldr	r1, [r2, #20]
   166c2:	683a      	ldr	r2, [r7, #0]
   166c4:	430a      	orrs	r2, r1
   166c6:	615a      	str	r2, [r3, #20]
			break;
   166c8:	e01d      	b.n	16706 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   166ca:	4b12      	ldr	r3, [pc, #72]	; (16714 <system_apb_clock_set_mask+0x78>)
   166cc:	4a11      	ldr	r2, [pc, #68]	; (16714 <system_apb_clock_set_mask+0x78>)
   166ce:	6991      	ldr	r1, [r2, #24]
   166d0:	683a      	ldr	r2, [r7, #0]
   166d2:	430a      	orrs	r2, r1
   166d4:	619a      	str	r2, [r3, #24]
			break;
   166d6:	e016      	b.n	16706 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   166d8:	4b0e      	ldr	r3, [pc, #56]	; (16714 <system_apb_clock_set_mask+0x78>)
   166da:	4a0e      	ldr	r2, [pc, #56]	; (16714 <system_apb_clock_set_mask+0x78>)
   166dc:	69d1      	ldr	r1, [r2, #28]
   166de:	683a      	ldr	r2, [r7, #0]
   166e0:	430a      	orrs	r2, r1
   166e2:	61da      	str	r2, [r3, #28]
			break;
   166e4:	e00f      	b.n	16706 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   166e6:	4b0b      	ldr	r3, [pc, #44]	; (16714 <system_apb_clock_set_mask+0x78>)
   166e8:	4a0a      	ldr	r2, [pc, #40]	; (16714 <system_apb_clock_set_mask+0x78>)
   166ea:	6a11      	ldr	r1, [r2, #32]
   166ec:	683a      	ldr	r2, [r7, #0]
   166ee:	430a      	orrs	r2, r1
   166f0:	621a      	str	r2, [r3, #32]
			break;
   166f2:	e008      	b.n	16706 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   166f4:	4b07      	ldr	r3, [pc, #28]	; (16714 <system_apb_clock_set_mask+0x78>)
   166f6:	4a07      	ldr	r2, [pc, #28]	; (16714 <system_apb_clock_set_mask+0x78>)
   166f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
   166fa:	683a      	ldr	r2, [r7, #0]
   166fc:	430a      	orrs	r2, r1
   166fe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   16700:	e001      	b.n	16706 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   16702:	2317      	movs	r3, #23
   16704:	e000      	b.n	16708 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   16706:	2300      	movs	r3, #0
}
   16708:	0018      	movs	r0, r3
   1670a:	46bd      	mov	sp, r7
   1670c:	b002      	add	sp, #8
   1670e:	bd80      	pop	{r7, pc}
   16710:	0001eaf4 	.word	0x0001eaf4
   16714:	40000400 	.word	0x40000400

00016718 <system_interrupt_enter_critical_section>:
{
   16718:	b580      	push	{r7, lr}
   1671a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1671c:	4b02      	ldr	r3, [pc, #8]	; (16728 <system_interrupt_enter_critical_section+0x10>)
   1671e:	4798      	blx	r3
}
   16720:	46c0      	nop			; (mov r8, r8)
   16722:	46bd      	mov	sp, r7
   16724:	bd80      	pop	{r7, pc}
   16726:	46c0      	nop			; (mov r8, r8)
   16728:	0001272d 	.word	0x0001272d

0001672c <system_interrupt_leave_critical_section>:
{
   1672c:	b580      	push	{r7, lr}
   1672e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16730:	4b02      	ldr	r3, [pc, #8]	; (1673c <system_interrupt_leave_critical_section+0x10>)
   16732:	4798      	blx	r3
}
   16734:	46c0      	nop			; (mov r8, r8)
   16736:	46bd      	mov	sp, r7
   16738:	bd80      	pop	{r7, pc}
   1673a:	46c0      	nop			; (mov r8, r8)
   1673c:	00012781 	.word	0x00012781

00016740 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
   16740:	b580      	push	{r7, lr}
   16742:	b082      	sub	sp, #8
   16744:	af00      	add	r7, sp, #0
   16746:	0002      	movs	r2, r0
   16748:	1dfb      	adds	r3, r7, #7
   1674a:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
   1674c:	4b09      	ldr	r3, [pc, #36]	; (16774 <system_gclk_is_syncing+0x34>)
   1674e:	685b      	ldr	r3, [r3, #4]
   16750:	1dfa      	adds	r2, r7, #7
   16752:	7812      	ldrb	r2, [r2, #0]
   16754:	2101      	movs	r1, #1
   16756:	4091      	lsls	r1, r2
   16758:	000a      	movs	r2, r1
   1675a:	0092      	lsls	r2, r2, #2
   1675c:	4013      	ands	r3, r2
   1675e:	4a06      	ldr	r2, [pc, #24]	; (16778 <system_gclk_is_syncing+0x38>)
   16760:	4013      	ands	r3, r2
   16762:	d001      	beq.n	16768 <system_gclk_is_syncing+0x28>
		 return true;
   16764:	2301      	movs	r3, #1
   16766:	e000      	b.n	1676a <system_gclk_is_syncing+0x2a>
	}

	 return false;
   16768:	2300      	movs	r3, #0
}
   1676a:	0018      	movs	r0, r3
   1676c:	46bd      	mov	sp, r7
   1676e:	b002      	add	sp, #8
   16770:	bd80      	pop	{r7, pc}
   16772:	46c0      	nop			; (mov r8, r8)
   16774:	40001800 	.word	0x40001800
   16778:	000007fc 	.word	0x000007fc

0001677c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   1677c:	b580      	push	{r7, lr}
   1677e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
   16780:	2140      	movs	r1, #64	; 0x40
   16782:	2000      	movs	r0, #0
   16784:	4b07      	ldr	r3, [pc, #28]	; (167a4 <system_gclk_init+0x28>)
   16786:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
   16788:	4b07      	ldr	r3, [pc, #28]	; (167a8 <system_gclk_init+0x2c>)
   1678a:	2201      	movs	r2, #1
   1678c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
   1678e:	46c0      	nop			; (mov r8, r8)
   16790:	4b05      	ldr	r3, [pc, #20]	; (167a8 <system_gclk_init+0x2c>)
   16792:	781b      	ldrb	r3, [r3, #0]
   16794:	b2db      	uxtb	r3, r3
   16796:	001a      	movs	r2, r3
   16798:	2301      	movs	r3, #1
   1679a:	4013      	ands	r3, r2
   1679c:	d1f8      	bne.n	16790 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1679e:	46c0      	nop			; (mov r8, r8)
   167a0:	46bd      	mov	sp, r7
   167a2:	bd80      	pop	{r7, pc}
   167a4:	0001669d 	.word	0x0001669d
   167a8:	40001800 	.word	0x40001800

000167ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   167ac:	b580      	push	{r7, lr}
   167ae:	b086      	sub	sp, #24
   167b0:	af00      	add	r7, sp, #0
   167b2:	0002      	movs	r2, r0
   167b4:	6039      	str	r1, [r7, #0]
   167b6:	1dfb      	adds	r3, r7, #7
   167b8:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
   167ba:	683b      	ldr	r3, [r7, #0]
   167bc:	781b      	ldrb	r3, [r3, #0]
   167be:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   167c0:	683b      	ldr	r3, [r7, #0]
   167c2:	785b      	ldrb	r3, [r3, #1]
   167c4:	2b00      	cmp	r3, #0
   167c6:	d004      	beq.n	167d2 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   167c8:	697b      	ldr	r3, [r7, #20]
   167ca:	2280      	movs	r2, #128	; 0x80
   167cc:	00d2      	lsls	r2, r2, #3
   167ce:	4313      	orrs	r3, r2
   167d0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   167d2:	683b      	ldr	r3, [r7, #0]
   167d4:	7a5b      	ldrb	r3, [r3, #9]
   167d6:	2b00      	cmp	r3, #0
   167d8:	d004      	beq.n	167e4 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   167da:	697b      	ldr	r3, [r7, #20]
   167dc:	2280      	movs	r2, #128	; 0x80
   167de:	0112      	lsls	r2, r2, #4
   167e0:	4313      	orrs	r3, r2
   167e2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   167e4:	683b      	ldr	r3, [r7, #0]
   167e6:	685b      	ldr	r3, [r3, #4]
   167e8:	2b01      	cmp	r3, #1
   167ea:	d92c      	bls.n	16846 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   167ec:	683b      	ldr	r3, [r7, #0]
   167ee:	685a      	ldr	r2, [r3, #4]
   167f0:	683b      	ldr	r3, [r7, #0]
   167f2:	685b      	ldr	r3, [r3, #4]
   167f4:	3b01      	subs	r3, #1
   167f6:	4013      	ands	r3, r2
   167f8:	d11a      	bne.n	16830 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   167fa:	2300      	movs	r3, #0
   167fc:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   167fe:	2302      	movs	r3, #2
   16800:	60fb      	str	r3, [r7, #12]
   16802:	e005      	b.n	16810 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
   16804:	693b      	ldr	r3, [r7, #16]
   16806:	3301      	adds	r3, #1
   16808:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
   1680a:	68fb      	ldr	r3, [r7, #12]
   1680c:	005b      	lsls	r3, r3, #1
   1680e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
   16810:	683b      	ldr	r3, [r7, #0]
   16812:	685a      	ldr	r2, [r3, #4]
   16814:	68fb      	ldr	r3, [r7, #12]
   16816:	429a      	cmp	r2, r3
   16818:	d8f4      	bhi.n	16804 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
   1681a:	693b      	ldr	r3, [r7, #16]
   1681c:	041b      	lsls	r3, r3, #16
   1681e:	697a      	ldr	r2, [r7, #20]
   16820:	4313      	orrs	r3, r2
   16822:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   16824:	697b      	ldr	r3, [r7, #20]
   16826:	2280      	movs	r2, #128	; 0x80
   16828:	0152      	lsls	r2, r2, #5
   1682a:	4313      	orrs	r3, r2
   1682c:	617b      	str	r3, [r7, #20]
   1682e:	e00a      	b.n	16846 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
   16830:	683b      	ldr	r3, [r7, #0]
   16832:	685b      	ldr	r3, [r3, #4]
   16834:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
   16836:	697a      	ldr	r2, [r7, #20]
   16838:	4313      	orrs	r3, r2
   1683a:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1683c:	697b      	ldr	r3, [r7, #20]
   1683e:	2280      	movs	r2, #128	; 0x80
   16840:	0092      	lsls	r2, r2, #2
   16842:	4313      	orrs	r3, r2
   16844:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   16846:	683b      	ldr	r3, [r7, #0]
   16848:	7a1b      	ldrb	r3, [r3, #8]
   1684a:	2b00      	cmp	r3, #0
   1684c:	d004      	beq.n	16858 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1684e:	697b      	ldr	r3, [r7, #20]
   16850:	2280      	movs	r2, #128	; 0x80
   16852:	0192      	lsls	r2, r2, #6
   16854:	4313      	orrs	r3, r2
   16856:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
   16858:	46c0      	nop			; (mov r8, r8)
   1685a:	1dfb      	adds	r3, r7, #7
   1685c:	781b      	ldrb	r3, [r3, #0]
   1685e:	0018      	movs	r0, r3
   16860:	4b12      	ldr	r3, [pc, #72]	; (168ac <system_gclk_gen_set_config+0x100>)
   16862:	4798      	blx	r3
   16864:	1e03      	subs	r3, r0, #0
   16866:	d1f8      	bne.n	1685a <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   16868:	4b11      	ldr	r3, [pc, #68]	; (168b0 <system_gclk_gen_set_config+0x104>)
   1686a:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
   1686c:	4811      	ldr	r0, [pc, #68]	; (168b4 <system_gclk_gen_set_config+0x108>)
   1686e:	1dfb      	adds	r3, r7, #7
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	4910      	ldr	r1, [pc, #64]	; (168b4 <system_gclk_gen_set_config+0x108>)
   16874:	1dfa      	adds	r2, r7, #7
   16876:	7812      	ldrb	r2, [r2, #0]
   16878:	3208      	adds	r2, #8
   1687a:	0092      	lsls	r2, r2, #2
   1687c:	5851      	ldr	r1, [r2, r1]
   1687e:	2280      	movs	r2, #128	; 0x80
   16880:	0052      	lsls	r2, r2, #1
   16882:	4011      	ands	r1, r2
   16884:	697a      	ldr	r2, [r7, #20]
   16886:	430a      	orrs	r2, r1
   16888:	3308      	adds	r3, #8
   1688a:	009b      	lsls	r3, r3, #2
   1688c:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
   1688e:	46c0      	nop			; (mov r8, r8)
   16890:	1dfb      	adds	r3, r7, #7
   16892:	781b      	ldrb	r3, [r3, #0]
   16894:	0018      	movs	r0, r3
   16896:	4b05      	ldr	r3, [pc, #20]	; (168ac <system_gclk_gen_set_config+0x100>)
   16898:	4798      	blx	r3
   1689a:	1e03      	subs	r3, r0, #0
   1689c:	d1f8      	bne.n	16890 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
   1689e:	4b06      	ldr	r3, [pc, #24]	; (168b8 <system_gclk_gen_set_config+0x10c>)
   168a0:	4798      	blx	r3
}
   168a2:	46c0      	nop			; (mov r8, r8)
   168a4:	46bd      	mov	sp, r7
   168a6:	b006      	add	sp, #24
   168a8:	bd80      	pop	{r7, pc}
   168aa:	46c0      	nop			; (mov r8, r8)
   168ac:	00016741 	.word	0x00016741
   168b0:	00016719 	.word	0x00016719
   168b4:	40001800 	.word	0x40001800
   168b8:	0001672d 	.word	0x0001672d

000168bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   168bc:	b580      	push	{r7, lr}
   168be:	b082      	sub	sp, #8
   168c0:	af00      	add	r7, sp, #0
   168c2:	0002      	movs	r2, r0
   168c4:	1dfb      	adds	r3, r7, #7
   168c6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   168c8:	46c0      	nop			; (mov r8, r8)
   168ca:	1dfb      	adds	r3, r7, #7
   168cc:	781b      	ldrb	r3, [r3, #0]
   168ce:	0018      	movs	r0, r3
   168d0:	4b0d      	ldr	r3, [pc, #52]	; (16908 <system_gclk_gen_enable+0x4c>)
   168d2:	4798      	blx	r3
   168d4:	1e03      	subs	r3, r0, #0
   168d6:	d1f8      	bne.n	168ca <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   168d8:	4b0c      	ldr	r3, [pc, #48]	; (1690c <system_gclk_gen_enable+0x50>)
   168da:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
   168dc:	480c      	ldr	r0, [pc, #48]	; (16910 <system_gclk_gen_enable+0x54>)
   168de:	1dfb      	adds	r3, r7, #7
   168e0:	781b      	ldrb	r3, [r3, #0]
   168e2:	490b      	ldr	r1, [pc, #44]	; (16910 <system_gclk_gen_enable+0x54>)
   168e4:	1dfa      	adds	r2, r7, #7
   168e6:	7812      	ldrb	r2, [r2, #0]
   168e8:	3208      	adds	r2, #8
   168ea:	0092      	lsls	r2, r2, #2
   168ec:	5852      	ldr	r2, [r2, r1]
   168ee:	2180      	movs	r1, #128	; 0x80
   168f0:	0049      	lsls	r1, r1, #1
   168f2:	430a      	orrs	r2, r1
   168f4:	3308      	adds	r3, #8
   168f6:	009b      	lsls	r3, r3, #2
   168f8:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
   168fa:	4b06      	ldr	r3, [pc, #24]	; (16914 <system_gclk_gen_enable+0x58>)
   168fc:	4798      	blx	r3
}
   168fe:	46c0      	nop			; (mov r8, r8)
   16900:	46bd      	mov	sp, r7
   16902:	b002      	add	sp, #8
   16904:	bd80      	pop	{r7, pc}
   16906:	46c0      	nop			; (mov r8, r8)
   16908:	00016741 	.word	0x00016741
   1690c:	00016719 	.word	0x00016719
   16910:	40001800 	.word	0x40001800
   16914:	0001672d 	.word	0x0001672d

00016918 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   16918:	b580      	push	{r7, lr}
   1691a:	b086      	sub	sp, #24
   1691c:	af00      	add	r7, sp, #0
   1691e:	0002      	movs	r2, r0
   16920:	1dfb      	adds	r3, r7, #7
   16922:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
   16924:	46c0      	nop			; (mov r8, r8)
   16926:	1dfb      	adds	r3, r7, #7
   16928:	781b      	ldrb	r3, [r3, #0]
   1692a:	0018      	movs	r0, r3
   1692c:	4b24      	ldr	r3, [pc, #144]	; (169c0 <system_gclk_gen_get_hz+0xa8>)
   1692e:	4798      	blx	r3
   16930:	1e03      	subs	r3, r0, #0
   16932:	d1f8      	bne.n	16926 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   16934:	4b23      	ldr	r3, [pc, #140]	; (169c4 <system_gclk_gen_get_hz+0xac>)
   16936:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
   16938:	4a23      	ldr	r2, [pc, #140]	; (169c8 <system_gclk_gen_get_hz+0xb0>)
   1693a:	1dfb      	adds	r3, r7, #7
   1693c:	781b      	ldrb	r3, [r3, #0]
   1693e:	3308      	adds	r3, #8
   16940:	009b      	lsls	r3, r3, #2
   16942:	589b      	ldr	r3, [r3, r2]
   16944:	071b      	lsls	r3, r3, #28
   16946:	0f1b      	lsrs	r3, r3, #28
   16948:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1694a:	0018      	movs	r0, r3
   1694c:	4b1f      	ldr	r3, [pc, #124]	; (169cc <system_gclk_gen_get_hz+0xb4>)
   1694e:	4798      	blx	r3
   16950:	0003      	movs	r3, r0
   16952:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
   16954:	4a1c      	ldr	r2, [pc, #112]	; (169c8 <system_gclk_gen_get_hz+0xb0>)
   16956:	1dfb      	adds	r3, r7, #7
   16958:	781b      	ldrb	r3, [r3, #0]
   1695a:	3308      	adds	r3, #8
   1695c:	009b      	lsls	r3, r3, #2
   1695e:	589b      	ldr	r3, [r3, r2]
   16960:	04db      	lsls	r3, r3, #19
   16962:	0fdb      	lsrs	r3, r3, #31
   16964:	b2da      	uxtb	r2, r3
   16966:	2313      	movs	r3, #19
   16968:	18fb      	adds	r3, r7, r3
   1696a:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
   1696c:	4a16      	ldr	r2, [pc, #88]	; (169c8 <system_gclk_gen_get_hz+0xb0>)
   1696e:	1dfb      	adds	r3, r7, #7
   16970:	781b      	ldrb	r3, [r3, #0]
   16972:	3308      	adds	r3, #8
   16974:	009b      	lsls	r3, r3, #2
   16976:	589b      	ldr	r3, [r3, r2]
   16978:	0c1b      	lsrs	r3, r3, #16
   1697a:	b29b      	uxth	r3, r3
   1697c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1697e:	4b14      	ldr	r3, [pc, #80]	; (169d0 <system_gclk_gen_get_hz+0xb8>)
   16980:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   16982:	2313      	movs	r3, #19
   16984:	18fb      	adds	r3, r7, r3
   16986:	781b      	ldrb	r3, [r3, #0]
   16988:	2b00      	cmp	r3, #0
   1698a:	d109      	bne.n	169a0 <system_gclk_gen_get_hz+0x88>
   1698c:	68fb      	ldr	r3, [r7, #12]
   1698e:	2b01      	cmp	r3, #1
   16990:	d906      	bls.n	169a0 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
   16992:	4b10      	ldr	r3, [pc, #64]	; (169d4 <system_gclk_gen_get_hz+0xbc>)
   16994:	68f9      	ldr	r1, [r7, #12]
   16996:	6978      	ldr	r0, [r7, #20]
   16998:	4798      	blx	r3
   1699a:	0003      	movs	r3, r0
   1699c:	617b      	str	r3, [r7, #20]
   1699e:	e00a      	b.n	169b6 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
   169a0:	2313      	movs	r3, #19
   169a2:	18fb      	adds	r3, r7, r3
   169a4:	781b      	ldrb	r3, [r3, #0]
   169a6:	2b00      	cmp	r3, #0
   169a8:	d005      	beq.n	169b6 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
   169aa:	68fb      	ldr	r3, [r7, #12]
   169ac:	3301      	adds	r3, #1
   169ae:	697a      	ldr	r2, [r7, #20]
   169b0:	40da      	lsrs	r2, r3
   169b2:	0013      	movs	r3, r2
   169b4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   169b6:	697b      	ldr	r3, [r7, #20]
}
   169b8:	0018      	movs	r0, r3
   169ba:	46bd      	mov	sp, r7
   169bc:	b006      	add	sp, #24
   169be:	bd80      	pop	{r7, pc}
   169c0:	00016741 	.word	0x00016741
   169c4:	00016719 	.word	0x00016719
   169c8:	40001800 	.word	0x40001800
   169cc:	00015e9d 	.word	0x00015e9d
   169d0:	0001672d 	.word	0x0001672d
   169d4:	00019ae9 	.word	0x00019ae9

000169d8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   169d8:	b580      	push	{r7, lr}
   169da:	b082      	sub	sp, #8
   169dc:	af00      	add	r7, sp, #0
   169de:	0002      	movs	r2, r0
   169e0:	6039      	str	r1, [r7, #0]
   169e2:	1dfb      	adds	r3, r7, #7
   169e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   169e6:	1dfb      	adds	r3, r7, #7
   169e8:	781b      	ldrb	r3, [r3, #0]
   169ea:	0018      	movs	r0, r3
   169ec:	4b08      	ldr	r3, [pc, #32]	; (16a10 <system_gclk_chan_set_config+0x38>)
   169ee:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
   169f0:	4908      	ldr	r1, [pc, #32]	; (16a14 <system_gclk_chan_set_config+0x3c>)
   169f2:	1dfb      	adds	r3, r7, #7
   169f4:	781b      	ldrb	r3, [r3, #0]
   169f6:	683a      	ldr	r2, [r7, #0]
   169f8:	7812      	ldrb	r2, [r2, #0]
   169fa:	0010      	movs	r0, r2
   169fc:	220f      	movs	r2, #15
   169fe:	4002      	ands	r2, r0
   16a00:	3320      	adds	r3, #32
   16a02:	009b      	lsls	r3, r3, #2
   16a04:	505a      	str	r2, [r3, r1]


}
   16a06:	46c0      	nop			; (mov r8, r8)
   16a08:	46bd      	mov	sp, r7
   16a0a:	b002      	add	sp, #8
   16a0c:	bd80      	pop	{r7, pc}
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	00016a71 	.word	0x00016a71
   16a14:	40001800 	.word	0x40001800

00016a18 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   16a18:	b580      	push	{r7, lr}
   16a1a:	b082      	sub	sp, #8
   16a1c:	af00      	add	r7, sp, #0
   16a1e:	0002      	movs	r2, r0
   16a20:	1dfb      	adds	r3, r7, #7
   16a22:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16a24:	4b0f      	ldr	r3, [pc, #60]	; (16a64 <system_gclk_chan_enable+0x4c>)
   16a26:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
   16a28:	490f      	ldr	r1, [pc, #60]	; (16a68 <system_gclk_chan_enable+0x50>)
   16a2a:	1dfb      	adds	r3, r7, #7
   16a2c:	781b      	ldrb	r3, [r3, #0]
   16a2e:	480e      	ldr	r0, [pc, #56]	; (16a68 <system_gclk_chan_enable+0x50>)
   16a30:	1dfa      	adds	r2, r7, #7
   16a32:	7812      	ldrb	r2, [r2, #0]
   16a34:	3220      	adds	r2, #32
   16a36:	0092      	lsls	r2, r2, #2
   16a38:	5812      	ldr	r2, [r2, r0]
   16a3a:	2040      	movs	r0, #64	; 0x40
   16a3c:	4302      	orrs	r2, r0
   16a3e:	3320      	adds	r3, #32
   16a40:	009b      	lsls	r3, r3, #2
   16a42:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
   16a44:	46c0      	nop			; (mov r8, r8)
   16a46:	4a08      	ldr	r2, [pc, #32]	; (16a68 <system_gclk_chan_enable+0x50>)
   16a48:	1dfb      	adds	r3, r7, #7
   16a4a:	781b      	ldrb	r3, [r3, #0]
   16a4c:	3320      	adds	r3, #32
   16a4e:	009b      	lsls	r3, r3, #2
   16a50:	589b      	ldr	r3, [r3, r2]
   16a52:	2240      	movs	r2, #64	; 0x40
   16a54:	4013      	ands	r3, r2
   16a56:	d0f6      	beq.n	16a46 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   16a58:	4b04      	ldr	r3, [pc, #16]	; (16a6c <system_gclk_chan_enable+0x54>)
   16a5a:	4798      	blx	r3
}
   16a5c:	46c0      	nop			; (mov r8, r8)
   16a5e:	46bd      	mov	sp, r7
   16a60:	b002      	add	sp, #8
   16a62:	bd80      	pop	{r7, pc}
   16a64:	00016719 	.word	0x00016719
   16a68:	40001800 	.word	0x40001800
   16a6c:	0001672d 	.word	0x0001672d

00016a70 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   16a70:	b580      	push	{r7, lr}
   16a72:	b082      	sub	sp, #8
   16a74:	af00      	add	r7, sp, #0
   16a76:	0002      	movs	r2, r0
   16a78:	1dfb      	adds	r3, r7, #7
   16a7a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16a7c:	4b0f      	ldr	r3, [pc, #60]	; (16abc <system_gclk_chan_disable+0x4c>)
   16a7e:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
   16a80:	490f      	ldr	r1, [pc, #60]	; (16ac0 <system_gclk_chan_disable+0x50>)
   16a82:	1dfb      	adds	r3, r7, #7
   16a84:	781b      	ldrb	r3, [r3, #0]
   16a86:	480e      	ldr	r0, [pc, #56]	; (16ac0 <system_gclk_chan_disable+0x50>)
   16a88:	1dfa      	adds	r2, r7, #7
   16a8a:	7812      	ldrb	r2, [r2, #0]
   16a8c:	3220      	adds	r2, #32
   16a8e:	0092      	lsls	r2, r2, #2
   16a90:	5812      	ldr	r2, [r2, r0]
   16a92:	2040      	movs	r0, #64	; 0x40
   16a94:	4382      	bics	r2, r0
   16a96:	3320      	adds	r3, #32
   16a98:	009b      	lsls	r3, r3, #2
   16a9a:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
   16a9c:	46c0      	nop			; (mov r8, r8)
   16a9e:	4a08      	ldr	r2, [pc, #32]	; (16ac0 <system_gclk_chan_disable+0x50>)
   16aa0:	1dfb      	adds	r3, r7, #7
   16aa2:	781b      	ldrb	r3, [r3, #0]
   16aa4:	3320      	adds	r3, #32
   16aa6:	009b      	lsls	r3, r3, #2
   16aa8:	589b      	ldr	r3, [r3, r2]
   16aaa:	2240      	movs	r2, #64	; 0x40
   16aac:	4013      	ands	r3, r2
   16aae:	d1f6      	bne.n	16a9e <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
   16ab0:	4b04      	ldr	r3, [pc, #16]	; (16ac4 <system_gclk_chan_disable+0x54>)
   16ab2:	4798      	blx	r3
}
   16ab4:	46c0      	nop			; (mov r8, r8)
   16ab6:	46bd      	mov	sp, r7
   16ab8:	b002      	add	sp, #8
   16aba:	bd80      	pop	{r7, pc}
   16abc:	00016719 	.word	0x00016719
   16ac0:	40001800 	.word	0x40001800
   16ac4:	0001672d 	.word	0x0001672d

00016ac8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   16ac8:	b580      	push	{r7, lr}
   16aca:	b084      	sub	sp, #16
   16acc:	af00      	add	r7, sp, #0
   16ace:	0002      	movs	r2, r0
   16ad0:	1dfb      	adds	r3, r7, #7
   16ad2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   16ad4:	4b0d      	ldr	r3, [pc, #52]	; (16b0c <system_gclk_chan_get_hz+0x44>)
   16ad6:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
   16ad8:	4a0d      	ldr	r2, [pc, #52]	; (16b10 <system_gclk_chan_get_hz+0x48>)
   16ada:	1dfb      	adds	r3, r7, #7
   16adc:	781b      	ldrb	r3, [r3, #0]
   16ade:	3320      	adds	r3, #32
   16ae0:	009b      	lsls	r3, r3, #2
   16ae2:	589b      	ldr	r3, [r3, r2]
   16ae4:	071b      	lsls	r3, r3, #28
   16ae6:	0f1b      	lsrs	r3, r3, #28
   16ae8:	b2da      	uxtb	r2, r3
   16aea:	230f      	movs	r3, #15
   16aec:	18fb      	adds	r3, r7, r3
   16aee:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
   16af0:	4b08      	ldr	r3, [pc, #32]	; (16b14 <system_gclk_chan_get_hz+0x4c>)
   16af2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   16af4:	230f      	movs	r3, #15
   16af6:	18fb      	adds	r3, r7, r3
   16af8:	781b      	ldrb	r3, [r3, #0]
   16afa:	0018      	movs	r0, r3
   16afc:	4b06      	ldr	r3, [pc, #24]	; (16b18 <system_gclk_chan_get_hz+0x50>)
   16afe:	4798      	blx	r3
   16b00:	0003      	movs	r3, r0
}
   16b02:	0018      	movs	r0, r3
   16b04:	46bd      	mov	sp, r7
   16b06:	b004      	add	sp, #16
   16b08:	bd80      	pop	{r7, pc}
   16b0a:	46c0      	nop			; (mov r8, r8)
   16b0c:	00016719 	.word	0x00016719
   16b10:	40001800 	.word	0x40001800
   16b14:	0001672d 	.word	0x0001672d
   16b18:	00016919 	.word	0x00016919

00016b1c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   16b1c:	b580      	push	{r7, lr}
   16b1e:	b084      	sub	sp, #16
   16b20:	af00      	add	r7, sp, #0
   16b22:	0002      	movs	r2, r0
   16b24:	1dfb      	adds	r3, r7, #7
   16b26:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   16b28:	230f      	movs	r3, #15
   16b2a:	18fb      	adds	r3, r7, r3
   16b2c:	2200      	movs	r2, #0
   16b2e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   16b30:	1dfb      	adds	r3, r7, #7
   16b32:	781b      	ldrb	r3, [r3, #0]
   16b34:	2b7f      	cmp	r3, #127	; 0x7f
   16b36:	d80b      	bhi.n	16b50 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   16b38:	4a13      	ldr	r2, [pc, #76]	; (16b88 <system_interrupt_clear_pending+0x6c>)
   16b3a:	1dfb      	adds	r3, r7, #7
   16b3c:	781b      	ldrb	r3, [r3, #0]
   16b3e:	b25b      	sxtb	r3, r3
   16b40:	2101      	movs	r1, #1
   16b42:	4099      	lsls	r1, r3
   16b44:	000b      	movs	r3, r1
   16b46:	0019      	movs	r1, r3
   16b48:	23c0      	movs	r3, #192	; 0xc0
   16b4a:	005b      	lsls	r3, r3, #1
   16b4c:	50d1      	str	r1, [r2, r3]
   16b4e:	e014      	b.n	16b7a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   16b50:	1dfb      	adds	r3, r7, #7
   16b52:	781b      	ldrb	r3, [r3, #0]
   16b54:	b25b      	sxtb	r3, r3
   16b56:	330e      	adds	r3, #14
   16b58:	d101      	bne.n	16b5e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   16b5a:	2317      	movs	r3, #23
   16b5c:	e010      	b.n	16b80 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   16b5e:	1dfb      	adds	r3, r7, #7
   16b60:	781b      	ldrb	r3, [r3, #0]
   16b62:	b25b      	sxtb	r3, r3
   16b64:	3301      	adds	r3, #1
   16b66:	d104      	bne.n	16b72 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   16b68:	4b08      	ldr	r3, [pc, #32]	; (16b8c <system_interrupt_clear_pending+0x70>)
   16b6a:	2280      	movs	r2, #128	; 0x80
   16b6c:	0492      	lsls	r2, r2, #18
   16b6e:	605a      	str	r2, [r3, #4]
   16b70:	e003      	b.n	16b7a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   16b72:	230f      	movs	r3, #15
   16b74:	18fb      	adds	r3, r7, r3
   16b76:	2217      	movs	r2, #23
   16b78:	701a      	strb	r2, [r3, #0]
	}

	return status;
   16b7a:	230f      	movs	r3, #15
   16b7c:	18fb      	adds	r3, r7, r3
   16b7e:	781b      	ldrb	r3, [r3, #0]
}
   16b80:	0018      	movs	r0, r3
   16b82:	46bd      	mov	sp, r7
   16b84:	b004      	add	sp, #16
   16b86:	bd80      	pop	{r7, pc}
   16b88:	e000e100 	.word	0xe000e100
   16b8c:	e000ed00 	.word	0xe000ed00

00016b90 <system_pinmux_get_group_from_gpio_pin>:
{
   16b90:	b580      	push	{r7, lr}
   16b92:	b084      	sub	sp, #16
   16b94:	af00      	add	r7, sp, #0
   16b96:	0002      	movs	r2, r0
   16b98:	1dfb      	adds	r3, r7, #7
   16b9a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16b9c:	230f      	movs	r3, #15
   16b9e:	18fb      	adds	r3, r7, r3
   16ba0:	1dfa      	adds	r2, r7, #7
   16ba2:	7812      	ldrb	r2, [r2, #0]
   16ba4:	09d2      	lsrs	r2, r2, #7
   16ba6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16ba8:	230e      	movs	r3, #14
   16baa:	18fb      	adds	r3, r7, r3
   16bac:	1dfa      	adds	r2, r7, #7
   16bae:	7812      	ldrb	r2, [r2, #0]
   16bb0:	0952      	lsrs	r2, r2, #5
   16bb2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16bb4:	4b0d      	ldr	r3, [pc, #52]	; (16bec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16bb6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16bb8:	230f      	movs	r3, #15
   16bba:	18fb      	adds	r3, r7, r3
   16bbc:	781b      	ldrb	r3, [r3, #0]
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	d10f      	bne.n	16be2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16bc2:	230f      	movs	r3, #15
   16bc4:	18fb      	adds	r3, r7, r3
   16bc6:	781b      	ldrb	r3, [r3, #0]
   16bc8:	009b      	lsls	r3, r3, #2
   16bca:	2210      	movs	r2, #16
   16bcc:	4694      	mov	ip, r2
   16bce:	44bc      	add	ip, r7
   16bd0:	4463      	add	r3, ip
   16bd2:	3b08      	subs	r3, #8
   16bd4:	681a      	ldr	r2, [r3, #0]
   16bd6:	230e      	movs	r3, #14
   16bd8:	18fb      	adds	r3, r7, r3
   16bda:	781b      	ldrb	r3, [r3, #0]
   16bdc:	01db      	lsls	r3, r3, #7
   16bde:	18d3      	adds	r3, r2, r3
   16be0:	e000      	b.n	16be4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16be2:	2300      	movs	r3, #0
}
   16be4:	0018      	movs	r0, r3
   16be6:	46bd      	mov	sp, r7
   16be8:	b004      	add	sp, #16
   16bea:	bd80      	pop	{r7, pc}
   16bec:	40002800 	.word	0x40002800

00016bf0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   16bf0:	b580      	push	{r7, lr}
   16bf2:	b088      	sub	sp, #32
   16bf4:	af00      	add	r7, sp, #0
   16bf6:	60f8      	str	r0, [r7, #12]
   16bf8:	60b9      	str	r1, [r7, #8]
   16bfa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   16bfc:	2300      	movs	r3, #0
   16bfe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   16c00:	687b      	ldr	r3, [r7, #4]
   16c02:	78db      	ldrb	r3, [r3, #3]
   16c04:	2201      	movs	r2, #1
   16c06:	4053      	eors	r3, r2
   16c08:	b2db      	uxtb	r3, r3
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	d035      	beq.n	16c7a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   16c0e:	687b      	ldr	r3, [r7, #4]
   16c10:	781b      	ldrb	r3, [r3, #0]
   16c12:	2b80      	cmp	r3, #128	; 0x80
   16c14:	d00b      	beq.n	16c2e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   16c16:	69fb      	ldr	r3, [r7, #28]
   16c18:	2280      	movs	r2, #128	; 0x80
   16c1a:	0252      	lsls	r2, r2, #9
   16c1c:	4313      	orrs	r3, r2
   16c1e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   16c20:	687b      	ldr	r3, [r7, #4]
   16c22:	781b      	ldrb	r3, [r3, #0]
   16c24:	061b      	lsls	r3, r3, #24
   16c26:	001a      	movs	r2, r3
   16c28:	69fb      	ldr	r3, [r7, #28]
   16c2a:	4313      	orrs	r3, r2
   16c2c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16c2e:	687b      	ldr	r3, [r7, #4]
   16c30:	785b      	ldrb	r3, [r3, #1]
   16c32:	2b00      	cmp	r3, #0
   16c34:	d003      	beq.n	16c3e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16c36:	687b      	ldr	r3, [r7, #4]
   16c38:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16c3a:	2b02      	cmp	r3, #2
   16c3c:	d110      	bne.n	16c60 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   16c3e:	69fb      	ldr	r3, [r7, #28]
   16c40:	2280      	movs	r2, #128	; 0x80
   16c42:	0292      	lsls	r2, r2, #10
   16c44:	4313      	orrs	r3, r2
   16c46:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	789b      	ldrb	r3, [r3, #2]
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d004      	beq.n	16c5a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   16c50:	69fb      	ldr	r3, [r7, #28]
   16c52:	2280      	movs	r2, #128	; 0x80
   16c54:	02d2      	lsls	r2, r2, #11
   16c56:	4313      	orrs	r3, r2
   16c58:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   16c5a:	68fb      	ldr	r3, [r7, #12]
   16c5c:	68ba      	ldr	r2, [r7, #8]
   16c5e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16c60:	687b      	ldr	r3, [r7, #4]
   16c62:	785b      	ldrb	r3, [r3, #1]
   16c64:	2b01      	cmp	r3, #1
   16c66:	d003      	beq.n	16c70 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16c68:	687b      	ldr	r3, [r7, #4]
   16c6a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16c6c:	2b02      	cmp	r3, #2
   16c6e:	d107      	bne.n	16c80 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   16c70:	69fb      	ldr	r3, [r7, #28]
   16c72:	4a22      	ldr	r2, [pc, #136]	; (16cfc <_system_pinmux_config+0x10c>)
   16c74:	4013      	ands	r3, r2
   16c76:	61fb      	str	r3, [r7, #28]
   16c78:	e002      	b.n	16c80 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   16c7a:	68fb      	ldr	r3, [r7, #12]
   16c7c:	68ba      	ldr	r2, [r7, #8]
   16c7e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   16c80:	68bb      	ldr	r3, [r7, #8]
   16c82:	041b      	lsls	r3, r3, #16
   16c84:	0c1b      	lsrs	r3, r3, #16
   16c86:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   16c88:	68bb      	ldr	r3, [r7, #8]
   16c8a:	0c1b      	lsrs	r3, r3, #16
   16c8c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16c8e:	69ba      	ldr	r2, [r7, #24]
   16c90:	69fb      	ldr	r3, [r7, #28]
   16c92:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16c94:	22a0      	movs	r2, #160	; 0xa0
   16c96:	05d2      	lsls	r2, r2, #23
   16c98:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16c9a:	68fb      	ldr	r3, [r7, #12]
   16c9c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16c9e:	697a      	ldr	r2, [r7, #20]
   16ca0:	69fb      	ldr	r3, [r7, #28]
   16ca2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16ca4:	22d0      	movs	r2, #208	; 0xd0
   16ca6:	0612      	lsls	r2, r2, #24
   16ca8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16caa:	68fb      	ldr	r3, [r7, #12]
   16cac:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	78db      	ldrb	r3, [r3, #3]
   16cb2:	2201      	movs	r2, #1
   16cb4:	4053      	eors	r3, r2
   16cb6:	b2db      	uxtb	r3, r3
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d01a      	beq.n	16cf2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   16cbc:	69fa      	ldr	r2, [r7, #28]
   16cbe:	2380      	movs	r3, #128	; 0x80
   16cc0:	02db      	lsls	r3, r3, #11
   16cc2:	4013      	ands	r3, r2
   16cc4:	d00a      	beq.n	16cdc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	789b      	ldrb	r3, [r3, #2]
   16cca:	2b01      	cmp	r3, #1
   16ccc:	d103      	bne.n	16cd6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   16cce:	68fb      	ldr	r3, [r7, #12]
   16cd0:	68ba      	ldr	r2, [r7, #8]
   16cd2:	619a      	str	r2, [r3, #24]
   16cd4:	e002      	b.n	16cdc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   16cd6:	68fb      	ldr	r3, [r7, #12]
   16cd8:	68ba      	ldr	r2, [r7, #8]
   16cda:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16cdc:	687b      	ldr	r3, [r7, #4]
   16cde:	785b      	ldrb	r3, [r3, #1]
   16ce0:	2b01      	cmp	r3, #1
   16ce2:	d003      	beq.n	16cec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16ce4:	687b      	ldr	r3, [r7, #4]
   16ce6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16ce8:	2b02      	cmp	r3, #2
   16cea:	d102      	bne.n	16cf2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   16cec:	68fb      	ldr	r3, [r7, #12]
   16cee:	68ba      	ldr	r2, [r7, #8]
   16cf0:	609a      	str	r2, [r3, #8]
		}
	}
}
   16cf2:	46c0      	nop			; (mov r8, r8)
   16cf4:	46bd      	mov	sp, r7
   16cf6:	b008      	add	sp, #32
   16cf8:	bd80      	pop	{r7, pc}
   16cfa:	46c0      	nop			; (mov r8, r8)
   16cfc:	fffbffff 	.word	0xfffbffff

00016d00 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   16d00:	b580      	push	{r7, lr}
   16d02:	b084      	sub	sp, #16
   16d04:	af00      	add	r7, sp, #0
   16d06:	0002      	movs	r2, r0
   16d08:	6039      	str	r1, [r7, #0]
   16d0a:	1dfb      	adds	r3, r7, #7
   16d0c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16d0e:	1dfb      	adds	r3, r7, #7
   16d10:	781b      	ldrb	r3, [r3, #0]
   16d12:	0018      	movs	r0, r3
   16d14:	4b0a      	ldr	r3, [pc, #40]	; (16d40 <system_pinmux_pin_set_config+0x40>)
   16d16:	4798      	blx	r3
   16d18:	0003      	movs	r3, r0
   16d1a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   16d1c:	1dfb      	adds	r3, r7, #7
   16d1e:	781b      	ldrb	r3, [r3, #0]
   16d20:	221f      	movs	r2, #31
   16d22:	4013      	ands	r3, r2
   16d24:	2201      	movs	r2, #1
   16d26:	409a      	lsls	r2, r3
   16d28:	0013      	movs	r3, r2
   16d2a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   16d2c:	683a      	ldr	r2, [r7, #0]
   16d2e:	68b9      	ldr	r1, [r7, #8]
   16d30:	68fb      	ldr	r3, [r7, #12]
   16d32:	0018      	movs	r0, r3
   16d34:	4b03      	ldr	r3, [pc, #12]	; (16d44 <system_pinmux_pin_set_config+0x44>)
   16d36:	4798      	blx	r3
}
   16d38:	46c0      	nop			; (mov r8, r8)
   16d3a:	46bd      	mov	sp, r7
   16d3c:	b004      	add	sp, #16
   16d3e:	bd80      	pop	{r7, pc}
   16d40:	00016b91 	.word	0x00016b91
   16d44:	00016bf1 	.word	0x00016bf1

00016d48 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   16d48:	b580      	push	{r7, lr}
   16d4a:	af00      	add	r7, sp, #0
	return;
   16d4c:	46c0      	nop			; (mov r8, r8)
}
   16d4e:	46bd      	mov	sp, r7
   16d50:	bd80      	pop	{r7, pc}
	...

00016d54 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   16d54:	b580      	push	{r7, lr}
   16d56:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   16d58:	4b06      	ldr	r3, [pc, #24]	; (16d74 <system_init+0x20>)
   16d5a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   16d5c:	4b06      	ldr	r3, [pc, #24]	; (16d78 <system_init+0x24>)
   16d5e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   16d60:	4b06      	ldr	r3, [pc, #24]	; (16d7c <system_init+0x28>)
   16d62:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   16d64:	4b06      	ldr	r3, [pc, #24]	; (16d80 <system_init+0x2c>)
   16d66:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   16d68:	4b06      	ldr	r3, [pc, #24]	; (16d84 <system_init+0x30>)
   16d6a:	4798      	blx	r3
}
   16d6c:	46c0      	nop			; (mov r8, r8)
   16d6e:	46bd      	mov	sp, r7
   16d70:	bd80      	pop	{r7, pc}
   16d72:	46c0      	nop			; (mov r8, r8)
   16d74:	000163ed 	.word	0x000163ed
   16d78:	000128e5 	.word	0x000128e5
   16d7c:	00016d49 	.word	0x00016d49
   16d80:	00012dbd 	.word	0x00012dbd
   16d84:	00016d49 	.word	0x00016d49

00016d88 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
   16d88:	b580      	push	{r7, lr}
   16d8a:	af00      	add	r7, sp, #0
   16d8c:	2000      	movs	r0, #0
   16d8e:	4b02      	ldr	r3, [pc, #8]	; (16d98 <TC0_Handler+0x10>)
   16d90:	4798      	blx	r3
   16d92:	46c0      	nop			; (mov r8, r8)
   16d94:	46bd      	mov	sp, r7
   16d96:	bd80      	pop	{r7, pc}
   16d98:	00016dc5 	.word	0x00016dc5

00016d9c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
   16d9c:	b580      	push	{r7, lr}
   16d9e:	af00      	add	r7, sp, #0
   16da0:	2001      	movs	r0, #1
   16da2:	4b02      	ldr	r3, [pc, #8]	; (16dac <TC1_Handler+0x10>)
   16da4:	4798      	blx	r3
   16da6:	46c0      	nop			; (mov r8, r8)
   16da8:	46bd      	mov	sp, r7
   16daa:	bd80      	pop	{r7, pc}
   16dac:	00016dc5 	.word	0x00016dc5

00016db0 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
   16db0:	b580      	push	{r7, lr}
   16db2:	af00      	add	r7, sp, #0
   16db4:	2002      	movs	r0, #2
   16db6:	4b02      	ldr	r3, [pc, #8]	; (16dc0 <TC4_Handler+0x10>)
   16db8:	4798      	blx	r3
   16dba:	46c0      	nop			; (mov r8, r8)
   16dbc:	46bd      	mov	sp, r7
   16dbe:	bd80      	pop	{r7, pc}
   16dc0:	00016dc5 	.word	0x00016dc5

00016dc4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   16dc4:	b580      	push	{r7, lr}
   16dc6:	b084      	sub	sp, #16
   16dc8:	af00      	add	r7, sp, #0
   16dca:	0002      	movs	r2, r0
   16dcc:	1dfb      	adds	r3, r7, #7
   16dce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   16dd0:	1dfb      	adds	r3, r7, #7
   16dd2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   16dd4:	4b28      	ldr	r3, [pc, #160]	; (16e78 <_tc_interrupt_handler+0xb4>)
   16dd6:	0092      	lsls	r2, r2, #2
   16dd8:	58d3      	ldr	r3, [r2, r3]
   16dda:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16ddc:	68fb      	ldr	r3, [r7, #12]
   16dde:	681b      	ldr	r3, [r3, #0]
   16de0:	7a9b      	ldrb	r3, [r3, #10]
   16de2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   16de4:	68fa      	ldr	r2, [r7, #12]
   16de6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16de8:	4013      	ands	r3, r2
   16dea:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   16dec:	68fb      	ldr	r3, [r7, #12]
   16dee:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16df0:	230b      	movs	r3, #11
   16df2:	18fb      	adds	r3, r7, r3
   16df4:	400a      	ands	r2, r1
   16df6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   16df8:	230b      	movs	r3, #11
   16dfa:	18fb      	adds	r3, r7, r3
   16dfc:	781b      	ldrb	r3, [r3, #0]
   16dfe:	2201      	movs	r2, #1
   16e00:	4013      	ands	r3, r2
   16e02:	d008      	beq.n	16e16 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   16e04:	68fb      	ldr	r3, [r7, #12]
   16e06:	689b      	ldr	r3, [r3, #8]
   16e08:	68fa      	ldr	r2, [r7, #12]
   16e0a:	0010      	movs	r0, r2
   16e0c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   16e0e:	68fb      	ldr	r3, [r7, #12]
   16e10:	681b      	ldr	r3, [r3, #0]
   16e12:	2201      	movs	r2, #1
   16e14:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16e16:	230b      	movs	r3, #11
   16e18:	18fb      	adds	r3, r7, r3
   16e1a:	781b      	ldrb	r3, [r3, #0]
   16e1c:	2202      	movs	r2, #2
   16e1e:	4013      	ands	r3, r2
   16e20:	d008      	beq.n	16e34 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16e22:	68fb      	ldr	r3, [r7, #12]
   16e24:	68db      	ldr	r3, [r3, #12]
   16e26:	68fa      	ldr	r2, [r7, #12]
   16e28:	0010      	movs	r0, r2
   16e2a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   16e2c:	68fb      	ldr	r3, [r7, #12]
   16e2e:	681b      	ldr	r3, [r3, #0]
   16e30:	2202      	movs	r2, #2
   16e32:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   16e34:	230b      	movs	r3, #11
   16e36:	18fb      	adds	r3, r7, r3
   16e38:	781b      	ldrb	r3, [r3, #0]
   16e3a:	2210      	movs	r2, #16
   16e3c:	4013      	ands	r3, r2
   16e3e:	d008      	beq.n	16e52 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   16e40:	68fb      	ldr	r3, [r7, #12]
   16e42:	691b      	ldr	r3, [r3, #16]
   16e44:	68fa      	ldr	r2, [r7, #12]
   16e46:	0010      	movs	r0, r2
   16e48:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   16e4a:	68fb      	ldr	r3, [r7, #12]
   16e4c:	681b      	ldr	r3, [r3, #0]
   16e4e:	2210      	movs	r2, #16
   16e50:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   16e52:	230b      	movs	r3, #11
   16e54:	18fb      	adds	r3, r7, r3
   16e56:	781b      	ldrb	r3, [r3, #0]
   16e58:	2220      	movs	r2, #32
   16e5a:	4013      	ands	r3, r2
   16e5c:	d008      	beq.n	16e70 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   16e5e:	68fb      	ldr	r3, [r7, #12]
   16e60:	695b      	ldr	r3, [r3, #20]
   16e62:	68fa      	ldr	r2, [r7, #12]
   16e64:	0010      	movs	r0, r2
   16e66:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   16e68:	68fb      	ldr	r3, [r7, #12]
   16e6a:	681b      	ldr	r3, [r3, #0]
   16e6c:	2220      	movs	r2, #32
   16e6e:	729a      	strb	r2, [r3, #10]
	}
}
   16e70:	46c0      	nop			; (mov r8, r8)
   16e72:	46bd      	mov	sp, r7
   16e74:	b004      	add	sp, #16
   16e76:	bd80      	pop	{r7, pc}
   16e78:	200024e0 	.word	0x200024e0

00016e7c <system_gclk_chan_get_config_defaults>:
{
   16e7c:	b580      	push	{r7, lr}
   16e7e:	b082      	sub	sp, #8
   16e80:	af00      	add	r7, sp, #0
   16e82:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	2200      	movs	r2, #0
   16e88:	701a      	strb	r2, [r3, #0]
}
   16e8a:	46c0      	nop			; (mov r8, r8)
   16e8c:	46bd      	mov	sp, r7
   16e8e:	b002      	add	sp, #8
   16e90:	bd80      	pop	{r7, pc}
	...

00016e94 <system_apb_clock_set_mask>:
{
   16e94:	b580      	push	{r7, lr}
   16e96:	b082      	sub	sp, #8
   16e98:	af00      	add	r7, sp, #0
   16e9a:	0002      	movs	r2, r0
   16e9c:	6039      	str	r1, [r7, #0]
   16e9e:	1dfb      	adds	r3, r7, #7
   16ea0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16ea2:	1dfb      	adds	r3, r7, #7
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	2b04      	cmp	r3, #4
   16ea8:	d827      	bhi.n	16efa <system_apb_clock_set_mask+0x66>
   16eaa:	009a      	lsls	r2, r3, #2
   16eac:	4b16      	ldr	r3, [pc, #88]	; (16f08 <system_apb_clock_set_mask+0x74>)
   16eae:	18d3      	adds	r3, r2, r3
   16eb0:	681b      	ldr	r3, [r3, #0]
   16eb2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
   16eb4:	4b15      	ldr	r3, [pc, #84]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16eb6:	4a15      	ldr	r2, [pc, #84]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16eb8:	6951      	ldr	r1, [r2, #20]
   16eba:	683a      	ldr	r2, [r7, #0]
   16ebc:	430a      	orrs	r2, r1
   16ebe:	615a      	str	r2, [r3, #20]
			break;
   16ec0:	e01d      	b.n	16efe <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
   16ec2:	4b12      	ldr	r3, [pc, #72]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ec4:	4a11      	ldr	r2, [pc, #68]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ec6:	6991      	ldr	r1, [r2, #24]
   16ec8:	683a      	ldr	r2, [r7, #0]
   16eca:	430a      	orrs	r2, r1
   16ecc:	619a      	str	r2, [r3, #24]
			break;
   16ece:	e016      	b.n	16efe <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
   16ed0:	4b0e      	ldr	r3, [pc, #56]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ed2:	4a0e      	ldr	r2, [pc, #56]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ed4:	69d1      	ldr	r1, [r2, #28]
   16ed6:	683a      	ldr	r2, [r7, #0]
   16ed8:	430a      	orrs	r2, r1
   16eda:	61da      	str	r2, [r3, #28]
			break;
   16edc:	e00f      	b.n	16efe <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
   16ede:	4b0b      	ldr	r3, [pc, #44]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ee0:	4a0a      	ldr	r2, [pc, #40]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ee2:	6a11      	ldr	r1, [r2, #32]
   16ee4:	683a      	ldr	r2, [r7, #0]
   16ee6:	430a      	orrs	r2, r1
   16ee8:	621a      	str	r2, [r3, #32]
			break;
   16eea:	e008      	b.n	16efe <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
   16eec:	4b07      	ldr	r3, [pc, #28]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16eee:	4a07      	ldr	r2, [pc, #28]	; (16f0c <system_apb_clock_set_mask+0x78>)
   16ef0:	6a51      	ldr	r1, [r2, #36]	; 0x24
   16ef2:	683a      	ldr	r2, [r7, #0]
   16ef4:	430a      	orrs	r2, r1
   16ef6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   16ef8:	e001      	b.n	16efe <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
   16efa:	2317      	movs	r3, #23
   16efc:	e000      	b.n	16f00 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
   16efe:	2300      	movs	r3, #0
}
   16f00:	0018      	movs	r0, r3
   16f02:	46bd      	mov	sp, r7
   16f04:	b002      	add	sp, #8
   16f06:	bd80      	pop	{r7, pc}
   16f08:	0001eb08 	.word	0x0001eb08
   16f0c:	40000400 	.word	0x40000400

00016f10 <system_pinmux_get_config_defaults>:
{
   16f10:	b580      	push	{r7, lr}
   16f12:	b082      	sub	sp, #8
   16f14:	af00      	add	r7, sp, #0
   16f16:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16f18:	687b      	ldr	r3, [r7, #4]
   16f1a:	2280      	movs	r2, #128	; 0x80
   16f1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16f1e:	687b      	ldr	r3, [r7, #4]
   16f20:	2200      	movs	r2, #0
   16f22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16f24:	687b      	ldr	r3, [r7, #4]
   16f26:	2201      	movs	r2, #1
   16f28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16f2a:	687b      	ldr	r3, [r7, #4]
   16f2c:	2200      	movs	r2, #0
   16f2e:	70da      	strb	r2, [r3, #3]
}
   16f30:	46c0      	nop			; (mov r8, r8)
   16f32:	46bd      	mov	sp, r7
   16f34:	b002      	add	sp, #8
   16f36:	bd80      	pop	{r7, pc}

00016f38 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
   16f38:	b580      	push	{r7, lr}
   16f3a:	b084      	sub	sp, #16
   16f3c:	af00      	add	r7, sp, #0
   16f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16f40:	687b      	ldr	r3, [r7, #4]
   16f42:	681b      	ldr	r3, [r3, #0]
   16f44:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
   16f46:	68fb      	ldr	r3, [r7, #12]
   16f48:	691b      	ldr	r3, [r3, #16]
   16f4a:	1e5a      	subs	r2, r3, #1
   16f4c:	4193      	sbcs	r3, r2
   16f4e:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
   16f50:	0018      	movs	r0, r3
   16f52:	46bd      	mov	sp, r7
   16f54:	b004      	add	sp, #16
   16f56:	bd80      	pop	{r7, pc}

00016f58 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
   16f58:	b580      	push	{r7, lr}
   16f5a:	b084      	sub	sp, #16
   16f5c:	af00      	add	r7, sp, #0
   16f5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16f60:	687b      	ldr	r3, [r7, #4]
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16f66:	46c0      	nop			; (mov r8, r8)
   16f68:	687b      	ldr	r3, [r7, #4]
   16f6a:	0018      	movs	r0, r3
   16f6c:	4b0a      	ldr	r3, [pc, #40]	; (16f98 <tc_disable+0x40>)
   16f6e:	4798      	blx	r3
   16f70:	1e03      	subs	r3, r0, #0
   16f72:	d1f9      	bne.n	16f68 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16f74:	68fb      	ldr	r3, [r7, #12]
   16f76:	2233      	movs	r2, #51	; 0x33
   16f78:	721a      	strb	r2, [r3, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16f7a:	68fb      	ldr	r3, [r7, #12]
   16f7c:	2233      	movs	r2, #51	; 0x33
   16f7e:	729a      	strb	r2, [r3, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   16f80:	68fb      	ldr	r3, [r7, #12]
   16f82:	681b      	ldr	r3, [r3, #0]
   16f84:	2202      	movs	r2, #2
   16f86:	4393      	bics	r3, r2
   16f88:	001a      	movs	r2, r3
   16f8a:	68fb      	ldr	r3, [r7, #12]
   16f8c:	601a      	str	r2, [r3, #0]
}
   16f8e:	46c0      	nop			; (mov r8, r8)
   16f90:	46bd      	mov	sp, r7
   16f92:	b004      	add	sp, #16
   16f94:	bd80      	pop	{r7, pc}
   16f96:	46c0      	nop			; (mov r8, r8)
   16f98:	00016f39 	.word	0x00016f39

00016f9c <tc_sync_read_count>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_sync_read_count(
		const struct tc_module *const module_inst)
{
   16f9c:	b580      	push	{r7, lr}
   16f9e:	b084      	sub	sp, #16
   16fa0:	af00      	add	r7, sp, #0
   16fa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16fa4:	687b      	ldr	r3, [r7, #4]
   16fa6:	681b      	ldr	r3, [r3, #0]
   16fa8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16faa:	46c0      	nop			; (mov r8, r8)
   16fac:	687b      	ldr	r3, [r7, #4]
   16fae:	0018      	movs	r0, r3
   16fb0:	4b0a      	ldr	r3, [pc, #40]	; (16fdc <tc_sync_read_count+0x40>)
   16fb2:	4798      	blx	r3
   16fb4:	1e03      	subs	r3, r0, #0
   16fb6:	d1f9      	bne.n	16fac <tc_sync_read_count+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   16fb8:	68fb      	ldr	r3, [r7, #12]
   16fba:	2200      	movs	r2, #0
   16fbc:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
   16fbe:	46c0      	nop			; (mov r8, r8)
   16fc0:	687b      	ldr	r3, [r7, #4]
   16fc2:	0018      	movs	r0, r3
   16fc4:	4b05      	ldr	r3, [pc, #20]	; (16fdc <tc_sync_read_count+0x40>)
   16fc6:	4798      	blx	r3
   16fc8:	1e03      	subs	r3, r0, #0
   16fca:	d1f9      	bne.n	16fc0 <tc_sync_read_count+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
   16fcc:	68fb      	ldr	r3, [r7, #12]
   16fce:	2280      	movs	r2, #128	; 0x80
   16fd0:	715a      	strb	r2, [r3, #5]
}
   16fd2:	46c0      	nop			; (mov r8, r8)
   16fd4:	46bd      	mov	sp, r7
   16fd6:	b004      	add	sp, #16
   16fd8:	bd80      	pop	{r7, pc}
   16fda:	46c0      	nop			; (mov r8, r8)
   16fdc:	00016f39 	.word	0x00016f39

00016fe0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
   16fe0:	b590      	push	{r4, r7, lr}
   16fe2:	b087      	sub	sp, #28
   16fe4:	af00      	add	r7, sp, #0
   16fe6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   16fe8:	2308      	movs	r3, #8
   16fea:	18fb      	adds	r3, r7, r3
   16fec:	4a0d      	ldr	r2, [pc, #52]	; (17024 <_tc_get_inst_index+0x44>)
   16fee:	ca13      	ldmia	r2!, {r0, r1, r4}
   16ff0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   16ff2:	2300      	movs	r3, #0
   16ff4:	617b      	str	r3, [r7, #20]
   16ff6:	e00d      	b.n	17014 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
   16ff8:	2308      	movs	r3, #8
   16ffa:	18fb      	adds	r3, r7, r3
   16ffc:	697a      	ldr	r2, [r7, #20]
   16ffe:	0092      	lsls	r2, r2, #2
   17000:	58d2      	ldr	r2, [r2, r3]
   17002:	687b      	ldr	r3, [r7, #4]
   17004:	429a      	cmp	r2, r3
   17006:	d102      	bne.n	1700e <_tc_get_inst_index+0x2e>
			return i;
   17008:	697b      	ldr	r3, [r7, #20]
   1700a:	b2db      	uxtb	r3, r3
   1700c:	e006      	b.n	1701c <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1700e:	697b      	ldr	r3, [r7, #20]
   17010:	3301      	adds	r3, #1
   17012:	617b      	str	r3, [r7, #20]
   17014:	697b      	ldr	r3, [r7, #20]
   17016:	2b02      	cmp	r3, #2
   17018:	d9ee      	bls.n	16ff8 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1701a:	2300      	movs	r3, #0
}
   1701c:	0018      	movs	r0, r3
   1701e:	46bd      	mov	sp, r7
   17020:	b007      	add	sp, #28
   17022:	bd90      	pop	{r4, r7, pc}
   17024:	0001eb1c 	.word	0x0001eb1c

00017028 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
   17028:	b590      	push	{r4, r7, lr}
   1702a:	b091      	sub	sp, #68	; 0x44
   1702c:	af00      	add	r7, sp, #0
   1702e:	60f8      	str	r0, [r7, #12]
   17030:	60b9      	str	r1, [r7, #8]
   17032:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
   17034:	2300      	movs	r3, #0
   17036:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
   17038:	233b      	movs	r3, #59	; 0x3b
   1703a:	18fb      	adds	r3, r7, r3
   1703c:	2200      	movs	r2, #0
   1703e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
   17040:	2337      	movs	r3, #55	; 0x37
   17042:	18fc      	adds	r4, r7, r3
   17044:	68bb      	ldr	r3, [r7, #8]
   17046:	0018      	movs	r0, r3
   17048:	4bd4      	ldr	r3, [pc, #848]	; (1739c <tc_init+0x374>)
   1704a:	4798      	blx	r3
   1704c:	0003      	movs	r3, r0
   1704e:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
   17050:	2334      	movs	r3, #52	; 0x34
   17052:	18fb      	adds	r3, r7, r3
   17054:	4ad2      	ldr	r2, [pc, #840]	; (173a0 <tc_init+0x378>)
   17056:	8811      	ldrh	r1, [r2, #0]
   17058:	8019      	strh	r1, [r3, #0]
   1705a:	7892      	ldrb	r2, [r2, #2]
   1705c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
   1705e:	231c      	movs	r3, #28
   17060:	18fb      	adds	r3, r7, r3
   17062:	4ad0      	ldr	r2, [pc, #832]	; (173a4 <tc_init+0x37c>)
   17064:	ca13      	ldmia	r2!, {r0, r1, r4}
   17066:	c313      	stmia	r3!, {r0, r1, r4}
   17068:	ca13      	ldmia	r2!, {r0, r1, r4}
   1706a:	c313      	stmia	r3!, {r0, r1, r4}
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   1706c:	233a      	movs	r3, #58	; 0x3a
   1706e:	18fb      	adds	r3, r7, r3
   17070:	2200      	movs	r2, #0
   17072:	701a      	strb	r2, [r3, #0]
   17074:	e00e      	b.n	17094 <tc_init+0x6c>
		module_inst->callback[i]        = NULL;
   17076:	233a      	movs	r3, #58	; 0x3a
   17078:	18fb      	adds	r3, r7, r3
   1707a:	781a      	ldrb	r2, [r3, #0]
   1707c:	68fb      	ldr	r3, [r7, #12]
   1707e:	3202      	adds	r2, #2
   17080:	0092      	lsls	r2, r2, #2
   17082:	2100      	movs	r1, #0
   17084:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
   17086:	233a      	movs	r3, #58	; 0x3a
   17088:	18fb      	adds	r3, r7, r3
   1708a:	781a      	ldrb	r2, [r3, #0]
   1708c:	233a      	movs	r3, #58	; 0x3a
   1708e:	18fb      	adds	r3, r7, r3
   17090:	3201      	adds	r2, #1
   17092:	701a      	strb	r2, [r3, #0]
   17094:	233a      	movs	r3, #58	; 0x3a
   17096:	18fb      	adds	r3, r7, r3
   17098:	781b      	ldrb	r3, [r3, #0]
   1709a:	2b03      	cmp	r3, #3
   1709c:	d9eb      	bls.n	17076 <tc_init+0x4e>
	}
	module_inst->register_callback_mask     = 0x00;
   1709e:	68fb      	ldr	r3, [r7, #12]
   170a0:	2200      	movs	r2, #0
   170a2:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
   170a4:	68fb      	ldr	r3, [r7, #12]
   170a6:	2200      	movs	r2, #0
   170a8:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
   170aa:	2337      	movs	r3, #55	; 0x37
   170ac:	18fb      	adds	r3, r7, r3
   170ae:	781a      	ldrb	r2, [r3, #0]
   170b0:	4bbd      	ldr	r3, [pc, #756]	; (173a8 <tc_init+0x380>)
   170b2:	0092      	lsls	r2, r2, #2
   170b4:	68f9      	ldr	r1, [r7, #12]
   170b6:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
   170b8:	68fb      	ldr	r3, [r7, #12]
   170ba:	68ba      	ldr	r2, [r7, #8]
   170bc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   170be:	687b      	ldr	r3, [r7, #4]
   170c0:	2234      	movs	r2, #52	; 0x34
   170c2:	5c9a      	ldrb	r2, [r3, r2]
   170c4:	68fb      	ldr	r3, [r7, #12]
   170c6:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   170c8:	687b      	ldr	r3, [r7, #4]
   170ca:	78db      	ldrb	r3, [r3, #3]
   170cc:	2b08      	cmp	r3, #8
   170ce:	d107      	bne.n	170e0 <tc_init+0xb8>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
   170d0:	2337      	movs	r3, #55	; 0x37
   170d2:	18fb      	adds	r3, r7, r3
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	2201      	movs	r2, #1
   170d8:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
   170da:	d001      	beq.n	170e0 <tc_init+0xb8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   170dc:	2317      	movs	r3, #23
   170de:	e1ec      	b.n	174ba <tc_init+0x492>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
   170e0:	687b      	ldr	r3, [r7, #4]
   170e2:	78da      	ldrb	r2, [r3, #3]
   170e4:	68fb      	ldr	r3, [r7, #12]
   170e6:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
   170e8:	68bb      	ldr	r3, [r7, #8]
   170ea:	681b      	ldr	r3, [r3, #0]
   170ec:	2201      	movs	r2, #1
   170ee:	4013      	ands	r3, r2
   170f0:	d001      	beq.n	170f6 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   170f2:	2305      	movs	r3, #5
   170f4:	e1e1      	b.n	174ba <tc_init+0x492>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
   170f6:	68bb      	ldr	r3, [r7, #8]
   170f8:	7adb      	ldrb	r3, [r3, #11]
   170fa:	b2db      	uxtb	r3, r3
   170fc:	001a      	movs	r2, r3
   170fe:	2302      	movs	r3, #2
   17100:	4013      	ands	r3, r2
   17102:	d001      	beq.n	17108 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
   17104:	231c      	movs	r3, #28
   17106:	e1d8      	b.n	174ba <tc_init+0x492>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
   17108:	68bb      	ldr	r3, [r7, #8]
   1710a:	681b      	ldr	r3, [r3, #0]
   1710c:	2202      	movs	r2, #2
   1710e:	4013      	ands	r3, r2
   17110:	d001      	beq.n	17116 <tc_init+0xee>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   17112:	231c      	movs	r3, #28
   17114:	e1d1      	b.n	174ba <tc_init+0x492>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
   17116:	687b      	ldr	r3, [r7, #4]
   17118:	7c1b      	ldrb	r3, [r3, #16]
   1711a:	2b00      	cmp	r3, #0
   1711c:	d017      	beq.n	1714e <tc_init+0x126>
		system_pinmux_get_config_defaults(&pin_config);
   1711e:	2318      	movs	r3, #24
   17120:	18fb      	adds	r3, r7, r3
   17122:	0018      	movs	r0, r3
   17124:	4ba1      	ldr	r3, [pc, #644]	; (173ac <tc_init+0x384>)
   17126:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
   17128:	687b      	ldr	r3, [r7, #4]
   1712a:	699b      	ldr	r3, [r3, #24]
   1712c:	b2da      	uxtb	r2, r3
   1712e:	2318      	movs	r3, #24
   17130:	18fb      	adds	r3, r7, r3
   17132:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   17134:	2318      	movs	r3, #24
   17136:	18fb      	adds	r3, r7, r3
   17138:	2201      	movs	r2, #1
   1713a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
   1713c:	687b      	ldr	r3, [r7, #4]
   1713e:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
   17140:	b2db      	uxtb	r3, r3
   17142:	2218      	movs	r2, #24
   17144:	18ba      	adds	r2, r7, r2
   17146:	0011      	movs	r1, r2
   17148:	0018      	movs	r0, r3
   1714a:	4b99      	ldr	r3, [pc, #612]	; (173b0 <tc_init+0x388>)
   1714c:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	7f1b      	ldrb	r3, [r3, #28]
   17152:	2b00      	cmp	r3, #0
   17154:	d017      	beq.n	17186 <tc_init+0x15e>
		system_pinmux_get_config_defaults(&pin_config);
   17156:	2318      	movs	r3, #24
   17158:	18fb      	adds	r3, r7, r3
   1715a:	0018      	movs	r0, r3
   1715c:	4b93      	ldr	r3, [pc, #588]	; (173ac <tc_init+0x384>)
   1715e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
   17160:	687b      	ldr	r3, [r7, #4]
   17162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17164:	b2da      	uxtb	r2, r3
   17166:	2318      	movs	r3, #24
   17168:	18fb      	adds	r3, r7, r3
   1716a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1716c:	2318      	movs	r3, #24
   1716e:	18fb      	adds	r3, r7, r3
   17170:	2201      	movs	r2, #1
   17172:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
   17178:	b2db      	uxtb	r3, r3
   1717a:	2218      	movs	r2, #24
   1717c:	18ba      	adds	r2, r7, r2
   1717e:	0011      	movs	r1, r2
   17180:	0018      	movs	r0, r3
   17182:	4b8b      	ldr	r3, [pc, #556]	; (173b0 <tc_init+0x388>)
   17184:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   17186:	2337      	movs	r3, #55	; 0x37
   17188:	18fb      	adds	r3, r7, r3
   1718a:	781b      	ldrb	r3, [r3, #0]
   1718c:	005a      	lsls	r2, r3, #1
   1718e:	231c      	movs	r3, #28
   17190:	18fb      	adds	r3, r7, r3
   17192:	0092      	lsls	r2, r2, #2
   17194:	58d3      	ldr	r3, [r2, r3]
   17196:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
   17198:	2337      	movs	r3, #55	; 0x37
   1719a:	18fb      	adds	r3, r7, r3
   1719c:	781b      	ldrb	r3, [r3, #0]
   1719e:	005b      	lsls	r3, r3, #1
   171a0:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
   171a2:	231c      	movs	r3, #28
   171a4:	18fb      	adds	r3, r7, r3
   171a6:	0092      	lsls	r2, r2, #2
   171a8:	58d3      	ldr	r3, [r2, r3]
   171aa:	0019      	movs	r1, r3
   171ac:	4b81      	ldr	r3, [pc, #516]	; (173b4 <tc_init+0x38c>)
   171ae:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
   171b0:	687b      	ldr	r3, [r7, #4]
   171b2:	78db      	ldrb	r3, [r3, #3]
   171b4:	2b08      	cmp	r3, #8
   171b6:	d11c      	bne.n	171f2 <tc_init+0x1ca>
   171b8:	2337      	movs	r3, #55	; 0x37
   171ba:	18fb      	adds	r3, r7, r3
   171bc:	781b      	ldrb	r3, [r3, #0]
   171be:	3301      	adds	r3, #1
   171c0:	2b02      	cmp	r3, #2
   171c2:	dc16      	bgt.n	171f2 <tc_init+0x1ca>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   171c4:	2337      	movs	r3, #55	; 0x37
   171c6:	18fb      	adds	r3, r7, r3
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	3301      	adds	r3, #1
   171cc:	005a      	lsls	r2, r3, #1
   171ce:	231c      	movs	r3, #28
   171d0:	18fb      	adds	r3, r7, r3
   171d2:	0092      	lsls	r2, r2, #2
   171d4:	58d3      	ldr	r3, [r2, r3]
   171d6:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
   171d8:	2337      	movs	r3, #55	; 0x37
   171da:	18fb      	adds	r3, r7, r3
   171dc:	781b      	ldrb	r3, [r3, #0]
   171de:	3301      	adds	r3, #1
   171e0:	005b      	lsls	r3, r3, #1
   171e2:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
   171e4:	231c      	movs	r3, #28
   171e6:	18fb      	adds	r3, r7, r3
   171e8:	0092      	lsls	r2, r2, #2
   171ea:	58d3      	ldr	r3, [r2, r3]
   171ec:	0019      	movs	r1, r3
   171ee:	4b71      	ldr	r3, [pc, #452]	; (173b4 <tc_init+0x38c>)
   171f0:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   171f2:	2314      	movs	r3, #20
   171f4:	18fb      	adds	r3, r7, r3
   171f6:	0018      	movs	r0, r3
   171f8:	4b6f      	ldr	r3, [pc, #444]	; (173b8 <tc_init+0x390>)
   171fa:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
   171fc:	687b      	ldr	r3, [r7, #4]
   171fe:	781a      	ldrb	r2, [r3, #0]
   17200:	2314      	movs	r3, #20
   17202:	18fb      	adds	r3, r7, r3
   17204:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
   17206:	2337      	movs	r3, #55	; 0x37
   17208:	18fb      	adds	r3, r7, r3
   1720a:	781b      	ldrb	r3, [r3, #0]
   1720c:	2234      	movs	r2, #52	; 0x34
   1720e:	18ba      	adds	r2, r7, r2
   17210:	5cd3      	ldrb	r3, [r2, r3]
   17212:	2214      	movs	r2, #20
   17214:	18ba      	adds	r2, r7, r2
   17216:	0011      	movs	r1, r2
   17218:	0018      	movs	r0, r3
   1721a:	4b68      	ldr	r3, [pc, #416]	; (173bc <tc_init+0x394>)
   1721c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
   1721e:	2337      	movs	r3, #55	; 0x37
   17220:	18fb      	adds	r3, r7, r3
   17222:	781b      	ldrb	r3, [r3, #0]
   17224:	2234      	movs	r2, #52	; 0x34
   17226:	18ba      	adds	r2, r7, r2
   17228:	5cd3      	ldrb	r3, [r2, r3]
   1722a:	0018      	movs	r0, r3
   1722c:	4b64      	ldr	r3, [pc, #400]	; (173c0 <tc_init+0x398>)
   1722e:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
   17230:	687b      	ldr	r3, [r7, #4]
   17232:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
   17238:	4313      	orrs	r3, r2
   1723a:	b2db      	uxtb	r3, r3
   1723c:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
   1723e:	687b      	ldr	r3, [r7, #4]
   17240:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
   17242:	4313      	orrs	r3, r2
   17244:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   17246:	2339      	movs	r3, #57	; 0x39
   17248:	18fb      	adds	r3, r7, r3
   1724a:	2200      	movs	r2, #0
   1724c:	701a      	strb	r2, [r3, #0]
   1724e:	e018      	b.n	17282 <tc_init+0x25a>
		if (config->enable_capture_on_channel[i] == true) {
   17250:	2339      	movs	r3, #57	; 0x39
   17252:	18fb      	adds	r3, r7, r3
   17254:	781b      	ldrb	r3, [r3, #0]
   17256:	687a      	ldr	r2, [r7, #4]
   17258:	18d3      	adds	r3, r2, r3
   1725a:	7a5b      	ldrb	r3, [r3, #9]
   1725c:	2b00      	cmp	r3, #0
   1725e:	d009      	beq.n	17274 <tc_init+0x24c>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
   17260:	2339      	movs	r3, #57	; 0x39
   17262:	18fb      	adds	r3, r7, r3
   17264:	781b      	ldrb	r3, [r3, #0]
   17266:	2280      	movs	r2, #128	; 0x80
   17268:	0252      	lsls	r2, r2, #9
   1726a:	409a      	lsls	r2, r3
   1726c:	0013      	movs	r3, r2
   1726e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17270:	4313      	orrs	r3, r2
   17272:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   17274:	2339      	movs	r3, #57	; 0x39
   17276:	18fb      	adds	r3, r7, r3
   17278:	781a      	ldrb	r2, [r3, #0]
   1727a:	2339      	movs	r3, #57	; 0x39
   1727c:	18fb      	adds	r3, r7, r3
   1727e:	3201      	adds	r2, #1
   17280:	701a      	strb	r2, [r3, #0]
   17282:	2339      	movs	r3, #57	; 0x39
   17284:	18fb      	adds	r3, r7, r3
   17286:	781b      	ldrb	r3, [r3, #0]
   17288:	2b01      	cmp	r3, #1
   1728a:	d9e1      	bls.n	17250 <tc_init+0x228>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   1728c:	2338      	movs	r3, #56	; 0x38
   1728e:	18fb      	adds	r3, r7, r3
   17290:	2200      	movs	r2, #0
   17292:	701a      	strb	r2, [r3, #0]
   17294:	e018      	b.n	172c8 <tc_init+0x2a0>
		if (config->enable_capture_on_IO[i] == true) {
   17296:	2338      	movs	r3, #56	; 0x38
   17298:	18fb      	adds	r3, r7, r3
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	687a      	ldr	r2, [r7, #4]
   1729e:	18d3      	adds	r3, r2, r3
   172a0:	7adb      	ldrb	r3, [r3, #11]
   172a2:	2b00      	cmp	r3, #0
   172a4:	d009      	beq.n	172ba <tc_init+0x292>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
   172a6:	2338      	movs	r3, #56	; 0x38
   172a8:	18fb      	adds	r3, r7, r3
   172aa:	781b      	ldrb	r3, [r3, #0]
   172ac:	2280      	movs	r2, #128	; 0x80
   172ae:	0352      	lsls	r2, r2, #13
   172b0:	409a      	lsls	r2, r3
   172b2:	0013      	movs	r3, r2
   172b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   172b6:	4313      	orrs	r3, r2
   172b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
   172ba:	2338      	movs	r3, #56	; 0x38
   172bc:	18fb      	adds	r3, r7, r3
   172be:	781a      	ldrb	r2, [r3, #0]
   172c0:	2338      	movs	r3, #56	; 0x38
   172c2:	18fb      	adds	r3, r7, r3
   172c4:	3201      	adds	r2, #1
   172c6:	701a      	strb	r2, [r3, #0]
   172c8:	2338      	movs	r3, #56	; 0x38
   172ca:	18fb      	adds	r3, r7, r3
   172cc:	781b      	ldrb	r3, [r3, #0]
   172ce:	2b01      	cmp	r3, #1
   172d0:	d9e1      	bls.n	17296 <tc_init+0x26e>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	785b      	ldrb	r3, [r3, #1]
   172d6:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
   172d8:	687b      	ldr	r3, [r7, #4]
   172da:	789b      	ldrb	r3, [r3, #2]
   172dc:	01db      	lsls	r3, r3, #7
   172de:	4313      	orrs	r3, r2
   172e0:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
   172e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172e4:	4313      	orrs	r3, r2
   172e6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   172e8:	46c0      	nop			; (mov r8, r8)
   172ea:	68fb      	ldr	r3, [r7, #12]
   172ec:	0018      	movs	r0, r3
   172ee:	4b35      	ldr	r3, [pc, #212]	; (173c4 <tc_init+0x39c>)
   172f0:	4798      	blx	r3
   172f2:	1e03      	subs	r3, r0, #0
   172f4:	d1f9      	bne.n	172ea <tc_init+0x2c2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
   172f6:	68bb      	ldr	r3, [r7, #8]
   172f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   172fa:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   172fc:	46c0      	nop			; (mov r8, r8)
   172fe:	68fb      	ldr	r3, [r7, #12]
   17300:	0018      	movs	r0, r3
   17302:	4b30      	ldr	r3, [pc, #192]	; (173c4 <tc_init+0x39c>)
   17304:	4798      	blx	r3
   17306:	1e03      	subs	r3, r0, #0
   17308:	d1f9      	bne.n	172fe <tc_init+0x2d6>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
   1730a:	687b      	ldr	r3, [r7, #4]
   1730c:	799a      	ldrb	r2, [r3, #6]
   1730e:	68bb      	ldr	r3, [r7, #8]
   17310:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
   17312:	687b      	ldr	r3, [r7, #4]
   17314:	7b5b      	ldrb	r3, [r3, #13]
   17316:	2b00      	cmp	r3, #0
   17318:	d003      	beq.n	17322 <tc_init+0x2fa>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
   1731a:	233b      	movs	r3, #59	; 0x3b
   1731c:	18fb      	adds	r3, r7, r3
   1731e:	2204      	movs	r2, #4
   17320:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
   17322:	687b      	ldr	r3, [r7, #4]
   17324:	7b9b      	ldrb	r3, [r3, #14]
   17326:	2b00      	cmp	r3, #0
   17328:	d007      	beq.n	1733a <tc_init+0x312>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
   1732a:	233b      	movs	r3, #59	; 0x3b
   1732c:	18fb      	adds	r3, r7, r3
   1732e:	223b      	movs	r2, #59	; 0x3b
   17330:	18ba      	adds	r2, r7, r2
   17332:	7812      	ldrb	r2, [r2, #0]
   17334:	2101      	movs	r1, #1
   17336:	430a      	orrs	r2, r1
   17338:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
   1733a:	46c0      	nop			; (mov r8, r8)
   1733c:	68fb      	ldr	r3, [r7, #12]
   1733e:	0018      	movs	r0, r3
   17340:	4b20      	ldr	r3, [pc, #128]	; (173c4 <tc_init+0x39c>)
   17342:	4798      	blx	r3
   17344:	1e03      	subs	r3, r0, #0
   17346:	d1f9      	bne.n	1733c <tc_init+0x314>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
   17348:	68bb      	ldr	r3, [r7, #8]
   1734a:	22ff      	movs	r2, #255	; 0xff
   1734c:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
   1734e:	233b      	movs	r3, #59	; 0x3b
   17350:	18fb      	adds	r3, r7, r3
   17352:	781b      	ldrb	r3, [r3, #0]
   17354:	2b00      	cmp	r3, #0
   17356:	d00b      	beq.n	17370 <tc_init+0x348>
		while (tc_is_syncing(module_inst)) {
   17358:	46c0      	nop			; (mov r8, r8)
   1735a:	68fb      	ldr	r3, [r7, #12]
   1735c:	0018      	movs	r0, r3
   1735e:	4b19      	ldr	r3, [pc, #100]	; (173c4 <tc_init+0x39c>)
   17360:	4798      	blx	r3
   17362:	1e03      	subs	r3, r0, #0
   17364:	d1f9      	bne.n	1735a <tc_init+0x332>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
   17366:	68bb      	ldr	r3, [r7, #8]
   17368:	223b      	movs	r2, #59	; 0x3b
   1736a:	18ba      	adds	r2, r7, r2
   1736c:	7812      	ldrb	r2, [r2, #0]
   1736e:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
   17370:	687b      	ldr	r3, [r7, #4]
   17372:	7a1a      	ldrb	r2, [r3, #8]
   17374:	68bb      	ldr	r3, [r7, #8]
   17376:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
   17378:	46c0      	nop			; (mov r8, r8)
   1737a:	68fb      	ldr	r3, [r7, #12]
   1737c:	0018      	movs	r0, r3
   1737e:	4b11      	ldr	r3, [pc, #68]	; (173c4 <tc_init+0x39c>)
   17380:	4798      	blx	r3
   17382:	1e03      	subs	r3, r0, #0
   17384:	d1f9      	bne.n	1737a <tc_init+0x352>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
   17386:	68fb      	ldr	r3, [r7, #12]
   17388:	791b      	ldrb	r3, [r3, #4]
   1738a:	2b04      	cmp	r3, #4
   1738c:	d01c      	beq.n	173c8 <tc_init+0x3a0>
   1738e:	2b08      	cmp	r3, #8
   17390:	d100      	bne.n	17394 <tc_init+0x36c>
   17392:	e06e      	b.n	17472 <tc_init+0x44a>
   17394:	2b00      	cmp	r3, #0
   17396:	d049      	beq.n	1742c <tc_init+0x404>
   17398:	e08e      	b.n	174b8 <tc_init+0x490>
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	00016fe1 	.word	0x00016fe1
   173a0:	0001eb28 	.word	0x0001eb28
   173a4:	0001eb2c 	.word	0x0001eb2c
   173a8:	200024e0 	.word	0x200024e0
   173ac:	00016f11 	.word	0x00016f11
   173b0:	00016d01 	.word	0x00016d01
   173b4:	00016e95 	.word	0x00016e95
   173b8:	00016e7d 	.word	0x00016e7d
   173bc:	000169d9 	.word	0x000169d9
   173c0:	00016a19 	.word	0x00016a19
   173c4:	00016f39 	.word	0x00016f39
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
   173c8:	46c0      	nop			; (mov r8, r8)
   173ca:	68fb      	ldr	r3, [r7, #12]
   173cc:	0018      	movs	r0, r3
   173ce:	4b3d      	ldr	r3, [pc, #244]	; (174c4 <tc_init+0x49c>)
   173d0:	4798      	blx	r3
   173d2:	1e03      	subs	r3, r0, #0
   173d4:	d1f9      	bne.n	173ca <tc_init+0x3a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
   173d6:	687b      	ldr	r3, [r7, #4]
   173d8:	2228      	movs	r2, #40	; 0x28
   173da:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
   173dc:	68bb      	ldr	r3, [r7, #8]
   173de:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
   173e0:	46c0      	nop			; (mov r8, r8)
   173e2:	68fb      	ldr	r3, [r7, #12]
   173e4:	0018      	movs	r0, r3
   173e6:	4b37      	ldr	r3, [pc, #220]	; (174c4 <tc_init+0x49c>)
   173e8:	4798      	blx	r3
   173ea:	1e03      	subs	r3, r0, #0
   173ec:	d1f9      	bne.n	173e2 <tc_init+0x3ba>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
   173ee:	687b      	ldr	r3, [r7, #4]
   173f0:	2229      	movs	r2, #41	; 0x29
   173f2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
   173f4:	68bb      	ldr	r3, [r7, #8]
   173f6:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
   173f8:	46c0      	nop			; (mov r8, r8)
   173fa:	68fb      	ldr	r3, [r7, #12]
   173fc:	0018      	movs	r0, r3
   173fe:	4b31      	ldr	r3, [pc, #196]	; (174c4 <tc_init+0x49c>)
   17400:	4798      	blx	r3
   17402:	1e03      	subs	r3, r0, #0
   17404:	d1f9      	bne.n	173fa <tc_init+0x3d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
   17406:	687b      	ldr	r3, [r7, #4]
   17408:	222a      	movs	r2, #42	; 0x2a
   1740a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
   1740c:	68bb      	ldr	r3, [r7, #8]
   1740e:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   17410:	46c0      	nop			; (mov r8, r8)
   17412:	68fb      	ldr	r3, [r7, #12]
   17414:	0018      	movs	r0, r3
   17416:	4b2b      	ldr	r3, [pc, #172]	; (174c4 <tc_init+0x49c>)
   17418:	4798      	blx	r3
   1741a:	1e03      	subs	r3, r0, #0
   1741c:	d1f9      	bne.n	17412 <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
   1741e:	687b      	ldr	r3, [r7, #4]
   17420:	222b      	movs	r2, #43	; 0x2b
   17422:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
   17424:	68bb      	ldr	r3, [r7, #8]
   17426:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
   17428:	2300      	movs	r3, #0
   1742a:	e046      	b.n	174ba <tc_init+0x492>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
   1742c:	46c0      	nop			; (mov r8, r8)
   1742e:	68fb      	ldr	r3, [r7, #12]
   17430:	0018      	movs	r0, r3
   17432:	4b24      	ldr	r3, [pc, #144]	; (174c4 <tc_init+0x49c>)
   17434:	4798      	blx	r3
   17436:	1e03      	subs	r3, r0, #0
   17438:	d1f9      	bne.n	1742e <tc_init+0x406>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
   1743a:	687b      	ldr	r3, [r7, #4]
   1743c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1743e:	68bb      	ldr	r3, [r7, #8]
   17440:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
   17442:	46c0      	nop			; (mov r8, r8)
   17444:	68fb      	ldr	r3, [r7, #12]
   17446:	0018      	movs	r0, r3
   17448:	4b1e      	ldr	r3, [pc, #120]	; (174c4 <tc_init+0x49c>)
   1744a:	4798      	blx	r3
   1744c:	1e03      	subs	r3, r0, #0
   1744e:	d1f9      	bne.n	17444 <tc_init+0x41c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
   17450:	687b      	ldr	r3, [r7, #4]
   17452:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
   17454:	68bb      	ldr	r3, [r7, #8]
   17456:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   17458:	46c0      	nop			; (mov r8, r8)
   1745a:	68fb      	ldr	r3, [r7, #12]
   1745c:	0018      	movs	r0, r3
   1745e:	4b19      	ldr	r3, [pc, #100]	; (174c4 <tc_init+0x49c>)
   17460:	4798      	blx	r3
   17462:	1e03      	subs	r3, r0, #0
   17464:	d1f9      	bne.n	1745a <tc_init+0x432>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
   17466:	687b      	ldr	r3, [r7, #4]
   17468:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
   1746a:	68bb      	ldr	r3, [r7, #8]
   1746c:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
   1746e:	2300      	movs	r3, #0
   17470:	e023      	b.n	174ba <tc_init+0x492>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
   17472:	46c0      	nop			; (mov r8, r8)
   17474:	68fb      	ldr	r3, [r7, #12]
   17476:	0018      	movs	r0, r3
   17478:	4b12      	ldr	r3, [pc, #72]	; (174c4 <tc_init+0x49c>)
   1747a:	4798      	blx	r3
   1747c:	1e03      	subs	r3, r0, #0
   1747e:	d1f9      	bne.n	17474 <tc_init+0x44c>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
   17480:	687b      	ldr	r3, [r7, #4]
   17482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17484:	68bb      	ldr	r3, [r7, #8]
   17486:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
   17488:	46c0      	nop			; (mov r8, r8)
   1748a:	68fb      	ldr	r3, [r7, #12]
   1748c:	0018      	movs	r0, r3
   1748e:	4b0d      	ldr	r3, [pc, #52]	; (174c4 <tc_init+0x49c>)
   17490:	4798      	blx	r3
   17492:	1e03      	subs	r3, r0, #0
   17494:	d1f9      	bne.n	1748a <tc_init+0x462>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
   17496:	687b      	ldr	r3, [r7, #4]
   17498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
   1749a:	68bb      	ldr	r3, [r7, #8]
   1749c:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
   1749e:	46c0      	nop			; (mov r8, r8)
   174a0:	68fb      	ldr	r3, [r7, #12]
   174a2:	0018      	movs	r0, r3
   174a4:	4b07      	ldr	r3, [pc, #28]	; (174c4 <tc_init+0x49c>)
   174a6:	4798      	blx	r3
   174a8:	1e03      	subs	r3, r0, #0
   174aa:	d1f9      	bne.n	174a0 <tc_init+0x478>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
   174ac:	687b      	ldr	r3, [r7, #4]
   174ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
   174b0:	68bb      	ldr	r3, [r7, #8]
   174b2:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
   174b4:	2300      	movs	r3, #0
   174b6:	e000      	b.n	174ba <tc_init+0x492>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
   174b8:	2317      	movs	r3, #23
}
   174ba:	0018      	movs	r0, r3
   174bc:	46bd      	mov	sp, r7
   174be:	b011      	add	sp, #68	; 0x44
   174c0:	bd90      	pop	{r4, r7, pc}
   174c2:	46c0      	nop			; (mov r8, r8)
   174c4:	00016f39 	.word	0x00016f39

000174c8 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
   174c8:	b580      	push	{r7, lr}
   174ca:	b084      	sub	sp, #16
   174cc:	af00      	add	r7, sp, #0
   174ce:	6078      	str	r0, [r7, #4]
   174d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
   174d2:	687b      	ldr	r3, [r7, #4]
   174d4:	681b      	ldr	r3, [r3, #0]
   174d6:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   174d8:	46c0      	nop			; (mov r8, r8)
   174da:	687b      	ldr	r3, [r7, #4]
   174dc:	0018      	movs	r0, r3
   174de:	4b11      	ldr	r3, [pc, #68]	; (17524 <tc_set_count_value+0x5c>)
   174e0:	4798      	blx	r3
   174e2:	1e03      	subs	r3, r0, #0
   174e4:	d1f9      	bne.n	174da <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
   174e6:	687b      	ldr	r3, [r7, #4]
   174e8:	791b      	ldrb	r3, [r3, #4]
   174ea:	2b04      	cmp	r3, #4
   174ec:	d004      	beq.n	174f8 <tc_set_count_value+0x30>
   174ee:	2b08      	cmp	r3, #8
   174f0:	d00e      	beq.n	17510 <tc_set_count_value+0x48>
   174f2:	2b00      	cmp	r3, #0
   174f4:	d006      	beq.n	17504 <tc_set_count_value+0x3c>
   174f6:	e010      	b.n	1751a <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
   174f8:	683b      	ldr	r3, [r7, #0]
   174fa:	b2da      	uxtb	r2, r3
   174fc:	68fb      	ldr	r3, [r7, #12]
   174fe:	751a      	strb	r2, [r3, #20]
			return STATUS_OK;
   17500:	2300      	movs	r3, #0
   17502:	e00b      	b.n	1751c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
   17504:	683b      	ldr	r3, [r7, #0]
   17506:	b29a      	uxth	r2, r3
   17508:	68fb      	ldr	r3, [r7, #12]
   1750a:	829a      	strh	r2, [r3, #20]
			return STATUS_OK;
   1750c:	2300      	movs	r3, #0
   1750e:	e005      	b.n	1751c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
   17510:	68fb      	ldr	r3, [r7, #12]
   17512:	683a      	ldr	r2, [r7, #0]
   17514:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
   17516:	2300      	movs	r3, #0
   17518:	e000      	b.n	1751c <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
   1751a:	2317      	movs	r3, #23
	}
}
   1751c:	0018      	movs	r0, r3
   1751e:	46bd      	mov	sp, r7
   17520:	b004      	add	sp, #16
   17522:	bd80      	pop	{r7, pc}
   17524:	00016f39 	.word	0x00016f39

00017528 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
   17528:	b580      	push	{r7, lr}
   1752a:	b084      	sub	sp, #16
   1752c:	af00      	add	r7, sp, #0
   1752e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Read synchronization */
	tc_sync_read_count(module_inst);
   17530:	687b      	ldr	r3, [r7, #4]
   17532:	0018      	movs	r0, r3
   17534:	4b12      	ldr	r3, [pc, #72]	; (17580 <tc_get_count_value+0x58>)
   17536:	4798      	blx	r3
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
   17538:	687b      	ldr	r3, [r7, #4]
   1753a:	681b      	ldr	r3, [r3, #0]
   1753c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   1753e:	46c0      	nop			; (mov r8, r8)
   17540:	687b      	ldr	r3, [r7, #4]
   17542:	0018      	movs	r0, r3
   17544:	4b0f      	ldr	r3, [pc, #60]	; (17584 <tc_get_count_value+0x5c>)
   17546:	4798      	blx	r3
   17548:	1e03      	subs	r3, r0, #0
   1754a:	d1f9      	bne.n	17540 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
   1754c:	687b      	ldr	r3, [r7, #4]
   1754e:	791b      	ldrb	r3, [r3, #4]
   17550:	2b04      	cmp	r3, #4
   17552:	d004      	beq.n	1755e <tc_get_count_value+0x36>
   17554:	2b08      	cmp	r3, #8
   17556:	d00a      	beq.n	1756e <tc_get_count_value+0x46>
   17558:	2b00      	cmp	r3, #0
   1755a:	d004      	beq.n	17566 <tc_get_count_value+0x3e>
   1755c:	e00a      	b.n	17574 <tc_get_count_value+0x4c>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
   1755e:	68fb      	ldr	r3, [r7, #12]
   17560:	7d1b      	ldrb	r3, [r3, #20]
   17562:	b2db      	uxtb	r3, r3
   17564:	e007      	b.n	17576 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
   17566:	68fb      	ldr	r3, [r7, #12]
   17568:	8a9b      	ldrh	r3, [r3, #20]
   1756a:	b29b      	uxth	r3, r3
   1756c:	e003      	b.n	17576 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
   1756e:	68fb      	ldr	r3, [r7, #12]
   17570:	695b      	ldr	r3, [r3, #20]
   17572:	e000      	b.n	17576 <tc_get_count_value+0x4e>
	}

	Assert(false);
	return 0;
   17574:	2300      	movs	r3, #0
}
   17576:	0018      	movs	r0, r3
   17578:	46bd      	mov	sp, r7
   1757a:	b004      	add	sp, #16
   1757c:	bd80      	pop	{r7, pc}
   1757e:	46c0      	nop			; (mov r8, r8)
   17580:	00016f9d 	.word	0x00016f9d
   17584:	00016f39 	.word	0x00016f39

00017588 <tc_reset>:
 *                                     the function. Only use reset on master
 *                                     TC
 */
enum status_code tc_reset(
		const struct tc_module *const module_inst)
{
   17588:	b580      	push	{r7, lr}
   1758a:	b084      	sub	sp, #16
   1758c:	af00      	add	r7, sp, #0
   1758e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   17590:	687b      	ldr	r3, [r7, #4]
   17592:	681b      	ldr	r3, [r3, #0]
   17594:	60fb      	str	r3, [r7, #12]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
   17596:	68fb      	ldr	r3, [r7, #12]
   17598:	7adb      	ldrb	r3, [r3, #11]
   1759a:	b2db      	uxtb	r3, r3
   1759c:	001a      	movs	r2, r3
   1759e:	2302      	movs	r3, #2
   175a0:	4013      	ands	r3, r2
   175a2:	d001      	beq.n	175a8 <tc_reset+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   175a4:	2315      	movs	r3, #21
   175a6:	e016      	b.n	175d6 <tc_reset+0x4e>
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
   175a8:	68fb      	ldr	r3, [r7, #12]
   175aa:	681b      	ldr	r3, [r3, #0]
   175ac:	2202      	movs	r2, #2
   175ae:	4013      	ands	r3, r2
   175b0:	d00a      	beq.n	175c8 <tc_reset+0x40>
		tc_disable(module_inst);
   175b2:	687b      	ldr	r3, [r7, #4]
   175b4:	0018      	movs	r0, r3
   175b6:	4b0a      	ldr	r3, [pc, #40]	; (175e0 <tc_reset+0x58>)
   175b8:	4798      	blx	r3
		while (tc_is_syncing(module_inst)) {
   175ba:	46c0      	nop			; (mov r8, r8)
   175bc:	687b      	ldr	r3, [r7, #4]
   175be:	0018      	movs	r0, r3
   175c0:	4b08      	ldr	r3, [pc, #32]	; (175e4 <tc_reset+0x5c>)
   175c2:	4798      	blx	r3
   175c4:	1e03      	subs	r3, r0, #0
   175c6:	d1f9      	bne.n	175bc <tc_reset+0x34>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
   175c8:	68fb      	ldr	r3, [r7, #12]
   175ca:	681b      	ldr	r3, [r3, #0]
   175cc:	2201      	movs	r2, #1
   175ce:	431a      	orrs	r2, r3
   175d0:	68fb      	ldr	r3, [r7, #12]
   175d2:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   175d4:	2300      	movs	r3, #0
}
   175d6:	0018      	movs	r0, r3
   175d8:	46bd      	mov	sp, r7
   175da:	b004      	add	sp, #16
   175dc:	bd80      	pop	{r7, pc}
   175de:	46c0      	nop			; (mov r8, r8)
   175e0:	00016f59 	.word	0x00016f59
   175e4:	00016f39 	.word	0x00016f39

000175e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   175e8:	b580      	push	{r7, lr}
   175ea:	b082      	sub	sp, #8
   175ec:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   175ee:	4b19      	ldr	r3, [pc, #100]	; (17654 <Reset_Handler+0x6c>)
   175f0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   175f2:	4b19      	ldr	r3, [pc, #100]	; (17658 <Reset_Handler+0x70>)
   175f4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   175f6:	687a      	ldr	r2, [r7, #4]
   175f8:	683b      	ldr	r3, [r7, #0]
   175fa:	429a      	cmp	r2, r3
   175fc:	d00c      	beq.n	17618 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   175fe:	e007      	b.n	17610 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   17600:	683b      	ldr	r3, [r7, #0]
   17602:	1d1a      	adds	r2, r3, #4
   17604:	603a      	str	r2, [r7, #0]
   17606:	687a      	ldr	r2, [r7, #4]
   17608:	1d11      	adds	r1, r2, #4
   1760a:	6079      	str	r1, [r7, #4]
   1760c:	6812      	ldr	r2, [r2, #0]
   1760e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   17610:	683a      	ldr	r2, [r7, #0]
   17612:	4b12      	ldr	r3, [pc, #72]	; (1765c <Reset_Handler+0x74>)
   17614:	429a      	cmp	r2, r3
   17616:	d3f3      	bcc.n	17600 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   17618:	4b11      	ldr	r3, [pc, #68]	; (17660 <Reset_Handler+0x78>)
   1761a:	603b      	str	r3, [r7, #0]
   1761c:	e004      	b.n	17628 <Reset_Handler+0x40>
                *pDest++ = 0;
   1761e:	683b      	ldr	r3, [r7, #0]
   17620:	1d1a      	adds	r2, r3, #4
   17622:	603a      	str	r2, [r7, #0]
   17624:	2200      	movs	r2, #0
   17626:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   17628:	683a      	ldr	r2, [r7, #0]
   1762a:	4b0e      	ldr	r3, [pc, #56]	; (17664 <Reset_Handler+0x7c>)
   1762c:	429a      	cmp	r2, r3
   1762e:	d3f6      	bcc.n	1761e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   17630:	4b0d      	ldr	r3, [pc, #52]	; (17668 <Reset_Handler+0x80>)
   17632:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   17634:	4b0d      	ldr	r3, [pc, #52]	; (1766c <Reset_Handler+0x84>)
   17636:	687a      	ldr	r2, [r7, #4]
   17638:	21ff      	movs	r1, #255	; 0xff
   1763a:	438a      	bics	r2, r1
   1763c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1763e:	4a0c      	ldr	r2, [pc, #48]	; (17670 <Reset_Handler+0x88>)
   17640:	6853      	ldr	r3, [r2, #4]
   17642:	2180      	movs	r1, #128	; 0x80
   17644:	430b      	orrs	r3, r1
   17646:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   17648:	4b0a      	ldr	r3, [pc, #40]	; (17674 <Reset_Handler+0x8c>)
   1764a:	4798      	blx	r3

        /* Branch to main function */
        main();
   1764c:	4b0a      	ldr	r3, [pc, #40]	; (17678 <Reset_Handler+0x90>)
   1764e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   17650:	e7fe      	b.n	17650 <Reset_Handler+0x68>
   17652:	46c0      	nop			; (mov r8, r8)
   17654:	0001f500 	.word	0x0001f500
   17658:	20000000 	.word	0x20000000
   1765c:	200006a0 	.word	0x200006a0
   17660:	200006a0 	.word	0x200006a0
   17664:	20002748 	.word	0x20002748
   17668:	00000000 	.word	0x00000000
   1766c:	e000ed00 	.word	0xe000ed00
   17670:	41004000 	.word	0x41004000
   17674:	0001b9f1 	.word	0x0001b9f1
   17678:	00017ed9 	.word	0x00017ed9

0001767c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   1767c:	b580      	push	{r7, lr}
   1767e:	af00      	add	r7, sp, #0
        while (1) {
   17680:	e7fe      	b.n	17680 <Dummy_Handler+0x4>
	...

00017684 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   17684:	b580      	push	{r7, lr}
   17686:	b086      	sub	sp, #24
   17688:	af00      	add	r7, sp, #0
   1768a:	60f8      	str	r0, [r7, #12]
   1768c:	60b9      	str	r1, [r7, #8]
   1768e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   17690:	2300      	movs	r3, #0
   17692:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   17694:	68fb      	ldr	r3, [r7, #12]
   17696:	2b00      	cmp	r3, #0
   17698:	d012      	beq.n	176c0 <_read+0x3c>
		return -1;
   1769a:	2301      	movs	r3, #1
   1769c:	425b      	negs	r3, r3
   1769e:	e013      	b.n	176c8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   176a0:	4b0b      	ldr	r3, [pc, #44]	; (176d0 <_read+0x4c>)
   176a2:	681a      	ldr	r2, [r3, #0]
   176a4:	4b0b      	ldr	r3, [pc, #44]	; (176d4 <_read+0x50>)
   176a6:	681b      	ldr	r3, [r3, #0]
   176a8:	68b9      	ldr	r1, [r7, #8]
   176aa:	0018      	movs	r0, r3
   176ac:	4790      	blx	r2
		ptr++;
   176ae:	68bb      	ldr	r3, [r7, #8]
   176b0:	3301      	adds	r3, #1
   176b2:	60bb      	str	r3, [r7, #8]
		nChars++;
   176b4:	697b      	ldr	r3, [r7, #20]
   176b6:	3301      	adds	r3, #1
   176b8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   176ba:	687b      	ldr	r3, [r7, #4]
   176bc:	3b01      	subs	r3, #1
   176be:	607b      	str	r3, [r7, #4]
   176c0:	687b      	ldr	r3, [r7, #4]
   176c2:	2b00      	cmp	r3, #0
   176c4:	dcec      	bgt.n	176a0 <_read+0x1c>
	}
	return nChars;
   176c6:	697b      	ldr	r3, [r7, #20]
}
   176c8:	0018      	movs	r0, r3
   176ca:	46bd      	mov	sp, r7
   176cc:	b006      	add	sp, #24
   176ce:	bd80      	pop	{r7, pc}
   176d0:	200024ec 	.word	0x200024ec
   176d4:	200024f4 	.word	0x200024f4

000176d8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   176d8:	b580      	push	{r7, lr}
   176da:	b086      	sub	sp, #24
   176dc:	af00      	add	r7, sp, #0
   176de:	60f8      	str	r0, [r7, #12]
   176e0:	60b9      	str	r1, [r7, #8]
   176e2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   176e4:	2300      	movs	r3, #0
   176e6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   176e8:	68fb      	ldr	r3, [r7, #12]
   176ea:	2b01      	cmp	r3, #1
   176ec:	d01d      	beq.n	1772a <_write+0x52>
   176ee:	68fb      	ldr	r3, [r7, #12]
   176f0:	2b02      	cmp	r3, #2
   176f2:	d01a      	beq.n	1772a <_write+0x52>
   176f4:	68fb      	ldr	r3, [r7, #12]
   176f6:	2b03      	cmp	r3, #3
   176f8:	d017      	beq.n	1772a <_write+0x52>
		return -1;
   176fa:	2301      	movs	r3, #1
   176fc:	425b      	negs	r3, r3
   176fe:	e018      	b.n	17732 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   17700:	4b0e      	ldr	r3, [pc, #56]	; (1773c <_write+0x64>)
   17702:	681a      	ldr	r2, [r3, #0]
   17704:	4b0e      	ldr	r3, [pc, #56]	; (17740 <_write+0x68>)
   17706:	6818      	ldr	r0, [r3, #0]
   17708:	68bb      	ldr	r3, [r7, #8]
   1770a:	1c59      	adds	r1, r3, #1
   1770c:	60b9      	str	r1, [r7, #8]
   1770e:	781b      	ldrb	r3, [r3, #0]
   17710:	0019      	movs	r1, r3
   17712:	4790      	blx	r2
   17714:	1e03      	subs	r3, r0, #0
   17716:	da02      	bge.n	1771e <_write+0x46>
			return -1;
   17718:	2301      	movs	r3, #1
   1771a:	425b      	negs	r3, r3
   1771c:	e009      	b.n	17732 <_write+0x5a>
		}
		++nChars;
   1771e:	697b      	ldr	r3, [r7, #20]
   17720:	3301      	adds	r3, #1
   17722:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   17724:	687b      	ldr	r3, [r7, #4]
   17726:	3b01      	subs	r3, #1
   17728:	607b      	str	r3, [r7, #4]
   1772a:	687b      	ldr	r3, [r7, #4]
   1772c:	2b00      	cmp	r3, #0
   1772e:	d1e7      	bne.n	17700 <_write+0x28>
	}
	return nChars;
   17730:	697b      	ldr	r3, [r7, #20]
}
   17732:	0018      	movs	r0, r3
   17734:	46bd      	mov	sp, r7
   17736:	b006      	add	sp, #24
   17738:	bd80      	pop	{r7, pc}
   1773a:	46c0      	nop			; (mov r8, r8)
   1773c:	200024f0 	.word	0x200024f0
   17740:	200024f4 	.word	0x200024f4

00017744 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   17744:	b580      	push	{r7, lr}
   17746:	b084      	sub	sp, #16
   17748:	af00      	add	r7, sp, #0
   1774a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1774c:	4b0a      	ldr	r3, [pc, #40]	; (17778 <_sbrk+0x34>)
   1774e:	681b      	ldr	r3, [r3, #0]
   17750:	2b00      	cmp	r3, #0
   17752:	d102      	bne.n	1775a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   17754:	4b08      	ldr	r3, [pc, #32]	; (17778 <_sbrk+0x34>)
   17756:	4a09      	ldr	r2, [pc, #36]	; (1777c <_sbrk+0x38>)
   17758:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1775a:	4b07      	ldr	r3, [pc, #28]	; (17778 <_sbrk+0x34>)
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   17760:	4b05      	ldr	r3, [pc, #20]	; (17778 <_sbrk+0x34>)
   17762:	681a      	ldr	r2, [r3, #0]
   17764:	687b      	ldr	r3, [r7, #4]
   17766:	18d2      	adds	r2, r2, r3
   17768:	4b03      	ldr	r3, [pc, #12]	; (17778 <_sbrk+0x34>)
   1776a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   1776c:	68fb      	ldr	r3, [r7, #12]
}
   1776e:	0018      	movs	r0, r3
   17770:	46bd      	mov	sp, r7
   17772:	b004      	add	sp, #16
   17774:	bd80      	pop	{r7, pc}
   17776:	46c0      	nop			; (mov r8, r8)
   17778:	200016d0 	.word	0x200016d0
   1777c:	20004748 	.word	0x20004748

00017780 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   17780:	b580      	push	{r7, lr}
   17782:	b082      	sub	sp, #8
   17784:	af00      	add	r7, sp, #0
   17786:	6078      	str	r0, [r7, #4]
	return -1;
   17788:	2301      	movs	r3, #1
   1778a:	425b      	negs	r3, r3
}
   1778c:	0018      	movs	r0, r3
   1778e:	46bd      	mov	sp, r7
   17790:	b002      	add	sp, #8
   17792:	bd80      	pop	{r7, pc}

00017794 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   17794:	b580      	push	{r7, lr}
   17796:	b082      	sub	sp, #8
   17798:	af00      	add	r7, sp, #0
   1779a:	6078      	str	r0, [r7, #4]
   1779c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   1779e:	683b      	ldr	r3, [r7, #0]
   177a0:	2280      	movs	r2, #128	; 0x80
   177a2:	0192      	lsls	r2, r2, #6
   177a4:	605a      	str	r2, [r3, #4]

	return 0;
   177a6:	2300      	movs	r3, #0
}
   177a8:	0018      	movs	r0, r3
   177aa:	46bd      	mov	sp, r7
   177ac:	b002      	add	sp, #8
   177ae:	bd80      	pop	{r7, pc}

000177b0 <_isatty>:

extern int _isatty(int file)
{
   177b0:	b580      	push	{r7, lr}
   177b2:	b082      	sub	sp, #8
   177b4:	af00      	add	r7, sp, #0
   177b6:	6078      	str	r0, [r7, #4]
	return 1;
   177b8:	2301      	movs	r3, #1
}
   177ba:	0018      	movs	r0, r3
   177bc:	46bd      	mov	sp, r7
   177be:	b002      	add	sp, #8
   177c0:	bd80      	pop	{r7, pc}

000177c2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   177c2:	b580      	push	{r7, lr}
   177c4:	b084      	sub	sp, #16
   177c6:	af00      	add	r7, sp, #0
   177c8:	60f8      	str	r0, [r7, #12]
   177ca:	60b9      	str	r1, [r7, #8]
   177cc:	607a      	str	r2, [r7, #4]
	return 0;
   177ce:	2300      	movs	r3, #0
}
   177d0:	0018      	movs	r0, r3
   177d2:	46bd      	mov	sp, r7
   177d4:	b004      	add	sp, #16
   177d6:	bd80      	pop	{r7, pc}

000177d8 <system_interrupt_enable>:
{
   177d8:	b580      	push	{r7, lr}
   177da:	b082      	sub	sp, #8
   177dc:	af00      	add	r7, sp, #0
   177de:	0002      	movs	r2, r0
   177e0:	1dfb      	adds	r3, r7, #7
   177e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   177e4:	4b06      	ldr	r3, [pc, #24]	; (17800 <system_interrupt_enable+0x28>)
   177e6:	1dfa      	adds	r2, r7, #7
   177e8:	7812      	ldrb	r2, [r2, #0]
   177ea:	0011      	movs	r1, r2
   177ec:	221f      	movs	r2, #31
   177ee:	400a      	ands	r2, r1
   177f0:	2101      	movs	r1, #1
   177f2:	4091      	lsls	r1, r2
   177f4:	000a      	movs	r2, r1
   177f6:	601a      	str	r2, [r3, #0]
}
   177f8:	46c0      	nop			; (mov r8, r8)
   177fa:	46bd      	mov	sp, r7
   177fc:	b002      	add	sp, #8
   177fe:	bd80      	pop	{r7, pc}
   17800:	e000e100 	.word	0xe000e100

00017804 <usart_is_syncing>:
{
   17804:	b580      	push	{r7, lr}
   17806:	b084      	sub	sp, #16
   17808:	af00      	add	r7, sp, #0
   1780a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1780c:	687b      	ldr	r3, [r7, #4]
   1780e:	681b      	ldr	r3, [r3, #0]
   17810:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   17812:	68fb      	ldr	r3, [r7, #12]
   17814:	69db      	ldr	r3, [r3, #28]
   17816:	1e5a      	subs	r2, r3, #1
   17818:	4193      	sbcs	r3, r2
   1781a:	b2db      	uxtb	r3, r3
}
   1781c:	0018      	movs	r0, r3
   1781e:	46bd      	mov	sp, r7
   17820:	b004      	add	sp, #16
   17822:	bd80      	pop	{r7, pc}

00017824 <_usart_wait_for_sync>:
{
   17824:	b580      	push	{r7, lr}
   17826:	b082      	sub	sp, #8
   17828:	af00      	add	r7, sp, #0
   1782a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1782c:	46c0      	nop			; (mov r8, r8)
   1782e:	687b      	ldr	r3, [r7, #4]
   17830:	0018      	movs	r0, r3
   17832:	4b04      	ldr	r3, [pc, #16]	; (17844 <_usart_wait_for_sync+0x20>)
   17834:	4798      	blx	r3
   17836:	1e03      	subs	r3, r0, #0
   17838:	d1f9      	bne.n	1782e <_usart_wait_for_sync+0xa>
}
   1783a:	46c0      	nop			; (mov r8, r8)
   1783c:	46bd      	mov	sp, r7
   1783e:	b002      	add	sp, #8
   17840:	bd80      	pop	{r7, pc}
   17842:	46c0      	nop			; (mov r8, r8)
   17844:	00017805 	.word	0x00017805

00017848 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   17848:	b580      	push	{r7, lr}
   1784a:	b082      	sub	sp, #8
   1784c:	af00      	add	r7, sp, #0
   1784e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   17850:	687b      	ldr	r3, [r7, #4]
   17852:	2280      	movs	r2, #128	; 0x80
   17854:	05d2      	lsls	r2, r2, #23
   17856:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   17858:	687b      	ldr	r3, [r7, #4]
   1785a:	2200      	movs	r2, #0
   1785c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1785e:	687b      	ldr	r3, [r7, #4]
   17860:	22ff      	movs	r2, #255	; 0xff
   17862:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   17864:	687b      	ldr	r3, [r7, #4]
   17866:	2200      	movs	r2, #0
   17868:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1786a:	687b      	ldr	r3, [r7, #4]
   1786c:	2200      	movs	r2, #0
   1786e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   17870:	687b      	ldr	r3, [r7, #4]
   17872:	2296      	movs	r2, #150	; 0x96
   17874:	0192      	lsls	r2, r2, #6
   17876:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   17878:	687b      	ldr	r3, [r7, #4]
   1787a:	2224      	movs	r2, #36	; 0x24
   1787c:	2101      	movs	r1, #1
   1787e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   17880:	687b      	ldr	r3, [r7, #4]
   17882:	2225      	movs	r2, #37	; 0x25
   17884:	2101      	movs	r1, #1
   17886:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   17888:	687b      	ldr	r3, [r7, #4]
   1788a:	2226      	movs	r2, #38	; 0x26
   1788c:	2100      	movs	r1, #0
   1788e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   17890:	687b      	ldr	r3, [r7, #4]
   17892:	2227      	movs	r2, #39	; 0x27
   17894:	2100      	movs	r1, #0
   17896:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   17898:	687b      	ldr	r3, [r7, #4]
   1789a:	2200      	movs	r2, #0
   1789c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1789e:	687b      	ldr	r3, [r7, #4]
   178a0:	2288      	movs	r2, #136	; 0x88
   178a2:	0352      	lsls	r2, r2, #13
   178a4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   178a6:	687b      	ldr	r3, [r7, #4]
   178a8:	222c      	movs	r2, #44	; 0x2c
   178aa:	2100      	movs	r1, #0
   178ac:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   178ae:	687b      	ldr	r3, [r7, #4]
   178b0:	222d      	movs	r2, #45	; 0x2d
   178b2:	2100      	movs	r1, #0
   178b4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   178b6:	687b      	ldr	r3, [r7, #4]
   178b8:	2200      	movs	r2, #0
   178ba:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   178bc:	687b      	ldr	r3, [r7, #4]
   178be:	2200      	movs	r2, #0
   178c0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   178c2:	687b      	ldr	r3, [r7, #4]
   178c4:	2200      	movs	r2, #0
   178c6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   178c8:	687b      	ldr	r3, [r7, #4]
   178ca:	2200      	movs	r2, #0
   178cc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   178ce:	687b      	ldr	r3, [r7, #4]
   178d0:	2200      	movs	r2, #0
   178d2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   178d4:	687b      	ldr	r3, [r7, #4]
   178d6:	2200      	movs	r2, #0
   178d8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   178da:	687b      	ldr	r3, [r7, #4]
   178dc:	2200      	movs	r2, #0
   178de:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   178e0:	687b      	ldr	r3, [r7, #4]
   178e2:	2200      	movs	r2, #0
   178e4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   178e6:	687b      	ldr	r3, [r7, #4]
   178e8:	2200      	movs	r2, #0
   178ea:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   178ec:	687b      	ldr	r3, [r7, #4]
   178ee:	2200      	movs	r2, #0
   178f0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   178f2:	687b      	ldr	r3, [r7, #4]
   178f4:	2213      	movs	r2, #19
   178f6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   178f8:	687b      	ldr	r3, [r7, #4]
   178fa:	2200      	movs	r2, #0
   178fc:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   178fe:	46c0      	nop			; (mov r8, r8)
   17900:	46bd      	mov	sp, r7
   17902:	b002      	add	sp, #8
   17904:	bd80      	pop	{r7, pc}
	...

00017908 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   17908:	b580      	push	{r7, lr}
   1790a:	b084      	sub	sp, #16
   1790c:	af00      	add	r7, sp, #0
   1790e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17910:	687b      	ldr	r3, [r7, #4]
   17912:	681b      	ldr	r3, [r3, #0]
   17914:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   17916:	687b      	ldr	r3, [r7, #4]
   17918:	681b      	ldr	r3, [r3, #0]
   1791a:	0018      	movs	r0, r3
   1791c:	4b09      	ldr	r3, [pc, #36]	; (17944 <usart_enable+0x3c>)
   1791e:	4798      	blx	r3
   17920:	0003      	movs	r3, r0
   17922:	0018      	movs	r0, r3
   17924:	4b08      	ldr	r3, [pc, #32]	; (17948 <usart_enable+0x40>)
   17926:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17928:	687b      	ldr	r3, [r7, #4]
   1792a:	0018      	movs	r0, r3
   1792c:	4b07      	ldr	r3, [pc, #28]	; (1794c <usart_enable+0x44>)
   1792e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   17930:	68fb      	ldr	r3, [r7, #12]
   17932:	681b      	ldr	r3, [r3, #0]
   17934:	2202      	movs	r2, #2
   17936:	431a      	orrs	r2, r3
   17938:	68fb      	ldr	r3, [r7, #12]
   1793a:	601a      	str	r2, [r3, #0]
}
   1793c:	46c0      	nop			; (mov r8, r8)
   1793e:	46bd      	mov	sp, r7
   17940:	b004      	add	sp, #16
   17942:	bd80      	pop	{r7, pc}
   17944:	000144cd 	.word	0x000144cd
   17948:	000177d9 	.word	0x000177d9
   1794c:	00017825 	.word	0x00017825

00017950 <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   17950:	b580      	push	{r7, lr}
   17952:	b084      	sub	sp, #16
   17954:	af00      	add	r7, sp, #0
   17956:	6078      	str	r0, [r7, #4]
   17958:	000a      	movs	r2, r1
   1795a:	1cfb      	adds	r3, r7, #3
   1795c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1795e:	687b      	ldr	r3, [r7, #4]
   17960:	681b      	ldr	r3, [r3, #0]
   17962:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17964:	687b      	ldr	r3, [r7, #4]
   17966:	0018      	movs	r0, r3
   17968:	4b13      	ldr	r3, [pc, #76]	; (179b8 <usart_enable_transceiver+0x68>)
   1796a:	4798      	blx	r3

	switch (transceiver_type) {
   1796c:	1cfb      	adds	r3, r7, #3
   1796e:	781b      	ldrb	r3, [r3, #0]
   17970:	2b00      	cmp	r3, #0
   17972:	d002      	beq.n	1797a <usart_enable_transceiver+0x2a>
   17974:	2b01      	cmp	r3, #1
   17976:	d00b      	beq.n	17990 <usart_enable_transceiver+0x40>
   17978:	e015      	b.n	179a6 <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
   1797a:	68fb      	ldr	r3, [r7, #12]
   1797c:	685b      	ldr	r3, [r3, #4]
   1797e:	2280      	movs	r2, #128	; 0x80
   17980:	0292      	lsls	r2, r2, #10
   17982:	431a      	orrs	r2, r3
   17984:	68fb      	ldr	r3, [r7, #12]
   17986:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
   17988:	687b      	ldr	r3, [r7, #4]
   1798a:	2201      	movs	r2, #1
   1798c:	719a      	strb	r2, [r3, #6]
			break;
   1798e:	e00a      	b.n	179a6 <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
   17990:	68fb      	ldr	r3, [r7, #12]
   17992:	685b      	ldr	r3, [r3, #4]
   17994:	2280      	movs	r2, #128	; 0x80
   17996:	0252      	lsls	r2, r2, #9
   17998:	431a      	orrs	r2, r3
   1799a:	68fb      	ldr	r3, [r7, #12]
   1799c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
   1799e:	687b      	ldr	r3, [r7, #4]
   179a0:	2201      	movs	r2, #1
   179a2:	71da      	strb	r2, [r3, #7]
			break;
   179a4:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
   179a6:	687b      	ldr	r3, [r7, #4]
   179a8:	0018      	movs	r0, r3
   179aa:	4b03      	ldr	r3, [pc, #12]	; (179b8 <usart_enable_transceiver+0x68>)
   179ac:	4798      	blx	r3
}
   179ae:	46c0      	nop			; (mov r8, r8)
   179b0:	46bd      	mov	sp, r7
   179b2:	b004      	add	sp, #16
   179b4:	bd80      	pop	{r7, pc}
   179b6:	46c0      	nop			; (mov r8, r8)
   179b8:	00017825 	.word	0x00017825

000179bc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   179bc:	b580      	push	{r7, lr}
   179be:	b084      	sub	sp, #16
   179c0:	af00      	add	r7, sp, #0
   179c2:	60f8      	str	r0, [r7, #12]
   179c4:	60b9      	str	r1, [r7, #8]
   179c6:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   179c8:	687a      	ldr	r2, [r7, #4]
   179ca:	68b9      	ldr	r1, [r7, #8]
   179cc:	68fb      	ldr	r3, [r7, #12]
   179ce:	0018      	movs	r0, r3
   179d0:	4b05      	ldr	r3, [pc, #20]	; (179e8 <usart_serial_init+0x2c>)
   179d2:	4798      	blx	r3
   179d4:	1e03      	subs	r3, r0, #0
   179d6:	d101      	bne.n	179dc <usart_serial_init+0x20>
		return true;
   179d8:	2301      	movs	r3, #1
   179da:	e000      	b.n	179de <usart_serial_init+0x22>
	}
	else {
		return false;
   179dc:	2300      	movs	r3, #0
	}
}
   179de:	0018      	movs	r0, r3
   179e0:	46bd      	mov	sp, r7
   179e2:	b004      	add	sp, #16
   179e4:	bd80      	pop	{r7, pc}
   179e6:	46c0      	nop			; (mov r8, r8)
   179e8:	000152d9 	.word	0x000152d9

000179ec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   179ec:	b580      	push	{r7, lr}
   179ee:	b082      	sub	sp, #8
   179f0:	af00      	add	r7, sp, #0
   179f2:	6078      	str	r0, [r7, #4]
   179f4:	000a      	movs	r2, r1
   179f6:	1cfb      	adds	r3, r7, #3
   179f8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   179fa:	46c0      	nop			; (mov r8, r8)
   179fc:	1cfb      	adds	r3, r7, #3
   179fe:	781b      	ldrb	r3, [r3, #0]
   17a00:	b29a      	uxth	r2, r3
   17a02:	687b      	ldr	r3, [r7, #4]
   17a04:	0011      	movs	r1, r2
   17a06:	0018      	movs	r0, r3
   17a08:	4b04      	ldr	r3, [pc, #16]	; (17a1c <usart_serial_putchar+0x30>)
   17a0a:	4798      	blx	r3
   17a0c:	1e03      	subs	r3, r0, #0
   17a0e:	d1f5      	bne.n	179fc <usart_serial_putchar+0x10>

	return STATUS_OK;
   17a10:	2300      	movs	r3, #0
}
   17a12:	0018      	movs	r0, r3
   17a14:	46bd      	mov	sp, r7
   17a16:	b002      	add	sp, #8
   17a18:	bd80      	pop	{r7, pc}
   17a1a:	46c0      	nop			; (mov r8, r8)
   17a1c:	00015571 	.word	0x00015571

00017a20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   17a20:	b580      	push	{r7, lr}
   17a22:	b084      	sub	sp, #16
   17a24:	af00      	add	r7, sp, #0
   17a26:	6078      	str	r0, [r7, #4]
   17a28:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   17a2a:	230e      	movs	r3, #14
   17a2c:	18fb      	adds	r3, r7, r3
   17a2e:	2200      	movs	r2, #0
   17a30:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   17a32:	46c0      	nop			; (mov r8, r8)
   17a34:	230e      	movs	r3, #14
   17a36:	18fa      	adds	r2, r7, r3
   17a38:	687b      	ldr	r3, [r7, #4]
   17a3a:	0011      	movs	r1, r2
   17a3c:	0018      	movs	r0, r3
   17a3e:	4b07      	ldr	r3, [pc, #28]	; (17a5c <usart_serial_getchar+0x3c>)
   17a40:	4798      	blx	r3
   17a42:	1e03      	subs	r3, r0, #0
   17a44:	d1f6      	bne.n	17a34 <usart_serial_getchar+0x14>

	*c = temp;
   17a46:	230e      	movs	r3, #14
   17a48:	18fb      	adds	r3, r7, r3
   17a4a:	881b      	ldrh	r3, [r3, #0]
   17a4c:	b2da      	uxtb	r2, r3
   17a4e:	683b      	ldr	r3, [r7, #0]
   17a50:	701a      	strb	r2, [r3, #0]
}
   17a52:	46c0      	nop			; (mov r8, r8)
   17a54:	46bd      	mov	sp, r7
   17a56:	b004      	add	sp, #16
   17a58:	bd80      	pop	{r7, pc}
   17a5a:	46c0      	nop			; (mov r8, r8)
   17a5c:	000155d5 	.word	0x000155d5

00017a60 <usart_serial_read_packet>:
 */
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   17a60:	b580      	push	{r7, lr}
   17a62:	b084      	sub	sp, #16
   17a64:	af00      	add	r7, sp, #0
   17a66:	60f8      	str	r0, [r7, #12]
   17a68:	60b9      	str	r1, [r7, #8]
   17a6a:	1dbb      	adds	r3, r7, #6
   17a6c:	801a      	strh	r2, [r3, #0]
	return usart_read_buffer_wait(module, rx_data, length);
   17a6e:	1dbb      	adds	r3, r7, #6
   17a70:	881a      	ldrh	r2, [r3, #0]
   17a72:	68b9      	ldr	r1, [r7, #8]
   17a74:	68fb      	ldr	r3, [r7, #12]
   17a76:	0018      	movs	r0, r3
   17a78:	4b03      	ldr	r3, [pc, #12]	; (17a88 <usart_serial_read_packet+0x28>)
   17a7a:	4798      	blx	r3
   17a7c:	0003      	movs	r3, r0
}
   17a7e:	0018      	movs	r0, r3
   17a80:	46bd      	mov	sp, r7
   17a82:	b004      	add	sp, #16
   17a84:	bd80      	pop	{r7, pc}
   17a86:	46c0      	nop			; (mov r8, r8)
   17a88:	000156c1 	.word	0x000156c1

00017a8c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   17a8c:	b580      	push	{r7, lr}
   17a8e:	b084      	sub	sp, #16
   17a90:	af00      	add	r7, sp, #0
   17a92:	60f8      	str	r0, [r7, #12]
   17a94:	60b9      	str	r1, [r7, #8]
   17a96:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   17a98:	4b10      	ldr	r3, [pc, #64]	; (17adc <stdio_serial_init+0x50>)
   17a9a:	68fa      	ldr	r2, [r7, #12]
   17a9c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   17a9e:	4b10      	ldr	r3, [pc, #64]	; (17ae0 <stdio_serial_init+0x54>)
   17aa0:	4a10      	ldr	r2, [pc, #64]	; (17ae4 <stdio_serial_init+0x58>)
   17aa2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   17aa4:	4b10      	ldr	r3, [pc, #64]	; (17ae8 <stdio_serial_init+0x5c>)
   17aa6:	4a11      	ldr	r2, [pc, #68]	; (17aec <stdio_serial_init+0x60>)
   17aa8:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   17aaa:	687a      	ldr	r2, [r7, #4]
   17aac:	68b9      	ldr	r1, [r7, #8]
   17aae:	68fb      	ldr	r3, [r7, #12]
   17ab0:	0018      	movs	r0, r3
   17ab2:	4b0f      	ldr	r3, [pc, #60]	; (17af0 <stdio_serial_init+0x64>)
   17ab4:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   17ab6:	4b0f      	ldr	r3, [pc, #60]	; (17af4 <stdio_serial_init+0x68>)
   17ab8:	681b      	ldr	r3, [r3, #0]
   17aba:	689b      	ldr	r3, [r3, #8]
   17abc:	2100      	movs	r1, #0
   17abe:	0018      	movs	r0, r3
   17ac0:	4b0d      	ldr	r3, [pc, #52]	; (17af8 <stdio_serial_init+0x6c>)
   17ac2:	4798      	blx	r3
	setbuf(stdin, NULL);
   17ac4:	4b0b      	ldr	r3, [pc, #44]	; (17af4 <stdio_serial_init+0x68>)
   17ac6:	681b      	ldr	r3, [r3, #0]
   17ac8:	685b      	ldr	r3, [r3, #4]
   17aca:	2100      	movs	r1, #0
   17acc:	0018      	movs	r0, r3
   17ace:	4b0a      	ldr	r3, [pc, #40]	; (17af8 <stdio_serial_init+0x6c>)
   17ad0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   17ad2:	46c0      	nop			; (mov r8, r8)
   17ad4:	46bd      	mov	sp, r7
   17ad6:	b004      	add	sp, #16
   17ad8:	bd80      	pop	{r7, pc}
   17ada:	46c0      	nop			; (mov r8, r8)
   17adc:	200024f4 	.word	0x200024f4
   17ae0:	200024f0 	.word	0x200024f0
   17ae4:	000179ed 	.word	0x000179ed
   17ae8:	200024ec 	.word	0x200024ec
   17aec:	00017a21 	.word	0x00017a21
   17af0:	000179bd 	.word	0x000179bd
   17af4:	2000063c 	.word	0x2000063c
   17af8:	0001bda1 	.word	0x0001bda1

00017afc <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
   17afc:	b580      	push	{r7, lr}
   17afe:	b090      	sub	sp, #64	; 0x40
   17b00:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
   17b02:	003b      	movs	r3, r7
   17b04:	0018      	movs	r0, r3
   17b06:	4b1e      	ldr	r3, [pc, #120]	; (17b80 <sio2host_init+0x84>)
   17b08:	4798      	blx	r3
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
   17b0a:	003b      	movs	r3, r7
   17b0c:	2280      	movs	r2, #128	; 0x80
   17b0e:	0352      	lsls	r2, r2, #13
   17b10:	60da      	str	r2, [r3, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
   17b12:	003b      	movs	r3, r7
   17b14:	4a1b      	ldr	r2, [pc, #108]	; (17b84 <sio2host_init+0x88>)
   17b16:	631a      	str	r2, [r3, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
   17b18:	003b      	movs	r3, r7
   17b1a:	4a1b      	ldr	r2, [pc, #108]	; (17b88 <sio2host_init+0x8c>)
   17b1c:	635a      	str	r2, [r3, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
   17b1e:	003b      	movs	r3, r7
   17b20:	2201      	movs	r2, #1
   17b22:	4252      	negs	r2, r2
   17b24:	639a      	str	r2, [r3, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
   17b26:	003b      	movs	r3, r7
   17b28:	2201      	movs	r2, #1
   17b2a:	4252      	negs	r2, r2
   17b2c:	63da      	str	r2, [r3, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
   17b2e:	003b      	movs	r3, r7
   17b30:	22e1      	movs	r2, #225	; 0xe1
   17b32:	0252      	lsls	r2, r2, #9
   17b34:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&host_uart_module, USART_HOST, &host_uart_config);
   17b36:	003a      	movs	r2, r7
   17b38:	2384      	movs	r3, #132	; 0x84
   17b3a:	05d9      	lsls	r1, r3, #23
   17b3c:	4b13      	ldr	r3, [pc, #76]	; (17b8c <sio2host_init+0x90>)
   17b3e:	0018      	movs	r0, r3
   17b40:	4b13      	ldr	r3, [pc, #76]	; (17b90 <sio2host_init+0x94>)
   17b42:	4798      	blx	r3
	usart_enable(&host_uart_module);
   17b44:	4b11      	ldr	r3, [pc, #68]	; (17b8c <sio2host_init+0x90>)
   17b46:	0018      	movs	r0, r3
   17b48:	4b12      	ldr	r3, [pc, #72]	; (17b94 <sio2host_init+0x98>)
   17b4a:	4798      	blx	r3
	/* Enable transceivers */
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
   17b4c:	4b0f      	ldr	r3, [pc, #60]	; (17b8c <sio2host_init+0x90>)
   17b4e:	2101      	movs	r1, #1
   17b50:	0018      	movs	r0, r3
   17b52:	4b11      	ldr	r3, [pc, #68]	; (17b98 <sio2host_init+0x9c>)
   17b54:	4798      	blx	r3
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
   17b56:	4b0d      	ldr	r3, [pc, #52]	; (17b8c <sio2host_init+0x90>)
   17b58:	2100      	movs	r1, #0
   17b5a:	0018      	movs	r0, r3
   17b5c:	4b0e      	ldr	r3, [pc, #56]	; (17b98 <sio2host_init+0x9c>)
   17b5e:	4798      	blx	r3
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
   17b60:	4b0e      	ldr	r3, [pc, #56]	; (17b9c <sio2host_init+0xa0>)
   17b62:	0019      	movs	r1, r3
   17b64:	2000      	movs	r0, #0
   17b66:	4b0e      	ldr	r3, [pc, #56]	; (17ba0 <sio2host_init+0xa4>)
   17b68:	4798      	blx	r3
   17b6a:	2384      	movs	r3, #132	; 0x84
   17b6c:	05db      	lsls	r3, r3, #23
   17b6e:	2204      	movs	r2, #4
   17b70:	759a      	strb	r2, [r3, #22]
   17b72:	2008      	movs	r0, #8
   17b74:	4b0b      	ldr	r3, [pc, #44]	; (17ba4 <sio2host_init+0xa8>)
   17b76:	4798      	blx	r3
}
   17b78:	46c0      	nop			; (mov r8, r8)
   17b7a:	46bd      	mov	sp, r7
   17b7c:	b010      	add	sp, #64	; 0x40
   17b7e:	bd80      	pop	{r7, pc}
   17b80:	00017849 	.word	0x00017849
   17b84:	00040003 	.word	0x00040003
   17b88:	00050003 	.word	0x00050003
   17b8c:	200016d4 	.word	0x200016d4
   17b90:	00017a8d 	.word	0x00017a8d
   17b94:	00017909 	.word	0x00017909
   17b98:	00017951 	.word	0x00017951
   17b9c:	00017ba9 	.word	0x00017ba9
   17ba0:	00014461 	.word	0x00014461
   17ba4:	000177d9 	.word	0x000177d9

00017ba8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   17ba8:	b580      	push	{r7, lr}
   17baa:	b084      	sub	sp, #16
   17bac:	af00      	add	r7, sp, #0
   17bae:	0002      	movs	r2, r0
   17bb0:	1dfb      	adds	r3, r7, #7
   17bb2:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
   17bb4:	230f      	movs	r3, #15
   17bb6:	18f9      	adds	r1, r7, r3
   17bb8:	4b15      	ldr	r3, [pc, #84]	; (17c10 <USART_HOST_ISR_VECT+0x68>)
   17bba:	2201      	movs	r2, #1
   17bbc:	0018      	movs	r0, r3
   17bbe:	4b15      	ldr	r3, [pc, #84]	; (17c14 <USART_HOST_ISR_VECT+0x6c>)
   17bc0:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   17bc2:	b672      	cpsid	i
   17bc4:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   17bc8:	4b13      	ldr	r3, [pc, #76]	; (17c18 <USART_HOST_ISR_VECT+0x70>)
   17bca:	2200      	movs	r2, #0
   17bcc:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   17bce:	4b13      	ldr	r3, [pc, #76]	; (17c1c <USART_HOST_ISR_VECT+0x74>)
   17bd0:	781b      	ldrb	r3, [r3, #0]
   17bd2:	001a      	movs	r2, r3
   17bd4:	230f      	movs	r3, #15
   17bd6:	18fb      	adds	r3, r7, r3
   17bd8:	7819      	ldrb	r1, [r3, #0]
   17bda:	4b11      	ldr	r3, [pc, #68]	; (17c20 <USART_HOST_ISR_VECT+0x78>)
   17bdc:	5499      	strb	r1, [r3, r2]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   17bde:	4b0f      	ldr	r3, [pc, #60]	; (17c1c <USART_HOST_ISR_VECT+0x74>)
   17be0:	781b      	ldrb	r3, [r3, #0]
   17be2:	2b9b      	cmp	r3, #155	; 0x9b
   17be4:	d103      	bne.n	17bee <USART_HOST_ISR_VECT+0x46>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   17be6:	4b0d      	ldr	r3, [pc, #52]	; (17c1c <USART_HOST_ISR_VECT+0x74>)
   17be8:	2200      	movs	r2, #0
   17bea:	701a      	strb	r2, [r3, #0]
   17bec:	e005      	b.n	17bfa <USART_HOST_ISR_VECT+0x52>
	} else {
		serial_rx_buf_tail++;
   17bee:	4b0b      	ldr	r3, [pc, #44]	; (17c1c <USART_HOST_ISR_VECT+0x74>)
   17bf0:	781b      	ldrb	r3, [r3, #0]
   17bf2:	3301      	adds	r3, #1
   17bf4:	b2da      	uxtb	r2, r3
   17bf6:	4b09      	ldr	r3, [pc, #36]	; (17c1c <USART_HOST_ISR_VECT+0x74>)
   17bf8:	701a      	strb	r2, [r3, #0]
	}

	cpu_irq_enable();
   17bfa:	4b07      	ldr	r3, [pc, #28]	; (17c18 <USART_HOST_ISR_VECT+0x70>)
   17bfc:	2201      	movs	r2, #1
   17bfe:	701a      	strb	r2, [r3, #0]
   17c00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   17c04:	b662      	cpsie	i
}
   17c06:	46c0      	nop			; (mov r8, r8)
   17c08:	46bd      	mov	sp, r7
   17c0a:	b004      	add	sp, #16
   17c0c:	bd80      	pop	{r7, pc}
   17c0e:	46c0      	nop			; (mov r8, r8)
   17c10:	200016d4 	.word	0x200016d4
   17c14:	00017a61 	.word	0x00017a61
   17c18:	200005b8 	.word	0x200005b8
   17c1c:	200017a4 	.word	0x200017a4
   17c20:	20001708 	.word	0x20001708

00017c24 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   17c24:	b580      	push	{r7, lr}
   17c26:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
   17c28:	2000      	movs	r0, #0
   17c2a:	4b07      	ldr	r3, [pc, #28]	; (17c48 <system_cpu_clock_get_hz+0x24>)
   17c2c:	4798      	blx	r3
   17c2e:	0002      	movs	r2, r0
   17c30:	4b06      	ldr	r3, [pc, #24]	; (17c4c <system_cpu_clock_get_hz+0x28>)
   17c32:	791b      	ldrb	r3, [r3, #4]
   17c34:	b2db      	uxtb	r3, r3
   17c36:	0019      	movs	r1, r3
   17c38:	4b05      	ldr	r3, [pc, #20]	; (17c50 <system_cpu_clock_get_hz+0x2c>)
   17c3a:	0010      	movs	r0, r2
   17c3c:	4798      	blx	r3
   17c3e:	0003      	movs	r3, r0

}
   17c40:	0018      	movs	r0, r3
   17c42:	46bd      	mov	sp, r7
   17c44:	bd80      	pop	{r7, pc}
   17c46:	46c0      	nop			; (mov r8, r8)
   17c48:	00016919 	.word	0x00016919
   17c4c:	40000400 	.word	0x40000400
   17c50:	00019ae9 	.word	0x00019ae9

00017c54 <system_pinmux_get_group_from_gpio_pin>:
{
   17c54:	b580      	push	{r7, lr}
   17c56:	b084      	sub	sp, #16
   17c58:	af00      	add	r7, sp, #0
   17c5a:	0002      	movs	r2, r0
   17c5c:	1dfb      	adds	r3, r7, #7
   17c5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17c60:	230f      	movs	r3, #15
   17c62:	18fb      	adds	r3, r7, r3
   17c64:	1dfa      	adds	r2, r7, #7
   17c66:	7812      	ldrb	r2, [r2, #0]
   17c68:	09d2      	lsrs	r2, r2, #7
   17c6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17c6c:	230e      	movs	r3, #14
   17c6e:	18fb      	adds	r3, r7, r3
   17c70:	1dfa      	adds	r2, r7, #7
   17c72:	7812      	ldrb	r2, [r2, #0]
   17c74:	0952      	lsrs	r2, r2, #5
   17c76:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17c78:	4b0d      	ldr	r3, [pc, #52]	; (17cb0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17c7a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17c7c:	230f      	movs	r3, #15
   17c7e:	18fb      	adds	r3, r7, r3
   17c80:	781b      	ldrb	r3, [r3, #0]
   17c82:	2b00      	cmp	r3, #0
   17c84:	d10f      	bne.n	17ca6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   17c86:	230f      	movs	r3, #15
   17c88:	18fb      	adds	r3, r7, r3
   17c8a:	781b      	ldrb	r3, [r3, #0]
   17c8c:	009b      	lsls	r3, r3, #2
   17c8e:	2210      	movs	r2, #16
   17c90:	4694      	mov	ip, r2
   17c92:	44bc      	add	ip, r7
   17c94:	4463      	add	r3, ip
   17c96:	3b08      	subs	r3, #8
   17c98:	681a      	ldr	r2, [r3, #0]
   17c9a:	230e      	movs	r3, #14
   17c9c:	18fb      	adds	r3, r7, r3
   17c9e:	781b      	ldrb	r3, [r3, #0]
   17ca0:	01db      	lsls	r3, r3, #7
   17ca2:	18d3      	adds	r3, r2, r3
   17ca4:	e000      	b.n	17ca8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   17ca6:	2300      	movs	r3, #0
}
   17ca8:	0018      	movs	r0, r3
   17caa:	46bd      	mov	sp, r7
   17cac:	b004      	add	sp, #16
   17cae:	bd80      	pop	{r7, pc}
   17cb0:	40002800 	.word	0x40002800

00017cb4 <port_get_group_from_gpio_pin>:
{
   17cb4:	b580      	push	{r7, lr}
   17cb6:	b082      	sub	sp, #8
   17cb8:	af00      	add	r7, sp, #0
   17cba:	0002      	movs	r2, r0
   17cbc:	1dfb      	adds	r3, r7, #7
   17cbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17cc0:	1dfb      	adds	r3, r7, #7
   17cc2:	781b      	ldrb	r3, [r3, #0]
   17cc4:	0018      	movs	r0, r3
   17cc6:	4b03      	ldr	r3, [pc, #12]	; (17cd4 <port_get_group_from_gpio_pin+0x20>)
   17cc8:	4798      	blx	r3
   17cca:	0003      	movs	r3, r0
}
   17ccc:	0018      	movs	r0, r3
   17cce:	46bd      	mov	sp, r7
   17cd0:	b002      	add	sp, #8
   17cd2:	bd80      	pop	{r7, pc}
   17cd4:	00017c55 	.word	0x00017c55

00017cd8 <port_pin_set_output_level>:
{
   17cd8:	b580      	push	{r7, lr}
   17cda:	b084      	sub	sp, #16
   17cdc:	af00      	add	r7, sp, #0
   17cde:	0002      	movs	r2, r0
   17ce0:	1dfb      	adds	r3, r7, #7
   17ce2:	701a      	strb	r2, [r3, #0]
   17ce4:	1dbb      	adds	r3, r7, #6
   17ce6:	1c0a      	adds	r2, r1, #0
   17ce8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17cea:	1dfb      	adds	r3, r7, #7
   17cec:	781b      	ldrb	r3, [r3, #0]
   17cee:	0018      	movs	r0, r3
   17cf0:	4b0d      	ldr	r3, [pc, #52]	; (17d28 <port_pin_set_output_level+0x50>)
   17cf2:	4798      	blx	r3
   17cf4:	0003      	movs	r3, r0
   17cf6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17cf8:	1dfb      	adds	r3, r7, #7
   17cfa:	781b      	ldrb	r3, [r3, #0]
   17cfc:	221f      	movs	r2, #31
   17cfe:	4013      	ands	r3, r2
   17d00:	2201      	movs	r2, #1
   17d02:	409a      	lsls	r2, r3
   17d04:	0013      	movs	r3, r2
   17d06:	60bb      	str	r3, [r7, #8]
	if (level) {
   17d08:	1dbb      	adds	r3, r7, #6
   17d0a:	781b      	ldrb	r3, [r3, #0]
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d003      	beq.n	17d18 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17d10:	68fb      	ldr	r3, [r7, #12]
   17d12:	68ba      	ldr	r2, [r7, #8]
   17d14:	619a      	str	r2, [r3, #24]
}
   17d16:	e002      	b.n	17d1e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17d18:	68fb      	ldr	r3, [r7, #12]
   17d1a:	68ba      	ldr	r2, [r7, #8]
   17d1c:	615a      	str	r2, [r3, #20]
}
   17d1e:	46c0      	nop			; (mov r8, r8)
   17d20:	46bd      	mov	sp, r7
   17d22:	b004      	add	sp, #16
   17d24:	bd80      	pop	{r7, pc}
   17d26:	46c0      	nop			; (mov r8, r8)
   17d28:	00017cb5 	.word	0x00017cb5

00017d2c <port_pin_toggle_output_level>:
{
   17d2c:	b580      	push	{r7, lr}
   17d2e:	b084      	sub	sp, #16
   17d30:	af00      	add	r7, sp, #0
   17d32:	0002      	movs	r2, r0
   17d34:	1dfb      	adds	r3, r7, #7
   17d36:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17d38:	1dfb      	adds	r3, r7, #7
   17d3a:	781b      	ldrb	r3, [r3, #0]
   17d3c:	0018      	movs	r0, r3
   17d3e:	4b09      	ldr	r3, [pc, #36]	; (17d64 <port_pin_toggle_output_level+0x38>)
   17d40:	4798      	blx	r3
   17d42:	0003      	movs	r3, r0
   17d44:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17d46:	1dfb      	adds	r3, r7, #7
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	221f      	movs	r2, #31
   17d4c:	4013      	ands	r3, r2
   17d4e:	2201      	movs	r2, #1
   17d50:	409a      	lsls	r2, r3
   17d52:	0013      	movs	r3, r2
   17d54:	60bb      	str	r3, [r7, #8]
	port_base->OUTTGL.reg = pin_mask;
   17d56:	68fb      	ldr	r3, [r7, #12]
   17d58:	68ba      	ldr	r2, [r7, #8]
   17d5a:	61da      	str	r2, [r3, #28]
}
   17d5c:	46c0      	nop			; (mov r8, r8)
   17d5e:	46bd      	mov	sp, r7
   17d60:	b004      	add	sp, #16
   17d62:	bd80      	pop	{r7, pc}
   17d64:	00017cb5 	.word	0x00017cb5

00017d68 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
   17d68:	b580      	push	{r7, lr}
   17d6a:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
   17d6c:	4b02      	ldr	r3, [pc, #8]	; (17d78 <system_get_reset_cause+0x10>)
   17d6e:	781b      	ldrb	r3, [r3, #0]
   17d70:	b2db      	uxtb	r3, r3
}
   17d72:	0018      	movs	r0, r3
   17d74:	46bd      	mov	sp, r7
   17d76:	bd80      	pop	{r7, pc}
   17d78:	40000800 	.word	0x40000800

00017d7c <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
   17d7c:	b580      	push	{r7, lr}
   17d7e:	b082      	sub	sp, #8
   17d80:	af00      	add	r7, sp, #0
   17d82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
   17d84:	687b      	ldr	r3, [r7, #4]
   17d86:	2200      	movs	r2, #0
   17d88:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
   17d8a:	687b      	ldr	r3, [r7, #4]
   17d8c:	2201      	movs	r2, #1
   17d8e:	705a      	strb	r2, [r3, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
   17d90:	687b      	ldr	r3, [r7, #4]
   17d92:	220c      	movs	r2, #12
   17d94:	709a      	strb	r2, [r3, #2]
	config->window_period        = WDT_PERIOD_NONE;
   17d96:	687b      	ldr	r3, [r7, #4]
   17d98:	2200      	movs	r2, #0
   17d9a:	70da      	strb	r2, [r3, #3]
	config->early_warning_period = WDT_PERIOD_NONE;
   17d9c:	687b      	ldr	r3, [r7, #4]
   17d9e:	2200      	movs	r2, #0
   17da0:	711a      	strb	r2, [r3, #4]
}
   17da2:	46c0      	nop			; (mov r8, r8)
   17da4:	46bd      	mov	sp, r7
   17da6:	b002      	add	sp, #8
   17da8:	bd80      	pop	{r7, pc}
	...

00017dac <print_reset_causes>:
}


// Prints this reason for reset of Demo
static void print_reset_causes(void)
{
   17dac:	b590      	push	{r4, r7, lr}
   17dae:	b083      	sub	sp, #12
   17db0:	af00      	add	r7, sp, #0
	enum system_reset_cause rcause = system_get_reset_cause();
   17db2:	1dfc      	adds	r4, r7, #7
   17db4:	4b20      	ldr	r3, [pc, #128]	; (17e38 <print_reset_causes+0x8c>)
   17db6:	4798      	blx	r3
   17db8:	0003      	movs	r3, r0
   17dba:	7023      	strb	r3, [r4, #0]
	printf("\r\nLast reset cause: ");
   17dbc:	4b1f      	ldr	r3, [pc, #124]	; (17e3c <print_reset_causes+0x90>)
   17dbe:	0018      	movs	r0, r3
   17dc0:	4b1f      	ldr	r3, [pc, #124]	; (17e40 <print_reset_causes+0x94>)
   17dc2:	4798      	blx	r3
	if(rcause & (1 << 6)) {
   17dc4:	1dfb      	adds	r3, r7, #7
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	2240      	movs	r2, #64	; 0x40
   17dca:	4013      	ands	r3, r2
   17dcc:	d003      	beq.n	17dd6 <print_reset_causes+0x2a>
		printf("System Reset Request\r\n");
   17dce:	4b1d      	ldr	r3, [pc, #116]	; (17e44 <print_reset_causes+0x98>)
   17dd0:	0018      	movs	r0, r3
   17dd2:	4b1d      	ldr	r3, [pc, #116]	; (17e48 <print_reset_causes+0x9c>)
   17dd4:	4798      	blx	r3
	}
	if(rcause & (1 << 5)) {
   17dd6:	1dfb      	adds	r3, r7, #7
   17dd8:	781b      	ldrb	r3, [r3, #0]
   17dda:	2220      	movs	r2, #32
   17ddc:	4013      	ands	r3, r2
   17dde:	d003      	beq.n	17de8 <print_reset_causes+0x3c>
		printf("Watchdog Reset\r\n");
   17de0:	4b1a      	ldr	r3, [pc, #104]	; (17e4c <print_reset_causes+0xa0>)
   17de2:	0018      	movs	r0, r3
   17de4:	4b18      	ldr	r3, [pc, #96]	; (17e48 <print_reset_causes+0x9c>)
   17de6:	4798      	blx	r3
	}
	if(rcause & (1 << 4)) {
   17de8:	1dfb      	adds	r3, r7, #7
   17dea:	781b      	ldrb	r3, [r3, #0]
   17dec:	2210      	movs	r2, #16
   17dee:	4013      	ands	r3, r2
   17df0:	d003      	beq.n	17dfa <print_reset_causes+0x4e>
		printf("External Reset\r\n");
   17df2:	4b17      	ldr	r3, [pc, #92]	; (17e50 <print_reset_causes+0xa4>)
   17df4:	0018      	movs	r0, r3
   17df6:	4b14      	ldr	r3, [pc, #80]	; (17e48 <print_reset_causes+0x9c>)
   17df8:	4798      	blx	r3
	}
	if(rcause & (1 << 2)) {
   17dfa:	1dfb      	adds	r3, r7, #7
   17dfc:	781b      	ldrb	r3, [r3, #0]
   17dfe:	2204      	movs	r2, #4
   17e00:	4013      	ands	r3, r2
   17e02:	d003      	beq.n	17e0c <print_reset_causes+0x60>
		printf("Brown Out 33 Detector Reset\r\n");
   17e04:	4b13      	ldr	r3, [pc, #76]	; (17e54 <print_reset_causes+0xa8>)
   17e06:	0018      	movs	r0, r3
   17e08:	4b0f      	ldr	r3, [pc, #60]	; (17e48 <print_reset_causes+0x9c>)
   17e0a:	4798      	blx	r3
	}
	if(rcause & (1 << 1)) {
   17e0c:	1dfb      	adds	r3, r7, #7
   17e0e:	781b      	ldrb	r3, [r3, #0]
   17e10:	2202      	movs	r2, #2
   17e12:	4013      	ands	r3, r2
   17e14:	d003      	beq.n	17e1e <print_reset_causes+0x72>
		printf("Brown Out 12 Detector Reset\r\n");
   17e16:	4b10      	ldr	r3, [pc, #64]	; (17e58 <print_reset_causes+0xac>)
   17e18:	0018      	movs	r0, r3
   17e1a:	4b0b      	ldr	r3, [pc, #44]	; (17e48 <print_reset_causes+0x9c>)
   17e1c:	4798      	blx	r3
	}
	if(rcause & (1 << 0)) {
   17e1e:	1dfb      	adds	r3, r7, #7
   17e20:	781b      	ldrb	r3, [r3, #0]
   17e22:	2201      	movs	r2, #1
   17e24:	4013      	ands	r3, r2
   17e26:	d003      	beq.n	17e30 <print_reset_causes+0x84>
		printf("Power-On Reset\r\n");
   17e28:	4b0c      	ldr	r3, [pc, #48]	; (17e5c <print_reset_causes+0xb0>)
   17e2a:	0018      	movs	r0, r3
   17e2c:	4b06      	ldr	r3, [pc, #24]	; (17e48 <print_reset_causes+0x9c>)
   17e2e:	4798      	blx	r3
	}
}
   17e30:	46c0      	nop			; (mov r8, r8)
   17e32:	46bd      	mov	sp, r7
   17e34:	b003      	add	sp, #12
   17e36:	bd90      	pop	{r4, r7, pc}
   17e38:	00017d69 	.word	0x00017d69
   17e3c:	0001ebd0 	.word	0x0001ebd0
   17e40:	0001bc4d 	.word	0x0001bc4d
   17e44:	0001ebe8 	.word	0x0001ebe8
   17e48:	0001bd69 	.word	0x0001bd69
   17e4c:	0001ec00 	.word	0x0001ec00
   17e50:	0001ec10 	.word	0x0001ec10
   17e54:	0001ec20 	.word	0x0001ec20
   17e58:	0001ec40 	.word	0x0001ec40
   17e5c:	0001ec60 	.word	0x0001ec60

00017e60 <watchdog_early_warning_callback>:

// In this demo we use Watch Dog timer to reset the demo incase of unexpected fault in application
// Watch Dog Timer Support
//! [setup]
static void watchdog_early_warning_callback(void)
{
   17e60:	b580      	push	{r7, lr}
   17e62:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   17e64:	2100      	movs	r1, #0
   17e66:	2013      	movs	r0, #19
   17e68:	4b02      	ldr	r3, [pc, #8]	; (17e74 <watchdog_early_warning_callback+0x14>)
   17e6a:	4798      	blx	r3
}
   17e6c:	46c0      	nop			; (mov r8, r8)
   17e6e:	46bd      	mov	sp, r7
   17e70:	bd80      	pop	{r7, pc}
   17e72:	46c0      	nop			; (mov r8, r8)
   17e74:	00017cd9 	.word	0x00017cd9

00017e78 <configure_wdt>:
static void configure_wdt(void)
{
   17e78:	b580      	push	{r7, lr}
   17e7a:	b082      	sub	sp, #8
   17e7c:	af00      	add	r7, sp, #0
		* with the default module settings. */
	//! [setup_1]
	struct wdt_conf config_wdt;
	//! [setup_1]
	//! [setup_2]
	wdt_get_config_defaults(&config_wdt);
   17e7e:	003b      	movs	r3, r7
   17e80:	0018      	movs	r0, r3
   17e82:	4b09      	ldr	r3, [pc, #36]	; (17ea8 <configure_wdt+0x30>)
   17e84:	4798      	blx	r3
	//! [setup_2]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
   17e86:	003b      	movs	r3, r7
   17e88:	2200      	movs	r2, #0
   17e8a:	701a      	strb	r2, [r3, #0]
#if !((SAML21) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34))
	config_wdt.clock_source         = GCLK_GENERATOR_1;
#endif
	config_wdt.timeout_period       = WDT_PERIOD_16384CLK;
   17e8c:	003b      	movs	r3, r7
   17e8e:	220c      	movs	r2, #12
   17e90:	709a      	strb	r2, [r3, #2]
	config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
   17e92:	003b      	movs	r3, r7
   17e94:	220b      	movs	r2, #11
   17e96:	711a      	strb	r2, [r3, #4]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
   17e98:	003b      	movs	r3, r7
   17e9a:	0018      	movs	r0, r3
   17e9c:	4b03      	ldr	r3, [pc, #12]	; (17eac <configure_wdt+0x34>)
   17e9e:	4798      	blx	r3
	//! [setup_4]
}
   17ea0:	46c0      	nop			; (mov r8, r8)
   17ea2:	46bd      	mov	sp, r7
   17ea4:	b002      	add	sp, #8
   17ea6:	bd80      	pop	{r7, pc}
   17ea8:	00017d7d 	.word	0x00017d7d
   17eac:	00006bd1 	.word	0x00006bd1

00017eb0 <configure_wdt_callbacks>:

 static void configure_wdt_callbacks(void)
{
   17eb0:	b580      	push	{r7, lr}
   17eb2:	af00      	add	r7, sp, #0
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
   17eb4:	4b05      	ldr	r3, [pc, #20]	; (17ecc <configure_wdt_callbacks+0x1c>)
   17eb6:	2100      	movs	r1, #0
   17eb8:	0018      	movs	r0, r3
   17eba:	4b05      	ldr	r3, [pc, #20]	; (17ed0 <configure_wdt_callbacks+0x20>)
   17ebc:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
   17ebe:	2000      	movs	r0, #0
   17ec0:	4b04      	ldr	r3, [pc, #16]	; (17ed4 <configure_wdt_callbacks+0x24>)
   17ec2:	4798      	blx	r3
	//! [setup_6]
}
   17ec4:	46c0      	nop			; (mov r8, r8)
   17ec6:	46bd      	mov	sp, r7
   17ec8:	bd80      	pop	{r7, pc}
   17eca:	46c0      	nop			; (mov r8, r8)
   17ecc:	00017e61 	.word	0x00017e61
   17ed0:	00006d7d 	.word	0x00006d7d
   17ed4:	00006dad 	.word	0x00006dad

00017ed8 <main>:


int main ( void )
{
   17ed8:	b590      	push	{r4, r7, lr}
   17eda:	b089      	sub	sp, #36	; 0x24
   17edc:	af00      	add	r7, sp, #0
	uint8_t i , TxCount = 0 , button_press;
   17ede:	231f      	movs	r3, #31
   17ee0:	18fb      	adds	r3, r7, r3
   17ee2:	2200      	movs	r2, #0
   17ee4:	701a      	strb	r2, [r3, #0]
	uint8_t connection_index = 0xFF, TxSynCount2 = 0;
   17ee6:	231e      	movs	r3, #30
   17ee8:	18fb      	adds	r3, r7, r3
   17eea:	22ff      	movs	r2, #255	; 0xff
   17eec:	701a      	strb	r2, [r3, #0]
   17eee:	231d      	movs	r3, #29
   17ef0:	18fb      	adds	r3, r7, r3
   17ef2:	2200      	movs	r2, #0
   17ef4:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	//int8_t ret;
	Cloud_RC ret = CLOUD_RC_NONE_ERROR;
   17ef6:	231c      	movs	r3, #28
   17ef8:	18fb      	adds	r3, r7, r3
   17efa:	2200      	movs	r2, #0
   17efc:	701a      	strb	r2, [r3, #0]
	rtc_init();
   17efe:	4b74      	ldr	r3, [pc, #464]	; (180d0 <main+0x1f8>)
   17f00:	4798      	blx	r3
	delay_init();
   17f02:	4b74      	ldr	r3, [pc, #464]	; (180d4 <main+0x1fc>)
   17f04:	4798      	blx	r3
	/* Initialize the board. */
	system_init();
   17f06:	4b74      	ldr	r3, [pc, #464]	; (180d8 <main+0x200>)
   17f08:	4798      	blx	r3
	/* Initialize the UART console. */
	sio2host_init();
   17f0a:	4b74      	ldr	r3, [pc, #464]	; (180dc <main+0x204>)
   17f0c:	4798      	blx	r3
	// Configure Timer MiWi Stack uses this 
	configure_tc();
   17f0e:	4b74      	ldr	r3, [pc, #464]	; (180e0 <main+0x208>)
   17f10:	4798      	blx	r3

	/*******************************************************************/
	// MiWi Stack/Radio Init for channels, modulation etc
	MiApp_ProtocolInit(false);
   17f12:	2000      	movs	r0, #0
   17f14:	4b73      	ldr	r3, [pc, #460]	; (180e4 <main+0x20c>)
   17f16:	4798      	blx	r3
	// Set the Channel
	MiApp_SetChannel(APP_CHANNEL_SEL);
   17f18:	2005      	movs	r0, #5
   17f1a:	4b73      	ldr	r3, [pc, #460]	; (180e8 <main+0x210>)
   17f1c:	4798      	blx	r3
	printf(STRING_HEADER);
   17f1e:	4b73      	ldr	r3, [pc, #460]	; (180ec <main+0x214>)
   17f20:	0018      	movs	r0, r3
   17f22:	4b73      	ldr	r3, [pc, #460]	; (180f0 <main+0x218>)
   17f24:	4798      	blx	r3
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
   17f26:	2000      	movs	r0, #0
   17f28:	4b72      	ldr	r3, [pc, #456]	; (180f4 <main+0x21c>)
   17f2a:	4798      	blx	r3
	// Enable Transceiver Interrupt
	ENABLE_TRX_IRQ();
   17f2c:	2100      	movs	r1, #0
   17f2e:	2000      	movs	r0, #0
   17f30:	4b71      	ldr	r3, [pc, #452]	; (180f8 <main+0x220>)
   17f32:	4798      	blx	r3
	// Enable All cpu interrupts
	cpu_irq_enable();
   17f34:	4b71      	ldr	r3, [pc, #452]	; (180fc <main+0x224>)
   17f36:	2201      	movs	r2, #1
   17f38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   17f3a:	f3bf 8f5f 	dmb	sy
   17f3e:	b662      	cpsie	i
	print_reset_causes();
   17f40:	4b6f      	ldr	r3, [pc, #444]	; (18100 <main+0x228>)
   17f42:	4798      	blx	r3
	// MiWi API to establish a connection with Peer Node
	connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
   17f44:	231e      	movs	r3, #30
   17f46:	18fc      	adds	r4, r7, r3
   17f48:	2100      	movs	r1, #0
   17f4a:	20ff      	movs	r0, #255	; 0xff
   17f4c:	4b6d      	ldr	r3, [pc, #436]	; (18104 <main+0x22c>)
   17f4e:	4798      	blx	r3
   17f50:	0003      	movs	r3, r0
   17f52:	7023      	strb	r3, [r4, #0]
	// MiWi API to enable the node as PAN Coordinator Type
	MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
   17f54:	2200      	movs	r2, #0
   17f56:	210a      	movs	r1, #10
   17f58:	2000      	movs	r0, #0
   17f5a:	4b6b      	ldr	r3, [pc, #428]	; (18108 <main+0x230>)
   17f5c:	4798      	blx	r3
	LED_On(LED1);
   17f5e:	2100      	movs	r1, #0
   17f60:	2012      	movs	r0, #18
   17f62:	4b6a      	ldr	r3, [pc, #424]	; (1810c <main+0x234>)
   17f64:	4798      	blx	r3
	/* Initialize the BSP. */
	nm_bsp_init();
   17f66:	4b6a      	ldr	r3, [pc, #424]	; (18110 <main+0x238>)
   17f68:	4798      	blx	r3
	DBG_LOG("Initializing WSN  Device\r\n");
   17f6a:	4b6a      	ldr	r3, [pc, #424]	; (18114 <main+0x23c>)
   17f6c:	0018      	movs	r0, r3
   17f6e:	4b60      	ldr	r3, [pc, #384]	; (180f0 <main+0x218>)
   17f70:	4798      	blx	r3
   17f72:	4b69      	ldr	r3, [pc, #420]	; (18118 <main+0x240>)
   17f74:	0018      	movs	r0, r3
   17f76:	4b5e      	ldr	r3, [pc, #376]	; (180f0 <main+0x218>)
   17f78:	4798      	blx	r3
	DBG_LOG("cpu_freq=%d\n",(int)system_cpu_clock_get_hz());
   17f7a:	4b66      	ldr	r3, [pc, #408]	; (18114 <main+0x23c>)
   17f7c:	0018      	movs	r0, r3
   17f7e:	4b5c      	ldr	r3, [pc, #368]	; (180f0 <main+0x218>)
   17f80:	4798      	blx	r3
   17f82:	4b66      	ldr	r3, [pc, #408]	; (1811c <main+0x244>)
   17f84:	4798      	blx	r3
   17f86:	0003      	movs	r3, r0
   17f88:	001a      	movs	r2, r3
   17f8a:	4b65      	ldr	r3, [pc, #404]	; (18120 <main+0x248>)
   17f8c:	0011      	movs	r1, r2
   17f8e:	0018      	movs	r0, r3
   17f90:	4b64      	ldr	r3, [pc, #400]	; (18124 <main+0x24c>)
   17f92:	4798      	blx	r3
	// WiFi and ECC init
	wifiCryptoInit();
   17f94:	4b64      	ldr	r3, [pc, #400]	; (18128 <main+0x250>)
   17f96:	4798      	blx	r3
	// WatchDog Init
	configure_wdt();
   17f98:	4b64      	ldr	r3, [pc, #400]	; (1812c <main+0x254>)
   17f9a:	4798      	blx	r3
	// WatchDog call back 
	configure_wdt_callbacks();
   17f9c:	4b64      	ldr	r3, [pc, #400]	; (18130 <main+0x258>)
   17f9e:	4798      	blx	r3
	while (1) {
		LED_On(LED0);
   17fa0:	2100      	movs	r1, #0
   17fa2:	2013      	movs	r0, #19
   17fa4:	4b59      	ldr	r3, [pc, #356]	; (1810c <main+0x234>)
   17fa6:	4798      	blx	r3
	// Handle all WiFi related events
	m2m_wifi_handle_events(NULL);
   17fa8:	2000      	movs	r0, #0
   17faa:	4b62      	ldr	r3, [pc, #392]	; (18134 <main+0x25c>)
   17fac:	4798      	blx	r3
	// Handle the WatchDog reset count when no failure is happening 
	wdt_reset_count();
   17fae:	4b62      	ldr	r3, [pc, #392]	; (18138 <main+0x260>)
   17fb0:	4798      	blx	r3
	// Handle received message from MiWi end device
	if (MiApp_MessageAvailable())
   17fb2:	4b62      	ldr	r3, [pc, #392]	; (1813c <main+0x264>)
   17fb4:	4798      	blx	r3
   17fb6:	1e03      	subs	r3, r0, #0
   17fb8:	d04b      	beq.n	18052 <main+0x17a>
	{
		// if received a data packet toggle led
		LED_Toggle(LED1);
   17fba:	2012      	movs	r0, #18
   17fbc:	4b60      	ldr	r3, [pc, #384]	; (18140 <main+0x268>)
   17fbe:	4798      	blx	r3
			#if defined (PC)
		#endif
		memset(miwiNodeLocation,0,sizeof(miwiNodeLocation));
   17fc0:	4b60      	ldr	r3, [pc, #384]	; (18144 <main+0x26c>)
   17fc2:	221e      	movs	r2, #30
   17fc4:	2100      	movs	r1, #0
   17fc6:	0018      	movs	r0, r3
   17fc8:	4b5f      	ldr	r3, [pc, #380]	; (18148 <main+0x270>)
   17fca:	4798      	blx	r3
		strcat(miwiNodeLocation, "Node");
   17fcc:	4b5d      	ldr	r3, [pc, #372]	; (18144 <main+0x26c>)
   17fce:	0018      	movs	r0, r3
   17fd0:	4b5e      	ldr	r3, [pc, #376]	; (1814c <main+0x274>)
   17fd2:	4798      	blx	r3
   17fd4:	0003      	movs	r3, r0
   17fd6:	001a      	movs	r2, r3
   17fd8:	4b5a      	ldr	r3, [pc, #360]	; (18144 <main+0x26c>)
   17fda:	18d2      	adds	r2, r2, r3
   17fdc:	4b5c      	ldr	r3, [pc, #368]	; (18150 <main+0x278>)
   17fde:	0010      	movs	r0, r2
   17fe0:	0019      	movs	r1, r3
   17fe2:	2305      	movs	r3, #5
   17fe4:	001a      	movs	r2, r3
   17fe6:	4b5b      	ldr	r3, [pc, #364]	; (18154 <main+0x27c>)
   17fe8:	4798      	blx	r3
		strcat (miwiNodeLocation,itoa(rxMessage.Payload[0], str , 10));
   17fea:	4b5b      	ldr	r3, [pc, #364]	; (18158 <main+0x280>)
   17fec:	689b      	ldr	r3, [r3, #8]
   17fee:	781b      	ldrb	r3, [r3, #0]
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b5a      	ldr	r3, [pc, #360]	; (1815c <main+0x284>)
   17ff4:	220a      	movs	r2, #10
   17ff6:	0019      	movs	r1, r3
   17ff8:	4b59      	ldr	r3, [pc, #356]	; (18160 <main+0x288>)
   17ffa:	4798      	blx	r3
   17ffc:	0002      	movs	r2, r0
   17ffe:	4b51      	ldr	r3, [pc, #324]	; (18144 <main+0x26c>)
   18000:	0011      	movs	r1, r2
   18002:	0018      	movs	r0, r3
   18004:	4b57      	ldr	r3, [pc, #348]	; (18164 <main+0x28c>)
   18006:	4798      	blx	r3
		printf("Node Id:%s\r\n",miwiNodeLocation);
   18008:	4a4e      	ldr	r2, [pc, #312]	; (18144 <main+0x26c>)
   1800a:	4b57      	ldr	r3, [pc, #348]	; (18168 <main+0x290>)
   1800c:	0011      	movs	r1, r2
   1800e:	0018      	movs	r0, r3
   18010:	4b44      	ldr	r3, [pc, #272]	; (18124 <main+0x24c>)
   18012:	4798      	blx	r3
		miwiNodeTemp = rxMessage.Payload[1];
   18014:	4b50      	ldr	r3, [pc, #320]	; (18158 <main+0x280>)
   18016:	689b      	ldr	r3, [r3, #8]
   18018:	3301      	adds	r3, #1
   1801a:	781b      	ldrb	r3, [r3, #0]
   1801c:	001a      	movs	r2, r3
   1801e:	4b53      	ldr	r3, [pc, #332]	; (1816c <main+0x294>)
   18020:	601a      	str	r2, [r3, #0]
		miwiNodeRssi = rxMessage.PacketRSSI;
   18022:	4b4d      	ldr	r3, [pc, #308]	; (18158 <main+0x280>)
   18024:	7b5b      	ldrb	r3, [r3, #13]
   18026:	001a      	movs	r2, r3
   18028:	4b51      	ldr	r3, [pc, #324]	; (18170 <main+0x298>)
   1802a:	601a      	str	r2, [r3, #0]
		miwiNewDataArrived = true;
   1802c:	4b51      	ldr	r3, [pc, #324]	; (18174 <main+0x29c>)
   1802e:	2201      	movs	r2, #1
   18030:	701a      	strb	r2, [r3, #0]
		// print received data on console
		printf("NodeId: %d, Temp:%d,  RSSI: %d\r\n",rxMessage.Payload[0], rxMessage.Payload[1], rxMessage.PacketRSSI);
   18032:	4b49      	ldr	r3, [pc, #292]	; (18158 <main+0x280>)
   18034:	689b      	ldr	r3, [r3, #8]
   18036:	781b      	ldrb	r3, [r3, #0]
   18038:	0019      	movs	r1, r3
   1803a:	4b47      	ldr	r3, [pc, #284]	; (18158 <main+0x280>)
   1803c:	689b      	ldr	r3, [r3, #8]
   1803e:	3301      	adds	r3, #1
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	001a      	movs	r2, r3
   18044:	4b44      	ldr	r3, [pc, #272]	; (18158 <main+0x280>)
   18046:	7b5b      	ldrb	r3, [r3, #13]
   18048:	484b      	ldr	r0, [pc, #300]	; (18178 <main+0x2a0>)
   1804a:	4c36      	ldr	r4, [pc, #216]	; (18124 <main+0x24c>)
   1804c:	47a0      	blx	r4
		// Function MiApp_DiscardMessage is used to release the current
		//  received packet.
		// After calling this function, the stack can start to process the
		//  next received frame
		/*******************************************************************/
		MiApp_DiscardMessage();
   1804e:	4b4b      	ldr	r3, [pc, #300]	; (1817c <main+0x2a4>)
   18050:	4798      	blx	r3

	}
	// Handle Connection to AWS Cloud
	#if 1
		if(receivedTime && !cloudConnecting){
   18052:	4b4b      	ldr	r3, [pc, #300]	; (18180 <main+0x2a8>)
   18054:	781b      	ldrb	r3, [r3, #0]
   18056:	2b00      	cmp	r3, #0
   18058:	d025      	beq.n	180a6 <main+0x1ce>
   1805a:	4b4a      	ldr	r3, [pc, #296]	; (18184 <main+0x2ac>)
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	2b00      	cmp	r3, #0
   18060:	d121      	bne.n	180a6 <main+0x1ce>
			cloudConnecting = 1;
   18062:	4b48      	ldr	r3, [pc, #288]	; (18184 <main+0x2ac>)
   18064:	2201      	movs	r2, #1
   18066:	601a      	str	r2, [r3, #0]
			
			ret = cloud_connect();
   18068:	231c      	movs	r3, #28
   1806a:	18fc      	adds	r4, r7, r3
   1806c:	4b46      	ldr	r3, [pc, #280]	; (18188 <main+0x2b0>)
   1806e:	4798      	blx	r3
   18070:	0003      	movs	r3, r0
   18072:	7023      	strb	r3, [r4, #0]

			if (ret == CLOUD_RC_SUCCESS)
   18074:	231c      	movs	r3, #28
   18076:	18fb      	adds	r3, r7, r3
   18078:	781b      	ldrb	r3, [r3, #0]
   1807a:	b25b      	sxtb	r3, r3
   1807c:	2b00      	cmp	r3, #0
   1807e:	d107      	bne.n	18090 <main+0x1b8>
			{
				cloudConnecting = 3;
   18080:	4b40      	ldr	r3, [pc, #256]	; (18184 <main+0x2ac>)
   18082:	2203      	movs	r2, #3
   18084:	601a      	str	r2, [r3, #0]
				printf("connected to AWS IoT Cloud ...\r\n");
   18086:	4b41      	ldr	r3, [pc, #260]	; (1818c <main+0x2b4>)
   18088:	0018      	movs	r0, r3
   1808a:	4b19      	ldr	r3, [pc, #100]	; (180f0 <main+0x218>)
   1808c:	4798      	blx	r3
   1808e:	e00a      	b.n	180a6 <main+0x1ce>
			}
			else
			{
				printf("Cloud connect fail...\r\n");
   18090:	4b3f      	ldr	r3, [pc, #252]	; (18190 <main+0x2b8>)
   18092:	0018      	movs	r0, r3
   18094:	4b16      	ldr	r3, [pc, #88]	; (180f0 <main+0x218>)
   18096:	4798      	blx	r3
				while(1)
				{
							// Toggle the Yellow LED on SAMR30 XPRO when connection to AWS is unsuccessful
							// WatchDog reset will happen when failing to connect to AWS
							LED_Toggle(LED0);
   18098:	2013      	movs	r0, #19
   1809a:	4b29      	ldr	r3, [pc, #164]	; (18140 <main+0x268>)
   1809c:	4798      	blx	r3
							delay_ms(100);
   1809e:	2064      	movs	r0, #100	; 0x64
   180a0:	4b3c      	ldr	r3, [pc, #240]	; (18194 <main+0x2bc>)
   180a2:	4798      	blx	r3
							LED_Toggle(LED0);
   180a4:	e7f8      	b.n	18098 <main+0x1c0>
				1. Code below publish to a topic in AWS IoT Core.
				2. The topic name is wifiSensorBoard/”your_thing_name”/dataControl
				3. After enabling the code, you can start subscribe to the the above topic and receive the data on AWS IoT.
	*/
	// Once MiWi data has arrived from end device publishing this data to AWS is accomplished by the below code
	if (miwiNewDataArrived)
   180a6:	4b33      	ldr	r3, [pc, #204]	; (18174 <main+0x29c>)
   180a8:	781b      	ldrb	r3, [r3, #0]
   180aa:	2b00      	cmp	r3, #0
   180ac:	d00b      	beq.n	180c6 <main+0x1ee>
	{
		#if 1
			if(cloudConnecting == 3){
   180ae:	4b35      	ldr	r3, [pc, #212]	; (18184 <main+0x2ac>)
   180b0:	681b      	ldr	r3, [r3, #0]
   180b2:	2b03      	cmp	r3, #3
   180b4:	d107      	bne.n	180c6 <main+0x1ee>
				miwiNewDataArrived = false;
   180b6:	4b2f      	ldr	r3, [pc, #188]	; (18174 <main+0x29c>)
   180b8:	2200      	movs	r2, #0
   180ba:	701a      	strb	r2, [r3, #0]
				cloudConnecting = 3;
   180bc:	4b31      	ldr	r3, [pc, #196]	; (18184 <main+0x2ac>)
   180be:	2203      	movs	r2, #3
   180c0:	601a      	str	r2, [r3, #0]
				env_sensor_execute();
   180c2:	4b35      	ldr	r3, [pc, #212]	; (18198 <main+0x2c0>)
   180c4:	4798      	blx	r3
			}
		#endif
	}

		cloud_mqtt_yield(100);
   180c6:	2064      	movs	r0, #100	; 0x64
   180c8:	4b34      	ldr	r3, [pc, #208]	; (1819c <main+0x2c4>)
   180ca:	4798      	blx	r3
		LED_On(LED0);
   180cc:	e768      	b.n	17fa0 <main+0xc8>
   180ce:	46c0      	nop			; (mov r8, r8)
   180d0:	00018595 	.word	0x00018595
   180d4:	00012675 	.word	0x00012675
   180d8:	00016d55 	.word	0x00016d55
   180dc:	00017afd 	.word	0x00017afd
   180e0:	0001895d 	.word	0x0001895d
   180e4:	00011c4d 	.word	0x00011c4d
   180e8:	0001227d 	.word	0x0001227d
   180ec:	0001ec70 	.word	0x0001ec70
   180f0:	0001bd69 	.word	0x0001bd69
   180f4:	0001249d 	.word	0x0001249d
   180f8:	00012b2d 	.word	0x00012b2d
   180fc:	200005b8 	.word	0x200005b8
   18100:	00017dad 	.word	0x00017dad
   18104:	000120ed 	.word	0x000120ed
   18108:	00012085 	.word	0x00012085
   1810c:	00017cd9 	.word	0x00017cd9
   18110:	0000028d 	.word	0x0000028d
   18114:	0001ecd4 	.word	0x0001ecd4
   18118:	0001ecd8 	.word	0x0001ecd8
   1811c:	00017c25 	.word	0x00017c25
   18120:	0001ecf4 	.word	0x0001ecf4
   18124:	0001bc4d 	.word	0x0001bc4d
   18128:	00019785 	.word	0x00019785
   1812c:	00017e79 	.word	0x00017e79
   18130:	00017eb1 	.word	0x00017eb1
   18134:	0000234d 	.word	0x0000234d
   18138:	00006d09 	.word	0x00006d09
   1813c:	000122b9 	.word	0x000122b9
   18140:	00017d2d 	.word	0x00017d2d
   18144:	20002504 	.word	0x20002504
   18148:	0001baed 	.word	0x0001baed
   1814c:	0001c02f 	.word	0x0001c02f
   18150:	0001ed04 	.word	0x0001ed04
   18154:	0001bab7 	.word	0x0001bab7
   18158:	20002474 	.word	0x20002474
   1815c:	200025a8 	.word	0x200025a8
   18160:	0001ba69 	.word	0x0001ba69
   18164:	0001bfe9 	.word	0x0001bfe9
   18168:	0001ed0c 	.word	0x0001ed0c
   1816c:	200025b8 	.word	0x200025b8
   18170:	200024f8 	.word	0x200024f8
   18174:	200005b9 	.word	0x200005b9
   18178:	0001ed1c 	.word	0x0001ed1c
   1817c:	0001225d 	.word	0x0001225d
   18180:	20001852 	.word	0x20001852
   18184:	200017a8 	.word	0x200017a8
   18188:	0000cd91 	.word	0x0000cd91
   1818c:	0001ed40 	.word	0x0001ed40
   18190:	0001ed60 	.word	0x0001ed60
   18194:	000126fd 	.word	0x000126fd
   18198:	00018c1d 	.word	0x00018c1d
   1819c:	0000cf21 	.word	0x0000cf21

000181a0 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   181a0:	b580      	push	{r7, lr}
   181a2:	b084      	sub	sp, #16
   181a4:	af00      	add	r7, sp, #0
   181a6:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   181a8:	687b      	ldr	r3, [r7, #4]
   181aa:	22b0      	movs	r2, #176	; 0xb0
   181ac:	0112      	lsls	r2, r2, #4
   181ae:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   181b0:	687b      	ldr	r3, [r7, #4]
   181b2:	2201      	movs	r2, #1
   181b4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   181b6:	687b      	ldr	r3, [r7, #4]
   181b8:	2200      	movs	r2, #0
   181ba:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
   181bc:	687b      	ldr	r3, [r7, #4]
   181be:	2201      	movs	r2, #1
   181c0:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   181c2:	230f      	movs	r3, #15
   181c4:	18fb      	adds	r3, r7, r3
   181c6:	2200      	movs	r2, #0
   181c8:	701a      	strb	r2, [r3, #0]
   181ca:	e00e      	b.n	181ea <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   181cc:	230f      	movs	r3, #15
   181ce:	18fb      	adds	r3, r7, r3
   181d0:	781a      	ldrb	r2, [r3, #0]
   181d2:	687b      	ldr	r3, [r7, #4]
   181d4:	3202      	adds	r2, #2
   181d6:	0092      	lsls	r2, r2, #2
   181d8:	2100      	movs	r1, #0
   181da:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   181dc:	230f      	movs	r3, #15
   181de:	18fb      	adds	r3, r7, r3
   181e0:	781a      	ldrb	r2, [r3, #0]
   181e2:	230f      	movs	r3, #15
   181e4:	18fb      	adds	r3, r7, r3
   181e6:	3201      	adds	r2, #1
   181e8:	701a      	strb	r2, [r3, #0]
   181ea:	230f      	movs	r3, #15
   181ec:	18fb      	adds	r3, r7, r3
   181ee:	781b      	ldrb	r3, [r3, #0]
   181f0:	2b01      	cmp	r3, #1
   181f2:	d9eb      	bls.n	181cc <rtc_count_get_config_defaults+0x2c>
	}
}
   181f4:	46c0      	nop			; (mov r8, r8)
   181f6:	46bd      	mov	sp, r7
   181f8:	b004      	add	sp, #16
   181fa:	bd80      	pop	{r7, pc}

000181fc <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   181fc:	b580      	push	{r7, lr}
   181fe:	b086      	sub	sp, #24
   18200:	af00      	add	r7, sp, #0
   18202:	6078      	str	r0, [r7, #4]
   18204:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   18206:	687b      	ldr	r3, [r7, #4]
   18208:	681b      	ldr	r3, [r3, #0]
   1820a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   1820c:	2300      	movs	r3, #0
   1820e:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   18210:	683b      	ldr	r3, [r7, #0]
   18212:	781b      	ldrb	r3, [r3, #0]
   18214:	2b00      	cmp	r3, #0
   18216:	d004      	beq.n	18222 <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   18218:	697b      	ldr	r3, [r7, #20]
   1821a:	2280      	movs	r2, #128	; 0x80
   1821c:	0212      	lsls	r2, r2, #8
   1821e:	4313      	orrs	r3, r2
   18220:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18222:	2313      	movs	r3, #19
   18224:	18fb      	adds	r3, r7, r3
   18226:	2200      	movs	r2, #0
   18228:	701a      	strb	r2, [r3, #0]
   1822a:	e01c      	b.n	18266 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   1822c:	2313      	movs	r3, #19
   1822e:	18fb      	adds	r3, r7, r3
   18230:	781b      	ldrb	r3, [r3, #0]
   18232:	683a      	ldr	r2, [r7, #0]
   18234:	18d3      	adds	r3, r2, r3
   18236:	785b      	ldrb	r3, [r3, #1]
   18238:	2b00      	cmp	r3, #0
   1823a:	d00d      	beq.n	18258 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   1823c:	2313      	movs	r3, #19
   1823e:	18fb      	adds	r3, r7, r3
   18240:	781b      	ldrb	r3, [r3, #0]
   18242:	2201      	movs	r2, #1
   18244:	409a      	lsls	r2, r3
   18246:	0013      	movs	r3, r2
   18248:	021b      	lsls	r3, r3, #8
   1824a:	001a      	movs	r2, r3
   1824c:	2380      	movs	r3, #128	; 0x80
   1824e:	005b      	lsls	r3, r3, #1
   18250:	4013      	ands	r3, r2
   18252:	697a      	ldr	r2, [r7, #20]
   18254:	4313      	orrs	r3, r2
   18256:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18258:	2313      	movs	r3, #19
   1825a:	18fb      	adds	r3, r7, r3
   1825c:	781a      	ldrb	r2, [r3, #0]
   1825e:	2313      	movs	r3, #19
   18260:	18fb      	adds	r3, r7, r3
   18262:	3201      	adds	r2, #1
   18264:	701a      	strb	r2, [r3, #0]
   18266:	2313      	movs	r3, #19
   18268:	18fb      	adds	r3, r7, r3
   1826a:	781b      	ldrb	r3, [r3, #0]
   1826c:	2b01      	cmp	r3, #1
   1826e:	d9dd      	bls.n	1822c <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   18270:	2312      	movs	r3, #18
   18272:	18fb      	adds	r3, r7, r3
   18274:	2200      	movs	r2, #0
   18276:	701a      	strb	r2, [r3, #0]
   18278:	e01a      	b.n	182b0 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   1827a:	2312      	movs	r3, #18
   1827c:	18fb      	adds	r3, r7, r3
   1827e:	781b      	ldrb	r3, [r3, #0]
   18280:	683a      	ldr	r2, [r7, #0]
   18282:	18d3      	adds	r3, r2, r3
   18284:	78db      	ldrb	r3, [r3, #3]
   18286:	2b00      	cmp	r3, #0
   18288:	d00b      	beq.n	182a2 <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   1828a:	2312      	movs	r3, #18
   1828c:	18fb      	adds	r3, r7, r3
   1828e:	781b      	ldrb	r3, [r3, #0]
   18290:	2201      	movs	r2, #1
   18292:	409a      	lsls	r2, r3
   18294:	0013      	movs	r3, r2
   18296:	001a      	movs	r2, r3
   18298:	23ff      	movs	r3, #255	; 0xff
   1829a:	4013      	ands	r3, r2
   1829c:	697a      	ldr	r2, [r7, #20]
   1829e:	4313      	orrs	r3, r2
   182a0:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   182a2:	2312      	movs	r3, #18
   182a4:	18fb      	adds	r3, r7, r3
   182a6:	781a      	ldrb	r2, [r3, #0]
   182a8:	2312      	movs	r3, #18
   182aa:	18fb      	adds	r3, r7, r3
   182ac:	3201      	adds	r2, #1
   182ae:	701a      	strb	r2, [r3, #0]
   182b0:	2312      	movs	r3, #18
   182b2:	18fb      	adds	r3, r7, r3
   182b4:	781b      	ldrb	r3, [r3, #0]
   182b6:	2b07      	cmp	r3, #7
   182b8:	d9df      	bls.n	1827a <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   182ba:	68fb      	ldr	r3, [r7, #12]
   182bc:	685a      	ldr	r2, [r3, #4]
   182be:	697b      	ldr	r3, [r7, #20]
   182c0:	431a      	orrs	r2, r3
   182c2:	68fb      	ldr	r3, [r7, #12]
   182c4:	605a      	str	r2, [r3, #4]
}
   182c6:	46c0      	nop			; (mov r8, r8)
   182c8:	46bd      	mov	sp, r7
   182ca:	b006      	add	sp, #24
   182cc:	bd80      	pop	{r7, pc}
	...

000182d0 <rtc_overflow_callback>:
uint8_t sec60Count = 0;
/*! \brief RTC timer overflow callback
 *
 */
void rtc_overflow_callback(void)
{
   182d0:	b580      	push	{r7, lr}
   182d2:	b082      	sub	sp, #8
   182d4:	af00      	add	r7, sp, #0
	uint16_t power_led_period = POWER_LED_PERIOD;
   182d6:	1dbb      	adds	r3, r7, #6
   182d8:	4a5d      	ldr	r2, [pc, #372]	; (18450 <rtc_overflow_callback+0x180>)
   182da:	801a      	strh	r2, [r3, #0]
	
	/* Do something on RTC overflow here */
	rtc_count_clear_compare_match(&rtc_instance,RTC_COUNT_COMPARE_0);
   182dc:	4b5d      	ldr	r3, [pc, #372]	; (18454 <rtc_overflow_callback+0x184>)
   182de:	2100      	movs	r1, #0
   182e0:	0018      	movs	r0, r3
   182e2:	4b5d      	ldr	r3, [pc, #372]	; (18458 <rtc_overflow_callback+0x188>)
   182e4:	4798      	blx	r3
	//touch_time.time_to_measure_touch = 1u;

	/* 20ms tick */
	rtc_timer++;
   182e6:	4b5d      	ldr	r3, [pc, #372]	; (1845c <rtc_overflow_callback+0x18c>)
   182e8:	681b      	ldr	r3, [r3, #0]
   182ea:	1c5a      	adds	r2, r3, #1
   182ec:	4b5b      	ldr	r3, [pc, #364]	; (1845c <rtc_overflow_callback+0x18c>)
   182ee:	601a      	str	r2, [r3, #0]
	ms_ticks +=20;
   182f0:	4b5b      	ldr	r3, [pc, #364]	; (18460 <rtc_overflow_callback+0x190>)
   182f2:	681b      	ldr	r3, [r3, #0]
   182f4:	3314      	adds	r3, #20
   182f6:	001a      	movs	r2, r3
   182f8:	4b59      	ldr	r3, [pc, #356]	; (18460 <rtc_overflow_callback+0x190>)
   182fa:	601a      	str	r2, [r3, #0]
	
	tick_bhi = 1;
   182fc:	4b59      	ldr	r3, [pc, #356]	; (18464 <rtc_overflow_callback+0x194>)
   182fe:	2201      	movs	r2, #1
   18300:	701a      	strb	r2, [r3, #0]

	if(rtc_timer % 3000 == 0)
   18302:	4b56      	ldr	r3, [pc, #344]	; (1845c <rtc_overflow_callback+0x18c>)
   18304:	681a      	ldr	r2, [r3, #0]
   18306:	4b58      	ldr	r3, [pc, #352]	; (18468 <rtc_overflow_callback+0x198>)
   18308:	4951      	ldr	r1, [pc, #324]	; (18450 <rtc_overflow_callback+0x180>)
   1830a:	0010      	movs	r0, r2
   1830c:	4798      	blx	r3
   1830e:	1e0b      	subs	r3, r1, #0
   18310:	d108      	bne.n	18324 <rtc_overflow_callback+0x54>
	{
		
		tick_60second = 1;
   18312:	4b56      	ldr	r3, [pc, #344]	; (1846c <rtc_overflow_callback+0x19c>)
   18314:	2201      	movs	r2, #1
   18316:	701a      	strb	r2, [r3, #0]
		sec60Count++;
   18318:	4b55      	ldr	r3, [pc, #340]	; (18470 <rtc_overflow_callback+0x1a0>)
   1831a:	781b      	ldrb	r3, [r3, #0]
   1831c:	3301      	adds	r3, #1
   1831e:	b2da      	uxtb	r2, r3
   18320:	4b53      	ldr	r3, [pc, #332]	; (18470 <rtc_overflow_callback+0x1a0>)
   18322:	701a      	strb	r2, [r3, #0]
		
	}
	if(sec60Count == 60)
   18324:	4b52      	ldr	r3, [pc, #328]	; (18470 <rtc_overflow_callback+0x1a0>)
   18326:	781b      	ldrb	r3, [r3, #0]
   18328:	2b3c      	cmp	r3, #60	; 0x3c
   1832a:	d10d      	bne.n	18348 <rtc_overflow_callback+0x78>
	{
		printf("sec60count= %d\r\n",sec60Count);
   1832c:	4b50      	ldr	r3, [pc, #320]	; (18470 <rtc_overflow_callback+0x1a0>)
   1832e:	781b      	ldrb	r3, [r3, #0]
   18330:	001a      	movs	r2, r3
   18332:	4b50      	ldr	r3, [pc, #320]	; (18474 <rtc_overflow_callback+0x1a4>)
   18334:	0011      	movs	r1, r2
   18336:	0018      	movs	r0, r3
   18338:	4b4f      	ldr	r3, [pc, #316]	; (18478 <rtc_overflow_callback+0x1a8>)
   1833a:	4798      	blx	r3
		tick_1min = 1;
   1833c:	4b4f      	ldr	r3, [pc, #316]	; (1847c <rtc_overflow_callback+0x1ac>)
   1833e:	2201      	movs	r2, #1
   18340:	701a      	strb	r2, [r3, #0]
		sec60Count = 0;
   18342:	4b4b      	ldr	r3, [pc, #300]	; (18470 <rtc_overflow_callback+0x1a0>)
   18344:	2200      	movs	r2, #0
   18346:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 500 == 0)
   18348:	4b44      	ldr	r3, [pc, #272]	; (1845c <rtc_overflow_callback+0x18c>)
   1834a:	6818      	ldr	r0, [r3, #0]
   1834c:	4b46      	ldr	r3, [pc, #280]	; (18468 <rtc_overflow_callback+0x198>)
   1834e:	22fa      	movs	r2, #250	; 0xfa
   18350:	0051      	lsls	r1, r2, #1
   18352:	4798      	blx	r3
   18354:	1e0b      	subs	r3, r1, #0
   18356:	d102      	bne.n	1835e <rtc_overflow_callback+0x8e>
	{
		tick_10second = 1;
   18358:	4b49      	ldr	r3, [pc, #292]	; (18480 <rtc_overflow_callback+0x1b0>)
   1835a:	2201      	movs	r2, #1
   1835c:	701a      	strb	r2, [r3, #0]
	}	

	if(rtc_timer % 1000 == 0)
   1835e:	4b3f      	ldr	r3, [pc, #252]	; (1845c <rtc_overflow_callback+0x18c>)
   18360:	6818      	ldr	r0, [r3, #0]
   18362:	4b41      	ldr	r3, [pc, #260]	; (18468 <rtc_overflow_callback+0x198>)
   18364:	22fa      	movs	r2, #250	; 0xfa
   18366:	0091      	lsls	r1, r2, #2
   18368:	4798      	blx	r3
   1836a:	1e0b      	subs	r3, r1, #0
   1836c:	d102      	bne.n	18374 <rtc_overflow_callback+0xa4>
	{
		tick_20second = 1;
   1836e:	4b45      	ldr	r3, [pc, #276]	; (18484 <rtc_overflow_callback+0x1b4>)
   18370:	2201      	movs	r2, #1
   18372:	701a      	strb	r2, [r3, #0]
	}

	if(rtc_timer % 1500 == 0)
   18374:	4b39      	ldr	r3, [pc, #228]	; (1845c <rtc_overflow_callback+0x18c>)
   18376:	681a      	ldr	r2, [r3, #0]
   18378:	4b3b      	ldr	r3, [pc, #236]	; (18468 <rtc_overflow_callback+0x198>)
   1837a:	4943      	ldr	r1, [pc, #268]	; (18488 <rtc_overflow_callback+0x1b8>)
   1837c:	0010      	movs	r0, r2
   1837e:	4798      	blx	r3
   18380:	1e0b      	subs	r3, r1, #0
   18382:	d102      	bne.n	1838a <rtc_overflow_callback+0xba>
	{
		tick_30second = 1;
   18384:	4b41      	ldr	r3, [pc, #260]	; (1848c <rtc_overflow_callback+0x1bc>)
   18386:	2201      	movs	r2, #1
   18388:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % env_sensor_period == 0)
   1838a:	4b34      	ldr	r3, [pc, #208]	; (1845c <rtc_overflow_callback+0x18c>)
   1838c:	681a      	ldr	r2, [r3, #0]
   1838e:	4b40      	ldr	r3, [pc, #256]	; (18490 <rtc_overflow_callback+0x1c0>)
   18390:	781b      	ldrb	r3, [r3, #0]
   18392:	0019      	movs	r1, r3
   18394:	4b34      	ldr	r3, [pc, #208]	; (18468 <rtc_overflow_callback+0x198>)
   18396:	0010      	movs	r0, r2
   18398:	4798      	blx	r3
   1839a:	1e0b      	subs	r3, r1, #0
   1839c:	d102      	bne.n	183a4 <rtc_overflow_callback+0xd4>
	{
		tick_env_sensor = 1;
   1839e:	4b3d      	ldr	r3, [pc, #244]	; (18494 <rtc_overflow_callback+0x1c4>)
   183a0:	2201      	movs	r2, #1
   183a2:	701a      	strb	r2, [r3, #0]
	}


	if(rtc_timer % 250 == 0)
   183a4:	4b2d      	ldr	r3, [pc, #180]	; (1845c <rtc_overflow_callback+0x18c>)
   183a6:	681a      	ldr	r2, [r3, #0]
   183a8:	4b2f      	ldr	r3, [pc, #188]	; (18468 <rtc_overflow_callback+0x198>)
   183aa:	21fa      	movs	r1, #250	; 0xfa
   183ac:	0010      	movs	r0, r2
   183ae:	4798      	blx	r3
   183b0:	1e0b      	subs	r3, r1, #0
   183b2:	d102      	bne.n	183ba <rtc_overflow_callback+0xea>
	{
		tick_5second = 1;
   183b4:	4b38      	ldr	r3, [pc, #224]	; (18498 <rtc_overflow_callback+0x1c8>)
   183b6:	2201      	movs	r2, #1
   183b8:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 100 == 0)
   183ba:	4b28      	ldr	r3, [pc, #160]	; (1845c <rtc_overflow_callback+0x18c>)
   183bc:	681a      	ldr	r2, [r3, #0]
   183be:	4b2a      	ldr	r3, [pc, #168]	; (18468 <rtc_overflow_callback+0x198>)
   183c0:	2164      	movs	r1, #100	; 0x64
   183c2:	0010      	movs	r0, r2
   183c4:	4798      	blx	r3
   183c6:	1e0b      	subs	r3, r1, #0
   183c8:	d102      	bne.n	183d0 <rtc_overflow_callback+0x100>
	{
		tick_2second = 1;
   183ca:	4b34      	ldr	r3, [pc, #208]	; (1849c <rtc_overflow_callback+0x1cc>)
   183cc:	2201      	movs	r2, #1
   183ce:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 50 == 0)
   183d0:	4b22      	ldr	r3, [pc, #136]	; (1845c <rtc_overflow_callback+0x18c>)
   183d2:	681a      	ldr	r2, [r3, #0]
   183d4:	4b24      	ldr	r3, [pc, #144]	; (18468 <rtc_overflow_callback+0x198>)
   183d6:	2132      	movs	r1, #50	; 0x32
   183d8:	0010      	movs	r0, r2
   183da:	4798      	blx	r3
   183dc:	1e0b      	subs	r3, r1, #0
   183de:	d10c      	bne.n	183fa <rtc_overflow_callback+0x12a>
	{
		tick_1second = 1;
   183e0:	4b2f      	ldr	r3, [pc, #188]	; (184a0 <rtc_overflow_callback+0x1d0>)
   183e2:	2201      	movs	r2, #1
   183e4:	701a      	strb	r2, [r3, #0]
		if (rotation_data_timer)
   183e6:	4b2f      	ldr	r3, [pc, #188]	; (184a4 <rtc_overflow_callback+0x1d4>)
   183e8:	781b      	ldrb	r3, [r3, #0]
   183ea:	2b00      	cmp	r3, #0
   183ec:	d005      	beq.n	183fa <rtc_overflow_callback+0x12a>
			rotation_data_timer--;
   183ee:	4b2d      	ldr	r3, [pc, #180]	; (184a4 <rtc_overflow_callback+0x1d4>)
   183f0:	781b      	ldrb	r3, [r3, #0]
   183f2:	3b01      	subs	r3, #1
   183f4:	b2da      	uxtb	r2, r3
   183f6:	4b2b      	ldr	r3, [pc, #172]	; (184a4 <rtc_overflow_callback+0x1d4>)
   183f8:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 25 == 0)
   183fa:	4b18      	ldr	r3, [pc, #96]	; (1845c <rtc_overflow_callback+0x18c>)
   183fc:	681a      	ldr	r2, [r3, #0]
   183fe:	4b1a      	ldr	r3, [pc, #104]	; (18468 <rtc_overflow_callback+0x198>)
   18400:	2119      	movs	r1, #25
   18402:	0010      	movs	r0, r2
   18404:	4798      	blx	r3
   18406:	1e0b      	subs	r3, r1, #0
   18408:	d105      	bne.n	18416 <rtc_overflow_callback+0x146>
	{
		tick_rotation_data = 1;
   1840a:	4b27      	ldr	r3, [pc, #156]	; (184a8 <rtc_overflow_callback+0x1d8>)
   1840c:	2201      	movs	r2, #1
   1840e:	701a      	strb	r2, [r3, #0]
		tick_500ms = 1;
   18410:	4b26      	ldr	r3, [pc, #152]	; (184ac <rtc_overflow_callback+0x1dc>)
   18412:	2201      	movs	r2, #1
   18414:	701a      	strb	r2, [r3, #0]
	}
	if(rtc_timer % 5 == 0)
   18416:	4b11      	ldr	r3, [pc, #68]	; (1845c <rtc_overflow_callback+0x18c>)
   18418:	681a      	ldr	r2, [r3, #0]
   1841a:	4b13      	ldr	r3, [pc, #76]	; (18468 <rtc_overflow_callback+0x198>)
   1841c:	2105      	movs	r1, #5
   1841e:	0010      	movs	r0, r2
   18420:	4798      	blx	r3
   18422:	1e0b      	subs	r3, r1, #0
   18424:	d102      	bne.n	1842c <rtc_overflow_callback+0x15c>
	{
		tick_100ms = 1;
   18426:	4b22      	ldr	r3, [pc, #136]	; (184b0 <rtc_overflow_callback+0x1e0>)
   18428:	2201      	movs	r2, #1
   1842a:	701a      	strb	r2, [r3, #0]
	}
	
	
	/* power LED handling */
	power_led_timer++;
   1842c:	4b21      	ldr	r3, [pc, #132]	; (184b4 <rtc_overflow_callback+0x1e4>)
   1842e:	881b      	ldrh	r3, [r3, #0]
   18430:	3301      	adds	r3, #1
   18432:	b29a      	uxth	r2, r3
   18434:	4b1f      	ldr	r3, [pc, #124]	; (184b4 <rtc_overflow_callback+0x1e4>)
   18436:	801a      	strh	r2, [r3, #0]
	
	if(low_battery_flag == 1)
   18438:	4b1f      	ldr	r3, [pc, #124]	; (184b8 <rtc_overflow_callback+0x1e8>)
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	2b00      	cmp	r3, #0
   1843e:	d003      	beq.n	18448 <rtc_overflow_callback+0x178>
	{
		power_led_period = POWER_LED_LOW_BATTERY_PERIOD; 	
   18440:	1dbb      	adds	r3, r7, #6
   18442:	22fa      	movs	r2, #250	; 0xfa
   18444:	0052      	lsls	r2, r2, #1
   18446:	801a      	strh	r2, [r3, #0]
	}
	
	
}
   18448:	46c0      	nop			; (mov r8, r8)
   1844a:	46bd      	mov	sp, r7
   1844c:	b002      	add	sp, #8
   1844e:	bd80      	pop	{r7, pc}
   18450:	00000bb8 	.word	0x00000bb8
   18454:	20002640 	.word	0x20002640
   18458:	000062f5 	.word	0x000062f5
   1845c:	2000267c 	.word	0x2000267c
   18460:	200017ac 	.word	0x200017ac
   18464:	20002680 	.word	0x20002680
   18468:	00019bf5 	.word	0x00019bf5
   1846c:	2000263c 	.word	0x2000263c
   18470:	200017b1 	.word	0x200017b1
   18474:	0001ed78 	.word	0x0001ed78
   18478:	0001bc4d 	.word	0x0001bc4d
   1847c:	2000263d 	.word	0x2000263d
   18480:	20002686 	.word	0x20002686
   18484:	20002685 	.word	0x20002685
   18488:	000005dc 	.word	0x000005dc
   1848c:	20002682 	.word	0x20002682
   18490:	200005ba 	.word	0x200005ba
   18494:	20002689 	.word	0x20002689
   18498:	2000267a 	.word	0x2000267a
   1849c:	2000268b 	.word	0x2000268b
   184a0:	20002684 	.word	0x20002684
   184a4:	20002687 	.word	0x20002687
   184a8:	20002683 	.word	0x20002683
   184ac:	20002688 	.word	0x20002688
   184b0:	20002681 	.word	0x20002681
   184b4:	20002678 	.word	0x20002678
   184b8:	200017b0 	.word	0x200017b0

000184bc <configure_rtc_callbacks>:

/*! \brief Configure the RTC timer callback
 *
 */
void configure_rtc_callbacks(void)
{
   184bc:	b580      	push	{r7, lr}
   184be:	af00      	add	r7, sp, #0
	/* register callback */
	rtc_count_register_callback(&rtc_instance,
   184c0:	4906      	ldr	r1, [pc, #24]	; (184dc <configure_rtc_callbacks+0x20>)
   184c2:	4b07      	ldr	r3, [pc, #28]	; (184e0 <configure_rtc_callbacks+0x24>)
   184c4:	2208      	movs	r2, #8
   184c6:	0018      	movs	r0, r3
   184c8:	4b06      	ldr	r3, [pc, #24]	; (184e4 <configure_rtc_callbacks+0x28>)
   184ca:	4798      	blx	r3
			rtc_overflow_callback, RTC_COUNT_CALLBACK_COMPARE_0);
	/* Enable callback */
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_COMPARE_0);
   184cc:	4b04      	ldr	r3, [pc, #16]	; (184e0 <configure_rtc_callbacks+0x24>)
   184ce:	2108      	movs	r1, #8
   184d0:	0018      	movs	r0, r3
   184d2:	4b05      	ldr	r3, [pc, #20]	; (184e8 <configure_rtc_callbacks+0x2c>)
   184d4:	4798      	blx	r3
}
   184d6:	46c0      	nop			; (mov r8, r8)
   184d8:	46bd      	mov	sp, r7
   184da:	bd80      	pop	{r7, pc}
   184dc:	000182d1 	.word	0x000182d1
   184e0:	20002640 	.word	0x20002640
   184e4:	0000635d 	.word	0x0000635d
   184e8:	00006411 	.word	0x00006411

000184ec <configure_rtc_count>:
	}

	return false;
}
void configure_rtc_count(void)
{
   184ec:	b580      	push	{r7, lr}
   184ee:	b088      	sub	sp, #32
   184f0:	af00      	add	r7, sp, #0
	volatile uint16_t temp;
	
	struct rtc_count_events config_rtc_event
   184f2:	2310      	movs	r3, #16
   184f4:	18fb      	adds	r3, r7, r3
   184f6:	0018      	movs	r0, r3
   184f8:	230b      	movs	r3, #11
   184fa:	001a      	movs	r2, r3
   184fc:	2100      	movs	r1, #0
   184fe:	4b1d      	ldr	r3, [pc, #116]	; (18574 <configure_rtc_count+0x88>)
   18500:	4798      	blx	r3
   18502:	2310      	movs	r3, #16
   18504:	18fb      	adds	r3, r7, r3
   18506:	2201      	movs	r2, #1
   18508:	729a      	strb	r2, [r3, #10]
		 = { .generate_event_on_periodic[(7u)] = true };
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
   1850a:	003b      	movs	r3, r7
   1850c:	0018      	movs	r0, r3
   1850e:	4b1a      	ldr	r3, [pc, #104]	; (18578 <configure_rtc_count+0x8c>)
   18510:	4798      	blx	r3

	config_rtc_count.prescaler           = RTC_MODE0_CTRLA_PRESCALER_DIV1;
   18512:	003b      	movs	r3, r7
   18514:	2280      	movs	r2, #128	; 0x80
   18516:	0052      	lsls	r2, r2, #1
   18518:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_32BIT;
   1851a:	003b      	movs	r3, r7
   1851c:	2201      	movs	r2, #1
   1851e:	709a      	strb	r2, [r3, #2]
	config_rtc_count.clear_on_match =true;
   18520:	003b      	movs	r3, r7
   18522:	2201      	movs	r2, #1
   18524:	70da      	strb	r2, [r3, #3]

	/* initialize rtc */
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
   18526:	003a      	movs	r2, r7
   18528:	4914      	ldr	r1, [pc, #80]	; (1857c <configure_rtc_count+0x90>)
   1852a:	4b15      	ldr	r3, [pc, #84]	; (18580 <configure_rtc_count+0x94>)
   1852c:	0018      	movs	r0, r3
   1852e:	4b15      	ldr	r3, [pc, #84]	; (18584 <configure_rtc_count+0x98>)
   18530:	4798      	blx	r3

	/* Enable RTC events */
	config_rtc_event.generate_event_on_periodic[(7u)] = true;
   18532:	2310      	movs	r3, #16
   18534:	18fb      	adds	r3, r7, r3
   18536:	2201      	movs	r2, #1
   18538:	729a      	strb	r2, [r3, #10]
	
	rtc_count_enable_events(&rtc_instance, &config_rtc_event);
   1853a:	2310      	movs	r3, #16
   1853c:	18fa      	adds	r2, r7, r3
   1853e:	4b10      	ldr	r3, [pc, #64]	; (18580 <configure_rtc_count+0x94>)
   18540:	0011      	movs	r1, r2
   18542:	0018      	movs	r0, r3
   18544:	4b10      	ldr	r3, [pc, #64]	; (18588 <configure_rtc_count+0x9c>)
   18546:	4798      	blx	r3

	temp = TIME_PERIOD_1MSEC * 20u;
   18548:	231e      	movs	r3, #30
   1854a:	18fb      	adds	r3, r7, r3
   1854c:	2214      	movs	r2, #20
   1854e:	801a      	strh	r2, [r3, #0]

	rtc_count_set_compare(&rtc_instance,temp,RTC_COUNT_COMPARE_0);
   18550:	231e      	movs	r3, #30
   18552:	18fb      	adds	r3, r7, r3
   18554:	881b      	ldrh	r3, [r3, #0]
   18556:	b29b      	uxth	r3, r3
   18558:	0019      	movs	r1, r3
   1855a:	4b09      	ldr	r3, [pc, #36]	; (18580 <configure_rtc_count+0x94>)
   1855c:	2200      	movs	r2, #0
   1855e:	0018      	movs	r0, r3
   18560:	4b0a      	ldr	r3, [pc, #40]	; (1858c <configure_rtc_count+0xa0>)
   18562:	4798      	blx	r3

	/* enable rtc */
	rtc_count_enable(&rtc_instance);
   18564:	4b06      	ldr	r3, [pc, #24]	; (18580 <configure_rtc_count+0x94>)
   18566:	0018      	movs	r0, r3
   18568:	4b09      	ldr	r3, [pc, #36]	; (18590 <configure_rtc_count+0xa4>)
   1856a:	4798      	blx	r3

}
   1856c:	46c0      	nop			; (mov r8, r8)
   1856e:	46bd      	mov	sp, r7
   18570:	b008      	add	sp, #32
   18572:	bd80      	pop	{r7, pc}
   18574:	0001baed 	.word	0x0001baed
   18578:	000181a1 	.word	0x000181a1
   1857c:	40002000 	.word	0x40002000
   18580:	20002640 	.word	0x20002640
   18584:	000061f9 	.word	0x000061f9
   18588:	000181fd 	.word	0x000181fd
   1858c:	0000625d 	.word	0x0000625d
   18590:	00005fe5 	.word	0x00005fe5

00018594 <rtc_init>:

/*! \brief Initialize RTC timer
 *
 */
void rtc_init(void)
{
   18594:	b580      	push	{r7, lr}
   18596:	af00      	add	r7, sp, #0
	/* Configure and enable RTC */
	configure_rtc_count();
   18598:	4b03      	ldr	r3, [pc, #12]	; (185a8 <rtc_init+0x14>)
   1859a:	4798      	blx	r3

	/* Configure and enable callback */
	configure_rtc_callbacks();
   1859c:	4b03      	ldr	r3, [pc, #12]	; (185ac <rtc_init+0x18>)
   1859e:	4798      	blx	r3
}
   185a0:	46c0      	nop			; (mov r8, r8)
   185a2:	46bd      	mov	sp, r7
   185a4:	bd80      	pop	{r7, pc}
   185a6:	46c0      	nop			; (mov r8, r8)
   185a8:	000184ed 	.word	0x000184ed
   185ac:	000184bd 	.word	0x000184bd

000185b0 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
   185b0:	b580      	push	{r7, lr}
   185b2:	b086      	sub	sp, #24
   185b4:	af00      	add	r7, sp, #0
   185b6:	6078      	str	r0, [r7, #4]
   185b8:	0008      	movs	r0, r1
   185ba:	0011      	movs	r1, r2
   185bc:	1cfb      	adds	r3, r7, #3
   185be:	1c02      	adds	r2, r0, #0
   185c0:	701a      	strb	r2, [r3, #0]
   185c2:	1cbb      	adds	r3, r7, #2
   185c4:	1c0a      	adds	r2, r1, #0
   185c6:	701a      	strb	r2, [r3, #0]
	if (key != NULL) {
   185c8:	687b      	ldr	r3, [r7, #4]
   185ca:	2b00      	cmp	r3, #0
   185cc:	d01c      	beq.n	18608 <sal_aes_setup+0x58>
		/* Setup key. */
		dec_initialized = false;
   185ce:	4b5e      	ldr	r3, [pc, #376]	; (18748 <sal_aes_setup+0x198>)
   185d0:	2200      	movs	r2, #0
   185d2:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
   185d4:	4b5d      	ldr	r3, [pc, #372]	; (1874c <sal_aes_setup+0x19c>)
   185d6:	2202      	movs	r2, #2
   185d8:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
   185da:	4a5d      	ldr	r2, [pc, #372]	; (18750 <sal_aes_setup+0x1a0>)
   185dc:	687b      	ldr	r3, [r7, #4]
   185de:	0010      	movs	r0, r2
   185e0:	0019      	movs	r1, r3
   185e2:	2310      	movs	r3, #16
   185e4:	001a      	movs	r2, r3
   185e6:	4b5b      	ldr	r3, [pc, #364]	; (18754 <sal_aes_setup+0x1a4>)
   185e8:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   185ea:	4b5b      	ldr	r3, [pc, #364]	; (18758 <sal_aes_setup+0x1a8>)
   185ec:	2210      	movs	r2, #16
   185ee:	701a      	strb	r2, [r3, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
   185f0:	4b5a      	ldr	r3, [pc, #360]	; (1875c <sal_aes_setup+0x1ac>)
   185f2:	6879      	ldr	r1, [r7, #4]
   185f4:	2210      	movs	r2, #16
   185f6:	0018      	movs	r0, r3
   185f8:	4b56      	ldr	r3, [pc, #344]	; (18754 <sal_aes_setup+0x1a4>)
   185fa:	4798      	blx	r3

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
   185fc:	4b56      	ldr	r3, [pc, #344]	; (18758 <sal_aes_setup+0x1a8>)
   185fe:	2211      	movs	r2, #17
   18600:	0019      	movs	r1, r3
   18602:	2083      	movs	r0, #131	; 0x83
   18604:	4b56      	ldr	r3, [pc, #344]	; (18760 <sal_aes_setup+0x1b0>)
   18606:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
   18608:	1cbb      	adds	r3, r7, #2
   1860a:	781b      	ldrb	r3, [r3, #0]
   1860c:	2b00      	cmp	r3, #0
   1860e:	d002      	beq.n	18616 <sal_aes_setup+0x66>
   18610:	2b01      	cmp	r3, #1
   18612:	d016      	beq.n	18642 <sal_aes_setup+0x92>
   18614:	e053      	b.n	186be <sal_aes_setup+0x10e>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
   18616:	4b4d      	ldr	r3, [pc, #308]	; (1874c <sal_aes_setup+0x19c>)
   18618:	781b      	ldrb	r3, [r3, #0]
   1861a:	2b01      	cmp	r3, #1
   1861c:	d151      	bne.n	186c2 <sal_aes_setup+0x112>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   1861e:	4b4e      	ldr	r3, [pc, #312]	; (18758 <sal_aes_setup+0x1a8>)
   18620:	2210      	movs	r2, #16
   18622:	701a      	strb	r2, [r3, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
   18624:	4a4d      	ldr	r2, [pc, #308]	; (1875c <sal_aes_setup+0x1ac>)
   18626:	4b4a      	ldr	r3, [pc, #296]	; (18750 <sal_aes_setup+0x1a0>)
   18628:	0010      	movs	r0, r2
   1862a:	0019      	movs	r1, r3
   1862c:	2310      	movs	r3, #16
   1862e:	001a      	movs	r2, r3
   18630:	4b48      	ldr	r3, [pc, #288]	; (18754 <sal_aes_setup+0x1a4>)
   18632:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
   18634:	4b48      	ldr	r3, [pc, #288]	; (18758 <sal_aes_setup+0x1a8>)
   18636:	2211      	movs	r2, #17
   18638:	0019      	movs	r1, r3
   1863a:	2083      	movs	r0, #131	; 0x83
   1863c:	4b48      	ldr	r3, [pc, #288]	; (18760 <sal_aes_setup+0x1b0>)
   1863e:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
   18640:	e03f      	b.n	186c2 <sal_aes_setup+0x112>

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
   18642:	4b42      	ldr	r3, [pc, #264]	; (1874c <sal_aes_setup+0x19c>)
   18644:	781b      	ldrb	r3, [r3, #0]
   18646:	2b01      	cmp	r3, #1
   18648:	d03d      	beq.n	186c6 <sal_aes_setup+0x116>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   1864a:	4b43      	ldr	r3, [pc, #268]	; (18758 <sal_aes_setup+0x1a8>)
   1864c:	2210      	movs	r2, #16
   1864e:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
   18650:	4b3d      	ldr	r3, [pc, #244]	; (18748 <sal_aes_setup+0x198>)
   18652:	781b      	ldrb	r3, [r3, #0]
   18654:	2201      	movs	r2, #1
   18656:	4053      	eors	r3, r2
   18658:	b2db      	uxtb	r3, r3
   1865a:	2b00      	cmp	r3, #0
   1865c:	d01d      	beq.n	1869a <sal_aes_setup+0xea>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
   1865e:	4b3e      	ldr	r3, [pc, #248]	; (18758 <sal_aes_setup+0x1a8>)
   18660:	2200      	movs	r2, #0
   18662:	701a      	strb	r2, [r3, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
   18664:	4b3c      	ldr	r3, [pc, #240]	; (18758 <sal_aes_setup+0x1a8>)
   18666:	2280      	movs	r2, #128	; 0x80
   18668:	745a      	strb	r2, [r3, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
   1866a:	4b3e      	ldr	r3, [pc, #248]	; (18764 <sal_aes_setup+0x1b4>)
   1866c:	2201      	movs	r2, #1
   1866e:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
   18670:	2308      	movs	r3, #8
   18672:	18fb      	adds	r3, r7, r3
   18674:	2100      	movs	r1, #0
   18676:	0018      	movs	r0, r3
   18678:	4b3b      	ldr	r3, [pc, #236]	; (18768 <sal_aes_setup+0x1b8>)
   1867a:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
   1867c:	4b36      	ldr	r3, [pc, #216]	; (18758 <sal_aes_setup+0x1a8>)
   1867e:	2210      	movs	r2, #16
   18680:	701a      	strb	r2, [r3, #0]
				trx_sram_write(
   18682:	4b35      	ldr	r3, [pc, #212]	; (18758 <sal_aes_setup+0x1a8>)
   18684:	2201      	movs	r2, #1
   18686:	0019      	movs	r1, r3
   18688:	2083      	movs	r0, #131	; 0x83
   1868a:	4b35      	ldr	r3, [pc, #212]	; (18760 <sal_aes_setup+0x1b0>)
   1868c:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
   1868e:	4b37      	ldr	r3, [pc, #220]	; (1876c <sal_aes_setup+0x1bc>)
   18690:	2210      	movs	r2, #16
   18692:	0019      	movs	r1, r3
   18694:	2084      	movs	r0, #132	; 0x84
   18696:	4b36      	ldr	r3, [pc, #216]	; (18770 <sal_aes_setup+0x1c0>)
   18698:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
   1869a:	4a30      	ldr	r2, [pc, #192]	; (1875c <sal_aes_setup+0x1ac>)
   1869c:	4b33      	ldr	r3, [pc, #204]	; (1876c <sal_aes_setup+0x1bc>)
   1869e:	0010      	movs	r0, r2
   186a0:	0019      	movs	r1, r3
   186a2:	2310      	movs	r3, #16
   186a4:	001a      	movs	r2, r3
   186a6:	4b2b      	ldr	r3, [pc, #172]	; (18754 <sal_aes_setup+0x1a4>)
   186a8:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
   186aa:	4b2b      	ldr	r3, [pc, #172]	; (18758 <sal_aes_setup+0x1a8>)
   186ac:	2211      	movs	r2, #17
   186ae:	0019      	movs	r1, r3
   186b0:	2083      	movs	r0, #131	; 0x83
   186b2:	4b2b      	ldr	r3, [pc, #172]	; (18760 <sal_aes_setup+0x1b0>)
   186b4:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
   186b6:	4b24      	ldr	r3, [pc, #144]	; (18748 <sal_aes_setup+0x198>)
   186b8:	2201      	movs	r2, #1
   186ba:	701a      	strb	r2, [r3, #0]
		}

		break;
   186bc:	e003      	b.n	186c6 <sal_aes_setup+0x116>

	default:
		return false;
   186be:	2300      	movs	r3, #0
   186c0:	e03d      	b.n	1873e <sal_aes_setup+0x18e>
		break;
   186c2:	46c0      	nop			; (mov r8, r8)
   186c4:	e000      	b.n	186c8 <sal_aes_setup+0x118>
		break;
   186c6:	46c0      	nop			; (mov r8, r8)
	}

	last_dir = dir;
   186c8:	4b20      	ldr	r3, [pc, #128]	; (1874c <sal_aes_setup+0x19c>)
   186ca:	1cba      	adds	r2, r7, #2
   186cc:	7812      	ldrb	r2, [r2, #0]
   186ce:	701a      	strb	r2, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
   186d0:	1cfb      	adds	r3, r7, #3
   186d2:	781b      	ldrb	r3, [r3, #0]
   186d4:	2b00      	cmp	r3, #0
   186d6:	d001      	beq.n	186dc <sal_aes_setup+0x12c>
   186d8:	2b02      	cmp	r3, #2
   186da:	d12f      	bne.n	1873c <sal_aes_setup+0x18c>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
   186dc:	1cfb      	adds	r3, r7, #3
   186de:	781b      	ldrb	r3, [r3, #0]
   186e0:	011b      	lsls	r3, r3, #4
   186e2:	b25b      	sxtb	r3, r3
   186e4:	2270      	movs	r2, #112	; 0x70
   186e6:	4013      	ands	r3, r2
   186e8:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir);
   186ea:	1cbb      	adds	r3, r7, #2
   186ec:	781b      	ldrb	r3, [r3, #0]
   186ee:	00db      	lsls	r3, r3, #3
   186f0:	b25b      	sxtb	r3, r3
   186f2:	2108      	movs	r1, #8
   186f4:	400b      	ands	r3, r1
   186f6:	b25b      	sxtb	r3, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
   186f8:	4313      	orrs	r3, r2
   186fa:	b25b      	sxtb	r3, r3
   186fc:	b2da      	uxtb	r2, r3
   186fe:	4b16      	ldr	r3, [pc, #88]	; (18758 <sal_aes_setup+0x1a8>)
   18700:	701a      	strb	r2, [r3, #0]
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   18702:	1cfb      	adds	r3, r7, #3
   18704:	781b      	ldrb	r3, [r3, #0]
   18706:	011b      	lsls	r3, r3, #4
   18708:	b25b      	sxtb	r3, r3
   1870a:	2270      	movs	r2, #112	; 0x70
   1870c:	4013      	ands	r3, r2
   1870e:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir) |
   18710:	1cbb      	adds	r3, r7, #2
   18712:	781b      	ldrb	r3, [r3, #0]
   18714:	00db      	lsls	r3, r3, #3
   18716:	b25b      	sxtb	r3, r3
   18718:	2108      	movs	r1, #8
   1871a:	400b      	ands	r3, r1
   1871c:	b25b      	sxtb	r3, r3
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   1871e:	4313      	orrs	r3, r2
   18720:	b25b      	sxtb	r3, r3
				SR_MASK(SR_AES_DIR, dir) |
   18722:	2280      	movs	r2, #128	; 0x80
   18724:	4252      	negs	r2, r2
   18726:	4313      	orrs	r3, r2
   18728:	b25b      	sxtb	r3, r3
   1872a:	b2da      	uxtb	r2, r3
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
   1872c:	4b0a      	ldr	r3, [pc, #40]	; (18758 <sal_aes_setup+0x1a8>)
   1872e:	745a      	strb	r2, [r3, #17]
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;
   18730:	46c0      	nop			; (mov r8, r8)

	default:
		return (false);
	}

	setup_flag = true;
   18732:	4b0c      	ldr	r3, [pc, #48]	; (18764 <sal_aes_setup+0x1b4>)
   18734:	2201      	movs	r2, #1
   18736:	701a      	strb	r2, [r3, #0]

	return (true);
   18738:	2301      	movs	r3, #1
   1873a:	e000      	b.n	1873e <sal_aes_setup+0x18e>
		return (false);
   1873c:	2300      	movs	r3, #0
}
   1873e:	0018      	movs	r0, r3
   18740:	46bd      	mov	sp, r7
   18742:	b006      	add	sp, #24
   18744:	bd80      	pop	{r7, pc}
   18746:	46c0      	nop			; (mov r8, r8)
   18748:	200017b3 	.word	0x200017b3
   1874c:	200005bb 	.word	0x200005bb
   18750:	200017c8 	.word	0x200017c8
   18754:	0001bab7 	.word	0x0001bab7
   18758:	200017b4 	.word	0x200017b4
   1875c:	200017b5 	.word	0x200017b5
   18760:	0000b0f1 	.word	0x0000b0f1
   18764:	200017b2 	.word	0x200017b2
   18768:	00018775 	.word	0x00018775
   1876c:	200017d8 	.word	0x200017d8
   18770:	0000b2b5 	.word	0x0000b2b5

00018774 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
   18774:	b580      	push	{r7, lr}
   18776:	b084      	sub	sp, #16
   18778:	af00      	add	r7, sp, #0
   1877a:	6078      	str	r0, [r7, #4]
   1877c:	6039      	str	r1, [r7, #0]
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
   1877e:	4b1a      	ldr	r3, [pc, #104]	; (187e8 <sal_aes_wrrd+0x74>)
   18780:	6879      	ldr	r1, [r7, #4]
   18782:	2210      	movs	r2, #16
   18784:	0018      	movs	r0, r3
   18786:	4b19      	ldr	r3, [pc, #100]	; (187ec <sal_aes_wrrd+0x78>)
   18788:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
   1878a:	230f      	movs	r3, #15
   1878c:	18fb      	adds	r3, r7, r3
   1878e:	4a18      	ldr	r2, [pc, #96]	; (187f0 <sal_aes_wrrd+0x7c>)
   18790:	7c52      	ldrb	r2, [r2, #17]
   18792:	701a      	strb	r2, [r3, #0]

	if (setup_flag) {
   18794:	4b17      	ldr	r3, [pc, #92]	; (187f4 <sal_aes_wrrd+0x80>)
   18796:	781b      	ldrb	r3, [r3, #0]
   18798:	2b00      	cmp	r3, #0
   1879a:	d009      	beq.n	187b0 <sal_aes_wrrd+0x3c>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
   1879c:	4b14      	ldr	r3, [pc, #80]	; (187f0 <sal_aes_wrrd+0x7c>)
   1879e:	2212      	movs	r2, #18
   187a0:	0019      	movs	r1, r3
   187a2:	2083      	movs	r0, #131	; 0x83
   187a4:	4b14      	ldr	r3, [pc, #80]	; (187f8 <sal_aes_wrrd+0x84>)
   187a6:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
   187a8:	4b12      	ldr	r3, [pc, #72]	; (187f4 <sal_aes_wrrd+0x80>)
   187aa:	2200      	movs	r2, #0
   187ac:	701a      	strb	r2, [r3, #0]
   187ae:	e005      	b.n	187bc <sal_aes_wrrd+0x48>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
   187b0:	4b0d      	ldr	r3, [pc, #52]	; (187e8 <sal_aes_wrrd+0x74>)
   187b2:	2211      	movs	r2, #17
   187b4:	0019      	movs	r1, r3
   187b6:	2084      	movs	r0, #132	; 0x84
   187b8:	4b0f      	ldr	r3, [pc, #60]	; (187f8 <sal_aes_wrrd+0x84>)
   187ba:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
   187bc:	683b      	ldr	r3, [r7, #0]
   187be:	2b00      	cmp	r3, #0
   187c0:	d005      	beq.n	187ce <sal_aes_wrrd+0x5a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
   187c2:	4909      	ldr	r1, [pc, #36]	; (187e8 <sal_aes_wrrd+0x74>)
   187c4:	683b      	ldr	r3, [r7, #0]
   187c6:	2210      	movs	r2, #16
   187c8:	0018      	movs	r0, r3
   187ca:	4b08      	ldr	r3, [pc, #32]	; (187ec <sal_aes_wrrd+0x78>)
   187cc:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
   187ce:	4b08      	ldr	r3, [pc, #32]	; (187f0 <sal_aes_wrrd+0x7c>)
   187d0:	220f      	movs	r2, #15
   187d2:	18ba      	adds	r2, r7, r2
   187d4:	7812      	ldrb	r2, [r2, #0]
   187d6:	745a      	strb	r2, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
   187d8:	2018      	movs	r0, #24
   187da:	4b08      	ldr	r3, [pc, #32]	; (187fc <sal_aes_wrrd+0x88>)
   187dc:	4798      	blx	r3
}
   187de:	46c0      	nop			; (mov r8, r8)
   187e0:	46bd      	mov	sp, r7
   187e2:	b004      	add	sp, #16
   187e4:	bd80      	pop	{r7, pc}
   187e6:	46c0      	nop			; (mov r8, r8)
   187e8:	200017b5 	.word	0x200017b5
   187ec:	0001bab7 	.word	0x0001bab7
   187f0:	200017b4 	.word	0x200017b4
   187f4:	200017b2 	.word	0x200017b2
   187f8:	0000b48d 	.word	0x0000b48d
   187fc:	000126cd 	.word	0x000126cd

00018800 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
   18800:	b580      	push	{r7, lr}
   18802:	b082      	sub	sp, #8
   18804:	af00      	add	r7, sp, #0
   18806:	6078      	str	r0, [r7, #4]
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
   18808:	687b      	ldr	r3, [r7, #4]
   1880a:	2210      	movs	r2, #16
   1880c:	0019      	movs	r1, r3
   1880e:	2084      	movs	r0, #132	; 0x84
   18810:	4b02      	ldr	r3, [pc, #8]	; (1881c <sal_aes_read+0x1c>)
   18812:	4798      	blx	r3
			AES_BLOCKSIZE);
}
   18814:	46c0      	nop			; (mov r8, r8)
   18816:	46bd      	mov	sp, r7
   18818:	b002      	add	sp, #8
   1881a:	bd80      	pop	{r7, pc}
   1881c:	0000b2b5 	.word	0x0000b2b5

00018820 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
   18820:	b580      	push	{r7, lr}
   18822:	b084      	sub	sp, #16
   18824:	af00      	add	r7, sp, #0
   18826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   18828:	687b      	ldr	r3, [r7, #4]
   1882a:	681b      	ldr	r3, [r3, #0]
   1882c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
   1882e:	68fb      	ldr	r3, [r7, #12]
   18830:	691b      	ldr	r3, [r3, #16]
   18832:	1e5a      	subs	r2, r3, #1
   18834:	4193      	sbcs	r3, r2
   18836:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
   18838:	0018      	movs	r0, r3
   1883a:	46bd      	mov	sp, r7
   1883c:	b004      	add	sp, #16
   1883e:	bd80      	pop	{r7, pc}

00018840 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
   18840:	b580      	push	{r7, lr}
   18842:	b082      	sub	sp, #8
   18844:	af00      	add	r7, sp, #0
   18846:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
   18848:	687b      	ldr	r3, [r7, #4]
   1884a:	2200      	movs	r2, #0
   1884c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   1884e:	687b      	ldr	r3, [r7, #4]
   18850:	2200      	movs	r2, #0
   18852:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   18854:	687b      	ldr	r3, [r7, #4]
   18856:	2200      	movs	r2, #0
   18858:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   1885a:	687b      	ldr	r3, [r7, #4]
   1885c:	2200      	movs	r2, #0
   1885e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   18860:	687b      	ldr	r3, [r7, #4]
   18862:	2200      	movs	r2, #0
   18864:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
   18866:	687b      	ldr	r3, [r7, #4]
   18868:	2200      	movs	r2, #0
   1886a:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
   1886c:	687b      	ldr	r3, [r7, #4]
   1886e:	2200      	movs	r2, #0
   18870:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   18872:	687b      	ldr	r3, [r7, #4]
   18874:	2200      	movs	r2, #0
   18876:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   18878:	687b      	ldr	r3, [r7, #4]
   1887a:	2200      	movs	r2, #0
   1887c:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   1887e:	687b      	ldr	r3, [r7, #4]
   18880:	2200      	movs	r2, #0
   18882:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   18884:	687b      	ldr	r3, [r7, #4]
   18886:	2200      	movs	r2, #0
   18888:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   1888a:	687b      	ldr	r3, [r7, #4]
   1888c:	2200      	movs	r2, #0
   1888e:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
   18890:	687b      	ldr	r3, [r7, #4]
   18892:	2200      	movs	r2, #0
   18894:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
   18896:	687b      	ldr	r3, [r7, #4]
   18898:	2200      	movs	r2, #0
   1889a:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   1889c:	687b      	ldr	r3, [r7, #4]
   1889e:	2200      	movs	r2, #0
   188a0:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   188a2:	687b      	ldr	r3, [r7, #4]
   188a4:	2200      	movs	r2, #0
   188a6:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	2200      	movs	r2, #0
   188ac:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   188ae:	687b      	ldr	r3, [r7, #4]
   188b0:	2200      	movs	r2, #0
   188b2:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   188b4:	687b      	ldr	r3, [r7, #4]
   188b6:	2200      	movs	r2, #0
   188b8:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	2200      	movs	r2, #0
   188be:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
   188c0:	687b      	ldr	r3, [r7, #4]
   188c2:	2200      	movs	r2, #0
   188c4:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	2200      	movs	r2, #0
   188ca:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   188cc:	687b      	ldr	r3, [r7, #4]
   188ce:	2200      	movs	r2, #0
   188d0:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
   188d2:	687b      	ldr	r3, [r7, #4]
   188d4:	2234      	movs	r2, #52	; 0x34
   188d6:	2100      	movs	r1, #0
   188d8:	5499      	strb	r1, [r3, r2]
#endif

}
   188da:	46c0      	nop			; (mov r8, r8)
   188dc:	46bd      	mov	sp, r7
   188de:	b002      	add	sp, #8
   188e0:	bd80      	pop	{r7, pc}
	...

000188e4 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
   188e4:	b580      	push	{r7, lr}
   188e6:	b084      	sub	sp, #16
   188e8:	af00      	add	r7, sp, #0
   188ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   188ec:	687b      	ldr	r3, [r7, #4]
   188ee:	681b      	ldr	r3, [r3, #0]
   188f0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   188f2:	46c0      	nop			; (mov r8, r8)
   188f4:	687b      	ldr	r3, [r7, #4]
   188f6:	0018      	movs	r0, r3
   188f8:	4b06      	ldr	r3, [pc, #24]	; (18914 <tc_enable+0x30>)
   188fa:	4798      	blx	r3
   188fc:	1e03      	subs	r3, r0, #0
   188fe:	d1f9      	bne.n	188f4 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   18900:	68fb      	ldr	r3, [r7, #12]
   18902:	681b      	ldr	r3, [r3, #0]
   18904:	2202      	movs	r2, #2
   18906:	431a      	orrs	r2, r3
   18908:	68fb      	ldr	r3, [r7, #12]
   1890a:	601a      	str	r2, [r3, #0]
}
   1890c:	46c0      	nop			; (mov r8, r8)
   1890e:	46bd      	mov	sp, r7
   18910:	b004      	add	sp, #16
   18912:	bd80      	pop	{r7, pc}
   18914:	00018821 	.word	0x00018821

00018918 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
   18918:	b580      	push	{r7, lr}
   1891a:	b084      	sub	sp, #16
   1891c:	af00      	add	r7, sp, #0
   1891e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   18920:	687b      	ldr	r3, [r7, #4]
   18922:	681b      	ldr	r3, [r3, #0]
   18924:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   18926:	46c0      	nop			; (mov r8, r8)
   18928:	687b      	ldr	r3, [r7, #4]
   1892a:	0018      	movs	r0, r3
   1892c:	4b0a      	ldr	r3, [pc, #40]	; (18958 <tc_start_counter+0x40>)
   1892e:	4798      	blx	r3
   18930:	1e03      	subs	r3, r0, #0
   18932:	d1f9      	bne.n	18928 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
   18934:	68fb      	ldr	r3, [r7, #12]
   18936:	2200      	movs	r2, #0
   18938:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
   1893a:	46c0      	nop			; (mov r8, r8)
   1893c:	687b      	ldr	r3, [r7, #4]
   1893e:	0018      	movs	r0, r3
   18940:	4b05      	ldr	r3, [pc, #20]	; (18958 <tc_start_counter+0x40>)
   18942:	4798      	blx	r3
   18944:	1e03      	subs	r3, r0, #0
   18946:	d1f9      	bne.n	1893c <tc_start_counter+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
   18948:	68fb      	ldr	r3, [r7, #12]
   1894a:	2220      	movs	r2, #32
   1894c:	715a      	strb	r2, [r3, #5]
}
   1894e:	46c0      	nop			; (mov r8, r8)
   18950:	46bd      	mov	sp, r7
   18952:	b004      	add	sp, #16
   18954:	bd80      	pop	{r7, pc}
   18956:	46c0      	nop			; (mov r8, r8)
   18958:	00018821 	.word	0x00018821

0001895c <configure_tc>:
struct tc_module tc_instance;


//! [setup]
void configure_tc(void)
{
   1895c:	b580      	push	{r7, lr}
   1895e:	b08e      	sub	sp, #56	; 0x38
   18960:	af00      	add	r7, sp, #0
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
   18962:	4b14      	ldr	r3, [pc, #80]	; (189b4 <configure_tc+0x58>)
   18964:	0018      	movs	r0, r3
   18966:	4b14      	ldr	r3, [pc, #80]	; (189b8 <configure_tc+0x5c>)
   18968:	4798      	blx	r3
	tc_get_config_defaults(&config_tc);
   1896a:	003b      	movs	r3, r7
   1896c:	0018      	movs	r0, r3
   1896e:	4b13      	ldr	r3, [pc, #76]	; (189bc <configure_tc+0x60>)
   18970:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
   18972:	003b      	movs	r3, r7
   18974:	2208      	movs	r2, #8
   18976:	70da      	strb	r2, [r3, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
   18978:	003b      	movs	r3, r7
   1897a:	2201      	movs	r2, #1
   1897c:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV4;
   1897e:	003b      	movs	r3, r7
   18980:	2280      	movs	r2, #128	; 0x80
   18982:	0092      	lsls	r2, r2, #2
   18984:	809a      	strh	r2, [r3, #4]

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
   18986:	003a      	movs	r2, r7
   18988:	490d      	ldr	r1, [pc, #52]	; (189c0 <configure_tc+0x64>)
   1898a:	4b0a      	ldr	r3, [pc, #40]	; (189b4 <configure_tc+0x58>)
   1898c:	0018      	movs	r0, r3
   1898e:	4b0d      	ldr	r3, [pc, #52]	; (189c4 <configure_tc+0x68>)
   18990:	4798      	blx	r3
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&tc_instance);
   18992:	4b08      	ldr	r3, [pc, #32]	; (189b4 <configure_tc+0x58>)
   18994:	0018      	movs	r0, r3
   18996:	4b0c      	ldr	r3, [pc, #48]	; (189c8 <configure_tc+0x6c>)
   18998:	4798      	blx	r3
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
   1899a:	4b06      	ldr	r3, [pc, #24]	; (189b4 <configure_tc+0x58>)
   1899c:	2100      	movs	r1, #0
   1899e:	0018      	movs	r0, r3
   189a0:	4b0a      	ldr	r3, [pc, #40]	; (189cc <configure_tc+0x70>)
   189a2:	4798      	blx	r3
		
	/* Start timer */
	tc_start_counter(&tc_instance);
   189a4:	4b03      	ldr	r3, [pc, #12]	; (189b4 <configure_tc+0x58>)
   189a6:	0018      	movs	r0, r3
   189a8:	4b09      	ldr	r3, [pc, #36]	; (189d0 <configure_tc+0x74>)
   189aa:	4798      	blx	r3
}
   189ac:	46c0      	nop			; (mov r8, r8)
   189ae:	46bd      	mov	sp, r7
   189b0:	b00e      	add	sp, #56	; 0x38
   189b2:	bd80      	pop	{r7, pc}
   189b4:	20002690 	.word	0x20002690
   189b8:	00017589 	.word	0x00017589
   189bc:	00018841 	.word	0x00018841
   189c0:	43000800 	.word	0x43000800
   189c4:	00017029 	.word	0x00017029
   189c8:	000188e5 	.word	0x000188e5
   189cc:	000174c9 	.word	0x000174c9
   189d0:	00018919 	.word	0x00018919

000189d4 <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

uint32_t MiWi_TickGet(void)
{
   189d4:	b580      	push	{r7, lr}
   189d6:	b082      	sub	sp, #8
   189d8:	af00      	add	r7, sp, #0
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
   189da:	4b05      	ldr	r3, [pc, #20]	; (189f0 <MiWi_TickGet+0x1c>)
   189dc:	0018      	movs	r0, r3
   189de:	4b05      	ldr	r3, [pc, #20]	; (189f4 <MiWi_TickGet+0x20>)
   189e0:	4798      	blx	r3
   189e2:	0003      	movs	r3, r0
   189e4:	607b      	str	r3, [r7, #4]
	return count.Val;
   189e6:	687b      	ldr	r3, [r7, #4]
   189e8:	0018      	movs	r0, r3
   189ea:	46bd      	mov	sp, r7
   189ec:	b002      	add	sp, #8
   189ee:	bd80      	pop	{r7, pc}
   189f0:	20002690 	.word	0x20002690
   189f4:	00017529 	.word	0x00017529

000189f8 <register_env_sensor_udpate_callback_handler>:
int16_t gi16Disp_temperature;
uint8_t gu8Disp_humidity;
uint32_t gu32Disp_uv;
uint16_t gu16Disp_pressure;
void register_env_sensor_udpate_callback_handler(void* cb)
{
   189f8:	b580      	push	{r7, lr}
   189fa:	b082      	sub	sp, #8
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
	env_sensor_update_cb = cb;
   18a00:	687a      	ldr	r2, [r7, #4]
   18a02:	4b03      	ldr	r3, [pc, #12]	; (18a10 <register_env_sensor_udpate_callback_handler+0x18>)
   18a04:	601a      	str	r2, [r3, #0]
}
   18a06:	46c0      	nop			; (mov r8, r8)
   18a08:	46bd      	mov	sp, r7
   18a0a:	b002      	add	sp, #8
   18a0c:	bd80      	pop	{r7, pc}
   18a0e:	46c0      	nop			; (mov r8, r8)
   18a10:	20001854 	.word	0x20001854

00018a14 <MiWiSensorCallbackHandler>:
	cloud_mqtt_publish(gPublish_Channel,item);
	cJSON_Delete(item);
}

static void MiWiSensorCallbackHandler(environment_data_t sensor_data, unsigned char flag)
{
   18a14:	b590      	push	{r4, r7, lr}
   18a16:	b0ab      	sub	sp, #172	; 0xac
   18a18:	af00      	add	r7, sp, #0
   18a1a:	1d3c      	adds	r4, r7, #4
   18a1c:	6020      	str	r0, [r4, #0]
   18a1e:	6061      	str	r1, [r4, #4]
   18a20:	60a2      	str	r2, [r4, #8]
   18a22:	001a      	movs	r2, r3
   18a24:	1cfb      	adds	r3, r7, #3
   18a26:	701a      	strb	r2, [r3, #0]
	cJSON* item;
	NodeInfo node_info[4];
	int8_t cnt = 0;
   18a28:	23a7      	movs	r3, #167	; 0xa7
   18a2a:	18fb      	adds	r3, r7, r3
   18a2c:	2200      	movs	r2, #0
   18a2e:	701a      	strb	r2, [r3, #0]
	
	if (flag & TEMP_UPDATE_BIT)
   18a30:	1cfb      	adds	r3, r7, #3
   18a32:	781b      	ldrb	r3, [r3, #0]
   18a34:	2201      	movs	r2, #1
   18a36:	4013      	ands	r3, r2
   18a38:	d02a      	beq.n	18a90 <MiWiSensorCallbackHandler+0x7c>
	{
		strcpy(node_info[cnt].dataType,MIWI_TEMP_DATATYPE_NAME);
   18a3a:	23a7      	movs	r3, #167	; 0xa7
   18a3c:	18fb      	adds	r3, r7, r3
   18a3e:	2200      	movs	r2, #0
   18a40:	569a      	ldrsb	r2, [r3, r2]
   18a42:	2310      	movs	r3, #16
   18a44:	18f9      	adds	r1, r7, r3
   18a46:	0013      	movs	r3, r2
   18a48:	00db      	lsls	r3, r3, #3
   18a4a:	189b      	adds	r3, r3, r2
   18a4c:	009b      	lsls	r3, r3, #2
   18a4e:	18ca      	adds	r2, r1, r3
   18a50:	4b4f      	ldr	r3, [pc, #316]	; (18b90 <MiWiSensorCallbackHandler+0x17c>)
   18a52:	0010      	movs	r0, r2
   18a54:	0019      	movs	r1, r3
   18a56:	230c      	movs	r3, #12
   18a58:	001a      	movs	r2, r3
   18a5a:	4b4e      	ldr	r3, [pc, #312]	; (18b94 <MiWiSensorCallbackHandler+0x180>)
   18a5c:	4798      	blx	r3
		node_info[cnt].value = miwiNodeTemp;//sensor_data.humidity;
   18a5e:	23a7      	movs	r3, #167	; 0xa7
   18a60:	18fb      	adds	r3, r7, r3
   18a62:	2200      	movs	r2, #0
   18a64:	569a      	ldrsb	r2, [r3, r2]
   18a66:	4b4c      	ldr	r3, [pc, #304]	; (18b98 <MiWiSensorCallbackHandler+0x184>)
   18a68:	6819      	ldr	r1, [r3, #0]
   18a6a:	2310      	movs	r3, #16
   18a6c:	18f8      	adds	r0, r7, r3
   18a6e:	0013      	movs	r3, r2
   18a70:	00db      	lsls	r3, r3, #3
   18a72:	189b      	adds	r3, r3, r2
   18a74:	009b      	lsls	r3, r3, #2
   18a76:	18c3      	adds	r3, r0, r3
   18a78:	3320      	adds	r3, #32
   18a7a:	6019      	str	r1, [r3, #0]
		cnt++;
   18a7c:	23a7      	movs	r3, #167	; 0xa7
   18a7e:	18fb      	adds	r3, r7, r3
   18a80:	781b      	ldrb	r3, [r3, #0]
   18a82:	b25b      	sxtb	r3, r3
   18a84:	b2db      	uxtb	r3, r3
   18a86:	3301      	adds	r3, #1
   18a88:	b2da      	uxtb	r2, r3
   18a8a:	23a7      	movs	r3, #167	; 0xa7
   18a8c:	18fb      	adds	r3, r7, r3
   18a8e:	701a      	strb	r2, [r3, #0]
	}
	if (flag & UV_UPDATE_BIT)
   18a90:	1cfb      	adds	r3, r7, #3
   18a92:	781b      	ldrb	r3, [r3, #0]
   18a94:	2204      	movs	r2, #4
   18a96:	4013      	ands	r3, r2
   18a98:	d02a      	beq.n	18af0 <MiWiSensorCallbackHandler+0xdc>
	{
		strcpy(node_info[cnt].dataType,MIWI_RSSI_DATATYPE_NAME);
   18a9a:	23a7      	movs	r3, #167	; 0xa7
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	2200      	movs	r2, #0
   18aa0:	569a      	ldrsb	r2, [r3, r2]
   18aa2:	2310      	movs	r3, #16
   18aa4:	18f9      	adds	r1, r7, r3
   18aa6:	0013      	movs	r3, r2
   18aa8:	00db      	lsls	r3, r3, #3
   18aaa:	189b      	adds	r3, r3, r2
   18aac:	009b      	lsls	r3, r3, #2
   18aae:	18ca      	adds	r2, r1, r3
   18ab0:	4b3a      	ldr	r3, [pc, #232]	; (18b9c <MiWiSensorCallbackHandler+0x188>)
   18ab2:	0010      	movs	r0, r2
   18ab4:	0019      	movs	r1, r3
   18ab6:	2305      	movs	r3, #5
   18ab8:	001a      	movs	r2, r3
   18aba:	4b36      	ldr	r3, [pc, #216]	; (18b94 <MiWiSensorCallbackHandler+0x180>)
   18abc:	4798      	blx	r3
		node_info[cnt].value = miwiNodeRssi;//32;sensor_data.uv;
   18abe:	23a7      	movs	r3, #167	; 0xa7
   18ac0:	18fb      	adds	r3, r7, r3
   18ac2:	2200      	movs	r2, #0
   18ac4:	569a      	ldrsb	r2, [r3, r2]
   18ac6:	4b36      	ldr	r3, [pc, #216]	; (18ba0 <MiWiSensorCallbackHandler+0x18c>)
   18ac8:	6819      	ldr	r1, [r3, #0]
   18aca:	2310      	movs	r3, #16
   18acc:	18f8      	adds	r0, r7, r3
   18ace:	0013      	movs	r3, r2
   18ad0:	00db      	lsls	r3, r3, #3
   18ad2:	189b      	adds	r3, r3, r2
   18ad4:	009b      	lsls	r3, r3, #2
   18ad6:	18c3      	adds	r3, r0, r3
   18ad8:	3320      	adds	r3, #32
   18ada:	6019      	str	r1, [r3, #0]
		cnt++;
   18adc:	23a7      	movs	r3, #167	; 0xa7
   18ade:	18fb      	adds	r3, r7, r3
   18ae0:	781b      	ldrb	r3, [r3, #0]
   18ae2:	b25b      	sxtb	r3, r3
   18ae4:	b2db      	uxtb	r3, r3
   18ae6:	3301      	adds	r3, #1
   18ae8:	b2da      	uxtb	r2, r3
   18aea:	23a7      	movs	r3, #167	; 0xa7
   18aec:	18fb      	adds	r3, r7, r3
   18aee:	701a      	strb	r2, [r3, #0]
	}
	if (flag & PRESSURE_UPDATE_BIT)
   18af0:	1cfb      	adds	r3, r7, #3
   18af2:	781b      	ldrb	r3, [r3, #0]
   18af4:	2208      	movs	r2, #8
   18af6:	4013      	ands	r3, r2
   18af8:	d02a      	beq.n	18b50 <MiWiSensorCallbackHandler+0x13c>
	{
		strcpy(node_info[cnt].dataType,MIWI_BATTERY_DATATYPE_NAME);
   18afa:	23a7      	movs	r3, #167	; 0xa7
   18afc:	18fb      	adds	r3, r7, r3
   18afe:	2200      	movs	r2, #0
   18b00:	569a      	ldrsb	r2, [r3, r2]
   18b02:	2310      	movs	r3, #16
   18b04:	18f9      	adds	r1, r7, r3
   18b06:	0013      	movs	r3, r2
   18b08:	00db      	lsls	r3, r3, #3
   18b0a:	189b      	adds	r3, r3, r2
   18b0c:	009b      	lsls	r3, r3, #2
   18b0e:	18ca      	adds	r2, r1, r3
   18b10:	4b24      	ldr	r3, [pc, #144]	; (18ba4 <MiWiSensorCallbackHandler+0x190>)
   18b12:	0010      	movs	r0, r2
   18b14:	0019      	movs	r1, r3
   18b16:	2308      	movs	r3, #8
   18b18:	001a      	movs	r2, r3
   18b1a:	4b1e      	ldr	r3, [pc, #120]	; (18b94 <MiWiSensorCallbackHandler+0x180>)
   18b1c:	4798      	blx	r3
		node_info[cnt].value = miwiNodeBatteryStatus;//sensor_data.pressure;
   18b1e:	23a7      	movs	r3, #167	; 0xa7
   18b20:	18fb      	adds	r3, r7, r3
   18b22:	2200      	movs	r2, #0
   18b24:	569a      	ldrsb	r2, [r3, r2]
   18b26:	4b20      	ldr	r3, [pc, #128]	; (18ba8 <MiWiSensorCallbackHandler+0x194>)
   18b28:	6819      	ldr	r1, [r3, #0]
   18b2a:	2310      	movs	r3, #16
   18b2c:	18f8      	adds	r0, r7, r3
   18b2e:	0013      	movs	r3, r2
   18b30:	00db      	lsls	r3, r3, #3
   18b32:	189b      	adds	r3, r3, r2
   18b34:	009b      	lsls	r3, r3, #2
   18b36:	18c3      	adds	r3, r0, r3
   18b38:	3320      	adds	r3, #32
   18b3a:	6019      	str	r1, [r3, #0]
		cnt++;
   18b3c:	23a7      	movs	r3, #167	; 0xa7
   18b3e:	18fb      	adds	r3, r7, r3
   18b40:	781b      	ldrb	r3, [r3, #0]
   18b42:	b25b      	sxtb	r3, r3
   18b44:	b2db      	uxtb	r3, r3
   18b46:	3301      	adds	r3, #1
   18b48:	b2da      	uxtb	r2, r3
   18b4a:	23a7      	movs	r3, #167	; 0xa7
   18b4c:	18fb      	adds	r3, r7, r3
   18b4e:	701a      	strb	r2, [r3, #0]
	}
	
	item = iot_message_reportInfo(DEVICE_TYPE, gAwsMqttClientId, cnt, &node_info);
   18b50:	23a7      	movs	r3, #167	; 0xa7
   18b52:	18fb      	adds	r3, r7, r3
   18b54:	2200      	movs	r2, #0
   18b56:	569a      	ldrsb	r2, [r3, r2]
   18b58:	2310      	movs	r3, #16
   18b5a:	18fb      	adds	r3, r7, r3
   18b5c:	4913      	ldr	r1, [pc, #76]	; (18bac <MiWiSensorCallbackHandler+0x198>)
   18b5e:	4814      	ldr	r0, [pc, #80]	; (18bb0 <MiWiSensorCallbackHandler+0x19c>)
   18b60:	4c14      	ldr	r4, [pc, #80]	; (18bb4 <MiWiSensorCallbackHandler+0x1a0>)
   18b62:	47a0      	blx	r4
   18b64:	0003      	movs	r3, r0
   18b66:	22a0      	movs	r2, #160	; 0xa0
   18b68:	18ba      	adds	r2, r7, r2
   18b6a:	6013      	str	r3, [r2, #0]
	cloud_mqtt_publish(gPublish_Channel,item);
   18b6c:	23a0      	movs	r3, #160	; 0xa0
   18b6e:	18fb      	adds	r3, r7, r3
   18b70:	681a      	ldr	r2, [r3, #0]
   18b72:	4b11      	ldr	r3, [pc, #68]	; (18bb8 <MiWiSensorCallbackHandler+0x1a4>)
   18b74:	0011      	movs	r1, r2
   18b76:	0018      	movs	r0, r3
   18b78:	4b10      	ldr	r3, [pc, #64]	; (18bbc <MiWiSensorCallbackHandler+0x1a8>)
   18b7a:	4798      	blx	r3
	cJSON_Delete(item);
   18b7c:	23a0      	movs	r3, #160	; 0xa0
   18b7e:	18fb      	adds	r3, r7, r3
   18b80:	681b      	ldr	r3, [r3, #0]
   18b82:	0018      	movs	r0, r3
   18b84:	4b0e      	ldr	r3, [pc, #56]	; (18bc0 <MiWiSensorCallbackHandler+0x1ac>)
   18b86:	4798      	blx	r3
}
   18b88:	46c0      	nop			; (mov r8, r8)
   18b8a:	46bd      	mov	sp, r7
   18b8c:	b02b      	add	sp, #172	; 0xac
   18b8e:	bd90      	pop	{r4, r7, pc}
   18b90:	0001edd8 	.word	0x0001edd8
   18b94:	0001bab7 	.word	0x0001bab7
   18b98:	200025b8 	.word	0x200025b8
   18b9c:	0001ede4 	.word	0x0001ede4
   18ba0:	200024f8 	.word	0x200024f8
   18ba4:	0001edec 	.word	0x0001edec
   18ba8:	20002500 	.word	0x20002500
   18bac:	200005c0 	.word	0x200005c0
   18bb0:	0001edac 	.word	0x0001edac
   18bb4:	000124e9 	.word	0x000124e9
   18bb8:	20001af8 	.word	0x20001af8
   18bbc:	0000cf55 	.word	0x0000cf55
   18bc0:	0000b7d1 	.word	0x0000b7d1

00018bc4 <get_env_sensor_data_from_chip>:

void get_env_sensor_data_from_chip(environment_data_t *env_data)
{
   18bc4:	b580      	push	{r7, lr}
   18bc6:	b086      	sub	sp, #24
   18bc8:	af00      	add	r7, sp, #0
   18bca:	6078      	str	r0, [r7, #4]
	int32_t env_pressure;
	int32_t env_humidity;
	uint16_t als_data;
	
	/* Temperature: No data processing required for Temperature data. Data with resolution 0.01(x100) directly txd*/
	env_data->temperature = (int16_t)env_temperature;
   18bcc:	697b      	ldr	r3, [r7, #20]
   18bce:	b21a      	sxth	r2, r3
   18bd0:	687b      	ldr	r3, [r7, #4]
   18bd2:	801a      	strh	r2, [r3, #0]
	/* Pressure: Returns pressure in Pa as unsigned 32 bit integer. Output value of ?6386?equals 96386 Pa = 963.86 hPa*/
	env_data->pressure = (uint16_t)(env_pressure / 100);
   18bd4:	693a      	ldr	r2, [r7, #16]
   18bd6:	4b0e      	ldr	r3, [pc, #56]	; (18c10 <get_env_sensor_data_from_chip+0x4c>)
   18bd8:	2164      	movs	r1, #100	; 0x64
   18bda:	0010      	movs	r0, r2
   18bdc:	4798      	blx	r3
   18bde:	0003      	movs	r3, r0
   18be0:	b29a      	uxth	r2, r3
   18be2:	687b      	ldr	r3, [r7, #4]
   18be4:	805a      	strh	r2, [r3, #2]
	/*ALS: lx/step = 0.07 */
	///env_data->uv = ((uint32_t)(als_data) * 7000 / 100000));
	env_data->uv = ((uint32_t)als_data * 7000);
   18be6:	230e      	movs	r3, #14
   18be8:	18fb      	adds	r3, r7, r3
   18bea:	881b      	ldrh	r3, [r3, #0]
   18bec:	4a09      	ldr	r2, [pc, #36]	; (18c14 <get_env_sensor_data_from_chip+0x50>)
   18bee:	435a      	muls	r2, r3
   18bf0:	687b      	ldr	r3, [r7, #4]
   18bf2:	605a      	str	r2, [r3, #4]
	//printf("\r\ntest=%d\r\n",(uint32_t) als_data);
	/* Humidity: An output value of 42313 represents 42313 / 1024 = 41.321 %rH*/
	env_data->humidity = (uint8_t)(env_humidity / 1024);
   18bf4:	68bb      	ldr	r3, [r7, #8]
   18bf6:	2b00      	cmp	r3, #0
   18bf8:	da02      	bge.n	18c00 <get_env_sensor_data_from_chip+0x3c>
   18bfa:	4a07      	ldr	r2, [pc, #28]	; (18c18 <get_env_sensor_data_from_chip+0x54>)
   18bfc:	4694      	mov	ip, r2
   18bfe:	4463      	add	r3, ip
   18c00:	129b      	asrs	r3, r3, #10
   18c02:	b2da      	uxtb	r2, r3
   18c04:	687b      	ldr	r3, [r7, #4]
   18c06:	721a      	strb	r2, [r3, #8]
}
   18c08:	46c0      	nop			; (mov r8, r8)
   18c0a:	46bd      	mov	sp, r7
   18c0c:	b006      	add	sp, #24
   18c0e:	bd80      	pop	{r7, pc}
   18c10:	00019bfd 	.word	0x00019bfd
   18c14:	00001b58 	.word	0x00001b58
   18c18:	000003ff 	.word	0x000003ff

00018c1c <env_sensor_execute>:
void env_sensor_execute()
{
   18c1c:	b590      	push	{r4, r7, lr}
   18c1e:	b085      	sub	sp, #20
   18c20:	af00      	add	r7, sp, #0
	static int uv_cnt;
	static int pressure_cnt;
	
	static int uv_not_equal_cnt;
	
	unsigned char updateFlag = 0;
   18c22:	230f      	movs	r3, #15
   18c24:	18fb      	adds	r3, r7, r3
   18c26:	2200      	movs	r2, #0
   18c28:	701a      	strb	r2, [r3, #0]
	
	environment_data_t environment_data;
	get_env_sensor_data_from_chip(&environment_data);
   18c2a:	003b      	movs	r3, r7
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b68      	ldr	r3, [pc, #416]	; (18dd0 <env_sensor_execute+0x1b4>)
   18c30:	4798      	blx	r3
	//printf("DBG: temperature = %d, humidity = %d, uv = %lu, pressure = %d\r\n", environment_data.temperature, environment_data.humidity, environment_data.uv, environment_data.pressure);
	
	// check temperature
	if (pre_temp != environment_data.temperature)
   18c32:	003b      	movs	r3, r7
   18c34:	2200      	movs	r2, #0
   18c36:	5e9a      	ldrsh	r2, [r3, r2]
   18c38:	4b66      	ldr	r3, [pc, #408]	; (18dd4 <env_sensor_execute+0x1b8>)
   18c3a:	2100      	movs	r1, #0
   18c3c:	5e5b      	ldrsh	r3, [r3, r1]
   18c3e:	429a      	cmp	r2, r3
   18c40:	d008      	beq.n	18c54 <env_sensor_execute+0x38>
	{
		temp_cnt = 0;
   18c42:	4b65      	ldr	r3, [pc, #404]	; (18dd8 <env_sensor_execute+0x1bc>)
   18c44:	2200      	movs	r2, #0
   18c46:	601a      	str	r2, [r3, #0]
		pre_temp = environment_data.temperature;
   18c48:	003b      	movs	r3, r7
   18c4a:	2200      	movs	r2, #0
   18c4c:	5e9a      	ldrsh	r2, [r3, r2]
   18c4e:	4b61      	ldr	r3, [pc, #388]	; (18dd4 <env_sensor_execute+0x1b8>)
   18c50:	801a      	strh	r2, [r3, #0]
   18c52:	e004      	b.n	18c5e <env_sensor_execute+0x42>
	}
	else
	temp_cnt++;
   18c54:	4b60      	ldr	r3, [pc, #384]	; (18dd8 <env_sensor_execute+0x1bc>)
   18c56:	681b      	ldr	r3, [r3, #0]
   18c58:	1c5a      	adds	r2, r3, #1
   18c5a:	4b5f      	ldr	r3, [pc, #380]	; (18dd8 <env_sensor_execute+0x1bc>)
   18c5c:	601a      	str	r2, [r3, #0]
	
	if ((temp_cnt >= TEMP_DISP_COUNTER) && gi16Disp_temperature!= pre_temp)
   18c5e:	4b5e      	ldr	r3, [pc, #376]	; (18dd8 <env_sensor_execute+0x1bc>)
   18c60:	681b      	ldr	r3, [r3, #0]
   18c62:	2b00      	cmp	r3, #0
   18c64:	dd14      	ble.n	18c90 <env_sensor_execute+0x74>
   18c66:	4b5d      	ldr	r3, [pc, #372]	; (18ddc <env_sensor_execute+0x1c0>)
   18c68:	2200      	movs	r2, #0
   18c6a:	5e9a      	ldrsh	r2, [r3, r2]
   18c6c:	4b59      	ldr	r3, [pc, #356]	; (18dd4 <env_sensor_execute+0x1b8>)
   18c6e:	2100      	movs	r1, #0
   18c70:	5e5b      	ldrsh	r3, [r3, r1]
   18c72:	429a      	cmp	r2, r3
   18c74:	d00c      	beq.n	18c90 <env_sensor_execute+0x74>
	{
		gi16Disp_temperature = pre_temp;
   18c76:	4b57      	ldr	r3, [pc, #348]	; (18dd4 <env_sensor_execute+0x1b8>)
   18c78:	2200      	movs	r2, #0
   18c7a:	5e9a      	ldrsh	r2, [r3, r2]
   18c7c:	4b57      	ldr	r3, [pc, #348]	; (18ddc <env_sensor_execute+0x1c0>)
   18c7e:	801a      	strh	r2, [r3, #0]
		updateFlag |= TEMP_UPDATE_BIT;
   18c80:	230f      	movs	r3, #15
   18c82:	18fb      	adds	r3, r7, r3
   18c84:	220f      	movs	r2, #15
   18c86:	18ba      	adds	r2, r7, r2
   18c88:	7812      	ldrb	r2, [r2, #0]
   18c8a:	2101      	movs	r1, #1
   18c8c:	430a      	orrs	r2, r1
   18c8e:	701a      	strb	r2, [r3, #0]
	}
	
	// check humidity
	if (pre_hum != environment_data.humidity)
   18c90:	003b      	movs	r3, r7
   18c92:	7a1a      	ldrb	r2, [r3, #8]
   18c94:	4b52      	ldr	r3, [pc, #328]	; (18de0 <env_sensor_execute+0x1c4>)
   18c96:	781b      	ldrb	r3, [r3, #0]
   18c98:	429a      	cmp	r2, r3
   18c9a:	d007      	beq.n	18cac <env_sensor_execute+0x90>
	{
		hum_cnt = 0;
   18c9c:	4b51      	ldr	r3, [pc, #324]	; (18de4 <env_sensor_execute+0x1c8>)
   18c9e:	2200      	movs	r2, #0
   18ca0:	601a      	str	r2, [r3, #0]
		pre_hum = environment_data.humidity;
   18ca2:	003b      	movs	r3, r7
   18ca4:	7a1a      	ldrb	r2, [r3, #8]
   18ca6:	4b4e      	ldr	r3, [pc, #312]	; (18de0 <env_sensor_execute+0x1c4>)
   18ca8:	701a      	strb	r2, [r3, #0]
   18caa:	e004      	b.n	18cb6 <env_sensor_execute+0x9a>
	}
	else
	hum_cnt++;
   18cac:	4b4d      	ldr	r3, [pc, #308]	; (18de4 <env_sensor_execute+0x1c8>)
   18cae:	681b      	ldr	r3, [r3, #0]
   18cb0:	1c5a      	adds	r2, r3, #1
   18cb2:	4b4c      	ldr	r3, [pc, #304]	; (18de4 <env_sensor_execute+0x1c8>)
   18cb4:	601a      	str	r2, [r3, #0]
	
	if ((hum_cnt >= HUM_DISP_COUNTER) && gu8Disp_humidity!= pre_hum)
   18cb6:	4b4b      	ldr	r3, [pc, #300]	; (18de4 <env_sensor_execute+0x1c8>)
   18cb8:	681b      	ldr	r3, [r3, #0]
   18cba:	2b00      	cmp	r3, #0
   18cbc:	dd11      	ble.n	18ce2 <env_sensor_execute+0xc6>
   18cbe:	4b4a      	ldr	r3, [pc, #296]	; (18de8 <env_sensor_execute+0x1cc>)
   18cc0:	781a      	ldrb	r2, [r3, #0]
   18cc2:	4b47      	ldr	r3, [pc, #284]	; (18de0 <env_sensor_execute+0x1c4>)
   18cc4:	781b      	ldrb	r3, [r3, #0]
   18cc6:	429a      	cmp	r2, r3
   18cc8:	d00b      	beq.n	18ce2 <env_sensor_execute+0xc6>
	{
		gu8Disp_humidity = pre_hum;
   18cca:	4b45      	ldr	r3, [pc, #276]	; (18de0 <env_sensor_execute+0x1c4>)
   18ccc:	781a      	ldrb	r2, [r3, #0]
   18cce:	4b46      	ldr	r3, [pc, #280]	; (18de8 <env_sensor_execute+0x1cc>)
   18cd0:	701a      	strb	r2, [r3, #0]
		updateFlag |= HUM_UPDATE_BIT;
   18cd2:	230f      	movs	r3, #15
   18cd4:	18fb      	adds	r3, r7, r3
   18cd6:	220f      	movs	r2, #15
   18cd8:	18ba      	adds	r2, r7, r2
   18cda:	7812      	ldrb	r2, [r2, #0]
   18cdc:	2102      	movs	r1, #2
   18cde:	430a      	orrs	r2, r1
   18ce0:	701a      	strb	r2, [r3, #0]
	}
	
	// check uv
	if (pre_uv != environment_data.uv)
   18ce2:	003b      	movs	r3, r7
   18ce4:	685a      	ldr	r2, [r3, #4]
   18ce6:	4b41      	ldr	r3, [pc, #260]	; (18dec <env_sensor_execute+0x1d0>)
   18ce8:	681b      	ldr	r3, [r3, #0]
   18cea:	429a      	cmp	r2, r3
   18cec:	d00c      	beq.n	18d08 <env_sensor_execute+0xec>
	{
		uv_cnt = 0;
   18cee:	4b40      	ldr	r3, [pc, #256]	; (18df0 <env_sensor_execute+0x1d4>)
   18cf0:	2200      	movs	r2, #0
   18cf2:	601a      	str	r2, [r3, #0]
		pre_uv = environment_data.uv;
   18cf4:	003b      	movs	r3, r7
   18cf6:	685a      	ldr	r2, [r3, #4]
   18cf8:	4b3c      	ldr	r3, [pc, #240]	; (18dec <env_sensor_execute+0x1d0>)
   18cfa:	601a      	str	r2, [r3, #0]
		uv_not_equal_cnt++;
   18cfc:	4b3d      	ldr	r3, [pc, #244]	; (18df4 <env_sensor_execute+0x1d8>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	1c5a      	adds	r2, r3, #1
   18d02:	4b3c      	ldr	r3, [pc, #240]	; (18df4 <env_sensor_execute+0x1d8>)
   18d04:	601a      	str	r2, [r3, #0]
   18d06:	e007      	b.n	18d18 <env_sensor_execute+0xfc>
	}
	else
	{
		uv_cnt++;
   18d08:	4b39      	ldr	r3, [pc, #228]	; (18df0 <env_sensor_execute+0x1d4>)
   18d0a:	681b      	ldr	r3, [r3, #0]
   18d0c:	1c5a      	adds	r2, r3, #1
   18d0e:	4b38      	ldr	r3, [pc, #224]	; (18df0 <env_sensor_execute+0x1d4>)
   18d10:	601a      	str	r2, [r3, #0]
		uv_not_equal_cnt = 0;
   18d12:	4b38      	ldr	r3, [pc, #224]	; (18df4 <env_sensor_execute+0x1d8>)
   18d14:	2200      	movs	r2, #0
   18d16:	601a      	str	r2, [r3, #0]
	}
	if (((uv_cnt >= UV_DISP_COUNTER) && gu32Disp_uv!= pre_uv) || (uv_not_equal_cnt >1))
   18d18:	4b35      	ldr	r3, [pc, #212]	; (18df0 <env_sensor_execute+0x1d4>)
   18d1a:	681b      	ldr	r3, [r3, #0]
   18d1c:	2b00      	cmp	r3, #0
   18d1e:	dd05      	ble.n	18d2c <env_sensor_execute+0x110>
   18d20:	4b35      	ldr	r3, [pc, #212]	; (18df8 <env_sensor_execute+0x1dc>)
   18d22:	681a      	ldr	r2, [r3, #0]
   18d24:	4b31      	ldr	r3, [pc, #196]	; (18dec <env_sensor_execute+0x1d0>)
   18d26:	681b      	ldr	r3, [r3, #0]
   18d28:	429a      	cmp	r2, r3
   18d2a:	d103      	bne.n	18d34 <env_sensor_execute+0x118>
   18d2c:	4b31      	ldr	r3, [pc, #196]	; (18df4 <env_sensor_execute+0x1d8>)
   18d2e:	681b      	ldr	r3, [r3, #0]
   18d30:	2b01      	cmp	r3, #1
   18d32:	dd0e      	ble.n	18d52 <env_sensor_execute+0x136>
	//if (((uv_cnt >= UV_DISP_COUNTER) && gu32Disp_uv!= pre_uv))
	{
		gu32Disp_uv = pre_uv;
   18d34:	4b2d      	ldr	r3, [pc, #180]	; (18dec <env_sensor_execute+0x1d0>)
   18d36:	681a      	ldr	r2, [r3, #0]
   18d38:	4b2f      	ldr	r3, [pc, #188]	; (18df8 <env_sensor_execute+0x1dc>)
   18d3a:	601a      	str	r2, [r3, #0]
		updateFlag |= UV_UPDATE_BIT;
   18d3c:	230f      	movs	r3, #15
   18d3e:	18fb      	adds	r3, r7, r3
   18d40:	220f      	movs	r2, #15
   18d42:	18ba      	adds	r2, r7, r2
   18d44:	7812      	ldrb	r2, [r2, #0]
   18d46:	2104      	movs	r1, #4
   18d48:	430a      	orrs	r2, r1
   18d4a:	701a      	strb	r2, [r3, #0]
		uv_not_equal_cnt = 0;
   18d4c:	4b29      	ldr	r3, [pc, #164]	; (18df4 <env_sensor_execute+0x1d8>)
   18d4e:	2200      	movs	r2, #0
   18d50:	601a      	str	r2, [r3, #0]
	}
	
	// check pressure
	if (pre_pressure != environment_data.pressure)
   18d52:	003b      	movs	r3, r7
   18d54:	885a      	ldrh	r2, [r3, #2]
   18d56:	4b29      	ldr	r3, [pc, #164]	; (18dfc <env_sensor_execute+0x1e0>)
   18d58:	881b      	ldrh	r3, [r3, #0]
   18d5a:	429a      	cmp	r2, r3
   18d5c:	d007      	beq.n	18d6e <env_sensor_execute+0x152>
	{
		pressure_cnt = 0;
   18d5e:	4b28      	ldr	r3, [pc, #160]	; (18e00 <env_sensor_execute+0x1e4>)
   18d60:	2200      	movs	r2, #0
   18d62:	601a      	str	r2, [r3, #0]
		pre_pressure = environment_data.pressure;
   18d64:	003b      	movs	r3, r7
   18d66:	885a      	ldrh	r2, [r3, #2]
   18d68:	4b24      	ldr	r3, [pc, #144]	; (18dfc <env_sensor_execute+0x1e0>)
   18d6a:	801a      	strh	r2, [r3, #0]
   18d6c:	e004      	b.n	18d78 <env_sensor_execute+0x15c>
	}
	else
	pressure_cnt++;
   18d6e:	4b24      	ldr	r3, [pc, #144]	; (18e00 <env_sensor_execute+0x1e4>)
   18d70:	681b      	ldr	r3, [r3, #0]
   18d72:	1c5a      	adds	r2, r3, #1
   18d74:	4b22      	ldr	r3, [pc, #136]	; (18e00 <env_sensor_execute+0x1e4>)
   18d76:	601a      	str	r2, [r3, #0]
	
	if ((pressure_cnt >= PRESSURE_DISP_COUNTER) && gu16Disp_pressure!= pre_pressure)
   18d78:	4b21      	ldr	r3, [pc, #132]	; (18e00 <env_sensor_execute+0x1e4>)
   18d7a:	681b      	ldr	r3, [r3, #0]
   18d7c:	2b00      	cmp	r3, #0
   18d7e:	dd11      	ble.n	18da4 <env_sensor_execute+0x188>
   18d80:	4b20      	ldr	r3, [pc, #128]	; (18e04 <env_sensor_execute+0x1e8>)
   18d82:	881a      	ldrh	r2, [r3, #0]
   18d84:	4b1d      	ldr	r3, [pc, #116]	; (18dfc <env_sensor_execute+0x1e0>)
   18d86:	881b      	ldrh	r3, [r3, #0]
   18d88:	429a      	cmp	r2, r3
   18d8a:	d00b      	beq.n	18da4 <env_sensor_execute+0x188>
	{
		gu16Disp_pressure = pre_pressure;
   18d8c:	4b1b      	ldr	r3, [pc, #108]	; (18dfc <env_sensor_execute+0x1e0>)
   18d8e:	881a      	ldrh	r2, [r3, #0]
   18d90:	4b1c      	ldr	r3, [pc, #112]	; (18e04 <env_sensor_execute+0x1e8>)
   18d92:	801a      	strh	r2, [r3, #0]
		updateFlag |= PRESSURE_UPDATE_BIT;
   18d94:	230f      	movs	r3, #15
   18d96:	18fb      	adds	r3, r7, r3
   18d98:	220f      	movs	r2, #15
   18d9a:	18ba      	adds	r2, r7, r2
   18d9c:	7812      	ldrb	r2, [r2, #0]
   18d9e:	2108      	movs	r1, #8
   18da0:	430a      	orrs	r2, r1
   18da2:	701a      	strb	r2, [r3, #0]
	}
	updateFlag |= PRESSURE_UPDATE_BIT | HUM_UPDATE_BIT | TEMP_UPDATE_BIT| UV_UPDATE_BIT;
   18da4:	230f      	movs	r3, #15
   18da6:	18fb      	adds	r3, r7, r3
   18da8:	220f      	movs	r2, #15
   18daa:	18ba      	adds	r2, r7, r2
   18dac:	7812      	ldrb	r2, [r2, #0]
   18dae:	210f      	movs	r1, #15
   18db0:	430a      	orrs	r2, r1
   18db2:	701a      	strb	r2, [r3, #0]

	env_sensor_update_cb(environment_data, updateFlag);
   18db4:	4b14      	ldr	r3, [pc, #80]	; (18e08 <env_sensor_execute+0x1ec>)
   18db6:	681c      	ldr	r4, [r3, #0]
   18db8:	230f      	movs	r3, #15
   18dba:	18fb      	adds	r3, r7, r3
   18dbc:	781b      	ldrb	r3, [r3, #0]
   18dbe:	003a      	movs	r2, r7
   18dc0:	6810      	ldr	r0, [r2, #0]
   18dc2:	6851      	ldr	r1, [r2, #4]
   18dc4:	6892      	ldr	r2, [r2, #8]
   18dc6:	47a0      	blx	r4
	
}
   18dc8:	46c0      	nop			; (mov r8, r8)
   18dca:	46bd      	mov	sp, r7
   18dcc:	b005      	add	sp, #20
   18dce:	bd90      	pop	{r4, r7, pc}
   18dd0:	00018bc5 	.word	0x00018bc5
   18dd4:	2000185a 	.word	0x2000185a
   18dd8:	2000185c 	.word	0x2000185c
   18ddc:	20002740 	.word	0x20002740
   18de0:	20001860 	.word	0x20001860
   18de4:	20001864 	.word	0x20001864
   18de8:	200026ac 	.word	0x200026ac
   18dec:	20001868 	.word	0x20001868
   18df0:	2000186c 	.word	0x2000186c
   18df4:	20001870 	.word	0x20001870
   18df8:	2000273c 	.word	0x2000273c
   18dfc:	20001874 	.word	0x20001874
   18e00:	20001878 	.word	0x20001878
   18e04:	20002742 	.word	0x20002742
   18e08:	20001854 	.word	0x20001854

00018e0c <start_AP_app>:
	}
	return;
}

static void start_AP_app(void)
{
   18e0c:	b580      	push	{r7, lr}
   18e0e:	b086      	sub	sp, #24
   18e10:	af00      	add	r7, sp, #0
	struct sockaddr_in	addr;
	int ret = -1;
   18e12:	2301      	movs	r3, #1
   18e14:	425b      	negs	r3, r3
   18e16:	617b      	str	r3, [r7, #20]
	
	/* TCP Server. */
	if(provServerSocket == -1) {
   18e18:	4b39      	ldr	r3, [pc, #228]	; (18f00 <start_AP_app+0xf4>)
   18e1a:	781b      	ldrb	r3, [r3, #0]
   18e1c:	b25b      	sxtb	r3, r3
   18e1e:	3301      	adds	r3, #1
   18e20:	d162      	bne.n	18ee8 <start_AP_app+0xdc>
		if((provServerSocket = socket(AF_INET, SOCK_STREAM, 0)) >= 0) {
   18e22:	2200      	movs	r2, #0
   18e24:	2101      	movs	r1, #1
   18e26:	2002      	movs	r0, #2
   18e28:	4b36      	ldr	r3, [pc, #216]	; (18f04 <start_AP_app+0xf8>)
   18e2a:	4798      	blx	r3
   18e2c:	0003      	movs	r3, r0
   18e2e:	001a      	movs	r2, r3
   18e30:	4b33      	ldr	r3, [pc, #204]	; (18f00 <start_AP_app+0xf4>)
   18e32:	701a      	strb	r2, [r3, #0]
   18e34:	4b32      	ldr	r3, [pc, #200]	; (18f00 <start_AP_app+0xf4>)
   18e36:	781b      	ldrb	r3, [r3, #0]
   18e38:	b25b      	sxtb	r3, r3
   18e3a:	2b00      	cmp	r3, #0
   18e3c:	db48      	blt.n	18ed0 <start_AP_app+0xc4>
			// Initialize socket address structure.
			addr.sin_family      = AF_INET;
   18e3e:	1d3b      	adds	r3, r7, #4
   18e40:	2202      	movs	r2, #2
   18e42:	801a      	strh	r2, [r3, #0]
			addr.sin_port        = _htons(AP_TCP_SERVER_PORT);
   18e44:	1d3b      	adds	r3, r7, #4
   18e46:	4a30      	ldr	r2, [pc, #192]	; (18f08 <start_AP_app+0xfc>)
   18e48:	805a      	strh	r2, [r3, #2]
			addr.sin_addr.s_addr = 0;
   18e4a:	1d3b      	adds	r3, r7, #4
   18e4c:	2200      	movs	r2, #0
   18e4e:	605a      	str	r2, [r3, #4]

			if((ret = bind(provServerSocket, (struct sockaddr*)&addr, sizeof(addr))) == 0) {
   18e50:	4b2b      	ldr	r3, [pc, #172]	; (18f00 <start_AP_app+0xf4>)
   18e52:	781b      	ldrb	r3, [r3, #0]
   18e54:	b25b      	sxtb	r3, r3
   18e56:	1d39      	adds	r1, r7, #4
   18e58:	2210      	movs	r2, #16
   18e5a:	0018      	movs	r0, r3
   18e5c:	4b2b      	ldr	r3, [pc, #172]	; (18f0c <start_AP_app+0x100>)
   18e5e:	4798      	blx	r3
   18e60:	0003      	movs	r3, r0
   18e62:	617b      	str	r3, [r7, #20]
   18e64:	697b      	ldr	r3, [r7, #20]
   18e66:	2b00      	cmp	r3, #0
   18e68:	d10b      	bne.n	18e82 <start_AP_app+0x76>
				M2M_INFO("[AP] TCP socket bind success!\r\n");
   18e6a:	4b29      	ldr	r3, [pc, #164]	; (18f10 <start_AP_app+0x104>)
   18e6c:	0018      	movs	r0, r3
   18e6e:	4b29      	ldr	r3, [pc, #164]	; (18f14 <start_AP_app+0x108>)
   18e70:	4798      	blx	r3
   18e72:	4b29      	ldr	r3, [pc, #164]	; (18f18 <start_AP_app+0x10c>)
   18e74:	0018      	movs	r0, r3
   18e76:	4b29      	ldr	r3, [pc, #164]	; (18f1c <start_AP_app+0x110>)
   18e78:	4798      	blx	r3
   18e7a:	200d      	movs	r0, #13
   18e7c:	4b28      	ldr	r3, [pc, #160]	; (18f20 <start_AP_app+0x114>)
   18e7e:	4798      	blx	r3
   18e80:	e03a      	b.n	18ef8 <start_AP_app+0xec>
			}
			else {
				M2M_INFO("[AP] Bind Failed. Error code = %d\r\n", ret);
   18e82:	4b23      	ldr	r3, [pc, #140]	; (18f10 <start_AP_app+0x104>)
   18e84:	0018      	movs	r0, r3
   18e86:	4b23      	ldr	r3, [pc, #140]	; (18f14 <start_AP_app+0x108>)
   18e88:	4798      	blx	r3
   18e8a:	697a      	ldr	r2, [r7, #20]
   18e8c:	4b25      	ldr	r3, [pc, #148]	; (18f24 <start_AP_app+0x118>)
   18e8e:	0011      	movs	r1, r2
   18e90:	0018      	movs	r0, r3
   18e92:	4b20      	ldr	r3, [pc, #128]	; (18f14 <start_AP_app+0x108>)
   18e94:	4798      	blx	r3
   18e96:	200d      	movs	r0, #13
   18e98:	4b21      	ldr	r3, [pc, #132]	; (18f20 <start_AP_app+0x114>)
   18e9a:	4798      	blx	r3
				close(provServerSocket);
   18e9c:	4b18      	ldr	r3, [pc, #96]	; (18f00 <start_AP_app+0xf4>)
   18e9e:	781b      	ldrb	r3, [r3, #0]
   18ea0:	b25b      	sxtb	r3, r3
   18ea2:	0018      	movs	r0, r3
   18ea4:	4b20      	ldr	r3, [pc, #128]	; (18f28 <start_AP_app+0x11c>)
   18ea6:	4798      	blx	r3
				M2M_INFO("[AP] TCP server socket %d closed!\r\n", provServerSocket);
   18ea8:	4b19      	ldr	r3, [pc, #100]	; (18f10 <start_AP_app+0x104>)
   18eaa:	0018      	movs	r0, r3
   18eac:	4b19      	ldr	r3, [pc, #100]	; (18f14 <start_AP_app+0x108>)
   18eae:	4798      	blx	r3
   18eb0:	4b13      	ldr	r3, [pc, #76]	; (18f00 <start_AP_app+0xf4>)
   18eb2:	781b      	ldrb	r3, [r3, #0]
   18eb4:	b25b      	sxtb	r3, r3
   18eb6:	001a      	movs	r2, r3
   18eb8:	4b1c      	ldr	r3, [pc, #112]	; (18f2c <start_AP_app+0x120>)
   18eba:	0011      	movs	r1, r2
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b15      	ldr	r3, [pc, #84]	; (18f14 <start_AP_app+0x108>)
   18ec0:	4798      	blx	r3
   18ec2:	200d      	movs	r0, #13
   18ec4:	4b16      	ldr	r3, [pc, #88]	; (18f20 <start_AP_app+0x114>)
   18ec6:	4798      	blx	r3
				provServerSocket = -1;
   18ec8:	4b0d      	ldr	r3, [pc, #52]	; (18f00 <start_AP_app+0xf4>)
   18eca:	22ff      	movs	r2, #255	; 0xff
   18ecc:	701a      	strb	r2, [r3, #0]
   18ece:	e013      	b.n	18ef8 <start_AP_app+0xec>
			}
		}
		else {
			M2M_INFO("[AP] TCP Server Socket Creation Failed\r\n");
   18ed0:	4b0f      	ldr	r3, [pc, #60]	; (18f10 <start_AP_app+0x104>)
   18ed2:	0018      	movs	r0, r3
   18ed4:	4b0f      	ldr	r3, [pc, #60]	; (18f14 <start_AP_app+0x108>)
   18ed6:	4798      	blx	r3
   18ed8:	4b15      	ldr	r3, [pc, #84]	; (18f30 <start_AP_app+0x124>)
   18eda:	0018      	movs	r0, r3
   18edc:	4b0f      	ldr	r3, [pc, #60]	; (18f1c <start_AP_app+0x110>)
   18ede:	4798      	blx	r3
   18ee0:	200d      	movs	r0, #13
   18ee2:	4b0f      	ldr	r3, [pc, #60]	; (18f20 <start_AP_app+0x114>)
   18ee4:	4798      	blx	r3
   18ee6:	e007      	b.n	18ef8 <start_AP_app+0xec>
			return;
		}
	}
	else {
		accept(provServerSocket, NULL, 0);
   18ee8:	4b05      	ldr	r3, [pc, #20]	; (18f00 <start_AP_app+0xf4>)
   18eea:	781b      	ldrb	r3, [r3, #0]
   18eec:	b25b      	sxtb	r3, r3
   18eee:	2200      	movs	r2, #0
   18ef0:	2100      	movs	r1, #0
   18ef2:	0018      	movs	r0, r3
   18ef4:	4b0f      	ldr	r3, [pc, #60]	; (18f34 <start_AP_app+0x128>)
   18ef6:	4798      	blx	r3
	}
}
   18ef8:	46bd      	mov	sp, r7
   18efa:	b006      	add	sp, #24
   18efc:	bd80      	pop	{r7, pc}
   18efe:	46c0      	nop			; (mov r8, r8)
   18f00:	20000625 	.word	0x20000625
   18f04:	00005415 	.word	0x00005415
   18f08:	ffffc322 	.word	0xffffc322
   18f0c:	00005625 	.word	0x00005625
   18f10:	0001eea0 	.word	0x0001eea0
   18f14:	0001bc4d 	.word	0x0001bc4d
   18f18:	0001eeac 	.word	0x0001eeac
   18f1c:	0001bd69 	.word	0x0001bd69
   18f20:	0001bc81 	.word	0x0001bc81
   18f24:	0001eecc 	.word	0x0001eecc
   18f28:	00005b71 	.word	0x00005b71
   18f2c:	0001eef0 	.word	0x0001eef0
   18f30:	0001ef14 	.word	0x0001ef14
   18f34:	00005721 	.word	0x00005721

00018f38 <bin2hex>:
	
}


static const char* bin2hex(const void* data, size_t data_size)
{
   18f38:	b580      	push	{r7, lr}
   18f3a:	b084      	sub	sp, #16
   18f3c:	af00      	add	r7, sp, #0
   18f3e:	6078      	str	r0, [r7, #4]
   18f40:	6039      	str	r1, [r7, #0]
	static char buf[256];
	static char hex[] = "0123456789abcdef";
	const uint8_t* data8 = data;
   18f42:	687b      	ldr	r3, [r7, #4]
   18f44:	60fb      	str	r3, [r7, #12]
	
	if (data_size*2 > sizeof(buf)-1)
   18f46:	683b      	ldr	r3, [r7, #0]
   18f48:	005b      	lsls	r3, r3, #1
   18f4a:	2bff      	cmp	r3, #255	; 0xff
   18f4c:	d901      	bls.n	18f52 <bin2hex+0x1a>
	return "[buf too small]";
   18f4e:	4b18      	ldr	r3, [pc, #96]	; (18fb0 <bin2hex+0x78>)
   18f50:	e029      	b.n	18fa6 <bin2hex+0x6e>
	
	for (size_t i = 0; i < data_size; i++)
   18f52:	2300      	movs	r3, #0
   18f54:	60bb      	str	r3, [r7, #8]
   18f56:	e01c      	b.n	18f92 <bin2hex+0x5a>
	{
		buf[i*2 + 0] = hex[(*data8) >> 4];
   18f58:	68bb      	ldr	r3, [r7, #8]
   18f5a:	005b      	lsls	r3, r3, #1
   18f5c:	68fa      	ldr	r2, [r7, #12]
   18f5e:	7812      	ldrb	r2, [r2, #0]
   18f60:	0912      	lsrs	r2, r2, #4
   18f62:	b2d2      	uxtb	r2, r2
   18f64:	0011      	movs	r1, r2
   18f66:	4a13      	ldr	r2, [pc, #76]	; (18fb4 <bin2hex+0x7c>)
   18f68:	5c51      	ldrb	r1, [r2, r1]
   18f6a:	4a13      	ldr	r2, [pc, #76]	; (18fb8 <bin2hex+0x80>)
   18f6c:	54d1      	strb	r1, [r2, r3]
		buf[i*2 + 1] = hex[(*data8) & 0xF];
   18f6e:	68bb      	ldr	r3, [r7, #8]
   18f70:	005b      	lsls	r3, r3, #1
   18f72:	3301      	adds	r3, #1
   18f74:	68fa      	ldr	r2, [r7, #12]
   18f76:	7812      	ldrb	r2, [r2, #0]
   18f78:	0011      	movs	r1, r2
   18f7a:	220f      	movs	r2, #15
   18f7c:	400a      	ands	r2, r1
   18f7e:	490d      	ldr	r1, [pc, #52]	; (18fb4 <bin2hex+0x7c>)
   18f80:	5c89      	ldrb	r1, [r1, r2]
   18f82:	4a0d      	ldr	r2, [pc, #52]	; (18fb8 <bin2hex+0x80>)
   18f84:	54d1      	strb	r1, [r2, r3]
		data8++;
   18f86:	68fb      	ldr	r3, [r7, #12]
   18f88:	3301      	adds	r3, #1
   18f8a:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < data_size; i++)
   18f8c:	68bb      	ldr	r3, [r7, #8]
   18f8e:	3301      	adds	r3, #1
   18f90:	60bb      	str	r3, [r7, #8]
   18f92:	68ba      	ldr	r2, [r7, #8]
   18f94:	683b      	ldr	r3, [r7, #0]
   18f96:	429a      	cmp	r2, r3
   18f98:	d3de      	bcc.n	18f58 <bin2hex+0x20>
	}
	buf[data_size*2] = 0;
   18f9a:	683b      	ldr	r3, [r7, #0]
   18f9c:	005b      	lsls	r3, r3, #1
   18f9e:	4a06      	ldr	r2, [pc, #24]	; (18fb8 <bin2hex+0x80>)
   18fa0:	2100      	movs	r1, #0
   18fa2:	54d1      	strb	r1, [r2, r3]
	
	return buf;
   18fa4:	4b04      	ldr	r3, [pc, #16]	; (18fb8 <bin2hex+0x80>)
}
   18fa6:	0018      	movs	r0, r3
   18fa8:	46bd      	mov	sp, r7
   18faa:	b004      	add	sp, #16
   18fac:	bd80      	pop	{r7, pc}
   18fae:	46c0      	nop			; (mov r8, r8)
   18fb0:	0001efa0 	.word	0x0001efa0
   18fb4:	20000628 	.word	0x20000628
   18fb8:	2000187c 	.word	0x2000187c

00018fbc <eccPrintInfo>:

static int eccPrintInfo(void)
{
   18fbc:	b590      	push	{r4, r7, lr}
   18fbe:	b085      	sub	sp, #20
   18fc0:	af00      	add	r7, sp, #0
	ATCA_STATUS atca_status;
	uint8_t sn[9];
	uint8_t dev_rev[4];

	atca_status = atcab_read_serial_number(sn);
   18fc2:	230f      	movs	r3, #15
   18fc4:	18fc      	adds	r4, r7, r3
   18fc6:	1d3b      	adds	r3, r7, #4
   18fc8:	0018      	movs	r0, r3
   18fca:	4b26      	ldr	r3, [pc, #152]	; (19064 <eccPrintInfo+0xa8>)
   18fcc:	4798      	blx	r3
   18fce:	0003      	movs	r3, r0
   18fd0:	7023      	strb	r3, [r4, #0]
	if (atca_status)
   18fd2:	230f      	movs	r3, #15
   18fd4:	18fb      	adds	r3, r7, r3
   18fd6:	781b      	ldrb	r3, [r3, #0]
   18fd8:	2b00      	cmp	r3, #0
   18fda:	d00b      	beq.n	18ff4 <eccPrintInfo+0x38>
	{
		printf("atcab_read_serial_number() failed with ret=0x%08X\r\n", atca_status);
   18fdc:	230f      	movs	r3, #15
   18fde:	18fb      	adds	r3, r7, r3
   18fe0:	781a      	ldrb	r2, [r3, #0]
   18fe2:	4b21      	ldr	r3, [pc, #132]	; (19068 <eccPrintInfo+0xac>)
   18fe4:	0011      	movs	r1, r2
   18fe6:	0018      	movs	r0, r3
   18fe8:	4b20      	ldr	r3, [pc, #128]	; (1906c <eccPrintInfo+0xb0>)
   18fea:	4798      	blx	r3
		return atca_status;
   18fec:	230f      	movs	r3, #15
   18fee:	18fb      	adds	r3, r7, r3
   18ff0:	781b      	ldrb	r3, [r3, #0]
   18ff2:	e033      	b.n	1905c <eccPrintInfo+0xa0>
	}
	
	atca_status = atcab_info(dev_rev);
   18ff4:	230f      	movs	r3, #15
   18ff6:	18fc      	adds	r4, r7, r3
   18ff8:	003b      	movs	r3, r7
   18ffa:	0018      	movs	r0, r3
   18ffc:	4b1c      	ldr	r3, [pc, #112]	; (19070 <eccPrintInfo+0xb4>)
   18ffe:	4798      	blx	r3
   19000:	0003      	movs	r3, r0
   19002:	7023      	strb	r3, [r4, #0]
	if (atca_status)
   19004:	230f      	movs	r3, #15
   19006:	18fb      	adds	r3, r7, r3
   19008:	781b      	ldrb	r3, [r3, #0]
   1900a:	2b00      	cmp	r3, #0
   1900c:	d00b      	beq.n	19026 <eccPrintInfo+0x6a>
	{
		printf("atcab_info() failed with ret=0x%08X\r\n", atca_status);
   1900e:	230f      	movs	r3, #15
   19010:	18fb      	adds	r3, r7, r3
   19012:	781a      	ldrb	r2, [r3, #0]
   19014:	4b17      	ldr	r3, [pc, #92]	; (19074 <eccPrintInfo+0xb8>)
   19016:	0011      	movs	r1, r2
   19018:	0018      	movs	r0, r3
   1901a:	4b14      	ldr	r3, [pc, #80]	; (1906c <eccPrintInfo+0xb0>)
   1901c:	4798      	blx	r3
		return atca_status;
   1901e:	230f      	movs	r3, #15
   19020:	18fb      	adds	r3, r7, r3
   19022:	781b      	ldrb	r3, [r3, #0]
   19024:	e01a      	b.n	1905c <eccPrintInfo+0xa0>
	}

	printf("Crypto Device:\r\n");
   19026:	4b14      	ldr	r3, [pc, #80]	; (19078 <eccPrintInfo+0xbc>)
   19028:	0018      	movs	r0, r3
   1902a:	4b14      	ldr	r3, [pc, #80]	; (1907c <eccPrintInfo+0xc0>)
   1902c:	4798      	blx	r3
	printf("  SN:          %s\r\n", bin2hex(sn, sizeof(sn)));
   1902e:	1d3b      	adds	r3, r7, #4
   19030:	2109      	movs	r1, #9
   19032:	0018      	movs	r0, r3
   19034:	4b12      	ldr	r3, [pc, #72]	; (19080 <eccPrintInfo+0xc4>)
   19036:	4798      	blx	r3
   19038:	0002      	movs	r2, r0
   1903a:	4b12      	ldr	r3, [pc, #72]	; (19084 <eccPrintInfo+0xc8>)
   1903c:	0011      	movs	r1, r2
   1903e:	0018      	movs	r0, r3
   19040:	4b0a      	ldr	r3, [pc, #40]	; (1906c <eccPrintInfo+0xb0>)
   19042:	4798      	blx	r3
	printf("  DevRev:      %s\r\n", bin2hex(dev_rev, sizeof(dev_rev)));
   19044:	003b      	movs	r3, r7
   19046:	2104      	movs	r1, #4
   19048:	0018      	movs	r0, r3
   1904a:	4b0d      	ldr	r3, [pc, #52]	; (19080 <eccPrintInfo+0xc4>)
   1904c:	4798      	blx	r3
   1904e:	0002      	movs	r2, r0
   19050:	4b0d      	ldr	r3, [pc, #52]	; (19088 <eccPrintInfo+0xcc>)
   19052:	0011      	movs	r1, r2
   19054:	0018      	movs	r0, r3
   19056:	4b05      	ldr	r3, [pc, #20]	; (1906c <eccPrintInfo+0xb0>)
   19058:	4798      	blx	r3

	return 0;
   1905a:	2300      	movs	r3, #0
}
   1905c:	0018      	movs	r0, r3
   1905e:	46bd      	mov	sp, r7
   19060:	b005      	add	sp, #20
   19062:	bd90      	pop	{r4, r7, pc}
   19064:	0000e075 	.word	0x0000e075
   19068:	0001efb0 	.word	0x0001efb0
   1906c:	0001bc4d 	.word	0x0001bc4d
   19070:	0000d98d 	.word	0x0000d98d
   19074:	0001efe4 	.word	0x0001efe4
   19078:	0001f00c 	.word	0x0001f00c
   1907c:	0001bd69 	.word	0x0001bd69
   19080:	00018f39 	.word	0x00018f39
   19084:	0001f01c 	.word	0x0001f01c
   19088:	0001f030 	.word	0x0001f030

0001908c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1908c:	b590      	push	{r4, r7, lr}
   1908e:	b087      	sub	sp, #28
   19090:	af02      	add	r7, sp, #8
   19092:	0002      	movs	r2, r0
   19094:	6039      	str	r1, [r7, #0]
   19096:	1dfb      	adds	r3, r7, #7
   19098:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   1909a:	1dfb      	adds	r3, r7, #7
   1909c:	781b      	ldrb	r3, [r3, #0]
   1909e:	2b2c      	cmp	r3, #44	; 0x2c
   190a0:	d004      	beq.n	190ac <wifi_cb+0x20>
   190a2:	2b32      	cmp	r3, #50	; 0x32
   190a4:	d02a      	beq.n	190fc <wifi_cb+0x70>
   190a6:	2b1b      	cmp	r3, #27
   190a8:	d04d      	beq.n	19146 <wifi_cb+0xba>
		wifi_states = WIFI_TASK_CONNECT_CLOUD;
	}

	default:
	{
		break;
   190aa:	e058      	b.n	1915e <wifi_cb+0xd2>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   190ac:	683b      	ldr	r3, [r7, #0]
   190ae:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   190b0:	68fb      	ldr	r3, [r7, #12]
   190b2:	781b      	ldrb	r3, [r3, #0]
   190b4:	2b01      	cmp	r3, #1
   190b6:	d106      	bne.n	190c6 <wifi_cb+0x3a>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
   190b8:	4b2b      	ldr	r3, [pc, #172]	; (19168 <wifi_cb+0xdc>)
   190ba:	0018      	movs	r0, r3
   190bc:	4b2b      	ldr	r3, [pc, #172]	; (1916c <wifi_cb+0xe0>)
   190be:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   190c0:	4b2b      	ldr	r3, [pc, #172]	; (19170 <wifi_cb+0xe4>)
   190c2:	4798      	blx	r3
		break;
   190c4:	e04a      	b.n	1915c <wifi_cb+0xd0>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   190c6:	68fb      	ldr	r3, [r7, #12]
   190c8:	781b      	ldrb	r3, [r3, #0]
   190ca:	2b00      	cmp	r3, #0
   190cc:	d146      	bne.n	1915c <wifi_cb+0xd0>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
   190ce:	4b29      	ldr	r3, [pc, #164]	; (19174 <wifi_cb+0xe8>)
   190d0:	0018      	movs	r0, r3
   190d2:	4b26      	ldr	r3, [pc, #152]	; (1916c <wifi_cb+0xe0>)
   190d4:	4798      	blx	r3
			gbConnectedWifi = false;
   190d6:	4b28      	ldr	r3, [pc, #160]	; (19178 <wifi_cb+0xec>)
   190d8:	2200      	movs	r2, #0
   190da:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)gDefaultSSID, strlen((char *)gDefaultSSID), 
   190dc:	4b27      	ldr	r3, [pc, #156]	; (1917c <wifi_cb+0xf0>)
   190de:	0018      	movs	r0, r3
   190e0:	4b27      	ldr	r3, [pc, #156]	; (19180 <wifi_cb+0xf4>)
   190e2:	4798      	blx	r3
   190e4:	0003      	movs	r3, r0
   190e6:	b2d9      	uxtb	r1, r3
   190e8:	4b26      	ldr	r3, [pc, #152]	; (19184 <wifi_cb+0xf8>)
   190ea:	781a      	ldrb	r2, [r3, #0]
   190ec:	4c26      	ldr	r4, [pc, #152]	; (19188 <wifi_cb+0xfc>)
   190ee:	4823      	ldr	r0, [pc, #140]	; (1917c <wifi_cb+0xf0>)
   190f0:	23ff      	movs	r3, #255	; 0xff
   190f2:	9300      	str	r3, [sp, #0]
   190f4:	0023      	movs	r3, r4
   190f6:	4c25      	ldr	r4, [pc, #148]	; (1918c <wifi_cb+0x100>)
   190f8:	47a0      	blx	r4
		break;
   190fa:	e02f      	b.n	1915c <wifi_cb+0xd0>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   190fc:	683b      	ldr	r3, [r7, #0]
   190fe:	60bb      	str	r3, [r7, #8]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   19100:	68bb      	ldr	r3, [r7, #8]
   19102:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   19104:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   19106:	68bb      	ldr	r3, [r7, #8]
   19108:	3301      	adds	r3, #1
   1910a:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   1910c:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1910e:	68bb      	ldr	r3, [r7, #8]
   19110:	3302      	adds	r3, #2
   19112:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   19114:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   19116:	68bb      	ldr	r3, [r7, #8]
   19118:	3303      	adds	r3, #3
   1911a:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
   1911c:	481c      	ldr	r0, [pc, #112]	; (19190 <wifi_cb+0x104>)
   1911e:	9300      	str	r3, [sp, #0]
   19120:	0023      	movs	r3, r4
   19122:	4c1c      	ldr	r4, [pc, #112]	; (19194 <wifi_cb+0x108>)
   19124:	47a0      	blx	r4
		gbConnectedWifi = true;
   19126:	4b14      	ldr	r3, [pc, #80]	; (19178 <wifi_cb+0xec>)
   19128:	2201      	movs	r2, #1
   1912a:	701a      	strb	r2, [r3, #0]
		if (gu8WiFiMode == APP_AP)
   1912c:	4b1a      	ldr	r3, [pc, #104]	; (19198 <wifi_cb+0x10c>)
   1912e:	781b      	ldrb	r3, [r3, #0]
   19130:	2b01      	cmp	r3, #1
   19132:	d105      	bne.n	19140 <wifi_cb+0xb4>
			start_AP_app();
   19134:	4b19      	ldr	r3, [pc, #100]	; (1919c <wifi_cb+0x110>)
   19136:	4798      	blx	r3
			wifi_states = WIFI_TASK_AP_CONNECTED;
   19138:	4b19      	ldr	r3, [pc, #100]	; (191a0 <wifi_cb+0x114>)
   1913a:	2208      	movs	r2, #8
   1913c:	701a      	strb	r2, [r3, #0]
		break;
   1913e:	e00e      	b.n	1915e <wifi_cb+0xd2>
			m2m_wifi_get_sytem_time();
   19140:	4b18      	ldr	r3, [pc, #96]	; (191a4 <wifi_cb+0x118>)
   19142:	4798      	blx	r3
		break;
   19144:	e00b      	b.n	1915e <wifi_cb+0xd2>
		printf("Received time\r\n");
   19146:	4b18      	ldr	r3, [pc, #96]	; (191a8 <wifi_cb+0x11c>)
   19148:	0018      	movs	r0, r3
   1914a:	4b08      	ldr	r3, [pc, #32]	; (1916c <wifi_cb+0xe0>)
   1914c:	4798      	blx	r3
		receivedTime = true;
   1914e:	4b17      	ldr	r3, [pc, #92]	; (191ac <wifi_cb+0x120>)
   19150:	2201      	movs	r2, #1
   19152:	701a      	strb	r2, [r3, #0]
		wifi_states = WIFI_TASK_CONNECT_CLOUD;
   19154:	4b12      	ldr	r3, [pc, #72]	; (191a0 <wifi_cb+0x114>)
   19156:	2202      	movs	r2, #2
   19158:	701a      	strb	r2, [r3, #0]
		break;
   1915a:	e000      	b.n	1915e <wifi_cb+0xd2>
		break;
   1915c:	46c0      	nop			; (mov r8, r8)
	}
	}
}
   1915e:	46c0      	nop			; (mov r8, r8)
   19160:	46bd      	mov	sp, r7
   19162:	b005      	add	sp, #20
   19164:	bd90      	pop	{r4, r7, pc}
   19166:	46c0      	nop			; (mov r8, r8)
   19168:	0001f044 	.word	0x0001f044
   1916c:	0001bd69 	.word	0x0001bd69
   19170:	00002831 	.word	0x00002831
   19174:	0001f07c 	.word	0x0001f07c
   19178:	20001851 	.word	0x20001851
   1917c:	200017ec 	.word	0x200017ec
   19180:	0001c02f 	.word	0x0001c02f
   19184:	2000180d 	.word	0x2000180d
   19188:	20001810 	.word	0x20001810
   1918c:	00002369 	.word	0x00002369
   19190:	0001f0b4 	.word	0x0001f0b4
   19194:	0001bc4d 	.word	0x0001bc4d
   19198:	20001858 	.word	0x20001858
   1919c:	00018e0d 	.word	0x00018e0d
   191a0:	20000624 	.word	0x20000624
   191a4:	0000283d 	.word	0x0000283d
   191a8:	0001f0ec 	.word	0x0001f0ec
   191ac:	20001852 	.word	0x20001852

000191b0 <ecdh_derive_client_shared_secret>:

static sint8 ecdh_derive_client_shared_secret(tstrECPoint *server_public_key,
uint8 *ecdh_shared_secret,
tstrECPoint *client_public_Key)
{
   191b0:	b580      	push	{r7, lr}
   191b2:	b086      	sub	sp, #24
   191b4:	af00      	add	r7, sp, #0
   191b6:	60f8      	str	r0, [r7, #12]
   191b8:	60b9      	str	r1, [r7, #8]
   191ba:	607a      	str	r2, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   191bc:	2317      	movs	r3, #23
   191be:	18fb      	adds	r3, r7, r3
   191c0:	22f4      	movs	r2, #244	; 0xf4
   191c2:	701a      	strb	r2, [r3, #0]
	
	if ((g_ecdh_key_slot_index < 0) ||
   191c4:	4b1a      	ldr	r3, [pc, #104]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   191c6:	681b      	ldr	r3, [r3, #0]
   191c8:	2b00      	cmp	r3, #0
   191ca:	d002      	beq.n	191d2 <ecdh_derive_client_shared_secret+0x22>
	(g_ecdh_key_slot_index >= (sizeof(g_ecdh_key_slot) / sizeof(g_ecdh_key_slot[0]))))
	{
		g_ecdh_key_slot_index = 0;
   191cc:	4b18      	ldr	r3, [pc, #96]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   191ce:	2200      	movs	r2, #0
   191d0:	601a      	str	r2, [r3, #0]
	}
	
	if (atcatls_create_key(g_ecdh_key_slot[g_ecdh_key_slot_index], client_public_Key->X) == ATCA_SUCCESS)
   191d2:	4b17      	ldr	r3, [pc, #92]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   191d4:	681a      	ldr	r2, [r3, #0]
   191d6:	4b17      	ldr	r3, [pc, #92]	; (19234 <ecdh_derive_client_shared_secret+0x84>)
   191d8:	0052      	lsls	r2, r2, #1
   191da:	5ad3      	ldrh	r3, [r2, r3]
   191dc:	b2db      	uxtb	r3, r3
   191de:	687a      	ldr	r2, [r7, #4]
   191e0:	0011      	movs	r1, r2
   191e2:	0018      	movs	r0, r3
   191e4:	4b14      	ldr	r3, [pc, #80]	; (19238 <ecdh_derive_client_shared_secret+0x88>)
   191e6:	4798      	blx	r3
   191e8:	1e03      	subs	r3, r0, #0
   191ea:	d118      	bne.n	1921e <ecdh_derive_client_shared_secret+0x6e>
	{
		client_public_Key->u16Size = 32;
   191ec:	687b      	ldr	r3, [r7, #4]
   191ee:	2240      	movs	r2, #64	; 0x40
   191f0:	2120      	movs	r1, #32
   191f2:	5299      	strh	r1, [r3, r2]
		if (atcab_ecdh(g_ecdh_key_slot[g_ecdh_key_slot_index], server_public_key->X,
   191f4:	4b0e      	ldr	r3, [pc, #56]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   191f6:	681a      	ldr	r2, [r3, #0]
   191f8:	4b0e      	ldr	r3, [pc, #56]	; (19234 <ecdh_derive_client_shared_secret+0x84>)
   191fa:	0052      	lsls	r2, r2, #1
   191fc:	5ad3      	ldrh	r3, [r2, r3]
   191fe:	68f9      	ldr	r1, [r7, #12]
   19200:	68ba      	ldr	r2, [r7, #8]
   19202:	0018      	movs	r0, r3
   19204:	4b0d      	ldr	r3, [pc, #52]	; (1923c <ecdh_derive_client_shared_secret+0x8c>)
   19206:	4798      	blx	r3
   19208:	1e03      	subs	r3, r0, #0
   1920a:	d108      	bne.n	1921e <ecdh_derive_client_shared_secret+0x6e>
		ecdh_shared_secret) == ATCA_SUCCESS)
		{
			status = M2M_SUCCESS;
   1920c:	2317      	movs	r3, #23
   1920e:	18fb      	adds	r3, r7, r3
   19210:	2200      	movs	r2, #0
   19212:	701a      	strb	r2, [r3, #0]
			g_ecdh_key_slot_index++;
   19214:	4b06      	ldr	r3, [pc, #24]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	1c5a      	adds	r2, r3, #1
   1921a:	4b05      	ldr	r3, [pc, #20]	; (19230 <ecdh_derive_client_shared_secret+0x80>)
   1921c:	601a      	str	r2, [r3, #0]
		}
	}
	
	return status;
   1921e:	2317      	movs	r3, #23
   19220:	18fb      	adds	r3, r7, r3
   19222:	781b      	ldrb	r3, [r3, #0]
   19224:	b25b      	sxtb	r3, r3
}
   19226:	0018      	movs	r0, r3
   19228:	46bd      	mov	sp, r7
   1922a:	b006      	add	sp, #24
   1922c:	bd80      	pop	{r7, pc}
   1922e:	46c0      	nop			; (mov r8, r8)
   19230:	200017e8 	.word	0x200017e8
   19234:	200005bc 	.word	0x200005bc
   19238:	0000f681 	.word	0x0000f681
   1923c:	0000e3a9 	.word	0x0000e3a9

00019240 <ecdh_derive_key_pair>:

static sint8 ecdh_derive_key_pair(tstrECPoint *server_public_key)
{
   19240:	b580      	push	{r7, lr}
   19242:	b084      	sub	sp, #16
   19244:	af00      	add	r7, sp, #0
   19246:	6078      	str	r0, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   19248:	230f      	movs	r3, #15
   1924a:	18fb      	adds	r3, r7, r3
   1924c:	22f4      	movs	r2, #244	; 0xf4
   1924e:	701a      	strb	r2, [r3, #0]
	
	if ((g_ecdh_key_slot_index < 0) ||
   19250:	4b18      	ldr	r3, [pc, #96]	; (192b4 <ecdh_derive_key_pair+0x74>)
   19252:	681b      	ldr	r3, [r3, #0]
   19254:	2b00      	cmp	r3, #0
   19256:	d002      	beq.n	1925e <ecdh_derive_key_pair+0x1e>
	(g_ecdh_key_slot_index >= (sizeof(g_ecdh_key_slot) / sizeof(g_ecdh_key_slot[0]))))
	{
		g_ecdh_key_slot_index = 0;
   19258:	4b16      	ldr	r3, [pc, #88]	; (192b4 <ecdh_derive_key_pair+0x74>)
   1925a:	2200      	movs	r2, #0
   1925c:	601a      	str	r2, [r3, #0]
	}

	if(atcatls_create_key(g_ecdh_key_slot[g_ecdh_key_slot_index], server_public_key->X) == ATCA_SUCCESS)
   1925e:	4b15      	ldr	r3, [pc, #84]	; (192b4 <ecdh_derive_key_pair+0x74>)
   19260:	681a      	ldr	r2, [r3, #0]
   19262:	4b15      	ldr	r3, [pc, #84]	; (192b8 <ecdh_derive_key_pair+0x78>)
   19264:	0052      	lsls	r2, r2, #1
   19266:	5ad3      	ldrh	r3, [r2, r3]
   19268:	b2db      	uxtb	r3, r3
   1926a:	687a      	ldr	r2, [r7, #4]
   1926c:	0011      	movs	r1, r2
   1926e:	0018      	movs	r0, r3
   19270:	4b12      	ldr	r3, [pc, #72]	; (192bc <ecdh_derive_key_pair+0x7c>)
   19272:	4798      	blx	r3
   19274:	1e03      	subs	r3, r0, #0
   19276:	d114      	bne.n	192a2 <ecdh_derive_key_pair+0x62>
	{
		server_public_key->u16Size      = 32;
   19278:	687b      	ldr	r3, [r7, #4]
   1927a:	2240      	movs	r2, #64	; 0x40
   1927c:	2120      	movs	r1, #32
   1927e:	5299      	strh	r1, [r3, r2]
		server_public_key->u16PrivKeyID = g_ecdh_key_slot[g_ecdh_key_slot_index];
   19280:	4b0c      	ldr	r3, [pc, #48]	; (192b4 <ecdh_derive_key_pair+0x74>)
   19282:	681a      	ldr	r2, [r3, #0]
   19284:	4b0c      	ldr	r3, [pc, #48]	; (192b8 <ecdh_derive_key_pair+0x78>)
   19286:	0052      	lsls	r2, r2, #1
   19288:	5ad1      	ldrh	r1, [r2, r3]
   1928a:	687b      	ldr	r3, [r7, #4]
   1928c:	2242      	movs	r2, #66	; 0x42
   1928e:	5299      	strh	r1, [r3, r2]

		g_ecdh_key_slot_index++;
   19290:	4b08      	ldr	r3, [pc, #32]	; (192b4 <ecdh_derive_key_pair+0x74>)
   19292:	681b      	ldr	r3, [r3, #0]
   19294:	1c5a      	adds	r2, r3, #1
   19296:	4b07      	ldr	r3, [pc, #28]	; (192b4 <ecdh_derive_key_pair+0x74>)
   19298:	601a      	str	r2, [r3, #0]

		status = M2M_SUCCESS;
   1929a:	230f      	movs	r3, #15
   1929c:	18fb      	adds	r3, r7, r3
   1929e:	2200      	movs	r2, #0
   192a0:	701a      	strb	r2, [r3, #0]
	}

	return status;
   192a2:	230f      	movs	r3, #15
   192a4:	18fb      	adds	r3, r7, r3
   192a6:	781b      	ldrb	r3, [r3, #0]
   192a8:	b25b      	sxtb	r3, r3
}
   192aa:	0018      	movs	r0, r3
   192ac:	46bd      	mov	sp, r7
   192ae:	b004      	add	sp, #16
   192b0:	bd80      	pop	{r7, pc}
   192b2:	46c0      	nop			; (mov r8, r8)
   192b4:	200017e8 	.word	0x200017e8
   192b8:	200005bc 	.word	0x200005bc
   192bc:	0000f681 	.word	0x0000f681

000192c0 <ecdsa_process_sign_verify_request>:

static sint8 ecdsa_process_sign_verify_request(uint32 number_of_signatures)
{
   192c0:	b5b0      	push	{r4, r5, r7, lr}
   192c2:	b0be      	sub	sp, #248	; 0xf8
   192c4:	af00      	add	r7, sp, #0
   192c6:	6078      	str	r0, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   192c8:	23f7      	movs	r3, #247	; 0xf7
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	22f4      	movs	r2, #244	; 0xf4
   192ce:	701a      	strb	r2, [r3, #0]
	tstrECPoint	Key;
	uint32 index = 0;
   192d0:	2300      	movs	r3, #0
   192d2:	22f0      	movs	r2, #240	; 0xf0
   192d4:	18ba      	adds	r2, r7, r2
   192d6:	6013      	str	r3, [r2, #0]
	uint8 signature[80];
	uint8 hash[80] = {0};
   192d8:	230c      	movs	r3, #12
   192da:	18fb      	adds	r3, r7, r3
   192dc:	0018      	movs	r0, r3
   192de:	2350      	movs	r3, #80	; 0x50
   192e0:	001a      	movs	r2, r3
   192e2:	2100      	movs	r1, #0
   192e4:	4b34      	ldr	r3, [pc, #208]	; (193b8 <ecdsa_process_sign_verify_request+0xf8>)
   192e6:	4798      	blx	r3
	uint16 curve_type = 0;
   192e8:	230a      	movs	r3, #10
   192ea:	18fb      	adds	r3, r7, r3
   192ec:	2200      	movs	r2, #0
   192ee:	801a      	strh	r2, [r3, #0]
	
	for(index = 0; index < number_of_signatures; index++)
   192f0:	2300      	movs	r3, #0
   192f2:	22f0      	movs	r2, #240	; 0xf0
   192f4:	18ba      	adds	r2, r7, r2
   192f6:	6013      	str	r3, [r2, #0]
   192f8:	e04f      	b.n	1939a <ecdsa_process_sign_verify_request+0xda>
	{
		status = m2m_ssl_retrieve_cert(&curve_type, hash, signature, &Key);
   192fa:	23f7      	movs	r3, #247	; 0xf7
   192fc:	18fc      	adds	r4, r7, r3
   192fe:	23ac      	movs	r3, #172	; 0xac
   19300:	18fb      	adds	r3, r7, r3
   19302:	225c      	movs	r2, #92	; 0x5c
   19304:	18ba      	adds	r2, r7, r2
   19306:	210c      	movs	r1, #12
   19308:	1879      	adds	r1, r7, r1
   1930a:	200a      	movs	r0, #10
   1930c:	1838      	adds	r0, r7, r0
   1930e:	4d2b      	ldr	r5, [pc, #172]	; (193bc <ecdsa_process_sign_verify_request+0xfc>)
   19310:	47a8      	blx	r5
   19312:	0003      	movs	r3, r0
   19314:	7023      	strb	r3, [r4, #0]
		if (status != M2M_SUCCESS)
   19316:	23f7      	movs	r3, #247	; 0xf7
   19318:	18fb      	adds	r3, r7, r3
   1931a:	781b      	ldrb	r3, [r3, #0]
   1931c:	b25b      	sxtb	r3, r3
   1931e:	2b00      	cmp	r3, #0
   19320:	d017      	beq.n	19352 <ecdsa_process_sign_verify_request+0x92>
		{
			M2M_ERR("m2m_ssl_retrieve_cert() failed with ret=%d", status);
   19322:	23c6      	movs	r3, #198	; 0xc6
   19324:	009a      	lsls	r2, r3, #2
   19326:	4926      	ldr	r1, [pc, #152]	; (193c0 <ecdsa_process_sign_verify_request+0x100>)
   19328:	4b26      	ldr	r3, [pc, #152]	; (193c4 <ecdsa_process_sign_verify_request+0x104>)
   1932a:	0018      	movs	r0, r3
   1932c:	4b26      	ldr	r3, [pc, #152]	; (193c8 <ecdsa_process_sign_verify_request+0x108>)
   1932e:	4798      	blx	r3
   19330:	23f7      	movs	r3, #247	; 0xf7
   19332:	18fb      	adds	r3, r7, r3
   19334:	2200      	movs	r2, #0
   19336:	569a      	ldrsb	r2, [r3, r2]
   19338:	4b24      	ldr	r3, [pc, #144]	; (193cc <ecdsa_process_sign_verify_request+0x10c>)
   1933a:	0011      	movs	r1, r2
   1933c:	0018      	movs	r0, r3
   1933e:	4b22      	ldr	r3, [pc, #136]	; (193c8 <ecdsa_process_sign_verify_request+0x108>)
   19340:	4798      	blx	r3
   19342:	200d      	movs	r0, #13
   19344:	4b22      	ldr	r3, [pc, #136]	; (193d0 <ecdsa_process_sign_verify_request+0x110>)
   19346:	4798      	blx	r3
			return status;
   19348:	23f7      	movs	r3, #247	; 0xf7
   1934a:	18fb      	adds	r3, r7, r3
   1934c:	781b      	ldrb	r3, [r3, #0]
   1934e:	b25b      	sxtb	r3, r3
   19350:	e02d      	b.n	193ae <ecdsa_process_sign_verify_request+0xee>
		}

		if(curve_type == EC_SECP256R1)
   19352:	230a      	movs	r3, #10
   19354:	18fb      	adds	r3, r7, r3
   19356:	881b      	ldrh	r3, [r3, #0]
   19358:	2b17      	cmp	r3, #23
   1935a:	d117      	bne.n	1938c <ecdsa_process_sign_verify_request+0xcc>
		{
			bool is_verified = false;
   1935c:	2309      	movs	r3, #9
   1935e:	18fb      	adds	r3, r7, r3
   19360:	2200      	movs	r2, #0
   19362:	701a      	strb	r2, [r3, #0]
			status = atcatls_verify(hash, signature, Key.X, &is_verified);
   19364:	2309      	movs	r3, #9
   19366:	18fb      	adds	r3, r7, r3
   19368:	22ac      	movs	r2, #172	; 0xac
   1936a:	18ba      	adds	r2, r7, r2
   1936c:	215c      	movs	r1, #92	; 0x5c
   1936e:	1879      	adds	r1, r7, r1
   19370:	200c      	movs	r0, #12
   19372:	1838      	adds	r0, r7, r0
   19374:	4c17      	ldr	r4, [pc, #92]	; (193d4 <ecdsa_process_sign_verify_request+0x114>)
   19376:	47a0      	blx	r4
   19378:	0003      	movs	r3, r0
   1937a:	001a      	movs	r2, r3
   1937c:	23f7      	movs	r3, #247	; 0xf7
   1937e:	18fb      	adds	r3, r7, r3
   19380:	701a      	strb	r2, [r3, #0]
			status = M2M_SUCCESS;
   19382:	23f7      	movs	r3, #247	; 0xf7
   19384:	18fb      	adds	r3, r7, r3
   19386:	2200      	movs	r2, #0
   19388:	701a      	strb	r2, [r3, #0]
   1938a:	e00c      	b.n	193a6 <ecdsa_process_sign_verify_request+0xe6>
	for(index = 0; index < number_of_signatures; index++)
   1938c:	23f0      	movs	r3, #240	; 0xf0
   1938e:	18fb      	adds	r3, r7, r3
   19390:	681b      	ldr	r3, [r3, #0]
   19392:	3301      	adds	r3, #1
   19394:	22f0      	movs	r2, #240	; 0xf0
   19396:	18ba      	adds	r2, r7, r2
   19398:	6013      	str	r3, [r2, #0]
   1939a:	23f0      	movs	r3, #240	; 0xf0
   1939c:	18fb      	adds	r3, r7, r3
   1939e:	681a      	ldr	r2, [r3, #0]
   193a0:	687b      	ldr	r3, [r7, #4]
   193a2:	429a      	cmp	r2, r3
   193a4:	d3a9      	bcc.n	192fa <ecdsa_process_sign_verify_request+0x3a>
				m2m_ssl_stop_processing_certs();
				break;
			}
		}
	}
	return status;
   193a6:	23f7      	movs	r3, #247	; 0xf7
   193a8:	18fb      	adds	r3, r7, r3
   193aa:	781b      	ldrb	r3, [r3, #0]
   193ac:	b25b      	sxtb	r3, r3
}
   193ae:	0018      	movs	r0, r3
   193b0:	46bd      	mov	sp, r7
   193b2:	b03e      	add	sp, #248	; 0xf8
   193b4:	bdb0      	pop	{r4, r5, r7, pc}
   193b6:	46c0      	nop			; (mov r8, r8)
   193b8:	0001baed 	.word	0x0001baed
   193bc:	00001a3d 	.word	0x00001a3d
   193c0:	0001f35c 	.word	0x0001f35c
   193c4:	0001f0fc 	.word	0x0001f0fc
   193c8:	0001bc4d 	.word	0x0001bc4d
   193cc:	0001f110 	.word	0x0001f110
   193d0:	0001bc81 	.word	0x0001bc81
   193d4:	0000f621 	.word	0x0000f621

000193d8 <ecdsa_process_sign_gen_request>:

static sint8 ecdsa_process_sign_gen_request(tstrEcdsaSignReqInfo *sign_request,
uint8 *signature,
uint16 *signature_size)
{
   193d8:	b590      	push	{r4, r7, lr}
   193da:	b08f      	sub	sp, #60	; 0x3c
   193dc:	af00      	add	r7, sp, #0
   193de:	60f8      	str	r0, [r7, #12]
   193e0:	60b9      	str	r1, [r7, #8]
   193e2:	607a      	str	r2, [r7, #4]
	sint8 status = M2M_ERR_FAIL;
   193e4:	2337      	movs	r3, #55	; 0x37
   193e6:	18fb      	adds	r3, r7, r3
   193e8:	22f4      	movs	r2, #244	; 0xf4
   193ea:	701a      	strb	r2, [r3, #0]
	uint8 hash[32];
	
	status = m2m_ssl_retrieve_hash(hash, sign_request->u16HashSz);
   193ec:	68fb      	ldr	r3, [r7, #12]
   193ee:	885a      	ldrh	r2, [r3, #2]
   193f0:	2337      	movs	r3, #55	; 0x37
   193f2:	18fc      	adds	r4, r7, r3
   193f4:	2314      	movs	r3, #20
   193f6:	18fb      	adds	r3, r7, r3
   193f8:	0011      	movs	r1, r2
   193fa:	0018      	movs	r0, r3
   193fc:	4b1d      	ldr	r3, [pc, #116]	; (19474 <ecdsa_process_sign_gen_request+0x9c>)
   193fe:	4798      	blx	r3
   19400:	0003      	movs	r3, r0
   19402:	7023      	strb	r3, [r4, #0]
	if (status != M2M_SUCCESS)
   19404:	2337      	movs	r3, #55	; 0x37
   19406:	18fb      	adds	r3, r7, r3
   19408:	781b      	ldrb	r3, [r3, #0]
   1940a:	b25b      	sxtb	r3, r3
   1940c:	2b00      	cmp	r3, #0
   1940e:	d016      	beq.n	1943e <ecdsa_process_sign_gen_request+0x66>
	{
		M2M_ERR("m2m_ssl_retrieve_hash() failed with ret=%d", status);
   19410:	4a19      	ldr	r2, [pc, #100]	; (19478 <ecdsa_process_sign_gen_request+0xa0>)
   19412:	491a      	ldr	r1, [pc, #104]	; (1947c <ecdsa_process_sign_gen_request+0xa4>)
   19414:	4b1a      	ldr	r3, [pc, #104]	; (19480 <ecdsa_process_sign_gen_request+0xa8>)
   19416:	0018      	movs	r0, r3
   19418:	4b1a      	ldr	r3, [pc, #104]	; (19484 <ecdsa_process_sign_gen_request+0xac>)
   1941a:	4798      	blx	r3
   1941c:	2337      	movs	r3, #55	; 0x37
   1941e:	18fb      	adds	r3, r7, r3
   19420:	2200      	movs	r2, #0
   19422:	569a      	ldrsb	r2, [r3, r2]
   19424:	4b18      	ldr	r3, [pc, #96]	; (19488 <ecdsa_process_sign_gen_request+0xb0>)
   19426:	0011      	movs	r1, r2
   19428:	0018      	movs	r0, r3
   1942a:	4b16      	ldr	r3, [pc, #88]	; (19484 <ecdsa_process_sign_gen_request+0xac>)
   1942c:	4798      	blx	r3
   1942e:	200d      	movs	r0, #13
   19430:	4b16      	ldr	r3, [pc, #88]	; (1948c <ecdsa_process_sign_gen_request+0xb4>)
   19432:	4798      	blx	r3
		return status;
   19434:	2337      	movs	r3, #55	; 0x37
   19436:	18fb      	adds	r3, r7, r3
   19438:	781b      	ldrb	r3, [r3, #0]
   1943a:	b25b      	sxtb	r3, r3
   1943c:	e016      	b.n	1946c <ecdsa_process_sign_gen_request+0x94>
	}

	if(sign_request->u16CurveType == EC_SECP256R1)
   1943e:	68fb      	ldr	r3, [r7, #12]
   19440:	881b      	ldrh	r3, [r3, #0]
   19442:	2b17      	cmp	r3, #23
   19444:	d10e      	bne.n	19464 <ecdsa_process_sign_gen_request+0x8c>
	{
		*signature_size = 64;
   19446:	687b      	ldr	r3, [r7, #4]
   19448:	2240      	movs	r2, #64	; 0x40
   1944a:	801a      	strh	r2, [r3, #0]
		status = atcatls_sign(DEVICE_KEY_SLOT, hash, signature);
   1944c:	68ba      	ldr	r2, [r7, #8]
   1944e:	2314      	movs	r3, #20
   19450:	18fb      	adds	r3, r7, r3
   19452:	0019      	movs	r1, r3
   19454:	2000      	movs	r0, #0
   19456:	4b0e      	ldr	r3, [pc, #56]	; (19490 <ecdsa_process_sign_gen_request+0xb8>)
   19458:	4798      	blx	r3
   1945a:	0003      	movs	r3, r0
   1945c:	001a      	movs	r2, r3
   1945e:	2337      	movs	r3, #55	; 0x37
   19460:	18fb      	adds	r3, r7, r3
   19462:	701a      	strb	r2, [r3, #0]
	}

	return status;
   19464:	2337      	movs	r3, #55	; 0x37
   19466:	18fb      	adds	r3, r7, r3
   19468:	781b      	ldrb	r3, [r3, #0]
   1946a:	b25b      	sxtb	r3, r3
}
   1946c:	0018      	movs	r0, r3
   1946e:	46bd      	mov	sp, r7
   19470:	b00f      	add	sp, #60	; 0x3c
   19472:	bd90      	pop	{r4, r7, pc}
   19474:	00001c41 	.word	0x00001c41
   19478:	00000343 	.word	0x00000343
   1947c:	0001f380 	.word	0x0001f380
   19480:	0001f0fc 	.word	0x0001f0fc
   19484:	0001bc4d 	.word	0x0001bc4d
   19488:	0001f13c 	.word	0x0001f13c
   1948c:	0001bc81 	.word	0x0001bc81
   19490:	0000f5c5 	.word	0x0000f5c5

00019494 <ecdh_derive_server_shared_secret>:

static sint8 ecdh_derive_server_shared_secret(uint16 private_key_id,
tstrECPoint *client_public_key,
uint8 *ecdh_shared_secret)
{
   19494:	b590      	push	{r4, r7, lr}
   19496:	b087      	sub	sp, #28
   19498:	af00      	add	r7, sp, #0
   1949a:	60b9      	str	r1, [r7, #8]
   1949c:	607a      	str	r2, [r7, #4]
   1949e:	230e      	movs	r3, #14
   194a0:	18fb      	adds	r3, r7, r3
   194a2:	1c02      	adds	r2, r0, #0
   194a4:	801a      	strh	r2, [r3, #0]
	uint16 key_slot	= private_key_id;
   194a6:	2314      	movs	r3, #20
   194a8:	18fb      	adds	r3, r7, r3
   194aa:	220e      	movs	r2, #14
   194ac:	18ba      	adds	r2, r7, r2
   194ae:	8812      	ldrh	r2, [r2, #0]
   194b0:	801a      	strh	r2, [r3, #0]
	sint8 status = M2M_ERR_FAIL;
   194b2:	2317      	movs	r3, #23
   194b4:	18fb      	adds	r3, r7, r3
   194b6:	22f4      	movs	r2, #244	; 0xf4
   194b8:	701a      	strb	r2, [r3, #0]
	uint8 atca_status = ATCA_STATUS_UNKNOWN;
   194ba:	2313      	movs	r3, #19
   194bc:	18fb      	adds	r3, r7, r3
   194be:	22d5      	movs	r2, #213	; 0xd5
   194c0:	701a      	strb	r2, [r3, #0]

	atca_status = atcab_ecdh(key_slot, client_public_key->X, ecdh_shared_secret);
   194c2:	68b9      	ldr	r1, [r7, #8]
   194c4:	2313      	movs	r3, #19
   194c6:	18fc      	adds	r4, r7, r3
   194c8:	687a      	ldr	r2, [r7, #4]
   194ca:	2314      	movs	r3, #20
   194cc:	18fb      	adds	r3, r7, r3
   194ce:	881b      	ldrh	r3, [r3, #0]
   194d0:	0018      	movs	r0, r3
   194d2:	4b13      	ldr	r3, [pc, #76]	; (19520 <ecdh_derive_server_shared_secret+0x8c>)
   194d4:	4798      	blx	r3
   194d6:	0003      	movs	r3, r0
   194d8:	7023      	strb	r3, [r4, #0]
	if(atca_status == ATCA_SUCCESS)
   194da:	2313      	movs	r3, #19
   194dc:	18fb      	adds	r3, r7, r3
   194de:	781b      	ldrb	r3, [r3, #0]
   194e0:	2b00      	cmp	r3, #0
   194e2:	d104      	bne.n	194ee <ecdh_derive_server_shared_secret+0x5a>
	{
		status = M2M_SUCCESS;
   194e4:	2317      	movs	r3, #23
   194e6:	18fb      	adds	r3, r7, r3
   194e8:	2200      	movs	r2, #0
   194ea:	701a      	strb	r2, [r3, #0]
   194ec:	e010      	b.n	19510 <ecdh_derive_server_shared_secret+0x7c>
	}
	else
	{
		M2M_INFO("__SLOT = %u, Err = %X\n", key_slot, atca_status);
   194ee:	4b0d      	ldr	r3, [pc, #52]	; (19524 <ecdh_derive_server_shared_secret+0x90>)
   194f0:	0018      	movs	r0, r3
   194f2:	4b0d      	ldr	r3, [pc, #52]	; (19528 <ecdh_derive_server_shared_secret+0x94>)
   194f4:	4798      	blx	r3
   194f6:	2314      	movs	r3, #20
   194f8:	18fb      	adds	r3, r7, r3
   194fa:	8819      	ldrh	r1, [r3, #0]
   194fc:	2313      	movs	r3, #19
   194fe:	18fb      	adds	r3, r7, r3
   19500:	781a      	ldrb	r2, [r3, #0]
   19502:	4b0a      	ldr	r3, [pc, #40]	; (1952c <ecdh_derive_server_shared_secret+0x98>)
   19504:	0018      	movs	r0, r3
   19506:	4b08      	ldr	r3, [pc, #32]	; (19528 <ecdh_derive_server_shared_secret+0x94>)
   19508:	4798      	blx	r3
   1950a:	200d      	movs	r0, #13
   1950c:	4b08      	ldr	r3, [pc, #32]	; (19530 <ecdh_derive_server_shared_secret+0x9c>)
   1950e:	4798      	blx	r3
	}
	
	return status;
   19510:	2317      	movs	r3, #23
   19512:	18fb      	adds	r3, r7, r3
   19514:	781b      	ldrb	r3, [r3, #0]
   19516:	b25b      	sxtb	r3, r3
}
   19518:	0018      	movs	r0, r3
   1951a:	46bd      	mov	sp, r7
   1951c:	b007      	add	sp, #28
   1951e:	bd90      	pop	{r4, r7, pc}
   19520:	0000e3a9 	.word	0x0000e3a9
   19524:	0001eea0 	.word	0x0001eea0
   19528:	0001bc4d 	.word	0x0001bc4d
   1952c:	0001f168 	.word	0x0001f168
   19530:	0001bc81 	.word	0x0001bc81

00019534 <eccProcessREQ>:

static void eccProcessREQ(tstrEccReqInfo *ecc_request)
{
   19534:	b580      	push	{r7, lr}
   19536:	b0b4      	sub	sp, #208	; 0xd0
   19538:	af00      	add	r7, sp, #0
   1953a:	6078      	str	r0, [r7, #4]
	tstrEccReqInfo ecc_response;
	uint8 signature[80];
	uint16 response_data_size = 0;
   1953c:	230a      	movs	r3, #10
   1953e:	18fb      	adds	r3, r7, r3
   19540:	2200      	movs	r2, #0
   19542:	801a      	strh	r2, [r3, #0]
	uint8 *response_data_buffer = NULL;
   19544:	2300      	movs	r3, #0
   19546:	22cc      	movs	r2, #204	; 0xcc
   19548:	18ba      	adds	r2, r7, r2
   1954a:	6013      	str	r3, [r2, #0]
	
	ecc_response.u16Status = 1;
   1954c:	235c      	movs	r3, #92	; 0x5c
   1954e:	18fb      	adds	r3, r7, r3
   19550:	2201      	movs	r2, #1
   19552:	805a      	strh	r2, [r3, #2]

	switch (ecc_request->u16REQ)
   19554:	687b      	ldr	r3, [r7, #4]
   19556:	881b      	ldrh	r3, [r3, #0]
   19558:	2b05      	cmp	r3, #5
   1955a:	d854      	bhi.n	19606 <eccProcessREQ+0xd2>
   1955c:	009a      	lsls	r2, r3, #2
   1955e:	4b3a      	ldr	r3, [pc, #232]	; (19648 <eccProcessREQ+0x114>)
   19560:	18d3      	adds	r3, r2, r3
   19562:	681b      	ldr	r3, [r3, #0]
   19564:	469f      	mov	pc, r3
	{
		case ECC_REQ_CLIENT_ECDH:
		ecc_response.u16Status = ecdh_derive_client_shared_secret(&(ecc_request->strEcdhREQ.strPubKey),
   19566:	687b      	ldr	r3, [r7, #4]
   19568:	330c      	adds	r3, #12
   1956a:	0018      	movs	r0, r3
   1956c:	235c      	movs	r3, #92	; 0x5c
   1956e:	18fb      	adds	r3, r7, r3
   19570:	330c      	adds	r3, #12
   19572:	001a      	movs	r2, r3
   19574:	235c      	movs	r3, #92	; 0x5c
   19576:	18fb      	adds	r3, r7, r3
   19578:	3350      	adds	r3, #80	; 0x50
   1957a:	0019      	movs	r1, r3
   1957c:	4b33      	ldr	r3, [pc, #204]	; (1964c <eccProcessREQ+0x118>)
   1957e:	4798      	blx	r3
   19580:	0003      	movs	r3, r0
   19582:	b29a      	uxth	r2, r3
   19584:	235c      	movs	r3, #92	; 0x5c
   19586:	18fb      	adds	r3, r7, r3
   19588:	805a      	strh	r2, [r3, #2]
		ecc_response.strEcdhREQ.au8Key,
		&ecc_response.strEcdhREQ.strPubKey);
		break;
   1958a:	e03d      	b.n	19608 <eccProcessREQ+0xd4>

		case ECC_REQ_GEN_KEY:
		ecc_response.u16Status = ecdh_derive_key_pair(&ecc_response.strEcdhREQ.strPubKey);
   1958c:	235c      	movs	r3, #92	; 0x5c
   1958e:	18fb      	adds	r3, r7, r3
   19590:	330c      	adds	r3, #12
   19592:	0018      	movs	r0, r3
   19594:	4b2e      	ldr	r3, [pc, #184]	; (19650 <eccProcessREQ+0x11c>)
   19596:	4798      	blx	r3
   19598:	0003      	movs	r3, r0
   1959a:	b29a      	uxth	r2, r3
   1959c:	235c      	movs	r3, #92	; 0x5c
   1959e:	18fb      	adds	r3, r7, r3
   195a0:	805a      	strh	r2, [r3, #2]
		break;
   195a2:	e031      	b.n	19608 <eccProcessREQ+0xd4>

		case ECC_REQ_SERVER_ECDH:
		ecc_response.u16Status = ecdh_derive_server_shared_secret(ecc_request->strEcdhREQ.strPubKey.u16PrivKeyID,
   195a4:	687b      	ldr	r3, [r7, #4]
   195a6:	224e      	movs	r2, #78	; 0x4e
   195a8:	5a98      	ldrh	r0, [r3, r2]
   195aa:	687b      	ldr	r3, [r7, #4]
   195ac:	330c      	adds	r3, #12
   195ae:	0019      	movs	r1, r3
   195b0:	235c      	movs	r3, #92	; 0x5c
   195b2:	18fb      	adds	r3, r7, r3
   195b4:	3350      	adds	r3, #80	; 0x50
   195b6:	001a      	movs	r2, r3
   195b8:	4b26      	ldr	r3, [pc, #152]	; (19654 <eccProcessREQ+0x120>)
   195ba:	4798      	blx	r3
   195bc:	0003      	movs	r3, r0
   195be:	b29a      	uxth	r2, r3
   195c0:	235c      	movs	r3, #92	; 0x5c
   195c2:	18fb      	adds	r3, r7, r3
   195c4:	805a      	strh	r2, [r3, #2]
		&(ecc_request->strEcdhREQ.strPubKey),
		ecc_response.strEcdhREQ.au8Key);
		break;
   195c6:	e01f      	b.n	19608 <eccProcessREQ+0xd4>
		
		case ECC_REQ_SIGN_VERIFY:
		ecc_response.u16Status = ecdsa_process_sign_verify_request(ecc_request->strEcdsaVerifyREQ.u32nSig);
   195c8:	687b      	ldr	r3, [r7, #4]
   195ca:	68db      	ldr	r3, [r3, #12]
   195cc:	0018      	movs	r0, r3
   195ce:	4b22      	ldr	r3, [pc, #136]	; (19658 <eccProcessREQ+0x124>)
   195d0:	4798      	blx	r3
   195d2:	0003      	movs	r3, r0
   195d4:	b29a      	uxth	r2, r3
   195d6:	235c      	movs	r3, #92	; 0x5c
   195d8:	18fb      	adds	r3, r7, r3
   195da:	805a      	strh	r2, [r3, #2]
		break;
   195dc:	e014      	b.n	19608 <eccProcessREQ+0xd4>
		
		case ECC_REQ_SIGN_GEN:
		ecc_response.u16Status = ecdsa_process_sign_gen_request(&(ecc_request->strEcdsaSignREQ), signature,
   195de:	687b      	ldr	r3, [r7, #4]
   195e0:	330c      	adds	r3, #12
   195e2:	220a      	movs	r2, #10
   195e4:	18ba      	adds	r2, r7, r2
   195e6:	210c      	movs	r1, #12
   195e8:	1879      	adds	r1, r7, r1
   195ea:	0018      	movs	r0, r3
   195ec:	4b1b      	ldr	r3, [pc, #108]	; (1965c <eccProcessREQ+0x128>)
   195ee:	4798      	blx	r3
   195f0:	0003      	movs	r3, r0
   195f2:	b29a      	uxth	r2, r3
   195f4:	235c      	movs	r3, #92	; 0x5c
   195f6:	18fb      	adds	r3, r7, r3
   195f8:	805a      	strh	r2, [r3, #2]
		&response_data_size);
		response_data_buffer = signature;
   195fa:	230c      	movs	r3, #12
   195fc:	18fb      	adds	r3, r7, r3
   195fe:	22cc      	movs	r2, #204	; 0xcc
   19600:	18ba      	adds	r2, r7, r2
   19602:	6013      	str	r3, [r2, #0]
		break;
   19604:	e000      	b.n	19608 <eccProcessREQ+0xd4>
		
		default:
		// Do nothing
		break;
   19606:	46c0      	nop			; (mov r8, r8)
	}
	
	ecc_response.u16REQ      = ecc_request->u16REQ;
   19608:	687b      	ldr	r3, [r7, #4]
   1960a:	881a      	ldrh	r2, [r3, #0]
   1960c:	235c      	movs	r3, #92	; 0x5c
   1960e:	18fb      	adds	r3, r7, r3
   19610:	801a      	strh	r2, [r3, #0]
	ecc_response.u32UserData = ecc_request->u32UserData;
   19612:	687b      	ldr	r3, [r7, #4]
   19614:	685a      	ldr	r2, [r3, #4]
   19616:	235c      	movs	r3, #92	; 0x5c
   19618:	18fb      	adds	r3, r7, r3
   1961a:	605a      	str	r2, [r3, #4]
	ecc_response.u32SeqNo    = ecc_request->u32SeqNo;
   1961c:	687b      	ldr	r3, [r7, #4]
   1961e:	689a      	ldr	r2, [r3, #8]
   19620:	235c      	movs	r3, #92	; 0x5c
   19622:	18fb      	adds	r3, r7, r3
   19624:	609a      	str	r2, [r3, #8]

	m2m_ssl_ecc_process_done();
   19626:	4b0e      	ldr	r3, [pc, #56]	; (19660 <eccProcessREQ+0x12c>)
   19628:	4798      	blx	r3
	m2m_ssl_handshake_rsp(&ecc_response, response_data_buffer, response_data_size);
   1962a:	230a      	movs	r3, #10
   1962c:	18fb      	adds	r3, r7, r3
   1962e:	881a      	ldrh	r2, [r3, #0]
   19630:	23cc      	movs	r3, #204	; 0xcc
   19632:	18fb      	adds	r3, r7, r3
   19634:	6819      	ldr	r1, [r3, #0]
   19636:	235c      	movs	r3, #92	; 0x5c
   19638:	18fb      	adds	r3, r7, r3
   1963a:	0018      	movs	r0, r3
   1963c:	4b09      	ldr	r3, [pc, #36]	; (19664 <eccProcessREQ+0x130>)
   1963e:	4798      	blx	r3
}
   19640:	46c0      	nop			; (mov r8, r8)
   19642:	46bd      	mov	sp, r7
   19644:	b034      	add	sp, #208	; 0xd0
   19646:	bd80      	pop	{r7, pc}
   19648:	0001f344 	.word	0x0001f344
   1964c:	000191b1 	.word	0x000191b1
   19650:	00019241 	.word	0x00019241
   19654:	00019495 	.word	0x00019495
   19658:	000192c1 	.word	0x000192c1
   1965c:	000193d9 	.word	0x000193d9
   19660:	00001cc5 	.word	0x00001cc5
   19664:	000019f1 	.word	0x000019f1

00019668 <ssl_cb>:



static void ssl_cb(uint8 u8MsgType, void * pvMsg)
{
   19668:	b580      	push	{r7, lr}
   1966a:	b084      	sub	sp, #16
   1966c:	af00      	add	r7, sp, #0
   1966e:	0002      	movs	r2, r0
   19670:	6039      	str	r1, [r7, #0]
   19672:	1dfb      	adds	r3, r7, #7
   19674:	701a      	strb	r2, [r3, #0]
	switch(u8MsgType)
   19676:	1dfb      	adds	r3, r7, #7
   19678:	781b      	ldrb	r3, [r3, #0]
   1967a:	2b01      	cmp	r3, #1
   1967c:	d002      	beq.n	19684 <ssl_cb+0x1c>
   1967e:	2b06      	cmp	r3, #6
   19680:	d007      	beq.n	19692 <ssl_cb+0x2a>
			tstrSslSetActiveCsList *pstrCsList = (tstrSslSetActiveCsList *)pvMsg;
			M2M_INFO("ActiveCS bitmap:%04x\n", pstrCsList->u32CsBMP);
		}
		break;
	}
}
   19682:	e017      	b.n	196b4 <ssl_cb+0x4c>
			tstrEccReqInfo *pstrEccREQ = (tstrEccReqInfo *)pvMsg;
   19684:	683b      	ldr	r3, [r7, #0]
   19686:	60fb      	str	r3, [r7, #12]
			eccProcessREQ(pstrEccREQ);
   19688:	68fb      	ldr	r3, [r7, #12]
   1968a:	0018      	movs	r0, r3
   1968c:	4b0b      	ldr	r3, [pc, #44]	; (196bc <ssl_cb+0x54>)
   1968e:	4798      	blx	r3
		break;
   19690:	e010      	b.n	196b4 <ssl_cb+0x4c>
			tstrSslSetActiveCsList *pstrCsList = (tstrSslSetActiveCsList *)pvMsg;
   19692:	683b      	ldr	r3, [r7, #0]
   19694:	60bb      	str	r3, [r7, #8]
			M2M_INFO("ActiveCS bitmap:%04x\n", pstrCsList->u32CsBMP);
   19696:	4b0a      	ldr	r3, [pc, #40]	; (196c0 <ssl_cb+0x58>)
   19698:	0018      	movs	r0, r3
   1969a:	4b0a      	ldr	r3, [pc, #40]	; (196c4 <ssl_cb+0x5c>)
   1969c:	4798      	blx	r3
   1969e:	68bb      	ldr	r3, [r7, #8]
   196a0:	681a      	ldr	r2, [r3, #0]
   196a2:	4b09      	ldr	r3, [pc, #36]	; (196c8 <ssl_cb+0x60>)
   196a4:	0011      	movs	r1, r2
   196a6:	0018      	movs	r0, r3
   196a8:	4b06      	ldr	r3, [pc, #24]	; (196c4 <ssl_cb+0x5c>)
   196aa:	4798      	blx	r3
   196ac:	200d      	movs	r0, #13
   196ae:	4b07      	ldr	r3, [pc, #28]	; (196cc <ssl_cb+0x64>)
   196b0:	4798      	blx	r3
		break;
   196b2:	46c0      	nop			; (mov r8, r8)
}
   196b4:	46c0      	nop			; (mov r8, r8)
   196b6:	46bd      	mov	sp, r7
   196b8:	b004      	add	sp, #16
   196ba:	bd80      	pop	{r7, pc}
   196bc:	00019535 	.word	0x00019535
   196c0:	0001eea0 	.word	0x0001eea0
   196c4:	0001bc4d 	.word	0x0001bc4d
   196c8:	0001f180 	.word	0x0001f180
   196cc:	0001bc81 	.word	0x0001bc81

000196d0 <cryptoauthlib_init>:
 *
 * \return  The status of the CryptoAuthLib initialization
 *            ATCA_SUCCESS - Returned on a successful CryptoAuthLib initialization
 */
ATCA_STATUS cryptoauthlib_init(void)
{
   196d0:	b590      	push	{r4, r7, lr}
   196d2:	b083      	sub	sp, #12
   196d4:	af00      	add	r7, sp, #0
    ATCA_STATUS status = ATCA_NO_DEVICES;
   196d6:	1dfb      	adds	r3, r7, #7
   196d8:	22f9      	movs	r2, #249	; 0xf9
   196da:	701a      	strb	r2, [r3, #0]
    bool device_locked = false;
   196dc:	1dbb      	adds	r3, r7, #6
   196de:	2200      	movs	r2, #0
   196e0:	701a      	strb	r2, [r3, #0]
    uint8_t revision[INFO_SIZE];
    
    // Initialize the CryptoAuthLib library
    cfg_ateccx08a_i2c_default.atcai2c.slave_address = AWS_ECC508A_I2C_ADDRESS;
   196e2:	4b1e      	ldr	r3, [pc, #120]	; (1975c <cryptoauthlib_init+0x8c>)
   196e4:	22b0      	movs	r2, #176	; 0xb0
   196e6:	711a      	strb	r2, [r3, #4]
    
    do 
    {
        status = atcab_init(&cfg_ateccx08a_i2c_default);
   196e8:	1dfc      	adds	r4, r7, #7
   196ea:	4b1c      	ldr	r3, [pc, #112]	; (1975c <cryptoauthlib_init+0x8c>)
   196ec:	0018      	movs	r0, r3
   196ee:	4b1c      	ldr	r3, [pc, #112]	; (19760 <cryptoauthlib_init+0x90>)
   196f0:	4798      	blx	r3
   196f2:	0003      	movs	r3, r0
   196f4:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   196f6:	1dfb      	adds	r3, r7, #7
   196f8:	781b      	ldrb	r3, [r3, #0]
   196fa:	2b00      	cmp	r3, #0
   196fc:	d004      	beq.n	19708 <cryptoauthlib_init+0x38>
        {
            printf("The CryptoAuthLib library failed to initialize.");
   196fe:	4b19      	ldr	r3, [pc, #100]	; (19764 <cryptoauthlib_init+0x94>)
   19700:	0018      	movs	r0, r3
   19702:	4b19      	ldr	r3, [pc, #100]	; (19768 <cryptoauthlib_init+0x98>)
   19704:	4798      	blx	r3
            
            // Break the do/while loop
            break;
   19706:	e023      	b.n	19750 <cryptoauthlib_init+0x80>
        }

        // Force the ATECC508A to sleep
        atcab_wakeup();
   19708:	4b18      	ldr	r3, [pc, #96]	; (1976c <cryptoauthlib_init+0x9c>)
   1970a:	4798      	blx	r3
        atcab_sleep();
   1970c:	4b18      	ldr	r3, [pc, #96]	; (19770 <cryptoauthlib_init+0xa0>)
   1970e:	4798      	blx	r3
        
        // Check to make sure the ATECC508A Config zone is locked    
	    status = atcab_is_locked(LOCK_ZONE_CONFIG, &device_locked);
   19710:	1dfc      	adds	r4, r7, #7
   19712:	1dbb      	adds	r3, r7, #6
   19714:	0019      	movs	r1, r3
   19716:	2000      	movs	r0, #0
   19718:	4b16      	ldr	r3, [pc, #88]	; (19774 <cryptoauthlib_init+0xa4>)
   1971a:	4798      	blx	r3
   1971c:	0003      	movs	r3, r0
   1971e:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   19720:	1dfb      	adds	r3, r7, #7
   19722:	781b      	ldrb	r3, [r3, #0]
   19724:	2b00      	cmp	r3, #0
   19726:	d004      	beq.n	19732 <cryptoauthlib_init+0x62>
        {
            printf("The ATECC508A device is not configured correctly.");
   19728:	4b13      	ldr	r3, [pc, #76]	; (19778 <cryptoauthlib_init+0xa8>)
   1972a:	0018      	movs	r0, r3
   1972c:	4b0e      	ldr	r3, [pc, #56]	; (19768 <cryptoauthlib_init+0x98>)
   1972e:	4798      	blx	r3
            
            // Break the do/while loop
            break;
   19730:	e00e      	b.n	19750 <cryptoauthlib_init+0x80>
        }
		
		if(!device_locked)
   19732:	1dbb      	adds	r3, r7, #6
   19734:	781b      	ldrb	r3, [r3, #0]
   19736:	2201      	movs	r2, #1
   19738:	4053      	eors	r3, r2
   1973a:	b2db      	uxtb	r3, r3
   1973c:	2b00      	cmp	r3, #0
   1973e:	d004      	beq.n	1974a <cryptoauthlib_init+0x7a>
        {
	        printf("The ATECC508A device data zone is no configured. \r\n");
   19740:	4b0e      	ldr	r3, [pc, #56]	; (1977c <cryptoauthlib_init+0xac>)
   19742:	0018      	movs	r0, r3
   19744:	4b0e      	ldr	r3, [pc, #56]	; (19780 <cryptoauthlib_init+0xb0>)
   19746:	4798      	blx	r3
	        // Break the do/while loop
	        break;
   19748:	e002      	b.n	19750 <cryptoauthlib_init+0x80>
        }

		
        status = ATCA_SUCCESS;
   1974a:	1dfb      	adds	r3, r7, #7
   1974c:	2200      	movs	r2, #0
   1974e:	701a      	strb	r2, [r3, #0]
    } while (false);    
    
    return status;
   19750:	1dfb      	adds	r3, r7, #7
   19752:	781b      	ldrb	r3, [r3, #0]
}
   19754:	0018      	movs	r0, r3
   19756:	46bd      	mov	sp, r7
   19758:	b003      	add	sp, #12
   1975a:	bd90      	pop	{r4, r7, pc}
   1975c:	20000514 	.word	0x20000514
   19760:	0000d845 	.word	0x0000d845
   19764:	0001f198 	.word	0x0001f198
   19768:	0001bc4d 	.word	0x0001bc4d
   1976c:	0000d8e9 	.word	0x0000d8e9
   19770:	0000d949 	.word	0x0000d949
   19774:	0000e659 	.word	0x0000e659
   19778:	0001f1c8 	.word	0x0001f1c8
   1977c:	0001f1fc 	.word	0x0001f1fc
   19780:	0001bd69 	.word	0x0001bd69

00019784 <wifiCryptoInit>:

int wifiCryptoInit(void)
{	
   19784:	b590      	push	{r4, r7, lr}
   19786:	b08b      	sub	sp, #44	; 0x2c
   19788:	af02      	add	r7, sp, #8
	int8_t ret;
	ATCA_STATUS atca_status;


	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1978a:	1d3b      	adds	r3, r7, #4
   1978c:	2218      	movs	r2, #24
   1978e:	2100      	movs	r1, #0
   19790:	0018      	movs	r0, r3
   19792:	4b66      	ldr	r3, [pc, #408]	; (1992c <wifiCryptoInit+0x1a8>)
   19794:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   19796:	1d3b      	adds	r3, r7, #4
   19798:	4a65      	ldr	r2, [pc, #404]	; (19930 <wifiCryptoInit+0x1ac>)
   1979a:	601a      	str	r2, [r3, #0]

	// Initialize the WINC1500 
	ret = m2m_wifi_init(&param);
   1979c:	231f      	movs	r3, #31
   1979e:	18fc      	adds	r4, r7, r3
   197a0:	1d3b      	adds	r3, r7, #4
   197a2:	0018      	movs	r0, r3
   197a4:	4b63      	ldr	r3, [pc, #396]	; (19934 <wifiCryptoInit+0x1b0>)
   197a6:	4798      	blx	r3
   197a8:	0003      	movs	r3, r0
   197aa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   197ac:	231f      	movs	r3, #31
   197ae:	18fb      	adds	r3, r7, r3
   197b0:	781b      	ldrb	r3, [r3, #0]
   197b2:	b25b      	sxtb	r3, r3
   197b4:	2b00      	cmp	r3, #0
   197b6:	d009      	beq.n	197cc <wifiCryptoInit+0x48>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   197b8:	231f      	movs	r3, #31
   197ba:	18fb      	adds	r3, r7, r3
   197bc:	2200      	movs	r2, #0
   197be:	569a      	ldrsb	r2, [r3, r2]
   197c0:	4b5d      	ldr	r3, [pc, #372]	; (19938 <wifiCryptoInit+0x1b4>)
   197c2:	0011      	movs	r1, r2
   197c4:	0018      	movs	r0, r3
   197c6:	4b5d      	ldr	r3, [pc, #372]	; (1993c <wifiCryptoInit+0x1b8>)
   197c8:	4798      	blx	r3
		while (1) {
   197ca:	e7fe      	b.n	197ca <wifiCryptoInit+0x46>
		}
	}

	// Initialize the ECC608
	atca_status = cryptoauthlib_init();
   197cc:	231e      	movs	r3, #30
   197ce:	18fc      	adds	r4, r7, r3
   197d0:	4b5b      	ldr	r3, [pc, #364]	; (19940 <wifiCryptoInit+0x1bc>)
   197d2:	4798      	blx	r3
   197d4:	0003      	movs	r3, r0
   197d6:	7023      	strb	r3, [r4, #0]
	if (atca_status == ATCACERT_E_SUCCESS)
   197d8:	231e      	movs	r3, #30
   197da:	18fb      	adds	r3, r7, r3
   197dc:	781b      	ldrb	r3, [r3, #0]
   197de:	2b00      	cmp	r3, #0
   197e0:	d105      	bne.n	197ee <wifiCryptoInit+0x6a>
	{
		atca_status = eccPrintInfo();
   197e2:	4b58      	ldr	r3, [pc, #352]	; (19944 <wifiCryptoInit+0x1c0>)
   197e4:	4798      	blx	r3
   197e6:	0002      	movs	r2, r0
   197e8:	231e      	movs	r3, #30
   197ea:	18fb      	adds	r3, r7, r3
   197ec:	701a      	strb	r2, [r3, #0]
	}
	
	// Initialize the WINC1500 SSL module
	ret = m2m_ssl_init(ssl_cb);
   197ee:	231f      	movs	r3, #31
   197f0:	18fc      	adds	r4, r7, r3
   197f2:	4b55      	ldr	r3, [pc, #340]	; (19948 <wifiCryptoInit+0x1c4>)
   197f4:	0018      	movs	r0, r3
   197f6:	4b55      	ldr	r3, [pc, #340]	; (1994c <wifiCryptoInit+0x1c8>)
   197f8:	4798      	blx	r3
   197fa:	0003      	movs	r3, r0
   197fc:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS)
   197fe:	231f      	movs	r3, #31
   19800:	18fb      	adds	r3, r7, r3
   19802:	781b      	ldrb	r3, [r3, #0]
   19804:	b25b      	sxtb	r3, r3
   19806:	2b00      	cmp	r3, #0
   19808:	d009      	beq.n	1981e <wifiCryptoInit+0x9a>
	{
		printf("main: m2m_ssl_init call error!(%d)\r\n", ret);
   1980a:	231f      	movs	r3, #31
   1980c:	18fb      	adds	r3, r7, r3
   1980e:	2200      	movs	r2, #0
   19810:	569a      	ldrsb	r2, [r3, r2]
   19812:	4b4f      	ldr	r3, [pc, #316]	; (19950 <wifiCryptoInit+0x1cc>)
   19814:	0011      	movs	r1, r2
   19816:	0018      	movs	r0, r3
   19818:	4b48      	ldr	r3, [pc, #288]	; (1993c <wifiCryptoInit+0x1b8>)
   1981a:	4798      	blx	r3
		while (1) {
   1981c:	e7fe      	b.n	1981c <wifiCryptoInit+0x98>
		}
	}


	// Set the active WINC1500 TLS cipher suites to ECC only
	ret = m2m_ssl_set_active_ciphersuites(SSL_ECC_ONLY_CIPHERS);
   1981e:	231f      	movs	r3, #31
   19820:	18fc      	adds	r4, r7, r3
   19822:	23a0      	movs	r3, #160	; 0xa0
   19824:	021b      	lsls	r3, r3, #8
   19826:	0018      	movs	r0, r3
   19828:	4b4a      	ldr	r3, [pc, #296]	; (19954 <wifiCryptoInit+0x1d0>)
   1982a:	4798      	blx	r3
   1982c:	0003      	movs	r3, r0
   1982e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS)
   19830:	231f      	movs	r3, #31
   19832:	18fb      	adds	r3, r7, r3
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	b25b      	sxtb	r3, r3
   19838:	2b00      	cmp	r3, #0
   1983a:	d009      	beq.n	19850 <wifiCryptoInit+0xcc>
	{
		printf("main: m2m_ssl_set_active_ciphersuites call error!(%d)\r\n", ret);
   1983c:	231f      	movs	r3, #31
   1983e:	18fb      	adds	r3, r7, r3
   19840:	2200      	movs	r2, #0
   19842:	569a      	ldrsb	r2, [r3, r2]
   19844:	4b44      	ldr	r3, [pc, #272]	; (19958 <wifiCryptoInit+0x1d4>)
   19846:	0011      	movs	r1, r2
   19848:	0018      	movs	r0, r3
   1984a:	4b3c      	ldr	r3, [pc, #240]	; (1993c <wifiCryptoInit+0x1b8>)
   1984c:	4798      	blx	r3
		while (1) {
   1984e:	e7fe      	b.n	1984e <wifiCryptoInit+0xca>
		}
	}


	// Prepare the MQTT topic
	gAwsMqttClientId[20*2] = 0; // Add terminating null
   19850:	4b42      	ldr	r3, [pc, #264]	; (1995c <wifiCryptoInit+0x1d8>)
   19852:	2228      	movs	r2, #40	; 0x28
   19854:	2100      	movs	r1, #0
   19856:	5499      	strb	r1, [r3, r2]

	// Make the thing name the same as the MQTT client ID
	memcpy(g_thing_name, gAwsMqttClientId, min(sizeof(g_thing_name), sizeof(gAwsMqttClientId)));
   19858:	4a41      	ldr	r2, [pc, #260]	; (19960 <wifiCryptoInit+0x1dc>)
   1985a:	4b40      	ldr	r3, [pc, #256]	; (1995c <wifiCryptoInit+0x1d8>)
   1985c:	0010      	movs	r0, r2
   1985e:	0019      	movs	r1, r3
   19860:	2364      	movs	r3, #100	; 0x64
   19862:	001a      	movs	r2, r3
   19864:	4b3f      	ldr	r3, [pc, #252]	; (19964 <wifiCryptoInit+0x1e0>)
   19866:	4798      	blx	r3
	g_thing_name[sizeof(g_thing_name)-1] = 0; // Ensure a terminating null
   19868:	4b3d      	ldr	r3, [pc, #244]	; (19960 <wifiCryptoInit+0x1dc>)
   1986a:	2280      	movs	r2, #128	; 0x80
   1986c:	2100      	movs	r1, #0
   1986e:	5499      	strb	r1, [r3, r2]
	
	printf("Thing name = %s\r\n", g_thing_name);
   19870:	4a3b      	ldr	r2, [pc, #236]	; (19960 <wifiCryptoInit+0x1dc>)
   19872:	4b3d      	ldr	r3, [pc, #244]	; (19968 <wifiCryptoInit+0x1e4>)
   19874:	0011      	movs	r1, r2
   19876:	0018      	movs	r0, r3
   19878:	4b30      	ldr	r3, [pc, #192]	; (1993c <wifiCryptoInit+0x1b8>)
   1987a:	4798      	blx	r3

	//Generate MQTT Topic
	cloud_create_topic(gSubscribe_Channel, DEVICE_TYPE, gAwsMqttClientId, SUBSCRIBE_TOPIC);
   1987c:	4b3b      	ldr	r3, [pc, #236]	; (1996c <wifiCryptoInit+0x1e8>)
   1987e:	4a37      	ldr	r2, [pc, #220]	; (1995c <wifiCryptoInit+0x1d8>)
   19880:	493b      	ldr	r1, [pc, #236]	; (19970 <wifiCryptoInit+0x1ec>)
   19882:	483c      	ldr	r0, [pc, #240]	; (19974 <wifiCryptoInit+0x1f0>)
   19884:	4c3c      	ldr	r4, [pc, #240]	; (19978 <wifiCryptoInit+0x1f4>)
   19886:	47a0      	blx	r4
	cloud_create_topic(gPublish_Channel, DEVICE_TYPE, gAwsMqttClientId, SUBSCRIBE_TOPIC);
   19888:	4b38      	ldr	r3, [pc, #224]	; (1996c <wifiCryptoInit+0x1e8>)
   1988a:	4a34      	ldr	r2, [pc, #208]	; (1995c <wifiCryptoInit+0x1d8>)
   1988c:	4938      	ldr	r1, [pc, #224]	; (19970 <wifiCryptoInit+0x1ec>)
   1988e:	483b      	ldr	r0, [pc, #236]	; (1997c <wifiCryptoInit+0x1f8>)
   19890:	4c39      	ldr	r4, [pc, #228]	; (19978 <wifiCryptoInit+0x1f4>)
   19892:	47a0      	blx	r4
	DBG_LOG("gSubscribe_Channel: %s\r\n", gSubscribe_Channel);
   19894:	4b3a      	ldr	r3, [pc, #232]	; (19980 <wifiCryptoInit+0x1fc>)
   19896:	0018      	movs	r0, r3
   19898:	4b3a      	ldr	r3, [pc, #232]	; (19984 <wifiCryptoInit+0x200>)
   1989a:	4798      	blx	r3
   1989c:	4a35      	ldr	r2, [pc, #212]	; (19974 <wifiCryptoInit+0x1f0>)
   1989e:	4b3a      	ldr	r3, [pc, #232]	; (19988 <wifiCryptoInit+0x204>)
   198a0:	0011      	movs	r1, r2
   198a2:	0018      	movs	r0, r3
   198a4:	4b25      	ldr	r3, [pc, #148]	; (1993c <wifiCryptoInit+0x1b8>)
   198a6:	4798      	blx	r3
	DBG_LOG("gPublish_Channel: %s\r\n", gPublish_Channel);
   198a8:	4b35      	ldr	r3, [pc, #212]	; (19980 <wifiCryptoInit+0x1fc>)
   198aa:	0018      	movs	r0, r3
   198ac:	4b35      	ldr	r3, [pc, #212]	; (19984 <wifiCryptoInit+0x200>)
   198ae:	4798      	blx	r3
   198b0:	4a32      	ldr	r2, [pc, #200]	; (1997c <wifiCryptoInit+0x1f8>)
   198b2:	4b36      	ldr	r3, [pc, #216]	; (1998c <wifiCryptoInit+0x208>)
   198b4:	0011      	movs	r1, r2
   198b6:	0018      	movs	r0, r3
   198b8:	4b20      	ldr	r3, [pc, #128]	; (1993c <wifiCryptoInit+0x1b8>)
   198ba:	4798      	blx	r3

	//Set Wi-Fi AP credintials
	memcpy(gDefaultSSID, MAIN_WLAN_SSID, strlen(MAIN_WLAN_SSID));
   198bc:	4934      	ldr	r1, [pc, #208]	; (19990 <wifiCryptoInit+0x20c>)
   198be:	4b35      	ldr	r3, [pc, #212]	; (19994 <wifiCryptoInit+0x210>)
   198c0:	2207      	movs	r2, #7
   198c2:	0018      	movs	r0, r3
   198c4:	4b27      	ldr	r3, [pc, #156]	; (19964 <wifiCryptoInit+0x1e0>)
   198c6:	4798      	blx	r3
	memcpy(gDefaultKey, MAIN_WLAN_PSK, strlen(MAIN_WLAN_PSK));
   198c8:	4933      	ldr	r1, [pc, #204]	; (19998 <wifiCryptoInit+0x214>)
   198ca:	4b34      	ldr	r3, [pc, #208]	; (1999c <wifiCryptoInit+0x218>)
   198cc:	2209      	movs	r2, #9
   198ce:	0018      	movs	r0, r3
   198d0:	4b24      	ldr	r3, [pc, #144]	; (19964 <wifiCryptoInit+0x1e0>)
   198d2:	4798      	blx	r3
	gAuthType = MAIN_WLAN_AUTH;
   198d4:	4b32      	ldr	r3, [pc, #200]	; (199a0 <wifiCryptoInit+0x21c>)
   198d6:	2202      	movs	r2, #2
   198d8:	701a      	strb	r2, [r3, #0]
	gDefaultSSID[strlen(MAIN_WLAN_SSID)]=0;
   198da:	4b2e      	ldr	r3, [pc, #184]	; (19994 <wifiCryptoInit+0x210>)
   198dc:	2200      	movs	r2, #0
   198de:	71da      	strb	r2, [r3, #7]
	gDefaultKey[strlen(MAIN_WLAN_PSK)]=0;
   198e0:	4b2e      	ldr	r3, [pc, #184]	; (1999c <wifiCryptoInit+0x218>)
   198e2:	2200      	movs	r2, #0
   198e4:	725a      	strb	r2, [r3, #9]
	
	//register_env_sensor_udpate_callback_handler(EnvSensorCallbackHandler);
	register_env_sensor_udpate_callback_handler(MiWiSensorCallbackHandler);
   198e6:	4b2f      	ldr	r3, [pc, #188]	; (199a4 <wifiCryptoInit+0x220>)
   198e8:	0018      	movs	r0, r3
   198ea:	4b2f      	ldr	r3, [pc, #188]	; (199a8 <wifiCryptoInit+0x224>)
   198ec:	4798      	blx	r3

	DBG_LOG("connecting AP, ssid = %s , pwd= %s\n", (char *)gDefaultSSID,(char *)gDefaultKey);
   198ee:	4b24      	ldr	r3, [pc, #144]	; (19980 <wifiCryptoInit+0x1fc>)
   198f0:	0018      	movs	r0, r3
   198f2:	4b24      	ldr	r3, [pc, #144]	; (19984 <wifiCryptoInit+0x200>)
   198f4:	4798      	blx	r3
   198f6:	4a29      	ldr	r2, [pc, #164]	; (1999c <wifiCryptoInit+0x218>)
   198f8:	4926      	ldr	r1, [pc, #152]	; (19994 <wifiCryptoInit+0x210>)
   198fa:	4b2c      	ldr	r3, [pc, #176]	; (199ac <wifiCryptoInit+0x228>)
   198fc:	0018      	movs	r0, r3
   198fe:	4b0f      	ldr	r3, [pc, #60]	; (1993c <wifiCryptoInit+0x1b8>)
   19900:	4798      	blx	r3
	m2m_wifi_connect((char *)gDefaultSSID, strlen(gDefaultSSID), gAuthType, (char *)gDefaultKey, M2M_WIFI_CH_ALL);
   19902:	4b24      	ldr	r3, [pc, #144]	; (19994 <wifiCryptoInit+0x210>)
   19904:	0018      	movs	r0, r3
   19906:	4b2a      	ldr	r3, [pc, #168]	; (199b0 <wifiCryptoInit+0x22c>)
   19908:	4798      	blx	r3
   1990a:	0003      	movs	r3, r0
   1990c:	b2d9      	uxtb	r1, r3
   1990e:	4b24      	ldr	r3, [pc, #144]	; (199a0 <wifiCryptoInit+0x21c>)
   19910:	781a      	ldrb	r2, [r3, #0]
   19912:	4c22      	ldr	r4, [pc, #136]	; (1999c <wifiCryptoInit+0x218>)
   19914:	481f      	ldr	r0, [pc, #124]	; (19994 <wifiCryptoInit+0x210>)
   19916:	23ff      	movs	r3, #255	; 0xff
   19918:	9300      	str	r3, [sp, #0]
   1991a:	0023      	movs	r3, r4
   1991c:	4c25      	ldr	r4, [pc, #148]	; (199b4 <wifiCryptoInit+0x230>)
   1991e:	47a0      	blx	r4
}
   19920:	46c0      	nop			; (mov r8, r8)
   19922:	0018      	movs	r0, r3
   19924:	46bd      	mov	sp, r7
   19926:	b009      	add	sp, #36	; 0x24
   19928:	bd90      	pop	{r4, r7, pc}
   1992a:	46c0      	nop			; (mov r8, r8)
   1992c:	0001baed 	.word	0x0001baed
   19930:	0001908d 	.word	0x0001908d
   19934:	00002161 	.word	0x00002161
   19938:	0001f230 	.word	0x0001f230
   1993c:	0001bc4d 	.word	0x0001bc4d
   19940:	000196d1 	.word	0x000196d1
   19944:	00018fbd 	.word	0x00018fbd
   19948:	00019669 	.word	0x00019669
   1994c:	00001d25 	.word	0x00001d25
   19950:	0001f258 	.word	0x0001f258
   19954:	00001cd9 	.word	0x00001cd9
   19958:	0001f280 	.word	0x0001f280
   1995c:	200005c0 	.word	0x200005c0
   19960:	200026b0 	.word	0x200026b0
   19964:	0001bab7 	.word	0x0001bab7
   19968:	0001f2b8 	.word	0x0001f2b8
   1996c:	0001f2cc 	.word	0x0001f2cc
   19970:	0001edac 	.word	0x0001edac
   19974:	20001c24 	.word	0x20001c24
   19978:	0000cf89 	.word	0x0000cf89
   1997c:	20001af8 	.word	0x20001af8
   19980:	0001ee2c 	.word	0x0001ee2c
   19984:	0001bd69 	.word	0x0001bd69
   19988:	0001f2d8 	.word	0x0001f2d8
   1998c:	0001f2f4 	.word	0x0001f2f4
   19990:	0001f30c 	.word	0x0001f30c
   19994:	200017ec 	.word	0x200017ec
   19998:	0001f314 	.word	0x0001f314
   1999c:	20001810 	.word	0x20001810
   199a0:	2000180d 	.word	0x2000180d
   199a4:	00018a15 	.word	0x00018a15
   199a8:	000189f9 	.word	0x000189f9
   199ac:	0001f320 	.word	0x0001f320
   199b0:	0001c02f 	.word	0x0001c02f
   199b4:	00002369 	.word	0x00002369

000199b8 <floor>:
   199b8:	4a45      	ldr	r2, [pc, #276]	; (19ad0 <floor+0x118>)
   199ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199bc:	4657      	mov	r7, sl
   199be:	4692      	mov	sl, r2
   199c0:	004b      	lsls	r3, r1, #1
   199c2:	0d5b      	lsrs	r3, r3, #21
   199c4:	449a      	add	sl, r3
   199c6:	464e      	mov	r6, r9
   199c8:	4645      	mov	r5, r8
   199ca:	46de      	mov	lr, fp
   199cc:	4652      	mov	r2, sl
   199ce:	b5e0      	push	{r5, r6, r7, lr}
   199d0:	000c      	movs	r4, r1
   199d2:	0005      	movs	r5, r0
   199d4:	000e      	movs	r6, r1
   199d6:	4689      	mov	r9, r1
   199d8:	0007      	movs	r7, r0
   199da:	2a13      	cmp	r2, #19
   199dc:	dc22      	bgt.n	19a24 <floor+0x6c>
   199de:	2a00      	cmp	r2, #0
   199e0:	db47      	blt.n	19a72 <floor+0xba>
   199e2:	4652      	mov	r2, sl
   199e4:	4b3b      	ldr	r3, [pc, #236]	; (19ad4 <floor+0x11c>)
   199e6:	4113      	asrs	r3, r2
   199e8:	4698      	mov	r8, r3
   199ea:	000b      	movs	r3, r1
   199ec:	4642      	mov	r2, r8
   199ee:	4013      	ands	r3, r2
   199f0:	4303      	orrs	r3, r0
   199f2:	d011      	beq.n	19a18 <floor+0x60>
   199f4:	4a38      	ldr	r2, [pc, #224]	; (19ad8 <floor+0x120>)
   199f6:	4b39      	ldr	r3, [pc, #228]	; (19adc <floor+0x124>)
   199f8:	f000 fa54 	bl	19ea4 <__aeabi_dadd>
   199fc:	2200      	movs	r2, #0
   199fe:	2300      	movs	r3, #0
   19a00:	f000 fa12 	bl	19e28 <__aeabi_dcmpgt>
   19a04:	2800      	cmp	r0, #0
   19a06:	d005      	beq.n	19a14 <floor+0x5c>
   19a08:	2c00      	cmp	r4, #0
   19a0a:	db41      	blt.n	19a90 <floor+0xd8>
   19a0c:	464e      	mov	r6, r9
   19a0e:	4643      	mov	r3, r8
   19a10:	2700      	movs	r7, #0
   19a12:	439e      	bics	r6, r3
   19a14:	0038      	movs	r0, r7
   19a16:	0031      	movs	r1, r6
   19a18:	bc3c      	pop	{r2, r3, r4, r5}
   19a1a:	4690      	mov	r8, r2
   19a1c:	4699      	mov	r9, r3
   19a1e:	46a2      	mov	sl, r4
   19a20:	46ab      	mov	fp, r5
   19a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a24:	4652      	mov	r2, sl
   19a26:	2a33      	cmp	r2, #51	; 0x33
   19a28:	dd08      	ble.n	19a3c <floor+0x84>
   19a2a:	2380      	movs	r3, #128	; 0x80
   19a2c:	00db      	lsls	r3, r3, #3
   19a2e:	459a      	cmp	sl, r3
   19a30:	d1f2      	bne.n	19a18 <floor+0x60>
   19a32:	0002      	movs	r2, r0
   19a34:	000b      	movs	r3, r1
   19a36:	f000 fa35 	bl	19ea4 <__aeabi_dadd>
   19a3a:	e7ed      	b.n	19a18 <floor+0x60>
   19a3c:	4a28      	ldr	r2, [pc, #160]	; (19ae0 <floor+0x128>)
   19a3e:	4694      	mov	ip, r2
   19a40:	2201      	movs	r2, #1
   19a42:	4463      	add	r3, ip
   19a44:	4252      	negs	r2, r2
   19a46:	40da      	lsrs	r2, r3
   19a48:	4693      	mov	fp, r2
   19a4a:	4202      	tst	r2, r0
   19a4c:	d0e4      	beq.n	19a18 <floor+0x60>
   19a4e:	4a22      	ldr	r2, [pc, #136]	; (19ad8 <floor+0x120>)
   19a50:	4b22      	ldr	r3, [pc, #136]	; (19adc <floor+0x124>)
   19a52:	f000 fa27 	bl	19ea4 <__aeabi_dadd>
   19a56:	2200      	movs	r2, #0
   19a58:	2300      	movs	r3, #0
   19a5a:	f000 f9e5 	bl	19e28 <__aeabi_dcmpgt>
   19a5e:	2800      	cmp	r0, #0
   19a60:	d0d8      	beq.n	19a14 <floor+0x5c>
   19a62:	2c00      	cmp	r4, #0
   19a64:	db1a      	blt.n	19a9c <floor+0xe4>
   19a66:	465b      	mov	r3, fp
   19a68:	464e      	mov	r6, r9
   19a6a:	439f      	bics	r7, r3
   19a6c:	0038      	movs	r0, r7
   19a6e:	0031      	movs	r1, r6
   19a70:	e7d2      	b.n	19a18 <floor+0x60>
   19a72:	4a19      	ldr	r2, [pc, #100]	; (19ad8 <floor+0x120>)
   19a74:	4b19      	ldr	r3, [pc, #100]	; (19adc <floor+0x124>)
   19a76:	f000 fa15 	bl	19ea4 <__aeabi_dadd>
   19a7a:	2200      	movs	r2, #0
   19a7c:	2300      	movs	r3, #0
   19a7e:	f000 f9d3 	bl	19e28 <__aeabi_dcmpgt>
   19a82:	2800      	cmp	r0, #0
   19a84:	d0c6      	beq.n	19a14 <floor+0x5c>
   19a86:	2c00      	cmp	r4, #0
   19a88:	db16      	blt.n	19ab8 <floor+0x100>
   19a8a:	2700      	movs	r7, #0
   19a8c:	2600      	movs	r6, #0
   19a8e:	e7c1      	b.n	19a14 <floor+0x5c>
   19a90:	2380      	movs	r3, #128	; 0x80
   19a92:	4652      	mov	r2, sl
   19a94:	035b      	lsls	r3, r3, #13
   19a96:	4113      	asrs	r3, r2
   19a98:	4499      	add	r9, r3
   19a9a:	e7b7      	b.n	19a0c <floor+0x54>
   19a9c:	4653      	mov	r3, sl
   19a9e:	2b14      	cmp	r3, #20
   19aa0:	d012      	beq.n	19ac8 <floor+0x110>
   19aa2:	2334      	movs	r3, #52	; 0x34
   19aa4:	4652      	mov	r2, sl
   19aa6:	2701      	movs	r7, #1
   19aa8:	1a9b      	subs	r3, r3, r2
   19aaa:	409f      	lsls	r7, r3
   19aac:	197f      	adds	r7, r7, r5
   19aae:	42af      	cmp	r7, r5
   19ab0:	419b      	sbcs	r3, r3
   19ab2:	425b      	negs	r3, r3
   19ab4:	4499      	add	r9, r3
   19ab6:	e7d6      	b.n	19a66 <floor+0xae>
   19ab8:	0064      	lsls	r4, r4, #1
   19aba:	0864      	lsrs	r4, r4, #1
   19abc:	4325      	orrs	r5, r4
   19abe:	2700      	movs	r7, #0
   19ac0:	2d00      	cmp	r5, #0
   19ac2:	d0a7      	beq.n	19a14 <floor+0x5c>
   19ac4:	4e07      	ldr	r6, [pc, #28]	; (19ae4 <floor+0x12c>)
   19ac6:	e7a5      	b.n	19a14 <floor+0x5c>
   19ac8:	3b13      	subs	r3, #19
   19aca:	469c      	mov	ip, r3
   19acc:	44e1      	add	r9, ip
   19ace:	e7ca      	b.n	19a66 <floor+0xae>
   19ad0:	fffffc01 	.word	0xfffffc01
   19ad4:	000fffff 	.word	0x000fffff
   19ad8:	8800759c 	.word	0x8800759c
   19adc:	7e37e43c 	.word	0x7e37e43c
   19ae0:	fffffbed 	.word	0xfffffbed
   19ae4:	bff00000 	.word	0xbff00000

00019ae8 <__udivsi3>:
   19ae8:	2200      	movs	r2, #0
   19aea:	0843      	lsrs	r3, r0, #1
   19aec:	428b      	cmp	r3, r1
   19aee:	d374      	bcc.n	19bda <__udivsi3+0xf2>
   19af0:	0903      	lsrs	r3, r0, #4
   19af2:	428b      	cmp	r3, r1
   19af4:	d35f      	bcc.n	19bb6 <__udivsi3+0xce>
   19af6:	0a03      	lsrs	r3, r0, #8
   19af8:	428b      	cmp	r3, r1
   19afa:	d344      	bcc.n	19b86 <__udivsi3+0x9e>
   19afc:	0b03      	lsrs	r3, r0, #12
   19afe:	428b      	cmp	r3, r1
   19b00:	d328      	bcc.n	19b54 <__udivsi3+0x6c>
   19b02:	0c03      	lsrs	r3, r0, #16
   19b04:	428b      	cmp	r3, r1
   19b06:	d30d      	bcc.n	19b24 <__udivsi3+0x3c>
   19b08:	22ff      	movs	r2, #255	; 0xff
   19b0a:	0209      	lsls	r1, r1, #8
   19b0c:	ba12      	rev	r2, r2
   19b0e:	0c03      	lsrs	r3, r0, #16
   19b10:	428b      	cmp	r3, r1
   19b12:	d302      	bcc.n	19b1a <__udivsi3+0x32>
   19b14:	1212      	asrs	r2, r2, #8
   19b16:	0209      	lsls	r1, r1, #8
   19b18:	d065      	beq.n	19be6 <__udivsi3+0xfe>
   19b1a:	0b03      	lsrs	r3, r0, #12
   19b1c:	428b      	cmp	r3, r1
   19b1e:	d319      	bcc.n	19b54 <__udivsi3+0x6c>
   19b20:	e000      	b.n	19b24 <__udivsi3+0x3c>
   19b22:	0a09      	lsrs	r1, r1, #8
   19b24:	0bc3      	lsrs	r3, r0, #15
   19b26:	428b      	cmp	r3, r1
   19b28:	d301      	bcc.n	19b2e <__udivsi3+0x46>
   19b2a:	03cb      	lsls	r3, r1, #15
   19b2c:	1ac0      	subs	r0, r0, r3
   19b2e:	4152      	adcs	r2, r2
   19b30:	0b83      	lsrs	r3, r0, #14
   19b32:	428b      	cmp	r3, r1
   19b34:	d301      	bcc.n	19b3a <__udivsi3+0x52>
   19b36:	038b      	lsls	r3, r1, #14
   19b38:	1ac0      	subs	r0, r0, r3
   19b3a:	4152      	adcs	r2, r2
   19b3c:	0b43      	lsrs	r3, r0, #13
   19b3e:	428b      	cmp	r3, r1
   19b40:	d301      	bcc.n	19b46 <__udivsi3+0x5e>
   19b42:	034b      	lsls	r3, r1, #13
   19b44:	1ac0      	subs	r0, r0, r3
   19b46:	4152      	adcs	r2, r2
   19b48:	0b03      	lsrs	r3, r0, #12
   19b4a:	428b      	cmp	r3, r1
   19b4c:	d301      	bcc.n	19b52 <__udivsi3+0x6a>
   19b4e:	030b      	lsls	r3, r1, #12
   19b50:	1ac0      	subs	r0, r0, r3
   19b52:	4152      	adcs	r2, r2
   19b54:	0ac3      	lsrs	r3, r0, #11
   19b56:	428b      	cmp	r3, r1
   19b58:	d301      	bcc.n	19b5e <__udivsi3+0x76>
   19b5a:	02cb      	lsls	r3, r1, #11
   19b5c:	1ac0      	subs	r0, r0, r3
   19b5e:	4152      	adcs	r2, r2
   19b60:	0a83      	lsrs	r3, r0, #10
   19b62:	428b      	cmp	r3, r1
   19b64:	d301      	bcc.n	19b6a <__udivsi3+0x82>
   19b66:	028b      	lsls	r3, r1, #10
   19b68:	1ac0      	subs	r0, r0, r3
   19b6a:	4152      	adcs	r2, r2
   19b6c:	0a43      	lsrs	r3, r0, #9
   19b6e:	428b      	cmp	r3, r1
   19b70:	d301      	bcc.n	19b76 <__udivsi3+0x8e>
   19b72:	024b      	lsls	r3, r1, #9
   19b74:	1ac0      	subs	r0, r0, r3
   19b76:	4152      	adcs	r2, r2
   19b78:	0a03      	lsrs	r3, r0, #8
   19b7a:	428b      	cmp	r3, r1
   19b7c:	d301      	bcc.n	19b82 <__udivsi3+0x9a>
   19b7e:	020b      	lsls	r3, r1, #8
   19b80:	1ac0      	subs	r0, r0, r3
   19b82:	4152      	adcs	r2, r2
   19b84:	d2cd      	bcs.n	19b22 <__udivsi3+0x3a>
   19b86:	09c3      	lsrs	r3, r0, #7
   19b88:	428b      	cmp	r3, r1
   19b8a:	d301      	bcc.n	19b90 <__udivsi3+0xa8>
   19b8c:	01cb      	lsls	r3, r1, #7
   19b8e:	1ac0      	subs	r0, r0, r3
   19b90:	4152      	adcs	r2, r2
   19b92:	0983      	lsrs	r3, r0, #6
   19b94:	428b      	cmp	r3, r1
   19b96:	d301      	bcc.n	19b9c <__udivsi3+0xb4>
   19b98:	018b      	lsls	r3, r1, #6
   19b9a:	1ac0      	subs	r0, r0, r3
   19b9c:	4152      	adcs	r2, r2
   19b9e:	0943      	lsrs	r3, r0, #5
   19ba0:	428b      	cmp	r3, r1
   19ba2:	d301      	bcc.n	19ba8 <__udivsi3+0xc0>
   19ba4:	014b      	lsls	r3, r1, #5
   19ba6:	1ac0      	subs	r0, r0, r3
   19ba8:	4152      	adcs	r2, r2
   19baa:	0903      	lsrs	r3, r0, #4
   19bac:	428b      	cmp	r3, r1
   19bae:	d301      	bcc.n	19bb4 <__udivsi3+0xcc>
   19bb0:	010b      	lsls	r3, r1, #4
   19bb2:	1ac0      	subs	r0, r0, r3
   19bb4:	4152      	adcs	r2, r2
   19bb6:	08c3      	lsrs	r3, r0, #3
   19bb8:	428b      	cmp	r3, r1
   19bba:	d301      	bcc.n	19bc0 <__udivsi3+0xd8>
   19bbc:	00cb      	lsls	r3, r1, #3
   19bbe:	1ac0      	subs	r0, r0, r3
   19bc0:	4152      	adcs	r2, r2
   19bc2:	0883      	lsrs	r3, r0, #2
   19bc4:	428b      	cmp	r3, r1
   19bc6:	d301      	bcc.n	19bcc <__udivsi3+0xe4>
   19bc8:	008b      	lsls	r3, r1, #2
   19bca:	1ac0      	subs	r0, r0, r3
   19bcc:	4152      	adcs	r2, r2
   19bce:	0843      	lsrs	r3, r0, #1
   19bd0:	428b      	cmp	r3, r1
   19bd2:	d301      	bcc.n	19bd8 <__udivsi3+0xf0>
   19bd4:	004b      	lsls	r3, r1, #1
   19bd6:	1ac0      	subs	r0, r0, r3
   19bd8:	4152      	adcs	r2, r2
   19bda:	1a41      	subs	r1, r0, r1
   19bdc:	d200      	bcs.n	19be0 <__udivsi3+0xf8>
   19bde:	4601      	mov	r1, r0
   19be0:	4152      	adcs	r2, r2
   19be2:	4610      	mov	r0, r2
   19be4:	4770      	bx	lr
   19be6:	e7ff      	b.n	19be8 <__udivsi3+0x100>
   19be8:	b501      	push	{r0, lr}
   19bea:	2000      	movs	r0, #0
   19bec:	f000 f8f0 	bl	19dd0 <__aeabi_idiv0>
   19bf0:	bd02      	pop	{r1, pc}
   19bf2:	46c0      	nop			; (mov r8, r8)

00019bf4 <__aeabi_uidivmod>:
   19bf4:	2900      	cmp	r1, #0
   19bf6:	d0f7      	beq.n	19be8 <__udivsi3+0x100>
   19bf8:	e776      	b.n	19ae8 <__udivsi3>
   19bfa:	4770      	bx	lr

00019bfc <__divsi3>:
   19bfc:	4603      	mov	r3, r0
   19bfe:	430b      	orrs	r3, r1
   19c00:	d47f      	bmi.n	19d02 <__divsi3+0x106>
   19c02:	2200      	movs	r2, #0
   19c04:	0843      	lsrs	r3, r0, #1
   19c06:	428b      	cmp	r3, r1
   19c08:	d374      	bcc.n	19cf4 <__divsi3+0xf8>
   19c0a:	0903      	lsrs	r3, r0, #4
   19c0c:	428b      	cmp	r3, r1
   19c0e:	d35f      	bcc.n	19cd0 <__divsi3+0xd4>
   19c10:	0a03      	lsrs	r3, r0, #8
   19c12:	428b      	cmp	r3, r1
   19c14:	d344      	bcc.n	19ca0 <__divsi3+0xa4>
   19c16:	0b03      	lsrs	r3, r0, #12
   19c18:	428b      	cmp	r3, r1
   19c1a:	d328      	bcc.n	19c6e <__divsi3+0x72>
   19c1c:	0c03      	lsrs	r3, r0, #16
   19c1e:	428b      	cmp	r3, r1
   19c20:	d30d      	bcc.n	19c3e <__divsi3+0x42>
   19c22:	22ff      	movs	r2, #255	; 0xff
   19c24:	0209      	lsls	r1, r1, #8
   19c26:	ba12      	rev	r2, r2
   19c28:	0c03      	lsrs	r3, r0, #16
   19c2a:	428b      	cmp	r3, r1
   19c2c:	d302      	bcc.n	19c34 <__divsi3+0x38>
   19c2e:	1212      	asrs	r2, r2, #8
   19c30:	0209      	lsls	r1, r1, #8
   19c32:	d065      	beq.n	19d00 <__divsi3+0x104>
   19c34:	0b03      	lsrs	r3, r0, #12
   19c36:	428b      	cmp	r3, r1
   19c38:	d319      	bcc.n	19c6e <__divsi3+0x72>
   19c3a:	e000      	b.n	19c3e <__divsi3+0x42>
   19c3c:	0a09      	lsrs	r1, r1, #8
   19c3e:	0bc3      	lsrs	r3, r0, #15
   19c40:	428b      	cmp	r3, r1
   19c42:	d301      	bcc.n	19c48 <__divsi3+0x4c>
   19c44:	03cb      	lsls	r3, r1, #15
   19c46:	1ac0      	subs	r0, r0, r3
   19c48:	4152      	adcs	r2, r2
   19c4a:	0b83      	lsrs	r3, r0, #14
   19c4c:	428b      	cmp	r3, r1
   19c4e:	d301      	bcc.n	19c54 <__divsi3+0x58>
   19c50:	038b      	lsls	r3, r1, #14
   19c52:	1ac0      	subs	r0, r0, r3
   19c54:	4152      	adcs	r2, r2
   19c56:	0b43      	lsrs	r3, r0, #13
   19c58:	428b      	cmp	r3, r1
   19c5a:	d301      	bcc.n	19c60 <__divsi3+0x64>
   19c5c:	034b      	lsls	r3, r1, #13
   19c5e:	1ac0      	subs	r0, r0, r3
   19c60:	4152      	adcs	r2, r2
   19c62:	0b03      	lsrs	r3, r0, #12
   19c64:	428b      	cmp	r3, r1
   19c66:	d301      	bcc.n	19c6c <__divsi3+0x70>
   19c68:	030b      	lsls	r3, r1, #12
   19c6a:	1ac0      	subs	r0, r0, r3
   19c6c:	4152      	adcs	r2, r2
   19c6e:	0ac3      	lsrs	r3, r0, #11
   19c70:	428b      	cmp	r3, r1
   19c72:	d301      	bcc.n	19c78 <__divsi3+0x7c>
   19c74:	02cb      	lsls	r3, r1, #11
   19c76:	1ac0      	subs	r0, r0, r3
   19c78:	4152      	adcs	r2, r2
   19c7a:	0a83      	lsrs	r3, r0, #10
   19c7c:	428b      	cmp	r3, r1
   19c7e:	d301      	bcc.n	19c84 <__divsi3+0x88>
   19c80:	028b      	lsls	r3, r1, #10
   19c82:	1ac0      	subs	r0, r0, r3
   19c84:	4152      	adcs	r2, r2
   19c86:	0a43      	lsrs	r3, r0, #9
   19c88:	428b      	cmp	r3, r1
   19c8a:	d301      	bcc.n	19c90 <__divsi3+0x94>
   19c8c:	024b      	lsls	r3, r1, #9
   19c8e:	1ac0      	subs	r0, r0, r3
   19c90:	4152      	adcs	r2, r2
   19c92:	0a03      	lsrs	r3, r0, #8
   19c94:	428b      	cmp	r3, r1
   19c96:	d301      	bcc.n	19c9c <__divsi3+0xa0>
   19c98:	020b      	lsls	r3, r1, #8
   19c9a:	1ac0      	subs	r0, r0, r3
   19c9c:	4152      	adcs	r2, r2
   19c9e:	d2cd      	bcs.n	19c3c <__divsi3+0x40>
   19ca0:	09c3      	lsrs	r3, r0, #7
   19ca2:	428b      	cmp	r3, r1
   19ca4:	d301      	bcc.n	19caa <__divsi3+0xae>
   19ca6:	01cb      	lsls	r3, r1, #7
   19ca8:	1ac0      	subs	r0, r0, r3
   19caa:	4152      	adcs	r2, r2
   19cac:	0983      	lsrs	r3, r0, #6
   19cae:	428b      	cmp	r3, r1
   19cb0:	d301      	bcc.n	19cb6 <__divsi3+0xba>
   19cb2:	018b      	lsls	r3, r1, #6
   19cb4:	1ac0      	subs	r0, r0, r3
   19cb6:	4152      	adcs	r2, r2
   19cb8:	0943      	lsrs	r3, r0, #5
   19cba:	428b      	cmp	r3, r1
   19cbc:	d301      	bcc.n	19cc2 <__divsi3+0xc6>
   19cbe:	014b      	lsls	r3, r1, #5
   19cc0:	1ac0      	subs	r0, r0, r3
   19cc2:	4152      	adcs	r2, r2
   19cc4:	0903      	lsrs	r3, r0, #4
   19cc6:	428b      	cmp	r3, r1
   19cc8:	d301      	bcc.n	19cce <__divsi3+0xd2>
   19cca:	010b      	lsls	r3, r1, #4
   19ccc:	1ac0      	subs	r0, r0, r3
   19cce:	4152      	adcs	r2, r2
   19cd0:	08c3      	lsrs	r3, r0, #3
   19cd2:	428b      	cmp	r3, r1
   19cd4:	d301      	bcc.n	19cda <__divsi3+0xde>
   19cd6:	00cb      	lsls	r3, r1, #3
   19cd8:	1ac0      	subs	r0, r0, r3
   19cda:	4152      	adcs	r2, r2
   19cdc:	0883      	lsrs	r3, r0, #2
   19cde:	428b      	cmp	r3, r1
   19ce0:	d301      	bcc.n	19ce6 <__divsi3+0xea>
   19ce2:	008b      	lsls	r3, r1, #2
   19ce4:	1ac0      	subs	r0, r0, r3
   19ce6:	4152      	adcs	r2, r2
   19ce8:	0843      	lsrs	r3, r0, #1
   19cea:	428b      	cmp	r3, r1
   19cec:	d301      	bcc.n	19cf2 <__divsi3+0xf6>
   19cee:	004b      	lsls	r3, r1, #1
   19cf0:	1ac0      	subs	r0, r0, r3
   19cf2:	4152      	adcs	r2, r2
   19cf4:	1a41      	subs	r1, r0, r1
   19cf6:	d200      	bcs.n	19cfa <__divsi3+0xfe>
   19cf8:	4601      	mov	r1, r0
   19cfa:	4152      	adcs	r2, r2
   19cfc:	4610      	mov	r0, r2
   19cfe:	4770      	bx	lr
   19d00:	e05d      	b.n	19dbe <__divsi3+0x1c2>
   19d02:	0fca      	lsrs	r2, r1, #31
   19d04:	d000      	beq.n	19d08 <__divsi3+0x10c>
   19d06:	4249      	negs	r1, r1
   19d08:	1003      	asrs	r3, r0, #32
   19d0a:	d300      	bcc.n	19d0e <__divsi3+0x112>
   19d0c:	4240      	negs	r0, r0
   19d0e:	4053      	eors	r3, r2
   19d10:	2200      	movs	r2, #0
   19d12:	469c      	mov	ip, r3
   19d14:	0903      	lsrs	r3, r0, #4
   19d16:	428b      	cmp	r3, r1
   19d18:	d32d      	bcc.n	19d76 <__divsi3+0x17a>
   19d1a:	0a03      	lsrs	r3, r0, #8
   19d1c:	428b      	cmp	r3, r1
   19d1e:	d312      	bcc.n	19d46 <__divsi3+0x14a>
   19d20:	22fc      	movs	r2, #252	; 0xfc
   19d22:	0189      	lsls	r1, r1, #6
   19d24:	ba12      	rev	r2, r2
   19d26:	0a03      	lsrs	r3, r0, #8
   19d28:	428b      	cmp	r3, r1
   19d2a:	d30c      	bcc.n	19d46 <__divsi3+0x14a>
   19d2c:	0189      	lsls	r1, r1, #6
   19d2e:	1192      	asrs	r2, r2, #6
   19d30:	428b      	cmp	r3, r1
   19d32:	d308      	bcc.n	19d46 <__divsi3+0x14a>
   19d34:	0189      	lsls	r1, r1, #6
   19d36:	1192      	asrs	r2, r2, #6
   19d38:	428b      	cmp	r3, r1
   19d3a:	d304      	bcc.n	19d46 <__divsi3+0x14a>
   19d3c:	0189      	lsls	r1, r1, #6
   19d3e:	d03a      	beq.n	19db6 <__divsi3+0x1ba>
   19d40:	1192      	asrs	r2, r2, #6
   19d42:	e000      	b.n	19d46 <__divsi3+0x14a>
   19d44:	0989      	lsrs	r1, r1, #6
   19d46:	09c3      	lsrs	r3, r0, #7
   19d48:	428b      	cmp	r3, r1
   19d4a:	d301      	bcc.n	19d50 <__divsi3+0x154>
   19d4c:	01cb      	lsls	r3, r1, #7
   19d4e:	1ac0      	subs	r0, r0, r3
   19d50:	4152      	adcs	r2, r2
   19d52:	0983      	lsrs	r3, r0, #6
   19d54:	428b      	cmp	r3, r1
   19d56:	d301      	bcc.n	19d5c <__divsi3+0x160>
   19d58:	018b      	lsls	r3, r1, #6
   19d5a:	1ac0      	subs	r0, r0, r3
   19d5c:	4152      	adcs	r2, r2
   19d5e:	0943      	lsrs	r3, r0, #5
   19d60:	428b      	cmp	r3, r1
   19d62:	d301      	bcc.n	19d68 <__divsi3+0x16c>
   19d64:	014b      	lsls	r3, r1, #5
   19d66:	1ac0      	subs	r0, r0, r3
   19d68:	4152      	adcs	r2, r2
   19d6a:	0903      	lsrs	r3, r0, #4
   19d6c:	428b      	cmp	r3, r1
   19d6e:	d301      	bcc.n	19d74 <__divsi3+0x178>
   19d70:	010b      	lsls	r3, r1, #4
   19d72:	1ac0      	subs	r0, r0, r3
   19d74:	4152      	adcs	r2, r2
   19d76:	08c3      	lsrs	r3, r0, #3
   19d78:	428b      	cmp	r3, r1
   19d7a:	d301      	bcc.n	19d80 <__divsi3+0x184>
   19d7c:	00cb      	lsls	r3, r1, #3
   19d7e:	1ac0      	subs	r0, r0, r3
   19d80:	4152      	adcs	r2, r2
   19d82:	0883      	lsrs	r3, r0, #2
   19d84:	428b      	cmp	r3, r1
   19d86:	d301      	bcc.n	19d8c <__divsi3+0x190>
   19d88:	008b      	lsls	r3, r1, #2
   19d8a:	1ac0      	subs	r0, r0, r3
   19d8c:	4152      	adcs	r2, r2
   19d8e:	d2d9      	bcs.n	19d44 <__divsi3+0x148>
   19d90:	0843      	lsrs	r3, r0, #1
   19d92:	428b      	cmp	r3, r1
   19d94:	d301      	bcc.n	19d9a <__divsi3+0x19e>
   19d96:	004b      	lsls	r3, r1, #1
   19d98:	1ac0      	subs	r0, r0, r3
   19d9a:	4152      	adcs	r2, r2
   19d9c:	1a41      	subs	r1, r0, r1
   19d9e:	d200      	bcs.n	19da2 <__divsi3+0x1a6>
   19da0:	4601      	mov	r1, r0
   19da2:	4663      	mov	r3, ip
   19da4:	4152      	adcs	r2, r2
   19da6:	105b      	asrs	r3, r3, #1
   19da8:	4610      	mov	r0, r2
   19daa:	d301      	bcc.n	19db0 <__divsi3+0x1b4>
   19dac:	4240      	negs	r0, r0
   19dae:	2b00      	cmp	r3, #0
   19db0:	d500      	bpl.n	19db4 <__divsi3+0x1b8>
   19db2:	4249      	negs	r1, r1
   19db4:	4770      	bx	lr
   19db6:	4663      	mov	r3, ip
   19db8:	105b      	asrs	r3, r3, #1
   19dba:	d300      	bcc.n	19dbe <__divsi3+0x1c2>
   19dbc:	4240      	negs	r0, r0
   19dbe:	b501      	push	{r0, lr}
   19dc0:	2000      	movs	r0, #0
   19dc2:	f000 f805 	bl	19dd0 <__aeabi_idiv0>
   19dc6:	bd02      	pop	{r1, pc}

00019dc8 <__aeabi_idivmod>:
   19dc8:	2900      	cmp	r1, #0
   19dca:	d0f8      	beq.n	19dbe <__divsi3+0x1c2>
   19dcc:	e716      	b.n	19bfc <__divsi3>
   19dce:	4770      	bx	lr

00019dd0 <__aeabi_idiv0>:
   19dd0:	4770      	bx	lr
   19dd2:	46c0      	nop			; (mov r8, r8)

00019dd4 <__aeabi_cdrcmple>:
   19dd4:	4684      	mov	ip, r0
   19dd6:	1c10      	adds	r0, r2, #0
   19dd8:	4662      	mov	r2, ip
   19dda:	468c      	mov	ip, r1
   19ddc:	1c19      	adds	r1, r3, #0
   19dde:	4663      	mov	r3, ip
   19de0:	e000      	b.n	19de4 <__aeabi_cdcmpeq>
   19de2:	46c0      	nop			; (mov r8, r8)

00019de4 <__aeabi_cdcmpeq>:
   19de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19de6:	f000 ff3f 	bl	1ac68 <__ledf2>
   19dea:	2800      	cmp	r0, #0
   19dec:	d401      	bmi.n	19df2 <__aeabi_cdcmpeq+0xe>
   19dee:	2100      	movs	r1, #0
   19df0:	42c8      	cmn	r0, r1
   19df2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00019df4 <__aeabi_dcmpeq>:
   19df4:	b510      	push	{r4, lr}
   19df6:	f000 fe99 	bl	1ab2c <__eqdf2>
   19dfa:	4240      	negs	r0, r0
   19dfc:	3001      	adds	r0, #1
   19dfe:	bd10      	pop	{r4, pc}

00019e00 <__aeabi_dcmplt>:
   19e00:	b510      	push	{r4, lr}
   19e02:	f000 ff31 	bl	1ac68 <__ledf2>
   19e06:	2800      	cmp	r0, #0
   19e08:	db01      	blt.n	19e0e <__aeabi_dcmplt+0xe>
   19e0a:	2000      	movs	r0, #0
   19e0c:	bd10      	pop	{r4, pc}
   19e0e:	2001      	movs	r0, #1
   19e10:	bd10      	pop	{r4, pc}
   19e12:	46c0      	nop			; (mov r8, r8)

00019e14 <__aeabi_dcmple>:
   19e14:	b510      	push	{r4, lr}
   19e16:	f000 ff27 	bl	1ac68 <__ledf2>
   19e1a:	2800      	cmp	r0, #0
   19e1c:	dd01      	ble.n	19e22 <__aeabi_dcmple+0xe>
   19e1e:	2000      	movs	r0, #0
   19e20:	bd10      	pop	{r4, pc}
   19e22:	2001      	movs	r0, #1
   19e24:	bd10      	pop	{r4, pc}
   19e26:	46c0      	nop			; (mov r8, r8)

00019e28 <__aeabi_dcmpgt>:
   19e28:	b510      	push	{r4, lr}
   19e2a:	f000 feb9 	bl	1aba0 <__gedf2>
   19e2e:	2800      	cmp	r0, #0
   19e30:	dc01      	bgt.n	19e36 <__aeabi_dcmpgt+0xe>
   19e32:	2000      	movs	r0, #0
   19e34:	bd10      	pop	{r4, pc}
   19e36:	2001      	movs	r0, #1
   19e38:	bd10      	pop	{r4, pc}
   19e3a:	46c0      	nop			; (mov r8, r8)

00019e3c <__aeabi_dcmpge>:
   19e3c:	b510      	push	{r4, lr}
   19e3e:	f000 feaf 	bl	1aba0 <__gedf2>
   19e42:	2800      	cmp	r0, #0
   19e44:	da01      	bge.n	19e4a <__aeabi_dcmpge+0xe>
   19e46:	2000      	movs	r0, #0
   19e48:	bd10      	pop	{r4, pc}
   19e4a:	2001      	movs	r0, #1
   19e4c:	bd10      	pop	{r4, pc}
   19e4e:	46c0      	nop			; (mov r8, r8)

00019e50 <__aeabi_lmul>:
   19e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e52:	46ce      	mov	lr, r9
   19e54:	4647      	mov	r7, r8
   19e56:	0415      	lsls	r5, r2, #16
   19e58:	0c2d      	lsrs	r5, r5, #16
   19e5a:	002e      	movs	r6, r5
   19e5c:	b580      	push	{r7, lr}
   19e5e:	0407      	lsls	r7, r0, #16
   19e60:	0c14      	lsrs	r4, r2, #16
   19e62:	0c3f      	lsrs	r7, r7, #16
   19e64:	4699      	mov	r9, r3
   19e66:	0c03      	lsrs	r3, r0, #16
   19e68:	437e      	muls	r6, r7
   19e6a:	435d      	muls	r5, r3
   19e6c:	4367      	muls	r7, r4
   19e6e:	4363      	muls	r3, r4
   19e70:	197f      	adds	r7, r7, r5
   19e72:	0c34      	lsrs	r4, r6, #16
   19e74:	19e4      	adds	r4, r4, r7
   19e76:	469c      	mov	ip, r3
   19e78:	42a5      	cmp	r5, r4
   19e7a:	d903      	bls.n	19e84 <__aeabi_lmul+0x34>
   19e7c:	2380      	movs	r3, #128	; 0x80
   19e7e:	025b      	lsls	r3, r3, #9
   19e80:	4698      	mov	r8, r3
   19e82:	44c4      	add	ip, r8
   19e84:	464b      	mov	r3, r9
   19e86:	4351      	muls	r1, r2
   19e88:	4343      	muls	r3, r0
   19e8a:	0436      	lsls	r6, r6, #16
   19e8c:	0c36      	lsrs	r6, r6, #16
   19e8e:	0c25      	lsrs	r5, r4, #16
   19e90:	0424      	lsls	r4, r4, #16
   19e92:	4465      	add	r5, ip
   19e94:	19a4      	adds	r4, r4, r6
   19e96:	1859      	adds	r1, r3, r1
   19e98:	1949      	adds	r1, r1, r5
   19e9a:	0020      	movs	r0, r4
   19e9c:	bc0c      	pop	{r2, r3}
   19e9e:	4690      	mov	r8, r2
   19ea0:	4699      	mov	r9, r3
   19ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019ea4 <__aeabi_dadd>:
   19ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ea6:	4645      	mov	r5, r8
   19ea8:	46de      	mov	lr, fp
   19eaa:	4657      	mov	r7, sl
   19eac:	464e      	mov	r6, r9
   19eae:	030c      	lsls	r4, r1, #12
   19eb0:	b5e0      	push	{r5, r6, r7, lr}
   19eb2:	004e      	lsls	r6, r1, #1
   19eb4:	0fc9      	lsrs	r1, r1, #31
   19eb6:	4688      	mov	r8, r1
   19eb8:	000d      	movs	r5, r1
   19eba:	0a61      	lsrs	r1, r4, #9
   19ebc:	0f44      	lsrs	r4, r0, #29
   19ebe:	430c      	orrs	r4, r1
   19ec0:	00c7      	lsls	r7, r0, #3
   19ec2:	0319      	lsls	r1, r3, #12
   19ec4:	0058      	lsls	r0, r3, #1
   19ec6:	0fdb      	lsrs	r3, r3, #31
   19ec8:	469b      	mov	fp, r3
   19eca:	0a4b      	lsrs	r3, r1, #9
   19ecc:	0f51      	lsrs	r1, r2, #29
   19ece:	430b      	orrs	r3, r1
   19ed0:	0d76      	lsrs	r6, r6, #21
   19ed2:	0d40      	lsrs	r0, r0, #21
   19ed4:	0019      	movs	r1, r3
   19ed6:	00d2      	lsls	r2, r2, #3
   19ed8:	45d8      	cmp	r8, fp
   19eda:	d100      	bne.n	19ede <__aeabi_dadd+0x3a>
   19edc:	e0ae      	b.n	1a03c <__aeabi_dadd+0x198>
   19ede:	1a35      	subs	r5, r6, r0
   19ee0:	2d00      	cmp	r5, #0
   19ee2:	dc00      	bgt.n	19ee6 <__aeabi_dadd+0x42>
   19ee4:	e0f6      	b.n	1a0d4 <__aeabi_dadd+0x230>
   19ee6:	2800      	cmp	r0, #0
   19ee8:	d10f      	bne.n	19f0a <__aeabi_dadd+0x66>
   19eea:	4313      	orrs	r3, r2
   19eec:	d100      	bne.n	19ef0 <__aeabi_dadd+0x4c>
   19eee:	e0db      	b.n	1a0a8 <__aeabi_dadd+0x204>
   19ef0:	1e6b      	subs	r3, r5, #1
   19ef2:	2b00      	cmp	r3, #0
   19ef4:	d000      	beq.n	19ef8 <__aeabi_dadd+0x54>
   19ef6:	e137      	b.n	1a168 <__aeabi_dadd+0x2c4>
   19ef8:	1aba      	subs	r2, r7, r2
   19efa:	4297      	cmp	r7, r2
   19efc:	41bf      	sbcs	r7, r7
   19efe:	1a64      	subs	r4, r4, r1
   19f00:	427f      	negs	r7, r7
   19f02:	1be4      	subs	r4, r4, r7
   19f04:	2601      	movs	r6, #1
   19f06:	0017      	movs	r7, r2
   19f08:	e024      	b.n	19f54 <__aeabi_dadd+0xb0>
   19f0a:	4bc6      	ldr	r3, [pc, #792]	; (1a224 <__aeabi_dadd+0x380>)
   19f0c:	429e      	cmp	r6, r3
   19f0e:	d04d      	beq.n	19fac <__aeabi_dadd+0x108>
   19f10:	2380      	movs	r3, #128	; 0x80
   19f12:	041b      	lsls	r3, r3, #16
   19f14:	4319      	orrs	r1, r3
   19f16:	2d38      	cmp	r5, #56	; 0x38
   19f18:	dd00      	ble.n	19f1c <__aeabi_dadd+0x78>
   19f1a:	e107      	b.n	1a12c <__aeabi_dadd+0x288>
   19f1c:	2d1f      	cmp	r5, #31
   19f1e:	dd00      	ble.n	19f22 <__aeabi_dadd+0x7e>
   19f20:	e138      	b.n	1a194 <__aeabi_dadd+0x2f0>
   19f22:	2020      	movs	r0, #32
   19f24:	1b43      	subs	r3, r0, r5
   19f26:	469a      	mov	sl, r3
   19f28:	000b      	movs	r3, r1
   19f2a:	4650      	mov	r0, sl
   19f2c:	4083      	lsls	r3, r0
   19f2e:	4699      	mov	r9, r3
   19f30:	0013      	movs	r3, r2
   19f32:	4648      	mov	r0, r9
   19f34:	40eb      	lsrs	r3, r5
   19f36:	4318      	orrs	r0, r3
   19f38:	0003      	movs	r3, r0
   19f3a:	4650      	mov	r0, sl
   19f3c:	4082      	lsls	r2, r0
   19f3e:	1e50      	subs	r0, r2, #1
   19f40:	4182      	sbcs	r2, r0
   19f42:	40e9      	lsrs	r1, r5
   19f44:	431a      	orrs	r2, r3
   19f46:	1aba      	subs	r2, r7, r2
   19f48:	1a61      	subs	r1, r4, r1
   19f4a:	4297      	cmp	r7, r2
   19f4c:	41a4      	sbcs	r4, r4
   19f4e:	0017      	movs	r7, r2
   19f50:	4264      	negs	r4, r4
   19f52:	1b0c      	subs	r4, r1, r4
   19f54:	0223      	lsls	r3, r4, #8
   19f56:	d562      	bpl.n	1a01e <__aeabi_dadd+0x17a>
   19f58:	0264      	lsls	r4, r4, #9
   19f5a:	0a65      	lsrs	r5, r4, #9
   19f5c:	2d00      	cmp	r5, #0
   19f5e:	d100      	bne.n	19f62 <__aeabi_dadd+0xbe>
   19f60:	e0df      	b.n	1a122 <__aeabi_dadd+0x27e>
   19f62:	0028      	movs	r0, r5
   19f64:	f001 fd26 	bl	1b9b4 <__clzsi2>
   19f68:	0003      	movs	r3, r0
   19f6a:	3b08      	subs	r3, #8
   19f6c:	2b1f      	cmp	r3, #31
   19f6e:	dd00      	ble.n	19f72 <__aeabi_dadd+0xce>
   19f70:	e0d2      	b.n	1a118 <__aeabi_dadd+0x274>
   19f72:	2220      	movs	r2, #32
   19f74:	003c      	movs	r4, r7
   19f76:	1ad2      	subs	r2, r2, r3
   19f78:	409d      	lsls	r5, r3
   19f7a:	40d4      	lsrs	r4, r2
   19f7c:	409f      	lsls	r7, r3
   19f7e:	4325      	orrs	r5, r4
   19f80:	429e      	cmp	r6, r3
   19f82:	dd00      	ble.n	19f86 <__aeabi_dadd+0xe2>
   19f84:	e0c4      	b.n	1a110 <__aeabi_dadd+0x26c>
   19f86:	1b9e      	subs	r6, r3, r6
   19f88:	1c73      	adds	r3, r6, #1
   19f8a:	2b1f      	cmp	r3, #31
   19f8c:	dd00      	ble.n	19f90 <__aeabi_dadd+0xec>
   19f8e:	e0f1      	b.n	1a174 <__aeabi_dadd+0x2d0>
   19f90:	2220      	movs	r2, #32
   19f92:	0038      	movs	r0, r7
   19f94:	0029      	movs	r1, r5
   19f96:	1ad2      	subs	r2, r2, r3
   19f98:	40d8      	lsrs	r0, r3
   19f9a:	4091      	lsls	r1, r2
   19f9c:	4097      	lsls	r7, r2
   19f9e:	002c      	movs	r4, r5
   19fa0:	4301      	orrs	r1, r0
   19fa2:	1e78      	subs	r0, r7, #1
   19fa4:	4187      	sbcs	r7, r0
   19fa6:	40dc      	lsrs	r4, r3
   19fa8:	2600      	movs	r6, #0
   19faa:	430f      	orrs	r7, r1
   19fac:	077b      	lsls	r3, r7, #29
   19fae:	d009      	beq.n	19fc4 <__aeabi_dadd+0x120>
   19fb0:	230f      	movs	r3, #15
   19fb2:	403b      	ands	r3, r7
   19fb4:	2b04      	cmp	r3, #4
   19fb6:	d005      	beq.n	19fc4 <__aeabi_dadd+0x120>
   19fb8:	1d3b      	adds	r3, r7, #4
   19fba:	42bb      	cmp	r3, r7
   19fbc:	41bf      	sbcs	r7, r7
   19fbe:	427f      	negs	r7, r7
   19fc0:	19e4      	adds	r4, r4, r7
   19fc2:	001f      	movs	r7, r3
   19fc4:	0223      	lsls	r3, r4, #8
   19fc6:	d52c      	bpl.n	1a022 <__aeabi_dadd+0x17e>
   19fc8:	4b96      	ldr	r3, [pc, #600]	; (1a224 <__aeabi_dadd+0x380>)
   19fca:	3601      	adds	r6, #1
   19fcc:	429e      	cmp	r6, r3
   19fce:	d100      	bne.n	19fd2 <__aeabi_dadd+0x12e>
   19fd0:	e09a      	b.n	1a108 <__aeabi_dadd+0x264>
   19fd2:	4645      	mov	r5, r8
   19fd4:	4b94      	ldr	r3, [pc, #592]	; (1a228 <__aeabi_dadd+0x384>)
   19fd6:	08ff      	lsrs	r7, r7, #3
   19fd8:	401c      	ands	r4, r3
   19fda:	0760      	lsls	r0, r4, #29
   19fdc:	0576      	lsls	r6, r6, #21
   19fde:	0264      	lsls	r4, r4, #9
   19fe0:	4307      	orrs	r7, r0
   19fe2:	0b24      	lsrs	r4, r4, #12
   19fe4:	0d76      	lsrs	r6, r6, #21
   19fe6:	2100      	movs	r1, #0
   19fe8:	0324      	lsls	r4, r4, #12
   19fea:	0b23      	lsrs	r3, r4, #12
   19fec:	0d0c      	lsrs	r4, r1, #20
   19fee:	4a8f      	ldr	r2, [pc, #572]	; (1a22c <__aeabi_dadd+0x388>)
   19ff0:	0524      	lsls	r4, r4, #20
   19ff2:	431c      	orrs	r4, r3
   19ff4:	4014      	ands	r4, r2
   19ff6:	0533      	lsls	r3, r6, #20
   19ff8:	4323      	orrs	r3, r4
   19ffa:	005b      	lsls	r3, r3, #1
   19ffc:	07ed      	lsls	r5, r5, #31
   19ffe:	085b      	lsrs	r3, r3, #1
   1a000:	432b      	orrs	r3, r5
   1a002:	0038      	movs	r0, r7
   1a004:	0019      	movs	r1, r3
   1a006:	bc3c      	pop	{r2, r3, r4, r5}
   1a008:	4690      	mov	r8, r2
   1a00a:	4699      	mov	r9, r3
   1a00c:	46a2      	mov	sl, r4
   1a00e:	46ab      	mov	fp, r5
   1a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a012:	4664      	mov	r4, ip
   1a014:	4304      	orrs	r4, r0
   1a016:	d100      	bne.n	1a01a <__aeabi_dadd+0x176>
   1a018:	e211      	b.n	1a43e <__aeabi_dadd+0x59a>
   1a01a:	0004      	movs	r4, r0
   1a01c:	4667      	mov	r7, ip
   1a01e:	077b      	lsls	r3, r7, #29
   1a020:	d1c6      	bne.n	19fb0 <__aeabi_dadd+0x10c>
   1a022:	4645      	mov	r5, r8
   1a024:	0760      	lsls	r0, r4, #29
   1a026:	08ff      	lsrs	r7, r7, #3
   1a028:	4307      	orrs	r7, r0
   1a02a:	08e4      	lsrs	r4, r4, #3
   1a02c:	4b7d      	ldr	r3, [pc, #500]	; (1a224 <__aeabi_dadd+0x380>)
   1a02e:	429e      	cmp	r6, r3
   1a030:	d030      	beq.n	1a094 <__aeabi_dadd+0x1f0>
   1a032:	0324      	lsls	r4, r4, #12
   1a034:	0576      	lsls	r6, r6, #21
   1a036:	0b24      	lsrs	r4, r4, #12
   1a038:	0d76      	lsrs	r6, r6, #21
   1a03a:	e7d4      	b.n	19fe6 <__aeabi_dadd+0x142>
   1a03c:	1a33      	subs	r3, r6, r0
   1a03e:	469a      	mov	sl, r3
   1a040:	2b00      	cmp	r3, #0
   1a042:	dd78      	ble.n	1a136 <__aeabi_dadd+0x292>
   1a044:	2800      	cmp	r0, #0
   1a046:	d031      	beq.n	1a0ac <__aeabi_dadd+0x208>
   1a048:	4876      	ldr	r0, [pc, #472]	; (1a224 <__aeabi_dadd+0x380>)
   1a04a:	4286      	cmp	r6, r0
   1a04c:	d0ae      	beq.n	19fac <__aeabi_dadd+0x108>
   1a04e:	2080      	movs	r0, #128	; 0x80
   1a050:	0400      	lsls	r0, r0, #16
   1a052:	4301      	orrs	r1, r0
   1a054:	4653      	mov	r3, sl
   1a056:	2b38      	cmp	r3, #56	; 0x38
   1a058:	dc00      	bgt.n	1a05c <__aeabi_dadd+0x1b8>
   1a05a:	e0e9      	b.n	1a230 <__aeabi_dadd+0x38c>
   1a05c:	430a      	orrs	r2, r1
   1a05e:	1e51      	subs	r1, r2, #1
   1a060:	418a      	sbcs	r2, r1
   1a062:	2100      	movs	r1, #0
   1a064:	19d2      	adds	r2, r2, r7
   1a066:	42ba      	cmp	r2, r7
   1a068:	41bf      	sbcs	r7, r7
   1a06a:	1909      	adds	r1, r1, r4
   1a06c:	427c      	negs	r4, r7
   1a06e:	0017      	movs	r7, r2
   1a070:	190c      	adds	r4, r1, r4
   1a072:	0223      	lsls	r3, r4, #8
   1a074:	d5d3      	bpl.n	1a01e <__aeabi_dadd+0x17a>
   1a076:	4b6b      	ldr	r3, [pc, #428]	; (1a224 <__aeabi_dadd+0x380>)
   1a078:	3601      	adds	r6, #1
   1a07a:	429e      	cmp	r6, r3
   1a07c:	d100      	bne.n	1a080 <__aeabi_dadd+0x1dc>
   1a07e:	e13a      	b.n	1a2f6 <__aeabi_dadd+0x452>
   1a080:	2001      	movs	r0, #1
   1a082:	4b69      	ldr	r3, [pc, #420]	; (1a228 <__aeabi_dadd+0x384>)
   1a084:	401c      	ands	r4, r3
   1a086:	087b      	lsrs	r3, r7, #1
   1a088:	4007      	ands	r7, r0
   1a08a:	431f      	orrs	r7, r3
   1a08c:	07e0      	lsls	r0, r4, #31
   1a08e:	4307      	orrs	r7, r0
   1a090:	0864      	lsrs	r4, r4, #1
   1a092:	e78b      	b.n	19fac <__aeabi_dadd+0x108>
   1a094:	0023      	movs	r3, r4
   1a096:	433b      	orrs	r3, r7
   1a098:	d100      	bne.n	1a09c <__aeabi_dadd+0x1f8>
   1a09a:	e1cb      	b.n	1a434 <__aeabi_dadd+0x590>
   1a09c:	2280      	movs	r2, #128	; 0x80
   1a09e:	0312      	lsls	r2, r2, #12
   1a0a0:	4314      	orrs	r4, r2
   1a0a2:	0324      	lsls	r4, r4, #12
   1a0a4:	0b24      	lsrs	r4, r4, #12
   1a0a6:	e79e      	b.n	19fe6 <__aeabi_dadd+0x142>
   1a0a8:	002e      	movs	r6, r5
   1a0aa:	e77f      	b.n	19fac <__aeabi_dadd+0x108>
   1a0ac:	0008      	movs	r0, r1
   1a0ae:	4310      	orrs	r0, r2
   1a0b0:	d100      	bne.n	1a0b4 <__aeabi_dadd+0x210>
   1a0b2:	e0b4      	b.n	1a21e <__aeabi_dadd+0x37a>
   1a0b4:	1e58      	subs	r0, r3, #1
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d000      	beq.n	1a0bc <__aeabi_dadd+0x218>
   1a0ba:	e0de      	b.n	1a27a <__aeabi_dadd+0x3d6>
   1a0bc:	18ba      	adds	r2, r7, r2
   1a0be:	42ba      	cmp	r2, r7
   1a0c0:	419b      	sbcs	r3, r3
   1a0c2:	1864      	adds	r4, r4, r1
   1a0c4:	425b      	negs	r3, r3
   1a0c6:	18e4      	adds	r4, r4, r3
   1a0c8:	0017      	movs	r7, r2
   1a0ca:	2601      	movs	r6, #1
   1a0cc:	0223      	lsls	r3, r4, #8
   1a0ce:	d5a6      	bpl.n	1a01e <__aeabi_dadd+0x17a>
   1a0d0:	2602      	movs	r6, #2
   1a0d2:	e7d5      	b.n	1a080 <__aeabi_dadd+0x1dc>
   1a0d4:	2d00      	cmp	r5, #0
   1a0d6:	d16e      	bne.n	1a1b6 <__aeabi_dadd+0x312>
   1a0d8:	1c70      	adds	r0, r6, #1
   1a0da:	0540      	lsls	r0, r0, #21
   1a0dc:	0d40      	lsrs	r0, r0, #21
   1a0de:	2801      	cmp	r0, #1
   1a0e0:	dc00      	bgt.n	1a0e4 <__aeabi_dadd+0x240>
   1a0e2:	e0f9      	b.n	1a2d8 <__aeabi_dadd+0x434>
   1a0e4:	1ab8      	subs	r0, r7, r2
   1a0e6:	4684      	mov	ip, r0
   1a0e8:	4287      	cmp	r7, r0
   1a0ea:	4180      	sbcs	r0, r0
   1a0ec:	1ae5      	subs	r5, r4, r3
   1a0ee:	4240      	negs	r0, r0
   1a0f0:	1a2d      	subs	r5, r5, r0
   1a0f2:	0228      	lsls	r0, r5, #8
   1a0f4:	d400      	bmi.n	1a0f8 <__aeabi_dadd+0x254>
   1a0f6:	e089      	b.n	1a20c <__aeabi_dadd+0x368>
   1a0f8:	1bd7      	subs	r7, r2, r7
   1a0fa:	42ba      	cmp	r2, r7
   1a0fc:	4192      	sbcs	r2, r2
   1a0fe:	1b1c      	subs	r4, r3, r4
   1a100:	4252      	negs	r2, r2
   1a102:	1aa5      	subs	r5, r4, r2
   1a104:	46d8      	mov	r8, fp
   1a106:	e729      	b.n	19f5c <__aeabi_dadd+0xb8>
   1a108:	4645      	mov	r5, r8
   1a10a:	2400      	movs	r4, #0
   1a10c:	2700      	movs	r7, #0
   1a10e:	e76a      	b.n	19fe6 <__aeabi_dadd+0x142>
   1a110:	4c45      	ldr	r4, [pc, #276]	; (1a228 <__aeabi_dadd+0x384>)
   1a112:	1af6      	subs	r6, r6, r3
   1a114:	402c      	ands	r4, r5
   1a116:	e749      	b.n	19fac <__aeabi_dadd+0x108>
   1a118:	003d      	movs	r5, r7
   1a11a:	3828      	subs	r0, #40	; 0x28
   1a11c:	4085      	lsls	r5, r0
   1a11e:	2700      	movs	r7, #0
   1a120:	e72e      	b.n	19f80 <__aeabi_dadd+0xdc>
   1a122:	0038      	movs	r0, r7
   1a124:	f001 fc46 	bl	1b9b4 <__clzsi2>
   1a128:	3020      	adds	r0, #32
   1a12a:	e71d      	b.n	19f68 <__aeabi_dadd+0xc4>
   1a12c:	430a      	orrs	r2, r1
   1a12e:	1e51      	subs	r1, r2, #1
   1a130:	418a      	sbcs	r2, r1
   1a132:	2100      	movs	r1, #0
   1a134:	e707      	b.n	19f46 <__aeabi_dadd+0xa2>
   1a136:	2b00      	cmp	r3, #0
   1a138:	d000      	beq.n	1a13c <__aeabi_dadd+0x298>
   1a13a:	e0f3      	b.n	1a324 <__aeabi_dadd+0x480>
   1a13c:	1c70      	adds	r0, r6, #1
   1a13e:	0543      	lsls	r3, r0, #21
   1a140:	0d5b      	lsrs	r3, r3, #21
   1a142:	2b01      	cmp	r3, #1
   1a144:	dc00      	bgt.n	1a148 <__aeabi_dadd+0x2a4>
   1a146:	e0ad      	b.n	1a2a4 <__aeabi_dadd+0x400>
   1a148:	4b36      	ldr	r3, [pc, #216]	; (1a224 <__aeabi_dadd+0x380>)
   1a14a:	4298      	cmp	r0, r3
   1a14c:	d100      	bne.n	1a150 <__aeabi_dadd+0x2ac>
   1a14e:	e0d1      	b.n	1a2f4 <__aeabi_dadd+0x450>
   1a150:	18ba      	adds	r2, r7, r2
   1a152:	42ba      	cmp	r2, r7
   1a154:	41bf      	sbcs	r7, r7
   1a156:	1864      	adds	r4, r4, r1
   1a158:	427f      	negs	r7, r7
   1a15a:	19e4      	adds	r4, r4, r7
   1a15c:	07e7      	lsls	r7, r4, #31
   1a15e:	0852      	lsrs	r2, r2, #1
   1a160:	4317      	orrs	r7, r2
   1a162:	0864      	lsrs	r4, r4, #1
   1a164:	0006      	movs	r6, r0
   1a166:	e721      	b.n	19fac <__aeabi_dadd+0x108>
   1a168:	482e      	ldr	r0, [pc, #184]	; (1a224 <__aeabi_dadd+0x380>)
   1a16a:	4285      	cmp	r5, r0
   1a16c:	d100      	bne.n	1a170 <__aeabi_dadd+0x2cc>
   1a16e:	e093      	b.n	1a298 <__aeabi_dadd+0x3f4>
   1a170:	001d      	movs	r5, r3
   1a172:	e6d0      	b.n	19f16 <__aeabi_dadd+0x72>
   1a174:	0029      	movs	r1, r5
   1a176:	3e1f      	subs	r6, #31
   1a178:	40f1      	lsrs	r1, r6
   1a17a:	2b20      	cmp	r3, #32
   1a17c:	d100      	bne.n	1a180 <__aeabi_dadd+0x2dc>
   1a17e:	e08d      	b.n	1a29c <__aeabi_dadd+0x3f8>
   1a180:	2240      	movs	r2, #64	; 0x40
   1a182:	1ad3      	subs	r3, r2, r3
   1a184:	409d      	lsls	r5, r3
   1a186:	432f      	orrs	r7, r5
   1a188:	1e7d      	subs	r5, r7, #1
   1a18a:	41af      	sbcs	r7, r5
   1a18c:	2400      	movs	r4, #0
   1a18e:	430f      	orrs	r7, r1
   1a190:	2600      	movs	r6, #0
   1a192:	e744      	b.n	1a01e <__aeabi_dadd+0x17a>
   1a194:	002b      	movs	r3, r5
   1a196:	0008      	movs	r0, r1
   1a198:	3b20      	subs	r3, #32
   1a19a:	40d8      	lsrs	r0, r3
   1a19c:	0003      	movs	r3, r0
   1a19e:	2d20      	cmp	r5, #32
   1a1a0:	d100      	bne.n	1a1a4 <__aeabi_dadd+0x300>
   1a1a2:	e07d      	b.n	1a2a0 <__aeabi_dadd+0x3fc>
   1a1a4:	2040      	movs	r0, #64	; 0x40
   1a1a6:	1b45      	subs	r5, r0, r5
   1a1a8:	40a9      	lsls	r1, r5
   1a1aa:	430a      	orrs	r2, r1
   1a1ac:	1e51      	subs	r1, r2, #1
   1a1ae:	418a      	sbcs	r2, r1
   1a1b0:	2100      	movs	r1, #0
   1a1b2:	431a      	orrs	r2, r3
   1a1b4:	e6c7      	b.n	19f46 <__aeabi_dadd+0xa2>
   1a1b6:	2e00      	cmp	r6, #0
   1a1b8:	d050      	beq.n	1a25c <__aeabi_dadd+0x3b8>
   1a1ba:	4e1a      	ldr	r6, [pc, #104]	; (1a224 <__aeabi_dadd+0x380>)
   1a1bc:	42b0      	cmp	r0, r6
   1a1be:	d057      	beq.n	1a270 <__aeabi_dadd+0x3cc>
   1a1c0:	2680      	movs	r6, #128	; 0x80
   1a1c2:	426b      	negs	r3, r5
   1a1c4:	4699      	mov	r9, r3
   1a1c6:	0436      	lsls	r6, r6, #16
   1a1c8:	4334      	orrs	r4, r6
   1a1ca:	464b      	mov	r3, r9
   1a1cc:	2b38      	cmp	r3, #56	; 0x38
   1a1ce:	dd00      	ble.n	1a1d2 <__aeabi_dadd+0x32e>
   1a1d0:	e0d6      	b.n	1a380 <__aeabi_dadd+0x4dc>
   1a1d2:	2b1f      	cmp	r3, #31
   1a1d4:	dd00      	ble.n	1a1d8 <__aeabi_dadd+0x334>
   1a1d6:	e135      	b.n	1a444 <__aeabi_dadd+0x5a0>
   1a1d8:	2620      	movs	r6, #32
   1a1da:	1af5      	subs	r5, r6, r3
   1a1dc:	0026      	movs	r6, r4
   1a1de:	40ae      	lsls	r6, r5
   1a1e0:	46b2      	mov	sl, r6
   1a1e2:	003e      	movs	r6, r7
   1a1e4:	40de      	lsrs	r6, r3
   1a1e6:	46ac      	mov	ip, r5
   1a1e8:	0035      	movs	r5, r6
   1a1ea:	4656      	mov	r6, sl
   1a1ec:	432e      	orrs	r6, r5
   1a1ee:	4665      	mov	r5, ip
   1a1f0:	40af      	lsls	r7, r5
   1a1f2:	1e7d      	subs	r5, r7, #1
   1a1f4:	41af      	sbcs	r7, r5
   1a1f6:	40dc      	lsrs	r4, r3
   1a1f8:	4337      	orrs	r7, r6
   1a1fa:	1bd7      	subs	r7, r2, r7
   1a1fc:	42ba      	cmp	r2, r7
   1a1fe:	4192      	sbcs	r2, r2
   1a200:	1b0c      	subs	r4, r1, r4
   1a202:	4252      	negs	r2, r2
   1a204:	1aa4      	subs	r4, r4, r2
   1a206:	0006      	movs	r6, r0
   1a208:	46d8      	mov	r8, fp
   1a20a:	e6a3      	b.n	19f54 <__aeabi_dadd+0xb0>
   1a20c:	4664      	mov	r4, ip
   1a20e:	4667      	mov	r7, ip
   1a210:	432c      	orrs	r4, r5
   1a212:	d000      	beq.n	1a216 <__aeabi_dadd+0x372>
   1a214:	e6a2      	b.n	19f5c <__aeabi_dadd+0xb8>
   1a216:	2500      	movs	r5, #0
   1a218:	2600      	movs	r6, #0
   1a21a:	2700      	movs	r7, #0
   1a21c:	e706      	b.n	1a02c <__aeabi_dadd+0x188>
   1a21e:	001e      	movs	r6, r3
   1a220:	e6c4      	b.n	19fac <__aeabi_dadd+0x108>
   1a222:	46c0      	nop			; (mov r8, r8)
   1a224:	000007ff 	.word	0x000007ff
   1a228:	ff7fffff 	.word	0xff7fffff
   1a22c:	800fffff 	.word	0x800fffff
   1a230:	2b1f      	cmp	r3, #31
   1a232:	dc63      	bgt.n	1a2fc <__aeabi_dadd+0x458>
   1a234:	2020      	movs	r0, #32
   1a236:	1ac3      	subs	r3, r0, r3
   1a238:	0008      	movs	r0, r1
   1a23a:	4098      	lsls	r0, r3
   1a23c:	469c      	mov	ip, r3
   1a23e:	4683      	mov	fp, r0
   1a240:	4653      	mov	r3, sl
   1a242:	0010      	movs	r0, r2
   1a244:	40d8      	lsrs	r0, r3
   1a246:	0003      	movs	r3, r0
   1a248:	4658      	mov	r0, fp
   1a24a:	4318      	orrs	r0, r3
   1a24c:	4663      	mov	r3, ip
   1a24e:	409a      	lsls	r2, r3
   1a250:	1e53      	subs	r3, r2, #1
   1a252:	419a      	sbcs	r2, r3
   1a254:	4653      	mov	r3, sl
   1a256:	4302      	orrs	r2, r0
   1a258:	40d9      	lsrs	r1, r3
   1a25a:	e703      	b.n	1a064 <__aeabi_dadd+0x1c0>
   1a25c:	0026      	movs	r6, r4
   1a25e:	433e      	orrs	r6, r7
   1a260:	d006      	beq.n	1a270 <__aeabi_dadd+0x3cc>
   1a262:	43eb      	mvns	r3, r5
   1a264:	4699      	mov	r9, r3
   1a266:	2b00      	cmp	r3, #0
   1a268:	d0c7      	beq.n	1a1fa <__aeabi_dadd+0x356>
   1a26a:	4e94      	ldr	r6, [pc, #592]	; (1a4bc <__aeabi_dadd+0x618>)
   1a26c:	42b0      	cmp	r0, r6
   1a26e:	d1ac      	bne.n	1a1ca <__aeabi_dadd+0x326>
   1a270:	000c      	movs	r4, r1
   1a272:	0017      	movs	r7, r2
   1a274:	0006      	movs	r6, r0
   1a276:	46d8      	mov	r8, fp
   1a278:	e698      	b.n	19fac <__aeabi_dadd+0x108>
   1a27a:	4b90      	ldr	r3, [pc, #576]	; (1a4bc <__aeabi_dadd+0x618>)
   1a27c:	459a      	cmp	sl, r3
   1a27e:	d00b      	beq.n	1a298 <__aeabi_dadd+0x3f4>
   1a280:	4682      	mov	sl, r0
   1a282:	e6e7      	b.n	1a054 <__aeabi_dadd+0x1b0>
   1a284:	2800      	cmp	r0, #0
   1a286:	d000      	beq.n	1a28a <__aeabi_dadd+0x3e6>
   1a288:	e09e      	b.n	1a3c8 <__aeabi_dadd+0x524>
   1a28a:	0018      	movs	r0, r3
   1a28c:	4310      	orrs	r0, r2
   1a28e:	d100      	bne.n	1a292 <__aeabi_dadd+0x3ee>
   1a290:	e0e9      	b.n	1a466 <__aeabi_dadd+0x5c2>
   1a292:	001c      	movs	r4, r3
   1a294:	0017      	movs	r7, r2
   1a296:	46d8      	mov	r8, fp
   1a298:	4e88      	ldr	r6, [pc, #544]	; (1a4bc <__aeabi_dadd+0x618>)
   1a29a:	e687      	b.n	19fac <__aeabi_dadd+0x108>
   1a29c:	2500      	movs	r5, #0
   1a29e:	e772      	b.n	1a186 <__aeabi_dadd+0x2e2>
   1a2a0:	2100      	movs	r1, #0
   1a2a2:	e782      	b.n	1a1aa <__aeabi_dadd+0x306>
   1a2a4:	0023      	movs	r3, r4
   1a2a6:	433b      	orrs	r3, r7
   1a2a8:	2e00      	cmp	r6, #0
   1a2aa:	d000      	beq.n	1a2ae <__aeabi_dadd+0x40a>
   1a2ac:	e0ab      	b.n	1a406 <__aeabi_dadd+0x562>
   1a2ae:	2b00      	cmp	r3, #0
   1a2b0:	d100      	bne.n	1a2b4 <__aeabi_dadd+0x410>
   1a2b2:	e0e7      	b.n	1a484 <__aeabi_dadd+0x5e0>
   1a2b4:	000b      	movs	r3, r1
   1a2b6:	4313      	orrs	r3, r2
   1a2b8:	d100      	bne.n	1a2bc <__aeabi_dadd+0x418>
   1a2ba:	e677      	b.n	19fac <__aeabi_dadd+0x108>
   1a2bc:	18ba      	adds	r2, r7, r2
   1a2be:	42ba      	cmp	r2, r7
   1a2c0:	41bf      	sbcs	r7, r7
   1a2c2:	1864      	adds	r4, r4, r1
   1a2c4:	427f      	negs	r7, r7
   1a2c6:	19e4      	adds	r4, r4, r7
   1a2c8:	0223      	lsls	r3, r4, #8
   1a2ca:	d400      	bmi.n	1a2ce <__aeabi_dadd+0x42a>
   1a2cc:	e0f2      	b.n	1a4b4 <__aeabi_dadd+0x610>
   1a2ce:	4b7c      	ldr	r3, [pc, #496]	; (1a4c0 <__aeabi_dadd+0x61c>)
   1a2d0:	0017      	movs	r7, r2
   1a2d2:	401c      	ands	r4, r3
   1a2d4:	0006      	movs	r6, r0
   1a2d6:	e669      	b.n	19fac <__aeabi_dadd+0x108>
   1a2d8:	0020      	movs	r0, r4
   1a2da:	4338      	orrs	r0, r7
   1a2dc:	2e00      	cmp	r6, #0
   1a2de:	d1d1      	bne.n	1a284 <__aeabi_dadd+0x3e0>
   1a2e0:	2800      	cmp	r0, #0
   1a2e2:	d15b      	bne.n	1a39c <__aeabi_dadd+0x4f8>
   1a2e4:	001c      	movs	r4, r3
   1a2e6:	4314      	orrs	r4, r2
   1a2e8:	d100      	bne.n	1a2ec <__aeabi_dadd+0x448>
   1a2ea:	e0a8      	b.n	1a43e <__aeabi_dadd+0x59a>
   1a2ec:	001c      	movs	r4, r3
   1a2ee:	0017      	movs	r7, r2
   1a2f0:	46d8      	mov	r8, fp
   1a2f2:	e65b      	b.n	19fac <__aeabi_dadd+0x108>
   1a2f4:	0006      	movs	r6, r0
   1a2f6:	2400      	movs	r4, #0
   1a2f8:	2700      	movs	r7, #0
   1a2fa:	e697      	b.n	1a02c <__aeabi_dadd+0x188>
   1a2fc:	4650      	mov	r0, sl
   1a2fe:	000b      	movs	r3, r1
   1a300:	3820      	subs	r0, #32
   1a302:	40c3      	lsrs	r3, r0
   1a304:	4699      	mov	r9, r3
   1a306:	4653      	mov	r3, sl
   1a308:	2b20      	cmp	r3, #32
   1a30a:	d100      	bne.n	1a30e <__aeabi_dadd+0x46a>
   1a30c:	e095      	b.n	1a43a <__aeabi_dadd+0x596>
   1a30e:	2340      	movs	r3, #64	; 0x40
   1a310:	4650      	mov	r0, sl
   1a312:	1a1b      	subs	r3, r3, r0
   1a314:	4099      	lsls	r1, r3
   1a316:	430a      	orrs	r2, r1
   1a318:	1e51      	subs	r1, r2, #1
   1a31a:	418a      	sbcs	r2, r1
   1a31c:	464b      	mov	r3, r9
   1a31e:	2100      	movs	r1, #0
   1a320:	431a      	orrs	r2, r3
   1a322:	e69f      	b.n	1a064 <__aeabi_dadd+0x1c0>
   1a324:	2e00      	cmp	r6, #0
   1a326:	d130      	bne.n	1a38a <__aeabi_dadd+0x4e6>
   1a328:	0026      	movs	r6, r4
   1a32a:	433e      	orrs	r6, r7
   1a32c:	d067      	beq.n	1a3fe <__aeabi_dadd+0x55a>
   1a32e:	43db      	mvns	r3, r3
   1a330:	469a      	mov	sl, r3
   1a332:	2b00      	cmp	r3, #0
   1a334:	d01c      	beq.n	1a370 <__aeabi_dadd+0x4cc>
   1a336:	4e61      	ldr	r6, [pc, #388]	; (1a4bc <__aeabi_dadd+0x618>)
   1a338:	42b0      	cmp	r0, r6
   1a33a:	d060      	beq.n	1a3fe <__aeabi_dadd+0x55a>
   1a33c:	4653      	mov	r3, sl
   1a33e:	2b38      	cmp	r3, #56	; 0x38
   1a340:	dd00      	ble.n	1a344 <__aeabi_dadd+0x4a0>
   1a342:	e096      	b.n	1a472 <__aeabi_dadd+0x5ce>
   1a344:	2b1f      	cmp	r3, #31
   1a346:	dd00      	ble.n	1a34a <__aeabi_dadd+0x4a6>
   1a348:	e09f      	b.n	1a48a <__aeabi_dadd+0x5e6>
   1a34a:	2620      	movs	r6, #32
   1a34c:	1af3      	subs	r3, r6, r3
   1a34e:	0026      	movs	r6, r4
   1a350:	409e      	lsls	r6, r3
   1a352:	469c      	mov	ip, r3
   1a354:	46b3      	mov	fp, r6
   1a356:	4653      	mov	r3, sl
   1a358:	003e      	movs	r6, r7
   1a35a:	40de      	lsrs	r6, r3
   1a35c:	0033      	movs	r3, r6
   1a35e:	465e      	mov	r6, fp
   1a360:	431e      	orrs	r6, r3
   1a362:	4663      	mov	r3, ip
   1a364:	409f      	lsls	r7, r3
   1a366:	1e7b      	subs	r3, r7, #1
   1a368:	419f      	sbcs	r7, r3
   1a36a:	4653      	mov	r3, sl
   1a36c:	40dc      	lsrs	r4, r3
   1a36e:	4337      	orrs	r7, r6
   1a370:	18bf      	adds	r7, r7, r2
   1a372:	4297      	cmp	r7, r2
   1a374:	4192      	sbcs	r2, r2
   1a376:	1864      	adds	r4, r4, r1
   1a378:	4252      	negs	r2, r2
   1a37a:	18a4      	adds	r4, r4, r2
   1a37c:	0006      	movs	r6, r0
   1a37e:	e678      	b.n	1a072 <__aeabi_dadd+0x1ce>
   1a380:	4327      	orrs	r7, r4
   1a382:	1e7c      	subs	r4, r7, #1
   1a384:	41a7      	sbcs	r7, r4
   1a386:	2400      	movs	r4, #0
   1a388:	e737      	b.n	1a1fa <__aeabi_dadd+0x356>
   1a38a:	4e4c      	ldr	r6, [pc, #304]	; (1a4bc <__aeabi_dadd+0x618>)
   1a38c:	42b0      	cmp	r0, r6
   1a38e:	d036      	beq.n	1a3fe <__aeabi_dadd+0x55a>
   1a390:	2680      	movs	r6, #128	; 0x80
   1a392:	425b      	negs	r3, r3
   1a394:	0436      	lsls	r6, r6, #16
   1a396:	469a      	mov	sl, r3
   1a398:	4334      	orrs	r4, r6
   1a39a:	e7cf      	b.n	1a33c <__aeabi_dadd+0x498>
   1a39c:	0018      	movs	r0, r3
   1a39e:	4310      	orrs	r0, r2
   1a3a0:	d100      	bne.n	1a3a4 <__aeabi_dadd+0x500>
   1a3a2:	e603      	b.n	19fac <__aeabi_dadd+0x108>
   1a3a4:	1ab8      	subs	r0, r7, r2
   1a3a6:	4684      	mov	ip, r0
   1a3a8:	4567      	cmp	r7, ip
   1a3aa:	41ad      	sbcs	r5, r5
   1a3ac:	1ae0      	subs	r0, r4, r3
   1a3ae:	426d      	negs	r5, r5
   1a3b0:	1b40      	subs	r0, r0, r5
   1a3b2:	0205      	lsls	r5, r0, #8
   1a3b4:	d400      	bmi.n	1a3b8 <__aeabi_dadd+0x514>
   1a3b6:	e62c      	b.n	1a012 <__aeabi_dadd+0x16e>
   1a3b8:	1bd7      	subs	r7, r2, r7
   1a3ba:	42ba      	cmp	r2, r7
   1a3bc:	4192      	sbcs	r2, r2
   1a3be:	1b1c      	subs	r4, r3, r4
   1a3c0:	4252      	negs	r2, r2
   1a3c2:	1aa4      	subs	r4, r4, r2
   1a3c4:	46d8      	mov	r8, fp
   1a3c6:	e5f1      	b.n	19fac <__aeabi_dadd+0x108>
   1a3c8:	0018      	movs	r0, r3
   1a3ca:	4310      	orrs	r0, r2
   1a3cc:	d100      	bne.n	1a3d0 <__aeabi_dadd+0x52c>
   1a3ce:	e763      	b.n	1a298 <__aeabi_dadd+0x3f4>
   1a3d0:	08f8      	lsrs	r0, r7, #3
   1a3d2:	0767      	lsls	r7, r4, #29
   1a3d4:	4307      	orrs	r7, r0
   1a3d6:	2080      	movs	r0, #128	; 0x80
   1a3d8:	08e4      	lsrs	r4, r4, #3
   1a3da:	0300      	lsls	r0, r0, #12
   1a3dc:	4204      	tst	r4, r0
   1a3de:	d008      	beq.n	1a3f2 <__aeabi_dadd+0x54e>
   1a3e0:	08dd      	lsrs	r5, r3, #3
   1a3e2:	4205      	tst	r5, r0
   1a3e4:	d105      	bne.n	1a3f2 <__aeabi_dadd+0x54e>
   1a3e6:	08d2      	lsrs	r2, r2, #3
   1a3e8:	0759      	lsls	r1, r3, #29
   1a3ea:	4311      	orrs	r1, r2
   1a3ec:	000f      	movs	r7, r1
   1a3ee:	002c      	movs	r4, r5
   1a3f0:	46d8      	mov	r8, fp
   1a3f2:	0f7b      	lsrs	r3, r7, #29
   1a3f4:	00e4      	lsls	r4, r4, #3
   1a3f6:	431c      	orrs	r4, r3
   1a3f8:	00ff      	lsls	r7, r7, #3
   1a3fa:	4e30      	ldr	r6, [pc, #192]	; (1a4bc <__aeabi_dadd+0x618>)
   1a3fc:	e5d6      	b.n	19fac <__aeabi_dadd+0x108>
   1a3fe:	000c      	movs	r4, r1
   1a400:	0017      	movs	r7, r2
   1a402:	0006      	movs	r6, r0
   1a404:	e5d2      	b.n	19fac <__aeabi_dadd+0x108>
   1a406:	2b00      	cmp	r3, #0
   1a408:	d038      	beq.n	1a47c <__aeabi_dadd+0x5d8>
   1a40a:	000b      	movs	r3, r1
   1a40c:	4313      	orrs	r3, r2
   1a40e:	d100      	bne.n	1a412 <__aeabi_dadd+0x56e>
   1a410:	e742      	b.n	1a298 <__aeabi_dadd+0x3f4>
   1a412:	08f8      	lsrs	r0, r7, #3
   1a414:	0767      	lsls	r7, r4, #29
   1a416:	4307      	orrs	r7, r0
   1a418:	2080      	movs	r0, #128	; 0x80
   1a41a:	08e4      	lsrs	r4, r4, #3
   1a41c:	0300      	lsls	r0, r0, #12
   1a41e:	4204      	tst	r4, r0
   1a420:	d0e7      	beq.n	1a3f2 <__aeabi_dadd+0x54e>
   1a422:	08cb      	lsrs	r3, r1, #3
   1a424:	4203      	tst	r3, r0
   1a426:	d1e4      	bne.n	1a3f2 <__aeabi_dadd+0x54e>
   1a428:	08d2      	lsrs	r2, r2, #3
   1a42a:	0749      	lsls	r1, r1, #29
   1a42c:	4311      	orrs	r1, r2
   1a42e:	000f      	movs	r7, r1
   1a430:	001c      	movs	r4, r3
   1a432:	e7de      	b.n	1a3f2 <__aeabi_dadd+0x54e>
   1a434:	2700      	movs	r7, #0
   1a436:	2400      	movs	r4, #0
   1a438:	e5d5      	b.n	19fe6 <__aeabi_dadd+0x142>
   1a43a:	2100      	movs	r1, #0
   1a43c:	e76b      	b.n	1a316 <__aeabi_dadd+0x472>
   1a43e:	2500      	movs	r5, #0
   1a440:	2700      	movs	r7, #0
   1a442:	e5f3      	b.n	1a02c <__aeabi_dadd+0x188>
   1a444:	464e      	mov	r6, r9
   1a446:	0025      	movs	r5, r4
   1a448:	3e20      	subs	r6, #32
   1a44a:	40f5      	lsrs	r5, r6
   1a44c:	464b      	mov	r3, r9
   1a44e:	002e      	movs	r6, r5
   1a450:	2b20      	cmp	r3, #32
   1a452:	d02d      	beq.n	1a4b0 <__aeabi_dadd+0x60c>
   1a454:	2540      	movs	r5, #64	; 0x40
   1a456:	1aed      	subs	r5, r5, r3
   1a458:	40ac      	lsls	r4, r5
   1a45a:	4327      	orrs	r7, r4
   1a45c:	1e7c      	subs	r4, r7, #1
   1a45e:	41a7      	sbcs	r7, r4
   1a460:	2400      	movs	r4, #0
   1a462:	4337      	orrs	r7, r6
   1a464:	e6c9      	b.n	1a1fa <__aeabi_dadd+0x356>
   1a466:	2480      	movs	r4, #128	; 0x80
   1a468:	2500      	movs	r5, #0
   1a46a:	0324      	lsls	r4, r4, #12
   1a46c:	4e13      	ldr	r6, [pc, #76]	; (1a4bc <__aeabi_dadd+0x618>)
   1a46e:	2700      	movs	r7, #0
   1a470:	e5dc      	b.n	1a02c <__aeabi_dadd+0x188>
   1a472:	4327      	orrs	r7, r4
   1a474:	1e7c      	subs	r4, r7, #1
   1a476:	41a7      	sbcs	r7, r4
   1a478:	2400      	movs	r4, #0
   1a47a:	e779      	b.n	1a370 <__aeabi_dadd+0x4cc>
   1a47c:	000c      	movs	r4, r1
   1a47e:	0017      	movs	r7, r2
   1a480:	4e0e      	ldr	r6, [pc, #56]	; (1a4bc <__aeabi_dadd+0x618>)
   1a482:	e593      	b.n	19fac <__aeabi_dadd+0x108>
   1a484:	000c      	movs	r4, r1
   1a486:	0017      	movs	r7, r2
   1a488:	e590      	b.n	19fac <__aeabi_dadd+0x108>
   1a48a:	4656      	mov	r6, sl
   1a48c:	0023      	movs	r3, r4
   1a48e:	3e20      	subs	r6, #32
   1a490:	40f3      	lsrs	r3, r6
   1a492:	4699      	mov	r9, r3
   1a494:	4653      	mov	r3, sl
   1a496:	2b20      	cmp	r3, #32
   1a498:	d00e      	beq.n	1a4b8 <__aeabi_dadd+0x614>
   1a49a:	2340      	movs	r3, #64	; 0x40
   1a49c:	4656      	mov	r6, sl
   1a49e:	1b9b      	subs	r3, r3, r6
   1a4a0:	409c      	lsls	r4, r3
   1a4a2:	4327      	orrs	r7, r4
   1a4a4:	1e7c      	subs	r4, r7, #1
   1a4a6:	41a7      	sbcs	r7, r4
   1a4a8:	464b      	mov	r3, r9
   1a4aa:	2400      	movs	r4, #0
   1a4ac:	431f      	orrs	r7, r3
   1a4ae:	e75f      	b.n	1a370 <__aeabi_dadd+0x4cc>
   1a4b0:	2400      	movs	r4, #0
   1a4b2:	e7d2      	b.n	1a45a <__aeabi_dadd+0x5b6>
   1a4b4:	0017      	movs	r7, r2
   1a4b6:	e5b2      	b.n	1a01e <__aeabi_dadd+0x17a>
   1a4b8:	2400      	movs	r4, #0
   1a4ba:	e7f2      	b.n	1a4a2 <__aeabi_dadd+0x5fe>
   1a4bc:	000007ff 	.word	0x000007ff
   1a4c0:	ff7fffff 	.word	0xff7fffff

0001a4c4 <__aeabi_ddiv>:
   1a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4c6:	4657      	mov	r7, sl
   1a4c8:	4645      	mov	r5, r8
   1a4ca:	46de      	mov	lr, fp
   1a4cc:	464e      	mov	r6, r9
   1a4ce:	b5e0      	push	{r5, r6, r7, lr}
   1a4d0:	004c      	lsls	r4, r1, #1
   1a4d2:	030e      	lsls	r6, r1, #12
   1a4d4:	b087      	sub	sp, #28
   1a4d6:	4683      	mov	fp, r0
   1a4d8:	4692      	mov	sl, r2
   1a4da:	001d      	movs	r5, r3
   1a4dc:	4680      	mov	r8, r0
   1a4de:	0b36      	lsrs	r6, r6, #12
   1a4e0:	0d64      	lsrs	r4, r4, #21
   1a4e2:	0fcf      	lsrs	r7, r1, #31
   1a4e4:	2c00      	cmp	r4, #0
   1a4e6:	d04f      	beq.n	1a588 <__aeabi_ddiv+0xc4>
   1a4e8:	4b6f      	ldr	r3, [pc, #444]	; (1a6a8 <__aeabi_ddiv+0x1e4>)
   1a4ea:	429c      	cmp	r4, r3
   1a4ec:	d035      	beq.n	1a55a <__aeabi_ddiv+0x96>
   1a4ee:	2380      	movs	r3, #128	; 0x80
   1a4f0:	0f42      	lsrs	r2, r0, #29
   1a4f2:	041b      	lsls	r3, r3, #16
   1a4f4:	00f6      	lsls	r6, r6, #3
   1a4f6:	4313      	orrs	r3, r2
   1a4f8:	4333      	orrs	r3, r6
   1a4fa:	4699      	mov	r9, r3
   1a4fc:	00c3      	lsls	r3, r0, #3
   1a4fe:	4698      	mov	r8, r3
   1a500:	4b6a      	ldr	r3, [pc, #424]	; (1a6ac <__aeabi_ddiv+0x1e8>)
   1a502:	2600      	movs	r6, #0
   1a504:	469c      	mov	ip, r3
   1a506:	2300      	movs	r3, #0
   1a508:	4464      	add	r4, ip
   1a50a:	9303      	str	r3, [sp, #12]
   1a50c:	032b      	lsls	r3, r5, #12
   1a50e:	0b1b      	lsrs	r3, r3, #12
   1a510:	469b      	mov	fp, r3
   1a512:	006b      	lsls	r3, r5, #1
   1a514:	0fed      	lsrs	r5, r5, #31
   1a516:	4650      	mov	r0, sl
   1a518:	0d5b      	lsrs	r3, r3, #21
   1a51a:	9501      	str	r5, [sp, #4]
   1a51c:	d05e      	beq.n	1a5dc <__aeabi_ddiv+0x118>
   1a51e:	4a62      	ldr	r2, [pc, #392]	; (1a6a8 <__aeabi_ddiv+0x1e4>)
   1a520:	4293      	cmp	r3, r2
   1a522:	d053      	beq.n	1a5cc <__aeabi_ddiv+0x108>
   1a524:	465a      	mov	r2, fp
   1a526:	00d1      	lsls	r1, r2, #3
   1a528:	2280      	movs	r2, #128	; 0x80
   1a52a:	0f40      	lsrs	r0, r0, #29
   1a52c:	0412      	lsls	r2, r2, #16
   1a52e:	4302      	orrs	r2, r0
   1a530:	430a      	orrs	r2, r1
   1a532:	4693      	mov	fp, r2
   1a534:	4652      	mov	r2, sl
   1a536:	00d1      	lsls	r1, r2, #3
   1a538:	4a5c      	ldr	r2, [pc, #368]	; (1a6ac <__aeabi_ddiv+0x1e8>)
   1a53a:	4694      	mov	ip, r2
   1a53c:	2200      	movs	r2, #0
   1a53e:	4463      	add	r3, ip
   1a540:	0038      	movs	r0, r7
   1a542:	4068      	eors	r0, r5
   1a544:	4684      	mov	ip, r0
   1a546:	9002      	str	r0, [sp, #8]
   1a548:	1ae4      	subs	r4, r4, r3
   1a54a:	4316      	orrs	r6, r2
   1a54c:	2e0f      	cmp	r6, #15
   1a54e:	d900      	bls.n	1a552 <__aeabi_ddiv+0x8e>
   1a550:	e0b4      	b.n	1a6bc <__aeabi_ddiv+0x1f8>
   1a552:	4b57      	ldr	r3, [pc, #348]	; (1a6b0 <__aeabi_ddiv+0x1ec>)
   1a554:	00b6      	lsls	r6, r6, #2
   1a556:	599b      	ldr	r3, [r3, r6]
   1a558:	469f      	mov	pc, r3
   1a55a:	0003      	movs	r3, r0
   1a55c:	4333      	orrs	r3, r6
   1a55e:	4699      	mov	r9, r3
   1a560:	d16c      	bne.n	1a63c <__aeabi_ddiv+0x178>
   1a562:	2300      	movs	r3, #0
   1a564:	4698      	mov	r8, r3
   1a566:	3302      	adds	r3, #2
   1a568:	2608      	movs	r6, #8
   1a56a:	9303      	str	r3, [sp, #12]
   1a56c:	e7ce      	b.n	1a50c <__aeabi_ddiv+0x48>
   1a56e:	46cb      	mov	fp, r9
   1a570:	4641      	mov	r1, r8
   1a572:	9a03      	ldr	r2, [sp, #12]
   1a574:	9701      	str	r7, [sp, #4]
   1a576:	2a02      	cmp	r2, #2
   1a578:	d165      	bne.n	1a646 <__aeabi_ddiv+0x182>
   1a57a:	9b01      	ldr	r3, [sp, #4]
   1a57c:	4c4a      	ldr	r4, [pc, #296]	; (1a6a8 <__aeabi_ddiv+0x1e4>)
   1a57e:	469c      	mov	ip, r3
   1a580:	2300      	movs	r3, #0
   1a582:	2200      	movs	r2, #0
   1a584:	4698      	mov	r8, r3
   1a586:	e06b      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a588:	0003      	movs	r3, r0
   1a58a:	4333      	orrs	r3, r6
   1a58c:	4699      	mov	r9, r3
   1a58e:	d04e      	beq.n	1a62e <__aeabi_ddiv+0x16a>
   1a590:	2e00      	cmp	r6, #0
   1a592:	d100      	bne.n	1a596 <__aeabi_ddiv+0xd2>
   1a594:	e1bc      	b.n	1a910 <__aeabi_ddiv+0x44c>
   1a596:	0030      	movs	r0, r6
   1a598:	f001 fa0c 	bl	1b9b4 <__clzsi2>
   1a59c:	0003      	movs	r3, r0
   1a59e:	3b0b      	subs	r3, #11
   1a5a0:	2b1c      	cmp	r3, #28
   1a5a2:	dd00      	ble.n	1a5a6 <__aeabi_ddiv+0xe2>
   1a5a4:	e1ac      	b.n	1a900 <__aeabi_ddiv+0x43c>
   1a5a6:	221d      	movs	r2, #29
   1a5a8:	1ad3      	subs	r3, r2, r3
   1a5aa:	465a      	mov	r2, fp
   1a5ac:	0001      	movs	r1, r0
   1a5ae:	40da      	lsrs	r2, r3
   1a5b0:	3908      	subs	r1, #8
   1a5b2:	408e      	lsls	r6, r1
   1a5b4:	0013      	movs	r3, r2
   1a5b6:	4333      	orrs	r3, r6
   1a5b8:	4699      	mov	r9, r3
   1a5ba:	465b      	mov	r3, fp
   1a5bc:	408b      	lsls	r3, r1
   1a5be:	4698      	mov	r8, r3
   1a5c0:	2300      	movs	r3, #0
   1a5c2:	4c3c      	ldr	r4, [pc, #240]	; (1a6b4 <__aeabi_ddiv+0x1f0>)
   1a5c4:	2600      	movs	r6, #0
   1a5c6:	1a24      	subs	r4, r4, r0
   1a5c8:	9303      	str	r3, [sp, #12]
   1a5ca:	e79f      	b.n	1a50c <__aeabi_ddiv+0x48>
   1a5cc:	4651      	mov	r1, sl
   1a5ce:	465a      	mov	r2, fp
   1a5d0:	4311      	orrs	r1, r2
   1a5d2:	d129      	bne.n	1a628 <__aeabi_ddiv+0x164>
   1a5d4:	2200      	movs	r2, #0
   1a5d6:	4693      	mov	fp, r2
   1a5d8:	3202      	adds	r2, #2
   1a5da:	e7b1      	b.n	1a540 <__aeabi_ddiv+0x7c>
   1a5dc:	4659      	mov	r1, fp
   1a5de:	4301      	orrs	r1, r0
   1a5e0:	d01e      	beq.n	1a620 <__aeabi_ddiv+0x15c>
   1a5e2:	465b      	mov	r3, fp
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d100      	bne.n	1a5ea <__aeabi_ddiv+0x126>
   1a5e8:	e19e      	b.n	1a928 <__aeabi_ddiv+0x464>
   1a5ea:	4658      	mov	r0, fp
   1a5ec:	f001 f9e2 	bl	1b9b4 <__clzsi2>
   1a5f0:	0003      	movs	r3, r0
   1a5f2:	3b0b      	subs	r3, #11
   1a5f4:	2b1c      	cmp	r3, #28
   1a5f6:	dd00      	ble.n	1a5fa <__aeabi_ddiv+0x136>
   1a5f8:	e18f      	b.n	1a91a <__aeabi_ddiv+0x456>
   1a5fa:	0002      	movs	r2, r0
   1a5fc:	4659      	mov	r1, fp
   1a5fe:	3a08      	subs	r2, #8
   1a600:	4091      	lsls	r1, r2
   1a602:	468b      	mov	fp, r1
   1a604:	211d      	movs	r1, #29
   1a606:	1acb      	subs	r3, r1, r3
   1a608:	4651      	mov	r1, sl
   1a60a:	40d9      	lsrs	r1, r3
   1a60c:	000b      	movs	r3, r1
   1a60e:	4659      	mov	r1, fp
   1a610:	430b      	orrs	r3, r1
   1a612:	4651      	mov	r1, sl
   1a614:	469b      	mov	fp, r3
   1a616:	4091      	lsls	r1, r2
   1a618:	4b26      	ldr	r3, [pc, #152]	; (1a6b4 <__aeabi_ddiv+0x1f0>)
   1a61a:	2200      	movs	r2, #0
   1a61c:	1a1b      	subs	r3, r3, r0
   1a61e:	e78f      	b.n	1a540 <__aeabi_ddiv+0x7c>
   1a620:	2300      	movs	r3, #0
   1a622:	2201      	movs	r2, #1
   1a624:	469b      	mov	fp, r3
   1a626:	e78b      	b.n	1a540 <__aeabi_ddiv+0x7c>
   1a628:	4651      	mov	r1, sl
   1a62a:	2203      	movs	r2, #3
   1a62c:	e788      	b.n	1a540 <__aeabi_ddiv+0x7c>
   1a62e:	2300      	movs	r3, #0
   1a630:	4698      	mov	r8, r3
   1a632:	3301      	adds	r3, #1
   1a634:	2604      	movs	r6, #4
   1a636:	2400      	movs	r4, #0
   1a638:	9303      	str	r3, [sp, #12]
   1a63a:	e767      	b.n	1a50c <__aeabi_ddiv+0x48>
   1a63c:	2303      	movs	r3, #3
   1a63e:	46b1      	mov	r9, r6
   1a640:	9303      	str	r3, [sp, #12]
   1a642:	260c      	movs	r6, #12
   1a644:	e762      	b.n	1a50c <__aeabi_ddiv+0x48>
   1a646:	2a03      	cmp	r2, #3
   1a648:	d100      	bne.n	1a64c <__aeabi_ddiv+0x188>
   1a64a:	e25c      	b.n	1ab06 <__aeabi_ddiv+0x642>
   1a64c:	9b01      	ldr	r3, [sp, #4]
   1a64e:	2a01      	cmp	r2, #1
   1a650:	d000      	beq.n	1a654 <__aeabi_ddiv+0x190>
   1a652:	e1e4      	b.n	1aa1e <__aeabi_ddiv+0x55a>
   1a654:	4013      	ands	r3, r2
   1a656:	469c      	mov	ip, r3
   1a658:	2300      	movs	r3, #0
   1a65a:	2400      	movs	r4, #0
   1a65c:	2200      	movs	r2, #0
   1a65e:	4698      	mov	r8, r3
   1a660:	2100      	movs	r1, #0
   1a662:	0312      	lsls	r2, r2, #12
   1a664:	0b13      	lsrs	r3, r2, #12
   1a666:	0d0a      	lsrs	r2, r1, #20
   1a668:	0512      	lsls	r2, r2, #20
   1a66a:	431a      	orrs	r2, r3
   1a66c:	0523      	lsls	r3, r4, #20
   1a66e:	4c12      	ldr	r4, [pc, #72]	; (1a6b8 <__aeabi_ddiv+0x1f4>)
   1a670:	4640      	mov	r0, r8
   1a672:	4022      	ands	r2, r4
   1a674:	4313      	orrs	r3, r2
   1a676:	4662      	mov	r2, ip
   1a678:	005b      	lsls	r3, r3, #1
   1a67a:	07d2      	lsls	r2, r2, #31
   1a67c:	085b      	lsrs	r3, r3, #1
   1a67e:	4313      	orrs	r3, r2
   1a680:	0019      	movs	r1, r3
   1a682:	b007      	add	sp, #28
   1a684:	bc3c      	pop	{r2, r3, r4, r5}
   1a686:	4690      	mov	r8, r2
   1a688:	4699      	mov	r9, r3
   1a68a:	46a2      	mov	sl, r4
   1a68c:	46ab      	mov	fp, r5
   1a68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a690:	2300      	movs	r3, #0
   1a692:	2280      	movs	r2, #128	; 0x80
   1a694:	469c      	mov	ip, r3
   1a696:	0312      	lsls	r2, r2, #12
   1a698:	4698      	mov	r8, r3
   1a69a:	4c03      	ldr	r4, [pc, #12]	; (1a6a8 <__aeabi_ddiv+0x1e4>)
   1a69c:	e7e0      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a69e:	2300      	movs	r3, #0
   1a6a0:	4c01      	ldr	r4, [pc, #4]	; (1a6a8 <__aeabi_ddiv+0x1e4>)
   1a6a2:	2200      	movs	r2, #0
   1a6a4:	4698      	mov	r8, r3
   1a6a6:	e7db      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a6a8:	000007ff 	.word	0x000007ff
   1a6ac:	fffffc01 	.word	0xfffffc01
   1a6b0:	0001f3a0 	.word	0x0001f3a0
   1a6b4:	fffffc0d 	.word	0xfffffc0d
   1a6b8:	800fffff 	.word	0x800fffff
   1a6bc:	45d9      	cmp	r9, fp
   1a6be:	d900      	bls.n	1a6c2 <__aeabi_ddiv+0x1fe>
   1a6c0:	e139      	b.n	1a936 <__aeabi_ddiv+0x472>
   1a6c2:	d100      	bne.n	1a6c6 <__aeabi_ddiv+0x202>
   1a6c4:	e134      	b.n	1a930 <__aeabi_ddiv+0x46c>
   1a6c6:	2300      	movs	r3, #0
   1a6c8:	4646      	mov	r6, r8
   1a6ca:	464d      	mov	r5, r9
   1a6cc:	469a      	mov	sl, r3
   1a6ce:	3c01      	subs	r4, #1
   1a6d0:	465b      	mov	r3, fp
   1a6d2:	0e0a      	lsrs	r2, r1, #24
   1a6d4:	021b      	lsls	r3, r3, #8
   1a6d6:	431a      	orrs	r2, r3
   1a6d8:	020b      	lsls	r3, r1, #8
   1a6da:	0c17      	lsrs	r7, r2, #16
   1a6dc:	9303      	str	r3, [sp, #12]
   1a6de:	0413      	lsls	r3, r2, #16
   1a6e0:	0c1b      	lsrs	r3, r3, #16
   1a6e2:	0039      	movs	r1, r7
   1a6e4:	0028      	movs	r0, r5
   1a6e6:	4690      	mov	r8, r2
   1a6e8:	9301      	str	r3, [sp, #4]
   1a6ea:	f7ff f9fd 	bl	19ae8 <__udivsi3>
   1a6ee:	0002      	movs	r2, r0
   1a6f0:	9b01      	ldr	r3, [sp, #4]
   1a6f2:	4683      	mov	fp, r0
   1a6f4:	435a      	muls	r2, r3
   1a6f6:	0028      	movs	r0, r5
   1a6f8:	0039      	movs	r1, r7
   1a6fa:	4691      	mov	r9, r2
   1a6fc:	f7ff fa7a 	bl	19bf4 <__aeabi_uidivmod>
   1a700:	0c35      	lsrs	r5, r6, #16
   1a702:	0409      	lsls	r1, r1, #16
   1a704:	430d      	orrs	r5, r1
   1a706:	45a9      	cmp	r9, r5
   1a708:	d90d      	bls.n	1a726 <__aeabi_ddiv+0x262>
   1a70a:	465b      	mov	r3, fp
   1a70c:	4445      	add	r5, r8
   1a70e:	3b01      	subs	r3, #1
   1a710:	45a8      	cmp	r8, r5
   1a712:	d900      	bls.n	1a716 <__aeabi_ddiv+0x252>
   1a714:	e13a      	b.n	1a98c <__aeabi_ddiv+0x4c8>
   1a716:	45a9      	cmp	r9, r5
   1a718:	d800      	bhi.n	1a71c <__aeabi_ddiv+0x258>
   1a71a:	e137      	b.n	1a98c <__aeabi_ddiv+0x4c8>
   1a71c:	2302      	movs	r3, #2
   1a71e:	425b      	negs	r3, r3
   1a720:	469c      	mov	ip, r3
   1a722:	4445      	add	r5, r8
   1a724:	44e3      	add	fp, ip
   1a726:	464b      	mov	r3, r9
   1a728:	1aeb      	subs	r3, r5, r3
   1a72a:	0039      	movs	r1, r7
   1a72c:	0018      	movs	r0, r3
   1a72e:	9304      	str	r3, [sp, #16]
   1a730:	f7ff f9da 	bl	19ae8 <__udivsi3>
   1a734:	9b01      	ldr	r3, [sp, #4]
   1a736:	0005      	movs	r5, r0
   1a738:	4343      	muls	r3, r0
   1a73a:	0039      	movs	r1, r7
   1a73c:	9804      	ldr	r0, [sp, #16]
   1a73e:	4699      	mov	r9, r3
   1a740:	f7ff fa58 	bl	19bf4 <__aeabi_uidivmod>
   1a744:	0433      	lsls	r3, r6, #16
   1a746:	0409      	lsls	r1, r1, #16
   1a748:	0c1b      	lsrs	r3, r3, #16
   1a74a:	430b      	orrs	r3, r1
   1a74c:	4599      	cmp	r9, r3
   1a74e:	d909      	bls.n	1a764 <__aeabi_ddiv+0x2a0>
   1a750:	4443      	add	r3, r8
   1a752:	1e6a      	subs	r2, r5, #1
   1a754:	4598      	cmp	r8, r3
   1a756:	d900      	bls.n	1a75a <__aeabi_ddiv+0x296>
   1a758:	e11a      	b.n	1a990 <__aeabi_ddiv+0x4cc>
   1a75a:	4599      	cmp	r9, r3
   1a75c:	d800      	bhi.n	1a760 <__aeabi_ddiv+0x29c>
   1a75e:	e117      	b.n	1a990 <__aeabi_ddiv+0x4cc>
   1a760:	3d02      	subs	r5, #2
   1a762:	4443      	add	r3, r8
   1a764:	464a      	mov	r2, r9
   1a766:	1a9b      	subs	r3, r3, r2
   1a768:	465a      	mov	r2, fp
   1a76a:	0412      	lsls	r2, r2, #16
   1a76c:	432a      	orrs	r2, r5
   1a76e:	9903      	ldr	r1, [sp, #12]
   1a770:	4693      	mov	fp, r2
   1a772:	0c10      	lsrs	r0, r2, #16
   1a774:	0c0a      	lsrs	r2, r1, #16
   1a776:	4691      	mov	r9, r2
   1a778:	0409      	lsls	r1, r1, #16
   1a77a:	465a      	mov	r2, fp
   1a77c:	0c09      	lsrs	r1, r1, #16
   1a77e:	464e      	mov	r6, r9
   1a780:	000d      	movs	r5, r1
   1a782:	0412      	lsls	r2, r2, #16
   1a784:	0c12      	lsrs	r2, r2, #16
   1a786:	4345      	muls	r5, r0
   1a788:	9105      	str	r1, [sp, #20]
   1a78a:	4351      	muls	r1, r2
   1a78c:	4372      	muls	r2, r6
   1a78e:	4370      	muls	r0, r6
   1a790:	1952      	adds	r2, r2, r5
   1a792:	0c0e      	lsrs	r6, r1, #16
   1a794:	18b2      	adds	r2, r6, r2
   1a796:	4295      	cmp	r5, r2
   1a798:	d903      	bls.n	1a7a2 <__aeabi_ddiv+0x2de>
   1a79a:	2580      	movs	r5, #128	; 0x80
   1a79c:	026d      	lsls	r5, r5, #9
   1a79e:	46ac      	mov	ip, r5
   1a7a0:	4460      	add	r0, ip
   1a7a2:	0c15      	lsrs	r5, r2, #16
   1a7a4:	0409      	lsls	r1, r1, #16
   1a7a6:	0412      	lsls	r2, r2, #16
   1a7a8:	0c09      	lsrs	r1, r1, #16
   1a7aa:	1828      	adds	r0, r5, r0
   1a7ac:	1852      	adds	r2, r2, r1
   1a7ae:	4283      	cmp	r3, r0
   1a7b0:	d200      	bcs.n	1a7b4 <__aeabi_ddiv+0x2f0>
   1a7b2:	e0ce      	b.n	1a952 <__aeabi_ddiv+0x48e>
   1a7b4:	d100      	bne.n	1a7b8 <__aeabi_ddiv+0x2f4>
   1a7b6:	e0c8      	b.n	1a94a <__aeabi_ddiv+0x486>
   1a7b8:	1a1d      	subs	r5, r3, r0
   1a7ba:	4653      	mov	r3, sl
   1a7bc:	1a9e      	subs	r6, r3, r2
   1a7be:	45b2      	cmp	sl, r6
   1a7c0:	4192      	sbcs	r2, r2
   1a7c2:	4252      	negs	r2, r2
   1a7c4:	1aab      	subs	r3, r5, r2
   1a7c6:	469a      	mov	sl, r3
   1a7c8:	4598      	cmp	r8, r3
   1a7ca:	d100      	bne.n	1a7ce <__aeabi_ddiv+0x30a>
   1a7cc:	e117      	b.n	1a9fe <__aeabi_ddiv+0x53a>
   1a7ce:	0039      	movs	r1, r7
   1a7d0:	0018      	movs	r0, r3
   1a7d2:	f7ff f989 	bl	19ae8 <__udivsi3>
   1a7d6:	9b01      	ldr	r3, [sp, #4]
   1a7d8:	0005      	movs	r5, r0
   1a7da:	4343      	muls	r3, r0
   1a7dc:	0039      	movs	r1, r7
   1a7de:	4650      	mov	r0, sl
   1a7e0:	9304      	str	r3, [sp, #16]
   1a7e2:	f7ff fa07 	bl	19bf4 <__aeabi_uidivmod>
   1a7e6:	9804      	ldr	r0, [sp, #16]
   1a7e8:	040b      	lsls	r3, r1, #16
   1a7ea:	0c31      	lsrs	r1, r6, #16
   1a7ec:	4319      	orrs	r1, r3
   1a7ee:	4288      	cmp	r0, r1
   1a7f0:	d909      	bls.n	1a806 <__aeabi_ddiv+0x342>
   1a7f2:	4441      	add	r1, r8
   1a7f4:	1e6b      	subs	r3, r5, #1
   1a7f6:	4588      	cmp	r8, r1
   1a7f8:	d900      	bls.n	1a7fc <__aeabi_ddiv+0x338>
   1a7fa:	e107      	b.n	1aa0c <__aeabi_ddiv+0x548>
   1a7fc:	4288      	cmp	r0, r1
   1a7fe:	d800      	bhi.n	1a802 <__aeabi_ddiv+0x33e>
   1a800:	e104      	b.n	1aa0c <__aeabi_ddiv+0x548>
   1a802:	3d02      	subs	r5, #2
   1a804:	4441      	add	r1, r8
   1a806:	9b04      	ldr	r3, [sp, #16]
   1a808:	1acb      	subs	r3, r1, r3
   1a80a:	0018      	movs	r0, r3
   1a80c:	0039      	movs	r1, r7
   1a80e:	9304      	str	r3, [sp, #16]
   1a810:	f7ff f96a 	bl	19ae8 <__udivsi3>
   1a814:	9b01      	ldr	r3, [sp, #4]
   1a816:	4682      	mov	sl, r0
   1a818:	4343      	muls	r3, r0
   1a81a:	0039      	movs	r1, r7
   1a81c:	9804      	ldr	r0, [sp, #16]
   1a81e:	9301      	str	r3, [sp, #4]
   1a820:	f7ff f9e8 	bl	19bf4 <__aeabi_uidivmod>
   1a824:	9801      	ldr	r0, [sp, #4]
   1a826:	040b      	lsls	r3, r1, #16
   1a828:	0431      	lsls	r1, r6, #16
   1a82a:	0c09      	lsrs	r1, r1, #16
   1a82c:	4319      	orrs	r1, r3
   1a82e:	4288      	cmp	r0, r1
   1a830:	d90d      	bls.n	1a84e <__aeabi_ddiv+0x38a>
   1a832:	4653      	mov	r3, sl
   1a834:	4441      	add	r1, r8
   1a836:	3b01      	subs	r3, #1
   1a838:	4588      	cmp	r8, r1
   1a83a:	d900      	bls.n	1a83e <__aeabi_ddiv+0x37a>
   1a83c:	e0e8      	b.n	1aa10 <__aeabi_ddiv+0x54c>
   1a83e:	4288      	cmp	r0, r1
   1a840:	d800      	bhi.n	1a844 <__aeabi_ddiv+0x380>
   1a842:	e0e5      	b.n	1aa10 <__aeabi_ddiv+0x54c>
   1a844:	2302      	movs	r3, #2
   1a846:	425b      	negs	r3, r3
   1a848:	469c      	mov	ip, r3
   1a84a:	4441      	add	r1, r8
   1a84c:	44e2      	add	sl, ip
   1a84e:	9b01      	ldr	r3, [sp, #4]
   1a850:	042d      	lsls	r5, r5, #16
   1a852:	1ace      	subs	r6, r1, r3
   1a854:	4651      	mov	r1, sl
   1a856:	4329      	orrs	r1, r5
   1a858:	9d05      	ldr	r5, [sp, #20]
   1a85a:	464f      	mov	r7, r9
   1a85c:	002a      	movs	r2, r5
   1a85e:	040b      	lsls	r3, r1, #16
   1a860:	0c08      	lsrs	r0, r1, #16
   1a862:	0c1b      	lsrs	r3, r3, #16
   1a864:	435a      	muls	r2, r3
   1a866:	4345      	muls	r5, r0
   1a868:	437b      	muls	r3, r7
   1a86a:	4378      	muls	r0, r7
   1a86c:	195b      	adds	r3, r3, r5
   1a86e:	0c17      	lsrs	r7, r2, #16
   1a870:	18fb      	adds	r3, r7, r3
   1a872:	429d      	cmp	r5, r3
   1a874:	d903      	bls.n	1a87e <__aeabi_ddiv+0x3ba>
   1a876:	2580      	movs	r5, #128	; 0x80
   1a878:	026d      	lsls	r5, r5, #9
   1a87a:	46ac      	mov	ip, r5
   1a87c:	4460      	add	r0, ip
   1a87e:	0c1d      	lsrs	r5, r3, #16
   1a880:	0412      	lsls	r2, r2, #16
   1a882:	041b      	lsls	r3, r3, #16
   1a884:	0c12      	lsrs	r2, r2, #16
   1a886:	1828      	adds	r0, r5, r0
   1a888:	189b      	adds	r3, r3, r2
   1a88a:	4286      	cmp	r6, r0
   1a88c:	d200      	bcs.n	1a890 <__aeabi_ddiv+0x3cc>
   1a88e:	e093      	b.n	1a9b8 <__aeabi_ddiv+0x4f4>
   1a890:	d100      	bne.n	1a894 <__aeabi_ddiv+0x3d0>
   1a892:	e08e      	b.n	1a9b2 <__aeabi_ddiv+0x4ee>
   1a894:	2301      	movs	r3, #1
   1a896:	4319      	orrs	r1, r3
   1a898:	4ba0      	ldr	r3, [pc, #640]	; (1ab1c <__aeabi_ddiv+0x658>)
   1a89a:	18e3      	adds	r3, r4, r3
   1a89c:	2b00      	cmp	r3, #0
   1a89e:	dc00      	bgt.n	1a8a2 <__aeabi_ddiv+0x3de>
   1a8a0:	e099      	b.n	1a9d6 <__aeabi_ddiv+0x512>
   1a8a2:	074a      	lsls	r2, r1, #29
   1a8a4:	d000      	beq.n	1a8a8 <__aeabi_ddiv+0x3e4>
   1a8a6:	e09e      	b.n	1a9e6 <__aeabi_ddiv+0x522>
   1a8a8:	465a      	mov	r2, fp
   1a8aa:	01d2      	lsls	r2, r2, #7
   1a8ac:	d506      	bpl.n	1a8bc <__aeabi_ddiv+0x3f8>
   1a8ae:	465a      	mov	r2, fp
   1a8b0:	4b9b      	ldr	r3, [pc, #620]	; (1ab20 <__aeabi_ddiv+0x65c>)
   1a8b2:	401a      	ands	r2, r3
   1a8b4:	2380      	movs	r3, #128	; 0x80
   1a8b6:	4693      	mov	fp, r2
   1a8b8:	00db      	lsls	r3, r3, #3
   1a8ba:	18e3      	adds	r3, r4, r3
   1a8bc:	4a99      	ldr	r2, [pc, #612]	; (1ab24 <__aeabi_ddiv+0x660>)
   1a8be:	4293      	cmp	r3, r2
   1a8c0:	dd68      	ble.n	1a994 <__aeabi_ddiv+0x4d0>
   1a8c2:	2301      	movs	r3, #1
   1a8c4:	9a02      	ldr	r2, [sp, #8]
   1a8c6:	4c98      	ldr	r4, [pc, #608]	; (1ab28 <__aeabi_ddiv+0x664>)
   1a8c8:	401a      	ands	r2, r3
   1a8ca:	2300      	movs	r3, #0
   1a8cc:	4694      	mov	ip, r2
   1a8ce:	4698      	mov	r8, r3
   1a8d0:	2200      	movs	r2, #0
   1a8d2:	e6c5      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a8d4:	2280      	movs	r2, #128	; 0x80
   1a8d6:	464b      	mov	r3, r9
   1a8d8:	0312      	lsls	r2, r2, #12
   1a8da:	4213      	tst	r3, r2
   1a8dc:	d00a      	beq.n	1a8f4 <__aeabi_ddiv+0x430>
   1a8de:	465b      	mov	r3, fp
   1a8e0:	4213      	tst	r3, r2
   1a8e2:	d106      	bne.n	1a8f2 <__aeabi_ddiv+0x42e>
   1a8e4:	431a      	orrs	r2, r3
   1a8e6:	0312      	lsls	r2, r2, #12
   1a8e8:	0b12      	lsrs	r2, r2, #12
   1a8ea:	46ac      	mov	ip, r5
   1a8ec:	4688      	mov	r8, r1
   1a8ee:	4c8e      	ldr	r4, [pc, #568]	; (1ab28 <__aeabi_ddiv+0x664>)
   1a8f0:	e6b6      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a8f2:	464b      	mov	r3, r9
   1a8f4:	431a      	orrs	r2, r3
   1a8f6:	0312      	lsls	r2, r2, #12
   1a8f8:	0b12      	lsrs	r2, r2, #12
   1a8fa:	46bc      	mov	ip, r7
   1a8fc:	4c8a      	ldr	r4, [pc, #552]	; (1ab28 <__aeabi_ddiv+0x664>)
   1a8fe:	e6af      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a900:	0003      	movs	r3, r0
   1a902:	465a      	mov	r2, fp
   1a904:	3b28      	subs	r3, #40	; 0x28
   1a906:	409a      	lsls	r2, r3
   1a908:	2300      	movs	r3, #0
   1a90a:	4691      	mov	r9, r2
   1a90c:	4698      	mov	r8, r3
   1a90e:	e657      	b.n	1a5c0 <__aeabi_ddiv+0xfc>
   1a910:	4658      	mov	r0, fp
   1a912:	f001 f84f 	bl	1b9b4 <__clzsi2>
   1a916:	3020      	adds	r0, #32
   1a918:	e640      	b.n	1a59c <__aeabi_ddiv+0xd8>
   1a91a:	0003      	movs	r3, r0
   1a91c:	4652      	mov	r2, sl
   1a91e:	3b28      	subs	r3, #40	; 0x28
   1a920:	409a      	lsls	r2, r3
   1a922:	2100      	movs	r1, #0
   1a924:	4693      	mov	fp, r2
   1a926:	e677      	b.n	1a618 <__aeabi_ddiv+0x154>
   1a928:	f001 f844 	bl	1b9b4 <__clzsi2>
   1a92c:	3020      	adds	r0, #32
   1a92e:	e65f      	b.n	1a5f0 <__aeabi_ddiv+0x12c>
   1a930:	4588      	cmp	r8, r1
   1a932:	d200      	bcs.n	1a936 <__aeabi_ddiv+0x472>
   1a934:	e6c7      	b.n	1a6c6 <__aeabi_ddiv+0x202>
   1a936:	464b      	mov	r3, r9
   1a938:	07de      	lsls	r6, r3, #31
   1a93a:	085d      	lsrs	r5, r3, #1
   1a93c:	4643      	mov	r3, r8
   1a93e:	085b      	lsrs	r3, r3, #1
   1a940:	431e      	orrs	r6, r3
   1a942:	4643      	mov	r3, r8
   1a944:	07db      	lsls	r3, r3, #31
   1a946:	469a      	mov	sl, r3
   1a948:	e6c2      	b.n	1a6d0 <__aeabi_ddiv+0x20c>
   1a94a:	2500      	movs	r5, #0
   1a94c:	4592      	cmp	sl, r2
   1a94e:	d300      	bcc.n	1a952 <__aeabi_ddiv+0x48e>
   1a950:	e733      	b.n	1a7ba <__aeabi_ddiv+0x2f6>
   1a952:	9e03      	ldr	r6, [sp, #12]
   1a954:	4659      	mov	r1, fp
   1a956:	46b4      	mov	ip, r6
   1a958:	44e2      	add	sl, ip
   1a95a:	45b2      	cmp	sl, r6
   1a95c:	41ad      	sbcs	r5, r5
   1a95e:	426d      	negs	r5, r5
   1a960:	4445      	add	r5, r8
   1a962:	18eb      	adds	r3, r5, r3
   1a964:	3901      	subs	r1, #1
   1a966:	4598      	cmp	r8, r3
   1a968:	d207      	bcs.n	1a97a <__aeabi_ddiv+0x4b6>
   1a96a:	4298      	cmp	r0, r3
   1a96c:	d900      	bls.n	1a970 <__aeabi_ddiv+0x4ac>
   1a96e:	e07f      	b.n	1aa70 <__aeabi_ddiv+0x5ac>
   1a970:	d100      	bne.n	1a974 <__aeabi_ddiv+0x4b0>
   1a972:	e0bc      	b.n	1aaee <__aeabi_ddiv+0x62a>
   1a974:	1a1d      	subs	r5, r3, r0
   1a976:	468b      	mov	fp, r1
   1a978:	e71f      	b.n	1a7ba <__aeabi_ddiv+0x2f6>
   1a97a:	4598      	cmp	r8, r3
   1a97c:	d1fa      	bne.n	1a974 <__aeabi_ddiv+0x4b0>
   1a97e:	9d03      	ldr	r5, [sp, #12]
   1a980:	4555      	cmp	r5, sl
   1a982:	d9f2      	bls.n	1a96a <__aeabi_ddiv+0x4a6>
   1a984:	4643      	mov	r3, r8
   1a986:	468b      	mov	fp, r1
   1a988:	1a1d      	subs	r5, r3, r0
   1a98a:	e716      	b.n	1a7ba <__aeabi_ddiv+0x2f6>
   1a98c:	469b      	mov	fp, r3
   1a98e:	e6ca      	b.n	1a726 <__aeabi_ddiv+0x262>
   1a990:	0015      	movs	r5, r2
   1a992:	e6e7      	b.n	1a764 <__aeabi_ddiv+0x2a0>
   1a994:	465a      	mov	r2, fp
   1a996:	08c9      	lsrs	r1, r1, #3
   1a998:	0752      	lsls	r2, r2, #29
   1a99a:	430a      	orrs	r2, r1
   1a99c:	055b      	lsls	r3, r3, #21
   1a99e:	4690      	mov	r8, r2
   1a9a0:	0d5c      	lsrs	r4, r3, #21
   1a9a2:	465a      	mov	r2, fp
   1a9a4:	2301      	movs	r3, #1
   1a9a6:	9902      	ldr	r1, [sp, #8]
   1a9a8:	0252      	lsls	r2, r2, #9
   1a9aa:	4019      	ands	r1, r3
   1a9ac:	0b12      	lsrs	r2, r2, #12
   1a9ae:	468c      	mov	ip, r1
   1a9b0:	e656      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d100      	bne.n	1a9b8 <__aeabi_ddiv+0x4f4>
   1a9b6:	e76f      	b.n	1a898 <__aeabi_ddiv+0x3d4>
   1a9b8:	4446      	add	r6, r8
   1a9ba:	1e4a      	subs	r2, r1, #1
   1a9bc:	45b0      	cmp	r8, r6
   1a9be:	d929      	bls.n	1aa14 <__aeabi_ddiv+0x550>
   1a9c0:	0011      	movs	r1, r2
   1a9c2:	4286      	cmp	r6, r0
   1a9c4:	d000      	beq.n	1a9c8 <__aeabi_ddiv+0x504>
   1a9c6:	e765      	b.n	1a894 <__aeabi_ddiv+0x3d0>
   1a9c8:	9a03      	ldr	r2, [sp, #12]
   1a9ca:	4293      	cmp	r3, r2
   1a9cc:	d000      	beq.n	1a9d0 <__aeabi_ddiv+0x50c>
   1a9ce:	e761      	b.n	1a894 <__aeabi_ddiv+0x3d0>
   1a9d0:	e762      	b.n	1a898 <__aeabi_ddiv+0x3d4>
   1a9d2:	2101      	movs	r1, #1
   1a9d4:	4249      	negs	r1, r1
   1a9d6:	2001      	movs	r0, #1
   1a9d8:	1ac2      	subs	r2, r0, r3
   1a9da:	2a38      	cmp	r2, #56	; 0x38
   1a9dc:	dd21      	ble.n	1aa22 <__aeabi_ddiv+0x55e>
   1a9de:	9b02      	ldr	r3, [sp, #8]
   1a9e0:	4003      	ands	r3, r0
   1a9e2:	469c      	mov	ip, r3
   1a9e4:	e638      	b.n	1a658 <__aeabi_ddiv+0x194>
   1a9e6:	220f      	movs	r2, #15
   1a9e8:	400a      	ands	r2, r1
   1a9ea:	2a04      	cmp	r2, #4
   1a9ec:	d100      	bne.n	1a9f0 <__aeabi_ddiv+0x52c>
   1a9ee:	e75b      	b.n	1a8a8 <__aeabi_ddiv+0x3e4>
   1a9f0:	000a      	movs	r2, r1
   1a9f2:	1d11      	adds	r1, r2, #4
   1a9f4:	4291      	cmp	r1, r2
   1a9f6:	4192      	sbcs	r2, r2
   1a9f8:	4252      	negs	r2, r2
   1a9fa:	4493      	add	fp, r2
   1a9fc:	e754      	b.n	1a8a8 <__aeabi_ddiv+0x3e4>
   1a9fe:	4b47      	ldr	r3, [pc, #284]	; (1ab1c <__aeabi_ddiv+0x658>)
   1aa00:	18e3      	adds	r3, r4, r3
   1aa02:	2b00      	cmp	r3, #0
   1aa04:	dde5      	ble.n	1a9d2 <__aeabi_ddiv+0x50e>
   1aa06:	2201      	movs	r2, #1
   1aa08:	4252      	negs	r2, r2
   1aa0a:	e7f2      	b.n	1a9f2 <__aeabi_ddiv+0x52e>
   1aa0c:	001d      	movs	r5, r3
   1aa0e:	e6fa      	b.n	1a806 <__aeabi_ddiv+0x342>
   1aa10:	469a      	mov	sl, r3
   1aa12:	e71c      	b.n	1a84e <__aeabi_ddiv+0x38a>
   1aa14:	42b0      	cmp	r0, r6
   1aa16:	d839      	bhi.n	1aa8c <__aeabi_ddiv+0x5c8>
   1aa18:	d06e      	beq.n	1aaf8 <__aeabi_ddiv+0x634>
   1aa1a:	0011      	movs	r1, r2
   1aa1c:	e73a      	b.n	1a894 <__aeabi_ddiv+0x3d0>
   1aa1e:	9302      	str	r3, [sp, #8]
   1aa20:	e73a      	b.n	1a898 <__aeabi_ddiv+0x3d4>
   1aa22:	2a1f      	cmp	r2, #31
   1aa24:	dc3c      	bgt.n	1aaa0 <__aeabi_ddiv+0x5dc>
   1aa26:	2320      	movs	r3, #32
   1aa28:	1a9b      	subs	r3, r3, r2
   1aa2a:	000c      	movs	r4, r1
   1aa2c:	4658      	mov	r0, fp
   1aa2e:	4099      	lsls	r1, r3
   1aa30:	4098      	lsls	r0, r3
   1aa32:	1e4b      	subs	r3, r1, #1
   1aa34:	4199      	sbcs	r1, r3
   1aa36:	465b      	mov	r3, fp
   1aa38:	40d4      	lsrs	r4, r2
   1aa3a:	40d3      	lsrs	r3, r2
   1aa3c:	4320      	orrs	r0, r4
   1aa3e:	4308      	orrs	r0, r1
   1aa40:	001a      	movs	r2, r3
   1aa42:	0743      	lsls	r3, r0, #29
   1aa44:	d009      	beq.n	1aa5a <__aeabi_ddiv+0x596>
   1aa46:	230f      	movs	r3, #15
   1aa48:	4003      	ands	r3, r0
   1aa4a:	2b04      	cmp	r3, #4
   1aa4c:	d005      	beq.n	1aa5a <__aeabi_ddiv+0x596>
   1aa4e:	0001      	movs	r1, r0
   1aa50:	1d08      	adds	r0, r1, #4
   1aa52:	4288      	cmp	r0, r1
   1aa54:	419b      	sbcs	r3, r3
   1aa56:	425b      	negs	r3, r3
   1aa58:	18d2      	adds	r2, r2, r3
   1aa5a:	0213      	lsls	r3, r2, #8
   1aa5c:	d53a      	bpl.n	1aad4 <__aeabi_ddiv+0x610>
   1aa5e:	2301      	movs	r3, #1
   1aa60:	9a02      	ldr	r2, [sp, #8]
   1aa62:	2401      	movs	r4, #1
   1aa64:	401a      	ands	r2, r3
   1aa66:	2300      	movs	r3, #0
   1aa68:	4694      	mov	ip, r2
   1aa6a:	4698      	mov	r8, r3
   1aa6c:	2200      	movs	r2, #0
   1aa6e:	e5f7      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1aa70:	2102      	movs	r1, #2
   1aa72:	4249      	negs	r1, r1
   1aa74:	468c      	mov	ip, r1
   1aa76:	9d03      	ldr	r5, [sp, #12]
   1aa78:	44e3      	add	fp, ip
   1aa7a:	46ac      	mov	ip, r5
   1aa7c:	44e2      	add	sl, ip
   1aa7e:	45aa      	cmp	sl, r5
   1aa80:	41ad      	sbcs	r5, r5
   1aa82:	426d      	negs	r5, r5
   1aa84:	4445      	add	r5, r8
   1aa86:	18ed      	adds	r5, r5, r3
   1aa88:	1a2d      	subs	r5, r5, r0
   1aa8a:	e696      	b.n	1a7ba <__aeabi_ddiv+0x2f6>
   1aa8c:	1e8a      	subs	r2, r1, #2
   1aa8e:	9903      	ldr	r1, [sp, #12]
   1aa90:	004d      	lsls	r5, r1, #1
   1aa92:	428d      	cmp	r5, r1
   1aa94:	4189      	sbcs	r1, r1
   1aa96:	4249      	negs	r1, r1
   1aa98:	4441      	add	r1, r8
   1aa9a:	1876      	adds	r6, r6, r1
   1aa9c:	9503      	str	r5, [sp, #12]
   1aa9e:	e78f      	b.n	1a9c0 <__aeabi_ddiv+0x4fc>
   1aaa0:	201f      	movs	r0, #31
   1aaa2:	4240      	negs	r0, r0
   1aaa4:	1ac3      	subs	r3, r0, r3
   1aaa6:	4658      	mov	r0, fp
   1aaa8:	40d8      	lsrs	r0, r3
   1aaaa:	0003      	movs	r3, r0
   1aaac:	2a20      	cmp	r2, #32
   1aaae:	d028      	beq.n	1ab02 <__aeabi_ddiv+0x63e>
   1aab0:	2040      	movs	r0, #64	; 0x40
   1aab2:	465d      	mov	r5, fp
   1aab4:	1a82      	subs	r2, r0, r2
   1aab6:	4095      	lsls	r5, r2
   1aab8:	4329      	orrs	r1, r5
   1aaba:	1e4a      	subs	r2, r1, #1
   1aabc:	4191      	sbcs	r1, r2
   1aabe:	4319      	orrs	r1, r3
   1aac0:	2307      	movs	r3, #7
   1aac2:	2200      	movs	r2, #0
   1aac4:	400b      	ands	r3, r1
   1aac6:	d009      	beq.n	1aadc <__aeabi_ddiv+0x618>
   1aac8:	230f      	movs	r3, #15
   1aaca:	2200      	movs	r2, #0
   1aacc:	400b      	ands	r3, r1
   1aace:	0008      	movs	r0, r1
   1aad0:	2b04      	cmp	r3, #4
   1aad2:	d1bd      	bne.n	1aa50 <__aeabi_ddiv+0x58c>
   1aad4:	0001      	movs	r1, r0
   1aad6:	0753      	lsls	r3, r2, #29
   1aad8:	0252      	lsls	r2, r2, #9
   1aada:	0b12      	lsrs	r2, r2, #12
   1aadc:	08c9      	lsrs	r1, r1, #3
   1aade:	4319      	orrs	r1, r3
   1aae0:	2301      	movs	r3, #1
   1aae2:	4688      	mov	r8, r1
   1aae4:	9902      	ldr	r1, [sp, #8]
   1aae6:	2400      	movs	r4, #0
   1aae8:	4019      	ands	r1, r3
   1aaea:	468c      	mov	ip, r1
   1aaec:	e5b8      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1aaee:	4552      	cmp	r2, sl
   1aaf0:	d8be      	bhi.n	1aa70 <__aeabi_ddiv+0x5ac>
   1aaf2:	468b      	mov	fp, r1
   1aaf4:	2500      	movs	r5, #0
   1aaf6:	e660      	b.n	1a7ba <__aeabi_ddiv+0x2f6>
   1aaf8:	9d03      	ldr	r5, [sp, #12]
   1aafa:	429d      	cmp	r5, r3
   1aafc:	d3c6      	bcc.n	1aa8c <__aeabi_ddiv+0x5c8>
   1aafe:	0011      	movs	r1, r2
   1ab00:	e762      	b.n	1a9c8 <__aeabi_ddiv+0x504>
   1ab02:	2500      	movs	r5, #0
   1ab04:	e7d8      	b.n	1aab8 <__aeabi_ddiv+0x5f4>
   1ab06:	2280      	movs	r2, #128	; 0x80
   1ab08:	465b      	mov	r3, fp
   1ab0a:	0312      	lsls	r2, r2, #12
   1ab0c:	431a      	orrs	r2, r3
   1ab0e:	9b01      	ldr	r3, [sp, #4]
   1ab10:	0312      	lsls	r2, r2, #12
   1ab12:	0b12      	lsrs	r2, r2, #12
   1ab14:	469c      	mov	ip, r3
   1ab16:	4688      	mov	r8, r1
   1ab18:	4c03      	ldr	r4, [pc, #12]	; (1ab28 <__aeabi_ddiv+0x664>)
   1ab1a:	e5a1      	b.n	1a660 <__aeabi_ddiv+0x19c>
   1ab1c:	000003ff 	.word	0x000003ff
   1ab20:	feffffff 	.word	0xfeffffff
   1ab24:	000007fe 	.word	0x000007fe
   1ab28:	000007ff 	.word	0x000007ff

0001ab2c <__eqdf2>:
   1ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab2e:	464f      	mov	r7, r9
   1ab30:	4646      	mov	r6, r8
   1ab32:	46d6      	mov	lr, sl
   1ab34:	005c      	lsls	r4, r3, #1
   1ab36:	b5c0      	push	{r6, r7, lr}
   1ab38:	031f      	lsls	r7, r3, #12
   1ab3a:	0fdb      	lsrs	r3, r3, #31
   1ab3c:	469a      	mov	sl, r3
   1ab3e:	4b17      	ldr	r3, [pc, #92]	; (1ab9c <__eqdf2+0x70>)
   1ab40:	030e      	lsls	r6, r1, #12
   1ab42:	004d      	lsls	r5, r1, #1
   1ab44:	4684      	mov	ip, r0
   1ab46:	4680      	mov	r8, r0
   1ab48:	0b36      	lsrs	r6, r6, #12
   1ab4a:	0d6d      	lsrs	r5, r5, #21
   1ab4c:	0fc9      	lsrs	r1, r1, #31
   1ab4e:	4691      	mov	r9, r2
   1ab50:	0b3f      	lsrs	r7, r7, #12
   1ab52:	0d64      	lsrs	r4, r4, #21
   1ab54:	2001      	movs	r0, #1
   1ab56:	429d      	cmp	r5, r3
   1ab58:	d008      	beq.n	1ab6c <__eqdf2+0x40>
   1ab5a:	429c      	cmp	r4, r3
   1ab5c:	d001      	beq.n	1ab62 <__eqdf2+0x36>
   1ab5e:	42a5      	cmp	r5, r4
   1ab60:	d00b      	beq.n	1ab7a <__eqdf2+0x4e>
   1ab62:	bc1c      	pop	{r2, r3, r4}
   1ab64:	4690      	mov	r8, r2
   1ab66:	4699      	mov	r9, r3
   1ab68:	46a2      	mov	sl, r4
   1ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab6c:	4663      	mov	r3, ip
   1ab6e:	4333      	orrs	r3, r6
   1ab70:	d1f7      	bne.n	1ab62 <__eqdf2+0x36>
   1ab72:	42ac      	cmp	r4, r5
   1ab74:	d1f5      	bne.n	1ab62 <__eqdf2+0x36>
   1ab76:	433a      	orrs	r2, r7
   1ab78:	d1f3      	bne.n	1ab62 <__eqdf2+0x36>
   1ab7a:	2001      	movs	r0, #1
   1ab7c:	42be      	cmp	r6, r7
   1ab7e:	d1f0      	bne.n	1ab62 <__eqdf2+0x36>
   1ab80:	45c8      	cmp	r8, r9
   1ab82:	d1ee      	bne.n	1ab62 <__eqdf2+0x36>
   1ab84:	4551      	cmp	r1, sl
   1ab86:	d007      	beq.n	1ab98 <__eqdf2+0x6c>
   1ab88:	2d00      	cmp	r5, #0
   1ab8a:	d1ea      	bne.n	1ab62 <__eqdf2+0x36>
   1ab8c:	4663      	mov	r3, ip
   1ab8e:	431e      	orrs	r6, r3
   1ab90:	0030      	movs	r0, r6
   1ab92:	1e46      	subs	r6, r0, #1
   1ab94:	41b0      	sbcs	r0, r6
   1ab96:	e7e4      	b.n	1ab62 <__eqdf2+0x36>
   1ab98:	2000      	movs	r0, #0
   1ab9a:	e7e2      	b.n	1ab62 <__eqdf2+0x36>
   1ab9c:	000007ff 	.word	0x000007ff

0001aba0 <__gedf2>:
   1aba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aba2:	4645      	mov	r5, r8
   1aba4:	46de      	mov	lr, fp
   1aba6:	4657      	mov	r7, sl
   1aba8:	464e      	mov	r6, r9
   1abaa:	b5e0      	push	{r5, r6, r7, lr}
   1abac:	031f      	lsls	r7, r3, #12
   1abae:	0b3d      	lsrs	r5, r7, #12
   1abb0:	4f2c      	ldr	r7, [pc, #176]	; (1ac64 <__gedf2+0xc4>)
   1abb2:	030e      	lsls	r6, r1, #12
   1abb4:	004c      	lsls	r4, r1, #1
   1abb6:	46ab      	mov	fp, r5
   1abb8:	005d      	lsls	r5, r3, #1
   1abba:	4684      	mov	ip, r0
   1abbc:	0b36      	lsrs	r6, r6, #12
   1abbe:	0d64      	lsrs	r4, r4, #21
   1abc0:	0fc9      	lsrs	r1, r1, #31
   1abc2:	4690      	mov	r8, r2
   1abc4:	0d6d      	lsrs	r5, r5, #21
   1abc6:	0fdb      	lsrs	r3, r3, #31
   1abc8:	42bc      	cmp	r4, r7
   1abca:	d02a      	beq.n	1ac22 <__gedf2+0x82>
   1abcc:	4f25      	ldr	r7, [pc, #148]	; (1ac64 <__gedf2+0xc4>)
   1abce:	42bd      	cmp	r5, r7
   1abd0:	d02d      	beq.n	1ac2e <__gedf2+0x8e>
   1abd2:	2c00      	cmp	r4, #0
   1abd4:	d10f      	bne.n	1abf6 <__gedf2+0x56>
   1abd6:	4330      	orrs	r0, r6
   1abd8:	0007      	movs	r7, r0
   1abda:	4681      	mov	r9, r0
   1abdc:	4278      	negs	r0, r7
   1abde:	4178      	adcs	r0, r7
   1abe0:	b2c0      	uxtb	r0, r0
   1abe2:	2d00      	cmp	r5, #0
   1abe4:	d117      	bne.n	1ac16 <__gedf2+0x76>
   1abe6:	465f      	mov	r7, fp
   1abe8:	433a      	orrs	r2, r7
   1abea:	d114      	bne.n	1ac16 <__gedf2+0x76>
   1abec:	464b      	mov	r3, r9
   1abee:	2000      	movs	r0, #0
   1abf0:	2b00      	cmp	r3, #0
   1abf2:	d00a      	beq.n	1ac0a <__gedf2+0x6a>
   1abf4:	e006      	b.n	1ac04 <__gedf2+0x64>
   1abf6:	2d00      	cmp	r5, #0
   1abf8:	d102      	bne.n	1ac00 <__gedf2+0x60>
   1abfa:	4658      	mov	r0, fp
   1abfc:	4302      	orrs	r2, r0
   1abfe:	d001      	beq.n	1ac04 <__gedf2+0x64>
   1ac00:	4299      	cmp	r1, r3
   1ac02:	d018      	beq.n	1ac36 <__gedf2+0x96>
   1ac04:	4248      	negs	r0, r1
   1ac06:	2101      	movs	r1, #1
   1ac08:	4308      	orrs	r0, r1
   1ac0a:	bc3c      	pop	{r2, r3, r4, r5}
   1ac0c:	4690      	mov	r8, r2
   1ac0e:	4699      	mov	r9, r3
   1ac10:	46a2      	mov	sl, r4
   1ac12:	46ab      	mov	fp, r5
   1ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac16:	2800      	cmp	r0, #0
   1ac18:	d0f2      	beq.n	1ac00 <__gedf2+0x60>
   1ac1a:	2001      	movs	r0, #1
   1ac1c:	3b01      	subs	r3, #1
   1ac1e:	4318      	orrs	r0, r3
   1ac20:	e7f3      	b.n	1ac0a <__gedf2+0x6a>
   1ac22:	0037      	movs	r7, r6
   1ac24:	4307      	orrs	r7, r0
   1ac26:	d0d1      	beq.n	1abcc <__gedf2+0x2c>
   1ac28:	2002      	movs	r0, #2
   1ac2a:	4240      	negs	r0, r0
   1ac2c:	e7ed      	b.n	1ac0a <__gedf2+0x6a>
   1ac2e:	465f      	mov	r7, fp
   1ac30:	4317      	orrs	r7, r2
   1ac32:	d0ce      	beq.n	1abd2 <__gedf2+0x32>
   1ac34:	e7f8      	b.n	1ac28 <__gedf2+0x88>
   1ac36:	42ac      	cmp	r4, r5
   1ac38:	dce4      	bgt.n	1ac04 <__gedf2+0x64>
   1ac3a:	da03      	bge.n	1ac44 <__gedf2+0xa4>
   1ac3c:	1e48      	subs	r0, r1, #1
   1ac3e:	2101      	movs	r1, #1
   1ac40:	4308      	orrs	r0, r1
   1ac42:	e7e2      	b.n	1ac0a <__gedf2+0x6a>
   1ac44:	455e      	cmp	r6, fp
   1ac46:	d8dd      	bhi.n	1ac04 <__gedf2+0x64>
   1ac48:	d006      	beq.n	1ac58 <__gedf2+0xb8>
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	455e      	cmp	r6, fp
   1ac4e:	d2dc      	bcs.n	1ac0a <__gedf2+0x6a>
   1ac50:	2301      	movs	r3, #1
   1ac52:	1e48      	subs	r0, r1, #1
   1ac54:	4318      	orrs	r0, r3
   1ac56:	e7d8      	b.n	1ac0a <__gedf2+0x6a>
   1ac58:	45c4      	cmp	ip, r8
   1ac5a:	d8d3      	bhi.n	1ac04 <__gedf2+0x64>
   1ac5c:	2000      	movs	r0, #0
   1ac5e:	45c4      	cmp	ip, r8
   1ac60:	d3f6      	bcc.n	1ac50 <__gedf2+0xb0>
   1ac62:	e7d2      	b.n	1ac0a <__gedf2+0x6a>
   1ac64:	000007ff 	.word	0x000007ff

0001ac68 <__ledf2>:
   1ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac6a:	464e      	mov	r6, r9
   1ac6c:	4645      	mov	r5, r8
   1ac6e:	46de      	mov	lr, fp
   1ac70:	4657      	mov	r7, sl
   1ac72:	005c      	lsls	r4, r3, #1
   1ac74:	b5e0      	push	{r5, r6, r7, lr}
   1ac76:	031f      	lsls	r7, r3, #12
   1ac78:	0fdb      	lsrs	r3, r3, #31
   1ac7a:	4699      	mov	r9, r3
   1ac7c:	4b2a      	ldr	r3, [pc, #168]	; (1ad28 <__ledf2+0xc0>)
   1ac7e:	030e      	lsls	r6, r1, #12
   1ac80:	004d      	lsls	r5, r1, #1
   1ac82:	0fc9      	lsrs	r1, r1, #31
   1ac84:	4684      	mov	ip, r0
   1ac86:	0b36      	lsrs	r6, r6, #12
   1ac88:	0d6d      	lsrs	r5, r5, #21
   1ac8a:	468b      	mov	fp, r1
   1ac8c:	4690      	mov	r8, r2
   1ac8e:	0b3f      	lsrs	r7, r7, #12
   1ac90:	0d64      	lsrs	r4, r4, #21
   1ac92:	429d      	cmp	r5, r3
   1ac94:	d020      	beq.n	1acd8 <__ledf2+0x70>
   1ac96:	4b24      	ldr	r3, [pc, #144]	; (1ad28 <__ledf2+0xc0>)
   1ac98:	429c      	cmp	r4, r3
   1ac9a:	d022      	beq.n	1ace2 <__ledf2+0x7a>
   1ac9c:	2d00      	cmp	r5, #0
   1ac9e:	d112      	bne.n	1acc6 <__ledf2+0x5e>
   1aca0:	4330      	orrs	r0, r6
   1aca2:	4243      	negs	r3, r0
   1aca4:	4143      	adcs	r3, r0
   1aca6:	b2db      	uxtb	r3, r3
   1aca8:	2c00      	cmp	r4, #0
   1acaa:	d01f      	beq.n	1acec <__ledf2+0x84>
   1acac:	2b00      	cmp	r3, #0
   1acae:	d00c      	beq.n	1acca <__ledf2+0x62>
   1acb0:	464b      	mov	r3, r9
   1acb2:	2001      	movs	r0, #1
   1acb4:	3b01      	subs	r3, #1
   1acb6:	4303      	orrs	r3, r0
   1acb8:	0018      	movs	r0, r3
   1acba:	bc3c      	pop	{r2, r3, r4, r5}
   1acbc:	4690      	mov	r8, r2
   1acbe:	4699      	mov	r9, r3
   1acc0:	46a2      	mov	sl, r4
   1acc2:	46ab      	mov	fp, r5
   1acc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acc6:	2c00      	cmp	r4, #0
   1acc8:	d016      	beq.n	1acf8 <__ledf2+0x90>
   1acca:	45cb      	cmp	fp, r9
   1accc:	d017      	beq.n	1acfe <__ledf2+0x96>
   1acce:	465b      	mov	r3, fp
   1acd0:	4259      	negs	r1, r3
   1acd2:	2301      	movs	r3, #1
   1acd4:	430b      	orrs	r3, r1
   1acd6:	e7ef      	b.n	1acb8 <__ledf2+0x50>
   1acd8:	0031      	movs	r1, r6
   1acda:	2302      	movs	r3, #2
   1acdc:	4301      	orrs	r1, r0
   1acde:	d1eb      	bne.n	1acb8 <__ledf2+0x50>
   1ace0:	e7d9      	b.n	1ac96 <__ledf2+0x2e>
   1ace2:	0039      	movs	r1, r7
   1ace4:	2302      	movs	r3, #2
   1ace6:	4311      	orrs	r1, r2
   1ace8:	d1e6      	bne.n	1acb8 <__ledf2+0x50>
   1acea:	e7d7      	b.n	1ac9c <__ledf2+0x34>
   1acec:	433a      	orrs	r2, r7
   1acee:	d1dd      	bne.n	1acac <__ledf2+0x44>
   1acf0:	2300      	movs	r3, #0
   1acf2:	2800      	cmp	r0, #0
   1acf4:	d0e0      	beq.n	1acb8 <__ledf2+0x50>
   1acf6:	e7ea      	b.n	1acce <__ledf2+0x66>
   1acf8:	433a      	orrs	r2, r7
   1acfa:	d1e6      	bne.n	1acca <__ledf2+0x62>
   1acfc:	e7e7      	b.n	1acce <__ledf2+0x66>
   1acfe:	42a5      	cmp	r5, r4
   1ad00:	dce5      	bgt.n	1acce <__ledf2+0x66>
   1ad02:	db05      	blt.n	1ad10 <__ledf2+0xa8>
   1ad04:	42be      	cmp	r6, r7
   1ad06:	d8e2      	bhi.n	1acce <__ledf2+0x66>
   1ad08:	d007      	beq.n	1ad1a <__ledf2+0xb2>
   1ad0a:	2300      	movs	r3, #0
   1ad0c:	42be      	cmp	r6, r7
   1ad0e:	d2d3      	bcs.n	1acb8 <__ledf2+0x50>
   1ad10:	4659      	mov	r1, fp
   1ad12:	2301      	movs	r3, #1
   1ad14:	3901      	subs	r1, #1
   1ad16:	430b      	orrs	r3, r1
   1ad18:	e7ce      	b.n	1acb8 <__ledf2+0x50>
   1ad1a:	45c4      	cmp	ip, r8
   1ad1c:	d8d7      	bhi.n	1acce <__ledf2+0x66>
   1ad1e:	2300      	movs	r3, #0
   1ad20:	45c4      	cmp	ip, r8
   1ad22:	d3f5      	bcc.n	1ad10 <__ledf2+0xa8>
   1ad24:	e7c8      	b.n	1acb8 <__ledf2+0x50>
   1ad26:	46c0      	nop			; (mov r8, r8)
   1ad28:	000007ff 	.word	0x000007ff

0001ad2c <__aeabi_dmul>:
   1ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad2e:	4657      	mov	r7, sl
   1ad30:	4645      	mov	r5, r8
   1ad32:	46de      	mov	lr, fp
   1ad34:	464e      	mov	r6, r9
   1ad36:	b5e0      	push	{r5, r6, r7, lr}
   1ad38:	030c      	lsls	r4, r1, #12
   1ad3a:	4698      	mov	r8, r3
   1ad3c:	004e      	lsls	r6, r1, #1
   1ad3e:	0b23      	lsrs	r3, r4, #12
   1ad40:	b087      	sub	sp, #28
   1ad42:	0007      	movs	r7, r0
   1ad44:	4692      	mov	sl, r2
   1ad46:	469b      	mov	fp, r3
   1ad48:	0d76      	lsrs	r6, r6, #21
   1ad4a:	0fcd      	lsrs	r5, r1, #31
   1ad4c:	2e00      	cmp	r6, #0
   1ad4e:	d06b      	beq.n	1ae28 <__aeabi_dmul+0xfc>
   1ad50:	4b6d      	ldr	r3, [pc, #436]	; (1af08 <__aeabi_dmul+0x1dc>)
   1ad52:	429e      	cmp	r6, r3
   1ad54:	d035      	beq.n	1adc2 <__aeabi_dmul+0x96>
   1ad56:	2480      	movs	r4, #128	; 0x80
   1ad58:	465b      	mov	r3, fp
   1ad5a:	0f42      	lsrs	r2, r0, #29
   1ad5c:	0424      	lsls	r4, r4, #16
   1ad5e:	00db      	lsls	r3, r3, #3
   1ad60:	4314      	orrs	r4, r2
   1ad62:	431c      	orrs	r4, r3
   1ad64:	00c3      	lsls	r3, r0, #3
   1ad66:	4699      	mov	r9, r3
   1ad68:	4b68      	ldr	r3, [pc, #416]	; (1af0c <__aeabi_dmul+0x1e0>)
   1ad6a:	46a3      	mov	fp, r4
   1ad6c:	469c      	mov	ip, r3
   1ad6e:	2300      	movs	r3, #0
   1ad70:	2700      	movs	r7, #0
   1ad72:	4466      	add	r6, ip
   1ad74:	9302      	str	r3, [sp, #8]
   1ad76:	4643      	mov	r3, r8
   1ad78:	031c      	lsls	r4, r3, #12
   1ad7a:	005a      	lsls	r2, r3, #1
   1ad7c:	0fdb      	lsrs	r3, r3, #31
   1ad7e:	4650      	mov	r0, sl
   1ad80:	0b24      	lsrs	r4, r4, #12
   1ad82:	0d52      	lsrs	r2, r2, #21
   1ad84:	4698      	mov	r8, r3
   1ad86:	d100      	bne.n	1ad8a <__aeabi_dmul+0x5e>
   1ad88:	e076      	b.n	1ae78 <__aeabi_dmul+0x14c>
   1ad8a:	4b5f      	ldr	r3, [pc, #380]	; (1af08 <__aeabi_dmul+0x1dc>)
   1ad8c:	429a      	cmp	r2, r3
   1ad8e:	d06d      	beq.n	1ae6c <__aeabi_dmul+0x140>
   1ad90:	2380      	movs	r3, #128	; 0x80
   1ad92:	0f41      	lsrs	r1, r0, #29
   1ad94:	041b      	lsls	r3, r3, #16
   1ad96:	430b      	orrs	r3, r1
   1ad98:	495c      	ldr	r1, [pc, #368]	; (1af0c <__aeabi_dmul+0x1e0>)
   1ad9a:	00e4      	lsls	r4, r4, #3
   1ad9c:	468c      	mov	ip, r1
   1ad9e:	431c      	orrs	r4, r3
   1ada0:	00c3      	lsls	r3, r0, #3
   1ada2:	2000      	movs	r0, #0
   1ada4:	4462      	add	r2, ip
   1ada6:	4641      	mov	r1, r8
   1ada8:	18b6      	adds	r6, r6, r2
   1adaa:	4069      	eors	r1, r5
   1adac:	1c72      	adds	r2, r6, #1
   1adae:	9101      	str	r1, [sp, #4]
   1adb0:	4694      	mov	ip, r2
   1adb2:	4307      	orrs	r7, r0
   1adb4:	2f0f      	cmp	r7, #15
   1adb6:	d900      	bls.n	1adba <__aeabi_dmul+0x8e>
   1adb8:	e0b0      	b.n	1af1c <__aeabi_dmul+0x1f0>
   1adba:	4a55      	ldr	r2, [pc, #340]	; (1af10 <__aeabi_dmul+0x1e4>)
   1adbc:	00bf      	lsls	r7, r7, #2
   1adbe:	59d2      	ldr	r2, [r2, r7]
   1adc0:	4697      	mov	pc, r2
   1adc2:	465b      	mov	r3, fp
   1adc4:	4303      	orrs	r3, r0
   1adc6:	4699      	mov	r9, r3
   1adc8:	d000      	beq.n	1adcc <__aeabi_dmul+0xa0>
   1adca:	e087      	b.n	1aedc <__aeabi_dmul+0x1b0>
   1adcc:	2300      	movs	r3, #0
   1adce:	469b      	mov	fp, r3
   1add0:	3302      	adds	r3, #2
   1add2:	2708      	movs	r7, #8
   1add4:	9302      	str	r3, [sp, #8]
   1add6:	e7ce      	b.n	1ad76 <__aeabi_dmul+0x4a>
   1add8:	4642      	mov	r2, r8
   1adda:	9201      	str	r2, [sp, #4]
   1addc:	2802      	cmp	r0, #2
   1adde:	d067      	beq.n	1aeb0 <__aeabi_dmul+0x184>
   1ade0:	2803      	cmp	r0, #3
   1ade2:	d100      	bne.n	1ade6 <__aeabi_dmul+0xba>
   1ade4:	e20e      	b.n	1b204 <__aeabi_dmul+0x4d8>
   1ade6:	2801      	cmp	r0, #1
   1ade8:	d000      	beq.n	1adec <__aeabi_dmul+0xc0>
   1adea:	e162      	b.n	1b0b2 <__aeabi_dmul+0x386>
   1adec:	2300      	movs	r3, #0
   1adee:	2400      	movs	r4, #0
   1adf0:	2200      	movs	r2, #0
   1adf2:	4699      	mov	r9, r3
   1adf4:	9901      	ldr	r1, [sp, #4]
   1adf6:	4001      	ands	r1, r0
   1adf8:	b2cd      	uxtb	r5, r1
   1adfa:	2100      	movs	r1, #0
   1adfc:	0312      	lsls	r2, r2, #12
   1adfe:	0d0b      	lsrs	r3, r1, #20
   1ae00:	0b12      	lsrs	r2, r2, #12
   1ae02:	051b      	lsls	r3, r3, #20
   1ae04:	4313      	orrs	r3, r2
   1ae06:	4a43      	ldr	r2, [pc, #268]	; (1af14 <__aeabi_dmul+0x1e8>)
   1ae08:	0524      	lsls	r4, r4, #20
   1ae0a:	4013      	ands	r3, r2
   1ae0c:	431c      	orrs	r4, r3
   1ae0e:	0064      	lsls	r4, r4, #1
   1ae10:	07ed      	lsls	r5, r5, #31
   1ae12:	0864      	lsrs	r4, r4, #1
   1ae14:	432c      	orrs	r4, r5
   1ae16:	4648      	mov	r0, r9
   1ae18:	0021      	movs	r1, r4
   1ae1a:	b007      	add	sp, #28
   1ae1c:	bc3c      	pop	{r2, r3, r4, r5}
   1ae1e:	4690      	mov	r8, r2
   1ae20:	4699      	mov	r9, r3
   1ae22:	46a2      	mov	sl, r4
   1ae24:	46ab      	mov	fp, r5
   1ae26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae28:	4303      	orrs	r3, r0
   1ae2a:	4699      	mov	r9, r3
   1ae2c:	d04f      	beq.n	1aece <__aeabi_dmul+0x1a2>
   1ae2e:	465b      	mov	r3, fp
   1ae30:	2b00      	cmp	r3, #0
   1ae32:	d100      	bne.n	1ae36 <__aeabi_dmul+0x10a>
   1ae34:	e189      	b.n	1b14a <__aeabi_dmul+0x41e>
   1ae36:	4658      	mov	r0, fp
   1ae38:	f000 fdbc 	bl	1b9b4 <__clzsi2>
   1ae3c:	0003      	movs	r3, r0
   1ae3e:	3b0b      	subs	r3, #11
   1ae40:	2b1c      	cmp	r3, #28
   1ae42:	dd00      	ble.n	1ae46 <__aeabi_dmul+0x11a>
   1ae44:	e17a      	b.n	1b13c <__aeabi_dmul+0x410>
   1ae46:	221d      	movs	r2, #29
   1ae48:	1ad3      	subs	r3, r2, r3
   1ae4a:	003a      	movs	r2, r7
   1ae4c:	0001      	movs	r1, r0
   1ae4e:	465c      	mov	r4, fp
   1ae50:	40da      	lsrs	r2, r3
   1ae52:	3908      	subs	r1, #8
   1ae54:	408c      	lsls	r4, r1
   1ae56:	0013      	movs	r3, r2
   1ae58:	408f      	lsls	r7, r1
   1ae5a:	4323      	orrs	r3, r4
   1ae5c:	469b      	mov	fp, r3
   1ae5e:	46b9      	mov	r9, r7
   1ae60:	2300      	movs	r3, #0
   1ae62:	4e2d      	ldr	r6, [pc, #180]	; (1af18 <__aeabi_dmul+0x1ec>)
   1ae64:	2700      	movs	r7, #0
   1ae66:	1a36      	subs	r6, r6, r0
   1ae68:	9302      	str	r3, [sp, #8]
   1ae6a:	e784      	b.n	1ad76 <__aeabi_dmul+0x4a>
   1ae6c:	4653      	mov	r3, sl
   1ae6e:	4323      	orrs	r3, r4
   1ae70:	d12a      	bne.n	1aec8 <__aeabi_dmul+0x19c>
   1ae72:	2400      	movs	r4, #0
   1ae74:	2002      	movs	r0, #2
   1ae76:	e796      	b.n	1ada6 <__aeabi_dmul+0x7a>
   1ae78:	4653      	mov	r3, sl
   1ae7a:	4323      	orrs	r3, r4
   1ae7c:	d020      	beq.n	1aec0 <__aeabi_dmul+0x194>
   1ae7e:	2c00      	cmp	r4, #0
   1ae80:	d100      	bne.n	1ae84 <__aeabi_dmul+0x158>
   1ae82:	e157      	b.n	1b134 <__aeabi_dmul+0x408>
   1ae84:	0020      	movs	r0, r4
   1ae86:	f000 fd95 	bl	1b9b4 <__clzsi2>
   1ae8a:	0003      	movs	r3, r0
   1ae8c:	3b0b      	subs	r3, #11
   1ae8e:	2b1c      	cmp	r3, #28
   1ae90:	dd00      	ble.n	1ae94 <__aeabi_dmul+0x168>
   1ae92:	e149      	b.n	1b128 <__aeabi_dmul+0x3fc>
   1ae94:	211d      	movs	r1, #29
   1ae96:	1acb      	subs	r3, r1, r3
   1ae98:	4651      	mov	r1, sl
   1ae9a:	0002      	movs	r2, r0
   1ae9c:	40d9      	lsrs	r1, r3
   1ae9e:	4653      	mov	r3, sl
   1aea0:	3a08      	subs	r2, #8
   1aea2:	4094      	lsls	r4, r2
   1aea4:	4093      	lsls	r3, r2
   1aea6:	430c      	orrs	r4, r1
   1aea8:	4a1b      	ldr	r2, [pc, #108]	; (1af18 <__aeabi_dmul+0x1ec>)
   1aeaa:	1a12      	subs	r2, r2, r0
   1aeac:	2000      	movs	r0, #0
   1aeae:	e77a      	b.n	1ada6 <__aeabi_dmul+0x7a>
   1aeb0:	2501      	movs	r5, #1
   1aeb2:	9b01      	ldr	r3, [sp, #4]
   1aeb4:	4c14      	ldr	r4, [pc, #80]	; (1af08 <__aeabi_dmul+0x1dc>)
   1aeb6:	401d      	ands	r5, r3
   1aeb8:	2300      	movs	r3, #0
   1aeba:	2200      	movs	r2, #0
   1aebc:	4699      	mov	r9, r3
   1aebe:	e79c      	b.n	1adfa <__aeabi_dmul+0xce>
   1aec0:	2400      	movs	r4, #0
   1aec2:	2200      	movs	r2, #0
   1aec4:	2001      	movs	r0, #1
   1aec6:	e76e      	b.n	1ada6 <__aeabi_dmul+0x7a>
   1aec8:	4653      	mov	r3, sl
   1aeca:	2003      	movs	r0, #3
   1aecc:	e76b      	b.n	1ada6 <__aeabi_dmul+0x7a>
   1aece:	2300      	movs	r3, #0
   1aed0:	469b      	mov	fp, r3
   1aed2:	3301      	adds	r3, #1
   1aed4:	2704      	movs	r7, #4
   1aed6:	2600      	movs	r6, #0
   1aed8:	9302      	str	r3, [sp, #8]
   1aeda:	e74c      	b.n	1ad76 <__aeabi_dmul+0x4a>
   1aedc:	2303      	movs	r3, #3
   1aede:	4681      	mov	r9, r0
   1aee0:	270c      	movs	r7, #12
   1aee2:	9302      	str	r3, [sp, #8]
   1aee4:	e747      	b.n	1ad76 <__aeabi_dmul+0x4a>
   1aee6:	2280      	movs	r2, #128	; 0x80
   1aee8:	2300      	movs	r3, #0
   1aeea:	2500      	movs	r5, #0
   1aeec:	0312      	lsls	r2, r2, #12
   1aeee:	4699      	mov	r9, r3
   1aef0:	4c05      	ldr	r4, [pc, #20]	; (1af08 <__aeabi_dmul+0x1dc>)
   1aef2:	e782      	b.n	1adfa <__aeabi_dmul+0xce>
   1aef4:	465c      	mov	r4, fp
   1aef6:	464b      	mov	r3, r9
   1aef8:	9802      	ldr	r0, [sp, #8]
   1aefa:	e76f      	b.n	1addc <__aeabi_dmul+0xb0>
   1aefc:	465c      	mov	r4, fp
   1aefe:	464b      	mov	r3, r9
   1af00:	9501      	str	r5, [sp, #4]
   1af02:	9802      	ldr	r0, [sp, #8]
   1af04:	e76a      	b.n	1addc <__aeabi_dmul+0xb0>
   1af06:	46c0      	nop			; (mov r8, r8)
   1af08:	000007ff 	.word	0x000007ff
   1af0c:	fffffc01 	.word	0xfffffc01
   1af10:	0001f3e0 	.word	0x0001f3e0
   1af14:	800fffff 	.word	0x800fffff
   1af18:	fffffc0d 	.word	0xfffffc0d
   1af1c:	464a      	mov	r2, r9
   1af1e:	4649      	mov	r1, r9
   1af20:	0c17      	lsrs	r7, r2, #16
   1af22:	0c1a      	lsrs	r2, r3, #16
   1af24:	041b      	lsls	r3, r3, #16
   1af26:	0c1b      	lsrs	r3, r3, #16
   1af28:	0408      	lsls	r0, r1, #16
   1af2a:	0019      	movs	r1, r3
   1af2c:	0c00      	lsrs	r0, r0, #16
   1af2e:	4341      	muls	r1, r0
   1af30:	0015      	movs	r5, r2
   1af32:	4688      	mov	r8, r1
   1af34:	0019      	movs	r1, r3
   1af36:	437d      	muls	r5, r7
   1af38:	4379      	muls	r1, r7
   1af3a:	9503      	str	r5, [sp, #12]
   1af3c:	4689      	mov	r9, r1
   1af3e:	0029      	movs	r1, r5
   1af40:	0015      	movs	r5, r2
   1af42:	4345      	muls	r5, r0
   1af44:	444d      	add	r5, r9
   1af46:	9502      	str	r5, [sp, #8]
   1af48:	4645      	mov	r5, r8
   1af4a:	0c2d      	lsrs	r5, r5, #16
   1af4c:	46aa      	mov	sl, r5
   1af4e:	9d02      	ldr	r5, [sp, #8]
   1af50:	4455      	add	r5, sl
   1af52:	45a9      	cmp	r9, r5
   1af54:	d906      	bls.n	1af64 <__aeabi_dmul+0x238>
   1af56:	468a      	mov	sl, r1
   1af58:	2180      	movs	r1, #128	; 0x80
   1af5a:	0249      	lsls	r1, r1, #9
   1af5c:	4689      	mov	r9, r1
   1af5e:	44ca      	add	sl, r9
   1af60:	4651      	mov	r1, sl
   1af62:	9103      	str	r1, [sp, #12]
   1af64:	0c29      	lsrs	r1, r5, #16
   1af66:	9104      	str	r1, [sp, #16]
   1af68:	4641      	mov	r1, r8
   1af6a:	0409      	lsls	r1, r1, #16
   1af6c:	042d      	lsls	r5, r5, #16
   1af6e:	0c09      	lsrs	r1, r1, #16
   1af70:	4688      	mov	r8, r1
   1af72:	0029      	movs	r1, r5
   1af74:	0c25      	lsrs	r5, r4, #16
   1af76:	0424      	lsls	r4, r4, #16
   1af78:	4441      	add	r1, r8
   1af7a:	0c24      	lsrs	r4, r4, #16
   1af7c:	9105      	str	r1, [sp, #20]
   1af7e:	0021      	movs	r1, r4
   1af80:	4341      	muls	r1, r0
   1af82:	4688      	mov	r8, r1
   1af84:	0021      	movs	r1, r4
   1af86:	4379      	muls	r1, r7
   1af88:	468a      	mov	sl, r1
   1af8a:	4368      	muls	r0, r5
   1af8c:	4641      	mov	r1, r8
   1af8e:	4450      	add	r0, sl
   1af90:	4681      	mov	r9, r0
   1af92:	0c08      	lsrs	r0, r1, #16
   1af94:	4448      	add	r0, r9
   1af96:	436f      	muls	r7, r5
   1af98:	4582      	cmp	sl, r0
   1af9a:	d903      	bls.n	1afa4 <__aeabi_dmul+0x278>
   1af9c:	2180      	movs	r1, #128	; 0x80
   1af9e:	0249      	lsls	r1, r1, #9
   1afa0:	4689      	mov	r9, r1
   1afa2:	444f      	add	r7, r9
   1afa4:	0c01      	lsrs	r1, r0, #16
   1afa6:	4689      	mov	r9, r1
   1afa8:	0039      	movs	r1, r7
   1afaa:	4449      	add	r1, r9
   1afac:	9102      	str	r1, [sp, #8]
   1afae:	4641      	mov	r1, r8
   1afb0:	040f      	lsls	r7, r1, #16
   1afb2:	9904      	ldr	r1, [sp, #16]
   1afb4:	0c3f      	lsrs	r7, r7, #16
   1afb6:	4688      	mov	r8, r1
   1afb8:	0400      	lsls	r0, r0, #16
   1afba:	19c0      	adds	r0, r0, r7
   1afbc:	4480      	add	r8, r0
   1afbe:	4641      	mov	r1, r8
   1afc0:	9104      	str	r1, [sp, #16]
   1afc2:	4659      	mov	r1, fp
   1afc4:	0c0f      	lsrs	r7, r1, #16
   1afc6:	0409      	lsls	r1, r1, #16
   1afc8:	0c09      	lsrs	r1, r1, #16
   1afca:	4688      	mov	r8, r1
   1afcc:	4359      	muls	r1, r3
   1afce:	468a      	mov	sl, r1
   1afd0:	0039      	movs	r1, r7
   1afd2:	4351      	muls	r1, r2
   1afd4:	4689      	mov	r9, r1
   1afd6:	4641      	mov	r1, r8
   1afd8:	434a      	muls	r2, r1
   1afda:	4651      	mov	r1, sl
   1afdc:	0c09      	lsrs	r1, r1, #16
   1afde:	468b      	mov	fp, r1
   1afe0:	437b      	muls	r3, r7
   1afe2:	18d2      	adds	r2, r2, r3
   1afe4:	445a      	add	r2, fp
   1afe6:	4293      	cmp	r3, r2
   1afe8:	d903      	bls.n	1aff2 <__aeabi_dmul+0x2c6>
   1afea:	2380      	movs	r3, #128	; 0x80
   1afec:	025b      	lsls	r3, r3, #9
   1afee:	469b      	mov	fp, r3
   1aff0:	44d9      	add	r9, fp
   1aff2:	4651      	mov	r1, sl
   1aff4:	0409      	lsls	r1, r1, #16
   1aff6:	0c09      	lsrs	r1, r1, #16
   1aff8:	468a      	mov	sl, r1
   1affa:	4641      	mov	r1, r8
   1affc:	4361      	muls	r1, r4
   1affe:	437c      	muls	r4, r7
   1b000:	0c13      	lsrs	r3, r2, #16
   1b002:	0412      	lsls	r2, r2, #16
   1b004:	444b      	add	r3, r9
   1b006:	4452      	add	r2, sl
   1b008:	46a1      	mov	r9, r4
   1b00a:	468a      	mov	sl, r1
   1b00c:	003c      	movs	r4, r7
   1b00e:	4641      	mov	r1, r8
   1b010:	436c      	muls	r4, r5
   1b012:	434d      	muls	r5, r1
   1b014:	4651      	mov	r1, sl
   1b016:	444d      	add	r5, r9
   1b018:	0c0f      	lsrs	r7, r1, #16
   1b01a:	197d      	adds	r5, r7, r5
   1b01c:	45a9      	cmp	r9, r5
   1b01e:	d903      	bls.n	1b028 <__aeabi_dmul+0x2fc>
   1b020:	2180      	movs	r1, #128	; 0x80
   1b022:	0249      	lsls	r1, r1, #9
   1b024:	4688      	mov	r8, r1
   1b026:	4444      	add	r4, r8
   1b028:	9f04      	ldr	r7, [sp, #16]
   1b02a:	9903      	ldr	r1, [sp, #12]
   1b02c:	46b8      	mov	r8, r7
   1b02e:	4441      	add	r1, r8
   1b030:	468b      	mov	fp, r1
   1b032:	4583      	cmp	fp, r0
   1b034:	4180      	sbcs	r0, r0
   1b036:	4241      	negs	r1, r0
   1b038:	4688      	mov	r8, r1
   1b03a:	4651      	mov	r1, sl
   1b03c:	0408      	lsls	r0, r1, #16
   1b03e:	042f      	lsls	r7, r5, #16
   1b040:	0c00      	lsrs	r0, r0, #16
   1b042:	183f      	adds	r7, r7, r0
   1b044:	4658      	mov	r0, fp
   1b046:	9902      	ldr	r1, [sp, #8]
   1b048:	1810      	adds	r0, r2, r0
   1b04a:	4689      	mov	r9, r1
   1b04c:	4290      	cmp	r0, r2
   1b04e:	4192      	sbcs	r2, r2
   1b050:	444f      	add	r7, r9
   1b052:	46ba      	mov	sl, r7
   1b054:	4252      	negs	r2, r2
   1b056:	4699      	mov	r9, r3
   1b058:	4693      	mov	fp, r2
   1b05a:	44c2      	add	sl, r8
   1b05c:	44d1      	add	r9, sl
   1b05e:	44cb      	add	fp, r9
   1b060:	428f      	cmp	r7, r1
   1b062:	41bf      	sbcs	r7, r7
   1b064:	45c2      	cmp	sl, r8
   1b066:	4189      	sbcs	r1, r1
   1b068:	4599      	cmp	r9, r3
   1b06a:	419b      	sbcs	r3, r3
   1b06c:	4593      	cmp	fp, r2
   1b06e:	4192      	sbcs	r2, r2
   1b070:	427f      	negs	r7, r7
   1b072:	4249      	negs	r1, r1
   1b074:	0c2d      	lsrs	r5, r5, #16
   1b076:	4252      	negs	r2, r2
   1b078:	430f      	orrs	r7, r1
   1b07a:	425b      	negs	r3, r3
   1b07c:	4313      	orrs	r3, r2
   1b07e:	197f      	adds	r7, r7, r5
   1b080:	18ff      	adds	r7, r7, r3
   1b082:	465b      	mov	r3, fp
   1b084:	193c      	adds	r4, r7, r4
   1b086:	0ddb      	lsrs	r3, r3, #23
   1b088:	9a05      	ldr	r2, [sp, #20]
   1b08a:	0264      	lsls	r4, r4, #9
   1b08c:	431c      	orrs	r4, r3
   1b08e:	0243      	lsls	r3, r0, #9
   1b090:	4313      	orrs	r3, r2
   1b092:	1e5d      	subs	r5, r3, #1
   1b094:	41ab      	sbcs	r3, r5
   1b096:	465a      	mov	r2, fp
   1b098:	0dc0      	lsrs	r0, r0, #23
   1b09a:	4303      	orrs	r3, r0
   1b09c:	0252      	lsls	r2, r2, #9
   1b09e:	4313      	orrs	r3, r2
   1b0a0:	01e2      	lsls	r2, r4, #7
   1b0a2:	d556      	bpl.n	1b152 <__aeabi_dmul+0x426>
   1b0a4:	2001      	movs	r0, #1
   1b0a6:	085a      	lsrs	r2, r3, #1
   1b0a8:	4003      	ands	r3, r0
   1b0aa:	4313      	orrs	r3, r2
   1b0ac:	07e2      	lsls	r2, r4, #31
   1b0ae:	4313      	orrs	r3, r2
   1b0b0:	0864      	lsrs	r4, r4, #1
   1b0b2:	485a      	ldr	r0, [pc, #360]	; (1b21c <__aeabi_dmul+0x4f0>)
   1b0b4:	4460      	add	r0, ip
   1b0b6:	2800      	cmp	r0, #0
   1b0b8:	dd4d      	ble.n	1b156 <__aeabi_dmul+0x42a>
   1b0ba:	075a      	lsls	r2, r3, #29
   1b0bc:	d009      	beq.n	1b0d2 <__aeabi_dmul+0x3a6>
   1b0be:	220f      	movs	r2, #15
   1b0c0:	401a      	ands	r2, r3
   1b0c2:	2a04      	cmp	r2, #4
   1b0c4:	d005      	beq.n	1b0d2 <__aeabi_dmul+0x3a6>
   1b0c6:	1d1a      	adds	r2, r3, #4
   1b0c8:	429a      	cmp	r2, r3
   1b0ca:	419b      	sbcs	r3, r3
   1b0cc:	425b      	negs	r3, r3
   1b0ce:	18e4      	adds	r4, r4, r3
   1b0d0:	0013      	movs	r3, r2
   1b0d2:	01e2      	lsls	r2, r4, #7
   1b0d4:	d504      	bpl.n	1b0e0 <__aeabi_dmul+0x3b4>
   1b0d6:	2080      	movs	r0, #128	; 0x80
   1b0d8:	4a51      	ldr	r2, [pc, #324]	; (1b220 <__aeabi_dmul+0x4f4>)
   1b0da:	00c0      	lsls	r0, r0, #3
   1b0dc:	4014      	ands	r4, r2
   1b0de:	4460      	add	r0, ip
   1b0e0:	4a50      	ldr	r2, [pc, #320]	; (1b224 <__aeabi_dmul+0x4f8>)
   1b0e2:	4290      	cmp	r0, r2
   1b0e4:	dd00      	ble.n	1b0e8 <__aeabi_dmul+0x3bc>
   1b0e6:	e6e3      	b.n	1aeb0 <__aeabi_dmul+0x184>
   1b0e8:	2501      	movs	r5, #1
   1b0ea:	08db      	lsrs	r3, r3, #3
   1b0ec:	0762      	lsls	r2, r4, #29
   1b0ee:	431a      	orrs	r2, r3
   1b0f0:	0264      	lsls	r4, r4, #9
   1b0f2:	9b01      	ldr	r3, [sp, #4]
   1b0f4:	4691      	mov	r9, r2
   1b0f6:	0b22      	lsrs	r2, r4, #12
   1b0f8:	0544      	lsls	r4, r0, #21
   1b0fa:	0d64      	lsrs	r4, r4, #21
   1b0fc:	401d      	ands	r5, r3
   1b0fe:	e67c      	b.n	1adfa <__aeabi_dmul+0xce>
   1b100:	2280      	movs	r2, #128	; 0x80
   1b102:	4659      	mov	r1, fp
   1b104:	0312      	lsls	r2, r2, #12
   1b106:	4211      	tst	r1, r2
   1b108:	d008      	beq.n	1b11c <__aeabi_dmul+0x3f0>
   1b10a:	4214      	tst	r4, r2
   1b10c:	d106      	bne.n	1b11c <__aeabi_dmul+0x3f0>
   1b10e:	4322      	orrs	r2, r4
   1b110:	0312      	lsls	r2, r2, #12
   1b112:	0b12      	lsrs	r2, r2, #12
   1b114:	4645      	mov	r5, r8
   1b116:	4699      	mov	r9, r3
   1b118:	4c43      	ldr	r4, [pc, #268]	; (1b228 <__aeabi_dmul+0x4fc>)
   1b11a:	e66e      	b.n	1adfa <__aeabi_dmul+0xce>
   1b11c:	465b      	mov	r3, fp
   1b11e:	431a      	orrs	r2, r3
   1b120:	0312      	lsls	r2, r2, #12
   1b122:	0b12      	lsrs	r2, r2, #12
   1b124:	4c40      	ldr	r4, [pc, #256]	; (1b228 <__aeabi_dmul+0x4fc>)
   1b126:	e668      	b.n	1adfa <__aeabi_dmul+0xce>
   1b128:	0003      	movs	r3, r0
   1b12a:	4654      	mov	r4, sl
   1b12c:	3b28      	subs	r3, #40	; 0x28
   1b12e:	409c      	lsls	r4, r3
   1b130:	2300      	movs	r3, #0
   1b132:	e6b9      	b.n	1aea8 <__aeabi_dmul+0x17c>
   1b134:	f000 fc3e 	bl	1b9b4 <__clzsi2>
   1b138:	3020      	adds	r0, #32
   1b13a:	e6a6      	b.n	1ae8a <__aeabi_dmul+0x15e>
   1b13c:	0003      	movs	r3, r0
   1b13e:	3b28      	subs	r3, #40	; 0x28
   1b140:	409f      	lsls	r7, r3
   1b142:	2300      	movs	r3, #0
   1b144:	46bb      	mov	fp, r7
   1b146:	4699      	mov	r9, r3
   1b148:	e68a      	b.n	1ae60 <__aeabi_dmul+0x134>
   1b14a:	f000 fc33 	bl	1b9b4 <__clzsi2>
   1b14e:	3020      	adds	r0, #32
   1b150:	e674      	b.n	1ae3c <__aeabi_dmul+0x110>
   1b152:	46b4      	mov	ip, r6
   1b154:	e7ad      	b.n	1b0b2 <__aeabi_dmul+0x386>
   1b156:	2501      	movs	r5, #1
   1b158:	1a2a      	subs	r2, r5, r0
   1b15a:	2a38      	cmp	r2, #56	; 0x38
   1b15c:	dd06      	ble.n	1b16c <__aeabi_dmul+0x440>
   1b15e:	9b01      	ldr	r3, [sp, #4]
   1b160:	2400      	movs	r4, #0
   1b162:	401d      	ands	r5, r3
   1b164:	2300      	movs	r3, #0
   1b166:	2200      	movs	r2, #0
   1b168:	4699      	mov	r9, r3
   1b16a:	e646      	b.n	1adfa <__aeabi_dmul+0xce>
   1b16c:	2a1f      	cmp	r2, #31
   1b16e:	dc21      	bgt.n	1b1b4 <__aeabi_dmul+0x488>
   1b170:	2520      	movs	r5, #32
   1b172:	0020      	movs	r0, r4
   1b174:	1aad      	subs	r5, r5, r2
   1b176:	001e      	movs	r6, r3
   1b178:	40ab      	lsls	r3, r5
   1b17a:	40a8      	lsls	r0, r5
   1b17c:	40d6      	lsrs	r6, r2
   1b17e:	1e5d      	subs	r5, r3, #1
   1b180:	41ab      	sbcs	r3, r5
   1b182:	4330      	orrs	r0, r6
   1b184:	4318      	orrs	r0, r3
   1b186:	40d4      	lsrs	r4, r2
   1b188:	0743      	lsls	r3, r0, #29
   1b18a:	d009      	beq.n	1b1a0 <__aeabi_dmul+0x474>
   1b18c:	230f      	movs	r3, #15
   1b18e:	4003      	ands	r3, r0
   1b190:	2b04      	cmp	r3, #4
   1b192:	d005      	beq.n	1b1a0 <__aeabi_dmul+0x474>
   1b194:	0003      	movs	r3, r0
   1b196:	1d18      	adds	r0, r3, #4
   1b198:	4298      	cmp	r0, r3
   1b19a:	419b      	sbcs	r3, r3
   1b19c:	425b      	negs	r3, r3
   1b19e:	18e4      	adds	r4, r4, r3
   1b1a0:	0223      	lsls	r3, r4, #8
   1b1a2:	d521      	bpl.n	1b1e8 <__aeabi_dmul+0x4bc>
   1b1a4:	2501      	movs	r5, #1
   1b1a6:	9b01      	ldr	r3, [sp, #4]
   1b1a8:	2401      	movs	r4, #1
   1b1aa:	401d      	ands	r5, r3
   1b1ac:	2300      	movs	r3, #0
   1b1ae:	2200      	movs	r2, #0
   1b1b0:	4699      	mov	r9, r3
   1b1b2:	e622      	b.n	1adfa <__aeabi_dmul+0xce>
   1b1b4:	251f      	movs	r5, #31
   1b1b6:	0021      	movs	r1, r4
   1b1b8:	426d      	negs	r5, r5
   1b1ba:	1a28      	subs	r0, r5, r0
   1b1bc:	40c1      	lsrs	r1, r0
   1b1be:	0008      	movs	r0, r1
   1b1c0:	2a20      	cmp	r2, #32
   1b1c2:	d01d      	beq.n	1b200 <__aeabi_dmul+0x4d4>
   1b1c4:	355f      	adds	r5, #95	; 0x5f
   1b1c6:	1aaa      	subs	r2, r5, r2
   1b1c8:	4094      	lsls	r4, r2
   1b1ca:	4323      	orrs	r3, r4
   1b1cc:	1e5c      	subs	r4, r3, #1
   1b1ce:	41a3      	sbcs	r3, r4
   1b1d0:	2507      	movs	r5, #7
   1b1d2:	4303      	orrs	r3, r0
   1b1d4:	401d      	ands	r5, r3
   1b1d6:	2200      	movs	r2, #0
   1b1d8:	2d00      	cmp	r5, #0
   1b1da:	d009      	beq.n	1b1f0 <__aeabi_dmul+0x4c4>
   1b1dc:	220f      	movs	r2, #15
   1b1de:	2400      	movs	r4, #0
   1b1e0:	401a      	ands	r2, r3
   1b1e2:	0018      	movs	r0, r3
   1b1e4:	2a04      	cmp	r2, #4
   1b1e6:	d1d6      	bne.n	1b196 <__aeabi_dmul+0x46a>
   1b1e8:	0003      	movs	r3, r0
   1b1ea:	0765      	lsls	r5, r4, #29
   1b1ec:	0264      	lsls	r4, r4, #9
   1b1ee:	0b22      	lsrs	r2, r4, #12
   1b1f0:	08db      	lsrs	r3, r3, #3
   1b1f2:	432b      	orrs	r3, r5
   1b1f4:	2501      	movs	r5, #1
   1b1f6:	4699      	mov	r9, r3
   1b1f8:	9b01      	ldr	r3, [sp, #4]
   1b1fa:	2400      	movs	r4, #0
   1b1fc:	401d      	ands	r5, r3
   1b1fe:	e5fc      	b.n	1adfa <__aeabi_dmul+0xce>
   1b200:	2400      	movs	r4, #0
   1b202:	e7e2      	b.n	1b1ca <__aeabi_dmul+0x49e>
   1b204:	2280      	movs	r2, #128	; 0x80
   1b206:	2501      	movs	r5, #1
   1b208:	0312      	lsls	r2, r2, #12
   1b20a:	4322      	orrs	r2, r4
   1b20c:	9901      	ldr	r1, [sp, #4]
   1b20e:	0312      	lsls	r2, r2, #12
   1b210:	0b12      	lsrs	r2, r2, #12
   1b212:	400d      	ands	r5, r1
   1b214:	4699      	mov	r9, r3
   1b216:	4c04      	ldr	r4, [pc, #16]	; (1b228 <__aeabi_dmul+0x4fc>)
   1b218:	e5ef      	b.n	1adfa <__aeabi_dmul+0xce>
   1b21a:	46c0      	nop			; (mov r8, r8)
   1b21c:	000003ff 	.word	0x000003ff
   1b220:	feffffff 	.word	0xfeffffff
   1b224:	000007fe 	.word	0x000007fe
   1b228:	000007ff 	.word	0x000007ff

0001b22c <__aeabi_dsub>:
   1b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b22e:	4646      	mov	r6, r8
   1b230:	46d6      	mov	lr, sl
   1b232:	464f      	mov	r7, r9
   1b234:	030c      	lsls	r4, r1, #12
   1b236:	b5c0      	push	{r6, r7, lr}
   1b238:	0fcd      	lsrs	r5, r1, #31
   1b23a:	004e      	lsls	r6, r1, #1
   1b23c:	0a61      	lsrs	r1, r4, #9
   1b23e:	0f44      	lsrs	r4, r0, #29
   1b240:	430c      	orrs	r4, r1
   1b242:	00c1      	lsls	r1, r0, #3
   1b244:	0058      	lsls	r0, r3, #1
   1b246:	0d40      	lsrs	r0, r0, #21
   1b248:	4684      	mov	ip, r0
   1b24a:	468a      	mov	sl, r1
   1b24c:	000f      	movs	r7, r1
   1b24e:	0319      	lsls	r1, r3, #12
   1b250:	0f50      	lsrs	r0, r2, #29
   1b252:	0a49      	lsrs	r1, r1, #9
   1b254:	4301      	orrs	r1, r0
   1b256:	48c6      	ldr	r0, [pc, #792]	; (1b570 <__aeabi_dsub+0x344>)
   1b258:	0d76      	lsrs	r6, r6, #21
   1b25a:	46a8      	mov	r8, r5
   1b25c:	0fdb      	lsrs	r3, r3, #31
   1b25e:	00d2      	lsls	r2, r2, #3
   1b260:	4584      	cmp	ip, r0
   1b262:	d100      	bne.n	1b266 <__aeabi_dsub+0x3a>
   1b264:	e0d8      	b.n	1b418 <__aeabi_dsub+0x1ec>
   1b266:	2001      	movs	r0, #1
   1b268:	4043      	eors	r3, r0
   1b26a:	42ab      	cmp	r3, r5
   1b26c:	d100      	bne.n	1b270 <__aeabi_dsub+0x44>
   1b26e:	e0a6      	b.n	1b3be <__aeabi_dsub+0x192>
   1b270:	4660      	mov	r0, ip
   1b272:	1a35      	subs	r5, r6, r0
   1b274:	2d00      	cmp	r5, #0
   1b276:	dc00      	bgt.n	1b27a <__aeabi_dsub+0x4e>
   1b278:	e105      	b.n	1b486 <__aeabi_dsub+0x25a>
   1b27a:	2800      	cmp	r0, #0
   1b27c:	d110      	bne.n	1b2a0 <__aeabi_dsub+0x74>
   1b27e:	000b      	movs	r3, r1
   1b280:	4313      	orrs	r3, r2
   1b282:	d100      	bne.n	1b286 <__aeabi_dsub+0x5a>
   1b284:	e0d7      	b.n	1b436 <__aeabi_dsub+0x20a>
   1b286:	1e6b      	subs	r3, r5, #1
   1b288:	2b00      	cmp	r3, #0
   1b28a:	d000      	beq.n	1b28e <__aeabi_dsub+0x62>
   1b28c:	e14b      	b.n	1b526 <__aeabi_dsub+0x2fa>
   1b28e:	4653      	mov	r3, sl
   1b290:	1a9f      	subs	r7, r3, r2
   1b292:	45ba      	cmp	sl, r7
   1b294:	4180      	sbcs	r0, r0
   1b296:	1a64      	subs	r4, r4, r1
   1b298:	4240      	negs	r0, r0
   1b29a:	1a24      	subs	r4, r4, r0
   1b29c:	2601      	movs	r6, #1
   1b29e:	e01e      	b.n	1b2de <__aeabi_dsub+0xb2>
   1b2a0:	4bb3      	ldr	r3, [pc, #716]	; (1b570 <__aeabi_dsub+0x344>)
   1b2a2:	429e      	cmp	r6, r3
   1b2a4:	d048      	beq.n	1b338 <__aeabi_dsub+0x10c>
   1b2a6:	2380      	movs	r3, #128	; 0x80
   1b2a8:	041b      	lsls	r3, r3, #16
   1b2aa:	4319      	orrs	r1, r3
   1b2ac:	2d38      	cmp	r5, #56	; 0x38
   1b2ae:	dd00      	ble.n	1b2b2 <__aeabi_dsub+0x86>
   1b2b0:	e119      	b.n	1b4e6 <__aeabi_dsub+0x2ba>
   1b2b2:	2d1f      	cmp	r5, #31
   1b2b4:	dd00      	ble.n	1b2b8 <__aeabi_dsub+0x8c>
   1b2b6:	e14c      	b.n	1b552 <__aeabi_dsub+0x326>
   1b2b8:	2320      	movs	r3, #32
   1b2ba:	000f      	movs	r7, r1
   1b2bc:	1b5b      	subs	r3, r3, r5
   1b2be:	0010      	movs	r0, r2
   1b2c0:	409a      	lsls	r2, r3
   1b2c2:	409f      	lsls	r7, r3
   1b2c4:	40e8      	lsrs	r0, r5
   1b2c6:	1e53      	subs	r3, r2, #1
   1b2c8:	419a      	sbcs	r2, r3
   1b2ca:	40e9      	lsrs	r1, r5
   1b2cc:	4307      	orrs	r7, r0
   1b2ce:	4317      	orrs	r7, r2
   1b2d0:	4653      	mov	r3, sl
   1b2d2:	1bdf      	subs	r7, r3, r7
   1b2d4:	1a61      	subs	r1, r4, r1
   1b2d6:	45ba      	cmp	sl, r7
   1b2d8:	41a4      	sbcs	r4, r4
   1b2da:	4264      	negs	r4, r4
   1b2dc:	1b0c      	subs	r4, r1, r4
   1b2de:	0223      	lsls	r3, r4, #8
   1b2e0:	d400      	bmi.n	1b2e4 <__aeabi_dsub+0xb8>
   1b2e2:	e0c5      	b.n	1b470 <__aeabi_dsub+0x244>
   1b2e4:	0264      	lsls	r4, r4, #9
   1b2e6:	0a65      	lsrs	r5, r4, #9
   1b2e8:	2d00      	cmp	r5, #0
   1b2ea:	d100      	bne.n	1b2ee <__aeabi_dsub+0xc2>
   1b2ec:	e0f6      	b.n	1b4dc <__aeabi_dsub+0x2b0>
   1b2ee:	0028      	movs	r0, r5
   1b2f0:	f000 fb60 	bl	1b9b4 <__clzsi2>
   1b2f4:	0003      	movs	r3, r0
   1b2f6:	3b08      	subs	r3, #8
   1b2f8:	2b1f      	cmp	r3, #31
   1b2fa:	dd00      	ble.n	1b2fe <__aeabi_dsub+0xd2>
   1b2fc:	e0e9      	b.n	1b4d2 <__aeabi_dsub+0x2a6>
   1b2fe:	2220      	movs	r2, #32
   1b300:	003c      	movs	r4, r7
   1b302:	1ad2      	subs	r2, r2, r3
   1b304:	409d      	lsls	r5, r3
   1b306:	40d4      	lsrs	r4, r2
   1b308:	409f      	lsls	r7, r3
   1b30a:	4325      	orrs	r5, r4
   1b30c:	429e      	cmp	r6, r3
   1b30e:	dd00      	ble.n	1b312 <__aeabi_dsub+0xe6>
   1b310:	e0db      	b.n	1b4ca <__aeabi_dsub+0x29e>
   1b312:	1b9e      	subs	r6, r3, r6
   1b314:	1c73      	adds	r3, r6, #1
   1b316:	2b1f      	cmp	r3, #31
   1b318:	dd00      	ble.n	1b31c <__aeabi_dsub+0xf0>
   1b31a:	e10a      	b.n	1b532 <__aeabi_dsub+0x306>
   1b31c:	2220      	movs	r2, #32
   1b31e:	0038      	movs	r0, r7
   1b320:	1ad2      	subs	r2, r2, r3
   1b322:	0029      	movs	r1, r5
   1b324:	4097      	lsls	r7, r2
   1b326:	002c      	movs	r4, r5
   1b328:	4091      	lsls	r1, r2
   1b32a:	40d8      	lsrs	r0, r3
   1b32c:	1e7a      	subs	r2, r7, #1
   1b32e:	4197      	sbcs	r7, r2
   1b330:	40dc      	lsrs	r4, r3
   1b332:	2600      	movs	r6, #0
   1b334:	4301      	orrs	r1, r0
   1b336:	430f      	orrs	r7, r1
   1b338:	077b      	lsls	r3, r7, #29
   1b33a:	d009      	beq.n	1b350 <__aeabi_dsub+0x124>
   1b33c:	230f      	movs	r3, #15
   1b33e:	403b      	ands	r3, r7
   1b340:	2b04      	cmp	r3, #4
   1b342:	d005      	beq.n	1b350 <__aeabi_dsub+0x124>
   1b344:	1d3b      	adds	r3, r7, #4
   1b346:	42bb      	cmp	r3, r7
   1b348:	41bf      	sbcs	r7, r7
   1b34a:	427f      	negs	r7, r7
   1b34c:	19e4      	adds	r4, r4, r7
   1b34e:	001f      	movs	r7, r3
   1b350:	0223      	lsls	r3, r4, #8
   1b352:	d525      	bpl.n	1b3a0 <__aeabi_dsub+0x174>
   1b354:	4b86      	ldr	r3, [pc, #536]	; (1b570 <__aeabi_dsub+0x344>)
   1b356:	3601      	adds	r6, #1
   1b358:	429e      	cmp	r6, r3
   1b35a:	d100      	bne.n	1b35e <__aeabi_dsub+0x132>
   1b35c:	e0af      	b.n	1b4be <__aeabi_dsub+0x292>
   1b35e:	4b85      	ldr	r3, [pc, #532]	; (1b574 <__aeabi_dsub+0x348>)
   1b360:	2501      	movs	r5, #1
   1b362:	401c      	ands	r4, r3
   1b364:	4643      	mov	r3, r8
   1b366:	0762      	lsls	r2, r4, #29
   1b368:	08ff      	lsrs	r7, r7, #3
   1b36a:	0264      	lsls	r4, r4, #9
   1b36c:	0576      	lsls	r6, r6, #21
   1b36e:	4317      	orrs	r7, r2
   1b370:	0b24      	lsrs	r4, r4, #12
   1b372:	0d76      	lsrs	r6, r6, #21
   1b374:	401d      	ands	r5, r3
   1b376:	2100      	movs	r1, #0
   1b378:	0324      	lsls	r4, r4, #12
   1b37a:	0b23      	lsrs	r3, r4, #12
   1b37c:	0d0c      	lsrs	r4, r1, #20
   1b37e:	4a7e      	ldr	r2, [pc, #504]	; (1b578 <__aeabi_dsub+0x34c>)
   1b380:	0524      	lsls	r4, r4, #20
   1b382:	431c      	orrs	r4, r3
   1b384:	4014      	ands	r4, r2
   1b386:	0533      	lsls	r3, r6, #20
   1b388:	4323      	orrs	r3, r4
   1b38a:	005b      	lsls	r3, r3, #1
   1b38c:	07ed      	lsls	r5, r5, #31
   1b38e:	085b      	lsrs	r3, r3, #1
   1b390:	432b      	orrs	r3, r5
   1b392:	0038      	movs	r0, r7
   1b394:	0019      	movs	r1, r3
   1b396:	bc1c      	pop	{r2, r3, r4}
   1b398:	4690      	mov	r8, r2
   1b39a:	4699      	mov	r9, r3
   1b39c:	46a2      	mov	sl, r4
   1b39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b3a0:	2501      	movs	r5, #1
   1b3a2:	4643      	mov	r3, r8
   1b3a4:	0762      	lsls	r2, r4, #29
   1b3a6:	08ff      	lsrs	r7, r7, #3
   1b3a8:	4317      	orrs	r7, r2
   1b3aa:	08e4      	lsrs	r4, r4, #3
   1b3ac:	401d      	ands	r5, r3
   1b3ae:	4b70      	ldr	r3, [pc, #448]	; (1b570 <__aeabi_dsub+0x344>)
   1b3b0:	429e      	cmp	r6, r3
   1b3b2:	d036      	beq.n	1b422 <__aeabi_dsub+0x1f6>
   1b3b4:	0324      	lsls	r4, r4, #12
   1b3b6:	0576      	lsls	r6, r6, #21
   1b3b8:	0b24      	lsrs	r4, r4, #12
   1b3ba:	0d76      	lsrs	r6, r6, #21
   1b3bc:	e7db      	b.n	1b376 <__aeabi_dsub+0x14a>
   1b3be:	4663      	mov	r3, ip
   1b3c0:	1af3      	subs	r3, r6, r3
   1b3c2:	2b00      	cmp	r3, #0
   1b3c4:	dc00      	bgt.n	1b3c8 <__aeabi_dsub+0x19c>
   1b3c6:	e094      	b.n	1b4f2 <__aeabi_dsub+0x2c6>
   1b3c8:	4660      	mov	r0, ip
   1b3ca:	2800      	cmp	r0, #0
   1b3cc:	d035      	beq.n	1b43a <__aeabi_dsub+0x20e>
   1b3ce:	4868      	ldr	r0, [pc, #416]	; (1b570 <__aeabi_dsub+0x344>)
   1b3d0:	4286      	cmp	r6, r0
   1b3d2:	d0b1      	beq.n	1b338 <__aeabi_dsub+0x10c>
   1b3d4:	2780      	movs	r7, #128	; 0x80
   1b3d6:	043f      	lsls	r7, r7, #16
   1b3d8:	4339      	orrs	r1, r7
   1b3da:	2b38      	cmp	r3, #56	; 0x38
   1b3dc:	dc00      	bgt.n	1b3e0 <__aeabi_dsub+0x1b4>
   1b3de:	e0fd      	b.n	1b5dc <__aeabi_dsub+0x3b0>
   1b3e0:	430a      	orrs	r2, r1
   1b3e2:	0017      	movs	r7, r2
   1b3e4:	2100      	movs	r1, #0
   1b3e6:	1e7a      	subs	r2, r7, #1
   1b3e8:	4197      	sbcs	r7, r2
   1b3ea:	4457      	add	r7, sl
   1b3ec:	4557      	cmp	r7, sl
   1b3ee:	4180      	sbcs	r0, r0
   1b3f0:	1909      	adds	r1, r1, r4
   1b3f2:	4244      	negs	r4, r0
   1b3f4:	190c      	adds	r4, r1, r4
   1b3f6:	0223      	lsls	r3, r4, #8
   1b3f8:	d53a      	bpl.n	1b470 <__aeabi_dsub+0x244>
   1b3fa:	4b5d      	ldr	r3, [pc, #372]	; (1b570 <__aeabi_dsub+0x344>)
   1b3fc:	3601      	adds	r6, #1
   1b3fe:	429e      	cmp	r6, r3
   1b400:	d100      	bne.n	1b404 <__aeabi_dsub+0x1d8>
   1b402:	e14b      	b.n	1b69c <__aeabi_dsub+0x470>
   1b404:	2201      	movs	r2, #1
   1b406:	4b5b      	ldr	r3, [pc, #364]	; (1b574 <__aeabi_dsub+0x348>)
   1b408:	401c      	ands	r4, r3
   1b40a:	087b      	lsrs	r3, r7, #1
   1b40c:	4017      	ands	r7, r2
   1b40e:	431f      	orrs	r7, r3
   1b410:	07e2      	lsls	r2, r4, #31
   1b412:	4317      	orrs	r7, r2
   1b414:	0864      	lsrs	r4, r4, #1
   1b416:	e78f      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b418:	0008      	movs	r0, r1
   1b41a:	4310      	orrs	r0, r2
   1b41c:	d000      	beq.n	1b420 <__aeabi_dsub+0x1f4>
   1b41e:	e724      	b.n	1b26a <__aeabi_dsub+0x3e>
   1b420:	e721      	b.n	1b266 <__aeabi_dsub+0x3a>
   1b422:	0023      	movs	r3, r4
   1b424:	433b      	orrs	r3, r7
   1b426:	d100      	bne.n	1b42a <__aeabi_dsub+0x1fe>
   1b428:	e1b9      	b.n	1b79e <__aeabi_dsub+0x572>
   1b42a:	2280      	movs	r2, #128	; 0x80
   1b42c:	0312      	lsls	r2, r2, #12
   1b42e:	4314      	orrs	r4, r2
   1b430:	0324      	lsls	r4, r4, #12
   1b432:	0b24      	lsrs	r4, r4, #12
   1b434:	e79f      	b.n	1b376 <__aeabi_dsub+0x14a>
   1b436:	002e      	movs	r6, r5
   1b438:	e77e      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b43a:	0008      	movs	r0, r1
   1b43c:	4310      	orrs	r0, r2
   1b43e:	d100      	bne.n	1b442 <__aeabi_dsub+0x216>
   1b440:	e0ca      	b.n	1b5d8 <__aeabi_dsub+0x3ac>
   1b442:	1e58      	subs	r0, r3, #1
   1b444:	4684      	mov	ip, r0
   1b446:	2800      	cmp	r0, #0
   1b448:	d000      	beq.n	1b44c <__aeabi_dsub+0x220>
   1b44a:	e0e7      	b.n	1b61c <__aeabi_dsub+0x3f0>
   1b44c:	4452      	add	r2, sl
   1b44e:	4552      	cmp	r2, sl
   1b450:	4180      	sbcs	r0, r0
   1b452:	1864      	adds	r4, r4, r1
   1b454:	4240      	negs	r0, r0
   1b456:	1824      	adds	r4, r4, r0
   1b458:	0017      	movs	r7, r2
   1b45a:	2601      	movs	r6, #1
   1b45c:	0223      	lsls	r3, r4, #8
   1b45e:	d507      	bpl.n	1b470 <__aeabi_dsub+0x244>
   1b460:	2602      	movs	r6, #2
   1b462:	e7cf      	b.n	1b404 <__aeabi_dsub+0x1d8>
   1b464:	4664      	mov	r4, ip
   1b466:	432c      	orrs	r4, r5
   1b468:	d100      	bne.n	1b46c <__aeabi_dsub+0x240>
   1b46a:	e1b3      	b.n	1b7d4 <__aeabi_dsub+0x5a8>
   1b46c:	002c      	movs	r4, r5
   1b46e:	4667      	mov	r7, ip
   1b470:	077b      	lsls	r3, r7, #29
   1b472:	d000      	beq.n	1b476 <__aeabi_dsub+0x24a>
   1b474:	e762      	b.n	1b33c <__aeabi_dsub+0x110>
   1b476:	0763      	lsls	r3, r4, #29
   1b478:	08ff      	lsrs	r7, r7, #3
   1b47a:	431f      	orrs	r7, r3
   1b47c:	2501      	movs	r5, #1
   1b47e:	4643      	mov	r3, r8
   1b480:	08e4      	lsrs	r4, r4, #3
   1b482:	401d      	ands	r5, r3
   1b484:	e793      	b.n	1b3ae <__aeabi_dsub+0x182>
   1b486:	2d00      	cmp	r5, #0
   1b488:	d178      	bne.n	1b57c <__aeabi_dsub+0x350>
   1b48a:	1c75      	adds	r5, r6, #1
   1b48c:	056d      	lsls	r5, r5, #21
   1b48e:	0d6d      	lsrs	r5, r5, #21
   1b490:	2d01      	cmp	r5, #1
   1b492:	dc00      	bgt.n	1b496 <__aeabi_dsub+0x26a>
   1b494:	e0f2      	b.n	1b67c <__aeabi_dsub+0x450>
   1b496:	4650      	mov	r0, sl
   1b498:	1a80      	subs	r0, r0, r2
   1b49a:	4582      	cmp	sl, r0
   1b49c:	41bf      	sbcs	r7, r7
   1b49e:	1a65      	subs	r5, r4, r1
   1b4a0:	427f      	negs	r7, r7
   1b4a2:	1bed      	subs	r5, r5, r7
   1b4a4:	4684      	mov	ip, r0
   1b4a6:	0228      	lsls	r0, r5, #8
   1b4a8:	d400      	bmi.n	1b4ac <__aeabi_dsub+0x280>
   1b4aa:	e08c      	b.n	1b5c6 <__aeabi_dsub+0x39a>
   1b4ac:	4650      	mov	r0, sl
   1b4ae:	1a17      	subs	r7, r2, r0
   1b4b0:	42ba      	cmp	r2, r7
   1b4b2:	4192      	sbcs	r2, r2
   1b4b4:	1b0c      	subs	r4, r1, r4
   1b4b6:	4255      	negs	r5, r2
   1b4b8:	1b65      	subs	r5, r4, r5
   1b4ba:	4698      	mov	r8, r3
   1b4bc:	e714      	b.n	1b2e8 <__aeabi_dsub+0xbc>
   1b4be:	2501      	movs	r5, #1
   1b4c0:	4643      	mov	r3, r8
   1b4c2:	2400      	movs	r4, #0
   1b4c4:	401d      	ands	r5, r3
   1b4c6:	2700      	movs	r7, #0
   1b4c8:	e755      	b.n	1b376 <__aeabi_dsub+0x14a>
   1b4ca:	4c2a      	ldr	r4, [pc, #168]	; (1b574 <__aeabi_dsub+0x348>)
   1b4cc:	1af6      	subs	r6, r6, r3
   1b4ce:	402c      	ands	r4, r5
   1b4d0:	e732      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b4d2:	003d      	movs	r5, r7
   1b4d4:	3828      	subs	r0, #40	; 0x28
   1b4d6:	4085      	lsls	r5, r0
   1b4d8:	2700      	movs	r7, #0
   1b4da:	e717      	b.n	1b30c <__aeabi_dsub+0xe0>
   1b4dc:	0038      	movs	r0, r7
   1b4de:	f000 fa69 	bl	1b9b4 <__clzsi2>
   1b4e2:	3020      	adds	r0, #32
   1b4e4:	e706      	b.n	1b2f4 <__aeabi_dsub+0xc8>
   1b4e6:	430a      	orrs	r2, r1
   1b4e8:	0017      	movs	r7, r2
   1b4ea:	2100      	movs	r1, #0
   1b4ec:	1e7a      	subs	r2, r7, #1
   1b4ee:	4197      	sbcs	r7, r2
   1b4f0:	e6ee      	b.n	1b2d0 <__aeabi_dsub+0xa4>
   1b4f2:	2b00      	cmp	r3, #0
   1b4f4:	d000      	beq.n	1b4f8 <__aeabi_dsub+0x2cc>
   1b4f6:	e0e5      	b.n	1b6c4 <__aeabi_dsub+0x498>
   1b4f8:	1c73      	adds	r3, r6, #1
   1b4fa:	469c      	mov	ip, r3
   1b4fc:	055b      	lsls	r3, r3, #21
   1b4fe:	0d5b      	lsrs	r3, r3, #21
   1b500:	2b01      	cmp	r3, #1
   1b502:	dc00      	bgt.n	1b506 <__aeabi_dsub+0x2da>
   1b504:	e09f      	b.n	1b646 <__aeabi_dsub+0x41a>
   1b506:	4b1a      	ldr	r3, [pc, #104]	; (1b570 <__aeabi_dsub+0x344>)
   1b508:	459c      	cmp	ip, r3
   1b50a:	d100      	bne.n	1b50e <__aeabi_dsub+0x2e2>
   1b50c:	e0c5      	b.n	1b69a <__aeabi_dsub+0x46e>
   1b50e:	4452      	add	r2, sl
   1b510:	4552      	cmp	r2, sl
   1b512:	4180      	sbcs	r0, r0
   1b514:	1864      	adds	r4, r4, r1
   1b516:	4240      	negs	r0, r0
   1b518:	1824      	adds	r4, r4, r0
   1b51a:	07e7      	lsls	r7, r4, #31
   1b51c:	0852      	lsrs	r2, r2, #1
   1b51e:	4317      	orrs	r7, r2
   1b520:	0864      	lsrs	r4, r4, #1
   1b522:	4666      	mov	r6, ip
   1b524:	e708      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b526:	4812      	ldr	r0, [pc, #72]	; (1b570 <__aeabi_dsub+0x344>)
   1b528:	4285      	cmp	r5, r0
   1b52a:	d100      	bne.n	1b52e <__aeabi_dsub+0x302>
   1b52c:	e085      	b.n	1b63a <__aeabi_dsub+0x40e>
   1b52e:	001d      	movs	r5, r3
   1b530:	e6bc      	b.n	1b2ac <__aeabi_dsub+0x80>
   1b532:	0029      	movs	r1, r5
   1b534:	3e1f      	subs	r6, #31
   1b536:	40f1      	lsrs	r1, r6
   1b538:	2b20      	cmp	r3, #32
   1b53a:	d100      	bne.n	1b53e <__aeabi_dsub+0x312>
   1b53c:	e07f      	b.n	1b63e <__aeabi_dsub+0x412>
   1b53e:	2240      	movs	r2, #64	; 0x40
   1b540:	1ad3      	subs	r3, r2, r3
   1b542:	409d      	lsls	r5, r3
   1b544:	432f      	orrs	r7, r5
   1b546:	1e7d      	subs	r5, r7, #1
   1b548:	41af      	sbcs	r7, r5
   1b54a:	2400      	movs	r4, #0
   1b54c:	430f      	orrs	r7, r1
   1b54e:	2600      	movs	r6, #0
   1b550:	e78e      	b.n	1b470 <__aeabi_dsub+0x244>
   1b552:	002b      	movs	r3, r5
   1b554:	000f      	movs	r7, r1
   1b556:	3b20      	subs	r3, #32
   1b558:	40df      	lsrs	r7, r3
   1b55a:	2d20      	cmp	r5, #32
   1b55c:	d071      	beq.n	1b642 <__aeabi_dsub+0x416>
   1b55e:	2340      	movs	r3, #64	; 0x40
   1b560:	1b5d      	subs	r5, r3, r5
   1b562:	40a9      	lsls	r1, r5
   1b564:	430a      	orrs	r2, r1
   1b566:	1e51      	subs	r1, r2, #1
   1b568:	418a      	sbcs	r2, r1
   1b56a:	2100      	movs	r1, #0
   1b56c:	4317      	orrs	r7, r2
   1b56e:	e6af      	b.n	1b2d0 <__aeabi_dsub+0xa4>
   1b570:	000007ff 	.word	0x000007ff
   1b574:	ff7fffff 	.word	0xff7fffff
   1b578:	800fffff 	.word	0x800fffff
   1b57c:	2e00      	cmp	r6, #0
   1b57e:	d03e      	beq.n	1b5fe <__aeabi_dsub+0x3d2>
   1b580:	4eb3      	ldr	r6, [pc, #716]	; (1b850 <__aeabi_dsub+0x624>)
   1b582:	45b4      	cmp	ip, r6
   1b584:	d045      	beq.n	1b612 <__aeabi_dsub+0x3e6>
   1b586:	2680      	movs	r6, #128	; 0x80
   1b588:	0436      	lsls	r6, r6, #16
   1b58a:	426d      	negs	r5, r5
   1b58c:	4334      	orrs	r4, r6
   1b58e:	2d38      	cmp	r5, #56	; 0x38
   1b590:	dd00      	ble.n	1b594 <__aeabi_dsub+0x368>
   1b592:	e0a8      	b.n	1b6e6 <__aeabi_dsub+0x4ba>
   1b594:	2d1f      	cmp	r5, #31
   1b596:	dd00      	ble.n	1b59a <__aeabi_dsub+0x36e>
   1b598:	e11f      	b.n	1b7da <__aeabi_dsub+0x5ae>
   1b59a:	2620      	movs	r6, #32
   1b59c:	0027      	movs	r7, r4
   1b59e:	4650      	mov	r0, sl
   1b5a0:	1b76      	subs	r6, r6, r5
   1b5a2:	40b7      	lsls	r7, r6
   1b5a4:	40e8      	lsrs	r0, r5
   1b5a6:	4307      	orrs	r7, r0
   1b5a8:	4650      	mov	r0, sl
   1b5aa:	40b0      	lsls	r0, r6
   1b5ac:	1e46      	subs	r6, r0, #1
   1b5ae:	41b0      	sbcs	r0, r6
   1b5b0:	40ec      	lsrs	r4, r5
   1b5b2:	4338      	orrs	r0, r7
   1b5b4:	1a17      	subs	r7, r2, r0
   1b5b6:	42ba      	cmp	r2, r7
   1b5b8:	4192      	sbcs	r2, r2
   1b5ba:	1b0c      	subs	r4, r1, r4
   1b5bc:	4252      	negs	r2, r2
   1b5be:	1aa4      	subs	r4, r4, r2
   1b5c0:	4666      	mov	r6, ip
   1b5c2:	4698      	mov	r8, r3
   1b5c4:	e68b      	b.n	1b2de <__aeabi_dsub+0xb2>
   1b5c6:	4664      	mov	r4, ip
   1b5c8:	4667      	mov	r7, ip
   1b5ca:	432c      	orrs	r4, r5
   1b5cc:	d000      	beq.n	1b5d0 <__aeabi_dsub+0x3a4>
   1b5ce:	e68b      	b.n	1b2e8 <__aeabi_dsub+0xbc>
   1b5d0:	2500      	movs	r5, #0
   1b5d2:	2600      	movs	r6, #0
   1b5d4:	2700      	movs	r7, #0
   1b5d6:	e6ea      	b.n	1b3ae <__aeabi_dsub+0x182>
   1b5d8:	001e      	movs	r6, r3
   1b5da:	e6ad      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b5dc:	2b1f      	cmp	r3, #31
   1b5de:	dc60      	bgt.n	1b6a2 <__aeabi_dsub+0x476>
   1b5e0:	2720      	movs	r7, #32
   1b5e2:	1af8      	subs	r0, r7, r3
   1b5e4:	000f      	movs	r7, r1
   1b5e6:	4684      	mov	ip, r0
   1b5e8:	4087      	lsls	r7, r0
   1b5ea:	0010      	movs	r0, r2
   1b5ec:	40d8      	lsrs	r0, r3
   1b5ee:	4307      	orrs	r7, r0
   1b5f0:	4660      	mov	r0, ip
   1b5f2:	4082      	lsls	r2, r0
   1b5f4:	1e50      	subs	r0, r2, #1
   1b5f6:	4182      	sbcs	r2, r0
   1b5f8:	40d9      	lsrs	r1, r3
   1b5fa:	4317      	orrs	r7, r2
   1b5fc:	e6f5      	b.n	1b3ea <__aeabi_dsub+0x1be>
   1b5fe:	0026      	movs	r6, r4
   1b600:	4650      	mov	r0, sl
   1b602:	4306      	orrs	r6, r0
   1b604:	d005      	beq.n	1b612 <__aeabi_dsub+0x3e6>
   1b606:	43ed      	mvns	r5, r5
   1b608:	2d00      	cmp	r5, #0
   1b60a:	d0d3      	beq.n	1b5b4 <__aeabi_dsub+0x388>
   1b60c:	4e90      	ldr	r6, [pc, #576]	; (1b850 <__aeabi_dsub+0x624>)
   1b60e:	45b4      	cmp	ip, r6
   1b610:	d1bd      	bne.n	1b58e <__aeabi_dsub+0x362>
   1b612:	000c      	movs	r4, r1
   1b614:	0017      	movs	r7, r2
   1b616:	4666      	mov	r6, ip
   1b618:	4698      	mov	r8, r3
   1b61a:	e68d      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b61c:	488c      	ldr	r0, [pc, #560]	; (1b850 <__aeabi_dsub+0x624>)
   1b61e:	4283      	cmp	r3, r0
   1b620:	d00b      	beq.n	1b63a <__aeabi_dsub+0x40e>
   1b622:	4663      	mov	r3, ip
   1b624:	e6d9      	b.n	1b3da <__aeabi_dsub+0x1ae>
   1b626:	2d00      	cmp	r5, #0
   1b628:	d000      	beq.n	1b62c <__aeabi_dsub+0x400>
   1b62a:	e096      	b.n	1b75a <__aeabi_dsub+0x52e>
   1b62c:	0008      	movs	r0, r1
   1b62e:	4310      	orrs	r0, r2
   1b630:	d100      	bne.n	1b634 <__aeabi_dsub+0x408>
   1b632:	e0e2      	b.n	1b7fa <__aeabi_dsub+0x5ce>
   1b634:	000c      	movs	r4, r1
   1b636:	0017      	movs	r7, r2
   1b638:	4698      	mov	r8, r3
   1b63a:	4e85      	ldr	r6, [pc, #532]	; (1b850 <__aeabi_dsub+0x624>)
   1b63c:	e67c      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b63e:	2500      	movs	r5, #0
   1b640:	e780      	b.n	1b544 <__aeabi_dsub+0x318>
   1b642:	2100      	movs	r1, #0
   1b644:	e78e      	b.n	1b564 <__aeabi_dsub+0x338>
   1b646:	0023      	movs	r3, r4
   1b648:	4650      	mov	r0, sl
   1b64a:	4303      	orrs	r3, r0
   1b64c:	2e00      	cmp	r6, #0
   1b64e:	d000      	beq.n	1b652 <__aeabi_dsub+0x426>
   1b650:	e0a8      	b.n	1b7a4 <__aeabi_dsub+0x578>
   1b652:	2b00      	cmp	r3, #0
   1b654:	d100      	bne.n	1b658 <__aeabi_dsub+0x42c>
   1b656:	e0de      	b.n	1b816 <__aeabi_dsub+0x5ea>
   1b658:	000b      	movs	r3, r1
   1b65a:	4313      	orrs	r3, r2
   1b65c:	d100      	bne.n	1b660 <__aeabi_dsub+0x434>
   1b65e:	e66b      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b660:	4452      	add	r2, sl
   1b662:	4552      	cmp	r2, sl
   1b664:	4180      	sbcs	r0, r0
   1b666:	1864      	adds	r4, r4, r1
   1b668:	4240      	negs	r0, r0
   1b66a:	1824      	adds	r4, r4, r0
   1b66c:	0017      	movs	r7, r2
   1b66e:	0223      	lsls	r3, r4, #8
   1b670:	d400      	bmi.n	1b674 <__aeabi_dsub+0x448>
   1b672:	e6fd      	b.n	1b470 <__aeabi_dsub+0x244>
   1b674:	4b77      	ldr	r3, [pc, #476]	; (1b854 <__aeabi_dsub+0x628>)
   1b676:	4666      	mov	r6, ip
   1b678:	401c      	ands	r4, r3
   1b67a:	e65d      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b67c:	0025      	movs	r5, r4
   1b67e:	4650      	mov	r0, sl
   1b680:	4305      	orrs	r5, r0
   1b682:	2e00      	cmp	r6, #0
   1b684:	d1cf      	bne.n	1b626 <__aeabi_dsub+0x3fa>
   1b686:	2d00      	cmp	r5, #0
   1b688:	d14f      	bne.n	1b72a <__aeabi_dsub+0x4fe>
   1b68a:	000c      	movs	r4, r1
   1b68c:	4314      	orrs	r4, r2
   1b68e:	d100      	bne.n	1b692 <__aeabi_dsub+0x466>
   1b690:	e0a0      	b.n	1b7d4 <__aeabi_dsub+0x5a8>
   1b692:	000c      	movs	r4, r1
   1b694:	0017      	movs	r7, r2
   1b696:	4698      	mov	r8, r3
   1b698:	e64e      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b69a:	4666      	mov	r6, ip
   1b69c:	2400      	movs	r4, #0
   1b69e:	2700      	movs	r7, #0
   1b6a0:	e685      	b.n	1b3ae <__aeabi_dsub+0x182>
   1b6a2:	001f      	movs	r7, r3
   1b6a4:	0008      	movs	r0, r1
   1b6a6:	3f20      	subs	r7, #32
   1b6a8:	40f8      	lsrs	r0, r7
   1b6aa:	0007      	movs	r7, r0
   1b6ac:	2b20      	cmp	r3, #32
   1b6ae:	d100      	bne.n	1b6b2 <__aeabi_dsub+0x486>
   1b6b0:	e08e      	b.n	1b7d0 <__aeabi_dsub+0x5a4>
   1b6b2:	2040      	movs	r0, #64	; 0x40
   1b6b4:	1ac3      	subs	r3, r0, r3
   1b6b6:	4099      	lsls	r1, r3
   1b6b8:	430a      	orrs	r2, r1
   1b6ba:	1e51      	subs	r1, r2, #1
   1b6bc:	418a      	sbcs	r2, r1
   1b6be:	2100      	movs	r1, #0
   1b6c0:	4317      	orrs	r7, r2
   1b6c2:	e692      	b.n	1b3ea <__aeabi_dsub+0x1be>
   1b6c4:	2e00      	cmp	r6, #0
   1b6c6:	d114      	bne.n	1b6f2 <__aeabi_dsub+0x4c6>
   1b6c8:	0026      	movs	r6, r4
   1b6ca:	4650      	mov	r0, sl
   1b6cc:	4306      	orrs	r6, r0
   1b6ce:	d062      	beq.n	1b796 <__aeabi_dsub+0x56a>
   1b6d0:	43db      	mvns	r3, r3
   1b6d2:	2b00      	cmp	r3, #0
   1b6d4:	d15c      	bne.n	1b790 <__aeabi_dsub+0x564>
   1b6d6:	1887      	adds	r7, r0, r2
   1b6d8:	4297      	cmp	r7, r2
   1b6da:	4192      	sbcs	r2, r2
   1b6dc:	1864      	adds	r4, r4, r1
   1b6de:	4252      	negs	r2, r2
   1b6e0:	18a4      	adds	r4, r4, r2
   1b6e2:	4666      	mov	r6, ip
   1b6e4:	e687      	b.n	1b3f6 <__aeabi_dsub+0x1ca>
   1b6e6:	4650      	mov	r0, sl
   1b6e8:	4320      	orrs	r0, r4
   1b6ea:	1e44      	subs	r4, r0, #1
   1b6ec:	41a0      	sbcs	r0, r4
   1b6ee:	2400      	movs	r4, #0
   1b6f0:	e760      	b.n	1b5b4 <__aeabi_dsub+0x388>
   1b6f2:	4e57      	ldr	r6, [pc, #348]	; (1b850 <__aeabi_dsub+0x624>)
   1b6f4:	45b4      	cmp	ip, r6
   1b6f6:	d04e      	beq.n	1b796 <__aeabi_dsub+0x56a>
   1b6f8:	2680      	movs	r6, #128	; 0x80
   1b6fa:	0436      	lsls	r6, r6, #16
   1b6fc:	425b      	negs	r3, r3
   1b6fe:	4334      	orrs	r4, r6
   1b700:	2b38      	cmp	r3, #56	; 0x38
   1b702:	dd00      	ble.n	1b706 <__aeabi_dsub+0x4da>
   1b704:	e07f      	b.n	1b806 <__aeabi_dsub+0x5da>
   1b706:	2b1f      	cmp	r3, #31
   1b708:	dd00      	ble.n	1b70c <__aeabi_dsub+0x4e0>
   1b70a:	e08b      	b.n	1b824 <__aeabi_dsub+0x5f8>
   1b70c:	2620      	movs	r6, #32
   1b70e:	0027      	movs	r7, r4
   1b710:	4650      	mov	r0, sl
   1b712:	1af6      	subs	r6, r6, r3
   1b714:	40b7      	lsls	r7, r6
   1b716:	40d8      	lsrs	r0, r3
   1b718:	4307      	orrs	r7, r0
   1b71a:	4650      	mov	r0, sl
   1b71c:	40b0      	lsls	r0, r6
   1b71e:	1e46      	subs	r6, r0, #1
   1b720:	41b0      	sbcs	r0, r6
   1b722:	4307      	orrs	r7, r0
   1b724:	40dc      	lsrs	r4, r3
   1b726:	18bf      	adds	r7, r7, r2
   1b728:	e7d6      	b.n	1b6d8 <__aeabi_dsub+0x4ac>
   1b72a:	000d      	movs	r5, r1
   1b72c:	4315      	orrs	r5, r2
   1b72e:	d100      	bne.n	1b732 <__aeabi_dsub+0x506>
   1b730:	e602      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b732:	4650      	mov	r0, sl
   1b734:	1a80      	subs	r0, r0, r2
   1b736:	4582      	cmp	sl, r0
   1b738:	41bf      	sbcs	r7, r7
   1b73a:	1a65      	subs	r5, r4, r1
   1b73c:	427f      	negs	r7, r7
   1b73e:	1bed      	subs	r5, r5, r7
   1b740:	4684      	mov	ip, r0
   1b742:	0228      	lsls	r0, r5, #8
   1b744:	d400      	bmi.n	1b748 <__aeabi_dsub+0x51c>
   1b746:	e68d      	b.n	1b464 <__aeabi_dsub+0x238>
   1b748:	4650      	mov	r0, sl
   1b74a:	1a17      	subs	r7, r2, r0
   1b74c:	42ba      	cmp	r2, r7
   1b74e:	4192      	sbcs	r2, r2
   1b750:	1b0c      	subs	r4, r1, r4
   1b752:	4252      	negs	r2, r2
   1b754:	1aa4      	subs	r4, r4, r2
   1b756:	4698      	mov	r8, r3
   1b758:	e5ee      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b75a:	000d      	movs	r5, r1
   1b75c:	4315      	orrs	r5, r2
   1b75e:	d100      	bne.n	1b762 <__aeabi_dsub+0x536>
   1b760:	e76b      	b.n	1b63a <__aeabi_dsub+0x40e>
   1b762:	4650      	mov	r0, sl
   1b764:	0767      	lsls	r7, r4, #29
   1b766:	08c0      	lsrs	r0, r0, #3
   1b768:	4307      	orrs	r7, r0
   1b76a:	2080      	movs	r0, #128	; 0x80
   1b76c:	08e4      	lsrs	r4, r4, #3
   1b76e:	0300      	lsls	r0, r0, #12
   1b770:	4204      	tst	r4, r0
   1b772:	d007      	beq.n	1b784 <__aeabi_dsub+0x558>
   1b774:	08cd      	lsrs	r5, r1, #3
   1b776:	4205      	tst	r5, r0
   1b778:	d104      	bne.n	1b784 <__aeabi_dsub+0x558>
   1b77a:	002c      	movs	r4, r5
   1b77c:	4698      	mov	r8, r3
   1b77e:	08d7      	lsrs	r7, r2, #3
   1b780:	0749      	lsls	r1, r1, #29
   1b782:	430f      	orrs	r7, r1
   1b784:	0f7b      	lsrs	r3, r7, #29
   1b786:	00e4      	lsls	r4, r4, #3
   1b788:	431c      	orrs	r4, r3
   1b78a:	00ff      	lsls	r7, r7, #3
   1b78c:	4e30      	ldr	r6, [pc, #192]	; (1b850 <__aeabi_dsub+0x624>)
   1b78e:	e5d3      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b790:	4e2f      	ldr	r6, [pc, #188]	; (1b850 <__aeabi_dsub+0x624>)
   1b792:	45b4      	cmp	ip, r6
   1b794:	d1b4      	bne.n	1b700 <__aeabi_dsub+0x4d4>
   1b796:	000c      	movs	r4, r1
   1b798:	0017      	movs	r7, r2
   1b79a:	4666      	mov	r6, ip
   1b79c:	e5cc      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b79e:	2700      	movs	r7, #0
   1b7a0:	2400      	movs	r4, #0
   1b7a2:	e5e8      	b.n	1b376 <__aeabi_dsub+0x14a>
   1b7a4:	2b00      	cmp	r3, #0
   1b7a6:	d039      	beq.n	1b81c <__aeabi_dsub+0x5f0>
   1b7a8:	000b      	movs	r3, r1
   1b7aa:	4313      	orrs	r3, r2
   1b7ac:	d100      	bne.n	1b7b0 <__aeabi_dsub+0x584>
   1b7ae:	e744      	b.n	1b63a <__aeabi_dsub+0x40e>
   1b7b0:	08c0      	lsrs	r0, r0, #3
   1b7b2:	0767      	lsls	r7, r4, #29
   1b7b4:	4307      	orrs	r7, r0
   1b7b6:	2080      	movs	r0, #128	; 0x80
   1b7b8:	08e4      	lsrs	r4, r4, #3
   1b7ba:	0300      	lsls	r0, r0, #12
   1b7bc:	4204      	tst	r4, r0
   1b7be:	d0e1      	beq.n	1b784 <__aeabi_dsub+0x558>
   1b7c0:	08cb      	lsrs	r3, r1, #3
   1b7c2:	4203      	tst	r3, r0
   1b7c4:	d1de      	bne.n	1b784 <__aeabi_dsub+0x558>
   1b7c6:	08d7      	lsrs	r7, r2, #3
   1b7c8:	0749      	lsls	r1, r1, #29
   1b7ca:	430f      	orrs	r7, r1
   1b7cc:	001c      	movs	r4, r3
   1b7ce:	e7d9      	b.n	1b784 <__aeabi_dsub+0x558>
   1b7d0:	2100      	movs	r1, #0
   1b7d2:	e771      	b.n	1b6b8 <__aeabi_dsub+0x48c>
   1b7d4:	2500      	movs	r5, #0
   1b7d6:	2700      	movs	r7, #0
   1b7d8:	e5e9      	b.n	1b3ae <__aeabi_dsub+0x182>
   1b7da:	002e      	movs	r6, r5
   1b7dc:	0027      	movs	r7, r4
   1b7de:	3e20      	subs	r6, #32
   1b7e0:	40f7      	lsrs	r7, r6
   1b7e2:	2d20      	cmp	r5, #32
   1b7e4:	d02f      	beq.n	1b846 <__aeabi_dsub+0x61a>
   1b7e6:	2640      	movs	r6, #64	; 0x40
   1b7e8:	1b75      	subs	r5, r6, r5
   1b7ea:	40ac      	lsls	r4, r5
   1b7ec:	4650      	mov	r0, sl
   1b7ee:	4320      	orrs	r0, r4
   1b7f0:	1e44      	subs	r4, r0, #1
   1b7f2:	41a0      	sbcs	r0, r4
   1b7f4:	2400      	movs	r4, #0
   1b7f6:	4338      	orrs	r0, r7
   1b7f8:	e6dc      	b.n	1b5b4 <__aeabi_dsub+0x388>
   1b7fa:	2480      	movs	r4, #128	; 0x80
   1b7fc:	2500      	movs	r5, #0
   1b7fe:	0324      	lsls	r4, r4, #12
   1b800:	4e13      	ldr	r6, [pc, #76]	; (1b850 <__aeabi_dsub+0x624>)
   1b802:	2700      	movs	r7, #0
   1b804:	e5d3      	b.n	1b3ae <__aeabi_dsub+0x182>
   1b806:	4650      	mov	r0, sl
   1b808:	4320      	orrs	r0, r4
   1b80a:	0007      	movs	r7, r0
   1b80c:	1e78      	subs	r0, r7, #1
   1b80e:	4187      	sbcs	r7, r0
   1b810:	2400      	movs	r4, #0
   1b812:	18bf      	adds	r7, r7, r2
   1b814:	e760      	b.n	1b6d8 <__aeabi_dsub+0x4ac>
   1b816:	000c      	movs	r4, r1
   1b818:	0017      	movs	r7, r2
   1b81a:	e58d      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b81c:	000c      	movs	r4, r1
   1b81e:	0017      	movs	r7, r2
   1b820:	4e0b      	ldr	r6, [pc, #44]	; (1b850 <__aeabi_dsub+0x624>)
   1b822:	e589      	b.n	1b338 <__aeabi_dsub+0x10c>
   1b824:	001e      	movs	r6, r3
   1b826:	0027      	movs	r7, r4
   1b828:	3e20      	subs	r6, #32
   1b82a:	40f7      	lsrs	r7, r6
   1b82c:	2b20      	cmp	r3, #32
   1b82e:	d00c      	beq.n	1b84a <__aeabi_dsub+0x61e>
   1b830:	2640      	movs	r6, #64	; 0x40
   1b832:	1af3      	subs	r3, r6, r3
   1b834:	409c      	lsls	r4, r3
   1b836:	4650      	mov	r0, sl
   1b838:	4320      	orrs	r0, r4
   1b83a:	1e44      	subs	r4, r0, #1
   1b83c:	41a0      	sbcs	r0, r4
   1b83e:	4307      	orrs	r7, r0
   1b840:	2400      	movs	r4, #0
   1b842:	18bf      	adds	r7, r7, r2
   1b844:	e748      	b.n	1b6d8 <__aeabi_dsub+0x4ac>
   1b846:	2400      	movs	r4, #0
   1b848:	e7d0      	b.n	1b7ec <__aeabi_dsub+0x5c0>
   1b84a:	2400      	movs	r4, #0
   1b84c:	e7f3      	b.n	1b836 <__aeabi_dsub+0x60a>
   1b84e:	46c0      	nop			; (mov r8, r8)
   1b850:	000007ff 	.word	0x000007ff
   1b854:	ff7fffff 	.word	0xff7fffff

0001b858 <__aeabi_d2iz>:
   1b858:	b530      	push	{r4, r5, lr}
   1b85a:	4d13      	ldr	r5, [pc, #76]	; (1b8a8 <__aeabi_d2iz+0x50>)
   1b85c:	030a      	lsls	r2, r1, #12
   1b85e:	004b      	lsls	r3, r1, #1
   1b860:	0b12      	lsrs	r2, r2, #12
   1b862:	0d5b      	lsrs	r3, r3, #21
   1b864:	0fc9      	lsrs	r1, r1, #31
   1b866:	2400      	movs	r4, #0
   1b868:	42ab      	cmp	r3, r5
   1b86a:	dd10      	ble.n	1b88e <__aeabi_d2iz+0x36>
   1b86c:	4c0f      	ldr	r4, [pc, #60]	; (1b8ac <__aeabi_d2iz+0x54>)
   1b86e:	42a3      	cmp	r3, r4
   1b870:	dc0f      	bgt.n	1b892 <__aeabi_d2iz+0x3a>
   1b872:	2480      	movs	r4, #128	; 0x80
   1b874:	4d0e      	ldr	r5, [pc, #56]	; (1b8b0 <__aeabi_d2iz+0x58>)
   1b876:	0364      	lsls	r4, r4, #13
   1b878:	4322      	orrs	r2, r4
   1b87a:	1aed      	subs	r5, r5, r3
   1b87c:	2d1f      	cmp	r5, #31
   1b87e:	dd0b      	ble.n	1b898 <__aeabi_d2iz+0x40>
   1b880:	480c      	ldr	r0, [pc, #48]	; (1b8b4 <__aeabi_d2iz+0x5c>)
   1b882:	1ac3      	subs	r3, r0, r3
   1b884:	40da      	lsrs	r2, r3
   1b886:	4254      	negs	r4, r2
   1b888:	2900      	cmp	r1, #0
   1b88a:	d100      	bne.n	1b88e <__aeabi_d2iz+0x36>
   1b88c:	0014      	movs	r4, r2
   1b88e:	0020      	movs	r0, r4
   1b890:	bd30      	pop	{r4, r5, pc}
   1b892:	4b09      	ldr	r3, [pc, #36]	; (1b8b8 <__aeabi_d2iz+0x60>)
   1b894:	18cc      	adds	r4, r1, r3
   1b896:	e7fa      	b.n	1b88e <__aeabi_d2iz+0x36>
   1b898:	4c08      	ldr	r4, [pc, #32]	; (1b8bc <__aeabi_d2iz+0x64>)
   1b89a:	40e8      	lsrs	r0, r5
   1b89c:	46a4      	mov	ip, r4
   1b89e:	4463      	add	r3, ip
   1b8a0:	409a      	lsls	r2, r3
   1b8a2:	4302      	orrs	r2, r0
   1b8a4:	e7ef      	b.n	1b886 <__aeabi_d2iz+0x2e>
   1b8a6:	46c0      	nop			; (mov r8, r8)
   1b8a8:	000003fe 	.word	0x000003fe
   1b8ac:	0000041d 	.word	0x0000041d
   1b8b0:	00000433 	.word	0x00000433
   1b8b4:	00000413 	.word	0x00000413
   1b8b8:	7fffffff 	.word	0x7fffffff
   1b8bc:	fffffbed 	.word	0xfffffbed

0001b8c0 <__aeabi_i2d>:
   1b8c0:	b570      	push	{r4, r5, r6, lr}
   1b8c2:	2800      	cmp	r0, #0
   1b8c4:	d030      	beq.n	1b928 <__aeabi_i2d+0x68>
   1b8c6:	17c3      	asrs	r3, r0, #31
   1b8c8:	18c4      	adds	r4, r0, r3
   1b8ca:	405c      	eors	r4, r3
   1b8cc:	0fc5      	lsrs	r5, r0, #31
   1b8ce:	0020      	movs	r0, r4
   1b8d0:	f000 f870 	bl	1b9b4 <__clzsi2>
   1b8d4:	4b17      	ldr	r3, [pc, #92]	; (1b934 <__aeabi_i2d+0x74>)
   1b8d6:	4a18      	ldr	r2, [pc, #96]	; (1b938 <__aeabi_i2d+0x78>)
   1b8d8:	1a1b      	subs	r3, r3, r0
   1b8da:	1ad2      	subs	r2, r2, r3
   1b8dc:	2a1f      	cmp	r2, #31
   1b8de:	dd18      	ble.n	1b912 <__aeabi_i2d+0x52>
   1b8e0:	4a16      	ldr	r2, [pc, #88]	; (1b93c <__aeabi_i2d+0x7c>)
   1b8e2:	1ad2      	subs	r2, r2, r3
   1b8e4:	4094      	lsls	r4, r2
   1b8e6:	2200      	movs	r2, #0
   1b8e8:	0324      	lsls	r4, r4, #12
   1b8ea:	055b      	lsls	r3, r3, #21
   1b8ec:	0b24      	lsrs	r4, r4, #12
   1b8ee:	0d5b      	lsrs	r3, r3, #21
   1b8f0:	2100      	movs	r1, #0
   1b8f2:	0010      	movs	r0, r2
   1b8f4:	0324      	lsls	r4, r4, #12
   1b8f6:	0d0a      	lsrs	r2, r1, #20
   1b8f8:	0b24      	lsrs	r4, r4, #12
   1b8fa:	0512      	lsls	r2, r2, #20
   1b8fc:	4322      	orrs	r2, r4
   1b8fe:	4c10      	ldr	r4, [pc, #64]	; (1b940 <__aeabi_i2d+0x80>)
   1b900:	051b      	lsls	r3, r3, #20
   1b902:	4022      	ands	r2, r4
   1b904:	4313      	orrs	r3, r2
   1b906:	005b      	lsls	r3, r3, #1
   1b908:	07ed      	lsls	r5, r5, #31
   1b90a:	085b      	lsrs	r3, r3, #1
   1b90c:	432b      	orrs	r3, r5
   1b90e:	0019      	movs	r1, r3
   1b910:	bd70      	pop	{r4, r5, r6, pc}
   1b912:	0021      	movs	r1, r4
   1b914:	4091      	lsls	r1, r2
   1b916:	000a      	movs	r2, r1
   1b918:	210b      	movs	r1, #11
   1b91a:	1a08      	subs	r0, r1, r0
   1b91c:	40c4      	lsrs	r4, r0
   1b91e:	055b      	lsls	r3, r3, #21
   1b920:	0324      	lsls	r4, r4, #12
   1b922:	0b24      	lsrs	r4, r4, #12
   1b924:	0d5b      	lsrs	r3, r3, #21
   1b926:	e7e3      	b.n	1b8f0 <__aeabi_i2d+0x30>
   1b928:	2500      	movs	r5, #0
   1b92a:	2300      	movs	r3, #0
   1b92c:	2400      	movs	r4, #0
   1b92e:	2200      	movs	r2, #0
   1b930:	e7de      	b.n	1b8f0 <__aeabi_i2d+0x30>
   1b932:	46c0      	nop			; (mov r8, r8)
   1b934:	0000041e 	.word	0x0000041e
   1b938:	00000433 	.word	0x00000433
   1b93c:	00000413 	.word	0x00000413
   1b940:	800fffff 	.word	0x800fffff

0001b944 <__aeabi_ui2d>:
   1b944:	b510      	push	{r4, lr}
   1b946:	1e04      	subs	r4, r0, #0
   1b948:	d028      	beq.n	1b99c <__aeabi_ui2d+0x58>
   1b94a:	f000 f833 	bl	1b9b4 <__clzsi2>
   1b94e:	4b15      	ldr	r3, [pc, #84]	; (1b9a4 <__aeabi_ui2d+0x60>)
   1b950:	4a15      	ldr	r2, [pc, #84]	; (1b9a8 <__aeabi_ui2d+0x64>)
   1b952:	1a1b      	subs	r3, r3, r0
   1b954:	1ad2      	subs	r2, r2, r3
   1b956:	2a1f      	cmp	r2, #31
   1b958:	dd15      	ble.n	1b986 <__aeabi_ui2d+0x42>
   1b95a:	4a14      	ldr	r2, [pc, #80]	; (1b9ac <__aeabi_ui2d+0x68>)
   1b95c:	1ad2      	subs	r2, r2, r3
   1b95e:	4094      	lsls	r4, r2
   1b960:	2200      	movs	r2, #0
   1b962:	0324      	lsls	r4, r4, #12
   1b964:	055b      	lsls	r3, r3, #21
   1b966:	0b24      	lsrs	r4, r4, #12
   1b968:	0d5b      	lsrs	r3, r3, #21
   1b96a:	2100      	movs	r1, #0
   1b96c:	0010      	movs	r0, r2
   1b96e:	0324      	lsls	r4, r4, #12
   1b970:	0d0a      	lsrs	r2, r1, #20
   1b972:	0b24      	lsrs	r4, r4, #12
   1b974:	0512      	lsls	r2, r2, #20
   1b976:	4322      	orrs	r2, r4
   1b978:	4c0d      	ldr	r4, [pc, #52]	; (1b9b0 <__aeabi_ui2d+0x6c>)
   1b97a:	051b      	lsls	r3, r3, #20
   1b97c:	4022      	ands	r2, r4
   1b97e:	4313      	orrs	r3, r2
   1b980:	005b      	lsls	r3, r3, #1
   1b982:	0859      	lsrs	r1, r3, #1
   1b984:	bd10      	pop	{r4, pc}
   1b986:	0021      	movs	r1, r4
   1b988:	4091      	lsls	r1, r2
   1b98a:	000a      	movs	r2, r1
   1b98c:	210b      	movs	r1, #11
   1b98e:	1a08      	subs	r0, r1, r0
   1b990:	40c4      	lsrs	r4, r0
   1b992:	055b      	lsls	r3, r3, #21
   1b994:	0324      	lsls	r4, r4, #12
   1b996:	0b24      	lsrs	r4, r4, #12
   1b998:	0d5b      	lsrs	r3, r3, #21
   1b99a:	e7e6      	b.n	1b96a <__aeabi_ui2d+0x26>
   1b99c:	2300      	movs	r3, #0
   1b99e:	2400      	movs	r4, #0
   1b9a0:	2200      	movs	r2, #0
   1b9a2:	e7e2      	b.n	1b96a <__aeabi_ui2d+0x26>
   1b9a4:	0000041e 	.word	0x0000041e
   1b9a8:	00000433 	.word	0x00000433
   1b9ac:	00000413 	.word	0x00000413
   1b9b0:	800fffff 	.word	0x800fffff

0001b9b4 <__clzsi2>:
   1b9b4:	211c      	movs	r1, #28
   1b9b6:	2301      	movs	r3, #1
   1b9b8:	041b      	lsls	r3, r3, #16
   1b9ba:	4298      	cmp	r0, r3
   1b9bc:	d301      	bcc.n	1b9c2 <__clzsi2+0xe>
   1b9be:	0c00      	lsrs	r0, r0, #16
   1b9c0:	3910      	subs	r1, #16
   1b9c2:	0a1b      	lsrs	r3, r3, #8
   1b9c4:	4298      	cmp	r0, r3
   1b9c6:	d301      	bcc.n	1b9cc <__clzsi2+0x18>
   1b9c8:	0a00      	lsrs	r0, r0, #8
   1b9ca:	3908      	subs	r1, #8
   1b9cc:	091b      	lsrs	r3, r3, #4
   1b9ce:	4298      	cmp	r0, r3
   1b9d0:	d301      	bcc.n	1b9d6 <__clzsi2+0x22>
   1b9d2:	0900      	lsrs	r0, r0, #4
   1b9d4:	3904      	subs	r1, #4
   1b9d6:	a202      	add	r2, pc, #8	; (adr r2, 1b9e0 <__clzsi2+0x2c>)
   1b9d8:	5c10      	ldrb	r0, [r2, r0]
   1b9da:	1840      	adds	r0, r0, r1
   1b9dc:	4770      	bx	lr
   1b9de:	46c0      	nop			; (mov r8, r8)
   1b9e0:	02020304 	.word	0x02020304
   1b9e4:	01010101 	.word	0x01010101
	...

0001b9f0 <__libc_init_array>:
   1b9f0:	b570      	push	{r4, r5, r6, lr}
   1b9f2:	2600      	movs	r6, #0
   1b9f4:	4d0c      	ldr	r5, [pc, #48]	; (1ba28 <__libc_init_array+0x38>)
   1b9f6:	4c0d      	ldr	r4, [pc, #52]	; (1ba2c <__libc_init_array+0x3c>)
   1b9f8:	1b64      	subs	r4, r4, r5
   1b9fa:	10a4      	asrs	r4, r4, #2
   1b9fc:	42a6      	cmp	r6, r4
   1b9fe:	d109      	bne.n	1ba14 <__libc_init_array+0x24>
   1ba00:	2600      	movs	r6, #0
   1ba02:	f003 fd6d 	bl	1f4e0 <_init>
   1ba06:	4d0a      	ldr	r5, [pc, #40]	; (1ba30 <__libc_init_array+0x40>)
   1ba08:	4c0a      	ldr	r4, [pc, #40]	; (1ba34 <__libc_init_array+0x44>)
   1ba0a:	1b64      	subs	r4, r4, r5
   1ba0c:	10a4      	asrs	r4, r4, #2
   1ba0e:	42a6      	cmp	r6, r4
   1ba10:	d105      	bne.n	1ba1e <__libc_init_array+0x2e>
   1ba12:	bd70      	pop	{r4, r5, r6, pc}
   1ba14:	00b3      	lsls	r3, r6, #2
   1ba16:	58eb      	ldr	r3, [r5, r3]
   1ba18:	4798      	blx	r3
   1ba1a:	3601      	adds	r6, #1
   1ba1c:	e7ee      	b.n	1b9fc <__libc_init_array+0xc>
   1ba1e:	00b3      	lsls	r3, r6, #2
   1ba20:	58eb      	ldr	r3, [r5, r3]
   1ba22:	4798      	blx	r3
   1ba24:	3601      	adds	r6, #1
   1ba26:	e7f2      	b.n	1ba0e <__libc_init_array+0x1e>
   1ba28:	0001f4ec 	.word	0x0001f4ec
   1ba2c:	0001f4ec 	.word	0x0001f4ec
   1ba30:	0001f4ec 	.word	0x0001f4ec
   1ba34:	0001f4f0 	.word	0x0001f4f0

0001ba38 <__itoa>:
   1ba38:	1e93      	subs	r3, r2, #2
   1ba3a:	b510      	push	{r4, lr}
   1ba3c:	000c      	movs	r4, r1
   1ba3e:	2b22      	cmp	r3, #34	; 0x22
   1ba40:	d904      	bls.n	1ba4c <__itoa+0x14>
   1ba42:	2300      	movs	r3, #0
   1ba44:	001c      	movs	r4, r3
   1ba46:	700b      	strb	r3, [r1, #0]
   1ba48:	0020      	movs	r0, r4
   1ba4a:	bd10      	pop	{r4, pc}
   1ba4c:	2a0a      	cmp	r2, #10
   1ba4e:	d109      	bne.n	1ba64 <__itoa+0x2c>
   1ba50:	2800      	cmp	r0, #0
   1ba52:	da07      	bge.n	1ba64 <__itoa+0x2c>
   1ba54:	232d      	movs	r3, #45	; 0x2d
   1ba56:	700b      	strb	r3, [r1, #0]
   1ba58:	2101      	movs	r1, #1
   1ba5a:	4240      	negs	r0, r0
   1ba5c:	1861      	adds	r1, r4, r1
   1ba5e:	f000 faff 	bl	1c060 <__utoa>
   1ba62:	e7f1      	b.n	1ba48 <__itoa+0x10>
   1ba64:	2100      	movs	r1, #0
   1ba66:	e7f9      	b.n	1ba5c <__itoa+0x24>

0001ba68 <itoa>:
   1ba68:	b510      	push	{r4, lr}
   1ba6a:	f7ff ffe5 	bl	1ba38 <__itoa>
   1ba6e:	bd10      	pop	{r4, pc}

0001ba70 <malloc>:
   1ba70:	b510      	push	{r4, lr}
   1ba72:	4b03      	ldr	r3, [pc, #12]	; (1ba80 <malloc+0x10>)
   1ba74:	0001      	movs	r1, r0
   1ba76:	6818      	ldr	r0, [r3, #0]
   1ba78:	f000 f88a 	bl	1bb90 <_malloc_r>
   1ba7c:	bd10      	pop	{r4, pc}
   1ba7e:	46c0      	nop			; (mov r8, r8)
   1ba80:	2000063c 	.word	0x2000063c

0001ba84 <free>:
   1ba84:	b510      	push	{r4, lr}
   1ba86:	4b03      	ldr	r3, [pc, #12]	; (1ba94 <free+0x10>)
   1ba88:	0001      	movs	r1, r0
   1ba8a:	6818      	ldr	r0, [r3, #0]
   1ba8c:	f000 f836 	bl	1bafc <_free_r>
   1ba90:	bd10      	pop	{r4, pc}
   1ba92:	46c0      	nop			; (mov r8, r8)
   1ba94:	2000063c 	.word	0x2000063c

0001ba98 <memcmp>:
   1ba98:	b530      	push	{r4, r5, lr}
   1ba9a:	2400      	movs	r4, #0
   1ba9c:	42a2      	cmp	r2, r4
   1ba9e:	d101      	bne.n	1baa4 <memcmp+0xc>
   1baa0:	2000      	movs	r0, #0
   1baa2:	e005      	b.n	1bab0 <memcmp+0x18>
   1baa4:	5d03      	ldrb	r3, [r0, r4]
   1baa6:	1c65      	adds	r5, r4, #1
   1baa8:	5d0c      	ldrb	r4, [r1, r4]
   1baaa:	42a3      	cmp	r3, r4
   1baac:	d001      	beq.n	1bab2 <memcmp+0x1a>
   1baae:	1b18      	subs	r0, r3, r4
   1bab0:	bd30      	pop	{r4, r5, pc}
   1bab2:	002c      	movs	r4, r5
   1bab4:	e7f2      	b.n	1ba9c <memcmp+0x4>

0001bab6 <memcpy>:
   1bab6:	2300      	movs	r3, #0
   1bab8:	b510      	push	{r4, lr}
   1baba:	429a      	cmp	r2, r3
   1babc:	d100      	bne.n	1bac0 <memcpy+0xa>
   1babe:	bd10      	pop	{r4, pc}
   1bac0:	5ccc      	ldrb	r4, [r1, r3]
   1bac2:	54c4      	strb	r4, [r0, r3]
   1bac4:	3301      	adds	r3, #1
   1bac6:	e7f8      	b.n	1baba <memcpy+0x4>

0001bac8 <memmove>:
   1bac8:	b510      	push	{r4, lr}
   1baca:	4288      	cmp	r0, r1
   1bacc:	d902      	bls.n	1bad4 <memmove+0xc>
   1bace:	188b      	adds	r3, r1, r2
   1bad0:	4298      	cmp	r0, r3
   1bad2:	d308      	bcc.n	1bae6 <memmove+0x1e>
   1bad4:	2300      	movs	r3, #0
   1bad6:	429a      	cmp	r2, r3
   1bad8:	d007      	beq.n	1baea <memmove+0x22>
   1bada:	5ccc      	ldrb	r4, [r1, r3]
   1badc:	54c4      	strb	r4, [r0, r3]
   1bade:	3301      	adds	r3, #1
   1bae0:	e7f9      	b.n	1bad6 <memmove+0xe>
   1bae2:	5c8b      	ldrb	r3, [r1, r2]
   1bae4:	5483      	strb	r3, [r0, r2]
   1bae6:	3a01      	subs	r2, #1
   1bae8:	d2fb      	bcs.n	1bae2 <memmove+0x1a>
   1baea:	bd10      	pop	{r4, pc}

0001baec <memset>:
   1baec:	0003      	movs	r3, r0
   1baee:	1882      	adds	r2, r0, r2
   1baf0:	4293      	cmp	r3, r2
   1baf2:	d100      	bne.n	1baf6 <memset+0xa>
   1baf4:	4770      	bx	lr
   1baf6:	7019      	strb	r1, [r3, #0]
   1baf8:	3301      	adds	r3, #1
   1bafa:	e7f9      	b.n	1baf0 <memset+0x4>

0001bafc <_free_r>:
   1bafc:	b570      	push	{r4, r5, r6, lr}
   1bafe:	0005      	movs	r5, r0
   1bb00:	2900      	cmp	r1, #0
   1bb02:	d010      	beq.n	1bb26 <_free_r+0x2a>
   1bb04:	1f0c      	subs	r4, r1, #4
   1bb06:	6823      	ldr	r3, [r4, #0]
   1bb08:	2b00      	cmp	r3, #0
   1bb0a:	da00      	bge.n	1bb0e <_free_r+0x12>
   1bb0c:	18e4      	adds	r4, r4, r3
   1bb0e:	0028      	movs	r0, r5
   1bb10:	f000 fde0 	bl	1c6d4 <__malloc_lock>
   1bb14:	4a1d      	ldr	r2, [pc, #116]	; (1bb8c <_free_r+0x90>)
   1bb16:	6813      	ldr	r3, [r2, #0]
   1bb18:	2b00      	cmp	r3, #0
   1bb1a:	d105      	bne.n	1bb28 <_free_r+0x2c>
   1bb1c:	6063      	str	r3, [r4, #4]
   1bb1e:	6014      	str	r4, [r2, #0]
   1bb20:	0028      	movs	r0, r5
   1bb22:	f000 fdd8 	bl	1c6d6 <__malloc_unlock>
   1bb26:	bd70      	pop	{r4, r5, r6, pc}
   1bb28:	42a3      	cmp	r3, r4
   1bb2a:	d909      	bls.n	1bb40 <_free_r+0x44>
   1bb2c:	6821      	ldr	r1, [r4, #0]
   1bb2e:	1860      	adds	r0, r4, r1
   1bb30:	4283      	cmp	r3, r0
   1bb32:	d1f3      	bne.n	1bb1c <_free_r+0x20>
   1bb34:	6818      	ldr	r0, [r3, #0]
   1bb36:	685b      	ldr	r3, [r3, #4]
   1bb38:	1841      	adds	r1, r0, r1
   1bb3a:	6021      	str	r1, [r4, #0]
   1bb3c:	e7ee      	b.n	1bb1c <_free_r+0x20>
   1bb3e:	0013      	movs	r3, r2
   1bb40:	685a      	ldr	r2, [r3, #4]
   1bb42:	2a00      	cmp	r2, #0
   1bb44:	d001      	beq.n	1bb4a <_free_r+0x4e>
   1bb46:	42a2      	cmp	r2, r4
   1bb48:	d9f9      	bls.n	1bb3e <_free_r+0x42>
   1bb4a:	6819      	ldr	r1, [r3, #0]
   1bb4c:	1858      	adds	r0, r3, r1
   1bb4e:	42a0      	cmp	r0, r4
   1bb50:	d10b      	bne.n	1bb6a <_free_r+0x6e>
   1bb52:	6820      	ldr	r0, [r4, #0]
   1bb54:	1809      	adds	r1, r1, r0
   1bb56:	1858      	adds	r0, r3, r1
   1bb58:	6019      	str	r1, [r3, #0]
   1bb5a:	4282      	cmp	r2, r0
   1bb5c:	d1e0      	bne.n	1bb20 <_free_r+0x24>
   1bb5e:	6810      	ldr	r0, [r2, #0]
   1bb60:	6852      	ldr	r2, [r2, #4]
   1bb62:	1841      	adds	r1, r0, r1
   1bb64:	6019      	str	r1, [r3, #0]
   1bb66:	605a      	str	r2, [r3, #4]
   1bb68:	e7da      	b.n	1bb20 <_free_r+0x24>
   1bb6a:	42a0      	cmp	r0, r4
   1bb6c:	d902      	bls.n	1bb74 <_free_r+0x78>
   1bb6e:	230c      	movs	r3, #12
   1bb70:	602b      	str	r3, [r5, #0]
   1bb72:	e7d5      	b.n	1bb20 <_free_r+0x24>
   1bb74:	6821      	ldr	r1, [r4, #0]
   1bb76:	1860      	adds	r0, r4, r1
   1bb78:	4282      	cmp	r2, r0
   1bb7a:	d103      	bne.n	1bb84 <_free_r+0x88>
   1bb7c:	6810      	ldr	r0, [r2, #0]
   1bb7e:	6852      	ldr	r2, [r2, #4]
   1bb80:	1841      	adds	r1, r0, r1
   1bb82:	6021      	str	r1, [r4, #0]
   1bb84:	6062      	str	r2, [r4, #4]
   1bb86:	605c      	str	r4, [r3, #4]
   1bb88:	e7ca      	b.n	1bb20 <_free_r+0x24>
   1bb8a:	46c0      	nop			; (mov r8, r8)
   1bb8c:	2000197c 	.word	0x2000197c

0001bb90 <_malloc_r>:
   1bb90:	2303      	movs	r3, #3
   1bb92:	b570      	push	{r4, r5, r6, lr}
   1bb94:	1ccd      	adds	r5, r1, #3
   1bb96:	439d      	bics	r5, r3
   1bb98:	3508      	adds	r5, #8
   1bb9a:	0006      	movs	r6, r0
   1bb9c:	2d0c      	cmp	r5, #12
   1bb9e:	d21e      	bcs.n	1bbde <_malloc_r+0x4e>
   1bba0:	250c      	movs	r5, #12
   1bba2:	42a9      	cmp	r1, r5
   1bba4:	d81d      	bhi.n	1bbe2 <_malloc_r+0x52>
   1bba6:	0030      	movs	r0, r6
   1bba8:	f000 fd94 	bl	1c6d4 <__malloc_lock>
   1bbac:	4a25      	ldr	r2, [pc, #148]	; (1bc44 <_malloc_r+0xb4>)
   1bbae:	6814      	ldr	r4, [r2, #0]
   1bbb0:	0021      	movs	r1, r4
   1bbb2:	2900      	cmp	r1, #0
   1bbb4:	d119      	bne.n	1bbea <_malloc_r+0x5a>
   1bbb6:	4c24      	ldr	r4, [pc, #144]	; (1bc48 <_malloc_r+0xb8>)
   1bbb8:	6823      	ldr	r3, [r4, #0]
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d103      	bne.n	1bbc6 <_malloc_r+0x36>
   1bbbe:	0030      	movs	r0, r6
   1bbc0:	f000 f8dc 	bl	1bd7c <_sbrk_r>
   1bbc4:	6020      	str	r0, [r4, #0]
   1bbc6:	0029      	movs	r1, r5
   1bbc8:	0030      	movs	r0, r6
   1bbca:	f000 f8d7 	bl	1bd7c <_sbrk_r>
   1bbce:	1c43      	adds	r3, r0, #1
   1bbd0:	d12c      	bne.n	1bc2c <_malloc_r+0x9c>
   1bbd2:	230c      	movs	r3, #12
   1bbd4:	0030      	movs	r0, r6
   1bbd6:	6033      	str	r3, [r6, #0]
   1bbd8:	f000 fd7d 	bl	1c6d6 <__malloc_unlock>
   1bbdc:	e003      	b.n	1bbe6 <_malloc_r+0x56>
   1bbde:	2d00      	cmp	r5, #0
   1bbe0:	dadf      	bge.n	1bba2 <_malloc_r+0x12>
   1bbe2:	230c      	movs	r3, #12
   1bbe4:	6033      	str	r3, [r6, #0]
   1bbe6:	2000      	movs	r0, #0
   1bbe8:	bd70      	pop	{r4, r5, r6, pc}
   1bbea:	680b      	ldr	r3, [r1, #0]
   1bbec:	1b5b      	subs	r3, r3, r5
   1bbee:	d41a      	bmi.n	1bc26 <_malloc_r+0x96>
   1bbf0:	2b0b      	cmp	r3, #11
   1bbf2:	d903      	bls.n	1bbfc <_malloc_r+0x6c>
   1bbf4:	600b      	str	r3, [r1, #0]
   1bbf6:	18cc      	adds	r4, r1, r3
   1bbf8:	6025      	str	r5, [r4, #0]
   1bbfa:	e003      	b.n	1bc04 <_malloc_r+0x74>
   1bbfc:	428c      	cmp	r4, r1
   1bbfe:	d10e      	bne.n	1bc1e <_malloc_r+0x8e>
   1bc00:	6863      	ldr	r3, [r4, #4]
   1bc02:	6013      	str	r3, [r2, #0]
   1bc04:	0030      	movs	r0, r6
   1bc06:	f000 fd66 	bl	1c6d6 <__malloc_unlock>
   1bc0a:	0020      	movs	r0, r4
   1bc0c:	2207      	movs	r2, #7
   1bc0e:	300b      	adds	r0, #11
   1bc10:	1d23      	adds	r3, r4, #4
   1bc12:	4390      	bics	r0, r2
   1bc14:	1ac3      	subs	r3, r0, r3
   1bc16:	d0e7      	beq.n	1bbe8 <_malloc_r+0x58>
   1bc18:	425a      	negs	r2, r3
   1bc1a:	50e2      	str	r2, [r4, r3]
   1bc1c:	e7e4      	b.n	1bbe8 <_malloc_r+0x58>
   1bc1e:	684b      	ldr	r3, [r1, #4]
   1bc20:	6063      	str	r3, [r4, #4]
   1bc22:	000c      	movs	r4, r1
   1bc24:	e7ee      	b.n	1bc04 <_malloc_r+0x74>
   1bc26:	000c      	movs	r4, r1
   1bc28:	6849      	ldr	r1, [r1, #4]
   1bc2a:	e7c2      	b.n	1bbb2 <_malloc_r+0x22>
   1bc2c:	2303      	movs	r3, #3
   1bc2e:	1cc4      	adds	r4, r0, #3
   1bc30:	439c      	bics	r4, r3
   1bc32:	42a0      	cmp	r0, r4
   1bc34:	d0e0      	beq.n	1bbf8 <_malloc_r+0x68>
   1bc36:	1a21      	subs	r1, r4, r0
   1bc38:	0030      	movs	r0, r6
   1bc3a:	f000 f89f 	bl	1bd7c <_sbrk_r>
   1bc3e:	1c43      	adds	r3, r0, #1
   1bc40:	d1da      	bne.n	1bbf8 <_malloc_r+0x68>
   1bc42:	e7c6      	b.n	1bbd2 <_malloc_r+0x42>
   1bc44:	2000197c 	.word	0x2000197c
   1bc48:	20001980 	.word	0x20001980

0001bc4c <iprintf>:
   1bc4c:	b40f      	push	{r0, r1, r2, r3}
   1bc4e:	4b0b      	ldr	r3, [pc, #44]	; (1bc7c <iprintf+0x30>)
   1bc50:	b513      	push	{r0, r1, r4, lr}
   1bc52:	681c      	ldr	r4, [r3, #0]
   1bc54:	2c00      	cmp	r4, #0
   1bc56:	d005      	beq.n	1bc64 <iprintf+0x18>
   1bc58:	69a3      	ldr	r3, [r4, #24]
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d102      	bne.n	1bc64 <iprintf+0x18>
   1bc5e:	0020      	movs	r0, r4
   1bc60:	f000 fc22 	bl	1c4a8 <__sinit>
   1bc64:	ab05      	add	r3, sp, #20
   1bc66:	9a04      	ldr	r2, [sp, #16]
   1bc68:	68a1      	ldr	r1, [r4, #8]
   1bc6a:	0020      	movs	r0, r4
   1bc6c:	9301      	str	r3, [sp, #4]
   1bc6e:	f000 fec1 	bl	1c9f4 <_vfiprintf_r>
   1bc72:	bc16      	pop	{r1, r2, r4}
   1bc74:	bc08      	pop	{r3}
   1bc76:	b004      	add	sp, #16
   1bc78:	4718      	bx	r3
   1bc7a:	46c0      	nop			; (mov r8, r8)
   1bc7c:	2000063c 	.word	0x2000063c

0001bc80 <putchar>:
   1bc80:	4b08      	ldr	r3, [pc, #32]	; (1bca4 <putchar+0x24>)
   1bc82:	b570      	push	{r4, r5, r6, lr}
   1bc84:	681c      	ldr	r4, [r3, #0]
   1bc86:	0005      	movs	r5, r0
   1bc88:	2c00      	cmp	r4, #0
   1bc8a:	d005      	beq.n	1bc98 <putchar+0x18>
   1bc8c:	69a3      	ldr	r3, [r4, #24]
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	d102      	bne.n	1bc98 <putchar+0x18>
   1bc92:	0020      	movs	r0, r4
   1bc94:	f000 fc08 	bl	1c4a8 <__sinit>
   1bc98:	0029      	movs	r1, r5
   1bc9a:	68a2      	ldr	r2, [r4, #8]
   1bc9c:	0020      	movs	r0, r4
   1bc9e:	f001 f94d 	bl	1cf3c <_putc_r>
   1bca2:	bd70      	pop	{r4, r5, r6, pc}
   1bca4:	2000063c 	.word	0x2000063c

0001bca8 <_puts_r>:
   1bca8:	b570      	push	{r4, r5, r6, lr}
   1bcaa:	0005      	movs	r5, r0
   1bcac:	000e      	movs	r6, r1
   1bcae:	2800      	cmp	r0, #0
   1bcb0:	d004      	beq.n	1bcbc <_puts_r+0x14>
   1bcb2:	6983      	ldr	r3, [r0, #24]
   1bcb4:	2b00      	cmp	r3, #0
   1bcb6:	d101      	bne.n	1bcbc <_puts_r+0x14>
   1bcb8:	f000 fbf6 	bl	1c4a8 <__sinit>
   1bcbc:	69ab      	ldr	r3, [r5, #24]
   1bcbe:	68ac      	ldr	r4, [r5, #8]
   1bcc0:	2b00      	cmp	r3, #0
   1bcc2:	d102      	bne.n	1bcca <_puts_r+0x22>
   1bcc4:	0028      	movs	r0, r5
   1bcc6:	f000 fbef 	bl	1c4a8 <__sinit>
   1bcca:	4b24      	ldr	r3, [pc, #144]	; (1bd5c <_puts_r+0xb4>)
   1bccc:	429c      	cmp	r4, r3
   1bcce:	d10f      	bne.n	1bcf0 <_puts_r+0x48>
   1bcd0:	686c      	ldr	r4, [r5, #4]
   1bcd2:	89a3      	ldrh	r3, [r4, #12]
   1bcd4:	071b      	lsls	r3, r3, #28
   1bcd6:	d502      	bpl.n	1bcde <_puts_r+0x36>
   1bcd8:	6923      	ldr	r3, [r4, #16]
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d120      	bne.n	1bd20 <_puts_r+0x78>
   1bcde:	0021      	movs	r1, r4
   1bce0:	0028      	movs	r0, r5
   1bce2:	f000 fa61 	bl	1c1a8 <__swsetup_r>
   1bce6:	2800      	cmp	r0, #0
   1bce8:	d01a      	beq.n	1bd20 <_puts_r+0x78>
   1bcea:	2001      	movs	r0, #1
   1bcec:	4240      	negs	r0, r0
   1bcee:	bd70      	pop	{r4, r5, r6, pc}
   1bcf0:	4b1b      	ldr	r3, [pc, #108]	; (1bd60 <_puts_r+0xb8>)
   1bcf2:	429c      	cmp	r4, r3
   1bcf4:	d101      	bne.n	1bcfa <_puts_r+0x52>
   1bcf6:	68ac      	ldr	r4, [r5, #8]
   1bcf8:	e7eb      	b.n	1bcd2 <_puts_r+0x2a>
   1bcfa:	4b1a      	ldr	r3, [pc, #104]	; (1bd64 <_puts_r+0xbc>)
   1bcfc:	429c      	cmp	r4, r3
   1bcfe:	d1e8      	bne.n	1bcd2 <_puts_r+0x2a>
   1bd00:	68ec      	ldr	r4, [r5, #12]
   1bd02:	e7e6      	b.n	1bcd2 <_puts_r+0x2a>
   1bd04:	3b01      	subs	r3, #1
   1bd06:	3601      	adds	r6, #1
   1bd08:	60a3      	str	r3, [r4, #8]
   1bd0a:	2b00      	cmp	r3, #0
   1bd0c:	da04      	bge.n	1bd18 <_puts_r+0x70>
   1bd0e:	69a2      	ldr	r2, [r4, #24]
   1bd10:	4293      	cmp	r3, r2
   1bd12:	db16      	blt.n	1bd42 <_puts_r+0x9a>
   1bd14:	290a      	cmp	r1, #10
   1bd16:	d014      	beq.n	1bd42 <_puts_r+0x9a>
   1bd18:	6823      	ldr	r3, [r4, #0]
   1bd1a:	1c5a      	adds	r2, r3, #1
   1bd1c:	6022      	str	r2, [r4, #0]
   1bd1e:	7019      	strb	r1, [r3, #0]
   1bd20:	7831      	ldrb	r1, [r6, #0]
   1bd22:	68a3      	ldr	r3, [r4, #8]
   1bd24:	2900      	cmp	r1, #0
   1bd26:	d1ed      	bne.n	1bd04 <_puts_r+0x5c>
   1bd28:	3b01      	subs	r3, #1
   1bd2a:	60a3      	str	r3, [r4, #8]
   1bd2c:	2b00      	cmp	r3, #0
   1bd2e:	da0f      	bge.n	1bd50 <_puts_r+0xa8>
   1bd30:	0022      	movs	r2, r4
   1bd32:	310a      	adds	r1, #10
   1bd34:	0028      	movs	r0, r5
   1bd36:	f000 f9cd 	bl	1c0d4 <__swbuf_r>
   1bd3a:	1c43      	adds	r3, r0, #1
   1bd3c:	d0d5      	beq.n	1bcea <_puts_r+0x42>
   1bd3e:	200a      	movs	r0, #10
   1bd40:	e7d5      	b.n	1bcee <_puts_r+0x46>
   1bd42:	0022      	movs	r2, r4
   1bd44:	0028      	movs	r0, r5
   1bd46:	f000 f9c5 	bl	1c0d4 <__swbuf_r>
   1bd4a:	1c43      	adds	r3, r0, #1
   1bd4c:	d1e8      	bne.n	1bd20 <_puts_r+0x78>
   1bd4e:	e7cc      	b.n	1bcea <_puts_r+0x42>
   1bd50:	200a      	movs	r0, #10
   1bd52:	6823      	ldr	r3, [r4, #0]
   1bd54:	1c5a      	adds	r2, r3, #1
   1bd56:	6022      	str	r2, [r4, #0]
   1bd58:	7018      	strb	r0, [r3, #0]
   1bd5a:	e7c8      	b.n	1bcee <_puts_r+0x46>
   1bd5c:	0001f46c 	.word	0x0001f46c
   1bd60:	0001f48c 	.word	0x0001f48c
   1bd64:	0001f44c 	.word	0x0001f44c

0001bd68 <puts>:
   1bd68:	b510      	push	{r4, lr}
   1bd6a:	4b03      	ldr	r3, [pc, #12]	; (1bd78 <puts+0x10>)
   1bd6c:	0001      	movs	r1, r0
   1bd6e:	6818      	ldr	r0, [r3, #0]
   1bd70:	f7ff ff9a 	bl	1bca8 <_puts_r>
   1bd74:	bd10      	pop	{r4, pc}
   1bd76:	46c0      	nop			; (mov r8, r8)
   1bd78:	2000063c 	.word	0x2000063c

0001bd7c <_sbrk_r>:
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	b570      	push	{r4, r5, r6, lr}
   1bd80:	4c06      	ldr	r4, [pc, #24]	; (1bd9c <_sbrk_r+0x20>)
   1bd82:	0005      	movs	r5, r0
   1bd84:	0008      	movs	r0, r1
   1bd86:	6023      	str	r3, [r4, #0]
   1bd88:	f7fb fcdc 	bl	17744 <_sbrk>
   1bd8c:	1c43      	adds	r3, r0, #1
   1bd8e:	d103      	bne.n	1bd98 <_sbrk_r+0x1c>
   1bd90:	6823      	ldr	r3, [r4, #0]
   1bd92:	2b00      	cmp	r3, #0
   1bd94:	d000      	beq.n	1bd98 <_sbrk_r+0x1c>
   1bd96:	602b      	str	r3, [r5, #0]
   1bd98:	bd70      	pop	{r4, r5, r6, pc}
   1bd9a:	46c0      	nop			; (mov r8, r8)
   1bd9c:	20002744 	.word	0x20002744

0001bda0 <setbuf>:
   1bda0:	424a      	negs	r2, r1
   1bda2:	414a      	adcs	r2, r1
   1bda4:	2380      	movs	r3, #128	; 0x80
   1bda6:	b510      	push	{r4, lr}
   1bda8:	0052      	lsls	r2, r2, #1
   1bdaa:	00db      	lsls	r3, r3, #3
   1bdac:	f000 f802 	bl	1bdb4 <setvbuf>
   1bdb0:	bd10      	pop	{r4, pc}
	...

0001bdb4 <setvbuf>:
   1bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bdb6:	001d      	movs	r5, r3
   1bdb8:	4b4f      	ldr	r3, [pc, #316]	; (1bef8 <setvbuf+0x144>)
   1bdba:	b085      	sub	sp, #20
   1bdbc:	681e      	ldr	r6, [r3, #0]
   1bdbe:	0004      	movs	r4, r0
   1bdc0:	000f      	movs	r7, r1
   1bdc2:	9200      	str	r2, [sp, #0]
   1bdc4:	2e00      	cmp	r6, #0
   1bdc6:	d005      	beq.n	1bdd4 <setvbuf+0x20>
   1bdc8:	69b3      	ldr	r3, [r6, #24]
   1bdca:	2b00      	cmp	r3, #0
   1bdcc:	d102      	bne.n	1bdd4 <setvbuf+0x20>
   1bdce:	0030      	movs	r0, r6
   1bdd0:	f000 fb6a 	bl	1c4a8 <__sinit>
   1bdd4:	4b49      	ldr	r3, [pc, #292]	; (1befc <setvbuf+0x148>)
   1bdd6:	429c      	cmp	r4, r3
   1bdd8:	d150      	bne.n	1be7c <setvbuf+0xc8>
   1bdda:	6874      	ldr	r4, [r6, #4]
   1bddc:	9b00      	ldr	r3, [sp, #0]
   1bdde:	2b02      	cmp	r3, #2
   1bde0:	d005      	beq.n	1bdee <setvbuf+0x3a>
   1bde2:	2b01      	cmp	r3, #1
   1bde4:	d900      	bls.n	1bde8 <setvbuf+0x34>
   1bde6:	e084      	b.n	1bef2 <setvbuf+0x13e>
   1bde8:	2d00      	cmp	r5, #0
   1bdea:	da00      	bge.n	1bdee <setvbuf+0x3a>
   1bdec:	e081      	b.n	1bef2 <setvbuf+0x13e>
   1bdee:	0021      	movs	r1, r4
   1bdf0:	0030      	movs	r0, r6
   1bdf2:	f000 faeb 	bl	1c3cc <_fflush_r>
   1bdf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1bdf8:	2900      	cmp	r1, #0
   1bdfa:	d008      	beq.n	1be0e <setvbuf+0x5a>
   1bdfc:	0023      	movs	r3, r4
   1bdfe:	3344      	adds	r3, #68	; 0x44
   1be00:	4299      	cmp	r1, r3
   1be02:	d002      	beq.n	1be0a <setvbuf+0x56>
   1be04:	0030      	movs	r0, r6
   1be06:	f7ff fe79 	bl	1bafc <_free_r>
   1be0a:	2300      	movs	r3, #0
   1be0c:	6363      	str	r3, [r4, #52]	; 0x34
   1be0e:	2300      	movs	r3, #0
   1be10:	61a3      	str	r3, [r4, #24]
   1be12:	6063      	str	r3, [r4, #4]
   1be14:	89a3      	ldrh	r3, [r4, #12]
   1be16:	061b      	lsls	r3, r3, #24
   1be18:	d503      	bpl.n	1be22 <setvbuf+0x6e>
   1be1a:	6921      	ldr	r1, [r4, #16]
   1be1c:	0030      	movs	r0, r6
   1be1e:	f7ff fe6d 	bl	1bafc <_free_r>
   1be22:	89a3      	ldrh	r3, [r4, #12]
   1be24:	4a36      	ldr	r2, [pc, #216]	; (1bf00 <setvbuf+0x14c>)
   1be26:	4013      	ands	r3, r2
   1be28:	81a3      	strh	r3, [r4, #12]
   1be2a:	9b00      	ldr	r3, [sp, #0]
   1be2c:	2b02      	cmp	r3, #2
   1be2e:	d05a      	beq.n	1bee6 <setvbuf+0x132>
   1be30:	ab03      	add	r3, sp, #12
   1be32:	aa02      	add	r2, sp, #8
   1be34:	0021      	movs	r1, r4
   1be36:	0030      	movs	r0, r6
   1be38:	f000 fbe0 	bl	1c5fc <__swhatbuf_r>
   1be3c:	89a3      	ldrh	r3, [r4, #12]
   1be3e:	4318      	orrs	r0, r3
   1be40:	81a0      	strh	r0, [r4, #12]
   1be42:	2d00      	cmp	r5, #0
   1be44:	d124      	bne.n	1be90 <setvbuf+0xdc>
   1be46:	9d02      	ldr	r5, [sp, #8]
   1be48:	0028      	movs	r0, r5
   1be4a:	f7ff fe11 	bl	1ba70 <malloc>
   1be4e:	9501      	str	r5, [sp, #4]
   1be50:	1e07      	subs	r7, r0, #0
   1be52:	d142      	bne.n	1beda <setvbuf+0x126>
   1be54:	9b02      	ldr	r3, [sp, #8]
   1be56:	9301      	str	r3, [sp, #4]
   1be58:	42ab      	cmp	r3, r5
   1be5a:	d139      	bne.n	1bed0 <setvbuf+0x11c>
   1be5c:	2001      	movs	r0, #1
   1be5e:	4240      	negs	r0, r0
   1be60:	2302      	movs	r3, #2
   1be62:	89a2      	ldrh	r2, [r4, #12]
   1be64:	4313      	orrs	r3, r2
   1be66:	81a3      	strh	r3, [r4, #12]
   1be68:	2300      	movs	r3, #0
   1be6a:	60a3      	str	r3, [r4, #8]
   1be6c:	0023      	movs	r3, r4
   1be6e:	3347      	adds	r3, #71	; 0x47
   1be70:	6023      	str	r3, [r4, #0]
   1be72:	6123      	str	r3, [r4, #16]
   1be74:	2301      	movs	r3, #1
   1be76:	6163      	str	r3, [r4, #20]
   1be78:	b005      	add	sp, #20
   1be7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be7c:	4b21      	ldr	r3, [pc, #132]	; (1bf04 <setvbuf+0x150>)
   1be7e:	429c      	cmp	r4, r3
   1be80:	d101      	bne.n	1be86 <setvbuf+0xd2>
   1be82:	68b4      	ldr	r4, [r6, #8]
   1be84:	e7aa      	b.n	1bddc <setvbuf+0x28>
   1be86:	4b20      	ldr	r3, [pc, #128]	; (1bf08 <setvbuf+0x154>)
   1be88:	429c      	cmp	r4, r3
   1be8a:	d1a7      	bne.n	1bddc <setvbuf+0x28>
   1be8c:	68f4      	ldr	r4, [r6, #12]
   1be8e:	e7a5      	b.n	1bddc <setvbuf+0x28>
   1be90:	2f00      	cmp	r7, #0
   1be92:	d0d9      	beq.n	1be48 <setvbuf+0x94>
   1be94:	69b3      	ldr	r3, [r6, #24]
   1be96:	2b00      	cmp	r3, #0
   1be98:	d102      	bne.n	1bea0 <setvbuf+0xec>
   1be9a:	0030      	movs	r0, r6
   1be9c:	f000 fb04 	bl	1c4a8 <__sinit>
   1bea0:	9b00      	ldr	r3, [sp, #0]
   1bea2:	2b01      	cmp	r3, #1
   1bea4:	d103      	bne.n	1beae <setvbuf+0xfa>
   1bea6:	89a3      	ldrh	r3, [r4, #12]
   1bea8:	9a00      	ldr	r2, [sp, #0]
   1beaa:	431a      	orrs	r2, r3
   1beac:	81a2      	strh	r2, [r4, #12]
   1beae:	2008      	movs	r0, #8
   1beb0:	89a3      	ldrh	r3, [r4, #12]
   1beb2:	6027      	str	r7, [r4, #0]
   1beb4:	6127      	str	r7, [r4, #16]
   1beb6:	6165      	str	r5, [r4, #20]
   1beb8:	4018      	ands	r0, r3
   1beba:	d018      	beq.n	1beee <setvbuf+0x13a>
   1bebc:	2001      	movs	r0, #1
   1bebe:	4018      	ands	r0, r3
   1bec0:	2300      	movs	r3, #0
   1bec2:	4298      	cmp	r0, r3
   1bec4:	d011      	beq.n	1beea <setvbuf+0x136>
   1bec6:	426d      	negs	r5, r5
   1bec8:	60a3      	str	r3, [r4, #8]
   1beca:	61a5      	str	r5, [r4, #24]
   1becc:	0018      	movs	r0, r3
   1bece:	e7d3      	b.n	1be78 <setvbuf+0xc4>
   1bed0:	9801      	ldr	r0, [sp, #4]
   1bed2:	f7ff fdcd 	bl	1ba70 <malloc>
   1bed6:	1e07      	subs	r7, r0, #0
   1bed8:	d0c0      	beq.n	1be5c <setvbuf+0xa8>
   1beda:	2380      	movs	r3, #128	; 0x80
   1bedc:	89a2      	ldrh	r2, [r4, #12]
   1bede:	9d01      	ldr	r5, [sp, #4]
   1bee0:	4313      	orrs	r3, r2
   1bee2:	81a3      	strh	r3, [r4, #12]
   1bee4:	e7d6      	b.n	1be94 <setvbuf+0xe0>
   1bee6:	2000      	movs	r0, #0
   1bee8:	e7ba      	b.n	1be60 <setvbuf+0xac>
   1beea:	60a5      	str	r5, [r4, #8]
   1beec:	e7c4      	b.n	1be78 <setvbuf+0xc4>
   1beee:	60a0      	str	r0, [r4, #8]
   1bef0:	e7c2      	b.n	1be78 <setvbuf+0xc4>
   1bef2:	2001      	movs	r0, #1
   1bef4:	4240      	negs	r0, r0
   1bef6:	e7bf      	b.n	1be78 <setvbuf+0xc4>
   1bef8:	2000063c 	.word	0x2000063c
   1befc:	0001f46c 	.word	0x0001f46c
   1bf00:	fffff35c 	.word	0xfffff35c
   1bf04:	0001f48c 	.word	0x0001f48c
   1bf08:	0001f44c 	.word	0x0001f44c

0001bf0c <siprintf>:
   1bf0c:	b40e      	push	{r1, r2, r3}
   1bf0e:	b510      	push	{r4, lr}
   1bf10:	b09d      	sub	sp, #116	; 0x74
   1bf12:	a902      	add	r1, sp, #8
   1bf14:	9002      	str	r0, [sp, #8]
   1bf16:	6108      	str	r0, [r1, #16]
   1bf18:	480b      	ldr	r0, [pc, #44]	; (1bf48 <siprintf+0x3c>)
   1bf1a:	2482      	movs	r4, #130	; 0x82
   1bf1c:	6088      	str	r0, [r1, #8]
   1bf1e:	6148      	str	r0, [r1, #20]
   1bf20:	2001      	movs	r0, #1
   1bf22:	4240      	negs	r0, r0
   1bf24:	ab1f      	add	r3, sp, #124	; 0x7c
   1bf26:	81c8      	strh	r0, [r1, #14]
   1bf28:	4808      	ldr	r0, [pc, #32]	; (1bf4c <siprintf+0x40>)
   1bf2a:	cb04      	ldmia	r3!, {r2}
   1bf2c:	00a4      	lsls	r4, r4, #2
   1bf2e:	6800      	ldr	r0, [r0, #0]
   1bf30:	9301      	str	r3, [sp, #4]
   1bf32:	818c      	strh	r4, [r1, #12]
   1bf34:	f000 fc32 	bl	1c79c <_svfiprintf_r>
   1bf38:	2300      	movs	r3, #0
   1bf3a:	9a02      	ldr	r2, [sp, #8]
   1bf3c:	7013      	strb	r3, [r2, #0]
   1bf3e:	b01d      	add	sp, #116	; 0x74
   1bf40:	bc10      	pop	{r4}
   1bf42:	bc08      	pop	{r3}
   1bf44:	b003      	add	sp, #12
   1bf46:	4718      	bx	r3
   1bf48:	7fffffff 	.word	0x7fffffff
   1bf4c:	2000063c 	.word	0x2000063c

0001bf50 <__sread>:
   1bf50:	b570      	push	{r4, r5, r6, lr}
   1bf52:	000c      	movs	r4, r1
   1bf54:	250e      	movs	r5, #14
   1bf56:	5f49      	ldrsh	r1, [r1, r5]
   1bf58:	f001 f826 	bl	1cfa8 <_read_r>
   1bf5c:	2800      	cmp	r0, #0
   1bf5e:	db03      	blt.n	1bf68 <__sread+0x18>
   1bf60:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1bf62:	181b      	adds	r3, r3, r0
   1bf64:	6563      	str	r3, [r4, #84]	; 0x54
   1bf66:	bd70      	pop	{r4, r5, r6, pc}
   1bf68:	89a3      	ldrh	r3, [r4, #12]
   1bf6a:	4a02      	ldr	r2, [pc, #8]	; (1bf74 <__sread+0x24>)
   1bf6c:	4013      	ands	r3, r2
   1bf6e:	81a3      	strh	r3, [r4, #12]
   1bf70:	e7f9      	b.n	1bf66 <__sread+0x16>
   1bf72:	46c0      	nop			; (mov r8, r8)
   1bf74:	ffffefff 	.word	0xffffefff

0001bf78 <__swrite>:
   1bf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf7a:	001f      	movs	r7, r3
   1bf7c:	898b      	ldrh	r3, [r1, #12]
   1bf7e:	0005      	movs	r5, r0
   1bf80:	000c      	movs	r4, r1
   1bf82:	0016      	movs	r6, r2
   1bf84:	05db      	lsls	r3, r3, #23
   1bf86:	d505      	bpl.n	1bf94 <__swrite+0x1c>
   1bf88:	230e      	movs	r3, #14
   1bf8a:	5ec9      	ldrsh	r1, [r1, r3]
   1bf8c:	2200      	movs	r2, #0
   1bf8e:	2302      	movs	r3, #2
   1bf90:	f000 fb20 	bl	1c5d4 <_lseek_r>
   1bf94:	89a3      	ldrh	r3, [r4, #12]
   1bf96:	4a05      	ldr	r2, [pc, #20]	; (1bfac <__swrite+0x34>)
   1bf98:	0028      	movs	r0, r5
   1bf9a:	4013      	ands	r3, r2
   1bf9c:	81a3      	strh	r3, [r4, #12]
   1bf9e:	0032      	movs	r2, r6
   1bfa0:	230e      	movs	r3, #14
   1bfa2:	5ee1      	ldrsh	r1, [r4, r3]
   1bfa4:	003b      	movs	r3, r7
   1bfa6:	f000 f8eb 	bl	1c180 <_write_r>
   1bfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfac:	ffffefff 	.word	0xffffefff

0001bfb0 <__sseek>:
   1bfb0:	b570      	push	{r4, r5, r6, lr}
   1bfb2:	000c      	movs	r4, r1
   1bfb4:	250e      	movs	r5, #14
   1bfb6:	5f49      	ldrsh	r1, [r1, r5]
   1bfb8:	f000 fb0c 	bl	1c5d4 <_lseek_r>
   1bfbc:	89a3      	ldrh	r3, [r4, #12]
   1bfbe:	1c42      	adds	r2, r0, #1
   1bfc0:	d103      	bne.n	1bfca <__sseek+0x1a>
   1bfc2:	4a05      	ldr	r2, [pc, #20]	; (1bfd8 <__sseek+0x28>)
   1bfc4:	4013      	ands	r3, r2
   1bfc6:	81a3      	strh	r3, [r4, #12]
   1bfc8:	bd70      	pop	{r4, r5, r6, pc}
   1bfca:	2280      	movs	r2, #128	; 0x80
   1bfcc:	0152      	lsls	r2, r2, #5
   1bfce:	4313      	orrs	r3, r2
   1bfd0:	81a3      	strh	r3, [r4, #12]
   1bfd2:	6560      	str	r0, [r4, #84]	; 0x54
   1bfd4:	e7f8      	b.n	1bfc8 <__sseek+0x18>
   1bfd6:	46c0      	nop			; (mov r8, r8)
   1bfd8:	ffffefff 	.word	0xffffefff

0001bfdc <__sclose>:
   1bfdc:	b510      	push	{r4, lr}
   1bfde:	230e      	movs	r3, #14
   1bfe0:	5ec9      	ldrsh	r1, [r1, r3]
   1bfe2:	f000 f957 	bl	1c294 <_close_r>
   1bfe6:	bd10      	pop	{r4, pc}

0001bfe8 <strcat>:
   1bfe8:	0002      	movs	r2, r0
   1bfea:	b510      	push	{r4, lr}
   1bfec:	7813      	ldrb	r3, [r2, #0]
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d105      	bne.n	1bffe <strcat+0x16>
   1bff2:	5ccc      	ldrb	r4, [r1, r3]
   1bff4:	54d4      	strb	r4, [r2, r3]
   1bff6:	3301      	adds	r3, #1
   1bff8:	2c00      	cmp	r4, #0
   1bffa:	d1fa      	bne.n	1bff2 <strcat+0xa>
   1bffc:	bd10      	pop	{r4, pc}
   1bffe:	3201      	adds	r2, #1
   1c000:	e7f4      	b.n	1bfec <strcat+0x4>

0001c002 <strchr>:
   1c002:	b2c9      	uxtb	r1, r1
   1c004:	7803      	ldrb	r3, [r0, #0]
   1c006:	2b00      	cmp	r3, #0
   1c008:	d004      	beq.n	1c014 <strchr+0x12>
   1c00a:	4299      	cmp	r1, r3
   1c00c:	d100      	bne.n	1c010 <strchr+0xe>
   1c00e:	4770      	bx	lr
   1c010:	3001      	adds	r0, #1
   1c012:	e7f7      	b.n	1c004 <strchr+0x2>
   1c014:	424b      	negs	r3, r1
   1c016:	4159      	adcs	r1, r3
   1c018:	4249      	negs	r1, r1
   1c01a:	4008      	ands	r0, r1
   1c01c:	e7f7      	b.n	1c00e <strchr+0xc>

0001c01e <strcpy>:
   1c01e:	1c03      	adds	r3, r0, #0
   1c020:	780a      	ldrb	r2, [r1, #0]
   1c022:	3101      	adds	r1, #1
   1c024:	701a      	strb	r2, [r3, #0]
   1c026:	3301      	adds	r3, #1
   1c028:	2a00      	cmp	r2, #0
   1c02a:	d1f9      	bne.n	1c020 <strcpy+0x2>
   1c02c:	4770      	bx	lr

0001c02e <strlen>:
   1c02e:	2300      	movs	r3, #0
   1c030:	5cc2      	ldrb	r2, [r0, r3]
   1c032:	3301      	adds	r3, #1
   1c034:	2a00      	cmp	r2, #0
   1c036:	d1fb      	bne.n	1c030 <strlen+0x2>
   1c038:	1e58      	subs	r0, r3, #1
   1c03a:	4770      	bx	lr

0001c03c <strncmp>:
   1c03c:	2300      	movs	r3, #0
   1c03e:	b530      	push	{r4, r5, lr}
   1c040:	429a      	cmp	r2, r3
   1c042:	d00a      	beq.n	1c05a <strncmp+0x1e>
   1c044:	3a01      	subs	r2, #1
   1c046:	5cc4      	ldrb	r4, [r0, r3]
   1c048:	5ccd      	ldrb	r5, [r1, r3]
   1c04a:	42ac      	cmp	r4, r5
   1c04c:	d104      	bne.n	1c058 <strncmp+0x1c>
   1c04e:	429a      	cmp	r2, r3
   1c050:	d002      	beq.n	1c058 <strncmp+0x1c>
   1c052:	3301      	adds	r3, #1
   1c054:	2c00      	cmp	r4, #0
   1c056:	d1f6      	bne.n	1c046 <strncmp+0xa>
   1c058:	1b63      	subs	r3, r4, r5
   1c05a:	0018      	movs	r0, r3
   1c05c:	bd30      	pop	{r4, r5, pc}
	...

0001c060 <__utoa>:
   1c060:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c062:	0017      	movs	r7, r2
   1c064:	b08f      	sub	sp, #60	; 0x3c
   1c066:	2225      	movs	r2, #37	; 0x25
   1c068:	0006      	movs	r6, r0
   1c06a:	000d      	movs	r5, r1
   1c06c:	a804      	add	r0, sp, #16
   1c06e:	4918      	ldr	r1, [pc, #96]	; (1c0d0 <__utoa+0x70>)
   1c070:	f7ff fd21 	bl	1bab6 <memcpy>
   1c074:	aa04      	add	r2, sp, #16
   1c076:	1ebb      	subs	r3, r7, #2
   1c078:	2400      	movs	r4, #0
   1c07a:	9203      	str	r2, [sp, #12]
   1c07c:	2b22      	cmp	r3, #34	; 0x22
   1c07e:	d905      	bls.n	1c08c <__utoa+0x2c>
   1c080:	702c      	strb	r4, [r5, #0]
   1c082:	0025      	movs	r5, r4
   1c084:	0028      	movs	r0, r5
   1c086:	b00f      	add	sp, #60	; 0x3c
   1c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c08a:	9c01      	ldr	r4, [sp, #4]
   1c08c:	1c63      	adds	r3, r4, #1
   1c08e:	9301      	str	r3, [sp, #4]
   1c090:	18eb      	adds	r3, r5, r3
   1c092:	9300      	str	r3, [sp, #0]
   1c094:	0030      	movs	r0, r6
   1c096:	3b01      	subs	r3, #1
   1c098:	0039      	movs	r1, r7
   1c09a:	9302      	str	r3, [sp, #8]
   1c09c:	f7fd fdaa 	bl	19bf4 <__aeabi_uidivmod>
   1c0a0:	9b03      	ldr	r3, [sp, #12]
   1c0a2:	9a02      	ldr	r2, [sp, #8]
   1c0a4:	5c5b      	ldrb	r3, [r3, r1]
   1c0a6:	0030      	movs	r0, r6
   1c0a8:	7013      	strb	r3, [r2, #0]
   1c0aa:	0039      	movs	r1, r7
   1c0ac:	f7fd fd1c 	bl	19ae8 <__udivsi3>
   1c0b0:	1e06      	subs	r6, r0, #0
   1c0b2:	d1ea      	bne.n	1c08a <__utoa+0x2a>
   1c0b4:	9b00      	ldr	r3, [sp, #0]
   1c0b6:	7018      	strb	r0, [r3, #0]
   1c0b8:	002b      	movs	r3, r5
   1c0ba:	1b5a      	subs	r2, r3, r5
   1c0bc:	4294      	cmp	r4, r2
   1c0be:	dde1      	ble.n	1c084 <__utoa+0x24>
   1c0c0:	781a      	ldrb	r2, [r3, #0]
   1c0c2:	5d29      	ldrb	r1, [r5, r4]
   1c0c4:	7019      	strb	r1, [r3, #0]
   1c0c6:	552a      	strb	r2, [r5, r4]
   1c0c8:	3301      	adds	r3, #1
   1c0ca:	3c01      	subs	r4, #1
   1c0cc:	e7f5      	b.n	1c0ba <__utoa+0x5a>
   1c0ce:	46c0      	nop			; (mov r8, r8)
   1c0d0:	0001f424 	.word	0x0001f424

0001c0d4 <__swbuf_r>:
   1c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0d6:	0005      	movs	r5, r0
   1c0d8:	000e      	movs	r6, r1
   1c0da:	0014      	movs	r4, r2
   1c0dc:	2800      	cmp	r0, #0
   1c0de:	d004      	beq.n	1c0ea <__swbuf_r+0x16>
   1c0e0:	6983      	ldr	r3, [r0, #24]
   1c0e2:	2b00      	cmp	r3, #0
   1c0e4:	d101      	bne.n	1c0ea <__swbuf_r+0x16>
   1c0e6:	f000 f9df 	bl	1c4a8 <__sinit>
   1c0ea:	4b22      	ldr	r3, [pc, #136]	; (1c174 <__swbuf_r+0xa0>)
   1c0ec:	429c      	cmp	r4, r3
   1c0ee:	d12d      	bne.n	1c14c <__swbuf_r+0x78>
   1c0f0:	686c      	ldr	r4, [r5, #4]
   1c0f2:	69a3      	ldr	r3, [r4, #24]
   1c0f4:	60a3      	str	r3, [r4, #8]
   1c0f6:	89a3      	ldrh	r3, [r4, #12]
   1c0f8:	071b      	lsls	r3, r3, #28
   1c0fa:	d531      	bpl.n	1c160 <__swbuf_r+0x8c>
   1c0fc:	6923      	ldr	r3, [r4, #16]
   1c0fe:	2b00      	cmp	r3, #0
   1c100:	d02e      	beq.n	1c160 <__swbuf_r+0x8c>
   1c102:	6823      	ldr	r3, [r4, #0]
   1c104:	6922      	ldr	r2, [r4, #16]
   1c106:	b2f7      	uxtb	r7, r6
   1c108:	1a98      	subs	r0, r3, r2
   1c10a:	6963      	ldr	r3, [r4, #20]
   1c10c:	b2f6      	uxtb	r6, r6
   1c10e:	4298      	cmp	r0, r3
   1c110:	db05      	blt.n	1c11e <__swbuf_r+0x4a>
   1c112:	0021      	movs	r1, r4
   1c114:	0028      	movs	r0, r5
   1c116:	f000 f959 	bl	1c3cc <_fflush_r>
   1c11a:	2800      	cmp	r0, #0
   1c11c:	d126      	bne.n	1c16c <__swbuf_r+0x98>
   1c11e:	68a3      	ldr	r3, [r4, #8]
   1c120:	3001      	adds	r0, #1
   1c122:	3b01      	subs	r3, #1
   1c124:	60a3      	str	r3, [r4, #8]
   1c126:	6823      	ldr	r3, [r4, #0]
   1c128:	1c5a      	adds	r2, r3, #1
   1c12a:	6022      	str	r2, [r4, #0]
   1c12c:	701f      	strb	r7, [r3, #0]
   1c12e:	6963      	ldr	r3, [r4, #20]
   1c130:	4298      	cmp	r0, r3
   1c132:	d004      	beq.n	1c13e <__swbuf_r+0x6a>
   1c134:	89a3      	ldrh	r3, [r4, #12]
   1c136:	07db      	lsls	r3, r3, #31
   1c138:	d51a      	bpl.n	1c170 <__swbuf_r+0x9c>
   1c13a:	2e0a      	cmp	r6, #10
   1c13c:	d118      	bne.n	1c170 <__swbuf_r+0x9c>
   1c13e:	0021      	movs	r1, r4
   1c140:	0028      	movs	r0, r5
   1c142:	f000 f943 	bl	1c3cc <_fflush_r>
   1c146:	2800      	cmp	r0, #0
   1c148:	d012      	beq.n	1c170 <__swbuf_r+0x9c>
   1c14a:	e00f      	b.n	1c16c <__swbuf_r+0x98>
   1c14c:	4b0a      	ldr	r3, [pc, #40]	; (1c178 <__swbuf_r+0xa4>)
   1c14e:	429c      	cmp	r4, r3
   1c150:	d101      	bne.n	1c156 <__swbuf_r+0x82>
   1c152:	68ac      	ldr	r4, [r5, #8]
   1c154:	e7cd      	b.n	1c0f2 <__swbuf_r+0x1e>
   1c156:	4b09      	ldr	r3, [pc, #36]	; (1c17c <__swbuf_r+0xa8>)
   1c158:	429c      	cmp	r4, r3
   1c15a:	d1ca      	bne.n	1c0f2 <__swbuf_r+0x1e>
   1c15c:	68ec      	ldr	r4, [r5, #12]
   1c15e:	e7c8      	b.n	1c0f2 <__swbuf_r+0x1e>
   1c160:	0021      	movs	r1, r4
   1c162:	0028      	movs	r0, r5
   1c164:	f000 f820 	bl	1c1a8 <__swsetup_r>
   1c168:	2800      	cmp	r0, #0
   1c16a:	d0ca      	beq.n	1c102 <__swbuf_r+0x2e>
   1c16c:	2601      	movs	r6, #1
   1c16e:	4276      	negs	r6, r6
   1c170:	0030      	movs	r0, r6
   1c172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c174:	0001f46c 	.word	0x0001f46c
   1c178:	0001f48c 	.word	0x0001f48c
   1c17c:	0001f44c 	.word	0x0001f44c

0001c180 <_write_r>:
   1c180:	b570      	push	{r4, r5, r6, lr}
   1c182:	0005      	movs	r5, r0
   1c184:	0008      	movs	r0, r1
   1c186:	0011      	movs	r1, r2
   1c188:	2200      	movs	r2, #0
   1c18a:	4c06      	ldr	r4, [pc, #24]	; (1c1a4 <_write_r+0x24>)
   1c18c:	6022      	str	r2, [r4, #0]
   1c18e:	001a      	movs	r2, r3
   1c190:	f7fb faa2 	bl	176d8 <_write>
   1c194:	1c43      	adds	r3, r0, #1
   1c196:	d103      	bne.n	1c1a0 <_write_r+0x20>
   1c198:	6823      	ldr	r3, [r4, #0]
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d000      	beq.n	1c1a0 <_write_r+0x20>
   1c19e:	602b      	str	r3, [r5, #0]
   1c1a0:	bd70      	pop	{r4, r5, r6, pc}
   1c1a2:	46c0      	nop			; (mov r8, r8)
   1c1a4:	20002744 	.word	0x20002744

0001c1a8 <__swsetup_r>:
   1c1a8:	4b36      	ldr	r3, [pc, #216]	; (1c284 <__swsetup_r+0xdc>)
   1c1aa:	b570      	push	{r4, r5, r6, lr}
   1c1ac:	681d      	ldr	r5, [r3, #0]
   1c1ae:	0006      	movs	r6, r0
   1c1b0:	000c      	movs	r4, r1
   1c1b2:	2d00      	cmp	r5, #0
   1c1b4:	d005      	beq.n	1c1c2 <__swsetup_r+0x1a>
   1c1b6:	69ab      	ldr	r3, [r5, #24]
   1c1b8:	2b00      	cmp	r3, #0
   1c1ba:	d102      	bne.n	1c1c2 <__swsetup_r+0x1a>
   1c1bc:	0028      	movs	r0, r5
   1c1be:	f000 f973 	bl	1c4a8 <__sinit>
   1c1c2:	4b31      	ldr	r3, [pc, #196]	; (1c288 <__swsetup_r+0xe0>)
   1c1c4:	429c      	cmp	r4, r3
   1c1c6:	d10f      	bne.n	1c1e8 <__swsetup_r+0x40>
   1c1c8:	686c      	ldr	r4, [r5, #4]
   1c1ca:	230c      	movs	r3, #12
   1c1cc:	5ee2      	ldrsh	r2, [r4, r3]
   1c1ce:	b293      	uxth	r3, r2
   1c1d0:	0719      	lsls	r1, r3, #28
   1c1d2:	d42d      	bmi.n	1c230 <__swsetup_r+0x88>
   1c1d4:	06d9      	lsls	r1, r3, #27
   1c1d6:	d411      	bmi.n	1c1fc <__swsetup_r+0x54>
   1c1d8:	2309      	movs	r3, #9
   1c1da:	2001      	movs	r0, #1
   1c1dc:	6033      	str	r3, [r6, #0]
   1c1de:	3337      	adds	r3, #55	; 0x37
   1c1e0:	4313      	orrs	r3, r2
   1c1e2:	81a3      	strh	r3, [r4, #12]
   1c1e4:	4240      	negs	r0, r0
   1c1e6:	bd70      	pop	{r4, r5, r6, pc}
   1c1e8:	4b28      	ldr	r3, [pc, #160]	; (1c28c <__swsetup_r+0xe4>)
   1c1ea:	429c      	cmp	r4, r3
   1c1ec:	d101      	bne.n	1c1f2 <__swsetup_r+0x4a>
   1c1ee:	68ac      	ldr	r4, [r5, #8]
   1c1f0:	e7eb      	b.n	1c1ca <__swsetup_r+0x22>
   1c1f2:	4b27      	ldr	r3, [pc, #156]	; (1c290 <__swsetup_r+0xe8>)
   1c1f4:	429c      	cmp	r4, r3
   1c1f6:	d1e8      	bne.n	1c1ca <__swsetup_r+0x22>
   1c1f8:	68ec      	ldr	r4, [r5, #12]
   1c1fa:	e7e6      	b.n	1c1ca <__swsetup_r+0x22>
   1c1fc:	075b      	lsls	r3, r3, #29
   1c1fe:	d513      	bpl.n	1c228 <__swsetup_r+0x80>
   1c200:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c202:	2900      	cmp	r1, #0
   1c204:	d008      	beq.n	1c218 <__swsetup_r+0x70>
   1c206:	0023      	movs	r3, r4
   1c208:	3344      	adds	r3, #68	; 0x44
   1c20a:	4299      	cmp	r1, r3
   1c20c:	d002      	beq.n	1c214 <__swsetup_r+0x6c>
   1c20e:	0030      	movs	r0, r6
   1c210:	f7ff fc74 	bl	1bafc <_free_r>
   1c214:	2300      	movs	r3, #0
   1c216:	6363      	str	r3, [r4, #52]	; 0x34
   1c218:	2224      	movs	r2, #36	; 0x24
   1c21a:	89a3      	ldrh	r3, [r4, #12]
   1c21c:	4393      	bics	r3, r2
   1c21e:	81a3      	strh	r3, [r4, #12]
   1c220:	2300      	movs	r3, #0
   1c222:	6063      	str	r3, [r4, #4]
   1c224:	6923      	ldr	r3, [r4, #16]
   1c226:	6023      	str	r3, [r4, #0]
   1c228:	2308      	movs	r3, #8
   1c22a:	89a2      	ldrh	r2, [r4, #12]
   1c22c:	4313      	orrs	r3, r2
   1c22e:	81a3      	strh	r3, [r4, #12]
   1c230:	6923      	ldr	r3, [r4, #16]
   1c232:	2b00      	cmp	r3, #0
   1c234:	d10b      	bne.n	1c24e <__swsetup_r+0xa6>
   1c236:	21a0      	movs	r1, #160	; 0xa0
   1c238:	2280      	movs	r2, #128	; 0x80
   1c23a:	89a3      	ldrh	r3, [r4, #12]
   1c23c:	0089      	lsls	r1, r1, #2
   1c23e:	0092      	lsls	r2, r2, #2
   1c240:	400b      	ands	r3, r1
   1c242:	4293      	cmp	r3, r2
   1c244:	d003      	beq.n	1c24e <__swsetup_r+0xa6>
   1c246:	0021      	movs	r1, r4
   1c248:	0030      	movs	r0, r6
   1c24a:	f000 f9ff 	bl	1c64c <__smakebuf_r>
   1c24e:	2301      	movs	r3, #1
   1c250:	89a2      	ldrh	r2, [r4, #12]
   1c252:	4013      	ands	r3, r2
   1c254:	d011      	beq.n	1c27a <__swsetup_r+0xd2>
   1c256:	2300      	movs	r3, #0
   1c258:	60a3      	str	r3, [r4, #8]
   1c25a:	6963      	ldr	r3, [r4, #20]
   1c25c:	425b      	negs	r3, r3
   1c25e:	61a3      	str	r3, [r4, #24]
   1c260:	2000      	movs	r0, #0
   1c262:	6923      	ldr	r3, [r4, #16]
   1c264:	4283      	cmp	r3, r0
   1c266:	d1be      	bne.n	1c1e6 <__swsetup_r+0x3e>
   1c268:	230c      	movs	r3, #12
   1c26a:	5ee2      	ldrsh	r2, [r4, r3]
   1c26c:	0613      	lsls	r3, r2, #24
   1c26e:	d5ba      	bpl.n	1c1e6 <__swsetup_r+0x3e>
   1c270:	2340      	movs	r3, #64	; 0x40
   1c272:	4313      	orrs	r3, r2
   1c274:	81a3      	strh	r3, [r4, #12]
   1c276:	3801      	subs	r0, #1
   1c278:	e7b5      	b.n	1c1e6 <__swsetup_r+0x3e>
   1c27a:	0792      	lsls	r2, r2, #30
   1c27c:	d400      	bmi.n	1c280 <__swsetup_r+0xd8>
   1c27e:	6963      	ldr	r3, [r4, #20]
   1c280:	60a3      	str	r3, [r4, #8]
   1c282:	e7ed      	b.n	1c260 <__swsetup_r+0xb8>
   1c284:	2000063c 	.word	0x2000063c
   1c288:	0001f46c 	.word	0x0001f46c
   1c28c:	0001f48c 	.word	0x0001f48c
   1c290:	0001f44c 	.word	0x0001f44c

0001c294 <_close_r>:
   1c294:	2300      	movs	r3, #0
   1c296:	b570      	push	{r4, r5, r6, lr}
   1c298:	4c06      	ldr	r4, [pc, #24]	; (1c2b4 <_close_r+0x20>)
   1c29a:	0005      	movs	r5, r0
   1c29c:	0008      	movs	r0, r1
   1c29e:	6023      	str	r3, [r4, #0]
   1c2a0:	f7fb fa6e 	bl	17780 <_close>
   1c2a4:	1c43      	adds	r3, r0, #1
   1c2a6:	d103      	bne.n	1c2b0 <_close_r+0x1c>
   1c2a8:	6823      	ldr	r3, [r4, #0]
   1c2aa:	2b00      	cmp	r3, #0
   1c2ac:	d000      	beq.n	1c2b0 <_close_r+0x1c>
   1c2ae:	602b      	str	r3, [r5, #0]
   1c2b0:	bd70      	pop	{r4, r5, r6, pc}
   1c2b2:	46c0      	nop			; (mov r8, r8)
   1c2b4:	20002744 	.word	0x20002744

0001c2b8 <__sflush_r>:
   1c2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c2ba:	898a      	ldrh	r2, [r1, #12]
   1c2bc:	0005      	movs	r5, r0
   1c2be:	000c      	movs	r4, r1
   1c2c0:	0713      	lsls	r3, r2, #28
   1c2c2:	d460      	bmi.n	1c386 <__sflush_r+0xce>
   1c2c4:	684b      	ldr	r3, [r1, #4]
   1c2c6:	2b00      	cmp	r3, #0
   1c2c8:	dc04      	bgt.n	1c2d4 <__sflush_r+0x1c>
   1c2ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	dc01      	bgt.n	1c2d4 <__sflush_r+0x1c>
   1c2d0:	2000      	movs	r0, #0
   1c2d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1c2d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1c2d6:	2f00      	cmp	r7, #0
   1c2d8:	d0fa      	beq.n	1c2d0 <__sflush_r+0x18>
   1c2da:	2300      	movs	r3, #0
   1c2dc:	682e      	ldr	r6, [r5, #0]
   1c2de:	602b      	str	r3, [r5, #0]
   1c2e0:	2380      	movs	r3, #128	; 0x80
   1c2e2:	015b      	lsls	r3, r3, #5
   1c2e4:	401a      	ands	r2, r3
   1c2e6:	d034      	beq.n	1c352 <__sflush_r+0x9a>
   1c2e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1c2ea:	89a3      	ldrh	r3, [r4, #12]
   1c2ec:	075b      	lsls	r3, r3, #29
   1c2ee:	d506      	bpl.n	1c2fe <__sflush_r+0x46>
   1c2f0:	6863      	ldr	r3, [r4, #4]
   1c2f2:	1ac0      	subs	r0, r0, r3
   1c2f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c2f6:	2b00      	cmp	r3, #0
   1c2f8:	d001      	beq.n	1c2fe <__sflush_r+0x46>
   1c2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c2fc:	1ac0      	subs	r0, r0, r3
   1c2fe:	0002      	movs	r2, r0
   1c300:	6a21      	ldr	r1, [r4, #32]
   1c302:	2300      	movs	r3, #0
   1c304:	0028      	movs	r0, r5
   1c306:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1c308:	47b8      	blx	r7
   1c30a:	89a1      	ldrh	r1, [r4, #12]
   1c30c:	1c43      	adds	r3, r0, #1
   1c30e:	d106      	bne.n	1c31e <__sflush_r+0x66>
   1c310:	682b      	ldr	r3, [r5, #0]
   1c312:	2b1d      	cmp	r3, #29
   1c314:	d831      	bhi.n	1c37a <__sflush_r+0xc2>
   1c316:	4a2c      	ldr	r2, [pc, #176]	; (1c3c8 <__sflush_r+0x110>)
   1c318:	40da      	lsrs	r2, r3
   1c31a:	07d3      	lsls	r3, r2, #31
   1c31c:	d52d      	bpl.n	1c37a <__sflush_r+0xc2>
   1c31e:	2300      	movs	r3, #0
   1c320:	6063      	str	r3, [r4, #4]
   1c322:	6923      	ldr	r3, [r4, #16]
   1c324:	6023      	str	r3, [r4, #0]
   1c326:	04cb      	lsls	r3, r1, #19
   1c328:	d505      	bpl.n	1c336 <__sflush_r+0x7e>
   1c32a:	1c43      	adds	r3, r0, #1
   1c32c:	d102      	bne.n	1c334 <__sflush_r+0x7c>
   1c32e:	682b      	ldr	r3, [r5, #0]
   1c330:	2b00      	cmp	r3, #0
   1c332:	d100      	bne.n	1c336 <__sflush_r+0x7e>
   1c334:	6560      	str	r0, [r4, #84]	; 0x54
   1c336:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c338:	602e      	str	r6, [r5, #0]
   1c33a:	2900      	cmp	r1, #0
   1c33c:	d0c8      	beq.n	1c2d0 <__sflush_r+0x18>
   1c33e:	0023      	movs	r3, r4
   1c340:	3344      	adds	r3, #68	; 0x44
   1c342:	4299      	cmp	r1, r3
   1c344:	d002      	beq.n	1c34c <__sflush_r+0x94>
   1c346:	0028      	movs	r0, r5
   1c348:	f7ff fbd8 	bl	1bafc <_free_r>
   1c34c:	2000      	movs	r0, #0
   1c34e:	6360      	str	r0, [r4, #52]	; 0x34
   1c350:	e7bf      	b.n	1c2d2 <__sflush_r+0x1a>
   1c352:	2301      	movs	r3, #1
   1c354:	6a21      	ldr	r1, [r4, #32]
   1c356:	0028      	movs	r0, r5
   1c358:	47b8      	blx	r7
   1c35a:	1c43      	adds	r3, r0, #1
   1c35c:	d1c5      	bne.n	1c2ea <__sflush_r+0x32>
   1c35e:	682b      	ldr	r3, [r5, #0]
   1c360:	2b00      	cmp	r3, #0
   1c362:	d0c2      	beq.n	1c2ea <__sflush_r+0x32>
   1c364:	2b1d      	cmp	r3, #29
   1c366:	d001      	beq.n	1c36c <__sflush_r+0xb4>
   1c368:	2b16      	cmp	r3, #22
   1c36a:	d101      	bne.n	1c370 <__sflush_r+0xb8>
   1c36c:	602e      	str	r6, [r5, #0]
   1c36e:	e7af      	b.n	1c2d0 <__sflush_r+0x18>
   1c370:	2340      	movs	r3, #64	; 0x40
   1c372:	89a2      	ldrh	r2, [r4, #12]
   1c374:	4313      	orrs	r3, r2
   1c376:	81a3      	strh	r3, [r4, #12]
   1c378:	e7ab      	b.n	1c2d2 <__sflush_r+0x1a>
   1c37a:	2340      	movs	r3, #64	; 0x40
   1c37c:	430b      	orrs	r3, r1
   1c37e:	2001      	movs	r0, #1
   1c380:	81a3      	strh	r3, [r4, #12]
   1c382:	4240      	negs	r0, r0
   1c384:	e7a5      	b.n	1c2d2 <__sflush_r+0x1a>
   1c386:	690f      	ldr	r7, [r1, #16]
   1c388:	2f00      	cmp	r7, #0
   1c38a:	d0a1      	beq.n	1c2d0 <__sflush_r+0x18>
   1c38c:	680b      	ldr	r3, [r1, #0]
   1c38e:	600f      	str	r7, [r1, #0]
   1c390:	1bdb      	subs	r3, r3, r7
   1c392:	9301      	str	r3, [sp, #4]
   1c394:	2300      	movs	r3, #0
   1c396:	0792      	lsls	r2, r2, #30
   1c398:	d100      	bne.n	1c39c <__sflush_r+0xe4>
   1c39a:	694b      	ldr	r3, [r1, #20]
   1c39c:	60a3      	str	r3, [r4, #8]
   1c39e:	9b01      	ldr	r3, [sp, #4]
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	dc00      	bgt.n	1c3a6 <__sflush_r+0xee>
   1c3a4:	e794      	b.n	1c2d0 <__sflush_r+0x18>
   1c3a6:	9b01      	ldr	r3, [sp, #4]
   1c3a8:	003a      	movs	r2, r7
   1c3aa:	6a21      	ldr	r1, [r4, #32]
   1c3ac:	0028      	movs	r0, r5
   1c3ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1c3b0:	47b0      	blx	r6
   1c3b2:	2800      	cmp	r0, #0
   1c3b4:	dc03      	bgt.n	1c3be <__sflush_r+0x106>
   1c3b6:	2340      	movs	r3, #64	; 0x40
   1c3b8:	89a2      	ldrh	r2, [r4, #12]
   1c3ba:	4313      	orrs	r3, r2
   1c3bc:	e7df      	b.n	1c37e <__sflush_r+0xc6>
   1c3be:	9b01      	ldr	r3, [sp, #4]
   1c3c0:	183f      	adds	r7, r7, r0
   1c3c2:	1a1b      	subs	r3, r3, r0
   1c3c4:	9301      	str	r3, [sp, #4]
   1c3c6:	e7ea      	b.n	1c39e <__sflush_r+0xe6>
   1c3c8:	20400001 	.word	0x20400001

0001c3cc <_fflush_r>:
   1c3cc:	690b      	ldr	r3, [r1, #16]
   1c3ce:	b570      	push	{r4, r5, r6, lr}
   1c3d0:	0005      	movs	r5, r0
   1c3d2:	000c      	movs	r4, r1
   1c3d4:	2b00      	cmp	r3, #0
   1c3d6:	d101      	bne.n	1c3dc <_fflush_r+0x10>
   1c3d8:	2000      	movs	r0, #0
   1c3da:	bd70      	pop	{r4, r5, r6, pc}
   1c3dc:	2800      	cmp	r0, #0
   1c3de:	d004      	beq.n	1c3ea <_fflush_r+0x1e>
   1c3e0:	6983      	ldr	r3, [r0, #24]
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	d101      	bne.n	1c3ea <_fflush_r+0x1e>
   1c3e6:	f000 f85f 	bl	1c4a8 <__sinit>
   1c3ea:	4b0b      	ldr	r3, [pc, #44]	; (1c418 <_fflush_r+0x4c>)
   1c3ec:	429c      	cmp	r4, r3
   1c3ee:	d109      	bne.n	1c404 <_fflush_r+0x38>
   1c3f0:	686c      	ldr	r4, [r5, #4]
   1c3f2:	220c      	movs	r2, #12
   1c3f4:	5ea3      	ldrsh	r3, [r4, r2]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	d0ee      	beq.n	1c3d8 <_fflush_r+0xc>
   1c3fa:	0021      	movs	r1, r4
   1c3fc:	0028      	movs	r0, r5
   1c3fe:	f7ff ff5b 	bl	1c2b8 <__sflush_r>
   1c402:	e7ea      	b.n	1c3da <_fflush_r+0xe>
   1c404:	4b05      	ldr	r3, [pc, #20]	; (1c41c <_fflush_r+0x50>)
   1c406:	429c      	cmp	r4, r3
   1c408:	d101      	bne.n	1c40e <_fflush_r+0x42>
   1c40a:	68ac      	ldr	r4, [r5, #8]
   1c40c:	e7f1      	b.n	1c3f2 <_fflush_r+0x26>
   1c40e:	4b04      	ldr	r3, [pc, #16]	; (1c420 <_fflush_r+0x54>)
   1c410:	429c      	cmp	r4, r3
   1c412:	d1ee      	bne.n	1c3f2 <_fflush_r+0x26>
   1c414:	68ec      	ldr	r4, [r5, #12]
   1c416:	e7ec      	b.n	1c3f2 <_fflush_r+0x26>
   1c418:	0001f46c 	.word	0x0001f46c
   1c41c:	0001f48c 	.word	0x0001f48c
   1c420:	0001f44c 	.word	0x0001f44c

0001c424 <_cleanup_r>:
   1c424:	b510      	push	{r4, lr}
   1c426:	4902      	ldr	r1, [pc, #8]	; (1c430 <_cleanup_r+0xc>)
   1c428:	f000 f8b2 	bl	1c590 <_fwalk_reent>
   1c42c:	bd10      	pop	{r4, pc}
   1c42e:	46c0      	nop			; (mov r8, r8)
   1c430:	0001c3cd 	.word	0x0001c3cd

0001c434 <std.isra.0>:
   1c434:	2300      	movs	r3, #0
   1c436:	b510      	push	{r4, lr}
   1c438:	0004      	movs	r4, r0
   1c43a:	6003      	str	r3, [r0, #0]
   1c43c:	6043      	str	r3, [r0, #4]
   1c43e:	6083      	str	r3, [r0, #8]
   1c440:	8181      	strh	r1, [r0, #12]
   1c442:	6643      	str	r3, [r0, #100]	; 0x64
   1c444:	81c2      	strh	r2, [r0, #14]
   1c446:	6103      	str	r3, [r0, #16]
   1c448:	6143      	str	r3, [r0, #20]
   1c44a:	6183      	str	r3, [r0, #24]
   1c44c:	0019      	movs	r1, r3
   1c44e:	2208      	movs	r2, #8
   1c450:	305c      	adds	r0, #92	; 0x5c
   1c452:	f7ff fb4b 	bl	1baec <memset>
   1c456:	4b05      	ldr	r3, [pc, #20]	; (1c46c <std.isra.0+0x38>)
   1c458:	6224      	str	r4, [r4, #32]
   1c45a:	6263      	str	r3, [r4, #36]	; 0x24
   1c45c:	4b04      	ldr	r3, [pc, #16]	; (1c470 <std.isra.0+0x3c>)
   1c45e:	62a3      	str	r3, [r4, #40]	; 0x28
   1c460:	4b04      	ldr	r3, [pc, #16]	; (1c474 <std.isra.0+0x40>)
   1c462:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c464:	4b04      	ldr	r3, [pc, #16]	; (1c478 <std.isra.0+0x44>)
   1c466:	6323      	str	r3, [r4, #48]	; 0x30
   1c468:	bd10      	pop	{r4, pc}
   1c46a:	46c0      	nop			; (mov r8, r8)
   1c46c:	0001bf51 	.word	0x0001bf51
   1c470:	0001bf79 	.word	0x0001bf79
   1c474:	0001bfb1 	.word	0x0001bfb1
   1c478:	0001bfdd 	.word	0x0001bfdd

0001c47c <__sfmoreglue>:
   1c47c:	b570      	push	{r4, r5, r6, lr}
   1c47e:	2568      	movs	r5, #104	; 0x68
   1c480:	1e4a      	subs	r2, r1, #1
   1c482:	4355      	muls	r5, r2
   1c484:	000e      	movs	r6, r1
   1c486:	0029      	movs	r1, r5
   1c488:	3174      	adds	r1, #116	; 0x74
   1c48a:	f7ff fb81 	bl	1bb90 <_malloc_r>
   1c48e:	1e04      	subs	r4, r0, #0
   1c490:	d008      	beq.n	1c4a4 <__sfmoreglue+0x28>
   1c492:	2100      	movs	r1, #0
   1c494:	002a      	movs	r2, r5
   1c496:	6001      	str	r1, [r0, #0]
   1c498:	6046      	str	r6, [r0, #4]
   1c49a:	300c      	adds	r0, #12
   1c49c:	60a0      	str	r0, [r4, #8]
   1c49e:	3268      	adds	r2, #104	; 0x68
   1c4a0:	f7ff fb24 	bl	1baec <memset>
   1c4a4:	0020      	movs	r0, r4
   1c4a6:	bd70      	pop	{r4, r5, r6, pc}

0001c4a8 <__sinit>:
   1c4a8:	6983      	ldr	r3, [r0, #24]
   1c4aa:	b513      	push	{r0, r1, r4, lr}
   1c4ac:	0004      	movs	r4, r0
   1c4ae:	2b00      	cmp	r3, #0
   1c4b0:	d128      	bne.n	1c504 <__sinit+0x5c>
   1c4b2:	6483      	str	r3, [r0, #72]	; 0x48
   1c4b4:	64c3      	str	r3, [r0, #76]	; 0x4c
   1c4b6:	6503      	str	r3, [r0, #80]	; 0x50
   1c4b8:	4b13      	ldr	r3, [pc, #76]	; (1c508 <__sinit+0x60>)
   1c4ba:	4a14      	ldr	r2, [pc, #80]	; (1c50c <__sinit+0x64>)
   1c4bc:	681b      	ldr	r3, [r3, #0]
   1c4be:	6282      	str	r2, [r0, #40]	; 0x28
   1c4c0:	9301      	str	r3, [sp, #4]
   1c4c2:	4298      	cmp	r0, r3
   1c4c4:	d101      	bne.n	1c4ca <__sinit+0x22>
   1c4c6:	2301      	movs	r3, #1
   1c4c8:	6183      	str	r3, [r0, #24]
   1c4ca:	0020      	movs	r0, r4
   1c4cc:	f000 f820 	bl	1c510 <__sfp>
   1c4d0:	6060      	str	r0, [r4, #4]
   1c4d2:	0020      	movs	r0, r4
   1c4d4:	f000 f81c 	bl	1c510 <__sfp>
   1c4d8:	60a0      	str	r0, [r4, #8]
   1c4da:	0020      	movs	r0, r4
   1c4dc:	f000 f818 	bl	1c510 <__sfp>
   1c4e0:	2200      	movs	r2, #0
   1c4e2:	60e0      	str	r0, [r4, #12]
   1c4e4:	2104      	movs	r1, #4
   1c4e6:	6860      	ldr	r0, [r4, #4]
   1c4e8:	f7ff ffa4 	bl	1c434 <std.isra.0>
   1c4ec:	2201      	movs	r2, #1
   1c4ee:	2109      	movs	r1, #9
   1c4f0:	68a0      	ldr	r0, [r4, #8]
   1c4f2:	f7ff ff9f 	bl	1c434 <std.isra.0>
   1c4f6:	2202      	movs	r2, #2
   1c4f8:	2112      	movs	r1, #18
   1c4fa:	68e0      	ldr	r0, [r4, #12]
   1c4fc:	f7ff ff9a 	bl	1c434 <std.isra.0>
   1c500:	2301      	movs	r3, #1
   1c502:	61a3      	str	r3, [r4, #24]
   1c504:	bd13      	pop	{r0, r1, r4, pc}
   1c506:	46c0      	nop			; (mov r8, r8)
   1c508:	0001f420 	.word	0x0001f420
   1c50c:	0001c425 	.word	0x0001c425

0001c510 <__sfp>:
   1c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c512:	4b1e      	ldr	r3, [pc, #120]	; (1c58c <__sfp+0x7c>)
   1c514:	0007      	movs	r7, r0
   1c516:	681e      	ldr	r6, [r3, #0]
   1c518:	69b3      	ldr	r3, [r6, #24]
   1c51a:	2b00      	cmp	r3, #0
   1c51c:	d102      	bne.n	1c524 <__sfp+0x14>
   1c51e:	0030      	movs	r0, r6
   1c520:	f7ff ffc2 	bl	1c4a8 <__sinit>
   1c524:	3648      	adds	r6, #72	; 0x48
   1c526:	68b4      	ldr	r4, [r6, #8]
   1c528:	6873      	ldr	r3, [r6, #4]
   1c52a:	3b01      	subs	r3, #1
   1c52c:	d504      	bpl.n	1c538 <__sfp+0x28>
   1c52e:	6833      	ldr	r3, [r6, #0]
   1c530:	2b00      	cmp	r3, #0
   1c532:	d007      	beq.n	1c544 <__sfp+0x34>
   1c534:	6836      	ldr	r6, [r6, #0]
   1c536:	e7f6      	b.n	1c526 <__sfp+0x16>
   1c538:	220c      	movs	r2, #12
   1c53a:	5ea5      	ldrsh	r5, [r4, r2]
   1c53c:	2d00      	cmp	r5, #0
   1c53e:	d00d      	beq.n	1c55c <__sfp+0x4c>
   1c540:	3468      	adds	r4, #104	; 0x68
   1c542:	e7f2      	b.n	1c52a <__sfp+0x1a>
   1c544:	2104      	movs	r1, #4
   1c546:	0038      	movs	r0, r7
   1c548:	f7ff ff98 	bl	1c47c <__sfmoreglue>
   1c54c:	6030      	str	r0, [r6, #0]
   1c54e:	2800      	cmp	r0, #0
   1c550:	d1f0      	bne.n	1c534 <__sfp+0x24>
   1c552:	230c      	movs	r3, #12
   1c554:	0004      	movs	r4, r0
   1c556:	603b      	str	r3, [r7, #0]
   1c558:	0020      	movs	r0, r4
   1c55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c55c:	2301      	movs	r3, #1
   1c55e:	0020      	movs	r0, r4
   1c560:	425b      	negs	r3, r3
   1c562:	81e3      	strh	r3, [r4, #14]
   1c564:	3302      	adds	r3, #2
   1c566:	81a3      	strh	r3, [r4, #12]
   1c568:	6665      	str	r5, [r4, #100]	; 0x64
   1c56a:	6025      	str	r5, [r4, #0]
   1c56c:	60a5      	str	r5, [r4, #8]
   1c56e:	6065      	str	r5, [r4, #4]
   1c570:	6125      	str	r5, [r4, #16]
   1c572:	6165      	str	r5, [r4, #20]
   1c574:	61a5      	str	r5, [r4, #24]
   1c576:	2208      	movs	r2, #8
   1c578:	0029      	movs	r1, r5
   1c57a:	305c      	adds	r0, #92	; 0x5c
   1c57c:	f7ff fab6 	bl	1baec <memset>
   1c580:	6365      	str	r5, [r4, #52]	; 0x34
   1c582:	63a5      	str	r5, [r4, #56]	; 0x38
   1c584:	64a5      	str	r5, [r4, #72]	; 0x48
   1c586:	64e5      	str	r5, [r4, #76]	; 0x4c
   1c588:	e7e6      	b.n	1c558 <__sfp+0x48>
   1c58a:	46c0      	nop			; (mov r8, r8)
   1c58c:	0001f420 	.word	0x0001f420

0001c590 <_fwalk_reent>:
   1c590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c592:	0004      	movs	r4, r0
   1c594:	0007      	movs	r7, r0
   1c596:	2600      	movs	r6, #0
   1c598:	9101      	str	r1, [sp, #4]
   1c59a:	3448      	adds	r4, #72	; 0x48
   1c59c:	2c00      	cmp	r4, #0
   1c59e:	d101      	bne.n	1c5a4 <_fwalk_reent+0x14>
   1c5a0:	0030      	movs	r0, r6
   1c5a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1c5a4:	6863      	ldr	r3, [r4, #4]
   1c5a6:	68a5      	ldr	r5, [r4, #8]
   1c5a8:	9300      	str	r3, [sp, #0]
   1c5aa:	9b00      	ldr	r3, [sp, #0]
   1c5ac:	3b01      	subs	r3, #1
   1c5ae:	9300      	str	r3, [sp, #0]
   1c5b0:	d501      	bpl.n	1c5b6 <_fwalk_reent+0x26>
   1c5b2:	6824      	ldr	r4, [r4, #0]
   1c5b4:	e7f2      	b.n	1c59c <_fwalk_reent+0xc>
   1c5b6:	89ab      	ldrh	r3, [r5, #12]
   1c5b8:	2b01      	cmp	r3, #1
   1c5ba:	d908      	bls.n	1c5ce <_fwalk_reent+0x3e>
   1c5bc:	220e      	movs	r2, #14
   1c5be:	5eab      	ldrsh	r3, [r5, r2]
   1c5c0:	3301      	adds	r3, #1
   1c5c2:	d004      	beq.n	1c5ce <_fwalk_reent+0x3e>
   1c5c4:	0029      	movs	r1, r5
   1c5c6:	0038      	movs	r0, r7
   1c5c8:	9b01      	ldr	r3, [sp, #4]
   1c5ca:	4798      	blx	r3
   1c5cc:	4306      	orrs	r6, r0
   1c5ce:	3568      	adds	r5, #104	; 0x68
   1c5d0:	e7eb      	b.n	1c5aa <_fwalk_reent+0x1a>
	...

0001c5d4 <_lseek_r>:
   1c5d4:	b570      	push	{r4, r5, r6, lr}
   1c5d6:	0005      	movs	r5, r0
   1c5d8:	0008      	movs	r0, r1
   1c5da:	0011      	movs	r1, r2
   1c5dc:	2200      	movs	r2, #0
   1c5de:	4c06      	ldr	r4, [pc, #24]	; (1c5f8 <_lseek_r+0x24>)
   1c5e0:	6022      	str	r2, [r4, #0]
   1c5e2:	001a      	movs	r2, r3
   1c5e4:	f7fb f8ed 	bl	177c2 <_lseek>
   1c5e8:	1c43      	adds	r3, r0, #1
   1c5ea:	d103      	bne.n	1c5f4 <_lseek_r+0x20>
   1c5ec:	6823      	ldr	r3, [r4, #0]
   1c5ee:	2b00      	cmp	r3, #0
   1c5f0:	d000      	beq.n	1c5f4 <_lseek_r+0x20>
   1c5f2:	602b      	str	r3, [r5, #0]
   1c5f4:	bd70      	pop	{r4, r5, r6, pc}
   1c5f6:	46c0      	nop			; (mov r8, r8)
   1c5f8:	20002744 	.word	0x20002744

0001c5fc <__swhatbuf_r>:
   1c5fc:	b570      	push	{r4, r5, r6, lr}
   1c5fe:	000e      	movs	r6, r1
   1c600:	001d      	movs	r5, r3
   1c602:	230e      	movs	r3, #14
   1c604:	5ec9      	ldrsh	r1, [r1, r3]
   1c606:	b090      	sub	sp, #64	; 0x40
   1c608:	0014      	movs	r4, r2
   1c60a:	2900      	cmp	r1, #0
   1c60c:	da07      	bge.n	1c61e <__swhatbuf_r+0x22>
   1c60e:	2300      	movs	r3, #0
   1c610:	602b      	str	r3, [r5, #0]
   1c612:	89b3      	ldrh	r3, [r6, #12]
   1c614:	061b      	lsls	r3, r3, #24
   1c616:	d411      	bmi.n	1c63c <__swhatbuf_r+0x40>
   1c618:	2380      	movs	r3, #128	; 0x80
   1c61a:	00db      	lsls	r3, r3, #3
   1c61c:	e00f      	b.n	1c63e <__swhatbuf_r+0x42>
   1c61e:	aa01      	add	r2, sp, #4
   1c620:	f000 fcd6 	bl	1cfd0 <_fstat_r>
   1c624:	2800      	cmp	r0, #0
   1c626:	dbf2      	blt.n	1c60e <__swhatbuf_r+0x12>
   1c628:	22f0      	movs	r2, #240	; 0xf0
   1c62a:	9b02      	ldr	r3, [sp, #8]
   1c62c:	0212      	lsls	r2, r2, #8
   1c62e:	4013      	ands	r3, r2
   1c630:	4a05      	ldr	r2, [pc, #20]	; (1c648 <__swhatbuf_r+0x4c>)
   1c632:	189b      	adds	r3, r3, r2
   1c634:	425a      	negs	r2, r3
   1c636:	4153      	adcs	r3, r2
   1c638:	602b      	str	r3, [r5, #0]
   1c63a:	e7ed      	b.n	1c618 <__swhatbuf_r+0x1c>
   1c63c:	2340      	movs	r3, #64	; 0x40
   1c63e:	2000      	movs	r0, #0
   1c640:	6023      	str	r3, [r4, #0]
   1c642:	b010      	add	sp, #64	; 0x40
   1c644:	bd70      	pop	{r4, r5, r6, pc}
   1c646:	46c0      	nop			; (mov r8, r8)
   1c648:	ffffe000 	.word	0xffffe000

0001c64c <__smakebuf_r>:
   1c64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c64e:	2602      	movs	r6, #2
   1c650:	898b      	ldrh	r3, [r1, #12]
   1c652:	0005      	movs	r5, r0
   1c654:	000c      	movs	r4, r1
   1c656:	4233      	tst	r3, r6
   1c658:	d006      	beq.n	1c668 <__smakebuf_r+0x1c>
   1c65a:	0023      	movs	r3, r4
   1c65c:	3347      	adds	r3, #71	; 0x47
   1c65e:	6023      	str	r3, [r4, #0]
   1c660:	6123      	str	r3, [r4, #16]
   1c662:	2301      	movs	r3, #1
   1c664:	6163      	str	r3, [r4, #20]
   1c666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1c668:	ab01      	add	r3, sp, #4
   1c66a:	466a      	mov	r2, sp
   1c66c:	f7ff ffc6 	bl	1c5fc <__swhatbuf_r>
   1c670:	9900      	ldr	r1, [sp, #0]
   1c672:	0007      	movs	r7, r0
   1c674:	0028      	movs	r0, r5
   1c676:	f7ff fa8b 	bl	1bb90 <_malloc_r>
   1c67a:	2800      	cmp	r0, #0
   1c67c:	d108      	bne.n	1c690 <__smakebuf_r+0x44>
   1c67e:	220c      	movs	r2, #12
   1c680:	5ea3      	ldrsh	r3, [r4, r2]
   1c682:	059a      	lsls	r2, r3, #22
   1c684:	d4ef      	bmi.n	1c666 <__smakebuf_r+0x1a>
   1c686:	2203      	movs	r2, #3
   1c688:	4393      	bics	r3, r2
   1c68a:	431e      	orrs	r6, r3
   1c68c:	81a6      	strh	r6, [r4, #12]
   1c68e:	e7e4      	b.n	1c65a <__smakebuf_r+0xe>
   1c690:	4b0f      	ldr	r3, [pc, #60]	; (1c6d0 <__smakebuf_r+0x84>)
   1c692:	62ab      	str	r3, [r5, #40]	; 0x28
   1c694:	2380      	movs	r3, #128	; 0x80
   1c696:	89a2      	ldrh	r2, [r4, #12]
   1c698:	6020      	str	r0, [r4, #0]
   1c69a:	4313      	orrs	r3, r2
   1c69c:	81a3      	strh	r3, [r4, #12]
   1c69e:	9b00      	ldr	r3, [sp, #0]
   1c6a0:	6120      	str	r0, [r4, #16]
   1c6a2:	6163      	str	r3, [r4, #20]
   1c6a4:	9b01      	ldr	r3, [sp, #4]
   1c6a6:	2b00      	cmp	r3, #0
   1c6a8:	d00d      	beq.n	1c6c6 <__smakebuf_r+0x7a>
   1c6aa:	230e      	movs	r3, #14
   1c6ac:	5ee1      	ldrsh	r1, [r4, r3]
   1c6ae:	0028      	movs	r0, r5
   1c6b0:	f000 fca0 	bl	1cff4 <_isatty_r>
   1c6b4:	2800      	cmp	r0, #0
   1c6b6:	d006      	beq.n	1c6c6 <__smakebuf_r+0x7a>
   1c6b8:	2203      	movs	r2, #3
   1c6ba:	89a3      	ldrh	r3, [r4, #12]
   1c6bc:	4393      	bics	r3, r2
   1c6be:	001a      	movs	r2, r3
   1c6c0:	2301      	movs	r3, #1
   1c6c2:	4313      	orrs	r3, r2
   1c6c4:	81a3      	strh	r3, [r4, #12]
   1c6c6:	89a0      	ldrh	r0, [r4, #12]
   1c6c8:	4338      	orrs	r0, r7
   1c6ca:	81a0      	strh	r0, [r4, #12]
   1c6cc:	e7cb      	b.n	1c666 <__smakebuf_r+0x1a>
   1c6ce:	46c0      	nop			; (mov r8, r8)
   1c6d0:	0001c425 	.word	0x0001c425

0001c6d4 <__malloc_lock>:
   1c6d4:	4770      	bx	lr

0001c6d6 <__malloc_unlock>:
   1c6d6:	4770      	bx	lr

0001c6d8 <__ssputs_r>:
   1c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6da:	688e      	ldr	r6, [r1, #8]
   1c6dc:	b085      	sub	sp, #20
   1c6de:	0007      	movs	r7, r0
   1c6e0:	000c      	movs	r4, r1
   1c6e2:	9203      	str	r2, [sp, #12]
   1c6e4:	9301      	str	r3, [sp, #4]
   1c6e6:	429e      	cmp	r6, r3
   1c6e8:	d839      	bhi.n	1c75e <__ssputs_r+0x86>
   1c6ea:	2390      	movs	r3, #144	; 0x90
   1c6ec:	898a      	ldrh	r2, [r1, #12]
   1c6ee:	00db      	lsls	r3, r3, #3
   1c6f0:	421a      	tst	r2, r3
   1c6f2:	d034      	beq.n	1c75e <__ssputs_r+0x86>
   1c6f4:	2503      	movs	r5, #3
   1c6f6:	6909      	ldr	r1, [r1, #16]
   1c6f8:	6823      	ldr	r3, [r4, #0]
   1c6fa:	1a5b      	subs	r3, r3, r1
   1c6fc:	9302      	str	r3, [sp, #8]
   1c6fe:	6963      	ldr	r3, [r4, #20]
   1c700:	9802      	ldr	r0, [sp, #8]
   1c702:	435d      	muls	r5, r3
   1c704:	0feb      	lsrs	r3, r5, #31
   1c706:	195d      	adds	r5, r3, r5
   1c708:	9b01      	ldr	r3, [sp, #4]
   1c70a:	106d      	asrs	r5, r5, #1
   1c70c:	3301      	adds	r3, #1
   1c70e:	181b      	adds	r3, r3, r0
   1c710:	42ab      	cmp	r3, r5
   1c712:	d900      	bls.n	1c716 <__ssputs_r+0x3e>
   1c714:	001d      	movs	r5, r3
   1c716:	0553      	lsls	r3, r2, #21
   1c718:	d532      	bpl.n	1c780 <__ssputs_r+0xa8>
   1c71a:	0029      	movs	r1, r5
   1c71c:	0038      	movs	r0, r7
   1c71e:	f7ff fa37 	bl	1bb90 <_malloc_r>
   1c722:	1e06      	subs	r6, r0, #0
   1c724:	d109      	bne.n	1c73a <__ssputs_r+0x62>
   1c726:	230c      	movs	r3, #12
   1c728:	603b      	str	r3, [r7, #0]
   1c72a:	2340      	movs	r3, #64	; 0x40
   1c72c:	2001      	movs	r0, #1
   1c72e:	89a2      	ldrh	r2, [r4, #12]
   1c730:	4240      	negs	r0, r0
   1c732:	4313      	orrs	r3, r2
   1c734:	81a3      	strh	r3, [r4, #12]
   1c736:	b005      	add	sp, #20
   1c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c73a:	9a02      	ldr	r2, [sp, #8]
   1c73c:	6921      	ldr	r1, [r4, #16]
   1c73e:	f7ff f9ba 	bl	1bab6 <memcpy>
   1c742:	89a3      	ldrh	r3, [r4, #12]
   1c744:	4a14      	ldr	r2, [pc, #80]	; (1c798 <__ssputs_r+0xc0>)
   1c746:	401a      	ands	r2, r3
   1c748:	2380      	movs	r3, #128	; 0x80
   1c74a:	4313      	orrs	r3, r2
   1c74c:	81a3      	strh	r3, [r4, #12]
   1c74e:	9b02      	ldr	r3, [sp, #8]
   1c750:	6126      	str	r6, [r4, #16]
   1c752:	18f6      	adds	r6, r6, r3
   1c754:	6026      	str	r6, [r4, #0]
   1c756:	6165      	str	r5, [r4, #20]
   1c758:	9e01      	ldr	r6, [sp, #4]
   1c75a:	1aed      	subs	r5, r5, r3
   1c75c:	60a5      	str	r5, [r4, #8]
   1c75e:	9b01      	ldr	r3, [sp, #4]
   1c760:	42b3      	cmp	r3, r6
   1c762:	d200      	bcs.n	1c766 <__ssputs_r+0x8e>
   1c764:	001e      	movs	r6, r3
   1c766:	0032      	movs	r2, r6
   1c768:	9903      	ldr	r1, [sp, #12]
   1c76a:	6820      	ldr	r0, [r4, #0]
   1c76c:	f7ff f9ac 	bl	1bac8 <memmove>
   1c770:	68a3      	ldr	r3, [r4, #8]
   1c772:	2000      	movs	r0, #0
   1c774:	1b9b      	subs	r3, r3, r6
   1c776:	60a3      	str	r3, [r4, #8]
   1c778:	6823      	ldr	r3, [r4, #0]
   1c77a:	199e      	adds	r6, r3, r6
   1c77c:	6026      	str	r6, [r4, #0]
   1c77e:	e7da      	b.n	1c736 <__ssputs_r+0x5e>
   1c780:	002a      	movs	r2, r5
   1c782:	0038      	movs	r0, r7
   1c784:	f000 fc53 	bl	1d02e <_realloc_r>
   1c788:	1e06      	subs	r6, r0, #0
   1c78a:	d1e0      	bne.n	1c74e <__ssputs_r+0x76>
   1c78c:	6921      	ldr	r1, [r4, #16]
   1c78e:	0038      	movs	r0, r7
   1c790:	f7ff f9b4 	bl	1bafc <_free_r>
   1c794:	e7c7      	b.n	1c726 <__ssputs_r+0x4e>
   1c796:	46c0      	nop			; (mov r8, r8)
   1c798:	fffffb7f 	.word	0xfffffb7f

0001c79c <_svfiprintf_r>:
   1c79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c79e:	b09f      	sub	sp, #124	; 0x7c
   1c7a0:	9002      	str	r0, [sp, #8]
   1c7a2:	9305      	str	r3, [sp, #20]
   1c7a4:	898b      	ldrh	r3, [r1, #12]
   1c7a6:	000f      	movs	r7, r1
   1c7a8:	0016      	movs	r6, r2
   1c7aa:	061b      	lsls	r3, r3, #24
   1c7ac:	d511      	bpl.n	1c7d2 <_svfiprintf_r+0x36>
   1c7ae:	690b      	ldr	r3, [r1, #16]
   1c7b0:	2b00      	cmp	r3, #0
   1c7b2:	d10e      	bne.n	1c7d2 <_svfiprintf_r+0x36>
   1c7b4:	2140      	movs	r1, #64	; 0x40
   1c7b6:	f7ff f9eb 	bl	1bb90 <_malloc_r>
   1c7ba:	6038      	str	r0, [r7, #0]
   1c7bc:	6138      	str	r0, [r7, #16]
   1c7be:	2800      	cmp	r0, #0
   1c7c0:	d105      	bne.n	1c7ce <_svfiprintf_r+0x32>
   1c7c2:	230c      	movs	r3, #12
   1c7c4:	9a02      	ldr	r2, [sp, #8]
   1c7c6:	3801      	subs	r0, #1
   1c7c8:	6013      	str	r3, [r2, #0]
   1c7ca:	b01f      	add	sp, #124	; 0x7c
   1c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7ce:	2340      	movs	r3, #64	; 0x40
   1c7d0:	617b      	str	r3, [r7, #20]
   1c7d2:	2300      	movs	r3, #0
   1c7d4:	ad06      	add	r5, sp, #24
   1c7d6:	616b      	str	r3, [r5, #20]
   1c7d8:	3320      	adds	r3, #32
   1c7da:	766b      	strb	r3, [r5, #25]
   1c7dc:	3310      	adds	r3, #16
   1c7de:	76ab      	strb	r3, [r5, #26]
   1c7e0:	0034      	movs	r4, r6
   1c7e2:	7823      	ldrb	r3, [r4, #0]
   1c7e4:	2b00      	cmp	r3, #0
   1c7e6:	d147      	bne.n	1c878 <_svfiprintf_r+0xdc>
   1c7e8:	1ba3      	subs	r3, r4, r6
   1c7ea:	9304      	str	r3, [sp, #16]
   1c7ec:	d00d      	beq.n	1c80a <_svfiprintf_r+0x6e>
   1c7ee:	1ba3      	subs	r3, r4, r6
   1c7f0:	0032      	movs	r2, r6
   1c7f2:	0039      	movs	r1, r7
   1c7f4:	9802      	ldr	r0, [sp, #8]
   1c7f6:	f7ff ff6f 	bl	1c6d8 <__ssputs_r>
   1c7fa:	1c43      	adds	r3, r0, #1
   1c7fc:	d100      	bne.n	1c800 <_svfiprintf_r+0x64>
   1c7fe:	e0b5      	b.n	1c96c <_svfiprintf_r+0x1d0>
   1c800:	696a      	ldr	r2, [r5, #20]
   1c802:	9b04      	ldr	r3, [sp, #16]
   1c804:	4694      	mov	ip, r2
   1c806:	4463      	add	r3, ip
   1c808:	616b      	str	r3, [r5, #20]
   1c80a:	7823      	ldrb	r3, [r4, #0]
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	d100      	bne.n	1c812 <_svfiprintf_r+0x76>
   1c810:	e0ac      	b.n	1c96c <_svfiprintf_r+0x1d0>
   1c812:	2201      	movs	r2, #1
   1c814:	2300      	movs	r3, #0
   1c816:	4252      	negs	r2, r2
   1c818:	606a      	str	r2, [r5, #4]
   1c81a:	a902      	add	r1, sp, #8
   1c81c:	3254      	adds	r2, #84	; 0x54
   1c81e:	1852      	adds	r2, r2, r1
   1c820:	3401      	adds	r4, #1
   1c822:	602b      	str	r3, [r5, #0]
   1c824:	60eb      	str	r3, [r5, #12]
   1c826:	60ab      	str	r3, [r5, #8]
   1c828:	7013      	strb	r3, [r2, #0]
   1c82a:	65ab      	str	r3, [r5, #88]	; 0x58
   1c82c:	4e58      	ldr	r6, [pc, #352]	; (1c990 <_svfiprintf_r+0x1f4>)
   1c82e:	2205      	movs	r2, #5
   1c830:	7821      	ldrb	r1, [r4, #0]
   1c832:	0030      	movs	r0, r6
   1c834:	f000 fbf0 	bl	1d018 <memchr>
   1c838:	1c62      	adds	r2, r4, #1
   1c83a:	2800      	cmp	r0, #0
   1c83c:	d120      	bne.n	1c880 <_svfiprintf_r+0xe4>
   1c83e:	6829      	ldr	r1, [r5, #0]
   1c840:	06cb      	lsls	r3, r1, #27
   1c842:	d504      	bpl.n	1c84e <_svfiprintf_r+0xb2>
   1c844:	2353      	movs	r3, #83	; 0x53
   1c846:	ae02      	add	r6, sp, #8
   1c848:	3020      	adds	r0, #32
   1c84a:	199b      	adds	r3, r3, r6
   1c84c:	7018      	strb	r0, [r3, #0]
   1c84e:	070b      	lsls	r3, r1, #28
   1c850:	d504      	bpl.n	1c85c <_svfiprintf_r+0xc0>
   1c852:	2353      	movs	r3, #83	; 0x53
   1c854:	202b      	movs	r0, #43	; 0x2b
   1c856:	ae02      	add	r6, sp, #8
   1c858:	199b      	adds	r3, r3, r6
   1c85a:	7018      	strb	r0, [r3, #0]
   1c85c:	7823      	ldrb	r3, [r4, #0]
   1c85e:	2b2a      	cmp	r3, #42	; 0x2a
   1c860:	d016      	beq.n	1c890 <_svfiprintf_r+0xf4>
   1c862:	2000      	movs	r0, #0
   1c864:	210a      	movs	r1, #10
   1c866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c868:	7822      	ldrb	r2, [r4, #0]
   1c86a:	3a30      	subs	r2, #48	; 0x30
   1c86c:	2a09      	cmp	r2, #9
   1c86e:	d955      	bls.n	1c91c <_svfiprintf_r+0x180>
   1c870:	2800      	cmp	r0, #0
   1c872:	d015      	beq.n	1c8a0 <_svfiprintf_r+0x104>
   1c874:	9309      	str	r3, [sp, #36]	; 0x24
   1c876:	e013      	b.n	1c8a0 <_svfiprintf_r+0x104>
   1c878:	2b25      	cmp	r3, #37	; 0x25
   1c87a:	d0b5      	beq.n	1c7e8 <_svfiprintf_r+0x4c>
   1c87c:	3401      	adds	r4, #1
   1c87e:	e7b0      	b.n	1c7e2 <_svfiprintf_r+0x46>
   1c880:	2301      	movs	r3, #1
   1c882:	1b80      	subs	r0, r0, r6
   1c884:	4083      	lsls	r3, r0
   1c886:	6829      	ldr	r1, [r5, #0]
   1c888:	0014      	movs	r4, r2
   1c88a:	430b      	orrs	r3, r1
   1c88c:	602b      	str	r3, [r5, #0]
   1c88e:	e7cd      	b.n	1c82c <_svfiprintf_r+0x90>
   1c890:	9b05      	ldr	r3, [sp, #20]
   1c892:	1d18      	adds	r0, r3, #4
   1c894:	681b      	ldr	r3, [r3, #0]
   1c896:	9005      	str	r0, [sp, #20]
   1c898:	2b00      	cmp	r3, #0
   1c89a:	db39      	blt.n	1c910 <_svfiprintf_r+0x174>
   1c89c:	9309      	str	r3, [sp, #36]	; 0x24
   1c89e:	0014      	movs	r4, r2
   1c8a0:	7823      	ldrb	r3, [r4, #0]
   1c8a2:	2b2e      	cmp	r3, #46	; 0x2e
   1c8a4:	d10b      	bne.n	1c8be <_svfiprintf_r+0x122>
   1c8a6:	7863      	ldrb	r3, [r4, #1]
   1c8a8:	1c62      	adds	r2, r4, #1
   1c8aa:	2b2a      	cmp	r3, #42	; 0x2a
   1c8ac:	d13e      	bne.n	1c92c <_svfiprintf_r+0x190>
   1c8ae:	9b05      	ldr	r3, [sp, #20]
   1c8b0:	3402      	adds	r4, #2
   1c8b2:	1d1a      	adds	r2, r3, #4
   1c8b4:	681b      	ldr	r3, [r3, #0]
   1c8b6:	9205      	str	r2, [sp, #20]
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	db34      	blt.n	1c926 <_svfiprintf_r+0x18a>
   1c8bc:	9307      	str	r3, [sp, #28]
   1c8be:	4e35      	ldr	r6, [pc, #212]	; (1c994 <_svfiprintf_r+0x1f8>)
   1c8c0:	7821      	ldrb	r1, [r4, #0]
   1c8c2:	2203      	movs	r2, #3
   1c8c4:	0030      	movs	r0, r6
   1c8c6:	f000 fba7 	bl	1d018 <memchr>
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	d006      	beq.n	1c8dc <_svfiprintf_r+0x140>
   1c8ce:	2340      	movs	r3, #64	; 0x40
   1c8d0:	1b80      	subs	r0, r0, r6
   1c8d2:	4083      	lsls	r3, r0
   1c8d4:	682a      	ldr	r2, [r5, #0]
   1c8d6:	3401      	adds	r4, #1
   1c8d8:	4313      	orrs	r3, r2
   1c8da:	602b      	str	r3, [r5, #0]
   1c8dc:	7821      	ldrb	r1, [r4, #0]
   1c8de:	2206      	movs	r2, #6
   1c8e0:	482d      	ldr	r0, [pc, #180]	; (1c998 <_svfiprintf_r+0x1fc>)
   1c8e2:	1c66      	adds	r6, r4, #1
   1c8e4:	7629      	strb	r1, [r5, #24]
   1c8e6:	f000 fb97 	bl	1d018 <memchr>
   1c8ea:	2800      	cmp	r0, #0
   1c8ec:	d046      	beq.n	1c97c <_svfiprintf_r+0x1e0>
   1c8ee:	4b2b      	ldr	r3, [pc, #172]	; (1c99c <_svfiprintf_r+0x200>)
   1c8f0:	2b00      	cmp	r3, #0
   1c8f2:	d12f      	bne.n	1c954 <_svfiprintf_r+0x1b8>
   1c8f4:	6829      	ldr	r1, [r5, #0]
   1c8f6:	9b05      	ldr	r3, [sp, #20]
   1c8f8:	2207      	movs	r2, #7
   1c8fa:	05c9      	lsls	r1, r1, #23
   1c8fc:	d528      	bpl.n	1c950 <_svfiprintf_r+0x1b4>
   1c8fe:	189b      	adds	r3, r3, r2
   1c900:	4393      	bics	r3, r2
   1c902:	3308      	adds	r3, #8
   1c904:	9305      	str	r3, [sp, #20]
   1c906:	696b      	ldr	r3, [r5, #20]
   1c908:	9a03      	ldr	r2, [sp, #12]
   1c90a:	189b      	adds	r3, r3, r2
   1c90c:	616b      	str	r3, [r5, #20]
   1c90e:	e767      	b.n	1c7e0 <_svfiprintf_r+0x44>
   1c910:	425b      	negs	r3, r3
   1c912:	60eb      	str	r3, [r5, #12]
   1c914:	2302      	movs	r3, #2
   1c916:	430b      	orrs	r3, r1
   1c918:	602b      	str	r3, [r5, #0]
   1c91a:	e7c0      	b.n	1c89e <_svfiprintf_r+0x102>
   1c91c:	434b      	muls	r3, r1
   1c91e:	3401      	adds	r4, #1
   1c920:	189b      	adds	r3, r3, r2
   1c922:	2001      	movs	r0, #1
   1c924:	e7a0      	b.n	1c868 <_svfiprintf_r+0xcc>
   1c926:	2301      	movs	r3, #1
   1c928:	425b      	negs	r3, r3
   1c92a:	e7c7      	b.n	1c8bc <_svfiprintf_r+0x120>
   1c92c:	2300      	movs	r3, #0
   1c92e:	0014      	movs	r4, r2
   1c930:	200a      	movs	r0, #10
   1c932:	001a      	movs	r2, r3
   1c934:	606b      	str	r3, [r5, #4]
   1c936:	7821      	ldrb	r1, [r4, #0]
   1c938:	3930      	subs	r1, #48	; 0x30
   1c93a:	2909      	cmp	r1, #9
   1c93c:	d903      	bls.n	1c946 <_svfiprintf_r+0x1aa>
   1c93e:	2b00      	cmp	r3, #0
   1c940:	d0bd      	beq.n	1c8be <_svfiprintf_r+0x122>
   1c942:	9207      	str	r2, [sp, #28]
   1c944:	e7bb      	b.n	1c8be <_svfiprintf_r+0x122>
   1c946:	4342      	muls	r2, r0
   1c948:	3401      	adds	r4, #1
   1c94a:	1852      	adds	r2, r2, r1
   1c94c:	2301      	movs	r3, #1
   1c94e:	e7f2      	b.n	1c936 <_svfiprintf_r+0x19a>
   1c950:	3307      	adds	r3, #7
   1c952:	e7d5      	b.n	1c900 <_svfiprintf_r+0x164>
   1c954:	ab05      	add	r3, sp, #20
   1c956:	9300      	str	r3, [sp, #0]
   1c958:	003a      	movs	r2, r7
   1c95a:	4b11      	ldr	r3, [pc, #68]	; (1c9a0 <_svfiprintf_r+0x204>)
   1c95c:	0029      	movs	r1, r5
   1c95e:	9802      	ldr	r0, [sp, #8]
   1c960:	e000      	b.n	1c964 <_svfiprintf_r+0x1c8>
   1c962:	bf00      	nop
   1c964:	9003      	str	r0, [sp, #12]
   1c966:	9b03      	ldr	r3, [sp, #12]
   1c968:	3301      	adds	r3, #1
   1c96a:	d1cc      	bne.n	1c906 <_svfiprintf_r+0x16a>
   1c96c:	89bb      	ldrh	r3, [r7, #12]
   1c96e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c970:	065b      	lsls	r3, r3, #25
   1c972:	d400      	bmi.n	1c976 <_svfiprintf_r+0x1da>
   1c974:	e729      	b.n	1c7ca <_svfiprintf_r+0x2e>
   1c976:	2001      	movs	r0, #1
   1c978:	4240      	negs	r0, r0
   1c97a:	e726      	b.n	1c7ca <_svfiprintf_r+0x2e>
   1c97c:	ab05      	add	r3, sp, #20
   1c97e:	9300      	str	r3, [sp, #0]
   1c980:	003a      	movs	r2, r7
   1c982:	4b07      	ldr	r3, [pc, #28]	; (1c9a0 <_svfiprintf_r+0x204>)
   1c984:	0029      	movs	r1, r5
   1c986:	9802      	ldr	r0, [sp, #8]
   1c988:	f000 f9be 	bl	1cd08 <_printf_i>
   1c98c:	e7ea      	b.n	1c964 <_svfiprintf_r+0x1c8>
   1c98e:	46c0      	nop			; (mov r8, r8)
   1c990:	0001f4ac 	.word	0x0001f4ac
   1c994:	0001f4b2 	.word	0x0001f4b2
   1c998:	0001f4b6 	.word	0x0001f4b6
   1c99c:	00000000 	.word	0x00000000
   1c9a0:	0001c6d9 	.word	0x0001c6d9

0001c9a4 <__sfputc_r>:
   1c9a4:	6893      	ldr	r3, [r2, #8]
   1c9a6:	b510      	push	{r4, lr}
   1c9a8:	3b01      	subs	r3, #1
   1c9aa:	6093      	str	r3, [r2, #8]
   1c9ac:	2b00      	cmp	r3, #0
   1c9ae:	da05      	bge.n	1c9bc <__sfputc_r+0x18>
   1c9b0:	6994      	ldr	r4, [r2, #24]
   1c9b2:	42a3      	cmp	r3, r4
   1c9b4:	db08      	blt.n	1c9c8 <__sfputc_r+0x24>
   1c9b6:	b2cb      	uxtb	r3, r1
   1c9b8:	2b0a      	cmp	r3, #10
   1c9ba:	d005      	beq.n	1c9c8 <__sfputc_r+0x24>
   1c9bc:	6813      	ldr	r3, [r2, #0]
   1c9be:	1c58      	adds	r0, r3, #1
   1c9c0:	6010      	str	r0, [r2, #0]
   1c9c2:	7019      	strb	r1, [r3, #0]
   1c9c4:	b2c8      	uxtb	r0, r1
   1c9c6:	bd10      	pop	{r4, pc}
   1c9c8:	f7ff fb84 	bl	1c0d4 <__swbuf_r>
   1c9cc:	e7fb      	b.n	1c9c6 <__sfputc_r+0x22>

0001c9ce <__sfputs_r>:
   1c9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9d0:	0006      	movs	r6, r0
   1c9d2:	000f      	movs	r7, r1
   1c9d4:	0014      	movs	r4, r2
   1c9d6:	18d5      	adds	r5, r2, r3
   1c9d8:	42ac      	cmp	r4, r5
   1c9da:	d101      	bne.n	1c9e0 <__sfputs_r+0x12>
   1c9dc:	2000      	movs	r0, #0
   1c9de:	e007      	b.n	1c9f0 <__sfputs_r+0x22>
   1c9e0:	7821      	ldrb	r1, [r4, #0]
   1c9e2:	003a      	movs	r2, r7
   1c9e4:	0030      	movs	r0, r6
   1c9e6:	f7ff ffdd 	bl	1c9a4 <__sfputc_r>
   1c9ea:	3401      	adds	r4, #1
   1c9ec:	1c43      	adds	r3, r0, #1
   1c9ee:	d1f3      	bne.n	1c9d8 <__sfputs_r+0xa>
   1c9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001c9f4 <_vfiprintf_r>:
   1c9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9f6:	b09f      	sub	sp, #124	; 0x7c
   1c9f8:	0006      	movs	r6, r0
   1c9fa:	000f      	movs	r7, r1
   1c9fc:	0014      	movs	r4, r2
   1c9fe:	9305      	str	r3, [sp, #20]
   1ca00:	2800      	cmp	r0, #0
   1ca02:	d004      	beq.n	1ca0e <_vfiprintf_r+0x1a>
   1ca04:	6983      	ldr	r3, [r0, #24]
   1ca06:	2b00      	cmp	r3, #0
   1ca08:	d101      	bne.n	1ca0e <_vfiprintf_r+0x1a>
   1ca0a:	f7ff fd4d 	bl	1c4a8 <__sinit>
   1ca0e:	4b7f      	ldr	r3, [pc, #508]	; (1cc0c <_vfiprintf_r+0x218>)
   1ca10:	429f      	cmp	r7, r3
   1ca12:	d15c      	bne.n	1cace <_vfiprintf_r+0xda>
   1ca14:	6877      	ldr	r7, [r6, #4]
   1ca16:	89bb      	ldrh	r3, [r7, #12]
   1ca18:	071b      	lsls	r3, r3, #28
   1ca1a:	d562      	bpl.n	1cae2 <_vfiprintf_r+0xee>
   1ca1c:	693b      	ldr	r3, [r7, #16]
   1ca1e:	2b00      	cmp	r3, #0
   1ca20:	d05f      	beq.n	1cae2 <_vfiprintf_r+0xee>
   1ca22:	2300      	movs	r3, #0
   1ca24:	ad06      	add	r5, sp, #24
   1ca26:	616b      	str	r3, [r5, #20]
   1ca28:	3320      	adds	r3, #32
   1ca2a:	766b      	strb	r3, [r5, #25]
   1ca2c:	3310      	adds	r3, #16
   1ca2e:	76ab      	strb	r3, [r5, #26]
   1ca30:	9402      	str	r4, [sp, #8]
   1ca32:	9c02      	ldr	r4, [sp, #8]
   1ca34:	7823      	ldrb	r3, [r4, #0]
   1ca36:	2b00      	cmp	r3, #0
   1ca38:	d15d      	bne.n	1caf6 <_vfiprintf_r+0x102>
   1ca3a:	9b02      	ldr	r3, [sp, #8]
   1ca3c:	1ae3      	subs	r3, r4, r3
   1ca3e:	9304      	str	r3, [sp, #16]
   1ca40:	d00d      	beq.n	1ca5e <_vfiprintf_r+0x6a>
   1ca42:	9b04      	ldr	r3, [sp, #16]
   1ca44:	9a02      	ldr	r2, [sp, #8]
   1ca46:	0039      	movs	r1, r7
   1ca48:	0030      	movs	r0, r6
   1ca4a:	f7ff ffc0 	bl	1c9ce <__sfputs_r>
   1ca4e:	1c43      	adds	r3, r0, #1
   1ca50:	d100      	bne.n	1ca54 <_vfiprintf_r+0x60>
   1ca52:	e0cc      	b.n	1cbee <_vfiprintf_r+0x1fa>
   1ca54:	696a      	ldr	r2, [r5, #20]
   1ca56:	9b04      	ldr	r3, [sp, #16]
   1ca58:	4694      	mov	ip, r2
   1ca5a:	4463      	add	r3, ip
   1ca5c:	616b      	str	r3, [r5, #20]
   1ca5e:	7823      	ldrb	r3, [r4, #0]
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d100      	bne.n	1ca66 <_vfiprintf_r+0x72>
   1ca64:	e0c3      	b.n	1cbee <_vfiprintf_r+0x1fa>
   1ca66:	2201      	movs	r2, #1
   1ca68:	2300      	movs	r3, #0
   1ca6a:	4252      	negs	r2, r2
   1ca6c:	606a      	str	r2, [r5, #4]
   1ca6e:	a902      	add	r1, sp, #8
   1ca70:	3254      	adds	r2, #84	; 0x54
   1ca72:	1852      	adds	r2, r2, r1
   1ca74:	3401      	adds	r4, #1
   1ca76:	602b      	str	r3, [r5, #0]
   1ca78:	60eb      	str	r3, [r5, #12]
   1ca7a:	60ab      	str	r3, [r5, #8]
   1ca7c:	7013      	strb	r3, [r2, #0]
   1ca7e:	65ab      	str	r3, [r5, #88]	; 0x58
   1ca80:	7821      	ldrb	r1, [r4, #0]
   1ca82:	2205      	movs	r2, #5
   1ca84:	4862      	ldr	r0, [pc, #392]	; (1cc10 <_vfiprintf_r+0x21c>)
   1ca86:	f000 fac7 	bl	1d018 <memchr>
   1ca8a:	1c63      	adds	r3, r4, #1
   1ca8c:	469c      	mov	ip, r3
   1ca8e:	2800      	cmp	r0, #0
   1ca90:	d135      	bne.n	1cafe <_vfiprintf_r+0x10a>
   1ca92:	6829      	ldr	r1, [r5, #0]
   1ca94:	06cb      	lsls	r3, r1, #27
   1ca96:	d504      	bpl.n	1caa2 <_vfiprintf_r+0xae>
   1ca98:	2353      	movs	r3, #83	; 0x53
   1ca9a:	aa02      	add	r2, sp, #8
   1ca9c:	3020      	adds	r0, #32
   1ca9e:	189b      	adds	r3, r3, r2
   1caa0:	7018      	strb	r0, [r3, #0]
   1caa2:	070b      	lsls	r3, r1, #28
   1caa4:	d504      	bpl.n	1cab0 <_vfiprintf_r+0xbc>
   1caa6:	2353      	movs	r3, #83	; 0x53
   1caa8:	202b      	movs	r0, #43	; 0x2b
   1caaa:	aa02      	add	r2, sp, #8
   1caac:	189b      	adds	r3, r3, r2
   1caae:	7018      	strb	r0, [r3, #0]
   1cab0:	7823      	ldrb	r3, [r4, #0]
   1cab2:	2b2a      	cmp	r3, #42	; 0x2a
   1cab4:	d02c      	beq.n	1cb10 <_vfiprintf_r+0x11c>
   1cab6:	2000      	movs	r0, #0
   1cab8:	210a      	movs	r1, #10
   1caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cabc:	7822      	ldrb	r2, [r4, #0]
   1cabe:	3a30      	subs	r2, #48	; 0x30
   1cac0:	2a09      	cmp	r2, #9
   1cac2:	d800      	bhi.n	1cac6 <_vfiprintf_r+0xd2>
   1cac4:	e06b      	b.n	1cb9e <_vfiprintf_r+0x1aa>
   1cac6:	2800      	cmp	r0, #0
   1cac8:	d02a      	beq.n	1cb20 <_vfiprintf_r+0x12c>
   1caca:	9309      	str	r3, [sp, #36]	; 0x24
   1cacc:	e028      	b.n	1cb20 <_vfiprintf_r+0x12c>
   1cace:	4b51      	ldr	r3, [pc, #324]	; (1cc14 <_vfiprintf_r+0x220>)
   1cad0:	429f      	cmp	r7, r3
   1cad2:	d101      	bne.n	1cad8 <_vfiprintf_r+0xe4>
   1cad4:	68b7      	ldr	r7, [r6, #8]
   1cad6:	e79e      	b.n	1ca16 <_vfiprintf_r+0x22>
   1cad8:	4b4f      	ldr	r3, [pc, #316]	; (1cc18 <_vfiprintf_r+0x224>)
   1cada:	429f      	cmp	r7, r3
   1cadc:	d19b      	bne.n	1ca16 <_vfiprintf_r+0x22>
   1cade:	68f7      	ldr	r7, [r6, #12]
   1cae0:	e799      	b.n	1ca16 <_vfiprintf_r+0x22>
   1cae2:	0039      	movs	r1, r7
   1cae4:	0030      	movs	r0, r6
   1cae6:	f7ff fb5f 	bl	1c1a8 <__swsetup_r>
   1caea:	2800      	cmp	r0, #0
   1caec:	d099      	beq.n	1ca22 <_vfiprintf_r+0x2e>
   1caee:	2001      	movs	r0, #1
   1caf0:	4240      	negs	r0, r0
   1caf2:	b01f      	add	sp, #124	; 0x7c
   1caf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1caf6:	2b25      	cmp	r3, #37	; 0x25
   1caf8:	d09f      	beq.n	1ca3a <_vfiprintf_r+0x46>
   1cafa:	3401      	adds	r4, #1
   1cafc:	e79a      	b.n	1ca34 <_vfiprintf_r+0x40>
   1cafe:	4b44      	ldr	r3, [pc, #272]	; (1cc10 <_vfiprintf_r+0x21c>)
   1cb00:	6829      	ldr	r1, [r5, #0]
   1cb02:	1ac0      	subs	r0, r0, r3
   1cb04:	2301      	movs	r3, #1
   1cb06:	4083      	lsls	r3, r0
   1cb08:	430b      	orrs	r3, r1
   1cb0a:	602b      	str	r3, [r5, #0]
   1cb0c:	4664      	mov	r4, ip
   1cb0e:	e7b7      	b.n	1ca80 <_vfiprintf_r+0x8c>
   1cb10:	9b05      	ldr	r3, [sp, #20]
   1cb12:	1d18      	adds	r0, r3, #4
   1cb14:	681b      	ldr	r3, [r3, #0]
   1cb16:	9005      	str	r0, [sp, #20]
   1cb18:	2b00      	cmp	r3, #0
   1cb1a:	db3a      	blt.n	1cb92 <_vfiprintf_r+0x19e>
   1cb1c:	9309      	str	r3, [sp, #36]	; 0x24
   1cb1e:	4664      	mov	r4, ip
   1cb20:	7823      	ldrb	r3, [r4, #0]
   1cb22:	2b2e      	cmp	r3, #46	; 0x2e
   1cb24:	d10b      	bne.n	1cb3e <_vfiprintf_r+0x14a>
   1cb26:	7863      	ldrb	r3, [r4, #1]
   1cb28:	1c62      	adds	r2, r4, #1
   1cb2a:	2b2a      	cmp	r3, #42	; 0x2a
   1cb2c:	d13f      	bne.n	1cbae <_vfiprintf_r+0x1ba>
   1cb2e:	9b05      	ldr	r3, [sp, #20]
   1cb30:	3402      	adds	r4, #2
   1cb32:	1d1a      	adds	r2, r3, #4
   1cb34:	681b      	ldr	r3, [r3, #0]
   1cb36:	9205      	str	r2, [sp, #20]
   1cb38:	2b00      	cmp	r3, #0
   1cb3a:	db35      	blt.n	1cba8 <_vfiprintf_r+0x1b4>
   1cb3c:	9307      	str	r3, [sp, #28]
   1cb3e:	7821      	ldrb	r1, [r4, #0]
   1cb40:	2203      	movs	r2, #3
   1cb42:	4836      	ldr	r0, [pc, #216]	; (1cc1c <_vfiprintf_r+0x228>)
   1cb44:	f000 fa68 	bl	1d018 <memchr>
   1cb48:	2800      	cmp	r0, #0
   1cb4a:	d007      	beq.n	1cb5c <_vfiprintf_r+0x168>
   1cb4c:	4b33      	ldr	r3, [pc, #204]	; (1cc1c <_vfiprintf_r+0x228>)
   1cb4e:	682a      	ldr	r2, [r5, #0]
   1cb50:	1ac0      	subs	r0, r0, r3
   1cb52:	2340      	movs	r3, #64	; 0x40
   1cb54:	4083      	lsls	r3, r0
   1cb56:	4313      	orrs	r3, r2
   1cb58:	602b      	str	r3, [r5, #0]
   1cb5a:	3401      	adds	r4, #1
   1cb5c:	7821      	ldrb	r1, [r4, #0]
   1cb5e:	1c63      	adds	r3, r4, #1
   1cb60:	2206      	movs	r2, #6
   1cb62:	482f      	ldr	r0, [pc, #188]	; (1cc20 <_vfiprintf_r+0x22c>)
   1cb64:	9302      	str	r3, [sp, #8]
   1cb66:	7629      	strb	r1, [r5, #24]
   1cb68:	f000 fa56 	bl	1d018 <memchr>
   1cb6c:	2800      	cmp	r0, #0
   1cb6e:	d044      	beq.n	1cbfa <_vfiprintf_r+0x206>
   1cb70:	4b2c      	ldr	r3, [pc, #176]	; (1cc24 <_vfiprintf_r+0x230>)
   1cb72:	2b00      	cmp	r3, #0
   1cb74:	d12f      	bne.n	1cbd6 <_vfiprintf_r+0x1e2>
   1cb76:	6829      	ldr	r1, [r5, #0]
   1cb78:	9b05      	ldr	r3, [sp, #20]
   1cb7a:	2207      	movs	r2, #7
   1cb7c:	05c9      	lsls	r1, r1, #23
   1cb7e:	d528      	bpl.n	1cbd2 <_vfiprintf_r+0x1de>
   1cb80:	189b      	adds	r3, r3, r2
   1cb82:	4393      	bics	r3, r2
   1cb84:	3308      	adds	r3, #8
   1cb86:	9305      	str	r3, [sp, #20]
   1cb88:	696b      	ldr	r3, [r5, #20]
   1cb8a:	9a03      	ldr	r2, [sp, #12]
   1cb8c:	189b      	adds	r3, r3, r2
   1cb8e:	616b      	str	r3, [r5, #20]
   1cb90:	e74f      	b.n	1ca32 <_vfiprintf_r+0x3e>
   1cb92:	425b      	negs	r3, r3
   1cb94:	60eb      	str	r3, [r5, #12]
   1cb96:	2302      	movs	r3, #2
   1cb98:	430b      	orrs	r3, r1
   1cb9a:	602b      	str	r3, [r5, #0]
   1cb9c:	e7bf      	b.n	1cb1e <_vfiprintf_r+0x12a>
   1cb9e:	434b      	muls	r3, r1
   1cba0:	3401      	adds	r4, #1
   1cba2:	189b      	adds	r3, r3, r2
   1cba4:	2001      	movs	r0, #1
   1cba6:	e789      	b.n	1cabc <_vfiprintf_r+0xc8>
   1cba8:	2301      	movs	r3, #1
   1cbaa:	425b      	negs	r3, r3
   1cbac:	e7c6      	b.n	1cb3c <_vfiprintf_r+0x148>
   1cbae:	2300      	movs	r3, #0
   1cbb0:	0014      	movs	r4, r2
   1cbb2:	200a      	movs	r0, #10
   1cbb4:	001a      	movs	r2, r3
   1cbb6:	606b      	str	r3, [r5, #4]
   1cbb8:	7821      	ldrb	r1, [r4, #0]
   1cbba:	3930      	subs	r1, #48	; 0x30
   1cbbc:	2909      	cmp	r1, #9
   1cbbe:	d903      	bls.n	1cbc8 <_vfiprintf_r+0x1d4>
   1cbc0:	2b00      	cmp	r3, #0
   1cbc2:	d0bc      	beq.n	1cb3e <_vfiprintf_r+0x14a>
   1cbc4:	9207      	str	r2, [sp, #28]
   1cbc6:	e7ba      	b.n	1cb3e <_vfiprintf_r+0x14a>
   1cbc8:	4342      	muls	r2, r0
   1cbca:	3401      	adds	r4, #1
   1cbcc:	1852      	adds	r2, r2, r1
   1cbce:	2301      	movs	r3, #1
   1cbd0:	e7f2      	b.n	1cbb8 <_vfiprintf_r+0x1c4>
   1cbd2:	3307      	adds	r3, #7
   1cbd4:	e7d5      	b.n	1cb82 <_vfiprintf_r+0x18e>
   1cbd6:	ab05      	add	r3, sp, #20
   1cbd8:	9300      	str	r3, [sp, #0]
   1cbda:	003a      	movs	r2, r7
   1cbdc:	4b12      	ldr	r3, [pc, #72]	; (1cc28 <_vfiprintf_r+0x234>)
   1cbde:	0029      	movs	r1, r5
   1cbe0:	0030      	movs	r0, r6
   1cbe2:	e000      	b.n	1cbe6 <_vfiprintf_r+0x1f2>
   1cbe4:	bf00      	nop
   1cbe6:	9003      	str	r0, [sp, #12]
   1cbe8:	9b03      	ldr	r3, [sp, #12]
   1cbea:	3301      	adds	r3, #1
   1cbec:	d1cc      	bne.n	1cb88 <_vfiprintf_r+0x194>
   1cbee:	89bb      	ldrh	r3, [r7, #12]
   1cbf0:	065b      	lsls	r3, r3, #25
   1cbf2:	d500      	bpl.n	1cbf6 <_vfiprintf_r+0x202>
   1cbf4:	e77b      	b.n	1caee <_vfiprintf_r+0xfa>
   1cbf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cbf8:	e77b      	b.n	1caf2 <_vfiprintf_r+0xfe>
   1cbfa:	ab05      	add	r3, sp, #20
   1cbfc:	9300      	str	r3, [sp, #0]
   1cbfe:	003a      	movs	r2, r7
   1cc00:	4b09      	ldr	r3, [pc, #36]	; (1cc28 <_vfiprintf_r+0x234>)
   1cc02:	0029      	movs	r1, r5
   1cc04:	0030      	movs	r0, r6
   1cc06:	f000 f87f 	bl	1cd08 <_printf_i>
   1cc0a:	e7ec      	b.n	1cbe6 <_vfiprintf_r+0x1f2>
   1cc0c:	0001f46c 	.word	0x0001f46c
   1cc10:	0001f4ac 	.word	0x0001f4ac
   1cc14:	0001f48c 	.word	0x0001f48c
   1cc18:	0001f44c 	.word	0x0001f44c
   1cc1c:	0001f4b2 	.word	0x0001f4b2
   1cc20:	0001f4b6 	.word	0x0001f4b6
   1cc24:	00000000 	.word	0x00000000
   1cc28:	0001c9cf 	.word	0x0001c9cf

0001cc2c <_printf_common>:
   1cc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cc2e:	0015      	movs	r5, r2
   1cc30:	9301      	str	r3, [sp, #4]
   1cc32:	688a      	ldr	r2, [r1, #8]
   1cc34:	690b      	ldr	r3, [r1, #16]
   1cc36:	9000      	str	r0, [sp, #0]
   1cc38:	000c      	movs	r4, r1
   1cc3a:	4293      	cmp	r3, r2
   1cc3c:	da00      	bge.n	1cc40 <_printf_common+0x14>
   1cc3e:	0013      	movs	r3, r2
   1cc40:	0022      	movs	r2, r4
   1cc42:	602b      	str	r3, [r5, #0]
   1cc44:	3243      	adds	r2, #67	; 0x43
   1cc46:	7812      	ldrb	r2, [r2, #0]
   1cc48:	2a00      	cmp	r2, #0
   1cc4a:	d001      	beq.n	1cc50 <_printf_common+0x24>
   1cc4c:	3301      	adds	r3, #1
   1cc4e:	602b      	str	r3, [r5, #0]
   1cc50:	6823      	ldr	r3, [r4, #0]
   1cc52:	069b      	lsls	r3, r3, #26
   1cc54:	d502      	bpl.n	1cc5c <_printf_common+0x30>
   1cc56:	682b      	ldr	r3, [r5, #0]
   1cc58:	3302      	adds	r3, #2
   1cc5a:	602b      	str	r3, [r5, #0]
   1cc5c:	2706      	movs	r7, #6
   1cc5e:	6823      	ldr	r3, [r4, #0]
   1cc60:	401f      	ands	r7, r3
   1cc62:	d027      	beq.n	1ccb4 <_printf_common+0x88>
   1cc64:	0023      	movs	r3, r4
   1cc66:	3343      	adds	r3, #67	; 0x43
   1cc68:	781b      	ldrb	r3, [r3, #0]
   1cc6a:	1e5a      	subs	r2, r3, #1
   1cc6c:	4193      	sbcs	r3, r2
   1cc6e:	6822      	ldr	r2, [r4, #0]
   1cc70:	0692      	lsls	r2, r2, #26
   1cc72:	d430      	bmi.n	1ccd6 <_printf_common+0xaa>
   1cc74:	0022      	movs	r2, r4
   1cc76:	9901      	ldr	r1, [sp, #4]
   1cc78:	3243      	adds	r2, #67	; 0x43
   1cc7a:	9800      	ldr	r0, [sp, #0]
   1cc7c:	9e08      	ldr	r6, [sp, #32]
   1cc7e:	47b0      	blx	r6
   1cc80:	1c43      	adds	r3, r0, #1
   1cc82:	d025      	beq.n	1ccd0 <_printf_common+0xa4>
   1cc84:	2306      	movs	r3, #6
   1cc86:	6820      	ldr	r0, [r4, #0]
   1cc88:	682a      	ldr	r2, [r5, #0]
   1cc8a:	68e1      	ldr	r1, [r4, #12]
   1cc8c:	4003      	ands	r3, r0
   1cc8e:	2500      	movs	r5, #0
   1cc90:	2b04      	cmp	r3, #4
   1cc92:	d103      	bne.n	1cc9c <_printf_common+0x70>
   1cc94:	1a8d      	subs	r5, r1, r2
   1cc96:	43eb      	mvns	r3, r5
   1cc98:	17db      	asrs	r3, r3, #31
   1cc9a:	401d      	ands	r5, r3
   1cc9c:	68a3      	ldr	r3, [r4, #8]
   1cc9e:	6922      	ldr	r2, [r4, #16]
   1cca0:	4293      	cmp	r3, r2
   1cca2:	dd01      	ble.n	1cca8 <_printf_common+0x7c>
   1cca4:	1a9b      	subs	r3, r3, r2
   1cca6:	18ed      	adds	r5, r5, r3
   1cca8:	2700      	movs	r7, #0
   1ccaa:	42bd      	cmp	r5, r7
   1ccac:	d120      	bne.n	1ccf0 <_printf_common+0xc4>
   1ccae:	2000      	movs	r0, #0
   1ccb0:	e010      	b.n	1ccd4 <_printf_common+0xa8>
   1ccb2:	3701      	adds	r7, #1
   1ccb4:	68e3      	ldr	r3, [r4, #12]
   1ccb6:	682a      	ldr	r2, [r5, #0]
   1ccb8:	1a9b      	subs	r3, r3, r2
   1ccba:	429f      	cmp	r7, r3
   1ccbc:	dad2      	bge.n	1cc64 <_printf_common+0x38>
   1ccbe:	0022      	movs	r2, r4
   1ccc0:	2301      	movs	r3, #1
   1ccc2:	3219      	adds	r2, #25
   1ccc4:	9901      	ldr	r1, [sp, #4]
   1ccc6:	9800      	ldr	r0, [sp, #0]
   1ccc8:	9e08      	ldr	r6, [sp, #32]
   1ccca:	47b0      	blx	r6
   1cccc:	1c43      	adds	r3, r0, #1
   1ccce:	d1f0      	bne.n	1ccb2 <_printf_common+0x86>
   1ccd0:	2001      	movs	r0, #1
   1ccd2:	4240      	negs	r0, r0
   1ccd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ccd6:	2030      	movs	r0, #48	; 0x30
   1ccd8:	18e1      	adds	r1, r4, r3
   1ccda:	3143      	adds	r1, #67	; 0x43
   1ccdc:	7008      	strb	r0, [r1, #0]
   1ccde:	0021      	movs	r1, r4
   1cce0:	1c5a      	adds	r2, r3, #1
   1cce2:	3145      	adds	r1, #69	; 0x45
   1cce4:	7809      	ldrb	r1, [r1, #0]
   1cce6:	18a2      	adds	r2, r4, r2
   1cce8:	3243      	adds	r2, #67	; 0x43
   1ccea:	3302      	adds	r3, #2
   1ccec:	7011      	strb	r1, [r2, #0]
   1ccee:	e7c1      	b.n	1cc74 <_printf_common+0x48>
   1ccf0:	0022      	movs	r2, r4
   1ccf2:	2301      	movs	r3, #1
   1ccf4:	321a      	adds	r2, #26
   1ccf6:	9901      	ldr	r1, [sp, #4]
   1ccf8:	9800      	ldr	r0, [sp, #0]
   1ccfa:	9e08      	ldr	r6, [sp, #32]
   1ccfc:	47b0      	blx	r6
   1ccfe:	1c43      	adds	r3, r0, #1
   1cd00:	d0e6      	beq.n	1ccd0 <_printf_common+0xa4>
   1cd02:	3701      	adds	r7, #1
   1cd04:	e7d1      	b.n	1ccaa <_printf_common+0x7e>
	...

0001cd08 <_printf_i>:
   1cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd0a:	b08b      	sub	sp, #44	; 0x2c
   1cd0c:	9206      	str	r2, [sp, #24]
   1cd0e:	000a      	movs	r2, r1
   1cd10:	3243      	adds	r2, #67	; 0x43
   1cd12:	9307      	str	r3, [sp, #28]
   1cd14:	9005      	str	r0, [sp, #20]
   1cd16:	9204      	str	r2, [sp, #16]
   1cd18:	7e0a      	ldrb	r2, [r1, #24]
   1cd1a:	000c      	movs	r4, r1
   1cd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cd1e:	2a6e      	cmp	r2, #110	; 0x6e
   1cd20:	d100      	bne.n	1cd24 <_printf_i+0x1c>
   1cd22:	e08f      	b.n	1ce44 <_printf_i+0x13c>
   1cd24:	d817      	bhi.n	1cd56 <_printf_i+0x4e>
   1cd26:	2a63      	cmp	r2, #99	; 0x63
   1cd28:	d02c      	beq.n	1cd84 <_printf_i+0x7c>
   1cd2a:	d808      	bhi.n	1cd3e <_printf_i+0x36>
   1cd2c:	2a00      	cmp	r2, #0
   1cd2e:	d100      	bne.n	1cd32 <_printf_i+0x2a>
   1cd30:	e099      	b.n	1ce66 <_printf_i+0x15e>
   1cd32:	2a58      	cmp	r2, #88	; 0x58
   1cd34:	d054      	beq.n	1cde0 <_printf_i+0xd8>
   1cd36:	0026      	movs	r6, r4
   1cd38:	3642      	adds	r6, #66	; 0x42
   1cd3a:	7032      	strb	r2, [r6, #0]
   1cd3c:	e029      	b.n	1cd92 <_printf_i+0x8a>
   1cd3e:	2a64      	cmp	r2, #100	; 0x64
   1cd40:	d001      	beq.n	1cd46 <_printf_i+0x3e>
   1cd42:	2a69      	cmp	r2, #105	; 0x69
   1cd44:	d1f7      	bne.n	1cd36 <_printf_i+0x2e>
   1cd46:	6821      	ldr	r1, [r4, #0]
   1cd48:	681a      	ldr	r2, [r3, #0]
   1cd4a:	0608      	lsls	r0, r1, #24
   1cd4c:	d523      	bpl.n	1cd96 <_printf_i+0x8e>
   1cd4e:	1d11      	adds	r1, r2, #4
   1cd50:	6019      	str	r1, [r3, #0]
   1cd52:	6815      	ldr	r5, [r2, #0]
   1cd54:	e025      	b.n	1cda2 <_printf_i+0x9a>
   1cd56:	2a73      	cmp	r2, #115	; 0x73
   1cd58:	d100      	bne.n	1cd5c <_printf_i+0x54>
   1cd5a:	e088      	b.n	1ce6e <_printf_i+0x166>
   1cd5c:	d808      	bhi.n	1cd70 <_printf_i+0x68>
   1cd5e:	2a6f      	cmp	r2, #111	; 0x6f
   1cd60:	d029      	beq.n	1cdb6 <_printf_i+0xae>
   1cd62:	2a70      	cmp	r2, #112	; 0x70
   1cd64:	d1e7      	bne.n	1cd36 <_printf_i+0x2e>
   1cd66:	2220      	movs	r2, #32
   1cd68:	6809      	ldr	r1, [r1, #0]
   1cd6a:	430a      	orrs	r2, r1
   1cd6c:	6022      	str	r2, [r4, #0]
   1cd6e:	e003      	b.n	1cd78 <_printf_i+0x70>
   1cd70:	2a75      	cmp	r2, #117	; 0x75
   1cd72:	d020      	beq.n	1cdb6 <_printf_i+0xae>
   1cd74:	2a78      	cmp	r2, #120	; 0x78
   1cd76:	d1de      	bne.n	1cd36 <_printf_i+0x2e>
   1cd78:	0022      	movs	r2, r4
   1cd7a:	2178      	movs	r1, #120	; 0x78
   1cd7c:	3245      	adds	r2, #69	; 0x45
   1cd7e:	7011      	strb	r1, [r2, #0]
   1cd80:	4a6c      	ldr	r2, [pc, #432]	; (1cf34 <_printf_i+0x22c>)
   1cd82:	e030      	b.n	1cde6 <_printf_i+0xde>
   1cd84:	000e      	movs	r6, r1
   1cd86:	681a      	ldr	r2, [r3, #0]
   1cd88:	3642      	adds	r6, #66	; 0x42
   1cd8a:	1d11      	adds	r1, r2, #4
   1cd8c:	6019      	str	r1, [r3, #0]
   1cd8e:	6813      	ldr	r3, [r2, #0]
   1cd90:	7033      	strb	r3, [r6, #0]
   1cd92:	2301      	movs	r3, #1
   1cd94:	e079      	b.n	1ce8a <_printf_i+0x182>
   1cd96:	0649      	lsls	r1, r1, #25
   1cd98:	d5d9      	bpl.n	1cd4e <_printf_i+0x46>
   1cd9a:	1d11      	adds	r1, r2, #4
   1cd9c:	6019      	str	r1, [r3, #0]
   1cd9e:	2300      	movs	r3, #0
   1cda0:	5ed5      	ldrsh	r5, [r2, r3]
   1cda2:	2d00      	cmp	r5, #0
   1cda4:	da03      	bge.n	1cdae <_printf_i+0xa6>
   1cda6:	232d      	movs	r3, #45	; 0x2d
   1cda8:	9a04      	ldr	r2, [sp, #16]
   1cdaa:	426d      	negs	r5, r5
   1cdac:	7013      	strb	r3, [r2, #0]
   1cdae:	4b62      	ldr	r3, [pc, #392]	; (1cf38 <_printf_i+0x230>)
   1cdb0:	270a      	movs	r7, #10
   1cdb2:	9303      	str	r3, [sp, #12]
   1cdb4:	e02f      	b.n	1ce16 <_printf_i+0x10e>
   1cdb6:	6820      	ldr	r0, [r4, #0]
   1cdb8:	6819      	ldr	r1, [r3, #0]
   1cdba:	0605      	lsls	r5, r0, #24
   1cdbc:	d503      	bpl.n	1cdc6 <_printf_i+0xbe>
   1cdbe:	1d08      	adds	r0, r1, #4
   1cdc0:	6018      	str	r0, [r3, #0]
   1cdc2:	680d      	ldr	r5, [r1, #0]
   1cdc4:	e005      	b.n	1cdd2 <_printf_i+0xca>
   1cdc6:	0640      	lsls	r0, r0, #25
   1cdc8:	d5f9      	bpl.n	1cdbe <_printf_i+0xb6>
   1cdca:	680d      	ldr	r5, [r1, #0]
   1cdcc:	1d08      	adds	r0, r1, #4
   1cdce:	6018      	str	r0, [r3, #0]
   1cdd0:	b2ad      	uxth	r5, r5
   1cdd2:	4b59      	ldr	r3, [pc, #356]	; (1cf38 <_printf_i+0x230>)
   1cdd4:	2708      	movs	r7, #8
   1cdd6:	9303      	str	r3, [sp, #12]
   1cdd8:	2a6f      	cmp	r2, #111	; 0x6f
   1cdda:	d018      	beq.n	1ce0e <_printf_i+0x106>
   1cddc:	270a      	movs	r7, #10
   1cdde:	e016      	b.n	1ce0e <_printf_i+0x106>
   1cde0:	3145      	adds	r1, #69	; 0x45
   1cde2:	700a      	strb	r2, [r1, #0]
   1cde4:	4a54      	ldr	r2, [pc, #336]	; (1cf38 <_printf_i+0x230>)
   1cde6:	9203      	str	r2, [sp, #12]
   1cde8:	681a      	ldr	r2, [r3, #0]
   1cdea:	6821      	ldr	r1, [r4, #0]
   1cdec:	1d10      	adds	r0, r2, #4
   1cdee:	6018      	str	r0, [r3, #0]
   1cdf0:	6815      	ldr	r5, [r2, #0]
   1cdf2:	0608      	lsls	r0, r1, #24
   1cdf4:	d522      	bpl.n	1ce3c <_printf_i+0x134>
   1cdf6:	07cb      	lsls	r3, r1, #31
   1cdf8:	d502      	bpl.n	1ce00 <_printf_i+0xf8>
   1cdfa:	2320      	movs	r3, #32
   1cdfc:	4319      	orrs	r1, r3
   1cdfe:	6021      	str	r1, [r4, #0]
   1ce00:	2710      	movs	r7, #16
   1ce02:	2d00      	cmp	r5, #0
   1ce04:	d103      	bne.n	1ce0e <_printf_i+0x106>
   1ce06:	2320      	movs	r3, #32
   1ce08:	6822      	ldr	r2, [r4, #0]
   1ce0a:	439a      	bics	r2, r3
   1ce0c:	6022      	str	r2, [r4, #0]
   1ce0e:	0023      	movs	r3, r4
   1ce10:	2200      	movs	r2, #0
   1ce12:	3343      	adds	r3, #67	; 0x43
   1ce14:	701a      	strb	r2, [r3, #0]
   1ce16:	6863      	ldr	r3, [r4, #4]
   1ce18:	60a3      	str	r3, [r4, #8]
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	db5c      	blt.n	1ced8 <_printf_i+0x1d0>
   1ce1e:	2204      	movs	r2, #4
   1ce20:	6821      	ldr	r1, [r4, #0]
   1ce22:	4391      	bics	r1, r2
   1ce24:	6021      	str	r1, [r4, #0]
   1ce26:	2d00      	cmp	r5, #0
   1ce28:	d158      	bne.n	1cedc <_printf_i+0x1d4>
   1ce2a:	9e04      	ldr	r6, [sp, #16]
   1ce2c:	2b00      	cmp	r3, #0
   1ce2e:	d064      	beq.n	1cefa <_printf_i+0x1f2>
   1ce30:	0026      	movs	r6, r4
   1ce32:	9b03      	ldr	r3, [sp, #12]
   1ce34:	3642      	adds	r6, #66	; 0x42
   1ce36:	781b      	ldrb	r3, [r3, #0]
   1ce38:	7033      	strb	r3, [r6, #0]
   1ce3a:	e05e      	b.n	1cefa <_printf_i+0x1f2>
   1ce3c:	0648      	lsls	r0, r1, #25
   1ce3e:	d5da      	bpl.n	1cdf6 <_printf_i+0xee>
   1ce40:	b2ad      	uxth	r5, r5
   1ce42:	e7d8      	b.n	1cdf6 <_printf_i+0xee>
   1ce44:	6809      	ldr	r1, [r1, #0]
   1ce46:	681a      	ldr	r2, [r3, #0]
   1ce48:	0608      	lsls	r0, r1, #24
   1ce4a:	d505      	bpl.n	1ce58 <_printf_i+0x150>
   1ce4c:	1d11      	adds	r1, r2, #4
   1ce4e:	6019      	str	r1, [r3, #0]
   1ce50:	6813      	ldr	r3, [r2, #0]
   1ce52:	6962      	ldr	r2, [r4, #20]
   1ce54:	601a      	str	r2, [r3, #0]
   1ce56:	e006      	b.n	1ce66 <_printf_i+0x15e>
   1ce58:	0649      	lsls	r1, r1, #25
   1ce5a:	d5f7      	bpl.n	1ce4c <_printf_i+0x144>
   1ce5c:	1d11      	adds	r1, r2, #4
   1ce5e:	6019      	str	r1, [r3, #0]
   1ce60:	6813      	ldr	r3, [r2, #0]
   1ce62:	8aa2      	ldrh	r2, [r4, #20]
   1ce64:	801a      	strh	r2, [r3, #0]
   1ce66:	2300      	movs	r3, #0
   1ce68:	9e04      	ldr	r6, [sp, #16]
   1ce6a:	6123      	str	r3, [r4, #16]
   1ce6c:	e054      	b.n	1cf18 <_printf_i+0x210>
   1ce6e:	681a      	ldr	r2, [r3, #0]
   1ce70:	1d11      	adds	r1, r2, #4
   1ce72:	6019      	str	r1, [r3, #0]
   1ce74:	6816      	ldr	r6, [r2, #0]
   1ce76:	2100      	movs	r1, #0
   1ce78:	6862      	ldr	r2, [r4, #4]
   1ce7a:	0030      	movs	r0, r6
   1ce7c:	f000 f8cc 	bl	1d018 <memchr>
   1ce80:	2800      	cmp	r0, #0
   1ce82:	d001      	beq.n	1ce88 <_printf_i+0x180>
   1ce84:	1b80      	subs	r0, r0, r6
   1ce86:	6060      	str	r0, [r4, #4]
   1ce88:	6863      	ldr	r3, [r4, #4]
   1ce8a:	6123      	str	r3, [r4, #16]
   1ce8c:	2300      	movs	r3, #0
   1ce8e:	9a04      	ldr	r2, [sp, #16]
   1ce90:	7013      	strb	r3, [r2, #0]
   1ce92:	e041      	b.n	1cf18 <_printf_i+0x210>
   1ce94:	6923      	ldr	r3, [r4, #16]
   1ce96:	0032      	movs	r2, r6
   1ce98:	9906      	ldr	r1, [sp, #24]
   1ce9a:	9805      	ldr	r0, [sp, #20]
   1ce9c:	9d07      	ldr	r5, [sp, #28]
   1ce9e:	47a8      	blx	r5
   1cea0:	1c43      	adds	r3, r0, #1
   1cea2:	d043      	beq.n	1cf2c <_printf_i+0x224>
   1cea4:	6823      	ldr	r3, [r4, #0]
   1cea6:	2500      	movs	r5, #0
   1cea8:	079b      	lsls	r3, r3, #30
   1ceaa:	d40f      	bmi.n	1cecc <_printf_i+0x1c4>
   1ceac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ceae:	68e0      	ldr	r0, [r4, #12]
   1ceb0:	4298      	cmp	r0, r3
   1ceb2:	da3d      	bge.n	1cf30 <_printf_i+0x228>
   1ceb4:	0018      	movs	r0, r3
   1ceb6:	e03b      	b.n	1cf30 <_printf_i+0x228>
   1ceb8:	0022      	movs	r2, r4
   1ceba:	2301      	movs	r3, #1
   1cebc:	3219      	adds	r2, #25
   1cebe:	9906      	ldr	r1, [sp, #24]
   1cec0:	9805      	ldr	r0, [sp, #20]
   1cec2:	9e07      	ldr	r6, [sp, #28]
   1cec4:	47b0      	blx	r6
   1cec6:	1c43      	adds	r3, r0, #1
   1cec8:	d030      	beq.n	1cf2c <_printf_i+0x224>
   1ceca:	3501      	adds	r5, #1
   1cecc:	68e3      	ldr	r3, [r4, #12]
   1cece:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ced0:	1a9b      	subs	r3, r3, r2
   1ced2:	429d      	cmp	r5, r3
   1ced4:	dbf0      	blt.n	1ceb8 <_printf_i+0x1b0>
   1ced6:	e7e9      	b.n	1ceac <_printf_i+0x1a4>
   1ced8:	2d00      	cmp	r5, #0
   1ceda:	d0a9      	beq.n	1ce30 <_printf_i+0x128>
   1cedc:	9e04      	ldr	r6, [sp, #16]
   1cede:	0028      	movs	r0, r5
   1cee0:	0039      	movs	r1, r7
   1cee2:	f7fc fe87 	bl	19bf4 <__aeabi_uidivmod>
   1cee6:	9b03      	ldr	r3, [sp, #12]
   1cee8:	3e01      	subs	r6, #1
   1ceea:	5c5b      	ldrb	r3, [r3, r1]
   1ceec:	0028      	movs	r0, r5
   1ceee:	7033      	strb	r3, [r6, #0]
   1cef0:	0039      	movs	r1, r7
   1cef2:	f7fc fdf9 	bl	19ae8 <__udivsi3>
   1cef6:	1e05      	subs	r5, r0, #0
   1cef8:	d1f1      	bne.n	1cede <_printf_i+0x1d6>
   1cefa:	2f08      	cmp	r7, #8
   1cefc:	d109      	bne.n	1cf12 <_printf_i+0x20a>
   1cefe:	6823      	ldr	r3, [r4, #0]
   1cf00:	07db      	lsls	r3, r3, #31
   1cf02:	d506      	bpl.n	1cf12 <_printf_i+0x20a>
   1cf04:	6863      	ldr	r3, [r4, #4]
   1cf06:	6922      	ldr	r2, [r4, #16]
   1cf08:	4293      	cmp	r3, r2
   1cf0a:	dc02      	bgt.n	1cf12 <_printf_i+0x20a>
   1cf0c:	2330      	movs	r3, #48	; 0x30
   1cf0e:	3e01      	subs	r6, #1
   1cf10:	7033      	strb	r3, [r6, #0]
   1cf12:	9b04      	ldr	r3, [sp, #16]
   1cf14:	1b9b      	subs	r3, r3, r6
   1cf16:	6123      	str	r3, [r4, #16]
   1cf18:	9b07      	ldr	r3, [sp, #28]
   1cf1a:	aa09      	add	r2, sp, #36	; 0x24
   1cf1c:	9300      	str	r3, [sp, #0]
   1cf1e:	0021      	movs	r1, r4
   1cf20:	9b06      	ldr	r3, [sp, #24]
   1cf22:	9805      	ldr	r0, [sp, #20]
   1cf24:	f7ff fe82 	bl	1cc2c <_printf_common>
   1cf28:	1c43      	adds	r3, r0, #1
   1cf2a:	d1b3      	bne.n	1ce94 <_printf_i+0x18c>
   1cf2c:	2001      	movs	r0, #1
   1cf2e:	4240      	negs	r0, r0
   1cf30:	b00b      	add	sp, #44	; 0x2c
   1cf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf34:	0001f4ce 	.word	0x0001f4ce
   1cf38:	0001f4bd 	.word	0x0001f4bd

0001cf3c <_putc_r>:
   1cf3c:	b570      	push	{r4, r5, r6, lr}
   1cf3e:	0006      	movs	r6, r0
   1cf40:	000d      	movs	r5, r1
   1cf42:	0014      	movs	r4, r2
   1cf44:	2800      	cmp	r0, #0
   1cf46:	d004      	beq.n	1cf52 <_putc_r+0x16>
   1cf48:	6983      	ldr	r3, [r0, #24]
   1cf4a:	2b00      	cmp	r3, #0
   1cf4c:	d101      	bne.n	1cf52 <_putc_r+0x16>
   1cf4e:	f7ff faab 	bl	1c4a8 <__sinit>
   1cf52:	4b12      	ldr	r3, [pc, #72]	; (1cf9c <_putc_r+0x60>)
   1cf54:	429c      	cmp	r4, r3
   1cf56:	d111      	bne.n	1cf7c <_putc_r+0x40>
   1cf58:	6874      	ldr	r4, [r6, #4]
   1cf5a:	68a3      	ldr	r3, [r4, #8]
   1cf5c:	3b01      	subs	r3, #1
   1cf5e:	60a3      	str	r3, [r4, #8]
   1cf60:	2b00      	cmp	r3, #0
   1cf62:	da05      	bge.n	1cf70 <_putc_r+0x34>
   1cf64:	69a2      	ldr	r2, [r4, #24]
   1cf66:	4293      	cmp	r3, r2
   1cf68:	db12      	blt.n	1cf90 <_putc_r+0x54>
   1cf6a:	b2eb      	uxtb	r3, r5
   1cf6c:	2b0a      	cmp	r3, #10
   1cf6e:	d00f      	beq.n	1cf90 <_putc_r+0x54>
   1cf70:	6823      	ldr	r3, [r4, #0]
   1cf72:	b2e8      	uxtb	r0, r5
   1cf74:	1c5a      	adds	r2, r3, #1
   1cf76:	6022      	str	r2, [r4, #0]
   1cf78:	701d      	strb	r5, [r3, #0]
   1cf7a:	bd70      	pop	{r4, r5, r6, pc}
   1cf7c:	4b08      	ldr	r3, [pc, #32]	; (1cfa0 <_putc_r+0x64>)
   1cf7e:	429c      	cmp	r4, r3
   1cf80:	d101      	bne.n	1cf86 <_putc_r+0x4a>
   1cf82:	68b4      	ldr	r4, [r6, #8]
   1cf84:	e7e9      	b.n	1cf5a <_putc_r+0x1e>
   1cf86:	4b07      	ldr	r3, [pc, #28]	; (1cfa4 <_putc_r+0x68>)
   1cf88:	429c      	cmp	r4, r3
   1cf8a:	d1e6      	bne.n	1cf5a <_putc_r+0x1e>
   1cf8c:	68f4      	ldr	r4, [r6, #12]
   1cf8e:	e7e4      	b.n	1cf5a <_putc_r+0x1e>
   1cf90:	0022      	movs	r2, r4
   1cf92:	0029      	movs	r1, r5
   1cf94:	0030      	movs	r0, r6
   1cf96:	f7ff f89d 	bl	1c0d4 <__swbuf_r>
   1cf9a:	e7ee      	b.n	1cf7a <_putc_r+0x3e>
   1cf9c:	0001f46c 	.word	0x0001f46c
   1cfa0:	0001f48c 	.word	0x0001f48c
   1cfa4:	0001f44c 	.word	0x0001f44c

0001cfa8 <_read_r>:
   1cfa8:	b570      	push	{r4, r5, r6, lr}
   1cfaa:	0005      	movs	r5, r0
   1cfac:	0008      	movs	r0, r1
   1cfae:	0011      	movs	r1, r2
   1cfb0:	2200      	movs	r2, #0
   1cfb2:	4c06      	ldr	r4, [pc, #24]	; (1cfcc <_read_r+0x24>)
   1cfb4:	6022      	str	r2, [r4, #0]
   1cfb6:	001a      	movs	r2, r3
   1cfb8:	f7fa fb64 	bl	17684 <_read>
   1cfbc:	1c43      	adds	r3, r0, #1
   1cfbe:	d103      	bne.n	1cfc8 <_read_r+0x20>
   1cfc0:	6823      	ldr	r3, [r4, #0]
   1cfc2:	2b00      	cmp	r3, #0
   1cfc4:	d000      	beq.n	1cfc8 <_read_r+0x20>
   1cfc6:	602b      	str	r3, [r5, #0]
   1cfc8:	bd70      	pop	{r4, r5, r6, pc}
   1cfca:	46c0      	nop			; (mov r8, r8)
   1cfcc:	20002744 	.word	0x20002744

0001cfd0 <_fstat_r>:
   1cfd0:	2300      	movs	r3, #0
   1cfd2:	b570      	push	{r4, r5, r6, lr}
   1cfd4:	4c06      	ldr	r4, [pc, #24]	; (1cff0 <_fstat_r+0x20>)
   1cfd6:	0005      	movs	r5, r0
   1cfd8:	0008      	movs	r0, r1
   1cfda:	0011      	movs	r1, r2
   1cfdc:	6023      	str	r3, [r4, #0]
   1cfde:	f7fa fbd9 	bl	17794 <_fstat>
   1cfe2:	1c43      	adds	r3, r0, #1
   1cfe4:	d103      	bne.n	1cfee <_fstat_r+0x1e>
   1cfe6:	6823      	ldr	r3, [r4, #0]
   1cfe8:	2b00      	cmp	r3, #0
   1cfea:	d000      	beq.n	1cfee <_fstat_r+0x1e>
   1cfec:	602b      	str	r3, [r5, #0]
   1cfee:	bd70      	pop	{r4, r5, r6, pc}
   1cff0:	20002744 	.word	0x20002744

0001cff4 <_isatty_r>:
   1cff4:	2300      	movs	r3, #0
   1cff6:	b570      	push	{r4, r5, r6, lr}
   1cff8:	4c06      	ldr	r4, [pc, #24]	; (1d014 <_isatty_r+0x20>)
   1cffa:	0005      	movs	r5, r0
   1cffc:	0008      	movs	r0, r1
   1cffe:	6023      	str	r3, [r4, #0]
   1d000:	f7fa fbd6 	bl	177b0 <_isatty>
   1d004:	1c43      	adds	r3, r0, #1
   1d006:	d103      	bne.n	1d010 <_isatty_r+0x1c>
   1d008:	6823      	ldr	r3, [r4, #0]
   1d00a:	2b00      	cmp	r3, #0
   1d00c:	d000      	beq.n	1d010 <_isatty_r+0x1c>
   1d00e:	602b      	str	r3, [r5, #0]
   1d010:	bd70      	pop	{r4, r5, r6, pc}
   1d012:	46c0      	nop			; (mov r8, r8)
   1d014:	20002744 	.word	0x20002744

0001d018 <memchr>:
   1d018:	b2c9      	uxtb	r1, r1
   1d01a:	1882      	adds	r2, r0, r2
   1d01c:	4290      	cmp	r0, r2
   1d01e:	d101      	bne.n	1d024 <memchr+0xc>
   1d020:	2000      	movs	r0, #0
   1d022:	4770      	bx	lr
   1d024:	7803      	ldrb	r3, [r0, #0]
   1d026:	428b      	cmp	r3, r1
   1d028:	d0fb      	beq.n	1d022 <memchr+0xa>
   1d02a:	3001      	adds	r0, #1
   1d02c:	e7f6      	b.n	1d01c <memchr+0x4>

0001d02e <_realloc_r>:
   1d02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d030:	0007      	movs	r7, r0
   1d032:	000d      	movs	r5, r1
   1d034:	0016      	movs	r6, r2
   1d036:	2900      	cmp	r1, #0
   1d038:	d105      	bne.n	1d046 <_realloc_r+0x18>
   1d03a:	0011      	movs	r1, r2
   1d03c:	f7fe fda8 	bl	1bb90 <_malloc_r>
   1d040:	0004      	movs	r4, r0
   1d042:	0020      	movs	r0, r4
   1d044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d046:	2a00      	cmp	r2, #0
   1d048:	d103      	bne.n	1d052 <_realloc_r+0x24>
   1d04a:	f7fe fd57 	bl	1bafc <_free_r>
   1d04e:	0034      	movs	r4, r6
   1d050:	e7f7      	b.n	1d042 <_realloc_r+0x14>
   1d052:	f000 f812 	bl	1d07a <_malloc_usable_size_r>
   1d056:	002c      	movs	r4, r5
   1d058:	4286      	cmp	r6, r0
   1d05a:	d9f2      	bls.n	1d042 <_realloc_r+0x14>
   1d05c:	0031      	movs	r1, r6
   1d05e:	0038      	movs	r0, r7
   1d060:	f7fe fd96 	bl	1bb90 <_malloc_r>
   1d064:	1e04      	subs	r4, r0, #0
   1d066:	d0ec      	beq.n	1d042 <_realloc_r+0x14>
   1d068:	0029      	movs	r1, r5
   1d06a:	0032      	movs	r2, r6
   1d06c:	f7fe fd23 	bl	1bab6 <memcpy>
   1d070:	0029      	movs	r1, r5
   1d072:	0038      	movs	r0, r7
   1d074:	f7fe fd42 	bl	1bafc <_free_r>
   1d078:	e7e3      	b.n	1d042 <_realloc_r+0x14>

0001d07a <_malloc_usable_size_r>:
   1d07a:	1f0b      	subs	r3, r1, #4
   1d07c:	681b      	ldr	r3, [r3, #0]
   1d07e:	1f18      	subs	r0, r3, #4
   1d080:	2b00      	cmp	r3, #0
   1d082:	da01      	bge.n	1d088 <_malloc_usable_size_r+0xe>
   1d084:	580b      	ldr	r3, [r1, r0]
   1d086:	18c0      	adds	r0, r0, r3
   1d088:	4770      	bx	lr
   1d08a:	0000      	movs	r0, r0
   1d08c:	50504128 	.word	0x50504128
   1d090:	52452829 	.word	0x52452829
   1d094:	255b2952 	.word	0x255b2952
   1d098:	255b5d73 	.word	0x255b5d73
   1d09c:	00005d64 	.word	0x00005d64
   1d0a0:	61766e69 	.word	0x61766e69
   1d0a4:	6564696c 	.word	0x6564696c
   1d0a8:	636f6920 	.word	0x636f6920
   1d0ac:	6320746c 	.word	0x6320746c
   1d0b0:	0000646d 	.word	0x0000646d

0001d0b4 <__FUNCTION__.14704>:
   1d0b4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1d0c4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1d0d4:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1d0e4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1d0f4:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1d104:	74207075 63206568 00706968 66696828     up the chip.(hif
   1d114:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1d124:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   1d134:	66696828 64612029 73657264 75622073     (hif) address bu
   1d144:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   1d154:	70757272 20646574 6b636170 53207465     rrupted packet S
   1d164:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   1d174:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   1d184:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   1d194:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   1d1a4:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1d1b4:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1d1c4:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1d1d4:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1d1e4:	69676572 72657473 00006465 70797243     registered..Cryp
   1d1f4:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1d204:	7220746f 73696765 65726574 00000064     ot registered...
   1d214:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1d224:	6f6e2073 65722074 74736967 64657265     s not registered
   1d234:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   1d244:	72672064 2070756f 00004449 66696828     d group ID..(hif
   1d254:	6f682029 61207473 64207070 276e6469     ) host app didn'
   1d264:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   1d274:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   1d284:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   1d294:	61462029 2065736c 65746e69 70757272     ) False interrup
   1d2a4:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1d2b4:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1d2c4:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1d2d4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1d2e4:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1d2f4:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1d304:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1d314:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1d324:	75716552 65747365 69532064 6920657a     Requested Size i
   1d334:	616c2073 72656772 61687420 6874206e     s larger than th
   1d344:	65722065 65766963 75622064 72656666     e recived buffer
   1d354:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   1d364:	00000000 20505041 75716552 65747365     ....APP Requeste
   1d374:	64412064 73657264 65622073 646e6f79     d Address beyond
   1d384:	65687420 63657220 64657669 66756220      the recived buf
   1d394:	20726566 72646461 20737365 20646e61     fer address and 
   1d3a4:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1d3b4:	0000000a 00001894 00001864 0000185c     ........d...\...
   1d3c4:	00001874 0000186c 0000188c 0000187c     t...l.......|...
   1d3d4:	00001884                                ....

0001d3d8 <__FUNCTION__.13353>:
   1d3d8:	5f666968 646e6573 00000000              hif_send....

0001d3e4 <__FUNCTION__.13363>:
   1d3e4:	5f666968 00727369                       hif_isr.

0001d3ec <__FUNCTION__.13369>:
   1d3ec:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001d3fc <__FUNCTION__.13381>:
   1d3fc:	5f666968 65636572 00657669              hif_receive.

0001d408 <__FUNCTION__.13397>:
   1d408:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1d418:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1d428:	00005d64 6f727245 65722072 76696563     d]..Error receiv
   1d438:	20676e69 204c5353 6d6f7266 65687420     ing SSL from the
   1d448:	46494820 00000000 5f666968 69676572      HIF....hif_regi
   1d458:	72657473 2862635f 61662029 64656c69     ster_cb() failed
   1d468:	74697720 65722068 64253d74 00000000      with ret=%d....

0001d478 <__FUNCTION__.13368>:
   1d478:	5f6d326d 5f6c7373 00006263              m2m_ssl_cb..

0001d484 <__FUNCTION__.13414>:
   1d484:	5f6d326d 5f6c7373 74696e69 00000000     m2m_ssl_init....
   1d494:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1d4a4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1d4b4:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   1d4c4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1d4d4:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   1d4e4:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   1d4f4:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1d504:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1d514:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1d524:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1d534:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1d544:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   1d554:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   1d564:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   1d574:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   1d584:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1d594:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1d5a4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1d5b4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1d5c4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1d5d4:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1d5e4:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1d5f4:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1d604:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1d614:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1d624:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   1d634:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1d644:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1d654:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1d664:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1d674:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1d684:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1d694:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1d6a4:	0000000a 313a3831 30303a32 00000000     ....18:12:00....
   1d6b4:	20677541 32203620 00383130 76697244     Aug  6 2018.Driv
   1d6c4:	62207265 746c6975 20746120 25097325     er built at %s.%
   1d6d4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1d6e4:	7277616d 65562065 6f697372 0000006e     mawre Version...
   1d6f4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   1d704:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   1d714:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   1d724:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   1d734:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   1d744:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   1d754:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   1d764:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   1d774:	53502074 656b204b 656c2079 6874676e     t PSK key length
   1d784:	00000000 65646e75 656e6966 65732064     ....undefined se
   1d794:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   1d7a4:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   1d7b4:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   1d7c4:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   1d7d4:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   1d7e4:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   1d7f4:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   1d804:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   1d814:	66754220 20726566 65637865 64656465      Buffer exceeded
   1d824:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1d834:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1d844:	00000000                                ....

0001d848 <__FUNCTION__.13332>:
   1d848:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001d854 <__FUNCTION__.13361>:
   1d854:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001d864 <__FUNCTION__.13389>:
   1d864:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1d874:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   1d884:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   1d894:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   1d8a4:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   1d8b4:	20656874 70696863 00000000 50504128     the chip....(APP
   1d8c4:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   1d8d4:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   1d8e4:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   1d8f4:	6c616974 00657a69                       tialize.

0001d8fc <__FUNCTION__.13195>:
   1d8fc:	70696863 6b61775f 00000065              chip_wake...

0001d908 <__FUNCTION__.13244>:
   1d908:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   1d918:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1d928:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1d938:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   1d948:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   1d958:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   1d968:	6e65206f 656c6261 746e6920 75727265     o enable interru
   1d978:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   1d988:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   1d998:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   1d9a8:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   1d9b8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   1d9c8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   1d9d8:	75622074 00000073                       t bus...

0001d9e0 <__FUNCTION__.13242>:
   1d9e0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001d9ec <__FUNCTION__.13249>:
   1d9ec:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0001d9fc <crc7_syndrome_table>:
   1d9fc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1da0c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1da1c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1da2c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1da3c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1da4c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1da5c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1da6c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1da7c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1da8c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1da9c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1daac:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1dabc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1dacc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1dadc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1daec:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1dafc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1db0c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   1db1c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1db2c:	73756220 72726520 2e2e726f 0000002e      bus error......
   1db3c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1db4c:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   1db5c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1db6c:	61642064 72206174 6f707365 2065736e     d data response 
   1db7c:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   1db8c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1db9c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1dbac:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1dbbc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1dbcc:	656c6961 61642064 72206174 6f707365     ailed data respo
   1dbdc:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1dbec:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1dbfc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1dc0c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1dc1c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1dc2c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1dc3c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1dc4c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1dc5c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1dc6c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1dc7c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1dc8c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1dc9c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   1dcac:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1dcbc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1dccc:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1dcdc:	69727720 202c6574 20737562 6f727265      write, bus erro
   1dcec:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   1dcfc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1dd0c:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   1dd1c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1dd2c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1dd3c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   1dd4c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1dd5c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1dd6c:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1dd7c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   1dd8c:	00000000 65736552 6e612074 65722064     ....Reset and re
   1dd9c:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1ddac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1ddbc:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1ddcc:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1dddc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1ddec:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1ddfc:	69727720 62206574 6b636f6c 30252820      write block (%0
   1de0c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1de1c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   1de2c:	61746164 69727720 2e2e6574 0000002e     data write......
   1de3c:	65736552 6e612074 65722064 20797274     Reset and retry 
   1de4c:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1de5c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1de6c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1de7c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1de8c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1de9c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1deac:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1debc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1decc:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1dedc:	6e612074 65722064 20797274 25206425     t and retry %d %
   1deec:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1defc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1df0c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1df1c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1df2c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1df3c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1df4c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1df5c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1df6c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1df7c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1df8c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1df9c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   1dfac:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   1dfbc:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   1dfcc:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1dfdc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1dfec:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   1dffc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1e00c:	6e692064 6e726574 77206c61 65746972     d internal write
   1e01c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1e02c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1e03c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1e04c:	64692070 002e2e2e 00003948 00003948     p id....H9..H9..
   1e05c:	000039d8 0000389c 000038e2 00003904     .9...8...8...9..
   1e06c:	0000398a 0000398a 00003a44 00003870     .9...9..D:..p8..
   1e07c:	00003a9e 00003a9e 00003a9e 00003a9e     .:...:...:...:..
   1e08c:	00003926                                &9..

0001e090 <__FUNCTION__.12543>:
   1e090:	5f697073 00646d63                       spi_cmd.

0001e098 <__FUNCTION__.12550>:
   1e098:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001e0a8 <__FUNCTION__.12559>:
   1e0a8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001e0b4 <__FUNCTION__.12575>:
   1e0b4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001e0c4 <__FUNCTION__.12590>:
   1e0c4:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001e0d4 <__FUNCTION__.12602>:
   1e0d4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001e0e4 <__FUNCTION__.12613>:
   1e0e4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001e0f4 <__FUNCTION__.12625>:
   1e0f4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001e104 <__FUNCTION__.12638>:
   1e104:	735f6d6e 725f6970 00646165              nm_spi_read.

0001e110 <__FUNCTION__.12663>:
   1e110:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   1e120:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1e130:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1e140:	25207465 65732064 6f697373 4449206e     et %d session ID
   1e150:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1e160:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1e170:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1e180:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1e190:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1e1a0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   1e1b0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   1e1c0:	204c5353 6b636f53 00007465 00005f08     SSL Socket..._..
   1e1d0:	00005f16 00005f24 00005f32 00005f40     ._..$_..2_..@_..
   1e1e0:	00006b28 00006b36 00006b44 00006b52     (k..6k..Dk..Rk..
   1e1f0:	00006b60 64613361 69686b61 79636933     `k..a3adakhi3icy
   1e200:	692e3976 752e746f 65772d73 322d7473     v9.iot.us-west-2
   1e210:	616d612e 616e6f7a 632e7377 00006d6f     .amazonaws.com..
   1e220:	4354514d 00000400 00000000 00000000     MQTC............
   1e230:	00000000 0001003c 5754514d 00000000     ....<...MQTW....
	...

0001e274 <MQTTConnectParamsDefault>:
   1e274:	00000000 0001e1f4 000022b3 00000000     ........."......
	...
   1e298:	000a0004 00000001 00000000 00000000     ................
   1e2a8:	00000000 000003e8 000007d0 00000001     ................
   1e2b8:	00000000                                ....

0001e2bc <MQTTPublishParamsDefault>:
	...

0001e2d0 <MQTTSubscribeParamsDefault>:
	...

0001e2dc <MQTTMessageParamsDefault>:
	...
   1e2ec:	74736f48 20504920 25207369 64252e64     Host IP is %d.%d
   1e2fc:	2e64252e 0a0d6425 00000000 74736f48     .%d.%d......Host
   1e30c:	6d614e20 73692065 0d732520 0000000a      Name is %s.....
   1e31c:	63637553 66737365 796c6c75 6e6f6320     Successfully con
   1e32c:	7463656e 0d2e6465 00000000 6e6e6f43     nected......Conn
   1e33c:	20746365 6f727265 63202172 2865646f     ect error! code(
   1e34c:	0d296425 0000000a 6b636f53 73207465     %d).....Socket s
   1e35c:	20646e65 6f727265 64253a72 00000a0d     end error:%d....
   1e36c:	4354514d 00000400 00000000 00000000     MQTC............
   1e37c:	00000000 0001003c 5754514d 00000000     ....<...MQTW....
	...
   1e3c0:	000086c4 000086c4 000086ca 0000867e     ............~...
   1e3d0:	000086ca 00008694 000086c4 000086ca     ................
   1e3e0:	000086c4 000086ca 000086c4 000086ca     ................
   1e3f0:	000086c4 000086aa 5454514d 00000000     ........MQTT....
   1e400:	7349514d 00007064 00009532 0000953a     MQIsdp..2...:...
   1e410:	00009542 0000954a 00009552 0000955a     B...J...R...Z...
   1e420:	00009e96 00009fa6 00009e9c 00009eae     ................
   1e430:	00009ec0 00009ed2 00009ee4 00009ef6     ................
   1e440:	00009f08 00009f1a 00009f2e 00009f42     ............B...
   1e450:	00009f56 00009f6a 00009f7e 00009f92     V...j...~.......
   1e460:	00000030 00006425 66302e25 00000000     0...%d..%.0f....
   1e470:	00006525 00006625 00002222 0c085c22     %e..%f.."".."\..
   1e480:	00090d0a 34302575 00000078 6c6c756e     ....u%04x...null
   1e490:	00000000 736c6166 00000065 65757274     ....false...true
   1e4a0:	00000000 00005d5b 0000bf62 0000bf8a     ....[]..b.......
   1e4b0:	0000bf3a 0000bfb2 0000bfc4 0000bfd6     :...............
   1e4c0:	0000bfe8 0000c020 0000c02e 0000c012     .... ...........
   1e4d0:	0000c03c 0000c04c 0000c05c 0000c06e     <...L...\...n...
   1e4e0:	5454514d 73694420 6e6e6f63 00746365     MQTT Disconnect.
   1e4f0:	6f747541 63655220 656e6e6f 69207463     Auto Reconnect i
   1e500:	6e652073 656c6261 52202c64 6e6f6365     s enabled, Recon
   1e510:	7463656e 20676e69 65747461 2074706d     necting attempt 
   1e520:	6c6c6977 61747320 6e207472 0000776f     will start now..
   1e530:	6f747541 63655220 656e6e6f 6e207463     Auto Reconnect n
   1e540:	6520746f 6c62616e 202e6465 72617453     ot enabled. Star
   1e550:	676e6974 6e616d20 206c6175 6f636572     ting manual reco
   1e560:	63656e6e 2e2e2e74 00000000 756e614d     nnect.......Manu
   1e570:	52206c61 6e6f6365 7463656e 63755320     al Reconnect Suc
   1e580:	73736563 006c7566 756e614d 52206c61     cessful.Manual R
   1e590:	6e6f6365 7463656e 69614620 2064656c     econnect Failed 
   1e5a0:	6425202d 00000000 73627553 62697263     - %d....Subscrib
   1e5b0:	61632065 61626c6c 00006b63 732a2e25     e callback..%.*s
   1e5c0:	2a2e2509 00000073 00000d0a 5f737761     .%.*s.......aws_
   1e5d0:	5f746f69 7474716d 6275705f 6873696c     iot_mqtt_publish
   1e5e0:	65202928 726f7272 6372202c 25203d20     () error, rc = %
   1e5f0:	00000a64 5f737761 5f746f69 7474716d     d...aws_iot_mqtt
   1e600:	75702020 73696c62 75732068 73656363       publish succes
   1e610:	21212173 0000000d 6e6e6f43 69746365     s!!!....Connecti
   1e620:	2e2e676e 0000002e 6f727245 64252872     ng......Error(%d
   1e630:	6f632029 63656e6e 676e6974 206f7420     ) connecting to 
   1e640:	253a7325 00000064 62616e55 7420656c     %s:%d...Unable t
   1e650:	6573206f 75412074 52206f74 6e6f6365     o set Auto Recon
   1e660:	7463656e 206f7420 65757274 25202d20     nect to true - %
   1e670:	00000064 73627553 62697263 2e676e69     d...Subscribing.
   1e680:	00002e2e 6f727245 75732072 72637362     ....Error subscr
   1e690:	6e696269 64252067 00000a0d 73627553     ibing %d....Subs
   1e6a0:	70697263 6e6f6974 63757320 73736563     cription success
   1e6b0:	0000000d 63694d2f 68636f72 572f7069     ..../Microchip/W
   1e6c0:	445f4e53 2f6f6d65 6957694d 00000000     SN_Demo/MiWi....
   1e6d0:	636e6977 30303531 2f746f49 252f7325     winc1500Iot/%s/%
   1e6e0:	00000073 0000d222 0000d22a 0000d232     s..."...*...2...
   1e6f0:	0000d23a 0000d242 0000d242 0000d242     :...B...B...B...
   1e700:	0000d23a 40030004 0000eb7c 0000ebc0     :......@|.......
   1e710:	0000ebc0 0000ebc0 0000ebc0 0000ebc0     ................
   1e720:	0000ec1c 0000ec32 0000ec32 0000ec32     ....2...2...2...
   1e730:	0000ec32 0000ec32 6b636170 73207465     2...2...packet s
   1e740:	20646e65 6f727265 00000d72 6d6d6f63     end error...comm
   1e750:	20646e61 70736572 65736e6f 72726520     and response err
   1e760:	000d726f 01100080 08000200 09000200     or..............
   1e770:	00050400 43331104 0000eefe 0000ef16     ......3C........
   1e780:	0000ef2c 0000ef42 0000ef58 0000ef6e     ,...B...X...n...
   1e790:	0000f1dc 0000f1f4 0000f20a 0000f220     ............ ...
   1e7a0:	0000f236 0000f24c 00011816 000119b6     6...L...........
   1e7b0:	00011bca 00011bca 00011bca 00011bca     ................
   1e7c0:	00011938 00011bca 00011bca 00011bca     8...............
   1e7d0:	00011bca 00011bca 00011bca 00011bca     ................
   1e7e0:	00011bca 00011bca 00011ae8 00011b48     ............H...
   1e7f0:	00011bca 00011bca 00011bca 00011bca     ................
   1e800:	00011b2a 6f727245 68772072 64206e65     *...Error when d
   1e810:	646f6365 736a2065 203a6e6f 5d73255b     ecode json: [%s]
   1e820:	0000000a 6d6d6f63 00646e61 20474244     ....command.DBG 
   1e830:	6d6d6f63 20646e61 7325203d 0000000a     command = %s....
   1e840:	61647075 00006574 6f666e69 00000000     update..info....
   1e850:	61746164 65707954 00000000 756c6176     dataType....valu
   1e860:	00000065 20474244 706d6574 25203d20     e...DBG temp = %
   1e870:	000a0d64 4163616d 00726464 20646441     d...macAddr.Add 
   1e880:	65646f4e 73255b20 00000a5d 78323025     Node [%s]...%02x
   1e890:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   1e8a0:	78323025 00000000 72616573 00006863     %02x....search..
   1e8b0:	00746567 72616573 65526863 00007073     get.searchResp..
   1e8c0:	6f706572 6c417472 666e496c 0000006f     reportAllInfo...
   1e8d0:	6f706572 6e497472 00006f66 6f706572     reportInfo..repo
   1e8e0:	69447472 6e6f6373 7463656e 00000000     rtDisconnect....
   1e8f0:	746e6f63 006c6f72 63627573 616d6d6f     control.subcomma
   1e900:	0000646e 4e646461 0065646f 33746567     nd..addNode.get3
   1e910:	6f6c5064 74614474 00000061 6f636564     dPlotData...deco
   1e920:	2d2d6564 2d2d2d2d 73250a2d 0000000a     de-------.%s....
   1e930:	25203d6a 00000a64 20474244 20646d63     j= %d...DBG cmd 
   1e940:	7325203d 616d202c 203d2063 202c7325     = %s, mac = %s, 
   1e950:	6f666e69 25203d20 00000a73 6e6f736a     info = %s...json
   1e960:	6f6c4332 61446475 6d206174 6f6c6c61     2CloudData mallo
   1e970:	61662063 00006c69 6976696c 7220676e     c fail..living r
   1e980:	006d6f6f 4c766564 7461636f 006e6f69     oom.devLocation.
   1e990:	54766564 00657079 706d6574 00000000     devType.temp....
   1e9a0:	00007675 56302e33 00000000 74746142     uv..3.0V....Batt
   1e9b0:	00797265 49535352 00000000 706d6554     ery.RSSI....Temp
   1e9c0:	74617265 00657275 69676572 61727473     erature.registra
   1e9d0:	6e6f6974 00000000 65646f6e 00004449     tion....nodeID..
   1e9e0:	49207325 00000a6e 4e646e65 4965646f     %s In...endNodeI
   1e9f0:	006f666e 00012c60 00012c6e 00012c7c     nfo.`,..n,..|,..
   1ea00:	00012c8a 00012c98 00013198 000131a6     .,...,...1...1..
   1ea10:	000131b4 000131c2 000131d0 42000000     .1...1...1.....B
   1ea20:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   1ea30:	43000400 0b0a0908 00000d0c 00014754     ...C........TG..
   1ea40:	00014762 00014770 0001477e 0001478c     bG..pG..~G...G..
   1ea50:	00014f14 00014f22 00014f30 00014f3e     .O.."O..0O..>O..
   1ea60:	00014f4c 00015eba 00015f36 00015f36     LO...^..6_..6_..
   1ea70:	00015eda 00015ed4 00015ee0 00015ec0     .^...^...^...^..
   1ea80:	00015ee6 00015f1c 000161f0 0001624e     .^..._...a..Nb..
   1ea90:	0001624e 0001624a 000161e2 00016202     Nb..Jb...a...b..
   1eaa0:	000161ce 00016210 00016222 000162ae     .a...b.."b...b..
   1eab0:	000162fe 000162fe 000162fe 000162a0     .b...b...b...b..
   1eac0:	000162c0 0001628e 000162ce 000162e8     .b...b...b...b..
   1ead0:	0001636e 000163d4 000163d4 000163d0     nc...c...c...c..
   1eae0:	00016356 00016386 0001633e 0001639e     Vc...c..>c...c..
   1eaf0:	000163b8 000166bc 000166ca 000166d8     .c...f...f...f..
   1eb00:	000166e6 000166f4 00016eb4 00016ec2     .f...f...n...n..
   1eb10:	00016ed0 00016ede 00016eec 42002000     .n...n...n... .B
   1eb20:	42002400 43000800 001d1b1b 00000002     .$.B...C........
   1eb30:	00000100 00000002 00000200 00000003     ................
   1eb40:	00000004 5d64255b 49535320 73253a44     ....[%d] SSID:%s
   1eb50:	00000a0d 5453414d 00535245 6e756f46     ....MASTERS.Foun
   1eb60:	73252064 000a0d20 7263696d 6968636f     d %s ...microchi
   1eb70:	00000070 206e6163 20746f6e 646e6966     p...can not find
   1eb80:	20504120 0a0d7325 00000000 462d6957      AP %s......Wi-F
   1eb90:	69642069 6e6f6373 7463656e 000d6465     i disconnected..
   1eba0:	462d6957 6f632069 63656e6e 0d646574     Wi-Fi connected.
   1ebb0:	00000000 462d6957 50492069 20736920     ....Wi-Fi IP is 
   1ebc0:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
   1ebd0:	614c0a0d 72207473 74657365 75616320     ..Last reset cau
   1ebe0:	203a6573 00000000 74737953 52206d65     se: ....System R
   1ebf0:	74657365 71655220 74736575 0000000d     eset Request....
   1ec00:	63746157 676f6468 73655220 000d7465     Watchdog Reset..
   1ec10:	65747845 6c616e72 73655220 000d7465     External Reset..
   1ec20:	776f7242 754f206e 33332074 74654420     Brown Out 33 Det
   1ec30:	6f746365 65522072 0d746573 00000000     ector Reset.....
   1ec40:	776f7242 754f206e 32312074 74654420     Brown Out 12 Det
   1ec50:	6f746365 65522072 0d746573 00000000     ector Reset.....
   1ec60:	65776f50 6e4f2d72 73655220 000d7465     Power-On Reset..
   1ec70:	57202d2d 31434e49 20303035 73205041     -- WINC1500 AP s
   1ec80:	206e6163 6d617865 20656c70 0a0d2d2d     can example --..
   1ec90:	53202d2d 33524d41 50585f30 4e49414c     -- SAMR30_XPLAIN
   1eca0:	505f4445 2d204f52 2d0a0d2d 6f43202d     ED_PRO --..-- Co
   1ecb0:	6c69706d 203a6465 20636544 32203031     mpiled: Dec 10 2
   1ecc0:	20383130 323a3431 34303a31 0d2d2d20     018 14:21:04 --.
   1ecd0:	00000000 0000000d 74696e49 696c6169     ........Initiali
   1ece0:	676e697a 4e535720 65442020 65636976     zing WSN  Device
   1ecf0:	0000000d 5f757063 71657266 0a64253d     ....cpu_freq=%d.
   1ed00:	00000000 65646f4e 00000000 65646f4e     ....Node....Node
   1ed10:	3a644920 0a0d7325 00000000 65646f4e      Id:%s......Node
   1ed20:	203a6449 202c6425 706d6554 2c64253a     Id: %d, Temp:%d,
   1ed30:	53522020 203a4953 0a0d6425 00000000       RSSI: %d......
   1ed40:	6e6e6f63 65746365 6f742064 53574120     connected to AWS
   1ed50:	546f4920 6f6c4320 2e206475 000d2e2e      IoT Cloud .....
   1ed60:	756f6c43 6f632064 63656e6e 61662074     Cloud connect fa
   1ed70:	2e2e6c69 00000d2e 36636573 756f6330     il......sec60cou
   1ed80:	203d746e 0a0d6425 00000000 5f775f72     nt= %d......r_w_
   1ed90:	00726f63 5f785f72 00726f63 5f795f72     cor.r_x_cor.r_y_
   1eda0:	00726f63 5f7a5f72 00726f63 69666977     cor.r_z_cor.wifi
   1edb0:	736e6553 6f42726f 00647261 706d6574     SensorBoard.temp
   1edc0:	00000000 006d7568 00007675 73657270     ....hum.uv..pres
   1edd0:	65727573 00000000 706d6554 74617265     sure....Temperat
   1ede0:	00657275 49535352 00000000 74746142     ure.RSSI....Batt
   1edf0:	00797265 49207325 00000a6e 732a2e25     ery.%s In...%.*s
   1ee00:	2a2e2509 00000073 00000d0a 6f666e69     .%.*s.......info
   1ee10:	2d2d2d20 74616420 70795461 25203a65      --- dataType: %
   1ee20:	76202c73 203a6c61 000a6425 0000000d     s, val: %d......
   1ee30:	3a474244 6d657420 61726570 65727574     DBG: temperature
   1ee40:	25203d20 68202c64 64696d75 20797469      = %d, humidity 
   1ee50:	6425203d 7675202c 25203d20 70202c64     = %d, uv = %d, p
   1ee60:	73736572 20657275 6425203d 00000a0d     ressure = %d....
   1ee70:	3164656c 00000000 5d50415b 50435420     led1....[AP] TCP
   1ee80:	72657320 20726576 6b636f73 25207465      server socket %
   1ee90:	6c632064 6465736f 21642520 00000a0d     d closed %d!....
   1eea0:	50504128 4e492829 00294f46 5d50415b     (APP)(INFO).[AP]
   1eeb0:	50435420 636f7320 2074656b 646e6962      TCP socket bind
   1eec0:	63757320 73736563 00000d21 5d50415b      success!...[AP]
   1eed0:	6e694220 61462064 64656c69 7245202e      Bind Failed. Er
   1eee0:	20726f72 65646f63 25203d20 000a0d64     ror code = %d...
   1eef0:	5d50415b 50435420 72657320 20726576     [AP] TCP server 
   1ef00:	6b636f73 25207465 6c632064 6465736f     socket %d closed
   1ef10:	000a0d21 5d50415b 50435420 72655320     !...[AP] TCP Ser
   1ef20:	20726576 6b636f53 43207465 74616572     ver Socket Creat
   1ef30:	206e6f69 6c696146 000d6465 646e6573     ion Failed..send
   1ef40:	74616420 6c202c61 3d206e65 0d642520      data, len = %d.
   1ef50:	0000000a 646e6573 0d212120 00000000     ....send !!.....
   1ef60:	44495353 6e656c20 0d64253d 0000000a     SSID len=%d.....
   1ef70:	44495353 73253d20 00000a0d 74697257     SSID =%s....Writ
   1ef80:	6f632065 6769666e 67617020 00000d65     e config page...
   1ef90:	20474244 44495353 0d73253d 0000000a     DBG SSID=%s.....
   1efa0:	6675625b 6f6f7420 616d7320 005d6c6c     [buf too small].
   1efb0:	61637461 65725f62 735f6461 61697265     atcab_read_seria
   1efc0:	756e5f6c 7265626d 66202928 656c6961     l_number() faile
   1efd0:	69772064 72206874 303d7465 38302578     d with ret=0x%08
   1efe0:	000a0d58 61637461 6e695f62 29286f66     X...atcab_info()
   1eff0:	69616620 2064656c 68746977 74657220      failed with ret
   1f000:	2578303d 0d583830 0000000a 70797243     =0x%08X.....Cryp
   1f010:	44206f74 63697665 000d3a65 4e532020     to Device:..  SN
   1f020:	2020203a 20202020 25202020 000a0d73     :          %s...
   1f030:	65442020 76655276 2020203a 25202020       DevRev:      %
   1f040:	000a0d73 69666977 3a62635f 4d324d20     s...wifi_cb: M2M
   1f050:	4649575f 45525f49 435f5053 535f4e4f     _WIFI_RESP_CON_S
   1f060:	45544154 4148435f 4445474e 4f43203a     TATE_CHANGED: CO
   1f070:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
   1f080:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
   1f090:	435f5053 535f4e4f 45544154 4148435f     SP_CON_STATE_CHA
   1f0a0:	4445474e 4944203a 4e4f4353 5443454e     NGED: DISCONNECT
   1f0b0:	000d4445 69666977 3a62635f 4d324d20     ED..wifi_cb: M2M
   1f0c0:	4649575f 45525f49 48445f51 435f5043     _WIFI_REQ_DHCP_C
   1f0d0:	3a464e4f 20504920 25207369 75252e75     ONF: IP is %u.%u
   1f0e0:	2e75252e 0a0d7525 00000000 65636552     .%u.%u......Rece
   1f0f0:	64657669 6d697420 00000d65 50504128     ived time...(APP
   1f100:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1f110:	5f6d326d 5f6c7373 72746572 65766569     m2m_ssl_retrieve
   1f120:	7265635f 20292874 6c696166 77206465     _cert() failed w
   1f130:	20687469 3d746572 00006425 5f6d326d     ith ret=%d..m2m_
   1f140:	5f6c7373 72746572 65766569 7361685f     ssl_retrieve_has
   1f150:	20292868 6c696166 77206465 20687469     h() failed with 
   1f160:	3d746572 00006425 4c535f5f 3d20544f     ret=%d..__SLOT =
   1f170:	2c752520 72724520 25203d20 00000a58      %u, Err = %X...
   1f180:	69746341 53436576 74696220 3a70616d     ActiveCS bitmap:
   1f190:	78343025 0000000a 20656854 70797243     %04x....The Cryp
   1f1a0:	75416f74 694c6874 696c2062 72617262     toAuthLib librar
   1f1b0:	61662079 64656c69 206f7420 74696e69     y failed to init
   1f1c0:	696c6169 002e657a 20656854 43455441     ialize..The ATEC
   1f1d0:	38303543 65642041 65636976 20736920     C508A device is 
   1f1e0:	20746f6e 666e6f63 72756769 63206465     not configured c
   1f1f0:	6572726f 796c7463 0000002e 20656854     orrectly....The 
   1f200:	43455441 38303543 65642041 65636976     ATECC508A device
   1f210:	74616420 6f7a2061 6920656e 6f6e2073      data zone is no
   1f220:	6e6f6320 75676966 2e646572 00000d20      configured. ...
   1f230:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   1f240:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
   1f250:	0d296425 0000000a 6e69616d 326d203a     %d).....main: m2
   1f260:	73735f6d 6e695f6c 63207469 206c6c61     m_ssl_init call 
   1f270:	6f727265 25282172 0a0d2964 00000000     error!(%d)......
   1f280:	6e69616d 326d203a 73735f6d 65735f6c     main: m2m_ssl_se
   1f290:	63615f74 65766974 7069635f 73726568     t_active_ciphers
   1f2a0:	65746975 61632073 65206c6c 726f7272     uites call error
   1f2b0:	64252821 000a0d29 6e696854 616e2067     !(%d)...Thing na
   1f2c0:	3d20656d 0d732520 0000000a 61746164     me = %s.....data
   1f2d0:	746e6f43 006c6f72 62755367 69726373     Control.gSubscri
   1f2e0:	435f6562 6e6e6168 203a6c65 0a0d7325     be_Channel: %s..
   1f2f0:	00000000 62755067 6873696c 6168435f     ....gPublish_Cha
   1f300:	6c656e6e 7325203a 00000a0d 5453414d     nnel: %s....MAST
   1f310:	00535245 7263696d 6968636f 00000070     ERS.microchip...
   1f320:	6e6e6f63 69746365 4120676e 73202c50     connecting AP, s
   1f330:	20646973 7325203d 70202c20 203d6477     sid = %s , pwd= 
   1f340:	000a7325 00019606 00019566 000195a4     %s......f.......
   1f350:	0001958c 000195de 000195c8              ............

0001f35c <__FUNCTION__.17537>:
   1f35c:	73646365 72705f61 7365636f 69735f73     ecdsa_process_si
   1f36c:	765f6e67 66697265 65725f79 73657571     gn_verify_reques
   1f37c:	00000074                                t...

0001f380 <__FUNCTION__.17549>:
   1f380:	73646365 72705f61 7365636f 69735f73     ecdsa_process_si
   1f390:	675f6e67 725f6e65 65757165 00007473     gn_gen_request..
   1f3a0:	0001a6bc 0001a69e 0001a658 0001a576     ........X...v...
   1f3b0:	0001a658 0001a690 0001a658 0001a576     X.......X...v...
   1f3c0:	0001a69e 0001a69e 0001a690 0001a576     ............v...
   1f3d0:	0001a56e 0001a56e 0001a56e 0001a8d4     n...n...n.......
   1f3e0:	0001af1c 0001addc 0001addc 0001add8     ................
   1f3f0:	0001aef4 0001aef4 0001aee6 0001add8     ................
   1f400:	0001aef4 0001aee6 0001aef4 0001add8     ................
   1f410:	0001aefc 0001aefc 0001aefc 0001b100     ................

0001f420 <_global_impure_ptr>:
   1f420:	20000640 33323130 37363534 62613938     @.. 0123456789ab
   1f430:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   1f440:	76757473 7a797877 00000000              stuvwxyz....

0001f44c <__sf_fake_stderr>:
	...

0001f46c <__sf_fake_stdin>:
	...

0001f48c <__sf_fake_stdout>:
	...
   1f4ac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1f4bc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1f4cc:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1f4dc:	00006665                                ef..

0001f4e0 <_init>:
   1f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4e2:	46c0      	nop			; (mov r8, r8)
   1f4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1f4e6:	bc08      	pop	{r3}
   1f4e8:	469e      	mov	lr, r3
   1f4ea:	4770      	bx	lr

0001f4ec <__init_array_start>:
   1f4ec:	000000dd 	.word	0x000000dd

0001f4f0 <_fini>:
   1f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4f2:	46c0      	nop			; (mov r8, r8)
   1f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1f4f6:	bc08      	pop	{r3}
   1f4f8:	469e      	mov	lr, r3
   1f4fa:	4770      	bx	lr

0001f4fc <__fini_array_start>:
   1f4fc:	000000b5 	.word	0x000000b5
