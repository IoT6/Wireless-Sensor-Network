
Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000092ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  000092ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020088  2**0
                  CONTENTS
  3 .bss          00000bc0  20000088  00009334  00020088  2**2
                  ALLOC
  4 .stack        00002000  20000c48  00009ef4  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005a486  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000081b8  00000000  00000000  0007a58f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012891  00000000  00000000  00082747  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b30  00000000  00000000  00094fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d00  00000000  00000000  00095b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000241b3  00000000  00000000  00098808  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cb4e  00000000  00000000  000bc9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009bc16  00000000  00000000  000d9509  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002784  00000000  00000000  00175120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 2c 00 20 39 50 00 00 35 50 00 00 35 50 00 00     H,. 9P..5P..5P..
	...
      2c:	35 50 00 00 00 00 00 00 00 00 00 00 35 50 00 00     5P..........5P..
      3c:	35 50 00 00 35 50 00 00 f9 0d 00 00 c9 04 00 00     5P..5P..........
      4c:	a5 33 00 00 35 50 00 00 35 50 00 00 35 50 00 00     .3..5P..5P..5P..
      5c:	35 50 00 00 c9 39 00 00 d9 39 00 00 e9 39 00 00     5P...9...9...9..
      6c:	f9 39 00 00 09 3a 00 00 19 3a 00 00 35 50 00 00     .9...:...:..5P..
      7c:	35 50 00 00 35 50 00 00 01 4b 00 00 61 4b 00 00     5P..5P...K..aK..
	...
      94:	c1 4b 00 00 35 50 00 00 35 50 00 00 00 00 00 00     .K..5P..5P......
      a4:	35 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00     5P..............

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	000092ac 	.word	0x000092ac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000008c 	.word	0x2000008c
     108:	000092ac 	.word	0x000092ac
     10c:	000092ac 	.word	0x000092ac
     110:	00000000 	.word	0x00000000

00000114 <at30tse_init>:
     114:	2364      	movs	r3, #100	; 0x64
     116:	2180      	movs	r1, #128	; 0x80
     118:	b510      	push	{r4, lr}
     11a:	b08e      	sub	sp, #56	; 0x38
     11c:	9301      	str	r3, [sp, #4]
     11e:	4b1b      	ldr	r3, [pc, #108]	; (18c <at30tse_init+0x78>)
     120:	aa01      	add	r2, sp, #4
     122:	0389      	lsls	r1, r1, #14
     124:	6053      	str	r3, [r2, #4]
     126:	6111      	str	r1, [r2, #16]
     128:	2300      	movs	r3, #0
     12a:	2124      	movs	r1, #36	; 0x24
     12c:	5453      	strb	r3, [r2, r1]
     12e:	3108      	adds	r1, #8
     130:	5453      	strb	r3, [r2, r1]
     132:	3101      	adds	r1, #1
     134:	5453      	strb	r3, [r2, r1]
     136:	3101      	adds	r1, #1
     138:	5453      	strb	r3, [r2, r1]
     13a:	6093      	str	r3, [r2, #8]
     13c:	7313      	strb	r3, [r2, #12]
     13e:	7613      	strb	r3, [r2, #24]
     140:	6293      	str	r3, [r2, #40]	; 0x28
     142:	33d7      	adds	r3, #215	; 0xd7
     144:	8613      	strh	r3, [r2, #48]	; 0x30
     146:	4b12      	ldr	r3, [pc, #72]	; (190 <at30tse_init+0x7c>)
     148:	4c12      	ldr	r4, [pc, #72]	; (194 <at30tse_init+0x80>)
     14a:	9306      	str	r3, [sp, #24]
     14c:	4b12      	ldr	r3, [pc, #72]	; (198 <at30tse_init+0x84>)
     14e:	4913      	ldr	r1, [pc, #76]	; (19c <at30tse_init+0x88>)
     150:	61d3      	str	r3, [r2, #28]
     152:	4b13      	ldr	r3, [pc, #76]	; (1a0 <at30tse_init+0x8c>)
     154:	0020      	movs	r0, r4
     156:	6213      	str	r3, [r2, #32]
     158:	4b12      	ldr	r3, [pc, #72]	; (1a4 <at30tse_init+0x90>)
     15a:	4798      	blx	r3
     15c:	2107      	movs	r1, #7
     15e:	6822      	ldr	r2, [r4, #0]
     160:	69d3      	ldr	r3, [r2, #28]
     162:	4219      	tst	r1, r3
     164:	d1fc      	bne.n	160 <at30tse_init+0x4c>
     166:	2102      	movs	r1, #2
     168:	6813      	ldr	r3, [r2, #0]
     16a:	2010      	movs	r0, #16
     16c:	430b      	orrs	r3, r1
     16e:	6013      	str	r3, [r2, #0]
     170:	88e4      	ldrh	r4, [r4, #6]
     172:	2300      	movs	r3, #0
     174:	e002      	b.n	17c <at30tse_init+0x68>
     176:	3301      	adds	r3, #1
     178:	42a3      	cmp	r3, r4
     17a:	d204      	bcs.n	186 <at30tse_init+0x72>
     17c:	8b51      	ldrh	r1, [r2, #26]
     17e:	4208      	tst	r0, r1
     180:	d0f9      	beq.n	176 <at30tse_init+0x62>
     182:	b00e      	add	sp, #56	; 0x38
     184:	bd10      	pop	{r4, pc}
     186:	8350      	strh	r0, [r2, #26]
     188:	e7fb      	b.n	182 <at30tse_init+0x6e>
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00000d48 	.word	0x00000d48
     190:	2710ffff 	.word	0x2710ffff
     194:	20000280 	.word	0x20000280
     198:	00100003 	.word	0x00100003
     19c:	42000c00 	.word	0x42000c00
     1a0:	00110003 	.word	0x00110003
     1a4:	000009e5 	.word	0x000009e5

000001a8 <at30tse_read_temperature>:
     1a8:	2300      	movs	r3, #0
     1aa:	b570      	push	{r4, r5, r6, lr}
     1ac:	4a2e      	ldr	r2, [pc, #184]	; (268 <at30tse_read_temperature+0xc0>)
     1ae:	b088      	sub	sp, #32
     1b0:	4e2e      	ldr	r6, [pc, #184]	; (26c <at30tse_read_temperature+0xc4>)
     1b2:	9202      	str	r2, [sp, #8]
     1b4:	4a2e      	ldr	r2, [pc, #184]	; (270 <at30tse_read_temperature+0xc8>)
     1b6:	ac01      	add	r4, sp, #4
     1b8:	a902      	add	r1, sp, #8
     1ba:	ad05      	add	r5, sp, #20
     1bc:	720b      	strb	r3, [r1, #8]
     1be:	724b      	strb	r3, [r1, #9]
     1c0:	728b      	strb	r3, [r1, #10]
     1c2:	9205      	str	r2, [sp, #20]
     1c4:	7023      	strb	r3, [r4, #0]
     1c6:	7063      	strb	r3, [r4, #1]
     1c8:	722b      	strb	r3, [r5, #8]
     1ca:	726b      	strb	r3, [r5, #9]
     1cc:	72ab      	strb	r3, [r5, #10]
     1ce:	0030      	movs	r0, r6
     1d0:	4b28      	ldr	r3, [pc, #160]	; (274 <at30tse_read_temperature+0xcc>)
     1d2:	604c      	str	r4, [r1, #4]
     1d4:	9406      	str	r4, [sp, #24]
     1d6:	4798      	blx	r3
     1d8:	4b27      	ldr	r3, [pc, #156]	; (278 <at30tse_read_temperature+0xd0>)
     1da:	0029      	movs	r1, r5
     1dc:	0030      	movs	r0, r6
     1de:	4798      	blx	r3
     1e0:	7822      	ldrb	r2, [r4, #0]
     1e2:	7863      	ldrb	r3, [r4, #1]
     1e4:	0212      	lsls	r2, r2, #8
     1e6:	4313      	orrs	r3, r2
     1e8:	b21b      	sxth	r3, r3
     1ea:	b29a      	uxth	r2, r3
     1ec:	2001      	movs	r0, #1
     1ee:	2b00      	cmp	r3, #0
     1f0:	db1d      	blt.n	22e <at30tse_read_temperature+0x86>
     1f2:	4b22      	ldr	r3, [pc, #136]	; (27c <at30tse_read_temperature+0xd4>)
     1f4:	781c      	ldrb	r4, [r3, #0]
     1f6:	2c01      	cmp	r4, #1
     1f8:	d020      	beq.n	23c <at30tse_read_temperature+0x94>
     1fa:	2c00      	cmp	r4, #0
     1fc:	d027      	beq.n	24e <at30tse_read_temperature+0xa6>
     1fe:	2c02      	cmp	r4, #2
     200:	d00b      	beq.n	21a <at30tse_read_temperature+0x72>
     202:	2c03      	cmp	r4, #3
     204:	d12c      	bne.n	260 <at30tse_read_temperature+0xb8>
     206:	0912      	lsrs	r2, r2, #4
     208:	4350      	muls	r0, r2
     20a:	4b1d      	ldr	r3, [pc, #116]	; (280 <at30tse_read_temperature+0xd8>)
     20c:	4798      	blx	r3
     20e:	2200      	movs	r2, #0
     210:	4b1c      	ldr	r3, [pc, #112]	; (284 <at30tse_read_temperature+0xdc>)
     212:	4c1d      	ldr	r4, [pc, #116]	; (288 <at30tse_read_temperature+0xe0>)
     214:	47a0      	blx	r4
     216:	b008      	add	sp, #32
     218:	bd70      	pop	{r4, r5, r6, pc}
     21a:	0952      	lsrs	r2, r2, #5
     21c:	4b18      	ldr	r3, [pc, #96]	; (280 <at30tse_read_temperature+0xd8>)
     21e:	4350      	muls	r0, r2
     220:	4798      	blx	r3
     222:	23ff      	movs	r3, #255	; 0xff
     224:	2200      	movs	r2, #0
     226:	059b      	lsls	r3, r3, #22
     228:	4c17      	ldr	r4, [pc, #92]	; (288 <at30tse_read_temperature+0xe0>)
     22a:	47a0      	blx	r4
     22c:	e7f3      	b.n	216 <at30tse_read_temperature+0x6e>
     22e:	4b13      	ldr	r3, [pc, #76]	; (27c <at30tse_read_temperature+0xd4>)
     230:	0452      	lsls	r2, r2, #17
     232:	781c      	ldrb	r4, [r3, #0]
     234:	0c52      	lsrs	r2, r2, #17
     236:	3802      	subs	r0, #2
     238:	2c01      	cmp	r4, #1
     23a:	d1de      	bne.n	1fa <at30tse_read_temperature+0x52>
     23c:	0992      	lsrs	r2, r2, #6
     23e:	4b10      	ldr	r3, [pc, #64]	; (280 <at30tse_read_temperature+0xd8>)
     240:	4350      	muls	r0, r2
     242:	4798      	blx	r3
     244:	2200      	movs	r2, #0
     246:	4b11      	ldr	r3, [pc, #68]	; (28c <at30tse_read_temperature+0xe4>)
     248:	4c0f      	ldr	r4, [pc, #60]	; (288 <at30tse_read_temperature+0xe0>)
     24a:	47a0      	blx	r4
     24c:	e7e3      	b.n	216 <at30tse_read_temperature+0x6e>
     24e:	09d2      	lsrs	r2, r2, #7
     250:	4b0b      	ldr	r3, [pc, #44]	; (280 <at30tse_read_temperature+0xd8>)
     252:	4350      	muls	r0, r2
     254:	4798      	blx	r3
     256:	2200      	movs	r2, #0
     258:	4b0d      	ldr	r3, [pc, #52]	; (290 <at30tse_read_temperature+0xe8>)
     25a:	4c0b      	ldr	r4, [pc, #44]	; (288 <at30tse_read_temperature+0xe0>)
     25c:	47a0      	blx	r4
     25e:	e7da      	b.n	216 <at30tse_read_temperature+0x6e>
     260:	2000      	movs	r0, #0
     262:	2100      	movs	r1, #0
     264:	e7d7      	b.n	216 <at30tse_read_temperature+0x6e>
     266:	46c0      	nop			; (mov r8, r8)
     268:	0001004f 	.word	0x0001004f
     26c:	20000280 	.word	0x20000280
     270:	0002004f 	.word	0x0002004f
     274:	00000ce9 	.word	0x00000ce9
     278:	00000cd5 	.word	0x00000cd5
     27c:	200000a4 	.word	0x200000a4
     280:	00007ab9 	.word	0x00007ab9
     284:	3fb00000 	.word	0x3fb00000
     288:	00006f25 	.word	0x00006f25
     28c:	3fd00000 	.word	0x3fd00000
     290:	3fe00000 	.word	0x3fe00000

00000294 <rtc_count_enable>:
     294:	2104      	movs	r1, #4
     296:	4b08      	ldr	r3, [pc, #32]	; (2b8 <rtc_count_enable+0x24>)
     298:	6802      	ldr	r2, [r0, #0]
     29a:	6019      	str	r1, [r3, #0]
     29c:	6801      	ldr	r1, [r0, #0]
     29e:	690b      	ldr	r3, [r1, #16]
     2a0:	2b00      	cmp	r3, #0
     2a2:	d1fc      	bne.n	29e <rtc_count_enable+0xa>
     2a4:	2102      	movs	r1, #2
     2a6:	8813      	ldrh	r3, [r2, #0]
     2a8:	430b      	orrs	r3, r1
     2aa:	8013      	strh	r3, [r2, #0]
     2ac:	6802      	ldr	r2, [r0, #0]
     2ae:	6913      	ldr	r3, [r2, #16]
     2b0:	2b00      	cmp	r3, #0
     2b2:	d1fc      	bne.n	2ae <rtc_count_enable+0x1a>
     2b4:	4770      	bx	lr
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	e000e100 	.word	0xe000e100

000002bc <rtc_count_disable>:
     2bc:	b510      	push	{r4, lr}
     2be:	2280      	movs	r2, #128	; 0x80
     2c0:	2404      	movs	r4, #4
     2c2:	4909      	ldr	r1, [pc, #36]	; (2e8 <rtc_count_disable+0x2c>)
     2c4:	6803      	ldr	r3, [r0, #0]
     2c6:	508c      	str	r4, [r1, r2]
     2c8:	6801      	ldr	r1, [r0, #0]
     2ca:	690a      	ldr	r2, [r1, #16]
     2cc:	2a00      	cmp	r2, #0
     2ce:	d1fc      	bne.n	2ca <rtc_count_disable+0xe>
     2d0:	2102      	movs	r1, #2
     2d2:	4a06      	ldr	r2, [pc, #24]	; (2ec <rtc_count_disable+0x30>)
     2d4:	811a      	strh	r2, [r3, #8]
     2d6:	819a      	strh	r2, [r3, #12]
     2d8:	881a      	ldrh	r2, [r3, #0]
     2da:	438a      	bics	r2, r1
     2dc:	801a      	strh	r2, [r3, #0]
     2de:	6802      	ldr	r2, [r0, #0]
     2e0:	6913      	ldr	r3, [r2, #16]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d1fc      	bne.n	2e0 <rtc_count_disable+0x24>
     2e6:	bd10      	pop	{r4, pc}
     2e8:	e000e100 	.word	0xe000e100
     2ec:	ffff81ff 	.word	0xffff81ff

000002f0 <rtc_count_init>:
     2f0:	b570      	push	{r4, r5, r6, lr}
     2f2:	6001      	str	r1, [r0, #0]
     2f4:	2180      	movs	r1, #128	; 0x80
     2f6:	0003      	movs	r3, r0
     2f8:	4843      	ldr	r0, [pc, #268]	; (408 <rtc_count_init+0x118>)
     2fa:	0049      	lsls	r1, r1, #1
     2fc:	6944      	ldr	r4, [r0, #20]
     2fe:	2504      	movs	r5, #4
     300:	4321      	orrs	r1, r4
     302:	6141      	str	r1, [r0, #20]
     304:	2000      	movs	r0, #0
     306:	4941      	ldr	r1, [pc, #260]	; (40c <rtc_count_init+0x11c>)
     308:	4c41      	ldr	r4, [pc, #260]	; (410 <rtc_count_init+0x120>)
     30a:	6108      	str	r0, [r1, #16]
     30c:	2180      	movs	r1, #128	; 0x80
     30e:	6818      	ldr	r0, [r3, #0]
     310:	5065      	str	r5, [r4, r1]
     312:	681c      	ldr	r4, [r3, #0]
     314:	6921      	ldr	r1, [r4, #16]
     316:	2900      	cmp	r1, #0
     318:	d1fc      	bne.n	314 <rtc_count_init+0x24>
     31a:	2402      	movs	r4, #2
     31c:	493d      	ldr	r1, [pc, #244]	; (414 <rtc_count_init+0x124>)
     31e:	8101      	strh	r1, [r0, #8]
     320:	8181      	strh	r1, [r0, #12]
     322:	8801      	ldrh	r1, [r0, #0]
     324:	43a1      	bics	r1, r4
     326:	8001      	strh	r1, [r0, #0]
     328:	681c      	ldr	r4, [r3, #0]
     32a:	6921      	ldr	r1, [r4, #16]
     32c:	2900      	cmp	r1, #0
     32e:	d1fc      	bne.n	32a <rtc_count_init+0x3a>
     330:	8699      	strh	r1, [r3, #52]	; 0x34
     332:	86d9      	strh	r1, [r3, #54]	; 0x36
     334:	6921      	ldr	r1, [r4, #16]
     336:	2900      	cmp	r1, #0
     338:	d1fc      	bne.n	334 <rtc_count_init+0x44>
     33a:	2401      	movs	r4, #1
     33c:	8801      	ldrh	r1, [r0, #0]
     33e:	4321      	orrs	r1, r4
     340:	8001      	strh	r1, [r0, #0]
     342:	6818      	ldr	r0, [r3, #0]
     344:	6901      	ldr	r1, [r0, #16]
     346:	2900      	cmp	r1, #0
     348:	d1fc      	bne.n	344 <rtc_count_init+0x54>
     34a:	7891      	ldrb	r1, [r2, #2]
     34c:	7119      	strb	r1, [r3, #4]
     34e:	4932      	ldr	r1, [pc, #200]	; (418 <rtc_count_init+0x128>)
     350:	600b      	str	r3, [r1, #0]
     352:	7911      	ldrb	r1, [r2, #4]
     354:	8814      	ldrh	r4, [r2, #0]
     356:	03c9      	lsls	r1, r1, #15
     358:	6818      	ldr	r0, [r3, #0]
     35a:	4321      	orrs	r1, r4
     35c:	b289      	uxth	r1, r1
     35e:	8001      	strh	r1, [r0, #0]
     360:	7891      	ldrb	r1, [r2, #2]
     362:	2900      	cmp	r1, #0
     364:	d020      	beq.n	3a8 <rtc_count_init+0xb8>
     366:	2901      	cmp	r1, #1
     368:	d001      	beq.n	36e <rtc_count_init+0x7e>
     36a:	2017      	movs	r0, #23
     36c:	bd70      	pop	{r4, r5, r6, pc}
     36e:	8801      	ldrh	r1, [r0, #0]
     370:	b289      	uxth	r1, r1
     372:	8001      	strh	r1, [r0, #0]
     374:	78d1      	ldrb	r1, [r2, #3]
     376:	2900      	cmp	r1, #0
     378:	d139      	bne.n	3ee <rtc_count_init+0xfe>
     37a:	6890      	ldr	r0, [r2, #8]
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	690a      	ldr	r2, [r1, #16]
     380:	2a00      	cmp	r2, #0
     382:	d1fc      	bne.n	37e <rtc_count_init+0x8e>
     384:	791a      	ldrb	r2, [r3, #4]
     386:	2a00      	cmp	r2, #0
     388:	d008      	beq.n	39c <rtc_count_init+0xac>
     38a:	2a01      	cmp	r2, #1
     38c:	d104      	bne.n	398 <rtc_count_init+0xa8>
     38e:	6208      	str	r0, [r1, #32]
     390:	681a      	ldr	r2, [r3, #0]
     392:	6913      	ldr	r3, [r2, #16]
     394:	2b00      	cmp	r3, #0
     396:	d1fc      	bne.n	392 <rtc_count_init+0xa2>
     398:	2000      	movs	r0, #0
     39a:	e7e7      	b.n	36c <rtc_count_init+0x7c>
     39c:	4a1f      	ldr	r2, [pc, #124]	; (41c <rtc_count_init+0x12c>)
     39e:	4290      	cmp	r0, r2
     3a0:	d8fa      	bhi.n	398 <rtc_count_init+0xa8>
     3a2:	b280      	uxth	r0, r0
     3a4:	8408      	strh	r0, [r1, #32]
     3a6:	e7f3      	b.n	390 <rtc_count_init+0xa0>
     3a8:	2404      	movs	r4, #4
     3aa:	8801      	ldrh	r1, [r0, #0]
     3ac:	4321      	orrs	r1, r4
     3ae:	8001      	strh	r1, [r0, #0]
     3b0:	78d1      	ldrb	r1, [r2, #3]
     3b2:	2017      	movs	r0, #23
     3b4:	2900      	cmp	r1, #0
     3b6:	d1d9      	bne.n	36c <rtc_count_init+0x7c>
     3b8:	2000      	movs	r0, #0
     3ba:	681c      	ldr	r4, [r3, #0]
     3bc:	4e17      	ldr	r6, [pc, #92]	; (41c <rtc_count_init+0x12c>)
     3be:	3208      	adds	r2, #8
     3c0:	6815      	ldr	r5, [r2, #0]
     3c2:	6921      	ldr	r1, [r4, #16]
     3c4:	2900      	cmp	r1, #0
     3c6:	d1fc      	bne.n	3c2 <rtc_count_init+0xd2>
     3c8:	7919      	ldrb	r1, [r3, #4]
     3ca:	2900      	cmp	r1, #0
     3cc:	d014      	beq.n	3f8 <rtc_count_init+0x108>
     3ce:	2901      	cmp	r1, #1
     3d0:	d107      	bne.n	3e2 <rtc_count_init+0xf2>
     3d2:	0001      	movs	r1, r0
     3d4:	3108      	adds	r1, #8
     3d6:	0089      	lsls	r1, r1, #2
     3d8:	510d      	str	r5, [r1, r4]
     3da:	681c      	ldr	r4, [r3, #0]
     3dc:	6921      	ldr	r1, [r4, #16]
     3de:	2900      	cmp	r1, #0
     3e0:	d1fc      	bne.n	3dc <rtc_count_init+0xec>
     3e2:	3001      	adds	r0, #1
     3e4:	3204      	adds	r2, #4
     3e6:	2802      	cmp	r0, #2
     3e8:	d1ea      	bne.n	3c0 <rtc_count_init+0xd0>
     3ea:	2000      	movs	r0, #0
     3ec:	e7be      	b.n	36c <rtc_count_init+0x7c>
     3ee:	2480      	movs	r4, #128	; 0x80
     3f0:	8801      	ldrh	r1, [r0, #0]
     3f2:	4321      	orrs	r1, r4
     3f4:	8001      	strh	r1, [r0, #0]
     3f6:	e7c0      	b.n	37a <rtc_count_init+0x8a>
     3f8:	42b5      	cmp	r5, r6
     3fa:	d8f2      	bhi.n	3e2 <rtc_count_init+0xf2>
     3fc:	0001      	movs	r1, r0
     3fe:	3110      	adds	r1, #16
     400:	b2ad      	uxth	r5, r5
     402:	0049      	lsls	r1, r1, #1
     404:	530d      	strh	r5, [r1, r4]
     406:	e7e8      	b.n	3da <rtc_count_init+0xea>
     408:	40000400 	.word	0x40000400
     40c:	40001000 	.word	0x40001000
     410:	e000e100 	.word	0xe000e100
     414:	ffff81ff 	.word	0xffff81ff
     418:	2000028c 	.word	0x2000028c
     41c:	0000ffff 	.word	0x0000ffff

00000420 <rtc_count_set_period>:
     420:	7902      	ldrb	r2, [r0, #4]
     422:	0003      	movs	r3, r0
     424:	2015      	movs	r0, #21
     426:	2a00      	cmp	r2, #0
     428:	d000      	beq.n	42c <rtc_count_set_period+0xc>
     42a:	4770      	bx	lr
     42c:	681a      	ldr	r2, [r3, #0]
     42e:	6910      	ldr	r0, [r2, #16]
     430:	2800      	cmp	r0, #0
     432:	d1fc      	bne.n	42e <rtc_count_set_period+0xe>
     434:	8391      	strh	r1, [r2, #28]
     436:	681a      	ldr	r2, [r3, #0]
     438:	6913      	ldr	r3, [r2, #16]
     43a:	2b00      	cmp	r3, #0
     43c:	d1fc      	bne.n	438 <rtc_count_set_period+0x18>
     43e:	2000      	movs	r0, #0
     440:	e7f3      	b.n	42a <rtc_count_set_period+0xa>
     442:	46c0      	nop			; (mov r8, r8)

00000444 <rtc_count_register_callback>:
     444:	2a0a      	cmp	r2, #10
     446:	d001      	beq.n	44c <rtc_count_register_callback+0x8>
     448:	2a07      	cmp	r2, #7
     44a:	d80b      	bhi.n	464 <rtc_count_register_callback+0x20>
     44c:	1c93      	adds	r3, r2, #2
     44e:	009b      	lsls	r3, r3, #2
     450:	5019      	str	r1, [r3, r0]
     452:	2301      	movs	r3, #1
     454:	4093      	lsls	r3, r2
     456:	8e81      	ldrh	r1, [r0, #52]	; 0x34
     458:	430b      	orrs	r3, r1
     45a:	b29b      	uxth	r3, r3
     45c:	8683      	strh	r3, [r0, #52]	; 0x34
     45e:	2300      	movs	r3, #0
     460:	0018      	movs	r0, r3
     462:	4770      	bx	lr
     464:	7903      	ldrb	r3, [r0, #4]
     466:	2b00      	cmp	r3, #0
     468:	d005      	beq.n	476 <rtc_count_register_callback+0x32>
     46a:	2b01      	cmp	r3, #1
     46c:	d105      	bne.n	47a <rtc_count_register_callback+0x36>
     46e:	3316      	adds	r3, #22
     470:	2a09      	cmp	r2, #9
     472:	d8f5      	bhi.n	460 <rtc_count_register_callback+0x1c>
     474:	e7ea      	b.n	44c <rtc_count_register_callback+0x8>
     476:	2a0a      	cmp	r2, #10
     478:	d9e8      	bls.n	44c <rtc_count_register_callback+0x8>
     47a:	2317      	movs	r3, #23
     47c:	e7f0      	b.n	460 <rtc_count_register_callback+0x1c>
     47e:	46c0      	nop			; (mov r8, r8)

00000480 <rtc_count_enable_callback>:
     480:	b530      	push	{r4, r5, lr}
     482:	6804      	ldr	r4, [r0, #0]
     484:	290a      	cmp	r1, #10
     486:	d017      	beq.n	4b8 <rtc_count_enable_callback+0x38>
     488:	2907      	cmp	r1, #7
     48a:	d910      	bls.n	4ae <rtc_count_enable_callback+0x2e>
     48c:	2301      	movs	r3, #1
     48e:	000a      	movs	r2, r1
     490:	001d      	movs	r5, r3
     492:	3a08      	subs	r2, #8
     494:	4095      	lsls	r5, r2
     496:	022a      	lsls	r2, r5, #8
     498:	25c0      	movs	r5, #192	; 0xc0
     49a:	408b      	lsls	r3, r1
     49c:	00ad      	lsls	r5, r5, #2
     49e:	402a      	ands	r2, r5
     4a0:	8162      	strh	r2, [r4, #10]
     4a2:	001a      	movs	r2, r3
     4a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     4a6:	4313      	orrs	r3, r2
     4a8:	b29b      	uxth	r3, r3
     4aa:	86c3      	strh	r3, [r0, #54]	; 0x36
     4ac:	bd30      	pop	{r4, r5, pc}
     4ae:	2201      	movs	r2, #1
     4b0:	408a      	lsls	r2, r1
     4b2:	b293      	uxth	r3, r2
     4b4:	8163      	strh	r3, [r4, #10]
     4b6:	e7f5      	b.n	4a4 <rtc_count_enable_callback+0x24>
     4b8:	2280      	movs	r2, #128	; 0x80
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <rtc_count_enable_callback+0x44>)
     4bc:	00d2      	lsls	r2, r2, #3
     4be:	8163      	strh	r3, [r4, #10]
     4c0:	e7f0      	b.n	4a4 <rtc_count_enable_callback+0x24>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	ffff8000 	.word	0xffff8000

000004c8 <RTC_Handler>:
     4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ca:	4b3a      	ldr	r3, [pc, #232]	; (5b4 <RTC_Handler+0xec>)
     4cc:	681f      	ldr	r7, [r3, #0]
     4ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
     4d0:	683d      	ldr	r5, [r7, #0]
     4d2:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
     4d4:	401e      	ands	r6, r3
     4d6:	89ab      	ldrh	r3, [r5, #12]
     4d8:	896c      	ldrh	r4, [r5, #10]
     4da:	401c      	ands	r4, r3
     4dc:	b223      	sxth	r3, r4
     4de:	2b00      	cmp	r3, #0
     4e0:	db51      	blt.n	586 <RTC_Handler+0xbe>
     4e2:	23ff      	movs	r3, #255	; 0xff
     4e4:	4223      	tst	r3, r4
     4e6:	d042      	beq.n	56e <RTC_Handler+0xa6>
     4e8:	3bfe      	subs	r3, #254	; 0xfe
     4ea:	4223      	tst	r3, r4
     4ec:	d003      	beq.n	4f6 <RTC_Handler+0x2e>
     4ee:	4233      	tst	r3, r6
     4f0:	d001      	beq.n	4f6 <RTC_Handler+0x2e>
     4f2:	68bb      	ldr	r3, [r7, #8]
     4f4:	4798      	blx	r3
     4f6:	2301      	movs	r3, #1
     4f8:	81ab      	strh	r3, [r5, #12]
     4fa:	07a2      	lsls	r2, r4, #30
     4fc:	d504      	bpl.n	508 <RTC_Handler+0x40>
     4fe:	1072      	asrs	r2, r6, #1
     500:	4213      	tst	r3, r2
     502:	d001      	beq.n	508 <RTC_Handler+0x40>
     504:	68fb      	ldr	r3, [r7, #12]
     506:	4798      	blx	r3
     508:	2302      	movs	r3, #2
     50a:	81ab      	strh	r3, [r5, #12]
     50c:	0763      	lsls	r3, r4, #29
     50e:	d503      	bpl.n	518 <RTC_Handler+0x50>
     510:	0773      	lsls	r3, r6, #29
     512:	d501      	bpl.n	518 <RTC_Handler+0x50>
     514:	693b      	ldr	r3, [r7, #16]
     516:	4798      	blx	r3
     518:	2304      	movs	r3, #4
     51a:	81ab      	strh	r3, [r5, #12]
     51c:	0723      	lsls	r3, r4, #28
     51e:	d503      	bpl.n	528 <RTC_Handler+0x60>
     520:	0733      	lsls	r3, r6, #28
     522:	d501      	bpl.n	528 <RTC_Handler+0x60>
     524:	697b      	ldr	r3, [r7, #20]
     526:	4798      	blx	r3
     528:	2308      	movs	r3, #8
     52a:	81ab      	strh	r3, [r5, #12]
     52c:	06e3      	lsls	r3, r4, #27
     52e:	d503      	bpl.n	538 <RTC_Handler+0x70>
     530:	06f3      	lsls	r3, r6, #27
     532:	d501      	bpl.n	538 <RTC_Handler+0x70>
     534:	69bb      	ldr	r3, [r7, #24]
     536:	4798      	blx	r3
     538:	2310      	movs	r3, #16
     53a:	81ab      	strh	r3, [r5, #12]
     53c:	06a3      	lsls	r3, r4, #26
     53e:	d503      	bpl.n	548 <RTC_Handler+0x80>
     540:	06b3      	lsls	r3, r6, #26
     542:	d501      	bpl.n	548 <RTC_Handler+0x80>
     544:	69fb      	ldr	r3, [r7, #28]
     546:	4798      	blx	r3
     548:	2320      	movs	r3, #32
     54a:	81ab      	strh	r3, [r5, #12]
     54c:	0663      	lsls	r3, r4, #25
     54e:	d503      	bpl.n	558 <RTC_Handler+0x90>
     550:	0673      	lsls	r3, r6, #25
     552:	d501      	bpl.n	558 <RTC_Handler+0x90>
     554:	6a3b      	ldr	r3, [r7, #32]
     556:	4798      	blx	r3
     558:	2340      	movs	r3, #64	; 0x40
     55a:	81ab      	strh	r3, [r5, #12]
     55c:	0623      	lsls	r3, r4, #24
     55e:	d503      	bpl.n	568 <RTC_Handler+0xa0>
     560:	0633      	lsls	r3, r6, #24
     562:	d501      	bpl.n	568 <RTC_Handler+0xa0>
     564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     566:	4798      	blx	r3
     568:	2380      	movs	r3, #128	; 0x80
     56a:	81ab      	strh	r3, [r5, #12]
     56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     56e:	2380      	movs	r3, #128	; 0x80
     570:	005b      	lsls	r3, r3, #1
     572:	421c      	tst	r4, r3
     574:	d00c      	beq.n	590 <RTC_Handler+0xc8>
     576:	421e      	tst	r6, r3
     578:	d001      	beq.n	57e <RTC_Handler+0xb6>
     57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     57c:	4798      	blx	r3
     57e:	2380      	movs	r3, #128	; 0x80
     580:	005b      	lsls	r3, r3, #1
     582:	81ab      	strh	r3, [r5, #12]
     584:	e7f2      	b.n	56c <RTC_Handler+0xa4>
     586:	0573      	lsls	r3, r6, #21
     588:	d40c      	bmi.n	5a4 <RTC_Handler+0xdc>
     58a:	4b0b      	ldr	r3, [pc, #44]	; (5b8 <RTC_Handler+0xf0>)
     58c:	81ab      	strh	r3, [r5, #12]
     58e:	e7ed      	b.n	56c <RTC_Handler+0xa4>
     590:	2380      	movs	r3, #128	; 0x80
     592:	009b      	lsls	r3, r3, #2
     594:	421c      	tst	r4, r3
     596:	d0e9      	beq.n	56c <RTC_Handler+0xa4>
     598:	421e      	tst	r6, r3
     59a:	d108      	bne.n	5ae <RTC_Handler+0xe6>
     59c:	2380      	movs	r3, #128	; 0x80
     59e:	009b      	lsls	r3, r3, #2
     5a0:	81ab      	strh	r3, [r5, #12]
     5a2:	e7e3      	b.n	56c <RTC_Handler+0xa4>
     5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5a6:	4798      	blx	r3
     5a8:	4b03      	ldr	r3, [pc, #12]	; (5b8 <RTC_Handler+0xf0>)
     5aa:	81ab      	strh	r3, [r5, #12]
     5ac:	e7de      	b.n	56c <RTC_Handler+0xa4>
     5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     5b0:	4798      	blx	r3
     5b2:	e7f3      	b.n	59c <RTC_Handler+0xd4>
     5b4:	2000028c 	.word	0x2000028c
     5b8:	ffff8000 	.word	0xffff8000

000005bc <_i2c_master_write_packet>:
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5be:	4645      	mov	r5, r8
     5c0:	4688      	mov	r8, r1
     5c2:	464e      	mov	r6, r9
     5c4:	46de      	mov	lr, fp
     5c6:	4657      	mov	r7, sl
     5c8:	4643      	mov	r3, r8
     5ca:	b5e0      	push	{r5, r6, r7, lr}
     5cc:	885b      	ldrh	r3, [r3, #2]
     5ce:	2207      	movs	r2, #7
     5d0:	4699      	mov	r9, r3
     5d2:	6801      	ldr	r1, [r0, #0]
     5d4:	69cb      	ldr	r3, [r1, #28]
     5d6:	421a      	tst	r2, r3
     5d8:	d1fc      	bne.n	5d4 <_i2c_master_write_packet+0x18>
     5da:	4643      	mov	r3, r8
     5dc:	7a5b      	ldrb	r3, [r3, #9]
     5de:	2b00      	cmp	r3, #0
     5e0:	d000      	beq.n	5e4 <_i2c_master_write_packet+0x28>
     5e2:	e08d      	b.n	700 <_i2c_master_write_packet+0x144>
     5e4:	684b      	ldr	r3, [r1, #4]
     5e6:	4a55      	ldr	r2, [pc, #340]	; (73c <_i2c_master_write_packet+0x180>)
     5e8:	4013      	ands	r3, r2
     5ea:	604b      	str	r3, [r1, #4]
     5ec:	4643      	mov	r3, r8
     5ee:	7a1b      	ldrb	r3, [r3, #8]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d058      	beq.n	6a6 <_i2c_master_write_packet+0xea>
     5f4:	4643      	mov	r3, r8
     5f6:	4642      	mov	r2, r8
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	7a52      	ldrb	r2, [r2, #9]
     5fc:	005b      	lsls	r3, r3, #1
     5fe:	0392      	lsls	r2, r2, #14
     600:	4313      	orrs	r3, r2
     602:	2280      	movs	r2, #128	; 0x80
     604:	0212      	lsls	r2, r2, #8
     606:	4313      	orrs	r3, r2
     608:	624b      	str	r3, [r1, #36]	; 0x24
     60a:	6802      	ldr	r2, [r0, #0]
     60c:	2300      	movs	r3, #0
     60e:	2501      	movs	r5, #1
     610:	2602      	movs	r6, #2
     612:	e008      	b.n	626 <_i2c_master_write_packet+0x6a>
     614:	7e14      	ldrb	r4, [r2, #24]
     616:	4226      	tst	r6, r4
     618:	d108      	bne.n	62c <_i2c_master_write_packet+0x70>
     61a:	3301      	adds	r3, #1
     61c:	8904      	ldrh	r4, [r0, #8]
     61e:	b29b      	uxth	r3, r3
     620:	429c      	cmp	r4, r3
     622:	d800      	bhi.n	626 <_i2c_master_write_packet+0x6a>
     624:	e06a      	b.n	6fc <_i2c_master_write_packet+0x140>
     626:	7e14      	ldrb	r4, [r2, #24]
     628:	4225      	tst	r5, r4
     62a:	d0f3      	beq.n	614 <_i2c_master_write_packet+0x58>
     62c:	2302      	movs	r3, #2
     62e:	7e14      	ldrb	r4, [r2, #24]
     630:	4223      	tst	r3, r4
     632:	d041      	beq.n	6b8 <_i2c_master_write_packet+0xfc>
     634:	7613      	strb	r3, [r2, #24]
     636:	8b52      	ldrh	r2, [r2, #26]
     638:	4213      	tst	r3, r2
     63a:	d147      	bne.n	6cc <_i2c_master_write_packet+0x110>
     63c:	2300      	movs	r3, #0
     63e:	469c      	mov	ip, r3
     640:	3320      	adds	r3, #32
     642:	469a      	mov	sl, r3
     644:	3308      	adds	r3, #8
     646:	469b      	mov	fp, r3
     648:	4663      	mov	r3, ip
     64a:	2707      	movs	r7, #7
     64c:	468c      	mov	ip, r1
     64e:	2501      	movs	r5, #1
     650:	2602      	movs	r6, #2
     652:	0019      	movs	r1, r3
     654:	4549      	cmp	r1, r9
     656:	d100      	bne.n	65a <_i2c_master_write_packet+0x9e>
     658:	e06d      	b.n	736 <_i2c_master_write_packet+0x17a>
     65a:	4663      	mov	r3, ip
     65c:	4652      	mov	r2, sl
     65e:	8b5b      	ldrh	r3, [r3, #26]
     660:	421a      	tst	r2, r3
     662:	d033      	beq.n	6cc <_i2c_master_write_packet+0x110>
     664:	6802      	ldr	r2, [r0, #0]
     666:	69d3      	ldr	r3, [r2, #28]
     668:	421f      	tst	r7, r3
     66a:	d1fc      	bne.n	666 <_i2c_master_write_packet+0xaa>
     66c:	4643      	mov	r3, r8
     66e:	4662      	mov	r2, ip
     670:	465c      	mov	r4, fp
     672:	685b      	ldr	r3, [r3, #4]
     674:	5c5b      	ldrb	r3, [r3, r1]
     676:	5513      	strb	r3, [r2, r4]
     678:	6802      	ldr	r2, [r0, #0]
     67a:	2300      	movs	r3, #0
     67c:	e007      	b.n	68e <_i2c_master_write_packet+0xd2>
     67e:	7e14      	ldrb	r4, [r2, #24]
     680:	4226      	tst	r6, r4
     682:	d107      	bne.n	694 <_i2c_master_write_packet+0xd8>
     684:	3301      	adds	r3, #1
     686:	8904      	ldrh	r4, [r0, #8]
     688:	b29b      	uxth	r3, r3
     68a:	429c      	cmp	r4, r3
     68c:	d926      	bls.n	6dc <_i2c_master_write_packet+0x120>
     68e:	7e14      	ldrb	r4, [r2, #24]
     690:	4225      	tst	r5, r4
     692:	d0f4      	beq.n	67e <_i2c_master_write_packet+0xc2>
     694:	4663      	mov	r3, ip
     696:	2204      	movs	r2, #4
     698:	8b5b      	ldrh	r3, [r3, #26]
     69a:	3101      	adds	r1, #1
     69c:	421a      	tst	r2, r3
     69e:	d0d9      	beq.n	654 <_i2c_master_write_packet+0x98>
     6a0:	4661      	mov	r1, ip
     6a2:	221e      	movs	r2, #30
     6a4:	e01c      	b.n	6e0 <_i2c_master_write_packet+0x124>
     6a6:	4643      	mov	r3, r8
     6a8:	4642      	mov	r2, r8
     6aa:	881b      	ldrh	r3, [r3, #0]
     6ac:	7a52      	ldrb	r2, [r2, #9]
     6ae:	005b      	lsls	r3, r3, #1
     6b0:	0392      	lsls	r2, r2, #14
     6b2:	4313      	orrs	r3, r2
     6b4:	624b      	str	r3, [r1, #36]	; 0x24
     6b6:	e7a8      	b.n	60a <_i2c_master_write_packet+0x4e>
     6b8:	8b53      	ldrh	r3, [r2, #26]
     6ba:	075b      	lsls	r3, r3, #29
     6bc:	d5be      	bpl.n	63c <_i2c_master_write_packet+0x80>
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	6851      	ldr	r1, [r2, #4]
     6c2:	029b      	lsls	r3, r3, #10
     6c4:	430b      	orrs	r3, r1
     6c6:	6053      	str	r3, [r2, #4]
     6c8:	2218      	movs	r2, #24
     6ca:	e000      	b.n	6ce <_i2c_master_write_packet+0x112>
     6cc:	2241      	movs	r2, #65	; 0x41
     6ce:	0010      	movs	r0, r2
     6d0:	bc3c      	pop	{r2, r3, r4, r5}
     6d2:	4690      	mov	r8, r2
     6d4:	4699      	mov	r9, r3
     6d6:	46a2      	mov	sl, r4
     6d8:	46ab      	mov	fp, r5
     6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6dc:	4661      	mov	r1, ip
     6de:	2212      	movs	r2, #18
     6e0:	7a83      	ldrb	r3, [r0, #10]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d0f3      	beq.n	6ce <_i2c_master_write_packet+0x112>
     6e6:	6804      	ldr	r4, [r0, #0]
     6e8:	2007      	movs	r0, #7
     6ea:	69e3      	ldr	r3, [r4, #28]
     6ec:	4218      	tst	r0, r3
     6ee:	d1fc      	bne.n	6ea <_i2c_master_write_packet+0x12e>
     6f0:	23c0      	movs	r3, #192	; 0xc0
     6f2:	6848      	ldr	r0, [r1, #4]
     6f4:	029b      	lsls	r3, r3, #10
     6f6:	4303      	orrs	r3, r0
     6f8:	604b      	str	r3, [r1, #4]
     6fa:	e7e8      	b.n	6ce <_i2c_master_write_packet+0x112>
     6fc:	2212      	movs	r2, #18
     6fe:	e7e6      	b.n	6ce <_i2c_master_write_packet+0x112>
     700:	4643      	mov	r3, r8
     702:	7a9a      	ldrb	r2, [r3, #10]
     704:	2380      	movs	r3, #128	; 0x80
     706:	684c      	ldr	r4, [r1, #4]
     708:	02db      	lsls	r3, r3, #11
     70a:	4323      	orrs	r3, r4
     70c:	604b      	str	r3, [r1, #4]
     70e:	624a      	str	r2, [r1, #36]	; 0x24
     710:	6802      	ldr	r2, [r0, #0]
     712:	2300      	movs	r3, #0
     714:	2501      	movs	r5, #1
     716:	2602      	movs	r6, #2
     718:	e007      	b.n	72a <_i2c_master_write_packet+0x16e>
     71a:	7e14      	ldrb	r4, [r2, #24]
     71c:	4226      	tst	r6, r4
     71e:	d107      	bne.n	730 <_i2c_master_write_packet+0x174>
     720:	3301      	adds	r3, #1
     722:	8904      	ldrh	r4, [r0, #8]
     724:	b29b      	uxth	r3, r3
     726:	429c      	cmp	r4, r3
     728:	d902      	bls.n	730 <_i2c_master_write_packet+0x174>
     72a:	7e14      	ldrb	r4, [r2, #24]
     72c:	4225      	tst	r5, r4
     72e:	d0f4      	beq.n	71a <_i2c_master_write_packet+0x15e>
     730:	2301      	movs	r3, #1
     732:	760b      	strb	r3, [r1, #24]
     734:	e756      	b.n	5e4 <_i2c_master_write_packet+0x28>
     736:	4661      	mov	r1, ip
     738:	2200      	movs	r2, #0
     73a:	e7d1      	b.n	6e0 <_i2c_master_write_packet+0x124>
     73c:	fffbffff 	.word	0xfffbffff

00000740 <_i2c_master_read_packet>:
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	464e      	mov	r6, r9
     744:	46de      	mov	lr, fp
     746:	4657      	mov	r7, sl
     748:	4645      	mov	r5, r8
     74a:	b5e0      	push	{r5, r6, r7, lr}
     74c:	6803      	ldr	r3, [r0, #0]
     74e:	4689      	mov	r9, r1
     750:	469c      	mov	ip, r3
     752:	4663      	mov	r3, ip
     754:	681b      	ldr	r3, [r3, #0]
     756:	b083      	sub	sp, #12
     758:	011b      	lsls	r3, r3, #4
     75a:	0fdb      	lsrs	r3, r3, #31
     75c:	8849      	ldrh	r1, [r1, #2]
     75e:	9301      	str	r3, [sp, #4]
     760:	464b      	mov	r3, r9
     762:	7a5b      	ldrb	r3, [r3, #9]
     764:	2b00      	cmp	r3, #0
     766:	d000      	beq.n	76a <_i2c_master_read_packet+0x2a>
     768:	e0fc      	b.n	964 <_i2c_master_read_packet+0x224>
     76a:	4663      	mov	r3, ip
     76c:	4a9b      	ldr	r2, [pc, #620]	; (9dc <_i2c_master_read_packet+0x29c>)
     76e:	685b      	ldr	r3, [r3, #4]
     770:	4013      	ands	r3, r2
     772:	4662      	mov	r2, ip
     774:	6053      	str	r3, [r2, #4]
     776:	464b      	mov	r3, r9
     778:	7a1b      	ldrb	r3, [r3, #8]
     77a:	2b00      	cmp	r3, #0
     77c:	d03c      	beq.n	7f8 <_i2c_master_read_packet+0xb8>
     77e:	464b      	mov	r3, r9
     780:	464a      	mov	r2, r9
     782:	881b      	ldrh	r3, [r3, #0]
     784:	7a52      	ldrb	r2, [r2, #9]
     786:	005b      	lsls	r3, r3, #1
     788:	0392      	lsls	r2, r2, #14
     78a:	4313      	orrs	r3, r2
     78c:	2280      	movs	r2, #128	; 0x80
     78e:	0212      	lsls	r2, r2, #8
     790:	4313      	orrs	r3, r2
     792:	4662      	mov	r2, ip
     794:	6253      	str	r3, [r2, #36]	; 0x24
     796:	6802      	ldr	r2, [r0, #0]
     798:	2300      	movs	r3, #0
     79a:	2501      	movs	r5, #1
     79c:	2602      	movs	r6, #2
     79e:	e008      	b.n	7b2 <_i2c_master_read_packet+0x72>
     7a0:	7e14      	ldrb	r4, [r2, #24]
     7a2:	4226      	tst	r6, r4
     7a4:	d108      	bne.n	7b8 <_i2c_master_read_packet+0x78>
     7a6:	3301      	adds	r3, #1
     7a8:	8904      	ldrh	r4, [r0, #8]
     7aa:	b29b      	uxth	r3, r3
     7ac:	429c      	cmp	r4, r3
     7ae:	d800      	bhi.n	7b2 <_i2c_master_read_packet+0x72>
     7b0:	e10a      	b.n	9c8 <_i2c_master_read_packet+0x288>
     7b2:	7e14      	ldrb	r4, [r2, #24]
     7b4:	4225      	tst	r5, r4
     7b6:	d0f3      	beq.n	7a0 <_i2c_master_read_packet+0x60>
     7b8:	4663      	mov	r3, ip
     7ba:	4a88      	ldr	r2, [pc, #544]	; (9dc <_i2c_master_read_packet+0x29c>)
     7bc:	685b      	ldr	r3, [r3, #4]
     7be:	4013      	ands	r3, r2
     7c0:	4662      	mov	r2, ip
     7c2:	6053      	str	r3, [r2, #4]
     7c4:	2202      	movs	r2, #2
     7c6:	6803      	ldr	r3, [r0, #0]
     7c8:	7e1c      	ldrb	r4, [r3, #24]
     7ca:	4222      	tst	r2, r4
     7cc:	d100      	bne.n	7d0 <_i2c_master_read_packet+0x90>
     7ce:	e0ef      	b.n	9b0 <_i2c_master_read_packet+0x270>
     7d0:	761a      	strb	r2, [r3, #24]
     7d2:	8b5b      	ldrh	r3, [r3, #26]
     7d4:	421a      	tst	r2, r3
     7d6:	d000      	beq.n	7da <_i2c_master_read_packet+0x9a>
     7d8:	e0ad      	b.n	936 <_i2c_master_read_packet+0x1f6>
     7da:	464b      	mov	r3, r9
     7dc:	2278      	movs	r2, #120	; 0x78
     7de:	881b      	ldrh	r3, [r3, #0]
     7e0:	2401      	movs	r4, #1
     7e2:	0a1b      	lsrs	r3, r3, #8
     7e4:	4313      	orrs	r3, r2
     7e6:	464a      	mov	r2, r9
     7e8:	7a52      	ldrb	r2, [r2, #9]
     7ea:	005b      	lsls	r3, r3, #1
     7ec:	0392      	lsls	r2, r2, #14
     7ee:	4322      	orrs	r2, r4
     7f0:	4313      	orrs	r3, r2
     7f2:	4662      	mov	r2, ip
     7f4:	6253      	str	r3, [r2, #36]	; 0x24
     7f6:	e00a      	b.n	80e <_i2c_master_read_packet+0xce>
     7f8:	464b      	mov	r3, r9
     7fa:	464a      	mov	r2, r9
     7fc:	881b      	ldrh	r3, [r3, #0]
     7fe:	7a52      	ldrb	r2, [r2, #9]
     800:	005b      	lsls	r3, r3, #1
     802:	0392      	lsls	r2, r2, #14
     804:	4313      	orrs	r3, r2
     806:	2201      	movs	r2, #1
     808:	4313      	orrs	r3, r2
     80a:	4662      	mov	r2, ip
     80c:	6253      	str	r3, [r2, #36]	; 0x24
     80e:	6802      	ldr	r2, [r0, #0]
     810:	2300      	movs	r3, #0
     812:	2501      	movs	r5, #1
     814:	2602      	movs	r6, #2
     816:	e008      	b.n	82a <_i2c_master_read_packet+0xea>
     818:	7e14      	ldrb	r4, [r2, #24]
     81a:	4226      	tst	r6, r4
     81c:	d108      	bne.n	830 <_i2c_master_read_packet+0xf0>
     81e:	3301      	adds	r3, #1
     820:	8904      	ldrh	r4, [r0, #8]
     822:	b29b      	uxth	r3, r3
     824:	429c      	cmp	r4, r3
     826:	d800      	bhi.n	82a <_i2c_master_read_packet+0xea>
     828:	e0ba      	b.n	9a0 <_i2c_master_read_packet+0x260>
     82a:	7e14      	ldrb	r4, [r2, #24]
     82c:	4225      	tst	r5, r4
     82e:	d0f3      	beq.n	818 <_i2c_master_read_packet+0xd8>
     830:	2300      	movs	r3, #0
     832:	9300      	str	r3, [sp, #0]
     834:	9b01      	ldr	r3, [sp, #4]
     836:	2b00      	cmp	r3, #0
     838:	d000      	beq.n	83c <_i2c_master_read_packet+0xfc>
     83a:	e06f      	b.n	91c <_i2c_master_read_packet+0x1dc>
     83c:	4663      	mov	r3, ip
     83e:	4a67      	ldr	r2, [pc, #412]	; (9dc <_i2c_master_read_packet+0x29c>)
     840:	685b      	ldr	r3, [r3, #4]
     842:	4013      	ands	r3, r2
     844:	4662      	mov	r2, ip
     846:	6053      	str	r3, [r2, #4]
     848:	9b00      	ldr	r3, [sp, #0]
     84a:	2b00      	cmp	r3, #0
     84c:	d15e      	bne.n	90c <_i2c_master_read_packet+0x1cc>
     84e:	2202      	movs	r2, #2
     850:	6803      	ldr	r3, [r0, #0]
     852:	7e1c      	ldrb	r4, [r3, #24]
     854:	4222      	tst	r2, r4
     856:	d100      	bne.n	85a <_i2c_master_read_packet+0x11a>
     858:	e0a5      	b.n	9a6 <_i2c_master_read_packet+0x266>
     85a:	761a      	strb	r2, [r3, #24]
     85c:	8b5b      	ldrh	r3, [r3, #26]
     85e:	421a      	tst	r2, r3
     860:	d169      	bne.n	936 <_i2c_master_read_packet+0x1f6>
     862:	4a5f      	ldr	r2, [pc, #380]	; (9e0 <_i2c_master_read_packet+0x2a0>)
     864:	3901      	subs	r1, #1
     866:	4692      	mov	sl, r2
     868:	2220      	movs	r2, #32
     86a:	b289      	uxth	r1, r1
     86c:	2300      	movs	r3, #0
     86e:	4693      	mov	fp, r2
     870:	2707      	movs	r7, #7
     872:	2501      	movs	r5, #1
     874:	2602      	movs	r6, #2
     876:	4551      	cmp	r1, sl
     878:	d02c      	beq.n	8d4 <_i2c_master_read_packet+0x194>
     87a:	4662      	mov	r2, ip
     87c:	465c      	mov	r4, fp
     87e:	8b52      	ldrh	r2, [r2, #26]
     880:	4214      	tst	r4, r2
     882:	d058      	beq.n	936 <_i2c_master_read_packet+0x1f6>
     884:	7ac2      	ldrb	r2, [r0, #11]
     886:	2a00      	cmp	r2, #0
     888:	d004      	beq.n	894 <_i2c_master_read_packet+0x154>
     88a:	9a01      	ldr	r2, [sp, #4]
     88c:	2a00      	cmp	r2, #0
     88e:	d055      	beq.n	93c <_i2c_master_read_packet+0x1fc>
     890:	2901      	cmp	r1, #1
     892:	d055      	beq.n	940 <_i2c_master_read_packet+0x200>
     894:	6804      	ldr	r4, [r0, #0]
     896:	69e2      	ldr	r2, [r4, #28]
     898:	4217      	tst	r7, r2
     89a:	d1fc      	bne.n	896 <_i2c_master_read_packet+0x156>
     89c:	1c5a      	adds	r2, r3, #1
     89e:	b292      	uxth	r2, r2
     8a0:	2428      	movs	r4, #40	; 0x28
     8a2:	4690      	mov	r8, r2
     8a4:	4662      	mov	r2, ip
     8a6:	5d12      	ldrb	r2, [r2, r4]
     8a8:	464c      	mov	r4, r9
     8aa:	6864      	ldr	r4, [r4, #4]
     8ac:	54e2      	strb	r2, [r4, r3]
     8ae:	6802      	ldr	r2, [r0, #0]
     8b0:	2300      	movs	r3, #0
     8b2:	e007      	b.n	8c4 <_i2c_master_read_packet+0x184>
     8b4:	7e14      	ldrb	r4, [r2, #24]
     8b6:	4226      	tst	r6, r4
     8b8:	d107      	bne.n	8ca <_i2c_master_read_packet+0x18a>
     8ba:	3301      	adds	r3, #1
     8bc:	8904      	ldrh	r4, [r0, #8]
     8be:	b29b      	uxth	r3, r3
     8c0:	429c      	cmp	r4, r3
     8c2:	d949      	bls.n	958 <_i2c_master_read_packet+0x218>
     8c4:	7e14      	ldrb	r4, [r2, #24]
     8c6:	4225      	tst	r5, r4
     8c8:	d0f4      	beq.n	8b4 <_i2c_master_read_packet+0x174>
     8ca:	4643      	mov	r3, r8
     8cc:	3901      	subs	r1, #1
     8ce:	b289      	uxth	r1, r1
     8d0:	4551      	cmp	r1, sl
     8d2:	d1d2      	bne.n	87a <_i2c_master_read_packet+0x13a>
     8d4:	4698      	mov	r8, r3
     8d6:	7a83      	ldrb	r3, [r0, #10]
     8d8:	6802      	ldr	r2, [r0, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	d00b      	beq.n	8f6 <_i2c_master_read_packet+0x1b6>
     8de:	2107      	movs	r1, #7
     8e0:	69d3      	ldr	r3, [r2, #28]
     8e2:	4219      	tst	r1, r3
     8e4:	d1fc      	bne.n	8e0 <_i2c_master_read_packet+0x1a0>
     8e6:	4663      	mov	r3, ip
     8e8:	685a      	ldr	r2, [r3, #4]
     8ea:	23c0      	movs	r3, #192	; 0xc0
     8ec:	029b      	lsls	r3, r3, #10
     8ee:	4313      	orrs	r3, r2
     8f0:	4662      	mov	r2, ip
     8f2:	6053      	str	r3, [r2, #4]
     8f4:	6802      	ldr	r2, [r0, #0]
     8f6:	2107      	movs	r1, #7
     8f8:	69d3      	ldr	r3, [r2, #28]
     8fa:	4219      	tst	r1, r3
     8fc:	d1fc      	bne.n	8f8 <_i2c_master_read_packet+0x1b8>
     8fe:	2328      	movs	r3, #40	; 0x28
     900:	4662      	mov	r2, ip
     902:	5cd2      	ldrb	r2, [r2, r3]
     904:	464b      	mov	r3, r9
     906:	4641      	mov	r1, r8
     908:	685b      	ldr	r3, [r3, #4]
     90a:	545a      	strb	r2, [r3, r1]
     90c:	9800      	ldr	r0, [sp, #0]
     90e:	b003      	add	sp, #12
     910:	bc3c      	pop	{r2, r3, r4, r5}
     912:	4690      	mov	r8, r2
     914:	4699      	mov	r9, r3
     916:	46a2      	mov	sl, r4
     918:	46ab      	mov	fp, r5
     91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     91c:	464b      	mov	r3, r9
     91e:	885b      	ldrh	r3, [r3, #2]
     920:	2b01      	cmp	r3, #1
     922:	d000      	beq.n	926 <_i2c_master_read_packet+0x1e6>
     924:	e78a      	b.n	83c <_i2c_master_read_packet+0xfc>
     926:	4663      	mov	r3, ip
     928:	685a      	ldr	r2, [r3, #4]
     92a:	2380      	movs	r3, #128	; 0x80
     92c:	02db      	lsls	r3, r3, #11
     92e:	4313      	orrs	r3, r2
     930:	4662      	mov	r2, ip
     932:	6053      	str	r3, [r2, #4]
     934:	e788      	b.n	848 <_i2c_master_read_packet+0x108>
     936:	2341      	movs	r3, #65	; 0x41
     938:	9300      	str	r3, [sp, #0]
     93a:	e7e7      	b.n	90c <_i2c_master_read_packet+0x1cc>
     93c:	2900      	cmp	r1, #0
     93e:	d1a9      	bne.n	894 <_i2c_master_read_packet+0x154>
     940:	4662      	mov	r2, ip
     942:	6854      	ldr	r4, [r2, #4]
     944:	2280      	movs	r2, #128	; 0x80
     946:	02d2      	lsls	r2, r2, #11
     948:	4322      	orrs	r2, r4
     94a:	4698      	mov	r8, r3
     94c:	4664      	mov	r4, ip
     94e:	3901      	subs	r1, #1
     950:	6062      	str	r2, [r4, #4]
     952:	b289      	uxth	r1, r1
     954:	4643      	mov	r3, r8
     956:	e7bb      	b.n	8d0 <_i2c_master_read_packet+0x190>
     958:	2312      	movs	r3, #18
     95a:	9300      	str	r3, [sp, #0]
     95c:	7a83      	ldrb	r3, [r0, #10]
     95e:	2b00      	cmp	r3, #0
     960:	d0c9      	beq.n	8f6 <_i2c_master_read_packet+0x1b6>
     962:	e7bc      	b.n	8de <_i2c_master_read_packet+0x19e>
     964:	464b      	mov	r3, r9
     966:	7a9a      	ldrb	r2, [r3, #10]
     968:	4663      	mov	r3, ip
     96a:	685c      	ldr	r4, [r3, #4]
     96c:	2380      	movs	r3, #128	; 0x80
     96e:	02db      	lsls	r3, r3, #11
     970:	4323      	orrs	r3, r4
     972:	4664      	mov	r4, ip
     974:	6063      	str	r3, [r4, #4]
     976:	6262      	str	r2, [r4, #36]	; 0x24
     978:	6802      	ldr	r2, [r0, #0]
     97a:	2300      	movs	r3, #0
     97c:	2501      	movs	r5, #1
     97e:	2602      	movs	r6, #2
     980:	e007      	b.n	992 <_i2c_master_read_packet+0x252>
     982:	7e14      	ldrb	r4, [r2, #24]
     984:	4226      	tst	r6, r4
     986:	d107      	bne.n	998 <_i2c_master_read_packet+0x258>
     988:	3301      	adds	r3, #1
     98a:	8904      	ldrh	r4, [r0, #8]
     98c:	b29b      	uxth	r3, r3
     98e:	429c      	cmp	r4, r3
     990:	d902      	bls.n	998 <_i2c_master_read_packet+0x258>
     992:	7e14      	ldrb	r4, [r2, #24]
     994:	4225      	tst	r5, r4
     996:	d0f4      	beq.n	982 <_i2c_master_read_packet+0x242>
     998:	2301      	movs	r3, #1
     99a:	4662      	mov	r2, ip
     99c:	7613      	strb	r3, [r2, #24]
     99e:	e6e4      	b.n	76a <_i2c_master_read_packet+0x2a>
     9a0:	2312      	movs	r3, #18
     9a2:	9300      	str	r3, [sp, #0]
     9a4:	e746      	b.n	834 <_i2c_master_read_packet+0xf4>
     9a6:	8b5a      	ldrh	r2, [r3, #26]
     9a8:	0752      	lsls	r2, r2, #29
     9aa:	d400      	bmi.n	9ae <_i2c_master_read_packet+0x26e>
     9ac:	e759      	b.n	862 <_i2c_master_read_packet+0x122>
     9ae:	e003      	b.n	9b8 <_i2c_master_read_packet+0x278>
     9b0:	8b5a      	ldrh	r2, [r3, #26]
     9b2:	0752      	lsls	r2, r2, #29
     9b4:	d400      	bmi.n	9b8 <_i2c_master_read_packet+0x278>
     9b6:	e710      	b.n	7da <_i2c_master_read_packet+0x9a>
     9b8:	22c0      	movs	r2, #192	; 0xc0
     9ba:	6859      	ldr	r1, [r3, #4]
     9bc:	0292      	lsls	r2, r2, #10
     9be:	430a      	orrs	r2, r1
     9c0:	605a      	str	r2, [r3, #4]
     9c2:	2318      	movs	r3, #24
     9c4:	9300      	str	r3, [sp, #0]
     9c6:	e7a1      	b.n	90c <_i2c_master_read_packet+0x1cc>
     9c8:	4663      	mov	r3, ip
     9ca:	4a04      	ldr	r2, [pc, #16]	; (9dc <_i2c_master_read_packet+0x29c>)
     9cc:	685b      	ldr	r3, [r3, #4]
     9ce:	4013      	ands	r3, r2
     9d0:	4662      	mov	r2, ip
     9d2:	6053      	str	r3, [r2, #4]
     9d4:	2312      	movs	r3, #18
     9d6:	9300      	str	r3, [sp, #0]
     9d8:	e798      	b.n	90c <_i2c_master_read_packet+0x1cc>
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	fffbffff 	.word	0xfffbffff
     9e0:	0000ffff 	.word	0x0000ffff

000009e4 <i2c_master_init>:
     9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e6:	46de      	mov	lr, fp
     9e8:	4657      	mov	r7, sl
     9ea:	4645      	mov	r5, r8
     9ec:	464e      	mov	r6, r9
     9ee:	b5e0      	push	{r5, r6, r7, lr}
     9f0:	0005      	movs	r5, r0
     9f2:	4ba3      	ldr	r3, [pc, #652]	; (c80 <i2c_master_init+0x29c>)
     9f4:	b089      	sub	sp, #36	; 0x24
     9f6:	6029      	str	r1, [r5, #0]
     9f8:	0008      	movs	r0, r1
     9fa:	0014      	movs	r4, r2
     9fc:	000f      	movs	r7, r1
     9fe:	469b      	mov	fp, r3
     a00:	4798      	blx	r3
     a02:	4aa0      	ldr	r2, [pc, #640]	; (c84 <i2c_master_init+0x2a0>)
     a04:	2805      	cmp	r0, #5
     a06:	d100      	bne.n	a0a <i2c_master_init+0x26>
     a08:	e0dc      	b.n	bc4 <i2c_master_init+0x1e0>
     a0a:	2301      	movs	r3, #1
     a0c:	4083      	lsls	r3, r0
     a0e:	69d1      	ldr	r1, [r2, #28]
     a10:	3012      	adds	r0, #18
     a12:	430b      	orrs	r3, r1
     a14:	61d3      	str	r3, [r2, #28]
     a16:	b2c6      	uxtb	r6, r0
     a18:	7b23      	ldrb	r3, [r4, #12]
     a1a:	aa06      	add	r2, sp, #24
     a1c:	7013      	strb	r3, [r2, #0]
     a1e:	0011      	movs	r1, r2
     a20:	0030      	movs	r0, r6
     a22:	4b99      	ldr	r3, [pc, #612]	; (c88 <i2c_master_init+0x2a4>)
     a24:	4798      	blx	r3
     a26:	0030      	movs	r0, r6
     a28:	4b98      	ldr	r3, [pc, #608]	; (c8c <i2c_master_init+0x2a8>)
     a2a:	4798      	blx	r3
     a2c:	4b98      	ldr	r3, [pc, #608]	; (c90 <i2c_master_init+0x2ac>)
     a2e:	7b20      	ldrb	r0, [r4, #12]
     a30:	2100      	movs	r1, #0
     a32:	4798      	blx	r3
     a34:	683b      	ldr	r3, [r7, #0]
     a36:	201c      	movs	r0, #28
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d506      	bpl.n	a4a <i2c_master_init+0x66>
     a3c:	b009      	add	sp, #36	; 0x24
     a3e:	bc3c      	pop	{r2, r3, r4, r5}
     a40:	4690      	mov	r8, r2
     a42:	4699      	mov	r9, r3
     a44:	46a2      	mov	sl, r4
     a46:	46ab      	mov	fp, r5
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	2201      	movs	r2, #1
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	4692      	mov	sl, r2
     a50:	401a      	ands	r2, r3
     a52:	4690      	mov	r8, r2
     a54:	3817      	subs	r0, #23
     a56:	1e13      	subs	r3, r2, #0
     a58:	d1f0      	bne.n	a3c <i2c_master_init+0x58>
     a5a:	3314      	adds	r3, #20
     a5c:	603b      	str	r3, [r7, #0]
     a5e:	682b      	ldr	r3, [r5, #0]
     a60:	ae07      	add	r6, sp, #28
     a62:	0018      	movs	r0, r3
     a64:	4699      	mov	r9, r3
     a66:	47d8      	blx	fp
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	7033      	strb	r3, [r6, #0]
     a6c:	4643      	mov	r3, r8
     a6e:	7073      	strb	r3, [r6, #1]
     a70:	4653      	mov	r3, sl
     a72:	70b3      	strb	r3, [r6, #2]
     a74:	4643      	mov	r3, r8
     a76:	9000      	str	r0, [sp, #0]
     a78:	69e0      	ldr	r0, [r4, #28]
     a7a:	70f3      	strb	r3, [r6, #3]
     a7c:	6a27      	ldr	r7, [r4, #32]
     a7e:	2800      	cmp	r0, #0
     a80:	d100      	bne.n	a84 <i2c_master_init+0xa0>
     a82:	e0b4      	b.n	bee <i2c_master_init+0x20a>
     a84:	2302      	movs	r3, #2
     a86:	7030      	strb	r0, [r6, #0]
     a88:	7073      	strb	r3, [r6, #1]
     a8a:	0c00      	lsrs	r0, r0, #16
     a8c:	4b81      	ldr	r3, [pc, #516]	; (c94 <i2c_master_init+0x2b0>)
     a8e:	b2c0      	uxtb	r0, r0
     a90:	0031      	movs	r1, r6
     a92:	469b      	mov	fp, r3
     a94:	4798      	blx	r3
     a96:	2f00      	cmp	r7, #0
     a98:	d100      	bne.n	a9c <i2c_master_init+0xb8>
     a9a:	e0ad      	b.n	bf8 <i2c_master_init+0x214>
     a9c:	2302      	movs	r3, #2
     a9e:	7037      	strb	r7, [r6, #0]
     aa0:	0c3f      	lsrs	r7, r7, #16
     aa2:	0031      	movs	r1, r6
     aa4:	b2f8      	uxtb	r0, r7
     aa6:	469a      	mov	sl, r3
     aa8:	7073      	strb	r3, [r6, #1]
     aaa:	47d8      	blx	fp
     aac:	8aa3      	ldrh	r3, [r4, #20]
     aae:	2180      	movs	r1, #128	; 0x80
     ab0:	80eb      	strh	r3, [r5, #6]
     ab2:	8ae3      	ldrh	r3, [r4, #22]
     ab4:	812b      	strh	r3, [r5, #8]
     ab6:	7e23      	ldrb	r3, [r4, #24]
     ab8:	2b00      	cmp	r3, #0
     aba:	d100      	bne.n	abe <i2c_master_init+0xda>
     abc:	e088      	b.n	bd0 <i2c_master_init+0x1ec>
     abe:	68a2      	ldr	r2, [r4, #8]
     ac0:	6923      	ldr	r3, [r4, #16]
     ac2:	4313      	orrs	r3, r2
     ac4:	430b      	orrs	r3, r1
     ac6:	2124      	movs	r1, #36	; 0x24
     ac8:	5c61      	ldrb	r1, [r4, r1]
     aca:	2900      	cmp	r1, #0
     acc:	d002      	beq.n	ad4 <i2c_master_init+0xf0>
     ace:	2180      	movs	r1, #128	; 0x80
     ad0:	05c9      	lsls	r1, r1, #23
     ad2:	430b      	orrs	r3, r1
     ad4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ad6:	430b      	orrs	r3, r1
     ad8:	212c      	movs	r1, #44	; 0x2c
     ada:	5c61      	ldrb	r1, [r4, r1]
     adc:	2900      	cmp	r1, #0
     ade:	d100      	bne.n	ae2 <i2c_master_init+0xfe>
     ae0:	e07f      	b.n	be2 <i2c_master_init+0x1fe>
     ae2:	2280      	movs	r2, #128	; 0x80
     ae4:	0512      	lsls	r2, r2, #20
     ae6:	4313      	orrs	r3, r2
     ae8:	222d      	movs	r2, #45	; 0x2d
     aea:	5ca2      	ldrb	r2, [r4, r2]
     aec:	2a00      	cmp	r2, #0
     aee:	d002      	beq.n	af6 <i2c_master_init+0x112>
     af0:	2280      	movs	r2, #128	; 0x80
     af2:	0412      	lsls	r2, r2, #16
     af4:	4313      	orrs	r3, r2
     af6:	222e      	movs	r2, #46	; 0x2e
     af8:	5ca2      	ldrb	r2, [r4, r2]
     afa:	2a00      	cmp	r2, #0
     afc:	d002      	beq.n	b04 <i2c_master_init+0x120>
     afe:	2280      	movs	r2, #128	; 0x80
     b00:	03d2      	lsls	r2, r2, #15
     b02:	4313      	orrs	r3, r2
     b04:	464a      	mov	r2, r9
     b06:	6812      	ldr	r2, [r2, #0]
     b08:	9800      	ldr	r0, [sp, #0]
     b0a:	4313      	orrs	r3, r2
     b0c:	464a      	mov	r2, r9
     b0e:	6013      	str	r3, [r2, #0]
     b10:	2380      	movs	r3, #128	; 0x80
     b12:	3012      	adds	r0, #18
     b14:	005b      	lsls	r3, r3, #1
     b16:	25fa      	movs	r5, #250	; 0xfa
     b18:	6053      	str	r3, [r2, #4]
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	4b5e      	ldr	r3, [pc, #376]	; (c98 <i2c_master_init+0x2b4>)
     b1e:	4798      	blx	r3
     b20:	6823      	ldr	r3, [r4, #0]
     b22:	00ad      	lsls	r5, r5, #2
     b24:	435d      	muls	r5, r3
     b26:	4b5d      	ldr	r3, [pc, #372]	; (c9c <i2c_master_init+0x2b8>)
     b28:	9005      	str	r0, [sp, #20]
     b2a:	469b      	mov	fp, r3
     b2c:	4798      	blx	r3
     b2e:	9000      	str	r0, [sp, #0]
     b30:	9101      	str	r1, [sp, #4]
     b32:	0068      	lsls	r0, r5, #1
     b34:	47d8      	blx	fp
     b36:	9002      	str	r0, [sp, #8]
     b38:	9103      	str	r1, [sp, #12]
     b3a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     b3c:	47d8      	blx	fp
     b3e:	4b58      	ldr	r3, [pc, #352]	; (ca0 <i2c_master_init+0x2bc>)
     b40:	0006      	movs	r6, r0
     b42:	469a      	mov	sl, r3
     b44:	000f      	movs	r7, r1
     b46:	9800      	ldr	r0, [sp, #0]
     b48:	9901      	ldr	r1, [sp, #4]
     b4a:	4a56      	ldr	r2, [pc, #344]	; (ca4 <i2c_master_init+0x2c0>)
     b4c:	4b56      	ldr	r3, [pc, #344]	; (ca8 <i2c_master_init+0x2c4>)
     b4e:	47d0      	blx	sl
     b50:	0002      	movs	r2, r0
     b52:	000b      	movs	r3, r1
     b54:	0030      	movs	r0, r6
     b56:	0039      	movs	r1, r7
     b58:	47d0      	blx	sl
     b5a:	2200      	movs	r2, #0
     b5c:	4b53      	ldr	r3, [pc, #332]	; (cac <i2c_master_init+0x2c8>)
     b5e:	4f54      	ldr	r7, [pc, #336]	; (cb0 <i2c_master_init+0x2cc>)
     b60:	47b8      	blx	r7
     b62:	0006      	movs	r6, r0
     b64:	0028      	movs	r0, r5
     b66:	000f      	movs	r7, r1
     b68:	47d8      	blx	fp
     b6a:	0002      	movs	r2, r0
     b6c:	000b      	movs	r3, r1
     b6e:	0030      	movs	r0, r6
     b70:	0039      	movs	r1, r7
     b72:	47d0      	blx	sl
     b74:	4d4f      	ldr	r5, [pc, #316]	; (cb4 <i2c_master_init+0x2d0>)
     b76:	0002      	movs	r2, r0
     b78:	000b      	movs	r3, r1
     b7a:	9800      	ldr	r0, [sp, #0]
     b7c:	9901      	ldr	r1, [sp, #4]
     b7e:	47a8      	blx	r5
     b80:	9e02      	ldr	r6, [sp, #8]
     b82:	9f03      	ldr	r7, [sp, #12]
     b84:	4d4a      	ldr	r5, [pc, #296]	; (cb0 <i2c_master_init+0x2cc>)
     b86:	0032      	movs	r2, r6
     b88:	003b      	movs	r3, r7
     b8a:	47a8      	blx	r5
     b8c:	2200      	movs	r2, #0
     b8e:	4b4a      	ldr	r3, [pc, #296]	; (cb8 <i2c_master_init+0x2d4>)
     b90:	4d48      	ldr	r5, [pc, #288]	; (cb4 <i2c_master_init+0x2d0>)
     b92:	47a8      	blx	r5
     b94:	0032      	movs	r2, r6
     b96:	003b      	movs	r3, r7
     b98:	4d48      	ldr	r5, [pc, #288]	; (cbc <i2c_master_init+0x2d8>)
     b9a:	47a8      	blx	r5
     b9c:	4f48      	ldr	r7, [pc, #288]	; (cc0 <i2c_master_init+0x2dc>)
     b9e:	47b8      	blx	r7
     ba0:	2380      	movs	r3, #128	; 0x80
     ba2:	68a2      	ldr	r2, [r4, #8]
     ba4:	0006      	movs	r6, r0
     ba6:	049b      	lsls	r3, r3, #18
     ba8:	429a      	cmp	r2, r3
     baa:	d02b      	beq.n	c04 <i2c_master_init+0x220>
     bac:	2040      	movs	r0, #64	; 0x40
     bae:	2eff      	cmp	r6, #255	; 0xff
     bb0:	d900      	bls.n	bb4 <i2c_master_init+0x1d0>
     bb2:	e743      	b.n	a3c <i2c_master_init+0x58>
     bb4:	2300      	movs	r3, #0
     bb6:	4642      	mov	r2, r8
     bb8:	4313      	orrs	r3, r2
     bba:	431e      	orrs	r6, r3
     bbc:	464b      	mov	r3, r9
     bbe:	2000      	movs	r0, #0
     bc0:	60de      	str	r6, [r3, #12]
     bc2:	e73b      	b.n	a3c <i2c_master_init+0x58>
     bc4:	2102      	movs	r1, #2
     bc6:	6a13      	ldr	r3, [r2, #32]
     bc8:	2618      	movs	r6, #24
     bca:	430b      	orrs	r3, r1
     bcc:	6213      	str	r3, [r2, #32]
     bce:	e723      	b.n	a18 <i2c_master_init+0x34>
     bd0:	4652      	mov	r2, sl
     bd2:	4b3c      	ldr	r3, [pc, #240]	; (cc4 <i2c_master_init+0x2e0>)
     bd4:	789b      	ldrb	r3, [r3, #2]
     bd6:	401a      	ands	r2, r3
     bd8:	0013      	movs	r3, r2
     bda:	1e5a      	subs	r2, r3, #1
     bdc:	4193      	sbcs	r3, r2
     bde:	01d9      	lsls	r1, r3, #7
     be0:	e76d      	b.n	abe <i2c_master_init+0xda>
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	0489      	lsls	r1, r1, #18
     be6:	428a      	cmp	r2, r1
     be8:	d000      	beq.n	bec <i2c_master_init+0x208>
     bea:	e77d      	b.n	ae8 <i2c_master_init+0x104>
     bec:	e779      	b.n	ae2 <i2c_master_init+0xfe>
     bee:	2100      	movs	r1, #0
     bf0:	4648      	mov	r0, r9
     bf2:	4b35      	ldr	r3, [pc, #212]	; (cc8 <i2c_master_init+0x2e4>)
     bf4:	4798      	blx	r3
     bf6:	e745      	b.n	a84 <i2c_master_init+0xa0>
     bf8:	2101      	movs	r1, #1
     bfa:	4648      	mov	r0, r9
     bfc:	4b32      	ldr	r3, [pc, #200]	; (cc8 <i2c_master_init+0x2e4>)
     bfe:	4798      	blx	r3
     c00:	0007      	movs	r7, r0
     c02:	e74b      	b.n	a9c <i2c_master_init+0xb8>
     c04:	23fa      	movs	r3, #250	; 0xfa
     c06:	6861      	ldr	r1, [r4, #4]
     c08:	009b      	lsls	r3, r3, #2
     c0a:	434b      	muls	r3, r1
     c0c:	9800      	ldr	r0, [sp, #0]
     c0e:	9901      	ldr	r1, [sp, #4]
     c10:	4698      	mov	r8, r3
     c12:	0002      	movs	r2, r0
     c14:	000b      	movs	r3, r1
     c16:	4c26      	ldr	r4, [pc, #152]	; (cb0 <i2c_master_init+0x2cc>)
     c18:	47a0      	blx	r4
     c1a:	0004      	movs	r4, r0
     c1c:	4640      	mov	r0, r8
     c1e:	000d      	movs	r5, r1
     c20:	47d8      	blx	fp
     c22:	2200      	movs	r2, #0
     c24:	4b29      	ldr	r3, [pc, #164]	; (ccc <i2c_master_init+0x2e8>)
     c26:	47d0      	blx	sl
     c28:	0002      	movs	r2, r0
     c2a:	000b      	movs	r3, r1
     c2c:	0020      	movs	r0, r4
     c2e:	0029      	movs	r1, r5
     c30:	4c22      	ldr	r4, [pc, #136]	; (cbc <i2c_master_init+0x2d8>)
     c32:	47a0      	blx	r4
     c34:	2200      	movs	r2, #0
     c36:	4b20      	ldr	r3, [pc, #128]	; (cb8 <i2c_master_init+0x2d4>)
     c38:	4c1e      	ldr	r4, [pc, #120]	; (cb4 <i2c_master_init+0x2d0>)
     c3a:	47a0      	blx	r4
     c3c:	47b8      	blx	r7
     c3e:	1e04      	subs	r4, r0, #0
     c40:	d013      	beq.n	c6a <i2c_master_init+0x286>
     c42:	4b23      	ldr	r3, [pc, #140]	; (cd0 <i2c_master_init+0x2ec>)
     c44:	4641      	mov	r1, r8
     c46:	9805      	ldr	r0, [sp, #20]
     c48:	4798      	blx	r3
     c4a:	3802      	subs	r0, #2
     c4c:	1b03      	subs	r3, r0, r4
     c4e:	2040      	movs	r0, #64	; 0x40
     c50:	2eff      	cmp	r6, #255	; 0xff
     c52:	d900      	bls.n	c56 <i2c_master_init+0x272>
     c54:	e6f2      	b.n	a3c <i2c_master_init+0x58>
     c56:	2bff      	cmp	r3, #255	; 0xff
     c58:	d900      	bls.n	c5c <i2c_master_init+0x278>
     c5a:	e6ef      	b.n	a3c <i2c_master_init+0x58>
     c5c:	22ff      	movs	r2, #255	; 0xff
     c5e:	041b      	lsls	r3, r3, #16
     c60:	0412      	lsls	r2, r2, #16
     c62:	4013      	ands	r3, r2
     c64:	4698      	mov	r8, r3
     c66:	0623      	lsls	r3, r4, #24
     c68:	e7a5      	b.n	bb6 <i2c_master_init+0x1d2>
     c6a:	4643      	mov	r3, r8
     c6c:	0059      	lsls	r1, r3, #1
     c6e:	9b05      	ldr	r3, [sp, #20]
     c70:	1e48      	subs	r0, r1, #1
     c72:	469c      	mov	ip, r3
     c74:	4b16      	ldr	r3, [pc, #88]	; (cd0 <i2c_master_init+0x2ec>)
     c76:	4460      	add	r0, ip
     c78:	4798      	blx	r3
     c7a:	1e43      	subs	r3, r0, #1
     c7c:	e7e7      	b.n	c4e <i2c_master_init+0x26a>
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	000038e9 	.word	0x000038e9
     c84:	40000400 	.word	0x40000400
     c88:	00004905 	.word	0x00004905
     c8c:	00004945 	.word	0x00004945
     c90:	00003745 	.word	0x00003745
     c94:	00004a01 	.word	0x00004a01
     c98:	0000497d 	.word	0x0000497d
     c9c:	00007b3d 	.word	0x00007b3d
     ca0:	00006f25 	.word	0x00006f25
     ca4:	e826d695 	.word	0xe826d695
     ca8:	3e112e0b 	.word	0x3e112e0b
     cac:	40240000 	.word	0x40240000
     cb0:	0000629d 	.word	0x0000629d
     cb4:	00007425 	.word	0x00007425
     cb8:	3ff00000 	.word	0x3ff00000
     cbc:	000068bd 	.word	0x000068bd
     cc0:	00007a51 	.word	0x00007a51
     cc4:	41002000 	.word	0x41002000
     cc8:	0000378d 	.word	0x0000378d
     ccc:	40080000 	.word	0x40080000
     cd0:	000060f5 	.word	0x000060f5

00000cd4 <i2c_master_read_packet_wait>:
     cd4:	2301      	movs	r3, #1
     cd6:	b510      	push	{r4, lr}
     cd8:	7283      	strb	r3, [r0, #10]
     cda:	72c3      	strb	r3, [r0, #11]
     cdc:	4b01      	ldr	r3, [pc, #4]	; (ce4 <i2c_master_read_packet_wait+0x10>)
     cde:	4798      	blx	r3
     ce0:	bd10      	pop	{r4, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000741 	.word	0x00000741

00000ce8 <i2c_master_write_packet_wait_no_stop>:
     ce8:	2300      	movs	r3, #0
     cea:	b510      	push	{r4, lr}
     cec:	7283      	strb	r3, [r0, #10]
     cee:	3301      	adds	r3, #1
     cf0:	72c3      	strb	r3, [r0, #11]
     cf2:	4b01      	ldr	r3, [pc, #4]	; (cf8 <i2c_master_write_packet_wait_no_stop+0x10>)
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	000005bd 	.word	0x000005bd

00000cfc <wdt_set_config>:
     cfc:	2180      	movs	r1, #128	; 0x80
     cfe:	b510      	push	{r4, lr}
     d00:	4a29      	ldr	r2, [pc, #164]	; (da8 <wdt_set_config+0xac>)
     d02:	6953      	ldr	r3, [r2, #20]
     d04:	430b      	orrs	r3, r1
     d06:	4929      	ldr	r1, [pc, #164]	; (dac <wdt_set_config+0xb0>)
     d08:	6153      	str	r3, [r2, #20]
     d0a:	780b      	ldrb	r3, [r1, #0]
     d0c:	2210      	movs	r2, #16
     d0e:	b25b      	sxtb	r3, r3
     d10:	2b00      	cmp	r3, #0
     d12:	db03      	blt.n	d1c <wdt_set_config+0x20>
     d14:	7883      	ldrb	r3, [r0, #2]
     d16:	3207      	adds	r2, #7
     d18:	2b00      	cmp	r3, #0
     d1a:	d101      	bne.n	d20 <wdt_set_config+0x24>
     d1c:	0010      	movs	r0, r2
     d1e:	bd10      	pop	{r4, pc}
     d20:	78c4      	ldrb	r4, [r0, #3]
     d22:	429c      	cmp	r4, r3
     d24:	d8fa      	bhi.n	d1c <wdt_set_config+0x20>
     d26:	7904      	ldrb	r4, [r0, #4]
     d28:	429c      	cmp	r4, r3
     d2a:	d8f7      	bhi.n	d1c <wdt_set_config+0x20>
     d2c:	780b      	ldrb	r3, [r1, #0]
     d2e:	3a15      	subs	r2, #21
     d30:	4393      	bics	r3, r2
     d32:	700b      	strb	r3, [r1, #0]
     d34:	688b      	ldr	r3, [r1, #8]
     d36:	2b00      	cmp	r3, #0
     d38:	d1fc      	bne.n	d34 <wdt_set_config+0x38>
     d3a:	7843      	ldrb	r3, [r0, #1]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d101      	bne.n	d44 <wdt_set_config+0x48>
     d40:	2200      	movs	r2, #0
     d42:	e7eb      	b.n	d1c <wdt_set_config+0x20>
     d44:	7883      	ldrb	r3, [r0, #2]
     d46:	78c2      	ldrb	r2, [r0, #3]
     d48:	3b01      	subs	r3, #1
     d4a:	2a00      	cmp	r2, #0
     d4c:	d026      	beq.n	d9c <wdt_set_config+0xa0>
     d4e:	2204      	movs	r2, #4
     d50:	780c      	ldrb	r4, [r1, #0]
     d52:	4322      	orrs	r2, r4
     d54:	700a      	strb	r2, [r1, #0]
     d56:	78c2      	ldrb	r2, [r0, #3]
     d58:	3a01      	subs	r2, #1
     d5a:	0112      	lsls	r2, r2, #4
     d5c:	4313      	orrs	r3, r2
     d5e:	4a13      	ldr	r2, [pc, #76]	; (dac <wdt_set_config+0xb0>)
     d60:	6891      	ldr	r1, [r2, #8]
     d62:	2900      	cmp	r1, #0
     d64:	d1fc      	bne.n	d60 <wdt_set_config+0x64>
     d66:	b2db      	uxtb	r3, r3
     d68:	7053      	strb	r3, [r2, #1]
     d6a:	7903      	ldrb	r3, [r0, #4]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d002      	beq.n	d76 <wdt_set_config+0x7a>
     d70:	3b01      	subs	r3, #1
     d72:	b2db      	uxtb	r3, r3
     d74:	7093      	strb	r3, [r2, #2]
     d76:	7803      	ldrb	r3, [r0, #0]
     d78:	4a0c      	ldr	r2, [pc, #48]	; (dac <wdt_set_config+0xb0>)
     d7a:	2b00      	cmp	r3, #0
     d7c:	d009      	beq.n	d92 <wdt_set_config+0x96>
     d7e:	2180      	movs	r1, #128	; 0x80
     d80:	7813      	ldrb	r3, [r2, #0]
     d82:	430b      	orrs	r3, r1
     d84:	7013      	strb	r3, [r2, #0]
     d86:	4b09      	ldr	r3, [pc, #36]	; (dac <wdt_set_config+0xb0>)
     d88:	689a      	ldr	r2, [r3, #8]
     d8a:	2a00      	cmp	r2, #0
     d8c:	d1fc      	bne.n	d88 <wdt_set_config+0x8c>
     d8e:	2200      	movs	r2, #0
     d90:	e7c4      	b.n	d1c <wdt_set_config+0x20>
     d92:	2302      	movs	r3, #2
     d94:	7811      	ldrb	r1, [r2, #0]
     d96:	430b      	orrs	r3, r1
     d98:	7013      	strb	r3, [r2, #0]
     d9a:	e7f4      	b.n	d86 <wdt_set_config+0x8a>
     d9c:	2404      	movs	r4, #4
     d9e:	780a      	ldrb	r2, [r1, #0]
     da0:	43a2      	bics	r2, r4
     da2:	700a      	strb	r2, [r1, #0]
     da4:	e7db      	b.n	d5e <wdt_set_config+0x62>
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	40000400 	.word	0x40000400
     dac:	40001c00 	.word	0x40001c00

00000db0 <wdt_reset_count>:
     db0:	22a5      	movs	r2, #165	; 0xa5
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <wdt_reset_count+0x10>)
     db4:	731a      	strb	r2, [r3, #12]
     db6:	689a      	ldr	r2, [r3, #8]
     db8:	2a00      	cmp	r2, #0
     dba:	d1fc      	bne.n	db6 <wdt_reset_count+0x6>
     dbc:	4770      	bx	lr
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <wdt_register_callback>:
     dc4:	2900      	cmp	r1, #0
     dc6:	d001      	beq.n	dcc <wdt_register_callback+0x8>
     dc8:	2017      	movs	r0, #23
     dca:	4770      	bx	lr
     dcc:	4b01      	ldr	r3, [pc, #4]	; (dd4 <wdt_register_callback+0x10>)
     dce:	6018      	str	r0, [r3, #0]
     dd0:	2000      	movs	r0, #0
     dd2:	e7fa      	b.n	dca <wdt_register_callback+0x6>
     dd4:	20000290 	.word	0x20000290

00000dd8 <wdt_enable_callback>:
     dd8:	2800      	cmp	r0, #0
     dda:	d001      	beq.n	de0 <wdt_enable_callback+0x8>
     ddc:	2017      	movs	r0, #23
     dde:	4770      	bx	lr
     de0:	2201      	movs	r2, #1
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <wdt_enable_callback+0x18>)
     de4:	715a      	strb	r2, [r3, #5]
     de6:	4b03      	ldr	r3, [pc, #12]	; (df4 <wdt_enable_callback+0x1c>)
     de8:	3201      	adds	r2, #1
     dea:	601a      	str	r2, [r3, #0]
     dec:	e7f7      	b.n	dde <wdt_enable_callback+0x6>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	40001c00 	.word	0x40001c00
     df4:	e000e100 	.word	0xe000e100

00000df8 <WDT_Handler>:
     df8:	2201      	movs	r2, #1
     dfa:	b510      	push	{r4, lr}
     dfc:	4b03      	ldr	r3, [pc, #12]	; (e0c <WDT_Handler+0x14>)
     dfe:	719a      	strb	r2, [r3, #6]
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <WDT_Handler+0x18>)
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	2b00      	cmp	r3, #0
     e06:	d000      	beq.n	e0a <WDT_Handler+0x12>
     e08:	4798      	blx	r3
     e0a:	bd10      	pop	{r4, pc}
     e0c:	40001c00 	.word	0x40001c00
     e10:	20000290 	.word	0x20000290

00000e14 <PHY_RandomReq>:

/*************************************************************************/ /**
*****************************************************************************/
// Random Number Generator
uint16_t PHY_RandomReq(void)
{
     e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e16:	46ce      	mov	lr, r9
     e18:	4647      	mov	r7, r8
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    do {
        phyWriteRegister(RG_TRX_STATE, TRX_CMD_FORCE_TRX_OFF);
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e1a:	261f      	movs	r6, #31
{
     e1c:	b580      	push	{r7, lr}
     e1e:	4d2b      	ldr	r5, [pc, #172]	; (ecc <PHY_RandomReq+0xb8>)
     e20:	4c2b      	ldr	r4, [pc, #172]	; (ed0 <PHY_RandomReq+0xbc>)
    trx_reg_write(reg, value);
     e22:	2103      	movs	r1, #3
     e24:	2002      	movs	r0, #2
     e26:	47a8      	blx	r5
    value = trx_reg_read(reg);
     e28:	2001      	movs	r0, #1
     e2a:	47a0      	blx	r4
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e2c:	4030      	ands	r0, r6
     e2e:	2808      	cmp	r0, #8
     e30:	d1f7      	bne.n	e22 <PHY_RandomReq+0xe>

    do {
        phyWriteRegister(RG_TRX_STATE,
            state);
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e32:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     e34:	2106      	movs	r1, #6
     e36:	2002      	movs	r0, #2
     e38:	47a8      	blx	r5
    value = trx_reg_read(reg);
     e3a:	2001      	movs	r0, #1
     e3c:	47a0      	blx	r4
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e3e:	4030      	ands	r0, r6
     e40:	2806      	cmp	r0, #6
     e42:	d1f7      	bne.n	e34 <PHY_RandomReq+0x20>
     e44:	2300      	movs	r3, #0
     e46:	4699      	mov	r9, r3
     e48:	4b22      	ldr	r3, [pc, #136]	; (ed4 <PHY_RandomReq+0xc0>)
     e4a:	2600      	movs	r6, #0
     e4c:	4698      	mov	r8, r3
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
     e4e:	2703      	movs	r7, #3
        delay_cycles_us(1);
     e50:	2001      	movs	r0, #1
     e52:	47c0      	blx	r8
    value = trx_reg_read(reg);
     e54:	2006      	movs	r0, #6
     e56:	47a0      	blx	r4
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
     e58:	0940      	lsrs	r0, r0, #5
        rnd |= rndValue << i;
     e5a:	4038      	ands	r0, r7
     e5c:	464b      	mov	r3, r9
     e5e:	40b0      	lsls	r0, r6
     e60:	4318      	orrs	r0, r3
     e62:	b283      	uxth	r3, r0
     e64:	3602      	adds	r6, #2
     e66:	4699      	mov	r9, r3
    for (uint8_t i = 0; i < 16; i += 2) {
     e68:	2e10      	cmp	r6, #16
     e6a:	d1f1      	bne.n	e50 <PHY_RandomReq+0x3c>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e6c:	360f      	adds	r6, #15
    trx_reg_write(reg, value);
     e6e:	2103      	movs	r1, #3
     e70:	2002      	movs	r0, #2
     e72:	47a8      	blx	r5
    value = trx_reg_read(reg);
     e74:	2001      	movs	r0, #1
     e76:	47a0      	blx	r4
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e78:	4030      	ands	r0, r6
     e7a:	2808      	cmp	r0, #8
     e7c:	d1f7      	bne.n	e6e <PHY_RandomReq+0x5a>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e7e:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     e80:	2108      	movs	r1, #8
     e82:	2002      	movs	r0, #2
     e84:	47a8      	blx	r5
    value = trx_reg_read(reg);
     e86:	2001      	movs	r0, #1
     e88:	47a0      	blx	r4
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     e8a:	4030      	ands	r0, r6
     e8c:	2808      	cmp	r0, #8
     e8e:	d1f7      	bne.n	e80 <PHY_RandomReq+0x6c>
    value = trx_reg_read(reg);
     e90:	3007      	adds	r0, #7
     e92:	47a0      	blx	r4
    if (phyRxState) {
     e94:	4b10      	ldr	r3, [pc, #64]	; (ed8 <PHY_RandomReq+0xc4>)
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d104      	bne.n	ea6 <PHY_RandomReq+0x92>
}
     e9c:	4648      	mov	r0, r9
     e9e:	bc0c      	pop	{r2, r3}
     ea0:	4690      	mov	r8, r2
     ea2:	4699      	mov	r9, r3
     ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     ea6:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     ea8:	2103      	movs	r1, #3
     eaa:	2002      	movs	r0, #2
     eac:	47a8      	blx	r5
    value = trx_reg_read(reg);
     eae:	2001      	movs	r0, #1
     eb0:	47a0      	blx	r4
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     eb2:	4030      	ands	r0, r6
     eb4:	2808      	cmp	r0, #8
     eb6:	d1f7      	bne.n	ea8 <PHY_RandomReq+0x94>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     eb8:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     eba:	2116      	movs	r1, #22
     ebc:	2002      	movs	r0, #2
     ebe:	47a8      	blx	r5
    value = trx_reg_read(reg);
     ec0:	2001      	movs	r0, #1
     ec2:	47a0      	blx	r4
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     ec4:	4030      	ands	r0, r6
     ec6:	2816      	cmp	r0, #22
     ec8:	d1f7      	bne.n	eba <PHY_RandomReq+0xa6>
     eca:	e7e7      	b.n	e9c <PHY_RandomReq+0x88>
     ecc:	000055b5 	.word	0x000055b5
     ed0:	000054b9 	.word	0x000054b9
     ed4:	00003185 	.word	0x00003185
     ed8:	20000128 	.word	0x20000128

00000edc <PHY_Sleep>:
{
     edc:	b570      	push	{r4, r5, r6, lr}
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     ede:	261f      	movs	r6, #31
     ee0:	4c0d      	ldr	r4, [pc, #52]	; (f18 <PHY_Sleep+0x3c>)
     ee2:	4d0e      	ldr	r5, [pc, #56]	; (f1c <PHY_Sleep+0x40>)
    trx_reg_write(reg, value);
     ee4:	2103      	movs	r1, #3
     ee6:	2002      	movs	r0, #2
     ee8:	47a0      	blx	r4
    value = trx_reg_read(reg);
     eea:	2001      	movs	r0, #1
     eec:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     eee:	4030      	ands	r0, r6
     ef0:	2808      	cmp	r0, #8
     ef2:	d1f7      	bne.n	ee4 <PHY_Sleep+0x8>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     ef4:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
     ef6:	2108      	movs	r1, #8
     ef8:	2002      	movs	r0, #2
     efa:	47a0      	blx	r4
    value = trx_reg_read(reg);
     efc:	2001      	movs	r0, #1
     efe:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
     f00:	4030      	ands	r0, r6
     f02:	2808      	cmp	r0, #8
     f04:	d1f7      	bne.n	ef6 <PHY_Sleep+0x1a>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f06:	2280      	movs	r2, #128	; 0x80
     f08:	4b05      	ldr	r3, [pc, #20]	; (f20 <PHY_Sleep+0x44>)
     f0a:	0352      	lsls	r2, r2, #13
     f0c:	619a      	str	r2, [r3, #24]
    phyState = PHY_STATE_SLEEP;
     f0e:	2202      	movs	r2, #2
     f10:	4b04      	ldr	r3, [pc, #16]	; (f24 <PHY_Sleep+0x48>)
     f12:	701a      	strb	r2, [r3, #0]
}
     f14:	bd70      	pop	{r4, r5, r6, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	000055b5 	.word	0x000055b5
     f1c:	000054b9 	.word	0x000054b9
     f20:	40002800 	.word	0x40002800
     f24:	20000129 	.word	0x20000129

00000f28 <MiMAC_SetAltAddress>:
{
     f28:	b510      	push	{r4, lr}
    myNetworkAddress.v[0] = Address[0];
     f2a:	4b0e      	ldr	r3, [pc, #56]	; (f64 <MiMAC_SetAltAddress+0x3c>)
     f2c:	7802      	ldrb	r2, [r0, #0]
    trx_reg_write(reg, value);
     f2e:	4c0e      	ldr	r4, [pc, #56]	; (f68 <MiMAC_SetAltAddress+0x40>)
    myNetworkAddress.v[0] = Address[0];
     f30:	701a      	strb	r2, [r3, #0]
    myNetworkAddress.v[1] = Address[1];
     f32:	7842      	ldrb	r2, [r0, #1]
    trx_reg_write(reg, value);
     f34:	2020      	movs	r0, #32
    myNetworkAddress.v[1] = Address[1];
     f36:	705a      	strb	r2, [r3, #1]
    MAC_PANID.v[0] = PANID[0];
     f38:	780a      	ldrb	r2, [r1, #0]
     f3a:	4b0c      	ldr	r3, [pc, #48]	; (f6c <MiMAC_SetAltAddress+0x44>)
     f3c:	701a      	strb	r2, [r3, #0]
    MAC_PANID.v[1] = PANID[1];
     f3e:	784a      	ldrb	r2, [r1, #1]
    trx_reg_write(reg, value);
     f40:	2101      	movs	r1, #1
    MAC_PANID.v[1] = PANID[1];
     f42:	705a      	strb	r2, [r3, #1]
    trx_reg_write(reg, value);
     f44:	47a0      	blx	r4
     f46:	2100      	movs	r1, #0
     f48:	2021      	movs	r0, #33	; 0x21
     f4a:	47a0      	blx	r4
     f4c:	2101      	movs	r1, #1
     f4e:	202d      	movs	r0, #45	; 0x2d
     f50:	47a0      	blx	r4
     f52:	2111      	movs	r1, #17
     f54:	2022      	movs	r0, #34	; 0x22
     f56:	47a0      	blx	r4
     f58:	2111      	movs	r1, #17
     f5a:	2023      	movs	r0, #35	; 0x23
     f5c:	47a0      	blx	r4
}
     f5e:	2001      	movs	r0, #1
     f60:	bd10      	pop	{r4, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	20000298 	.word	0x20000298
     f68:	000055b5 	.word	0x000055b5
     f6c:	2000090c 	.word	0x2000090c

00000f70 <mic_generator>:
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	464e      	mov	r6, r9
     f74:	46de      	mov	lr, fp
     f76:	4657      	mov	r7, sl
     f78:	4645      	mov	r5, r8
     f7a:	b5e0      	push	{r5, r6, r7, lr}
     f7c:	b0a9      	sub	sp, #164	; 0xa4
     f7e:	9303      	str	r3, [sp, #12]
     f80:	9002      	str	r0, [sp, #8]
     f82:	9101      	str	r1, [sp, #4]
     f84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    iterations = len / AES_BLOCKSIZE;
     f86:	090e      	lsrs	r6, r1, #4
    if (len % AES_BLOCKSIZE != 0)
     f88:	0709      	lsls	r1, r1, #28
     f8a:	d000      	beq.n	f8e <mic_generator+0x1e>
        iterations++;
     f8c:	3601      	adds	r6, #1
    InitVect_in[0] = frame_control; //0x49
     f8e:	4c67      	ldr	r4, [pc, #412]	; (112c <mic_generator+0x1bc>)
    cbc_header_with_padding[0] = 0x00; // l(a)
     f90:	af04      	add	r7, sp, #16
    InitVect_in[0] = frame_control; //0x49
     f92:	7022      	strb	r2, [r4, #0]
    cbc_header_with_padding[2] = frame_control; //frame_control;
     f94:	70ba      	strb	r2, [r7, #2]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     f96:	781a      	ldrb	r2, [r3, #0]
    cbc_header_with_padding[0] = 0x00; // l(a)
     f98:	2500      	movs	r5, #0
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     f9a:	7062      	strb	r2, [r4, #1]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     f9c:	781a      	ldrb	r2, [r3, #0]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
     f9e:	210d      	movs	r1, #13
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fa0:	71fa      	strb	r2, [r7, #7]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fa2:	785a      	ldrb	r2, [r3, #1]
     fa4:	0020      	movs	r0, r4
     fa6:	70a2      	strb	r2, [r4, #2]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fa8:	785a      	ldrb	r2, [r3, #1]
    cbc_header_with_padding[0] = 0x00; // l(a)
     faa:	703d      	strb	r5, [r7, #0]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fac:	723a      	strb	r2, [r7, #8]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fae:	789a      	ldrb	r2, [r3, #2]
    cbc_header_with_padding[1] = 0x0d; // l(a)Header Length
     fb0:	7079      	strb	r1, [r7, #1]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fb2:	70e2      	strb	r2, [r4, #3]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fb4:	789a      	ldrb	r2, [r3, #2]
     fb6:	a903      	add	r1, sp, #12
     fb8:	727a      	strb	r2, [r7, #9]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fba:	78da      	ldrb	r2, [r3, #3]
     fbc:	3009      	adds	r0, #9
     fbe:	7122      	strb	r2, [r4, #4]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fc0:	78da      	ldrb	r2, [r3, #3]
     fc2:	72ba      	strb	r2, [r7, #10]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fc4:	791a      	ldrb	r2, [r3, #4]
     fc6:	7162      	strb	r2, [r4, #5]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fc8:	791a      	ldrb	r2, [r3, #4]
     fca:	72fa      	strb	r2, [r7, #11]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fcc:	795a      	ldrb	r2, [r3, #5]
     fce:	71a2      	strb	r2, [r4, #6]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fd0:	795a      	ldrb	r2, [r3, #5]
     fd2:	733a      	strb	r2, [r7, #12]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fd4:	799a      	ldrb	r2, [r3, #6]
     fd6:	71e2      	strb	r2, [r4, #7]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fd8:	799a      	ldrb	r2, [r3, #6]
     fda:	737a      	strb	r2, [r7, #13]
        InitVect_in[i + 1] = SourceIEEEAddress[i];
     fdc:	79da      	ldrb	r2, [r3, #7]
     fde:	7222      	strb	r2, [r4, #8]
        cbc_header_with_padding[i + 7] = SourceIEEEAddress[i];
     fe0:	79db      	ldrb	r3, [r3, #7]
     fe2:	2204      	movs	r2, #4
     fe4:	73bb      	strb	r3, [r7, #14]
     fe6:	4b52      	ldr	r3, [pc, #328]	; (1130 <mic_generator+0x1c0>)
     fe8:	4798      	blx	r3
     fea:	ab02      	add	r3, sp, #8
     fec:	469c      	mov	ip, r3
     fee:	200b      	movs	r0, #11
     ff0:	2204      	movs	r2, #4
     ff2:	4460      	add	r0, ip
     ff4:	a903      	add	r1, sp, #12
     ff6:	4b4e      	ldr	r3, [pc, #312]	; (1130 <mic_generator+0x1c0>)
     ff8:	4798      	blx	r3
    InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
     ffa:	2304      	movs	r3, #4
     ffc:	7363      	strb	r3, [r4, #13]
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
     ffe:	466b      	mov	r3, sp
    1000:	791b      	ldrb	r3, [r3, #4]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1002:	2200      	movs	r2, #0
    InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    1004:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1006:	4b4b      	ldr	r3, [pc, #300]	; (1134 <mic_generator+0x1c4>)
    1008:	2100      	movs	r1, #0
    100a:	0018      	movs	r0, r3
    100c:	4698      	mov	r8, r3
    100e:	4b4a      	ldr	r3, [pc, #296]	; (1138 <mic_generator+0x1c8>)
    cbc_header_with_padding[15] = 0x00; // Padding
    1010:	73fd      	strb	r5, [r7, #15]
    InitVect_in[14] = 0x00; // 15 th byte padded to zero
    1012:	73a5      	strb	r5, [r4, #14]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1014:	4699      	mov	r9, r3
    1016:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    1018:	4b48      	ldr	r3, [pc, #288]	; (113c <mic_generator+0x1cc>)
    101a:	2100      	movs	r1, #0
    101c:	0020      	movs	r0, r4
    101e:	469a      	mov	sl, r3
    1020:	4798      	blx	r3
    sal_aes_read(text);
    1022:	4b47      	ldr	r3, [pc, #284]	; (1140 <mic_generator+0x1d0>)
    1024:	0020      	movs	r0, r4
    1026:	ad08      	add	r5, sp, #32
    1028:	469b      	mov	fp, r3
    102a:	4798      	blx	r3
    102c:	0039      	movs	r1, r7
    102e:	4b40      	ldr	r3, [pc, #256]	; (1130 <mic_generator+0x1c0>)
    1030:	2210      	movs	r2, #16
    1032:	0028      	movs	r0, r5
    1034:	4798      	blx	r3
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    1036:	9901      	ldr	r1, [sp, #4]
    1038:	2010      	movs	r0, #16
    103a:	310f      	adds	r1, #15
    103c:	2310      	movs	r3, #16
    103e:	290f      	cmp	r1, #15
    1040:	d009      	beq.n	1056 <mic_generator+0xe6>
    1042:	9f02      	ldr	r7, [sp, #8]
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    1044:	18fa      	adds	r2, r7, r3
    1046:	3a10      	subs	r2, #16
    1048:	7812      	ldrb	r2, [r2, #0]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    104a:	3301      	adds	r3, #1
    104c:	b2db      	uxtb	r3, r3
        copy_packet[i] = Payloadinfo[i - AES_BLOCKSIZE]; // Copying the Payload
    104e:	542a      	strb	r2, [r5, r0]
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    1050:	0018      	movs	r0, r3
    1052:	428b      	cmp	r3, r1
    1054:	ddf6      	ble.n	1044 <mic_generator+0xd4>
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    1056:	9b01      	ldr	r3, [sp, #4]
    1058:	1c72      	adds	r2, r6, #1
    105a:	3310      	adds	r3, #16
    105c:	b2db      	uxtb	r3, r3
    105e:	0112      	lsls	r2, r2, #4
        copy_packet[i] = 0; // Padding
    1060:	2100      	movs	r1, #0
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    1062:	4293      	cmp	r3, r2
    1064:	da04      	bge.n	1070 <mic_generator+0x100>
        copy_packet[i] = 0; // Padding
    1066:	54e9      	strb	r1, [r5, r3]
    for (i = len + 16; i < (iterations * AES_BLOCKSIZE) + AES_BLOCKSIZE; i++) {
    1068:	3301      	adds	r3, #1
    106a:	b2db      	uxtb	r3, r3
    106c:	4293      	cmp	r3, r2
    106e:	dbfa      	blt.n	1066 <mic_generator+0xf6>
    for (i = 16; i < len + AES_BLOCKSIZE; i++) {
    1070:	2300      	movs	r3, #0
    1072:	2700      	movs	r7, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1074:	011b      	lsls	r3, r3, #4
    1076:	5ce9      	ldrb	r1, [r5, r3]
    1078:	7822      	ldrb	r2, [r4, #0]
    107a:	18eb      	adds	r3, r5, r3
    107c:	404a      	eors	r2, r1
    107e:	7022      	strb	r2, [r4, #0]
    1080:	7861      	ldrb	r1, [r4, #1]
    1082:	785a      	ldrb	r2, [r3, #1]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1084:	4640      	mov	r0, r8
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1086:	404a      	eors	r2, r1
    1088:	7062      	strb	r2, [r4, #1]
    108a:	78a1      	ldrb	r1, [r4, #2]
    108c:	789a      	ldrb	r2, [r3, #2]
    for (i = 0; i < iterations + 1; i++) {
    108e:	3701      	adds	r7, #1
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1090:	404a      	eors	r2, r1
    1092:	70a2      	strb	r2, [r4, #2]
    1094:	78e1      	ldrb	r1, [r4, #3]
    1096:	78da      	ldrb	r2, [r3, #3]
    for (i = 0; i < iterations + 1; i++) {
    1098:	b2ff      	uxtb	r7, r7
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    109a:	404a      	eors	r2, r1
    109c:	70e2      	strb	r2, [r4, #3]
    109e:	7921      	ldrb	r1, [r4, #4]
    10a0:	791a      	ldrb	r2, [r3, #4]
    10a2:	404a      	eors	r2, r1
    10a4:	7122      	strb	r2, [r4, #4]
    10a6:	7961      	ldrb	r1, [r4, #5]
    10a8:	795a      	ldrb	r2, [r3, #5]
    10aa:	404a      	eors	r2, r1
    10ac:	7162      	strb	r2, [r4, #5]
    10ae:	79a1      	ldrb	r1, [r4, #6]
    10b0:	799a      	ldrb	r2, [r3, #6]
    10b2:	404a      	eors	r2, r1
    10b4:	71a2      	strb	r2, [r4, #6]
    10b6:	79e1      	ldrb	r1, [r4, #7]
    10b8:	79da      	ldrb	r2, [r3, #7]
    10ba:	404a      	eors	r2, r1
    10bc:	71e2      	strb	r2, [r4, #7]
    10be:	7a21      	ldrb	r1, [r4, #8]
    10c0:	7a1a      	ldrb	r2, [r3, #8]
    10c2:	404a      	eors	r2, r1
    10c4:	7222      	strb	r2, [r4, #8]
    10c6:	7a61      	ldrb	r1, [r4, #9]
    10c8:	7a5a      	ldrb	r2, [r3, #9]
    10ca:	404a      	eors	r2, r1
    10cc:	7262      	strb	r2, [r4, #9]
    10ce:	7aa1      	ldrb	r1, [r4, #10]
    10d0:	7a9a      	ldrb	r2, [r3, #10]
    10d2:	404a      	eors	r2, r1
    10d4:	72a2      	strb	r2, [r4, #10]
    10d6:	7ae1      	ldrb	r1, [r4, #11]
    10d8:	7ada      	ldrb	r2, [r3, #11]
    10da:	404a      	eors	r2, r1
    10dc:	72e2      	strb	r2, [r4, #11]
    10de:	7b21      	ldrb	r1, [r4, #12]
    10e0:	7b1a      	ldrb	r2, [r3, #12]
    10e2:	404a      	eors	r2, r1
    10e4:	7322      	strb	r2, [r4, #12]
    10e6:	7b61      	ldrb	r1, [r4, #13]
    10e8:	7b5a      	ldrb	r2, [r3, #13]
    10ea:	404a      	eors	r2, r1
    10ec:	7362      	strb	r2, [r4, #13]
    10ee:	7ba1      	ldrb	r1, [r4, #14]
    10f0:	7b9a      	ldrb	r2, [r3, #14]
    10f2:	7bdb      	ldrb	r3, [r3, #15]
    10f4:	404a      	eors	r2, r1
    10f6:	73a2      	strb	r2, [r4, #14]
    10f8:	7be2      	ldrb	r2, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    10fa:	2100      	movs	r1, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    10fc:	4053      	eors	r3, r2
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    10fe:	2200      	movs	r2, #0
            InitVect_in[j] = InitVect_in[j] ^ copy_packet[j + (i * 16)];
    1100:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1102:	47c8      	blx	r9
    sal_aes_wrrd(text, NULL);
    1104:	2100      	movs	r1, #0
    1106:	0020      	movs	r0, r4
    1108:	47d0      	blx	sl
    sal_aes_read(text);
    110a:	0020      	movs	r0, r4
    110c:	47d8      	blx	fp
    for (i = 0; i < iterations + 1; i++) {
    110e:	003b      	movs	r3, r7
    1110:	42b7      	cmp	r7, r6
    1112:	ddaf      	ble.n	1074 <mic_generator+0x104>
    1114:	2210      	movs	r2, #16
    1116:	0021      	movs	r1, r4
    1118:	4b05      	ldr	r3, [pc, #20]	; (1130 <mic_generator+0x1c0>)
    111a:	480a      	ldr	r0, [pc, #40]	; (1144 <mic_generator+0x1d4>)
    111c:	4798      	blx	r3
}
    111e:	b029      	add	sp, #164	; 0xa4
    1120:	bc3c      	pop	{r2, r3, r4, r5}
    1122:	4690      	mov	r8, r2
    1124:	4699      	mov	r9, r3
    1126:	46a2      	mov	sl, r4
    1128:	46ab      	mov	fp, r5
    112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    112c:	200002a8 	.word	0x200002a8
    1130:	00007ead 	.word	0x00007ead
    1134:	20000004 	.word	0x20000004
    1138:	00002e8d 	.word	0x00002e8d
    113c:	00003009 	.word	0x00003009
    1140:	0000307d 	.word	0x0000307d
    1144:	200008f8 	.word	0x200008f8

00001148 <DataEncrypt>:
{
    1148:	b5f0      	push	{r4, r5, r6, r7, lr}
    114a:	4657      	mov	r7, sl
    114c:	464e      	mov	r6, r9
    114e:	46de      	mov	lr, fp
    1150:	4645      	mov	r5, r8
    1152:	b5e0      	push	{r5, r6, r7, lr}
    1154:	000f      	movs	r7, r1
    iterations = *Payload_len / AES_BLOCKSIZE;
    1156:	7809      	ldrb	r1, [r1, #0]
{
    1158:	b091      	sub	sp, #68	; 0x44
    115a:	0014      	movs	r4, r2
    115c:	001a      	movs	r2, r3
    iterations = *Payload_len / AES_BLOCKSIZE;
    115e:	090b      	lsrs	r3, r1, #4
{
    1160:	9007      	str	r0, [sp, #28]
    iterations = *Payload_len / AES_BLOCKSIZE;
    1162:	4699      	mov	r9, r3
    if (*Payload_len % AES_BLOCKSIZE != 0)
    1164:	070b      	lsls	r3, r1, #28
    1166:	d002      	beq.n	116e <DataEncrypt+0x26>
        iterations++;
    1168:	2301      	movs	r3, #1
    116a:	469c      	mov	ip, r3
    116c:	44e1      	add	r9, ip
    mic_generator(&Payloadinfo[0], *Payload_len, FrameControl, FrameCounter, MACInitParams.PAddress);
    116e:	4d9d      	ldr	r5, [pc, #628]	; (13e4 <DataEncrypt+0x29c>)
    1170:	4e9d      	ldr	r6, [pc, #628]	; (13e8 <DataEncrypt+0x2a0>)
    1172:	686b      	ldr	r3, [r5, #4]
    1174:	9300      	str	r3, [sp, #0]
    1176:	0023      	movs	r3, r4
    1178:	47b0      	blx	r6
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    117a:	464a      	mov	r2, r9
    117c:	783b      	ldrb	r3, [r7, #0]
    117e:	0112      	lsls	r2, r2, #4
        Payloadinfo[i] = 0; // Padding
    1180:	2100      	movs	r1, #0
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    1182:	429a      	cmp	r2, r3
    1184:	dd06      	ble.n	1194 <DataEncrypt+0x4c>
    1186:	9e07      	ldr	r6, [sp, #28]
        Payloadinfo[i] = 0; // Padding
    1188:	54f1      	strb	r1, [r6, r3]
    for (i = *Payload_len; i < iterations * AES_BLOCKSIZE; i++) {
    118a:	3301      	adds	r3, #1
    118c:	b2db      	uxtb	r3, r3
    118e:	4293      	cmp	r3, r2
    1190:	dbfa      	blt.n	1188 <DataEncrypt+0x40>
    1192:	9607      	str	r6, [sp, #28]
    CTR_Nonce_and_Counter[0] = 0x01; // L
    1194:	2301      	movs	r3, #1
    1196:	af0c      	add	r7, sp, #48	; 0x30
    1198:	703b      	strb	r3, [r7, #0]
    119a:	ab06      	add	r3, sp, #24
    119c:	469c      	mov	ip, r3
    119e:	2019      	movs	r0, #25
    11a0:	6869      	ldr	r1, [r5, #4]
    11a2:	2208      	movs	r2, #8
    11a4:	4460      	add	r0, ip
    11a6:	4b91      	ldr	r3, [pc, #580]	; (13ec <DataEncrypt+0x2a4>)
    11a8:	4798      	blx	r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    11aa:	0423      	lsls	r3, r4, #16
    11ac:	0221      	lsls	r1, r4, #8
    11ae:	0e1b      	lsrs	r3, r3, #24
    11b0:	9304      	str	r3, [sp, #16]
    11b2:	0e0b      	lsrs	r3, r1, #24
    11b4:	001e      	movs	r6, r3
    11b6:	0e23      	lsrs	r3, r4, #24
    11b8:	9303      	str	r3, [sp, #12]
    11ba:	787b      	ldrb	r3, [r7, #1]
    11bc:	79b8      	ldrb	r0, [r7, #6]
    11be:	469b      	mov	fp, r3
    11c0:	78bb      	ldrb	r3, [r7, #2]
    11c2:	79f9      	ldrb	r1, [r7, #7]
    11c4:	469a      	mov	sl, r3
    11c6:	78fb      	ldrb	r3, [r7, #3]
    11c8:	b2e2      	uxtb	r2, r4
    11ca:	469c      	mov	ip, r3
    11cc:	7a3b      	ldrb	r3, [r7, #8]
    11ce:	797c      	ldrb	r4, [r7, #5]
    11d0:	9302      	str	r3, [sp, #8]
    11d2:	2300      	movs	r3, #0
    11d4:	4698      	mov	r8, r3
    11d6:	465b      	mov	r3, fp
    11d8:	021b      	lsls	r3, r3, #8
    11da:	469b      	mov	fp, r3
    11dc:	0212      	lsls	r2, r2, #8
    11de:	9206      	str	r2, [sp, #24]
    11e0:	9a04      	ldr	r2, [sp, #16]
    11e2:	4653      	mov	r3, sl
    11e4:	0412      	lsls	r2, r2, #16
    11e6:	9204      	str	r2, [sp, #16]
    11e8:	0632      	lsls	r2, r6, #24
    11ea:	9205      	str	r2, [sp, #20]
    11ec:	4a80      	ldr	r2, [pc, #512]	; (13f0 <DataEncrypt+0x2a8>)
            block[j] = CTR_Nonce_and_Counter[j];
    11ee:	2601      	movs	r6, #1
    11f0:	4692      	mov	sl, r2
    11f2:	465a      	mov	r2, fp
    11f4:	4665      	mov	r5, ip
    11f6:	4332      	orrs	r2, r6
    11f8:	041b      	lsls	r3, r3, #16
    11fa:	4313      	orrs	r3, r2
    11fc:	062d      	lsls	r5, r5, #24
    11fe:	469b      	mov	fp, r3
    1200:	46ac      	mov	ip, r5
    1202:	0224      	lsls	r4, r4, #8
    1204:	0025      	movs	r5, r4
    1206:	465a      	mov	r2, fp
    1208:	4663      	mov	r3, ip
    120a:	793f      	ldrb	r7, [r7, #4]
    120c:	0400      	lsls	r0, r0, #16
    120e:	432f      	orrs	r7, r5
    1210:	0609      	lsls	r1, r1, #24
    1212:	4307      	orrs	r7, r0
    1214:	4313      	orrs	r3, r2
    1216:	430f      	orrs	r7, r1
    1218:	469b      	mov	fp, r3
    121a:	003b      	movs	r3, r7
    121c:	2500      	movs	r5, #0
    121e:	4647      	mov	r7, r8
    1220:	4698      	mov	r8, r3
    1222:	9e07      	ldr	r6, [sp, #28]
    1224:	ac08      	add	r4, sp, #32
    1226:	465b      	mov	r3, fp
    1228:	9308      	str	r3, [sp, #32]
    122a:	4643      	mov	r3, r8
    122c:	9a06      	ldr	r2, [sp, #24]
    122e:	9309      	str	r3, [sp, #36]	; 0x24
    1230:	9b02      	ldr	r3, [sp, #8]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1232:	2100      	movs	r1, #0
            block[j] = CTR_Nonce_and_Counter[j];
    1234:	4313      	orrs	r3, r2
    1236:	9a04      	ldr	r2, [sp, #16]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1238:	486e      	ldr	r0, [pc, #440]	; (13f4 <DataEncrypt+0x2ac>)
            block[j] = CTR_Nonce_and_Counter[j];
    123a:	4313      	orrs	r3, r2
    123c:	9a05      	ldr	r2, [sp, #20]
    123e:	73e7      	strb	r7, [r4, #15]
    1240:	4313      	orrs	r3, r2
    1242:	930a      	str	r3, [sp, #40]	; 0x28
    1244:	466b      	mov	r3, sp
    1246:	7b1b      	ldrb	r3, [r3, #12]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1248:	2200      	movs	r2, #0
            block[j] = CTR_Nonce_and_Counter[j];
    124a:	7323      	strb	r3, [r4, #12]
    124c:	2304      	movs	r3, #4
    124e:	7363      	strb	r3, [r4, #13]
    1250:	2300      	movs	r3, #0
    1252:	73a3      	strb	r3, [r4, #14]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1254:	4b68      	ldr	r3, [pc, #416]	; (13f8 <DataEncrypt+0x2b0>)
    1256:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    1258:	0020      	movs	r0, r4
    125a:	2100      	movs	r1, #0
    125c:	4b67      	ldr	r3, [pc, #412]	; (13fc <DataEncrypt+0x2b4>)
    125e:	4798      	blx	r3
    sal_aes_read(text);
    1260:	0020      	movs	r0, r4
    1262:	47d0      	blx	sl
            if (CTR_Nonce_and_Counter[15] == 0) {
    1264:	2f00      	cmp	r7, #0
    1266:	d147      	bne.n	12f8 <DataEncrypt+0x1b0>
                final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    1268:	4a65      	ldr	r2, [pc, #404]	; (1400 <DataEncrypt+0x2b8>)
    126a:	7821      	ldrb	r1, [r4, #0]
    126c:	7810      	ldrb	r0, [r2, #0]
    126e:	4b65      	ldr	r3, [pc, #404]	; (1404 <DataEncrypt+0x2bc>)
    1270:	4041      	eors	r1, r0
    1272:	7019      	strb	r1, [r3, #0]
    1274:	7850      	ldrb	r0, [r2, #1]
    1276:	7861      	ldrb	r1, [r4, #1]
    1278:	4041      	eors	r1, r0
    127a:	7059      	strb	r1, [r3, #1]
    127c:	7890      	ldrb	r0, [r2, #2]
    127e:	78a1      	ldrb	r1, [r4, #2]
    1280:	4041      	eors	r1, r0
    1282:	7099      	strb	r1, [r3, #2]
    1284:	78d0      	ldrb	r0, [r2, #3]
    1286:	78e1      	ldrb	r1, [r4, #3]
    1288:	4041      	eors	r1, r0
    128a:	70d9      	strb	r1, [r3, #3]
    128c:	7910      	ldrb	r0, [r2, #4]
    128e:	7921      	ldrb	r1, [r4, #4]
    1290:	4041      	eors	r1, r0
    1292:	7119      	strb	r1, [r3, #4]
    1294:	7950      	ldrb	r0, [r2, #5]
    1296:	7961      	ldrb	r1, [r4, #5]
    1298:	4041      	eors	r1, r0
    129a:	7159      	strb	r1, [r3, #5]
    129c:	7990      	ldrb	r0, [r2, #6]
    129e:	79a1      	ldrb	r1, [r4, #6]
    12a0:	4041      	eors	r1, r0
    12a2:	7199      	strb	r1, [r3, #6]
    12a4:	79d0      	ldrb	r0, [r2, #7]
    12a6:	79e1      	ldrb	r1, [r4, #7]
    12a8:	4041      	eors	r1, r0
    12aa:	71d9      	strb	r1, [r3, #7]
    12ac:	7a10      	ldrb	r0, [r2, #8]
    12ae:	7a21      	ldrb	r1, [r4, #8]
    12b0:	4041      	eors	r1, r0
    12b2:	7219      	strb	r1, [r3, #8]
    12b4:	7a50      	ldrb	r0, [r2, #9]
    12b6:	7a61      	ldrb	r1, [r4, #9]
    12b8:	4041      	eors	r1, r0
    12ba:	7259      	strb	r1, [r3, #9]
    12bc:	7aa1      	ldrb	r1, [r4, #10]
    12be:	7a90      	ldrb	r0, [r2, #10]
    12c0:	4041      	eors	r1, r0
    12c2:	7299      	strb	r1, [r3, #10]
    12c4:	7ad0      	ldrb	r0, [r2, #11]
    12c6:	7ae1      	ldrb	r1, [r4, #11]
    12c8:	4041      	eors	r1, r0
    12ca:	72d9      	strb	r1, [r3, #11]
    12cc:	7b10      	ldrb	r0, [r2, #12]
    12ce:	7b21      	ldrb	r1, [r4, #12]
    12d0:	4041      	eors	r1, r0
    12d2:	7319      	strb	r1, [r3, #12]
    12d4:	7b50      	ldrb	r0, [r2, #13]
    12d6:	7b61      	ldrb	r1, [r4, #13]
    12d8:	4041      	eors	r1, r0
    12da:	7359      	strb	r1, [r3, #13]
    12dc:	7b90      	ldrb	r0, [r2, #14]
    12de:	7ba1      	ldrb	r1, [r4, #14]
    12e0:	4041      	eors	r1, r0
    12e2:	7399      	strb	r1, [r3, #14]
    12e4:	7be1      	ldrb	r1, [r4, #15]
    12e6:	7bd2      	ldrb	r2, [r2, #15]
    12e8:	404a      	eors	r2, r1
    12ea:	73da      	strb	r2, [r3, #15]
    for (i = 0; i < iterations + 1; i++) {
    12ec:	464b      	mov	r3, r9
    12ee:	2b00      	cmp	r3, #0
    12f0:	d070      	beq.n	13d4 <DataEncrypt+0x28c>
    12f2:	2501      	movs	r5, #1
    12f4:	2701      	movs	r7, #1
    12f6:	e796      	b.n	1226 <DataEncrypt+0xde>
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    12f8:	3d01      	subs	r5, #1
    12fa:	012d      	lsls	r5, r5, #4
    12fc:	1972      	adds	r2, r6, r5
    12fe:	7811      	ldrb	r1, [r2, #0]
    1300:	7823      	ldrb	r3, [r4, #0]
    for (i = 0; i < iterations + 1; i++) {
    1302:	3701      	adds	r7, #1
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    1304:	404b      	eors	r3, r1
    1306:	7013      	strb	r3, [r2, #0]
    1308:	1c6b      	adds	r3, r5, #1
    130a:	18f3      	adds	r3, r6, r3
    130c:	7819      	ldrb	r1, [r3, #0]
    130e:	7862      	ldrb	r2, [r4, #1]
    for (i = 0; i < iterations + 1; i++) {
    1310:	b2ff      	uxtb	r7, r7
                Payloadinfo[j + (i - 1) * AES_BLOCKSIZE] = block[j] ^ Payloadinfo[j + (i - 1) * AES_BLOCKSIZE];
    1312:	404a      	eors	r2, r1
    1314:	701a      	strb	r2, [r3, #0]
    1316:	1cab      	adds	r3, r5, #2
    1318:	18f3      	adds	r3, r6, r3
    131a:	7819      	ldrb	r1, [r3, #0]
    131c:	78a2      	ldrb	r2, [r4, #2]
    131e:	404a      	eors	r2, r1
    1320:	701a      	strb	r2, [r3, #0]
    1322:	1ceb      	adds	r3, r5, #3
    1324:	18f3      	adds	r3, r6, r3
    1326:	7819      	ldrb	r1, [r3, #0]
    1328:	78e2      	ldrb	r2, [r4, #3]
    132a:	404a      	eors	r2, r1
    132c:	701a      	strb	r2, [r3, #0]
    132e:	1d2b      	adds	r3, r5, #4
    1330:	18f3      	adds	r3, r6, r3
    1332:	7819      	ldrb	r1, [r3, #0]
    1334:	7922      	ldrb	r2, [r4, #4]
    1336:	404a      	eors	r2, r1
    1338:	701a      	strb	r2, [r3, #0]
    133a:	1d6b      	adds	r3, r5, #5
    133c:	18f3      	adds	r3, r6, r3
    133e:	7819      	ldrb	r1, [r3, #0]
    1340:	7962      	ldrb	r2, [r4, #5]
    1342:	404a      	eors	r2, r1
    1344:	701a      	strb	r2, [r3, #0]
    1346:	1dab      	adds	r3, r5, #6
    1348:	18f3      	adds	r3, r6, r3
    134a:	7819      	ldrb	r1, [r3, #0]
    134c:	79a2      	ldrb	r2, [r4, #6]
    134e:	404a      	eors	r2, r1
    1350:	701a      	strb	r2, [r3, #0]
    1352:	1deb      	adds	r3, r5, #7
    1354:	18f3      	adds	r3, r6, r3
    1356:	7819      	ldrb	r1, [r3, #0]
    1358:	79e2      	ldrb	r2, [r4, #7]
    135a:	404a      	eors	r2, r1
    135c:	701a      	strb	r2, [r3, #0]
    135e:	002b      	movs	r3, r5
    1360:	3308      	adds	r3, #8
    1362:	18f3      	adds	r3, r6, r3
    1364:	7819      	ldrb	r1, [r3, #0]
    1366:	7a22      	ldrb	r2, [r4, #8]
    1368:	404a      	eors	r2, r1
    136a:	701a      	strb	r2, [r3, #0]
    136c:	002b      	movs	r3, r5
    136e:	3309      	adds	r3, #9
    1370:	18f3      	adds	r3, r6, r3
    1372:	7819      	ldrb	r1, [r3, #0]
    1374:	7a62      	ldrb	r2, [r4, #9]
    1376:	404a      	eors	r2, r1
    1378:	701a      	strb	r2, [r3, #0]
    137a:	002b      	movs	r3, r5
    137c:	330a      	adds	r3, #10
    137e:	18f3      	adds	r3, r6, r3
    1380:	7819      	ldrb	r1, [r3, #0]
    1382:	7aa2      	ldrb	r2, [r4, #10]
    1384:	404a      	eors	r2, r1
    1386:	701a      	strb	r2, [r3, #0]
    1388:	002b      	movs	r3, r5
    138a:	330b      	adds	r3, #11
    138c:	18f3      	adds	r3, r6, r3
    138e:	7819      	ldrb	r1, [r3, #0]
    1390:	7ae2      	ldrb	r2, [r4, #11]
    1392:	404a      	eors	r2, r1
    1394:	701a      	strb	r2, [r3, #0]
    1396:	002b      	movs	r3, r5
    1398:	330c      	adds	r3, #12
    139a:	18f3      	adds	r3, r6, r3
    139c:	7819      	ldrb	r1, [r3, #0]
    139e:	7b22      	ldrb	r2, [r4, #12]
    13a0:	404a      	eors	r2, r1
    13a2:	701a      	strb	r2, [r3, #0]
    13a4:	002b      	movs	r3, r5
    13a6:	330d      	adds	r3, #13
    13a8:	18f3      	adds	r3, r6, r3
    13aa:	7819      	ldrb	r1, [r3, #0]
    13ac:	7b62      	ldrb	r2, [r4, #13]
    13ae:	404a      	eors	r2, r1
    13b0:	701a      	strb	r2, [r3, #0]
    13b2:	002b      	movs	r3, r5
    13b4:	330e      	adds	r3, #14
    13b6:	18f3      	adds	r3, r6, r3
    13b8:	7819      	ldrb	r1, [r3, #0]
    13ba:	7ba2      	ldrb	r2, [r4, #14]
    13bc:	350f      	adds	r5, #15
    13be:	404a      	eors	r2, r1
    13c0:	701a      	strb	r2, [r3, #0]
    13c2:	1975      	adds	r5, r6, r5
    13c4:	782a      	ldrb	r2, [r5, #0]
    13c6:	7be3      	ldrb	r3, [r4, #15]
    13c8:	4053      	eors	r3, r2
    13ca:	702b      	strb	r3, [r5, #0]
    for (i = 0; i < iterations + 1; i++) {
    13cc:	003d      	movs	r5, r7
    13ce:	45b9      	cmp	r9, r7
    13d0:	db00      	blt.n	13d4 <DataEncrypt+0x28c>
    13d2:	e728      	b.n	1226 <DataEncrypt+0xde>
}
    13d4:	2001      	movs	r0, #1
    13d6:	b011      	add	sp, #68	; 0x44
    13d8:	bc3c      	pop	{r2, r3, r4, r5}
    13da:	4690      	mov	r8, r2
    13dc:	4699      	mov	r9, r3
    13de:	46a2      	mov	sl, r4
    13e0:	46ab      	mov	fp, r5
    13e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13e4:	200002a0 	.word	0x200002a0
    13e8:	00000f71 	.word	0x00000f71
    13ec:	00007ead 	.word	0x00007ead
    13f0:	0000307d 	.word	0x0000307d
    13f4:	20000004 	.word	0x20000004
    13f8:	00002e8d 	.word	0x00002e8d
    13fc:	00003009 	.word	0x00003009
    1400:	200008f8 	.word	0x200008f8
    1404:	200002cc 	.word	0x200002cc

00001408 <DataDecrypt>:
{
    1408:	b5f0      	push	{r4, r5, r6, r7, lr}
    140a:	4657      	mov	r7, sl
    140c:	46de      	mov	lr, fp
    140e:	464e      	mov	r6, r9
    1410:	4645      	mov	r5, r8
    1412:	b5e0      	push	{r5, r6, r7, lr}
    1414:	b095      	sub	sp, #84	; 0x54
    1416:	9308      	str	r3, [sp, #32]
    1418:	ab1e      	add	r3, sp, #120	; 0x78
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	9207      	str	r2, [sp, #28]
    141e:	930a      	str	r3, [sp, #40]	; 0x28
    iterations = *PayloadLen / 16;
    1420:	780b      	ldrb	r3, [r1, #0]
{
    1422:	0007      	movs	r7, r0
    iterations = *PayloadLen / 16;
    1424:	091a      	lsrs	r2, r3, #4
{
    1426:	9109      	str	r1, [sp, #36]	; 0x24
    iterations = *PayloadLen / 16;
    1428:	4692      	mov	sl, r2
    if (*PayloadLen % AES_BLOCKSIZE != 0)
    142a:	071a      	lsls	r2, r3, #28
    142c:	d002      	beq.n	1434 <DataDecrypt+0x2c>
        iterations++;
    142e:	2201      	movs	r2, #1
    1430:	4694      	mov	ip, r2
    1432:	44e2      	add	sl, ip
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    1434:	4652      	mov	r2, sl
        Payload[i] = 0; // Padding
    1436:	2100      	movs	r1, #0
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    1438:	0112      	lsls	r2, r2, #4
    143a:	429a      	cmp	r2, r3
    143c:	dd04      	ble.n	1448 <DataDecrypt+0x40>
        Payload[i] = 0; // Padding
    143e:	54f9      	strb	r1, [r7, r3]
    for (i = *PayloadLen; i < iterations * AES_BLOCKSIZE; i++) {
    1440:	3301      	adds	r3, #1
    1442:	b2db      	uxtb	r3, r3
    1444:	4293      	cmp	r3, r2
    1446:	dbfa      	blt.n	143e <DataDecrypt+0x36>
    CTR_Nonce_and_Counter[0] = 0x01; // L
    1448:	2301      	movs	r3, #1
    144a:	4698      	mov	r8, r3
    144c:	ab0a      	add	r3, sp, #40	; 0x28
    144e:	469c      	mov	ip, r3
    1450:	4642      	mov	r2, r8
    1452:	2019      	movs	r0, #25
    1454:	761a      	strb	r2, [r3, #24]
    1456:	9907      	ldr	r1, [sp, #28]
    1458:	2208      	movs	r2, #8
    145a:	4460      	add	r0, ip
    145c:	4bd0      	ldr	r3, [pc, #832]	; (17a0 <DataDecrypt+0x398>)
    145e:	4798      	blx	r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    1460:	9908      	ldr	r1, [sp, #32]
    1462:	2620      	movs	r6, #32
    1464:	040a      	lsls	r2, r1, #16
    1466:	0e12      	lsrs	r2, r2, #24
    1468:	9205      	str	r2, [sp, #20]
    146a:	020a      	lsls	r2, r1, #8
    146c:	b2cb      	uxtb	r3, r1
    146e:	0e10      	lsrs	r0, r2, #24
    1470:	0e09      	lsrs	r1, r1, #24
    1472:	9006      	str	r0, [sp, #24]
    1474:	9103      	str	r1, [sp, #12]
    1476:	a90a      	add	r1, sp, #40	; 0x28
    1478:	7e49      	ldrb	r1, [r1, #25]
    147a:	ad0a      	add	r5, sp, #40	; 0x28
    147c:	468b      	mov	fp, r1
    147e:	a90a      	add	r1, sp, #40	; 0x28
    1480:	7e89      	ldrb	r1, [r1, #26]
    1482:	7fea      	ldrb	r2, [r5, #31]
    1484:	19ad      	adds	r5, r5, r6
    1486:	782d      	ldrb	r5, [r5, #0]
    1488:	468c      	mov	ip, r1
    148a:	a90a      	add	r1, sp, #40	; 0x28
    148c:	7ecc      	ldrb	r4, [r1, #27]
    148e:	7f48      	ldrb	r0, [r1, #29]
    1490:	7f89      	ldrb	r1, [r1, #30]
    1492:	9502      	str	r5, [sp, #8]
    1494:	465d      	mov	r5, fp
    1496:	022d      	lsls	r5, r5, #8
    1498:	46ab      	mov	fp, r5
    149a:	4665      	mov	r5, ip
    149c:	042d      	lsls	r5, r5, #16
    149e:	46ac      	mov	ip, r5
    14a0:	021d      	lsls	r5, r3, #8
    14a2:	9b05      	ldr	r3, [sp, #20]
    14a4:	9504      	str	r5, [sp, #16]
    14a6:	041d      	lsls	r5, r3, #16
    14a8:	9b06      	ldr	r3, [sp, #24]
    14aa:	9505      	str	r5, [sp, #20]
    14ac:	061d      	lsls	r5, r3, #24
    14ae:	9506      	str	r5, [sp, #24]
            block[j] = CTR_Nonce_and_Counter[j];
    14b0:	4643      	mov	r3, r8
    14b2:	465d      	mov	r5, fp
    14b4:	432b      	orrs	r3, r5
    14b6:	469b      	mov	fp, r3
    14b8:	4663      	mov	r3, ip
    14ba:	465d      	mov	r5, fp
    14bc:	432b      	orrs	r3, r5
    14be:	469b      	mov	fp, r3
    14c0:	465d      	mov	r5, fp
    14c2:	0624      	lsls	r4, r4, #24
    14c4:	940b      	str	r4, [sp, #44]	; 0x2c
    14c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    14c8:	0200      	lsls	r0, r0, #8
    14ca:	432b      	orrs	r3, r5
    14cc:	469b      	mov	fp, r3
    14ce:	ab0a      	add	r3, sp, #40	; 0x28
    14d0:	7f1b      	ldrb	r3, [r3, #28]
    14d2:	0409      	lsls	r1, r1, #16
    14d4:	4318      	orrs	r0, r3
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    14d6:	2600      	movs	r6, #0
    14d8:	0612      	lsls	r2, r2, #24
            block[j] = CTR_Nonce_and_Counter[j];
    14da:	4301      	orrs	r1, r0
    14dc:	4311      	orrs	r1, r2
    14de:	4688      	mov	r8, r1
    14e0:	2500      	movs	r5, #0
        CTR_Nonce_and_Counter[i + 9] = FrameCounter.v[i];
    14e2:	46b1      	mov	r9, r6
    14e4:	4eaf      	ldr	r6, [pc, #700]	; (17a4 <DataDecrypt+0x39c>)
    14e6:	ac0c      	add	r4, sp, #48	; 0x30
            block[j] = CTR_Nonce_and_Counter[j];
    14e8:	465b      	mov	r3, fp
    14ea:	930c      	str	r3, [sp, #48]	; 0x30
    14ec:	4643      	mov	r3, r8
    14ee:	9a04      	ldr	r2, [sp, #16]
    14f0:	930d      	str	r3, [sp, #52]	; 0x34
    14f2:	9b02      	ldr	r3, [sp, #8]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    14f4:	2100      	movs	r1, #0
            block[j] = CTR_Nonce_and_Counter[j];
    14f6:	4313      	orrs	r3, r2
    14f8:	9a05      	ldr	r2, [sp, #20]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    14fa:	48ab      	ldr	r0, [pc, #684]	; (17a8 <DataDecrypt+0x3a0>)
            block[j] = CTR_Nonce_and_Counter[j];
    14fc:	4313      	orrs	r3, r2
    14fe:	9a06      	ldr	r2, [sp, #24]
    1500:	4313      	orrs	r3, r2
    1502:	930e      	str	r3, [sp, #56]	; 0x38
    1504:	466b      	mov	r3, sp
    1506:	7b1b      	ldrb	r3, [r3, #12]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1508:	2200      	movs	r2, #0
            block[j] = CTR_Nonce_and_Counter[j];
    150a:	7323      	strb	r3, [r4, #12]
    150c:	2304      	movs	r3, #4
    150e:	7363      	strb	r3, [r4, #13]
    1510:	2300      	movs	r3, #0
    1512:	73a3      	strb	r3, [r4, #14]
    1514:	464b      	mov	r3, r9
    1516:	73e3      	strb	r3, [r4, #15]
    sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1518:	4ba4      	ldr	r3, [pc, #656]	; (17ac <DataDecrypt+0x3a4>)
    151a:	4798      	blx	r3
    sal_aes_wrrd(text, NULL);
    151c:	2100      	movs	r1, #0
    151e:	0020      	movs	r0, r4
    1520:	4ba3      	ldr	r3, [pc, #652]	; (17b0 <DataDecrypt+0x3a8>)
    1522:	4798      	blx	r3
    sal_aes_read(text);
    1524:	4ba3      	ldr	r3, [pc, #652]	; (17b4 <DataDecrypt+0x3ac>)
    1526:	0020      	movs	r0, r4
    1528:	4798      	blx	r3
            if (CTR_Nonce_and_Counter[15] == 0) {
    152a:	464b      	mov	r3, r9
    152c:	2b00      	cmp	r3, #0
    152e:	d126      	bne.n	157e <DataDecrypt+0x176>
                CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    1530:	7823      	ldrb	r3, [r4, #0]
    1532:	7033      	strb	r3, [r6, #0]
    1534:	7863      	ldrb	r3, [r4, #1]
    1536:	7073      	strb	r3, [r6, #1]
    1538:	78a3      	ldrb	r3, [r4, #2]
    153a:	70b3      	strb	r3, [r6, #2]
    153c:	78e3      	ldrb	r3, [r4, #3]
    153e:	70f3      	strb	r3, [r6, #3]
    1540:	7923      	ldrb	r3, [r4, #4]
    1542:	7133      	strb	r3, [r6, #4]
    1544:	7963      	ldrb	r3, [r4, #5]
    1546:	7173      	strb	r3, [r6, #5]
    1548:	79a3      	ldrb	r3, [r4, #6]
    154a:	71b3      	strb	r3, [r6, #6]
    154c:	79e3      	ldrb	r3, [r4, #7]
    154e:	71f3      	strb	r3, [r6, #7]
    1550:	7a23      	ldrb	r3, [r4, #8]
    1552:	7233      	strb	r3, [r6, #8]
    1554:	7a63      	ldrb	r3, [r4, #9]
    1556:	7273      	strb	r3, [r6, #9]
    1558:	7aa3      	ldrb	r3, [r4, #10]
    155a:	72b3      	strb	r3, [r6, #10]
    155c:	7ae3      	ldrb	r3, [r4, #11]
    155e:	72f3      	strb	r3, [r6, #11]
    1560:	7b23      	ldrb	r3, [r4, #12]
    1562:	7333      	strb	r3, [r6, #12]
    1564:	7b63      	ldrb	r3, [r4, #13]
    1566:	7373      	strb	r3, [r6, #13]
    1568:	7ba3      	ldrb	r3, [r4, #14]
    156a:	73b3      	strb	r3, [r6, #14]
    156c:	7be3      	ldrb	r3, [r4, #15]
    156e:	73f3      	strb	r3, [r6, #15]
    for (i = 0; i < iterations + 1; i++) {
    1570:	4653      	mov	r3, sl
    1572:	2b00      	cmp	r3, #0
    1574:	d073      	beq.n	165e <DataDecrypt+0x256>
    1576:	2301      	movs	r3, #1
    1578:	2501      	movs	r5, #1
    157a:	4699      	mov	r9, r3
    157c:	e7b4      	b.n	14e8 <DataDecrypt+0xe0>
                Payload[j + (i - 1) * 16] = block[j] ^ Payload[j + (i - 1) * 16];
    157e:	3d01      	subs	r5, #1
    1580:	012d      	lsls	r5, r5, #4
    1582:	197a      	adds	r2, r7, r5
    1584:	7811      	ldrb	r1, [r2, #0]
    1586:	7823      	ldrb	r3, [r4, #0]
    1588:	404b      	eors	r3, r1
    158a:	7013      	strb	r3, [r2, #0]
    158c:	1c6b      	adds	r3, r5, #1
    158e:	18fb      	adds	r3, r7, r3
    1590:	7819      	ldrb	r1, [r3, #0]
    1592:	7862      	ldrb	r2, [r4, #1]
    1594:	404a      	eors	r2, r1
    1596:	701a      	strb	r2, [r3, #0]
    1598:	1cab      	adds	r3, r5, #2
    159a:	18fb      	adds	r3, r7, r3
    159c:	7819      	ldrb	r1, [r3, #0]
    159e:	78a2      	ldrb	r2, [r4, #2]
    15a0:	404a      	eors	r2, r1
    15a2:	701a      	strb	r2, [r3, #0]
    15a4:	1ceb      	adds	r3, r5, #3
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	7819      	ldrb	r1, [r3, #0]
    15aa:	78e2      	ldrb	r2, [r4, #3]
    15ac:	404a      	eors	r2, r1
    15ae:	701a      	strb	r2, [r3, #0]
    15b0:	1d2b      	adds	r3, r5, #4
    15b2:	18fb      	adds	r3, r7, r3
    15b4:	7819      	ldrb	r1, [r3, #0]
    15b6:	7922      	ldrb	r2, [r4, #4]
    15b8:	404a      	eors	r2, r1
    15ba:	701a      	strb	r2, [r3, #0]
    15bc:	1d6b      	adds	r3, r5, #5
    15be:	18fb      	adds	r3, r7, r3
    15c0:	7819      	ldrb	r1, [r3, #0]
    15c2:	7962      	ldrb	r2, [r4, #5]
    15c4:	404a      	eors	r2, r1
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	1dab      	adds	r3, r5, #6
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	7819      	ldrb	r1, [r3, #0]
    15ce:	79a2      	ldrb	r2, [r4, #6]
    15d0:	404a      	eors	r2, r1
    15d2:	701a      	strb	r2, [r3, #0]
    15d4:	1deb      	adds	r3, r5, #7
    15d6:	18fb      	adds	r3, r7, r3
    15d8:	7819      	ldrb	r1, [r3, #0]
    15da:	79e2      	ldrb	r2, [r4, #7]
    15dc:	404a      	eors	r2, r1
    15de:	701a      	strb	r2, [r3, #0]
    15e0:	002b      	movs	r3, r5
    15e2:	3308      	adds	r3, #8
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	7819      	ldrb	r1, [r3, #0]
    15e8:	7a22      	ldrb	r2, [r4, #8]
    15ea:	404a      	eors	r2, r1
    15ec:	701a      	strb	r2, [r3, #0]
    15ee:	002b      	movs	r3, r5
    15f0:	3309      	adds	r3, #9
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	7819      	ldrb	r1, [r3, #0]
    15f6:	7a62      	ldrb	r2, [r4, #9]
    15f8:	404a      	eors	r2, r1
    15fa:	701a      	strb	r2, [r3, #0]
    15fc:	002b      	movs	r3, r5
    15fe:	330a      	adds	r3, #10
    1600:	18fb      	adds	r3, r7, r3
    1602:	7819      	ldrb	r1, [r3, #0]
    1604:	7aa2      	ldrb	r2, [r4, #10]
    1606:	404a      	eors	r2, r1
    1608:	701a      	strb	r2, [r3, #0]
    160a:	002b      	movs	r3, r5
    160c:	330b      	adds	r3, #11
    160e:	18fb      	adds	r3, r7, r3
    1610:	7819      	ldrb	r1, [r3, #0]
    1612:	7ae2      	ldrb	r2, [r4, #11]
    1614:	404a      	eors	r2, r1
    1616:	701a      	strb	r2, [r3, #0]
    1618:	002b      	movs	r3, r5
    161a:	330c      	adds	r3, #12
    161c:	18fb      	adds	r3, r7, r3
    161e:	7819      	ldrb	r1, [r3, #0]
    1620:	7b22      	ldrb	r2, [r4, #12]
    1622:	404a      	eors	r2, r1
    1624:	701a      	strb	r2, [r3, #0]
    1626:	002b      	movs	r3, r5
    1628:	330d      	adds	r3, #13
    162a:	18fb      	adds	r3, r7, r3
    162c:	7819      	ldrb	r1, [r3, #0]
    162e:	7b62      	ldrb	r2, [r4, #13]
    1630:	404a      	eors	r2, r1
    1632:	701a      	strb	r2, [r3, #0]
    1634:	002b      	movs	r3, r5
    1636:	330e      	adds	r3, #14
    1638:	18fb      	adds	r3, r7, r3
    163a:	7819      	ldrb	r1, [r3, #0]
    163c:	7ba2      	ldrb	r2, [r4, #14]
    163e:	350f      	adds	r5, #15
    1640:	404a      	eors	r2, r1
    1642:	701a      	strb	r2, [r3, #0]
    1644:	197d      	adds	r5, r7, r5
    1646:	782a      	ldrb	r2, [r5, #0]
    1648:	7be3      	ldrb	r3, [r4, #15]
    164a:	4053      	eors	r3, r2
    164c:	702b      	strb	r3, [r5, #0]
    for (i = 0; i < iterations + 1; i++) {
    164e:	464b      	mov	r3, r9
    1650:	3301      	adds	r3, #1
    1652:	b2db      	uxtb	r3, r3
    1654:	4699      	mov	r9, r3
    1656:	001d      	movs	r5, r3
    1658:	459a      	cmp	sl, r3
    165a:	db00      	blt.n	165e <DataDecrypt+0x256>
    165c:	e744      	b.n	14e8 <DataDecrypt+0xe0>
    *PayloadLen = *PayloadLen - 4;
    165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    1660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *PayloadLen = *PayloadLen - 4;
    1662:	7819      	ldrb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    1664:	0038      	movs	r0, r7
    *PayloadLen = *PayloadLen - 4;
    1666:	3904      	subs	r1, #4
    1668:	b2c9      	uxtb	r1, r1
    166a:	7019      	strb	r1, [r3, #0]
    mic_generator(&Payload[0], *PayloadLen, FrameControl, FrameCounter, SourceIEEEAddress);
    166c:	9b07      	ldr	r3, [sp, #28]
    166e:	4c52      	ldr	r4, [pc, #328]	; (17b8 <DataDecrypt+0x3b0>)
    1670:	9300      	str	r3, [sp, #0]
    1672:	9b08      	ldr	r3, [sp, #32]
    1674:	47a0      	blx	r4
    1676:	0031      	movs	r1, r6
    1678:	4a50      	ldr	r2, [pc, #320]	; (17bc <DataDecrypt+0x3b4>)
    167a:	4b51      	ldr	r3, [pc, #324]	; (17c0 <DataDecrypt+0x3b8>)
    167c:	4311      	orrs	r1, r2
    167e:	4319      	orrs	r1, r3
    1680:	0789      	lsls	r1, r1, #30
    1682:	d000      	beq.n	1686 <DataDecrypt+0x27e>
    1684:	e0a0      	b.n	17c8 <DataDecrypt+0x3c0>
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    1686:	7870      	ldrb	r0, [r6, #1]
    1688:	7831      	ldrb	r1, [r6, #0]
    168a:	0200      	lsls	r0, r0, #8
    168c:	4308      	orrs	r0, r1
    168e:	78b1      	ldrb	r1, [r6, #2]
    1690:	7854      	ldrb	r4, [r2, #1]
    1692:	0409      	lsls	r1, r1, #16
    1694:	4308      	orrs	r0, r1
    1696:	78f1      	ldrb	r1, [r6, #3]
    1698:	0224      	lsls	r4, r4, #8
    169a:	0609      	lsls	r1, r1, #24
    169c:	4301      	orrs	r1, r0
    169e:	7810      	ldrb	r0, [r2, #0]
    16a0:	4304      	orrs	r4, r0
    16a2:	7890      	ldrb	r0, [r2, #2]
    16a4:	0400      	lsls	r0, r0, #16
    16a6:	4304      	orrs	r4, r0
    16a8:	78d0      	ldrb	r0, [r2, #3]
    16aa:	0600      	lsls	r0, r0, #24
    16ac:	4320      	orrs	r0, r4
    16ae:	4041      	eors	r1, r0
    16b0:	0a08      	lsrs	r0, r1, #8
    16b2:	7058      	strb	r0, [r3, #1]
    16b4:	0c08      	lsrs	r0, r1, #16
    16b6:	7019      	strb	r1, [r3, #0]
    16b8:	7098      	strb	r0, [r3, #2]
    16ba:	0e09      	lsrs	r1, r1, #24
    16bc:	7950      	ldrb	r0, [r2, #5]
    16be:	70d9      	strb	r1, [r3, #3]
    16c0:	7911      	ldrb	r1, [r2, #4]
    16c2:	0200      	lsls	r0, r0, #8
    16c4:	4308      	orrs	r0, r1
    16c6:	7991      	ldrb	r1, [r2, #6]
    16c8:	7974      	ldrb	r4, [r6, #5]
    16ca:	0409      	lsls	r1, r1, #16
    16cc:	4308      	orrs	r0, r1
    16ce:	79d1      	ldrb	r1, [r2, #7]
    16d0:	0224      	lsls	r4, r4, #8
    16d2:	0609      	lsls	r1, r1, #24
    16d4:	4301      	orrs	r1, r0
    16d6:	7930      	ldrb	r0, [r6, #4]
    16d8:	4304      	orrs	r4, r0
    16da:	79b0      	ldrb	r0, [r6, #6]
    16dc:	0400      	lsls	r0, r0, #16
    16de:	4304      	orrs	r4, r0
    16e0:	79f0      	ldrb	r0, [r6, #7]
    16e2:	0600      	lsls	r0, r0, #24
    16e4:	4320      	orrs	r0, r4
    16e6:	4041      	eors	r1, r0
    16e8:	0a08      	lsrs	r0, r1, #8
    16ea:	7158      	strb	r0, [r3, #5]
    16ec:	0c08      	lsrs	r0, r1, #16
    16ee:	7119      	strb	r1, [r3, #4]
    16f0:	7198      	strb	r0, [r3, #6]
    16f2:	0e09      	lsrs	r1, r1, #24
    16f4:	7a50      	ldrb	r0, [r2, #9]
    16f6:	71d9      	strb	r1, [r3, #7]
    16f8:	7a11      	ldrb	r1, [r2, #8]
    16fa:	0200      	lsls	r0, r0, #8
    16fc:	4308      	orrs	r0, r1
    16fe:	7a91      	ldrb	r1, [r2, #10]
    1700:	7a74      	ldrb	r4, [r6, #9]
    1702:	0409      	lsls	r1, r1, #16
    1704:	4308      	orrs	r0, r1
    1706:	7ad1      	ldrb	r1, [r2, #11]
    1708:	0224      	lsls	r4, r4, #8
    170a:	0609      	lsls	r1, r1, #24
    170c:	4301      	orrs	r1, r0
    170e:	7a30      	ldrb	r0, [r6, #8]
    1710:	4304      	orrs	r4, r0
    1712:	7ab0      	ldrb	r0, [r6, #10]
    1714:	0400      	lsls	r0, r0, #16
    1716:	4304      	orrs	r4, r0
    1718:	7af0      	ldrb	r0, [r6, #11]
    171a:	0600      	lsls	r0, r0, #24
    171c:	4320      	orrs	r0, r4
    171e:	4041      	eors	r1, r0
    1720:	0a08      	lsrs	r0, r1, #8
    1722:	7219      	strb	r1, [r3, #8]
    1724:	7258      	strb	r0, [r3, #9]
    1726:	0c08      	lsrs	r0, r1, #16
    1728:	0e09      	lsrs	r1, r1, #24
    172a:	72d9      	strb	r1, [r3, #11]
    172c:	7b51      	ldrb	r1, [r2, #13]
    172e:	7298      	strb	r0, [r3, #10]
    1730:	7b10      	ldrb	r0, [r2, #12]
    1732:	0209      	lsls	r1, r1, #8
    1734:	4308      	orrs	r0, r1
    1736:	7b91      	ldrb	r1, [r2, #14]
    1738:	7bd2      	ldrb	r2, [r2, #15]
    173a:	0409      	lsls	r1, r1, #16
    173c:	4301      	orrs	r1, r0
    173e:	0612      	lsls	r2, r2, #24
    1740:	7b70      	ldrb	r0, [r6, #13]
    1742:	430a      	orrs	r2, r1
    1744:	7b31      	ldrb	r1, [r6, #12]
    1746:	0200      	lsls	r0, r0, #8
    1748:	4308      	orrs	r0, r1
    174a:	7bb1      	ldrb	r1, [r6, #14]
    174c:	0409      	lsls	r1, r1, #16
    174e:	4308      	orrs	r0, r1
    1750:	7bf1      	ldrb	r1, [r6, #15]
    1752:	0609      	lsls	r1, r1, #24
    1754:	4301      	orrs	r1, r0
    1756:	404a      	eors	r2, r1
    1758:	0a11      	lsrs	r1, r2, #8
    175a:	731a      	strb	r2, [r3, #12]
    175c:	7359      	strb	r1, [r3, #13]
    175e:	0c11      	lsrs	r1, r2, #16
    1760:	0e12      	lsrs	r2, r2, #24
    1762:	7399      	strb	r1, [r3, #14]
    1764:	73da      	strb	r2, [r3, #15]
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    1766:	4a17      	ldr	r2, [pc, #92]	; (17c4 <DataDecrypt+0x3bc>)
    1768:	781c      	ldrb	r4, [r3, #0]
    176a:	7811      	ldrb	r1, [r2, #0]
        return false;
    176c:	2000      	movs	r0, #0
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    176e:	428c      	cmp	r4, r1
    1770:	d006      	beq.n	1780 <DataDecrypt+0x378>
}
    1772:	b015      	add	sp, #84	; 0x54
    1774:	bc3c      	pop	{r2, r3, r4, r5}
    1776:	4690      	mov	r8, r2
    1778:	4699      	mov	r9, r3
    177a:	46a2      	mov	sl, r4
    177c:	46ab      	mov	fp, r5
    177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3]) {
    1780:	785c      	ldrb	r4, [r3, #1]
    1782:	7851      	ldrb	r1, [r2, #1]
    1784:	428c      	cmp	r4, r1
    1786:	d1f4      	bne.n	1772 <DataDecrypt+0x36a>
    1788:	789c      	ldrb	r4, [r3, #2]
    178a:	7891      	ldrb	r1, [r2, #2]
    178c:	428c      	cmp	r4, r1
    178e:	d1f0      	bne.n	1772 <DataDecrypt+0x36a>
    1790:	78d8      	ldrb	r0, [r3, #3]
    1792:	78d3      	ldrb	r3, [r2, #3]
    1794:	1ac0      	subs	r0, r0, r3
    1796:	4243      	negs	r3, r0
    1798:	4158      	adcs	r0, r3
    179a:	b2c0      	uxtb	r0, r0
    179c:	e7e9      	b.n	1772 <DataDecrypt+0x36a>
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	00007ead 	.word	0x00007ead
    17a4:	200002b8 	.word	0x200002b8
    17a8:	20000004 	.word	0x20000004
    17ac:	00002e8d 	.word	0x00002e8d
    17b0:	00003009 	.word	0x00003009
    17b4:	0000307d 	.word	0x0000307d
    17b8:	00000f71 	.word	0x00000f71
    17bc:	200008f8 	.word	0x200008f8
    17c0:	200002cc 	.word	0x200002cc
    17c4:	20000908 	.word	0x20000908
        final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    17c8:	7831      	ldrb	r1, [r6, #0]
    17ca:	7810      	ldrb	r0, [r2, #0]
    17cc:	4041      	eors	r1, r0
    17ce:	7019      	strb	r1, [r3, #0]
    17d0:	7851      	ldrb	r1, [r2, #1]
    17d2:	7870      	ldrb	r0, [r6, #1]
    17d4:	4041      	eors	r1, r0
    17d6:	7059      	strb	r1, [r3, #1]
    17d8:	7891      	ldrb	r1, [r2, #2]
    17da:	78b0      	ldrb	r0, [r6, #2]
    17dc:	4041      	eors	r1, r0
    17de:	7099      	strb	r1, [r3, #2]
    17e0:	78d1      	ldrb	r1, [r2, #3]
    17e2:	78f0      	ldrb	r0, [r6, #3]
    17e4:	4041      	eors	r1, r0
    17e6:	70d9      	strb	r1, [r3, #3]
    17e8:	7911      	ldrb	r1, [r2, #4]
    17ea:	7930      	ldrb	r0, [r6, #4]
    17ec:	4041      	eors	r1, r0
    17ee:	7119      	strb	r1, [r3, #4]
    17f0:	7951      	ldrb	r1, [r2, #5]
    17f2:	7970      	ldrb	r0, [r6, #5]
    17f4:	4041      	eors	r1, r0
    17f6:	7159      	strb	r1, [r3, #5]
    17f8:	7990      	ldrb	r0, [r2, #6]
    17fa:	79b1      	ldrb	r1, [r6, #6]
    17fc:	4041      	eors	r1, r0
    17fe:	7199      	strb	r1, [r3, #6]
    1800:	79d0      	ldrb	r0, [r2, #7]
    1802:	79f1      	ldrb	r1, [r6, #7]
    1804:	4041      	eors	r1, r0
    1806:	71d9      	strb	r1, [r3, #7]
    1808:	7a10      	ldrb	r0, [r2, #8]
    180a:	7a31      	ldrb	r1, [r6, #8]
    180c:	4041      	eors	r1, r0
    180e:	7219      	strb	r1, [r3, #8]
    1810:	7a50      	ldrb	r0, [r2, #9]
    1812:	7a71      	ldrb	r1, [r6, #9]
    1814:	4041      	eors	r1, r0
    1816:	7259      	strb	r1, [r3, #9]
    1818:	7a91      	ldrb	r1, [r2, #10]
    181a:	7ab0      	ldrb	r0, [r6, #10]
    181c:	4041      	eors	r1, r0
    181e:	7299      	strb	r1, [r3, #10]
    1820:	7ad1      	ldrb	r1, [r2, #11]
    1822:	7af0      	ldrb	r0, [r6, #11]
    1824:	4041      	eors	r1, r0
    1826:	72d9      	strb	r1, [r3, #11]
    1828:	7b10      	ldrb	r0, [r2, #12]
    182a:	7b31      	ldrb	r1, [r6, #12]
    182c:	4041      	eors	r1, r0
    182e:	7319      	strb	r1, [r3, #12]
    1830:	7b50      	ldrb	r0, [r2, #13]
    1832:	7b71      	ldrb	r1, [r6, #13]
    1834:	4041      	eors	r1, r0
    1836:	7359      	strb	r1, [r3, #13]
    1838:	7b91      	ldrb	r1, [r2, #14]
    183a:	7bb0      	ldrb	r0, [r6, #14]
    183c:	4041      	eors	r1, r0
    183e:	7399      	strb	r1, [r3, #14]
    1840:	7bf1      	ldrb	r1, [r6, #15]
    1842:	7bd2      	ldrb	r2, [r2, #15]
    1844:	404a      	eors	r2, r1
    1846:	73da      	strb	r2, [r3, #15]
    1848:	e78d      	b.n	1766 <DataDecrypt+0x35e>
    184a:	46c0      	nop			; (mov r8, r8)

0000184c <MiMAC_SetChannel>:
{
    184c:	b510      	push	{r4, lr}
    184e:	0004      	movs	r4, r0
		return false;
    1850:	2000      	movs	r0, #0
	if (channel < 0x00 || channel > 0x0A) {
    1852:	2c0a      	cmp	r4, #10
    1854:	d80d      	bhi.n	1872 <MiMAC_SetChannel+0x26>
	MACCurrentChannel = channel;
    1856:	4b07      	ldr	r3, [pc, #28]	; (1874 <MiMAC_SetChannel+0x28>)
    value = trx_reg_read(reg);
    1858:	3008      	adds	r0, #8
	MACCurrentChannel = channel;
    185a:	701c      	strb	r4, [r3, #0]
    value = trx_reg_read(reg);
    185c:	4b06      	ldr	r3, [pc, #24]	; (1878 <MiMAC_SetChannel+0x2c>)
    185e:	4798      	blx	r3
    reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    1860:	231f      	movs	r3, #31
    1862:	0001      	movs	r1, r0
    1864:	4399      	bics	r1, r3
    phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    1866:	4321      	orrs	r1, r4
    trx_reg_write(reg, value);
    1868:	2008      	movs	r0, #8
    186a:	b2c9      	uxtb	r1, r1
    186c:	4b03      	ldr	r3, [pc, #12]	; (187c <MiMAC_SetChannel+0x30>)
    186e:	4798      	blx	r3
	return true;
    1870:	2001      	movs	r0, #1
}
    1872:	bd10      	pop	{r4, pc}
    1874:	2000090e 	.word	0x2000090e
    1878:	000054b9 	.word	0x000054b9
    187c:	000055b5 	.word	0x000055b5

00001880 <MiMAC_Init>:
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	46de      	mov	lr, fp
    1884:	4657      	mov	r7, sl
    1886:	464e      	mov	r6, r9
    1888:	4645      	mov	r5, r8
    188a:	b5e0      	push	{r5, r6, r7, lr}
    trx_spi_init();
    188c:	4b67      	ldr	r3, [pc, #412]	; (1a2c <MiMAC_Init+0x1ac>)
{
    188e:	b083      	sub	sp, #12
    1890:	9000      	str	r0, [sp, #0]
    1892:	9101      	str	r1, [sp, #4]
    trx_spi_init();
    1894:	4798      	blx	r3
    PhyReset();
    1896:	4b66      	ldr	r3, [pc, #408]	; (1a30 <MiMAC_Init+0x1b0>)
    1898:	4798      	blx	r3
    phyRxState = false;
    189a:	4b66      	ldr	r3, [pc, #408]	; (1a34 <MiMAC_Init+0x1b4>)
{
    189c:	466f      	mov	r7, sp
    phyRxState = false;
    189e:	469a      	mov	sl, r3
    18a0:	2300      	movs	r3, #0
    18a2:	4652      	mov	r2, sl
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18a4:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    18a6:	21ff      	movs	r1, #255	; 0xff
    18a8:	200e      	movs	r0, #14
    18aa:	4c63      	ldr	r4, [pc, #396]	; (1a38 <MiMAC_Init+0x1b8>)
    phyRxState = false;
    18ac:	7013      	strb	r3, [r2, #0]
    trx_reg_write(reg, value);
    18ae:	47a0      	blx	r4
    18b0:	4d62      	ldr	r5, [pc, #392]	; (1a3c <MiMAC_Init+0x1bc>)
    18b2:	2108      	movs	r1, #8
    18b4:	2002      	movs	r0, #2
    18b6:	47a0      	blx	r4
    value = trx_reg_read(reg);
    18b8:	2001      	movs	r0, #1
    18ba:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18bc:	4030      	ands	r0, r6
    18be:	2808      	cmp	r0, #8
    18c0:	d1f7      	bne.n	18b2 <MiMAC_Init+0x32>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18c2:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    18c4:	212e      	movs	r1, #46	; 0x2e
    18c6:	3804      	subs	r0, #4
    18c8:	47a0      	blx	r4
    18ca:	21a0      	movs	r1, #160	; 0xa0
    18cc:	200c      	movs	r0, #12
    18ce:	47a0      	blx	r4
    18d0:	21e1      	movs	r1, #225	; 0xe1
    18d2:	2005      	movs	r0, #5
    18d4:	47a0      	blx	r4
    MACInitParams = initValue;
    18d6:	4b5a      	ldr	r3, [pc, #360]	; (1a40 <MiMAC_Init+0x1c0>)
    18d8:	cf06      	ldmia	r7!, {r1, r2}
    18da:	c306      	stmia	r3!, {r1, r2}
    trx_reg_write(reg, value);
    18dc:	2103      	movs	r1, #3
    18de:	2002      	movs	r0, #2
    18e0:	47a0      	blx	r4
    value = trx_reg_read(reg);
    18e2:	2001      	movs	r0, #1
    18e4:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18e6:	4030      	ands	r0, r6
    18e8:	2808      	cmp	r0, #8
    18ea:	d1f7      	bne.n	18dc <MiMAC_Init+0x5c>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18ec:	261f      	movs	r6, #31
    trx_reg_write(reg, value);
    18ee:	2106      	movs	r1, #6
    18f0:	2002      	movs	r0, #2
    18f2:	47a0      	blx	r4
    value = trx_reg_read(reg);
    18f4:	2001      	movs	r0, #1
    18f6:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    18f8:	4030      	ands	r0, r6
    18fa:	2806      	cmp	r0, #6
    18fc:	d1f7      	bne.n	18ee <MiMAC_Init+0x6e>
    18fe:	2300      	movs	r3, #0
    1900:	469b      	mov	fp, r3
    1902:	4b50      	ldr	r3, [pc, #320]	; (1a44 <MiMAC_Init+0x1c4>)
    1904:	2700      	movs	r7, #0
    1906:	4699      	mov	r9, r3
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    1908:	2303      	movs	r3, #3
    190a:	4698      	mov	r8, r3
        delay_cycles_us(1);
    190c:	2001      	movs	r0, #1
    190e:	47c8      	blx	r9
    value = trx_reg_read(reg);
    1910:	2006      	movs	r0, #6
    1912:	47a8      	blx	r5
        rnd |= rndValue << i;
    1914:	4643      	mov	r3, r8
        rndValue = (phyReadRegister(RG_PHY_RSSI) >> RND_VALUE) & 3;
    1916:	0946      	lsrs	r6, r0, #5
        rnd |= rndValue << i;
    1918:	401e      	ands	r6, r3
    191a:	40be      	lsls	r6, r7
    191c:	465b      	mov	r3, fp
    191e:	431e      	orrs	r6, r3
    1920:	b236      	sxth	r6, r6
    1922:	b2b3      	uxth	r3, r6
    1924:	3702      	adds	r7, #2
    1926:	469b      	mov	fp, r3
    for (uint8_t i = 0; i < 16; i += 2) {
    1928:	2f10      	cmp	r7, #16
    192a:	d1ef      	bne.n	190c <MiMAC_Init+0x8c>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    192c:	370f      	adds	r7, #15
    trx_reg_write(reg, value);
    192e:	2103      	movs	r1, #3
    1930:	2002      	movs	r0, #2
    1932:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1934:	2001      	movs	r0, #1
    1936:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1938:	4038      	ands	r0, r7
    193a:	2808      	cmp	r0, #8
    193c:	d1f7      	bne.n	192e <MiMAC_Init+0xae>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    193e:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1940:	2108      	movs	r1, #8
    1942:	2002      	movs	r0, #2
    1944:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1946:	2001      	movs	r0, #1
    1948:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    194a:	4038      	ands	r0, r7
    194c:	2808      	cmp	r0, #8
    194e:	d1f7      	bne.n	1940 <MiMAC_Init+0xc0>
    value = trx_reg_read(reg);
    1950:	3007      	adds	r0, #7
    1952:	47a8      	blx	r5
    if (phyRxState) {
    1954:	4653      	mov	r3, sl
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d140      	bne.n	19de <MiMAC_Init+0x15e>
    phyRxState = rx;
    195c:	2301      	movs	r3, #1
    195e:	4652      	mov	r2, sl
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1960:	271f      	movs	r7, #31
    phyRxState = rx;
    1962:	7013      	strb	r3, [r2, #0]
    trx_reg_write(reg, value);
    1964:	2103      	movs	r1, #3
    1966:	2002      	movs	r0, #2
    1968:	47a0      	blx	r4
    value = trx_reg_read(reg);
    196a:	2001      	movs	r0, #1
    196c:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    196e:	4038      	ands	r0, r7
    1970:	2808      	cmp	r0, #8
    1972:	d1f7      	bne.n	1964 <MiMAC_Init+0xe4>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1974:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1976:	2108      	movs	r1, #8
    1978:	2002      	movs	r0, #2
    197a:	47a0      	blx	r4
    value = trx_reg_read(reg);
    197c:	2001      	movs	r0, #1
    197e:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1980:	4038      	ands	r0, r7
    1982:	2808      	cmp	r0, #8
    1984:	d1f7      	bne.n	1976 <MiMAC_Init+0xf6>
    value = trx_reg_read(reg);
    1986:	3007      	adds	r0, #7
    1988:	47a8      	blx	r5
    if (phyRxState) {
    198a:	4653      	mov	r3, sl
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d138      	bne.n	1a04 <MiMAC_Init+0x184>
    MACCurrentChannel = 11;
    1992:	220b      	movs	r2, #11
    1994:	2524      	movs	r5, #36	; 0x24
    IEEESeqNum = x & 0xff;
    1996:	4b2c      	ldr	r3, [pc, #176]	; (1a48 <MiMAC_Init+0x1c8>)
    1998:	701e      	strb	r6, [r3, #0]
    MACCurrentChannel = 11;
    199a:	4b2c      	ldr	r3, [pc, #176]	; (1a4c <MiMAC_Init+0x1cc>)
/*************************************************************************/ /**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t* ieee_addr)
{
    uint8_t* ptr_to_reg = ieee_addr;
    199c:	4e2c      	ldr	r6, [pc, #176]	; (1a50 <MiMAC_Init+0x1d0>)
    MACCurrentChannel = 11;
    199e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
        trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    19a0:	0028      	movs	r0, r5
    19a2:	3501      	adds	r5, #1
    19a4:	7831      	ldrb	r1, [r6, #0]
    19a6:	b2ed      	uxtb	r5, r5
    19a8:	47a0      	blx	r4
        ptr_to_reg++;
    19aa:	3601      	adds	r6, #1
    for (uint8_t i = 0; i < 8; i++) {
    19ac:	2d2c      	cmp	r5, #44	; 0x2c
    19ae:	d1f7      	bne.n	19a0 <MiMAC_Init+0x120>
    trx_status.Val = 0;
    19b0:	2200      	movs	r2, #0
    19b2:	4b28      	ldr	r3, [pc, #160]	; (1a54 <MiMAC_Init+0x1d4>)
    19b4:	701a      	strb	r2, [r3, #0]
    19b6:	22c3      	movs	r2, #195	; 0xc3
    19b8:	4b27      	ldr	r3, [pc, #156]	; (1a58 <MiMAC_Init+0x1d8>)
    19ba:	00d2      	lsls	r2, r2, #3
    19bc:	1899      	adds	r1, r3, r2
        RxBuffer[i].PayloadLen = 0;
    19be:	2200      	movs	r2, #0
    19c0:	701a      	strb	r2, [r3, #0]
    19c2:	334e      	adds	r3, #78	; 0x4e
    for (i = 0; i < BANK_SIZE; i++) {
    19c4:	428b      	cmp	r3, r1
    19c6:	d1fb      	bne.n	19c0 <MiMAC_Init+0x140>
    OutgoingFrameCounter.Val = 1;
    19c8:	2201      	movs	r2, #1
}
    19ca:	2001      	movs	r0, #1
    OutgoingFrameCounter.Val = 1;
    19cc:	4b23      	ldr	r3, [pc, #140]	; (1a5c <MiMAC_Init+0x1dc>)
    19ce:	601a      	str	r2, [r3, #0]
}
    19d0:	b003      	add	sp, #12
    19d2:	bc3c      	pop	{r2, r3, r4, r5}
    19d4:	4690      	mov	r8, r2
    19d6:	4699      	mov	r9, r3
    19d8:	46a2      	mov	sl, r4
    19da:	46ab      	mov	fp, r5
    19dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    19de:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    19e0:	2103      	movs	r1, #3
    19e2:	2002      	movs	r0, #2
    19e4:	47a0      	blx	r4
    value = trx_reg_read(reg);
    19e6:	2001      	movs	r0, #1
    19e8:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    19ea:	4038      	ands	r0, r7
    19ec:	2808      	cmp	r0, #8
    19ee:	d1f7      	bne.n	19e0 <MiMAC_Init+0x160>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    19f0:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    19f2:	2116      	movs	r1, #22
    19f4:	2002      	movs	r0, #2
    19f6:	47a0      	blx	r4
    value = trx_reg_read(reg);
    19f8:	2001      	movs	r0, #1
    19fa:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    19fc:	4038      	ands	r0, r7
    19fe:	2816      	cmp	r0, #22
    1a00:	d1f7      	bne.n	19f2 <MiMAC_Init+0x172>
    1a02:	e7ab      	b.n	195c <MiMAC_Init+0xdc>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1a04:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1a06:	2103      	movs	r1, #3
    1a08:	2002      	movs	r0, #2
    1a0a:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1a0c:	2001      	movs	r0, #1
    1a0e:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1a10:	4038      	ands	r0, r7
    1a12:	2808      	cmp	r0, #8
    1a14:	d1f7      	bne.n	1a06 <MiMAC_Init+0x186>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1a16:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1a18:	2116      	movs	r1, #22
    1a1a:	2002      	movs	r0, #2
    1a1c:	47a0      	blx	r4
    value = trx_reg_read(reg);
    1a1e:	2001      	movs	r0, #1
    1a20:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1a22:	4038      	ands	r0, r7
    1a24:	2816      	cmp	r0, #22
    1a26:	d1f7      	bne.n	1a18 <MiMAC_Init+0x198>
    1a28:	e7b3      	b.n	1992 <MiMAC_Init+0x112>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	0000536d 	.word	0x0000536d
    1a30:	00005489 	.word	0x00005489
    1a34:	20000128 	.word	0x20000128
    1a38:	000055b5 	.word	0x000055b5
    1a3c:	000054b9 	.word	0x000054b9
    1a40:	200002a0 	.word	0x200002a0
    1a44:	00003185 	.word	0x00003185
    1a48:	20000294 	.word	0x20000294
    1a4c:	2000090e 	.word	0x2000090e
    1a50:	200009f0 	.word	0x200009f0
    1a54:	20000910 	.word	0x20000910
    1a58:	200002dc 	.word	0x200002dc
    1a5c:	200008f4 	.word	0x200008f4

00001a60 <MiMAC_SendPacket>:
{
    1a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a62:	4657      	mov	r7, sl
    1a64:	464e      	mov	r6, r9
    1a66:	46de      	mov	lr, fp
    1a68:	4645      	mov	r5, r8
    1a6a:	b5e0      	push	{r5, r6, r7, lr}
    1a6c:	b0a9      	sub	sp, #164	; 0xa4
    1a6e:	af05      	add	r7, sp, #20
    1a70:	000e      	movs	r6, r1
    1a72:	6079      	str	r1, [r7, #4]
    1a74:	0011      	movs	r1, r2
    1a76:	9005      	str	r0, [sp, #20]
    1a78:	b2c0      	uxtb	r0, r0
    1a7a:	9302      	str	r3, [sp, #8]
    1a7c:	0683      	lsls	r3, r0, #26
    1a7e:	0fdb      	lsrs	r3, r3, #31
    1a80:	0a09      	lsrs	r1, r1, #8
    1a82:	4699      	mov	r9, r3
    1a84:	b2d3      	uxtb	r3, r2
    1a86:	60ba      	str	r2, [r7, #8]
    1a88:	9604      	str	r6, [sp, #16]
    1a8a:	469b      	mov	fp, r3
    1a8c:	b2ca      	uxtb	r2, r1
    if (transParam.flags.bits.broadcast) {
    1a8e:	0743      	lsls	r3, r0, #29
    1a90:	d501      	bpl.n	1a96 <MiMAC_SendPacket+0x36>
    1a92:	2301      	movs	r3, #1
    1a94:	469b      	mov	fp, r3
    if (transParam.flags.bits.secEn) {
    1a96:	2308      	movs	r3, #8
    1a98:	4003      	ands	r3, r0
    1a9a:	0019      	movs	r1, r3
    1a9c:	424b      	negs	r3, r1
    1a9e:	414b      	adcs	r3, r1
    1aa0:	425b      	negs	r3, r3
    1aa2:	401a      	ands	r2, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) {
    1aa4:	2303      	movs	r3, #3
    1aa6:	9201      	str	r2, [sp, #4]
    1aa8:	4003      	ands	r3, r0
    1aaa:	2b01      	cmp	r3, #1
    1aac:	d100      	bne.n	1ab0 <MiMAC_SendPacket+0x50>
    1aae:	e170      	b.n	1d92 <MiMAC_SendPacket+0x332>
    else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA) {
    1ab0:	4259      	negs	r1, r3
    1ab2:	4159      	adcs	r1, r3
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1ab4:	4dcc      	ldr	r5, [pc, #816]	; (1de8 <MiMAC_SendPacket+0x388>)
        frameControl = 0x03;
    1ab6:	b2c9      	uxtb	r1, r1
    1ab8:	468a      	mov	sl, r1
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1aba:	897c      	ldrh	r4, [r7, #10]
    1abc:	8829      	ldrh	r1, [r5, #0]
    1abe:	42a1      	cmp	r1, r4
    1ac0:	d100      	bne.n	1ac4 <MiMAC_SendPacket+0x64>
    1ac2:	e16e      	b.n	1da2 <MiMAC_SendPacket+0x342>
        IntraPAN = false;
    1ac4:	2600      	movs	r6, #0
    1ac6:	210f      	movs	r1, #15
    1ac8:	2409      	movs	r4, #9
    1aca:	9603      	str	r6, [sp, #12]
    if (transParam.altDestAddr) {
    1acc:	465e      	mov	r6, fp
    1ace:	2e00      	cmp	r6, #0
    1ad0:	d000      	beq.n	1ad4 <MiMAC_SendPacket+0x74>
        headerLength += 2;
    1ad2:	0021      	movs	r1, r4
    if (transParam.altSrcAddr) {
    1ad4:	2a00      	cmp	r2, #0
    1ad6:	d100      	bne.n	1ada <MiMAC_SendPacket+0x7a>
    1ad8:	e0de      	b.n	1c98 <MiMAC_SendPacket+0x238>
        headerLength += 2;
    1ada:	3102      	adds	r1, #2
    1adc:	b2ca      	uxtb	r2, r1
    1ade:	4690      	mov	r8, r2
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1ae0:	2224      	movs	r2, #36	; 0x24
    1ae2:	4010      	ands	r0, r2
    1ae4:	2820      	cmp	r0, #32
    1ae6:	d100      	bne.n	1aea <MiMAC_SendPacket+0x8a>
    1ae8:	e0de      	b.n	1ca8 <MiMAC_SendPacket+0x248>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1aea:	2b03      	cmp	r3, #3
    1aec:	d100      	bne.n	1af0 <MiMAC_SendPacket+0x90>
    1aee:	e0e2      	b.n	1cb6 <MiMAC_SendPacket+0x256>
    if (transParam.flags.bits.secEn) {
    1af0:	464b      	mov	r3, r9
    1af2:	2220      	movs	r2, #32
    1af4:	783e      	ldrb	r6, [r7, #0]
    1af6:	015b      	lsls	r3, r3, #5
    1af8:	4396      	bics	r6, r2
    1afa:	431e      	orrs	r6, r3
    1afc:	703e      	strb	r6, [r7, #0]
    1afe:	0733      	lsls	r3, r6, #28
    1b00:	d500      	bpl.n	1b04 <MiMAC_SendPacket+0xa4>
    1b02:	e0e1      	b.n	1cc8 <MiMAC_SendPacket+0x268>
    packet[loc++] = headerLength;
    1b04:	4643      	mov	r3, r8
    1b06:	ac08      	add	r4, sp, #32
    1b08:	7023      	strb	r3, [r4, #0]
        packet[loc++] = MACPayloadLen + headerLength;
    1b0a:	ab32      	add	r3, sp, #200	; 0xc8
    1b0c:	781b      	ldrb	r3, [r3, #0]
    1b0e:	4443      	add	r3, r8
    1b10:	7063      	strb	r3, [r4, #1]
    packet[loc++] = frameControl;
    1b12:	4653      	mov	r3, sl
    1b14:	70a3      	strb	r3, [r4, #2]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1b16:	43f3      	mvns	r3, r6
    1b18:	079b      	lsls	r3, r3, #30
    1b1a:	d100      	bne.n	1b1e <MiMAC_SendPacket+0xbe>
    1b1c:	e0ee      	b.n	1cfc <MiMAC_SendPacket+0x29c>
        if (transParam.altDestAddr && transParam.altSrcAddr) {
    1b1e:	465b      	mov	r3, fp
    1b20:	2b00      	cmp	r3, #0
    1b22:	d100      	bne.n	1b26 <MiMAC_SendPacket+0xc6>
    1b24:	e0f5      	b.n	1d12 <MiMAC_SendPacket+0x2b2>
    1b26:	9b01      	ldr	r3, [sp, #4]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d000      	beq.n	1b2e <MiMAC_SendPacket+0xce>
    1b2c:	e146      	b.n	1dbc <MiMAC_SendPacket+0x35c>
            packet[loc++] = 0xC8;
    1b2e:	23c8      	movs	r3, #200	; 0xc8
    1b30:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1b32:	4aae      	ldr	r2, [pc, #696]	; (1dec <MiMAC_SendPacket+0x38c>)
    1b34:	7813      	ldrb	r3, [r2, #0]
    1b36:	1c59      	adds	r1, r3, #1
    1b38:	7011      	strb	r1, [r2, #0]
    1b3a:	7123      	strb	r3, [r4, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    1b3c:	7abb      	ldrb	r3, [r7, #10]
    1b3e:	7163      	strb	r3, [r4, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    1b40:	7afb      	ldrb	r3, [r7, #11]
    1b42:	71a3      	strb	r3, [r4, #6]
        if (transParam.flags.bits.broadcast) {
    1b44:	0773      	lsls	r3, r6, #29
    1b46:	d400      	bmi.n	1b4a <MiMAC_SendPacket+0xea>
    1b48:	e13b      	b.n	1dc2 <MiMAC_SendPacket+0x362>
            packet[loc++] = 0xFF;
    1b4a:	23ff      	movs	r3, #255	; 0xff
    1b4c:	210a      	movs	r1, #10
    1b4e:	2209      	movs	r2, #9
    1b50:	71e3      	strb	r3, [r4, #7]
            packet[loc++] = 0xFF;
    1b52:	7223      	strb	r3, [r4, #8]
    1b54:	3bf6      	subs	r3, #246	; 0xf6
    if (IntraPAN == false) {
    1b56:	9803      	ldr	r0, [sp, #12]
    1b58:	2800      	cmp	r0, #0
    1b5a:	d108      	bne.n	1b6e <MiMAC_SendPacket+0x10e>
        packet[loc++] = MAC_PANID.v[0];
    1b5c:	7828      	ldrb	r0, [r5, #0]
    1b5e:	54a0      	strb	r0, [r4, r2]
        packet[loc++] = MAC_PANID.v[1];
    1b60:	7868      	ldrb	r0, [r5, #1]
    1b62:	1c9a      	adds	r2, r3, #2
    1b64:	b2d2      	uxtb	r2, r2
    1b66:	3303      	adds	r3, #3
    1b68:	5460      	strb	r0, [r4, r1]
    1b6a:	b2d9      	uxtb	r1, r3
    1b6c:	0013      	movs	r3, r2
    if (transParam.altSrcAddr) {
    1b6e:	9801      	ldr	r0, [sp, #4]
    1b70:	2800      	cmp	r0, #0
    1b72:	d100      	bne.n	1b76 <MiMAC_SendPacket+0x116>
    1b74:	e0ea      	b.n	1d4c <MiMAC_SendPacket+0x2ec>
        packet[loc++] = myNetworkAddress.v[0];
    1b76:	489e      	ldr	r0, [pc, #632]	; (1df0 <MiMAC_SendPacket+0x390>)
        packet[loc++] = myNetworkAddress.v[1];
    1b78:	3302      	adds	r3, #2
        packet[loc++] = myNetworkAddress.v[0];
    1b7a:	7806      	ldrb	r6, [r0, #0]
        packet[loc++] = myNetworkAddress.v[1];
    1b7c:	b2db      	uxtb	r3, r3
        packet[loc++] = myNetworkAddress.v[0];
    1b7e:	54a6      	strb	r6, [r4, r2]
        packet[loc++] = myNetworkAddress.v[1];
    1b80:	7842      	ldrb	r2, [r0, #1]
    1b82:	5462      	strb	r2, [r4, r1]
    if (transParam.flags.bits.secEn) {
    1b84:	464a      	mov	r2, r9
    1b86:	2020      	movs	r0, #32
    1b88:	0151      	lsls	r1, r2, #5
    1b8a:	783a      	ldrb	r2, [r7, #0]
    1b8c:	4382      	bics	r2, r0
    1b8e:	430a      	orrs	r2, r1
    1b90:	0016      	movs	r6, r2
    1b92:	703a      	strb	r2, [r7, #0]
    1b94:	0732      	lsls	r2, r6, #28
    1b96:	d517      	bpl.n	1bc8 <MiMAC_SendPacket+0x168>
            packet[loc++] = OutgoingFrameCounter.v[i];
    1b98:	4a96      	ldr	r2, [pc, #600]	; (1df4 <MiMAC_SendPacket+0x394>)
    1b9a:	7811      	ldrb	r1, [r2, #0]
    1b9c:	54e1      	strb	r1, [r4, r3]
    1b9e:	7850      	ldrb	r0, [r2, #1]
    1ba0:	1c59      	adds	r1, r3, #1
    1ba2:	b2c9      	uxtb	r1, r1
    1ba4:	5460      	strb	r0, [r4, r1]
    1ba6:	7890      	ldrb	r0, [r2, #2]
    1ba8:	1c99      	adds	r1, r3, #2
    1baa:	b2c9      	uxtb	r1, r1
    1bac:	5460      	strb	r0, [r4, r1]
    1bae:	78d0      	ldrb	r0, [r2, #3]
    1bb0:	1cd9      	adds	r1, r3, #3
    1bb2:	b2c9      	uxtb	r1, r1
    1bb4:	5460      	strb	r0, [r4, r1]
        OutgoingFrameCounter.Val++;
    1bb6:	6810      	ldr	r0, [r2, #0]
    1bb8:	1d19      	adds	r1, r3, #4
    1bba:	3001      	adds	r0, #1
    1bbc:	6010      	str	r0, [r2, #0]
        packet[loc++] = myKeySequenceNumber;
    1bbe:	2200      	movs	r2, #0
    1bc0:	b2c9      	uxtb	r1, r1
    1bc2:	3305      	adds	r3, #5
    1bc4:	b2db      	uxtb	r3, r3
    1bc6:	5462      	strb	r2, [r4, r1]
    for (i = 0; i < MACPayloadLen; i++) {
    1bc8:	aa32      	add	r2, sp, #200	; 0xc8
    1bca:	7811      	ldrb	r1, [r2, #0]
    1bcc:	2900      	cmp	r1, #0
    1bce:	d100      	bne.n	1bd2 <MiMAC_SendPacket+0x172>
    1bd0:	e108      	b.n	1de4 <MiMAC_SendPacket+0x384>
    1bd2:	18c9      	adds	r1, r1, r3
    1bd4:	9d02      	ldr	r5, [sp, #8]
    1bd6:	b2ca      	uxtb	r2, r1
        packet[loc++] = MACPayload[i];
    1bd8:	7828      	ldrb	r0, [r5, #0]
    1bda:	1c59      	adds	r1, r3, #1
    1bdc:	54e0      	strb	r0, [r4, r3]
    1bde:	b2cb      	uxtb	r3, r1
    1be0:	3501      	adds	r5, #1
    for (i = 0; i < MACPayloadLen; i++) {
    1be2:	4293      	cmp	r3, r2
    1be4:	d1f8      	bne.n	1bd8 <MiMAC_SendPacket+0x178>
    packet[loc++] = final_mic_value[0];
    1be6:	4b84      	ldr	r3, [pc, #528]	; (1df8 <MiMAC_SendPacket+0x398>)
    1be8:	7819      	ldrb	r1, [r3, #0]
    1bea:	54a1      	strb	r1, [r4, r2]
    packet[loc++] = final_mic_value[1];
    1bec:	7858      	ldrb	r0, [r3, #1]
    packet[loc++] = final_mic_value[0];
    1bee:	1c51      	adds	r1, r2, #1
    packet[loc++] = final_mic_value[1];
    1bf0:	b2c9      	uxtb	r1, r1
    1bf2:	5460      	strb	r0, [r4, r1]
    packet[loc++] = final_mic_value[2];
    1bf4:	7898      	ldrb	r0, [r3, #2]
    packet[loc++] = final_mic_value[1];
    1bf6:	1c91      	adds	r1, r2, #2
    packet[loc++] = final_mic_value[2];
    1bf8:	b2c9      	uxtb	r1, r1
    1bfa:	5460      	strb	r0, [r4, r1]
    packet[loc++] = final_mic_value[3];
    1bfc:	78db      	ldrb	r3, [r3, #3]
    packet[loc++] = final_mic_value[2];
    1bfe:	3203      	adds	r2, #3
    packet[loc++] = final_mic_value[3];
    1c00:	b2d2      	uxtb	r2, r2
    1c02:	54a3      	strb	r3, [r4, r2]
    trx_status.bits.TX_BUSY = 1;
    1c04:	4b7d      	ldr	r3, [pc, #500]	; (1dfc <MiMAC_SendPacket+0x39c>)
    1c06:	2201      	movs	r2, #1
    1c08:	4698      	mov	r8, r3
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	4313      	orrs	r3, r2
    1c0e:	4642      	mov	r2, r8
    1c10:	7013      	strb	r3, [r2, #0]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1c12:	2224      	movs	r2, #36	; 0x24
        trx_status.bits.TX_PENDING_ACK = 1;
    1c14:	4643      	mov	r3, r8
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1c16:	4032      	ands	r2, r6
        trx_status.bits.TX_PENDING_ACK = 1;
    1c18:	781b      	ldrb	r3, [r3, #0]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1c1a:	2a20      	cmp	r2, #32
    1c1c:	d100      	bne.n	1c20 <MiMAC_SendPacket+0x1c0>
    1c1e:	e0dc      	b.n	1dda <MiMAC_SendPacket+0x37a>
        trx_status.bits.TX_PENDING_ACK = 0;
    1c20:	2202      	movs	r2, #2
    1c22:	4393      	bics	r3, r2
    1c24:	4642      	mov	r2, r8
    1c26:	7013      	strb	r3, [r2, #0]
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1c28:	271f      	movs	r7, #31
    1c2a:	4e75      	ldr	r6, [pc, #468]	; (1e00 <MiMAC_SendPacket+0x3a0>)
    1c2c:	4d75      	ldr	r5, [pc, #468]	; (1e04 <MiMAC_SendPacket+0x3a4>)
    trx_reg_write(reg, value);
    1c2e:	2103      	movs	r1, #3
    1c30:	2002      	movs	r0, #2
    1c32:	47b0      	blx	r6
    value = trx_reg_read(reg);
    1c34:	2001      	movs	r0, #1
    1c36:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1c38:	4038      	ands	r0, r7
    1c3a:	2808      	cmp	r0, #8
    1c3c:	d1f7      	bne.n	1c2e <MiMAC_SendPacket+0x1ce>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1c3e:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    1c40:	2119      	movs	r1, #25
    1c42:	2002      	movs	r0, #2
    1c44:	47b0      	blx	r6
    value = trx_reg_read(reg);
    1c46:	2001      	movs	r0, #1
    1c48:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    1c4a:	4038      	ands	r0, r7
    1c4c:	2819      	cmp	r0, #25
    1c4e:	d1f7      	bne.n	1c40 <MiMAC_SendPacket+0x1e0>
    value = trx_reg_read(reg);
    1c50:	200f      	movs	r0, #15
    1c52:	47a8      	blx	r5
    data[1] += 2; // 2
    1c54:	7861      	ldrb	r1, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    1c56:	2011      	movs	r0, #17
    data[1] += 2; // 2
    1c58:	1c8b      	adds	r3, r1, #2
    1c5a:	7063      	strb	r3, [r4, #1]
    trx_frame_write(&data[1], (data[1] - 1) /* length value*/);
    1c5c:	ab04      	add	r3, sp, #16
    1c5e:	469c      	mov	ip, r3
    1c60:	3101      	adds	r1, #1
    1c62:	b2c9      	uxtb	r1, r1
    1c64:	4460      	add	r0, ip
    1c66:	4b68      	ldr	r3, [pc, #416]	; (1e08 <MiMAC_SendPacket+0x3a8>)
    1c68:	4798      	blx	r3
    phyState = PHY_STATE_TX_WAIT_END;
    1c6a:	2203      	movs	r2, #3
    1c6c:	4b67      	ldr	r3, [pc, #412]	; (1e0c <MiMAC_SendPacket+0x3ac>)
    1c6e:	701a      	strb	r2, [r3, #0]
    1c70:	2280      	movs	r2, #128	; 0x80
    1c72:	4b67      	ldr	r3, [pc, #412]	; (1e10 <MiMAC_SendPacket+0x3b0>)
    1c74:	0352      	lsls	r2, r2, #13
    1c76:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    1c78:	46c0      	nop			; (mov r8, r8)
    1c7a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c7c:	615a      	str	r2, [r3, #20]
    return !trx_status.bits.TX_FAIL;
    1c7e:	4643      	mov	r3, r8
    1c80:	7818      	ldrb	r0, [r3, #0]
    1c82:	2301      	movs	r3, #1
    1c84:	0740      	lsls	r0, r0, #29
    1c86:	0fc0      	lsrs	r0, r0, #31
    1c88:	4058      	eors	r0, r3
}
    1c8a:	b029      	add	sp, #164	; 0xa4
    1c8c:	bc3c      	pop	{r2, r3, r4, r5}
    1c8e:	4690      	mov	r8, r2
    1c90:	4699      	mov	r9, r3
    1c92:	46a2      	mov	sl, r4
    1c94:	46ab      	mov	fp, r5
    1c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        headerLength += 8;
    1c98:	3108      	adds	r1, #8
    1c9a:	b2ca      	uxtb	r2, r1
    1c9c:	4690      	mov	r8, r2
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false) {
    1c9e:	2224      	movs	r2, #36	; 0x24
    1ca0:	4010      	ands	r0, r2
    1ca2:	2820      	cmp	r0, #32
    1ca4:	d000      	beq.n	1ca8 <MiMAC_SendPacket+0x248>
    1ca6:	e720      	b.n	1aea <MiMAC_SendPacket+0x8a>
        frameControl |= 0x20;
    1ca8:	4651      	mov	r1, sl
    1caa:	3a04      	subs	r2, #4
    1cac:	4311      	orrs	r1, r2
    1cae:	468a      	mov	sl, r1
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1cb0:	2b03      	cmp	r3, #3
    1cb2:	d000      	beq.n	1cb6 <MiMAC_SendPacket+0x256>
    1cb4:	e71c      	b.n	1af0 <MiMAC_SendPacket+0x90>
    1cb6:	3b02      	subs	r3, #2
    1cb8:	9301      	str	r3, [sp, #4]
        transParam.flags.bits.ackReq = false;
    1cba:	2300      	movs	r3, #0
    1cbc:	4699      	mov	r9, r3
        IntraPAN = false;
    1cbe:	9303      	str	r3, [sp, #12]
        frameControl = 0x00;
    1cc0:	469a      	mov	sl, r3
        headerLength = 7;
    1cc2:	3307      	adds	r3, #7
    1cc4:	4698      	mov	r8, r3
    1cc6:	e713      	b.n	1af0 <MiMAC_SendPacket+0x90>
        frameControl |= 0x08;
    1cc8:	2308      	movs	r3, #8
    1cca:	4652      	mov	r2, sl
    1ccc:	431a      	orrs	r2, r3
    1cce:	b2d3      	uxtb	r3, r2
    1cd0:	469a      	mov	sl, r3
        DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    1cd2:	4b48      	ldr	r3, [pc, #288]	; (1df4 <MiMAC_SendPacket+0x394>)
    1cd4:	4c4f      	ldr	r4, [pc, #316]	; (1e14 <MiMAC_SendPacket+0x3b4>)
    1cd6:	681a      	ldr	r2, [r3, #0]
    1cd8:	a932      	add	r1, sp, #200	; 0xc8
    1cda:	4653      	mov	r3, sl
    1cdc:	9802      	ldr	r0, [sp, #8]
    1cde:	47a0      	blx	r4
    packet[loc++] = headerLength;
    1ce0:	4643      	mov	r3, r8
    1ce2:	ac08      	add	r4, sp, #32
    1ce4:	7023      	strb	r3, [r4, #0]
        packet[loc++] = MACPayloadLen + headerLength + 9;
    1ce6:	ab32      	add	r3, sp, #200	; 0xc8
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	3309      	adds	r3, #9
    1cec:	4443      	add	r3, r8
    1cee:	7063      	strb	r3, [r4, #1]
    packet[loc++] = frameControl;
    1cf0:	4653      	mov	r3, sl
    1cf2:	70a3      	strb	r3, [r4, #2]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE) {
    1cf4:	43f3      	mvns	r3, r6
    1cf6:	079b      	lsls	r3, r3, #30
    1cf8:	d000      	beq.n	1cfc <MiMAC_SendPacket+0x29c>
    1cfa:	e710      	b.n	1b1e <MiMAC_SendPacket+0xbe>
        packet[loc++] = 0x80;
    1cfc:	2380      	movs	r3, #128	; 0x80
        packet[loc++] = IEEESeqNum++;
    1cfe:	4a3b      	ldr	r2, [pc, #236]	; (1dec <MiMAC_SendPacket+0x38c>)
        packet[loc++] = 0x80;
    1d00:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1d02:	7813      	ldrb	r3, [r2, #0]
    1d04:	1c59      	adds	r1, r3, #1
    1d06:	7011      	strb	r1, [r2, #0]
    1d08:	7123      	strb	r3, [r4, #4]
    1d0a:	2106      	movs	r1, #6
    1d0c:	2205      	movs	r2, #5
    1d0e:	2305      	movs	r3, #5
    1d10:	e721      	b.n	1b56 <MiMAC_SendPacket+0xf6>
        else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1) {
    1d12:	9b01      	ldr	r3, [sp, #4]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d15d      	bne.n	1dd4 <MiMAC_SendPacket+0x374>
            packet[loc++] = 0xCC;
    1d18:	23cc      	movs	r3, #204	; 0xcc
    1d1a:	70e3      	strb	r3, [r4, #3]
        packet[loc++] = IEEESeqNum++;
    1d1c:	4a33      	ldr	r2, [pc, #204]	; (1dec <MiMAC_SendPacket+0x38c>)
    1d1e:	7813      	ldrb	r3, [r2, #0]
    1d20:	1c59      	adds	r1, r3, #1
    1d22:	7011      	strb	r1, [r2, #0]
    1d24:	7123      	strb	r3, [r4, #4]
        packet[loc++] = transParam.DestPANID.v[0];
    1d26:	7abb      	ldrb	r3, [r7, #10]
    1d28:	7163      	strb	r3, [r4, #5]
        packet[loc++] = transParam.DestPANID.v[1];
    1d2a:	7afb      	ldrb	r3, [r7, #11]
    1d2c:	71a3      	strb	r3, [r4, #6]
        if (transParam.flags.bits.broadcast) {
    1d2e:	0773      	lsls	r3, r6, #29
    1d30:	d500      	bpl.n	1d34 <MiMAC_SendPacket+0x2d4>
    1d32:	e70a      	b.n	1b4a <MiMAC_SendPacket+0xea>
    1d34:	ab04      	add	r3, sp, #16
    1d36:	469c      	mov	ip, r3
    1d38:	2017      	movs	r0, #23
    1d3a:	2208      	movs	r2, #8
    1d3c:	9904      	ldr	r1, [sp, #16]
    1d3e:	4b36      	ldr	r3, [pc, #216]	; (1e18 <MiMAC_SendPacket+0x3b8>)
    1d40:	4460      	add	r0, ip
    1d42:	4798      	blx	r3
    1d44:	2110      	movs	r1, #16
    1d46:	220f      	movs	r2, #15
                    packet[loc++] = transParam.DestAddress[i];
    1d48:	230f      	movs	r3, #15
    1d4a:	e704      	b.n	1b56 <MiMAC_SendPacket+0xf6>
    1d4c:	4a33      	ldr	r2, [pc, #204]	; (1e1c <MiMAC_SendPacket+0x3bc>)
    1d4e:	6852      	ldr	r2, [r2, #4]
            packet[loc++] = MACInitParams.PAddress[i];
    1d50:	7811      	ldrb	r1, [r2, #0]
    1d52:	54e1      	strb	r1, [r4, r3]
    1d54:	7850      	ldrb	r0, [r2, #1]
    1d56:	1c59      	adds	r1, r3, #1
    1d58:	b2c9      	uxtb	r1, r1
    1d5a:	5460      	strb	r0, [r4, r1]
    1d5c:	7890      	ldrb	r0, [r2, #2]
    1d5e:	1c99      	adds	r1, r3, #2
    1d60:	b2c9      	uxtb	r1, r1
    1d62:	5460      	strb	r0, [r4, r1]
    1d64:	78d0      	ldrb	r0, [r2, #3]
    1d66:	1cd9      	adds	r1, r3, #3
    1d68:	b2c9      	uxtb	r1, r1
    1d6a:	5460      	strb	r0, [r4, r1]
    1d6c:	7910      	ldrb	r0, [r2, #4]
    1d6e:	1d19      	adds	r1, r3, #4
    1d70:	b2c9      	uxtb	r1, r1
    1d72:	5460      	strb	r0, [r4, r1]
    1d74:	7950      	ldrb	r0, [r2, #5]
    1d76:	1d59      	adds	r1, r3, #5
    1d78:	b2c9      	uxtb	r1, r1
    1d7a:	5460      	strb	r0, [r4, r1]
    1d7c:	7990      	ldrb	r0, [r2, #6]
    1d7e:	1d99      	adds	r1, r3, #6
    1d80:	b2c9      	uxtb	r1, r1
    1d82:	5460      	strb	r0, [r4, r1]
    1d84:	79d1      	ldrb	r1, [r2, #7]
    1d86:	1dda      	adds	r2, r3, #7
    1d88:	b2d2      	uxtb	r2, r2
    1d8a:	3308      	adds	r3, #8
    1d8c:	54a1      	strb	r1, [r4, r2]
    1d8e:	b2db      	uxtb	r3, r3
    1d90:	e6f8      	b.n	1b84 <MiMAC_SendPacket+0x124>
        frameControl = 0x03;
    1d92:	2103      	movs	r1, #3
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1d94:	4d14      	ldr	r5, [pc, #80]	; (1de8 <MiMAC_SendPacket+0x388>)
        frameControl = 0x03;
    1d96:	468a      	mov	sl, r1
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    1d98:	897c      	ldrh	r4, [r7, #10]
    1d9a:	8829      	ldrh	r1, [r5, #0]
    1d9c:	42a1      	cmp	r1, r4
    1d9e:	d000      	beq.n	1da2 <MiMAC_SendPacket+0x342>
    1da0:	e690      	b.n	1ac4 <MiMAC_SendPacket+0x64>
    1da2:	4c1f      	ldr	r4, [pc, #124]	; (1e20 <MiMAC_SendPacket+0x3c0>)
    1da4:	42a1      	cmp	r1, r4
    1da6:	d100      	bne.n	1daa <MiMAC_SendPacket+0x34a>
    1da8:	e68c      	b.n	1ac4 <MiMAC_SendPacket+0x64>
        frameControl |= 0x40;
    1daa:	2140      	movs	r1, #64	; 0x40
    1dac:	4654      	mov	r4, sl
        IntraPAN = true;
    1dae:	2601      	movs	r6, #1
        frameControl |= 0x40;
    1db0:	430c      	orrs	r4, r1
    1db2:	46a2      	mov	sl, r4
        IntraPAN = true;
    1db4:	3933      	subs	r1, #51	; 0x33
    1db6:	2407      	movs	r4, #7
    1db8:	9603      	str	r6, [sp, #12]
    1dba:	e687      	b.n	1acc <MiMAC_SendPacket+0x6c>
            packet[loc++] = 0x88;
    1dbc:	2388      	movs	r3, #136	; 0x88
    1dbe:	70e3      	strb	r3, [r4, #3]
    1dc0:	e6b7      	b.n	1b32 <MiMAC_SendPacket+0xd2>
                packet[loc++] = transParam.DestAddress[0];
    1dc2:	9a04      	ldr	r2, [sp, #16]
    1dc4:	210a      	movs	r1, #10
    1dc6:	7813      	ldrb	r3, [r2, #0]
    1dc8:	71e3      	strb	r3, [r4, #7]
                packet[loc++] = transParam.DestAddress[1];
    1dca:	7853      	ldrb	r3, [r2, #1]
    1dcc:	2209      	movs	r2, #9
    1dce:	7223      	strb	r3, [r4, #8]
    1dd0:	2309      	movs	r3, #9
    1dd2:	e6c0      	b.n	1b56 <MiMAC_SendPacket+0xf6>
            packet[loc++] = 0x8C;
    1dd4:	238c      	movs	r3, #140	; 0x8c
    1dd6:	70e3      	strb	r3, [r4, #3]
    1dd8:	e7a0      	b.n	1d1c <MiMAC_SendPacket+0x2bc>
        trx_status.bits.TX_PENDING_ACK = 1;
    1dda:	2202      	movs	r2, #2
    1ddc:	4313      	orrs	r3, r2
    1dde:	4642      	mov	r2, r8
    1de0:	7013      	strb	r3, [r2, #0]
    1de2:	e721      	b.n	1c28 <MiMAC_SendPacket+0x1c8>
    for (i = 0; i < MACPayloadLen; i++) {
    1de4:	001a      	movs	r2, r3
    1de6:	e6fe      	b.n	1be6 <MiMAC_SendPacket+0x186>
    1de8:	2000090c 	.word	0x2000090c
    1dec:	20000294 	.word	0x20000294
    1df0:	20000298 	.word	0x20000298
    1df4:	200008f4 	.word	0x200008f4
    1df8:	200002cc 	.word	0x200002cc
    1dfc:	20000910 	.word	0x20000910
    1e00:	000055b5 	.word	0x000055b5
    1e04:	000054b9 	.word	0x000054b9
    1e08:	000057fd 	.word	0x000057fd
    1e0c:	20000129 	.word	0x20000129
    1e10:	40002800 	.word	0x40002800
    1e14:	00001149 	.word	0x00001149
    1e18:	00007ead 	.word	0x00007ead
    1e1c:	200002a0 	.word	0x200002a0
    1e20:	0000ffff 	.word	0x0000ffff

00001e24 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
    //re-enable the ACKS
    if (BankIndex < BANK_SIZE) {
    1e24:	4b04      	ldr	r3, [pc, #16]	; (1e38 <MiMAC_DiscardPacket+0x14>)
    1e26:	781b      	ldrb	r3, [r3, #0]
    1e28:	2b13      	cmp	r3, #19
    1e2a:	d804      	bhi.n	1e36 <MiMAC_DiscardPacket+0x12>
        RxBuffer[BankIndex].PayloadLen = 0;
    1e2c:	224e      	movs	r2, #78	; 0x4e
    1e2e:	2100      	movs	r1, #0
    1e30:	4353      	muls	r3, r2
    1e32:	4a02      	ldr	r2, [pc, #8]	; (1e3c <MiMAC_DiscardPacket+0x18>)
    1e34:	5499      	strb	r1, [r3, r2]
    }
}
    1e36:	4770      	bx	lr
    1e38:	20000000 	.word	0x20000000
    1e3c:	200002dc 	.word	0x200002dc

00001e40 <MiMAC_ReceivedPacket>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_ReceivedPacket(void)
{
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	46de      	mov	lr, fp
    1e44:	4657      	mov	r7, sl
    1e46:	464e      	mov	r6, r9
    1e48:	4645      	mov	r5, r8
    1e4a:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t i;

    //If the stack TX has been busy for a long time then
    //time out the TX because we may have missed the interrupt
    //and don't want to lock up the stack forever
    if (trx_status.bits.TX_BUSY) {
    1e4c:	4bcc      	ldr	r3, [pc, #816]	; (2180 <STACK_SIZE+0x180>)
{
    1e4e:	b085      	sub	sp, #20
    if (trx_status.bits.TX_BUSY) {
    1e50:	781a      	ldrb	r2, [r3, #0]
    1e52:	07d2      	lsls	r2, r2, #31
    1e54:	d509      	bpl.n	1e6a <MiMAC_ReceivedPacket+0x2a>
        if (failureCounter >= FAILURE_COUNTER) {
    1e56:	4acb      	ldr	r2, [pc, #812]	; (2184 <STACK_SIZE+0x184>)
    1e58:	8811      	ldrh	r1, [r2, #0]
    1e5a:	2905      	cmp	r1, #5
    1e5c:	d941      	bls.n	1ee2 <MiMAC_ReceivedPacket+0xa2>
            failureCounter = 0;
    1e5e:	2100      	movs	r1, #0
    1e60:	8011      	strh	r1, [r2, #0]
            trx_status.bits.TX_BUSY = 0;
    1e62:	781a      	ldrb	r2, [r3, #0]
    1e64:	3101      	adds	r1, #1
    1e66:	438a      	bics	r2, r1
    1e68:	701a      	strb	r2, [r3, #0]
        else {
            failureCounter++;
        }
    }

    BankIndex = 0xFF;
    1e6a:	23ff      	movs	r3, #255	; 0xff
    1e6c:	4fc6      	ldr	r7, [pc, #792]	; (2188 <STACK_SIZE+0x188>)
    1e6e:	4ec7      	ldr	r6, [pc, #796]	; (218c <STACK_SIZE+0x18c>)
    1e70:	703b      	strb	r3, [r7, #0]
    1e72:	0032      	movs	r2, r6
    1e74:	2300      	movs	r3, #0
    for (i = 0; i < BANK_SIZE; i++) {
        if (RxBuffer[i].PayloadLen > 0) {
    1e76:	7811      	ldrb	r1, [r2, #0]
    1e78:	b2d8      	uxtb	r0, r3
    1e7a:	001c      	movs	r4, r3
    1e7c:	2900      	cmp	r1, #0
    1e7e:	d10b      	bne.n	1e98 <MiMAC_ReceivedPacket+0x58>
    1e80:	3301      	adds	r3, #1
    1e82:	324e      	adds	r2, #78	; 0x4e
    for (i = 0; i < BANK_SIZE; i++) {
    1e84:	2b14      	cmp	r3, #20
    1e86:	d1f6      	bne.n	1e76 <MiMAC_ReceivedPacket+0x36>
            // use reserved packet type to represent beacon packet
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
            break;
        default: // not support frame type
            MiMAC_DiscardPacket();
            return false;
    1e88:	2000      	movs	r0, #0
#endif

        return true;
    }
    return false;
}
    1e8a:	b005      	add	sp, #20
    1e8c:	bc3c      	pop	{r2, r3, r4, r5}
    1e8e:	4690      	mov	r8, r2
    1e90:	4699      	mov	r9, r3
    1e92:	46a2      	mov	sl, r4
    1e94:	46ab      	mov	fp, r5
    1e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    1e98:	224e      	movs	r2, #78	; 0x4e
    1e9a:	435a      	muls	r2, r3
            BankIndex = i;
    1e9c:	7038      	strb	r0, [r7, #0]
        if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0) {
    1e9e:	18b0      	adds	r0, r6, r2
    1ea0:	4684      	mov	ip, r0
    1ea2:	7840      	ldrb	r0, [r0, #1]
    1ea4:	9203      	str	r2, [sp, #12]
    1ea6:	4680      	mov	r8, r0
    1ea8:	2040      	movs	r0, #64	; 0x40
    1eaa:	4645      	mov	r5, r8
    1eac:	4005      	ands	r5, r0
        MACRxPacket.flags.Val = 0;
    1eae:	2000      	movs	r0, #0
    1eb0:	46a9      	mov	r9, r5
    1eb2:	4db7      	ldr	r5, [pc, #732]	; (2190 <STACK_SIZE+0x190>)
    1eb4:	7028      	strb	r0, [r5, #0]
        MACRxPacket.altSourceAddress = false;
    1eb6:	73e8      	strb	r0, [r5, #15]
        addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    1eb8:	4660      	mov	r0, ip
    1eba:	7882      	ldrb	r2, [r0, #2]
        switch (addrMode) {
    1ebc:	2033      	movs	r0, #51	; 0x33
    1ebe:	4382      	bics	r2, r0
    1ec0:	2a88      	cmp	r2, #136	; 0x88
    1ec2:	d100      	bne.n	1ec6 <MiMAC_ReceivedPacket+0x86>
    1ec4:	e121      	b.n	210a <STACK_SIZE+0x10a>
    1ec6:	d911      	bls.n	1eec <MiMAC_ReceivedPacket+0xac>
    1ec8:	2ac8      	cmp	r2, #200	; 0xc8
    1eca:	d100      	bne.n	1ece <MiMAC_ReceivedPacket+0x8e>
    1ecc:	e099      	b.n	2002 <STACK_SIZE+0x2>
    1ece:	2acc      	cmp	r2, #204	; 0xcc
    1ed0:	d04e      	beq.n	1f70 <MiMAC_ReceivedPacket+0x130>
    1ed2:	2a8c      	cmp	r2, #140	; 0x8c
    1ed4:	d07b      	beq.n	1fce <MiMAC_ReceivedPacket+0x18e>
        RxBuffer[BankIndex].PayloadLen = 0;
    1ed6:	224e      	movs	r2, #78	; 0x4e
    1ed8:	4353      	muls	r3, r2
    1eda:	2200      	movs	r2, #0
            return false;
    1edc:	2000      	movs	r0, #0
        RxBuffer[BankIndex].PayloadLen = 0;
    1ede:	54f2      	strb	r2, [r6, r3]
            return false;
    1ee0:	e7d3      	b.n	1e8a <MiMAC_ReceivedPacket+0x4a>
            failureCounter++;
    1ee2:	8813      	ldrh	r3, [r2, #0]
    1ee4:	3301      	adds	r3, #1
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	8013      	strh	r3, [r2, #0]
    1eea:	e7be      	b.n	1e6a <MiMAC_ReceivedPacket+0x2a>
        switch (addrMode) {
    1eec:	2a08      	cmp	r2, #8
    1eee:	d032      	beq.n	1f56 <MiMAC_ReceivedPacket+0x116>
    1ef0:	2a80      	cmp	r2, #128	; 0x80
    1ef2:	d1f0      	bne.n	1ed6 <MiMAC_ReceivedPacket+0x96>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1ef4:	207c      	movs	r0, #124	; 0x7c
    1ef6:	4240      	negs	r0, r0
    1ef8:	7028      	strb	r0, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    1efa:	307d      	adds	r0, #125	; 0x7d
    1efc:	73e8      	strb	r0, [r5, #15]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1efe:	4660      	mov	r0, ip
    1f00:	7900      	ldrb	r0, [r0, #4]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1f02:	9a03      	ldr	r2, [sp, #12]
            MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1f04:	7428      	strb	r0, [r5, #16]
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f06:	4660      	mov	r0, ip
    1f08:	7940      	ldrb	r0, [r0, #5]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    1f0a:	390b      	subs	r1, #11
            MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f0c:	7468      	strb	r0, [r5, #17]
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1f0e:	1d90      	adds	r0, r2, #6
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f10:	3208      	adds	r2, #8
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1f12:	1830      	adds	r0, r6, r0
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f14:	18b2      	adds	r2, r6, r2
            MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    1f16:	6068      	str	r0, [r5, #4]
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    1f18:	7329      	strb	r1, [r5, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f1a:	60aa      	str	r2, [r5, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    1f1c:	4642      	mov	r2, r8
    1f1e:	0712      	lsls	r2, r2, #28
    1f20:	d450      	bmi.n	1fc4 <MiMAC_ReceivedPacket+0x184>
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    1f22:	2307      	movs	r3, #7
    1f24:	4642      	mov	r2, r8
    1f26:	4013      	ands	r3, r2
    1f28:	2b01      	cmp	r3, #1
    1f2a:	d100      	bne.n	1f2e <MiMAC_ReceivedPacket+0xee>
    1f2c:	e112      	b.n	2154 <STACK_SIZE+0x154>
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d100      	bne.n	1f34 <MiMAC_ReceivedPacket+0xf4>
    1f32:	e10a      	b.n	214a <STACK_SIZE+0x14a>
    1f34:	2b03      	cmp	r3, #3
    1f36:	d000      	beq.n	1f3a <MiMAC_ReceivedPacket+0xfa>
    1f38:	e185      	b.n	2246 <STACK_SIZE+0x246>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    1f3a:	2203      	movs	r2, #3
    1f3c:	782b      	ldrb	r3, [r5, #0]
    1f3e:	4393      	bics	r3, r2
    1f40:	2201      	movs	r2, #1
    1f42:	4313      	orrs	r3, r2
    1f44:	702b      	strb	r3, [r5, #0]
        MACRxPacket.LQIValue = Received_LQI_Val;
    1f46:	4b93      	ldr	r3, [pc, #588]	; (2194 <STACK_SIZE+0x194>)
        return true;
    1f48:	2001      	movs	r0, #1
        MACRxPacket.LQIValue = Received_LQI_Val;
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	73ab      	strb	r3, [r5, #14]
        MACRxPacket.RSSIValue = Received_RSSI_Val;
    1f4e:	4b92      	ldr	r3, [pc, #584]	; (2198 <STACK_SIZE+0x198>)
    1f50:	781b      	ldrb	r3, [r3, #0]
    1f52:	736b      	strb	r3, [r5, #13]
        return true;
    1f54:	e799      	b.n	1e8a <MiMAC_ReceivedPacket+0x4a>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    1f56:	4662      	mov	r2, ip
    1f58:	7992      	ldrb	r2, [r2, #6]
    1f5a:	2aff      	cmp	r2, #255	; 0xff
    1f5c:	d100      	bne.n	1f60 <MiMAC_ReceivedPacket+0x120>
    1f5e:	e1d3      	b.n	2308 <STACK_SIZE+0x308>
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f60:	224e      	movs	r2, #78	; 0x4e
    1f62:	435a      	muls	r2, r3
    1f64:	3208      	adds	r2, #8
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    1f66:	390a      	subs	r1, #10
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f68:	18b2      	adds	r2, r6, r2
            MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    1f6a:	7329      	strb	r1, [r5, #12]
            MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    1f6c:	60aa      	str	r2, [r5, #8]
        } break;
    1f6e:	e7d5      	b.n	1f1c <MiMAC_ReceivedPacket+0xdc>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1f70:	2380      	movs	r3, #128	; 0x80
    1f72:	425b      	negs	r3, r3
    1f74:	702b      	strb	r3, [r5, #0]
            if (bIntraPAN) // check if it is intraPAN
    1f76:	464b      	mov	r3, r9
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d100      	bne.n	1f7e <MiMAC_ReceivedPacket+0x13e>
    1f7c:	e13a      	b.n	21f4 <STACK_SIZE+0x1f4>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1f7e:	4663      	mov	r3, ip
    1f80:	791b      	ldrb	r3, [r3, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1f82:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1f84:	742b      	strb	r3, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f86:	4663      	mov	r3, ip
    1f88:	795b      	ldrb	r3, [r3, #5]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1f8a:	3216      	adds	r2, #22
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1f8c:	746b      	strb	r3, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1f8e:	9b03      	ldr	r3, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    1f90:	3919      	subs	r1, #25
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1f92:	330e      	adds	r3, #14
    1f94:	18f3      	adds	r3, r6, r3
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1f96:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    1f98:	606b      	str	r3, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    1f9a:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    1f9c:	60aa      	str	r2, [r5, #8]
    1f9e:	e04e      	b.n	203e <STACK_SIZE+0x3e>
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    1fa0:	0020      	movs	r0, r4
    1fa2:	6869      	ldr	r1, [r5, #4]
    1fa4:	300a      	adds	r0, #10
    1fa6:	4b7d      	ldr	r3, [pc, #500]	; (219c <STACK_SIZE+0x19c>)
    1fa8:	4798      	blx	r3
    1faa:	2800      	cmp	r0, #0
    1fac:	d05e      	beq.n	206c <STACK_SIZE+0x6c>
    1fae:	2301      	movs	r3, #1
                if (IncomingFrameCounter[i].Val > FrameCounter.Val) {
    1fb0:	4a7b      	ldr	r2, [pc, #492]	; (21a0 <STACK_SIZE+0x1a0>)
    1fb2:	009b      	lsls	r3, r3, #2
    1fb4:	5899      	ldr	r1, [r3, r2]
    1fb6:	4541      	cmp	r1, r8
    1fb8:	d800      	bhi.n	1fbc <MiMAC_ReceivedPacket+0x17c>
    1fba:	e149      	b.n	2250 <STACK_SIZE+0x250>
    if (BankIndex < BANK_SIZE) {
    1fbc:	783b      	ldrb	r3, [r7, #0]
    1fbe:	2b13      	cmp	r3, #19
    1fc0:	d900      	bls.n	1fc4 <MiMAC_ReceivedPacket+0x184>
    1fc2:	e761      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    1fc4:	224e      	movs	r2, #78	; 0x4e
    1fc6:	4353      	muls	r3, r2
    1fc8:	2200      	movs	r2, #0
    1fca:	54f2      	strb	r2, [r6, r3]
    1fcc:	e75c      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    1fce:	2080      	movs	r0, #128	; 0x80
    1fd0:	4240      	negs	r0, r0
    1fd2:	7028      	strb	r0, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    1fd4:	3081      	adds	r0, #129	; 0x81
    1fd6:	73e8      	strb	r0, [r5, #15]
            if (bIntraPAN) // check if it is intraPAN
    1fd8:	4648      	mov	r0, r9
    1fda:	2800      	cmp	r0, #0
    1fdc:	d100      	bne.n	1fe0 <MiMAC_ReceivedPacket+0x1a0>
    1fde:	e0f8      	b.n	21d2 <STACK_SIZE+0x1d2>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1fe0:	4660      	mov	r0, ip
    1fe2:	7900      	ldrb	r0, [r0, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1fe4:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    1fe6:	7428      	strb	r0, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1fe8:	4660      	mov	r0, ip
    1fea:	7940      	ldrb	r0, [r0, #5]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1fec:	3210      	adds	r2, #16
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    1fee:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1ff0:	9803      	ldr	r0, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    1ff2:	3913      	subs	r1, #19
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1ff4:	300d      	adds	r0, #13
    1ff6:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1ff8:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    1ffa:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    1ffc:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    1ffe:	60aa      	str	r2, [r5, #8]
    2000:	e78c      	b.n	1f1c <MiMAC_ReceivedPacket+0xdc>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2002:	4662      	mov	r2, ip
    2004:	7992      	ldrb	r2, [r2, #6]
    2006:	2aff      	cmp	r2, #255	; 0xff
    2008:	d100      	bne.n	200c <STACK_SIZE+0xc>
    200a:	e18d      	b.n	2328 <STACK_SIZE+0x328>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    200c:	2280      	movs	r2, #128	; 0x80
    200e:	7828      	ldrb	r0, [r5, #0]
    2010:	4252      	negs	r2, r2
    2012:	4302      	orrs	r2, r0
    2014:	702a      	strb	r2, [r5, #0]
            if (bIntraPAN) // check if it is intraPAN
    2016:	464a      	mov	r2, r9
    2018:	2a00      	cmp	r2, #0
    201a:	d000      	beq.n	201e <STACK_SIZE+0x1e>
    201c:	e0c8      	b.n	21b0 <STACK_SIZE+0x1b0>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    201e:	224e      	movs	r2, #78	; 0x4e
    2020:	4353      	muls	r3, r2
    2022:	18f2      	adds	r2, r6, r3
    2024:	7a10      	ldrb	r0, [r2, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2026:	7a52      	ldrb	r2, [r2, #9]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    2028:	3915      	subs	r1, #21
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    202a:	746a      	strb	r2, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    202c:	001a      	movs	r2, r3
    202e:	320a      	adds	r2, #10
    2030:	18b2      	adds	r2, r6, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2032:	3312      	adds	r3, #18
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2034:	606a      	str	r2, [r5, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    2036:	18f2      	adds	r2, r6, r3
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2038:	7428      	strb	r0, [r5, #16]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    203a:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    203c:	60aa      	str	r2, [r5, #8]
        if (RxBuffer[BankIndex].Payload[0] & 0x08) {
    203e:	4643      	mov	r3, r8
    2040:	071b      	lsls	r3, r3, #28
    2042:	d400      	bmi.n	2046 <STACK_SIZE+0x46>
    2044:	e76d      	b.n	1f22 <MiMAC_ReceivedPacket+0xe2>
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    2046:	7850      	ldrb	r0, [r2, #1]
    2048:	7813      	ldrb	r3, [r2, #0]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    204a:	7891      	ldrb	r1, [r2, #2]
            FrameCounter.v[1] = MACRxPacket.Payload[1];
    204c:	0200      	lsls	r0, r0, #8
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    204e:	78d2      	ldrb	r2, [r2, #3]
            FrameCounter.v[2] = MACRxPacket.Payload[2];
    2050:	0409      	lsls	r1, r1, #16
    2052:	4303      	orrs	r3, r0
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    2054:	0612      	lsls	r2, r2, #24
    2056:	430b      	orrs	r3, r1
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    2058:	4c52      	ldr	r4, [pc, #328]	; (21a4 <STACK_SIZE+0x1a4>)
            FrameCounter.v[3] = MACRxPacket.Payload[3];
    205a:	4313      	orrs	r3, r2
    205c:	4698      	mov	r8, r3
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    205e:	7a63      	ldrb	r3, [r4, #9]
    2060:	09db      	lsrs	r3, r3, #7
    2062:	d000      	beq.n	2066 <STACK_SIZE+0x66>
    2064:	e0f7      	b.n	2256 <STACK_SIZE+0x256>
    2066:	7ce3      	ldrb	r3, [r4, #19]
    2068:	09db      	lsrs	r3, r3, #7
    206a:	d199      	bne.n	1fa0 <MiMAC_ReceivedPacket+0x160>
    206c:	7f63      	ldrb	r3, [r4, #29]
    206e:	09db      	lsrs	r3, r3, #7
    2070:	d000      	beq.n	2074 <STACK_SIZE+0x74>
    2072:	e103      	b.n	227c <STACK_SIZE+0x27c>
    2074:	2327      	movs	r3, #39	; 0x27
    2076:	5ce3      	ldrb	r3, [r4, r3]
    2078:	09db      	lsrs	r3, r3, #7
    207a:	d000      	beq.n	207e <STACK_SIZE+0x7e>
    207c:	e0f4      	b.n	2268 <STACK_SIZE+0x268>
    207e:	2331      	movs	r3, #49	; 0x31
    2080:	5ce3      	ldrb	r3, [r4, r3]
    2082:	09db      	lsrs	r3, r3, #7
    2084:	d000      	beq.n	2088 <STACK_SIZE+0x88>
    2086:	e121      	b.n	22cc <STACK_SIZE+0x2cc>
    2088:	233b      	movs	r3, #59	; 0x3b
    208a:	5ce3      	ldrb	r3, [r4, r3]
    208c:	09db      	lsrs	r3, r3, #7
    208e:	d000      	beq.n	2092 <STACK_SIZE+0x92>
    2090:	e112      	b.n	22b8 <STACK_SIZE+0x2b8>
    2092:	2345      	movs	r3, #69	; 0x45
    2094:	5ce3      	ldrb	r3, [r4, r3]
    2096:	09db      	lsrs	r3, r3, #7
    2098:	d000      	beq.n	209c <STACK_SIZE+0x9c>
    209a:	e103      	b.n	22a4 <STACK_SIZE+0x2a4>
    209c:	234f      	movs	r3, #79	; 0x4f
    209e:	5ce3      	ldrb	r3, [r4, r3]
    20a0:	09db      	lsrs	r3, r3, #7
    20a2:	d000      	beq.n	20a6 <STACK_SIZE+0xa6>
    20a4:	e11c      	b.n	22e0 <STACK_SIZE+0x2e0>
    20a6:	2359      	movs	r3, #89	; 0x59
    20a8:	5ce3      	ldrb	r3, [r4, r3]
    20aa:	09db      	lsrs	r3, r3, #7
    20ac:	d000      	beq.n	20b0 <STACK_SIZE+0xb0>
    20ae:	e121      	b.n	22f4 <STACK_SIZE+0x2f4>
    20b0:	2363      	movs	r3, #99	; 0x63
    20b2:	5ce3      	ldrb	r3, [r4, r3]
    20b4:	09db      	lsrs	r3, r3, #7
    20b6:	d000      	beq.n	20ba <STACK_SIZE+0xba>
    20b8:	e0ea      	b.n	2290 <STACK_SIZE+0x290>
            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    20ba:	7b2b      	ldrb	r3, [r5, #12]
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    20bc:	68a8      	ldr	r0, [r5, #8]
            MACRxPacket.PayloadLen -= 5; // used to 5 for frame counter now -4 also added for MIC integrity
    20be:	3b05      	subs	r3, #5
    20c0:	b2db      	uxtb	r3, r3
    20c2:	732b      	strb	r3, [r5, #12]
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    20c4:	18c3      	adds	r3, r0, r3
    20c6:	7859      	ldrb	r1, [r3, #1]
    20c8:	4a37      	ldr	r2, [pc, #220]	; (21a8 <STACK_SIZE+0x1a8>)
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    20ca:	3005      	adds	r0, #5
            received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 1];
    20cc:	7011      	strb	r1, [r2, #0]
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    20ce:	7899      	ldrb	r1, [r3, #2]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    20d0:	4c36      	ldr	r4, [pc, #216]	; (21ac <STACK_SIZE+0x1ac>)
            received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 2];
    20d2:	7051      	strb	r1, [r2, #1]
            received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 3];
    20d4:	78d9      	ldrb	r1, [r3, #3]
    20d6:	7091      	strb	r1, [r2, #2]
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    20d8:	791b      	ldrb	r3, [r3, #4]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    20da:	0029      	movs	r1, r5
            received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen + 4];
    20dc:	70d3      	strb	r3, [r2, #3]
            if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0])) {
    20de:	224e      	movs	r2, #78	; 0x4e
    20e0:	783b      	ldrb	r3, [r7, #0]
    20e2:	4691      	mov	r9, r2
    20e4:	4353      	muls	r3, r2
    20e6:	18f3      	adds	r3, r6, r3
    20e8:	785b      	ldrb	r3, [r3, #1]
    20ea:	310c      	adds	r1, #12
    20ec:	9300      	str	r3, [sp, #0]
    20ee:	686a      	ldr	r2, [r5, #4]
    20f0:	4643      	mov	r3, r8
    20f2:	47a0      	blx	r4
    20f4:	2800      	cmp	r0, #0
    20f6:	d000      	beq.n	20fa <STACK_SIZE+0xfa>
    20f8:	e08d      	b.n	2216 <STACK_SIZE+0x216>
    if (BankIndex < BANK_SIZE) {
    20fa:	783b      	ldrb	r3, [r7, #0]
    20fc:	2b13      	cmp	r3, #19
    20fe:	d900      	bls.n	2102 <STACK_SIZE+0x102>
    2100:	e6c2      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    2102:	464a      	mov	r2, r9
    2104:	435a      	muls	r2, r3
    2106:	54b0      	strb	r0, [r6, r2]
    2108:	e6be      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    210a:	4662      	mov	r2, ip
    210c:	7992      	ldrb	r2, [r2, #6]
    210e:	2aff      	cmp	r2, #255	; 0xff
    2110:	d100      	bne.n	2114 <STACK_SIZE+0x114>
    2112:	e101      	b.n	2318 <STACK_SIZE+0x318>
            MACRxPacket.flags.bits.sourcePrsnt = 1;
    2114:	2280      	movs	r2, #128	; 0x80
    2116:	7828      	ldrb	r0, [r5, #0]
    2118:	4252      	negs	r2, r2
    211a:	4302      	orrs	r2, r0
    211c:	702a      	strb	r2, [r5, #0]
            MACRxPacket.altSourceAddress = true;
    211e:	2201      	movs	r2, #1
    2120:	73ea      	strb	r2, [r5, #15]
            if (bIntraPAN == false) {
    2122:	464a      	mov	r2, r9
    2124:	2a00      	cmp	r2, #0
    2126:	d11a      	bne.n	215e <STACK_SIZE+0x15e>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2128:	324e      	adds	r2, #78	; 0x4e
    212a:	435a      	muls	r2, r3
    212c:	18b0      	adds	r0, r6, r2
    212e:	7a07      	ldrb	r7, [r0, #8]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2130:	7a40      	ldrb	r0, [r0, #9]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    2132:	390f      	subs	r1, #15
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    2134:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2136:	0010      	movs	r0, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2138:	320c      	adds	r2, #12
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    213a:	300a      	adds	r0, #10
    213c:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    213e:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    2140:	742f      	strb	r7, [r5, #16]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    2142:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    2144:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    2146:	60aa      	str	r2, [r5, #8]
    2148:	e6e8      	b.n	1f1c <MiMAC_ReceivedPacket+0xdc>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    214a:	2203      	movs	r2, #3
    214c:	782b      	ldrb	r3, [r5, #0]
    214e:	4313      	orrs	r3, r2
    2150:	702b      	strb	r3, [r5, #0]
            break;
    2152:	e6f8      	b.n	1f46 <MiMAC_ReceivedPacket+0x106>
            MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    2154:	2203      	movs	r2, #3
    2156:	782b      	ldrb	r3, [r5, #0]
    2158:	4393      	bics	r3, r2
    215a:	702b      	strb	r3, [r5, #0]
            break;
    215c:	e6f3      	b.n	1f46 <MiMAC_ReceivedPacket+0x106>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    215e:	224e      	movs	r2, #78	; 0x4e
    2160:	435a      	muls	r2, r3
    2162:	18b0      	adds	r0, r6, r2
    2164:	7907      	ldrb	r7, [r0, #4]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    2166:	7940      	ldrb	r0, [r0, #5]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    2168:	390d      	subs	r1, #13
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    216a:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    216c:	0010      	movs	r0, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    216e:	320a      	adds	r2, #10
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2170:	3008      	adds	r0, #8
    2172:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    2174:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    2176:	742f      	strb	r7, [r5, #16]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    2178:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    217a:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    217c:	60aa      	str	r2, [r5, #8]
    217e:	e6cd      	b.n	1f1c <MiMAC_ReceivedPacket+0xdc>
    2180:	20000910 	.word	0x20000910
    2184:	200000a6 	.word	0x200000a6
    2188:	20000000 	.word	0x20000000
    218c:	200002dc 	.word	0x200002dc
    2190:	2000097c 	.word	0x2000097c
    2194:	20000295 	.word	0x20000295
    2198:	200002c8 	.word	0x200002c8
    219c:	000026f5 	.word	0x000026f5
    21a0:	20000998 	.word	0x20000998
    21a4:	20000918 	.word	0x20000918
    21a8:	20000908 	.word	0x20000908
    21ac:	00001409 	.word	0x00001409
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    21b0:	224e      	movs	r2, #78	; 0x4e
    21b2:	4353      	muls	r3, r2
    21b4:	18f2      	adds	r2, r6, r3
    21b6:	7910      	ldrb	r0, [r2, #4]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    21b8:	7952      	ldrb	r2, [r2, #5]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    21ba:	3913      	subs	r1, #19
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    21bc:	746a      	strb	r2, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    21be:	001a      	movs	r2, r3
    21c0:	3208      	adds	r2, #8
    21c2:	18b2      	adds	r2, r6, r2
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    21c4:	3310      	adds	r3, #16
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    21c6:	606a      	str	r2, [r5, #4]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    21c8:	18f2      	adds	r2, r6, r3
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    21ca:	7428      	strb	r0, [r5, #16]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    21cc:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    21ce:	60aa      	str	r2, [r5, #8]
    21d0:	e735      	b.n	203e <STACK_SIZE+0x3e>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    21d2:	4660      	mov	r0, ip
    21d4:	7b40      	ldrb	r0, [r0, #13]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    21d6:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    21d8:	7428      	strb	r0, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    21da:	4660      	mov	r0, ip
    21dc:	7b80      	ldrb	r0, [r0, #14]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    21de:	3212      	adds	r2, #18
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    21e0:	7468      	strb	r0, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    21e2:	9803      	ldr	r0, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    21e4:	3915      	subs	r1, #21
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    21e6:	300f      	adds	r0, #15
    21e8:	1830      	adds	r0, r6, r0
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    21ea:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    21ec:	6068      	str	r0, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    21ee:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    21f0:	60aa      	str	r2, [r5, #8]
    21f2:	e693      	b.n	1f1c <MiMAC_ReceivedPacket+0xdc>
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    21f4:	4663      	mov	r3, ip
    21f6:	7b9b      	ldrb	r3, [r3, #14]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    21f8:	9a03      	ldr	r2, [sp, #12]
                MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    21fa:	742b      	strb	r3, [r5, #16]
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    21fc:	4663      	mov	r3, ip
    21fe:	7bdb      	ldrb	r3, [r3, #15]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2200:	3218      	adds	r2, #24
                MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    2202:	746b      	strb	r3, [r5, #17]
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2204:	9b03      	ldr	r3, [sp, #12]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    2206:	391b      	subs	r1, #27
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    2208:	3310      	adds	r3, #16
    220a:	18f3      	adds	r3, r6, r3
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    220c:	18b2      	adds	r2, r6, r2
                MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    220e:	606b      	str	r3, [r5, #4]
                MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    2210:	7329      	strb	r1, [r5, #12]
                MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    2212:	60aa      	str	r2, [r5, #8]
    2214:	e713      	b.n	203e <STACK_SIZE+0x3e>
            MACRxPacket.flags.bits.secEn = 1;
    2216:	2208      	movs	r2, #8
            MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    2218:	68ab      	ldr	r3, [r5, #8]
    221a:	783c      	ldrb	r4, [r7, #0]
    221c:	3305      	adds	r3, #5
    221e:	60ab      	str	r3, [r5, #8]
            MACRxPacket.flags.bits.secEn = 1;
    2220:	782b      	ldrb	r3, [r5, #0]
    2222:	4313      	orrs	r3, r2
    2224:	702b      	strb	r3, [r5, #0]
        switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    2226:	464b      	mov	r3, r9
    2228:	4363      	muls	r3, r4
    222a:	18f3      	adds	r3, r6, r3
    222c:	785a      	ldrb	r2, [r3, #1]
    222e:	2307      	movs	r3, #7
    2230:	4013      	ands	r3, r2
    2232:	2b01      	cmp	r3, #1
    2234:	d08e      	beq.n	2154 <STACK_SIZE+0x154>
    2236:	2b00      	cmp	r3, #0
    2238:	d087      	beq.n	214a <STACK_SIZE+0x14a>
    223a:	2b03      	cmp	r3, #3
    223c:	d100      	bne.n	2240 <STACK_SIZE+0x240>
    223e:	e67c      	b.n	1f3a <MiMAC_ReceivedPacket+0xfa>
    if (BankIndex < BANK_SIZE) {
    2240:	2c13      	cmp	r4, #19
    2242:	d900      	bls.n	2246 <STACK_SIZE+0x246>
    2244:	e620      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
        RxBuffer[BankIndex].PayloadLen = 0;
    2246:	234e      	movs	r3, #78	; 0x4e
    2248:	435c      	muls	r4, r3
    224a:	2300      	movs	r3, #0
    224c:	5533      	strb	r3, [r6, r4]
    224e:	e61b      	b.n	1e88 <MiMAC_ReceivedPacket+0x48>
                    IncomingFrameCounter[i].Val = FrameCounter.Val;
    2250:	4641      	mov	r1, r8
    2252:	5099      	str	r1, [r3, r2]
    2254:	e731      	b.n	20ba <STACK_SIZE+0xba>
                if ((ConnectionTable[i].status.bits.isValid) && isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress)) {
    2256:	6869      	ldr	r1, [r5, #4]
    2258:	0020      	movs	r0, r4
    225a:	4b37      	ldr	r3, [pc, #220]	; (2338 <STACK_SIZE+0x338>)
    225c:	4798      	blx	r3
    225e:	2800      	cmp	r0, #0
    2260:	d100      	bne.n	2264 <STACK_SIZE+0x264>
    2262:	e700      	b.n	2066 <STACK_SIZE+0x66>
    2264:	2300      	movs	r3, #0
    2266:	e6a3      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    2268:	0020      	movs	r0, r4
    226a:	6869      	ldr	r1, [r5, #4]
    226c:	301e      	adds	r0, #30
    226e:	4b32      	ldr	r3, [pc, #200]	; (2338 <STACK_SIZE+0x338>)
    2270:	4798      	blx	r3
    2272:	2800      	cmp	r0, #0
    2274:	d100      	bne.n	2278 <STACK_SIZE+0x278>
    2276:	e702      	b.n	207e <STACK_SIZE+0x7e>
    2278:	2303      	movs	r3, #3
    227a:	e699      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    227c:	0020      	movs	r0, r4
    227e:	6869      	ldr	r1, [r5, #4]
    2280:	3014      	adds	r0, #20
    2282:	4b2d      	ldr	r3, [pc, #180]	; (2338 <STACK_SIZE+0x338>)
    2284:	4798      	blx	r3
    2286:	2800      	cmp	r0, #0
    2288:	d100      	bne.n	228c <STACK_SIZE+0x28c>
    228a:	e6f3      	b.n	2074 <STACK_SIZE+0x74>
    228c:	2302      	movs	r3, #2
    228e:	e68f      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    2290:	0020      	movs	r0, r4
    2292:	6869      	ldr	r1, [r5, #4]
    2294:	305a      	adds	r0, #90	; 0x5a
    2296:	4b28      	ldr	r3, [pc, #160]	; (2338 <STACK_SIZE+0x338>)
    2298:	4798      	blx	r3
    229a:	2800      	cmp	r0, #0
    229c:	d100      	bne.n	22a0 <STACK_SIZE+0x2a0>
    229e:	e70c      	b.n	20ba <STACK_SIZE+0xba>
    22a0:	2309      	movs	r3, #9
    22a2:	e685      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    22a4:	0020      	movs	r0, r4
    22a6:	6869      	ldr	r1, [r5, #4]
    22a8:	303c      	adds	r0, #60	; 0x3c
    22aa:	4b23      	ldr	r3, [pc, #140]	; (2338 <STACK_SIZE+0x338>)
    22ac:	4798      	blx	r3
    22ae:	2800      	cmp	r0, #0
    22b0:	d100      	bne.n	22b4 <STACK_SIZE+0x2b4>
    22b2:	e6f3      	b.n	209c <STACK_SIZE+0x9c>
    22b4:	2306      	movs	r3, #6
    22b6:	e67b      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    22b8:	0020      	movs	r0, r4
    22ba:	6869      	ldr	r1, [r5, #4]
    22bc:	3032      	adds	r0, #50	; 0x32
    22be:	4b1e      	ldr	r3, [pc, #120]	; (2338 <STACK_SIZE+0x338>)
    22c0:	4798      	blx	r3
    22c2:	2800      	cmp	r0, #0
    22c4:	d100      	bne.n	22c8 <STACK_SIZE+0x2c8>
    22c6:	e6e4      	b.n	2092 <STACK_SIZE+0x92>
    22c8:	2305      	movs	r3, #5
    22ca:	e671      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    22cc:	0020      	movs	r0, r4
    22ce:	6869      	ldr	r1, [r5, #4]
    22d0:	3028      	adds	r0, #40	; 0x28
    22d2:	4b19      	ldr	r3, [pc, #100]	; (2338 <STACK_SIZE+0x338>)
    22d4:	4798      	blx	r3
    22d6:	2800      	cmp	r0, #0
    22d8:	d100      	bne.n	22dc <STACK_SIZE+0x2dc>
    22da:	e6d5      	b.n	2088 <STACK_SIZE+0x88>
    22dc:	2304      	movs	r3, #4
    22de:	e667      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    22e0:	0020      	movs	r0, r4
    22e2:	6869      	ldr	r1, [r5, #4]
    22e4:	3046      	adds	r0, #70	; 0x46
    22e6:	4b14      	ldr	r3, [pc, #80]	; (2338 <STACK_SIZE+0x338>)
    22e8:	4798      	blx	r3
    22ea:	2800      	cmp	r0, #0
    22ec:	d100      	bne.n	22f0 <STACK_SIZE+0x2f0>
    22ee:	e6da      	b.n	20a6 <STACK_SIZE+0xa6>
    22f0:	2307      	movs	r3, #7
    22f2:	e65d      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
    22f4:	0020      	movs	r0, r4
    22f6:	6869      	ldr	r1, [r5, #4]
    22f8:	3050      	adds	r0, #80	; 0x50
    22fa:	4b0f      	ldr	r3, [pc, #60]	; (2338 <STACK_SIZE+0x338>)
    22fc:	4798      	blx	r3
    22fe:	2800      	cmp	r0, #0
    2300:	d100      	bne.n	2304 <STACK_SIZE+0x304>
    2302:	e6d5      	b.n	20b0 <STACK_SIZE+0xb0>
    2304:	2308      	movs	r3, #8
    2306:	e653      	b.n	1fb0 <MiMAC_ReceivedPacket+0x170>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2308:	4662      	mov	r2, ip
    230a:	79d2      	ldrb	r2, [r2, #7]
    230c:	2aff      	cmp	r2, #255	; 0xff
    230e:	d000      	beq.n	2312 <STACK_SIZE+0x312>
    2310:	e626      	b.n	1f60 <MiMAC_ReceivedPacket+0x120>
                MACRxPacket.flags.bits.broadcast = 1;
    2312:	3afb      	subs	r2, #251	; 0xfb
    2314:	702a      	strb	r2, [r5, #0]
    2316:	e623      	b.n	1f60 <MiMAC_ReceivedPacket+0x120>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2318:	4662      	mov	r2, ip
    231a:	79d2      	ldrb	r2, [r2, #7]
    231c:	2aff      	cmp	r2, #255	; 0xff
    231e:	d000      	beq.n	2322 <STACK_SIZE+0x322>
    2320:	e6f8      	b.n	2114 <STACK_SIZE+0x114>
                MACRxPacket.flags.bits.broadcast = 1;
    2322:	3afb      	subs	r2, #251	; 0xfb
    2324:	702a      	strb	r2, [r5, #0]
    2326:	e6f5      	b.n	2114 <STACK_SIZE+0x114>
            if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF) {
    2328:	4662      	mov	r2, ip
    232a:	79d2      	ldrb	r2, [r2, #7]
    232c:	2aff      	cmp	r2, #255	; 0xff
    232e:	d000      	beq.n	2332 <STACK_SIZE+0x332>
    2330:	e66c      	b.n	200c <STACK_SIZE+0xc>
                MACRxPacket.flags.bits.broadcast = 1;
    2332:	3afb      	subs	r2, #251	; 0xfb
    2334:	702a      	strb	r2, [r5, #0]
    2336:	e669      	b.n	200c <STACK_SIZE+0xc>
    2338:	000026f5 	.word	0x000026f5

0000233c <PHY_PacketReceieved>:

/*************************************************************************/ /**
*****************************************************************************/
// Handle Packet Received // ISR calls this routine
void PHY_PacketReceieved(void)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	46d6      	mov	lr, sl
    2340:	464f      	mov	r7, r9
    2342:	4646      	mov	r6, r8
    2344:	b5c0      	push	{r6, r7, lr}
    if (PHY_STATE_SLEEP == phyState) {
    2346:	4c50      	ldr	r4, [pc, #320]	; (2488 <PHY_PacketReceieved+0x14c>)
{
    2348:	b082      	sub	sp, #8
    if (PHY_STATE_SLEEP == phyState) {
    234a:	7823      	ldrb	r3, [r4, #0]
    234c:	2b02      	cmp	r3, #2
    234e:	d009      	beq.n	2364 <PHY_PacketReceieved+0x28>
    value = trx_reg_read(reg);
    2350:	200f      	movs	r0, #15
    2352:	4d4e      	ldr	r5, [pc, #312]	; (248c <PHY_PacketReceieved+0x150>)
    2354:	47a8      	blx	r5
        return;
    }
    if (phyReadRegister(RG_IRQ_STATUS) & (1 << TRX_END)) {
    2356:	0703      	lsls	r3, r0, #28
    2358:	d504      	bpl.n	2364 <PHY_PacketReceieved+0x28>
        if (PHY_STATE_IDLE == phyState) {
    235a:	7823      	ldrb	r3, [r4, #0]
    235c:	2b01      	cmp	r3, #1
    235e:	d032      	beq.n	23c6 <PHY_PacketReceieved+0x8a>
            }
            Received_LQI_Val = phyRxBuffer[i - 2];

            phyWaitState(TRX_STATUS_RX_AACK_ON);
        }
        else if (PHY_STATE_TX_WAIT_END == phyState) {
    2360:	2b03      	cmp	r3, #3
    2362:	d005      	beq.n	2370 <PHY_PacketReceieved+0x34>

            phySetRxState();
            phyState = PHY_STATE_IDLE;
        }
    }
    2364:	b002      	add	sp, #8
    2366:	bc1c      	pop	{r2, r3, r4}
    2368:	4690      	mov	r8, r2
    236a:	4699      	mov	r9, r3
    236c:	46a2      	mov	sl, r4
    236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    value = trx_reg_read(reg);
    2370:	2002      	movs	r0, #2
    2372:	47a8      	blx	r5
            trx_status.bits.TX_FAIL = 0;
    2374:	2104      	movs	r1, #4
    2376:	4b46      	ldr	r3, [pc, #280]	; (2490 <PHY_PacketReceieved+0x154>)
                = (phyReadRegister(RG_TRX_STATE) >> TRAC_STATUS) & 7;
    2378:	0940      	lsrs	r0, r0, #5
            trx_status.bits.TX_FAIL = 0;
    237a:	781a      	ldrb	r2, [r3, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    237c:	b2c0      	uxtb	r0, r0
            trx_status.bits.TX_FAIL = 0;
    237e:	438a      	bics	r2, r1
    2380:	701a      	strb	r2, [r3, #0]
            trx_status.bits.TX_PENDING_ACK = 0;
    2382:	781a      	ldrb	r2, [r3, #0]
    2384:	3902      	subs	r1, #2
    2386:	438a      	bics	r2, r1
    2388:	701a      	strb	r2, [r3, #0]
            if (TRAC_STATUS_SUCCESS == status) {
    238a:	2805      	cmp	r0, #5
    238c:	d063      	beq.n	2456 <PHY_PacketReceieved+0x11a>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    238e:	271f      	movs	r7, #31
    2390:	4e40      	ldr	r6, [pc, #256]	; (2494 <PHY_PacketReceieved+0x158>)
    trx_reg_write(reg, value);
    2392:	2103      	movs	r1, #3
    2394:	2002      	movs	r0, #2
    2396:	47b0      	blx	r6
    value = trx_reg_read(reg);
    2398:	2001      	movs	r0, #1
    239a:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    239c:	4038      	ands	r0, r7
    239e:	2808      	cmp	r0, #8
    23a0:	d1f7      	bne.n	2392 <PHY_PacketReceieved+0x56>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    23a2:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    23a4:	2108      	movs	r1, #8
    23a6:	2002      	movs	r0, #2
    23a8:	47b0      	blx	r6
    value = trx_reg_read(reg);
    23aa:	2001      	movs	r0, #1
    23ac:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    23ae:	4038      	ands	r0, r7
    23b0:	2808      	cmp	r0, #8
    23b2:	d1f7      	bne.n	23a4 <PHY_PacketReceieved+0x68>
    value = trx_reg_read(reg);
    23b4:	3007      	adds	r0, #7
    23b6:	47a8      	blx	r5
    if (phyRxState) {
    23b8:	4b37      	ldr	r3, [pc, #220]	; (2498 <PHY_PacketReceieved+0x15c>)
    23ba:	781b      	ldrb	r3, [r3, #0]
    23bc:	2b00      	cmp	r3, #0
    23be:	d14f      	bne.n	2460 <PHY_PacketReceieved+0x124>
            phyState = PHY_STATE_IDLE;
    23c0:	2301      	movs	r3, #1
    23c2:	7023      	strb	r3, [r4, #0]
    23c4:	e7ce      	b.n	2364 <PHY_PacketReceieved+0x28>
    23c6:	4b35      	ldr	r3, [pc, #212]	; (249c <PHY_PacketReceieved+0x160>)
        if (PHY_STATE_IDLE == phyState) {
    23c8:	2600      	movs	r6, #0
    23ca:	4699      	mov	r9, r3
    23cc:	001a      	movs	r2, r3
                if (RxBuffer[i].PayloadLen == 0) {
    23ce:	7813      	ldrb	r3, [r2, #0]
    23d0:	2b00      	cmp	r3, #0
    23d2:	d03e      	beq.n	2452 <PHY_PacketReceieved+0x116>
    23d4:	3601      	adds	r6, #1
    23d6:	324e      	adds	r2, #78	; 0x4e
            for (i = 0; i < BANK_SIZE; i++) {
    23d8:	2e14      	cmp	r6, #20
    23da:	d1f8      	bne.n	23ce <PHY_PacketReceieved+0x92>
    23dc:	2314      	movs	r3, #20
    23de:	4698      	mov	r8, r3
    23e0:	36eb      	adds	r6, #235	; 0xeb
    value = trx_reg_read(reg);
    23e2:	2007      	movs	r0, #7
    23e4:	47a8      	blx	r5
            Received_RSSI_Val = PHY_RSSI_BASE_VAL + (uint8_t)phyReadRegister(RG_PHY_ED_LEVEL);
    23e6:	4b2e      	ldr	r3, [pc, #184]	; (24a0 <PHY_PacketReceieved+0x164>)
    23e8:	385b      	subs	r0, #91	; 0x5b
    23ea:	7018      	strb	r0, [r3, #0]
            trx_frame_read(&size, 1);
    23ec:	466b      	mov	r3, sp
    23ee:	1ddf      	adds	r7, r3, #7
    23f0:	4b2c      	ldr	r3, [pc, #176]	; (24a4 <PHY_PacketReceieved+0x168>)
    23f2:	2101      	movs	r1, #1
    23f4:	0038      	movs	r0, r7
    23f6:	469a      	mov	sl, r3
    23f8:	4798      	blx	r3
            trx_frame_read(phyRxBuffer, size + 2 + 3); // +3 is ED, LQI and RX_STATUS bytes
    23fa:	7839      	ldrb	r1, [r7, #0]
    23fc:	4c2a      	ldr	r4, [pc, #168]	; (24a8 <PHY_PacketReceieved+0x16c>)
    23fe:	3105      	adds	r1, #5
    2400:	0020      	movs	r0, r4
    2402:	b2c9      	uxtb	r1, r1
    2404:	47d0      	blx	sl
            RxBuffer[RxBank].PayloadLen = size + 2;
    2406:	234e      	movs	r3, #78	; 0x4e
    2408:	435e      	muls	r6, r3
    240a:	464b      	mov	r3, r9
    240c:	7838      	ldrb	r0, [r7, #0]
    240e:	3002      	adds	r0, #2
    2410:	b2c2      	uxtb	r2, r0
    2412:	559a      	strb	r2, [r3, r6]
            if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE) {
    2414:	2a4c      	cmp	r2, #76	; 0x4c
    2416:	d90b      	bls.n	2430 <PHY_PacketReceieved+0xf4>
    2418:	4643      	mov	r3, r8
    241a:	3b02      	subs	r3, #2
            Received_LQI_Val = phyRxBuffer[i - 2];
    241c:	5ce2      	ldrb	r2, [r4, r3]
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    241e:	241f      	movs	r4, #31
            Received_LQI_Val = phyRxBuffer[i - 2];
    2420:	4b22      	ldr	r3, [pc, #136]	; (24ac <PHY_PacketReceieved+0x170>)
    2422:	701a      	strb	r2, [r3, #0]
    value = trx_reg_read(reg);
    2424:	2001      	movs	r0, #1
    2426:	47a8      	blx	r5
    while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK)) {
    2428:	4020      	ands	r0, r4
    242a:	2816      	cmp	r0, #22
    242c:	d1fa      	bne.n	2424 <PHY_PacketReceieved+0xe8>
    242e:	e799      	b.n	2364 <PHY_PacketReceieved+0x28>
                trx_status.bits.RX_BUFFERED = 1;
    2430:	2120      	movs	r1, #32
    2432:	4a17      	ldr	r2, [pc, #92]	; (2490 <PHY_PacketReceieved+0x154>)
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    2434:	444e      	add	r6, r9
                trx_status.bits.RX_BUFFERED = 1;
    2436:	7813      	ldrb	r3, [r2, #0]
    2438:	430b      	orrs	r3, r1
    243a:	7013      	strb	r3, [r2, #0]
                for (i = 1; i <= size + 2; i++) {
    243c:	2201      	movs	r2, #1
    243e:	2301      	movs	r3, #1
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    2440:	5ca1      	ldrb	r1, [r4, r2]
                for (i = 1; i <= size + 2; i++) {
    2442:	3301      	adds	r3, #1
    2444:	b2db      	uxtb	r3, r3
                    RxBuffer[RxBank].Payload[i - 1] = phyRxBuffer[i];
    2446:	54b1      	strb	r1, [r6, r2]
                for (i = 1; i <= size + 2; i++) {
    2448:	001a      	movs	r2, r3
    244a:	4283      	cmp	r3, r0
    244c:	ddf8      	ble.n	2440 <PHY_PacketReceieved+0x104>
    244e:	3b02      	subs	r3, #2
    2450:	e7e4      	b.n	241c <PHY_PacketReceieved+0xe0>
                if (RxBuffer[i].PayloadLen == 0) {
    2452:	46b0      	mov	r8, r6
    2454:	e7c5      	b.n	23e2 <PHY_PacketReceieved+0xa6>
                trx_status.bits.TX_FAIL = 1;
    2456:	2104      	movs	r1, #4
    2458:	781a      	ldrb	r2, [r3, #0]
    245a:	430a      	orrs	r2, r1
    245c:	701a      	strb	r2, [r3, #0]
    245e:	e796      	b.n	238e <PHY_PacketReceieved+0x52>
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    2460:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    2462:	2103      	movs	r1, #3
    2464:	2002      	movs	r0, #2
    2466:	47b0      	blx	r6
    value = trx_reg_read(reg);
    2468:	2001      	movs	r0, #1
    246a:	47a8      	blx	r5
    } while (TRX_STATUS_TRX_OFF != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    246c:	4038      	ands	r0, r7
    246e:	2808      	cmp	r0, #8
    2470:	d1f7      	bne.n	2462 <PHY_PacketReceieved+0x126>
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    2472:	271f      	movs	r7, #31
    trx_reg_write(reg, value);
    2474:	2116      	movs	r1, #22
    2476:	2002      	movs	r0, #2
    2478:	47b0      	blx	r6
    value = trx_reg_read(reg);
    247a:	2001      	movs	r0, #1
    247c:	47a8      	blx	r5
    } while (state != (phyReadRegister(RG_TRX_STATUS) & TRX_STATUS_MASK));
    247e:	4038      	ands	r0, r7
    2480:	2816      	cmp	r0, #22
    2482:	d1f7      	bne.n	2474 <PHY_PacketReceieved+0x138>
    2484:	e79c      	b.n	23c0 <PHY_PacketReceieved+0x84>
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	20000129 	.word	0x20000129
    248c:	000054b9 	.word	0x000054b9
    2490:	20000910 	.word	0x20000910
    2494:	000055b5 	.word	0x000055b5
    2498:	20000128 	.word	0x20000128
    249c:	200002dc 	.word	0x200002dc
    24a0:	200002c8 	.word	0x200002c8
    24a4:	000056c1 	.word	0x000056c1
    24a8:	200000a8 	.word	0x200000a8
    24ac:	20000295 	.word	0x20000295

000024b0 <Total_Connections>:
        if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
        {
            count++;
        }
    #else
        if (ConnectionTable[i].status.bits.isValid)
    24b0:	4b13      	ldr	r3, [pc, #76]	; (2500 <Total_Connections+0x50>)
    24b2:	7a58      	ldrb	r0, [r3, #9]
    24b4:	7cda      	ldrb	r2, [r3, #19]
    24b6:	09c0      	lsrs	r0, r0, #7
    24b8:	09d2      	lsrs	r2, r2, #7
    24ba:	1880      	adds	r0, r0, r2
    24bc:	7f5a      	ldrb	r2, [r3, #29]
    24be:	09d2      	lsrs	r2, r2, #7
    24c0:	1880      	adds	r0, r0, r2
    24c2:	2227      	movs	r2, #39	; 0x27
    24c4:	5c9a      	ldrb	r2, [r3, r2]
    24c6:	09d2      	lsrs	r2, r2, #7
    24c8:	1880      	adds	r0, r0, r2
    24ca:	2231      	movs	r2, #49	; 0x31
    24cc:	5c9a      	ldrb	r2, [r3, r2]
    24ce:	09d2      	lsrs	r2, r2, #7
    24d0:	1880      	adds	r0, r0, r2
    24d2:	223b      	movs	r2, #59	; 0x3b
    24d4:	5c9a      	ldrb	r2, [r3, r2]
    24d6:	09d2      	lsrs	r2, r2, #7
    24d8:	1880      	adds	r0, r0, r2
    24da:	2245      	movs	r2, #69	; 0x45
    24dc:	5c9a      	ldrb	r2, [r3, r2]
    24de:	09d2      	lsrs	r2, r2, #7
    24e0:	1880      	adds	r0, r0, r2
    24e2:	224f      	movs	r2, #79	; 0x4f
    24e4:	5c9a      	ldrb	r2, [r3, r2]
    24e6:	09d2      	lsrs	r2, r2, #7
    24e8:	1880      	adds	r0, r0, r2
    24ea:	2259      	movs	r2, #89	; 0x59
    24ec:	5c9a      	ldrb	r2, [r3, r2]
    24ee:	09d2      	lsrs	r2, r2, #7
    24f0:	1880      	adds	r0, r0, r2
    24f2:	2263      	movs	r2, #99	; 0x63
    24f4:	5c9b      	ldrb	r3, [r3, r2]
        {
            count++;
        }
    #endif      
    }
    return count;
    24f6:	09db      	lsrs	r3, r3, #7
    24f8:	18c0      	adds	r0, r0, r3
    24fa:	b2c0      	uxtb	r0, r0
}
    24fc:	4770      	bx	lr
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	20000918 	.word	0x20000918

00002504 <MiApp_ProtocolInit>:
	#if defined(ENABLE_NETWORK_FREEZER)
	NVMInit();
	#endif
	
	//clear all status bits
	P2PStatus.Val = 0;
    2504:	2200      	movs	r2, #0
{
    2506:	b570      	push	{r4, r5, r6, lr}
	P2PStatus.Val = 0;
    2508:	4b55      	ldr	r3, [pc, #340]	; (2660 <MiApp_ProtocolInit+0x15c>)
{
    250a:	0004      	movs	r4, r0
	P2PStatus.Val = 0;
    250c:	701a      	strb	r2, [r3, #0]
	
	#if defined (USE_MAC_ADDRESS)
	// Each SAM MCU has a unique address stored in Flash Memory
	uint32_t val_1, val_2, val_3, val_4;
	uint32_t *ptr1 = (uint32_t *)0x0080A00C;
	val_1 = *ptr1;
    250e:	4b55      	ldr	r3, [pc, #340]	; (2664 <MiApp_ProtocolInit+0x160>)
	val_2 = *ptr;
	ptr++;
	val_3 = *ptr;
	ptr++;
	val_4 = *ptr;
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    2510:	4d55      	ldr	r5, [pc, #340]	; (2668 <MiApp_ProtocolInit+0x164>)
	val_1 = *ptr1;
    2512:	6818      	ldr	r0, [r3, #0]
	val_2 = *ptr;
    2514:	4b55      	ldr	r3, [pc, #340]	; (266c <MiApp_ProtocolInit+0x168>)
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    2516:	0a06      	lsrs	r6, r0, #8
	val_2 = *ptr;
    2518:	6819      	ldr	r1, [r3, #0]
	val_3 = *ptr;
    251a:	4b55      	ldr	r3, [pc, #340]	; (2670 <MiApp_ProtocolInit+0x16c>)
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    251c:	1836      	adds	r6, r6, r0
	val_3 = *ptr;
    251e:	681a      	ldr	r2, [r3, #0]
	val_4 = *ptr;
    2520:	4b54      	ldr	r3, [pc, #336]	; (2674 <MiApp_ProtocolInit+0x170>)
{
    2522:	b084      	sub	sp, #16
	val_4 = *ptr;
    2524:	681b      	ldr	r3, [r3, #0]
	myLongAddress[0] = (val_1 & 0xFF) + ((val_1>>8) & 0xFF);
    2526:	702e      	strb	r6, [r5, #0]
	myLongAddress[1] = ((val_1>>16) & 0xFF) + ((val_1)>>24 & 0xFF);
    2528:	0c06      	lsrs	r6, r0, #16
    252a:	0e00      	lsrs	r0, r0, #24
    252c:	1830      	adds	r0, r6, r0
    252e:	7068      	strb	r0, [r5, #1]
	myLongAddress[2] = (val_2 & 0xFF) + ((val_2>>8) & 0xFF);
    2530:	0a08      	lsrs	r0, r1, #8
    2532:	1840      	adds	r0, r0, r1
    2534:	70a8      	strb	r0, [r5, #2]
	myLongAddress[3] = ((val_2>>16) & 0xFF) + ((val_2)>>24 & 0xFF);
    2536:	0c08      	lsrs	r0, r1, #16
    2538:	0e09      	lsrs	r1, r1, #24
    253a:	1841      	adds	r1, r0, r1
    253c:	70e9      	strb	r1, [r5, #3]
	myLongAddress[4] = (val_3 & 0xFF) + ((val_3>>8) & 0xFF);
    253e:	0a11      	lsrs	r1, r2, #8
    2540:	1889      	adds	r1, r1, r2
    2542:	7129      	strb	r1, [r5, #4]
	myLongAddress[5] = ((val_3>>16) & 0xFF) + ((val_3)>>24 & 0xFF);
    2544:	0c11      	lsrs	r1, r2, #16
    2546:	0e12      	lsrs	r2, r2, #24
    2548:	188a      	adds	r2, r1, r2
    254a:	716a      	strb	r2, [r5, #5]
	myLongAddress[6] = (val_4 & 0xFF) + ((val_4>>8) & 0xFF);
    254c:	0a1a      	lsrs	r2, r3, #8
    254e:	18d2      	adds	r2, r2, r3
    2550:	71aa      	strb	r2, [r5, #6]
	myLongAddress[7] = ((val_4>>16) & 0xFF) + ((val_4)>>24 & 0xFF);
    2552:	0c1a      	lsrs	r2, r3, #16
    2554:	0e1b      	lsrs	r3, r3, #24
    2556:	18d3      	adds	r3, r2, r3
    2558:	71eb      	strb	r3, [r5, #7]
	myLongAddress[6] = EUI_6;
	myLongAddress[7] = EUI_7;
	#endif

	
	if (!bNetworkFreezer)
    255a:	2c00      	cmp	r4, #0
    255c:	d142      	bne.n	25e4 <MiApp_ProtocolInit+0xe0>
	{
		for(i = 0; i < CONNECTION_SIZE; i++)
		{
			ConnectionTable[i].status.Val = 0;
    255e:	2227      	movs	r2, #39	; 0x27
    2560:	4b45      	ldr	r3, [pc, #276]	; (2678 <MiApp_ProtocolInit+0x174>)
    2562:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
			ConnectionTable[i].Address[1] = 0x00;
			ConnectionTable[i].Address[2] = 0x00;
    2564:	3a07      	subs	r2, #7
			ConnectionTable[i].Address[0] = 0x00;
    2566:	779c      	strb	r4, [r3, #30]
			ConnectionTable[i].Address[1] = 0x00;
    2568:	77dc      	strb	r4, [r3, #31]
			ConnectionTable[i].Address[2] = 0x00;
    256a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    256c:	3211      	adds	r2, #17
    256e:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    2570:	3a09      	subs	r2, #9
    2572:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    2574:	3201      	adds	r2, #1
    2576:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    2578:	3201      	adds	r2, #1
    257a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    257c:	3211      	adds	r2, #17
    257e:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    2580:	3a09      	subs	r2, #9
    2582:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    2584:	3201      	adds	r2, #1
    2586:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    2588:	3201      	adds	r2, #1
    258a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    258c:	3211      	adds	r2, #17
    258e:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    2590:	3a09      	subs	r2, #9
    2592:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    2594:	3201      	adds	r2, #1
    2596:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    2598:	3201      	adds	r2, #1
    259a:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    259c:	3211      	adds	r2, #17
    259e:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    25a0:	3a09      	subs	r2, #9
    25a2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    25a4:	3201      	adds	r2, #1
    25a6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    25a8:	3201      	adds	r2, #1
			ConnectionTable[i].status.Val = 0;
    25aa:	725c      	strb	r4, [r3, #9]
			ConnectionTable[i].Address[0] = 0x00;
    25ac:	701c      	strb	r4, [r3, #0]
			ConnectionTable[i].Address[1] = 0x00;
    25ae:	705c      	strb	r4, [r3, #1]
			ConnectionTable[i].Address[2] = 0x00;
    25b0:	709c      	strb	r4, [r3, #2]
			ConnectionTable[i].status.Val = 0;
    25b2:	74dc      	strb	r4, [r3, #19]
			ConnectionTable[i].Address[0] = 0x00;
    25b4:	729c      	strb	r4, [r3, #10]
			ConnectionTable[i].Address[1] = 0x00;
    25b6:	72dc      	strb	r4, [r3, #11]
			ConnectionTable[i].Address[2] = 0x00;
    25b8:	731c      	strb	r4, [r3, #12]
			ConnectionTable[i].status.Val = 0;
    25ba:	775c      	strb	r4, [r3, #29]
			ConnectionTable[i].Address[0] = 0x00;
    25bc:	751c      	strb	r4, [r3, #20]
			ConnectionTable[i].Address[1] = 0x00;
    25be:	755c      	strb	r4, [r3, #21]
			ConnectionTable[i].Address[2] = 0x00;
    25c0:	759c      	strb	r4, [r3, #22]
    25c2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    25c4:	3211      	adds	r2, #17
    25c6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    25c8:	3a09      	subs	r2, #9
    25ca:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    25cc:	3201      	adds	r2, #1
    25ce:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    25d0:	3201      	adds	r2, #1
    25d2:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].status.Val = 0;
    25d4:	3211      	adds	r2, #17
    25d6:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[0] = 0x00;
    25d8:	3a09      	subs	r2, #9
    25da:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[1] = 0x00;
    25dc:	3201      	adds	r2, #1
    25de:	549c      	strb	r4, [r3, r2]
			ConnectionTable[i].Address[2] = 0x00;
    25e0:	3201      	adds	r2, #1
    25e2:	549c      	strb	r4, [r3, r2]
			permanent_connections[i] = 0x00;
			#endif
		}
	}
	
	TxData = 0;
    25e4:	2200      	movs	r2, #0
    25e6:	4b25      	ldr	r3, [pc, #148]	; (267c <MiApp_ProtocolInit+0x178>)
    25e8:	2100      	movs	r1, #0
    25ea:	701a      	strb	r2, [r3, #0]
    25ec:	4824      	ldr	r0, [pc, #144]	; (2680 <MiApp_ProtocolInit+0x17c>)
    25ee:	3228      	adds	r2, #40	; 0x28
    25f0:	4b24      	ldr	r3, [pc, #144]	; (2684 <MiApp_ProtocolInit+0x180>)
    25f2:	4798      	blx	r3
	myPANID.Val = MY_PAN_ID;
	#endif

	
	initValue.PAddress = myLongAddress;
	initValue.actionFlags.bits.CCAEnable = 1;
    25f4:	2102      	movs	r1, #2
	myPANID.Val = MY_PAN_ID;
    25f6:	4e24      	ldr	r6, [pc, #144]	; (2688 <MiApp_ProtocolInit+0x184>)
    25f8:	4b24      	ldr	r3, [pc, #144]	; (268c <MiApp_ProtocolInit+0x188>)
	initValue.PAddress = myLongAddress;
    25fa:	aa02      	add	r2, sp, #8
	myPANID.Val = MY_PAN_ID;
    25fc:	8033      	strh	r3, [r6, #0]
	initValue.actionFlags.bits.CCAEnable = 1;
    25fe:	7813      	ldrb	r3, [r2, #0]
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    2600:	2001      	movs	r0, #1
	initValue.actionFlags.bits.CCAEnable = 1;
    2602:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    2604:	2187      	movs	r1, #135	; 0x87
    2606:	400b      	ands	r3, r1
    2608:	2140      	movs	r1, #64	; 0x40
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    260a:	4004      	ands	r4, r0
	initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    260c:	430b      	orrs	r3, r1
	initValue.actionFlags.bits.NetworkFreezer = bNetworkFreezer;
    260e:	00a1      	lsls	r1, r4, #2
    2610:	24c3      	movs	r4, #195	; 0xc3
    2612:	401c      	ands	r4, r3
	initValue.actionFlags.bits.RepeaterMode = 0;
    2614:	430c      	orrs	r4, r1
    2616:	4384      	bics	r4, r0
    2618:	7014      	strb	r4, [r2, #0]

	MiMAC_Init(initValue);
    261a:	0029      	movs	r1, r5
    261c:	4b1c      	ldr	r3, [pc, #112]	; (2690 <MiApp_ProtocolInit+0x18c>)
    261e:	9802      	ldr	r0, [sp, #8]
    2620:	4798      	blx	r3
	

	
	#if defined(IEEE_802_15_4)
	{
		uint16_t tmp = 0xFFFF;
    2622:	466b      	mov	r3, sp
    2624:	1d98      	adds	r0, r3, #6
    2626:	2301      	movs	r3, #1
    2628:	425b      	negs	r3, r3
    262a:	8003      	strh	r3, [r0, #0]
		MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    262c:	0031      	movs	r1, r6
    262e:	4b19      	ldr	r3, [pc, #100]	; (2694 <MiApp_ProtocolInit+0x190>)
    2630:	4798      	blx	r3
	}
	#endif
	
	MiApp_SetChannel(currentChannel);
    2632:	4c19      	ldr	r4, [pc, #100]	; (2698 <MiApp_ProtocolInit+0x194>)


 
bool MiApp_SetChannel(uint8_t channel)
{
    if( MiMAC_SetChannel(channel, 0) )
    2634:	2100      	movs	r1, #0
	MiApp_SetChannel(currentChannel);
    2636:	7825      	ldrb	r5, [r4, #0]
    if( MiMAC_SetChannel(channel, 0) )
    2638:	4b18      	ldr	r3, [pc, #96]	; (269c <MiApp_ProtocolInit+0x198>)
    263a:	0028      	movs	r0, r5
    263c:	4798      	blx	r3
    263e:	2800      	cmp	r0, #0
    2640:	d000      	beq.n	2644 <MiApp_ProtocolInit+0x140>
    {
        currentChannel = channel;
    2642:	7025      	strb	r5, [r4, #0]
	P2PCapacityInfo |= (ConnMode << 4);
    2644:	2209      	movs	r2, #9
    2646:	4b16      	ldr	r3, [pc, #88]	; (26a0 <MiApp_ProtocolInit+0x19c>)
	ENABLE_TRX_IRQ();
    2648:	2100      	movs	r1, #0
	P2PCapacityInfo |= (ConnMode << 4);
    264a:	781b      	ldrb	r3, [r3, #0]
	ENABLE_TRX_IRQ();
    264c:	2000      	movs	r0, #0
	P2PCapacityInfo |= (ConnMode << 4);
    264e:	011b      	lsls	r3, r3, #4
    2650:	4313      	orrs	r3, r2
    2652:	4a14      	ldr	r2, [pc, #80]	; (26a4 <MiApp_ProtocolInit+0x1a0>)
    2654:	7013      	strb	r3, [r2, #0]
	ENABLE_TRX_IRQ();
    2656:	4b14      	ldr	r3, [pc, #80]	; (26a8 <MiApp_ProtocolInit+0x1a4>)
    2658:	4798      	blx	r3
}
    265a:	2001      	movs	r0, #1
    265c:	b004      	add	sp, #16
    265e:	bd70      	pop	{r4, r5, r6, pc}
    2660:	200009c4 	.word	0x200009c4
    2664:	0080a00c 	.word	0x0080a00c
    2668:	200009f0 	.word	0x200009f0
    266c:	0080a040 	.word	0x0080a040
    2670:	0080a044 	.word	0x0080a044
    2674:	0080a048 	.word	0x0080a048
    2678:	20000918 	.word	0x20000918
    267c:	200009c5 	.word	0x200009c5
    2680:	20000998 	.word	0x20000998
    2684:	00007ebf 	.word	0x00007ebf
    2688:	20000994 	.word	0x20000994
    268c:	00001111 	.word	0x00001111
    2690:	00001881 	.word	0x00001881
    2694:	00000f29 	.word	0x00000f29
    2698:	2000012b 	.word	0x2000012b
    269c:	0000184d 	.word	0x0000184d
    26a0:	20000014 	.word	0x20000014
    26a4:	20000990 	.word	0x20000990
    26a8:	0000335d 	.word	0x0000335d

000026ac <MiApp_BroadcastPacket>:
{
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	4b0d      	ldr	r3, [pc, #52]	; (26e4 <MiApp_BroadcastPacket+0x38>)
    tParam.flags.Val = 0;
    26b0:	2500      	movs	r5, #0
    26b2:	8819      	ldrh	r1, [r3, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
    26b4:	2301      	movs	r3, #1
{
    26b6:	b086      	sub	sp, #24
    tParam.flags.Val = 0;
    26b8:	aa03      	add	r2, sp, #12
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    26ba:	4c0b      	ldr	r4, [pc, #44]	; (26e8 <MiApp_BroadcastPacket+0x3c>)
    tParam.flags.bits.secEn = SecurityEnabled;
    26bc:	4018      	ands	r0, r3
        tParam.altDestAddr = (Broadcast) ? true : false;
    26be:	7213      	strb	r3, [r2, #8]
    tParam.flags.bits.secEn = SecurityEnabled;
    26c0:	00c0      	lsls	r0, r0, #3
        tParam.flags.bits.sourcePrsnt = 1;
    26c2:	3b7d      	subs	r3, #125	; 0x7d
    26c4:	4318      	orrs	r0, r3
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    26c6:	7823      	ldrb	r3, [r4, #0]
        tParam.altSrcAddr = 0;
    26c8:	7255      	strb	r5, [r2, #9]
        tParam.flags.bits.sourcePrsnt = 1;
    26ca:	7010      	strb	r0, [r2, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    26cc:	8151      	strh	r1, [r2, #10]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    26ce:	9803      	ldr	r0, [sp, #12]
    26d0:	9300      	str	r3, [sp, #0]
    26d2:	2100      	movs	r1, #0
    26d4:	4b05      	ldr	r3, [pc, #20]	; (26ec <MiApp_BroadcastPacket+0x40>)
    26d6:	9a05      	ldr	r2, [sp, #20]
    26d8:	4e05      	ldr	r6, [pc, #20]	; (26f0 <MiApp_BroadcastPacket+0x44>)
    26da:	47b0      	blx	r6
    TxData = 0;
    26dc:	7025      	strb	r5, [r4, #0]
}
    26de:	b006      	add	sp, #24
    26e0:	bd70      	pop	{r4, r5, r6, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	20000994 	.word	0x20000994
    26e8:	200009c5 	.word	0x200009c5
    26ec:	200009c8 	.word	0x200009c8
    26f0:	00001a61 	.word	0x00001a61

000026f4 <isSameAddress>:
        if( Address1[i] != Address2[i] )
    26f4:	780a      	ldrb	r2, [r1, #0]
    26f6:	7803      	ldrb	r3, [r0, #0]
    26f8:	429a      	cmp	r2, r3
    26fa:	d11e      	bne.n	273a <isSameAddress+0x46>
    26fc:	7842      	ldrb	r2, [r0, #1]
    26fe:	784b      	ldrb	r3, [r1, #1]
    2700:	429a      	cmp	r2, r3
    2702:	d11a      	bne.n	273a <isSameAddress+0x46>
    2704:	7882      	ldrb	r2, [r0, #2]
    2706:	788b      	ldrb	r3, [r1, #2]
    2708:	429a      	cmp	r2, r3
    270a:	d116      	bne.n	273a <isSameAddress+0x46>
    270c:	78c2      	ldrb	r2, [r0, #3]
    270e:	78cb      	ldrb	r3, [r1, #3]
    2710:	429a      	cmp	r2, r3
    2712:	d112      	bne.n	273a <isSameAddress+0x46>
    2714:	7902      	ldrb	r2, [r0, #4]
    2716:	790b      	ldrb	r3, [r1, #4]
    2718:	429a      	cmp	r2, r3
    271a:	d10e      	bne.n	273a <isSameAddress+0x46>
    271c:	7942      	ldrb	r2, [r0, #5]
    271e:	794b      	ldrb	r3, [r1, #5]
    2720:	429a      	cmp	r2, r3
    2722:	d10a      	bne.n	273a <isSameAddress+0x46>
    2724:	7982      	ldrb	r2, [r0, #6]
    2726:	798b      	ldrb	r3, [r1, #6]
    2728:	429a      	cmp	r2, r3
    272a:	d106      	bne.n	273a <isSameAddress+0x46>
    272c:	79cb      	ldrb	r3, [r1, #7]
    272e:	79c0      	ldrb	r0, [r0, #7]
    2730:	1ac0      	subs	r0, r0, r3
    2732:	4243      	negs	r3, r0
    2734:	4158      	adcs	r0, r3
    2736:	b2c0      	uxtb	r0, r0
}
    2738:	4770      	bx	lr
            return false;
    273a:	2000      	movs	r0, #0
    273c:	e7fc      	b.n	2738 <isSameAddress+0x44>
    273e:	46c0      	nop			; (mov r8, r8)

00002740 <MiApp_DiscardMessage>:
    P2PStatus.bits.RxHasUserData = 0;
    2740:	2108      	movs	r1, #8
{
    2742:	b510      	push	{r4, lr}
    P2PStatus.bits.RxHasUserData = 0;
    2744:	4a03      	ldr	r2, [pc, #12]	; (2754 <MiApp_DiscardMessage+0x14>)
    2746:	7813      	ldrb	r3, [r2, #0]
    2748:	438b      	bics	r3, r1
    274a:	7013      	strb	r3, [r2, #0]
    MiMAC_DiscardPacket();
    274c:	4b02      	ldr	r3, [pc, #8]	; (2758 <MiApp_DiscardMessage+0x18>)
    274e:	4798      	blx	r3
}
    2750:	bd10      	pop	{r4, pc}
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	200009c4 	.word	0x200009c4
    2758:	00001e25 	.word	0x00001e25

0000275c <MiApp_SetChannel>:
{
    275c:	b510      	push	{r4, lr}
    if( MiMAC_SetChannel(channel, 0) )
    275e:	2100      	movs	r1, #0
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <MiApp_SetChannel+0x14>)
{
    2762:	0004      	movs	r4, r0
    if( MiMAC_SetChannel(channel, 0) )
    2764:	4798      	blx	r3
    2766:	2800      	cmp	r0, #0
    2768:	d001      	beq.n	276e <MiApp_SetChannel+0x12>
        currentChannel = channel;
    276a:	4b02      	ldr	r3, [pc, #8]	; (2774 <MiApp_SetChannel+0x18>)
    276c:	701c      	strb	r4, [r3, #0]
            nvmPutCurrentChannel(&currentChannel);
        #endif
        return true;
    }
    return false;
}
    276e:	bd10      	pop	{r4, pc}
    2770:	0000184d 	.word	0x0000184d
    2774:	2000012b 	.word	0x2000012b

00002778 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
    277a:	464f      	mov	r7, r9
    277c:	46d6      	mov	lr, sl
    277e:	4646      	mov	r6, r8
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2780:	4b6d      	ldr	r3, [pc, #436]	; (2938 <AddConnection+0x1c0>)
    2782:	4d6e      	ldr	r5, [pc, #440]	; (293c <AddConnection+0x1c4>)
    {
    2784:	b5c0      	push	{r6, r7, lr}
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2786:	4699      	mov	r9, r3
    2788:	0029      	movs	r1, r5
    278a:	2200      	movs	r2, #0
        uint8_t connectionSlot = 0xFF;
    278c:	27ff      	movs	r7, #255	; 0xff
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    278e:	685c      	ldr	r4, [r3, #4]
            if( ConnectionTable[i].status.bits.isValid )
    2790:	0093      	lsls	r3, r2, #2
    2792:	189b      	adds	r3, r3, r2
    2794:	005b      	lsls	r3, r3, #1
    2796:	18eb      	adds	r3, r5, r3
    2798:	7a5b      	ldrb	r3, [r3, #9]
    279a:	b2d6      	uxtb	r6, r2
    279c:	09db      	lsrs	r3, r3, #7
    279e:	d100      	bne.n	27a2 <AddConnection+0x2a>
    27a0:	e0a3      	b.n	28ea <AddConnection+0x172>
        if( Address1[i] != Address2[i] )
    27a2:	7820      	ldrb	r0, [r4, #0]
    27a4:	780b      	ldrb	r3, [r1, #0]
    27a6:	4298      	cmp	r0, r3
    27a8:	d000      	beq.n	27ac <AddConnection+0x34>
    27aa:	e0a1      	b.n	28f0 <AddConnection+0x178>
    27ac:	7860      	ldrb	r0, [r4, #1]
    27ae:	784b      	ldrb	r3, [r1, #1]
    27b0:	4298      	cmp	r0, r3
    27b2:	d000      	beq.n	27b6 <AddConnection+0x3e>
    27b4:	e09c      	b.n	28f0 <AddConnection+0x178>
    27b6:	78a0      	ldrb	r0, [r4, #2]
    27b8:	788b      	ldrb	r3, [r1, #2]
    27ba:	4298      	cmp	r0, r3
    27bc:	d000      	beq.n	27c0 <AddConnection+0x48>
    27be:	e097      	b.n	28f0 <AddConnection+0x178>
    27c0:	78e3      	ldrb	r3, [r4, #3]
    27c2:	469c      	mov	ip, r3
    27c4:	78cb      	ldrb	r3, [r1, #3]
    27c6:	459c      	cmp	ip, r3
    27c8:	d000      	beq.n	27cc <AddConnection+0x54>
    27ca:	e091      	b.n	28f0 <AddConnection+0x178>
    27cc:	7923      	ldrb	r3, [r4, #4]
    27ce:	469c      	mov	ip, r3
    27d0:	790b      	ldrb	r3, [r1, #4]
    27d2:	459c      	cmp	ip, r3
    27d4:	d000      	beq.n	27d8 <AddConnection+0x60>
    27d6:	e08b      	b.n	28f0 <AddConnection+0x178>
    27d8:	7963      	ldrb	r3, [r4, #5]
    27da:	469c      	mov	ip, r3
    27dc:	794b      	ldrb	r3, [r1, #5]
    27de:	459c      	cmp	ip, r3
    27e0:	d000      	beq.n	27e4 <AddConnection+0x6c>
    27e2:	e085      	b.n	28f0 <AddConnection+0x178>
    27e4:	79a3      	ldrb	r3, [r4, #6]
    27e6:	469c      	mov	ip, r3
    27e8:	798b      	ldrb	r3, [r1, #6]
    27ea:	459c      	cmp	ip, r3
    27ec:	d000      	beq.n	27f0 <AddConnection+0x78>
    27ee:	e07f      	b.n	28f0 <AddConnection+0x178>
    27f0:	79e3      	ldrb	r3, [r4, #7]
    27f2:	469c      	mov	ip, r3
    27f4:	79cb      	ldrb	r3, [r1, #7]
    27f6:	459c      	cmp	ip, r3
    27f8:	d000      	beq.n	27fc <AddConnection+0x84>
    27fa:	e079      	b.n	28f0 <AddConnection+0x178>
                {
                    connectionSlot = i;
                    status = STATUS_EXISTS;
    27fc:	2201      	movs	r2, #1
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    27fe:	4b50      	ldr	r3, [pc, #320]	; (2940 <AddConnection+0x1c8>)
    2800:	781b      	ldrb	r3, [r3, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	d16b      	bne.n	28de <AddConnection+0x166>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    2806:	494f      	ldr	r1, [pc, #316]	; (2944 <AddConnection+0x1cc>)
    2808:	00b7      	lsls	r7, r6, #2
    280a:	700e      	strb	r6, [r1, #0]
    280c:	19b9      	adds	r1, r7, r6
    280e:	0049      	lsls	r1, r1, #1
    2810:	1868      	adds	r0, r5, r1
    2812:	4684      	mov	ip, r0
    2814:	0018      	movs	r0, r3
    2816:	3104      	adds	r1, #4
    2818:	1869      	adds	r1, r5, r1
    281a:	428c      	cmp	r4, r1
    281c:	4158      	adcs	r0, r3
    281e:	4682      	mov	sl, r0
    2820:	1d20      	adds	r0, r4, #4
    2822:	4680      	mov	r8, r0
    2824:	4660      	mov	r0, ip
    2826:	4641      	mov	r1, r8
    2828:	4288      	cmp	r0, r1
    282a:	415b      	adcs	r3, r3
    282c:	4651      	mov	r1, sl
    282e:	430b      	orrs	r3, r1
    2830:	b2db      	uxtb	r3, r3
    2832:	2b00      	cmp	r3, #0
    2834:	d06b      	beq.n	290e <AddConnection+0x196>
    2836:	4663      	mov	r3, ip
    2838:	4323      	orrs	r3, r4
    283a:	079b      	lsls	r3, r3, #30
    283c:	d167      	bne.n	290e <AddConnection+0x196>
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    283e:	6821      	ldr	r1, [r4, #0]
    2840:	6001      	str	r1, [r0, #0]
    2842:	6861      	ldr	r1, [r4, #4]
    2844:	6041      	str	r1, [r0, #4]
            }
            
            // store the capacity info and validate the entry
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    2846:	19bb      	adds	r3, r7, r6
    2848:	005b      	lsls	r3, r3, #1
    284a:	469a      	mov	sl, r3
    284c:	44aa      	add	sl, r5
    284e:	4654      	mov	r4, sl
    2850:	2180      	movs	r1, #128	; 0x80
    2852:	7a63      	ldrb	r3, [r4, #9]
    2854:	4249      	negs	r1, r1
    2856:	4319      	orrs	r1, r3
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    2858:	464b      	mov	r3, r9
    285a:	6898      	ldr	r0, [r3, #8]
    285c:	2301      	movs	r3, #1
    285e:	4698      	mov	r8, r3
            ConnectionTable[connectionSlot].status.bits.isValid = 1;
    2860:	7261      	strb	r1, [r4, #9]
            ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (rxMessage.Payload[2] & 0x01);
    2862:	7881      	ldrb	r1, [r0, #2]
    2864:	400b      	ands	r3, r1
    2866:	469c      	mov	ip, r3
    2868:	4643      	mov	r3, r8
    286a:	7a61      	ldrb	r1, [r4, #9]
    286c:	4399      	bics	r1, r3
    286e:	4663      	mov	r3, ip
    2870:	4319      	orrs	r1, r3
    2872:	7261      	strb	r1, [r4, #9]
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
                }
            #endif
			ConnectionTable[connectionSlot].flag = rxMessage.Payload[3];
    2874:	78c1      	ldrb	r1, [r0, #3]
    2876:	7221      	strb	r1, [r4, #8]
			if (rxMessage.Payload[3] == 0xB1)PCknown = true;
    2878:	78c3      	ldrb	r3, [r0, #3]
    287a:	2bb1      	cmp	r3, #177	; 0xb1
    287c:	d043      	beq.n	2906 <AddConnection+0x18e>
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    287e:	2100      	movs	r1, #0
            #endif
            LatestConnection = connectionSlot;
            P2PStatus.bits.SearchConnection = 0;   
    2880:	2010      	movs	r0, #16
                IncomingFrameCounter[connectionSlot].Val = 0;
    2882:	4b31      	ldr	r3, [pc, #196]	; (2948 <AddConnection+0x1d0>)
    2884:	51d9      	str	r1, [r3, r7]
            P2PStatus.bits.SearchConnection = 0;   
    2886:	4931      	ldr	r1, [pc, #196]	; (294c <AddConnection+0x1d4>)
            LatestConnection = connectionSlot;
    2888:	4b31      	ldr	r3, [pc, #196]	; (2950 <AddConnection+0x1d8>)
    288a:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    288c:	780b      	ldrb	r3, [r1, #0]
    288e:	4383      	bics	r3, r0
    2890:	700b      	strb	r3, [r1, #0]
        if (ConnectionTable[i].status.bits.isValid)
    2892:	7a6b      	ldrb	r3, [r5, #9]
    2894:	7ce9      	ldrb	r1, [r5, #19]
    2896:	09db      	lsrs	r3, r3, #7
    2898:	09c9      	lsrs	r1, r1, #7
    289a:	185b      	adds	r3, r3, r1
    289c:	7f69      	ldrb	r1, [r5, #29]
    289e:	09c9      	lsrs	r1, r1, #7
    28a0:	185b      	adds	r3, r3, r1
    28a2:	2127      	movs	r1, #39	; 0x27
    28a4:	5c69      	ldrb	r1, [r5, r1]
    28a6:	09c9      	lsrs	r1, r1, #7
    28a8:	185b      	adds	r3, r3, r1
    28aa:	2131      	movs	r1, #49	; 0x31
    28ac:	5c69      	ldrb	r1, [r5, r1]
    28ae:	09c9      	lsrs	r1, r1, #7
    28b0:	185b      	adds	r3, r3, r1
    28b2:	213b      	movs	r1, #59	; 0x3b
    28b4:	5c69      	ldrb	r1, [r5, r1]
    28b6:	09c9      	lsrs	r1, r1, #7
    28b8:	185b      	adds	r3, r3, r1
    28ba:	2145      	movs	r1, #69	; 0x45
    28bc:	5c69      	ldrb	r1, [r5, r1]
    28be:	09c9      	lsrs	r1, r1, #7
    28c0:	185b      	adds	r3, r3, r1
    28c2:	214f      	movs	r1, #79	; 0x4f
    28c4:	5c69      	ldrb	r1, [r5, r1]
    28c6:	09c9      	lsrs	r1, r1, #7
    28c8:	185b      	adds	r3, r3, r1
    28ca:	2159      	movs	r1, #89	; 0x59
    28cc:	5c69      	ldrb	r1, [r5, r1]
    28ce:	09c9      	lsrs	r1, r1, #7
    28d0:	185b      	adds	r3, r3, r1
    28d2:	2163      	movs	r1, #99	; 0x63
    28d4:	5c69      	ldrb	r1, [r5, r1]
        }
        conn_size = Total_Connections();
    28d6:	09c9      	lsrs	r1, r1, #7
    28d8:	185b      	adds	r3, r3, r1
    28da:	491e      	ldr	r1, [pc, #120]	; (2954 <AddConnection+0x1dc>)
    28dc:	700b      	strb	r3, [r1, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
        nvmPutMyDC(&conn_size);
    #endif

        return status;
    }
    28de:	0010      	movs	r0, r2
    28e0:	bc1c      	pop	{r2, r3, r4}
    28e2:	4690      	mov	r8, r2
    28e4:	4699      	mov	r9, r3
    28e6:	46a2      	mov	sl, r4
    28e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if( connectionSlot == 0xFF )
    28ea:	2fff      	cmp	r7, #255	; 0xff
    28ec:	d100      	bne.n	28f0 <AddConnection+0x178>
    28ee:	0037      	movs	r7, r6
    28f0:	3201      	adds	r2, #1
    28f2:	310a      	adds	r1, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    28f4:	2a0a      	cmp	r2, #10
    28f6:	d000      	beq.n	28fa <AddConnection+0x182>
    28f8:	e74a      	b.n	2790 <AddConnection+0x18>
            return STATUS_NOT_ENOUGH_SPACE;
    28fa:	32e7      	adds	r2, #231	; 0xe7
        if( connectionSlot == 0xFF )
    28fc:	2fff      	cmp	r7, #255	; 0xff
    28fe:	d0ee      	beq.n	28de <AddConnection+0x166>
    2900:	003e      	movs	r6, r7
        uint8_t status = STATUS_SUCCESS;
    2902:	2200      	movs	r2, #0
    2904:	e77b      	b.n	27fe <AddConnection+0x86>
			if (rxMessage.Payload[3] == 0xB1)PCknown = true;
    2906:	4641      	mov	r1, r8
    2908:	4b13      	ldr	r3, [pc, #76]	; (2958 <AddConnection+0x1e0>)
    290a:	7019      	strb	r1, [r3, #0]
    290c:	e7b7      	b.n	287e <AddConnection+0x106>
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    290e:	7821      	ldrb	r1, [r4, #0]
    2910:	19bb      	adds	r3, r7, r6
    2912:	005b      	lsls	r3, r3, #1
    2914:	54e9      	strb	r1, [r5, r3]
    2916:	7861      	ldrb	r1, [r4, #1]
    2918:	18eb      	adds	r3, r5, r3
    291a:	7059      	strb	r1, [r3, #1]
    291c:	78a1      	ldrb	r1, [r4, #2]
    291e:	7099      	strb	r1, [r3, #2]
    2920:	78e1      	ldrb	r1, [r4, #3]
    2922:	70d9      	strb	r1, [r3, #3]
    2924:	7921      	ldrb	r1, [r4, #4]
    2926:	7119      	strb	r1, [r3, #4]
    2928:	7961      	ldrb	r1, [r4, #5]
    292a:	7159      	strb	r1, [r3, #5]
    292c:	79a1      	ldrb	r1, [r4, #6]
    292e:	7199      	strb	r1, [r3, #6]
    2930:	79e1      	ldrb	r1, [r4, #7]
    2932:	71d9      	strb	r1, [r3, #7]
    2934:	e787      	b.n	2846 <AddConnection+0xce>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	200009f8 	.word	0x200009f8
    293c:	20000918 	.word	0x20000918
    2940:	20000014 	.word	0x20000014
    2944:	200009c0 	.word	0x200009c0
    2948:	20000998 	.word	0x20000998
    294c:	200009c4 	.word	0x200009c4
    2950:	20000914 	.word	0x20000914
    2954:	20000997 	.word	0x20000997
    2958:	2000012a 	.word	0x2000012a

0000295c <P2PTasks.part.0>:
void P2PTasks(void)
    295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    295e:	4647      	mov	r7, r8
    2960:	46ce      	mov	lr, r9
    2962:	b580      	push	{r7, lr}
            temp_bit = MACRxPacket.flags.bits.broadcast;
    2964:	48a6      	ldr	r0, [pc, #664]	; (2c00 <P2PTasks.part.0+0x2a4>)
    2966:	4aa7      	ldr	r2, [pc, #668]	; (2c04 <P2PTasks.part.0+0x2a8>)
    2968:	7801      	ldrb	r1, [r0, #0]
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    296a:	2501      	movs	r5, #1
            temp_bit = MACRxPacket.flags.bits.broadcast;
    296c:	074b      	lsls	r3, r1, #29
    296e:	0fdb      	lsrs	r3, r3, #31
    2970:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    2972:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    2974:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    2976:	400a      	ands	r2, r1
    2978:	3a01      	subs	r2, #1
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    297a:	4698      	mov	r8, r3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    297c:	4253      	negs	r3, r2
    297e:	4153      	adcs	r3, r2
    2980:	015a      	lsls	r2, r3, #5
    2982:	4643      	mov	r3, r8
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    2984:	08ce      	lsrs	r6, r1, #3
    2986:	402e      	ands	r6, r5
    2988:	00f6      	lsls	r6, r6, #3
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    298a:	4333      	orrs	r3, r6
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    298c:	09ce      	lsrs	r6, r1, #7
    298e:	4035      	ands	r5, r6
        rxMessage.flags.Val = 0;
    2990:	4c9d      	ldr	r4, [pc, #628]	; (2c08 <P2PTasks.part.0+0x2ac>)
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    2992:	01ad      	lsls	r5, r5, #6
    2994:	4313      	orrs	r3, r2
    2996:	432b      	orrs	r3, r5
        if( MACRxPacket.flags.bits.sourcePrsnt )
    2998:	b249      	sxtb	r1, r1
void P2PTasks(void)
    299a:	b087      	sub	sp, #28
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    299c:	7023      	strb	r3, [r4, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    299e:	2900      	cmp	r1, #0
    29a0:	db2e      	blt.n	2a00 <P2PTasks.part.0+0xa4>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    29a2:	8a05      	ldrh	r5, [r0, #16]
        rxMessage.Payload = MACRxPacket.Payload;
    29a4:	6881      	ldr	r1, [r0, #8]
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    29a6:	8065      	strh	r5, [r4, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    29a8:	7b02      	ldrb	r2, [r0, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    29aa:	60a1      	str	r1, [r4, #8]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    29ac:	7322      	strb	r2, [r4, #12]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    29ae:	7b83      	ldrb	r3, [r0, #14]
    29b0:	73a3      	strb	r3, [r4, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    29b2:	7b43      	ldrb	r3, [r0, #13]
    29b4:	7363      	strb	r3, [r4, #13]
        if( rxMessage.flags.bits.command )
    29b6:	7823      	ldrb	r3, [r4, #0]
    29b8:	069b      	lsls	r3, r3, #26
    29ba:	d508      	bpl.n	29ce <P2PTasks.part.0+0x72>
            switch( rxMessage.Payload[0] )
    29bc:	780b      	ldrb	r3, [r1, #0]
    29be:	337e      	adds	r3, #126	; 0x7e
    29c0:	b2db      	uxtb	r3, r3
    29c2:	2b15      	cmp	r3, #21
    29c4:	d803      	bhi.n	29ce <P2PTasks.part.0+0x72>
    29c6:	4891      	ldr	r0, [pc, #580]	; (2c0c <P2PTasks.part.0+0x2b0>)
    29c8:	009b      	lsls	r3, r3, #2
    29ca:	58c3      	ldr	r3, [r0, r3]
    29cc:	469f      	mov	pc, r3
            P2PStatus.bits.RxHasUserData = 1;
    29ce:	2108      	movs	r1, #8
    29d0:	4d8f      	ldr	r5, [pc, #572]	; (2c10 <P2PTasks.part.0+0x2b4>)
    29d2:	782b      	ldrb	r3, [r5, #0]
    29d4:	430b      	orrs	r3, r1
    29d6:	702b      	strb	r3, [r5, #0]
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    29d8:	2a00      	cmp	r2, #0
    29da:	d002      	beq.n	29e2 <P2PTasks.part.0+0x86>
    29dc:	782b      	ldrb	r3, [r5, #0]
    29de:	06db      	lsls	r3, r3, #27
    29e0:	d50a      	bpl.n	29f8 <P2PTasks.part.0+0x9c>
            P2PStatus.bits.RxHasUserData = 0;
    29e2:	2208      	movs	r2, #8
    29e4:	782b      	ldrb	r3, [r5, #0]
    29e6:	4393      	bics	r3, r2
    29e8:	702b      	strb	r3, [r5, #0]
            MiMAC_DiscardPacket();
    29ea:	4b8a      	ldr	r3, [pc, #552]	; (2c14 <P2PTasks.part.0+0x2b8>)
    29ec:	4798      	blx	r3
}
    29ee:	b007      	add	sp, #28
    29f0:	bc0c      	pop	{r2, r3}
    29f2:	4690      	mov	r8, r2
    29f4:	4699      	mov	r9, r3
    29f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    29f8:	782b      	ldrb	r3, [r5, #0]
    29fa:	069b      	lsls	r3, r3, #26
    29fc:	d4f1      	bmi.n	29e2 <P2PTasks.part.0+0x86>
    29fe:	e7f6      	b.n	29ee <P2PTasks.part.0+0x92>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    2a00:	6843      	ldr	r3, [r0, #4]
    2a02:	6063      	str	r3, [r4, #4]
    2a04:	e7cd      	b.n	29a2 <P2PTasks.part.0+0x46>
                            if( P2PStatus.bits.Resync )
    2a06:	4d82      	ldr	r5, [pc, #520]	; (2c10 <P2PTasks.part.0+0x2b4>)
    2a08:	782b      	ldrb	r3, [r5, #0]
    2a0a:	069b      	lsls	r3, r3, #26
    2a0c:	d503      	bpl.n	2a16 <P2PTasks.part.0+0xba>
                                P2PStatus.bits.Resync = 0;   
    2a0e:	2220      	movs	r2, #32
    2a10:	782b      	ldrb	r3, [r5, #0]
    2a12:	4393      	bics	r3, r2
    2a14:	702b      	strb	r3, [r5, #0]
                            MiMAC_DiscardPacket(); 
    2a16:	4b7f      	ldr	r3, [pc, #508]	; (2c14 <P2PTasks.part.0+0x2b8>)
    2a18:	4798      	blx	r3
    2a1a:	7b22      	ldrb	r2, [r4, #12]
    2a1c:	e7dc      	b.n	29d8 <P2PTasks.part.0+0x7c>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    2a1e:	784b      	ldrb	r3, [r1, #1]
    2a20:	2b00      	cmp	r3, #0
    2a22:	d135      	bne.n	2a90 <P2PTasks.part.0+0x134>
    2a24:	4f7c      	ldr	r7, [pc, #496]	; (2c18 <P2PTasks.part.0+0x2bc>)
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2a26:	2100      	movs	r1, #0
    2a28:	003a      	movs	r2, r7
    2a2a:	6865      	ldr	r5, [r4, #4]
                                    if( ConnectionTable[i].status.bits.isValid )
    2a2c:	008b      	lsls	r3, r1, #2
    2a2e:	185b      	adds	r3, r3, r1
    2a30:	005b      	lsls	r3, r3, #1
    2a32:	18fb      	adds	r3, r7, r3
    2a34:	7a58      	ldrb	r0, [r3, #9]
    2a36:	09c0      	lsrs	r0, r0, #7
    2a38:	d100      	bne.n	2a3c <P2PTasks.part.0+0xe0>
    2a3a:	e0d2      	b.n	2be2 <P2PTasks.part.0+0x286>
        if( Address1[i] != Address2[i] )
    2a3c:	782e      	ldrb	r6, [r5, #0]
    2a3e:	7810      	ldrb	r0, [r2, #0]
    2a40:	4286      	cmp	r6, r0
    2a42:	d000      	beq.n	2a46 <P2PTasks.part.0+0xea>
    2a44:	e0cd      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a46:	786e      	ldrb	r6, [r5, #1]
    2a48:	7850      	ldrb	r0, [r2, #1]
    2a4a:	4286      	cmp	r6, r0
    2a4c:	d000      	beq.n	2a50 <P2PTasks.part.0+0xf4>
    2a4e:	e0c8      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a50:	78ae      	ldrb	r6, [r5, #2]
    2a52:	7890      	ldrb	r0, [r2, #2]
    2a54:	4286      	cmp	r6, r0
    2a56:	d000      	beq.n	2a5a <P2PTasks.part.0+0xfe>
    2a58:	e0c3      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a5a:	78ee      	ldrb	r6, [r5, #3]
    2a5c:	78d0      	ldrb	r0, [r2, #3]
    2a5e:	4286      	cmp	r6, r0
    2a60:	d000      	beq.n	2a64 <P2PTasks.part.0+0x108>
    2a62:	e0be      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a64:	792e      	ldrb	r6, [r5, #4]
    2a66:	7910      	ldrb	r0, [r2, #4]
    2a68:	4286      	cmp	r6, r0
    2a6a:	d000      	beq.n	2a6e <P2PTasks.part.0+0x112>
    2a6c:	e0b9      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a6e:	796e      	ldrb	r6, [r5, #5]
    2a70:	7950      	ldrb	r0, [r2, #5]
    2a72:	4286      	cmp	r6, r0
    2a74:	d000      	beq.n	2a78 <P2PTasks.part.0+0x11c>
    2a76:	e0b4      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a78:	79ae      	ldrb	r6, [r5, #6]
    2a7a:	7990      	ldrb	r0, [r2, #6]
    2a7c:	4286      	cmp	r6, r0
    2a7e:	d000      	beq.n	2a82 <P2PTasks.part.0+0x126>
    2a80:	e0af      	b.n	2be2 <P2PTasks.part.0+0x286>
    2a82:	79ee      	ldrb	r6, [r5, #7]
    2a84:	79d0      	ldrb	r0, [r2, #7]
    2a86:	4286      	cmp	r6, r0
    2a88:	d000      	beq.n	2a8c <P2PTasks.part.0+0x130>
    2a8a:	e0aa      	b.n	2be2 <P2PTasks.part.0+0x286>
                                            ConnectionTable[i].status.Val = 0;
    2a8c:	2200      	movs	r2, #0
    2a8e:	725a      	strb	r2, [r3, #9]
                        MiMAC_DiscardPacket();
    2a90:	4b60      	ldr	r3, [pc, #384]	; (2c14 <P2PTasks.part.0+0x2b8>)
    2a92:	4798      	blx	r3
    2a94:	7b22      	ldrb	r2, [r4, #12]
    2a96:	4d5e      	ldr	r5, [pc, #376]	; (2c10 <P2PTasks.part.0+0x2b4>)
    2a98:	e79e      	b.n	29d8 <P2PTasks.part.0+0x7c>
                            if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    2a9a:	4b60      	ldr	r3, [pc, #384]	; (2c1c <P2PTasks.part.0+0x2c0>)
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	2b02      	cmp	r3, #2
    2aa0:	d8f6      	bhi.n	2a90 <P2PTasks.part.0+0x134>
                            if( currentChannel != rxMessage.Payload[1] )
    2aa2:	4b5f      	ldr	r3, [pc, #380]	; (2c20 <P2PTasks.part.0+0x2c4>)
    2aa4:	784a      	ldrb	r2, [r1, #1]
    2aa6:	781b      	ldrb	r3, [r3, #0]
    2aa8:	429a      	cmp	r2, r3
    2aaa:	d1f1      	bne.n	2a90 <P2PTasks.part.0+0x134>
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    2aac:	2397      	movs	r3, #151	; 0x97
    2aae:	4f5d      	ldr	r7, [pc, #372]	; (2c24 <P2PTasks.part.0+0x2c8>)
                            MiApp_WriteData(P2PCapacityInfo);
    2ab0:	4d5d      	ldr	r5, [pc, #372]	; (2c28 <P2PTasks.part.0+0x2cc>)
                            MiApp_WriteData(CMD_P2P_ACTIVE_SCAN_RESPONSE);
    2ab2:	703b      	strb	r3, [r7, #0]
                            MiApp_WriteData(P2PCapacityInfo);
    2ab4:	3b95      	subs	r3, #149	; 0x95
    2ab6:	702b      	strb	r3, [r5, #0]
    2ab8:	4b5c      	ldr	r3, [pc, #368]	; (2c2c <P2PTasks.part.0+0x2d0>)
    tParam.flags.Val = 0;
    2aba:	2600      	movs	r6, #0
                            MiApp_WriteData(P2PCapacityInfo);
    2abc:	781b      	ldrb	r3, [r3, #0]
    2abe:	707b      	strb	r3, [r7, #1]
                            MiMAC_DiscardPacket();
    2ac0:	4b54      	ldr	r3, [pc, #336]	; (2c14 <P2PTasks.part.0+0x2b8>)
    2ac2:	4798      	blx	r3
    tParam.flags.bits.secEn = SecurityEnabled;
    2ac4:	2008      	movs	r0, #8
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2ac6:	7823      	ldrb	r3, [r4, #0]
    tParam.flags.Val = 0;
    2ac8:	aa03      	add	r2, sp, #12
    tParam.flags.bits.secEn = SecurityEnabled;
    2aca:	4003      	ands	r3, r0
        tParam.flags.bits.sourcePrsnt = 1;
    2acc:	3827      	subs	r0, #39	; 0x27
    2ace:	4303      	orrs	r3, r0
    2ad0:	7013      	strb	r3, [r2, #0]
    tParam.DestAddress = DestinationAddress;
    2ad2:	6863      	ldr	r3, [r4, #4]
    2ad4:	8861      	ldrh	r1, [r4, #2]
    2ad6:	9304      	str	r3, [sp, #16]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2ad8:	782b      	ldrb	r3, [r5, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2ada:	8151      	strh	r1, [r2, #10]
        tParam.altSrcAddr = 0;
    2adc:	7256      	strb	r6, [r2, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    2ade:	7216      	strb	r6, [r2, #8]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2ae0:	9300      	str	r3, [sp, #0]
    2ae2:	9a05      	ldr	r2, [sp, #20]
    2ae4:	003b      	movs	r3, r7
    2ae6:	9803      	ldr	r0, [sp, #12]
    2ae8:	6861      	ldr	r1, [r4, #4]
    2aea:	4f51      	ldr	r7, [pc, #324]	; (2c30 <P2PTasks.part.0+0x2d4>)
    2aec:	47b8      	blx	r7
    TxData = 0;
    2aee:	702e      	strb	r6, [r5, #0]
    2af0:	7b22      	ldrb	r2, [r4, #12]
    2af2:	4d47      	ldr	r5, [pc, #284]	; (2c10 <P2PTasks.part.0+0x2b4>)
    2af4:	e770      	b.n	29d8 <P2PTasks.part.0+0x7c>
                            switch( rxMessage.Payload[1] )
    2af6:	784b      	ldrb	r3, [r1, #1]
    2af8:	2b01      	cmp	r3, #1
    2afa:	d8c9      	bhi.n	2a90 <P2PTasks.part.0+0x134>
                                        if( myPANID.Val == 0xFFFF )
    2afc:	494d      	ldr	r1, [pc, #308]	; (2c34 <P2PTasks.part.0+0x2d8>)
    2afe:	4b4e      	ldr	r3, [pc, #312]	; (2c38 <P2PTasks.part.0+0x2dc>)
    2b00:	880a      	ldrh	r2, [r1, #0]
    2b02:	429a      	cmp	r2, r3
    2b04:	d073      	beq.n	2bee <P2PTasks.part.0+0x292>
                                    AddConnection();
    2b06:	4b4d      	ldr	r3, [pc, #308]	; (2c3c <P2PTasks.part.0+0x2e0>)
    2b08:	4798      	blx	r3
    2b0a:	e7c1      	b.n	2a90 <P2PTasks.part.0+0x134>
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    2b0c:	2301      	movs	r3, #1
    2b0e:	4d46      	ldr	r5, [pc, #280]	; (2c28 <P2PTasks.part.0+0x2cc>)
    2b10:	4f41      	ldr	r7, [pc, #260]	; (2c18 <P2PTasks.part.0+0x2bc>)
    2b12:	702b      	strb	r3, [r5, #0]
    2b14:	4b43      	ldr	r3, [pc, #268]	; (2c24 <P2PTasks.part.0+0x2c8>)
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2b16:	2100      	movs	r1, #0
                            MiApp_WriteData(CMD_P2P_CONNECTION_REMOVAL_RESPONSE);
    2b18:	4699      	mov	r9, r3
    2b1a:	2392      	movs	r3, #146	; 0x92
    2b1c:	464a      	mov	r2, r9
    2b1e:	7013      	strb	r3, [r2, #0]
    2b20:	003a      	movs	r2, r7
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    2b22:	6866      	ldr	r6, [r4, #4]
                                if( ConnectionTable[i].status.bits.isValid )
    2b24:	008b      	lsls	r3, r1, #2
    2b26:	185b      	adds	r3, r3, r1
    2b28:	005b      	lsls	r3, r3, #1
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	7a58      	ldrb	r0, [r3, #9]
    2b2e:	09c0      	lsrs	r0, r0, #7
    2b30:	d049      	beq.n	2bc6 <P2PTasks.part.0+0x26a>
        if( Address1[i] != Address2[i] )
    2b32:	7810      	ldrb	r0, [r2, #0]
    2b34:	4680      	mov	r8, r0
    2b36:	7830      	ldrb	r0, [r6, #0]
    2b38:	4580      	cmp	r8, r0
    2b3a:	d144      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b3c:	7870      	ldrb	r0, [r6, #1]
    2b3e:	4680      	mov	r8, r0
    2b40:	7850      	ldrb	r0, [r2, #1]
    2b42:	4580      	cmp	r8, r0
    2b44:	d13f      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b46:	78b0      	ldrb	r0, [r6, #2]
    2b48:	4680      	mov	r8, r0
    2b4a:	7890      	ldrb	r0, [r2, #2]
    2b4c:	4580      	cmp	r8, r0
    2b4e:	d13a      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b50:	78f0      	ldrb	r0, [r6, #3]
    2b52:	4680      	mov	r8, r0
    2b54:	78d0      	ldrb	r0, [r2, #3]
    2b56:	4580      	cmp	r8, r0
    2b58:	d135      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b5a:	7930      	ldrb	r0, [r6, #4]
    2b5c:	4680      	mov	r8, r0
    2b5e:	7910      	ldrb	r0, [r2, #4]
    2b60:	4580      	cmp	r8, r0
    2b62:	d130      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b64:	7970      	ldrb	r0, [r6, #5]
    2b66:	4680      	mov	r8, r0
    2b68:	7950      	ldrb	r0, [r2, #5]
    2b6a:	4580      	cmp	r8, r0
    2b6c:	d12b      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b6e:	79b0      	ldrb	r0, [r6, #6]
    2b70:	4680      	mov	r8, r0
    2b72:	7990      	ldrb	r0, [r2, #6]
    2b74:	4580      	cmp	r8, r0
    2b76:	d126      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
    2b78:	79f0      	ldrb	r0, [r6, #7]
    2b7a:	4680      	mov	r8, r0
    2b7c:	79d0      	ldrb	r0, [r2, #7]
    2b7e:	4580      	cmp	r8, r0
    2b80:	d121      	bne.n	2bc6 <P2PTasks.part.0+0x26a>
                                        ConnectionTable[i].status.Val = 0;
    2b82:	2200      	movs	r2, #0
    2b84:	725a      	strb	r2, [r3, #9]
                                        MiApp_WriteData(STATUS_SUCCESS);
    2b86:	2302      	movs	r3, #2
    2b88:	702b      	strb	r3, [r5, #0]
    2b8a:	464b      	mov	r3, r9
    2b8c:	705a      	strb	r2, [r3, #1]
                            MiMAC_DiscardPacket();
    2b8e:	4b21      	ldr	r3, [pc, #132]	; (2c14 <P2PTasks.part.0+0x2b8>)
    2b90:	4798      	blx	r3
    2b92:	782b      	ldrb	r3, [r5, #0]
    tParam.flags.bits.secEn = SecurityEnabled;
    2b94:	2608      	movs	r6, #8
    tParam.flags.Val = 0;
    2b96:	2700      	movs	r7, #0
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn);
    2b98:	7821      	ldrb	r1, [r4, #0]
    tParam.flags.Val = 0;
    2b9a:	aa03      	add	r2, sp, #12
    tParam.flags.bits.secEn = SecurityEnabled;
    2b9c:	4031      	ands	r1, r6
        tParam.flags.bits.sourcePrsnt = 1;
    2b9e:	3e27      	subs	r6, #39	; 0x27
    2ba0:	8860      	ldrh	r0, [r4, #2]
    2ba2:	4331      	orrs	r1, r6
    2ba4:	7011      	strb	r1, [r2, #0]
    tParam.DestAddress = DestinationAddress;
    2ba6:	6861      	ldr	r1, [r4, #4]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2ba8:	8150      	strh	r0, [r2, #10]
        tParam.altSrcAddr = 0;
    2baa:	7257      	strb	r7, [r2, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    2bac:	7217      	strb	r7, [r2, #8]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2bae:	9300      	str	r3, [sp, #0]
    tParam.DestAddress = DestinationAddress;
    2bb0:	9104      	str	r1, [sp, #16]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2bb2:	9a05      	ldr	r2, [sp, #20]
    2bb4:	464b      	mov	r3, r9
    2bb6:	9803      	ldr	r0, [sp, #12]
    2bb8:	6861      	ldr	r1, [r4, #4]
    2bba:	4e1d      	ldr	r6, [pc, #116]	; (2c30 <P2PTasks.part.0+0x2d4>)
    2bbc:	47b0      	blx	r6
    TxData = 0;
    2bbe:	702f      	strb	r7, [r5, #0]
    2bc0:	7b22      	ldrb	r2, [r4, #12]
    2bc2:	4d13      	ldr	r5, [pc, #76]	; (2c10 <P2PTasks.part.0+0x2b4>)
    2bc4:	e708      	b.n	29d8 <P2PTasks.part.0+0x7c>
    2bc6:	3101      	adds	r1, #1
    2bc8:	320a      	adds	r2, #10
                            for(i = 0; i < CONNECTION_SIZE; i++)
    2bca:	290a      	cmp	r1, #10
    2bcc:	d1aa      	bne.n	2b24 <P2PTasks.part.0+0x1c8>
                            MiMAC_DiscardPacket();
    2bce:	4b11      	ldr	r3, [pc, #68]	; (2c14 <P2PTasks.part.0+0x2b8>)
    2bd0:	4798      	blx	r3
                                MiApp_WriteData(STATUS_ENTRY_NOT_EXIST);
    2bd2:	21f0      	movs	r1, #240	; 0xf0
    2bd4:	4648      	mov	r0, r9
    2bd6:	782a      	ldrb	r2, [r5, #0]
    2bd8:	1c53      	adds	r3, r2, #1
    2bda:	b2db      	uxtb	r3, r3
    2bdc:	702b      	strb	r3, [r5, #0]
    2bde:	5481      	strb	r1, [r0, r2]
    2be0:	e7d8      	b.n	2b94 <P2PTasks.part.0+0x238>
    2be2:	3101      	adds	r1, #1
    2be4:	320a      	adds	r2, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    2be6:	290a      	cmp	r1, #10
    2be8:	d000      	beq.n	2bec <P2PTasks.part.0+0x290>
    2bea:	e71f      	b.n	2a2c <P2PTasks.part.0+0xd0>
    2bec:	e750      	b.n	2a90 <P2PTasks.part.0+0x134>
                                                uint16_t tmp = 0xFFFF;
    2bee:	2301      	movs	r3, #1
    2bf0:	a803      	add	r0, sp, #12
    2bf2:	425b      	negs	r3, r3
    2bf4:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2bf6:	4b12      	ldr	r3, [pc, #72]	; (2c40 <P2PTasks.part.0+0x2e4>)
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    2bf8:	800d      	strh	r5, [r1, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    2bfa:	4798      	blx	r3
    2bfc:	e783      	b.n	2b06 <P2PTasks.part.0+0x1aa>
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	2000097c 	.word	0x2000097c
    2c04:	20000996 	.word	0x20000996
    2c08:	200009f8 	.word	0x200009f8
    2c0c:	00008f88 	.word	0x00008f88
    2c10:	200009c4 	.word	0x200009c4
    2c14:	00001e25 	.word	0x00001e25
    2c18:	20000918 	.word	0x20000918
    2c1c:	20000014 	.word	0x20000014
    2c20:	2000012b 	.word	0x2000012b
    2c24:	200009c8 	.word	0x200009c8
    2c28:	200009c5 	.word	0x200009c5
    2c2c:	20000990 	.word	0x20000990
    2c30:	00001a61 	.word	0x00001a61
    2c34:	20000994 	.word	0x20000994
    2c38:	0000ffff 	.word	0x0000ffff
    2c3c:	00002779 	.word	0x00002779
    2c40:	00000f29 	.word	0x00000f29

00002c44 <MiApp_MessageAvailable>:
{ 
    2c44:	b510      	push	{r4, lr}
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2c46:	4c07      	ldr	r4, [pc, #28]	; (2c64 <MiApp_MessageAvailable+0x20>)
    2c48:	7823      	ldrb	r3, [r4, #0]
    2c4a:	071b      	lsls	r3, r3, #28
    2c4c:	d503      	bpl.n	2c56 <MiApp_MessageAvailable+0x12>
    return P2PStatus.bits.RxHasUserData;
    2c4e:	7820      	ldrb	r0, [r4, #0]
    2c50:	0700      	lsls	r0, r0, #28
    2c52:	0fc0      	lsrs	r0, r0, #31
}
    2c54:	bd10      	pop	{r4, pc}
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2c56:	4b04      	ldr	r3, [pc, #16]	; (2c68 <MiApp_MessageAvailable+0x24>)
    2c58:	4798      	blx	r3
    2c5a:	2800      	cmp	r0, #0
    2c5c:	d0f7      	beq.n	2c4e <MiApp_MessageAvailable+0xa>
    2c5e:	4b03      	ldr	r3, [pc, #12]	; (2c6c <MiApp_MessageAvailable+0x28>)
    2c60:	4798      	blx	r3
    2c62:	e7f4      	b.n	2c4e <MiApp_MessageAvailable+0xa>
    2c64:	200009c4 	.word	0x200009c4
    2c68:	00001e41 	.word	0x00001e41
    2c6c:	0000295d 	.word	0x0000295d

00002c70 <MiApp_EstablishConnection>:
    {
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	46de      	mov	lr, fp
    2c74:	4657      	mov	r7, sl
    2c76:	464e      	mov	r6, r9
    2c78:	4645      	mov	r5, r8
    2c7a:	b5e0      	push	{r5, r6, r7, lr}
            return 0xFF;
    2c7c:	20ff      	movs	r0, #255	; 0xff
    {
    2c7e:	b089      	sub	sp, #36	; 0x24
        if( Mode == CONN_MODE_INDIRECT )
    2c80:	2901      	cmp	r1, #1
    2c82:	d106      	bne.n	2c92 <MiApp_EstablishConnection+0x22>
    }
    2c84:	b009      	add	sp, #36	; 0x24
    2c86:	bc3c      	pop	{r2, r3, r4, r5}
    2c88:	4690      	mov	r8, r2
    2c8a:	4699      	mov	r9, r3
    2c8c:	46a2      	mov	sl, r4
    2c8e:	46ab      	mov	fp, r5
    2c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t    tmpConnectionMode = ConnMode;
    2c92:	4b37      	ldr	r3, [pc, #220]	; (2d70 <MiApp_EstablishConnection+0x100>)
        uint8_t    connectionInterval = 0;
    2c94:	2600      	movs	r6, #0
        uint8_t    tmpConnectionMode = ConnMode;
    2c96:	781b      	ldrb	r3, [r3, #0]
    2c98:	9303      	str	r3, [sp, #12]
        t1.Val = MiWi_TickGet();
    2c9a:	4b36      	ldr	r3, [pc, #216]	; (2d74 <MiApp_EstablishConnection+0x104>)
    2c9c:	4699      	mov	r9, r3
    2c9e:	4798      	blx	r3
        ConnMode = ENABLE_ALL_CONN;
    2ca0:	2300      	movs	r3, #0
    2ca2:	4a33      	ldr	r2, [pc, #204]	; (2d70 <MiApp_EstablishConnection+0x100>)
        P2PStatus.bits.SearchConnection = 1;
    2ca4:	4c34      	ldr	r4, [pc, #208]	; (2d78 <MiApp_EstablishConnection+0x108>)
        ConnMode = ENABLE_ALL_CONN;
    2ca6:	7013      	strb	r3, [r2, #0]
        P2PStatus.bits.SearchConnection = 1;
    2ca8:	2210      	movs	r2, #16
    2caa:	7823      	ldrb	r3, [r4, #0]
        t1.Val -= (ONE_SECOND);
    2cac:	387c      	subs	r0, #124	; 0x7c
        P2PStatus.bits.SearchConnection = 1;
    2cae:	4313      	orrs	r3, r2
    2cb0:	7023      	strb	r3, [r4, #0]
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    2cb2:	2303      	movs	r3, #3
    2cb4:	469a      	mov	sl, r3
        tParam.flags.bits.sourcePrsnt = 1;
    2cb6:	3b7e      	subs	r3, #126	; 0x7e
        t1.Val -= (ONE_SECOND);
    2cb8:	0007      	movs	r7, r0
        tParam.flags.bits.sourcePrsnt = 1;
    2cba:	469b      	mov	fp, r3
        while( P2PStatus.bits.SearchConnection )
    2cbc:	7823      	ldrb	r3, [r4, #0]
    2cbe:	06db      	lsls	r3, r3, #27
    2cc0:	d53f      	bpl.n	2d42 <MiApp_EstablishConnection+0xd2>
            t2.Val = MiWi_TickGet();
    2cc2:	47c8      	blx	r9
    2cc4:	0005      	movs	r5, r0
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    2cc6:	1bc3      	subs	r3, r0, r7
    2cc8:	2b7c      	cmp	r3, #124	; 0x7c
    2cca:	d92b      	bls.n	2d24 <MiApp_EstablishConnection+0xb4>
                if( connectionInterval-- > 0 )
    2ccc:	2e00      	cmp	r6, #0
    2cce:	d13f      	bne.n	2d50 <MiApp_EstablishConnection+0xe0>
                if( retry-- == 0 )
    2cd0:	4653      	mov	r3, sl
    2cd2:	3b01      	subs	r3, #1
    2cd4:	b2db      	uxtb	r3, r3
    2cd6:	4698      	mov	r8, r3
    2cd8:	4653      	mov	r3, sl
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d042      	beq.n	2d64 <MiApp_EstablishConnection+0xf4>
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2cde:	2281      	movs	r2, #129	; 0x81
					MiApp_WriteData(0xA2);
    2ce0:	2104      	movs	r1, #4
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2ce2:	4b26      	ldr	r3, [pc, #152]	; (2d7c <MiApp_EstablishConnection+0x10c>)
        tParam.altDestAddr = (Broadcast) ? true : false;
    2ce4:	2701      	movs	r7, #1
                MiApp_WriteData(CMD_P2P_CONNECTION_REQUEST);
    2ce6:	701a      	strb	r2, [r3, #0]
                MiApp_WriteData(currentChannel);
    2ce8:	4a25      	ldr	r2, [pc, #148]	; (2d80 <MiApp_EstablishConnection+0x110>)
    tParam.DestAddress = DestinationAddress;
    2cea:	9606      	str	r6, [sp, #24]
                MiApp_WriteData(currentChannel);
    2cec:	7812      	ldrb	r2, [r2, #0]
    2cee:	46c2      	mov	sl, r8
    2cf0:	705a      	strb	r2, [r3, #1]
                MiApp_WriteData(P2PCapacityInfo);
    2cf2:	4a24      	ldr	r2, [pc, #144]	; (2d84 <MiApp_EstablishConnection+0x114>)
    2cf4:	7812      	ldrb	r2, [r2, #0]
    2cf6:	709a      	strb	r2, [r3, #2]
					MiApp_WriteData(0xA2);
    2cf8:	4a23      	ldr	r2, [pc, #140]	; (2d88 <MiApp_EstablishConnection+0x118>)
    2cfa:	7011      	strb	r1, [r2, #0]
    2cfc:	22a2      	movs	r2, #162	; 0xa2
    2cfe:	70da      	strb	r2, [r3, #3]
    2d00:	4a22      	ldr	r2, [pc, #136]	; (2d8c <MiApp_EstablishConnection+0x11c>)
    2d02:	8810      	ldrh	r0, [r2, #0]
    tParam.flags.Val = 0;
    2d04:	aa05      	add	r2, sp, #20
        tParam.altDestAddr = (Broadcast) ? true : false;
    2d06:	7217      	strb	r7, [r2, #8]
        tParam.flags.bits.sourcePrsnt = 1;
    2d08:	465f      	mov	r7, fp
        tParam.altSrcAddr = 0;
    2d0a:	7256      	strb	r6, [r2, #9]
        tParam.flags.bits.sourcePrsnt = 1;
    2d0c:	7017      	strb	r7, [r2, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    2d0e:	8150      	strh	r0, [r2, #10]
    status = MiMAC_SendPacket(tParam, TxBuffer, TxData); 
    2d10:	4f1f      	ldr	r7, [pc, #124]	; (2d90 <MiApp_EstablishConnection+0x120>)
    2d12:	9100      	str	r1, [sp, #0]
    2d14:	9805      	ldr	r0, [sp, #20]
    2d16:	2100      	movs	r1, #0
    2d18:	9a07      	ldr	r2, [sp, #28]
    2d1a:	47b8      	blx	r7
    TxData = 0;
    2d1c:	4b1a      	ldr	r3, [pc, #104]	; (2d88 <MiApp_EstablishConnection+0x118>)
                t1.Val = t2.Val;
    2d1e:	002f      	movs	r7, r5
    TxData = 0;
    2d20:	701e      	strb	r6, [r3, #0]
                connectionInterval = CONNECTION_INTERVAL-1;
    2d22:	2601      	movs	r6, #1
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2d24:	7823      	ldrb	r3, [r4, #0]
    2d26:	071b      	lsls	r3, r3, #28
    2d28:	d515      	bpl.n	2d56 <MiApp_EstablishConnection+0xe6>
    return P2PStatus.bits.RxHasUserData;
    2d2a:	7823      	ldrb	r3, [r4, #0]
            if( MiApp_MessageAvailable())
    2d2c:	071b      	lsls	r3, r3, #28
    2d2e:	d5c5      	bpl.n	2cbc <MiApp_EstablishConnection+0x4c>
    P2PStatus.bits.RxHasUserData = 0;
    2d30:	2208      	movs	r2, #8
    2d32:	7823      	ldrb	r3, [r4, #0]
    2d34:	4393      	bics	r3, r2
    2d36:	7023      	strb	r3, [r4, #0]
    MiMAC_DiscardPacket();
    2d38:	4b16      	ldr	r3, [pc, #88]	; (2d94 <MiApp_EstablishConnection+0x124>)
    2d3a:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    2d3c:	7823      	ldrb	r3, [r4, #0]
    2d3e:	06db      	lsls	r3, r3, #27
    2d40:	d4bf      	bmi.n	2cc2 <MiApp_EstablishConnection+0x52>
        ConnMode = tmpConnectionMode;
    2d42:	466a      	mov	r2, sp
    2d44:	4b0a      	ldr	r3, [pc, #40]	; (2d70 <MiApp_EstablishConnection+0x100>)
    2d46:	7b12      	ldrb	r2, [r2, #12]
    2d48:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    2d4a:	4b13      	ldr	r3, [pc, #76]	; (2d98 <MiApp_EstablishConnection+0x128>)
    2d4c:	7818      	ldrb	r0, [r3, #0]
    2d4e:	e799      	b.n	2c84 <MiApp_EstablishConnection+0x14>
                t1.Val = t2.Val;
    2d50:	0007      	movs	r7, r0
    2d52:	2600      	movs	r6, #0
    2d54:	e7b2      	b.n	2cbc <MiApp_EstablishConnection+0x4c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    2d56:	4b11      	ldr	r3, [pc, #68]	; (2d9c <MiApp_EstablishConnection+0x12c>)
    2d58:	4798      	blx	r3
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d0e5      	beq.n	2d2a <MiApp_EstablishConnection+0xba>
    2d5e:	4b10      	ldr	r3, [pc, #64]	; (2da0 <MiApp_EstablishConnection+0x130>)
    2d60:	4798      	blx	r3
    2d62:	e7e2      	b.n	2d2a <MiApp_EstablishConnection+0xba>
                    P2PStatus.bits.SearchConnection = 0;
    2d64:	2210      	movs	r2, #16
    2d66:	7823      	ldrb	r3, [r4, #0]
                    return 0xFF;
    2d68:	20ff      	movs	r0, #255	; 0xff
                    P2PStatus.bits.SearchConnection = 0;
    2d6a:	4393      	bics	r3, r2
    2d6c:	7023      	strb	r3, [r4, #0]
                    return 0xFF;
    2d6e:	e789      	b.n	2c84 <MiApp_EstablishConnection+0x14>
    2d70:	20000014 	.word	0x20000014
    2d74:	00003131 	.word	0x00003131
    2d78:	200009c4 	.word	0x200009c4
    2d7c:	200009c8 	.word	0x200009c8
    2d80:	2000012b 	.word	0x2000012b
    2d84:	20000990 	.word	0x20000990
    2d88:	200009c5 	.word	0x200009c5
    2d8c:	20000994 	.word	0x20000994
    2d90:	00001a61 	.word	0x00001a61
    2d94:	00001e25 	.word	0x00001e25
    2d98:	20000914 	.word	0x20000914
    2d9c:	00001e41 	.word	0x00001e41
    2da0:	0000295d 	.word	0x0000295d

00002da4 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    2da4:	2803      	cmp	r0, #3
    2da6:	d808      	bhi.n	2dba <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    2da8:	4b04      	ldr	r3, [pc, #16]	; (2dbc <MiApp_ConnectionMode+0x18>)
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    2daa:	4a05      	ldr	r2, [pc, #20]	; (2dc0 <MiApp_ConnectionMode+0x1c>)
    ConnMode = Mode;
    2dac:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    2dae:	230f      	movs	r3, #15
    2db0:	7811      	ldrb	r1, [r2, #0]
    2db2:	0100      	lsls	r0, r0, #4
    2db4:	400b      	ands	r3, r1
    2db6:	4318      	orrs	r0, r3
    2db8:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
        nvmPutConnMode(&ConnMode);
    #endif
    2dba:	4770      	bx	lr
    2dbc:	20000014 	.word	0x20000014
    2dc0:	20000990 	.word	0x20000990

00002dc4 <rtc_overflow_callback>:

/*! \brief RTC timer overflow callback
 *
 */
void rtc_overflow_callback(void)
{
    2dc4:	b510      	push	{r4, lr}
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);	
    2dc6:	4802      	ldr	r0, [pc, #8]	; (2dd0 <rtc_overflow_callback+0xc>)
    2dc8:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <rtc_overflow_callback+0x10>)
    2dca:	4798      	blx	r3
	
}
    2dcc:	bd10      	pop	{r4, pc}
    2dce:	46c0      	nop			; (mov r8, r8)
    2dd0:	20000a0c 	.word	0x20000a0c
    2dd4:	000002bd 	.word	0x000002bd

00002dd8 <setSleepPeriod>:

}

void setSleepPeriod(uint32_t interval)
{
	interval = interval * 1000;
    2dd8:	21fa      	movs	r1, #250	; 0xfa
    2dda:	0089      	lsls	r1, r1, #2
    2ddc:	4341      	muls	r1, r0
{
    2dde:	b510      	push	{r4, lr}
	rtc_count_set_period(&rtc_instance, interval);
    2de0:	4c0d      	ldr	r4, [pc, #52]	; (2e18 <setSleepPeriod+0x40>)
    2de2:	b289      	uxth	r1, r1
    2de4:	4b0d      	ldr	r3, [pc, #52]	; (2e1c <setSleepPeriod+0x44>)
    2de6:	0020      	movs	r0, r4
    2de8:	4798      	blx	r3
	rtc_count_register_callback(
    2dea:	220a      	movs	r2, #10
    2dec:	490c      	ldr	r1, [pc, #48]	; (2e20 <setSleepPeriod+0x48>)
    2dee:	4b0d      	ldr	r3, [pc, #52]	; (2e24 <setSleepPeriod+0x4c>)
    2df0:	0020      	movs	r0, r4
    2df2:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    2df4:	210a      	movs	r1, #10
    2df6:	0020      	movs	r0, r4
    2df8:	4b0b      	ldr	r3, [pc, #44]	; (2e28 <setSleepPeriod+0x50>)
    2dfa:	4798      	blx	r3
	configure_rtc_callbacks();
	rtc_count_enable(&rtc_instance);
    2dfc:	4b0b      	ldr	r3, [pc, #44]	; (2e2c <setSleepPeriod+0x54>)
    2dfe:	0020      	movs	r0, r4
    2e00:	4798      	blx	r3
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
    2e02:	2280      	movs	r2, #128	; 0x80
    2e04:	2305      	movs	r3, #5
    2e06:	05d2      	lsls	r2, r2, #23
    2e08:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    2e0a:	7853      	ldrb	r3, [r2, #1]
    2e0c:	2b05      	cmp	r3, #5
    2e0e:	d1fc      	bne.n	2e0a <setSleepPeriod+0x32>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2e14:	bf30      	wfi

	/*put the MCU in standby mode with RTC as wakeup source*/
	system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
	system_sleep();
}
    2e16:	bd10      	pop	{r4, pc}
    2e18:	20000a0c 	.word	0x20000a0c
    2e1c:	00000421 	.word	0x00000421
    2e20:	00002dc5 	.word	0x00002dc5
    2e24:	00000445 	.word	0x00000445
    2e28:	00000481 	.word	0x00000481
    2e2c:	00000295 	.word	0x00000295

00002e30 <rtc_init>:

/*! \brief Initialize RTC timer
 *
 */
void rtc_init(void)
{
    2e30:	b510      	push	{r4, lr}
    2e32:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    2e34:	2300      	movs	r3, #0
    2e36:	466a      	mov	r2, sp

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    2e38:	4669      	mov	r1, sp
	config->clear_on_match      = false;
    2e3a:	70d3      	strb	r3, [r2, #3]
	config->enable_read_sync    = true;
    2e3c:	2201      	movs	r2, #1
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    2e3e:	2000      	movs	r0, #0
	config->enable_read_sync    = true;
    2e40:	710a      	strb	r2, [r1, #4]
		config->compare_values[i] = 0;
    2e42:	2100      	movs	r1, #0
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    2e44:	22a0      	movs	r2, #160	; 0xa0
    2e46:	9002      	str	r0, [sp, #8]
    2e48:	9103      	str	r1, [sp, #12]
    2e4a:	4669      	mov	r1, sp
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2e4c:	4c09      	ldr	r4, [pc, #36]	; (2e74 <rtc_init+0x44>)
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    2e4e:	00d2      	lsls	r2, r2, #3
    2e50:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    2e52:	708b      	strb	r3, [r1, #2]
    2e54:	466a      	mov	r2, sp
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2e56:	4908      	ldr	r1, [pc, #32]	; (2e78 <rtc_init+0x48>)
    2e58:	0020      	movs	r0, r4
    2e5a:	4b08      	ldr	r3, [pc, #32]	; (2e7c <rtc_init+0x4c>)
    2e5c:	4798      	blx	r3
	rtc_count_register_callback(
    2e5e:	220a      	movs	r2, #10
    2e60:	4907      	ldr	r1, [pc, #28]	; (2e80 <rtc_init+0x50>)
    2e62:	0020      	movs	r0, r4
    2e64:	4b07      	ldr	r3, [pc, #28]	; (2e84 <rtc_init+0x54>)
    2e66:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    2e68:	210a      	movs	r1, #10
    2e6a:	0020      	movs	r0, r4
    2e6c:	4b06      	ldr	r3, [pc, #24]	; (2e88 <rtc_init+0x58>)
    2e6e:	4798      	blx	r3
	configure_rtc_count();
}
    2e70:	b004      	add	sp, #16
    2e72:	bd10      	pop	{r4, pc}
    2e74:	20000a0c 	.word	0x20000a0c
    2e78:	40002000 	.word	0x40002000
    2e7c:	000002f1 	.word	0x000002f1
    2e80:	00002dc5 	.word	0x00002dc5
    2e84:	00000445 	.word	0x00000445
    2e88:	00000481 	.word	0x00000481

00002e8c <sal_aes_setup>:
    2e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e8e:	4657      	mov	r7, sl
    2e90:	4645      	mov	r5, r8
    2e92:	46de      	mov	lr, fp
    2e94:	464e      	mov	r6, r9
    2e96:	b5e0      	push	{r5, r6, r7, lr}
    2e98:	0014      	movs	r4, r2
    2e9a:	b085      	sub	sp, #20
    2e9c:	0007      	movs	r7, r0
    2e9e:	000d      	movs	r5, r1
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d018      	beq.n	2ed6 <sal_aes_setup+0x4a>
    2ea4:	2200      	movs	r2, #0
    2ea6:	4b4d      	ldr	r3, [pc, #308]	; (2fdc <sal_aes_setup+0x150>)
    2ea8:	0001      	movs	r1, r0
    2eaa:	701a      	strb	r2, [r3, #0]
    2eac:	4b4c      	ldr	r3, [pc, #304]	; (2fe0 <sal_aes_setup+0x154>)
    2eae:	3202      	adds	r2, #2
    2eb0:	701a      	strb	r2, [r3, #0]
    2eb2:	4e4c      	ldr	r6, [pc, #304]	; (2fe4 <sal_aes_setup+0x158>)
    2eb4:	320e      	adds	r2, #14
    2eb6:	484c      	ldr	r0, [pc, #304]	; (2fe8 <sal_aes_setup+0x15c>)
    2eb8:	47b0      	blx	r6
    2eba:	4b4c      	ldr	r3, [pc, #304]	; (2fec <sal_aes_setup+0x160>)
    2ebc:	0039      	movs	r1, r7
    2ebe:	4698      	mov	r8, r3
    2ec0:	2310      	movs	r3, #16
    2ec2:	4642      	mov	r2, r8
    2ec4:	7013      	strb	r3, [r2, #0]
    2ec6:	1c50      	adds	r0, r2, #1
    2ec8:	2210      	movs	r2, #16
    2eca:	47b0      	blx	r6
    2ecc:	2211      	movs	r2, #17
    2ece:	4641      	mov	r1, r8
    2ed0:	2083      	movs	r0, #131	; 0x83
    2ed2:	4b47      	ldr	r3, [pc, #284]	; (2ff0 <sal_aes_setup+0x164>)
    2ed4:	4798      	blx	r3
    2ed6:	2c00      	cmp	r4, #0
    2ed8:	d042      	beq.n	2f60 <sal_aes_setup+0xd4>
    2eda:	2c01      	cmp	r4, #1
    2edc:	d138      	bne.n	2f50 <sal_aes_setup+0xc4>
    2ede:	4f40      	ldr	r7, [pc, #256]	; (2fe0 <sal_aes_setup+0x154>)
    2ee0:	783b      	ldrb	r3, [r7, #0]
    2ee2:	2b01      	cmp	r3, #1
    2ee4:	d01d      	beq.n	2f22 <sal_aes_setup+0x96>
    2ee6:	4b41      	ldr	r3, [pc, #260]	; (2fec <sal_aes_setup+0x160>)
    2ee8:	4698      	mov	r8, r3
    2eea:	2310      	movs	r3, #16
    2eec:	469b      	mov	fp, r3
    2eee:	4643      	mov	r3, r8
    2ef0:	465a      	mov	r2, fp
    2ef2:	701a      	strb	r2, [r3, #0]
    2ef4:	4b39      	ldr	r3, [pc, #228]	; (2fdc <sal_aes_setup+0x150>)
    2ef6:	4699      	mov	r9, r3
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	469a      	mov	sl, r3
    2efc:	2b00      	cmp	r3, #0
    2efe:	d041      	beq.n	2f84 <sal_aes_setup+0xf8>
    2f00:	4b3b      	ldr	r3, [pc, #236]	; (2ff0 <sal_aes_setup+0x164>)
    2f02:	4e38      	ldr	r6, [pc, #224]	; (2fe4 <sal_aes_setup+0x158>)
    2f04:	469a      	mov	sl, r3
    2f06:	4b3b      	ldr	r3, [pc, #236]	; (2ff4 <sal_aes_setup+0x168>)
    2f08:	469b      	mov	fp, r3
    2f0a:	4643      	mov	r3, r8
    2f0c:	2210      	movs	r2, #16
    2f0e:	1c58      	adds	r0, r3, #1
    2f10:	4659      	mov	r1, fp
    2f12:	47b0      	blx	r6
    2f14:	2211      	movs	r2, #17
    2f16:	4641      	mov	r1, r8
    2f18:	2083      	movs	r0, #131	; 0x83
    2f1a:	47d0      	blx	sl
    2f1c:	2301      	movs	r3, #1
    2f1e:	464a      	mov	r2, r9
    2f20:	7013      	strb	r3, [r2, #0]
    2f22:	703c      	strb	r4, [r7, #0]
    2f24:	2d00      	cmp	r5, #0
    2f26:	d001      	beq.n	2f2c <sal_aes_setup+0xa0>
    2f28:	2d02      	cmp	r5, #2
    2f2a:	d111      	bne.n	2f50 <sal_aes_setup+0xc4>
    2f2c:	2370      	movs	r3, #112	; 0x70
    2f2e:	012d      	lsls	r5, r5, #4
    2f30:	401d      	ands	r5, r3
    2f32:	00e4      	lsls	r4, r4, #3
    2f34:	3b68      	subs	r3, #104	; 0x68
    2f36:	401c      	ands	r4, r3
    2f38:	432c      	orrs	r4, r5
    2f3a:	2580      	movs	r5, #128	; 0x80
    2f3c:	2201      	movs	r2, #1
    2f3e:	4b2b      	ldr	r3, [pc, #172]	; (2fec <sal_aes_setup+0x160>)
    2f40:	426d      	negs	r5, r5
    2f42:	701c      	strb	r4, [r3, #0]
    2f44:	432c      	orrs	r4, r5
    2f46:	745c      	strb	r4, [r3, #17]
    2f48:	4b2b      	ldr	r3, [pc, #172]	; (2ff8 <sal_aes_setup+0x16c>)
    2f4a:	2001      	movs	r0, #1
    2f4c:	701a      	strb	r2, [r3, #0]
    2f4e:	e000      	b.n	2f52 <sal_aes_setup+0xc6>
    2f50:	2000      	movs	r0, #0
    2f52:	b005      	add	sp, #20
    2f54:	bc3c      	pop	{r2, r3, r4, r5}
    2f56:	4690      	mov	r8, r2
    2f58:	4699      	mov	r9, r3
    2f5a:	46a2      	mov	sl, r4
    2f5c:	46ab      	mov	fp, r5
    2f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f60:	4f1f      	ldr	r7, [pc, #124]	; (2fe0 <sal_aes_setup+0x154>)
    2f62:	783b      	ldrb	r3, [r7, #0]
    2f64:	2b01      	cmp	r3, #1
    2f66:	d1dc      	bne.n	2f22 <sal_aes_setup+0x96>
    2f68:	4e20      	ldr	r6, [pc, #128]	; (2fec <sal_aes_setup+0x160>)
    2f6a:	330f      	adds	r3, #15
    2f6c:	7033      	strb	r3, [r6, #0]
    2f6e:	1c70      	adds	r0, r6, #1
    2f70:	2210      	movs	r2, #16
    2f72:	491d      	ldr	r1, [pc, #116]	; (2fe8 <sal_aes_setup+0x15c>)
    2f74:	4b1b      	ldr	r3, [pc, #108]	; (2fe4 <sal_aes_setup+0x158>)
    2f76:	4798      	blx	r3
    2f78:	2211      	movs	r2, #17
    2f7a:	0031      	movs	r1, r6
    2f7c:	2083      	movs	r0, #131	; 0x83
    2f7e:	4b1c      	ldr	r3, [pc, #112]	; (2ff0 <sal_aes_setup+0x164>)
    2f80:	4798      	blx	r3
    2f82:	e7ce      	b.n	2f22 <sal_aes_setup+0x96>
    2f84:	4643      	mov	r3, r8
    2f86:	4652      	mov	r2, sl
    2f88:	701a      	strb	r2, [r3, #0]
    2f8a:	2280      	movs	r2, #128	; 0x80
    2f8c:	745a      	strb	r2, [r3, #17]
    2f8e:	4b1a      	ldr	r3, [pc, #104]	; (2ff8 <sal_aes_setup+0x16c>)
    2f90:	4669      	mov	r1, sp
    2f92:	701c      	strb	r4, [r3, #0]
    2f94:	4643      	mov	r3, r8
    2f96:	2210      	movs	r2, #16
    2f98:	1c58      	adds	r0, r3, #1
    2f9a:	4e12      	ldr	r6, [pc, #72]	; (2fe4 <sal_aes_setup+0x158>)
    2f9c:	47b0      	blx	r6
    2f9e:	4641      	mov	r1, r8
    2fa0:	2212      	movs	r2, #18
    2fa2:	2083      	movs	r0, #131	; 0x83
    2fa4:	4b15      	ldr	r3, [pc, #84]	; (2ffc <sal_aes_setup+0x170>)
    2fa6:	4798      	blx	r3
    2fa8:	4652      	mov	r2, sl
    2faa:	4b13      	ldr	r3, [pc, #76]	; (2ff8 <sal_aes_setup+0x16c>)
    2fac:	2018      	movs	r0, #24
    2fae:	701a      	strb	r2, [r3, #0]
    2fb0:	4643      	mov	r3, r8
    2fb2:	2280      	movs	r2, #128	; 0x80
    2fb4:	745a      	strb	r2, [r3, #17]
    2fb6:	4b12      	ldr	r3, [pc, #72]	; (3000 <sal_aes_setup+0x174>)
    2fb8:	4798      	blx	r3
    2fba:	4643      	mov	r3, r8
    2fbc:	465a      	mov	r2, fp
    2fbe:	701a      	strb	r2, [r3, #0]
    2fc0:	4b0b      	ldr	r3, [pc, #44]	; (2ff0 <sal_aes_setup+0x164>)
    2fc2:	4641      	mov	r1, r8
    2fc4:	2201      	movs	r2, #1
    2fc6:	2083      	movs	r0, #131	; 0x83
    2fc8:	469a      	mov	sl, r3
    2fca:	4798      	blx	r3
    2fcc:	4b09      	ldr	r3, [pc, #36]	; (2ff4 <sal_aes_setup+0x168>)
    2fce:	2210      	movs	r2, #16
    2fd0:	469b      	mov	fp, r3
    2fd2:	0019      	movs	r1, r3
    2fd4:	2084      	movs	r0, #132	; 0x84
    2fd6:	4b0b      	ldr	r3, [pc, #44]	; (3004 <sal_aes_setup+0x178>)
    2fd8:	4798      	blx	r3
    2fda:	e796      	b.n	2f0a <sal_aes_setup+0x7e>
    2fdc:	2000013e 	.word	0x2000013e
    2fe0:	20000015 	.word	0x20000015
    2fe4:	00007ead 	.word	0x00007ead
    2fe8:	20000150 	.word	0x20000150
    2fec:	2000012c 	.word	0x2000012c
    2ff0:	00005939 	.word	0x00005939
    2ff4:	20000140 	.word	0x20000140
    2ff8:	20000160 	.word	0x20000160
    2ffc:	00005c51 	.word	0x00005c51
    3000:	00003185 	.word	0x00003185
    3004:	00005ac1 	.word	0x00005ac1

00003008 <sal_aes_wrrd>:
    3008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300a:	46ce      	mov	lr, r9
    300c:	4647      	mov	r7, r8
    300e:	4c16      	ldr	r4, [pc, #88]	; (3068 <sal_aes_wrrd+0x60>)
    3010:	b580      	push	{r7, lr}
    3012:	1c67      	adds	r7, r4, #1
    3014:	000e      	movs	r6, r1
    3016:	2210      	movs	r2, #16
    3018:	0001      	movs	r1, r0
    301a:	4d14      	ldr	r5, [pc, #80]	; (306c <sal_aes_wrrd+0x64>)
    301c:	0038      	movs	r0, r7
    301e:	47a8      	blx	r5
    3020:	7c63      	ldrb	r3, [r4, #17]
    3022:	4699      	mov	r9, r3
    3024:	4b12      	ldr	r3, [pc, #72]	; (3070 <sal_aes_wrrd+0x68>)
    3026:	4698      	mov	r8, r3
    3028:	781b      	ldrb	r3, [r3, #0]
    302a:	2b00      	cmp	r3, #0
    302c:	d016      	beq.n	305c <sal_aes_wrrd+0x54>
    302e:	2212      	movs	r2, #18
    3030:	4b10      	ldr	r3, [pc, #64]	; (3074 <sal_aes_wrrd+0x6c>)
    3032:	0021      	movs	r1, r4
    3034:	2083      	movs	r0, #131	; 0x83
    3036:	4798      	blx	r3
    3038:	2300      	movs	r3, #0
    303a:	4642      	mov	r2, r8
    303c:	7013      	strb	r3, [r2, #0]
    303e:	2e00      	cmp	r6, #0
    3040:	d003      	beq.n	304a <sal_aes_wrrd+0x42>
    3042:	1c61      	adds	r1, r4, #1
    3044:	2210      	movs	r2, #16
    3046:	0030      	movs	r0, r6
    3048:	47a8      	blx	r5
    304a:	464b      	mov	r3, r9
    304c:	2018      	movs	r0, #24
    304e:	7463      	strb	r3, [r4, #17]
    3050:	4b09      	ldr	r3, [pc, #36]	; (3078 <sal_aes_wrrd+0x70>)
    3052:	4798      	blx	r3
    3054:	bc0c      	pop	{r2, r3}
    3056:	4690      	mov	r8, r2
    3058:	4699      	mov	r9, r3
    305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305c:	2211      	movs	r2, #17
    305e:	0039      	movs	r1, r7
    3060:	2084      	movs	r0, #132	; 0x84
    3062:	4b04      	ldr	r3, [pc, #16]	; (3074 <sal_aes_wrrd+0x6c>)
    3064:	4798      	blx	r3
    3066:	e7ea      	b.n	303e <sal_aes_wrrd+0x36>
    3068:	2000012c 	.word	0x2000012c
    306c:	00007ead 	.word	0x00007ead
    3070:	20000160 	.word	0x20000160
    3074:	00005c51 	.word	0x00005c51
    3078:	00003185 	.word	0x00003185

0000307c <sal_aes_read>:
    307c:	b510      	push	{r4, lr}
    307e:	0001      	movs	r1, r0
    3080:	2210      	movs	r2, #16
    3082:	2084      	movs	r0, #132	; 0x84
    3084:	4b01      	ldr	r3, [pc, #4]	; (308c <sal_aes_read+0x10>)
    3086:	4798      	blx	r3
    3088:	bd10      	pop	{r4, pc}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	00005ac1 	.word	0x00005ac1

00003090 <configure_tc>:
struct tc_module tc_instance;


//! [setup]
void configure_tc(void)
{
    3090:	b510      	push	{r4, lr}
	//! [setup_config]
	struct tc_config config_tc;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_reset(&tc_instance);
    3092:	4c22      	ldr	r4, [pc, #136]	; (311c <configure_tc+0x8c>)
{
    3094:	b08e      	sub	sp, #56	; 0x38
	tc_reset(&tc_instance);
    3096:	4b22      	ldr	r3, [pc, #136]	; (3120 <configure_tc+0x90>)
    3098:	0020      	movs	r0, r4
    309a:	4798      	blx	r3

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    309c:	2300      	movs	r3, #0
    309e:	466a      	mov	r2, sp
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    30a0:	2000      	movs	r0, #0
    30a2:	2100      	movs	r1, #0
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    30a4:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    30a6:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    30a8:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    30aa:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    30ac:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    30ae:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    30b0:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    30b2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    30b4:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    30b6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    30b8:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    30ba:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    30bc:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    30be:	9008      	str	r0, [sp, #32]
    30c0:	9109      	str	r1, [sp, #36]	; 0x24
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    30c2:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    30c4:	4669      	mov	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    30c6:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    30c8:	8593      	strh	r3, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    30ca:	2200      	movs	r2, #0
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    30cc:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    30ce:	9306      	str	r3, [sp, #24]
	config->double_buffering_enabled = false;
    30d0:	3334      	adds	r3, #52	; 0x34
    30d2:	54ca      	strb	r2, [r1, r3]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]  // 32 bit Timer 
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    30d4:	3b2c      	subs	r3, #44	; 0x2c
    30d6:	70cb      	strb	r3, [r1, #3]
	config_tc.clock_source = GCLK_GENERATOR_1;
    30d8:	3b07      	subs	r3, #7
    30da:	700b      	strb	r3, [r1, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64;
    30dc:	23a0      	movs	r3, #160	; 0xa0
    30de:	00db      	lsls	r3, r3, #3
    30e0:	808b      	strh	r3, [r1, #4]
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    30e2:	466a      	mov	r2, sp

	//! [setup_set_config]
	tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
    30e4:	490f      	ldr	r1, [pc, #60]	; (3124 <configure_tc+0x94>)
    30e6:	0020      	movs	r0, r4
    30e8:	4b0f      	ldr	r3, [pc, #60]	; (3128 <configure_tc+0x98>)
    30ea:	4798      	blx	r3
    30ec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    30ee:	6913      	ldr	r3, [r2, #16]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    30f0:	2b00      	cmp	r3, #0
    30f2:	d1fc      	bne.n	30ee <configure_tc+0x5e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    30f4:	2102      	movs	r1, #2
    30f6:	6813      	ldr	r3, [r2, #0]

	//! [setup_enable]
	tc_enable(&tc_instance);
	//! [setup_enable]
	// Set the Timer Counter value to Zero 
	tc_set_count_value(&tc_instance, 0);
    30f8:	0020      	movs	r0, r4
    30fa:	430b      	orrs	r3, r1
    30fc:	6013      	str	r3, [r2, #0]
    30fe:	2100      	movs	r1, #0
    3100:	4b0a      	ldr	r3, [pc, #40]	; (312c <configure_tc+0x9c>)
    3102:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3104:	6823      	ldr	r3, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3106:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    3108:	2a00      	cmp	r2, #0
    310a:	d1fc      	bne.n	3106 <configure_tc+0x76>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    310c:	711a      	strb	r2, [r3, #4]
	return (tc_module->SYNCBUSY.reg);
    310e:	691a      	ldr	r2, [r3, #16]

	while (tc_is_syncing(module_inst)) {
    3110:	2a00      	cmp	r2, #0
    3112:	d1fc      	bne.n	310e <configure_tc+0x7e>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    3114:	3220      	adds	r2, #32
    3116:	715a      	strb	r2, [r3, #5]
		
	/* Start timer */
	tc_start_counter(&tc_instance);
}
    3118:	b00e      	add	sp, #56	; 0x38
    311a:	bd10      	pop	{r4, pc}
    311c:	20000a5c 	.word	0x20000a5c
    3120:	00004ff5 	.word	0x00004ff5
    3124:	43000800 	.word	0x43000800
    3128:	00004c21 	.word	0x00004c21
    312c:	00004f85 	.word	0x00004f85

00003130 <MiWi_TickGet>:
{
	return tc_get_count_value(&tc_instance);
}

uint32_t MiWi_TickGet(void)
{
    3130:	b510      	push	{r4, lr}
	MIWI_TICK count;
	count.Val = tc_get_count_value(&tc_instance);
    3132:	4802      	ldr	r0, [pc, #8]	; (313c <MiWi_TickGet+0xc>)
    3134:	4b02      	ldr	r3, [pc, #8]	; (3140 <MiWi_TickGet+0x10>)
    3136:	4798      	blx	r3
	return count.Val;
    3138:	bd10      	pop	{r4, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	20000a5c 	.word	0x20000a5c
    3140:	00004fb5 	.word	0x00004fb5

00003144 <delay_init>:
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4b09      	ldr	r3, [pc, #36]	; (316c <delay_init+0x28>)
    3148:	2000      	movs	r0, #0
    314a:	4798      	blx	r3
    314c:	21fa      	movs	r1, #250	; 0xfa
    314e:	4c08      	ldr	r4, [pc, #32]	; (3170 <delay_init+0x2c>)
    3150:	0089      	lsls	r1, r1, #2
    3152:	0005      	movs	r5, r0
    3154:	47a0      	blx	r4
    3156:	4b07      	ldr	r3, [pc, #28]	; (3174 <delay_init+0x30>)
    3158:	4907      	ldr	r1, [pc, #28]	; (3178 <delay_init+0x34>)
    315a:	6018      	str	r0, [r3, #0]
    315c:	0028      	movs	r0, r5
    315e:	47a0      	blx	r4
    3160:	2205      	movs	r2, #5
    3162:	4b06      	ldr	r3, [pc, #24]	; (317c <delay_init+0x38>)
    3164:	6018      	str	r0, [r3, #0]
    3166:	4b06      	ldr	r3, [pc, #24]	; (3180 <delay_init+0x3c>)
    3168:	601a      	str	r2, [r3, #0]
    316a:	bd70      	pop	{r4, r5, r6, pc}
    316c:	00004899 	.word	0x00004899
    3170:	000060f5 	.word	0x000060f5
    3174:	20000018 	.word	0x20000018
    3178:	000f4240 	.word	0x000f4240
    317c:	2000001c 	.word	0x2000001c
    3180:	e000e010 	.word	0xe000e010

00003184 <delay_cycles_us>:
    3184:	2180      	movs	r1, #128	; 0x80
    3186:	b530      	push	{r4, r5, lr}
    3188:	2500      	movs	r5, #0
    318a:	4b08      	ldr	r3, [pc, #32]	; (31ac <delay_cycles_us+0x28>)
    318c:	4a08      	ldr	r2, [pc, #32]	; (31b0 <delay_cycles_us+0x2c>)
    318e:	681c      	ldr	r4, [r3, #0]
    3190:	0249      	lsls	r1, r1, #9
    3192:	3801      	subs	r0, #1
    3194:	d308      	bcc.n	31a8 <delay_cycles_us+0x24>
    3196:	2c00      	cmp	r4, #0
    3198:	d0fb      	beq.n	3192 <delay_cycles_us+0xe>
    319a:	6054      	str	r4, [r2, #4]
    319c:	6095      	str	r5, [r2, #8]
    319e:	6813      	ldr	r3, [r2, #0]
    31a0:	420b      	tst	r3, r1
    31a2:	d0fc      	beq.n	319e <delay_cycles_us+0x1a>
    31a4:	3801      	subs	r0, #1
    31a6:	d2f6      	bcs.n	3196 <delay_cycles_us+0x12>
    31a8:	bd30      	pop	{r4, r5, pc}
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	2000001c 	.word	0x2000001c
    31b0:	e000e010 	.word	0xe000e010

000031b4 <delay_cycles_ms>:
    31b4:	2180      	movs	r1, #128	; 0x80
    31b6:	b530      	push	{r4, r5, lr}
    31b8:	2500      	movs	r5, #0
    31ba:	4b08      	ldr	r3, [pc, #32]	; (31dc <delay_cycles_ms+0x28>)
    31bc:	4a08      	ldr	r2, [pc, #32]	; (31e0 <delay_cycles_ms+0x2c>)
    31be:	681c      	ldr	r4, [r3, #0]
    31c0:	0249      	lsls	r1, r1, #9
    31c2:	3801      	subs	r0, #1
    31c4:	d308      	bcc.n	31d8 <delay_cycles_ms+0x24>
    31c6:	2c00      	cmp	r4, #0
    31c8:	d0fb      	beq.n	31c2 <delay_cycles_ms+0xe>
    31ca:	6054      	str	r4, [r2, #4]
    31cc:	6095      	str	r5, [r2, #8]
    31ce:	6813      	ldr	r3, [r2, #0]
    31d0:	420b      	tst	r3, r1
    31d2:	d0fc      	beq.n	31ce <delay_cycles_ms+0x1a>
    31d4:	3801      	subs	r0, #1
    31d6:	d2f6      	bcs.n	31c6 <delay_cycles_ms+0x12>
    31d8:	bd30      	pop	{r4, r5, pc}
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	20000018 	.word	0x20000018
    31e0:	e000e010 	.word	0xe000e010

000031e4 <cpu_irq_enter_critical>:
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <cpu_irq_enter_critical+0x30>)
    31e6:	681a      	ldr	r2, [r3, #0]
    31e8:	2a00      	cmp	r2, #0
    31ea:	d105      	bne.n	31f8 <cpu_irq_enter_critical+0x14>
    31ec:	f3ef 8110 	mrs	r1, PRIMASK
    31f0:	2900      	cmp	r1, #0
    31f2:	d005      	beq.n	3200 <cpu_irq_enter_critical+0x1c>
    31f4:	4908      	ldr	r1, [pc, #32]	; (3218 <cpu_irq_enter_critical+0x34>)
    31f6:	700a      	strb	r2, [r1, #0]
    31f8:	681a      	ldr	r2, [r3, #0]
    31fa:	3201      	adds	r2, #1
    31fc:	601a      	str	r2, [r3, #0]
    31fe:	4770      	bx	lr
    3200:	b672      	cpsid	i
    3202:	f3bf 8f5f 	dmb	sy
    3206:	4a05      	ldr	r2, [pc, #20]	; (321c <cpu_irq_enter_critical+0x38>)
    3208:	7011      	strb	r1, [r2, #0]
    320a:	4a03      	ldr	r2, [pc, #12]	; (3218 <cpu_irq_enter_critical+0x34>)
    320c:	3101      	adds	r1, #1
    320e:	7011      	strb	r1, [r2, #0]
    3210:	e7f2      	b.n	31f8 <cpu_irq_enter_critical+0x14>
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	20000164 	.word	0x20000164
    3218:	20000168 	.word	0x20000168
    321c:	20000020 	.word	0x20000020

00003220 <cpu_irq_leave_critical>:
    3220:	4b08      	ldr	r3, [pc, #32]	; (3244 <cpu_irq_leave_critical+0x24>)
    3222:	681a      	ldr	r2, [r3, #0]
    3224:	3a01      	subs	r2, #1
    3226:	601a      	str	r2, [r3, #0]
    3228:	681b      	ldr	r3, [r3, #0]
    322a:	2b00      	cmp	r3, #0
    322c:	d109      	bne.n	3242 <cpu_irq_leave_critical+0x22>
    322e:	4b06      	ldr	r3, [pc, #24]	; (3248 <cpu_irq_leave_critical+0x28>)
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b00      	cmp	r3, #0
    3234:	d005      	beq.n	3242 <cpu_irq_leave_critical+0x22>
    3236:	2201      	movs	r2, #1
    3238:	4b04      	ldr	r3, [pc, #16]	; (324c <cpu_irq_leave_critical+0x2c>)
    323a:	701a      	strb	r2, [r3, #0]
    323c:	f3bf 8f5f 	dmb	sy
    3240:	b662      	cpsie	i
    3242:	4770      	bx	lr
    3244:	20000164 	.word	0x20000164
    3248:	20000168 	.word	0x20000168
    324c:	20000020 	.word	0x20000020

00003250 <system_board_init>:
    3250:	b5f0      	push	{r4, r5, r6, r7, lr}
    3252:	46c6      	mov	lr, r8
    3254:	b500      	push	{lr}
    3256:	b082      	sub	sp, #8
    3258:	2501      	movs	r5, #1
    325a:	466b      	mov	r3, sp
    325c:	2600      	movs	r6, #0
    325e:	4c2e      	ldr	r4, [pc, #184]	; (3318 <system_board_init+0xc8>)
    3260:	4669      	mov	r1, sp
    3262:	2013      	movs	r0, #19
    3264:	705d      	strb	r5, [r3, #1]
    3266:	709e      	strb	r6, [r3, #2]
    3268:	701d      	strb	r5, [r3, #0]
    326a:	47a0      	blx	r4
    326c:	4b2b      	ldr	r3, [pc, #172]	; (331c <system_board_init+0xcc>)
    326e:	4669      	mov	r1, sp
    3270:	4698      	mov	r8, r3
    3272:	2380      	movs	r3, #128	; 0x80
    3274:	4642      	mov	r2, r8
    3276:	031b      	lsls	r3, r3, #12
    3278:	6193      	str	r3, [r2, #24]
    327a:	466b      	mov	r3, sp
    327c:	2012      	movs	r0, #18
    327e:	2780      	movs	r7, #128	; 0x80
    3280:	701d      	strb	r5, [r3, #0]
    3282:	47a0      	blx	r4
    3284:	4643      	mov	r3, r8
    3286:	02ff      	lsls	r7, r7, #11
    3288:	619f      	str	r7, [r3, #24]
    328a:	466b      	mov	r3, sp
    328c:	4669      	mov	r1, sp
    328e:	201c      	movs	r0, #28
    3290:	701e      	strb	r6, [r3, #0]
    3292:	705d      	strb	r5, [r3, #1]
    3294:	47a0      	blx	r4
    3296:	466b      	mov	r3, sp
    3298:	4669      	mov	r1, sp
    329a:	2052      	movs	r0, #82	; 0x52
    329c:	705d      	strb	r5, [r3, #1]
    329e:	709e      	strb	r6, [r3, #2]
    32a0:	701d      	strb	r5, [r3, #0]
    32a2:	47a0      	blx	r4
    32a4:	4669      	mov	r1, sp
    32a6:	203e      	movs	r0, #62	; 0x3e
    32a8:	47a0      	blx	r4
    32aa:	4669      	mov	r1, sp
    32ac:	203f      	movs	r0, #63	; 0x3f
    32ae:	47a0      	blx	r4
    32b0:	4669      	mov	r1, sp
    32b2:	202f      	movs	r0, #47	; 0x2f
    32b4:	47a0      	blx	r4
    32b6:	4669      	mov	r1, sp
    32b8:	2014      	movs	r0, #20
    32ba:	47a0      	blx	r4
    32bc:	2280      	movs	r2, #128	; 0x80
    32be:	4b18      	ldr	r3, [pc, #96]	; (3320 <system_board_init+0xd0>)
    32c0:	05d2      	lsls	r2, r2, #23
    32c2:	619f      	str	r7, [r3, #24]
    32c4:	4b17      	ldr	r3, [pc, #92]	; (3324 <system_board_init+0xd4>)
    32c6:	2780      	movs	r7, #128	; 0x80
    32c8:	619a      	str	r2, [r3, #24]
    32ca:	2280      	movs	r2, #128	; 0x80
    32cc:	023f      	lsls	r7, r7, #8
    32ce:	0612      	lsls	r2, r2, #24
    32d0:	619a      	str	r2, [r3, #24]
    32d2:	619f      	str	r7, [r3, #24]
    32d4:	2380      	movs	r3, #128	; 0x80
    32d6:	4642      	mov	r2, r8
    32d8:	035b      	lsls	r3, r3, #13
    32da:	6193      	str	r3, [r2, #24]
    32dc:	466b      	mov	r3, sp
    32de:	4669      	mov	r1, sp
    32e0:	2053      	movs	r0, #83	; 0x53
    32e2:	701e      	strb	r6, [r3, #0]
    32e4:	47a0      	blx	r4
    32e6:	4b10      	ldr	r3, [pc, #64]	; (3328 <system_board_init+0xd8>)
    32e8:	ac01      	add	r4, sp, #4
    32ea:	69da      	ldr	r2, [r3, #28]
    32ec:	0021      	movs	r1, r4
    32ee:	4317      	orrs	r7, r2
    32f0:	2204      	movs	r2, #4
    32f2:	61df      	str	r7, [r3, #28]
    32f4:	4b0d      	ldr	r3, [pc, #52]	; (332c <system_board_init+0xdc>)
    32f6:	2009      	movs	r0, #9
    32f8:	801a      	strh	r2, [r3, #0]
    32fa:	2305      	movs	r3, #5
    32fc:	70a5      	strb	r5, [r4, #2]
    32fe:	7065      	strb	r5, [r4, #1]
    3300:	4d0b      	ldr	r5, [pc, #44]	; (3330 <system_board_init+0xe0>)
    3302:	7023      	strb	r3, [r4, #0]
    3304:	70e6      	strb	r6, [r4, #3]
    3306:	47a8      	blx	r5
    3308:	0021      	movs	r1, r4
    330a:	200c      	movs	r0, #12
    330c:	47a8      	blx	r5
    330e:	b002      	add	sp, #8
    3310:	bc04      	pop	{r2}
    3312:	4690      	mov	r8, r2
    3314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	00003511 	.word	0x00003511
    331c:	40002800 	.word	0x40002800
    3320:	40002900 	.word	0x40002900
    3324:	40002880 	.word	0x40002880
    3328:	40000400 	.word	0x40000400
    332c:	42003c00 	.word	0x42003c00
    3330:	00004a01 	.word	0x00004a01

00003334 <extint_register_callback>:
    3334:	2317      	movs	r3, #23
    3336:	2a00      	cmp	r2, #0
    3338:	d001      	beq.n	333e <extint_register_callback+0xa>
    333a:	0018      	movs	r0, r3
    333c:	4770      	bx	lr
    333e:	4a06      	ldr	r2, [pc, #24]	; (3358 <extint_register_callback+0x24>)
    3340:	0089      	lsls	r1, r1, #2
    3342:	588b      	ldr	r3, [r1, r2]
    3344:	2b00      	cmp	r3, #0
    3346:	d003      	beq.n	3350 <extint_register_callback+0x1c>
    3348:	4283      	cmp	r3, r0
    334a:	d003      	beq.n	3354 <extint_register_callback+0x20>
    334c:	231d      	movs	r3, #29
    334e:	e7f4      	b.n	333a <extint_register_callback+0x6>
    3350:	5088      	str	r0, [r1, r2]
    3352:	e7f2      	b.n	333a <extint_register_callback+0x6>
    3354:	2300      	movs	r3, #0
    3356:	e7f0      	b.n	333a <extint_register_callback+0x6>
    3358:	20000a7c 	.word	0x20000a7c

0000335c <extint_chan_enable_callback>:
    335c:	2317      	movs	r3, #23
    335e:	2900      	cmp	r1, #0
    3360:	d001      	beq.n	3366 <extint_chan_enable_callback+0xa>
    3362:	0018      	movs	r0, r3
    3364:	4770      	bx	lr
    3366:	281f      	cmp	r0, #31
    3368:	d805      	bhi.n	3376 <extint_chan_enable_callback+0x1a>
    336a:	3b16      	subs	r3, #22
    336c:	4083      	lsls	r3, r0
    336e:	4a03      	ldr	r2, [pc, #12]	; (337c <extint_chan_enable_callback+0x20>)
    3370:	6113      	str	r3, [r2, #16]
    3372:	2300      	movs	r3, #0
    3374:	e7f5      	b.n	3362 <extint_chan_enable_callback+0x6>
    3376:	6109      	str	r1, [r1, #16]
    3378:	deff      	udf	#255	; 0xff
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	40002400 	.word	0x40002400

00003380 <extint_chan_disable_callback>:
    3380:	2317      	movs	r3, #23
    3382:	2900      	cmp	r1, #0
    3384:	d001      	beq.n	338a <extint_chan_disable_callback+0xa>
    3386:	0018      	movs	r0, r3
    3388:	4770      	bx	lr
    338a:	281f      	cmp	r0, #31
    338c:	d805      	bhi.n	339a <extint_chan_disable_callback+0x1a>
    338e:	3b16      	subs	r3, #22
    3390:	4083      	lsls	r3, r0
    3392:	4a03      	ldr	r2, [pc, #12]	; (33a0 <extint_chan_disable_callback+0x20>)
    3394:	60d3      	str	r3, [r2, #12]
    3396:	2300      	movs	r3, #0
    3398:	e7f5      	b.n	3386 <extint_chan_disable_callback+0x6>
    339a:	60c9      	str	r1, [r1, #12]
    339c:	deff      	udf	#255	; 0xff
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	40002400 	.word	0x40002400

000033a4 <EIC_Handler>:
    33a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33a6:	2300      	movs	r3, #0
    33a8:	2601      	movs	r6, #1
    33aa:	4c0b      	ldr	r4, [pc, #44]	; (33d8 <EIC_Handler+0x34>)
    33ac:	4d0b      	ldr	r5, [pc, #44]	; (33dc <EIC_Handler+0x38>)
    33ae:	4f0c      	ldr	r7, [pc, #48]	; (33e0 <EIC_Handler+0x3c>)
    33b0:	7023      	strb	r3, [r4, #0]
    33b2:	0032      	movs	r2, r6
    33b4:	409a      	lsls	r2, r3
    33b6:	6969      	ldr	r1, [r5, #20]
    33b8:	4211      	tst	r1, r2
    33ba:	d006      	beq.n	33ca <EIC_Handler+0x26>
    33bc:	616a      	str	r2, [r5, #20]
    33be:	009b      	lsls	r3, r3, #2
    33c0:	59db      	ldr	r3, [r3, r7]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d000      	beq.n	33c8 <EIC_Handler+0x24>
    33c6:	4798      	blx	r3
    33c8:	7823      	ldrb	r3, [r4, #0]
    33ca:	3301      	adds	r3, #1
    33cc:	b2db      	uxtb	r3, r3
    33ce:	7023      	strb	r3, [r4, #0]
    33d0:	2b0f      	cmp	r3, #15
    33d2:	d9ee      	bls.n	33b2 <EIC_Handler+0xe>
    33d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	20000a78 	.word	0x20000a78
    33dc:	40002400 	.word	0x40002400
    33e0:	20000a7c 	.word	0x20000a7c

000033e4 <_system_extint_init>:
    33e4:	2380      	movs	r3, #128	; 0x80
    33e6:	b510      	push	{r4, lr}
    33e8:	4a15      	ldr	r2, [pc, #84]	; (3440 <_system_extint_init+0x5c>)
    33ea:	009b      	lsls	r3, r3, #2
    33ec:	6951      	ldr	r1, [r2, #20]
    33ee:	4c15      	ldr	r4, [pc, #84]	; (3444 <_system_extint_init+0x60>)
    33f0:	430b      	orrs	r3, r1
    33f2:	6153      	str	r3, [r2, #20]
    33f4:	2201      	movs	r2, #1
    33f6:	2101      	movs	r1, #1
    33f8:	7823      	ldrb	r3, [r4, #0]
    33fa:	4313      	orrs	r3, r2
    33fc:	7023      	strb	r3, [r4, #0]
    33fe:	3201      	adds	r2, #1
    3400:	6863      	ldr	r3, [r4, #4]
    3402:	421a      	tst	r2, r3
    3404:	d1fc      	bne.n	3400 <_system_extint_init+0x1c>
    3406:	6863      	ldr	r3, [r4, #4]
    3408:	4219      	tst	r1, r3
    340a:	d1f9      	bne.n	3400 <_system_extint_init+0x1c>
    340c:	2210      	movs	r2, #16
    340e:	7823      	ldrb	r3, [r4, #0]
    3410:	2100      	movs	r1, #0
    3412:	4313      	orrs	r3, r2
    3414:	7023      	strb	r3, [r4, #0]
    3416:	2240      	movs	r2, #64	; 0x40
    3418:	4b0b      	ldr	r3, [pc, #44]	; (3448 <_system_extint_init+0x64>)
    341a:	480c      	ldr	r0, [pc, #48]	; (344c <_system_extint_init+0x68>)
    341c:	4798      	blx	r3
    341e:	2208      	movs	r2, #8
    3420:	2102      	movs	r1, #2
    3422:	2001      	movs	r0, #1
    3424:	4b0a      	ldr	r3, [pc, #40]	; (3450 <_system_extint_init+0x6c>)
    3426:	601a      	str	r2, [r3, #0]
    3428:	7823      	ldrb	r3, [r4, #0]
    342a:	3a06      	subs	r2, #6
    342c:	4313      	orrs	r3, r2
    342e:	7023      	strb	r3, [r4, #0]
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <_system_extint_init+0x60>)
    3432:	685a      	ldr	r2, [r3, #4]
    3434:	4211      	tst	r1, r2
    3436:	d1fc      	bne.n	3432 <_system_extint_init+0x4e>
    3438:	685a      	ldr	r2, [r3, #4]
    343a:	4210      	tst	r0, r2
    343c:	d1f9      	bne.n	3432 <_system_extint_init+0x4e>
    343e:	bd10      	pop	{r4, pc}
    3440:	40000400 	.word	0x40000400
    3444:	40002400 	.word	0x40002400
    3448:	00007ebf 	.word	0x00007ebf
    344c:	20000a7c 	.word	0x20000a7c
    3450:	e000e100 	.word	0xe000e100

00003454 <extint_chan_get_config_defaults>:
    3454:	2201      	movs	r2, #1
    3456:	2300      	movs	r3, #0
    3458:	7202      	strb	r2, [r0, #8]
    345a:	3201      	adds	r2, #1
    345c:	6003      	str	r3, [r0, #0]
    345e:	6043      	str	r3, [r0, #4]
    3460:	7283      	strb	r3, [r0, #10]
    3462:	72c2      	strb	r2, [r0, #11]
    3464:	7243      	strb	r3, [r0, #9]
    3466:	4770      	bx	lr

00003468 <extint_chan_set_config>:
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	000c      	movs	r4, r1
    346c:	2102      	movs	r1, #2
    346e:	0005      	movs	r5, r0
    3470:	2001      	movs	r0, #1
    3472:	4a25      	ldr	r2, [pc, #148]	; (3508 <extint_chan_set_config+0xa0>)
    3474:	b083      	sub	sp, #12
    3476:	7813      	ldrb	r3, [r2, #0]
    3478:	438b      	bics	r3, r1
    347a:	7013      	strb	r3, [r2, #0]
    347c:	6853      	ldr	r3, [r2, #4]
    347e:	4219      	tst	r1, r3
    3480:	d1fc      	bne.n	347c <extint_chan_set_config+0x14>
    3482:	6853      	ldr	r3, [r2, #4]
    3484:	4003      	ands	r3, r0
    3486:	d1f9      	bne.n	347c <extint_chan_set_config+0x14>
    3488:	a901      	add	r1, sp, #4
    348a:	704b      	strb	r3, [r1, #1]
    348c:	70cb      	strb	r3, [r1, #3]
    348e:	7923      	ldrb	r3, [r4, #4]
    3490:	7820      	ldrb	r0, [r4, #0]
    3492:	700b      	strb	r3, [r1, #0]
    3494:	7a23      	ldrb	r3, [r4, #8]
    3496:	708b      	strb	r3, [r1, #2]
    3498:	4b1c      	ldr	r3, [pc, #112]	; (350c <extint_chan_set_config+0xa4>)
    349a:	4798      	blx	r3
    349c:	2100      	movs	r1, #0
    349e:	2d1f      	cmp	r5, #31
    34a0:	d800      	bhi.n	34a4 <extint_chan_set_config+0x3c>
    34a2:	4919      	ldr	r1, [pc, #100]	; (3508 <extint_chan_set_config+0xa0>)
    34a4:	2207      	movs	r2, #7
    34a6:	7aa3      	ldrb	r3, [r4, #10]
    34a8:	402a      	ands	r2, r5
    34aa:	0092      	lsls	r2, r2, #2
    34ac:	7ae7      	ldrb	r7, [r4, #11]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d001      	beq.n	34b6 <extint_chan_set_config+0x4e>
    34b2:	2308      	movs	r3, #8
    34b4:	431f      	orrs	r7, r3
    34b6:	260f      	movs	r6, #15
    34b8:	4097      	lsls	r7, r2
    34ba:	4096      	lsls	r6, r2
    34bc:	003a      	movs	r2, r7
    34be:	08eb      	lsrs	r3, r5, #3
    34c0:	009b      	lsls	r3, r3, #2
    34c2:	18cb      	adds	r3, r1, r3
    34c4:	69d8      	ldr	r0, [r3, #28]
    34c6:	43b0      	bics	r0, r6
    34c8:	4302      	orrs	r2, r0
    34ca:	61da      	str	r2, [r3, #28]
    34cc:	7a63      	ldrb	r3, [r4, #9]
    34ce:	698a      	ldr	r2, [r1, #24]
    34d0:	2b00      	cmp	r3, #0
    34d2:	d114      	bne.n	34fe <extint_chan_set_config+0x96>
    34d4:	2301      	movs	r3, #1
    34d6:	40ab      	lsls	r3, r5
    34d8:	43db      	mvns	r3, r3
    34da:	041b      	lsls	r3, r3, #16
    34dc:	0c1b      	lsrs	r3, r3, #16
    34de:	4013      	ands	r3, r2
    34e0:	618b      	str	r3, [r1, #24]
    34e2:	2102      	movs	r1, #2
    34e4:	2001      	movs	r0, #1
    34e6:	4b08      	ldr	r3, [pc, #32]	; (3508 <extint_chan_set_config+0xa0>)
    34e8:	781a      	ldrb	r2, [r3, #0]
    34ea:	430a      	orrs	r2, r1
    34ec:	701a      	strb	r2, [r3, #0]
    34ee:	685a      	ldr	r2, [r3, #4]
    34f0:	4211      	tst	r1, r2
    34f2:	d1fc      	bne.n	34ee <extint_chan_set_config+0x86>
    34f4:	685a      	ldr	r2, [r3, #4]
    34f6:	4210      	tst	r0, r2
    34f8:	d1f9      	bne.n	34ee <extint_chan_set_config+0x86>
    34fa:	b003      	add	sp, #12
    34fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34fe:	2301      	movs	r3, #1
    3500:	40ab      	lsls	r3, r5
    3502:	4313      	orrs	r3, r2
    3504:	618b      	str	r3, [r1, #24]
    3506:	e7ec      	b.n	34e2 <extint_chan_set_config+0x7a>
    3508:	40002400 	.word	0x40002400
    350c:	00004a01 	.word	0x00004a01

00003510 <port_pin_set_config>:
    3510:	2280      	movs	r2, #128	; 0x80
    3512:	b500      	push	{lr}
    3514:	b083      	sub	sp, #12
    3516:	ab01      	add	r3, sp, #4
    3518:	701a      	strb	r2, [r3, #0]
    351a:	780a      	ldrb	r2, [r1, #0]
    351c:	705a      	strb	r2, [r3, #1]
    351e:	784a      	ldrb	r2, [r1, #1]
    3520:	709a      	strb	r2, [r3, #2]
    3522:	788a      	ldrb	r2, [r1, #2]
    3524:	0019      	movs	r1, r3
    3526:	70da      	strb	r2, [r3, #3]
    3528:	4b01      	ldr	r3, [pc, #4]	; (3530 <port_pin_set_config+0x20>)
    352a:	4798      	blx	r3
    352c:	b003      	add	sp, #12
    352e:	bd00      	pop	{pc}
    3530:	00004a01 	.word	0x00004a01

00003534 <_sercom_get_sync_baud_val>:
    3534:	b510      	push	{r4, lr}
    3536:	0849      	lsrs	r1, r1, #1
    3538:	2340      	movs	r3, #64	; 0x40
    353a:	2400      	movs	r4, #0
    353c:	4281      	cmp	r1, r0
    353e:	d202      	bcs.n	3546 <_sercom_get_sync_baud_val+0x12>
    3540:	0018      	movs	r0, r3
    3542:	bd10      	pop	{r4, pc}
    3544:	001c      	movs	r4, r3
    3546:	1c63      	adds	r3, r4, #1
    3548:	1a09      	subs	r1, r1, r0
    354a:	b29b      	uxth	r3, r3
    354c:	4288      	cmp	r0, r1
    354e:	d9f9      	bls.n	3544 <_sercom_get_sync_baud_val+0x10>
    3550:	2340      	movs	r3, #64	; 0x40
    3552:	2cff      	cmp	r4, #255	; 0xff
    3554:	d8f4      	bhi.n	3540 <_sercom_get_sync_baud_val+0xc>
    3556:	8014      	strh	r4, [r2, #0]
    3558:	2300      	movs	r3, #0
    355a:	e7f1      	b.n	3540 <_sercom_get_sync_baud_val+0xc>

0000355c <_sercom_get_async_baud_val>:
    355c:	b5f0      	push	{r4, r5, r6, r7, lr}
    355e:	4645      	mov	r5, r8
    3560:	46de      	mov	lr, fp
    3562:	4657      	mov	r7, sl
    3564:	464e      	mov	r6, r9
    3566:	b5e0      	push	{r5, r6, r7, lr}
    3568:	0005      	movs	r5, r0
    356a:	b087      	sub	sp, #28
    356c:	9204      	str	r2, [sp, #16]
    356e:	aa10      	add	r2, sp, #64	; 0x40
    3570:	000c      	movs	r4, r1
    3572:	7811      	ldrb	r1, [r2, #0]
    3574:	2240      	movs	r2, #64	; 0x40
    3576:	434d      	muls	r5, r1
    3578:	42a5      	cmp	r5, r4
    357a:	d907      	bls.n	358c <_sercom_get_async_baud_val+0x30>
    357c:	0010      	movs	r0, r2
    357e:	b007      	add	sp, #28
    3580:	bc3c      	pop	{r2, r3, r4, r5}
    3582:	4690      	mov	r8, r2
    3584:	4699      	mov	r9, r3
    3586:	46a2      	mov	sl, r4
    3588:	46ab      	mov	fp, r5
    358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    358c:	2b00      	cmp	r3, #0
    358e:	d153      	bne.n	3638 <_sercom_get_async_baud_val+0xdc>
    3590:	0002      	movs	r2, r0
    3592:	4d6a      	ldr	r5, [pc, #424]	; (373c <_sercom_get_async_baud_val+0x1e0>)
    3594:	0008      	movs	r0, r1
    3596:	2100      	movs	r1, #0
    3598:	47a8      	blx	r5
    359a:	2300      	movs	r3, #0
    359c:	2120      	movs	r1, #32
    359e:	4681      	mov	r9, r0
    35a0:	4698      	mov	r8, r3
    35a2:	2700      	movs	r7, #0
    35a4:	468a      	mov	sl, r1
    35a6:	391f      	subs	r1, #31
    35a8:	9301      	str	r3, [sp, #4]
    35aa:	46c3      	mov	fp, r8
    35ac:	9400      	str	r4, [sp, #0]
    35ae:	46c8      	mov	r8, r9
    35b0:	2200      	movs	r2, #0
    35b2:	2300      	movs	r3, #0
    35b4:	203f      	movs	r0, #63	; 0x3f
    35b6:	468c      	mov	ip, r1
    35b8:	46b9      	mov	r9, r7
    35ba:	e007      	b.n	35cc <_sercom_get_async_baud_val+0x70>
    35bc:	42bd      	cmp	r5, r7
    35be:	d04e      	beq.n	365e <_sercom_get_async_baud_val+0x102>
    35c0:	0014      	movs	r4, r2
    35c2:	0019      	movs	r1, r3
    35c4:	0022      	movs	r2, r4
    35c6:	000b      	movs	r3, r1
    35c8:	3801      	subs	r0, #1
    35ca:	d331      	bcc.n	3630 <_sercom_get_async_baud_val+0xd4>
    35cc:	2120      	movs	r1, #32
    35ce:	4249      	negs	r1, r1
    35d0:	1841      	adds	r1, r0, r1
    35d2:	d43e      	bmi.n	3652 <_sercom_get_async_baud_val+0xf6>
    35d4:	4664      	mov	r4, ip
    35d6:	408c      	lsls	r4, r1
    35d8:	0021      	movs	r1, r4
    35da:	4664      	mov	r4, ip
    35dc:	4084      	lsls	r4, r0
    35de:	1892      	adds	r2, r2, r2
    35e0:	415b      	adcs	r3, r3
    35e2:	9402      	str	r4, [sp, #8]
    35e4:	4666      	mov	r6, ip
    35e6:	4644      	mov	r4, r8
    35e8:	4316      	orrs	r6, r2
    35ea:	4221      	tst	r1, r4
    35ec:	d000      	beq.n	35f0 <_sercom_get_async_baud_val+0x94>
    35ee:	0032      	movs	r2, r6
    35f0:	0014      	movs	r4, r2
    35f2:	001d      	movs	r5, r3
    35f4:	0016      	movs	r6, r2
    35f6:	001f      	movs	r7, r3
    35f8:	9a00      	ldr	r2, [sp, #0]
    35fa:	9b01      	ldr	r3, [sp, #4]
    35fc:	1aa4      	subs	r4, r4, r2
    35fe:	419d      	sbcs	r5, r3
    3600:	0022      	movs	r2, r4
    3602:	464c      	mov	r4, r9
    3604:	002b      	movs	r3, r5
    3606:	9d02      	ldr	r5, [sp, #8]
    3608:	4325      	orrs	r5, r4
    360a:	002c      	movs	r4, r5
    360c:	465d      	mov	r5, fp
    360e:	4329      	orrs	r1, r5
    3610:	9d01      	ldr	r5, [sp, #4]
    3612:	42bd      	cmp	r5, r7
    3614:	d81a      	bhi.n	364c <_sercom_get_async_baud_val+0xf0>
    3616:	d016      	beq.n	3646 <_sercom_get_async_baud_val+0xea>
    3618:	46a1      	mov	r9, r4
    361a:	9c00      	ldr	r4, [sp, #0]
    361c:	9d01      	ldr	r5, [sp, #4]
    361e:	468b      	mov	fp, r1
    3620:	42bd      	cmp	r5, r7
    3622:	d9cb      	bls.n	35bc <_sercom_get_async_baud_val+0x60>
    3624:	0034      	movs	r4, r6
    3626:	0039      	movs	r1, r7
    3628:	0022      	movs	r2, r4
    362a:	000b      	movs	r3, r1
    362c:	3801      	subs	r0, #1
    362e:	d2cd      	bcs.n	35cc <_sercom_get_async_baud_val+0x70>
    3630:	464f      	mov	r7, r9
    3632:	427f      	negs	r7, r7
    3634:	0c3f      	lsrs	r7, r7, #16
    3636:	e002      	b.n	363e <_sercom_get_async_baud_val+0xe2>
    3638:	2700      	movs	r7, #0
    363a:	2b01      	cmp	r3, #1
    363c:	d015      	beq.n	366a <_sercom_get_async_baud_val+0x10e>
    363e:	9b04      	ldr	r3, [sp, #16]
    3640:	2200      	movs	r2, #0
    3642:	801f      	strh	r7, [r3, #0]
    3644:	e79a      	b.n	357c <_sercom_get_async_baud_val+0x20>
    3646:	9d00      	ldr	r5, [sp, #0]
    3648:	42b5      	cmp	r5, r6
    364a:	d9e5      	bls.n	3618 <_sercom_get_async_baud_val+0xbc>
    364c:	464c      	mov	r4, r9
    364e:	4659      	mov	r1, fp
    3650:	e7e2      	b.n	3618 <_sercom_get_async_baud_val+0xbc>
    3652:	4651      	mov	r1, sl
    3654:	4664      	mov	r4, ip
    3656:	1a09      	subs	r1, r1, r0
    3658:	40cc      	lsrs	r4, r1
    365a:	0021      	movs	r1, r4
    365c:	e7bd      	b.n	35da <_sercom_get_async_baud_val+0x7e>
    365e:	9900      	ldr	r1, [sp, #0]
    3660:	42b1      	cmp	r1, r6
    3662:	d9ad      	bls.n	35c0 <_sercom_get_async_baud_val+0x64>
    3664:	0034      	movs	r4, r6
    3666:	0039      	movs	r1, r7
    3668:	e7de      	b.n	3628 <_sercom_get_async_baud_val+0xcc>
    366a:	0f63      	lsrs	r3, r4, #29
    366c:	4698      	mov	r8, r3
    366e:	00e3      	lsls	r3, r4, #3
    3670:	000a      	movs	r2, r1
    3672:	469a      	mov	sl, r3
    3674:	2100      	movs	r1, #0
    3676:	2300      	movs	r3, #0
    3678:	4c30      	ldr	r4, [pc, #192]	; (373c <_sercom_get_async_baud_val+0x1e0>)
    367a:	47a0      	blx	r4
    367c:	2300      	movs	r3, #0
    367e:	9305      	str	r3, [sp, #20]
    3680:	3301      	adds	r3, #1
    3682:	469c      	mov	ip, r3
    3684:	2300      	movs	r3, #0
    3686:	2200      	movs	r2, #0
    3688:	4699      	mov	r9, r3
    368a:	273f      	movs	r7, #63	; 0x3f
    368c:	2300      	movs	r3, #0
    368e:	e019      	b.n	36c4 <_sercom_get_async_baud_val+0x168>
    3690:	0014      	movs	r4, r2
    3692:	001d      	movs	r5, r3
    3694:	0022      	movs	r2, r4
    3696:	002b      	movs	r3, r5
    3698:	1a24      	subs	r4, r4, r0
    369a:	418d      	sbcs	r5, r1
    369c:	464e      	mov	r6, r9
    369e:	9402      	str	r4, [sp, #8]
    36a0:	9503      	str	r5, [sp, #12]
    36a2:	9c00      	ldr	r4, [sp, #0]
    36a4:	4334      	orrs	r4, r6
    36a6:	0026      	movs	r6, r4
    36a8:	4299      	cmp	r1, r3
    36aa:	d838      	bhi.n	371e <_sercom_get_async_baud_val+0x1c2>
    36ac:	d035      	beq.n	371a <_sercom_get_async_baud_val+0x1be>
    36ae:	46b1      	mov	r9, r6
    36b0:	4299      	cmp	r1, r3
    36b2:	d820      	bhi.n	36f6 <_sercom_get_async_baud_val+0x19a>
    36b4:	d01d      	beq.n	36f2 <_sercom_get_async_baud_val+0x196>
    36b6:	9b02      	ldr	r3, [sp, #8]
    36b8:	9c03      	ldr	r4, [sp, #12]
    36ba:	469b      	mov	fp, r3
    36bc:	0023      	movs	r3, r4
    36be:	465a      	mov	r2, fp
    36c0:	3f01      	subs	r7, #1
    36c2:	d31e      	bcc.n	3702 <_sercom_get_async_baud_val+0x1a6>
    36c4:	2420      	movs	r4, #32
    36c6:	4264      	negs	r4, r4
    36c8:	193c      	adds	r4, r7, r4
    36ca:	d42a      	bmi.n	3722 <_sercom_get_async_baud_val+0x1c6>
    36cc:	4665      	mov	r5, ip
    36ce:	40a5      	lsls	r5, r4
    36d0:	1892      	adds	r2, r2, r2
    36d2:	415b      	adcs	r3, r3
    36d4:	4664      	mov	r4, ip
    36d6:	4666      	mov	r6, ip
    36d8:	4314      	orrs	r4, r2
    36da:	40be      	lsls	r6, r7
    36dc:	46a3      	mov	fp, r4
    36de:	4654      	mov	r4, sl
    36e0:	9600      	str	r6, [sp, #0]
    36e2:	4034      	ands	r4, r6
    36e4:	4646      	mov	r6, r8
    36e6:	4035      	ands	r5, r6
    36e8:	432c      	orrs	r4, r5
    36ea:	d0d1      	beq.n	3690 <_sercom_get_async_baud_val+0x134>
    36ec:	465c      	mov	r4, fp
    36ee:	001d      	movs	r5, r3
    36f0:	e7d0      	b.n	3694 <_sercom_get_async_baud_val+0x138>
    36f2:	4290      	cmp	r0, r2
    36f4:	d9df      	bls.n	36b6 <_sercom_get_async_baud_val+0x15a>
    36f6:	4693      	mov	fp, r2
    36f8:	001c      	movs	r4, r3
    36fa:	465a      	mov	r2, fp
    36fc:	0023      	movs	r3, r4
    36fe:	3f01      	subs	r7, #1
    3700:	d2e0      	bcs.n	36c4 <_sercom_get_async_baud_val+0x168>
    3702:	9b05      	ldr	r3, [sp, #20]
    3704:	4a0e      	ldr	r2, [pc, #56]	; (3740 <_sercom_get_async_baud_val+0x1e4>)
    3706:	1af6      	subs	r6, r6, r3
    3708:	08f6      	lsrs	r6, r6, #3
    370a:	4296      	cmp	r6, r2
    370c:	d90e      	bls.n	372c <_sercom_get_async_baud_val+0x1d0>
    370e:	3301      	adds	r3, #1
    3710:	9305      	str	r3, [sp, #20]
    3712:	2b08      	cmp	r3, #8
    3714:	d1b6      	bne.n	3684 <_sercom_get_async_baud_val+0x128>
    3716:	2240      	movs	r2, #64	; 0x40
    3718:	e730      	b.n	357c <_sercom_get_async_baud_val+0x20>
    371a:	4290      	cmp	r0, r2
    371c:	d9c7      	bls.n	36ae <_sercom_get_async_baud_val+0x152>
    371e:	464e      	mov	r6, r9
    3720:	e7c5      	b.n	36ae <_sercom_get_async_baud_val+0x152>
    3722:	2420      	movs	r4, #32
    3724:	4665      	mov	r5, ip
    3726:	1be4      	subs	r4, r4, r7
    3728:	40e5      	lsrs	r5, r4
    372a:	e7d1      	b.n	36d0 <_sercom_get_async_baud_val+0x174>
    372c:	035f      	lsls	r7, r3, #13
    372e:	23ff      	movs	r3, #255	; 0xff
    3730:	035b      	lsls	r3, r3, #13
    3732:	401f      	ands	r7, r3
    3734:	4337      	orrs	r7, r6
    3736:	b2bf      	uxth	r7, r7
    3738:	e781      	b.n	363e <_sercom_get_async_baud_val+0xe2>
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	0000620d 	.word	0x0000620d
    3740:	00001fff 	.word	0x00001fff

00003744 <sercom_set_gclk_generator>:
    3744:	b530      	push	{r4, r5, lr}
    3746:	4c0e      	ldr	r4, [pc, #56]	; (3780 <sercom_set_gclk_generator+0x3c>)
    3748:	b083      	sub	sp, #12
    374a:	7823      	ldrb	r3, [r4, #0]
    374c:	0005      	movs	r5, r0
    374e:	2b00      	cmp	r3, #0
    3750:	d006      	beq.n	3760 <sercom_set_gclk_generator+0x1c>
    3752:	2900      	cmp	r1, #0
    3754:	d104      	bne.n	3760 <sercom_set_gclk_generator+0x1c>
    3756:	7863      	ldrb	r3, [r4, #1]
    3758:	4283      	cmp	r3, r0
    375a:	d00f      	beq.n	377c <sercom_set_gclk_generator+0x38>
    375c:	201d      	movs	r0, #29
    375e:	e00b      	b.n	3778 <sercom_set_gclk_generator+0x34>
    3760:	a901      	add	r1, sp, #4
    3762:	2011      	movs	r0, #17
    3764:	4b07      	ldr	r3, [pc, #28]	; (3784 <sercom_set_gclk_generator+0x40>)
    3766:	700d      	strb	r5, [r1, #0]
    3768:	4798      	blx	r3
    376a:	2011      	movs	r0, #17
    376c:	4b06      	ldr	r3, [pc, #24]	; (3788 <sercom_set_gclk_generator+0x44>)
    376e:	4798      	blx	r3
    3770:	2301      	movs	r3, #1
    3772:	2000      	movs	r0, #0
    3774:	7065      	strb	r5, [r4, #1]
    3776:	7023      	strb	r3, [r4, #0]
    3778:	b003      	add	sp, #12
    377a:	bd30      	pop	{r4, r5, pc}
    377c:	2000      	movs	r0, #0
    377e:	e7fb      	b.n	3778 <sercom_set_gclk_generator+0x34>
    3780:	2000016c 	.word	0x2000016c
    3784:	00004905 	.word	0x00004905
    3788:	00004945 	.word	0x00004945

0000378c <_sercom_get_default_pad>:
    378c:	4b3a      	ldr	r3, [pc, #232]	; (3878 <_sercom_get_default_pad+0xec>)
    378e:	4298      	cmp	r0, r3
    3790:	d044      	beq.n	381c <_sercom_get_default_pad+0x90>
    3792:	d90a      	bls.n	37aa <_sercom_get_default_pad+0x1e>
    3794:	4b39      	ldr	r3, [pc, #228]	; (387c <_sercom_get_default_pad+0xf0>)
    3796:	4298      	cmp	r0, r3
    3798:	d018      	beq.n	37cc <_sercom_get_default_pad+0x40>
    379a:	4b39      	ldr	r3, [pc, #228]	; (3880 <_sercom_get_default_pad+0xf4>)
    379c:	4298      	cmp	r0, r3
    379e:	d033      	beq.n	3808 <_sercom_get_default_pad+0x7c>
    37a0:	4b38      	ldr	r3, [pc, #224]	; (3884 <_sercom_get_default_pad+0xf8>)
    37a2:	4298      	cmp	r0, r3
    37a4:	d01c      	beq.n	37e0 <_sercom_get_default_pad+0x54>
    37a6:	2000      	movs	r0, #0
    37a8:	4770      	bx	lr
    37aa:	2384      	movs	r3, #132	; 0x84
    37ac:	05db      	lsls	r3, r3, #23
    37ae:	4298      	cmp	r0, r3
    37b0:	d020      	beq.n	37f4 <_sercom_get_default_pad+0x68>
    37b2:	4b35      	ldr	r3, [pc, #212]	; (3888 <_sercom_get_default_pad+0xfc>)
    37b4:	4298      	cmp	r0, r3
    37b6:	d1f6      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    37b8:	2901      	cmp	r1, #1
    37ba:	d043      	beq.n	3844 <_sercom_get_default_pad+0xb8>
    37bc:	2900      	cmp	r1, #0
    37be:	d03f      	beq.n	3840 <_sercom_get_default_pad+0xb4>
    37c0:	2902      	cmp	r1, #2
    37c2:	d03b      	beq.n	383c <_sercom_get_default_pad+0xb0>
    37c4:	2903      	cmp	r1, #3
    37c6:	d1ee      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    37c8:	4830      	ldr	r0, [pc, #192]	; (388c <_sercom_get_default_pad+0x100>)
    37ca:	e7ed      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    37cc:	2901      	cmp	r1, #1
    37ce:	d031      	beq.n	3834 <_sercom_get_default_pad+0xa8>
    37d0:	2900      	cmp	r1, #0
    37d2:	d02d      	beq.n	3830 <_sercom_get_default_pad+0xa4>
    37d4:	2902      	cmp	r1, #2
    37d6:	d02f      	beq.n	3838 <_sercom_get_default_pad+0xac>
    37d8:	2903      	cmp	r1, #3
    37da:	d1e4      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    37dc:	482c      	ldr	r0, [pc, #176]	; (3890 <_sercom_get_default_pad+0x104>)
    37de:	e7e3      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    37e0:	2901      	cmp	r1, #1
    37e2:	d03f      	beq.n	3864 <_sercom_get_default_pad+0xd8>
    37e4:	2900      	cmp	r1, #0
    37e6:	d03b      	beq.n	3860 <_sercom_get_default_pad+0xd4>
    37e8:	2902      	cmp	r1, #2
    37ea:	d037      	beq.n	385c <_sercom_get_default_pad+0xd0>
    37ec:	2903      	cmp	r1, #3
    37ee:	d1da      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    37f0:	4828      	ldr	r0, [pc, #160]	; (3894 <_sercom_get_default_pad+0x108>)
    37f2:	e7d9      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    37f4:	2901      	cmp	r1, #1
    37f6:	d03d      	beq.n	3874 <_sercom_get_default_pad+0xe8>
    37f8:	2900      	cmp	r1, #0
    37fa:	d039      	beq.n	3870 <_sercom_get_default_pad+0xe4>
    37fc:	2902      	cmp	r1, #2
    37fe:	d02b      	beq.n	3858 <_sercom_get_default_pad+0xcc>
    3800:	2903      	cmp	r1, #3
    3802:	d1d0      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    3804:	4824      	ldr	r0, [pc, #144]	; (3898 <_sercom_get_default_pad+0x10c>)
    3806:	e7cf      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3808:	2901      	cmp	r1, #1
    380a:	d023      	beq.n	3854 <_sercom_get_default_pad+0xc8>
    380c:	2900      	cmp	r1, #0
    380e:	d01f      	beq.n	3850 <_sercom_get_default_pad+0xc4>
    3810:	2902      	cmp	r1, #2
    3812:	d01b      	beq.n	384c <_sercom_get_default_pad+0xc0>
    3814:	2903      	cmp	r1, #3
    3816:	d1c6      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    3818:	4820      	ldr	r0, [pc, #128]	; (389c <_sercom_get_default_pad+0x110>)
    381a:	e7c5      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    381c:	2901      	cmp	r1, #1
    381e:	d025      	beq.n	386c <_sercom_get_default_pad+0xe0>
    3820:	2900      	cmp	r1, #0
    3822:	d021      	beq.n	3868 <_sercom_get_default_pad+0xdc>
    3824:	2902      	cmp	r1, #2
    3826:	d00f      	beq.n	3848 <_sercom_get_default_pad+0xbc>
    3828:	2903      	cmp	r1, #3
    382a:	d1bc      	bne.n	37a6 <_sercom_get_default_pad+0x1a>
    382c:	481c      	ldr	r0, [pc, #112]	; (38a0 <_sercom_get_default_pad+0x114>)
    382e:	e7bb      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3830:	481c      	ldr	r0, [pc, #112]	; (38a4 <_sercom_get_default_pad+0x118>)
    3832:	e7b9      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3834:	481c      	ldr	r0, [pc, #112]	; (38a8 <_sercom_get_default_pad+0x11c>)
    3836:	e7b7      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3838:	481c      	ldr	r0, [pc, #112]	; (38ac <_sercom_get_default_pad+0x120>)
    383a:	e7b5      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    383c:	481c      	ldr	r0, [pc, #112]	; (38b0 <_sercom_get_default_pad+0x124>)
    383e:	e7b3      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3840:	2003      	movs	r0, #3
    3842:	e7b1      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3844:	481b      	ldr	r0, [pc, #108]	; (38b4 <_sercom_get_default_pad+0x128>)
    3846:	e7af      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3848:	481b      	ldr	r0, [pc, #108]	; (38b8 <_sercom_get_default_pad+0x12c>)
    384a:	e7ad      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    384c:	481b      	ldr	r0, [pc, #108]	; (38bc <_sercom_get_default_pad+0x130>)
    384e:	e7ab      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3850:	481b      	ldr	r0, [pc, #108]	; (38c0 <_sercom_get_default_pad+0x134>)
    3852:	e7a9      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3854:	481b      	ldr	r0, [pc, #108]	; (38c4 <_sercom_get_default_pad+0x138>)
    3856:	e7a7      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3858:	481b      	ldr	r0, [pc, #108]	; (38c8 <_sercom_get_default_pad+0x13c>)
    385a:	e7a5      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    385c:	481b      	ldr	r0, [pc, #108]	; (38cc <_sercom_get_default_pad+0x140>)
    385e:	e7a3      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3860:	481b      	ldr	r0, [pc, #108]	; (38d0 <_sercom_get_default_pad+0x144>)
    3862:	e7a1      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3864:	481b      	ldr	r0, [pc, #108]	; (38d4 <_sercom_get_default_pad+0x148>)
    3866:	e79f      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3868:	481b      	ldr	r0, [pc, #108]	; (38d8 <_sercom_get_default_pad+0x14c>)
    386a:	e79d      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    386c:	481b      	ldr	r0, [pc, #108]	; (38dc <_sercom_get_default_pad+0x150>)
    386e:	e79b      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3870:	481b      	ldr	r0, [pc, #108]	; (38e0 <_sercom_get_default_pad+0x154>)
    3872:	e799      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3874:	481b      	ldr	r0, [pc, #108]	; (38e4 <_sercom_get_default_pad+0x158>)
    3876:	e797      	b.n	37a8 <_sercom_get_default_pad+0x1c>
    3878:	42000800 	.word	0x42000800
    387c:	42001000 	.word	0x42001000
    3880:	43000400 	.word	0x43000400
    3884:	42000c00 	.word	0x42000c00
    3888:	42000400 	.word	0x42000400
    388c:	001f0003 	.word	0x001f0003
    3890:	000f0003 	.word	0x000f0003
    3894:	00130003 	.word	0x00130003
    3898:	00070003 	.word	0x00070003
    389c:	00190003 	.word	0x00190003
    38a0:	000b0003 	.word	0x000b0003
    38a4:	000c0003 	.word	0x000c0003
    38a8:	000d0003 	.word	0x000d0003
    38ac:	000e0003 	.word	0x000e0003
    38b0:	001e0003 	.word	0x001e0003
    38b4:	00010003 	.word	0x00010003
    38b8:	000a0003 	.word	0x000a0003
    38bc:	00180003 	.word	0x00180003
    38c0:	00160003 	.word	0x00160003
    38c4:	00170003 	.word	0x00170003
    38c8:	00060003 	.word	0x00060003
    38cc:	00120003 	.word	0x00120003
    38d0:	00100003 	.word	0x00100003
    38d4:	00110003 	.word	0x00110003
    38d8:	00080003 	.word	0x00080003
    38dc:	00090003 	.word	0x00090003
    38e0:	00040003 	.word	0x00040003
    38e4:	00050003 	.word	0x00050003

000038e8 <_sercom_get_sercom_inst_index>:
    38e8:	b570      	push	{r4, r5, r6, lr}
    38ea:	b086      	sub	sp, #24
    38ec:	0001      	movs	r1, r0
    38ee:	4668      	mov	r0, sp
    38f0:	4b15      	ldr	r3, [pc, #84]	; (3948 <_sercom_get_sercom_inst_index+0x60>)
    38f2:	cb70      	ldmia	r3!, {r4, r5, r6}
    38f4:	c070      	stmia	r0!, {r4, r5, r6}
    38f6:	cb70      	ldmia	r3!, {r4, r5, r6}
    38f8:	c070      	stmia	r0!, {r4, r5, r6}
    38fa:	9b00      	ldr	r3, [sp, #0]
    38fc:	428b      	cmp	r3, r1
    38fe:	d011      	beq.n	3924 <_sercom_get_sercom_inst_index+0x3c>
    3900:	9b01      	ldr	r3, [sp, #4]
    3902:	428b      	cmp	r3, r1
    3904:	d011      	beq.n	392a <_sercom_get_sercom_inst_index+0x42>
    3906:	9b02      	ldr	r3, [sp, #8]
    3908:	428b      	cmp	r3, r1
    390a:	d011      	beq.n	3930 <_sercom_get_sercom_inst_index+0x48>
    390c:	9b03      	ldr	r3, [sp, #12]
    390e:	428b      	cmp	r3, r1
    3910:	d011      	beq.n	3936 <_sercom_get_sercom_inst_index+0x4e>
    3912:	9b04      	ldr	r3, [sp, #16]
    3914:	428b      	cmp	r3, r1
    3916:	d011      	beq.n	393c <_sercom_get_sercom_inst_index+0x54>
    3918:	9b05      	ldr	r3, [sp, #20]
    391a:	2000      	movs	r0, #0
    391c:	428b      	cmp	r3, r1
    391e:	d010      	beq.n	3942 <_sercom_get_sercom_inst_index+0x5a>
    3920:	b006      	add	sp, #24
    3922:	bd70      	pop	{r4, r5, r6, pc}
    3924:	2000      	movs	r0, #0
    3926:	b2c0      	uxtb	r0, r0
    3928:	e7fa      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    392a:	2001      	movs	r0, #1
    392c:	b2c0      	uxtb	r0, r0
    392e:	e7f7      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    3930:	2002      	movs	r0, #2
    3932:	b2c0      	uxtb	r0, r0
    3934:	e7f4      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    3936:	2003      	movs	r0, #3
    3938:	b2c0      	uxtb	r0, r0
    393a:	e7f1      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    393c:	2004      	movs	r0, #4
    393e:	b2c0      	uxtb	r0, r0
    3940:	e7ee      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    3942:	3005      	adds	r0, #5
    3944:	b2c0      	uxtb	r0, r0
    3946:	e7eb      	b.n	3920 <_sercom_get_sercom_inst_index+0x38>
    3948:	00008fe0 	.word	0x00008fe0

0000394c <_sercom_default_handler>:
    394c:	4770      	bx	lr
    394e:	46c0      	nop			; (mov r8, r8)

00003950 <_sercom_set_handler>:
    3950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3952:	4e0c      	ldr	r6, [pc, #48]	; (3984 <_sercom_set_handler+0x34>)
    3954:	0005      	movs	r5, r0
    3956:	7833      	ldrb	r3, [r6, #0]
    3958:	000f      	movs	r7, r1
    395a:	4c0b      	ldr	r4, [pc, #44]	; (3988 <_sercom_set_handler+0x38>)
    395c:	2b00      	cmp	r3, #0
    395e:	d10d      	bne.n	397c <_sercom_set_handler+0x2c>
    3960:	4b0a      	ldr	r3, [pc, #40]	; (398c <_sercom_set_handler+0x3c>)
    3962:	2218      	movs	r2, #24
    3964:	6023      	str	r3, [r4, #0]
    3966:	6063      	str	r3, [r4, #4]
    3968:	60a3      	str	r3, [r4, #8]
    396a:	60e3      	str	r3, [r4, #12]
    396c:	6123      	str	r3, [r4, #16]
    396e:	6163      	str	r3, [r4, #20]
    3970:	2100      	movs	r1, #0
    3972:	4b07      	ldr	r3, [pc, #28]	; (3990 <_sercom_set_handler+0x40>)
    3974:	4807      	ldr	r0, [pc, #28]	; (3994 <_sercom_set_handler+0x44>)
    3976:	4798      	blx	r3
    3978:	2301      	movs	r3, #1
    397a:	7033      	strb	r3, [r6, #0]
    397c:	00ad      	lsls	r5, r5, #2
    397e:	5167      	str	r7, [r4, r5]
    3980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	2000016e 	.word	0x2000016e
    3988:	20000170 	.word	0x20000170
    398c:	0000394d 	.word	0x0000394d
    3990:	00007ebf 	.word	0x00007ebf
    3994:	20000abc 	.word	0x20000abc

00003998 <_sercom_get_interrupt_vector>:
    3998:	b500      	push	{lr}
    399a:	b083      	sub	sp, #12
    399c:	466a      	mov	r2, sp
    399e:	2308      	movs	r3, #8
    39a0:	7013      	strb	r3, [r2, #0]
    39a2:	3301      	adds	r3, #1
    39a4:	7053      	strb	r3, [r2, #1]
    39a6:	3301      	adds	r3, #1
    39a8:	7093      	strb	r3, [r2, #2]
    39aa:	3301      	adds	r3, #1
    39ac:	70d3      	strb	r3, [r2, #3]
    39ae:	3301      	adds	r3, #1
    39b0:	7113      	strb	r3, [r2, #4]
    39b2:	3301      	adds	r3, #1
    39b4:	7153      	strb	r3, [r2, #5]
    39b6:	4b03      	ldr	r3, [pc, #12]	; (39c4 <_sercom_get_interrupt_vector+0x2c>)
    39b8:	4798      	blx	r3
    39ba:	466b      	mov	r3, sp
    39bc:	5618      	ldrsb	r0, [r3, r0]
    39be:	b003      	add	sp, #12
    39c0:	bd00      	pop	{pc}
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	000038e9 	.word	0x000038e9

000039c8 <SERCOM0_Handler>:
    39c8:	b510      	push	{r4, lr}
    39ca:	4b02      	ldr	r3, [pc, #8]	; (39d4 <SERCOM0_Handler+0xc>)
    39cc:	2000      	movs	r0, #0
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	4798      	blx	r3
    39d2:	bd10      	pop	{r4, pc}
    39d4:	20000170 	.word	0x20000170

000039d8 <SERCOM1_Handler>:
    39d8:	b510      	push	{r4, lr}
    39da:	4b02      	ldr	r3, [pc, #8]	; (39e4 <SERCOM1_Handler+0xc>)
    39dc:	2001      	movs	r0, #1
    39de:	685b      	ldr	r3, [r3, #4]
    39e0:	4798      	blx	r3
    39e2:	bd10      	pop	{r4, pc}
    39e4:	20000170 	.word	0x20000170

000039e8 <SERCOM2_Handler>:
    39e8:	b510      	push	{r4, lr}
    39ea:	4b02      	ldr	r3, [pc, #8]	; (39f4 <SERCOM2_Handler+0xc>)
    39ec:	2002      	movs	r0, #2
    39ee:	689b      	ldr	r3, [r3, #8]
    39f0:	4798      	blx	r3
    39f2:	bd10      	pop	{r4, pc}
    39f4:	20000170 	.word	0x20000170

000039f8 <SERCOM3_Handler>:
    39f8:	b510      	push	{r4, lr}
    39fa:	4b02      	ldr	r3, [pc, #8]	; (3a04 <SERCOM3_Handler+0xc>)
    39fc:	2003      	movs	r0, #3
    39fe:	68db      	ldr	r3, [r3, #12]
    3a00:	4798      	blx	r3
    3a02:	bd10      	pop	{r4, pc}
    3a04:	20000170 	.word	0x20000170

00003a08 <SERCOM4_Handler>:
    3a08:	b510      	push	{r4, lr}
    3a0a:	4b02      	ldr	r3, [pc, #8]	; (3a14 <SERCOM4_Handler+0xc>)
    3a0c:	2004      	movs	r0, #4
    3a0e:	691b      	ldr	r3, [r3, #16]
    3a10:	4798      	blx	r3
    3a12:	bd10      	pop	{r4, pc}
    3a14:	20000170 	.word	0x20000170

00003a18 <SERCOM5_Handler>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <SERCOM5_Handler+0xc>)
    3a1c:	2005      	movs	r0, #5
    3a1e:	695b      	ldr	r3, [r3, #20]
    3a20:	4798      	blx	r3
    3a22:	bd10      	pop	{r4, pc}
    3a24:	20000170 	.word	0x20000170

00003a28 <spi_init>:
    3a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2a:	4645      	mov	r5, r8
    3a2c:	464e      	mov	r6, r9
    3a2e:	46de      	mov	lr, fp
    3a30:	4657      	mov	r7, sl
    3a32:	b5e0      	push	{r5, r6, r7, lr}
    3a34:	0005      	movs	r5, r0
    3a36:	0014      	movs	r4, r2
    3a38:	2202      	movs	r2, #2
    3a3a:	6029      	str	r1, [r5, #0]
    3a3c:	680b      	ldr	r3, [r1, #0]
    3a3e:	b087      	sub	sp, #28
    3a40:	000e      	movs	r6, r1
    3a42:	4690      	mov	r8, r2
    3a44:	421a      	tst	r2, r3
    3a46:	d10c      	bne.n	3a62 <spi_init+0x3a>
    3a48:	2701      	movs	r7, #1
    3a4a:	680b      	ldr	r3, [r1, #0]
    3a4c:	2005      	movs	r0, #5
    3a4e:	421f      	tst	r7, r3
    3a50:	d100      	bne.n	3a54 <spi_init+0x2c>
    3a52:	e0df      	b.n	3c14 <spi_init+0x1ec>
    3a54:	b007      	add	sp, #28
    3a56:	bc3c      	pop	{r2, r3, r4, r5}
    3a58:	4690      	mov	r8, r2
    3a5a:	4699      	mov	r9, r3
    3a5c:	46a2      	mov	sl, r4
    3a5e:	46ab      	mov	fp, r5
    3a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3a64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3a66:	4698      	mov	r8, r3
    3a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3a6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3a6c:	4699      	mov	r9, r3
    3a6e:	2800      	cmp	r0, #0
    3a70:	d100      	bne.n	3a74 <spi_init+0x4c>
    3a72:	e0bf      	b.n	3bf4 <spi_init+0x1cc>
    3a74:	1c43      	adds	r3, r0, #1
    3a76:	d01e      	beq.n	3ab6 <spi_init+0x8e>
    3a78:	0402      	lsls	r2, r0, #16
    3a7a:	0c00      	lsrs	r0, r0, #16
    3a7c:	0c13      	lsrs	r3, r2, #16
    3a7e:	b2c0      	uxtb	r0, r0
    3a80:	469b      	mov	fp, r3
    3a82:	09c1      	lsrs	r1, r0, #7
    3a84:	0943      	lsrs	r3, r0, #5
    3a86:	2900      	cmp	r1, #0
    3a88:	d000      	beq.n	3a8c <spi_init+0x64>
    3a8a:	e0be      	b.n	3c0a <spi_init+0x1e2>
    3a8c:	311f      	adds	r1, #31
    3a8e:	4001      	ands	r1, r0
    3a90:	468c      	mov	ip, r1
    3a92:	49ce      	ldr	r1, [pc, #824]	; (3dcc <spi_init+0x3a4>)
    3a94:	01db      	lsls	r3, r3, #7
    3a96:	468a      	mov	sl, r1
    3a98:	4661      	mov	r1, ip
    3a9a:	4453      	add	r3, sl
    3a9c:	1859      	adds	r1, r3, r1
    3a9e:	3140      	adds	r1, #64	; 0x40
    3aa0:	7809      	ldrb	r1, [r1, #0]
    3aa2:	468a      	mov	sl, r1
    3aa4:	2101      	movs	r1, #1
    3aa6:	4652      	mov	r2, sl
    3aa8:	4211      	tst	r1, r2
    3aaa:	d000      	beq.n	3aae <spi_init+0x86>
    3aac:	e13e      	b.n	3d2c <spi_init+0x304>
    3aae:	2380      	movs	r3, #128	; 0x80
    3ab0:	455b      	cmp	r3, fp
    3ab2:	d000      	beq.n	3ab6 <spi_init+0x8e>
    3ab4:	e09a      	b.n	3bec <spi_init+0x1c4>
    3ab6:	2f00      	cmp	r7, #0
    3ab8:	d100      	bne.n	3abc <spi_init+0x94>
    3aba:	e0a0      	b.n	3bfe <spi_init+0x1d6>
    3abc:	1c7b      	adds	r3, r7, #1
    3abe:	d019      	beq.n	3af4 <spi_init+0xcc>
    3ac0:	043a      	lsls	r2, r7, #16
    3ac2:	0c3f      	lsrs	r7, r7, #16
    3ac4:	0c13      	lsrs	r3, r2, #16
    3ac6:	b2f8      	uxtb	r0, r7
    3ac8:	469a      	mov	sl, r3
    3aca:	09c1      	lsrs	r1, r0, #7
    3acc:	0943      	lsrs	r3, r0, #5
    3ace:	2900      	cmp	r1, #0
    3ad0:	d000      	beq.n	3ad4 <spi_init+0xac>
    3ad2:	e09a      	b.n	3c0a <spi_init+0x1e2>
    3ad4:	49bd      	ldr	r1, [pc, #756]	; (3dcc <spi_init+0x3a4>)
    3ad6:	271f      	movs	r7, #31
    3ad8:	468c      	mov	ip, r1
    3ada:	2201      	movs	r2, #1
    3adc:	01db      	lsls	r3, r3, #7
    3ade:	4007      	ands	r7, r0
    3ae0:	4463      	add	r3, ip
    3ae2:	19d9      	adds	r1, r3, r7
    3ae4:	3140      	adds	r1, #64	; 0x40
    3ae6:	7809      	ldrb	r1, [r1, #0]
    3ae8:	420a      	tst	r2, r1
    3aea:	d000      	beq.n	3aee <spi_init+0xc6>
    3aec:	e12e      	b.n	3d4c <spi_init+0x324>
    3aee:	2380      	movs	r3, #128	; 0x80
    3af0:	4553      	cmp	r3, sl
    3af2:	d17b      	bne.n	3bec <spi_init+0x1c4>
    3af4:	4643      	mov	r3, r8
    3af6:	2b00      	cmp	r3, #0
    3af8:	d100      	bne.n	3afc <spi_init+0xd4>
    3afa:	e13f      	b.n	3d7c <spi_init+0x354>
    3afc:	4643      	mov	r3, r8
    3afe:	3301      	adds	r3, #1
    3b00:	d019      	beq.n	3b36 <spi_init+0x10e>
    3b02:	4643      	mov	r3, r8
    3b04:	041a      	lsls	r2, r3, #16
    3b06:	0c13      	lsrs	r3, r2, #16
    3b08:	469a      	mov	sl, r3
    3b0a:	4643      	mov	r3, r8
    3b0c:	0c18      	lsrs	r0, r3, #16
    3b0e:	b2c0      	uxtb	r0, r0
    3b10:	0943      	lsrs	r3, r0, #5
    3b12:	09c1      	lsrs	r1, r0, #7
    3b14:	d179      	bne.n	3c0a <spi_init+0x1e2>
    3b16:	49ad      	ldr	r1, [pc, #692]	; (3dcc <spi_init+0x3a4>)
    3b18:	271f      	movs	r7, #31
    3b1a:	468c      	mov	ip, r1
    3b1c:	2201      	movs	r2, #1
    3b1e:	01db      	lsls	r3, r3, #7
    3b20:	4007      	ands	r7, r0
    3b22:	4463      	add	r3, ip
    3b24:	19d9      	adds	r1, r3, r7
    3b26:	3140      	adds	r1, #64	; 0x40
    3b28:	7809      	ldrb	r1, [r1, #0]
    3b2a:	420a      	tst	r2, r1
    3b2c:	d000      	beq.n	3b30 <spi_init+0x108>
    3b2e:	e119      	b.n	3d64 <spi_init+0x33c>
    3b30:	2380      	movs	r3, #128	; 0x80
    3b32:	459a      	cmp	sl, r3
    3b34:	d15a      	bne.n	3bec <spi_init+0x1c4>
    3b36:	464b      	mov	r3, r9
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d100      	bne.n	3b3e <spi_init+0x116>
    3b3c:	e124      	b.n	3d88 <spi_init+0x360>
    3b3e:	464b      	mov	r3, r9
    3b40:	3301      	adds	r3, #1
    3b42:	d027      	beq.n	3b94 <spi_init+0x16c>
    3b44:	464b      	mov	r3, r9
    3b46:	0419      	lsls	r1, r3, #16
    3b48:	0c0b      	lsrs	r3, r1, #16
    3b4a:	469a      	mov	sl, r3
    3b4c:	464b      	mov	r3, r9
    3b4e:	0c18      	lsrs	r0, r3, #16
    3b50:	b2c0      	uxtb	r0, r0
    3b52:	0943      	lsrs	r3, r0, #5
    3b54:	09c2      	lsrs	r2, r0, #7
    3b56:	d158      	bne.n	3c0a <spi_init+0x1e2>
    3b58:	4a9c      	ldr	r2, [pc, #624]	; (3dcc <spi_init+0x3a4>)
    3b5a:	271f      	movs	r7, #31
    3b5c:	4694      	mov	ip, r2
    3b5e:	01db      	lsls	r3, r3, #7
    3b60:	4463      	add	r3, ip
    3b62:	4007      	ands	r7, r0
    3b64:	19da      	adds	r2, r3, r7
    3b66:	3240      	adds	r2, #64	; 0x40
    3b68:	7812      	ldrb	r2, [r2, #0]
    3b6a:	4690      	mov	r8, r2
    3b6c:	2201      	movs	r2, #1
    3b6e:	4694      	mov	ip, r2
    3b70:	327f      	adds	r2, #127	; 0x7f
    3b72:	4691      	mov	r9, r2
    3b74:	4661      	mov	r1, ip
    3b76:	4642      	mov	r2, r8
    3b78:	4211      	tst	r1, r2
    3b7a:	d009      	beq.n	3b90 <spi_init+0x168>
    3b7c:	087f      	lsrs	r7, r7, #1
    3b7e:	19db      	adds	r3, r3, r7
    3b80:	3330      	adds	r3, #48	; 0x30
    3b82:	781a      	ldrb	r2, [r3, #0]
    3b84:	b2d2      	uxtb	r2, r2
    3b86:	4201      	tst	r1, r0
    3b88:	d100      	bne.n	3b8c <spi_init+0x164>
    3b8a:	e103      	b.n	3d94 <spi_init+0x36c>
    3b8c:	0913      	lsrs	r3, r2, #4
    3b8e:	4699      	mov	r9, r3
    3b90:	45ca      	cmp	sl, r9
    3b92:	d12b      	bne.n	3bec <spi_init+0x1c4>
    3b94:	2011      	movs	r0, #17
    3b96:	4b8e      	ldr	r3, [pc, #568]	; (3dd0 <spi_init+0x3a8>)
    3b98:	4798      	blx	r3
    3b9a:	7822      	ldrb	r2, [r4, #0]
    3b9c:	2700      	movs	r7, #0
    3b9e:	2a01      	cmp	r2, #1
    3ba0:	d100      	bne.n	3ba4 <spi_init+0x17c>
    3ba2:	e127      	b.n	3df4 <spi_init+0x3cc>
    3ba4:	68a2      	ldr	r2, [r4, #8]
    3ba6:	6863      	ldr	r3, [r4, #4]
    3ba8:	7c61      	ldrb	r1, [r4, #17]
    3baa:	4313      	orrs	r3, r2
    3bac:	68e2      	ldr	r2, [r4, #12]
    3bae:	4313      	orrs	r3, r2
    3bb0:	433b      	orrs	r3, r7
    3bb2:	7c22      	ldrb	r2, [r4, #16]
    3bb4:	2900      	cmp	r1, #0
    3bb6:	d001      	beq.n	3bbc <spi_init+0x194>
    3bb8:	2180      	movs	r1, #128	; 0x80
    3bba:	430b      	orrs	r3, r1
    3bbc:	7ca1      	ldrb	r1, [r4, #18]
    3bbe:	2900      	cmp	r1, #0
    3bc0:	d002      	beq.n	3bc8 <spi_init+0x1a0>
    3bc2:	2180      	movs	r1, #128	; 0x80
    3bc4:	0289      	lsls	r1, r1, #10
    3bc6:	430a      	orrs	r2, r1
    3bc8:	7ce1      	ldrb	r1, [r4, #19]
    3bca:	2900      	cmp	r1, #0
    3bcc:	d002      	beq.n	3bd4 <spi_init+0x1ac>
    3bce:	2180      	movs	r1, #128	; 0x80
    3bd0:	0089      	lsls	r1, r1, #2
    3bd2:	430a      	orrs	r2, r1
    3bd4:	7d21      	ldrb	r1, [r4, #20]
    3bd6:	2900      	cmp	r1, #0
    3bd8:	d002      	beq.n	3be0 <spi_init+0x1b8>
    3bda:	2180      	movs	r1, #128	; 0x80
    3bdc:	0189      	lsls	r1, r1, #6
    3bde:	430a      	orrs	r2, r1
    3be0:	2002      	movs	r0, #2
    3be2:	6831      	ldr	r1, [r6, #0]
    3be4:	4303      	orrs	r3, r0
    3be6:	428b      	cmp	r3, r1
    3be8:	d100      	bne.n	3bec <spi_init+0x1c4>
    3bea:	e0d7      	b.n	3d9c <spi_init+0x374>
    3bec:	2300      	movs	r3, #0
    3bee:	201c      	movs	r0, #28
    3bf0:	602b      	str	r3, [r5, #0]
    3bf2:	e72f      	b.n	3a54 <spi_init+0x2c>
    3bf4:	2100      	movs	r1, #0
    3bf6:	0030      	movs	r0, r6
    3bf8:	4b76      	ldr	r3, [pc, #472]	; (3dd4 <spi_init+0x3ac>)
    3bfa:	4798      	blx	r3
    3bfc:	e73a      	b.n	3a74 <spi_init+0x4c>
    3bfe:	2101      	movs	r1, #1
    3c00:	0030      	movs	r0, r6
    3c02:	4b74      	ldr	r3, [pc, #464]	; (3dd4 <spi_init+0x3ac>)
    3c04:	4798      	blx	r3
    3c06:	0007      	movs	r7, r0
    3c08:	e758      	b.n	3abc <spi_init+0x94>
    3c0a:	231f      	movs	r3, #31
    3c0c:	4018      	ands	r0, r3
    3c0e:	3040      	adds	r0, #64	; 0x40
    3c10:	7803      	ldrb	r3, [r0, #0]
    3c12:	deff      	udf	#255	; 0xff
    3c14:	0008      	movs	r0, r1
    3c16:	4b70      	ldr	r3, [pc, #448]	; (3dd8 <spi_init+0x3b0>)
    3c18:	4798      	blx	r3
    3c1a:	2805      	cmp	r0, #5
    3c1c:	d100      	bne.n	3c20 <spi_init+0x1f8>
    3c1e:	e0cd      	b.n	3dbc <spi_init+0x394>
    3c20:	4087      	lsls	r7, r0
    3c22:	4b6e      	ldr	r3, [pc, #440]	; (3ddc <spi_init+0x3b4>)
    3c24:	3012      	adds	r0, #18
    3c26:	69da      	ldr	r2, [r3, #28]
    3c28:	4317      	orrs	r7, r2
    3c2a:	61df      	str	r7, [r3, #28]
    3c2c:	b2c7      	uxtb	r7, r0
    3c2e:	2324      	movs	r3, #36	; 0x24
    3c30:	466a      	mov	r2, sp
    3c32:	4698      	mov	r8, r3
    3c34:	5ce3      	ldrb	r3, [r4, r3]
    3c36:	4669      	mov	r1, sp
    3c38:	7013      	strb	r3, [r2, #0]
    3c3a:	0038      	movs	r0, r7
    3c3c:	4b68      	ldr	r3, [pc, #416]	; (3de0 <spi_init+0x3b8>)
    3c3e:	4798      	blx	r3
    3c40:	0038      	movs	r0, r7
    3c42:	4b68      	ldr	r3, [pc, #416]	; (3de4 <spi_init+0x3bc>)
    3c44:	4798      	blx	r3
    3c46:	4643      	mov	r3, r8
    3c48:	2100      	movs	r1, #0
    3c4a:	5ce0      	ldrb	r0, [r4, r3]
    3c4c:	4b66      	ldr	r3, [pc, #408]	; (3de8 <spi_init+0x3c0>)
    3c4e:	4798      	blx	r3
    3c50:	7823      	ldrb	r3, [r4, #0]
    3c52:	2b01      	cmp	r3, #1
    3c54:	d100      	bne.n	3c58 <spi_init+0x230>
    3c56:	e0ab      	b.n	3db0 <spi_init+0x388>
    3c58:	682a      	ldr	r2, [r5, #0]
    3c5a:	4669      	mov	r1, sp
    3c5c:	4691      	mov	r9, r2
    3c5e:	2280      	movs	r2, #128	; 0x80
    3c60:	710a      	strb	r2, [r1, #4]
    3c62:	2200      	movs	r2, #0
    3c64:	4668      	mov	r0, sp
    3c66:	714a      	strb	r2, [r1, #5]
    3c68:	2101      	movs	r1, #1
    3c6a:	71c2      	strb	r2, [r0, #7]
    3c6c:	7181      	strb	r1, [r0, #6]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d100      	bne.n	3c74 <spi_init+0x24c>
    3c72:	7183      	strb	r3, [r0, #6]
    3c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c76:	af02      	add	r7, sp, #8
    3c78:	9302      	str	r3, [sp, #8]
    3c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3c7c:	2600      	movs	r6, #0
    3c7e:	607b      	str	r3, [r7, #4]
    3c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3c82:	60bb      	str	r3, [r7, #8]
    3c84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3c86:	60fb      	str	r3, [r7, #12]
    3c88:	4b52      	ldr	r3, [pc, #328]	; (3dd4 <spi_init+0x3ac>)
    3c8a:	469b      	mov	fp, r3
    3c8c:	4b57      	ldr	r3, [pc, #348]	; (3dec <spi_init+0x3c4>)
    3c8e:	469a      	mov	sl, r3
    3c90:	00b3      	lsls	r3, r6, #2
    3c92:	58f8      	ldr	r0, [r7, r3]
    3c94:	b2f1      	uxtb	r1, r6
    3c96:	2800      	cmp	r0, #0
    3c98:	d045      	beq.n	3d26 <spi_init+0x2fe>
    3c9a:	1c43      	adds	r3, r0, #1
    3c9c:	d005      	beq.n	3caa <spi_init+0x282>
    3c9e:	466b      	mov	r3, sp
    3ca0:	7118      	strb	r0, [r3, #4]
    3ca2:	0c00      	lsrs	r0, r0, #16
    3ca4:	b2c0      	uxtb	r0, r0
    3ca6:	a901      	add	r1, sp, #4
    3ca8:	47d0      	blx	sl
    3caa:	3601      	adds	r6, #1
    3cac:	2e04      	cmp	r6, #4
    3cae:	d1ef      	bne.n	3c90 <spi_init+0x268>
    3cb0:	7823      	ldrb	r3, [r4, #0]
    3cb2:	466a      	mov	r2, sp
    3cb4:	716b      	strb	r3, [r5, #5]
    3cb6:	7c23      	ldrb	r3, [r4, #16]
    3cb8:	71ab      	strb	r3, [r5, #6]
    3cba:	7ca3      	ldrb	r3, [r4, #18]
    3cbc:	71eb      	strb	r3, [r5, #7]
    3cbe:	7d23      	ldrb	r3, [r4, #20]
    3cc0:	722b      	strb	r3, [r5, #8]
    3cc2:	2300      	movs	r3, #0
    3cc4:	8053      	strh	r3, [r2, #2]
    3cc6:	7823      	ldrb	r3, [r4, #0]
    3cc8:	2b01      	cmp	r3, #1
    3cca:	d100      	bne.n	3cce <spi_init+0x2a6>
    3ccc:	e0a5      	b.n	3e1a <spi_init+0x3f2>
    3cce:	68a2      	ldr	r2, [r4, #8]
    3cd0:	6863      	ldr	r3, [r4, #4]
    3cd2:	7c21      	ldrb	r1, [r4, #16]
    3cd4:	4313      	orrs	r3, r2
    3cd6:	68e2      	ldr	r2, [r4, #12]
    3cd8:	4313      	orrs	r3, r2
    3cda:	7c62      	ldrb	r2, [r4, #17]
    3cdc:	2a00      	cmp	r2, #0
    3cde:	d11f      	bne.n	3d20 <spi_init+0x2f8>
    3ce0:	4a43      	ldr	r2, [pc, #268]	; (3df0 <spi_init+0x3c8>)
    3ce2:	7892      	ldrb	r2, [r2, #2]
    3ce4:	0792      	lsls	r2, r2, #30
    3ce6:	d41b      	bmi.n	3d20 <spi_init+0x2f8>
    3ce8:	7ca2      	ldrb	r2, [r4, #18]
    3cea:	2a00      	cmp	r2, #0
    3cec:	d002      	beq.n	3cf4 <spi_init+0x2cc>
    3cee:	2280      	movs	r2, #128	; 0x80
    3cf0:	0292      	lsls	r2, r2, #10
    3cf2:	4311      	orrs	r1, r2
    3cf4:	7ce2      	ldrb	r2, [r4, #19]
    3cf6:	2a00      	cmp	r2, #0
    3cf8:	d002      	beq.n	3d00 <spi_init+0x2d8>
    3cfa:	2280      	movs	r2, #128	; 0x80
    3cfc:	0092      	lsls	r2, r2, #2
    3cfe:	4311      	orrs	r1, r2
    3d00:	7d22      	ldrb	r2, [r4, #20]
    3d02:	2a00      	cmp	r2, #0
    3d04:	d002      	beq.n	3d0c <spi_init+0x2e4>
    3d06:	2280      	movs	r2, #128	; 0x80
    3d08:	0192      	lsls	r2, r2, #6
    3d0a:	4311      	orrs	r1, r2
    3d0c:	464a      	mov	r2, r9
    3d0e:	6812      	ldr	r2, [r2, #0]
    3d10:	2000      	movs	r0, #0
    3d12:	4313      	orrs	r3, r2
    3d14:	464a      	mov	r2, r9
    3d16:	6013      	str	r3, [r2, #0]
    3d18:	6853      	ldr	r3, [r2, #4]
    3d1a:	430b      	orrs	r3, r1
    3d1c:	6053      	str	r3, [r2, #4]
    3d1e:	e699      	b.n	3a54 <spi_init+0x2c>
    3d20:	2280      	movs	r2, #128	; 0x80
    3d22:	4313      	orrs	r3, r2
    3d24:	e7e0      	b.n	3ce8 <spi_init+0x2c0>
    3d26:	4648      	mov	r0, r9
    3d28:	47d8      	blx	fp
    3d2a:	e7b6      	b.n	3c9a <spi_init+0x272>
    3d2c:	4662      	mov	r2, ip
    3d2e:	0852      	lsrs	r2, r2, #1
    3d30:	4694      	mov	ip, r2
    3d32:	4463      	add	r3, ip
    3d34:	3330      	adds	r3, #48	; 0x30
    3d36:	781b      	ldrb	r3, [r3, #0]
    3d38:	b2db      	uxtb	r3, r3
    3d3a:	469c      	mov	ip, r3
    3d3c:	091b      	lsrs	r3, r3, #4
    3d3e:	4201      	tst	r1, r0
    3d40:	d000      	beq.n	3d44 <spi_init+0x31c>
    3d42:	e6b5      	b.n	3ab0 <spi_init+0x88>
    3d44:	230f      	movs	r3, #15
    3d46:	4662      	mov	r2, ip
    3d48:	4013      	ands	r3, r2
    3d4a:	e6b1      	b.n	3ab0 <spi_init+0x88>
    3d4c:	087f      	lsrs	r7, r7, #1
    3d4e:	19db      	adds	r3, r3, r7
    3d50:	3330      	adds	r3, #48	; 0x30
    3d52:	7819      	ldrb	r1, [r3, #0]
    3d54:	b2c9      	uxtb	r1, r1
    3d56:	090b      	lsrs	r3, r1, #4
    3d58:	4202      	tst	r2, r0
    3d5a:	d000      	beq.n	3d5e <spi_init+0x336>
    3d5c:	e6c8      	b.n	3af0 <spi_init+0xc8>
    3d5e:	230f      	movs	r3, #15
    3d60:	400b      	ands	r3, r1
    3d62:	e6c5      	b.n	3af0 <spi_init+0xc8>
    3d64:	087f      	lsrs	r7, r7, #1
    3d66:	19db      	adds	r3, r3, r7
    3d68:	3330      	adds	r3, #48	; 0x30
    3d6a:	7819      	ldrb	r1, [r3, #0]
    3d6c:	b2c9      	uxtb	r1, r1
    3d6e:	090b      	lsrs	r3, r1, #4
    3d70:	4202      	tst	r2, r0
    3d72:	d000      	beq.n	3d76 <spi_init+0x34e>
    3d74:	e6dd      	b.n	3b32 <spi_init+0x10a>
    3d76:	230f      	movs	r3, #15
    3d78:	400b      	ands	r3, r1
    3d7a:	e6da      	b.n	3b32 <spi_init+0x10a>
    3d7c:	2102      	movs	r1, #2
    3d7e:	0030      	movs	r0, r6
    3d80:	4b14      	ldr	r3, [pc, #80]	; (3dd4 <spi_init+0x3ac>)
    3d82:	4798      	blx	r3
    3d84:	4680      	mov	r8, r0
    3d86:	e6b9      	b.n	3afc <spi_init+0xd4>
    3d88:	2103      	movs	r1, #3
    3d8a:	0030      	movs	r0, r6
    3d8c:	4b11      	ldr	r3, [pc, #68]	; (3dd4 <spi_init+0x3ac>)
    3d8e:	4798      	blx	r3
    3d90:	4681      	mov	r9, r0
    3d92:	e6d4      	b.n	3b3e <spi_init+0x116>
    3d94:	230f      	movs	r3, #15
    3d96:	401a      	ands	r2, r3
    3d98:	4691      	mov	r9, r2
    3d9a:	e6f9      	b.n	3b90 <spi_init+0x168>
    3d9c:	6873      	ldr	r3, [r6, #4]
    3d9e:	4293      	cmp	r3, r2
    3da0:	d000      	beq.n	3da4 <spi_init+0x37c>
    3da2:	e723      	b.n	3bec <spi_init+0x1c4>
    3da4:	7823      	ldrb	r3, [r4, #0]
    3da6:	2000      	movs	r0, #0
    3da8:	716b      	strb	r3, [r5, #5]
    3daa:	7c23      	ldrb	r3, [r4, #16]
    3dac:	71ab      	strb	r3, [r5, #6]
    3dae:	e651      	b.n	3a54 <spi_init+0x2c>
    3db0:	220c      	movs	r2, #12
    3db2:	6833      	ldr	r3, [r6, #0]
    3db4:	4313      	orrs	r3, r2
    3db6:	6033      	str	r3, [r6, #0]
    3db8:	7823      	ldrb	r3, [r4, #0]
    3dba:	e74d      	b.n	3c58 <spi_init+0x230>
    3dbc:	4641      	mov	r1, r8
    3dbe:	4a07      	ldr	r2, [pc, #28]	; (3ddc <spi_init+0x3b4>)
    3dc0:	2718      	movs	r7, #24
    3dc2:	6a13      	ldr	r3, [r2, #32]
    3dc4:	430b      	orrs	r3, r1
    3dc6:	6213      	str	r3, [r2, #32]
    3dc8:	e731      	b.n	3c2e <spi_init+0x206>
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	40002800 	.word	0x40002800
    3dd0:	0000497d 	.word	0x0000497d
    3dd4:	0000378d 	.word	0x0000378d
    3dd8:	000038e9 	.word	0x000038e9
    3ddc:	40000400 	.word	0x40000400
    3de0:	00004905 	.word	0x00004905
    3de4:	00004945 	.word	0x00004945
    3de8:	00003745 	.word	0x00003745
    3dec:	00004a01 	.word	0x00004a01
    3df0:	41002000 	.word	0x41002000
    3df4:	0001      	movs	r1, r0
    3df6:	4b14      	ldr	r3, [pc, #80]	; (3e48 <spi_init+0x420>)
    3df8:	aa02      	add	r2, sp, #8
    3dfa:	69a0      	ldr	r0, [r4, #24]
    3dfc:	4798      	blx	r3
    3dfe:	0003      	movs	r3, r0
    3e00:	2017      	movs	r0, #23
    3e02:	2b00      	cmp	r3, #0
    3e04:	d000      	beq.n	3e08 <spi_init+0x3e0>
    3e06:	e625      	b.n	3a54 <spi_init+0x2c>
    3e08:	466a      	mov	r2, sp
    3e0a:	7b33      	ldrb	r3, [r6, #12]
    3e0c:	7a12      	ldrb	r2, [r2, #8]
    3e0e:	3005      	adds	r0, #5
    3e10:	429a      	cmp	r2, r3
    3e12:	d000      	beq.n	3e16 <spi_init+0x3ee>
    3e14:	e61e      	b.n	3a54 <spi_init+0x2c>
    3e16:	370c      	adds	r7, #12
    3e18:	e6c4      	b.n	3ba4 <spi_init+0x17c>
    3e1a:	4b0c      	ldr	r3, [pc, #48]	; (3e4c <spi_init+0x424>)
    3e1c:	6828      	ldr	r0, [r5, #0]
    3e1e:	4798      	blx	r3
    3e20:	3012      	adds	r0, #18
    3e22:	4b0b      	ldr	r3, [pc, #44]	; (3e50 <spi_init+0x428>)
    3e24:	b2c0      	uxtb	r0, r0
    3e26:	4798      	blx	r3
    3e28:	466b      	mov	r3, sp
    3e2a:	0001      	movs	r1, r0
    3e2c:	1c9a      	adds	r2, r3, #2
    3e2e:	69a0      	ldr	r0, [r4, #24]
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <spi_init+0x420>)
    3e32:	4798      	blx	r3
    3e34:	0003      	movs	r3, r0
    3e36:	2017      	movs	r0, #23
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d000      	beq.n	3e3e <spi_init+0x416>
    3e3c:	e60a      	b.n	3a54 <spi_init+0x2c>
    3e3e:	466b      	mov	r3, sp
    3e40:	464a      	mov	r2, r9
    3e42:	789b      	ldrb	r3, [r3, #2]
    3e44:	7313      	strb	r3, [r2, #12]
    3e46:	e742      	b.n	3cce <spi_init+0x2a6>
    3e48:	00003535 	.word	0x00003535
    3e4c:	000038e9 	.word	0x000038e9
    3e50:	0000497d 	.word	0x0000497d

00003e54 <spi_select_slave>:
    3e54:	b570      	push	{r4, r5, r6, lr}
    3e56:	7943      	ldrb	r3, [r0, #5]
    3e58:	2415      	movs	r4, #21
    3e5a:	2b01      	cmp	r3, #1
    3e5c:	d001      	beq.n	3e62 <spi_select_slave+0xe>
    3e5e:	0020      	movs	r0, r4
    3e60:	bd70      	pop	{r4, r5, r6, pc}
    3e62:	7a04      	ldrb	r4, [r0, #8]
    3e64:	2c00      	cmp	r4, #0
    3e66:	d13a      	bne.n	3ede <spi_select_slave+0x8a>
    3e68:	2a00      	cmp	r2, #0
    3e6a:	d03a      	beq.n	3ee2 <spi_select_slave+0x8e>
    3e6c:	784a      	ldrb	r2, [r1, #1]
    3e6e:	2a00      	cmp	r2, #0
    3e70:	d046      	beq.n	3f00 <spi_select_slave+0xac>
    3e72:	6802      	ldr	r2, [r0, #0]
    3e74:	7e12      	ldrb	r2, [r2, #24]
    3e76:	401a      	ands	r2, r3
    3e78:	d10d      	bne.n	3e96 <spi_select_slave+0x42>
    3e7a:	7808      	ldrb	r0, [r1, #0]
    3e7c:	0941      	lsrs	r1, r0, #5
    3e7e:	09c4      	lsrs	r4, r0, #7
    3e80:	d13c      	bne.n	3efc <spi_select_slave+0xa8>
    3e82:	321f      	adds	r2, #31
    3e84:	4002      	ands	r2, r0
    3e86:	4093      	lsls	r3, r2
    3e88:	01ca      	lsls	r2, r1, #7
    3e8a:	4926      	ldr	r1, [pc, #152]	; (3f24 <spi_select_slave+0xd0>)
    3e8c:	3405      	adds	r4, #5
    3e8e:	468c      	mov	ip, r1
    3e90:	4462      	add	r2, ip
    3e92:	6193      	str	r3, [r2, #24]
    3e94:	e7e3      	b.n	3e5e <spi_select_slave+0xa>
    3e96:	780d      	ldrb	r5, [r1, #0]
    3e98:	096a      	lsrs	r2, r5, #5
    3e9a:	09ee      	lsrs	r6, r5, #7
    3e9c:	d13f      	bne.n	3f1e <spi_select_slave+0xca>
    3e9e:	241f      	movs	r4, #31
    3ea0:	402c      	ands	r4, r5
    3ea2:	001d      	movs	r5, r3
    3ea4:	40a5      	lsls	r5, r4
    3ea6:	002c      	movs	r4, r5
    3ea8:	4d1e      	ldr	r5, [pc, #120]	; (3f24 <spi_select_slave+0xd0>)
    3eaa:	01d2      	lsls	r2, r2, #7
    3eac:	46ac      	mov	ip, r5
    3eae:	4462      	add	r2, ip
    3eb0:	6154      	str	r4, [r2, #20]
    3eb2:	6802      	ldr	r2, [r0, #0]
    3eb4:	788c      	ldrb	r4, [r1, #2]
    3eb6:	7e11      	ldrb	r1, [r2, #24]
    3eb8:	420b      	tst	r3, r1
    3eba:	d000      	beq.n	3ebe <spi_select_slave+0x6a>
    3ebc:	6294      	str	r4, [r2, #40]	; 0x28
    3ebe:	79c3      	ldrb	r3, [r0, #7]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d10c      	bne.n	3ede <spi_select_slave+0x8a>
    3ec4:	2104      	movs	r1, #4
    3ec6:	6802      	ldr	r2, [r0, #0]
    3ec8:	7e13      	ldrb	r3, [r2, #24]
    3eca:	4219      	tst	r1, r3
    3ecc:	d0fc      	beq.n	3ec8 <spi_select_slave+0x74>
    3ece:	7e13      	ldrb	r3, [r2, #24]
    3ed0:	4219      	tst	r1, r3
    3ed2:	d004      	beq.n	3ede <spi_select_slave+0x8a>
    3ed4:	8b53      	ldrh	r3, [r2, #26]
    3ed6:	075b      	lsls	r3, r3, #29
    3ed8:	d500      	bpl.n	3edc <spi_select_slave+0x88>
    3eda:	8351      	strh	r1, [r2, #26]
    3edc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ede:	2400      	movs	r4, #0
    3ee0:	e7bd      	b.n	3e5e <spi_select_slave+0xa>
    3ee2:	7808      	ldrb	r0, [r1, #0]
    3ee4:	0941      	lsrs	r1, r0, #5
    3ee6:	09c4      	lsrs	r4, r0, #7
    3ee8:	d108      	bne.n	3efc <spi_select_slave+0xa8>
    3eea:	221f      	movs	r2, #31
    3eec:	4002      	ands	r2, r0
    3eee:	4093      	lsls	r3, r2
    3ef0:	01ca      	lsls	r2, r1, #7
    3ef2:	490c      	ldr	r1, [pc, #48]	; (3f24 <spi_select_slave+0xd0>)
    3ef4:	468c      	mov	ip, r1
    3ef6:	4462      	add	r2, ip
    3ef8:	6193      	str	r3, [r2, #24]
    3efa:	e7b0      	b.n	3e5e <spi_select_slave+0xa>
    3efc:	6192      	str	r2, [r2, #24]
    3efe:	deff      	udf	#255	; 0xff
    3f00:	7808      	ldrb	r0, [r1, #0]
    3f02:	0941      	lsrs	r1, r0, #5
    3f04:	09c4      	lsrs	r4, r0, #7
    3f06:	d108      	bne.n	3f1a <spi_select_slave+0xc6>
    3f08:	221f      	movs	r2, #31
    3f0a:	4002      	ands	r2, r0
    3f0c:	4093      	lsls	r3, r2
    3f0e:	01ca      	lsls	r2, r1, #7
    3f10:	4904      	ldr	r1, [pc, #16]	; (3f24 <spi_select_slave+0xd0>)
    3f12:	468c      	mov	ip, r1
    3f14:	4462      	add	r2, ip
    3f16:	6153      	str	r3, [r2, #20]
    3f18:	e7a1      	b.n	3e5e <spi_select_slave+0xa>
    3f1a:	6152      	str	r2, [r2, #20]
    3f1c:	deff      	udf	#255	; 0xff
    3f1e:	6164      	str	r4, [r4, #20]
    3f20:	deff      	udf	#255	; 0xff
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	40002800 	.word	0x40002800

00003f28 <usart_init>:
    3f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2a:	4645      	mov	r5, r8
    3f2c:	46de      	mov	lr, fp
    3f2e:	464e      	mov	r6, r9
    3f30:	4657      	mov	r7, sl
    3f32:	0003      	movs	r3, r0
    3f34:	b5e0      	push	{r5, r6, r7, lr}
    3f36:	6019      	str	r1, [r3, #0]
    3f38:	4bb6      	ldr	r3, [pc, #728]	; (4214 <usart_init+0x2ec>)
    3f3a:	b091      	sub	sp, #68	; 0x44
    3f3c:	4680      	mov	r8, r0
    3f3e:	0008      	movs	r0, r1
    3f40:	4699      	mov	r9, r3
    3f42:	000c      	movs	r4, r1
    3f44:	0015      	movs	r5, r2
    3f46:	4798      	blx	r3
    3f48:	0003      	movs	r3, r0
    3f4a:	2805      	cmp	r0, #5
    3f4c:	d100      	bne.n	3f50 <usart_init+0x28>
    3f4e:	e108      	b.n	4162 <usart_init+0x23a>
    3f50:	0006      	movs	r6, r0
    3f52:	0007      	movs	r7, r0
    3f54:	3612      	adds	r6, #18
    3f56:	2201      	movs	r2, #1
    3f58:	6821      	ldr	r1, [r4, #0]
    3f5a:	2005      	movs	r0, #5
    3f5c:	420a      	tst	r2, r1
    3f5e:	d006      	beq.n	3f6e <usart_init+0x46>
    3f60:	b011      	add	sp, #68	; 0x44
    3f62:	bc3c      	pop	{r2, r3, r4, r5}
    3f64:	4690      	mov	r8, r2
    3f66:	4699      	mov	r9, r3
    3f68:	46a2      	mov	sl, r4
    3f6a:	46ab      	mov	fp, r5
    3f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f6e:	6821      	ldr	r1, [r4, #0]
    3f70:	3017      	adds	r0, #23
    3f72:	0789      	lsls	r1, r1, #30
    3f74:	d4f4      	bmi.n	3f60 <usart_init+0x38>
    3f76:	2b05      	cmp	r3, #5
    3f78:	d100      	bne.n	3f7c <usart_init+0x54>
    3f7a:	e119      	b.n	41b0 <usart_init+0x288>
    3f7c:	40ba      	lsls	r2, r7
    3f7e:	4ba6      	ldr	r3, [pc, #664]	; (4218 <usart_init+0x2f0>)
    3f80:	69d9      	ldr	r1, [r3, #28]
    3f82:	430a      	orrs	r2, r1
    3f84:	61da      	str	r2, [r3, #28]
    3f86:	272d      	movs	r7, #45	; 0x2d
    3f88:	5deb      	ldrb	r3, [r5, r7]
    3f8a:	a90a      	add	r1, sp, #40	; 0x28
    3f8c:	b2f6      	uxtb	r6, r6
    3f8e:	700b      	strb	r3, [r1, #0]
    3f90:	0030      	movs	r0, r6
    3f92:	4ba2      	ldr	r3, [pc, #648]	; (421c <usart_init+0x2f4>)
    3f94:	4798      	blx	r3
    3f96:	0030      	movs	r0, r6
    3f98:	4ba1      	ldr	r3, [pc, #644]	; (4220 <usart_init+0x2f8>)
    3f9a:	4798      	blx	r3
    3f9c:	2100      	movs	r1, #0
    3f9e:	4ba1      	ldr	r3, [pc, #644]	; (4224 <usart_init+0x2fc>)
    3fa0:	5de8      	ldrb	r0, [r5, r7]
    3fa2:	4798      	blx	r3
    3fa4:	4642      	mov	r2, r8
    3fa6:	7aeb      	ldrb	r3, [r5, #11]
    3fa8:	ae0c      	add	r6, sp, #48	; 0x30
    3faa:	7153      	strb	r3, [r2, #5]
    3fac:	2324      	movs	r3, #36	; 0x24
    3fae:	5ceb      	ldrb	r3, [r5, r3]
    3fb0:	7193      	strb	r3, [r2, #6]
    3fb2:	2325      	movs	r3, #37	; 0x25
    3fb4:	5ceb      	ldrb	r3, [r5, r3]
    3fb6:	71d3      	strb	r3, [r2, #7]
    3fb8:	7eeb      	ldrb	r3, [r5, #27]
    3fba:	7213      	strb	r3, [r2, #8]
    3fbc:	7f2b      	ldrb	r3, [r5, #28]
    3fbe:	7253      	strb	r3, [r2, #9]
    3fc0:	6813      	ldr	r3, [r2, #0]
    3fc2:	0018      	movs	r0, r3
    3fc4:	469a      	mov	sl, r3
    3fc6:	47c8      	blx	r9
    3fc8:	2300      	movs	r3, #0
    3fca:	8033      	strh	r3, [r6, #0]
    3fcc:	2380      	movs	r3, #128	; 0x80
    3fce:	8a2a      	ldrh	r2, [r5, #16]
    3fd0:	3012      	adds	r0, #18
    3fd2:	9202      	str	r2, [sp, #8]
    3fd4:	01db      	lsls	r3, r3, #7
    3fd6:	429a      	cmp	r2, r3
    3fd8:	d100      	bne.n	3fdc <usart_init+0xb4>
    3fda:	e0ef      	b.n	41bc <usart_init+0x294>
    3fdc:	d800      	bhi.n	3fe0 <usart_init+0xb8>
    3fde:	e0de      	b.n	419e <usart_init+0x276>
    3fe0:	23c0      	movs	r3, #192	; 0xc0
    3fe2:	01db      	lsls	r3, r3, #7
    3fe4:	429a      	cmp	r2, r3
    3fe6:	d100      	bne.n	3fea <usart_init+0xc2>
    3fe8:	e0be      	b.n	4168 <usart_init+0x240>
    3fea:	2380      	movs	r3, #128	; 0x80
    3fec:	021b      	lsls	r3, r3, #8
    3fee:	429a      	cmp	r2, r3
    3ff0:	d000      	beq.n	3ff4 <usart_init+0xcc>
    3ff2:	e0e8      	b.n	41c6 <usart_init+0x29e>
    3ff4:	2303      	movs	r3, #3
    3ff6:	9309      	str	r3, [sp, #36]	; 0x24
    3ff8:	2300      	movs	r3, #0
    3ffa:	9308      	str	r3, [sp, #32]
    3ffc:	682b      	ldr	r3, [r5, #0]
    3ffe:	9303      	str	r3, [sp, #12]
    4000:	68eb      	ldr	r3, [r5, #12]
    4002:	9304      	str	r3, [sp, #16]
    4004:	696b      	ldr	r3, [r5, #20]
    4006:	9305      	str	r3, [sp, #20]
    4008:	7e2b      	ldrb	r3, [r5, #24]
    400a:	9306      	str	r3, [sp, #24]
    400c:	2326      	movs	r3, #38	; 0x26
    400e:	5ceb      	ldrb	r3, [r5, r3]
    4010:	9307      	str	r3, [sp, #28]
    4012:	686b      	ldr	r3, [r5, #4]
    4014:	469b      	mov	fp, r3
    4016:	2b00      	cmp	r3, #0
    4018:	d100      	bne.n	401c <usart_init+0xf4>
    401a:	e0af      	b.n	417c <usart_init+0x254>
    401c:	2380      	movs	r3, #128	; 0x80
    401e:	055b      	lsls	r3, r3, #21
    4020:	459b      	cmp	fp, r3
    4022:	d000      	beq.n	4026 <usart_init+0xfe>
    4024:	e0a8      	b.n	4178 <usart_init+0x250>
    4026:	2327      	movs	r3, #39	; 0x27
    4028:	5ceb      	ldrb	r3, [r5, r3]
    402a:	2100      	movs	r1, #0
    402c:	2b00      	cmp	r3, #0
    402e:	d100      	bne.n	4032 <usart_init+0x10a>
    4030:	e0e4      	b.n	41fc <usart_init+0x2d4>
    4032:	7e6b      	ldrb	r3, [r5, #25]
    4034:	2b00      	cmp	r3, #0
    4036:	d002      	beq.n	403e <usart_init+0x116>
    4038:	4652      	mov	r2, sl
    403a:	7eab      	ldrb	r3, [r5, #26]
    403c:	7393      	strb	r3, [r2, #14]
    403e:	4643      	mov	r3, r8
    4040:	9f02      	ldr	r7, [sp, #8]
    4042:	681a      	ldr	r2, [r3, #0]
    4044:	69d3      	ldr	r3, [r2, #28]
    4046:	2b00      	cmp	r3, #0
    4048:	d1fc      	bne.n	4044 <usart_init+0x11c>
    404a:	4653      	mov	r3, sl
    404c:	9a04      	ldr	r2, [sp, #16]
    404e:	8199      	strh	r1, [r3, #12]
    4050:	9b03      	ldr	r3, [sp, #12]
    4052:	4313      	orrs	r3, r2
    4054:	9a05      	ldr	r2, [sp, #20]
    4056:	4313      	orrs	r3, r2
    4058:	465a      	mov	r2, fp
    405a:	4313      	orrs	r3, r2
    405c:	431f      	orrs	r7, r3
    405e:	9b06      	ldr	r3, [sp, #24]
    4060:	021b      	lsls	r3, r3, #8
    4062:	431f      	orrs	r7, r3
    4064:	9b07      	ldr	r3, [sp, #28]
    4066:	075b      	lsls	r3, r3, #29
    4068:	431f      	orrs	r7, r3
    406a:	2327      	movs	r3, #39	; 0x27
    406c:	5ceb      	ldrb	r3, [r5, r3]
    406e:	2b00      	cmp	r3, #0
    4070:	d101      	bne.n	4076 <usart_init+0x14e>
    4072:	3304      	adds	r3, #4
    4074:	431f      	orrs	r7, r3
    4076:	7e6b      	ldrb	r3, [r5, #25]
    4078:	7f2a      	ldrb	r2, [r5, #28]
    407a:	029b      	lsls	r3, r3, #10
    407c:	0252      	lsls	r2, r2, #9
    407e:	4313      	orrs	r3, r2
    4080:	7f6a      	ldrb	r2, [r5, #29]
    4082:	7ae9      	ldrb	r1, [r5, #11]
    4084:	0212      	lsls	r2, r2, #8
    4086:	4313      	orrs	r3, r2
    4088:	2224      	movs	r2, #36	; 0x24
    408a:	5caa      	ldrb	r2, [r5, r2]
    408c:	0452      	lsls	r2, r2, #17
    408e:	4313      	orrs	r3, r2
    4090:	2225      	movs	r2, #37	; 0x25
    4092:	5caa      	ldrb	r2, [r5, r2]
    4094:	0412      	lsls	r2, r2, #16
    4096:	4313      	orrs	r3, r2
    4098:	892a      	ldrh	r2, [r5, #8]
    409a:	4319      	orrs	r1, r3
    409c:	2aff      	cmp	r2, #255	; 0xff
    409e:	d100      	bne.n	40a2 <usart_init+0x17a>
    40a0:	e096      	b.n	41d0 <usart_init+0x2a8>
    40a2:	2380      	movs	r3, #128	; 0x80
    40a4:	045b      	lsls	r3, r3, #17
    40a6:	431f      	orrs	r7, r3
    40a8:	4311      	orrs	r1, r2
    40aa:	222c      	movs	r2, #44	; 0x2c
    40ac:	5caa      	ldrb	r2, [r5, r2]
    40ae:	2a00      	cmp	r2, #0
    40b0:	d103      	bne.n	40ba <usart_init+0x192>
    40b2:	4b5d      	ldr	r3, [pc, #372]	; (4228 <usart_init+0x300>)
    40b4:	789b      	ldrb	r3, [r3, #2]
    40b6:	079b      	lsls	r3, r3, #30
    40b8:	d501      	bpl.n	40be <usart_init+0x196>
    40ba:	2380      	movs	r3, #128	; 0x80
    40bc:	431f      	orrs	r7, r3
    40be:	4643      	mov	r3, r8
    40c0:	681a      	ldr	r2, [r3, #0]
    40c2:	69d3      	ldr	r3, [r2, #28]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d1fc      	bne.n	40c2 <usart_init+0x19a>
    40c8:	4653      	mov	r3, sl
    40ca:	6059      	str	r1, [r3, #4]
    40cc:	4643      	mov	r3, r8
    40ce:	681a      	ldr	r2, [r3, #0]
    40d0:	69d3      	ldr	r3, [r2, #28]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d1fc      	bne.n	40d0 <usart_init+0x1a8>
    40d6:	4652      	mov	r2, sl
    40d8:	6017      	str	r7, [r2, #0]
    40da:	af0b      	add	r7, sp, #44	; 0x2c
    40dc:	707b      	strb	r3, [r7, #1]
    40de:	70fb      	strb	r3, [r7, #3]
    40e0:	70bb      	strb	r3, [r7, #2]
    40e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    40e4:	2280      	movs	r2, #128	; 0x80
    40e6:	930c      	str	r3, [sp, #48]	; 0x30
    40e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    40ea:	703a      	strb	r2, [r7, #0]
    40ec:	6073      	str	r3, [r6, #4]
    40ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
    40f0:	60b3      	str	r3, [r6, #8]
    40f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    40f4:	2500      	movs	r5, #0
    40f6:	60f3      	str	r3, [r6, #12]
    40f8:	4b4c      	ldr	r3, [pc, #304]	; (422c <usart_init+0x304>)
    40fa:	469b      	mov	fp, r3
    40fc:	4b4c      	ldr	r3, [pc, #304]	; (4230 <usart_init+0x308>)
    40fe:	469a      	mov	sl, r3
    4100:	00ab      	lsls	r3, r5, #2
    4102:	58f0      	ldr	r0, [r6, r3]
    4104:	b2e9      	uxtb	r1, r5
    4106:	2800      	cmp	r0, #0
    4108:	d033      	beq.n	4172 <usart_init+0x24a>
    410a:	1c43      	adds	r3, r0, #1
    410c:	d004      	beq.n	4118 <usart_init+0x1f0>
    410e:	7038      	strb	r0, [r7, #0]
    4110:	0c00      	lsrs	r0, r0, #16
    4112:	b2c0      	uxtb	r0, r0
    4114:	0039      	movs	r1, r7
    4116:	47d0      	blx	sl
    4118:	3501      	adds	r5, #1
    411a:	2d04      	cmp	r5, #4
    411c:	d1f0      	bne.n	4100 <usart_init+0x1d8>
    411e:	4640      	mov	r0, r8
    4120:	2218      	movs	r2, #24
    4122:	2100      	movs	r1, #0
    4124:	4b43      	ldr	r3, [pc, #268]	; (4234 <usart_init+0x30c>)
    4126:	300c      	adds	r0, #12
    4128:	4798      	blx	r3
    412a:	2200      	movs	r2, #0
    412c:	4643      	mov	r3, r8
    412e:	4641      	mov	r1, r8
    4130:	629a      	str	r2, [r3, #40]	; 0x28
    4132:	625a      	str	r2, [r3, #36]	; 0x24
    4134:	2300      	movs	r3, #0
    4136:	85ca      	strh	r2, [r1, #46]	; 0x2e
    4138:	858a      	strh	r2, [r1, #44]	; 0x2c
    413a:	3230      	adds	r2, #48	; 0x30
    413c:	548b      	strb	r3, [r1, r2]
    413e:	3201      	adds	r2, #1
    4140:	548b      	strb	r3, [r1, r2]
    4142:	3201      	adds	r2, #1
    4144:	548b      	strb	r3, [r1, r2]
    4146:	3201      	adds	r2, #1
    4148:	548b      	strb	r3, [r1, r2]
    414a:	6808      	ldr	r0, [r1, #0]
    414c:	47c8      	blx	r9
    414e:	4b3a      	ldr	r3, [pc, #232]	; (4238 <usart_init+0x310>)
    4150:	0004      	movs	r4, r0
    4152:	493a      	ldr	r1, [pc, #232]	; (423c <usart_init+0x314>)
    4154:	4798      	blx	r3
    4156:	4642      	mov	r2, r8
    4158:	4b39      	ldr	r3, [pc, #228]	; (4240 <usart_init+0x318>)
    415a:	00a4      	lsls	r4, r4, #2
    415c:	50e2      	str	r2, [r4, r3]
    415e:	2000      	movs	r0, #0
    4160:	e6fe      	b.n	3f60 <usart_init+0x38>
    4162:	2618      	movs	r6, #24
    4164:	2701      	movs	r7, #1
    4166:	e6f6      	b.n	3f56 <usart_init+0x2e>
    4168:	2308      	movs	r3, #8
    416a:	9309      	str	r3, [sp, #36]	; 0x24
    416c:	3b07      	subs	r3, #7
    416e:	9308      	str	r3, [sp, #32]
    4170:	e744      	b.n	3ffc <usart_init+0xd4>
    4172:	0020      	movs	r0, r4
    4174:	47d8      	blx	fp
    4176:	e7c8      	b.n	410a <usart_init+0x1e2>
    4178:	2100      	movs	r1, #0
    417a:	e75a      	b.n	4032 <usart_init+0x10a>
    417c:	2327      	movs	r3, #39	; 0x27
    417e:	5ceb      	ldrb	r3, [r5, r3]
    4180:	2b00      	cmp	r3, #0
    4182:	d02d      	beq.n	41e0 <usart_init+0x2b8>
    4184:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4186:	0032      	movs	r2, r6
    4188:	9300      	str	r3, [sp, #0]
    418a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    418c:	9b08      	ldr	r3, [sp, #32]
    418e:	6a28      	ldr	r0, [r5, #32]
    4190:	4f2c      	ldr	r7, [pc, #176]	; (4244 <usart_init+0x31c>)
    4192:	47b8      	blx	r7
    4194:	2800      	cmp	r0, #0
    4196:	d000      	beq.n	419a <usart_init+0x272>
    4198:	e6e2      	b.n	3f60 <usart_init+0x38>
    419a:	8831      	ldrh	r1, [r6, #0]
    419c:	e749      	b.n	4032 <usart_init+0x10a>
    419e:	2380      	movs	r3, #128	; 0x80
    41a0:	019b      	lsls	r3, r3, #6
    41a2:	429a      	cmp	r2, r3
    41a4:	d10f      	bne.n	41c6 <usart_init+0x29e>
    41a6:	2310      	movs	r3, #16
    41a8:	9309      	str	r3, [sp, #36]	; 0x24
    41aa:	3b0f      	subs	r3, #15
    41ac:	9308      	str	r3, [sp, #32]
    41ae:	e725      	b.n	3ffc <usart_init+0xd4>
    41b0:	40ba      	lsls	r2, r7
    41b2:	4b19      	ldr	r3, [pc, #100]	; (4218 <usart_init+0x2f0>)
    41b4:	6a19      	ldr	r1, [r3, #32]
    41b6:	430a      	orrs	r2, r1
    41b8:	621a      	str	r2, [r3, #32]
    41ba:	e6e4      	b.n	3f86 <usart_init+0x5e>
    41bc:	2308      	movs	r3, #8
    41be:	9309      	str	r3, [sp, #36]	; 0x24
    41c0:	2300      	movs	r3, #0
    41c2:	9308      	str	r3, [sp, #32]
    41c4:	e71a      	b.n	3ffc <usart_init+0xd4>
    41c6:	2310      	movs	r3, #16
    41c8:	9309      	str	r3, [sp, #36]	; 0x24
    41ca:	2300      	movs	r3, #0
    41cc:	9308      	str	r3, [sp, #32]
    41ce:	e715      	b.n	3ffc <usart_init+0xd4>
    41d0:	7eeb      	ldrb	r3, [r5, #27]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d100      	bne.n	41d8 <usart_init+0x2b0>
    41d6:	e768      	b.n	40aa <usart_init+0x182>
    41d8:	2380      	movs	r3, #128	; 0x80
    41da:	04db      	lsls	r3, r3, #19
    41dc:	431f      	orrs	r7, r3
    41de:	e764      	b.n	40aa <usart_init+0x182>
    41e0:	6a2b      	ldr	r3, [r5, #32]
    41e2:	b2c0      	uxtb	r0, r0
    41e4:	001f      	movs	r7, r3
    41e6:	4b18      	ldr	r3, [pc, #96]	; (4248 <usart_init+0x320>)
    41e8:	4798      	blx	r3
    41ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41ec:	0001      	movs	r1, r0
    41ee:	9300      	str	r3, [sp, #0]
    41f0:	0032      	movs	r2, r6
    41f2:	9b08      	ldr	r3, [sp, #32]
    41f4:	0038      	movs	r0, r7
    41f6:	4f13      	ldr	r7, [pc, #76]	; (4244 <usart_init+0x31c>)
    41f8:	47b8      	blx	r7
    41fa:	e7cb      	b.n	4194 <usart_init+0x26c>
    41fc:	6a2b      	ldr	r3, [r5, #32]
    41fe:	b2c0      	uxtb	r0, r0
    4200:	001f      	movs	r7, r3
    4202:	4b11      	ldr	r3, [pc, #68]	; (4248 <usart_init+0x320>)
    4204:	4798      	blx	r3
    4206:	0032      	movs	r2, r6
    4208:	0001      	movs	r1, r0
    420a:	4b10      	ldr	r3, [pc, #64]	; (424c <usart_init+0x324>)
    420c:	0038      	movs	r0, r7
    420e:	4798      	blx	r3
    4210:	e7c0      	b.n	4194 <usart_init+0x26c>
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	000038e9 	.word	0x000038e9
    4218:	40000400 	.word	0x40000400
    421c:	00004905 	.word	0x00004905
    4220:	00004945 	.word	0x00004945
    4224:	00003745 	.word	0x00003745
    4228:	41002000 	.word	0x41002000
    422c:	0000378d 	.word	0x0000378d
    4230:	00004a01 	.word	0x00004a01
    4234:	00007ebf 	.word	0x00007ebf
    4238:	00003951 	.word	0x00003951
    423c:	000043f9 	.word	0x000043f9
    4240:	20000abc 	.word	0x20000abc
    4244:	0000355d 	.word	0x0000355d
    4248:	0000497d 	.word	0x0000497d
    424c:	00003535 	.word	0x00003535

00004250 <usart_write_wait>:
    4250:	79c2      	ldrb	r2, [r0, #7]
    4252:	231c      	movs	r3, #28
    4254:	2a00      	cmp	r2, #0
    4256:	d101      	bne.n	425c <usart_write_wait+0xc>
    4258:	0018      	movs	r0, r3
    425a:	4770      	bx	lr
    425c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    425e:	3b17      	subs	r3, #23
    4260:	2a00      	cmp	r2, #0
    4262:	d1f9      	bne.n	4258 <usart_write_wait+0x8>
    4264:	6803      	ldr	r3, [r0, #0]
    4266:	69da      	ldr	r2, [r3, #28]
    4268:	2a00      	cmp	r2, #0
    426a:	d1fc      	bne.n	4266 <usart_write_wait+0x16>
    426c:	8519      	strh	r1, [r3, #40]	; 0x28
    426e:	2102      	movs	r1, #2
    4270:	7e1a      	ldrb	r2, [r3, #24]
    4272:	4211      	tst	r1, r2
    4274:	d0fc      	beq.n	4270 <usart_write_wait+0x20>
    4276:	2300      	movs	r3, #0
    4278:	e7ee      	b.n	4258 <usart_write_wait+0x8>
    427a:	46c0      	nop			; (mov r8, r8)

0000427c <usart_read_wait>:
    427c:	7982      	ldrb	r2, [r0, #6]
    427e:	0003      	movs	r3, r0
    4280:	201c      	movs	r0, #28
    4282:	2a00      	cmp	r2, #0
    4284:	d100      	bne.n	4288 <usart_read_wait+0xc>
    4286:	4770      	bx	lr
    4288:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    428a:	3817      	subs	r0, #23
    428c:	2a00      	cmp	r2, #0
    428e:	d1fa      	bne.n	4286 <usart_read_wait+0xa>
    4290:	681a      	ldr	r2, [r3, #0]
    4292:	7e13      	ldrb	r3, [r2, #24]
    4294:	075b      	lsls	r3, r3, #29
    4296:	d5f6      	bpl.n	4286 <usart_read_wait+0xa>
    4298:	69d3      	ldr	r3, [r2, #28]
    429a:	2b00      	cmp	r3, #0
    429c:	d1fc      	bne.n	4298 <usart_read_wait+0x1c>
    429e:	8b53      	ldrh	r3, [r2, #26]
    42a0:	b2db      	uxtb	r3, r3
    42a2:	0698      	lsls	r0, r3, #26
    42a4:	d005      	beq.n	42b2 <usart_read_wait+0x36>
    42a6:	2002      	movs	r0, #2
    42a8:	4218      	tst	r0, r3
    42aa:	d006      	beq.n	42ba <usart_read_wait+0x3e>
    42ac:	8350      	strh	r0, [r2, #26]
    42ae:	3018      	adds	r0, #24
    42b0:	e7e9      	b.n	4286 <usart_read_wait+0xa>
    42b2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    42b4:	2000      	movs	r0, #0
    42b6:	800b      	strh	r3, [r1, #0]
    42b8:	e7e5      	b.n	4286 <usart_read_wait+0xa>
    42ba:	2004      	movs	r0, #4
    42bc:	4218      	tst	r0, r3
    42be:	d002      	beq.n	42c6 <usart_read_wait+0x4a>
    42c0:	8350      	strh	r0, [r2, #26]
    42c2:	301a      	adds	r0, #26
    42c4:	e7df      	b.n	4286 <usart_read_wait+0xa>
    42c6:	2001      	movs	r0, #1
    42c8:	4218      	tst	r0, r3
    42ca:	d002      	beq.n	42d2 <usart_read_wait+0x56>
    42cc:	8350      	strh	r0, [r2, #26]
    42ce:	3012      	adds	r0, #18
    42d0:	e7d9      	b.n	4286 <usart_read_wait+0xa>
    42d2:	2010      	movs	r0, #16
    42d4:	4203      	tst	r3, r0
    42d6:	d002      	beq.n	42de <usart_read_wait+0x62>
    42d8:	8350      	strh	r0, [r2, #26]
    42da:	3032      	adds	r0, #50	; 0x32
    42dc:	e7d3      	b.n	4286 <usart_read_wait+0xa>
    42de:	2020      	movs	r0, #32
    42e0:	4203      	tst	r3, r0
    42e2:	d0e6      	beq.n	42b2 <usart_read_wait+0x36>
    42e4:	8350      	strh	r0, [r2, #26]
    42e6:	3021      	adds	r0, #33	; 0x21
    42e8:	e7cd      	b.n	4286 <usart_read_wait+0xa>
    42ea:	46c0      	nop			; (mov r8, r8)

000042ec <usart_read_buffer_wait>:
    42ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ee:	46de      	mov	lr, fp
    42f0:	4657      	mov	r7, sl
    42f2:	464e      	mov	r6, r9
    42f4:	4645      	mov	r5, r8
    42f6:	b5e0      	push	{r5, r6, r7, lr}
    42f8:	2317      	movs	r3, #23
    42fa:	b083      	sub	sp, #12
    42fc:	2a00      	cmp	r2, #0
    42fe:	d107      	bne.n	4310 <usart_read_buffer_wait+0x24>
    4300:	0018      	movs	r0, r3
    4302:	b003      	add	sp, #12
    4304:	bc3c      	pop	{r2, r3, r4, r5}
    4306:	4690      	mov	r8, r2
    4308:	4699      	mov	r9, r3
    430a:	46a2      	mov	sl, r4
    430c:	46ab      	mov	fp, r5
    430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4310:	7983      	ldrb	r3, [r0, #6]
    4312:	2b00      	cmp	r3, #0
    4314:	d101      	bne.n	431a <usart_read_buffer_wait+0x2e>
    4316:	231c      	movs	r3, #28
    4318:	e7f2      	b.n	4300 <usart_read_buffer_wait+0x14>
    431a:	2502      	movs	r5, #2
    431c:	46ab      	mov	fp, r5
    431e:	3d01      	subs	r5, #1
    4320:	46aa      	mov	sl, r5
    4322:	350f      	adds	r5, #15
    4324:	46a9      	mov	r9, r5
    4326:	4d33      	ldr	r5, [pc, #204]	; (43f4 <usart_read_buffer_wait+0x108>)
    4328:	2600      	movs	r6, #0
    432a:	2304      	movs	r3, #4
    432c:	46a8      	mov	r8, r5
    432e:	3a01      	subs	r2, #1
    4330:	6804      	ldr	r4, [r0, #0]
    4332:	b292      	uxth	r2, r2
    4334:	7e25      	ldrb	r5, [r4, #24]
    4336:	422b      	tst	r3, r5
    4338:	d107      	bne.n	434a <usart_read_buffer_wait+0x5e>
    433a:	4d2e      	ldr	r5, [pc, #184]	; (43f4 <usart_read_buffer_wait+0x108>)
    433c:	e002      	b.n	4344 <usart_read_buffer_wait+0x58>
    433e:	3d01      	subs	r5, #1
    4340:	2d00      	cmp	r5, #0
    4342:	d00a      	beq.n	435a <usart_read_buffer_wait+0x6e>
    4344:	7e27      	ldrb	r7, [r4, #24]
    4346:	423b      	tst	r3, r7
    4348:	d0f9      	beq.n	433e <usart_read_buffer_wait+0x52>
    434a:	7985      	ldrb	r5, [r0, #6]
    434c:	2d00      	cmp	r5, #0
    434e:	d0e2      	beq.n	4316 <usart_read_buffer_wait+0x2a>
    4350:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
    4352:	2d00      	cmp	r5, #0
    4354:	d003      	beq.n	435e <usart_read_buffer_wait+0x72>
    4356:	2305      	movs	r3, #5
    4358:	e7d2      	b.n	4300 <usart_read_buffer_wait+0x14>
    435a:	2312      	movs	r3, #18
    435c:	e7d0      	b.n	4300 <usart_read_buffer_wait+0x14>
    435e:	6805      	ldr	r5, [r0, #0]
    4360:	7e2f      	ldrb	r7, [r5, #24]
    4362:	423b      	tst	r3, r7
    4364:	d0f7      	beq.n	4356 <usart_read_buffer_wait+0x6a>
    4366:	69ef      	ldr	r7, [r5, #28]
    4368:	2f00      	cmp	r7, #0
    436a:	d1fc      	bne.n	4366 <usart_read_buffer_wait+0x7a>
    436c:	8b6f      	ldrh	r7, [r5, #26]
    436e:	46ac      	mov	ip, r5
    4370:	253f      	movs	r5, #63	; 0x3f
    4372:	b2ff      	uxtb	r7, r7
    4374:	423d      	tst	r5, r7
    4376:	d007      	beq.n	4388 <usart_read_buffer_wait+0x9c>
    4378:	465d      	mov	r5, fp
    437a:	423d      	tst	r5, r7
    437c:	d01b      	beq.n	43b6 <usart_read_buffer_wait+0xca>
    437e:	465b      	mov	r3, fp
    4380:	4665      	mov	r5, ip
    4382:	836b      	strh	r3, [r5, #26]
    4384:	231a      	movs	r3, #26
    4386:	e7bb      	b.n	4300 <usart_read_buffer_wait+0x14>
    4388:	4665      	mov	r5, ip
    438a:	8d2d      	ldrh	r5, [r5, #40]	; 0x28
    438c:	1c77      	adds	r7, r6, #1
    438e:	b2bf      	uxth	r7, r7
    4390:	b2ad      	uxth	r5, r5
    4392:	9701      	str	r7, [sp, #4]
    4394:	558d      	strb	r5, [r1, r6]
    4396:	7947      	ldrb	r7, [r0, #5]
    4398:	2f01      	cmp	r7, #1
    439a:	d006      	beq.n	43aa <usart_read_buffer_wait+0xbe>
    439c:	9e01      	ldr	r6, [sp, #4]
    439e:	3a01      	subs	r2, #1
    43a0:	b292      	uxth	r2, r2
    43a2:	4542      	cmp	r2, r8
    43a4:	d1c6      	bne.n	4334 <usart_read_buffer_wait+0x48>
    43a6:	2300      	movs	r3, #0
    43a8:	e7aa      	b.n	4300 <usart_read_buffer_wait+0x14>
    43aa:	9f01      	ldr	r7, [sp, #4]
    43ac:	3602      	adds	r6, #2
    43ae:	0a2d      	lsrs	r5, r5, #8
    43b0:	b2b6      	uxth	r6, r6
    43b2:	55cd      	strb	r5, [r1, r7]
    43b4:	e7f3      	b.n	439e <usart_read_buffer_wait+0xb2>
    43b6:	423b      	tst	r3, r7
    43b8:	d003      	beq.n	43c2 <usart_read_buffer_wait+0xd6>
    43ba:	4665      	mov	r5, ip
    43bc:	836b      	strh	r3, [r5, #26]
    43be:	231e      	movs	r3, #30
    43c0:	e79e      	b.n	4300 <usart_read_buffer_wait+0x14>
    43c2:	4655      	mov	r5, sl
    43c4:	423d      	tst	r5, r7
    43c6:	d004      	beq.n	43d2 <usart_read_buffer_wait+0xe6>
    43c8:	4653      	mov	r3, sl
    43ca:	4665      	mov	r5, ip
    43cc:	836b      	strh	r3, [r5, #26]
    43ce:	2313      	movs	r3, #19
    43d0:	e796      	b.n	4300 <usart_read_buffer_wait+0x14>
    43d2:	464d      	mov	r5, r9
    43d4:	422f      	tst	r7, r5
    43d6:	d004      	beq.n	43e2 <usart_read_buffer_wait+0xf6>
    43d8:	464b      	mov	r3, r9
    43da:	4665      	mov	r5, ip
    43dc:	836b      	strh	r3, [r5, #26]
    43de:	2342      	movs	r3, #66	; 0x42
    43e0:	e78e      	b.n	4300 <usart_read_buffer_wait+0x14>
    43e2:	2520      	movs	r5, #32
    43e4:	422f      	tst	r7, r5
    43e6:	d0cf      	beq.n	4388 <usart_read_buffer_wait+0x9c>
    43e8:	2320      	movs	r3, #32
    43ea:	4665      	mov	r5, ip
    43ec:	836b      	strh	r3, [r5, #26]
    43ee:	2341      	movs	r3, #65	; 0x41
    43f0:	e786      	b.n	4300 <usart_read_buffer_wait+0x14>
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	0000ffff 	.word	0x0000ffff

000043f8 <_usart_interrupt_handler>:
    43f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43fa:	4b62      	ldr	r3, [pc, #392]	; (4584 <_usart_interrupt_handler+0x18c>)
    43fc:	0080      	lsls	r0, r0, #2
    43fe:	58c5      	ldr	r5, [r0, r3]
    4400:	682c      	ldr	r4, [r5, #0]
    4402:	69e3      	ldr	r3, [r4, #28]
    4404:	2b00      	cmp	r3, #0
    4406:	d1fc      	bne.n	4402 <_usart_interrupt_handler+0xa>
    4408:	7e23      	ldrb	r3, [r4, #24]
    440a:	7da6      	ldrb	r6, [r4, #22]
    440c:	2231      	movs	r2, #49	; 0x31
    440e:	401e      	ands	r6, r3
    4410:	2330      	movs	r3, #48	; 0x30
    4412:	5caf      	ldrb	r7, [r5, r2]
    4414:	5ceb      	ldrb	r3, [r5, r3]
    4416:	401f      	ands	r7, r3
    4418:	2301      	movs	r3, #1
    441a:	4233      	tst	r3, r6
    441c:	d019      	beq.n	4452 <_usart_interrupt_handler+0x5a>
    441e:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    4420:	2a00      	cmp	r2, #0
    4422:	d04d      	beq.n	44c0 <_usart_interrupt_handler+0xc8>
    4424:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4426:	1c51      	adds	r1, r2, #1
    4428:	7813      	ldrb	r3, [r2, #0]
    442a:	62a9      	str	r1, [r5, #40]	; 0x28
    442c:	7969      	ldrb	r1, [r5, #5]
    442e:	b2db      	uxtb	r3, r3
    4430:	2901      	cmp	r1, #1
    4432:	d100      	bne.n	4436 <_usart_interrupt_handler+0x3e>
    4434:	e075      	b.n	4522 <_usart_interrupt_handler+0x12a>
    4436:	b29b      	uxth	r3, r3
    4438:	05db      	lsls	r3, r3, #23
    443a:	0ddb      	lsrs	r3, r3, #23
    443c:	8523      	strh	r3, [r4, #40]	; 0x28
    443e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4440:	3b01      	subs	r3, #1
    4442:	b29b      	uxth	r3, r3
    4444:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4446:	2b00      	cmp	r3, #0
    4448:	d103      	bne.n	4452 <_usart_interrupt_handler+0x5a>
    444a:	3301      	adds	r3, #1
    444c:	7523      	strb	r3, [r4, #20]
    444e:	3301      	adds	r3, #1
    4450:	75a3      	strb	r3, [r4, #22]
    4452:	2302      	movs	r3, #2
    4454:	4233      	tst	r3, r6
    4456:	d005      	beq.n	4464 <_usart_interrupt_handler+0x6c>
    4458:	2200      	movs	r2, #0
    445a:	7523      	strb	r3, [r4, #20]
    445c:	3331      	adds	r3, #49	; 0x31
    445e:	54ea      	strb	r2, [r5, r3]
    4460:	07fb      	lsls	r3, r7, #31
    4462:	d43b      	bmi.n	44dc <_usart_interrupt_handler+0xe4>
    4464:	2304      	movs	r3, #4
    4466:	4233      	tst	r3, r6
    4468:	d012      	beq.n	4490 <_usart_interrupt_handler+0x98>
    446a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    446c:	2a00      	cmp	r2, #0
    446e:	d025      	beq.n	44bc <_usart_interrupt_handler+0xc4>
    4470:	8b63      	ldrh	r3, [r4, #26]
    4472:	b2db      	uxtb	r3, r3
    4474:	071a      	lsls	r2, r3, #28
    4476:	d535      	bpl.n	44e4 <_usart_interrupt_handler+0xec>
    4478:	2237      	movs	r2, #55	; 0x37
    447a:	4013      	ands	r3, r2
    447c:	d035      	beq.n	44ea <_usart_interrupt_handler+0xf2>
    447e:	2202      	movs	r2, #2
    4480:	421a      	tst	r2, r3
    4482:	d054      	beq.n	452e <_usart_interrupt_handler+0x136>
    4484:	211a      	movs	r1, #26
    4486:	2332      	movs	r3, #50	; 0x32
    4488:	54e9      	strb	r1, [r5, r3]
    448a:	8362      	strh	r2, [r4, #26]
    448c:	077b      	lsls	r3, r7, #29
    448e:	d459      	bmi.n	4544 <_usart_interrupt_handler+0x14c>
    4490:	2310      	movs	r3, #16
    4492:	4233      	tst	r3, r6
    4494:	d003      	beq.n	449e <_usart_interrupt_handler+0xa6>
    4496:	7523      	strb	r3, [r4, #20]
    4498:	7623      	strb	r3, [r4, #24]
    449a:	423b      	tst	r3, r7
    449c:	d116      	bne.n	44cc <_usart_interrupt_handler+0xd4>
    449e:	2320      	movs	r3, #32
    44a0:	4233      	tst	r3, r6
    44a2:	d003      	beq.n	44ac <_usart_interrupt_handler+0xb4>
    44a4:	7523      	strb	r3, [r4, #20]
    44a6:	7623      	strb	r3, [r4, #24]
    44a8:	073b      	lsls	r3, r7, #28
    44aa:	d413      	bmi.n	44d4 <_usart_interrupt_handler+0xdc>
    44ac:	2308      	movs	r3, #8
    44ae:	4233      	tst	r3, r6
    44b0:	d003      	beq.n	44ba <_usart_interrupt_handler+0xc2>
    44b2:	7523      	strb	r3, [r4, #20]
    44b4:	7623      	strb	r3, [r4, #24]
    44b6:	06bb      	lsls	r3, r7, #26
    44b8:	d404      	bmi.n	44c4 <_usart_interrupt_handler+0xcc>
    44ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44bc:	7523      	strb	r3, [r4, #20]
    44be:	e7e7      	b.n	4490 <_usart_interrupt_handler+0x98>
    44c0:	7523      	strb	r3, [r4, #20]
    44c2:	e7c6      	b.n	4452 <_usart_interrupt_handler+0x5a>
    44c4:	6a2b      	ldr	r3, [r5, #32]
    44c6:	0028      	movs	r0, r5
    44c8:	4798      	blx	r3
    44ca:	e7f6      	b.n	44ba <_usart_interrupt_handler+0xc2>
    44cc:	0028      	movs	r0, r5
    44ce:	69eb      	ldr	r3, [r5, #28]
    44d0:	4798      	blx	r3
    44d2:	e7e4      	b.n	449e <_usart_interrupt_handler+0xa6>
    44d4:	0028      	movs	r0, r5
    44d6:	69ab      	ldr	r3, [r5, #24]
    44d8:	4798      	blx	r3
    44da:	e7e7      	b.n	44ac <_usart_interrupt_handler+0xb4>
    44dc:	0028      	movs	r0, r5
    44de:	68eb      	ldr	r3, [r5, #12]
    44e0:	4798      	blx	r3
    44e2:	e7bf      	b.n	4464 <_usart_interrupt_handler+0x6c>
    44e4:	223f      	movs	r2, #63	; 0x3f
    44e6:	4013      	ands	r3, r2
    44e8:	d1c9      	bne.n	447e <_usart_interrupt_handler+0x86>
    44ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    44ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
    44ee:	05db      	lsls	r3, r3, #23
    44f0:	0ddb      	lsrs	r3, r3, #23
    44f2:	b2da      	uxtb	r2, r3
    44f4:	700a      	strb	r2, [r1, #0]
    44f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    44f8:	1c51      	adds	r1, r2, #1
    44fa:	6269      	str	r1, [r5, #36]	; 0x24
    44fc:	7969      	ldrb	r1, [r5, #5]
    44fe:	2901      	cmp	r1, #1
    4500:	d029      	beq.n	4556 <_usart_interrupt_handler+0x15e>
    4502:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4504:	3b01      	subs	r3, #1
    4506:	b29b      	uxth	r3, r3
    4508:	85ab      	strh	r3, [r5, #44]	; 0x2c
    450a:	2b00      	cmp	r3, #0
    450c:	d1c0      	bne.n	4490 <_usart_interrupt_handler+0x98>
    450e:	2204      	movs	r2, #4
    4510:	7522      	strb	r2, [r4, #20]
    4512:	322e      	adds	r2, #46	; 0x2e
    4514:	54ab      	strb	r3, [r5, r2]
    4516:	07bb      	lsls	r3, r7, #30
    4518:	d5ba      	bpl.n	4490 <_usart_interrupt_handler+0x98>
    451a:	0028      	movs	r0, r5
    451c:	692b      	ldr	r3, [r5, #16]
    451e:	4798      	blx	r3
    4520:	e7b6      	b.n	4490 <_usart_interrupt_handler+0x98>
    4522:	7851      	ldrb	r1, [r2, #1]
    4524:	3202      	adds	r2, #2
    4526:	0209      	lsls	r1, r1, #8
    4528:	430b      	orrs	r3, r1
    452a:	62aa      	str	r2, [r5, #40]	; 0x28
    452c:	e784      	b.n	4438 <_usart_interrupt_handler+0x40>
    452e:	2204      	movs	r2, #4
    4530:	421a      	tst	r2, r3
    4532:	d10b      	bne.n	454c <_usart_interrupt_handler+0x154>
    4534:	2201      	movs	r2, #1
    4536:	421a      	tst	r2, r3
    4538:	d013      	beq.n	4562 <_usart_interrupt_handler+0x16a>
    453a:	2113      	movs	r1, #19
    453c:	2332      	movs	r3, #50	; 0x32
    453e:	54e9      	strb	r1, [r5, r3]
    4540:	8362      	strh	r2, [r4, #26]
    4542:	e7a3      	b.n	448c <_usart_interrupt_handler+0x94>
    4544:	0028      	movs	r0, r5
    4546:	696b      	ldr	r3, [r5, #20]
    4548:	4798      	blx	r3
    454a:	e7a1      	b.n	4490 <_usart_interrupt_handler+0x98>
    454c:	211e      	movs	r1, #30
    454e:	2332      	movs	r3, #50	; 0x32
    4550:	54e9      	strb	r1, [r5, r3]
    4552:	8362      	strh	r2, [r4, #26]
    4554:	e79a      	b.n	448c <_usart_interrupt_handler+0x94>
    4556:	0a1b      	lsrs	r3, r3, #8
    4558:	7053      	strb	r3, [r2, #1]
    455a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    455c:	3301      	adds	r3, #1
    455e:	626b      	str	r3, [r5, #36]	; 0x24
    4560:	e7cf      	b.n	4502 <_usart_interrupt_handler+0x10a>
    4562:	2210      	movs	r2, #16
    4564:	421a      	tst	r2, r3
    4566:	d004      	beq.n	4572 <_usart_interrupt_handler+0x17a>
    4568:	2142      	movs	r1, #66	; 0x42
    456a:	2332      	movs	r3, #50	; 0x32
    456c:	54e9      	strb	r1, [r5, r3]
    456e:	8362      	strh	r2, [r4, #26]
    4570:	e78c      	b.n	448c <_usart_interrupt_handler+0x94>
    4572:	2220      	movs	r2, #32
    4574:	421a      	tst	r2, r3
    4576:	d100      	bne.n	457a <_usart_interrupt_handler+0x182>
    4578:	e788      	b.n	448c <_usart_interrupt_handler+0x94>
    457a:	2141      	movs	r1, #65	; 0x41
    457c:	2332      	movs	r3, #50	; 0x32
    457e:	54e9      	strb	r1, [r5, r3]
    4580:	8362      	strh	r2, [r4, #26]
    4582:	e783      	b.n	448c <_usart_interrupt_handler+0x94>
    4584:	20000abc 	.word	0x20000abc

00004588 <system_clock_source_get_hz>:
    4588:	b510      	push	{r4, lr}
    458a:	2808      	cmp	r0, #8
    458c:	d82d      	bhi.n	45ea <system_clock_source_get_hz+0x62>
    458e:	4b1c      	ldr	r3, [pc, #112]	; (4600 <system_clock_source_get_hz+0x78>)
    4590:	0080      	lsls	r0, r0, #2
    4592:	581b      	ldr	r3, [r3, r0]
    4594:	469f      	mov	pc, r3
    4596:	2080      	movs	r0, #128	; 0x80
    4598:	0200      	lsls	r0, r0, #8
    459a:	bd10      	pop	{r4, pc}
    459c:	4b19      	ldr	r3, [pc, #100]	; (4604 <system_clock_source_get_hz+0x7c>)
    459e:	6958      	ldr	r0, [r3, #20]
    45a0:	e7fb      	b.n	459a <system_clock_source_get_hz+0x12>
    45a2:	4b19      	ldr	r3, [pc, #100]	; (4608 <system_clock_source_get_hz+0x80>)
    45a4:	7d18      	ldrb	r0, [r3, #20]
    45a6:	0700      	lsls	r0, r0, #28
    45a8:	0f80      	lsrs	r0, r0, #30
    45aa:	1c43      	adds	r3, r0, #1
    45ac:	4817      	ldr	r0, [pc, #92]	; (460c <system_clock_source_get_hz+0x84>)
    45ae:	4358      	muls	r0, r3
    45b0:	e7f3      	b.n	459a <system_clock_source_get_hz+0x12>
    45b2:	4c14      	ldr	r4, [pc, #80]	; (4604 <system_clock_source_get_hz+0x7c>)
    45b4:	2000      	movs	r0, #0
    45b6:	6823      	ldr	r3, [r4, #0]
    45b8:	079b      	lsls	r3, r3, #30
    45ba:	d5ee      	bpl.n	459a <system_clock_source_get_hz+0x12>
    45bc:	2280      	movs	r2, #128	; 0x80
    45be:	4912      	ldr	r1, [pc, #72]	; (4608 <system_clock_source_get_hz+0x80>)
    45c0:	0052      	lsls	r2, r2, #1
    45c2:	68cb      	ldr	r3, [r1, #12]
    45c4:	4213      	tst	r3, r2
    45c6:	d0fc      	beq.n	45c2 <system_clock_source_get_hz+0x3a>
    45c8:	6823      	ldr	r3, [r4, #0]
    45ca:	075b      	lsls	r3, r3, #29
    45cc:	d40f      	bmi.n	45ee <system_clock_source_get_hz+0x66>
    45ce:	4810      	ldr	r0, [pc, #64]	; (4610 <system_clock_source_get_hz+0x88>)
    45d0:	e7e3      	b.n	459a <system_clock_source_get_hz+0x12>
    45d2:	4b0c      	ldr	r3, [pc, #48]	; (4604 <system_clock_source_get_hz+0x7c>)
    45d4:	6918      	ldr	r0, [r3, #16]
    45d6:	e7e0      	b.n	459a <system_clock_source_get_hz+0x12>
    45d8:	2328      	movs	r3, #40	; 0x28
    45da:	4a0b      	ldr	r2, [pc, #44]	; (4608 <system_clock_source_get_hz+0x80>)
    45dc:	2000      	movs	r0, #0
    45de:	5cd3      	ldrb	r3, [r2, r3]
    45e0:	079b      	lsls	r3, r3, #30
    45e2:	d5da      	bpl.n	459a <system_clock_source_get_hz+0x12>
    45e4:	4b07      	ldr	r3, [pc, #28]	; (4604 <system_clock_source_get_hz+0x7c>)
    45e6:	68d8      	ldr	r0, [r3, #12]
    45e8:	e7d7      	b.n	459a <system_clock_source_get_hz+0x12>
    45ea:	2000      	movs	r0, #0
    45ec:	e7d5      	b.n	459a <system_clock_source_get_hz+0x12>
    45ee:	4b09      	ldr	r3, [pc, #36]	; (4614 <system_clock_source_get_hz+0x8c>)
    45f0:	2000      	movs	r0, #0
    45f2:	4798      	blx	r3
    45f4:	68a3      	ldr	r3, [r4, #8]
    45f6:	041b      	lsls	r3, r3, #16
    45f8:	0c1b      	lsrs	r3, r3, #16
    45fa:	4358      	muls	r0, r3
    45fc:	e7cd      	b.n	459a <system_clock_source_get_hz+0x12>
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	00008ff8 	.word	0x00008ff8
    4604:	20000188 	.word	0x20000188
    4608:	40000c00 	.word	0x40000c00
    460c:	003d0900 	.word	0x003d0900
    4610:	02dc6c00 	.word	0x02dc6c00
    4614:	0000497d 	.word	0x0000497d

00004618 <system_clock_init>:
    4618:	b5f0      	push	{r4, r5, r6, r7, lr}
    461a:	2280      	movs	r2, #128	; 0x80
    461c:	46d6      	mov	lr, sl
    461e:	464f      	mov	r7, r9
    4620:	4646      	mov	r6, r8
    4622:	211e      	movs	r1, #30
    4624:	4b4c      	ldr	r3, [pc, #304]	; (4758 <system_clock_init+0x140>)
    4626:	b5c0      	push	{r6, r7, lr}
    4628:	0052      	lsls	r2, r2, #1
    462a:	609a      	str	r2, [r3, #8]
    462c:	4b4b      	ldr	r3, [pc, #300]	; (475c <system_clock_init+0x144>)
    462e:	3afd      	subs	r2, #253	; 0xfd
    4630:	609a      	str	r2, [r3, #8]
    4632:	4a4b      	ldr	r2, [pc, #300]	; (4760 <system_clock_init+0x148>)
    4634:	b084      	sub	sp, #16
    4636:	6853      	ldr	r3, [r2, #4]
    4638:	438b      	bics	r3, r1
    463a:	6053      	str	r3, [r2, #4]
    463c:	2280      	movs	r2, #128	; 0x80
    463e:	05d2      	lsls	r2, r2, #23
    4640:	7893      	ldrb	r3, [r2, #2]
    4642:	2b02      	cmp	r3, #2
    4644:	d006      	beq.n	4654 <system_clock_init+0x3c>
    4646:	2301      	movs	r3, #1
    4648:	7193      	strb	r3, [r2, #6]
    464a:	3301      	adds	r3, #1
    464c:	7093      	strb	r3, [r2, #2]
    464e:	7993      	ldrb	r3, [r2, #6]
    4650:	2b00      	cmp	r3, #0
    4652:	d0fc      	beq.n	464e <system_clock_init+0x36>
    4654:	210c      	movs	r1, #12
    4656:	4a43      	ldr	r2, [pc, #268]	; (4764 <system_clock_init+0x14c>)
    4658:	2640      	movs	r6, #64	; 0x40
    465a:	6993      	ldr	r3, [r2, #24]
    465c:	ac01      	add	r4, sp, #4
    465e:	430b      	orrs	r3, r1
    4660:	21f0      	movs	r1, #240	; 0xf0
    4662:	43b3      	bics	r3, r6
    4664:	00c9      	lsls	r1, r1, #3
    4666:	430b      	orrs	r3, r1
    4668:	493f      	ldr	r1, [pc, #252]	; (4768 <system_clock_init+0x150>)
    466a:	2000      	movs	r0, #0
    466c:	400b      	ands	r3, r1
    466e:	2102      	movs	r1, #2
    4670:	6193      	str	r3, [r2, #24]
    4672:	6993      	ldr	r3, [r2, #24]
    4674:	4688      	mov	r8, r1
    4676:	430b      	orrs	r3, r1
    4678:	6193      	str	r3, [r2, #24]
    467a:	2301      	movs	r3, #1
    467c:	6063      	str	r3, [r4, #4]
    467e:	2300      	movs	r3, #0
    4680:	0021      	movs	r1, r4
    4682:	7063      	strb	r3, [r4, #1]
    4684:	7223      	strb	r3, [r4, #8]
    4686:	7263      	strb	r3, [r4, #9]
    4688:	4f38      	ldr	r7, [pc, #224]	; (476c <system_clock_init+0x154>)
    468a:	3303      	adds	r3, #3
    468c:	7023      	strb	r3, [r4, #0]
    468e:	47b8      	blx	r7
    4690:	4642      	mov	r2, r8
    4692:	4d31      	ldr	r5, [pc, #196]	; (4758 <system_clock_init+0x140>)
    4694:	7d2b      	ldrb	r3, [r5, #20]
    4696:	4393      	bics	r3, r2
    4698:	752b      	strb	r3, [r5, #20]
    469a:	7d2b      	ldrb	r3, [r5, #20]
    469c:	320a      	adds	r2, #10
    469e:	4393      	bics	r3, r2
    46a0:	2204      	movs	r2, #4
    46a2:	4313      	orrs	r3, r2
    46a4:	227f      	movs	r2, #127	; 0x7f
    46a6:	43b3      	bics	r3, r6
    46a8:	4013      	ands	r3, r2
    46aa:	752b      	strb	r3, [r5, #20]
    46ac:	7d2b      	ldrb	r3, [r5, #20]
    46ae:	3a7d      	subs	r2, #125	; 0x7d
    46b0:	4313      	orrs	r3, r2
    46b2:	752b      	strb	r3, [r5, #20]
    46b4:	320e      	adds	r2, #14
    46b6:	68eb      	ldr	r3, [r5, #12]
    46b8:	421a      	tst	r2, r3
    46ba:	d0fc      	beq.n	46b6 <system_clock_init+0x9e>
    46bc:	2301      	movs	r3, #1
    46be:	2600      	movs	r6, #0
    46c0:	4698      	mov	r8, r3
    46c2:	0021      	movs	r1, r4
    46c4:	2000      	movs	r0, #0
    46c6:	6063      	str	r3, [r4, #4]
    46c8:	3305      	adds	r3, #5
    46ca:	4699      	mov	r9, r3
    46cc:	7023      	strb	r3, [r4, #0]
    46ce:	7066      	strb	r6, [r4, #1]
    46d0:	7226      	strb	r6, [r4, #8]
    46d2:	7266      	strb	r6, [r4, #9]
    46d4:	47b8      	blx	r7
    46d6:	2280      	movs	r2, #128	; 0x80
    46d8:	7d2b      	ldrb	r3, [r5, #20]
    46da:	4313      	orrs	r3, r2
    46dc:	752b      	strb	r3, [r5, #20]
    46de:	4b24      	ldr	r3, [pc, #144]	; (4770 <system_clock_init+0x158>)
    46e0:	4798      	blx	r3
    46e2:	4643      	mov	r3, r8
    46e4:	0021      	movs	r1, r4
    46e6:	6063      	str	r3, [r4, #4]
    46e8:	2001      	movs	r0, #1
    46ea:	3303      	adds	r3, #3
    46ec:	7023      	strb	r3, [r4, #0]
    46ee:	7066      	strb	r6, [r4, #1]
    46f0:	7226      	strb	r6, [r4, #8]
    46f2:	7266      	strb	r6, [r4, #9]
    46f4:	47b8      	blx	r7
    46f6:	4b1f      	ldr	r3, [pc, #124]	; (4774 <system_clock_init+0x15c>)
    46f8:	2001      	movs	r0, #1
    46fa:	469a      	mov	sl, r3
    46fc:	4798      	blx	r3
    46fe:	4643      	mov	r3, r8
    4700:	4d1d      	ldr	r5, [pc, #116]	; (4778 <system_clock_init+0x160>)
    4702:	0021      	movs	r1, r4
    4704:	71ab      	strb	r3, [r5, #6]
    4706:	716b      	strb	r3, [r5, #5]
    4708:	712b      	strb	r3, [r5, #4]
    470a:	4643      	mov	r3, r8
    470c:	6063      	str	r3, [r4, #4]
    470e:	464b      	mov	r3, r9
    4710:	2000      	movs	r0, #0
    4712:	7023      	strb	r3, [r4, #0]
    4714:	7066      	strb	r6, [r4, #1]
    4716:	7226      	strb	r6, [r4, #8]
    4718:	7266      	strb	r6, [r4, #9]
    471a:	47b8      	blx	r7
    471c:	2000      	movs	r0, #0
    471e:	47d0      	blx	sl
    4720:	4b16      	ldr	r3, [pc, #88]	; (477c <system_clock_init+0x164>)
    4722:	2000      	movs	r0, #0
    4724:	4798      	blx	r3
    4726:	7929      	ldrb	r1, [r5, #4]
    4728:	4b15      	ldr	r3, [pc, #84]	; (4780 <system_clock_init+0x168>)
    472a:	b2c9      	uxtb	r1, r1
    472c:	4798      	blx	r3
    472e:	4b15      	ldr	r3, [pc, #84]	; (4784 <system_clock_init+0x16c>)
    4730:	4298      	cmp	r0, r3
    4732:	d804      	bhi.n	473e <system_clock_init+0x126>
    4734:	2280      	movs	r2, #128	; 0x80
    4736:	05d2      	lsls	r2, r2, #23
    4738:	7893      	ldrb	r3, [r2, #2]
    473a:	2b00      	cmp	r3, #0
    473c:	d105      	bne.n	474a <system_clock_init+0x132>
    473e:	b004      	add	sp, #16
    4740:	bc1c      	pop	{r2, r3, r4}
    4742:	4690      	mov	r8, r2
    4744:	4699      	mov	r9, r3
    4746:	46a2      	mov	sl, r4
    4748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474a:	4643      	mov	r3, r8
    474c:	7193      	strb	r3, [r2, #6]
    474e:	7096      	strb	r6, [r2, #2]
    4750:	7993      	ldrb	r3, [r2, #6]
    4752:	2b00      	cmp	r3, #0
    4754:	d0fc      	beq.n	4750 <system_clock_init+0x138>
    4756:	e7f2      	b.n	473e <system_clock_init+0x126>
    4758:	40000c00 	.word	0x40000c00
    475c:	40001400 	.word	0x40001400
    4760:	41004000 	.word	0x41004000
    4764:	40001000 	.word	0x40001000
    4768:	ffffefff 	.word	0xffffefff
    476c:	000047ad 	.word	0x000047ad
    4770:	00004789 	.word	0x00004789
    4774:	00004859 	.word	0x00004859
    4778:	40000400 	.word	0x40000400
    477c:	00004899 	.word	0x00004899
    4780:	000060f5 	.word	0x000060f5
    4784:	00b71b00 	.word	0x00b71b00

00004788 <system_gclk_init>:
    4788:	2140      	movs	r1, #64	; 0x40
    478a:	4a06      	ldr	r2, [pc, #24]	; (47a4 <system_gclk_init+0x1c>)
    478c:	6953      	ldr	r3, [r2, #20]
    478e:	430b      	orrs	r3, r1
    4790:	6153      	str	r3, [r2, #20]
    4792:	2301      	movs	r3, #1
    4794:	4a04      	ldr	r2, [pc, #16]	; (47a8 <system_gclk_init+0x20>)
    4796:	393f      	subs	r1, #63	; 0x3f
    4798:	7013      	strb	r3, [r2, #0]
    479a:	7813      	ldrb	r3, [r2, #0]
    479c:	4219      	tst	r1, r3
    479e:	d1fc      	bne.n	479a <system_gclk_init+0x12>
    47a0:	4770      	bx	lr
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	40000400 	.word	0x40000400
    47a8:	40001800 	.word	0x40001800

000047ac <system_gclk_gen_set_config>:
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	784b      	ldrb	r3, [r1, #1]
    47b0:	0004      	movs	r4, r0
    47b2:	780d      	ldrb	r5, [r1, #0]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d002      	beq.n	47be <system_gclk_gen_set_config+0x12>
    47b8:	2380      	movs	r3, #128	; 0x80
    47ba:	00db      	lsls	r3, r3, #3
    47bc:	431d      	orrs	r5, r3
    47be:	7a4b      	ldrb	r3, [r1, #9]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d002      	beq.n	47ca <system_gclk_gen_set_config+0x1e>
    47c4:	2380      	movs	r3, #128	; 0x80
    47c6:	011b      	lsls	r3, r3, #4
    47c8:	431d      	orrs	r5, r3
    47ca:	6848      	ldr	r0, [r1, #4]
    47cc:	2801      	cmp	r0, #1
    47ce:	d90f      	bls.n	47f0 <system_gclk_gen_set_config+0x44>
    47d0:	1e43      	subs	r3, r0, #1
    47d2:	4218      	tst	r0, r3
    47d4:	d12f      	bne.n	4836 <system_gclk_gen_set_config+0x8a>
    47d6:	2802      	cmp	r0, #2
    47d8:	d033      	beq.n	4842 <system_gclk_gen_set_config+0x96>
    47da:	2302      	movs	r3, #2
    47dc:	2200      	movs	r2, #0
    47de:	3201      	adds	r2, #1
    47e0:	005b      	lsls	r3, r3, #1
    47e2:	4298      	cmp	r0, r3
    47e4:	d8fb      	bhi.n	47de <system_gclk_gen_set_config+0x32>
    47e6:	0412      	lsls	r2, r2, #16
    47e8:	2380      	movs	r3, #128	; 0x80
    47ea:	015b      	lsls	r3, r3, #5
    47ec:	431d      	orrs	r5, r3
    47ee:	4315      	orrs	r5, r2
    47f0:	7a0b      	ldrb	r3, [r1, #8]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d002      	beq.n	47fc <system_gclk_gen_set_config+0x50>
    47f6:	2380      	movs	r3, #128	; 0x80
    47f8:	019b      	lsls	r3, r3, #6
    47fa:	431d      	orrs	r5, r3
    47fc:	2604      	movs	r6, #4
    47fe:	40a6      	lsls	r6, r4
    4800:	4911      	ldr	r1, [pc, #68]	; (4848 <system_gclk_gen_set_config+0x9c>)
    4802:	4a12      	ldr	r2, [pc, #72]	; (484c <system_gclk_gen_set_config+0xa0>)
    4804:	684b      	ldr	r3, [r1, #4]
    4806:	4013      	ands	r3, r2
    4808:	421e      	tst	r6, r3
    480a:	d1fb      	bne.n	4804 <system_gclk_gen_set_config+0x58>
    480c:	4b10      	ldr	r3, [pc, #64]	; (4850 <system_gclk_gen_set_config+0xa4>)
    480e:	4798      	blx	r3
    4810:	4b0d      	ldr	r3, [pc, #52]	; (4848 <system_gclk_gen_set_config+0x9c>)
    4812:	2280      	movs	r2, #128	; 0x80
    4814:	469c      	mov	ip, r3
    4816:	4661      	mov	r1, ip
    4818:	00a4      	lsls	r4, r4, #2
    481a:	4464      	add	r4, ip
    481c:	6a23      	ldr	r3, [r4, #32]
    481e:	0052      	lsls	r2, r2, #1
    4820:	4013      	ands	r3, r2
    4822:	431d      	orrs	r5, r3
    4824:	4a09      	ldr	r2, [pc, #36]	; (484c <system_gclk_gen_set_config+0xa0>)
    4826:	6225      	str	r5, [r4, #32]
    4828:	684b      	ldr	r3, [r1, #4]
    482a:	4013      	ands	r3, r2
    482c:	421e      	tst	r6, r3
    482e:	d1fb      	bne.n	4828 <system_gclk_gen_set_config+0x7c>
    4830:	4b08      	ldr	r3, [pc, #32]	; (4854 <system_gclk_gen_set_config+0xa8>)
    4832:	4798      	blx	r3
    4834:	bd70      	pop	{r4, r5, r6, pc}
    4836:	2380      	movs	r3, #128	; 0x80
    4838:	0400      	lsls	r0, r0, #16
    483a:	009b      	lsls	r3, r3, #2
    483c:	4318      	orrs	r0, r3
    483e:	4305      	orrs	r5, r0
    4840:	e7d6      	b.n	47f0 <system_gclk_gen_set_config+0x44>
    4842:	2200      	movs	r2, #0
    4844:	e7d0      	b.n	47e8 <system_gclk_gen_set_config+0x3c>
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	40001800 	.word	0x40001800
    484c:	000007fc 	.word	0x000007fc
    4850:	000031e5 	.word	0x000031e5
    4854:	00003221 	.word	0x00003221

00004858 <system_gclk_gen_enable>:
    4858:	2204      	movs	r2, #4
    485a:	b510      	push	{r4, lr}
    485c:	4082      	lsls	r2, r0
    485e:	0004      	movs	r4, r0
    4860:	4909      	ldr	r1, [pc, #36]	; (4888 <system_gclk_gen_enable+0x30>)
    4862:	480a      	ldr	r0, [pc, #40]	; (488c <system_gclk_gen_enable+0x34>)
    4864:	6843      	ldr	r3, [r0, #4]
    4866:	400b      	ands	r3, r1
    4868:	421a      	tst	r2, r3
    486a:	d1fb      	bne.n	4864 <system_gclk_gen_enable+0xc>
    486c:	4b08      	ldr	r3, [pc, #32]	; (4890 <system_gclk_gen_enable+0x38>)
    486e:	4798      	blx	r3
    4870:	4b06      	ldr	r3, [pc, #24]	; (488c <system_gclk_gen_enable+0x34>)
    4872:	00a0      	lsls	r0, r4, #2
    4874:	469c      	mov	ip, r3
    4876:	2380      	movs	r3, #128	; 0x80
    4878:	4460      	add	r0, ip
    487a:	6a02      	ldr	r2, [r0, #32]
    487c:	005b      	lsls	r3, r3, #1
    487e:	4313      	orrs	r3, r2
    4880:	6203      	str	r3, [r0, #32]
    4882:	4b04      	ldr	r3, [pc, #16]	; (4894 <system_gclk_gen_enable+0x3c>)
    4884:	4798      	blx	r3
    4886:	bd10      	pop	{r4, pc}
    4888:	000007fc 	.word	0x000007fc
    488c:	40001800 	.word	0x40001800
    4890:	000031e5 	.word	0x000031e5
    4894:	00003221 	.word	0x00003221

00004898 <system_gclk_gen_get_hz>:
    4898:	2204      	movs	r2, #4
    489a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    489c:	4082      	lsls	r2, r0
    489e:	0004      	movs	r4, r0
    48a0:	4e12      	ldr	r6, [pc, #72]	; (48ec <system_gclk_gen_get_hz+0x54>)
    48a2:	4913      	ldr	r1, [pc, #76]	; (48f0 <system_gclk_gen_get_hz+0x58>)
    48a4:	6873      	ldr	r3, [r6, #4]
    48a6:	400b      	ands	r3, r1
    48a8:	421a      	tst	r2, r3
    48aa:	d1fb      	bne.n	48a4 <system_gclk_gen_get_hz+0xc>
    48ac:	3408      	adds	r4, #8
    48ae:	00a4      	lsls	r4, r4, #2
    48b0:	4b10      	ldr	r3, [pc, #64]	; (48f4 <system_gclk_gen_get_hz+0x5c>)
    48b2:	4798      	blx	r3
    48b4:	59a0      	ldr	r0, [r4, r6]
    48b6:	4b10      	ldr	r3, [pc, #64]	; (48f8 <system_gclk_gen_get_hz+0x60>)
    48b8:	0700      	lsls	r0, r0, #28
    48ba:	0f00      	lsrs	r0, r0, #28
    48bc:	4798      	blx	r3
    48be:	59a5      	ldr	r5, [r4, r6]
    48c0:	59a4      	ldr	r4, [r4, r6]
    48c2:	04ed      	lsls	r5, r5, #19
    48c4:	4b0d      	ldr	r3, [pc, #52]	; (48fc <system_gclk_gen_get_hz+0x64>)
    48c6:	0fed      	lsrs	r5, r5, #31
    48c8:	0007      	movs	r7, r0
    48ca:	0c24      	lsrs	r4, r4, #16
    48cc:	4798      	blx	r3
    48ce:	2d00      	cmp	r5, #0
    48d0:	d003      	beq.n	48da <system_gclk_gen_get_hz+0x42>
    48d2:	3401      	adds	r4, #1
    48d4:	40e7      	lsrs	r7, r4
    48d6:	0038      	movs	r0, r7
    48d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48da:	2c01      	cmp	r4, #1
    48dc:	d9fb      	bls.n	48d6 <system_gclk_gen_get_hz+0x3e>
    48de:	0038      	movs	r0, r7
    48e0:	0021      	movs	r1, r4
    48e2:	4b07      	ldr	r3, [pc, #28]	; (4900 <system_gclk_gen_get_hz+0x68>)
    48e4:	4798      	blx	r3
    48e6:	0007      	movs	r7, r0
    48e8:	e7f5      	b.n	48d6 <system_gclk_gen_get_hz+0x3e>
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	40001800 	.word	0x40001800
    48f0:	000007fc 	.word	0x000007fc
    48f4:	000031e5 	.word	0x000031e5
    48f8:	00004589 	.word	0x00004589
    48fc:	00003221 	.word	0x00003221
    4900:	000060f5 	.word	0x000060f5

00004904 <system_gclk_chan_set_config>:
    4904:	b570      	push	{r4, r5, r6, lr}
    4906:	4b0c      	ldr	r3, [pc, #48]	; (4938 <system_gclk_chan_set_config+0x34>)
    4908:	0004      	movs	r4, r0
    490a:	000e      	movs	r6, r1
    490c:	4798      	blx	r3
    490e:	4b0b      	ldr	r3, [pc, #44]	; (493c <system_gclk_chan_set_config+0x38>)
    4910:	2280      	movs	r2, #128	; 0x80
    4912:	469c      	mov	ip, r3
    4914:	2140      	movs	r1, #64	; 0x40
    4916:	2580      	movs	r5, #128	; 0x80
    4918:	00a4      	lsls	r4, r4, #2
    491a:	4464      	add	r4, ip
    491c:	58a3      	ldr	r3, [r4, r2]
    491e:	438b      	bics	r3, r1
    4920:	50a3      	str	r3, [r4, r2]
    4922:	3a40      	subs	r2, #64	; 0x40
    4924:	5963      	ldr	r3, [r4, r5]
    4926:	421a      	tst	r2, r3
    4928:	d1fc      	bne.n	4924 <system_gclk_chan_set_config+0x20>
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <system_gclk_chan_set_config+0x3c>)
    492c:	4798      	blx	r3
    492e:	230f      	movs	r3, #15
    4930:	7832      	ldrb	r2, [r6, #0]
    4932:	4013      	ands	r3, r2
    4934:	5163      	str	r3, [r4, r5]
    4936:	bd70      	pop	{r4, r5, r6, pc}
    4938:	000031e5 	.word	0x000031e5
    493c:	40001800 	.word	0x40001800
    4940:	00003221 	.word	0x00003221

00004944 <system_gclk_chan_enable>:
    4944:	b510      	push	{r4, lr}
    4946:	4b0a      	ldr	r3, [pc, #40]	; (4970 <system_gclk_chan_enable+0x2c>)
    4948:	0004      	movs	r4, r0
    494a:	4798      	blx	r3
    494c:	4b09      	ldr	r3, [pc, #36]	; (4974 <system_gclk_chan_enable+0x30>)
    494e:	2280      	movs	r2, #128	; 0x80
    4950:	469c      	mov	ip, r3
    4952:	2140      	movs	r1, #64	; 0x40
    4954:	00a0      	lsls	r0, r4, #2
    4956:	4460      	add	r0, ip
    4958:	5883      	ldr	r3, [r0, r2]
    495a:	430b      	orrs	r3, r1
    495c:	5083      	str	r3, [r0, r2]
    495e:	3140      	adds	r1, #64	; 0x40
    4960:	3a40      	subs	r2, #64	; 0x40
    4962:	5843      	ldr	r3, [r0, r1]
    4964:	421a      	tst	r2, r3
    4966:	d0fc      	beq.n	4962 <system_gclk_chan_enable+0x1e>
    4968:	4b03      	ldr	r3, [pc, #12]	; (4978 <system_gclk_chan_enable+0x34>)
    496a:	4798      	blx	r3
    496c:	bd10      	pop	{r4, pc}
    496e:	46c0      	nop			; (mov r8, r8)
    4970:	000031e5 	.word	0x000031e5
    4974:	40001800 	.word	0x40001800
    4978:	00003221 	.word	0x00003221

0000497c <system_gclk_chan_get_hz>:
    497c:	b5f0      	push	{r4, r5, r6, r7, lr}
    497e:	46c6      	mov	lr, r8
    4980:	0004      	movs	r4, r0
    4982:	b500      	push	{lr}
    4984:	4e18      	ldr	r6, [pc, #96]	; (49e8 <system_gclk_chan_get_hz+0x6c>)
    4986:	4d19      	ldr	r5, [pc, #100]	; (49ec <system_gclk_chan_get_hz+0x70>)
    4988:	3420      	adds	r4, #32
    498a:	47b0      	blx	r6
    498c:	00a4      	lsls	r4, r4, #2
    498e:	4f18      	ldr	r7, [pc, #96]	; (49f0 <system_gclk_chan_get_hz+0x74>)
    4990:	5964      	ldr	r4, [r4, r5]
    4992:	47b8      	blx	r7
    4994:	2204      	movs	r2, #4
    4996:	0724      	lsls	r4, r4, #28
    4998:	0f24      	lsrs	r4, r4, #28
    499a:	40a2      	lsls	r2, r4
    499c:	4915      	ldr	r1, [pc, #84]	; (49f4 <system_gclk_chan_get_hz+0x78>)
    499e:	686b      	ldr	r3, [r5, #4]
    49a0:	400b      	ands	r3, r1
    49a2:	421a      	tst	r2, r3
    49a4:	d1fb      	bne.n	499e <system_gclk_chan_get_hz+0x22>
    49a6:	3408      	adds	r4, #8
    49a8:	00a4      	lsls	r4, r4, #2
    49aa:	47b0      	blx	r6
    49ac:	5960      	ldr	r0, [r4, r5]
    49ae:	4b12      	ldr	r3, [pc, #72]	; (49f8 <system_gclk_chan_get_hz+0x7c>)
    49b0:	0700      	lsls	r0, r0, #28
    49b2:	0f00      	lsrs	r0, r0, #28
    49b4:	4798      	blx	r3
    49b6:	5966      	ldr	r6, [r4, r5]
    49b8:	5964      	ldr	r4, [r4, r5]
    49ba:	04f6      	lsls	r6, r6, #19
    49bc:	0ff6      	lsrs	r6, r6, #31
    49be:	4680      	mov	r8, r0
    49c0:	0c24      	lsrs	r4, r4, #16
    49c2:	47b8      	blx	r7
    49c4:	2e00      	cmp	r6, #0
    49c6:	d007      	beq.n	49d8 <system_gclk_chan_get_hz+0x5c>
    49c8:	4643      	mov	r3, r8
    49ca:	3401      	adds	r4, #1
    49cc:	40e3      	lsrs	r3, r4
    49ce:	4698      	mov	r8, r3
    49d0:	4640      	mov	r0, r8
    49d2:	bc04      	pop	{r2}
    49d4:	4690      	mov	r8, r2
    49d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d8:	2c01      	cmp	r4, #1
    49da:	d9f9      	bls.n	49d0 <system_gclk_chan_get_hz+0x54>
    49dc:	4640      	mov	r0, r8
    49de:	0021      	movs	r1, r4
    49e0:	4b06      	ldr	r3, [pc, #24]	; (49fc <system_gclk_chan_get_hz+0x80>)
    49e2:	4798      	blx	r3
    49e4:	4680      	mov	r8, r0
    49e6:	e7f3      	b.n	49d0 <system_gclk_chan_get_hz+0x54>
    49e8:	000031e5 	.word	0x000031e5
    49ec:	40001800 	.word	0x40001800
    49f0:	00003221 	.word	0x00003221
    49f4:	000007fc 	.word	0x000007fc
    49f8:	00004589 	.word	0x00004589
    49fc:	000060f5 	.word	0x000060f5

00004a00 <system_pinmux_pin_set_config>:
    4a00:	b570      	push	{r4, r5, r6, lr}
    4a02:	09c2      	lsrs	r2, r0, #7
    4a04:	2300      	movs	r3, #0
    4a06:	2a00      	cmp	r2, #0
    4a08:	d104      	bne.n	4a14 <system_pinmux_pin_set_config+0x14>
    4a0a:	4a2f      	ldr	r2, [pc, #188]	; (4ac8 <system_pinmux_pin_set_config+0xc8>)
    4a0c:	0943      	lsrs	r3, r0, #5
    4a0e:	4694      	mov	ip, r2
    4a10:	01db      	lsls	r3, r3, #7
    4a12:	4463      	add	r3, ip
    4a14:	221f      	movs	r2, #31
    4a16:	4010      	ands	r0, r2
    4a18:	3a1e      	subs	r2, #30
    4a1a:	4082      	lsls	r2, r0
    4a1c:	78c8      	ldrb	r0, [r1, #3]
    4a1e:	2800      	cmp	r0, #0
    4a20:	d131      	bne.n	4a86 <system_pinmux_pin_set_config+0x86>
    4a22:	7808      	ldrb	r0, [r1, #0]
    4a24:	2880      	cmp	r0, #128	; 0x80
    4a26:	d047      	beq.n	4ab8 <system_pinmux_pin_set_config+0xb8>
    4a28:	2480      	movs	r4, #128	; 0x80
    4a2a:	0600      	lsls	r0, r0, #24
    4a2c:	0264      	lsls	r4, r4, #9
    4a2e:	4320      	orrs	r0, r4
    4a30:	784c      	ldrb	r4, [r1, #1]
    4a32:	2502      	movs	r5, #2
    4a34:	0026      	movs	r6, r4
    4a36:	43ae      	bics	r6, r5
    4a38:	d107      	bne.n	4a4a <system_pinmux_pin_set_config+0x4a>
    4a3a:	788c      	ldrb	r4, [r1, #2]
    4a3c:	2c00      	cmp	r4, #0
    4a3e:	d137      	bne.n	4ab0 <system_pinmux_pin_set_config+0xb0>
    4a40:	2480      	movs	r4, #128	; 0x80
    4a42:	02a4      	lsls	r4, r4, #10
    4a44:	4320      	orrs	r0, r4
    4a46:	605a      	str	r2, [r3, #4]
    4a48:	784c      	ldrb	r4, [r1, #1]
    4a4a:	3c01      	subs	r4, #1
    4a4c:	2c01      	cmp	r4, #1
    4a4e:	d935      	bls.n	4abc <system_pinmux_pin_set_config+0xbc>
    4a50:	24a0      	movs	r4, #160	; 0xa0
    4a52:	0415      	lsls	r5, r2, #16
    4a54:	0c2d      	lsrs	r5, r5, #16
    4a56:	05e4      	lsls	r4, r4, #23
    4a58:	432c      	orrs	r4, r5
    4a5a:	4304      	orrs	r4, r0
    4a5c:	629c      	str	r4, [r3, #40]	; 0x28
    4a5e:	24d0      	movs	r4, #208	; 0xd0
    4a60:	0c15      	lsrs	r5, r2, #16
    4a62:	0624      	lsls	r4, r4, #24
    4a64:	432c      	orrs	r4, r5
    4a66:	4304      	orrs	r4, r0
    4a68:	629c      	str	r4, [r3, #40]	; 0x28
    4a6a:	78cc      	ldrb	r4, [r1, #3]
    4a6c:	2c00      	cmp	r4, #0
    4a6e:	d109      	bne.n	4a84 <system_pinmux_pin_set_config+0x84>
    4a70:	0340      	lsls	r0, r0, #13
    4a72:	d503      	bpl.n	4a7c <system_pinmux_pin_set_config+0x7c>
    4a74:	7888      	ldrb	r0, [r1, #2]
    4a76:	2801      	cmp	r0, #1
    4a78:	d023      	beq.n	4ac2 <system_pinmux_pin_set_config+0xc2>
    4a7a:	615a      	str	r2, [r3, #20]
    4a7c:	7849      	ldrb	r1, [r1, #1]
    4a7e:	3901      	subs	r1, #1
    4a80:	2901      	cmp	r1, #1
    4a82:	d913      	bls.n	4aac <system_pinmux_pin_set_config+0xac>
    4a84:	bd70      	pop	{r4, r5, r6, pc}
    4a86:	20a0      	movs	r0, #160	; 0xa0
    4a88:	0414      	lsls	r4, r2, #16
    4a8a:	0c24      	lsrs	r4, r4, #16
    4a8c:	05c0      	lsls	r0, r0, #23
    4a8e:	4320      	orrs	r0, r4
    4a90:	605a      	str	r2, [r3, #4]
    4a92:	6298      	str	r0, [r3, #40]	; 0x28
    4a94:	20d0      	movs	r0, #208	; 0xd0
    4a96:	0c14      	lsrs	r4, r2, #16
    4a98:	0600      	lsls	r0, r0, #24
    4a9a:	4320      	orrs	r0, r4
    4a9c:	6298      	str	r0, [r3, #40]	; 0x28
    4a9e:	78c8      	ldrb	r0, [r1, #3]
    4aa0:	2800      	cmp	r0, #0
    4aa2:	d1ef      	bne.n	4a84 <system_pinmux_pin_set_config+0x84>
    4aa4:	7849      	ldrb	r1, [r1, #1]
    4aa6:	3901      	subs	r1, #1
    4aa8:	2901      	cmp	r1, #1
    4aaa:	d8eb      	bhi.n	4a84 <system_pinmux_pin_set_config+0x84>
    4aac:	609a      	str	r2, [r3, #8]
    4aae:	e7e9      	b.n	4a84 <system_pinmux_pin_set_config+0x84>
    4ab0:	24c0      	movs	r4, #192	; 0xc0
    4ab2:	02e4      	lsls	r4, r4, #11
    4ab4:	4320      	orrs	r0, r4
    4ab6:	e7c6      	b.n	4a46 <system_pinmux_pin_set_config+0x46>
    4ab8:	2000      	movs	r0, #0
    4aba:	e7b9      	b.n	4a30 <system_pinmux_pin_set_config+0x30>
    4abc:	4c03      	ldr	r4, [pc, #12]	; (4acc <system_pinmux_pin_set_config+0xcc>)
    4abe:	4020      	ands	r0, r4
    4ac0:	e7c6      	b.n	4a50 <system_pinmux_pin_set_config+0x50>
    4ac2:	619a      	str	r2, [r3, #24]
    4ac4:	e7da      	b.n	4a7c <system_pinmux_pin_set_config+0x7c>
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	40002800 	.word	0x40002800
    4acc:	fffbffff 	.word	0xfffbffff

00004ad0 <_system_dummy_init>:
    4ad0:	4770      	bx	lr
    4ad2:	46c0      	nop			; (mov r8, r8)

00004ad4 <system_init>:
    4ad4:	b510      	push	{r4, lr}
    4ad6:	4b05      	ldr	r3, [pc, #20]	; (4aec <system_init+0x18>)
    4ad8:	4798      	blx	r3
    4ada:	4b05      	ldr	r3, [pc, #20]	; (4af0 <system_init+0x1c>)
    4adc:	4798      	blx	r3
    4ade:	4b05      	ldr	r3, [pc, #20]	; (4af4 <system_init+0x20>)
    4ae0:	4798      	blx	r3
    4ae2:	4b05      	ldr	r3, [pc, #20]	; (4af8 <system_init+0x24>)
    4ae4:	4798      	blx	r3
    4ae6:	4b05      	ldr	r3, [pc, #20]	; (4afc <system_init+0x28>)
    4ae8:	4798      	blx	r3
    4aea:	bd10      	pop	{r4, pc}
    4aec:	00004619 	.word	0x00004619
    4af0:	00003251 	.word	0x00003251
    4af4:	00004ad1 	.word	0x00004ad1
    4af8:	000033e5 	.word	0x000033e5
    4afc:	00004ad1 	.word	0x00004ad1

00004b00 <TC0_Handler>:
    4b00:	b570      	push	{r4, r5, r6, lr}
    4b02:	2601      	movs	r6, #1
    4b04:	4b15      	ldr	r3, [pc, #84]	; (4b5c <TC0_Handler+0x5c>)
    4b06:	681d      	ldr	r5, [r3, #0]
    4b08:	682b      	ldr	r3, [r5, #0]
    4b0a:	7e2a      	ldrb	r2, [r5, #24]
    4b0c:	7e6c      	ldrb	r4, [r5, #25]
    4b0e:	7a9b      	ldrb	r3, [r3, #10]
    4b10:	4014      	ands	r4, r2
    4b12:	401c      	ands	r4, r3
    4b14:	4226      	tst	r6, r4
    4b16:	d11a      	bne.n	4b4e <TC0_Handler+0x4e>
    4b18:	2602      	movs	r6, #2
    4b1a:	4226      	tst	r6, r4
    4b1c:	d111      	bne.n	4b42 <TC0_Handler+0x42>
    4b1e:	2610      	movs	r6, #16
    4b20:	4226      	tst	r6, r4
    4b22:	d108      	bne.n	4b36 <TC0_Handler+0x36>
    4b24:	2620      	movs	r6, #32
    4b26:	4226      	tst	r6, r4
    4b28:	d004      	beq.n	4b34 <TC0_Handler+0x34>
    4b2a:	696b      	ldr	r3, [r5, #20]
    4b2c:	0028      	movs	r0, r5
    4b2e:	4798      	blx	r3
    4b30:	682b      	ldr	r3, [r5, #0]
    4b32:	729e      	strb	r6, [r3, #10]
    4b34:	bd70      	pop	{r4, r5, r6, pc}
    4b36:	692b      	ldr	r3, [r5, #16]
    4b38:	0028      	movs	r0, r5
    4b3a:	4798      	blx	r3
    4b3c:	682b      	ldr	r3, [r5, #0]
    4b3e:	729e      	strb	r6, [r3, #10]
    4b40:	e7f0      	b.n	4b24 <TC0_Handler+0x24>
    4b42:	68eb      	ldr	r3, [r5, #12]
    4b44:	0028      	movs	r0, r5
    4b46:	4798      	blx	r3
    4b48:	682b      	ldr	r3, [r5, #0]
    4b4a:	729e      	strb	r6, [r3, #10]
    4b4c:	e7e7      	b.n	4b1e <TC0_Handler+0x1e>
    4b4e:	68ab      	ldr	r3, [r5, #8]
    4b50:	0028      	movs	r0, r5
    4b52:	4798      	blx	r3
    4b54:	682b      	ldr	r3, [r5, #0]
    4b56:	729e      	strb	r6, [r3, #10]
    4b58:	e7de      	b.n	4b18 <TC0_Handler+0x18>
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	20000ad4 	.word	0x20000ad4

00004b60 <TC1_Handler>:
    4b60:	b570      	push	{r4, r5, r6, lr}
    4b62:	2601      	movs	r6, #1
    4b64:	4b15      	ldr	r3, [pc, #84]	; (4bbc <TC1_Handler+0x5c>)
    4b66:	685d      	ldr	r5, [r3, #4]
    4b68:	682b      	ldr	r3, [r5, #0]
    4b6a:	7e2a      	ldrb	r2, [r5, #24]
    4b6c:	7e6c      	ldrb	r4, [r5, #25]
    4b6e:	7a9b      	ldrb	r3, [r3, #10]
    4b70:	4014      	ands	r4, r2
    4b72:	401c      	ands	r4, r3
    4b74:	4226      	tst	r6, r4
    4b76:	d11a      	bne.n	4bae <TC1_Handler+0x4e>
    4b78:	2602      	movs	r6, #2
    4b7a:	4226      	tst	r6, r4
    4b7c:	d111      	bne.n	4ba2 <TC1_Handler+0x42>
    4b7e:	2610      	movs	r6, #16
    4b80:	4226      	tst	r6, r4
    4b82:	d108      	bne.n	4b96 <TC1_Handler+0x36>
    4b84:	2620      	movs	r6, #32
    4b86:	4226      	tst	r6, r4
    4b88:	d004      	beq.n	4b94 <TC1_Handler+0x34>
    4b8a:	696b      	ldr	r3, [r5, #20]
    4b8c:	0028      	movs	r0, r5
    4b8e:	4798      	blx	r3
    4b90:	682b      	ldr	r3, [r5, #0]
    4b92:	729e      	strb	r6, [r3, #10]
    4b94:	bd70      	pop	{r4, r5, r6, pc}
    4b96:	692b      	ldr	r3, [r5, #16]
    4b98:	0028      	movs	r0, r5
    4b9a:	4798      	blx	r3
    4b9c:	682b      	ldr	r3, [r5, #0]
    4b9e:	729e      	strb	r6, [r3, #10]
    4ba0:	e7f0      	b.n	4b84 <TC1_Handler+0x24>
    4ba2:	68eb      	ldr	r3, [r5, #12]
    4ba4:	0028      	movs	r0, r5
    4ba6:	4798      	blx	r3
    4ba8:	682b      	ldr	r3, [r5, #0]
    4baa:	729e      	strb	r6, [r3, #10]
    4bac:	e7e7      	b.n	4b7e <TC1_Handler+0x1e>
    4bae:	68ab      	ldr	r3, [r5, #8]
    4bb0:	0028      	movs	r0, r5
    4bb2:	4798      	blx	r3
    4bb4:	682b      	ldr	r3, [r5, #0]
    4bb6:	729e      	strb	r6, [r3, #10]
    4bb8:	e7de      	b.n	4b78 <TC1_Handler+0x18>
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	20000ad4 	.word	0x20000ad4

00004bc0 <TC4_Handler>:
    4bc0:	b570      	push	{r4, r5, r6, lr}
    4bc2:	2601      	movs	r6, #1
    4bc4:	4b15      	ldr	r3, [pc, #84]	; (4c1c <TC4_Handler+0x5c>)
    4bc6:	689d      	ldr	r5, [r3, #8]
    4bc8:	682b      	ldr	r3, [r5, #0]
    4bca:	7e2a      	ldrb	r2, [r5, #24]
    4bcc:	7e6c      	ldrb	r4, [r5, #25]
    4bce:	7a9b      	ldrb	r3, [r3, #10]
    4bd0:	4014      	ands	r4, r2
    4bd2:	401c      	ands	r4, r3
    4bd4:	4226      	tst	r6, r4
    4bd6:	d11a      	bne.n	4c0e <TC4_Handler+0x4e>
    4bd8:	2602      	movs	r6, #2
    4bda:	4226      	tst	r6, r4
    4bdc:	d111      	bne.n	4c02 <TC4_Handler+0x42>
    4bde:	2610      	movs	r6, #16
    4be0:	4226      	tst	r6, r4
    4be2:	d108      	bne.n	4bf6 <TC4_Handler+0x36>
    4be4:	2620      	movs	r6, #32
    4be6:	4226      	tst	r6, r4
    4be8:	d004      	beq.n	4bf4 <TC4_Handler+0x34>
    4bea:	696b      	ldr	r3, [r5, #20]
    4bec:	0028      	movs	r0, r5
    4bee:	4798      	blx	r3
    4bf0:	682b      	ldr	r3, [r5, #0]
    4bf2:	729e      	strb	r6, [r3, #10]
    4bf4:	bd70      	pop	{r4, r5, r6, pc}
    4bf6:	692b      	ldr	r3, [r5, #16]
    4bf8:	0028      	movs	r0, r5
    4bfa:	4798      	blx	r3
    4bfc:	682b      	ldr	r3, [r5, #0]
    4bfe:	729e      	strb	r6, [r3, #10]
    4c00:	e7f0      	b.n	4be4 <TC4_Handler+0x24>
    4c02:	68eb      	ldr	r3, [r5, #12]
    4c04:	0028      	movs	r0, r5
    4c06:	4798      	blx	r3
    4c08:	682b      	ldr	r3, [r5, #0]
    4c0a:	729e      	strb	r6, [r3, #10]
    4c0c:	e7e7      	b.n	4bde <TC4_Handler+0x1e>
    4c0e:	68ab      	ldr	r3, [r5, #8]
    4c10:	0028      	movs	r0, r5
    4c12:	4798      	blx	r3
    4c14:	682b      	ldr	r3, [r5, #0]
    4c16:	729e      	strb	r6, [r3, #10]
    4c18:	e7de      	b.n	4bd8 <TC4_Handler+0x18>
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	20000ad4 	.word	0x20000ad4

00004c20 <tc_init>:
    4c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c22:	4645      	mov	r5, r8
    4c24:	46de      	mov	lr, fp
    4c26:	4657      	mov	r7, sl
    4c28:	464e      	mov	r6, r9
    4c2a:	b5e0      	push	{r5, r6, r7, lr}
    4c2c:	b08b      	sub	sp, #44	; 0x2c
    4c2e:	ab04      	add	r3, sp, #16
    4c30:	469b      	mov	fp, r3
    4c32:	4bc8      	ldr	r3, [pc, #800]	; (4f54 <tc_init+0x334>)
    4c34:	000f      	movs	r7, r1
    4c36:	4690      	mov	r8, r2
    4c38:	0019      	movs	r1, r3
    4c3a:	465a      	mov	r2, fp
    4c3c:	0004      	movs	r4, r0
    4c3e:	c961      	ldmia	r1!, {r0, r5, r6}
    4c40:	c261      	stmia	r2!, {r0, r5, r6}
    4c42:	9a04      	ldr	r2, [sp, #16]
    4c44:	42ba      	cmp	r2, r7
    4c46:	d100      	bne.n	4c4a <tc_init+0x2a>
    4c48:	e133      	b.n	4eb2 <tc_init+0x292>
    4c4a:	685a      	ldr	r2, [r3, #4]
    4c4c:	42ba      	cmp	r2, r7
    4c4e:	d100      	bne.n	4c52 <tc_init+0x32>
    4c50:	e134      	b.n	4ebc <tc_init+0x29c>
    4c52:	2200      	movs	r2, #0
    4c54:	4691      	mov	r9, r2
    4c56:	4692      	mov	sl, r2
    4c58:	689a      	ldr	r2, [r3, #8]
    4c5a:	4297      	cmp	r7, r2
    4c5c:	d100      	bne.n	4c60 <tc_init+0x40>
    4c5e:	e12f      	b.n	4ec0 <tc_init+0x2a0>
    4c60:	221b      	movs	r2, #27
    4c62:	ae02      	add	r6, sp, #8
    4c64:	7032      	strb	r2, [r6, #0]
    4c66:	7072      	strb	r2, [r6, #1]
    4c68:	3202      	adds	r2, #2
    4c6a:	70b2      	strb	r2, [r6, #2]
    4c6c:	465a      	mov	r2, fp
    4c6e:	330c      	adds	r3, #12
    4c70:	cb23      	ldmia	r3!, {r0, r1, r5}
    4c72:	c223      	stmia	r2!, {r0, r1, r5}
    4c74:	cb23      	ldmia	r3!, {r0, r1, r5}
    4c76:	c223      	stmia	r2!, {r0, r1, r5}
    4c78:	2300      	movs	r3, #0
    4c7a:	60a3      	str	r3, [r4, #8]
    4c7c:	60e3      	str	r3, [r4, #12]
    4c7e:	6123      	str	r3, [r4, #16]
    4c80:	6163      	str	r3, [r4, #20]
    4c82:	7623      	strb	r3, [r4, #24]
    4c84:	7663      	strb	r3, [r4, #25]
    4c86:	464b      	mov	r3, r9
    4c88:	4ab3      	ldr	r2, [pc, #716]	; (4f58 <tc_init+0x338>)
    4c8a:	009b      	lsls	r3, r3, #2
    4c8c:	509c      	str	r4, [r3, r2]
    4c8e:	4642      	mov	r2, r8
    4c90:	2334      	movs	r3, #52	; 0x34
    4c92:	6027      	str	r7, [r4, #0]
    4c94:	5cd3      	ldrb	r3, [r2, r3]
    4c96:	76a3      	strb	r3, [r4, #26]
    4c98:	78d3      	ldrb	r3, [r2, #3]
    4c9a:	2b08      	cmp	r3, #8
    4c9c:	d00c      	beq.n	4cb8 <tc_init+0x98>
    4c9e:	7123      	strb	r3, [r4, #4]
    4ca0:	2301      	movs	r3, #1
    4ca2:	683a      	ldr	r2, [r7, #0]
    4ca4:	2005      	movs	r0, #5
    4ca6:	4213      	tst	r3, r2
    4ca8:	d00b      	beq.n	4cc2 <tc_init+0xa2>
    4caa:	b00b      	add	sp, #44	; 0x2c
    4cac:	bc3c      	pop	{r2, r3, r4, r5}
    4cae:	4690      	mov	r8, r2
    4cb0:	4699      	mov	r9, r3
    4cb2:	46a2      	mov	sl, r4
    4cb4:	46ab      	mov	fp, r5
    4cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cb8:	4652      	mov	r2, sl
    4cba:	2017      	movs	r0, #23
    4cbc:	07d2      	lsls	r2, r2, #31
    4cbe:	d4f4      	bmi.n	4caa <tc_init+0x8a>
    4cc0:	e7ed      	b.n	4c9e <tc_init+0x7e>
    4cc2:	2202      	movs	r2, #2
    4cc4:	7af9      	ldrb	r1, [r7, #11]
    4cc6:	3017      	adds	r0, #23
    4cc8:	420a      	tst	r2, r1
    4cca:	d1ee      	bne.n	4caa <tc_init+0x8a>
    4ccc:	6839      	ldr	r1, [r7, #0]
    4cce:	400a      	ands	r2, r1
    4cd0:	d1eb      	bne.n	4caa <tc_init+0x8a>
    4cd2:	4641      	mov	r1, r8
    4cd4:	7c09      	ldrb	r1, [r1, #16]
    4cd6:	2900      	cmp	r1, #0
    4cd8:	d000      	beq.n	4cdc <tc_init+0xbc>
    4cda:	e0f6      	b.n	4eca <tc_init+0x2aa>
    4cdc:	4643      	mov	r3, r8
    4cde:	7f1b      	ldrb	r3, [r3, #28]
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d000      	beq.n	4ce6 <tc_init+0xc6>
    4ce4:	e0fd      	b.n	4ee2 <tc_init+0x2c2>
    4ce6:	464b      	mov	r3, r9
    4ce8:	4659      	mov	r1, fp
    4cea:	005a      	lsls	r2, r3, #1
    4cec:	1c53      	adds	r3, r2, #1
    4cee:	009b      	lsls	r3, r3, #2
    4cf0:	58c9      	ldr	r1, [r1, r3]
    4cf2:	464b      	mov	r3, r9
    4cf4:	4658      	mov	r0, fp
    4cf6:	00db      	lsls	r3, r3, #3
    4cf8:	5cc3      	ldrb	r3, [r0, r3]
    4cfa:	2b04      	cmp	r3, #4
    4cfc:	d807      	bhi.n	4d0e <tc_init+0xee>
    4cfe:	4897      	ldr	r0, [pc, #604]	; (4f5c <tc_init+0x33c>)
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	58c3      	ldr	r3, [r0, r3]
    4d04:	469f      	mov	pc, r3
    4d06:	4896      	ldr	r0, [pc, #600]	; (4f60 <tc_init+0x340>)
    4d08:	6a03      	ldr	r3, [r0, #32]
    4d0a:	4319      	orrs	r1, r3
    4d0c:	6201      	str	r1, [r0, #32]
    4d0e:	4643      	mov	r3, r8
    4d10:	78db      	ldrb	r3, [r3, #3]
    4d12:	2b08      	cmp	r3, #8
    4d14:	d100      	bne.n	4d18 <tc_init+0xf8>
    4d16:	e0f6      	b.n	4f06 <tc_init+0x2e6>
    4d18:	4643      	mov	r3, r8
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	a901      	add	r1, sp, #4
    4d1e:	700b      	strb	r3, [r1, #0]
    4d20:	464b      	mov	r3, r9
    4d22:	5cf5      	ldrb	r5, [r6, r3]
    4d24:	4b8f      	ldr	r3, [pc, #572]	; (4f64 <tc_init+0x344>)
    4d26:	0028      	movs	r0, r5
    4d28:	4798      	blx	r3
    4d2a:	4b8f      	ldr	r3, [pc, #572]	; (4f68 <tc_init+0x348>)
    4d2c:	0028      	movs	r0, r5
    4d2e:	4798      	blx	r3
    4d30:	4643      	mov	r3, r8
    4d32:	4642      	mov	r2, r8
    4d34:	78db      	ldrb	r3, [r3, #3]
    4d36:	79d2      	ldrb	r2, [r2, #7]
    4d38:	4313      	orrs	r3, r2
    4d3a:	4642      	mov	r2, r8
    4d3c:	8892      	ldrh	r2, [r2, #4]
    4d3e:	4313      	orrs	r3, r2
    4d40:	4642      	mov	r2, r8
    4d42:	7a52      	ldrb	r2, [r2, #9]
    4d44:	2a00      	cmp	r2, #0
    4d46:	d002      	beq.n	4d4e <tc_init+0x12e>
    4d48:	2280      	movs	r2, #128	; 0x80
    4d4a:	0252      	lsls	r2, r2, #9
    4d4c:	4313      	orrs	r3, r2
    4d4e:	4642      	mov	r2, r8
    4d50:	7a92      	ldrb	r2, [r2, #10]
    4d52:	2a00      	cmp	r2, #0
    4d54:	d002      	beq.n	4d5c <tc_init+0x13c>
    4d56:	2280      	movs	r2, #128	; 0x80
    4d58:	0292      	lsls	r2, r2, #10
    4d5a:	4313      	orrs	r3, r2
    4d5c:	4642      	mov	r2, r8
    4d5e:	7ad2      	ldrb	r2, [r2, #11]
    4d60:	2a00      	cmp	r2, #0
    4d62:	d002      	beq.n	4d6a <tc_init+0x14a>
    4d64:	2280      	movs	r2, #128	; 0x80
    4d66:	0352      	lsls	r2, r2, #13
    4d68:	4313      	orrs	r3, r2
    4d6a:	4642      	mov	r2, r8
    4d6c:	7b12      	ldrb	r2, [r2, #12]
    4d6e:	2a00      	cmp	r2, #0
    4d70:	d002      	beq.n	4d78 <tc_init+0x158>
    4d72:	2280      	movs	r2, #128	; 0x80
    4d74:	0392      	lsls	r2, r2, #14
    4d76:	4313      	orrs	r3, r2
    4d78:	4642      	mov	r2, r8
    4d7a:	7851      	ldrb	r1, [r2, #1]
    4d7c:	7892      	ldrb	r2, [r2, #2]
    4d7e:	0189      	lsls	r1, r1, #6
    4d80:	01d2      	lsls	r2, r2, #7
    4d82:	4311      	orrs	r1, r2
    4d84:	6822      	ldr	r2, [r4, #0]
    4d86:	4319      	orrs	r1, r3
    4d88:	6913      	ldr	r3, [r2, #16]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d1fc      	bne.n	4d88 <tc_init+0x168>
    4d8e:	6039      	str	r1, [r7, #0]
    4d90:	6822      	ldr	r2, [r4, #0]
    4d92:	6913      	ldr	r3, [r2, #16]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d1fc      	bne.n	4d92 <tc_init+0x172>
    4d98:	4643      	mov	r3, r8
    4d9a:	799b      	ldrb	r3, [r3, #6]
    4d9c:	733b      	strb	r3, [r7, #12]
    4d9e:	4643      	mov	r3, r8
    4da0:	7b5b      	ldrb	r3, [r3, #13]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d000      	beq.n	4da8 <tc_init+0x188>
    4da6:	e08d      	b.n	4ec4 <tc_init+0x2a4>
    4da8:	2101      	movs	r1, #1
    4daa:	2200      	movs	r2, #0
    4dac:	4643      	mov	r3, r8
    4dae:	7b9b      	ldrb	r3, [r3, #14]
    4db0:	2b00      	cmp	r3, #0
    4db2:	d100      	bne.n	4db6 <tc_init+0x196>
    4db4:	0011      	movs	r1, r2
    4db6:	6822      	ldr	r2, [r4, #0]
    4db8:	6913      	ldr	r3, [r2, #16]
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d1fc      	bne.n	4db8 <tc_init+0x198>
    4dbe:	33ff      	adds	r3, #255	; 0xff
    4dc0:	713b      	strb	r3, [r7, #4]
    4dc2:	2900      	cmp	r1, #0
    4dc4:	d004      	beq.n	4dd0 <tc_init+0x1b0>
    4dc6:	6822      	ldr	r2, [r4, #0]
    4dc8:	6913      	ldr	r3, [r2, #16]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d1fc      	bne.n	4dc8 <tc_init+0x1a8>
    4dce:	7179      	strb	r1, [r7, #5]
    4dd0:	4643      	mov	r3, r8
    4dd2:	7a1b      	ldrb	r3, [r3, #8]
    4dd4:	737b      	strb	r3, [r7, #13]
    4dd6:	6822      	ldr	r2, [r4, #0]
    4dd8:	6913      	ldr	r3, [r2, #16]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d1fc      	bne.n	4dd8 <tc_init+0x1b8>
    4dde:	7923      	ldrb	r3, [r4, #4]
    4de0:	2b04      	cmp	r3, #4
    4de2:	d01b      	beq.n	4e1c <tc_init+0x1fc>
    4de4:	2b08      	cmp	r3, #8
    4de6:	d03a      	beq.n	4e5e <tc_init+0x23e>
    4de8:	2017      	movs	r0, #23
    4dea:	2b00      	cmp	r3, #0
    4dec:	d000      	beq.n	4df0 <tc_init+0x1d0>
    4dee:	e75c      	b.n	4caa <tc_init+0x8a>
    4df0:	6913      	ldr	r3, [r2, #16]
    4df2:	2b00      	cmp	r3, #0
    4df4:	d1fc      	bne.n	4df0 <tc_init+0x1d0>
    4df6:	4643      	mov	r3, r8
    4df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4dfa:	82bb      	strh	r3, [r7, #20]
    4dfc:	6822      	ldr	r2, [r4, #0]
    4dfe:	6913      	ldr	r3, [r2, #16]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d1fc      	bne.n	4dfe <tc_init+0x1de>
    4e04:	4643      	mov	r3, r8
    4e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4e08:	83bb      	strh	r3, [r7, #28]
    4e0a:	6822      	ldr	r2, [r4, #0]
    4e0c:	6913      	ldr	r3, [r2, #16]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d1fc      	bne.n	4e0c <tc_init+0x1ec>
    4e12:	4643      	mov	r3, r8
    4e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4e16:	2000      	movs	r0, #0
    4e18:	83fb      	strh	r3, [r7, #30]
    4e1a:	e746      	b.n	4caa <tc_init+0x8a>
    4e1c:	6913      	ldr	r3, [r2, #16]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d1fc      	bne.n	4e1c <tc_init+0x1fc>
    4e22:	4642      	mov	r2, r8
    4e24:	3328      	adds	r3, #40	; 0x28
    4e26:	5cd3      	ldrb	r3, [r2, r3]
    4e28:	753b      	strb	r3, [r7, #20]
    4e2a:	6822      	ldr	r2, [r4, #0]
    4e2c:	6913      	ldr	r3, [r2, #16]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d1fc      	bne.n	4e2c <tc_init+0x20c>
    4e32:	4642      	mov	r2, r8
    4e34:	3329      	adds	r3, #41	; 0x29
    4e36:	5cd3      	ldrb	r3, [r2, r3]
    4e38:	76fb      	strb	r3, [r7, #27]
    4e3a:	6822      	ldr	r2, [r4, #0]
    4e3c:	6913      	ldr	r3, [r2, #16]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d1fc      	bne.n	4e3c <tc_init+0x21c>
    4e42:	4642      	mov	r2, r8
    4e44:	332a      	adds	r3, #42	; 0x2a
    4e46:	5cd3      	ldrb	r3, [r2, r3]
    4e48:	773b      	strb	r3, [r7, #28]
    4e4a:	6822      	ldr	r2, [r4, #0]
    4e4c:	6913      	ldr	r3, [r2, #16]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d1fc      	bne.n	4e4c <tc_init+0x22c>
    4e52:	4642      	mov	r2, r8
    4e54:	332b      	adds	r3, #43	; 0x2b
    4e56:	5cd3      	ldrb	r3, [r2, r3]
    4e58:	2000      	movs	r0, #0
    4e5a:	777b      	strb	r3, [r7, #29]
    4e5c:	e725      	b.n	4caa <tc_init+0x8a>
    4e5e:	6913      	ldr	r3, [r2, #16]
    4e60:	2b00      	cmp	r3, #0
    4e62:	d1fc      	bne.n	4e5e <tc_init+0x23e>
    4e64:	4643      	mov	r3, r8
    4e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e68:	617b      	str	r3, [r7, #20]
    4e6a:	6822      	ldr	r2, [r4, #0]
    4e6c:	6913      	ldr	r3, [r2, #16]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d1fc      	bne.n	4e6c <tc_init+0x24c>
    4e72:	4643      	mov	r3, r8
    4e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e76:	61fb      	str	r3, [r7, #28]
    4e78:	6822      	ldr	r2, [r4, #0]
    4e7a:	6913      	ldr	r3, [r2, #16]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d1fc      	bne.n	4e7a <tc_init+0x25a>
    4e80:	4643      	mov	r3, r8
    4e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4e84:	2000      	movs	r0, #0
    4e86:	623b      	str	r3, [r7, #32]
    4e88:	e70f      	b.n	4caa <tc_init+0x8a>
    4e8a:	4835      	ldr	r0, [pc, #212]	; (4f60 <tc_init+0x340>)
    4e8c:	69c3      	ldr	r3, [r0, #28]
    4e8e:	4319      	orrs	r1, r3
    4e90:	61c1      	str	r1, [r0, #28]
    4e92:	e73c      	b.n	4d0e <tc_init+0xee>
    4e94:	4832      	ldr	r0, [pc, #200]	; (4f60 <tc_init+0x340>)
    4e96:	6983      	ldr	r3, [r0, #24]
    4e98:	4319      	orrs	r1, r3
    4e9a:	6181      	str	r1, [r0, #24]
    4e9c:	e737      	b.n	4d0e <tc_init+0xee>
    4e9e:	4830      	ldr	r0, [pc, #192]	; (4f60 <tc_init+0x340>)
    4ea0:	6943      	ldr	r3, [r0, #20]
    4ea2:	4319      	orrs	r1, r3
    4ea4:	6141      	str	r1, [r0, #20]
    4ea6:	e732      	b.n	4d0e <tc_init+0xee>
    4ea8:	4b2d      	ldr	r3, [pc, #180]	; (4f60 <tc_init+0x340>)
    4eaa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    4eac:	4301      	orrs	r1, r0
    4eae:	6259      	str	r1, [r3, #36]	; 0x24
    4eb0:	e72d      	b.n	4d0e <tc_init+0xee>
    4eb2:	2200      	movs	r2, #0
    4eb4:	b2d1      	uxtb	r1, r2
    4eb6:	468a      	mov	sl, r1
    4eb8:	4691      	mov	r9, r2
    4eba:	e6d1      	b.n	4c60 <tc_init+0x40>
    4ebc:	2201      	movs	r2, #1
    4ebe:	e7f9      	b.n	4eb4 <tc_init+0x294>
    4ec0:	2202      	movs	r2, #2
    4ec2:	e7f7      	b.n	4eb4 <tc_init+0x294>
    4ec4:	2105      	movs	r1, #5
    4ec6:	2204      	movs	r2, #4
    4ec8:	e770      	b.n	4dac <tc_init+0x18c>
    4eca:	a903      	add	r1, sp, #12
    4ecc:	70ca      	strb	r2, [r1, #3]
    4ece:	4642      	mov	r2, r8
    4ed0:	708b      	strb	r3, [r1, #2]
    4ed2:	704b      	strb	r3, [r1, #1]
    4ed4:	4643      	mov	r3, r8
    4ed6:	7e12      	ldrb	r2, [r2, #24]
    4ed8:	7d18      	ldrb	r0, [r3, #20]
    4eda:	4b24      	ldr	r3, [pc, #144]	; (4f6c <tc_init+0x34c>)
    4edc:	700a      	strb	r2, [r1, #0]
    4ede:	4798      	blx	r3
    4ee0:	e6fc      	b.n	4cdc <tc_init+0xbc>
    4ee2:	2200      	movs	r2, #0
    4ee4:	a903      	add	r1, sp, #12
    4ee6:	70ca      	strb	r2, [r1, #3]
    4ee8:	2024      	movs	r0, #36	; 0x24
    4eea:	4642      	mov	r2, r8
    4eec:	2301      	movs	r3, #1
    4eee:	1812      	adds	r2, r2, r0
    4ef0:	7812      	ldrb	r2, [r2, #0]
    4ef2:	708b      	strb	r3, [r1, #2]
    4ef4:	700a      	strb	r2, [r1, #0]
    4ef6:	704b      	strb	r3, [r1, #1]
    4ef8:	2220      	movs	r2, #32
    4efa:	4643      	mov	r3, r8
    4efc:	189b      	adds	r3, r3, r2
    4efe:	7818      	ldrb	r0, [r3, #0]
    4f00:	4b1a      	ldr	r3, [pc, #104]	; (4f6c <tc_init+0x34c>)
    4f02:	4798      	blx	r3
    4f04:	e6ef      	b.n	4ce6 <tc_init+0xc6>
    4f06:	4653      	mov	r3, sl
    4f08:	2b02      	cmp	r3, #2
    4f0a:	d100      	bne.n	4f0e <tc_init+0x2ee>
    4f0c:	e704      	b.n	4d18 <tc_init+0xf8>
    4f0e:	4659      	mov	r1, fp
    4f10:	1cd3      	adds	r3, r2, #3
    4f12:	3202      	adds	r2, #2
    4f14:	0092      	lsls	r2, r2, #2
    4f16:	5c8a      	ldrb	r2, [r1, r2]
    4f18:	009b      	lsls	r3, r3, #2
    4f1a:	58cb      	ldr	r3, [r1, r3]
    4f1c:	2a04      	cmp	r2, #4
    4f1e:	d900      	bls.n	4f22 <tc_init+0x302>
    4f20:	e6fa      	b.n	4d18 <tc_init+0xf8>
    4f22:	4913      	ldr	r1, [pc, #76]	; (4f70 <tc_init+0x350>)
    4f24:	0092      	lsls	r2, r2, #2
    4f26:	588a      	ldr	r2, [r1, r2]
    4f28:	4697      	mov	pc, r2
    4f2a:	4a0d      	ldr	r2, [pc, #52]	; (4f60 <tc_init+0x340>)
    4f2c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4f2e:	430b      	orrs	r3, r1
    4f30:	6253      	str	r3, [r2, #36]	; 0x24
    4f32:	e6f1      	b.n	4d18 <tc_init+0xf8>
    4f34:	490a      	ldr	r1, [pc, #40]	; (4f60 <tc_init+0x340>)
    4f36:	6a0a      	ldr	r2, [r1, #32]
    4f38:	4313      	orrs	r3, r2
    4f3a:	620b      	str	r3, [r1, #32]
    4f3c:	e6ec      	b.n	4d18 <tc_init+0xf8>
    4f3e:	4908      	ldr	r1, [pc, #32]	; (4f60 <tc_init+0x340>)
    4f40:	69ca      	ldr	r2, [r1, #28]
    4f42:	4313      	orrs	r3, r2
    4f44:	61cb      	str	r3, [r1, #28]
    4f46:	e6e7      	b.n	4d18 <tc_init+0xf8>
    4f48:	4905      	ldr	r1, [pc, #20]	; (4f60 <tc_init+0x340>)
    4f4a:	698a      	ldr	r2, [r1, #24]
    4f4c:	4313      	orrs	r3, r2
    4f4e:	618b      	str	r3, [r1, #24]
    4f50:	e6e2      	b.n	4d18 <tc_init+0xf8>
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	00009044 	.word	0x00009044
    4f58:	20000ad4 	.word	0x20000ad4
    4f5c:	0000901c 	.word	0x0000901c
    4f60:	40000400 	.word	0x40000400
    4f64:	00004905 	.word	0x00004905
    4f68:	00004945 	.word	0x00004945
    4f6c:	00004a01 	.word	0x00004a01
    4f70:	00009030 	.word	0x00009030
    4f74:	4902      	ldr	r1, [pc, #8]	; (4f80 <tc_init+0x360>)
    4f76:	694a      	ldr	r2, [r1, #20]
    4f78:	4313      	orrs	r3, r2
    4f7a:	614b      	str	r3, [r1, #20]
    4f7c:	e6cc      	b.n	4d18 <tc_init+0xf8>
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	40000400 	.word	0x40000400

00004f84 <tc_set_count_value>:
    4f84:	6802      	ldr	r2, [r0, #0]
    4f86:	6913      	ldr	r3, [r2, #16]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d1fc      	bne.n	4f86 <tc_set_count_value+0x2>
    4f8c:	7903      	ldrb	r3, [r0, #4]
    4f8e:	2b04      	cmp	r3, #4
    4f90:	d00c      	beq.n	4fac <tc_set_count_value+0x28>
    4f92:	2b08      	cmp	r3, #8
    4f94:	d007      	beq.n	4fa6 <tc_set_count_value+0x22>
    4f96:	2017      	movs	r0, #23
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d000      	beq.n	4f9e <tc_set_count_value+0x1a>
    4f9c:	4770      	bx	lr
    4f9e:	b289      	uxth	r1, r1
    4fa0:	8291      	strh	r1, [r2, #20]
    4fa2:	2000      	movs	r0, #0
    4fa4:	e7fa      	b.n	4f9c <tc_set_count_value+0x18>
    4fa6:	6151      	str	r1, [r2, #20]
    4fa8:	2000      	movs	r0, #0
    4faa:	e7f7      	b.n	4f9c <tc_set_count_value+0x18>
    4fac:	b2c9      	uxtb	r1, r1
    4fae:	7511      	strb	r1, [r2, #20]
    4fb0:	2000      	movs	r0, #0
    4fb2:	e7f3      	b.n	4f9c <tc_set_count_value+0x18>

00004fb4 <tc_get_count_value>:
    4fb4:	6802      	ldr	r2, [r0, #0]
    4fb6:	6913      	ldr	r3, [r2, #16]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d1fc      	bne.n	4fb6 <tc_get_count_value+0x2>
    4fbc:	7113      	strb	r3, [r2, #4]
    4fbe:	6801      	ldr	r1, [r0, #0]
    4fc0:	690b      	ldr	r3, [r1, #16]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d1fc      	bne.n	4fc0 <tc_get_count_value+0xc>
    4fc6:	3380      	adds	r3, #128	; 0x80
    4fc8:	7153      	strb	r3, [r2, #5]
    4fca:	6802      	ldr	r2, [r0, #0]
    4fcc:	6913      	ldr	r3, [r2, #16]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d1fc      	bne.n	4fcc <tc_get_count_value+0x18>
    4fd2:	7903      	ldrb	r3, [r0, #4]
    4fd4:	2b04      	cmp	r3, #4
    4fd6:	d00a      	beq.n	4fee <tc_get_count_value+0x3a>
    4fd8:	2b08      	cmp	r3, #8
    4fda:	d006      	beq.n	4fea <tc_get_count_value+0x36>
    4fdc:	2000      	movs	r0, #0
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d000      	beq.n	4fe4 <tc_get_count_value+0x30>
    4fe2:	4770      	bx	lr
    4fe4:	8a90      	ldrh	r0, [r2, #20]
    4fe6:	b280      	uxth	r0, r0
    4fe8:	e7fb      	b.n	4fe2 <tc_get_count_value+0x2e>
    4fea:	6950      	ldr	r0, [r2, #20]
    4fec:	e7f9      	b.n	4fe2 <tc_get_count_value+0x2e>
    4fee:	7d10      	ldrb	r0, [r2, #20]
    4ff0:	b2c0      	uxtb	r0, r0
    4ff2:	e7f6      	b.n	4fe2 <tc_get_count_value+0x2e>

00004ff4 <tc_reset>:
    4ff4:	2102      	movs	r1, #2
    4ff6:	b510      	push	{r4, lr}
    4ff8:	6803      	ldr	r3, [r0, #0]
    4ffa:	2215      	movs	r2, #21
    4ffc:	7adc      	ldrb	r4, [r3, #11]
    4ffe:	4221      	tst	r1, r4
    5000:	d001      	beq.n	5006 <tc_reset+0x12>
    5002:	0010      	movs	r0, r2
    5004:	bd10      	pop	{r4, pc}
    5006:	681a      	ldr	r2, [r3, #0]
    5008:	4211      	tst	r1, r2
    500a:	d00d      	beq.n	5028 <tc_reset+0x34>
    500c:	691a      	ldr	r2, [r3, #16]
    500e:	2a00      	cmp	r2, #0
    5010:	d1fc      	bne.n	500c <tc_reset+0x18>
    5012:	2102      	movs	r1, #2
    5014:	3233      	adds	r2, #51	; 0x33
    5016:	721a      	strb	r2, [r3, #8]
    5018:	729a      	strb	r2, [r3, #10]
    501a:	681a      	ldr	r2, [r3, #0]
    501c:	438a      	bics	r2, r1
    501e:	601a      	str	r2, [r3, #0]
    5020:	6801      	ldr	r1, [r0, #0]
    5022:	690a      	ldr	r2, [r1, #16]
    5024:	2a00      	cmp	r2, #0
    5026:	d1fc      	bne.n	5022 <tc_reset+0x2e>
    5028:	2101      	movs	r1, #1
    502a:	681a      	ldr	r2, [r3, #0]
    502c:	430a      	orrs	r2, r1
    502e:	601a      	str	r2, [r3, #0]
    5030:	2200      	movs	r2, #0
    5032:	e7e6      	b.n	5002 <tc_reset+0xe>

00005034 <Dummy_Handler>:
    5034:	4770      	bx	lr
    5036:	46c0      	nop			; (mov r8, r8)

00005038 <Reset_Handler>:
    5038:	4914      	ldr	r1, [pc, #80]	; (508c <Reset_Handler+0x54>)
    503a:	4815      	ldr	r0, [pc, #84]	; (5090 <Reset_Handler+0x58>)
    503c:	b510      	push	{r4, lr}
    503e:	4281      	cmp	r1, r0
    5040:	d009      	beq.n	5056 <Reset_Handler+0x1e>
    5042:	4b14      	ldr	r3, [pc, #80]	; (5094 <Reset_Handler+0x5c>)
    5044:	4298      	cmp	r0, r3
    5046:	d206      	bcs.n	5056 <Reset_Handler+0x1e>
    5048:	43c2      	mvns	r2, r0
    504a:	18d2      	adds	r2, r2, r3
    504c:	0892      	lsrs	r2, r2, #2
    504e:	3201      	adds	r2, #1
    5050:	0092      	lsls	r2, r2, #2
    5052:	4b11      	ldr	r3, [pc, #68]	; (5098 <Reset_Handler+0x60>)
    5054:	4798      	blx	r3
    5056:	4811      	ldr	r0, [pc, #68]	; (509c <Reset_Handler+0x64>)
    5058:	4b11      	ldr	r3, [pc, #68]	; (50a0 <Reset_Handler+0x68>)
    505a:	4298      	cmp	r0, r3
    505c:	d207      	bcs.n	506e <Reset_Handler+0x36>
    505e:	43c2      	mvns	r2, r0
    5060:	18d2      	adds	r2, r2, r3
    5062:	0892      	lsrs	r2, r2, #2
    5064:	3201      	adds	r2, #1
    5066:	0092      	lsls	r2, r2, #2
    5068:	2100      	movs	r1, #0
    506a:	4b0e      	ldr	r3, [pc, #56]	; (50a4 <Reset_Handler+0x6c>)
    506c:	4798      	blx	r3
    506e:	21ff      	movs	r1, #255	; 0xff
    5070:	4b0d      	ldr	r3, [pc, #52]	; (50a8 <Reset_Handler+0x70>)
    5072:	4a0e      	ldr	r2, [pc, #56]	; (50ac <Reset_Handler+0x74>)
    5074:	438b      	bics	r3, r1
    5076:	6093      	str	r3, [r2, #8]
    5078:	4a0d      	ldr	r2, [pc, #52]	; (50b0 <Reset_Handler+0x78>)
    507a:	397f      	subs	r1, #127	; 0x7f
    507c:	6853      	ldr	r3, [r2, #4]
    507e:	430b      	orrs	r3, r1
    5080:	6053      	str	r3, [r2, #4]
    5082:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <Reset_Handler+0x7c>)
    5084:	4798      	blx	r3
    5086:	4b0c      	ldr	r3, [pc, #48]	; (50b8 <Reset_Handler+0x80>)
    5088:	4798      	blx	r3
    508a:	e7fe      	b.n	508a <Reset_Handler+0x52>
    508c:	000092ac 	.word	0x000092ac
    5090:	20000000 	.word	0x20000000
    5094:	20000088 	.word	0x20000088
    5098:	00007ead 	.word	0x00007ead
    509c:	20000088 	.word	0x20000088
    50a0:	20000c48 	.word	0x20000c48
    50a4:	00007ebf 	.word	0x00007ebf
    50a8:	00000000 	.word	0x00000000
    50ac:	e000ed00 	.word	0xe000ed00
    50b0:	41004000 	.word	0x41004000
    50b4:	00007e65 	.word	0x00007e65
    50b8:	00005e7d 	.word	0x00005e7d

000050bc <_read>:
    50bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50be:	46c6      	mov	lr, r8
    50c0:	000c      	movs	r4, r1
    50c2:	b500      	push	{lr}
    50c4:	4690      	mov	r8, r2
    50c6:	2800      	cmp	r0, #0
    50c8:	d112      	bne.n	50f0 <_read+0x34>
    50ca:	2a00      	cmp	r2, #0
    50cc:	dd0d      	ble.n	50ea <_read+0x2e>
    50ce:	4e0a      	ldr	r6, [pc, #40]	; (50f8 <_read+0x3c>)
    50d0:	4d0a      	ldr	r5, [pc, #40]	; (50fc <_read+0x40>)
    50d2:	188f      	adds	r7, r1, r2
    50d4:	0021      	movs	r1, r4
    50d6:	6830      	ldr	r0, [r6, #0]
    50d8:	682b      	ldr	r3, [r5, #0]
    50da:	3401      	adds	r4, #1
    50dc:	4798      	blx	r3
    50de:	42bc      	cmp	r4, r7
    50e0:	d1f8      	bne.n	50d4 <_read+0x18>
    50e2:	4640      	mov	r0, r8
    50e4:	bc04      	pop	{r2}
    50e6:	4690      	mov	r8, r2
    50e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50ea:	2300      	movs	r3, #0
    50ec:	4698      	mov	r8, r3
    50ee:	e7f8      	b.n	50e2 <_read+0x26>
    50f0:	2301      	movs	r3, #1
    50f2:	425b      	negs	r3, r3
    50f4:	4698      	mov	r8, r3
    50f6:	e7f4      	b.n	50e2 <_read+0x26>
    50f8:	20000ae8 	.word	0x20000ae8
    50fc:	20000ae0 	.word	0x20000ae0

00005100 <_write>:
    5100:	b5f0      	push	{r4, r5, r6, r7, lr}
    5102:	46c6      	mov	lr, r8
    5104:	3801      	subs	r0, #1
    5106:	b500      	push	{lr}
    5108:	000e      	movs	r6, r1
    510a:	0015      	movs	r5, r2
    510c:	2802      	cmp	r0, #2
    510e:	d810      	bhi.n	5132 <_write+0x32>
    5110:	2400      	movs	r4, #0
    5112:	2a00      	cmp	r2, #0
    5114:	d00f      	beq.n	5136 <_write+0x36>
    5116:	4b0a      	ldr	r3, [pc, #40]	; (5140 <_write+0x40>)
    5118:	4f0a      	ldr	r7, [pc, #40]	; (5144 <_write+0x44>)
    511a:	4698      	mov	r8, r3
    511c:	e002      	b.n	5124 <_write+0x24>
    511e:	3401      	adds	r4, #1
    5120:	42a5      	cmp	r5, r4
    5122:	d008      	beq.n	5136 <_write+0x36>
    5124:	4643      	mov	r3, r8
    5126:	5d31      	ldrb	r1, [r6, r4]
    5128:	6818      	ldr	r0, [r3, #0]
    512a:	683b      	ldr	r3, [r7, #0]
    512c:	4798      	blx	r3
    512e:	2800      	cmp	r0, #0
    5130:	daf5      	bge.n	511e <_write+0x1e>
    5132:	2401      	movs	r4, #1
    5134:	4264      	negs	r4, r4
    5136:	0020      	movs	r0, r4
    5138:	bc04      	pop	{r2}
    513a:	4690      	mov	r8, r2
    513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    513e:	46c0      	nop			; (mov r8, r8)
    5140:	20000ae8 	.word	0x20000ae8
    5144:	20000ae4 	.word	0x20000ae4

00005148 <_sbrk>:
    5148:	4a04      	ldr	r2, [pc, #16]	; (515c <_sbrk+0x14>)
    514a:	6813      	ldr	r3, [r2, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d003      	beq.n	5158 <_sbrk+0x10>
    5150:	1818      	adds	r0, r3, r0
    5152:	6010      	str	r0, [r2, #0]
    5154:	0018      	movs	r0, r3
    5156:	4770      	bx	lr
    5158:	4b01      	ldr	r3, [pc, #4]	; (5160 <_sbrk+0x18>)
    515a:	e7f9      	b.n	5150 <_sbrk+0x8>
    515c:	200001a0 	.word	0x200001a0
    5160:	20002c48 	.word	0x20002c48

00005164 <_close>:
    5164:	2001      	movs	r0, #1
    5166:	4240      	negs	r0, r0
    5168:	4770      	bx	lr
    516a:	46c0      	nop			; (mov r8, r8)

0000516c <_fstat>:
    516c:	2380      	movs	r3, #128	; 0x80
    516e:	019b      	lsls	r3, r3, #6
    5170:	2000      	movs	r0, #0
    5172:	604b      	str	r3, [r1, #4]
    5174:	4770      	bx	lr
    5176:	46c0      	nop			; (mov r8, r8)

00005178 <_isatty>:
    5178:	2001      	movs	r0, #1
    517a:	4770      	bx	lr

0000517c <_lseek>:
    517c:	2000      	movs	r0, #0
    517e:	4770      	bx	lr

00005180 <usart_serial_getchar>:
    5180:	b5f0      	push	{r4, r5, r6, r7, lr}
    5182:	b083      	sub	sp, #12
    5184:	466b      	mov	r3, sp
    5186:	1d9c      	adds	r4, r3, #6
    5188:	2300      	movs	r3, #0
    518a:	0006      	movs	r6, r0
    518c:	000f      	movs	r7, r1
    518e:	4d05      	ldr	r5, [pc, #20]	; (51a4 <usart_serial_getchar+0x24>)
    5190:	8023      	strh	r3, [r4, #0]
    5192:	0021      	movs	r1, r4
    5194:	0030      	movs	r0, r6
    5196:	47a8      	blx	r5
    5198:	2800      	cmp	r0, #0
    519a:	d1fa      	bne.n	5192 <usart_serial_getchar+0x12>
    519c:	8823      	ldrh	r3, [r4, #0]
    519e:	703b      	strb	r3, [r7, #0]
    51a0:	b003      	add	sp, #12
    51a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51a4:	0000427d 	.word	0x0000427d

000051a8 <usart_serial_putchar>:
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	0006      	movs	r6, r0
    51ac:	4d03      	ldr	r5, [pc, #12]	; (51bc <usart_serial_putchar+0x14>)
    51ae:	b28c      	uxth	r4, r1
    51b0:	0021      	movs	r1, r4
    51b2:	0030      	movs	r0, r6
    51b4:	47a8      	blx	r5
    51b6:	2800      	cmp	r0, #0
    51b8:	d1fa      	bne.n	51b0 <usart_serial_putchar+0x8>
    51ba:	bd70      	pop	{r4, r5, r6, pc}
    51bc:	00004251 	.word	0x00004251

000051c0 <USART_HOST_ISR_VECT>:
    51c0:	b510      	push	{r4, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	466b      	mov	r3, sp
    51c6:	1ddc      	adds	r4, r3, #7
    51c8:	2201      	movs	r2, #1
    51ca:	0021      	movs	r1, r4
    51cc:	4b0d      	ldr	r3, [pc, #52]	; (5204 <USART_HOST_ISR_VECT+0x44>)
    51ce:	480e      	ldr	r0, [pc, #56]	; (5208 <USART_HOST_ISR_VECT+0x48>)
    51d0:	4798      	blx	r3
    51d2:	b672      	cpsid	i
    51d4:	f3bf 8f5f 	dmb	sy
    51d8:	2300      	movs	r3, #0
    51da:	4a0c      	ldr	r2, [pc, #48]	; (520c <USART_HOST_ISR_VECT+0x4c>)
    51dc:	490c      	ldr	r1, [pc, #48]	; (5210 <USART_HOST_ISR_VECT+0x50>)
    51de:	7013      	strb	r3, [r2, #0]
    51e0:	7824      	ldrb	r4, [r4, #0]
    51e2:	780b      	ldrb	r3, [r1, #0]
    51e4:	480b      	ldr	r0, [pc, #44]	; (5214 <USART_HOST_ISR_VECT+0x54>)
    51e6:	54c4      	strb	r4, [r0, r3]
    51e8:	2b9b      	cmp	r3, #155	; 0x9b
    51ea:	d009      	beq.n	5200 <USART_HOST_ISR_VECT+0x40>
    51ec:	3301      	adds	r3, #1
    51ee:	b2db      	uxtb	r3, r3
    51f0:	700b      	strb	r3, [r1, #0]
    51f2:	2301      	movs	r3, #1
    51f4:	7013      	strb	r3, [r2, #0]
    51f6:	f3bf 8f5f 	dmb	sy
    51fa:	b662      	cpsie	i
    51fc:	b002      	add	sp, #8
    51fe:	bd10      	pop	{r4, pc}
    5200:	2300      	movs	r3, #0
    5202:	e7f5      	b.n	51f0 <USART_HOST_ISR_VECT+0x30>
    5204:	000042ed 	.word	0x000042ed
    5208:	200001a4 	.word	0x200001a4
    520c:	20000020 	.word	0x20000020
    5210:	20000274 	.word	0x20000274
    5214:	200001d8 	.word	0x200001d8

00005218 <sio2host_init>:
    5218:	b570      	push	{r4, r5, r6, lr}
    521a:	b090      	sub	sp, #64	; 0x40
    521c:	4669      	mov	r1, sp
    521e:	22ff      	movs	r2, #255	; 0xff
    5220:	2380      	movs	r3, #128	; 0x80
    5222:	810a      	strh	r2, [r1, #8]
    5224:	2202      	movs	r2, #2
    5226:	05db      	lsls	r3, r3, #23
    5228:	9300      	str	r3, [sp, #0]
    522a:	2300      	movs	r3, #0
    522c:	32ff      	adds	r2, #255	; 0xff
    522e:	9209      	str	r2, [sp, #36]	; 0x24
    5230:	3ad5      	subs	r2, #213	; 0xd5
    5232:	548b      	strb	r3, [r1, r2]
    5234:	3201      	adds	r2, #1
    5236:	548b      	strb	r3, [r1, r2]
    5238:	728b      	strb	r3, [r1, #10]
    523a:	72cb      	strb	r3, [r1, #11]
    523c:	820b      	strh	r3, [r1, #16]
    523e:	9301      	str	r3, [sp, #4]
    5240:	930a      	str	r3, [sp, #40]	; 0x28
    5242:	9305      	str	r3, [sp, #20]
    5244:	2313      	movs	r3, #19
    5246:	768b      	strb	r3, [r1, #26]
    5248:	2380      	movs	r3, #128	; 0x80
    524a:	035b      	lsls	r3, r3, #13
    524c:	9303      	str	r3, [sp, #12]
    524e:	4b32      	ldr	r3, [pc, #200]	; (5318 <sio2host_init+0x100>)
    5250:	2200      	movs	r2, #0
    5252:	930c      	str	r3, [sp, #48]	; 0x30
    5254:	4b31      	ldr	r3, [pc, #196]	; (531c <sio2host_init+0x104>)
    5256:	76ca      	strb	r2, [r1, #27]
    5258:	930d      	str	r3, [sp, #52]	; 0x34
    525a:	2301      	movs	r3, #1
    525c:	425b      	negs	r3, r3
    525e:	930e      	str	r3, [sp, #56]	; 0x38
    5260:	930f      	str	r3, [sp, #60]	; 0x3c
    5262:	23e1      	movs	r3, #225	; 0xe1
    5264:	760a      	strb	r2, [r1, #24]
    5266:	770a      	strb	r2, [r1, #28]
    5268:	764a      	strb	r2, [r1, #25]
    526a:	774a      	strb	r2, [r1, #29]
    526c:	2184      	movs	r1, #132	; 0x84
    526e:	025b      	lsls	r3, r3, #9
    5270:	4c2b      	ldr	r4, [pc, #172]	; (5320 <sio2host_init+0x108>)
    5272:	9308      	str	r3, [sp, #32]
    5274:	4b2b      	ldr	r3, [pc, #172]	; (5324 <sio2host_init+0x10c>)
    5276:	4a2c      	ldr	r2, [pc, #176]	; (5328 <sio2host_init+0x110>)
    5278:	601c      	str	r4, [r3, #0]
    527a:	4b2c      	ldr	r3, [pc, #176]	; (532c <sio2host_init+0x114>)
    527c:	05c9      	lsls	r1, r1, #23
    527e:	601a      	str	r2, [r3, #0]
    5280:	4a2b      	ldr	r2, [pc, #172]	; (5330 <sio2host_init+0x118>)
    5282:	4b2c      	ldr	r3, [pc, #176]	; (5334 <sio2host_init+0x11c>)
    5284:	0020      	movs	r0, r4
    5286:	601a      	str	r2, [r3, #0]
    5288:	466a      	mov	r2, sp
    528a:	4b2b      	ldr	r3, [pc, #172]	; (5338 <sio2host_init+0x120>)
    528c:	4798      	blx	r3
    528e:	4e2b      	ldr	r6, [pc, #172]	; (533c <sio2host_init+0x124>)
    5290:	4d2b      	ldr	r5, [pc, #172]	; (5340 <sio2host_init+0x128>)
    5292:	6833      	ldr	r3, [r6, #0]
    5294:	2100      	movs	r1, #0
    5296:	6898      	ldr	r0, [r3, #8]
    5298:	47a8      	blx	r5
    529a:	6833      	ldr	r3, [r6, #0]
    529c:	2100      	movs	r1, #0
    529e:	6858      	ldr	r0, [r3, #4]
    52a0:	47a8      	blx	r5
    52a2:	6825      	ldr	r5, [r4, #0]
    52a4:	4b27      	ldr	r3, [pc, #156]	; (5344 <sio2host_init+0x12c>)
    52a6:	0028      	movs	r0, r5
    52a8:	4798      	blx	r3
    52aa:	231f      	movs	r3, #31
    52ac:	4018      	ands	r0, r3
    52ae:	3b1e      	subs	r3, #30
    52b0:	4083      	lsls	r3, r0
    52b2:	4a25      	ldr	r2, [pc, #148]	; (5348 <sio2host_init+0x130>)
    52b4:	6013      	str	r3, [r2, #0]
    52b6:	6822      	ldr	r2, [r4, #0]
    52b8:	69d3      	ldr	r3, [r2, #28]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d1fc      	bne.n	52b8 <sio2host_init+0xa0>
    52be:	2202      	movs	r2, #2
    52c0:	682b      	ldr	r3, [r5, #0]
    52c2:	4313      	orrs	r3, r2
    52c4:	602b      	str	r3, [r5, #0]
    52c6:	6823      	ldr	r3, [r4, #0]
    52c8:	69da      	ldr	r2, [r3, #28]
    52ca:	2a00      	cmp	r2, #0
    52cc:	d1fc      	bne.n	52c8 <sio2host_init+0xb0>
    52ce:	2280      	movs	r2, #128	; 0x80
    52d0:	6859      	ldr	r1, [r3, #4]
    52d2:	0252      	lsls	r2, r2, #9
    52d4:	430a      	orrs	r2, r1
    52d6:	605a      	str	r2, [r3, #4]
    52d8:	2201      	movs	r2, #1
    52da:	71e2      	strb	r2, [r4, #7]
    52dc:	69da      	ldr	r2, [r3, #28]
    52de:	2a00      	cmp	r2, #0
    52e0:	d1fc      	bne.n	52dc <sio2host_init+0xc4>
    52e2:	69da      	ldr	r2, [r3, #28]
    52e4:	2a00      	cmp	r2, #0
    52e6:	d1fc      	bne.n	52e2 <sio2host_init+0xca>
    52e8:	2280      	movs	r2, #128	; 0x80
    52ea:	6859      	ldr	r1, [r3, #4]
    52ec:	0292      	lsls	r2, r2, #10
    52ee:	430a      	orrs	r2, r1
    52f0:	605a      	str	r2, [r3, #4]
    52f2:	2201      	movs	r2, #1
    52f4:	71a2      	strb	r2, [r4, #6]
    52f6:	69da      	ldr	r2, [r3, #28]
    52f8:	2a00      	cmp	r2, #0
    52fa:	d1fc      	bne.n	52f6 <sio2host_init+0xde>
    52fc:	4913      	ldr	r1, [pc, #76]	; (534c <sio2host_init+0x134>)
    52fe:	2000      	movs	r0, #0
    5300:	4b13      	ldr	r3, [pc, #76]	; (5350 <sio2host_init+0x138>)
    5302:	4798      	blx	r3
    5304:	2384      	movs	r3, #132	; 0x84
    5306:	2204      	movs	r2, #4
    5308:	05db      	lsls	r3, r3, #23
    530a:	759a      	strb	r2, [r3, #22]
    530c:	4b0e      	ldr	r3, [pc, #56]	; (5348 <sio2host_init+0x130>)
    530e:	32fc      	adds	r2, #252	; 0xfc
    5310:	601a      	str	r2, [r3, #0]
    5312:	b010      	add	sp, #64	; 0x40
    5314:	bd70      	pop	{r4, r5, r6, pc}
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	00040003 	.word	0x00040003
    531c:	00050003 	.word	0x00050003
    5320:	200001a4 	.word	0x200001a4
    5324:	20000ae8 	.word	0x20000ae8
    5328:	000051a9 	.word	0x000051a9
    532c:	20000ae4 	.word	0x20000ae4
    5330:	00005181 	.word	0x00005181
    5334:	20000ae0 	.word	0x20000ae0
    5338:	00003f29 	.word	0x00003f29
    533c:	20000024 	.word	0x20000024
    5340:	00007fd9 	.word	0x00007fd9
    5344:	00003999 	.word	0x00003999
    5348:	e000e100 	.word	0xe000e100
    534c:	000051c1 	.word	0x000051c1
    5350:	00003951 	.word	0x00003951

00005354 <AT86RFX_ISR>:
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    5354:	2201      	movs	r2, #1
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    5356:	b510      	push	{r4, lr}
    5358:	4b02      	ldr	r3, [pc, #8]	; (5364 <AT86RFX_ISR+0x10>)
    535a:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
	PHY_PacketReceieved();
    535c:	4b02      	ldr	r3, [pc, #8]	; (5368 <AT86RFX_ISR+0x14>)
    535e:	4798      	blx	r3

}
    5360:	bd10      	pop	{r4, pc}
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	40002400 	.word	0x40002400
    5368:	0000233d 	.word	0x0000233d

0000536c <trx_spi_init>:

void trx_spi_init(void)
{
    536c:	b570      	push	{r4, r5, r6, lr}
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    536e:	223f      	movs	r2, #63	; 0x3f
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    5370:	2400      	movs	r4, #0
    5372:	4b34      	ldr	r3, [pc, #208]	; (5444 <trx_spi_init+0xd8>)
{
    5374:	b084      	sub	sp, #16
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    5376:	701a      	strb	r2, [r3, #0]
    5378:	705c      	strb	r4, [r3, #1]
	config->address         = 0;
    537a:	709c      	strb	r4, [r3, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    537c:	2501      	movs	r5, #1
    537e:	466b      	mov	r3, sp
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5380:	4e31      	ldr	r6, [pc, #196]	; (5448 <trx_spi_init+0xdc>)
    5382:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    5384:	709c      	strb	r4, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5386:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5388:	203f      	movs	r0, #63	; 0x3f
    538a:	4b30      	ldr	r3, [pc, #192]	; (544c <trx_spi_init+0xe0>)
    538c:	4669      	mov	r1, sp
	slave->ss_pin          = config->ss_pin;
    538e:	7032      	strb	r2, [r6, #0]
	slave->address_enabled = config->address_enabled;
    5390:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    5392:	70b4      	strb	r4, [r6, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5394:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5396:	7830      	ldrb	r0, [r6, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    5398:	0942      	lsrs	r2, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    539a:	09c3      	lsrs	r3, r0, #7
    539c:	d150      	bne.n	5440 <trx_spi_init+0xd4>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    539e:	211f      	movs	r1, #31
    53a0:	4001      	ands	r1, r0
    53a2:	0028      	movs	r0, r5
    53a4:	4088      	lsls	r0, r1
    53a6:	0001      	movs	r1, r0
		port_base->OUTSET.reg = pin_mask;
    53a8:	4829      	ldr	r0, [pc, #164]	; (5450 <trx_spi_init+0xe4>)
	config->mode             = SPI_MODE_MASTER;
    53aa:	4c2a      	ldr	r4, [pc, #168]	; (5454 <trx_spi_init+0xe8>)
    53ac:	4684      	mov	ip, r0
    53ae:	01d2      	lsls	r2, r2, #7
    53b0:	4462      	add	r2, ip
    53b2:	6191      	str	r1, [r2, #24]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    53b4:	0020      	movs	r0, r4
	config->generator_source = GCLK_GENERATOR_0;
    53b6:	2224      	movs	r2, #36	; 0x24
	config->data_order       = SPI_DATA_ORDER_MSB;
    53b8:	6063      	str	r3, [r4, #4]
	config->generator_source = GCLK_GENERATOR_0;
    53ba:	54a3      	strb	r3, [r4, r2]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    53bc:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    53be:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    53c0:	7463      	strb	r3, [r4, #17]
	config->master_slave_select_enable= false;
    53c2:	7523      	strb	r3, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    53c4:	3a18      	subs	r2, #24
    53c6:	2100      	movs	r1, #0
    53c8:	4b23      	ldr	r3, [pc, #140]	; (5458 <trx_spi_init+0xec>)
    53ca:	3018      	adds	r0, #24
	config->mode             = SPI_MODE_MASTER;
    53cc:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
    53ce:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    53d0:	74e5      	strb	r5, [r4, #19]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    53d2:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    53d4:	2380      	movs	r3, #128	; 0x80
    53d6:	025b      	lsls	r3, r3, #9
    53d8:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    53da:	4b20      	ldr	r3, [pc, #128]	; (545c <trx_spi_init+0xf0>)
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
	spi_init(&master, AT86RFX_SPI, &config);
    53dc:	4d20      	ldr	r5, [pc, #128]	; (5460 <trx_spi_init+0xf4>)
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    53de:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    53e0:	4b20      	ldr	r3, [pc, #128]	; (5464 <trx_spi_init+0xf8>)
	spi_init(&master, AT86RFX_SPI, &config);
    53e2:	0022      	movs	r2, r4
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    53e4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    53e6:	2301      	movs	r3, #1
    53e8:	425b      	negs	r3, r3
    53ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    53ec:	4b1e      	ldr	r3, [pc, #120]	; (5468 <trx_spi_init+0xfc>)
	spi_init(&master, AT86RFX_SPI, &config);
    53ee:	491f      	ldr	r1, [pc, #124]	; (546c <trx_spi_init+0x100>)
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    53f0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    53f2:	4b1f      	ldr	r3, [pc, #124]	; (5470 <trx_spi_init+0x104>)
	spi_init(&master, AT86RFX_SPI, &config);
    53f4:	0028      	movs	r0, r5
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    53f6:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    53f8:	4b1e      	ldr	r3, [pc, #120]	; (5474 <trx_spi_init+0x108>)
    53fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    53fc:	682b      	ldr	r3, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    53fe:	69dc      	ldr	r4, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    5400:	2c00      	cmp	r4, #0
    5402:	d1fc      	bne.n	53fe <trx_spi_init+0x92>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5404:	2502      	movs	r5, #2
    5406:	681a      	ldr	r2, [r3, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    5408:	4668      	mov	r0, sp
    540a:	432a      	orrs	r2, r5
    540c:	601a      	str	r2, [r3, #0]
    540e:	4b1a      	ldr	r3, [pc, #104]	; (5478 <trx_spi_init+0x10c>)
    5410:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    5412:	2380      	movs	r3, #128	; 0x80
    5414:	2220      	movs	r2, #32
    5416:	039b      	lsls	r3, r3, #14
    5418:	9200      	str	r2, [sp, #0]
    541a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    541c:	466b      	mov	r3, sp
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    541e:	466a      	mov	r2, sp
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    5420:	721d      	strb	r5, [r3, #8]
	eint_chan_conf.enable_async_edge_detection = false;
    5422:	725c      	strb	r4, [r3, #9]
	eint_chan_conf.filter_input_signal = false;
    5424:	729c      	strb	r4, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    5426:	2301      	movs	r3, #1
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    5428:	4669      	mov	r1, sp
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    542a:	72d3      	strb	r3, [r2, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    542c:	2000      	movs	r0, #0
    542e:	4b13      	ldr	r3, [pc, #76]	; (547c <trx_spi_init+0x110>)
    5430:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    5432:	2200      	movs	r2, #0
    5434:	2100      	movs	r1, #0
    5436:	4b12      	ldr	r3, [pc, #72]	; (5480 <trx_spi_init+0x114>)
    5438:	4812      	ldr	r0, [pc, #72]	; (5484 <trx_spi_init+0x118>)
    543a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    543c:	b004      	add	sp, #16
    543e:	bd70      	pop	{r4, r5, r6, pc}
    5440:	61a4      	str	r4, [r4, #24]
    5442:	deff      	udf	#255	; 0xff
    5444:	20000af0 	.word	0x20000af0
    5448:	20000af4 	.word	0x20000af4
    544c:	00003511 	.word	0x00003511
    5450:	40002800 	.word	0x40002800
    5454:	20000af8 	.word	0x20000af8
    5458:	00007ebf 	.word	0x00007ebf
    545c:	003d0900 	.word	0x003d0900
    5460:	20000b30 	.word	0x20000b30
    5464:	00530005 	.word	0x00530005
    5468:	003e0005 	.word	0x003e0005
    546c:	42001000 	.word	0x42001000
    5470:	00520005 	.word	0x00520005
    5474:	00003a29 	.word	0x00003a29
    5478:	00003455 	.word	0x00003455
    547c:	00003469 	.word	0x00003469
    5480:	00003335 	.word	0x00003335
    5484:	00005355 	.word	0x00005355

00005488 <PhyReset>:

void PhyReset(void)
{
    5488:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
    548a:	2280      	movs	r2, #128	; 0x80
		port_base->OUTSET.reg = pin_mask;
    548c:	2580      	movs	r5, #128	; 0x80
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    548e:	20a5      	movs	r0, #165	; 0xa5
    5490:	4c06      	ldr	r4, [pc, #24]	; (54ac <PhyReset+0x24>)
		port_base->OUTCLR.reg = pin_mask;
    5492:	4b07      	ldr	r3, [pc, #28]	; (54b0 <PhyReset+0x28>)
		port_base->OUTSET.reg = pin_mask;
    5494:	022d      	lsls	r5, r5, #8
		port_base->OUTCLR.reg = pin_mask;
    5496:	0352      	lsls	r2, r2, #13
		port_base->OUTSET.reg = pin_mask;
    5498:	61a5      	str	r5, [r4, #24]
    549a:	4e06      	ldr	r6, [pc, #24]	; (54b4 <PhyReset+0x2c>)
		port_base->OUTCLR.reg = pin_mask;
    549c:	615a      	str	r2, [r3, #20]
    549e:	0040      	lsls	r0, r0, #1
    54a0:	47b0      	blx	r6
    54a2:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    54a4:	200a      	movs	r0, #10
    54a6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    54a8:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    54aa:	bd70      	pop	{r4, r5, r6, pc}
    54ac:	40002880 	.word	0x40002880
    54b0:	40002800 	.word	0x40002800
    54b4:	00003185 	.word	0x00003185

000054b8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	46ce      	mov	lr, r9
    54bc:	4647      	mov	r7, r8
    54be:	b580      	push	{r7, lr}
    54c0:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    54c2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    54c6:	425a      	negs	r2, r3
    54c8:	4153      	adcs	r3, r2
    54ca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    54cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    54ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    54d2:	2300      	movs	r3, #0
    54d4:	4f32      	ldr	r7, [pc, #200]	; (55a0 <trx_reg_read+0xe8>)
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    54d6:	4c33      	ldr	r4, [pc, #204]	; (55a4 <trx_reg_read+0xec>)
    54d8:	703b      	strb	r3, [r7, #0]
	return flags;
    54da:	9b01      	ldr	r3, [sp, #4]
    54dc:	4e32      	ldr	r6, [pc, #200]	; (55a8 <trx_reg_read+0xf0>)
    54de:	4698      	mov	r8, r3
	addr |= READ_ACCESS_COMMAND;
    54e0:	2380      	movs	r3, #128	; 0x80
    54e2:	4318      	orrs	r0, r3
	spi_select_slave(&master, &slave, true);
    54e4:	0031      	movs	r1, r6
	addr |= READ_ACCESS_COMMAND;
    54e6:	4681      	mov	r9, r0
	spi_select_slave(&master, &slave, true);
    54e8:	2201      	movs	r2, #1
    54ea:	0020      	movs	r0, r4
    54ec:	4d2f      	ldr	r5, [pc, #188]	; (55ac <trx_reg_read+0xf4>)
    54ee:	47a8      	blx	r5

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    54f0:	2101      	movs	r1, #1
    54f2:	6823      	ldr	r3, [r4, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54f4:	7e1a      	ldrb	r2, [r3, #24]
    54f6:	4211      	tst	r1, r2
    54f8:	d0fc      	beq.n	54f4 <trx_reg_read+0x3c>
    54fa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    54fc:	4211      	tst	r1, r2
    54fe:	d001      	beq.n	5504 <trx_reg_read+0x4c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5500:	464a      	mov	r2, r9
    5502:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5504:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5506:	7e1a      	ldrb	r2, [r3, #24]
    5508:	4211      	tst	r1, r2
    550a:	d0fc      	beq.n	5506 <trx_reg_read+0x4e>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    550c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    550e:	7e1a      	ldrb	r2, [r3, #24]
    5510:	4211      	tst	r1, r2
    5512:	d0fc      	beq.n	550e <trx_reg_read+0x56>
    5514:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5516:	4211      	tst	r1, r2
    5518:	d00a      	beq.n	5530 <trx_reg_read+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    551a:	8b5a      	ldrh	r2, [r3, #26]
    551c:	0752      	lsls	r2, r2, #29
    551e:	d500      	bpl.n	5522 <trx_reg_read+0x6a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5520:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5522:	79a2      	ldrb	r2, [r4, #6]
    5524:	2a01      	cmp	r2, #1
    5526:	d034      	beq.n	5592 <trx_reg_read+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    552a:	4921      	ldr	r1, [pc, #132]	; (55b0 <trx_reg_read+0xf8>)
    552c:	b2d2      	uxtb	r2, r2
    552e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    5530:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5532:	7e1a      	ldrb	r2, [r3, #24]
    5534:	4211      	tst	r1, r2
    5536:	d0fc      	beq.n	5532 <trx_reg_read+0x7a>
    5538:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    553a:	4211      	tst	r1, r2
    553c:	d001      	beq.n	5542 <trx_reg_read+0x8a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    553e:	2200      	movs	r2, #0
    5540:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    5542:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5544:	7e1a      	ldrb	r2, [r3, #24]
    5546:	4211      	tst	r1, r2
    5548:	d0fc      	beq.n	5544 <trx_reg_read+0x8c>
	}
	while (!spi_is_ready_to_read(&master)) {
    554a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    554c:	7e1a      	ldrb	r2, [r3, #24]
    554e:	4211      	tst	r1, r2
    5550:	d0fc      	beq.n	554c <trx_reg_read+0x94>
	if (!spi_is_ready_to_read(module)) {
    5552:	2000      	movs	r0, #0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5554:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5556:	4681      	mov	r9, r0
    5558:	4211      	tst	r1, r2
    555a:	d005      	beq.n	5568 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    555c:	8b5a      	ldrh	r2, [r3, #26]
    555e:	0752      	lsls	r2, r2, #29
    5560:	d415      	bmi.n	558e <trx_reg_read+0xd6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5564:	b2db      	uxtb	r3, r3
    5566:	4699      	mov	r9, r3
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5568:	2200      	movs	r2, #0
    556a:	0031      	movs	r1, r6
    556c:	0020      	movs	r0, r4
    556e:	47a8      	blx	r5
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    5570:	23ff      	movs	r3, #255	; 0xff
    5572:	4642      	mov	r2, r8
    5574:	4213      	tst	r3, r2
    5576:	d004      	beq.n	5582 <trx_reg_read+0xca>
		cpu_irq_enable();
    5578:	3bfe      	subs	r3, #254	; 0xfe
    557a:	703b      	strb	r3, [r7, #0]
    557c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5580:	b662      	cpsie	i
	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
}
    5582:	4648      	mov	r0, r9
    5584:	b003      	add	sp, #12
    5586:	bc0c      	pop	{r2, r3}
    5588:	4690      	mov	r8, r2
    558a:	4699      	mov	r9, r3
    558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    558e:	8359      	strh	r1, [r3, #26]
    5590:	e7e7      	b.n	5562 <trx_reg_read+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5594:	4906      	ldr	r1, [pc, #24]	; (55b0 <trx_reg_read+0xf8>)
    5596:	05d2      	lsls	r2, r2, #23
    5598:	0dd2      	lsrs	r2, r2, #23
    559a:	800a      	strh	r2, [r1, #0]
    559c:	e7c8      	b.n	5530 <trx_reg_read+0x78>
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	20000020 	.word	0x20000020
    55a4:	20000b30 	.word	0x20000b30
    55a8:	20000af4 	.word	0x20000af4
    55ac:	00003e55 	.word	0x00003e55
    55b0:	20000aec 	.word	0x20000aec

000055b4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55b6:	464f      	mov	r7, r9
    55b8:	46d6      	mov	lr, sl
    55ba:	4646      	mov	r6, r8
    55bc:	b5c0      	push	{r6, r7, lr}
    55be:	4689      	mov	r9, r1
    55c0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    55c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    55c6:	425a      	negs	r2, r3
    55c8:	4153      	adcs	r3, r2
    55ca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    55cc:	b672      	cpsid	i
    55ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    55d2:	2300      	movs	r3, #0
    55d4:	4f35      	ldr	r7, [pc, #212]	; (56ac <trx_reg_write+0xf8>)
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    55d6:	4c36      	ldr	r4, [pc, #216]	; (56b0 <trx_reg_write+0xfc>)
    55d8:	703b      	strb	r3, [r7, #0]
	return flags;
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	4e35      	ldr	r6, [pc, #212]	; (56b4 <trx_reg_write+0x100>)
    55de:	4698      	mov	r8, r3
	addr |= WRITE_ACCESS_COMMAND;
    55e0:	23c0      	movs	r3, #192	; 0xc0
    55e2:	4318      	orrs	r0, r3
	spi_select_slave(&master, &slave, true);
    55e4:	0031      	movs	r1, r6
	addr |= WRITE_ACCESS_COMMAND;
    55e6:	4682      	mov	sl, r0
	spi_select_slave(&master, &slave, true);
    55e8:	2201      	movs	r2, #1
    55ea:	0020      	movs	r0, r4
    55ec:	4d32      	ldr	r5, [pc, #200]	; (56b8 <trx_reg_write+0x104>)
    55ee:	47a8      	blx	r5

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    55f0:	2101      	movs	r1, #1
    55f2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    55f4:	7e1a      	ldrb	r2, [r3, #24]
    55f6:	4211      	tst	r1, r2
    55f8:	d0fc      	beq.n	55f4 <trx_reg_write+0x40>
    55fa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    55fc:	4211      	tst	r1, r2
    55fe:	d001      	beq.n	5604 <trx_reg_write+0x50>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5600:	4652      	mov	r2, sl
    5602:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5604:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5606:	7e1a      	ldrb	r2, [r3, #24]
    5608:	4211      	tst	r1, r2
    560a:	d0fc      	beq.n	5606 <trx_reg_write+0x52>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    560c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    560e:	7e1a      	ldrb	r2, [r3, #24]
    5610:	4211      	tst	r1, r2
    5612:	d0fc      	beq.n	560e <trx_reg_write+0x5a>
    5614:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5616:	4211      	tst	r1, r2
    5618:	d00a      	beq.n	5630 <trx_reg_write+0x7c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    561a:	8b5a      	ldrh	r2, [r3, #26]
    561c:	0752      	lsls	r2, r2, #29
    561e:	d500      	bpl.n	5622 <trx_reg_write+0x6e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5620:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5622:	79a2      	ldrb	r2, [r4, #6]
    5624:	2a01      	cmp	r2, #1
    5626:	d03a      	beq.n	569e <trx_reg_write+0xea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    562a:	4924      	ldr	r1, [pc, #144]	; (56bc <trx_reg_write+0x108>)
    562c:	b2d2      	uxtb	r2, r2
    562e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    5630:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5632:	7e1a      	ldrb	r2, [r3, #24]
    5634:	4211      	tst	r1, r2
    5636:	d0fc      	beq.n	5632 <trx_reg_write+0x7e>
    5638:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    563a:	4211      	tst	r1, r2
    563c:	d001      	beq.n	5642 <trx_reg_write+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    563e:	464a      	mov	r2, r9
    5640:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    5642:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5644:	7e1a      	ldrb	r2, [r3, #24]
    5646:	4211      	tst	r1, r2
    5648:	d0fc      	beq.n	5644 <trx_reg_write+0x90>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    564a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    564c:	7e1a      	ldrb	r2, [r3, #24]
    564e:	4211      	tst	r1, r2
    5650:	d0fc      	beq.n	564c <trx_reg_write+0x98>
    5652:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5654:	4211      	tst	r1, r2
    5656:	d00a      	beq.n	566e <trx_reg_write+0xba>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5658:	8b5a      	ldrh	r2, [r3, #26]
    565a:	0752      	lsls	r2, r2, #29
    565c:	d500      	bpl.n	5660 <trx_reg_write+0xac>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    565e:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5660:	79a2      	ldrb	r2, [r4, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5664:	2a01      	cmp	r2, #1
    5666:	d015      	beq.n	5694 <trx_reg_write+0xe0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5668:	4a14      	ldr	r2, [pc, #80]	; (56bc <trx_reg_write+0x108>)
    566a:	b2db      	uxtb	r3, r3
    566c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    566e:	2200      	movs	r2, #0
    5670:	0031      	movs	r1, r6
    5672:	0020      	movs	r0, r4
    5674:	47a8      	blx	r5
	if (cpu_irq_is_enabled_flags(flags))
    5676:	23ff      	movs	r3, #255	; 0xff
    5678:	4642      	mov	r2, r8
    567a:	4213      	tst	r3, r2
    567c:	d004      	beq.n	5688 <trx_reg_write+0xd4>
		cpu_irq_enable();
    567e:	3bfe      	subs	r3, #254	; 0xfe
    5680:	703b      	strb	r3, [r7, #0]
    5682:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5686:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5688:	b002      	add	sp, #8
    568a:	bc1c      	pop	{r2, r3, r4}
    568c:	4690      	mov	r8, r2
    568e:	4699      	mov	r9, r3
    5690:	46a2      	mov	sl, r4
    5692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5694:	05db      	lsls	r3, r3, #23
    5696:	4a09      	ldr	r2, [pc, #36]	; (56bc <trx_reg_write+0x108>)
    5698:	0ddb      	lsrs	r3, r3, #23
    569a:	8013      	strh	r3, [r2, #0]
    569c:	e7e7      	b.n	566e <trx_reg_write+0xba>
    569e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56a0:	4906      	ldr	r1, [pc, #24]	; (56bc <trx_reg_write+0x108>)
    56a2:	05d2      	lsls	r2, r2, #23
    56a4:	0dd2      	lsrs	r2, r2, #23
    56a6:	800a      	strh	r2, [r1, #0]
    56a8:	e7c2      	b.n	5630 <trx_reg_write+0x7c>
    56aa:	46c0      	nop			; (mov r8, r8)
    56ac:	20000020 	.word	0x20000020
    56b0:	20000b30 	.word	0x20000b30
    56b4:	20000af4 	.word	0x20000af4
    56b8:	00003e55 	.word	0x00003e55
    56bc:	20000aec 	.word	0x20000aec

000056c0 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    56c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56c2:	4645      	mov	r5, r8
    56c4:	46de      	mov	lr, fp
    56c6:	4657      	mov	r7, sl
    56c8:	464e      	mov	r6, r9
    56ca:	b5e0      	push	{r5, r6, r7, lr}
    56cc:	0004      	movs	r4, r0
    56ce:	b085      	sub	sp, #20
    56d0:	4688      	mov	r8, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    56d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    56d6:	425a      	negs	r2, r3
    56d8:	4153      	adcs	r3, r2
    56da:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    56dc:	b672      	cpsid	i
    56de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    56e2:	2300      	movs	r3, #0
    56e4:	4a40      	ldr	r2, [pc, #256]	; (57e8 <trx_frame_read+0x128>)
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    56e6:	4d41      	ldr	r5, [pc, #260]	; (57ec <trx_frame_read+0x12c>)
    56e8:	7013      	strb	r3, [r2, #0]
	return flags;
    56ea:	9b03      	ldr	r3, [sp, #12]
    56ec:	4940      	ldr	r1, [pc, #256]	; (57f0 <trx_frame_read+0x130>)
    56ee:	9301      	str	r3, [sp, #4]
    56f0:	4b40      	ldr	r3, [pc, #256]	; (57f4 <trx_frame_read+0x134>)
    56f2:	2201      	movs	r2, #1
    56f4:	0028      	movs	r0, r5
    56f6:	469a      	mov	sl, r3
    56f8:	4798      	blx	r3

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    56fa:	2101      	movs	r1, #1
    56fc:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    56fe:	7e1a      	ldrb	r2, [r3, #24]
    5700:	4211      	tst	r1, r2
    5702:	d0fc      	beq.n	56fe <trx_frame_read+0x3e>
    5704:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5706:	4211      	tst	r1, r2
    5708:	d001      	beq.n	570e <trx_frame_read+0x4e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    570a:	2220      	movs	r2, #32
    570c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    570e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5710:	7e1a      	ldrb	r2, [r3, #24]
    5712:	4211      	tst	r1, r2
    5714:	d0fc      	beq.n	5710 <trx_frame_read+0x50>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5716:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5718:	7e1a      	ldrb	r2, [r3, #24]
    571a:	4211      	tst	r1, r2
    571c:	d0fc      	beq.n	5718 <trx_frame_read+0x58>
    571e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5720:	4211      	tst	r1, r2
    5722:	d00a      	beq.n	573a <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5724:	8b5a      	ldrh	r2, [r3, #26]
    5726:	0752      	lsls	r2, r2, #29
    5728:	d500      	bpl.n	572c <trx_frame_read+0x6c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    572a:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    572c:	79aa      	ldrb	r2, [r5, #6]
    572e:	2a01      	cmp	r2, #1
    5730:	d053      	beq.n	57da <trx_frame_read+0x11a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5734:	4930      	ldr	r1, [pc, #192]	; (57f8 <trx_frame_read+0x138>)
    5736:	b2d2      	uxtb	r2, r2
    5738:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    573a:	4642      	mov	r2, r8
    573c:	4641      	mov	r1, r8
    573e:	3a01      	subs	r2, #1
    5740:	b2d2      	uxtb	r2, r2
    5742:	2900      	cmp	r1, #0
    5744:	d034      	beq.n	57b0 <trx_frame_read+0xf0>
    5746:	3201      	adds	r2, #1
    5748:	4691      	mov	r9, r2
    574a:	2220      	movs	r2, #32
    574c:	4690      	mov	r8, r2
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    574e:	2200      	movs	r2, #0
		while (!spi_is_ready_to_write(&master)) {
    5750:	2101      	movs	r1, #1
    5752:	4693      	mov	fp, r2
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5754:	2702      	movs	r7, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5756:	2004      	movs	r0, #4
    5758:	2604      	movs	r6, #4
    575a:	44a1      	add	r9, r4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    575c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    575e:	4211      	tst	r1, r2
    5760:	d0fc      	beq.n	575c <trx_frame_read+0x9c>
    5762:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5764:	4211      	tst	r1, r2
    5766:	d001      	beq.n	576c <trx_frame_read+0xac>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5768:	465a      	mov	r2, fp
    576a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    576c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    576e:	4217      	tst	r7, r2
    5770:	d0fc      	beq.n	576c <trx_frame_read+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5772:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5774:	4210      	tst	r0, r2
    5776:	d0fc      	beq.n	5772 <trx_frame_read+0xb2>
    5778:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    577a:	4216      	tst	r6, r2
    577c:	d009      	beq.n	5792 <trx_frame_read+0xd2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    577e:	8b5a      	ldrh	r2, [r3, #26]
    5780:	4210      	tst	r0, r2
    5782:	d000      	beq.n	5786 <trx_frame_read+0xc6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5784:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5786:	79aa      	ldrb	r2, [r5, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    578a:	2a01      	cmp	r2, #1
    578c:	d008      	beq.n	57a0 <trx_frame_read+0xe0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    578e:	b2db      	uxtb	r3, r3
    5790:	4698      	mov	r8, r3
		}
		spi_read(&master, &temp);
		*data = temp;
    5792:	4643      	mov	r3, r8
    5794:	7023      	strb	r3, [r4, #0]
		data++;
    5796:	3401      	adds	r4, #1
	while (length--) {
    5798:	454c      	cmp	r4, r9
    579a:	d009      	beq.n	57b0 <trx_frame_read+0xf0>
    579c:	682b      	ldr	r3, [r5, #0]
    579e:	e7dd      	b.n	575c <trx_frame_read+0x9c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    57a0:	05db      	lsls	r3, r3, #23
    57a2:	0ddb      	lsrs	r3, r3, #23
    57a4:	4698      	mov	r8, r3
		*data = temp;
    57a6:	4643      	mov	r3, r8
    57a8:	7023      	strb	r3, [r4, #0]
		data++;
    57aa:	3401      	adds	r4, #1
	while (length--) {
    57ac:	454c      	cmp	r4, r9
    57ae:	d1f5      	bne.n	579c <trx_frame_read+0xdc>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    57b0:	2200      	movs	r2, #0
    57b2:	490f      	ldr	r1, [pc, #60]	; (57f0 <trx_frame_read+0x130>)
    57b4:	0028      	movs	r0, r5
    57b6:	47d0      	blx	sl
	if (cpu_irq_is_enabled_flags(flags))
    57b8:	23ff      	movs	r3, #255	; 0xff
    57ba:	9a01      	ldr	r2, [sp, #4]
    57bc:	4213      	tst	r3, r2
    57be:	d005      	beq.n	57cc <trx_frame_read+0x10c>
		cpu_irq_enable();
    57c0:	2301      	movs	r3, #1
    57c2:	4a09      	ldr	r2, [pc, #36]	; (57e8 <trx_frame_read+0x128>)
    57c4:	7013      	strb	r3, [r2, #0]
    57c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    57ca:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    57cc:	b005      	add	sp, #20
    57ce:	bc3c      	pop	{r2, r3, r4, r5}
    57d0:	4690      	mov	r8, r2
    57d2:	4699      	mov	r9, r3
    57d4:	46a2      	mov	sl, r4
    57d6:	46ab      	mov	fp, r5
    57d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    57dc:	4906      	ldr	r1, [pc, #24]	; (57f8 <trx_frame_read+0x138>)
    57de:	05d2      	lsls	r2, r2, #23
    57e0:	0dd2      	lsrs	r2, r2, #23
    57e2:	800a      	strh	r2, [r1, #0]
    57e4:	e7a9      	b.n	573a <trx_frame_read+0x7a>
    57e6:	46c0      	nop			; (mov r8, r8)
    57e8:	20000020 	.word	0x20000020
    57ec:	20000b30 	.word	0x20000b30
    57f0:	20000af4 	.word	0x20000af4
    57f4:	00003e55 	.word	0x00003e55
    57f8:	20000aec 	.word	0x20000aec

000057fc <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    57fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    57fe:	464e      	mov	r6, r9
    5800:	46de      	mov	lr, fp
    5802:	4657      	mov	r7, sl
    5804:	4645      	mov	r5, r8
    5806:	b5e0      	push	{r5, r6, r7, lr}
    5808:	0004      	movs	r4, r0
    580a:	b085      	sub	sp, #20
    580c:	000e      	movs	r6, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    580e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5812:	425a      	negs	r2, r3
    5814:	4153      	adcs	r3, r2
    5816:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5818:	b672      	cpsid	i
    581a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    581e:	2300      	movs	r3, #0
    5820:	4a40      	ldr	r2, [pc, #256]	; (5924 <trx_frame_write+0x128>)
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5822:	4841      	ldr	r0, [pc, #260]	; (5928 <trx_frame_write+0x12c>)
    5824:	7013      	strb	r3, [r2, #0]
	return flags;
    5826:	9b03      	ldr	r3, [sp, #12]
    5828:	2201      	movs	r2, #1
    582a:	9301      	str	r3, [sp, #4]
    582c:	4b3f      	ldr	r3, [pc, #252]	; (592c <trx_frame_write+0x130>)
    582e:	0019      	movs	r1, r3
    5830:	4698      	mov	r8, r3
    5832:	4b3f      	ldr	r3, [pc, #252]	; (5930 <trx_frame_write+0x134>)
    5834:	4798      	blx	r3

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5836:	2101      	movs	r1, #1
    5838:	4b3b      	ldr	r3, [pc, #236]	; (5928 <trx_frame_write+0x12c>)
    583a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    583c:	7e1a      	ldrb	r2, [r3, #24]
    583e:	4211      	tst	r1, r2
    5840:	d0fc      	beq.n	583c <trx_frame_write+0x40>
    5842:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5844:	4211      	tst	r1, r2
    5846:	d001      	beq.n	584c <trx_frame_write+0x50>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5848:	2260      	movs	r2, #96	; 0x60
    584a:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    584c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    584e:	7e1a      	ldrb	r2, [r3, #24]
    5850:	4211      	tst	r1, r2
    5852:	d0fc      	beq.n	584e <trx_frame_write+0x52>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5854:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5856:	7e1a      	ldrb	r2, [r3, #24]
    5858:	4211      	tst	r1, r2
    585a:	d0fc      	beq.n	5856 <trx_frame_write+0x5a>
    585c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    585e:	4211      	tst	r1, r2
    5860:	d00b      	beq.n	587a <trx_frame_write+0x7e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5862:	8b5a      	ldrh	r2, [r3, #26]
    5864:	0752      	lsls	r2, r2, #29
    5866:	d500      	bpl.n	586a <trx_frame_write+0x6e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5868:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    586a:	4a2f      	ldr	r2, [pc, #188]	; (5928 <trx_frame_write+0x12c>)
    586c:	7992      	ldrb	r2, [r2, #6]
    586e:	2a01      	cmp	r2, #1
    5870:	d051      	beq.n	5916 <trx_frame_write+0x11a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5874:	492f      	ldr	r1, [pc, #188]	; (5934 <trx_frame_write+0x138>)
    5876:	b2d2      	uxtb	r2, r2
    5878:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    587a:	4a2b      	ldr	r2, [pc, #172]	; (5928 <trx_frame_write+0x12c>)
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    587c:	2104      	movs	r1, #4
    587e:	7992      	ldrb	r2, [r2, #6]
    5880:	4689      	mov	r9, r1
    5882:	4692      	mov	sl, r2
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5884:	492b      	ldr	r1, [pc, #172]	; (5934 <trx_frame_write+0x138>)
	while (length--) {
    5886:	3e01      	subs	r6, #1
    5888:	b2f6      	uxtb	r6, r6
    588a:	0020      	movs	r0, r4
		while (!spi_is_ready_to_write(&master)) {
    588c:	2201      	movs	r2, #1
		while (!spi_is_write_complete(&master)) {
    588e:	2502      	movs	r5, #2
		while (!spi_is_ready_to_read(&master)) {
    5890:	2404      	movs	r4, #4
    5892:	468b      	mov	fp, r1
    5894:	46d4      	mov	ip, sl
	while (length--) {
    5896:	2eff      	cmp	r6, #255	; 0xff
    5898:	d021      	beq.n	58de <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    589a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    589c:	420a      	tst	r2, r1
    589e:	d0fc      	beq.n	589a <trx_frame_write+0x9e>
    58a0:	7e19      	ldrb	r1, [r3, #24]
		spi_write(&master, *data++);
    58a2:	7807      	ldrb	r7, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
    58a4:	420a      	tst	r2, r1
    58a6:	d000      	beq.n	58aa <trx_frame_write+0xae>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    58a8:	629f      	str	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    58aa:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    58ac:	420d      	tst	r5, r1
    58ae:	d0fc      	beq.n	58aa <trx_frame_write+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    58b0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    58b2:	420c      	tst	r4, r1
    58b4:	d0fc      	beq.n	58b0 <trx_frame_write+0xb4>
	if (!spi_is_ready_to_read(module)) {
    58b6:	464f      	mov	r7, r9
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    58b8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    58ba:	420f      	tst	r7, r1
    58bc:	d00a      	beq.n	58d4 <trx_frame_write+0xd8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    58be:	8b59      	ldrh	r1, [r3, #26]
    58c0:	420c      	tst	r4, r1
    58c2:	d000      	beq.n	58c6 <trx_frame_write+0xca>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    58c4:	835c      	strh	r4, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    58c6:	4661      	mov	r1, ip
    58c8:	2901      	cmp	r1, #1
    58ca:	d01d      	beq.n	5908 <trx_frame_write+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    58cc:	465f      	mov	r7, fp
    58ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
    58d0:	b2c9      	uxtb	r1, r1
    58d2:	8039      	strh	r1, [r7, #0]
    58d4:	3001      	adds	r0, #1
	while (length--) {
    58d6:	3e01      	subs	r6, #1
    58d8:	b2f6      	uxtb	r6, r6
    58da:	2eff      	cmp	r6, #255	; 0xff
    58dc:	d1dd      	bne.n	589a <trx_frame_write+0x9e>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    58de:	4b14      	ldr	r3, [pc, #80]	; (5930 <trx_frame_write+0x134>)
    58e0:	2200      	movs	r2, #0
    58e2:	4641      	mov	r1, r8
    58e4:	4810      	ldr	r0, [pc, #64]	; (5928 <trx_frame_write+0x12c>)
    58e6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    58e8:	9b01      	ldr	r3, [sp, #4]
    58ea:	421e      	tst	r6, r3
    58ec:	d005      	beq.n	58fa <trx_frame_write+0xfe>
		cpu_irq_enable();
    58ee:	2301      	movs	r3, #1
    58f0:	4a0c      	ldr	r2, [pc, #48]	; (5924 <trx_frame_write+0x128>)
    58f2:	7013      	strb	r3, [r2, #0]
    58f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    58f8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    58fa:	b005      	add	sp, #20
    58fc:	bc3c      	pop	{r2, r3, r4, r5}
    58fe:	4690      	mov	r8, r2
    5900:	4699      	mov	r9, r3
    5902:	46a2      	mov	sl, r4
    5904:	46ab      	mov	fp, r5
    5906:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5908:	6a99      	ldr	r1, [r3, #40]	; 0x28
    590a:	4f0a      	ldr	r7, [pc, #40]	; (5934 <trx_frame_write+0x138>)
    590c:	05c9      	lsls	r1, r1, #23
    590e:	0dc9      	lsrs	r1, r1, #23
    5910:	8039      	strh	r1, [r7, #0]
    5912:	3001      	adds	r0, #1
    5914:	e7df      	b.n	58d6 <trx_frame_write+0xda>
    5916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5918:	4906      	ldr	r1, [pc, #24]	; (5934 <trx_frame_write+0x138>)
    591a:	05d2      	lsls	r2, r2, #23
    591c:	0dd2      	lsrs	r2, r2, #23
    591e:	800a      	strh	r2, [r1, #0]
    5920:	e7ab      	b.n	587a <trx_frame_write+0x7e>
    5922:	46c0      	nop			; (mov r8, r8)
    5924:	20000020 	.word	0x20000020
    5928:	20000b30 	.word	0x20000b30
    592c:	20000af4 	.word	0x20000af4
    5930:	00003e55 	.word	0x00003e55
    5934:	20000aec 	.word	0x20000aec

00005938 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    5938:	b5f0      	push	{r4, r5, r6, r7, lr}
    593a:	464e      	mov	r6, r9
    593c:	4645      	mov	r5, r8
    593e:	46de      	mov	lr, fp
    5940:	4657      	mov	r7, sl
    5942:	b5e0      	push	{r5, r6, r7, lr}
    5944:	000c      	movs	r4, r1
    5946:	b085      	sub	sp, #20
    5948:	0005      	movs	r5, r0
    594a:	0016      	movs	r6, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    594c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5950:	425a      	negs	r2, r3
    5952:	4153      	adcs	r3, r2
    5954:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5956:	b672      	cpsid	i
    5958:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    595c:	2300      	movs	r3, #0
    595e:	4a53      	ldr	r2, [pc, #332]	; (5aac <trx_sram_write+0x174>)
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5960:	4853      	ldr	r0, [pc, #332]	; (5ab0 <trx_sram_write+0x178>)
    5962:	7013      	strb	r3, [r2, #0]
	return flags;
    5964:	9b03      	ldr	r3, [sp, #12]
    5966:	2201      	movs	r2, #1
    5968:	9301      	str	r3, [sp, #4]
    596a:	4b52      	ldr	r3, [pc, #328]	; (5ab4 <trx_sram_write+0x17c>)
    596c:	0019      	movs	r1, r3
    596e:	4698      	mov	r8, r3
    5970:	4b51      	ldr	r3, [pc, #324]	; (5ab8 <trx_sram_write+0x180>)
    5972:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5974:	2101      	movs	r1, #1
    5976:	4b4e      	ldr	r3, [pc, #312]	; (5ab0 <trx_sram_write+0x178>)
    5978:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    597a:	7e1a      	ldrb	r2, [r3, #24]
    597c:	4211      	tst	r1, r2
    597e:	d0fc      	beq.n	597a <trx_sram_write+0x42>
    5980:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5982:	4211      	tst	r1, r2
    5984:	d001      	beq.n	598a <trx_sram_write+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5986:	2240      	movs	r2, #64	; 0x40
    5988:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    598a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    598c:	7e1a      	ldrb	r2, [r3, #24]
    598e:	4211      	tst	r1, r2
    5990:	d0fc      	beq.n	598c <trx_sram_write+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5992:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5994:	7e1a      	ldrb	r2, [r3, #24]
    5996:	4211      	tst	r1, r2
    5998:	d0fc      	beq.n	5994 <trx_sram_write+0x5c>
    599a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    599c:	4211      	tst	r1, r2
    599e:	d00c      	beq.n	59ba <trx_sram_write+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    59a0:	8b5a      	ldrh	r2, [r3, #26]
    59a2:	0752      	lsls	r2, r2, #29
    59a4:	d500      	bpl.n	59a8 <trx_sram_write+0x70>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    59a6:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    59a8:	4a41      	ldr	r2, [pc, #260]	; (5ab0 <trx_sram_write+0x178>)
    59aa:	7992      	ldrb	r2, [r2, #6]
    59ac:	2a01      	cmp	r2, #1
    59ae:	d100      	bne.n	59b2 <trx_sram_write+0x7a>
    59b0:	e076      	b.n	5aa0 <trx_sram_write+0x168>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    59b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59b4:	4941      	ldr	r1, [pc, #260]	; (5abc <trx_sram_write+0x184>)
    59b6:	b2d2      	uxtb	r2, r2
    59b8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    59ba:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    59bc:	7e1a      	ldrb	r2, [r3, #24]
    59be:	4211      	tst	r1, r2
    59c0:	d0fc      	beq.n	59bc <trx_sram_write+0x84>
    59c2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    59c4:	4211      	tst	r1, r2
    59c6:	d000      	beq.n	59ca <trx_sram_write+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    59c8:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    59ca:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    59cc:	7e1a      	ldrb	r2, [r3, #24]
    59ce:	4211      	tst	r1, r2
    59d0:	d0fc      	beq.n	59cc <trx_sram_write+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    59d2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    59d4:	7e1a      	ldrb	r2, [r3, #24]
    59d6:	4211      	tst	r1, r2
    59d8:	d0fc      	beq.n	59d4 <trx_sram_write+0x9c>
    59da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    59dc:	4211      	tst	r1, r2
    59de:	d00b      	beq.n	59f8 <trx_sram_write+0xc0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    59e0:	8b5a      	ldrh	r2, [r3, #26]
    59e2:	0752      	lsls	r2, r2, #29
    59e4:	d500      	bpl.n	59e8 <trx_sram_write+0xb0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    59e6:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    59e8:	4a31      	ldr	r2, [pc, #196]	; (5ab0 <trx_sram_write+0x178>)
    59ea:	7992      	ldrb	r2, [r2, #6]
    59ec:	2a01      	cmp	r2, #1
    59ee:	d051      	beq.n	5a94 <trx_sram_write+0x15c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    59f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59f2:	4932      	ldr	r1, [pc, #200]	; (5abc <trx_sram_write+0x184>)
    59f4:	b2d2      	uxtb	r2, r2
    59f6:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    59f8:	4a2d      	ldr	r2, [pc, #180]	; (5ab0 <trx_sram_write+0x178>)
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    59fa:	3e01      	subs	r6, #1
    59fc:	7992      	ldrb	r2, [r2, #6]
    59fe:	b2f6      	uxtb	r6, r6
    5a00:	4692      	mov	sl, r2
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5a02:	2204      	movs	r2, #4
    5a04:	4691      	mov	r9, r2
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a06:	4a2d      	ldr	r2, [pc, #180]	; (5abc <trx_sram_write+0x184>)
    5a08:	0021      	movs	r1, r4
		while (!spi_is_ready_to_write(&master)) {
    5a0a:	2001      	movs	r0, #1
		while (!spi_is_write_complete(&master)) {
    5a0c:	2502      	movs	r5, #2
		while (!spi_is_ready_to_read(&master)) {
    5a0e:	2404      	movs	r4, #4
    5a10:	4693      	mov	fp, r2
    5a12:	46d4      	mov	ip, sl
	while (length--) {
    5a14:	2eff      	cmp	r6, #255	; 0xff
    5a16:	d021      	beq.n	5a5c <trx_sram_write+0x124>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a18:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5a1a:	4210      	tst	r0, r2
    5a1c:	d0fc      	beq.n	5a18 <trx_sram_write+0xe0>
    5a1e:	7e1a      	ldrb	r2, [r3, #24]
		spi_write(&master, *data++);
    5a20:	780f      	ldrb	r7, [r1, #0]
	if (!spi_is_ready_to_write(module)) {
    5a22:	4210      	tst	r0, r2
    5a24:	d000      	beq.n	5a28 <trx_sram_write+0xf0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a26:	629f      	str	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5a28:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5a2a:	4215      	tst	r5, r2
    5a2c:	d0fc      	beq.n	5a28 <trx_sram_write+0xf0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a2e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5a30:	4214      	tst	r4, r2
    5a32:	d0fc      	beq.n	5a2e <trx_sram_write+0xf6>
	if (!spi_is_ready_to_read(module)) {
    5a34:	464f      	mov	r7, r9
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a36:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5a38:	4217      	tst	r7, r2
    5a3a:	d00a      	beq.n	5a52 <trx_sram_write+0x11a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a3c:	8b5a      	ldrh	r2, [r3, #26]
    5a3e:	4214      	tst	r4, r2
    5a40:	d000      	beq.n	5a44 <trx_sram_write+0x10c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a42:	835c      	strh	r4, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a44:	4662      	mov	r2, ip
    5a46:	2a01      	cmp	r2, #1
    5a48:	d01d      	beq.n	5a86 <trx_sram_write+0x14e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a4a:	465f      	mov	r7, fp
    5a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a4e:	b2d2      	uxtb	r2, r2
    5a50:	803a      	strh	r2, [r7, #0]
    5a52:	3101      	adds	r1, #1
	while (length--) {
    5a54:	3e01      	subs	r6, #1
    5a56:	b2f6      	uxtb	r6, r6
    5a58:	2eff      	cmp	r6, #255	; 0xff
    5a5a:	d1dd      	bne.n	5a18 <trx_sram_write+0xe0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5a5c:	4b16      	ldr	r3, [pc, #88]	; (5ab8 <trx_sram_write+0x180>)
    5a5e:	2200      	movs	r2, #0
    5a60:	4641      	mov	r1, r8
    5a62:	4813      	ldr	r0, [pc, #76]	; (5ab0 <trx_sram_write+0x178>)
    5a64:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5a66:	9b01      	ldr	r3, [sp, #4]
    5a68:	421e      	tst	r6, r3
    5a6a:	d005      	beq.n	5a78 <trx_sram_write+0x140>
		cpu_irq_enable();
    5a6c:	2301      	movs	r3, #1
    5a6e:	4a0f      	ldr	r2, [pc, #60]	; (5aac <trx_sram_write+0x174>)
    5a70:	7013      	strb	r3, [r2, #0]
    5a72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a76:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5a78:	b005      	add	sp, #20
    5a7a:	bc3c      	pop	{r2, r3, r4, r5}
    5a7c:	4690      	mov	r8, r2
    5a7e:	4699      	mov	r9, r3
    5a80:	46a2      	mov	sl, r4
    5a82:	46ab      	mov	fp, r5
    5a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a88:	4f0c      	ldr	r7, [pc, #48]	; (5abc <trx_sram_write+0x184>)
    5a8a:	05d2      	lsls	r2, r2, #23
    5a8c:	0dd2      	lsrs	r2, r2, #23
    5a8e:	803a      	strh	r2, [r7, #0]
    5a90:	3101      	adds	r1, #1
    5a92:	e7df      	b.n	5a54 <trx_sram_write+0x11c>
    5a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a96:	4909      	ldr	r1, [pc, #36]	; (5abc <trx_sram_write+0x184>)
    5a98:	05d2      	lsls	r2, r2, #23
    5a9a:	0dd2      	lsrs	r2, r2, #23
    5a9c:	800a      	strh	r2, [r1, #0]
    5a9e:	e7ab      	b.n	59f8 <trx_sram_write+0xc0>
    5aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5aa2:	4906      	ldr	r1, [pc, #24]	; (5abc <trx_sram_write+0x184>)
    5aa4:	05d2      	lsls	r2, r2, #23
    5aa6:	0dd2      	lsrs	r2, r2, #23
    5aa8:	800a      	strh	r2, [r1, #0]
    5aaa:	e786      	b.n	59ba <trx_sram_write+0x82>
    5aac:	20000020 	.word	0x20000020
    5ab0:	20000b30 	.word	0x20000b30
    5ab4:	20000af4 	.word	0x20000af4
    5ab8:	00003e55 	.word	0x00003e55
    5abc:	20000aec 	.word	0x20000aec

00005ac0 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    5ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ac2:	46de      	mov	lr, fp
    5ac4:	464e      	mov	r6, r9
    5ac6:	4645      	mov	r5, r8
    5ac8:	4657      	mov	r7, sl
    5aca:	b5e0      	push	{r5, r6, r7, lr}
	delay_us(1); /* wap_rf4ce */
    5acc:	4b5a      	ldr	r3, [pc, #360]	; (5c38 <trx_sram_read+0x178>)
{
    5ace:	b085      	sub	sp, #20
    5ad0:	0006      	movs	r6, r0
	delay_us(1); /* wap_rf4ce */
    5ad2:	2001      	movs	r0, #1
{
    5ad4:	000c      	movs	r4, r1
    5ad6:	4690      	mov	r8, r2
	delay_us(1); /* wap_rf4ce */
    5ad8:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5ada:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5ade:	425a      	negs	r2, r3
    5ae0:	4153      	adcs	r3, r2
    5ae2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    5ae4:	b672      	cpsid	i
    5ae6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5aea:	2300      	movs	r3, #0
    5aec:	4a53      	ldr	r2, [pc, #332]	; (5c3c <trx_sram_read+0x17c>)
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5aee:	4d54      	ldr	r5, [pc, #336]	; (5c40 <trx_sram_read+0x180>)
    5af0:	7013      	strb	r3, [r2, #0]
	return flags;
    5af2:	9b03      	ldr	r3, [sp, #12]
    5af4:	4953      	ldr	r1, [pc, #332]	; (5c44 <trx_sram_read+0x184>)
    5af6:	9301      	str	r3, [sp, #4]
    5af8:	4b53      	ldr	r3, [pc, #332]	; (5c48 <trx_sram_read+0x188>)
    5afa:	2201      	movs	r2, #1
    5afc:	0028      	movs	r0, r5
    5afe:	469a      	mov	sl, r3
    5b00:	4798      	blx	r3

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5b02:	2101      	movs	r1, #1
    5b04:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b06:	7e1a      	ldrb	r2, [r3, #24]
    5b08:	4211      	tst	r1, r2
    5b0a:	d0fc      	beq.n	5b06 <trx_sram_read+0x46>
    5b0c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5b0e:	4211      	tst	r1, r2
    5b10:	d001      	beq.n	5b16 <trx_sram_read+0x56>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b12:	2200      	movs	r2, #0
    5b14:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5b16:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5b18:	7e1a      	ldrb	r2, [r3, #24]
    5b1a:	4211      	tst	r1, r2
    5b1c:	d0fc      	beq.n	5b18 <trx_sram_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5b1e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b20:	7e1a      	ldrb	r2, [r3, #24]
    5b22:	4211      	tst	r1, r2
    5b24:	d0fc      	beq.n	5b20 <trx_sram_read+0x60>
    5b26:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5b28:	4211      	tst	r1, r2
    5b2a:	d00b      	beq.n	5b44 <trx_sram_read+0x84>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b2c:	8b5a      	ldrh	r2, [r3, #26]
    5b2e:	0752      	lsls	r2, r2, #29
    5b30:	d500      	bpl.n	5b34 <trx_sram_read+0x74>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b32:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b34:	79aa      	ldrb	r2, [r5, #6]
    5b36:	2a01      	cmp	r2, #1
    5b38:	d100      	bne.n	5b3c <trx_sram_read+0x7c>
    5b3a:	e076      	b.n	5c2a <trx_sram_read+0x16a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b3e:	4943      	ldr	r1, [pc, #268]	; (5c4c <trx_sram_read+0x18c>)
    5b40:	b2d2      	uxtb	r2, r2
    5b42:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    5b44:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b46:	7e1a      	ldrb	r2, [r3, #24]
    5b48:	4211      	tst	r1, r2
    5b4a:	d0fc      	beq.n	5b46 <trx_sram_read+0x86>
    5b4c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5b4e:	4211      	tst	r1, r2
    5b50:	d000      	beq.n	5b54 <trx_sram_read+0x94>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b52:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5b54:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5b56:	7e1a      	ldrb	r2, [r3, #24]
    5b58:	4211      	tst	r1, r2
    5b5a:	d0fc      	beq.n	5b56 <trx_sram_read+0x96>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5b5c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5b5e:	7e1a      	ldrb	r2, [r3, #24]
    5b60:	4211      	tst	r1, r2
    5b62:	d0fc      	beq.n	5b5e <trx_sram_read+0x9e>
    5b64:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5b66:	4211      	tst	r1, r2
    5b68:	d00a      	beq.n	5b80 <trx_sram_read+0xc0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5b6a:	8b5a      	ldrh	r2, [r3, #26]
    5b6c:	0752      	lsls	r2, r2, #29
    5b6e:	d500      	bpl.n	5b72 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b70:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b72:	79aa      	ldrb	r2, [r5, #6]
    5b74:	2a01      	cmp	r2, #1
    5b76:	d052      	beq.n	5c1e <trx_sram_read+0x15e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b7a:	4934      	ldr	r1, [pc, #208]	; (5c4c <trx_sram_read+0x18c>)
    5b7c:	b2d2      	uxtb	r2, r2
    5b7e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    5b80:	4642      	mov	r2, r8
    5b82:	4641      	mov	r1, r8
    5b84:	3a01      	subs	r2, #1
    5b86:	b2d2      	uxtb	r2, r2
    5b88:	2900      	cmp	r1, #0
    5b8a:	d033      	beq.n	5bf4 <trx_sram_read+0x134>
    5b8c:	3201      	adds	r2, #1
    5b8e:	4691      	mov	r9, r2
    5b90:	2200      	movs	r2, #0
		while (!spi_is_ready_to_write(&master)) {
    5b92:	2101      	movs	r1, #1
	while (length--) {
    5b94:	4690      	mov	r8, r2
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b96:	4693      	mov	fp, r2
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5b98:	2702      	movs	r7, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5b9a:	2004      	movs	r0, #4
    5b9c:	2604      	movs	r6, #4
    5b9e:	44a1      	add	r9, r4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ba0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5ba2:	4211      	tst	r1, r2
    5ba4:	d0fc      	beq.n	5ba0 <trx_sram_read+0xe0>
    5ba6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5ba8:	4211      	tst	r1, r2
    5baa:	d001      	beq.n	5bb0 <trx_sram_read+0xf0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5bac:	465a      	mov	r2, fp
    5bae:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5bb0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5bb2:	4217      	tst	r7, r2
    5bb4:	d0fc      	beq.n	5bb0 <trx_sram_read+0xf0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5bb6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5bb8:	4210      	tst	r0, r2
    5bba:	d0fc      	beq.n	5bb6 <trx_sram_read+0xf6>
    5bbc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5bbe:	4216      	tst	r6, r2
    5bc0:	d009      	beq.n	5bd6 <trx_sram_read+0x116>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5bc2:	8b5a      	ldrh	r2, [r3, #26]
    5bc4:	4210      	tst	r0, r2
    5bc6:	d000      	beq.n	5bca <trx_sram_read+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5bc8:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5bca:	79aa      	ldrb	r2, [r5, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5bce:	2a01      	cmp	r2, #1
    5bd0:	d008      	beq.n	5be4 <trx_sram_read+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5bd2:	b2db      	uxtb	r3, r3
    5bd4:	4698      	mov	r8, r3
		}
		spi_read(&master, &temp);
		*data = temp;
    5bd6:	4643      	mov	r3, r8
    5bd8:	7023      	strb	r3, [r4, #0]
		data++;
    5bda:	3401      	adds	r4, #1
	while (length--) {
    5bdc:	454c      	cmp	r4, r9
    5bde:	d009      	beq.n	5bf4 <trx_sram_read+0x134>
    5be0:	682b      	ldr	r3, [r5, #0]
    5be2:	e7dd      	b.n	5ba0 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5be4:	05db      	lsls	r3, r3, #23
    5be6:	0ddb      	lsrs	r3, r3, #23
    5be8:	4698      	mov	r8, r3
		*data = temp;
    5bea:	4643      	mov	r3, r8
    5bec:	7023      	strb	r3, [r4, #0]
		data++;
    5bee:	3401      	adds	r4, #1
	while (length--) {
    5bf0:	454c      	cmp	r4, r9
    5bf2:	d1f5      	bne.n	5be0 <trx_sram_read+0x120>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5bf4:	2200      	movs	r2, #0
    5bf6:	4913      	ldr	r1, [pc, #76]	; (5c44 <trx_sram_read+0x184>)
    5bf8:	0028      	movs	r0, r5
    5bfa:	47d0      	blx	sl
	if (cpu_irq_is_enabled_flags(flags))
    5bfc:	23ff      	movs	r3, #255	; 0xff
    5bfe:	9a01      	ldr	r2, [sp, #4]
    5c00:	4213      	tst	r3, r2
    5c02:	d005      	beq.n	5c10 <trx_sram_read+0x150>
		cpu_irq_enable();
    5c04:	2301      	movs	r3, #1
    5c06:	4a0d      	ldr	r2, [pc, #52]	; (5c3c <trx_sram_read+0x17c>)
    5c08:	7013      	strb	r3, [r2, #0]
    5c0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5c0e:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5c10:	b005      	add	sp, #20
    5c12:	bc3c      	pop	{r2, r3, r4, r5}
    5c14:	4690      	mov	r8, r2
    5c16:	4699      	mov	r9, r3
    5c18:	46a2      	mov	sl, r4
    5c1a:	46ab      	mov	fp, r5
    5c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c20:	490a      	ldr	r1, [pc, #40]	; (5c4c <trx_sram_read+0x18c>)
    5c22:	05d2      	lsls	r2, r2, #23
    5c24:	0dd2      	lsrs	r2, r2, #23
    5c26:	800a      	strh	r2, [r1, #0]
    5c28:	e7aa      	b.n	5b80 <trx_sram_read+0xc0>
    5c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c2c:	4907      	ldr	r1, [pc, #28]	; (5c4c <trx_sram_read+0x18c>)
    5c2e:	05d2      	lsls	r2, r2, #23
    5c30:	0dd2      	lsrs	r2, r2, #23
    5c32:	800a      	strh	r2, [r1, #0]
    5c34:	e786      	b.n	5b44 <trx_sram_read+0x84>
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	00003185 	.word	0x00003185
    5c3c:	20000020 	.word	0x20000020
    5c40:	20000b30 	.word	0x20000b30
    5c44:	20000af4 	.word	0x20000af4
    5c48:	00003e55 	.word	0x00003e55
    5c4c:	20000aec 	.word	0x20000aec

00005c50 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    5c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c52:	46de      	mov	lr, fp
    5c54:	464e      	mov	r6, r9
    5c56:	4657      	mov	r7, sl
    5c58:	4645      	mov	r5, r8
    5c5a:	b5e0      	push	{r5, r6, r7, lr}
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    5c5c:	4b7c      	ldr	r3, [pc, #496]	; (5e50 <trx_aes_wrrd+0x200>)
{
    5c5e:	b083      	sub	sp, #12
    5c60:	0006      	movs	r6, r0
	delay_us(1); /* wap_rf4ce */
    5c62:	2001      	movs	r0, #1
{
    5c64:	4691      	mov	r9, r2
    5c66:	9101      	str	r1, [sp, #4]
	delay_us(1); /* wap_rf4ce */
    5c68:	4798      	blx	r3

	ENTER_TRX_REGION();
    5c6a:	2100      	movs	r1, #0
    5c6c:	4b79      	ldr	r3, [pc, #484]	; (5e54 <trx_aes_wrrd+0x204>)
    5c6e:	2000      	movs	r0, #0
    5c70:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5c72:	4b79      	ldr	r3, [pc, #484]	; (5e58 <trx_aes_wrrd+0x208>)
    5c74:	4c79      	ldr	r4, [pc, #484]	; (5e5c <trx_aes_wrrd+0x20c>)
    5c76:	0019      	movs	r1, r3
    5c78:	469a      	mov	sl, r3
    5c7a:	4b79      	ldr	r3, [pc, #484]	; (5e60 <trx_aes_wrrd+0x210>)
    5c7c:	2201      	movs	r2, #1
    5c7e:	0020      	movs	r0, r4
    5c80:	4698      	mov	r8, r3
    5c82:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    5c84:	2101      	movs	r1, #1
    5c86:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c88:	7e1a      	ldrb	r2, [r3, #24]
    5c8a:	4211      	tst	r1, r2
    5c8c:	d0fc      	beq.n	5c88 <trx_aes_wrrd+0x38>
    5c8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5c90:	4211      	tst	r1, r2
    5c92:	d001      	beq.n	5c98 <trx_aes_wrrd+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c94:	2240      	movs	r2, #64	; 0x40
    5c96:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5c98:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5c9a:	7e1a      	ldrb	r2, [r3, #24]
    5c9c:	4211      	tst	r1, r2
    5c9e:	d0fc      	beq.n	5c9a <trx_aes_wrrd+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5ca0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ca2:	7e1a      	ldrb	r2, [r3, #24]
    5ca4:	4211      	tst	r1, r2
    5ca6:	d0fc      	beq.n	5ca2 <trx_aes_wrrd+0x52>
    5ca8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5caa:	4211      	tst	r1, r2
    5cac:	d00b      	beq.n	5cc6 <trx_aes_wrrd+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5cae:	8b5a      	ldrh	r2, [r3, #26]
    5cb0:	0752      	lsls	r2, r2, #29
    5cb2:	d500      	bpl.n	5cb6 <trx_aes_wrrd+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5cb4:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5cb6:	79a2      	ldrb	r2, [r4, #6]
    5cb8:	2a01      	cmp	r2, #1
    5cba:	d100      	bne.n	5cbe <trx_aes_wrrd+0x6e>
    5cbc:	e0b7      	b.n	5e2e <trx_aes_wrrd+0x1de>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cc0:	4968      	ldr	r1, [pc, #416]	; (5e64 <trx_aes_wrrd+0x214>)
    5cc2:	b2d2      	uxtb	r2, r2
    5cc4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    5cc6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5cc8:	7e1a      	ldrb	r2, [r3, #24]
    5cca:	4211      	tst	r1, r2
    5ccc:	d0fc      	beq.n	5cc8 <trx_aes_wrrd+0x78>
    5cce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5cd0:	4211      	tst	r1, r2
    5cd2:	d000      	beq.n	5cd6 <trx_aes_wrrd+0x86>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5cd4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5cd6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5cd8:	7e1a      	ldrb	r2, [r3, #24]
    5cda:	4211      	tst	r1, r2
    5cdc:	d0fc      	beq.n	5cd8 <trx_aes_wrrd+0x88>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5cde:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5ce0:	7e1a      	ldrb	r2, [r3, #24]
    5ce2:	4211      	tst	r1, r2
    5ce4:	d0fc      	beq.n	5ce0 <trx_aes_wrrd+0x90>
    5ce6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5ce8:	4211      	tst	r1, r2
    5cea:	d00b      	beq.n	5d04 <trx_aes_wrrd+0xb4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5cec:	8b5a      	ldrh	r2, [r3, #26]
    5cee:	0752      	lsls	r2, r2, #29
    5cf0:	d500      	bpl.n	5cf4 <trx_aes_wrrd+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5cf2:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5cf4:	79a2      	ldrb	r2, [r4, #6]
    5cf6:	2a01      	cmp	r2, #1
    5cf8:	d100      	bne.n	5cfc <trx_aes_wrrd+0xac>
    5cfa:	e092      	b.n	5e22 <trx_aes_wrrd+0x1d2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cfe:	4959      	ldr	r1, [pc, #356]	; (5e64 <trx_aes_wrrd+0x214>)
    5d00:	b2d2      	uxtb	r2, r2
    5d02:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    5d04:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5d06:	7e1a      	ldrb	r2, [r3, #24]
    5d08:	4211      	tst	r1, r2
    5d0a:	d0fc      	beq.n	5d06 <trx_aes_wrrd+0xb6>
	}
	spi_write(&master, *idata++);
    5d0c:	9a01      	ldr	r2, [sp, #4]
    5d0e:	7810      	ldrb	r0, [r2, #0]
    5d10:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5d12:	4211      	tst	r1, r2
    5d14:	d000      	beq.n	5d18 <trx_aes_wrrd+0xc8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d16:	6298      	str	r0, [r3, #40]	; 0x28
	while (!spi_is_write_complete(&master)) {
    5d18:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d1a:	7e1a      	ldrb	r2, [r3, #24]
    5d1c:	4211      	tst	r1, r2
    5d1e:	d0fc      	beq.n	5d1a <trx_aes_wrrd+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5d20:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d22:	7e1a      	ldrb	r2, [r3, #24]
    5d24:	4211      	tst	r1, r2
    5d26:	d0fc      	beq.n	5d22 <trx_aes_wrrd+0xd2>
    5d28:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5d2a:	4211      	tst	r1, r2
    5d2c:	d00b      	beq.n	5d46 <trx_aes_wrrd+0xf6>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d2e:	8b5a      	ldrh	r2, [r3, #26]
    5d30:	0752      	lsls	r2, r2, #29
    5d32:	d500      	bpl.n	5d36 <trx_aes_wrrd+0xe6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5d34:	8359      	strh	r1, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d36:	79a2      	ldrb	r2, [r4, #6]
    5d38:	2a01      	cmp	r2, #1
    5d3a:	d100      	bne.n	5d3e <trx_aes_wrrd+0xee>
    5d3c:	e07d      	b.n	5e3a <trx_aes_wrrd+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d40:	4948      	ldr	r1, [pc, #288]	; (5e64 <trx_aes_wrrd+0x214>)
    5d42:	b2d2      	uxtb	r2, r2
    5d44:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5d46:	464a      	mov	r2, r9
    5d48:	2a00      	cmp	r2, #0
    5d4a:	d100      	bne.n	5d4e <trx_aes_wrrd+0xfe>
    5d4c:	e07e      	b.n	5e4c <trx_aes_wrrd+0x1fc>
    5d4e:	9901      	ldr	r1, [sp, #4]
    5d50:	3a01      	subs	r2, #1
    5d52:	468c      	mov	ip, r1
    5d54:	b2d2      	uxtb	r2, r2
    5d56:	3201      	adds	r2, #1
    5d58:	4494      	add	ip, r2
    5d5a:	4662      	mov	r2, ip
    5d5c:	9201      	str	r2, [sp, #4]
    5d5e:	2200      	movs	r2, #0
    5d60:	4691      	mov	r9, r2
		while (!spi_is_ready_to_write(&master)) {
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
		}
		while (!spi_is_ready_to_read(&master)) {
    5d62:	3204      	adds	r2, #4
    5d64:	000e      	movs	r6, r1
		while (!spi_is_write_complete(&master)) {
    5d66:	2702      	movs	r7, #2
		while (!spi_is_ready_to_write(&master)) {
    5d68:	2101      	movs	r1, #1
		while (!spi_is_ready_to_read(&master)) {
    5d6a:	2004      	movs	r0, #4
    5d6c:	4694      	mov	ip, r2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5d6e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5d70:	4211      	tst	r1, r2
    5d72:	d0fc      	beq.n	5d6e <trx_aes_wrrd+0x11e>
		spi_write(&master, *idata++);
    5d74:	7872      	ldrb	r2, [r6, #1]
    5d76:	4693      	mov	fp, r2
    5d78:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5d7a:	4211      	tst	r1, r2
    5d7c:	d001      	beq.n	5d82 <trx_aes_wrrd+0x132>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d7e:	465a      	mov	r2, fp
    5d80:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d82:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5d84:	4217      	tst	r7, r2
    5d86:	d0fc      	beq.n	5d82 <trx_aes_wrrd+0x132>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d88:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5d8a:	4210      	tst	r0, r2
    5d8c:	d0fc      	beq.n	5d88 <trx_aes_wrrd+0x138>
	if (!spi_is_ready_to_read(module)) {
    5d8e:	4665      	mov	r5, ip
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d90:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5d92:	4215      	tst	r5, r2
    5d94:	d009      	beq.n	5daa <trx_aes_wrrd+0x15a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d96:	8b5a      	ldrh	r2, [r3, #26]
    5d98:	4210      	tst	r0, r2
    5d9a:	d000      	beq.n	5d9e <trx_aes_wrrd+0x14e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5d9c:	8358      	strh	r0, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d9e:	79a2      	ldrb	r2, [r4, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5da2:	2a01      	cmp	r2, #1
    5da4:	d00c      	beq.n	5dc0 <trx_aes_wrrd+0x170>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5da6:	b2db      	uxtb	r3, r3
    5da8:	4699      	mov	r9, r3
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    5daa:	464b      	mov	r3, r9
    5dac:	466a      	mov	r2, sp
    5dae:	70d3      	strb	r3, [r2, #3]
    5db0:	78d2      	ldrb	r2, [r2, #3]
	while (length > 0) {
    5db2:	9b01      	ldr	r3, [sp, #4]
		*odata++ = (uint8_t)odata_var;
    5db4:	7032      	strb	r2, [r6, #0]
    5db6:	3601      	adds	r6, #1
	while (length > 0) {
    5db8:	42b3      	cmp	r3, r6
    5dba:	d005      	beq.n	5dc8 <trx_aes_wrrd+0x178>
    5dbc:	6823      	ldr	r3, [r4, #0]
    5dbe:	e7d6      	b.n	5d6e <trx_aes_wrrd+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5dc0:	05db      	lsls	r3, r3, #23
    5dc2:	0ddb      	lsrs	r3, r3, #23
    5dc4:	4699      	mov	r9, r3
    5dc6:	e7f0      	b.n	5daa <trx_aes_wrrd+0x15a>
    5dc8:	6823      	ldr	r3, [r4, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5dca:	2001      	movs	r0, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5dcc:	7e19      	ldrb	r1, [r3, #24]
    5dce:	4208      	tst	r0, r1
    5dd0:	d0fc      	beq.n	5dcc <trx_aes_wrrd+0x17c>
    5dd2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5dd4:	4208      	tst	r0, r1
    5dd6:	d001      	beq.n	5ddc <trx_aes_wrrd+0x18c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5dd8:	2100      	movs	r1, #0
    5dda:	6299      	str	r1, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    5ddc:	2002      	movs	r0, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5dde:	7e19      	ldrb	r1, [r3, #24]
    5de0:	4208      	tst	r0, r1
    5de2:	d0fc      	beq.n	5dde <trx_aes_wrrd+0x18e>
	}
	while (!spi_is_ready_to_read(&master)) {
    5de4:	2004      	movs	r0, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5de6:	7e19      	ldrb	r1, [r3, #24]
    5de8:	4208      	tst	r0, r1
    5dea:	d0fc      	beq.n	5de6 <trx_aes_wrrd+0x196>
    5dec:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5dee:	4208      	tst	r0, r1
    5df0:	d004      	beq.n	5dfc <trx_aes_wrrd+0x1ac>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5df2:	8b5a      	ldrh	r2, [r3, #26]
    5df4:	0752      	lsls	r2, r2, #29
    5df6:	d412      	bmi.n	5e1e <trx_aes_wrrd+0x1ce>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5dfa:	b2d2      	uxtb	r2, r2
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    5dfc:	9b01      	ldr	r3, [sp, #4]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5dfe:	4651      	mov	r1, sl
	*odata = (uint8_t)odata_var;
    5e00:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&master, &slave, false);
    5e02:	0020      	movs	r0, r4
    5e04:	2200      	movs	r2, #0
    5e06:	47c0      	blx	r8
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    5e08:	2100      	movs	r1, #0
    5e0a:	4b17      	ldr	r3, [pc, #92]	; (5e68 <trx_aes_wrrd+0x218>)
    5e0c:	2000      	movs	r0, #0
    5e0e:	4798      	blx	r3
}
    5e10:	b003      	add	sp, #12
    5e12:	bc3c      	pop	{r2, r3, r4, r5}
    5e14:	4690      	mov	r8, r2
    5e16:	4699      	mov	r9, r3
    5e18:	46a2      	mov	sl, r4
    5e1a:	46ab      	mov	fp, r5
    5e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5e1e:	8358      	strh	r0, [r3, #26]
    5e20:	e7ea      	b.n	5df8 <trx_aes_wrrd+0x1a8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5e24:	490f      	ldr	r1, [pc, #60]	; (5e64 <trx_aes_wrrd+0x214>)
    5e26:	05d2      	lsls	r2, r2, #23
    5e28:	0dd2      	lsrs	r2, r2, #23
    5e2a:	800a      	strh	r2, [r1, #0]
    5e2c:	e76a      	b.n	5d04 <trx_aes_wrrd+0xb4>
    5e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5e30:	490c      	ldr	r1, [pc, #48]	; (5e64 <trx_aes_wrrd+0x214>)
    5e32:	05d2      	lsls	r2, r2, #23
    5e34:	0dd2      	lsrs	r2, r2, #23
    5e36:	800a      	strh	r2, [r1, #0]
    5e38:	e745      	b.n	5cc6 <trx_aes_wrrd+0x76>
    5e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5e3c:	4909      	ldr	r1, [pc, #36]	; (5e64 <trx_aes_wrrd+0x214>)
    5e3e:	05d2      	lsls	r2, r2, #23
    5e40:	0dd2      	lsrs	r2, r2, #23
    5e42:	800a      	strh	r2, [r1, #0]
	while (length > 0) {
    5e44:	464a      	mov	r2, r9
    5e46:	2a00      	cmp	r2, #0
    5e48:	d000      	beq.n	5e4c <trx_aes_wrrd+0x1fc>
    5e4a:	e780      	b.n	5d4e <trx_aes_wrrd+0xfe>
    5e4c:	2200      	movs	r2, #0
    5e4e:	e7bc      	b.n	5dca <trx_aes_wrrd+0x17a>
    5e50:	00003185 	.word	0x00003185
    5e54:	00003381 	.word	0x00003381
    5e58:	20000af4 	.word	0x20000af4
    5e5c:	20000b30 	.word	0x20000b30
    5e60:	00003e55 	.word	0x00003e55
    5e64:	20000aec 	.word	0x20000aec
    5e68:	0000335d 	.word	0x0000335d

00005e6c <watchdog_early_warning_callback>:
		port_base->OUTCLR.reg = pin_mask;
    5e6c:	2280      	movs	r2, #128	; 0x80
    5e6e:	4b02      	ldr	r3, [pc, #8]	; (5e78 <watchdog_early_warning_callback+0xc>)
    5e70:	0312      	lsls	r2, r2, #12
    5e72:	615a      	str	r2, [r3, #20]
	// Watch Dog Timer Support
	//! [setup]
	static void watchdog_early_warning_callback(void)
	{
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
	}
    5e74:	4770      	bx	lr
    5e76:	46c0      	nop			; (mov r8, r8)
    5e78:	40002800 	.word	0x40002800

00005e7c <main>:
		LED_Toggle(val);
		delay_ms(100);
	}
}
int main(void)
{	
    5e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7e:	46de      	mov	lr, fp
    5e80:	4657      	mov	r7, sl
    5e82:	464e      	mov	r6, r9
    5e84:	4645      	mov	r5, r8
    5e86:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i , TxCount = 0 , button_press;
	uint8_t connection_index = 0xFF, TxSynCount2 = 0;
	MIWI_TICK t1 , t2;
	// Hardware Init
	system_init();
    5e88:	4b65      	ldr	r3, [pc, #404]	; (6020 <main+0x1a4>)
{	
    5e8a:	b085      	sub	sp, #20
	system_init();
    5e8c:	4798      	blx	r3
	delay_init();
    5e8e:	4b65      	ldr	r3, [pc, #404]	; (6024 <main+0x1a8>)
    5e90:	4798      	blx	r3
	sio2host_init();
    5e92:	4b65      	ldr	r3, [pc, #404]	; (6028 <main+0x1ac>)
    5e94:	4798      	blx	r3
	configure_tc();
    5e96:	4b65      	ldr	r3, [pc, #404]	; (602c <main+0x1b0>)
    5e98:	4798      	blx	r3
	rtc_init();
    5e9a:	4b65      	ldr	r3, [pc, #404]	; (6030 <main+0x1b4>)
    5e9c:	4798      	blx	r3
	// Function MiApp_ProtocolInit initialize the protocol stack. The
	// only input parameter indicates if previous network configuration
	// should be restored. In this simple example, we assume that the
	// network starts from scratch.
	/*******************************************************************/
	MiApp_ProtocolInit(false);
    5e9e:	4b65      	ldr	r3, [pc, #404]	; (6034 <main+0x1b8>)
    5ea0:	2000      	movs	r0, #0
    5ea2:	4798      	blx	r3
	// Set the Channel 
	MiApp_SetChannel(APP_CHANNEL_SEL);
    5ea4:	4b64      	ldr	r3, [pc, #400]	; (6038 <main+0x1bc>)
    5ea6:	2005      	movs	r0, #5
    5ea8:	4798      	blx	r3
	//  ENABLE_PREV_CONN:   Only allow connection already exists in
	//                      connection table
	//  ENABL_ACTIVE_SCAN_RSP:  Allow response to Active scan
	//  DISABLE_ALL_CONN:   Disable all connections.
	/*******************************************************************/
	MiApp_ConnectionMode(ENABLE_ALL_CONN);
    5eaa:	2000      	movs	r0, #0
    5eac:	4b63      	ldr	r3, [pc, #396]	; (603c <main+0x1c0>)
    5eae:	4798      	blx	r3
	// Enable Transceiver Interrupt 
	ENABLE_TRX_IRQ();
    5eb0:	2100      	movs	r1, #0
    5eb2:	4b63      	ldr	r3, [pc, #396]	; (6040 <main+0x1c4>)
    5eb4:	2000      	movs	r0, #0
    5eb6:	4798      	blx	r3
	// Enable All cpu interrupts 
	cpu_irq_enable();
    5eb8:	2201      	movs	r2, #1
    5eba:	4b62      	ldr	r3, [pc, #392]	; (6044 <main+0x1c8>)
    5ebc:	701a      	strb	r2, [r3, #0]
    5ebe:	f3bf 8f5f 	dmb	sy
    5ec2:	b662      	cpsie	i
	printf("\033[2J\r\n ");
    5ec4:	4b60      	ldr	r3, [pc, #384]	; (6048 <main+0x1cc>)
    5ec6:	4861      	ldr	r0, [pc, #388]	; (604c <main+0x1d0>)
    5ec8:	4699      	mov	r9, r3
    5eca:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    5ecc:	4b60      	ldr	r3, [pc, #384]	; (6050 <main+0x1d4>)
	printf("\r\nLast reset cause: ");
    5ece:	4861      	ldr	r0, [pc, #388]	; (6054 <main+0x1d8>)
    5ed0:	781c      	ldrb	r4, [r3, #0]
    5ed2:	b2e4      	uxtb	r4, r4
    5ed4:	47c8      	blx	r9
	if(rcause & (1 << 6)) {
    5ed6:	0663      	lsls	r3, r4, #25
    5ed8:	d500      	bpl.n	5edc <main+0x60>
    5eda:	e09d      	b.n	6018 <main+0x19c>
    5edc:	4f5e      	ldr	r7, [pc, #376]	; (6058 <main+0x1dc>)
	if(rcause & (1 << 5)) {
    5ede:	06a3      	lsls	r3, r4, #26
    5ee0:	d500      	bpl.n	5ee4 <main+0x68>
    5ee2:	e096      	b.n	6012 <main+0x196>
	if(rcause & (1 << 4)) {
    5ee4:	06e3      	lsls	r3, r4, #27
    5ee6:	d500      	bpl.n	5eea <main+0x6e>
    5ee8:	e090      	b.n	600c <main+0x190>
	if(rcause & (1 << 2)) {
    5eea:	0763      	lsls	r3, r4, #29
    5eec:	d500      	bpl.n	5ef0 <main+0x74>
    5eee:	e08a      	b.n	6006 <main+0x18a>
	if(rcause & (1 << 1)) {
    5ef0:	07a3      	lsls	r3, r4, #30
    5ef2:	d500      	bpl.n	5ef6 <main+0x7a>
    5ef4:	e084      	b.n	6000 <main+0x184>
	if(rcause & (1 << 0)) {
    5ef6:	07e3      	lsls	r3, r4, #31
    5ef8:	d47f      	bmi.n	5ffa <main+0x17e>
    5efa:	4b58      	ldr	r3, [pc, #352]	; (605c <main+0x1e0>)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5efc:	4d58      	ldr	r5, [pc, #352]	; (6060 <main+0x1e4>)
    5efe:	469a      	mov	sl, r3
    5f00:	4b58      	ldr	r3, [pc, #352]	; (6064 <main+0x1e8>)
    5f02:	469b      	mov	fp, r3
    5f04:	2380      	movs	r3, #128	; 0x80
    5f06:	031b      	lsls	r3, r3, #12
    5f08:	4698      	mov	r8, r3
    5f0a:	001e      	movs	r6, r3
{	
    5f0c:	240a      	movs	r4, #10
    5f0e:	3c01      	subs	r4, #1
    5f10:	61ee      	str	r6, [r5, #28]
		delay_ms(100);
    5f12:	2064      	movs	r0, #100	; 0x64
    5f14:	b2e4      	uxtb	r4, r4
    5f16:	47d0      	blx	sl
	while(timer--)
    5f18:	2c00      	cmp	r4, #0
    5f1a:	d1f8      	bne.n	5f0e <main+0x92>
	print_reset_causes();
	while(connection_index == 0xFF)
	{
		toggleLED(LED0);
		connection_index  = MiApp_EstablishConnection(0xFF, CONN_MODE_DIRECT);
    5f1c:	4b52      	ldr	r3, [pc, #328]	; (6068 <main+0x1ec>)
    5f1e:	2100      	movs	r1, #0
    5f20:	20ff      	movs	r0, #255	; 0xff
    5f22:	4798      	blx	r3
    5f24:	9001      	str	r0, [sp, #4]
		printf("Waiting to Join\r\n");
    5f26:	4658      	mov	r0, fp
    5f28:	47b8      	blx	r7
	while(connection_index == 0xFF)
    5f2a:	9b01      	ldr	r3, [sp, #4]
    5f2c:	2bff      	cmp	r3, #255	; 0xff
    5f2e:	d0ed      	beq.n	5f0c <main+0x90>
	}
	printf("Total Connections:%d\r\n", Total_Connections());
    5f30:	4e4e      	ldr	r6, [pc, #312]	; (606c <main+0x1f0>)
    5f32:	47b0      	blx	r6
    5f34:	0001      	movs	r1, r0
    5f36:	484e      	ldr	r0, [pc, #312]	; (6070 <main+0x1f4>)
    5f38:	47c8      	blx	r9
	#if defined(R)
		printf("joined as a router....\r\n");
	#endif
	#if defined(ED)
		printf("joined as a End Device....\r\n");
    5f3a:	484e      	ldr	r0, [pc, #312]	; (6074 <main+0x1f8>)
    5f3c:	47b8      	blx	r7
		at30tse_init();
    5f3e:	4b4e      	ldr	r3, [pc, #312]	; (6078 <main+0x1fc>)
    5f40:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    5f42:	4643      	mov	r3, r8
    5f44:	616b      	str	r3, [r5, #20]
		//     preferred.
		/*******************************************************************/
		MiApp_StartConnection(START_CONN_DIRECT, 10, 0);
		LED_On(LED1);
	}
	t1.Val = MiWi_TickGet();
    5f46:	4b4d      	ldr	r3, [pc, #308]	; (607c <main+0x200>)
    5f48:	4698      	mov	r8, r3
    5f4a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    5f4c:	ab02      	add	r3, sp, #8
    5f4e:	701c      	strb	r4, [r3, #0]
	config->enable               = true;
    5f50:	2301      	movs	r3, #1
    5f52:	aa02      	add	r2, sp, #8
    5f54:	7053      	strb	r3, [r2, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    5f56:	330b      	adds	r3, #11
    5f58:	7093      	strb	r3, [r2, #2]
		config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    5f5a:	230b      	movs	r3, #11
		wdt_set_config(&config_wdt);
    5f5c:	0010      	movs	r0, r2
		config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
    5f5e:	7113      	strb	r3, [r2, #4]
		wdt_set_config(&config_wdt);
    5f60:	4b47      	ldr	r3, [pc, #284]	; (6080 <main+0x204>)
	config->window_period        = WDT_PERIOD_NONE;
    5f62:	70d4      	strb	r4, [r2, #3]
    5f64:	4798      	blx	r3
	wdt_register_callback(watchdog_early_warning_callback,
    5f66:	2100      	movs	r1, #0
    5f68:	4b46      	ldr	r3, [pc, #280]	; (6084 <main+0x208>)
    5f6a:	4847      	ldr	r0, [pc, #284]	; (6088 <main+0x20c>)
    5f6c:	4798      	blx	r3
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    5f6e:	4b47      	ldr	r3, [pc, #284]	; (608c <main+0x210>)
    5f70:	2000      	movs	r0, #0
    5f72:	4798      	blx	r3
	// Demo essentially does 3 tasks
	// 1.Check for a received Data Packet  2. Check if button is pressed , if pressed Transmit a Unicast Packet to node indexed at 0
	// 3. Every 5 seconds Transmit a Broadcast type packet
	configure_wdt();
	configure_wdt_callbacks();
	size = Total_Connections();
    5f74:	47b0      	blx	r6
    5f76:	4b46      	ldr	r3, [pc, #280]	; (6090 <main+0x214>)
    5f78:	4d46      	ldr	r5, [pc, #280]	; (6094 <main+0x218>)
    5f7a:	7018      	strb	r0, [r3, #0]
    5f7c:	4b46      	ldr	r3, [pc, #280]	; (6098 <main+0x21c>)
    5f7e:	4e47      	ldr	r6, [pc, #284]	; (609c <main+0x220>)
    5f80:	469b      	mov	fp, r3
    5f82:	e031      	b.n	5fe8 <main+0x16c>
			//  next received frame
			/*******************************************************************/
			MiApp_DiscardMessage();

		}
		t2.Val = MiWi_TickGet();
    5f84:	47c0      	blx	r8
			printf("forwarding packet to other routers around :)\r\n");
		}
		#endif

		#if defined(ED)
			MiApp_FlushTx();
    5f86:	2300      	movs	r3, #0
	port_base->OUTTGL.reg = pin_mask;
    5f88:	2280      	movs	r2, #128	; 0x80
    5f8a:	702b      	strb	r3, [r5, #0]
    5f8c:	4b34      	ldr	r3, [pc, #208]	; (6060 <main+0x1e4>)
    5f8e:	0312      	lsls	r2, r2, #12
    5f90:	61da      	str	r2, [r3, #28]
			LED_Toggle(LED0);
			uint8_t tmp = PHY_RandomReq() & 0xFF;
    5f92:	4b43      	ldr	r3, [pc, #268]	; (60a0 <main+0x224>)
    5f94:	4798      	blx	r3
			// Tx Buffer User Data
			MiApp_WriteData(NodeID);
    5f96:	2316      	movs	r3, #22
    5f98:	782c      	ldrb	r4, [r5, #0]
			uint8_t tmp = PHY_RandomReq() & 0xFF;
    5f9a:	0007      	movs	r7, r0
			MiApp_WriteData(NodeID);
    5f9c:	5533      	strb	r3, [r6, r4]
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    5f9e:	1ca3      	adds	r3, r4, #2
    5fa0:	702b      	strb	r3, [r5, #0]
			MiApp_WriteData(NodeID);
    5fa2:	3401      	adds	r4, #1
			MiApp_WriteData( at30tse_read_temperature()*1.8+32);
    5fa4:	4b3f      	ldr	r3, [pc, #252]	; (60a4 <main+0x228>)
    5fa6:	4798      	blx	r3
    5fa8:	b2e3      	uxtb	r3, r4
    5faa:	9301      	str	r3, [sp, #4]
    5fac:	4c3e      	ldr	r4, [pc, #248]	; (60a8 <main+0x22c>)
    5fae:	4a3f      	ldr	r2, [pc, #252]	; (60ac <main+0x230>)
    5fb0:	4b3f      	ldr	r3, [pc, #252]	; (60b0 <main+0x234>)
    5fb2:	47a0      	blx	r4
    5fb4:	2200      	movs	r2, #0
    5fb6:	4b3f      	ldr	r3, [pc, #252]	; (60b4 <main+0x238>)
    5fb8:	4c3f      	ldr	r4, [pc, #252]	; (60b8 <main+0x23c>)
    5fba:	47a0      	blx	r4
    5fbc:	4b3f      	ldr	r3, [pc, #252]	; (60bc <main+0x240>)
    5fbe:	4798      	blx	r3
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	54f0      	strb	r0, [r6, r3]
			MiApp_WriteData(tmp);
    5fc4:	782b      	ldrb	r3, [r5, #0]
			TxCount++;
			//This function unicasts a message in the TxBuffer to the first connected peer device
			// indexed at 0 in connection table
			statusOfUnicast = MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5fc6:	2001      	movs	r0, #1
			MiApp_WriteData(tmp);
    5fc8:	1c5a      	adds	r2, r3, #1
    5fca:	54f7      	strb	r7, [r6, r3]
			statusOfUnicast = MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5fcc:	4b3c      	ldr	r3, [pc, #240]	; (60c0 <main+0x244>)
			MiApp_WriteData(tmp);
    5fce:	702a      	strb	r2, [r5, #0]
			statusOfUnicast = MiApp_BroadcastPacket(true); // Send Packet to Parent Device
    5fd0:	4798      	blx	r3
    5fd2:	4b3c      	ldr	r3, [pc, #240]	; (60c4 <main+0x248>)
    5fd4:	7018      	strb	r0, [r3, #0]
			printf("sleeping bye for now!!!!");
    5fd6:	4658      	mov	r0, fp
    5fd8:	47c8      	blx	r9
			delay_ms(50);
    5fda:	2032      	movs	r0, #50	; 0x32
    5fdc:	47d0      	blx	sl
				PHY_Sleep();
    5fde:	4b3a      	ldr	r3, [pc, #232]	; (60c8 <main+0x24c>)
    5fe0:	4798      	blx	r3
			setSleepPeriod(60); // 65 = 16 min
    5fe2:	203c      	movs	r0, #60	; 0x3c
    5fe4:	4b39      	ldr	r3, [pc, #228]	; (60cc <main+0x250>)
    5fe6:	4798      	blx	r3
		wdt_reset_count();
    5fe8:	4b39      	ldr	r3, [pc, #228]	; (60d0 <main+0x254>)
    5fea:	4798      	blx	r3
		if (MiApp_MessageAvailable())
    5fec:	4b39      	ldr	r3, [pc, #228]	; (60d4 <main+0x258>)
    5fee:	4798      	blx	r3
    5ff0:	2800      	cmp	r0, #0
    5ff2:	d0c7      	beq.n	5f84 <main+0x108>
			MiApp_DiscardMessage();
    5ff4:	4b38      	ldr	r3, [pc, #224]	; (60d8 <main+0x25c>)
    5ff6:	4798      	blx	r3
    5ff8:	e7c4      	b.n	5f84 <main+0x108>
		printf("Power-On Reset\r\n");
    5ffa:	4838      	ldr	r0, [pc, #224]	; (60dc <main+0x260>)
    5ffc:	47b8      	blx	r7
    5ffe:	e77c      	b.n	5efa <main+0x7e>
		printf("Brown Out 12 Detector Reset\r\n");
    6000:	4837      	ldr	r0, [pc, #220]	; (60e0 <main+0x264>)
    6002:	47b8      	blx	r7
    6004:	e777      	b.n	5ef6 <main+0x7a>
		printf("Brown Out 33 Detector Reset\r\n");
    6006:	4837      	ldr	r0, [pc, #220]	; (60e4 <main+0x268>)
    6008:	47b8      	blx	r7
    600a:	e771      	b.n	5ef0 <main+0x74>
		printf("External Reset\r\n");
    600c:	4836      	ldr	r0, [pc, #216]	; (60e8 <main+0x26c>)
    600e:	47b8      	blx	r7
    6010:	e76b      	b.n	5eea <main+0x6e>
		printf("Watchdog Reset\r\n");
    6012:	4836      	ldr	r0, [pc, #216]	; (60ec <main+0x270>)
    6014:	47b8      	blx	r7
    6016:	e765      	b.n	5ee4 <main+0x68>
		printf("System Reset Request\r\n");
    6018:	4f0f      	ldr	r7, [pc, #60]	; (6058 <main+0x1dc>)
    601a:	4835      	ldr	r0, [pc, #212]	; (60f0 <main+0x274>)
    601c:	47b8      	blx	r7
    601e:	e75e      	b.n	5ede <main+0x62>
    6020:	00004ad5 	.word	0x00004ad5
    6024:	00003145 	.word	0x00003145
    6028:	00005219 	.word	0x00005219
    602c:	00003091 	.word	0x00003091
    6030:	00002e31 	.word	0x00002e31
    6034:	00002505 	.word	0x00002505
    6038:	0000275d 	.word	0x0000275d
    603c:	00002da5 	.word	0x00002da5
    6040:	0000335d 	.word	0x0000335d
    6044:	20000020 	.word	0x20000020
    6048:	00007ed1 	.word	0x00007ed1
    604c:	00009068 	.word	0x00009068
    6050:	40000800 	.word	0x40000800
    6054:	00009070 	.word	0x00009070
    6058:	00007fc5 	.word	0x00007fc5
    605c:	000031b5 	.word	0x000031b5
    6060:	40002800 	.word	0x40002800
    6064:	00009110 	.word	0x00009110
    6068:	00002c71 	.word	0x00002c71
    606c:	000024b1 	.word	0x000024b1
    6070:	00009124 	.word	0x00009124
    6074:	0000913c 	.word	0x0000913c
    6078:	00000115 	.word	0x00000115
    607c:	00003131 	.word	0x00003131
    6080:	00000cfd 	.word	0x00000cfd
    6084:	00000dc5 	.word	0x00000dc5
    6088:	00005e6d 	.word	0x00005e6d
    608c:	00000dd9 	.word	0x00000dd9
    6090:	20000bbc 	.word	0x20000bbc
    6094:	200009c5 	.word	0x200009c5
    6098:	00009158 	.word	0x00009158
    609c:	200009c8 	.word	0x200009c8
    60a0:	00000e15 	.word	0x00000e15
    60a4:	000001a9 	.word	0x000001a9
    60a8:	00006f25 	.word	0x00006f25
    60ac:	cccccccd 	.word	0xcccccccd
    60b0:	3ffccccc 	.word	0x3ffccccc
    60b4:	40400000 	.word	0x40400000
    60b8:	0000629d 	.word	0x0000629d
    60bc:	00006261 	.word	0x00006261
    60c0:	000026ad 	.word	0x000026ad
    60c4:	20000275 	.word	0x20000275
    60c8:	00000edd 	.word	0x00000edd
    60cc:	00002dd9 	.word	0x00002dd9
    60d0:	00000db1 	.word	0x00000db1
    60d4:	00002c45 	.word	0x00002c45
    60d8:	00002741 	.word	0x00002741
    60dc:	00009100 	.word	0x00009100
    60e0:	000090e0 	.word	0x000090e0
    60e4:	000090c0 	.word	0x000090c0
    60e8:	000090b0 	.word	0x000090b0
    60ec:	000090a0 	.word	0x000090a0
    60f0:	00009088 	.word	0x00009088

000060f4 <__udivsi3>:
    60f4:	2200      	movs	r2, #0
    60f6:	0843      	lsrs	r3, r0, #1
    60f8:	428b      	cmp	r3, r1
    60fa:	d374      	bcc.n	61e6 <__udivsi3+0xf2>
    60fc:	0903      	lsrs	r3, r0, #4
    60fe:	428b      	cmp	r3, r1
    6100:	d35f      	bcc.n	61c2 <__udivsi3+0xce>
    6102:	0a03      	lsrs	r3, r0, #8
    6104:	428b      	cmp	r3, r1
    6106:	d344      	bcc.n	6192 <__udivsi3+0x9e>
    6108:	0b03      	lsrs	r3, r0, #12
    610a:	428b      	cmp	r3, r1
    610c:	d328      	bcc.n	6160 <__udivsi3+0x6c>
    610e:	0c03      	lsrs	r3, r0, #16
    6110:	428b      	cmp	r3, r1
    6112:	d30d      	bcc.n	6130 <__udivsi3+0x3c>
    6114:	22ff      	movs	r2, #255	; 0xff
    6116:	0209      	lsls	r1, r1, #8
    6118:	ba12      	rev	r2, r2
    611a:	0c03      	lsrs	r3, r0, #16
    611c:	428b      	cmp	r3, r1
    611e:	d302      	bcc.n	6126 <__udivsi3+0x32>
    6120:	1212      	asrs	r2, r2, #8
    6122:	0209      	lsls	r1, r1, #8
    6124:	d065      	beq.n	61f2 <__udivsi3+0xfe>
    6126:	0b03      	lsrs	r3, r0, #12
    6128:	428b      	cmp	r3, r1
    612a:	d319      	bcc.n	6160 <__udivsi3+0x6c>
    612c:	e000      	b.n	6130 <__udivsi3+0x3c>
    612e:	0a09      	lsrs	r1, r1, #8
    6130:	0bc3      	lsrs	r3, r0, #15
    6132:	428b      	cmp	r3, r1
    6134:	d301      	bcc.n	613a <__udivsi3+0x46>
    6136:	03cb      	lsls	r3, r1, #15
    6138:	1ac0      	subs	r0, r0, r3
    613a:	4152      	adcs	r2, r2
    613c:	0b83      	lsrs	r3, r0, #14
    613e:	428b      	cmp	r3, r1
    6140:	d301      	bcc.n	6146 <__udivsi3+0x52>
    6142:	038b      	lsls	r3, r1, #14
    6144:	1ac0      	subs	r0, r0, r3
    6146:	4152      	adcs	r2, r2
    6148:	0b43      	lsrs	r3, r0, #13
    614a:	428b      	cmp	r3, r1
    614c:	d301      	bcc.n	6152 <__udivsi3+0x5e>
    614e:	034b      	lsls	r3, r1, #13
    6150:	1ac0      	subs	r0, r0, r3
    6152:	4152      	adcs	r2, r2
    6154:	0b03      	lsrs	r3, r0, #12
    6156:	428b      	cmp	r3, r1
    6158:	d301      	bcc.n	615e <__udivsi3+0x6a>
    615a:	030b      	lsls	r3, r1, #12
    615c:	1ac0      	subs	r0, r0, r3
    615e:	4152      	adcs	r2, r2
    6160:	0ac3      	lsrs	r3, r0, #11
    6162:	428b      	cmp	r3, r1
    6164:	d301      	bcc.n	616a <__udivsi3+0x76>
    6166:	02cb      	lsls	r3, r1, #11
    6168:	1ac0      	subs	r0, r0, r3
    616a:	4152      	adcs	r2, r2
    616c:	0a83      	lsrs	r3, r0, #10
    616e:	428b      	cmp	r3, r1
    6170:	d301      	bcc.n	6176 <__udivsi3+0x82>
    6172:	028b      	lsls	r3, r1, #10
    6174:	1ac0      	subs	r0, r0, r3
    6176:	4152      	adcs	r2, r2
    6178:	0a43      	lsrs	r3, r0, #9
    617a:	428b      	cmp	r3, r1
    617c:	d301      	bcc.n	6182 <__udivsi3+0x8e>
    617e:	024b      	lsls	r3, r1, #9
    6180:	1ac0      	subs	r0, r0, r3
    6182:	4152      	adcs	r2, r2
    6184:	0a03      	lsrs	r3, r0, #8
    6186:	428b      	cmp	r3, r1
    6188:	d301      	bcc.n	618e <__udivsi3+0x9a>
    618a:	020b      	lsls	r3, r1, #8
    618c:	1ac0      	subs	r0, r0, r3
    618e:	4152      	adcs	r2, r2
    6190:	d2cd      	bcs.n	612e <__udivsi3+0x3a>
    6192:	09c3      	lsrs	r3, r0, #7
    6194:	428b      	cmp	r3, r1
    6196:	d301      	bcc.n	619c <__udivsi3+0xa8>
    6198:	01cb      	lsls	r3, r1, #7
    619a:	1ac0      	subs	r0, r0, r3
    619c:	4152      	adcs	r2, r2
    619e:	0983      	lsrs	r3, r0, #6
    61a0:	428b      	cmp	r3, r1
    61a2:	d301      	bcc.n	61a8 <__udivsi3+0xb4>
    61a4:	018b      	lsls	r3, r1, #6
    61a6:	1ac0      	subs	r0, r0, r3
    61a8:	4152      	adcs	r2, r2
    61aa:	0943      	lsrs	r3, r0, #5
    61ac:	428b      	cmp	r3, r1
    61ae:	d301      	bcc.n	61b4 <__udivsi3+0xc0>
    61b0:	014b      	lsls	r3, r1, #5
    61b2:	1ac0      	subs	r0, r0, r3
    61b4:	4152      	adcs	r2, r2
    61b6:	0903      	lsrs	r3, r0, #4
    61b8:	428b      	cmp	r3, r1
    61ba:	d301      	bcc.n	61c0 <__udivsi3+0xcc>
    61bc:	010b      	lsls	r3, r1, #4
    61be:	1ac0      	subs	r0, r0, r3
    61c0:	4152      	adcs	r2, r2
    61c2:	08c3      	lsrs	r3, r0, #3
    61c4:	428b      	cmp	r3, r1
    61c6:	d301      	bcc.n	61cc <__udivsi3+0xd8>
    61c8:	00cb      	lsls	r3, r1, #3
    61ca:	1ac0      	subs	r0, r0, r3
    61cc:	4152      	adcs	r2, r2
    61ce:	0883      	lsrs	r3, r0, #2
    61d0:	428b      	cmp	r3, r1
    61d2:	d301      	bcc.n	61d8 <__udivsi3+0xe4>
    61d4:	008b      	lsls	r3, r1, #2
    61d6:	1ac0      	subs	r0, r0, r3
    61d8:	4152      	adcs	r2, r2
    61da:	0843      	lsrs	r3, r0, #1
    61dc:	428b      	cmp	r3, r1
    61de:	d301      	bcc.n	61e4 <__udivsi3+0xf0>
    61e0:	004b      	lsls	r3, r1, #1
    61e2:	1ac0      	subs	r0, r0, r3
    61e4:	4152      	adcs	r2, r2
    61e6:	1a41      	subs	r1, r0, r1
    61e8:	d200      	bcs.n	61ec <__udivsi3+0xf8>
    61ea:	4601      	mov	r1, r0
    61ec:	4152      	adcs	r2, r2
    61ee:	4610      	mov	r0, r2
    61f0:	4770      	bx	lr
    61f2:	e7ff      	b.n	61f4 <__udivsi3+0x100>
    61f4:	b501      	push	{r0, lr}
    61f6:	2000      	movs	r0, #0
    61f8:	f000 f806 	bl	6208 <__aeabi_idiv0>
    61fc:	bd02      	pop	{r1, pc}
    61fe:	46c0      	nop			; (mov r8, r8)

00006200 <__aeabi_uidivmod>:
    6200:	2900      	cmp	r1, #0
    6202:	d0f7      	beq.n	61f4 <__udivsi3+0x100>
    6204:	e776      	b.n	60f4 <__udivsi3>
    6206:	4770      	bx	lr

00006208 <__aeabi_idiv0>:
    6208:	4770      	bx	lr
    620a:	46c0      	nop			; (mov r8, r8)

0000620c <__aeabi_lmul>:
    620c:	b5f0      	push	{r4, r5, r6, r7, lr}
    620e:	46ce      	mov	lr, r9
    6210:	4647      	mov	r7, r8
    6212:	0415      	lsls	r5, r2, #16
    6214:	0c2d      	lsrs	r5, r5, #16
    6216:	002e      	movs	r6, r5
    6218:	b580      	push	{r7, lr}
    621a:	0407      	lsls	r7, r0, #16
    621c:	0c14      	lsrs	r4, r2, #16
    621e:	0c3f      	lsrs	r7, r7, #16
    6220:	4699      	mov	r9, r3
    6222:	0c03      	lsrs	r3, r0, #16
    6224:	437e      	muls	r6, r7
    6226:	435d      	muls	r5, r3
    6228:	4367      	muls	r7, r4
    622a:	4363      	muls	r3, r4
    622c:	197f      	adds	r7, r7, r5
    622e:	0c34      	lsrs	r4, r6, #16
    6230:	19e4      	adds	r4, r4, r7
    6232:	469c      	mov	ip, r3
    6234:	42a5      	cmp	r5, r4
    6236:	d903      	bls.n	6240 <__aeabi_lmul+0x34>
    6238:	2380      	movs	r3, #128	; 0x80
    623a:	025b      	lsls	r3, r3, #9
    623c:	4698      	mov	r8, r3
    623e:	44c4      	add	ip, r8
    6240:	464b      	mov	r3, r9
    6242:	4351      	muls	r1, r2
    6244:	4343      	muls	r3, r0
    6246:	0436      	lsls	r6, r6, #16
    6248:	0c36      	lsrs	r6, r6, #16
    624a:	0c25      	lsrs	r5, r4, #16
    624c:	0424      	lsls	r4, r4, #16
    624e:	4465      	add	r5, ip
    6250:	19a4      	adds	r4, r4, r6
    6252:	1859      	adds	r1, r3, r1
    6254:	1949      	adds	r1, r1, r5
    6256:	0020      	movs	r0, r4
    6258:	bc0c      	pop	{r2, r3}
    625a:	4690      	mov	r8, r2
    625c:	4699      	mov	r9, r3
    625e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006260 <__aeabi_d2uiz>:
    6260:	b570      	push	{r4, r5, r6, lr}
    6262:	2200      	movs	r2, #0
    6264:	4b0c      	ldr	r3, [pc, #48]	; (6298 <__aeabi_d2uiz+0x38>)
    6266:	0004      	movs	r4, r0
    6268:	000d      	movs	r5, r1
    626a:	f001 fcd3 	bl	7c14 <__aeabi_dcmpge>
    626e:	2800      	cmp	r0, #0
    6270:	d104      	bne.n	627c <__aeabi_d2uiz+0x1c>
    6272:	0020      	movs	r0, r4
    6274:	0029      	movs	r1, r5
    6276:	f001 fbeb 	bl	7a50 <__aeabi_d2iz>
    627a:	bd70      	pop	{r4, r5, r6, pc}
    627c:	4b06      	ldr	r3, [pc, #24]	; (6298 <__aeabi_d2uiz+0x38>)
    627e:	2200      	movs	r2, #0
    6280:	0020      	movs	r0, r4
    6282:	0029      	movs	r1, r5
    6284:	f001 f8ce 	bl	7424 <__aeabi_dsub>
    6288:	f001 fbe2 	bl	7a50 <__aeabi_d2iz>
    628c:	2380      	movs	r3, #128	; 0x80
    628e:	061b      	lsls	r3, r3, #24
    6290:	469c      	mov	ip, r3
    6292:	4460      	add	r0, ip
    6294:	e7f1      	b.n	627a <__aeabi_d2uiz+0x1a>
    6296:	46c0      	nop			; (mov r8, r8)
    6298:	41e00000 	.word	0x41e00000

0000629c <__aeabi_dadd>:
    629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    629e:	4645      	mov	r5, r8
    62a0:	46de      	mov	lr, fp
    62a2:	4657      	mov	r7, sl
    62a4:	464e      	mov	r6, r9
    62a6:	030c      	lsls	r4, r1, #12
    62a8:	b5e0      	push	{r5, r6, r7, lr}
    62aa:	004e      	lsls	r6, r1, #1
    62ac:	0fc9      	lsrs	r1, r1, #31
    62ae:	4688      	mov	r8, r1
    62b0:	000d      	movs	r5, r1
    62b2:	0a61      	lsrs	r1, r4, #9
    62b4:	0f44      	lsrs	r4, r0, #29
    62b6:	430c      	orrs	r4, r1
    62b8:	00c7      	lsls	r7, r0, #3
    62ba:	0319      	lsls	r1, r3, #12
    62bc:	0058      	lsls	r0, r3, #1
    62be:	0fdb      	lsrs	r3, r3, #31
    62c0:	469b      	mov	fp, r3
    62c2:	0a4b      	lsrs	r3, r1, #9
    62c4:	0f51      	lsrs	r1, r2, #29
    62c6:	430b      	orrs	r3, r1
    62c8:	0d76      	lsrs	r6, r6, #21
    62ca:	0d40      	lsrs	r0, r0, #21
    62cc:	0019      	movs	r1, r3
    62ce:	00d2      	lsls	r2, r2, #3
    62d0:	45d8      	cmp	r8, fp
    62d2:	d100      	bne.n	62d6 <__aeabi_dadd+0x3a>
    62d4:	e0ae      	b.n	6434 <__aeabi_dadd+0x198>
    62d6:	1a35      	subs	r5, r6, r0
    62d8:	2d00      	cmp	r5, #0
    62da:	dc00      	bgt.n	62de <__aeabi_dadd+0x42>
    62dc:	e0f6      	b.n	64cc <__aeabi_dadd+0x230>
    62de:	2800      	cmp	r0, #0
    62e0:	d10f      	bne.n	6302 <__aeabi_dadd+0x66>
    62e2:	4313      	orrs	r3, r2
    62e4:	d100      	bne.n	62e8 <__aeabi_dadd+0x4c>
    62e6:	e0db      	b.n	64a0 <__aeabi_dadd+0x204>
    62e8:	1e6b      	subs	r3, r5, #1
    62ea:	2b00      	cmp	r3, #0
    62ec:	d000      	beq.n	62f0 <__aeabi_dadd+0x54>
    62ee:	e137      	b.n	6560 <__aeabi_dadd+0x2c4>
    62f0:	1aba      	subs	r2, r7, r2
    62f2:	4297      	cmp	r7, r2
    62f4:	41bf      	sbcs	r7, r7
    62f6:	1a64      	subs	r4, r4, r1
    62f8:	427f      	negs	r7, r7
    62fa:	1be4      	subs	r4, r4, r7
    62fc:	2601      	movs	r6, #1
    62fe:	0017      	movs	r7, r2
    6300:	e024      	b.n	634c <__aeabi_dadd+0xb0>
    6302:	4bc6      	ldr	r3, [pc, #792]	; (661c <__aeabi_dadd+0x380>)
    6304:	429e      	cmp	r6, r3
    6306:	d04d      	beq.n	63a4 <__aeabi_dadd+0x108>
    6308:	2380      	movs	r3, #128	; 0x80
    630a:	041b      	lsls	r3, r3, #16
    630c:	4319      	orrs	r1, r3
    630e:	2d38      	cmp	r5, #56	; 0x38
    6310:	dd00      	ble.n	6314 <__aeabi_dadd+0x78>
    6312:	e107      	b.n	6524 <__aeabi_dadd+0x288>
    6314:	2d1f      	cmp	r5, #31
    6316:	dd00      	ble.n	631a <__aeabi_dadd+0x7e>
    6318:	e138      	b.n	658c <__aeabi_dadd+0x2f0>
    631a:	2020      	movs	r0, #32
    631c:	1b43      	subs	r3, r0, r5
    631e:	469a      	mov	sl, r3
    6320:	000b      	movs	r3, r1
    6322:	4650      	mov	r0, sl
    6324:	4083      	lsls	r3, r0
    6326:	4699      	mov	r9, r3
    6328:	0013      	movs	r3, r2
    632a:	4648      	mov	r0, r9
    632c:	40eb      	lsrs	r3, r5
    632e:	4318      	orrs	r0, r3
    6330:	0003      	movs	r3, r0
    6332:	4650      	mov	r0, sl
    6334:	4082      	lsls	r2, r0
    6336:	1e50      	subs	r0, r2, #1
    6338:	4182      	sbcs	r2, r0
    633a:	40e9      	lsrs	r1, r5
    633c:	431a      	orrs	r2, r3
    633e:	1aba      	subs	r2, r7, r2
    6340:	1a61      	subs	r1, r4, r1
    6342:	4297      	cmp	r7, r2
    6344:	41a4      	sbcs	r4, r4
    6346:	0017      	movs	r7, r2
    6348:	4264      	negs	r4, r4
    634a:	1b0c      	subs	r4, r1, r4
    634c:	0223      	lsls	r3, r4, #8
    634e:	d562      	bpl.n	6416 <__aeabi_dadd+0x17a>
    6350:	0264      	lsls	r4, r4, #9
    6352:	0a65      	lsrs	r5, r4, #9
    6354:	2d00      	cmp	r5, #0
    6356:	d100      	bne.n	635a <__aeabi_dadd+0xbe>
    6358:	e0df      	b.n	651a <__aeabi_dadd+0x27e>
    635a:	0028      	movs	r0, r5
    635c:	f001 fc64 	bl	7c28 <__clzsi2>
    6360:	0003      	movs	r3, r0
    6362:	3b08      	subs	r3, #8
    6364:	2b1f      	cmp	r3, #31
    6366:	dd00      	ble.n	636a <__aeabi_dadd+0xce>
    6368:	e0d2      	b.n	6510 <__aeabi_dadd+0x274>
    636a:	2220      	movs	r2, #32
    636c:	003c      	movs	r4, r7
    636e:	1ad2      	subs	r2, r2, r3
    6370:	409d      	lsls	r5, r3
    6372:	40d4      	lsrs	r4, r2
    6374:	409f      	lsls	r7, r3
    6376:	4325      	orrs	r5, r4
    6378:	429e      	cmp	r6, r3
    637a:	dd00      	ble.n	637e <__aeabi_dadd+0xe2>
    637c:	e0c4      	b.n	6508 <__aeabi_dadd+0x26c>
    637e:	1b9e      	subs	r6, r3, r6
    6380:	1c73      	adds	r3, r6, #1
    6382:	2b1f      	cmp	r3, #31
    6384:	dd00      	ble.n	6388 <__aeabi_dadd+0xec>
    6386:	e0f1      	b.n	656c <__aeabi_dadd+0x2d0>
    6388:	2220      	movs	r2, #32
    638a:	0038      	movs	r0, r7
    638c:	0029      	movs	r1, r5
    638e:	1ad2      	subs	r2, r2, r3
    6390:	40d8      	lsrs	r0, r3
    6392:	4091      	lsls	r1, r2
    6394:	4097      	lsls	r7, r2
    6396:	002c      	movs	r4, r5
    6398:	4301      	orrs	r1, r0
    639a:	1e78      	subs	r0, r7, #1
    639c:	4187      	sbcs	r7, r0
    639e:	40dc      	lsrs	r4, r3
    63a0:	2600      	movs	r6, #0
    63a2:	430f      	orrs	r7, r1
    63a4:	077b      	lsls	r3, r7, #29
    63a6:	d009      	beq.n	63bc <__aeabi_dadd+0x120>
    63a8:	230f      	movs	r3, #15
    63aa:	403b      	ands	r3, r7
    63ac:	2b04      	cmp	r3, #4
    63ae:	d005      	beq.n	63bc <__aeabi_dadd+0x120>
    63b0:	1d3b      	adds	r3, r7, #4
    63b2:	42bb      	cmp	r3, r7
    63b4:	41bf      	sbcs	r7, r7
    63b6:	427f      	negs	r7, r7
    63b8:	19e4      	adds	r4, r4, r7
    63ba:	001f      	movs	r7, r3
    63bc:	0223      	lsls	r3, r4, #8
    63be:	d52c      	bpl.n	641a <__aeabi_dadd+0x17e>
    63c0:	4b96      	ldr	r3, [pc, #600]	; (661c <__aeabi_dadd+0x380>)
    63c2:	3601      	adds	r6, #1
    63c4:	429e      	cmp	r6, r3
    63c6:	d100      	bne.n	63ca <__aeabi_dadd+0x12e>
    63c8:	e09a      	b.n	6500 <__aeabi_dadd+0x264>
    63ca:	4645      	mov	r5, r8
    63cc:	4b94      	ldr	r3, [pc, #592]	; (6620 <__aeabi_dadd+0x384>)
    63ce:	08ff      	lsrs	r7, r7, #3
    63d0:	401c      	ands	r4, r3
    63d2:	0760      	lsls	r0, r4, #29
    63d4:	0576      	lsls	r6, r6, #21
    63d6:	0264      	lsls	r4, r4, #9
    63d8:	4307      	orrs	r7, r0
    63da:	0b24      	lsrs	r4, r4, #12
    63dc:	0d76      	lsrs	r6, r6, #21
    63de:	2100      	movs	r1, #0
    63e0:	0324      	lsls	r4, r4, #12
    63e2:	0b23      	lsrs	r3, r4, #12
    63e4:	0d0c      	lsrs	r4, r1, #20
    63e6:	4a8f      	ldr	r2, [pc, #572]	; (6624 <__aeabi_dadd+0x388>)
    63e8:	0524      	lsls	r4, r4, #20
    63ea:	431c      	orrs	r4, r3
    63ec:	4014      	ands	r4, r2
    63ee:	0533      	lsls	r3, r6, #20
    63f0:	4323      	orrs	r3, r4
    63f2:	005b      	lsls	r3, r3, #1
    63f4:	07ed      	lsls	r5, r5, #31
    63f6:	085b      	lsrs	r3, r3, #1
    63f8:	432b      	orrs	r3, r5
    63fa:	0038      	movs	r0, r7
    63fc:	0019      	movs	r1, r3
    63fe:	bc3c      	pop	{r2, r3, r4, r5}
    6400:	4690      	mov	r8, r2
    6402:	4699      	mov	r9, r3
    6404:	46a2      	mov	sl, r4
    6406:	46ab      	mov	fp, r5
    6408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    640a:	4664      	mov	r4, ip
    640c:	4304      	orrs	r4, r0
    640e:	d100      	bne.n	6412 <__aeabi_dadd+0x176>
    6410:	e211      	b.n	6836 <__aeabi_dadd+0x59a>
    6412:	0004      	movs	r4, r0
    6414:	4667      	mov	r7, ip
    6416:	077b      	lsls	r3, r7, #29
    6418:	d1c6      	bne.n	63a8 <__aeabi_dadd+0x10c>
    641a:	4645      	mov	r5, r8
    641c:	0760      	lsls	r0, r4, #29
    641e:	08ff      	lsrs	r7, r7, #3
    6420:	4307      	orrs	r7, r0
    6422:	08e4      	lsrs	r4, r4, #3
    6424:	4b7d      	ldr	r3, [pc, #500]	; (661c <__aeabi_dadd+0x380>)
    6426:	429e      	cmp	r6, r3
    6428:	d030      	beq.n	648c <__aeabi_dadd+0x1f0>
    642a:	0324      	lsls	r4, r4, #12
    642c:	0576      	lsls	r6, r6, #21
    642e:	0b24      	lsrs	r4, r4, #12
    6430:	0d76      	lsrs	r6, r6, #21
    6432:	e7d4      	b.n	63de <__aeabi_dadd+0x142>
    6434:	1a33      	subs	r3, r6, r0
    6436:	469a      	mov	sl, r3
    6438:	2b00      	cmp	r3, #0
    643a:	dd78      	ble.n	652e <__aeabi_dadd+0x292>
    643c:	2800      	cmp	r0, #0
    643e:	d031      	beq.n	64a4 <__aeabi_dadd+0x208>
    6440:	4876      	ldr	r0, [pc, #472]	; (661c <__aeabi_dadd+0x380>)
    6442:	4286      	cmp	r6, r0
    6444:	d0ae      	beq.n	63a4 <__aeabi_dadd+0x108>
    6446:	2080      	movs	r0, #128	; 0x80
    6448:	0400      	lsls	r0, r0, #16
    644a:	4301      	orrs	r1, r0
    644c:	4653      	mov	r3, sl
    644e:	2b38      	cmp	r3, #56	; 0x38
    6450:	dc00      	bgt.n	6454 <__aeabi_dadd+0x1b8>
    6452:	e0e9      	b.n	6628 <__aeabi_dadd+0x38c>
    6454:	430a      	orrs	r2, r1
    6456:	1e51      	subs	r1, r2, #1
    6458:	418a      	sbcs	r2, r1
    645a:	2100      	movs	r1, #0
    645c:	19d2      	adds	r2, r2, r7
    645e:	42ba      	cmp	r2, r7
    6460:	41bf      	sbcs	r7, r7
    6462:	1909      	adds	r1, r1, r4
    6464:	427c      	negs	r4, r7
    6466:	0017      	movs	r7, r2
    6468:	190c      	adds	r4, r1, r4
    646a:	0223      	lsls	r3, r4, #8
    646c:	d5d3      	bpl.n	6416 <__aeabi_dadd+0x17a>
    646e:	4b6b      	ldr	r3, [pc, #428]	; (661c <__aeabi_dadd+0x380>)
    6470:	3601      	adds	r6, #1
    6472:	429e      	cmp	r6, r3
    6474:	d100      	bne.n	6478 <__aeabi_dadd+0x1dc>
    6476:	e13a      	b.n	66ee <__aeabi_dadd+0x452>
    6478:	2001      	movs	r0, #1
    647a:	4b69      	ldr	r3, [pc, #420]	; (6620 <__aeabi_dadd+0x384>)
    647c:	401c      	ands	r4, r3
    647e:	087b      	lsrs	r3, r7, #1
    6480:	4007      	ands	r7, r0
    6482:	431f      	orrs	r7, r3
    6484:	07e0      	lsls	r0, r4, #31
    6486:	4307      	orrs	r7, r0
    6488:	0864      	lsrs	r4, r4, #1
    648a:	e78b      	b.n	63a4 <__aeabi_dadd+0x108>
    648c:	0023      	movs	r3, r4
    648e:	433b      	orrs	r3, r7
    6490:	d100      	bne.n	6494 <__aeabi_dadd+0x1f8>
    6492:	e1cb      	b.n	682c <__aeabi_dadd+0x590>
    6494:	2280      	movs	r2, #128	; 0x80
    6496:	0312      	lsls	r2, r2, #12
    6498:	4314      	orrs	r4, r2
    649a:	0324      	lsls	r4, r4, #12
    649c:	0b24      	lsrs	r4, r4, #12
    649e:	e79e      	b.n	63de <__aeabi_dadd+0x142>
    64a0:	002e      	movs	r6, r5
    64a2:	e77f      	b.n	63a4 <__aeabi_dadd+0x108>
    64a4:	0008      	movs	r0, r1
    64a6:	4310      	orrs	r0, r2
    64a8:	d100      	bne.n	64ac <__aeabi_dadd+0x210>
    64aa:	e0b4      	b.n	6616 <__aeabi_dadd+0x37a>
    64ac:	1e58      	subs	r0, r3, #1
    64ae:	2800      	cmp	r0, #0
    64b0:	d000      	beq.n	64b4 <__aeabi_dadd+0x218>
    64b2:	e0de      	b.n	6672 <__aeabi_dadd+0x3d6>
    64b4:	18ba      	adds	r2, r7, r2
    64b6:	42ba      	cmp	r2, r7
    64b8:	419b      	sbcs	r3, r3
    64ba:	1864      	adds	r4, r4, r1
    64bc:	425b      	negs	r3, r3
    64be:	18e4      	adds	r4, r4, r3
    64c0:	0017      	movs	r7, r2
    64c2:	2601      	movs	r6, #1
    64c4:	0223      	lsls	r3, r4, #8
    64c6:	d5a6      	bpl.n	6416 <__aeabi_dadd+0x17a>
    64c8:	2602      	movs	r6, #2
    64ca:	e7d5      	b.n	6478 <__aeabi_dadd+0x1dc>
    64cc:	2d00      	cmp	r5, #0
    64ce:	d16e      	bne.n	65ae <__aeabi_dadd+0x312>
    64d0:	1c70      	adds	r0, r6, #1
    64d2:	0540      	lsls	r0, r0, #21
    64d4:	0d40      	lsrs	r0, r0, #21
    64d6:	2801      	cmp	r0, #1
    64d8:	dc00      	bgt.n	64dc <__aeabi_dadd+0x240>
    64da:	e0f9      	b.n	66d0 <__aeabi_dadd+0x434>
    64dc:	1ab8      	subs	r0, r7, r2
    64de:	4684      	mov	ip, r0
    64e0:	4287      	cmp	r7, r0
    64e2:	4180      	sbcs	r0, r0
    64e4:	1ae5      	subs	r5, r4, r3
    64e6:	4240      	negs	r0, r0
    64e8:	1a2d      	subs	r5, r5, r0
    64ea:	0228      	lsls	r0, r5, #8
    64ec:	d400      	bmi.n	64f0 <__aeabi_dadd+0x254>
    64ee:	e089      	b.n	6604 <__aeabi_dadd+0x368>
    64f0:	1bd7      	subs	r7, r2, r7
    64f2:	42ba      	cmp	r2, r7
    64f4:	4192      	sbcs	r2, r2
    64f6:	1b1c      	subs	r4, r3, r4
    64f8:	4252      	negs	r2, r2
    64fa:	1aa5      	subs	r5, r4, r2
    64fc:	46d8      	mov	r8, fp
    64fe:	e729      	b.n	6354 <__aeabi_dadd+0xb8>
    6500:	4645      	mov	r5, r8
    6502:	2400      	movs	r4, #0
    6504:	2700      	movs	r7, #0
    6506:	e76a      	b.n	63de <__aeabi_dadd+0x142>
    6508:	4c45      	ldr	r4, [pc, #276]	; (6620 <__aeabi_dadd+0x384>)
    650a:	1af6      	subs	r6, r6, r3
    650c:	402c      	ands	r4, r5
    650e:	e749      	b.n	63a4 <__aeabi_dadd+0x108>
    6510:	003d      	movs	r5, r7
    6512:	3828      	subs	r0, #40	; 0x28
    6514:	4085      	lsls	r5, r0
    6516:	2700      	movs	r7, #0
    6518:	e72e      	b.n	6378 <__aeabi_dadd+0xdc>
    651a:	0038      	movs	r0, r7
    651c:	f001 fb84 	bl	7c28 <__clzsi2>
    6520:	3020      	adds	r0, #32
    6522:	e71d      	b.n	6360 <__aeabi_dadd+0xc4>
    6524:	430a      	orrs	r2, r1
    6526:	1e51      	subs	r1, r2, #1
    6528:	418a      	sbcs	r2, r1
    652a:	2100      	movs	r1, #0
    652c:	e707      	b.n	633e <__aeabi_dadd+0xa2>
    652e:	2b00      	cmp	r3, #0
    6530:	d000      	beq.n	6534 <__aeabi_dadd+0x298>
    6532:	e0f3      	b.n	671c <__aeabi_dadd+0x480>
    6534:	1c70      	adds	r0, r6, #1
    6536:	0543      	lsls	r3, r0, #21
    6538:	0d5b      	lsrs	r3, r3, #21
    653a:	2b01      	cmp	r3, #1
    653c:	dc00      	bgt.n	6540 <__aeabi_dadd+0x2a4>
    653e:	e0ad      	b.n	669c <__aeabi_dadd+0x400>
    6540:	4b36      	ldr	r3, [pc, #216]	; (661c <__aeabi_dadd+0x380>)
    6542:	4298      	cmp	r0, r3
    6544:	d100      	bne.n	6548 <__aeabi_dadd+0x2ac>
    6546:	e0d1      	b.n	66ec <__aeabi_dadd+0x450>
    6548:	18ba      	adds	r2, r7, r2
    654a:	42ba      	cmp	r2, r7
    654c:	41bf      	sbcs	r7, r7
    654e:	1864      	adds	r4, r4, r1
    6550:	427f      	negs	r7, r7
    6552:	19e4      	adds	r4, r4, r7
    6554:	07e7      	lsls	r7, r4, #31
    6556:	0852      	lsrs	r2, r2, #1
    6558:	4317      	orrs	r7, r2
    655a:	0864      	lsrs	r4, r4, #1
    655c:	0006      	movs	r6, r0
    655e:	e721      	b.n	63a4 <__aeabi_dadd+0x108>
    6560:	482e      	ldr	r0, [pc, #184]	; (661c <__aeabi_dadd+0x380>)
    6562:	4285      	cmp	r5, r0
    6564:	d100      	bne.n	6568 <__aeabi_dadd+0x2cc>
    6566:	e093      	b.n	6690 <__aeabi_dadd+0x3f4>
    6568:	001d      	movs	r5, r3
    656a:	e6d0      	b.n	630e <__aeabi_dadd+0x72>
    656c:	0029      	movs	r1, r5
    656e:	3e1f      	subs	r6, #31
    6570:	40f1      	lsrs	r1, r6
    6572:	2b20      	cmp	r3, #32
    6574:	d100      	bne.n	6578 <__aeabi_dadd+0x2dc>
    6576:	e08d      	b.n	6694 <__aeabi_dadd+0x3f8>
    6578:	2240      	movs	r2, #64	; 0x40
    657a:	1ad3      	subs	r3, r2, r3
    657c:	409d      	lsls	r5, r3
    657e:	432f      	orrs	r7, r5
    6580:	1e7d      	subs	r5, r7, #1
    6582:	41af      	sbcs	r7, r5
    6584:	2400      	movs	r4, #0
    6586:	430f      	orrs	r7, r1
    6588:	2600      	movs	r6, #0
    658a:	e744      	b.n	6416 <__aeabi_dadd+0x17a>
    658c:	002b      	movs	r3, r5
    658e:	0008      	movs	r0, r1
    6590:	3b20      	subs	r3, #32
    6592:	40d8      	lsrs	r0, r3
    6594:	0003      	movs	r3, r0
    6596:	2d20      	cmp	r5, #32
    6598:	d100      	bne.n	659c <__aeabi_dadd+0x300>
    659a:	e07d      	b.n	6698 <__aeabi_dadd+0x3fc>
    659c:	2040      	movs	r0, #64	; 0x40
    659e:	1b45      	subs	r5, r0, r5
    65a0:	40a9      	lsls	r1, r5
    65a2:	430a      	orrs	r2, r1
    65a4:	1e51      	subs	r1, r2, #1
    65a6:	418a      	sbcs	r2, r1
    65a8:	2100      	movs	r1, #0
    65aa:	431a      	orrs	r2, r3
    65ac:	e6c7      	b.n	633e <__aeabi_dadd+0xa2>
    65ae:	2e00      	cmp	r6, #0
    65b0:	d050      	beq.n	6654 <__aeabi_dadd+0x3b8>
    65b2:	4e1a      	ldr	r6, [pc, #104]	; (661c <__aeabi_dadd+0x380>)
    65b4:	42b0      	cmp	r0, r6
    65b6:	d057      	beq.n	6668 <__aeabi_dadd+0x3cc>
    65b8:	2680      	movs	r6, #128	; 0x80
    65ba:	426b      	negs	r3, r5
    65bc:	4699      	mov	r9, r3
    65be:	0436      	lsls	r6, r6, #16
    65c0:	4334      	orrs	r4, r6
    65c2:	464b      	mov	r3, r9
    65c4:	2b38      	cmp	r3, #56	; 0x38
    65c6:	dd00      	ble.n	65ca <__aeabi_dadd+0x32e>
    65c8:	e0d6      	b.n	6778 <__aeabi_dadd+0x4dc>
    65ca:	2b1f      	cmp	r3, #31
    65cc:	dd00      	ble.n	65d0 <__aeabi_dadd+0x334>
    65ce:	e135      	b.n	683c <__aeabi_dadd+0x5a0>
    65d0:	2620      	movs	r6, #32
    65d2:	1af5      	subs	r5, r6, r3
    65d4:	0026      	movs	r6, r4
    65d6:	40ae      	lsls	r6, r5
    65d8:	46b2      	mov	sl, r6
    65da:	003e      	movs	r6, r7
    65dc:	40de      	lsrs	r6, r3
    65de:	46ac      	mov	ip, r5
    65e0:	0035      	movs	r5, r6
    65e2:	4656      	mov	r6, sl
    65e4:	432e      	orrs	r6, r5
    65e6:	4665      	mov	r5, ip
    65e8:	40af      	lsls	r7, r5
    65ea:	1e7d      	subs	r5, r7, #1
    65ec:	41af      	sbcs	r7, r5
    65ee:	40dc      	lsrs	r4, r3
    65f0:	4337      	orrs	r7, r6
    65f2:	1bd7      	subs	r7, r2, r7
    65f4:	42ba      	cmp	r2, r7
    65f6:	4192      	sbcs	r2, r2
    65f8:	1b0c      	subs	r4, r1, r4
    65fa:	4252      	negs	r2, r2
    65fc:	1aa4      	subs	r4, r4, r2
    65fe:	0006      	movs	r6, r0
    6600:	46d8      	mov	r8, fp
    6602:	e6a3      	b.n	634c <__aeabi_dadd+0xb0>
    6604:	4664      	mov	r4, ip
    6606:	4667      	mov	r7, ip
    6608:	432c      	orrs	r4, r5
    660a:	d000      	beq.n	660e <__aeabi_dadd+0x372>
    660c:	e6a2      	b.n	6354 <__aeabi_dadd+0xb8>
    660e:	2500      	movs	r5, #0
    6610:	2600      	movs	r6, #0
    6612:	2700      	movs	r7, #0
    6614:	e706      	b.n	6424 <__aeabi_dadd+0x188>
    6616:	001e      	movs	r6, r3
    6618:	e6c4      	b.n	63a4 <__aeabi_dadd+0x108>
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	000007ff 	.word	0x000007ff
    6620:	ff7fffff 	.word	0xff7fffff
    6624:	800fffff 	.word	0x800fffff
    6628:	2b1f      	cmp	r3, #31
    662a:	dc63      	bgt.n	66f4 <__aeabi_dadd+0x458>
    662c:	2020      	movs	r0, #32
    662e:	1ac3      	subs	r3, r0, r3
    6630:	0008      	movs	r0, r1
    6632:	4098      	lsls	r0, r3
    6634:	469c      	mov	ip, r3
    6636:	4683      	mov	fp, r0
    6638:	4653      	mov	r3, sl
    663a:	0010      	movs	r0, r2
    663c:	40d8      	lsrs	r0, r3
    663e:	0003      	movs	r3, r0
    6640:	4658      	mov	r0, fp
    6642:	4318      	orrs	r0, r3
    6644:	4663      	mov	r3, ip
    6646:	409a      	lsls	r2, r3
    6648:	1e53      	subs	r3, r2, #1
    664a:	419a      	sbcs	r2, r3
    664c:	4653      	mov	r3, sl
    664e:	4302      	orrs	r2, r0
    6650:	40d9      	lsrs	r1, r3
    6652:	e703      	b.n	645c <__aeabi_dadd+0x1c0>
    6654:	0026      	movs	r6, r4
    6656:	433e      	orrs	r6, r7
    6658:	d006      	beq.n	6668 <__aeabi_dadd+0x3cc>
    665a:	43eb      	mvns	r3, r5
    665c:	4699      	mov	r9, r3
    665e:	2b00      	cmp	r3, #0
    6660:	d0c7      	beq.n	65f2 <__aeabi_dadd+0x356>
    6662:	4e94      	ldr	r6, [pc, #592]	; (68b4 <__aeabi_dadd+0x618>)
    6664:	42b0      	cmp	r0, r6
    6666:	d1ac      	bne.n	65c2 <__aeabi_dadd+0x326>
    6668:	000c      	movs	r4, r1
    666a:	0017      	movs	r7, r2
    666c:	0006      	movs	r6, r0
    666e:	46d8      	mov	r8, fp
    6670:	e698      	b.n	63a4 <__aeabi_dadd+0x108>
    6672:	4b90      	ldr	r3, [pc, #576]	; (68b4 <__aeabi_dadd+0x618>)
    6674:	459a      	cmp	sl, r3
    6676:	d00b      	beq.n	6690 <__aeabi_dadd+0x3f4>
    6678:	4682      	mov	sl, r0
    667a:	e6e7      	b.n	644c <__aeabi_dadd+0x1b0>
    667c:	2800      	cmp	r0, #0
    667e:	d000      	beq.n	6682 <__aeabi_dadd+0x3e6>
    6680:	e09e      	b.n	67c0 <__aeabi_dadd+0x524>
    6682:	0018      	movs	r0, r3
    6684:	4310      	orrs	r0, r2
    6686:	d100      	bne.n	668a <__aeabi_dadd+0x3ee>
    6688:	e0e9      	b.n	685e <__aeabi_dadd+0x5c2>
    668a:	001c      	movs	r4, r3
    668c:	0017      	movs	r7, r2
    668e:	46d8      	mov	r8, fp
    6690:	4e88      	ldr	r6, [pc, #544]	; (68b4 <__aeabi_dadd+0x618>)
    6692:	e687      	b.n	63a4 <__aeabi_dadd+0x108>
    6694:	2500      	movs	r5, #0
    6696:	e772      	b.n	657e <__aeabi_dadd+0x2e2>
    6698:	2100      	movs	r1, #0
    669a:	e782      	b.n	65a2 <__aeabi_dadd+0x306>
    669c:	0023      	movs	r3, r4
    669e:	433b      	orrs	r3, r7
    66a0:	2e00      	cmp	r6, #0
    66a2:	d000      	beq.n	66a6 <__aeabi_dadd+0x40a>
    66a4:	e0ab      	b.n	67fe <__aeabi_dadd+0x562>
    66a6:	2b00      	cmp	r3, #0
    66a8:	d100      	bne.n	66ac <__aeabi_dadd+0x410>
    66aa:	e0e7      	b.n	687c <__aeabi_dadd+0x5e0>
    66ac:	000b      	movs	r3, r1
    66ae:	4313      	orrs	r3, r2
    66b0:	d100      	bne.n	66b4 <__aeabi_dadd+0x418>
    66b2:	e677      	b.n	63a4 <__aeabi_dadd+0x108>
    66b4:	18ba      	adds	r2, r7, r2
    66b6:	42ba      	cmp	r2, r7
    66b8:	41bf      	sbcs	r7, r7
    66ba:	1864      	adds	r4, r4, r1
    66bc:	427f      	negs	r7, r7
    66be:	19e4      	adds	r4, r4, r7
    66c0:	0223      	lsls	r3, r4, #8
    66c2:	d400      	bmi.n	66c6 <__aeabi_dadd+0x42a>
    66c4:	e0f2      	b.n	68ac <__aeabi_dadd+0x610>
    66c6:	4b7c      	ldr	r3, [pc, #496]	; (68b8 <__aeabi_dadd+0x61c>)
    66c8:	0017      	movs	r7, r2
    66ca:	401c      	ands	r4, r3
    66cc:	0006      	movs	r6, r0
    66ce:	e669      	b.n	63a4 <__aeabi_dadd+0x108>
    66d0:	0020      	movs	r0, r4
    66d2:	4338      	orrs	r0, r7
    66d4:	2e00      	cmp	r6, #0
    66d6:	d1d1      	bne.n	667c <__aeabi_dadd+0x3e0>
    66d8:	2800      	cmp	r0, #0
    66da:	d15b      	bne.n	6794 <__aeabi_dadd+0x4f8>
    66dc:	001c      	movs	r4, r3
    66de:	4314      	orrs	r4, r2
    66e0:	d100      	bne.n	66e4 <__aeabi_dadd+0x448>
    66e2:	e0a8      	b.n	6836 <__aeabi_dadd+0x59a>
    66e4:	001c      	movs	r4, r3
    66e6:	0017      	movs	r7, r2
    66e8:	46d8      	mov	r8, fp
    66ea:	e65b      	b.n	63a4 <__aeabi_dadd+0x108>
    66ec:	0006      	movs	r6, r0
    66ee:	2400      	movs	r4, #0
    66f0:	2700      	movs	r7, #0
    66f2:	e697      	b.n	6424 <__aeabi_dadd+0x188>
    66f4:	4650      	mov	r0, sl
    66f6:	000b      	movs	r3, r1
    66f8:	3820      	subs	r0, #32
    66fa:	40c3      	lsrs	r3, r0
    66fc:	4699      	mov	r9, r3
    66fe:	4653      	mov	r3, sl
    6700:	2b20      	cmp	r3, #32
    6702:	d100      	bne.n	6706 <__aeabi_dadd+0x46a>
    6704:	e095      	b.n	6832 <__aeabi_dadd+0x596>
    6706:	2340      	movs	r3, #64	; 0x40
    6708:	4650      	mov	r0, sl
    670a:	1a1b      	subs	r3, r3, r0
    670c:	4099      	lsls	r1, r3
    670e:	430a      	orrs	r2, r1
    6710:	1e51      	subs	r1, r2, #1
    6712:	418a      	sbcs	r2, r1
    6714:	464b      	mov	r3, r9
    6716:	2100      	movs	r1, #0
    6718:	431a      	orrs	r2, r3
    671a:	e69f      	b.n	645c <__aeabi_dadd+0x1c0>
    671c:	2e00      	cmp	r6, #0
    671e:	d130      	bne.n	6782 <__aeabi_dadd+0x4e6>
    6720:	0026      	movs	r6, r4
    6722:	433e      	orrs	r6, r7
    6724:	d067      	beq.n	67f6 <__aeabi_dadd+0x55a>
    6726:	43db      	mvns	r3, r3
    6728:	469a      	mov	sl, r3
    672a:	2b00      	cmp	r3, #0
    672c:	d01c      	beq.n	6768 <__aeabi_dadd+0x4cc>
    672e:	4e61      	ldr	r6, [pc, #388]	; (68b4 <__aeabi_dadd+0x618>)
    6730:	42b0      	cmp	r0, r6
    6732:	d060      	beq.n	67f6 <__aeabi_dadd+0x55a>
    6734:	4653      	mov	r3, sl
    6736:	2b38      	cmp	r3, #56	; 0x38
    6738:	dd00      	ble.n	673c <__aeabi_dadd+0x4a0>
    673a:	e096      	b.n	686a <__aeabi_dadd+0x5ce>
    673c:	2b1f      	cmp	r3, #31
    673e:	dd00      	ble.n	6742 <__aeabi_dadd+0x4a6>
    6740:	e09f      	b.n	6882 <__aeabi_dadd+0x5e6>
    6742:	2620      	movs	r6, #32
    6744:	1af3      	subs	r3, r6, r3
    6746:	0026      	movs	r6, r4
    6748:	409e      	lsls	r6, r3
    674a:	469c      	mov	ip, r3
    674c:	46b3      	mov	fp, r6
    674e:	4653      	mov	r3, sl
    6750:	003e      	movs	r6, r7
    6752:	40de      	lsrs	r6, r3
    6754:	0033      	movs	r3, r6
    6756:	465e      	mov	r6, fp
    6758:	431e      	orrs	r6, r3
    675a:	4663      	mov	r3, ip
    675c:	409f      	lsls	r7, r3
    675e:	1e7b      	subs	r3, r7, #1
    6760:	419f      	sbcs	r7, r3
    6762:	4653      	mov	r3, sl
    6764:	40dc      	lsrs	r4, r3
    6766:	4337      	orrs	r7, r6
    6768:	18bf      	adds	r7, r7, r2
    676a:	4297      	cmp	r7, r2
    676c:	4192      	sbcs	r2, r2
    676e:	1864      	adds	r4, r4, r1
    6770:	4252      	negs	r2, r2
    6772:	18a4      	adds	r4, r4, r2
    6774:	0006      	movs	r6, r0
    6776:	e678      	b.n	646a <__aeabi_dadd+0x1ce>
    6778:	4327      	orrs	r7, r4
    677a:	1e7c      	subs	r4, r7, #1
    677c:	41a7      	sbcs	r7, r4
    677e:	2400      	movs	r4, #0
    6780:	e737      	b.n	65f2 <__aeabi_dadd+0x356>
    6782:	4e4c      	ldr	r6, [pc, #304]	; (68b4 <__aeabi_dadd+0x618>)
    6784:	42b0      	cmp	r0, r6
    6786:	d036      	beq.n	67f6 <__aeabi_dadd+0x55a>
    6788:	2680      	movs	r6, #128	; 0x80
    678a:	425b      	negs	r3, r3
    678c:	0436      	lsls	r6, r6, #16
    678e:	469a      	mov	sl, r3
    6790:	4334      	orrs	r4, r6
    6792:	e7cf      	b.n	6734 <__aeabi_dadd+0x498>
    6794:	0018      	movs	r0, r3
    6796:	4310      	orrs	r0, r2
    6798:	d100      	bne.n	679c <__aeabi_dadd+0x500>
    679a:	e603      	b.n	63a4 <__aeabi_dadd+0x108>
    679c:	1ab8      	subs	r0, r7, r2
    679e:	4684      	mov	ip, r0
    67a0:	4567      	cmp	r7, ip
    67a2:	41ad      	sbcs	r5, r5
    67a4:	1ae0      	subs	r0, r4, r3
    67a6:	426d      	negs	r5, r5
    67a8:	1b40      	subs	r0, r0, r5
    67aa:	0205      	lsls	r5, r0, #8
    67ac:	d400      	bmi.n	67b0 <__aeabi_dadd+0x514>
    67ae:	e62c      	b.n	640a <__aeabi_dadd+0x16e>
    67b0:	1bd7      	subs	r7, r2, r7
    67b2:	42ba      	cmp	r2, r7
    67b4:	4192      	sbcs	r2, r2
    67b6:	1b1c      	subs	r4, r3, r4
    67b8:	4252      	negs	r2, r2
    67ba:	1aa4      	subs	r4, r4, r2
    67bc:	46d8      	mov	r8, fp
    67be:	e5f1      	b.n	63a4 <__aeabi_dadd+0x108>
    67c0:	0018      	movs	r0, r3
    67c2:	4310      	orrs	r0, r2
    67c4:	d100      	bne.n	67c8 <__aeabi_dadd+0x52c>
    67c6:	e763      	b.n	6690 <__aeabi_dadd+0x3f4>
    67c8:	08f8      	lsrs	r0, r7, #3
    67ca:	0767      	lsls	r7, r4, #29
    67cc:	4307      	orrs	r7, r0
    67ce:	2080      	movs	r0, #128	; 0x80
    67d0:	08e4      	lsrs	r4, r4, #3
    67d2:	0300      	lsls	r0, r0, #12
    67d4:	4204      	tst	r4, r0
    67d6:	d008      	beq.n	67ea <__aeabi_dadd+0x54e>
    67d8:	08dd      	lsrs	r5, r3, #3
    67da:	4205      	tst	r5, r0
    67dc:	d105      	bne.n	67ea <__aeabi_dadd+0x54e>
    67de:	08d2      	lsrs	r2, r2, #3
    67e0:	0759      	lsls	r1, r3, #29
    67e2:	4311      	orrs	r1, r2
    67e4:	000f      	movs	r7, r1
    67e6:	002c      	movs	r4, r5
    67e8:	46d8      	mov	r8, fp
    67ea:	0f7b      	lsrs	r3, r7, #29
    67ec:	00e4      	lsls	r4, r4, #3
    67ee:	431c      	orrs	r4, r3
    67f0:	00ff      	lsls	r7, r7, #3
    67f2:	4e30      	ldr	r6, [pc, #192]	; (68b4 <__aeabi_dadd+0x618>)
    67f4:	e5d6      	b.n	63a4 <__aeabi_dadd+0x108>
    67f6:	000c      	movs	r4, r1
    67f8:	0017      	movs	r7, r2
    67fa:	0006      	movs	r6, r0
    67fc:	e5d2      	b.n	63a4 <__aeabi_dadd+0x108>
    67fe:	2b00      	cmp	r3, #0
    6800:	d038      	beq.n	6874 <__aeabi_dadd+0x5d8>
    6802:	000b      	movs	r3, r1
    6804:	4313      	orrs	r3, r2
    6806:	d100      	bne.n	680a <__aeabi_dadd+0x56e>
    6808:	e742      	b.n	6690 <__aeabi_dadd+0x3f4>
    680a:	08f8      	lsrs	r0, r7, #3
    680c:	0767      	lsls	r7, r4, #29
    680e:	4307      	orrs	r7, r0
    6810:	2080      	movs	r0, #128	; 0x80
    6812:	08e4      	lsrs	r4, r4, #3
    6814:	0300      	lsls	r0, r0, #12
    6816:	4204      	tst	r4, r0
    6818:	d0e7      	beq.n	67ea <__aeabi_dadd+0x54e>
    681a:	08cb      	lsrs	r3, r1, #3
    681c:	4203      	tst	r3, r0
    681e:	d1e4      	bne.n	67ea <__aeabi_dadd+0x54e>
    6820:	08d2      	lsrs	r2, r2, #3
    6822:	0749      	lsls	r1, r1, #29
    6824:	4311      	orrs	r1, r2
    6826:	000f      	movs	r7, r1
    6828:	001c      	movs	r4, r3
    682a:	e7de      	b.n	67ea <__aeabi_dadd+0x54e>
    682c:	2700      	movs	r7, #0
    682e:	2400      	movs	r4, #0
    6830:	e5d5      	b.n	63de <__aeabi_dadd+0x142>
    6832:	2100      	movs	r1, #0
    6834:	e76b      	b.n	670e <__aeabi_dadd+0x472>
    6836:	2500      	movs	r5, #0
    6838:	2700      	movs	r7, #0
    683a:	e5f3      	b.n	6424 <__aeabi_dadd+0x188>
    683c:	464e      	mov	r6, r9
    683e:	0025      	movs	r5, r4
    6840:	3e20      	subs	r6, #32
    6842:	40f5      	lsrs	r5, r6
    6844:	464b      	mov	r3, r9
    6846:	002e      	movs	r6, r5
    6848:	2b20      	cmp	r3, #32
    684a:	d02d      	beq.n	68a8 <__aeabi_dadd+0x60c>
    684c:	2540      	movs	r5, #64	; 0x40
    684e:	1aed      	subs	r5, r5, r3
    6850:	40ac      	lsls	r4, r5
    6852:	4327      	orrs	r7, r4
    6854:	1e7c      	subs	r4, r7, #1
    6856:	41a7      	sbcs	r7, r4
    6858:	2400      	movs	r4, #0
    685a:	4337      	orrs	r7, r6
    685c:	e6c9      	b.n	65f2 <__aeabi_dadd+0x356>
    685e:	2480      	movs	r4, #128	; 0x80
    6860:	2500      	movs	r5, #0
    6862:	0324      	lsls	r4, r4, #12
    6864:	4e13      	ldr	r6, [pc, #76]	; (68b4 <__aeabi_dadd+0x618>)
    6866:	2700      	movs	r7, #0
    6868:	e5dc      	b.n	6424 <__aeabi_dadd+0x188>
    686a:	4327      	orrs	r7, r4
    686c:	1e7c      	subs	r4, r7, #1
    686e:	41a7      	sbcs	r7, r4
    6870:	2400      	movs	r4, #0
    6872:	e779      	b.n	6768 <__aeabi_dadd+0x4cc>
    6874:	000c      	movs	r4, r1
    6876:	0017      	movs	r7, r2
    6878:	4e0e      	ldr	r6, [pc, #56]	; (68b4 <__aeabi_dadd+0x618>)
    687a:	e593      	b.n	63a4 <__aeabi_dadd+0x108>
    687c:	000c      	movs	r4, r1
    687e:	0017      	movs	r7, r2
    6880:	e590      	b.n	63a4 <__aeabi_dadd+0x108>
    6882:	4656      	mov	r6, sl
    6884:	0023      	movs	r3, r4
    6886:	3e20      	subs	r6, #32
    6888:	40f3      	lsrs	r3, r6
    688a:	4699      	mov	r9, r3
    688c:	4653      	mov	r3, sl
    688e:	2b20      	cmp	r3, #32
    6890:	d00e      	beq.n	68b0 <__aeabi_dadd+0x614>
    6892:	2340      	movs	r3, #64	; 0x40
    6894:	4656      	mov	r6, sl
    6896:	1b9b      	subs	r3, r3, r6
    6898:	409c      	lsls	r4, r3
    689a:	4327      	orrs	r7, r4
    689c:	1e7c      	subs	r4, r7, #1
    689e:	41a7      	sbcs	r7, r4
    68a0:	464b      	mov	r3, r9
    68a2:	2400      	movs	r4, #0
    68a4:	431f      	orrs	r7, r3
    68a6:	e75f      	b.n	6768 <__aeabi_dadd+0x4cc>
    68a8:	2400      	movs	r4, #0
    68aa:	e7d2      	b.n	6852 <__aeabi_dadd+0x5b6>
    68ac:	0017      	movs	r7, r2
    68ae:	e5b2      	b.n	6416 <__aeabi_dadd+0x17a>
    68b0:	2400      	movs	r4, #0
    68b2:	e7f2      	b.n	689a <__aeabi_dadd+0x5fe>
    68b4:	000007ff 	.word	0x000007ff
    68b8:	ff7fffff 	.word	0xff7fffff

000068bc <__aeabi_ddiv>:
    68bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68be:	4657      	mov	r7, sl
    68c0:	4645      	mov	r5, r8
    68c2:	46de      	mov	lr, fp
    68c4:	464e      	mov	r6, r9
    68c6:	b5e0      	push	{r5, r6, r7, lr}
    68c8:	004c      	lsls	r4, r1, #1
    68ca:	030e      	lsls	r6, r1, #12
    68cc:	b087      	sub	sp, #28
    68ce:	4683      	mov	fp, r0
    68d0:	4692      	mov	sl, r2
    68d2:	001d      	movs	r5, r3
    68d4:	4680      	mov	r8, r0
    68d6:	0b36      	lsrs	r6, r6, #12
    68d8:	0d64      	lsrs	r4, r4, #21
    68da:	0fcf      	lsrs	r7, r1, #31
    68dc:	2c00      	cmp	r4, #0
    68de:	d04f      	beq.n	6980 <__aeabi_ddiv+0xc4>
    68e0:	4b6f      	ldr	r3, [pc, #444]	; (6aa0 <__aeabi_ddiv+0x1e4>)
    68e2:	429c      	cmp	r4, r3
    68e4:	d035      	beq.n	6952 <__aeabi_ddiv+0x96>
    68e6:	2380      	movs	r3, #128	; 0x80
    68e8:	0f42      	lsrs	r2, r0, #29
    68ea:	041b      	lsls	r3, r3, #16
    68ec:	00f6      	lsls	r6, r6, #3
    68ee:	4313      	orrs	r3, r2
    68f0:	4333      	orrs	r3, r6
    68f2:	4699      	mov	r9, r3
    68f4:	00c3      	lsls	r3, r0, #3
    68f6:	4698      	mov	r8, r3
    68f8:	4b6a      	ldr	r3, [pc, #424]	; (6aa4 <__aeabi_ddiv+0x1e8>)
    68fa:	2600      	movs	r6, #0
    68fc:	469c      	mov	ip, r3
    68fe:	2300      	movs	r3, #0
    6900:	4464      	add	r4, ip
    6902:	9303      	str	r3, [sp, #12]
    6904:	032b      	lsls	r3, r5, #12
    6906:	0b1b      	lsrs	r3, r3, #12
    6908:	469b      	mov	fp, r3
    690a:	006b      	lsls	r3, r5, #1
    690c:	0fed      	lsrs	r5, r5, #31
    690e:	4650      	mov	r0, sl
    6910:	0d5b      	lsrs	r3, r3, #21
    6912:	9501      	str	r5, [sp, #4]
    6914:	d05e      	beq.n	69d4 <__aeabi_ddiv+0x118>
    6916:	4a62      	ldr	r2, [pc, #392]	; (6aa0 <__aeabi_ddiv+0x1e4>)
    6918:	4293      	cmp	r3, r2
    691a:	d053      	beq.n	69c4 <__aeabi_ddiv+0x108>
    691c:	465a      	mov	r2, fp
    691e:	00d1      	lsls	r1, r2, #3
    6920:	2280      	movs	r2, #128	; 0x80
    6922:	0f40      	lsrs	r0, r0, #29
    6924:	0412      	lsls	r2, r2, #16
    6926:	4302      	orrs	r2, r0
    6928:	430a      	orrs	r2, r1
    692a:	4693      	mov	fp, r2
    692c:	4652      	mov	r2, sl
    692e:	00d1      	lsls	r1, r2, #3
    6930:	4a5c      	ldr	r2, [pc, #368]	; (6aa4 <__aeabi_ddiv+0x1e8>)
    6932:	4694      	mov	ip, r2
    6934:	2200      	movs	r2, #0
    6936:	4463      	add	r3, ip
    6938:	0038      	movs	r0, r7
    693a:	4068      	eors	r0, r5
    693c:	4684      	mov	ip, r0
    693e:	9002      	str	r0, [sp, #8]
    6940:	1ae4      	subs	r4, r4, r3
    6942:	4316      	orrs	r6, r2
    6944:	2e0f      	cmp	r6, #15
    6946:	d900      	bls.n	694a <__aeabi_ddiv+0x8e>
    6948:	e0b4      	b.n	6ab4 <__aeabi_ddiv+0x1f8>
    694a:	4b57      	ldr	r3, [pc, #348]	; (6aa8 <__aeabi_ddiv+0x1ec>)
    694c:	00b6      	lsls	r6, r6, #2
    694e:	599b      	ldr	r3, [r3, r6]
    6950:	469f      	mov	pc, r3
    6952:	0003      	movs	r3, r0
    6954:	4333      	orrs	r3, r6
    6956:	4699      	mov	r9, r3
    6958:	d16c      	bne.n	6a34 <__aeabi_ddiv+0x178>
    695a:	2300      	movs	r3, #0
    695c:	4698      	mov	r8, r3
    695e:	3302      	adds	r3, #2
    6960:	2608      	movs	r6, #8
    6962:	9303      	str	r3, [sp, #12]
    6964:	e7ce      	b.n	6904 <__aeabi_ddiv+0x48>
    6966:	46cb      	mov	fp, r9
    6968:	4641      	mov	r1, r8
    696a:	9a03      	ldr	r2, [sp, #12]
    696c:	9701      	str	r7, [sp, #4]
    696e:	2a02      	cmp	r2, #2
    6970:	d165      	bne.n	6a3e <__aeabi_ddiv+0x182>
    6972:	9b01      	ldr	r3, [sp, #4]
    6974:	4c4a      	ldr	r4, [pc, #296]	; (6aa0 <__aeabi_ddiv+0x1e4>)
    6976:	469c      	mov	ip, r3
    6978:	2300      	movs	r3, #0
    697a:	2200      	movs	r2, #0
    697c:	4698      	mov	r8, r3
    697e:	e06b      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6980:	0003      	movs	r3, r0
    6982:	4333      	orrs	r3, r6
    6984:	4699      	mov	r9, r3
    6986:	d04e      	beq.n	6a26 <__aeabi_ddiv+0x16a>
    6988:	2e00      	cmp	r6, #0
    698a:	d100      	bne.n	698e <__aeabi_ddiv+0xd2>
    698c:	e1bc      	b.n	6d08 <__aeabi_ddiv+0x44c>
    698e:	0030      	movs	r0, r6
    6990:	f001 f94a 	bl	7c28 <__clzsi2>
    6994:	0003      	movs	r3, r0
    6996:	3b0b      	subs	r3, #11
    6998:	2b1c      	cmp	r3, #28
    699a:	dd00      	ble.n	699e <__aeabi_ddiv+0xe2>
    699c:	e1ac      	b.n	6cf8 <__aeabi_ddiv+0x43c>
    699e:	221d      	movs	r2, #29
    69a0:	1ad3      	subs	r3, r2, r3
    69a2:	465a      	mov	r2, fp
    69a4:	0001      	movs	r1, r0
    69a6:	40da      	lsrs	r2, r3
    69a8:	3908      	subs	r1, #8
    69aa:	408e      	lsls	r6, r1
    69ac:	0013      	movs	r3, r2
    69ae:	4333      	orrs	r3, r6
    69b0:	4699      	mov	r9, r3
    69b2:	465b      	mov	r3, fp
    69b4:	408b      	lsls	r3, r1
    69b6:	4698      	mov	r8, r3
    69b8:	2300      	movs	r3, #0
    69ba:	4c3c      	ldr	r4, [pc, #240]	; (6aac <__aeabi_ddiv+0x1f0>)
    69bc:	2600      	movs	r6, #0
    69be:	1a24      	subs	r4, r4, r0
    69c0:	9303      	str	r3, [sp, #12]
    69c2:	e79f      	b.n	6904 <__aeabi_ddiv+0x48>
    69c4:	4651      	mov	r1, sl
    69c6:	465a      	mov	r2, fp
    69c8:	4311      	orrs	r1, r2
    69ca:	d129      	bne.n	6a20 <__aeabi_ddiv+0x164>
    69cc:	2200      	movs	r2, #0
    69ce:	4693      	mov	fp, r2
    69d0:	3202      	adds	r2, #2
    69d2:	e7b1      	b.n	6938 <__aeabi_ddiv+0x7c>
    69d4:	4659      	mov	r1, fp
    69d6:	4301      	orrs	r1, r0
    69d8:	d01e      	beq.n	6a18 <__aeabi_ddiv+0x15c>
    69da:	465b      	mov	r3, fp
    69dc:	2b00      	cmp	r3, #0
    69de:	d100      	bne.n	69e2 <__aeabi_ddiv+0x126>
    69e0:	e19e      	b.n	6d20 <__aeabi_ddiv+0x464>
    69e2:	4658      	mov	r0, fp
    69e4:	f001 f920 	bl	7c28 <__clzsi2>
    69e8:	0003      	movs	r3, r0
    69ea:	3b0b      	subs	r3, #11
    69ec:	2b1c      	cmp	r3, #28
    69ee:	dd00      	ble.n	69f2 <__aeabi_ddiv+0x136>
    69f0:	e18f      	b.n	6d12 <__aeabi_ddiv+0x456>
    69f2:	0002      	movs	r2, r0
    69f4:	4659      	mov	r1, fp
    69f6:	3a08      	subs	r2, #8
    69f8:	4091      	lsls	r1, r2
    69fa:	468b      	mov	fp, r1
    69fc:	211d      	movs	r1, #29
    69fe:	1acb      	subs	r3, r1, r3
    6a00:	4651      	mov	r1, sl
    6a02:	40d9      	lsrs	r1, r3
    6a04:	000b      	movs	r3, r1
    6a06:	4659      	mov	r1, fp
    6a08:	430b      	orrs	r3, r1
    6a0a:	4651      	mov	r1, sl
    6a0c:	469b      	mov	fp, r3
    6a0e:	4091      	lsls	r1, r2
    6a10:	4b26      	ldr	r3, [pc, #152]	; (6aac <__aeabi_ddiv+0x1f0>)
    6a12:	2200      	movs	r2, #0
    6a14:	1a1b      	subs	r3, r3, r0
    6a16:	e78f      	b.n	6938 <__aeabi_ddiv+0x7c>
    6a18:	2300      	movs	r3, #0
    6a1a:	2201      	movs	r2, #1
    6a1c:	469b      	mov	fp, r3
    6a1e:	e78b      	b.n	6938 <__aeabi_ddiv+0x7c>
    6a20:	4651      	mov	r1, sl
    6a22:	2203      	movs	r2, #3
    6a24:	e788      	b.n	6938 <__aeabi_ddiv+0x7c>
    6a26:	2300      	movs	r3, #0
    6a28:	4698      	mov	r8, r3
    6a2a:	3301      	adds	r3, #1
    6a2c:	2604      	movs	r6, #4
    6a2e:	2400      	movs	r4, #0
    6a30:	9303      	str	r3, [sp, #12]
    6a32:	e767      	b.n	6904 <__aeabi_ddiv+0x48>
    6a34:	2303      	movs	r3, #3
    6a36:	46b1      	mov	r9, r6
    6a38:	9303      	str	r3, [sp, #12]
    6a3a:	260c      	movs	r6, #12
    6a3c:	e762      	b.n	6904 <__aeabi_ddiv+0x48>
    6a3e:	2a03      	cmp	r2, #3
    6a40:	d100      	bne.n	6a44 <__aeabi_ddiv+0x188>
    6a42:	e25c      	b.n	6efe <__aeabi_ddiv+0x642>
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	2a01      	cmp	r2, #1
    6a48:	d000      	beq.n	6a4c <__aeabi_ddiv+0x190>
    6a4a:	e1e4      	b.n	6e16 <__aeabi_ddiv+0x55a>
    6a4c:	4013      	ands	r3, r2
    6a4e:	469c      	mov	ip, r3
    6a50:	2300      	movs	r3, #0
    6a52:	2400      	movs	r4, #0
    6a54:	2200      	movs	r2, #0
    6a56:	4698      	mov	r8, r3
    6a58:	2100      	movs	r1, #0
    6a5a:	0312      	lsls	r2, r2, #12
    6a5c:	0b13      	lsrs	r3, r2, #12
    6a5e:	0d0a      	lsrs	r2, r1, #20
    6a60:	0512      	lsls	r2, r2, #20
    6a62:	431a      	orrs	r2, r3
    6a64:	0523      	lsls	r3, r4, #20
    6a66:	4c12      	ldr	r4, [pc, #72]	; (6ab0 <__aeabi_ddiv+0x1f4>)
    6a68:	4640      	mov	r0, r8
    6a6a:	4022      	ands	r2, r4
    6a6c:	4313      	orrs	r3, r2
    6a6e:	4662      	mov	r2, ip
    6a70:	005b      	lsls	r3, r3, #1
    6a72:	07d2      	lsls	r2, r2, #31
    6a74:	085b      	lsrs	r3, r3, #1
    6a76:	4313      	orrs	r3, r2
    6a78:	0019      	movs	r1, r3
    6a7a:	b007      	add	sp, #28
    6a7c:	bc3c      	pop	{r2, r3, r4, r5}
    6a7e:	4690      	mov	r8, r2
    6a80:	4699      	mov	r9, r3
    6a82:	46a2      	mov	sl, r4
    6a84:	46ab      	mov	fp, r5
    6a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a88:	2300      	movs	r3, #0
    6a8a:	2280      	movs	r2, #128	; 0x80
    6a8c:	469c      	mov	ip, r3
    6a8e:	0312      	lsls	r2, r2, #12
    6a90:	4698      	mov	r8, r3
    6a92:	4c03      	ldr	r4, [pc, #12]	; (6aa0 <__aeabi_ddiv+0x1e4>)
    6a94:	e7e0      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6a96:	2300      	movs	r3, #0
    6a98:	4c01      	ldr	r4, [pc, #4]	; (6aa0 <__aeabi_ddiv+0x1e4>)
    6a9a:	2200      	movs	r2, #0
    6a9c:	4698      	mov	r8, r3
    6a9e:	e7db      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6aa0:	000007ff 	.word	0x000007ff
    6aa4:	fffffc01 	.word	0xfffffc01
    6aa8:	00009174 	.word	0x00009174
    6aac:	fffffc0d 	.word	0xfffffc0d
    6ab0:	800fffff 	.word	0x800fffff
    6ab4:	45d9      	cmp	r9, fp
    6ab6:	d900      	bls.n	6aba <__aeabi_ddiv+0x1fe>
    6ab8:	e139      	b.n	6d2e <__aeabi_ddiv+0x472>
    6aba:	d100      	bne.n	6abe <__aeabi_ddiv+0x202>
    6abc:	e134      	b.n	6d28 <__aeabi_ddiv+0x46c>
    6abe:	2300      	movs	r3, #0
    6ac0:	4646      	mov	r6, r8
    6ac2:	464d      	mov	r5, r9
    6ac4:	469a      	mov	sl, r3
    6ac6:	3c01      	subs	r4, #1
    6ac8:	465b      	mov	r3, fp
    6aca:	0e0a      	lsrs	r2, r1, #24
    6acc:	021b      	lsls	r3, r3, #8
    6ace:	431a      	orrs	r2, r3
    6ad0:	020b      	lsls	r3, r1, #8
    6ad2:	0c17      	lsrs	r7, r2, #16
    6ad4:	9303      	str	r3, [sp, #12]
    6ad6:	0413      	lsls	r3, r2, #16
    6ad8:	0c1b      	lsrs	r3, r3, #16
    6ada:	0039      	movs	r1, r7
    6adc:	0028      	movs	r0, r5
    6ade:	4690      	mov	r8, r2
    6ae0:	9301      	str	r3, [sp, #4]
    6ae2:	f7ff fb07 	bl	60f4 <__udivsi3>
    6ae6:	0002      	movs	r2, r0
    6ae8:	9b01      	ldr	r3, [sp, #4]
    6aea:	4683      	mov	fp, r0
    6aec:	435a      	muls	r2, r3
    6aee:	0028      	movs	r0, r5
    6af0:	0039      	movs	r1, r7
    6af2:	4691      	mov	r9, r2
    6af4:	f7ff fb84 	bl	6200 <__aeabi_uidivmod>
    6af8:	0c35      	lsrs	r5, r6, #16
    6afa:	0409      	lsls	r1, r1, #16
    6afc:	430d      	orrs	r5, r1
    6afe:	45a9      	cmp	r9, r5
    6b00:	d90d      	bls.n	6b1e <__aeabi_ddiv+0x262>
    6b02:	465b      	mov	r3, fp
    6b04:	4445      	add	r5, r8
    6b06:	3b01      	subs	r3, #1
    6b08:	45a8      	cmp	r8, r5
    6b0a:	d900      	bls.n	6b0e <__aeabi_ddiv+0x252>
    6b0c:	e13a      	b.n	6d84 <__aeabi_ddiv+0x4c8>
    6b0e:	45a9      	cmp	r9, r5
    6b10:	d800      	bhi.n	6b14 <__aeabi_ddiv+0x258>
    6b12:	e137      	b.n	6d84 <__aeabi_ddiv+0x4c8>
    6b14:	2302      	movs	r3, #2
    6b16:	425b      	negs	r3, r3
    6b18:	469c      	mov	ip, r3
    6b1a:	4445      	add	r5, r8
    6b1c:	44e3      	add	fp, ip
    6b1e:	464b      	mov	r3, r9
    6b20:	1aeb      	subs	r3, r5, r3
    6b22:	0039      	movs	r1, r7
    6b24:	0018      	movs	r0, r3
    6b26:	9304      	str	r3, [sp, #16]
    6b28:	f7ff fae4 	bl	60f4 <__udivsi3>
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	0005      	movs	r5, r0
    6b30:	4343      	muls	r3, r0
    6b32:	0039      	movs	r1, r7
    6b34:	9804      	ldr	r0, [sp, #16]
    6b36:	4699      	mov	r9, r3
    6b38:	f7ff fb62 	bl	6200 <__aeabi_uidivmod>
    6b3c:	0433      	lsls	r3, r6, #16
    6b3e:	0409      	lsls	r1, r1, #16
    6b40:	0c1b      	lsrs	r3, r3, #16
    6b42:	430b      	orrs	r3, r1
    6b44:	4599      	cmp	r9, r3
    6b46:	d909      	bls.n	6b5c <__aeabi_ddiv+0x2a0>
    6b48:	4443      	add	r3, r8
    6b4a:	1e6a      	subs	r2, r5, #1
    6b4c:	4598      	cmp	r8, r3
    6b4e:	d900      	bls.n	6b52 <__aeabi_ddiv+0x296>
    6b50:	e11a      	b.n	6d88 <__aeabi_ddiv+0x4cc>
    6b52:	4599      	cmp	r9, r3
    6b54:	d800      	bhi.n	6b58 <__aeabi_ddiv+0x29c>
    6b56:	e117      	b.n	6d88 <__aeabi_ddiv+0x4cc>
    6b58:	3d02      	subs	r5, #2
    6b5a:	4443      	add	r3, r8
    6b5c:	464a      	mov	r2, r9
    6b5e:	1a9b      	subs	r3, r3, r2
    6b60:	465a      	mov	r2, fp
    6b62:	0412      	lsls	r2, r2, #16
    6b64:	432a      	orrs	r2, r5
    6b66:	9903      	ldr	r1, [sp, #12]
    6b68:	4693      	mov	fp, r2
    6b6a:	0c10      	lsrs	r0, r2, #16
    6b6c:	0c0a      	lsrs	r2, r1, #16
    6b6e:	4691      	mov	r9, r2
    6b70:	0409      	lsls	r1, r1, #16
    6b72:	465a      	mov	r2, fp
    6b74:	0c09      	lsrs	r1, r1, #16
    6b76:	464e      	mov	r6, r9
    6b78:	000d      	movs	r5, r1
    6b7a:	0412      	lsls	r2, r2, #16
    6b7c:	0c12      	lsrs	r2, r2, #16
    6b7e:	4345      	muls	r5, r0
    6b80:	9105      	str	r1, [sp, #20]
    6b82:	4351      	muls	r1, r2
    6b84:	4372      	muls	r2, r6
    6b86:	4370      	muls	r0, r6
    6b88:	1952      	adds	r2, r2, r5
    6b8a:	0c0e      	lsrs	r6, r1, #16
    6b8c:	18b2      	adds	r2, r6, r2
    6b8e:	4295      	cmp	r5, r2
    6b90:	d903      	bls.n	6b9a <__aeabi_ddiv+0x2de>
    6b92:	2580      	movs	r5, #128	; 0x80
    6b94:	026d      	lsls	r5, r5, #9
    6b96:	46ac      	mov	ip, r5
    6b98:	4460      	add	r0, ip
    6b9a:	0c15      	lsrs	r5, r2, #16
    6b9c:	0409      	lsls	r1, r1, #16
    6b9e:	0412      	lsls	r2, r2, #16
    6ba0:	0c09      	lsrs	r1, r1, #16
    6ba2:	1828      	adds	r0, r5, r0
    6ba4:	1852      	adds	r2, r2, r1
    6ba6:	4283      	cmp	r3, r0
    6ba8:	d200      	bcs.n	6bac <__aeabi_ddiv+0x2f0>
    6baa:	e0ce      	b.n	6d4a <__aeabi_ddiv+0x48e>
    6bac:	d100      	bne.n	6bb0 <__aeabi_ddiv+0x2f4>
    6bae:	e0c8      	b.n	6d42 <__aeabi_ddiv+0x486>
    6bb0:	1a1d      	subs	r5, r3, r0
    6bb2:	4653      	mov	r3, sl
    6bb4:	1a9e      	subs	r6, r3, r2
    6bb6:	45b2      	cmp	sl, r6
    6bb8:	4192      	sbcs	r2, r2
    6bba:	4252      	negs	r2, r2
    6bbc:	1aab      	subs	r3, r5, r2
    6bbe:	469a      	mov	sl, r3
    6bc0:	4598      	cmp	r8, r3
    6bc2:	d100      	bne.n	6bc6 <__aeabi_ddiv+0x30a>
    6bc4:	e117      	b.n	6df6 <__aeabi_ddiv+0x53a>
    6bc6:	0039      	movs	r1, r7
    6bc8:	0018      	movs	r0, r3
    6bca:	f7ff fa93 	bl	60f4 <__udivsi3>
    6bce:	9b01      	ldr	r3, [sp, #4]
    6bd0:	0005      	movs	r5, r0
    6bd2:	4343      	muls	r3, r0
    6bd4:	0039      	movs	r1, r7
    6bd6:	4650      	mov	r0, sl
    6bd8:	9304      	str	r3, [sp, #16]
    6bda:	f7ff fb11 	bl	6200 <__aeabi_uidivmod>
    6bde:	9804      	ldr	r0, [sp, #16]
    6be0:	040b      	lsls	r3, r1, #16
    6be2:	0c31      	lsrs	r1, r6, #16
    6be4:	4319      	orrs	r1, r3
    6be6:	4288      	cmp	r0, r1
    6be8:	d909      	bls.n	6bfe <__aeabi_ddiv+0x342>
    6bea:	4441      	add	r1, r8
    6bec:	1e6b      	subs	r3, r5, #1
    6bee:	4588      	cmp	r8, r1
    6bf0:	d900      	bls.n	6bf4 <__aeabi_ddiv+0x338>
    6bf2:	e107      	b.n	6e04 <__aeabi_ddiv+0x548>
    6bf4:	4288      	cmp	r0, r1
    6bf6:	d800      	bhi.n	6bfa <__aeabi_ddiv+0x33e>
    6bf8:	e104      	b.n	6e04 <__aeabi_ddiv+0x548>
    6bfa:	3d02      	subs	r5, #2
    6bfc:	4441      	add	r1, r8
    6bfe:	9b04      	ldr	r3, [sp, #16]
    6c00:	1acb      	subs	r3, r1, r3
    6c02:	0018      	movs	r0, r3
    6c04:	0039      	movs	r1, r7
    6c06:	9304      	str	r3, [sp, #16]
    6c08:	f7ff fa74 	bl	60f4 <__udivsi3>
    6c0c:	9b01      	ldr	r3, [sp, #4]
    6c0e:	4682      	mov	sl, r0
    6c10:	4343      	muls	r3, r0
    6c12:	0039      	movs	r1, r7
    6c14:	9804      	ldr	r0, [sp, #16]
    6c16:	9301      	str	r3, [sp, #4]
    6c18:	f7ff faf2 	bl	6200 <__aeabi_uidivmod>
    6c1c:	9801      	ldr	r0, [sp, #4]
    6c1e:	040b      	lsls	r3, r1, #16
    6c20:	0431      	lsls	r1, r6, #16
    6c22:	0c09      	lsrs	r1, r1, #16
    6c24:	4319      	orrs	r1, r3
    6c26:	4288      	cmp	r0, r1
    6c28:	d90d      	bls.n	6c46 <__aeabi_ddiv+0x38a>
    6c2a:	4653      	mov	r3, sl
    6c2c:	4441      	add	r1, r8
    6c2e:	3b01      	subs	r3, #1
    6c30:	4588      	cmp	r8, r1
    6c32:	d900      	bls.n	6c36 <__aeabi_ddiv+0x37a>
    6c34:	e0e8      	b.n	6e08 <__aeabi_ddiv+0x54c>
    6c36:	4288      	cmp	r0, r1
    6c38:	d800      	bhi.n	6c3c <__aeabi_ddiv+0x380>
    6c3a:	e0e5      	b.n	6e08 <__aeabi_ddiv+0x54c>
    6c3c:	2302      	movs	r3, #2
    6c3e:	425b      	negs	r3, r3
    6c40:	469c      	mov	ip, r3
    6c42:	4441      	add	r1, r8
    6c44:	44e2      	add	sl, ip
    6c46:	9b01      	ldr	r3, [sp, #4]
    6c48:	042d      	lsls	r5, r5, #16
    6c4a:	1ace      	subs	r6, r1, r3
    6c4c:	4651      	mov	r1, sl
    6c4e:	4329      	orrs	r1, r5
    6c50:	9d05      	ldr	r5, [sp, #20]
    6c52:	464f      	mov	r7, r9
    6c54:	002a      	movs	r2, r5
    6c56:	040b      	lsls	r3, r1, #16
    6c58:	0c08      	lsrs	r0, r1, #16
    6c5a:	0c1b      	lsrs	r3, r3, #16
    6c5c:	435a      	muls	r2, r3
    6c5e:	4345      	muls	r5, r0
    6c60:	437b      	muls	r3, r7
    6c62:	4378      	muls	r0, r7
    6c64:	195b      	adds	r3, r3, r5
    6c66:	0c17      	lsrs	r7, r2, #16
    6c68:	18fb      	adds	r3, r7, r3
    6c6a:	429d      	cmp	r5, r3
    6c6c:	d903      	bls.n	6c76 <__aeabi_ddiv+0x3ba>
    6c6e:	2580      	movs	r5, #128	; 0x80
    6c70:	026d      	lsls	r5, r5, #9
    6c72:	46ac      	mov	ip, r5
    6c74:	4460      	add	r0, ip
    6c76:	0c1d      	lsrs	r5, r3, #16
    6c78:	0412      	lsls	r2, r2, #16
    6c7a:	041b      	lsls	r3, r3, #16
    6c7c:	0c12      	lsrs	r2, r2, #16
    6c7e:	1828      	adds	r0, r5, r0
    6c80:	189b      	adds	r3, r3, r2
    6c82:	4286      	cmp	r6, r0
    6c84:	d200      	bcs.n	6c88 <__aeabi_ddiv+0x3cc>
    6c86:	e093      	b.n	6db0 <__aeabi_ddiv+0x4f4>
    6c88:	d100      	bne.n	6c8c <__aeabi_ddiv+0x3d0>
    6c8a:	e08e      	b.n	6daa <__aeabi_ddiv+0x4ee>
    6c8c:	2301      	movs	r3, #1
    6c8e:	4319      	orrs	r1, r3
    6c90:	4ba0      	ldr	r3, [pc, #640]	; (6f14 <__aeabi_ddiv+0x658>)
    6c92:	18e3      	adds	r3, r4, r3
    6c94:	2b00      	cmp	r3, #0
    6c96:	dc00      	bgt.n	6c9a <__aeabi_ddiv+0x3de>
    6c98:	e099      	b.n	6dce <__aeabi_ddiv+0x512>
    6c9a:	074a      	lsls	r2, r1, #29
    6c9c:	d000      	beq.n	6ca0 <__aeabi_ddiv+0x3e4>
    6c9e:	e09e      	b.n	6dde <__aeabi_ddiv+0x522>
    6ca0:	465a      	mov	r2, fp
    6ca2:	01d2      	lsls	r2, r2, #7
    6ca4:	d506      	bpl.n	6cb4 <__aeabi_ddiv+0x3f8>
    6ca6:	465a      	mov	r2, fp
    6ca8:	4b9b      	ldr	r3, [pc, #620]	; (6f18 <__aeabi_ddiv+0x65c>)
    6caa:	401a      	ands	r2, r3
    6cac:	2380      	movs	r3, #128	; 0x80
    6cae:	4693      	mov	fp, r2
    6cb0:	00db      	lsls	r3, r3, #3
    6cb2:	18e3      	adds	r3, r4, r3
    6cb4:	4a99      	ldr	r2, [pc, #612]	; (6f1c <__aeabi_ddiv+0x660>)
    6cb6:	4293      	cmp	r3, r2
    6cb8:	dd68      	ble.n	6d8c <__aeabi_ddiv+0x4d0>
    6cba:	2301      	movs	r3, #1
    6cbc:	9a02      	ldr	r2, [sp, #8]
    6cbe:	4c98      	ldr	r4, [pc, #608]	; (6f20 <__aeabi_ddiv+0x664>)
    6cc0:	401a      	ands	r2, r3
    6cc2:	2300      	movs	r3, #0
    6cc4:	4694      	mov	ip, r2
    6cc6:	4698      	mov	r8, r3
    6cc8:	2200      	movs	r2, #0
    6cca:	e6c5      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6ccc:	2280      	movs	r2, #128	; 0x80
    6cce:	464b      	mov	r3, r9
    6cd0:	0312      	lsls	r2, r2, #12
    6cd2:	4213      	tst	r3, r2
    6cd4:	d00a      	beq.n	6cec <__aeabi_ddiv+0x430>
    6cd6:	465b      	mov	r3, fp
    6cd8:	4213      	tst	r3, r2
    6cda:	d106      	bne.n	6cea <__aeabi_ddiv+0x42e>
    6cdc:	431a      	orrs	r2, r3
    6cde:	0312      	lsls	r2, r2, #12
    6ce0:	0b12      	lsrs	r2, r2, #12
    6ce2:	46ac      	mov	ip, r5
    6ce4:	4688      	mov	r8, r1
    6ce6:	4c8e      	ldr	r4, [pc, #568]	; (6f20 <__aeabi_ddiv+0x664>)
    6ce8:	e6b6      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6cea:	464b      	mov	r3, r9
    6cec:	431a      	orrs	r2, r3
    6cee:	0312      	lsls	r2, r2, #12
    6cf0:	0b12      	lsrs	r2, r2, #12
    6cf2:	46bc      	mov	ip, r7
    6cf4:	4c8a      	ldr	r4, [pc, #552]	; (6f20 <__aeabi_ddiv+0x664>)
    6cf6:	e6af      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6cf8:	0003      	movs	r3, r0
    6cfa:	465a      	mov	r2, fp
    6cfc:	3b28      	subs	r3, #40	; 0x28
    6cfe:	409a      	lsls	r2, r3
    6d00:	2300      	movs	r3, #0
    6d02:	4691      	mov	r9, r2
    6d04:	4698      	mov	r8, r3
    6d06:	e657      	b.n	69b8 <__aeabi_ddiv+0xfc>
    6d08:	4658      	mov	r0, fp
    6d0a:	f000 ff8d 	bl	7c28 <__clzsi2>
    6d0e:	3020      	adds	r0, #32
    6d10:	e640      	b.n	6994 <__aeabi_ddiv+0xd8>
    6d12:	0003      	movs	r3, r0
    6d14:	4652      	mov	r2, sl
    6d16:	3b28      	subs	r3, #40	; 0x28
    6d18:	409a      	lsls	r2, r3
    6d1a:	2100      	movs	r1, #0
    6d1c:	4693      	mov	fp, r2
    6d1e:	e677      	b.n	6a10 <__aeabi_ddiv+0x154>
    6d20:	f000 ff82 	bl	7c28 <__clzsi2>
    6d24:	3020      	adds	r0, #32
    6d26:	e65f      	b.n	69e8 <__aeabi_ddiv+0x12c>
    6d28:	4588      	cmp	r8, r1
    6d2a:	d200      	bcs.n	6d2e <__aeabi_ddiv+0x472>
    6d2c:	e6c7      	b.n	6abe <__aeabi_ddiv+0x202>
    6d2e:	464b      	mov	r3, r9
    6d30:	07de      	lsls	r6, r3, #31
    6d32:	085d      	lsrs	r5, r3, #1
    6d34:	4643      	mov	r3, r8
    6d36:	085b      	lsrs	r3, r3, #1
    6d38:	431e      	orrs	r6, r3
    6d3a:	4643      	mov	r3, r8
    6d3c:	07db      	lsls	r3, r3, #31
    6d3e:	469a      	mov	sl, r3
    6d40:	e6c2      	b.n	6ac8 <__aeabi_ddiv+0x20c>
    6d42:	2500      	movs	r5, #0
    6d44:	4592      	cmp	sl, r2
    6d46:	d300      	bcc.n	6d4a <__aeabi_ddiv+0x48e>
    6d48:	e733      	b.n	6bb2 <__aeabi_ddiv+0x2f6>
    6d4a:	9e03      	ldr	r6, [sp, #12]
    6d4c:	4659      	mov	r1, fp
    6d4e:	46b4      	mov	ip, r6
    6d50:	44e2      	add	sl, ip
    6d52:	45b2      	cmp	sl, r6
    6d54:	41ad      	sbcs	r5, r5
    6d56:	426d      	negs	r5, r5
    6d58:	4445      	add	r5, r8
    6d5a:	18eb      	adds	r3, r5, r3
    6d5c:	3901      	subs	r1, #1
    6d5e:	4598      	cmp	r8, r3
    6d60:	d207      	bcs.n	6d72 <__aeabi_ddiv+0x4b6>
    6d62:	4298      	cmp	r0, r3
    6d64:	d900      	bls.n	6d68 <__aeabi_ddiv+0x4ac>
    6d66:	e07f      	b.n	6e68 <__aeabi_ddiv+0x5ac>
    6d68:	d100      	bne.n	6d6c <__aeabi_ddiv+0x4b0>
    6d6a:	e0bc      	b.n	6ee6 <__aeabi_ddiv+0x62a>
    6d6c:	1a1d      	subs	r5, r3, r0
    6d6e:	468b      	mov	fp, r1
    6d70:	e71f      	b.n	6bb2 <__aeabi_ddiv+0x2f6>
    6d72:	4598      	cmp	r8, r3
    6d74:	d1fa      	bne.n	6d6c <__aeabi_ddiv+0x4b0>
    6d76:	9d03      	ldr	r5, [sp, #12]
    6d78:	4555      	cmp	r5, sl
    6d7a:	d9f2      	bls.n	6d62 <__aeabi_ddiv+0x4a6>
    6d7c:	4643      	mov	r3, r8
    6d7e:	468b      	mov	fp, r1
    6d80:	1a1d      	subs	r5, r3, r0
    6d82:	e716      	b.n	6bb2 <__aeabi_ddiv+0x2f6>
    6d84:	469b      	mov	fp, r3
    6d86:	e6ca      	b.n	6b1e <__aeabi_ddiv+0x262>
    6d88:	0015      	movs	r5, r2
    6d8a:	e6e7      	b.n	6b5c <__aeabi_ddiv+0x2a0>
    6d8c:	465a      	mov	r2, fp
    6d8e:	08c9      	lsrs	r1, r1, #3
    6d90:	0752      	lsls	r2, r2, #29
    6d92:	430a      	orrs	r2, r1
    6d94:	055b      	lsls	r3, r3, #21
    6d96:	4690      	mov	r8, r2
    6d98:	0d5c      	lsrs	r4, r3, #21
    6d9a:	465a      	mov	r2, fp
    6d9c:	2301      	movs	r3, #1
    6d9e:	9902      	ldr	r1, [sp, #8]
    6da0:	0252      	lsls	r2, r2, #9
    6da2:	4019      	ands	r1, r3
    6da4:	0b12      	lsrs	r2, r2, #12
    6da6:	468c      	mov	ip, r1
    6da8:	e656      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6daa:	2b00      	cmp	r3, #0
    6dac:	d100      	bne.n	6db0 <__aeabi_ddiv+0x4f4>
    6dae:	e76f      	b.n	6c90 <__aeabi_ddiv+0x3d4>
    6db0:	4446      	add	r6, r8
    6db2:	1e4a      	subs	r2, r1, #1
    6db4:	45b0      	cmp	r8, r6
    6db6:	d929      	bls.n	6e0c <__aeabi_ddiv+0x550>
    6db8:	0011      	movs	r1, r2
    6dba:	4286      	cmp	r6, r0
    6dbc:	d000      	beq.n	6dc0 <__aeabi_ddiv+0x504>
    6dbe:	e765      	b.n	6c8c <__aeabi_ddiv+0x3d0>
    6dc0:	9a03      	ldr	r2, [sp, #12]
    6dc2:	4293      	cmp	r3, r2
    6dc4:	d000      	beq.n	6dc8 <__aeabi_ddiv+0x50c>
    6dc6:	e761      	b.n	6c8c <__aeabi_ddiv+0x3d0>
    6dc8:	e762      	b.n	6c90 <__aeabi_ddiv+0x3d4>
    6dca:	2101      	movs	r1, #1
    6dcc:	4249      	negs	r1, r1
    6dce:	2001      	movs	r0, #1
    6dd0:	1ac2      	subs	r2, r0, r3
    6dd2:	2a38      	cmp	r2, #56	; 0x38
    6dd4:	dd21      	ble.n	6e1a <__aeabi_ddiv+0x55e>
    6dd6:	9b02      	ldr	r3, [sp, #8]
    6dd8:	4003      	ands	r3, r0
    6dda:	469c      	mov	ip, r3
    6ddc:	e638      	b.n	6a50 <__aeabi_ddiv+0x194>
    6dde:	220f      	movs	r2, #15
    6de0:	400a      	ands	r2, r1
    6de2:	2a04      	cmp	r2, #4
    6de4:	d100      	bne.n	6de8 <__aeabi_ddiv+0x52c>
    6de6:	e75b      	b.n	6ca0 <__aeabi_ddiv+0x3e4>
    6de8:	000a      	movs	r2, r1
    6dea:	1d11      	adds	r1, r2, #4
    6dec:	4291      	cmp	r1, r2
    6dee:	4192      	sbcs	r2, r2
    6df0:	4252      	negs	r2, r2
    6df2:	4493      	add	fp, r2
    6df4:	e754      	b.n	6ca0 <__aeabi_ddiv+0x3e4>
    6df6:	4b47      	ldr	r3, [pc, #284]	; (6f14 <__aeabi_ddiv+0x658>)
    6df8:	18e3      	adds	r3, r4, r3
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	dde5      	ble.n	6dca <__aeabi_ddiv+0x50e>
    6dfe:	2201      	movs	r2, #1
    6e00:	4252      	negs	r2, r2
    6e02:	e7f2      	b.n	6dea <__aeabi_ddiv+0x52e>
    6e04:	001d      	movs	r5, r3
    6e06:	e6fa      	b.n	6bfe <__aeabi_ddiv+0x342>
    6e08:	469a      	mov	sl, r3
    6e0a:	e71c      	b.n	6c46 <__aeabi_ddiv+0x38a>
    6e0c:	42b0      	cmp	r0, r6
    6e0e:	d839      	bhi.n	6e84 <__aeabi_ddiv+0x5c8>
    6e10:	d06e      	beq.n	6ef0 <__aeabi_ddiv+0x634>
    6e12:	0011      	movs	r1, r2
    6e14:	e73a      	b.n	6c8c <__aeabi_ddiv+0x3d0>
    6e16:	9302      	str	r3, [sp, #8]
    6e18:	e73a      	b.n	6c90 <__aeabi_ddiv+0x3d4>
    6e1a:	2a1f      	cmp	r2, #31
    6e1c:	dc3c      	bgt.n	6e98 <__aeabi_ddiv+0x5dc>
    6e1e:	2320      	movs	r3, #32
    6e20:	1a9b      	subs	r3, r3, r2
    6e22:	000c      	movs	r4, r1
    6e24:	4658      	mov	r0, fp
    6e26:	4099      	lsls	r1, r3
    6e28:	4098      	lsls	r0, r3
    6e2a:	1e4b      	subs	r3, r1, #1
    6e2c:	4199      	sbcs	r1, r3
    6e2e:	465b      	mov	r3, fp
    6e30:	40d4      	lsrs	r4, r2
    6e32:	40d3      	lsrs	r3, r2
    6e34:	4320      	orrs	r0, r4
    6e36:	4308      	orrs	r0, r1
    6e38:	001a      	movs	r2, r3
    6e3a:	0743      	lsls	r3, r0, #29
    6e3c:	d009      	beq.n	6e52 <__aeabi_ddiv+0x596>
    6e3e:	230f      	movs	r3, #15
    6e40:	4003      	ands	r3, r0
    6e42:	2b04      	cmp	r3, #4
    6e44:	d005      	beq.n	6e52 <__aeabi_ddiv+0x596>
    6e46:	0001      	movs	r1, r0
    6e48:	1d08      	adds	r0, r1, #4
    6e4a:	4288      	cmp	r0, r1
    6e4c:	419b      	sbcs	r3, r3
    6e4e:	425b      	negs	r3, r3
    6e50:	18d2      	adds	r2, r2, r3
    6e52:	0213      	lsls	r3, r2, #8
    6e54:	d53a      	bpl.n	6ecc <__aeabi_ddiv+0x610>
    6e56:	2301      	movs	r3, #1
    6e58:	9a02      	ldr	r2, [sp, #8]
    6e5a:	2401      	movs	r4, #1
    6e5c:	401a      	ands	r2, r3
    6e5e:	2300      	movs	r3, #0
    6e60:	4694      	mov	ip, r2
    6e62:	4698      	mov	r8, r3
    6e64:	2200      	movs	r2, #0
    6e66:	e5f7      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6e68:	2102      	movs	r1, #2
    6e6a:	4249      	negs	r1, r1
    6e6c:	468c      	mov	ip, r1
    6e6e:	9d03      	ldr	r5, [sp, #12]
    6e70:	44e3      	add	fp, ip
    6e72:	46ac      	mov	ip, r5
    6e74:	44e2      	add	sl, ip
    6e76:	45aa      	cmp	sl, r5
    6e78:	41ad      	sbcs	r5, r5
    6e7a:	426d      	negs	r5, r5
    6e7c:	4445      	add	r5, r8
    6e7e:	18ed      	adds	r5, r5, r3
    6e80:	1a2d      	subs	r5, r5, r0
    6e82:	e696      	b.n	6bb2 <__aeabi_ddiv+0x2f6>
    6e84:	1e8a      	subs	r2, r1, #2
    6e86:	9903      	ldr	r1, [sp, #12]
    6e88:	004d      	lsls	r5, r1, #1
    6e8a:	428d      	cmp	r5, r1
    6e8c:	4189      	sbcs	r1, r1
    6e8e:	4249      	negs	r1, r1
    6e90:	4441      	add	r1, r8
    6e92:	1876      	adds	r6, r6, r1
    6e94:	9503      	str	r5, [sp, #12]
    6e96:	e78f      	b.n	6db8 <__aeabi_ddiv+0x4fc>
    6e98:	201f      	movs	r0, #31
    6e9a:	4240      	negs	r0, r0
    6e9c:	1ac3      	subs	r3, r0, r3
    6e9e:	4658      	mov	r0, fp
    6ea0:	40d8      	lsrs	r0, r3
    6ea2:	0003      	movs	r3, r0
    6ea4:	2a20      	cmp	r2, #32
    6ea6:	d028      	beq.n	6efa <__aeabi_ddiv+0x63e>
    6ea8:	2040      	movs	r0, #64	; 0x40
    6eaa:	465d      	mov	r5, fp
    6eac:	1a82      	subs	r2, r0, r2
    6eae:	4095      	lsls	r5, r2
    6eb0:	4329      	orrs	r1, r5
    6eb2:	1e4a      	subs	r2, r1, #1
    6eb4:	4191      	sbcs	r1, r2
    6eb6:	4319      	orrs	r1, r3
    6eb8:	2307      	movs	r3, #7
    6eba:	2200      	movs	r2, #0
    6ebc:	400b      	ands	r3, r1
    6ebe:	d009      	beq.n	6ed4 <__aeabi_ddiv+0x618>
    6ec0:	230f      	movs	r3, #15
    6ec2:	2200      	movs	r2, #0
    6ec4:	400b      	ands	r3, r1
    6ec6:	0008      	movs	r0, r1
    6ec8:	2b04      	cmp	r3, #4
    6eca:	d1bd      	bne.n	6e48 <__aeabi_ddiv+0x58c>
    6ecc:	0001      	movs	r1, r0
    6ece:	0753      	lsls	r3, r2, #29
    6ed0:	0252      	lsls	r2, r2, #9
    6ed2:	0b12      	lsrs	r2, r2, #12
    6ed4:	08c9      	lsrs	r1, r1, #3
    6ed6:	4319      	orrs	r1, r3
    6ed8:	2301      	movs	r3, #1
    6eda:	4688      	mov	r8, r1
    6edc:	9902      	ldr	r1, [sp, #8]
    6ede:	2400      	movs	r4, #0
    6ee0:	4019      	ands	r1, r3
    6ee2:	468c      	mov	ip, r1
    6ee4:	e5b8      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6ee6:	4552      	cmp	r2, sl
    6ee8:	d8be      	bhi.n	6e68 <__aeabi_ddiv+0x5ac>
    6eea:	468b      	mov	fp, r1
    6eec:	2500      	movs	r5, #0
    6eee:	e660      	b.n	6bb2 <__aeabi_ddiv+0x2f6>
    6ef0:	9d03      	ldr	r5, [sp, #12]
    6ef2:	429d      	cmp	r5, r3
    6ef4:	d3c6      	bcc.n	6e84 <__aeabi_ddiv+0x5c8>
    6ef6:	0011      	movs	r1, r2
    6ef8:	e762      	b.n	6dc0 <__aeabi_ddiv+0x504>
    6efa:	2500      	movs	r5, #0
    6efc:	e7d8      	b.n	6eb0 <__aeabi_ddiv+0x5f4>
    6efe:	2280      	movs	r2, #128	; 0x80
    6f00:	465b      	mov	r3, fp
    6f02:	0312      	lsls	r2, r2, #12
    6f04:	431a      	orrs	r2, r3
    6f06:	9b01      	ldr	r3, [sp, #4]
    6f08:	0312      	lsls	r2, r2, #12
    6f0a:	0b12      	lsrs	r2, r2, #12
    6f0c:	469c      	mov	ip, r3
    6f0e:	4688      	mov	r8, r1
    6f10:	4c03      	ldr	r4, [pc, #12]	; (6f20 <__aeabi_ddiv+0x664>)
    6f12:	e5a1      	b.n	6a58 <__aeabi_ddiv+0x19c>
    6f14:	000003ff 	.word	0x000003ff
    6f18:	feffffff 	.word	0xfeffffff
    6f1c:	000007fe 	.word	0x000007fe
    6f20:	000007ff 	.word	0x000007ff

00006f24 <__aeabi_dmul>:
    6f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f26:	4657      	mov	r7, sl
    6f28:	4645      	mov	r5, r8
    6f2a:	46de      	mov	lr, fp
    6f2c:	464e      	mov	r6, r9
    6f2e:	b5e0      	push	{r5, r6, r7, lr}
    6f30:	030c      	lsls	r4, r1, #12
    6f32:	4698      	mov	r8, r3
    6f34:	004e      	lsls	r6, r1, #1
    6f36:	0b23      	lsrs	r3, r4, #12
    6f38:	b087      	sub	sp, #28
    6f3a:	0007      	movs	r7, r0
    6f3c:	4692      	mov	sl, r2
    6f3e:	469b      	mov	fp, r3
    6f40:	0d76      	lsrs	r6, r6, #21
    6f42:	0fcd      	lsrs	r5, r1, #31
    6f44:	2e00      	cmp	r6, #0
    6f46:	d06b      	beq.n	7020 <__aeabi_dmul+0xfc>
    6f48:	4b6d      	ldr	r3, [pc, #436]	; (7100 <__aeabi_dmul+0x1dc>)
    6f4a:	429e      	cmp	r6, r3
    6f4c:	d035      	beq.n	6fba <__aeabi_dmul+0x96>
    6f4e:	2480      	movs	r4, #128	; 0x80
    6f50:	465b      	mov	r3, fp
    6f52:	0f42      	lsrs	r2, r0, #29
    6f54:	0424      	lsls	r4, r4, #16
    6f56:	00db      	lsls	r3, r3, #3
    6f58:	4314      	orrs	r4, r2
    6f5a:	431c      	orrs	r4, r3
    6f5c:	00c3      	lsls	r3, r0, #3
    6f5e:	4699      	mov	r9, r3
    6f60:	4b68      	ldr	r3, [pc, #416]	; (7104 <__aeabi_dmul+0x1e0>)
    6f62:	46a3      	mov	fp, r4
    6f64:	469c      	mov	ip, r3
    6f66:	2300      	movs	r3, #0
    6f68:	2700      	movs	r7, #0
    6f6a:	4466      	add	r6, ip
    6f6c:	9302      	str	r3, [sp, #8]
    6f6e:	4643      	mov	r3, r8
    6f70:	031c      	lsls	r4, r3, #12
    6f72:	005a      	lsls	r2, r3, #1
    6f74:	0fdb      	lsrs	r3, r3, #31
    6f76:	4650      	mov	r0, sl
    6f78:	0b24      	lsrs	r4, r4, #12
    6f7a:	0d52      	lsrs	r2, r2, #21
    6f7c:	4698      	mov	r8, r3
    6f7e:	d100      	bne.n	6f82 <__aeabi_dmul+0x5e>
    6f80:	e076      	b.n	7070 <__aeabi_dmul+0x14c>
    6f82:	4b5f      	ldr	r3, [pc, #380]	; (7100 <__aeabi_dmul+0x1dc>)
    6f84:	429a      	cmp	r2, r3
    6f86:	d06d      	beq.n	7064 <__aeabi_dmul+0x140>
    6f88:	2380      	movs	r3, #128	; 0x80
    6f8a:	0f41      	lsrs	r1, r0, #29
    6f8c:	041b      	lsls	r3, r3, #16
    6f8e:	430b      	orrs	r3, r1
    6f90:	495c      	ldr	r1, [pc, #368]	; (7104 <__aeabi_dmul+0x1e0>)
    6f92:	00e4      	lsls	r4, r4, #3
    6f94:	468c      	mov	ip, r1
    6f96:	431c      	orrs	r4, r3
    6f98:	00c3      	lsls	r3, r0, #3
    6f9a:	2000      	movs	r0, #0
    6f9c:	4462      	add	r2, ip
    6f9e:	4641      	mov	r1, r8
    6fa0:	18b6      	adds	r6, r6, r2
    6fa2:	4069      	eors	r1, r5
    6fa4:	1c72      	adds	r2, r6, #1
    6fa6:	9101      	str	r1, [sp, #4]
    6fa8:	4694      	mov	ip, r2
    6faa:	4307      	orrs	r7, r0
    6fac:	2f0f      	cmp	r7, #15
    6fae:	d900      	bls.n	6fb2 <__aeabi_dmul+0x8e>
    6fb0:	e0b0      	b.n	7114 <__aeabi_dmul+0x1f0>
    6fb2:	4a55      	ldr	r2, [pc, #340]	; (7108 <__aeabi_dmul+0x1e4>)
    6fb4:	00bf      	lsls	r7, r7, #2
    6fb6:	59d2      	ldr	r2, [r2, r7]
    6fb8:	4697      	mov	pc, r2
    6fba:	465b      	mov	r3, fp
    6fbc:	4303      	orrs	r3, r0
    6fbe:	4699      	mov	r9, r3
    6fc0:	d000      	beq.n	6fc4 <__aeabi_dmul+0xa0>
    6fc2:	e087      	b.n	70d4 <__aeabi_dmul+0x1b0>
    6fc4:	2300      	movs	r3, #0
    6fc6:	469b      	mov	fp, r3
    6fc8:	3302      	adds	r3, #2
    6fca:	2708      	movs	r7, #8
    6fcc:	9302      	str	r3, [sp, #8]
    6fce:	e7ce      	b.n	6f6e <__aeabi_dmul+0x4a>
    6fd0:	4642      	mov	r2, r8
    6fd2:	9201      	str	r2, [sp, #4]
    6fd4:	2802      	cmp	r0, #2
    6fd6:	d067      	beq.n	70a8 <__aeabi_dmul+0x184>
    6fd8:	2803      	cmp	r0, #3
    6fda:	d100      	bne.n	6fde <__aeabi_dmul+0xba>
    6fdc:	e20e      	b.n	73fc <__aeabi_dmul+0x4d8>
    6fde:	2801      	cmp	r0, #1
    6fe0:	d000      	beq.n	6fe4 <__aeabi_dmul+0xc0>
    6fe2:	e162      	b.n	72aa <__aeabi_dmul+0x386>
    6fe4:	2300      	movs	r3, #0
    6fe6:	2400      	movs	r4, #0
    6fe8:	2200      	movs	r2, #0
    6fea:	4699      	mov	r9, r3
    6fec:	9901      	ldr	r1, [sp, #4]
    6fee:	4001      	ands	r1, r0
    6ff0:	b2cd      	uxtb	r5, r1
    6ff2:	2100      	movs	r1, #0
    6ff4:	0312      	lsls	r2, r2, #12
    6ff6:	0d0b      	lsrs	r3, r1, #20
    6ff8:	0b12      	lsrs	r2, r2, #12
    6ffa:	051b      	lsls	r3, r3, #20
    6ffc:	4313      	orrs	r3, r2
    6ffe:	4a43      	ldr	r2, [pc, #268]	; (710c <__aeabi_dmul+0x1e8>)
    7000:	0524      	lsls	r4, r4, #20
    7002:	4013      	ands	r3, r2
    7004:	431c      	orrs	r4, r3
    7006:	0064      	lsls	r4, r4, #1
    7008:	07ed      	lsls	r5, r5, #31
    700a:	0864      	lsrs	r4, r4, #1
    700c:	432c      	orrs	r4, r5
    700e:	4648      	mov	r0, r9
    7010:	0021      	movs	r1, r4
    7012:	b007      	add	sp, #28
    7014:	bc3c      	pop	{r2, r3, r4, r5}
    7016:	4690      	mov	r8, r2
    7018:	4699      	mov	r9, r3
    701a:	46a2      	mov	sl, r4
    701c:	46ab      	mov	fp, r5
    701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7020:	4303      	orrs	r3, r0
    7022:	4699      	mov	r9, r3
    7024:	d04f      	beq.n	70c6 <__aeabi_dmul+0x1a2>
    7026:	465b      	mov	r3, fp
    7028:	2b00      	cmp	r3, #0
    702a:	d100      	bne.n	702e <__aeabi_dmul+0x10a>
    702c:	e189      	b.n	7342 <__aeabi_dmul+0x41e>
    702e:	4658      	mov	r0, fp
    7030:	f000 fdfa 	bl	7c28 <__clzsi2>
    7034:	0003      	movs	r3, r0
    7036:	3b0b      	subs	r3, #11
    7038:	2b1c      	cmp	r3, #28
    703a:	dd00      	ble.n	703e <__aeabi_dmul+0x11a>
    703c:	e17a      	b.n	7334 <__aeabi_dmul+0x410>
    703e:	221d      	movs	r2, #29
    7040:	1ad3      	subs	r3, r2, r3
    7042:	003a      	movs	r2, r7
    7044:	0001      	movs	r1, r0
    7046:	465c      	mov	r4, fp
    7048:	40da      	lsrs	r2, r3
    704a:	3908      	subs	r1, #8
    704c:	408c      	lsls	r4, r1
    704e:	0013      	movs	r3, r2
    7050:	408f      	lsls	r7, r1
    7052:	4323      	orrs	r3, r4
    7054:	469b      	mov	fp, r3
    7056:	46b9      	mov	r9, r7
    7058:	2300      	movs	r3, #0
    705a:	4e2d      	ldr	r6, [pc, #180]	; (7110 <__aeabi_dmul+0x1ec>)
    705c:	2700      	movs	r7, #0
    705e:	1a36      	subs	r6, r6, r0
    7060:	9302      	str	r3, [sp, #8]
    7062:	e784      	b.n	6f6e <__aeabi_dmul+0x4a>
    7064:	4653      	mov	r3, sl
    7066:	4323      	orrs	r3, r4
    7068:	d12a      	bne.n	70c0 <__aeabi_dmul+0x19c>
    706a:	2400      	movs	r4, #0
    706c:	2002      	movs	r0, #2
    706e:	e796      	b.n	6f9e <__aeabi_dmul+0x7a>
    7070:	4653      	mov	r3, sl
    7072:	4323      	orrs	r3, r4
    7074:	d020      	beq.n	70b8 <__aeabi_dmul+0x194>
    7076:	2c00      	cmp	r4, #0
    7078:	d100      	bne.n	707c <__aeabi_dmul+0x158>
    707a:	e157      	b.n	732c <__aeabi_dmul+0x408>
    707c:	0020      	movs	r0, r4
    707e:	f000 fdd3 	bl	7c28 <__clzsi2>
    7082:	0003      	movs	r3, r0
    7084:	3b0b      	subs	r3, #11
    7086:	2b1c      	cmp	r3, #28
    7088:	dd00      	ble.n	708c <__aeabi_dmul+0x168>
    708a:	e149      	b.n	7320 <__aeabi_dmul+0x3fc>
    708c:	211d      	movs	r1, #29
    708e:	1acb      	subs	r3, r1, r3
    7090:	4651      	mov	r1, sl
    7092:	0002      	movs	r2, r0
    7094:	40d9      	lsrs	r1, r3
    7096:	4653      	mov	r3, sl
    7098:	3a08      	subs	r2, #8
    709a:	4094      	lsls	r4, r2
    709c:	4093      	lsls	r3, r2
    709e:	430c      	orrs	r4, r1
    70a0:	4a1b      	ldr	r2, [pc, #108]	; (7110 <__aeabi_dmul+0x1ec>)
    70a2:	1a12      	subs	r2, r2, r0
    70a4:	2000      	movs	r0, #0
    70a6:	e77a      	b.n	6f9e <__aeabi_dmul+0x7a>
    70a8:	2501      	movs	r5, #1
    70aa:	9b01      	ldr	r3, [sp, #4]
    70ac:	4c14      	ldr	r4, [pc, #80]	; (7100 <__aeabi_dmul+0x1dc>)
    70ae:	401d      	ands	r5, r3
    70b0:	2300      	movs	r3, #0
    70b2:	2200      	movs	r2, #0
    70b4:	4699      	mov	r9, r3
    70b6:	e79c      	b.n	6ff2 <__aeabi_dmul+0xce>
    70b8:	2400      	movs	r4, #0
    70ba:	2200      	movs	r2, #0
    70bc:	2001      	movs	r0, #1
    70be:	e76e      	b.n	6f9e <__aeabi_dmul+0x7a>
    70c0:	4653      	mov	r3, sl
    70c2:	2003      	movs	r0, #3
    70c4:	e76b      	b.n	6f9e <__aeabi_dmul+0x7a>
    70c6:	2300      	movs	r3, #0
    70c8:	469b      	mov	fp, r3
    70ca:	3301      	adds	r3, #1
    70cc:	2704      	movs	r7, #4
    70ce:	2600      	movs	r6, #0
    70d0:	9302      	str	r3, [sp, #8]
    70d2:	e74c      	b.n	6f6e <__aeabi_dmul+0x4a>
    70d4:	2303      	movs	r3, #3
    70d6:	4681      	mov	r9, r0
    70d8:	270c      	movs	r7, #12
    70da:	9302      	str	r3, [sp, #8]
    70dc:	e747      	b.n	6f6e <__aeabi_dmul+0x4a>
    70de:	2280      	movs	r2, #128	; 0x80
    70e0:	2300      	movs	r3, #0
    70e2:	2500      	movs	r5, #0
    70e4:	0312      	lsls	r2, r2, #12
    70e6:	4699      	mov	r9, r3
    70e8:	4c05      	ldr	r4, [pc, #20]	; (7100 <__aeabi_dmul+0x1dc>)
    70ea:	e782      	b.n	6ff2 <__aeabi_dmul+0xce>
    70ec:	465c      	mov	r4, fp
    70ee:	464b      	mov	r3, r9
    70f0:	9802      	ldr	r0, [sp, #8]
    70f2:	e76f      	b.n	6fd4 <__aeabi_dmul+0xb0>
    70f4:	465c      	mov	r4, fp
    70f6:	464b      	mov	r3, r9
    70f8:	9501      	str	r5, [sp, #4]
    70fa:	9802      	ldr	r0, [sp, #8]
    70fc:	e76a      	b.n	6fd4 <__aeabi_dmul+0xb0>
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	000007ff 	.word	0x000007ff
    7104:	fffffc01 	.word	0xfffffc01
    7108:	000091b4 	.word	0x000091b4
    710c:	800fffff 	.word	0x800fffff
    7110:	fffffc0d 	.word	0xfffffc0d
    7114:	464a      	mov	r2, r9
    7116:	4649      	mov	r1, r9
    7118:	0c17      	lsrs	r7, r2, #16
    711a:	0c1a      	lsrs	r2, r3, #16
    711c:	041b      	lsls	r3, r3, #16
    711e:	0c1b      	lsrs	r3, r3, #16
    7120:	0408      	lsls	r0, r1, #16
    7122:	0019      	movs	r1, r3
    7124:	0c00      	lsrs	r0, r0, #16
    7126:	4341      	muls	r1, r0
    7128:	0015      	movs	r5, r2
    712a:	4688      	mov	r8, r1
    712c:	0019      	movs	r1, r3
    712e:	437d      	muls	r5, r7
    7130:	4379      	muls	r1, r7
    7132:	9503      	str	r5, [sp, #12]
    7134:	4689      	mov	r9, r1
    7136:	0029      	movs	r1, r5
    7138:	0015      	movs	r5, r2
    713a:	4345      	muls	r5, r0
    713c:	444d      	add	r5, r9
    713e:	9502      	str	r5, [sp, #8]
    7140:	4645      	mov	r5, r8
    7142:	0c2d      	lsrs	r5, r5, #16
    7144:	46aa      	mov	sl, r5
    7146:	9d02      	ldr	r5, [sp, #8]
    7148:	4455      	add	r5, sl
    714a:	45a9      	cmp	r9, r5
    714c:	d906      	bls.n	715c <__aeabi_dmul+0x238>
    714e:	468a      	mov	sl, r1
    7150:	2180      	movs	r1, #128	; 0x80
    7152:	0249      	lsls	r1, r1, #9
    7154:	4689      	mov	r9, r1
    7156:	44ca      	add	sl, r9
    7158:	4651      	mov	r1, sl
    715a:	9103      	str	r1, [sp, #12]
    715c:	0c29      	lsrs	r1, r5, #16
    715e:	9104      	str	r1, [sp, #16]
    7160:	4641      	mov	r1, r8
    7162:	0409      	lsls	r1, r1, #16
    7164:	042d      	lsls	r5, r5, #16
    7166:	0c09      	lsrs	r1, r1, #16
    7168:	4688      	mov	r8, r1
    716a:	0029      	movs	r1, r5
    716c:	0c25      	lsrs	r5, r4, #16
    716e:	0424      	lsls	r4, r4, #16
    7170:	4441      	add	r1, r8
    7172:	0c24      	lsrs	r4, r4, #16
    7174:	9105      	str	r1, [sp, #20]
    7176:	0021      	movs	r1, r4
    7178:	4341      	muls	r1, r0
    717a:	4688      	mov	r8, r1
    717c:	0021      	movs	r1, r4
    717e:	4379      	muls	r1, r7
    7180:	468a      	mov	sl, r1
    7182:	4368      	muls	r0, r5
    7184:	4641      	mov	r1, r8
    7186:	4450      	add	r0, sl
    7188:	4681      	mov	r9, r0
    718a:	0c08      	lsrs	r0, r1, #16
    718c:	4448      	add	r0, r9
    718e:	436f      	muls	r7, r5
    7190:	4582      	cmp	sl, r0
    7192:	d903      	bls.n	719c <__aeabi_dmul+0x278>
    7194:	2180      	movs	r1, #128	; 0x80
    7196:	0249      	lsls	r1, r1, #9
    7198:	4689      	mov	r9, r1
    719a:	444f      	add	r7, r9
    719c:	0c01      	lsrs	r1, r0, #16
    719e:	4689      	mov	r9, r1
    71a0:	0039      	movs	r1, r7
    71a2:	4449      	add	r1, r9
    71a4:	9102      	str	r1, [sp, #8]
    71a6:	4641      	mov	r1, r8
    71a8:	040f      	lsls	r7, r1, #16
    71aa:	9904      	ldr	r1, [sp, #16]
    71ac:	0c3f      	lsrs	r7, r7, #16
    71ae:	4688      	mov	r8, r1
    71b0:	0400      	lsls	r0, r0, #16
    71b2:	19c0      	adds	r0, r0, r7
    71b4:	4480      	add	r8, r0
    71b6:	4641      	mov	r1, r8
    71b8:	9104      	str	r1, [sp, #16]
    71ba:	4659      	mov	r1, fp
    71bc:	0c0f      	lsrs	r7, r1, #16
    71be:	0409      	lsls	r1, r1, #16
    71c0:	0c09      	lsrs	r1, r1, #16
    71c2:	4688      	mov	r8, r1
    71c4:	4359      	muls	r1, r3
    71c6:	468a      	mov	sl, r1
    71c8:	0039      	movs	r1, r7
    71ca:	4351      	muls	r1, r2
    71cc:	4689      	mov	r9, r1
    71ce:	4641      	mov	r1, r8
    71d0:	434a      	muls	r2, r1
    71d2:	4651      	mov	r1, sl
    71d4:	0c09      	lsrs	r1, r1, #16
    71d6:	468b      	mov	fp, r1
    71d8:	437b      	muls	r3, r7
    71da:	18d2      	adds	r2, r2, r3
    71dc:	445a      	add	r2, fp
    71de:	4293      	cmp	r3, r2
    71e0:	d903      	bls.n	71ea <__aeabi_dmul+0x2c6>
    71e2:	2380      	movs	r3, #128	; 0x80
    71e4:	025b      	lsls	r3, r3, #9
    71e6:	469b      	mov	fp, r3
    71e8:	44d9      	add	r9, fp
    71ea:	4651      	mov	r1, sl
    71ec:	0409      	lsls	r1, r1, #16
    71ee:	0c09      	lsrs	r1, r1, #16
    71f0:	468a      	mov	sl, r1
    71f2:	4641      	mov	r1, r8
    71f4:	4361      	muls	r1, r4
    71f6:	437c      	muls	r4, r7
    71f8:	0c13      	lsrs	r3, r2, #16
    71fa:	0412      	lsls	r2, r2, #16
    71fc:	444b      	add	r3, r9
    71fe:	4452      	add	r2, sl
    7200:	46a1      	mov	r9, r4
    7202:	468a      	mov	sl, r1
    7204:	003c      	movs	r4, r7
    7206:	4641      	mov	r1, r8
    7208:	436c      	muls	r4, r5
    720a:	434d      	muls	r5, r1
    720c:	4651      	mov	r1, sl
    720e:	444d      	add	r5, r9
    7210:	0c0f      	lsrs	r7, r1, #16
    7212:	197d      	adds	r5, r7, r5
    7214:	45a9      	cmp	r9, r5
    7216:	d903      	bls.n	7220 <__aeabi_dmul+0x2fc>
    7218:	2180      	movs	r1, #128	; 0x80
    721a:	0249      	lsls	r1, r1, #9
    721c:	4688      	mov	r8, r1
    721e:	4444      	add	r4, r8
    7220:	9f04      	ldr	r7, [sp, #16]
    7222:	9903      	ldr	r1, [sp, #12]
    7224:	46b8      	mov	r8, r7
    7226:	4441      	add	r1, r8
    7228:	468b      	mov	fp, r1
    722a:	4583      	cmp	fp, r0
    722c:	4180      	sbcs	r0, r0
    722e:	4241      	negs	r1, r0
    7230:	4688      	mov	r8, r1
    7232:	4651      	mov	r1, sl
    7234:	0408      	lsls	r0, r1, #16
    7236:	042f      	lsls	r7, r5, #16
    7238:	0c00      	lsrs	r0, r0, #16
    723a:	183f      	adds	r7, r7, r0
    723c:	4658      	mov	r0, fp
    723e:	9902      	ldr	r1, [sp, #8]
    7240:	1810      	adds	r0, r2, r0
    7242:	4689      	mov	r9, r1
    7244:	4290      	cmp	r0, r2
    7246:	4192      	sbcs	r2, r2
    7248:	444f      	add	r7, r9
    724a:	46ba      	mov	sl, r7
    724c:	4252      	negs	r2, r2
    724e:	4699      	mov	r9, r3
    7250:	4693      	mov	fp, r2
    7252:	44c2      	add	sl, r8
    7254:	44d1      	add	r9, sl
    7256:	44cb      	add	fp, r9
    7258:	428f      	cmp	r7, r1
    725a:	41bf      	sbcs	r7, r7
    725c:	45c2      	cmp	sl, r8
    725e:	4189      	sbcs	r1, r1
    7260:	4599      	cmp	r9, r3
    7262:	419b      	sbcs	r3, r3
    7264:	4593      	cmp	fp, r2
    7266:	4192      	sbcs	r2, r2
    7268:	427f      	negs	r7, r7
    726a:	4249      	negs	r1, r1
    726c:	0c2d      	lsrs	r5, r5, #16
    726e:	4252      	negs	r2, r2
    7270:	430f      	orrs	r7, r1
    7272:	425b      	negs	r3, r3
    7274:	4313      	orrs	r3, r2
    7276:	197f      	adds	r7, r7, r5
    7278:	18ff      	adds	r7, r7, r3
    727a:	465b      	mov	r3, fp
    727c:	193c      	adds	r4, r7, r4
    727e:	0ddb      	lsrs	r3, r3, #23
    7280:	9a05      	ldr	r2, [sp, #20]
    7282:	0264      	lsls	r4, r4, #9
    7284:	431c      	orrs	r4, r3
    7286:	0243      	lsls	r3, r0, #9
    7288:	4313      	orrs	r3, r2
    728a:	1e5d      	subs	r5, r3, #1
    728c:	41ab      	sbcs	r3, r5
    728e:	465a      	mov	r2, fp
    7290:	0dc0      	lsrs	r0, r0, #23
    7292:	4303      	orrs	r3, r0
    7294:	0252      	lsls	r2, r2, #9
    7296:	4313      	orrs	r3, r2
    7298:	01e2      	lsls	r2, r4, #7
    729a:	d556      	bpl.n	734a <__aeabi_dmul+0x426>
    729c:	2001      	movs	r0, #1
    729e:	085a      	lsrs	r2, r3, #1
    72a0:	4003      	ands	r3, r0
    72a2:	4313      	orrs	r3, r2
    72a4:	07e2      	lsls	r2, r4, #31
    72a6:	4313      	orrs	r3, r2
    72a8:	0864      	lsrs	r4, r4, #1
    72aa:	485a      	ldr	r0, [pc, #360]	; (7414 <__aeabi_dmul+0x4f0>)
    72ac:	4460      	add	r0, ip
    72ae:	2800      	cmp	r0, #0
    72b0:	dd4d      	ble.n	734e <__aeabi_dmul+0x42a>
    72b2:	075a      	lsls	r2, r3, #29
    72b4:	d009      	beq.n	72ca <__aeabi_dmul+0x3a6>
    72b6:	220f      	movs	r2, #15
    72b8:	401a      	ands	r2, r3
    72ba:	2a04      	cmp	r2, #4
    72bc:	d005      	beq.n	72ca <__aeabi_dmul+0x3a6>
    72be:	1d1a      	adds	r2, r3, #4
    72c0:	429a      	cmp	r2, r3
    72c2:	419b      	sbcs	r3, r3
    72c4:	425b      	negs	r3, r3
    72c6:	18e4      	adds	r4, r4, r3
    72c8:	0013      	movs	r3, r2
    72ca:	01e2      	lsls	r2, r4, #7
    72cc:	d504      	bpl.n	72d8 <__aeabi_dmul+0x3b4>
    72ce:	2080      	movs	r0, #128	; 0x80
    72d0:	4a51      	ldr	r2, [pc, #324]	; (7418 <__aeabi_dmul+0x4f4>)
    72d2:	00c0      	lsls	r0, r0, #3
    72d4:	4014      	ands	r4, r2
    72d6:	4460      	add	r0, ip
    72d8:	4a50      	ldr	r2, [pc, #320]	; (741c <__aeabi_dmul+0x4f8>)
    72da:	4290      	cmp	r0, r2
    72dc:	dd00      	ble.n	72e0 <__aeabi_dmul+0x3bc>
    72de:	e6e3      	b.n	70a8 <__aeabi_dmul+0x184>
    72e0:	2501      	movs	r5, #1
    72e2:	08db      	lsrs	r3, r3, #3
    72e4:	0762      	lsls	r2, r4, #29
    72e6:	431a      	orrs	r2, r3
    72e8:	0264      	lsls	r4, r4, #9
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	4691      	mov	r9, r2
    72ee:	0b22      	lsrs	r2, r4, #12
    72f0:	0544      	lsls	r4, r0, #21
    72f2:	0d64      	lsrs	r4, r4, #21
    72f4:	401d      	ands	r5, r3
    72f6:	e67c      	b.n	6ff2 <__aeabi_dmul+0xce>
    72f8:	2280      	movs	r2, #128	; 0x80
    72fa:	4659      	mov	r1, fp
    72fc:	0312      	lsls	r2, r2, #12
    72fe:	4211      	tst	r1, r2
    7300:	d008      	beq.n	7314 <__aeabi_dmul+0x3f0>
    7302:	4214      	tst	r4, r2
    7304:	d106      	bne.n	7314 <__aeabi_dmul+0x3f0>
    7306:	4322      	orrs	r2, r4
    7308:	0312      	lsls	r2, r2, #12
    730a:	0b12      	lsrs	r2, r2, #12
    730c:	4645      	mov	r5, r8
    730e:	4699      	mov	r9, r3
    7310:	4c43      	ldr	r4, [pc, #268]	; (7420 <__aeabi_dmul+0x4fc>)
    7312:	e66e      	b.n	6ff2 <__aeabi_dmul+0xce>
    7314:	465b      	mov	r3, fp
    7316:	431a      	orrs	r2, r3
    7318:	0312      	lsls	r2, r2, #12
    731a:	0b12      	lsrs	r2, r2, #12
    731c:	4c40      	ldr	r4, [pc, #256]	; (7420 <__aeabi_dmul+0x4fc>)
    731e:	e668      	b.n	6ff2 <__aeabi_dmul+0xce>
    7320:	0003      	movs	r3, r0
    7322:	4654      	mov	r4, sl
    7324:	3b28      	subs	r3, #40	; 0x28
    7326:	409c      	lsls	r4, r3
    7328:	2300      	movs	r3, #0
    732a:	e6b9      	b.n	70a0 <__aeabi_dmul+0x17c>
    732c:	f000 fc7c 	bl	7c28 <__clzsi2>
    7330:	3020      	adds	r0, #32
    7332:	e6a6      	b.n	7082 <__aeabi_dmul+0x15e>
    7334:	0003      	movs	r3, r0
    7336:	3b28      	subs	r3, #40	; 0x28
    7338:	409f      	lsls	r7, r3
    733a:	2300      	movs	r3, #0
    733c:	46bb      	mov	fp, r7
    733e:	4699      	mov	r9, r3
    7340:	e68a      	b.n	7058 <__aeabi_dmul+0x134>
    7342:	f000 fc71 	bl	7c28 <__clzsi2>
    7346:	3020      	adds	r0, #32
    7348:	e674      	b.n	7034 <__aeabi_dmul+0x110>
    734a:	46b4      	mov	ip, r6
    734c:	e7ad      	b.n	72aa <__aeabi_dmul+0x386>
    734e:	2501      	movs	r5, #1
    7350:	1a2a      	subs	r2, r5, r0
    7352:	2a38      	cmp	r2, #56	; 0x38
    7354:	dd06      	ble.n	7364 <__aeabi_dmul+0x440>
    7356:	9b01      	ldr	r3, [sp, #4]
    7358:	2400      	movs	r4, #0
    735a:	401d      	ands	r5, r3
    735c:	2300      	movs	r3, #0
    735e:	2200      	movs	r2, #0
    7360:	4699      	mov	r9, r3
    7362:	e646      	b.n	6ff2 <__aeabi_dmul+0xce>
    7364:	2a1f      	cmp	r2, #31
    7366:	dc21      	bgt.n	73ac <__aeabi_dmul+0x488>
    7368:	2520      	movs	r5, #32
    736a:	0020      	movs	r0, r4
    736c:	1aad      	subs	r5, r5, r2
    736e:	001e      	movs	r6, r3
    7370:	40ab      	lsls	r3, r5
    7372:	40a8      	lsls	r0, r5
    7374:	40d6      	lsrs	r6, r2
    7376:	1e5d      	subs	r5, r3, #1
    7378:	41ab      	sbcs	r3, r5
    737a:	4330      	orrs	r0, r6
    737c:	4318      	orrs	r0, r3
    737e:	40d4      	lsrs	r4, r2
    7380:	0743      	lsls	r3, r0, #29
    7382:	d009      	beq.n	7398 <__aeabi_dmul+0x474>
    7384:	230f      	movs	r3, #15
    7386:	4003      	ands	r3, r0
    7388:	2b04      	cmp	r3, #4
    738a:	d005      	beq.n	7398 <__aeabi_dmul+0x474>
    738c:	0003      	movs	r3, r0
    738e:	1d18      	adds	r0, r3, #4
    7390:	4298      	cmp	r0, r3
    7392:	419b      	sbcs	r3, r3
    7394:	425b      	negs	r3, r3
    7396:	18e4      	adds	r4, r4, r3
    7398:	0223      	lsls	r3, r4, #8
    739a:	d521      	bpl.n	73e0 <__aeabi_dmul+0x4bc>
    739c:	2501      	movs	r5, #1
    739e:	9b01      	ldr	r3, [sp, #4]
    73a0:	2401      	movs	r4, #1
    73a2:	401d      	ands	r5, r3
    73a4:	2300      	movs	r3, #0
    73a6:	2200      	movs	r2, #0
    73a8:	4699      	mov	r9, r3
    73aa:	e622      	b.n	6ff2 <__aeabi_dmul+0xce>
    73ac:	251f      	movs	r5, #31
    73ae:	0021      	movs	r1, r4
    73b0:	426d      	negs	r5, r5
    73b2:	1a28      	subs	r0, r5, r0
    73b4:	40c1      	lsrs	r1, r0
    73b6:	0008      	movs	r0, r1
    73b8:	2a20      	cmp	r2, #32
    73ba:	d01d      	beq.n	73f8 <__aeabi_dmul+0x4d4>
    73bc:	355f      	adds	r5, #95	; 0x5f
    73be:	1aaa      	subs	r2, r5, r2
    73c0:	4094      	lsls	r4, r2
    73c2:	4323      	orrs	r3, r4
    73c4:	1e5c      	subs	r4, r3, #1
    73c6:	41a3      	sbcs	r3, r4
    73c8:	2507      	movs	r5, #7
    73ca:	4303      	orrs	r3, r0
    73cc:	401d      	ands	r5, r3
    73ce:	2200      	movs	r2, #0
    73d0:	2d00      	cmp	r5, #0
    73d2:	d009      	beq.n	73e8 <__aeabi_dmul+0x4c4>
    73d4:	220f      	movs	r2, #15
    73d6:	2400      	movs	r4, #0
    73d8:	401a      	ands	r2, r3
    73da:	0018      	movs	r0, r3
    73dc:	2a04      	cmp	r2, #4
    73de:	d1d6      	bne.n	738e <__aeabi_dmul+0x46a>
    73e0:	0003      	movs	r3, r0
    73e2:	0765      	lsls	r5, r4, #29
    73e4:	0264      	lsls	r4, r4, #9
    73e6:	0b22      	lsrs	r2, r4, #12
    73e8:	08db      	lsrs	r3, r3, #3
    73ea:	432b      	orrs	r3, r5
    73ec:	2501      	movs	r5, #1
    73ee:	4699      	mov	r9, r3
    73f0:	9b01      	ldr	r3, [sp, #4]
    73f2:	2400      	movs	r4, #0
    73f4:	401d      	ands	r5, r3
    73f6:	e5fc      	b.n	6ff2 <__aeabi_dmul+0xce>
    73f8:	2400      	movs	r4, #0
    73fa:	e7e2      	b.n	73c2 <__aeabi_dmul+0x49e>
    73fc:	2280      	movs	r2, #128	; 0x80
    73fe:	2501      	movs	r5, #1
    7400:	0312      	lsls	r2, r2, #12
    7402:	4322      	orrs	r2, r4
    7404:	9901      	ldr	r1, [sp, #4]
    7406:	0312      	lsls	r2, r2, #12
    7408:	0b12      	lsrs	r2, r2, #12
    740a:	400d      	ands	r5, r1
    740c:	4699      	mov	r9, r3
    740e:	4c04      	ldr	r4, [pc, #16]	; (7420 <__aeabi_dmul+0x4fc>)
    7410:	e5ef      	b.n	6ff2 <__aeabi_dmul+0xce>
    7412:	46c0      	nop			; (mov r8, r8)
    7414:	000003ff 	.word	0x000003ff
    7418:	feffffff 	.word	0xfeffffff
    741c:	000007fe 	.word	0x000007fe
    7420:	000007ff 	.word	0x000007ff

00007424 <__aeabi_dsub>:
    7424:	b5f0      	push	{r4, r5, r6, r7, lr}
    7426:	4646      	mov	r6, r8
    7428:	46d6      	mov	lr, sl
    742a:	464f      	mov	r7, r9
    742c:	030c      	lsls	r4, r1, #12
    742e:	b5c0      	push	{r6, r7, lr}
    7430:	0fcd      	lsrs	r5, r1, #31
    7432:	004e      	lsls	r6, r1, #1
    7434:	0a61      	lsrs	r1, r4, #9
    7436:	0f44      	lsrs	r4, r0, #29
    7438:	430c      	orrs	r4, r1
    743a:	00c1      	lsls	r1, r0, #3
    743c:	0058      	lsls	r0, r3, #1
    743e:	0d40      	lsrs	r0, r0, #21
    7440:	4684      	mov	ip, r0
    7442:	468a      	mov	sl, r1
    7444:	000f      	movs	r7, r1
    7446:	0319      	lsls	r1, r3, #12
    7448:	0f50      	lsrs	r0, r2, #29
    744a:	0a49      	lsrs	r1, r1, #9
    744c:	4301      	orrs	r1, r0
    744e:	48c6      	ldr	r0, [pc, #792]	; (7768 <__aeabi_dsub+0x344>)
    7450:	0d76      	lsrs	r6, r6, #21
    7452:	46a8      	mov	r8, r5
    7454:	0fdb      	lsrs	r3, r3, #31
    7456:	00d2      	lsls	r2, r2, #3
    7458:	4584      	cmp	ip, r0
    745a:	d100      	bne.n	745e <__aeabi_dsub+0x3a>
    745c:	e0d8      	b.n	7610 <__aeabi_dsub+0x1ec>
    745e:	2001      	movs	r0, #1
    7460:	4043      	eors	r3, r0
    7462:	42ab      	cmp	r3, r5
    7464:	d100      	bne.n	7468 <__aeabi_dsub+0x44>
    7466:	e0a6      	b.n	75b6 <__aeabi_dsub+0x192>
    7468:	4660      	mov	r0, ip
    746a:	1a35      	subs	r5, r6, r0
    746c:	2d00      	cmp	r5, #0
    746e:	dc00      	bgt.n	7472 <__aeabi_dsub+0x4e>
    7470:	e105      	b.n	767e <__aeabi_dsub+0x25a>
    7472:	2800      	cmp	r0, #0
    7474:	d110      	bne.n	7498 <__aeabi_dsub+0x74>
    7476:	000b      	movs	r3, r1
    7478:	4313      	orrs	r3, r2
    747a:	d100      	bne.n	747e <__aeabi_dsub+0x5a>
    747c:	e0d7      	b.n	762e <__aeabi_dsub+0x20a>
    747e:	1e6b      	subs	r3, r5, #1
    7480:	2b00      	cmp	r3, #0
    7482:	d000      	beq.n	7486 <__aeabi_dsub+0x62>
    7484:	e14b      	b.n	771e <__aeabi_dsub+0x2fa>
    7486:	4653      	mov	r3, sl
    7488:	1a9f      	subs	r7, r3, r2
    748a:	45ba      	cmp	sl, r7
    748c:	4180      	sbcs	r0, r0
    748e:	1a64      	subs	r4, r4, r1
    7490:	4240      	negs	r0, r0
    7492:	1a24      	subs	r4, r4, r0
    7494:	2601      	movs	r6, #1
    7496:	e01e      	b.n	74d6 <__aeabi_dsub+0xb2>
    7498:	4bb3      	ldr	r3, [pc, #716]	; (7768 <__aeabi_dsub+0x344>)
    749a:	429e      	cmp	r6, r3
    749c:	d048      	beq.n	7530 <__aeabi_dsub+0x10c>
    749e:	2380      	movs	r3, #128	; 0x80
    74a0:	041b      	lsls	r3, r3, #16
    74a2:	4319      	orrs	r1, r3
    74a4:	2d38      	cmp	r5, #56	; 0x38
    74a6:	dd00      	ble.n	74aa <__aeabi_dsub+0x86>
    74a8:	e119      	b.n	76de <__aeabi_dsub+0x2ba>
    74aa:	2d1f      	cmp	r5, #31
    74ac:	dd00      	ble.n	74b0 <__aeabi_dsub+0x8c>
    74ae:	e14c      	b.n	774a <__aeabi_dsub+0x326>
    74b0:	2320      	movs	r3, #32
    74b2:	000f      	movs	r7, r1
    74b4:	1b5b      	subs	r3, r3, r5
    74b6:	0010      	movs	r0, r2
    74b8:	409a      	lsls	r2, r3
    74ba:	409f      	lsls	r7, r3
    74bc:	40e8      	lsrs	r0, r5
    74be:	1e53      	subs	r3, r2, #1
    74c0:	419a      	sbcs	r2, r3
    74c2:	40e9      	lsrs	r1, r5
    74c4:	4307      	orrs	r7, r0
    74c6:	4317      	orrs	r7, r2
    74c8:	4653      	mov	r3, sl
    74ca:	1bdf      	subs	r7, r3, r7
    74cc:	1a61      	subs	r1, r4, r1
    74ce:	45ba      	cmp	sl, r7
    74d0:	41a4      	sbcs	r4, r4
    74d2:	4264      	negs	r4, r4
    74d4:	1b0c      	subs	r4, r1, r4
    74d6:	0223      	lsls	r3, r4, #8
    74d8:	d400      	bmi.n	74dc <__aeabi_dsub+0xb8>
    74da:	e0c5      	b.n	7668 <__aeabi_dsub+0x244>
    74dc:	0264      	lsls	r4, r4, #9
    74de:	0a65      	lsrs	r5, r4, #9
    74e0:	2d00      	cmp	r5, #0
    74e2:	d100      	bne.n	74e6 <__aeabi_dsub+0xc2>
    74e4:	e0f6      	b.n	76d4 <__aeabi_dsub+0x2b0>
    74e6:	0028      	movs	r0, r5
    74e8:	f000 fb9e 	bl	7c28 <__clzsi2>
    74ec:	0003      	movs	r3, r0
    74ee:	3b08      	subs	r3, #8
    74f0:	2b1f      	cmp	r3, #31
    74f2:	dd00      	ble.n	74f6 <__aeabi_dsub+0xd2>
    74f4:	e0e9      	b.n	76ca <__aeabi_dsub+0x2a6>
    74f6:	2220      	movs	r2, #32
    74f8:	003c      	movs	r4, r7
    74fa:	1ad2      	subs	r2, r2, r3
    74fc:	409d      	lsls	r5, r3
    74fe:	40d4      	lsrs	r4, r2
    7500:	409f      	lsls	r7, r3
    7502:	4325      	orrs	r5, r4
    7504:	429e      	cmp	r6, r3
    7506:	dd00      	ble.n	750a <__aeabi_dsub+0xe6>
    7508:	e0db      	b.n	76c2 <__aeabi_dsub+0x29e>
    750a:	1b9e      	subs	r6, r3, r6
    750c:	1c73      	adds	r3, r6, #1
    750e:	2b1f      	cmp	r3, #31
    7510:	dd00      	ble.n	7514 <__aeabi_dsub+0xf0>
    7512:	e10a      	b.n	772a <__aeabi_dsub+0x306>
    7514:	2220      	movs	r2, #32
    7516:	0038      	movs	r0, r7
    7518:	1ad2      	subs	r2, r2, r3
    751a:	0029      	movs	r1, r5
    751c:	4097      	lsls	r7, r2
    751e:	002c      	movs	r4, r5
    7520:	4091      	lsls	r1, r2
    7522:	40d8      	lsrs	r0, r3
    7524:	1e7a      	subs	r2, r7, #1
    7526:	4197      	sbcs	r7, r2
    7528:	40dc      	lsrs	r4, r3
    752a:	2600      	movs	r6, #0
    752c:	4301      	orrs	r1, r0
    752e:	430f      	orrs	r7, r1
    7530:	077b      	lsls	r3, r7, #29
    7532:	d009      	beq.n	7548 <__aeabi_dsub+0x124>
    7534:	230f      	movs	r3, #15
    7536:	403b      	ands	r3, r7
    7538:	2b04      	cmp	r3, #4
    753a:	d005      	beq.n	7548 <__aeabi_dsub+0x124>
    753c:	1d3b      	adds	r3, r7, #4
    753e:	42bb      	cmp	r3, r7
    7540:	41bf      	sbcs	r7, r7
    7542:	427f      	negs	r7, r7
    7544:	19e4      	adds	r4, r4, r7
    7546:	001f      	movs	r7, r3
    7548:	0223      	lsls	r3, r4, #8
    754a:	d525      	bpl.n	7598 <__aeabi_dsub+0x174>
    754c:	4b86      	ldr	r3, [pc, #536]	; (7768 <__aeabi_dsub+0x344>)
    754e:	3601      	adds	r6, #1
    7550:	429e      	cmp	r6, r3
    7552:	d100      	bne.n	7556 <__aeabi_dsub+0x132>
    7554:	e0af      	b.n	76b6 <__aeabi_dsub+0x292>
    7556:	4b85      	ldr	r3, [pc, #532]	; (776c <__aeabi_dsub+0x348>)
    7558:	2501      	movs	r5, #1
    755a:	401c      	ands	r4, r3
    755c:	4643      	mov	r3, r8
    755e:	0762      	lsls	r2, r4, #29
    7560:	08ff      	lsrs	r7, r7, #3
    7562:	0264      	lsls	r4, r4, #9
    7564:	0576      	lsls	r6, r6, #21
    7566:	4317      	orrs	r7, r2
    7568:	0b24      	lsrs	r4, r4, #12
    756a:	0d76      	lsrs	r6, r6, #21
    756c:	401d      	ands	r5, r3
    756e:	2100      	movs	r1, #0
    7570:	0324      	lsls	r4, r4, #12
    7572:	0b23      	lsrs	r3, r4, #12
    7574:	0d0c      	lsrs	r4, r1, #20
    7576:	4a7e      	ldr	r2, [pc, #504]	; (7770 <__aeabi_dsub+0x34c>)
    7578:	0524      	lsls	r4, r4, #20
    757a:	431c      	orrs	r4, r3
    757c:	4014      	ands	r4, r2
    757e:	0533      	lsls	r3, r6, #20
    7580:	4323      	orrs	r3, r4
    7582:	005b      	lsls	r3, r3, #1
    7584:	07ed      	lsls	r5, r5, #31
    7586:	085b      	lsrs	r3, r3, #1
    7588:	432b      	orrs	r3, r5
    758a:	0038      	movs	r0, r7
    758c:	0019      	movs	r1, r3
    758e:	bc1c      	pop	{r2, r3, r4}
    7590:	4690      	mov	r8, r2
    7592:	4699      	mov	r9, r3
    7594:	46a2      	mov	sl, r4
    7596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7598:	2501      	movs	r5, #1
    759a:	4643      	mov	r3, r8
    759c:	0762      	lsls	r2, r4, #29
    759e:	08ff      	lsrs	r7, r7, #3
    75a0:	4317      	orrs	r7, r2
    75a2:	08e4      	lsrs	r4, r4, #3
    75a4:	401d      	ands	r5, r3
    75a6:	4b70      	ldr	r3, [pc, #448]	; (7768 <__aeabi_dsub+0x344>)
    75a8:	429e      	cmp	r6, r3
    75aa:	d036      	beq.n	761a <__aeabi_dsub+0x1f6>
    75ac:	0324      	lsls	r4, r4, #12
    75ae:	0576      	lsls	r6, r6, #21
    75b0:	0b24      	lsrs	r4, r4, #12
    75b2:	0d76      	lsrs	r6, r6, #21
    75b4:	e7db      	b.n	756e <__aeabi_dsub+0x14a>
    75b6:	4663      	mov	r3, ip
    75b8:	1af3      	subs	r3, r6, r3
    75ba:	2b00      	cmp	r3, #0
    75bc:	dc00      	bgt.n	75c0 <__aeabi_dsub+0x19c>
    75be:	e094      	b.n	76ea <__aeabi_dsub+0x2c6>
    75c0:	4660      	mov	r0, ip
    75c2:	2800      	cmp	r0, #0
    75c4:	d035      	beq.n	7632 <__aeabi_dsub+0x20e>
    75c6:	4868      	ldr	r0, [pc, #416]	; (7768 <__aeabi_dsub+0x344>)
    75c8:	4286      	cmp	r6, r0
    75ca:	d0b1      	beq.n	7530 <__aeabi_dsub+0x10c>
    75cc:	2780      	movs	r7, #128	; 0x80
    75ce:	043f      	lsls	r7, r7, #16
    75d0:	4339      	orrs	r1, r7
    75d2:	2b38      	cmp	r3, #56	; 0x38
    75d4:	dc00      	bgt.n	75d8 <__aeabi_dsub+0x1b4>
    75d6:	e0fd      	b.n	77d4 <__aeabi_dsub+0x3b0>
    75d8:	430a      	orrs	r2, r1
    75da:	0017      	movs	r7, r2
    75dc:	2100      	movs	r1, #0
    75de:	1e7a      	subs	r2, r7, #1
    75e0:	4197      	sbcs	r7, r2
    75e2:	4457      	add	r7, sl
    75e4:	4557      	cmp	r7, sl
    75e6:	4180      	sbcs	r0, r0
    75e8:	1909      	adds	r1, r1, r4
    75ea:	4244      	negs	r4, r0
    75ec:	190c      	adds	r4, r1, r4
    75ee:	0223      	lsls	r3, r4, #8
    75f0:	d53a      	bpl.n	7668 <__aeabi_dsub+0x244>
    75f2:	4b5d      	ldr	r3, [pc, #372]	; (7768 <__aeabi_dsub+0x344>)
    75f4:	3601      	adds	r6, #1
    75f6:	429e      	cmp	r6, r3
    75f8:	d100      	bne.n	75fc <__aeabi_dsub+0x1d8>
    75fa:	e14b      	b.n	7894 <__aeabi_dsub+0x470>
    75fc:	2201      	movs	r2, #1
    75fe:	4b5b      	ldr	r3, [pc, #364]	; (776c <__aeabi_dsub+0x348>)
    7600:	401c      	ands	r4, r3
    7602:	087b      	lsrs	r3, r7, #1
    7604:	4017      	ands	r7, r2
    7606:	431f      	orrs	r7, r3
    7608:	07e2      	lsls	r2, r4, #31
    760a:	4317      	orrs	r7, r2
    760c:	0864      	lsrs	r4, r4, #1
    760e:	e78f      	b.n	7530 <__aeabi_dsub+0x10c>
    7610:	0008      	movs	r0, r1
    7612:	4310      	orrs	r0, r2
    7614:	d000      	beq.n	7618 <__aeabi_dsub+0x1f4>
    7616:	e724      	b.n	7462 <__aeabi_dsub+0x3e>
    7618:	e721      	b.n	745e <__aeabi_dsub+0x3a>
    761a:	0023      	movs	r3, r4
    761c:	433b      	orrs	r3, r7
    761e:	d100      	bne.n	7622 <__aeabi_dsub+0x1fe>
    7620:	e1b9      	b.n	7996 <__aeabi_dsub+0x572>
    7622:	2280      	movs	r2, #128	; 0x80
    7624:	0312      	lsls	r2, r2, #12
    7626:	4314      	orrs	r4, r2
    7628:	0324      	lsls	r4, r4, #12
    762a:	0b24      	lsrs	r4, r4, #12
    762c:	e79f      	b.n	756e <__aeabi_dsub+0x14a>
    762e:	002e      	movs	r6, r5
    7630:	e77e      	b.n	7530 <__aeabi_dsub+0x10c>
    7632:	0008      	movs	r0, r1
    7634:	4310      	orrs	r0, r2
    7636:	d100      	bne.n	763a <__aeabi_dsub+0x216>
    7638:	e0ca      	b.n	77d0 <__aeabi_dsub+0x3ac>
    763a:	1e58      	subs	r0, r3, #1
    763c:	4684      	mov	ip, r0
    763e:	2800      	cmp	r0, #0
    7640:	d000      	beq.n	7644 <__aeabi_dsub+0x220>
    7642:	e0e7      	b.n	7814 <__aeabi_dsub+0x3f0>
    7644:	4452      	add	r2, sl
    7646:	4552      	cmp	r2, sl
    7648:	4180      	sbcs	r0, r0
    764a:	1864      	adds	r4, r4, r1
    764c:	4240      	negs	r0, r0
    764e:	1824      	adds	r4, r4, r0
    7650:	0017      	movs	r7, r2
    7652:	2601      	movs	r6, #1
    7654:	0223      	lsls	r3, r4, #8
    7656:	d507      	bpl.n	7668 <__aeabi_dsub+0x244>
    7658:	2602      	movs	r6, #2
    765a:	e7cf      	b.n	75fc <__aeabi_dsub+0x1d8>
    765c:	4664      	mov	r4, ip
    765e:	432c      	orrs	r4, r5
    7660:	d100      	bne.n	7664 <__aeabi_dsub+0x240>
    7662:	e1b3      	b.n	79cc <__aeabi_dsub+0x5a8>
    7664:	002c      	movs	r4, r5
    7666:	4667      	mov	r7, ip
    7668:	077b      	lsls	r3, r7, #29
    766a:	d000      	beq.n	766e <__aeabi_dsub+0x24a>
    766c:	e762      	b.n	7534 <__aeabi_dsub+0x110>
    766e:	0763      	lsls	r3, r4, #29
    7670:	08ff      	lsrs	r7, r7, #3
    7672:	431f      	orrs	r7, r3
    7674:	2501      	movs	r5, #1
    7676:	4643      	mov	r3, r8
    7678:	08e4      	lsrs	r4, r4, #3
    767a:	401d      	ands	r5, r3
    767c:	e793      	b.n	75a6 <__aeabi_dsub+0x182>
    767e:	2d00      	cmp	r5, #0
    7680:	d178      	bne.n	7774 <__aeabi_dsub+0x350>
    7682:	1c75      	adds	r5, r6, #1
    7684:	056d      	lsls	r5, r5, #21
    7686:	0d6d      	lsrs	r5, r5, #21
    7688:	2d01      	cmp	r5, #1
    768a:	dc00      	bgt.n	768e <__aeabi_dsub+0x26a>
    768c:	e0f2      	b.n	7874 <__aeabi_dsub+0x450>
    768e:	4650      	mov	r0, sl
    7690:	1a80      	subs	r0, r0, r2
    7692:	4582      	cmp	sl, r0
    7694:	41bf      	sbcs	r7, r7
    7696:	1a65      	subs	r5, r4, r1
    7698:	427f      	negs	r7, r7
    769a:	1bed      	subs	r5, r5, r7
    769c:	4684      	mov	ip, r0
    769e:	0228      	lsls	r0, r5, #8
    76a0:	d400      	bmi.n	76a4 <__aeabi_dsub+0x280>
    76a2:	e08c      	b.n	77be <__aeabi_dsub+0x39a>
    76a4:	4650      	mov	r0, sl
    76a6:	1a17      	subs	r7, r2, r0
    76a8:	42ba      	cmp	r2, r7
    76aa:	4192      	sbcs	r2, r2
    76ac:	1b0c      	subs	r4, r1, r4
    76ae:	4255      	negs	r5, r2
    76b0:	1b65      	subs	r5, r4, r5
    76b2:	4698      	mov	r8, r3
    76b4:	e714      	b.n	74e0 <__aeabi_dsub+0xbc>
    76b6:	2501      	movs	r5, #1
    76b8:	4643      	mov	r3, r8
    76ba:	2400      	movs	r4, #0
    76bc:	401d      	ands	r5, r3
    76be:	2700      	movs	r7, #0
    76c0:	e755      	b.n	756e <__aeabi_dsub+0x14a>
    76c2:	4c2a      	ldr	r4, [pc, #168]	; (776c <__aeabi_dsub+0x348>)
    76c4:	1af6      	subs	r6, r6, r3
    76c6:	402c      	ands	r4, r5
    76c8:	e732      	b.n	7530 <__aeabi_dsub+0x10c>
    76ca:	003d      	movs	r5, r7
    76cc:	3828      	subs	r0, #40	; 0x28
    76ce:	4085      	lsls	r5, r0
    76d0:	2700      	movs	r7, #0
    76d2:	e717      	b.n	7504 <__aeabi_dsub+0xe0>
    76d4:	0038      	movs	r0, r7
    76d6:	f000 faa7 	bl	7c28 <__clzsi2>
    76da:	3020      	adds	r0, #32
    76dc:	e706      	b.n	74ec <__aeabi_dsub+0xc8>
    76de:	430a      	orrs	r2, r1
    76e0:	0017      	movs	r7, r2
    76e2:	2100      	movs	r1, #0
    76e4:	1e7a      	subs	r2, r7, #1
    76e6:	4197      	sbcs	r7, r2
    76e8:	e6ee      	b.n	74c8 <__aeabi_dsub+0xa4>
    76ea:	2b00      	cmp	r3, #0
    76ec:	d000      	beq.n	76f0 <__aeabi_dsub+0x2cc>
    76ee:	e0e5      	b.n	78bc <__aeabi_dsub+0x498>
    76f0:	1c73      	adds	r3, r6, #1
    76f2:	469c      	mov	ip, r3
    76f4:	055b      	lsls	r3, r3, #21
    76f6:	0d5b      	lsrs	r3, r3, #21
    76f8:	2b01      	cmp	r3, #1
    76fa:	dc00      	bgt.n	76fe <__aeabi_dsub+0x2da>
    76fc:	e09f      	b.n	783e <__aeabi_dsub+0x41a>
    76fe:	4b1a      	ldr	r3, [pc, #104]	; (7768 <__aeabi_dsub+0x344>)
    7700:	459c      	cmp	ip, r3
    7702:	d100      	bne.n	7706 <__aeabi_dsub+0x2e2>
    7704:	e0c5      	b.n	7892 <__aeabi_dsub+0x46e>
    7706:	4452      	add	r2, sl
    7708:	4552      	cmp	r2, sl
    770a:	4180      	sbcs	r0, r0
    770c:	1864      	adds	r4, r4, r1
    770e:	4240      	negs	r0, r0
    7710:	1824      	adds	r4, r4, r0
    7712:	07e7      	lsls	r7, r4, #31
    7714:	0852      	lsrs	r2, r2, #1
    7716:	4317      	orrs	r7, r2
    7718:	0864      	lsrs	r4, r4, #1
    771a:	4666      	mov	r6, ip
    771c:	e708      	b.n	7530 <__aeabi_dsub+0x10c>
    771e:	4812      	ldr	r0, [pc, #72]	; (7768 <__aeabi_dsub+0x344>)
    7720:	4285      	cmp	r5, r0
    7722:	d100      	bne.n	7726 <__aeabi_dsub+0x302>
    7724:	e085      	b.n	7832 <__aeabi_dsub+0x40e>
    7726:	001d      	movs	r5, r3
    7728:	e6bc      	b.n	74a4 <__aeabi_dsub+0x80>
    772a:	0029      	movs	r1, r5
    772c:	3e1f      	subs	r6, #31
    772e:	40f1      	lsrs	r1, r6
    7730:	2b20      	cmp	r3, #32
    7732:	d100      	bne.n	7736 <__aeabi_dsub+0x312>
    7734:	e07f      	b.n	7836 <__aeabi_dsub+0x412>
    7736:	2240      	movs	r2, #64	; 0x40
    7738:	1ad3      	subs	r3, r2, r3
    773a:	409d      	lsls	r5, r3
    773c:	432f      	orrs	r7, r5
    773e:	1e7d      	subs	r5, r7, #1
    7740:	41af      	sbcs	r7, r5
    7742:	2400      	movs	r4, #0
    7744:	430f      	orrs	r7, r1
    7746:	2600      	movs	r6, #0
    7748:	e78e      	b.n	7668 <__aeabi_dsub+0x244>
    774a:	002b      	movs	r3, r5
    774c:	000f      	movs	r7, r1
    774e:	3b20      	subs	r3, #32
    7750:	40df      	lsrs	r7, r3
    7752:	2d20      	cmp	r5, #32
    7754:	d071      	beq.n	783a <__aeabi_dsub+0x416>
    7756:	2340      	movs	r3, #64	; 0x40
    7758:	1b5d      	subs	r5, r3, r5
    775a:	40a9      	lsls	r1, r5
    775c:	430a      	orrs	r2, r1
    775e:	1e51      	subs	r1, r2, #1
    7760:	418a      	sbcs	r2, r1
    7762:	2100      	movs	r1, #0
    7764:	4317      	orrs	r7, r2
    7766:	e6af      	b.n	74c8 <__aeabi_dsub+0xa4>
    7768:	000007ff 	.word	0x000007ff
    776c:	ff7fffff 	.word	0xff7fffff
    7770:	800fffff 	.word	0x800fffff
    7774:	2e00      	cmp	r6, #0
    7776:	d03e      	beq.n	77f6 <__aeabi_dsub+0x3d2>
    7778:	4eb3      	ldr	r6, [pc, #716]	; (7a48 <__aeabi_dsub+0x624>)
    777a:	45b4      	cmp	ip, r6
    777c:	d045      	beq.n	780a <__aeabi_dsub+0x3e6>
    777e:	2680      	movs	r6, #128	; 0x80
    7780:	0436      	lsls	r6, r6, #16
    7782:	426d      	negs	r5, r5
    7784:	4334      	orrs	r4, r6
    7786:	2d38      	cmp	r5, #56	; 0x38
    7788:	dd00      	ble.n	778c <__aeabi_dsub+0x368>
    778a:	e0a8      	b.n	78de <__aeabi_dsub+0x4ba>
    778c:	2d1f      	cmp	r5, #31
    778e:	dd00      	ble.n	7792 <__aeabi_dsub+0x36e>
    7790:	e11f      	b.n	79d2 <__aeabi_dsub+0x5ae>
    7792:	2620      	movs	r6, #32
    7794:	0027      	movs	r7, r4
    7796:	4650      	mov	r0, sl
    7798:	1b76      	subs	r6, r6, r5
    779a:	40b7      	lsls	r7, r6
    779c:	40e8      	lsrs	r0, r5
    779e:	4307      	orrs	r7, r0
    77a0:	4650      	mov	r0, sl
    77a2:	40b0      	lsls	r0, r6
    77a4:	1e46      	subs	r6, r0, #1
    77a6:	41b0      	sbcs	r0, r6
    77a8:	40ec      	lsrs	r4, r5
    77aa:	4338      	orrs	r0, r7
    77ac:	1a17      	subs	r7, r2, r0
    77ae:	42ba      	cmp	r2, r7
    77b0:	4192      	sbcs	r2, r2
    77b2:	1b0c      	subs	r4, r1, r4
    77b4:	4252      	negs	r2, r2
    77b6:	1aa4      	subs	r4, r4, r2
    77b8:	4666      	mov	r6, ip
    77ba:	4698      	mov	r8, r3
    77bc:	e68b      	b.n	74d6 <__aeabi_dsub+0xb2>
    77be:	4664      	mov	r4, ip
    77c0:	4667      	mov	r7, ip
    77c2:	432c      	orrs	r4, r5
    77c4:	d000      	beq.n	77c8 <__aeabi_dsub+0x3a4>
    77c6:	e68b      	b.n	74e0 <__aeabi_dsub+0xbc>
    77c8:	2500      	movs	r5, #0
    77ca:	2600      	movs	r6, #0
    77cc:	2700      	movs	r7, #0
    77ce:	e6ea      	b.n	75a6 <__aeabi_dsub+0x182>
    77d0:	001e      	movs	r6, r3
    77d2:	e6ad      	b.n	7530 <__aeabi_dsub+0x10c>
    77d4:	2b1f      	cmp	r3, #31
    77d6:	dc60      	bgt.n	789a <__aeabi_dsub+0x476>
    77d8:	2720      	movs	r7, #32
    77da:	1af8      	subs	r0, r7, r3
    77dc:	000f      	movs	r7, r1
    77de:	4684      	mov	ip, r0
    77e0:	4087      	lsls	r7, r0
    77e2:	0010      	movs	r0, r2
    77e4:	40d8      	lsrs	r0, r3
    77e6:	4307      	orrs	r7, r0
    77e8:	4660      	mov	r0, ip
    77ea:	4082      	lsls	r2, r0
    77ec:	1e50      	subs	r0, r2, #1
    77ee:	4182      	sbcs	r2, r0
    77f0:	40d9      	lsrs	r1, r3
    77f2:	4317      	orrs	r7, r2
    77f4:	e6f5      	b.n	75e2 <__aeabi_dsub+0x1be>
    77f6:	0026      	movs	r6, r4
    77f8:	4650      	mov	r0, sl
    77fa:	4306      	orrs	r6, r0
    77fc:	d005      	beq.n	780a <__aeabi_dsub+0x3e6>
    77fe:	43ed      	mvns	r5, r5
    7800:	2d00      	cmp	r5, #0
    7802:	d0d3      	beq.n	77ac <__aeabi_dsub+0x388>
    7804:	4e90      	ldr	r6, [pc, #576]	; (7a48 <__aeabi_dsub+0x624>)
    7806:	45b4      	cmp	ip, r6
    7808:	d1bd      	bne.n	7786 <__aeabi_dsub+0x362>
    780a:	000c      	movs	r4, r1
    780c:	0017      	movs	r7, r2
    780e:	4666      	mov	r6, ip
    7810:	4698      	mov	r8, r3
    7812:	e68d      	b.n	7530 <__aeabi_dsub+0x10c>
    7814:	488c      	ldr	r0, [pc, #560]	; (7a48 <__aeabi_dsub+0x624>)
    7816:	4283      	cmp	r3, r0
    7818:	d00b      	beq.n	7832 <__aeabi_dsub+0x40e>
    781a:	4663      	mov	r3, ip
    781c:	e6d9      	b.n	75d2 <__aeabi_dsub+0x1ae>
    781e:	2d00      	cmp	r5, #0
    7820:	d000      	beq.n	7824 <__aeabi_dsub+0x400>
    7822:	e096      	b.n	7952 <__aeabi_dsub+0x52e>
    7824:	0008      	movs	r0, r1
    7826:	4310      	orrs	r0, r2
    7828:	d100      	bne.n	782c <__aeabi_dsub+0x408>
    782a:	e0e2      	b.n	79f2 <__aeabi_dsub+0x5ce>
    782c:	000c      	movs	r4, r1
    782e:	0017      	movs	r7, r2
    7830:	4698      	mov	r8, r3
    7832:	4e85      	ldr	r6, [pc, #532]	; (7a48 <__aeabi_dsub+0x624>)
    7834:	e67c      	b.n	7530 <__aeabi_dsub+0x10c>
    7836:	2500      	movs	r5, #0
    7838:	e780      	b.n	773c <__aeabi_dsub+0x318>
    783a:	2100      	movs	r1, #0
    783c:	e78e      	b.n	775c <__aeabi_dsub+0x338>
    783e:	0023      	movs	r3, r4
    7840:	4650      	mov	r0, sl
    7842:	4303      	orrs	r3, r0
    7844:	2e00      	cmp	r6, #0
    7846:	d000      	beq.n	784a <__aeabi_dsub+0x426>
    7848:	e0a8      	b.n	799c <__aeabi_dsub+0x578>
    784a:	2b00      	cmp	r3, #0
    784c:	d100      	bne.n	7850 <__aeabi_dsub+0x42c>
    784e:	e0de      	b.n	7a0e <__aeabi_dsub+0x5ea>
    7850:	000b      	movs	r3, r1
    7852:	4313      	orrs	r3, r2
    7854:	d100      	bne.n	7858 <__aeabi_dsub+0x434>
    7856:	e66b      	b.n	7530 <__aeabi_dsub+0x10c>
    7858:	4452      	add	r2, sl
    785a:	4552      	cmp	r2, sl
    785c:	4180      	sbcs	r0, r0
    785e:	1864      	adds	r4, r4, r1
    7860:	4240      	negs	r0, r0
    7862:	1824      	adds	r4, r4, r0
    7864:	0017      	movs	r7, r2
    7866:	0223      	lsls	r3, r4, #8
    7868:	d400      	bmi.n	786c <__aeabi_dsub+0x448>
    786a:	e6fd      	b.n	7668 <__aeabi_dsub+0x244>
    786c:	4b77      	ldr	r3, [pc, #476]	; (7a4c <__aeabi_dsub+0x628>)
    786e:	4666      	mov	r6, ip
    7870:	401c      	ands	r4, r3
    7872:	e65d      	b.n	7530 <__aeabi_dsub+0x10c>
    7874:	0025      	movs	r5, r4
    7876:	4650      	mov	r0, sl
    7878:	4305      	orrs	r5, r0
    787a:	2e00      	cmp	r6, #0
    787c:	d1cf      	bne.n	781e <__aeabi_dsub+0x3fa>
    787e:	2d00      	cmp	r5, #0
    7880:	d14f      	bne.n	7922 <__aeabi_dsub+0x4fe>
    7882:	000c      	movs	r4, r1
    7884:	4314      	orrs	r4, r2
    7886:	d100      	bne.n	788a <__aeabi_dsub+0x466>
    7888:	e0a0      	b.n	79cc <__aeabi_dsub+0x5a8>
    788a:	000c      	movs	r4, r1
    788c:	0017      	movs	r7, r2
    788e:	4698      	mov	r8, r3
    7890:	e64e      	b.n	7530 <__aeabi_dsub+0x10c>
    7892:	4666      	mov	r6, ip
    7894:	2400      	movs	r4, #0
    7896:	2700      	movs	r7, #0
    7898:	e685      	b.n	75a6 <__aeabi_dsub+0x182>
    789a:	001f      	movs	r7, r3
    789c:	0008      	movs	r0, r1
    789e:	3f20      	subs	r7, #32
    78a0:	40f8      	lsrs	r0, r7
    78a2:	0007      	movs	r7, r0
    78a4:	2b20      	cmp	r3, #32
    78a6:	d100      	bne.n	78aa <__aeabi_dsub+0x486>
    78a8:	e08e      	b.n	79c8 <__aeabi_dsub+0x5a4>
    78aa:	2040      	movs	r0, #64	; 0x40
    78ac:	1ac3      	subs	r3, r0, r3
    78ae:	4099      	lsls	r1, r3
    78b0:	430a      	orrs	r2, r1
    78b2:	1e51      	subs	r1, r2, #1
    78b4:	418a      	sbcs	r2, r1
    78b6:	2100      	movs	r1, #0
    78b8:	4317      	orrs	r7, r2
    78ba:	e692      	b.n	75e2 <__aeabi_dsub+0x1be>
    78bc:	2e00      	cmp	r6, #0
    78be:	d114      	bne.n	78ea <__aeabi_dsub+0x4c6>
    78c0:	0026      	movs	r6, r4
    78c2:	4650      	mov	r0, sl
    78c4:	4306      	orrs	r6, r0
    78c6:	d062      	beq.n	798e <__aeabi_dsub+0x56a>
    78c8:	43db      	mvns	r3, r3
    78ca:	2b00      	cmp	r3, #0
    78cc:	d15c      	bne.n	7988 <__aeabi_dsub+0x564>
    78ce:	1887      	adds	r7, r0, r2
    78d0:	4297      	cmp	r7, r2
    78d2:	4192      	sbcs	r2, r2
    78d4:	1864      	adds	r4, r4, r1
    78d6:	4252      	negs	r2, r2
    78d8:	18a4      	adds	r4, r4, r2
    78da:	4666      	mov	r6, ip
    78dc:	e687      	b.n	75ee <__aeabi_dsub+0x1ca>
    78de:	4650      	mov	r0, sl
    78e0:	4320      	orrs	r0, r4
    78e2:	1e44      	subs	r4, r0, #1
    78e4:	41a0      	sbcs	r0, r4
    78e6:	2400      	movs	r4, #0
    78e8:	e760      	b.n	77ac <__aeabi_dsub+0x388>
    78ea:	4e57      	ldr	r6, [pc, #348]	; (7a48 <__aeabi_dsub+0x624>)
    78ec:	45b4      	cmp	ip, r6
    78ee:	d04e      	beq.n	798e <__aeabi_dsub+0x56a>
    78f0:	2680      	movs	r6, #128	; 0x80
    78f2:	0436      	lsls	r6, r6, #16
    78f4:	425b      	negs	r3, r3
    78f6:	4334      	orrs	r4, r6
    78f8:	2b38      	cmp	r3, #56	; 0x38
    78fa:	dd00      	ble.n	78fe <__aeabi_dsub+0x4da>
    78fc:	e07f      	b.n	79fe <__aeabi_dsub+0x5da>
    78fe:	2b1f      	cmp	r3, #31
    7900:	dd00      	ble.n	7904 <__aeabi_dsub+0x4e0>
    7902:	e08b      	b.n	7a1c <__aeabi_dsub+0x5f8>
    7904:	2620      	movs	r6, #32
    7906:	0027      	movs	r7, r4
    7908:	4650      	mov	r0, sl
    790a:	1af6      	subs	r6, r6, r3
    790c:	40b7      	lsls	r7, r6
    790e:	40d8      	lsrs	r0, r3
    7910:	4307      	orrs	r7, r0
    7912:	4650      	mov	r0, sl
    7914:	40b0      	lsls	r0, r6
    7916:	1e46      	subs	r6, r0, #1
    7918:	41b0      	sbcs	r0, r6
    791a:	4307      	orrs	r7, r0
    791c:	40dc      	lsrs	r4, r3
    791e:	18bf      	adds	r7, r7, r2
    7920:	e7d6      	b.n	78d0 <__aeabi_dsub+0x4ac>
    7922:	000d      	movs	r5, r1
    7924:	4315      	orrs	r5, r2
    7926:	d100      	bne.n	792a <__aeabi_dsub+0x506>
    7928:	e602      	b.n	7530 <__aeabi_dsub+0x10c>
    792a:	4650      	mov	r0, sl
    792c:	1a80      	subs	r0, r0, r2
    792e:	4582      	cmp	sl, r0
    7930:	41bf      	sbcs	r7, r7
    7932:	1a65      	subs	r5, r4, r1
    7934:	427f      	negs	r7, r7
    7936:	1bed      	subs	r5, r5, r7
    7938:	4684      	mov	ip, r0
    793a:	0228      	lsls	r0, r5, #8
    793c:	d400      	bmi.n	7940 <__aeabi_dsub+0x51c>
    793e:	e68d      	b.n	765c <__aeabi_dsub+0x238>
    7940:	4650      	mov	r0, sl
    7942:	1a17      	subs	r7, r2, r0
    7944:	42ba      	cmp	r2, r7
    7946:	4192      	sbcs	r2, r2
    7948:	1b0c      	subs	r4, r1, r4
    794a:	4252      	negs	r2, r2
    794c:	1aa4      	subs	r4, r4, r2
    794e:	4698      	mov	r8, r3
    7950:	e5ee      	b.n	7530 <__aeabi_dsub+0x10c>
    7952:	000d      	movs	r5, r1
    7954:	4315      	orrs	r5, r2
    7956:	d100      	bne.n	795a <__aeabi_dsub+0x536>
    7958:	e76b      	b.n	7832 <__aeabi_dsub+0x40e>
    795a:	4650      	mov	r0, sl
    795c:	0767      	lsls	r7, r4, #29
    795e:	08c0      	lsrs	r0, r0, #3
    7960:	4307      	orrs	r7, r0
    7962:	2080      	movs	r0, #128	; 0x80
    7964:	08e4      	lsrs	r4, r4, #3
    7966:	0300      	lsls	r0, r0, #12
    7968:	4204      	tst	r4, r0
    796a:	d007      	beq.n	797c <__aeabi_dsub+0x558>
    796c:	08cd      	lsrs	r5, r1, #3
    796e:	4205      	tst	r5, r0
    7970:	d104      	bne.n	797c <__aeabi_dsub+0x558>
    7972:	002c      	movs	r4, r5
    7974:	4698      	mov	r8, r3
    7976:	08d7      	lsrs	r7, r2, #3
    7978:	0749      	lsls	r1, r1, #29
    797a:	430f      	orrs	r7, r1
    797c:	0f7b      	lsrs	r3, r7, #29
    797e:	00e4      	lsls	r4, r4, #3
    7980:	431c      	orrs	r4, r3
    7982:	00ff      	lsls	r7, r7, #3
    7984:	4e30      	ldr	r6, [pc, #192]	; (7a48 <__aeabi_dsub+0x624>)
    7986:	e5d3      	b.n	7530 <__aeabi_dsub+0x10c>
    7988:	4e2f      	ldr	r6, [pc, #188]	; (7a48 <__aeabi_dsub+0x624>)
    798a:	45b4      	cmp	ip, r6
    798c:	d1b4      	bne.n	78f8 <__aeabi_dsub+0x4d4>
    798e:	000c      	movs	r4, r1
    7990:	0017      	movs	r7, r2
    7992:	4666      	mov	r6, ip
    7994:	e5cc      	b.n	7530 <__aeabi_dsub+0x10c>
    7996:	2700      	movs	r7, #0
    7998:	2400      	movs	r4, #0
    799a:	e5e8      	b.n	756e <__aeabi_dsub+0x14a>
    799c:	2b00      	cmp	r3, #0
    799e:	d039      	beq.n	7a14 <__aeabi_dsub+0x5f0>
    79a0:	000b      	movs	r3, r1
    79a2:	4313      	orrs	r3, r2
    79a4:	d100      	bne.n	79a8 <__aeabi_dsub+0x584>
    79a6:	e744      	b.n	7832 <__aeabi_dsub+0x40e>
    79a8:	08c0      	lsrs	r0, r0, #3
    79aa:	0767      	lsls	r7, r4, #29
    79ac:	4307      	orrs	r7, r0
    79ae:	2080      	movs	r0, #128	; 0x80
    79b0:	08e4      	lsrs	r4, r4, #3
    79b2:	0300      	lsls	r0, r0, #12
    79b4:	4204      	tst	r4, r0
    79b6:	d0e1      	beq.n	797c <__aeabi_dsub+0x558>
    79b8:	08cb      	lsrs	r3, r1, #3
    79ba:	4203      	tst	r3, r0
    79bc:	d1de      	bne.n	797c <__aeabi_dsub+0x558>
    79be:	08d7      	lsrs	r7, r2, #3
    79c0:	0749      	lsls	r1, r1, #29
    79c2:	430f      	orrs	r7, r1
    79c4:	001c      	movs	r4, r3
    79c6:	e7d9      	b.n	797c <__aeabi_dsub+0x558>
    79c8:	2100      	movs	r1, #0
    79ca:	e771      	b.n	78b0 <__aeabi_dsub+0x48c>
    79cc:	2500      	movs	r5, #0
    79ce:	2700      	movs	r7, #0
    79d0:	e5e9      	b.n	75a6 <__aeabi_dsub+0x182>
    79d2:	002e      	movs	r6, r5
    79d4:	0027      	movs	r7, r4
    79d6:	3e20      	subs	r6, #32
    79d8:	40f7      	lsrs	r7, r6
    79da:	2d20      	cmp	r5, #32
    79dc:	d02f      	beq.n	7a3e <__aeabi_dsub+0x61a>
    79de:	2640      	movs	r6, #64	; 0x40
    79e0:	1b75      	subs	r5, r6, r5
    79e2:	40ac      	lsls	r4, r5
    79e4:	4650      	mov	r0, sl
    79e6:	4320      	orrs	r0, r4
    79e8:	1e44      	subs	r4, r0, #1
    79ea:	41a0      	sbcs	r0, r4
    79ec:	2400      	movs	r4, #0
    79ee:	4338      	orrs	r0, r7
    79f0:	e6dc      	b.n	77ac <__aeabi_dsub+0x388>
    79f2:	2480      	movs	r4, #128	; 0x80
    79f4:	2500      	movs	r5, #0
    79f6:	0324      	lsls	r4, r4, #12
    79f8:	4e13      	ldr	r6, [pc, #76]	; (7a48 <__aeabi_dsub+0x624>)
    79fa:	2700      	movs	r7, #0
    79fc:	e5d3      	b.n	75a6 <__aeabi_dsub+0x182>
    79fe:	4650      	mov	r0, sl
    7a00:	4320      	orrs	r0, r4
    7a02:	0007      	movs	r7, r0
    7a04:	1e78      	subs	r0, r7, #1
    7a06:	4187      	sbcs	r7, r0
    7a08:	2400      	movs	r4, #0
    7a0a:	18bf      	adds	r7, r7, r2
    7a0c:	e760      	b.n	78d0 <__aeabi_dsub+0x4ac>
    7a0e:	000c      	movs	r4, r1
    7a10:	0017      	movs	r7, r2
    7a12:	e58d      	b.n	7530 <__aeabi_dsub+0x10c>
    7a14:	000c      	movs	r4, r1
    7a16:	0017      	movs	r7, r2
    7a18:	4e0b      	ldr	r6, [pc, #44]	; (7a48 <__aeabi_dsub+0x624>)
    7a1a:	e589      	b.n	7530 <__aeabi_dsub+0x10c>
    7a1c:	001e      	movs	r6, r3
    7a1e:	0027      	movs	r7, r4
    7a20:	3e20      	subs	r6, #32
    7a22:	40f7      	lsrs	r7, r6
    7a24:	2b20      	cmp	r3, #32
    7a26:	d00c      	beq.n	7a42 <__aeabi_dsub+0x61e>
    7a28:	2640      	movs	r6, #64	; 0x40
    7a2a:	1af3      	subs	r3, r6, r3
    7a2c:	409c      	lsls	r4, r3
    7a2e:	4650      	mov	r0, sl
    7a30:	4320      	orrs	r0, r4
    7a32:	1e44      	subs	r4, r0, #1
    7a34:	41a0      	sbcs	r0, r4
    7a36:	4307      	orrs	r7, r0
    7a38:	2400      	movs	r4, #0
    7a3a:	18bf      	adds	r7, r7, r2
    7a3c:	e748      	b.n	78d0 <__aeabi_dsub+0x4ac>
    7a3e:	2400      	movs	r4, #0
    7a40:	e7d0      	b.n	79e4 <__aeabi_dsub+0x5c0>
    7a42:	2400      	movs	r4, #0
    7a44:	e7f3      	b.n	7a2e <__aeabi_dsub+0x60a>
    7a46:	46c0      	nop			; (mov r8, r8)
    7a48:	000007ff 	.word	0x000007ff
    7a4c:	ff7fffff 	.word	0xff7fffff

00007a50 <__aeabi_d2iz>:
    7a50:	b530      	push	{r4, r5, lr}
    7a52:	4d13      	ldr	r5, [pc, #76]	; (7aa0 <__aeabi_d2iz+0x50>)
    7a54:	030a      	lsls	r2, r1, #12
    7a56:	004b      	lsls	r3, r1, #1
    7a58:	0b12      	lsrs	r2, r2, #12
    7a5a:	0d5b      	lsrs	r3, r3, #21
    7a5c:	0fc9      	lsrs	r1, r1, #31
    7a5e:	2400      	movs	r4, #0
    7a60:	42ab      	cmp	r3, r5
    7a62:	dd10      	ble.n	7a86 <__aeabi_d2iz+0x36>
    7a64:	4c0f      	ldr	r4, [pc, #60]	; (7aa4 <__aeabi_d2iz+0x54>)
    7a66:	42a3      	cmp	r3, r4
    7a68:	dc0f      	bgt.n	7a8a <__aeabi_d2iz+0x3a>
    7a6a:	2480      	movs	r4, #128	; 0x80
    7a6c:	4d0e      	ldr	r5, [pc, #56]	; (7aa8 <__aeabi_d2iz+0x58>)
    7a6e:	0364      	lsls	r4, r4, #13
    7a70:	4322      	orrs	r2, r4
    7a72:	1aed      	subs	r5, r5, r3
    7a74:	2d1f      	cmp	r5, #31
    7a76:	dd0b      	ble.n	7a90 <__aeabi_d2iz+0x40>
    7a78:	480c      	ldr	r0, [pc, #48]	; (7aac <__aeabi_d2iz+0x5c>)
    7a7a:	1ac3      	subs	r3, r0, r3
    7a7c:	40da      	lsrs	r2, r3
    7a7e:	4254      	negs	r4, r2
    7a80:	2900      	cmp	r1, #0
    7a82:	d100      	bne.n	7a86 <__aeabi_d2iz+0x36>
    7a84:	0014      	movs	r4, r2
    7a86:	0020      	movs	r0, r4
    7a88:	bd30      	pop	{r4, r5, pc}
    7a8a:	4b09      	ldr	r3, [pc, #36]	; (7ab0 <__aeabi_d2iz+0x60>)
    7a8c:	18cc      	adds	r4, r1, r3
    7a8e:	e7fa      	b.n	7a86 <__aeabi_d2iz+0x36>
    7a90:	4c08      	ldr	r4, [pc, #32]	; (7ab4 <__aeabi_d2iz+0x64>)
    7a92:	40e8      	lsrs	r0, r5
    7a94:	46a4      	mov	ip, r4
    7a96:	4463      	add	r3, ip
    7a98:	409a      	lsls	r2, r3
    7a9a:	4302      	orrs	r2, r0
    7a9c:	e7ef      	b.n	7a7e <__aeabi_d2iz+0x2e>
    7a9e:	46c0      	nop			; (mov r8, r8)
    7aa0:	000003fe 	.word	0x000003fe
    7aa4:	0000041d 	.word	0x0000041d
    7aa8:	00000433 	.word	0x00000433
    7aac:	00000413 	.word	0x00000413
    7ab0:	7fffffff 	.word	0x7fffffff
    7ab4:	fffffbed 	.word	0xfffffbed

00007ab8 <__aeabi_i2d>:
    7ab8:	b570      	push	{r4, r5, r6, lr}
    7aba:	2800      	cmp	r0, #0
    7abc:	d030      	beq.n	7b20 <__aeabi_i2d+0x68>
    7abe:	17c3      	asrs	r3, r0, #31
    7ac0:	18c4      	adds	r4, r0, r3
    7ac2:	405c      	eors	r4, r3
    7ac4:	0fc5      	lsrs	r5, r0, #31
    7ac6:	0020      	movs	r0, r4
    7ac8:	f000 f8ae 	bl	7c28 <__clzsi2>
    7acc:	4b17      	ldr	r3, [pc, #92]	; (7b2c <__aeabi_i2d+0x74>)
    7ace:	4a18      	ldr	r2, [pc, #96]	; (7b30 <__aeabi_i2d+0x78>)
    7ad0:	1a1b      	subs	r3, r3, r0
    7ad2:	1ad2      	subs	r2, r2, r3
    7ad4:	2a1f      	cmp	r2, #31
    7ad6:	dd18      	ble.n	7b0a <__aeabi_i2d+0x52>
    7ad8:	4a16      	ldr	r2, [pc, #88]	; (7b34 <__aeabi_i2d+0x7c>)
    7ada:	1ad2      	subs	r2, r2, r3
    7adc:	4094      	lsls	r4, r2
    7ade:	2200      	movs	r2, #0
    7ae0:	0324      	lsls	r4, r4, #12
    7ae2:	055b      	lsls	r3, r3, #21
    7ae4:	0b24      	lsrs	r4, r4, #12
    7ae6:	0d5b      	lsrs	r3, r3, #21
    7ae8:	2100      	movs	r1, #0
    7aea:	0010      	movs	r0, r2
    7aec:	0324      	lsls	r4, r4, #12
    7aee:	0d0a      	lsrs	r2, r1, #20
    7af0:	0b24      	lsrs	r4, r4, #12
    7af2:	0512      	lsls	r2, r2, #20
    7af4:	4322      	orrs	r2, r4
    7af6:	4c10      	ldr	r4, [pc, #64]	; (7b38 <__aeabi_i2d+0x80>)
    7af8:	051b      	lsls	r3, r3, #20
    7afa:	4022      	ands	r2, r4
    7afc:	4313      	orrs	r3, r2
    7afe:	005b      	lsls	r3, r3, #1
    7b00:	07ed      	lsls	r5, r5, #31
    7b02:	085b      	lsrs	r3, r3, #1
    7b04:	432b      	orrs	r3, r5
    7b06:	0019      	movs	r1, r3
    7b08:	bd70      	pop	{r4, r5, r6, pc}
    7b0a:	0021      	movs	r1, r4
    7b0c:	4091      	lsls	r1, r2
    7b0e:	000a      	movs	r2, r1
    7b10:	210b      	movs	r1, #11
    7b12:	1a08      	subs	r0, r1, r0
    7b14:	40c4      	lsrs	r4, r0
    7b16:	055b      	lsls	r3, r3, #21
    7b18:	0324      	lsls	r4, r4, #12
    7b1a:	0b24      	lsrs	r4, r4, #12
    7b1c:	0d5b      	lsrs	r3, r3, #21
    7b1e:	e7e3      	b.n	7ae8 <__aeabi_i2d+0x30>
    7b20:	2500      	movs	r5, #0
    7b22:	2300      	movs	r3, #0
    7b24:	2400      	movs	r4, #0
    7b26:	2200      	movs	r2, #0
    7b28:	e7de      	b.n	7ae8 <__aeabi_i2d+0x30>
    7b2a:	46c0      	nop			; (mov r8, r8)
    7b2c:	0000041e 	.word	0x0000041e
    7b30:	00000433 	.word	0x00000433
    7b34:	00000413 	.word	0x00000413
    7b38:	800fffff 	.word	0x800fffff

00007b3c <__aeabi_ui2d>:
    7b3c:	b510      	push	{r4, lr}
    7b3e:	1e04      	subs	r4, r0, #0
    7b40:	d028      	beq.n	7b94 <__aeabi_ui2d+0x58>
    7b42:	f000 f871 	bl	7c28 <__clzsi2>
    7b46:	4b15      	ldr	r3, [pc, #84]	; (7b9c <__aeabi_ui2d+0x60>)
    7b48:	4a15      	ldr	r2, [pc, #84]	; (7ba0 <__aeabi_ui2d+0x64>)
    7b4a:	1a1b      	subs	r3, r3, r0
    7b4c:	1ad2      	subs	r2, r2, r3
    7b4e:	2a1f      	cmp	r2, #31
    7b50:	dd15      	ble.n	7b7e <__aeabi_ui2d+0x42>
    7b52:	4a14      	ldr	r2, [pc, #80]	; (7ba4 <__aeabi_ui2d+0x68>)
    7b54:	1ad2      	subs	r2, r2, r3
    7b56:	4094      	lsls	r4, r2
    7b58:	2200      	movs	r2, #0
    7b5a:	0324      	lsls	r4, r4, #12
    7b5c:	055b      	lsls	r3, r3, #21
    7b5e:	0b24      	lsrs	r4, r4, #12
    7b60:	0d5b      	lsrs	r3, r3, #21
    7b62:	2100      	movs	r1, #0
    7b64:	0010      	movs	r0, r2
    7b66:	0324      	lsls	r4, r4, #12
    7b68:	0d0a      	lsrs	r2, r1, #20
    7b6a:	0b24      	lsrs	r4, r4, #12
    7b6c:	0512      	lsls	r2, r2, #20
    7b6e:	4322      	orrs	r2, r4
    7b70:	4c0d      	ldr	r4, [pc, #52]	; (7ba8 <__aeabi_ui2d+0x6c>)
    7b72:	051b      	lsls	r3, r3, #20
    7b74:	4022      	ands	r2, r4
    7b76:	4313      	orrs	r3, r2
    7b78:	005b      	lsls	r3, r3, #1
    7b7a:	0859      	lsrs	r1, r3, #1
    7b7c:	bd10      	pop	{r4, pc}
    7b7e:	0021      	movs	r1, r4
    7b80:	4091      	lsls	r1, r2
    7b82:	000a      	movs	r2, r1
    7b84:	210b      	movs	r1, #11
    7b86:	1a08      	subs	r0, r1, r0
    7b88:	40c4      	lsrs	r4, r0
    7b8a:	055b      	lsls	r3, r3, #21
    7b8c:	0324      	lsls	r4, r4, #12
    7b8e:	0b24      	lsrs	r4, r4, #12
    7b90:	0d5b      	lsrs	r3, r3, #21
    7b92:	e7e6      	b.n	7b62 <__aeabi_ui2d+0x26>
    7b94:	2300      	movs	r3, #0
    7b96:	2400      	movs	r4, #0
    7b98:	2200      	movs	r2, #0
    7b9a:	e7e2      	b.n	7b62 <__aeabi_ui2d+0x26>
    7b9c:	0000041e 	.word	0x0000041e
    7ba0:	00000433 	.word	0x00000433
    7ba4:	00000413 	.word	0x00000413
    7ba8:	800fffff 	.word	0x800fffff

00007bac <__aeabi_cdrcmple>:
    7bac:	4684      	mov	ip, r0
    7bae:	1c10      	adds	r0, r2, #0
    7bb0:	4662      	mov	r2, ip
    7bb2:	468c      	mov	ip, r1
    7bb4:	1c19      	adds	r1, r3, #0
    7bb6:	4663      	mov	r3, ip
    7bb8:	e000      	b.n	7bbc <__aeabi_cdcmpeq>
    7bba:	46c0      	nop			; (mov r8, r8)

00007bbc <__aeabi_cdcmpeq>:
    7bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7bbe:	f000 f8ef 	bl	7da0 <__ledf2>
    7bc2:	2800      	cmp	r0, #0
    7bc4:	d401      	bmi.n	7bca <__aeabi_cdcmpeq+0xe>
    7bc6:	2100      	movs	r1, #0
    7bc8:	42c8      	cmn	r0, r1
    7bca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007bcc <__aeabi_dcmpeq>:
    7bcc:	b510      	push	{r4, lr}
    7bce:	f000 f849 	bl	7c64 <__eqdf2>
    7bd2:	4240      	negs	r0, r0
    7bd4:	3001      	adds	r0, #1
    7bd6:	bd10      	pop	{r4, pc}

00007bd8 <__aeabi_dcmplt>:
    7bd8:	b510      	push	{r4, lr}
    7bda:	f000 f8e1 	bl	7da0 <__ledf2>
    7bde:	2800      	cmp	r0, #0
    7be0:	db01      	blt.n	7be6 <__aeabi_dcmplt+0xe>
    7be2:	2000      	movs	r0, #0
    7be4:	bd10      	pop	{r4, pc}
    7be6:	2001      	movs	r0, #1
    7be8:	bd10      	pop	{r4, pc}
    7bea:	46c0      	nop			; (mov r8, r8)

00007bec <__aeabi_dcmple>:
    7bec:	b510      	push	{r4, lr}
    7bee:	f000 f8d7 	bl	7da0 <__ledf2>
    7bf2:	2800      	cmp	r0, #0
    7bf4:	dd01      	ble.n	7bfa <__aeabi_dcmple+0xe>
    7bf6:	2000      	movs	r0, #0
    7bf8:	bd10      	pop	{r4, pc}
    7bfa:	2001      	movs	r0, #1
    7bfc:	bd10      	pop	{r4, pc}
    7bfe:	46c0      	nop			; (mov r8, r8)

00007c00 <__aeabi_dcmpgt>:
    7c00:	b510      	push	{r4, lr}
    7c02:	f000 f869 	bl	7cd8 <__gedf2>
    7c06:	2800      	cmp	r0, #0
    7c08:	dc01      	bgt.n	7c0e <__aeabi_dcmpgt+0xe>
    7c0a:	2000      	movs	r0, #0
    7c0c:	bd10      	pop	{r4, pc}
    7c0e:	2001      	movs	r0, #1
    7c10:	bd10      	pop	{r4, pc}
    7c12:	46c0      	nop			; (mov r8, r8)

00007c14 <__aeabi_dcmpge>:
    7c14:	b510      	push	{r4, lr}
    7c16:	f000 f85f 	bl	7cd8 <__gedf2>
    7c1a:	2800      	cmp	r0, #0
    7c1c:	da01      	bge.n	7c22 <__aeabi_dcmpge+0xe>
    7c1e:	2000      	movs	r0, #0
    7c20:	bd10      	pop	{r4, pc}
    7c22:	2001      	movs	r0, #1
    7c24:	bd10      	pop	{r4, pc}
    7c26:	46c0      	nop			; (mov r8, r8)

00007c28 <__clzsi2>:
    7c28:	211c      	movs	r1, #28
    7c2a:	2301      	movs	r3, #1
    7c2c:	041b      	lsls	r3, r3, #16
    7c2e:	4298      	cmp	r0, r3
    7c30:	d301      	bcc.n	7c36 <__clzsi2+0xe>
    7c32:	0c00      	lsrs	r0, r0, #16
    7c34:	3910      	subs	r1, #16
    7c36:	0a1b      	lsrs	r3, r3, #8
    7c38:	4298      	cmp	r0, r3
    7c3a:	d301      	bcc.n	7c40 <__clzsi2+0x18>
    7c3c:	0a00      	lsrs	r0, r0, #8
    7c3e:	3908      	subs	r1, #8
    7c40:	091b      	lsrs	r3, r3, #4
    7c42:	4298      	cmp	r0, r3
    7c44:	d301      	bcc.n	7c4a <__clzsi2+0x22>
    7c46:	0900      	lsrs	r0, r0, #4
    7c48:	3904      	subs	r1, #4
    7c4a:	a202      	add	r2, pc, #8	; (adr r2, 7c54 <__clzsi2+0x2c>)
    7c4c:	5c10      	ldrb	r0, [r2, r0]
    7c4e:	1840      	adds	r0, r0, r1
    7c50:	4770      	bx	lr
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	02020304 	.word	0x02020304
    7c58:	01010101 	.word	0x01010101
	...

00007c64 <__eqdf2>:
    7c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c66:	464f      	mov	r7, r9
    7c68:	4646      	mov	r6, r8
    7c6a:	46d6      	mov	lr, sl
    7c6c:	005c      	lsls	r4, r3, #1
    7c6e:	b5c0      	push	{r6, r7, lr}
    7c70:	031f      	lsls	r7, r3, #12
    7c72:	0fdb      	lsrs	r3, r3, #31
    7c74:	469a      	mov	sl, r3
    7c76:	4b17      	ldr	r3, [pc, #92]	; (7cd4 <__eqdf2+0x70>)
    7c78:	030e      	lsls	r6, r1, #12
    7c7a:	004d      	lsls	r5, r1, #1
    7c7c:	4684      	mov	ip, r0
    7c7e:	4680      	mov	r8, r0
    7c80:	0b36      	lsrs	r6, r6, #12
    7c82:	0d6d      	lsrs	r5, r5, #21
    7c84:	0fc9      	lsrs	r1, r1, #31
    7c86:	4691      	mov	r9, r2
    7c88:	0b3f      	lsrs	r7, r7, #12
    7c8a:	0d64      	lsrs	r4, r4, #21
    7c8c:	2001      	movs	r0, #1
    7c8e:	429d      	cmp	r5, r3
    7c90:	d008      	beq.n	7ca4 <__eqdf2+0x40>
    7c92:	429c      	cmp	r4, r3
    7c94:	d001      	beq.n	7c9a <__eqdf2+0x36>
    7c96:	42a5      	cmp	r5, r4
    7c98:	d00b      	beq.n	7cb2 <__eqdf2+0x4e>
    7c9a:	bc1c      	pop	{r2, r3, r4}
    7c9c:	4690      	mov	r8, r2
    7c9e:	4699      	mov	r9, r3
    7ca0:	46a2      	mov	sl, r4
    7ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ca4:	4663      	mov	r3, ip
    7ca6:	4333      	orrs	r3, r6
    7ca8:	d1f7      	bne.n	7c9a <__eqdf2+0x36>
    7caa:	42ac      	cmp	r4, r5
    7cac:	d1f5      	bne.n	7c9a <__eqdf2+0x36>
    7cae:	433a      	orrs	r2, r7
    7cb0:	d1f3      	bne.n	7c9a <__eqdf2+0x36>
    7cb2:	2001      	movs	r0, #1
    7cb4:	42be      	cmp	r6, r7
    7cb6:	d1f0      	bne.n	7c9a <__eqdf2+0x36>
    7cb8:	45c8      	cmp	r8, r9
    7cba:	d1ee      	bne.n	7c9a <__eqdf2+0x36>
    7cbc:	4551      	cmp	r1, sl
    7cbe:	d007      	beq.n	7cd0 <__eqdf2+0x6c>
    7cc0:	2d00      	cmp	r5, #0
    7cc2:	d1ea      	bne.n	7c9a <__eqdf2+0x36>
    7cc4:	4663      	mov	r3, ip
    7cc6:	431e      	orrs	r6, r3
    7cc8:	0030      	movs	r0, r6
    7cca:	1e46      	subs	r6, r0, #1
    7ccc:	41b0      	sbcs	r0, r6
    7cce:	e7e4      	b.n	7c9a <__eqdf2+0x36>
    7cd0:	2000      	movs	r0, #0
    7cd2:	e7e2      	b.n	7c9a <__eqdf2+0x36>
    7cd4:	000007ff 	.word	0x000007ff

00007cd8 <__gedf2>:
    7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cda:	4645      	mov	r5, r8
    7cdc:	46de      	mov	lr, fp
    7cde:	4657      	mov	r7, sl
    7ce0:	464e      	mov	r6, r9
    7ce2:	b5e0      	push	{r5, r6, r7, lr}
    7ce4:	031f      	lsls	r7, r3, #12
    7ce6:	0b3d      	lsrs	r5, r7, #12
    7ce8:	4f2c      	ldr	r7, [pc, #176]	; (7d9c <__gedf2+0xc4>)
    7cea:	030e      	lsls	r6, r1, #12
    7cec:	004c      	lsls	r4, r1, #1
    7cee:	46ab      	mov	fp, r5
    7cf0:	005d      	lsls	r5, r3, #1
    7cf2:	4684      	mov	ip, r0
    7cf4:	0b36      	lsrs	r6, r6, #12
    7cf6:	0d64      	lsrs	r4, r4, #21
    7cf8:	0fc9      	lsrs	r1, r1, #31
    7cfa:	4690      	mov	r8, r2
    7cfc:	0d6d      	lsrs	r5, r5, #21
    7cfe:	0fdb      	lsrs	r3, r3, #31
    7d00:	42bc      	cmp	r4, r7
    7d02:	d02a      	beq.n	7d5a <__gedf2+0x82>
    7d04:	4f25      	ldr	r7, [pc, #148]	; (7d9c <__gedf2+0xc4>)
    7d06:	42bd      	cmp	r5, r7
    7d08:	d02d      	beq.n	7d66 <__gedf2+0x8e>
    7d0a:	2c00      	cmp	r4, #0
    7d0c:	d10f      	bne.n	7d2e <__gedf2+0x56>
    7d0e:	4330      	orrs	r0, r6
    7d10:	0007      	movs	r7, r0
    7d12:	4681      	mov	r9, r0
    7d14:	4278      	negs	r0, r7
    7d16:	4178      	adcs	r0, r7
    7d18:	b2c0      	uxtb	r0, r0
    7d1a:	2d00      	cmp	r5, #0
    7d1c:	d117      	bne.n	7d4e <__gedf2+0x76>
    7d1e:	465f      	mov	r7, fp
    7d20:	433a      	orrs	r2, r7
    7d22:	d114      	bne.n	7d4e <__gedf2+0x76>
    7d24:	464b      	mov	r3, r9
    7d26:	2000      	movs	r0, #0
    7d28:	2b00      	cmp	r3, #0
    7d2a:	d00a      	beq.n	7d42 <__gedf2+0x6a>
    7d2c:	e006      	b.n	7d3c <__gedf2+0x64>
    7d2e:	2d00      	cmp	r5, #0
    7d30:	d102      	bne.n	7d38 <__gedf2+0x60>
    7d32:	4658      	mov	r0, fp
    7d34:	4302      	orrs	r2, r0
    7d36:	d001      	beq.n	7d3c <__gedf2+0x64>
    7d38:	4299      	cmp	r1, r3
    7d3a:	d018      	beq.n	7d6e <__gedf2+0x96>
    7d3c:	4248      	negs	r0, r1
    7d3e:	2101      	movs	r1, #1
    7d40:	4308      	orrs	r0, r1
    7d42:	bc3c      	pop	{r2, r3, r4, r5}
    7d44:	4690      	mov	r8, r2
    7d46:	4699      	mov	r9, r3
    7d48:	46a2      	mov	sl, r4
    7d4a:	46ab      	mov	fp, r5
    7d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d4e:	2800      	cmp	r0, #0
    7d50:	d0f2      	beq.n	7d38 <__gedf2+0x60>
    7d52:	2001      	movs	r0, #1
    7d54:	3b01      	subs	r3, #1
    7d56:	4318      	orrs	r0, r3
    7d58:	e7f3      	b.n	7d42 <__gedf2+0x6a>
    7d5a:	0037      	movs	r7, r6
    7d5c:	4307      	orrs	r7, r0
    7d5e:	d0d1      	beq.n	7d04 <__gedf2+0x2c>
    7d60:	2002      	movs	r0, #2
    7d62:	4240      	negs	r0, r0
    7d64:	e7ed      	b.n	7d42 <__gedf2+0x6a>
    7d66:	465f      	mov	r7, fp
    7d68:	4317      	orrs	r7, r2
    7d6a:	d0ce      	beq.n	7d0a <__gedf2+0x32>
    7d6c:	e7f8      	b.n	7d60 <__gedf2+0x88>
    7d6e:	42ac      	cmp	r4, r5
    7d70:	dce4      	bgt.n	7d3c <__gedf2+0x64>
    7d72:	da03      	bge.n	7d7c <__gedf2+0xa4>
    7d74:	1e48      	subs	r0, r1, #1
    7d76:	2101      	movs	r1, #1
    7d78:	4308      	orrs	r0, r1
    7d7a:	e7e2      	b.n	7d42 <__gedf2+0x6a>
    7d7c:	455e      	cmp	r6, fp
    7d7e:	d8dd      	bhi.n	7d3c <__gedf2+0x64>
    7d80:	d006      	beq.n	7d90 <__gedf2+0xb8>
    7d82:	2000      	movs	r0, #0
    7d84:	455e      	cmp	r6, fp
    7d86:	d2dc      	bcs.n	7d42 <__gedf2+0x6a>
    7d88:	2301      	movs	r3, #1
    7d8a:	1e48      	subs	r0, r1, #1
    7d8c:	4318      	orrs	r0, r3
    7d8e:	e7d8      	b.n	7d42 <__gedf2+0x6a>
    7d90:	45c4      	cmp	ip, r8
    7d92:	d8d3      	bhi.n	7d3c <__gedf2+0x64>
    7d94:	2000      	movs	r0, #0
    7d96:	45c4      	cmp	ip, r8
    7d98:	d3f6      	bcc.n	7d88 <__gedf2+0xb0>
    7d9a:	e7d2      	b.n	7d42 <__gedf2+0x6a>
    7d9c:	000007ff 	.word	0x000007ff

00007da0 <__ledf2>:
    7da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7da2:	464e      	mov	r6, r9
    7da4:	4645      	mov	r5, r8
    7da6:	46de      	mov	lr, fp
    7da8:	4657      	mov	r7, sl
    7daa:	005c      	lsls	r4, r3, #1
    7dac:	b5e0      	push	{r5, r6, r7, lr}
    7dae:	031f      	lsls	r7, r3, #12
    7db0:	0fdb      	lsrs	r3, r3, #31
    7db2:	4699      	mov	r9, r3
    7db4:	4b2a      	ldr	r3, [pc, #168]	; (7e60 <__ledf2+0xc0>)
    7db6:	030e      	lsls	r6, r1, #12
    7db8:	004d      	lsls	r5, r1, #1
    7dba:	0fc9      	lsrs	r1, r1, #31
    7dbc:	4684      	mov	ip, r0
    7dbe:	0b36      	lsrs	r6, r6, #12
    7dc0:	0d6d      	lsrs	r5, r5, #21
    7dc2:	468b      	mov	fp, r1
    7dc4:	4690      	mov	r8, r2
    7dc6:	0b3f      	lsrs	r7, r7, #12
    7dc8:	0d64      	lsrs	r4, r4, #21
    7dca:	429d      	cmp	r5, r3
    7dcc:	d020      	beq.n	7e10 <__ledf2+0x70>
    7dce:	4b24      	ldr	r3, [pc, #144]	; (7e60 <__ledf2+0xc0>)
    7dd0:	429c      	cmp	r4, r3
    7dd2:	d022      	beq.n	7e1a <__ledf2+0x7a>
    7dd4:	2d00      	cmp	r5, #0
    7dd6:	d112      	bne.n	7dfe <__ledf2+0x5e>
    7dd8:	4330      	orrs	r0, r6
    7dda:	4243      	negs	r3, r0
    7ddc:	4143      	adcs	r3, r0
    7dde:	b2db      	uxtb	r3, r3
    7de0:	2c00      	cmp	r4, #0
    7de2:	d01f      	beq.n	7e24 <__ledf2+0x84>
    7de4:	2b00      	cmp	r3, #0
    7de6:	d00c      	beq.n	7e02 <__ledf2+0x62>
    7de8:	464b      	mov	r3, r9
    7dea:	2001      	movs	r0, #1
    7dec:	3b01      	subs	r3, #1
    7dee:	4303      	orrs	r3, r0
    7df0:	0018      	movs	r0, r3
    7df2:	bc3c      	pop	{r2, r3, r4, r5}
    7df4:	4690      	mov	r8, r2
    7df6:	4699      	mov	r9, r3
    7df8:	46a2      	mov	sl, r4
    7dfa:	46ab      	mov	fp, r5
    7dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dfe:	2c00      	cmp	r4, #0
    7e00:	d016      	beq.n	7e30 <__ledf2+0x90>
    7e02:	45cb      	cmp	fp, r9
    7e04:	d017      	beq.n	7e36 <__ledf2+0x96>
    7e06:	465b      	mov	r3, fp
    7e08:	4259      	negs	r1, r3
    7e0a:	2301      	movs	r3, #1
    7e0c:	430b      	orrs	r3, r1
    7e0e:	e7ef      	b.n	7df0 <__ledf2+0x50>
    7e10:	0031      	movs	r1, r6
    7e12:	2302      	movs	r3, #2
    7e14:	4301      	orrs	r1, r0
    7e16:	d1eb      	bne.n	7df0 <__ledf2+0x50>
    7e18:	e7d9      	b.n	7dce <__ledf2+0x2e>
    7e1a:	0039      	movs	r1, r7
    7e1c:	2302      	movs	r3, #2
    7e1e:	4311      	orrs	r1, r2
    7e20:	d1e6      	bne.n	7df0 <__ledf2+0x50>
    7e22:	e7d7      	b.n	7dd4 <__ledf2+0x34>
    7e24:	433a      	orrs	r2, r7
    7e26:	d1dd      	bne.n	7de4 <__ledf2+0x44>
    7e28:	2300      	movs	r3, #0
    7e2a:	2800      	cmp	r0, #0
    7e2c:	d0e0      	beq.n	7df0 <__ledf2+0x50>
    7e2e:	e7ea      	b.n	7e06 <__ledf2+0x66>
    7e30:	433a      	orrs	r2, r7
    7e32:	d1e6      	bne.n	7e02 <__ledf2+0x62>
    7e34:	e7e7      	b.n	7e06 <__ledf2+0x66>
    7e36:	42a5      	cmp	r5, r4
    7e38:	dce5      	bgt.n	7e06 <__ledf2+0x66>
    7e3a:	db05      	blt.n	7e48 <__ledf2+0xa8>
    7e3c:	42be      	cmp	r6, r7
    7e3e:	d8e2      	bhi.n	7e06 <__ledf2+0x66>
    7e40:	d007      	beq.n	7e52 <__ledf2+0xb2>
    7e42:	2300      	movs	r3, #0
    7e44:	42be      	cmp	r6, r7
    7e46:	d2d3      	bcs.n	7df0 <__ledf2+0x50>
    7e48:	4659      	mov	r1, fp
    7e4a:	2301      	movs	r3, #1
    7e4c:	3901      	subs	r1, #1
    7e4e:	430b      	orrs	r3, r1
    7e50:	e7ce      	b.n	7df0 <__ledf2+0x50>
    7e52:	45c4      	cmp	ip, r8
    7e54:	d8d7      	bhi.n	7e06 <__ledf2+0x66>
    7e56:	2300      	movs	r3, #0
    7e58:	45c4      	cmp	ip, r8
    7e5a:	d3f5      	bcc.n	7e48 <__ledf2+0xa8>
    7e5c:	e7c8      	b.n	7df0 <__ledf2+0x50>
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	000007ff 	.word	0x000007ff

00007e64 <__libc_init_array>:
    7e64:	b570      	push	{r4, r5, r6, lr}
    7e66:	2600      	movs	r6, #0
    7e68:	4d0c      	ldr	r5, [pc, #48]	; (7e9c <__libc_init_array+0x38>)
    7e6a:	4c0d      	ldr	r4, [pc, #52]	; (7ea0 <__libc_init_array+0x3c>)
    7e6c:	1b64      	subs	r4, r4, r5
    7e6e:	10a4      	asrs	r4, r4, #2
    7e70:	42a6      	cmp	r6, r4
    7e72:	d109      	bne.n	7e88 <__libc_init_array+0x24>
    7e74:	2600      	movs	r6, #0
    7e76:	f001 fa09 	bl	928c <_init>
    7e7a:	4d0a      	ldr	r5, [pc, #40]	; (7ea4 <__libc_init_array+0x40>)
    7e7c:	4c0a      	ldr	r4, [pc, #40]	; (7ea8 <__libc_init_array+0x44>)
    7e7e:	1b64      	subs	r4, r4, r5
    7e80:	10a4      	asrs	r4, r4, #2
    7e82:	42a6      	cmp	r6, r4
    7e84:	d105      	bne.n	7e92 <__libc_init_array+0x2e>
    7e86:	bd70      	pop	{r4, r5, r6, pc}
    7e88:	00b3      	lsls	r3, r6, #2
    7e8a:	58eb      	ldr	r3, [r5, r3]
    7e8c:	4798      	blx	r3
    7e8e:	3601      	adds	r6, #1
    7e90:	e7ee      	b.n	7e70 <__libc_init_array+0xc>
    7e92:	00b3      	lsls	r3, r6, #2
    7e94:	58eb      	ldr	r3, [r5, r3]
    7e96:	4798      	blx	r3
    7e98:	3601      	adds	r6, #1
    7e9a:	e7f2      	b.n	7e82 <__libc_init_array+0x1e>
    7e9c:	00009298 	.word	0x00009298
    7ea0:	00009298 	.word	0x00009298
    7ea4:	00009298 	.word	0x00009298
    7ea8:	0000929c 	.word	0x0000929c

00007eac <memcpy>:
    7eac:	2300      	movs	r3, #0
    7eae:	b510      	push	{r4, lr}
    7eb0:	429a      	cmp	r2, r3
    7eb2:	d100      	bne.n	7eb6 <memcpy+0xa>
    7eb4:	bd10      	pop	{r4, pc}
    7eb6:	5ccc      	ldrb	r4, [r1, r3]
    7eb8:	54c4      	strb	r4, [r0, r3]
    7eba:	3301      	adds	r3, #1
    7ebc:	e7f8      	b.n	7eb0 <memcpy+0x4>

00007ebe <memset>:
    7ebe:	0003      	movs	r3, r0
    7ec0:	1882      	adds	r2, r0, r2
    7ec2:	4293      	cmp	r3, r2
    7ec4:	d100      	bne.n	7ec8 <memset+0xa>
    7ec6:	4770      	bx	lr
    7ec8:	7019      	strb	r1, [r3, #0]
    7eca:	3301      	adds	r3, #1
    7ecc:	e7f9      	b.n	7ec2 <memset+0x4>
	...

00007ed0 <iprintf>:
    7ed0:	b40f      	push	{r0, r1, r2, r3}
    7ed2:	4b0b      	ldr	r3, [pc, #44]	; (7f00 <iprintf+0x30>)
    7ed4:	b513      	push	{r0, r1, r4, lr}
    7ed6:	681c      	ldr	r4, [r3, #0]
    7ed8:	2c00      	cmp	r4, #0
    7eda:	d005      	beq.n	7ee8 <iprintf+0x18>
    7edc:	69a3      	ldr	r3, [r4, #24]
    7ede:	2b00      	cmp	r3, #0
    7ee0:	d102      	bne.n	7ee8 <iprintf+0x18>
    7ee2:	0020      	movs	r0, r4
    7ee4:	f000 faf2 	bl	84cc <__sinit>
    7ee8:	ab05      	add	r3, sp, #20
    7eea:	9a04      	ldr	r2, [sp, #16]
    7eec:	68a1      	ldr	r1, [r4, #8]
    7eee:	0020      	movs	r0, r4
    7ef0:	9301      	str	r3, [sp, #4]
    7ef2:	f000 fcc7 	bl	8884 <_vfiprintf_r>
    7ef6:	bc16      	pop	{r1, r2, r4}
    7ef8:	bc08      	pop	{r3}
    7efa:	b004      	add	sp, #16
    7efc:	4718      	bx	r3
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	20000024 	.word	0x20000024

00007f04 <_puts_r>:
    7f04:	b570      	push	{r4, r5, r6, lr}
    7f06:	0005      	movs	r5, r0
    7f08:	000e      	movs	r6, r1
    7f0a:	2800      	cmp	r0, #0
    7f0c:	d004      	beq.n	7f18 <_puts_r+0x14>
    7f0e:	6983      	ldr	r3, [r0, #24]
    7f10:	2b00      	cmp	r3, #0
    7f12:	d101      	bne.n	7f18 <_puts_r+0x14>
    7f14:	f000 fada 	bl	84cc <__sinit>
    7f18:	69ab      	ldr	r3, [r5, #24]
    7f1a:	68ac      	ldr	r4, [r5, #8]
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d102      	bne.n	7f26 <_puts_r+0x22>
    7f20:	0028      	movs	r0, r5
    7f22:	f000 fad3 	bl	84cc <__sinit>
    7f26:	4b24      	ldr	r3, [pc, #144]	; (7fb8 <_puts_r+0xb4>)
    7f28:	429c      	cmp	r4, r3
    7f2a:	d10f      	bne.n	7f4c <_puts_r+0x48>
    7f2c:	686c      	ldr	r4, [r5, #4]
    7f2e:	89a3      	ldrh	r3, [r4, #12]
    7f30:	071b      	lsls	r3, r3, #28
    7f32:	d502      	bpl.n	7f3a <_puts_r+0x36>
    7f34:	6923      	ldr	r3, [r4, #16]
    7f36:	2b00      	cmp	r3, #0
    7f38:	d120      	bne.n	7f7c <_puts_r+0x78>
    7f3a:	0021      	movs	r1, r4
    7f3c:	0028      	movs	r0, r5
    7f3e:	f000 f957 	bl	81f0 <__swsetup_r>
    7f42:	2800      	cmp	r0, #0
    7f44:	d01a      	beq.n	7f7c <_puts_r+0x78>
    7f46:	2001      	movs	r0, #1
    7f48:	4240      	negs	r0, r0
    7f4a:	bd70      	pop	{r4, r5, r6, pc}
    7f4c:	4b1b      	ldr	r3, [pc, #108]	; (7fbc <_puts_r+0xb8>)
    7f4e:	429c      	cmp	r4, r3
    7f50:	d101      	bne.n	7f56 <_puts_r+0x52>
    7f52:	68ac      	ldr	r4, [r5, #8]
    7f54:	e7eb      	b.n	7f2e <_puts_r+0x2a>
    7f56:	4b1a      	ldr	r3, [pc, #104]	; (7fc0 <_puts_r+0xbc>)
    7f58:	429c      	cmp	r4, r3
    7f5a:	d1e8      	bne.n	7f2e <_puts_r+0x2a>
    7f5c:	68ec      	ldr	r4, [r5, #12]
    7f5e:	e7e6      	b.n	7f2e <_puts_r+0x2a>
    7f60:	3b01      	subs	r3, #1
    7f62:	3601      	adds	r6, #1
    7f64:	60a3      	str	r3, [r4, #8]
    7f66:	2b00      	cmp	r3, #0
    7f68:	da04      	bge.n	7f74 <_puts_r+0x70>
    7f6a:	69a2      	ldr	r2, [r4, #24]
    7f6c:	4293      	cmp	r3, r2
    7f6e:	db16      	blt.n	7f9e <_puts_r+0x9a>
    7f70:	290a      	cmp	r1, #10
    7f72:	d014      	beq.n	7f9e <_puts_r+0x9a>
    7f74:	6823      	ldr	r3, [r4, #0]
    7f76:	1c5a      	adds	r2, r3, #1
    7f78:	6022      	str	r2, [r4, #0]
    7f7a:	7019      	strb	r1, [r3, #0]
    7f7c:	7831      	ldrb	r1, [r6, #0]
    7f7e:	68a3      	ldr	r3, [r4, #8]
    7f80:	2900      	cmp	r1, #0
    7f82:	d1ed      	bne.n	7f60 <_puts_r+0x5c>
    7f84:	3b01      	subs	r3, #1
    7f86:	60a3      	str	r3, [r4, #8]
    7f88:	2b00      	cmp	r3, #0
    7f8a:	da0f      	bge.n	7fac <_puts_r+0xa8>
    7f8c:	0022      	movs	r2, r4
    7f8e:	310a      	adds	r1, #10
    7f90:	0028      	movs	r0, r5
    7f92:	f000 f8d7 	bl	8144 <__swbuf_r>
    7f96:	1c43      	adds	r3, r0, #1
    7f98:	d0d5      	beq.n	7f46 <_puts_r+0x42>
    7f9a:	200a      	movs	r0, #10
    7f9c:	e7d5      	b.n	7f4a <_puts_r+0x46>
    7f9e:	0022      	movs	r2, r4
    7fa0:	0028      	movs	r0, r5
    7fa2:	f000 f8cf 	bl	8144 <__swbuf_r>
    7fa6:	1c43      	adds	r3, r0, #1
    7fa8:	d1e8      	bne.n	7f7c <_puts_r+0x78>
    7faa:	e7cc      	b.n	7f46 <_puts_r+0x42>
    7fac:	200a      	movs	r0, #10
    7fae:	6823      	ldr	r3, [r4, #0]
    7fb0:	1c5a      	adds	r2, r3, #1
    7fb2:	6022      	str	r2, [r4, #0]
    7fb4:	7018      	strb	r0, [r3, #0]
    7fb6:	e7c8      	b.n	7f4a <_puts_r+0x46>
    7fb8:	00009218 	.word	0x00009218
    7fbc:	00009238 	.word	0x00009238
    7fc0:	000091f8 	.word	0x000091f8

00007fc4 <puts>:
    7fc4:	b510      	push	{r4, lr}
    7fc6:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <puts+0x10>)
    7fc8:	0001      	movs	r1, r0
    7fca:	6818      	ldr	r0, [r3, #0]
    7fcc:	f7ff ff9a 	bl	7f04 <_puts_r>
    7fd0:	bd10      	pop	{r4, pc}
    7fd2:	46c0      	nop			; (mov r8, r8)
    7fd4:	20000024 	.word	0x20000024

00007fd8 <setbuf>:
    7fd8:	424a      	negs	r2, r1
    7fda:	414a      	adcs	r2, r1
    7fdc:	2380      	movs	r3, #128	; 0x80
    7fde:	b510      	push	{r4, lr}
    7fe0:	0052      	lsls	r2, r2, #1
    7fe2:	00db      	lsls	r3, r3, #3
    7fe4:	f000 f802 	bl	7fec <setvbuf>
    7fe8:	bd10      	pop	{r4, pc}
	...

00007fec <setvbuf>:
    7fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fee:	001d      	movs	r5, r3
    7ff0:	4b4f      	ldr	r3, [pc, #316]	; (8130 <setvbuf+0x144>)
    7ff2:	b085      	sub	sp, #20
    7ff4:	681e      	ldr	r6, [r3, #0]
    7ff6:	0004      	movs	r4, r0
    7ff8:	000f      	movs	r7, r1
    7ffa:	9200      	str	r2, [sp, #0]
    7ffc:	2e00      	cmp	r6, #0
    7ffe:	d005      	beq.n	800c <setvbuf+0x20>
    8000:	69b3      	ldr	r3, [r6, #24]
    8002:	2b00      	cmp	r3, #0
    8004:	d102      	bne.n	800c <setvbuf+0x20>
    8006:	0030      	movs	r0, r6
    8008:	f000 fa60 	bl	84cc <__sinit>
    800c:	4b49      	ldr	r3, [pc, #292]	; (8134 <setvbuf+0x148>)
    800e:	429c      	cmp	r4, r3
    8010:	d150      	bne.n	80b4 <setvbuf+0xc8>
    8012:	6874      	ldr	r4, [r6, #4]
    8014:	9b00      	ldr	r3, [sp, #0]
    8016:	2b02      	cmp	r3, #2
    8018:	d005      	beq.n	8026 <setvbuf+0x3a>
    801a:	2b01      	cmp	r3, #1
    801c:	d900      	bls.n	8020 <setvbuf+0x34>
    801e:	e084      	b.n	812a <setvbuf+0x13e>
    8020:	2d00      	cmp	r5, #0
    8022:	da00      	bge.n	8026 <setvbuf+0x3a>
    8024:	e081      	b.n	812a <setvbuf+0x13e>
    8026:	0021      	movs	r1, r4
    8028:	0030      	movs	r0, r6
    802a:	f000 f9e1 	bl	83f0 <_fflush_r>
    802e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8030:	2900      	cmp	r1, #0
    8032:	d008      	beq.n	8046 <setvbuf+0x5a>
    8034:	0023      	movs	r3, r4
    8036:	3344      	adds	r3, #68	; 0x44
    8038:	4299      	cmp	r1, r3
    803a:	d002      	beq.n	8042 <setvbuf+0x56>
    803c:	0030      	movs	r0, r6
    803e:	f000 fb51 	bl	86e4 <_free_r>
    8042:	2300      	movs	r3, #0
    8044:	6363      	str	r3, [r4, #52]	; 0x34
    8046:	2300      	movs	r3, #0
    8048:	61a3      	str	r3, [r4, #24]
    804a:	6063      	str	r3, [r4, #4]
    804c:	89a3      	ldrh	r3, [r4, #12]
    804e:	061b      	lsls	r3, r3, #24
    8050:	d503      	bpl.n	805a <setvbuf+0x6e>
    8052:	6921      	ldr	r1, [r4, #16]
    8054:	0030      	movs	r0, r6
    8056:	f000 fb45 	bl	86e4 <_free_r>
    805a:	89a3      	ldrh	r3, [r4, #12]
    805c:	4a36      	ldr	r2, [pc, #216]	; (8138 <setvbuf+0x14c>)
    805e:	4013      	ands	r3, r2
    8060:	81a3      	strh	r3, [r4, #12]
    8062:	9b00      	ldr	r3, [sp, #0]
    8064:	2b02      	cmp	r3, #2
    8066:	d05a      	beq.n	811e <setvbuf+0x132>
    8068:	ab03      	add	r3, sp, #12
    806a:	aa02      	add	r2, sp, #8
    806c:	0021      	movs	r1, r4
    806e:	0030      	movs	r0, r6
    8070:	f000 fac2 	bl	85f8 <__swhatbuf_r>
    8074:	89a3      	ldrh	r3, [r4, #12]
    8076:	4318      	orrs	r0, r3
    8078:	81a0      	strh	r0, [r4, #12]
    807a:	2d00      	cmp	r5, #0
    807c:	d124      	bne.n	80c8 <setvbuf+0xdc>
    807e:	9d02      	ldr	r5, [sp, #8]
    8080:	0028      	movs	r0, r5
    8082:	f000 fb25 	bl	86d0 <malloc>
    8086:	9501      	str	r5, [sp, #4]
    8088:	1e07      	subs	r7, r0, #0
    808a:	d142      	bne.n	8112 <setvbuf+0x126>
    808c:	9b02      	ldr	r3, [sp, #8]
    808e:	9301      	str	r3, [sp, #4]
    8090:	42ab      	cmp	r3, r5
    8092:	d139      	bne.n	8108 <setvbuf+0x11c>
    8094:	2001      	movs	r0, #1
    8096:	4240      	negs	r0, r0
    8098:	2302      	movs	r3, #2
    809a:	89a2      	ldrh	r2, [r4, #12]
    809c:	4313      	orrs	r3, r2
    809e:	81a3      	strh	r3, [r4, #12]
    80a0:	2300      	movs	r3, #0
    80a2:	60a3      	str	r3, [r4, #8]
    80a4:	0023      	movs	r3, r4
    80a6:	3347      	adds	r3, #71	; 0x47
    80a8:	6023      	str	r3, [r4, #0]
    80aa:	6123      	str	r3, [r4, #16]
    80ac:	2301      	movs	r3, #1
    80ae:	6163      	str	r3, [r4, #20]
    80b0:	b005      	add	sp, #20
    80b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80b4:	4b21      	ldr	r3, [pc, #132]	; (813c <setvbuf+0x150>)
    80b6:	429c      	cmp	r4, r3
    80b8:	d101      	bne.n	80be <setvbuf+0xd2>
    80ba:	68b4      	ldr	r4, [r6, #8]
    80bc:	e7aa      	b.n	8014 <setvbuf+0x28>
    80be:	4b20      	ldr	r3, [pc, #128]	; (8140 <setvbuf+0x154>)
    80c0:	429c      	cmp	r4, r3
    80c2:	d1a7      	bne.n	8014 <setvbuf+0x28>
    80c4:	68f4      	ldr	r4, [r6, #12]
    80c6:	e7a5      	b.n	8014 <setvbuf+0x28>
    80c8:	2f00      	cmp	r7, #0
    80ca:	d0d9      	beq.n	8080 <setvbuf+0x94>
    80cc:	69b3      	ldr	r3, [r6, #24]
    80ce:	2b00      	cmp	r3, #0
    80d0:	d102      	bne.n	80d8 <setvbuf+0xec>
    80d2:	0030      	movs	r0, r6
    80d4:	f000 f9fa 	bl	84cc <__sinit>
    80d8:	9b00      	ldr	r3, [sp, #0]
    80da:	2b01      	cmp	r3, #1
    80dc:	d103      	bne.n	80e6 <setvbuf+0xfa>
    80de:	89a3      	ldrh	r3, [r4, #12]
    80e0:	9a00      	ldr	r2, [sp, #0]
    80e2:	431a      	orrs	r2, r3
    80e4:	81a2      	strh	r2, [r4, #12]
    80e6:	2008      	movs	r0, #8
    80e8:	89a3      	ldrh	r3, [r4, #12]
    80ea:	6027      	str	r7, [r4, #0]
    80ec:	6127      	str	r7, [r4, #16]
    80ee:	6165      	str	r5, [r4, #20]
    80f0:	4018      	ands	r0, r3
    80f2:	d018      	beq.n	8126 <setvbuf+0x13a>
    80f4:	2001      	movs	r0, #1
    80f6:	4018      	ands	r0, r3
    80f8:	2300      	movs	r3, #0
    80fa:	4298      	cmp	r0, r3
    80fc:	d011      	beq.n	8122 <setvbuf+0x136>
    80fe:	426d      	negs	r5, r5
    8100:	60a3      	str	r3, [r4, #8]
    8102:	61a5      	str	r5, [r4, #24]
    8104:	0018      	movs	r0, r3
    8106:	e7d3      	b.n	80b0 <setvbuf+0xc4>
    8108:	9801      	ldr	r0, [sp, #4]
    810a:	f000 fae1 	bl	86d0 <malloc>
    810e:	1e07      	subs	r7, r0, #0
    8110:	d0c0      	beq.n	8094 <setvbuf+0xa8>
    8112:	2380      	movs	r3, #128	; 0x80
    8114:	89a2      	ldrh	r2, [r4, #12]
    8116:	9d01      	ldr	r5, [sp, #4]
    8118:	4313      	orrs	r3, r2
    811a:	81a3      	strh	r3, [r4, #12]
    811c:	e7d6      	b.n	80cc <setvbuf+0xe0>
    811e:	2000      	movs	r0, #0
    8120:	e7ba      	b.n	8098 <setvbuf+0xac>
    8122:	60a5      	str	r5, [r4, #8]
    8124:	e7c4      	b.n	80b0 <setvbuf+0xc4>
    8126:	60a0      	str	r0, [r4, #8]
    8128:	e7c2      	b.n	80b0 <setvbuf+0xc4>
    812a:	2001      	movs	r0, #1
    812c:	4240      	negs	r0, r0
    812e:	e7bf      	b.n	80b0 <setvbuf+0xc4>
    8130:	20000024 	.word	0x20000024
    8134:	00009218 	.word	0x00009218
    8138:	fffff35c 	.word	0xfffff35c
    813c:	00009238 	.word	0x00009238
    8140:	000091f8 	.word	0x000091f8

00008144 <__swbuf_r>:
    8144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8146:	0005      	movs	r5, r0
    8148:	000e      	movs	r6, r1
    814a:	0014      	movs	r4, r2
    814c:	2800      	cmp	r0, #0
    814e:	d004      	beq.n	815a <__swbuf_r+0x16>
    8150:	6983      	ldr	r3, [r0, #24]
    8152:	2b00      	cmp	r3, #0
    8154:	d101      	bne.n	815a <__swbuf_r+0x16>
    8156:	f000 f9b9 	bl	84cc <__sinit>
    815a:	4b22      	ldr	r3, [pc, #136]	; (81e4 <__swbuf_r+0xa0>)
    815c:	429c      	cmp	r4, r3
    815e:	d12d      	bne.n	81bc <__swbuf_r+0x78>
    8160:	686c      	ldr	r4, [r5, #4]
    8162:	69a3      	ldr	r3, [r4, #24]
    8164:	60a3      	str	r3, [r4, #8]
    8166:	89a3      	ldrh	r3, [r4, #12]
    8168:	071b      	lsls	r3, r3, #28
    816a:	d531      	bpl.n	81d0 <__swbuf_r+0x8c>
    816c:	6923      	ldr	r3, [r4, #16]
    816e:	2b00      	cmp	r3, #0
    8170:	d02e      	beq.n	81d0 <__swbuf_r+0x8c>
    8172:	6823      	ldr	r3, [r4, #0]
    8174:	6922      	ldr	r2, [r4, #16]
    8176:	b2f7      	uxtb	r7, r6
    8178:	1a98      	subs	r0, r3, r2
    817a:	6963      	ldr	r3, [r4, #20]
    817c:	b2f6      	uxtb	r6, r6
    817e:	4298      	cmp	r0, r3
    8180:	db05      	blt.n	818e <__swbuf_r+0x4a>
    8182:	0021      	movs	r1, r4
    8184:	0028      	movs	r0, r5
    8186:	f000 f933 	bl	83f0 <_fflush_r>
    818a:	2800      	cmp	r0, #0
    818c:	d126      	bne.n	81dc <__swbuf_r+0x98>
    818e:	68a3      	ldr	r3, [r4, #8]
    8190:	3001      	adds	r0, #1
    8192:	3b01      	subs	r3, #1
    8194:	60a3      	str	r3, [r4, #8]
    8196:	6823      	ldr	r3, [r4, #0]
    8198:	1c5a      	adds	r2, r3, #1
    819a:	6022      	str	r2, [r4, #0]
    819c:	701f      	strb	r7, [r3, #0]
    819e:	6963      	ldr	r3, [r4, #20]
    81a0:	4298      	cmp	r0, r3
    81a2:	d004      	beq.n	81ae <__swbuf_r+0x6a>
    81a4:	89a3      	ldrh	r3, [r4, #12]
    81a6:	07db      	lsls	r3, r3, #31
    81a8:	d51a      	bpl.n	81e0 <__swbuf_r+0x9c>
    81aa:	2e0a      	cmp	r6, #10
    81ac:	d118      	bne.n	81e0 <__swbuf_r+0x9c>
    81ae:	0021      	movs	r1, r4
    81b0:	0028      	movs	r0, r5
    81b2:	f000 f91d 	bl	83f0 <_fflush_r>
    81b6:	2800      	cmp	r0, #0
    81b8:	d012      	beq.n	81e0 <__swbuf_r+0x9c>
    81ba:	e00f      	b.n	81dc <__swbuf_r+0x98>
    81bc:	4b0a      	ldr	r3, [pc, #40]	; (81e8 <__swbuf_r+0xa4>)
    81be:	429c      	cmp	r4, r3
    81c0:	d101      	bne.n	81c6 <__swbuf_r+0x82>
    81c2:	68ac      	ldr	r4, [r5, #8]
    81c4:	e7cd      	b.n	8162 <__swbuf_r+0x1e>
    81c6:	4b09      	ldr	r3, [pc, #36]	; (81ec <__swbuf_r+0xa8>)
    81c8:	429c      	cmp	r4, r3
    81ca:	d1ca      	bne.n	8162 <__swbuf_r+0x1e>
    81cc:	68ec      	ldr	r4, [r5, #12]
    81ce:	e7c8      	b.n	8162 <__swbuf_r+0x1e>
    81d0:	0021      	movs	r1, r4
    81d2:	0028      	movs	r0, r5
    81d4:	f000 f80c 	bl	81f0 <__swsetup_r>
    81d8:	2800      	cmp	r0, #0
    81da:	d0ca      	beq.n	8172 <__swbuf_r+0x2e>
    81dc:	2601      	movs	r6, #1
    81de:	4276      	negs	r6, r6
    81e0:	0030      	movs	r0, r6
    81e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81e4:	00009218 	.word	0x00009218
    81e8:	00009238 	.word	0x00009238
    81ec:	000091f8 	.word	0x000091f8

000081f0 <__swsetup_r>:
    81f0:	4b36      	ldr	r3, [pc, #216]	; (82cc <__swsetup_r+0xdc>)
    81f2:	b570      	push	{r4, r5, r6, lr}
    81f4:	681d      	ldr	r5, [r3, #0]
    81f6:	0006      	movs	r6, r0
    81f8:	000c      	movs	r4, r1
    81fa:	2d00      	cmp	r5, #0
    81fc:	d005      	beq.n	820a <__swsetup_r+0x1a>
    81fe:	69ab      	ldr	r3, [r5, #24]
    8200:	2b00      	cmp	r3, #0
    8202:	d102      	bne.n	820a <__swsetup_r+0x1a>
    8204:	0028      	movs	r0, r5
    8206:	f000 f961 	bl	84cc <__sinit>
    820a:	4b31      	ldr	r3, [pc, #196]	; (82d0 <__swsetup_r+0xe0>)
    820c:	429c      	cmp	r4, r3
    820e:	d10f      	bne.n	8230 <__swsetup_r+0x40>
    8210:	686c      	ldr	r4, [r5, #4]
    8212:	230c      	movs	r3, #12
    8214:	5ee2      	ldrsh	r2, [r4, r3]
    8216:	b293      	uxth	r3, r2
    8218:	0719      	lsls	r1, r3, #28
    821a:	d42d      	bmi.n	8278 <__swsetup_r+0x88>
    821c:	06d9      	lsls	r1, r3, #27
    821e:	d411      	bmi.n	8244 <__swsetup_r+0x54>
    8220:	2309      	movs	r3, #9
    8222:	2001      	movs	r0, #1
    8224:	6033      	str	r3, [r6, #0]
    8226:	3337      	adds	r3, #55	; 0x37
    8228:	4313      	orrs	r3, r2
    822a:	81a3      	strh	r3, [r4, #12]
    822c:	4240      	negs	r0, r0
    822e:	bd70      	pop	{r4, r5, r6, pc}
    8230:	4b28      	ldr	r3, [pc, #160]	; (82d4 <__swsetup_r+0xe4>)
    8232:	429c      	cmp	r4, r3
    8234:	d101      	bne.n	823a <__swsetup_r+0x4a>
    8236:	68ac      	ldr	r4, [r5, #8]
    8238:	e7eb      	b.n	8212 <__swsetup_r+0x22>
    823a:	4b27      	ldr	r3, [pc, #156]	; (82d8 <__swsetup_r+0xe8>)
    823c:	429c      	cmp	r4, r3
    823e:	d1e8      	bne.n	8212 <__swsetup_r+0x22>
    8240:	68ec      	ldr	r4, [r5, #12]
    8242:	e7e6      	b.n	8212 <__swsetup_r+0x22>
    8244:	075b      	lsls	r3, r3, #29
    8246:	d513      	bpl.n	8270 <__swsetup_r+0x80>
    8248:	6b61      	ldr	r1, [r4, #52]	; 0x34
    824a:	2900      	cmp	r1, #0
    824c:	d008      	beq.n	8260 <__swsetup_r+0x70>
    824e:	0023      	movs	r3, r4
    8250:	3344      	adds	r3, #68	; 0x44
    8252:	4299      	cmp	r1, r3
    8254:	d002      	beq.n	825c <__swsetup_r+0x6c>
    8256:	0030      	movs	r0, r6
    8258:	f000 fa44 	bl	86e4 <_free_r>
    825c:	2300      	movs	r3, #0
    825e:	6363      	str	r3, [r4, #52]	; 0x34
    8260:	2224      	movs	r2, #36	; 0x24
    8262:	89a3      	ldrh	r3, [r4, #12]
    8264:	4393      	bics	r3, r2
    8266:	81a3      	strh	r3, [r4, #12]
    8268:	2300      	movs	r3, #0
    826a:	6063      	str	r3, [r4, #4]
    826c:	6923      	ldr	r3, [r4, #16]
    826e:	6023      	str	r3, [r4, #0]
    8270:	2308      	movs	r3, #8
    8272:	89a2      	ldrh	r2, [r4, #12]
    8274:	4313      	orrs	r3, r2
    8276:	81a3      	strh	r3, [r4, #12]
    8278:	6923      	ldr	r3, [r4, #16]
    827a:	2b00      	cmp	r3, #0
    827c:	d10b      	bne.n	8296 <__swsetup_r+0xa6>
    827e:	21a0      	movs	r1, #160	; 0xa0
    8280:	2280      	movs	r2, #128	; 0x80
    8282:	89a3      	ldrh	r3, [r4, #12]
    8284:	0089      	lsls	r1, r1, #2
    8286:	0092      	lsls	r2, r2, #2
    8288:	400b      	ands	r3, r1
    828a:	4293      	cmp	r3, r2
    828c:	d003      	beq.n	8296 <__swsetup_r+0xa6>
    828e:	0021      	movs	r1, r4
    8290:	0030      	movs	r0, r6
    8292:	f000 f9d9 	bl	8648 <__smakebuf_r>
    8296:	2301      	movs	r3, #1
    8298:	89a2      	ldrh	r2, [r4, #12]
    829a:	4013      	ands	r3, r2
    829c:	d011      	beq.n	82c2 <__swsetup_r+0xd2>
    829e:	2300      	movs	r3, #0
    82a0:	60a3      	str	r3, [r4, #8]
    82a2:	6963      	ldr	r3, [r4, #20]
    82a4:	425b      	negs	r3, r3
    82a6:	61a3      	str	r3, [r4, #24]
    82a8:	2000      	movs	r0, #0
    82aa:	6923      	ldr	r3, [r4, #16]
    82ac:	4283      	cmp	r3, r0
    82ae:	d1be      	bne.n	822e <__swsetup_r+0x3e>
    82b0:	230c      	movs	r3, #12
    82b2:	5ee2      	ldrsh	r2, [r4, r3]
    82b4:	0613      	lsls	r3, r2, #24
    82b6:	d5ba      	bpl.n	822e <__swsetup_r+0x3e>
    82b8:	2340      	movs	r3, #64	; 0x40
    82ba:	4313      	orrs	r3, r2
    82bc:	81a3      	strh	r3, [r4, #12]
    82be:	3801      	subs	r0, #1
    82c0:	e7b5      	b.n	822e <__swsetup_r+0x3e>
    82c2:	0792      	lsls	r2, r2, #30
    82c4:	d400      	bmi.n	82c8 <__swsetup_r+0xd8>
    82c6:	6963      	ldr	r3, [r4, #20]
    82c8:	60a3      	str	r3, [r4, #8]
    82ca:	e7ed      	b.n	82a8 <__swsetup_r+0xb8>
    82cc:	20000024 	.word	0x20000024
    82d0:	00009218 	.word	0x00009218
    82d4:	00009238 	.word	0x00009238
    82d8:	000091f8 	.word	0x000091f8

000082dc <__sflush_r>:
    82dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    82de:	898a      	ldrh	r2, [r1, #12]
    82e0:	0005      	movs	r5, r0
    82e2:	000c      	movs	r4, r1
    82e4:	0713      	lsls	r3, r2, #28
    82e6:	d460      	bmi.n	83aa <__sflush_r+0xce>
    82e8:	684b      	ldr	r3, [r1, #4]
    82ea:	2b00      	cmp	r3, #0
    82ec:	dc04      	bgt.n	82f8 <__sflush_r+0x1c>
    82ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    82f0:	2b00      	cmp	r3, #0
    82f2:	dc01      	bgt.n	82f8 <__sflush_r+0x1c>
    82f4:	2000      	movs	r0, #0
    82f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    82f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    82fa:	2f00      	cmp	r7, #0
    82fc:	d0fa      	beq.n	82f4 <__sflush_r+0x18>
    82fe:	2300      	movs	r3, #0
    8300:	682e      	ldr	r6, [r5, #0]
    8302:	602b      	str	r3, [r5, #0]
    8304:	2380      	movs	r3, #128	; 0x80
    8306:	015b      	lsls	r3, r3, #5
    8308:	401a      	ands	r2, r3
    830a:	d034      	beq.n	8376 <__sflush_r+0x9a>
    830c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    830e:	89a3      	ldrh	r3, [r4, #12]
    8310:	075b      	lsls	r3, r3, #29
    8312:	d506      	bpl.n	8322 <__sflush_r+0x46>
    8314:	6863      	ldr	r3, [r4, #4]
    8316:	1ac0      	subs	r0, r0, r3
    8318:	6b63      	ldr	r3, [r4, #52]	; 0x34
    831a:	2b00      	cmp	r3, #0
    831c:	d001      	beq.n	8322 <__sflush_r+0x46>
    831e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8320:	1ac0      	subs	r0, r0, r3
    8322:	0002      	movs	r2, r0
    8324:	6a21      	ldr	r1, [r4, #32]
    8326:	2300      	movs	r3, #0
    8328:	0028      	movs	r0, r5
    832a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    832c:	47b8      	blx	r7
    832e:	89a1      	ldrh	r1, [r4, #12]
    8330:	1c43      	adds	r3, r0, #1
    8332:	d106      	bne.n	8342 <__sflush_r+0x66>
    8334:	682b      	ldr	r3, [r5, #0]
    8336:	2b1d      	cmp	r3, #29
    8338:	d831      	bhi.n	839e <__sflush_r+0xc2>
    833a:	4a2c      	ldr	r2, [pc, #176]	; (83ec <__sflush_r+0x110>)
    833c:	40da      	lsrs	r2, r3
    833e:	07d3      	lsls	r3, r2, #31
    8340:	d52d      	bpl.n	839e <__sflush_r+0xc2>
    8342:	2300      	movs	r3, #0
    8344:	6063      	str	r3, [r4, #4]
    8346:	6923      	ldr	r3, [r4, #16]
    8348:	6023      	str	r3, [r4, #0]
    834a:	04cb      	lsls	r3, r1, #19
    834c:	d505      	bpl.n	835a <__sflush_r+0x7e>
    834e:	1c43      	adds	r3, r0, #1
    8350:	d102      	bne.n	8358 <__sflush_r+0x7c>
    8352:	682b      	ldr	r3, [r5, #0]
    8354:	2b00      	cmp	r3, #0
    8356:	d100      	bne.n	835a <__sflush_r+0x7e>
    8358:	6560      	str	r0, [r4, #84]	; 0x54
    835a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    835c:	602e      	str	r6, [r5, #0]
    835e:	2900      	cmp	r1, #0
    8360:	d0c8      	beq.n	82f4 <__sflush_r+0x18>
    8362:	0023      	movs	r3, r4
    8364:	3344      	adds	r3, #68	; 0x44
    8366:	4299      	cmp	r1, r3
    8368:	d002      	beq.n	8370 <__sflush_r+0x94>
    836a:	0028      	movs	r0, r5
    836c:	f000 f9ba 	bl	86e4 <_free_r>
    8370:	2000      	movs	r0, #0
    8372:	6360      	str	r0, [r4, #52]	; 0x34
    8374:	e7bf      	b.n	82f6 <__sflush_r+0x1a>
    8376:	2301      	movs	r3, #1
    8378:	6a21      	ldr	r1, [r4, #32]
    837a:	0028      	movs	r0, r5
    837c:	47b8      	blx	r7
    837e:	1c43      	adds	r3, r0, #1
    8380:	d1c5      	bne.n	830e <__sflush_r+0x32>
    8382:	682b      	ldr	r3, [r5, #0]
    8384:	2b00      	cmp	r3, #0
    8386:	d0c2      	beq.n	830e <__sflush_r+0x32>
    8388:	2b1d      	cmp	r3, #29
    838a:	d001      	beq.n	8390 <__sflush_r+0xb4>
    838c:	2b16      	cmp	r3, #22
    838e:	d101      	bne.n	8394 <__sflush_r+0xb8>
    8390:	602e      	str	r6, [r5, #0]
    8392:	e7af      	b.n	82f4 <__sflush_r+0x18>
    8394:	2340      	movs	r3, #64	; 0x40
    8396:	89a2      	ldrh	r2, [r4, #12]
    8398:	4313      	orrs	r3, r2
    839a:	81a3      	strh	r3, [r4, #12]
    839c:	e7ab      	b.n	82f6 <__sflush_r+0x1a>
    839e:	2340      	movs	r3, #64	; 0x40
    83a0:	430b      	orrs	r3, r1
    83a2:	2001      	movs	r0, #1
    83a4:	81a3      	strh	r3, [r4, #12]
    83a6:	4240      	negs	r0, r0
    83a8:	e7a5      	b.n	82f6 <__sflush_r+0x1a>
    83aa:	690f      	ldr	r7, [r1, #16]
    83ac:	2f00      	cmp	r7, #0
    83ae:	d0a1      	beq.n	82f4 <__sflush_r+0x18>
    83b0:	680b      	ldr	r3, [r1, #0]
    83b2:	600f      	str	r7, [r1, #0]
    83b4:	1bdb      	subs	r3, r3, r7
    83b6:	9301      	str	r3, [sp, #4]
    83b8:	2300      	movs	r3, #0
    83ba:	0792      	lsls	r2, r2, #30
    83bc:	d100      	bne.n	83c0 <__sflush_r+0xe4>
    83be:	694b      	ldr	r3, [r1, #20]
    83c0:	60a3      	str	r3, [r4, #8]
    83c2:	9b01      	ldr	r3, [sp, #4]
    83c4:	2b00      	cmp	r3, #0
    83c6:	dc00      	bgt.n	83ca <__sflush_r+0xee>
    83c8:	e794      	b.n	82f4 <__sflush_r+0x18>
    83ca:	9b01      	ldr	r3, [sp, #4]
    83cc:	003a      	movs	r2, r7
    83ce:	6a21      	ldr	r1, [r4, #32]
    83d0:	0028      	movs	r0, r5
    83d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    83d4:	47b0      	blx	r6
    83d6:	2800      	cmp	r0, #0
    83d8:	dc03      	bgt.n	83e2 <__sflush_r+0x106>
    83da:	2340      	movs	r3, #64	; 0x40
    83dc:	89a2      	ldrh	r2, [r4, #12]
    83de:	4313      	orrs	r3, r2
    83e0:	e7df      	b.n	83a2 <__sflush_r+0xc6>
    83e2:	9b01      	ldr	r3, [sp, #4]
    83e4:	183f      	adds	r7, r7, r0
    83e6:	1a1b      	subs	r3, r3, r0
    83e8:	9301      	str	r3, [sp, #4]
    83ea:	e7ea      	b.n	83c2 <__sflush_r+0xe6>
    83ec:	20400001 	.word	0x20400001

000083f0 <_fflush_r>:
    83f0:	690b      	ldr	r3, [r1, #16]
    83f2:	b570      	push	{r4, r5, r6, lr}
    83f4:	0005      	movs	r5, r0
    83f6:	000c      	movs	r4, r1
    83f8:	2b00      	cmp	r3, #0
    83fa:	d101      	bne.n	8400 <_fflush_r+0x10>
    83fc:	2000      	movs	r0, #0
    83fe:	bd70      	pop	{r4, r5, r6, pc}
    8400:	2800      	cmp	r0, #0
    8402:	d004      	beq.n	840e <_fflush_r+0x1e>
    8404:	6983      	ldr	r3, [r0, #24]
    8406:	2b00      	cmp	r3, #0
    8408:	d101      	bne.n	840e <_fflush_r+0x1e>
    840a:	f000 f85f 	bl	84cc <__sinit>
    840e:	4b0b      	ldr	r3, [pc, #44]	; (843c <_fflush_r+0x4c>)
    8410:	429c      	cmp	r4, r3
    8412:	d109      	bne.n	8428 <_fflush_r+0x38>
    8414:	686c      	ldr	r4, [r5, #4]
    8416:	220c      	movs	r2, #12
    8418:	5ea3      	ldrsh	r3, [r4, r2]
    841a:	2b00      	cmp	r3, #0
    841c:	d0ee      	beq.n	83fc <_fflush_r+0xc>
    841e:	0021      	movs	r1, r4
    8420:	0028      	movs	r0, r5
    8422:	f7ff ff5b 	bl	82dc <__sflush_r>
    8426:	e7ea      	b.n	83fe <_fflush_r+0xe>
    8428:	4b05      	ldr	r3, [pc, #20]	; (8440 <_fflush_r+0x50>)
    842a:	429c      	cmp	r4, r3
    842c:	d101      	bne.n	8432 <_fflush_r+0x42>
    842e:	68ac      	ldr	r4, [r5, #8]
    8430:	e7f1      	b.n	8416 <_fflush_r+0x26>
    8432:	4b04      	ldr	r3, [pc, #16]	; (8444 <_fflush_r+0x54>)
    8434:	429c      	cmp	r4, r3
    8436:	d1ee      	bne.n	8416 <_fflush_r+0x26>
    8438:	68ec      	ldr	r4, [r5, #12]
    843a:	e7ec      	b.n	8416 <_fflush_r+0x26>
    843c:	00009218 	.word	0x00009218
    8440:	00009238 	.word	0x00009238
    8444:	000091f8 	.word	0x000091f8

00008448 <_cleanup_r>:
    8448:	b510      	push	{r4, lr}
    844a:	4902      	ldr	r1, [pc, #8]	; (8454 <_cleanup_r+0xc>)
    844c:	f000 f8b2 	bl	85b4 <_fwalk_reent>
    8450:	bd10      	pop	{r4, pc}
    8452:	46c0      	nop			; (mov r8, r8)
    8454:	000083f1 	.word	0x000083f1

00008458 <std.isra.0>:
    8458:	2300      	movs	r3, #0
    845a:	b510      	push	{r4, lr}
    845c:	0004      	movs	r4, r0
    845e:	6003      	str	r3, [r0, #0]
    8460:	6043      	str	r3, [r0, #4]
    8462:	6083      	str	r3, [r0, #8]
    8464:	8181      	strh	r1, [r0, #12]
    8466:	6643      	str	r3, [r0, #100]	; 0x64
    8468:	81c2      	strh	r2, [r0, #14]
    846a:	6103      	str	r3, [r0, #16]
    846c:	6143      	str	r3, [r0, #20]
    846e:	6183      	str	r3, [r0, #24]
    8470:	0019      	movs	r1, r3
    8472:	2208      	movs	r2, #8
    8474:	305c      	adds	r0, #92	; 0x5c
    8476:	f7ff fd22 	bl	7ebe <memset>
    847a:	4b05      	ldr	r3, [pc, #20]	; (8490 <std.isra.0+0x38>)
    847c:	6224      	str	r4, [r4, #32]
    847e:	6263      	str	r3, [r4, #36]	; 0x24
    8480:	4b04      	ldr	r3, [pc, #16]	; (8494 <std.isra.0+0x3c>)
    8482:	62a3      	str	r3, [r4, #40]	; 0x28
    8484:	4b04      	ldr	r3, [pc, #16]	; (8498 <std.isra.0+0x40>)
    8486:	62e3      	str	r3, [r4, #44]	; 0x2c
    8488:	4b04      	ldr	r3, [pc, #16]	; (849c <std.isra.0+0x44>)
    848a:	6323      	str	r3, [r4, #48]	; 0x30
    848c:	bd10      	pop	{r4, pc}
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	00008df1 	.word	0x00008df1
    8494:	00008e19 	.word	0x00008e19
    8498:	00008e51 	.word	0x00008e51
    849c:	00008e7d 	.word	0x00008e7d

000084a0 <__sfmoreglue>:
    84a0:	b570      	push	{r4, r5, r6, lr}
    84a2:	2568      	movs	r5, #104	; 0x68
    84a4:	1e4a      	subs	r2, r1, #1
    84a6:	4355      	muls	r5, r2
    84a8:	000e      	movs	r6, r1
    84aa:	0029      	movs	r1, r5
    84ac:	3174      	adds	r1, #116	; 0x74
    84ae:	f000 f963 	bl	8778 <_malloc_r>
    84b2:	1e04      	subs	r4, r0, #0
    84b4:	d008      	beq.n	84c8 <__sfmoreglue+0x28>
    84b6:	2100      	movs	r1, #0
    84b8:	002a      	movs	r2, r5
    84ba:	6001      	str	r1, [r0, #0]
    84bc:	6046      	str	r6, [r0, #4]
    84be:	300c      	adds	r0, #12
    84c0:	60a0      	str	r0, [r4, #8]
    84c2:	3268      	adds	r2, #104	; 0x68
    84c4:	f7ff fcfb 	bl	7ebe <memset>
    84c8:	0020      	movs	r0, r4
    84ca:	bd70      	pop	{r4, r5, r6, pc}

000084cc <__sinit>:
    84cc:	6983      	ldr	r3, [r0, #24]
    84ce:	b513      	push	{r0, r1, r4, lr}
    84d0:	0004      	movs	r4, r0
    84d2:	2b00      	cmp	r3, #0
    84d4:	d128      	bne.n	8528 <__sinit+0x5c>
    84d6:	6483      	str	r3, [r0, #72]	; 0x48
    84d8:	64c3      	str	r3, [r0, #76]	; 0x4c
    84da:	6503      	str	r3, [r0, #80]	; 0x50
    84dc:	4b13      	ldr	r3, [pc, #76]	; (852c <__sinit+0x60>)
    84de:	4a14      	ldr	r2, [pc, #80]	; (8530 <__sinit+0x64>)
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	6282      	str	r2, [r0, #40]	; 0x28
    84e4:	9301      	str	r3, [sp, #4]
    84e6:	4298      	cmp	r0, r3
    84e8:	d101      	bne.n	84ee <__sinit+0x22>
    84ea:	2301      	movs	r3, #1
    84ec:	6183      	str	r3, [r0, #24]
    84ee:	0020      	movs	r0, r4
    84f0:	f000 f820 	bl	8534 <__sfp>
    84f4:	6060      	str	r0, [r4, #4]
    84f6:	0020      	movs	r0, r4
    84f8:	f000 f81c 	bl	8534 <__sfp>
    84fc:	60a0      	str	r0, [r4, #8]
    84fe:	0020      	movs	r0, r4
    8500:	f000 f818 	bl	8534 <__sfp>
    8504:	2200      	movs	r2, #0
    8506:	60e0      	str	r0, [r4, #12]
    8508:	2104      	movs	r1, #4
    850a:	6860      	ldr	r0, [r4, #4]
    850c:	f7ff ffa4 	bl	8458 <std.isra.0>
    8510:	2201      	movs	r2, #1
    8512:	2109      	movs	r1, #9
    8514:	68a0      	ldr	r0, [r4, #8]
    8516:	f7ff ff9f 	bl	8458 <std.isra.0>
    851a:	2202      	movs	r2, #2
    851c:	2112      	movs	r1, #18
    851e:	68e0      	ldr	r0, [r4, #12]
    8520:	f7ff ff9a 	bl	8458 <std.isra.0>
    8524:	2301      	movs	r3, #1
    8526:	61a3      	str	r3, [r4, #24]
    8528:	bd13      	pop	{r0, r1, r4, pc}
    852a:	46c0      	nop			; (mov r8, r8)
    852c:	000091f4 	.word	0x000091f4
    8530:	00008449 	.word	0x00008449

00008534 <__sfp>:
    8534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8536:	4b1e      	ldr	r3, [pc, #120]	; (85b0 <__sfp+0x7c>)
    8538:	0007      	movs	r7, r0
    853a:	681e      	ldr	r6, [r3, #0]
    853c:	69b3      	ldr	r3, [r6, #24]
    853e:	2b00      	cmp	r3, #0
    8540:	d102      	bne.n	8548 <__sfp+0x14>
    8542:	0030      	movs	r0, r6
    8544:	f7ff ffc2 	bl	84cc <__sinit>
    8548:	3648      	adds	r6, #72	; 0x48
    854a:	68b4      	ldr	r4, [r6, #8]
    854c:	6873      	ldr	r3, [r6, #4]
    854e:	3b01      	subs	r3, #1
    8550:	d504      	bpl.n	855c <__sfp+0x28>
    8552:	6833      	ldr	r3, [r6, #0]
    8554:	2b00      	cmp	r3, #0
    8556:	d007      	beq.n	8568 <__sfp+0x34>
    8558:	6836      	ldr	r6, [r6, #0]
    855a:	e7f6      	b.n	854a <__sfp+0x16>
    855c:	220c      	movs	r2, #12
    855e:	5ea5      	ldrsh	r5, [r4, r2]
    8560:	2d00      	cmp	r5, #0
    8562:	d00d      	beq.n	8580 <__sfp+0x4c>
    8564:	3468      	adds	r4, #104	; 0x68
    8566:	e7f2      	b.n	854e <__sfp+0x1a>
    8568:	2104      	movs	r1, #4
    856a:	0038      	movs	r0, r7
    856c:	f7ff ff98 	bl	84a0 <__sfmoreglue>
    8570:	6030      	str	r0, [r6, #0]
    8572:	2800      	cmp	r0, #0
    8574:	d1f0      	bne.n	8558 <__sfp+0x24>
    8576:	230c      	movs	r3, #12
    8578:	0004      	movs	r4, r0
    857a:	603b      	str	r3, [r7, #0]
    857c:	0020      	movs	r0, r4
    857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8580:	2301      	movs	r3, #1
    8582:	0020      	movs	r0, r4
    8584:	425b      	negs	r3, r3
    8586:	81e3      	strh	r3, [r4, #14]
    8588:	3302      	adds	r3, #2
    858a:	81a3      	strh	r3, [r4, #12]
    858c:	6665      	str	r5, [r4, #100]	; 0x64
    858e:	6025      	str	r5, [r4, #0]
    8590:	60a5      	str	r5, [r4, #8]
    8592:	6065      	str	r5, [r4, #4]
    8594:	6125      	str	r5, [r4, #16]
    8596:	6165      	str	r5, [r4, #20]
    8598:	61a5      	str	r5, [r4, #24]
    859a:	2208      	movs	r2, #8
    859c:	0029      	movs	r1, r5
    859e:	305c      	adds	r0, #92	; 0x5c
    85a0:	f7ff fc8d 	bl	7ebe <memset>
    85a4:	6365      	str	r5, [r4, #52]	; 0x34
    85a6:	63a5      	str	r5, [r4, #56]	; 0x38
    85a8:	64a5      	str	r5, [r4, #72]	; 0x48
    85aa:	64e5      	str	r5, [r4, #76]	; 0x4c
    85ac:	e7e6      	b.n	857c <__sfp+0x48>
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	000091f4 	.word	0x000091f4

000085b4 <_fwalk_reent>:
    85b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85b6:	0004      	movs	r4, r0
    85b8:	0007      	movs	r7, r0
    85ba:	2600      	movs	r6, #0
    85bc:	9101      	str	r1, [sp, #4]
    85be:	3448      	adds	r4, #72	; 0x48
    85c0:	2c00      	cmp	r4, #0
    85c2:	d101      	bne.n	85c8 <_fwalk_reent+0x14>
    85c4:	0030      	movs	r0, r6
    85c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    85c8:	6863      	ldr	r3, [r4, #4]
    85ca:	68a5      	ldr	r5, [r4, #8]
    85cc:	9300      	str	r3, [sp, #0]
    85ce:	9b00      	ldr	r3, [sp, #0]
    85d0:	3b01      	subs	r3, #1
    85d2:	9300      	str	r3, [sp, #0]
    85d4:	d501      	bpl.n	85da <_fwalk_reent+0x26>
    85d6:	6824      	ldr	r4, [r4, #0]
    85d8:	e7f2      	b.n	85c0 <_fwalk_reent+0xc>
    85da:	89ab      	ldrh	r3, [r5, #12]
    85dc:	2b01      	cmp	r3, #1
    85de:	d908      	bls.n	85f2 <_fwalk_reent+0x3e>
    85e0:	220e      	movs	r2, #14
    85e2:	5eab      	ldrsh	r3, [r5, r2]
    85e4:	3301      	adds	r3, #1
    85e6:	d004      	beq.n	85f2 <_fwalk_reent+0x3e>
    85e8:	0029      	movs	r1, r5
    85ea:	0038      	movs	r0, r7
    85ec:	9b01      	ldr	r3, [sp, #4]
    85ee:	4798      	blx	r3
    85f0:	4306      	orrs	r6, r0
    85f2:	3568      	adds	r5, #104	; 0x68
    85f4:	e7eb      	b.n	85ce <_fwalk_reent+0x1a>
	...

000085f8 <__swhatbuf_r>:
    85f8:	b570      	push	{r4, r5, r6, lr}
    85fa:	000e      	movs	r6, r1
    85fc:	001d      	movs	r5, r3
    85fe:	230e      	movs	r3, #14
    8600:	5ec9      	ldrsh	r1, [r1, r3]
    8602:	b090      	sub	sp, #64	; 0x40
    8604:	0014      	movs	r4, r2
    8606:	2900      	cmp	r1, #0
    8608:	da07      	bge.n	861a <__swhatbuf_r+0x22>
    860a:	2300      	movs	r3, #0
    860c:	602b      	str	r3, [r5, #0]
    860e:	89b3      	ldrh	r3, [r6, #12]
    8610:	061b      	lsls	r3, r3, #24
    8612:	d411      	bmi.n	8638 <__swhatbuf_r+0x40>
    8614:	2380      	movs	r3, #128	; 0x80
    8616:	00db      	lsls	r3, r3, #3
    8618:	e00f      	b.n	863a <__swhatbuf_r+0x42>
    861a:	aa01      	add	r2, sp, #4
    861c:	f000 fc5a 	bl	8ed4 <_fstat_r>
    8620:	2800      	cmp	r0, #0
    8622:	dbf2      	blt.n	860a <__swhatbuf_r+0x12>
    8624:	22f0      	movs	r2, #240	; 0xf0
    8626:	9b02      	ldr	r3, [sp, #8]
    8628:	0212      	lsls	r2, r2, #8
    862a:	4013      	ands	r3, r2
    862c:	4a05      	ldr	r2, [pc, #20]	; (8644 <__swhatbuf_r+0x4c>)
    862e:	189b      	adds	r3, r3, r2
    8630:	425a      	negs	r2, r3
    8632:	4153      	adcs	r3, r2
    8634:	602b      	str	r3, [r5, #0]
    8636:	e7ed      	b.n	8614 <__swhatbuf_r+0x1c>
    8638:	2340      	movs	r3, #64	; 0x40
    863a:	2000      	movs	r0, #0
    863c:	6023      	str	r3, [r4, #0]
    863e:	b010      	add	sp, #64	; 0x40
    8640:	bd70      	pop	{r4, r5, r6, pc}
    8642:	46c0      	nop			; (mov r8, r8)
    8644:	ffffe000 	.word	0xffffe000

00008648 <__smakebuf_r>:
    8648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    864a:	2602      	movs	r6, #2
    864c:	898b      	ldrh	r3, [r1, #12]
    864e:	0005      	movs	r5, r0
    8650:	000c      	movs	r4, r1
    8652:	4233      	tst	r3, r6
    8654:	d006      	beq.n	8664 <__smakebuf_r+0x1c>
    8656:	0023      	movs	r3, r4
    8658:	3347      	adds	r3, #71	; 0x47
    865a:	6023      	str	r3, [r4, #0]
    865c:	6123      	str	r3, [r4, #16]
    865e:	2301      	movs	r3, #1
    8660:	6163      	str	r3, [r4, #20]
    8662:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8664:	ab01      	add	r3, sp, #4
    8666:	466a      	mov	r2, sp
    8668:	f7ff ffc6 	bl	85f8 <__swhatbuf_r>
    866c:	9900      	ldr	r1, [sp, #0]
    866e:	0007      	movs	r7, r0
    8670:	0028      	movs	r0, r5
    8672:	f000 f881 	bl	8778 <_malloc_r>
    8676:	2800      	cmp	r0, #0
    8678:	d108      	bne.n	868c <__smakebuf_r+0x44>
    867a:	220c      	movs	r2, #12
    867c:	5ea3      	ldrsh	r3, [r4, r2]
    867e:	059a      	lsls	r2, r3, #22
    8680:	d4ef      	bmi.n	8662 <__smakebuf_r+0x1a>
    8682:	2203      	movs	r2, #3
    8684:	4393      	bics	r3, r2
    8686:	431e      	orrs	r6, r3
    8688:	81a6      	strh	r6, [r4, #12]
    868a:	e7e4      	b.n	8656 <__smakebuf_r+0xe>
    868c:	4b0f      	ldr	r3, [pc, #60]	; (86cc <__smakebuf_r+0x84>)
    868e:	62ab      	str	r3, [r5, #40]	; 0x28
    8690:	2380      	movs	r3, #128	; 0x80
    8692:	89a2      	ldrh	r2, [r4, #12]
    8694:	6020      	str	r0, [r4, #0]
    8696:	4313      	orrs	r3, r2
    8698:	81a3      	strh	r3, [r4, #12]
    869a:	9b00      	ldr	r3, [sp, #0]
    869c:	6120      	str	r0, [r4, #16]
    869e:	6163      	str	r3, [r4, #20]
    86a0:	9b01      	ldr	r3, [sp, #4]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d00d      	beq.n	86c2 <__smakebuf_r+0x7a>
    86a6:	230e      	movs	r3, #14
    86a8:	5ee1      	ldrsh	r1, [r4, r3]
    86aa:	0028      	movs	r0, r5
    86ac:	f000 fc24 	bl	8ef8 <_isatty_r>
    86b0:	2800      	cmp	r0, #0
    86b2:	d006      	beq.n	86c2 <__smakebuf_r+0x7a>
    86b4:	2203      	movs	r2, #3
    86b6:	89a3      	ldrh	r3, [r4, #12]
    86b8:	4393      	bics	r3, r2
    86ba:	001a      	movs	r2, r3
    86bc:	2301      	movs	r3, #1
    86be:	4313      	orrs	r3, r2
    86c0:	81a3      	strh	r3, [r4, #12]
    86c2:	89a0      	ldrh	r0, [r4, #12]
    86c4:	4338      	orrs	r0, r7
    86c6:	81a0      	strh	r0, [r4, #12]
    86c8:	e7cb      	b.n	8662 <__smakebuf_r+0x1a>
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	00008449 	.word	0x00008449

000086d0 <malloc>:
    86d0:	b510      	push	{r4, lr}
    86d2:	4b03      	ldr	r3, [pc, #12]	; (86e0 <malloc+0x10>)
    86d4:	0001      	movs	r1, r0
    86d6:	6818      	ldr	r0, [r3, #0]
    86d8:	f000 f84e 	bl	8778 <_malloc_r>
    86dc:	bd10      	pop	{r4, pc}
    86de:	46c0      	nop			; (mov r8, r8)
    86e0:	20000024 	.word	0x20000024

000086e4 <_free_r>:
    86e4:	b570      	push	{r4, r5, r6, lr}
    86e6:	0005      	movs	r5, r0
    86e8:	2900      	cmp	r1, #0
    86ea:	d010      	beq.n	870e <_free_r+0x2a>
    86ec:	1f0c      	subs	r4, r1, #4
    86ee:	6823      	ldr	r3, [r4, #0]
    86f0:	2b00      	cmp	r3, #0
    86f2:	da00      	bge.n	86f6 <_free_r+0x12>
    86f4:	18e4      	adds	r4, r4, r3
    86f6:	0028      	movs	r0, r5
    86f8:	f000 fc2f 	bl	8f5a <__malloc_lock>
    86fc:	4a1d      	ldr	r2, [pc, #116]	; (8774 <_free_r+0x90>)
    86fe:	6813      	ldr	r3, [r2, #0]
    8700:	2b00      	cmp	r3, #0
    8702:	d105      	bne.n	8710 <_free_r+0x2c>
    8704:	6063      	str	r3, [r4, #4]
    8706:	6014      	str	r4, [r2, #0]
    8708:	0028      	movs	r0, r5
    870a:	f000 fc27 	bl	8f5c <__malloc_unlock>
    870e:	bd70      	pop	{r4, r5, r6, pc}
    8710:	42a3      	cmp	r3, r4
    8712:	d909      	bls.n	8728 <_free_r+0x44>
    8714:	6821      	ldr	r1, [r4, #0]
    8716:	1860      	adds	r0, r4, r1
    8718:	4283      	cmp	r3, r0
    871a:	d1f3      	bne.n	8704 <_free_r+0x20>
    871c:	6818      	ldr	r0, [r3, #0]
    871e:	685b      	ldr	r3, [r3, #4]
    8720:	1841      	adds	r1, r0, r1
    8722:	6021      	str	r1, [r4, #0]
    8724:	e7ee      	b.n	8704 <_free_r+0x20>
    8726:	0013      	movs	r3, r2
    8728:	685a      	ldr	r2, [r3, #4]
    872a:	2a00      	cmp	r2, #0
    872c:	d001      	beq.n	8732 <_free_r+0x4e>
    872e:	42a2      	cmp	r2, r4
    8730:	d9f9      	bls.n	8726 <_free_r+0x42>
    8732:	6819      	ldr	r1, [r3, #0]
    8734:	1858      	adds	r0, r3, r1
    8736:	42a0      	cmp	r0, r4
    8738:	d10b      	bne.n	8752 <_free_r+0x6e>
    873a:	6820      	ldr	r0, [r4, #0]
    873c:	1809      	adds	r1, r1, r0
    873e:	1858      	adds	r0, r3, r1
    8740:	6019      	str	r1, [r3, #0]
    8742:	4282      	cmp	r2, r0
    8744:	d1e0      	bne.n	8708 <_free_r+0x24>
    8746:	6810      	ldr	r0, [r2, #0]
    8748:	6852      	ldr	r2, [r2, #4]
    874a:	1841      	adds	r1, r0, r1
    874c:	6019      	str	r1, [r3, #0]
    874e:	605a      	str	r2, [r3, #4]
    8750:	e7da      	b.n	8708 <_free_r+0x24>
    8752:	42a0      	cmp	r0, r4
    8754:	d902      	bls.n	875c <_free_r+0x78>
    8756:	230c      	movs	r3, #12
    8758:	602b      	str	r3, [r5, #0]
    875a:	e7d5      	b.n	8708 <_free_r+0x24>
    875c:	6821      	ldr	r1, [r4, #0]
    875e:	1860      	adds	r0, r4, r1
    8760:	4282      	cmp	r2, r0
    8762:	d103      	bne.n	876c <_free_r+0x88>
    8764:	6810      	ldr	r0, [r2, #0]
    8766:	6852      	ldr	r2, [r2, #4]
    8768:	1841      	adds	r1, r0, r1
    876a:	6021      	str	r1, [r4, #0]
    876c:	6062      	str	r2, [r4, #4]
    876e:	605c      	str	r4, [r3, #4]
    8770:	e7ca      	b.n	8708 <_free_r+0x24>
    8772:	46c0      	nop			; (mov r8, r8)
    8774:	20000278 	.word	0x20000278

00008778 <_malloc_r>:
    8778:	2303      	movs	r3, #3
    877a:	b570      	push	{r4, r5, r6, lr}
    877c:	1ccd      	adds	r5, r1, #3
    877e:	439d      	bics	r5, r3
    8780:	3508      	adds	r5, #8
    8782:	0006      	movs	r6, r0
    8784:	2d0c      	cmp	r5, #12
    8786:	d21e      	bcs.n	87c6 <_malloc_r+0x4e>
    8788:	250c      	movs	r5, #12
    878a:	42a9      	cmp	r1, r5
    878c:	d81d      	bhi.n	87ca <_malloc_r+0x52>
    878e:	0030      	movs	r0, r6
    8790:	f000 fbe3 	bl	8f5a <__malloc_lock>
    8794:	4a25      	ldr	r2, [pc, #148]	; (882c <_malloc_r+0xb4>)
    8796:	6814      	ldr	r4, [r2, #0]
    8798:	0021      	movs	r1, r4
    879a:	2900      	cmp	r1, #0
    879c:	d119      	bne.n	87d2 <_malloc_r+0x5a>
    879e:	4c24      	ldr	r4, [pc, #144]	; (8830 <_malloc_r+0xb8>)
    87a0:	6823      	ldr	r3, [r4, #0]
    87a2:	2b00      	cmp	r3, #0
    87a4:	d103      	bne.n	87ae <_malloc_r+0x36>
    87a6:	0030      	movs	r0, r6
    87a8:	f000 fb10 	bl	8dcc <_sbrk_r>
    87ac:	6020      	str	r0, [r4, #0]
    87ae:	0029      	movs	r1, r5
    87b0:	0030      	movs	r0, r6
    87b2:	f000 fb0b 	bl	8dcc <_sbrk_r>
    87b6:	1c43      	adds	r3, r0, #1
    87b8:	d12c      	bne.n	8814 <_malloc_r+0x9c>
    87ba:	230c      	movs	r3, #12
    87bc:	0030      	movs	r0, r6
    87be:	6033      	str	r3, [r6, #0]
    87c0:	f000 fbcc 	bl	8f5c <__malloc_unlock>
    87c4:	e003      	b.n	87ce <_malloc_r+0x56>
    87c6:	2d00      	cmp	r5, #0
    87c8:	dadf      	bge.n	878a <_malloc_r+0x12>
    87ca:	230c      	movs	r3, #12
    87cc:	6033      	str	r3, [r6, #0]
    87ce:	2000      	movs	r0, #0
    87d0:	bd70      	pop	{r4, r5, r6, pc}
    87d2:	680b      	ldr	r3, [r1, #0]
    87d4:	1b5b      	subs	r3, r3, r5
    87d6:	d41a      	bmi.n	880e <_malloc_r+0x96>
    87d8:	2b0b      	cmp	r3, #11
    87da:	d903      	bls.n	87e4 <_malloc_r+0x6c>
    87dc:	600b      	str	r3, [r1, #0]
    87de:	18cc      	adds	r4, r1, r3
    87e0:	6025      	str	r5, [r4, #0]
    87e2:	e003      	b.n	87ec <_malloc_r+0x74>
    87e4:	428c      	cmp	r4, r1
    87e6:	d10e      	bne.n	8806 <_malloc_r+0x8e>
    87e8:	6863      	ldr	r3, [r4, #4]
    87ea:	6013      	str	r3, [r2, #0]
    87ec:	0030      	movs	r0, r6
    87ee:	f000 fbb5 	bl	8f5c <__malloc_unlock>
    87f2:	0020      	movs	r0, r4
    87f4:	2207      	movs	r2, #7
    87f6:	300b      	adds	r0, #11
    87f8:	1d23      	adds	r3, r4, #4
    87fa:	4390      	bics	r0, r2
    87fc:	1ac3      	subs	r3, r0, r3
    87fe:	d0e7      	beq.n	87d0 <_malloc_r+0x58>
    8800:	425a      	negs	r2, r3
    8802:	50e2      	str	r2, [r4, r3]
    8804:	e7e4      	b.n	87d0 <_malloc_r+0x58>
    8806:	684b      	ldr	r3, [r1, #4]
    8808:	6063      	str	r3, [r4, #4]
    880a:	000c      	movs	r4, r1
    880c:	e7ee      	b.n	87ec <_malloc_r+0x74>
    880e:	000c      	movs	r4, r1
    8810:	6849      	ldr	r1, [r1, #4]
    8812:	e7c2      	b.n	879a <_malloc_r+0x22>
    8814:	2303      	movs	r3, #3
    8816:	1cc4      	adds	r4, r0, #3
    8818:	439c      	bics	r4, r3
    881a:	42a0      	cmp	r0, r4
    881c:	d0e0      	beq.n	87e0 <_malloc_r+0x68>
    881e:	1a21      	subs	r1, r4, r0
    8820:	0030      	movs	r0, r6
    8822:	f000 fad3 	bl	8dcc <_sbrk_r>
    8826:	1c43      	adds	r3, r0, #1
    8828:	d1da      	bne.n	87e0 <_malloc_r+0x68>
    882a:	e7c6      	b.n	87ba <_malloc_r+0x42>
    882c:	20000278 	.word	0x20000278
    8830:	2000027c 	.word	0x2000027c

00008834 <__sfputc_r>:
    8834:	6893      	ldr	r3, [r2, #8]
    8836:	b510      	push	{r4, lr}
    8838:	3b01      	subs	r3, #1
    883a:	6093      	str	r3, [r2, #8]
    883c:	2b00      	cmp	r3, #0
    883e:	da05      	bge.n	884c <__sfputc_r+0x18>
    8840:	6994      	ldr	r4, [r2, #24]
    8842:	42a3      	cmp	r3, r4
    8844:	db08      	blt.n	8858 <__sfputc_r+0x24>
    8846:	b2cb      	uxtb	r3, r1
    8848:	2b0a      	cmp	r3, #10
    884a:	d005      	beq.n	8858 <__sfputc_r+0x24>
    884c:	6813      	ldr	r3, [r2, #0]
    884e:	1c58      	adds	r0, r3, #1
    8850:	6010      	str	r0, [r2, #0]
    8852:	7019      	strb	r1, [r3, #0]
    8854:	b2c8      	uxtb	r0, r1
    8856:	bd10      	pop	{r4, pc}
    8858:	f7ff fc74 	bl	8144 <__swbuf_r>
    885c:	e7fb      	b.n	8856 <__sfputc_r+0x22>

0000885e <__sfputs_r>:
    885e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8860:	0006      	movs	r6, r0
    8862:	000f      	movs	r7, r1
    8864:	0014      	movs	r4, r2
    8866:	18d5      	adds	r5, r2, r3
    8868:	42ac      	cmp	r4, r5
    886a:	d101      	bne.n	8870 <__sfputs_r+0x12>
    886c:	2000      	movs	r0, #0
    886e:	e007      	b.n	8880 <__sfputs_r+0x22>
    8870:	7821      	ldrb	r1, [r4, #0]
    8872:	003a      	movs	r2, r7
    8874:	0030      	movs	r0, r6
    8876:	f7ff ffdd 	bl	8834 <__sfputc_r>
    887a:	3401      	adds	r4, #1
    887c:	1c43      	adds	r3, r0, #1
    887e:	d1f3      	bne.n	8868 <__sfputs_r+0xa>
    8880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008884 <_vfiprintf_r>:
    8884:	b5f0      	push	{r4, r5, r6, r7, lr}
    8886:	b09f      	sub	sp, #124	; 0x7c
    8888:	0006      	movs	r6, r0
    888a:	000f      	movs	r7, r1
    888c:	0014      	movs	r4, r2
    888e:	9305      	str	r3, [sp, #20]
    8890:	2800      	cmp	r0, #0
    8892:	d004      	beq.n	889e <_vfiprintf_r+0x1a>
    8894:	6983      	ldr	r3, [r0, #24]
    8896:	2b00      	cmp	r3, #0
    8898:	d101      	bne.n	889e <_vfiprintf_r+0x1a>
    889a:	f7ff fe17 	bl	84cc <__sinit>
    889e:	4b7f      	ldr	r3, [pc, #508]	; (8a9c <_vfiprintf_r+0x218>)
    88a0:	429f      	cmp	r7, r3
    88a2:	d15c      	bne.n	895e <_vfiprintf_r+0xda>
    88a4:	6877      	ldr	r7, [r6, #4]
    88a6:	89bb      	ldrh	r3, [r7, #12]
    88a8:	071b      	lsls	r3, r3, #28
    88aa:	d562      	bpl.n	8972 <_vfiprintf_r+0xee>
    88ac:	693b      	ldr	r3, [r7, #16]
    88ae:	2b00      	cmp	r3, #0
    88b0:	d05f      	beq.n	8972 <_vfiprintf_r+0xee>
    88b2:	2300      	movs	r3, #0
    88b4:	ad06      	add	r5, sp, #24
    88b6:	616b      	str	r3, [r5, #20]
    88b8:	3320      	adds	r3, #32
    88ba:	766b      	strb	r3, [r5, #25]
    88bc:	3310      	adds	r3, #16
    88be:	76ab      	strb	r3, [r5, #26]
    88c0:	9402      	str	r4, [sp, #8]
    88c2:	9c02      	ldr	r4, [sp, #8]
    88c4:	7823      	ldrb	r3, [r4, #0]
    88c6:	2b00      	cmp	r3, #0
    88c8:	d15d      	bne.n	8986 <_vfiprintf_r+0x102>
    88ca:	9b02      	ldr	r3, [sp, #8]
    88cc:	1ae3      	subs	r3, r4, r3
    88ce:	9304      	str	r3, [sp, #16]
    88d0:	d00d      	beq.n	88ee <_vfiprintf_r+0x6a>
    88d2:	9b04      	ldr	r3, [sp, #16]
    88d4:	9a02      	ldr	r2, [sp, #8]
    88d6:	0039      	movs	r1, r7
    88d8:	0030      	movs	r0, r6
    88da:	f7ff ffc0 	bl	885e <__sfputs_r>
    88de:	1c43      	adds	r3, r0, #1
    88e0:	d100      	bne.n	88e4 <_vfiprintf_r+0x60>
    88e2:	e0cc      	b.n	8a7e <_vfiprintf_r+0x1fa>
    88e4:	696a      	ldr	r2, [r5, #20]
    88e6:	9b04      	ldr	r3, [sp, #16]
    88e8:	4694      	mov	ip, r2
    88ea:	4463      	add	r3, ip
    88ec:	616b      	str	r3, [r5, #20]
    88ee:	7823      	ldrb	r3, [r4, #0]
    88f0:	2b00      	cmp	r3, #0
    88f2:	d100      	bne.n	88f6 <_vfiprintf_r+0x72>
    88f4:	e0c3      	b.n	8a7e <_vfiprintf_r+0x1fa>
    88f6:	2201      	movs	r2, #1
    88f8:	2300      	movs	r3, #0
    88fa:	4252      	negs	r2, r2
    88fc:	606a      	str	r2, [r5, #4]
    88fe:	a902      	add	r1, sp, #8
    8900:	3254      	adds	r2, #84	; 0x54
    8902:	1852      	adds	r2, r2, r1
    8904:	3401      	adds	r4, #1
    8906:	602b      	str	r3, [r5, #0]
    8908:	60eb      	str	r3, [r5, #12]
    890a:	60ab      	str	r3, [r5, #8]
    890c:	7013      	strb	r3, [r2, #0]
    890e:	65ab      	str	r3, [r5, #88]	; 0x58
    8910:	7821      	ldrb	r1, [r4, #0]
    8912:	2205      	movs	r2, #5
    8914:	4862      	ldr	r0, [pc, #392]	; (8aa0 <_vfiprintf_r+0x21c>)
    8916:	f000 fb15 	bl	8f44 <memchr>
    891a:	1c63      	adds	r3, r4, #1
    891c:	469c      	mov	ip, r3
    891e:	2800      	cmp	r0, #0
    8920:	d135      	bne.n	898e <_vfiprintf_r+0x10a>
    8922:	6829      	ldr	r1, [r5, #0]
    8924:	06cb      	lsls	r3, r1, #27
    8926:	d504      	bpl.n	8932 <_vfiprintf_r+0xae>
    8928:	2353      	movs	r3, #83	; 0x53
    892a:	aa02      	add	r2, sp, #8
    892c:	3020      	adds	r0, #32
    892e:	189b      	adds	r3, r3, r2
    8930:	7018      	strb	r0, [r3, #0]
    8932:	070b      	lsls	r3, r1, #28
    8934:	d504      	bpl.n	8940 <_vfiprintf_r+0xbc>
    8936:	2353      	movs	r3, #83	; 0x53
    8938:	202b      	movs	r0, #43	; 0x2b
    893a:	aa02      	add	r2, sp, #8
    893c:	189b      	adds	r3, r3, r2
    893e:	7018      	strb	r0, [r3, #0]
    8940:	7823      	ldrb	r3, [r4, #0]
    8942:	2b2a      	cmp	r3, #42	; 0x2a
    8944:	d02c      	beq.n	89a0 <_vfiprintf_r+0x11c>
    8946:	2000      	movs	r0, #0
    8948:	210a      	movs	r1, #10
    894a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    894c:	7822      	ldrb	r2, [r4, #0]
    894e:	3a30      	subs	r2, #48	; 0x30
    8950:	2a09      	cmp	r2, #9
    8952:	d800      	bhi.n	8956 <_vfiprintf_r+0xd2>
    8954:	e06b      	b.n	8a2e <_vfiprintf_r+0x1aa>
    8956:	2800      	cmp	r0, #0
    8958:	d02a      	beq.n	89b0 <_vfiprintf_r+0x12c>
    895a:	9309      	str	r3, [sp, #36]	; 0x24
    895c:	e028      	b.n	89b0 <_vfiprintf_r+0x12c>
    895e:	4b51      	ldr	r3, [pc, #324]	; (8aa4 <_vfiprintf_r+0x220>)
    8960:	429f      	cmp	r7, r3
    8962:	d101      	bne.n	8968 <_vfiprintf_r+0xe4>
    8964:	68b7      	ldr	r7, [r6, #8]
    8966:	e79e      	b.n	88a6 <_vfiprintf_r+0x22>
    8968:	4b4f      	ldr	r3, [pc, #316]	; (8aa8 <_vfiprintf_r+0x224>)
    896a:	429f      	cmp	r7, r3
    896c:	d19b      	bne.n	88a6 <_vfiprintf_r+0x22>
    896e:	68f7      	ldr	r7, [r6, #12]
    8970:	e799      	b.n	88a6 <_vfiprintf_r+0x22>
    8972:	0039      	movs	r1, r7
    8974:	0030      	movs	r0, r6
    8976:	f7ff fc3b 	bl	81f0 <__swsetup_r>
    897a:	2800      	cmp	r0, #0
    897c:	d099      	beq.n	88b2 <_vfiprintf_r+0x2e>
    897e:	2001      	movs	r0, #1
    8980:	4240      	negs	r0, r0
    8982:	b01f      	add	sp, #124	; 0x7c
    8984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8986:	2b25      	cmp	r3, #37	; 0x25
    8988:	d09f      	beq.n	88ca <_vfiprintf_r+0x46>
    898a:	3401      	adds	r4, #1
    898c:	e79a      	b.n	88c4 <_vfiprintf_r+0x40>
    898e:	4b44      	ldr	r3, [pc, #272]	; (8aa0 <_vfiprintf_r+0x21c>)
    8990:	6829      	ldr	r1, [r5, #0]
    8992:	1ac0      	subs	r0, r0, r3
    8994:	2301      	movs	r3, #1
    8996:	4083      	lsls	r3, r0
    8998:	430b      	orrs	r3, r1
    899a:	602b      	str	r3, [r5, #0]
    899c:	4664      	mov	r4, ip
    899e:	e7b7      	b.n	8910 <_vfiprintf_r+0x8c>
    89a0:	9b05      	ldr	r3, [sp, #20]
    89a2:	1d18      	adds	r0, r3, #4
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	9005      	str	r0, [sp, #20]
    89a8:	2b00      	cmp	r3, #0
    89aa:	db3a      	blt.n	8a22 <_vfiprintf_r+0x19e>
    89ac:	9309      	str	r3, [sp, #36]	; 0x24
    89ae:	4664      	mov	r4, ip
    89b0:	7823      	ldrb	r3, [r4, #0]
    89b2:	2b2e      	cmp	r3, #46	; 0x2e
    89b4:	d10b      	bne.n	89ce <_vfiprintf_r+0x14a>
    89b6:	7863      	ldrb	r3, [r4, #1]
    89b8:	1c62      	adds	r2, r4, #1
    89ba:	2b2a      	cmp	r3, #42	; 0x2a
    89bc:	d13f      	bne.n	8a3e <_vfiprintf_r+0x1ba>
    89be:	9b05      	ldr	r3, [sp, #20]
    89c0:	3402      	adds	r4, #2
    89c2:	1d1a      	adds	r2, r3, #4
    89c4:	681b      	ldr	r3, [r3, #0]
    89c6:	9205      	str	r2, [sp, #20]
    89c8:	2b00      	cmp	r3, #0
    89ca:	db35      	blt.n	8a38 <_vfiprintf_r+0x1b4>
    89cc:	9307      	str	r3, [sp, #28]
    89ce:	7821      	ldrb	r1, [r4, #0]
    89d0:	2203      	movs	r2, #3
    89d2:	4836      	ldr	r0, [pc, #216]	; (8aac <_vfiprintf_r+0x228>)
    89d4:	f000 fab6 	bl	8f44 <memchr>
    89d8:	2800      	cmp	r0, #0
    89da:	d007      	beq.n	89ec <_vfiprintf_r+0x168>
    89dc:	4b33      	ldr	r3, [pc, #204]	; (8aac <_vfiprintf_r+0x228>)
    89de:	682a      	ldr	r2, [r5, #0]
    89e0:	1ac0      	subs	r0, r0, r3
    89e2:	2340      	movs	r3, #64	; 0x40
    89e4:	4083      	lsls	r3, r0
    89e6:	4313      	orrs	r3, r2
    89e8:	602b      	str	r3, [r5, #0]
    89ea:	3401      	adds	r4, #1
    89ec:	7821      	ldrb	r1, [r4, #0]
    89ee:	1c63      	adds	r3, r4, #1
    89f0:	2206      	movs	r2, #6
    89f2:	482f      	ldr	r0, [pc, #188]	; (8ab0 <_vfiprintf_r+0x22c>)
    89f4:	9302      	str	r3, [sp, #8]
    89f6:	7629      	strb	r1, [r5, #24]
    89f8:	f000 faa4 	bl	8f44 <memchr>
    89fc:	2800      	cmp	r0, #0
    89fe:	d044      	beq.n	8a8a <_vfiprintf_r+0x206>
    8a00:	4b2c      	ldr	r3, [pc, #176]	; (8ab4 <_vfiprintf_r+0x230>)
    8a02:	2b00      	cmp	r3, #0
    8a04:	d12f      	bne.n	8a66 <_vfiprintf_r+0x1e2>
    8a06:	6829      	ldr	r1, [r5, #0]
    8a08:	9b05      	ldr	r3, [sp, #20]
    8a0a:	2207      	movs	r2, #7
    8a0c:	05c9      	lsls	r1, r1, #23
    8a0e:	d528      	bpl.n	8a62 <_vfiprintf_r+0x1de>
    8a10:	189b      	adds	r3, r3, r2
    8a12:	4393      	bics	r3, r2
    8a14:	3308      	adds	r3, #8
    8a16:	9305      	str	r3, [sp, #20]
    8a18:	696b      	ldr	r3, [r5, #20]
    8a1a:	9a03      	ldr	r2, [sp, #12]
    8a1c:	189b      	adds	r3, r3, r2
    8a1e:	616b      	str	r3, [r5, #20]
    8a20:	e74f      	b.n	88c2 <_vfiprintf_r+0x3e>
    8a22:	425b      	negs	r3, r3
    8a24:	60eb      	str	r3, [r5, #12]
    8a26:	2302      	movs	r3, #2
    8a28:	430b      	orrs	r3, r1
    8a2a:	602b      	str	r3, [r5, #0]
    8a2c:	e7bf      	b.n	89ae <_vfiprintf_r+0x12a>
    8a2e:	434b      	muls	r3, r1
    8a30:	3401      	adds	r4, #1
    8a32:	189b      	adds	r3, r3, r2
    8a34:	2001      	movs	r0, #1
    8a36:	e789      	b.n	894c <_vfiprintf_r+0xc8>
    8a38:	2301      	movs	r3, #1
    8a3a:	425b      	negs	r3, r3
    8a3c:	e7c6      	b.n	89cc <_vfiprintf_r+0x148>
    8a3e:	2300      	movs	r3, #0
    8a40:	0014      	movs	r4, r2
    8a42:	200a      	movs	r0, #10
    8a44:	001a      	movs	r2, r3
    8a46:	606b      	str	r3, [r5, #4]
    8a48:	7821      	ldrb	r1, [r4, #0]
    8a4a:	3930      	subs	r1, #48	; 0x30
    8a4c:	2909      	cmp	r1, #9
    8a4e:	d903      	bls.n	8a58 <_vfiprintf_r+0x1d4>
    8a50:	2b00      	cmp	r3, #0
    8a52:	d0bc      	beq.n	89ce <_vfiprintf_r+0x14a>
    8a54:	9207      	str	r2, [sp, #28]
    8a56:	e7ba      	b.n	89ce <_vfiprintf_r+0x14a>
    8a58:	4342      	muls	r2, r0
    8a5a:	3401      	adds	r4, #1
    8a5c:	1852      	adds	r2, r2, r1
    8a5e:	2301      	movs	r3, #1
    8a60:	e7f2      	b.n	8a48 <_vfiprintf_r+0x1c4>
    8a62:	3307      	adds	r3, #7
    8a64:	e7d5      	b.n	8a12 <_vfiprintf_r+0x18e>
    8a66:	ab05      	add	r3, sp, #20
    8a68:	9300      	str	r3, [sp, #0]
    8a6a:	003a      	movs	r2, r7
    8a6c:	4b12      	ldr	r3, [pc, #72]	; (8ab8 <_vfiprintf_r+0x234>)
    8a6e:	0029      	movs	r1, r5
    8a70:	0030      	movs	r0, r6
    8a72:	e000      	b.n	8a76 <_vfiprintf_r+0x1f2>
    8a74:	bf00      	nop
    8a76:	9003      	str	r0, [sp, #12]
    8a78:	9b03      	ldr	r3, [sp, #12]
    8a7a:	3301      	adds	r3, #1
    8a7c:	d1cc      	bne.n	8a18 <_vfiprintf_r+0x194>
    8a7e:	89bb      	ldrh	r3, [r7, #12]
    8a80:	065b      	lsls	r3, r3, #25
    8a82:	d500      	bpl.n	8a86 <_vfiprintf_r+0x202>
    8a84:	e77b      	b.n	897e <_vfiprintf_r+0xfa>
    8a86:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8a88:	e77b      	b.n	8982 <_vfiprintf_r+0xfe>
    8a8a:	ab05      	add	r3, sp, #20
    8a8c:	9300      	str	r3, [sp, #0]
    8a8e:	003a      	movs	r2, r7
    8a90:	4b09      	ldr	r3, [pc, #36]	; (8ab8 <_vfiprintf_r+0x234>)
    8a92:	0029      	movs	r1, r5
    8a94:	0030      	movs	r0, r6
    8a96:	f000 f87f 	bl	8b98 <_printf_i>
    8a9a:	e7ec      	b.n	8a76 <_vfiprintf_r+0x1f2>
    8a9c:	00009218 	.word	0x00009218
    8aa0:	00009258 	.word	0x00009258
    8aa4:	00009238 	.word	0x00009238
    8aa8:	000091f8 	.word	0x000091f8
    8aac:	0000925e 	.word	0x0000925e
    8ab0:	00009262 	.word	0x00009262
    8ab4:	00000000 	.word	0x00000000
    8ab8:	0000885f 	.word	0x0000885f

00008abc <_printf_common>:
    8abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8abe:	0015      	movs	r5, r2
    8ac0:	9301      	str	r3, [sp, #4]
    8ac2:	688a      	ldr	r2, [r1, #8]
    8ac4:	690b      	ldr	r3, [r1, #16]
    8ac6:	9000      	str	r0, [sp, #0]
    8ac8:	000c      	movs	r4, r1
    8aca:	4293      	cmp	r3, r2
    8acc:	da00      	bge.n	8ad0 <_printf_common+0x14>
    8ace:	0013      	movs	r3, r2
    8ad0:	0022      	movs	r2, r4
    8ad2:	602b      	str	r3, [r5, #0]
    8ad4:	3243      	adds	r2, #67	; 0x43
    8ad6:	7812      	ldrb	r2, [r2, #0]
    8ad8:	2a00      	cmp	r2, #0
    8ada:	d001      	beq.n	8ae0 <_printf_common+0x24>
    8adc:	3301      	adds	r3, #1
    8ade:	602b      	str	r3, [r5, #0]
    8ae0:	6823      	ldr	r3, [r4, #0]
    8ae2:	069b      	lsls	r3, r3, #26
    8ae4:	d502      	bpl.n	8aec <_printf_common+0x30>
    8ae6:	682b      	ldr	r3, [r5, #0]
    8ae8:	3302      	adds	r3, #2
    8aea:	602b      	str	r3, [r5, #0]
    8aec:	2706      	movs	r7, #6
    8aee:	6823      	ldr	r3, [r4, #0]
    8af0:	401f      	ands	r7, r3
    8af2:	d027      	beq.n	8b44 <_printf_common+0x88>
    8af4:	0023      	movs	r3, r4
    8af6:	3343      	adds	r3, #67	; 0x43
    8af8:	781b      	ldrb	r3, [r3, #0]
    8afa:	1e5a      	subs	r2, r3, #1
    8afc:	4193      	sbcs	r3, r2
    8afe:	6822      	ldr	r2, [r4, #0]
    8b00:	0692      	lsls	r2, r2, #26
    8b02:	d430      	bmi.n	8b66 <_printf_common+0xaa>
    8b04:	0022      	movs	r2, r4
    8b06:	9901      	ldr	r1, [sp, #4]
    8b08:	3243      	adds	r2, #67	; 0x43
    8b0a:	9800      	ldr	r0, [sp, #0]
    8b0c:	9e08      	ldr	r6, [sp, #32]
    8b0e:	47b0      	blx	r6
    8b10:	1c43      	adds	r3, r0, #1
    8b12:	d025      	beq.n	8b60 <_printf_common+0xa4>
    8b14:	2306      	movs	r3, #6
    8b16:	6820      	ldr	r0, [r4, #0]
    8b18:	682a      	ldr	r2, [r5, #0]
    8b1a:	68e1      	ldr	r1, [r4, #12]
    8b1c:	4003      	ands	r3, r0
    8b1e:	2500      	movs	r5, #0
    8b20:	2b04      	cmp	r3, #4
    8b22:	d103      	bne.n	8b2c <_printf_common+0x70>
    8b24:	1a8d      	subs	r5, r1, r2
    8b26:	43eb      	mvns	r3, r5
    8b28:	17db      	asrs	r3, r3, #31
    8b2a:	401d      	ands	r5, r3
    8b2c:	68a3      	ldr	r3, [r4, #8]
    8b2e:	6922      	ldr	r2, [r4, #16]
    8b30:	4293      	cmp	r3, r2
    8b32:	dd01      	ble.n	8b38 <_printf_common+0x7c>
    8b34:	1a9b      	subs	r3, r3, r2
    8b36:	18ed      	adds	r5, r5, r3
    8b38:	2700      	movs	r7, #0
    8b3a:	42bd      	cmp	r5, r7
    8b3c:	d120      	bne.n	8b80 <_printf_common+0xc4>
    8b3e:	2000      	movs	r0, #0
    8b40:	e010      	b.n	8b64 <_printf_common+0xa8>
    8b42:	3701      	adds	r7, #1
    8b44:	68e3      	ldr	r3, [r4, #12]
    8b46:	682a      	ldr	r2, [r5, #0]
    8b48:	1a9b      	subs	r3, r3, r2
    8b4a:	429f      	cmp	r7, r3
    8b4c:	dad2      	bge.n	8af4 <_printf_common+0x38>
    8b4e:	0022      	movs	r2, r4
    8b50:	2301      	movs	r3, #1
    8b52:	3219      	adds	r2, #25
    8b54:	9901      	ldr	r1, [sp, #4]
    8b56:	9800      	ldr	r0, [sp, #0]
    8b58:	9e08      	ldr	r6, [sp, #32]
    8b5a:	47b0      	blx	r6
    8b5c:	1c43      	adds	r3, r0, #1
    8b5e:	d1f0      	bne.n	8b42 <_printf_common+0x86>
    8b60:	2001      	movs	r0, #1
    8b62:	4240      	negs	r0, r0
    8b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b66:	2030      	movs	r0, #48	; 0x30
    8b68:	18e1      	adds	r1, r4, r3
    8b6a:	3143      	adds	r1, #67	; 0x43
    8b6c:	7008      	strb	r0, [r1, #0]
    8b6e:	0021      	movs	r1, r4
    8b70:	1c5a      	adds	r2, r3, #1
    8b72:	3145      	adds	r1, #69	; 0x45
    8b74:	7809      	ldrb	r1, [r1, #0]
    8b76:	18a2      	adds	r2, r4, r2
    8b78:	3243      	adds	r2, #67	; 0x43
    8b7a:	3302      	adds	r3, #2
    8b7c:	7011      	strb	r1, [r2, #0]
    8b7e:	e7c1      	b.n	8b04 <_printf_common+0x48>
    8b80:	0022      	movs	r2, r4
    8b82:	2301      	movs	r3, #1
    8b84:	321a      	adds	r2, #26
    8b86:	9901      	ldr	r1, [sp, #4]
    8b88:	9800      	ldr	r0, [sp, #0]
    8b8a:	9e08      	ldr	r6, [sp, #32]
    8b8c:	47b0      	blx	r6
    8b8e:	1c43      	adds	r3, r0, #1
    8b90:	d0e6      	beq.n	8b60 <_printf_common+0xa4>
    8b92:	3701      	adds	r7, #1
    8b94:	e7d1      	b.n	8b3a <_printf_common+0x7e>
	...

00008b98 <_printf_i>:
    8b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9a:	b08b      	sub	sp, #44	; 0x2c
    8b9c:	9206      	str	r2, [sp, #24]
    8b9e:	000a      	movs	r2, r1
    8ba0:	3243      	adds	r2, #67	; 0x43
    8ba2:	9307      	str	r3, [sp, #28]
    8ba4:	9005      	str	r0, [sp, #20]
    8ba6:	9204      	str	r2, [sp, #16]
    8ba8:	7e0a      	ldrb	r2, [r1, #24]
    8baa:	000c      	movs	r4, r1
    8bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8bae:	2a6e      	cmp	r2, #110	; 0x6e
    8bb0:	d100      	bne.n	8bb4 <_printf_i+0x1c>
    8bb2:	e08f      	b.n	8cd4 <_printf_i+0x13c>
    8bb4:	d817      	bhi.n	8be6 <_printf_i+0x4e>
    8bb6:	2a63      	cmp	r2, #99	; 0x63
    8bb8:	d02c      	beq.n	8c14 <_printf_i+0x7c>
    8bba:	d808      	bhi.n	8bce <_printf_i+0x36>
    8bbc:	2a00      	cmp	r2, #0
    8bbe:	d100      	bne.n	8bc2 <_printf_i+0x2a>
    8bc0:	e099      	b.n	8cf6 <_printf_i+0x15e>
    8bc2:	2a58      	cmp	r2, #88	; 0x58
    8bc4:	d054      	beq.n	8c70 <_printf_i+0xd8>
    8bc6:	0026      	movs	r6, r4
    8bc8:	3642      	adds	r6, #66	; 0x42
    8bca:	7032      	strb	r2, [r6, #0]
    8bcc:	e029      	b.n	8c22 <_printf_i+0x8a>
    8bce:	2a64      	cmp	r2, #100	; 0x64
    8bd0:	d001      	beq.n	8bd6 <_printf_i+0x3e>
    8bd2:	2a69      	cmp	r2, #105	; 0x69
    8bd4:	d1f7      	bne.n	8bc6 <_printf_i+0x2e>
    8bd6:	6821      	ldr	r1, [r4, #0]
    8bd8:	681a      	ldr	r2, [r3, #0]
    8bda:	0608      	lsls	r0, r1, #24
    8bdc:	d523      	bpl.n	8c26 <_printf_i+0x8e>
    8bde:	1d11      	adds	r1, r2, #4
    8be0:	6019      	str	r1, [r3, #0]
    8be2:	6815      	ldr	r5, [r2, #0]
    8be4:	e025      	b.n	8c32 <_printf_i+0x9a>
    8be6:	2a73      	cmp	r2, #115	; 0x73
    8be8:	d100      	bne.n	8bec <_printf_i+0x54>
    8bea:	e088      	b.n	8cfe <_printf_i+0x166>
    8bec:	d808      	bhi.n	8c00 <_printf_i+0x68>
    8bee:	2a6f      	cmp	r2, #111	; 0x6f
    8bf0:	d029      	beq.n	8c46 <_printf_i+0xae>
    8bf2:	2a70      	cmp	r2, #112	; 0x70
    8bf4:	d1e7      	bne.n	8bc6 <_printf_i+0x2e>
    8bf6:	2220      	movs	r2, #32
    8bf8:	6809      	ldr	r1, [r1, #0]
    8bfa:	430a      	orrs	r2, r1
    8bfc:	6022      	str	r2, [r4, #0]
    8bfe:	e003      	b.n	8c08 <_printf_i+0x70>
    8c00:	2a75      	cmp	r2, #117	; 0x75
    8c02:	d020      	beq.n	8c46 <_printf_i+0xae>
    8c04:	2a78      	cmp	r2, #120	; 0x78
    8c06:	d1de      	bne.n	8bc6 <_printf_i+0x2e>
    8c08:	0022      	movs	r2, r4
    8c0a:	2178      	movs	r1, #120	; 0x78
    8c0c:	3245      	adds	r2, #69	; 0x45
    8c0e:	7011      	strb	r1, [r2, #0]
    8c10:	4a6c      	ldr	r2, [pc, #432]	; (8dc4 <_printf_i+0x22c>)
    8c12:	e030      	b.n	8c76 <_printf_i+0xde>
    8c14:	000e      	movs	r6, r1
    8c16:	681a      	ldr	r2, [r3, #0]
    8c18:	3642      	adds	r6, #66	; 0x42
    8c1a:	1d11      	adds	r1, r2, #4
    8c1c:	6019      	str	r1, [r3, #0]
    8c1e:	6813      	ldr	r3, [r2, #0]
    8c20:	7033      	strb	r3, [r6, #0]
    8c22:	2301      	movs	r3, #1
    8c24:	e079      	b.n	8d1a <_printf_i+0x182>
    8c26:	0649      	lsls	r1, r1, #25
    8c28:	d5d9      	bpl.n	8bde <_printf_i+0x46>
    8c2a:	1d11      	adds	r1, r2, #4
    8c2c:	6019      	str	r1, [r3, #0]
    8c2e:	2300      	movs	r3, #0
    8c30:	5ed5      	ldrsh	r5, [r2, r3]
    8c32:	2d00      	cmp	r5, #0
    8c34:	da03      	bge.n	8c3e <_printf_i+0xa6>
    8c36:	232d      	movs	r3, #45	; 0x2d
    8c38:	9a04      	ldr	r2, [sp, #16]
    8c3a:	426d      	negs	r5, r5
    8c3c:	7013      	strb	r3, [r2, #0]
    8c3e:	4b62      	ldr	r3, [pc, #392]	; (8dc8 <_printf_i+0x230>)
    8c40:	270a      	movs	r7, #10
    8c42:	9303      	str	r3, [sp, #12]
    8c44:	e02f      	b.n	8ca6 <_printf_i+0x10e>
    8c46:	6820      	ldr	r0, [r4, #0]
    8c48:	6819      	ldr	r1, [r3, #0]
    8c4a:	0605      	lsls	r5, r0, #24
    8c4c:	d503      	bpl.n	8c56 <_printf_i+0xbe>
    8c4e:	1d08      	adds	r0, r1, #4
    8c50:	6018      	str	r0, [r3, #0]
    8c52:	680d      	ldr	r5, [r1, #0]
    8c54:	e005      	b.n	8c62 <_printf_i+0xca>
    8c56:	0640      	lsls	r0, r0, #25
    8c58:	d5f9      	bpl.n	8c4e <_printf_i+0xb6>
    8c5a:	680d      	ldr	r5, [r1, #0]
    8c5c:	1d08      	adds	r0, r1, #4
    8c5e:	6018      	str	r0, [r3, #0]
    8c60:	b2ad      	uxth	r5, r5
    8c62:	4b59      	ldr	r3, [pc, #356]	; (8dc8 <_printf_i+0x230>)
    8c64:	2708      	movs	r7, #8
    8c66:	9303      	str	r3, [sp, #12]
    8c68:	2a6f      	cmp	r2, #111	; 0x6f
    8c6a:	d018      	beq.n	8c9e <_printf_i+0x106>
    8c6c:	270a      	movs	r7, #10
    8c6e:	e016      	b.n	8c9e <_printf_i+0x106>
    8c70:	3145      	adds	r1, #69	; 0x45
    8c72:	700a      	strb	r2, [r1, #0]
    8c74:	4a54      	ldr	r2, [pc, #336]	; (8dc8 <_printf_i+0x230>)
    8c76:	9203      	str	r2, [sp, #12]
    8c78:	681a      	ldr	r2, [r3, #0]
    8c7a:	6821      	ldr	r1, [r4, #0]
    8c7c:	1d10      	adds	r0, r2, #4
    8c7e:	6018      	str	r0, [r3, #0]
    8c80:	6815      	ldr	r5, [r2, #0]
    8c82:	0608      	lsls	r0, r1, #24
    8c84:	d522      	bpl.n	8ccc <_printf_i+0x134>
    8c86:	07cb      	lsls	r3, r1, #31
    8c88:	d502      	bpl.n	8c90 <_printf_i+0xf8>
    8c8a:	2320      	movs	r3, #32
    8c8c:	4319      	orrs	r1, r3
    8c8e:	6021      	str	r1, [r4, #0]
    8c90:	2710      	movs	r7, #16
    8c92:	2d00      	cmp	r5, #0
    8c94:	d103      	bne.n	8c9e <_printf_i+0x106>
    8c96:	2320      	movs	r3, #32
    8c98:	6822      	ldr	r2, [r4, #0]
    8c9a:	439a      	bics	r2, r3
    8c9c:	6022      	str	r2, [r4, #0]
    8c9e:	0023      	movs	r3, r4
    8ca0:	2200      	movs	r2, #0
    8ca2:	3343      	adds	r3, #67	; 0x43
    8ca4:	701a      	strb	r2, [r3, #0]
    8ca6:	6863      	ldr	r3, [r4, #4]
    8ca8:	60a3      	str	r3, [r4, #8]
    8caa:	2b00      	cmp	r3, #0
    8cac:	db5c      	blt.n	8d68 <_printf_i+0x1d0>
    8cae:	2204      	movs	r2, #4
    8cb0:	6821      	ldr	r1, [r4, #0]
    8cb2:	4391      	bics	r1, r2
    8cb4:	6021      	str	r1, [r4, #0]
    8cb6:	2d00      	cmp	r5, #0
    8cb8:	d158      	bne.n	8d6c <_printf_i+0x1d4>
    8cba:	9e04      	ldr	r6, [sp, #16]
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d064      	beq.n	8d8a <_printf_i+0x1f2>
    8cc0:	0026      	movs	r6, r4
    8cc2:	9b03      	ldr	r3, [sp, #12]
    8cc4:	3642      	adds	r6, #66	; 0x42
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	7033      	strb	r3, [r6, #0]
    8cca:	e05e      	b.n	8d8a <_printf_i+0x1f2>
    8ccc:	0648      	lsls	r0, r1, #25
    8cce:	d5da      	bpl.n	8c86 <_printf_i+0xee>
    8cd0:	b2ad      	uxth	r5, r5
    8cd2:	e7d8      	b.n	8c86 <_printf_i+0xee>
    8cd4:	6809      	ldr	r1, [r1, #0]
    8cd6:	681a      	ldr	r2, [r3, #0]
    8cd8:	0608      	lsls	r0, r1, #24
    8cda:	d505      	bpl.n	8ce8 <_printf_i+0x150>
    8cdc:	1d11      	adds	r1, r2, #4
    8cde:	6019      	str	r1, [r3, #0]
    8ce0:	6813      	ldr	r3, [r2, #0]
    8ce2:	6962      	ldr	r2, [r4, #20]
    8ce4:	601a      	str	r2, [r3, #0]
    8ce6:	e006      	b.n	8cf6 <_printf_i+0x15e>
    8ce8:	0649      	lsls	r1, r1, #25
    8cea:	d5f7      	bpl.n	8cdc <_printf_i+0x144>
    8cec:	1d11      	adds	r1, r2, #4
    8cee:	6019      	str	r1, [r3, #0]
    8cf0:	6813      	ldr	r3, [r2, #0]
    8cf2:	8aa2      	ldrh	r2, [r4, #20]
    8cf4:	801a      	strh	r2, [r3, #0]
    8cf6:	2300      	movs	r3, #0
    8cf8:	9e04      	ldr	r6, [sp, #16]
    8cfa:	6123      	str	r3, [r4, #16]
    8cfc:	e054      	b.n	8da8 <_printf_i+0x210>
    8cfe:	681a      	ldr	r2, [r3, #0]
    8d00:	1d11      	adds	r1, r2, #4
    8d02:	6019      	str	r1, [r3, #0]
    8d04:	6816      	ldr	r6, [r2, #0]
    8d06:	2100      	movs	r1, #0
    8d08:	6862      	ldr	r2, [r4, #4]
    8d0a:	0030      	movs	r0, r6
    8d0c:	f000 f91a 	bl	8f44 <memchr>
    8d10:	2800      	cmp	r0, #0
    8d12:	d001      	beq.n	8d18 <_printf_i+0x180>
    8d14:	1b80      	subs	r0, r0, r6
    8d16:	6060      	str	r0, [r4, #4]
    8d18:	6863      	ldr	r3, [r4, #4]
    8d1a:	6123      	str	r3, [r4, #16]
    8d1c:	2300      	movs	r3, #0
    8d1e:	9a04      	ldr	r2, [sp, #16]
    8d20:	7013      	strb	r3, [r2, #0]
    8d22:	e041      	b.n	8da8 <_printf_i+0x210>
    8d24:	6923      	ldr	r3, [r4, #16]
    8d26:	0032      	movs	r2, r6
    8d28:	9906      	ldr	r1, [sp, #24]
    8d2a:	9805      	ldr	r0, [sp, #20]
    8d2c:	9d07      	ldr	r5, [sp, #28]
    8d2e:	47a8      	blx	r5
    8d30:	1c43      	adds	r3, r0, #1
    8d32:	d043      	beq.n	8dbc <_printf_i+0x224>
    8d34:	6823      	ldr	r3, [r4, #0]
    8d36:	2500      	movs	r5, #0
    8d38:	079b      	lsls	r3, r3, #30
    8d3a:	d40f      	bmi.n	8d5c <_printf_i+0x1c4>
    8d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d3e:	68e0      	ldr	r0, [r4, #12]
    8d40:	4298      	cmp	r0, r3
    8d42:	da3d      	bge.n	8dc0 <_printf_i+0x228>
    8d44:	0018      	movs	r0, r3
    8d46:	e03b      	b.n	8dc0 <_printf_i+0x228>
    8d48:	0022      	movs	r2, r4
    8d4a:	2301      	movs	r3, #1
    8d4c:	3219      	adds	r2, #25
    8d4e:	9906      	ldr	r1, [sp, #24]
    8d50:	9805      	ldr	r0, [sp, #20]
    8d52:	9e07      	ldr	r6, [sp, #28]
    8d54:	47b0      	blx	r6
    8d56:	1c43      	adds	r3, r0, #1
    8d58:	d030      	beq.n	8dbc <_printf_i+0x224>
    8d5a:	3501      	adds	r5, #1
    8d5c:	68e3      	ldr	r3, [r4, #12]
    8d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d60:	1a9b      	subs	r3, r3, r2
    8d62:	429d      	cmp	r5, r3
    8d64:	dbf0      	blt.n	8d48 <_printf_i+0x1b0>
    8d66:	e7e9      	b.n	8d3c <_printf_i+0x1a4>
    8d68:	2d00      	cmp	r5, #0
    8d6a:	d0a9      	beq.n	8cc0 <_printf_i+0x128>
    8d6c:	9e04      	ldr	r6, [sp, #16]
    8d6e:	0028      	movs	r0, r5
    8d70:	0039      	movs	r1, r7
    8d72:	f7fd fa45 	bl	6200 <__aeabi_uidivmod>
    8d76:	9b03      	ldr	r3, [sp, #12]
    8d78:	3e01      	subs	r6, #1
    8d7a:	5c5b      	ldrb	r3, [r3, r1]
    8d7c:	0028      	movs	r0, r5
    8d7e:	7033      	strb	r3, [r6, #0]
    8d80:	0039      	movs	r1, r7
    8d82:	f7fd f9b7 	bl	60f4 <__udivsi3>
    8d86:	1e05      	subs	r5, r0, #0
    8d88:	d1f1      	bne.n	8d6e <_printf_i+0x1d6>
    8d8a:	2f08      	cmp	r7, #8
    8d8c:	d109      	bne.n	8da2 <_printf_i+0x20a>
    8d8e:	6823      	ldr	r3, [r4, #0]
    8d90:	07db      	lsls	r3, r3, #31
    8d92:	d506      	bpl.n	8da2 <_printf_i+0x20a>
    8d94:	6863      	ldr	r3, [r4, #4]
    8d96:	6922      	ldr	r2, [r4, #16]
    8d98:	4293      	cmp	r3, r2
    8d9a:	dc02      	bgt.n	8da2 <_printf_i+0x20a>
    8d9c:	2330      	movs	r3, #48	; 0x30
    8d9e:	3e01      	subs	r6, #1
    8da0:	7033      	strb	r3, [r6, #0]
    8da2:	9b04      	ldr	r3, [sp, #16]
    8da4:	1b9b      	subs	r3, r3, r6
    8da6:	6123      	str	r3, [r4, #16]
    8da8:	9b07      	ldr	r3, [sp, #28]
    8daa:	aa09      	add	r2, sp, #36	; 0x24
    8dac:	9300      	str	r3, [sp, #0]
    8dae:	0021      	movs	r1, r4
    8db0:	9b06      	ldr	r3, [sp, #24]
    8db2:	9805      	ldr	r0, [sp, #20]
    8db4:	f7ff fe82 	bl	8abc <_printf_common>
    8db8:	1c43      	adds	r3, r0, #1
    8dba:	d1b3      	bne.n	8d24 <_printf_i+0x18c>
    8dbc:	2001      	movs	r0, #1
    8dbe:	4240      	negs	r0, r0
    8dc0:	b00b      	add	sp, #44	; 0x2c
    8dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dc4:	0000927a 	.word	0x0000927a
    8dc8:	00009269 	.word	0x00009269

00008dcc <_sbrk_r>:
    8dcc:	2300      	movs	r3, #0
    8dce:	b570      	push	{r4, r5, r6, lr}
    8dd0:	4c06      	ldr	r4, [pc, #24]	; (8dec <_sbrk_r+0x20>)
    8dd2:	0005      	movs	r5, r0
    8dd4:	0008      	movs	r0, r1
    8dd6:	6023      	str	r3, [r4, #0]
    8dd8:	f7fc f9b6 	bl	5148 <_sbrk>
    8ddc:	1c43      	adds	r3, r0, #1
    8dde:	d103      	bne.n	8de8 <_sbrk_r+0x1c>
    8de0:	6823      	ldr	r3, [r4, #0]
    8de2:	2b00      	cmp	r3, #0
    8de4:	d000      	beq.n	8de8 <_sbrk_r+0x1c>
    8de6:	602b      	str	r3, [r5, #0]
    8de8:	bd70      	pop	{r4, r5, r6, pc}
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	20000c44 	.word	0x20000c44

00008df0 <__sread>:
    8df0:	b570      	push	{r4, r5, r6, lr}
    8df2:	000c      	movs	r4, r1
    8df4:	250e      	movs	r5, #14
    8df6:	5f49      	ldrsh	r1, [r1, r5]
    8df8:	f000 f8b2 	bl	8f60 <_read_r>
    8dfc:	2800      	cmp	r0, #0
    8dfe:	db03      	blt.n	8e08 <__sread+0x18>
    8e00:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8e02:	181b      	adds	r3, r3, r0
    8e04:	6563      	str	r3, [r4, #84]	; 0x54
    8e06:	bd70      	pop	{r4, r5, r6, pc}
    8e08:	89a3      	ldrh	r3, [r4, #12]
    8e0a:	4a02      	ldr	r2, [pc, #8]	; (8e14 <__sread+0x24>)
    8e0c:	4013      	ands	r3, r2
    8e0e:	81a3      	strh	r3, [r4, #12]
    8e10:	e7f9      	b.n	8e06 <__sread+0x16>
    8e12:	46c0      	nop			; (mov r8, r8)
    8e14:	ffffefff 	.word	0xffffefff

00008e18 <__swrite>:
    8e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e1a:	001f      	movs	r7, r3
    8e1c:	898b      	ldrh	r3, [r1, #12]
    8e1e:	0005      	movs	r5, r0
    8e20:	000c      	movs	r4, r1
    8e22:	0016      	movs	r6, r2
    8e24:	05db      	lsls	r3, r3, #23
    8e26:	d505      	bpl.n	8e34 <__swrite+0x1c>
    8e28:	230e      	movs	r3, #14
    8e2a:	5ec9      	ldrsh	r1, [r1, r3]
    8e2c:	2200      	movs	r2, #0
    8e2e:	2302      	movs	r3, #2
    8e30:	f000 f874 	bl	8f1c <_lseek_r>
    8e34:	89a3      	ldrh	r3, [r4, #12]
    8e36:	4a05      	ldr	r2, [pc, #20]	; (8e4c <__swrite+0x34>)
    8e38:	0028      	movs	r0, r5
    8e3a:	4013      	ands	r3, r2
    8e3c:	81a3      	strh	r3, [r4, #12]
    8e3e:	0032      	movs	r2, r6
    8e40:	230e      	movs	r3, #14
    8e42:	5ee1      	ldrsh	r1, [r4, r3]
    8e44:	003b      	movs	r3, r7
    8e46:	f000 f81f 	bl	8e88 <_write_r>
    8e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e4c:	ffffefff 	.word	0xffffefff

00008e50 <__sseek>:
    8e50:	b570      	push	{r4, r5, r6, lr}
    8e52:	000c      	movs	r4, r1
    8e54:	250e      	movs	r5, #14
    8e56:	5f49      	ldrsh	r1, [r1, r5]
    8e58:	f000 f860 	bl	8f1c <_lseek_r>
    8e5c:	89a3      	ldrh	r3, [r4, #12]
    8e5e:	1c42      	adds	r2, r0, #1
    8e60:	d103      	bne.n	8e6a <__sseek+0x1a>
    8e62:	4a05      	ldr	r2, [pc, #20]	; (8e78 <__sseek+0x28>)
    8e64:	4013      	ands	r3, r2
    8e66:	81a3      	strh	r3, [r4, #12]
    8e68:	bd70      	pop	{r4, r5, r6, pc}
    8e6a:	2280      	movs	r2, #128	; 0x80
    8e6c:	0152      	lsls	r2, r2, #5
    8e6e:	4313      	orrs	r3, r2
    8e70:	81a3      	strh	r3, [r4, #12]
    8e72:	6560      	str	r0, [r4, #84]	; 0x54
    8e74:	e7f8      	b.n	8e68 <__sseek+0x18>
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	ffffefff 	.word	0xffffefff

00008e7c <__sclose>:
    8e7c:	b510      	push	{r4, lr}
    8e7e:	230e      	movs	r3, #14
    8e80:	5ec9      	ldrsh	r1, [r1, r3]
    8e82:	f000 f815 	bl	8eb0 <_close_r>
    8e86:	bd10      	pop	{r4, pc}

00008e88 <_write_r>:
    8e88:	b570      	push	{r4, r5, r6, lr}
    8e8a:	0005      	movs	r5, r0
    8e8c:	0008      	movs	r0, r1
    8e8e:	0011      	movs	r1, r2
    8e90:	2200      	movs	r2, #0
    8e92:	4c06      	ldr	r4, [pc, #24]	; (8eac <_write_r+0x24>)
    8e94:	6022      	str	r2, [r4, #0]
    8e96:	001a      	movs	r2, r3
    8e98:	f7fc f932 	bl	5100 <_write>
    8e9c:	1c43      	adds	r3, r0, #1
    8e9e:	d103      	bne.n	8ea8 <_write_r+0x20>
    8ea0:	6823      	ldr	r3, [r4, #0]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d000      	beq.n	8ea8 <_write_r+0x20>
    8ea6:	602b      	str	r3, [r5, #0]
    8ea8:	bd70      	pop	{r4, r5, r6, pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	20000c44 	.word	0x20000c44

00008eb0 <_close_r>:
    8eb0:	2300      	movs	r3, #0
    8eb2:	b570      	push	{r4, r5, r6, lr}
    8eb4:	4c06      	ldr	r4, [pc, #24]	; (8ed0 <_close_r+0x20>)
    8eb6:	0005      	movs	r5, r0
    8eb8:	0008      	movs	r0, r1
    8eba:	6023      	str	r3, [r4, #0]
    8ebc:	f7fc f952 	bl	5164 <_close>
    8ec0:	1c43      	adds	r3, r0, #1
    8ec2:	d103      	bne.n	8ecc <_close_r+0x1c>
    8ec4:	6823      	ldr	r3, [r4, #0]
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d000      	beq.n	8ecc <_close_r+0x1c>
    8eca:	602b      	str	r3, [r5, #0]
    8ecc:	bd70      	pop	{r4, r5, r6, pc}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	20000c44 	.word	0x20000c44

00008ed4 <_fstat_r>:
    8ed4:	2300      	movs	r3, #0
    8ed6:	b570      	push	{r4, r5, r6, lr}
    8ed8:	4c06      	ldr	r4, [pc, #24]	; (8ef4 <_fstat_r+0x20>)
    8eda:	0005      	movs	r5, r0
    8edc:	0008      	movs	r0, r1
    8ede:	0011      	movs	r1, r2
    8ee0:	6023      	str	r3, [r4, #0]
    8ee2:	f7fc f943 	bl	516c <_fstat>
    8ee6:	1c43      	adds	r3, r0, #1
    8ee8:	d103      	bne.n	8ef2 <_fstat_r+0x1e>
    8eea:	6823      	ldr	r3, [r4, #0]
    8eec:	2b00      	cmp	r3, #0
    8eee:	d000      	beq.n	8ef2 <_fstat_r+0x1e>
    8ef0:	602b      	str	r3, [r5, #0]
    8ef2:	bd70      	pop	{r4, r5, r6, pc}
    8ef4:	20000c44 	.word	0x20000c44

00008ef8 <_isatty_r>:
    8ef8:	2300      	movs	r3, #0
    8efa:	b570      	push	{r4, r5, r6, lr}
    8efc:	4c06      	ldr	r4, [pc, #24]	; (8f18 <_isatty_r+0x20>)
    8efe:	0005      	movs	r5, r0
    8f00:	0008      	movs	r0, r1
    8f02:	6023      	str	r3, [r4, #0]
    8f04:	f7fc f938 	bl	5178 <_isatty>
    8f08:	1c43      	adds	r3, r0, #1
    8f0a:	d103      	bne.n	8f14 <_isatty_r+0x1c>
    8f0c:	6823      	ldr	r3, [r4, #0]
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d000      	beq.n	8f14 <_isatty_r+0x1c>
    8f12:	602b      	str	r3, [r5, #0]
    8f14:	bd70      	pop	{r4, r5, r6, pc}
    8f16:	46c0      	nop			; (mov r8, r8)
    8f18:	20000c44 	.word	0x20000c44

00008f1c <_lseek_r>:
    8f1c:	b570      	push	{r4, r5, r6, lr}
    8f1e:	0005      	movs	r5, r0
    8f20:	0008      	movs	r0, r1
    8f22:	0011      	movs	r1, r2
    8f24:	2200      	movs	r2, #0
    8f26:	4c06      	ldr	r4, [pc, #24]	; (8f40 <_lseek_r+0x24>)
    8f28:	6022      	str	r2, [r4, #0]
    8f2a:	001a      	movs	r2, r3
    8f2c:	f7fc f926 	bl	517c <_lseek>
    8f30:	1c43      	adds	r3, r0, #1
    8f32:	d103      	bne.n	8f3c <_lseek_r+0x20>
    8f34:	6823      	ldr	r3, [r4, #0]
    8f36:	2b00      	cmp	r3, #0
    8f38:	d000      	beq.n	8f3c <_lseek_r+0x20>
    8f3a:	602b      	str	r3, [r5, #0]
    8f3c:	bd70      	pop	{r4, r5, r6, pc}
    8f3e:	46c0      	nop			; (mov r8, r8)
    8f40:	20000c44 	.word	0x20000c44

00008f44 <memchr>:
    8f44:	b2c9      	uxtb	r1, r1
    8f46:	1882      	adds	r2, r0, r2
    8f48:	4290      	cmp	r0, r2
    8f4a:	d101      	bne.n	8f50 <memchr+0xc>
    8f4c:	2000      	movs	r0, #0
    8f4e:	4770      	bx	lr
    8f50:	7803      	ldrb	r3, [r0, #0]
    8f52:	428b      	cmp	r3, r1
    8f54:	d0fb      	beq.n	8f4e <memchr+0xa>
    8f56:	3001      	adds	r0, #1
    8f58:	e7f6      	b.n	8f48 <memchr+0x4>

00008f5a <__malloc_lock>:
    8f5a:	4770      	bx	lr

00008f5c <__malloc_unlock>:
    8f5c:	4770      	bx	lr
	...

00008f60 <_read_r>:
    8f60:	b570      	push	{r4, r5, r6, lr}
    8f62:	0005      	movs	r5, r0
    8f64:	0008      	movs	r0, r1
    8f66:	0011      	movs	r1, r2
    8f68:	2200      	movs	r2, #0
    8f6a:	4c06      	ldr	r4, [pc, #24]	; (8f84 <_read_r+0x24>)
    8f6c:	6022      	str	r2, [r4, #0]
    8f6e:	001a      	movs	r2, r3
    8f70:	f7fc f8a4 	bl	50bc <_read>
    8f74:	1c43      	adds	r3, r0, #1
    8f76:	d103      	bne.n	8f80 <_read_r+0x20>
    8f78:	6823      	ldr	r3, [r4, #0]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d000      	beq.n	8f80 <_read_r+0x20>
    8f7e:	602b      	str	r3, [r5, #0]
    8f80:	bd70      	pop	{r4, r5, r6, pc}
    8f82:	46c0      	nop			; (mov r8, r8)
    8f84:	20000c44 	.word	0x20000c44
    8f88:	00002b0c 	.word	0x00002b0c
    8f8c:	000029ce 	.word	0x000029ce
    8f90:	000029ce 	.word	0x000029ce
    8f94:	000029ce 	.word	0x000029ce
    8f98:	000029ce 	.word	0x000029ce
    8f9c:	00002a9a 	.word	0x00002a9a
    8fa0:	000029ce 	.word	0x000029ce
    8fa4:	000029ce 	.word	0x000029ce
    8fa8:	000029ce 	.word	0x000029ce
    8fac:	000029ce 	.word	0x000029ce
    8fb0:	000029ce 	.word	0x000029ce
    8fb4:	000029ce 	.word	0x000029ce
    8fb8:	000029ce 	.word	0x000029ce
    8fbc:	000029ce 	.word	0x000029ce
    8fc0:	000029ce 	.word	0x000029ce
    8fc4:	00002af6 	.word	0x00002af6
    8fc8:	00002a1e 	.word	0x00002a1e
    8fcc:	000029ce 	.word	0x000029ce
    8fd0:	000029ce 	.word	0x000029ce
    8fd4:	000029ce 	.word	0x000029ce
    8fd8:	000029ce 	.word	0x000029ce
    8fdc:	00002a06 	.word	0x00002a06
    8fe0:	42000000 	.word	0x42000000
    8fe4:	42000400 	.word	0x42000400
    8fe8:	42000800 	.word	0x42000800
    8fec:	42000c00 	.word	0x42000c00
    8ff0:	42001000 	.word	0x42001000
    8ff4:	43000400 	.word	0x43000400
    8ff8:	000045d2 	.word	0x000045d2
    8ffc:	000045ea 	.word	0x000045ea
    9000:	000045ea 	.word	0x000045ea
    9004:	00004596 	.word	0x00004596
    9008:	00004596 	.word	0x00004596
    900c:	0000459c 	.word	0x0000459c
    9010:	000045a2 	.word	0x000045a2
    9014:	000045b2 	.word	0x000045b2
    9018:	000045d8 	.word	0x000045d8
    901c:	00004e9e 	.word	0x00004e9e
    9020:	00004e94 	.word	0x00004e94
    9024:	00004e8a 	.word	0x00004e8a
    9028:	00004d06 	.word	0x00004d06
    902c:	00004ea8 	.word	0x00004ea8
    9030:	00004f74 	.word	0x00004f74
    9034:	00004f48 	.word	0x00004f48
    9038:	00004f3e 	.word	0x00004f3e
    903c:	00004f34 	.word	0x00004f34
    9040:	00004f2a 	.word	0x00004f2a
    9044:	42002000 	.word	0x42002000
    9048:	42002400 	.word	0x42002400
    904c:	43000800 	.word	0x43000800
    9050:	00000002 	.word	0x00000002
    9054:	00000100 	.word	0x00000100
    9058:	00000002 	.word	0x00000002
    905c:	00000200 	.word	0x00000200
    9060:	00000003 	.word	0x00000003
    9064:	00000004 	.word	0x00000004
    9068:	4a325b1b 	.word	0x4a325b1b
    906c:	00200a0d 	.word	0x00200a0d
    9070:	614c0a0d 	.word	0x614c0a0d
    9074:	72207473 	.word	0x72207473
    9078:	74657365 	.word	0x74657365
    907c:	75616320 	.word	0x75616320
    9080:	203a6573 	.word	0x203a6573
    9084:	00000000 	.word	0x00000000
    9088:	74737953 	.word	0x74737953
    908c:	52206d65 	.word	0x52206d65
    9090:	74657365 	.word	0x74657365
    9094:	71655220 	.word	0x71655220
    9098:	74736575 	.word	0x74736575
    909c:	0000000d 	.word	0x0000000d
    90a0:	63746157 	.word	0x63746157
    90a4:	676f6468 	.word	0x676f6468
    90a8:	73655220 	.word	0x73655220
    90ac:	000d7465 	.word	0x000d7465
    90b0:	65747845 	.word	0x65747845
    90b4:	6c616e72 	.word	0x6c616e72
    90b8:	73655220 	.word	0x73655220
    90bc:	000d7465 	.word	0x000d7465
    90c0:	776f7242 	.word	0x776f7242
    90c4:	754f206e 	.word	0x754f206e
    90c8:	33332074 	.word	0x33332074
    90cc:	74654420 	.word	0x74654420
    90d0:	6f746365 	.word	0x6f746365
    90d4:	65522072 	.word	0x65522072
    90d8:	0d746573 	.word	0x0d746573
    90dc:	00000000 	.word	0x00000000
    90e0:	776f7242 	.word	0x776f7242
    90e4:	754f206e 	.word	0x754f206e
    90e8:	32312074 	.word	0x32312074
    90ec:	74654420 	.word	0x74654420
    90f0:	6f746365 	.word	0x6f746365
    90f4:	65522072 	.word	0x65522072
    90f8:	0d746573 	.word	0x0d746573
    90fc:	00000000 	.word	0x00000000
    9100:	65776f50 	.word	0x65776f50
    9104:	6e4f2d72 	.word	0x6e4f2d72
    9108:	73655220 	.word	0x73655220
    910c:	000d7465 	.word	0x000d7465
    9110:	74696157 	.word	0x74696157
    9114:	20676e69 	.word	0x20676e69
    9118:	4a206f74 	.word	0x4a206f74
    911c:	0d6e696f 	.word	0x0d6e696f
    9120:	00000000 	.word	0x00000000
    9124:	61746f54 	.word	0x61746f54
    9128:	6f43206c 	.word	0x6f43206c
    912c:	63656e6e 	.word	0x63656e6e
    9130:	6e6f6974 	.word	0x6e6f6974
    9134:	64253a73 	.word	0x64253a73
    9138:	00000a0d 	.word	0x00000a0d
    913c:	6e696f6a 	.word	0x6e696f6a
    9140:	61206465 	.word	0x61206465
    9144:	20612073 	.word	0x20612073
    9148:	20646e45 	.word	0x20646e45
    914c:	69766544 	.word	0x69766544
    9150:	2e2e6563 	.word	0x2e2e6563
    9154:	000d2e2e 	.word	0x000d2e2e
    9158:	65656c73 	.word	0x65656c73
    915c:	676e6970 	.word	0x676e6970
    9160:	65796220 	.word	0x65796220
    9164:	726f6620 	.word	0x726f6620
    9168:	776f6e20 	.word	0x776f6e20
    916c:	21212121 	.word	0x21212121
    9170:	00000000 	.word	0x00000000
    9174:	00006ab4 	.word	0x00006ab4
    9178:	00006a96 	.word	0x00006a96
    917c:	00006a50 	.word	0x00006a50
    9180:	0000696e 	.word	0x0000696e
    9184:	00006a50 	.word	0x00006a50
    9188:	00006a88 	.word	0x00006a88
    918c:	00006a50 	.word	0x00006a50
    9190:	0000696e 	.word	0x0000696e
    9194:	00006a96 	.word	0x00006a96
    9198:	00006a96 	.word	0x00006a96
    919c:	00006a88 	.word	0x00006a88
    91a0:	0000696e 	.word	0x0000696e
    91a4:	00006966 	.word	0x00006966
    91a8:	00006966 	.word	0x00006966
    91ac:	00006966 	.word	0x00006966
    91b0:	00006ccc 	.word	0x00006ccc
    91b4:	00007114 	.word	0x00007114
    91b8:	00006fd4 	.word	0x00006fd4
    91bc:	00006fd4 	.word	0x00006fd4
    91c0:	00006fd0 	.word	0x00006fd0
    91c4:	000070ec 	.word	0x000070ec
    91c8:	000070ec 	.word	0x000070ec
    91cc:	000070de 	.word	0x000070de
    91d0:	00006fd0 	.word	0x00006fd0
    91d4:	000070ec 	.word	0x000070ec
    91d8:	000070de 	.word	0x000070de
    91dc:	000070ec 	.word	0x000070ec
    91e0:	00006fd0 	.word	0x00006fd0
    91e4:	000070f4 	.word	0x000070f4
    91e8:	000070f4 	.word	0x000070f4
    91ec:	000070f4 	.word	0x000070f4
    91f0:	000072f8 	.word	0x000072f8

000091f4 <_global_impure_ptr>:
    91f4:	20000028                                (.. 

000091f8 <__sf_fake_stderr>:
	...

00009218 <__sf_fake_stdin>:
	...

00009238 <__sf_fake_stdout>:
	...
    9258:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    9268:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    9278:	31300046 35343332 39383736 64636261     F.0123456789abcd
    9288:	00006665                                ef..

0000928c <_init>:
    928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    928e:	46c0      	nop			; (mov r8, r8)
    9290:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9292:	bc08      	pop	{r3}
    9294:	469e      	mov	lr, r3
    9296:	4770      	bx	lr

00009298 <__init_array_start>:
    9298:	000000dd 	.word	0x000000dd

0000929c <_fini>:
    929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    92a2:	bc08      	pop	{r3}
    92a4:	469e      	mov	lr, r3
    92a6:	4770      	bx	lr

000092a8 <__fini_array_start>:
    92a8:	000000b5 	.word	0x000000b5
